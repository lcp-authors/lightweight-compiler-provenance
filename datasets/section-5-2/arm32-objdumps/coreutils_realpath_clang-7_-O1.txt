
../repos/coreutils/src/realpath:     file format elf32-littlearm


Disassembly of section .init:

00010dd0 <.init>:
   10dd0:	push	{r3, lr}
   10dd4:	bl	1109c <__mempcpy_chk@plt+0x48>
   10dd8:	pop	{r3, pc}

Disassembly of section .plt:

00010ddc <calloc@plt-0x14>:
   10ddc:	push	{lr}		; (str lr, [sp, #-4]!)
   10de0:	ldr	lr, [pc, #4]	; 10dec <calloc@plt-0x4>
   10de4:	add	lr, pc, lr
   10de8:	ldr	pc, [lr, #8]!
   10dec:	andeq	r7, r1, r4, lsl r2

00010df0 <calloc@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #94208	; 0x17000
   10df8:	ldr	pc, [ip, #532]!	; 0x214

00010dfc <fputs_unlocked@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #94208	; 0x17000
   10e04:	ldr	pc, [ip, #524]!	; 0x20c

00010e08 <raise@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #94208	; 0x17000
   10e10:	ldr	pc, [ip, #516]!	; 0x204

00010e14 <strcmp@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #94208	; 0x17000
   10e1c:	ldr	pc, [ip, #508]!	; 0x1fc

00010e20 <fflush@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #94208	; 0x17000
   10e28:	ldr	pc, [ip, #500]!	; 0x1f4

00010e2c <memmove@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #94208	; 0x17000
   10e34:	ldr	pc, [ip, #492]!	; 0x1ec

00010e38 <free@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #94208	; 0x17000
   10e40:	ldr	pc, [ip, #484]!	; 0x1e4

00010e44 <faccessat@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #94208	; 0x17000
   10e4c:	ldr	pc, [ip, #476]!	; 0x1dc

00010e50 <_exit@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #94208	; 0x17000
   10e58:	ldr	pc, [ip, #468]!	; 0x1d4

00010e5c <memcpy@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #94208	; 0x17000
   10e64:	ldr	pc, [ip, #460]!	; 0x1cc

00010e68 <mbsinit@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #94208	; 0x17000
   10e70:	ldr	pc, [ip, #452]!	; 0x1c4

00010e74 <memcmp@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #94208	; 0x17000
   10e7c:	ldr	pc, [ip, #444]!	; 0x1bc

00010e80 <dcgettext@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #94208	; 0x17000
   10e88:	ldr	pc, [ip, #436]!	; 0x1b4

00010e8c <realloc@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #428]!	; 0x1ac

00010e98 <textdomain@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #420]!	; 0x1a4

00010ea4 <rawmemchr@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #412]!	; 0x19c

00010eb0 <iswprint@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #404]!	; 0x194

00010ebc <readlink@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #396]!	; 0x18c

00010ec8 <fwrite@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #388]!	; 0x184

00010ed4 <lseek64@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #380]!	; 0x17c

00010ee0 <__ctype_get_mb_cur_max@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #372]!	; 0x174

00010eec <__fpending@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #364]!	; 0x16c

00010ef8 <ferror_unlocked@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #356]!	; 0x164

00010f04 <mbrtowc@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #348]!	; 0x15c

00010f10 <error@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #340]!	; 0x154

00010f1c <malloc@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #332]!	; 0x14c

00010f28 <__libc_start_main@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #324]!	; 0x144

00010f34 <__freading@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #316]!	; 0x13c

00010f40 <__gmon_start__@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #308]!	; 0x134

00010f4c <getopt_long@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #300]!	; 0x12c

00010f58 <__ctype_b_loc@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #292]!	; 0x124

00010f64 <getcwd@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #284]!	; 0x11c

00010f70 <exit@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #276]!	; 0x114

00010f7c <strlen@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #268]!	; 0x10c

00010f88 <__errno_location@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #260]!	; 0x104

00010f94 <__cxa_atexit@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #252]!	; 0xfc

00010fa0 <memset@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #244]!	; 0xf4

00010fac <__printf_chk@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #236]!	; 0xec

00010fb8 <fileno@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #228]!	; 0xe4

00010fc4 <__fprintf_chk@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #220]!	; 0xdc

00010fd0 <fclose@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #212]!	; 0xd4

00010fdc <fseeko64@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #204]!	; 0xcc

00010fe8 <setlocale@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #94208	; 0x17000
   10ff0:	ldr	pc, [ip, #196]!	; 0xc4

00010ff4 <strrchr@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #94208	; 0x17000
   10ffc:	ldr	pc, [ip, #188]!	; 0xbc

00011000 <nl_langinfo@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #94208	; 0x17000
   11008:	ldr	pc, [ip, #180]!	; 0xb4

0001100c <bindtextdomain@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #94208	; 0x17000
   11014:	ldr	pc, [ip, #172]!	; 0xac

00011018 <__xstat64@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #94208	; 0x17000
   11020:	ldr	pc, [ip, #164]!	; 0xa4

00011024 <strncmp@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #94208	; 0x17000
   1102c:	ldr	pc, [ip, #156]!	; 0x9c

00011030 <abort@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #94208	; 0x17000
   11038:	ldr	pc, [ip, #148]!	; 0x94

0001103c <putchar_unlocked@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #94208	; 0x17000
   11044:	ldr	pc, [ip, #140]!	; 0x8c

00011048 <strspn@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #94208	; 0x17000
   11050:	ldr	pc, [ip, #132]!	; 0x84

00011054 <__mempcpy_chk@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #94208	; 0x17000
   1105c:	ldr	pc, [ip, #124]!	; 0x7c

Disassembly of section .text:

00011060 <.text>:
   11060:	mov	fp, #0
   11064:	mov	lr, #0
   11068:	pop	{r1}		; (ldr r1, [sp], #4)
   1106c:	mov	r2, sp
   11070:	push	{r2}		; (str r2, [sp, #-4]!)
   11074:	push	{r0}		; (str r0, [sp, #-4]!)
   11078:	ldr	ip, [pc, #16]	; 11090 <__mempcpy_chk@plt+0x3c>
   1107c:	push	{ip}		; (str ip, [sp, #-4]!)
   11080:	ldr	r0, [pc, #12]	; 11094 <__mempcpy_chk@plt+0x40>
   11084:	ldr	r3, [pc, #12]	; 11098 <__mempcpy_chk@plt+0x44>
   11088:	bl	10f28 <__libc_start_main@plt>
   1108c:	bl	11030 <abort@plt>
   11090:	andeq	r6, r1, r4, lsr #19
   11094:	ldrdeq	r1, [r1], -ip
   11098:	andeq	r6, r1, r4, asr #18
   1109c:	ldr	r3, [pc, #20]	; 110b8 <__mempcpy_chk@plt+0x64>
   110a0:	ldr	r2, [pc, #20]	; 110bc <__mempcpy_chk@plt+0x68>
   110a4:	add	r3, pc, r3
   110a8:	ldr	r2, [r3, r2]
   110ac:	cmp	r2, #0
   110b0:	bxeq	lr
   110b4:	b	10f40 <__gmon_start__@plt>
   110b8:	andeq	r6, r1, r4, asr pc
   110bc:	ldrdeq	r0, [r0], -ip
   110c0:	ldr	r0, [pc, #24]	; 110e0 <__mempcpy_chk@plt+0x8c>
   110c4:	ldr	r3, [pc, #24]	; 110e4 <__mempcpy_chk@plt+0x90>
   110c8:	cmp	r3, r0
   110cc:	bxeq	lr
   110d0:	ldr	r3, [pc, #16]	; 110e8 <__mempcpy_chk@plt+0x94>
   110d4:	cmp	r3, #0
   110d8:	bxeq	lr
   110dc:	bx	r3
   110e0:	andeq	r8, r2, r0, lsr r1
   110e4:	andeq	r8, r2, r0, lsr r1
   110e8:	andeq	r0, r0, r0
   110ec:	ldr	r0, [pc, #36]	; 11118 <__mempcpy_chk@plt+0xc4>
   110f0:	ldr	r1, [pc, #36]	; 1111c <__mempcpy_chk@plt+0xc8>
   110f4:	sub	r1, r1, r0
   110f8:	asr	r1, r1, #2
   110fc:	add	r1, r1, r1, lsr #31
   11100:	asrs	r1, r1, #1
   11104:	bxeq	lr
   11108:	ldr	r3, [pc, #16]	; 11120 <__mempcpy_chk@plt+0xcc>
   1110c:	cmp	r3, #0
   11110:	bxeq	lr
   11114:	bx	r3
   11118:	andeq	r8, r2, r0, lsr r1
   1111c:	andeq	r8, r2, r0, lsr r1
   11120:	andeq	r0, r0, r0
   11124:	push	{r4, lr}
   11128:	ldr	r4, [pc, #24]	; 11148 <__mempcpy_chk@plt+0xf4>
   1112c:	ldrb	r3, [r4]
   11130:	cmp	r3, #0
   11134:	popne	{r4, pc}
   11138:	bl	110c0 <__mempcpy_chk@plt+0x6c>
   1113c:	mov	r3, #1
   11140:	strb	r3, [r4]
   11144:	pop	{r4, pc}
   11148:	andeq	r8, r2, ip, asr #2
   1114c:	b	110ec <__mempcpy_chk@plt+0x98>
   11150:	push	{fp, lr}
   11154:	mov	fp, sp
   11158:	mov	r4, r0
   1115c:	cmp	r0, #0
   11160:	bne	11214 <__mempcpy_chk@plt+0x1c0>
   11164:	movw	r1, #27139	; 0x6a03
   11168:	movt	r1, #1
   1116c:	mov	r0, #0
   11170:	mov	r2, #5
   11174:	bl	10e80 <dcgettext@plt>
   11178:	mov	r1, r0
   1117c:	movw	r0, #33124	; 0x8164
   11180:	movt	r0, #2
   11184:	ldr	r2, [r0]
   11188:	mov	r0, #1
   1118c:	bl	10fac <__printf_chk@plt>
   11190:	movw	r1, #27170	; 0x6a22
   11194:	movt	r1, #1
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	bl	10e80 <dcgettext@plt>
   111a4:	movw	r5, #33092	; 0x8144
   111a8:	movt	r5, #2
   111ac:	ldr	r1, [r5]
   111b0:	bl	10dfc <fputs_unlocked@plt>
   111b4:	movw	r1, #27249	; 0x6a71
   111b8:	movt	r1, #1
   111bc:	mov	r0, #0
   111c0:	mov	r2, #5
   111c4:	bl	10e80 <dcgettext@plt>
   111c8:	ldr	r1, [r5]
   111cc:	bl	10dfc <fputs_unlocked@plt>
   111d0:	movw	r1, #27875	; 0x6ce3
   111d4:	movt	r1, #1
   111d8:	mov	r0, #0
   111dc:	mov	r2, #5
   111e0:	bl	10e80 <dcgettext@plt>
   111e4:	ldr	r1, [r5]
   111e8:	bl	10dfc <fputs_unlocked@plt>
   111ec:	movw	r1, #27920	; 0x6d10
   111f0:	movt	r1, #1
   111f4:	mov	r0, #0
   111f8:	mov	r2, #5
   111fc:	bl	10e80 <dcgettext@plt>
   11200:	ldr	r1, [r5]
   11204:	bl	10dfc <fputs_unlocked@plt>
   11208:	bl	11258 <__mempcpy_chk@plt+0x204>
   1120c:	mov	r0, r4
   11210:	bl	10f70 <exit@plt>
   11214:	movw	r0, #33088	; 0x8140
   11218:	movt	r0, #2
   1121c:	ldr	r5, [r0]
   11220:	movw	r1, #27100	; 0x69dc
   11224:	movt	r1, #1
   11228:	mov	r0, #0
   1122c:	mov	r2, #5
   11230:	bl	10e80 <dcgettext@plt>
   11234:	mov	r2, r0
   11238:	movw	r0, #33124	; 0x8164
   1123c:	movt	r0, #2
   11240:	ldr	r3, [r0]
   11244:	mov	r0, r5
   11248:	mov	r1, #1
   1124c:	bl	10fc4 <__fprintf_chk@plt>
   11250:	mov	r0, r4
   11254:	bl	10f70 <exit@plt>
   11258:	push	{r4, r5, fp, lr}
   1125c:	add	fp, sp, #8
   11260:	sub	sp, sp, #56	; 0x38
   11264:	movw	r0, #28728	; 0x7038
   11268:	movt	r0, #1
   1126c:	add	r1, r0, #32
   11270:	mov	r5, sp
   11274:	mov	r2, #48	; 0x30
   11278:	vld1.64	{d16-d17}, [r1]
   1127c:	add	r1, r5, #32
   11280:	add	r3, r0, #16
   11284:	vld1.64	{d18-d19}, [r0], r2
   11288:	vld1.64	{d20-d21}, [r3]
   1128c:	vldr	d22, [r0]
   11290:	vst1.64	{d16-d17}, [r1]
   11294:	add	r0, r5, #16
   11298:	vst1.64	{d20-d21}, [r0]
   1129c:	mov	r0, r5
   112a0:	vst1.64	{d18-d19}, [r0], r2
   112a4:	vstr	d22, [r0]
   112a8:	ldr	r1, [sp]
   112ac:	cmp	r1, #0
   112b0:	beq	112d8 <__mempcpy_chk@plt+0x284>
   112b4:	mov	r5, sp
   112b8:	movw	r4, #27974	; 0x6d46
   112bc:	movt	r4, #1
   112c0:	mov	r0, r4
   112c4:	bl	10e14 <strcmp@plt>
   112c8:	cmp	r0, #0
   112cc:	ldrne	r1, [r5, #8]!
   112d0:	cmpne	r1, #0
   112d4:	bne	112c0 <__mempcpy_chk@plt+0x26c>
   112d8:	ldr	r4, [r5, #4]
   112dc:	movw	r1, #28154	; 0x6dfa
   112e0:	movt	r1, #1
   112e4:	mov	r0, #0
   112e8:	mov	r2, #5
   112ec:	bl	10e80 <dcgettext@plt>
   112f0:	mov	r1, r0
   112f4:	movw	r2, #28015	; 0x6d6f
   112f8:	movt	r2, #1
   112fc:	movw	r3, #28177	; 0x6e11
   11300:	movt	r3, #1
   11304:	mov	r0, #1
   11308:	bl	10fac <__printf_chk@plt>
   1130c:	movw	r5, #27974	; 0x6d46
   11310:	movt	r5, #1
   11314:	cmp	r4, #0
   11318:	moveq	r4, r5
   1131c:	mov	r0, #5
   11320:	mov	r1, #0
   11324:	bl	10fe8 <setlocale@plt>
   11328:	cmp	r0, #0
   1132c:	beq	1136c <__mempcpy_chk@plt+0x318>
   11330:	movw	r1, #28217	; 0x6e39
   11334:	movt	r1, #1
   11338:	mov	r2, #3
   1133c:	bl	11024 <strncmp@plt>
   11340:	cmp	r0, #0
   11344:	beq	1136c <__mempcpy_chk@plt+0x318>
   11348:	movw	r1, #28221	; 0x6e3d
   1134c:	movt	r1, #1
   11350:	mov	r0, #0
   11354:	mov	r2, #5
   11358:	bl	10e80 <dcgettext@plt>
   1135c:	movw	r1, #33092	; 0x8144
   11360:	movt	r1, #2
   11364:	ldr	r1, [r1]
   11368:	bl	10dfc <fputs_unlocked@plt>
   1136c:	movw	r1, #28292	; 0x6e84
   11370:	movt	r1, #1
   11374:	mov	r0, #0
   11378:	mov	r2, #5
   1137c:	bl	10e80 <dcgettext@plt>
   11380:	mov	r1, r0
   11384:	movw	r2, #28177	; 0x6e11
   11388:	movt	r2, #1
   1138c:	mov	r0, #1
   11390:	mov	r3, r5
   11394:	bl	10fac <__printf_chk@plt>
   11398:	movw	r1, #28319	; 0x6e9f
   1139c:	movt	r1, #1
   113a0:	mov	r0, #0
   113a4:	mov	r2, #5
   113a8:	bl	10e80 <dcgettext@plt>
   113ac:	mov	r1, r0
   113b0:	movw	r0, #28087	; 0x6db7
   113b4:	movt	r0, #1
   113b8:	movw	r3, #27248	; 0x6a70
   113bc:	movt	r3, #1
   113c0:	cmp	r4, r5
   113c4:	moveq	r3, r0
   113c8:	mov	r0, #1
   113cc:	mov	r2, r4
   113d0:	bl	10fac <__printf_chk@plt>
   113d4:	sub	sp, fp, #8
   113d8:	pop	{r4, r5, fp, pc}
   113dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113e0:	add	fp, sp, #28
   113e4:	sub	sp, sp, #12
   113e8:	mov	r8, r1
   113ec:	mov	r5, r0
   113f0:	ldr	r0, [r1]
   113f4:	bl	13748 <__mempcpy_chk@plt+0x26f4>
   113f8:	movw	r1, #27248	; 0x6a70
   113fc:	movt	r1, #1
   11400:	mov	r0, #6
   11404:	bl	10fe8 <setlocale@plt>
   11408:	movw	r6, #28019	; 0x6d73
   1140c:	movt	r6, #1
   11410:	movw	r1, #27983	; 0x6d4f
   11414:	movt	r1, #1
   11418:	mov	r0, r6
   1141c:	bl	1100c <bindtextdomain@plt>
   11420:	mov	r0, r6
   11424:	bl	10e98 <textdomain@plt>
   11428:	movw	r0, #9688	; 0x25d8
   1142c:	movt	r0, #1
   11430:	bl	169a8 <__mempcpy_chk@plt+0x5954>
   11434:	mov	r0, #0
   11438:	movw	r4, #28007	; 0x6d67
   1143c:	movt	r4, #1
   11440:	movw	r7, #28520	; 0x6f68
   11444:	movt	r7, #1
   11448:	mov	r9, #0
   1144c:	mov	sl, #0
   11450:	mov	r6, #1
   11454:	b	11460 <__mempcpy_chk@plt+0x40c>
   11458:	strb	r0, [r1]
   1145c:	mov	r0, #0
   11460:	str	r0, [sp]
   11464:	mov	r0, r5
   11468:	mov	r1, r8
   1146c:	mov	r2, r4
   11470:	mov	r3, r7
   11474:	bl	10f4c <getopt_long@plt>
   11478:	cmp	r0, #75	; 0x4b
   1147c:	ble	11614 <__mempcpy_chk@plt+0x5c0>
   11480:	sub	r1, r0, #76	; 0x4c
   11484:	cmp	r1, #46	; 0x2e
   11488:	bhi	1156c <__mempcpy_chk@plt+0x518>
   1148c:	add	r0, pc, #0
   11490:	ldr	pc, [r0, r1, lsl #2]
   11494:	andeq	r1, r1, r0, asr r5
   11498:	strdeq	r1, [r1], -r0
   1149c:	strdeq	r1, [r1], -r0
   114a0:	strdeq	r1, [r1], -r0
   114a4:	andeq	r1, r1, r4, lsr #11
   114a8:	strdeq	r1, [r1], -r0
   114ac:	strdeq	r1, [r1], -r0
   114b0:	strdeq	r1, [r1], -r0
   114b4:	strdeq	r1, [r1], -r0
   114b8:	strdeq	r1, [r1], -r0
   114bc:	strdeq	r1, [r1], -r0
   114c0:	strdeq	r1, [r1], -r0
   114c4:	strdeq	r1, [r1], -r0
   114c8:	strdeq	r1, [r1], -r0
   114cc:	strdeq	r1, [r1], -r0
   114d0:	strdeq	r1, [r1], -r0
   114d4:	strdeq	r1, [r1], -r0
   114d8:	strdeq	r1, [r1], -r0
   114dc:	strdeq	r1, [r1], -r0
   114e0:	strdeq	r1, [r1], -r0
   114e4:	strdeq	r1, [r1], -r0
   114e8:	strdeq	r1, [r1], -r0
   114ec:	strdeq	r1, [r1], -r0
   114f0:	strdeq	r1, [r1], -r0
   114f4:	strdeq	r1, [r1], -r0
   114f8:	muleq	r1, r8, r5
   114fc:	strdeq	r1, [r1], -r0
   11500:	strdeq	r1, [r1], -r0
   11504:	strdeq	r1, [r1], -r0
   11508:	strdeq	r1, [r1], -r0
   1150c:	strdeq	r1, [r1], -r0
   11510:	strdeq	r1, [r1], -r0
   11514:	strdeq	r1, [r1], -r0
   11518:	andeq	r1, r1, r8, lsl #11
   1151c:	strdeq	r1, [r1], -r0
   11520:	strdeq	r1, [r1], -r0
   11524:	strdeq	r1, [r1], -r0
   11528:	ldrdeq	r1, [r1], -r4
   1152c:	strdeq	r1, [r1], -r0
   11530:			; <UNDEFINED> instruction: 0x000115bc
   11534:	strdeq	r1, [r1], -r0
   11538:	strdeq	r1, [r1], -r0
   1153c:	strdeq	r1, [r1], -r0
   11540:	strdeq	r1, [r1], -r0
   11544:	strdeq	r1, [r1], -r0
   11548:	strdeq	r1, [r1], -r0
   1154c:	andeq	r1, r1, r4, ror #11
   11550:	mov	r0, #1
   11554:	movw	r1, #33104	; 0x8150
   11558:	movt	r1, #2
   1155c:	strb	r0, [r1]
   11560:	orr	r6, r6, #4
   11564:	mov	r0, #0
   11568:	b	11460 <__mempcpy_chk@plt+0x40c>
   1156c:	cmp	r0, #256	; 0x100
   11570:	bne	115f4 <__mempcpy_chk@plt+0x5a0>
   11574:	movw	r0, #33096	; 0x8148
   11578:	movt	r0, #2
   1157c:	ldr	r9, [r0]
   11580:	mov	r0, #0
   11584:	b	11460 <__mempcpy_chk@plt+0x40c>
   11588:	mov	r0, #2
   1158c:	bfi	r6, r0, #0, #2
   11590:	mov	r0, #0
   11594:	b	11460 <__mempcpy_chk@plt+0x40c>
   11598:	bic	r6, r6, #3
   1159c:	mov	r0, #0
   115a0:	b	11460 <__mempcpy_chk@plt+0x40c>
   115a4:	mov	r0, #0
   115a8:	movw	r1, #33104	; 0x8150
   115ac:	movt	r1, #2
   115b0:	strb	r0, [r1]
   115b4:	bic	r6, r6, #4
   115b8:	b	11460 <__mempcpy_chk@plt+0x40c>
   115bc:	mov	r0, #0
   115c0:	movw	r1, #33104	; 0x8150
   115c4:	movt	r1, #2
   115c8:	strb	r0, [r1]
   115cc:	orr	r6, r6, #4
   115d0:	b	11460 <__mempcpy_chk@plt+0x40c>
   115d4:	mov	r0, #1
   115d8:	movw	r1, #33105	; 0x8151
   115dc:	movt	r1, #2
   115e0:	b	11458 <__mempcpy_chk@plt+0x404>
   115e4:	mov	r0, #1
   115e8:	movw	r1, #33106	; 0x8152
   115ec:	movt	r1, #2
   115f0:	b	11458 <__mempcpy_chk@plt+0x404>
   115f4:	movw	r1, #257	; 0x101
   115f8:	cmp	r0, r1
   115fc:	bne	117f0 <__mempcpy_chk@plt+0x79c>
   11600:	movw	r0, #33096	; 0x8148
   11604:	movt	r0, #2
   11608:	ldr	sl, [r0]
   1160c:	mov	r0, #0
   11610:	b	11460 <__mempcpy_chk@plt+0x40c>
   11614:	cmn	r0, #1
   11618:	bne	11764 <__mempcpy_chk@plt+0x710>
   1161c:	movw	r4, #33080	; 0x8138
   11620:	movt	r4, #2
   11624:	ldr	r0, [r4]
   11628:	cmp	r0, r5
   1162c:	bge	117c4 <__mempcpy_chk@plt+0x770>
   11630:	cmp	sl, #0
   11634:	mov	r7, sl
   11638:	moveq	r7, r9
   1163c:	cmp	r9, #0
   11640:	movne	r7, r9
   11644:	and	r9, r6, #3
   11648:	cmp	r7, #0
   1164c:	beq	11684 <__mempcpy_chk@plt+0x630>
   11650:	mov	r0, r7
   11654:	mov	r1, r6
   11658:	bl	11878 <__mempcpy_chk@plt+0x824>
   1165c:	movw	r1, #33108	; 0x8154
   11660:	movt	r1, #2
   11664:	str	r0, [r1]
   11668:	cmp	r0, #0
   1166c:	beq	117f8 <__mempcpy_chk@plt+0x7a4>
   11670:	cmp	r9, #0
   11674:	bne	11684 <__mempcpy_chk@plt+0x630>
   11678:	bl	118d0 <__mempcpy_chk@plt+0x87c>
   1167c:	cmp	r0, #0
   11680:	beq	11840 <__mempcpy_chk@plt+0x7ec>
   11684:	cmp	sl, r7
   11688:	beq	116f0 <__mempcpy_chk@plt+0x69c>
   1168c:	cmp	sl, #0
   11690:	beq	11720 <__mempcpy_chk@plt+0x6cc>
   11694:	mov	r0, sl
   11698:	mov	r1, r6
   1169c:	bl	11878 <__mempcpy_chk@plt+0x824>
   116a0:	cmp	r0, #0
   116a4:	beq	11810 <__mempcpy_chk@plt+0x7bc>
   116a8:	mov	r7, r0
   116ac:	cmp	r9, #0
   116b0:	bne	116c4 <__mempcpy_chk@plt+0x670>
   116b4:	mov	r0, r7
   116b8:	bl	118d0 <__mempcpy_chk@plt+0x87c>
   116bc:	cmp	r0, #0
   116c0:	beq	11850 <__mempcpy_chk@plt+0x7fc>
   116c4:	movw	r9, #33108	; 0x8154
   116c8:	movt	r9, #2
   116cc:	ldr	r1, [r9]
   116d0:	mov	r0, r7
   116d4:	bl	11948 <__mempcpy_chk@plt+0x8f4>
   116d8:	cmp	r0, #0
   116dc:	beq	11700 <__mempcpy_chk@plt+0x6ac>
   116e0:	movw	r0, #33112	; 0x8158
   116e4:	movt	r0, #2
   116e8:	str	r7, [r0]
   116ec:	b	11720 <__mempcpy_chk@plt+0x6cc>
   116f0:	movw	r0, #33108	; 0x8154
   116f4:	movt	r0, #2
   116f8:	ldr	r0, [r0]
   116fc:	b	11714 <__mempcpy_chk@plt+0x6c0>
   11700:	mov	r0, r7
   11704:	bl	12788 <__mempcpy_chk@plt+0x1734>
   11708:	ldr	r0, [r9]
   1170c:	mov	r1, #0
   11710:	str	r1, [r9]
   11714:	movw	r1, #33112	; 0x8158
   11718:	movt	r1, #2
   1171c:	str	r0, [r1]
   11720:	ldr	r1, [r4]
   11724:	mov	r0, #0
   11728:	cmp	r1, r5
   1172c:	bge	1175c <__mempcpy_chk@plt+0x708>
   11730:	mov	r7, #1
   11734:	ldr	r0, [r8, r1, lsl #2]
   11738:	mov	r1, r6
   1173c:	bl	119f0 <__mempcpy_chk@plt+0x99c>
   11740:	ldr	r1, [r4]
   11744:	add	r1, r1, #1
   11748:	str	r1, [r4]
   1174c:	and	r7, r7, r0
   11750:	cmp	r1, r5
   11754:	blt	11734 <__mempcpy_chk@plt+0x6e0>
   11758:	eor	r0, r7, #1
   1175c:	sub	sp, fp, #28
   11760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11764:	cmn	r0, #3
   11768:	bne	117b4 <__mempcpy_chk@plt+0x760>
   1176c:	movw	r0, #33000	; 0x80e8
   11770:	movt	r0, #2
   11774:	ldr	r3, [r0]
   11778:	movw	r0, #33092	; 0x8144
   1177c:	movt	r0, #2
   11780:	ldr	r0, [r0]
   11784:	mov	r1, #0
   11788:	movw	r2, #28029	; 0x6d7d
   1178c:	movt	r2, #1
   11790:	str	r2, [sp]
   11794:	str	r1, [sp, #4]
   11798:	movw	r1, #27974	; 0x6d46
   1179c:	movt	r1, #1
   117a0:	movw	r2, #28015	; 0x6d6f
   117a4:	movt	r2, #1
   117a8:	bl	158e4 <__mempcpy_chk@plt+0x4890>
   117ac:	mov	r0, #0
   117b0:	bl	10f70 <exit@plt>
   117b4:	cmn	r0, #2
   117b8:	bne	117f0 <__mempcpy_chk@plt+0x79c>
   117bc:	mov	r0, #0
   117c0:	bl	11150 <__mempcpy_chk@plt+0xfc>
   117c4:	movw	r1, #28043	; 0x6d8b
   117c8:	movt	r1, #1
   117cc:	mov	r0, #0
   117d0:	mov	r2, #5
   117d4:	bl	10e80 <dcgettext@plt>
   117d8:	mov	r2, r0
   117dc:	mov	r0, #0
   117e0:	mov	r1, #0
   117e4:	bl	10f10 <error@plt>
   117e8:	mov	r0, #1
   117ec:	bl	11150 <__mempcpy_chk@plt+0xfc>
   117f0:	mov	r0, #1
   117f4:	bl	11150 <__mempcpy_chk@plt+0xfc>
   117f8:	bl	10f88 <__errno_location@plt>
   117fc:	ldr	r4, [r0]
   11800:	mov	r0, #0
   11804:	mov	r1, #3
   11808:	mov	r2, r7
   1180c:	b	11824 <__mempcpy_chk@plt+0x7d0>
   11810:	bl	10f88 <__errno_location@plt>
   11814:	ldr	r4, [r0]
   11818:	mov	r0, #0
   1181c:	mov	r1, #3
   11820:	mov	r2, sl
   11824:	bl	14e40 <__mempcpy_chk@plt+0x3dec>
   11828:	mov	r3, r0
   1182c:	movw	r2, #28844	; 0x70ac
   11830:	movt	r2, #1
   11834:	mov	r0, #1
   11838:	mov	r1, r4
   1183c:	bl	10f10 <error@plt>
   11840:	mov	r0, #0
   11844:	mov	r1, #3
   11848:	mov	r2, r7
   1184c:	b	1185c <__mempcpy_chk@plt+0x808>
   11850:	mov	r0, #0
   11854:	mov	r1, #3
   11858:	mov	r2, sl
   1185c:	bl	14e40 <__mempcpy_chk@plt+0x3dec>
   11860:	mov	r3, r0
   11864:	movw	r2, #28844	; 0x70ac
   11868:	movt	r2, #1
   1186c:	mov	r0, #1
   11870:	mov	r1, #20
   11874:	bl	10f10 <error@plt>
   11878:	push	{r4, r5, fp, lr}
   1187c:	add	fp, sp, #8
   11880:	mov	r5, r1
   11884:	bl	11e08 <__mempcpy_chk@plt+0xdb4>
   11888:	mov	r4, r0
   1188c:	movw	r0, #33104	; 0x8150
   11890:	movt	r0, #2
   11894:	ldrb	r0, [r0]
   11898:	cmp	r0, #1
   1189c:	bne	118c8 <__mempcpy_chk@plt+0x874>
   118a0:	cmp	r4, #0
   118a4:	beq	118c8 <__mempcpy_chk@plt+0x874>
   118a8:	bic	r1, r5, #4
   118ac:	mov	r0, r4
   118b0:	bl	11e08 <__mempcpy_chk@plt+0xdb4>
   118b4:	mov	r5, r0
   118b8:	mov	r0, r4
   118bc:	bl	12788 <__mempcpy_chk@plt+0x1734>
   118c0:	mov	r0, r5
   118c4:	pop	{r4, r5, fp, pc}
   118c8:	mov	r0, r4
   118cc:	pop	{r4, r5, fp, pc}
   118d0:	push	{r4, r5, r6, sl, fp, lr}
   118d4:	add	fp, sp, #16
   118d8:	sub	sp, sp, #104	; 0x68
   118dc:	mov	r4, r0
   118e0:	mov	r1, sp
   118e4:	bl	169c0 <__mempcpy_chk@plt+0x596c>
   118e8:	cmp	r0, #0
   118ec:	ldreq	r0, [sp, #16]
   118f0:	andeq	r0, r0, #61440	; 0xf000
   118f4:	subeq	r0, r0, #16384	; 0x4000
   118f8:	clzeq	r0, r0
   118fc:	lsreq	r0, r0, #5
   11900:	subeq	sp, fp, #16
   11904:	popeq	{r4, r5, r6, sl, fp, pc}
   11908:	bl	10f88 <__errno_location@plt>
   1190c:	ldr	r5, [r0]
   11910:	movw	r1, #28498	; 0x6f52
   11914:	movt	r1, #1
   11918:	mov	r0, #0
   1191c:	mov	r2, #5
   11920:	bl	10e80 <dcgettext@plt>
   11924:	mov	r6, r0
   11928:	mov	r0, #4
   1192c:	mov	r1, r4
   11930:	bl	14d8c <__mempcpy_chk@plt+0x3d38>
   11934:	mov	r3, r0
   11938:	mov	r0, #1
   1193c:	mov	r1, r5
   11940:	mov	r2, r6
   11944:	bl	10f10 <error@plt>
   11948:	push	{fp, lr}
   1194c:	mov	fp, sp
   11950:	ldrb	ip, [r0, #1]
   11954:	cmp	ip, #47	; 0x2f
   11958:	beq	11974 <__mempcpy_chk@plt+0x920>
   1195c:	cmp	ip, #0
   11960:	bne	1198c <__mempcpy_chk@plt+0x938>
   11964:	ldrb	r0, [r1, #1]
   11968:	subs	r0, r0, #47	; 0x2f
   1196c:	movwne	r0, #1
   11970:	pop	{fp, pc}
   11974:	ldrb	r3, [r1, #1]
   11978:	ldrb	r2, [r0, #2]
   1197c:	cmp	r2, #0
   11980:	beq	119e0 <__mempcpy_chk@plt+0x98c>
   11984:	mov	ip, #47	; 0x2f
   11988:	b	11990 <__mempcpy_chk@plt+0x93c>
   1198c:	ldrb	r3, [r1, #1]
   11990:	add	r2, r0, #2
   11994:	add	r1, r1, #2
   11998:	mov	r0, #0
   1199c:	tst	r3, #255	; 0xff
   119a0:	beq	119dc <__mempcpy_chk@plt+0x988>
   119a4:	uxtb	lr, r3
   119a8:	uxtb	r3, ip
   119ac:	cmp	r3, lr
   119b0:	popne	{fp, pc}
   119b4:	ldrb	ip, [r2], #1
   119b8:	ldrb	r3, [r1], #1
   119bc:	cmp	ip, #0
   119c0:	bne	1199c <__mempcpy_chk@plt+0x948>
   119c4:	clz	r0, r3
   119c8:	lsr	r0, r0, #5
   119cc:	sub	r1, r3, #47	; 0x2f
   119d0:	clz	r1, r1
   119d4:	lsr	r1, r1, #5
   119d8:	orr	r0, r1, r0
   119dc:	pop	{fp, pc}
   119e0:	sub	r0, r3, #47	; 0x2f
   119e4:	clz	r0, r0
   119e8:	lsr	r0, r0, #5
   119ec:	pop	{fp, pc}
   119f0:	push	{r4, r5, r6, sl, fp, lr}
   119f4:	add	fp, sp, #16
   119f8:	mov	r5, r0
   119fc:	bl	11878 <__mempcpy_chk@plt+0x824>
   11a00:	cmp	r0, #0
   11a04:	beq	11aa4 <__mempcpy_chk@plt+0xa50>
   11a08:	mov	r4, r0
   11a0c:	movw	r0, #33108	; 0x8154
   11a10:	movt	r0, #2
   11a14:	ldr	r5, [r0]
   11a18:	cmp	r5, #0
   11a1c:	beq	11a60 <__mempcpy_chk@plt+0xa0c>
   11a20:	movw	r0, #33112	; 0x8158
   11a24:	movt	r0, #2
   11a28:	ldr	r0, [r0]
   11a2c:	cmp	r0, #0
   11a30:	beq	11a44 <__mempcpy_chk@plt+0x9f0>
   11a34:	mov	r1, r4
   11a38:	bl	11948 <__mempcpy_chk@plt+0x8f4>
   11a3c:	cmp	r0, #0
   11a40:	beq	11a60 <__mempcpy_chk@plt+0xa0c>
   11a44:	mov	r0, r4
   11a48:	mov	r1, r5
   11a4c:	mov	r2, #0
   11a50:	mov	r3, #0
   11a54:	bl	11b00 <__mempcpy_chk@plt+0xaac>
   11a58:	cmp	r0, #0
   11a5c:	bne	11a74 <__mempcpy_chk@plt+0xa20>
   11a60:	movw	r0, #33092	; 0x8144
   11a64:	movt	r0, #2
   11a68:	ldr	r1, [r0]
   11a6c:	mov	r0, r4
   11a70:	bl	10dfc <fputs_unlocked@plt>
   11a74:	movw	r0, #33106	; 0x8152
   11a78:	movt	r0, #2
   11a7c:	ldrb	r1, [r0]
   11a80:	mov	r0, #10
   11a84:	cmp	r1, #0
   11a88:	movwne	r0, #0
   11a8c:	bl	1103c <putchar_unlocked@plt>
   11a90:	mov	r0, r4
   11a94:	bl	12788 <__mempcpy_chk@plt+0x1734>
   11a98:	mov	r4, #1
   11a9c:	mov	r0, r4
   11aa0:	pop	{r4, r5, r6, sl, fp, pc}
   11aa4:	movw	r0, #33105	; 0x8151
   11aa8:	movt	r0, #2
   11aac:	ldrb	r0, [r0]
   11ab0:	mov	r4, #0
   11ab4:	cmp	r0, #0
   11ab8:	beq	11ac4 <__mempcpy_chk@plt+0xa70>
   11abc:	mov	r0, r4
   11ac0:	pop	{r4, r5, r6, sl, fp, pc}
   11ac4:	bl	10f88 <__errno_location@plt>
   11ac8:	ldr	r6, [r0]
   11acc:	mov	r4, #0
   11ad0:	mov	r0, #0
   11ad4:	mov	r1, #3
   11ad8:	mov	r2, r5
   11adc:	bl	14e40 <__mempcpy_chk@plt+0x3dec>
   11ae0:	mov	r3, r0
   11ae4:	movw	r2, #28844	; 0x70ac
   11ae8:	movt	r2, #1
   11aec:	mov	r0, #0
   11af0:	mov	r1, r6
   11af4:	bl	10f10 <error@plt>
   11af8:	mov	r0, r4
   11afc:	pop	{r4, r5, r6, sl, fp, pc}
   11b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b04:	add	fp, sp, #28
   11b08:	sub	sp, sp, #12
   11b0c:	mov	r6, r1
   11b10:	mov	r9, r0
   11b14:	str	r3, [sp, #4]
   11b18:	str	r2, [sp, #8]
   11b1c:	mov	r0, r1
   11b20:	mov	r1, r9
   11b24:	bl	11ca4 <__mempcpy_chk@plt+0xc50>
   11b28:	cmp	r0, #0
   11b2c:	beq	11c20 <__mempcpy_chk@plt+0xbcc>
   11b30:	ldrb	r1, [r9, r0]!
   11b34:	cmp	r1, #47	; 0x2f
   11b38:	mov	r8, r9
   11b3c:	addeq	r8, r8, #1
   11b40:	ldrb	r0, [r6, r0]!
   11b44:	cmp	r0, #47	; 0x2f
   11b48:	addeq	r6, r6, #1
   11b4c:	ldrb	r0, [r6]
   11b50:	sub	r1, r1, #47	; 0x2f
   11b54:	clz	r1, r1
   11b58:	lsr	r1, r1, #5
   11b5c:	cmp	r0, #0
   11b60:	beq	11c28 <__mempcpy_chk@plt+0xbd4>
   11b64:	str	r1, [sp]
   11b68:	movw	r0, #28785	; 0x7071
   11b6c:	movt	r0, #1
   11b70:	add	sl, sp, #8
   11b74:	add	r4, sp, #4
   11b78:	mov	r1, sl
   11b7c:	mov	r2, r4
   11b80:	bl	11d80 <__mempcpy_chk@plt+0xd2c>
   11b84:	mov	r5, r0
   11b88:	movw	r7, #28784	; 0x7070
   11b8c:	movt	r7, #1
   11b90:	b	11b98 <__mempcpy_chk@plt+0xb44>
   11b94:	add	r6, r6, #1
   11b98:	ldrb	r0, [r6]
   11b9c:	cmp	r0, #47	; 0x2f
   11ba0:	beq	11bb0 <__mempcpy_chk@plt+0xb5c>
   11ba4:	cmp	r0, #0
   11ba8:	bne	11b94 <__mempcpy_chk@plt+0xb40>
   11bac:	b	11bcc <__mempcpy_chk@plt+0xb78>
   11bb0:	mov	r0, r7
   11bb4:	mov	r1, sl
   11bb8:	mov	r2, r4
   11bbc:	bl	11d80 <__mempcpy_chk@plt+0xd2c>
   11bc0:	and	r1, r5, #1
   11bc4:	orr	r5, r1, r0
   11bc8:	b	11b94 <__mempcpy_chk@plt+0xb40>
   11bcc:	ldr	r0, [sp]
   11bd0:	ldrb	r0, [r9, r0]
   11bd4:	and	r6, r5, #1
   11bd8:	cmp	r0, #0
   11bdc:	beq	11c94 <__mempcpy_chk@plt+0xc40>
   11be0:	movw	r0, #29959	; 0x7507
   11be4:	movt	r0, #1
   11be8:	add	r4, sp, #8
   11bec:	add	r5, sp, #4
   11bf0:	mov	r1, r4
   11bf4:	mov	r2, r5
   11bf8:	bl	11d80 <__mempcpy_chk@plt+0xd2c>
   11bfc:	orr	r6, r0, r6
   11c00:	mov	r0, r8
   11c04:	mov	r1, r4
   11c08:	mov	r2, r5
   11c0c:	bl	11d80 <__mempcpy_chk@plt+0xd2c>
   11c10:	orrs	r0, r6, r0
   11c14:	bne	11c58 <__mempcpy_chk@plt+0xc04>
   11c18:	mov	r4, #1
   11c1c:	b	11c88 <__mempcpy_chk@plt+0xc34>
   11c20:	mov	r4, #0
   11c24:	b	11c88 <__mempcpy_chk@plt+0xc34>
   11c28:	ldrb	r0, [r9, r1]
   11c2c:	movw	r1, #28786	; 0x7072
   11c30:	movt	r1, #1
   11c34:	cmp	r0, #0
   11c38:	moveq	r8, r1
   11c3c:	add	r1, sp, #8
   11c40:	add	r2, sp, #4
   11c44:	mov	r0, r8
   11c48:	bl	11d80 <__mempcpy_chk@plt+0xd2c>
   11c4c:	mov	r4, #1
   11c50:	cmp	r0, #0
   11c54:	beq	11c88 <__mempcpy_chk@plt+0xc34>
   11c58:	mov	r4, #0
   11c5c:	movw	r1, #28788	; 0x7074
   11c60:	movt	r1, #1
   11c64:	mov	r0, #0
   11c68:	mov	r2, #5
   11c6c:	bl	10e80 <dcgettext@plt>
   11c70:	mov	r3, r0
   11c74:	movw	r2, #28844	; 0x70ac
   11c78:	movt	r2, #1
   11c7c:	mov	r0, #0
   11c80:	mov	r1, #36	; 0x24
   11c84:	bl	10f10 <error@plt>
   11c88:	mov	r0, r4
   11c8c:	sub	sp, fp, #28
   11c90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c94:	mov	r4, #1
   11c98:	cmp	r6, #0
   11c9c:	bne	11c58 <__mempcpy_chk@plt+0xc04>
   11ca0:	b	11c88 <__mempcpy_chk@plt+0xc34>
   11ca4:	push	{r4, r5, fp, lr}
   11ca8:	add	fp, sp, #8
   11cac:	mov	ip, r0
   11cb0:	ldrb	r0, [r1, #1]
   11cb4:	sub	r0, r0, #47	; 0x2f
   11cb8:	clz	r0, r0
   11cbc:	lsr	r2, r0, #5
   11cc0:	ldrb	r0, [ip, #1]
   11cc4:	sub	r0, r0, #47	; 0x2f
   11cc8:	clz	r0, r0
   11ccc:	lsr	r3, r0, #5
   11cd0:	mov	r0, #0
   11cd4:	teq	r3, r2
   11cd8:	popne	{r4, r5, fp, pc}
   11cdc:	ldrb	lr, [r1]
   11ce0:	ldrb	r3, [ip]
   11ce4:	cmp	r3, #0
   11ce8:	beq	11d40 <__mempcpy_chk@plt+0xcec>
   11cec:	mov	r0, #0
   11cf0:	mov	r2, #1
   11cf4:	tst	lr, #255	; 0xff
   11cf8:	beq	11d60 <__mempcpy_chk@plt+0xd0c>
   11cfc:	uxtb	r5, lr
   11d00:	uxtb	r4, r3
   11d04:	cmp	r4, r5
   11d08:	bne	11d60 <__mempcpy_chk@plt+0xd0c>
   11d0c:	cmp	r4, #47	; 0x2f
   11d10:	moveq	r0, r2
   11d14:	ldrb	lr, [r1, r2]
   11d18:	ldrb	r3, [ip, r2]
   11d1c:	add	r2, r2, #1
   11d20:	cmp	r3, #0
   11d24:	bne	11cf4 <__mempcpy_chk@plt+0xca0>
   11d28:	add	r1, r1, r2
   11d2c:	sub	r1, r1, #1
   11d30:	sub	r2, r2, #1
   11d34:	cmp	lr, #0
   11d38:	bne	11d50 <__mempcpy_chk@plt+0xcfc>
   11d3c:	b	11d78 <__mempcpy_chk@plt+0xd24>
   11d40:	mov	r2, #0
   11d44:	mov	r0, #0
   11d48:	cmp	lr, #0
   11d4c:	beq	11d78 <__mempcpy_chk@plt+0xd24>
   11d50:	ldrb	r1, [r1]
   11d54:	cmp	r1, #47	; 0x2f
   11d58:	moveq	r0, r2
   11d5c:	pop	{r4, r5, fp, pc}
   11d60:	uxtb	r1, r3
   11d64:	cmp	r1, #47	; 0x2f
   11d68:	tsteq	lr, #255	; 0xff
   11d6c:	beq	11d74 <__mempcpy_chk@plt+0xd20>
   11d70:	pop	{r4, r5, fp, pc}
   11d74:	sub	r2, r2, #1
   11d78:	mov	r0, r2
   11d7c:	pop	{r4, r5, fp, pc}
   11d80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11d84:	add	fp, sp, #24
   11d88:	mov	r6, r0
   11d8c:	ldr	r7, [r1]
   11d90:	cmp	r7, #0
   11d94:	beq	11dec <__mempcpy_chk@plt+0xd98>
   11d98:	mov	r8, r2
   11d9c:	mov	r5, r1
   11da0:	mov	r0, r6
   11da4:	bl	10f7c <strlen@plt>
   11da8:	mov	r4, r0
   11dac:	ldr	r1, [r8]
   11db0:	mov	r0, #1
   11db4:	cmp	r4, r1
   11db8:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   11dbc:	add	r2, r4, #1
   11dc0:	mov	r0, r7
   11dc4:	mov	r1, r6
   11dc8:	bl	10e5c <memcpy@plt>
   11dcc:	ldr	r0, [r5]
   11dd0:	add	r0, r0, r4
   11dd4:	str	r0, [r5]
   11dd8:	ldr	r0, [r8]
   11ddc:	sub	r0, r0, r4
   11de0:	str	r0, [r8]
   11de4:	mov	r0, #0
   11de8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11dec:	movw	r0, #33092	; 0x8144
   11df0:	movt	r0, #2
   11df4:	ldr	r1, [r0]
   11df8:	mov	r0, r6
   11dfc:	bl	10dfc <fputs_unlocked@plt>
   11e00:	mov	r0, #0
   11e04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11e08:	push	{r4, r5, fp, lr}
   11e0c:	add	fp, sp, #8
   11e10:	sub	sp, sp, #8
   11e14:	sub	sp, sp, #1024	; 0x400
   11e18:	mov	r2, sp
   11e1c:	bl	11e28 <__mempcpy_chk@plt+0xdd4>
   11e20:	sub	sp, fp, #8
   11e24:	pop	{r4, r5, fp, pc}
   11e28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e2c:	add	fp, sp, #28
   11e30:	sub	sp, sp, #164	; 0xa4
   11e34:	sub	sp, sp, #2048	; 0x800
   11e38:	mov	sl, r2
   11e3c:	mov	r5, r1
   11e40:	mov	r9, r0
   11e44:	mov	r6, #0
   11e48:	str	r6, [fp, #-36]	; 0xffffffdc
   11e4c:	and	r0, r1, #3
   11e50:	str	r0, [sp, #28]
   11e54:	bl	1242c <__mempcpy_chk@plt+0x13d8>
   11e58:	cmp	r0, #0
   11e5c:	beq	11e70 <__mempcpy_chk@plt+0xe1c>
   11e60:	bl	10f88 <__errno_location@plt>
   11e64:	mov	r1, #22
   11e68:	str	r1, [r0]
   11e6c:	b	12404 <__mempcpy_chk@plt+0x13b0>
   11e70:	cmp	r9, #0
   11e74:	beq	11ed0 <__mempcpy_chk@plt+0xe7c>
   11e78:	ldrb	r0, [r9]
   11e7c:	cmp	r0, #0
   11e80:	beq	11edc <__mempcpy_chk@plt+0xe88>
   11e84:	sub	r0, fp, #1072	; 0x430
   11e88:	bl	1243c <__mempcpy_chk@plt+0x13e8>
   11e8c:	add	r0, sp, #136	; 0x88
   11e90:	bl	1243c <__mempcpy_chk@plt+0x13e8>
   11e94:	mov	r0, sl
   11e98:	bl	1243c <__mempcpy_chk@plt+0x13e8>
   11e9c:	ldr	r4, [sl]
   11ea0:	ldrb	r0, [r9]
   11ea4:	cmp	r0, #47	; 0x2f
   11ea8:	bne	11ef0 <__mempcpy_chk@plt+0xe9c>
   11eac:	mov	r0, r4
   11eb0:	mov	r1, r9
   11eb4:	mov	r2, #0
   11eb8:	mvn	r3, #0
   11ebc:	bl	11054 <__mempcpy_chk@plt>
   11ec0:	mov	r6, r0
   11ec4:	mov	r0, #47	; 0x2f
   11ec8:	strb	r0, [r6], #1
   11ecc:	b	11f14 <__mempcpy_chk@plt+0xec0>
   11ed0:	bl	10f88 <__errno_location@plt>
   11ed4:	mov	r1, #22
   11ed8:	b	11ee4 <__mempcpy_chk@plt+0xe90>
   11edc:	bl	10f88 <__errno_location@plt>
   11ee0:	mov	r1, #2
   11ee4:	str	r1, [r0]
   11ee8:	mov	r6, #0
   11eec:	b	12404 <__mempcpy_chk@plt+0x13b0>
   11ef0:	ldr	r1, [sl, #4]
   11ef4:	mov	r0, r4
   11ef8:	bl	10f64 <getcwd@plt>
   11efc:	cmp	r0, #0
   11f00:	beq	1235c <__mempcpy_chk@plt+0x1308>
   11f04:	mov	r0, r4
   11f08:	mov	r1, #0
   11f0c:	bl	10ea4 <rawmemchr@plt>
   11f10:	mov	r6, r0
   11f14:	ldrb	r0, [r9]
   11f18:	cmp	r0, #0
   11f1c:	beq	12338 <__mempcpy_chk@plt+0x12e4>
   11f20:	and	r1, r5, #4
   11f24:	str	r1, [sp, #24]
   11f28:	mov	r1, #0
   11f2c:	str	r1, [sp, #4]
   11f30:	mov	r1, #0
   11f34:	str	r1, [sp, #12]
   11f38:	str	sl, [sp, #20]
   11f3c:	uxtb	r1, r0
   11f40:	cmp	r1, #47	; 0x2f
   11f44:	bne	11f54 <__mempcpy_chk@plt+0xf00>
   11f48:	ldrb	r0, [r9, #1]!
   11f4c:	cmp	r0, #47	; 0x2f
   11f50:	beq	11f48 <__mempcpy_chk@plt+0xef4>
   11f54:	mov	r8, r9
   11f58:	b	11f60 <__mempcpy_chk@plt+0xf0c>
   11f5c:	add	r8, r8, #1
   11f60:	ldrb	r1, [r8]
   11f64:	cmp	r1, #0
   11f68:	cmpne	r1, #47	; 0x2f
   11f6c:	bne	11f5c <__mempcpy_chk@plt+0xf08>
   11f70:	sub	r7, r8, r9
   11f74:	cmp	r7, #1
   11f78:	beq	11f90 <__mempcpy_chk@plt+0xf3c>
   11f7c:	cmp	r7, #2
   11f80:	beq	11fa0 <__mempcpy_chk@plt+0xf4c>
   11f84:	cmp	r7, #0
   11f88:	bne	11fb4 <__mempcpy_chk@plt+0xf60>
   11f8c:	b	12338 <__mempcpy_chk@plt+0x12e4>
   11f90:	uxtb	r0, r0
   11f94:	cmp	r0, #46	; 0x2e
   11f98:	bne	11fb4 <__mempcpy_chk@plt+0xf60>
   11f9c:	b	122d4 <__mempcpy_chk@plt+0x1280>
   11fa0:	uxtb	r0, r0
   11fa4:	cmp	r0, #46	; 0x2e
   11fa8:	ldrbeq	r0, [r9, #1]
   11fac:	cmpeq	r0, #46	; 0x2e
   11fb0:	beq	12294 <__mempcpy_chk@plt+0x1240>
   11fb4:	ldrb	r0, [r6, #-1]
   11fb8:	cmp	r0, #47	; 0x2f
   11fbc:	movne	r0, #47	; 0x2f
   11fc0:	strbne	r0, [r6], #1
   11fc4:	ldr	r0, [sl, #4]
   11fc8:	add	r0, r4, r0
   11fcc:	sub	r0, r0, r6
   11fd0:	add	r5, r7, #2
   11fd4:	cmp	r0, r5
   11fd8:	bcc	12000 <__mempcpy_chk@plt+0xfac>
   11fdc:	b	12014 <__mempcpy_chk@plt+0xfc0>
   11fe0:	sub	r0, r6, r4
   11fe4:	ldr	r4, [sl]
   11fe8:	ldr	r1, [sl, #4]
   11fec:	add	r6, r4, r0
   11ff0:	add	r0, r4, r1
   11ff4:	sub	r0, r0, r6
   11ff8:	cmp	r0, r5
   11ffc:	bcs	12014 <__mempcpy_chk@plt+0xfc0>
   12000:	mov	r0, sl
   12004:	bl	15480 <__mempcpy_chk@plt+0x442c>
   12008:	cmp	r0, #0
   1200c:	bne	11fe0 <__mempcpy_chk@plt+0xf8c>
   12010:	b	12428 <__mempcpy_chk@plt+0x13d4>
   12014:	mov	r0, r6
   12018:	mov	r1, r9
   1201c:	str	r7, [sp, #16]
   12020:	mov	r2, r7
   12024:	mvn	r3, #0
   12028:	bl	11054 <__mempcpy_chk@plt>
   1202c:	mov	r6, r0
   12030:	mov	r0, #0
   12034:	strb	r0, [r6]
   12038:	ldr	r0, [sp, #24]
   1203c:	cmp	r0, #0
   12040:	bne	120a0 <__mempcpy_chk@plt+0x104c>
   12044:	ldr	r5, [sp, #136]	; 0x88
   12048:	ldr	r0, [sp, #140]	; 0x8c
   1204c:	sub	r7, r0, #1
   12050:	mov	r0, r4
   12054:	mov	r1, r5
   12058:	mov	r2, r7
   1205c:	bl	10ebc <readlink@plt>
   12060:	cmp	r0, r7
   12064:	blt	1207c <__mempcpy_chk@plt+0x1028>
   12068:	add	r0, sp, #136	; 0x88
   1206c:	bl	153fc <__mempcpy_chk@plt+0x43a8>
   12070:	cmp	r0, #0
   12074:	bne	12044 <__mempcpy_chk@plt+0xff0>
   12078:	b	12428 <__mempcpy_chk@plt+0x13d4>
   1207c:	mov	sl, r0
   12080:	cmp	r0, #0
   12084:	blt	120a0 <__mempcpy_chk@plt+0x104c>
   12088:	ldr	r0, [sp, #4]
   1208c:	cmp	r0, #19
   12090:	bgt	12110 <__mempcpy_chk@plt+0x10bc>
   12094:	add	r0, r0, #1
   12098:	str	r0, [sp, #4]
   1209c:	b	12188 <__mempcpy_chk@plt+0x1134>
   120a0:	ldr	r0, [sp, #28]
   120a4:	cmp	r0, #2
   120a8:	bne	120b8 <__mempcpy_chk@plt+0x1064>
   120ac:	mov	r9, r8
   120b0:	ldr	sl, [sp, #20]
   120b4:	b	1232c <__mempcpy_chk@plt+0x12d8>
   120b8:	mov	r0, r8
   120bc:	bl	124e8 <__mempcpy_chk@plt+0x1494>
   120c0:	cmp	r0, #0
   120c4:	beq	120e4 <__mempcpy_chk@plt+0x1090>
   120c8:	mov	r0, r4
   120cc:	mov	r1, r6
   120d0:	bl	12570 <__mempcpy_chk@plt+0x151c>
   120d4:	cmp	r0, #0
   120d8:	ldr	sl, [sp, #20]
   120dc:	bne	122d4 <__mempcpy_chk@plt+0x1280>
   120e0:	b	122ec <__mempcpy_chk@plt+0x1298>
   120e4:	ldr	r0, [sp, #24]
   120e8:	cmp	r0, #0
   120ec:	ldr	sl, [sp, #20]
   120f0:	beq	122c4 <__mempcpy_chk@plt+0x1270>
   120f4:	ldrb	r0, [r8]
   120f8:	cmp	r0, #0
   120fc:	beq	122dc <__mempcpy_chk@plt+0x1288>
   12100:	mov	r9, r8
   12104:	cmp	r0, #0
   12108:	bne	11f3c <__mempcpy_chk@plt+0xee8>
   1210c:	b	12338 <__mempcpy_chk@plt+0x12e4>
   12110:	ldrb	r0, [r9]
   12114:	cmp	r0, #0
   12118:	beq	12188 <__mempcpy_chk@plt+0x1134>
   1211c:	mov	r0, #0
   12120:	ldr	r7, [sp, #16]
   12124:	strb	r0, [r6, -r7]
   12128:	ldrb	r0, [r4]
   1212c:	cmp	r0, #0
   12130:	mov	r0, r4
   12134:	movw	r1, #28786	; 0x7072
   12138:	movt	r1, #1
   1213c:	moveq	r0, r1
   12140:	add	r1, sp, #32
   12144:	bl	169c0 <__mempcpy_chk@plt+0x596c>
   12148:	cmp	r0, #0
   1214c:	bne	1241c <__mempcpy_chk@plt+0x13c8>
   12150:	rsb	r0, r7, #0
   12154:	ldrb	r1, [r9]
   12158:	strb	r1, [r6, r0]
   1215c:	sub	r0, fp, #36	; 0x24
   12160:	mov	r1, r9
   12164:	add	r2, sp, #32
   12168:	bl	12450 <__mempcpy_chk@plt+0x13fc>
   1216c:	cmp	r0, #0
   12170:	beq	12188 <__mempcpy_chk@plt+0x1134>
   12174:	ldr	r0, [sp, #28]
   12178:	cmp	r0, #2
   1217c:	ldr	sl, [sp, #20]
   12180:	beq	122d4 <__mempcpy_chk@plt+0x1280>
   12184:	b	12410 <__mempcpy_chk@plt+0x13bc>
   12188:	mov	r0, #0
   1218c:	strb	r0, [r5, sl]
   12190:	ldr	r9, [fp, #-1072]	; 0xfffffbd0
   12194:	ldr	r0, [sp, #12]
   12198:	tst	r0, #1
   1219c:	ldr	r0, [sp, #8]
   121a0:	subne	r0, r8, r9
   121a4:	str	r0, [sp, #8]
   121a8:	mov	r0, r8
   121ac:	bl	10f7c <strlen@plt>
   121b0:	str	r0, [sp, #16]
   121b4:	adds	r7, r0, sl
   121b8:	bcs	12428 <__mempcpy_chk@plt+0x13d4>
   121bc:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   121c0:	cmp	r0, r7
   121c4:	bhi	121e8 <__mempcpy_chk@plt+0x1194>
   121c8:	sub	r0, fp, #1072	; 0x430
   121cc:	bl	15480 <__mempcpy_chk@plt+0x442c>
   121d0:	cmp	r0, #0
   121d4:	beq	12428 <__mempcpy_chk@plt+0x13d4>
   121d8:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   121dc:	cmp	r0, r7
   121e0:	bls	121c8 <__mempcpy_chk@plt+0x1174>
   121e4:	ldr	r9, [fp, #-1072]	; 0xfffffbd0
   121e8:	ldr	r0, [sp, #12]
   121ec:	tst	r0, #1
   121f0:	ldr	r0, [sp, #8]
   121f4:	addne	r8, r9, r0
   121f8:	add	r0, r9, sl
   121fc:	ldr	r1, [sp, #16]
   12200:	add	r2, r1, #1
   12204:	mov	r1, r8
   12208:	bl	10e2c <memmove@plt>
   1220c:	mov	r0, r9
   12210:	mov	r1, r5
   12214:	mov	r2, sl
   12218:	bl	10e5c <memcpy@plt>
   1221c:	ldrb	r0, [r5]
   12220:	cmp	r0, #47	; 0x2f
   12224:	bne	12258 <__mempcpy_chk@plt+0x1204>
   12228:	mov	r0, r4
   1222c:	mov	r1, r5
   12230:	mov	r2, #0
   12234:	mvn	r3, #0
   12238:	bl	11054 <__mempcpy_chk@plt>
   1223c:	mov	r6, r0
   12240:	mov	r0, #47	; 0x2f
   12244:	strb	r0, [r6], #1
   12248:	mov	r0, #1
   1224c:	str	r0, [sp, #12]
   12250:	ldr	sl, [sp, #20]
   12254:	b	1232c <__mempcpy_chk@plt+0x12d8>
   12258:	add	r0, r4, #1
   1225c:	mov	r1, #1
   12260:	str	r1, [sp, #12]
   12264:	cmp	r6, r0
   12268:	ldr	sl, [sp, #20]
   1226c:	bls	1232c <__mempcpy_chk@plt+0x12d8>
   12270:	sub	r0, r6, #1
   12274:	mov	r6, r0
   12278:	cmp	r0, r4
   1227c:	bls	1232c <__mempcpy_chk@plt+0x12d8>
   12280:	mov	r0, r6
   12284:	ldrb	r1, [r0, #-1]!
   12288:	cmp	r1, #47	; 0x2f
   1228c:	bne	12274 <__mempcpy_chk@plt+0x1220>
   12290:	b	1232c <__mempcpy_chk@plt+0x12d8>
   12294:	add	r0, r4, #1
   12298:	cmp	r6, r0
   1229c:	bls	122d4 <__mempcpy_chk@plt+0x1280>
   122a0:	sub	r0, r6, #1
   122a4:	mov	r6, r0
   122a8:	cmp	r0, r4
   122ac:	bls	122d4 <__mempcpy_chk@plt+0x1280>
   122b0:	mov	r0, r6
   122b4:	ldrb	r1, [r0, #-1]!
   122b8:	cmp	r1, #47	; 0x2f
   122bc:	bne	122a4 <__mempcpy_chk@plt+0x1250>
   122c0:	b	122d4 <__mempcpy_chk@plt+0x1280>
   122c4:	bl	10f88 <__errno_location@plt>
   122c8:	ldr	r0, [r0]
   122cc:	cmp	r0, #22
   122d0:	bne	122ec <__mempcpy_chk@plt+0x1298>
   122d4:	mov	r9, r8
   122d8:	b	1232c <__mempcpy_chk@plt+0x12d8>
   122dc:	mov	r0, r4
   122e0:	bl	1257c <__mempcpy_chk@plt+0x1528>
   122e4:	cmp	r0, #0
   122e8:	bne	122d4 <__mempcpy_chk@plt+0x1280>
   122ec:	mov	r5, #1
   122f0:	ldr	r0, [sp, #28]
   122f4:	cmp	r0, #1
   122f8:	bne	123ac <__mempcpy_chk@plt+0x1358>
   122fc:	bl	10f88 <__errno_location@plt>
   12300:	ldr	r0, [r0]
   12304:	cmp	r0, #2
   12308:	bne	123ac <__mempcpy_chk@plt+0x1358>
   1230c:	mov	r0, r8
   12310:	movw	r1, #29959	; 0x7507
   12314:	movt	r1, #1
   12318:	bl	11048 <strspn@plt>
   1231c:	ldrb	r0, [r8, r0]
   12320:	cmp	r0, #0
   12324:	mov	r9, r8
   12328:	bne	123ac <__mempcpy_chk@plt+0x1358>
   1232c:	ldrb	r0, [r9]
   12330:	cmp	r0, #0
   12334:	bne	11f3c <__mempcpy_chk@plt+0xee8>
   12338:	add	r0, r4, #1
   1233c:	mov	r5, #0
   12340:	cmp	r6, r0
   12344:	bls	123ac <__mempcpy_chk@plt+0x1358>
   12348:	mov	r0, r6
   1234c:	ldrb	r1, [r0, #-1]!
   12350:	cmp	r1, #47	; 0x2f
   12354:	moveq	r6, r0
   12358:	b	123ac <__mempcpy_chk@plt+0x1358>
   1235c:	bl	10f88 <__errno_location@plt>
   12360:	mov	r6, r0
   12364:	ldr	r0, [r6]
   12368:	cmp	r0, #34	; 0x22
   1236c:	bne	1239c <__mempcpy_chk@plt+0x1348>
   12370:	mov	r0, sl
   12374:	bl	153fc <__mempcpy_chk@plt+0x43a8>
   12378:	cmp	r0, #0
   1237c:	beq	12428 <__mempcpy_chk@plt+0x13d4>
   12380:	ldr	r4, [sl]
   12384:	ldr	r1, [sl, #4]
   12388:	mov	r0, r4
   1238c:	bl	10f64 <getcwd@plt>
   12390:	cmp	r0, #0
   12394:	beq	12364 <__mempcpy_chk@plt+0x1310>
   12398:	b	11f04 <__mempcpy_chk@plt+0xeb0>
   1239c:	cmp	r0, #12
   123a0:	beq	12428 <__mempcpy_chk@plt+0x13d4>
   123a4:	mov	r5, #1
   123a8:	mov	r6, r4
   123ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   123b0:	cmp	r0, #0
   123b4:	beq	123bc <__mempcpy_chk@plt+0x1368>
   123b8:	bl	12ed4 <__mempcpy_chk@plt+0x1e80>
   123bc:	sub	r0, fp, #1072	; 0x430
   123c0:	bl	125a4 <__mempcpy_chk@plt+0x1550>
   123c4:	add	r0, sp, #136	; 0x88
   123c8:	bl	125a4 <__mempcpy_chk@plt+0x1550>
   123cc:	cmp	r5, #0
   123d0:	beq	123e4 <__mempcpy_chk@plt+0x1390>
   123d4:	mov	r0, sl
   123d8:	bl	125a4 <__mempcpy_chk@plt+0x1550>
   123dc:	mov	r6, #0
   123e0:	b	12404 <__mempcpy_chk@plt+0x13b0>
   123e4:	mov	r0, #0
   123e8:	strb	r0, [r6], #1
   123ec:	sub	r1, r6, r4
   123f0:	mov	r0, sl
   123f4:	bl	15394 <__mempcpy_chk@plt+0x4340>
   123f8:	mov	r6, r0
   123fc:	cmp	r0, #0
   12400:	beq	12428 <__mempcpy_chk@plt+0x13d4>
   12404:	mov	r0, r6
   12408:	sub	sp, fp, #28
   1240c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12410:	bl	10f88 <__errno_location@plt>
   12414:	mov	r1, #40	; 0x28
   12418:	str	r1, [r0]
   1241c:	mov	r5, #1
   12420:	ldr	sl, [sp, #20]
   12424:	b	123ac <__mempcpy_chk@plt+0x1358>
   12428:	bl	15d9c <__mempcpy_chk@plt+0x4d48>
   1242c:	sub	r1, r0, #1
   12430:	ands	r0, r1, r0
   12434:	movwne	r0, #1
   12438:	bx	lr
   1243c:	mov	r1, #1024	; 0x400
   12440:	add	r2, r0, #8
   12444:	str	r2, [r0]
   12448:	str	r1, [r0, #4]
   1244c:	bx	lr
   12450:	push	{r4, r5, r6, sl, fp, lr}
   12454:	add	fp, sp, #16
   12458:	sub	sp, sp, #8
   1245c:	mov	r4, r2
   12460:	mov	r5, r1
   12464:	mov	r6, r0
   12468:	ldr	r0, [r0]
   1246c:	cmp	r0, #0
   12470:	bne	124a8 <__mempcpy_chk@plt+0x1454>
   12474:	movw	r0, #14120	; 0x3728
   12478:	movt	r0, #1
   1247c:	str	r0, [sp]
   12480:	movw	r2, #13976	; 0x3698
   12484:	movt	r2, #1
   12488:	movw	r3, #14032	; 0x36d0
   1248c:	movt	r3, #1
   12490:	mov	r0, #7
   12494:	mov	r1, #0
   12498:	bl	12c00 <__mempcpy_chk@plt+0x1bac>
   1249c:	str	r0, [r6]
   124a0:	cmp	r0, #0
   124a4:	beq	124e4 <__mempcpy_chk@plt+0x1490>
   124a8:	ldr	r0, [r6]
   124ac:	mov	r1, r5
   124b0:	mov	r2, r4
   124b4:	bl	1273c <__mempcpy_chk@plt+0x16e8>
   124b8:	mov	r1, r0
   124bc:	mov	r0, #1
   124c0:	cmp	r1, #0
   124c4:	bne	124dc <__mempcpy_chk@plt+0x1488>
   124c8:	ldr	r0, [r6]
   124cc:	mov	r1, r5
   124d0:	mov	r2, r4
   124d4:	bl	126c0 <__mempcpy_chk@plt+0x166c>
   124d8:	mov	r0, #0
   124dc:	sub	sp, fp, #16
   124e0:	pop	{r4, r5, r6, sl, fp, pc}
   124e4:	bl	15d9c <__mempcpy_chk@plt+0x4d48>
   124e8:	mov	r1, r0
   124ec:	ldrb	r2, [r0]
   124f0:	mov	r0, #0
   124f4:	cmp	r2, #47	; 0x2f
   124f8:	bxne	lr
   124fc:	mov	r0, #1
   12500:	mov	ip, #0
   12504:	mov	r3, r1
   12508:	ldrb	r2, [r1, #1]!
   1250c:	cmp	r2, #47	; 0x2f
   12510:	beq	12504 <__mempcpy_chk@plt+0x14b0>
   12514:	cmp	r2, #46	; 0x2e
   12518:	bne	12558 <__mempcpy_chk@plt+0x1504>
   1251c:	add	r1, r3, #2
   12520:	ldrb	r2, [r1]
   12524:	cmp	r2, #47	; 0x2f
   12528:	beq	12504 <__mempcpy_chk@plt+0x14b0>
   1252c:	cmp	r2, #0
   12530:	moveq	ip, #1
   12534:	moveq	r0, ip
   12538:	bxeq	lr
   1253c:	cmp	r2, #46	; 0x2e
   12540:	bne	12568 <__mempcpy_chk@plt+0x1514>
   12544:	ldrb	r1, [r3, #3]
   12548:	cmp	r1, #0
   1254c:	cmpne	r1, #47	; 0x2f
   12550:	bne	12568 <__mempcpy_chk@plt+0x1514>
   12554:	bx	lr
   12558:	cmp	r2, #0
   1255c:	movne	r0, ip
   12560:	bxne	lr
   12564:	bx	lr
   12568:	mov	r0, #0
   1256c:	bx	lr
   12570:	mov	r2, #47	; 0x2f
   12574:	strh	r2, [r1]
   12578:	b	1257c <__mempcpy_chk@plt+0x1528>
   1257c:	push	{fp, lr}
   12580:	mov	fp, sp
   12584:	mov	r1, r0
   12588:	mvn	r0, #99	; 0x63
   1258c:	mov	r2, #0
   12590:	mov	r3, #512	; 0x200
   12594:	bl	10e44 <faccessat@plt>
   12598:	clz	r0, r0
   1259c:	lsr	r0, r0, #5
   125a0:	pop	{fp, pc}
   125a4:	mov	r1, r0
   125a8:	ldr	r0, [r1], #8
   125ac:	cmp	r0, r1
   125b0:	bxeq	lr
   125b4:	b	12788 <__mempcpy_chk@plt+0x1734>
   125b8:	movw	r1, #33116	; 0x815c
   125bc:	movt	r1, #2
   125c0:	str	r0, [r1]
   125c4:	bx	lr
   125c8:	movw	r1, #33120	; 0x8160
   125cc:	movt	r1, #2
   125d0:	strb	r0, [r1]
   125d4:	bx	lr
   125d8:	push	{r4, r5, r6, sl, fp, lr}
   125dc:	add	fp, sp, #16
   125e0:	sub	sp, sp, #8
   125e4:	movw	r0, #33092	; 0x8144
   125e8:	movt	r0, #2
   125ec:	ldr	r0, [r0]
   125f0:	bl	16330 <__mempcpy_chk@plt+0x52dc>
   125f4:	cmp	r0, #0
   125f8:	beq	12620 <__mempcpy_chk@plt+0x15cc>
   125fc:	movw	r0, #33120	; 0x8160
   12600:	movt	r0, #2
   12604:	ldrb	r0, [r0]
   12608:	cmp	r0, #0
   1260c:	beq	12640 <__mempcpy_chk@plt+0x15ec>
   12610:	bl	10f88 <__errno_location@plt>
   12614:	ldr	r0, [r0]
   12618:	cmp	r0, #32
   1261c:	bne	12640 <__mempcpy_chk@plt+0x15ec>
   12620:	movw	r0, #33088	; 0x8140
   12624:	movt	r0, #2
   12628:	ldr	r0, [r0]
   1262c:	bl	16330 <__mempcpy_chk@plt+0x52dc>
   12630:	cmp	r0, #0
   12634:	subeq	sp, fp, #16
   12638:	popeq	{r4, r5, r6, sl, fp, pc}
   1263c:	b	126b0 <__mempcpy_chk@plt+0x165c>
   12640:	movw	r1, #28828	; 0x709c
   12644:	movt	r1, #1
   12648:	mov	r0, #0
   1264c:	mov	r2, #5
   12650:	bl	10e80 <dcgettext@plt>
   12654:	mov	r4, r0
   12658:	movw	r0, #33116	; 0x815c
   1265c:	movt	r0, #2
   12660:	ldr	r6, [r0]
   12664:	bl	10f88 <__errno_location@plt>
   12668:	ldr	r5, [r0]
   1266c:	cmp	r6, #0
   12670:	bne	1268c <__mempcpy_chk@plt+0x1638>
   12674:	movw	r2, #28844	; 0x70ac
   12678:	movt	r2, #1
   1267c:	mov	r0, #0
   12680:	mov	r1, r5
   12684:	mov	r3, r4
   12688:	b	126ac <__mempcpy_chk@plt+0x1658>
   1268c:	mov	r0, r6
   12690:	bl	14e30 <__mempcpy_chk@plt+0x3ddc>
   12694:	mov	r3, r0
   12698:	str	r4, [sp]
   1269c:	movw	r2, #28840	; 0x70a8
   126a0:	movt	r2, #1
   126a4:	mov	r0, #0
   126a8:	mov	r1, r5
   126ac:	bl	10f10 <error@plt>
   126b0:	movw	r0, #33004	; 0x80ec
   126b4:	movt	r0, #2
   126b8:	ldr	r0, [r0]
   126bc:	bl	10e50 <_exit@plt>
   126c0:	push	{r4, r5, r6, r7, fp, lr}
   126c4:	add	fp, sp, #16
   126c8:	cmp	r0, #0
   126cc:	popeq	{r4, r5, r6, r7, fp, pc}
   126d0:	mov	r6, r2
   126d4:	mov	r7, r1
   126d8:	mov	r5, r0
   126dc:	mov	r0, #24
   126e0:	bl	159ec <__mempcpy_chk@plt+0x4998>
   126e4:	mov	r4, r0
   126e8:	mov	r0, r7
   126ec:	bl	15d7c <__mempcpy_chk@plt+0x4d28>
   126f0:	str	r0, [r4]
   126f4:	ldrd	r0, [r6, #96]	; 0x60
   126f8:	str	r1, [r4, #12]
   126fc:	str	r0, [r4, #8]
   12700:	ldrd	r0, [r6]
   12704:	str	r1, [r4, #20]
   12708:	str	r0, [r4, #16]
   1270c:	mov	r0, r5
   12710:	mov	r1, r4
   12714:	bl	13490 <__mempcpy_chk@plt+0x243c>
   12718:	cmp	r0, #0
   1271c:	beq	12738 <__mempcpy_chk@plt+0x16e4>
   12720:	cmp	r0, r4
   12724:	beq	12734 <__mempcpy_chk@plt+0x16e0>
   12728:	mov	r0, r4
   1272c:	pop	{r4, r5, r6, r7, fp, lr}
   12730:	b	13728 <__mempcpy_chk@plt+0x26d4>
   12734:	pop	{r4, r5, r6, r7, fp, pc}
   12738:	bl	15d9c <__mempcpy_chk@plt+0x4d48>
   1273c:	cmp	r0, #0
   12740:	moveq	r0, #0
   12744:	bxeq	lr
   12748:	push	{r4, r5, fp, lr}
   1274c:	add	fp, sp, #8
   12750:	sub	sp, sp, #24
   12754:	str	r1, [sp]
   12758:	ldrd	r4, [r2, #96]	; 0x60
   1275c:	str	r5, [sp, #12]
   12760:	str	r4, [sp, #8]
   12764:	ldrd	r2, [r2]
   12768:	str	r3, [sp, #20]
   1276c:	str	r2, [sp, #16]
   12770:	mov	r1, sp
   12774:	bl	12978 <__mempcpy_chk@plt+0x1924>
   12778:	cmp	r0, #0
   1277c:	movwne	r0, #1
   12780:	sub	sp, fp, #8
   12784:	pop	{r4, r5, fp, pc}
   12788:	push	{r4, r5, r6, sl, fp, lr}
   1278c:	add	fp, sp, #16
   12790:	mov	r4, r0
   12794:	bl	10f88 <__errno_location@plt>
   12798:	mov	r5, r0
   1279c:	ldr	r6, [r0]
   127a0:	mov	r0, r4
   127a4:	bl	10e38 <free@plt>
   127a8:	str	r6, [r5]
   127ac:	pop	{r4, r5, r6, sl, fp, pc}
   127b0:	ldr	r0, [r0, #8]
   127b4:	bx	lr
   127b8:	ldr	r0, [r0, #12]
   127bc:	bx	lr
   127c0:	ldr	r0, [r0, #16]
   127c4:	bx	lr
   127c8:	mov	r2, r0
   127cc:	ldm	r0, {r1, r3}
   127d0:	mov	r0, #0
   127d4:	cmp	r1, r3
   127d8:	bxcs	lr
   127dc:	ldr	ip, [r2, #4]
   127e0:	mov	r0, #0
   127e4:	ldr	r2, [r1]
   127e8:	cmp	r2, #0
   127ec:	beq	12810 <__mempcpy_chk@plt+0x17bc>
   127f0:	mov	r3, #0
   127f4:	mov	r2, r1
   127f8:	add	r3, r3, #1
   127fc:	ldr	r2, [r2, #4]
   12800:	cmp	r2, #0
   12804:	bne	127f8 <__mempcpy_chk@plt+0x17a4>
   12808:	cmp	r3, r0
   1280c:	movhi	r0, r3
   12810:	add	r1, r1, #8
   12814:	cmp	r1, ip
   12818:	bcc	127e4 <__mempcpy_chk@plt+0x1790>
   1281c:	bx	lr
   12820:	push	{fp, lr}
   12824:	mov	fp, sp
   12828:	ldr	r3, [r0]
   1282c:	ldr	r1, [r0, #4]
   12830:	mov	lr, #0
   12834:	cmp	r3, r1
   12838:	mov	r1, #0
   1283c:	bcs	1287c <__mempcpy_chk@plt+0x1828>
   12840:	ldr	ip, [r0, #4]
   12844:	mov	r1, #0
   12848:	mov	lr, #0
   1284c:	ldr	r2, [r3]
   12850:	cmp	r2, #0
   12854:	beq	12870 <__mempcpy_chk@plt+0x181c>
   12858:	mov	r2, r3
   1285c:	add	r1, r1, #1
   12860:	ldr	r2, [r2, #4]
   12864:	cmp	r2, #0
   12868:	bne	1285c <__mempcpy_chk@plt+0x1808>
   1286c:	add	lr, lr, #1
   12870:	add	r3, r3, #8
   12874:	cmp	r3, ip
   12878:	bcc	1284c <__mempcpy_chk@plt+0x17f8>
   1287c:	ldr	r2, [r0, #12]
   12880:	cmp	lr, r2
   12884:	bne	1289c <__mempcpy_chk@plt+0x1848>
   12888:	ldr	r2, [r0, #16]
   1288c:	mov	r0, #1
   12890:	cmp	r1, r2
   12894:	movne	r0, #0
   12898:	pop	{fp, pc}
   1289c:	mov	r0, #0
   128a0:	pop	{fp, pc}
   128a4:	nop	{0}
   128a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   128ac:	add	fp, sp, #24
   128b0:	sub	sp, sp, #8
   128b4:	mov	r4, r1
   128b8:	mov	r5, r0
   128bc:	bl	127c0 <__mempcpy_chk@plt+0x176c>
   128c0:	mov	r8, r0
   128c4:	mov	r0, r5
   128c8:	bl	127b0 <__mempcpy_chk@plt+0x175c>
   128cc:	mov	r7, r0
   128d0:	mov	r0, r5
   128d4:	bl	127b8 <__mempcpy_chk@plt+0x1764>
   128d8:	mov	r6, r0
   128dc:	mov	r0, r5
   128e0:	bl	127c8 <__mempcpy_chk@plt+0x1774>
   128e4:	mov	r5, r0
   128e8:	movw	r2, #28847	; 0x70af
   128ec:	movt	r2, #1
   128f0:	mov	r0, r4
   128f4:	mov	r1, #1
   128f8:	mov	r3, r8
   128fc:	bl	10fc4 <__fprintf_chk@plt>
   12900:	movw	r2, #28871	; 0x70c7
   12904:	movt	r2, #1
   12908:	mov	r0, r4
   1290c:	mov	r1, #1
   12910:	mov	r3, r7
   12914:	bl	10fc4 <__fprintf_chk@plt>
   12918:	vldr	d16, [pc, #80]	; 12970 <__mempcpy_chk@plt+0x191c>
   1291c:	vmov	s0, r6
   12920:	vmov	s2, r7
   12924:	vcvt.f64.u32	d17, s0
   12928:	vcvt.f64.u32	d18, s2
   1292c:	vmul.f64	d16, d17, d16
   12930:	vdiv.f64	d16, d16, d18
   12934:	vstr	d16, [sp]
   12938:	movw	r2, #28895	; 0x70df
   1293c:	movt	r2, #1
   12940:	mov	r0, r4
   12944:	mov	r1, #1
   12948:	mov	r3, r6
   1294c:	bl	10fc4 <__fprintf_chk@plt>
   12950:	movw	r2, #28928	; 0x7100
   12954:	movt	r2, #1
   12958:	mov	r0, r4
   1295c:	mov	r1, #1
   12960:	mov	r3, r5
   12964:	sub	sp, fp, #24
   12968:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1296c:	b	10fc4 <__fprintf_chk@plt>
   12970:	andeq	r0, r0, r0
   12974:	subsmi	r0, r9, r0
   12978:	push	{r4, r5, r6, r7, fp, lr}
   1297c:	add	fp, sp, #16
   12980:	mov	r5, r1
   12984:	mov	r6, r0
   12988:	bl	129dc <__mempcpy_chk@plt+0x1988>
   1298c:	mov	r7, r0
   12990:	ldr	r0, [r0]
   12994:	mov	r4, #0
   12998:	cmp	r0, #0
   1299c:	bne	129a8 <__mempcpy_chk@plt+0x1954>
   129a0:	b	129d4 <__mempcpy_chk@plt+0x1980>
   129a4:	ldr	r7, [r7, #4]
   129a8:	cmp	r7, #0
   129ac:	beq	129d4 <__mempcpy_chk@plt+0x1980>
   129b0:	ldr	r1, [r7]
   129b4:	cmp	r1, r5
   129b8:	beq	129d0 <__mempcpy_chk@plt+0x197c>
   129bc:	ldr	r2, [r6, #28]
   129c0:	mov	r0, r5
   129c4:	blx	r2
   129c8:	cmp	r0, #0
   129cc:	beq	129a4 <__mempcpy_chk@plt+0x1950>
   129d0:	ldr	r4, [r7]
   129d4:	mov	r0, r4
   129d8:	pop	{r4, r5, r6, r7, fp, pc}
   129dc:	push	{r4, sl, fp, lr}
   129e0:	add	fp, sp, #8
   129e4:	mov	r2, r1
   129e8:	mov	r4, r0
   129ec:	ldr	r1, [r0, #8]
   129f0:	ldr	r3, [r0, #24]
   129f4:	mov	r0, r2
   129f8:	blx	r3
   129fc:	ldr	r1, [r4, #8]
   12a00:	cmp	r0, r1
   12a04:	ldrcc	r1, [r4]
   12a08:	addcc	r0, r1, r0, lsl #3
   12a0c:	popcc	{r4, sl, fp, pc}
   12a10:	bl	11030 <abort@plt>
   12a14:	ldr	r1, [r0, #16]
   12a18:	cmp	r1, #0
   12a1c:	moveq	r1, #0
   12a20:	moveq	r0, r1
   12a24:	bxeq	lr
   12a28:	ldr	r2, [r0]
   12a2c:	b	12a40 <__mempcpy_chk@plt+0x19ec>
   12a30:	ldr	r1, [r2], #8
   12a34:	cmp	r1, #0
   12a38:	movne	r0, r1
   12a3c:	bxne	lr
   12a40:	ldr	r1, [r0, #4]
   12a44:	cmp	r2, r1
   12a48:	bcc	12a30 <__mempcpy_chk@plt+0x19dc>
   12a4c:	push	{fp, lr}
   12a50:	mov	fp, sp
   12a54:	bl	11030 <abort@plt>
   12a58:	push	{r4, r5, fp, lr}
   12a5c:	add	fp, sp, #8
   12a60:	mov	r5, r1
   12a64:	mov	r4, r0
   12a68:	bl	129dc <__mempcpy_chk@plt+0x1988>
   12a6c:	mov	r1, r0
   12a70:	ldr	r2, [r1]
   12a74:	cmp	r2, r5
   12a78:	bne	12a8c <__mempcpy_chk@plt+0x1a38>
   12a7c:	ldr	r2, [r1, #4]
   12a80:	cmp	r2, #0
   12a84:	ldrne	r0, [r2]
   12a88:	popne	{r4, r5, fp, pc}
   12a8c:	ldr	r1, [r1, #4]
   12a90:	cmp	r1, #0
   12a94:	bne	12a70 <__mempcpy_chk@plt+0x1a1c>
   12a98:	add	r1, r0, #8
   12a9c:	ldr	r2, [r4, #4]
   12aa0:	cmp	r1, r2
   12aa4:	movcs	r0, #0
   12aa8:	popcs	{r4, r5, fp, pc}
   12aac:	ldr	r0, [r1], #8
   12ab0:	cmp	r0, #0
   12ab4:	popne	{r4, r5, fp, pc}
   12ab8:	b	12aa0 <__mempcpy_chk@plt+0x1a4c>
   12abc:	push	{r4, sl, fp, lr}
   12ac0:	add	fp, sp, #8
   12ac4:	mov	ip, r0
   12ac8:	ldr	lr, [r0]
   12acc:	ldr	r3, [r0, #4]
   12ad0:	mov	r0, #0
   12ad4:	cmp	lr, r3
   12ad8:	bcs	12b24 <__mempcpy_chk@plt+0x1ad0>
   12adc:	mov	r0, #0
   12ae0:	ldr	r3, [lr]
   12ae4:	cmp	r3, #0
   12ae8:	cmpne	lr, #0
   12aec:	beq	12b14 <__mempcpy_chk@plt+0x1ac0>
   12af0:	mov	r3, lr
   12af4:	cmp	r0, r2
   12af8:	popcs	{r4, sl, fp, pc}
   12afc:	ldr	r4, [r3]
   12b00:	str	r4, [r1, r0, lsl #2]
   12b04:	add	r0, r0, #1
   12b08:	ldr	r3, [r3, #4]
   12b0c:	cmp	r3, #0
   12b10:	bne	12af4 <__mempcpy_chk@plt+0x1aa0>
   12b14:	ldr	r3, [ip, #4]
   12b18:	add	lr, lr, #8
   12b1c:	cmp	lr, r3
   12b20:	bcc	12ae0 <__mempcpy_chk@plt+0x1a8c>
   12b24:	pop	{r4, sl, fp, pc}
   12b28:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12b2c:	add	fp, sp, #24
   12b30:	mov	r8, r0
   12b34:	ldr	r9, [r0]
   12b38:	ldr	r0, [r0, #4]
   12b3c:	mov	r6, #0
   12b40:	cmp	r9, r0
   12b44:	bcs	12ba4 <__mempcpy_chk@plt+0x1b50>
   12b48:	mov	r4, r2
   12b4c:	mov	r5, r1
   12b50:	mov	r6, #0
   12b54:	b	12b84 <__mempcpy_chk@plt+0x1b30>
   12b58:	mov	r7, r9
   12b5c:	ldr	r0, [r7]
   12b60:	mov	r1, r4
   12b64:	blx	r5
   12b68:	cmp	r0, #0
   12b6c:	beq	12ba4 <__mempcpy_chk@plt+0x1b50>
   12b70:	add	r6, r6, #1
   12b74:	ldr	r7, [r7, #4]
   12b78:	cmp	r7, #0
   12b7c:	bne	12b5c <__mempcpy_chk@plt+0x1b08>
   12b80:	b	12b94 <__mempcpy_chk@plt+0x1b40>
   12b84:	ldr	r0, [r9]
   12b88:	cmp	r0, #0
   12b8c:	cmpne	r9, #0
   12b90:	bne	12b58 <__mempcpy_chk@plt+0x1b04>
   12b94:	ldr	r0, [r8, #4]
   12b98:	add	r9, r9, #8
   12b9c:	cmp	r9, r0
   12ba0:	bcc	12b84 <__mempcpy_chk@plt+0x1b30>
   12ba4:	mov	r0, r6
   12ba8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12bac:	ldrb	r2, [r0]
   12bb0:	cmp	r2, #0
   12bb4:	moveq	r0, #0
   12bb8:	bxeq	lr
   12bbc:	add	r3, r0, #1
   12bc0:	mov	r0, #0
   12bc4:	rsb	r0, r0, r0, lsl #5
   12bc8:	uxtab	r0, r0, r2
   12bcc:	udiv	r2, r0, r1
   12bd0:	mls	r0, r2, r1, r0
   12bd4:	ldrb	r2, [r3], #1
   12bd8:	cmp	r2, #0
   12bdc:	bne	12bc4 <__mempcpy_chk@plt+0x1b70>
   12be0:	bx	lr
   12be4:	movw	r1, #28952	; 0x7118
   12be8:	movt	r1, #1
   12bec:	vld1.32	{d16-d17}, [r1]!
   12bf0:	vst1.32	{d16-d17}, [r0]!
   12bf4:	ldr	r1, [r1]
   12bf8:	str	r1, [r0]
   12bfc:	bx	lr
   12c00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c04:	add	fp, sp, #28
   12c08:	sub	sp, sp, #4
   12c0c:	mov	r7, r1
   12c10:	mov	r8, r0
   12c14:	movw	sl, #11520	; 0x2d00
   12c18:	movt	sl, #1
   12c1c:	cmp	r3, #0
   12c20:	movne	sl, r3
   12c24:	movw	r5, #11488	; 0x2ce0
   12c28:	movt	r5, #1
   12c2c:	cmp	r2, #0
   12c30:	movne	r5, r2
   12c34:	mov	r0, #40	; 0x28
   12c38:	bl	15e34 <__mempcpy_chk@plt+0x4de0>
   12c3c:	mov	r9, #0
   12c40:	cmp	r0, #0
   12c44:	beq	12cd4 <__mempcpy_chk@plt+0x1c80>
   12c48:	mov	r4, r0
   12c4c:	movw	r6, #28952	; 0x7118
   12c50:	movt	r6, #1
   12c54:	cmp	r7, #0
   12c58:	movne	r6, r7
   12c5c:	str	r6, [r0, #20]
   12c60:	bl	12d10 <__mempcpy_chk@plt+0x1cbc>
   12c64:	cmp	r0, #0
   12c68:	beq	12ccc <__mempcpy_chk@plt+0x1c78>
   12c6c:	mov	r0, r8
   12c70:	mov	r1, r6
   12c74:	bl	12dbc <__mempcpy_chk@plt+0x1d68>
   12c78:	str	r0, [r4, #8]
   12c7c:	cmp	r0, #0
   12c80:	beq	12ccc <__mempcpy_chk@plt+0x1c78>
   12c84:	mov	r1, #8
   12c88:	bl	15de0 <__mempcpy_chk@plt+0x4d8c>
   12c8c:	str	r0, [r4]
   12c90:	cmp	r0, #0
   12c94:	beq	12ccc <__mempcpy_chk@plt+0x1c78>
   12c98:	ldr	r1, [fp, #8]
   12c9c:	mov	r2, #0
   12ca0:	str	r2, [r4, #12]
   12ca4:	str	r2, [r4, #16]
   12ca8:	str	r5, [r4, #24]
   12cac:	str	sl, [r4, #28]
   12cb0:	str	r1, [r4, #32]
   12cb4:	str	r2, [r4, #36]	; 0x24
   12cb8:	ldr	r1, [r4, #8]
   12cbc:	add	r0, r0, r1, lsl #3
   12cc0:	str	r0, [r4, #4]
   12cc4:	mov	r9, r4
   12cc8:	b	12cd4 <__mempcpy_chk@plt+0x1c80>
   12ccc:	mov	r0, r4
   12cd0:	bl	12788 <__mempcpy_chk@plt+0x1734>
   12cd4:	mov	r0, r9
   12cd8:	sub	sp, fp, #28
   12cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ce0:	push	{r4, sl, fp, lr}
   12ce4:	add	fp, sp, #8
   12ce8:	mov	r4, r1
   12cec:	mov	r1, #3
   12cf0:	bl	15f94 <__mempcpy_chk@plt+0x4f40>
   12cf4:	udiv	r1, r0, r4
   12cf8:	mls	r0, r1, r4, r0
   12cfc:	pop	{r4, sl, fp, pc}
   12d00:	sub	r0, r0, r1
   12d04:	clz	r0, r0
   12d08:	lsr	r0, r0, #5
   12d0c:	bx	lr
   12d10:	mov	r1, r0
   12d14:	ldr	r3, [r0, #20]
   12d18:	mov	r0, #1
   12d1c:	movw	r2, #28952	; 0x7118
   12d20:	movt	r2, #1
   12d24:	cmp	r3, r2
   12d28:	beq	12dac <__mempcpy_chk@plt+0x1d58>
   12d2c:	vldr	s2, [pc, #124]	; 12db0 <__mempcpy_chk@plt+0x1d5c>
   12d30:	vldr	s0, [r3, #8]
   12d34:	vcmpe.f32	s0, s2
   12d38:	vmrs	APSR_nzcv, fpscr
   12d3c:	ble	12da4 <__mempcpy_chk@plt+0x1d50>
   12d40:	vldr	s4, [pc, #108]	; 12db4 <__mempcpy_chk@plt+0x1d60>
   12d44:	vcmpe.f32	s0, s4
   12d48:	vmrs	APSR_nzcv, fpscr
   12d4c:	bpl	12da4 <__mempcpy_chk@plt+0x1d50>
   12d50:	vldr	s4, [pc, #96]	; 12db8 <__mempcpy_chk@plt+0x1d64>
   12d54:	vldr	s6, [r3, #12]
   12d58:	vcmpe.f32	s6, s4
   12d5c:	vmrs	APSR_nzcv, fpscr
   12d60:	ble	12da4 <__mempcpy_chk@plt+0x1d50>
   12d64:	vldr	s4, [r3]
   12d68:	vcmpe.f32	s4, #0.0
   12d6c:	vmrs	APSR_nzcv, fpscr
   12d70:	blt	12da4 <__mempcpy_chk@plt+0x1d50>
   12d74:	vadd.f32	s2, s4, s2
   12d78:	vcmpe.f32	s2, s0
   12d7c:	vmrs	APSR_nzcv, fpscr
   12d80:	bpl	12da4 <__mempcpy_chk@plt+0x1d50>
   12d84:	vldr	s0, [r3, #4]
   12d88:	vmov.f32	s4, #112	; 0x3f800000  1.0
   12d8c:	vcmpe.f32	s0, s4
   12d90:	vmrs	APSR_nzcv, fpscr
   12d94:	bhi	12da4 <__mempcpy_chk@plt+0x1d50>
   12d98:	vcmpe.f32	s2, s0
   12d9c:	vmrs	APSR_nzcv, fpscr
   12da0:	bxmi	lr
   12da4:	str	r2, [r1, #20]
   12da8:	mov	r0, #0
   12dac:	bx	lr
   12db0:	stclcc	12, cr12, [ip, #820]	; 0x334
   12db4:	svccc	0x00666666
   12db8:	svccc	0x008ccccd
   12dbc:	ldrb	r2, [r1, #16]
   12dc0:	cmp	r2, #0
   12dc4:	bne	12df4 <__mempcpy_chk@plt+0x1da0>
   12dc8:	vldr	s0, [r1, #8]
   12dcc:	vmov	s2, r0
   12dd0:	vcvt.f32.u32	s2, s2
   12dd4:	vdiv.f32	s2, s2, s0
   12dd8:	vcvt.u32.f32	s0, s2
   12ddc:	vldr	s4, [pc, #44]	; 12e10 <__mempcpy_chk@plt+0x1dbc>
   12de0:	mov	r0, #0
   12de4:	vcmpe.f32	s2, s4
   12de8:	vmrs	APSR_nzcv, fpscr
   12dec:	bxge	lr
   12df0:	vmov	r0, s0
   12df4:	push	{fp, lr}
   12df8:	mov	fp, sp
   12dfc:	bl	135e0 <__mempcpy_chk@plt+0x258c>
   12e00:	cmn	r0, #-536870911	; 0xe0000001
   12e04:	movwhi	r0, #0
   12e08:	pop	{fp, lr}
   12e0c:	bx	lr
   12e10:	svcmi	0x00800000
   12e14:	push	{r4, r5, r6, r7, fp, lr}
   12e18:	add	fp, sp, #16
   12e1c:	mov	r4, r0
   12e20:	ldr	r5, [r0]
   12e24:	ldr	r0, [r0, #4]
   12e28:	cmp	r5, r0
   12e2c:	bcs	12ec4 <__mempcpy_chk@plt+0x1e70>
   12e30:	mov	r6, #0
   12e34:	ldr	r0, [r5]
   12e38:	cmp	r0, #0
   12e3c:	beq	12eb4 <__mempcpy_chk@plt+0x1e60>
   12e40:	ldr	r7, [r5, #4]
   12e44:	ldr	r1, [r4, #32]
   12e48:	cmp	r1, #0
   12e4c:	mov	r0, r1
   12e50:	movwne	r0, #1
   12e54:	cmp	r7, #0
   12e58:	beq	12e9c <__mempcpy_chk@plt+0x1e48>
   12e5c:	tst	r0, #1
   12e60:	beq	12e6c <__mempcpy_chk@plt+0x1e18>
   12e64:	ldr	r0, [r7]
   12e68:	blx	r1
   12e6c:	str	r6, [r7]
   12e70:	ldr	r2, [r7, #4]
   12e74:	ldr	r0, [r4, #36]	; 0x24
   12e78:	str	r0, [r7, #4]
   12e7c:	str	r7, [r4, #36]	; 0x24
   12e80:	ldr	r1, [r4, #32]
   12e84:	cmp	r1, #0
   12e88:	mov	r0, r1
   12e8c:	movwne	r0, #1
   12e90:	cmp	r2, #0
   12e94:	mov	r7, r2
   12e98:	bne	12e5c <__mempcpy_chk@plt+0x1e08>
   12e9c:	cmp	r0, #0
   12ea0:	beq	12eac <__mempcpy_chk@plt+0x1e58>
   12ea4:	ldr	r0, [r5]
   12ea8:	blx	r1
   12eac:	str	r6, [r5]
   12eb0:	str	r6, [r5, #4]
   12eb4:	ldr	r0, [r4, #4]
   12eb8:	add	r5, r5, #8
   12ebc:	cmp	r5, r0
   12ec0:	bcc	12e34 <__mempcpy_chk@plt+0x1de0>
   12ec4:	mov	r0, #0
   12ec8:	str	r0, [r4, #12]
   12ecc:	str	r0, [r4, #16]
   12ed0:	pop	{r4, r5, r6, r7, fp, pc}
   12ed4:	push	{r4, r5, r6, sl, fp, lr}
   12ed8:	add	fp, sp, #16
   12edc:	mov	r4, r0
   12ee0:	ldr	r0, [r0, #32]
   12ee4:	cmp	r0, #0
   12ee8:	ldrne	r0, [r4, #16]
   12eec:	cmpne	r0, #0
   12ef0:	beq	12f48 <__mempcpy_chk@plt+0x1ef4>
   12ef4:	ldr	r5, [r4]
   12ef8:	ldr	r0, [r4, #4]
   12efc:	cmp	r5, r0
   12f00:	bcc	12f18 <__mempcpy_chk@plt+0x1ec4>
   12f04:	b	12f48 <__mempcpy_chk@plt+0x1ef4>
   12f08:	ldr	r0, [r4, #4]
   12f0c:	add	r5, r5, #8
   12f10:	cmp	r5, r0
   12f14:	bcs	12f48 <__mempcpy_chk@plt+0x1ef4>
   12f18:	ldr	r0, [r5]
   12f1c:	cmp	r0, #0
   12f20:	cmpne	r5, #0
   12f24:	beq	12f08 <__mempcpy_chk@plt+0x1eb4>
   12f28:	mov	r6, r5
   12f2c:	ldr	r0, [r6]
   12f30:	ldr	r1, [r4, #32]
   12f34:	blx	r1
   12f38:	ldr	r6, [r6, #4]
   12f3c:	cmp	r6, #0
   12f40:	bne	12f2c <__mempcpy_chk@plt+0x1ed8>
   12f44:	b	12f08 <__mempcpy_chk@plt+0x1eb4>
   12f48:	ldr	r5, [r4]
   12f4c:	ldr	r0, [r4, #4]
   12f50:	cmp	r5, r0
   12f54:	bcc	12f6c <__mempcpy_chk@plt+0x1f18>
   12f58:	b	12f90 <__mempcpy_chk@plt+0x1f3c>
   12f5c:	ldr	r0, [r4, #4]
   12f60:	add	r5, r5, #8
   12f64:	cmp	r5, r0
   12f68:	bcs	12f90 <__mempcpy_chk@plt+0x1f3c>
   12f6c:	ldr	r0, [r5, #4]
   12f70:	cmp	r0, #0
   12f74:	beq	12f5c <__mempcpy_chk@plt+0x1f08>
   12f78:	ldr	r6, [r0, #4]
   12f7c:	bl	12788 <__mempcpy_chk@plt+0x1734>
   12f80:	cmp	r6, #0
   12f84:	mov	r0, r6
   12f88:	bne	12f78 <__mempcpy_chk@plt+0x1f24>
   12f8c:	b	12f5c <__mempcpy_chk@plt+0x1f08>
   12f90:	ldr	r0, [r4, #36]	; 0x24
   12f94:	cmp	r0, #0
   12f98:	beq	12fb0 <__mempcpy_chk@plt+0x1f5c>
   12f9c:	ldr	r5, [r0, #4]
   12fa0:	bl	12788 <__mempcpy_chk@plt+0x1734>
   12fa4:	cmp	r5, #0
   12fa8:	mov	r0, r5
   12fac:	bne	12f9c <__mempcpy_chk@plt+0x1f48>
   12fb0:	ldr	r0, [r4]
   12fb4:	bl	12788 <__mempcpy_chk@plt+0x1734>
   12fb8:	mov	r0, r4
   12fbc:	pop	{r4, r5, r6, sl, fp, lr}
   12fc0:	b	12788 <__mempcpy_chk@plt+0x1734>
   12fc4:	push	{r4, r5, r6, sl, fp, lr}
   12fc8:	add	fp, sp, #16
   12fcc:	sub	sp, sp, #40	; 0x28
   12fd0:	mov	r2, r1
   12fd4:	mov	r4, r0
   12fd8:	ldr	r1, [r0, #20]
   12fdc:	mov	r0, r2
   12fe0:	bl	12dbc <__mempcpy_chk@plt+0x1d68>
   12fe4:	mov	r5, #0
   12fe8:	cmp	r0, #0
   12fec:	beq	130c8 <__mempcpy_chk@plt+0x2074>
   12ff0:	mov	r6, r0
   12ff4:	ldr	r0, [r4, #8]
   12ff8:	cmp	r6, r0
   12ffc:	bne	13008 <__mempcpy_chk@plt+0x1fb4>
   13000:	mov	r5, #1
   13004:	b	130c8 <__mempcpy_chk@plt+0x2074>
   13008:	mov	r0, r6
   1300c:	mov	r1, #8
   13010:	bl	15de0 <__mempcpy_chk@plt+0x4d8c>
   13014:	str	r0, [sp]
   13018:	cmp	r0, #0
   1301c:	beq	130c8 <__mempcpy_chk@plt+0x2074>
   13020:	str	r6, [sp, #8]
   13024:	mov	r0, #0
   13028:	str	r0, [sp, #12]
   1302c:	str	r0, [sp, #16]
   13030:	ldr	r0, [sp]
   13034:	add	r0, r0, r6, lsl #3
   13038:	str	r0, [sp, #4]
   1303c:	add	r6, r4, #20
   13040:	ldm	r6, {r0, r1, r2, r3, r6}
   13044:	add	ip, sp, #20
   13048:	stm	ip, {r0, r1, r2, r3, r6}
   1304c:	mov	r0, sp
   13050:	mov	r1, r4
   13054:	mov	r2, #0
   13058:	bl	130d8 <__mempcpy_chk@plt+0x2084>
   1305c:	cmp	r0, #0
   13060:	beq	13084 <__mempcpy_chk@plt+0x2030>
   13064:	ldr	r0, [r4]
   13068:	bl	12788 <__mempcpy_chk@plt+0x1734>
   1306c:	ldm	sp, {r0, r1, r2, r3}
   13070:	stm	r4, {r0, r1, r2, r3}
   13074:	ldr	r0, [sp, #36]	; 0x24
   13078:	str	r0, [r4, #36]	; 0x24
   1307c:	mov	r5, #1
   13080:	b	130c8 <__mempcpy_chk@plt+0x2074>
   13084:	ldr	r0, [sp, #36]	; 0x24
   13088:	str	r0, [r4, #36]	; 0x24
   1308c:	mov	r1, sp
   13090:	mov	r0, r4
   13094:	mov	r2, #1
   13098:	bl	130d8 <__mempcpy_chk@plt+0x2084>
   1309c:	cmp	r0, #0
   130a0:	beq	130d4 <__mempcpy_chk@plt+0x2080>
   130a4:	mov	r1, sp
   130a8:	mov	r5, #0
   130ac:	mov	r0, r4
   130b0:	mov	r2, #0
   130b4:	bl	130d8 <__mempcpy_chk@plt+0x2084>
   130b8:	cmp	r0, #0
   130bc:	beq	130d4 <__mempcpy_chk@plt+0x2080>
   130c0:	ldr	r0, [sp]
   130c4:	bl	12788 <__mempcpy_chk@plt+0x1734>
   130c8:	mov	r0, r5
   130cc:	sub	sp, fp, #16
   130d0:	pop	{r4, r5, r6, sl, fp, pc}
   130d4:	bl	11030 <abort@plt>
   130d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130dc:	add	fp, sp, #28
   130e0:	sub	sp, sp, #4
   130e4:	mov	r7, r0
   130e8:	ldr	r6, [r1]
   130ec:	ldr	r0, [r1, #4]
   130f0:	cmp	r6, r0
   130f4:	bcs	131f8 <__mempcpy_chk@plt+0x21a4>
   130f8:	mov	r9, r2
   130fc:	mov	sl, r1
   13100:	ldr	r0, [r6]
   13104:	cmp	r0, #0
   13108:	beq	131e8 <__mempcpy_chk@plt+0x2194>
   1310c:	ldr	r4, [r6, #4]
   13110:	cmp	r4, #0
   13114:	beq	13170 <__mempcpy_chk@plt+0x211c>
   13118:	ldr	r5, [r4]
   1311c:	mov	r0, r7
   13120:	mov	r1, r5
   13124:	bl	129dc <__mempcpy_chk@plt+0x1988>
   13128:	ldr	r1, [r0]
   1312c:	ldr	r8, [r4, #4]
   13130:	cmp	r1, #0
   13134:	beq	13148 <__mempcpy_chk@plt+0x20f4>
   13138:	ldr	r1, [r0, #4]
   1313c:	str	r1, [r4, #4]
   13140:	str	r4, [r0, #4]
   13144:	b	13164 <__mempcpy_chk@plt+0x2110>
   13148:	str	r5, [r0]
   1314c:	ldr	r0, [r7, #12]
   13150:	add	r0, r0, #1
   13154:	str	r0, [r7, #12]
   13158:	mov	r0, r7
   1315c:	mov	r1, r4
   13160:	bl	13680 <__mempcpy_chk@plt+0x262c>
   13164:	cmp	r8, #0
   13168:	mov	r4, r8
   1316c:	bne	13118 <__mempcpy_chk@plt+0x20c4>
   13170:	mov	r0, #0
   13174:	str	r0, [r6, #4]
   13178:	cmp	r9, #0
   1317c:	bne	131e8 <__mempcpy_chk@plt+0x2194>
   13180:	ldr	r4, [r6]
   13184:	mov	r0, r7
   13188:	mov	r1, r4
   1318c:	bl	129dc <__mempcpy_chk@plt+0x1988>
   13190:	mov	r5, r0
   13194:	ldr	r0, [r0]
   13198:	cmp	r0, #0
   1319c:	beq	131c4 <__mempcpy_chk@plt+0x2170>
   131a0:	mov	r0, r7
   131a4:	bl	13464 <__mempcpy_chk@plt+0x2410>
   131a8:	cmp	r0, #0
   131ac:	beq	13204 <__mempcpy_chk@plt+0x21b0>
   131b0:	str	r4, [r0]
   131b4:	ldr	r1, [r5, #4]
   131b8:	str	r1, [r0, #4]
   131bc:	str	r0, [r5, #4]
   131c0:	b	131d4 <__mempcpy_chk@plt+0x2180>
   131c4:	str	r4, [r5]
   131c8:	ldr	r0, [r7, #12]
   131cc:	add	r0, r0, #1
   131d0:	str	r0, [r7, #12]
   131d4:	mov	r0, #0
   131d8:	str	r0, [r6]
   131dc:	ldr	r0, [sl, #12]
   131e0:	sub	r0, r0, #1
   131e4:	str	r0, [sl, #12]
   131e8:	add	r6, r6, #8
   131ec:	ldr	r0, [sl, #4]
   131f0:	cmp	r6, r0
   131f4:	bcc	13100 <__mempcpy_chk@plt+0x20ac>
   131f8:	mov	r0, #1
   131fc:	sub	sp, fp, #28
   13200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13204:	mov	r0, #0
   13208:	sub	sp, fp, #28
   1320c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13210:	push	{r4, r5, r6, r7, fp, lr}
   13214:	add	fp, sp, #16
   13218:	sub	sp, sp, #8
   1321c:	cmp	r1, #0
   13220:	beq	13380 <__mempcpy_chk@plt+0x232c>
   13224:	mov	r7, r2
   13228:	mov	r5, r1
   1322c:	mov	r4, r0
   13230:	add	r2, sp, #4
   13234:	mov	r6, #0
   13238:	mov	r3, #0
   1323c:	bl	13388 <__mempcpy_chk@plt+0x2334>
   13240:	cmp	r0, #0
   13244:	beq	13254 <__mempcpy_chk@plt+0x2200>
   13248:	cmp	r7, #0
   1324c:	strne	r0, [r7]
   13250:	b	13374 <__mempcpy_chk@plt+0x2320>
   13254:	vldr	s0, [r4, #8]
   13258:	vldr	s2, [r4, #12]
   1325c:	ldr	r0, [r4, #20]
   13260:	vldr	s4, [r0, #8]
   13264:	vcvt.f32.u32	s0, s0
   13268:	vcvt.f32.u32	s2, s2
   1326c:	vmul.f32	s0, s4, s0
   13270:	vcmpe.f32	s0, s2
   13274:	vmrs	APSR_nzcv, fpscr
   13278:	bpl	1330c <__mempcpy_chk@plt+0x22b8>
   1327c:	mov	r0, r4
   13280:	bl	12d10 <__mempcpy_chk@plt+0x1cbc>
   13284:	vldr	s0, [r4, #8]
   13288:	vldr	s4, [r4, #12]
   1328c:	ldr	r0, [r4, #20]
   13290:	vcvt.f32.u32	s2, s0
   13294:	vldr	s0, [r0, #8]
   13298:	vcvt.f32.u32	s4, s4
   1329c:	vmul.f32	s6, s0, s2
   132a0:	vcmpe.f32	s6, s4
   132a4:	vmrs	APSR_nzcv, fpscr
   132a8:	bpl	1330c <__mempcpy_chk@plt+0x22b8>
   132ac:	vldr	s4, [r0, #12]
   132b0:	vmul.f32	s2, s4, s2
   132b4:	ldrb	r0, [r0, #16]
   132b8:	vmul.f32	s0, s0, s2
   132bc:	mvn	r6, #0
   132c0:	vldr	s4, [pc, #188]	; 13384 <__mempcpy_chk@plt+0x2330>
   132c4:	cmp	r0, #0
   132c8:	vseleq.f32	s0, s0, s2
   132cc:	vcmpe.f32	s0, s4
   132d0:	vmrs	APSR_nzcv, fpscr
   132d4:	bge	13374 <__mempcpy_chk@plt+0x2320>
   132d8:	vcvt.u32.f32	s0, s0
   132dc:	vmov	r1, s0
   132e0:	mov	r0, r4
   132e4:	bl	12fc4 <__mempcpy_chk@plt+0x1f70>
   132e8:	cmp	r0, #0
   132ec:	beq	13374 <__mempcpy_chk@plt+0x2320>
   132f0:	add	r2, sp, #4
   132f4:	mov	r0, r4
   132f8:	mov	r1, r5
   132fc:	mov	r3, #0
   13300:	bl	13388 <__mempcpy_chk@plt+0x2334>
   13304:	cmp	r0, #0
   13308:	bne	13380 <__mempcpy_chk@plt+0x232c>
   1330c:	ldr	r6, [sp, #4]
   13310:	ldr	r0, [r6]
   13314:	cmp	r0, #0
   13318:	beq	1334c <__mempcpy_chk@plt+0x22f8>
   1331c:	mov	r0, r4
   13320:	bl	13464 <__mempcpy_chk@plt+0x2410>
   13324:	cmp	r0, #0
   13328:	beq	13370 <__mempcpy_chk@plt+0x231c>
   1332c:	str	r5, [r0]
   13330:	ldr	r1, [r6, #4]
   13334:	str	r1, [r0, #4]
   13338:	str	r0, [r6, #4]
   1333c:	ldr	r0, [r4, #16]
   13340:	add	r0, r0, #1
   13344:	str	r0, [r4, #16]
   13348:	b	13368 <__mempcpy_chk@plt+0x2314>
   1334c:	str	r5, [r6]
   13350:	ldr	r0, [r4, #12]
   13354:	ldr	r1, [r4, #16]
   13358:	add	r1, r1, #1
   1335c:	add	r0, r0, #1
   13360:	str	r0, [r4, #12]
   13364:	str	r1, [r4, #16]
   13368:	mov	r6, #1
   1336c:	b	13374 <__mempcpy_chk@plt+0x2320>
   13370:	mvn	r6, #0
   13374:	mov	r0, r6
   13378:	sub	sp, fp, #16
   1337c:	pop	{r4, r5, r6, r7, fp, pc}
   13380:	bl	11030 <abort@plt>
   13384:	svcmi	0x00800000
   13388:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1338c:	add	fp, sp, #24
   13390:	mov	r8, r3
   13394:	mov	r4, r2
   13398:	mov	r7, r1
   1339c:	mov	r5, r0
   133a0:	bl	129dc <__mempcpy_chk@plt+0x1988>
   133a4:	str	r0, [r4]
   133a8:	ldr	r1, [r0]
   133ac:	mov	r4, #0
   133b0:	cmp	r1, #0
   133b4:	beq	1345c <__mempcpy_chk@plt+0x2408>
   133b8:	mov	r6, r0
   133bc:	cmp	r1, r7
   133c0:	beq	133d8 <__mempcpy_chk@plt+0x2384>
   133c4:	ldr	r2, [r5, #28]
   133c8:	mov	r0, r7
   133cc:	blx	r2
   133d0:	cmp	r0, #0
   133d4:	beq	13400 <__mempcpy_chk@plt+0x23ac>
   133d8:	ldr	r4, [r6]
   133dc:	cmp	r8, #0
   133e0:	beq	1345c <__mempcpy_chk@plt+0x2408>
   133e4:	ldr	r1, [r6, #4]
   133e8:	cmp	r1, #0
   133ec:	beq	13454 <__mempcpy_chk@plt+0x2400>
   133f0:	ldm	r1, {r0, r2}
   133f4:	stm	r6, {r0, r2}
   133f8:	b	13444 <__mempcpy_chk@plt+0x23f0>
   133fc:	ldr	r6, [r6]
   13400:	ldr	r0, [r6, #4]!
   13404:	cmp	r0, #0
   13408:	beq	1345c <__mempcpy_chk@plt+0x2408>
   1340c:	ldr	r1, [r0]
   13410:	cmp	r1, r7
   13414:	beq	1342c <__mempcpy_chk@plt+0x23d8>
   13418:	ldr	r2, [r5, #28]
   1341c:	mov	r0, r7
   13420:	blx	r2
   13424:	cmp	r0, #0
   13428:	beq	133fc <__mempcpy_chk@plt+0x23a8>
   1342c:	ldr	r1, [r6]
   13430:	ldr	r4, [r1]
   13434:	cmp	r8, #0
   13438:	beq	1345c <__mempcpy_chk@plt+0x2408>
   1343c:	ldr	r0, [r1, #4]
   13440:	str	r0, [r6]
   13444:	mov	r0, r5
   13448:	bl	13680 <__mempcpy_chk@plt+0x262c>
   1344c:	mov	r0, r4
   13450:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13454:	mov	r0, #0
   13458:	str	r0, [r6]
   1345c:	mov	r0, r4
   13460:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13464:	mov	r1, r0
   13468:	ldr	r0, [r0, #36]	; 0x24
   1346c:	cmp	r0, #0
   13470:	ldrne	r2, [r0, #4]
   13474:	strne	r2, [r1, #36]	; 0x24
   13478:	bxne	lr
   1347c:	push	{fp, lr}
   13480:	mov	fp, sp
   13484:	mov	r0, #8
   13488:	bl	15e34 <__mempcpy_chk@plt+0x4de0>
   1348c:	pop	{fp, pc}
   13490:	push	{r4, sl, fp, lr}
   13494:	add	fp, sp, #8
   13498:	sub	sp, sp, #8
   1349c:	mov	r4, r1
   134a0:	add	r2, sp, #4
   134a4:	bl	13210 <__mempcpy_chk@plt+0x21bc>
   134a8:	cmn	r0, #1
   134ac:	beq	134c0 <__mempcpy_chk@plt+0x246c>
   134b0:	ldr	r1, [sp, #4]
   134b4:	cmp	r0, #0
   134b8:	moveq	r4, r1
   134bc:	b	134c4 <__mempcpy_chk@plt+0x2470>
   134c0:	mov	r4, #0
   134c4:	mov	r0, r4
   134c8:	sub	sp, fp, #8
   134cc:	pop	{r4, sl, fp, pc}
   134d0:	push	{r4, r5, r6, sl, fp, lr}
   134d4:	add	fp, sp, #16
   134d8:	sub	sp, sp, #8
   134dc:	mov	r4, r0
   134e0:	add	r2, sp, #4
   134e4:	mov	r3, #1
   134e8:	bl	13388 <__mempcpy_chk@plt+0x2334>
   134ec:	mov	r5, r0
   134f0:	cmp	r0, #0
   134f4:	beq	135d0 <__mempcpy_chk@plt+0x257c>
   134f8:	ldr	r0, [r4, #16]
   134fc:	sub	r0, r0, #1
   13500:	str	r0, [r4, #16]
   13504:	ldr	r0, [sp, #4]
   13508:	ldr	r0, [r0]
   1350c:	cmp	r0, #0
   13510:	bne	135d0 <__mempcpy_chk@plt+0x257c>
   13514:	ldr	r0, [r4, #12]
   13518:	sub	r0, r0, #1
   1351c:	vldr	s0, [r4, #8]
   13520:	str	r0, [r4, #12]
   13524:	ldr	r1, [r4, #20]
   13528:	vldr	s2, [r1]
   1352c:	vcvt.f32.u32	s0, s0
   13530:	vmov	s4, r0
   13534:	vcvt.f32.u32	s4, s4
   13538:	vmul.f32	s0, s2, s0
   1353c:	vcmpe.f32	s0, s4
   13540:	vmrs	APSR_nzcv, fpscr
   13544:	ble	135d0 <__mempcpy_chk@plt+0x257c>
   13548:	mov	r0, r4
   1354c:	bl	12d10 <__mempcpy_chk@plt+0x1cbc>
   13550:	vldr	s0, [r4, #8]
   13554:	vldr	s2, [r4, #12]
   13558:	ldr	r0, [r4, #20]
   1355c:	vcvt.f32.u32	s0, s0
   13560:	vldr	s4, [r0]
   13564:	vcvt.f32.u32	s2, s2
   13568:	vmul.f32	s4, s4, s0
   1356c:	vcmpe.f32	s4, s2
   13570:	vmrs	APSR_nzcv, fpscr
   13574:	ble	135d0 <__mempcpy_chk@plt+0x257c>
   13578:	vldr	s2, [r0, #4]
   1357c:	ldrb	r1, [r0, #16]
   13580:	vmul.f32	s0, s2, s0
   13584:	cmp	r1, #0
   13588:	vldreq	s2, [r0, #8]
   1358c:	vmuleq.f32	s0, s0, s2
   13590:	vcvt.u32.f32	s0, s0
   13594:	vmov	r1, s0
   13598:	mov	r0, r4
   1359c:	bl	12fc4 <__mempcpy_chk@plt+0x1f70>
   135a0:	cmp	r0, #0
   135a4:	bne	135d0 <__mempcpy_chk@plt+0x257c>
   135a8:	ldr	r0, [r4, #36]	; 0x24
   135ac:	cmp	r0, #0
   135b0:	beq	135c8 <__mempcpy_chk@plt+0x2574>
   135b4:	ldr	r6, [r0, #4]
   135b8:	bl	12788 <__mempcpy_chk@plt+0x1734>
   135bc:	cmp	r6, #0
   135c0:	mov	r0, r6
   135c4:	bne	135b4 <__mempcpy_chk@plt+0x2560>
   135c8:	mov	r0, #0
   135cc:	str	r0, [r4, #36]	; 0x24
   135d0:	mov	r0, r5
   135d4:	sub	sp, fp, #16
   135d8:	pop	{r4, r5, r6, sl, fp, pc}
   135dc:	b	134d0 <__mempcpy_chk@plt+0x247c>
   135e0:	push	{r4, r5, fp, lr}
   135e4:	add	fp, sp, #8
   135e8:	cmp	r0, #10
   135ec:	movls	r0, #10
   135f0:	orr	r5, r0, #1
   135f4:	mvn	r4, #0
   135f8:	cmn	r5, #1
   135fc:	bne	13614 <__mempcpy_chk@plt+0x25c0>
   13600:	mov	r0, r4
   13604:	pop	{r4, r5, fp, pc}
   13608:	add	r5, r5, #2
   1360c:	cmn	r5, #1
   13610:	beq	13600 <__mempcpy_chk@plt+0x25ac>
   13614:	mov	r0, r5
   13618:	bl	13630 <__mempcpy_chk@plt+0x25dc>
   1361c:	cmp	r0, #0
   13620:	beq	13608 <__mempcpy_chk@plt+0x25b4>
   13624:	mov	r4, r5
   13628:	mov	r0, r4
   1362c:	pop	{r4, r5, fp, pc}
   13630:	mov	ip, #3
   13634:	cmp	r0, #10
   13638:	bcc	1366c <__mempcpy_chk@plt+0x2618>
   1363c:	mov	ip, #3
   13640:	mov	r2, #9
   13644:	mov	r3, #16
   13648:	udiv	r1, r0, ip
   1364c:	mls	r1, r1, ip, r0
   13650:	cmp	r1, #0
   13654:	beq	1366c <__mempcpy_chk@plt+0x2618>
   13658:	add	r2, r3, r2
   1365c:	add	r3, r3, #8
   13660:	add	ip, ip, #2
   13664:	cmp	r2, r0
   13668:	bcc	13648 <__mempcpy_chk@plt+0x25f4>
   1366c:	udiv	r1, r0, ip
   13670:	mls	r0, r1, ip, r0
   13674:	cmp	r0, #0
   13678:	movwne	r0, #1
   1367c:	bx	lr
   13680:	mov	r2, #0
   13684:	str	r2, [r1]
   13688:	ldr	r2, [r0, #36]	; 0x24
   1368c:	str	r2, [r1, #4]
   13690:	str	r1, [r0, #36]	; 0x24
   13694:	bx	lr
   13698:	push	{r4, r5, fp, lr}
   1369c:	add	fp, sp, #8
   136a0:	mov	r4, r1
   136a4:	mov	r5, r0
   136a8:	ldr	r0, [r0]
   136ac:	bl	16564 <__mempcpy_chk@plt+0x5510>
   136b0:	ldrd	r2, [r5, #8]
   136b4:	eor	r0, r2, r0
   136b8:	mov	r1, r3
   136bc:	mov	r2, r4
   136c0:	mov	r3, #0
   136c4:	bl	167d0 <__mempcpy_chk@plt+0x577c>
   136c8:	mov	r0, r2
   136cc:	pop	{r4, r5, fp, pc}
   136d0:	push	{r4, r5, r6, r7, fp, lr}
   136d4:	add	fp, sp, #16
   136d8:	ldrd	r2, [r1, #8]
   136dc:	ldrd	r4, [r0, #8]
   136e0:	eor	r3, r5, r3
   136e4:	eor	r2, r4, r2
   136e8:	orrs	r2, r2, r3
   136ec:	mov	r2, #0
   136f0:	bne	13720 <__mempcpy_chk@plt+0x26cc>
   136f4:	ldrd	r4, [r1, #16]
   136f8:	ldrd	r6, [r0, #16]
   136fc:	eor	r3, r7, r5
   13700:	eor	r7, r6, r4
   13704:	orrs	r3, r7, r3
   13708:	bne	13720 <__mempcpy_chk@plt+0x26cc>
   1370c:	ldr	r1, [r1]
   13710:	ldr	r0, [r0]
   13714:	bl	10e14 <strcmp@plt>
   13718:	clz	r0, r0
   1371c:	lsr	r2, r0, #5
   13720:	mov	r0, r2
   13724:	pop	{r4, r5, r6, r7, fp, pc}
   13728:	push	{r4, sl, fp, lr}
   1372c:	add	fp, sp, #8
   13730:	mov	r4, r0
   13734:	ldr	r0, [r0]
   13738:	bl	12788 <__mempcpy_chk@plt+0x1734>
   1373c:	mov	r0, r4
   13740:	pop	{r4, sl, fp, lr}
   13744:	b	12788 <__mempcpy_chk@plt+0x1734>
   13748:	push	{r4, r5, fp, lr}
   1374c:	add	fp, sp, #8
   13750:	cmp	r0, #0
   13754:	beq	137e8 <__mempcpy_chk@plt+0x2794>
   13758:	mov	r4, r0
   1375c:	mov	r1, #47	; 0x2f
   13760:	bl	10ff4 <strrchr@plt>
   13764:	cmp	r0, #0
   13768:	mov	r5, r4
   1376c:	addne	r5, r0, #1
   13770:	sub	r0, r5, r4
   13774:	cmp	r0, #7
   13778:	blt	137cc <__mempcpy_chk@plt+0x2778>
   1377c:	sub	r0, r5, #7
   13780:	movw	r1, #29028	; 0x7164
   13784:	movt	r1, #1
   13788:	mov	r2, #7
   1378c:	bl	11024 <strncmp@plt>
   13790:	cmp	r0, #0
   13794:	bne	137cc <__mempcpy_chk@plt+0x2778>
   13798:	movw	r1, #29036	; 0x716c
   1379c:	movt	r1, #1
   137a0:	mov	r0, r5
   137a4:	mov	r2, #3
   137a8:	bl	11024 <strncmp@plt>
   137ac:	cmp	r0, #0
   137b0:	beq	137bc <__mempcpy_chk@plt+0x2768>
   137b4:	mov	r4, r5
   137b8:	b	137cc <__mempcpy_chk@plt+0x2778>
   137bc:	add	r4, r5, #3
   137c0:	movw	r0, #33072	; 0x8130
   137c4:	movt	r0, #2
   137c8:	str	r4, [r0]
   137cc:	movw	r0, #33076	; 0x8134
   137d0:	movt	r0, #2
   137d4:	str	r4, [r0]
   137d8:	movw	r0, #33124	; 0x8164
   137dc:	movt	r0, #2
   137e0:	str	r4, [r0]
   137e4:	pop	{r4, r5, fp, pc}
   137e8:	movw	r0, #33088	; 0x8140
   137ec:	movt	r0, #2
   137f0:	ldr	r3, [r0]
   137f4:	movw	r0, #28972	; 0x712c
   137f8:	movt	r0, #1
   137fc:	mov	r1, #55	; 0x37
   13800:	mov	r2, #1
   13804:	bl	10ec8 <fwrite@plt>
   13808:	bl	11030 <abort@plt>
   1380c:	push	{r4, r5, r6, sl, fp, lr}
   13810:	add	fp, sp, #16
   13814:	mov	r4, r0
   13818:	movw	r0, #33128	; 0x8168
   1381c:	movt	r0, #2
   13820:	cmp	r4, #0
   13824:	moveq	r4, r0
   13828:	bl	10f88 <__errno_location@plt>
   1382c:	mov	r5, r0
   13830:	ldr	r6, [r0]
   13834:	mov	r0, r4
   13838:	mov	r1, #48	; 0x30
   1383c:	bl	15ce0 <__mempcpy_chk@plt+0x4c8c>
   13840:	str	r6, [r5]
   13844:	pop	{r4, r5, r6, sl, fp, pc}
   13848:	movw	r1, #33128	; 0x8168
   1384c:	movt	r1, #2
   13850:	cmp	r0, #0
   13854:	movne	r1, r0
   13858:	ldr	r0, [r1]
   1385c:	bx	lr
   13860:	movw	r2, #33128	; 0x8168
   13864:	movt	r2, #2
   13868:	cmp	r0, #0
   1386c:	movne	r2, r0
   13870:	str	r1, [r2]
   13874:	bx	lr
   13878:	movw	r3, #33128	; 0x8168
   1387c:	movt	r3, #2
   13880:	cmp	r0, #0
   13884:	movne	r3, r0
   13888:	ubfx	r0, r1, #5, #3
   1388c:	add	r0, r3, r0, lsl #2
   13890:	ldr	r3, [r0, #8]
   13894:	and	r1, r1, #31
   13898:	eor	r2, r2, r3, lsr r1
   1389c:	and	r2, r2, #1
   138a0:	eor	r2, r3, r2, lsl r1
   138a4:	str	r2, [r0, #8]
   138a8:	mov	r0, #1
   138ac:	and	r0, r0, r3, lsr r1
   138b0:	bx	lr
   138b4:	movw	r2, #33128	; 0x8168
   138b8:	movt	r2, #2
   138bc:	cmp	r0, #0
   138c0:	movne	r2, r0
   138c4:	ldr	r0, [r2, #4]
   138c8:	str	r1, [r2, #4]
   138cc:	bx	lr
   138d0:	movw	r3, #33128	; 0x8168
   138d4:	movt	r3, #2
   138d8:	cmp	r0, #0
   138dc:	movne	r3, r0
   138e0:	mov	r0, #10
   138e4:	str	r0, [r3]
   138e8:	cmp	r1, #0
   138ec:	cmpne	r2, #0
   138f0:	bne	13900 <__mempcpy_chk@plt+0x28ac>
   138f4:	push	{fp, lr}
   138f8:	mov	fp, sp
   138fc:	bl	11030 <abort@plt>
   13900:	str	r1, [r3, #40]	; 0x28
   13904:	str	r2, [r3, #44]	; 0x2c
   13908:	bx	lr
   1390c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13910:	add	fp, sp, #28
   13914:	sub	sp, sp, #20
   13918:	mov	r8, r3
   1391c:	mov	r9, r2
   13920:	mov	sl, r1
   13924:	mov	r7, r0
   13928:	ldr	r0, [fp, #8]
   1392c:	movw	r5, #33128	; 0x8168
   13930:	movt	r5, #2
   13934:	cmp	r0, #0
   13938:	movne	r5, r0
   1393c:	bl	10f88 <__errno_location@plt>
   13940:	mov	r4, r0
   13944:	ldm	r5, {r0, r1}
   13948:	ldr	r2, [r5, #40]	; 0x28
   1394c:	ldr	r3, [r5, #44]	; 0x2c
   13950:	ldr	r6, [r4]
   13954:	add	r5, r5, #8
   13958:	stm	sp, {r0, r1, r5}
   1395c:	str	r2, [sp, #12]
   13960:	str	r3, [sp, #16]
   13964:	mov	r0, r7
   13968:	mov	r1, sl
   1396c:	mov	r2, r9
   13970:	mov	r3, r8
   13974:	bl	13984 <__mempcpy_chk@plt+0x2930>
   13978:	str	r6, [r4]
   1397c:	sub	sp, fp, #28
   13980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13984:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13988:	add	fp, sp, #28
   1398c:	sub	sp, sp, #156	; 0x9c
   13990:	mov	r9, r3
   13994:	str	r2, [fp, #-84]	; 0xffffffac
   13998:	mov	r6, r1
   1399c:	mov	r7, r0
   139a0:	ldr	r0, [fp, #12]
   139a4:	and	r1, r0, #4
   139a8:	str	r1, [sp, #32]
   139ac:	and	r1, r0, #1
   139b0:	str	r1, [sp, #36]	; 0x24
   139b4:	ubfx	sl, r0, #1, #1
   139b8:	bl	10ee0 <__ctype_get_mb_cur_max@plt>
   139bc:	str	r0, [sp, #40]	; 0x28
   139c0:	ldr	r0, [fp, #24]
   139c4:	str	r0, [sp, #76]	; 0x4c
   139c8:	ldr	r0, [fp, #20]
   139cc:	str	r0, [sp, #68]	; 0x44
   139d0:	ldr	r0, [fp, #8]
   139d4:	str	r0, [fp, #-60]	; 0xffffffc4
   139d8:	mov	r0, #0
   139dc:	str	r0, [sp, #72]	; 0x48
   139e0:	mov	r0, #0
   139e4:	str	r0, [sp, #92]	; 0x5c
   139e8:	mov	r0, #0
   139ec:	str	r0, [fp, #-72]	; 0xffffffb8
   139f0:	mov	r0, #0
   139f4:	mov	r1, #0
   139f8:	str	r1, [fp, #-56]	; 0xffffffc8
   139fc:	mov	r1, #0
   13a00:	str	r1, [sp, #56]	; 0x38
   13a04:	mov	r5, #1
   13a08:	str	r7, [sp, #80]	; 0x50
   13a0c:	mov	r4, r6
   13a10:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13a14:	cmp	r6, #10
   13a18:	bhi	14980 <__mempcpy_chk@plt+0x392c>
   13a1c:	add	r1, pc, #20
   13a20:	mov	r8, #0
   13a24:	mov	r2, #1
   13a28:	mov	r3, #0
   13a2c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a30:	mov	lr, r9
   13a34:	ldr	pc, [r1, r6, lsl #2]
   13a38:	andeq	r3, r1, r0, lsl fp
   13a3c:	andeq	r3, r1, r0, asr #22
   13a40:	andeq	r3, r1, r0, lsl #22
   13a44:	strdeq	r3, [r1], -r8
   13a48:	andeq	r3, r1, r4, lsr fp
   13a4c:	muleq	r1, r4, fp
   13a50:	andeq	r3, r1, r0, lsr #22
   13a54:	strdeq	r3, [r1], -r0
   13a58:	andeq	r3, r1, r4, ror #20
   13a5c:	andeq	r3, r1, r4, ror #20
   13a60:	andeq	r3, r1, ip, lsl #21
   13a64:	movw	r0, #29120	; 0x71c0
   13a68:	movt	r0, #1
   13a6c:	mov	r1, r6
   13a70:	bl	14f8c <__mempcpy_chk@plt+0x3f38>
   13a74:	str	r0, [sp, #68]	; 0x44
   13a78:	movw	r0, #29122	; 0x71c2
   13a7c:	movt	r0, #1
   13a80:	mov	r1, r6
   13a84:	bl	14f8c <__mempcpy_chk@plt+0x3f38>
   13a88:	str	r0, [sp, #76]	; 0x4c
   13a8c:	mov	r8, #0
   13a90:	tst	sl, #1
   13a94:	bne	13acc <__mempcpy_chk@plt+0x2a78>
   13a98:	ldr	r0, [sp, #68]	; 0x44
   13a9c:	ldrb	r0, [r0]
   13aa0:	cmp	r0, #0
   13aa4:	beq	13acc <__mempcpy_chk@plt+0x2a78>
   13aa8:	ldr	r1, [sp, #68]	; 0x44
   13aac:	add	r1, r1, #1
   13ab0:	mov	r8, #0
   13ab4:	cmp	r8, r4
   13ab8:	strbcc	r0, [r7, r8]
   13abc:	ldrb	r0, [r1, r8]
   13ac0:	add	r8, r8, #1
   13ac4:	cmp	r0, #0
   13ac8:	bne	13ab4 <__mempcpy_chk@plt+0x2a60>
   13acc:	ldr	r6, [sp, #76]	; 0x4c
   13ad0:	mov	r0, r6
   13ad4:	bl	10f7c <strlen@plt>
   13ad8:	str	r0, [fp, #-72]	; 0xffffffb8
   13adc:	str	r6, [sp, #92]	; 0x5c
   13ae0:	mov	r2, #1
   13ae4:	mov	r3, sl
   13ae8:	ldr	ip, [fp, #-84]	; 0xffffffac
   13aec:	mov	lr, r9
   13af0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   13af4:	b	13bf0 <__mempcpy_chk@plt+0x2b9c>
   13af8:	mov	r0, #1
   13afc:	b	13b40 <__mempcpy_chk@plt+0x2aec>
   13b00:	tst	sl, #1
   13b04:	bne	13b40 <__mempcpy_chk@plt+0x2aec>
   13b08:	mov	r2, r0
   13b0c:	b	13b68 <__mempcpy_chk@plt+0x2b14>
   13b10:	mov	r6, #0
   13b14:	mov	r8, #0
   13b18:	mov	r2, r0
   13b1c:	b	13bec <__mempcpy_chk@plt+0x2b98>
   13b20:	mov	r0, #1
   13b24:	str	r0, [fp, #-72]	; 0xffffffb8
   13b28:	mov	r8, #0
   13b2c:	mov	r6, #5
   13b30:	b	13bac <__mempcpy_chk@plt+0x2b58>
   13b34:	mov	r2, #1
   13b38:	tst	sl, #1
   13b3c:	beq	13b68 <__mempcpy_chk@plt+0x2b14>
   13b40:	mov	r1, #1
   13b44:	str	r1, [fp, #-72]	; 0xffffffb8
   13b48:	mov	r8, #0
   13b4c:	mov	r6, #2
   13b50:	movw	r1, #29122	; 0x71c2
   13b54:	movt	r1, #1
   13b58:	str	r1, [sp, #92]	; 0x5c
   13b5c:	mov	r2, r0
   13b60:	mov	r3, #1
   13b64:	b	13bf0 <__mempcpy_chk@plt+0x2b9c>
   13b68:	mov	r8, #1
   13b6c:	mov	r6, #2
   13b70:	cmp	r4, #0
   13b74:	movne	r0, #39	; 0x27
   13b78:	strbne	r0, [r7]
   13b7c:	movw	r0, #29122	; 0x71c2
   13b80:	movt	r0, #1
   13b84:	str	r0, [sp, #92]	; 0x5c
   13b88:	mov	r0, #1
   13b8c:	str	r0, [fp, #-72]	; 0xffffffb8
   13b90:	b	13bec <__mempcpy_chk@plt+0x2b98>
   13b94:	mov	r6, #5
   13b98:	tst	sl, #1
   13b9c:	beq	13bc4 <__mempcpy_chk@plt+0x2b70>
   13ba0:	mov	r0, #1
   13ba4:	str	r0, [fp, #-72]	; 0xffffffb8
   13ba8:	mov	r8, #0
   13bac:	movw	r0, #29118	; 0x71be
   13bb0:	movt	r0, #1
   13bb4:	str	r0, [sp, #92]	; 0x5c
   13bb8:	mov	r2, #1
   13bbc:	mov	r3, #1
   13bc0:	b	13bf0 <__mempcpy_chk@plt+0x2b9c>
   13bc4:	cmp	r4, #0
   13bc8:	movne	r0, #34	; 0x22
   13bcc:	strbne	r0, [r7]
   13bd0:	mov	r8, #1
   13bd4:	movw	r0, #29118	; 0x71be
   13bd8:	movt	r0, #1
   13bdc:	str	r0, [sp, #92]	; 0x5c
   13be0:	mov	r0, #1
   13be4:	str	r0, [fp, #-72]	; 0xffffffb8
   13be8:	mov	r2, #1
   13bec:	mov	r3, #0
   13bf0:	ldr	r0, [fp, #16]
   13bf4:	cmp	r0, #0
   13bf8:	movwne	r0, #1
   13bfc:	and	r0, r0, r3
   13c00:	str	r0, [fp, #-88]	; 0xffffffa8
   13c04:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13c08:	cmp	r0, #0
   13c0c:	movwne	r0, #1
   13c10:	and	r1, r0, r3
   13c14:	and	r1, r2, r1
   13c18:	str	r1, [sp, #48]	; 0x30
   13c1c:	str	r6, [fp, #-60]	; 0xffffffc4
   13c20:	subs	r6, r6, #2
   13c24:	clz	r1, r6
   13c28:	lsr	r1, r1, #5
   13c2c:	and	r1, r1, r3
   13c30:	str	r1, [sp, #60]	; 0x3c
   13c34:	str	r6, [fp, #-80]	; 0xffffffb0
   13c38:	mov	r1, r6
   13c3c:	movwne	r1, #1
   13c40:	str	r3, [fp, #-76]	; 0xffffffb4
   13c44:	eor	r3, r3, #1
   13c48:	str	r3, [sp, #88]	; 0x58
   13c4c:	orr	r3, r1, r3
   13c50:	str	r3, [sp, #64]	; 0x40
   13c54:	and	r1, r1, r2
   13c58:	str	r1, [fp, #-68]	; 0xffffffbc
   13c5c:	and	r0, r0, r1
   13c60:	str	r0, [fp, #-64]	; 0xffffffc0
   13c64:	str	r2, [sp, #84]	; 0x54
   13c68:	eor	r0, r2, #1
   13c6c:	str	r0, [sp, #52]	; 0x34
   13c70:	mov	r6, #0
   13c74:	cmn	lr, #1
   13c78:	beq	13c88 <__mempcpy_chk@plt+0x2c34>
   13c7c:	cmp	r6, lr
   13c80:	bne	13c94 <__mempcpy_chk@plt+0x2c40>
   13c84:	b	14800 <__mempcpy_chk@plt+0x37ac>
   13c88:	ldrb	r0, [ip, r6]
   13c8c:	cmp	r0, #0
   13c90:	beq	14800 <__mempcpy_chk@plt+0x37ac>
   13c94:	str	r5, [fp, #-48]	; 0xffffffd0
   13c98:	mov	sl, #0
   13c9c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13ca0:	cmp	r0, #0
   13ca4:	beq	13cd8 <__mempcpy_chk@plt+0x2c84>
   13ca8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13cac:	add	r5, r6, r0
   13cb0:	cmp	r0, #2
   13cb4:	bcc	13cd0 <__mempcpy_chk@plt+0x2c7c>
   13cb8:	cmn	lr, #1
   13cbc:	bne	13cd0 <__mempcpy_chk@plt+0x2c7c>
   13cc0:	mov	r0, ip
   13cc4:	bl	10f7c <strlen@plt>
   13cc8:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ccc:	mov	lr, r0
   13cd0:	cmp	r5, lr
   13cd4:	bls	13ce4 <__mempcpy_chk@plt+0x2c90>
   13cd8:	mov	r0, #0
   13cdc:	str	r0, [fp, #-52]	; 0xffffffcc
   13ce0:	b	13d30 <__mempcpy_chk@plt+0x2cdc>
   13ce4:	mov	r5, r4
   13ce8:	mov	r4, lr
   13cec:	add	r0, ip, r6
   13cf0:	ldr	r1, [sp, #92]	; 0x5c
   13cf4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13cf8:	bl	10e74 <memcmp@plt>
   13cfc:	cmp	r0, #0
   13d00:	mov	r1, r0
   13d04:	movwne	r1, #1
   13d08:	ldr	r2, [sp, #88]	; 0x58
   13d0c:	orr	r1, r1, r2
   13d10:	tst	r1, #1
   13d14:	beq	148c4 <__mempcpy_chk@plt+0x3870>
   13d18:	clz	r0, r0
   13d1c:	lsr	r0, r0, #5
   13d20:	str	r0, [fp, #-52]	; 0xffffffcc
   13d24:	ldr	ip, [fp, #-84]	; 0xffffffac
   13d28:	mov	lr, r4
   13d2c:	mov	r4, r5
   13d30:	ldrb	r5, [ip, r6]
   13d34:	cmp	r5, #126	; 0x7e
   13d38:	bhi	140f4 <__mempcpy_chk@plt+0x30a0>
   13d3c:	mov	r9, #1
   13d40:	mov	r2, #110	; 0x6e
   13d44:	mov	r0, #97	; 0x61
   13d48:	add	r3, pc, #4
   13d4c:	mov	r1, #0
   13d50:	ldr	pc, [r3, r5, lsl #2]
   13d54:	andeq	r3, r1, ip, ror #31
   13d58:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d5c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d60:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d64:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d68:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d6c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d70:			; <UNDEFINED> instruction: 0x000141b8
   13d74:	andeq	r3, r1, ip, asr #31
   13d78:	andeq	r3, r1, r4, asr #31
   13d7c:	ldrdeq	r3, [r1], -r8
   13d80:	andeq	r4, r1, ip, asr r0
   13d84:			; <UNDEFINED> instruction: 0x00013fbc
   13d88:	ldrdeq	r3, [r1], -r4
   13d8c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d90:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d94:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d98:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13d9c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13da0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13da4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13da8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13dac:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13db0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13db4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13db8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13dbc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13dc0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13dc4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13dc8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13dcc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13dd0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13dd4:	andeq	r4, r1, r8, ror #2
   13dd8:	andeq	r4, r1, ip, ror #2
   13ddc:	andeq	r4, r1, ip, ror #2
   13de0:	andeq	r3, r1, r4, ror #30
   13de4:	andeq	r4, r1, ip, ror #2
   13de8:	andeq	r3, r1, r0, asr pc
   13dec:	andeq	r4, r1, ip, ror #2
   13df0:	andeq	r4, r1, r4, rrx
   13df4:	andeq	r4, r1, ip, ror #2
   13df8:	andeq	r4, r1, ip, ror #2
   13dfc:	andeq	r4, r1, ip, ror #2
   13e00:	andeq	r3, r1, r0, asr pc
   13e04:	andeq	r3, r1, r0, asr pc
   13e08:	andeq	r3, r1, r0, asr pc
   13e0c:	andeq	r3, r1, r0, asr pc
   13e10:	andeq	r3, r1, r0, asr pc
   13e14:	andeq	r3, r1, r0, asr pc
   13e18:	andeq	r3, r1, r0, asr pc
   13e1c:	andeq	r3, r1, r0, asr pc
   13e20:	andeq	r3, r1, r0, asr pc
   13e24:	andeq	r3, r1, r0, asr pc
   13e28:	andeq	r3, r1, r0, asr pc
   13e2c:	andeq	r3, r1, r0, asr pc
   13e30:	andeq	r3, r1, r0, asr pc
   13e34:	andeq	r3, r1, r0, asr pc
   13e38:	andeq	r3, r1, r0, asr pc
   13e3c:	andeq	r3, r1, r0, asr pc
   13e40:	andeq	r4, r1, ip, ror #2
   13e44:	andeq	r4, r1, ip, ror #2
   13e48:	andeq	r4, r1, ip, ror #2
   13e4c:	andeq	r4, r1, ip, ror #2
   13e50:	andeq	r4, r1, ip, lsr #32
   13e54:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e58:	andeq	r3, r1, r0, asr pc
   13e5c:	andeq	r3, r1, r0, asr pc
   13e60:	andeq	r3, r1, r0, asr pc
   13e64:	andeq	r3, r1, r0, asr pc
   13e68:	andeq	r3, r1, r0, asr pc
   13e6c:	andeq	r3, r1, r0, asr pc
   13e70:	andeq	r3, r1, r0, asr pc
   13e74:	andeq	r3, r1, r0, asr pc
   13e78:	andeq	r3, r1, r0, asr pc
   13e7c:	andeq	r3, r1, r0, asr pc
   13e80:	andeq	r3, r1, r0, asr pc
   13e84:	andeq	r3, r1, r0, asr pc
   13e88:	andeq	r3, r1, r0, asr pc
   13e8c:	andeq	r3, r1, r0, asr pc
   13e90:	andeq	r3, r1, r0, asr pc
   13e94:	andeq	r3, r1, r0, asr pc
   13e98:	andeq	r3, r1, r0, asr pc
   13e9c:	andeq	r3, r1, r0, asr pc
   13ea0:	andeq	r3, r1, r0, asr pc
   13ea4:	andeq	r3, r1, r0, asr pc
   13ea8:	andeq	r3, r1, r0, asr pc
   13eac:	andeq	r3, r1, r0, asr pc
   13eb0:	andeq	r3, r1, r0, asr pc
   13eb4:	andeq	r3, r1, r0, asr pc
   13eb8:	andeq	r3, r1, r0, asr pc
   13ebc:	andeq	r3, r1, r0, asr pc
   13ec0:	andeq	r4, r1, ip, ror #2
   13ec4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13ec8:	andeq	r3, r1, r0, asr pc
   13ecc:	andeq	r4, r1, ip, ror #2
   13ed0:	andeq	r3, r1, r0, asr pc
   13ed4:	andeq	r4, r1, ip, ror #2
   13ed8:	andeq	r3, r1, r0, asr pc
   13edc:	andeq	r3, r1, r0, asr pc
   13ee0:	andeq	r3, r1, r0, asr pc
   13ee4:	andeq	r3, r1, r0, asr pc
   13ee8:	andeq	r3, r1, r0, asr pc
   13eec:	andeq	r3, r1, r0, asr pc
   13ef0:	andeq	r3, r1, r0, asr pc
   13ef4:	andeq	r3, r1, r0, asr pc
   13ef8:	andeq	r3, r1, r0, asr pc
   13efc:	andeq	r3, r1, r0, asr pc
   13f00:	andeq	r3, r1, r0, asr pc
   13f04:	andeq	r3, r1, r0, asr pc
   13f08:	andeq	r3, r1, r0, asr pc
   13f0c:	andeq	r3, r1, r0, asr pc
   13f10:	andeq	r3, r1, r0, asr pc
   13f14:	andeq	r3, r1, r0, asr pc
   13f18:	andeq	r3, r1, r0, asr pc
   13f1c:	andeq	r3, r1, r0, asr pc
   13f20:	andeq	r3, r1, r0, asr pc
   13f24:	andeq	r3, r1, r0, asr pc
   13f28:	andeq	r3, r1, r0, asr pc
   13f2c:	andeq	r3, r1, r0, asr pc
   13f30:	andeq	r3, r1, r0, asr pc
   13f34:	andeq	r3, r1, r0, asr pc
   13f38:	andeq	r3, r1, r0, asr pc
   13f3c:	andeq	r3, r1, r0, asr pc
   13f40:	andeq	r3, r1, r8, ror pc
   13f44:	andeq	r4, r1, ip, ror #2
   13f48:	andeq	r3, r1, r8, ror pc
   13f4c:	andeq	r3, r1, r4, ror #30
   13f50:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13f54:	cmp	r0, #0
   13f58:	beq	141cc <__mempcpy_chk@plt+0x3178>
   13f5c:	ldr	r0, [fp, #16]
   13f60:	b	141d0 <__mempcpy_chk@plt+0x317c>
   13f64:	mov	r9, #0
   13f68:	cmp	r6, #0
   13f6c:	beq	14168 <__mempcpy_chk@plt+0x3114>
   13f70:	mov	sl, #0
   13f74:	b	13f50 <__mempcpy_chk@plt+0x2efc>
   13f78:	mov	r9, #0
   13f7c:	cmn	lr, #1
   13f80:	beq	1414c <__mempcpy_chk@plt+0x30f8>
   13f84:	cmp	r6, #0
   13f88:	bne	13f70 <__mempcpy_chk@plt+0x2f1c>
   13f8c:	cmp	lr, #1
   13f90:	beq	14168 <__mempcpy_chk@plt+0x3114>
   13f94:	b	13f70 <__mempcpy_chk@plt+0x2f1c>
   13f98:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13f9c:	cmp	r0, #2
   13fa0:	bne	14194 <__mempcpy_chk@plt+0x3140>
   13fa4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13fa8:	tst	r0, #1
   13fac:	bne	148dc <__mempcpy_chk@plt+0x3888>
   13fb0:	mov	sl, #0
   13fb4:	mov	r0, #92	; 0x5c
   13fb8:	b	141a8 <__mempcpy_chk@plt+0x3154>
   13fbc:	mov	r0, #102	; 0x66
   13fc0:	b	141b8 <__mempcpy_chk@plt+0x3164>
   13fc4:	mov	r2, #116	; 0x74
   13fc8:	b	13fd8 <__mempcpy_chk@plt+0x2f84>
   13fcc:	mov	r0, #98	; 0x62
   13fd0:	b	141b8 <__mempcpy_chk@plt+0x3164>
   13fd4:	mov	r2, #114	; 0x72
   13fd8:	ldr	r0, [sp, #64]	; 0x40
   13fdc:	tst	r0, #1
   13fe0:	mov	r0, r2
   13fe4:	bne	141b8 <__mempcpy_chk@plt+0x3164>
   13fe8:	b	148dc <__mempcpy_chk@plt+0x3888>
   13fec:	ldr	r0, [sp, #84]	; 0x54
   13ff0:	tst	r0, #1
   13ff4:	beq	142a8 <__mempcpy_chk@plt+0x3254>
   13ff8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13ffc:	tst	r0, #1
   14000:	bne	148dc <__mempcpy_chk@plt+0x3888>
   14004:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14008:	cmp	r0, #2
   1400c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14010:	movwne	r0, #1
   14014:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14018:	orr	r0, r0, r2
   1401c:	tst	r0, #1
   14020:	beq	1469c <__mempcpy_chk@plt+0x3648>
   14024:	mov	r0, r8
   14028:	b	146d0 <__mempcpy_chk@plt+0x367c>
   1402c:	mov	sl, #0
   14030:	mov	r5, #63	; 0x3f
   14034:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14038:	cmp	r0, #5
   1403c:	beq	1445c <__mempcpy_chk@plt+0x3408>
   14040:	cmp	r0, #2
   14044:	bne	144fc <__mempcpy_chk@plt+0x34a8>
   14048:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1404c:	tst	r0, #1
   14050:	mov	r9, #0
   14054:	beq	13f50 <__mempcpy_chk@plt+0x2efc>
   14058:	b	148dc <__mempcpy_chk@plt+0x3888>
   1405c:	mov	r0, #118	; 0x76
   14060:	b	141b8 <__mempcpy_chk@plt+0x3164>
   14064:	mov	r5, #39	; 0x27
   14068:	mov	r0, #1
   1406c:	str	r0, [sp, #56]	; 0x38
   14070:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14074:	cmp	r0, #2
   14078:	bne	142c8 <__mempcpy_chk@plt+0x3274>
   1407c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14080:	tst	r0, #1
   14084:	bne	148dc <__mempcpy_chk@plt+0x3888>
   14088:	ldr	r2, [sp, #72]	; 0x48
   1408c:	cmp	r2, #0
   14090:	mov	r0, r2
   14094:	movwne	r0, #1
   14098:	clz	r1, r4
   1409c:	lsr	r1, r1, #5
   140a0:	orrs	r0, r0, r1
   140a4:	moveq	r2, r4
   140a8:	str	r2, [sp, #72]	; 0x48
   140ac:	moveq	r4, r0
   140b0:	cmp	r8, r4
   140b4:	movcc	r0, #39	; 0x27
   140b8:	strbcc	r0, [r7, r8]
   140bc:	add	r0, r8, #1
   140c0:	cmp	r0, r4
   140c4:	movcc	r1, #92	; 0x5c
   140c8:	strbcc	r1, [r7, r0]
   140cc:	add	r0, r8, #2
   140d0:	cmp	r0, r4
   140d4:	movcc	r1, #39	; 0x27
   140d8:	strbcc	r1, [r7, r0]
   140dc:	add	r8, r8, #3
   140e0:	mov	r0, #0
   140e4:	str	r0, [fp, #-56]	; 0xffffffc8
   140e8:	mov	sl, #0
   140ec:	mov	r9, #1
   140f0:	b	13f50 <__mempcpy_chk@plt+0x2efc>
   140f4:	str	r4, [sp, #24]
   140f8:	ldr	r0, [sp, #40]	; 0x28
   140fc:	cmp	r0, #1
   14100:	bne	142d0 <__mempcpy_chk@plt+0x327c>
   14104:	str	lr, [sp, #28]
   14108:	bl	10f58 <__ctype_b_loc@plt>
   1410c:	ldr	ip, [fp, #-84]	; 0xffffffac
   14110:	ldr	r0, [r0]
   14114:	add	r0, r0, r5, lsl #1
   14118:	ldrb	r0, [r0, #1]
   1411c:	ubfx	r9, r0, #6, #1
   14120:	mov	r1, #1
   14124:	ldr	r4, [sp, #24]
   14128:	ldr	r0, [sp, #52]	; 0x34
   1412c:	orr	r0, r9, r0
   14130:	mov	r2, r1
   14134:	cmp	r1, #1
   14138:	bhi	14504 <__mempcpy_chk@plt+0x34b0>
   1413c:	tst	r0, #1
   14140:	beq	14504 <__mempcpy_chk@plt+0x34b0>
   14144:	ldr	lr, [sp, #28]
   14148:	b	13f50 <__mempcpy_chk@plt+0x2efc>
   1414c:	cmp	r6, #0
   14150:	ldrbeq	r0, [ip, #1]
   14154:	cmpeq	r0, #0
   14158:	beq	14168 <__mempcpy_chk@plt+0x3114>
   1415c:	mvn	lr, #0
   14160:	mov	sl, #0
   14164:	b	13f50 <__mempcpy_chk@plt+0x2efc>
   14168:	mov	r1, #1
   1416c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14170:	cmp	r0, #2
   14174:	bne	1418c <__mempcpy_chk@plt+0x3138>
   14178:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1417c:	tst	r0, #1
   14180:	mov	r9, r1
   14184:	beq	13f50 <__mempcpy_chk@plt+0x2efc>
   14188:	b	148dc <__mempcpy_chk@plt+0x3888>
   1418c:	mov	r9, r1
   14190:	b	13f50 <__mempcpy_chk@plt+0x2efc>
   14194:	mov	sl, #0
   14198:	mov	r0, #92	; 0x5c
   1419c:	ldr	r1, [sp, #48]	; 0x30
   141a0:	cmp	r1, #0
   141a4:	beq	141b8 <__mempcpy_chk@plt+0x3164>
   141a8:	mov	r9, #0
   141ac:	cmp	sl, #0
   141b0:	beq	14768 <__mempcpy_chk@plt+0x3714>
   141b4:	b	147a4 <__mempcpy_chk@plt+0x3750>
   141b8:	mov	r9, #0
   141bc:	ldr	r1, [sp, #84]	; 0x54
   141c0:	tst	r1, #1
   141c4:	mov	sl, #0
   141c8:	bne	14208 <__mempcpy_chk@plt+0x31b4>
   141cc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   141d0:	cmp	r0, #0
   141d4:	mov	r0, r5
   141d8:	beq	141fc <__mempcpy_chk@plt+0x31a8>
   141dc:	ubfx	r0, r5, #5, #3
   141e0:	ldr	r1, [fp, #16]
   141e4:	ldr	r0, [r1, r0, lsl #2]
   141e8:	and	r1, r5, #31
   141ec:	mov	r2, #1
   141f0:	tst	r0, r2, lsl r1
   141f4:	mov	r0, r5
   141f8:	bne	14208 <__mempcpy_chk@plt+0x31b4>
   141fc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14200:	cmp	r1, #0
   14204:	beq	14760 <__mempcpy_chk@plt+0x370c>
   14208:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1420c:	tst	r1, #1
   14210:	bne	148dc <__mempcpy_chk@plt+0x3888>
   14214:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14218:	cmp	r1, #2
   1421c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14220:	movwne	r1, #1
   14224:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14228:	orr	r1, r1, r2
   1422c:	tst	r1, #1
   14230:	beq	1423c <__mempcpy_chk@plt+0x31e8>
   14234:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14238:	b	14278 <__mempcpy_chk@plt+0x3224>
   1423c:	cmp	r8, r4
   14240:	movcc	r1, #39	; 0x27
   14244:	strbcc	r1, [r7, r8]
   14248:	add	r1, r8, #1
   1424c:	cmp	r1, r4
   14250:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14254:	movcc	r2, #36	; 0x24
   14258:	strbcc	r2, [r7, r1]
   1425c:	add	r1, r8, #2
   14260:	cmp	r1, r4
   14264:	movcc	r2, #39	; 0x27
   14268:	strbcc	r2, [r7, r1]
   1426c:	add	r8, r8, #3
   14270:	mov	r1, #1
   14274:	str	r1, [fp, #-56]	; 0xffffffc8
   14278:	cmp	r8, r4
   1427c:	movcc	r1, #92	; 0x5c
   14280:	strbcc	r1, [r7, r8]
   14284:	add	r8, r8, #1
   14288:	cmp	r8, r4
   1428c:	strbcc	r0, [r7, r8]
   14290:	and	r5, r5, r9
   14294:	add	r8, r8, #1
   14298:	add	r6, r6, #1
   1429c:	cmn	lr, #1
   142a0:	bne	13c7c <__mempcpy_chk@plt+0x2c28>
   142a4:	b	13c88 <__mempcpy_chk@plt+0x2c34>
   142a8:	mov	r9, #0
   142ac:	ldr	r0, [sp, #36]	; 0x24
   142b0:	cmp	r0, #0
   142b4:	mov	sl, #0
   142b8:	mov	r5, #0
   142bc:	beq	141cc <__mempcpy_chk@plt+0x3178>
   142c0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   142c4:	b	14298 <__mempcpy_chk@plt+0x3244>
   142c8:	mov	r9, #1
   142cc:	b	13f50 <__mempcpy_chk@plt+0x2efc>
   142d0:	mov	r0, #0
   142d4:	str	r0, [fp, #-36]	; 0xffffffdc
   142d8:	str	r0, [fp, #-40]	; 0xffffffd8
   142dc:	cmn	lr, #1
   142e0:	bne	142f4 <__mempcpy_chk@plt+0x32a0>
   142e4:	mov	r0, ip
   142e8:	bl	10f7c <strlen@plt>
   142ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   142f0:	mov	lr, r0
   142f4:	add	r0, ip, r6
   142f8:	str	r0, [sp, #20]
   142fc:	mov	r9, #1
   14300:	mov	r7, #0
   14304:	sub	r4, fp, #40	; 0x28
   14308:	str	lr, [sp, #28]
   1430c:	str	r7, [sp, #44]	; 0x2c
   14310:	add	r7, r7, r6
   14314:	add	r1, ip, r7
   14318:	sub	r2, lr, r7
   1431c:	sub	r0, fp, #44	; 0x2c
   14320:	mov	r3, r4
   14324:	bl	16628 <__mempcpy_chk@plt+0x55d4>
   14328:	cmp	r0, #0
   1432c:	beq	147ec <__mempcpy_chk@plt+0x3798>
   14330:	cmn	r0, #1
   14334:	beq	147ac <__mempcpy_chk@plt+0x3758>
   14338:	cmn	r0, #2
   1433c:	ldr	lr, [sp, #28]
   14340:	beq	147b4 <__mempcpy_chk@plt+0x3760>
   14344:	cmp	r0, #2
   14348:	mov	r1, #0
   1434c:	movwcc	r1, #1
   14350:	ldr	r2, [sp, #60]	; 0x3c
   14354:	eor	r2, r2, #1
   14358:	orrs	r1, r2, r1
   1435c:	ldr	r4, [sp, #24]
   14360:	bne	14420 <__mempcpy_chk@plt+0x33cc>
   14364:	ldr	r1, [sp, #44]	; 0x2c
   14368:	ldr	r2, [sp, #20]
   1436c:	add	r1, r2, r1
   14370:	mov	r2, #1
   14374:	ldrb	r3, [r1, r2]
   14378:	sub	r3, r3, #91	; 0x5b
   1437c:	cmp	r3, #33	; 0x21
   14380:	bhi	14414 <__mempcpy_chk@plt+0x33c0>
   14384:	add	r7, pc, #0
   14388:	ldr	pc, [r7, r3, lsl #2]
   1438c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14390:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14394:	andeq	r4, r1, r4, lsl r4
   14398:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1439c:	andeq	r4, r1, r4, lsl r4
   143a0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   143a4:	andeq	r4, r1, r4, lsl r4
   143a8:	andeq	r4, r1, r4, lsl r4
   143ac:	andeq	r4, r1, r4, lsl r4
   143b0:	andeq	r4, r1, r4, lsl r4
   143b4:	andeq	r4, r1, r4, lsl r4
   143b8:	andeq	r4, r1, r4, lsl r4
   143bc:	andeq	r4, r1, r4, lsl r4
   143c0:	andeq	r4, r1, r4, lsl r4
   143c4:	andeq	r4, r1, r4, lsl r4
   143c8:	andeq	r4, r1, r4, lsl r4
   143cc:	andeq	r4, r1, r4, lsl r4
   143d0:	andeq	r4, r1, r4, lsl r4
   143d4:	andeq	r4, r1, r4, lsl r4
   143d8:	andeq	r4, r1, r4, lsl r4
   143dc:	andeq	r4, r1, r4, lsl r4
   143e0:	andeq	r4, r1, r4, lsl r4
   143e4:	andeq	r4, r1, r4, lsl r4
   143e8:	andeq	r4, r1, r4, lsl r4
   143ec:	andeq	r4, r1, r4, lsl r4
   143f0:	andeq	r4, r1, r4, lsl r4
   143f4:	andeq	r4, r1, r4, lsl r4
   143f8:	andeq	r4, r1, r4, lsl r4
   143fc:	andeq	r4, r1, r4, lsl r4
   14400:	andeq	r4, r1, r4, lsl r4
   14404:	andeq	r4, r1, r4, lsl r4
   14408:	andeq	r4, r1, r4, lsl r4
   1440c:	andeq	r4, r1, r4, lsl r4
   14410:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14414:	add	r2, r2, #1
   14418:	cmp	r2, r0
   1441c:	bcc	14374 <__mempcpy_chk@plt+0x3320>
   14420:	ldr	r7, [sp, #44]	; 0x2c
   14424:	add	r7, r0, r7
   14428:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1442c:	bl	10eb0 <iswprint@plt>
   14430:	cmp	r0, #0
   14434:	movwne	r0, #1
   14438:	and	r9, r9, r0
   1443c:	sub	r4, fp, #40	; 0x28
   14440:	mov	r0, r4
   14444:	bl	10e68 <mbsinit@plt>
   14448:	ldr	lr, [sp, #28]
   1444c:	cmp	r0, #0
   14450:	ldr	ip, [fp, #-84]	; 0xffffffac
   14454:	beq	1430c <__mempcpy_chk@plt+0x32b8>
   14458:	b	147f4 <__mempcpy_chk@plt+0x37a0>
   1445c:	ldr	r0, [sp, #32]
   14460:	cmp	r0, #0
   14464:	beq	144fc <__mempcpy_chk@plt+0x34a8>
   14468:	add	r0, r6, #2
   1446c:	cmp	r0, lr
   14470:	bcs	144fc <__mempcpy_chk@plt+0x34a8>
   14474:	add	r1, ip, r6
   14478:	ldrb	r1, [r1, #1]
   1447c:	cmp	r1, #63	; 0x3f
   14480:	bne	144fc <__mempcpy_chk@plt+0x34a8>
   14484:	ldrb	r9, [ip, r0]
   14488:	sub	r2, r9, #33	; 0x21
   1448c:	cmp	r2, #29
   14490:	bhi	144fc <__mempcpy_chk@plt+0x34a8>
   14494:	mov	r3, #1
   14498:	movw	r1, #20929	; 0x51c1
   1449c:	movt	r1, #14336	; 0x3800
   144a0:	tst	r1, r3, lsl r2
   144a4:	beq	144fc <__mempcpy_chk@plt+0x34a8>
   144a8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   144ac:	tst	r1, #1
   144b0:	bne	148dc <__mempcpy_chk@plt+0x3888>
   144b4:	cmp	r8, r4
   144b8:	movcc	r1, #63	; 0x3f
   144bc:	strbcc	r1, [r7, r8]
   144c0:	add	r2, r8, #1
   144c4:	cmp	r2, r4
   144c8:	movcc	r1, #34	; 0x22
   144cc:	strbcc	r1, [r7, r2]
   144d0:	add	r2, r8, #2
   144d4:	cmp	r2, r4
   144d8:	movcc	r1, #34	; 0x22
   144dc:	strbcc	r1, [r7, r2]
   144e0:	add	r2, r8, #3
   144e4:	cmp	r2, r4
   144e8:	movcc	r1, #63	; 0x3f
   144ec:	strbcc	r1, [r7, r2]
   144f0:	add	r8, r8, #4
   144f4:	mov	r6, r0
   144f8:	mov	r5, r9
   144fc:	mov	r9, #0
   14500:	b	13f50 <__mempcpy_chk@plt+0x2efc>
   14504:	add	r1, r2, r6
   14508:	str	r1, [sp, #44]	; 0x2c
   1450c:	add	r1, r6, #1
   14510:	mov	r3, #0
   14514:	ldr	lr, [sp, #28]
   14518:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1451c:	tst	r0, #1
   14520:	bne	14614 <__mempcpy_chk@plt+0x35c0>
   14524:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14528:	tst	r2, #1
   1452c:	bne	148dc <__mempcpy_chk@plt+0x3888>
   14530:	cmp	r6, #2
   14534:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14538:	movwne	r3, #1
   1453c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14540:	orr	r3, r3, r2
   14544:	tst	r3, #1
   14548:	bne	14584 <__mempcpy_chk@plt+0x3530>
   1454c:	cmp	r8, r4
   14550:	movcc	r2, #39	; 0x27
   14554:	strbcc	r2, [r7, r8]
   14558:	add	r3, r8, #1
   1455c:	cmp	r3, r4
   14560:	movcc	r2, #36	; 0x24
   14564:	strbcc	r2, [r7, r3]
   14568:	add	r3, r8, #2
   1456c:	cmp	r3, r4
   14570:	movcc	r2, #39	; 0x27
   14574:	strbcc	r2, [r7, r3]
   14578:	add	r8, r8, #3
   1457c:	mov	r2, #1
   14580:	str	r2, [fp, #-56]	; 0xffffffc8
   14584:	cmp	r8, r4
   14588:	movcc	r2, #92	; 0x5c
   1458c:	strbcc	r2, [r7, r8]
   14590:	add	r3, r8, #1
   14594:	cmp	r3, r4
   14598:	bcs	145b8 <__mempcpy_chk@plt+0x3564>
   1459c:	and	r7, r5, #192	; 0xc0
   145a0:	mov	r2, #48	; 0x30
   145a4:	orr	r7, r2, r7, lsr #6
   145a8:	ldr	r6, [sp, #80]	; 0x50
   145ac:	strb	r7, [r6, r3]
   145b0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   145b4:	ldr	r7, [sp, #80]	; 0x50
   145b8:	add	r3, r8, #2
   145bc:	cmp	r3, r4
   145c0:	bcs	145e0 <__mempcpy_chk@plt+0x358c>
   145c4:	lsr	r7, r5, #3
   145c8:	mov	r2, #6
   145cc:	bfi	r7, r2, #3, #29
   145d0:	ldr	r6, [sp, #80]	; 0x50
   145d4:	strb	r7, [r6, r3]
   145d8:	ldr	r6, [fp, #-60]	; 0xffffffc4
   145dc:	ldr	r7, [sp, #80]	; 0x50
   145e0:	mov	r2, #6
   145e4:	bfi	r5, r2, #3, #29
   145e8:	add	r8, r8, #3
   145ec:	mov	r3, #1
   145f0:	b	14638 <__mempcpy_chk@plt+0x35e4>
   145f4:	ldr	r7, [sp, #80]	; 0x50
   145f8:	cmp	r8, r4
   145fc:	strbcc	r5, [r7, r8]
   14600:	ldrb	r5, [ip, r1]
   14604:	add	r1, r1, #1
   14608:	add	r8, r8, #1
   1460c:	tst	r0, #1
   14610:	beq	14524 <__mempcpy_chk@plt+0x34d0>
   14614:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14618:	tst	r2, #1
   1461c:	beq	14630 <__mempcpy_chk@plt+0x35dc>
   14620:	cmp	r8, r4
   14624:	movcc	r2, #92	; 0x5c
   14628:	strbcc	r2, [r7, r8]
   1462c:	add	r8, r8, #1
   14630:	mov	r2, #0
   14634:	str	r2, [fp, #-52]	; 0xffffffcc
   14638:	and	sl, r3, #1
   1463c:	ldr	r2, [sp, #44]	; 0x2c
   14640:	cmp	r2, r1
   14644:	bls	14750 <__mempcpy_chk@plt+0x36fc>
   14648:	cmp	sl, #0
   1464c:	movwne	sl, #1
   14650:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14654:	mvn	r7, r2
   14658:	orr	r7, r7, sl
   1465c:	tst	r7, #1
   14660:	bne	145f4 <__mempcpy_chk@plt+0x35a0>
   14664:	cmp	r8, r4
   14668:	ldrcc	r7, [sp, #80]	; 0x50
   1466c:	movcc	r2, #39	; 0x27
   14670:	strbcc	r2, [r7, r8]
   14674:	add	r7, r8, #1
   14678:	cmp	r7, r4
   1467c:	ldrcc	r6, [sp, #80]	; 0x50
   14680:	movcc	r2, #39	; 0x27
   14684:	strbcc	r2, [r6, r7]
   14688:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   1468c:	add	r8, r8, #2
   14690:	mov	r2, #0
   14694:	str	r2, [fp, #-56]	; 0xffffffc8
   14698:	b	145f4 <__mempcpy_chk@plt+0x35a0>
   1469c:	cmp	r8, r4
   146a0:	movcc	r0, #39	; 0x27
   146a4:	strbcc	r0, [r7, r8]
   146a8:	add	r0, r8, #1
   146ac:	cmp	r0, r4
   146b0:	movcc	r1, #36	; 0x24
   146b4:	strbcc	r1, [r7, r0]
   146b8:	add	r0, r8, #2
   146bc:	cmp	r0, r4
   146c0:	movcc	r1, #39	; 0x27
   146c4:	strbcc	r1, [r7, r0]
   146c8:	add	r0, r8, #3
   146cc:	mov	r2, #1
   146d0:	cmp	r0, r4
   146d4:	movcc	r1, #92	; 0x5c
   146d8:	strbcc	r1, [r7, r0]
   146dc:	str	r2, [fp, #-56]	; 0xffffffc8
   146e0:	add	r8, r0, #1
   146e4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   146e8:	cmp	r1, #2
   146ec:	beq	14740 <__mempcpy_chk@plt+0x36ec>
   146f0:	add	r1, r6, #1
   146f4:	mov	r9, #0
   146f8:	mov	sl, #1
   146fc:	mov	r5, #48	; 0x30
   14700:	cmp	r1, lr
   14704:	bcs	13f50 <__mempcpy_chk@plt+0x2efc>
   14708:	ldrb	r1, [ip, r1]
   1470c:	sub	r1, r1, #48	; 0x30
   14710:	uxtb	r1, r1
   14714:	cmp	r1, #9
   14718:	bhi	13f50 <__mempcpy_chk@plt+0x2efc>
   1471c:	cmp	r8, r4
   14720:	movcc	r1, #48	; 0x30
   14724:	strbcc	r1, [r7, r8]
   14728:	add	r1, r0, #2
   1472c:	cmp	r1, r4
   14730:	movcc	r2, #48	; 0x30
   14734:	strbcc	r2, [r7, r1]
   14738:	add	r8, r0, #3
   1473c:	b	13f50 <__mempcpy_chk@plt+0x2efc>
   14740:	mov	r0, #48	; 0x30
   14744:	mov	sl, #1
   14748:	mov	r9, #0
   1474c:	b	141fc <__mempcpy_chk@plt+0x31a8>
   14750:	sub	r6, r1, #1
   14754:	cmp	sl, #0
   14758:	movwne	sl, #1
   1475c:	mov	r0, r5
   14760:	cmp	sl, #0
   14764:	bne	147a4 <__mempcpy_chk@plt+0x3750>
   14768:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1476c:	tst	r1, #1
   14770:	beq	147a4 <__mempcpy_chk@plt+0x3750>
   14774:	cmp	r8, r4
   14778:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1477c:	movcc	r1, #39	; 0x27
   14780:	strbcc	r1, [r7, r8]
   14784:	add	r1, r8, #1
   14788:	cmp	r1, r4
   1478c:	movcc	r2, #39	; 0x27
   14790:	strbcc	r2, [r7, r1]
   14794:	add	r8, r8, #2
   14798:	mov	r1, #0
   1479c:	str	r1, [fp, #-56]	; 0xffffffc8
   147a0:	b	14288 <__mempcpy_chk@plt+0x3234>
   147a4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   147a8:	b	14288 <__mempcpy_chk@plt+0x3234>
   147ac:	mov	r9, #0
   147b0:	b	147ec <__mempcpy_chk@plt+0x3798>
   147b4:	mov	r9, #0
   147b8:	cmp	r7, lr
   147bc:	bcs	147ec <__mempcpy_chk@plt+0x3798>
   147c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   147c4:	ldr	r7, [sp, #44]	; 0x2c
   147c8:	ldr	r0, [sp, #20]
   147cc:	ldrb	r0, [r0, r7]
   147d0:	cmp	r0, #0
   147d4:	beq	147f4 <__mempcpy_chk@plt+0x37a0>
   147d8:	add	r7, r7, #1
   147dc:	add	r0, r6, r7
   147e0:	cmp	r0, lr
   147e4:	bcc	147c8 <__mempcpy_chk@plt+0x3774>
   147e8:	b	147f4 <__mempcpy_chk@plt+0x37a0>
   147ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   147f0:	ldr	r7, [sp, #44]	; 0x2c
   147f4:	mov	r1, r7
   147f8:	ldr	r7, [sp, #80]	; 0x50
   147fc:	b	14124 <__mempcpy_chk@plt+0x30d0>
   14800:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14804:	eor	r0, r1, #2
   14808:	orr	r0, r0, r8
   1480c:	clz	r0, r0
   14810:	lsr	r0, r0, #5
   14814:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14818:	tst	r2, r0
   1481c:	bne	148dc <__mempcpy_chk@plt+0x3888>
   14820:	cmp	r1, #2
   14824:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14828:	movwne	r0, #1
   1482c:	orr	r0, r2, r0
   14830:	tst	r0, #1
   14834:	ldreq	r0, [sp, #56]	; 0x38
   14838:	eoreq	r0, r0, #1
   1483c:	tsteq	r0, #1
   14840:	bne	14874 <__mempcpy_chk@plt+0x3820>
   14844:	mov	r9, lr
   14848:	tst	r5, #1
   1484c:	bne	14944 <__mempcpy_chk@plt+0x38f0>
   14850:	ldr	r0, [sp, #72]	; 0x48
   14854:	cmp	r0, #0
   14858:	beq	14874 <__mempcpy_chk@plt+0x3820>
   1485c:	mov	r5, #0
   14860:	cmp	r4, #0
   14864:	ldr	r0, [sp, #84]	; 0x54
   14868:	mov	sl, r2
   1486c:	ldr	r6, [sp, #72]	; 0x48
   14870:	beq	13a0c <__mempcpy_chk@plt+0x29b8>
   14874:	ldr	r1, [sp, #92]	; 0x5c
   14878:	clz	r0, r1
   1487c:	lsr	r0, r0, #5
   14880:	orr	r0, r0, r2
   14884:	tst	r0, #1
   14888:	bne	148b4 <__mempcpy_chk@plt+0x3860>
   1488c:	ldrb	r0, [r1]
   14890:	cmp	r0, #0
   14894:	beq	148b4 <__mempcpy_chk@plt+0x3860>
   14898:	add	r1, r1, #1
   1489c:	cmp	r8, r4
   148a0:	strbcc	r0, [r7, r8]
   148a4:	add	r8, r8, #1
   148a8:	ldrb	r0, [r1], #1
   148ac:	cmp	r0, #0
   148b0:	bne	1489c <__mempcpy_chk@plt+0x3848>
   148b4:	cmp	r8, r4
   148b8:	movcc	r0, #0
   148bc:	strbcc	r0, [r7, r8]
   148c0:	b	14938 <__mempcpy_chk@plt+0x38e4>
   148c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   148c8:	mov	lr, r4
   148cc:	mov	r4, r5
   148d0:	b	148dc <__mempcpy_chk@plt+0x3888>
   148d4:	ldr	r7, [sp, #80]	; 0x50
   148d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   148dc:	mov	r0, #0
   148e0:	ldr	r1, [fp, #12]
   148e4:	bic	r1, r1, #2
   148e8:	ldr	r2, [sp, #84]	; 0x54
   148ec:	tst	r2, #1
   148f0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   148f4:	mov	r2, r3
   148f8:	movwne	r2, #4
   148fc:	cmp	r3, #2
   14900:	movne	r2, r3
   14904:	str	r2, [sp]
   14908:	str	r1, [sp, #4]
   1490c:	str	r0, [sp, #8]
   14910:	ldr	r0, [sp, #68]	; 0x44
   14914:	str	r0, [sp, #12]
   14918:	ldr	r0, [sp, #76]	; 0x4c
   1491c:	str	r0, [sp, #16]
   14920:	mov	r0, r7
   14924:	mov	r1, r4
   14928:	mov	r2, ip
   1492c:	mov	r3, lr
   14930:	bl	13984 <__mempcpy_chk@plt+0x2930>
   14934:	mov	r8, r0
   14938:	mov	r0, r8
   1493c:	sub	sp, fp, #28
   14940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14944:	mov	r0, #5
   14948:	str	r0, [sp]
   1494c:	ldr	r0, [fp, #12]
   14950:	str	r0, [sp, #4]
   14954:	ldr	r0, [fp, #16]
   14958:	str	r0, [sp, #8]
   1495c:	ldr	r0, [sp, #68]	; 0x44
   14960:	str	r0, [sp, #12]
   14964:	ldr	r0, [sp, #76]	; 0x4c
   14968:	str	r0, [sp, #16]
   1496c:	mov	r0, r7
   14970:	ldr	r1, [sp, #72]	; 0x48
   14974:	ldr	r2, [fp, #-84]	; 0xffffffac
   14978:	mov	r3, r9
   1497c:	b	14930 <__mempcpy_chk@plt+0x38dc>
   14980:	bl	11030 <abort@plt>
   14984:	mov	r3, r2
   14988:	mov	r2, #0
   1498c:	b	14990 <__mempcpy_chk@plt+0x393c>
   14990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14994:	add	fp, sp, #28
   14998:	sub	sp, sp, #36	; 0x24
   1499c:	mov	r4, r2
   149a0:	str	r2, [sp, #24]
   149a4:	mov	r5, r1
   149a8:	mov	r6, r0
   149ac:	str	r0, [sp, #20]
   149b0:	movw	r8, #33128	; 0x8168
   149b4:	movt	r8, #2
   149b8:	cmp	r3, #0
   149bc:	movne	r8, r3
   149c0:	bl	10f88 <__errno_location@plt>
   149c4:	str	r0, [sp, #28]
   149c8:	ldm	r8, {r3, r9}
   149cc:	ldr	r1, [r8, #40]	; 0x28
   149d0:	ldr	r2, [r8, #44]	; 0x2c
   149d4:	ldr	r7, [r0]
   149d8:	str	r7, [sp, #32]
   149dc:	add	sl, r8, #8
   149e0:	cmp	r4, #0
   149e4:	orreq	r9, r9, #1
   149e8:	stm	sp, {r3, r9, sl}
   149ec:	str	r1, [sp, #12]
   149f0:	str	r2, [sp, #16]
   149f4:	mov	r0, #0
   149f8:	mov	r1, #0
   149fc:	mov	r2, r6
   14a00:	mov	r3, r5
   14a04:	mov	r7, r5
   14a08:	bl	13984 <__mempcpy_chk@plt+0x2930>
   14a0c:	mov	r5, r0
   14a10:	add	r4, r0, #1
   14a14:	mov	r0, r4
   14a18:	bl	15a28 <__mempcpy_chk@plt+0x49d4>
   14a1c:	mov	r6, r0
   14a20:	ldr	r0, [r8]
   14a24:	ldr	r1, [r8, #40]	; 0x28
   14a28:	ldr	r2, [r8, #44]	; 0x2c
   14a2c:	stm	sp, {r0, r9, sl}
   14a30:	str	r1, [sp, #12]
   14a34:	str	r2, [sp, #16]
   14a38:	mov	r0, r6
   14a3c:	mov	r1, r4
   14a40:	ldr	r2, [sp, #20]
   14a44:	mov	r3, r7
   14a48:	bl	13984 <__mempcpy_chk@plt+0x2930>
   14a4c:	ldr	r0, [sp, #24]
   14a50:	ldr	r1, [sp, #32]
   14a54:	ldr	r2, [sp, #28]
   14a58:	str	r1, [r2]
   14a5c:	cmp	r0, #0
   14a60:	strne	r5, [r0]
   14a64:	mov	r0, r6
   14a68:	sub	sp, fp, #28
   14a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a74:	add	fp, sp, #24
   14a78:	movw	r8, #33008	; 0x80f0
   14a7c:	movt	r8, #2
   14a80:	ldr	r4, [r8]
   14a84:	movw	r5, #33012	; 0x80f4
   14a88:	movt	r5, #2
   14a8c:	ldr	r0, [r5]
   14a90:	cmp	r0, #2
   14a94:	blt	14ac0 <__mempcpy_chk@plt+0x3a6c>
   14a98:	add	r7, r4, #12
   14a9c:	mov	r6, #0
   14aa0:	ldr	r0, [r7, r6, lsl #3]
   14aa4:	bl	12788 <__mempcpy_chk@plt+0x1734>
   14aa8:	add	r0, r6, #1
   14aac:	ldr	r1, [r5]
   14ab0:	add	r2, r6, #2
   14ab4:	cmp	r2, r1
   14ab8:	mov	r6, r0
   14abc:	blt	14aa0 <__mempcpy_chk@plt+0x3a4c>
   14ac0:	ldr	r0, [r4, #4]
   14ac4:	movw	r7, #33176	; 0x8198
   14ac8:	movt	r7, #2
   14acc:	cmp	r0, r7
   14ad0:	beq	14ae8 <__mempcpy_chk@plt+0x3a94>
   14ad4:	bl	12788 <__mempcpy_chk@plt+0x1734>
   14ad8:	movw	r0, #33016	; 0x80f8
   14adc:	movt	r0, #2
   14ae0:	mov	r6, #256	; 0x100
   14ae4:	strd	r6, [r0]
   14ae8:	movw	r6, #33016	; 0x80f8
   14aec:	movt	r6, #2
   14af0:	cmp	r4, r6
   14af4:	beq	14b04 <__mempcpy_chk@plt+0x3ab0>
   14af8:	mov	r0, r4
   14afc:	bl	12788 <__mempcpy_chk@plt+0x1734>
   14b00:	str	r6, [r8]
   14b04:	mov	r0, #1
   14b08:	str	r0, [r5]
   14b0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b10:	movw	r3, #33128	; 0x8168
   14b14:	movt	r3, #2
   14b18:	mvn	r2, #0
   14b1c:	b	14b20 <__mempcpy_chk@plt+0x3acc>
   14b20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b24:	add	fp, sp, #28
   14b28:	sub	sp, sp, #44	; 0x2c
   14b2c:	mov	r7, r3
   14b30:	str	r2, [sp, #36]	; 0x24
   14b34:	str	r1, [sp, #32]
   14b38:	mov	r5, r0
   14b3c:	bl	10f88 <__errno_location@plt>
   14b40:	cmp	r5, #0
   14b44:	blt	14cb0 <__mempcpy_chk@plt+0x3c5c>
   14b48:	cmn	r5, #-2147483647	; 0x80000001
   14b4c:	beq	14cb0 <__mempcpy_chk@plt+0x3c5c>
   14b50:	movw	r4, #33008	; 0x80f0
   14b54:	movt	r4, #2
   14b58:	ldr	r6, [r4]
   14b5c:	str	r0, [sp, #28]
   14b60:	ldr	r0, [r0]
   14b64:	str	r0, [sp, #24]
   14b68:	movw	r8, #33012	; 0x80f4
   14b6c:	movt	r8, #2
   14b70:	ldr	r1, [r8]
   14b74:	cmp	r1, r5
   14b78:	ble	14b84 <__mempcpy_chk@plt+0x3b30>
   14b7c:	mov	sl, r6
   14b80:	b	14bec <__mempcpy_chk@plt+0x3b98>
   14b84:	str	r1, [fp, #-32]	; 0xffffffe0
   14b88:	mov	r0, #8
   14b8c:	str	r0, [sp]
   14b90:	movw	r9, #33016	; 0x80f8
   14b94:	movt	r9, #2
   14b98:	subs	r0, r6, r9
   14b9c:	movne	r0, r6
   14ba0:	add	r2, r5, #1
   14ba4:	sub	r2, r2, r1
   14ba8:	sub	r1, fp, #32
   14bac:	mvn	r3, #-2147483648	; 0x80000000
   14bb0:	bl	15b10 <__mempcpy_chk@plt+0x4abc>
   14bb4:	mov	sl, r0
   14bb8:	str	r0, [r4]
   14bbc:	cmp	r6, r9
   14bc0:	ldrdeq	r0, [r9]
   14bc4:	stmeq	sl, {r0, r1}
   14bc8:	ldr	r1, [r8]
   14bcc:	add	r0, sl, r1, lsl #3
   14bd0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14bd4:	sub	r1, r2, r1
   14bd8:	lsl	r2, r1, #3
   14bdc:	mov	r1, #0
   14be0:	bl	10fa0 <memset@plt>
   14be4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14be8:	str	r0, [r8]
   14bec:	mov	r9, sl
   14bf0:	ldr	r6, [r9, r5, lsl #3]!
   14bf4:	ldr	r4, [r9, #4]!
   14bf8:	ldm	r7, {r0, r1}
   14bfc:	ldr	r2, [r7, #40]	; 0x28
   14c00:	ldr	r3, [r7, #44]	; 0x2c
   14c04:	orr	r8, r1, #1
   14c08:	add	r1, r7, #8
   14c0c:	stm	sp, {r0, r8}
   14c10:	str	r1, [sp, #20]
   14c14:	add	r0, sp, #8
   14c18:	stm	r0, {r1, r2, r3}
   14c1c:	mov	r0, r4
   14c20:	mov	r1, r6
   14c24:	ldr	r2, [sp, #32]
   14c28:	ldr	r3, [sp, #36]	; 0x24
   14c2c:	bl	13984 <__mempcpy_chk@plt+0x2930>
   14c30:	cmp	r6, r0
   14c34:	bhi	14c98 <__mempcpy_chk@plt+0x3c44>
   14c38:	add	r6, r0, #1
   14c3c:	str	r6, [sl, r5, lsl #3]
   14c40:	movw	r0, #33176	; 0x8198
   14c44:	movt	r0, #2
   14c48:	cmp	r4, r0
   14c4c:	beq	14c58 <__mempcpy_chk@plt+0x3c04>
   14c50:	mov	r0, r4
   14c54:	bl	12788 <__mempcpy_chk@plt+0x1734>
   14c58:	mov	r0, r6
   14c5c:	bl	15a28 <__mempcpy_chk@plt+0x49d4>
   14c60:	mov	r4, r0
   14c64:	str	r0, [r9]
   14c68:	ldr	r0, [r7]
   14c6c:	ldr	r1, [r7, #40]	; 0x28
   14c70:	ldr	r2, [r7, #44]	; 0x2c
   14c74:	stm	sp, {r0, r8}
   14c78:	ldr	r0, [sp, #20]
   14c7c:	add	r3, sp, #8
   14c80:	stm	r3, {r0, r1, r2}
   14c84:	mov	r0, r4
   14c88:	mov	r1, r6
   14c8c:	ldr	r2, [sp, #32]
   14c90:	ldr	r3, [sp, #36]	; 0x24
   14c94:	bl	13984 <__mempcpy_chk@plt+0x2930>
   14c98:	ldr	r0, [sp, #28]
   14c9c:	ldr	r1, [sp, #24]
   14ca0:	str	r1, [r0]
   14ca4:	mov	r0, r4
   14ca8:	sub	sp, fp, #28
   14cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cb0:	bl	11030 <abort@plt>
   14cb4:	movw	r3, #33128	; 0x8168
   14cb8:	movt	r3, #2
   14cbc:	b	14b20 <__mempcpy_chk@plt+0x3acc>
   14cc0:	mov	r1, r0
   14cc4:	mov	r0, #0
   14cc8:	b	14b10 <__mempcpy_chk@plt+0x3abc>
   14ccc:	mov	r2, r1
   14cd0:	mov	r1, r0
   14cd4:	mov	r0, #0
   14cd8:	b	14cb4 <__mempcpy_chk@plt+0x3c60>
   14cdc:	push	{r4, r5, r6, sl, fp, lr}
   14ce0:	add	fp, sp, #16
   14ce4:	sub	sp, sp, #48	; 0x30
   14ce8:	mov	r4, r2
   14cec:	mov	r5, r0
   14cf0:	mov	r6, sp
   14cf4:	mov	r0, r6
   14cf8:	bl	14d18 <__mempcpy_chk@plt+0x3cc4>
   14cfc:	mov	r0, r5
   14d00:	mov	r1, r4
   14d04:	mvn	r2, #0
   14d08:	mov	r3, r6
   14d0c:	bl	14b20 <__mempcpy_chk@plt+0x3acc>
   14d10:	sub	sp, fp, #16
   14d14:	pop	{r4, r5, r6, sl, fp, pc}
   14d18:	vmov.i32	q8, #0	; 0x00000000
   14d1c:	mov	r2, #32
   14d20:	mov	r3, r0
   14d24:	vst1.32	{d16-d17}, [r3], r2
   14d28:	vst1.32	{d16-d17}, [r3]
   14d2c:	add	r2, r0, #16
   14d30:	vst1.32	{d16-d17}, [r2]
   14d34:	cmp	r1, #10
   14d38:	strne	r1, [r0]
   14d3c:	bxne	lr
   14d40:	push	{fp, lr}
   14d44:	mov	fp, sp
   14d48:	bl	11030 <abort@plt>
   14d4c:	push	{r4, r5, r6, r7, fp, lr}
   14d50:	add	fp, sp, #16
   14d54:	sub	sp, sp, #48	; 0x30
   14d58:	mov	r4, r3
   14d5c:	mov	r5, r2
   14d60:	mov	r6, r0
   14d64:	mov	r7, sp
   14d68:	mov	r0, r7
   14d6c:	bl	14d18 <__mempcpy_chk@plt+0x3cc4>
   14d70:	mov	r0, r6
   14d74:	mov	r1, r5
   14d78:	mov	r2, r4
   14d7c:	mov	r3, r7
   14d80:	bl	14b20 <__mempcpy_chk@plt+0x3acc>
   14d84:	sub	sp, fp, #16
   14d88:	pop	{r4, r5, r6, r7, fp, pc}
   14d8c:	mov	r2, r1
   14d90:	mov	r1, r0
   14d94:	mov	r0, #0
   14d98:	b	14cdc <__mempcpy_chk@plt+0x3c88>
   14d9c:	mov	r3, r2
   14da0:	mov	r2, r1
   14da4:	mov	r1, r0
   14da8:	mov	r0, #0
   14dac:	b	14d4c <__mempcpy_chk@plt+0x3cf8>
   14db0:	push	{r4, r5, r6, sl, fp, lr}
   14db4:	add	fp, sp, #16
   14db8:	sub	sp, sp, #48	; 0x30
   14dbc:	mov	r4, r1
   14dc0:	mov	r5, r0
   14dc4:	mov	r0, #32
   14dc8:	movw	r1, #33128	; 0x8168
   14dcc:	movt	r1, #2
   14dd0:	add	r3, r1, #16
   14dd4:	vld1.64	{d16-d17}, [r1], r0
   14dd8:	mov	r6, sp
   14ddc:	vld1.64	{d18-d19}, [r3]
   14de0:	add	r3, r6, #16
   14de4:	vld1.64	{d20-d21}, [r1]
   14de8:	vst1.64	{d18-d19}, [r3]
   14dec:	mov	r1, r6
   14df0:	vst1.64	{d16-d17}, [r1], r0
   14df4:	vst1.64	{d20-d21}, [r1]
   14df8:	mov	r0, r6
   14dfc:	mov	r1, r2
   14e00:	mov	r2, #1
   14e04:	bl	13878 <__mempcpy_chk@plt+0x2824>
   14e08:	mov	r0, #0
   14e0c:	mov	r1, r5
   14e10:	mov	r2, r4
   14e14:	mov	r3, r6
   14e18:	bl	14b20 <__mempcpy_chk@plt+0x3acc>
   14e1c:	sub	sp, fp, #16
   14e20:	pop	{r4, r5, r6, sl, fp, pc}
   14e24:	mov	r2, r1
   14e28:	mvn	r1, #0
   14e2c:	b	14db0 <__mempcpy_chk@plt+0x3d5c>
   14e30:	mov	r1, #58	; 0x3a
   14e34:	b	14e24 <__mempcpy_chk@plt+0x3dd0>
   14e38:	mov	r2, #58	; 0x3a
   14e3c:	b	14db0 <__mempcpy_chk@plt+0x3d5c>
   14e40:	push	{r4, r5, r6, sl, fp, lr}
   14e44:	add	fp, sp, #16
   14e48:	sub	sp, sp, #48	; 0x30
   14e4c:	mov	r4, r2
   14e50:	mov	r5, r0
   14e54:	mov	r6, sp
   14e58:	mov	r0, r6
   14e5c:	bl	14d18 <__mempcpy_chk@plt+0x3cc4>
   14e60:	mov	r0, r6
   14e64:	mov	r1, #58	; 0x3a
   14e68:	mov	r2, #1
   14e6c:	bl	13878 <__mempcpy_chk@plt+0x2824>
   14e70:	mov	r0, r5
   14e74:	mov	r1, r4
   14e78:	mvn	r2, #0
   14e7c:	mov	r3, r6
   14e80:	bl	14b20 <__mempcpy_chk@plt+0x3acc>
   14e84:	sub	sp, fp, #16
   14e88:	pop	{r4, r5, r6, sl, fp, pc}
   14e8c:	push	{fp, lr}
   14e90:	mov	fp, sp
   14e94:	sub	sp, sp, #8
   14e98:	mvn	ip, #0
   14e9c:	str	ip, [sp]
   14ea0:	bl	14eac <__mempcpy_chk@plt+0x3e58>
   14ea4:	mov	sp, fp
   14ea8:	pop	{fp, pc}
   14eac:	push	{r4, r5, r6, r7, fp, lr}
   14eb0:	add	fp, sp, #16
   14eb4:	sub	sp, sp, #48	; 0x30
   14eb8:	mov	r7, r3
   14ebc:	mov	r5, r0
   14ec0:	mov	r0, #32
   14ec4:	movw	r3, #33128	; 0x8168
   14ec8:	movt	r3, #2
   14ecc:	add	r4, r3, #16
   14ed0:	vld1.64	{d16-d17}, [r3], r0
   14ed4:	mov	r6, sp
   14ed8:	vld1.64	{d18-d19}, [r4]
   14edc:	add	r4, r6, #16
   14ee0:	vld1.64	{d20-d21}, [r3]
   14ee4:	vst1.64	{d18-d19}, [r4]
   14ee8:	mov	r3, r6
   14eec:	vst1.64	{d16-d17}, [r3], r0
   14ef0:	vst1.64	{d20-d21}, [r3]
   14ef4:	mov	r0, r6
   14ef8:	bl	138d0 <__mempcpy_chk@plt+0x287c>
   14efc:	ldr	r2, [fp, #8]
   14f00:	mov	r0, r5
   14f04:	mov	r1, r7
   14f08:	mov	r3, r6
   14f0c:	bl	14b20 <__mempcpy_chk@plt+0x3acc>
   14f10:	sub	sp, fp, #16
   14f14:	pop	{r4, r5, r6, r7, fp, pc}
   14f18:	mov	r3, r2
   14f1c:	mov	r2, r1
   14f20:	mov	r1, r0
   14f24:	mov	r0, #0
   14f28:	b	14e8c <__mempcpy_chk@plt+0x3e38>
   14f2c:	push	{fp, lr}
   14f30:	mov	fp, sp
   14f34:	sub	sp, sp, #8
   14f38:	mov	ip, r2
   14f3c:	mov	r2, r1
   14f40:	mov	r1, r0
   14f44:	str	r3, [sp]
   14f48:	mov	r0, #0
   14f4c:	mov	r3, ip
   14f50:	bl	14eac <__mempcpy_chk@plt+0x3e58>
   14f54:	mov	sp, fp
   14f58:	pop	{fp, pc}
   14f5c:	movw	r3, #33024	; 0x8100
   14f60:	movt	r3, #2
   14f64:	b	14b20 <__mempcpy_chk@plt+0x3acc>
   14f68:	mov	r2, r1
   14f6c:	mov	r1, r0
   14f70:	mov	r0, #0
   14f74:	b	14f5c <__mempcpy_chk@plt+0x3f08>
   14f78:	mvn	r2, #0
   14f7c:	b	14f5c <__mempcpy_chk@plt+0x3f08>
   14f80:	mov	r1, r0
   14f84:	mov	r0, #0
   14f88:	b	14f78 <__mempcpy_chk@plt+0x3f24>
   14f8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f90:	add	fp, sp, #24
   14f94:	sub	sp, sp, #16
   14f98:	mov	r4, r1
   14f9c:	mov	r5, r0
   14fa0:	mov	r7, #0
   14fa4:	mov	r0, #0
   14fa8:	mov	r1, r5
   14fac:	mov	r2, #5
   14fb0:	bl	10e80 <dcgettext@plt>
   14fb4:	cmp	r0, r5
   14fb8:	beq	14fc4 <__mempcpy_chk@plt+0x3f70>
   14fbc:	sub	sp, fp, #24
   14fc0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14fc4:	bl	165f0 <__mempcpy_chk@plt+0x559c>
   14fc8:	mov	r6, r0
   14fcc:	mov	r8, #56	; 0x38
   14fd0:	mov	r0, #45	; 0x2d
   14fd4:	stm	sp, {r0, r8}
   14fd8:	str	r7, [sp, #8]
   14fdc:	str	r7, [sp, #12]
   14fe0:	mov	r0, r6
   14fe4:	mov	r1, #85	; 0x55
   14fe8:	mov	r2, #84	; 0x54
   14fec:	mov	r3, #70	; 0x46
   14ff0:	bl	15088 <__mempcpy_chk@plt+0x4034>
   14ff4:	cmp	r0, #0
   14ff8:	beq	15014 <__mempcpy_chk@plt+0x3fc0>
   14ffc:	ldrb	r1, [r5]
   15000:	movw	r2, #29124	; 0x71c4
   15004:	movt	r2, #1
   15008:	movw	r0, #29128	; 0x71c8
   1500c:	movt	r0, #1
   15010:	b	15058 <__mempcpy_chk@plt+0x4004>
   15014:	mov	r0, #48	; 0x30
   15018:	mov	r1, #51	; 0x33
   1501c:	str	r8, [sp]
   15020:	stmib	sp, {r0, r1}
   15024:	str	r0, [sp, #12]
   15028:	mov	r0, r6
   1502c:	mov	r1, #71	; 0x47
   15030:	mov	r2, #66	; 0x42
   15034:	mov	r3, #49	; 0x31
   15038:	bl	15088 <__mempcpy_chk@plt+0x4034>
   1503c:	cmp	r0, #0
   15040:	beq	15068 <__mempcpy_chk@plt+0x4014>
   15044:	ldrb	r1, [r5]
   15048:	movw	r2, #29132	; 0x71cc
   1504c:	movt	r2, #1
   15050:	movw	r0, #29136	; 0x71d0
   15054:	movt	r0, #1
   15058:	cmp	r1, #96	; 0x60
   1505c:	moveq	r0, r2
   15060:	sub	sp, fp, #24
   15064:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15068:	movw	r1, #29118	; 0x71be
   1506c:	movt	r1, #1
   15070:	movw	r0, #29122	; 0x71c2
   15074:	movt	r0, #1
   15078:	cmp	r4, #9
   1507c:	moveq	r0, r1
   15080:	sub	sp, fp, #24
   15084:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15088:	push	{r4, r5, r6, r7, fp, lr}
   1508c:	add	fp, sp, #16
   15090:	sub	sp, sp, #16
   15094:	mov	r4, r3
   15098:	mov	r5, r2
   1509c:	mov	r7, r1
   150a0:	mov	r6, r0
   150a4:	mov	r0, r1
   150a8:	bl	162c0 <__mempcpy_chk@plt+0x526c>
   150ac:	ldrb	r1, [r6]
   150b0:	cmp	r0, #0
   150b4:	andne	r1, r1, #223	; 0xdf
   150b8:	mov	r0, #0
   150bc:	cmp	r1, r7
   150c0:	bne	15100 <__mempcpy_chk@plt+0x40ac>
   150c4:	cmp	r7, #0
   150c8:	moveq	r0, #1
   150cc:	subeq	sp, fp, #16
   150d0:	popeq	{r4, r5, r6, r7, fp, pc}
   150d4:	ldr	r0, [fp, #20]
   150d8:	ldr	r1, [fp, #16]
   150dc:	ldr	r2, [fp, #12]
   150e0:	ldr	r3, [fp, #8]
   150e4:	str	r2, [sp]
   150e8:	str	r1, [sp, #4]
   150ec:	str	r0, [sp, #8]
   150f0:	mov	r0, r6
   150f4:	mov	r1, r5
   150f8:	mov	r2, r4
   150fc:	bl	15108 <__mempcpy_chk@plt+0x40b4>
   15100:	sub	sp, fp, #16
   15104:	pop	{r4, r5, r6, r7, fp, pc}
   15108:	push	{r4, r5, r6, r7, fp, lr}
   1510c:	add	fp, sp, #16
   15110:	sub	sp, sp, #8
   15114:	mov	r4, r3
   15118:	mov	r5, r2
   1511c:	mov	r7, r1
   15120:	mov	r6, r0
   15124:	mov	r0, r1
   15128:	bl	162c0 <__mempcpy_chk@plt+0x526c>
   1512c:	ldrb	r1, [r6, #1]
   15130:	cmp	r0, #0
   15134:	andne	r1, r1, #223	; 0xdf
   15138:	mov	r0, #0
   1513c:	cmp	r1, r7
   15140:	bne	15178 <__mempcpy_chk@plt+0x4124>
   15144:	cmp	r7, #0
   15148:	moveq	r0, #1
   1514c:	subeq	sp, fp, #16
   15150:	popeq	{r4, r5, r6, r7, fp, pc}
   15154:	ldr	r0, [fp, #16]
   15158:	ldr	r1, [fp, #12]
   1515c:	ldr	r3, [fp, #8]
   15160:	str	r1, [sp]
   15164:	str	r0, [sp, #4]
   15168:	mov	r0, r6
   1516c:	mov	r1, r5
   15170:	mov	r2, r4
   15174:	bl	15180 <__mempcpy_chk@plt+0x412c>
   15178:	sub	sp, fp, #16
   1517c:	pop	{r4, r5, r6, r7, fp, pc}
   15180:	push	{r4, r5, r6, r7, fp, lr}
   15184:	add	fp, sp, #16
   15188:	sub	sp, sp, #8
   1518c:	mov	r4, r3
   15190:	mov	r5, r2
   15194:	mov	r7, r1
   15198:	mov	r6, r0
   1519c:	mov	r0, r1
   151a0:	bl	162c0 <__mempcpy_chk@plt+0x526c>
   151a4:	ldrb	r1, [r6, #2]
   151a8:	cmp	r0, #0
   151ac:	andne	r1, r1, #223	; 0xdf
   151b0:	mov	r0, #0
   151b4:	cmp	r1, r7
   151b8:	bne	151e8 <__mempcpy_chk@plt+0x4194>
   151bc:	cmp	r7, #0
   151c0:	moveq	r0, #1
   151c4:	subeq	sp, fp, #16
   151c8:	popeq	{r4, r5, r6, r7, fp, pc}
   151cc:	ldr	r0, [fp, #12]
   151d0:	ldr	r3, [fp, #8]
   151d4:	str	r0, [sp]
   151d8:	mov	r0, r6
   151dc:	mov	r1, r5
   151e0:	mov	r2, r4
   151e4:	bl	151f0 <__mempcpy_chk@plt+0x419c>
   151e8:	sub	sp, fp, #16
   151ec:	pop	{r4, r5, r6, r7, fp, pc}
   151f0:	push	{r4, r5, r6, r7, fp, lr}
   151f4:	add	fp, sp, #16
   151f8:	mov	r4, r3
   151fc:	mov	r5, r2
   15200:	mov	r7, r1
   15204:	mov	r6, r0
   15208:	mov	r0, r1
   1520c:	bl	162c0 <__mempcpy_chk@plt+0x526c>
   15210:	ldrb	r1, [r6, #3]
   15214:	ldr	r3, [fp, #8]
   15218:	cmp	r0, #0
   1521c:	andne	r1, r1, #223	; 0xdf
   15220:	mov	r0, #0
   15224:	cmp	r1, r7
   15228:	popne	{r4, r5, r6, r7, fp, pc}
   1522c:	cmp	r7, #0
   15230:	beq	15248 <__mempcpy_chk@plt+0x41f4>
   15234:	mov	r0, r6
   15238:	mov	r1, r5
   1523c:	mov	r2, r4
   15240:	pop	{r4, r5, r6, r7, fp, lr}
   15244:	b	15250 <__mempcpy_chk@plt+0x41fc>
   15248:	mov	r0, #1
   1524c:	pop	{r4, r5, r6, r7, fp, pc}
   15250:	push	{r4, r5, r6, r7, fp, lr}
   15254:	add	fp, sp, #16
   15258:	mov	r4, r3
   1525c:	mov	r5, r2
   15260:	mov	r7, r1
   15264:	mov	r6, r0
   15268:	mov	r0, r1
   1526c:	bl	162c0 <__mempcpy_chk@plt+0x526c>
   15270:	ldrb	r1, [r6, #4]
   15274:	cmp	r0, #0
   15278:	andne	r1, r1, #223	; 0xdf
   1527c:	mov	r0, #0
   15280:	cmp	r1, r7
   15284:	popne	{r4, r5, r6, r7, fp, pc}
   15288:	cmp	r7, #0
   1528c:	beq	152a4 <__mempcpy_chk@plt+0x4250>
   15290:	mov	r0, r6
   15294:	mov	r1, r5
   15298:	mov	r2, r4
   1529c:	pop	{r4, r5, r6, r7, fp, lr}
   152a0:	b	152ac <__mempcpy_chk@plt+0x4258>
   152a4:	mov	r0, #1
   152a8:	pop	{r4, r5, r6, r7, fp, pc}
   152ac:	push	{r4, r5, r6, sl, fp, lr}
   152b0:	add	fp, sp, #16
   152b4:	mov	r4, r2
   152b8:	mov	r6, r1
   152bc:	mov	r5, r0
   152c0:	mov	r0, r1
   152c4:	bl	162c0 <__mempcpy_chk@plt+0x526c>
   152c8:	ldrb	r1, [r5, #5]
   152cc:	cmp	r0, #0
   152d0:	andne	r1, r1, #223	; 0xdf
   152d4:	mov	r0, #0
   152d8:	cmp	r1, r6
   152dc:	popne	{r4, r5, r6, sl, fp, pc}
   152e0:	cmp	r6, #0
   152e4:	beq	152f8 <__mempcpy_chk@plt+0x42a4>
   152e8:	mov	r0, r5
   152ec:	mov	r1, r4
   152f0:	pop	{r4, r5, r6, sl, fp, lr}
   152f4:	b	15300 <__mempcpy_chk@plt+0x42ac>
   152f8:	mov	r0, #1
   152fc:	pop	{r4, r5, r6, sl, fp, pc}
   15300:	push	{r4, r5, fp, lr}
   15304:	add	fp, sp, #8
   15308:	mov	r5, r1
   1530c:	mov	r4, r0
   15310:	mov	r0, r1
   15314:	bl	162c0 <__mempcpy_chk@plt+0x526c>
   15318:	ldrb	r1, [r4, #6]
   1531c:	cmp	r0, #0
   15320:	andne	r1, r1, #223	; 0xdf
   15324:	mov	r0, #0
   15328:	cmp	r1, r5
   1532c:	popne	{r4, r5, fp, pc}
   15330:	cmp	r5, #0
   15334:	beq	15344 <__mempcpy_chk@plt+0x42f0>
   15338:	mov	r0, r4
   1533c:	pop	{r4, r5, fp, lr}
   15340:	b	1534c <__mempcpy_chk@plt+0x42f8>
   15344:	mov	r0, #1
   15348:	pop	{r4, r5, fp, pc}
   1534c:	push	{r4, sl, fp, lr}
   15350:	add	fp, sp, #8
   15354:	mov	r4, r0
   15358:	mov	r0, #0
   1535c:	bl	162c0 <__mempcpy_chk@plt+0x526c>
   15360:	ldrb	r1, [r4, #7]
   15364:	cmp	r0, #0
   15368:	beq	15380 <__mempcpy_chk@plt+0x432c>
   1536c:	tst	r1, #223	; 0xdf
   15370:	moveq	r0, #1
   15374:	popeq	{r4, sl, fp, pc}
   15378:	mov	r0, #0
   1537c:	pop	{r4, sl, fp, pc}
   15380:	cmp	r1, #0
   15384:	moveq	r0, #1
   15388:	popeq	{r4, sl, fp, pc}
   1538c:	mov	r0, #0
   15390:	pop	{r4, sl, fp, pc}
   15394:	push	{r4, r5, r6, sl, fp, lr}
   15398:	add	fp, sp, #16
   1539c:	mov	r5, r1
   153a0:	ldr	r4, [r0], #8
   153a4:	cmp	r4, r0
   153a8:	beq	153cc <__mempcpy_chk@plt+0x4378>
   153ac:	mov	r0, r4
   153b0:	mov	r1, r5
   153b4:	bl	15e64 <__mempcpy_chk@plt+0x4e10>
   153b8:	mov	r6, r0
   153bc:	cmp	r0, #0
   153c0:	moveq	r6, r4
   153c4:	mov	r0, r6
   153c8:	pop	{r4, r5, r6, sl, fp, pc}
   153cc:	mov	r0, r5
   153d0:	bl	15e34 <__mempcpy_chk@plt+0x4de0>
   153d4:	cmp	r0, #0
   153d8:	moveq	r6, #0
   153dc:	moveq	r0, r6
   153e0:	popeq	{r4, r5, r6, sl, fp, pc}
   153e4:	mov	r6, r0
   153e8:	mov	r1, r4
   153ec:	mov	r2, r5
   153f0:	bl	10e5c <memcpy@plt>
   153f4:	mov	r0, r6
   153f8:	pop	{r4, r5, r6, sl, fp, pc}
   153fc:	push	{r4, r5, fp, lr}
   15400:	add	fp, sp, #8
   15404:	mov	r4, r0
   15408:	ldr	r5, [r0, #4]
   1540c:	bl	15458 <__mempcpy_chk@plt+0x4404>
   15410:	ldr	r0, [r4, #4]
   15414:	cmp	r0, r5, lsl #1
   15418:	bhi	1543c <__mempcpy_chk@plt+0x43e8>
   1541c:	lsl	r5, r5, #1
   15420:	mov	r0, r5
   15424:	bl	15e34 <__mempcpy_chk@plt+0x4de0>
   15428:	cmp	r0, #0
   1542c:	stmne	r4, {r0, r5}
   15430:	movne	r0, #1
   15434:	popne	{r4, r5, fp, pc}
   15438:	b	15448 <__mempcpy_chk@plt+0x43f4>
   1543c:	bl	10f88 <__errno_location@plt>
   15440:	mov	r1, #12
   15444:	str	r1, [r0]
   15448:	mov	r0, r4
   1544c:	bl	1546c <__mempcpy_chk@plt+0x4418>
   15450:	mov	r0, #0
   15454:	pop	{r4, r5, fp, pc}
   15458:	mov	r1, r0
   1545c:	ldr	r0, [r1], #8
   15460:	cmp	r0, r1
   15464:	bxeq	lr
   15468:	b	12788 <__mempcpy_chk@plt+0x1734>
   1546c:	mov	r1, #1024	; 0x400
   15470:	add	r2, r0, #8
   15474:	str	r2, [r0]
   15478:	str	r1, [r0, #4]
   1547c:	bx	lr
   15480:	push	{r4, r5, r6, r7, fp, lr}
   15484:	add	fp, sp, #16
   15488:	mov	r4, r0
   1548c:	add	r5, r0, #8
   15490:	ldrd	r0, [r0]
   15494:	lsl	r7, r1, #1
   15498:	cmp	r0, r5
   1549c:	beq	154c0 <__mempcpy_chk@plt+0x446c>
   154a0:	cmp	r7, r1
   154a4:	bcc	154f0 <__mempcpy_chk@plt+0x449c>
   154a8:	mov	r1, r7
   154ac:	bl	15e64 <__mempcpy_chk@plt+0x4e10>
   154b0:	mov	r6, r0
   154b4:	cmp	r0, #0
   154b8:	bne	154e4 <__mempcpy_chk@plt+0x4490>
   154bc:	b	154fc <__mempcpy_chk@plt+0x44a8>
   154c0:	mov	r0, r7
   154c4:	bl	15e34 <__mempcpy_chk@plt+0x4de0>
   154c8:	cmp	r0, #0
   154cc:	moveq	r0, #0
   154d0:	popeq	{r4, r5, r6, r7, fp, pc}
   154d4:	mov	r6, r0
   154d8:	ldr	r2, [r4, #4]
   154dc:	mov	r1, r5
   154e0:	bl	10e5c <memcpy@plt>
   154e4:	strd	r6, [r4]
   154e8:	mov	r0, #1
   154ec:	pop	{r4, r5, r6, r7, fp, pc}
   154f0:	bl	10f88 <__errno_location@plt>
   154f4:	mov	r1, #12
   154f8:	str	r1, [r0]
   154fc:	ldr	r0, [r4]
   15500:	bl	12788 <__mempcpy_chk@plt+0x1734>
   15504:	mov	r0, r4
   15508:	bl	15514 <__mempcpy_chk@plt+0x44c0>
   1550c:	mov	r0, #0
   15510:	pop	{r4, r5, r6, r7, fp, pc}
   15514:	mov	r1, #1024	; 0x400
   15518:	add	r2, r0, #8
   1551c:	str	r2, [r0]
   15520:	str	r1, [r0, #4]
   15524:	bx	lr
   15528:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1552c:	add	fp, sp, #24
   15530:	sub	sp, sp, #32
   15534:	mov	r4, r2
   15538:	mov	r8, r0
   1553c:	ldr	r6, [fp, #12]
   15540:	ldr	r7, [fp, #8]
   15544:	cmp	r1, #0
   15548:	beq	15570 <__mempcpy_chk@plt+0x451c>
   1554c:	mov	r5, r1
   15550:	str	r4, [sp]
   15554:	str	r3, [sp, #4]
   15558:	movw	r2, #29224	; 0x7228
   1555c:	movt	r2, #1
   15560:	mov	r0, r8
   15564:	mov	r1, #1
   15568:	mov	r3, r5
   1556c:	b	15588 <__mempcpy_chk@plt+0x4534>
   15570:	str	r3, [sp]
   15574:	movw	r2, #29236	; 0x7234
   15578:	movt	r2, #1
   1557c:	mov	r0, r8
   15580:	mov	r1, #1
   15584:	mov	r3, r4
   15588:	bl	10fc4 <__fprintf_chk@plt>
   1558c:	movw	r1, #29243	; 0x723b
   15590:	movt	r1, #1
   15594:	mov	r0, #0
   15598:	mov	r2, #5
   1559c:	bl	10e80 <dcgettext@plt>
   155a0:	mov	r3, r0
   155a4:	movw	r0, #2022	; 0x7e6
   155a8:	str	r0, [sp]
   155ac:	movw	r2, #29961	; 0x7509
   155b0:	movt	r2, #1
   155b4:	mov	r0, r8
   155b8:	mov	r1, #1
   155bc:	bl	10fc4 <__fprintf_chk@plt>
   155c0:	movw	r4, #27247	; 0x6a6f
   155c4:	movt	r4, #1
   155c8:	mov	r0, r4
   155cc:	mov	r1, r8
   155d0:	bl	10dfc <fputs_unlocked@plt>
   155d4:	movw	r1, #29247	; 0x723f
   155d8:	movt	r1, #1
   155dc:	mov	r0, #0
   155e0:	mov	r2, #5
   155e4:	bl	10e80 <dcgettext@plt>
   155e8:	mov	r2, r0
   155ec:	movw	r3, #29418	; 0x72ea
   155f0:	movt	r3, #1
   155f4:	mov	r0, r8
   155f8:	mov	r1, #1
   155fc:	bl	10fc4 <__fprintf_chk@plt>
   15600:	mov	r0, r4
   15604:	mov	r1, r8
   15608:	bl	10dfc <fputs_unlocked@plt>
   1560c:	cmp	r6, #9
   15610:	bhi	1564c <__mempcpy_chk@plt+0x45f8>
   15614:	add	r0, pc, #0
   15618:	ldr	pc, [r0, r6, lsl #2]
   1561c:	andeq	r5, r1, r4, asr #12
   15620:	andeq	r5, r1, r8, asr r6
   15624:	andeq	r5, r1, r8, lsl #13
   15628:			; <UNDEFINED> instruction: 0x000156b0
   1562c:	ldrdeq	r5, [r1], -r8
   15630:	andeq	r5, r1, r0, lsl #14
   15634:	andeq	r5, r1, r8, lsr #14
   15638:	andeq	r5, r1, r0, ror #14
   1563c:	andeq	r5, r1, r0, lsl #16
   15640:	andeq	r5, r1, r8, lsr #15
   15644:	sub	sp, fp, #24
   15648:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1564c:	movw	r1, #29771	; 0x744b
   15650:	movt	r1, #1
   15654:	b	157b0 <__mempcpy_chk@plt+0x475c>
   15658:	movw	r1, #29452	; 0x730c
   1565c:	movt	r1, #1
   15660:	mov	r0, #0
   15664:	mov	r2, #5
   15668:	bl	10e80 <dcgettext@plt>
   1566c:	mov	r2, r0
   15670:	ldr	r3, [r7]
   15674:	mov	r0, r8
   15678:	mov	r1, #1
   1567c:	sub	sp, fp, #24
   15680:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15684:	b	10fc4 <__fprintf_chk@plt>
   15688:	movw	r1, #29468	; 0x731c
   1568c:	movt	r1, #1
   15690:	mov	r0, #0
   15694:	mov	r2, #5
   15698:	bl	10e80 <dcgettext@plt>
   1569c:	mov	r2, r0
   156a0:	ldr	r3, [r7]
   156a4:	ldr	r0, [r7, #4]
   156a8:	str	r0, [sp]
   156ac:	b	1579c <__mempcpy_chk@plt+0x4748>
   156b0:	movw	r1, #29491	; 0x7333
   156b4:	movt	r1, #1
   156b8:	mov	r0, #0
   156bc:	mov	r2, #5
   156c0:	bl	10e80 <dcgettext@plt>
   156c4:	mov	r2, r0
   156c8:	ldr	r3, [r7]
   156cc:	ldmib	r7, {r0, r1}
   156d0:	stm	sp, {r0, r1}
   156d4:	b	1579c <__mempcpy_chk@plt+0x4748>
   156d8:	movw	r1, #29519	; 0x734f
   156dc:	movt	r1, #1
   156e0:	mov	r0, #0
   156e4:	mov	r2, #5
   156e8:	bl	10e80 <dcgettext@plt>
   156ec:	mov	r2, r0
   156f0:	ldr	r3, [r7]
   156f4:	ldmib	r7, {r0, r1, r7}
   156f8:	stm	sp, {r0, r1, r7}
   156fc:	b	1579c <__mempcpy_chk@plt+0x4748>
   15700:	movw	r1, #29551	; 0x736f
   15704:	movt	r1, #1
   15708:	mov	r0, #0
   1570c:	mov	r2, #5
   15710:	bl	10e80 <dcgettext@plt>
   15714:	mov	r2, r0
   15718:	ldr	r3, [r7]
   1571c:	ldmib	r7, {r0, r1, r6, r7}
   15720:	stm	sp, {r0, r1, r6, r7}
   15724:	b	1579c <__mempcpy_chk@plt+0x4748>
   15728:	movw	r1, #29587	; 0x7393
   1572c:	movt	r1, #1
   15730:	mov	r0, #0
   15734:	mov	r2, #5
   15738:	bl	10e80 <dcgettext@plt>
   1573c:	mov	r2, r0
   15740:	ldr	r3, [r7]
   15744:	ldmib	r7, {r0, r1, r6}
   15748:	ldr	r5, [r7, #16]
   1574c:	ldr	r7, [r7, #20]
   15750:	stm	sp, {r0, r1, r6}
   15754:	str	r5, [sp, #12]
   15758:	str	r7, [sp, #16]
   1575c:	b	1579c <__mempcpy_chk@plt+0x4748>
   15760:	movw	r1, #29627	; 0x73bb
   15764:	movt	r1, #1
   15768:	mov	r0, #0
   1576c:	mov	r2, #5
   15770:	bl	10e80 <dcgettext@plt>
   15774:	mov	r2, r0
   15778:	ldr	r3, [r7]
   1577c:	ldmib	r7, {r0, r1, r6}
   15780:	ldr	r5, [r7, #16]
   15784:	ldr	r4, [r7, #20]
   15788:	ldr	r7, [r7, #24]
   1578c:	stm	sp, {r0, r1, r6}
   15790:	str	r5, [sp, #12]
   15794:	str	r4, [sp, #16]
   15798:	str	r7, [sp, #20]
   1579c:	mov	r0, r8
   157a0:	mov	r1, #1
   157a4:	b	15850 <__mempcpy_chk@plt+0x47fc>
   157a8:	movw	r1, #29719	; 0x7417
   157ac:	movt	r1, #1
   157b0:	mov	r0, #0
   157b4:	mov	r2, #5
   157b8:	bl	10e80 <dcgettext@plt>
   157bc:	mov	ip, r0
   157c0:	ldr	r3, [r7]
   157c4:	ldr	r0, [r7, #4]
   157c8:	ldr	r1, [r7, #8]
   157cc:	ldr	r6, [r7, #12]
   157d0:	ldr	r5, [r7, #16]
   157d4:	ldr	r4, [r7, #20]
   157d8:	ldr	r2, [r7, #24]
   157dc:	ldr	lr, [r7, #28]
   157e0:	ldr	r7, [r7, #32]
   157e4:	stm	sp, {r0, r1, r6}
   157e8:	str	r5, [sp, #12]
   157ec:	str	r4, [sp, #16]
   157f0:	str	r2, [sp, #20]
   157f4:	str	lr, [sp, #24]
   157f8:	str	r7, [sp, #28]
   157fc:	b	15844 <__mempcpy_chk@plt+0x47f0>
   15800:	movw	r1, #29671	; 0x73e7
   15804:	movt	r1, #1
   15808:	mov	r0, #0
   1580c:	mov	r2, #5
   15810:	bl	10e80 <dcgettext@plt>
   15814:	mov	ip, r0
   15818:	ldr	r3, [r7]
   1581c:	ldmib	r7, {r0, r1, r6}
   15820:	ldr	r5, [r7, #16]
   15824:	ldr	r4, [r7, #20]
   15828:	ldr	r2, [r7, #24]
   1582c:	ldr	r7, [r7, #28]
   15830:	stm	sp, {r0, r1, r6}
   15834:	str	r5, [sp, #12]
   15838:	str	r4, [sp, #16]
   1583c:	str	r2, [sp, #20]
   15840:	str	r7, [sp, #24]
   15844:	mov	r0, r8
   15848:	mov	r1, #1
   1584c:	mov	r2, ip
   15850:	bl	10fc4 <__fprintf_chk@plt>
   15854:	sub	sp, fp, #24
   15858:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1585c:	push	{r4, sl, fp, lr}
   15860:	add	fp, sp, #8
   15864:	sub	sp, sp, #8
   15868:	mov	lr, #0
   1586c:	ldr	ip, [fp, #8]
   15870:	ldr	r4, [ip, lr, lsl #2]
   15874:	add	lr, lr, #1
   15878:	cmp	r4, #0
   1587c:	bne	15870 <__mempcpy_chk@plt+0x481c>
   15880:	sub	r4, lr, #1
   15884:	str	ip, [sp]
   15888:	str	r4, [sp, #4]
   1588c:	bl	15528 <__mempcpy_chk@plt+0x44d4>
   15890:	sub	sp, fp, #8
   15894:	pop	{r4, sl, fp, pc}
   15898:	push	{r4, r5, fp, lr}
   1589c:	add	fp, sp, #8
   158a0:	sub	sp, sp, #48	; 0x30
   158a4:	mov	ip, #0
   158a8:	ldr	r4, [fp, #8]
   158ac:	add	lr, sp, #8
   158b0:	ldr	r5, [r4]
   158b4:	str	r5, [lr, ip, lsl #2]
   158b8:	cmp	r5, #0
   158bc:	beq	158d0 <__mempcpy_chk@plt+0x487c>
   158c0:	add	ip, ip, #1
   158c4:	add	r4, r4, #4
   158c8:	cmp	ip, #10
   158cc:	bcc	158b0 <__mempcpy_chk@plt+0x485c>
   158d0:	str	lr, [sp]
   158d4:	str	ip, [sp, #4]
   158d8:	bl	15528 <__mempcpy_chk@plt+0x44d4>
   158dc:	sub	sp, fp, #8
   158e0:	pop	{r4, r5, fp, pc}
   158e4:	push	{fp, lr}
   158e8:	mov	fp, sp
   158ec:	sub	sp, sp, #8
   158f0:	add	ip, fp, #8
   158f4:	str	ip, [sp, #4]
   158f8:	str	ip, [sp]
   158fc:	bl	15898 <__mempcpy_chk@plt+0x4844>
   15900:	mov	sp, fp
   15904:	pop	{fp, pc}
   15908:	push	{fp, lr}
   1590c:	mov	fp, sp
   15910:	movw	r0, #33092	; 0x8144
   15914:	movt	r0, #2
   15918:	ldr	r1, [r0]
   1591c:	movw	r0, #27247	; 0x6a6f
   15920:	movt	r0, #1
   15924:	bl	10dfc <fputs_unlocked@plt>
   15928:	movw	r1, #29831	; 0x7487
   1592c:	movt	r1, #1
   15930:	mov	r0, #0
   15934:	mov	r2, #5
   15938:	bl	10e80 <dcgettext@plt>
   1593c:	mov	r1, r0
   15940:	movw	r2, #29851	; 0x749b
   15944:	movt	r2, #1
   15948:	mov	r0, #1
   1594c:	bl	10fac <__printf_chk@plt>
   15950:	movw	r1, #29873	; 0x74b1
   15954:	movt	r1, #1
   15958:	mov	r0, #0
   1595c:	mov	r2, #5
   15960:	bl	10e80 <dcgettext@plt>
   15964:	mov	r1, r0
   15968:	movw	r2, #28015	; 0x6d6f
   1596c:	movt	r2, #1
   15970:	movw	r3, #28177	; 0x6e11
   15974:	movt	r3, #1
   15978:	mov	r0, #1
   1597c:	bl	10fac <__printf_chk@plt>
   15980:	movw	r1, #29893	; 0x74c5
   15984:	movt	r1, #1
   15988:	mov	r0, #0
   1598c:	mov	r2, #5
   15990:	bl	10e80 <dcgettext@plt>
   15994:	mov	r1, r0
   15998:	movw	r2, #29932	; 0x74ec
   1599c:	movt	r2, #1
   159a0:	mov	r0, #1
   159a4:	pop	{fp, lr}
   159a8:	b	10fac <__printf_chk@plt>
   159ac:	b	159b0 <__mempcpy_chk@plt+0x495c>
   159b0:	push	{r4, r5, r6, sl, fp, lr}
   159b4:	add	fp, sp, #16
   159b8:	mov	r4, r2
   159bc:	mov	r5, r1
   159c0:	mov	r6, r0
   159c4:	bl	16688 <__mempcpy_chk@plt+0x5634>
   159c8:	cmp	r0, #0
   159cc:	popne	{r4, r5, r6, sl, fp, pc}
   159d0:	cmp	r6, #0
   159d4:	beq	159e8 <__mempcpy_chk@plt+0x4994>
   159d8:	cmp	r5, #0
   159dc:	cmpne	r4, #0
   159e0:	bne	159e8 <__mempcpy_chk@plt+0x4994>
   159e4:	pop	{r4, r5, r6, sl, fp, pc}
   159e8:	bl	15d9c <__mempcpy_chk@plt+0x4d48>
   159ec:	push	{fp, lr}
   159f0:	mov	fp, sp
   159f4:	bl	15e34 <__mempcpy_chk@plt+0x4de0>
   159f8:	bl	15a00 <__mempcpy_chk@plt+0x49ac>
   159fc:	pop	{fp, pc}
   15a00:	cmp	r0, #0
   15a04:	bxne	lr
   15a08:	push	{fp, lr}
   15a0c:	mov	fp, sp
   15a10:	bl	15d9c <__mempcpy_chk@plt+0x4d48>
   15a14:	push	{fp, lr}
   15a18:	mov	fp, sp
   15a1c:	bl	165bc <__mempcpy_chk@plt+0x5568>
   15a20:	bl	15a00 <__mempcpy_chk@plt+0x49ac>
   15a24:	pop	{fp, pc}
   15a28:	b	159ec <__mempcpy_chk@plt+0x4998>
   15a2c:	push	{r4, r5, fp, lr}
   15a30:	add	fp, sp, #8
   15a34:	mov	r4, r1
   15a38:	mov	r5, r0
   15a3c:	bl	15e64 <__mempcpy_chk@plt+0x4e10>
   15a40:	cmp	r0, #0
   15a44:	popne	{r4, r5, fp, pc}
   15a48:	cmp	r5, #0
   15a4c:	beq	15a5c <__mempcpy_chk@plt+0x4a08>
   15a50:	cmp	r4, #0
   15a54:	bne	15a5c <__mempcpy_chk@plt+0x4a08>
   15a58:	pop	{r4, r5, fp, pc}
   15a5c:	bl	15d9c <__mempcpy_chk@plt+0x4d48>
   15a60:	push	{fp, lr}
   15a64:	mov	fp, sp
   15a68:	bl	165c0 <__mempcpy_chk@plt+0x556c>
   15a6c:	bl	15a00 <__mempcpy_chk@plt+0x49ac>
   15a70:	pop	{fp, pc}
   15a74:	push	{fp, lr}
   15a78:	mov	fp, sp
   15a7c:	bl	165d0 <__mempcpy_chk@plt+0x557c>
   15a80:	bl	15a00 <__mempcpy_chk@plt+0x49ac>
   15a84:	pop	{fp, pc}
   15a88:	push	{fp, lr}
   15a8c:	mov	fp, sp
   15a90:	mov	r2, r1
   15a94:	mov	r1, r0
   15a98:	mov	r0, #0
   15a9c:	bl	159b0 <__mempcpy_chk@plt+0x495c>
   15aa0:	pop	{fp, pc}
   15aa4:	mov	r2, r1
   15aa8:	mov	r1, r0
   15aac:	mov	r0, #0
   15ab0:	b	15a74 <__mempcpy_chk@plt+0x4a20>
   15ab4:	mov	r2, #1
   15ab8:	b	15abc <__mempcpy_chk@plt+0x4a68>
   15abc:	push	{r4, r5, fp, lr}
   15ac0:	add	fp, sp, #8
   15ac4:	mov	r4, r1
   15ac8:	ldr	r5, [r1]
   15acc:	cmp	r0, #0
   15ad0:	beq	15ae8 <__mempcpy_chk@plt+0x4a94>
   15ad4:	mov	r1, #1
   15ad8:	add	r1, r1, r5, lsr #1
   15adc:	adds	r5, r5, r1
   15ae0:	bcc	15b00 <__mempcpy_chk@plt+0x4aac>
   15ae4:	bl	15d9c <__mempcpy_chk@plt+0x4d48>
   15ae8:	cmp	r5, #0
   15aec:	bne	15b00 <__mempcpy_chk@plt+0x4aac>
   15af0:	mov	r1, #64	; 0x40
   15af4:	udiv	r5, r1, r2
   15af8:	cmp	r2, #64	; 0x40
   15afc:	addhi	r5, r5, #1
   15b00:	mov	r1, r5
   15b04:	bl	159b0 <__mempcpy_chk@plt+0x495c>
   15b08:	str	r5, [r4]
   15b0c:	pop	{r4, r5, fp, pc}
   15b10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b14:	add	fp, sp, #24
   15b18:	mov	r8, r1
   15b1c:	ldr	r6, [r1]
   15b20:	add	r1, r6, r6, asr #1
   15b24:	cmp	r1, r6
   15b28:	mvnvs	r1, #-2147483648	; 0x80000000
   15b2c:	cmp	r1, r3
   15b30:	mov	r5, r1
   15b34:	movgt	r5, r3
   15b38:	cmn	r3, #1
   15b3c:	movle	r5, r1
   15b40:	ldr	r4, [fp, #8]
   15b44:	cmn	r4, #1
   15b48:	ble	15b70 <__mempcpy_chk@plt+0x4b1c>
   15b4c:	cmp	r4, #0
   15b50:	beq	15bc4 <__mempcpy_chk@plt+0x4b70>
   15b54:	cmn	r5, #1
   15b58:	ble	15b98 <__mempcpy_chk@plt+0x4b44>
   15b5c:	mvn	r7, #-2147483648	; 0x80000000
   15b60:	udiv	r1, r7, r4
   15b64:	cmp	r1, r5
   15b68:	bge	15bc4 <__mempcpy_chk@plt+0x4b70>
   15b6c:	b	15bd4 <__mempcpy_chk@plt+0x4b80>
   15b70:	cmn	r5, #1
   15b74:	ble	15bb4 <__mempcpy_chk@plt+0x4b60>
   15b78:	cmn	r4, #1
   15b7c:	beq	15bc4 <__mempcpy_chk@plt+0x4b70>
   15b80:	mov	r1, #-2147483648	; 0x80000000
   15b84:	sdiv	r1, r1, r4
   15b88:	mvn	r7, #-2147483648	; 0x80000000
   15b8c:	cmp	r1, r5
   15b90:	bge	15bc4 <__mempcpy_chk@plt+0x4b70>
   15b94:	b	15bd4 <__mempcpy_chk@plt+0x4b80>
   15b98:	beq	15bc4 <__mempcpy_chk@plt+0x4b70>
   15b9c:	mov	r1, #-2147483648	; 0x80000000
   15ba0:	sdiv	r1, r1, r5
   15ba4:	mvn	r7, #-2147483648	; 0x80000000
   15ba8:	cmp	r1, r4
   15bac:	bge	15bc4 <__mempcpy_chk@plt+0x4b70>
   15bb0:	b	15bd4 <__mempcpy_chk@plt+0x4b80>
   15bb4:	mvn	r7, #-2147483648	; 0x80000000
   15bb8:	sdiv	r1, r7, r4
   15bbc:	cmp	r5, r1
   15bc0:	blt	15bd4 <__mempcpy_chk@plt+0x4b80>
   15bc4:	mul	r1, r5, r4
   15bc8:	mov	r7, #64	; 0x40
   15bcc:	cmp	r1, #63	; 0x3f
   15bd0:	bgt	15bdc <__mempcpy_chk@plt+0x4b88>
   15bd4:	sdiv	r5, r7, r4
   15bd8:	mul	r1, r5, r4
   15bdc:	cmp	r0, #0
   15be0:	moveq	r7, #0
   15be4:	streq	r7, [r8]
   15be8:	sub	r7, r5, r6
   15bec:	cmp	r7, r2
   15bf0:	bge	15c9c <__mempcpy_chk@plt+0x4c48>
   15bf4:	add	r5, r6, r2
   15bf8:	mov	r1, #0
   15bfc:	cmp	r5, r3
   15c00:	mov	r2, #0
   15c04:	movwgt	r2, #1
   15c08:	cmn	r3, #1
   15c0c:	movwgt	r1, #1
   15c10:	cmp	r5, r6
   15c14:	bvs	15c84 <__mempcpy_chk@plt+0x4c30>
   15c18:	ands	r1, r1, r2
   15c1c:	bne	15c84 <__mempcpy_chk@plt+0x4c30>
   15c20:	cmn	r4, #1
   15c24:	ble	15c4c <__mempcpy_chk@plt+0x4bf8>
   15c28:	cmp	r4, #0
   15c2c:	beq	15c98 <__mempcpy_chk@plt+0x4c44>
   15c30:	cmn	r5, #1
   15c34:	ble	15c70 <__mempcpy_chk@plt+0x4c1c>
   15c38:	mvn	r1, #-2147483648	; 0x80000000
   15c3c:	udiv	r1, r1, r4
   15c40:	cmp	r1, r5
   15c44:	bge	15c98 <__mempcpy_chk@plt+0x4c44>
   15c48:	b	15c84 <__mempcpy_chk@plt+0x4c30>
   15c4c:	cmn	r5, #1
   15c50:	ble	15c88 <__mempcpy_chk@plt+0x4c34>
   15c54:	cmn	r4, #1
   15c58:	beq	15c98 <__mempcpy_chk@plt+0x4c44>
   15c5c:	mov	r1, #-2147483648	; 0x80000000
   15c60:	sdiv	r1, r1, r4
   15c64:	cmp	r1, r5
   15c68:	bge	15c98 <__mempcpy_chk@plt+0x4c44>
   15c6c:	b	15c84 <__mempcpy_chk@plt+0x4c30>
   15c70:	beq	15c98 <__mempcpy_chk@plt+0x4c44>
   15c74:	mov	r1, #-2147483648	; 0x80000000
   15c78:	sdiv	r1, r1, r5
   15c7c:	cmp	r1, r4
   15c80:	bge	15c98 <__mempcpy_chk@plt+0x4c44>
   15c84:	bl	15d9c <__mempcpy_chk@plt+0x4d48>
   15c88:	mvn	r1, #-2147483648	; 0x80000000
   15c8c:	sdiv	r1, r1, r4
   15c90:	cmp	r5, r1
   15c94:	blt	15c84 <__mempcpy_chk@plt+0x4c30>
   15c98:	mul	r1, r5, r4
   15c9c:	bl	15a2c <__mempcpy_chk@plt+0x49d8>
   15ca0:	str	r5, [r8]
   15ca4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ca8:	mov	r1, #1
   15cac:	b	15cb0 <__mempcpy_chk@plt+0x4c5c>
   15cb0:	push	{fp, lr}
   15cb4:	mov	fp, sp
   15cb8:	bl	15de0 <__mempcpy_chk@plt+0x4d8c>
   15cbc:	bl	15a00 <__mempcpy_chk@plt+0x49ac>
   15cc0:	pop	{fp, pc}
   15cc4:	mov	r1, #1
   15cc8:	b	15ccc <__mempcpy_chk@plt+0x4c78>
   15ccc:	push	{fp, lr}
   15cd0:	mov	fp, sp
   15cd4:	bl	165cc <__mempcpy_chk@plt+0x5578>
   15cd8:	bl	15a00 <__mempcpy_chk@plt+0x49ac>
   15cdc:	pop	{fp, pc}
   15ce0:	push	{r4, r5, r6, sl, fp, lr}
   15ce4:	add	fp, sp, #16
   15ce8:	mov	r4, r1
   15cec:	mov	r5, r0
   15cf0:	mov	r0, r1
   15cf4:	bl	159ec <__mempcpy_chk@plt+0x4998>
   15cf8:	mov	r6, r0
   15cfc:	mov	r1, r5
   15d00:	mov	r2, r4
   15d04:	bl	10e5c <memcpy@plt>
   15d08:	mov	r0, r6
   15d0c:	pop	{r4, r5, r6, sl, fp, pc}
   15d10:	push	{r4, r5, r6, sl, fp, lr}
   15d14:	add	fp, sp, #16
   15d18:	mov	r4, r1
   15d1c:	mov	r5, r0
   15d20:	mov	r0, r1
   15d24:	bl	15a14 <__mempcpy_chk@plt+0x49c0>
   15d28:	mov	r6, r0
   15d2c:	mov	r1, r5
   15d30:	mov	r2, r4
   15d34:	bl	10e5c <memcpy@plt>
   15d38:	mov	r0, r6
   15d3c:	pop	{r4, r5, r6, sl, fp, pc}
   15d40:	push	{r4, r5, r6, sl, fp, lr}
   15d44:	add	fp, sp, #16
   15d48:	mov	r4, r1
   15d4c:	mov	r5, r0
   15d50:	add	r0, r1, #1
   15d54:	bl	15a14 <__mempcpy_chk@plt+0x49c0>
   15d58:	mov	r6, r0
   15d5c:	mov	r0, #0
   15d60:	strb	r0, [r6, r4]
   15d64:	mov	r0, r6
   15d68:	mov	r1, r5
   15d6c:	mov	r2, r4
   15d70:	bl	10e5c <memcpy@plt>
   15d74:	mov	r0, r6
   15d78:	pop	{r4, r5, r6, sl, fp, pc}
   15d7c:	push	{r4, sl, fp, lr}
   15d80:	add	fp, sp, #8
   15d84:	mov	r4, r0
   15d88:	bl	10f7c <strlen@plt>
   15d8c:	add	r1, r0, #1
   15d90:	mov	r0, r4
   15d94:	pop	{r4, sl, fp, lr}
   15d98:	b	15ce0 <__mempcpy_chk@plt+0x4c8c>
   15d9c:	push	{fp, lr}
   15da0:	mov	fp, sp
   15da4:	movw	r0, #33004	; 0x80ec
   15da8:	movt	r0, #2
   15dac:	ldr	r4, [r0]
   15db0:	movw	r1, #30008	; 0x7538
   15db4:	movt	r1, #1
   15db8:	mov	r0, #0
   15dbc:	mov	r2, #5
   15dc0:	bl	10e80 <dcgettext@plt>
   15dc4:	mov	r3, r0
   15dc8:	movw	r2, #28844	; 0x70ac
   15dcc:	movt	r2, #1
   15dd0:	mov	r0, r4
   15dd4:	mov	r1, #0
   15dd8:	bl	10f10 <error@plt>
   15ddc:	bl	11030 <abort@plt>
   15de0:	clz	r2, r1
   15de4:	lsr	r2, r2, #5
   15de8:	clz	r3, r0
   15dec:	lsr	r3, r3, #5
   15df0:	orrs	r2, r3, r2
   15df4:	movwne	r1, #1
   15df8:	movwne	r0, #1
   15dfc:	cmp	r1, #0
   15e00:	beq	15e30 <__mempcpy_chk@plt+0x4ddc>
   15e04:	mvn	r2, #-2147483648	; 0x80000000
   15e08:	udiv	r2, r2, r1
   15e0c:	cmp	r2, r0
   15e10:	bcs	15e30 <__mempcpy_chk@plt+0x4ddc>
   15e14:	push	{fp, lr}
   15e18:	mov	fp, sp
   15e1c:	bl	10f88 <__errno_location@plt>
   15e20:	mov	r1, #12
   15e24:	str	r1, [r0]
   15e28:	mov	r0, #0
   15e2c:	pop	{fp, pc}
   15e30:	b	10df0 <calloc@plt>
   15e34:	cmp	r0, #0
   15e38:	movweq	r0, #1
   15e3c:	cmn	r0, #1
   15e40:	ble	15e48 <__mempcpy_chk@plt+0x4df4>
   15e44:	b	10f1c <malloc@plt>
   15e48:	push	{fp, lr}
   15e4c:	mov	fp, sp
   15e50:	bl	10f88 <__errno_location@plt>
   15e54:	mov	r1, #12
   15e58:	str	r1, [r0]
   15e5c:	mov	r0, #0
   15e60:	pop	{fp, pc}
   15e64:	push	{fp, lr}
   15e68:	mov	fp, sp
   15e6c:	cmp	r0, #0
   15e70:	beq	15e8c <__mempcpy_chk@plt+0x4e38>
   15e74:	cmp	r1, #0
   15e78:	beq	15e98 <__mempcpy_chk@plt+0x4e44>
   15e7c:	cmn	r1, #1
   15e80:	ble	15ea4 <__mempcpy_chk@plt+0x4e50>
   15e84:	pop	{fp, lr}
   15e88:	b	10e8c <realloc@plt>
   15e8c:	mov	r0, r1
   15e90:	pop	{fp, lr}
   15e94:	b	15e34 <__mempcpy_chk@plt+0x4de0>
   15e98:	bl	12788 <__mempcpy_chk@plt+0x1734>
   15e9c:	mov	r0, #0
   15ea0:	pop	{fp, pc}
   15ea4:	bl	10f88 <__errno_location@plt>
   15ea8:	mov	r1, #12
   15eac:	str	r1, [r0]
   15eb0:	mov	r0, #0
   15eb4:	pop	{fp, pc}
   15eb8:	push	{r4, r5, fp, lr}
   15ebc:	add	fp, sp, #8
   15ec0:	rsb	lr, r2, #64	; 0x40
   15ec4:	lsr	ip, r0, lr
   15ec8:	rsb	r3, lr, #32
   15ecc:	orr	ip, ip, r1, lsl r3
   15ed0:	rsb	r4, r2, #32
   15ed4:	cmp	r4, #0
   15ed8:	lsrge	ip, r1, r4
   15edc:	lsl	r3, r0, r2
   15ee0:	sub	r5, r2, #32
   15ee4:	cmp	r5, #0
   15ee8:	movwge	r3, #0
   15eec:	orr	ip, ip, r3
   15ef0:	lsr	r3, r0, r4
   15ef4:	orr	r2, r3, r1, lsl r2
   15ef8:	lslge	r2, r0, r5
   15efc:	lsr	r0, r1, lr
   15f00:	cmp	r4, #0
   15f04:	movwge	r0, #0
   15f08:	orr	r1, r0, r2
   15f0c:	mov	r0, ip
   15f10:	pop	{r4, r5, fp, pc}
   15f14:	push	{r4, r5, fp, lr}
   15f18:	add	fp, sp, #8
   15f1c:	lsr	ip, r0, r2
   15f20:	rsb	r3, r2, #32
   15f24:	orr	ip, ip, r1, lsl r3
   15f28:	sub	lr, r2, #32
   15f2c:	cmp	lr, #0
   15f30:	lsrge	ip, r1, lr
   15f34:	rsb	r4, r2, #64	; 0x40
   15f38:	lsl	r5, r0, r4
   15f3c:	cmp	r3, #0
   15f40:	movwge	r5, #0
   15f44:	orr	ip, r5, ip
   15f48:	rsb	r5, r4, #32
   15f4c:	lsr	r5, r0, r5
   15f50:	orr	r4, r5, r1, lsl r4
   15f54:	cmp	r3, #0
   15f58:	lslge	r4, r0, r3
   15f5c:	lsr	r0, r1, r2
   15f60:	cmp	lr, #0
   15f64:	movwge	r0, #0
   15f68:	orr	r1, r4, r0
   15f6c:	mov	r0, ip
   15f70:	pop	{r4, r5, fp, pc}
   15f74:	rsb	r1, r1, #32
   15f78:	ror	r0, r0, r1
   15f7c:	bx	lr
   15f80:	ror	r0, r0, r1
   15f84:	bx	lr
   15f88:	rsb	r1, r1, #32
   15f8c:	ror	r0, r0, r1
   15f90:	bx	lr
   15f94:	ror	r0, r0, r1
   15f98:	bx	lr
   15f9c:	and	r2, r1, #15
   15fa0:	lsl	r2, r0, r2
   15fa4:	rsb	r1, r1, #0
   15fa8:	and	r1, r1, #15
   15fac:	orr	r0, r2, r0, lsr r1
   15fb0:	uxth	r0, r0
   15fb4:	bx	lr
   15fb8:	and	r2, r1, #15
   15fbc:	lsr	r2, r0, r2
   15fc0:	rsb	r1, r1, #0
   15fc4:	and	r1, r1, #15
   15fc8:	orr	r0, r2, r0, lsl r1
   15fcc:	uxth	r0, r0
   15fd0:	bx	lr
   15fd4:	and	r2, r1, #7
   15fd8:	lsl	r2, r0, r2
   15fdc:	rsb	r1, r1, #0
   15fe0:	and	r1, r1, #7
   15fe4:	orr	r0, r2, r0, lsr r1
   15fe8:	uxtb	r0, r0
   15fec:	bx	lr
   15ff0:	and	r2, r1, #7
   15ff4:	lsr	r2, r0, r2
   15ff8:	rsb	r1, r1, #0
   15ffc:	and	r1, r1, #7
   16000:	orr	r0, r2, r0, lsl r1
   16004:	uxtb	r0, r0
   16008:	bx	lr
   1600c:	mov	r1, r0
   16010:	sub	r2, r0, #65	; 0x41
   16014:	mov	r0, #1
   16018:	cmp	r2, #26
   1601c:	subcs	r2, r1, #97	; 0x61
   16020:	cmpcs	r2, #26
   16024:	bcs	1602c <__mempcpy_chk@plt+0x4fd8>
   16028:	bx	lr
   1602c:	sub	r1, r1, #48	; 0x30
   16030:	cmp	r1, #10
   16034:	movcs	r0, #0
   16038:	bx	lr
   1603c:	mov	r1, r0
   16040:	sub	r2, r0, #65	; 0x41
   16044:	mov	r0, #1
   16048:	cmp	r2, #26
   1604c:	subcs	r1, r1, #97	; 0x61
   16050:	cmpcs	r1, #26
   16054:	movcs	r0, #0
   16058:	bx	lr
   1605c:	mov	r1, #0
   16060:	cmp	r0, #128	; 0x80
   16064:	movwcc	r1, #1
   16068:	mov	r0, r1
   1606c:	bx	lr
   16070:	sub	r1, r0, #9
   16074:	clz	r1, r1
   16078:	lsr	r1, r1, #5
   1607c:	sub	r0, r0, #32
   16080:	clz	r0, r0
   16084:	lsr	r0, r0, #5
   16088:	orr	r0, r0, r1
   1608c:	bx	lr
   16090:	mov	r1, r0
   16094:	mov	r0, #1
   16098:	cmp	r1, #32
   1609c:	bxcc	lr
   160a0:	cmp	r1, #127	; 0x7f
   160a4:	movne	r0, #0
   160a8:	bx	lr
   160ac:	sub	r1, r0, #48	; 0x30
   160b0:	mov	r0, #0
   160b4:	cmp	r1, #10
   160b8:	movwcc	r0, #1
   160bc:	bx	lr
   160c0:	sub	r1, r0, #33	; 0x21
   160c4:	mov	r0, #0
   160c8:	cmp	r1, #94	; 0x5e
   160cc:	movwcc	r0, #1
   160d0:	bx	lr
   160d4:	sub	r1, r0, #97	; 0x61
   160d8:	mov	r0, #0
   160dc:	cmp	r1, #26
   160e0:	movwcc	r0, #1
   160e4:	bx	lr
   160e8:	sub	r1, r0, #32
   160ec:	mov	r0, #0
   160f0:	cmp	r1, #95	; 0x5f
   160f4:	movwcc	r0, #1
   160f8:	bx	lr
   160fc:	sub	r1, r0, #33	; 0x21
   16100:	cmp	r1, #93	; 0x5d
   16104:	bhi	16290 <__mempcpy_chk@plt+0x523c>
   16108:	mov	r0, #1
   1610c:	add	r2, pc, #0
   16110:	ldr	pc, [r2, r1, lsl #2]
   16114:	andeq	r6, r1, ip, lsl #5
   16118:	andeq	r6, r1, ip, lsl #5
   1611c:	andeq	r6, r1, ip, lsl #5
   16120:	andeq	r6, r1, ip, lsl #5
   16124:	andeq	r6, r1, ip, lsl #5
   16128:	andeq	r6, r1, ip, lsl #5
   1612c:	andeq	r6, r1, ip, lsl #5
   16130:	andeq	r6, r1, ip, lsl #5
   16134:	andeq	r6, r1, ip, lsl #5
   16138:	andeq	r6, r1, ip, lsl #5
   1613c:	andeq	r6, r1, ip, lsl #5
   16140:	andeq	r6, r1, ip, lsl #5
   16144:	andeq	r6, r1, ip, lsl #5
   16148:	andeq	r6, r1, ip, lsl #5
   1614c:	andeq	r6, r1, ip, lsl #5
   16150:	muleq	r1, r0, r2
   16154:	muleq	r1, r0, r2
   16158:	muleq	r1, r0, r2
   1615c:	muleq	r1, r0, r2
   16160:	muleq	r1, r0, r2
   16164:	muleq	r1, r0, r2
   16168:	muleq	r1, r0, r2
   1616c:	muleq	r1, r0, r2
   16170:	muleq	r1, r0, r2
   16174:	muleq	r1, r0, r2
   16178:	andeq	r6, r1, ip, lsl #5
   1617c:	andeq	r6, r1, ip, lsl #5
   16180:	andeq	r6, r1, ip, lsl #5
   16184:	andeq	r6, r1, ip, lsl #5
   16188:	andeq	r6, r1, ip, lsl #5
   1618c:	andeq	r6, r1, ip, lsl #5
   16190:	andeq	r6, r1, ip, lsl #5
   16194:	muleq	r1, r0, r2
   16198:	muleq	r1, r0, r2
   1619c:	muleq	r1, r0, r2
   161a0:	muleq	r1, r0, r2
   161a4:	muleq	r1, r0, r2
   161a8:	muleq	r1, r0, r2
   161ac:	muleq	r1, r0, r2
   161b0:	muleq	r1, r0, r2
   161b4:	muleq	r1, r0, r2
   161b8:	muleq	r1, r0, r2
   161bc:	muleq	r1, r0, r2
   161c0:	muleq	r1, r0, r2
   161c4:	muleq	r1, r0, r2
   161c8:	muleq	r1, r0, r2
   161cc:	muleq	r1, r0, r2
   161d0:	muleq	r1, r0, r2
   161d4:	muleq	r1, r0, r2
   161d8:	muleq	r1, r0, r2
   161dc:	muleq	r1, r0, r2
   161e0:	muleq	r1, r0, r2
   161e4:	muleq	r1, r0, r2
   161e8:	muleq	r1, r0, r2
   161ec:	muleq	r1, r0, r2
   161f0:	muleq	r1, r0, r2
   161f4:	muleq	r1, r0, r2
   161f8:	muleq	r1, r0, r2
   161fc:	andeq	r6, r1, ip, lsl #5
   16200:	andeq	r6, r1, ip, lsl #5
   16204:	andeq	r6, r1, ip, lsl #5
   16208:	andeq	r6, r1, ip, lsl #5
   1620c:	andeq	r6, r1, ip, lsl #5
   16210:	andeq	r6, r1, ip, lsl #5
   16214:	muleq	r1, r0, r2
   16218:	muleq	r1, r0, r2
   1621c:	muleq	r1, r0, r2
   16220:	muleq	r1, r0, r2
   16224:	muleq	r1, r0, r2
   16228:	muleq	r1, r0, r2
   1622c:	muleq	r1, r0, r2
   16230:	muleq	r1, r0, r2
   16234:	muleq	r1, r0, r2
   16238:	muleq	r1, r0, r2
   1623c:	muleq	r1, r0, r2
   16240:	muleq	r1, r0, r2
   16244:	muleq	r1, r0, r2
   16248:	muleq	r1, r0, r2
   1624c:	muleq	r1, r0, r2
   16250:	muleq	r1, r0, r2
   16254:	muleq	r1, r0, r2
   16258:	muleq	r1, r0, r2
   1625c:	muleq	r1, r0, r2
   16260:	muleq	r1, r0, r2
   16264:	muleq	r1, r0, r2
   16268:	muleq	r1, r0, r2
   1626c:	muleq	r1, r0, r2
   16270:	muleq	r1, r0, r2
   16274:	muleq	r1, r0, r2
   16278:	muleq	r1, r0, r2
   1627c:	andeq	r6, r1, ip, lsl #5
   16280:	andeq	r6, r1, ip, lsl #5
   16284:	andeq	r6, r1, ip, lsl #5
   16288:	andeq	r6, r1, ip, lsl #5
   1628c:	bx	lr
   16290:	mov	r0, #0
   16294:	bx	lr
   16298:	sub	r0, r0, #9
   1629c:	cmp	r0, #23
   162a0:	movhi	r0, #0
   162a4:	bxhi	lr
   162a8:	bic	r0, r0, #-16777216	; 0xff000000
   162ac:	movw	r1, #31
   162b0:	movt	r1, #128	; 0x80
   162b4:	mov	r2, #1
   162b8:	and	r0, r2, r1, lsr r0
   162bc:	bx	lr
   162c0:	sub	r1, r0, #65	; 0x41
   162c4:	mov	r0, #0
   162c8:	cmp	r1, #26
   162cc:	movwcc	r0, #1
   162d0:	bx	lr
   162d4:	mov	r1, r0
   162d8:	sub	r2, r0, #48	; 0x30
   162dc:	mov	r0, #1
   162e0:	cmp	r2, #22
   162e4:	bhi	162fc <__mempcpy_chk@plt+0x52a8>
   162e8:	mov	ip, #1
   162ec:	movw	r3, #1023	; 0x3ff
   162f0:	movt	r3, #126	; 0x7e
   162f4:	tst	r3, ip, lsl r2
   162f8:	bxne	lr
   162fc:	sub	r1, r1, #97	; 0x61
   16300:	cmp	r1, #6
   16304:	movcs	r0, #0
   16308:	bxcs	lr
   1630c:	bx	lr
   16310:	sub	r1, r0, #65	; 0x41
   16314:	cmp	r1, #26
   16318:	addcc	r0, r0, #32
   1631c:	bx	lr
   16320:	sub	r1, r0, #97	; 0x61
   16324:	cmp	r1, #26
   16328:	subcc	r0, r0, #32
   1632c:	bx	lr
   16330:	push	{r4, r5, r6, sl, fp, lr}
   16334:	add	fp, sp, #16
   16338:	mov	r4, r0
   1633c:	bl	10eec <__fpending@plt>
   16340:	mov	r5, r0
   16344:	mov	r0, r4
   16348:	bl	10ef8 <ferror_unlocked@plt>
   1634c:	mov	r6, r0
   16350:	mov	r0, r4
   16354:	bl	163b8 <__mempcpy_chk@plt+0x5364>
   16358:	cmp	r6, #0
   1635c:	beq	1637c <__mempcpy_chk@plt+0x5328>
   16360:	mvn	r4, #0
   16364:	cmp	r0, #0
   16368:	bne	163b0 <__mempcpy_chk@plt+0x535c>
   1636c:	bl	10f88 <__errno_location@plt>
   16370:	mov	r1, #0
   16374:	str	r1, [r0]
   16378:	b	163b0 <__mempcpy_chk@plt+0x535c>
   1637c:	cmp	r0, #0
   16380:	mov	r4, r0
   16384:	mvnne	r4, #0
   16388:	cmp	r5, #0
   1638c:	bne	163b0 <__mempcpy_chk@plt+0x535c>
   16390:	cmp	r0, #0
   16394:	beq	163b0 <__mempcpy_chk@plt+0x535c>
   16398:	bl	10f88 <__errno_location@plt>
   1639c:	ldr	r0, [r0]
   163a0:	subs	r4, r0, #9
   163a4:	mvnne	r4, #0
   163a8:	mov	r0, r4
   163ac:	pop	{r4, r5, r6, sl, fp, pc}
   163b0:	mov	r0, r4
   163b4:	pop	{r4, r5, r6, sl, fp, pc}
   163b8:	push	{r4, r5, fp, lr}
   163bc:	add	fp, sp, #8
   163c0:	sub	sp, sp, #8
   163c4:	mov	r4, r0
   163c8:	bl	10fb8 <fileno@plt>
   163cc:	cmn	r0, #1
   163d0:	ble	16448 <__mempcpy_chk@plt+0x53f4>
   163d4:	mov	r0, r4
   163d8:	bl	10f34 <__freading@plt>
   163dc:	cmp	r0, #0
   163e0:	beq	1640c <__mempcpy_chk@plt+0x53b8>
   163e4:	mov	r0, r4
   163e8:	bl	10fb8 <fileno@plt>
   163ec:	mov	r1, #1
   163f0:	str	r1, [sp]
   163f4:	mov	r2, #0
   163f8:	mov	r3, #0
   163fc:	bl	10ed4 <lseek64@plt>
   16400:	and	r0, r0, r1
   16404:	cmn	r0, #1
   16408:	beq	16448 <__mempcpy_chk@plt+0x53f4>
   1640c:	mov	r0, r4
   16410:	bl	16458 <__mempcpy_chk@plt+0x5404>
   16414:	cmp	r0, #0
   16418:	beq	16448 <__mempcpy_chk@plt+0x53f4>
   1641c:	bl	10f88 <__errno_location@plt>
   16420:	ldr	r5, [r0]
   16424:	mov	r0, r4
   16428:	bl	10fd0 <fclose@plt>
   1642c:	cmp	r5, #0
   16430:	beq	16440 <__mempcpy_chk@plt+0x53ec>
   16434:	bl	10f88 <__errno_location@plt>
   16438:	str	r5, [r0]
   1643c:	mvn	r0, #0
   16440:	sub	sp, fp, #8
   16444:	pop	{r4, r5, fp, pc}
   16448:	mov	r0, r4
   1644c:	sub	sp, fp, #8
   16450:	pop	{r4, r5, fp, lr}
   16454:	b	10fd0 <fclose@plt>
   16458:	push	{r4, sl, fp, lr}
   1645c:	add	fp, sp, #8
   16460:	mov	r4, r0
   16464:	cmp	r0, #0
   16468:	beq	16480 <__mempcpy_chk@plt+0x542c>
   1646c:	mov	r0, r4
   16470:	bl	10f34 <__freading@plt>
   16474:	cmp	r0, #0
   16478:	movne	r0, r4
   1647c:	blne	1648c <__mempcpy_chk@plt+0x5438>
   16480:	mov	r0, r4
   16484:	pop	{r4, sl, fp, lr}
   16488:	b	10e20 <fflush@plt>
   1648c:	ldrb	r1, [r0, #1]
   16490:	tst	r1, #1
   16494:	bxeq	lr
   16498:	push	{fp, lr}
   1649c:	mov	fp, sp
   164a0:	sub	sp, sp, #8
   164a4:	mov	r1, #1
   164a8:	str	r1, [sp]
   164ac:	mov	r2, #0
   164b0:	mov	r3, #0
   164b4:	bl	164c0 <__mempcpy_chk@plt+0x546c>
   164b8:	mov	sp, fp
   164bc:	pop	{fp, pc}
   164c0:	push	{r4, r5, r6, r7, fp, lr}
   164c4:	add	fp, sp, #16
   164c8:	sub	sp, sp, #8
   164cc:	mov	r5, r3
   164d0:	mov	r6, r2
   164d4:	mov	r4, r0
   164d8:	ldr	r0, [r0, #4]
   164dc:	ldr	r1, [r4, #8]
   164e0:	cmp	r1, r0
   164e4:	bne	16500 <__mempcpy_chk@plt+0x54ac>
   164e8:	ldrd	r0, [r4, #16]
   164ec:	cmp	r1, r0
   164f0:	bne	16500 <__mempcpy_chk@plt+0x54ac>
   164f4:	ldr	r0, [r4, #36]	; 0x24
   164f8:	cmp	r0, #0
   164fc:	beq	16518 <__mempcpy_chk@plt+0x54c4>
   16500:	mov	r0, r4
   16504:	mov	r2, r6
   16508:	mov	r3, r5
   1650c:	sub	sp, fp, #16
   16510:	pop	{r4, r5, r6, r7, fp, lr}
   16514:	b	10fdc <fseeko64@plt>
   16518:	ldr	r7, [fp, #8]
   1651c:	mov	r0, r4
   16520:	bl	10fb8 <fileno@plt>
   16524:	str	r7, [sp]
   16528:	mov	r2, r6
   1652c:	mov	r3, r5
   16530:	bl	10ed4 <lseek64@plt>
   16534:	and	r2, r0, r1
   16538:	cmn	r2, #1
   1653c:	mvneq	r0, #0
   16540:	subeq	sp, fp, #16
   16544:	popeq	{r4, r5, r6, r7, fp, pc}
   16548:	strd	r0, [r4, #80]	; 0x50
   1654c:	ldr	r0, [r4]
   16550:	bic	r0, r0, #16
   16554:	str	r0, [r4]
   16558:	mov	r0, #0
   1655c:	sub	sp, fp, #16
   16560:	pop	{r4, r5, r6, r7, fp, pc}
   16564:	ldrb	r2, [r0]
   16568:	cmp	r2, #0
   1656c:	beq	16590 <__mempcpy_chk@plt+0x553c>
   16570:	add	r3, r0, #1
   16574:	mov	r0, #0
   16578:	ror	r0, r0, #23
   1657c:	uxtab	r0, r0, r2
   16580:	ldrb	r2, [r3], #1
   16584:	cmp	r2, #0
   16588:	bne	16578 <__mempcpy_chk@plt+0x5524>
   1658c:	b	16594 <__mempcpy_chk@plt+0x5540>
   16590:	mov	r0, #0
   16594:	udiv	r2, r0, r1
   16598:	mls	r0, r2, r1, r0
   1659c:	bx	lr
   165a0:	push	{fp, lr}
   165a4:	mov	fp, sp
   165a8:	bl	10f88 <__errno_location@plt>
   165ac:	mov	r1, #12
   165b0:	str	r1, [r0]
   165b4:	mov	r0, #0
   165b8:	pop	{fp, pc}
   165bc:	b	15e34 <__mempcpy_chk@plt+0x4de0>
   165c0:	cmp	r1, #0
   165c4:	orreq	r1, r1, #1
   165c8:	b	15e64 <__mempcpy_chk@plt+0x4e10>
   165cc:	b	15de0 <__mempcpy_chk@plt+0x4d8c>
   165d0:	clz	r3, r2
   165d4:	lsr	ip, r3, #5
   165d8:	clz	r3, r1
   165dc:	lsr	r3, r3, #5
   165e0:	orrs	r3, r3, ip
   165e4:	movwne	r1, #1
   165e8:	movwne	r2, #1
   165ec:	b	16688 <__mempcpy_chk@plt+0x5634>
   165f0:	push	{fp, lr}
   165f4:	mov	fp, sp
   165f8:	mov	r0, #14
   165fc:	bl	11000 <nl_langinfo@plt>
   16600:	movw	r1, #27248	; 0x6a70
   16604:	movt	r1, #1
   16608:	cmp	r0, #0
   1660c:	movne	r1, r0
   16610:	ldrb	r2, [r1]
   16614:	movw	r0, #30025	; 0x7549
   16618:	movt	r0, #1
   1661c:	cmp	r2, #0
   16620:	movne	r0, r1
   16624:	pop	{fp, pc}
   16628:	push	{r4, r5, r6, r7, fp, lr}
   1662c:	add	fp, sp, #16
   16630:	sub	sp, sp, #8
   16634:	mov	r7, r2
   16638:	mov	r4, r1
   1663c:	add	r5, sp, #4
   16640:	cmp	r0, #0
   16644:	movne	r5, r0
   16648:	mov	r0, r5
   1664c:	bl	10f04 <mbrtowc@plt>
   16650:	mov	r6, r0
   16654:	cmp	r7, #0
   16658:	beq	1667c <__mempcpy_chk@plt+0x5628>
   1665c:	cmn	r6, #2
   16660:	bcc	1667c <__mempcpy_chk@plt+0x5628>
   16664:	mov	r0, #0
   16668:	bl	166c4 <__mempcpy_chk@plt+0x5670>
   1666c:	cmp	r0, #0
   16670:	ldrbeq	r0, [r4]
   16674:	streq	r0, [r5]
   16678:	moveq	r6, #1
   1667c:	mov	r0, r6
   16680:	sub	sp, fp, #16
   16684:	pop	{r4, r5, r6, r7, fp, pc}
   16688:	cmp	r2, #0
   1668c:	beq	166bc <__mempcpy_chk@plt+0x5668>
   16690:	mvn	r3, #0
   16694:	udiv	r3, r3, r2
   16698:	cmp	r3, r1
   1669c:	bcs	166bc <__mempcpy_chk@plt+0x5668>
   166a0:	push	{fp, lr}
   166a4:	mov	fp, sp
   166a8:	bl	10f88 <__errno_location@plt>
   166ac:	mov	r1, #12
   166b0:	str	r1, [r0]
   166b4:	mov	r0, #0
   166b8:	pop	{fp, pc}
   166bc:	mul	r1, r2, r1
   166c0:	b	15e64 <__mempcpy_chk@plt+0x4e10>
   166c4:	push	{r4, sl, fp, lr}
   166c8:	add	fp, sp, #8
   166cc:	sub	sp, sp, #264	; 0x108
   166d0:	add	r1, sp, #7
   166d4:	movw	r2, #257	; 0x101
   166d8:	bl	16728 <__mempcpy_chk@plt+0x56d4>
   166dc:	mov	r4, #0
   166e0:	cmp	r0, #0
   166e4:	bne	1671c <__mempcpy_chk@plt+0x56c8>
   166e8:	add	r0, sp, #7
   166ec:	movw	r1, #30031	; 0x754f
   166f0:	movt	r1, #1
   166f4:	bl	10e14 <strcmp@plt>
   166f8:	cmp	r0, #0
   166fc:	beq	1671c <__mempcpy_chk@plt+0x56c8>
   16700:	add	r0, sp, #7
   16704:	movw	r1, #30033	; 0x7551
   16708:	movt	r1, #1
   1670c:	bl	10e14 <strcmp@plt>
   16710:	mov	r4, r0
   16714:	cmp	r0, #0
   16718:	movwne	r4, #1
   1671c:	mov	r0, r4
   16720:	sub	sp, fp, #8
   16724:	pop	{r4, sl, fp, pc}
   16728:	b	1672c <__mempcpy_chk@plt+0x56d8>
   1672c:	push	{r4, r5, r6, r7, fp, lr}
   16730:	add	fp, sp, #16
   16734:	mov	r6, r2
   16738:	mov	r4, r1
   1673c:	bl	167c8 <__mempcpy_chk@plt+0x5774>
   16740:	cmp	r0, #0
   16744:	beq	16774 <__mempcpy_chk@plt+0x5720>
   16748:	mov	r7, r0
   1674c:	bl	10f7c <strlen@plt>
   16750:	cmp	r0, r6
   16754:	bcs	16794 <__mempcpy_chk@plt+0x5740>
   16758:	add	r2, r0, #1
   1675c:	mov	r0, r4
   16760:	mov	r1, r7
   16764:	bl	10e5c <memcpy@plt>
   16768:	mov	r5, #0
   1676c:	mov	r0, r5
   16770:	pop	{r4, r5, r6, r7, fp, pc}
   16774:	mov	r5, #22
   16778:	cmp	r6, #0
   1677c:	movne	r0, #0
   16780:	strbne	r0, [r4]
   16784:	movne	r0, r5
   16788:	popne	{r4, r5, r6, r7, fp, pc}
   1678c:	mov	r0, r5
   16790:	pop	{r4, r5, r6, r7, fp, pc}
   16794:	mov	r5, #34	; 0x22
   16798:	cmp	r6, #0
   1679c:	beq	167bc <__mempcpy_chk@plt+0x5768>
   167a0:	sub	r6, r6, #1
   167a4:	mov	r0, r4
   167a8:	mov	r1, r7
   167ac:	mov	r2, r6
   167b0:	bl	10e5c <memcpy@plt>
   167b4:	mov	r0, #0
   167b8:	strb	r0, [r4, r6]
   167bc:	mov	r0, r5
   167c0:	pop	{r4, r5, r6, r7, fp, pc}
   167c4:	b	167c8 <__mempcpy_chk@plt+0x5774>
   167c8:	mov	r1, #0
   167cc:	b	10fe8 <setlocale@plt>
   167d0:	cmp	r3, #0
   167d4:	cmpeq	r2, #0
   167d8:	bne	167f0 <__mempcpy_chk@plt+0x579c>
   167dc:	cmp	r1, #0
   167e0:	cmpeq	r0, #0
   167e4:	mvnne	r1, #0
   167e8:	mvnne	r0, #0
   167ec:	b	1680c <__mempcpy_chk@plt+0x57b8>
   167f0:	sub	sp, sp, #8
   167f4:	push	{sp, lr}
   167f8:	bl	1681c <__mempcpy_chk@plt+0x57c8>
   167fc:	ldr	lr, [sp, #4]
   16800:	add	sp, sp, #8
   16804:	pop	{r2, r3}
   16808:	bx	lr
   1680c:	push	{r1, lr}
   16810:	mov	r0, #8
   16814:	bl	10e08 <raise@plt>
   16818:	pop	{r1, pc}
   1681c:	cmp	r1, r3
   16820:	cmpeq	r0, r2
   16824:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16828:	mov	r4, r0
   1682c:	movcc	r0, #0
   16830:	mov	r5, r1
   16834:	ldr	lr, [sp, #36]	; 0x24
   16838:	movcc	r1, r0
   1683c:	bcc	16938 <__mempcpy_chk@plt+0x58e4>
   16840:	cmp	r3, #0
   16844:	clzeq	ip, r2
   16848:	clzne	ip, r3
   1684c:	addeq	ip, ip, #32
   16850:	cmp	r5, #0
   16854:	clzeq	r1, r4
   16858:	addeq	r1, r1, #32
   1685c:	clzne	r1, r5
   16860:	sub	ip, ip, r1
   16864:	sub	sl, ip, #32
   16868:	lsl	r9, r3, ip
   1686c:	rsb	fp, ip, #32
   16870:	orr	r9, r9, r2, lsl sl
   16874:	orr	r9, r9, r2, lsr fp
   16878:	lsl	r8, r2, ip
   1687c:	cmp	r5, r9
   16880:	cmpeq	r4, r8
   16884:	movcc	r0, #0
   16888:	movcc	r1, r0
   1688c:	bcc	168a8 <__mempcpy_chk@plt+0x5854>
   16890:	mov	r0, #1
   16894:	subs	r4, r4, r8
   16898:	lsl	r1, r0, sl
   1689c:	orr	r1, r1, r0, lsr fp
   168a0:	lsl	r0, r0, ip
   168a4:	sbc	r5, r5, r9
   168a8:	cmp	ip, #0
   168ac:	beq	16938 <__mempcpy_chk@plt+0x58e4>
   168b0:	lsr	r6, r8, #1
   168b4:	orr	r6, r6, r9, lsl #31
   168b8:	lsr	r7, r9, #1
   168bc:	mov	r2, ip
   168c0:	b	168e4 <__mempcpy_chk@plt+0x5890>
   168c4:	subs	r3, r4, r6
   168c8:	sbc	r8, r5, r7
   168cc:	adds	r3, r3, r3
   168d0:	adc	r8, r8, r8
   168d4:	adds	r4, r3, #1
   168d8:	adc	r5, r8, #0
   168dc:	subs	r2, r2, #1
   168e0:	beq	16900 <__mempcpy_chk@plt+0x58ac>
   168e4:	cmp	r5, r7
   168e8:	cmpeq	r4, r6
   168ec:	bcs	168c4 <__mempcpy_chk@plt+0x5870>
   168f0:	adds	r4, r4, r4
   168f4:	adc	r5, r5, r5
   168f8:	subs	r2, r2, #1
   168fc:	bne	168e4 <__mempcpy_chk@plt+0x5890>
   16900:	lsr	r3, r4, ip
   16904:	orr	r3, r3, r5, lsl fp
   16908:	lsr	r2, r5, ip
   1690c:	orr	r3, r3, r5, lsr sl
   16910:	adds	r0, r0, r4
   16914:	mov	r4, r3
   16918:	lsl	r3, r2, ip
   1691c:	orr	r3, r3, r4, lsl sl
   16920:	lsl	ip, r4, ip
   16924:	orr	r3, r3, r4, lsr fp
   16928:	adc	r1, r1, r5
   1692c:	subs	r0, r0, ip
   16930:	mov	r5, r2
   16934:	sbc	r1, r1, r3
   16938:	cmp	lr, #0
   1693c:	strdne	r4, [lr]
   16940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16944:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16948:	mov	r7, r0
   1694c:	ldr	r6, [pc, #72]	; 1699c <__mempcpy_chk@plt+0x5948>
   16950:	ldr	r5, [pc, #72]	; 169a0 <__mempcpy_chk@plt+0x594c>
   16954:	add	r6, pc, r6
   16958:	add	r5, pc, r5
   1695c:	sub	r6, r6, r5
   16960:	mov	r8, r1
   16964:	mov	r9, r2
   16968:	bl	10dd0 <calloc@plt-0x20>
   1696c:	asrs	r6, r6, #2
   16970:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16974:	mov	r4, #0
   16978:	add	r4, r4, #1
   1697c:	ldr	r3, [r5], #4
   16980:	mov	r2, r9
   16984:	mov	r1, r8
   16988:	mov	r0, r7
   1698c:	blx	r3
   16990:	cmp	r6, r4
   16994:	bne	16978 <__mempcpy_chk@plt+0x5924>
   16998:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1699c:			; <UNDEFINED> instruction: 0x000115b0
   169a0:	andeq	r1, r1, r8, lsr #11
   169a4:	bx	lr
   169a8:	ldr	r3, [pc, #12]	; 169bc <__mempcpy_chk@plt+0x5968>
   169ac:	mov	r1, #0
   169b0:	add	r3, pc, r3
   169b4:	ldr	r2, [r3]
   169b8:	b	10f94 <__cxa_atexit@plt>
   169bc:	andeq	r1, r1, ip, lsr #14
   169c0:	mov	r2, r1
   169c4:	mov	r1, r0
   169c8:	mov	r0, #3
   169cc:	b	11018 <__xstat64@plt>

Disassembly of section .fini:

000169d0 <.fini>:
   169d0:	push	{r3, lr}
   169d4:	pop	{r3, pc}
