
../repos/coreutils/src/base32:     file format elf32-littlearm


Disassembly of section .init:

00010e60 <.init>:
   10e60:	push	{r3, lr}
   10e64:	bl	11144 <__assert_fail@plt+0x48>
   10e68:	pop	{r3, pc}

Disassembly of section .plt:

00010e6c <calloc@plt-0x14>:
   10e6c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e70:	ldr	lr, [pc, #4]	; 10e7c <calloc@plt-0x4>
   10e74:	add	lr, pc, lr
   10e78:	ldr	pc, [lr, #8]!
   10e7c:	andeq	r6, r1, r4, lsl #3

00010e80 <calloc@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #388]!	; 0x184

00010e8c <fputs_unlocked@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #380]!	; 0x17c

00010e98 <raise@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #372]!	; 0x174

00010ea4 <strcmp@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #364]!	; 0x16c

00010eb0 <posix_fadvise64@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #356]!	; 0x164

00010ebc <fflush@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #348]!	; 0x15c

00010ec8 <memmove@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #340]!	; 0x154

00010ed4 <free@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #332]!	; 0x14c

00010ee0 <_exit@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #324]!	; 0x144

00010eec <memcpy@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #316]!	; 0x13c

00010ef8 <mbsinit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #308]!	; 0x134

00010f04 <fwrite_unlocked@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #300]!	; 0x12c

00010f10 <fputc_unlocked@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #292]!	; 0x124

00010f1c <dcgettext@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #284]!	; 0x11c

00010f28 <realloc@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #276]!	; 0x114

00010f34 <textdomain@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #268]!	; 0x10c

00010f40 <iswprint@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #260]!	; 0x104

00010f4c <lseek64@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #252]!	; 0xfc

00010f58 <__ctype_get_mb_cur_max@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #244]!	; 0xf4

00010f64 <__fpending@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #236]!	; 0xec

00010f70 <ferror_unlocked@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #228]!	; 0xe4

00010f7c <mbrtowc@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #220]!	; 0xdc

00010f88 <error@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #212]!	; 0xd4

00010f94 <malloc@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #204]!	; 0xcc

00010fa0 <__libc_start_main@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #196]!	; 0xc4

00010fac <__freading@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #188]!	; 0xbc

00010fb8 <__gmon_start__@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #180]!	; 0xb4

00010fc4 <getopt_long@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #172]!	; 0xac

00010fd0 <__ctype_b_loc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #164]!	; 0xa4

00010fdc <exit@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #156]!	; 0x9c

00010fe8 <bcmp@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #148]!	; 0x94

00010ff4 <strlen@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #140]!	; 0x8c

00011000 <strchr@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #132]!	; 0x84

0001100c <__errno_location@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #124]!	; 0x7c

00011018 <__cxa_atexit@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #116]!	; 0x74

00011024 <memset@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #108]!	; 0x6c

00011030 <__printf_chk@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #100]!	; 0x64

0001103c <fileno@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #92]!	; 0x5c

00011048 <__fprintf_chk@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #84]!	; 0x54

00011054 <memchr@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #76]!	; 0x4c

00011060 <strtoimax@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #68]!	; 0x44

0001106c <fclose@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #60]!	; 0x3c

00011078 <fseeko64@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #90112	; 0x16000
   11080:	ldr	pc, [ip, #52]!	; 0x34

00011084 <setlocale@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #90112	; 0x16000
   1108c:	ldr	pc, [ip, #44]!	; 0x2c

00011090 <strrchr@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #90112	; 0x16000
   11098:	ldr	pc, [ip, #36]!	; 0x24

0001109c <nl_langinfo@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #28]!

000110a8 <fopen64@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #90112	; 0x16000
   110b0:	ldr	pc, [ip, #20]!

000110b4 <bindtextdomain@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #90112	; 0x16000
   110bc:	ldr	pc, [ip, #12]!

000110c0 <fread_unlocked@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #90112	; 0x16000
   110c8:	ldr	pc, [ip, #4]!

000110cc <fputs@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #86016	; 0x15000
   110d4:	ldr	pc, [ip, #4092]!	; 0xffc

000110d8 <strncmp@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #86016	; 0x15000
   110e0:	ldr	pc, [ip, #4084]!	; 0xff4

000110e4 <abort@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #86016	; 0x15000
   110ec:	ldr	pc, [ip, #4076]!	; 0xfec

000110f0 <feof_unlocked@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #86016	; 0x15000
   110f8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110fc <__assert_fail@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #86016	; 0x15000
   11104:	ldr	pc, [ip, #4060]!	; 0xfdc

Disassembly of section .text:

00011108 <.text>:
   11108:	mov	fp, #0
   1110c:	mov	lr, #0
   11110:	pop	{r1}		; (ldr r1, [sp], #4)
   11114:	mov	r2, sp
   11118:	push	{r2}		; (str r2, [sp, #-4]!)
   1111c:	push	{r0}		; (str r0, [sp, #-4]!)
   11120:	ldr	ip, [pc, #16]	; 11138 <__assert_fail@plt+0x3c>
   11124:	push	{ip}		; (str ip, [sp, #-4]!)
   11128:	ldr	r0, [pc, #12]	; 1113c <__assert_fail@plt+0x40>
   1112c:	ldr	r3, [pc, #12]	; 11140 <__assert_fail@plt+0x44>
   11130:	bl	10fa0 <__libc_start_main@plt>
   11134:	bl	110e4 <abort@plt>
   11138:			; <UNDEFINED> instruction: 0x000157b0
   1113c:	andeq	r1, r1, r0, lsr #9
   11140:	andeq	r5, r1, r0, asr r7
   11144:	ldr	r3, [pc, #20]	; 11160 <__assert_fail@plt+0x64>
   11148:	ldr	r2, [pc, #20]	; 11164 <__assert_fail@plt+0x68>
   1114c:	add	r3, pc, r3
   11150:	ldr	r2, [r3, r2]
   11154:	cmp	r2, #0
   11158:	bxeq	lr
   1115c:	b	10fb8 <__gmon_start__@plt>
   11160:	andeq	r5, r1, ip, lsr #29
   11164:	andeq	r0, r0, r4, ror #1
   11168:	ldr	r0, [pc, #24]	; 11188 <__assert_fail@plt+0x8c>
   1116c:	ldr	r3, [pc, #24]	; 1118c <__assert_fail@plt+0x90>
   11170:	cmp	r3, r0
   11174:	bxeq	lr
   11178:	ldr	r3, [pc, #16]	; 11190 <__assert_fail@plt+0x94>
   1117c:	cmp	r3, #0
   11180:	bxeq	lr
   11184:	bx	r3
   11188:	andeq	r7, r2, r8, lsr r1
   1118c:	andeq	r7, r2, r8, lsr r1
   11190:	andeq	r0, r0, r0
   11194:	ldr	r0, [pc, #36]	; 111c0 <__assert_fail@plt+0xc4>
   11198:	ldr	r1, [pc, #36]	; 111c4 <__assert_fail@plt+0xc8>
   1119c:	sub	r1, r1, r0
   111a0:	asr	r1, r1, #2
   111a4:	add	r1, r1, r1, lsr #31
   111a8:	asrs	r1, r1, #1
   111ac:	bxeq	lr
   111b0:	ldr	r3, [pc, #16]	; 111c8 <__assert_fail@plt+0xcc>
   111b4:	cmp	r3, #0
   111b8:	bxeq	lr
   111bc:	bx	r3
   111c0:	andeq	r7, r2, r8, lsr r1
   111c4:	andeq	r7, r2, r8, lsr r1
   111c8:	andeq	r0, r0, r0
   111cc:	push	{r4, lr}
   111d0:	ldr	r4, [pc, #24]	; 111f0 <__assert_fail@plt+0xf4>
   111d4:	ldrb	r3, [r4]
   111d8:	cmp	r3, #0
   111dc:	popne	{r4, pc}
   111e0:	bl	11168 <__assert_fail@plt+0x6c>
   111e4:	mov	r3, #1
   111e8:	strb	r3, [r4]
   111ec:	pop	{r4, pc}
   111f0:	andeq	r7, r2, ip, asr r1
   111f4:	b	11194 <__assert_fail@plt+0x98>
   111f8:	push	{fp, lr}
   111fc:	mov	fp, sp
   11200:	sub	sp, sp, #56	; 0x38
   11204:	mov	r8, r0
   11208:	cmp	r0, #0
   1120c:	bne	11460 <__assert_fail@plt+0x364>
   11210:	movw	r1, #22531	; 0x5803
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10f1c <dcgettext@plt>
   11224:	mov	r1, r0
   11228:	movw	r0, #29032	; 0x7168
   1122c:	movt	r0, #2
   11230:	ldr	r2, [r0]
   11234:	mov	r0, #1
   11238:	bl	11030 <__printf_chk@plt>
   1123c:	movw	r1, #22561	; 0x5821
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	movt	r1, #1
   1124c:	bl	10f1c <dcgettext@plt>
   11250:	mov	r1, r0
   11254:	mov	r0, #1
   11258:	mov	r2, #32
   1125c:	bl	11030 <__printf_chk@plt>
   11260:	movw	r1, #23351	; 0x5b37
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	movt	r1, #1
   11270:	bl	10f1c <dcgettext@plt>
   11274:	movw	r9, #29012	; 0x7154
   11278:	movt	r9, #2
   1127c:	ldr	r1, [r9]
   11280:	bl	10e8c <fputs_unlocked@plt>
   11284:	movw	r1, #23407	; 0x5b6f
   11288:	mov	r0, #0
   1128c:	mov	r2, #5
   11290:	movt	r1, #1
   11294:	bl	10f1c <dcgettext@plt>
   11298:	ldr	r1, [r9]
   1129c:	bl	10e8c <fputs_unlocked@plt>
   112a0:	movw	r1, #22631	; 0x5867
   112a4:	mov	r0, #0
   112a8:	mov	r2, #5
   112ac:	movt	r1, #1
   112b0:	bl	10f1c <dcgettext@plt>
   112b4:	ldr	r1, [r9]
   112b8:	bl	10e8c <fputs_unlocked@plt>
   112bc:	movw	r1, #22873	; 0x5959
   112c0:	mov	r0, #0
   112c4:	mov	r2, #5
   112c8:	movt	r1, #1
   112cc:	bl	10f1c <dcgettext@plt>
   112d0:	ldr	r1, [r9]
   112d4:	bl	10e8c <fputs_unlocked@plt>
   112d8:	movw	r1, #22918	; 0x5986
   112dc:	mov	r0, #0
   112e0:	mov	r2, #5
   112e4:	movt	r1, #1
   112e8:	bl	10f1c <dcgettext@plt>
   112ec:	ldr	r1, [r9]
   112f0:	bl	10e8c <fputs_unlocked@plt>
   112f4:	movw	r1, #22972	; 0x59bc
   112f8:	mov	r0, #0
   112fc:	mov	r2, #5
   11300:	movt	r1, #1
   11304:	bl	10f1c <dcgettext@plt>
   11308:	movw	r5, #23240	; 0x5ac8
   1130c:	mov	r1, r0
   11310:	mov	r0, #1
   11314:	movt	r5, #1
   11318:	mov	r2, r5
   1131c:	mov	r3, r5
   11320:	bl	11030 <__printf_chk@plt>
   11324:	movw	ip, #23992	; 0x5db8
   11328:	mov	r6, sp
   1132c:	movt	ip, #1
   11330:	mov	r1, r6
   11334:	ldm	ip!, {r2, r3, r4, r7}
   11338:	stmia	r1!, {r2, r3, r4, r7}
   1133c:	ldm	ip!, {r0, r2, r3, r4, r7}
   11340:	stmia	r1!, {r0, r2, r3, r4, r7}
   11344:	ldm	ip, {r0, r2, r3, r4, r7}
   11348:	stm	r1, {r0, r2, r3, r4, r7}
   1134c:	movw	r1, #23482	; 0x5bba
   11350:	movt	r1, #1
   11354:	mov	r0, r5
   11358:	bl	10ea4 <strcmp@plt>
   1135c:	cmp	r0, #0
   11360:	ldrne	r1, [r6, #8]!
   11364:	cmpne	r1, #0
   11368:	bne	11354 <__assert_fail@plt+0x258>
   1136c:	movw	r1, #23577	; 0x5c19
   11370:	ldr	r6, [r6, #4]
   11374:	mov	r0, #0
   11378:	mov	r2, #5
   1137c:	movt	r1, #1
   11380:	bl	10f1c <dcgettext@plt>
   11384:	movw	r2, #23301	; 0x5b05
   11388:	movw	r3, #23600	; 0x5c30
   1138c:	mov	r1, r0
   11390:	mov	r0, #1
   11394:	movt	r2, #1
   11398:	movt	r3, #1
   1139c:	bl	11030 <__printf_chk@plt>
   113a0:	cmp	r6, #0
   113a4:	mov	r0, #5
   113a8:	mov	r1, #0
   113ac:	moveq	r6, r5
   113b0:	bl	11084 <setlocale@plt>
   113b4:	cmp	r0, #0
   113b8:	beq	113f0 <__assert_fail@plt+0x2f4>
   113bc:	movw	r1, #23640	; 0x5c58
   113c0:	mov	r2, #3
   113c4:	movt	r1, #1
   113c8:	bl	110d8 <strncmp@plt>
   113cc:	cmp	r0, #0
   113d0:	beq	113f0 <__assert_fail@plt+0x2f4>
   113d4:	movw	r1, #23644	; 0x5c5c
   113d8:	mov	r0, #0
   113dc:	mov	r2, #5
   113e0:	movt	r1, #1
   113e4:	bl	10f1c <dcgettext@plt>
   113e8:	ldr	r1, [r9]
   113ec:	bl	10e8c <fputs_unlocked@plt>
   113f0:	movw	r1, #23715	; 0x5ca3
   113f4:	mov	r0, #0
   113f8:	mov	r2, #5
   113fc:	movt	r1, #1
   11400:	bl	10f1c <dcgettext@plt>
   11404:	movw	r2, #23600	; 0x5c30
   11408:	mov	r1, r0
   1140c:	mov	r0, #1
   11410:	mov	r3, r5
   11414:	movt	r2, #1
   11418:	bl	11030 <__printf_chk@plt>
   1141c:	movw	r1, #23742	; 0x5cbe
   11420:	mov	r0, #0
   11424:	mov	r2, #5
   11428:	movt	r1, #1
   1142c:	bl	10f1c <dcgettext@plt>
   11430:	mov	r1, r0
   11434:	movw	r0, #23510	; 0x5bd6
   11438:	movw	r3, #23792	; 0x5cf0
   1143c:	cmp	r6, r5
   11440:	mov	r2, r6
   11444:	movt	r0, #1
   11448:	movt	r3, #1
   1144c:	moveq	r3, r0
   11450:	mov	r0, #1
   11454:	bl	11030 <__printf_chk@plt>
   11458:	mov	r0, r8
   1145c:	bl	10fdc <exit@plt>
   11460:	movw	r0, #29000	; 0x7148
   11464:	movw	r1, #22492	; 0x57dc
   11468:	mov	r2, #5
   1146c:	movt	r0, #2
   11470:	movt	r1, #1
   11474:	ldr	r5, [r0]
   11478:	mov	r0, #0
   1147c:	bl	10f1c <dcgettext@plt>
   11480:	mov	r2, r0
   11484:	movw	r0, #29032	; 0x7168
   11488:	mov	r1, #1
   1148c:	movt	r0, #2
   11490:	ldr	r3, [r0]
   11494:	mov	r0, r5
   11498:	bl	11048 <__fprintf_chk@plt>
   1149c:	b	11458 <__assert_fail@plt+0x35c>
   114a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114a4:	add	fp, sp, #28
   114a8:	sub	sp, sp, #28
   114ac:	mov	r5, r0
   114b0:	ldr	r0, [r1]
   114b4:	mov	r4, r1
   114b8:	bl	12760 <__assert_fail@plt+0x1664>
   114bc:	movw	r1, #23792	; 0x5cf0
   114c0:	mov	r0, #6
   114c4:	movt	r1, #1
   114c8:	bl	11084 <setlocale@plt>
   114cc:	movw	r6, #23305	; 0x5b09
   114d0:	movw	r1, #23247	; 0x5acf
   114d4:	movt	r6, #1
   114d8:	movt	r1, #1
   114dc:	mov	r0, r6
   114e0:	bl	110b4 <bindtextdomain@plt>
   114e4:	mov	r0, r6
   114e8:	bl	10f34 <textdomain@plt>
   114ec:	movw	r0, #9332	; 0x2474
   114f0:	movt	r0, #1
   114f4:	bl	157b4 <__assert_fail@plt+0x46b8>
   114f8:	movw	r9, #23271	; 0x5ae7
   114fc:	movw	r7, #23896	; 0x5d58
   11500:	mov	r6, #76	; 0x4c
   11504:	mov	r8, #0
   11508:	mov	sl, #0
   1150c:	mov	r0, #0
   11510:	movt	r9, #1
   11514:	movt	r7, #1
   11518:	str	r0, [sp, #12]
   1151c:	mov	r0, r5
   11520:	mov	r1, r4
   11524:	mov	r2, r9
   11528:	mov	r3, r7
   1152c:	str	r8, [sp]
   11530:	bl	10fc4 <getopt_long@plt>
   11534:	cmp	r0, #99	; 0x63
   11538:	ble	115c0 <__assert_fail@plt+0x4c4>
   1153c:	cmp	r0, #100	; 0x64
   11540:	beq	115b0 <__assert_fail@plt+0x4b4>
   11544:	cmp	r0, #105	; 0x69
   11548:	beq	115b8 <__assert_fail@plt+0x4bc>
   1154c:	cmp	r0, #119	; 0x77
   11550:	bne	1167c <__assert_fail@plt+0x580>
   11554:	movw	r0, #29016	; 0x7158
   11558:	movw	r1, #23792	; 0x5cf0
   1155c:	mov	r2, #10
   11560:	add	r3, sp, #16
   11564:	movt	r0, #2
   11568:	movt	r1, #1
   1156c:	ldr	r0, [r0]
   11570:	str	r1, [sp]
   11574:	mov	r1, #0
   11578:	bl	14bc8 <__assert_fail@plt+0x3acc>
   1157c:	cmp	r0, #1
   11580:	bhi	11754 <__assert_fail@plt+0x658>
   11584:	ldr	r1, [sp, #20]
   11588:	cmn	r1, #1
   1158c:	ble	11754 <__assert_fail@plt+0x658>
   11590:	ldr	r2, [sp, #16]
   11594:	mvn	r3, #-2147483648	; 0x80000000
   11598:	subs	r3, r3, r2
   1159c:	rscs	r1, r1, #0
   115a0:	movwlt	r2, #0
   115a4:	subs	r6, r0, #1
   115a8:	movne	r6, r2
   115ac:	b	1151c <__assert_fail@plt+0x420>
   115b0:	mov	sl, #1
   115b4:	b	1151c <__assert_fail@plt+0x420>
   115b8:	mov	r0, #1
   115bc:	b	11518 <__assert_fail@plt+0x41c>
   115c0:	cmn	r0, #3
   115c4:	beq	115d8 <__assert_fail@plt+0x4dc>
   115c8:	cmn	r0, #2
   115cc:	bne	11620 <__assert_fail@plt+0x524>
   115d0:	mov	r0, #0
   115d4:	bl	111f8 <__assert_fail@plt+0xfc>
   115d8:	movw	r0, #28912	; 0x70f0
   115dc:	movw	r2, #23315	; 0x5b13
   115e0:	mov	r1, #0
   115e4:	movt	r0, #2
   115e8:	movt	r2, #1
   115ec:	str	r1, [sp, #4]
   115f0:	movw	r1, #23240	; 0x5ac8
   115f4:	movt	r1, #1
   115f8:	ldr	r3, [r0]
   115fc:	movw	r0, #29012	; 0x7154
   11600:	str	r2, [sp]
   11604:	movw	r2, #23301	; 0x5b05
   11608:	movt	r0, #2
   1160c:	movt	r2, #1
   11610:	ldr	r0, [r0]
   11614:	bl	14650 <__assert_fail@plt+0x3554>
   11618:	mov	r0, #0
   1161c:	bl	10fdc <exit@plt>
   11620:	cmn	r0, #1
   11624:	bne	1167c <__assert_fail@plt+0x580>
   11628:	movw	r7, #28992	; 0x7140
   1162c:	movt	r7, #2
   11630:	ldr	r0, [r7]
   11634:	sub	r1, r5, r0
   11638:	cmp	r1, #2
   1163c:	blt	11684 <__assert_fail@plt+0x588>
   11640:	movw	r1, #23331	; 0x5b23
   11644:	mov	r0, #0
   11648:	mov	r2, #5
   1164c:	movt	r1, #1
   11650:	bl	10f1c <dcgettext@plt>
   11654:	mov	r5, r0
   11658:	ldr	r0, [r7]
   1165c:	add	r0, r4, r0, lsl #2
   11660:	ldr	r0, [r0, #4]
   11664:	bl	1414c <__assert_fail@plt+0x3050>
   11668:	mov	r3, r0
   1166c:	mov	r0, #0
   11670:	mov	r1, #0
   11674:	mov	r2, r5
   11678:	bl	10f88 <error@plt>
   1167c:	mov	r0, #1
   11680:	bl	111f8 <__assert_fail@plt+0xfc>
   11684:	cmp	r0, r5
   11688:	bge	11694 <__assert_fail@plt+0x598>
   1168c:	ldr	r4, [r4, r0, lsl #2]
   11690:	b	1169c <__assert_fail@plt+0x5a0>
   11694:	movw	r4, #24417	; 0x5f61
   11698:	movt	r4, #1
   1169c:	movw	r1, #24417	; 0x5f61
   116a0:	mov	r0, r4
   116a4:	movt	r1, #1
   116a8:	bl	10ea4 <strcmp@plt>
   116ac:	cmp	r0, #0
   116b0:	bne	116c4 <__assert_fail@plt+0x5c8>
   116b4:	movw	r0, #29008	; 0x7150
   116b8:	movt	r0, #2
   116bc:	ldr	r5, [r0]
   116c0:	b	11710 <__assert_fail@plt+0x614>
   116c4:	movw	r1, #23348	; 0x5b34
   116c8:	mov	r0, r4
   116cc:	movt	r1, #1
   116d0:	bl	110a8 <fopen64@plt>
   116d4:	mov	r5, r0
   116d8:	cmp	r0, #0
   116dc:	bne	11710 <__assert_fail@plt+0x614>
   116e0:	bl	1100c <__errno_location@plt>
   116e4:	ldr	r5, [r0]
   116e8:	mov	r0, #0
   116ec:	mov	r1, #3
   116f0:	mov	r2, r4
   116f4:	bl	13fb8 <__assert_fail@plt+0x2ebc>
   116f8:	movw	r2, #23280	; 0x5af0
   116fc:	mov	r3, r0
   11700:	mov	r0, #1
   11704:	mov	r1, r5
   11708:	movt	r2, #1
   1170c:	bl	10f88 <error@plt>
   11710:	mov	r0, r5
   11714:	mov	r1, #2
   11718:	bl	12560 <__assert_fail@plt+0x1464>
   1171c:	movw	r0, #29012	; 0x7154
   11720:	tst	sl, #1
   11724:	movt	r0, #2
   11728:	ldr	r2, [r0]
   1172c:	beq	11744 <__assert_fail@plt+0x648>
   11730:	ldr	r0, [sp, #12]
   11734:	mov	r1, r4
   11738:	and	r3, r0, #1
   1173c:	mov	r0, r5
   11740:	bl	11798 <__assert_fail@plt+0x69c>
   11744:	mov	r0, r5
   11748:	mov	r1, r4
   1174c:	mov	r3, r6
   11750:	bl	119a8 <__assert_fail@plt+0x8ac>
   11754:	movw	r1, #23283	; 0x5af3
   11758:	mov	r0, #0
   1175c:	mov	r2, #5
   11760:	movt	r1, #1
   11764:	bl	10f1c <dcgettext@plt>
   11768:	mov	r4, r0
   1176c:	movw	r0, #29016	; 0x7158
   11770:	movt	r0, #2
   11774:	ldr	r0, [r0]
   11778:	bl	1414c <__assert_fail@plt+0x3050>
   1177c:	movw	r2, #23276	; 0x5aec
   11780:	str	r0, [sp]
   11784:	mov	r0, #1
   11788:	mov	r1, #0
   1178c:	mov	r3, r4
   11790:	movt	r2, #1
   11794:	bl	10f88 <error@plt>
   11798:	push	{fp, lr}
   1179c:	mov	fp, sp
   117a0:	sub	sp, sp, #40	; 0x28
   117a4:	add	ip, sp, #8
   117a8:	mov	r8, r0
   117ac:	mov	r0, #8192	; 0x2000
   117b0:	stm	ip, {r1, r2, r3}
   117b4:	bl	14758 <__assert_fail@plt+0x365c>
   117b8:	mov	r4, r0
   117bc:	mov	r0, #5120	; 0x1400
   117c0:	bl	14758 <__assert_fail@plt+0x365c>
   117c4:	mov	r9, r0
   117c8:	sub	r0, fp, #12
   117cc:	bl	11f30 <__assert_fail@plt+0xe34>
   117d0:	mov	sl, #0
   117d4:	str	r8, [sp, #20]
   117d8:	add	r5, r4, sl
   117dc:	rsb	r2, sl, #8192	; 0x2000
   117e0:	mov	r1, #1
   117e4:	mov	r3, r8
   117e8:	mov	r0, r5
   117ec:	bl	110c0 <fread_unlocked@plt>
   117f0:	mov	r8, r0
   117f4:	cmp	r0, #1
   117f8:	blt	11858 <__assert_fail@plt+0x75c>
   117fc:	ldr	r0, [sp, #16]
   11800:	cmp	r0, #0
   11804:	beq	11858 <__assert_fail@plt+0x75c>
   11808:	mov	r6, #0
   1180c:	add	r0, r6, sl
   11810:	ldrb	r7, [r4, r0]
   11814:	mov	r0, r7
   11818:	bl	11f10 <__assert_fail@plt+0xe14>
   1181c:	cmp	r0, #0
   11820:	bne	11844 <__assert_fail@plt+0x748>
   11824:	cmp	r7, #61	; 0x3d
   11828:	beq	11844 <__assert_fail@plt+0x748>
   1182c:	sub	r8, r8, #1
   11830:	add	r0, r5, r6
   11834:	sub	r2, r8, r6
   11838:	add	r1, r0, #1
   1183c:	bl	10ec8 <memmove@plt>
   11840:	b	11848 <__assert_fail@plt+0x74c>
   11844:	add	r6, r6, #1
   11848:	cmp	r8, #1
   1184c:	blt	11858 <__assert_fail@plt+0x75c>
   11850:	cmp	r6, r8
   11854:	blt	1180c <__assert_fail@plt+0x710>
   11858:	ldr	r0, [sp, #20]
   1185c:	bl	10f70 <ferror_unlocked@plt>
   11860:	cmp	r0, #0
   11864:	bne	11994 <__assert_fail@plt+0x898>
   11868:	add	sl, r8, sl
   1186c:	ldr	r8, [sp, #20]
   11870:	cmp	sl, #8192	; 0x2000
   11874:	bge	11888 <__assert_fail@plt+0x78c>
   11878:	mov	r0, r8
   1187c:	bl	110f0 <feof_unlocked@plt>
   11880:	cmp	r0, #0
   11884:	beq	117d8 <__assert_fail@plt+0x6dc>
   11888:	mov	r0, r8
   1188c:	bl	110f0 <feof_unlocked@plt>
   11890:	ldr	r5, [sp, #12]
   11894:	mov	r6, #0
   11898:	cmp	r6, #1
   1189c:	bne	118ac <__assert_fail@plt+0x7b0>
   118a0:	ldr	r0, [fp, #-12]
   118a4:	cmp	r0, #0
   118a8:	beq	11924 <__assert_fail@plt+0x828>
   118ac:	mov	r0, #5120	; 0x1400
   118b0:	cmp	r6, #0
   118b4:	mov	r2, #0
   118b8:	mov	r1, r4
   118bc:	mov	r3, r9
   118c0:	str	r0, [fp, #-16]
   118c4:	sub	r0, fp, #16
   118c8:	moveq	r2, sl
   118cc:	str	r0, [sp]
   118d0:	sub	r0, fp, #12
   118d4:	bl	11f3c <__assert_fail@plt+0xe40>
   118d8:	ldr	r2, [fp, #-16]
   118dc:	mov	r7, r0
   118e0:	mov	r0, r9
   118e4:	mov	r1, #1
   118e8:	mov	r3, r5
   118ec:	bl	10f04 <fwrite_unlocked@plt>
   118f0:	ldr	r1, [fp, #-16]
   118f4:	cmp	r0, r1
   118f8:	bcc	11944 <__assert_fail@plt+0x848>
   118fc:	cmp	r7, #0
   11900:	beq	11970 <__assert_fail@plt+0x874>
   11904:	mov	r0, r8
   11908:	bl	110f0 <feof_unlocked@plt>
   1190c:	cmp	r0, #0
   11910:	mov	r0, #2
   11914:	add	r6, r6, #1
   11918:	movweq	r0, #1
   1191c:	cmp	r6, r0
   11920:	bcc	11898 <__assert_fail@plt+0x79c>
   11924:	mov	r0, r8
   11928:	bl	110f0 <feof_unlocked@plt>
   1192c:	mov	sl, #0
   11930:	cmp	r0, #0
   11934:	beq	117d8 <__assert_fail@plt+0x6dc>
   11938:	ldr	r1, [sp, #8]
   1193c:	mov	r0, r8
   11940:	bl	11bb0 <__assert_fail@plt+0xab4>
   11944:	bl	1100c <__errno_location@plt>
   11948:	ldr	r4, [r0]
   1194c:	movw	r1, #23844	; 0x5d24
   11950:	movt	r1, #1
   11954:	mov	r0, #0
   11958:	mov	r2, #5
   1195c:	bl	10f1c <dcgettext@plt>
   11960:	mov	r2, r0
   11964:	mov	r0, #1
   11968:	mov	r1, r4
   1196c:	bl	10f88 <error@plt>
   11970:	movw	r1, #23856	; 0x5d30
   11974:	mov	r0, #0
   11978:	mov	r2, #5
   1197c:	movt	r1, #1
   11980:	bl	10f1c <dcgettext@plt>
   11984:	mov	r2, r0
   11988:	mov	r0, #1
   1198c:	mov	r1, #0
   11990:	bl	10f88 <error@plt>
   11994:	bl	1100c <__errno_location@plt>
   11998:	ldr	r4, [r0]
   1199c:	movw	r1, #23833	; 0x5d19
   119a0:	movt	r1, #1
   119a4:	b	11954 <__assert_fail@plt+0x858>
   119a8:	push	{fp, lr}
   119ac:	mov	fp, sp
   119b0:	sub	sp, sp, #16
   119b4:	mov	r5, r0
   119b8:	mov	r0, #30720	; 0x7800
   119bc:	str	r3, [fp, #-4]
   119c0:	stm	sp, {r1, r2}
   119c4:	bl	14758 <__assert_fail@plt+0x365c>
   119c8:	mov	r4, r0
   119cc:	mov	r0, #49152	; 0xc000
   119d0:	bl	14758 <__assert_fail@plt+0x365c>
   119d4:	mov	r7, r0
   119d8:	mov	sl, #0
   119dc:	str	r0, [sp, #8]
   119e0:	mov	r6, #0
   119e4:	add	r0, r4, r6
   119e8:	rsb	r2, r6, #30720	; 0x7800
   119ec:	mov	r1, #1
   119f0:	mov	r3, r5
   119f4:	bl	110c0 <fread_unlocked@plt>
   119f8:	add	r6, r0, r6
   119fc:	mov	r0, r5
   11a00:	bl	110f0 <feof_unlocked@plt>
   11a04:	cmp	r0, #0
   11a08:	bne	11a24 <__assert_fail@plt+0x928>
   11a0c:	mov	r0, r5
   11a10:	bl	10f70 <ferror_unlocked@plt>
   11a14:	cmp	r6, #30720	; 0x7800
   11a18:	bge	11a24 <__assert_fail@plt+0x928>
   11a1c:	cmp	r0, #0
   11a20:	beq	119e4 <__assert_fail@plt+0x8e8>
   11a24:	cmp	r6, #1
   11a28:	blt	11b04 <__assert_fail@plt+0xa08>
   11a2c:	movw	r1, #26215	; 0x6667
   11a30:	add	r0, r6, #4
   11a34:	mov	r2, r7
   11a38:	movt	r1, #26214	; 0x6666
   11a3c:	smmul	r0, r0, r1
   11a40:	lsr	r1, r0, #1
   11a44:	add	r0, r1, r0, lsr #31
   11a48:	mov	r1, r6
   11a4c:	lsl	r8, r0, #3
   11a50:	mov	r0, r4
   11a54:	mov	r3, r8
   11a58:	bl	11c40 <__assert_fail@plt+0xb44>
   11a5c:	ldr	r0, [fp, #-4]
   11a60:	cmp	r0, #0
   11a64:	beq	11ae0 <__assert_fail@plt+0x9e4>
   11a68:	mov	r7, #0
   11a6c:	ldr	r0, [fp, #-4]
   11a70:	sub	r9, r8, r7
   11a74:	sub	r0, r0, sl
   11a78:	cmp	r0, r9
   11a7c:	movlt	r9, r0
   11a80:	cmp	r9, #0
   11a84:	beq	11abc <__assert_fail@plt+0x9c0>
   11a88:	movw	r1, #29012	; 0x7154
   11a8c:	ldr	r0, [sp, #8]
   11a90:	mov	r2, r9
   11a94:	movt	r1, #2
   11a98:	ldr	r3, [r1]
   11a9c:	mov	r1, #1
   11aa0:	add	r0, r0, r7
   11aa4:	bl	10f04 <fwrite_unlocked@plt>
   11aa8:	cmp	r0, r9
   11aac:	bcc	11b54 <__assert_fail@plt+0xa58>
   11ab0:	add	r7, r9, r7
   11ab4:	add	sl, r9, sl
   11ab8:	b	11ad4 <__assert_fail@plt+0x9d8>
   11abc:	ldr	r1, [sp, #4]
   11ac0:	mov	r0, #10
   11ac4:	bl	10f10 <fputc_unlocked@plt>
   11ac8:	mov	sl, #0
   11acc:	cmn	r0, #1
   11ad0:	beq	11b54 <__assert_fail@plt+0xa58>
   11ad4:	cmp	r7, r8
   11ad8:	blt	11a6c <__assert_fail@plt+0x970>
   11adc:	b	11b04 <__assert_fail@plt+0xa08>
   11ae0:	movw	r0, #29012	; 0x7154
   11ae4:	mov	r1, #1
   11ae8:	mov	r2, r8
   11aec:	movt	r0, #2
   11af0:	ldr	r3, [r0]
   11af4:	mov	r0, r7
   11af8:	bl	10f04 <fwrite_unlocked@plt>
   11afc:	cmp	r0, r8
   11b00:	bcc	11b54 <__assert_fail@plt+0xa58>
   11b04:	mov	r0, r5
   11b08:	bl	110f0 <feof_unlocked@plt>
   11b0c:	ldr	r7, [sp, #8]
   11b10:	cmp	r0, #0
   11b14:	bne	11b2c <__assert_fail@plt+0xa30>
   11b18:	mov	r0, r5
   11b1c:	bl	10f70 <ferror_unlocked@plt>
   11b20:	cmp	r6, #30720	; 0x7800
   11b24:	cmpeq	r0, #0
   11b28:	beq	119e0 <__assert_fail@plt+0x8e4>
   11b2c:	ldr	r0, [fp, #-4]
   11b30:	cmp	r0, #0
   11b34:	beq	11b80 <__assert_fail@plt+0xa84>
   11b38:	cmp	sl, #1
   11b3c:	blt	11b80 <__assert_fail@plt+0xa84>
   11b40:	ldr	r1, [sp, #4]
   11b44:	mov	r0, #10
   11b48:	bl	10f10 <fputc_unlocked@plt>
   11b4c:	cmn	r0, #1
   11b50:	bne	11b80 <__assert_fail@plt+0xa84>
   11b54:	bl	1100c <__errno_location@plt>
   11b58:	ldr	r4, [r0]
   11b5c:	movw	r1, #23844	; 0x5d24
   11b60:	movt	r1, #1
   11b64:	mov	r0, #0
   11b68:	mov	r2, #5
   11b6c:	bl	10f1c <dcgettext@plt>
   11b70:	mov	r2, r0
   11b74:	mov	r0, #1
   11b78:	mov	r1, r4
   11b7c:	bl	10f88 <error@plt>
   11b80:	mov	r0, r5
   11b84:	bl	10f70 <ferror_unlocked@plt>
   11b88:	cmp	r0, #0
   11b8c:	bne	11b9c <__assert_fail@plt+0xaa0>
   11b90:	ldr	r1, [sp]
   11b94:	mov	r0, r5
   11b98:	bl	11bb0 <__assert_fail@plt+0xab4>
   11b9c:	bl	1100c <__errno_location@plt>
   11ba0:	ldr	r4, [r0]
   11ba4:	movw	r1, #23833	; 0x5d19
   11ba8:	movt	r1, #1
   11bac:	b	11b64 <__assert_fail@plt+0xa68>
   11bb0:	push	{fp, lr}
   11bb4:	mov	fp, sp
   11bb8:	mov	r5, r1
   11bbc:	bl	1259c <__assert_fail@plt+0x14a0>
   11bc0:	cmp	r0, #0
   11bc4:	bne	11bd0 <__assert_fail@plt+0xad4>
   11bc8:	mov	r0, #0
   11bcc:	bl	10fdc <exit@plt>
   11bd0:	movw	r1, #24417	; 0x5f61
   11bd4:	mov	r0, r5
   11bd8:	movt	r1, #1
   11bdc:	bl	10ea4 <strcmp@plt>
   11be0:	mov	r6, r0
   11be4:	bl	1100c <__errno_location@plt>
   11be8:	ldr	r4, [r0]
   11bec:	cmp	r6, #0
   11bf0:	bne	11c18 <__assert_fail@plt+0xb1c>
   11bf4:	movw	r1, #23870	; 0x5d3e
   11bf8:	mov	r0, #0
   11bfc:	mov	r2, #5
   11c00:	movt	r1, #1
   11c04:	bl	10f1c <dcgettext@plt>
   11c08:	mov	r2, r0
   11c0c:	mov	r0, #1
   11c10:	mov	r1, r4
   11c14:	bl	10f88 <error@plt>
   11c18:	mov	r0, #0
   11c1c:	mov	r1, #3
   11c20:	mov	r2, r5
   11c24:	bl	13fb8 <__assert_fail@plt+0x2ebc>
   11c28:	movw	r2, #23280	; 0x5af0
   11c2c:	mov	r3, r0
   11c30:	mov	r0, #1
   11c34:	mov	r1, r4
   11c38:	movt	r2, #1
   11c3c:	bl	10f88 <error@plt>
   11c40:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11c44:	add	fp, sp, #24
   11c48:	cmp	r1, #0
   11c4c:	cmpne	r3, #0
   11c50:	bne	11c68 <__assert_fail@plt+0xb6c>
   11c54:	cmp	r3, #0
   11c58:	beq	11c64 <__assert_fail@plt+0xb68>
   11c5c:	mov	r0, #0
   11c60:	strb	r0, [r2]
   11c64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11c68:	movw	r8, #24063	; 0x5dff
   11c6c:	add	r0, r0, #2
   11c70:	rsb	lr, r3, #0
   11c74:	mov	ip, #0
   11c78:	mov	r9, #0
   11c7c:	movt	r8, #1
   11c80:	ldrb	r3, [r0, #-2]
   11c84:	mov	r5, r2
   11c88:	add	r6, lr, r9
   11c8c:	ldrb	r3, [r8, r3, lsr #3]
   11c90:	strb	r3, [r5, r9]!
   11c94:	adds	r3, r6, #1
   11c98:	bcs	11c64 <__assert_fail@plt+0xb68>
   11c9c:	cmp	r1, #1
   11ca0:	ldrb	r3, [r0, #-2]
   11ca4:	mov	r4, #0
   11ca8:	add	r7, r6, #2
   11cac:	ldrbne	r4, [r0, #-1]
   11cb0:	lsl	r3, r3, #2
   11cb4:	lsrne	r4, r4, #6
   11cb8:	cmp	r7, #0
   11cbc:	add	r3, r4, r3
   11cc0:	and	r3, r3, #31
   11cc4:	ldrb	r3, [r8, r3]
   11cc8:	strb	r3, [r5, #1]
   11ccc:	beq	11c64 <__assert_fail@plt+0xb68>
   11cd0:	add	r7, r6, #3
   11cd4:	mov	r3, #61	; 0x3d
   11cd8:	cmp	r1, #1
   11cdc:	beq	11cec <__assert_fail@plt+0xbf0>
   11ce0:	ldrb	r3, [r0, #-1]
   11ce4:	ubfx	r3, r3, #1, #5
   11ce8:	ldrb	r3, [r8, r3]
   11cec:	cmp	r7, #0
   11cf0:	strb	r3, [r5, #2]
   11cf4:	beq	11c64 <__assert_fail@plt+0xb68>
   11cf8:	add	r7, r6, #4
   11cfc:	cmp	r1, #1
   11d00:	beq	11d20 <__assert_fail@plt+0xc24>
   11d04:	ldrb	r3, [r0, #-1]
   11d08:	subs	r1, r1, #2
   11d0c:	lsl	r3, r3, #4
   11d10:	beq	11d2c <__assert_fail@plt+0xc30>
   11d14:	ldrb	r4, [r0]
   11d18:	lsr	r4, r4, #4
   11d1c:	b	11d30 <__assert_fail@plt+0xc34>
   11d20:	mov	r3, #61	; 0x3d
   11d24:	mov	r1, #0
   11d28:	b	11d3c <__assert_fail@plt+0xc40>
   11d2c:	mov	r4, #0
   11d30:	add	r3, r4, r3
   11d34:	and	r3, r3, #31
   11d38:	ldrb	r3, [r8, r3]
   11d3c:	cmp	r7, #0
   11d40:	strb	r3, [r5, #3]
   11d44:	beq	11c64 <__assert_fail@plt+0xb68>
   11d48:	add	r7, r6, #5
   11d4c:	cmp	r1, #0
   11d50:	beq	11d70 <__assert_fail@plt+0xc74>
   11d54:	ldrb	r3, [r0]
   11d58:	subs	r1, r1, #1
   11d5c:	lsl	r3, r3, #1
   11d60:	beq	11d7c <__assert_fail@plt+0xc80>
   11d64:	ldrb	r4, [r0, #1]
   11d68:	lsr	r4, r4, #7
   11d6c:	b	11d80 <__assert_fail@plt+0xc84>
   11d70:	mov	r3, #61	; 0x3d
   11d74:	mov	r1, #0
   11d78:	b	11d8c <__assert_fail@plt+0xc90>
   11d7c:	mov	r4, #0
   11d80:	add	r3, r4, r3
   11d84:	and	r3, r3, #31
   11d88:	ldrb	r3, [r8, r3]
   11d8c:	cmp	r7, #0
   11d90:	strb	r3, [r5, #4]
   11d94:	beq	11c64 <__assert_fail@plt+0xb68>
   11d98:	add	r7, r6, #6
   11d9c:	cmp	r1, #0
   11da0:	beq	11db4 <__assert_fail@plt+0xcb8>
   11da4:	ldrb	r3, [r0, #1]
   11da8:	ubfx	r3, r3, #2, #5
   11dac:	ldrb	r3, [r8, r3]
   11db0:	b	11db8 <__assert_fail@plt+0xcbc>
   11db4:	mov	r3, #61	; 0x3d
   11db8:	cmp	r7, #0
   11dbc:	strb	r3, [r5, #5]
   11dc0:	beq	11c64 <__assert_fail@plt+0xb68>
   11dc4:	add	r7, r6, #7
   11dc8:	cmp	r1, #0
   11dcc:	beq	11dec <__assert_fail@plt+0xcf0>
   11dd0:	ldrb	r3, [r0, #1]
   11dd4:	subs	r1, r1, #1
   11dd8:	lsl	r3, r3, #3
   11ddc:	beq	11df8 <__assert_fail@plt+0xcfc>
   11de0:	ldrb	r4, [r0, #2]
   11de4:	lsr	r4, r4, #5
   11de8:	b	11dfc <__assert_fail@plt+0xd00>
   11dec:	mov	r3, #61	; 0x3d
   11df0:	mov	r1, #0
   11df4:	b	11e08 <__assert_fail@plt+0xd0c>
   11df8:	mov	r4, #0
   11dfc:	add	r3, r4, r3
   11e00:	and	r3, r3, #31
   11e04:	ldrb	r3, [r8, r3]
   11e08:	cmp	r7, #0
   11e0c:	strb	r3, [r5, #6]
   11e10:	beq	11c64 <__assert_fail@plt+0xb68>
   11e14:	cmp	r1, #0
   11e18:	beq	11e2c <__assert_fail@plt+0xd30>
   11e1c:	ldrb	r3, [r0, #2]
   11e20:	and	r3, r3, #31
   11e24:	ldrb	r3, [r8, r3]
   11e28:	b	11e30 <__assert_fail@plt+0xd34>
   11e2c:	mov	r3, #61	; 0x3d
   11e30:	cmn	r6, #8
   11e34:	strb	r3, [r5, #7]
   11e38:	beq	11c64 <__assert_fail@plt+0xb68>
   11e3c:	subs	r1, r1, #1
   11e40:	add	r9, r9, #8
   11e44:	adc	r3, ip, #0
   11e48:	cmp	r1, #0
   11e4c:	addne	r0, r0, #5
   11e50:	cmpne	r3, #0
   11e54:	bne	11c80 <__assert_fail@plt+0xb84>
   11e58:	add	r2, r2, r9
   11e5c:	b	11c5c <__assert_fail@plt+0xb60>
   11e60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11e64:	add	fp, sp, #24
   11e68:	mov	r8, r0
   11e6c:	movw	r0, #26215	; 0x6667
   11e70:	mov	r4, r1
   11e74:	mov	r6, r2
   11e78:	movt	r0, #26214	; 0x6666
   11e7c:	smmul	r0, r1, r0
   11e80:	asr	r1, r0, #1
   11e84:	add	r0, r1, r0, lsr #31
   11e88:	add	r1, r0, r0, lsl #2
   11e8c:	subs	r1, r4, r1
   11e90:	addne	r0, r0, #1
   11e94:	cmn	r0, #1
   11e98:	ble	11ea8 <__assert_fail@plt+0xdac>
   11e9c:	cmn	r0, #-268435455	; 0xf0000001
   11ea0:	ble	11ebc <__assert_fail@plt+0xdc0>
   11ea4:	b	11ef8 <__assert_fail@plt+0xdfc>
   11ea8:	beq	11ebc <__assert_fail@plt+0xdc0>
   11eac:	mov	r1, #-2147483648	; 0x80000000
   11eb0:	sdiv	r1, r1, r0
   11eb4:	cmp	r1, #8
   11eb8:	blt	11ef8 <__assert_fail@plt+0xdfc>
   11ebc:	cmn	r4, #1
   11ec0:	ble	11ef8 <__assert_fail@plt+0xdfc>
   11ec4:	lsl	r7, r0, #3
   11ec8:	orr	r5, r7, #1
   11ecc:	mov	r0, r5
   11ed0:	bl	1526c <__assert_fail@plt+0x4170>
   11ed4:	cmp	r0, #0
   11ed8:	str	r0, [r6]
   11edc:	beq	11f08 <__assert_fail@plt+0xe0c>
   11ee0:	mov	r2, r0
   11ee4:	mov	r0, r8
   11ee8:	mov	r1, r4
   11eec:	mov	r3, r5
   11ef0:	bl	11c40 <__assert_fail@plt+0xb44>
   11ef4:	b	11f00 <__assert_fail@plt+0xe04>
   11ef8:	mov	r7, #0
   11efc:	str	r7, [r6]
   11f00:	mov	r0, r7
   11f04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11f08:	mov	r7, r5
   11f0c:	b	11f00 <__assert_fail@plt+0xe04>
   11f10:	movw	r1, #24095	; 0x5e1f
   11f14:	movt	r1, #1
   11f18:	add	r0, r1, r0
   11f1c:	ldrsb	r1, [r0]
   11f20:	mov	r0, #0
   11f24:	cmn	r1, #1
   11f28:	movwgt	r0, #1
   11f2c:	bx	lr
   11f30:	mov	r1, #0
   11f34:	str	r1, [r0]
   11f38:	bx	lr
   11f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f40:	add	fp, sp, #28
   11f44:	sub	sp, sp, #28
   11f48:	mov	r6, r2
   11f4c:	mov	r2, r0
   11f50:	ldr	r0, [fp, #8]
   11f54:	str	r3, [sp, #24]
   11f58:	mov	r5, r1
   11f5c:	mov	r8, #0
   11f60:	cmp	r2, #0
   11f64:	ldr	r7, [r0]
   11f68:	mov	r0, #0
   11f6c:	str	r7, [sp, #20]
   11f70:	beq	11f88 <__assert_fail@plt+0xe8c>
   11f74:	clz	r0, r6
   11f78:	lsr	r8, r0, #5
   11f7c:	ldr	r0, [r2]
   11f80:	cmp	r0, #0
   11f84:	movwne	r0, #1
   11f88:	orr	r0, r0, r8
   11f8c:	add	sl, sp, #24
   11f90:	add	r4, sp, #20
   11f94:	str	r2, [sp, #16]
   11f98:	str	r0, [sp, #8]
   11f9c:	add	r0, r2, #4
   11fa0:	str	r0, [sp, #4]
   11fa4:	clz	r0, r2
   11fa8:	lsr	r0, r0, #5
   11fac:	str	r0, [sp, #12]
   11fb0:	ldr	r0, [sp, #8]
   11fb4:	cmp	r0, #0
   11fb8:	bne	11fec <__assert_fail@plt+0xef0>
   11fbc:	mov	r0, r5
   11fc0:	mov	r1, r6
   11fc4:	mov	r2, sl
   11fc8:	mov	r3, r4
   11fcc:	bl	1219c <__assert_fail@plt+0x10a0>
   11fd0:	cmp	r0, #0
   11fd4:	beq	11fe8 <__assert_fail@plt+0xeec>
   11fd8:	ldr	r7, [sp, #20]
   11fdc:	add	r5, r5, #8
   11fe0:	sub	r6, r6, #8
   11fe4:	b	11fbc <__assert_fail@plt+0xec0>
   11fe8:	ldr	r2, [sp, #16]
   11fec:	cmp	r6, #0
   11ff0:	mov	r0, r6
   11ff4:	movwne	r0, #1
   11ff8:	orr	r0, r8, r0
   11ffc:	cmp	r0, #1
   12000:	bne	12170 <__assert_fail@plt+0x1074>
   12004:	cmp	r6, #0
   12008:	beq	12024 <__assert_fail@plt+0xf28>
   1200c:	ldrb	r0, [r5]
   12010:	ldr	r1, [sp, #12]
   12014:	subs	r0, r0, #10
   12018:	movwne	r0, #1
   1201c:	orrs	r0, r0, r1
   12020:	beq	120e8 <__assert_fail@plt+0xfec>
   12024:	ldr	r0, [sp, #20]
   12028:	ldr	r1, [sp, #24]
   1202c:	add	r9, r5, r6
   12030:	cmp	r2, #0
   12034:	str	r7, [sp, #20]
   12038:	sub	r0, r0, r7
   1203c:	add	r0, r1, r0
   12040:	str	r0, [sp, #24]
   12044:	beq	120f4 <__assert_fail@plt+0xff8>
   12048:	ldr	r7, [r2]
   1204c:	cmp	r7, #0
   12050:	beq	12064 <__assert_fail@plt+0xf68>
   12054:	cmp	r7, #8
   12058:	bne	12090 <__assert_fail@plt+0xf94>
   1205c:	mov	r0, #0
   12060:	str	r0, [r2]
   12064:	sub	r0, r9, r5
   12068:	mov	r7, #0
   1206c:	cmp	r0, #8
   12070:	blt	12090 <__assert_fail@plt+0xf94>
   12074:	mov	r0, r5
   12078:	mov	r1, #10
   1207c:	mov	r2, #8
   12080:	bl	11054 <memchr@plt>
   12084:	ldr	r2, [sp, #16]
   12088:	cmp	r0, #0
   1208c:	beq	1215c <__assert_fail@plt+0x1060>
   12090:	cmp	r6, #1
   12094:	blt	120fc <__assert_fail@plt+0x1000>
   12098:	mov	r6, r7
   1209c:	mov	r0, r5
   120a0:	ldrb	r1, [r5], #1
   120a4:	cmp	r1, #10
   120a8:	bne	120b8 <__assert_fail@plt+0xfbc>
   120ac:	cmp	r5, r9
   120b0:	bcc	1209c <__assert_fail@plt+0xfa0>
   120b4:	b	120e0 <__assert_fail@plt+0xfe4>
   120b8:	add	r7, r6, #1
   120bc:	mov	r3, r2
   120c0:	add	r5, r0, #1
   120c4:	str	r7, [r3], r6
   120c8:	cmp	r5, r9
   120cc:	strb	r1, [r3, #4]
   120d0:	ldr	r6, [r2]
   120d4:	bcs	120e0 <__assert_fail@plt+0xfe4>
   120d8:	cmp	r6, #8
   120dc:	bne	1209c <__assert_fail@plt+0xfa0>
   120e0:	add	r5, r0, #1
   120e4:	b	12100 <__assert_fail@plt+0x1004>
   120e8:	sub	r6, r6, #1
   120ec:	add	r5, r5, #1
   120f0:	b	12154 <__assert_fail@plt+0x1058>
   120f4:	mov	r0, r5
   120f8:	b	12104 <__assert_fail@plt+0x1008>
   120fc:	mov	r6, r7
   12100:	ldr	r0, [sp, #4]
   12104:	mov	r1, #0
   12108:	cmp	r6, #0
   1210c:	beq	12174 <__assert_fail@plt+0x1078>
   12110:	ldr	r3, [sp, #12]
   12114:	cmp	r6, #7
   12118:	mov	r2, #0
   1211c:	movwgt	r2, #1
   12120:	orr	r2, r8, r2
   12124:	orr	r2, r2, r3
   12128:	cmp	r2, #1
   1212c:	bne	12174 <__assert_fail@plt+0x1078>
   12130:	mov	r1, r6
   12134:	mov	r2, sl
   12138:	mov	r3, r4
   1213c:	bl	1219c <__assert_fail@plt+0x10a0>
   12140:	cmp	r0, #0
   12144:	mov	r1, r6
   12148:	beq	12174 <__assert_fail@plt+0x1078>
   1214c:	ldr	r2, [sp, #16]
   12150:	sub	r6, r9, r5
   12154:	ldr	r7, [sp, #20]
   12158:	b	11fb0 <__assert_fail@plt+0xeb4>
   1215c:	add	r1, r5, #8
   12160:	mov	r0, r5
   12164:	mov	r6, #8
   12168:	mov	r5, r1
   1216c:	b	12130 <__assert_fail@plt+0x1034>
   12170:	mov	r1, r6
   12174:	ldr	r0, [fp, #8]
   12178:	ldr	r2, [sp, #20]
   1217c:	mov	r3, r0
   12180:	ldr	r0, [r0]
   12184:	sub	r0, r0, r2
   12188:	str	r0, [r3]
   1218c:	clz	r0, r1
   12190:	lsr	r0, r0, #5
   12194:	sub	sp, fp, #28
   12198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1219c:	push	{r4, r5, r6, sl, fp, lr}
   121a0:	add	fp, sp, #16
   121a4:	mov	ip, #0
   121a8:	cmp	r1, #8
   121ac:	blt	123b8 <__assert_fail@plt+0x12bc>
   121b0:	ldrb	r1, [r0]
   121b4:	movw	lr, #24095	; 0x5e1f
   121b8:	movt	lr, #1
   121bc:	add	r1, lr, r1
   121c0:	ldrsb	r4, [r1]
   121c4:	cmp	r4, #0
   121c8:	bmi	123b8 <__assert_fail@plt+0x12bc>
   121cc:	ldrb	r1, [r0, #1]
   121d0:	add	r1, lr, r1
   121d4:	ldrsb	r1, [r1]
   121d8:	cmp	r1, #0
   121dc:	bmi	123b8 <__assert_fail@plt+0x12bc>
   121e0:	ldr	r5, [r3]
   121e4:	ldr	ip, [r2]
   121e8:	cmp	r5, #0
   121ec:	beq	12210 <__assert_fail@plt+0x1114>
   121f0:	uxtb	r5, r1
   121f4:	lsr	r5, r5, #2
   121f8:	orr	r4, r5, r4, lsl #3
   121fc:	strb	r4, [ip], #1
   12200:	ldr	r4, [r3]
   12204:	sub	r5, r4, #1
   12208:	str	r5, [r3]
   1220c:	b	12214 <__assert_fail@plt+0x1118>
   12210:	mov	r5, #0
   12214:	ldrb	r4, [r0, #2]
   12218:	cmp	r4, #61	; 0x3d
   1221c:	bne	1223c <__assert_fail@plt+0x1140>
   12220:	ldrb	r1, [r0, #3]
   12224:	cmp	r1, #61	; 0x3d
   12228:	bne	123b0 <__assert_fail@plt+0x12b4>
   1222c:	ldrb	r1, [r0, #4]
   12230:	cmp	r1, #61	; 0x3d
   12234:	beq	1229c <__assert_fail@plt+0x11a0>
   12238:	b	123b0 <__assert_fail@plt+0x12b4>
   1223c:	add	r4, lr, r4
   12240:	ldrsb	r6, [r4]
   12244:	cmp	r6, #0
   12248:	bmi	123b0 <__assert_fail@plt+0x12b4>
   1224c:	ldrb	r4, [r0, #3]
   12250:	add	r4, lr, r4
   12254:	ldrsb	r4, [r4]
   12258:	cmn	r4, #1
   1225c:	ble	123b0 <__assert_fail@plt+0x12b4>
   12260:	cmp	r5, #0
   12264:	beq	1228c <__assert_fail@plt+0x1190>
   12268:	lsl	r5, r6, #1
   1226c:	orr	r1, r5, r1, lsl #6
   12270:	uxtb	r5, r4
   12274:	orr	r1, r1, r5, lsr #4
   12278:	strb	r1, [ip], #1
   1227c:	ldr	r1, [r3]
   12280:	sub	r5, r1, #1
   12284:	str	r5, [r3]
   12288:	b	12290 <__assert_fail@plt+0x1194>
   1228c:	mov	r5, #0
   12290:	ldrb	r1, [r0, #4]
   12294:	cmp	r1, #61	; 0x3d
   12298:	bne	122ac <__assert_fail@plt+0x11b0>
   1229c:	ldrb	r1, [r0, #5]
   122a0:	cmp	r1, #61	; 0x3d
   122a4:	beq	122f4 <__assert_fail@plt+0x11f8>
   122a8:	b	123b0 <__assert_fail@plt+0x12b4>
   122ac:	add	r1, lr, r1
   122b0:	ldrsb	r1, [r1]
   122b4:	cmn	r1, #1
   122b8:	ble	123b0 <__assert_fail@plt+0x12b4>
   122bc:	cmp	r5, #0
   122c0:	beq	122e4 <__assert_fail@plt+0x11e8>
   122c4:	uxtb	r5, r1
   122c8:	lsr	r5, r5, #1
   122cc:	orr	r4, r5, r4, lsl #4
   122d0:	strb	r4, [ip], #1
   122d4:	ldr	r4, [r3]
   122d8:	sub	r4, r4, #1
   122dc:	str	r4, [r3]
   122e0:	b	122e8 <__assert_fail@plt+0x11ec>
   122e4:	mov	r4, #0
   122e8:	ldrb	r5, [r0, #5]
   122ec:	cmp	r5, #61	; 0x3d
   122f0:	bne	12318 <__assert_fail@plt+0x121c>
   122f4:	ldrb	r1, [r0, #6]
   122f8:	cmp	r1, #61	; 0x3d
   122fc:	bne	123b0 <__assert_fail@plt+0x12b4>
   12300:	ldrb	r0, [r0, #7]
   12304:	cmp	r0, #61	; 0x3d
   12308:	bne	123b0 <__assert_fail@plt+0x12b4>
   1230c:	str	ip, [r2]
   12310:	mov	ip, #1
   12314:	b	123b8 <__assert_fail@plt+0x12bc>
   12318:	add	r5, lr, r5
   1231c:	ldrsb	r5, [r5]
   12320:	cmp	r5, #0
   12324:	bmi	123b0 <__assert_fail@plt+0x12b4>
   12328:	ldrb	r6, [r0, #6]
   1232c:	add	r6, lr, r6
   12330:	ldrsb	r6, [r6]
   12334:	cmn	r6, #1
   12338:	ble	123b0 <__assert_fail@plt+0x12b4>
   1233c:	cmp	r4, #0
   12340:	beq	12368 <__assert_fail@plt+0x126c>
   12344:	uxtb	r4, r6
   12348:	lsr	r4, r4, #3
   1234c:	orr	r4, r4, r5, lsl #2
   12350:	orr	r1, r4, r1, lsl #7
   12354:	strb	r1, [ip], #1
   12358:	ldr	r1, [r3]
   1235c:	sub	r1, r1, #1
   12360:	str	r1, [r3]
   12364:	b	1236c <__assert_fail@plt+0x1270>
   12368:	mov	r1, #0
   1236c:	ldrb	r4, [r0, #7]
   12370:	cmp	r4, #61	; 0x3d
   12374:	beq	1230c <__assert_fail@plt+0x1210>
   12378:	add	r4, lr, r4
   1237c:	ldrsb	r4, [r4]
   12380:	cmn	r4, #1
   12384:	ble	123b0 <__assert_fail@plt+0x12b4>
   12388:	cmp	r1, #0
   1238c:	beq	1230c <__assert_fail@plt+0x1210>
   12390:	ldrb	r0, [r0, #6]
   12394:	ldrb	r0, [lr, r0]
   12398:	orr	r0, r4, r0, lsl #5
   1239c:	strb	r0, [ip], #1
   123a0:	ldr	r0, [r3]
   123a4:	sub	r0, r0, #1
   123a8:	str	r0, [r3]
   123ac:	b	1230c <__assert_fail@plt+0x1210>
   123b0:	str	ip, [r2]
   123b4:	mov	ip, #0
   123b8:	mov	r0, ip
   123bc:	pop	{r4, r5, r6, sl, fp, pc}
   123c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   123c4:	add	fp, sp, #24
   123c8:	sub	sp, sp, #8
   123cc:	mov	r7, r0
   123d0:	asr	r0, r2, #3
   123d4:	mov	r4, r3
   123d8:	mov	r6, r2
   123dc:	mov	r8, r1
   123e0:	add	r0, r0, r0, lsl #2
   123e4:	add	r0, r0, #5
   123e8:	str	r0, [sp, #4]
   123ec:	bl	1526c <__assert_fail@plt+0x4170>
   123f0:	mov	r5, #1
   123f4:	cmp	r0, #0
   123f8:	str	r0, [r4]
   123fc:	beq	12448 <__assert_fail@plt+0x134c>
   12400:	mov	r3, r0
   12404:	add	r0, sp, #4
   12408:	mov	r1, r8
   1240c:	mov	r2, r6
   12410:	str	r0, [sp]
   12414:	mov	r0, r7
   12418:	bl	11f3c <__assert_fail@plt+0xe40>
   1241c:	cmp	r0, #0
   12420:	beq	12438 <__assert_fail@plt+0x133c>
   12424:	ldr	r0, [fp, #8]
   12428:	cmp	r0, #0
   1242c:	ldrne	r1, [sp, #4]
   12430:	strne	r1, [r0]
   12434:	b	12448 <__assert_fail@plt+0x134c>
   12438:	ldr	r0, [r4]
   1243c:	bl	12694 <__assert_fail@plt+0x1598>
   12440:	mov	r5, #0
   12444:	str	r5, [r4]
   12448:	mov	r0, r5
   1244c:	sub	sp, fp, #24
   12450:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12454:	movw	r1, #29024	; 0x7160
   12458:	movt	r1, #2
   1245c:	str	r0, [r1]
   12460:	bx	lr
   12464:	movw	r1, #29028	; 0x7164
   12468:	movt	r1, #2
   1246c:	strb	r0, [r1]
   12470:	bx	lr
   12474:	push	{r4, r5, r6, sl, fp, lr}
   12478:	add	fp, sp, #16
   1247c:	sub	sp, sp, #8
   12480:	movw	r0, #29012	; 0x7154
   12484:	movt	r0, #2
   12488:	ldr	r0, [r0]
   1248c:	bl	152ec <__assert_fail@plt+0x41f0>
   12490:	cmp	r0, #0
   12494:	beq	124bc <__assert_fail@plt+0x13c0>
   12498:	movw	r0, #29028	; 0x7164
   1249c:	movt	r0, #2
   124a0:	ldrb	r0, [r0]
   124a4:	cmp	r0, #0
   124a8:	beq	124dc <__assert_fail@plt+0x13e0>
   124ac:	bl	1100c <__errno_location@plt>
   124b0:	ldr	r0, [r0]
   124b4:	cmp	r0, #32
   124b8:	bne	124dc <__assert_fail@plt+0x13e0>
   124bc:	movw	r0, #29000	; 0x7148
   124c0:	movt	r0, #2
   124c4:	ldr	r0, [r0]
   124c8:	bl	152ec <__assert_fail@plt+0x41f0>
   124cc:	cmp	r0, #0
   124d0:	subeq	sp, fp, #16
   124d4:	popeq	{r4, r5, r6, sl, fp, pc}
   124d8:	b	1254c <__assert_fail@plt+0x1450>
   124dc:	movw	r1, #23844	; 0x5d24
   124e0:	mov	r0, #0
   124e4:	mov	r2, #5
   124e8:	movt	r1, #1
   124ec:	bl	10f1c <dcgettext@plt>
   124f0:	mov	r4, r0
   124f4:	movw	r0, #29024	; 0x7160
   124f8:	movt	r0, #2
   124fc:	ldr	r6, [r0]
   12500:	bl	1100c <__errno_location@plt>
   12504:	ldr	r5, [r0]
   12508:	cmp	r6, #0
   1250c:	bne	12528 <__assert_fail@plt+0x142c>
   12510:	movw	r2, #23280	; 0x5af0
   12514:	mov	r0, #0
   12518:	mov	r1, r5
   1251c:	mov	r3, r4
   12520:	movt	r2, #1
   12524:	b	12548 <__assert_fail@plt+0x144c>
   12528:	mov	r0, r6
   1252c:	bl	13f0c <__assert_fail@plt+0x2e10>
   12530:	movw	r2, #23276	; 0x5aec
   12534:	mov	r3, r0
   12538:	str	r4, [sp]
   1253c:	mov	r0, #0
   12540:	mov	r1, r5
   12544:	movt	r2, #1
   12548:	bl	10f88 <error@plt>
   1254c:	movw	r0, #28916	; 0x70f4
   12550:	movt	r0, #2
   12554:	ldr	r0, [r0]
   12558:	bl	10ee0 <_exit@plt>
   1255c:	b	10eb0 <posix_fadvise64@plt>
   12560:	cmp	r0, #0
   12564:	bxeq	lr
   12568:	push	{r4, sl, fp, lr}
   1256c:	add	fp, sp, #8
   12570:	sub	sp, sp, #16
   12574:	mov	r4, r1
   12578:	bl	1103c <fileno@plt>
   1257c:	mov	r1, #0
   12580:	mov	r2, #0
   12584:	mov	r3, #0
   12588:	str	r1, [sp]
   1258c:	stmib	sp, {r1, r4}
   12590:	bl	10eb0 <posix_fadvise64@plt>
   12594:	sub	sp, fp, #8
   12598:	pop	{r4, sl, fp, pc}
   1259c:	push	{r4, r5, r6, sl, fp, lr}
   125a0:	add	fp, sp, #16
   125a4:	sub	sp, sp, #8
   125a8:	mov	r4, r0
   125ac:	bl	1103c <fileno@plt>
   125b0:	cmn	r0, #1
   125b4:	ble	12628 <__assert_fail@plt+0x152c>
   125b8:	mov	r0, r4
   125bc:	bl	10fac <__freading@plt>
   125c0:	cmp	r0, #0
   125c4:	beq	125f0 <__assert_fail@plt+0x14f4>
   125c8:	mov	r0, r4
   125cc:	bl	1103c <fileno@plt>
   125d0:	mov	r1, #1
   125d4:	mov	r2, #0
   125d8:	mov	r3, #0
   125dc:	str	r1, [sp]
   125e0:	bl	10f4c <lseek64@plt>
   125e4:	and	r0, r0, r1
   125e8:	cmn	r0, #1
   125ec:	beq	12628 <__assert_fail@plt+0x152c>
   125f0:	mov	r0, r4
   125f4:	bl	12638 <__assert_fail@plt+0x153c>
   125f8:	cmp	r0, #0
   125fc:	beq	12628 <__assert_fail@plt+0x152c>
   12600:	bl	1100c <__errno_location@plt>
   12604:	ldr	r6, [r0]
   12608:	mov	r5, r0
   1260c:	mov	r0, r4
   12610:	bl	1106c <fclose@plt>
   12614:	cmp	r6, #0
   12618:	strne	r6, [r5]
   1261c:	mvnne	r0, #0
   12620:	sub	sp, fp, #16
   12624:	pop	{r4, r5, r6, sl, fp, pc}
   12628:	mov	r0, r4
   1262c:	sub	sp, fp, #16
   12630:	pop	{r4, r5, r6, sl, fp, lr}
   12634:	b	1106c <fclose@plt>
   12638:	push	{r4, sl, fp, lr}
   1263c:	add	fp, sp, #8
   12640:	sub	sp, sp, #8
   12644:	mov	r4, r0
   12648:	cmp	r0, #0
   1264c:	beq	12684 <__assert_fail@plt+0x1588>
   12650:	mov	r0, r4
   12654:	bl	10fac <__freading@plt>
   12658:	cmp	r0, #0
   1265c:	beq	12684 <__assert_fail@plt+0x1588>
   12660:	ldrb	r0, [r4, #1]
   12664:	tst	r0, #1
   12668:	beq	12684 <__assert_fail@plt+0x1588>
   1266c:	mov	r0, #1
   12670:	mov	r2, #0
   12674:	mov	r3, #0
   12678:	str	r0, [sp]
   1267c:	mov	r0, r4
   12680:	bl	126bc <__assert_fail@plt+0x15c0>
   12684:	mov	r0, r4
   12688:	sub	sp, fp, #8
   1268c:	pop	{r4, sl, fp, lr}
   12690:	b	10ebc <fflush@plt>
   12694:	push	{r4, r5, r6, sl, fp, lr}
   12698:	add	fp, sp, #16
   1269c:	mov	r4, r0
   126a0:	bl	1100c <__errno_location@plt>
   126a4:	ldr	r6, [r0]
   126a8:	mov	r5, r0
   126ac:	mov	r0, r4
   126b0:	bl	10ed4 <free@plt>
   126b4:	str	r6, [r5]
   126b8:	pop	{r4, r5, r6, sl, fp, pc}
   126bc:	push	{r4, r5, r6, r7, fp, lr}
   126c0:	add	fp, sp, #16
   126c4:	sub	sp, sp, #8
   126c8:	mov	r4, r0
   126cc:	ldr	r0, [r0, #4]
   126d0:	mov	r5, r3
   126d4:	mov	r6, r2
   126d8:	ldr	r1, [r4, #8]
   126dc:	cmp	r1, r0
   126e0:	bne	126fc <__assert_fail@plt+0x1600>
   126e4:	ldrd	r0, [r4, #16]
   126e8:	cmp	r1, r0
   126ec:	bne	126fc <__assert_fail@plt+0x1600>
   126f0:	ldr	r0, [r4, #36]	; 0x24
   126f4:	cmp	r0, #0
   126f8:	beq	12714 <__assert_fail@plt+0x1618>
   126fc:	mov	r0, r4
   12700:	mov	r2, r6
   12704:	mov	r3, r5
   12708:	sub	sp, fp, #16
   1270c:	pop	{r4, r5, r6, r7, fp, lr}
   12710:	b	11078 <fseeko64@plt>
   12714:	ldr	r7, [fp, #8]
   12718:	mov	r0, r4
   1271c:	bl	1103c <fileno@plt>
   12720:	mov	r2, r6
   12724:	mov	r3, r5
   12728:	str	r7, [sp]
   1272c:	bl	10f4c <lseek64@plt>
   12730:	and	r2, r0, r1
   12734:	cmn	r2, #1
   12738:	beq	12754 <__assert_fail@plt+0x1658>
   1273c:	strd	r0, [r4, #80]	; 0x50
   12740:	ldr	r0, [r4]
   12744:	bic	r0, r0, #16
   12748:	str	r0, [r4]
   1274c:	mov	r0, #0
   12750:	b	12758 <__assert_fail@plt+0x165c>
   12754:	mvn	r0, #0
   12758:	sub	sp, fp, #16
   1275c:	pop	{r4, r5, r6, r7, fp, pc}
   12760:	push	{r4, r5, fp, lr}
   12764:	add	fp, sp, #8
   12768:	cmp	r0, #0
   1276c:	beq	12800 <__assert_fail@plt+0x1704>
   12770:	mov	r1, #47	; 0x2f
   12774:	mov	r4, r0
   12778:	bl	11090 <strrchr@plt>
   1277c:	cmp	r0, #0
   12780:	mov	r5, r4
   12784:	addne	r5, r0, #1
   12788:	sub	r0, r5, r4
   1278c:	cmp	r0, #7
   12790:	blt	127e4 <__assert_fail@plt+0x16e8>
   12794:	movw	r1, #24407	; 0x5f57
   12798:	sub	r0, r5, #7
   1279c:	mov	r2, #7
   127a0:	movt	r1, #1
   127a4:	bl	110d8 <strncmp@plt>
   127a8:	cmp	r0, #0
   127ac:	bne	127e4 <__assert_fail@plt+0x16e8>
   127b0:	movw	r1, #24415	; 0x5f5f
   127b4:	mov	r0, r5
   127b8:	mov	r2, #3
   127bc:	movt	r1, #1
   127c0:	bl	110d8 <strncmp@plt>
   127c4:	cmp	r0, #0
   127c8:	beq	127d4 <__assert_fail@plt+0x16d8>
   127cc:	mov	r4, r5
   127d0:	b	127e4 <__assert_fail@plt+0x16e8>
   127d4:	movw	r0, #28984	; 0x7138
   127d8:	add	r4, r5, #3
   127dc:	movt	r0, #2
   127e0:	str	r4, [r0]
   127e4:	movw	r0, #28988	; 0x713c
   127e8:	movt	r0, #2
   127ec:	str	r4, [r0]
   127f0:	movw	r0, #29032	; 0x7168
   127f4:	movt	r0, #2
   127f8:	str	r4, [r0]
   127fc:	pop	{r4, r5, fp, pc}
   12800:	movw	r0, #29000	; 0x7148
   12804:	movt	r0, #2
   12808:	ldr	r1, [r0]
   1280c:	movw	r0, #24351	; 0x5f1f
   12810:	movt	r0, #1
   12814:	bl	110cc <fputs@plt>
   12818:	bl	110e4 <abort@plt>
   1281c:	push	{r4, r5, r6, sl, fp, lr}
   12820:	add	fp, sp, #16
   12824:	mov	r4, r0
   12828:	movw	r0, #29040	; 0x7170
   1282c:	movt	r0, #2
   12830:	cmp	r4, #0
   12834:	moveq	r4, r0
   12838:	bl	1100c <__errno_location@plt>
   1283c:	ldr	r6, [r0]
   12840:	mov	r5, r0
   12844:	mov	r0, r4
   12848:	mov	r1, #48	; 0x30
   1284c:	bl	14aa8 <__assert_fail@plt+0x39ac>
   12850:	str	r6, [r5]
   12854:	pop	{r4, r5, r6, sl, fp, pc}
   12858:	movw	r1, #29040	; 0x7170
   1285c:	cmp	r0, #0
   12860:	movt	r1, #2
   12864:	movne	r1, r0
   12868:	ldr	r0, [r1]
   1286c:	bx	lr
   12870:	movw	r2, #29040	; 0x7170
   12874:	cmp	r0, #0
   12878:	movt	r2, #2
   1287c:	movne	r2, r0
   12880:	str	r1, [r2]
   12884:	bx	lr
   12888:	movw	r3, #29040	; 0x7170
   1288c:	cmp	r0, #0
   12890:	and	r2, r2, #1
   12894:	movt	r3, #2
   12898:	movne	r3, r0
   1289c:	ubfx	r0, r1, #5, #3
   128a0:	and	r1, r1, #31
   128a4:	add	ip, r3, r0, lsl #2
   128a8:	mov	r0, #1
   128ac:	ldr	r3, [ip, #8]
   128b0:	and	r0, r0, r3, lsr r1
   128b4:	eor	r2, r0, r2
   128b8:	eor	r1, r3, r2, lsl r1
   128bc:	str	r1, [ip, #8]
   128c0:	bx	lr
   128c4:	movw	r2, #29040	; 0x7170
   128c8:	cmp	r0, #0
   128cc:	movt	r2, #2
   128d0:	movne	r2, r0
   128d4:	ldr	r0, [r2, #4]
   128d8:	str	r1, [r2, #4]
   128dc:	bx	lr
   128e0:	push	{fp, lr}
   128e4:	mov	fp, sp
   128e8:	movw	r3, #29040	; 0x7170
   128ec:	cmp	r0, #0
   128f0:	movt	r3, #2
   128f4:	movne	r3, r0
   128f8:	cmp	r1, #0
   128fc:	mov	r0, #10
   12900:	cmpne	r2, #0
   12904:	str	r0, [r3]
   12908:	bne	12910 <__assert_fail@plt+0x1814>
   1290c:	bl	110e4 <abort@plt>
   12910:	str	r1, [r3, #40]	; 0x28
   12914:	str	r2, [r3, #44]	; 0x2c
   12918:	pop	{fp, pc}
   1291c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12920:	add	fp, sp, #28
   12924:	sub	sp, sp, #20
   12928:	mov	r7, r0
   1292c:	ldr	r0, [fp, #8]
   12930:	movw	r5, #29040	; 0x7170
   12934:	mov	r8, r3
   12938:	mov	r9, r2
   1293c:	mov	sl, r1
   12940:	movt	r5, #2
   12944:	cmp	r0, #0
   12948:	movne	r5, r0
   1294c:	bl	1100c <__errno_location@plt>
   12950:	ldr	r2, [r5, #40]	; 0x28
   12954:	ldr	r3, [r5, #44]	; 0x2c
   12958:	mov	r4, r0
   1295c:	ldm	r5, {r0, r1}
   12960:	add	r5, r5, #8
   12964:	ldr	r6, [r4]
   12968:	stm	sp, {r0, r1, r5}
   1296c:	mov	r0, r7
   12970:	mov	r1, sl
   12974:	str	r2, [sp, #12]
   12978:	str	r3, [sp, #16]
   1297c:	mov	r2, r9
   12980:	mov	r3, r8
   12984:	bl	12994 <__assert_fail@plt+0x1898>
   12988:	str	r6, [r4]
   1298c:	sub	sp, fp, #28
   12990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12998:	add	fp, sp, #28
   1299c:	sub	sp, sp, #156	; 0x9c
   129a0:	mov	r5, r0
   129a4:	add	r0, r2, #1
   129a8:	mov	r6, r1
   129ac:	mov	sl, r3
   129b0:	str	r2, [fp, #-80]	; 0xffffffb0
   129b4:	str	r0, [sp, #72]	; 0x48
   129b8:	ldr	r0, [fp, #12]
   129bc:	and	r1, r0, #1
   129c0:	str	r1, [sp, #32]
   129c4:	and	r1, r0, #4
   129c8:	str	r1, [sp, #28]
   129cc:	ubfx	r9, r0, #1, #1
   129d0:	bl	10f58 <__ctype_get_mb_cur_max@plt>
   129d4:	str	r0, [sp, #40]	; 0x28
   129d8:	ldr	r0, [fp, #24]
   129dc:	ldr	r7, [fp, #8]
   129e0:	mov	r1, #0
   129e4:	mov	lr, #0
   129e8:	str	r5, [fp, #-84]	; 0xffffffac
   129ec:	str	r1, [sp, #60]	; 0x3c
   129f0:	mov	r1, #1
   129f4:	str	r1, [fp, #-48]	; 0xffffffd0
   129f8:	str	r0, [sp, #80]	; 0x50
   129fc:	ldr	r0, [fp, #20]
   12a00:	str	r0, [sp, #76]	; 0x4c
   12a04:	mov	r0, #0
   12a08:	str	r0, [sp, #56]	; 0x38
   12a0c:	mov	r0, #0
   12a10:	str	r0, [fp, #-88]	; 0xffffffa8
   12a14:	mov	r0, #0
   12a18:	str	r0, [fp, #-72]	; 0xffffffb8
   12a1c:	mov	r0, #0
   12a20:	cmp	r7, #10
   12a24:	bhi	13a00 <__assert_fail@plt+0x2904>
   12a28:	add	r1, pc, #24
   12a2c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12a30:	mov	ip, r6
   12a34:	mov	r8, #0
   12a38:	mov	r2, #1
   12a3c:	mov	r6, #0
   12a40:	mov	r3, sl
   12a44:	ldr	pc, [r1, r7, lsl #2]
   12a48:	andeq	r2, r1, r4, lsr fp
   12a4c:	andeq	r2, r1, r8, lsl #23
   12a50:	andeq	r2, r1, r8, asr #22
   12a54:	andeq	r2, r1, ip, lsr #22
   12a58:	andeq	r2, r1, ip, ror fp
   12a5c:			; <UNDEFINED> instruction: 0x00012bb0
   12a60:	andeq	r2, r1, r8, asr fp
   12a64:	andeq	r2, r1, r4, lsr ip
   12a68:	andeq	r2, r1, r4, ror sl
   12a6c:	andeq	r2, r1, r4, ror sl
   12a70:			; <UNDEFINED> instruction: 0x00012ab4
   12a74:	movw	r0, #24497	; 0x5fb1
   12a78:	mov	r1, r7
   12a7c:	mov	r6, r5
   12a80:	mov	r4, ip
   12a84:	mov	r5, lr
   12a88:	movt	r0, #1
   12a8c:	bl	14164 <__assert_fail@plt+0x3068>
   12a90:	str	r0, [sp, #76]	; 0x4c
   12a94:	movw	r0, #24499	; 0x5fb3
   12a98:	mov	r1, r7
   12a9c:	movt	r0, #1
   12aa0:	bl	14164 <__assert_fail@plt+0x3068>
   12aa4:	mov	lr, r5
   12aa8:	mov	r5, r6
   12aac:	mov	ip, r4
   12ab0:	str	r0, [sp, #80]	; 0x50
   12ab4:	mov	r8, #0
   12ab8:	tst	r9, #1
   12abc:	str	lr, [sp, #44]	; 0x2c
   12ac0:	bne	12af8 <__assert_fail@plt+0x19fc>
   12ac4:	ldr	r0, [sp, #76]	; 0x4c
   12ac8:	ldrb	r0, [r0]
   12acc:	cmp	r0, #0
   12ad0:	beq	12af8 <__assert_fail@plt+0x19fc>
   12ad4:	ldr	r1, [sp, #76]	; 0x4c
   12ad8:	mov	r8, #0
   12adc:	add	r1, r1, #1
   12ae0:	cmp	r8, ip
   12ae4:	strbcc	r0, [r5, r8]
   12ae8:	ldrb	r0, [r1, r8]
   12aec:	add	r8, r8, #1
   12af0:	cmp	r0, #0
   12af4:	bne	12ae0 <__assert_fail@plt+0x19e4>
   12af8:	ldr	r6, [sp, #80]	; 0x50
   12afc:	mov	r4, ip
   12b00:	mov	r0, r6
   12b04:	bl	10ff4 <strlen@plt>
   12b08:	mov	ip, r4
   12b0c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12b10:	ldr	lr, [sp, #44]	; 0x2c
   12b14:	str	r6, [fp, #-88]	; 0xffffffa8
   12b18:	str	r0, [fp, #-72]	; 0xffffffb8
   12b1c:	mov	r2, #1
   12b20:	mov	r6, r9
   12b24:	mov	r3, sl
   12b28:	b	12c34 <__assert_fail@plt+0x1b38>
   12b2c:	mov	r0, #1
   12b30:	b	12b88 <__assert_fail@plt+0x1a8c>
   12b34:	mov	r7, #0
   12b38:	mov	r8, #0
   12b3c:	mov	r2, r0
   12b40:	mov	r6, #0
   12b44:	b	12c34 <__assert_fail@plt+0x1b38>
   12b48:	tst	r9, #1
   12b4c:	bne	12b88 <__assert_fail@plt+0x1a8c>
   12b50:	mov	r2, r0
   12b54:	b	12be0 <__assert_fail@plt+0x1ae4>
   12b58:	mov	r0, #1
   12b5c:	mov	r8, #0
   12b60:	mov	r7, #5
   12b64:	mov	r2, #1
   12b68:	str	r0, [fp, #-72]	; 0xffffffb8
   12b6c:	movw	r0, #24495	; 0x5faf
   12b70:	movt	r0, #1
   12b74:	str	r0, [fp, #-88]	; 0xffffffa8
   12b78:	b	12ba8 <__assert_fail@plt+0x1aac>
   12b7c:	mov	r2, #1
   12b80:	tst	r9, #1
   12b84:	beq	12be0 <__assert_fail@plt+0x1ae4>
   12b88:	mov	r1, #1
   12b8c:	mov	r8, #0
   12b90:	mov	r7, #2
   12b94:	mov	r2, r0
   12b98:	str	r1, [fp, #-72]	; 0xffffffb8
   12b9c:	movw	r1, #24499	; 0x5fb3
   12ba0:	movt	r1, #1
   12ba4:	str	r1, [fp, #-88]	; 0xffffffa8
   12ba8:	mov	r6, #1
   12bac:	b	12c34 <__assert_fail@plt+0x1b38>
   12bb0:	tst	r9, #1
   12bb4:	beq	12c04 <__assert_fail@plt+0x1b08>
   12bb8:	mov	r0, #1
   12bbc:	mov	r8, #0
   12bc0:	mov	r2, #1
   12bc4:	mov	r6, #1
   12bc8:	mov	r7, #5
   12bcc:	str	r0, [fp, #-72]	; 0xffffffb8
   12bd0:	movw	r0, #24495	; 0x5faf
   12bd4:	movt	r0, #1
   12bd8:	str	r0, [fp, #-88]	; 0xffffffa8
   12bdc:	b	12c34 <__assert_fail@plt+0x1b38>
   12be0:	cmp	ip, #0
   12be4:	mov	r8, #1
   12be8:	mov	r6, #0
   12bec:	mov	r7, #2
   12bf0:	movne	r0, #39	; 0x27
   12bf4:	strbne	r0, [r5]
   12bf8:	movw	r0, #24499	; 0x5fb3
   12bfc:	movt	r0, #1
   12c00:	b	12c28 <__assert_fail@plt+0x1b2c>
   12c04:	cmp	ip, #0
   12c08:	mov	r8, #1
   12c0c:	mov	r2, #1
   12c10:	mov	r7, #5
   12c14:	mov	r6, #0
   12c18:	movne	r0, #34	; 0x22
   12c1c:	strbne	r0, [r5]
   12c20:	movw	r0, #24495	; 0x5faf
   12c24:	movt	r0, #1
   12c28:	str	r0, [fp, #-88]	; 0xffffffa8
   12c2c:	mov	r0, #1
   12c30:	str	r0, [fp, #-72]	; 0xffffffb8
   12c34:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c38:	str	r7, [fp, #-68]	; 0xffffffbc
   12c3c:	str	r6, [fp, #-76]	; 0xffffffb4
   12c40:	str	r2, [sp, #84]	; 0x54
   12c44:	cmp	r0, #0
   12c48:	movwne	r0, #1
   12c4c:	and	r1, r0, r6
   12c50:	and	r1, r2, r1
   12c54:	str	r1, [sp, #48]	; 0x30
   12c58:	sub	r1, r7, #2
   12c5c:	clz	r1, r1
   12c60:	lsr	r1, r1, #5
   12c64:	and	r1, r1, r6
   12c68:	str	r1, [sp, #64]	; 0x40
   12c6c:	subs	r1, r7, #2
   12c70:	eor	r7, r6, #1
   12c74:	movwne	r1, #1
   12c78:	str	r7, [sp, #92]	; 0x5c
   12c7c:	orr	r7, r1, r7
   12c80:	and	r1, r1, r2
   12c84:	and	r0, r0, r1
   12c88:	str	r7, [sp, #68]	; 0x44
   12c8c:	mov	r7, #0
   12c90:	str	r0, [fp, #-60]	; 0xffffffc4
   12c94:	orr	r0, r1, r6
   12c98:	ldr	r1, [fp, #16]
   12c9c:	eor	r0, r0, #1
   12ca0:	clz	r1, r1
   12ca4:	lsr	r1, r1, #5
   12ca8:	orr	r0, r1, r0
   12cac:	str	r0, [fp, #-64]	; 0xffffffc0
   12cb0:	eor	r0, r2, #1
   12cb4:	str	r0, [sp, #52]	; 0x34
   12cb8:	cmn	r3, #1
   12cbc:	beq	12ccc <__assert_fail@plt+0x1bd0>
   12cc0:	cmp	r7, r3
   12cc4:	bne	12cd8 <__assert_fail@plt+0x1bdc>
   12cc8:	b	13834 <__assert_fail@plt+0x2738>
   12ccc:	ldrb	r0, [r4, r7]
   12cd0:	cmp	r0, #0
   12cd4:	beq	1383c <__assert_fail@plt+0x2740>
   12cd8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12cdc:	cmp	r0, #0
   12ce0:	beq	12d28 <__assert_fail@plt+0x1c2c>
   12ce4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ce8:	add	r5, r7, r0
   12cec:	cmp	r0, #2
   12cf0:	bcc	12d3c <__assert_fail@plt+0x1c40>
   12cf4:	mov	r0, #0
   12cf8:	cmn	r3, #1
   12cfc:	str	r0, [fp, #-56]	; 0xffffffc8
   12d00:	bne	12d44 <__assert_fail@plt+0x1c48>
   12d04:	mov	r0, r4
   12d08:	mov	r4, ip
   12d0c:	mov	r6, lr
   12d10:	bl	10ff4 <strlen@plt>
   12d14:	mov	ip, r4
   12d18:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12d1c:	mov	lr, r6
   12d20:	mov	r3, r0
   12d24:	b	12d44 <__assert_fail@plt+0x1c48>
   12d28:	mov	r0, #0
   12d2c:	mov	sl, r3
   12d30:	str	r0, [fp, #-56]	; 0xffffffc8
   12d34:	mov	r0, #0
   12d38:	b	12db0 <__assert_fail@plt+0x1cb4>
   12d3c:	mov	r0, #0
   12d40:	str	r0, [fp, #-56]	; 0xffffffc8
   12d44:	cmp	r5, r3
   12d48:	bls	12d5c <__assert_fail@plt+0x1c60>
   12d4c:	ldr	r5, [fp, #-84]	; 0xffffffac
   12d50:	mov	r0, #0
   12d54:	mov	sl, r3
   12d58:	b	12db0 <__assert_fail@plt+0x1cb4>
   12d5c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12d60:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12d64:	add	r0, r4, r7
   12d68:	mov	r5, lr
   12d6c:	mov	r6, ip
   12d70:	mov	sl, r3
   12d74:	bl	10fe8 <bcmp@plt>
   12d78:	ldr	r2, [sp, #92]	; 0x5c
   12d7c:	cmp	r0, #0
   12d80:	ldr	r3, [fp, #-84]	; 0xffffffac
   12d84:	mov	r1, r0
   12d88:	movwne	r1, #1
   12d8c:	orr	r1, r1, r2
   12d90:	tst	r1, #1
   12d94:	beq	138c0 <__assert_fail@plt+0x27c4>
   12d98:	ldr	r4, [fp, #-80]	; 0xffffffb0
   12d9c:	clz	r0, r0
   12da0:	mov	lr, r5
   12da4:	mov	ip, r6
   12da8:	mov	r5, r3
   12dac:	lsr	r0, r0, #5
   12db0:	str	r0, [fp, #-52]	; 0xffffffcc
   12db4:	ldrb	r6, [r4, r7]
   12db8:	cmp	r6, #126	; 0x7e
   12dbc:	bhi	132e4 <__assert_fail@plt+0x21e8>
   12dc0:	add	r3, pc, #16
   12dc4:	mov	r9, #1
   12dc8:	mov	r2, #110	; 0x6e
   12dcc:	mov	r0, #97	; 0x61
   12dd0:	mov	r1, #0
   12dd4:	ldr	pc, [r3, r6, lsl #2]
   12dd8:	andeq	r3, r1, r8, asr #2
   12ddc:	andeq	r3, r1, r4, ror #5
   12de0:	andeq	r3, r1, r4, ror #5
   12de4:	andeq	r3, r1, r4, ror #5
   12de8:	andeq	r3, r1, r4, ror #5
   12dec:	andeq	r3, r1, r4, ror #5
   12df0:	andeq	r3, r1, r4, ror #5
   12df4:	andeq	r3, r1, r4, ror #6
   12df8:	andeq	r3, r1, r8, lsr #2
   12dfc:	andeq	r3, r1, r0, lsr #2
   12e00:	andeq	r3, r1, r4, lsr r1
   12e04:	andeq	r3, r1, ip, asr #4
   12e08:	andeq	r3, r1, r8, lsl r1
   12e0c:	andeq	r3, r1, r0, lsr r1
   12e10:	andeq	r3, r1, r4, ror #5
   12e14:	andeq	r3, r1, r4, ror #5
   12e18:	andeq	r3, r1, r4, ror #5
   12e1c:	andeq	r3, r1, r4, ror #5
   12e20:	andeq	r3, r1, r4, ror #5
   12e24:	andeq	r3, r1, r4, ror #5
   12e28:	andeq	r3, r1, r4, ror #5
   12e2c:	andeq	r3, r1, r4, ror #5
   12e30:	andeq	r3, r1, r4, ror #5
   12e34:	andeq	r3, r1, r4, ror #5
   12e38:	andeq	r3, r1, r4, ror #5
   12e3c:	andeq	r3, r1, r4, ror #5
   12e40:	andeq	r3, r1, r4, ror #5
   12e44:	andeq	r3, r1, r4, ror #5
   12e48:	andeq	r3, r1, r4, ror #5
   12e4c:	andeq	r3, r1, r4, ror #5
   12e50:	andeq	r3, r1, r4, ror #5
   12e54:	andeq	r3, r1, r4, ror #5
   12e58:	andeq	r3, r1, r8, asr #1
   12e5c:	andeq	r3, r1, ip, asr #1
   12e60:	andeq	r3, r1, ip, asr #1
   12e64:	strheq	r3, [r1], -r0
   12e68:	andeq	r3, r1, ip, asr #1
   12e6c:	ldrdeq	r2, [r1], -r4
   12e70:	andeq	r3, r1, ip, asr #1
   12e74:	andeq	r3, r1, r4, asr r2
   12e78:	andeq	r3, r1, ip, asr #1
   12e7c:	andeq	r3, r1, ip, asr #1
   12e80:	andeq	r3, r1, ip, asr #1
   12e84:	ldrdeq	r2, [r1], -r4
   12e88:	ldrdeq	r2, [r1], -r4
   12e8c:	ldrdeq	r2, [r1], -r4
   12e90:	ldrdeq	r2, [r1], -r4
   12e94:	ldrdeq	r2, [r1], -r4
   12e98:	ldrdeq	r2, [r1], -r4
   12e9c:	ldrdeq	r2, [r1], -r4
   12ea0:	ldrdeq	r2, [r1], -r4
   12ea4:	ldrdeq	r2, [r1], -r4
   12ea8:	ldrdeq	r2, [r1], -r4
   12eac:	ldrdeq	r2, [r1], -r4
   12eb0:	ldrdeq	r2, [r1], -r4
   12eb4:	ldrdeq	r2, [r1], -r4
   12eb8:	ldrdeq	r2, [r1], -r4
   12ebc:	ldrdeq	r2, [r1], -r4
   12ec0:	ldrdeq	r2, [r1], -r4
   12ec4:	andeq	r3, r1, ip, asr #1
   12ec8:	andeq	r3, r1, ip, asr #1
   12ecc:	andeq	r3, r1, ip, asr #1
   12ed0:	andeq	r3, r1, ip, asr #1
   12ed4:	andeq	r3, r1, r0, lsr #4
   12ed8:	andeq	r3, r1, r4, ror #5
   12edc:	ldrdeq	r2, [r1], -r4
   12ee0:	ldrdeq	r2, [r1], -r4
   12ee4:	ldrdeq	r2, [r1], -r4
   12ee8:	ldrdeq	r2, [r1], -r4
   12eec:	ldrdeq	r2, [r1], -r4
   12ef0:	ldrdeq	r2, [r1], -r4
   12ef4:	ldrdeq	r2, [r1], -r4
   12ef8:	ldrdeq	r2, [r1], -r4
   12efc:	ldrdeq	r2, [r1], -r4
   12f00:	ldrdeq	r2, [r1], -r4
   12f04:	ldrdeq	r2, [r1], -r4
   12f08:	ldrdeq	r2, [r1], -r4
   12f0c:	ldrdeq	r2, [r1], -r4
   12f10:	ldrdeq	r2, [r1], -r4
   12f14:	ldrdeq	r2, [r1], -r4
   12f18:	ldrdeq	r2, [r1], -r4
   12f1c:	ldrdeq	r2, [r1], -r4
   12f20:	ldrdeq	r2, [r1], -r4
   12f24:	ldrdeq	r2, [r1], -r4
   12f28:	ldrdeq	r2, [r1], -r4
   12f2c:	ldrdeq	r2, [r1], -r4
   12f30:	ldrdeq	r2, [r1], -r4
   12f34:	ldrdeq	r2, [r1], -r4
   12f38:	ldrdeq	r2, [r1], -r4
   12f3c:	ldrdeq	r2, [r1], -r4
   12f40:	ldrdeq	r2, [r1], -r4
   12f44:	andeq	r3, r1, ip, asr #1
   12f48:	strdeq	r3, [r1], -r4
   12f4c:	ldrdeq	r2, [r1], -r4
   12f50:	andeq	r3, r1, ip, asr #1
   12f54:	ldrdeq	r2, [r1], -r4
   12f58:	andeq	r3, r1, ip, asr #1
   12f5c:	ldrdeq	r2, [r1], -r4
   12f60:	ldrdeq	r2, [r1], -r4
   12f64:	ldrdeq	r2, [r1], -r4
   12f68:	ldrdeq	r2, [r1], -r4
   12f6c:	ldrdeq	r2, [r1], -r4
   12f70:	ldrdeq	r2, [r1], -r4
   12f74:	ldrdeq	r2, [r1], -r4
   12f78:	ldrdeq	r2, [r1], -r4
   12f7c:	ldrdeq	r2, [r1], -r4
   12f80:	ldrdeq	r2, [r1], -r4
   12f84:	ldrdeq	r2, [r1], -r4
   12f88:	ldrdeq	r2, [r1], -r4
   12f8c:	ldrdeq	r2, [r1], -r4
   12f90:	ldrdeq	r2, [r1], -r4
   12f94:	ldrdeq	r2, [r1], -r4
   12f98:	ldrdeq	r2, [r1], -r4
   12f9c:	ldrdeq	r2, [r1], -r4
   12fa0:	ldrdeq	r2, [r1], -r4
   12fa4:	ldrdeq	r2, [r1], -r4
   12fa8:	ldrdeq	r2, [r1], -r4
   12fac:	ldrdeq	r2, [r1], -r4
   12fb0:	ldrdeq	r2, [r1], -r4
   12fb4:	ldrdeq	r2, [r1], -r4
   12fb8:	ldrdeq	r2, [r1], -r4
   12fbc:	ldrdeq	r2, [r1], -r4
   12fc0:	ldrdeq	r2, [r1], -r4
   12fc4:	andeq	r3, r1, r8, lsl #1
   12fc8:	andeq	r3, r1, ip, asr #1
   12fcc:	andeq	r3, r1, r8, lsl #1
   12fd0:	strheq	r3, [r1], -r0
   12fd4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12fd8:	tst	r0, #1
   12fdc:	bne	13008 <__assert_fail@plt+0x1f0c>
   12fe0:	ldr	r1, [fp, #16]
   12fe4:	ubfx	r0, r6, #5, #3
   12fe8:	mov	r2, #1
   12fec:	ldr	r0, [r1, r0, lsl #2]
   12ff0:	and	r1, r6, #31
   12ff4:	tst	r0, r2, lsl r1
   12ff8:	beq	13008 <__assert_fail@plt+0x1f0c>
   12ffc:	mov	r0, r6
   13000:	mov	r1, r9
   13004:	b	1301c <__assert_fail@plt+0x1f20>
   13008:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1300c:	mov	r1, r9
   13010:	cmp	r0, #0
   13014:	mov	r0, r6
   13018:	beq	13768 <__assert_fail@plt+0x266c>
   1301c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13020:	tst	r2, #1
   13024:	bne	13904 <__assert_fail@plt+0x2808>
   13028:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1302c:	subs	r2, r2, #2
   13030:	movwne	r2, #1
   13034:	orr	r2, r2, lr
   13038:	tst	r2, #1
   1303c:	bne	13074 <__assert_fail@plt+0x1f78>
   13040:	cmp	r8, ip
   13044:	mov	lr, #1
   13048:	movcc	r2, #39	; 0x27
   1304c:	strbcc	r2, [r5, r8]
   13050:	add	r2, r8, #1
   13054:	cmp	r2, ip
   13058:	movcc	r3, #36	; 0x24
   1305c:	strbcc	r3, [r5, r2]
   13060:	add	r2, r8, #2
   13064:	add	r8, r8, #3
   13068:	cmp	r2, ip
   1306c:	movcc	r3, #39	; 0x27
   13070:	strbcc	r3, [r5, r2]
   13074:	cmp	r8, ip
   13078:	movcc	r2, #92	; 0x5c
   1307c:	strbcc	r2, [r5, r8]
   13080:	add	r8, r8, #1
   13084:	b	137a8 <__assert_fail@plt+0x26ac>
   13088:	cmp	sl, #1
   1308c:	beq	130b0 <__assert_fail@plt+0x1fb4>
   13090:	mov	r9, #0
   13094:	cmn	sl, #1
   13098:	bne	130bc <__assert_fail@plt+0x1fc0>
   1309c:	ldrb	r0, [r4, #1]
   130a0:	cmp	r0, #0
   130a4:	beq	130b0 <__assert_fail@plt+0x1fb4>
   130a8:	mvn	sl, #0
   130ac:	b	130bc <__assert_fail@plt+0x1fc0>
   130b0:	mov	r9, #0
   130b4:	cmp	r7, #0
   130b8:	beq	130c8 <__assert_fail@plt+0x1fcc>
   130bc:	mov	r0, #0
   130c0:	str	r0, [fp, #-56]	; 0xffffffc8
   130c4:	b	12fd4 <__assert_fail@plt+0x1ed8>
   130c8:	mov	r1, #1
   130cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   130d0:	cmp	r0, #2
   130d4:	bne	130ec <__assert_fail@plt+0x1ff0>
   130d8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   130dc:	mov	r9, r1
   130e0:	tst	r0, #1
   130e4:	beq	12fd4 <__assert_fail@plt+0x1ed8>
   130e8:	b	13904 <__assert_fail@plt+0x2808>
   130ec:	mov	r9, r1
   130f0:	b	12fd4 <__assert_fail@plt+0x1ed8>
   130f4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   130f8:	cmp	r0, #2
   130fc:	bne	13340 <__assert_fail@plt+0x2244>
   13100:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13104:	tst	r0, #1
   13108:	bne	13904 <__assert_fail@plt+0x2808>
   1310c:	mov	r0, #0
   13110:	str	r0, [fp, #-56]	; 0xffffffc8
   13114:	b	13358 <__assert_fail@plt+0x225c>
   13118:	mov	r0, #102	; 0x66
   1311c:	b	13364 <__assert_fail@plt+0x2268>
   13120:	mov	r2, #116	; 0x74
   13124:	b	13134 <__assert_fail@plt+0x2038>
   13128:	mov	r0, #98	; 0x62
   1312c:	b	13364 <__assert_fail@plt+0x2268>
   13130:	mov	r2, #114	; 0x72
   13134:	ldr	r0, [sp, #68]	; 0x44
   13138:	tst	r0, #1
   1313c:	mov	r0, r2
   13140:	bne	13364 <__assert_fail@plt+0x2268>
   13144:	b	13904 <__assert_fail@plt+0x2808>
   13148:	ldr	r0, [sp, #84]	; 0x54
   1314c:	tst	r0, #1
   13150:	beq	13384 <__assert_fail@plt+0x2288>
   13154:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13158:	tst	r0, #1
   1315c:	bne	139f0 <__assert_fail@plt+0x28f4>
   13160:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13164:	mov	r2, sl
   13168:	subs	r0, r0, #2
   1316c:	movwne	r0, #1
   13170:	orr	r0, r0, lr
   13174:	tst	r0, #1
   13178:	bne	131b0 <__assert_fail@plt+0x20b4>
   1317c:	cmp	r8, ip
   13180:	mov	lr, #1
   13184:	movcc	r0, #39	; 0x27
   13188:	strbcc	r0, [r5, r8]
   1318c:	add	r0, r8, #1
   13190:	cmp	r0, ip
   13194:	movcc	r1, #36	; 0x24
   13198:	strbcc	r1, [r5, r0]
   1319c:	add	r0, r8, #2
   131a0:	add	r8, r8, #3
   131a4:	cmp	r0, ip
   131a8:	movcc	r1, #39	; 0x27
   131ac:	strbcc	r1, [r5, r0]
   131b0:	mov	r1, #1
   131b4:	cmp	r8, ip
   131b8:	mov	r9, #0
   131bc:	mov	r6, #48	; 0x30
   131c0:	str	r1, [fp, #-56]	; 0xffffffc8
   131c4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   131c8:	movcc	r0, #92	; 0x5c
   131cc:	strbcc	r0, [r5, r8]
   131d0:	add	r0, r8, #1
   131d4:	cmp	r1, #2
   131d8:	beq	134e0 <__assert_fail@plt+0x23e4>
   131dc:	add	r1, r7, #1
   131e0:	cmp	r1, r2
   131e4:	bcs	134e0 <__assert_fail@plt+0x23e4>
   131e8:	ldrb	r1, [r4, r1]
   131ec:	sub	r1, r1, #48	; 0x30
   131f0:	uxtb	r1, r1
   131f4:	cmp	r1, #9
   131f8:	bhi	134e0 <__assert_fail@plt+0x23e4>
   131fc:	cmp	r0, ip
   13200:	movcc	r1, #48	; 0x30
   13204:	strbcc	r1, [r5, r0]
   13208:	add	r0, r8, #2
   1320c:	add	r8, r8, #3
   13210:	cmp	r0, ip
   13214:	movcc	r1, #48	; 0x30
   13218:	strbcc	r1, [r5, r0]
   1321c:	b	12fd4 <__assert_fail@plt+0x1ed8>
   13220:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13224:	mov	r6, #63	; 0x3f
   13228:	cmp	r0, #5
   1322c:	beq	134e8 <__assert_fail@plt+0x23ec>
   13230:	mov	r1, #0
   13234:	cmp	r0, #2
   13238:	str	r1, [fp, #-56]	; 0xffffffc8
   1323c:	bne	1359c <__assert_fail@plt+0x24a0>
   13240:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13244:	mov	r9, #0
   13248:	b	130e0 <__assert_fail@plt+0x1fe4>
   1324c:	mov	r0, #118	; 0x76
   13250:	b	13364 <__assert_fail@plt+0x2268>
   13254:	mov	r0, #1
   13258:	mov	r6, #39	; 0x27
   1325c:	str	r0, [sp, #60]	; 0x3c
   13260:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13264:	cmp	r0, #2
   13268:	bne	132dc <__assert_fail@plt+0x21e0>
   1326c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13270:	tst	r0, #1
   13274:	bne	13904 <__assert_fail@plt+0x2808>
   13278:	ldr	r2, [sp, #56]	; 0x38
   1327c:	clz	r1, ip
   13280:	mov	lr, #0
   13284:	lsr	r1, r1, #5
   13288:	cmp	r2, #0
   1328c:	mov	r0, r2
   13290:	movwne	r0, #1
   13294:	orrs	r0, r0, r1
   13298:	moveq	r2, ip
   1329c:	moveq	ip, r0
   132a0:	cmp	r8, ip
   132a4:	str	r2, [sp, #56]	; 0x38
   132a8:	movcc	r0, #39	; 0x27
   132ac:	strbcc	r0, [r5, r8]
   132b0:	add	r0, r8, #1
   132b4:	cmp	r0, ip
   132b8:	movcc	r1, #92	; 0x5c
   132bc:	strbcc	r1, [r5, r0]
   132c0:	add	r0, r8, #2
   132c4:	add	r8, r8, #3
   132c8:	cmp	r0, ip
   132cc:	movcc	r1, #39	; 0x27
   132d0:	strbcc	r1, [r5, r0]
   132d4:	mov	r0, #0
   132d8:	str	r0, [fp, #-56]	; 0xffffffc8
   132dc:	mov	r9, #1
   132e0:	b	12fd4 <__assert_fail@plt+0x1ed8>
   132e4:	ldr	r0, [sp, #40]	; 0x28
   132e8:	str	lr, [sp, #44]	; 0x2c
   132ec:	str	ip, [sp, #88]	; 0x58
   132f0:	cmp	r0, #1
   132f4:	bne	133a4 <__assert_fail@plt+0x22a8>
   132f8:	str	sl, [sp, #36]	; 0x24
   132fc:	bl	10fd0 <__ctype_b_loc@plt>
   13300:	ldr	r0, [r0]
   13304:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13308:	mov	r1, #1
   1330c:	add	r0, r0, r6, lsl #1
   13310:	ldrb	r0, [r0, #1]
   13314:	ubfx	r9, r0, #6, #1
   13318:	ldr	r0, [sp, #52]	; 0x34
   1331c:	ldr	lr, [sp, #44]	; 0x2c
   13320:	cmp	r1, #1
   13324:	orr	r3, r9, r0
   13328:	bhi	135a4 <__assert_fail@plt+0x24a8>
   1332c:	tst	r3, #1
   13330:	beq	135a4 <__assert_fail@plt+0x24a8>
   13334:	ldr	sl, [sp, #36]	; 0x24
   13338:	ldr	ip, [sp, #88]	; 0x58
   1333c:	b	12fd4 <__assert_fail@plt+0x1ed8>
   13340:	ldr	r1, [sp, #48]	; 0x30
   13344:	mov	r0, #0
   13348:	str	r0, [fp, #-56]	; 0xffffffc8
   1334c:	mov	r0, #92	; 0x5c
   13350:	cmp	r1, #0
   13354:	beq	13364 <__assert_fail@plt+0x2268>
   13358:	mov	r6, #92	; 0x5c
   1335c:	mov	r9, #0
   13360:	b	13768 <__assert_fail@plt+0x266c>
   13364:	mov	r1, #0
   13368:	mov	r9, #0
   1336c:	str	r1, [fp, #-56]	; 0xffffffc8
   13370:	ldr	r1, [sp, #84]	; 0x54
   13374:	tst	r1, #1
   13378:	mov	r1, #0
   1337c:	beq	12fd4 <__assert_fail@plt+0x1ed8>
   13380:	b	1301c <__assert_fail@plt+0x1f20>
   13384:	ldr	r0, [sp, #32]
   13388:	mov	r6, #0
   1338c:	mov	r9, #0
   13390:	cmp	r0, #0
   13394:	mov	r0, #0
   13398:	str	r0, [fp, #-56]	; 0xffffffc8
   1339c:	beq	12fd4 <__assert_fail@plt+0x1ed8>
   133a0:	b	137c0 <__assert_fail@plt+0x26c4>
   133a4:	mov	r0, #0
   133a8:	cmn	sl, #1
   133ac:	sub	r3, fp, #40	; 0x28
   133b0:	str	r0, [fp, #-36]	; 0xffffffdc
   133b4:	str	r0, [fp, #-40]	; 0xffffffd8
   133b8:	bne	133d0 <__assert_fail@plt+0x22d4>
   133bc:	mov	r0, r4
   133c0:	bl	10ff4 <strlen@plt>
   133c4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   133c8:	sub	r3, fp, #40	; 0x28
   133cc:	mov	sl, r0
   133d0:	ldr	r0, [sp, #72]	; 0x48
   133d4:	mov	r9, #1
   133d8:	mov	r1, #0
   133dc:	str	sl, [sp, #36]	; 0x24
   133e0:	add	r0, r0, r7
   133e4:	str	r0, [sp, #20]
   133e8:	add	r0, r1, r7
   133ec:	str	r1, [sp, #24]
   133f0:	add	r1, r4, r0
   133f4:	mov	r4, r0
   133f8:	sub	r2, sl, r0
   133fc:	sub	r0, fp, #44	; 0x2c
   13400:	bl	153a4 <__assert_fail@plt+0x42a8>
   13404:	cmp	r0, #0
   13408:	beq	13814 <__assert_fail@plt+0x2718>
   1340c:	cmn	r0, #1
   13410:	beq	137cc <__assert_fail@plt+0x26d0>
   13414:	ldr	r2, [sp, #36]	; 0x24
   13418:	cmn	r0, #2
   1341c:	beq	137d4 <__assert_fail@plt+0x26d8>
   13420:	ldr	r2, [sp, #64]	; 0x40
   13424:	ldr	ip, [sp, #88]	; 0x58
   13428:	ldr	r4, [sp, #84]	; 0x54
   1342c:	ldr	lr, [fp, #-48]	; 0xffffffd0
   13430:	cmp	r0, #2
   13434:	mov	r1, #0
   13438:	movwcc	r1, #1
   1343c:	eor	r2, r2, #1
   13440:	orrs	r1, r2, r1
   13444:	bne	13494 <__assert_fail@plt+0x2398>
   13448:	ldr	r1, [sp, #24]
   1344c:	ldr	r2, [sp, #20]
   13450:	add	r1, r2, r1
   13454:	sub	r2, r0, #1
   13458:	ldrb	r3, [r1]
   1345c:	sub	r5, r3, #94	; 0x5e
   13460:	cmp	r5, #30
   13464:	bhi	1347c <__assert_fail@plt+0x2380>
   13468:	mov	r4, #1
   1346c:	mov	sl, #1073741829	; 0x40000005
   13470:	tst	sl, r4, lsl r5
   13474:	ldr	r4, [sp, #84]	; 0x54
   13478:	bne	138dc <__assert_fail@plt+0x27e0>
   1347c:	sub	r3, r3, #91	; 0x5b
   13480:	cmp	r3, #2
   13484:	bcc	138dc <__assert_fail@plt+0x27e0>
   13488:	add	r1, r1, #1
   1348c:	subs	r2, r2, #1
   13490:	bne	13458 <__assert_fail@plt+0x235c>
   13494:	ldr	r5, [sp, #24]
   13498:	str	lr, [fp, #-48]	; 0xffffffd0
   1349c:	add	r5, r0, r5
   134a0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   134a4:	bl	10f40 <iswprint@plt>
   134a8:	cmp	r0, #0
   134ac:	sub	r4, fp, #40	; 0x28
   134b0:	movwne	r0, #1
   134b4:	and	r9, r9, r0
   134b8:	mov	r0, r4
   134bc:	bl	10ef8 <mbsinit@plt>
   134c0:	mov	r1, r5
   134c4:	mov	r3, r4
   134c8:	ldr	sl, [sp, #36]	; 0x24
   134cc:	ldr	r5, [fp, #-84]	; 0xffffffac
   134d0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   134d4:	cmp	r0, #0
   134d8:	beq	133e8 <__assert_fail@plt+0x22ec>
   134dc:	b	13318 <__assert_fail@plt+0x221c>
   134e0:	mov	r8, r0
   134e4:	b	12fd4 <__assert_fail@plt+0x1ed8>
   134e8:	mov	r0, #0
   134ec:	str	r0, [fp, #-56]	; 0xffffffc8
   134f0:	ldr	r0, [sp, #28]
   134f4:	cmp	r0, #0
   134f8:	beq	1359c <__assert_fail@plt+0x24a0>
   134fc:	add	r0, r7, #2
   13500:	mov	r1, sl
   13504:	cmp	r0, sl
   13508:	bcs	1359c <__assert_fail@plt+0x24a0>
   1350c:	add	r1, r7, r4
   13510:	ldrb	r1, [r1, #1]
   13514:	cmp	r1, #63	; 0x3f
   13518:	bne	1359c <__assert_fail@plt+0x24a0>
   1351c:	ldrb	r9, [r4, r0]
   13520:	sub	r2, r9, #33	; 0x21
   13524:	cmp	r2, #29
   13528:	bhi	1359c <__assert_fail@plt+0x24a0>
   1352c:	mov	r1, r4
   13530:	movw	r4, #20929	; 0x51c1
   13534:	mov	r3, #1
   13538:	movt	r4, #14336	; 0x3800
   1353c:	tst	r4, r3, lsl r2
   13540:	beq	13828 <__assert_fail@plt+0x272c>
   13544:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13548:	tst	r2, #1
   1354c:	bne	139f8 <__assert_fail@plt+0x28fc>
   13550:	cmp	r8, ip
   13554:	mov	r4, r1
   13558:	mov	r7, r0
   1355c:	mov	r6, r9
   13560:	movcc	r2, #63	; 0x3f
   13564:	strbcc	r2, [r5, r8]
   13568:	add	r2, r8, #1
   1356c:	cmp	r2, ip
   13570:	movcc	r3, #34	; 0x22
   13574:	strbcc	r3, [r5, r2]
   13578:	add	r2, r8, #2
   1357c:	cmp	r2, ip
   13580:	movcc	r3, #34	; 0x22
   13584:	strbcc	r3, [r5, r2]
   13588:	add	r2, r8, #3
   1358c:	add	r8, r8, #4
   13590:	cmp	r2, ip
   13594:	movcc	r3, #63	; 0x3f
   13598:	strbcc	r3, [r5, r2]
   1359c:	mov	r9, #0
   135a0:	b	12fd4 <__assert_fail@plt+0x1ed8>
   135a4:	ldr	sl, [sp, #36]	; 0x24
   135a8:	add	r0, r1, r7
   135ac:	mov	r2, #0
   135b0:	str	r3, [sp, #24]
   135b4:	str	r0, [fp, #-56]	; 0xffffffc8
   135b8:	tst	r3, #1
   135bc:	beq	135e8 <__assert_fail@plt+0x24ec>
   135c0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   135c4:	tst	r0, #1
   135c8:	beq	136b0 <__assert_fail@plt+0x25b4>
   135cc:	ldr	r1, [sp, #88]	; 0x58
   135d0:	mov	r0, r3
   135d4:	cmp	r8, r1
   135d8:	movcc	r1, #92	; 0x5c
   135dc:	strbcc	r1, [r5, r8]
   135e0:	add	r8, r8, #1
   135e4:	b	136b4 <__assert_fail@plt+0x25b8>
   135e8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   135ec:	tst	r1, #1
   135f0:	bne	13900 <__assert_fail@plt+0x2804>
   135f4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   135f8:	subs	r2, r1, #2
   135fc:	movwne	r2, #1
   13600:	orr	r2, r2, lr
   13604:	tst	r2, #1
   13608:	bne	1364c <__assert_fail@plt+0x2550>
   1360c:	ldr	r1, [sp, #88]	; 0x58
   13610:	add	r2, r8, #1
   13614:	mov	lr, #1
   13618:	cmp	r8, r1
   1361c:	movcc	r1, #39	; 0x27
   13620:	strbcc	r1, [r5, r8]
   13624:	ldr	r1, [sp, #88]	; 0x58
   13628:	cmp	r2, r1
   1362c:	movcc	r1, #36	; 0x24
   13630:	strbcc	r1, [r5, r2]
   13634:	ldr	r1, [sp, #88]	; 0x58
   13638:	add	r2, r8, #2
   1363c:	add	r8, r8, #3
   13640:	cmp	r2, r1
   13644:	movcc	r1, #39	; 0x27
   13648:	strbcc	r1, [r5, r2]
   1364c:	ldr	r1, [sp, #88]	; 0x58
   13650:	add	r2, r8, #1
   13654:	mov	r0, r3
   13658:	cmp	r8, r1
   1365c:	movcc	r1, #92	; 0x5c
   13660:	strbcc	r1, [r5, r8]
   13664:	ldr	r1, [sp, #88]	; 0x58
   13668:	cmp	r2, r1
   1366c:	bcs	13680 <__assert_fail@plt+0x2584>
   13670:	uxtb	r3, r6
   13674:	mov	r1, #48	; 0x30
   13678:	orr	r3, r1, r3, lsr #6
   1367c:	strb	r3, [r5, r2]
   13680:	ldr	r1, [sp, #88]	; 0x58
   13684:	add	r2, r8, #2
   13688:	add	r8, r8, #3
   1368c:	cmp	r2, r1
   13690:	lsrcc	r3, r6, #3
   13694:	movcc	r1, #6
   13698:	bficc	r3, r1, #3, #29
   1369c:	mov	r1, #6
   136a0:	bfi	r6, r1, #3, #29
   136a4:	strbcc	r3, [r5, r2]
   136a8:	mov	r2, #1
   136ac:	b	136bc <__assert_fail@plt+0x25c0>
   136b0:	mov	r0, r3
   136b4:	mov	r1, #0
   136b8:	str	r1, [fp, #-52]	; 0xffffffcc
   136bc:	mov	ip, r2
   136c0:	and	r1, r2, #1
   136c4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   136c8:	add	r3, r7, #1
   136cc:	cmp	r2, r3
   136d0:	bls	13758 <__assert_fail@plt+0x265c>
   136d4:	cmp	r1, #0
   136d8:	mvn	r5, lr
   136dc:	movwne	r1, #1
   136e0:	orr	r5, r5, r1
   136e4:	tst	r5, #1
   136e8:	bne	1372c <__assert_fail@plt+0x2630>
   136ec:	ldr	r1, [sp, #88]	; 0x58
   136f0:	ldr	r5, [fp, #-84]	; 0xffffffac
   136f4:	mov	r2, r4
   136f8:	ldr	r4, [sp, #88]	; 0x58
   136fc:	ldr	r0, [sp, #24]
   13700:	mov	lr, #0
   13704:	cmp	r8, r1
   13708:	movcc	r1, #39	; 0x27
   1370c:	strbcc	r1, [r5, r8]
   13710:	add	r1, r8, #1
   13714:	add	r8, r8, #2
   13718:	cmp	r1, r4
   1371c:	movcc	r4, #39	; 0x27
   13720:	strbcc	r4, [r5, r1]
   13724:	mov	r4, r2
   13728:	b	13730 <__assert_fail@plt+0x2634>
   1372c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13730:	ldr	r1, [sp, #88]	; 0x58
   13734:	mov	r2, ip
   13738:	cmp	r8, r1
   1373c:	ldr	r1, [sp, #72]	; 0x48
   13740:	strbcc	r6, [r5, r8]
   13744:	add	r8, r8, #1
   13748:	ldrb	r6, [r1, r7]
   1374c:	mov	r7, r3
   13750:	mov	r3, r0
   13754:	b	135b8 <__assert_fail@plt+0x24bc>
   13758:	ldr	ip, [sp, #88]	; 0x58
   1375c:	cmp	r1, #0
   13760:	movwne	r1, #1
   13764:	str	r1, [fp, #-56]	; 0xffffffc8
   13768:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1376c:	cmp	r0, #0
   13770:	bne	137a0 <__assert_fail@plt+0x26a4>
   13774:	tst	lr, #1
   13778:	beq	137a0 <__assert_fail@plt+0x26a4>
   1377c:	cmp	r8, ip
   13780:	mov	lr, #0
   13784:	movcc	r0, #39	; 0x27
   13788:	strbcc	r0, [r5, r8]
   1378c:	add	r0, r8, #1
   13790:	add	r8, r8, #2
   13794:	cmp	r0, ip
   13798:	movcc	r1, #39	; 0x27
   1379c:	strbcc	r1, [r5, r0]
   137a0:	mov	r1, r9
   137a4:	mov	r0, r6
   137a8:	cmp	r8, ip
   137ac:	strbcc	r0, [r5, r8]
   137b0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   137b4:	add	r8, r8, #1
   137b8:	and	r0, r0, r1
   137bc:	str	r0, [fp, #-48]	; 0xffffffd0
   137c0:	mov	r3, sl
   137c4:	add	r7, r7, #1
   137c8:	b	12cb8 <__assert_fail@plt+0x1bbc>
   137cc:	mov	r9, #0
   137d0:	b	13814 <__assert_fail@plt+0x2718>
   137d4:	mov	r9, #0
   137d8:	cmp	r2, r4
   137dc:	bls	13814 <__assert_fail@plt+0x2718>
   137e0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   137e4:	ldr	r1, [sp, #24]
   137e8:	add	r0, r4, r7
   137ec:	mov	r3, r1
   137f0:	ldrb	r1, [r0, r1]
   137f4:	cmp	r1, #0
   137f8:	beq	13820 <__assert_fail@plt+0x2724>
   137fc:	add	r3, r3, #1
   13800:	add	r1, r7, r3
   13804:	cmp	r1, r2
   13808:	mov	r1, r3
   1380c:	bcc	137ec <__assert_fail@plt+0x26f0>
   13810:	b	13318 <__assert_fail@plt+0x221c>
   13814:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13818:	ldr	r1, [sp, #24]
   1381c:	b	13318 <__assert_fail@plt+0x221c>
   13820:	mov	r1, r3
   13824:	b	13318 <__assert_fail@plt+0x221c>
   13828:	mov	r9, #0
   1382c:	mov	r4, r1
   13830:	b	12fd4 <__assert_fail@plt+0x1ed8>
   13834:	mov	sl, r7
   13838:	b	13840 <__assert_fail@plt+0x2744>
   1383c:	mvn	sl, #0
   13840:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13844:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13848:	eor	r0, r1, #2
   1384c:	orr	r0, r0, r8
   13850:	clz	r0, r0
   13854:	lsr	r0, r0, #5
   13858:	tst	r2, r0
   1385c:	bne	13904 <__assert_fail@plt+0x2808>
   13860:	subs	r0, r1, #2
   13864:	movwne	r0, #1
   13868:	orr	r0, r2, r0
   1386c:	tst	r0, #1
   13870:	ldreq	r0, [sp, #60]	; 0x3c
   13874:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   13878:	eoreq	r0, r0, #1
   1387c:	tsteq	r0, #1
   13880:	bne	13998 <__assert_fail@plt+0x289c>
   13884:	tst	r1, #1
   13888:	bne	13964 <__assert_fail@plt+0x2868>
   1388c:	ldr	r6, [sp, #56]	; 0x38
   13890:	mov	r9, #0
   13894:	cmp	r6, #0
   13898:	beq	13990 <__assert_fail@plt+0x2894>
   1389c:	ldr	r0, [sp, #84]	; 0x54
   138a0:	mov	r1, #0
   138a4:	mov	r7, #2
   138a8:	cmp	ip, #0
   138ac:	str	r1, [fp, #-48]	; 0xffffffd0
   138b0:	mov	r1, #0
   138b4:	str	r1, [fp, #-76]	; 0xffffffb4
   138b8:	beq	12a20 <__assert_fail@plt+0x1924>
   138bc:	b	13998 <__assert_fail@plt+0x289c>
   138c0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   138c4:	ldr	r1, [fp, #12]
   138c8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   138cc:	mov	r5, r3
   138d0:	mov	ip, r6
   138d4:	mov	r3, sl
   138d8:	b	13928 <__assert_fail@plt+0x282c>
   138dc:	tst	r4, #1
   138e0:	ldr	r5, [fp, #-84]	; 0xffffffac
   138e4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   138e8:	ldr	r1, [fp, #12]
   138ec:	ldr	r3, [sp, #36]	; 0x24
   138f0:	mov	r0, #2
   138f4:	movwne	r0, #4
   138f8:	mov	r2, r0
   138fc:	b	13928 <__assert_fail@plt+0x282c>
   13900:	ldr	ip, [sp, #88]	; 0x58
   13904:	ldr	r1, [sp, #84]	; 0x54
   13908:	mov	r0, #2
   1390c:	tst	r1, #1
   13910:	movwne	r0, #4
   13914:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13918:	ldr	r1, [fp, #12]
   1391c:	mov	r3, sl
   13920:	cmp	r2, #2
   13924:	moveq	r2, r0
   13928:	mov	r0, #0
   1392c:	bic	r1, r1, #2
   13930:	str	r2, [sp]
   13934:	mov	r2, r4
   13938:	str	r0, [sp, #8]
   1393c:	ldr	r0, [sp, #76]	; 0x4c
   13940:	str	r1, [sp, #4]
   13944:	mov	r1, ip
   13948:	str	r0, [sp, #12]
   1394c:	ldr	r0, [sp, #80]	; 0x50
   13950:	str	r0, [sp, #16]
   13954:	mov	r0, r5
   13958:	bl	12994 <__assert_fail@plt+0x1898>
   1395c:	mov	r8, r0
   13960:	b	139e4 <__assert_fail@plt+0x28e8>
   13964:	mov	r0, #5
   13968:	ldr	r1, [sp, #56]	; 0x38
   1396c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13970:	mov	r3, sl
   13974:	str	r0, [sp]
   13978:	ldr	r0, [fp, #12]
   1397c:	str	r0, [sp, #4]
   13980:	ldr	r0, [fp, #16]
   13984:	str	r0, [sp, #8]
   13988:	ldr	r0, [sp, #76]	; 0x4c
   1398c:	b	13948 <__assert_fail@plt+0x284c>
   13990:	mov	r0, #0
   13994:	str	r0, [fp, #-76]	; 0xffffffb4
   13998:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1399c:	cmp	r1, #0
   139a0:	beq	139d8 <__assert_fail@plt+0x28dc>
   139a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   139a8:	tst	r0, #1
   139ac:	bne	139d8 <__assert_fail@plt+0x28dc>
   139b0:	ldrb	r0, [r1]
   139b4:	cmp	r0, #0
   139b8:	beq	139d8 <__assert_fail@plt+0x28dc>
   139bc:	add	r1, r1, #1
   139c0:	cmp	r8, ip
   139c4:	strbcc	r0, [r5, r8]
   139c8:	add	r8, r8, #1
   139cc:	ldrb	r0, [r1], #1
   139d0:	cmp	r0, #0
   139d4:	bne	139c0 <__assert_fail@plt+0x28c4>
   139d8:	cmp	r8, ip
   139dc:	movcc	r0, #0
   139e0:	strbcc	r0, [r5, r8]
   139e4:	mov	r0, r8
   139e8:	sub	sp, fp, #28
   139ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139f0:	mov	r0, #4
   139f4:	b	13914 <__assert_fail@plt+0x2818>
   139f8:	mov	r4, r1
   139fc:	b	13904 <__assert_fail@plt+0x2808>
   13a00:	bl	110e4 <abort@plt>
   13a04:	mov	r3, r2
   13a08:	mov	r2, #0
   13a0c:	b	13a10 <__assert_fail@plt+0x2914>
   13a10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a14:	add	fp, sp, #28
   13a18:	sub	sp, sp, #36	; 0x24
   13a1c:	movw	r8, #29040	; 0x7170
   13a20:	cmp	r3, #0
   13a24:	mov	r4, r2
   13a28:	str	r2, [sp, #24]
   13a2c:	mov	r5, r1
   13a30:	mov	r6, r0
   13a34:	str	r0, [sp, #20]
   13a38:	movt	r8, #2
   13a3c:	movne	r8, r3
   13a40:	bl	1100c <__errno_location@plt>
   13a44:	str	r0, [sp, #28]
   13a48:	ldr	r1, [r8, #40]	; 0x28
   13a4c:	ldr	r2, [r8, #44]	; 0x2c
   13a50:	ldr	r7, [r0]
   13a54:	cmp	r4, #0
   13a58:	add	sl, r8, #8
   13a5c:	mov	r0, #0
   13a60:	ldm	r8, {r3, r9}
   13a64:	orreq	r9, r9, #1
   13a68:	stm	sp, {r3, r9, sl}
   13a6c:	str	r1, [sp, #12]
   13a70:	str	r2, [sp, #16]
   13a74:	mov	r1, #0
   13a78:	mov	r2, r6
   13a7c:	mov	r3, r5
   13a80:	str	r7, [sp, #32]
   13a84:	mov	r7, r5
   13a88:	bl	12994 <__assert_fail@plt+0x1898>
   13a8c:	add	r4, r0, #1
   13a90:	mov	r5, r0
   13a94:	mov	r0, r4
   13a98:	bl	14788 <__assert_fail@plt+0x368c>
   13a9c:	mov	r6, r0
   13aa0:	ldr	r0, [r8]
   13aa4:	ldr	r2, [r8, #44]	; 0x2c
   13aa8:	ldr	r1, [r8, #40]	; 0x28
   13aac:	mov	r3, r7
   13ab0:	stm	sp, {r0, r9, sl}
   13ab4:	str	r2, [sp, #16]
   13ab8:	ldr	r2, [sp, #20]
   13abc:	str	r1, [sp, #12]
   13ac0:	mov	r0, r6
   13ac4:	mov	r1, r4
   13ac8:	bl	12994 <__assert_fail@plt+0x1898>
   13acc:	ldr	r0, [sp, #24]
   13ad0:	ldr	r1, [sp, #32]
   13ad4:	ldr	r2, [sp, #28]
   13ad8:	cmp	r0, #0
   13adc:	str	r1, [r2]
   13ae0:	strne	r5, [r0]
   13ae4:	mov	r0, r6
   13ae8:	sub	sp, fp, #28
   13aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13af0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13af4:	add	fp, sp, #24
   13af8:	movw	r5, #28924	; 0x70fc
   13afc:	movw	r8, #28920	; 0x70f8
   13b00:	movt	r5, #2
   13b04:	movt	r8, #2
   13b08:	ldr	r0, [r5]
   13b0c:	ldr	r4, [r8]
   13b10:	cmp	r0, #2
   13b14:	blt	13b40 <__assert_fail@plt+0x2a44>
   13b18:	add	r7, r4, #12
   13b1c:	mov	r6, #0
   13b20:	ldr	r0, [r7, r6, lsl #3]
   13b24:	bl	12694 <__assert_fail@plt+0x1598>
   13b28:	ldr	r1, [r5]
   13b2c:	add	r2, r6, #2
   13b30:	add	r0, r6, #1
   13b34:	mov	r6, r0
   13b38:	cmp	r2, r1
   13b3c:	blt	13b20 <__assert_fail@plt+0x2a24>
   13b40:	ldr	r0, [r4, #4]
   13b44:	movw	r9, #29088	; 0x71a0
   13b48:	movw	r7, #28928	; 0x7100
   13b4c:	movt	r9, #2
   13b50:	movt	r7, #2
   13b54:	cmp	r0, r9
   13b58:	beq	13b68 <__assert_fail@plt+0x2a6c>
   13b5c:	bl	12694 <__assert_fail@plt+0x1598>
   13b60:	mov	r0, #256	; 0x100
   13b64:	stm	r7, {r0, r9}
   13b68:	cmp	r4, r7
   13b6c:	beq	13b7c <__assert_fail@plt+0x2a80>
   13b70:	mov	r0, r4
   13b74:	bl	12694 <__assert_fail@plt+0x1598>
   13b78:	str	r7, [r8]
   13b7c:	mov	r0, #1
   13b80:	str	r0, [r5]
   13b84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13b88:	movw	r3, #29040	; 0x7170
   13b8c:	mvn	r2, #0
   13b90:	movt	r3, #2
   13b94:	b	13b98 <__assert_fail@plt+0x2a9c>
   13b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b9c:	add	fp, sp, #28
   13ba0:	sub	sp, sp, #44	; 0x2c
   13ba4:	mov	r7, r3
   13ba8:	str	r2, [sp, #36]	; 0x24
   13bac:	str	r1, [sp, #32]
   13bb0:	mov	r5, r0
   13bb4:	bl	1100c <__errno_location@plt>
   13bb8:	cmp	r5, #0
   13bbc:	bmi	13d2c <__assert_fail@plt+0x2c30>
   13bc0:	cmn	r5, #-2147483647	; 0x80000001
   13bc4:	beq	13d2c <__assert_fail@plt+0x2c30>
   13bc8:	movw	r8, #28924	; 0x70fc
   13bcc:	movw	r4, #28920	; 0x70f8
   13bd0:	str	r0, [sp, #28]
   13bd4:	ldr	r0, [r0]
   13bd8:	movt	r8, #2
   13bdc:	movt	r4, #2
   13be0:	ldr	r1, [r8]
   13be4:	ldr	r6, [r4]
   13be8:	str	r0, [sp, #24]
   13bec:	cmp	r1, r5
   13bf0:	ble	13bfc <__assert_fail@plt+0x2b00>
   13bf4:	mov	sl, r6
   13bf8:	b	13c68 <__assert_fail@plt+0x2b6c>
   13bfc:	movw	r9, #28928	; 0x7100
   13c00:	mov	r0, #8
   13c04:	str	r1, [fp, #-32]	; 0xffffffe0
   13c08:	sub	r1, r5, r1
   13c0c:	mvn	r3, #-2147483648	; 0x80000000
   13c10:	movt	r9, #2
   13c14:	str	r0, [sp]
   13c18:	add	r2, r1, #1
   13c1c:	sub	r1, fp, #32
   13c20:	subs	r0, r6, r9
   13c24:	movne	r0, r6
   13c28:	bl	148b8 <__assert_fail@plt+0x37bc>
   13c2c:	mov	sl, r0
   13c30:	cmp	r6, r9
   13c34:	str	r0, [r4]
   13c38:	bne	13c44 <__assert_fail@plt+0x2b48>
   13c3c:	ldrd	r0, [r9]
   13c40:	stm	sl, {r0, r1}
   13c44:	ldr	r1, [r8]
   13c48:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13c4c:	add	r0, sl, r1, lsl #3
   13c50:	sub	r1, r2, r1
   13c54:	lsl	r2, r1, #3
   13c58:	mov	r1, #0
   13c5c:	bl	11024 <memset@plt>
   13c60:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13c64:	str	r0, [r8]
   13c68:	mov	r9, sl
   13c6c:	ldm	r7, {r0, r1}
   13c70:	orr	r8, r1, #1
   13c74:	add	r1, r7, #8
   13c78:	ldr	r2, [r7, #40]	; 0x28
   13c7c:	ldr	r3, [r7, #44]	; 0x2c
   13c80:	ldr	r6, [r9, r5, lsl #3]!
   13c84:	str	r1, [sp, #20]
   13c88:	ldr	r4, [r9, #4]!
   13c8c:	stm	sp, {r0, r8}
   13c90:	add	r0, sp, #8
   13c94:	stm	r0, {r1, r2, r3}
   13c98:	ldr	r2, [sp, #32]
   13c9c:	ldr	r3, [sp, #36]	; 0x24
   13ca0:	mov	r1, r6
   13ca4:	mov	r0, r4
   13ca8:	bl	12994 <__assert_fail@plt+0x1898>
   13cac:	cmp	r6, r0
   13cb0:	bhi	13d14 <__assert_fail@plt+0x2c18>
   13cb4:	add	r6, r0, #1
   13cb8:	movw	r0, #29088	; 0x71a0
   13cbc:	movt	r0, #2
   13cc0:	str	r6, [sl, r5, lsl #3]
   13cc4:	cmp	r4, r0
   13cc8:	beq	13cd4 <__assert_fail@plt+0x2bd8>
   13ccc:	mov	r0, r4
   13cd0:	bl	12694 <__assert_fail@plt+0x1598>
   13cd4:	mov	r0, r6
   13cd8:	bl	14788 <__assert_fail@plt+0x368c>
   13cdc:	str	r0, [r9]
   13ce0:	mov	r4, r0
   13ce4:	add	r3, sp, #8
   13ce8:	ldr	r0, [r7]
   13cec:	ldr	r1, [r7, #40]	; 0x28
   13cf0:	ldr	r2, [r7, #44]	; 0x2c
   13cf4:	stm	sp, {r0, r8}
   13cf8:	ldr	r0, [sp, #20]
   13cfc:	stm	r3, {r0, r1, r2}
   13d00:	ldr	r2, [sp, #32]
   13d04:	ldr	r3, [sp, #36]	; 0x24
   13d08:	mov	r0, r4
   13d0c:	mov	r1, r6
   13d10:	bl	12994 <__assert_fail@plt+0x1898>
   13d14:	ldr	r0, [sp, #28]
   13d18:	ldr	r1, [sp, #24]
   13d1c:	str	r1, [r0]
   13d20:	mov	r0, r4
   13d24:	sub	sp, fp, #28
   13d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d2c:	bl	110e4 <abort@plt>
   13d30:	movw	r3, #29040	; 0x7170
   13d34:	movt	r3, #2
   13d38:	b	13b98 <__assert_fail@plt+0x2a9c>
   13d3c:	movw	r3, #29040	; 0x7170
   13d40:	mov	r1, r0
   13d44:	mov	r0, #0
   13d48:	mvn	r2, #0
   13d4c:	movt	r3, #2
   13d50:	b	13b98 <__assert_fail@plt+0x2a9c>
   13d54:	movw	r3, #29040	; 0x7170
   13d58:	mov	r2, r1
   13d5c:	mov	r1, r0
   13d60:	mov	r0, #0
   13d64:	movt	r3, #2
   13d68:	b	13b98 <__assert_fail@plt+0x2a9c>
   13d6c:	push	{fp, lr}
   13d70:	mov	fp, sp
   13d74:	sub	sp, sp, #48	; 0x30
   13d78:	vmov.i32	q8, #0	; 0x00000000
   13d7c:	mov	ip, #32
   13d80:	mov	r3, sp
   13d84:	mov	lr, r2
   13d88:	cmp	r1, #10
   13d8c:	add	r2, r3, #16
   13d90:	vst1.64	{d16-d17}, [r3], ip
   13d94:	vst1.64	{d16-d17}, [r2]
   13d98:	vst1.64	{d16-d17}, [r3]
   13d9c:	beq	13dbc <__assert_fail@plt+0x2cc0>
   13da0:	str	r1, [sp]
   13da4:	mov	r3, sp
   13da8:	mov	r1, lr
   13dac:	mvn	r2, #0
   13db0:	bl	13b98 <__assert_fail@plt+0x2a9c>
   13db4:	mov	sp, fp
   13db8:	pop	{fp, pc}
   13dbc:	bl	110e4 <abort@plt>
   13dc0:	push	{r4, sl, fp, lr}
   13dc4:	add	fp, sp, #8
   13dc8:	sub	sp, sp, #48	; 0x30
   13dcc:	vmov.i32	q8, #0	; 0x00000000
   13dd0:	mov	ip, r3
   13dd4:	mov	r3, sp
   13dd8:	mov	lr, #32
   13ddc:	cmp	r1, #10
   13de0:	add	r4, r3, #16
   13de4:	vst1.64	{d16-d17}, [r3], lr
   13de8:	vst1.64	{d16-d17}, [r4]
   13dec:	vst1.64	{d16-d17}, [r3]
   13df0:	beq	13e10 <__assert_fail@plt+0x2d14>
   13df4:	str	r1, [sp]
   13df8:	mov	r1, r2
   13dfc:	mov	r3, sp
   13e00:	mov	r2, ip
   13e04:	bl	13b98 <__assert_fail@plt+0x2a9c>
   13e08:	sub	sp, fp, #8
   13e0c:	pop	{r4, sl, fp, pc}
   13e10:	bl	110e4 <abort@plt>
   13e14:	mov	r2, r1
   13e18:	mov	r1, r0
   13e1c:	mov	r0, #0
   13e20:	b	13d6c <__assert_fail@plt+0x2c70>
   13e24:	mov	r3, r2
   13e28:	mov	r2, r1
   13e2c:	mov	r1, r0
   13e30:	mov	r0, #0
   13e34:	b	13dc0 <__assert_fail@plt+0x2cc4>
   13e38:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13e3c:	add	fp, sp, #24
   13e40:	sub	sp, sp, #48	; 0x30
   13e44:	movw	r8, #29040	; 0x7170
   13e48:	mov	lr, r0
   13e4c:	mov	r3, sp
   13e50:	mov	ip, r1
   13e54:	movt	r8, #2
   13e58:	mov	r1, r3
   13e5c:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   13e60:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   13e64:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   13e68:	stm	r1, {r0, r4, r5, r6, r7, r9}
   13e6c:	ubfx	r0, r2, #5, #3
   13e70:	and	r2, r2, #31
   13e74:	mov	r4, #1
   13e78:	add	r0, r3, r0, lsl #2
   13e7c:	ldr	r1, [r0, #8]
   13e80:	bic	r4, r4, r1, lsr r2
   13e84:	eor	r1, r1, r4, lsl r2
   13e88:	mov	r2, ip
   13e8c:	str	r1, [r0, #8]
   13e90:	mov	r0, #0
   13e94:	mov	r1, lr
   13e98:	bl	13b98 <__assert_fail@plt+0x2a9c>
   13e9c:	sub	sp, fp, #24
   13ea0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13ea4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ea8:	add	fp, sp, #24
   13eac:	sub	sp, sp, #48	; 0x30
   13eb0:	movw	lr, #29040	; 0x7170
   13eb4:	mov	ip, r0
   13eb8:	mov	r3, sp
   13ebc:	movt	lr, #2
   13ec0:	mov	r2, r3
   13ec4:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   13ec8:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   13ecc:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13ed0:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13ed4:	ubfx	r0, r1, #5, #3
   13ed8:	and	r1, r1, #31
   13edc:	mov	r7, #1
   13ee0:	add	r0, r3, r0, lsl #2
   13ee4:	ldr	r2, [r0, #8]
   13ee8:	bic	r7, r7, r2, lsr r1
   13eec:	eor	r1, r2, r7, lsl r1
   13ef0:	mvn	r2, #0
   13ef4:	str	r1, [r0, #8]
   13ef8:	mov	r0, #0
   13efc:	mov	r1, ip
   13f00:	bl	13b98 <__assert_fail@plt+0x2a9c>
   13f04:	sub	sp, fp, #24
   13f08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f0c:	push	{r4, r5, r6, r7, fp, lr}
   13f10:	add	fp, sp, #16
   13f14:	sub	sp, sp, #48	; 0x30
   13f18:	movw	lr, #29040	; 0x7170
   13f1c:	mov	ip, r0
   13f20:	mov	r3, sp
   13f24:	movt	lr, #2
   13f28:	mov	r2, r3
   13f2c:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13f30:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13f34:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13f38:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13f3c:	mov	r1, ip
   13f40:	mvn	r2, #0
   13f44:	ldr	r0, [sp, #12]
   13f48:	orr	r0, r0, #67108864	; 0x4000000
   13f4c:	str	r0, [sp, #12]
   13f50:	mov	r0, #0
   13f54:	bl	13b98 <__assert_fail@plt+0x2a9c>
   13f58:	sub	sp, fp, #16
   13f5c:	pop	{r4, r5, r6, r7, fp, pc}
   13f60:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f64:	add	fp, sp, #24
   13f68:	sub	sp, sp, #48	; 0x30
   13f6c:	movw	r8, #29040	; 0x7170
   13f70:	mov	ip, r1
   13f74:	mov	lr, r0
   13f78:	mov	r3, sp
   13f7c:	movt	r8, #2
   13f80:	mov	r2, r3
   13f84:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13f88:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13f8c:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   13f90:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13f94:	mov	r1, lr
   13f98:	mov	r2, ip
   13f9c:	ldr	r0, [sp, #12]
   13fa0:	orr	r0, r0, #67108864	; 0x4000000
   13fa4:	str	r0, [sp, #12]
   13fa8:	mov	r0, #0
   13fac:	bl	13b98 <__assert_fail@plt+0x2a9c>
   13fb0:	sub	sp, fp, #24
   13fb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13fb8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13fbc:	add	fp, sp, #24
   13fc0:	sub	sp, sp, #96	; 0x60
   13fc4:	vmov.i32	q8, #0	; 0x00000000
   13fc8:	mov	lr, sp
   13fcc:	mov	ip, r2
   13fd0:	cmp	r1, #10
   13fd4:	add	r3, lr, #16
   13fd8:	mov	r2, lr
   13fdc:	vst1.64	{d16-d17}, [r3]
   13fe0:	mov	r3, #28
   13fe4:	vst1.64	{d16-d17}, [r2], r3
   13fe8:	vst1.32	{d16-d17}, [r2]
   13fec:	beq	1402c <__assert_fail@plt+0x2f30>
   13ff0:	str	r1, [sp, #48]	; 0x30
   13ff4:	add	r3, sp, #48	; 0x30
   13ff8:	ldm	lr!, {r2, r4, r5, r6, r7}
   13ffc:	add	r1, r3, #4
   14000:	stmia	r1!, {r2, r4, r5, r6, r7}
   14004:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   14008:	stm	r1, {r2, r4, r5, r6, r7, r8}
   1400c:	mvn	r2, #0
   14010:	ldr	r1, [sp, #60]	; 0x3c
   14014:	orr	r1, r1, #67108864	; 0x4000000
   14018:	str	r1, [sp, #60]	; 0x3c
   1401c:	mov	r1, ip
   14020:	bl	13b98 <__assert_fail@plt+0x2a9c>
   14024:	sub	sp, fp, #24
   14028:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1402c:	bl	110e4 <abort@plt>
   14030:	push	{fp, lr}
   14034:	mov	fp, sp
   14038:	sub	sp, sp, #8
   1403c:	mvn	ip, #0
   14040:	str	ip, [sp]
   14044:	bl	14050 <__assert_fail@plt+0x2f54>
   14048:	mov	sp, fp
   1404c:	pop	{fp, pc}
   14050:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14054:	add	fp, sp, #24
   14058:	sub	sp, sp, #48	; 0x30
   1405c:	movw	ip, #29040	; 0x7170
   14060:	mov	lr, r3
   14064:	mov	r3, sp
   14068:	cmp	r1, #0
   1406c:	movt	ip, #2
   14070:	cmpne	r2, #0
   14074:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   14078:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   1407c:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   14080:	stm	r3, {r4, r5, r6, r7, r8, r9}
   14084:	mov	r3, #10
   14088:	str	r3, [sp]
   1408c:	bne	14094 <__assert_fail@plt+0x2f98>
   14090:	bl	110e4 <abort@plt>
   14094:	ldr	ip, [fp, #8]
   14098:	str	r2, [sp, #44]	; 0x2c
   1409c:	str	r1, [sp, #40]	; 0x28
   140a0:	mov	r3, sp
   140a4:	mov	r1, lr
   140a8:	mov	r2, ip
   140ac:	bl	13b98 <__assert_fail@plt+0x2a9c>
   140b0:	sub	sp, fp, #24
   140b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   140b8:	push	{fp, lr}
   140bc:	mov	fp, sp
   140c0:	sub	sp, sp, #8
   140c4:	mov	r3, r2
   140c8:	mov	r2, r1
   140cc:	mov	r1, r0
   140d0:	mvn	r0, #0
   140d4:	str	r0, [sp]
   140d8:	mov	r0, #0
   140dc:	bl	14050 <__assert_fail@plt+0x2f54>
   140e0:	mov	sp, fp
   140e4:	pop	{fp, pc}
   140e8:	push	{fp, lr}
   140ec:	mov	fp, sp
   140f0:	sub	sp, sp, #8
   140f4:	mov	ip, r2
   140f8:	mov	r2, r1
   140fc:	mov	r1, r0
   14100:	str	r3, [sp]
   14104:	mov	r0, #0
   14108:	mov	r3, ip
   1410c:	bl	14050 <__assert_fail@plt+0x2f54>
   14110:	mov	sp, fp
   14114:	pop	{fp, pc}
   14118:	movw	r3, #28936	; 0x7108
   1411c:	movt	r3, #2
   14120:	b	13b98 <__assert_fail@plt+0x2a9c>
   14124:	movw	r3, #28936	; 0x7108
   14128:	mov	r2, r1
   1412c:	mov	r1, r0
   14130:	mov	r0, #0
   14134:	movt	r3, #2
   14138:	b	13b98 <__assert_fail@plt+0x2a9c>
   1413c:	movw	r3, #28936	; 0x7108
   14140:	mvn	r2, #0
   14144:	movt	r3, #2
   14148:	b	13b98 <__assert_fail@plt+0x2a9c>
   1414c:	movw	r3, #28936	; 0x7108
   14150:	mov	r1, r0
   14154:	mov	r0, #0
   14158:	mvn	r2, #0
   1415c:	movt	r3, #2
   14160:	b	13b98 <__assert_fail@plt+0x2a9c>
   14164:	push	{r4, r5, fp, lr}
   14168:	add	fp, sp, #8
   1416c:	mov	r5, r0
   14170:	mov	r4, r1
   14174:	mov	r0, #0
   14178:	mov	r2, #5
   1417c:	mov	r1, r5
   14180:	bl	10f1c <dcgettext@plt>
   14184:	cmp	r0, r5
   14188:	popne	{r4, r5, fp, pc}
   1418c:	bl	1536c <__assert_fail@plt+0x4270>
   14190:	ldrb	r1, [r0]
   14194:	and	r1, r1, #223	; 0xdf
   14198:	cmp	r1, #71	; 0x47
   1419c:	beq	14204 <__assert_fail@plt+0x3108>
   141a0:	cmp	r1, #85	; 0x55
   141a4:	bne	1425c <__assert_fail@plt+0x3160>
   141a8:	ldrb	r1, [r0, #1]
   141ac:	and	r1, r1, #223	; 0xdf
   141b0:	cmp	r1, #84	; 0x54
   141b4:	bne	1425c <__assert_fail@plt+0x3160>
   141b8:	ldrb	r1, [r0, #2]
   141bc:	and	r1, r1, #223	; 0xdf
   141c0:	cmp	r1, #70	; 0x46
   141c4:	bne	1425c <__assert_fail@plt+0x3160>
   141c8:	ldrb	r1, [r0, #3]
   141cc:	cmp	r1, #45	; 0x2d
   141d0:	bne	1425c <__assert_fail@plt+0x3160>
   141d4:	ldrb	r1, [r0, #4]
   141d8:	cmp	r1, #56	; 0x38
   141dc:	bne	1425c <__assert_fail@plt+0x3160>
   141e0:	ldrb	r0, [r0, #5]
   141e4:	cmp	r0, #0
   141e8:	bne	1425c <__assert_fail@plt+0x3160>
   141ec:	ldrb	r1, [r5]
   141f0:	movw	r2, #24501	; 0x5fb5
   141f4:	movw	r0, #24505	; 0x5fb9
   141f8:	movt	r2, #1
   141fc:	movt	r0, #1
   14200:	b	1428c <__assert_fail@plt+0x3190>
   14204:	ldrb	r1, [r0, #1]
   14208:	and	r1, r1, #223	; 0xdf
   1420c:	cmp	r1, #66	; 0x42
   14210:	bne	1425c <__assert_fail@plt+0x3160>
   14214:	ldrb	r1, [r0, #2]
   14218:	cmp	r1, #49	; 0x31
   1421c:	bne	1425c <__assert_fail@plt+0x3160>
   14220:	ldrb	r1, [r0, #3]
   14224:	cmp	r1, #56	; 0x38
   14228:	bne	1425c <__assert_fail@plt+0x3160>
   1422c:	ldrb	r1, [r0, #4]
   14230:	cmp	r1, #48	; 0x30
   14234:	bne	1425c <__assert_fail@plt+0x3160>
   14238:	ldrb	r1, [r0, #5]
   1423c:	cmp	r1, #51	; 0x33
   14240:	bne	1425c <__assert_fail@plt+0x3160>
   14244:	ldrb	r1, [r0, #6]
   14248:	cmp	r1, #48	; 0x30
   1424c:	bne	1425c <__assert_fail@plt+0x3160>
   14250:	ldrb	r0, [r0, #7]
   14254:	cmp	r0, #0
   14258:	beq	14278 <__assert_fail@plt+0x317c>
   1425c:	movw	r1, #24495	; 0x5faf
   14260:	movw	r0, #24499	; 0x5fb3
   14264:	cmp	r4, #9
   14268:	movt	r1, #1
   1426c:	movt	r0, #1
   14270:	moveq	r0, r1
   14274:	pop	{r4, r5, fp, pc}
   14278:	ldrb	r1, [r5]
   1427c:	movw	r2, #24509	; 0x5fbd
   14280:	movw	r0, #24513	; 0x5fc1
   14284:	movt	r2, #1
   14288:	movt	r0, #1
   1428c:	cmp	r1, #96	; 0x60
   14290:	moveq	r0, r2
   14294:	pop	{r4, r5, fp, pc}
   14298:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1429c:	add	fp, sp, #24
   142a0:	sub	sp, sp, #32
   142a4:	ldr	r6, [fp, #12]
   142a8:	ldr	r7, [fp, #8]
   142ac:	mov	r4, r2
   142b0:	mov	r8, r0
   142b4:	cmp	r1, #0
   142b8:	beq	142e0 <__assert_fail@plt+0x31e4>
   142bc:	movw	r2, #24600	; 0x6018
   142c0:	mov	r5, r1
   142c4:	str	r3, [sp, #4]
   142c8:	str	r4, [sp]
   142cc:	mov	r0, r8
   142d0:	mov	r1, #1
   142d4:	movt	r2, #1
   142d8:	mov	r3, r5
   142dc:	b	142f8 <__assert_fail@plt+0x31fc>
   142e0:	movw	r2, #24612	; 0x6024
   142e4:	str	r3, [sp]
   142e8:	mov	r0, r8
   142ec:	mov	r1, #1
   142f0:	mov	r3, r4
   142f4:	movt	r2, #1
   142f8:	bl	11048 <__fprintf_chk@plt>
   142fc:	movw	r1, #24619	; 0x602b
   14300:	mov	r0, #0
   14304:	mov	r2, #5
   14308:	movt	r1, #1
   1430c:	bl	10f1c <dcgettext@plt>
   14310:	movw	r2, #25337	; 0x62f9
   14314:	mov	r3, r0
   14318:	movw	r0, #2022	; 0x7e6
   1431c:	mov	r1, #1
   14320:	movt	r2, #1
   14324:	str	r0, [sp]
   14328:	mov	r0, r8
   1432c:	bl	11048 <__fprintf_chk@plt>
   14330:	movw	r4, #23791	; 0x5cef
   14334:	mov	r1, r8
   14338:	movt	r4, #1
   1433c:	mov	r0, r4
   14340:	bl	10e8c <fputs_unlocked@plt>
   14344:	movw	r1, #24623	; 0x602f
   14348:	mov	r0, #0
   1434c:	mov	r2, #5
   14350:	movt	r1, #1
   14354:	bl	10f1c <dcgettext@plt>
   14358:	movw	r3, #24794	; 0x60da
   1435c:	mov	r2, r0
   14360:	mov	r0, r8
   14364:	mov	r1, #1
   14368:	movt	r3, #1
   1436c:	bl	11048 <__fprintf_chk@plt>
   14370:	mov	r0, r4
   14374:	mov	r1, r8
   14378:	bl	10e8c <fputs_unlocked@plt>
   1437c:	cmp	r6, #9
   14380:	bhi	143e4 <__assert_fail@plt+0x32e8>
   14384:	add	r0, pc, #0
   14388:	ldr	pc, [r0, r6, lsl #2]
   1438c:			; <UNDEFINED> instruction: 0x000145bc
   14390:			; <UNDEFINED> instruction: 0x000143b4
   14394:	strdeq	r4, [r1], -r0
   14398:	andeq	r4, r1, r8, lsl r4
   1439c:	andeq	r4, r1, r0, asr #8
   143a0:	andeq	r4, r1, r8, ror #8
   143a4:	muleq	r1, r0, r4
   143a8:	andeq	r4, r1, r8, asr #9
   143ac:	andeq	r4, r1, r8, ror #10
   143b0:	andeq	r4, r1, r0, lsl r5
   143b4:	movw	r1, #24828	; 0x60fc
   143b8:	mov	r0, #0
   143bc:	mov	r2, #5
   143c0:	movt	r1, #1
   143c4:	bl	10f1c <dcgettext@plt>
   143c8:	ldr	r3, [r7]
   143cc:	mov	r2, r0
   143d0:	mov	r0, r8
   143d4:	mov	r1, #1
   143d8:	sub	sp, fp, #24
   143dc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   143e0:	b	11048 <__fprintf_chk@plt>
   143e4:	movw	r1, #25147	; 0x623b
   143e8:	movt	r1, #1
   143ec:	b	14518 <__assert_fail@plt+0x341c>
   143f0:	movw	r1, #24844	; 0x610c
   143f4:	mov	r0, #0
   143f8:	mov	r2, #5
   143fc:	movt	r1, #1
   14400:	bl	10f1c <dcgettext@plt>
   14404:	mov	r2, r0
   14408:	ldr	r3, [r7]
   1440c:	ldr	r0, [r7, #4]
   14410:	str	r0, [sp]
   14414:	b	14504 <__assert_fail@plt+0x3408>
   14418:	movw	r1, #24867	; 0x6123
   1441c:	mov	r0, #0
   14420:	mov	r2, #5
   14424:	movt	r1, #1
   14428:	bl	10f1c <dcgettext@plt>
   1442c:	mov	r2, r0
   14430:	ldr	r3, [r7]
   14434:	ldmib	r7, {r0, r1}
   14438:	stm	sp, {r0, r1}
   1443c:	b	14504 <__assert_fail@plt+0x3408>
   14440:	movw	r1, #24895	; 0x613f
   14444:	mov	r0, #0
   14448:	mov	r2, #5
   1444c:	movt	r1, #1
   14450:	bl	10f1c <dcgettext@plt>
   14454:	ldr	r3, [r7]
   14458:	mov	r2, r0
   1445c:	ldmib	r7, {r0, r1, r7}
   14460:	stm	sp, {r0, r1, r7}
   14464:	b	14504 <__assert_fail@plt+0x3408>
   14468:	movw	r1, #24927	; 0x615f
   1446c:	mov	r0, #0
   14470:	mov	r2, #5
   14474:	movt	r1, #1
   14478:	bl	10f1c <dcgettext@plt>
   1447c:	ldr	r3, [r7]
   14480:	mov	r2, r0
   14484:	ldmib	r7, {r0, r1, r6, r7}
   14488:	stm	sp, {r0, r1, r6, r7}
   1448c:	b	14504 <__assert_fail@plt+0x3408>
   14490:	movw	r1, #24963	; 0x6183
   14494:	mov	r0, #0
   14498:	mov	r2, #5
   1449c:	movt	r1, #1
   144a0:	bl	10f1c <dcgettext@plt>
   144a4:	mov	r2, r0
   144a8:	ldr	r3, [r7]
   144ac:	ldmib	r7, {r0, r1, r6}
   144b0:	ldr	r5, [r7, #16]
   144b4:	ldr	r7, [r7, #20]
   144b8:	stm	sp, {r0, r1, r6}
   144bc:	str	r5, [sp, #12]
   144c0:	str	r7, [sp, #16]
   144c4:	b	14504 <__assert_fail@plt+0x3408>
   144c8:	movw	r1, #25003	; 0x61ab
   144cc:	mov	r0, #0
   144d0:	mov	r2, #5
   144d4:	movt	r1, #1
   144d8:	bl	10f1c <dcgettext@plt>
   144dc:	mov	r2, r0
   144e0:	ldr	r3, [r7]
   144e4:	ldmib	r7, {r0, r1, r6}
   144e8:	ldr	r5, [r7, #16]
   144ec:	ldr	r4, [r7, #20]
   144f0:	ldr	r7, [r7, #24]
   144f4:	stm	sp, {r0, r1, r6}
   144f8:	str	r5, [sp, #12]
   144fc:	str	r4, [sp, #16]
   14500:	str	r7, [sp, #20]
   14504:	mov	r0, r8
   14508:	mov	r1, #1
   1450c:	b	145b8 <__assert_fail@plt+0x34bc>
   14510:	movw	r1, #25095	; 0x6207
   14514:	movt	r1, #1
   14518:	mov	r0, #0
   1451c:	mov	r2, #5
   14520:	bl	10f1c <dcgettext@plt>
   14524:	mov	ip, r0
   14528:	ldr	r3, [r7]
   1452c:	ldr	r0, [r7, #4]
   14530:	ldr	r1, [r7, #8]
   14534:	ldr	r6, [r7, #12]
   14538:	ldr	r5, [r7, #16]
   1453c:	ldr	r4, [r7, #20]
   14540:	ldr	r2, [r7, #24]
   14544:	ldr	lr, [r7, #28]
   14548:	ldr	r7, [r7, #32]
   1454c:	stm	sp, {r0, r1, r6}
   14550:	str	r5, [sp, #12]
   14554:	str	r4, [sp, #16]
   14558:	str	r2, [sp, #20]
   1455c:	str	lr, [sp, #24]
   14560:	str	r7, [sp, #28]
   14564:	b	145ac <__assert_fail@plt+0x34b0>
   14568:	movw	r1, #25047	; 0x61d7
   1456c:	mov	r0, #0
   14570:	mov	r2, #5
   14574:	movt	r1, #1
   14578:	bl	10f1c <dcgettext@plt>
   1457c:	mov	ip, r0
   14580:	ldr	r3, [r7]
   14584:	ldmib	r7, {r0, r1, r6}
   14588:	ldr	r5, [r7, #16]
   1458c:	ldr	r4, [r7, #20]
   14590:	ldr	r2, [r7, #24]
   14594:	ldr	r7, [r7, #28]
   14598:	stm	sp, {r0, r1, r6}
   1459c:	str	r5, [sp, #12]
   145a0:	str	r4, [sp, #16]
   145a4:	str	r2, [sp, #20]
   145a8:	str	r7, [sp, #24]
   145ac:	mov	r0, r8
   145b0:	mov	r1, #1
   145b4:	mov	r2, ip
   145b8:	bl	11048 <__fprintf_chk@plt>
   145bc:	sub	sp, fp, #24
   145c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   145c4:	push	{r4, sl, fp, lr}
   145c8:	add	fp, sp, #8
   145cc:	sub	sp, sp, #8
   145d0:	ldr	ip, [fp, #8]
   145d4:	mov	lr, #0
   145d8:	ldr	r4, [ip, lr, lsl #2]
   145dc:	add	lr, lr, #1
   145e0:	cmp	r4, #0
   145e4:	bne	145d8 <__assert_fail@plt+0x34dc>
   145e8:	sub	r4, lr, #1
   145ec:	str	ip, [sp]
   145f0:	str	r4, [sp, #4]
   145f4:	bl	14298 <__assert_fail@plt+0x319c>
   145f8:	sub	sp, fp, #8
   145fc:	pop	{r4, sl, fp, pc}
   14600:	push	{r4, r5, fp, lr}
   14604:	add	fp, sp, #8
   14608:	sub	sp, sp, #48	; 0x30
   1460c:	ldr	r4, [fp, #8]
   14610:	mov	ip, #0
   14614:	add	lr, sp, #8
   14618:	ldr	r5, [r4]
   1461c:	cmp	r5, #0
   14620:	str	r5, [lr, ip, lsl #2]
   14624:	beq	1463c <__assert_fail@plt+0x3540>
   14628:	add	ip, ip, #1
   1462c:	add	r4, r4, #4
   14630:	cmp	ip, #10
   14634:	bne	14618 <__assert_fail@plt+0x351c>
   14638:	mov	ip, #10
   1463c:	str	lr, [sp]
   14640:	str	ip, [sp, #4]
   14644:	bl	14298 <__assert_fail@plt+0x319c>
   14648:	sub	sp, fp, #8
   1464c:	pop	{r4, r5, fp, pc}
   14650:	push	{fp, lr}
   14654:	mov	fp, sp
   14658:	sub	sp, sp, #8
   1465c:	add	ip, fp, #8
   14660:	str	ip, [sp, #4]
   14664:	str	ip, [sp]
   14668:	bl	14600 <__assert_fail@plt+0x3504>
   1466c:	mov	sp, fp
   14670:	pop	{fp, pc}
   14674:	push	{fp, lr}
   14678:	mov	fp, sp
   1467c:	movw	r0, #29012	; 0x7154
   14680:	movt	r0, #2
   14684:	ldr	r1, [r0]
   14688:	movw	r0, #23791	; 0x5cef
   1468c:	movt	r0, #1
   14690:	bl	10e8c <fputs_unlocked@plt>
   14694:	movw	r1, #25207	; 0x6277
   14698:	mov	r0, #0
   1469c:	mov	r2, #5
   146a0:	movt	r1, #1
   146a4:	bl	10f1c <dcgettext@plt>
   146a8:	movw	r2, #25227	; 0x628b
   146ac:	mov	r1, r0
   146b0:	mov	r0, #1
   146b4:	movt	r2, #1
   146b8:	bl	11030 <__printf_chk@plt>
   146bc:	movw	r1, #25249	; 0x62a1
   146c0:	mov	r0, #0
   146c4:	mov	r2, #5
   146c8:	movt	r1, #1
   146cc:	bl	10f1c <dcgettext@plt>
   146d0:	movw	r2, #23301	; 0x5b05
   146d4:	movw	r3, #23600	; 0x5c30
   146d8:	mov	r1, r0
   146dc:	mov	r0, #1
   146e0:	movt	r2, #1
   146e4:	movt	r3, #1
   146e8:	bl	11030 <__printf_chk@plt>
   146ec:	movw	r1, #25269	; 0x62b5
   146f0:	mov	r0, #0
   146f4:	mov	r2, #5
   146f8:	movt	r1, #1
   146fc:	bl	10f1c <dcgettext@plt>
   14700:	movw	r2, #25308	; 0x62dc
   14704:	mov	r1, r0
   14708:	mov	r0, #1
   1470c:	movt	r2, #1
   14710:	pop	{fp, lr}
   14714:	b	11030 <__printf_chk@plt>
   14718:	b	1471c <__assert_fail@plt+0x3620>
   1471c:	push	{r4, r5, r6, sl, fp, lr}
   14720:	add	fp, sp, #16
   14724:	mov	r4, r2
   14728:	mov	r5, r1
   1472c:	mov	r6, r0
   14730:	bl	15408 <__assert_fail@plt+0x430c>
   14734:	cmp	r0, #0
   14738:	popne	{r4, r5, r6, sl, fp, pc}
   1473c:	cmp	r6, #0
   14740:	beq	14754 <__assert_fail@plt+0x3658>
   14744:	cmp	r5, #0
   14748:	cmpne	r4, #0
   1474c:	bne	14754 <__assert_fail@plt+0x3658>
   14750:	pop	{r4, r5, r6, sl, fp, pc}
   14754:	bl	14b84 <__assert_fail@plt+0x3a88>
   14758:	push	{fp, lr}
   1475c:	mov	fp, sp
   14760:	bl	1526c <__assert_fail@plt+0x4170>
   14764:	cmp	r0, #0
   14768:	popne	{fp, pc}
   1476c:	bl	14b84 <__assert_fail@plt+0x3a88>
   14770:	push	{fp, lr}
   14774:	mov	fp, sp
   14778:	bl	1526c <__assert_fail@plt+0x4170>
   1477c:	cmp	r0, #0
   14780:	popne	{fp, pc}
   14784:	bl	14b84 <__assert_fail@plt+0x3a88>
   14788:	push	{fp, lr}
   1478c:	mov	fp, sp
   14790:	bl	1526c <__assert_fail@plt+0x4170>
   14794:	cmp	r0, #0
   14798:	popne	{fp, pc}
   1479c:	bl	14b84 <__assert_fail@plt+0x3a88>
   147a0:	push	{r4, r5, fp, lr}
   147a4:	add	fp, sp, #8
   147a8:	mov	r4, r1
   147ac:	mov	r5, r0
   147b0:	bl	1529c <__assert_fail@plt+0x41a0>
   147b4:	cmp	r0, #0
   147b8:	popne	{r4, r5, fp, pc}
   147bc:	cmp	r5, #0
   147c0:	beq	147d0 <__assert_fail@plt+0x36d4>
   147c4:	cmp	r4, #0
   147c8:	bne	147d0 <__assert_fail@plt+0x36d4>
   147cc:	pop	{r4, r5, fp, pc}
   147d0:	bl	14b84 <__assert_fail@plt+0x3a88>
   147d4:	push	{fp, lr}
   147d8:	mov	fp, sp
   147dc:	cmp	r1, #0
   147e0:	orreq	r1, r1, #1
   147e4:	bl	1529c <__assert_fail@plt+0x41a0>
   147e8:	cmp	r0, #0
   147ec:	popne	{fp, pc}
   147f0:	bl	14b84 <__assert_fail@plt+0x3a88>
   147f4:	push	{fp, lr}
   147f8:	mov	fp, sp
   147fc:	clz	r3, r2
   14800:	lsr	ip, r3, #5
   14804:	clz	r3, r1
   14808:	lsr	r3, r3, #5
   1480c:	orrs	r3, r3, ip
   14810:	movwne	r1, #1
   14814:	movwne	r2, #1
   14818:	bl	15408 <__assert_fail@plt+0x430c>
   1481c:	cmp	r0, #0
   14820:	popne	{fp, pc}
   14824:	bl	14b84 <__assert_fail@plt+0x3a88>
   14828:	push	{fp, lr}
   1482c:	mov	fp, sp
   14830:	mov	r2, r1
   14834:	mov	r1, r0
   14838:	mov	r0, #0
   1483c:	bl	15408 <__assert_fail@plt+0x430c>
   14840:	cmp	r0, #0
   14844:	popne	{fp, pc}
   14848:	bl	14b84 <__assert_fail@plt+0x3a88>
   1484c:	mov	r2, r1
   14850:	mov	r1, r0
   14854:	mov	r0, #0
   14858:	b	147f4 <__assert_fail@plt+0x36f8>
   1485c:	mov	r2, #1
   14860:	b	14864 <__assert_fail@plt+0x3768>
   14864:	push	{r4, r5, fp, lr}
   14868:	add	fp, sp, #8
   1486c:	ldr	r5, [r1]
   14870:	mov	r4, r1
   14874:	cmp	r0, #0
   14878:	beq	14890 <__assert_fail@plt+0x3794>
   1487c:	mov	r1, #1
   14880:	add	r1, r1, r5, lsr #1
   14884:	adds	r5, r5, r1
   14888:	bcc	148a8 <__assert_fail@plt+0x37ac>
   1488c:	bl	14b84 <__assert_fail@plt+0x3a88>
   14890:	cmp	r5, #0
   14894:	bne	148a8 <__assert_fail@plt+0x37ac>
   14898:	mov	r1, #64	; 0x40
   1489c:	cmp	r2, #64	; 0x40
   148a0:	udiv	r5, r1, r2
   148a4:	addhi	r5, r5, #1
   148a8:	mov	r1, r5
   148ac:	bl	1471c <__assert_fail@plt+0x3620>
   148b0:	str	r5, [r4]
   148b4:	pop	{r4, r5, fp, pc}
   148b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   148bc:	add	fp, sp, #24
   148c0:	ldr	r6, [r1]
   148c4:	mov	r8, r1
   148c8:	ldr	r4, [fp, #8]
   148cc:	add	r1, r6, r6, asr #1
   148d0:	cmp	r1, r6
   148d4:	mvnvs	r1, #-2147483648	; 0x80000000
   148d8:	cmp	r1, r3
   148dc:	mov	r5, r1
   148e0:	movgt	r5, r3
   148e4:	cmn	r3, #1
   148e8:	movle	r5, r1
   148ec:	cmn	r4, #1
   148f0:	ble	14910 <__assert_fail@plt+0x3814>
   148f4:	cmp	r4, #0
   148f8:	beq	14964 <__assert_fail@plt+0x3868>
   148fc:	cmn	r5, #1
   14900:	ble	14938 <__assert_fail@plt+0x383c>
   14904:	mvn	r7, #-2147483648	; 0x80000000
   14908:	udiv	r1, r7, r4
   1490c:	b	1492c <__assert_fail@plt+0x3830>
   14910:	cmn	r5, #1
   14914:	ble	14954 <__assert_fail@plt+0x3858>
   14918:	cmn	r4, #1
   1491c:	beq	14964 <__assert_fail@plt+0x3868>
   14920:	mov	r1, #-2147483648	; 0x80000000
   14924:	mvn	r7, #-2147483648	; 0x80000000
   14928:	sdiv	r1, r1, r4
   1492c:	cmp	r1, r5
   14930:	bge	14964 <__assert_fail@plt+0x3868>
   14934:	b	14974 <__assert_fail@plt+0x3878>
   14938:	beq	14964 <__assert_fail@plt+0x3868>
   1493c:	mov	r1, #-2147483648	; 0x80000000
   14940:	mvn	r7, #-2147483648	; 0x80000000
   14944:	sdiv	r1, r1, r5
   14948:	cmp	r1, r4
   1494c:	bge	14964 <__assert_fail@plt+0x3868>
   14950:	b	14974 <__assert_fail@plt+0x3878>
   14954:	mvn	r7, #-2147483648	; 0x80000000
   14958:	sdiv	r1, r7, r4
   1495c:	cmp	r5, r1
   14960:	blt	14974 <__assert_fail@plt+0x3878>
   14964:	mul	r1, r5, r4
   14968:	mov	r7, #64	; 0x40
   1496c:	cmp	r1, #63	; 0x3f
   14970:	bgt	1497c <__assert_fail@plt+0x3880>
   14974:	sdiv	r5, r7, r4
   14978:	mul	r1, r5, r4
   1497c:	cmp	r0, #0
   14980:	moveq	r7, #0
   14984:	streq	r7, [r8]
   14988:	sub	r7, r5, r6
   1498c:	cmp	r7, r2
   14990:	bge	14a34 <__assert_fail@plt+0x3938>
   14994:	add	r5, r6, r2
   14998:	mov	r2, #0
   1499c:	mov	r1, #0
   149a0:	cmp	r5, r3
   149a4:	movwgt	r2, #1
   149a8:	cmn	r3, #1
   149ac:	movwgt	r1, #1
   149b0:	cmp	r5, r6
   149b4:	bvs	14a1c <__assert_fail@plt+0x3920>
   149b8:	ands	r1, r1, r2
   149bc:	bne	14a1c <__assert_fail@plt+0x3920>
   149c0:	cmn	r4, #1
   149c4:	ble	149e4 <__assert_fail@plt+0x38e8>
   149c8:	cmp	r4, #0
   149cc:	beq	14a30 <__assert_fail@plt+0x3934>
   149d0:	cmn	r5, #1
   149d4:	ble	14a08 <__assert_fail@plt+0x390c>
   149d8:	mvn	r1, #-2147483648	; 0x80000000
   149dc:	udiv	r1, r1, r4
   149e0:	b	149fc <__assert_fail@plt+0x3900>
   149e4:	cmn	r5, #1
   149e8:	ble	14a20 <__assert_fail@plt+0x3924>
   149ec:	cmn	r4, #1
   149f0:	beq	14a30 <__assert_fail@plt+0x3934>
   149f4:	mov	r1, #-2147483648	; 0x80000000
   149f8:	sdiv	r1, r1, r4
   149fc:	cmp	r1, r5
   14a00:	bge	14a30 <__assert_fail@plt+0x3934>
   14a04:	b	14a1c <__assert_fail@plt+0x3920>
   14a08:	beq	14a30 <__assert_fail@plt+0x3934>
   14a0c:	mov	r1, #-2147483648	; 0x80000000
   14a10:	sdiv	r1, r1, r5
   14a14:	cmp	r1, r4
   14a18:	bge	14a30 <__assert_fail@plt+0x3934>
   14a1c:	bl	14b84 <__assert_fail@plt+0x3a88>
   14a20:	mvn	r1, #-2147483648	; 0x80000000
   14a24:	sdiv	r1, r1, r4
   14a28:	cmp	r5, r1
   14a2c:	blt	14a1c <__assert_fail@plt+0x3920>
   14a30:	mul	r1, r5, r4
   14a34:	bl	147a0 <__assert_fail@plt+0x36a4>
   14a38:	str	r5, [r8]
   14a3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a40:	push	{fp, lr}
   14a44:	mov	fp, sp
   14a48:	mov	r1, #1
   14a4c:	bl	15218 <__assert_fail@plt+0x411c>
   14a50:	cmp	r0, #0
   14a54:	popne	{fp, pc}
   14a58:	bl	14b84 <__assert_fail@plt+0x3a88>
   14a5c:	push	{fp, lr}
   14a60:	mov	fp, sp
   14a64:	bl	15218 <__assert_fail@plt+0x411c>
   14a68:	cmp	r0, #0
   14a6c:	popne	{fp, pc}
   14a70:	bl	14b84 <__assert_fail@plt+0x3a88>
   14a74:	push	{fp, lr}
   14a78:	mov	fp, sp
   14a7c:	mov	r1, #1
   14a80:	bl	15218 <__assert_fail@plt+0x411c>
   14a84:	cmp	r0, #0
   14a88:	popne	{fp, pc}
   14a8c:	bl	14b84 <__assert_fail@plt+0x3a88>
   14a90:	push	{fp, lr}
   14a94:	mov	fp, sp
   14a98:	bl	15218 <__assert_fail@plt+0x411c>
   14a9c:	cmp	r0, #0
   14aa0:	popne	{fp, pc}
   14aa4:	bl	14b84 <__assert_fail@plt+0x3a88>
   14aa8:	push	{r4, r5, fp, lr}
   14aac:	add	fp, sp, #8
   14ab0:	mov	r5, r0
   14ab4:	mov	r0, r1
   14ab8:	mov	r4, r1
   14abc:	bl	1526c <__assert_fail@plt+0x4170>
   14ac0:	cmp	r0, #0
   14ac4:	beq	14ad8 <__assert_fail@plt+0x39dc>
   14ac8:	mov	r1, r5
   14acc:	mov	r2, r4
   14ad0:	pop	{r4, r5, fp, lr}
   14ad4:	b	10eec <memcpy@plt>
   14ad8:	bl	14b84 <__assert_fail@plt+0x3a88>
   14adc:	push	{r4, r5, fp, lr}
   14ae0:	add	fp, sp, #8
   14ae4:	mov	r5, r0
   14ae8:	mov	r0, r1
   14aec:	mov	r4, r1
   14af0:	bl	1526c <__assert_fail@plt+0x4170>
   14af4:	cmp	r0, #0
   14af8:	beq	14b0c <__assert_fail@plt+0x3a10>
   14afc:	mov	r1, r5
   14b00:	mov	r2, r4
   14b04:	pop	{r4, r5, fp, lr}
   14b08:	b	10eec <memcpy@plt>
   14b0c:	bl	14b84 <__assert_fail@plt+0x3a88>
   14b10:	push	{r4, r5, fp, lr}
   14b14:	add	fp, sp, #8
   14b18:	mov	r5, r0
   14b1c:	add	r0, r1, #1
   14b20:	mov	r4, r1
   14b24:	bl	1526c <__assert_fail@plt+0x4170>
   14b28:	cmp	r0, #0
   14b2c:	beq	14b48 <__assert_fail@plt+0x3a4c>
   14b30:	mov	r1, #0
   14b34:	mov	r2, r4
   14b38:	strb	r1, [r0, r4]
   14b3c:	mov	r1, r5
   14b40:	pop	{r4, r5, fp, lr}
   14b44:	b	10eec <memcpy@plt>
   14b48:	bl	14b84 <__assert_fail@plt+0x3a88>
   14b4c:	push	{r4, r5, fp, lr}
   14b50:	add	fp, sp, #8
   14b54:	mov	r4, r0
   14b58:	bl	10ff4 <strlen@plt>
   14b5c:	add	r5, r0, #1
   14b60:	mov	r0, r5
   14b64:	bl	1526c <__assert_fail@plt+0x4170>
   14b68:	cmp	r0, #0
   14b6c:	beq	14b80 <__assert_fail@plt+0x3a84>
   14b70:	mov	r1, r4
   14b74:	mov	r2, r5
   14b78:	pop	{r4, r5, fp, lr}
   14b7c:	b	10eec <memcpy@plt>
   14b80:	bl	14b84 <__assert_fail@plt+0x3a88>
   14b84:	push	{fp, lr}
   14b88:	mov	fp, sp
   14b8c:	movw	r0, #28916	; 0x70f4
   14b90:	movw	r1, #25384	; 0x6328
   14b94:	mov	r2, #5
   14b98:	movt	r0, #2
   14b9c:	movt	r1, #1
   14ba0:	ldr	r4, [r0]
   14ba4:	mov	r0, #0
   14ba8:	bl	10f1c <dcgettext@plt>
   14bac:	movw	r2, #23280	; 0x5af0
   14bb0:	mov	r3, r0
   14bb4:	mov	r0, r4
   14bb8:	mov	r1, #0
   14bbc:	movt	r2, #1
   14bc0:	bl	10f88 <error@plt>
   14bc4:	bl	110e4 <abort@plt>
   14bc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bcc:	add	fp, sp, #28
   14bd0:	sub	sp, sp, #28
   14bd4:	cmp	r2, #37	; 0x25
   14bd8:	str	r3, [sp, #12]
   14bdc:	bcs	150f0 <__assert_fail@plt+0x3ff4>
   14be0:	ldr	sl, [fp, #8]
   14be4:	mov	r4, r2
   14be8:	mov	r6, r1
   14bec:	mov	r5, r0
   14bf0:	bl	1100c <__errno_location@plt>
   14bf4:	cmp	r6, #0
   14bf8:	add	r8, sp, #24
   14bfc:	mov	r7, r0
   14c00:	mov	r0, #0
   14c04:	mov	r2, r4
   14c08:	movne	r8, r6
   14c0c:	str	r0, [r7]
   14c10:	mov	r0, r5
   14c14:	mov	r1, r8
   14c18:	bl	11060 <strtoimax@plt>
   14c1c:	str	r1, [sp, #20]
   14c20:	str	r0, [sp, #16]
   14c24:	ldr	r4, [r8]
   14c28:	cmp	r4, r5
   14c2c:	beq	14c58 <__assert_fail@plt+0x3b5c>
   14c30:	mov	r6, r0
   14c34:	ldr	r0, [r7]
   14c38:	mov	r9, r1
   14c3c:	cmp	r0, #0
   14c40:	beq	14c98 <__assert_fail@plt+0x3b9c>
   14c44:	mov	r7, #4
   14c48:	cmp	r0, #34	; 0x22
   14c4c:	bne	150e4 <__assert_fail@plt+0x3fe8>
   14c50:	mov	r7, #1
   14c54:	b	14c9c <__assert_fail@plt+0x3ba0>
   14c58:	mov	r7, #4
   14c5c:	cmp	sl, #0
   14c60:	beq	150e4 <__assert_fail@plt+0x3fe8>
   14c64:	ldrb	r1, [r5]
   14c68:	cmp	r1, #0
   14c6c:	beq	150e4 <__assert_fail@plt+0x3fe8>
   14c70:	mov	r0, sl
   14c74:	bl	11000 <strchr@plt>
   14c78:	cmp	r0, #0
   14c7c:	beq	150e4 <__assert_fail@plt+0x3fe8>
   14c80:	mov	r9, #0
   14c84:	mov	r6, #1
   14c88:	mov	r7, #0
   14c8c:	str	r9, [sp, #20]
   14c90:	str	r6, [sp, #16]
   14c94:	b	14ca4 <__assert_fail@plt+0x3ba8>
   14c98:	mov	r7, r0
   14c9c:	cmp	sl, #0
   14ca0:	beq	14d48 <__assert_fail@plt+0x3c4c>
   14ca4:	ldrb	r5, [r4]
   14ca8:	cmp	r5, #0
   14cac:	beq	14d50 <__assert_fail@plt+0x3c54>
   14cb0:	mov	r0, sl
   14cb4:	mov	r1, r5
   14cb8:	bl	11000 <strchr@plt>
   14cbc:	cmp	r0, #0
   14cc0:	beq	14d58 <__assert_fail@plt+0x3c5c>
   14cc4:	sub	r0, r5, #69	; 0x45
   14cc8:	str	r7, [sp, #4]
   14ccc:	mov	r1, #1
   14cd0:	mov	r7, #1024	; 0x400
   14cd4:	cmp	r0, #21
   14cd8:	str	r1, [sp, #8]
   14cdc:	bhi	14cf4 <__assert_fail@plt+0x3bf8>
   14ce0:	movw	r2, #35141	; 0x8945
   14ce4:	mov	r1, #1
   14ce8:	movt	r2, #48	; 0x30
   14cec:	tst	r2, r1, lsl r0
   14cf0:	bne	14d10 <__assert_fail@plt+0x3c14>
   14cf4:	sub	r0, r5, #103	; 0x67
   14cf8:	cmp	r0, #13
   14cfc:	bhi	14d68 <__assert_fail@plt+0x3c6c>
   14d00:	mov	r1, #1
   14d04:	movw	r2, #8273	; 0x2051
   14d08:	tst	r2, r1, lsl r0
   14d0c:	beq	14d68 <__assert_fail@plt+0x3c6c>
   14d10:	ldr	r0, [fp, #8]
   14d14:	mov	r1, #48	; 0x30
   14d18:	bl	11000 <strchr@plt>
   14d1c:	cmp	r0, #0
   14d20:	beq	14d68 <__assert_fail@plt+0x3c6c>
   14d24:	ldrb	r0, [r4, #1]
   14d28:	ldr	sl, [sp, #12]
   14d2c:	cmp	r0, #66	; 0x42
   14d30:	cmpne	r0, #68	; 0x44
   14d34:	bne	14e3c <__assert_fail@plt+0x3d40>
   14d38:	mov	r0, #2
   14d3c:	mov	r7, #1000	; 0x3e8
   14d40:	str	r0, [sp, #8]
   14d44:	b	14d6c <__assert_fail@plt+0x3c70>
   14d48:	ldr	r0, [sp, #12]
   14d4c:	b	14d60 <__assert_fail@plt+0x3c64>
   14d50:	ldr	sl, [sp, #12]
   14d54:	b	150e0 <__assert_fail@plt+0x3fe4>
   14d58:	ldr	r0, [sp, #12]
   14d5c:	orr	r7, r7, #2
   14d60:	stm	r0, {r6, r9}
   14d64:	b	150e4 <__assert_fail@plt+0x3fe8>
   14d68:	ldr	sl, [sp, #12]
   14d6c:	cmp	r5, #89	; 0x59
   14d70:	bgt	14dd8 <__assert_fail@plt+0x3cdc>
   14d74:	sub	r0, r5, #66	; 0x42
   14d78:	cmp	r0, #14
   14d7c:	bhi	14e5c <__assert_fail@plt+0x3d60>
   14d80:	add	r1, pc, #0
   14d84:	ldr	pc, [r1, r0, lsl #2]
   14d88:	andeq	r4, r1, r4, asr #27
   14d8c:	andeq	r4, r1, r4, ror pc
   14d90:	andeq	r4, r1, r4, ror pc
   14d94:	andeq	r4, r1, r4, lsl #31
   14d98:	andeq	r4, r1, r4, ror pc
   14d9c:			; <UNDEFINED> instruction: 0x00014eb8
   14da0:	andeq	r4, r1, r4, ror pc
   14da4:	andeq	r4, r1, r4, ror pc
   14da8:	andeq	r4, r1, r4, ror pc
   14dac:	andeq	r4, r1, r0, ror #29
   14db0:	andeq	r4, r1, r4, ror pc
   14db4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14db8:	andeq	r4, r1, r4, ror pc
   14dbc:	andeq	r4, r1, r4, ror pc
   14dc0:	andeq	r4, r1, ip, lsr #31
   14dc4:	cmn	r9, #1
   14dc8:	ble	14fd4 <__assert_fail@plt+0x3ed8>
   14dcc:	cmp	r9, #2097152	; 0x200000
   14dd0:	blt	15000 <__assert_fail@plt+0x3f04>
   14dd4:	b	15080 <__assert_fail@plt+0x3f84>
   14dd8:	cmp	r5, #115	; 0x73
   14ddc:	bgt	14e94 <__assert_fail@plt+0x3d98>
   14de0:	sub	r0, r5, #98	; 0x62
   14de4:	cmp	r0, #11
   14de8:	bhi	14f44 <__assert_fail@plt+0x3e48>
   14dec:	add	r1, pc, #4
   14df0:	mov	r4, #0
   14df4:	ldr	pc, [r1, r0, lsl #2]
   14df8:	andeq	r4, r1, r8, lsr #28
   14dfc:	strheq	r5, [r1], -r4
   14e00:	andeq	r4, r1, r4, ror pc
   14e04:	andeq	r4, r1, r4, ror pc
   14e08:	andeq	r4, r1, r4, ror pc
   14e0c:			; <UNDEFINED> instruction: 0x00014eb8
   14e10:	andeq	r4, r1, r4, ror pc
   14e14:	andeq	r4, r1, r4, ror pc
   14e18:	andeq	r4, r1, r4, ror pc
   14e1c:	andeq	r4, r1, r0, ror #29
   14e20:	andeq	r4, r1, r4, ror pc
   14e24:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e28:	cmn	r9, #1
   14e2c:	ble	15014 <__assert_fail@plt+0x3f18>
   14e30:	cmp	r9, #4194304	; 0x400000
   14e34:	blt	15040 <__assert_fail@plt+0x3f44>
   14e38:	b	15080 <__assert_fail@plt+0x3f84>
   14e3c:	cmp	r0, #105	; 0x69
   14e40:	bne	14d6c <__assert_fail@plt+0x3c70>
   14e44:	ldrb	r0, [r4, #2]
   14e48:	mov	r1, #1
   14e4c:	cmp	r0, #66	; 0x42
   14e50:	movweq	r1, #3
   14e54:	str	r1, [sp, #8]
   14e58:	b	14d6c <__assert_fail@plt+0x3c70>
   14e5c:	cmp	r5, #84	; 0x54
   14e60:	beq	14f1c <__assert_fail@plt+0x3e20>
   14e64:	cmp	r5, #89	; 0x59
   14e68:	bne	14f74 <__assert_fail@plt+0x3e78>
   14e6c:	mov	r4, #0
   14e70:	mvn	r6, #7
   14e74:	add	r5, sp, #16
   14e78:	mov	r0, r5
   14e7c:	mov	r1, r7
   14e80:	bl	15110 <__assert_fail@plt+0x4014>
   14e84:	orr	r4, r0, r4
   14e88:	adds	r6, r6, #1
   14e8c:	bcc	14e78 <__assert_fail@plt+0x3d7c>
   14e90:	b	150b4 <__assert_fail@plt+0x3fb8>
   14e94:	cmp	r5, #116	; 0x74
   14e98:	beq	14f1c <__assert_fail@plt+0x3e20>
   14e9c:	cmp	r5, #119	; 0x77
   14ea0:	bne	14f74 <__assert_fail@plt+0x3e78>
   14ea4:	cmn	r9, #1
   14ea8:	ble	15054 <__assert_fail@plt+0x3f58>
   14eac:	cmp	r9, #1073741824	; 0x40000000
   14eb0:	bge	15080 <__assert_fail@plt+0x3f84>
   14eb4:	b	1509c <__assert_fail@plt+0x3fa0>
   14eb8:	mov	r4, #0
   14ebc:	mvn	r6, #2
   14ec0:	add	r5, sp, #16
   14ec4:	mov	r0, r5
   14ec8:	mov	r1, r7
   14ecc:	bl	15110 <__assert_fail@plt+0x4014>
   14ed0:	orr	r4, r0, r4
   14ed4:	adds	r6, r6, #1
   14ed8:	bcc	14ec4 <__assert_fail@plt+0x3dc8>
   14edc:	b	150b4 <__assert_fail@plt+0x3fb8>
   14ee0:	add	r0, sp, #16
   14ee4:	mov	r1, r7
   14ee8:	bl	15110 <__assert_fail@plt+0x4014>
   14eec:	mov	r4, r0
   14ef0:	b	150b4 <__assert_fail@plt+0x3fb8>
   14ef4:	mov	r4, #0
   14ef8:	mvn	r6, #1
   14efc:	add	r5, sp, #16
   14f00:	mov	r0, r5
   14f04:	mov	r1, r7
   14f08:	bl	15110 <__assert_fail@plt+0x4014>
   14f0c:	orr	r4, r0, r4
   14f10:	adds	r6, r6, #1
   14f14:	bcc	14f00 <__assert_fail@plt+0x3e04>
   14f18:	b	150b4 <__assert_fail@plt+0x3fb8>
   14f1c:	mov	r4, #0
   14f20:	mvn	r6, #3
   14f24:	add	r5, sp, #16
   14f28:	mov	r0, r5
   14f2c:	mov	r1, r7
   14f30:	bl	15110 <__assert_fail@plt+0x4014>
   14f34:	orr	r4, r0, r4
   14f38:	adds	r6, r6, #1
   14f3c:	bcc	14f28 <__assert_fail@plt+0x3e2c>
   14f40:	b	150b4 <__assert_fail@plt+0x3fb8>
   14f44:	cmp	r5, #90	; 0x5a
   14f48:	bne	14f74 <__assert_fail@plt+0x3e78>
   14f4c:	mov	r4, #0
   14f50:	mvn	r6, #6
   14f54:	add	r5, sp, #16
   14f58:	mov	r0, r5
   14f5c:	mov	r1, r7
   14f60:	bl	15110 <__assert_fail@plt+0x4014>
   14f64:	orr	r4, r0, r4
   14f68:	adds	r6, r6, #1
   14f6c:	bcc	14f58 <__assert_fail@plt+0x3e5c>
   14f70:	b	150b4 <__assert_fail@plt+0x3fb8>
   14f74:	stm	sl, {r6, r9}
   14f78:	ldr	r7, [sp, #4]
   14f7c:	orr	r7, r7, #2
   14f80:	b	150e4 <__assert_fail@plt+0x3fe8>
   14f84:	mov	r4, #0
   14f88:	mvn	r6, #5
   14f8c:	add	r5, sp, #16
   14f90:	mov	r0, r5
   14f94:	mov	r1, r7
   14f98:	bl	15110 <__assert_fail@plt+0x4014>
   14f9c:	orr	r4, r0, r4
   14fa0:	adds	r6, r6, #1
   14fa4:	bcc	14f90 <__assert_fail@plt+0x3e94>
   14fa8:	b	150b4 <__assert_fail@plt+0x3fb8>
   14fac:	mov	r4, #0
   14fb0:	mvn	r6, #4
   14fb4:	add	r5, sp, #16
   14fb8:	mov	r0, r5
   14fbc:	mov	r1, r7
   14fc0:	bl	15110 <__assert_fail@plt+0x4014>
   14fc4:	orr	r4, r0, r4
   14fc8:	adds	r6, r6, #1
   14fcc:	bcc	14fb8 <__assert_fail@plt+0x3ebc>
   14fd0:	b	150b4 <__assert_fail@plt+0x3fb8>
   14fd4:	and	r0, r6, r9
   14fd8:	cmn	r0, #1
   14fdc:	beq	15000 <__assert_fail@plt+0x3f04>
   14fe0:	mov	r0, #0
   14fe4:	mov	r1, #-2147483648	; 0x80000000
   14fe8:	mov	r2, r6
   14fec:	mov	r3, r9
   14ff0:	bl	15544 <__assert_fail@plt+0x4448>
   14ff4:	subs	r0, r0, #1024	; 0x400
   14ff8:	sbcs	r0, r1, #0
   14ffc:	blt	15080 <__assert_fail@plt+0x3f84>
   15000:	lsl	r0, r9, #10
   15004:	lsl	r1, r6, #10
   15008:	mov	r4, #0
   1500c:	orr	r0, r0, r6, lsr #22
   15010:	b	150ac <__assert_fail@plt+0x3fb0>
   15014:	and	r0, r6, r9
   15018:	cmn	r0, #1
   1501c:	beq	15040 <__assert_fail@plt+0x3f44>
   15020:	mov	r0, #0
   15024:	mov	r1, #-2147483648	; 0x80000000
   15028:	mov	r2, r6
   1502c:	mov	r3, r9
   15030:	bl	15544 <__assert_fail@plt+0x4448>
   15034:	subs	r0, r0, #512	; 0x200
   15038:	sbcs	r0, r1, #0
   1503c:	blt	15080 <__assert_fail@plt+0x3f84>
   15040:	lsl	r0, r9, #9
   15044:	lsl	r1, r6, #9
   15048:	mov	r4, #0
   1504c:	orr	r0, r0, r6, lsr #23
   15050:	b	150ac <__assert_fail@plt+0x3fb0>
   15054:	and	r0, r6, r9
   15058:	cmn	r0, #1
   1505c:	beq	1509c <__assert_fail@plt+0x3fa0>
   15060:	mov	r0, #0
   15064:	mov	r1, #-2147483648	; 0x80000000
   15068:	mov	r2, r6
   1506c:	mov	r3, r9
   15070:	bl	15544 <__assert_fail@plt+0x4448>
   15074:	subs	r0, r0, #2
   15078:	sbcs	r0, r1, #0
   1507c:	bge	1509c <__assert_fail@plt+0x3fa0>
   15080:	cmp	r9, #0
   15084:	mvn	r0, #-2147483648	; 0x80000000
   15088:	mvn	r1, #0
   1508c:	mov	r4, #1
   15090:	movmi	r0, #-2147483648	; 0x80000000
   15094:	movwmi	r1, #0
   15098:	b	150ac <__assert_fail@plt+0x3fb0>
   1509c:	lsl	r0, r9, #1
   150a0:	lsl	r1, r6, #1
   150a4:	mov	r4, #0
   150a8:	orr	r0, r0, r6, lsr #31
   150ac:	str	r1, [sp, #16]
   150b0:	str	r0, [sp, #20]
   150b4:	ldr	r0, [r8]
   150b8:	ldr	r2, [sp, #8]
   150bc:	ldr	r7, [sp, #4]
   150c0:	add	r1, r0, r2
   150c4:	orr	r7, r4, r7
   150c8:	str	r1, [r8]
   150cc:	ldrb	r0, [r0, r2]
   150d0:	ldr	r6, [sp, #16]
   150d4:	ldr	r9, [sp, #20]
   150d8:	cmp	r0, #0
   150dc:	orrne	r7, r7, #2
   150e0:	stm	sl, {r6, r9}
   150e4:	mov	r0, r7
   150e8:	sub	sp, fp, #28
   150ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150f0:	movw	r0, #25401	; 0x6339
   150f4:	movw	r1, #25439	; 0x635f
   150f8:	movw	r3, #25455	; 0x636f
   150fc:	mov	r2, #85	; 0x55
   15100:	movt	r0, #1
   15104:	movt	r1, #1
   15108:	movt	r3, #1
   1510c:	bl	110fc <__assert_fail@plt>
   15110:	push	{r4, r5, r6, r7, fp, lr}
   15114:	add	fp, sp, #16
   15118:	mov	r5, r1
   1511c:	mov	r4, r0
   15120:	cmn	r1, #1
   15124:	ble	1514c <__assert_fail@plt+0x4050>
   15128:	ldrd	r6, [r4]
   1512c:	cmp	r5, #0
   15130:	beq	151f8 <__assert_fail@plt+0x40fc>
   15134:	cmn	r7, #1
   15138:	ble	15184 <__assert_fail@plt+0x4088>
   1513c:	asr	r3, r5, #31
   15140:	mvn	r0, #0
   15144:	mvn	r1, #-2147483648	; 0x80000000
   15148:	b	1516c <__assert_fail@plt+0x4070>
   1514c:	ldrd	r6, [r4]
   15150:	cmn	r7, #1
   15154:	ble	151b4 <__assert_fail@plt+0x40b8>
   15158:	cmn	r5, #1
   1515c:	beq	151f8 <__assert_fail@plt+0x40fc>
   15160:	asr	r3, r5, #31
   15164:	mov	r0, #0
   15168:	mov	r1, #-2147483648	; 0x80000000
   1516c:	mov	r2, r5
   15170:	bl	15544 <__assert_fail@plt+0x4448>
   15174:	subs	r0, r0, r6
   15178:	sbcs	r0, r1, r7
   1517c:	blt	151d4 <__assert_fail@plt+0x40d8>
   15180:	b	151f8 <__assert_fail@plt+0x40fc>
   15184:	and	r0, r6, r7
   15188:	cmn	r0, #1
   1518c:	beq	151f0 <__assert_fail@plt+0x40f4>
   15190:	mov	r0, #0
   15194:	mov	r1, #-2147483648	; 0x80000000
   15198:	mov	r2, r6
   1519c:	mov	r3, r7
   151a0:	bl	15544 <__assert_fail@plt+0x4448>
   151a4:	subs	r0, r0, r5
   151a8:	sbcs	r0, r1, r5, asr #31
   151ac:	blt	151d4 <__assert_fail@plt+0x40d8>
   151b0:	b	151f8 <__assert_fail@plt+0x40fc>
   151b4:	asr	r3, r5, #31
   151b8:	mvn	r0, #0
   151bc:	mvn	r1, #-2147483648	; 0x80000000
   151c0:	mov	r2, r5
   151c4:	bl	15544 <__assert_fail@plt+0x4448>
   151c8:	subs	r0, r6, r0
   151cc:	sbcs	r0, r7, r1
   151d0:	bge	151f8 <__assert_fail@plt+0x40fc>
   151d4:	cmp	r7, #0
   151d8:	mvn	r1, #-2147483648	; 0x80000000
   151dc:	mvn	r2, #0
   151e0:	mov	r0, #1
   151e4:	movmi	r1, #-2147483648	; 0x80000000
   151e8:	movwmi	r2, #0
   151ec:	b	1520c <__assert_fail@plt+0x4110>
   151f0:	mvn	r6, #0
   151f4:	mvn	r7, #0
   151f8:	umull	r2, r0, r6, r5
   151fc:	asr	r1, r5, #31
   15200:	mla	r0, r6, r1, r0
   15204:	mla	r1, r7, r5, r0
   15208:	mov	r0, #0
   1520c:	str	r2, [r4]
   15210:	str	r1, [r4, #4]
   15214:	pop	{r4, r5, r6, r7, fp, pc}
   15218:	clz	r2, r1
   1521c:	clz	r3, r0
   15220:	lsr	r2, r2, #5
   15224:	lsr	r3, r3, #5
   15228:	orrs	r2, r3, r2
   1522c:	movwne	r1, #1
   15230:	movwne	r0, #1
   15234:	cmp	r1, #0
   15238:	beq	15268 <__assert_fail@plt+0x416c>
   1523c:	mvn	r2, #-2147483648	; 0x80000000
   15240:	udiv	r2, r2, r1
   15244:	cmp	r2, r0
   15248:	bcs	15268 <__assert_fail@plt+0x416c>
   1524c:	push	{fp, lr}
   15250:	mov	fp, sp
   15254:	bl	1100c <__errno_location@plt>
   15258:	mov	r1, #12
   1525c:	str	r1, [r0]
   15260:	mov	r0, #0
   15264:	pop	{fp, pc}
   15268:	b	10e80 <calloc@plt>
   1526c:	cmp	r0, #0
   15270:	movweq	r0, #1
   15274:	cmn	r0, #1
   15278:	ble	15280 <__assert_fail@plt+0x4184>
   1527c:	b	10f94 <malloc@plt>
   15280:	push	{fp, lr}
   15284:	mov	fp, sp
   15288:	bl	1100c <__errno_location@plt>
   1528c:	mov	r1, #12
   15290:	str	r1, [r0]
   15294:	mov	r0, #0
   15298:	pop	{fp, pc}
   1529c:	push	{fp, lr}
   152a0:	mov	fp, sp
   152a4:	cmp	r0, #0
   152a8:	beq	152c4 <__assert_fail@plt+0x41c8>
   152ac:	cmp	r1, #0
   152b0:	beq	152d0 <__assert_fail@plt+0x41d4>
   152b4:	cmn	r1, #1
   152b8:	ble	152d8 <__assert_fail@plt+0x41dc>
   152bc:	pop	{fp, lr}
   152c0:	b	10f28 <realloc@plt>
   152c4:	mov	r0, r1
   152c8:	pop	{fp, lr}
   152cc:	b	1526c <__assert_fail@plt+0x4170>
   152d0:	bl	12694 <__assert_fail@plt+0x1598>
   152d4:	b	152e4 <__assert_fail@plt+0x41e8>
   152d8:	bl	1100c <__errno_location@plt>
   152dc:	mov	r1, #12
   152e0:	str	r1, [r0]
   152e4:	mov	r0, #0
   152e8:	pop	{fp, pc}
   152ec:	push	{r4, r5, r6, sl, fp, lr}
   152f0:	add	fp, sp, #16
   152f4:	mov	r4, r0
   152f8:	bl	10f64 <__fpending@plt>
   152fc:	mov	r5, r0
   15300:	mov	r0, r4
   15304:	bl	10f70 <ferror_unlocked@plt>
   15308:	mov	r6, r0
   1530c:	mov	r0, r4
   15310:	bl	1259c <__assert_fail@plt+0x14a0>
   15314:	cmp	r6, #0
   15318:	beq	15338 <__assert_fail@plt+0x423c>
   1531c:	mvn	r4, #0
   15320:	cmp	r0, #0
   15324:	bne	15364 <__assert_fail@plt+0x4268>
   15328:	bl	1100c <__errno_location@plt>
   1532c:	mov	r1, #0
   15330:	str	r1, [r0]
   15334:	b	15364 <__assert_fail@plt+0x4268>
   15338:	cmp	r0, #0
   1533c:	mov	r4, r0
   15340:	mvnne	r4, #0
   15344:	cmp	r5, #0
   15348:	bne	15364 <__assert_fail@plt+0x4268>
   1534c:	cmp	r0, #0
   15350:	beq	15364 <__assert_fail@plt+0x4268>
   15354:	bl	1100c <__errno_location@plt>
   15358:	ldr	r0, [r0]
   1535c:	subs	r4, r0, #9
   15360:	mvnne	r4, #0
   15364:	mov	r0, r4
   15368:	pop	{r4, r5, r6, sl, fp, pc}
   1536c:	push	{fp, lr}
   15370:	mov	fp, sp
   15374:	mov	r0, #14
   15378:	bl	1109c <nl_langinfo@plt>
   1537c:	movw	r1, #23792	; 0x5cf0
   15380:	cmp	r0, #0
   15384:	movt	r1, #1
   15388:	movne	r1, r0
   1538c:	movw	r0, #25533	; 0x63bd
   15390:	ldrb	r2, [r1]
   15394:	movt	r0, #1
   15398:	cmp	r2, #0
   1539c:	movne	r0, r1
   153a0:	pop	{fp, pc}
   153a4:	push	{r4, r5, r6, r7, fp, lr}
   153a8:	add	fp, sp, #16
   153ac:	sub	sp, sp, #8
   153b0:	cmp	r0, #0
   153b4:	add	r5, sp, #4
   153b8:	mov	r7, r2
   153bc:	mov	r4, r1
   153c0:	movne	r5, r0
   153c4:	mov	r0, r5
   153c8:	bl	10f7c <mbrtowc@plt>
   153cc:	mov	r6, r0
   153d0:	cmp	r7, #0
   153d4:	beq	153fc <__assert_fail@plt+0x4300>
   153d8:	cmn	r6, #2
   153dc:	bcc	153fc <__assert_fail@plt+0x4300>
   153e0:	mov	r0, #0
   153e4:	bl	15444 <__assert_fail@plt+0x4348>
   153e8:	cmp	r0, #0
   153ec:	bne	153fc <__assert_fail@plt+0x4300>
   153f0:	ldrb	r0, [r4]
   153f4:	mov	r6, #1
   153f8:	str	r0, [r5]
   153fc:	mov	r0, r6
   15400:	sub	sp, fp, #16
   15404:	pop	{r4, r5, r6, r7, fp, pc}
   15408:	cmp	r2, #0
   1540c:	beq	1543c <__assert_fail@plt+0x4340>
   15410:	mvn	r3, #0
   15414:	udiv	r3, r3, r2
   15418:	cmp	r3, r1
   1541c:	bcs	1543c <__assert_fail@plt+0x4340>
   15420:	push	{fp, lr}
   15424:	mov	fp, sp
   15428:	bl	1100c <__errno_location@plt>
   1542c:	mov	r1, #12
   15430:	str	r1, [r0]
   15434:	mov	r0, #0
   15438:	pop	{fp, pc}
   1543c:	mul	r1, r2, r1
   15440:	b	1529c <__assert_fail@plt+0x41a0>
   15444:	push	{r4, sl, fp, lr}
   15448:	add	fp, sp, #8
   1544c:	sub	sp, sp, #264	; 0x108
   15450:	add	r1, sp, #7
   15454:	movw	r2, #257	; 0x101
   15458:	bl	154b0 <__assert_fail@plt+0x43b4>
   1545c:	mov	r4, #0
   15460:	cmp	r0, #0
   15464:	bne	154a4 <__assert_fail@plt+0x43a8>
   15468:	movw	r1, #25539	; 0x63c3
   1546c:	add	r0, sp, #7
   15470:	mov	r2, #2
   15474:	movt	r1, #1
   15478:	bl	10fe8 <bcmp@plt>
   1547c:	cmp	r0, #0
   15480:	beq	154a4 <__assert_fail@plt+0x43a8>
   15484:	movw	r1, #25541	; 0x63c5
   15488:	add	r0, sp, #7
   1548c:	mov	r2, #6
   15490:	movt	r1, #1
   15494:	bl	10fe8 <bcmp@plt>
   15498:	cmp	r0, #0
   1549c:	mov	r4, r0
   154a0:	movwne	r4, #1
   154a4:	mov	r0, r4
   154a8:	sub	sp, fp, #8
   154ac:	pop	{r4, sl, fp, pc}
   154b0:	push	{r4, r5, r6, r7, fp, lr}
   154b4:	add	fp, sp, #16
   154b8:	mov	r4, r1
   154bc:	mov	r1, #0
   154c0:	mov	r6, r2
   154c4:	bl	11084 <setlocale@plt>
   154c8:	cmp	r0, #0
   154cc:	beq	154f8 <__assert_fail@plt+0x43fc>
   154d0:	mov	r7, r0
   154d4:	bl	10ff4 <strlen@plt>
   154d8:	cmp	r0, r6
   154dc:	bcs	1550c <__assert_fail@plt+0x4410>
   154e0:	add	r2, r0, #1
   154e4:	mov	r0, r4
   154e8:	mov	r1, r7
   154ec:	bl	10eec <memcpy@plt>
   154f0:	mov	r5, #0
   154f4:	b	15534 <__assert_fail@plt+0x4438>
   154f8:	cmp	r6, #0
   154fc:	mov	r5, #22
   15500:	movne	r0, #0
   15504:	strbne	r0, [r4]
   15508:	b	15534 <__assert_fail@plt+0x4438>
   1550c:	mov	r5, #34	; 0x22
   15510:	cmp	r6, #0
   15514:	beq	15534 <__assert_fail@plt+0x4438>
   15518:	sub	r6, r6, #1
   1551c:	mov	r0, r4
   15520:	mov	r1, r7
   15524:	mov	r2, r6
   15528:	bl	10eec <memcpy@plt>
   1552c:	mov	r0, #0
   15530:	strb	r0, [r4, r6]
   15534:	mov	r0, r5
   15538:	pop	{r4, r5, r6, r7, fp, pc}
   1553c:	mov	r1, #0
   15540:	b	11084 <setlocale@plt>
   15544:	cmp	r3, #0
   15548:	cmpeq	r2, #0
   1554c:	bne	15570 <__assert_fail@plt+0x4474>
   15550:	cmp	r1, #0
   15554:	movlt	r1, #-2147483648	; 0x80000000
   15558:	movlt	r0, #0
   1555c:	blt	1556c <__assert_fail@plt+0x4470>
   15560:	cmpeq	r0, #0
   15564:	mvnne	r1, #-2147483648	; 0x80000000
   15568:	mvnne	r0, #0
   1556c:	b	15618 <__assert_fail@plt+0x451c>
   15570:	sub	sp, sp, #8
   15574:	push	{sp, lr}
   15578:	cmp	r1, #0
   1557c:	blt	1559c <__assert_fail@plt+0x44a0>
   15580:	cmp	r3, #0
   15584:	blt	155d0 <__assert_fail@plt+0x44d4>
   15588:	bl	15628 <__assert_fail@plt+0x452c>
   1558c:	ldr	lr, [sp, #4]
   15590:	add	sp, sp, #8
   15594:	pop	{r2, r3}
   15598:	bx	lr
   1559c:	rsbs	r0, r0, #0
   155a0:	sbc	r1, r1, r1, lsl #1
   155a4:	cmp	r3, #0
   155a8:	blt	155f4 <__assert_fail@plt+0x44f8>
   155ac:	bl	15628 <__assert_fail@plt+0x452c>
   155b0:	ldr	lr, [sp, #4]
   155b4:	add	sp, sp, #8
   155b8:	pop	{r2, r3}
   155bc:	rsbs	r0, r0, #0
   155c0:	sbc	r1, r1, r1, lsl #1
   155c4:	rsbs	r2, r2, #0
   155c8:	sbc	r3, r3, r3, lsl #1
   155cc:	bx	lr
   155d0:	rsbs	r2, r2, #0
   155d4:	sbc	r3, r3, r3, lsl #1
   155d8:	bl	15628 <__assert_fail@plt+0x452c>
   155dc:	ldr	lr, [sp, #4]
   155e0:	add	sp, sp, #8
   155e4:	pop	{r2, r3}
   155e8:	rsbs	r0, r0, #0
   155ec:	sbc	r1, r1, r1, lsl #1
   155f0:	bx	lr
   155f4:	rsbs	r2, r2, #0
   155f8:	sbc	r3, r3, r3, lsl #1
   155fc:	bl	15628 <__assert_fail@plt+0x452c>
   15600:	ldr	lr, [sp, #4]
   15604:	add	sp, sp, #8
   15608:	pop	{r2, r3}
   1560c:	rsbs	r2, r2, #0
   15610:	sbc	r3, r3, r3, lsl #1
   15614:	bx	lr
   15618:	push	{r1, lr}
   1561c:	mov	r0, #8
   15620:	bl	10e98 <raise@plt>
   15624:	pop	{r1, pc}
   15628:	cmp	r1, r3
   1562c:	cmpeq	r0, r2
   15630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15634:	mov	r4, r0
   15638:	movcc	r0, #0
   1563c:	mov	r5, r1
   15640:	ldr	lr, [sp, #36]	; 0x24
   15644:	movcc	r1, r0
   15648:	bcc	15744 <__assert_fail@plt+0x4648>
   1564c:	cmp	r3, #0
   15650:	clzeq	ip, r2
   15654:	clzne	ip, r3
   15658:	addeq	ip, ip, #32
   1565c:	cmp	r5, #0
   15660:	clzeq	r1, r4
   15664:	addeq	r1, r1, #32
   15668:	clzne	r1, r5
   1566c:	sub	ip, ip, r1
   15670:	sub	sl, ip, #32
   15674:	lsl	r9, r3, ip
   15678:	rsb	fp, ip, #32
   1567c:	orr	r9, r9, r2, lsl sl
   15680:	orr	r9, r9, r2, lsr fp
   15684:	lsl	r8, r2, ip
   15688:	cmp	r5, r9
   1568c:	cmpeq	r4, r8
   15690:	movcc	r0, #0
   15694:	movcc	r1, r0
   15698:	bcc	156b4 <__assert_fail@plt+0x45b8>
   1569c:	mov	r0, #1
   156a0:	subs	r4, r4, r8
   156a4:	lsl	r1, r0, sl
   156a8:	orr	r1, r1, r0, lsr fp
   156ac:	lsl	r0, r0, ip
   156b0:	sbc	r5, r5, r9
   156b4:	cmp	ip, #0
   156b8:	beq	15744 <__assert_fail@plt+0x4648>
   156bc:	lsr	r6, r8, #1
   156c0:	orr	r6, r6, r9, lsl #31
   156c4:	lsr	r7, r9, #1
   156c8:	mov	r2, ip
   156cc:	b	156f0 <__assert_fail@plt+0x45f4>
   156d0:	subs	r3, r4, r6
   156d4:	sbc	r8, r5, r7
   156d8:	adds	r3, r3, r3
   156dc:	adc	r8, r8, r8
   156e0:	adds	r4, r3, #1
   156e4:	adc	r5, r8, #0
   156e8:	subs	r2, r2, #1
   156ec:	beq	1570c <__assert_fail@plt+0x4610>
   156f0:	cmp	r5, r7
   156f4:	cmpeq	r4, r6
   156f8:	bcs	156d0 <__assert_fail@plt+0x45d4>
   156fc:	adds	r4, r4, r4
   15700:	adc	r5, r5, r5
   15704:	subs	r2, r2, #1
   15708:	bne	156f0 <__assert_fail@plt+0x45f4>
   1570c:	lsr	r3, r4, ip
   15710:	orr	r3, r3, r5, lsl fp
   15714:	lsr	r2, r5, ip
   15718:	orr	r3, r3, r5, lsr sl
   1571c:	adds	r0, r0, r4
   15720:	mov	r4, r3
   15724:	lsl	r3, r2, ip
   15728:	orr	r3, r3, r4, lsl sl
   1572c:	lsl	ip, r4, ip
   15730:	orr	r3, r3, r4, lsr fp
   15734:	adc	r1, r1, r5
   15738:	subs	r0, r0, ip
   1573c:	mov	r5, r2
   15740:	sbc	r1, r1, r3
   15744:	cmp	lr, #0
   15748:	strdne	r4, [lr]
   1574c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15750:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15754:	mov	r7, r0
   15758:	ldr	r6, [pc, #72]	; 157a8 <__assert_fail@plt+0x46ac>
   1575c:	ldr	r5, [pc, #72]	; 157ac <__assert_fail@plt+0x46b0>
   15760:	add	r6, pc, r6
   15764:	add	r5, pc, r5
   15768:	sub	r6, r6, r5
   1576c:	mov	r8, r1
   15770:	mov	r9, r2
   15774:	bl	10e60 <calloc@plt-0x20>
   15778:	asrs	r6, r6, #2
   1577c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15780:	mov	r4, #0
   15784:	add	r4, r4, #1
   15788:	ldr	r3, [r5], #4
   1578c:	mov	r2, r9
   15790:	mov	r1, r8
   15794:	mov	r0, r7
   15798:	blx	r3
   1579c:	cmp	r6, r4
   157a0:	bne	15784 <__assert_fail@plt+0x4688>
   157a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   157a8:	andeq	r1, r1, r4, lsr #15
   157ac:	muleq	r1, ip, r7
   157b0:	bx	lr
   157b4:	ldr	r3, [pc, #12]	; 157c8 <__assert_fail@plt+0x46cc>
   157b8:	mov	r1, #0
   157bc:	add	r3, pc, r3
   157c0:	ldr	r2, [r3]
   157c4:	b	11018 <__cxa_atexit@plt>
   157c8:	andeq	r1, r1, r8, lsr #18

Disassembly of section .fini:

000157cc <.fini>:
   157cc:	push	{r3, lr}
   157d0:	pop	{r3, pc}
