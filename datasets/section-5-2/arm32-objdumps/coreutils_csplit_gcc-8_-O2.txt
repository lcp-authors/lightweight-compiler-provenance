
../repos/coreutils/src/csplit:     file format elf32-littlearm


Disassembly of section .init:

00011178 <.init>:
   11178:	push	{r3, lr}
   1117c:	bl	12558 <__assert_fail@plt+0x1000>
   11180:	pop	{r3, pc}

Disassembly of section .plt:

00011184 <pthread_mutex_unlock@plt-0x14>:
   11184:	push	{lr}		; (str lr, [sp, #-4]!)
   11188:	ldr	lr, [pc, #4]	; 11194 <pthread_mutex_unlock@plt-0x4>
   1118c:	add	lr, pc, lr
   11190:	ldr	pc, [lr, #8]!
   11194:	andeq	r6, r2, ip, ror #28

00011198 <pthread_mutex_unlock@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #155648	; 0x26000
   111a0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111a4 <fdopen@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #155648	; 0x26000
   111ac:	ldr	pc, [ip, #3684]!	; 0xe64

000111b0 <calloc@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #155648	; 0x26000
   111b8:	ldr	pc, [ip, #3676]!	; 0xe5c

000111bc <fputs_unlocked@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #155648	; 0x26000
   111c4:	ldr	pc, [ip, #3668]!	; 0xe54

000111c8 <wctype@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #155648	; 0x26000
   111d0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111d4 <raise@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #155648	; 0x26000
   111dc:	ldr	pc, [ip, #3652]!	; 0xe44

000111e0 <wcrtomb@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #155648	; 0x26000
   111e8:	ldr	pc, [ip, #3644]!	; 0xe3c

000111ec <iswctype@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #155648	; 0x26000
   111f4:	ldr	pc, [ip, #3636]!	; 0xe34

000111f8 <strcmp@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #155648	; 0x26000
   11200:	ldr	pc, [ip, #3628]!	; 0xe2c

00011204 <read@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #155648	; 0x26000
   1120c:	ldr	pc, [ip, #3620]!	; 0xe24

00011210 <pthread_mutex_destroy@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #155648	; 0x26000
   11218:	ldr	pc, [ip, #3612]!	; 0xe1c

0001121c <fflush@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #155648	; 0x26000
   11224:	ldr	pc, [ip, #3604]!	; 0xe14

00011228 <sigprocmask@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #155648	; 0x26000
   11230:	ldr	pc, [ip, #3596]!	; 0xe0c

00011234 <memmove@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #155648	; 0x26000
   1123c:	ldr	pc, [ip, #3588]!	; 0xe04

00011240 <free@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #155648	; 0x26000
   11248:	ldr	pc, [ip, #3580]!	; 0xdfc

0001124c <pthread_mutex_lock@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #155648	; 0x26000
   11254:	ldr	pc, [ip, #3572]!	; 0xdf4

00011258 <_exit@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #155648	; 0x26000
   11260:	ldr	pc, [ip, #3564]!	; 0xdec

00011264 <memcpy@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #155648	; 0x26000
   1126c:	ldr	pc, [ip, #3556]!	; 0xde4

00011270 <pthread_mutex_init@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #155648	; 0x26000
   11278:	ldr	pc, [ip, #3548]!	; 0xddc

0001127c <__strtoull_internal@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #155648	; 0x26000
   11284:	ldr	pc, [ip, #3540]!	; 0xdd4

00011288 <towlower@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #155648	; 0x26000
   11290:	ldr	pc, [ip, #3532]!	; 0xdcc

00011294 <mbsinit@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #155648	; 0x26000
   1129c:	ldr	pc, [ip, #3524]!	; 0xdc4

000112a0 <signal@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #155648	; 0x26000
   112a8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112ac <fwrite_unlocked@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #155648	; 0x26000
   112b4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112b8 <memcmp@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #155648	; 0x26000
   112c0:	ldr	pc, [ip, #3500]!	; 0xdac

000112c4 <fputc_unlocked@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #155648	; 0x26000
   112cc:	ldr	pc, [ip, #3492]!	; 0xda4

000112d0 <dcgettext@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #155648	; 0x26000
   112d8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112dc <unlink@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #155648	; 0x26000
   112e4:	ldr	pc, [ip, #3476]!	; 0xd94

000112e8 <dup2@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #155648	; 0x26000
   112f0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112f4 <realloc@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #155648	; 0x26000
   112fc:	ldr	pc, [ip, #3460]!	; 0xd84

00011300 <sigismember@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #155648	; 0x26000
   11308:	ldr	pc, [ip, #3452]!	; 0xd7c

0001130c <textdomain@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #155648	; 0x26000
   11314:	ldr	pc, [ip, #3444]!	; 0xd74

00011318 <rawmemchr@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #155648	; 0x26000
   11320:	ldr	pc, [ip, #3436]!	; 0xd6c

00011324 <iswprint@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #155648	; 0x26000
   1132c:	ldr	pc, [ip, #3428]!	; 0xd64

00011330 <sigaction@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #155648	; 0x26000
   11338:	ldr	pc, [ip, #3420]!	; 0xd5c

0001133c <fwrite@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #155648	; 0x26000
   11344:	ldr	pc, [ip, #3412]!	; 0xd54

00011348 <lseek64@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #155648	; 0x26000
   11350:	ldr	pc, [ip, #3404]!	; 0xd4c

00011354 <__ctype_get_mb_cur_max@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #155648	; 0x26000
   1135c:	ldr	pc, [ip, #3396]!	; 0xd44

00011360 <strcpy@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #155648	; 0x26000
   11368:	ldr	pc, [ip, #3388]!	; 0xd3c

0001136c <__fpending@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #155648	; 0x26000
   11374:	ldr	pc, [ip, #3380]!	; 0xd34

00011378 <mbrtowc@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #155648	; 0x26000
   11380:	ldr	pc, [ip, #3372]!	; 0xd2c

00011384 <error@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #155648	; 0x26000
   1138c:	ldr	pc, [ip, #3364]!	; 0xd24

00011390 <open64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #155648	; 0x26000
   11398:	ldr	pc, [ip, #3356]!	; 0xd1c

0001139c <malloc@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #155648	; 0x26000
   113a4:	ldr	pc, [ip, #3348]!	; 0xd14

000113a8 <sigaddset@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #155648	; 0x26000
   113b0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113b4 <__libc_start_main@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #155648	; 0x26000
   113bc:	ldr	pc, [ip, #3332]!	; 0xd04

000113c0 <__freading@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #155648	; 0x26000
   113c8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113cc <__ctype_tolower_loc@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #155648	; 0x26000
   113d4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113d8 <__ctype_toupper_loc@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #155648	; 0x26000
   113e0:	ldr	pc, [ip, #3308]!	; 0xcec

000113e4 <__gmon_start__@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #155648	; 0x26000
   113ec:	ldr	pc, [ip, #3300]!	; 0xce4

000113f0 <getopt_long@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #155648	; 0x26000
   113f8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113fc <__ctype_b_loc@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #155648	; 0x26000
   11404:	ldr	pc, [ip, #3284]!	; 0xcd4

00011408 <exit@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #155648	; 0x26000
   11410:	ldr	pc, [ip, #3276]!	; 0xccc

00011414 <strlen@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #155648	; 0x26000
   1141c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011420 <strchr@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #155648	; 0x26000
   11428:	ldr	pc, [ip, #3260]!	; 0xcbc

0001142c <__errno_location@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #155648	; 0x26000
   11434:	ldr	pc, [ip, #3252]!	; 0xcb4

00011438 <iswalnum@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #155648	; 0x26000
   11440:	ldr	pc, [ip, #3244]!	; 0xcac

00011444 <__sprintf_chk@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #155648	; 0x26000
   1144c:	ldr	pc, [ip, #3236]!	; 0xca4

00011450 <__cxa_atexit@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #155648	; 0x26000
   11458:	ldr	pc, [ip, #3228]!	; 0xc9c

0001145c <memset@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #155648	; 0x26000
   11464:	ldr	pc, [ip, #3220]!	; 0xc94

00011468 <btowc@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #155648	; 0x26000
   11470:	ldr	pc, [ip, #3212]!	; 0xc8c

00011474 <__printf_chk@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #155648	; 0x26000
   1147c:	ldr	pc, [ip, #3204]!	; 0xc84

00011480 <fileno@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #155648	; 0x26000
   11488:	ldr	pc, [ip, #3196]!	; 0xc7c

0001148c <__fprintf_chk@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #155648	; 0x26000
   11494:	ldr	pc, [ip, #3188]!	; 0xc74

00011498 <fclose@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #155648	; 0x26000
   114a0:	ldr	pc, [ip, #3180]!	; 0xc6c

000114a4 <fseeko64@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #155648	; 0x26000
   114ac:	ldr	pc, [ip, #3172]!	; 0xc64

000114b0 <fcntl64@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #155648	; 0x26000
   114b8:	ldr	pc, [ip, #3164]!	; 0xc5c

000114bc <setlocale@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #155648	; 0x26000
   114c4:	ldr	pc, [ip, #3156]!	; 0xc54

000114c8 <sigemptyset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #155648	; 0x26000
   114d0:	ldr	pc, [ip, #3148]!	; 0xc4c

000114d4 <strrchr@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #155648	; 0x26000
   114dc:	ldr	pc, [ip, #3140]!	; 0xc44

000114e0 <nl_langinfo@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #155648	; 0x26000
   114e8:	ldr	pc, [ip, #3132]!	; 0xc3c

000114ec <fputc@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #155648	; 0x26000
   114f4:	ldr	pc, [ip, #3124]!	; 0xc34

000114f8 <__strtoll_internal@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #155648	; 0x26000
   11500:	ldr	pc, [ip, #3116]!	; 0xc2c

00011504 <fopen64@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #155648	; 0x26000
   1150c:	ldr	pc, [ip, #3108]!	; 0xc24

00011510 <bindtextdomain@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #155648	; 0x26000
   11518:	ldr	pc, [ip, #3100]!	; 0xc1c

0001151c <towupper@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #155648	; 0x26000
   11524:	ldr	pc, [ip, #3092]!	; 0xc14

00011528 <strncmp@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #155648	; 0x26000
   11530:	ldr	pc, [ip, #3084]!	; 0xc0c

00011534 <abort@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #155648	; 0x26000
   1153c:	ldr	pc, [ip, #3076]!	; 0xc04

00011540 <close@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #155648	; 0x26000
   11548:	ldr	pc, [ip, #3068]!	; 0xbfc

0001154c <__snprintf_chk@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #155648	; 0x26000
   11554:	ldr	pc, [ip, #3060]!	; 0xbf4

00011558 <__assert_fail@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #155648	; 0x26000
   11560:	ldr	pc, [ip, #3052]!	; 0xbec

Disassembly of section .text:

00011564 <.text>:
   11564:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11568:	movw	r5, #29316	; 0x7284
   1156c:	movt	r5, #2
   11570:	strd	r6, [sp, #8]
   11574:	movw	r7, #33216	; 0x81c0
   11578:	movt	r7, #3
   1157c:	strd	r8, [sp, #16]
   11580:	mov	r9, r0
   11584:	strd	sl, [sp, #24]
   11588:	mov	sl, r1
   1158c:	movw	fp, #33224	; 0x81c8
   11590:	movt	fp, #3
   11594:	str	lr, [sp, #32]
   11598:	sub	sp, sp, #244	; 0xf4
   1159c:	ldr	r0, [r1]
   115a0:	bl	13dac <__assert_fail@plt+0x2854>
   115a4:	movw	r1, #28508	; 0x6f5c
   115a8:	movt	r1, #2
   115ac:	ldr	r6, [pc, #3932]	; 12510 <__assert_fail@plt+0xfb8>
   115b0:	mov	r0, #6
   115b4:	bl	114bc <setlocale@plt>
   115b8:	movw	r1, #29244	; 0x723c
   115bc:	movt	r1, #2
   115c0:	movw	r0, #29076	; 0x7194
   115c4:	movt	r0, #2
   115c8:	bl	11510 <bindtextdomain@plt>
   115cc:	movw	r0, #29076	; 0x7194
   115d0:	movt	r0, #2
   115d4:	bl	1130c <textdomain@plt>
   115d8:	movw	r0, #14444	; 0x386c
   115dc:	movt	r0, #1
   115e0:	bl	26a1c <__assert_fail@plt+0x154c4>
   115e4:	mov	r3, #0
   115e8:	mov	r1, #1
   115ec:	str	r5, [sp, #24]
   115f0:	movw	r2, #29268	; 0x7254
   115f4:	movt	r2, #2
   115f8:	str	r3, [fp, #12]
   115fc:	str	r3, [fp, #16]
   11600:	strb	r1, [fp, #156]	; 0x9c
   11604:	str	r2, [fp, #4]
   11608:	strb	r3, [fp, #177]	; 0xb1
   1160c:	str	sl, [fp, #216]	; 0xd8
   11610:	strb	r3, [fp, #220]	; 0xdc
   11614:	mov	r4, #0
   11618:	mov	r3, r6
   1161c:	ldr	r2, [sp, #24]
   11620:	mov	r1, sl
   11624:	mov	r0, r9
   11628:	str	r4, [sp]
   1162c:	bl	113f0 <getopt_long@plt>
   11630:	cmn	r0, #1
   11634:	beq	1177c <__assert_fail@plt+0x224>
   11638:	cmp	r0, #107	; 0x6b
   1163c:	beq	11774 <__assert_fail@plt+0x21c>
   11640:	ble	11664 <__assert_fail@plt+0x10c>
   11644:	cmp	r0, #115	; 0x73
   11648:	beq	11768 <__assert_fail@plt+0x210>
   1164c:	ble	11698 <__assert_fail@plt+0x140>
   11650:	cmp	r0, #122	; 0x7a
   11654:	bne	11684 <__assert_fail@plt+0x12c>
   11658:	mov	r3, #1
   1165c:	strb	r3, [fp, #176]	; 0xb0
   11660:	b	11614 <__assert_fail@plt+0xbc>
   11664:	cmn	r0, #2
   11668:	beq	12248 <__assert_fail@plt+0xcf0>
   1166c:	ble	1170c <__assert_fail@plt+0x1b4>
   11670:	cmp	r0, #98	; 0x62
   11674:	bne	116f8 <__assert_fail@plt+0x1a0>
   11678:	ldr	r3, [r7]
   1167c:	str	r3, [fp, #8]
   11680:	b	11614 <__assert_fail@plt+0xbc>
   11684:	cmp	r0, #256	; 0x100
   11688:	bne	1227c <__assert_fail@plt+0xd24>
   1168c:	mov	r3, #1
   11690:	strb	r3, [fp, #220]	; 0xdc
   11694:	b	11614 <__assert_fail@plt+0xbc>
   11698:	cmp	r0, #110	; 0x6e
   1169c:	bne	11760 <__assert_fail@plt+0x208>
   116a0:	ldr	r8, [r7]
   116a4:	mov	r2, #5
   116a8:	mov	r0, r4
   116ac:	movw	r1, #29272	; 0x7258
   116b0:	movt	r1, #2
   116b4:	bl	112d0 <dcgettext@plt>
   116b8:	mov	r5, #0
   116bc:	movw	r1, #28508	; 0x6f5c
   116c0:	movt	r1, #2
   116c4:	mov	r3, #0
   116c8:	str	r4, [sp, #16]
   116cc:	mvn	r4, #-2147483648	; 0x80000000
   116d0:	mov	r2, #0
   116d4:	strd	r4, [sp]
   116d8:	str	r1, [sp, #8]
   116dc:	str	r0, [sp, #12]
   116e0:	mov	r0, r8
   116e4:	bl	24a30 <__assert_fail@plt+0x134d8>
   116e8:	movw	r3, #33116	; 0x815c
   116ec:	movt	r3, #3
   116f0:	str	r0, [r3]
   116f4:	b	11614 <__assert_fail@plt+0xbc>
   116f8:	cmp	r0, #102	; 0x66
   116fc:	bne	1227c <__assert_fail@plt+0xd24>
   11700:	ldr	r3, [r7]
   11704:	str	r3, [fp, #4]
   11708:	b	11614 <__assert_fail@plt+0xbc>
   1170c:	cmn	r0, #3
   11710:	bne	1227c <__assert_fail@plt+0xd24>
   11714:	movw	r1, #29288	; 0x7268
   11718:	movt	r1, #2
   1171c:	movw	r2, #29304	; 0x7278
   11720:	movt	r2, #2
   11724:	movw	r3, #33120	; 0x8160
   11728:	movt	r3, #3
   1172c:	movw	r0, #33212	; 0x81bc
   11730:	movt	r0, #3
   11734:	str	r2, [sp]
   11738:	movw	r2, #29072	; 0x7190
   1173c:	movt	r2, #2
   11740:	stmib	sp, {r1, r4}
   11744:	movw	r1, #27672	; 0x6c18
   11748:	movt	r1, #2
   1174c:	ldr	r0, [r0]
   11750:	ldr	r3, [r3]
   11754:	bl	24340 <__assert_fail@plt+0x12de8>
   11758:	mov	r0, r4
   1175c:	bl	11408 <exit@plt>
   11760:	cmp	r0, #113	; 0x71
   11764:	bne	1227c <__assert_fail@plt+0xd24>
   11768:	mov	r3, #1
   1176c:	strb	r3, [fp, #177]	; 0xb1
   11770:	b	11614 <__assert_fail@plt+0xbc>
   11774:	strb	r4, [fp, #156]	; 0x9c
   11778:	b	11614 <__assert_fail@plt+0xbc>
   1177c:	movw	r5, #33200	; 0x81b0
   11780:	movt	r5, #3
   11784:	ldr	r3, [r5]
   11788:	sub	r2, r9, r3
   1178c:	cmp	r2, #1
   11790:	ble	12250 <__assert_fail@plt+0xcf8>
   11794:	ldr	r0, [fp, #4]
   11798:	bl	11414 <strlen@plt>
   1179c:	ldr	r3, [fp, #8]
   117a0:	mov	r7, r0
   117a4:	cmp	r3, #0
   117a8:	beq	11924 <__assert_fail@plt+0x3cc>
   117ac:	ldr	r0, [fp, #8]
   117b0:	ldrb	r1, [r0]
   117b4:	cmp	r1, #0
   117b8:	movne	ip, r0
   117bc:	movne	lr, #100	; 0x64
   117c0:	bne	117d4 <__assert_fail@plt+0x27c>
   117c4:	b	12224 <__assert_fail@plt+0xccc>
   117c8:	cmp	r1, #0
   117cc:	mov	ip, r3
   117d0:	beq	120fc <__assert_fail@plt+0xba4>
   117d4:	cmp	r1, #37	; 0x25
   117d8:	add	r3, ip, #1
   117dc:	ldrb	r1, [ip, #1]
   117e0:	bne	117c8 <__assert_fail@plt+0x270>
   117e4:	cmp	r1, #37	; 0x25
   117e8:	moveq	r3, ip
   117ec:	ldrbeq	r1, [r3, #2]!
   117f0:	beq	117c8 <__assert_fail@plt+0x270>
   117f4:	cmp	r4, #0
   117f8:	bne	124c8 <__assert_fail@plt+0xf70>
   117fc:	mov	r2, r3
   11800:	mov	r3, r2
   11804:	ldrb	r1, [r2], #1
   11808:	sub	ip, r1, #35	; 0x23
   1180c:	cmp	ip, #13
   11810:	ldrls	pc, [pc, ip, lsl #2]
   11814:	b	11854 <__assert_fail@plt+0x2fc>
   11818:	ldrdeq	r1, [r1], -r8
   1181c:	andeq	r1, r1, r4, asr r8
   11820:	andeq	r1, r1, r4, asr r8
   11824:	andeq	r1, r1, r4, asr r8
   11828:	ldrdeq	r1, [r1], -r0
   1182c:	andeq	r1, r1, r4, asr r8
   11830:	andeq	r1, r1, r4, asr r8
   11834:	andeq	r1, r1, r4, asr r8
   11838:	andeq	r1, r1, r4, asr r8
   1183c:	andeq	r1, r1, r4, asr r8
   11840:	andeq	r1, r1, r0, lsl #16
   11844:	andeq	r1, r1, r4, asr r8
   11848:	andeq	r1, r1, r4, asr r8
   1184c:	andeq	r1, r1, r0, lsl #16
   11850:	ldrb	r1, [r3, #1]!
   11854:	sub	r2, r1, #48	; 0x30
   11858:	cmp	r2, #9
   1185c:	bls	11850 <__assert_fail@plt+0x2f8>
   11860:	cmp	r1, #46	; 0x2e
   11864:	beq	12140 <__assert_fail@plt+0xbe8>
   11868:	ldrb	r6, [r3]
   1186c:	cmp	r6, #105	; 0x69
   11870:	beq	118f0 <__assert_fail@plt+0x398>
   11874:	bls	118e0 <__assert_fail@plt+0x388>
   11878:	cmp	r6, #117	; 0x75
   1187c:	beq	121b0 <__assert_fail@plt+0xc58>
   11880:	cmp	r6, #120	; 0x78
   11884:	beq	1191c <__assert_fail@plt+0x3c4>
   11888:	cmp	r6, #111	; 0x6f
   1188c:	beq	1191c <__assert_fail@plt+0x3c4>
   11890:	bl	113fc <__ctype_b_loc@plt>
   11894:	ldr	r2, [r0]
   11898:	lsl	r3, r6, #1
   1189c:	ldrh	r3, [r2, r3]
   118a0:	ands	r4, r3, #16384	; 0x4000
   118a4:	bne	12134 <__assert_fail@plt+0xbdc>
   118a8:	movw	r1, #29552	; 0x7370
   118ac:	movt	r1, #2
   118b0:	mov	r2, #5
   118b4:	mov	r0, #0
   118b8:	bl	112d0 <dcgettext@plt>
   118bc:	mov	r2, r0
   118c0:	mov	r3, r6
   118c4:	mov	r1, #0
   118c8:	mov	r0, #1
   118cc:	bl	11384 <error@plt>
   118d0:	orr	r4, r4, #1
   118d4:	b	11800 <__assert_fail@plt+0x2a8>
   118d8:	orr	r4, r4, #2
   118dc:	b	11800 <__assert_fail@plt+0x2a8>
   118e0:	cmp	r6, #88	; 0x58
   118e4:	beq	1191c <__assert_fail@plt+0x3c4>
   118e8:	cmp	r6, #100	; 0x64
   118ec:	bne	11908 <__assert_fail@plt+0x3b0>
   118f0:	mov	r2, #1
   118f4:	bics	r4, r4, r2
   118f8:	bne	12454 <__assert_fail@plt+0xefc>
   118fc:	mov	r4, #1
   11900:	ldrb	r1, [r3, #1]!
   11904:	b	117c8 <__assert_fail@plt+0x270>
   11908:	cmp	r6, #0
   1190c:	bne	11890 <__assert_fail@plt+0x338>
   11910:	movw	r1, #29468	; 0x731c
   11914:	movt	r1, #2
   11918:	b	1222c <__assert_fail@plt+0xcd4>
   1191c:	mov	r2, #2
   11920:	b	118f4 <__assert_fail@plt+0x39c>
   11924:	movw	r3, #33116	; 0x815c
   11928:	movt	r3, #3
   1192c:	ldr	r2, [r3]
   11930:	cmp	r2, #10
   11934:	ldrhi	r0, [r3]
   11938:	movls	r0, #11
   1193c:	add	r0, r0, #1
   11940:	adds	r0, r7, r0
   11944:	movvs	r4, #1
   11948:	movvc	r4, #0
   1194c:	cmp	r4, #0
   11950:	str	r4, [sp, #56]	; 0x38
   11954:	bne	12124 <__assert_fail@plt+0xbcc>
   11958:	bl	24474 <__assert_fail@plt+0x12f1c>
   1195c:	ldr	r3, [r5]
   11960:	movw	r1, #29652	; 0x73d4
   11964:	movt	r1, #2
   11968:	str	r0, [fp]
   1196c:	ldr	r6, [sl, r3, lsl #2]
   11970:	add	r3, r3, #1
   11974:	str	r3, [r5]
   11978:	mov	r0, r6
   1197c:	bl	111f8 <strcmp@plt>
   11980:	cmp	r0, #0
   11984:	bne	12154 <__assert_fail@plt+0xbfc>
   11988:	ldr	r5, [r5]
   1198c:	cmp	r5, r9
   11990:	bge	11b98 <__assert_fail@plt+0x640>
   11994:	movw	r3, #28508	; 0x6f5c
   11998:	movt	r3, #2
   1199c:	ldr	r6, [sl, r5, lsl #2]
   119a0:	str	r3, [sp, #48]	; 0x30
   119a4:	movw	r3, #29920	; 0x74e0
   119a8:	movt	r3, #2
   119ac:	str	r3, [sp, #60]	; 0x3c
   119b0:	movw	r3, #33772	; 0x83ec
   119b4:	movt	r3, #3
   119b8:	str	r3, [sp, #52]	; 0x34
   119bc:	ldrb	r4, [r6]
   119c0:	sub	r8, r4, #37	; 0x25
   119c4:	clz	r8, r8
   119c8:	lsr	r8, r8, #5
   119cc:	cmp	r4, #47	; 0x2f
   119d0:	movne	r7, r8
   119d4:	orreq	r7, r8, #1
   119d8:	cmp	r7, #0
   119dc:	beq	11b1c <__assert_fail@plt+0x5c4>
   119e0:	add	r3, r6, #1
   119e4:	mov	r1, r4
   119e8:	mov	r0, r3
   119ec:	str	r3, [sp, #36]	; 0x24
   119f0:	bl	114d4 <strrchr@plt>
   119f4:	subs	r3, r0, #0
   119f8:	str	r3, [sp, #24]
   119fc:	beq	12390 <__assert_fail@plt+0xe38>
   11a00:	bl	126b4 <__assert_fail@plt+0x115c>
   11a04:	mov	r4, r0
   11a08:	mov	r7, #0
   11a0c:	mov	r3, #1
   11a10:	mov	r0, #256	; 0x100
   11a14:	str	r5, [r4, #24]
   11a18:	strb	r8, [r4, #29]
   11a1c:	strb	r3, [r4, #30]
   11a20:	str	r7, [r4, #32]
   11a24:	str	r7, [r4, #36]	; 0x24
   11a28:	bl	24450 <__assert_fail@plt+0x12ef8>
   11a2c:	ldr	r2, [sp, #24]
   11a30:	movw	r3, #710	; 0x2c6
   11a34:	str	r0, [r4, #48]	; 0x30
   11a38:	str	r7, [r4, #52]	; 0x34
   11a3c:	ldr	ip, [sp, #52]	; 0x34
   11a40:	sub	r1, r2, r6
   11a44:	add	r2, r4, #32
   11a48:	ldr	r0, [sp, #36]	; 0x24
   11a4c:	sub	r1, r1, #1
   11a50:	str	r3, [ip]
   11a54:	bl	23334 <__assert_fail@plt+0x11ddc>
   11a58:	subs	r8, r0, #0
   11a5c:	bne	12354 <__assert_fail@plt+0xdfc>
   11a60:	ldr	r3, [sp, #24]
   11a64:	ldrb	r3, [r3, #1]
   11a68:	cmp	r3, #0
   11a6c:	bne	11c44 <__assert_fail@plt+0x6ec>
   11a70:	add	r3, r5, #1
   11a74:	cmp	r9, r3
   11a78:	ble	11b98 <__assert_fail@plt+0x640>
   11a7c:	ldr	r6, [sl, r3, lsl #2]
   11a80:	lsl	r7, r3, #2
   11a84:	ldrb	r2, [r6]
   11a88:	cmp	r2, #123	; 0x7b
   11a8c:	movne	r5, r3
   11a90:	bne	119bc <__assert_fail@plt+0x464>
   11a94:	mov	r0, r6
   11a98:	bl	11414 <strlen@plt>
   11a9c:	sub	r3, r0, #1
   11aa0:	ldrb	r2, [r6, r3]
   11aa4:	add	r8, r6, r3
   11aa8:	cmp	r2, #125	; 0x7d
   11aac:	bne	12434 <__assert_fail@plt+0xedc>
   11ab0:	mov	r2, #0
   11ab4:	add	r0, r6, #1
   11ab8:	sub	r1, r8, #1
   11abc:	cmp	r0, r1
   11ac0:	strb	r2, [r6, r3]
   11ac4:	beq	11cd4 <__assert_fail@plt+0x77c>
   11ac8:	ldr	r2, [sp, #48]	; 0x30
   11acc:	add	r3, sp, #96	; 0x60
   11ad0:	mov	r1, #0
   11ad4:	str	r2, [sp]
   11ad8:	mov	r2, #10
   11adc:	bl	25774 <__assert_fail@plt+0x1421c>
   11ae0:	cmp	r0, #0
   11ae4:	bne	123f8 <__assert_fail@plt+0xea0>
   11ae8:	ldrd	r2, [sp, #96]	; 0x60
   11aec:	cmp	r2, #0
   11af0:	sbcs	r1, r3, #0
   11af4:	blt	123f8 <__assert_fail@plt+0xea0>
   11af8:	strd	r2, [r4, #16]
   11afc:	add	r5, r5, #2
   11b00:	mov	r3, #125	; 0x7d
   11b04:	cmp	r9, r5
   11b08:	strb	r3, [r8]
   11b0c:	ble	11b98 <__assert_fail@plt+0x640>
   11b10:	add	r3, sl, r7
   11b14:	ldr	r6, [r3, #4]
   11b18:	b	119bc <__assert_fail@plt+0x464>
   11b1c:	bl	126b4 <__assert_fail@plt+0x115c>
   11b20:	ldr	ip, [sp, #48]	; 0x30
   11b24:	mov	r4, r0
   11b28:	mov	r1, r7
   11b2c:	add	r3, sp, #88	; 0x58
   11b30:	mov	r2, #10
   11b34:	lsl	r8, r5, #2
   11b38:	ldr	r0, [sl, r5, lsl #2]
   11b3c:	str	r5, [r4, #24]
   11b40:	str	ip, [sp]
   11b44:	bl	25774 <__assert_fail@plt+0x1421c>
   11b48:	subs	r3, r0, #0
   11b4c:	add	r1, sl, r8
   11b50:	str	r3, [sp, #24]
   11b54:	bne	12284 <__assert_fail@plt+0xd2c>
   11b58:	ldrd	r6, [sp, #88]	; 0x58
   11b5c:	cmp	r6, #0
   11b60:	sbcs	r3, r7, #0
   11b64:	blt	12284 <__assert_fail@plt+0xd2c>
   11b68:	orrs	r3, r6, r7
   11b6c:	beq	122bc <__assert_fail@plt+0xd64>
   11b70:	ldrd	r2, [fp, #224]	; 0xe0
   11b74:	cmp	r7, r3
   11b78:	cmpeq	r6, r2
   11b7c:	bcc	1230c <__assert_fail@plt+0xdb4>
   11b80:	beq	11ca0 <__assert_fail@plt+0x748>
   11b84:	add	r3, r5, #1
   11b88:	strd	r6, [r4, #8]
   11b8c:	cmp	r9, r3
   11b90:	strd	r6, [fp, #224]	; 0xe0
   11b94:	bgt	11a7c <__assert_fail@plt+0x524>
   11b98:	ldr	r7, [pc, #2420]	; 12514 <__assert_fail@plt+0xfbc>
   11b9c:	ldr	r4, [pc, #2420]	; 12518 <__assert_fail@plt+0xfc0>
   11ba0:	mov	r0, r7
   11ba4:	add	r6, r4, #44	; 0x2c
   11ba8:	mov	r5, r4
   11bac:	bl	114c8 <sigemptyset@plt>
   11bb0:	ldr	r8, [r5], #4
   11bb4:	add	r2, sp, #96	; 0x60
   11bb8:	mov	r1, #0
   11bbc:	mov	r0, r8
   11bc0:	bl	11330 <sigaction@plt>
   11bc4:	ldr	r3, [sp, #96]	; 0x60
   11bc8:	cmp	r3, #1
   11bcc:	beq	11bdc <__assert_fail@plt+0x684>
   11bd0:	mov	r1, r8
   11bd4:	mov	r0, r7
   11bd8:	bl	113a8 <sigaddset@plt>
   11bdc:	cmp	r6, r5
   11be0:	bne	11bb0 <__assert_fail@plt+0x658>
   11be4:	ldr	r5, [pc, #2344]	; 12514 <__assert_fail@plt+0xfbc>
   11be8:	movw	r3, #11056	; 0x2b30
   11bec:	movt	r3, #1
   11bf0:	mov	r2, #128	; 0x80
   11bf4:	add	r0, sp, #100	; 0x64
   11bf8:	str	r3, [sp, #96]	; 0x60
   11bfc:	mov	r1, r5
   11c00:	bl	11264 <memcpy@plt>
   11c04:	mov	r3, #0
   11c08:	str	r3, [sp, #228]	; 0xe4
   11c0c:	b	11c18 <__assert_fail@plt+0x6c0>
   11c10:	cmp	r6, r4
   11c14:	beq	11cec <__assert_fail@plt+0x794>
   11c18:	ldr	r7, [r4], #4
   11c1c:	mov	r0, r5
   11c20:	mov	r1, r7
   11c24:	bl	11300 <sigismember@plt>
   11c28:	cmp	r0, #0
   11c2c:	beq	11c10 <__assert_fail@plt+0x6b8>
   11c30:	mov	r0, r7
   11c34:	mov	r2, #0
   11c38:	add	r1, sp, #96	; 0x60
   11c3c:	bl	11330 <sigaction@plt>
   11c40:	b	11c10 <__assert_fail@plt+0x6b8>
   11c44:	ldr	r3, [sp, #24]
   11c48:	mov	r1, r8
   11c4c:	ldr	r2, [sp, #48]	; 0x30
   11c50:	add	r0, r3, #1
   11c54:	mov	r3, r4
   11c58:	str	r2, [sp]
   11c5c:	mov	r2, #10
   11c60:	bl	24a38 <__assert_fail@plt+0x134e0>
   11c64:	cmp	r0, #0
   11c68:	beq	11a70 <__assert_fail@plt+0x518>
   11c6c:	mov	r2, #5
   11c70:	movw	r1, #29756	; 0x743c
   11c74:	movt	r1, #2
   11c78:	mov	r0, r8
   11c7c:	bl	112d0 <dcgettext@plt>
   11c80:	mov	r4, r0
   11c84:	mov	r0, r6
   11c88:	bl	1609c <__assert_fail@plt+0x4b44>
   11c8c:	mov	r3, r0
   11c90:	mov	r2, r4
   11c94:	mov	r1, r8
   11c98:	mov	r0, #1
   11c9c:	bl	11384 <error@plt>
   11ca0:	mov	r2, #5
   11ca4:	ldr	r1, [sp, #60]	; 0x3c
   11ca8:	bl	112d0 <dcgettext@plt>
   11cac:	mov	r6, r0
   11cb0:	ldr	r0, [sl, r8]
   11cb4:	bl	1609c <__assert_fail@plt+0x4b44>
   11cb8:	ldr	r1, [sp, #24]
   11cbc:	mov	r3, r0
   11cc0:	mov	r2, r6
   11cc4:	mov	r0, r1
   11cc8:	bl	11384 <error@plt>
   11ccc:	ldrd	r6, [sp, #88]	; 0x58
   11cd0:	b	11b84 <__assert_fail@plt+0x62c>
   11cd4:	ldrb	r3, [r6, #1]
   11cd8:	cmp	r3, #42	; 0x2a
   11cdc:	moveq	r3, #1
   11ce0:	strbeq	r3, [r4, #28]
   11ce4:	bne	11ac8 <__assert_fail@plt+0x570>
   11ce8:	b	11afc <__assert_fail@plt+0x5a4>
   11cec:	mov	sl, #0
   11cf0:	ldr	r3, [fp, #12]
   11cf4:	ldr	r2, [sp, #56]	; 0x38
   11cf8:	cmp	r2, r3
   11cfc:	bge	121d8 <__assert_fail@plt+0xc80>
   11d00:	ldr	r2, [sp, #56]	; 0x38
   11d04:	ldr	r3, [fp, #16]
   11d08:	lsl	r2, r2, #6
   11d0c:	add	r3, r3, r2
   11d10:	ldrb	r3, [r3, #30]
   11d14:	str	r2, [sp, #52]	; 0x34
   11d18:	cmp	r3, #0
   11d1c:	bne	11e80 <__assert_fail@plt+0x928>
   11d20:	ldrd	r8, [sp, #80]	; 0x50
   11d24:	mov	r4, #0
   11d28:	mov	r5, #0
   11d2c:	ldr	r6, [fp, #16]
   11d30:	ldr	r3, [sp, #52]	; 0x34
   11d34:	add	r6, r6, r3
   11d38:	ldrb	r3, [r6, #28]
   11d3c:	cmp	r3, #0
   11d40:	bne	11d54 <__assert_fail@plt+0x7fc>
   11d44:	ldrd	r2, [r6, #16]
   11d48:	cmp	r2, r4
   11d4c:	sbcs	r3, r3, r5
   11d50:	blt	11fe0 <__assert_fail@plt+0xa88>
   11d54:	adds	r7, r4, #1
   11d58:	ldr	r1, [r6, #8]
   11d5c:	adc	ip, r5, #0
   11d60:	ldr	r0, [r6, #12]
   11d64:	str	ip, [sp, #36]	; 0x24
   11d68:	umull	r2, r3, r1, r7
   11d6c:	mul	r0, r7, r0
   11d70:	mla	r1, r1, ip, r0
   11d74:	add	r3, r1, r3
   11d78:	strd	r2, [sp, #24]
   11d7c:	bl	12a54 <__assert_fail@plt+0x14fc>
   11d80:	ldrd	r0, [fp, #208]	; 0xd0
   11d84:	adds	r0, r0, #1
   11d88:	adc	r1, r1, #0
   11d8c:	bl	130dc <__assert_fail@plt+0x1b84>
   11d90:	cmp	r0, #0
   11d94:	ldrd	r2, [sp, #24]
   11d98:	beq	11e4c <__assert_fail@plt+0x8f4>
   11d9c:	strd	r2, [sp, #24]
   11da0:	bl	131f8 <__assert_fail@plt+0x1ca0>
   11da4:	ldrd	r2, [sp, #24]
   11da8:	adds	r8, r0, #1
   11dac:	adc	r9, r1, #0
   11db0:	cmp	r0, r2
   11db4:	sbcs	r1, r1, r3
   11db8:	bge	11e18 <__assert_fail@plt+0x8c0>
   11dbc:	adds	r1, r2, #1
   11dc0:	strd	r4, [sp, #24]
   11dc4:	mov	r5, fp
   11dc8:	adc	r3, r3, #0
   11dcc:	mov	fp, r6
   11dd0:	str	r1, [sp, #40]	; 0x28
   11dd4:	str	r3, [sp, #44]	; 0x2c
   11dd8:	str	r7, [sp, #48]	; 0x30
   11ddc:	ldrd	r6, [sp, #40]	; 0x28
   11de0:	bl	1327c <__assert_fail@plt+0x1d24>
   11de4:	subs	r1, r0, #0
   11de8:	beq	12210 <__assert_fail@plt+0xcb8>
   11dec:	add	r1, r1, #4
   11df0:	bl	12d08 <__assert_fail@plt+0x17b0>
   11df4:	adds	r8, r8, #1
   11df8:	adc	r9, r9, #0
   11dfc:	cmp	r9, r7
   11e00:	cmpeq	r8, r6
   11e04:	bne	11de0 <__assert_fail@plt+0x888>
   11e08:	mov	r6, fp
   11e0c:	mov	fp, r5
   11e10:	ldrd	r4, [sp, #24]
   11e14:	ldr	r7, [sp, #48]	; 0x30
   11e18:	bl	128a4 <__assert_fail@plt+0x134c>
   11e1c:	ldrb	r3, [fp, #220]	; 0xdc
   11e20:	cmp	r3, #0
   11e24:	bne	11e68 <__assert_fail@plt+0x910>
   11e28:	ldrd	r0, [fp, #208]	; 0xd0
   11e2c:	adds	r0, r0, #1
   11e30:	adc	r1, r1, #0
   11e34:	bl	130dc <__assert_fail@plt+0x1b84>
   11e38:	cmp	r0, #0
   11e3c:	beq	11e70 <__assert_fail@plt+0x918>
   11e40:	mov	r4, r7
   11e44:	ldr	r5, [sp, #36]	; 0x24
   11e48:	b	11d2c <__assert_fail@plt+0x7d4>
   11e4c:	ldrb	r1, [fp, #220]	; 0xdc
   11e50:	cmp	r1, #0
   11e54:	beq	11d9c <__assert_fail@plt+0x844>
   11e58:	mov	r2, r4
   11e5c:	mov	r3, r5
   11e60:	add	r0, r6, #8
   11e64:	bl	12b78 <__assert_fail@plt+0x1620>
   11e68:	bl	1327c <__assert_fail@plt+0x1d24>
   11e6c:	b	11e28 <__assert_fail@plt+0x8d0>
   11e70:	ldrb	r3, [fp, #220]	; 0xdc
   11e74:	cmp	r3, #0
   11e78:	bne	11e40 <__assert_fail@plt+0x8e8>
   11e7c:	b	11e58 <__assert_fail@plt+0x900>
   11e80:	ldr	r9, [sp, #52]	; 0x34
   11e84:	mov	r2, #0
   11e88:	mov	r3, #0
   11e8c:	strd	r2, [sp, #24]
   11e90:	ldr	r3, [fp, #16]
   11e94:	add	r7, r3, r9
   11e98:	str	r3, [sp, #36]	; 0x24
   11e9c:	ldrb	r3, [r7, #28]
   11ea0:	cmp	r3, #0
   11ea4:	bne	11ebc <__assert_fail@plt+0x964>
   11ea8:	ldrd	r2, [r7, #16]
   11eac:	ldrd	r0, [sp, #24]
   11eb0:	cmp	r2, r0
   11eb4:	sbcs	r3, r3, r1
   11eb8:	blt	11fe4 <__assert_fail@plt+0xa8c>
   11ebc:	ldrb	r4, [r7, #29]
   11ec0:	cmp	r4, #0
   11ec4:	beq	120f4 <__assert_fail@plt+0xb9c>
   11ec8:	ldr	r3, [sp, #36]	; 0x24
   11ecc:	add	r5, r7, #32
   11ed0:	ldrd	r2, [r3, r9]
   11ed4:	cmp	r2, #0
   11ed8:	sbcs	r3, r3, #0
   11edc:	bge	11f2c <__assert_fail@plt+0x9d4>
   11ee0:	b	11fb0 <__assert_fail@plt+0xa58>
   11ee4:	ldr	r3, [r0]
   11ee8:	ldr	r1, [r0, #4]
   11eec:	mov	r0, r5
   11ef0:	add	r2, r1, r3
   11ef4:	ldrb	r2, [r2, #-1]
   11ef8:	cmp	r2, #10
   11efc:	subeq	r3, r3, #1
   11f00:	mov	r2, r3
   11f04:	stm	sp, {r3, sl}
   11f08:	mov	r3, #0
   11f0c:	bl	23d10 <__assert_fail@plt+0x127b8>
   11f10:	cmn	r0, #2
   11f14:	beq	122e4 <__assert_fail@plt+0xd8c>
   11f18:	cmn	r0, #1
   11f1c:	bne	11ff4 <__assert_fail@plt+0xa9c>
   11f20:	bl	1327c <__assert_fail@plt+0x1d24>
   11f24:	cmp	r4, #0
   11f28:	beq	12128 <__assert_fail@plt+0xbd0>
   11f2c:	ldr	r0, [fp, #208]	; 0xd0
   11f30:	ldr	r2, [fp, #212]	; 0xd4
   11f34:	adds	r3, r0, #1
   11f38:	mov	r0, r3
   11f3c:	adc	r2, r2, #0
   11f40:	str	r3, [fp, #208]	; 0xd0
   11f44:	mov	r1, r2
   11f48:	str	r2, [fp, #212]	; 0xd4
   11f4c:	bl	130dc <__assert_fail@plt+0x1b84>
   11f50:	cmp	r0, #0
   11f54:	bne	11ee4 <__assert_fail@plt+0x98c>
   11f58:	ldrb	r3, [r7, #28]
   11f5c:	cmp	r3, #0
   11f60:	beq	12488 <__assert_fail@plt+0xf30>
   11f64:	cmp	r4, #0
   11f68:	beq	121bc <__assert_fail@plt+0xc64>
   11f6c:	mov	r0, #0
   11f70:	bl	11408 <exit@plt>
   11f74:	ldr	r3, [r0]
   11f78:	ldr	r1, [r0, #4]
   11f7c:	mov	r0, r5
   11f80:	add	r2, r1, r3
   11f84:	ldrb	r2, [r2, #-1]
   11f88:	cmp	r2, #10
   11f8c:	subeq	r3, r3, #1
   11f90:	mov	r2, r3
   11f94:	stm	sp, {r3, sl}
   11f98:	mov	r3, #0
   11f9c:	bl	23d10 <__assert_fail@plt+0x127b8>
   11fa0:	cmn	r0, #2
   11fa4:	beq	122e4 <__assert_fail@plt+0xd8c>
   11fa8:	cmn	r0, #1
   11fac:	bne	11ff4 <__assert_fail@plt+0xa9c>
   11fb0:	ldr	r0, [fp, #208]	; 0xd0
   11fb4:	ldr	r2, [fp, #212]	; 0xd4
   11fb8:	adds	r3, r0, #1
   11fbc:	mov	r0, r3
   11fc0:	adc	r2, r2, #0
   11fc4:	str	r3, [fp, #208]	; 0xd0
   11fc8:	mov	r1, r2
   11fcc:	str	r2, [fp, #212]	; 0xd4
   11fd0:	bl	130dc <__assert_fail@plt+0x1b84>
   11fd4:	cmp	r0, #0
   11fd8:	bne	11f74 <__assert_fail@plt+0xa1c>
   11fdc:	b	11f58 <__assert_fail@plt+0xa00>
   11fe0:	strd	r8, [sp, #80]	; 0x50
   11fe4:	ldr	r3, [sp, #56]	; 0x38
   11fe8:	add	r3, r3, #1
   11fec:	str	r3, [sp, #56]	; 0x38
   11ff0:	b	11cf0 <__assert_fail@plt+0x798>
   11ff4:	ldr	r2, [sp, #36]	; 0x24
   11ff8:	ldr	r1, [fp, #208]	; 0xd0
   11ffc:	ldr	r3, [r2, r9]
   12000:	add	r2, r2, r9
   12004:	ldr	r0, [r2, #4]
   12008:	ldr	r2, [fp, #212]	; 0xd4
   1200c:	adds	r3, r3, r1
   12010:	str	r3, [sp, #64]	; 0x40
   12014:	ldr	r3, [r7, #24]
   12018:	str	r3, [sp, #48]	; 0x30
   1201c:	adc	r3, r0, r2
   12020:	str	r3, [sp, #68]	; 0x44
   12024:	bl	131f8 <__assert_fail@plt+0x1ca0>
   12028:	ldrd	r2, [sp, #64]	; 0x40
   1202c:	cmp	r2, r0
   12030:	sbcs	r3, r3, r1
   12034:	blt	1241c <__assert_fail@plt+0xec4>
   12038:	ldrd	r2, [sp, #64]	; 0x40
   1203c:	subs	ip, r2, r0
   12040:	sbc	r3, r3, r1
   12044:	str	ip, [sp, #72]	; 0x48
   12048:	str	r3, [sp, #76]	; 0x4c
   1204c:	ldrd	r2, [sp, #72]	; 0x48
   12050:	orrs	r3, r2, r3
   12054:	beq	120ac <__assert_fail@plt+0xb54>
   12058:	mov	r5, fp
   1205c:	mov	r6, #0
   12060:	mov	fp, r9
   12064:	mov	r7, #0
   12068:	ldrd	r8, [sp, #72]	; 0x48
   1206c:	b	12084 <__assert_fail@plt+0xb2c>
   12070:	adds	r6, r6, #1
   12074:	adc	r7, r7, #0
   12078:	cmp	r9, r7
   1207c:	cmpeq	r8, r6
   12080:	beq	120a4 <__assert_fail@plt+0xb4c>
   12084:	bl	1327c <__assert_fail@plt+0x1d24>
   12088:	subs	r1, r0, #0
   1208c:	beq	123b8 <__assert_fail@plt+0xe60>
   12090:	cmp	r4, #0
   12094:	bne	12070 <__assert_fail@plt+0xb18>
   12098:	add	r1, r1, #4
   1209c:	bl	12d08 <__assert_fail@plt+0x17b0>
   120a0:	b	12070 <__assert_fail@plt+0xb18>
   120a4:	mov	r9, fp
   120a8:	mov	fp, r5
   120ac:	cmp	r4, #0
   120b0:	beq	121d0 <__assert_fail@plt+0xc78>
   120b4:	ldr	r3, [sp, #36]	; 0x24
   120b8:	ldrd	r2, [r3, r9]
   120bc:	cmp	r2, #1
   120c0:	sbcs	r3, r3, #0
   120c4:	ldrdge	r2, [sp, #64]	; 0x40
   120c8:	strdge	r2, [fp, #208]	; 0xd0
   120cc:	ldrb	r3, [fp, #220]	; 0xdc
   120d0:	cmp	r3, #0
   120d4:	bne	121c8 <__assert_fail@plt+0xc70>
   120d8:	ldr	r3, [sp, #24]
   120dc:	adds	r3, r3, #1
   120e0:	str	r3, [sp, #24]
   120e4:	ldr	r3, [sp, #28]
   120e8:	adc	r3, r3, #0
   120ec:	str	r3, [sp, #28]
   120f0:	b	11e90 <__assert_fail@plt+0x938>
   120f4:	bl	12a54 <__assert_fail@plt+0x14fc>
   120f8:	b	11ec8 <__assert_fail@plt+0x970>
   120fc:	cmp	r4, #0
   12100:	beq	12224 <__assert_fail@plt+0xccc>
   12104:	mvn	ip, #-2147483648	; 0x80000000
   12108:	mvn	r3, #0
   1210c:	mov	r2, #1
   12110:	stm	sp, {r0, ip}
   12114:	mov	r0, r1
   12118:	bl	1154c <__snprintf_chk@plt>
   1211c:	cmp	r0, #0
   12120:	bge	1193c <__assert_fail@plt+0x3e4>
   12124:	bl	12db8 <__assert_fail@plt+0x1860>
   12128:	add	r1, r0, #4
   1212c:	bl	12d08 <__assert_fail@plt+0x17b0>
   12130:	b	11f2c <__assert_fail@plt+0x9d4>
   12134:	movw	r1, #29508	; 0x7344
   12138:	movt	r1, #2
   1213c:	b	118b0 <__assert_fail@plt+0x358>
   12140:	ldrb	r2, [r3, #1]!
   12144:	sub	r2, r2, #48	; 0x30
   12148:	cmp	r2, #9
   1214c:	bhi	11868 <__assert_fail@plt+0x310>
   12150:	b	12140 <__assert_fail@plt+0xbe8>
   12154:	mov	r3, r4
   12158:	mov	r2, r4
   1215c:	mov	r1, r6
   12160:	mov	r0, r4
   12164:	bl	13a0c <__assert_fail@plt+0x24b4>
   12168:	cmp	r0, #0
   1216c:	bge	11988 <__assert_fail@plt+0x430>
   12170:	bl	1142c <__errno_location@plt>
   12174:	ldr	r5, [r0]
   12178:	mov	r2, #5
   1217c:	mov	r0, r4
   12180:	movw	r1, #29656	; 0x73d8
   12184:	movt	r1, #2
   12188:	bl	112d0 <dcgettext@plt>
   1218c:	mov	r4, r0
   12190:	mov	r1, r6
   12194:	mov	r0, #4
   12198:	bl	15de8 <__assert_fail@plt+0x4890>
   1219c:	mov	r3, r0
   121a0:	mov	r2, r4
   121a4:	mov	r1, r5
   121a8:	mov	r0, #1
   121ac:	bl	11384 <error@plt>
   121b0:	mov	r2, #1
   121b4:	strb	lr, [r3]
   121b8:	b	118f4 <__assert_fail@plt+0x39c>
   121bc:	bl	13374 <__assert_fail@plt+0x1e1c>
   121c0:	bl	128a4 <__assert_fail@plt+0x134c>
   121c4:	b	11f6c <__assert_fail@plt+0xa14>
   121c8:	bl	1327c <__assert_fail@plt+0x1d24>
   121cc:	b	120d8 <__assert_fail@plt+0xb80>
   121d0:	bl	128a4 <__assert_fail@plt+0x134c>
   121d4:	b	120b4 <__assert_fail@plt+0xb5c>
   121d8:	bl	12a54 <__assert_fail@plt+0x14fc>
   121dc:	bl	13374 <__assert_fail@plt+0x1e1c>
   121e0:	bl	128a4 <__assert_fail@plt+0x134c>
   121e4:	mov	r0, #0
   121e8:	bl	11540 <close@plt>
   121ec:	cmp	r0, #0
   121f0:	bne	12498 <__assert_fail@plt+0xf40>
   121f4:	add	sp, sp, #244	; 0xf4
   121f8:	ldrd	r4, [sp]
   121fc:	ldrd	r6, [sp, #8]
   12200:	ldrd	r8, [sp, #16]
   12204:	ldrd	sl, [sp, #24]
   12208:	add	sp, sp, #32
   1220c:	pop	{pc}		; (ldr pc, [sp], #4)
   12210:	ldrd	r4, [sp, #24]
   12214:	add	r0, fp, #8
   12218:	mov	r2, r4
   1221c:	mov	r3, r5
   12220:	bl	12b78 <__assert_fail@plt+0x1620>
   12224:	movw	r1, #29372	; 0x72bc
   12228:	movt	r1, #2
   1222c:	mov	r2, #5
   12230:	mov	r0, #0
   12234:	bl	112d0 <dcgettext@plt>
   12238:	mov	r2, r0
   1223c:	mov	r1, #0
   12240:	mov	r0, #1
   12244:	bl	11384 <error@plt>
   12248:	mov	r0, r4
   1224c:	bl	1348c <__assert_fail@plt+0x1f34>
   12250:	cmp	r3, r9
   12254:	blt	124d4 <__assert_fail@plt+0xf7c>
   12258:	mov	r2, #5
   1225c:	movw	r1, #29328	; 0x7290
   12260:	movt	r1, #2
   12264:	mov	r0, r4
   12268:	bl	112d0 <dcgettext@plt>
   1226c:	mov	r2, r0
   12270:	mov	r1, r4
   12274:	mov	r0, r4
   12278:	bl	11384 <error@plt>
   1227c:	mov	r0, #1
   12280:	bl	1348c <__assert_fail@plt+0x1f34>
   12284:	mov	r5, r1
   12288:	mov	r2, #5
   1228c:	movw	r1, #29796	; 0x7464
   12290:	movt	r1, #2
   12294:	mov	r0, #0
   12298:	bl	112d0 <dcgettext@plt>
   1229c:	mov	r4, r0
   122a0:	ldr	r0, [r5]
   122a4:	bl	1609c <__assert_fail@plt+0x4b44>
   122a8:	mov	r3, r0
   122ac:	mov	r2, r4
   122b0:	mov	r1, #0
   122b4:	mov	r0, #1
   122b8:	bl	11384 <error@plt>
   122bc:	mov	r4, r1
   122c0:	mov	r2, #5
   122c4:	movw	r1, #29816	; 0x7478
   122c8:	movt	r1, #2
   122cc:	bl	112d0 <dcgettext@plt>
   122d0:	mov	r2, r0
   122d4:	mov	r0, #1
   122d8:	ldr	r3, [r4]
   122dc:	ldr	r1, [sp, #24]
   122e0:	bl	11384 <error@plt>
   122e4:	mov	r2, #5
   122e8:	movw	r1, #30064	; 0x7570
   122ec:	movt	r1, #2
   122f0:	mov	r0, #0
   122f4:	bl	112d0 <dcgettext@plt>
   122f8:	mov	r1, #0
   122fc:	mov	r2, r0
   12300:	mov	r0, r1
   12304:	bl	11384 <error@plt>
   12308:	bl	12854 <__assert_fail@plt+0x12fc>
   1230c:	mov	r5, r1
   12310:	mov	r2, #5
   12314:	movw	r1, #29860	; 0x74a4
   12318:	movt	r1, #2
   1231c:	bl	112d0 <dcgettext@plt>
   12320:	mov	r4, r0
   12324:	ldr	r0, [r5]
   12328:	bl	1609c <__assert_fail@plt+0x4b44>
   1232c:	mov	r5, r0
   12330:	add	r2, sp, #96	; 0x60
   12334:	ldrd	r0, [fp, #224]	; 0xe0
   12338:	bl	13ccc <__assert_fail@plt+0x2774>
   1233c:	mov	r3, r5
   12340:	mov	r2, r4
   12344:	str	r0, [sp]
   12348:	mov	r0, #1
   1234c:	ldr	r1, [sp, #24]
   12350:	bl	11384 <error@plt>
   12354:	mov	r2, #5
   12358:	movw	r1, #29720	; 0x7418
   1235c:	movt	r1, #2
   12360:	mov	r0, r7
   12364:	bl	112d0 <dcgettext@plt>
   12368:	mov	r4, r0
   1236c:	mov	r0, r6
   12370:	bl	1609c <__assert_fail@plt+0x4b44>
   12374:	mov	r3, r0
   12378:	mov	r2, r4
   1237c:	str	r8, [sp]
   12380:	mov	r1, r7
   12384:	mov	r0, r7
   12388:	bl	11384 <error@plt>
   1238c:	bl	12854 <__assert_fail@plt+0x12fc>
   12390:	mov	r2, #5
   12394:	movw	r1, #29684	; 0x73f4
   12398:	movt	r1, #2
   1239c:	bl	112d0 <dcgettext@plt>
   123a0:	mov	r2, r0
   123a4:	mov	r3, r6
   123a8:	str	r4, [sp]
   123ac:	mov	r0, #1
   123b0:	ldr	r1, [sp, #24]
   123b4:	bl	11384 <error@plt>
   123b8:	ldr	r8, [sp, #48]	; 0x30
   123bc:	movw	r1, #27524	; 0x6b84
   123c0:	movt	r1, #2
   123c4:	mov	fp, r5
   123c8:	mov	r2, #5
   123cc:	bl	112d0 <dcgettext@plt>
   123d0:	ldr	r3, [fp, #216]	; 0xd8
   123d4:	mov	r4, r0
   123d8:	ldr	r0, [r3, r8, lsl #2]
   123dc:	bl	1609c <__assert_fail@plt+0x4b44>
   123e0:	mov	r1, #0
   123e4:	mov	r3, r0
   123e8:	mov	r2, r4
   123ec:	mov	r0, r1
   123f0:	bl	11384 <error@plt>
   123f4:	bl	12854 <__assert_fail@plt+0x12fc>
   123f8:	movw	r1, #30020	; 0x7544
   123fc:	movt	r1, #2
   12400:	mov	r2, #5
   12404:	mov	r0, #0
   12408:	bl	112d0 <dcgettext@plt>
   1240c:	ldr	r3, [fp, #216]	; 0xd8
   12410:	mov	r4, r0
   12414:	ldr	r0, [r3, r7]
   12418:	b	122a4 <__assert_fail@plt+0xd4c>
   1241c:	movw	r1, #27524	; 0x6b84
   12420:	movt	r1, #2
   12424:	ldr	r8, [sp, #48]	; 0x30
   12428:	mov	r2, #5
   1242c:	mov	r0, #0
   12430:	b	123cc <__assert_fail@plt+0xe74>
   12434:	movw	r1, #29984	; 0x7520
   12438:	movt	r1, #2
   1243c:	mov	r2, #5
   12440:	mov	r0, #0
   12444:	bl	112d0 <dcgettext@plt>
   12448:	mov	r4, r0
   1244c:	mov	r0, r6
   12450:	b	122a4 <__assert_fail@plt+0xd4c>
   12454:	mov	r2, #5
   12458:	movw	r1, #29600	; 0x73a0
   1245c:	movt	r1, #2
   12460:	mov	r0, #0
   12464:	bl	112d0 <dcgettext@plt>
   12468:	tst	r4, #2
   1246c:	mov	r2, r0
   12470:	str	r6, [sp]
   12474:	movne	r3, #35	; 0x23
   12478:	moveq	r3, #39	; 0x27
   1247c:	mov	r1, #0
   12480:	mov	r0, #1
   12484:	bl	11384 <error@plt>
   12488:	add	r0, r7, #24
   1248c:	str	r4, [sp]
   12490:	ldrd	r2, [sp, #24]
   12494:	bl	133a0 <__assert_fail@plt+0x1e48>
   12498:	bl	1142c <__errno_location@plt>
   1249c:	ldr	r4, [r0]
   124a0:	mov	r2, #5
   124a4:	movw	r1, #27596	; 0x6bcc
   124a8:	movt	r1, #2
   124ac:	mov	r0, #0
   124b0:	bl	112d0 <dcgettext@plt>
   124b4:	mov	r2, r0
   124b8:	mov	r0, #0
   124bc:	mov	r1, r4
   124c0:	bl	11384 <error@plt>
   124c4:	bl	12854 <__assert_fail@plt+0x12fc>
   124c8:	movw	r1, #29420	; 0x72ec
   124cc:	movt	r1, #2
   124d0:	b	1222c <__assert_fail@plt+0xcd4>
   124d4:	mov	r2, #5
   124d8:	mov	r0, r4
   124dc:	movw	r1, #29344	; 0x72a0
   124e0:	movt	r1, #2
   124e4:	bl	112d0 <dcgettext@plt>
   124e8:	sub	r3, r9, #-1073741823	; 0xc0000001
   124ec:	mov	r5, r0
   124f0:	ldr	r0, [sl, r3, lsl #2]
   124f4:	bl	1609c <__assert_fail@plt+0x4b44>
   124f8:	mov	r3, r0
   124fc:	mov	r2, r5
   12500:	mov	r1, r4
   12504:	mov	r0, r4
   12508:	bl	11384 <error@plt>
   1250c:	b	1227c <__assert_fail@plt+0xd24>
   12510:	andeq	r6, r2, r4, lsl #21
   12514:	andeq	r8, r3, r4, ror #3
   12518:	andeq	r6, r2, r4, lsr fp
   1251c:	mov	fp, #0
   12520:	mov	lr, #0
   12524:	pop	{r1}		; (ldr r1, [sp], #4)
   12528:	mov	r2, sp
   1252c:	push	{r2}		; (str r2, [sp, #-4]!)
   12530:	push	{r0}		; (str r0, [sp, #-4]!)
   12534:	ldr	ip, [pc, #16]	; 1254c <__assert_fail@plt+0xff4>
   12538:	push	{ip}		; (str ip, [sp, #-4]!)
   1253c:	ldr	r0, [pc, #12]	; 12550 <__assert_fail@plt+0xff8>
   12540:	ldr	r3, [pc, #12]	; 12554 <__assert_fail@plt+0xffc>
   12544:	bl	113b4 <__libc_start_main@plt>
   12548:	bl	11534 <abort@plt>
   1254c:	andeq	r6, r2, r8, lsl sl
   12550:	andeq	r1, r1, r4, ror #10
   12554:			; <UNDEFINED> instruction: 0x000269b8
   12558:	ldr	r3, [pc, #20]	; 12574 <__assert_fail@plt+0x101c>
   1255c:	ldr	r2, [pc, #20]	; 12578 <__assert_fail@plt+0x1020>
   12560:	add	r3, pc, r3
   12564:	ldr	r2, [r3, r2]
   12568:	cmp	r2, #0
   1256c:	bxeq	lr
   12570:	b	113e4 <__gmon_start__@plt>
   12574:	muleq	r2, r8, sl
   12578:	andeq	r0, r0, r0, asr r1
   1257c:	ldr	r0, [pc, #24]	; 1259c <__assert_fail@plt+0x1044>
   12580:	ldr	r3, [pc, #24]	; 125a0 <__assert_fail@plt+0x1048>
   12584:	cmp	r3, r0
   12588:	bxeq	lr
   1258c:	ldr	r3, [pc, #16]	; 125a4 <__assert_fail@plt+0x104c>
   12590:	cmp	r3, #0
   12594:	bxeq	lr
   12598:	bx	r3
   1259c:	andeq	r8, r3, r8, lsr #3
   125a0:	andeq	r8, r3, r8, lsr #3
   125a4:	andeq	r0, r0, r0
   125a8:	ldr	r0, [pc, #36]	; 125d4 <__assert_fail@plt+0x107c>
   125ac:	ldr	r1, [pc, #36]	; 125d8 <__assert_fail@plt+0x1080>
   125b0:	sub	r1, r1, r0
   125b4:	asr	r1, r1, #2
   125b8:	add	r1, r1, r1, lsr #31
   125bc:	asrs	r1, r1, #1
   125c0:	bxeq	lr
   125c4:	ldr	r3, [pc, #16]	; 125dc <__assert_fail@plt+0x1084>
   125c8:	cmp	r3, #0
   125cc:	bxeq	lr
   125d0:	bx	r3
   125d4:	andeq	r8, r3, r8, lsr #3
   125d8:	andeq	r8, r3, r8, lsr #3
   125dc:	andeq	r0, r0, r0
   125e0:	push	{r4, lr}
   125e4:	ldr	r4, [pc, #24]	; 12604 <__assert_fail@plt+0x10ac>
   125e8:	ldrb	r3, [r4]
   125ec:	cmp	r3, #0
   125f0:	popne	{r4, pc}
   125f4:	bl	1257c <__assert_fail@plt+0x1024>
   125f8:	mov	r3, #1
   125fc:	strb	r3, [r4]
   12600:	pop	{r4, pc}
   12604:	andeq	r8, r3, r4, asr #3
   12608:	b	125a8 <__assert_fail@plt+0x1050>
   1260c:	strd	r4, [sp, #-16]!
   12610:	movw	r4, #33224	; 0x81c8
   12614:	movt	r4, #3
   12618:	ldr	r3, [r4]
   1261c:	mov	r5, r0
   12620:	str	r6, [sp, #8]
   12624:	str	lr, [sp, #12]
   12628:	sub	sp, sp, #8
   1262c:	ldr	r1, [r4, #4]
   12630:	mov	r0, r3
   12634:	bl	11360 <strcpy@plt>
   12638:	ldr	r3, [r4, #8]
   1263c:	ldr	r6, [r4]
   12640:	ldr	r0, [r4, #4]
   12644:	cmp	r3, #0
   12648:	beq	12680 <__assert_fail@plt+0x1128>
   1264c:	bl	11414 <strlen@plt>
   12650:	add	r0, r6, r0
   12654:	mvn	r2, #0
   12658:	str	r5, [sp]
   1265c:	mov	r1, #1
   12660:	ldr	r3, [r4, #8]
   12664:	bl	11444 <__sprintf_chk@plt>
   12668:	ldr	r0, [r4]
   1266c:	add	sp, sp, #8
   12670:	ldrd	r4, [sp]
   12674:	ldr	r6, [sp, #8]
   12678:	add	sp, sp, #12
   1267c:	pop	{pc}		; (ldr pc, [sp], #4)
   12680:	bl	11414 <strlen@plt>
   12684:	movw	r3, #33116	; 0x815c
   12688:	movt	r3, #3
   1268c:	str	r5, [sp, #4]
   12690:	ldr	ip, [r3]
   12694:	add	r0, r6, r0
   12698:	mvn	r2, #0
   1269c:	mov	r1, #1
   126a0:	movw	r3, #27488	; 0x6b60
   126a4:	movt	r3, #2
   126a8:	str	ip, [sp]
   126ac:	bl	11444 <__sprintf_chk@plt>
   126b0:	b	12668 <__assert_fail@plt+0x1110>
   126b4:	str	r4, [sp, #-16]!
   126b8:	movw	r4, #33224	; 0x81c8
   126bc:	movt	r4, #3
   126c0:	ldr	r3, [r4, #12]
   126c4:	strd	r6, [sp, #4]
   126c8:	str	lr, [sp, #12]
   126cc:	sub	sp, sp, #8
   126d0:	ldr	r1, [r4, #20]
   126d4:	ldr	r2, [r4, #16]
   126d8:	cmp	r3, r1
   126dc:	beq	12724 <__assert_fail@plt+0x11cc>
   126e0:	lsl	r1, r3, #6
   126e4:	mov	r6, #0
   126e8:	mov	r7, #0
   126ec:	mov	ip, #0
   126f0:	add	r3, r3, #1
   126f4:	add	r0, r2, r1
   126f8:	str	r3, [r4, #12]
   126fc:	strd	r6, [r0, #8]
   12700:	strd	r6, [r0, #16]
   12704:	strb	ip, [r0, #28]
   12708:	strb	ip, [r0, #30]
   1270c:	strd	r6, [r2, r1]
   12710:	add	sp, sp, #8
   12714:	ldr	r4, [sp]
   12718:	ldrd	r6, [sp, #4]
   1271c:	add	sp, sp, #12
   12720:	pop	{pc}		; (ldr pc, [sp], #4)
   12724:	mov	r1, #64	; 0x40
   12728:	mov	r0, r2
   1272c:	mvn	r3, #0
   12730:	mov	r2, #1
   12734:	str	r1, [sp]
   12738:	add	r1, r4, #20
   1273c:	bl	24648 <__assert_fail@plt+0x130f0>
   12740:	mov	r2, r0
   12744:	str	r0, [r4, #16]
   12748:	ldr	r3, [r4, #12]
   1274c:	b	126e0 <__assert_fail@plt+0x1188>
   12750:	strd	r4, [sp, #-16]!
   12754:	mov	r5, r0
   12758:	ldr	r0, [r0, #32]
   1275c:	str	r6, [sp, #8]
   12760:	str	lr, [sp, #12]
   12764:	cmp	r0, #0
   12768:	beq	1277c <__assert_fail@plt+0x1224>
   1276c:	ldr	r4, [r0, #652]	; 0x28c
   12770:	bl	13b9c <__assert_fail@plt+0x2644>
   12774:	subs	r0, r4, #0
   12778:	bne	1276c <__assert_fail@plt+0x1214>
   1277c:	ldr	r0, [r5, #28]
   12780:	bl	13b9c <__assert_fail@plt+0x2644>
   12784:	mov	r0, r5
   12788:	ldrd	r4, [sp]
   1278c:	ldr	r6, [sp, #8]
   12790:	ldr	lr, [sp, #12]
   12794:	add	sp, sp, #16
   12798:	b	13b9c <__assert_fail@plt+0x2644>
   1279c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   127a0:	strd	r6, [sp, #8]
   127a4:	strd	r8, [sp, #16]
   127a8:	movw	r9, #33224	; 0x81c8
   127ac:	movt	r9, #3
   127b0:	ldr	r4, [r9, #24]
   127b4:	mov	r8, r0
   127b8:	str	sl, [sp, #24]
   127bc:	movw	sl, #29752	; 0x7438
   127c0:	movt	sl, #2
   127c4:	str	lr, [sp, #28]
   127c8:	subs	r4, r4, #1
   127cc:	mov	r0, r4
   127d0:	bmi	12834 <__assert_fail@plt+0x12dc>
   127d4:	bl	1260c <__assert_fail@plt+0x10b4>
   127d8:	mov	r7, r0
   127dc:	bl	112dc <unlink@plt>
   127e0:	cmp	r0, #0
   127e4:	beq	127c8 <__assert_fail@plt+0x1270>
   127e8:	bl	1142c <__errno_location@plt>
   127ec:	ldr	r6, [r0]
   127f0:	cmp	r6, #2
   127f4:	movne	r5, r8
   127f8:	orreq	r5, r8, #1
   127fc:	cmp	r5, #0
   12800:	bne	127c8 <__assert_fail@plt+0x1270>
   12804:	mov	r2, r7
   12808:	mov	r1, #3
   1280c:	mov	r0, r5
   12810:	bl	15ec4 <__assert_fail@plt+0x496c>
   12814:	mov	r3, r0
   12818:	mov	r2, sl
   1281c:	mov	r0, r5
   12820:	mov	r1, r6
   12824:	bl	11384 <error@plt>
   12828:	subs	r4, r4, #1
   1282c:	mov	r0, r4
   12830:	bpl	127d4 <__assert_fail@plt+0x127c>
   12834:	mov	r3, #0
   12838:	ldrd	r4, [sp]
   1283c:	str	r3, [r9, #24]
   12840:	ldrd	r6, [sp, #8]
   12844:	ldrd	r8, [sp, #16]
   12848:	ldr	sl, [sp, #24]
   1284c:	add	sp, sp, #28
   12850:	pop	{pc}		; (ldr pc, [sp], #4)
   12854:	movw	r4, #33224	; 0x81c8
   12858:	movt	r4, #3
   1285c:	push	{lr}		; (str lr, [sp, #-4]!)
   12860:	sub	sp, sp, #132	; 0x84
   12864:	bl	128a4 <__assert_fail@plt+0x134c>
   12868:	add	r1, r4, #28
   1286c:	mov	r2, sp
   12870:	mov	r0, #0
   12874:	bl	11228 <sigprocmask@plt>
   12878:	ldrb	r3, [r4, #156]	; 0x9c
   1287c:	cmp	r3, #0
   12880:	beq	1288c <__assert_fail@plt+0x1334>
   12884:	mov	r0, #0
   12888:	bl	1279c <__assert_fail@plt+0x1244>
   1288c:	mov	r1, sp
   12890:	mov	r2, #0
   12894:	mov	r0, #2
   12898:	bl	11228 <sigprocmask@plt>
   1289c:	mov	r0, #1
   128a0:	bl	11408 <exit@plt>
   128a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   128a8:	movw	r4, #33224	; 0x81c8
   128ac:	movt	r4, #3
   128b0:	ldr	r0, [r4, #160]	; 0xa0
   128b4:	strd	r6, [sp, #8]
   128b8:	str	r8, [sp, #16]
   128bc:	str	lr, [sp, #20]
   128c0:	sub	sp, sp, #128	; 0x80
   128c4:	cmp	r0, #0
   128c8:	beq	12910 <__assert_fail@plt+0x13b8>
   128cc:	ldr	r3, [r0]
   128d0:	ands	r5, r3, #32
   128d4:	bne	12a10 <__assert_fail@plt+0x14b8>
   128d8:	bl	13958 <__assert_fail@plt+0x2400>
   128dc:	subs	r6, r0, #0
   128e0:	bne	129d8 <__assert_fail@plt+0x1480>
   128e4:	ldrd	r2, [r4, #168]	; 0xa8
   128e8:	orrs	r1, r2, r3
   128ec:	bne	128fc <__assert_fail@plt+0x13a4>
   128f0:	ldrb	r1, [r4, #176]	; 0xb0
   128f4:	cmp	r1, #0
   128f8:	bne	12960 <__assert_fail@plt+0x1408>
   128fc:	ldrb	r1, [r4, #177]	; 0xb1
   12900:	cmp	r1, #0
   12904:	beq	12928 <__assert_fail@plt+0x13d0>
   12908:	mov	r3, #0
   1290c:	str	r3, [r4, #160]	; 0xa0
   12910:	add	sp, sp, #128	; 0x80
   12914:	ldrd	r4, [sp]
   12918:	ldrd	r6, [sp, #8]
   1291c:	ldr	r8, [sp, #16]
   12920:	add	sp, sp, #20
   12924:	pop	{pc}		; (ldr pc, [sp], #4)
   12928:	movw	r1, #33212	; 0x81bc
   1292c:	movt	r1, #3
   12930:	ldr	r5, [r1]
   12934:	mov	r0, r2
   12938:	mov	r1, r3
   1293c:	mov	r2, sp
   12940:	bl	13ccc <__assert_fail@plt+0x2774>
   12944:	mov	r3, r0
   12948:	movw	r2, #31232	; 0x7a00
   1294c:	movt	r2, #2
   12950:	mov	r1, #1
   12954:	mov	r0, r5
   12958:	bl	1148c <__fprintf_chk@plt>
   1295c:	b	12908 <__assert_fail@plt+0x13b0>
   12960:	add	r1, r4, #28
   12964:	mov	r2, sp
   12968:	bl	11228 <sigprocmask@plt>
   1296c:	ldr	r7, [r4, #164]	; 0xa4
   12970:	mov	r0, r7
   12974:	bl	112dc <unlink@plt>
   12978:	mov	r8, r0
   1297c:	bl	1142c <__errno_location@plt>
   12980:	ldr	r3, [r4, #24]
   12984:	mov	r1, sp
   12988:	mov	r2, r6
   1298c:	ldr	r5, [r0]
   12990:	mov	r0, #2
   12994:	sub	r3, r3, #1
   12998:	str	r3, [r4, #24]
   1299c:	bl	11228 <sigprocmask@plt>
   129a0:	cmp	r8, #0
   129a4:	cmpne	r5, #2
   129a8:	beq	12908 <__assert_fail@plt+0x13b0>
   129ac:	mov	r2, r7
   129b0:	mov	r1, #3
   129b4:	mov	r0, r6
   129b8:	bl	15ec4 <__assert_fail@plt+0x496c>
   129bc:	mov	r3, r0
   129c0:	mov	r1, r5
   129c4:	mov	r0, r6
   129c8:	movw	r2, #29752	; 0x7438
   129cc:	movt	r2, #2
   129d0:	bl	11384 <error@plt>
   129d4:	b	12908 <__assert_fail@plt+0x13b0>
   129d8:	bl	1142c <__errno_location@plt>
   129dc:	ldr	r6, [r0]
   129e0:	mov	r1, #3
   129e4:	mov	r0, r5
   129e8:	ldr	r2, [r4, #164]	; 0xa4
   129ec:	bl	15ec4 <__assert_fail@plt+0x496c>
   129f0:	mov	r3, r0
   129f4:	movw	r2, #29752	; 0x7438
   129f8:	movt	r2, #2
   129fc:	mov	r1, r6
   12a00:	mov	r0, r5
   12a04:	bl	11384 <error@plt>
   12a08:	str	r5, [r4, #160]	; 0xa0
   12a0c:	bl	12854 <__assert_fail@plt+0x12fc>
   12a10:	mov	r2, #5
   12a14:	movw	r1, #27496	; 0x6b68
   12a18:	movt	r1, #2
   12a1c:	mov	r0, #0
   12a20:	bl	112d0 <dcgettext@plt>
   12a24:	mov	r5, r0
   12a28:	mov	r0, #4
   12a2c:	ldr	r1, [r4, #164]	; 0xa4
   12a30:	bl	15de8 <__assert_fail@plt+0x4890>
   12a34:	mov	r1, #0
   12a38:	mov	r3, r0
   12a3c:	mov	r2, r5
   12a40:	mov	r0, r1
   12a44:	bl	11384 <error@plt>
   12a48:	mov	r3, #0
   12a4c:	str	r3, [r4, #160]	; 0xa0
   12a50:	bl	12854 <__assert_fail@plt+0x12fc>
   12a54:	strd	r4, [sp, #-20]!	; 0xffffffec
   12a58:	movw	r4, #33224	; 0x81c8
   12a5c:	movt	r4, #3
   12a60:	ldr	r5, [r4, #24]
   12a64:	strd	r6, [sp, #8]
   12a68:	str	lr, [sp, #16]
   12a6c:	sub	sp, sp, #132	; 0x84
   12a70:	mov	r0, r5
   12a74:	bl	1260c <__assert_fail@plt+0x10b4>
   12a78:	cmn	r5, #-2147483647	; 0x80000001
   12a7c:	mov	r6, r0
   12a80:	str	r0, [r4, #164]	; 0xa4
   12a84:	moveq	r7, #75	; 0x4b
   12a88:	bne	12ab8 <__assert_fail@plt+0x1560>
   12a8c:	mov	r2, r6
   12a90:	mov	r1, #3
   12a94:	mov	r0, #0
   12a98:	bl	15ec4 <__assert_fail@plt+0x496c>
   12a9c:	mov	r3, r0
   12aa0:	mov	r1, r7
   12aa4:	movw	r2, #29752	; 0x7438
   12aa8:	movt	r2, #2
   12aac:	mov	r0, #0
   12ab0:	bl	11384 <error@plt>
   12ab4:	bl	12854 <__assert_fail@plt+0x12fc>
   12ab8:	mov	r2, sp
   12abc:	add	r1, r4, #28
   12ac0:	mov	r0, #0
   12ac4:	bl	11228 <sigprocmask@plt>
   12ac8:	mov	r0, r6
   12acc:	movw	r1, #27516	; 0x6b7c
   12ad0:	movt	r1, #2
   12ad4:	bl	13af0 <__assert_fail@plt+0x2598>
   12ad8:	mov	r6, r0
   12adc:	cmp	r0, #0
   12ae0:	addne	r5, r5, #1
   12ae4:	str	r0, [r4, #160]	; 0xa0
   12ae8:	bl	1142c <__errno_location@plt>
   12aec:	mov	r1, sp
   12af0:	mov	r2, #0
   12af4:	ldr	r7, [r0]
   12af8:	mov	r0, #2
   12afc:	str	r5, [r4, #24]
   12b00:	bl	11228 <sigprocmask@plt>
   12b04:	cmp	r6, #0
   12b08:	ldreq	r6, [r4, #164]	; 0xa4
   12b0c:	beq	12a8c <__assert_fail@plt+0x1534>
   12b10:	mov	r2, #0
   12b14:	mov	r3, #0
   12b18:	strd	r2, [r4, #168]	; 0xa8
   12b1c:	add	sp, sp, #132	; 0x84
   12b20:	ldrd	r4, [sp]
   12b24:	ldrd	r6, [sp, #8]
   12b28:	add	sp, sp, #16
   12b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   12b30:	movw	r3, #33224	; 0x81c8
   12b34:	movt	r3, #3
   12b38:	str	r4, [sp, #-8]!
   12b3c:	ldrb	r3, [r3, #156]	; 0x9c
   12b40:	mov	r4, r0
   12b44:	str	lr, [sp, #4]
   12b48:	cmp	r3, #0
   12b4c:	beq	12b58 <__assert_fail@plt+0x1600>
   12b50:	mov	r0, #1
   12b54:	bl	1279c <__assert_fail@plt+0x1244>
   12b58:	mov	r0, r4
   12b5c:	mov	r1, #0
   12b60:	bl	112a0 <signal@plt>
   12b64:	mov	r0, r4
   12b68:	ldr	r4, [sp]
   12b6c:	ldr	lr, [sp, #4]
   12b70:	add	sp, sp, #8
   12b74:	b	111d4 <raise@plt>
   12b78:	movw	r4, #33208	; 0x81b8
   12b7c:	movt	r4, #3
   12b80:	str	r7, [sp, #-8]!
   12b84:	mov	r5, r0
   12b88:	mov	r6, r2
   12b8c:	ldr	r8, [r4]
   12b90:	mov	r2, #5
   12b94:	movw	r1, #27520	; 0x6b80
   12b98:	movt	r1, #2
   12b9c:	mov	r0, #0
   12ba0:	str	lr, [sp, #4]
   12ba4:	sub	sp, sp, #32
   12ba8:	mov	r7, r3
   12bac:	bl	112d0 <dcgettext@plt>
   12bb0:	movw	r3, #33464	; 0x82b8
   12bb4:	movt	r3, #3
   12bb8:	mov	r9, r0
   12bbc:	ldrd	r0, [r5]
   12bc0:	add	r2, sp, #8
   12bc4:	ldr	r5, [r3]
   12bc8:	bl	13ccc <__assert_fail@plt+0x2774>
   12bcc:	bl	1609c <__assert_fail@plt+0x4b44>
   12bd0:	mov	r2, r9
   12bd4:	mov	r1, #1
   12bd8:	str	r0, [sp]
   12bdc:	mov	r0, r8
   12be0:	mov	r3, r5
   12be4:	bl	1148c <__fprintf_chk@plt>
   12be8:	orrs	r3, r6, r7
   12bec:	beq	12c34 <__assert_fail@plt+0x16dc>
   12bf0:	ldr	r4, [r4]
   12bf4:	mov	r2, #5
   12bf8:	movw	r1, #27556	; 0x6ba4
   12bfc:	movt	r1, #2
   12c00:	mov	r0, #0
   12c04:	bl	112d0 <dcgettext@plt>
   12c08:	mov	r5, r0
   12c0c:	add	r2, sp, #8
   12c10:	mov	r1, r7
   12c14:	mov	r0, r6
   12c18:	bl	13ccc <__assert_fail@plt+0x2774>
   12c1c:	mov	r3, r0
   12c20:	mov	r2, r5
   12c24:	mov	r0, r4
   12c28:	mov	r1, #1
   12c2c:	bl	1148c <__fprintf_chk@plt>
   12c30:	bl	12854 <__assert_fail@plt+0x12fc>
   12c34:	mov	r0, #10
   12c38:	ldr	r1, [r4]
   12c3c:	bl	114ec <fputc@plt>
   12c40:	b	12c30 <__assert_fail@plt+0x16d8>
   12c44:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12c48:	mov	r5, r1
   12c4c:	ldr	r4, [r0]
   12c50:	strd	r6, [sp, #8]
   12c54:	mov	r7, r2
   12c58:	str	r8, [sp, #16]
   12c5c:	mov	r8, r3
   12c60:	str	lr, [sp, #20]
   12c64:	cmp	r4, #0
   12c68:	beq	12ce0 <__assert_fail@plt+0x1788>
   12c6c:	ldr	r4, [r5]
   12c70:	ldr	r0, [r4]
   12c74:	cmp	r0, #80	; 0x50
   12c78:	beq	12cac <__assert_fail@plt+0x1754>
   12c7c:	ldr	r1, [r4, #4]
   12c80:	add	r0, r0, #1
   12c84:	add	ip, r4, r1, lsl #3
   12c88:	add	r1, r1, #1
   12c8c:	str	r8, [ip, #12]
   12c90:	str	r7, [ip, #16]
   12c94:	strd	r0, [r4]
   12c98:	ldrd	r4, [sp]
   12c9c:	ldrd	r6, [sp, #8]
   12ca0:	ldr	r8, [sp, #16]
   12ca4:	add	sp, sp, #20
   12ca8:	pop	{pc}		; (ldr pc, [sp], #4)
   12cac:	mov	r0, #656	; 0x290
   12cb0:	bl	24450 <__assert_fail@plt+0x12ef8>
   12cb4:	mov	r3, #0
   12cb8:	str	r3, [r0]
   12cbc:	str	r3, [r0, #4]
   12cc0:	str	r3, [r0, #8]
   12cc4:	str	r3, [r0, #652]	; 0x28c
   12cc8:	str	r0, [r4, #652]	; 0x28c
   12ccc:	ldr	r3, [r5]
   12cd0:	ldr	r4, [r3, #652]	; 0x28c
   12cd4:	ldr	r0, [r4]
   12cd8:	str	r4, [r5]
   12cdc:	b	12c7c <__assert_fail@plt+0x1724>
   12ce0:	mov	r6, r0
   12ce4:	mov	r0, #656	; 0x290
   12ce8:	bl	24450 <__assert_fail@plt+0x12ef8>
   12cec:	str	r0, [r5]
   12cf0:	str	r4, [r0]
   12cf4:	str	r0, [r6]
   12cf8:	str	r4, [r0, #4]
   12cfc:	str	r4, [r0, #8]
   12d00:	str	r4, [r0, #652]	; 0x28c
   12d04:	b	12c6c <__assert_fail@plt+0x1714>
   12d08:	ldr	ip, [r1]
   12d0c:	mov	r1, #1
   12d10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12d14:	movw	r4, #33224	; 0x81c8
   12d18:	movt	r4, #3
   12d1c:	mov	r5, r0
   12d20:	ldr	r2, [r0]
   12d24:	strd	r6, [sp, #8]
   12d28:	ldr	r3, [r4, #160]	; 0xa0
   12d2c:	mov	r0, ip
   12d30:	str	r8, [sp, #16]
   12d34:	str	lr, [sp, #20]
   12d38:	bl	112ac <fwrite_unlocked@plt>
   12d3c:	ldr	r3, [r5]
   12d40:	cmp	r0, r3
   12d44:	bne	12d6c <__assert_fail@plt+0x1814>
   12d48:	ldrd	r2, [r4, #168]	; 0xa8
   12d4c:	ldr	r8, [sp, #16]
   12d50:	adds	r6, r2, r0
   12d54:	adc	r7, r3, r0, asr #31
   12d58:	strd	r6, [r4, #168]	; 0xa8
   12d5c:	ldrd	r4, [sp]
   12d60:	ldrd	r6, [sp, #8]
   12d64:	add	sp, sp, #20
   12d68:	pop	{pc}		; (ldr pc, [sp], #4)
   12d6c:	bl	1142c <__errno_location@plt>
   12d70:	ldr	r5, [r0]
   12d74:	mov	r2, #5
   12d78:	movw	r1, #27496	; 0x6b68
   12d7c:	movt	r1, #2
   12d80:	mov	r0, #0
   12d84:	bl	112d0 <dcgettext@plt>
   12d88:	mov	r6, r0
   12d8c:	mov	r0, #4
   12d90:	ldr	r1, [r4, #164]	; 0xa4
   12d94:	bl	15de8 <__assert_fail@plt+0x4890>
   12d98:	mov	r3, r0
   12d9c:	mov	r2, r6
   12da0:	mov	r1, r5
   12da4:	mov	r0, #0
   12da8:	bl	11384 <error@plt>
   12dac:	mov	r3, #0
   12db0:	str	r3, [r4, #160]	; 0xa0
   12db4:	bl	12854 <__assert_fail@plt+0x12fc>
   12db8:	mov	r2, #5
   12dbc:	movw	r1, #27576	; 0x6bb8
   12dc0:	movt	r1, #2
   12dc4:	mov	r0, #0
   12dc8:	str	r4, [sp, #-8]!
   12dcc:	str	lr, [sp, #4]
   12dd0:	bl	112d0 <dcgettext@plt>
   12dd4:	mov	r1, #0
   12dd8:	mov	r3, r0
   12ddc:	movw	r2, #29752	; 0x7438
   12de0:	movt	r2, #2
   12de4:	mov	r0, r1
   12de8:	bl	11384 <error@plt>
   12dec:	bl	12854 <__assert_fail@plt+0x12fc>
   12df0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12df4:	movw	r5, #33224	; 0x81c8
   12df8:	movt	r5, #3
   12dfc:	strd	r6, [sp, #8]
   12e00:	movw	r3, #8190	; 0x1ffe
   12e04:	mov	r6, #0
   12e08:	ldr	r7, [r5, #180]	; 0xb4
   12e0c:	strd	r8, [sp, #16]
   12e10:	strd	sl, [sp, #24]
   12e14:	str	lr, [sp, #32]
   12e18:	sub	sp, sp, #20
   12e1c:	cmp	r7, r3
   12e20:	addgt	r7, r7, #1
   12e24:	movwle	r7, #8191	; 0x1fff
   12e28:	mov	r0, #48	; 0x30
   12e2c:	bl	24450 <__assert_fail@plt+0x12ef8>
   12e30:	mov	r4, r0
   12e34:	mov	r3, #1
   12e38:	mov	r2, r7
   12e3c:	mov	r1, r0
   12e40:	mov	r0, #0
   12e44:	str	r3, [sp]
   12e48:	mvn	r3, #0
   12e4c:	str	r6, [r4]
   12e50:	bl	24648 <__assert_fail@plt+0x130f0>
   12e54:	ldr	r7, [r5, #180]	; 0xb4
   12e58:	mov	r8, r0
   12e5c:	str	r6, [r4, #4]
   12e60:	ldr	r3, [r5, #184]	; 0xb8
   12e64:	str	r6, [r4, #24]
   12e68:	ldr	r2, [r5, #188]	; 0xbc
   12e6c:	str	r0, [r4, #28]
   12e70:	str	r6, [r4, #32]
   12e74:	adds	r3, r3, #1
   12e78:	ldr	r9, [r4]
   12e7c:	adc	r2, r2, #0
   12e80:	cmp	r7, #0
   12e84:	str	r3, [r4, #8]
   12e88:	str	r6, [r4, #36]	; 0x24
   12e8c:	strd	r2, [r4, #12]
   12e90:	str	r2, [r4, #20]
   12e94:	str	r6, [r4, #40]	; 0x28
   12e98:	bne	13054 <__assert_fail@plt+0x1afc>
   12e9c:	subs	r2, r9, #1
   12ea0:	beq	13024 <__assert_fail@plt+0x1acc>
   12ea4:	mov	r1, r8
   12ea8:	mov	r0, #0
   12eac:	bl	23e2c <__assert_fail@plt+0x128d4>
   12eb0:	cmp	r0, #0
   12eb4:	bne	13084 <__assert_fail@plt+0x1b2c>
   12eb8:	ldr	r0, [r4, #4]
   12ebc:	mov	r3, #1
   12ec0:	strb	r3, [r5, #196]	; 0xc4
   12ec4:	cmp	r0, #0
   12ec8:	str	r0, [r4, #4]
   12ecc:	beq	13024 <__assert_fail@plt+0x1acc>
   12ed0:	ldr	r7, [r4, #28]
   12ed4:	mov	r3, #10
   12ed8:	mov	r8, #0
   12edc:	add	fp, r4, #36	; 0x24
   12ee0:	add	sl, r4, #32
   12ee4:	add	r9, r7, r0
   12ee8:	strb	r3, [r7, r0]
   12eec:	b	12f0c <__assert_fail@plt+0x19b4>
   12ef0:	mov	r2, r7
   12ef4:	add	r3, r3, #1
   12ef8:	mov	r1, fp
   12efc:	mov	r0, sl
   12f00:	add	r7, ip, #1
   12f04:	add	r8, r8, #1
   12f08:	bl	12c44 <__assert_fail@plt+0x16ec>
   12f0c:	mov	r1, #10
   12f10:	mov	r0, r7
   12f14:	bl	11318 <rawmemchr@plt>
   12f18:	cmp	r9, r0
   12f1c:	mov	ip, r0
   12f20:	sub	r3, r0, r7
   12f24:	bne	12ef0 <__assert_fail@plt+0x1998>
   12f28:	cmp	r3, #0
   12f2c:	beq	12ff8 <__assert_fail@plt+0x1aa0>
   12f30:	ldrb	r2, [r5, #196]	; 0xc4
   12f34:	cmp	r2, #0
   12f38:	beq	12fd0 <__assert_fail@plt+0x1a78>
   12f3c:	mov	r2, r7
   12f40:	add	r1, r4, #36	; 0x24
   12f44:	add	r0, r4, #32
   12f48:	add	r8, r8, #1
   12f4c:	bl	12c44 <__assert_fail@plt+0x16ec>
   12f50:	ldrd	r6, [r5, #184]	; 0xb8
   12f54:	str	r8, [r4, #24]
   12f58:	adds	r0, r6, #1
   12f5c:	adc	r1, r7, #0
   12f60:	adds	r2, r6, r8
   12f64:	adc	r3, r7, r8, asr #31
   12f68:	strd	r0, [r4, #8]
   12f6c:	strd	r0, [r4, #16]
   12f70:	strd	r2, [r5, #184]	; 0xb8
   12f74:	ldr	r2, [r5, #200]	; 0xc8
   12f78:	mov	r1, #0
   12f7c:	ldr	r3, [r4, #32]
   12f80:	cmp	r2, r1
   12f84:	moveq	r0, #1
   12f88:	streq	r4, [r5, #200]	; 0xc8
   12f8c:	str	r3, [r4, #36]	; 0x24
   12f90:	str	r1, [r4, #40]	; 0x28
   12f94:	bne	12fb8 <__assert_fail@plt+0x1a60>
   12f98:	add	sp, sp, #20
   12f9c:	ldrd	r4, [sp]
   12fa0:	ldrd	r6, [sp, #8]
   12fa4:	ldrd	r8, [sp, #16]
   12fa8:	ldrd	sl, [sp, #24]
   12fac:	add	sp, sp, #32
   12fb0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fb4:	mov	r2, r3
   12fb8:	ldr	r3, [r2, #40]	; 0x28
   12fbc:	cmp	r3, #0
   12fc0:	bne	12fb4 <__assert_fail@plt+0x1a5c>
   12fc4:	mov	r0, #1
   12fc8:	str	r4, [r2, #40]	; 0x28
   12fcc:	b	12f98 <__assert_fail@plt+0x1a40>
   12fd0:	mov	r1, r3
   12fd4:	mov	r0, r7
   12fd8:	str	r3, [sp, #12]
   12fdc:	bl	24808 <__assert_fail@plt+0x132b0>
   12fe0:	mov	r7, r0
   12fe4:	ldr	r0, [r5, #192]	; 0xc0
   12fe8:	bl	13b9c <__assert_fail@plt+0x2644>
   12fec:	ldr	r3, [sp, #12]
   12ff0:	str	r3, [r5, #180]	; 0xb4
   12ff4:	str	r7, [r5, #192]	; 0xc0
   12ff8:	ldrd	sl, [r5, #184]	; 0xb8
   12ffc:	str	r8, [r4, #24]
   13000:	adds	r0, sl, #1
   13004:	adc	r1, fp, #0
   13008:	adds	r2, sl, r8
   1300c:	adc	r3, fp, r8, asr #31
   13010:	cmp	r8, #0
   13014:	strd	r0, [r4, #8]
   13018:	strd	r0, [r4, #16]
   1301c:	strd	r2, [r5, #184]	; 0xb8
   13020:	bne	12f74 <__assert_fail@plt+0x1a1c>
   13024:	ldrb	r3, [r5, #196]	; 0xc4
   13028:	cmp	r3, #0
   1302c:	bne	13098 <__assert_fail@plt+0x1b40>
   13030:	ldr	r0, [r4]
   13034:	asr	r1, r0, #31
   13038:	adds	r7, r0, r0
   1303c:	adc	r3, r1, r1
   13040:	cmp	r3, r7, asr #31
   13044:	bne	130a8 <__assert_fail@plt+0x1b50>
   13048:	mov	r0, r4
   1304c:	bl	12750 <__assert_fail@plt+0x11f8>
   13050:	b	12e28 <__assert_fail@plt+0x18d0>
   13054:	mov	r2, r7
   13058:	ldr	r1, [r5, #192]	; 0xc0
   1305c:	sub	r9, r9, r7
   13060:	bl	11264 <memcpy@plt>
   13064:	ldr	r0, [r4, #4]
   13068:	subs	r2, r9, #1
   1306c:	str	r6, [r5, #180]	; 0xb4
   13070:	add	r0, r7, r0
   13074:	str	r0, [r4, #4]
   13078:	beq	12ec4 <__assert_fail@plt+0x196c>
   1307c:	add	r8, r8, r7
   13080:	b	12ea4 <__assert_fail@plt+0x194c>
   13084:	cmn	r0, #1
   13088:	beq	130ac <__assert_fail@plt+0x1b54>
   1308c:	ldr	r3, [r4, #4]
   13090:	add	r0, r0, r3
   13094:	b	12ec4 <__assert_fail@plt+0x196c>
   13098:	mov	r0, r4
   1309c:	bl	12750 <__assert_fail@plt+0x11f8>
   130a0:	mov	r0, #0
   130a4:	b	12f98 <__assert_fail@plt+0x1a40>
   130a8:	bl	12db8 <__assert_fail@plt+0x1860>
   130ac:	bl	1142c <__errno_location@plt>
   130b0:	ldr	r4, [r0]
   130b4:	mov	r2, #5
   130b8:	movw	r1, #27596	; 0x6bcc
   130bc:	movt	r1, #2
   130c0:	mov	r0, #0
   130c4:	bl	112d0 <dcgettext@plt>
   130c8:	mov	r2, r0
   130cc:	mov	r0, #0
   130d0:	mov	r1, r4
   130d4:	bl	11384 <error@plt>
   130d8:	bl	12854 <__assert_fail@plt+0x12fc>
   130dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   130e0:	movw	r5, #33224	; 0x81c8
   130e4:	movt	r5, #3
   130e8:	ldr	r4, [r5, #200]	; 0xc8
   130ec:	strd	r6, [sp, #8]
   130f0:	mov	r6, r0
   130f4:	mov	r7, r1
   130f8:	str	r8, [sp, #16]
   130fc:	str	lr, [sp, #20]
   13100:	cmp	r4, #0
   13104:	beq	1318c <__assert_fail@plt+0x1c34>
   13108:	ldrd	r2, [r4, #8]
   1310c:	cmp	r6, r2
   13110:	sbcs	r1, r7, r3
   13114:	bge	13124 <__assert_fail@plt+0x1bcc>
   13118:	b	13198 <__assert_fail@plt+0x1c40>
   1311c:	mov	r4, r3
   13120:	ldrd	r2, [r3, #8]
   13124:	ldr	ip, [r4, #24]
   13128:	adds	r0, r2, ip
   1312c:	adc	r1, r3, ip, asr #31
   13130:	cmp	r6, r0
   13134:	sbcs	r1, r7, r1
   13138:	blt	131c4 <__assert_fail@plt+0x1c6c>
   1313c:	ldr	r3, [r4, #40]	; 0x28
   13140:	cmp	r3, #0
   13144:	bne	1311c <__assert_fail@plt+0x1bc4>
   13148:	ldrb	r3, [r5, #196]	; 0xc4
   1314c:	cmp	r3, #0
   13150:	bne	13198 <__assert_fail@plt+0x1c40>
   13154:	bl	12df0 <__assert_fail@plt+0x1898>
   13158:	cmp	r0, #0
   1315c:	beq	13198 <__assert_fail@plt+0x1c40>
   13160:	ldr	r3, [r4, #40]	; 0x28
   13164:	cmp	r3, #0
   13168:	bne	1311c <__assert_fail@plt+0x1bc4>
   1316c:	movw	r3, #27200	; 0x6a40
   13170:	movt	r3, #2
   13174:	movw	r1, #27608	; 0x6bd8
   13178:	movt	r1, #2
   1317c:	movw	r0, #27624	; 0x6be8
   13180:	movt	r0, #2
   13184:	movw	r2, #583	; 0x247
   13188:	bl	11558 <__assert_fail@plt>
   1318c:	ldrb	r3, [r5, #196]	; 0xc4
   13190:	cmp	r3, #0
   13194:	beq	131b0 <__assert_fail@plt+0x1c58>
   13198:	mov	r0, #0
   1319c:	ldrd	r4, [sp]
   131a0:	ldrd	r6, [sp, #8]
   131a4:	ldr	r8, [sp, #16]
   131a8:	add	sp, sp, #20
   131ac:	pop	{pc}		; (ldr pc, [sp], #4)
   131b0:	bl	12df0 <__assert_fail@plt+0x1898>
   131b4:	cmp	r0, #0
   131b8:	beq	13198 <__assert_fail@plt+0x1c40>
   131bc:	ldr	r4, [r5, #200]	; 0xc8
   131c0:	b	13108 <__assert_fail@plt+0x1bb0>
   131c4:	sub	r2, r6, r2
   131c8:	ldr	r6, [r4, #32]
   131cc:	cmp	r2, #79	; 0x4f
   131d0:	mov	r3, r2
   131d4:	ble	131ec <__assert_fail@plt+0x1c94>
   131d8:	sub	r3, r3, #80	; 0x50
   131dc:	ldr	r6, [r6, #652]	; 0x28c
   131e0:	cmp	r3, #79	; 0x4f
   131e4:	bgt	131d8 <__assert_fail@plt+0x1c80>
   131e8:	mov	r2, r3
   131ec:	add	r2, r6, r2, lsl #3
   131f0:	add	r0, r2, #12
   131f4:	b	1319c <__assert_fail@plt+0x1c44>
   131f8:	str	r4, [sp, #-8]!
   131fc:	movw	r4, #33224	; 0x81c8
   13200:	movt	r4, #3
   13204:	ldr	r3, [r4, #200]	; 0xc8
   13208:	str	lr, [sp, #4]
   1320c:	cmp	r3, #0
   13210:	beq	13224 <__assert_fail@plt+0x1ccc>
   13214:	ldr	r4, [sp]
   13218:	add	sp, sp, #4
   1321c:	ldrd	r0, [r3, #16]
   13220:	pop	{pc}		; (ldr pc, [sp], #4)
   13224:	ldrb	r3, [r4, #196]	; 0xc4
   13228:	cmp	r3, #0
   1322c:	bne	13250 <__assert_fail@plt+0x1cf8>
   13230:	bl	12df0 <__assert_fail@plt+0x1898>
   13234:	cmp	r0, #0
   13238:	beq	13250 <__assert_fail@plt+0x1cf8>
   1323c:	ldr	r3, [r4, #200]	; 0xc8
   13240:	ldr	r4, [sp]
   13244:	add	sp, sp, #4
   13248:	ldrd	r0, [r3, #16]
   1324c:	pop	{pc}		; (ldr pc, [sp], #4)
   13250:	bl	1142c <__errno_location@plt>
   13254:	ldr	r4, [r0]
   13258:	mov	r2, #5
   1325c:	movw	r1, #27628	; 0x6bec
   13260:	movt	r1, #2
   13264:	mov	r0, #0
   13268:	bl	112d0 <dcgettext@plt>
   1326c:	mov	r2, r0
   13270:	mov	r0, #1
   13274:	mov	r1, r4
   13278:	bl	11384 <error@plt>
   1327c:	str	r4, [sp, #-16]!
   13280:	movw	r4, #33224	; 0x81c8
   13284:	movt	r4, #3
   13288:	ldr	r0, [r4, #204]	; 0xcc
   1328c:	strd	r6, [sp, #4]
   13290:	str	lr, [sp, #12]
   13294:	cmp	r0, #0
   13298:	beq	132a8 <__assert_fail@plt+0x1d50>
   1329c:	bl	12750 <__assert_fail@plt+0x11f8>
   132a0:	mov	r3, #0
   132a4:	str	r3, [r4, #204]	; 0xcc
   132a8:	ldr	r3, [r4, #200]	; 0xc8
   132ac:	cmp	r3, #0
   132b0:	beq	1330c <__assert_fail@plt+0x1db4>
   132b4:	ldrd	r6, [r3, #16]
   132b8:	ldrd	r0, [r4, #208]	; 0xd0
   132bc:	cmp	r0, r6
   132c0:	sbcs	r2, r1, r7
   132c4:	ldr	r1, [r3, #36]	; 0x24
   132c8:	strdlt	r6, [r4, #208]	; 0xd0
   132cc:	adds	r0, r6, #1
   132d0:	adc	r2, r7, #0
   132d4:	ldr	ip, [r1]
   132d8:	str	r0, [r3, #16]
   132dc:	str	r2, [r3, #20]
   132e0:	ldr	r2, [r1, #8]
   132e4:	add	r2, r2, #1
   132e8:	add	r0, r1, r2, lsl #3
   132ec:	cmp	r2, ip
   132f0:	str	r2, [r1, #8]
   132f4:	add	r0, r0, #4
   132f8:	beq	1332c <__assert_fail@plt+0x1dd4>
   132fc:	ldr	r4, [sp]
   13300:	ldrd	r6, [sp, #4]
   13304:	add	sp, sp, #12
   13308:	pop	{pc}		; (ldr pc, [sp], #4)
   1330c:	ldrb	r3, [r4, #196]	; 0xc4
   13310:	cmp	r3, #0
   13314:	bne	13360 <__assert_fail@plt+0x1e08>
   13318:	bl	12df0 <__assert_fail@plt+0x1898>
   1331c:	cmp	r0, #0
   13320:	beq	13360 <__assert_fail@plt+0x1e08>
   13324:	ldr	r3, [r4, #200]	; 0xc8
   13328:	b	132b4 <__assert_fail@plt+0x1d5c>
   1332c:	ldr	r2, [r1, #652]	; 0x28c
   13330:	cmp	r2, #0
   13334:	str	r2, [r3, #36]	; 0x24
   13338:	beq	13348 <__assert_fail@plt+0x1df0>
   1333c:	ldr	r2, [r2]
   13340:	cmp	r2, #0
   13344:	bne	132fc <__assert_fail@plt+0x1da4>
   13348:	ldr	r2, [r3, #40]	; 0x28
   1334c:	ldrd	r6, [sp, #4]
   13350:	strd	r2, [r4, #200]	; 0xc8
   13354:	ldr	r4, [sp]
   13358:	add	sp, sp, #12
   1335c:	pop	{pc}		; (ldr pc, [sp], #4)
   13360:	ldr	r4, [sp]
   13364:	mov	r0, #0
   13368:	ldrd	r6, [sp, #4]
   1336c:	add	sp, sp, #12
   13370:	pop	{pc}		; (ldr pc, [sp], #4)
   13374:	str	r4, [sp, #-8]!
   13378:	str	lr, [sp, #4]
   1337c:	b	13384 <__assert_fail@plt+0x1e2c>
   13380:	bl	12d08 <__assert_fail@plt+0x17b0>
   13384:	bl	1327c <__assert_fail@plt+0x1d24>
   13388:	subs	r1, r0, #0
   1338c:	add	r1, r1, #4
   13390:	bne	13380 <__assert_fail@plt+0x1e28>
   13394:	ldr	r4, [sp]
   13398:	add	sp, sp, #4
   1339c:	pop	{pc}		; (ldr pc, [sp], #4)
   133a0:	movw	r4, #33208	; 0x81b8
   133a4:	movt	r4, #3
   133a8:	str	r7, [sp, #-8]!
   133ac:	mov	sl, r0
   133b0:	mov	r6, r2
   133b4:	ldr	r8, [r4]
   133b8:	mov	r2, #5
   133bc:	movw	r1, #27648	; 0x6c00
   133c0:	movt	r1, #2
   133c4:	mov	r0, #0
   133c8:	str	lr, [sp, #4]
   133cc:	sub	sp, sp, #32
   133d0:	mov	r7, r3
   133d4:	ldrb	r5, [sp, #40]	; 0x28
   133d8:	bl	112d0 <dcgettext@plt>
   133dc:	movw	r1, #33224	; 0x81c8
   133e0:	movt	r1, #3
   133e4:	mov	r9, r0
   133e8:	ldr	r0, [sl]
   133ec:	movw	r3, #33464	; 0x82b8
   133f0:	movt	r3, #3
   133f4:	ldr	r2, [r1, #216]	; 0xd8
   133f8:	ldr	sl, [r3]
   133fc:	ldr	r0, [r2, r0, lsl #2]
   13400:	bl	1609c <__assert_fail@plt+0x4b44>
   13404:	mov	r3, sl
   13408:	mov	r2, r9
   1340c:	str	r0, [sp]
   13410:	mov	r1, #1
   13414:	mov	r0, r8
   13418:	bl	1148c <__fprintf_chk@plt>
   1341c:	orrs	r3, r6, r7
   13420:	beq	13470 <__assert_fail@plt+0x1f18>
   13424:	ldr	r4, [r4]
   13428:	mov	r2, #5
   1342c:	movw	r1, #27556	; 0x6ba4
   13430:	movt	r1, #2
   13434:	mov	r0, #0
   13438:	bl	112d0 <dcgettext@plt>
   1343c:	mov	r8, r0
   13440:	add	r2, sp, #8
   13444:	mov	r1, r7
   13448:	mov	r0, r6
   1344c:	bl	13ccc <__assert_fail@plt+0x2774>
   13450:	mov	r3, r0
   13454:	mov	r2, r8
   13458:	mov	r0, r4
   1345c:	mov	r1, #1
   13460:	bl	1148c <__fprintf_chk@plt>
   13464:	cmp	r5, #0
   13468:	beq	13480 <__assert_fail@plt+0x1f28>
   1346c:	bl	12854 <__assert_fail@plt+0x12fc>
   13470:	mov	r0, #10
   13474:	ldr	r1, [r4]
   13478:	bl	114ec <fputc@plt>
   1347c:	b	13464 <__assert_fail@plt+0x1f0c>
   13480:	bl	13374 <__assert_fail@plt+0x1e1c>
   13484:	bl	128a4 <__assert_fail@plt+0x134c>
   13488:	b	1346c <__assert_fail@plt+0x1f14>
   1348c:	subs	r4, r0, #0
   13490:	str	r7, [sp, #-8]!
   13494:	str	lr, [sp, #4]
   13498:	sub	sp, sp, #56	; 0x38
   1349c:	beq	134e4 <__assert_fail@plt+0x1f8c>
   134a0:	movw	r3, #33208	; 0x81b8
   134a4:	movt	r3, #3
   134a8:	ldr	r5, [r3]
   134ac:	mov	r2, #5
   134b0:	movw	r1, #27680	; 0x6c20
   134b4:	movt	r1, #2
   134b8:	mov	r0, #0
   134bc:	bl	112d0 <dcgettext@plt>
   134c0:	movw	r3, #33464	; 0x82b8
   134c4:	movt	r3, #3
   134c8:	mov	r2, r0
   134cc:	mov	r1, #1
   134d0:	ldr	r3, [r3]
   134d4:	mov	r0, r5
   134d8:	bl	1148c <__fprintf_chk@plt>
   134dc:	mov	r0, r4
   134e0:	bl	11408 <exit@plt>
   134e4:	mov	r2, #5
   134e8:	movw	r1, #27720	; 0x6c48
   134ec:	movt	r1, #2
   134f0:	movw	r5, #33212	; 0x81bc
   134f4:	movt	r5, #3
   134f8:	bl	112d0 <dcgettext@plt>
   134fc:	movw	r3, #33464	; 0x82b8
   13500:	movt	r3, #3
   13504:	mov	r1, r0
   13508:	mov	r0, #1
   1350c:	ldr	r2, [r3]
   13510:	bl	11474 <__printf_chk@plt>
   13514:	mov	r2, #5
   13518:	movw	r1, #27760	; 0x6c70
   1351c:	movt	r1, #2
   13520:	mov	r0, r4
   13524:	bl	112d0 <dcgettext@plt>
   13528:	ldr	r1, [r5]
   1352c:	bl	111bc <fputs_unlocked@plt>
   13530:	mov	r2, #5
   13534:	movw	r1, #27896	; 0x6cf8
   13538:	movt	r1, #2
   1353c:	mov	r0, r4
   13540:	bl	112d0 <dcgettext@plt>
   13544:	ldr	r1, [r5]
   13548:	bl	111bc <fputs_unlocked@plt>
   1354c:	mov	r2, #5
   13550:	movw	r1, #27932	; 0x6d1c
   13554:	movt	r1, #2
   13558:	mov	r0, r4
   1355c:	bl	112d0 <dcgettext@plt>
   13560:	ldr	r1, [r5]
   13564:	bl	111bc <fputs_unlocked@plt>
   13568:	mov	r2, #5
   1356c:	movw	r1, #28008	; 0x6d68
   13570:	movt	r1, #2
   13574:	mov	r0, r4
   13578:	bl	112d0 <dcgettext@plt>
   1357c:	ldr	r1, [r5]
   13580:	bl	111bc <fputs_unlocked@plt>
   13584:	mov	r2, #5
   13588:	movw	r1, #28196	; 0x6e24
   1358c:	movt	r1, #2
   13590:	mov	r0, r4
   13594:	bl	112d0 <dcgettext@plt>
   13598:	ldr	r1, [r5]
   1359c:	bl	111bc <fputs_unlocked@plt>
   135a0:	mov	r2, #5
   135a4:	movw	r1, #28264	; 0x6e68
   135a8:	movt	r1, #2
   135ac:	mov	r0, r4
   135b0:	bl	112d0 <dcgettext@plt>
   135b4:	ldr	r1, [r5]
   135b8:	bl	111bc <fputs_unlocked@plt>
   135bc:	mov	r2, #5
   135c0:	movw	r1, #28464	; 0x6f30
   135c4:	movt	r1, #2
   135c8:	mov	r0, r4
   135cc:	bl	112d0 <dcgettext@plt>
   135d0:	ldr	r1, [r5]
   135d4:	bl	111bc <fputs_unlocked@plt>
   135d8:	mov	r2, #5
   135dc:	movw	r1, #28512	; 0x6f60
   135e0:	movt	r1, #2
   135e4:	mov	r0, r4
   135e8:	bl	112d0 <dcgettext@plt>
   135ec:	ldr	r1, [r5]
   135f0:	bl	111bc <fputs_unlocked@plt>
   135f4:	mov	r2, #5
   135f8:	movw	r1, #28568	; 0x6f98
   135fc:	movt	r1, #2
   13600:	mov	r0, r4
   13604:	bl	112d0 <dcgettext@plt>
   13608:	ldr	r1, [r5]
   1360c:	bl	111bc <fputs_unlocked@plt>
   13610:	movw	r0, #27200	; 0x6a40
   13614:	movt	r0, #2
   13618:	ldr	ip, [r0, #12]
   1361c:	ldrd	r2, [r0, #20]
   13620:	ldr	r6, [r0, #16]
   13624:	subs	r1, ip, #0
   13628:	str	ip, [sp]
   1362c:	ldrd	r8, [r0, #28]
   13630:	strd	r2, [sp, #8]
   13634:	ldrd	r2, [r0, #36]	; 0x24
   13638:	str	r6, [sp, #4]
   1363c:	ldrd	r6, [r0, #44]	; 0x2c
   13640:	strd	r8, [sp, #16]
   13644:	ldrd	r8, [r0, #52]	; 0x34
   13648:	strd	r2, [sp, #24]
   1364c:	ldrd	r2, [r0, #60]	; 0x3c
   13650:	strd	r6, [sp, #32]
   13654:	movwne	r7, #27672	; 0x6c18
   13658:	mov	r6, sp
   1365c:	movtne	r7, #2
   13660:	strd	r8, [sp, #40]	; 0x28
   13664:	strd	r2, [sp, #48]	; 0x30
   13668:	bne	13760 <__assert_fail@plt+0x2208>
   1366c:	ldr	r6, [r6, #4]
   13670:	movw	r1, #29008	; 0x7150
   13674:	movt	r1, #2
   13678:	mov	r2, #5
   1367c:	cmp	r6, #0
   13680:	beq	13774 <__assert_fail@plt+0x221c>
   13684:	mov	r0, #0
   13688:	bl	112d0 <dcgettext@plt>
   1368c:	mov	r1, r0
   13690:	movw	r3, #29032	; 0x7168
   13694:	movt	r3, #2
   13698:	movw	r2, #29072	; 0x7190
   1369c:	movt	r2, #2
   136a0:	mov	r0, #1
   136a4:	bl	11474 <__printf_chk@plt>
   136a8:	mov	r1, #0
   136ac:	mov	r0, #5
   136b0:	bl	114bc <setlocale@plt>
   136b4:	cmp	r0, #0
   136b8:	movweq	r7, #27672	; 0x6c18
   136bc:	movteq	r7, #2
   136c0:	beq	136e4 <__assert_fail@plt+0x218c>
   136c4:	movw	r1, #29088	; 0x71a0
   136c8:	movt	r1, #2
   136cc:	mov	r2, #3
   136d0:	movw	r7, #27672	; 0x6c18
   136d4:	movt	r7, #2
   136d8:	bl	11528 <strncmp@plt>
   136dc:	cmp	r0, #0
   136e0:	bne	1382c <__assert_fail@plt+0x22d4>
   136e4:	mov	r2, #5
   136e8:	movw	r1, #29164	; 0x71ec
   136ec:	movt	r1, #2
   136f0:	mov	r0, #0
   136f4:	bl	112d0 <dcgettext@plt>
   136f8:	mov	r1, r0
   136fc:	movw	r3, #27672	; 0x6c18
   13700:	movt	r3, #2
   13704:	movw	r2, #29032	; 0x7168
   13708:	movt	r2, #2
   1370c:	mov	r0, #1
   13710:	bl	11474 <__printf_chk@plt>
   13714:	mov	r2, #5
   13718:	movw	r1, #29192	; 0x7208
   1371c:	movt	r1, #2
   13720:	mov	r0, #0
   13724:	bl	112d0 <dcgettext@plt>
   13728:	movw	r2, #30108	; 0x759c
   1372c:	movt	r2, #2
   13730:	cmp	r6, r7
   13734:	movw	r3, #28508	; 0x6f5c
   13738:	movt	r3, #2
   1373c:	mov	r1, r0
   13740:	moveq	r3, r2
   13744:	mov	r2, r6
   13748:	mov	r0, #1
   1374c:	bl	11474 <__printf_chk@plt>
   13750:	b	134dc <__assert_fail@plt+0x1f84>
   13754:	ldr	r1, [r6, #8]!
   13758:	cmp	r1, #0
   1375c:	beq	1366c <__assert_fail@plt+0x2114>
   13760:	mov	r0, r7
   13764:	bl	111f8 <strcmp@plt>
   13768:	cmp	r0, #0
   1376c:	bne	13754 <__assert_fail@plt+0x21fc>
   13770:	b	1366c <__assert_fail@plt+0x2114>
   13774:	mov	r0, r6
   13778:	bl	112d0 <dcgettext@plt>
   1377c:	mov	r1, r0
   13780:	movw	r3, #29032	; 0x7168
   13784:	movt	r3, #2
   13788:	movw	r2, #29072	; 0x7190
   1378c:	movt	r2, #2
   13790:	mov	r0, #1
   13794:	bl	11474 <__printf_chk@plt>
   13798:	mov	r1, r6
   1379c:	mov	r0, #5
   137a0:	bl	114bc <setlocale@plt>
   137a4:	cmp	r0, #0
   137a8:	beq	137c4 <__assert_fail@plt+0x226c>
   137ac:	movw	r1, #29088	; 0x71a0
   137b0:	movt	r1, #2
   137b4:	mov	r2, #3
   137b8:	bl	11528 <strncmp@plt>
   137bc:	cmp	r0, #0
   137c0:	bne	13820 <__assert_fail@plt+0x22c8>
   137c4:	mov	r2, #5
   137c8:	movw	r1, #29164	; 0x71ec
   137cc:	movt	r1, #2
   137d0:	mov	r0, #0
   137d4:	bl	112d0 <dcgettext@plt>
   137d8:	mov	r1, r0
   137dc:	movw	r3, #27672	; 0x6c18
   137e0:	movt	r3, #2
   137e4:	movw	r2, #29032	; 0x7168
   137e8:	movt	r2, #2
   137ec:	mov	r0, #1
   137f0:	bl	11474 <__printf_chk@plt>
   137f4:	movw	r1, #29192	; 0x7208
   137f8:	movt	r1, #2
   137fc:	mov	r2, #5
   13800:	mov	r0, #0
   13804:	bl	112d0 <dcgettext@plt>
   13808:	movw	r6, #27672	; 0x6c18
   1380c:	movt	r6, #2
   13810:	movw	r3, #30108	; 0x759c
   13814:	movt	r3, #2
   13818:	mov	r1, r0
   1381c:	b	13744 <__assert_fail@plt+0x21ec>
   13820:	movw	r7, #27672	; 0x6c18
   13824:	movt	r7, #2
   13828:	mov	r6, r7
   1382c:	mov	r2, #5
   13830:	movw	r1, #29092	; 0x71a4
   13834:	movt	r1, #2
   13838:	mov	r0, #0
   1383c:	bl	112d0 <dcgettext@plt>
   13840:	ldr	r1, [r5]
   13844:	bl	111bc <fputs_unlocked@plt>
   13848:	b	136e4 <__assert_fail@plt+0x218c>
   1384c:	movw	r3, #33456	; 0x82b0
   13850:	movt	r3, #3
   13854:	str	r0, [r3]
   13858:	bx	lr
   1385c:	movw	r3, #33456	; 0x82b0
   13860:	movt	r3, #3
   13864:	strb	r0, [r3, #4]
   13868:	bx	lr
   1386c:	movw	r3, #33212	; 0x81bc
   13870:	movt	r3, #3
   13874:	strd	r4, [sp, #-16]!
   13878:	ldr	r0, [r3]
   1387c:	str	r6, [sp, #8]
   13880:	str	lr, [sp, #12]
   13884:	sub	sp, sp, #8
   13888:	bl	26224 <__assert_fail@plt+0x14ccc>
   1388c:	cmp	r0, #0
   13890:	beq	138bc <__assert_fail@plt+0x2364>
   13894:	movw	r4, #33456	; 0x82b0
   13898:	movt	r4, #3
   1389c:	ldrb	r6, [r4, #4]
   138a0:	bl	1142c <__errno_location@plt>
   138a4:	mov	r5, r0
   138a8:	cmp	r6, #0
   138ac:	beq	138e8 <__assert_fail@plt+0x2390>
   138b0:	ldr	r3, [r0]
   138b4:	cmp	r3, #32
   138b8:	bne	138e8 <__assert_fail@plt+0x2390>
   138bc:	movw	r3, #33208	; 0x81b8
   138c0:	movt	r3, #3
   138c4:	ldr	r0, [r3]
   138c8:	bl	26224 <__assert_fail@plt+0x14ccc>
   138cc:	cmp	r0, #0
   138d0:	bne	13930 <__assert_fail@plt+0x23d8>
   138d4:	add	sp, sp, #8
   138d8:	ldrd	r4, [sp]
   138dc:	ldr	r6, [sp, #8]
   138e0:	add	sp, sp, #12
   138e4:	pop	{pc}		; (ldr pc, [sp], #4)
   138e8:	movw	r1, #30340	; 0x7684
   138ec:	movt	r1, #2
   138f0:	mov	r2, #5
   138f4:	mov	r0, #0
   138f8:	bl	112d0 <dcgettext@plt>
   138fc:	mov	r6, r0
   13900:	ldr	r0, [r4]
   13904:	cmp	r0, #0
   13908:	beq	13940 <__assert_fail@plt+0x23e8>
   1390c:	ldr	r4, [r5]
   13910:	bl	15eb0 <__assert_fail@plt+0x4958>
   13914:	mov	r3, r0
   13918:	movw	r2, #30352	; 0x7690
   1391c:	movt	r2, #2
   13920:	mov	r0, #0
   13924:	str	r6, [sp]
   13928:	mov	r1, r4
   1392c:	bl	11384 <error@plt>
   13930:	movw	r3, #33124	; 0x8164
   13934:	movt	r3, #3
   13938:	ldr	r0, [r3]
   1393c:	bl	11258 <_exit@plt>
   13940:	mov	r3, r6
   13944:	movw	r2, #29752	; 0x7438
   13948:	movt	r2, #2
   1394c:	ldr	r1, [r5]
   13950:	bl	11384 <error@plt>
   13954:	b	13930 <__assert_fail@plt+0x23d8>
   13958:	strd	r4, [sp, #-12]!
   1395c:	mov	r4, r0
   13960:	str	lr, [sp, #8]
   13964:	sub	sp, sp, #12
   13968:	bl	11480 <fileno@plt>
   1396c:	cmp	r0, #0
   13970:	mov	r0, r4
   13974:	blt	139f8 <__assert_fail@plt+0x24a0>
   13978:	bl	113c0 <__freading@plt>
   1397c:	cmp	r0, #0
   13980:	bne	139c4 <__assert_fail@plt+0x246c>
   13984:	mov	r0, r4
   13988:	bl	13a90 <__assert_fail@plt+0x2538>
   1398c:	cmp	r0, #0
   13990:	beq	139f4 <__assert_fail@plt+0x249c>
   13994:	bl	1142c <__errno_location@plt>
   13998:	mov	r5, r0
   1399c:	mov	r0, r4
   139a0:	ldr	r4, [r5]
   139a4:	bl	11498 <fclose@plt>
   139a8:	cmp	r4, #0
   139ac:	mvnne	r0, #0
   139b0:	strne	r4, [r5]
   139b4:	add	sp, sp, #12
   139b8:	ldrd	r4, [sp]
   139bc:	add	sp, sp, #8
   139c0:	pop	{pc}		; (ldr pc, [sp], #4)
   139c4:	mov	r0, r4
   139c8:	bl	11480 <fileno@plt>
   139cc:	mov	r1, #1
   139d0:	mov	r2, #0
   139d4:	mov	r3, #0
   139d8:	str	r1, [sp]
   139dc:	bl	11348 <lseek64@plt>
   139e0:	mvn	r3, #0
   139e4:	mvn	r2, #0
   139e8:	cmp	r1, r3
   139ec:	cmpeq	r0, r2
   139f0:	bne	13984 <__assert_fail@plt+0x242c>
   139f4:	mov	r0, r4
   139f8:	add	sp, sp, #12
   139fc:	ldrd	r4, [sp]
   13a00:	ldr	lr, [sp, #8]
   13a04:	add	sp, sp, #12
   13a08:	b	11498 <fclose@plt>
   13a0c:	mov	ip, r1
   13a10:	mov	r1, r2
   13a14:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13a18:	mov	r2, r3
   13a1c:	mov	r5, r0
   13a20:	strd	r6, [sp, #8]
   13a24:	mov	r0, ip
   13a28:	str	r8, [sp, #16]
   13a2c:	str	lr, [sp, #20]
   13a30:	bl	11390 <open64@plt>
   13a34:	sub	r3, r5, r0
   13a38:	mov	r4, r0
   13a3c:	clz	r3, r3
   13a40:	lsr	r3, r3, #5
   13a44:	orrs	r3, r3, r0, lsr #31
   13a48:	beq	13a64 <__assert_fail@plt+0x250c>
   13a4c:	mov	r0, r4
   13a50:	ldrd	r4, [sp]
   13a54:	ldrd	r6, [sp, #8]
   13a58:	ldr	r8, [sp, #16]
   13a5c:	add	sp, sp, #20
   13a60:	pop	{pc}		; (ldr pc, [sp], #4)
   13a64:	mov	r1, r5
   13a68:	bl	112e8 <dup2@plt>
   13a6c:	mov	r7, r0
   13a70:	bl	1142c <__errno_location@plt>
   13a74:	mov	r5, r0
   13a78:	mov	r0, r4
   13a7c:	ldr	r6, [r5]
   13a80:	mov	r4, r7
   13a84:	bl	11540 <close@plt>
   13a88:	str	r6, [r5]
   13a8c:	b	13a4c <__assert_fail@plt+0x24f4>
   13a90:	str	r4, [sp, #-8]!
   13a94:	subs	r4, r0, #0
   13a98:	str	lr, [sp, #4]
   13a9c:	sub	sp, sp, #8
   13aa0:	beq	13abc <__assert_fail@plt+0x2564>
   13aa4:	bl	113c0 <__freading@plt>
   13aa8:	cmp	r0, #0
   13aac:	beq	13abc <__assert_fail@plt+0x2564>
   13ab0:	ldr	r3, [r4]
   13ab4:	tst	r3, #256	; 0x100
   13ab8:	bne	13ad4 <__assert_fail@plt+0x257c>
   13abc:	mov	r0, r4
   13ac0:	add	sp, sp, #8
   13ac4:	ldr	r4, [sp]
   13ac8:	ldr	lr, [sp, #4]
   13acc:	add	sp, sp, #8
   13ad0:	b	1121c <fflush@plt>
   13ad4:	mov	r1, #1
   13ad8:	mov	r2, #0
   13adc:	mov	r3, #0
   13ae0:	mov	r0, r4
   13ae4:	str	r1, [sp]
   13ae8:	bl	13bfc <__assert_fail@plt+0x26a4>
   13aec:	b	13abc <__assert_fail@plt+0x2564>
   13af0:	strd	r4, [sp, #-16]!
   13af4:	mov	r5, r1
   13af8:	str	r6, [sp, #8]
   13afc:	str	lr, [sp, #12]
   13b00:	bl	11504 <fopen64@plt>
   13b04:	subs	r4, r0, #0
   13b08:	beq	13b18 <__assert_fail@plt+0x25c0>
   13b0c:	bl	11480 <fileno@plt>
   13b10:	cmp	r0, #2
   13b14:	bls	13b2c <__assert_fail@plt+0x25d4>
   13b18:	mov	r0, r4
   13b1c:	ldrd	r4, [sp]
   13b20:	ldr	r6, [sp, #8]
   13b24:	add	sp, sp, #12
   13b28:	pop	{pc}		; (ldr pc, [sp], #4)
   13b2c:	bl	23eb0 <__assert_fail@plt+0x12958>
   13b30:	subs	r6, r0, #0
   13b34:	blt	13b7c <__assert_fail@plt+0x2624>
   13b38:	mov	r0, r4
   13b3c:	bl	13958 <__assert_fail@plt+0x2400>
   13b40:	cmp	r0, #0
   13b44:	bne	13b5c <__assert_fail@plt+0x2604>
   13b48:	mov	r1, r5
   13b4c:	mov	r0, r6
   13b50:	bl	111a4 <fdopen@plt>
   13b54:	subs	r4, r0, #0
   13b58:	bne	13b18 <__assert_fail@plt+0x25c0>
   13b5c:	bl	1142c <__errno_location@plt>
   13b60:	mov	r5, r0
   13b64:	mov	r0, r6
   13b68:	ldr	r6, [r5]
   13b6c:	mov	r4, #0
   13b70:	bl	11540 <close@plt>
   13b74:	str	r6, [r5]
   13b78:	b	13b18 <__assert_fail@plt+0x25c0>
   13b7c:	bl	1142c <__errno_location@plt>
   13b80:	mov	r5, r0
   13b84:	mov	r0, r4
   13b88:	ldr	r6, [r5]
   13b8c:	mov	r4, #0
   13b90:	bl	13958 <__assert_fail@plt+0x2400>
   13b94:	str	r6, [r5]
   13b98:	b	13b18 <__assert_fail@plt+0x25c0>
   13b9c:	strd	r4, [sp, #-12]!
   13ba0:	mov	r5, r0
   13ba4:	str	lr, [sp, #8]
   13ba8:	sub	sp, sp, #12
   13bac:	bl	1142c <__errno_location@plt>
   13bb0:	mov	r4, r0
   13bb4:	mov	r2, #0
   13bb8:	ldr	r3, [r4]
   13bbc:	mov	r0, r5
   13bc0:	str	r2, [r4]
   13bc4:	str	r3, [sp]
   13bc8:	str	r3, [sp, #4]
   13bcc:	bl	11240 <free@plt>
   13bd0:	ldr	r3, [r4]
   13bd4:	add	r2, sp, #8
   13bd8:	clz	r3, r3
   13bdc:	lsr	r3, r3, #5
   13be0:	add	r3, r2, r3, lsl #2
   13be4:	ldr	r3, [r3, #-8]
   13be8:	str	r3, [r4]
   13bec:	add	sp, sp, #12
   13bf0:	ldrd	r4, [sp]
   13bf4:	add	sp, sp, #8
   13bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   13bfc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13c00:	mov	r4, r0
   13c04:	ldr	ip, [r0, #4]
   13c08:	strd	r6, [sp, #8]
   13c0c:	str	lr, [sp, #20]
   13c10:	ldr	lr, [r0, #8]
   13c14:	str	r8, [sp, #16]
   13c18:	sub	sp, sp, #8
   13c1c:	ldr	r5, [sp, #32]
   13c20:	cmp	lr, ip
   13c24:	beq	13c4c <__assert_fail@plt+0x26f4>
   13c28:	mov	r0, r4
   13c2c:	str	r5, [sp, #32]
   13c30:	add	sp, sp, #8
   13c34:	ldrd	r4, [sp]
   13c38:	ldrd	r6, [sp, #8]
   13c3c:	ldr	r8, [sp, #16]
   13c40:	ldr	lr, [sp, #20]
   13c44:	add	sp, sp, #24
   13c48:	b	114a4 <fseeko64@plt>
   13c4c:	ldr	ip, [r0, #16]
   13c50:	ldr	lr, [r0, #20]
   13c54:	cmp	lr, ip
   13c58:	bne	13c28 <__assert_fail@plt+0x26d0>
   13c5c:	ldr	r8, [r0, #36]	; 0x24
   13c60:	cmp	r8, #0
   13c64:	bne	13c28 <__assert_fail@plt+0x26d0>
   13c68:	mov	r6, r2
   13c6c:	mov	r7, r3
   13c70:	bl	11480 <fileno@plt>
   13c74:	mov	r2, r6
   13c78:	mov	r3, r7
   13c7c:	str	r5, [sp]
   13c80:	bl	11348 <lseek64@plt>
   13c84:	mvn	r3, #0
   13c88:	mvn	r2, #0
   13c8c:	cmp	r1, r3
   13c90:	cmpeq	r0, r2
   13c94:	beq	13cc4 <__assert_fail@plt+0x276c>
   13c98:	ldr	r3, [r4]
   13c9c:	strd	r0, [r4, #80]	; 0x50
   13ca0:	bic	r3, r3, #16
   13ca4:	str	r3, [r4]
   13ca8:	mov	r0, r8
   13cac:	add	sp, sp, #8
   13cb0:	ldrd	r4, [sp]
   13cb4:	ldrd	r6, [sp, #8]
   13cb8:	ldr	r8, [sp, #16]
   13cbc:	add	sp, sp, #20
   13cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   13cc4:	mvn	r8, #0
   13cc8:	b	13ca8 <__assert_fail@plt+0x2750>
   13ccc:	mov	r3, #0
   13cd0:	cmp	r0, #0
   13cd4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13cd8:	mov	r5, r1
   13cdc:	sbcs	r1, r1, #0
   13ce0:	strd	r6, [sp, #8]
   13ce4:	mov	r4, r0
   13ce8:	add	r6, r2, #20
   13cec:	str	r8, [sp, #16]
   13cf0:	str	lr, [sp, #20]
   13cf4:	strb	r3, [r2, #20]
   13cf8:	blt	13d58 <__assert_fail@plt+0x2800>
   13cfc:	mov	r0, r4
   13d00:	mov	r1, r5
   13d04:	mov	r2, #10
   13d08:	mov	r3, #0
   13d0c:	bl	26770 <__assert_fail@plt+0x15218>
   13d10:	add	ip, r2, #48	; 0x30
   13d14:	mov	r0, r4
   13d18:	mov	r1, r5
   13d1c:	mov	r3, #0
   13d20:	mov	r2, #10
   13d24:	strb	ip, [r6, #-1]!
   13d28:	bl	26770 <__assert_fail@plt+0x15218>
   13d2c:	mov	r4, r0
   13d30:	mov	r5, r1
   13d34:	orrs	r3, r4, r5
   13d38:	bne	13cfc <__assert_fail@plt+0x27a4>
   13d3c:	mov	r0, r6
   13d40:	ldrd	r4, [sp]
   13d44:	ldrd	r6, [sp, #8]
   13d48:	ldr	r8, [sp, #16]
   13d4c:	add	sp, sp, #20
   13d50:	pop	{pc}		; (ldr pc, [sp], #4)
   13d54:	mov	r6, r7
   13d58:	mov	r0, r4
   13d5c:	mov	r1, r5
   13d60:	mov	r2, #10
   13d64:	mov	r3, #0
   13d68:	bl	26770 <__assert_fail@plt+0x15218>
   13d6c:	rsb	ip, r2, #48	; 0x30
   13d70:	mov	r0, r4
   13d74:	mov	r1, r5
   13d78:	mov	r3, #0
   13d7c:	mov	r2, #10
   13d80:	strb	ip, [r6, #-1]
   13d84:	sub	r7, r6, #1
   13d88:	bl	26770 <__assert_fail@plt+0x15218>
   13d8c:	mov	r4, r0
   13d90:	mov	r5, r1
   13d94:	orrs	r3, r4, r5
   13d98:	bne	13d54 <__assert_fail@plt+0x27fc>
   13d9c:	mov	r3, #45	; 0x2d
   13da0:	sub	r6, r6, #2
   13da4:	strb	r3, [r7, #-1]
   13da8:	b	13d3c <__assert_fail@plt+0x27e4>
   13dac:	strd	r4, [sp, #-16]!
   13db0:	subs	r4, r0, #0
   13db4:	str	r6, [sp, #8]
   13db8:	str	lr, [sp, #12]
   13dbc:	beq	13e54 <__assert_fail@plt+0x28fc>
   13dc0:	mov	r1, #47	; 0x2f
   13dc4:	bl	114d4 <strrchr@plt>
   13dc8:	subs	r5, r0, #0
   13dcc:	beq	13e2c <__assert_fail@plt+0x28d4>
   13dd0:	add	r6, r5, #1
   13dd4:	sub	r3, r6, r4
   13dd8:	cmp	r3, #6
   13ddc:	ble	13e2c <__assert_fail@plt+0x28d4>
   13de0:	movw	r1, #30416	; 0x76d0
   13de4:	movt	r1, #2
   13de8:	mov	r2, #7
   13dec:	sub	r0, r5, #6
   13df0:	bl	11528 <strncmp@plt>
   13df4:	cmp	r0, #0
   13df8:	bne	13e2c <__assert_fail@plt+0x28d4>
   13dfc:	movw	r1, #30424	; 0x76d8
   13e00:	movt	r1, #2
   13e04:	mov	r2, #3
   13e08:	mov	r0, r6
   13e0c:	bl	11528 <strncmp@plt>
   13e10:	cmp	r0, #0
   13e14:	movne	r4, r6
   13e18:	bne	13e2c <__assert_fail@plt+0x28d4>
   13e1c:	add	r4, r5, #4
   13e20:	movw	r3, #33192	; 0x81a8
   13e24:	movt	r3, #3
   13e28:	str	r4, [r3]
   13e2c:	movw	r2, #33464	; 0x82b8
   13e30:	movt	r2, #3
   13e34:	ldr	r6, [sp, #8]
   13e38:	movw	r3, #33196	; 0x81ac
   13e3c:	movt	r3, #3
   13e40:	str	r4, [r2]
   13e44:	str	r4, [r3]
   13e48:	ldrd	r4, [sp]
   13e4c:	add	sp, sp, #12
   13e50:	pop	{pc}		; (ldr pc, [sp], #4)
   13e54:	movw	r3, #33208	; 0x81b8
   13e58:	movt	r3, #3
   13e5c:	movw	r0, #30360	; 0x7698
   13e60:	movt	r0, #2
   13e64:	ldr	r3, [r3]
   13e68:	mov	r2, #55	; 0x37
   13e6c:	mov	r1, #1
   13e70:	bl	1133c <fwrite@plt>
   13e74:	bl	11534 <abort@plt>
   13e78:	strd	r4, [sp, #-16]!
   13e7c:	mov	r4, #0
   13e80:	mov	r5, #0
   13e84:	cmp	r1, #10
   13e88:	str	r6, [sp, #8]
   13e8c:	strd	r4, [r0]
   13e90:	strd	r4, [r0, #8]
   13e94:	str	lr, [sp, #12]
   13e98:	strd	r4, [r0, #16]
   13e9c:	strd	r4, [r0, #24]
   13ea0:	strd	r4, [r0, #32]
   13ea4:	strd	r4, [r0, #40]	; 0x28
   13ea8:	beq	13ec0 <__assert_fail@plt+0x2968>
   13eac:	ldrd	r4, [sp]
   13eb0:	str	r1, [r0]
   13eb4:	ldr	r6, [sp, #8]
   13eb8:	add	sp, sp, #12
   13ebc:	pop	{pc}		; (ldr pc, [sp], #4)
   13ec0:	bl	11534 <abort@plt>
   13ec4:	mov	r2, #5
   13ec8:	strd	r4, [sp, #-16]!
   13ecc:	mov	r5, r0
   13ed0:	str	r6, [sp, #8]
   13ed4:	mov	r6, r1
   13ed8:	mov	r1, r0
   13edc:	mov	r0, #0
   13ee0:	str	lr, [sp, #12]
   13ee4:	bl	112d0 <dcgettext@plt>
   13ee8:	cmp	r5, r0
   13eec:	mov	r4, r0
   13ef0:	beq	13f08 <__assert_fail@plt+0x29b0>
   13ef4:	mov	r0, r4
   13ef8:	ldrd	r4, [sp]
   13efc:	ldr	r6, [sp, #8]
   13f00:	add	sp, sp, #12
   13f04:	pop	{pc}		; (ldr pc, [sp], #4)
   13f08:	bl	26560 <__assert_fail@plt+0x15008>
   13f0c:	ldrb	r3, [r0]
   13f10:	bic	r3, r3, #32
   13f14:	cmp	r3, #85	; 0x55
   13f18:	bne	13f80 <__assert_fail@plt+0x2a28>
   13f1c:	ldrb	r3, [r0, #1]
   13f20:	bic	r3, r3, #32
   13f24:	cmp	r3, #84	; 0x54
   13f28:	bne	14000 <__assert_fail@plt+0x2aa8>
   13f2c:	ldrb	r3, [r0, #2]
   13f30:	bic	r3, r3, #32
   13f34:	cmp	r3, #70	; 0x46
   13f38:	bne	14000 <__assert_fail@plt+0x2aa8>
   13f3c:	ldrb	r3, [r0, #3]
   13f40:	cmp	r3, #45	; 0x2d
   13f44:	bne	14000 <__assert_fail@plt+0x2aa8>
   13f48:	ldrb	r3, [r0, #4]
   13f4c:	cmp	r3, #56	; 0x38
   13f50:	bne	14000 <__assert_fail@plt+0x2aa8>
   13f54:	ldrb	r3, [r0, #5]
   13f58:	cmp	r3, #0
   13f5c:	bne	14000 <__assert_fail@plt+0x2aa8>
   13f60:	ldrb	r2, [r4]
   13f64:	movw	r3, #30516	; 0x7734
   13f68:	movt	r3, #2
   13f6c:	movw	r4, #30528	; 0x7740
   13f70:	movt	r4, #2
   13f74:	cmp	r2, #96	; 0x60
   13f78:	movne	r4, r3
   13f7c:	b	13ef4 <__assert_fail@plt+0x299c>
   13f80:	cmp	r3, #71	; 0x47
   13f84:	bne	14000 <__assert_fail@plt+0x2aa8>
   13f88:	ldrb	r3, [r0, #1]
   13f8c:	bic	r3, r3, #32
   13f90:	cmp	r3, #66	; 0x42
   13f94:	bne	14000 <__assert_fail@plt+0x2aa8>
   13f98:	ldrb	r3, [r0, #2]
   13f9c:	cmp	r3, #49	; 0x31
   13fa0:	bne	14000 <__assert_fail@plt+0x2aa8>
   13fa4:	ldrb	r3, [r0, #3]
   13fa8:	cmp	r3, #56	; 0x38
   13fac:	bne	14000 <__assert_fail@plt+0x2aa8>
   13fb0:	ldrb	r3, [r0, #4]
   13fb4:	cmp	r3, #48	; 0x30
   13fb8:	bne	14000 <__assert_fail@plt+0x2aa8>
   13fbc:	ldrb	r3, [r0, #5]
   13fc0:	cmp	r3, #51	; 0x33
   13fc4:	bne	14000 <__assert_fail@plt+0x2aa8>
   13fc8:	ldrb	r3, [r0, #6]
   13fcc:	cmp	r3, #48	; 0x30
   13fd0:	bne	14000 <__assert_fail@plt+0x2aa8>
   13fd4:	ldrb	r3, [r0, #7]
   13fd8:	cmp	r3, #0
   13fdc:	bne	14000 <__assert_fail@plt+0x2aa8>
   13fe0:	ldrb	r2, [r4]
   13fe4:	movw	r3, #30520	; 0x7738
   13fe8:	movt	r3, #2
   13fec:	movw	r4, #30524	; 0x773c
   13ff0:	movt	r4, #2
   13ff4:	cmp	r2, #96	; 0x60
   13ff8:	movne	r4, r3
   13ffc:	b	13ef4 <__assert_fail@plt+0x299c>
   14000:	movw	r3, #30060	; 0x756c
   14004:	movt	r3, #2
   14008:	cmp	r6, #9
   1400c:	movw	r4, #30512	; 0x7730
   14010:	movt	r4, #2
   14014:	movne	r4, r3
   14018:	b	13ef4 <__assert_fail@plt+0x299c>
   1401c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14020:	strd	r6, [sp, #8]
   14024:	strd	r8, [sp, #16]
   14028:	strd	sl, [sp, #24]
   1402c:	mov	fp, r0
   14030:	mov	sl, r1
   14034:	str	lr, [sp, #32]
   14038:	sub	sp, sp, #116	; 0x74
   1403c:	ldr	r8, [sp, #152]	; 0x98
   14040:	str	r3, [sp, #28]
   14044:	ldr	r3, [sp, #156]	; 0x9c
   14048:	str	r2, [sp, #32]
   1404c:	and	r4, r3, #2
   14050:	ubfx	r3, r3, #1, #1
   14054:	str	r3, [sp, #44]	; 0x2c
   14058:	bl	11354 <__ctype_get_mb_cur_max@plt>
   1405c:	str	r0, [sp, #64]	; 0x40
   14060:	cmp	r8, #10
   14064:	ldrls	pc, [pc, r8, lsl #2]
   14068:	b	157d8 <__assert_fail@plt+0x4280>
   1406c:	andeq	r4, r1, r0, ror r4
   14070:	andeq	r4, r1, ip, lsl #10
   14074:	andeq	r4, r1, r8, ror #21
   14078:	andeq	r4, r1, ip, lsr #10
   1407c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14080:	andeq	r4, r1, r0, lsr #8
   14084:	andeq	r4, r1, r0, lsr #9
   14088:	ldrdeq	r4, [r1], -ip
   1408c:	muleq	r1, r8, r0
   14090:	muleq	r1, r8, r0
   14094:	muleq	r1, r8, r0
   14098:	cmp	r8, #10
   1409c:	beq	140c8 <__assert_fail@plt+0x2b70>
   140a0:	mov	r1, r8
   140a4:	movw	r0, #30532	; 0x7744
   140a8:	movt	r0, #2
   140ac:	bl	13ec4 <__assert_fail@plt+0x296c>
   140b0:	mov	r1, r8
   140b4:	str	r0, [sp, #164]	; 0xa4
   140b8:	movw	r0, #30060	; 0x756c
   140bc:	movt	r0, #2
   140c0:	bl	13ec4 <__assert_fail@plt+0x296c>
   140c4:	str	r0, [sp, #168]	; 0xa8
   140c8:	cmp	r4, #0
   140cc:	movne	r4, #0
   140d0:	beq	154b4 <__assert_fail@plt+0x3f5c>
   140d4:	mov	r3, #1
   140d8:	mov	r5, #0
   140dc:	ldr	r0, [sp, #168]	; 0xa8
   140e0:	str	r3, [sp, #36]	; 0x24
   140e4:	str	r3, [sp, #40]	; 0x28
   140e8:	str	r5, [sp, #68]	; 0x44
   140ec:	bl	11414 <strlen@plt>
   140f0:	ldr	r3, [sp, #168]	; 0xa8
   140f4:	str	r5, [sp, #48]	; 0x30
   140f8:	str	r0, [sp, #56]	; 0x38
   140fc:	str	r3, [sp, #60]	; 0x3c
   14100:	str	r5, [sp, #72]	; 0x48
   14104:	str	r8, [sp, #152]	; 0x98
   14108:	mov	r8, fp
   1410c:	mov	r9, #0
   14110:	ldr	fp, [sp, #152]	; 0x98
   14114:	ldr	r3, [sp, #28]
   14118:	cmn	r3, #1
   1411c:	beq	1467c <__assert_fail@plt+0x3124>
   14120:	ldr	r3, [sp, #28]
   14124:	subs	r6, r3, r9
   14128:	movne	r6, #1
   1412c:	cmp	r6, #0
   14130:	beq	14694 <__assert_fail@plt+0x313c>
   14134:	ldr	r0, [sp, #32]
   14138:	ldr	r7, [sp, #40]	; 0x28
   1413c:	add	r3, r0, r9
   14140:	cmp	fp, #2
   14144:	moveq	r7, #0
   14148:	andne	r7, r7, #1
   1414c:	str	r3, [sp, #52]	; 0x34
   14150:	cmp	r7, #0
   14154:	beq	14b30 <__assert_fail@plt+0x35d8>
   14158:	ldr	r2, [sp, #56]	; 0x38
   1415c:	cmp	r2, #0
   14160:	beq	14dcc <__assert_fail@plt+0x3874>
   14164:	ldr	r1, [sp, #28]
   14168:	cmp	r2, #1
   1416c:	mov	r3, r2
   14170:	movls	r3, #0
   14174:	movhi	r3, #1
   14178:	add	r5, r9, r2
   1417c:	cmn	r1, #1
   14180:	movne	r3, #0
   14184:	cmp	r3, #0
   14188:	beq	14194 <__assert_fail@plt+0x2c3c>
   1418c:	bl	11414 <strlen@plt>
   14190:	str	r0, [sp, #28]
   14194:	ldr	r3, [sp, #28]
   14198:	cmp	r5, r3
   1419c:	bhi	14dcc <__assert_fail@plt+0x3874>
   141a0:	ldr	r0, [sp, #52]	; 0x34
   141a4:	ldr	r2, [sp, #56]	; 0x38
   141a8:	ldr	r1, [sp, #60]	; 0x3c
   141ac:	bl	112b8 <memcmp@plt>
   141b0:	cmp	r0, #0
   141b4:	bne	14dcc <__assert_fail@plt+0x3874>
   141b8:	ldr	r3, [sp, #44]	; 0x2c
   141bc:	cmp	r3, #0
   141c0:	bne	156fc <__assert_fail@plt+0x41a4>
   141c4:	ldr	r3, [sp, #52]	; 0x34
   141c8:	ldrb	r5, [r3]
   141cc:	cmp	r5, #126	; 0x7e
   141d0:	ldrls	pc, [pc, r5, lsl #2]
   141d4:	b	14a8c <__assert_fail@plt+0x3534>
   141d8:	muleq	r1, r0, r9
   141dc:	andeq	r4, r1, ip, lsl #21
   141e0:	andeq	r4, r1, ip, lsl #21
   141e4:	andeq	r4, r1, ip, lsl #21
   141e8:	andeq	r4, r1, ip, lsl #21
   141ec:	andeq	r4, r1, ip, lsl #21
   141f0:	andeq	r4, r1, ip, lsl #21
   141f4:	andeq	r4, r1, r4, ror #18
   141f8:	andeq	r4, r1, ip, asr r9
   141fc:	andeq	r4, r1, r4, lsr #17
   14200:	andeq	r4, r1, r0, asr r9
   14204:	muleq	r1, ip, r8
   14208:	andeq	r4, r1, ip, lsr #18
   1420c:	andeq	r4, r1, r8, ror r9
   14210:	andeq	r4, r1, ip, lsl #21
   14214:	andeq	r4, r1, ip, lsl #21
   14218:	andeq	r4, r1, ip, lsl #21
   1421c:	andeq	r4, r1, ip, lsl #21
   14220:	andeq	r4, r1, ip, lsl #21
   14224:	andeq	r4, r1, ip, lsl #21
   14228:	andeq	r4, r1, ip, lsl #21
   1422c:	andeq	r4, r1, ip, lsl #21
   14230:	andeq	r4, r1, ip, lsl #21
   14234:	andeq	r4, r1, ip, lsl #21
   14238:	andeq	r4, r1, ip, lsl #21
   1423c:	andeq	r4, r1, ip, lsl #21
   14240:	andeq	r4, r1, ip, lsl #21
   14244:	andeq	r4, r1, ip, lsl #21
   14248:	andeq	r4, r1, ip, lsl #21
   1424c:	andeq	r4, r1, ip, lsl #21
   14250:	andeq	r4, r1, ip, lsl #21
   14254:	andeq	r4, r1, ip, lsl #21
   14258:	andeq	r4, r1, r8, ror #20
   1425c:	andeq	r4, r1, r0, ror r9
   14260:	andeq	r4, r1, r0, ror r9
   14264:	andeq	r4, r1, ip, asr #20
   14268:	andeq	r4, r1, r0, ror r9
   1426c:	andeq	r4, r1, r0, lsl #21
   14270:	andeq	r4, r1, r0, ror r9
   14274:	andeq	r4, r1, ip, asr #15
   14278:	andeq	r4, r1, r0, ror r9
   1427c:	andeq	r4, r1, r0, ror r9
   14280:	andeq	r4, r1, r0, ror r9
   14284:	andeq	r4, r1, r0, lsl #21
   14288:	andeq	r4, r1, r0, lsl #21
   1428c:	andeq	r4, r1, r0, lsl #21
   14290:	andeq	r4, r1, r0, lsl #21
   14294:	andeq	r4, r1, r0, lsl #21
   14298:	andeq	r4, r1, r0, lsl #21
   1429c:	andeq	r4, r1, r0, lsl #21
   142a0:	andeq	r4, r1, r0, lsl #21
   142a4:	andeq	r4, r1, r0, lsl #21
   142a8:	andeq	r4, r1, r0, lsl #21
   142ac:	andeq	r4, r1, r0, lsl #21
   142b0:	andeq	r4, r1, r0, lsl #21
   142b4:	andeq	r4, r1, r0, lsl #21
   142b8:	andeq	r4, r1, r0, lsl #21
   142bc:	andeq	r4, r1, r0, lsl #21
   142c0:	andeq	r4, r1, r0, lsl #21
   142c4:	andeq	r4, r1, r0, ror r9
   142c8:	andeq	r4, r1, r0, ror r9
   142cc:	andeq	r4, r1, r0, ror r9
   142d0:	andeq	r4, r1, r0, ror r9
   142d4:	andeq	r4, r1, r0, lsr #15
   142d8:	andeq	r4, r1, ip, lsl #21
   142dc:	andeq	r4, r1, r0, lsl #21
   142e0:	andeq	r4, r1, r0, lsl #21
   142e4:	andeq	r4, r1, r0, lsl #21
   142e8:	andeq	r4, r1, r0, lsl #21
   142ec:	andeq	r4, r1, r0, lsl #21
   142f0:	andeq	r4, r1, r0, lsl #21
   142f4:	andeq	r4, r1, r0, lsl #21
   142f8:	andeq	r4, r1, r0, lsl #21
   142fc:	andeq	r4, r1, r0, lsl #21
   14300:	andeq	r4, r1, r0, lsl #21
   14304:	andeq	r4, r1, r0, lsl #21
   14308:	andeq	r4, r1, r0, lsl #21
   1430c:	andeq	r4, r1, r0, lsl #21
   14310:	andeq	r4, r1, r0, lsl #21
   14314:	andeq	r4, r1, r0, lsl #21
   14318:	andeq	r4, r1, r0, lsl #21
   1431c:	andeq	r4, r1, r0, lsl #21
   14320:	andeq	r4, r1, r0, lsl #21
   14324:	andeq	r4, r1, r0, lsl #21
   14328:	andeq	r4, r1, r0, lsl #21
   1432c:	andeq	r4, r1, r0, lsl #21
   14330:	andeq	r4, r1, r0, lsl #21
   14334:	andeq	r4, r1, r0, lsl #21
   14338:	andeq	r4, r1, r0, lsl #21
   1433c:	andeq	r4, r1, r0, lsl #21
   14340:	andeq	r4, r1, r0, lsl #21
   14344:	andeq	r4, r1, r0, ror r9
   14348:	andeq	r4, r1, r8, asr #14
   1434c:	andeq	r4, r1, r0, lsl #21
   14350:	andeq	r4, r1, r0, ror r9
   14354:	andeq	r4, r1, r0, lsl #21
   14358:	andeq	r4, r1, r0, ror r9
   1435c:	andeq	r4, r1, r0, lsl #21
   14360:	andeq	r4, r1, r0, lsl #21
   14364:	andeq	r4, r1, r0, lsl #21
   14368:	andeq	r4, r1, r0, lsl #21
   1436c:	andeq	r4, r1, r0, lsl #21
   14370:	andeq	r4, r1, r0, lsl #21
   14374:	andeq	r4, r1, r0, lsl #21
   14378:	andeq	r4, r1, r0, lsl #21
   1437c:	andeq	r4, r1, r0, lsl #21
   14380:	andeq	r4, r1, r0, lsl #21
   14384:	andeq	r4, r1, r0, lsl #21
   14388:	andeq	r4, r1, r0, lsl #21
   1438c:	andeq	r4, r1, r0, lsl #21
   14390:	andeq	r4, r1, r0, lsl #21
   14394:	andeq	r4, r1, r0, lsl #21
   14398:	andeq	r4, r1, r0, lsl #21
   1439c:	andeq	r4, r1, r0, lsl #21
   143a0:	andeq	r4, r1, r0, lsl #21
   143a4:	andeq	r4, r1, r0, lsl #21
   143a8:	andeq	r4, r1, r0, lsl #21
   143ac:	andeq	r4, r1, r0, lsl #21
   143b0:	andeq	r4, r1, r0, lsl #21
   143b4:	andeq	r4, r1, r0, lsl #21
   143b8:	andeq	r4, r1, r0, lsl #21
   143bc:	andeq	r4, r1, r0, lsl #21
   143c0:	andeq	r4, r1, r0, lsl #21
   143c4:	andeq	r4, r1, ip, ror #10
   143c8:	andeq	r4, r1, r0, ror r9
   143cc:	andeq	r4, r1, ip, ror #10
   143d0:	andeq	r4, r1, ip, asr #20
   143d4:	cmp	r4, #0
   143d8:	moveq	r3, #1
   143dc:	streq	r3, [sp, #40]	; 0x28
   143e0:	beq	14af4 <__assert_fail@plt+0x359c>
   143e4:	mov	r3, #0
   143e8:	mov	r2, #1
   143ec:	mov	r4, r3
   143f0:	str	r2, [sp, #36]	; 0x24
   143f4:	str	r2, [sp, #44]	; 0x2c
   143f8:	str	r2, [sp, #56]	; 0x38
   143fc:	str	r3, [sp, #68]	; 0x44
   14400:	movw	r3, #30060	; 0x756c
   14404:	movt	r3, #2
   14408:	str	r4, [sp, #40]	; 0x28
   1440c:	mov	r8, #2
   14410:	str	r4, [sp, #48]	; 0x30
   14414:	str	r3, [sp, #60]	; 0x3c
   14418:	str	r4, [sp, #72]	; 0x48
   1441c:	b	14104 <__assert_fail@plt+0x2bac>
   14420:	cmp	r4, #0
   14424:	bne	15670 <__assert_fail@plt+0x4118>
   14428:	cmp	sl, #0
   1442c:	beq	15430 <__assert_fail@plt+0x3ed8>
   14430:	mov	r3, #34	; 0x22
   14434:	mov	r1, r4
   14438:	mov	r2, #1
   1443c:	strb	r3, [fp]
   14440:	movw	r3, #30512	; 0x7730
   14444:	movt	r3, #2
   14448:	mov	r4, r2
   1444c:	str	r2, [sp, #36]	; 0x24
   14450:	str	r2, [sp, #40]	; 0x28
   14454:	str	r1, [sp, #44]	; 0x2c
   14458:	str	r1, [sp, #48]	; 0x30
   1445c:	str	r2, [sp, #56]	; 0x38
   14460:	str	r3, [sp, #60]	; 0x3c
   14464:	str	r1, [sp, #68]	; 0x44
   14468:	str	r1, [sp, #72]	; 0x48
   1446c:	b	14104 <__assert_fail@plt+0x2bac>
   14470:	mov	r3, #0
   14474:	mov	r4, r8
   14478:	str	r3, [sp, #40]	; 0x28
   1447c:	str	r3, [sp, #44]	; 0x2c
   14480:	str	r3, [sp, #48]	; 0x30
   14484:	str	r8, [sp, #56]	; 0x38
   14488:	str	r3, [sp, #60]	; 0x3c
   1448c:	str	r3, [sp, #68]	; 0x44
   14490:	mov	r3, #1
   14494:	str	r3, [sp, #36]	; 0x24
   14498:	str	r8, [sp, #72]	; 0x48
   1449c:	b	14104 <__assert_fail@plt+0x2bac>
   144a0:	mov	r3, #1
   144a4:	mov	r2, #0
   144a8:	mov	r4, r2
   144ac:	mov	r8, #5
   144b0:	str	r3, [sp, #36]	; 0x24
   144b4:	str	r3, [sp, #40]	; 0x28
   144b8:	str	r3, [sp, #44]	; 0x2c
   144bc:	str	r2, [sp, #48]	; 0x30
   144c0:	str	r3, [sp, #56]	; 0x38
   144c4:	movw	r3, #30512	; 0x7730
   144c8:	movt	r3, #2
   144cc:	str	r3, [sp, #60]	; 0x3c
   144d0:	str	r2, [sp, #68]	; 0x44
   144d4:	str	r2, [sp, #72]	; 0x48
   144d8:	b	14104 <__assert_fail@plt+0x2bac>
   144dc:	mov	r3, #0
   144e0:	mov	r2, #1
   144e4:	mov	r4, r3
   144e8:	str	r2, [sp, #36]	; 0x24
   144ec:	str	r2, [sp, #40]	; 0x28
   144f0:	str	r3, [sp, #44]	; 0x2c
   144f4:	str	r3, [sp, #48]	; 0x30
   144f8:	str	r3, [sp, #56]	; 0x38
   144fc:	str	r3, [sp, #60]	; 0x3c
   14500:	str	r3, [sp, #68]	; 0x44
   14504:	str	r3, [sp, #72]	; 0x48
   14508:	b	14104 <__assert_fail@plt+0x2bac>
   1450c:	mov	r2, #1
   14510:	mov	r3, #0
   14514:	mov	r4, r3
   14518:	str	r2, [sp, #36]	; 0x24
   1451c:	str	r2, [sp, #44]	; 0x2c
   14520:	str	r8, [sp, #56]	; 0x38
   14524:	str	r3, [sp, #68]	; 0x44
   14528:	b	14400 <__assert_fail@plt+0x2ea8>
   1452c:	mov	r3, #1
   14530:	mov	r2, #0
   14534:	mov	r4, r2
   14538:	mov	r8, #2
   1453c:	str	r3, [sp, #36]	; 0x24
   14540:	str	r3, [sp, #40]	; 0x28
   14544:	str	r3, [sp, #44]	; 0x2c
   14548:	str	r2, [sp, #48]	; 0x30
   1454c:	str	r3, [sp, #56]	; 0x38
   14550:	movw	r3, #30060	; 0x756c
   14554:	movt	r3, #2
   14558:	str	r3, [sp, #60]	; 0x3c
   1455c:	str	r2, [sp, #68]	; 0x44
   14560:	str	r2, [sp, #72]	; 0x48
   14564:	b	14104 <__assert_fail@plt+0x2bac>
   14568:	mov	r7, #0
   1456c:	ldr	r3, [sp, #28]
   14570:	cmn	r3, #1
   14574:	beq	1504c <__assert_fail@plt+0x3af4>
   14578:	ldr	r3, [sp, #28]
   1457c:	subs	r2, r3, #1
   14580:	movne	r2, #1
   14584:	sub	r3, fp, #2
   14588:	cmp	r2, #0
   1458c:	clz	r3, r3
   14590:	lsr	r3, r3, #5
   14594:	bne	145a0 <__assert_fail@plt+0x3048>
   14598:	cmp	r9, #0
   1459c:	beq	14dac <__assert_fail@plt+0x3854>
   145a0:	mov	r6, #0
   145a4:	ldr	r2, [sp, #40]	; 0x28
   145a8:	eor	r2, r2, #1
   145ac:	orrs	r3, r3, r2
   145b0:	bne	14788 <__assert_fail@plt+0x3230>
   145b4:	ldr	r2, [sp, #160]	; 0xa0
   145b8:	cmp	r2, #0
   145bc:	beq	145dc <__assert_fail@plt+0x3084>
   145c0:	ldr	r0, [sp, #160]	; 0xa0
   145c4:	ubfx	r1, r5, #5, #8
   145c8:	and	r2, r5, #31
   145cc:	ldr	r1, [r0, r1, lsl #2]
   145d0:	lsr	r2, r1, r2
   145d4:	tst	r2, #1
   145d8:	bne	145e4 <__assert_fail@plt+0x308c>
   145dc:	cmp	r7, #0
   145e0:	beq	14854 <__assert_fail@plt+0x32fc>
   145e4:	ldr	r2, [sp, #44]	; 0x2c
   145e8:	sub	r3, fp, #2
   145ec:	clz	r3, r3
   145f0:	lsr	r3, r3, #5
   145f4:	cmp	r2, #0
   145f8:	bne	153a0 <__assert_fail@plt+0x3e48>
   145fc:	ldr	r2, [sp, #48]	; 0x30
   14600:	eor	r2, r2, #1
   14604:	ands	r3, r3, r2
   14608:	beq	14640 <__assert_fail@plt+0x30e8>
   1460c:	cmp	sl, r4
   14610:	str	r3, [sp, #48]	; 0x30
   14614:	movhi	r2, #39	; 0x27
   14618:	strbhi	r2, [r8, r4]
   1461c:	add	r2, r4, #1
   14620:	cmp	sl, r2
   14624:	movhi	r1, #36	; 0x24
   14628:	strbhi	r1, [r8, r2]
   1462c:	add	r2, r4, #2
   14630:	add	r4, r4, #3
   14634:	cmp	sl, r2
   14638:	movhi	r1, #39	; 0x27
   1463c:	strbhi	r1, [r8, r2]
   14640:	cmp	r4, sl
   14644:	add	r9, r9, #1
   14648:	movcc	r3, #92	; 0x5c
   1464c:	strbcc	r3, [r8, r4]
   14650:	add	r4, r4, #1
   14654:	cmp	r4, sl
   14658:	ldr	r3, [sp, #36]	; 0x24
   1465c:	strbcc	r5, [r8, r4]
   14660:	cmp	r6, #0
   14664:	add	r4, r4, #1
   14668:	moveq	r3, #0
   1466c:	str	r3, [sp, #36]	; 0x24
   14670:	ldr	r3, [sp, #28]
   14674:	cmn	r3, #1
   14678:	bne	14120 <__assert_fail@plt+0x2bc8>
   1467c:	ldr	r3, [sp, #32]
   14680:	ldrb	r6, [r3, r9]
   14684:	adds	r6, r6, #0
   14688:	movne	r6, #1
   1468c:	cmp	r6, #0
   14690:	bne	14134 <__assert_fail@plt+0x2bdc>
   14694:	str	fp, [sp, #152]	; 0x98
   14698:	mov	fp, r8
   1469c:	cmp	r4, #0
   146a0:	ldr	r1, [sp, #44]	; 0x2c
   146a4:	movne	r3, #0
   146a8:	ldr	r8, [sp, #152]	; 0x98
   146ac:	sub	r2, r8, #2
   146b0:	clz	r2, r2
   146b4:	lsr	r2, r2, #5
   146b8:	andeq	r3, r2, r1
   146bc:	cmp	r3, #0
   146c0:	bne	1577c <__assert_fail@plt+0x4224>
   146c4:	eor	r3, r1, #1
   146c8:	ands	r2, r2, r3
   146cc:	beq	156a8 <__assert_fail@plt+0x4150>
   146d0:	ldr	r3, [sp, #68]	; 0x44
   146d4:	cmp	r3, #0
   146d8:	beq	156ac <__assert_fail@plt+0x4154>
   146dc:	ldr	r3, [sp, #36]	; 0x24
   146e0:	cmp	r3, #0
   146e4:	bne	15738 <__assert_fail@plt+0x41e0>
   146e8:	ldr	r3, [sp, #72]	; 0x48
   146ec:	adds	r3, r3, #0
   146f0:	movne	r3, #1
   146f4:	cmp	sl, #0
   146f8:	movne	r3, #0
   146fc:	cmp	r3, #0
   14700:	ldreq	r2, [sp, #68]	; 0x44
   14704:	beq	156ac <__assert_fail@plt+0x4154>
   14708:	ldr	r2, [sp, #72]	; 0x48
   1470c:	str	r3, [sp, #68]	; 0x44
   14710:	movw	r3, #30060	; 0x756c
   14714:	movt	r3, #2
   14718:	mov	r1, #39	; 0x27
   1471c:	mov	r4, #1
   14720:	ldr	sl, [sp, #72]	; 0x48
   14724:	mov	r8, #2
   14728:	str	r3, [sp, #60]	; 0x3c
   1472c:	mov	r3, #0
   14730:	strb	r1, [fp]
   14734:	str	r3, [sp, #44]	; 0x2c
   14738:	str	r4, [sp, #56]	; 0x38
   1473c:	str	r2, [sp, #72]	; 0x48
   14740:	b	14104 <__assert_fail@plt+0x2bac>
   14744:	mov	r7, #0
   14748:	cmp	fp, #2
   1474c:	beq	1502c <__assert_fail@plt+0x3ad4>
   14750:	ldr	r2, [sp, #40]	; 0x28
   14754:	ldr	r3, [sp, #56]	; 0x38
   14758:	ldr	r1, [sp, #44]	; 0x2c
   1475c:	cmp	r3, #0
   14760:	moveq	r3, #0
   14764:	andne	r3, r2, r1
   14768:	cmp	r3, #0
   1476c:	moveq	r5, #92	; 0x5c
   14770:	moveq	r3, r5
   14774:	bne	15038 <__assert_fail@plt+0x3ae0>
   14778:	ldr	r2, [sp, #40]	; 0x28
   1477c:	cmp	r2, #0
   14780:	bne	15474 <__assert_fail@plt+0x3f1c>
   14784:	mov	r6, #0
   14788:	ldr	r3, [sp, #44]	; 0x2c
   1478c:	cmp	r3, #0
   14790:	beq	15024 <__assert_fail@plt+0x3acc>
   14794:	mov	r3, #0
   14798:	b	145b4 <__assert_fail@plt+0x305c>
   1479c:	mov	r7, #0
   147a0:	cmp	fp, #2
   147a4:	beq	1509c <__assert_fail@plt+0x3b44>
   147a8:	cmp	fp, #5
   147ac:	beq	15060 <__assert_fail@plt+0x3b08>
   147b0:	sub	r3, fp, #2
   147b4:	mov	r6, #0
   147b8:	clz	r3, r3
   147bc:	mov	r5, #63	; 0x3f
   147c0:	lsr	r3, r3, #5
   147c4:	b	145a4 <__assert_fail@plt+0x304c>
   147c8:	mov	r7, #0
   147cc:	cmp	fp, #2
   147d0:	movne	r3, #0
   147d4:	movne	r5, #39	; 0x27
   147d8:	strne	r6, [sp, #68]	; 0x44
   147dc:	bne	145a4 <__assert_fail@plt+0x304c>
   147e0:	ldr	r3, [sp, #44]	; 0x2c
   147e4:	cmp	r3, #0
   147e8:	bne	154a4 <__assert_fail@plt+0x3f4c>
   147ec:	ldr	r3, [sp, #72]	; 0x48
   147f0:	cmp	sl, #0
   147f4:	clz	r3, r3
   147f8:	lsr	r3, r3, #5
   147fc:	moveq	r3, #0
   14800:	cmp	r3, #0
   14804:	bne	153d0 <__assert_fail@plt+0x3e78>
   14808:	cmp	sl, r4
   1480c:	movhi	r3, #39	; 0x27
   14810:	strbhi	r3, [r8, r4]
   14814:	add	r3, r4, #1
   14818:	cmp	sl, r3
   1481c:	movhi	r2, #92	; 0x5c
   14820:	strbhi	r2, [r8, r3]
   14824:	add	r3, r4, #2
   14828:	cmp	sl, r3
   1482c:	bls	14838 <__assert_fail@plt+0x32e0>
   14830:	mov	r2, #39	; 0x27
   14834:	strb	r2, [r8, r3]
   14838:	mov	r3, #0
   1483c:	cmp	r7, #0
   14840:	add	r4, r4, #3
   14844:	mov	r5, #39	; 0x27
   14848:	str	r3, [sp, #48]	; 0x30
   1484c:	str	r6, [sp, #68]	; 0x44
   14850:	bne	145e4 <__assert_fail@plt+0x308c>
   14854:	ldr	r2, [sp, #48]	; 0x30
   14858:	eor	r3, r3, #1
   1485c:	add	r9, r9, #1
   14860:	and	r3, r3, r2
   14864:	uxtb	r3, r3
   14868:	cmp	r3, #0
   1486c:	beq	14654 <__assert_fail@plt+0x30fc>
   14870:	cmp	sl, r4
   14874:	movhi	r3, #39	; 0x27
   14878:	strbhi	r3, [r8, r4]
   1487c:	add	r3, r4, #1
   14880:	add	r4, r4, #2
   14884:	cmp	sl, r3
   14888:	movhi	r2, #39	; 0x27
   1488c:	strbhi	r2, [r8, r3]
   14890:	mov	r3, #0
   14894:	str	r3, [sp, #48]	; 0x30
   14898:	b	14654 <__assert_fail@plt+0x30fc>
   1489c:	mov	r3, #118	; 0x76
   148a0:	b	14778 <__assert_fail@plt+0x3220>
   148a4:	mov	r3, #116	; 0x74
   148a8:	ldr	r2, [sp, #44]	; 0x2c
   148ac:	cmp	fp, #2
   148b0:	movne	r2, #0
   148b4:	andeq	r2, r2, #1
   148b8:	cmp	r2, #0
   148bc:	beq	14778 <__assert_fail@plt+0x3220>
   148c0:	mov	fp, r8
   148c4:	mov	r8, #2
   148c8:	ldr	r3, [sp, #40]	; 0x28
   148cc:	cmp	r3, #0
   148d0:	movne	r8, #4
   148d4:	mov	lr, #0
   148d8:	mov	r0, fp
   148dc:	ldr	r2, [sp, #32]
   148e0:	ldr	r3, [sp, #156]	; 0x9c
   148e4:	ldr	r1, [sp, #164]	; 0xa4
   148e8:	bic	ip, r3, #2
   148ec:	ldr	r3, [sp, #28]
   148f0:	stm	sp, {r8, ip, lr}
   148f4:	ldr	ip, [sp, #168]	; 0xa8
   148f8:	str	r1, [sp, #12]
   148fc:	mov	r1, sl
   14900:	str	ip, [sp, #16]
   14904:	bl	1401c <__assert_fail@plt+0x2ac4>
   14908:	mov	r4, r0
   1490c:	mov	r0, r4
   14910:	add	sp, sp, #116	; 0x74
   14914:	ldrd	r4, [sp]
   14918:	ldrd	r6, [sp, #8]
   1491c:	ldrd	r8, [sp, #16]
   14920:	ldrd	sl, [sp, #24]
   14924:	add	sp, sp, #32
   14928:	pop	{pc}		; (ldr pc, [sp], #4)
   1492c:	mov	r5, #102	; 0x66
   14930:	ldr	r2, [sp, #44]	; 0x2c
   14934:	sub	r3, fp, #2
   14938:	clz	r3, r3
   1493c:	lsr	r3, r3, #5
   14940:	cmp	r2, #0
   14944:	bne	153a0 <__assert_fail@plt+0x3e48>
   14948:	mov	r6, r2
   1494c:	b	14640 <__assert_fail@plt+0x30e8>
   14950:	mov	r5, #110	; 0x6e
   14954:	mov	r6, #0
   14958:	b	145e4 <__assert_fail@plt+0x308c>
   1495c:	mov	r5, #98	; 0x62
   14960:	b	14930 <__assert_fail@plt+0x33d8>
   14964:	mov	r5, #97	; 0x61
   14968:	b	14930 <__assert_fail@plt+0x33d8>
   1496c:	mov	r7, #0
   14970:	mov	r6, #0
   14974:	b	14794 <__assert_fail@plt+0x323c>
   14978:	mov	r5, #114	; 0x72
   1497c:	b	14954 <__assert_fail@plt+0x33fc>
   14980:	ldr	r3, [sp, #44]	; 0x2c
   14984:	cmp	r3, #0
   14988:	bne	15718 <__assert_fail@plt+0x41c0>
   1498c:	mov	r7, r3
   14990:	ldr	r3, [sp, #48]	; 0x30
   14994:	sub	r2, fp, #2
   14998:	clz	r2, r2
   1499c:	lsr	r2, r2, #5
   149a0:	eor	r3, r3, #1
   149a4:	ands	r3, r2, r3
   149a8:	beq	153bc <__assert_fail@plt+0x3e64>
   149ac:	cmp	sl, r4
   149b0:	movhi	r1, #39	; 0x27
   149b4:	strbhi	r1, [r8, r4]
   149b8:	add	r1, r4, #1
   149bc:	cmp	sl, r1
   149c0:	movhi	r0, #36	; 0x24
   149c4:	strbhi	r0, [r8, r1]
   149c8:	add	r1, r4, #2
   149cc:	cmp	sl, r1
   149d0:	movhi	r0, #39	; 0x27
   149d4:	strbhi	r0, [r8, r1]
   149d8:	add	r1, r4, #3
   149dc:	cmp	sl, r1
   149e0:	bls	15414 <__assert_fail@plt+0x3ebc>
   149e4:	mov	r4, r1
   149e8:	mov	r1, #92	; 0x5c
   149ec:	mov	r0, r4
   149f0:	str	r3, [sp, #48]	; 0x30
   149f4:	strb	r1, [r8, r4]
   149f8:	cmp	fp, #2
   149fc:	add	r4, r4, #1
   14a00:	beq	15464 <__assert_fail@plt+0x3f0c>
   14a04:	ldr	r1, [sp, #28]
   14a08:	add	r3, r9, #1
   14a0c:	cmp	r3, r1
   14a10:	bcs	14a28 <__assert_fail@plt+0x34d0>
   14a14:	ldr	r1, [sp, #32]
   14a18:	ldrb	r3, [r1, r3]
   14a1c:	sub	r3, r3, #48	; 0x30
   14a20:	cmp	r3, #9
   14a24:	bls	1547c <__assert_fail@plt+0x3f24>
   14a28:	mov	r5, #48	; 0x30
   14a2c:	ldr	r3, [sp, #40]	; 0x28
   14a30:	eor	r3, r3, #1
   14a34:	orrs	r2, r2, r3
   14a38:	mov	r3, r6
   14a3c:	moveq	r6, r2
   14a40:	beq	145b4 <__assert_fail@plt+0x305c>
   14a44:	mov	r6, #0
   14a48:	b	145dc <__assert_fail@plt+0x3084>
   14a4c:	cmp	r9, #0
   14a50:	mov	r2, r7
   14a54:	bne	14ff4 <__assert_fail@plt+0x3a9c>
   14a58:	mov	r6, r7
   14a5c:	mov	r3, r9
   14a60:	mov	r7, r2
   14a64:	b	145a4 <__assert_fail@plt+0x304c>
   14a68:	mov	r2, r7
   14a6c:	mov	r6, r7
   14a70:	mov	r3, #0
   14a74:	mov	r7, r2
   14a78:	mov	r5, #32
   14a7c:	b	145a4 <__assert_fail@plt+0x304c>
   14a80:	mov	r6, r7
   14a84:	b	14794 <__assert_fail@plt+0x323c>
   14a88:	mov	r7, #0
   14a8c:	ldr	r3, [sp, #64]	; 0x40
   14a90:	cmp	r3, #1
   14a94:	bne	150b4 <__assert_fail@plt+0x3b5c>
   14a98:	bl	113fc <__ctype_b_loc@plt>
   14a9c:	ldr	r2, [r0]
   14aa0:	sxth	r3, r5
   14aa4:	lsl	r3, r3, #1
   14aa8:	ldr	r1, [sp, #64]	; 0x40
   14aac:	ldrh	r3, [r2, r3]
   14ab0:	mov	ip, r1
   14ab4:	and	r3, r3, #16384	; 0x4000
   14ab8:	cmp	r3, #0
   14abc:	ldr	r3, [sp, #40]	; 0x28
   14ac0:	movne	r6, #1
   14ac4:	moveq	r6, #0
   14ac8:	movne	r2, #0
   14acc:	andeq	r2, r3, #1
   14ad0:	cmp	r2, #0
   14ad4:	bne	153fc <__assert_fail@plt+0x3ea4>
   14ad8:	sub	r3, fp, #2
   14adc:	clz	r3, r3
   14ae0:	lsr	r3, r3, #5
   14ae4:	b	145a4 <__assert_fail@plt+0x304c>
   14ae8:	cmp	r4, #0
   14aec:	bne	1578c <__assert_fail@plt+0x4234>
   14af0:	str	r4, [sp, #40]	; 0x28
   14af4:	cmp	sl, #0
   14af8:	bne	157bc <__assert_fail@plt+0x4264>
   14afc:	mov	r3, #1
   14b00:	movw	r2, #30060	; 0x756c
   14b04:	movt	r2, #2
   14b08:	mov	r4, r3
   14b0c:	mov	r8, #2
   14b10:	str	r3, [sp, #36]	; 0x24
   14b14:	str	sl, [sp, #44]	; 0x2c
   14b18:	str	sl, [sp, #48]	; 0x30
   14b1c:	str	r3, [sp, #56]	; 0x38
   14b20:	str	r2, [sp, #60]	; 0x3c
   14b24:	str	sl, [sp, #68]	; 0x44
   14b28:	str	sl, [sp, #72]	; 0x48
   14b2c:	b	14104 <__assert_fail@plt+0x2bac>
   14b30:	ldr	r3, [sp, #32]
   14b34:	ldrb	r5, [r3, r9]
   14b38:	cmp	r5, #126	; 0x7e
   14b3c:	ldrls	pc, [pc, r5, lsl #2]
   14b40:	b	14a8c <__assert_fail@plt+0x3534>
   14b44:	andeq	r4, r1, r8, ror #26
   14b48:	andeq	r4, r1, ip, lsl #21
   14b4c:	andeq	r4, r1, ip, lsl #21
   14b50:	andeq	r4, r1, ip, lsl #21
   14b54:	andeq	r4, r1, ip, lsl #21
   14b58:	andeq	r4, r1, ip, lsl #21
   14b5c:	andeq	r4, r1, ip, lsl #21
   14b60:	andeq	r4, r1, r0, ror #26
   14b64:	andeq	r4, r1, r8, asr sp
   14b68:	andeq	r4, r1, r4, lsr #17
   14b6c:	andeq	r4, r1, r0, asr sp
   14b70:	muleq	r1, ip, r8
   14b74:	andeq	r4, r1, r8, asr #26
   14b78:	andeq	r4, r1, r0, asr #26
   14b7c:	andeq	r4, r1, ip, lsl #21
   14b80:	andeq	r4, r1, ip, lsl #21
   14b84:	andeq	r4, r1, ip, lsl #21
   14b88:	andeq	r4, r1, ip, lsl #21
   14b8c:	andeq	r4, r1, ip, lsl #21
   14b90:	andeq	r4, r1, ip, lsl #21
   14b94:	andeq	r4, r1, ip, lsl #21
   14b98:	andeq	r4, r1, ip, lsl #21
   14b9c:	andeq	r4, r1, ip, lsl #21
   14ba0:	andeq	r4, r1, ip, lsl #21
   14ba4:	andeq	r4, r1, ip, lsl #21
   14ba8:	andeq	r4, r1, ip, lsl #21
   14bac:	andeq	r4, r1, ip, lsl #21
   14bb0:	andeq	r4, r1, ip, lsl #21
   14bb4:	andeq	r4, r1, ip, lsl #21
   14bb8:	andeq	r4, r1, ip, lsl #21
   14bbc:	andeq	r4, r1, ip, lsl #21
   14bc0:	andeq	r4, r1, ip, lsl #21
   14bc4:			; <UNDEFINED> instruction: 0x00014dbc
   14bc8:	muleq	r1, ip, sp
   14bcc:	muleq	r1, ip, sp
   14bd0:	andeq	r4, r1, ip, lsl #27
   14bd4:	muleq	r1, ip, sp
   14bd8:	ldrdeq	r4, [r1], -r8
   14bdc:	muleq	r1, ip, sp
   14be0:	andeq	r4, r1, ip, asr #15
   14be4:	muleq	r1, ip, sp
   14be8:	muleq	r1, ip, sp
   14bec:	muleq	r1, ip, sp
   14bf0:	ldrdeq	r4, [r1], -r8
   14bf4:	ldrdeq	r4, [r1], -r8
   14bf8:	ldrdeq	r4, [r1], -r8
   14bfc:	ldrdeq	r4, [r1], -r8
   14c00:	ldrdeq	r4, [r1], -r8
   14c04:	ldrdeq	r4, [r1], -r8
   14c08:	ldrdeq	r4, [r1], -r8
   14c0c:	ldrdeq	r4, [r1], -r8
   14c10:	ldrdeq	r4, [r1], -r8
   14c14:	ldrdeq	r4, [r1], -r8
   14c18:	ldrdeq	r4, [r1], -r8
   14c1c:	ldrdeq	r4, [r1], -r8
   14c20:	ldrdeq	r4, [r1], -r8
   14c24:	ldrdeq	r4, [r1], -r8
   14c28:	ldrdeq	r4, [r1], -r8
   14c2c:	ldrdeq	r4, [r1], -r8
   14c30:	muleq	r1, ip, sp
   14c34:	muleq	r1, ip, sp
   14c38:	muleq	r1, ip, sp
   14c3c:	muleq	r1, ip, sp
   14c40:	andeq	r4, r1, r0, lsr #15
   14c44:	andeq	r4, r1, ip, lsl #21
   14c48:	ldrdeq	r4, [r1], -r8
   14c4c:	ldrdeq	r4, [r1], -r8
   14c50:	ldrdeq	r4, [r1], -r8
   14c54:	ldrdeq	r4, [r1], -r8
   14c58:	ldrdeq	r4, [r1], -r8
   14c5c:	ldrdeq	r4, [r1], -r8
   14c60:	ldrdeq	r4, [r1], -r8
   14c64:	ldrdeq	r4, [r1], -r8
   14c68:	ldrdeq	r4, [r1], -r8
   14c6c:	ldrdeq	r4, [r1], -r8
   14c70:	ldrdeq	r4, [r1], -r8
   14c74:	ldrdeq	r4, [r1], -r8
   14c78:	ldrdeq	r4, [r1], -r8
   14c7c:	ldrdeq	r4, [r1], -r8
   14c80:	ldrdeq	r4, [r1], -r8
   14c84:	ldrdeq	r4, [r1], -r8
   14c88:	ldrdeq	r4, [r1], -r8
   14c8c:	ldrdeq	r4, [r1], -r8
   14c90:	ldrdeq	r4, [r1], -r8
   14c94:	ldrdeq	r4, [r1], -r8
   14c98:	ldrdeq	r4, [r1], -r8
   14c9c:	ldrdeq	r4, [r1], -r8
   14ca0:	ldrdeq	r4, [r1], -r8
   14ca4:	ldrdeq	r4, [r1], -r8
   14ca8:	ldrdeq	r4, [r1], -r8
   14cac:	ldrdeq	r4, [r1], -r8
   14cb0:	muleq	r1, ip, sp
   14cb4:	andeq	r4, r1, r8, asr #14
   14cb8:	ldrdeq	r4, [r1], -r8
   14cbc:	muleq	r1, ip, sp
   14cc0:	ldrdeq	r4, [r1], -r8
   14cc4:	muleq	r1, ip, sp
   14cc8:	ldrdeq	r4, [r1], -r8
   14ccc:	ldrdeq	r4, [r1], -r8
   14cd0:	ldrdeq	r4, [r1], -r8
   14cd4:	ldrdeq	r4, [r1], -r8
   14cd8:	ldrdeq	r4, [r1], -r8
   14cdc:	ldrdeq	r4, [r1], -r8
   14ce0:	ldrdeq	r4, [r1], -r8
   14ce4:	ldrdeq	r4, [r1], -r8
   14ce8:	ldrdeq	r4, [r1], -r8
   14cec:	ldrdeq	r4, [r1], -r8
   14cf0:	ldrdeq	r4, [r1], -r8
   14cf4:	ldrdeq	r4, [r1], -r8
   14cf8:	ldrdeq	r4, [r1], -r8
   14cfc:	ldrdeq	r4, [r1], -r8
   14d00:	ldrdeq	r4, [r1], -r8
   14d04:	ldrdeq	r4, [r1], -r8
   14d08:	ldrdeq	r4, [r1], -r8
   14d0c:	ldrdeq	r4, [r1], -r8
   14d10:	ldrdeq	r4, [r1], -r8
   14d14:	ldrdeq	r4, [r1], -r8
   14d18:	ldrdeq	r4, [r1], -r8
   14d1c:	ldrdeq	r4, [r1], -r8
   14d20:	ldrdeq	r4, [r1], -r8
   14d24:	ldrdeq	r4, [r1], -r8
   14d28:	ldrdeq	r4, [r1], -r8
   14d2c:	ldrdeq	r4, [r1], -r8
   14d30:	andeq	r4, r1, ip, ror #10
   14d34:	muleq	r1, ip, sp
   14d38:	andeq	r4, r1, ip, ror #10
   14d3c:	andeq	r4, r1, ip, lsl #27
   14d40:	mov	r3, #114	; 0x72
   14d44:	b	148a8 <__assert_fail@plt+0x3350>
   14d48:	mov	r3, #102	; 0x66
   14d4c:	b	14778 <__assert_fail@plt+0x3220>
   14d50:	mov	r3, #110	; 0x6e
   14d54:	b	148a8 <__assert_fail@plt+0x3350>
   14d58:	mov	r3, #98	; 0x62
   14d5c:	b	14778 <__assert_fail@plt+0x3220>
   14d60:	mov	r3, #97	; 0x61
   14d64:	b	14778 <__assert_fail@plt+0x3220>
   14d68:	ldr	r3, [sp, #40]	; 0x28
   14d6c:	cmp	r3, #0
   14d70:	bne	14980 <__assert_fail@plt+0x3428>
   14d74:	ldr	r3, [sp, #156]	; 0x9c
   14d78:	tst	r3, #1
   14d7c:	addne	r9, r9, #1
   14d80:	bne	14114 <__assert_fail@plt+0x2bbc>
   14d84:	ldr	r7, [sp, #40]	; 0x28
   14d88:	b	14784 <__assert_fail@plt+0x322c>
   14d8c:	sub	r3, fp, #2
   14d90:	clz	r3, r3
   14d94:	lsr	r3, r3, #5
   14d98:	b	14598 <__assert_fail@plt+0x3040>
   14d9c:	sub	r3, fp, #2
   14da0:	mov	r6, #0
   14da4:	clz	r3, r3
   14da8:	lsr	r3, r3, #5
   14dac:	ldr	r2, [sp, #44]	; 0x2c
   14db0:	tst	r2, r3
   14db4:	beq	145a4 <__assert_fail@plt+0x304c>
   14db8:	b	148c0 <__assert_fail@plt+0x3368>
   14dbc:	sub	r3, fp, #2
   14dc0:	clz	r3, r3
   14dc4:	lsr	r3, r3, #5
   14dc8:	b	14dac <__assert_fail@plt+0x3854>
   14dcc:	ldr	r3, [sp, #52]	; 0x34
   14dd0:	ldrb	r5, [r3]
   14dd4:	cmp	r5, #126	; 0x7e
   14dd8:	ldrls	pc, [pc, r5, lsl #2]
   14ddc:	b	14a88 <__assert_fail@plt+0x3530>
   14de0:	andeq	r4, r1, r0, lsl #19
   14de4:	andeq	r4, r1, r8, lsl #21
   14de8:	andeq	r4, r1, r8, lsl #21
   14dec:	andeq	r4, r1, r8, lsl #21
   14df0:	andeq	r4, r1, r8, lsl #21
   14df4:	andeq	r4, r1, r8, lsl #21
   14df8:	andeq	r4, r1, r8, lsl #21
   14dfc:	andeq	r4, r1, r4, ror #18
   14e00:	andeq	r4, r1, ip, asr r9
   14e04:	andeq	r5, r1, r8, lsl r0
   14e08:	andeq	r4, r1, r0, asr r9
   14e0c:	andeq	r5, r1, ip
   14e10:	andeq	r4, r1, ip, lsr #18
   14e14:	andeq	r4, r1, r8, ror r9
   14e18:	andeq	r4, r1, r8, lsl #21
   14e1c:	andeq	r4, r1, r8, lsl #21
   14e20:	andeq	r4, r1, r8, lsl #21
   14e24:	andeq	r4, r1, r8, lsl #21
   14e28:	andeq	r4, r1, r8, lsl #21
   14e2c:	andeq	r4, r1, r8, lsl #21
   14e30:	andeq	r4, r1, r8, lsl #21
   14e34:	andeq	r4, r1, r8, lsl #21
   14e38:	andeq	r4, r1, r8, lsl #21
   14e3c:	andeq	r4, r1, r8, lsl #21
   14e40:	andeq	r4, r1, r8, lsl #21
   14e44:	andeq	r4, r1, r8, lsl #21
   14e48:	andeq	r4, r1, r8, lsl #21
   14e4c:	andeq	r4, r1, r8, lsl #21
   14e50:	andeq	r4, r1, r8, lsl #21
   14e54:	andeq	r4, r1, r8, lsl #21
   14e58:	andeq	r4, r1, r8, lsl #21
   14e5c:	andeq	r4, r1, r8, lsl #21
   14e60:	andeq	r5, r1, r4
   14e64:	andeq	r4, r1, ip, ror #18
   14e68:	andeq	r4, r1, ip, ror #18
   14e6c:	andeq	r4, r1, r8, ror #31
   14e70:	andeq	r4, r1, ip, ror #18
   14e74:	ldrdeq	r4, [r1], -ip
   14e78:	andeq	r4, r1, ip, ror #18
   14e7c:	andeq	r4, r1, r8, asr #15
   14e80:	andeq	r4, r1, ip, ror #18
   14e84:	andeq	r4, r1, ip, ror #18
   14e88:	andeq	r4, r1, ip, ror #18
   14e8c:	ldrdeq	r4, [r1], -ip
   14e90:	ldrdeq	r4, [r1], -ip
   14e94:	ldrdeq	r4, [r1], -ip
   14e98:	ldrdeq	r4, [r1], -ip
   14e9c:	ldrdeq	r4, [r1], -ip
   14ea0:	ldrdeq	r4, [r1], -ip
   14ea4:	ldrdeq	r4, [r1], -ip
   14ea8:	ldrdeq	r4, [r1], -ip
   14eac:	ldrdeq	r4, [r1], -ip
   14eb0:	ldrdeq	r4, [r1], -ip
   14eb4:	ldrdeq	r4, [r1], -ip
   14eb8:	ldrdeq	r4, [r1], -ip
   14ebc:	ldrdeq	r4, [r1], -ip
   14ec0:	ldrdeq	r4, [r1], -ip
   14ec4:	ldrdeq	r4, [r1], -ip
   14ec8:	ldrdeq	r4, [r1], -ip
   14ecc:	andeq	r4, r1, ip, ror #18
   14ed0:	andeq	r4, r1, ip, ror #18
   14ed4:	andeq	r4, r1, ip, ror #18
   14ed8:	andeq	r4, r1, ip, ror #18
   14edc:	muleq	r1, ip, r7
   14ee0:	andeq	r4, r1, r8, lsl #21
   14ee4:	ldrdeq	r4, [r1], -ip
   14ee8:	ldrdeq	r4, [r1], -ip
   14eec:	ldrdeq	r4, [r1], -ip
   14ef0:	ldrdeq	r4, [r1], -ip
   14ef4:	ldrdeq	r4, [r1], -ip
   14ef8:	ldrdeq	r4, [r1], -ip
   14efc:	ldrdeq	r4, [r1], -ip
   14f00:	ldrdeq	r4, [r1], -ip
   14f04:	ldrdeq	r4, [r1], -ip
   14f08:	ldrdeq	r4, [r1], -ip
   14f0c:	ldrdeq	r4, [r1], -ip
   14f10:	ldrdeq	r4, [r1], -ip
   14f14:	ldrdeq	r4, [r1], -ip
   14f18:	ldrdeq	r4, [r1], -ip
   14f1c:	ldrdeq	r4, [r1], -ip
   14f20:	ldrdeq	r4, [r1], -ip
   14f24:	ldrdeq	r4, [r1], -ip
   14f28:	ldrdeq	r4, [r1], -ip
   14f2c:	ldrdeq	r4, [r1], -ip
   14f30:	ldrdeq	r4, [r1], -ip
   14f34:	ldrdeq	r4, [r1], -ip
   14f38:	ldrdeq	r4, [r1], -ip
   14f3c:	ldrdeq	r4, [r1], -ip
   14f40:	ldrdeq	r4, [r1], -ip
   14f44:	ldrdeq	r4, [r1], -ip
   14f48:	ldrdeq	r4, [r1], -ip
   14f4c:	andeq	r4, r1, ip, ror #18
   14f50:	andeq	r4, r1, r4, asr #14
   14f54:	ldrdeq	r4, [r1], -ip
   14f58:	andeq	r4, r1, ip, ror #18
   14f5c:	ldrdeq	r4, [r1], -ip
   14f60:	andeq	r4, r1, ip, ror #18
   14f64:	ldrdeq	r4, [r1], -ip
   14f68:	ldrdeq	r4, [r1], -ip
   14f6c:	ldrdeq	r4, [r1], -ip
   14f70:	ldrdeq	r4, [r1], -ip
   14f74:	ldrdeq	r4, [r1], -ip
   14f78:	ldrdeq	r4, [r1], -ip
   14f7c:	ldrdeq	r4, [r1], -ip
   14f80:	ldrdeq	r4, [r1], -ip
   14f84:	ldrdeq	r4, [r1], -ip
   14f88:	ldrdeq	r4, [r1], -ip
   14f8c:	ldrdeq	r4, [r1], -ip
   14f90:	ldrdeq	r4, [r1], -ip
   14f94:	ldrdeq	r4, [r1], -ip
   14f98:	ldrdeq	r4, [r1], -ip
   14f9c:	ldrdeq	r4, [r1], -ip
   14fa0:	ldrdeq	r4, [r1], -ip
   14fa4:	ldrdeq	r4, [r1], -ip
   14fa8:	ldrdeq	r4, [r1], -ip
   14fac:	ldrdeq	r4, [r1], -ip
   14fb0:	ldrdeq	r4, [r1], -ip
   14fb4:	ldrdeq	r4, [r1], -ip
   14fb8:	ldrdeq	r4, [r1], -ip
   14fbc:	ldrdeq	r4, [r1], -ip
   14fc0:	ldrdeq	r4, [r1], -ip
   14fc4:	ldrdeq	r4, [r1], -ip
   14fc8:	ldrdeq	r4, [r1], -ip
   14fcc:	andeq	r4, r1, r8, ror #10
   14fd0:	andeq	r4, r1, ip, ror #18
   14fd4:	andeq	r4, r1, r8, ror #10
   14fd8:	andeq	r4, r1, r8, ror #31
   14fdc:	mov	r6, r7
   14fe0:	mov	r7, #0
   14fe4:	b	14794 <__assert_fail@plt+0x323c>
   14fe8:	cmp	r9, #0
   14fec:	mov	r2, #0
   14ff0:	beq	14a58 <__assert_fail@plt+0x3500>
   14ff4:	mov	r6, #0
   14ff8:	mov	r7, r2
   14ffc:	mov	r3, r6
   15000:	b	145b4 <__assert_fail@plt+0x305c>
   15004:	mov	r2, #0
   15008:	b	14a6c <__assert_fail@plt+0x3514>
   1500c:	mov	r7, #0
   15010:	mov	r3, #118	; 0x76
   15014:	b	14778 <__assert_fail@plt+0x3220>
   15018:	mov	r7, #0
   1501c:	mov	r3, #116	; 0x74
   15020:	b	148a8 <__assert_fail@plt+0x3350>
   15024:	ldr	r3, [sp, #44]	; 0x2c
   15028:	b	145dc <__assert_fail@plt+0x3084>
   1502c:	ldr	r3, [sp, #44]	; 0x2c
   15030:	cmp	r3, #0
   15034:	bne	154a4 <__assert_fail@plt+0x3f4c>
   15038:	add	r9, r9, #1
   1503c:	mov	r6, #0
   15040:	ldr	r3, [sp, #48]	; 0x30
   15044:	mov	r5, #92	; 0x5c
   15048:	b	14868 <__assert_fail@plt+0x3310>
   1504c:	ldr	r3, [sp, #32]
   15050:	ldrb	r2, [r3, #1]
   15054:	adds	r2, r2, #0
   15058:	movne	r2, #1
   1505c:	b	14584 <__assert_fail@plt+0x302c>
   15060:	ldr	r3, [sp, #156]	; 0x9c
   15064:	ands	r3, r3, #4
   15068:	beq	15090 <__assert_fail@plt+0x3b38>
   1506c:	ldr	r2, [sp, #28]
   15070:	add	r3, r9, #2
   15074:	cmp	r3, r2
   15078:	bcs	1508c <__assert_fail@plt+0x3b34>
   1507c:	ldr	r2, [sp, #52]	; 0x34
   15080:	ldrb	r5, [r2, #1]
   15084:	cmp	r5, #63	; 0x3f
   15088:	beq	15508 <__assert_fail@plt+0x3fb0>
   1508c:	mov	r3, #0
   15090:	mov	r5, #63	; 0x3f
   15094:	mov	r6, r3
   15098:	b	145a4 <__assert_fail@plt+0x304c>
   1509c:	ldr	r3, [sp, #44]	; 0x2c
   150a0:	cmp	r3, #0
   150a4:	bne	154a4 <__assert_fail@plt+0x3f4c>
   150a8:	mov	r6, r3
   150ac:	mov	r5, #63	; 0x3f
   150b0:	b	145dc <__assert_fail@plt+0x3084>
   150b4:	ldr	r1, [sp, #28]
   150b8:	mov	r2, #0
   150bc:	mov	r3, #0
   150c0:	strd	r2, [sp, #104]	; 0x68
   150c4:	cmn	r1, #1
   150c8:	bne	150d8 <__assert_fail@plt+0x3b80>
   150cc:	ldr	r0, [sp, #32]
   150d0:	bl	11414 <strlen@plt>
   150d4:	str	r0, [sp, #28]
   150d8:	str	r8, [sp, #76]	; 0x4c
   150dc:	mov	r3, #0
   150e0:	str	sl, [sp, #80]	; 0x50
   150e4:	ldr	sl, [sp, #32]
   150e8:	str	r5, [sp, #84]	; 0x54
   150ec:	mov	r5, r3
   150f0:	ldr	r8, [sp, #44]	; 0x2c
   150f4:	str	r7, [sp, #88]	; 0x58
   150f8:	str	r4, [sp, #92]	; 0x5c
   150fc:	ldr	r2, [sp, #28]
   15100:	add	r4, r9, r5
   15104:	add	r3, sp, #104	; 0x68
   15108:	add	r7, sl, r4
   1510c:	add	r0, sp, #100	; 0x64
   15110:	mov	r1, r7
   15114:	sub	r2, r2, r4
   15118:	bl	265ac <__assert_fail@plt+0x15054>
   1511c:	subs	r1, r0, #0
   15120:	beq	1516c <__assert_fail@plt+0x3c14>
   15124:	cmn	r1, #1
   15128:	beq	154e4 <__assert_fail@plt+0x3f8c>
   1512c:	cmn	r1, #2
   15130:	beq	15604 <__assert_fail@plt+0x40ac>
   15134:	cmp	fp, #2
   15138:	movne	r3, #0
   1513c:	andeq	r3, r8, #1
   15140:	cmp	r3, #0
   15144:	bne	152d0 <__assert_fail@plt+0x3d78>
   15148:	ldr	r0, [sp, #100]	; 0x64
   1514c:	add	r5, r5, r1
   15150:	bl	11324 <iswprint@plt>
   15154:	cmp	r0, #0
   15158:	add	r0, sp, #104	; 0x68
   1515c:	moveq	r6, #0
   15160:	bl	11294 <mbsinit@plt>
   15164:	cmp	r0, #0
   15168:	beq	150fc <__assert_fail@plt+0x3ba4>
   1516c:	ldr	r3, [sp, #40]	; 0x28
   15170:	mov	ip, r5
   15174:	eor	r2, r6, #1
   15178:	ldr	r8, [sp, #76]	; 0x4c
   1517c:	ldr	sl, [sp, #80]	; 0x50
   15180:	and	r2, r2, r3
   15184:	ldr	r5, [sp, #84]	; 0x54
   15188:	ldr	r7, [sp, #88]	; 0x58
   1518c:	ldr	r4, [sp, #92]	; 0x5c
   15190:	cmp	ip, #1
   15194:	bls	14ad0 <__assert_fail@plt+0x3578>
   15198:	add	r1, ip, r9
   1519c:	mov	r0, #39	; 0x27
   151a0:	ldr	lr, [sp, #52]	; 0x34
   151a4:	mov	ip, #0
   151a8:	str	r6, [sp, #52]	; 0x34
   151ac:	ldr	r6, [sp, #48]	; 0x30
   151b0:	b	1526c <__assert_fail@plt+0x3d14>
   151b4:	ldr	ip, [sp, #44]	; 0x2c
   151b8:	sub	r3, fp, #2
   151bc:	clz	r3, r3
   151c0:	lsr	r3, r3, #5
   151c4:	cmp	ip, #0
   151c8:	bne	153dc <__assert_fail@plt+0x3e84>
   151cc:	eor	ip, r6, #1
   151d0:	ands	r3, r3, ip
   151d4:	beq	15204 <__assert_fail@plt+0x3cac>
   151d8:	cmp	sl, r4
   151dc:	add	ip, r4, #1
   151e0:	strbhi	r0, [r8, r4]
   151e4:	cmp	sl, ip
   151e8:	movhi	r6, #36	; 0x24
   151ec:	strbhi	r6, [r8, ip]
   151f0:	add	ip, r4, #2
   151f4:	mov	r6, r3
   151f8:	cmp	sl, ip
   151fc:	add	r4, r4, #3
   15200:	strbhi	r0, [r8, ip]
   15204:	cmp	sl, r4
   15208:	movhi	r3, #92	; 0x5c
   1520c:	strbhi	r3, [r8, r4]
   15210:	add	r3, r4, #1
   15214:	cmp	sl, r3
   15218:	bls	15228 <__assert_fail@plt+0x3cd0>
   1521c:	lsr	ip, r5, #6
   15220:	add	ip, ip, #48	; 0x30
   15224:	strb	ip, [r8, r3]
   15228:	add	r3, r4, #2
   1522c:	cmp	sl, r3
   15230:	bls	15240 <__assert_fail@plt+0x3ce8>
   15234:	ubfx	ip, r5, #3, #3
   15238:	add	ip, ip, #48	; 0x30
   1523c:	strb	ip, [r8, r3]
   15240:	add	r9, r9, #1
   15244:	and	r5, r5, #7
   15248:	cmp	r9, r1
   1524c:	add	r5, r5, #48	; 0x30
   15250:	add	r4, r4, #3
   15254:	bcs	15408 <__assert_fail@plt+0x3eb0>
   15258:	mov	ip, r2
   1525c:	cmp	sl, r4
   15260:	strbhi	r5, [r8, r4]
   15264:	add	r4, r4, #1
   15268:	ldrb	r5, [lr, #1]!
   1526c:	cmp	r2, #0
   15270:	bne	151b4 <__assert_fail@plt+0x3c5c>
   15274:	eor	r3, ip, #1
   15278:	cmp	r7, #0
   1527c:	and	r3, r3, r6
   15280:	uxtb	r3, r3
   15284:	beq	15298 <__assert_fail@plt+0x3d40>
   15288:	cmp	sl, r4
   1528c:	movhi	r7, #92	; 0x5c
   15290:	strbhi	r7, [r8, r4]
   15294:	add	r4, r4, #1
   15298:	add	r9, r9, #1
   1529c:	cmp	r9, r1
   152a0:	bcs	153f0 <__assert_fail@plt+0x3e98>
   152a4:	cmp	r3, #0
   152a8:	beq	15428 <__assert_fail@plt+0x3ed0>
   152ac:	cmp	sl, r4
   152b0:	add	r3, r4, #1
   152b4:	mov	r7, #0
   152b8:	strbhi	r0, [r8, r4]
   152bc:	cmp	sl, r3
   152c0:	add	r4, r4, #2
   152c4:	mov	r6, r7
   152c8:	strbhi	r0, [r8, r3]
   152cc:	b	1525c <__assert_fail@plt+0x3d04>
   152d0:	cmp	r1, #1
   152d4:	beq	15148 <__assert_fail@plt+0x3bf0>
   152d8:	add	r2, r4, #1
   152dc:	add	r3, sl, r1
   152e0:	add	r2, sl, r2
   152e4:	add	r4, r3, r4
   152e8:	ldrb	r3, [r2], #1
   152ec:	sub	r3, r3, #91	; 0x5b
   152f0:	cmp	r3, #33	; 0x21
   152f4:	ldrls	pc, [pc, r3, lsl #2]
   152f8:	b	15384 <__assert_fail@plt+0x3e2c>
   152fc:	muleq	r1, r0, r3
   15300:	muleq	r1, r0, r3
   15304:	andeq	r5, r1, r4, lsl #7
   15308:	muleq	r1, r0, r3
   1530c:	andeq	r5, r1, r4, lsl #7
   15310:	muleq	r1, r0, r3
   15314:	andeq	r5, r1, r4, lsl #7
   15318:	andeq	r5, r1, r4, lsl #7
   1531c:	andeq	r5, r1, r4, lsl #7
   15320:	andeq	r5, r1, r4, lsl #7
   15324:	andeq	r5, r1, r4, lsl #7
   15328:	andeq	r5, r1, r4, lsl #7
   1532c:	andeq	r5, r1, r4, lsl #7
   15330:	andeq	r5, r1, r4, lsl #7
   15334:	andeq	r5, r1, r4, lsl #7
   15338:	andeq	r5, r1, r4, lsl #7
   1533c:	andeq	r5, r1, r4, lsl #7
   15340:	andeq	r5, r1, r4, lsl #7
   15344:	andeq	r5, r1, r4, lsl #7
   15348:	andeq	r5, r1, r4, lsl #7
   1534c:	andeq	r5, r1, r4, lsl #7
   15350:	andeq	r5, r1, r4, lsl #7
   15354:	andeq	r5, r1, r4, lsl #7
   15358:	andeq	r5, r1, r4, lsl #7
   1535c:	andeq	r5, r1, r4, lsl #7
   15360:	andeq	r5, r1, r4, lsl #7
   15364:	andeq	r5, r1, r4, lsl #7
   15368:	andeq	r5, r1, r4, lsl #7
   1536c:	andeq	r5, r1, r4, lsl #7
   15370:	andeq	r5, r1, r4, lsl #7
   15374:	andeq	r5, r1, r4, lsl #7
   15378:	andeq	r5, r1, r4, lsl #7
   1537c:	andeq	r5, r1, r4, lsl #7
   15380:	muleq	r1, r0, r3
   15384:	cmp	r4, r2
   15388:	bne	152e8 <__assert_fail@plt+0x3d90>
   1538c:	b	15148 <__assert_fail@plt+0x3bf0>
   15390:	mov	r8, #2
   15394:	ldr	fp, [sp, #76]	; 0x4c
   15398:	ldr	sl, [sp, #80]	; 0x50
   1539c:	b	148c8 <__assert_fail@plt+0x3370>
   153a0:	ldr	r2, [sp, #40]	; 0x28
   153a4:	str	fp, [sp, #152]	; 0x98
   153a8:	mov	fp, r8
   153ac:	ldr	r8, [sp, #152]	; 0x98
   153b0:	and	r2, r2, r3
   153b4:	str	r2, [sp, #40]	; 0x28
   153b8:	b	148c8 <__assert_fail@plt+0x3370>
   153bc:	cmp	sl, r4
   153c0:	movls	r0, r4
   153c4:	bls	149f8 <__assert_fail@plt+0x34a0>
   153c8:	ldr	r3, [sp, #48]	; 0x30
   153cc:	b	149e8 <__assert_fail@plt+0x3490>
   153d0:	str	sl, [sp, #72]	; 0x48
   153d4:	ldr	sl, [sp, #44]	; 0x2c
   153d8:	b	14838 <__assert_fail@plt+0x32e0>
   153dc:	str	r3, [sp, #40]	; 0x28
   153e0:	str	fp, [sp, #152]	; 0x98
   153e4:	mov	fp, r8
   153e8:	ldr	r8, [sp, #152]	; 0x98
   153ec:	b	148c8 <__assert_fail@plt+0x3370>
   153f0:	str	r6, [sp, #48]	; 0x30
   153f4:	ldr	r6, [sp, #52]	; 0x34
   153f8:	b	14868 <__assert_fail@plt+0x3310>
   153fc:	mov	r6, #0
   15400:	ldr	r2, [sp, #40]	; 0x28
   15404:	b	15198 <__assert_fail@plt+0x3c40>
   15408:	str	r6, [sp, #48]	; 0x30
   1540c:	ldr	r6, [sp, #52]	; 0x34
   15410:	b	14654 <__assert_fail@plt+0x30fc>
   15414:	add	r4, r4, #4
   15418:	mov	r6, #0
   1541c:	str	r3, [sp, #48]	; 0x30
   15420:	mov	r5, #48	; 0x30
   15424:	b	145dc <__assert_fail@plt+0x3084>
   15428:	mov	r7, r3
   1542c:	b	1525c <__assert_fail@plt+0x3d04>
   15430:	mov	r3, #1
   15434:	movw	r2, #30512	; 0x7730
   15438:	movt	r2, #2
   1543c:	mov	r4, r3
   15440:	str	r3, [sp, #36]	; 0x24
   15444:	str	r3, [sp, #40]	; 0x28
   15448:	str	sl, [sp, #44]	; 0x2c
   1544c:	str	sl, [sp, #48]	; 0x30
   15450:	str	r3, [sp, #56]	; 0x38
   15454:	str	r2, [sp, #60]	; 0x3c
   15458:	str	sl, [sp, #68]	; 0x44
   1545c:	str	sl, [sp, #72]	; 0x48
   15460:	b	14104 <__assert_fail@plt+0x2bac>
   15464:	mov	r3, r6
   15468:	mov	r5, #48	; 0x30
   1546c:	mov	r6, #0
   15470:	b	145dc <__assert_fail@plt+0x3084>
   15474:	mov	r5, r3
   15478:	b	14954 <__assert_fail@plt+0x33fc>
   1547c:	cmp	sl, r4
   15480:	mov	r5, #48	; 0x30
   15484:	movhi	r3, #48	; 0x30
   15488:	strbhi	r3, [r8, r4]
   1548c:	add	r3, r0, #2
   15490:	add	r4, r0, #3
   15494:	cmp	sl, r3
   15498:	movhi	r1, #48	; 0x30
   1549c:	strbhi	r1, [r8, r3]
   154a0:	b	14a2c <__assert_fail@plt+0x34d4>
   154a4:	str	fp, [sp, #152]	; 0x98
   154a8:	mov	fp, r8
   154ac:	ldr	r8, [sp, #152]	; 0x98
   154b0:	b	148c8 <__assert_fail@plt+0x3370>
   154b4:	ldr	r3, [sp, #164]	; 0xa4
   154b8:	ldrb	r3, [r3]
   154bc:	cmp	r3, #0
   154c0:	beq	140d4 <__assert_fail@plt+0x2b7c>
   154c4:	ldr	r2, [sp, #164]	; 0xa4
   154c8:	cmp	sl, r4
   154cc:	strbhi	r3, [fp, r4]
   154d0:	add	r4, r4, #1
   154d4:	ldrb	r3, [r2, #1]!
   154d8:	cmp	r3, #0
   154dc:	bne	154c8 <__assert_fail@plt+0x3f70>
   154e0:	b	140d4 <__assert_fail@plt+0x2b7c>
   154e4:	mov	ip, r5
   154e8:	mov	r6, #0
   154ec:	ldr	r2, [sp, #40]	; 0x28
   154f0:	ldr	r8, [sp, #76]	; 0x4c
   154f4:	ldr	sl, [sp, #80]	; 0x50
   154f8:	ldr	r5, [sp, #84]	; 0x54
   154fc:	ldr	r7, [sp, #88]	; 0x58
   15500:	ldr	r4, [sp, #92]	; 0x5c
   15504:	b	15190 <__assert_fail@plt+0x3c38>
   15508:	ldr	r2, [sp, #32]
   1550c:	ldrb	r1, [r2, r3]
   15510:	sub	r2, r1, #33	; 0x21
   15514:	cmp	r2, #29
   15518:	ldrls	pc, [pc, r2, lsl #2]
   1551c:	b	155f8 <__assert_fail@plt+0x40a0>
   15520:	muleq	r1, r8, r5
   15524:	strdeq	r5, [r1], -r8
   15528:	strdeq	r5, [r1], -r8
   1552c:	strdeq	r5, [r1], -r8
   15530:	strdeq	r5, [r1], -r8
   15534:	strdeq	r5, [r1], -r8
   15538:	muleq	r1, r8, r5
   1553c:	muleq	r1, r8, r5
   15540:	muleq	r1, r8, r5
   15544:	strdeq	r5, [r1], -r8
   15548:	strdeq	r5, [r1], -r8
   1554c:	strdeq	r5, [r1], -r8
   15550:	muleq	r1, r8, r5
   15554:	strdeq	r5, [r1], -r8
   15558:	muleq	r1, r8, r5
   1555c:	strdeq	r5, [r1], -r8
   15560:	strdeq	r5, [r1], -r8
   15564:	strdeq	r5, [r1], -r8
   15568:	strdeq	r5, [r1], -r8
   1556c:	strdeq	r5, [r1], -r8
   15570:	strdeq	r5, [r1], -r8
   15574:	strdeq	r5, [r1], -r8
   15578:	strdeq	r5, [r1], -r8
   1557c:	strdeq	r5, [r1], -r8
   15580:	strdeq	r5, [r1], -r8
   15584:	strdeq	r5, [r1], -r8
   15588:	strdeq	r5, [r1], -r8
   1558c:	muleq	r1, r8, r5
   15590:	muleq	r1, r8, r5
   15594:	muleq	r1, r8, r5
   15598:	ldr	r2, [sp, #44]	; 0x2c
   1559c:	cmp	r2, #0
   155a0:	bne	156fc <__assert_fail@plt+0x41a4>
   155a4:	cmp	sl, r4
   155a8:	mov	r5, r1
   155ac:	movhi	r2, #63	; 0x3f
   155b0:	mov	r9, r3
   155b4:	strbhi	r2, [r8, r4]
   155b8:	add	r2, r4, #1
   155bc:	cmp	sl, r2
   155c0:	movhi	r0, #34	; 0x22
   155c4:	strbhi	r0, [r8, r2]
   155c8:	add	r2, r4, #2
   155cc:	cmp	sl, r2
   155d0:	movhi	r0, #34	; 0x22
   155d4:	strbhi	r0, [r8, r2]
   155d8:	add	r2, r4, #3
   155dc:	add	r4, r4, #4
   155e0:	cmp	sl, r2
   155e4:	movhi	r0, #63	; 0x3f
   155e8:	strbhi	r0, [r8, r2]
   155ec:	mov	r2, #0
   155f0:	mov	r6, r2
   155f4:	b	14a2c <__assert_fail@plt+0x34d4>
   155f8:	mov	r3, #0
   155fc:	mov	r6, r3
   15600:	b	145a4 <__assert_fail@plt+0x304c>
   15604:	ldr	r0, [sp, #28]
   15608:	mov	r1, r4
   1560c:	mov	r2, r7
   15610:	mov	r3, r5
   15614:	mov	ip, r5
   15618:	ldr	r8, [sp, #76]	; 0x4c
   1561c:	ldr	sl, [sp, #80]	; 0x50
   15620:	cmp	r1, r0
   15624:	ldr	r5, [sp, #84]	; 0x54
   15628:	ldr	r7, [sp, #88]	; 0x58
   1562c:	ldr	r4, [sp, #92]	; 0x5c
   15630:	bcs	15664 <__assert_fail@plt+0x410c>
   15634:	ldrb	r6, [r2]
   15638:	cmp	r6, #0
   1563c:	bne	15650 <__assert_fail@plt+0x40f8>
   15640:	b	15784 <__assert_fail@plt+0x422c>
   15644:	ldrb	r6, [r2, #1]!
   15648:	cmp	r6, #0
   1564c:	beq	1570c <__assert_fail@plt+0x41b4>
   15650:	add	r3, r3, #1
   15654:	add	r1, r9, r3
   15658:	cmp	r1, r0
   1565c:	bcc	15644 <__assert_fail@plt+0x40ec>
   15660:	mov	ip, r3
   15664:	mov	r6, #0
   15668:	ldr	r2, [sp, #40]	; 0x28
   1566c:	b	15190 <__assert_fail@plt+0x3c38>
   15670:	mov	r3, #1
   15674:	mov	r2, #0
   15678:	mov	r4, r2
   1567c:	str	r3, [sp, #36]	; 0x24
   15680:	str	r3, [sp, #40]	; 0x28
   15684:	str	r3, [sp, #44]	; 0x2c
   15688:	str	r2, [sp, #48]	; 0x30
   1568c:	str	r3, [sp, #56]	; 0x38
   15690:	movw	r3, #30512	; 0x7730
   15694:	movt	r3, #2
   15698:	str	r3, [sp, #60]	; 0x3c
   1569c:	str	r2, [sp, #68]	; 0x44
   156a0:	str	r2, [sp, #72]	; 0x48
   156a4:	b	14104 <__assert_fail@plt+0x2bac>
   156a8:	mov	r2, r3
   156ac:	ldr	r3, [sp, #60]	; 0x3c
   156b0:	cmp	r3, #0
   156b4:	moveq	r2, #0
   156b8:	andne	r2, r2, #1
   156bc:	cmp	r2, #0
   156c0:	beq	156ec <__assert_fail@plt+0x4194>
   156c4:	mov	r2, r3
   156c8:	ldrb	r3, [r3]
   156cc:	cmp	r3, #0
   156d0:	beq	156ec <__assert_fail@plt+0x4194>
   156d4:	cmp	sl, r4
   156d8:	strbhi	r3, [fp, r4]
   156dc:	add	r4, r4, #1
   156e0:	ldrb	r3, [r2, #1]!
   156e4:	cmp	r3, #0
   156e8:	bne	156d4 <__assert_fail@plt+0x417c>
   156ec:	cmp	sl, r4
   156f0:	movhi	r3, #0
   156f4:	strbhi	r3, [fp, r4]
   156f8:	b	1490c <__assert_fail@plt+0x33b4>
   156fc:	str	fp, [sp, #152]	; 0x98
   15700:	mov	fp, r8
   15704:	ldr	r8, [sp, #152]	; 0x98
   15708:	b	148d4 <__assert_fail@plt+0x337c>
   1570c:	mov	ip, r3
   15710:	ldr	r2, [sp, #40]	; 0x28
   15714:	b	15190 <__assert_fail@plt+0x3c38>
   15718:	str	fp, [sp, #152]	; 0x98
   1571c:	mov	fp, r8
   15720:	ldr	r8, [sp, #152]	; 0x98
   15724:	sub	r3, r8, #2
   15728:	clz	r3, r3
   1572c:	lsr	r3, r3, #5
   15730:	str	r3, [sp, #40]	; 0x28
   15734:	b	148c8 <__assert_fail@plt+0x3370>
   15738:	mov	ip, #5
   1573c:	ldr	r3, [sp, #28]
   15740:	str	ip, [sp]
   15744:	ldr	r2, [sp, #156]	; 0x9c
   15748:	ldr	ip, [sp, #164]	; 0xa4
   1574c:	ldr	r0, [sp, #160]	; 0xa0
   15750:	str	r2, [sp, #4]
   15754:	ldr	r2, [sp, #32]
   15758:	ldr	r1, [sp, #72]	; 0x48
   1575c:	str	ip, [sp, #12]
   15760:	ldr	ip, [sp, #168]	; 0xa8
   15764:	str	r0, [sp, #8]
   15768:	mov	r0, fp
   1576c:	str	ip, [sp, #16]
   15770:	bl	1401c <__assert_fail@plt+0x2ac4>
   15774:	mov	r4, r0
   15778:	b	1490c <__assert_fail@plt+0x33b4>
   1577c:	mov	r8, #2
   15780:	b	148c8 <__assert_fail@plt+0x3370>
   15784:	ldr	r2, [sp, #40]	; 0x28
   15788:	b	15190 <__assert_fail@plt+0x3c38>
   1578c:	mov	r3, #0
   15790:	mov	r2, #1
   15794:	mov	r4, r3
   15798:	strd	r2, [sp, #36]	; 0x24
   1579c:	strd	r2, [sp, #44]	; 0x2c
   157a0:	str	r2, [sp, #56]	; 0x38
   157a4:	str	r3, [sp, #68]	; 0x44
   157a8:	str	r3, [sp, #72]	; 0x48
   157ac:	movw	r3, #30060	; 0x756c
   157b0:	movt	r3, #2
   157b4:	str	r3, [sp, #60]	; 0x3c
   157b8:	b	14104 <__assert_fail@plt+0x2bac>
   157bc:	mov	r3, #0
   157c0:	mov	r1, #1
   157c4:	mov	r2, r3
   157c8:	str	r1, [sp, #36]	; 0x24
   157cc:	str	r3, [sp, #48]	; 0x30
   157d0:	str	sl, [sp, #72]	; 0x48
   157d4:	b	1470c <__assert_fail@plt+0x31b4>
   157d8:	bl	11534 <abort@plt>
   157dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   157e0:	mov	r4, r0
   157e4:	mov	r5, r3
   157e8:	strd	r6, [sp, #8]
   157ec:	movw	r7, #33128	; 0x8168
   157f0:	movt	r7, #3
   157f4:	strd	r8, [sp, #16]
   157f8:	strd	sl, [sp, #24]
   157fc:	mov	sl, r1
   15800:	mov	fp, r2
   15804:	str	lr, [sp, #32]
   15808:	sub	sp, sp, #60	; 0x3c
   1580c:	bl	1142c <__errno_location@plt>
   15810:	mov	r8, r0
   15814:	cmn	r4, #-2147483647	; 0x80000001
   15818:	ldr	r6, [r7]
   1581c:	movne	r0, #0
   15820:	moveq	r0, #1
   15824:	ldr	r3, [r8]
   15828:	orrs	r0, r0, r4, lsr #31
   1582c:	str	r3, [sp, #28]
   15830:	bne	159c0 <__assert_fail@plt+0x4468>
   15834:	ldr	r3, [r7, #4]
   15838:	cmp	r3, r4
   1583c:	bgt	1589c <__assert_fail@plt+0x4344>
   15840:	add	r1, r7, #8
   15844:	sub	r2, r4, r3
   15848:	str	r3, [sp, #52]	; 0x34
   1584c:	cmp	r6, r1
   15850:	add	r2, r2, #1
   15854:	beq	15998 <__assert_fail@plt+0x4440>
   15858:	mov	r1, #8
   1585c:	mov	r0, r6
   15860:	mvn	r3, #-2147483648	; 0x80000000
   15864:	str	r1, [sp]
   15868:	add	r1, sp, #52	; 0x34
   1586c:	bl	24648 <__assert_fail@plt+0x130f0>
   15870:	mov	r6, r0
   15874:	str	r0, [r7]
   15878:	ldr	r0, [r7, #4]
   1587c:	mov	r1, #0
   15880:	ldr	r2, [sp, #52]	; 0x34
   15884:	sub	r2, r2, r0
   15888:	add	r0, r6, r0, lsl #3
   1588c:	lsl	r2, r2, #3
   15890:	bl	1145c <memset@plt>
   15894:	ldr	r3, [sp, #52]	; 0x34
   15898:	str	r3, [r7, #4]
   1589c:	ldr	r1, [r5, #4]
   158a0:	add	r0, r6, r4, lsl #3
   158a4:	add	ip, r5, #8
   158a8:	mov	r3, fp
   158ac:	mov	r2, sl
   158b0:	ldr	r7, [r0, #4]
   158b4:	str	r0, [sp, #36]	; 0x24
   158b8:	str	ip, [sp, #40]	; 0x28
   158bc:	orr	r0, r1, #1
   158c0:	ldr	r9, [r6, r4, lsl #3]
   158c4:	str	ip, [sp, #8]
   158c8:	ldr	lr, [r5, #44]	; 0x2c
   158cc:	str	r0, [sp, #4]
   158d0:	ldr	ip, [r5]
   158d4:	mov	r1, r9
   158d8:	str	ip, [sp, #32]
   158dc:	ldr	ip, [r5, #40]	; 0x28
   158e0:	str	ip, [sp, #12]
   158e4:	ldr	ip, [sp, #32]
   158e8:	str	lr, [sp, #16]
   158ec:	str	r0, [sp, #44]	; 0x2c
   158f0:	mov	r0, r7
   158f4:	str	ip, [sp]
   158f8:	bl	1401c <__assert_fail@plt+0x2ac4>
   158fc:	cmp	r9, r0
   15900:	bhi	15970 <__assert_fail@plt+0x4418>
   15904:	add	r9, r0, #1
   15908:	movw	r3, #33468	; 0x82bc
   1590c:	movt	r3, #3
   15910:	cmp	r7, r3
   15914:	str	r9, [r6, r4, lsl #3]
   15918:	beq	15924 <__assert_fail@plt+0x43cc>
   1591c:	mov	r0, r7
   15920:	bl	13b9c <__assert_fail@plt+0x2644>
   15924:	mov	r0, r9
   15928:	bl	24498 <__assert_fail@plt+0x12f40>
   1592c:	ldr	ip, [r5]
   15930:	mov	r3, fp
   15934:	mov	r2, sl
   15938:	mov	r1, r9
   1593c:	mov	r7, r0
   15940:	ldr	lr, [sp, #36]	; 0x24
   15944:	ldr	r4, [r5, #40]	; 0x28
   15948:	str	r0, [lr, #4]
   1594c:	ldr	lr, [r5, #44]	; 0x2c
   15950:	str	ip, [sp]
   15954:	ldr	ip, [sp, #44]	; 0x2c
   15958:	str	ip, [sp, #4]
   1595c:	ldr	ip, [sp, #40]	; 0x28
   15960:	str	r4, [sp, #12]
   15964:	str	lr, [sp, #16]
   15968:	str	ip, [sp, #8]
   1596c:	bl	1401c <__assert_fail@plt+0x2ac4>
   15970:	ldr	r3, [sp, #28]
   15974:	mov	r0, r7
   15978:	str	r3, [r8]
   1597c:	add	sp, sp, #60	; 0x3c
   15980:	ldrd	r4, [sp]
   15984:	ldrd	r6, [sp, #8]
   15988:	ldrd	r8, [sp, #16]
   1598c:	ldrd	sl, [sp, #24]
   15990:	add	sp, sp, #32
   15994:	pop	{pc}		; (ldr pc, [sp], #4)
   15998:	mov	r1, #8
   1599c:	mvn	r3, #-2147483648	; 0x80000000
   159a0:	str	r1, [sp]
   159a4:	add	r1, sp, #52	; 0x34
   159a8:	bl	24648 <__assert_fail@plt+0x130f0>
   159ac:	ldrd	r2, [r7, #8]
   159b0:	mov	r6, r0
   159b4:	str	r0, [r7]
   159b8:	strd	r2, [r0]
   159bc:	b	15878 <__assert_fail@plt+0x4320>
   159c0:	bl	11534 <abort@plt>
   159c4:	strd	r4, [sp, #-16]!
   159c8:	mov	r5, r0
   159cc:	str	r6, [sp, #8]
   159d0:	str	lr, [sp, #12]
   159d4:	bl	1142c <__errno_location@plt>
   159d8:	mov	r4, r0
   159dc:	cmp	r5, #0
   159e0:	ldr	r0, [pc, #32]	; 15a08 <__assert_fail@plt+0x44b0>
   159e4:	mov	r1, #48	; 0x30
   159e8:	movne	r0, r5
   159ec:	ldr	r6, [r4]
   159f0:	bl	247c0 <__assert_fail@plt+0x13268>
   159f4:	str	r6, [r4]
   159f8:	ldrd	r4, [sp]
   159fc:	ldr	r6, [sp, #8]
   15a00:	add	sp, sp, #12
   15a04:	pop	{pc}		; (ldr pc, [sp], #4)
   15a08:			; <UNDEFINED> instruction: 0x000383bc
   15a0c:	ldr	r3, [pc, #12]	; 15a20 <__assert_fail@plt+0x44c8>
   15a10:	cmp	r0, #0
   15a14:	moveq	r0, r3
   15a18:	ldr	r0, [r0]
   15a1c:	bx	lr
   15a20:			; <UNDEFINED> instruction: 0x000383bc
   15a24:	ldr	r3, [pc, #12]	; 15a38 <__assert_fail@plt+0x44e0>
   15a28:	cmp	r0, #0
   15a2c:	moveq	r0, r3
   15a30:	str	r1, [r0]
   15a34:	bx	lr
   15a38:			; <UNDEFINED> instruction: 0x000383bc
   15a3c:	ldr	r3, [pc, #52]	; 15a78 <__assert_fail@plt+0x4520>
   15a40:	cmp	r0, #0
   15a44:	push	{lr}		; (str lr, [sp, #-4]!)
   15a48:	lsr	lr, r1, #5
   15a4c:	and	r1, r1, #31
   15a50:	moveq	r0, r3
   15a54:	add	r3, r0, #8
   15a58:	ldr	ip, [r3, lr, lsl #2]
   15a5c:	lsr	r0, ip, r1
   15a60:	eor	r2, r2, r0
   15a64:	and	r0, r0, #1
   15a68:	and	r2, r2, #1
   15a6c:	eor	r1, ip, r2, lsl r1
   15a70:	str	r1, [r3, lr, lsl #2]
   15a74:	pop	{pc}		; (ldr pc, [sp], #4)
   15a78:			; <UNDEFINED> instruction: 0x000383bc
   15a7c:	ldr	r3, [pc, #16]	; 15a94 <__assert_fail@plt+0x453c>
   15a80:	cmp	r0, #0
   15a84:	movne	r3, r0
   15a88:	ldr	r0, [r3, #4]
   15a8c:	str	r1, [r3, #4]
   15a90:	bx	lr
   15a94:			; <UNDEFINED> instruction: 0x000383bc
   15a98:	ldr	r3, [pc, #48]	; 15ad0 <__assert_fail@plt+0x4578>
   15a9c:	cmp	r0, #0
   15aa0:	mov	ip, #10
   15aa4:	moveq	r0, r3
   15aa8:	cmp	r2, #0
   15aac:	cmpne	r1, #0
   15ab0:	str	ip, [r0]
   15ab4:	beq	15ac4 <__assert_fail@plt+0x456c>
   15ab8:	str	r1, [r0, #40]	; 0x28
   15abc:	str	r2, [r0, #44]	; 0x2c
   15ac0:	bx	lr
   15ac4:	str	r4, [sp, #-8]!
   15ac8:	str	lr, [sp, #4]
   15acc:	bl	11534 <abort@plt>
   15ad0:			; <UNDEFINED> instruction: 0x000383bc
   15ad4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15ad8:	strd	r6, [sp, #8]
   15adc:	mov	r7, r0
   15ae0:	mov	r6, r1
   15ae4:	strd	r8, [sp, #16]
   15ae8:	mov	r8, r2
   15aec:	mov	r9, r3
   15af0:	str	lr, [sp, #24]
   15af4:	sub	sp, sp, #28
   15af8:	ldr	r4, [sp, #56]	; 0x38
   15afc:	ldr	ip, [pc, #104]	; 15b6c <__assert_fail@plt+0x4614>
   15b00:	cmp	r4, #0
   15b04:	moveq	r4, ip
   15b08:	bl	1142c <__errno_location@plt>
   15b0c:	ldr	ip, [r4, #44]	; 0x2c
   15b10:	mov	r5, r0
   15b14:	mov	r1, r6
   15b18:	add	lr, r4, #8
   15b1c:	mov	r3, r9
   15b20:	ldr	r6, [r5]
   15b24:	mov	r2, r8
   15b28:	mov	r0, r7
   15b2c:	str	ip, [sp, #16]
   15b30:	ldr	ip, [r4, #40]	; 0x28
   15b34:	str	lr, [sp, #8]
   15b38:	str	ip, [sp, #12]
   15b3c:	ldr	ip, [r4, #4]
   15b40:	str	ip, [sp, #4]
   15b44:	ldr	ip, [r4]
   15b48:	str	ip, [sp]
   15b4c:	bl	1401c <__assert_fail@plt+0x2ac4>
   15b50:	str	r6, [r5]
   15b54:	add	sp, sp, #28
   15b58:	ldrd	r4, [sp]
   15b5c:	ldrd	r6, [sp, #8]
   15b60:	ldrd	r8, [sp, #16]
   15b64:	add	sp, sp, #24
   15b68:	pop	{pc}		; (ldr pc, [sp], #4)
   15b6c:			; <UNDEFINED> instruction: 0x000383bc
   15b70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15b74:	cmp	r3, #0
   15b78:	ldr	r4, [pc, #220]	; 15c5c <__assert_fail@plt+0x4704>
   15b7c:	movne	r4, r3
   15b80:	strd	r6, [sp, #8]
   15b84:	mov	r6, r2
   15b88:	strd	r8, [sp, #16]
   15b8c:	mov	r9, r0
   15b90:	strd	sl, [sp, #24]
   15b94:	mov	sl, r1
   15b98:	str	lr, [sp, #32]
   15b9c:	sub	sp, sp, #44	; 0x2c
   15ba0:	bl	1142c <__errno_location@plt>
   15ba4:	ldr	r5, [r4, #4]
   15ba8:	mov	r7, r0
   15bac:	mov	r1, #0
   15bb0:	add	r8, r4, #8
   15bb4:	mov	r3, sl
   15bb8:	ldr	ip, [r4, #44]	; 0x2c
   15bbc:	mov	r2, r9
   15bc0:	mov	r0, r1
   15bc4:	ldr	lr, [r7]
   15bc8:	cmp	r6, r1
   15bcc:	orreq	r5, r5, #1
   15bd0:	str	ip, [sp, #16]
   15bd4:	ldr	ip, [r4, #40]	; 0x28
   15bd8:	stmib	sp, {r5, r8, ip}
   15bdc:	ldr	ip, [r4]
   15be0:	str	lr, [sp, #28]
   15be4:	str	ip, [sp]
   15be8:	bl	1401c <__assert_fail@plt+0x2ac4>
   15bec:	add	r1, r0, #1
   15bf0:	mov	fp, r0
   15bf4:	mov	r0, r1
   15bf8:	str	r1, [sp, #36]	; 0x24
   15bfc:	bl	24498 <__assert_fail@plt+0x12f40>
   15c00:	ldr	ip, [r4, #44]	; 0x2c
   15c04:	mov	r3, sl
   15c08:	mov	r2, r9
   15c0c:	ldr	r1, [sp, #36]	; 0x24
   15c10:	str	ip, [sp, #16]
   15c14:	ldr	ip, [r4, #40]	; 0x28
   15c18:	str	r0, [sp, #32]
   15c1c:	stmib	sp, {r5, r8, ip}
   15c20:	ldr	ip, [r4]
   15c24:	str	ip, [sp]
   15c28:	bl	1401c <__assert_fail@plt+0x2ac4>
   15c2c:	ldr	lr, [sp, #28]
   15c30:	cmp	r6, #0
   15c34:	ldr	r0, [sp, #32]
   15c38:	str	lr, [r7]
   15c3c:	strne	fp, [r6]
   15c40:	add	sp, sp, #44	; 0x2c
   15c44:	ldrd	r4, [sp]
   15c48:	ldrd	r6, [sp, #8]
   15c4c:	ldrd	r8, [sp, #16]
   15c50:	ldrd	sl, [sp, #24]
   15c54:	add	sp, sp, #32
   15c58:	pop	{pc}		; (ldr pc, [sp], #4)
   15c5c:			; <UNDEFINED> instruction: 0x000383bc
   15c60:	mov	r3, r2
   15c64:	mov	r2, #0
   15c68:	b	15b70 <__assert_fail@plt+0x4618>
   15c6c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15c70:	movw	r5, #33128	; 0x8168
   15c74:	movt	r5, #3
   15c78:	ldr	r3, [r5, #4]
   15c7c:	strd	r6, [sp, #8]
   15c80:	str	r8, [sp, #16]
   15c84:	str	lr, [sp, #20]
   15c88:	ldr	r7, [r5]
   15c8c:	cmp	r3, #1
   15c90:	ble	15cb4 <__assert_fail@plt+0x475c>
   15c94:	mov	r4, #1
   15c98:	add	r6, r7, #4
   15c9c:	ldr	r0, [r6, r4, lsl #3]
   15ca0:	add	r4, r4, #1
   15ca4:	bl	13b9c <__assert_fail@plt+0x2644>
   15ca8:	ldr	r3, [r5, #4]
   15cac:	cmp	r3, r4
   15cb0:	bgt	15c9c <__assert_fail@plt+0x4744>
   15cb4:	ldr	r0, [r7, #4]
   15cb8:	movw	r4, #33468	; 0x82bc
   15cbc:	movt	r4, #3
   15cc0:	cmp	r0, r4
   15cc4:	beq	15cd8 <__assert_fail@plt+0x4780>
   15cc8:	bl	13b9c <__assert_fail@plt+0x2644>
   15ccc:	mov	r3, #256	; 0x100
   15cd0:	str	r3, [r5, #8]
   15cd4:	str	r4, [r5, #12]
   15cd8:	ldr	r4, [pc, #44]	; 15d0c <__assert_fail@plt+0x47b4>
   15cdc:	cmp	r7, r4
   15ce0:	beq	15cf0 <__assert_fail@plt+0x4798>
   15ce4:	mov	r0, r7
   15ce8:	bl	13b9c <__assert_fail@plt+0x2644>
   15cec:	str	r4, [r5]
   15cf0:	mov	r3, #1
   15cf4:	ldrd	r6, [sp, #8]
   15cf8:	str	r3, [r5, #4]
   15cfc:	ldrd	r4, [sp]
   15d00:	ldr	r8, [sp, #16]
   15d04:	add	sp, sp, #20
   15d08:	pop	{pc}		; (ldr pc, [sp], #4)
   15d0c:	andeq	r8, r3, r0, ror r1
   15d10:	ldr	r3, [pc, #4]	; 15d1c <__assert_fail@plt+0x47c4>
   15d14:	mvn	r2, #0
   15d18:	b	157dc <__assert_fail@plt+0x4284>
   15d1c:			; <UNDEFINED> instruction: 0x000383bc
   15d20:	ldr	r3, [pc]	; 15d28 <__assert_fail@plt+0x47d0>
   15d24:	b	157dc <__assert_fail@plt+0x4284>
   15d28:			; <UNDEFINED> instruction: 0x000383bc
   15d2c:	mov	r1, r0
   15d30:	ldr	r3, [pc, #8]	; 15d40 <__assert_fail@plt+0x47e8>
   15d34:	mvn	r2, #0
   15d38:	mov	r0, #0
   15d3c:	b	157dc <__assert_fail@plt+0x4284>
   15d40:			; <UNDEFINED> instruction: 0x000383bc
   15d44:	mov	r2, r1
   15d48:	ldr	r3, [pc, #8]	; 15d58 <__assert_fail@plt+0x4800>
   15d4c:	mov	r1, r0
   15d50:	mov	r0, #0
   15d54:	b	157dc <__assert_fail@plt+0x4284>
   15d58:			; <UNDEFINED> instruction: 0x000383bc
   15d5c:	strd	r4, [sp, #-12]!
   15d60:	mov	r5, r2
   15d64:	mov	r4, r0
   15d68:	str	lr, [sp, #8]
   15d6c:	sub	sp, sp, #52	; 0x34
   15d70:	mov	r0, sp
   15d74:	bl	13e78 <__assert_fail@plt+0x2920>
   15d78:	mov	r3, sp
   15d7c:	mov	r1, r5
   15d80:	mov	r0, r4
   15d84:	mvn	r2, #0
   15d88:	bl	157dc <__assert_fail@plt+0x4284>
   15d8c:	add	sp, sp, #52	; 0x34
   15d90:	ldrd	r4, [sp]
   15d94:	add	sp, sp, #8
   15d98:	pop	{pc}		; (ldr pc, [sp], #4)
   15d9c:	strd	r4, [sp, #-16]!
   15da0:	mov	r5, r2
   15da4:	mov	r4, r0
   15da8:	str	r6, [sp, #8]
   15dac:	mov	r6, r3
   15db0:	str	lr, [sp, #12]
   15db4:	sub	sp, sp, #48	; 0x30
   15db8:	mov	r0, sp
   15dbc:	bl	13e78 <__assert_fail@plt+0x2920>
   15dc0:	mov	r3, sp
   15dc4:	mov	r2, r6
   15dc8:	mov	r1, r5
   15dcc:	mov	r0, r4
   15dd0:	bl	157dc <__assert_fail@plt+0x4284>
   15dd4:	add	sp, sp, #48	; 0x30
   15dd8:	ldrd	r4, [sp]
   15ddc:	ldr	r6, [sp, #8]
   15de0:	add	sp, sp, #12
   15de4:	pop	{pc}		; (ldr pc, [sp], #4)
   15de8:	mov	r2, r1
   15dec:	mov	r1, r0
   15df0:	mov	r0, #0
   15df4:	b	15d5c <__assert_fail@plt+0x4804>
   15df8:	mov	r3, r2
   15dfc:	mov	r2, r1
   15e00:	mov	r1, r0
   15e04:	mov	r0, #0
   15e08:	b	15d9c <__assert_fail@plt+0x4844>
   15e0c:	ldr	ip, [pc, #140]	; 15ea0 <__assert_fail@plt+0x4948>
   15e10:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15e14:	ldrd	r4, [ip]
   15e18:	strd	r6, [sp, #8]
   15e1c:	ldrd	r6, [ip, #8]
   15e20:	strd	r8, [sp, #16]
   15e24:	lsr	r9, r2, #5
   15e28:	str	lr, [sp, #24]
   15e2c:	sub	sp, sp, #52	; 0x34
   15e30:	and	lr, r2, #31
   15e34:	add	r8, sp, #8
   15e38:	mov	r2, r1
   15e3c:	strd	r4, [sp]
   15e40:	mov	r1, r0
   15e44:	mov	r3, sp
   15e48:	strd	r6, [sp, #8]
   15e4c:	mov	r0, #0
   15e50:	ldrd	r4, [ip, #16]
   15e54:	ldrd	r6, [ip, #24]
   15e58:	strd	r4, [sp, #16]
   15e5c:	ldrd	r4, [ip, #32]
   15e60:	strd	r6, [sp, #24]
   15e64:	ldrd	r6, [ip, #40]	; 0x28
   15e68:	strd	r4, [sp, #32]
   15e6c:	strd	r6, [sp, #40]	; 0x28
   15e70:	ldr	ip, [r8, r9, lsl #2]
   15e74:	mvn	r4, ip, lsr lr
   15e78:	and	r4, r4, #1
   15e7c:	eor	lr, ip, r4, lsl lr
   15e80:	str	lr, [r8, r9, lsl #2]
   15e84:	bl	157dc <__assert_fail@plt+0x4284>
   15e88:	add	sp, sp, #52	; 0x34
   15e8c:	ldrd	r4, [sp]
   15e90:	ldrd	r6, [sp, #8]
   15e94:	ldrd	r8, [sp, #16]
   15e98:	add	sp, sp, #24
   15e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   15ea0:			; <UNDEFINED> instruction: 0x000383bc
   15ea4:	mov	r2, r1
   15ea8:	mvn	r1, #0
   15eac:	b	15e0c <__assert_fail@plt+0x48b4>
   15eb0:	mov	r2, #58	; 0x3a
   15eb4:	mvn	r1, #0
   15eb8:	b	15e0c <__assert_fail@plt+0x48b4>
   15ebc:	mov	r2, #58	; 0x3a
   15ec0:	b	15e0c <__assert_fail@plt+0x48b4>
   15ec4:	strd	r4, [sp, #-20]!	; 0xffffffec
   15ec8:	strd	r6, [sp, #8]
   15ecc:	mov	r6, r0
   15ed0:	mov	r7, r2
   15ed4:	str	lr, [sp, #16]
   15ed8:	sub	sp, sp, #100	; 0x64
   15edc:	mov	r0, sp
   15ee0:	bl	13e78 <__assert_fail@plt+0x2920>
   15ee4:	ldrd	r4, [sp, #8]
   15ee8:	mov	r1, r7
   15eec:	mov	r0, r6
   15ef0:	add	r3, sp, #48	; 0x30
   15ef4:	mvn	r2, #0
   15ef8:	ldrd	r6, [sp]
   15efc:	strd	r4, [sp, #56]	; 0x38
   15f00:	ldrd	r4, [sp, #16]
   15f04:	strd	r6, [sp, #48]	; 0x30
   15f08:	ldrd	r6, [sp, #32]
   15f0c:	ldr	lr, [sp, #60]	; 0x3c
   15f10:	strd	r4, [sp, #64]	; 0x40
   15f14:	ldrd	r4, [sp, #24]
   15f18:	mvn	ip, lr
   15f1c:	and	ip, ip, #67108864	; 0x4000000
   15f20:	strd	r4, [sp, #72]	; 0x48
   15f24:	eor	ip, ip, lr
   15f28:	ldrd	r4, [sp, #40]	; 0x28
   15f2c:	str	ip, [sp, #60]	; 0x3c
   15f30:	strd	r6, [sp, #80]	; 0x50
   15f34:	strd	r4, [sp, #88]	; 0x58
   15f38:	bl	157dc <__assert_fail@plt+0x4284>
   15f3c:	add	sp, sp, #100	; 0x64
   15f40:	ldrd	r4, [sp]
   15f44:	ldrd	r6, [sp, #8]
   15f48:	add	sp, sp, #16
   15f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f50:	ldr	ip, [pc, #156]	; 15ff4 <__assert_fail@plt+0x4a9c>
   15f54:	cmp	r2, #0
   15f58:	cmpne	r1, #0
   15f5c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15f60:	strd	r6, [sp, #8]
   15f64:	mov	r6, r2
   15f68:	str	r8, [sp, #16]
   15f6c:	mov	r8, r3
   15f70:	strd	sl, [sp, #20]
   15f74:	ldrd	r4, [ip]
   15f78:	str	lr, [sp, #28]
   15f7c:	sub	sp, sp, #48	; 0x30
   15f80:	mov	lr, #10
   15f84:	ldrd	r2, [ip, #8]
   15f88:	ldrd	sl, [ip, #16]
   15f8c:	strd	r4, [sp]
   15f90:	ldrd	r4, [ip, #32]
   15f94:	str	lr, [sp]
   15f98:	strd	r2, [sp, #8]
   15f9c:	strd	sl, [sp, #16]
   15fa0:	ldrd	r2, [ip, #24]
   15fa4:	ldrd	sl, [ip, #40]	; 0x28
   15fa8:	strd	r2, [sp, #24]
   15fac:	strd	r4, [sp, #32]
   15fb0:	strd	sl, [sp, #40]	; 0x28
   15fb4:	beq	15ff0 <__assert_fail@plt+0x4a98>
   15fb8:	ldr	r2, [sp, #80]	; 0x50
   15fbc:	mov	r7, r1
   15fc0:	mov	r3, sp
   15fc4:	mov	r1, r8
   15fc8:	str	r7, [sp, #40]	; 0x28
   15fcc:	str	r6, [sp, #44]	; 0x2c
   15fd0:	bl	157dc <__assert_fail@plt+0x4284>
   15fd4:	add	sp, sp, #48	; 0x30
   15fd8:	ldrd	r4, [sp]
   15fdc:	ldrd	r6, [sp, #8]
   15fe0:	ldr	r8, [sp, #16]
   15fe4:	ldrd	sl, [sp, #20]
   15fe8:	add	sp, sp, #28
   15fec:	pop	{pc}		; (ldr pc, [sp], #4)
   15ff0:	bl	11534 <abort@plt>
   15ff4:			; <UNDEFINED> instruction: 0x000383bc
   15ff8:	mvn	ip, #0
   15ffc:	push	{lr}		; (str lr, [sp, #-4]!)
   16000:	sub	sp, sp, #12
   16004:	str	ip, [sp]
   16008:	bl	15f50 <__assert_fail@plt+0x49f8>
   1600c:	add	sp, sp, #12
   16010:	pop	{pc}		; (ldr pc, [sp], #4)
   16014:	mvn	ip, #0
   16018:	push	{lr}		; (str lr, [sp, #-4]!)
   1601c:	sub	sp, sp, #12
   16020:	mov	r3, r2
   16024:	mov	r2, r1
   16028:	mov	r1, r0
   1602c:	mov	r0, #0
   16030:	str	ip, [sp]
   16034:	bl	15f50 <__assert_fail@plt+0x49f8>
   16038:	add	sp, sp, #12
   1603c:	pop	{pc}		; (ldr pc, [sp], #4)
   16040:	push	{lr}		; (str lr, [sp, #-4]!)
   16044:	sub	sp, sp, #12
   16048:	str	r3, [sp]
   1604c:	mov	r3, r2
   16050:	mov	r2, r1
   16054:	mov	r1, r0
   16058:	mov	r0, #0
   1605c:	bl	15f50 <__assert_fail@plt+0x49f8>
   16060:	add	sp, sp, #12
   16064:	pop	{pc}		; (ldr pc, [sp], #4)
   16068:	ldr	r3, [pc]	; 16070 <__assert_fail@plt+0x4b18>
   1606c:	b	157dc <__assert_fail@plt+0x4284>
   16070:	andeq	r8, r3, r8, ror r1
   16074:	mov	r2, r1
   16078:	ldr	r3, [pc, #8]	; 16088 <__assert_fail@plt+0x4b30>
   1607c:	mov	r1, r0
   16080:	mov	r0, #0
   16084:	b	157dc <__assert_fail@plt+0x4284>
   16088:	andeq	r8, r3, r8, ror r1
   1608c:	ldr	r3, [pc, #4]	; 16098 <__assert_fail@plt+0x4b40>
   16090:	mvn	r2, #0
   16094:	b	157dc <__assert_fail@plt+0x4284>
   16098:	andeq	r8, r3, r8, ror r1
   1609c:	mov	r1, r0
   160a0:	ldr	r3, [pc, #8]	; 160b0 <__assert_fail@plt+0x4b58>
   160a4:	mvn	r2, #0
   160a8:	mov	r0, #0
   160ac:	b	157dc <__assert_fail@plt+0x4284>
   160b0:	andeq	r8, r3, r8, ror r1
   160b4:	clz	r3, r1
   160b8:	cmp	r0, #0
   160bc:	push	{lr}		; (str lr, [sp, #-4]!)
   160c0:	lsr	r3, r3, #5
   160c4:	mov	lr, r0
   160c8:	moveq	r0, #1
   160cc:	movne	r0, r3
   160d0:	cmp	r0, #0
   160d4:	movne	r0, #0
   160d8:	bne	160ec <__assert_fail@plt+0x4b94>
   160dc:	ldr	r2, [r1, #4]
   160e0:	ldr	r3, [lr, #4]
   160e4:	cmp	r3, r2
   160e8:	beq	16108 <__assert_fail@plt+0x4bb0>
   160ec:	pop	{pc}		; (ldr pc, [sp], #4)
   160f0:	ldr	r2, [r1, #8]
   160f4:	ldr	ip, [lr, #8]
   160f8:	ldr	r2, [r2, r3, lsl #2]
   160fc:	ldr	ip, [ip, r3, lsl #2]
   16100:	cmp	ip, r2
   16104:	bne	160ec <__assert_fail@plt+0x4b94>
   16108:	subs	r3, r3, #1
   1610c:	bpl	160f0 <__assert_fail@plt+0x4b98>
   16110:	mov	r0, #1
   16114:	pop	{pc}		; (ldr pc, [sp], #4)
   16118:	strd	r4, [sp, #-16]!
   1611c:	mov	r4, r0
   16120:	mov	r5, r2
   16124:	str	r6, [sp, #8]
   16128:	mov	r6, r1
   1612c:	str	lr, [sp, #12]
   16130:	b	16138 <__assert_fail@plt+0x4be0>
   16134:	mov	r4, r3
   16138:	ldr	r3, [r4, #4]
   1613c:	cmp	r3, #0
   16140:	bne	16134 <__assert_fail@plt+0x4bdc>
   16144:	ldr	r3, [r4, #8]
   16148:	cmp	r3, #0
   1614c:	bne	16134 <__assert_fail@plt+0x4bdc>
   16150:	b	16188 <__assert_fail@plt+0x4c30>
   16154:	ldr	r2, [r4]
   16158:	cmp	r2, #0
   1615c:	beq	1619c <__assert_fail@plt+0x4c44>
   16160:	ldr	r3, [r2, #8]
   16164:	sub	r1, r3, r4
   16168:	cmp	r3, #0
   1616c:	clz	r1, r1
   16170:	mov	r4, r2
   16174:	lsr	r1, r1, #5
   16178:	moveq	r2, #1
   1617c:	movne	r2, r1
   16180:	cmp	r2, #0
   16184:	beq	16134 <__assert_fail@plt+0x4bdc>
   16188:	mov	r1, r4
   1618c:	mov	r0, r5
   16190:	blx	r6
   16194:	cmp	r0, #0
   16198:	beq	16154 <__assert_fail@plt+0x4bfc>
   1619c:	ldrd	r4, [sp]
   161a0:	ldr	r6, [sp, #8]
   161a4:	add	sp, sp, #12
   161a8:	pop	{pc}		; (ldr pc, [sp], #4)
   161ac:	ldr	r3, [r1, #40]	; 0x28
   161b0:	ldr	ip, [r1, #56]	; 0x38
   161b4:	cmp	ip, r3
   161b8:	ble	1627c <__assert_fail@plt+0x4d24>
   161bc:	str	r4, [sp, #-8]!
   161c0:	ldr	r4, [r1, #80]	; 0x50
   161c4:	str	lr, [sp, #4]
   161c8:	ldr	lr, [r1, #4]
   161cc:	cmp	r4, #1
   161d0:	ldrb	ip, [lr, r3]
   161d4:	strb	ip, [r0]
   161d8:	ble	161f8 <__assert_fail@plt+0x4ca0>
   161dc:	ldr	r4, [r1, #28]
   161e0:	cmp	r3, r4
   161e4:	beq	161f8 <__assert_fail@plt+0x4ca0>
   161e8:	ldr	r4, [r1, #8]
   161ec:	ldr	r4, [r4, r3, lsl #2]
   161f0:	cmn	r4, #1
   161f4:	beq	1623c <__assert_fail@plt+0x4ce4>
   161f8:	cmp	ip, #92	; 0x5c
   161fc:	beq	16234 <__assert_fail@plt+0x4cdc>
   16200:	cmp	ip, #91	; 0x5b
   16204:	beq	162bc <__assert_fail@plt+0x4d64>
   16208:	cmp	ip, #93	; 0x5d
   1620c:	beq	16314 <__assert_fail@plt+0x4dbc>
   16210:	cmp	ip, #94	; 0x5e
   16214:	bne	16258 <__assert_fail@plt+0x4d00>
   16218:	mov	r2, #25
   1621c:	mov	r3, #1
   16220:	ldr	r4, [sp]
   16224:	add	sp, sp, #4
   16228:	strb	r2, [r0, #4]
   1622c:	mov	r0, r3
   16230:	pop	{pc}		; (ldr pc, [sp], #4)
   16234:	tst	r2, #1
   16238:	bne	16290 <__assert_fail@plt+0x4d38>
   1623c:	mov	r2, #1
   16240:	mov	r3, r2
   16244:	strb	r2, [r0, #4]
   16248:	ldr	r4, [sp]
   1624c:	add	sp, sp, #4
   16250:	mov	r0, r3
   16254:	pop	{pc}		; (ldr pc, [sp], #4)
   16258:	cmp	ip, #45	; 0x2d
   1625c:	bne	1623c <__assert_fail@plt+0x4ce4>
   16260:	mov	r2, #22
   16264:	mov	r3, #1
   16268:	ldr	r4, [sp]
   1626c:	add	sp, sp, #4
   16270:	strb	r2, [r0, #4]
   16274:	mov	r0, r3
   16278:	pop	{pc}		; (ldr pc, [sp], #4)
   1627c:	mov	r2, #2
   16280:	mov	r3, #0
   16284:	strb	r2, [r0, #4]
   16288:	mov	r0, r3
   1628c:	bx	lr
   16290:	ldr	r2, [r1, #48]	; 0x30
   16294:	add	r3, r3, #1
   16298:	cmp	r3, r2
   1629c:	bge	1623c <__assert_fail@plt+0x4ce4>
   162a0:	str	r3, [r1, #40]	; 0x28
   162a4:	mov	r2, #1
   162a8:	ldrb	r1, [lr, r3]
   162ac:	mov	r3, r2
   162b0:	strb	r1, [r0]
   162b4:	strb	r2, [r0, #4]
   162b8:	b	16248 <__assert_fail@plt+0x4cf0>
   162bc:	ldr	r1, [r1, #48]	; 0x30
   162c0:	add	ip, r3, #1
   162c4:	cmp	ip, r1
   162c8:	bge	162fc <__assert_fail@plt+0x4da4>
   162cc:	add	r3, lr, r3
   162d0:	ldrb	r3, [r3, #1]
   162d4:	cmp	r3, #58	; 0x3a
   162d8:	strb	r3, [r0]
   162dc:	beq	16340 <__assert_fail@plt+0x4de8>
   162e0:	cmp	r3, #61	; 0x3d
   162e4:	beq	16330 <__assert_fail@plt+0x4dd8>
   162e8:	cmp	r3, #46	; 0x2e
   162ec:	moveq	r2, #26
   162f0:	moveq	r3, #2
   162f4:	strbeq	r2, [r0, #4]
   162f8:	beq	16248 <__assert_fail@plt+0x4cf0>
   162fc:	mov	r2, #1
   16300:	mov	r1, #91	; 0x5b
   16304:	mov	r3, r2
   16308:	strb	r1, [r0]
   1630c:	strb	r2, [r0, #4]
   16310:	b	16248 <__assert_fail@plt+0x4cf0>
   16314:	mov	r2, #21
   16318:	mov	r3, #1
   1631c:	ldr	r4, [sp]
   16320:	add	sp, sp, #4
   16324:	strb	r2, [r0, #4]
   16328:	mov	r0, r3
   1632c:	pop	{pc}		; (ldr pc, [sp], #4)
   16330:	mov	r2, #28
   16334:	mov	r3, #2
   16338:	strb	r2, [r0, #4]
   1633c:	b	16248 <__assert_fail@plt+0x4cf0>
   16340:	tst	r2, #4
   16344:	beq	162fc <__assert_fail@plt+0x4da4>
   16348:	mov	r2, #30
   1634c:	mov	r3, #2
   16350:	strb	r2, [r0, #4]
   16354:	b	16248 <__assert_fail@plt+0x4cf0>
   16358:	ldrb	r3, [r1, #24]
   1635c:	cmp	r3, #17
   16360:	beq	1636c <__assert_fail@plt+0x4e14>
   16364:	mov	r0, #0
   16368:	bx	lr
   1636c:	ldr	r3, [r1, #20]
   16370:	cmp	r0, r3
   16374:	bne	16364 <__assert_fail@plt+0x4e0c>
   16378:	ldrb	r3, [r1, #26]
   1637c:	mov	r0, #0
   16380:	orr	r3, r3, #8
   16384:	strb	r3, [r1, #26]
   16388:	bx	lr
   1638c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16390:	strd	r6, [sp, #8]
   16394:	strd	r8, [sp, #16]
   16398:	ldr	r8, [r0, #84]	; 0x54
   1639c:	strd	sl, [sp, #24]
   163a0:	mov	fp, r1
   163a4:	str	lr, [sp, #32]
   163a8:	sub	sp, sp, #44	; 0x2c
   163ac:	str	r3, [sp, #24]
   163b0:	add	r3, r3, r3, lsl #1
   163b4:	ldr	r9, [r8, #24]
   163b8:	add	r9, r9, r3, lsl #2
   163bc:	ldr	r1, [r9, #4]
   163c0:	cmp	r1, #0
   163c4:	ble	16570 <__assert_fail@plt+0x5018>
   163c8:	ldr	r3, [sp, #80]	; 0x50
   163cc:	mov	r7, r2
   163d0:	mov	r2, #1
   163d4:	mov	sl, r0
   163d8:	mov	r4, #0
   163dc:	add	r3, r3, r2
   163e0:	lsl	r2, r2, r7
   163e4:	add	r3, r3, r3, lsl #1
   163e8:	str	r2, [sp, #12]
   163ec:	str	r3, [sp, #28]
   163f0:	mvn	r3, r2
   163f4:	str	r3, [sp, #16]
   163f8:	b	16410 <__assert_fail@plt+0x4eb8>
   163fc:	cmp	r3, #4
   16400:	beq	16484 <__assert_fail@plt+0x4f2c>
   16404:	add	r4, r4, #1
   16408:	cmp	r1, r4
   1640c:	ble	16570 <__assert_fail@plt+0x5018>
   16410:	ldr	r3, [r9, #8]
   16414:	ldr	r2, [r8]
   16418:	ldr	r5, [r3, r4, lsl #2]
   1641c:	add	r3, r2, r5, lsl #3
   16420:	ldrb	r3, [r3, #4]
   16424:	cmp	r3, #8
   16428:	beq	16450 <__assert_fail@plt+0x4ef8>
   1642c:	cmp	r3, #9
   16430:	bne	163fc <__assert_fail@plt+0x4ea4>
   16434:	tst	fp, #2
   16438:	beq	16404 <__assert_fail@plt+0x4eac>
   1643c:	ldr	r3, [r2, r5, lsl #3]
   16440:	cmp	r3, r7
   16444:	bne	16404 <__assert_fail@plt+0x4eac>
   16448:	mov	r0, #0
   1644c:	b	16468 <__assert_fail@plt+0x4f10>
   16450:	tst	fp, #1
   16454:	beq	16404 <__assert_fail@plt+0x4eac>
   16458:	ldr	r3, [r2, r5, lsl #3]
   1645c:	cmp	r3, r7
   16460:	bne	16404 <__assert_fail@plt+0x4eac>
   16464:	mvn	r0, #0
   16468:	add	sp, sp, #44	; 0x2c
   1646c:	ldrd	r4, [sp]
   16470:	ldrd	r6, [sp, #8]
   16474:	ldrd	r8, [sp, #16]
   16478:	ldrd	sl, [sp, #24]
   1647c:	add	sp, sp, #32
   16480:	pop	{pc}		; (ldr pc, [sp], #4)
   16484:	ldr	r3, [sp, #80]	; 0x50
   16488:	cmn	r3, #1
   1648c:	beq	16404 <__assert_fail@plt+0x4eac>
   16490:	and	r2, fp, #2
   16494:	ldr	r6, [sl, #116]	; 0x74
   16498:	add	r3, r5, r5, lsl #1
   1649c:	str	r2, [sp, #20]
   164a0:	lsl	r3, r3, #2
   164a4:	ldr	r2, [sp, #28]
   164a8:	str	r9, [sp, #32]
   164ac:	mov	r9, r3
   164b0:	str	r4, [sp, #36]	; 0x24
   164b4:	ldr	r4, [sp, #24]
   164b8:	add	r6, r6, r2, lsl #3
   164bc:	ldr	r3, [r6, #-24]	; 0xffffffe8
   164c0:	mov	r2, r7
   164c4:	mov	r1, fp
   164c8:	mov	r0, sl
   164cc:	cmp	r3, r5
   164d0:	bne	16548 <__assert_fail@plt+0x4ff0>
   164d4:	cmp	r7, #31
   164d8:	bgt	164ec <__assert_fail@plt+0x4f94>
   164dc:	ldr	r3, [r6, #-8]
   164e0:	ldr	ip, [sp, #12]
   164e4:	tst	ip, r3
   164e8:	beq	16548 <__assert_fail@plt+0x4ff0>
   164ec:	ldr	r3, [r8, #20]
   164f0:	add	r3, r3, r9
   164f4:	ldr	r3, [r3, #8]
   164f8:	ldr	ip, [r3]
   164fc:	cmp	r4, ip
   16500:	mov	r3, ip
   16504:	beq	16578 <__assert_fail@plt+0x5020>
   16508:	ldr	ip, [sp, #80]	; 0x50
   1650c:	str	ip, [sp]
   16510:	bl	1638c <__assert_fail@plt+0x4e34>
   16514:	cmn	r0, #1
   16518:	beq	16464 <__assert_fail@plt+0x4f0c>
   1651c:	cmp	r0, #0
   16520:	bne	16530 <__assert_fail@plt+0x4fd8>
   16524:	ldr	r3, [sp, #20]
   16528:	cmp	r3, #0
   1652c:	bne	16448 <__assert_fail@plt+0x4ef0>
   16530:	cmp	r7, #31
   16534:	bgt	16548 <__assert_fail@plt+0x4ff0>
   16538:	ldr	r3, [r6, #-8]
   1653c:	ldr	r2, [sp, #16]
   16540:	and	r3, r3, r2
   16544:	str	r3, [r6, #-8]
   16548:	add	r6, r6, #24
   1654c:	ldrb	r3, [r6, #-28]	; 0xffffffe4
   16550:	cmp	r3, #0
   16554:	bne	164bc <__assert_fail@plt+0x4f64>
   16558:	ldr	r9, [sp, #32]
   1655c:	ldr	r4, [sp, #36]	; 0x24
   16560:	ldr	r1, [r9, #4]
   16564:	add	r4, r4, #1
   16568:	cmp	r1, r4
   1656c:	bgt	16410 <__assert_fail@plt+0x4eb8>
   16570:	asr	r0, fp, #1
   16574:	b	16468 <__assert_fail@plt+0x4f10>
   16578:	sbfx	r0, fp, #0, #1
   1657c:	b	16468 <__assert_fail@plt+0x4f10>
   16580:	ldr	ip, [r0, #116]	; 0x74
   16584:	add	r1, r1, r1, lsl #1
   16588:	strd	r4, [sp, #-12]!
   1658c:	ldr	r5, [sp, #16]
   16590:	add	r1, ip, r1, lsl #3
   16594:	ldr	ip, [r1, #8]
   16598:	str	lr, [sp, #8]
   1659c:	ldr	lr, [sp, #12]
   165a0:	cmp	ip, lr
   165a4:	bgt	16608 <__assert_fail@plt+0x50b0>
   165a8:	ldr	r4, [r1, #12]
   165ac:	cmp	r4, lr
   165b0:	blt	165f8 <__assert_fail@plt+0x50a0>
   165b4:	sub	r1, ip, lr
   165b8:	cmp	r4, lr
   165bc:	clz	r1, r1
   165c0:	lsr	r1, r1, #5
   165c4:	beq	165e0 <__assert_fail@plt+0x5088>
   165c8:	cmp	ip, lr
   165cc:	movne	r0, #0
   165d0:	beq	165e4 <__assert_fail@plt+0x508c>
   165d4:	ldrd	r4, [sp]
   165d8:	add	sp, sp, #8
   165dc:	pop	{pc}		; (ldr pc, [sp], #4)
   165e0:	orr	r1, r1, #2
   165e4:	str	r5, [sp, #12]
   165e8:	ldrd	r4, [sp]
   165ec:	ldr	lr, [sp, #8]
   165f0:	add	sp, sp, #12
   165f4:	b	1638c <__assert_fail@plt+0x4e34>
   165f8:	ldrd	r4, [sp]
   165fc:	add	sp, sp, #8
   16600:	mov	r0, #1
   16604:	pop	{pc}		; (ldr pc, [sp], #4)
   16608:	mvn	r0, #0
   1660c:	b	165d4 <__assert_fail@plt+0x507c>
   16610:	ldr	r3, [r0, #80]	; 0x50
   16614:	strd	r4, [sp, #-16]!
   16618:	mov	r4, r0
   1661c:	mov	r5, r1
   16620:	str	r6, [sp, #8]
   16624:	str	lr, [sp, #12]
   16628:	cmp	r3, #1
   1662c:	ble	16674 <__assert_fail@plt+0x511c>
   16630:	cmn	r1, #-1073741823	; 0xc0000001
   16634:	bhi	166b4 <__assert_fail@plt+0x515c>
   16638:	lsl	r6, r1, #2
   1663c:	ldr	r0, [r0, #8]
   16640:	mov	r1, r6
   16644:	bl	261cc <__assert_fail@plt+0x14c74>
   16648:	subs	r3, r0, #0
   1664c:	beq	166b4 <__assert_fail@plt+0x515c>
   16650:	ldr	r0, [r4, #12]
   16654:	str	r3, [r4, #8]
   16658:	cmp	r0, #0
   1665c:	beq	16674 <__assert_fail@plt+0x511c>
   16660:	mov	r1, r6
   16664:	bl	261cc <__assert_fail@plt+0x14c74>
   16668:	cmp	r0, #0
   1666c:	beq	166b4 <__assert_fail@plt+0x515c>
   16670:	str	r0, [r4, #12]
   16674:	ldrb	r3, [r4, #75]	; 0x4b
   16678:	cmp	r3, #0
   1667c:	bne	16698 <__assert_fail@plt+0x5140>
   16680:	str	r5, [r4, #36]	; 0x24
   16684:	mov	r0, #0
   16688:	ldrd	r4, [sp]
   1668c:	ldr	r6, [sp, #8]
   16690:	add	sp, sp, #12
   16694:	pop	{pc}		; (ldr pc, [sp], #4)
   16698:	mov	r1, r5
   1669c:	ldr	r0, [r4, #4]
   166a0:	bl	261cc <__assert_fail@plt+0x14c74>
   166a4:	cmp	r0, #0
   166a8:	beq	166b4 <__assert_fail@plt+0x515c>
   166ac:	str	r0, [r4, #4]
   166b0:	b	16680 <__assert_fail@plt+0x5128>
   166b4:	ldrd	r4, [sp]
   166b8:	mov	r0, #12
   166bc:	ldr	r6, [sp, #8]
   166c0:	add	sp, sp, #12
   166c4:	pop	{pc}		; (ldr pc, [sp], #4)
   166c8:	strd	r4, [sp, #-16]!
   166cc:	mov	r5, r1
   166d0:	mov	r4, r0
   166d4:	ldr	r2, [r0]
   166d8:	ldmib	r0, {r1, r3}
   166dc:	str	r6, [sp, #8]
   166e0:	str	lr, [sp, #12]
   166e4:	cmp	r2, r1
   166e8:	beq	1670c <__assert_fail@plt+0x51b4>
   166ec:	add	r2, r1, #1
   166f0:	mov	r0, #1
   166f4:	str	r2, [r4, #4]
   166f8:	str	r5, [r3, r1, lsl #2]
   166fc:	ldrd	r4, [sp]
   16700:	ldr	r6, [sp, #8]
   16704:	add	sp, sp, #12
   16708:	pop	{pc}		; (ldr pc, [sp], #4)
   1670c:	add	r1, r1, #1
   16710:	mov	r0, r3
   16714:	lsl	r3, r1, #1
   16718:	lsl	r1, r1, #3
   1671c:	str	r3, [r4]
   16720:	bl	261cc <__assert_fail@plt+0x14c74>
   16724:	subs	r3, r0, #0
   16728:	beq	16738 <__assert_fail@plt+0x51e0>
   1672c:	str	r3, [r4, #8]
   16730:	ldr	r1, [r4, #4]
   16734:	b	166ec <__assert_fail@plt+0x5194>
   16738:	mov	r0, r3
   1673c:	b	166fc <__assert_fail@plt+0x51a4>
   16740:	ldr	r3, [r1, #8]
   16744:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16748:	mov	r5, r1
   1674c:	mov	r4, #0
   16750:	strd	r6, [sp, #8]
   16754:	mov	r7, r1
   16758:	mov	r6, r2
   1675c:	str	r8, [sp, #16]
   16760:	mov	r8, r0
   16764:	str	lr, [sp, #20]
   16768:	lsl	r0, r3, #2
   1676c:	str	r2, [r5], #16
   16770:	str	r3, [r1, #16]
   16774:	str	r4, [r1, #20]
   16778:	bl	26190 <__assert_fail@plt+0x14c38>
   1677c:	cmp	r0, r4
   16780:	str	r0, [r7, #24]
   16784:	beq	1682c <__assert_fail@plt+0x52d4>
   16788:	ldr	r0, [r7, #8]
   1678c:	cmp	r0, #0
   16790:	bgt	167a4 <__assert_fail@plt+0x524c>
   16794:	b	167e0 <__assert_fail@plt+0x5288>
   16798:	add	r4, r4, #1
   1679c:	cmp	r0, r4
   167a0:	ble	167e0 <__assert_fail@plt+0x5288>
   167a4:	ldr	r2, [r7, #12]
   167a8:	ldr	r3, [r8]
   167ac:	ldr	r1, [r2, r4, lsl #2]
   167b0:	add	r3, r3, r1, lsl #3
   167b4:	ldrb	r3, [r3, #4]
   167b8:	tst	r3, #8
   167bc:	bne	16798 <__assert_fail@plt+0x5240>
   167c0:	mov	r0, r5
   167c4:	bl	166c8 <__assert_fail@plt+0x5170>
   167c8:	cmp	r0, #0
   167cc:	beq	1682c <__assert_fail@plt+0x52d4>
   167d0:	ldr	r0, [r7, #8]
   167d4:	add	r4, r4, #1
   167d8:	cmp	r0, r4
   167dc:	bgt	167a4 <__assert_fail@plt+0x524c>
   167e0:	ldr	r5, [r8, #32]
   167e4:	ldr	r4, [r8, #68]	; 0x44
   167e8:	and	r6, r6, r4
   167ec:	add	r6, r6, r6, lsl #1
   167f0:	lsl	r4, r6, #2
   167f4:	add	r6, r5, r4
   167f8:	ldr	r3, [r5, r4]
   167fc:	ldrd	r0, [r6, #4]
   16800:	add	r2, r3, #1
   16804:	cmp	r0, r3
   16808:	ble	16834 <__assert_fail@plt+0x52dc>
   1680c:	mov	r0, #0
   16810:	str	r2, [r5, r4]
   16814:	str	r7, [r1, r3, lsl #2]
   16818:	ldrd	r4, [sp]
   1681c:	ldrd	r6, [sp, #8]
   16820:	ldr	r8, [sp, #16]
   16824:	add	sp, sp, #20
   16828:	pop	{pc}		; (ldr pc, [sp], #4)
   1682c:	mov	r0, #12
   16830:	b	16818 <__assert_fail@plt+0x52c0>
   16834:	mov	r0, r1
   16838:	lsl	r1, r2, #3
   1683c:	lsl	r8, r2, #1
   16840:	bl	261cc <__assert_fail@plt+0x14c74>
   16844:	subs	r1, r0, #0
   16848:	beq	1682c <__assert_fail@plt+0x52d4>
   1684c:	ldr	r3, [r5, r4]
   16850:	str	r8, [r6, #4]
   16854:	str	r1, [r6, #8]
   16858:	add	r2, r3, #1
   1685c:	b	1680c <__assert_fail@plt+0x52b4>
   16860:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16864:	mov	r5, r0
   16868:	ldr	r4, [r0, #28]
   1686c:	ldr	r3, [r0, #48]	; 0x30
   16870:	strd	r6, [sp, #8]
   16874:	ldr	r7, [r0, #36]	; 0x24
   16878:	strd	r8, [sp, #16]
   1687c:	str	lr, [sp, #24]
   16880:	sub	sp, sp, #84	; 0x54
   16884:	cmp	r7, r3
   16888:	movge	r7, r3
   1688c:	cmp	r7, r4
   16890:	ble	16924 <__assert_fail@plt+0x53cc>
   16894:	add	r8, r0, #16
   16898:	mvn	r6, #0
   1689c:	ldr	ip, [r5, #64]	; 0x40
   168a0:	sub	r2, r7, r4
   168a4:	ldrd	r0, [r8]
   168a8:	cmp	ip, #0
   168ac:	strd	r0, [sp, #8]
   168b0:	bne	16980 <__assert_fail@plt+0x5428>
   168b4:	ldr	r1, [r5]
   168b8:	ldr	r3, [r5, #24]
   168bc:	add	r3, r4, r3
   168c0:	add	r1, r1, r3
   168c4:	mov	r3, r8
   168c8:	add	r0, sp, #4
   168cc:	bl	265ac <__assert_fail@plt+0x15054>
   168d0:	sub	r3, r0, #1
   168d4:	cmn	r3, #3
   168d8:	bhi	16944 <__assert_fail@plt+0x53ec>
   168dc:	cmn	r0, #2
   168e0:	ldrne	r1, [sp, #4]
   168e4:	beq	169e4 <__assert_fail@plt+0x548c>
   168e8:	add	r0, r4, r0
   168ec:	add	ip, r4, #1
   168f0:	ldr	r2, [r5, #8]
   168f4:	cmp	ip, r0
   168f8:	add	r3, r2, r4, lsl #2
   168fc:	str	r1, [r2, r4, lsl #2]
   16900:	bge	16978 <__assert_fail@plt+0x5420>
   16904:	sub	r2, r2, #4
   16908:	add	r2, r2, r0, lsl #2
   1690c:	str	r6, [r3, #4]!
   16910:	cmp	r2, r3
   16914:	bne	1690c <__assert_fail@plt+0x53b4>
   16918:	mov	r4, r0
   1691c:	cmp	r7, r4
   16920:	bgt	1689c <__assert_fail@plt+0x5344>
   16924:	str	r4, [r5, #28]
   16928:	str	r4, [r5, #32]
   1692c:	add	sp, sp, #84	; 0x54
   16930:	ldrd	r4, [sp]
   16934:	ldrd	r6, [sp, #8]
   16938:	ldrd	r8, [sp, #16]
   1693c:	add	sp, sp, #24
   16940:	pop	{pc}		; (ldr pc, [sp], #4)
   16944:	ldr	r3, [r5]
   16948:	mov	r0, #1
   1694c:	ldr	r1, [r5, #24]
   16950:	ldr	r2, [r5, #64]	; 0x40
   16954:	add	r3, r3, r4
   16958:	ldrb	r1, [r3, r1]
   1695c:	cmp	r2, #0
   16960:	str	r1, [sp, #4]
   16964:	ldrbne	r1, [r2, r1]
   16968:	ldrd	r2, [sp, #8]
   1696c:	strne	r1, [sp, #4]
   16970:	strd	r2, [r8]
   16974:	b	168e8 <__assert_fail@plt+0x5390>
   16978:	mov	r4, ip
   1697c:	b	1691c <__assert_fail@plt+0x53c4>
   16980:	ldr	r3, [r5, #80]	; 0x50
   16984:	cmp	r3, #0
   16988:	cmpgt	r2, #0
   1698c:	ble	169dc <__assert_fail@plt+0x5484>
   16990:	add	r0, sp, #16
   16994:	mov	r1, #0
   16998:	b	169a0 <__assert_fail@plt+0x5448>
   1699c:	ldr	ip, [r5, #64]	; 0x40
   169a0:	ldm	r5, {r3, lr}
   169a4:	ldr	r9, [r5, #24]
   169a8:	add	r3, r3, r4
   169ac:	add	r3, r3, r1
   169b0:	ldrb	r9, [r3, r9]
   169b4:	add	r3, lr, r4
   169b8:	ldrb	ip, [ip, r9]
   169bc:	strb	ip, [r3, r1]
   169c0:	add	r1, r1, #1
   169c4:	ldr	r3, [r5, #80]	; 0x50
   169c8:	strb	ip, [r0], #1
   169cc:	cmp	r2, r3
   169d0:	movlt	r3, r2
   169d4:	cmp	r3, r1
   169d8:	bgt	1699c <__assert_fail@plt+0x5444>
   169dc:	add	r1, sp, #16
   169e0:	b	168c4 <__assert_fail@plt+0x536c>
   169e4:	ldr	r2, [r5, #36]	; 0x24
   169e8:	ldr	r3, [r5, #48]	; 0x30
   169ec:	cmp	r2, r3
   169f0:	bge	16944 <__assert_fail@plt+0x53ec>
   169f4:	ldrd	r2, [sp, #8]
   169f8:	strd	r2, [r5, #16]
   169fc:	b	16924 <__assert_fail@plt+0x53cc>
   16a00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16a04:	mov	r5, r0
   16a08:	ldr	r3, [r0, #48]	; 0x30
   16a0c:	strd	r6, [sp, #8]
   16a10:	strd	r8, [sp, #16]
   16a14:	ldr	r7, [r0, #36]	; 0x24
   16a18:	strd	sl, [sp, #24]
   16a1c:	str	lr, [sp, #32]
   16a20:	sub	sp, sp, #100	; 0x64
   16a24:	ldrb	r2, [r0, #74]	; 0x4a
   16a28:	cmp	r7, r3
   16a2c:	ldr	r6, [r0, #28]
   16a30:	movge	r7, r3
   16a34:	cmp	r2, #0
   16a38:	bne	16a48 <__assert_fail@plt+0x54f0>
   16a3c:	ldr	r3, [r0, #64]	; 0x40
   16a40:	cmp	r3, #0
   16a44:	beq	16b90 <__assert_fail@plt+0x5638>
   16a48:	ldr	r4, [r5, #32]
   16a4c:	cmp	r6, r7
   16a50:	bge	16b68 <__assert_fail@plt+0x5610>
   16a54:	add	r3, r5, #16
   16a58:	str	r3, [sp, #12]
   16a5c:	sub	r3, r7, r6
   16a60:	str	r3, [sp, #8]
   16a64:	add	r3, sp, #20
   16a68:	mov	r9, r3
   16a6c:	ldrd	r0, [r5, #16]
   16a70:	ldr	r3, [r5, #64]	; 0x40
   16a74:	strd	r0, [sp, #24]
   16a78:	cmp	r3, #0
   16a7c:	bne	16d6c <__assert_fail@plt+0x5814>
   16a80:	ldr	r8, [r5]
   16a84:	ldr	r3, [r5, #24]
   16a88:	add	r3, r4, r3
   16a8c:	add	r8, r8, r3
   16a90:	mov	r0, r9
   16a94:	mov	r1, r8
   16a98:	ldrd	r2, [sp, #8]
   16a9c:	bl	265ac <__assert_fail@plt+0x15054>
   16aa0:	sub	r3, r0, #1
   16aa4:	mov	sl, r0
   16aa8:	cmn	r3, #4
   16aac:	str	r3, [sp, #4]
   16ab0:	bhi	16dec <__assert_fail@plt+0x5894>
   16ab4:	ldr	r3, [sp, #20]
   16ab8:	mov	r9, r6
   16abc:	mov	r0, r3
   16ac0:	str	r3, [sp]
   16ac4:	bl	1151c <towupper@plt>
   16ac8:	ldr	r3, [sp]
   16acc:	mov	fp, r0
   16ad0:	cmp	r3, r0
   16ad4:	beq	16dd4 <__assert_fail@plt+0x587c>
   16ad8:	add	r3, sp, #32
   16adc:	add	r2, sp, #24
   16ae0:	mov	r0, r3
   16ae4:	mov	r1, fp
   16ae8:	str	r3, [sp]
   16aec:	bl	111e0 <wcrtomb@plt>
   16af0:	cmp	sl, r0
   16af4:	mov	r3, r0
   16af8:	bne	16e80 <__assert_fail@plt+0x5928>
   16afc:	ldr	r0, [r5, #4]
   16b00:	mov	r2, sl
   16b04:	ldr	r1, [sp]
   16b08:	add	r0, r0, r6
   16b0c:	bl	11264 <memcpy@plt>
   16b10:	ldrb	r3, [r5, #76]	; 0x4c
   16b14:	cmp	r3, #0
   16b18:	bne	16e60 <__assert_fail@plt+0x5908>
   16b1c:	add	r2, sl, r4
   16b20:	ldr	r3, [r5, #8]
   16b24:	add	sl, sl, r9
   16b28:	add	r6, r6, #1
   16b2c:	cmp	r6, sl
   16b30:	mov	r4, r2
   16b34:	mvnlt	r2, #0
   16b38:	str	fp, [r3, r9, lsl #2]
   16b3c:	add	r9, r3, r9, lsl #2
   16b40:	sublt	r3, r3, #4
   16b44:	addlt	r3, r3, sl, lsl #2
   16b48:	bge	16a4c <__assert_fail@plt+0x54f4>
   16b4c:	str	r2, [r9, #4]!
   16b50:	cmp	r3, r9
   16b54:	bne	16b4c <__assert_fail@plt+0x55f4>
   16b58:	mov	r6, sl
   16b5c:	b	16a4c <__assert_fail@plt+0x54f4>
   16b60:	ldrd	r2, [sp, #24]
   16b64:	strd	r2, [r5, #16]
   16b68:	mov	r0, #0
   16b6c:	str	r6, [r5, #28]
   16b70:	str	r4, [r5, #32]
   16b74:	add	sp, sp, #100	; 0x64
   16b78:	ldrd	r4, [sp]
   16b7c:	ldrd	r6, [sp, #8]
   16b80:	ldrd	r8, [sp, #16]
   16b84:	ldrd	sl, [sp, #24]
   16b88:	add	sp, sp, #32
   16b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b90:	ldrb	r3, [r0, #76]	; 0x4c
   16b94:	cmp	r3, #0
   16b98:	bne	16a48 <__assert_fail@plt+0x54f0>
   16b9c:	cmp	r6, r7
   16ba0:	bge	16cc8 <__assert_fail@plt+0x5770>
   16ba4:	add	fp, r0, #16
   16ba8:	str	r7, [sp]
   16bac:	str	fp, [sp, #12]
   16bb0:	ldr	r8, [r5]
   16bb4:	mov	r4, r6
   16bb8:	ldr	r7, [r5, #24]
   16bbc:	add	r3, r8, r7
   16bc0:	ldrb	sl, [r3, r6]
   16bc4:	tst	sl, #128	; 0x80
   16bc8:	bne	16bec <__assert_fail@plt+0x5694>
   16bcc:	mov	r0, fp
   16bd0:	bl	11294 <mbsinit@plt>
   16bd4:	cmp	r0, #0
   16bd8:	beq	16bec <__assert_fail@plt+0x5694>
   16bdc:	mov	r0, sl
   16be0:	bl	1151c <towupper@plt>
   16be4:	bics	r3, r0, #127	; 0x7f
   16be8:	beq	16cfc <__assert_fail@plt+0x57a4>
   16bec:	ldr	r3, [sp]
   16bf0:	add	r1, r7, r6
   16bf4:	add	r0, sp, #20
   16bf8:	add	r1, r8, r1
   16bfc:	ldrd	r8, [fp]
   16c00:	sub	r3, r3, r6
   16c04:	mov	r2, r3
   16c08:	str	r3, [sp, #8]
   16c0c:	mov	r3, fp
   16c10:	strd	r8, [sp, #24]
   16c14:	mov	r9, r0
   16c18:	bl	265ac <__assert_fail@plt+0x15054>
   16c1c:	sub	r3, r0, #1
   16c20:	mov	r8, r0
   16c24:	cmn	r3, #4
   16c28:	bhi	16d14 <__assert_fail@plt+0x57bc>
   16c2c:	ldr	r3, [sp, #20]
   16c30:	mov	r0, r3
   16c34:	str	r3, [sp, #4]
   16c38:	bl	1151c <towupper@plt>
   16c3c:	ldr	r3, [sp, #4]
   16c40:	mov	sl, r0
   16c44:	cmp	r3, r0
   16c48:	beq	16cd8 <__assert_fail@plt+0x5780>
   16c4c:	add	r3, sp, #32
   16c50:	add	r2, sp, #24
   16c54:	mov	r0, r3
   16c58:	mov	r1, sl
   16c5c:	str	r3, [sp, #4]
   16c60:	bl	111e0 <wcrtomb@plt>
   16c64:	cmp	r8, r0
   16c68:	bne	16dc8 <__assert_fail@plt+0x5870>
   16c6c:	ldr	r0, [r5, #4]
   16c70:	mov	r2, r8
   16c74:	ldr	r3, [sp, #4]
   16c78:	add	r0, r0, r6
   16c7c:	mov	r1, r3
   16c80:	bl	11264 <memcpy@plt>
   16c84:	ldr	r3, [r5, #8]
   16c88:	add	r8, r8, r4
   16c8c:	add	r6, r6, #1
   16c90:	cmp	r6, r8
   16c94:	str	sl, [r3, r4, lsl #2]
   16c98:	add	r4, r3, r4, lsl #2
   16c9c:	bge	16cbc <__assert_fail@plt+0x5764>
   16ca0:	sub	r3, r3, #4
   16ca4:	add	r3, r3, r8, lsl #2
   16ca8:	mvn	r2, #0
   16cac:	str	r2, [r4, #4]!
   16cb0:	cmp	r4, r3
   16cb4:	bne	16ca8 <__assert_fail@plt+0x5750>
   16cb8:	mov	r6, r8
   16cbc:	ldr	r3, [sp]
   16cc0:	cmp	r3, r6
   16cc4:	bgt	16bb0 <__assert_fail@plt+0x5658>
   16cc8:	mov	r0, #0
   16ccc:	str	r6, [r5, #28]
   16cd0:	str	r6, [r5, #32]
   16cd4:	b	16b74 <__assert_fail@plt+0x561c>
   16cd8:	ldr	r1, [r5]
   16cdc:	mov	r2, r8
   16ce0:	ldr	r3, [r5, #24]
   16ce4:	ldr	r0, [r5, #4]
   16ce8:	add	r3, r6, r3
   16cec:	add	r1, r1, r3
   16cf0:	add	r0, r0, r6
   16cf4:	bl	11264 <memcpy@plt>
   16cf8:	b	16c84 <__assert_fail@plt+0x572c>
   16cfc:	ldr	r3, [r5, #4]
   16d00:	strb	r0, [r3, r6]
   16d04:	ldr	r3, [r5, #8]
   16d08:	str	r0, [r3, r6, lsl #2]
   16d0c:	add	r6, r6, #1
   16d10:	b	16cbc <__assert_fail@plt+0x5764>
   16d14:	cmn	r3, #3
   16d18:	beq	16d44 <__assert_fail@plt+0x57ec>
   16d1c:	ldr	r3, [r5, #4]
   16d20:	cmn	r0, #1
   16d24:	strb	sl, [r3, r6]
   16d28:	add	r6, r6, #1
   16d2c:	ldr	r3, [r5, #8]
   16d30:	str	sl, [r3, r4, lsl #2]
   16d34:	bne	16cbc <__assert_fail@plt+0x5764>
   16d38:	ldrd	r2, [sp, #24]
   16d3c:	strd	r2, [fp]
   16d40:	b	16cbc <__assert_fail@plt+0x5764>
   16d44:	ldr	r2, [r5, #36]	; 0x24
   16d48:	ldr	r3, [r5, #48]	; 0x30
   16d4c:	cmp	r2, r3
   16d50:	blt	16f84 <__assert_fail@plt+0x5a2c>
   16d54:	ldr	r3, [r5, #4]
   16d58:	strb	sl, [r3, r6]
   16d5c:	add	r6, r6, #1
   16d60:	ldr	r3, [r5, #8]
   16d64:	str	sl, [r3, r4, lsl #2]
   16d68:	b	16cbc <__assert_fail@plt+0x5764>
   16d6c:	ldr	r2, [sp, #8]
   16d70:	ldr	r8, [r5, #80]	; 0x50
   16d74:	cmp	r2, #0
   16d78:	cmpgt	r8, #0
   16d7c:	ble	16fb4 <__assert_fail@plt+0x5a5c>
   16d80:	ldr	lr, [r5]
   16d84:	add	r1, sp, #32
   16d88:	ldr	r2, [r5, #24]
   16d8c:	str	r1, [sp]
   16d90:	ldr	r0, [sp, #8]
   16d94:	add	r2, r4, r2
   16d98:	add	lr, lr, r2
   16d9c:	cmp	r8, r0
   16da0:	mov	r2, lr
   16da4:	movge	r8, r0
   16da8:	ldrb	r0, [r2], #1
   16dac:	ldrb	r0, [r3, r0]
   16db0:	sub	ip, r2, lr
   16db4:	cmp	ip, r8
   16db8:	strb	r0, [r1], #1
   16dbc:	blt	16da8 <__assert_fail@plt+0x5850>
   16dc0:	ldr	r8, [sp]
   16dc4:	b	16a90 <__assert_fail@plt+0x5538>
   16dc8:	mov	r4, r6
   16dcc:	ldr	r7, [sp]
   16dd0:	b	16a6c <__assert_fail@plt+0x5514>
   16dd4:	ldr	r0, [r5, #4]
   16dd8:	mov	r1, r8
   16ddc:	mov	r2, sl
   16de0:	add	r0, r0, r6
   16de4:	bl	11264 <memcpy@plt>
   16de8:	b	16b10 <__assert_fail@plt+0x55b8>
   16dec:	ldr	r3, [sp, #4]
   16df0:	cmn	r3, #3
   16df4:	bne	16e08 <__assert_fail@plt+0x58b0>
   16df8:	ldr	r2, [r5, #36]	; 0x24
   16dfc:	ldr	r3, [r5, #48]	; 0x30
   16e00:	cmp	r2, r3
   16e04:	blt	16b60 <__assert_fail@plt+0x5608>
   16e08:	ldr	r3, [r5]
   16e0c:	ldr	r1, [r5, #24]
   16e10:	ldr	r2, [r5, #64]	; 0x40
   16e14:	add	r3, r3, r4
   16e18:	ldrb	r3, [r3, r1]
   16e1c:	cmp	r2, #0
   16e20:	ldr	r1, [r5, #4]
   16e24:	ldrbne	r3, [r2, r3]
   16e28:	lsl	r2, r6, #2
   16e2c:	strb	r3, [r1, r6]
   16e30:	ldrb	r1, [r5, #76]	; 0x4c
   16e34:	cmp	r1, #0
   16e38:	ldrne	r1, [r5, #12]
   16e3c:	strne	r4, [r1, r6, lsl #2]
   16e40:	cmn	sl, #1
   16e44:	add	r4, r4, #1
   16e48:	ldr	r1, [r5, #8]
   16e4c:	add	r6, r6, #1
   16e50:	str	r3, [r1, r2]
   16e54:	ldrdeq	r2, [sp, #24]
   16e58:	strdeq	r2, [r5, #16]
   16e5c:	b	16a4c <__assert_fail@plt+0x54f4>
   16e60:	ldr	r3, [r5, #12]
   16e64:	add	r2, sl, r4
   16e68:	add	r3, r3, r6, lsl #2
   16e6c:	str	r4, [r3], #4
   16e70:	add	r4, r4, #1
   16e74:	cmp	r2, r4
   16e78:	bne	16e6c <__assert_fail@plt+0x5914>
   16e7c:	b	16b20 <__assert_fail@plt+0x55c8>
   16e80:	cmn	r0, #1
   16e84:	beq	16dd4 <__assert_fail@plt+0x587c>
   16e88:	add	r8, r0, r6
   16e8c:	ldr	r0, [r5, #36]	; 0x24
   16e90:	cmp	r8, r0
   16e94:	bhi	16b60 <__assert_fail@plt+0x5608>
   16e98:	ldr	r2, [r5, #12]
   16e9c:	cmp	r2, #0
   16ea0:	beq	16f90 <__assert_fail@plt+0x5a38>
   16ea4:	ldrb	r2, [r5, #76]	; 0x4c
   16ea8:	cmp	r2, #0
   16eac:	bne	16ed8 <__assert_fail@plt+0x5980>
   16eb0:	cmp	r6, #0
   16eb4:	ldrne	r1, [r5, #12]
   16eb8:	subne	r1, r1, #4
   16ebc:	beq	16ed0 <__assert_fail@plt+0x5978>
   16ec0:	str	r2, [r1, #4]!
   16ec4:	add	r2, r2, #1
   16ec8:	cmp	r2, r6
   16ecc:	bne	16ec0 <__assert_fail@plt+0x5968>
   16ed0:	mov	r2, #1
   16ed4:	strb	r2, [r5, #76]	; 0x4c
   16ed8:	ldr	r0, [r5, #4]
   16edc:	mov	r2, r3
   16ee0:	ldr	r1, [sp]
   16ee4:	str	r3, [sp]
   16ee8:	add	r0, r0, r6
   16eec:	bl	11264 <memcpy@plt>
   16ef0:	ldr	r3, [sp]
   16ef4:	lsl	r1, r6, #2
   16ef8:	ldr	r2, [r5, #8]
   16efc:	ldr	r0, [r5, #12]
   16f00:	cmp	r3, #1
   16f04:	mvnhi	lr, #0
   16f08:	str	fp, [r2, r6, lsl #2]
   16f0c:	add	r2, r2, r1
   16f10:	add	r1, r0, r1
   16f14:	str	r4, [r0, r6, lsl #2]
   16f18:	movhi	r0, #1
   16f1c:	bls	16f44 <__assert_fail@plt+0x59ec>
   16f20:	ldr	ip, [sp, #4]
   16f24:	cmp	r0, sl
   16f28:	movcc	ip, r0
   16f2c:	add	r0, r0, #1
   16f30:	cmp	r0, r3
   16f34:	add	ip, ip, r4
   16f38:	str	ip, [r1, #4]!
   16f3c:	str	lr, [r2, #4]!
   16f40:	bne	16f20 <__assert_fail@plt+0x59c8>
   16f44:	ldr	r7, [r5, #48]	; 0x30
   16f48:	sub	r3, r3, sl
   16f4c:	ldr	r2, [r5, #52]	; 0x34
   16f50:	add	r7, r3, r7
   16f54:	cmp	r2, r4
   16f58:	str	r7, [r5, #48]	; 0x30
   16f5c:	ble	16f6c <__assert_fail@plt+0x5a14>
   16f60:	ldr	r2, [r5, #56]	; 0x38
   16f64:	add	r3, r2, r3
   16f68:	str	r3, [r5, #56]	; 0x38
   16f6c:	ldr	r3, [r5, #36]	; 0x24
   16f70:	mov	r6, r8
   16f74:	add	r4, sl, r4
   16f78:	cmp	r7, r3
   16f7c:	movge	r7, r3
   16f80:	b	16a4c <__assert_fail@plt+0x54f4>
   16f84:	ldrd	r2, [sp, #24]
   16f88:	strd	r2, [fp]
   16f8c:	b	16cc8 <__assert_fail@plt+0x5770>
   16f90:	lsl	r0, r0, #2
   16f94:	str	r3, [sp, #8]
   16f98:	bl	26190 <__assert_fail@plt+0x14c38>
   16f9c:	cmp	r0, #0
   16fa0:	str	r0, [r5, #12]
   16fa4:	moveq	r0, #12
   16fa8:	ldr	r3, [sp, #8]
   16fac:	bne	16ea4 <__assert_fail@plt+0x594c>
   16fb0:	b	16b74 <__assert_fail@plt+0x561c>
   16fb4:	add	r3, sp, #32
   16fb8:	str	r3, [sp]
   16fbc:	b	16dc0 <__assert_fail@plt+0x5868>
   16fc0:	strd	r4, [sp, #-16]!
   16fc4:	mov	r5, r0
   16fc8:	ldr	r4, [r0, #28]
   16fcc:	ldr	r3, [r0, #48]	; 0x30
   16fd0:	str	r6, [sp, #8]
   16fd4:	ldr	r6, [r0, #36]	; 0x24
   16fd8:	str	lr, [sp, #12]
   16fdc:	cmp	r6, r3
   16fe0:	movge	r6, r3
   16fe4:	cmp	r6, r4
   16fe8:	ble	17040 <__assert_fail@plt+0x5ae8>
   16fec:	bl	113d8 <__ctype_toupper_loc@plt>
   16ff0:	ldr	r3, [r5]
   16ff4:	ldr	r1, [r5, #24]
   16ff8:	ldr	r2, [r5, #64]	; 0x40
   16ffc:	add	r3, r3, r4
   17000:	ldrb	r3, [r3, r1]
   17004:	cmp	r2, #0
   17008:	ldr	r1, [r0]
   1700c:	ldrbne	r3, [r2, r3]
   17010:	ldr	r2, [r5, #4]
   17014:	ldr	r3, [r1, r3, lsl #2]
   17018:	strb	r3, [r2, r4]
   1701c:	add	r4, r4, #1
   17020:	cmp	r6, r4
   17024:	bne	16ff0 <__assert_fail@plt+0x5a98>
   17028:	str	r6, [r5, #28]
   1702c:	str	r6, [r5, #32]
   17030:	ldrd	r4, [sp]
   17034:	ldr	r6, [sp, #8]
   17038:	add	sp, sp, #12
   1703c:	pop	{pc}		; (ldr pc, [sp], #4)
   17040:	mov	r6, r4
   17044:	b	17028 <__assert_fail@plt+0x5ad0>
   17048:	ldr	r3, [r0, #36]	; 0x24
   1704c:	strd	r4, [sp, #-16]!
   17050:	str	r6, [sp, #8]
   17054:	str	lr, [sp, #12]
   17058:	cmn	r3, #-536870910	; 0xe0000002
   1705c:	bhi	17180 <__assert_fail@plt+0x5c28>
   17060:	ldr	r2, [r0, #48]	; 0x30
   17064:	lsl	r3, r3, #1
   17068:	mov	r4, r0
   1706c:	cmp	r3, r2
   17070:	movge	r3, r2
   17074:	cmp	r3, r1
   17078:	movge	r1, r3
   1707c:	bl	16610 <__assert_fail@plt+0x50b8>
   17080:	subs	r5, r0, #0
   17084:	bne	170ec <__assert_fail@plt+0x5b94>
   17088:	ldr	r0, [r4, #100]	; 0x64
   1708c:	cmp	r0, #0
   17090:	beq	170b0 <__assert_fail@plt+0x5b58>
   17094:	ldr	r1, [r4, #36]	; 0x24
   17098:	add	r1, r1, #1
   1709c:	lsl	r1, r1, #2
   170a0:	bl	261cc <__assert_fail@plt+0x14c74>
   170a4:	cmp	r0, #0
   170a8:	beq	17180 <__assert_fail@plt+0x5c28>
   170ac:	str	r0, [r4, #100]	; 0x64
   170b0:	ldrb	r3, [r4, #72]	; 0x48
   170b4:	ldr	r2, [r4, #80]	; 0x50
   170b8:	cmp	r3, #0
   170bc:	beq	17100 <__assert_fail@plt+0x5ba8>
   170c0:	cmp	r2, #1
   170c4:	mov	r0, r4
   170c8:	ble	17178 <__assert_fail@plt+0x5c20>
   170cc:	ldrd	r4, [sp]
   170d0:	ldr	r6, [sp, #8]
   170d4:	ldr	lr, [sp, #12]
   170d8:	add	sp, sp, #16
   170dc:	b	16a00 <__assert_fail@plt+0x54a8>
   170e0:	mov	lr, r3
   170e4:	str	lr, [r4, #28]
   170e8:	str	lr, [r4, #32]
   170ec:	mov	r0, r5
   170f0:	ldrd	r4, [sp]
   170f4:	ldr	r6, [sp, #8]
   170f8:	add	sp, sp, #12
   170fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17100:	cmp	r2, #1
   17104:	bgt	1716c <__assert_fail@plt+0x5c14>
   17108:	ldr	r1, [r4, #64]	; 0x40
   1710c:	cmp	r1, #0
   17110:	beq	170ec <__assert_fail@plt+0x5b94>
   17114:	ldr	r3, [r4, #28]
   17118:	ldr	lr, [r4, #36]	; 0x24
   1711c:	ldr	r2, [r4, #48]	; 0x30
   17120:	cmp	lr, r2
   17124:	movge	lr, r2
   17128:	cmp	lr, r3
   1712c:	bgt	17138 <__assert_fail@plt+0x5be0>
   17130:	b	170e0 <__assert_fail@plt+0x5b88>
   17134:	ldr	r1, [r4, #64]	; 0x40
   17138:	ldr	r2, [r4]
   1713c:	ldr	r0, [r4, #4]
   17140:	ldr	ip, [r4, #24]
   17144:	add	r2, r2, r3
   17148:	ldrb	r2, [r2, ip]
   1714c:	ldrb	r2, [r1, r2]
   17150:	strb	r2, [r0, r3]
   17154:	add	r3, r3, #1
   17158:	cmp	lr, r3
   1715c:	bne	17134 <__assert_fail@plt+0x5bdc>
   17160:	str	lr, [r4, #28]
   17164:	str	lr, [r4, #32]
   17168:	b	170ec <__assert_fail@plt+0x5b94>
   1716c:	mov	r0, r4
   17170:	bl	16860 <__assert_fail@plt+0x5308>
   17174:	b	170ec <__assert_fail@plt+0x5b94>
   17178:	bl	16fc0 <__assert_fail@plt+0x5a68>
   1717c:	b	170ec <__assert_fail@plt+0x5b94>
   17180:	mov	r5, #12
   17184:	b	170ec <__assert_fail@plt+0x5b94>
   17188:	str	r4, [sp, #-8]!
   1718c:	mov	r4, r0
   17190:	ldr	r0, [r0]
   17194:	str	lr, [sp, #4]
   17198:	bl	13b9c <__assert_fail@plt+0x2644>
   1719c:	ldr	r0, [r4, #4]
   171a0:	bl	13b9c <__assert_fail@plt+0x2644>
   171a4:	ldr	r0, [r4, #8]
   171a8:	bl	13b9c <__assert_fail@plt+0x2644>
   171ac:	ldr	r0, [r4, #12]
   171b0:	bl	13b9c <__assert_fail@plt+0x2644>
   171b4:	mov	r0, r4
   171b8:	ldr	r4, [sp]
   171bc:	ldr	lr, [sp, #4]
   171c0:	add	sp, sp, #8
   171c4:	b	13b9c <__assert_fail@plt+0x2644>
   171c8:	ldr	r2, [r0, #4]
   171cc:	mov	r3, #255	; 0xff
   171d0:	movt	r3, #4
   171d4:	and	r3, r3, r2
   171d8:	cmp	r3, #6
   171dc:	beq	171ec <__assert_fail@plt+0x5c94>
   171e0:	cmp	r3, #3
   171e4:	beq	171f4 <__assert_fail@plt+0x5c9c>
   171e8:	bx	lr
   171ec:	ldr	r0, [r0]
   171f0:	b	17188 <__assert_fail@plt+0x5c30>
   171f4:	ldr	r0, [r0]
   171f8:	b	13b9c <__assert_fail@plt+0x2644>
   171fc:	add	r0, r1, #20
   17200:	str	r4, [sp, #-8]!
   17204:	str	lr, [sp, #4]
   17208:	bl	171c8 <__assert_fail@plt+0x5c70>
   1720c:	ldr	r4, [sp]
   17210:	add	sp, sp, #4
   17214:	mov	r0, #0
   17218:	pop	{pc}		; (ldr pc, [sp], #4)
   1721c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17220:	mov	r4, r0
   17224:	ldr	ip, [r0, #8]
   17228:	strd	r6, [sp, #8]
   1722c:	ldr	r6, [r0, #4]
   17230:	strd	r8, [sp, #16]
   17234:	str	sl, [sp, #24]
   17238:	str	lr, [sp, #28]
   1723c:	sub	sp, sp, #8
   17240:	add	r3, sp, #8
   17244:	cmp	ip, r6
   17248:	stmdb	r3, {r1, r2}
   1724c:	ldrb	r5, [sp, #4]
   17250:	bcs	17320 <__assert_fail@plt+0x5dc8>
   17254:	ldr	r7, [r0, #12]
   17258:	ldr	r6, [r0, #20]
   1725c:	lsl	r0, ip, #3
   17260:	cmp	r5, #5
   17264:	ldr	lr, [r4]
   17268:	ldrd	r2, [sp]
   1726c:	add	r1, lr, r0
   17270:	strd	r2, [lr, r0]
   17274:	ldr	r3, [r1, #4]
   17278:	bfc	r3, #8, #10
   1727c:	str	r3, [r1, #4]
   17280:	beq	1730c <__assert_fail@plt+0x5db4>
   17284:	sub	r5, r5, #6
   17288:	clz	r5, r5
   1728c:	lsr	r5, r5, #5
   17290:	ldrb	r3, [r1, #6]
   17294:	mvn	r0, #0
   17298:	mov	r2, #0
   1729c:	bfi	r3, r5, #4, #1
   172a0:	strb	r3, [r1, #6]
   172a4:	str	r0, [r7, ip, lsl #2]
   172a8:	ldr	r3, [r4, #8]
   172ac:	add	r3, r3, r3, lsl #1
   172b0:	lsl	r3, r3, #2
   172b4:	add	r1, r6, r3
   172b8:	str	r2, [r6, r3]
   172bc:	str	r2, [r1, #4]
   172c0:	str	r2, [r1, #8]
   172c4:	ldr	r3, [r4, #8]
   172c8:	ldr	r0, [r4, #24]
   172cc:	add	r3, r3, r3, lsl #1
   172d0:	lsl	r3, r3, #2
   172d4:	add	r1, r0, r3
   172d8:	str	r2, [r0, r3]
   172dc:	str	r2, [r1, #4]
   172e0:	str	r2, [r1, #8]
   172e4:	ldr	r0, [r4, #8]
   172e8:	add	r3, r0, #1
   172ec:	str	r3, [r4, #8]
   172f0:	add	sp, sp, #8
   172f4:	ldrd	r4, [sp]
   172f8:	ldrd	r6, [sp, #8]
   172fc:	ldrd	r8, [sp, #16]
   17300:	ldr	sl, [sp, #24]
   17304:	add	sp, sp, #28
   17308:	pop	{pc}		; (ldr pc, [sp], #4)
   1730c:	ldr	r5, [r4, #92]	; 0x5c
   17310:	cmp	r5, #1
   17314:	movle	r5, #0
   17318:	movgt	r5, #1
   1731c:	b	17290 <__assert_fail@plt+0x5d38>
   17320:	lsl	r9, r6, #1
   17324:	movw	r3, #21845	; 0x5555
   17328:	movt	r3, #5461	; 0x1555
   1732c:	cmp	r9, r3
   17330:	bhi	173ec <__assert_fail@plt+0x5e94>
   17334:	lsl	r1, r6, #4
   17338:	ldr	r0, [r0]
   1733c:	bl	261cc <__assert_fail@plt+0x14c74>
   17340:	cmp	r0, #0
   17344:	beq	173ec <__assert_fail@plt+0x5e94>
   17348:	lsl	r8, r6, #3
   1734c:	str	r0, [r4]
   17350:	add	r6, r9, r6
   17354:	ldr	r0, [r4, #12]
   17358:	mov	r1, r8
   1735c:	bl	261cc <__assert_fail@plt+0x14c74>
   17360:	mov	r7, r0
   17364:	mov	r1, r8
   17368:	lsl	r8, r6, #3
   1736c:	ldr	r0, [r4, #16]
   17370:	bl	261cc <__assert_fail@plt+0x14c74>
   17374:	mov	sl, r0
   17378:	mov	r1, r8
   1737c:	ldr	r0, [r4, #20]
   17380:	bl	261cc <__assert_fail@plt+0x14c74>
   17384:	mov	r6, r0
   17388:	mov	r1, r8
   1738c:	ldr	r0, [r4, #24]
   17390:	bl	261cc <__assert_fail@plt+0x14c74>
   17394:	cmp	sl, #0
   17398:	cmpne	r7, #0
   1739c:	mov	r8, r0
   173a0:	beq	173cc <__assert_fail@plt+0x5e74>
   173a4:	cmp	r0, #0
   173a8:	cmpne	r6, #0
   173ac:	beq	173cc <__assert_fail@plt+0x5e74>
   173b0:	str	r9, [r4, #4]
   173b4:	str	r7, [r4, #12]
   173b8:	str	sl, [r4, #16]
   173bc:	str	r6, [r4, #20]
   173c0:	str	r0, [r4, #24]
   173c4:	ldr	ip, [r4, #8]
   173c8:	b	1725c <__assert_fail@plt+0x5d04>
   173cc:	mov	r0, r7
   173d0:	bl	13b9c <__assert_fail@plt+0x2644>
   173d4:	mov	r0, sl
   173d8:	bl	13b9c <__assert_fail@plt+0x2644>
   173dc:	mov	r0, r6
   173e0:	bl	13b9c <__assert_fail@plt+0x2644>
   173e4:	mov	r0, r8
   173e8:	bl	13b9c <__assert_fail@plt+0x2644>
   173ec:	mvn	r0, #0
   173f0:	b	172f0 <__assert_fail@plt+0x5d98>
   173f4:	ldr	r3, [r0]
   173f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   173fc:	mov	r4, r2
   17400:	mov	r5, r0
   17404:	strd	r6, [sp, #8]
   17408:	lsl	r7, r1, #3
   1740c:	mov	r6, r1
   17410:	str	r8, [sp, #16]
   17414:	str	lr, [sp, #20]
   17418:	add	r3, r3, r7
   1741c:	ldm	r3, {r1, r2}
   17420:	bl	1721c <__assert_fail@plt+0x5cc4>
   17424:	cmn	r0, #1
   17428:	beq	17474 <__assert_fail@plt+0x5f1c>
   1742c:	ldr	r1, [r5]
   17430:	ubfx	r2, r4, #0, #10
   17434:	add	r3, r1, r0, lsl #3
   17438:	add	r7, r1, r7
   1743c:	ldr	ip, [r3, #4]
   17440:	bfi	ip, r2, #8, #10
   17444:	mov	r1, ip
   17448:	str	ip, [r3, #4]
   1744c:	ldr	ip, [r7, #4]
   17450:	ubfx	ip, ip, #8, #10
   17454:	orr	r2, r2, ip
   17458:	bfi	r1, r2, #8, #10
   1745c:	ubfx	r2, r1, #16, #8
   17460:	str	r1, [r3, #4]
   17464:	orr	r2, r2, #4
   17468:	strb	r2, [r3, #6]
   1746c:	ldr	r3, [r5, #16]
   17470:	str	r6, [r3, r0, lsl #2]
   17474:	ldrd	r4, [sp]
   17478:	ldrd	r6, [sp, #8]
   1747c:	ldr	r8, [sp, #16]
   17480:	add	sp, sp, #20
   17484:	pop	{pc}		; (ldr pc, [sp], #4)
   17488:	str	r4, [sp, #-8]!
   1748c:	mov	r4, r0
   17490:	ldr	r0, [r0, #24]
   17494:	str	lr, [sp, #4]
   17498:	bl	13b9c <__assert_fail@plt+0x2644>
   1749c:	ldr	r0, [r4, #36]	; 0x24
   174a0:	bl	13b9c <__assert_fail@plt+0x2644>
   174a4:	ldr	r3, [r4, #40]	; 0x28
   174a8:	add	r2, r4, #4
   174ac:	cmp	r3, r2
   174b0:	beq	174c4 <__assert_fail@plt+0x5f6c>
   174b4:	ldr	r0, [r3, #8]
   174b8:	bl	13b9c <__assert_fail@plt+0x2644>
   174bc:	ldr	r0, [r4, #40]	; 0x28
   174c0:	bl	13b9c <__assert_fail@plt+0x2644>
   174c4:	ldr	r0, [r4, #12]
   174c8:	bl	13b9c <__assert_fail@plt+0x2644>
   174cc:	ldr	r0, [r4, #48]	; 0x30
   174d0:	bl	13b9c <__assert_fail@plt+0x2644>
   174d4:	ldr	r0, [r4, #44]	; 0x2c
   174d8:	bl	13b9c <__assert_fail@plt+0x2644>
   174dc:	mov	r0, r4
   174e0:	ldr	r4, [sp]
   174e4:	ldr	lr, [sp, #4]
   174e8:	add	sp, sp, #8
   174ec:	b	13b9c <__assert_fail@plt+0x2644>
   174f0:	str	r4, [sp, #-8]!
   174f4:	mov	r4, r0
   174f8:	ldr	r0, [r0, #8]
   174fc:	str	lr, [sp, #4]
   17500:	bl	13b9c <__assert_fail@plt+0x2644>
   17504:	ldr	r0, [r4, #12]
   17508:	bl	13b9c <__assert_fail@plt+0x2644>
   1750c:	ldrb	r3, [r4, #75]	; 0x4b
   17510:	cmp	r3, #0
   17514:	bne	17524 <__assert_fail@plt+0x5fcc>
   17518:	ldr	r4, [sp]
   1751c:	add	sp, sp, #4
   17520:	pop	{pc}		; (ldr pc, [sp], #4)
   17524:	ldr	r0, [r4, #4]
   17528:	ldr	r4, [sp]
   1752c:	ldr	lr, [sp, #4]
   17530:	add	sp, sp, #8
   17534:	b	13b9c <__assert_fail@plt+0x2644>
   17538:	ldr	r3, [r0, #124]	; 0x7c
   1753c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17540:	strd	r6, [sp, #8]
   17544:	str	r8, [sp, #16]
   17548:	mov	r8, r0
   1754c:	str	lr, [sp, #20]
   17550:	cmp	r3, #0
   17554:	ble	175d8 <__assert_fail@plt+0x6080>
   17558:	mov	r7, #0
   1755c:	ldr	r3, [r8, #132]	; 0x84
   17560:	ldr	r6, [r3, r7, lsl #2]
   17564:	ldr	r3, [r6, #16]
   17568:	cmp	r3, #0
   1756c:	ble	1759c <__assert_fail@plt+0x6044>
   17570:	mov	r4, #0
   17574:	ldr	r3, [r6, #20]
   17578:	ldr	r5, [r3, r4, lsl #2]
   1757c:	add	r4, r4, #1
   17580:	ldr	r0, [r5, #16]
   17584:	bl	13b9c <__assert_fail@plt+0x2644>
   17588:	mov	r0, r5
   1758c:	bl	13b9c <__assert_fail@plt+0x2644>
   17590:	ldr	r3, [r6, #16]
   17594:	cmp	r3, r4
   17598:	bgt	17574 <__assert_fail@plt+0x601c>
   1759c:	ldr	r0, [r6, #20]
   175a0:	bl	13b9c <__assert_fail@plt+0x2644>
   175a4:	ldr	r3, [r6, #8]
   175a8:	cmp	r3, #0
   175ac:	beq	175c0 <__assert_fail@plt+0x6068>
   175b0:	ldr	r0, [r3, #8]
   175b4:	bl	13b9c <__assert_fail@plt+0x2644>
   175b8:	ldr	r0, [r6, #8]
   175bc:	bl	13b9c <__assert_fail@plt+0x2644>
   175c0:	mov	r0, r6
   175c4:	add	r7, r7, #1
   175c8:	bl	13b9c <__assert_fail@plt+0x2644>
   175cc:	ldr	r3, [r8, #124]	; 0x7c
   175d0:	cmp	r3, r7
   175d4:	bgt	1755c <__assert_fail@plt+0x6004>
   175d8:	mov	r3, #0
   175dc:	ldrd	r4, [sp]
   175e0:	ldrd	r6, [sp, #8]
   175e4:	str	r3, [r8, #108]	; 0x6c
   175e8:	str	r3, [r8, #124]	; 0x7c
   175ec:	ldr	r8, [sp, #16]
   175f0:	add	sp, sp, #20
   175f4:	pop	{pc}		; (ldr pc, [sp], #4)
   175f8:	ldrb	r3, [r1, #24]
   175fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17600:	ldr	r2, [r1, #28]
   17604:	strd	r6, [sp, #8]
   17608:	str	r8, [sp, #16]
   1760c:	sub	r3, r3, #2
   17610:	str	lr, [sp, #20]
   17614:	cmp	r3, #14
   17618:	ldrls	pc, [pc, r3, lsl #2]
   1761c:	b	17764 <__assert_fail@plt+0x620c>
   17620:	andeq	r7, r1, r8, ror r6
   17624:	andeq	r7, r1, r4, ror #14
   17628:	andeq	r7, r1, ip, asr r6
   1762c:	andeq	r7, r1, r4, ror #14
   17630:	andeq	r7, r1, r4, ror #14
   17634:	andeq	r7, r1, r4, ror #14
   17638:	andeq	r7, r1, r4, lsl r7
   1763c:	andeq	r7, r1, r4, lsl r7
   17640:	muleq	r1, r4, r6
   17644:	muleq	r1, r4, r6
   17648:	andeq	r7, r1, r4, lsl r7
   1764c:	andeq	r7, r1, r4, ror #14
   17650:	andeq	r7, r1, r4, ror #14
   17654:	andeq	r7, r1, r4, ror #14
   17658:	andeq	r7, r1, r8, ror r6
   1765c:	ldr	ip, [r1, #16]
   17660:	ldr	r3, [r0, #12]
   17664:	ldr	r4, [ip, #28]
   17668:	str	r4, [r3, r2, lsl #2]
   1766c:	ldrb	r3, [r1, #24]
   17670:	cmp	r3, #4
   17674:	beq	17790 <__assert_fail@plt+0x6238>
   17678:	mov	r3, #0
   1767c:	ldrd	r4, [sp]
   17680:	mov	r0, r3
   17684:	ldrd	r6, [sp, #8]
   17688:	ldr	r8, [sp, #16]
   1768c:	add	sp, sp, #20
   17690:	pop	{pc}		; (ldr pc, [sp], #4)
   17694:	ldrb	r3, [r0, #88]	; 0x58
   17698:	add	r2, r2, r2, lsl #1
   1769c:	mov	r6, #2
   176a0:	lsl	r2, r2, r6
   176a4:	orr	r3, r3, #1
   176a8:	strb	r3, [r0, #88]	; 0x58
   176ac:	ldr	r3, [r1, #4]
   176b0:	cmp	r3, #0
   176b4:	ldrne	r3, [r3, #12]
   176b8:	ldreq	r3, [r1, #16]
   176bc:	ldr	r5, [r3, #28]
   176c0:	ldr	r3, [r1, #8]
   176c4:	cmp	r3, #0
   176c8:	ldrne	r3, [r3, #12]
   176cc:	ldreq	r3, [r1, #16]
   176d0:	ldr	r7, [r3, #28]
   176d4:	ldr	r3, [r0, #20]
   176d8:	mov	r0, #8
   176dc:	str	r6, [r3, r2]
   176e0:	add	r4, r3, r2
   176e4:	bl	26190 <__assert_fail@plt+0x14c38>
   176e8:	cmp	r0, #0
   176ec:	str	r0, [r4, #8]
   176f0:	beq	177d8 <__assert_fail@plt+0x6280>
   176f4:	cmp	r5, r7
   176f8:	beq	1777c <__assert_fail@plt+0x6224>
   176fc:	mov	r3, #0
   17700:	str	r6, [r4, #4]
   17704:	stmlt	r0, {r5, r7}
   17708:	strge	r7, [r0]
   1770c:	strge	r5, [r0, #4]
   17710:	b	1767c <__assert_fail@plt+0x6124>
   17714:	ldr	r5, [r0, #20]
   17718:	add	r2, r2, r2, lsl #1
   1771c:	mov	r3, #1
   17720:	mov	r0, #4
   17724:	ldr	r1, [r1, #16]
   17728:	lsl	r4, r2, #2
   1772c:	add	r6, r5, r4
   17730:	ldr	r7, [r1, #28]
   17734:	str	r3, [r5, r4]
   17738:	str	r3, [r6, #4]
   1773c:	bl	26190 <__assert_fail@plt+0x14c38>
   17740:	cmp	r0, #0
   17744:	str	r0, [r6, #8]
   17748:	moveq	r3, #12
   1774c:	streq	r0, [r6, #4]
   17750:	streq	r0, [r5, r4]
   17754:	beq	1767c <__assert_fail@plt+0x6124>
   17758:	mov	r3, #0
   1775c:	str	r7, [r0]
   17760:	b	1767c <__assert_fail@plt+0x6124>
   17764:	ldr	ip, [r1, #16]
   17768:	mov	r3, #0
   1776c:	ldr	r1, [r0, #12]
   17770:	ldr	r0, [ip, #28]
   17774:	str	r0, [r1, r2, lsl #2]
   17778:	b	1767c <__assert_fail@plt+0x6124>
   1777c:	mov	r2, #1
   17780:	mov	r3, #0
   17784:	str	r2, [r4, #4]
   17788:	str	r5, [r0]
   1778c:	b	1767c <__assert_fail@plt+0x6124>
   17790:	ldr	r6, [r0, #20]
   17794:	add	r2, r2, r2, lsl #1
   17798:	mov	r1, #1
   1779c:	mov	r0, r3
   177a0:	lsl	r5, r2, #2
   177a4:	add	r7, r6, r5
   177a8:	str	r1, [r6, r5]
   177ac:	str	r1, [r7, #4]
   177b0:	bl	26190 <__assert_fail@plt+0x14c38>
   177b4:	cmp	r0, #0
   177b8:	str	r0, [r7, #8]
   177bc:	moveq	r3, #12
   177c0:	streq	r0, [r7, #4]
   177c4:	streq	r0, [r6, r5]
   177c8:	beq	1767c <__assert_fail@plt+0x6124>
   177cc:	mov	r3, #0
   177d0:	str	r4, [r0]
   177d4:	b	1767c <__assert_fail@plt+0x6124>
   177d8:	mov	r3, #12
   177dc:	b	1767c <__assert_fail@plt+0x6124>
   177e0:	ldr	r3, [r0]
   177e4:	strd	r4, [sp, #-16]!
   177e8:	mov	r4, r0
   177ec:	str	r6, [sp, #8]
   177f0:	mov	r6, r1
   177f4:	str	lr, [sp, #12]
   177f8:	cmp	r3, #0
   177fc:	beq	17834 <__assert_fail@plt+0x62dc>
   17800:	ldr	r1, [r0, #4]
   17804:	ldr	r0, [r0, #8]
   17808:	cmp	r1, #0
   1780c:	bne	17878 <__assert_fail@plt+0x6320>
   17810:	str	r6, [r0]
   17814:	mov	r0, #1
   17818:	ldr	r3, [r4, #4]
   1781c:	add	r3, r3, r0
   17820:	str	r3, [r4, #4]
   17824:	ldrd	r4, [sp]
   17828:	ldr	r6, [sp, #8]
   1782c:	add	sp, sp, #12
   17830:	pop	{pc}		; (ldr pc, [sp], #4)
   17834:	mov	r5, #1
   17838:	mov	r0, #4
   1783c:	str	r5, [r4]
   17840:	str	r5, [r4, #4]
   17844:	bl	26190 <__assert_fail@plt+0x14c38>
   17848:	mov	r3, r0
   1784c:	cmp	r0, #0
   17850:	str	r0, [r4, #8]
   17854:	streq	r3, [r4]
   17858:	streq	r3, [r4, #4]
   1785c:	beq	17824 <__assert_fail@plt+0x62cc>
   17860:	mov	r0, r5
   17864:	str	r6, [r3]
   17868:	ldrd	r4, [sp]
   1786c:	ldr	r6, [sp, #8]
   17870:	add	sp, sp, #12
   17874:	pop	{pc}		; (ldr pc, [sp], #4)
   17878:	cmp	r3, r1
   1787c:	beq	17900 <__assert_fail@plt+0x63a8>
   17880:	ldr	r2, [r0]
   17884:	mov	r3, r1
   17888:	cmp	r2, r6
   1788c:	ble	178b4 <__assert_fail@plt+0x635c>
   17890:	cmp	r1, #0
   17894:	ble	178e8 <__assert_fail@plt+0x6390>
   17898:	add	r1, r0, r1, lsl #2
   1789c:	ldr	r3, [r1, #-4]
   178a0:	str	r3, [r1], #-4
   178a4:	cmp	r1, r0
   178a8:	bne	1789c <__assert_fail@plt+0x6344>
   178ac:	mov	r3, #0
   178b0:	b	178e8 <__assert_fail@plt+0x6390>
   178b4:	sub	r3, r1, #-1073741823	; 0xc0000001
   178b8:	ldr	r2, [r0, r3, lsl #2]
   178bc:	lsl	r3, r3, #2
   178c0:	cmp	r6, r2
   178c4:	bge	178e4 <__assert_fail@plt+0x638c>
   178c8:	add	r3, r3, #4
   178cc:	add	r3, r0, r3
   178d0:	str	r2, [r3], #-4
   178d4:	sub	r1, r1, #1
   178d8:	ldr	r2, [r3, #-4]
   178dc:	cmp	r2, r6
   178e0:	bgt	178d0 <__assert_fail@plt+0x6378>
   178e4:	mov	r3, r1
   178e8:	str	r6, [r0, r3, lsl #2]
   178ec:	mov	r0, #1
   178f0:	ldr	r3, [r4, #4]
   178f4:	add	r3, r3, r0
   178f8:	str	r3, [r4, #4]
   178fc:	b	17824 <__assert_fail@plt+0x62cc>
   17900:	lsl	r3, r1, #1
   17904:	lsl	r1, r1, #3
   17908:	str	r3, [r4]
   1790c:	bl	261cc <__assert_fail@plt+0x14c74>
   17910:	cmp	r0, #0
   17914:	beq	17824 <__assert_fail@plt+0x62cc>
   17918:	str	r0, [r4, #8]
   1791c:	ldr	r1, [r4, #4]
   17920:	b	17880 <__assert_fail@plt+0x6328>
   17924:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17928:	mov	r4, r0
   1792c:	mov	r5, r2
   17930:	strd	r6, [sp, #8]
   17934:	mov	r7, r1
   17938:	strd	r8, [sp, #16]
   1793c:	strd	sl, [sp, #24]
   17940:	mov	sl, #0
   17944:	str	lr, [sp, #32]
   17948:	sub	sp, sp, #20
   1794c:	ldr	r9, [sp, #56]	; 0x38
   17950:	str	r3, [sp, #12]
   17954:	ldr	r2, [r4]
   17958:	mov	r6, r5
   1795c:	ldr	r1, [r4, #20]
   17960:	add	ip, r2, r7, lsl #3
   17964:	ldrb	r3, [ip, #4]
   17968:	cmp	r3, #4
   1796c:	beq	17afc <__assert_fail@plt+0x65a4>
   17970:	add	r8, r7, r7, lsl #1
   17974:	lsl	r8, r8, #2
   17978:	add	r3, r1, r8
   1797c:	ldr	r0, [r3, #4]
   17980:	cmp	r0, #0
   17984:	beq	17bb4 <__assert_fail@plt+0x665c>
   17988:	ldr	r3, [r3, #8]
   1798c:	add	r6, r5, r5, lsl #1
   17990:	cmp	r0, #1
   17994:	lsl	r6, r6, #2
   17998:	add	r0, r1, r6
   1799c:	ldr	fp, [r3]
   179a0:	beq	17a90 <__assert_fail@plt+0x6538>
   179a4:	ldr	r5, [r4, #8]
   179a8:	sub	r1, r5, #1
   179ac:	add	ip, r2, r1, lsl #3
   179b0:	cmp	r1, #0
   179b4:	movle	lr, #0
   179b8:	movgt	lr, #1
   179bc:	ldrb	r7, [ip, #6]
   179c0:	str	sl, [r0, #4]
   179c4:	ands	r3, lr, r7, lsr #2
   179c8:	beq	17b5c <__assert_fail@plt+0x6604>
   179cc:	ldr	lr, [r4, #16]
   179d0:	add	r2, r2, r5, lsl #3
   179d4:	sub	r2, r2, ip
   179d8:	sub	r2, r2, #16
   179dc:	add	lr, lr, r5, lsl #2
   179e0:	b	17a04 <__assert_fail@plt+0x64ac>
   179e4:	add	ip, ip, r2
   179e8:	sub	r1, r1, #1
   179ec:	ldrb	r7, [ip, #6]
   179f0:	cmp	r1, #0
   179f4:	movle	r5, #0
   179f8:	movgt	r5, #1
   179fc:	ands	r3, r5, r7, lsr #2
   17a00:	beq	17b5c <__assert_fail@plt+0x6604>
   17a04:	ldr	r5, [lr, #-4]!
   17a08:	cmp	r5, fp
   17a0c:	bne	179e4 <__assert_fail@plt+0x648c>
   17a10:	ldr	r7, [ip, #4]
   17a14:	ubfx	r7, r7, #8, #10
   17a18:	cmp	r9, r7
   17a1c:	bne	179e4 <__assert_fail@plt+0x648c>
   17a20:	bl	177e0 <__assert_fail@plt+0x6288>
   17a24:	cmp	r0, #0
   17a28:	beq	17a70 <__assert_fail@plt+0x6518>
   17a2c:	ldr	r3, [r4, #20]
   17a30:	mov	r2, r9
   17a34:	mov	r0, r4
   17a38:	add	r8, r3, r8
   17a3c:	ldr	r3, [r8, #8]
   17a40:	ldr	r7, [r3, #4]
   17a44:	mov	r1, r7
   17a48:	bl	173f4 <__assert_fail@plt+0x5e9c>
   17a4c:	cmn	r0, #1
   17a50:	mov	r5, r0
   17a54:	beq	17a70 <__assert_fail@plt+0x6518>
   17a58:	mov	r1, r0
   17a5c:	ldr	r0, [r4, #20]
   17a60:	add	r0, r0, r6
   17a64:	bl	177e0 <__assert_fail@plt+0x6288>
   17a68:	cmp	r0, #0
   17a6c:	bne	17954 <__assert_fail@plt+0x63fc>
   17a70:	mov	r0, #12
   17a74:	add	sp, sp, #20
   17a78:	ldrd	r4, [sp]
   17a7c:	ldrd	r6, [sp, #8]
   17a80:	ldrd	r8, [sp, #16]
   17a84:	ldrd	sl, [sp, #24]
   17a88:	add	sp, sp, #32
   17a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   17a90:	ldr	r2, [sp, #12]
   17a94:	cmp	r7, r5
   17a98:	str	sl, [r0, #4]
   17a9c:	sub	r2, r7, r2
   17aa0:	clz	r2, r2
   17aa4:	lsr	r2, r2, #5
   17aa8:	moveq	r2, #0
   17aac:	cmp	r2, #0
   17ab0:	bne	17bc4 <__assert_fail@plt+0x666c>
   17ab4:	ldr	r2, [ip, #4]
   17ab8:	mov	r1, fp
   17abc:	mov	r0, r4
   17ac0:	ubfx	r2, r2, #8, #10
   17ac4:	orr	r9, r9, r2
   17ac8:	mov	r2, r9
   17acc:	bl	173f4 <__assert_fail@plt+0x5e9c>
   17ad0:	cmn	r0, #1
   17ad4:	mov	r5, r0
   17ad8:	beq	17a70 <__assert_fail@plt+0x6518>
   17adc:	mov	r1, r0
   17ae0:	ldr	r0, [r4, #20]
   17ae4:	add	r0, r0, r6
   17ae8:	bl	177e0 <__assert_fail@plt+0x6288>
   17aec:	cmp	r0, #0
   17af0:	beq	17a70 <__assert_fail@plt+0x6518>
   17af4:	mov	r7, fp
   17af8:	b	17954 <__assert_fail@plt+0x63fc>
   17afc:	ldr	ip, [r4, #12]
   17b00:	add	r5, r5, r5, lsl #1
   17b04:	mov	r2, r9
   17b08:	lsl	fp, r7, #2
   17b0c:	mov	r0, r4
   17b10:	lsl	r8, r5, #2
   17b14:	add	r1, r1, r8
   17b18:	ldr	r7, [ip, r7, lsl #2]
   17b1c:	str	sl, [r1, #4]
   17b20:	mov	r1, r7
   17b24:	bl	173f4 <__assert_fail@plt+0x5e9c>
   17b28:	cmn	r0, #1
   17b2c:	mov	r5, r0
   17b30:	beq	17a70 <__assert_fail@plt+0x6518>
   17b34:	ldr	r2, [r4, #12]
   17b38:	mov	r1, r0
   17b3c:	ldr	r0, [r4, #20]
   17b40:	ldr	r3, [r2, fp]
   17b44:	add	r0, r0, r8
   17b48:	str	r3, [r2, r6, lsl #2]
   17b4c:	bl	177e0 <__assert_fail@plt+0x6288>
   17b50:	cmp	r0, #0
   17b54:	bne	17954 <__assert_fail@plt+0x63fc>
   17b58:	b	17a70 <__assert_fail@plt+0x6518>
   17b5c:	mov	r2, r9
   17b60:	mov	r1, fp
   17b64:	mov	r0, r4
   17b68:	bl	173f4 <__assert_fail@plt+0x5e9c>
   17b6c:	cmn	r0, #1
   17b70:	mov	r5, r0
   17b74:	beq	17a70 <__assert_fail@plt+0x6518>
   17b78:	ldr	r0, [r4, #20]
   17b7c:	mov	r1, r5
   17b80:	add	r0, r0, r6
   17b84:	bl	177e0 <__assert_fail@plt+0x6288>
   17b88:	cmp	r0, #0
   17b8c:	beq	17a70 <__assert_fail@plt+0x6518>
   17b90:	mov	r2, r5
   17b94:	mov	r1, fp
   17b98:	str	r9, [sp]
   17b9c:	mov	r0, r4
   17ba0:	ldr	r3, [sp, #12]
   17ba4:	bl	17924 <__assert_fail@plt+0x63cc>
   17ba8:	cmp	r0, #0
   17bac:	beq	17a2c <__assert_fail@plt+0x64d4>
   17bb0:	b	17a74 <__assert_fail@plt+0x651c>
   17bb4:	ldr	r3, [r4, #12]
   17bb8:	ldr	r2, [r3, r7, lsl #2]
   17bbc:	str	r2, [r3, r5, lsl #2]
   17bc0:	b	17a74 <__assert_fail@plt+0x651c>
   17bc4:	mov	r1, fp
   17bc8:	bl	177e0 <__assert_fail@plt+0x6288>
   17bcc:	cmp	r0, #0
   17bd0:	movne	r0, #0
   17bd4:	bne	17a74 <__assert_fail@plt+0x651c>
   17bd8:	b	17a70 <__assert_fail@plt+0x6518>
   17bdc:	ldr	r3, [r0, #36]	; 0x24
   17be0:	strd	r4, [sp, #-16]!
   17be4:	mov	r4, r0
   17be8:	mov	r5, r1
   17bec:	str	r6, [sp, #8]
   17bf0:	str	lr, [sp, #12]
   17bf4:	ldr	r6, [r0, #104]	; 0x68
   17bf8:	cmp	r3, r1
   17bfc:	bgt	17c3c <__assert_fail@plt+0x66e4>
   17c00:	ldr	r2, [r0, #48]	; 0x30
   17c04:	cmp	r3, r2
   17c08:	bge	17c3c <__assert_fail@plt+0x66e4>
   17c0c:	add	r1, r5, #1
   17c10:	mov	r0, r4
   17c14:	bl	17048 <__assert_fail@plt+0x5af0>
   17c18:	cmp	r0, #0
   17c1c:	bne	17c2c <__assert_fail@plt+0x66d4>
   17c20:	cmp	r6, r5
   17c24:	movge	r0, #0
   17c28:	blt	17c58 <__assert_fail@plt+0x6700>
   17c2c:	ldrd	r4, [sp]
   17c30:	ldr	r6, [sp, #8]
   17c34:	add	sp, sp, #12
   17c38:	pop	{pc}		; (ldr pc, [sp], #4)
   17c3c:	ldr	r3, [r4, #28]
   17c40:	cmp	r3, r5
   17c44:	bgt	17c20 <__assert_fail@plt+0x66c8>
   17c48:	ldr	r2, [r4, #48]	; 0x30
   17c4c:	cmp	r3, r2
   17c50:	bge	17c20 <__assert_fail@plt+0x66c8>
   17c54:	b	17c0c <__assert_fail@plt+0x66b4>
   17c58:	ldr	r3, [r4, #100]	; 0x64
   17c5c:	sub	r2, r5, r6
   17c60:	add	r0, r6, #1
   17c64:	lsl	r2, r2, #2
   17c68:	mov	r1, #0
   17c6c:	add	r0, r3, r0, lsl #2
   17c70:	bl	1145c <memset@plt>
   17c74:	str	r5, [r4, #104]	; 0x68
   17c78:	mov	r0, #0
   17c7c:	ldrd	r4, [sp]
   17c80:	ldr	r6, [sp, #8]
   17c84:	add	sp, sp, #12
   17c88:	pop	{pc}		; (ldr pc, [sp], #4)
   17c8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17c90:	subs	r4, r0, #0
   17c94:	strd	r6, [sp, #8]
   17c98:	str	r8, [sp, #16]
   17c9c:	str	lr, [sp, #20]
   17ca0:	ldr	r7, [sp, #28]
   17ca4:	beq	17d50 <__assert_fail@plt+0x67f8>
   17ca8:	ldr	ip, [r4]
   17cac:	cmp	ip, #0
   17cb0:	beq	17d50 <__assert_fail@plt+0x67f8>
   17cb4:	sub	ip, ip, #1
   17cb8:	ldr	lr, [r4, #8]
   17cbc:	mov	r0, r3
   17cc0:	add	r5, ip, ip, lsl #1
   17cc4:	mov	r8, r1
   17cc8:	lsl	r6, r2, #3
   17ccc:	lsl	r5, r5, #3
   17cd0:	mov	r2, r6
   17cd4:	ldr	r3, [lr, r5]
   17cd8:	add	lr, lr, r5
   17cdc:	ldr	r1, [lr, #8]
   17ce0:	str	ip, [r4]
   17ce4:	str	r3, [r8]
   17ce8:	bl	11264 <memcpy@plt>
   17cec:	ldr	r3, [r4, #8]
   17cf0:	mov	r2, r6
   17cf4:	ldr	r0, [sp, #24]
   17cf8:	add	r3, r3, r5
   17cfc:	ldr	r1, [r3, #8]
   17d00:	add	r1, r1, r6
   17d04:	bl	11264 <memcpy@plt>
   17d08:	ldr	r0, [r7, #8]
   17d0c:	bl	13b9c <__assert_fail@plt+0x2644>
   17d10:	ldr	r3, [r4, #8]
   17d14:	add	r3, r3, r5
   17d18:	ldr	r0, [r3, #8]
   17d1c:	bl	13b9c <__assert_fail@plt+0x2644>
   17d20:	ldr	r3, [r4, #8]
   17d24:	add	r5, r3, r5
   17d28:	ldr	r0, [r5, #4]
   17d2c:	ldrd	r2, [r5, #12]
   17d30:	strd	r2, [r7]
   17d34:	ldr	r3, [r5, #20]
   17d38:	str	r3, [r7, #8]
   17d3c:	ldrd	r4, [sp]
   17d40:	ldrd	r6, [sp, #8]
   17d44:	ldr	r8, [sp, #16]
   17d48:	add	sp, sp, #20
   17d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d50:	mvn	r0, #0
   17d54:	b	17d3c <__assert_fail@plt+0x67e4>
   17d58:	ldr	r3, [r0, #28]
   17d5c:	add	ip, r1, #1
   17d60:	cmp	ip, r3
   17d64:	bge	17dac <__assert_fail@plt+0x6854>
   17d68:	ldr	r2, [r0, #8]
   17d6c:	ldr	r0, [r2, ip, lsl #2]
   17d70:	add	r2, r2, ip, lsl #2
   17d74:	cmn	r0, #1
   17d78:	bne	17dac <__assert_fail@plt+0x6854>
   17d7c:	sub	r0, r3, r1
   17d80:	mov	r3, #1
   17d84:	b	17d94 <__assert_fail@plt+0x683c>
   17d88:	ldr	ip, [r2, #4]!
   17d8c:	cmn	ip, #1
   17d90:	bne	17da4 <__assert_fail@plt+0x684c>
   17d94:	add	r3, r3, #1
   17d98:	cmp	r3, r0
   17d9c:	bne	17d88 <__assert_fail@plt+0x6830>
   17da0:	bx	lr
   17da4:	mov	r0, r3
   17da8:	bx	lr
   17dac:	mov	r0, #1
   17db0:	bx	lr
   17db4:	cmp	r0, #0
   17db8:	ble	17e34 <__assert_fail@plt+0x68dc>
   17dbc:	push	{lr}		; (str lr, [sp, #-4]!)
   17dc0:	sub	ip, r0, #1
   17dc4:	mov	r0, #0
   17dc8:	ldr	lr, [r1]
   17dcc:	cmp	r0, ip
   17dd0:	bcs	17e0c <__assert_fail@plt+0x68b4>
   17dd4:	add	r1, r0, ip
   17dd8:	lsr	r1, r1, #1
   17ddc:	ldr	r3, [lr, r1, lsl #2]
   17de0:	cmp	r2, r3
   17de4:	ble	17dfc <__assert_fail@plt+0x68a4>
   17de8:	b	17e20 <__assert_fail@plt+0x68c8>
   17dec:	ldr	ip, [lr, r3, lsl #2]
   17df0:	cmp	ip, r2
   17df4:	blt	17e28 <__assert_fail@plt+0x68d0>
   17df8:	mov	r1, r3
   17dfc:	add	r3, r0, r1
   17e00:	cmp	r0, r1
   17e04:	lsr	r3, r3, #1
   17e08:	bcc	17dec <__assert_fail@plt+0x6894>
   17e0c:	ldr	r3, [lr, r0, lsl #2]
   17e10:	cmp	r2, r3
   17e14:	addeq	r0, r0, #1
   17e18:	movne	r0, #0
   17e1c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e20:	mov	r3, r1
   17e24:	mov	r1, ip
   17e28:	add	r0, r3, #1
   17e2c:	mov	ip, r1
   17e30:	b	17dcc <__assert_fail@plt+0x6874>
   17e34:	mov	r0, #0
   17e38:	bx	lr
   17e3c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17e40:	mov	r5, r1
   17e44:	mov	r4, r2
   17e48:	strd	r6, [sp, #8]
   17e4c:	mov	r6, r0
   17e50:	strd	r8, [sp, #16]
   17e54:	mov	r9, r3
   17e58:	add	r8, r1, #8
   17e5c:	str	lr, [sp, #24]
   17e60:	sub	sp, sp, #12
   17e64:	ldr	r7, [sp, #40]	; 0x28
   17e68:	mov	r1, r8
   17e6c:	mov	r2, r4
   17e70:	ldr	r0, [r5, #4]
   17e74:	bl	17db4 <__assert_fail@plt+0x685c>
   17e78:	cmp	r0, #0
   17e7c:	mov	r1, r4
   17e80:	mov	r0, r5
   17e84:	bne	17f4c <__assert_fail@plt+0x69f4>
   17e88:	ldr	r3, [r6]
   17e8c:	add	r2, r3, r4, lsl #3
   17e90:	ldrb	r2, [r2, #4]
   17e94:	cmp	r2, r7
   17e98:	bne	17ea8 <__assert_fail@plt+0x6950>
   17e9c:	ldr	r3, [r3, r4, lsl #3]
   17ea0:	cmp	r3, r9
   17ea4:	beq	17f14 <__assert_fail@plt+0x69bc>
   17ea8:	bl	177e0 <__assert_fail@plt+0x6288>
   17eac:	cmp	r0, #0
   17eb0:	add	r4, r4, r4, lsl #1
   17eb4:	beq	17f30 <__assert_fail@plt+0x69d8>
   17eb8:	ldr	r3, [r6, #20]
   17ebc:	lsl	r4, r4, #2
   17ec0:	add	r3, r3, r4
   17ec4:	ldr	r2, [r3, #4]
   17ec8:	cmp	r2, #0
   17ecc:	beq	17f4c <__assert_fail@plt+0x69f4>
   17ed0:	cmp	r2, #2
   17ed4:	ldr	r2, [r3, #8]
   17ed8:	beq	17ee4 <__assert_fail@plt+0x698c>
   17edc:	ldr	r4, [r2]
   17ee0:	b	17e68 <__assert_fail@plt+0x6910>
   17ee4:	mov	r3, r9
   17ee8:	mov	r1, r5
   17eec:	ldr	r2, [r2, #4]
   17ef0:	mov	r0, r6
   17ef4:	str	r7, [sp]
   17ef8:	bl	17e3c <__assert_fail@plt+0x68e4>
   17efc:	cmp	r0, #0
   17f00:	bne	17f34 <__assert_fail@plt+0x69dc>
   17f04:	ldr	r3, [r6, #20]
   17f08:	add	r4, r3, r4
   17f0c:	ldr	r2, [r4, #8]
   17f10:	b	17edc <__assert_fail@plt+0x6984>
   17f14:	cmp	r7, #9
   17f18:	bne	17f4c <__assert_fail@plt+0x69f4>
   17f1c:	mov	r1, r4
   17f20:	mov	r0, r5
   17f24:	bl	177e0 <__assert_fail@plt+0x6288>
   17f28:	cmp	r0, #0
   17f2c:	bne	17f4c <__assert_fail@plt+0x69f4>
   17f30:	mov	r0, #12
   17f34:	add	sp, sp, #12
   17f38:	ldrd	r4, [sp]
   17f3c:	ldrd	r6, [sp, #8]
   17f40:	ldrd	r8, [sp, #16]
   17f44:	add	sp, sp, #24
   17f48:	pop	{pc}		; (ldr pc, [sp], #4)
   17f4c:	mov	r0, #0
   17f50:	b	17f34 <__assert_fail@plt+0x69dc>
   17f54:	ldr	r3, [r0]
   17f58:	cmp	r2, r3
   17f5c:	bge	17f80 <__assert_fail@plt+0x6a28>
   17f60:	ldr	r3, [r1]
   17f64:	add	r3, r3, r2, lsl #2
   17f68:	ldr	r1, [r3, #4]
   17f6c:	add	r2, r2, #1
   17f70:	str	r1, [r3], #4
   17f74:	ldr	r1, [r0]
   17f78:	cmp	r2, r1
   17f7c:	blt	17f68 <__assert_fail@plt+0x6a10>
   17f80:	bx	lr
   17f84:	ldrb	r3, [r1, #24]
   17f88:	cmp	r3, #4
   17f8c:	beq	17ff8 <__assert_fail@plt+0x6aa0>
   17f90:	cmp	r3, #17
   17f94:	beq	17fa0 <__assert_fail@plt+0x6a48>
   17f98:	mov	r0, #0
   17f9c:	bx	lr
   17fa0:	ldr	r3, [r1, #4]
   17fa4:	cmp	r3, #0
   17fa8:	beq	17f98 <__assert_fail@plt+0x6a40>
   17fac:	ldrb	r2, [r3, #24]
   17fb0:	cmp	r2, #17
   17fb4:	bne	17f98 <__assert_fail@plt+0x6a40>
   17fb8:	ldr	r2, [r3, #4]
   17fbc:	ldr	r3, [r3, #20]
   17fc0:	cmp	r2, #0
   17fc4:	str	r2, [r1, #4]
   17fc8:	strne	r1, [r2]
   17fcc:	cmp	r3, #31
   17fd0:	ldr	r1, [r1, #20]
   17fd4:	ldr	r2, [r0, #132]	; 0x84
   17fd8:	ldr	r1, [r2, r1, lsl #2]
   17fdc:	str	r1, [r2, r3, lsl #2]
   17fe0:	bgt	17f98 <__assert_fail@plt+0x6a40>
   17fe4:	ldr	r2, [r0, #80]	; 0x50
   17fe8:	mov	r1, #1
   17fec:	bic	r3, r2, r1, lsl r3
   17ff0:	str	r3, [r0, #80]	; 0x50
   17ff4:	b	17f98 <__assert_fail@plt+0x6a40>
   17ff8:	ldr	r2, [r0, #132]	; 0x84
   17ffc:	cmp	r2, #0
   18000:	beq	17f98 <__assert_fail@plt+0x6a40>
   18004:	push	{lr}		; (str lr, [sp, #-4]!)
   18008:	mov	ip, #1
   1800c:	ldr	lr, [r1, #20]
   18010:	ldr	r3, [r0, #80]	; 0x50
   18014:	ldr	r2, [r2, lr, lsl #2]
   18018:	orr	r3, r3, ip, lsl r2
   1801c:	str	r2, [r1, #20]
   18020:	str	r3, [r0, #80]	; 0x50
   18024:	mov	r0, #0
   18028:	pop	{pc}		; (ldr pc, [sp], #4)
   1802c:	ldrb	r3, [r1, #24]
   18030:	ldr	r2, [r1, #4]
   18034:	cmp	r3, #11
   18038:	streq	r1, [r2, #16]
   1803c:	beq	1805c <__assert_fail@plt+0x6b04>
   18040:	cmp	r3, #16
   18044:	bne	18064 <__assert_fail@plt+0x6b0c>
   18048:	ldr	r3, [r1, #8]
   1804c:	ldr	r0, [r3, #12]
   18050:	str	r0, [r2, #16]
   18054:	ldr	r2, [r1, #16]
   18058:	str	r2, [r3, #16]
   1805c:	mov	r0, #0
   18060:	bx	lr
   18064:	cmp	r2, #0
   18068:	mov	r0, #0
   1806c:	ldrne	r3, [r1, #16]
   18070:	strne	r3, [r2, #16]
   18074:	ldr	r3, [r1, #8]
   18078:	cmp	r3, #0
   1807c:	ldrne	r2, [r1, #16]
   18080:	strne	r2, [r3, #16]
   18084:	bx	lr
   18088:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1808c:	mov	r4, #0
   18090:	strd	r6, [sp, #8]
   18094:	strd	r8, [sp, #16]
   18098:	ldr	r9, [r0, #108]	; 0x6c
   1809c:	strd	sl, [sp, #24]
   180a0:	str	lr, [sp, #32]
   180a4:	sub	sp, sp, #28
   180a8:	ldr	r6, [sp, #64]	; 0x40
   180ac:	ldr	r7, [sp, #72]	; 0x48
   180b0:	mov	ip, r9
   180b4:	ldr	lr, [r0, #84]	; 0x54
   180b8:	str	lr, [sp, #8]
   180bc:	cmp	r4, ip
   180c0:	bge	1811c <__assert_fail@plt+0x6bc4>
   180c4:	add	lr, r4, ip
   180c8:	ldr	r5, [r0, #116]	; 0x74
   180cc:	add	lr, lr, lr, lsr #31
   180d0:	asr	lr, lr, #1
   180d4:	add	r8, lr, lr, lsl #1
   180d8:	add	r8, r5, r8, lsl #3
   180dc:	ldr	r8, [r8, #4]
   180e0:	cmp	r6, r8
   180e4:	ble	1810c <__assert_fail@plt+0x6bb4>
   180e8:	b	1826c <__assert_fail@plt+0x6d14>
   180ec:	asr	ip, ip, #1
   180f0:	add	r8, ip, ip, lsl #1
   180f4:	mov	sl, ip
   180f8:	add	r8, r5, r8, lsl #3
   180fc:	ldr	r8, [r8, #4]
   18100:	cmp	r8, r6
   18104:	blt	18274 <__assert_fail@plt+0x6d1c>
   18108:	mov	lr, ip
   1810c:	add	ip, r4, lr
   18110:	cmp	r4, lr
   18114:	add	ip, ip, ip, lsr #31
   18118:	blt	180ec <__assert_fail@plt+0x6b94>
   1811c:	cmp	r9, r4
   18120:	ble	182b0 <__assert_fail@plt+0x6d58>
   18124:	ldr	ip, [r0, #116]	; 0x74
   18128:	add	lr, r4, r4, lsl #1
   1812c:	add	ip, ip, lr, lsl #3
   18130:	ldr	ip, [ip, #4]
   18134:	cmp	r6, ip
   18138:	mvnne	r4, #0
   1813c:	mov	ip, r9
   18140:	mov	r5, #0
   18144:	cmp	r5, ip
   18148:	bge	181a4 <__assert_fail@plt+0x6c4c>
   1814c:	add	lr, r5, ip
   18150:	ldr	r8, [r0, #116]	; 0x74
   18154:	add	lr, lr, lr, lsr #31
   18158:	asr	lr, lr, #1
   1815c:	add	sl, lr, lr, lsl #1
   18160:	add	sl, r8, sl, lsl #3
   18164:	ldr	sl, [sl, #4]
   18168:	cmp	r7, sl
   1816c:	ble	18194 <__assert_fail@plt+0x6c3c>
   18170:	b	18280 <__assert_fail@plt+0x6d28>
   18174:	asr	ip, ip, #1
   18178:	add	sl, ip, ip, lsl #1
   1817c:	mov	fp, ip
   18180:	add	sl, r8, sl, lsl #3
   18184:	ldr	sl, [sl, #4]
   18188:	cmp	sl, r7
   1818c:	blt	18288 <__assert_fail@plt+0x6d30>
   18190:	mov	lr, ip
   18194:	add	ip, r5, lr
   18198:	cmp	r5, lr
   1819c:	add	ip, ip, ip, lsr #31
   181a0:	blt	18174 <__assert_fail@plt+0x6c1c>
   181a4:	cmp	r9, r5
   181a8:	ble	182b8 <__assert_fail@plt+0x6d60>
   181ac:	ldr	ip, [r0, #116]	; 0x74
   181b0:	add	lr, r5, r5, lsl #1
   181b4:	add	ip, ip, lr, lsl #3
   181b8:	ldr	ip, [ip, #4]
   181bc:	cmp	r7, ip
   181c0:	mvnne	r5, #0
   181c4:	ldr	ip, [r1]
   181c8:	cmp	ip, #0
   181cc:	ble	182a8 <__assert_fail@plt+0x6d50>
   181d0:	mov	r9, r2
   181d4:	mov	r8, r0
   181d8:	str	r3, [sp, #12]
   181dc:	mov	fp, #0
   181e0:	str	r4, [sp, #16]
   181e4:	str	r1, [sp, #20]
   181e8:	ldr	r1, [r9]
   181ec:	mov	r0, r8
   181f0:	ldrd	r2, [sp, #8]
   181f4:	ldr	ip, [r8, #116]	; 0x74
   181f8:	ldr	r1, [r1, fp, lsl #2]
   181fc:	ldr	r2, [r2]
   18200:	add	lr, r1, r1, lsl #1
   18204:	ldr	ip, [ip, lr, lsl #3]
   18208:	ldr	r4, [r2, ip, lsl #3]
   1820c:	str	r6, [sp]
   18210:	ldr	r2, [sp, #16]
   18214:	str	r2, [sp, #4]
   18218:	mov	r2, r4
   1821c:	bl	16580 <__assert_fail@plt+0x5028>
   18220:	ldr	r1, [r9]
   18224:	mov	sl, r0
   18228:	mov	r2, r4
   1822c:	mov	r0, r8
   18230:	ldr	r3, [sp, #68]	; 0x44
   18234:	ldr	r1, [r1, fp, lsl #2]
   18238:	str	r7, [sp]
   1823c:	str	r5, [sp, #4]
   18240:	bl	16580 <__assert_fail@plt+0x5028>
   18244:	cmp	sl, r0
   18248:	beq	18294 <__assert_fail@plt+0x6d3c>
   1824c:	mov	r0, #1
   18250:	add	sp, sp, #28
   18254:	ldrd	r4, [sp]
   18258:	ldrd	r6, [sp, #8]
   1825c:	ldrd	r8, [sp, #16]
   18260:	ldrd	sl, [sp, #24]
   18264:	add	sp, sp, #32
   18268:	pop	{pc}		; (ldr pc, [sp], #4)
   1826c:	mov	sl, lr
   18270:	mov	lr, ip
   18274:	add	r4, sl, #1
   18278:	mov	ip, lr
   1827c:	b	180bc <__assert_fail@plt+0x6b64>
   18280:	mov	fp, lr
   18284:	mov	lr, ip
   18288:	add	r5, fp, #1
   1828c:	mov	ip, lr
   18290:	b	18144 <__assert_fail@plt+0x6bec>
   18294:	ldr	r3, [sp, #20]
   18298:	add	fp, fp, #1
   1829c:	ldr	r3, [r3]
   182a0:	cmp	fp, r3
   182a4:	blt	181e8 <__assert_fail@plt+0x6c90>
   182a8:	mov	r0, #0
   182ac:	b	18250 <__assert_fail@plt+0x6cf8>
   182b0:	mvn	r4, #0
   182b4:	b	1813c <__assert_fail@plt+0x6be4>
   182b8:	mvn	r5, #0
   182bc:	b	181c4 <__assert_fail@plt+0x6c6c>
   182c0:	strd	r4, [sp, #-16]!
   182c4:	mov	r4, r0
   182c8:	mov	r5, r2
   182cc:	str	r6, [sp, #8]
   182d0:	mov	r6, r1
   182d4:	str	lr, [sp, #12]
   182d8:	b	182e0 <__assert_fail@plt+0x6d88>
   182dc:	mov	r4, r3
   182e0:	mov	r1, r4
   182e4:	mov	r0, r5
   182e8:	blx	r6
   182ec:	cmp	r0, #0
   182f0:	bne	18320 <__assert_fail@plt+0x6dc8>
   182f4:	ldr	r3, [r4, #4]
   182f8:	cmp	r3, #0
   182fc:	bne	182dc <__assert_fail@plt+0x6d84>
   18300:	ldr	r2, [r4, #8]
   18304:	cmp	r2, #0
   18308:	cmpne	r2, r3
   1830c:	mov	r3, r4
   18310:	bne	18330 <__assert_fail@plt+0x6dd8>
   18314:	ldr	r2, [r4]
   18318:	subs	r4, r2, #0
   1831c:	bne	18300 <__assert_fail@plt+0x6da8>
   18320:	ldrd	r4, [sp]
   18324:	ldr	r6, [sp, #8]
   18328:	add	sp, sp, #12
   1832c:	pop	{pc}		; (ldr pc, [sp], #4)
   18330:	mov	r3, r2
   18334:	b	182dc <__assert_fail@plt+0x6d84>
   18338:	ldr	ip, [r1, #4]
   1833c:	cmp	ip, #0
   18340:	beq	184d8 <__assert_fail@plt+0x6f80>
   18344:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18348:	strd	r6, [sp, #8]
   1834c:	str	lr, [sp, #28]
   18350:	ldr	lr, [r2, #4]
   18354:	strd	r8, [sp, #16]
   18358:	str	sl, [sp, #24]
   1835c:	cmp	lr, #0
   18360:	beq	18460 <__assert_fail@plt+0x6f08>
   18364:	ldr	r4, [r0]
   18368:	mov	r9, r2
   1836c:	add	r2, ip, lr
   18370:	mov	r8, r1
   18374:	mov	r7, r0
   18378:	ldmib	r0, {r3, sl}
   1837c:	add	r1, r2, r3
   18380:	cmp	r1, r4
   18384:	bgt	184e8 <__assert_fail@plt+0x6f90>
   18388:	ldr	r0, [r8, #8]
   1838c:	add	r1, r3, ip
   18390:	sub	r5, ip, #1
   18394:	sub	r6, lr, #1
   18398:	add	r1, r1, lr
   1839c:	ldr	r2, [r9, #8]
   183a0:	sub	r3, r3, #1
   183a4:	ldr	ip, [r0, r5, lsl #2]
   183a8:	ldr	lr, [r2, r6, lsl #2]
   183ac:	cmp	ip, lr
   183b0:	beq	183cc <__assert_fail@plt+0x6e74>
   183b4:	bge	18480 <__assert_fail@plt+0x6f28>
   183b8:	subs	r6, r6, #1
   183bc:	bmi	1841c <__assert_fail@plt+0x6ec4>
   183c0:	ldr	lr, [r2, r6, lsl #2]
   183c4:	cmp	ip, lr
   183c8:	bne	183b4 <__assert_fail@plt+0x6e5c>
   183cc:	cmp	r3, #0
   183d0:	blt	183fc <__assert_fail@plt+0x6ea4>
   183d4:	ldr	r4, [sl, r3, lsl #2]
   183d8:	add	lr, sl, r3, lsl #2
   183dc:	cmp	r4, ip
   183e0:	bgt	183f4 <__assert_fail@plt+0x6e9c>
   183e4:	b	18490 <__assert_fail@plt+0x6f38>
   183e8:	ldr	r4, [lr, #-4]!
   183ec:	cmp	r4, ip
   183f0:	ble	18490 <__assert_fail@plt+0x6f38>
   183f4:	subs	r3, r3, #1
   183f8:	bcs	183e8 <__assert_fail@plt+0x6e90>
   183fc:	sub	r1, r1, #1
   18400:	str	ip, [sl, r1, lsl #2]
   18404:	subs	r5, r5, #1
   18408:	bmi	1841c <__assert_fail@plt+0x6ec4>
   1840c:	subs	r6, r6, #1
   18410:	bmi	1841c <__assert_fail@plt+0x6ec4>
   18414:	ldr	ip, [r0, r5, lsl #2]
   18418:	b	183c0 <__assert_fail@plt+0x6e68>
   1841c:	ldr	ip, [r7, #4]
   18420:	ldr	r0, [r8, #4]
   18424:	ldr	r2, [r9, #4]
   18428:	sub	r3, ip, #1
   1842c:	add	r0, ip, r0
   18430:	add	r0, r0, r2
   18434:	sub	r2, r0, r1
   18438:	sub	r0, r0, #1
   1843c:	add	ip, ip, r2
   18440:	cmp	r3, #0
   18444:	cmpge	r2, #0
   18448:	str	ip, [r7, #4]
   1844c:	bgt	184ac <__assert_fail@plt+0x6f54>
   18450:	lsl	r2, r2, #2
   18454:	add	r1, sl, r1, lsl #2
   18458:	mov	r0, sl
   1845c:	bl	11264 <memcpy@plt>
   18460:	mov	ip, #0
   18464:	ldrd	r4, [sp]
   18468:	mov	r0, ip
   1846c:	ldrd	r6, [sp, #8]
   18470:	ldrd	r8, [sp, #16]
   18474:	ldr	sl, [sp, #24]
   18478:	add	sp, sp, #28
   1847c:	pop	{pc}		; (ldr pc, [sp], #4)
   18480:	subs	r5, r5, #1
   18484:	bmi	1841c <__assert_fail@plt+0x6ec4>
   18488:	ldr	ip, [r0, r5, lsl #2]
   1848c:	b	183ac <__assert_fail@plt+0x6e54>
   18490:	cmp	r4, ip
   18494:	bne	183fc <__assert_fail@plt+0x6ea4>
   18498:	b	18404 <__assert_fail@plt+0x6eac>
   1849c:	sub	r3, r3, #1
   184a0:	str	ip, [sl, r4, lsl #2]
   184a4:	cmn	r3, #1
   184a8:	beq	184e0 <__assert_fail@plt+0x6f88>
   184ac:	ldr	lr, [sl, r0, lsl #2]
   184b0:	add	r4, r3, r2
   184b4:	ldr	ip, [sl, r3, lsl #2]
   184b8:	cmp	lr, ip
   184bc:	ble	1849c <__assert_fail@plt+0x6f44>
   184c0:	subs	r2, r2, #1
   184c4:	sub	r0, r0, #1
   184c8:	str	lr, [sl, r4, lsl #2]
   184cc:	bne	184ac <__assert_fail@plt+0x6f54>
   184d0:	ldr	sl, [r7, #8]
   184d4:	b	18454 <__assert_fail@plt+0x6efc>
   184d8:	mov	r0, ip
   184dc:	bx	lr
   184e0:	ldr	sl, [r7, #8]
   184e4:	b	18450 <__assert_fail@plt+0x6ef8>
   184e8:	add	r4, r2, r4
   184ec:	mov	r0, sl
   184f0:	lsl	r1, r4, #2
   184f4:	bl	261cc <__assert_fail@plt+0x14c74>
   184f8:	subs	sl, r0, #0
   184fc:	beq	18518 <__assert_fail@plt+0x6fc0>
   18500:	ldr	ip, [r8, #4]
   18504:	ldr	lr, [r9, #4]
   18508:	str	r4, [r7]
   1850c:	str	sl, [r7, #8]
   18510:	ldr	r3, [r7, #4]
   18514:	b	18388 <__assert_fail@plt+0x6e30>
   18518:	mov	ip, #12
   1851c:	b	18464 <__assert_fail@plt+0x6f0c>
   18520:	strd	r4, [sp, #-20]!	; 0xffffffec
   18524:	mov	r5, r0
   18528:	ldr	r0, [r1]
   1852c:	strd	r6, [sp, #8]
   18530:	str	lr, [sp, #16]
   18534:	sub	sp, sp, #20
   18538:	cmp	r0, #31
   1853c:	beq	185bc <__assert_fail@plt+0x7064>
   18540:	lsl	ip, r0, #5
   18544:	add	r4, r0, #1
   18548:	ldr	r0, [r5]
   1854c:	add	r7, ip, #4
   18550:	str	r4, [r1]
   18554:	add	lr, r0, ip
   18558:	mov	r6, #0
   1855c:	ldr	r1, [sp, #40]	; 0x28
   18560:	add	ip, ip, #16
   18564:	cmp	r2, r6
   18568:	str	r6, [lr, #4]
   1856c:	add	ip, r0, ip
   18570:	add	r0, r0, r7
   18574:	strd	r2, [lr, #8]
   18578:	mvn	r7, #0
   1857c:	ldrd	r4, [r1]
   18580:	strd	r4, [lr, #24]
   18584:	ldrb	r1, [ip, #14]
   18588:	bic	r1, r1, #12
   1858c:	strb	r1, [ip, #14]
   18590:	str	r6, [lr, #16]
   18594:	str	r6, [lr, #20]
   18598:	str	r7, [lr, #32]
   1859c:	strne	r0, [r2]
   185a0:	cmp	r3, #0
   185a4:	strne	r0, [r3]
   185a8:	add	sp, sp, #20
   185ac:	ldrd	r4, [sp]
   185b0:	ldrd	r6, [sp, #8]
   185b4:	add	sp, sp, #16
   185b8:	pop	{pc}		; (ldr pc, [sp], #4)
   185bc:	mov	r0, #996	; 0x3e4
   185c0:	stmib	sp, {r1, r2, r3}
   185c4:	bl	26190 <__assert_fail@plt+0x14c38>
   185c8:	cmp	r0, #0
   185cc:	beq	185a8 <__assert_fail@plt+0x7050>
   185d0:	ldr	lr, [r5]
   185d4:	mov	r7, #4
   185d8:	mov	r4, #1
   185dc:	mov	ip, #0
   185e0:	str	r0, [r5]
   185e4:	ldmib	sp, {r1, r2, r3}
   185e8:	str	lr, [r0]
   185ec:	b	18550 <__assert_fail@plt+0x6ff8>
   185f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   185f4:	mov	r4, r0
   185f8:	ldr	r5, [r0]
   185fc:	strd	r6, [sp, #8]
   18600:	add	r7, r1, #56	; 0x38
   18604:	add	r6, r1, #64	; 0x40
   18608:	str	r8, [sp, #16]
   1860c:	str	lr, [sp, #20]
   18610:	sub	sp, sp, #16
   18614:	add	r8, sp, #12
   18618:	b	18624 <__assert_fail@plt+0x70cc>
   1861c:	mov	r4, r3
   18620:	add	r8, r5, #4
   18624:	add	ip, r4, #20
   18628:	mov	r3, #0
   1862c:	mov	r2, r3
   18630:	mov	r1, r6
   18634:	mov	r0, r7
   18638:	str	ip, [sp]
   1863c:	bl	18520 <__assert_fail@plt+0x6fc8>
   18640:	cmp	r0, #0
   18644:	str	r0, [r8]
   18648:	beq	18694 <__assert_fail@plt+0x713c>
   1864c:	str	r5, [r0]
   18650:	ldr	r5, [r8]
   18654:	ldrb	r3, [r5, #26]
   18658:	orr	r3, r3, #4
   1865c:	strb	r3, [r5, #26]
   18660:	ldr	r3, [r4, #4]
   18664:	cmp	r3, #0
   18668:	bne	1861c <__assert_fail@plt+0x70c4>
   1866c:	ldr	r2, [r4, #8]
   18670:	cmp	r2, r3
   18674:	cmpne	r2, #0
   18678:	mov	r3, r4
   1867c:	bne	186ac <__assert_fail@plt+0x7154>
   18680:	ldr	r2, [r4]
   18684:	ldr	r5, [r5]
   18688:	subs	r4, r2, #0
   1868c:	bne	1866c <__assert_fail@plt+0x7114>
   18690:	ldr	r0, [sp, #12]
   18694:	add	sp, sp, #16
   18698:	ldrd	r4, [sp]
   1869c:	ldrd	r6, [sp, #8]
   186a0:	ldr	r8, [sp, #16]
   186a4:	add	sp, sp, #20
   186a8:	pop	{pc}		; (ldr pc, [sp], #4)
   186ac:	mov	r4, r2
   186b0:	add	r8, r5, #8
   186b4:	b	18624 <__assert_fail@plt+0x70cc>
   186b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   186bc:	ldr	r4, [r1]
   186c0:	ldr	r5, [r2, #4]
   186c4:	strd	r6, [sp, #8]
   186c8:	ldrb	r7, [r1, #28]
   186cc:	strd	r8, [sp, #16]
   186d0:	mov	r8, r2
   186d4:	strd	sl, [sp, #24]
   186d8:	str	lr, [sp, #32]
   186dc:	sub	sp, sp, #28
   186e0:	ands	r7, r7, #16
   186e4:	str	r0, [sp, #12]
   186e8:	beq	188b4 <__assert_fail@plt+0x735c>
   186ec:	cmp	r5, #0
   186f0:	beq	18844 <__assert_fail@plt+0x72ec>
   186f4:	ldr	r3, [r2, #20]
   186f8:	cmp	r3, #31
   186fc:	bgt	18824 <__assert_fail@plt+0x72cc>
   18700:	ldr	r2, [r4, #80]	; 0x50
   18704:	lsr	r3, r2, r3
   18708:	tst	r3, #1
   1870c:	beq	18824 <__assert_fail@plt+0x72cc>
   18710:	add	r7, sp, #16
   18714:	mov	ip, #8
   18718:	add	r9, r4, #56	; 0x38
   1871c:	mov	r3, #0
   18720:	add	r4, r4, #64	; 0x40
   18724:	mov	sl, #0
   18728:	str	r7, [sp]
   1872c:	mov	fp, #0
   18730:	mov	r2, r3
   18734:	str	r7, [sp, #8]
   18738:	mov	r1, r4
   1873c:	mov	r0, r9
   18740:	strd	sl, [sp, #16]
   18744:	strb	ip, [sp, #20]
   18748:	bl	18520 <__assert_fail@plt+0x6fc8>
   1874c:	mov	ip, #9
   18750:	mov	r3, #0
   18754:	str	r7, [sp]
   18758:	mov	r6, r0
   1875c:	mov	r1, r4
   18760:	strd	sl, [sp, #16]
   18764:	mov	r0, r9
   18768:	mov	r2, r3
   1876c:	strb	ip, [sp, #20]
   18770:	bl	18520 <__assert_fail@plt+0x6fc8>
   18774:	mov	r7, r0
   18778:	ldr	r3, [sp, #8]
   1877c:	mov	r0, #0
   18780:	mov	r1, #0
   18784:	mov	ip, #16
   18788:	mov	r2, r5
   1878c:	str	r3, [sp]
   18790:	mov	r3, r7
   18794:	strd	r0, [sp, #16]
   18798:	mov	r1, r4
   1879c:	mov	r0, r9
   187a0:	strb	ip, [sp, #20]
   187a4:	bl	18520 <__assert_fail@plt+0x6fc8>
   187a8:	mov	fp, r0
   187ac:	ldr	r0, [sp, #8]
   187b0:	mov	r2, #0
   187b4:	mov	r3, #0
   187b8:	mov	ip, #16
   187bc:	mov	r1, r4
   187c0:	str	r0, [sp]
   187c4:	mov	r0, r9
   187c8:	strd	r2, [sp, #16]
   187cc:	mov	r3, fp
   187d0:	mov	r2, r6
   187d4:	strb	ip, [sp, #20]
   187d8:	bl	18520 <__assert_fail@plt+0x6fc8>
   187dc:	cmp	fp, #0
   187e0:	cmpne	r0, #0
   187e4:	mov	r5, r0
   187e8:	beq	18930 <__assert_fail@plt+0x73d8>
   187ec:	cmp	r7, #0
   187f0:	cmpne	r6, #0
   187f4:	beq	18930 <__assert_fail@plt+0x73d8>
   187f8:	ldr	r2, [r8, #20]
   187fc:	ldrb	r3, [r8, #26]
   18800:	str	r2, [r7, #20]
   18804:	str	r2, [r6, #20]
   18808:	ldrb	r2, [r7, #26]
   1880c:	ubfx	r3, r3, #3, #1
   18810:	bfi	r2, r3, #3, #1
   18814:	strb	r2, [r7, #26]
   18818:	ldrb	r2, [r6, #26]
   1881c:	bfi	r2, r3, #3, #1
   18820:	strb	r2, [r6, #26]
   18824:	mov	r0, r5
   18828:	add	sp, sp, #28
   1882c:	ldrd	r4, [sp]
   18830:	ldrd	r6, [sp, #8]
   18834:	ldrd	r8, [sp, #16]
   18838:	ldrd	sl, [sp, #24]
   1883c:	add	sp, sp, #32
   18840:	pop	{pc}		; (ldr pc, [sp], #4)
   18844:	add	r7, sp, #16
   18848:	mov	ip, #8
   1884c:	add	r9, r4, #56	; 0x38
   18850:	mov	fp, #0
   18854:	add	r4, r4, #64	; 0x40
   18858:	mov	sl, #0
   1885c:	str	r7, [sp]
   18860:	mov	r1, r4
   18864:	mov	r3, r5
   18868:	str	r7, [sp, #8]
   1886c:	mov	r2, r5
   18870:	mov	r0, r9
   18874:	strd	sl, [sp, #16]
   18878:	strb	ip, [sp, #20]
   1887c:	bl	18520 <__assert_fail@plt+0x6fc8>
   18880:	mov	ip, #9
   18884:	mov	r6, r0
   18888:	str	r7, [sp]
   1888c:	mov	r1, r4
   18890:	mov	r0, r9
   18894:	strd	sl, [sp, #16]
   18898:	mov	r3, r5
   1889c:	mov	r2, r5
   188a0:	strb	ip, [sp, #20]
   188a4:	bl	18520 <__assert_fail@plt+0x6fc8>
   188a8:	mov	fp, r0
   188ac:	mov	r7, r0
   188b0:	b	187ac <__assert_fail@plt+0x7254>
   188b4:	add	r3, sp, #16
   188b8:	mov	ip, #8
   188bc:	add	r9, r4, #56	; 0x38
   188c0:	mov	fp, #0
   188c4:	add	r4, r4, #64	; 0x40
   188c8:	mov	sl, #0
   188cc:	str	r3, [sp]
   188d0:	mov	r2, r7
   188d4:	mov	r1, r4
   188d8:	str	r3, [sp, #8]
   188dc:	mov	r0, r9
   188e0:	mov	r3, r7
   188e4:	strd	sl, [sp, #16]
   188e8:	strb	ip, [sp, #20]
   188ec:	bl	18520 <__assert_fail@plt+0x6fc8>
   188f0:	ldr	r3, [sp, #8]
   188f4:	mov	ip, #9
   188f8:	mov	r2, r7
   188fc:	mov	r6, r0
   18900:	mov	r1, r4
   18904:	mov	r0, r9
   18908:	str	r3, [sp]
   1890c:	mov	r3, r7
   18910:	strd	sl, [sp, #16]
   18914:	strb	ip, [sp, #20]
   18918:	bl	18520 <__assert_fail@plt+0x6fc8>
   1891c:	cmp	r5, #0
   18920:	mov	r7, r0
   18924:	moveq	fp, r0
   18928:	bne	18778 <__assert_fail@plt+0x7220>
   1892c:	b	187ac <__assert_fail@plt+0x7254>
   18930:	ldr	r2, [sp, #12]
   18934:	mov	r3, #12
   18938:	mov	r5, #0
   1893c:	str	r3, [r2]
   18940:	b	18824 <__assert_fail@plt+0x72cc>
   18944:	ldr	r2, [r1, #4]
   18948:	mov	r3, #0
   1894c:	strd	r4, [sp, #-12]!
   18950:	mov	r4, r1
   18954:	mov	r5, r0
   18958:	str	lr, [sp, #8]
   1895c:	sub	sp, sp, #12
   18960:	str	r3, [sp, #4]
   18964:	cmp	r2, r3
   18968:	beq	18978 <__assert_fail@plt+0x7420>
   1896c:	ldrb	r3, [r2, #24]
   18970:	cmp	r3, #17
   18974:	beq	189a4 <__assert_fail@plt+0x744c>
   18978:	ldr	r2, [r4, #8]
   1897c:	cmp	r2, #0
   18980:	beq	18990 <__assert_fail@plt+0x7438>
   18984:	ldrb	r3, [r2, #24]
   18988:	cmp	r3, #17
   1898c:	beq	189c0 <__assert_fail@plt+0x7468>
   18990:	ldr	r0, [sp, #4]
   18994:	add	sp, sp, #12
   18998:	ldrd	r4, [sp]
   1899c:	add	sp, sp, #8
   189a0:	pop	{pc}		; (ldr pc, [sp], #4)
   189a4:	mov	r1, r0
   189a8:	add	r0, sp, #4
   189ac:	bl	186b8 <__assert_fail@plt+0x7160>
   189b0:	cmp	r0, #0
   189b4:	str	r0, [r4, #4]
   189b8:	strne	r4, [r0]
   189bc:	b	18978 <__assert_fail@plt+0x7420>
   189c0:	mov	r1, r5
   189c4:	add	r0, sp, #4
   189c8:	bl	186b8 <__assert_fail@plt+0x7160>
   189cc:	cmp	r0, #0
   189d0:	str	r0, [r4, #8]
   189d4:	strne	r4, [r0]
   189d8:	b	18990 <__assert_fail@plt+0x7438>
   189dc:	ldr	r3, [r1, #4]
   189e0:	cmp	r3, #0
   189e4:	str	r3, [r0, #4]
   189e8:	ble	18a4c <__assert_fail@plt+0x74f4>
   189ec:	strd	r4, [sp, #-16]!
   189f0:	mov	r4, r0
   189f4:	lsl	r0, r3, #2
   189f8:	str	r6, [sp, #8]
   189fc:	mov	r5, r1
   18a00:	str	lr, [sp, #12]
   18a04:	str	r3, [r4]
   18a08:	bl	26190 <__assert_fail@plt+0x14c38>
   18a0c:	cmp	r0, #0
   18a10:	str	r0, [r4, #8]
   18a14:	moveq	r2, #12
   18a18:	streq	r0, [r4]
   18a1c:	streq	r0, [r4, #4]
   18a20:	beq	18a38 <__assert_fail@plt+0x74e0>
   18a24:	ldr	r2, [r5, #4]
   18a28:	ldr	r1, [r5, #8]
   18a2c:	lsl	r2, r2, #2
   18a30:	bl	11264 <memcpy@plt>
   18a34:	mov	r2, #0
   18a38:	ldrd	r4, [sp]
   18a3c:	mov	r0, r2
   18a40:	ldr	r6, [sp, #8]
   18a44:	add	sp, sp, #12
   18a48:	pop	{pc}		; (ldr pc, [sp], #4)
   18a4c:	mov	r3, #0
   18a50:	str	r3, [r0]
   18a54:	str	r3, [r0, #4]
   18a58:	str	r3, [r0, #8]
   18a5c:	mov	r0, r3
   18a60:	bx	lr
   18a64:	cmp	r1, #0
   18a68:	beq	18a84 <__assert_fail@plt+0x752c>
   18a6c:	ldr	r3, [r1, #4]
   18a70:	cmp	r2, #0
   18a74:	cmpne	r3, #0
   18a78:	bgt	18ab0 <__assert_fail@plt+0x7558>
   18a7c:	cmp	r3, #0
   18a80:	bgt	18b8c <__assert_fail@plt+0x7634>
   18a84:	cmp	r2, #0
   18a88:	beq	18a98 <__assert_fail@plt+0x7540>
   18a8c:	ldr	r3, [r2, #4]
   18a90:	cmp	r3, #0
   18a94:	bgt	18b88 <__assert_fail@plt+0x7630>
   18a98:	mov	r3, #0
   18a9c:	str	r3, [r0]
   18aa0:	str	r3, [r0, #4]
   18aa4:	str	r3, [r0, #8]
   18aa8:	mov	r0, r3
   18aac:	bx	lr
   18ab0:	ldr	ip, [r2, #4]
   18ab4:	cmp	ip, #0
   18ab8:	ble	18b8c <__assert_fail@plt+0x7634>
   18abc:	add	r3, r3, ip
   18ac0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18ac4:	mov	r4, r2
   18ac8:	strd	r6, [sp, #8]
   18acc:	mov	r6, r0
   18ad0:	lsl	r0, r3, #2
   18ad4:	strd	r8, [sp, #16]
   18ad8:	mov	r5, r1
   18adc:	str	sl, [sp, #24]
   18ae0:	str	lr, [sp, #28]
   18ae4:	str	r3, [r6]
   18ae8:	bl	26190 <__assert_fail@plt+0x14c38>
   18aec:	cmp	r0, #0
   18af0:	str	r0, [r6, #8]
   18af4:	beq	18bc8 <__assert_fail@plt+0x7670>
   18af8:	mov	r7, #0
   18afc:	mov	lr, r0
   18b00:	ldr	r9, [r4, #4]
   18b04:	mov	ip, r7
   18b08:	mov	r3, r7
   18b0c:	ldr	r8, [r5, #4]
   18b10:	b	18b54 <__assert_fail@plt+0x75fc>
   18b14:	ldr	r2, [r5, #8]
   18b18:	cmp	ip, r9
   18b1c:	add	r1, r2, r3, lsl #2
   18b20:	bge	18bb0 <__assert_fail@plt+0x7658>
   18b24:	ldr	r1, [r4, #8]
   18b28:	add	r7, r7, #1
   18b2c:	ldr	r2, [r2, r3, lsl #2]
   18b30:	ldr	r1, [r1, ip, lsl #2]
   18b34:	cmp	r2, r1
   18b38:	addgt	ip, ip, #1
   18b3c:	strgt	r1, [lr]
   18b40:	bgt	18b50 <__assert_fail@plt+0x75f8>
   18b44:	add	r3, r3, #1
   18b48:	addeq	ip, ip, #1
   18b4c:	str	r2, [lr]
   18b50:	add	lr, lr, #4
   18b54:	cmp	r8, r3
   18b58:	bgt	18b14 <__assert_fail@plt+0x75bc>
   18b5c:	cmp	ip, r9
   18b60:	blt	18b90 <__assert_fail@plt+0x7638>
   18b64:	mov	r2, #0
   18b68:	str	r7, [r6, #4]
   18b6c:	ldrd	r4, [sp]
   18b70:	mov	r0, r2
   18b74:	ldrd	r6, [sp, #8]
   18b78:	ldrd	r8, [sp, #16]
   18b7c:	ldr	sl, [sp, #24]
   18b80:	add	sp, sp, #28
   18b84:	pop	{pc}		; (ldr pc, [sp], #4)
   18b88:	mov	r1, r2
   18b8c:	b	189dc <__assert_fail@plt+0x7484>
   18b90:	ldr	r1, [r4, #8]
   18b94:	sub	r2, r9, ip
   18b98:	add	r0, r0, r7, lsl #2
   18b9c:	add	r7, r7, r2
   18ba0:	lsl	r2, r2, #2
   18ba4:	add	r1, r1, ip, lsl #2
   18ba8:	bl	11264 <memcpy@plt>
   18bac:	b	18b64 <__assert_fail@plt+0x760c>
   18bb0:	sub	r3, r8, r3
   18bb4:	mov	r0, lr
   18bb8:	lsl	r2, r3, #2
   18bbc:	add	r7, r7, r3
   18bc0:	bl	11264 <memcpy@plt>
   18bc4:	b	18b64 <__assert_fail@plt+0x760c>
   18bc8:	mov	r2, #12
   18bcc:	b	18b6c <__assert_fail@plt+0x7614>
   18bd0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18bd4:	mov	ip, #0
   18bd8:	ldr	r4, [r2, #4]
   18bdc:	strd	r6, [sp, #8]
   18be0:	strd	r8, [sp, #16]
   18be4:	strd	sl, [sp, #24]
   18be8:	str	lr, [sp, #32]
   18bec:	sub	sp, sp, #28
   18bf0:	cmp	r4, ip
   18bf4:	str	ip, [r0]
   18bf8:	beq	18ca0 <__assert_fail@plt+0x7748>
   18bfc:	add	r7, r3, r4
   18c00:	ble	18c1c <__assert_fail@plt+0x76c4>
   18c04:	ldr	ip, [r2, #8]
   18c08:	add	r4, ip, r4, lsl #2
   18c0c:	ldr	lr, [ip], #4
   18c10:	cmp	r4, ip
   18c14:	add	r7, r7, lr
   18c18:	bne	18c0c <__assert_fail@plt+0x76b4>
   18c1c:	mov	sl, r3
   18c20:	ldr	r3, [r1, #68]	; 0x44
   18c24:	mov	r8, r2
   18c28:	mov	r9, r1
   18c2c:	str	r0, [sp, #20]
   18c30:	ldr	r2, [r1, #32]
   18c34:	and	r3, r3, r7
   18c38:	add	r3, r3, r3, lsl #1
   18c3c:	lsl	r3, r3, #2
   18c40:	ldr	fp, [r2, r3]
   18c44:	add	r3, r2, r3
   18c48:	cmp	fp, #0
   18c4c:	ble	18cc0 <__assert_fail@plt+0x7768>
   18c50:	ldr	r6, [r3, #8]
   18c54:	mov	r5, #0
   18c58:	sub	r6, r6, #4
   18c5c:	b	18c68 <__assert_fail@plt+0x7710>
   18c60:	cmp	r5, fp
   18c64:	beq	18cc0 <__assert_fail@plt+0x7768>
   18c68:	ldr	r4, [r6, #4]!
   18c6c:	add	r5, r5, #1
   18c70:	ldr	r3, [r4]
   18c74:	cmp	r3, r7
   18c78:	bne	18c60 <__assert_fail@plt+0x7708>
   18c7c:	ldrb	r3, [r4, #52]	; 0x34
   18c80:	and	r3, r3, #15
   18c84:	cmp	r3, sl
   18c88:	bne	18c60 <__assert_fail@plt+0x7708>
   18c8c:	mov	r1, r8
   18c90:	ldr	r0, [r4, #40]	; 0x28
   18c94:	bl	160b4 <__assert_fail@plt+0x4b5c>
   18c98:	cmp	r0, #0
   18c9c:	beq	18c60 <__assert_fail@plt+0x7708>
   18ca0:	mov	r0, r4
   18ca4:	add	sp, sp, #28
   18ca8:	ldrd	r4, [sp]
   18cac:	ldrd	r6, [sp, #8]
   18cb0:	ldrd	r8, [sp, #16]
   18cb4:	ldrd	sl, [sp, #24]
   18cb8:	add	sp, sp, #32
   18cbc:	pop	{pc}		; (ldr pc, [sp], #4)
   18cc0:	mov	r1, #1
   18cc4:	mov	r0, #56	; 0x38
   18cc8:	bl	2611c <__assert_fail@plt+0x14bc4>
   18ccc:	subs	r4, r0, #0
   18cd0:	beq	18e48 <__assert_fail@plt+0x78f0>
   18cd4:	add	fp, r4, #4
   18cd8:	mov	r1, r8
   18cdc:	mov	r0, fp
   18ce0:	bl	189dc <__assert_fail@plt+0x7484>
   18ce4:	subs	r3, r0, #0
   18ce8:	bne	18eac <__assert_fail@plt+0x7954>
   18cec:	ldrb	r2, [r4, #52]	; 0x34
   18cf0:	str	fp, [r4, #40]	; 0x28
   18cf4:	ldr	lr, [r8, #4]
   18cf8:	bfi	r2, sl, #0, #4
   18cfc:	cmp	lr, #0
   18d00:	strb	r2, [r4, #52]	; 0x34
   18d04:	ble	18e28 <__assert_fail@plt+0x78d0>
   18d08:	add	r2, r4, #12
   18d0c:	mov	r6, r3
   18d10:	str	r2, [sp, #4]
   18d14:	add	r2, r4, #8
   18d18:	str	r2, [sp, #8]
   18d1c:	and	r2, sl, #4
   18d20:	str	r7, [sp, #16]
   18d24:	mov	r7, r3
   18d28:	str	r2, [sp, #12]
   18d2c:	ldr	r1, [r8, #8]
   18d30:	ldr	r2, [r9]
   18d34:	ldr	r1, [r1, r6, lsl #2]
   18d38:	add	r2, r2, r1, lsl #3
   18d3c:	ldr	r5, [r2, #4]
   18d40:	ldrb	r1, [r2, #4]
   18d44:	ubfx	r5, r5, #8, #10
   18d48:	cmp	r1, #1
   18d4c:	cmpeq	r5, #0
   18d50:	beq	18e18 <__assert_fail@plt+0x78c0>
   18d54:	ldrb	ip, [r2, #6]
   18d58:	cmp	r1, #2
   18d5c:	ldrb	r2, [r4, #52]	; 0x34
   18d60:	ubfx	ip, ip, #4, #1
   18d64:	ubfx	r0, r2, #5, #1
   18d68:	orr	r0, r0, ip
   18d6c:	bfi	r2, r0, #5, #1
   18d70:	strb	r2, [r4, #52]	; 0x34
   18d74:	uxtbeq	r2, r2
   18d78:	orreq	r2, r2, #16
   18d7c:	strbeq	r2, [r4, #52]	; 0x34
   18d80:	beq	18d98 <__assert_fail@plt+0x7840>
   18d84:	cmp	r1, #4
   18d88:	bne	18d98 <__assert_fail@plt+0x7840>
   18d8c:	ldrb	r2, [r4, #52]	; 0x34
   18d90:	orr	r2, r2, #64	; 0x40
   18d94:	strb	r2, [r4, #52]	; 0x34
   18d98:	cmp	r5, #0
   18d9c:	beq	18e18 <__assert_fail@plt+0x78c0>
   18da0:	ldr	r2, [r4, #40]	; 0x28
   18da4:	cmp	fp, r2
   18da8:	beq	18e78 <__assert_fail@plt+0x7920>
   18dac:	tst	r5, #1
   18db0:	beq	18e64 <__assert_fail@plt+0x790c>
   18db4:	tst	sl, #1
   18db8:	beq	18de8 <__assert_fail@plt+0x7890>
   18dbc:	tst	r5, #2
   18dc0:	bne	18de8 <__assert_fail@plt+0x7890>
   18dc4:	tst	r5, #16
   18dc8:	beq	18dd4 <__assert_fail@plt+0x787c>
   18dcc:	tst	sl, #2
   18dd0:	beq	18de8 <__assert_fail@plt+0x7890>
   18dd4:	tst	r5, #64	; 0x40
   18dd8:	beq	18e5c <__assert_fail@plt+0x7904>
   18ddc:	ldr	r3, [sp, #12]
   18de0:	cmp	r3, #0
   18de4:	bne	18e5c <__assert_fail@plt+0x7904>
   18de8:	subs	r2, r6, r7
   18dec:	bmi	18e10 <__assert_fail@plt+0x78b8>
   18df0:	ldr	r1, [r4, #8]
   18df4:	cmp	r2, r1
   18df8:	bge	18e10 <__assert_fail@plt+0x78b8>
   18dfc:	sub	ip, r1, #1
   18e00:	ldr	r1, [sp, #4]
   18e04:	str	ip, [r4, #8]
   18e08:	ldr	r0, [sp, #8]
   18e0c:	bl	17f54 <__assert_fail@plt+0x69fc>
   18e10:	ldr	lr, [r8, #4]
   18e14:	add	r7, r7, #1
   18e18:	add	r6, r6, #1
   18e1c:	cmp	r6, lr
   18e20:	blt	18d2c <__assert_fail@plt+0x77d4>
   18e24:	ldr	r7, [sp, #16]
   18e28:	mov	r2, r7
   18e2c:	mov	r0, r9
   18e30:	mov	r1, r4
   18e34:	bl	16740 <__assert_fail@plt+0x51e8>
   18e38:	cmp	r0, #0
   18e3c:	beq	18ca0 <__assert_fail@plt+0x7748>
   18e40:	mov	r0, r4
   18e44:	bl	17488 <__assert_fail@plt+0x5f30>
   18e48:	ldr	r2, [sp, #20]
   18e4c:	mov	r3, #12
   18e50:	mov	r4, #0
   18e54:	str	r3, [r2]
   18e58:	b	18ca0 <__assert_fail@plt+0x7748>
   18e5c:	ldr	lr, [r8, #4]
   18e60:	b	18e18 <__assert_fail@plt+0x78c0>
   18e64:	tst	r5, #2
   18e68:	beq	18dc4 <__assert_fail@plt+0x786c>
   18e6c:	tst	sl, #1
   18e70:	beq	18dc4 <__assert_fail@plt+0x786c>
   18e74:	b	18de8 <__assert_fail@plt+0x7890>
   18e78:	mov	r0, #12
   18e7c:	bl	26190 <__assert_fail@plt+0x14c38>
   18e80:	subs	r3, r0, #0
   18e84:	beq	18e40 <__assert_fail@plt+0x78e8>
   18e88:	mov	r1, r8
   18e8c:	str	r3, [r4, #40]	; 0x28
   18e90:	bl	189dc <__assert_fail@plt+0x7484>
   18e94:	subs	r7, r0, #0
   18e98:	bne	18e40 <__assert_fail@plt+0x78e8>
   18e9c:	ldrb	r2, [r4, #52]	; 0x34
   18ea0:	orr	r2, r2, #128	; 0x80
   18ea4:	strb	r2, [r4, #52]	; 0x34
   18ea8:	b	18dac <__assert_fail@plt+0x7854>
   18eac:	mov	r0, r4
   18eb0:	bl	13b9c <__assert_fail@plt+0x2644>
   18eb4:	b	18e48 <__assert_fail@plt+0x78f0>
   18eb8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18ebc:	mov	r3, #0
   18ec0:	strd	r6, [sp, #8]
   18ec4:	ldr	r6, [r2, #4]
   18ec8:	strd	r8, [sp, #16]
   18ecc:	strd	sl, [sp, #24]
   18ed0:	str	lr, [sp, #32]
   18ed4:	sub	sp, sp, #4
   18ed8:	str	r3, [r0]
   18edc:	cmp	r6, r3
   18ee0:	beq	190c8 <__assert_fail@plt+0x7b70>
   18ee4:	ble	18f00 <__assert_fail@plt+0x79a8>
   18ee8:	ldr	r3, [r2, #8]
   18eec:	add	lr, r3, r6, lsl #2
   18ef0:	ldr	ip, [r3], #4
   18ef4:	cmp	lr, r3
   18ef8:	add	r6, r6, ip
   18efc:	bne	18ef0 <__assert_fail@plt+0x7998>
   18f00:	ldr	r3, [r1, #68]	; 0x44
   18f04:	mov	sl, r2
   18f08:	mov	r8, r1
   18f0c:	mov	r9, r0
   18f10:	ldr	r2, [r1, #32]
   18f14:	and	r3, r3, r6
   18f18:	add	r3, r3, r3, lsl #1
   18f1c:	lsl	r3, r3, #2
   18f20:	ldr	fp, [r2, r3]
   18f24:	add	r3, r2, r3
   18f28:	cmp	fp, #0
   18f2c:	ble	18f6c <__assert_fail@plt+0x7a14>
   18f30:	ldr	r7, [r3, #8]
   18f34:	mov	r5, #0
   18f38:	sub	r7, r7, #4
   18f3c:	ldr	r4, [r7, #4]!
   18f40:	mov	r1, sl
   18f44:	add	r5, r5, #1
   18f48:	ldr	r3, [r4]
   18f4c:	add	r0, r4, #4
   18f50:	cmp	r3, r6
   18f54:	bne	18f64 <__assert_fail@plt+0x7a0c>
   18f58:	bl	160b4 <__assert_fail@plt+0x4b5c>
   18f5c:	cmp	r0, #0
   18f60:	bne	19068 <__assert_fail@plt+0x7b10>
   18f64:	cmp	fp, r5
   18f68:	bne	18f3c <__assert_fail@plt+0x79e4>
   18f6c:	mov	r1, #1
   18f70:	mov	r0, #56	; 0x38
   18f74:	bl	2611c <__assert_fail@plt+0x14bc4>
   18f78:	subs	r4, r0, #0
   18f7c:	beq	190b8 <__assert_fail@plt+0x7b60>
   18f80:	add	r7, r4, #4
   18f84:	mov	r1, sl
   18f88:	mov	r0, r7
   18f8c:	bl	189dc <__assert_fail@plt+0x7484>
   18f90:	cmp	r0, #0
   18f94:	bne	190b0 <__assert_fail@plt+0x7b58>
   18f98:	ldr	r5, [sl, #4]
   18f9c:	str	r7, [r4, #40]	; 0x28
   18fa0:	cmp	r5, #0
   18fa4:	ble	19050 <__assert_fail@plt+0x7af8>
   18fa8:	ldr	r1, [sl, #8]
   18fac:	mov	sl, #65280	; 0xff00
   18fb0:	movt	sl, #3
   18fb4:	ldr	r7, [r8]
   18fb8:	add	r5, r1, r5, lsl #2
   18fbc:	b	19000 <__assert_fail@plt+0x7aa8>
   18fc0:	ldrb	r2, [r4, #52]	; 0x34
   18fc4:	cmp	r0, #2
   18fc8:	ldrb	lr, [r3, #6]
   18fcc:	ubfx	ip, r2, #5, #1
   18fd0:	ubfx	lr, lr, #4, #1
   18fd4:	orr	ip, ip, lr
   18fd8:	bfi	r2, ip, #5, #1
   18fdc:	strb	r2, [r4, #52]	; 0x34
   18fe0:	beq	19088 <__assert_fail@plt+0x7b30>
   18fe4:	cmp	r0, #4
   18fe8:	bne	19098 <__assert_fail@plt+0x7b40>
   18fec:	ldrb	r3, [r4, #52]	; 0x34
   18ff0:	orr	r3, r3, #64	; 0x40
   18ff4:	strb	r3, [r4, #52]	; 0x34
   18ff8:	cmp	r5, r1
   18ffc:	beq	19050 <__assert_fail@plt+0x7af8>
   19000:	ldr	r3, [r1], #4
   19004:	add	r3, r7, r3, lsl #3
   19008:	ldrb	r0, [r3, #4]
   1900c:	cmp	r0, #1
   19010:	bne	18fc0 <__assert_fail@plt+0x7a68>
   19014:	ldr	r2, [r3, #4]
   19018:	tst	sl, r2
   1901c:	beq	18ff8 <__assert_fail@plt+0x7aa0>
   19020:	ldrb	r2, [r3, #6]
   19024:	ldrb	r3, [r4, #52]	; 0x34
   19028:	ubfx	r0, r2, #4, #1
   1902c:	ubfx	r2, r3, #5, #1
   19030:	orr	r2, r2, r0
   19034:	bfi	r3, r2, #5, #1
   19038:	strb	r3, [r4, #52]	; 0x34
   1903c:	ldrb	r3, [r4, #52]	; 0x34
   19040:	cmp	r5, r1
   19044:	orr	r3, r3, #128	; 0x80
   19048:	strb	r3, [r4, #52]	; 0x34
   1904c:	bne	19000 <__assert_fail@plt+0x7aa8>
   19050:	mov	r2, r6
   19054:	mov	r0, r8
   19058:	mov	r1, r4
   1905c:	bl	16740 <__assert_fail@plt+0x51e8>
   19060:	cmp	r0, #0
   19064:	bne	190d0 <__assert_fail@plt+0x7b78>
   19068:	mov	r0, r4
   1906c:	add	sp, sp, #4
   19070:	ldrd	r4, [sp]
   19074:	ldrd	r6, [sp, #8]
   19078:	ldrd	r8, [sp, #16]
   1907c:	ldrd	sl, [sp, #24]
   19080:	add	sp, sp, #32
   19084:	pop	{pc}		; (ldr pc, [sp], #4)
   19088:	uxtb	r3, r2
   1908c:	orr	r3, r3, #16
   19090:	strb	r3, [r4, #52]	; 0x34
   19094:	b	18ff8 <__assert_fail@plt+0x7aa0>
   19098:	cmp	r0, #12
   1909c:	beq	1903c <__assert_fail@plt+0x7ae4>
   190a0:	ldr	r3, [r3, #4]
   190a4:	tst	sl, r3
   190a8:	beq	18ff8 <__assert_fail@plt+0x7aa0>
   190ac:	b	1903c <__assert_fail@plt+0x7ae4>
   190b0:	mov	r0, r4
   190b4:	bl	13b9c <__assert_fail@plt+0x2644>
   190b8:	mov	r3, #12
   190bc:	mov	r4, #0
   190c0:	str	r3, [r9]
   190c4:	b	19068 <__assert_fail@plt+0x7b10>
   190c8:	mov	r4, r6
   190cc:	b	19068 <__assert_fail@plt+0x7b10>
   190d0:	mov	r0, r4
   190d4:	bl	17488 <__assert_fail@plt+0x5f30>
   190d8:	b	190b8 <__assert_fail@plt+0x7b60>
   190dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   190e0:	strd	r6, [sp, #8]
   190e4:	subs	r7, r3, #0
   190e8:	subgt	r4, r1, #4
   190ec:	subgt	r6, r2, #4
   190f0:	str	r8, [sp, #16]
   190f4:	movgt	r5, #0
   190f8:	movgt	r8, r0
   190fc:	str	lr, [sp, #20]
   19100:	sub	sp, sp, #16
   19104:	bgt	19134 <__assert_fail@plt+0x7bdc>
   19108:	b	19198 <__assert_fail@plt+0x7c40>
   1910c:	bl	18eb8 <__assert_fail@plt+0x7960>
   19110:	str	r0, [r4]
   19114:	ldr	r0, [sp, #12]
   19118:	bl	13b9c <__assert_fail@plt+0x2644>
   1911c:	ldr	r3, [sp]
   19120:	cmp	r3, #0
   19124:	bne	1917c <__assert_fail@plt+0x7c24>
   19128:	add	r5, r5, #1
   1912c:	cmp	r7, r5
   19130:	beq	19198 <__assert_fail@plt+0x7c40>
   19134:	ldr	r1, [r4, #4]!
   19138:	ldr	ip, [r6, #4]!
   1913c:	cmp	r1, #0
   19140:	streq	ip, [r4]
   19144:	beq	19128 <__assert_fail@plt+0x7bd0>
   19148:	cmp	ip, #0
   1914c:	add	r2, ip, #4
   19150:	add	r1, r1, #4
   19154:	add	r0, sp, #4
   19158:	beq	19128 <__assert_fail@plt+0x7bd0>
   1915c:	bl	18a64 <__assert_fail@plt+0x750c>
   19160:	mov	r3, r0
   19164:	add	r2, sp, #4
   19168:	cmp	r3, #0
   1916c:	mov	r1, r8
   19170:	mov	r0, sp
   19174:	str	r3, [sp]
   19178:	beq	1910c <__assert_fail@plt+0x7bb4>
   1917c:	mov	r0, r3
   19180:	add	sp, sp, #16
   19184:	ldrd	r4, [sp]
   19188:	ldrd	r6, [sp, #8]
   1918c:	ldr	r8, [sp, #16]
   19190:	add	sp, sp, #20
   19194:	pop	{pc}		; (ldr pc, [sp], #4)
   19198:	mov	r3, #0
   1919c:	b	1917c <__assert_fail@plt+0x7c24>
   191a0:	ldrb	r2, [r1, #24]
   191a4:	cmp	r2, #16
   191a8:	bne	191c8 <__assert_fail@plt+0x7c70>
   191ac:	ldr	r3, [r1, #4]
   191b0:	mov	r0, #0
   191b4:	ldr	r2, [r3, #12]
   191b8:	ldr	r3, [r3, #28]
   191bc:	str	r2, [r1, #12]
   191c0:	str	r3, [r1, #28]
   191c4:	bx	lr
   191c8:	strd	r4, [sp, #-16]!
   191cc:	mov	r4, r1
   191d0:	add	r3, r1, #20
   191d4:	ldm	r3, {r1, r2}
   191d8:	mov	r5, r0
   191dc:	str	r6, [sp, #8]
   191e0:	str	lr, [sp, #12]
   191e4:	str	r4, [r4, #12]
   191e8:	bl	1721c <__assert_fail@plt+0x5cc4>
   191ec:	cmn	r0, #1
   191f0:	mov	r3, r0
   191f4:	str	r0, [r4, #28]
   191f8:	beq	19238 <__assert_fail@plt+0x7ce0>
   191fc:	ldrb	r2, [r4, #24]
   19200:	cmp	r2, #12
   19204:	movne	r0, #0
   19208:	bne	19228 <__assert_fail@plt+0x7cd0>
   1920c:	ldr	r2, [r5]
   19210:	mov	r0, #0
   19214:	ldr	r1, [r4, #20]
   19218:	add	r3, r2, r3, lsl #3
   1921c:	ldr	r2, [r3, #4]
   19220:	bfi	r2, r1, #8, #10
   19224:	str	r2, [r3, #4]
   19228:	ldrd	r4, [sp]
   1922c:	ldr	r6, [sp, #8]
   19230:	add	sp, sp, #12
   19234:	pop	{pc}		; (ldr pc, [sp], #4)
   19238:	mov	r0, #12
   1923c:	b	19228 <__assert_fail@plt+0x7cd0>
   19240:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19244:	strd	r6, [sp, #8]
   19248:	mov	r6, r0
   1924c:	ldr	r0, [r0]
   19250:	str	r8, [sp, #16]
   19254:	str	lr, [sp, #20]
   19258:	cmp	r0, #0
   1925c:	beq	19290 <__assert_fail@plt+0x7d38>
   19260:	ldr	r3, [r6, #8]
   19264:	cmp	r3, #0
   19268:	beq	19290 <__assert_fail@plt+0x7d38>
   1926c:	mov	r4, #0
   19270:	b	19278 <__assert_fail@plt+0x7d20>
   19274:	ldr	r0, [r6]
   19278:	add	r0, r0, r4, lsl #3
   1927c:	add	r4, r4, #1
   19280:	bl	171c8 <__assert_fail@plt+0x5c70>
   19284:	ldr	r3, [r6, #8]
   19288:	cmp	r3, r4
   1928c:	bhi	19274 <__assert_fail@plt+0x7d1c>
   19290:	ldr	r0, [r6, #12]
   19294:	bl	13b9c <__assert_fail@plt+0x2644>
   19298:	ldr	r3, [r6, #8]
   1929c:	cmp	r3, #0
   192a0:	movne	r4, #0
   192a4:	movne	r5, r4
   192a8:	beq	19308 <__assert_fail@plt+0x7db0>
   192ac:	ldr	r3, [r6, #24]
   192b0:	add	r5, r5, #1
   192b4:	cmp	r3, #0
   192b8:	add	r2, r3, r4
   192bc:	beq	192c8 <__assert_fail@plt+0x7d70>
   192c0:	ldr	r0, [r2, #8]
   192c4:	bl	13b9c <__assert_fail@plt+0x2644>
   192c8:	ldr	r3, [r6, #28]
   192cc:	cmp	r3, #0
   192d0:	add	r2, r3, r4
   192d4:	beq	192e0 <__assert_fail@plt+0x7d88>
   192d8:	ldr	r0, [r2, #8]
   192dc:	bl	13b9c <__assert_fail@plt+0x2644>
   192e0:	ldr	r3, [r6, #20]
   192e4:	cmp	r3, #0
   192e8:	add	r2, r3, r4
   192ec:	beq	192f8 <__assert_fail@plt+0x7da0>
   192f0:	ldr	r0, [r2, #8]
   192f4:	bl	13b9c <__assert_fail@plt+0x2644>
   192f8:	ldr	r3, [r6, #8]
   192fc:	add	r4, r4, #12
   19300:	cmp	r3, r5
   19304:	bhi	192ac <__assert_fail@plt+0x7d54>
   19308:	ldr	r0, [r6, #20]
   1930c:	bl	13b9c <__assert_fail@plt+0x2644>
   19310:	ldr	r0, [r6, #24]
   19314:	bl	13b9c <__assert_fail@plt+0x2644>
   19318:	ldr	r0, [r6, #28]
   1931c:	bl	13b9c <__assert_fail@plt+0x2644>
   19320:	ldr	r0, [r6]
   19324:	bl	13b9c <__assert_fail@plt+0x2644>
   19328:	ldr	r0, [r6, #32]
   1932c:	cmp	r0, #0
   19330:	movne	r7, #0
   19334:	beq	19390 <__assert_fail@plt+0x7e38>
   19338:	add	r5, r7, r7, lsl #1
   1933c:	ldr	r3, [r0, r5, lsl #2]
   19340:	add	r5, r0, r5, lsl #2
   19344:	cmp	r3, #0
   19348:	movgt	r4, #0
   1934c:	ble	1936c <__assert_fail@plt+0x7e14>
   19350:	ldr	r3, [r5, #8]
   19354:	ldr	r0, [r3, r4, lsl #2]
   19358:	add	r4, r4, #1
   1935c:	bl	17488 <__assert_fail@plt+0x5f30>
   19360:	ldr	r3, [r5]
   19364:	cmp	r4, r3
   19368:	blt	19350 <__assert_fail@plt+0x7df8>
   1936c:	ldr	r0, [r5, #8]
   19370:	add	r7, r7, #1
   19374:	bl	13b9c <__assert_fail@plt+0x2644>
   19378:	ldr	r3, [r6, #68]	; 0x44
   1937c:	cmp	r3, r7
   19380:	bcc	1938c <__assert_fail@plt+0x7e34>
   19384:	ldr	r0, [r6, #32]
   19388:	b	19338 <__assert_fail@plt+0x7de0>
   1938c:	ldr	r0, [r6, #32]
   19390:	bl	13b9c <__assert_fail@plt+0x2644>
   19394:	ldr	r0, [r6, #60]	; 0x3c
   19398:	movw	r3, #30636	; 0x77ac
   1939c:	movt	r3, #2
   193a0:	cmp	r0, r3
   193a4:	beq	193ac <__assert_fail@plt+0x7e54>
   193a8:	bl	13b9c <__assert_fail@plt+0x2644>
   193ac:	ldr	r0, [r6, #132]	; 0x84
   193b0:	bl	13b9c <__assert_fail@plt+0x2644>
   193b4:	mov	r0, r6
   193b8:	ldrd	r4, [sp]
   193bc:	ldrd	r6, [sp, #8]
   193c0:	ldr	r8, [sp, #16]
   193c4:	ldr	lr, [sp, #20]
   193c8:	add	sp, sp, #24
   193cc:	b	13b9c <__assert_fail@plt+0x2644>
   193d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   193d4:	mov	r5, #0
   193d8:	strd	r6, [sp, #8]
   193dc:	ldr	r7, [r0, #28]
   193e0:	strd	r8, [sp, #16]
   193e4:	strd	sl, [sp, #24]
   193e8:	mov	sl, r1
   193ec:	add	r1, r1, r1, lsl #1
   193f0:	str	lr, [sp, #32]
   193f4:	sub	sp, sp, #44	; 0x2c
   193f8:	add	r7, r7, r1, lsl #2
   193fc:	str	r2, [sp, #12]
   19400:	str	r5, [sp, #28]
   19404:	str	r5, [sp, #32]
   19408:	str	r5, [sp, #36]	; 0x24
   1940c:	ldr	r6, [r7, #4]
   19410:	str	r3, [sp, #20]
   19414:	cmp	r6, r5
   19418:	ble	19600 <__assert_fail@plt+0x80a8>
   1941c:	add	r3, r7, #8
   19420:	mov	r9, r0
   19424:	str	r3, [sp, #8]
   19428:	add	r3, r2, #8
   1942c:	str	r3, [sp, #16]
   19430:	b	19484 <__assert_fail@plt+0x7f2c>
   19434:	cmp	r0, #0
   19438:	bne	1950c <__assert_fail@plt+0x7fb4>
   1943c:	mov	r2, r3
   19440:	ldr	r3, [sp, #12]
   19444:	ldr	r1, [sp, #16]
   19448:	ldr	r0, [r3, #4]
   1944c:	bl	17db4 <__assert_fail@plt+0x685c>
   19450:	cmp	r0, #0
   19454:	beq	1950c <__assert_fail@plt+0x7fb4>
   19458:	ldr	r2, [r9, #28]
   1945c:	add	r0, sp, #28
   19460:	ldr	r1, [sp, #20]
   19464:	add	r2, r2, r4
   19468:	bl	18338 <__assert_fail@plt+0x6de0>
   1946c:	cmp	r0, #0
   19470:	bne	195f0 <__assert_fail@plt+0x8098>
   19474:	ldr	r6, [r7, #4]
   19478:	add	r5, r5, #1
   1947c:	cmp	r6, r5
   19480:	ble	1953c <__assert_fail@plt+0x7fe4>
   19484:	ldr	r3, [r7, #8]
   19488:	ldr	r4, [r3, r5, lsl #2]
   1948c:	cmp	sl, r4
   19490:	beq	19478 <__assert_fail@plt+0x7f20>
   19494:	ldr	r3, [r9]
   19498:	add	r3, r3, r4, lsl #3
   1949c:	ldrb	r3, [r3, #4]
   194a0:	tst	r3, #8
   194a4:	beq	19478 <__assert_fail@plt+0x7f20>
   194a8:	ldr	r8, [r9, #20]
   194ac:	add	r4, r4, r4, lsl #1
   194b0:	mov	r0, r6
   194b4:	lsl	r4, r4, #2
   194b8:	ldr	r1, [sp, #8]
   194bc:	add	r8, r8, r4
   194c0:	ldr	fp, [r8, #8]
   194c4:	ldr	r3, [fp]
   194c8:	mov	r2, r3
   194cc:	str	r3, [sp, #4]
   194d0:	bl	17db4 <__assert_fail@plt+0x685c>
   194d4:	ldr	r2, [r8, #4]
   194d8:	ldr	r3, [sp, #4]
   194dc:	cmp	r2, #1
   194e0:	bgt	19434 <__assert_fail@plt+0x7edc>
   194e4:	cmp	r0, #0
   194e8:	moveq	r2, r3
   194ec:	bne	19478 <__assert_fail@plt+0x7f20>
   194f0:	ldr	r3, [sp, #12]
   194f4:	ldr	r1, [sp, #16]
   194f8:	ldr	r0, [r3, #4]
   194fc:	bl	17db4 <__assert_fail@plt+0x685c>
   19500:	cmp	r0, #0
   19504:	beq	19478 <__assert_fail@plt+0x7f20>
   19508:	b	19458 <__assert_fail@plt+0x7f00>
   1950c:	ldr	r8, [fp, #4]
   19510:	cmp	r8, #0
   19514:	ble	19478 <__assert_fail@plt+0x7f20>
   19518:	mov	r2, r8
   1951c:	mov	r0, r6
   19520:	ldr	r1, [sp, #8]
   19524:	bl	17db4 <__assert_fail@plt+0x685c>
   19528:	cmp	r0, #0
   1952c:	beq	194f0 <__assert_fail@plt+0x7f98>
   19530:	add	r5, r5, #1
   19534:	cmp	r6, r5
   19538:	bgt	19484 <__assert_fail@plt+0x7f2c>
   1953c:	cmp	r6, #0
   19540:	ble	195c4 <__assert_fail@plt+0x806c>
   19544:	ldr	sl, [sp, #12]
   19548:	mov	r4, #0
   1954c:	add	r8, sl, #8
   19550:	add	r9, sl, #4
   19554:	ldr	r3, [r7, #8]
   19558:	add	r1, sp, #36	; 0x24
   1955c:	ldr	r0, [sp, #32]
   19560:	ldr	r5, [r3, r4, lsl #2]
   19564:	add	r4, r4, #1
   19568:	mov	r2, r5
   1956c:	bl	17db4 <__assert_fail@plt+0x685c>
   19570:	cmp	r0, #0
   19574:	mov	r1, r8
   19578:	bne	195bc <__assert_fail@plt+0x8064>
   1957c:	ldr	r5, [sl, #4]
   19580:	mov	r0, r5
   19584:	bl	17db4 <__assert_fail@plt+0x685c>
   19588:	sub	r3, r0, #1
   1958c:	sub	ip, r5, #1
   19590:	cmp	r3, r5
   19594:	mov	r2, r3
   19598:	movlt	r5, #0
   1959c:	movge	r5, #1
   195a0:	orrs	r3, r5, r3, lsr #31
   195a4:	mov	r1, r8
   195a8:	mov	r0, r9
   195ac:	bne	195bc <__assert_fail@plt+0x8064>
   195b0:	str	ip, [sl, #4]
   195b4:	bl	17f54 <__assert_fail@plt+0x69fc>
   195b8:	ldr	r6, [r7, #4]
   195bc:	cmp	r6, r4
   195c0:	bgt	19554 <__assert_fail@plt+0x7ffc>
   195c4:	ldr	r0, [sp, #36]	; 0x24
   195c8:	mov	r4, #0
   195cc:	bl	13b9c <__assert_fail@plt+0x2644>
   195d0:	mov	r0, r4
   195d4:	add	sp, sp, #44	; 0x2c
   195d8:	ldrd	r4, [sp]
   195dc:	ldrd	r6, [sp, #8]
   195e0:	ldrd	r8, [sp, #16]
   195e4:	ldrd	sl, [sp, #24]
   195e8:	add	sp, sp, #32
   195ec:	pop	{pc}		; (ldr pc, [sp], #4)
   195f0:	mov	r4, r0
   195f4:	ldr	r0, [sp, #36]	; 0x24
   195f8:	bl	13b9c <__assert_fail@plt+0x2644>
   195fc:	b	195d0 <__assert_fail@plt+0x8078>
   19600:	mov	r0, r5
   19604:	b	195c8 <__assert_fail@plt+0x8070>
   19608:	ldr	r3, [r0]
   1960c:	strd	r4, [sp, #-16]!
   19610:	mov	r5, r0
   19614:	str	r6, [sp, #8]
   19618:	str	lr, [sp, #12]
   1961c:	cmp	r3, #0
   19620:	ble	19660 <__assert_fail@plt+0x8108>
   19624:	mov	r4, #0
   19628:	mov	r6, r4
   1962c:	ldr	r3, [r5, #8]
   19630:	add	r6, r6, #1
   19634:	add	r3, r3, r4
   19638:	ldr	r0, [r3, #20]
   1963c:	bl	13b9c <__assert_fail@plt+0x2644>
   19640:	ldr	r3, [r5, #8]
   19644:	add	r3, r3, r4
   19648:	add	r4, r4, #24
   1964c:	ldr	r0, [r3, #8]
   19650:	bl	13b9c <__assert_fail@plt+0x2644>
   19654:	ldr	r3, [r5]
   19658:	cmp	r6, r3
   1965c:	blt	1962c <__assert_fail@plt+0x80d4>
   19660:	ldr	r0, [r5, #8]
   19664:	ldrd	r4, [sp]
   19668:	ldr	r6, [sp, #8]
   1966c:	ldr	lr, [sp, #12]
   19670:	add	sp, sp, #16
   19674:	b	13b9c <__assert_fail@plt+0x2644>
   19678:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1967c:	strd	r6, [sp, #8]
   19680:	subs	r6, r1, #0
   19684:	str	r8, [sp, #16]
   19688:	str	lr, [sp, #20]
   1968c:	beq	19780 <__assert_fail@plt+0x8228>
   19690:	ldr	r2, [r6, #4]
   19694:	cmp	r2, #0
   19698:	mov	ip, r2
   1969c:	beq	19780 <__assert_fail@plt+0x8228>
   196a0:	ldm	r0, {r1, r3}
   196a4:	mov	r5, r0
   196a8:	add	r4, r3, r2, lsl #1
   196ac:	cmp	r1, r4
   196b0:	blt	197bc <__assert_fail@plt+0x8264>
   196b4:	cmp	r3, #0
   196b8:	beq	197fc <__assert_fail@plt+0x82a4>
   196bc:	sub	r2, r2, #1
   196c0:	sub	r3, r3, #1
   196c4:	mvn	r7, r2
   196c8:	mvn	lr, r3
   196cc:	tst	r7, lr
   196d0:	bpl	19710 <__assert_fail@plt+0x81b8>
   196d4:	ldr	r1, [r5, #8]
   196d8:	ldr	r0, [r6, #8]
   196dc:	ldr	ip, [r1, r3, lsl #2]
   196e0:	ldr	r0, [r0, r2, lsl #2]
   196e4:	cmp	ip, r0
   196e8:	beq	196bc <__assert_fail@plt+0x8164>
   196ec:	subge	r3, r3, #1
   196f0:	mvnge	lr, r3
   196f4:	bge	196cc <__assert_fail@plt+0x8174>
   196f8:	sub	r2, r2, #1
   196fc:	sub	r4, r4, #1
   19700:	mvn	r7, r2
   19704:	tst	r7, lr
   19708:	str	r0, [r1, r4, lsl #2]
   1970c:	bmi	196d4 <__assert_fail@plt+0x817c>
   19710:	cmp	r2, #0
   19714:	blt	19734 <__assert_fail@plt+0x81dc>
   19718:	ldr	r0, [r5, #8]
   1971c:	add	r2, r2, #1
   19720:	sub	r4, r4, r2
   19724:	lsl	r2, r2, #2
   19728:	ldr	r1, [r6, #8]
   1972c:	add	r0, r0, r4, lsl #2
   19730:	bl	11264 <memcpy@plt>
   19734:	ldr	r3, [r5, #4]
   19738:	ldr	r0, [r6, #4]
   1973c:	add	r0, r3, r0, lsl #1
   19740:	subs	r2, r0, r4
   19744:	sub	r0, r0, #1
   19748:	beq	19780 <__assert_fail@plt+0x8228>
   1974c:	ldr	r1, [r5, #8]
   19750:	add	ip, r3, r2
   19754:	sub	r3, r3, #1
   19758:	str	ip, [r5, #4]
   1975c:	ldr	lr, [r1, r0, lsl #2]
   19760:	add	r5, r3, r2
   19764:	ldr	ip, [r1, r3, lsl #2]
   19768:	cmp	lr, ip
   1976c:	ble	19798 <__assert_fail@plt+0x8240>
   19770:	subs	r2, r2, #1
   19774:	sub	r0, r0, #1
   19778:	str	lr, [r1, r5, lsl #2]
   1977c:	bne	1975c <__assert_fail@plt+0x8204>
   19780:	mov	r0, #0
   19784:	ldrd	r4, [sp]
   19788:	ldrd	r6, [sp, #8]
   1978c:	ldr	r8, [sp, #16]
   19790:	add	sp, sp, #20
   19794:	pop	{pc}		; (ldr pc, [sp], #4)
   19798:	subs	r3, r3, #1
   1979c:	str	ip, [r1, r5, lsl #2]
   197a0:	bpl	1975c <__assert_fail@plt+0x8204>
   197a4:	mov	r0, r1
   197a8:	lsl	r2, r2, #2
   197ac:	add	r1, r1, r4, lsl #2
   197b0:	bl	11264 <memcpy@plt>
   197b4:	mov	r0, #0
   197b8:	b	19784 <__assert_fail@plt+0x822c>
   197bc:	add	r2, r2, r1
   197c0:	ldr	r0, [r0, #8]
   197c4:	lsl	r1, r2, #3
   197c8:	lsl	r4, r2, #1
   197cc:	bl	261cc <__assert_fail@plt+0x14c74>
   197d0:	cmp	r0, #0
   197d4:	beq	19818 <__assert_fail@plt+0x82c0>
   197d8:	ldr	r3, [r5, #4]
   197dc:	str	r4, [r5]
   197e0:	str	r0, [r5, #8]
   197e4:	cmp	r3, #0
   197e8:	ldreq	ip, [r6, #4]
   197ec:	beq	19800 <__assert_fail@plt+0x82a8>
   197f0:	ldr	r2, [r6, #4]
   197f4:	add	r4, r3, r2, lsl #1
   197f8:	b	196bc <__assert_fail@plt+0x8164>
   197fc:	ldr	r0, [r0, #8]
   19800:	ldr	r1, [r6, #8]
   19804:	str	ip, [r5, #4]
   19808:	ldr	r2, [r6, #4]
   1980c:	lsl	r2, r2, #2
   19810:	bl	11264 <memcpy@plt>
   19814:	b	19780 <__assert_fail@plt+0x8228>
   19818:	mov	r0, #12
   1981c:	b	19784 <__assert_fail@plt+0x822c>
   19820:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19824:	mov	r4, r2
   19828:	mov	r5, r1
   1982c:	ldr	r2, [r1, #20]
   19830:	mov	r1, #0
   19834:	strd	r6, [sp, #8]
   19838:	add	r7, r4, r4, lsl #1
   1983c:	strd	r8, [sp, #16]
   19840:	mov	r8, r0
   19844:	lsl	r7, r7, #2
   19848:	strd	sl, [sp, #24]
   1984c:	mov	sl, r3
   19850:	str	lr, [sp, #32]
   19854:	sub	sp, sp, #36	; 0x24
   19858:	add	r2, r2, r7
   1985c:	ldr	r3, [r2, #4]
   19860:	str	r1, [sp, #12]
   19864:	add	r3, r3, #1
   19868:	lsl	r0, r3, #2
   1986c:	str	r3, [sp, #8]
   19870:	bl	26190 <__assert_fail@plt+0x14c38>
   19874:	cmp	r0, #0
   19878:	str	r0, [sp, #16]
   1987c:	beq	19a6c <__assert_fail@plt+0x8514>
   19880:	ldr	lr, [r5]
   19884:	lsl	r6, r4, #3
   19888:	mov	r3, #65280	; 0xff00
   1988c:	movt	r3, #3
   19890:	mvn	r9, #0
   19894:	ldr	r2, [sp, #12]
   19898:	ldr	r1, [r5, #24]
   1989c:	add	ip, lr, r6
   198a0:	str	r4, [r0, r2, lsl #2]
   198a4:	add	r2, r2, #1
   198a8:	ldr	fp, [ip, #4]
   198ac:	add	r0, r1, r7
   198b0:	str	r2, [sp, #12]
   198b4:	str	r9, [r0, #4]
   198b8:	and	r3, r3, fp
   198bc:	cmp	r3, #0
   198c0:	beq	198f0 <__assert_fail@plt+0x8398>
   198c4:	ldr	r3, [r5, #20]
   198c8:	add	r3, r3, r7
   198cc:	ldr	r2, [r3, #4]
   198d0:	cmp	r2, #0
   198d4:	beq	199bc <__assert_fail@plt+0x8464>
   198d8:	ldr	r3, [r3, #8]
   198dc:	ldr	r3, [r3]
   198e0:	add	lr, lr, r3, lsl #3
   198e4:	ldrb	r3, [lr, #6]
   198e8:	tst	r3, #4
   198ec:	beq	19a38 <__assert_fail@plt+0x84e0>
   198f0:	ldrb	r3, [ip, #4]
   198f4:	tst	r3, #8
   198f8:	beq	199b8 <__assert_fail@plt+0x8460>
   198fc:	ldr	ip, [r5, #20]
   19900:	add	r3, ip, r7
   19904:	ldr	r2, [r3, #4]
   19908:	cmp	r2, #0
   1990c:	movgt	r9, #0
   19910:	movgt	r6, r9
   19914:	bgt	1996c <__assert_fail@plt+0x8414>
   19918:	b	199b8 <__assert_fail@plt+0x8460>
   1991c:	ldrd	r2, [r0]
   19920:	strd	r2, [sp, #20]
   19924:	ldr	r3, [r0, #8]
   19928:	str	r3, [fp, #8]
   1992c:	mov	r1, fp
   19930:	add	r0, sp, #8
   19934:	bl	19678 <__assert_fail@plt+0x8120>
   19938:	cmp	r0, #0
   1993c:	bne	199e4 <__assert_fail@plt+0x848c>
   19940:	ldr	r1, [r5, #24]
   19944:	add	r4, r1, r4
   19948:	ldr	r3, [r4, #4]
   1994c:	cmp	r3, #0
   19950:	beq	19a00 <__assert_fail@plt+0x84a8>
   19954:	ldr	ip, [r5, #20]
   19958:	add	r3, ip, r7
   1995c:	add	r6, r6, #1
   19960:	ldr	r2, [r3, #4]
   19964:	cmp	r2, r6
   19968:	ble	19a18 <__assert_fail@plt+0x84c0>
   1996c:	ldr	r3, [r3, #8]
   19970:	add	fp, sp, #20
   19974:	ldr	r2, [r3, r6, lsl #2]
   19978:	add	r4, r2, r2, lsl #1
   1997c:	lsl	r4, r4, #2
   19980:	add	r0, r1, r4
   19984:	ldr	r3, [r0, #4]
   19988:	cmn	r3, #1
   1998c:	moveq	r9, #1
   19990:	beq	19958 <__assert_fail@plt+0x8400>
   19994:	cmp	r3, #0
   19998:	bne	1991c <__assert_fail@plt+0x83c4>
   1999c:	add	fp, sp, #20
   199a0:	mov	r1, r5
   199a4:	mov	r0, fp
   199a8:	bl	19820 <__assert_fail@plt+0x82c8>
   199ac:	cmp	r0, #0
   199b0:	beq	1992c <__assert_fail@plt+0x83d4>
   199b4:	b	199e4 <__assert_fail@plt+0x848c>
   199b8:	add	r0, r1, r7
   199bc:	ldrd	r2, [sp, #8]
   199c0:	add	ip, sp, #8
   199c4:	strd	r2, [r1, r7]
   199c8:	ldr	r3, [sp, #16]
   199cc:	str	r3, [r0, #8]
   199d0:	ldr	r1, [ip, #8]
   199d4:	mov	r0, #0
   199d8:	ldrd	r2, [sp, #8]
   199dc:	strd	r2, [r8]
   199e0:	str	r1, [r8, #8]
   199e4:	add	sp, sp, #36	; 0x24
   199e8:	ldrd	r4, [sp]
   199ec:	ldrd	r6, [sp, #8]
   199f0:	ldrd	r8, [sp, #16]
   199f4:	ldrd	sl, [sp, #24]
   199f8:	add	sp, sp, #32
   199fc:	pop	{pc}		; (ldr pc, [sp], #4)
   19a00:	ldr	r0, [sp, #28]
   19a04:	mov	r9, #1
   19a08:	bl	13b9c <__assert_fail@plt+0x2644>
   19a0c:	ldr	ip, [r5, #20]
   19a10:	ldr	r1, [r5, #24]
   19a14:	b	19958 <__assert_fail@plt+0x8400>
   19a18:	eor	sl, sl, #1
   19a1c:	add	r0, r1, r7
   19a20:	tst	r9, sl
   19a24:	beq	199bc <__assert_fail@plt+0x8464>
   19a28:	mov	r3, #0
   19a2c:	add	ip, sp, #8
   19a30:	str	r3, [r0, #4]
   19a34:	b	199d0 <__assert_fail@plt+0x8478>
   19a38:	ubfx	fp, fp, #8, #10
   19a3c:	mov	r3, r4
   19a40:	mov	r2, r4
   19a44:	mov	r1, r4
   19a48:	mov	r0, r5
   19a4c:	str	fp, [sp]
   19a50:	bl	17924 <__assert_fail@plt+0x63cc>
   19a54:	cmp	r0, #0
   19a58:	bne	199e4 <__assert_fail@plt+0x848c>
   19a5c:	ldr	ip, [r5]
   19a60:	ldr	r1, [r5, #24]
   19a64:	add	ip, ip, r6
   19a68:	b	198f0 <__assert_fail@plt+0x8398>
   19a6c:	mov	r0, #12
   19a70:	b	199e4 <__assert_fail@plt+0x848c>
   19a74:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19a78:	mov	r5, r2
   19a7c:	mov	r4, r3
   19a80:	strd	r6, [sp, #8]
   19a84:	mov	r6, #0
   19a88:	mov	r7, r0
   19a8c:	strd	r8, [sp, #16]
   19a90:	mov	r8, r1
   19a94:	ldr	r1, [r1, #4]
   19a98:	strd	sl, [sp, #24]
   19a9c:	str	lr, [sp, #32]
   19aa0:	sub	sp, sp, #28
   19aa4:	lsl	r0, r1, #2
   19aa8:	str	r1, [sp, #12]
   19aac:	str	r6, [sp, #16]
   19ab0:	bl	26190 <__assert_fail@plt+0x14c38>
   19ab4:	cmp	r0, r6
   19ab8:	str	r0, [sp, #20]
   19abc:	beq	19bbc <__assert_fail@plt+0x8664>
   19ac0:	ldr	r3, [r8, #4]
   19ac4:	add	r9, sp, #12
   19ac8:	cmp	r3, r6
   19acc:	ble	19b64 <__assert_fail@plt+0x860c>
   19ad0:	ldr	r3, [r8, #8]
   19ad4:	ldr	r1, [r7, #24]
   19ad8:	ldr	r2, [r3, r6, lsl #2]
   19adc:	add	r3, r2, r2, lsl #1
   19ae0:	add	r1, r1, r3, lsl #2
   19ae4:	ldr	fp, [r1, #4]
   19ae8:	cmp	fp, #0
   19aec:	ble	19b84 <__assert_fail@plt+0x862c>
   19af0:	ldr	ip, [r1, #8]
   19af4:	mov	r3, #0
   19af8:	ldr	sl, [r7]
   19afc:	sub	ip, ip, #4
   19b00:	b	19b0c <__assert_fail@plt+0x85b4>
   19b04:	cmp	fp, r3
   19b08:	beq	19b84 <__assert_fail@plt+0x862c>
   19b0c:	ldr	r0, [ip, #4]!
   19b10:	add	r3, r3, #1
   19b14:	add	lr, sl, r0, lsl #3
   19b18:	ldrb	lr, [lr, #4]
   19b1c:	cmp	r4, lr
   19b20:	bne	19b04 <__assert_fail@plt+0x85ac>
   19b24:	ldr	lr, [sl, r0, lsl #3]
   19b28:	cmp	r5, lr
   19b2c:	bne	19b04 <__assert_fail@plt+0x85ac>
   19b30:	cmn	r0, #1
   19b34:	beq	19b84 <__assert_fail@plt+0x862c>
   19b38:	mov	r3, r5
   19b3c:	mov	r1, r9
   19b40:	str	r4, [sp]
   19b44:	mov	r0, r7
   19b48:	bl	17e3c <__assert_fail@plt+0x68e4>
   19b4c:	subs	sl, r0, #0
   19b50:	bne	19b94 <__assert_fail@plt+0x863c>
   19b54:	ldr	r3, [r8, #4]
   19b58:	add	r6, r6, #1
   19b5c:	cmp	r3, r6
   19b60:	bgt	19ad0 <__assert_fail@plt+0x8578>
   19b64:	ldr	r0, [r8, #8]
   19b68:	mov	sl, #0
   19b6c:	bl	13b9c <__assert_fail@plt+0x2644>
   19b70:	ldr	r1, [r9, #8]
   19b74:	ldrd	r2, [sp, #12]
   19b78:	strd	r2, [r8]
   19b7c:	str	r1, [r8, #8]
   19b80:	b	19b9c <__assert_fail@plt+0x8644>
   19b84:	mov	r0, r9
   19b88:	bl	19678 <__assert_fail@plt+0x8120>
   19b8c:	subs	sl, r0, #0
   19b90:	beq	19b54 <__assert_fail@plt+0x85fc>
   19b94:	ldr	r0, [sp, #20]
   19b98:	bl	13b9c <__assert_fail@plt+0x2644>
   19b9c:	mov	r0, sl
   19ba0:	add	sp, sp, #28
   19ba4:	ldrd	r4, [sp]
   19ba8:	ldrd	r6, [sp, #8]
   19bac:	ldrd	r8, [sp, #16]
   19bb0:	ldrd	sl, [sp, #24]
   19bb4:	add	sp, sp, #32
   19bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   19bbc:	mov	sl, #12
   19bc0:	b	19b9c <__assert_fail@plt+0x8644>
   19bc4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19bc8:	mov	r5, #0
   19bcc:	strd	r6, [sp, #8]
   19bd0:	ldr	r7, [r0, #108]	; 0x6c
   19bd4:	strd	r8, [sp, #16]
   19bd8:	strd	sl, [sp, #24]
   19bdc:	str	lr, [sp, #32]
   19be0:	sub	sp, sp, #36	; 0x24
   19be4:	mov	r4, r7
   19be8:	cmp	r5, r4
   19bec:	bge	19c48 <__assert_fail@plt+0x86f0>
   19bf0:	add	lr, r5, r4
   19bf4:	ldr	r6, [r0, #116]	; 0x74
   19bf8:	add	lr, lr, lr, lsr #31
   19bfc:	asr	lr, lr, #1
   19c00:	add	ip, lr, lr, lsl #1
   19c04:	add	ip, r6, ip, lsl #3
   19c08:	ldr	ip, [ip, #4]
   19c0c:	cmp	r2, ip
   19c10:	ble	19c38 <__assert_fail@plt+0x86e0>
   19c14:	b	19e74 <__assert_fail@plt+0x891c>
   19c18:	asr	ip, ip, #1
   19c1c:	add	r4, ip, ip, lsl #1
   19c20:	mov	r8, ip
   19c24:	add	r4, r6, r4, lsl #3
   19c28:	ldr	r4, [r4, #4]
   19c2c:	cmp	r2, r4
   19c30:	bgt	19e7c <__assert_fail@plt+0x8924>
   19c34:	mov	lr, ip
   19c38:	add	ip, lr, r5
   19c3c:	cmp	lr, r5
   19c40:	add	ip, ip, ip, lsr #31
   19c44:	bgt	19c18 <__assert_fail@plt+0x86c0>
   19c48:	cmp	r7, r5
   19c4c:	ble	19e88 <__assert_fail@plt+0x8930>
   19c50:	ldr	r4, [r0, #116]	; 0x74
   19c54:	add	ip, r5, r5, lsl #1
   19c58:	cmn	r5, #1
   19c5c:	movne	r5, #0
   19c60:	moveq	r5, #1
   19c64:	lsl	ip, ip, #3
   19c68:	add	lr, r4, ip
   19c6c:	ldr	lr, [lr, #4]
   19c70:	cmp	lr, r2
   19c74:	orrne	r5, r5, #1
   19c78:	cmp	r5, #0
   19c7c:	bne	19e88 <__assert_fail@plt+0x8930>
   19c80:	ldr	sl, [r0, #84]	; 0x54
   19c84:	mov	r6, r2
   19c88:	mov	r7, r0
   19c8c:	add	r9, r1, #8
   19c90:	str	r1, [sp]
   19c94:	str	r3, [sp, #12]
   19c98:	add	r3, ip, #24
   19c9c:	str	r3, [sp, #8]
   19ca0:	ldr	r3, [sp, #8]
   19ca4:	add	r4, r4, r3
   19ca8:	b	19d5c <__assert_fail@plt+0x8804>
   19cac:	ldr	r3, [r7, #100]	; 0x64
   19cb0:	ldr	r2, [sl, #12]
   19cb4:	ldr	fp, [r3, r5, lsl #2]
   19cb8:	ldr	r8, [r2, r8, lsl #2]
   19cbc:	cmp	fp, #0
   19cc0:	beq	19e44 <__assert_fail@plt+0x88ec>
   19cc4:	mov	r2, r8
   19cc8:	add	r1, fp, #12
   19ccc:	ldr	r0, [fp, #8]
   19cd0:	bl	17db4 <__assert_fail@plt+0x685c>
   19cd4:	cmp	r0, #0
   19cd8:	bne	19d4c <__assert_fail@plt+0x87f4>
   19cdc:	add	r2, sp, #20
   19ce0:	add	r1, fp, #4
   19ce4:	mov	r0, r2
   19ce8:	str	r2, [sp, #4]
   19cec:	bl	189dc <__assert_fail@plt+0x7484>
   19cf0:	ldr	r2, [sp, #4]
   19cf4:	mov	r1, r8
   19cf8:	str	r0, [sp, #16]
   19cfc:	mov	r0, r2
   19d00:	bl	177e0 <__assert_fail@plt+0x6288>
   19d04:	eor	r0, r0, #1
   19d08:	ldr	r2, [sp, #4]
   19d0c:	ldr	r3, [sp, #16]
   19d10:	cmp	r3, #0
   19d14:	orrne	r0, r0, #1
   19d18:	tst	r0, #255	; 0xff
   19d1c:	bne	19eb8 <__assert_fail@plt+0x8960>
   19d20:	ldr	r8, [r7, #100]	; 0x64
   19d24:	mov	r1, sl
   19d28:	add	r0, sp, #16
   19d2c:	bl	18eb8 <__assert_fail@plt+0x7960>
   19d30:	str	r0, [r8, r5, lsl #2]
   19d34:	ldr	r0, [sp, #28]
   19d38:	bl	13b9c <__assert_fail@plt+0x2644>
   19d3c:	ldr	r3, [r7, #100]	; 0x64
   19d40:	ldr	r3, [r3, r5, lsl #2]
   19d44:	cmp	r3, #0
   19d48:	beq	19ea8 <__assert_fail@plt+0x8950>
   19d4c:	add	r4, r4, #24
   19d50:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   19d54:	cmp	r3, #0
   19d58:	beq	19e88 <__assert_fail@plt+0x8930>
   19d5c:	ldr	r3, [sp]
   19d60:	mov	r1, r9
   19d64:	ldr	r8, [r4, #-24]	; 0xffffffe8
   19d68:	ldr	fp, [r3, #4]
   19d6c:	mov	r2, r8
   19d70:	mov	r0, fp
   19d74:	bl	17db4 <__assert_fail@plt+0x685c>
   19d78:	cmp	r0, #0
   19d7c:	beq	19d4c <__assert_fail@plt+0x87f4>
   19d80:	ldr	r2, [r4, #-16]
   19d84:	ldr	r5, [r4, #-12]
   19d88:	add	r5, r6, r5
   19d8c:	sub	r5, r5, r2
   19d90:	cmp	r6, r5
   19d94:	bne	19cac <__assert_fail@plt+0x8754>
   19d98:	ldr	r2, [sl, #20]
   19d9c:	add	r8, r8, r8, lsl #1
   19da0:	mov	r0, fp
   19da4:	mov	r1, r9
   19da8:	add	r8, r2, r8, lsl #2
   19dac:	ldr	r3, [r8, #8]
   19db0:	ldr	r5, [r3]
   19db4:	mov	r2, r5
   19db8:	bl	17db4 <__assert_fail@plt+0x685c>
   19dbc:	cmp	r0, #0
   19dc0:	bne	19d4c <__assert_fail@plt+0x87f4>
   19dc4:	mov	r3, #1
   19dc8:	mov	fp, r0
   19dcc:	mov	r0, #4
   19dd0:	add	r4, sp, #20
   19dd4:	str	r3, [sp, #20]
   19dd8:	str	r3, [sp, #24]
   19ddc:	bl	26190 <__assert_fail@plt+0x14c38>
   19de0:	cmp	r0, #0
   19de4:	mov	r1, r4
   19de8:	str	r0, [sp, #28]
   19dec:	ldr	r2, [sp, #12]
   19df0:	streq	fp, [sp, #20]
   19df4:	streq	fp, [sp, #24]
   19df8:	moveq	fp, #12
   19dfc:	strne	r5, [r0]
   19e00:	mov	r0, sl
   19e04:	ldr	r3, [sp, #72]	; 0x48
   19e08:	str	fp, [sp, #16]
   19e0c:	bl	19a74 <__assert_fail@plt+0x851c>
   19e10:	mov	r5, r0
   19e14:	mov	r1, r4
   19e18:	ldr	r0, [sp]
   19e1c:	bl	19678 <__assert_fail@plt+0x8120>
   19e20:	mov	r4, r0
   19e24:	ldr	r0, [sp, #28]
   19e28:	bl	13b9c <__assert_fail@plt+0x2644>
   19e2c:	ldr	r0, [sp, #16]
   19e30:	orr	r3, r5, r4
   19e34:	orrs	r3, r3, r0
   19e38:	bne	19ed4 <__assert_fail@plt+0x897c>
   19e3c:	ldr	r4, [r7, #116]	; 0x74
   19e40:	b	19ca0 <__assert_fail@plt+0x8748>
   19e44:	mov	r3, #1
   19e48:	mov	r0, #4
   19e4c:	str	r3, [sp, #20]
   19e50:	str	r3, [sp, #24]
   19e54:	bl	26190 <__assert_fail@plt+0x14c38>
   19e58:	cmp	r0, #0
   19e5c:	str	r0, [sp, #28]
   19e60:	beq	19ecc <__assert_fail@plt+0x8974>
   19e64:	add	r2, sp, #20
   19e68:	str	r8, [r0]
   19e6c:	str	fp, [sp, #16]
   19e70:	b	19d20 <__assert_fail@plt+0x87c8>
   19e74:	mov	r8, lr
   19e78:	mov	lr, r4
   19e7c:	add	r5, r8, #1
   19e80:	mov	r4, lr
   19e84:	b	19be8 <__assert_fail@plt+0x8690>
   19e88:	mov	r0, #0
   19e8c:	add	sp, sp, #36	; 0x24
   19e90:	ldrd	r4, [sp]
   19e94:	ldrd	r6, [sp, #8]
   19e98:	ldrd	r8, [sp, #16]
   19e9c:	ldrd	sl, [sp, #24]
   19ea0:	add	sp, sp, #32
   19ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   19ea8:	ldr	r0, [sp, #16]
   19eac:	cmp	r0, #0
   19eb0:	beq	19d4c <__assert_fail@plt+0x87f4>
   19eb4:	b	19e8c <__assert_fail@plt+0x8934>
   19eb8:	ldr	r0, [sp, #28]
   19ebc:	bl	13b9c <__assert_fail@plt+0x2644>
   19ec0:	ldr	r0, [sp, #16]
   19ec4:	cmp	r0, #0
   19ec8:	bne	19e8c <__assert_fail@plt+0x8934>
   19ecc:	mov	r0, #12
   19ed0:	b	19e8c <__assert_fail@plt+0x8934>
   19ed4:	cmp	r0, #0
   19ed8:	bne	19e8c <__assert_fail@plt+0x8934>
   19edc:	cmp	r5, #0
   19ee0:	movne	r0, r5
   19ee4:	moveq	r0, r4
   19ee8:	b	19e8c <__assert_fail@plt+0x8934>
   19eec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19ef0:	mov	r3, #0
   19ef4:	strd	r6, [sp, #8]
   19ef8:	strd	sl, [sp, #24]
   19efc:	ldr	sl, [r1, #8]
   19f00:	strd	r8, [sp, #16]
   19f04:	str	lr, [sp, #32]
   19f08:	sub	sp, sp, #14400	; 0x3840
   19f0c:	sub	sp, sp, #44	; 0x2c
   19f10:	str	r3, [r1, #44]	; 0x2c
   19f14:	add	r8, sp, #104	; 0x68
   19f18:	str	r3, [r1, #48]	; 0x30
   19f1c:	cmp	sl, r3
   19f20:	str	r3, [r8]
   19f24:	str	r3, [r8, #4]
   19f28:	str	r3, [r8, #8]
   19f2c:	str	r3, [r8, #12]
   19f30:	str	r3, [r8, #16]
   19f34:	str	r1, [sp, #16]
   19f38:	str	r3, [r8, #20]
   19f3c:	str	r3, [r8, #24]
   19f40:	str	r3, [r8, #28]
   19f44:	ble	1a90c <__assert_fail@plt+0x93b4>
   19f48:	add	r7, sp, #1120	; 0x460
   19f4c:	str	r3, [sp, #20]
   19f50:	add	r7, r7, #8
   19f54:	str	r3, [sp, #24]
   19f58:	str	r0, [sp, #36]	; 0x24
   19f5c:	str	r3, [sp, #48]	; 0x30
   19f60:	str	r3, [sp, #52]	; 0x34
   19f64:	ldr	r3, [sp, #16]
   19f68:	ldr	r1, [sp, #24]
   19f6c:	ldr	r2, [r3, #12]
   19f70:	lsl	r3, r1, #2
   19f74:	str	r3, [sp, #32]
   19f78:	ldr	r3, [sp, #36]	; 0x24
   19f7c:	ldr	r1, [r2, r1, lsl #2]
   19f80:	ldr	r3, [r3]
   19f84:	add	r2, r3, r1, lsl #3
   19f88:	ldrb	r6, [r2, #4]
   19f8c:	str	r2, [sp, #12]
   19f90:	ldr	r2, [r2, #4]
   19f94:	cmp	r6, #1
   19f98:	ubfx	r2, r2, #8, #10
   19f9c:	beq	1a22c <__assert_fail@plt+0x8cd4>
   19fa0:	cmp	r6, #3
   19fa4:	beq	1a6a4 <__assert_fail@plt+0x914c>
   19fa8:	cmp	r6, #5
   19fac:	beq	1a508 <__assert_fail@plt+0x8fb0>
   19fb0:	cmp	r6, #7
   19fb4:	beq	1a60c <__assert_fail@plt+0x90b4>
   19fb8:	ldr	r3, [sp, #24]
   19fbc:	add	r3, r3, #1
   19fc0:	cmp	r3, sl
   19fc4:	str	r3, [sp, #24]
   19fc8:	blt	19f64 <__assert_fail@plt+0x8a0c>
   19fcc:	ldr	r3, [sp, #20]
   19fd0:	ldr	r9, [sp, #36]	; 0x24
   19fd4:	cmp	r3, #0
   19fd8:	ble	1a908 <__assert_fail@plt+0x93b0>
   19fdc:	ldr	r3, [sp, #20]
   19fe0:	add	r5, sp, #2144	; 0x860
   19fe4:	mov	fp, #0
   19fe8:	add	r5, r5, #8
   19fec:	str	fp, [r5, #-2088]	; 0xfffff7d8
   19ff0:	add	r3, r3, #1
   19ff4:	lsl	r0, r3, #2
   19ff8:	str	r3, [r5, #-2092]	; 0xfffff7d4
   19ffc:	bl	26190 <__assert_fail@plt+0x14c38>
   1a000:	cmp	r0, fp
   1a004:	str	r0, [r5, #-2084]	; 0xfffff7dc
   1a008:	beq	1a8a8 <__assert_fail@plt+0x9350>
   1a00c:	mov	r3, #0
   1a010:	mov	r2, #0
   1a014:	str	fp, [r5, #-2096]	; 0xfffff7d0
   1a018:	add	r1, sp, #6208	; 0x1840
   1a01c:	add	r4, sp, #3168	; 0xc60
   1a020:	str	r8, [sp]
   1a024:	add	r1, r1, #40	; 0x28
   1a028:	add	r4, r4, #8
   1a02c:	strd	r2, [r8, #-32]	; 0xffffffe0
   1a030:	mov	sl, fp
   1a034:	add	r6, r1, #28
   1a038:	str	r1, [sp, #24]
   1a03c:	strd	r2, [sp, #80]	; 0x50
   1a040:	strd	r2, [sp, #88]	; 0x58
   1a044:	strd	r2, [sp, #96]	; 0x60
   1a048:	sub	r3, r8, #48	; 0x30
   1a04c:	str	r3, [sp, #12]
   1a050:	str	r4, [sp, #28]
   1a054:	str	r4, [sp, #40]	; 0x28
   1a058:	ldr	ip, [r4, #4]
   1a05c:	mov	r3, #0
   1a060:	str	r3, [r5, #-2088]	; 0xfffff7d8
   1a064:	cmp	ip, r3
   1a068:	movgt	r7, #0
   1a06c:	ble	1a0b8 <__assert_fail@plt+0x8b60>
   1a070:	ldr	r2, [r4, #8]
   1a074:	add	r0, sp, #60	; 0x3c
   1a078:	ldr	r3, [r9, #12]
   1a07c:	ldr	r2, [r2, r7, lsl #2]
   1a080:	ldr	r3, [r3, r2, lsl #2]
   1a084:	cmn	r3, #1
   1a088:	add	r2, r3, r3, lsl #1
   1a08c:	beq	1a0ac <__assert_fail@plt+0x8b54>
   1a090:	ldr	r1, [r9, #24]
   1a094:	add	r1, r1, r2, lsl #2
   1a098:	bl	19678 <__assert_fail@plt+0x8120>
   1a09c:	cmp	r0, #0
   1a0a0:	str	r0, [r5, #-2096]	; 0xfffff7d0
   1a0a4:	bne	1a748 <__assert_fail@plt+0x91f0>
   1a0a8:	ldr	ip, [r4, #4]
   1a0ac:	add	r7, r7, #1
   1a0b0:	cmp	ip, r7
   1a0b4:	bgt	1a070 <__assert_fail@plt+0x8b18>
   1a0b8:	mov	r3, #0
   1a0bc:	add	r2, sp, #60	; 0x3c
   1a0c0:	ldr	r0, [sp, #12]
   1a0c4:	mov	r1, r9
   1a0c8:	bl	18bd0 <__assert_fail@plt+0x7678>
   1a0cc:	ldr	r3, [sp]
   1a0d0:	cmp	r0, #0
   1a0d4:	mov	r7, r0
   1a0d8:	str	r0, [r3], #4
   1a0dc:	str	r3, [sp]
   1a0e0:	beq	1a8c0 <__assert_fail@plt+0x9368>
   1a0e4:	ldrsb	r3, [r7, #52]	; 0x34
   1a0e8:	cmp	r3, #0
   1a0ec:	blt	1a778 <__assert_fail@plt+0x9220>
   1a0f0:	add	r3, sp, #1120	; 0x460
   1a0f4:	str	r7, [r5, sl, lsl #2]
   1a0f8:	add	r3, r3, #8
   1a0fc:	str	r7, [r3, sl, lsl #2]
   1a100:	sub	r7, r8, #36	; 0x24
   1a104:	sub	r1, r6, #32
   1a108:	mov	r2, r7
   1a10c:	ldr	r3, [r2, #4]!
   1a110:	ldr	r0, [r1, #4]!
   1a114:	orr	r3, r3, r0
   1a118:	cmp	r6, r1
   1a11c:	str	r3, [r2]
   1a120:	bne	1a10c <__assert_fail@plt+0x8bb4>
   1a124:	ldr	r3, [sp, #20]
   1a128:	add	sl, sl, #1
   1a12c:	add	r4, r4, #12
   1a130:	add	r6, r6, #32
   1a134:	cmp	sl, r3
   1a138:	bne	1a058 <__assert_fail@plt+0x8b00>
   1a13c:	cmp	fp, #0
   1a140:	bne	1a94c <__assert_fail@plt+0x93f4>
   1a144:	mov	r1, #256	; 0x100
   1a148:	mov	r0, #4
   1a14c:	bl	2611c <__assert_fail@plt+0x14bc4>
   1a150:	ldr	r3, [sp, #16]
   1a154:	cmp	r0, #0
   1a158:	mov	r6, r0
   1a15c:	str	r0, [r3, #44]	; 0x2c
   1a160:	beq	1a748 <__assert_fail@plt+0x91f0>
   1a164:	ldr	r8, [sp, #24]
   1a168:	add	r4, r9, #96	; 0x60
   1a16c:	mov	lr, r0
   1a170:	add	ip, r0, #1024	; 0x400
   1a174:	ldr	r3, [r7, #4]!
   1a178:	cmp	r3, #0
   1a17c:	movne	r0, lr
   1a180:	movne	r1, #1
   1a184:	beq	1a1a0 <__assert_fail@plt+0x8c48>
   1a188:	tst	r3, #1
   1a18c:	bne	1a8d0 <__assert_fail@plt+0x9378>
   1a190:	lsrs	r3, r3, #1
   1a194:	add	r0, r0, #4
   1a198:	lsl	r1, r1, #1
   1a19c:	bne	1a188 <__assert_fail@plt+0x8c30>
   1a1a0:	add	lr, lr, #128	; 0x80
   1a1a4:	add	r4, r4, #4
   1a1a8:	cmp	ip, lr
   1a1ac:	add	r8, r8, #4
   1a1b0:	bne	1a174 <__assert_fail@plt+0x8c1c>
   1a1b4:	ldr	r3, [r5, #-2080]	; 0xfffff7e0
   1a1b8:	ubfx	r3, r3, #10, #1
   1a1bc:	cmp	r3, #0
   1a1c0:	beq	1a1f4 <__assert_fail@plt+0x8c9c>
   1a1c4:	ldr	ip, [sp, #20]
   1a1c8:	add	r2, sp, #6208	; 0x1840
   1a1cc:	add	r1, r3, #1
   1a1d0:	add	r2, r2, #40	; 0x28
   1a1d4:	sub	r0, r3, #1
   1a1d8:	add	r2, r2, r3, lsl #5
   1a1dc:	ldr	r2, [r2, #-32]	; 0xffffffe0
   1a1e0:	tst	r2, #1024	; 0x400
   1a1e4:	bne	1a938 <__assert_fail@plt+0x93e0>
   1a1e8:	cmp	ip, r3
   1a1ec:	mov	r3, r1
   1a1f0:	bne	1a1c8 <__assert_fail@plt+0x8c70>
   1a1f4:	ldr	r0, [r5, #-2084]	; 0xfffff7dc
   1a1f8:	bl	13b9c <__assert_fail@plt+0x2644>
   1a1fc:	ldr	r3, [sp, #20]
   1a200:	ldr	r5, [sp, #28]
   1a204:	ldr	r2, [sp, #40]	; 0x28
   1a208:	add	r3, r3, r3, lsl #1
   1a20c:	add	r4, r2, r3, lsl #2
   1a210:	add	r5, r5, #12
   1a214:	ldr	r0, [r5, #-4]
   1a218:	bl	13b9c <__assert_fail@plt+0x2644>
   1a21c:	cmp	r4, r5
   1a220:	bne	1a210 <__assert_fail@plt+0x8cb8>
   1a224:	mov	r0, #1
   1a228:	b	1a5ec <__assert_fail@plt+0x9094>
   1a22c:	ldrb	r3, [r3, r1, lsl #3]
   1a230:	asr	r0, r3, #5
   1a234:	and	r3, r3, #31
   1a238:	ldr	r1, [r8, r0, lsl #2]
   1a23c:	orr	r3, r1, r6, lsl r3
   1a240:	str	r3, [r8, r0, lsl #2]
   1a244:	cmp	r2, #0
   1a248:	beq	1a328 <__assert_fail@plt+0x8dd0>
   1a24c:	tst	r2, #32
   1a250:	bne	1a568 <__assert_fail@plt+0x9010>
   1a254:	tst	r2, #128	; 0x80
   1a258:	bne	1a59c <__assert_fail@plt+0x9044>
   1a25c:	tst	r2, #4
   1a260:	beq	1a2c4 <__assert_fail@plt+0x8d6c>
   1a264:	cmp	r6, #1
   1a268:	beq	1a728 <__assert_fail@plt+0x91d0>
   1a26c:	ldr	r1, [sp, #36]	; 0x24
   1a270:	ldr	r3, [r1, #92]	; 0x5c
   1a274:	cmp	r3, #1
   1a278:	ble	1a668 <__assert_fail@plt+0x9110>
   1a27c:	ldr	lr, [r1, #60]	; 0x3c
   1a280:	add	r0, r1, #96	; 0x60
   1a284:	add	r9, r1, #128	; 0x80
   1a288:	sub	ip, r8, #4
   1a28c:	mov	r1, #0
   1a290:	sub	lr, lr, #4
   1a294:	ldr	r3, [lr, #4]!
   1a298:	ldr	r5, [r0], #4
   1a29c:	ldr	r4, [ip, #4]!
   1a2a0:	mvn	r3, r3
   1a2a4:	orr	r3, r3, r5
   1a2a8:	cmp	r0, r9
   1a2ac:	and	r3, r3, r4
   1a2b0:	orr	r1, r1, r3
   1a2b4:	str	r3, [ip]
   1a2b8:	bne	1a294 <__assert_fail@plt+0x8d3c>
   1a2bc:	cmp	r1, #0
   1a2c0:	beq	19fb8 <__assert_fail@plt+0x8a60>
   1a2c4:	tst	r2, #8
   1a2c8:	beq	1a328 <__assert_fail@plt+0x8dd0>
   1a2cc:	cmp	r6, #1
   1a2d0:	beq	1a70c <__assert_fail@plt+0x91b4>
   1a2d4:	ldr	r2, [sp, #36]	; 0x24
   1a2d8:	ldr	r3, [r2, #92]	; 0x5c
   1a2dc:	cmp	r3, #1
   1a2e0:	ble	1a6d0 <__assert_fail@plt+0x9178>
   1a2e4:	ldr	lr, [r2, #60]	; 0x3c
   1a2e8:	sub	ip, r8, #4
   1a2ec:	add	r0, r2, #96	; 0x60
   1a2f0:	add	r5, r2, #128	; 0x80
   1a2f4:	mov	r1, #0
   1a2f8:	sub	lr, lr, #4
   1a2fc:	ldr	r2, [r0], #4
   1a300:	ldr	r4, [lr, #4]!
   1a304:	ldr	r3, [ip, #4]!
   1a308:	cmp	r5, r0
   1a30c:	and	r2, r2, r4
   1a310:	bic	r3, r3, r2
   1a314:	orr	r1, r1, r3
   1a318:	str	r3, [ip]
   1a31c:	bne	1a2fc <__assert_fail@plt+0x8da4>
   1a320:	cmp	r1, #0
   1a324:	beq	19fb8 <__assert_fail@plt+0x8a60>
   1a328:	ldr	r3, [sp, #20]
   1a32c:	cmp	r3, #0
   1a330:	movle	r5, #0
   1a334:	ble	1a4f0 <__assert_fail@plt+0x8f98>
   1a338:	add	r4, sp, #6272	; 0x1880
   1a33c:	add	r9, sp, #2144	; 0x860
   1a340:	str	r6, [sp]
   1a344:	add	r4, r4, #4
   1a348:	mov	r5, #0
   1a34c:	ldr	r6, [sp, #20]
   1a350:	add	r9, r9, #8
   1a354:	b	1a39c <__assert_fail@plt+0x8e44>
   1a358:	ldr	r3, [sp, #12]
   1a35c:	add	r0, sp, #14400	; 0x3840
   1a360:	add	r0, r0, #40	; 0x28
   1a364:	ldrb	r2, [r3]
   1a368:	asr	r3, r2, #5
   1a36c:	and	r2, r2, #31
   1a370:	add	r3, r0, r3, lsl #2
   1a374:	add	r3, r3, r1
   1a378:	sub	r3, r3, #8192	; 0x2000
   1a37c:	ldr	r3, [r3]
   1a380:	lsr	r2, r3, r2
   1a384:	tst	r2, #1
   1a388:	bne	1a3ac <__assert_fail@plt+0x8e54>
   1a38c:	add	r5, r5, #1
   1a390:	add	r4, r4, #32
   1a394:	cmp	r5, r6
   1a398:	bge	1a4ec <__assert_fail@plt+0x8f94>
   1a39c:	ldr	r3, [sp]
   1a3a0:	lsl	r1, r5, #5
   1a3a4:	cmp	r3, #1
   1a3a8:	beq	1a358 <__assert_fail@plt+0x8e00>
   1a3ac:	sub	r1, r8, #4
   1a3b0:	sub	r2, r4, #32
   1a3b4:	mov	sl, r1
   1a3b8:	mov	r0, r2
   1a3bc:	sub	lr, r7, #4
   1a3c0:	mov	ip, #0
   1a3c4:	ldr	fp, [r0, #4]!
   1a3c8:	ldr	r3, [sl, #4]!
   1a3cc:	cmp	r0, r4
   1a3d0:	and	r3, r3, fp
   1a3d4:	orr	ip, ip, r3
   1a3d8:	str	r3, [lr, #4]!
   1a3dc:	bne	1a3c4 <__assert_fail@plt+0x8e6c>
   1a3e0:	cmp	ip, #0
   1a3e4:	beq	1a38c <__assert_fail@plt+0x8e34>
   1a3e8:	mov	sl, #0
   1a3ec:	sub	fp, r9, #4
   1a3f0:	mov	lr, sl
   1a3f4:	ldr	r3, [r1, #4]!
   1a3f8:	ldr	ip, [r2, #4]!
   1a3fc:	bic	r0, ip, r3
   1a400:	bic	r3, r3, ip
   1a404:	cmp	r2, r4
   1a408:	orr	lr, lr, r0
   1a40c:	orr	sl, sl, r3
   1a410:	str	r0, [fp, #4]!
   1a414:	str	r3, [r1]
   1a418:	bne	1a3f4 <__assert_fail@plt+0x8e9c>
   1a41c:	add	fp, r5, r5, lsl #1
   1a420:	add	r3, sp, #3168	; 0xc60
   1a424:	cmp	lr, #0
   1a428:	add	r3, r3, #8
   1a42c:	str	sl, [sp, #28]
   1a430:	add	lr, r3, fp, lsl #2
   1a434:	str	lr, [sp, #20]
   1a438:	str	r3, [sp, #40]	; 0x28
   1a43c:	beq	1a4c0 <__assert_fail@plt+0x8f68>
   1a440:	add	r3, sp, #14400	; 0x3840
   1a444:	ldrd	r0, [r9]
   1a448:	add	r3, r3, #40	; 0x28
   1a44c:	add	ip, r3, r6, lsl #5
   1a450:	ldrd	sl, [r9, #16]
   1a454:	lsl	r3, r6, #1
   1a458:	sub	ip, ip, #8192	; 0x2000
   1a45c:	strd	r0, [ip]
   1a460:	ldrd	r0, [r9, #8]
   1a464:	strd	r0, [ip, #8]
   1a468:	ldrd	r0, [r9, #24]
   1a46c:	strd	sl, [ip, #16]
   1a470:	strd	r0, [ip, #24]
   1a474:	ldrd	r0, [r7]
   1a478:	strd	r0, [r4, #-28]	; 0xffffffe4
   1a47c:	add	r0, r3, r6
   1a480:	mov	r1, lr
   1a484:	ldrd	sl, [r7, #8]
   1a488:	str	r3, [sp, #44]	; 0x2c
   1a48c:	add	r3, sp, #3168	; 0xc60
   1a490:	add	r3, r3, #8
   1a494:	add	r0, r3, r0, lsl #2
   1a498:	strd	sl, [r4, #-20]	; 0xffffffec
   1a49c:	ldrd	sl, [r7, #16]
   1a4a0:	strd	sl, [r4, #-12]
   1a4a4:	ldrd	sl, [r7, #24]
   1a4a8:	strd	sl, [r4, #-4]
   1a4ac:	bl	189dc <__assert_fail@plt+0x7484>
   1a4b0:	cmp	r0, #0
   1a4b4:	ldr	r3, [sp, #44]	; 0x2c
   1a4b8:	bne	1a720 <__assert_fail@plt+0x91c8>
   1a4bc:	add	r6, r6, #1
   1a4c0:	ldr	r3, [sp, #16]
   1a4c4:	ldr	r0, [sp, #20]
   1a4c8:	ldr	r2, [sp, #32]
   1a4cc:	ldr	r3, [r3, #12]
   1a4d0:	ldr	r1, [r3, r2]
   1a4d4:	bl	177e0 <__assert_fail@plt+0x6288>
   1a4d8:	cmp	r0, #0
   1a4dc:	beq	1a5bc <__assert_fail@plt+0x9064>
   1a4e0:	ldr	r3, [sp, #28]
   1a4e4:	cmp	r3, #0
   1a4e8:	bne	1a38c <__assert_fail@plt+0x8e34>
   1a4ec:	str	r6, [sp, #20]
   1a4f0:	ldr	r3, [sp, #20]
   1a4f4:	cmp	r5, r3
   1a4f8:	beq	1a7e4 <__assert_fail@plt+0x928c>
   1a4fc:	ldr	r3, [sp, #16]
   1a500:	ldr	sl, [r3, #8]
   1a504:	b	19fb8 <__assert_fail@plt+0x8a60>
   1a508:	ldr	r1, [sp, #36]	; 0x24
   1a50c:	ldr	r3, [r1, #92]	; 0x5c
   1a510:	cmp	r3, #1
   1a514:	ble	1a63c <__assert_fail@plt+0x90e4>
   1a518:	ldr	lr, [r1, #60]	; 0x3c
   1a51c:	sub	r0, r8, #4
   1a520:	sub	r1, lr, #4
   1a524:	add	lr, lr, #28
   1a528:	ldr	r3, [r0, #4]!
   1a52c:	ldr	ip, [r1, #4]!
   1a530:	orr	r3, r3, ip
   1a534:	cmp	r1, lr
   1a538:	str	r3, [r0]
   1a53c:	bne	1a528 <__assert_fail@plt+0x8fd0>
   1a540:	ldr	r3, [sp, #36]	; 0x24
   1a544:	ldr	r3, [r3, #128]	; 0x80
   1a548:	tst	r3, #64	; 0x40
   1a54c:	beq	1a62c <__assert_fail@plt+0x90d4>
   1a550:	tst	r3, #128	; 0x80
   1a554:	beq	1a244 <__assert_fail@plt+0x8cec>
   1a558:	ldr	r3, [sp, #104]	; 0x68
   1a55c:	bic	r3, r3, #1
   1a560:	str	r3, [sp, #104]	; 0x68
   1a564:	b	1a244 <__assert_fail@plt+0x8cec>
   1a568:	ldrd	r0, [sp, #48]	; 0x30
   1a56c:	str	r1, [r8, #4]
   1a570:	ldr	r3, [sp, #104]	; 0x68
   1a574:	str	r0, [r8]
   1a578:	strd	r0, [r8, #8]
   1a57c:	strd	r0, [r8, #16]
   1a580:	strd	r0, [r8, #24]
   1a584:	tst	r3, #1024	; 0x400
   1a588:	beq	19fb8 <__assert_fail@plt+0x8a60>
   1a58c:	mov	r3, #1024	; 0x400
   1a590:	tst	r2, #128	; 0x80
   1a594:	str	r3, [sp, #104]	; 0x68
   1a598:	beq	1a25c <__assert_fail@plt+0x8d04>
   1a59c:	ldr	r3, [sp, #48]	; 0x30
   1a5a0:	ldr	r2, [sp, #52]	; 0x34
   1a5a4:	str	r3, [r8]
   1a5a8:	strd	r2, [r8, #4]
   1a5ac:	strd	r2, [r8, #12]
   1a5b0:	strd	r2, [r8, #20]
   1a5b4:	str	r2, [r8, #28]
   1a5b8:	b	19fb8 <__assert_fail@plt+0x8a60>
   1a5bc:	lsl	r3, r6, #1
   1a5c0:	str	r6, [sp, #20]
   1a5c4:	ldr	r2, [sp, #20]
   1a5c8:	ldr	r4, [sp, #40]	; 0x28
   1a5cc:	add	r3, r3, r2
   1a5d0:	add	r5, r4, r3, lsl #2
   1a5d4:	add	r4, r4, #12
   1a5d8:	ldr	r0, [r4, #-4]
   1a5dc:	bl	13b9c <__assert_fail@plt+0x2644>
   1a5e0:	cmp	r5, r4
   1a5e4:	bne	1a5d4 <__assert_fail@plt+0x907c>
   1a5e8:	mov	r0, #0
   1a5ec:	add	sp, sp, #14400	; 0x3840
   1a5f0:	add	sp, sp, #44	; 0x2c
   1a5f4:	ldrd	r4, [sp]
   1a5f8:	ldrd	r6, [sp, #8]
   1a5fc:	ldrd	r8, [sp, #16]
   1a600:	ldrd	sl, [sp, #24]
   1a604:	add	sp, sp, #32
   1a608:	pop	{pc}		; (ldr pc, [sp], #4)
   1a60c:	ldr	r3, [sp, #36]	; 0x24
   1a610:	mvn	r0, #0
   1a614:	mvn	r1, #0
   1a618:	strd	r0, [r8]
   1a61c:	strd	r0, [r8, #8]
   1a620:	ldr	r3, [r3, #128]	; 0x80
   1a624:	tst	r3, #64	; 0x40
   1a628:	bne	1a550 <__assert_fail@plt+0x8ff8>
   1a62c:	ldr	r1, [sp, #104]	; 0x68
   1a630:	bic	r1, r1, #1024	; 0x400
   1a634:	str	r1, [sp, #104]	; 0x68
   1a638:	b	1a550 <__assert_fail@plt+0x8ff8>
   1a63c:	ldr	r3, [sp, #36]	; 0x24
   1a640:	mvn	r0, #0
   1a644:	mvn	r1, #0
   1a648:	strd	r0, [r8]
   1a64c:	strd	r0, [r8, #8]
   1a650:	strd	r0, [r8, #16]
   1a654:	ldr	r3, [r3, #128]	; 0x80
   1a658:	strd	r0, [r8, #24]
   1a65c:	tst	r3, #64	; 0x40
   1a660:	bne	1a550 <__assert_fail@plt+0x8ff8>
   1a664:	b	1a62c <__assert_fail@plt+0x90d4>
   1a668:	ldr	r3, [sp, #36]	; 0x24
   1a66c:	sub	ip, r8, #4
   1a670:	mov	r1, #0
   1a674:	add	r0, r3, #96	; 0x60
   1a678:	add	r4, r3, #128	; 0x80
   1a67c:	ldr	r3, [r0], #4
   1a680:	ldr	lr, [ip, #4]!
   1a684:	cmp	r0, r4
   1a688:	and	r3, r3, lr
   1a68c:	orr	r1, r1, r3
   1a690:	str	r3, [ip]
   1a694:	bne	1a67c <__assert_fail@plt+0x9124>
   1a698:	cmp	r1, #0
   1a69c:	bne	1a2c4 <__assert_fail@plt+0x8d6c>
   1a6a0:	b	19fb8 <__assert_fail@plt+0x8a60>
   1a6a4:	ldr	lr, [r3, r1, lsl #3]
   1a6a8:	sub	r0, r8, #4
   1a6ac:	sub	r1, lr, #4
   1a6b0:	add	lr, lr, #28
   1a6b4:	ldr	r3, [r0, #4]!
   1a6b8:	ldr	ip, [r1, #4]!
   1a6bc:	orr	r3, r3, ip
   1a6c0:	cmp	r1, lr
   1a6c4:	str	r3, [r0]
   1a6c8:	bne	1a6b4 <__assert_fail@plt+0x915c>
   1a6cc:	b	1a244 <__assert_fail@plt+0x8cec>
   1a6d0:	ldr	r3, [sp, #36]	; 0x24
   1a6d4:	sub	r0, r8, #4
   1a6d8:	mov	r1, #0
   1a6dc:	add	r2, r3, #96	; 0x60
   1a6e0:	add	lr, r3, #128	; 0x80
   1a6e4:	ldr	ip, [r2], #4
   1a6e8:	ldr	r3, [r0, #4]!
   1a6ec:	cmp	lr, r2
   1a6f0:	bic	r3, r3, ip
   1a6f4:	orr	r1, r1, r3
   1a6f8:	str	r3, [r0]
   1a6fc:	bne	1a6e4 <__assert_fail@plt+0x918c>
   1a700:	cmp	r1, #0
   1a704:	beq	19fb8 <__assert_fail@plt+0x8a60>
   1a708:	b	1a328 <__assert_fail@plt+0x8dd0>
   1a70c:	ldr	r3, [sp, #12]
   1a710:	ldrb	r3, [r3, #6]
   1a714:	tst	r3, #64	; 0x40
   1a718:	beq	1a2d4 <__assert_fail@plt+0x8d7c>
   1a71c:	b	1a59c <__assert_fail@plt+0x9044>
   1a720:	str	r6, [sp, #20]
   1a724:	b	1a5c4 <__assert_fail@plt+0x906c>
   1a728:	ldr	r3, [sp, #12]
   1a72c:	ldrb	r3, [r3, #6]
   1a730:	tst	r3, #64	; 0x40
   1a734:	bne	1a26c <__assert_fail@plt+0x8d14>
   1a738:	b	1a59c <__assert_fail@plt+0x9044>
   1a73c:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   1a740:	cmp	r3, #0
   1a744:	beq	1a7a8 <__assert_fail@plt+0x9250>
   1a748:	ldr	r0, [r5, #-2084]	; 0xfffff7dc
   1a74c:	ldr	r4, [sp, #40]	; 0x28
   1a750:	bl	13b9c <__assert_fail@plt+0x2644>
   1a754:	ldr	r3, [sp, #20]
   1a758:	add	r5, r3, r3, lsl #1
   1a75c:	add	r5, r4, r5, lsl #2
   1a760:	add	r4, r4, #12
   1a764:	ldr	r0, [r4, #-4]
   1a768:	bl	13b9c <__assert_fail@plt+0x2644>
   1a76c:	cmp	r5, r4
   1a770:	bne	1a760 <__assert_fail@plt+0x9208>
   1a774:	b	1a5e8 <__assert_fail@plt+0x9090>
   1a778:	mov	r3, #1
   1a77c:	add	r2, sp, #60	; 0x3c
   1a780:	ldr	r0, [sp, #12]
   1a784:	mov	r1, r9
   1a788:	bl	18bd0 <__assert_fail@plt+0x7678>
   1a78c:	add	r3, sp, #1120	; 0x460
   1a790:	cmp	r0, #0
   1a794:	add	r3, r3, #8
   1a798:	str	r0, [r3, sl, lsl #2]
   1a79c:	beq	1a73c <__assert_fail@plt+0x91e4>
   1a7a0:	cmp	r7, r0
   1a7a4:	beq	1a7b4 <__assert_fail@plt+0x925c>
   1a7a8:	ldr	r3, [r9, #92]	; 0x5c
   1a7ac:	cmp	r3, #2
   1a7b0:	movge	fp, #1
   1a7b4:	mov	r3, #2
   1a7b8:	add	r2, sp, #60	; 0x3c
   1a7bc:	ldr	r0, [sp, #12]
   1a7c0:	mov	r1, r9
   1a7c4:	bl	18bd0 <__assert_fail@plt+0x7678>
   1a7c8:	cmp	r0, #0
   1a7cc:	str	r0, [r5, sl, lsl #2]
   1a7d0:	bne	1a100 <__assert_fail@plt+0x8ba8>
   1a7d4:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   1a7d8:	cmp	r3, #0
   1a7dc:	beq	1a100 <__assert_fail@plt+0x8ba8>
   1a7e0:	b	1a748 <__assert_fail@plt+0x91f0>
   1a7e4:	ldr	r0, [sp, #16]
   1a7e8:	add	r1, sp, #3168	; 0xc60
   1a7ec:	add	r1, r1, #8
   1a7f0:	ldr	r2, [sp, #20]
   1a7f4:	str	r1, [sp, #40]	; 0x28
   1a7f8:	ldrd	sl, [r8]
   1a7fc:	ldr	ip, [r0, #12]
   1a800:	lsl	r3, r2, #1
   1a804:	ldr	lr, [sp, #32]
   1a808:	add	r0, r3, r2
   1a80c:	add	r5, r1, r0, lsl #2
   1a810:	str	r3, [sp, #12]
   1a814:	mov	r3, r1
   1a818:	add	r1, sp, #14400	; 0x3840
   1a81c:	add	r1, r1, #40	; 0x28
   1a820:	add	r2, r1, r2, lsl #5
   1a824:	mov	r1, #1
   1a828:	ldr	r4, [ip, lr]
   1a82c:	sub	r2, r2, #8192	; 0x2000
   1a830:	str	r1, [r3, r0, lsl #2]
   1a834:	mov	r0, #4
   1a838:	str	r1, [r5, #4]
   1a83c:	strd	sl, [r2]
   1a840:	ldrd	sl, [r8, #16]
   1a844:	strd	sl, [sp]
   1a848:	ldrd	sl, [r8, #8]
   1a84c:	strd	sl, [r2, #8]
   1a850:	ldrd	sl, [sp]
   1a854:	strd	sl, [r2, #16]
   1a858:	ldrd	sl, [r8, #24]
   1a85c:	strd	sl, [r2, #24]
   1a860:	bl	26190 <__assert_fail@plt+0x14c38>
   1a864:	cmp	r0, #0
   1a868:	str	r0, [r5, #8]
   1a86c:	ldr	r3, [sp, #12]
   1a870:	beq	1a890 <__assert_fail@plt+0x9338>
   1a874:	str	r4, [r0]
   1a878:	ldr	r3, [sp, #16]
   1a87c:	ldr	sl, [r3, #8]
   1a880:	ldr	r3, [sp, #20]
   1a884:	add	r3, r3, #1
   1a888:	str	r3, [sp, #20]
   1a88c:	b	1a59c <__assert_fail@plt+0x9044>
   1a890:	ldr	r2, [sp, #20]
   1a894:	str	r0, [r5]
   1a898:	str	r0, [r5, #4]
   1a89c:	cmp	r2, #0
   1a8a0:	beq	1a5e8 <__assert_fail@plt+0x9090>
   1a8a4:	b	1a5c4 <__assert_fail@plt+0x906c>
   1a8a8:	add	r2, sp, #3168	; 0xc60
   1a8ac:	mov	r3, #12
   1a8b0:	add	r2, r2, #8
   1a8b4:	str	r3, [r5, #-2096]	; 0xfffff7d0
   1a8b8:	str	r2, [sp, #40]	; 0x28
   1a8bc:	b	1a74c <__assert_fail@plt+0x91f4>
   1a8c0:	ldr	r3, [r5, #-2096]	; 0xfffff7d0
   1a8c4:	cmp	r3, #0
   1a8c8:	beq	1a0e4 <__assert_fail@plt+0x8b8c>
   1a8cc:	b	1a748 <__assert_fail@plt+0x91f0>
   1a8d0:	ldr	r2, [r8]
   1a8d4:	ands	r2, r1, r2
   1a8d8:	bne	1a930 <__assert_fail@plt+0x93d8>
   1a8dc:	add	r2, r2, #1
   1a8e0:	ldr	r9, [r8, r2, lsl #5]
   1a8e4:	tst	r1, r9
   1a8e8:	beq	1a8dc <__assert_fail@plt+0x9384>
   1a8ec:	ldr	r9, [r4]
   1a8f0:	add	r2, r5, r2, lsl #2
   1a8f4:	tst	r1, r9
   1a8f8:	ldrne	r2, [r2, #-1024]	; 0xfffffc00
   1a8fc:	ldreq	r2, [r2, #-2048]	; 0xfffff800
   1a900:	str	r2, [r0]
   1a904:	b	1a190 <__assert_fail@plt+0x8c38>
   1a908:	bne	1a5e8 <__assert_fail@plt+0x9090>
   1a90c:	mov	r1, #256	; 0x100
   1a910:	mov	r0, #4
   1a914:	bl	2611c <__assert_fail@plt+0x14bc4>
   1a918:	ldr	r2, [sp, #16]
   1a91c:	mov	r3, r0
   1a920:	adds	r0, r0, #0
   1a924:	movne	r0, #1
   1a928:	str	r3, [r2, #44]	; 0x2c
   1a92c:	b	1a5ec <__assert_fail@plt+0x9094>
   1a930:	mov	r2, #0
   1a934:	b	1a8ec <__assert_fail@plt+0x9394>
   1a938:	ldr	r3, [r5, r0, lsl #2]
   1a93c:	cmp	fp, #0
   1a940:	strne	r3, [r6, #1064]	; 0x428
   1a944:	str	r3, [r6, #40]	; 0x28
   1a948:	b	1a1f4 <__assert_fail@plt+0x8c9c>
   1a94c:	mov	r1, #512	; 0x200
   1a950:	mov	r0, #4
   1a954:	bl	2611c <__assert_fail@plt+0x14bc4>
   1a958:	ldr	r3, [sp, #16]
   1a95c:	cmp	r0, #0
   1a960:	mov	r6, r0
   1a964:	str	r0, [r3, #48]	; 0x30
   1a968:	beq	1a748 <__assert_fail@plt+0x91f0>
   1a96c:	ldr	ip, [sp, #24]
   1a970:	mov	lr, r0
   1a974:	add	r4, r0, #1024	; 0x400
   1a978:	ldr	r3, [r7, #4]!
   1a97c:	cmp	r3, #0
   1a980:	movne	r0, lr
   1a984:	movne	r1, #1
   1a988:	beq	1a9a4 <__assert_fail@plt+0x944c>
   1a98c:	tst	r3, #1
   1a990:	bne	1a9b8 <__assert_fail@plt+0x9460>
   1a994:	lsrs	r3, r3, #1
   1a998:	add	r0, r0, #4
   1a99c:	lsl	r1, r1, #1
   1a9a0:	bne	1a98c <__assert_fail@plt+0x9434>
   1a9a4:	add	lr, lr, #128	; 0x80
   1a9a8:	add	ip, ip, #4
   1a9ac:	cmp	r4, lr
   1a9b0:	bne	1a978 <__assert_fail@plt+0x9420>
   1a9b4:	b	1a1b4 <__assert_fail@plt+0x8c5c>
   1a9b8:	ldr	r2, [ip]
   1a9bc:	ands	r2, r1, r2
   1a9c0:	bne	1a9ec <__assert_fail@plt+0x9494>
   1a9c4:	add	r2, r2, #1
   1a9c8:	ldr	r8, [ip, r2, lsl #5]
   1a9cc:	tst	r1, r8
   1a9d0:	beq	1a9c4 <__assert_fail@plt+0x946c>
   1a9d4:	add	r2, r5, r2, lsl #2
   1a9d8:	ldr	r8, [r2, #-2048]	; 0xfffff800
   1a9dc:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   1a9e0:	str	r8, [r0]
   1a9e4:	str	r2, [r0, #1024]	; 0x400
   1a9e8:	b	1a994 <__assert_fail@plt+0x943c>
   1a9ec:	mov	r2, #0
   1a9f0:	b	1a9d4 <__assert_fail@plt+0x947c>
   1a9f4:	cmp	r1, #0
   1a9f8:	strd	r4, [sp, #-16]!
   1a9fc:	mov	r5, r0
   1aa00:	str	r6, [sp, #8]
   1aa04:	str	lr, [sp, #12]
   1aa08:	blt	1aabc <__assert_fail@plt+0x9564>
   1aa0c:	ldr	r3, [r0, #48]	; 0x30
   1aa10:	cmp	r3, r1
   1aa14:	beq	1aad0 <__assert_fail@plt+0x9578>
   1aa18:	ldr	r3, [r0, #80]	; 0x50
   1aa1c:	cmp	r3, #1
   1aa20:	ble	1aa70 <__assert_fail@plt+0x9518>
   1aa24:	ldr	r3, [r0, #8]
   1aa28:	add	r3, r3, r1, lsl #2
   1aa2c:	b	1aa38 <__assert_fail@plt+0x94e0>
   1aa30:	cmn	r1, #1
   1aa34:	beq	1aabc <__assert_fail@plt+0x9564>
   1aa38:	ldr	r4, [r3], #-4
   1aa3c:	sub	r1, r1, #1
   1aa40:	cmn	r4, #1
   1aa44:	beq	1aa30 <__assert_fail@plt+0x94d8>
   1aa48:	ldrb	r3, [r5, #78]	; 0x4e
   1aa4c:	cmp	r3, #0
   1aa50:	bne	1aae0 <__assert_fail@plt+0x9588>
   1aa54:	cmp	r4, #10
   1aa58:	movne	r0, #0
   1aa5c:	beq	1aa9c <__assert_fail@plt+0x9544>
   1aa60:	ldrd	r4, [sp]
   1aa64:	ldr	r6, [sp, #8]
   1aa68:	add	sp, sp, #12
   1aa6c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa70:	ldr	r3, [r0, #4]
   1aa74:	ldr	r0, [r0, #68]	; 0x44
   1aa78:	ldrb	r3, [r3, r1]
   1aa7c:	asr	r1, r3, #5
   1aa80:	and	r2, r3, #31
   1aa84:	ldr	r0, [r0, r1, lsl #2]
   1aa88:	lsr	r0, r0, r2
   1aa8c:	ands	r0, r0, #1
   1aa90:	bne	1aa60 <__assert_fail@plt+0x9508>
   1aa94:	cmp	r3, #10
   1aa98:	bne	1aa60 <__assert_fail@plt+0x9508>
   1aa9c:	ldrb	r3, [r5, #77]	; 0x4d
   1aaa0:	ldrd	r4, [sp]
   1aaa4:	ldr	r6, [sp, #8]
   1aaa8:	add	sp, sp, #12
   1aaac:	cmp	r3, #0
   1aab0:	moveq	r0, #0
   1aab4:	movne	r0, #2
   1aab8:	pop	{pc}		; (ldr pc, [sp], #4)
   1aabc:	ldr	r6, [sp, #8]
   1aac0:	ldr	r0, [r5, #60]	; 0x3c
   1aac4:	ldrd	r4, [sp]
   1aac8:	add	sp, sp, #12
   1aacc:	pop	{pc}		; (ldr pc, [sp], #4)
   1aad0:	tst	r2, #2
   1aad4:	movne	r0, #8
   1aad8:	moveq	r0, #10
   1aadc:	b	1aa60 <__assert_fail@plt+0x9508>
   1aae0:	mov	r0, r4
   1aae4:	bl	11438 <iswalnum@plt>
   1aae8:	sub	r3, r4, #95	; 0x5f
   1aaec:	cmp	r0, #0
   1aaf0:	clz	r3, r3
   1aaf4:	lsr	r3, r3, #5
   1aaf8:	movne	r3, #1
   1aafc:	cmp	r3, #0
   1ab00:	movne	r0, #1
   1ab04:	bne	1aa60 <__assert_fail@plt+0x9508>
   1ab08:	b	1aa54 <__assert_fail@plt+0x94fc>
   1ab0c:	ldrb	ip, [r1, #4]
   1ab10:	str	r4, [sp, #-8]!
   1ab14:	ldr	r3, [r0, #4]
   1ab18:	str	lr, [sp, #4]
   1ab1c:	sub	ip, ip, #1
   1ab20:	ldrb	r3, [r3, r2]
   1ab24:	cmp	ip, #6
   1ab28:	ldrls	pc, [pc, ip, lsl #2]
   1ab2c:	b	1ab58 <__assert_fail@plt+0x9600>
   1ab30:	andeq	sl, r1, ip, asr #22
   1ab34:	andeq	sl, r1, r8, asr fp
   1ab38:	strdeq	sl, [r1], -ip
   1ab3c:	andeq	sl, r1, r8, asr fp
   1ab40:	andeq	sl, r1, r0, ror fp
   1ab44:	andeq	sl, r1, r8, asr fp
   1ab48:	andeq	sl, r1, r8, ror #22
   1ab4c:	ldrb	ip, [r1]
   1ab50:	cmp	ip, r3
   1ab54:	beq	1ab90 <__assert_fail@plt+0x9638>
   1ab58:	mov	r0, #0
   1ab5c:	ldr	r4, [sp]
   1ab60:	add	sp, sp, #4
   1ab64:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab68:	tst	r3, #128	; 0x80
   1ab6c:	bne	1ab58 <__assert_fail@plt+0x9600>
   1ab70:	cmp	r3, #10
   1ab74:	beq	1ac30 <__assert_fail@plt+0x96d8>
   1ab78:	cmp	r3, #0
   1ab7c:	bne	1ab90 <__assert_fail@plt+0x9638>
   1ab80:	ldr	ip, [r0, #84]	; 0x54
   1ab84:	ldr	ip, [ip, #128]	; 0x80
   1ab88:	tst	ip, #128	; 0x80
   1ab8c:	bne	1ab58 <__assert_fail@plt+0x9600>
   1ab90:	ldr	r4, [r1, #4]
   1ab94:	mov	r3, #65280	; 0xff00
   1ab98:	movt	r3, #3
   1ab9c:	and	r3, r3, r4
   1aba0:	cmp	r3, #0
   1aba4:	beq	1abec <__assert_fail@plt+0x9694>
   1aba8:	mov	r1, r2
   1abac:	ldr	r2, [r0, #88]	; 0x58
   1abb0:	bl	1a9f4 <__assert_fail@plt+0x949c>
   1abb4:	ubfx	r1, r4, #8, #10
   1abb8:	ands	r2, r1, #4
   1abbc:	bne	1ac1c <__assert_fail@plt+0x96c4>
   1abc0:	tst	r1, #8
   1abc4:	beq	1abd0 <__assert_fail@plt+0x9678>
   1abc8:	tst	r0, #1
   1abcc:	bne	1ab58 <__assert_fail@plt+0x9600>
   1abd0:	tst	r1, #32
   1abd4:	beq	1abe0 <__assert_fail@plt+0x9688>
   1abd8:	ands	r3, r0, #2
   1abdc:	beq	1ab58 <__assert_fail@plt+0x9600>
   1abe0:	tst	r1, #128	; 0x80
   1abe4:	ubfxne	r0, r0, #3, #1
   1abe8:	bne	1ab5c <__assert_fail@plt+0x9604>
   1abec:	ldr	r4, [sp]
   1abf0:	add	sp, sp, #4
   1abf4:	mov	r0, #1
   1abf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1abfc:	ldr	ip, [r1]
   1ac00:	asr	lr, r3, #5
   1ac04:	and	r3, r3, #31
   1ac08:	ldr	ip, [ip, lr, lsl #2]
   1ac0c:	lsr	r3, ip, r3
   1ac10:	ands	r3, r3, #1
   1ac14:	bne	1ab90 <__assert_fail@plt+0x9638>
   1ac18:	b	1ab58 <__assert_fail@plt+0x9600>
   1ac1c:	ands	r3, r0, #1
   1ac20:	beq	1ab58 <__assert_fail@plt+0x9600>
   1ac24:	tst	r1, #8
   1ac28:	beq	1abd0 <__assert_fail@plt+0x9678>
   1ac2c:	b	1ab58 <__assert_fail@plt+0x9600>
   1ac30:	ldr	r3, [r0, #84]	; 0x54
   1ac34:	ldr	r3, [r3, #128]	; 0x80
   1ac38:	ands	r3, r3, #64	; 0x40
   1ac3c:	bne	1ab90 <__assert_fail@plt+0x9638>
   1ac40:	b	1ab58 <__assert_fail@plt+0x9600>
   1ac44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ac48:	mov	r4, r0
   1ac4c:	ldr	r5, [r0, #24]
   1ac50:	strd	r6, [sp, #8]
   1ac54:	mov	r7, r1
   1ac58:	strd	r8, [sp, #16]
   1ac5c:	mov	r8, r2
   1ac60:	strd	sl, [sp, #24]
   1ac64:	str	lr, [sp, #32]
   1ac68:	sub	sp, sp, #44	; 0x2c
   1ac6c:	cmp	r5, r1
   1ac70:	suble	r5, r1, r5
   1ac74:	ble	1acd8 <__assert_fail@plt+0x9780>
   1ac78:	ldr	r3, [r0, #80]	; 0x50
   1ac7c:	cmp	r3, #1
   1ac80:	ble	1ac90 <__assert_fail@plt+0x9738>
   1ac84:	mov	r2, #0
   1ac88:	mov	r3, #0
   1ac8c:	strd	r2, [r0, #16]
   1ac90:	ldrb	r3, [r4, #75]	; 0x4b
   1ac94:	mov	r2, #0
   1ac98:	tst	r8, #1
   1ac9c:	movne	r0, #4
   1aca0:	moveq	r0, #6
   1aca4:	ldr	ip, [r4, #44]	; 0x2c
   1aca8:	mov	r5, r7
   1acac:	str	r2, [r4, #24]
   1acb0:	ldr	r1, [r4, #52]	; 0x34
   1acb4:	cmp	r3, r2
   1acb8:	str	r2, [r4, #28]
   1acbc:	ldreq	r3, [r4]
   1acc0:	str	r2, [r4, #32]
   1acc4:	str	ip, [r4, #48]	; 0x30
   1acc8:	str	r1, [r4, #56]	; 0x38
   1accc:	str	r0, [r4, #60]	; 0x3c
   1acd0:	streq	r3, [r4, #4]
   1acd4:	strb	r2, [r4, #76]	; 0x4c
   1acd8:	cmp	r5, #0
   1acdc:	beq	1ae58 <__assert_fail@plt+0x9900>
   1ace0:	ldrb	r2, [r4, #76]	; 0x4c
   1ace4:	ldr	r3, [r4, #32]
   1ace8:	ldr	r6, [r4, #28]
   1acec:	cmp	r3, r5
   1acf0:	ble	1ae68 <__assert_fail@plt+0x9910>
   1acf4:	cmp	r2, #0
   1acf8:	bne	1afd4 <__assert_fail@plt+0x9a7c>
   1acfc:	mov	r2, r8
   1ad00:	sub	r1, r5, #1
   1ad04:	mov	r0, r4
   1ad08:	bl	1a9f4 <__assert_fail@plt+0x949c>
   1ad0c:	ldr	r3, [r4, #80]	; 0x50
   1ad10:	sub	r2, r6, r5
   1ad14:	str	r0, [r4, #60]	; 0x3c
   1ad18:	cmp	r3, #1
   1ad1c:	bgt	1adb4 <__assert_fail@plt+0x985c>
   1ad20:	ldrb	r3, [r4, #75]	; 0x4b
   1ad24:	cmp	r3, #0
   1ad28:	bne	1b014 <__assert_fail@plt+0x9abc>
   1ad2c:	ldr	ip, [r4, #32]
   1ad30:	str	r2, [r4, #28]
   1ad34:	ldr	r1, [r4, #48]	; 0x30
   1ad38:	ldr	r0, [r4, #56]	; 0x38
   1ad3c:	sub	ip, ip, r5
   1ad40:	ldr	r2, [r4, #80]	; 0x50
   1ad44:	sub	r1, r1, r5
   1ad48:	str	ip, [r4, #32]
   1ad4c:	sub	r0, r0, r5
   1ad50:	cmp	r3, #0
   1ad54:	bne	1ad64 <__assert_fail@plt+0x980c>
   1ad58:	ldr	r3, [r4, #4]
   1ad5c:	add	r5, r3, r5
   1ad60:	str	r5, [r4, #4]
   1ad64:	cmp	r2, #1
   1ad68:	str	r7, [r4, #24]
   1ad6c:	str	r1, [r4, #48]	; 0x30
   1ad70:	str	r0, [r4, #56]	; 0x38
   1ad74:	ble	1ade0 <__assert_fail@plt+0x9888>
   1ad78:	ldrb	r3, [r4, #72]	; 0x48
   1ad7c:	mov	r0, r4
   1ad80:	cmp	r3, #0
   1ad84:	bne	1add0 <__assert_fail@plt+0x9878>
   1ad88:	bl	16860 <__assert_fail@plt+0x5308>
   1ad8c:	mov	r3, #0
   1ad90:	mov	r0, r3
   1ad94:	str	r3, [r4, #40]	; 0x28
   1ad98:	add	sp, sp, #44	; 0x2c
   1ad9c:	ldrd	r4, [sp]
   1ada0:	ldrd	r6, [sp, #8]
   1ada4:	ldrd	r8, [sp, #16]
   1ada8:	ldrd	sl, [sp, #24]
   1adac:	add	sp, sp, #32
   1adb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1adb4:	ldr	r0, [r4, #8]
   1adb8:	lsl	r2, r2, #2
   1adbc:	add	r1, r0, r5, lsl #2
   1adc0:	bl	11234 <memmove@plt>
   1adc4:	ldr	r2, [r4, #28]
   1adc8:	sub	r2, r2, r5
   1adcc:	b	1ad20 <__assert_fail@plt+0x97c8>
   1add0:	bl	16a00 <__assert_fail@plt+0x54a8>
   1add4:	cmp	r0, #0
   1add8:	beq	1ad8c <__assert_fail@plt+0x9834>
   1addc:	b	1ad98 <__assert_fail@plt+0x9840>
   1ade0:	ldrb	r3, [r4, #75]	; 0x4b
   1ade4:	cmp	r3, #0
   1ade8:	streq	r1, [r4, #28]
   1adec:	beq	1ad8c <__assert_fail@plt+0x9834>
   1adf0:	ldrb	r3, [r4, #72]	; 0x48
   1adf4:	cmp	r3, #0
   1adf8:	bne	1b2d4 <__assert_fail@plt+0x9d7c>
   1adfc:	ldr	r0, [r4, #64]	; 0x40
   1ae00:	cmp	r0, #0
   1ae04:	beq	1ad8c <__assert_fail@plt+0x9834>
   1ae08:	ldr	r3, [r4, #28]
   1ae0c:	ldr	r2, [r4, #36]	; 0x24
   1ae10:	cmp	r1, r2
   1ae14:	movge	r1, r2
   1ae18:	cmp	r1, r3
   1ae1c:	bgt	1ae2c <__assert_fail@plt+0x98d4>
   1ae20:	b	1b434 <__assert_fail@plt+0x9edc>
   1ae24:	ldr	r7, [r4, #24]
   1ae28:	ldr	r0, [r4, #64]	; 0x40
   1ae2c:	ldm	r4, {r2, ip}
   1ae30:	add	r2, r2, r3
   1ae34:	ldrb	r2, [r2, r7]
   1ae38:	ldrb	r2, [r0, r2]
   1ae3c:	strb	r2, [ip, r3]
   1ae40:	add	r3, r3, #1
   1ae44:	cmp	r1, r3
   1ae48:	bne	1ae24 <__assert_fail@plt+0x98cc>
   1ae4c:	str	r1, [r4, #28]
   1ae50:	str	r1, [r4, #32]
   1ae54:	b	1ad8c <__assert_fail@plt+0x9834>
   1ae58:	ldr	r1, [r4, #48]	; 0x30
   1ae5c:	ldr	r0, [r4, #56]	; 0x38
   1ae60:	ldr	r2, [r4, #80]	; 0x50
   1ae64:	b	1ad64 <__assert_fail@plt+0x980c>
   1ae68:	cmp	r2, #0
   1ae6c:	bne	1b370 <__assert_fail@plt+0x9e18>
   1ae70:	mov	r1, #0
   1ae74:	ldr	r9, [r4, #24]
   1ae78:	ldr	r2, [r4, #80]	; 0x50
   1ae7c:	str	r1, [r4, #28]
   1ae80:	cmp	r2, #1
   1ae84:	ble	1b194 <__assert_fail@plt+0x9c3c>
   1ae88:	ldrb	r1, [r4, #73]	; 0x49
   1ae8c:	cmp	r1, #0
   1ae90:	beq	1af04 <__assert_fail@plt+0x99ac>
   1ae94:	ldr	r0, [r4]
   1ae98:	sub	r2, r5, r2
   1ae9c:	sub	r1, r5, #1
   1aea0:	add	ip, r0, r9
   1aea4:	add	r2, ip, r2
   1aea8:	add	lr, ip, r1
   1aeac:	cmp	r0, r2
   1aeb0:	movcc	r0, r2
   1aeb4:	str	lr, [sp, #4]
   1aeb8:	cmp	lr, r0
   1aebc:	str	ip, [sp, #8]
   1aec0:	bcc	1af04 <__assert_fail@plt+0x99ac>
   1aec4:	ldrb	r2, [ip, r1]
   1aec8:	and	r2, r2, #192	; 0xc0
   1aecc:	cmp	r2, #128	; 0x80
   1aed0:	bne	1b2e4 <__assert_fail@plt+0x9d8c>
   1aed4:	ldmib	sp, {r2, fp}
   1aed8:	sub	r0, r0, #1
   1aedc:	sub	r2, r2, #1
   1aee0:	b	1aef8 <__assert_fail@plt+0x99a0>
   1aee4:	ldrb	r1, [sl]
   1aee8:	sub	r2, r2, #1
   1aeec:	and	r1, r1, #192	; 0xc0
   1aef0:	cmp	r1, #128	; 0x80
   1aef4:	bne	1b2e0 <__assert_fail@plt+0x9d88>
   1aef8:	cmp	r0, r2
   1aefc:	mov	sl, r2
   1af00:	bne	1aee4 <__assert_fail@plt+0x998c>
   1af04:	add	r9, r9, r3
   1af08:	cmp	r7, r9
   1af0c:	ble	1b214 <__assert_fail@plt+0x9cbc>
   1af10:	add	fp, r4, #16
   1af14:	add	sl, sp, #24
   1af18:	stmib	sp, {r4, r6}
   1af1c:	str	r5, [sp, #12]
   1af20:	ldr	r2, [sp, #4]
   1af24:	mov	r3, fp
   1af28:	mov	r0, sl
   1af2c:	ldrd	r4, [fp]
   1af30:	ldr	r1, [r2]
   1af34:	ldr	r6, [r2, #44]	; 0x2c
   1af38:	strd	r4, [sp, #32]
   1af3c:	add	r1, r1, r9
   1af40:	sub	r6, r6, r9
   1af44:	mov	r2, r6
   1af48:	bl	265ac <__assert_fail@plt+0x15054>
   1af4c:	sub	r3, r0, #1
   1af50:	cmn	r3, #4
   1af54:	ldrls	r1, [sp, #24]
   1af58:	bhi	1b39c <__assert_fail@plt+0x9e44>
   1af5c:	add	r9, r9, r0
   1af60:	cmp	r7, r9
   1af64:	bgt	1af20 <__assert_fail@plt+0x99c8>
   1af68:	ldmib	sp, {r4, r6}
   1af6c:	sub	r9, r9, r7
   1af70:	cmn	r1, #1
   1af74:	ldr	r5, [sp, #12]
   1af78:	str	r9, [r4, #28]
   1af7c:	beq	1b21c <__assert_fail@plt+0x9cc4>
   1af80:	ldrb	r3, [r4, #78]	; 0x4e
   1af84:	cmp	r3, #0
   1af88:	bne	1b404 <__assert_fail@plt+0x9eac>
   1af8c:	cmp	r1, #10
   1af90:	movne	r3, #0
   1af94:	bne	1afa8 <__assert_fail@plt+0x9a50>
   1af98:	ldrb	r3, [r4, #77]	; 0x4d
   1af9c:	cmp	r3, #0
   1afa0:	moveq	r3, #0
   1afa4:	movne	r3, #2
   1afa8:	str	r3, [r4, #60]	; 0x3c
   1afac:	cmp	r9, #0
   1afb0:	bne	1b3c8 <__assert_fail@plt+0x9e70>
   1afb4:	ldrb	r3, [r4, #75]	; 0x4b
   1afb8:	str	r9, [r4, #32]
   1afbc:	ldr	r1, [r4, #48]	; 0x30
   1afc0:	ldr	r0, [r4, #56]	; 0x38
   1afc4:	ldr	r2, [r4, #80]	; 0x50
   1afc8:	sub	r1, r1, r5
   1afcc:	sub	r0, r0, r5
   1afd0:	b	1ad50 <__assert_fail@plt+0x97f8>
   1afd4:	mov	r3, r6
   1afd8:	mov	r2, #0
   1afdc:	ldr	r9, [r4, #12]
   1afe0:	b	1aff4 <__assert_fail@plt+0x9a9c>
   1afe4:	bge	1b188 <__assert_fail@plt+0x9c30>
   1afe8:	add	r2, r1, #1
   1afec:	cmp	r2, r3
   1aff0:	bge	1b030 <__assert_fail@plt+0x9ad8>
   1aff4:	add	r1, r2, r3
   1aff8:	add	r1, r1, r1, lsr #31
   1affc:	asr	r1, r1, #1
   1b000:	ldr	r0, [r9, r1, lsl #2]
   1b004:	cmp	r0, r5
   1b008:	ble	1afe4 <__assert_fail@plt+0x9a8c>
   1b00c:	mov	r3, r1
   1b010:	b	1afec <__assert_fail@plt+0x9a94>
   1b014:	ldr	r0, [r4, #4]
   1b018:	add	r1, r0, r5
   1b01c:	bl	11234 <memmove@plt>
   1b020:	ldr	r2, [r4, #28]
   1b024:	ldrb	r3, [r4, #75]	; 0x4b
   1b028:	sub	r2, r2, r5
   1b02c:	b	1ad2c <__assert_fail@plt+0x97d4>
   1b030:	cmp	r0, r5
   1b034:	addlt	sl, r1, #1
   1b038:	bge	1b188 <__assert_fail@plt+0x9c30>
   1b03c:	mov	r2, r8
   1b040:	mov	r0, r4
   1b044:	bl	1a9f4 <__assert_fail@plt+0x949c>
   1b048:	sub	r3, r5, sl
   1b04c:	cmp	r6, r5
   1b050:	str	r0, [r4, #60]	; 0x3c
   1b054:	clz	r3, r3
   1b058:	lsr	r3, r3, #5
   1b05c:	movle	r3, #0
   1b060:	cmp	r3, #0
   1b064:	bne	1b234 <__assert_fail@plt+0x9cdc>
   1b068:	ldr	r1, [r4, #44]	; 0x2c
   1b06c:	mov	r3, #0
   1b070:	cmp	sl, #0
   1b074:	ldr	r0, [r4, #52]	; 0x34
   1b078:	strb	r3, [r4, #76]	; 0x4c
   1b07c:	sub	r1, r1, r7
   1b080:	add	r2, r1, r5
   1b084:	sub	r0, r0, r7
   1b088:	add	r3, r0, r5
   1b08c:	str	r2, [r4, #48]	; 0x30
   1b090:	str	r3, [r4, #56]	; 0x38
   1b094:	ble	1b0c4 <__assert_fail@plt+0x9b6c>
   1b098:	sub	r3, sl, #-1073741823	; 0xc0000001
   1b09c:	ldr	r2, [r9, r3, lsl #2]
   1b0a0:	add	r3, r9, r3, lsl #2
   1b0a4:	cmp	r2, r5
   1b0a8:	beq	1b0bc <__assert_fail@plt+0x9b64>
   1b0ac:	b	1b0c4 <__assert_fail@plt+0x9b6c>
   1b0b0:	ldr	r2, [r3, #-4]!
   1b0b4:	cmp	r2, r5
   1b0b8:	bne	1b0c4 <__assert_fail@plt+0x9b6c>
   1b0bc:	subs	sl, sl, #1
   1b0c0:	bne	1b0b0 <__assert_fail@plt+0x9b58>
   1b0c4:	cmp	r6, sl
   1b0c8:	ble	1b120 <__assert_fail@plt+0x9bc8>
   1b0cc:	ldr	r3, [r4, #8]
   1b0d0:	lsl	ip, sl, #2
   1b0d4:	ldr	r2, [r3, sl, lsl #2]
   1b0d8:	add	r3, r3, ip
   1b0dc:	cmn	r2, #1
   1b0e0:	beq	1b0f4 <__assert_fail@plt+0x9b9c>
   1b0e4:	b	1b128 <__assert_fail@plt+0x9bd0>
   1b0e8:	ldr	r2, [r3, #4]!
   1b0ec:	cmn	r2, #1
   1b0f0:	bne	1b128 <__assert_fail@plt+0x9bd0>
   1b0f4:	add	sl, sl, #1
   1b0f8:	cmp	r6, sl
   1b0fc:	lsl	ip, sl, #2
   1b100:	bne	1b0e8 <__assert_fail@plt+0x9b90>
   1b104:	mov	r3, #0
   1b108:	mov	r2, r3
   1b10c:	str	r3, [r4, #28]
   1b110:	ldrb	r3, [r4, #75]	; 0x4b
   1b114:	str	r2, [r4, #32]
   1b118:	ldr	r2, [r4, #80]	; 0x50
   1b11c:	b	1ad50 <__assert_fail@plt+0x97f8>
   1b120:	beq	1b104 <__assert_fail@plt+0x9bac>
   1b124:	lsl	ip, sl, #2
   1b128:	ldr	r2, [r9, ip]
   1b12c:	sub	r2, r2, r5
   1b130:	cmp	r2, #0
   1b134:	str	r2, [r4, #28]
   1b138:	beq	1b110 <__assert_fail@plt+0x9bb8>
   1b13c:	ble	1b164 <__assert_fail@plt+0x9c0c>
   1b140:	ldr	r1, [r4, #8]
   1b144:	mov	r3, #0
   1b148:	mvn	r0, #0
   1b14c:	sub	r1, r1, #4
   1b150:	str	r0, [r1, #4]!
   1b154:	add	r3, r3, #1
   1b158:	ldr	r2, [r4, #28]
   1b15c:	cmp	r2, r3
   1b160:	bgt	1b150 <__assert_fail@plt+0x9bf8>
   1b164:	mov	r1, #255	; 0xff
   1b168:	ldr	r0, [r4, #4]
   1b16c:	bl	1145c <memset@plt>
   1b170:	ldr	r2, [r4, #28]
   1b174:	ldr	r1, [r4, #48]	; 0x30
   1b178:	ldr	r0, [r4, #56]	; 0x38
   1b17c:	sub	r1, r1, r5
   1b180:	sub	r0, r0, r5
   1b184:	b	1b110 <__assert_fail@plt+0x9bb8>
   1b188:	mov	sl, r1
   1b18c:	sub	r1, r1, #1
   1b190:	b	1b03c <__assert_fail@plt+0x9ae4>
   1b194:	ldr	r3, [r4]
   1b198:	ldr	ip, [r4, #64]	; 0x40
   1b19c:	add	r3, r3, r5
   1b1a0:	add	r9, r3, r9
   1b1a4:	ldrb	r0, [r9, #-1]
   1b1a8:	cmp	ip, #0
   1b1ac:	str	r1, [r4, #32]
   1b1b0:	ldrbne	r0, [ip, r0]
   1b1b4:	ldr	ip, [r4, #68]	; 0x44
   1b1b8:	asr	r1, r0, #5
   1b1bc:	and	r3, r0, #31
   1b1c0:	ldr	r1, [ip, r1, lsl #2]
   1b1c4:	lsr	r3, r1, r3
   1b1c8:	ands	r1, r3, #1
   1b1cc:	bne	1b1e4 <__assert_fail@plt+0x9c8c>
   1b1d0:	cmp	r0, #10
   1b1d4:	bne	1b1e4 <__assert_fail@plt+0x9c8c>
   1b1d8:	ldrb	r3, [r4, #77]	; 0x4d
   1b1dc:	cmp	r3, #0
   1b1e0:	movne	r1, #2
   1b1e4:	ldrb	r3, [r4, #75]	; 0x4b
   1b1e8:	str	r1, [r4, #60]	; 0x3c
   1b1ec:	ldr	r1, [r4, #48]	; 0x30
   1b1f0:	ldr	r0, [r4, #56]	; 0x38
   1b1f4:	cmp	r3, #0
   1b1f8:	sub	r1, r1, r5
   1b1fc:	sub	r0, r0, r5
   1b200:	beq	1ad58 <__assert_fail@plt+0x9800>
   1b204:	str	r7, [r4, #24]
   1b208:	str	r1, [r4, #48]	; 0x30
   1b20c:	str	r0, [r4, #56]	; 0x38
   1b210:	b	1ade4 <__assert_fail@plt+0x988c>
   1b214:	sub	r9, r9, r7
   1b218:	str	r9, [r4, #28]
   1b21c:	mov	r2, r8
   1b220:	sub	r1, r6, #1
   1b224:	mov	r0, r4
   1b228:	bl	1a9f4 <__assert_fail@plt+0x949c>
   1b22c:	str	r0, [r4, #60]	; 0x3c
   1b230:	b	1afac <__assert_fail@plt+0x9a54>
   1b234:	ldr	r3, [r9, sl, lsl #2]
   1b238:	cmp	r3, r5
   1b23c:	bne	1b068 <__assert_fail@plt+0x9b10>
   1b240:	ldr	r0, [r4, #8]
   1b244:	lsl	r8, r5, #2
   1b248:	sub	r2, r6, r5
   1b24c:	lsl	r2, r2, #2
   1b250:	add	r1, r0, r8
   1b254:	bl	11234 <memmove@plt>
   1b258:	ldr	r0, [r4, #4]
   1b25c:	ldr	r2, [r4, #28]
   1b260:	add	r1, r0, r5
   1b264:	sub	r2, r2, r5
   1b268:	bl	11234 <memmove@plt>
   1b26c:	ldr	r3, [r4, #28]
   1b270:	ldr	r2, [r4, #32]
   1b274:	sub	r3, r3, r5
   1b278:	cmp	r3, #0
   1b27c:	sub	r2, r2, r5
   1b280:	str	r3, [r4, #28]
   1b284:	str	r2, [r4, #32]
   1b288:	ble	1b2b8 <__assert_fail@plt+0x9d60>
   1b28c:	ldr	r1, [r4, #12]
   1b290:	mov	r2, #0
   1b294:	add	r0, r1, r8
   1b298:	sub	r1, r1, #4
   1b29c:	ldr	r3, [r0], #4
   1b2a0:	add	r2, r2, #1
   1b2a4:	sub	r3, r3, r5
   1b2a8:	str	r3, [r1, #4]!
   1b2ac:	ldr	r3, [r4, #28]
   1b2b0:	cmp	r3, r2
   1b2b4:	bgt	1b29c <__assert_fail@plt+0x9d44>
   1b2b8:	ldr	r1, [r4, #48]	; 0x30
   1b2bc:	ldr	r0, [r4, #56]	; 0x38
   1b2c0:	ldrb	r3, [r4, #75]	; 0x4b
   1b2c4:	sub	r1, r1, r5
   1b2c8:	ldr	r2, [r4, #80]	; 0x50
   1b2cc:	sub	r0, r0, r5
   1b2d0:	b	1ad50 <__assert_fail@plt+0x97f8>
   1b2d4:	mov	r0, r4
   1b2d8:	bl	16fc0 <__assert_fail@plt+0x5a68>
   1b2dc:	b	1ad8c <__assert_fail@plt+0x9834>
   1b2e0:	strd	sl, [sp, #4]
   1b2e4:	ldr	r1, [sp, #8]
   1b2e8:	ldr	r2, [r4, #48]	; 0x30
   1b2ec:	ldr	r3, [r4, #64]	; 0x40
   1b2f0:	add	r2, r1, r2
   1b2f4:	ldr	r1, [sp, #4]
   1b2f8:	cmp	r3, #0
   1b2fc:	sub	r2, r2, r1
   1b300:	ldreq	r1, [sp, #4]
   1b304:	bne	1b454 <__assert_fail@plt+0x9efc>
   1b308:	mov	sl, #0
   1b30c:	mov	fp, #0
   1b310:	add	r3, sp, #32
   1b314:	add	r0, sp, #20
   1b318:	strd	sl, [sp, #32]
   1b31c:	bl	265ac <__assert_fail@plt+0x15054>
   1b320:	ldr	r3, [sp, #8]
   1b324:	add	r9, r3, r5
   1b328:	ldr	r3, [sp, #4]
   1b32c:	sub	r9, r9, r3
   1b330:	cmp	r0, r9
   1b334:	bcc	1b340 <__assert_fail@plt+0x9de8>
   1b338:	cmn	r0, #3
   1b33c:	bls	1b34c <__assert_fail@plt+0x9df4>
   1b340:	ldr	r9, [r4, #24]
   1b344:	ldr	r3, [r4, #32]
   1b348:	b	1af04 <__assert_fail@plt+0x99ac>
   1b34c:	ldr	r1, [sp, #20]
   1b350:	sub	r9, r0, r9
   1b354:	mov	r2, #0
   1b358:	mov	r3, #0
   1b35c:	strd	r2, [r4, #16]
   1b360:	str	r9, [r4, #28]
   1b364:	cmn	r1, #1
   1b368:	bne	1af80 <__assert_fail@plt+0x9a28>
   1b36c:	b	1b340 <__assert_fail@plt+0x9de8>
   1b370:	ldr	r1, [r4, #44]	; 0x2c
   1b374:	mov	r0, #0
   1b378:	ldr	r2, [r4, #52]	; 0x34
   1b37c:	strb	r0, [r4, #76]	; 0x4c
   1b380:	sub	r1, r1, r7
   1b384:	add	r1, r1, r5
   1b388:	sub	r2, r2, r7
   1b38c:	add	r2, r2, r5
   1b390:	str	r1, [r4, #48]	; 0x30
   1b394:	str	r2, [r4, #56]	; 0x38
   1b398:	b	1ae70 <__assert_fail@plt+0x9918>
   1b39c:	mov	r1, #0
   1b3a0:	cmp	r6, r1
   1b3a4:	cmpne	r0, r1
   1b3a8:	beq	1b3b8 <__assert_fail@plt+0x9e60>
   1b3ac:	ldr	r3, [sp, #4]
   1b3b0:	ldr	r3, [r3]
   1b3b4:	ldrb	r1, [r3, r9]
   1b3b8:	mov	r0, #1
   1b3bc:	ldrd	r2, [sp, #32]
   1b3c0:	strd	r2, [fp]
   1b3c4:	b	1af5c <__assert_fail@plt+0x9a04>
   1b3c8:	ble	1b3f0 <__assert_fail@plt+0x9e98>
   1b3cc:	ldr	r2, [r4, #8]
   1b3d0:	mov	r3, #0
   1b3d4:	mvn	r1, #0
   1b3d8:	sub	r2, r2, #4
   1b3dc:	str	r1, [r2, #4]!
   1b3e0:	add	r3, r3, #1
   1b3e4:	ldr	r9, [r4, #28]
   1b3e8:	cmp	r9, r3
   1b3ec:	bgt	1b3dc <__assert_fail@plt+0x9e84>
   1b3f0:	ldrb	r3, [r4, #75]	; 0x4b
   1b3f4:	cmp	r3, #0
   1b3f8:	bne	1b43c <__assert_fail@plt+0x9ee4>
   1b3fc:	ldr	r9, [r4, #28]
   1b400:	b	1afb8 <__assert_fail@plt+0x9a60>
   1b404:	mov	r0, r1
   1b408:	str	r1, [sp, #4]
   1b40c:	bl	11438 <iswalnum@plt>
   1b410:	ldr	r1, [sp, #4]
   1b414:	subs	r3, r1, #95	; 0x5f
   1b418:	movne	r3, #1
   1b41c:	cmp	r0, #0
   1b420:	movne	r3, #0
   1b424:	cmp	r3, #0
   1b428:	moveq	r3, #1
   1b42c:	beq	1afa8 <__assert_fail@plt+0x9a50>
   1b430:	b	1af8c <__assert_fail@plt+0x9a34>
   1b434:	mov	r1, r3
   1b438:	b	1ae4c <__assert_fail@plt+0x98f4>
   1b43c:	mov	r2, r9
   1b440:	mov	r1, #255	; 0xff
   1b444:	ldr	r0, [r4, #4]
   1b448:	bl	1145c <memset@plt>
   1b44c:	ldrb	r3, [r4, #75]	; 0x4b
   1b450:	b	1b3fc <__assert_fail@plt+0x9ea4>
   1b454:	cmp	r2, #6
   1b458:	movlt	r1, r2
   1b45c:	movge	r1, #6
   1b460:	cmp	r2, #0
   1b464:	ble	1b4a4 <__assert_fail@plt+0x9f4c>
   1b468:	ldrd	sl, [sp, #4]
   1b46c:	add	r0, sp, #24
   1b470:	mov	ip, r0
   1b474:	mov	lr, r0
   1b478:	sub	r0, r1, #1
   1b47c:	add	r0, ip, r0
   1b480:	add	r1, sl, r1
   1b484:	ldrb	ip, [r1, #-1]!
   1b488:	ldrb	ip, [r3, ip]
   1b48c:	cmp	sl, r1
   1b490:	strb	ip, [r0], #-1
   1b494:	bne	1b484 <__assert_fail@plt+0x9f2c>
   1b498:	strd	sl, [sp, #4]
   1b49c:	mov	r1, lr
   1b4a0:	b	1b308 <__assert_fail@plt+0x9db0>
   1b4a4:	add	r3, sp, #24
   1b4a8:	mov	lr, r3
   1b4ac:	b	1b49c <__assert_fail@plt+0x9f44>
   1b4b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b4b4:	mov	r4, r1
   1b4b8:	mov	r1, r2
   1b4bc:	ldr	r2, [r0, #88]	; 0x58
   1b4c0:	mov	r5, r0
   1b4c4:	strd	r6, [sp, #8]
   1b4c8:	str	r8, [sp, #16]
   1b4cc:	str	lr, [sp, #20]
   1b4d0:	bl	1a9f4 <__assert_fail@plt+0x949c>
   1b4d4:	ldr	lr, [r4, #8]
   1b4d8:	cmp	lr, #0
   1b4dc:	ble	1b58c <__assert_fail@plt+0xa034>
   1b4e0:	ldr	r3, [r5, #84]	; 0x54
   1b4e4:	mov	r2, #0
   1b4e8:	and	r7, r0, #8
   1b4ec:	and	r6, r0, #2
   1b4f0:	and	r5, r0, #1
   1b4f4:	ldr	r1, [r4, #12]
   1b4f8:	ldr	r4, [r3]
   1b4fc:	sub	r1, r1, #4
   1b500:	ldr	r0, [r1, #4]!
   1b504:	add	r3, r4, r0, lsl #3
   1b508:	ldrb	ip, [r3, #4]
   1b50c:	ldr	r3, [r3, #4]
   1b510:	cmp	ip, #2
   1b514:	ubfx	r3, r3, #8, #10
   1b518:	bne	1b580 <__assert_fail@plt+0xa028>
   1b51c:	cmp	r3, #0
   1b520:	beq	1b55c <__assert_fail@plt+0xa004>
   1b524:	tst	r3, #4
   1b528:	beq	1b570 <__assert_fail@plt+0xa018>
   1b52c:	cmp	r5, #0
   1b530:	beq	1b580 <__assert_fail@plt+0xa028>
   1b534:	tst	r3, #8
   1b538:	bne	1b580 <__assert_fail@plt+0xa028>
   1b53c:	tst	r3, #32
   1b540:	beq	1b54c <__assert_fail@plt+0x9ff4>
   1b544:	cmp	r6, #0
   1b548:	beq	1b580 <__assert_fail@plt+0xa028>
   1b54c:	tst	r3, #128	; 0x80
   1b550:	beq	1b55c <__assert_fail@plt+0xa004>
   1b554:	cmp	r7, #0
   1b558:	beq	1b580 <__assert_fail@plt+0xa028>
   1b55c:	ldrd	r4, [sp]
   1b560:	ldrd	r6, [sp, #8]
   1b564:	ldr	r8, [sp, #16]
   1b568:	add	sp, sp, #20
   1b56c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b570:	tst	r3, #8
   1b574:	beq	1b53c <__assert_fail@plt+0x9fe4>
   1b578:	cmp	r5, #0
   1b57c:	beq	1b53c <__assert_fail@plt+0x9fe4>
   1b580:	add	r2, r2, #1
   1b584:	cmp	r2, lr
   1b588:	bne	1b500 <__assert_fail@plt+0x9fa8>
   1b58c:	mov	r0, #0
   1b590:	b	1b55c <__assert_fail@plt+0xa004>
   1b594:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b598:	strd	r6, [sp, #8]
   1b59c:	strd	sl, [sp, #24]
   1b5a0:	ldr	fp, [r1]
   1b5a4:	strd	r8, [sp, #16]
   1b5a8:	str	lr, [sp, #32]
   1b5ac:	sub	sp, sp, #12
   1b5b0:	ldr	r6, [r0, #84]	; 0x54
   1b5b4:	cmp	fp, #0
   1b5b8:	ble	1b674 <__assert_fail@plt+0xa11c>
   1b5bc:	mov	r8, r3
   1b5c0:	mov	r9, r2
   1b5c4:	mov	sl, r0
   1b5c8:	mov	r7, r1
   1b5cc:	mov	r4, #0
   1b5d0:	b	1b5dc <__assert_fail@plt+0xa084>
   1b5d4:	cmp	r4, fp
   1b5d8:	bge	1b674 <__assert_fail@plt+0xa11c>
   1b5dc:	ldr	r3, [r9]
   1b5e0:	ldr	ip, [r6]
   1b5e4:	ldr	r5, [r3, r4, lsl #2]
   1b5e8:	add	r4, r4, #1
   1b5ec:	add	lr, ip, r5, lsl #3
   1b5f0:	ldrb	lr, [lr, #4]
   1b5f4:	cmp	lr, #8
   1b5f8:	bne	1b5d4 <__assert_fail@plt+0xa07c>
   1b5fc:	ldr	r3, [ip, r5, lsl #3]
   1b600:	cmp	r3, #31
   1b604:	bgt	1b5d4 <__assert_fail@plt+0xa07c>
   1b608:	ldr	r2, [r6, #80]	; 0x50
   1b60c:	lsr	r3, r2, r3
   1b610:	tst	r3, #1
   1b614:	beq	1b5d4 <__assert_fail@plt+0xa07c>
   1b618:	ldr	fp, [sl, #124]	; 0x7c
   1b61c:	ldr	r3, [sl, #128]	; 0x80
   1b620:	ldr	r2, [sl, #132]	; 0x84
   1b624:	cmp	r3, fp
   1b628:	beq	1b69c <__assert_fail@plt+0xa144>
   1b62c:	mov	r1, #24
   1b630:	mov	r0, #1
   1b634:	str	r2, [sp, #4]
   1b638:	bl	2611c <__assert_fail@plt+0x14bc4>
   1b63c:	ldr	r2, [sp, #4]
   1b640:	ldr	r3, [sl, #124]	; 0x7c
   1b644:	str	r0, [r2, fp, lsl #2]
   1b648:	ldr	r2, [sl, #132]	; 0x84
   1b64c:	add	r1, r3, #1
   1b650:	ldr	r3, [r2, r3, lsl #2]
   1b654:	cmp	r3, #0
   1b658:	beq	1b694 <__assert_fail@plt+0xa13c>
   1b65c:	str	r5, [r3, #4]
   1b660:	str	r1, [sl, #124]	; 0x7c
   1b664:	str	r8, [r3]
   1b668:	ldr	fp, [r7]
   1b66c:	cmp	r4, fp
   1b670:	blt	1b5dc <__assert_fail@plt+0xa084>
   1b674:	mov	r0, #0
   1b678:	add	sp, sp, #12
   1b67c:	ldrd	r4, [sp]
   1b680:	ldrd	r6, [sp, #8]
   1b684:	ldrd	r8, [sp, #16]
   1b688:	ldrd	sl, [sp, #24]
   1b68c:	add	sp, sp, #32
   1b690:	pop	{pc}		; (ldr pc, [sp], #4)
   1b694:	mov	r0, #12
   1b698:	b	1b678 <__assert_fail@plt+0xa120>
   1b69c:	mov	r0, r2
   1b6a0:	lsl	r1, fp, #3
   1b6a4:	bl	261cc <__assert_fail@plt+0x14c74>
   1b6a8:	subs	r2, r0, #0
   1b6ac:	lsl	r3, fp, #1
   1b6b0:	beq	1b694 <__assert_fail@plt+0xa13c>
   1b6b4:	str	r3, [sl, #128]	; 0x80
   1b6b8:	str	r2, [sl, #132]	; 0x84
   1b6bc:	ldr	fp, [sl, #124]	; 0x7c
   1b6c0:	b	1b62c <__assert_fail@plt+0xa0d4>
   1b6c4:	strd	r4, [sp, #-16]!
   1b6c8:	mov	r5, r0
   1b6cc:	mov	r0, r1
   1b6d0:	mov	r4, r1
   1b6d4:	str	r6, [sp, #8]
   1b6d8:	str	lr, [sp, #12]
   1b6dc:	bl	11414 <strlen@plt>
   1b6e0:	cmp	r0, #1
   1b6e4:	bne	1b718 <__assert_fail@plt+0xa1c0>
   1b6e8:	ldrb	r3, [r4]
   1b6ec:	mov	ip, #0
   1b6f0:	asr	r1, r3, #5
   1b6f4:	and	r3, r3, #31
   1b6f8:	ldr	r2, [r5, r1, lsl #2]
   1b6fc:	orr	r3, r2, r0, lsl r3
   1b700:	str	r3, [r5, r1, lsl #2]
   1b704:	ldrd	r4, [sp]
   1b708:	mov	r0, ip
   1b70c:	ldr	r6, [sp, #8]
   1b710:	add	sp, sp, #12
   1b714:	pop	{pc}		; (ldr pc, [sp], #4)
   1b718:	mov	ip, #3
   1b71c:	b	1b704 <__assert_fail@plt+0xa1ac>
   1b720:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b724:	mov	r5, r1
   1b728:	strd	r6, [sp, #8]
   1b72c:	mov	r6, r0
   1b730:	strd	r8, [sp, #16]
   1b734:	mov	r8, r3
   1b738:	strd	sl, [sp, #24]
   1b73c:	mov	sl, r2
   1b740:	str	lr, [sp, #32]
   1b744:	sub	sp, sp, #4
   1b748:	ldr	r9, [sp, #40]	; 0x28
   1b74c:	ldr	ip, [sp, #48]	; 0x30
   1b750:	ldr	r7, [sp, #44]	; 0x2c
   1b754:	tst	ip, #4194304	; 0x400000
   1b758:	beq	1b77c <__assert_fail@plt+0xa224>
   1b75c:	mov	r0, r7
   1b760:	movw	r1, #31128	; 0x7998
   1b764:	movt	r1, #2
   1b768:	bl	111f8 <strcmp@plt>
   1b76c:	cmp	r0, #0
   1b770:	movweq	r7, #31120	; 0x7990
   1b774:	movteq	r7, #2
   1b778:	bne	1b880 <__assert_fail@plt+0xa328>
   1b77c:	ldr	r4, [r8]
   1b780:	ldr	r3, [r9]
   1b784:	ldr	fp, [sl]
   1b788:	cmp	r3, r4
   1b78c:	beq	1b964 <__assert_fail@plt+0xa40c>
   1b790:	add	r3, r4, #1
   1b794:	mov	r0, r7
   1b798:	str	r3, [r8]
   1b79c:	bl	111c8 <wctype@plt>
   1b7a0:	movw	r1, #31144	; 0x79a8
   1b7a4:	movt	r1, #2
   1b7a8:	str	r0, [fp, r4, lsl #2]
   1b7ac:	mov	r0, r7
   1b7b0:	bl	111f8 <strcmp@plt>
   1b7b4:	subs	r4, r0, #0
   1b7b8:	beq	1b838 <__assert_fail@plt+0xa2e0>
   1b7bc:	movw	r1, #31152	; 0x79b0
   1b7c0:	movt	r1, #2
   1b7c4:	mov	r0, r7
   1b7c8:	bl	111f8 <strcmp@plt>
   1b7cc:	subs	r4, r0, #0
   1b7d0:	bne	1b8a4 <__assert_fail@plt+0xa34c>
   1b7d4:	bl	113fc <__ctype_b_loc@plt>
   1b7d8:	ldr	r3, [r0]
   1b7dc:	cmp	r6, #0
   1b7e0:	moveq	ip, #1
   1b7e4:	sub	r3, r3, #2
   1b7e8:	bne	1ba8c <__assert_fail@plt+0xa534>
   1b7ec:	ldrh	r2, [r3, #2]!
   1b7f0:	asr	r1, r4, #5
   1b7f4:	and	r0, r4, #31
   1b7f8:	add	r4, r4, #1
   1b7fc:	tst	r2, #2
   1b800:	beq	1b810 <__assert_fail@plt+0xa2b8>
   1b804:	ldr	r2, [r5, r1, lsl #2]
   1b808:	orr	r2, r2, ip, lsl r0
   1b80c:	str	r2, [r5, r1, lsl #2]
   1b810:	cmp	r4, #256	; 0x100
   1b814:	bne	1b7ec <__assert_fail@plt+0xa294>
   1b818:	mov	r0, #0
   1b81c:	add	sp, sp, #4
   1b820:	ldrd	r4, [sp]
   1b824:	ldrd	r6, [sp, #8]
   1b828:	ldrd	r8, [sp, #16]
   1b82c:	ldrd	sl, [sp, #24]
   1b830:	add	sp, sp, #32
   1b834:	pop	{pc}		; (ldr pc, [sp], #4)
   1b838:	bl	113fc <__ctype_b_loc@plt>
   1b83c:	ldr	r3, [r0]
   1b840:	cmp	r6, #0
   1b844:	moveq	lr, #1
   1b848:	sub	r3, r3, #2
   1b84c:	bne	1ba50 <__assert_fail@plt+0xa4f8>
   1b850:	ldrh	r0, [r3, #2]!
   1b854:	asr	r2, r4, #5
   1b858:	and	ip, r4, #31
   1b85c:	add	r4, r4, #1
   1b860:	tst	r0, #8
   1b864:	beq	1b874 <__assert_fail@plt+0xa31c>
   1b868:	ldr	r1, [r5, r2, lsl #2]
   1b86c:	orr	r1, r1, lr, lsl ip
   1b870:	str	r1, [r5, r2, lsl #2]
   1b874:	cmp	r4, #256	; 0x100
   1b878:	bne	1b850 <__assert_fail@plt+0xa2f8>
   1b87c:	b	1b818 <__assert_fail@plt+0xa2c0>
   1b880:	mov	r0, r7
   1b884:	movw	r1, #31136	; 0x79a0
   1b888:	movt	r1, #2
   1b88c:	bl	111f8 <strcmp@plt>
   1b890:	cmp	r0, #0
   1b894:	movw	r3, #31120	; 0x7990
   1b898:	movt	r3, #2
   1b89c:	moveq	r7, r3
   1b8a0:	b	1b77c <__assert_fail@plt+0xa224>
   1b8a4:	movw	r1, #31136	; 0x79a0
   1b8a8:	movt	r1, #2
   1b8ac:	mov	r0, r7
   1b8b0:	bl	111f8 <strcmp@plt>
   1b8b4:	subs	r4, r0, #0
   1b8b8:	beq	1b91c <__assert_fail@plt+0xa3c4>
   1b8bc:	movw	r1, #31160	; 0x79b8
   1b8c0:	movt	r1, #2
   1b8c4:	mov	r0, r7
   1b8c8:	bl	111f8 <strcmp@plt>
   1b8cc:	subs	r4, r0, #0
   1b8d0:	bne	1b990 <__assert_fail@plt+0xa438>
   1b8d4:	bl	113fc <__ctype_b_loc@plt>
   1b8d8:	ldr	r3, [r0]
   1b8dc:	cmp	r6, #0
   1b8e0:	moveq	ip, #1
   1b8e4:	sub	r3, r3, #2
   1b8e8:	bne	1bc68 <__assert_fail@plt+0xa710>
   1b8ec:	ldrh	r2, [r3, #2]!
   1b8f0:	asr	r1, r4, #5
   1b8f4:	and	r0, r4, #31
   1b8f8:	add	r4, r4, #1
   1b8fc:	tst	r2, #8192	; 0x2000
   1b900:	beq	1b910 <__assert_fail@plt+0xa3b8>
   1b904:	ldr	r2, [r5, r1, lsl #2]
   1b908:	orr	r2, r2, ip, lsl r0
   1b90c:	str	r2, [r5, r1, lsl #2]
   1b910:	cmp	r4, #256	; 0x100
   1b914:	bne	1b8ec <__assert_fail@plt+0xa394>
   1b918:	b	1b818 <__assert_fail@plt+0xa2c0>
   1b91c:	bl	113fc <__ctype_b_loc@plt>
   1b920:	ldr	r3, [r0]
   1b924:	cmp	r6, #0
   1b928:	moveq	ip, #1
   1b92c:	sub	r3, r3, #2
   1b930:	bne	1bac8 <__assert_fail@plt+0xa570>
   1b934:	ldrh	r2, [r3, #2]!
   1b938:	asr	r1, r4, #5
   1b93c:	and	r0, r4, #31
   1b940:	add	r4, r4, #1
   1b944:	tst	r2, #512	; 0x200
   1b948:	beq	1b958 <__assert_fail@plt+0xa400>
   1b94c:	ldr	r2, [r5, r1, lsl #2]
   1b950:	orr	r2, r2, ip, lsl r0
   1b954:	str	r2, [r5, r1, lsl #2]
   1b958:	cmp	r4, #256	; 0x100
   1b95c:	bne	1b934 <__assert_fail@plt+0xa3dc>
   1b960:	b	1b818 <__assert_fail@plt+0xa2c0>
   1b964:	lsl	r4, r4, #1
   1b968:	mov	r0, fp
   1b96c:	add	r4, r4, #1
   1b970:	lsl	r1, r4, #2
   1b974:	bl	261cc <__assert_fail@plt+0x14c74>
   1b978:	subs	fp, r0, #0
   1b97c:	beq	1bbc4 <__assert_fail@plt+0xa66c>
   1b980:	str	fp, [sl]
   1b984:	str	r4, [r9]
   1b988:	ldr	r4, [r8]
   1b98c:	b	1b790 <__assert_fail@plt+0xa238>
   1b990:	movw	r1, #31120	; 0x7990
   1b994:	movt	r1, #2
   1b998:	mov	r0, r7
   1b99c:	bl	111f8 <strcmp@plt>
   1b9a0:	subs	r4, r0, #0
   1b9a4:	beq	1ba08 <__assert_fail@plt+0xa4b0>
   1b9a8:	movw	r1, #31168	; 0x79c0
   1b9ac:	movt	r1, #2
   1b9b0:	mov	r0, r7
   1b9b4:	bl	111f8 <strcmp@plt>
   1b9b8:	subs	r4, r0, #0
   1b9bc:	bne	1bb04 <__assert_fail@plt+0xa5ac>
   1b9c0:	bl	113fc <__ctype_b_loc@plt>
   1b9c4:	ldr	r3, [r0]
   1b9c8:	cmp	r6, #0
   1b9cc:	moveq	ip, #1
   1b9d0:	sub	r3, r3, #2
   1b9d4:	bne	1bca4 <__assert_fail@plt+0xa74c>
   1b9d8:	ldrh	r1, [r3, #2]!
   1b9dc:	asr	r2, r4, #5
   1b9e0:	and	r0, r4, #31
   1b9e4:	add	r4, r4, #1
   1b9e8:	tst	r1, #2048	; 0x800
   1b9ec:	beq	1b9fc <__assert_fail@plt+0xa4a4>
   1b9f0:	ldr	r1, [r5, r2, lsl #2]
   1b9f4:	orr	r1, r1, ip, lsl r0
   1b9f8:	str	r1, [r5, r2, lsl #2]
   1b9fc:	cmp	r4, #256	; 0x100
   1ba00:	bne	1b9d8 <__assert_fail@plt+0xa480>
   1ba04:	b	1b818 <__assert_fail@plt+0xa2c0>
   1ba08:	bl	113fc <__ctype_b_loc@plt>
   1ba0c:	ldr	r3, [r0]
   1ba10:	cmp	r6, #0
   1ba14:	moveq	ip, #1
   1ba18:	sub	r3, r3, #2
   1ba1c:	bne	1bc2c <__assert_fail@plt+0xa6d4>
   1ba20:	ldrh	r2, [r3, #2]!
   1ba24:	asr	r1, r4, #5
   1ba28:	and	r0, r4, #31
   1ba2c:	add	r4, r4, #1
   1ba30:	tst	r2, #1024	; 0x400
   1ba34:	beq	1ba44 <__assert_fail@plt+0xa4ec>
   1ba38:	ldr	r2, [r5, r1, lsl #2]
   1ba3c:	orr	r2, r2, ip, lsl r0
   1ba40:	str	r2, [r5, r1, lsl #2]
   1ba44:	cmp	r4, #256	; 0x100
   1ba48:	bne	1ba20 <__assert_fail@plt+0xa4c8>
   1ba4c:	b	1b818 <__assert_fail@plt+0xa2c0>
   1ba50:	add	ip, r6, #256	; 0x100
   1ba54:	mov	lr, #1
   1ba58:	ldrh	r2, [r3, #2]!
   1ba5c:	tst	r2, #8
   1ba60:	beq	1ba7c <__assert_fail@plt+0xa524>
   1ba64:	ldrb	r2, [r6]
   1ba68:	asr	r0, r2, #5
   1ba6c:	and	r2, r2, #31
   1ba70:	ldr	r1, [r5, r0, lsl #2]
   1ba74:	orr	r2, r1, lr, lsl r2
   1ba78:	str	r2, [r5, r0, lsl #2]
   1ba7c:	add	r6, r6, #1
   1ba80:	cmp	ip, r6
   1ba84:	bne	1ba58 <__assert_fail@plt+0xa500>
   1ba88:	b	1b818 <__assert_fail@plt+0xa2c0>
   1ba8c:	add	ip, r6, #256	; 0x100
   1ba90:	mov	lr, #1
   1ba94:	ldrh	r2, [r3, #2]!
   1ba98:	tst	r2, #2
   1ba9c:	beq	1bab8 <__assert_fail@plt+0xa560>
   1baa0:	ldrb	r2, [r6]
   1baa4:	asr	r0, r2, #5
   1baa8:	and	r2, r2, #31
   1baac:	ldr	r1, [r5, r0, lsl #2]
   1bab0:	orr	r2, r1, lr, lsl r2
   1bab4:	str	r2, [r5, r0, lsl #2]
   1bab8:	add	r6, r6, #1
   1babc:	cmp	ip, r6
   1bac0:	bne	1ba94 <__assert_fail@plt+0xa53c>
   1bac4:	b	1b818 <__assert_fail@plt+0xa2c0>
   1bac8:	add	ip, r6, #256	; 0x100
   1bacc:	mov	lr, #1
   1bad0:	ldrh	r2, [r3, #2]!
   1bad4:	tst	r2, #512	; 0x200
   1bad8:	beq	1baf4 <__assert_fail@plt+0xa59c>
   1badc:	ldrb	r2, [r6]
   1bae0:	asr	r0, r2, #5
   1bae4:	and	r2, r2, #31
   1bae8:	ldr	r1, [r5, r0, lsl #2]
   1baec:	orr	r2, r1, lr, lsl r2
   1baf0:	str	r2, [r5, r0, lsl #2]
   1baf4:	add	r6, r6, #1
   1baf8:	cmp	ip, r6
   1bafc:	bne	1bad0 <__assert_fail@plt+0xa578>
   1bb00:	b	1b818 <__assert_fail@plt+0xa2c0>
   1bb04:	movw	r1, #31176	; 0x79c8
   1bb08:	movt	r1, #2
   1bb0c:	mov	r0, r7
   1bb10:	bl	111f8 <strcmp@plt>
   1bb14:	subs	r4, r0, #0
   1bb18:	bne	1bb64 <__assert_fail@plt+0xa60c>
   1bb1c:	bl	113fc <__ctype_b_loc@plt>
   1bb20:	ldr	r3, [r0]
   1bb24:	cmp	r6, #0
   1bb28:	moveq	ip, #1
   1bb2c:	sub	r3, r3, #2
   1bb30:	bne	1beb4 <__assert_fail@plt+0xa95c>
   1bb34:	ldrh	r2, [r3, #2]!
   1bb38:	asr	r1, r4, #5
   1bb3c:	and	r0, r4, #31
   1bb40:	add	r4, r4, #1
   1bb44:	tst	r2, #16384	; 0x4000
   1bb48:	beq	1bb58 <__assert_fail@plt+0xa600>
   1bb4c:	ldr	r2, [r5, r1, lsl #2]
   1bb50:	orr	r2, r2, ip, lsl r0
   1bb54:	str	r2, [r5, r1, lsl #2]
   1bb58:	cmp	r4, #256	; 0x100
   1bb5c:	bne	1bb34 <__assert_fail@plt+0xa5dc>
   1bb60:	b	1b818 <__assert_fail@plt+0xa2c0>
   1bb64:	movw	r1, #31128	; 0x7998
   1bb68:	movt	r1, #2
   1bb6c:	mov	r0, r7
   1bb70:	bl	111f8 <strcmp@plt>
   1bb74:	subs	r4, r0, #0
   1bb78:	bne	1bbcc <__assert_fail@plt+0xa674>
   1bb7c:	bl	113fc <__ctype_b_loc@plt>
   1bb80:	ldr	r3, [r0]
   1bb84:	cmp	r6, #0
   1bb88:	moveq	ip, #1
   1bb8c:	sub	r3, r3, #2
   1bb90:	bne	1bf2c <__assert_fail@plt+0xa9d4>
   1bb94:	ldrh	r2, [r3, #2]!
   1bb98:	asr	r1, r4, #5
   1bb9c:	and	r0, r4, #31
   1bba0:	add	r4, r4, #1
   1bba4:	tst	r2, #256	; 0x100
   1bba8:	beq	1bbb8 <__assert_fail@plt+0xa660>
   1bbac:	ldr	r2, [r5, r1, lsl #2]
   1bbb0:	orr	r2, r2, ip, lsl r0
   1bbb4:	str	r2, [r5, r1, lsl #2]
   1bbb8:	cmp	r4, #256	; 0x100
   1bbbc:	bne	1bb94 <__assert_fail@plt+0xa63c>
   1bbc0:	b	1b818 <__assert_fail@plt+0xa2c0>
   1bbc4:	mov	r0, #12
   1bbc8:	b	1b81c <__assert_fail@plt+0xa2c4>
   1bbcc:	movw	r1, #31184	; 0x79d0
   1bbd0:	movt	r1, #2
   1bbd4:	mov	r0, r7
   1bbd8:	bl	111f8 <strcmp@plt>
   1bbdc:	subs	r4, r0, #0
   1bbe0:	bne	1bce0 <__assert_fail@plt+0xa788>
   1bbe4:	bl	113fc <__ctype_b_loc@plt>
   1bbe8:	ldr	r3, [r0]
   1bbec:	cmp	r6, #0
   1bbf0:	moveq	ip, #1
   1bbf4:	sub	r3, r3, #2
   1bbf8:	bne	1bef0 <__assert_fail@plt+0xa998>
   1bbfc:	ldrh	r2, [r3, #2]!
   1bc00:	asr	r1, r4, #5
   1bc04:	and	r0, r4, #31
   1bc08:	add	r4, r4, #1
   1bc0c:	tst	r2, #1
   1bc10:	beq	1bc20 <__assert_fail@plt+0xa6c8>
   1bc14:	ldr	r2, [r5, r1, lsl #2]
   1bc18:	orr	r2, r2, ip, lsl r0
   1bc1c:	str	r2, [r5, r1, lsl #2]
   1bc20:	cmp	r4, #256	; 0x100
   1bc24:	bne	1bbfc <__assert_fail@plt+0xa6a4>
   1bc28:	b	1b818 <__assert_fail@plt+0xa2c0>
   1bc2c:	add	ip, r6, #256	; 0x100
   1bc30:	mov	lr, #1
   1bc34:	ldrh	r2, [r3, #2]!
   1bc38:	tst	r2, #1024	; 0x400
   1bc3c:	beq	1bc58 <__assert_fail@plt+0xa700>
   1bc40:	ldrb	r2, [r6]
   1bc44:	asr	r0, r2, #5
   1bc48:	and	r2, r2, #31
   1bc4c:	ldr	r1, [r5, r0, lsl #2]
   1bc50:	orr	r2, r1, lr, lsl r2
   1bc54:	str	r2, [r5, r0, lsl #2]
   1bc58:	add	r6, r6, #1
   1bc5c:	cmp	ip, r6
   1bc60:	bne	1bc34 <__assert_fail@plt+0xa6dc>
   1bc64:	b	1b818 <__assert_fail@plt+0xa2c0>
   1bc68:	add	ip, r6, #256	; 0x100
   1bc6c:	mov	lr, #1
   1bc70:	ldrh	r2, [r3, #2]!
   1bc74:	tst	r2, #8192	; 0x2000
   1bc78:	beq	1bc94 <__assert_fail@plt+0xa73c>
   1bc7c:	ldrb	r2, [r6]
   1bc80:	asr	r0, r2, #5
   1bc84:	and	r2, r2, #31
   1bc88:	ldr	r1, [r5, r0, lsl #2]
   1bc8c:	orr	r2, r1, lr, lsl r2
   1bc90:	str	r2, [r5, r0, lsl #2]
   1bc94:	add	r6, r6, #1
   1bc98:	cmp	r6, ip
   1bc9c:	bne	1bc70 <__assert_fail@plt+0xa718>
   1bca0:	b	1b818 <__assert_fail@plt+0xa2c0>
   1bca4:	add	r1, r6, #256	; 0x100
   1bca8:	mov	lr, #1
   1bcac:	ldrh	r2, [r3, #2]!
   1bcb0:	tst	r2, #2048	; 0x800
   1bcb4:	beq	1bcd0 <__assert_fail@plt+0xa778>
   1bcb8:	ldrb	r2, [r6]
   1bcbc:	asr	ip, r2, #5
   1bcc0:	and	r2, r2, #31
   1bcc4:	ldr	r0, [r5, ip, lsl #2]
   1bcc8:	orr	r2, r0, lr, lsl r2
   1bccc:	str	r2, [r5, ip, lsl #2]
   1bcd0:	add	r6, r6, #1
   1bcd4:	cmp	r1, r6
   1bcd8:	bne	1bcac <__assert_fail@plt+0xa754>
   1bcdc:	b	1b818 <__assert_fail@plt+0xa2c0>
   1bce0:	movw	r1, #31192	; 0x79d8
   1bce4:	movt	r1, #2
   1bce8:	mov	r0, r7
   1bcec:	bl	111f8 <strcmp@plt>
   1bcf0:	subs	r4, r0, #0
   1bcf4:	bne	1bd7c <__assert_fail@plt+0xa824>
   1bcf8:	bl	113fc <__ctype_b_loc@plt>
   1bcfc:	ldr	r3, [r0]
   1bd00:	cmp	r6, #0
   1bd04:	moveq	r0, #1
   1bd08:	sub	r3, r3, #2
   1bd0c:	bne	1bd40 <__assert_fail@plt+0xa7e8>
   1bd10:	ldrsh	r2, [r3, #2]!
   1bd14:	asr	r1, r4, #5
   1bd18:	and	ip, r4, #31
   1bd1c:	add	r4, r4, #1
   1bd20:	cmp	r2, #0
   1bd24:	bge	1bd34 <__assert_fail@plt+0xa7dc>
   1bd28:	ldr	r2, [r5, r1, lsl #2]
   1bd2c:	orr	r2, r2, r0, lsl ip
   1bd30:	str	r2, [r5, r1, lsl #2]
   1bd34:	cmp	r4, #256	; 0x100
   1bd38:	bne	1bd10 <__assert_fail@plt+0xa7b8>
   1bd3c:	b	1b818 <__assert_fail@plt+0xa2c0>
   1bd40:	add	lr, r6, #256	; 0x100
   1bd44:	mov	ip, #1
   1bd48:	ldrsh	r2, [r3, #2]!
   1bd4c:	cmp	r2, #0
   1bd50:	bge	1bd6c <__assert_fail@plt+0xa814>
   1bd54:	ldrb	r2, [r6]
   1bd58:	asr	r0, r2, #5
   1bd5c:	and	r2, r2, #31
   1bd60:	ldr	r1, [r5, r0, lsl #2]
   1bd64:	orr	r2, r1, ip, lsl r2
   1bd68:	str	r2, [r5, r0, lsl #2]
   1bd6c:	add	r6, r6, #1
   1bd70:	cmp	lr, r6
   1bd74:	bne	1bd48 <__assert_fail@plt+0xa7f0>
   1bd78:	b	1b818 <__assert_fail@plt+0xa2c0>
   1bd7c:	movw	r1, #31200	; 0x79e0
   1bd80:	movt	r1, #2
   1bd84:	mov	r0, r7
   1bd88:	bl	111f8 <strcmp@plt>
   1bd8c:	subs	r4, r0, #0
   1bd90:	bne	1be18 <__assert_fail@plt+0xa8c0>
   1bd94:	bl	113fc <__ctype_b_loc@plt>
   1bd98:	ldr	r3, [r0]
   1bd9c:	cmp	r6, #0
   1bda0:	moveq	r0, #1
   1bda4:	sub	r3, r3, #2
   1bda8:	bne	1bddc <__assert_fail@plt+0xa884>
   1bdac:	ldrh	r2, [r3, #2]!
   1bdb0:	asr	r1, r4, #5
   1bdb4:	and	ip, r4, #31
   1bdb8:	add	r4, r4, #1
   1bdbc:	tst	r2, #4
   1bdc0:	beq	1bdd0 <__assert_fail@plt+0xa878>
   1bdc4:	ldr	r2, [r5, r1, lsl #2]
   1bdc8:	orr	r2, r2, r0, lsl ip
   1bdcc:	str	r2, [r5, r1, lsl #2]
   1bdd0:	cmp	r4, #256	; 0x100
   1bdd4:	bne	1bdac <__assert_fail@plt+0xa854>
   1bdd8:	b	1b818 <__assert_fail@plt+0xa2c0>
   1bddc:	add	lr, r6, #256	; 0x100
   1bde0:	mov	ip, #1
   1bde4:	ldrh	r2, [r3, #2]!
   1bde8:	tst	r2, #4
   1bdec:	beq	1be08 <__assert_fail@plt+0xa8b0>
   1bdf0:	ldrb	r2, [r6]
   1bdf4:	asr	r0, r2, #5
   1bdf8:	and	r2, r2, #31
   1bdfc:	ldr	r1, [r5, r0, lsl #2]
   1be00:	orr	r2, r1, ip, lsl r2
   1be04:	str	r2, [r5, r0, lsl #2]
   1be08:	add	r6, r6, #1
   1be0c:	cmp	r6, lr
   1be10:	bne	1bde4 <__assert_fail@plt+0xa88c>
   1be14:	b	1b818 <__assert_fail@plt+0xa2c0>
   1be18:	mov	r0, r7
   1be1c:	movw	r1, #31208	; 0x79e8
   1be20:	movt	r1, #2
   1be24:	bl	111f8 <strcmp@plt>
   1be28:	subs	r4, r0, #0
   1be2c:	movne	r0, #4
   1be30:	bne	1b81c <__assert_fail@plt+0xa2c4>
   1be34:	bl	113fc <__ctype_b_loc@plt>
   1be38:	ldr	r3, [r0]
   1be3c:	cmp	r6, #0
   1be40:	moveq	r0, #1
   1be44:	sub	r3, r3, #2
   1be48:	bne	1be7c <__assert_fail@plt+0xa924>
   1be4c:	ldrh	r2, [r3, #2]!
   1be50:	asr	r1, r4, #5
   1be54:	and	ip, r4, #31
   1be58:	add	r4, r4, #1
   1be5c:	tst	r2, #4096	; 0x1000
   1be60:	beq	1be70 <__assert_fail@plt+0xa918>
   1be64:	ldr	r2, [r5, r1, lsl #2]
   1be68:	orr	r2, r2, r0, lsl ip
   1be6c:	str	r2, [r5, r1, lsl #2]
   1be70:	cmp	r4, #256	; 0x100
   1be74:	bne	1be4c <__assert_fail@plt+0xa8f4>
   1be78:	b	1b818 <__assert_fail@plt+0xa2c0>
   1be7c:	mov	ip, #1
   1be80:	ldrh	r2, [r3, #2]!
   1be84:	tst	r2, #4096	; 0x1000
   1be88:	beq	1bea4 <__assert_fail@plt+0xa94c>
   1be8c:	ldrb	r2, [r6, r4]
   1be90:	asr	r0, r2, #5
   1be94:	and	r2, r2, #31
   1be98:	ldr	r1, [r5, r0, lsl #2]
   1be9c:	orr	r2, r1, ip, lsl r2
   1bea0:	str	r2, [r5, r0, lsl #2]
   1bea4:	add	r4, r4, #1
   1bea8:	cmp	r4, #256	; 0x100
   1beac:	bne	1be80 <__assert_fail@plt+0xa928>
   1beb0:	b	1b818 <__assert_fail@plt+0xa2c0>
   1beb4:	add	lr, r6, #256	; 0x100
   1beb8:	mov	ip, #1
   1bebc:	ldrh	r2, [r3, #2]!
   1bec0:	tst	r2, #16384	; 0x4000
   1bec4:	beq	1bee0 <__assert_fail@plt+0xa988>
   1bec8:	ldrb	r2, [r6]
   1becc:	asr	r0, r2, #5
   1bed0:	and	r2, r2, #31
   1bed4:	ldr	r1, [r5, r0, lsl #2]
   1bed8:	orr	r2, r1, ip, lsl r2
   1bedc:	str	r2, [r5, r0, lsl #2]
   1bee0:	add	r6, r6, #1
   1bee4:	cmp	lr, r6
   1bee8:	bne	1bebc <__assert_fail@plt+0xa964>
   1beec:	b	1b818 <__assert_fail@plt+0xa2c0>
   1bef0:	add	lr, r6, #256	; 0x100
   1bef4:	mov	ip, #1
   1bef8:	ldrh	r2, [r3, #2]!
   1befc:	tst	r2, #1
   1bf00:	beq	1bf1c <__assert_fail@plt+0xa9c4>
   1bf04:	ldrb	r2, [r6]
   1bf08:	asr	r0, r2, #5
   1bf0c:	and	r2, r2, #31
   1bf10:	ldr	r1, [r5, r0, lsl #2]
   1bf14:	orr	r2, r1, ip, lsl r2
   1bf18:	str	r2, [r5, r0, lsl #2]
   1bf1c:	add	r6, r6, #1
   1bf20:	cmp	lr, r6
   1bf24:	bne	1bef8 <__assert_fail@plt+0xa9a0>
   1bf28:	b	1b818 <__assert_fail@plt+0xa2c0>
   1bf2c:	add	lr, r6, #256	; 0x100
   1bf30:	mov	ip, #1
   1bf34:	ldrh	r2, [r3, #2]!
   1bf38:	tst	r2, #256	; 0x100
   1bf3c:	beq	1bf58 <__assert_fail@plt+0xaa00>
   1bf40:	ldrb	r2, [r6]
   1bf44:	asr	r0, r2, #5
   1bf48:	and	r2, r2, #31
   1bf4c:	ldr	r1, [r5, r0, lsl #2]
   1bf50:	orr	r2, r1, ip, lsl r2
   1bf54:	str	r2, [r5, r0, lsl #2]
   1bf58:	add	r6, r6, #1
   1bf5c:	cmp	r6, lr
   1bf60:	bne	1bf34 <__assert_fail@plt+0xa9dc>
   1bf64:	b	1b818 <__assert_fail@plt+0xa2c0>
   1bf68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bf6c:	mov	r5, r3
   1bf70:	strd	r6, [sp, #8]
   1bf74:	mov	r6, r0
   1bf78:	mov	r0, #32
   1bf7c:	strd	r8, [sp, #16]
   1bf80:	mov	r9, #0
   1bf84:	strd	sl, [sp, #24]
   1bf88:	mov	fp, r1
   1bf8c:	mov	r1, #1
   1bf90:	str	lr, [sp, #32]
   1bf94:	sub	sp, sp, #44	; 0x2c
   1bf98:	mov	sl, r2
   1bf9c:	ldrb	r8, [sp, #80]	; 0x50
   1bfa0:	str	r9, [sp, #20]
   1bfa4:	bl	2611c <__assert_fail@plt+0x14bc4>
   1bfa8:	subs	r4, r0, #0
   1bfac:	beq	1c184 <__assert_fail@plt+0xac2c>
   1bfb0:	mov	r1, #1
   1bfb4:	mov	r0, #40	; 0x28
   1bfb8:	bl	2611c <__assert_fail@plt+0x14bc4>
   1bfbc:	subs	r7, r0, #0
   1bfc0:	beq	1c198 <__assert_fail@plt+0xac40>
   1bfc4:	ldrb	ip, [r7, #16]
   1bfc8:	add	lr, sp, #20
   1bfcc:	mov	r0, fp
   1bfd0:	add	r3, r7, #36	; 0x24
   1bfd4:	add	r2, r7, #12
   1bfd8:	mov	r1, r4
   1bfdc:	bfi	ip, r8, #0, #1
   1bfe0:	strb	ip, [r7, #16]
   1bfe4:	str	lr, [sp]
   1bfe8:	str	sl, [sp, #4]
   1bfec:	str	r9, [sp, #8]
   1bff0:	bl	1b720 <__assert_fail@plt+0xa1c8>
   1bff4:	subs	sl, r0, #0
   1bff8:	bne	1c1b4 <__assert_fail@plt+0xac5c>
   1bffc:	ldrb	r3, [r5]
   1c000:	cmp	r3, #0
   1c004:	beq	1c02c <__assert_fail@plt+0xaad4>
   1c008:	mov	ip, #1
   1c00c:	asr	r1, r3, #5
   1c010:	and	r0, r3, #31
   1c014:	ldrb	r3, [r5, #1]!
   1c018:	ldr	r2, [r4, r1, lsl #2]
   1c01c:	cmp	r3, #0
   1c020:	orr	r2, r2, ip, lsl r0
   1c024:	str	r2, [r4, r1, lsl #2]
   1c028:	bne	1c00c <__assert_fail@plt+0xaab4>
   1c02c:	cmp	r8, #0
   1c030:	beq	1c050 <__assert_fail@plt+0xaaf8>
   1c034:	sub	r3, r4, #4
   1c038:	add	r1, r4, #28
   1c03c:	ldr	r2, [r3, #4]!
   1c040:	mvn	r2, r2
   1c044:	cmp	r1, r3
   1c048:	str	r2, [r3]
   1c04c:	bne	1c03c <__assert_fail@plt+0xaae4>
   1c050:	ldr	r3, [r6, #92]	; 0x5c
   1c054:	cmp	r3, #1
   1c058:	ble	1c084 <__assert_fail@plt+0xab2c>
   1c05c:	ldr	r1, [r6, #60]	; 0x3c
   1c060:	sub	r3, r4, #4
   1c064:	add	ip, r4, #28
   1c068:	sub	r1, r1, #4
   1c06c:	ldr	r2, [r3, #4]!
   1c070:	ldr	r0, [r1, #4]!
   1c074:	cmp	ip, r3
   1c078:	and	r2, r2, r0
   1c07c:	str	r2, [r3]
   1c080:	bne	1c06c <__assert_fail@plt+0xab14>
   1c084:	add	fp, sp, #24
   1c088:	mov	r5, #0
   1c08c:	mov	ip, #3
   1c090:	add	r9, r6, #56	; 0x38
   1c094:	add	sl, r6, #64	; 0x40
   1c098:	mov	r3, r5
   1c09c:	str	fp, [sp]
   1c0a0:	mov	r2, r5
   1c0a4:	mov	r0, r9
   1c0a8:	strd	r4, [sp, #24]
   1c0ac:	mov	r1, sl
   1c0b0:	strb	ip, [sp, #28]
   1c0b4:	bl	18520 <__assert_fail@plt+0x6fc8>
   1c0b8:	subs	r8, r0, #0
   1c0bc:	beq	1c160 <__assert_fail@plt+0xac08>
   1c0c0:	ldr	r3, [r6, #92]	; 0x5c
   1c0c4:	cmp	r3, #1
   1c0c8:	ble	1c154 <__assert_fail@plt+0xabfc>
   1c0cc:	ldrb	ip, [r6, #88]	; 0x58
   1c0d0:	mov	r0, #6
   1c0d4:	mov	r3, r5
   1c0d8:	mov	r2, r5
   1c0dc:	mov	r1, sl
   1c0e0:	str	fp, [sp]
   1c0e4:	str	r7, [sp, #24]
   1c0e8:	strb	r0, [sp, #28]
   1c0ec:	mov	r0, r9
   1c0f0:	orr	ip, ip, #2
   1c0f4:	strb	ip, [r6, #88]	; 0x58
   1c0f8:	bl	18520 <__assert_fail@plt+0x6fc8>
   1c0fc:	subs	r3, r0, #0
   1c100:	beq	1c160 <__assert_fail@plt+0xac08>
   1c104:	add	ip, sp, #32
   1c108:	mov	r4, #0
   1c10c:	mov	r5, #0
   1c110:	mov	r2, r8
   1c114:	str	ip, [sp]
   1c118:	mov	ip, #10
   1c11c:	mov	r1, sl
   1c120:	mov	r0, r9
   1c124:	strd	r4, [sp, #32]
   1c128:	strb	ip, [sp, #36]	; 0x24
   1c12c:	bl	18520 <__assert_fail@plt+0x6fc8>
   1c130:	mov	r8, r0
   1c134:	mov	r0, r8
   1c138:	add	sp, sp, #44	; 0x2c
   1c13c:	ldrd	r4, [sp]
   1c140:	ldrd	r6, [sp, #8]
   1c144:	ldrd	r8, [sp, #16]
   1c148:	ldrd	sl, [sp, #24]
   1c14c:	add	sp, sp, #32
   1c150:	pop	{pc}		; (ldr pc, [sp], #4)
   1c154:	mov	r0, r7
   1c158:	bl	17188 <__assert_fail@plt+0x5c30>
   1c15c:	b	1c134 <__assert_fail@plt+0xabdc>
   1c160:	mov	r0, r4
   1c164:	mov	r8, #0
   1c168:	bl	13b9c <__assert_fail@plt+0x2644>
   1c16c:	mov	r0, r7
   1c170:	bl	17188 <__assert_fail@plt+0x5c30>
   1c174:	ldr	r2, [sp, #84]	; 0x54
   1c178:	mov	r3, #12
   1c17c:	str	r3, [r2]
   1c180:	b	1c134 <__assert_fail@plt+0xabdc>
   1c184:	ldr	r2, [sp, #84]	; 0x54
   1c188:	mov	r3, #12
   1c18c:	mov	r8, r4
   1c190:	str	r3, [r2]
   1c194:	b	1c134 <__assert_fail@plt+0xabdc>
   1c198:	mov	r0, r4
   1c19c:	mov	r8, r7
   1c1a0:	bl	13b9c <__assert_fail@plt+0x2644>
   1c1a4:	ldr	r2, [sp, #84]	; 0x54
   1c1a8:	mov	r3, #12
   1c1ac:	str	r3, [r2]
   1c1b0:	b	1c134 <__assert_fail@plt+0xabdc>
   1c1b4:	mov	r0, r4
   1c1b8:	mov	r8, r9
   1c1bc:	bl	13b9c <__assert_fail@plt+0x2644>
   1c1c0:	mov	r0, r7
   1c1c4:	bl	17188 <__assert_fail@plt+0x5c30>
   1c1c8:	ldr	r3, [sp, #84]	; 0x54
   1c1cc:	str	sl, [r3]
   1c1d0:	b	1c134 <__assert_fail@plt+0xabdc>
   1c1d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c1d8:	strd	r6, [sp, #8]
   1c1dc:	ldr	r6, [r0]
   1c1e0:	strd	r8, [sp, #16]
   1c1e4:	strd	sl, [sp, #24]
   1c1e8:	str	lr, [sp, #32]
   1c1ec:	sub	sp, sp, #316	; 0x13c
   1c1f0:	ldr	ip, [r6, #92]	; 0x5c
   1c1f4:	cmp	ip, #1
   1c1f8:	ldr	ip, [r1]
   1c1fc:	movne	r5, #0
   1c200:	ldreq	r5, [r0, #12]
   1c204:	ubfxeq	r5, r5, #22, #1
   1c208:	cmp	ip, #0
   1c20c:	ble	1c2f8 <__assert_fail@plt+0xada0>
   1c210:	mov	r4, r3
   1c214:	mov	r3, #255	; 0xff
   1c218:	movt	r3, #32
   1c21c:	mov	r8, #0
   1c220:	str	r5, [sp, #4]
   1c224:	str	r2, [sp, #8]
   1c228:	str	r4, [sp, #12]
   1c22c:	str	r3, [sp, #32]
   1c230:	mov	r3, #1
   1c234:	movt	r3, #32
   1c238:	str	r1, [sp, #20]
   1c23c:	str	r0, [sp, #24]
   1c240:	str	r3, [sp, #36]	; 0x24
   1c244:	b	1c278 <__assert_fail@plt+0xad20>
   1c248:	cmp	r7, #3
   1c24c:	beq	1c4a8 <__assert_fail@plt+0xaf50>
   1c250:	cmp	r7, #6
   1c254:	beq	1c314 <__assert_fail@plt+0xadbc>
   1c258:	and	r3, r7, #253	; 0xfd
   1c25c:	cmp	r3, #5
   1c260:	beq	1c660 <__assert_fail@plt+0xb108>
   1c264:	cmp	r7, #2
   1c268:	beq	1c680 <__assert_fail@plt+0xb128>
   1c26c:	add	r8, r8, #1
   1c270:	cmp	r8, ip
   1c274:	bge	1c2f8 <__assert_fail@plt+0xada0>
   1c278:	ldr	r3, [sp, #8]
   1c27c:	ldr	r2, [r6]
   1c280:	ldr	r3, [r3]
   1c284:	ldr	r9, [r3, r8, lsl #2]
   1c288:	lsl	r3, r9, #3
   1c28c:	str	r3, [sp]
   1c290:	add	r3, r2, r3
   1c294:	ldrb	r7, [r3, #4]
   1c298:	cmp	r7, #1
   1c29c:	bne	1c248 <__assert_fail@plt+0xacf0>
   1c2a0:	ldr	r3, [sp, #4]
   1c2a4:	ldrb	fp, [r2, r9, lsl #3]
   1c2a8:	ldr	r4, [sp, #12]
   1c2ac:	cmp	r3, #0
   1c2b0:	strb	r7, [r4, fp]
   1c2b4:	beq	1c2c8 <__assert_fail@plt+0xad70>
   1c2b8:	bl	113cc <__ctype_tolower_loc@plt>
   1c2bc:	ldr	r3, [r0]
   1c2c0:	ldr	r3, [r3, fp, lsl #2]
   1c2c4:	strb	r7, [r4, r3]
   1c2c8:	ldr	r3, [sp, #24]
   1c2cc:	ldr	r3, [r3, #12]
   1c2d0:	tst	r3, #4194304	; 0x400000
   1c2d4:	beq	1c2e4 <__assert_fail@plt+0xad8c>
   1c2d8:	ldr	r3, [r6, #92]	; 0x5c
   1c2dc:	cmp	r3, #1
   1c2e0:	bgt	1c560 <__assert_fail@plt+0xb008>
   1c2e4:	ldr	r3, [sp, #20]
   1c2e8:	add	r8, r8, #1
   1c2ec:	ldr	ip, [r3]
   1c2f0:	cmp	r8, ip
   1c2f4:	blt	1c278 <__assert_fail@plt+0xad20>
   1c2f8:	add	sp, sp, #316	; 0x13c
   1c2fc:	ldrd	r4, [sp]
   1c300:	ldrd	r6, [sp, #8]
   1c304:	ldrd	r8, [sp, #16]
   1c308:	ldrd	sl, [sp, #24]
   1c30c:	add	sp, sp, #32
   1c310:	pop	{pc}		; (ldr pc, [sp], #4)
   1c314:	ldr	r2, [r6, #92]	; 0x5c
   1c318:	ldr	fp, [r3]
   1c31c:	cmp	r2, #1
   1c320:	ble	1c348 <__assert_fail@plt+0xadf0>
   1c324:	ldr	r2, [fp, #36]	; 0x24
   1c328:	cmp	r2, #0
   1c32c:	bne	1c444 <__assert_fail@plt+0xaeec>
   1c330:	ldrb	r2, [fp, #16]
   1c334:	tst	r2, #1
   1c338:	bne	1c444 <__assert_fail@plt+0xaeec>
   1c33c:	ldr	r2, [fp, #32]
   1c340:	cmp	r2, #0
   1c344:	bne	1c444 <__assert_fail@plt+0xaeec>
   1c348:	ldr	r2, [fp, #20]
   1c34c:	cmp	r2, #0
   1c350:	ble	1c26c <__assert_fail@plt+0xad14>
   1c354:	mov	r5, fp
   1c358:	mov	r7, #0
   1c35c:	str	r8, [sp, #16]
   1c360:	add	r9, sp, #56	; 0x38
   1c364:	add	sl, sp, #48	; 0x30
   1c368:	ldr	r4, [sp, #12]
   1c36c:	ldr	fp, [sp, #24]
   1c370:	b	1c380 <__assert_fail@plt+0xae28>
   1c374:	ldr	r2, [r5, #20]
   1c378:	cmp	r7, r2
   1c37c:	bge	1c438 <__assert_fail@plt+0xaee0>
   1c380:	mov	r2, #0
   1c384:	mov	r3, #0
   1c388:	lsl	r8, r7, #2
   1c38c:	mov	r0, r9
   1c390:	strd	r2, [sl]
   1c394:	mov	r2, sl
   1c398:	ldr	r1, [r5]
   1c39c:	ldr	r1, [r1, r7, lsl #2]
   1c3a0:	add	r7, r7, #1
   1c3a4:	bl	111e0 <wcrtomb@plt>
   1c3a8:	cmn	r0, #1
   1c3ac:	beq	1c3e4 <__assert_fail@plt+0xae8c>
   1c3b0:	ldr	r3, [sp, #4]
   1c3b4:	ldrb	r2, [sp, #56]	; 0x38
   1c3b8:	cmp	r3, #0
   1c3bc:	mov	r3, #1
   1c3c0:	str	r2, [sp]
   1c3c4:	strb	r3, [r4, r2]
   1c3c8:	beq	1c3e4 <__assert_fail@plt+0xae8c>
   1c3cc:	bl	113cc <__ctype_tolower_loc@plt>
   1c3d0:	ldr	r1, [r0]
   1c3d4:	mov	r3, #1
   1c3d8:	ldr	r2, [sp]
   1c3dc:	ldr	r2, [r1, r2, lsl #2]
   1c3e0:	strb	r3, [r4, r2]
   1c3e4:	ldr	r2, [fp, #12]
   1c3e8:	tst	r2, #4194304	; 0x400000
   1c3ec:	beq	1c374 <__assert_fail@plt+0xae1c>
   1c3f0:	ldr	r2, [r6, #92]	; 0x5c
   1c3f4:	cmp	r2, #1
   1c3f8:	ble	1c374 <__assert_fail@plt+0xae1c>
   1c3fc:	ldr	r2, [r5]
   1c400:	ldr	r0, [r2, r8]
   1c404:	bl	11288 <towlower@plt>
   1c408:	mov	r1, r0
   1c40c:	mov	r2, sl
   1c410:	mov	r0, r9
   1c414:	bl	111e0 <wcrtomb@plt>
   1c418:	cmn	r0, #1
   1c41c:	beq	1c374 <__assert_fail@plt+0xae1c>
   1c420:	ldrb	r2, [sp, #56]	; 0x38
   1c424:	mov	r3, #1
   1c428:	strb	r3, [r4, r2]
   1c42c:	ldr	r2, [r5, #20]
   1c430:	cmp	r7, r2
   1c434:	blt	1c380 <__assert_fail@plt+0xae28>
   1c438:	str	r4, [sp, #12]
   1c43c:	ldr	r8, [sp, #16]
   1c440:	b	1c2e4 <__assert_fail@plt+0xad8c>
   1c444:	ldr	r5, [sp, #4]
   1c448:	mov	r3, #0
   1c44c:	add	r9, sp, #56	; 0x38
   1c450:	add	sl, sp, #48	; 0x30
   1c454:	mov	r7, #1
   1c458:	ldr	r4, [sp, #12]
   1c45c:	strb	r3, [sp, #48]	; 0x30
   1c460:	mov	r0, #0
   1c464:	mov	r1, #0
   1c468:	mov	r3, r9
   1c46c:	mov	r2, #1
   1c470:	strd	r0, [r9]
   1c474:	mov	r1, sl
   1c478:	bl	265ac <__assert_fail@plt+0x15054>
   1c47c:	ldrb	r3, [sp, #48]	; 0x30
   1c480:	cmn	r0, #2
   1c484:	strbeq	r7, [r4, r3]
   1c488:	add	r3, r3, #1
   1c48c:	uxtb	r3, r3
   1c490:	cmp	r3, #0
   1c494:	strb	r3, [sp, #48]	; 0x30
   1c498:	bne	1c460 <__assert_fail@plt+0xaf08>
   1c49c:	str	r5, [sp, #4]
   1c4a0:	str	r4, [sp, #12]
   1c4a4:	b	1c2e4 <__assert_fail@plt+0xad8c>
   1c4a8:	ldr	r4, [sp, #12]
   1c4ac:	mov	sl, #0
   1c4b0:	mov	r9, #32
   1c4b4:	str	r8, [sp, #28]
   1c4b8:	mov	fp, #1
   1c4bc:	mov	r5, sl
   1c4c0:	ldr	r8, [sp, #4]
   1c4c4:	str	r6, [sp, #16]
   1c4c8:	ldr	r3, [sp]
   1c4cc:	sub	r7, r9, #32
   1c4d0:	ldr	r2, [r2, r3]
   1c4d4:	ldr	r6, [r2, sl]
   1c4d8:	add	r3, r5, r7
   1c4dc:	add	r2, r4, r7
   1c4e0:	lsr	r3, r6, r3
   1c4e4:	tst	r3, #1
   1c4e8:	beq	1c518 <__assert_fail@plt+0xafc0>
   1c4ec:	cmp	r8, #0
   1c4f0:	add	r3, r7, #128	; 0x80
   1c4f4:	strb	fp, [r4, r7]
   1c4f8:	beq	1c518 <__assert_fail@plt+0xafc0>
   1c4fc:	cmp	r3, #384	; 0x180
   1c500:	bcs	1c514 <__assert_fail@plt+0xafbc>
   1c504:	bl	113cc <__ctype_tolower_loc@plt>
   1c508:	ldr	r3, [r0]
   1c50c:	ldr	r2, [r3, r7, lsl #2]
   1c510:	add	r2, r4, r2
   1c514:	strb	fp, [r2]
   1c518:	add	r7, r7, #1
   1c51c:	cmp	r9, r7
   1c520:	bne	1c4d8 <__assert_fail@plt+0xaf80>
   1c524:	add	r9, r9, #32
   1c528:	add	sl, sl, #4
   1c52c:	cmp	r9, #288	; 0x120
   1c530:	sub	r5, r5, #32
   1c534:	beq	1c544 <__assert_fail@plt+0xafec>
   1c538:	ldr	r3, [sp, #16]
   1c53c:	ldr	r2, [r3]
   1c540:	b	1c4c8 <__assert_fail@plt+0xaf70>
   1c544:	str	r8, [sp, #4]
   1c548:	ldr	r3, [sp, #20]
   1c54c:	str	r4, [sp, #12]
   1c550:	ldr	r6, [sp, #16]
   1c554:	ldr	r8, [sp, #28]
   1c558:	ldr	ip, [r3]
   1c55c:	b	1c26c <__assert_fail@plt+0xad14>
   1c560:	ldr	r3, [r6]
   1c564:	add	r2, r9, #1
   1c568:	ldrb	r1, [r3, r9, lsl #3]
   1c56c:	strb	r1, [sp, #56]	; 0x38
   1c570:	ldr	r1, [r6, #8]
   1c574:	cmp	r2, r1
   1c578:	bcs	1c6a8 <__assert_fail@plt+0xb150>
   1c57c:	ldr	r1, [sp]
   1c580:	ldr	r0, [sp, #32]
   1c584:	add	sl, r1, #8
   1c588:	add	r3, r3, sl
   1c58c:	ldr	r1, [r3, #4]
   1c590:	and	r1, r1, r0
   1c594:	ldr	r0, [sp, #36]	; 0x24
   1c598:	cmp	r1, r0
   1c59c:	bne	1c6a8 <__assert_fail@plt+0xb150>
   1c5a0:	add	r7, sp, #57	; 0x39
   1c5a4:	ldr	r5, [sp, #4]
   1c5a8:	ldr	r4, [sp, #12]
   1c5ac:	ldr	r0, [sp, #32]
   1c5b0:	ldr	ip, [sp, #36]	; 0x24
   1c5b4:	b	1c5d0 <__assert_fail@plt+0xb078>
   1c5b8:	ldr	r3, [r6]
   1c5bc:	add	r3, r3, r2, lsl #3
   1c5c0:	ldr	r1, [r3, #4]
   1c5c4:	and	r1, r1, r0
   1c5c8:	cmp	r1, ip
   1c5cc:	bne	1c5e8 <__assert_fail@plt+0xb090>
   1c5d0:	ldrb	r3, [r3]
   1c5d4:	add	r2, r2, #1
   1c5d8:	strb	r3, [r7], #1
   1c5dc:	ldr	r3, [r6, #8]
   1c5e0:	cmp	r3, r2
   1c5e4:	bhi	1c5b8 <__assert_fail@plt+0xb060>
   1c5e8:	add	r9, sp, #56	; 0x38
   1c5ec:	str	r5, [sp, #4]
   1c5f0:	sub	r7, r7, r9
   1c5f4:	str	r4, [sp, #12]
   1c5f8:	add	sl, sp, #48	; 0x30
   1c5fc:	mov	r4, #0
   1c600:	mov	r5, #0
   1c604:	mov	r2, r7
   1c608:	mov	r3, sl
   1c60c:	mov	r1, r9
   1c610:	add	r0, sp, #44	; 0x2c
   1c614:	strd	r4, [sl]
   1c618:	bl	265ac <__assert_fail@plt+0x15054>
   1c61c:	cmp	r0, r7
   1c620:	bne	1c2e4 <__assert_fail@plt+0xad8c>
   1c624:	ldr	r0, [sp, #44]	; 0x2c
   1c628:	bl	11288 <towlower@plt>
   1c62c:	mov	r1, r0
   1c630:	mov	r2, sl
   1c634:	mov	r0, r9
   1c638:	bl	111e0 <wcrtomb@plt>
   1c63c:	cmn	r0, #1
   1c640:	beq	1c2e4 <__assert_fail@plt+0xad8c>
   1c644:	ldrb	r3, [sp, #56]	; 0x38
   1c648:	mov	r2, #1
   1c64c:	ldr	r1, [sp, #12]
   1c650:	strb	r2, [r1, r3]
   1c654:	ldr	r3, [sp, #20]
   1c658:	ldr	ip, [r3]
   1c65c:	b	1c26c <__assert_fail@plt+0xad14>
   1c660:	ldr	r4, [sp, #12]
   1c664:	mov	r2, #256	; 0x100
   1c668:	mov	r1, #1
   1c66c:	mov	r0, r4
   1c670:	bl	1145c <memset@plt>
   1c674:	cmp	r7, #2
   1c678:	bne	1c2f8 <__assert_fail@plt+0xada0>
   1c67c:	b	1c694 <__assert_fail@plt+0xb13c>
   1c680:	ldr	r4, [sp, #12]
   1c684:	mov	r2, #256	; 0x100
   1c688:	mov	r1, #1
   1c68c:	mov	r0, r4
   1c690:	bl	1145c <memset@plt>
   1c694:	ldr	r2, [sp, #24]
   1c698:	ldrb	r3, [r2, #28]
   1c69c:	orr	r3, r3, #1
   1c6a0:	strb	r3, [r2, #28]
   1c6a4:	b	1c2f8 <__assert_fail@plt+0xada0>
   1c6a8:	add	r9, sp, #56	; 0x38
   1c6ac:	b	1c5f8 <__assert_fail@plt+0xb0a0>
   1c6b0:	add	ip, r0, r2, lsl #3
   1c6b4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c6b8:	strd	r6, [sp, #8]
   1c6bc:	str	sl, [sp, #24]
   1c6c0:	ldrb	sl, [ip, #4]
   1c6c4:	strd	r8, [sp, #16]
   1c6c8:	str	lr, [sp, #28]
   1c6cc:	cmp	sl, #7
   1c6d0:	beq	1c83c <__assert_fail@plt+0xb2e4>
   1c6d4:	ldr	ip, [r3, #80]	; 0x50
   1c6d8:	cmp	ip, #1
   1c6dc:	beq	1c724 <__assert_fail@plt+0xb1cc>
   1c6e0:	mov	r9, r1
   1c6e4:	mov	r5, r0
   1c6e8:	ldr	r1, [sp, #32]
   1c6ec:	mov	r0, r3
   1c6f0:	mov	r8, r3
   1c6f4:	mov	r6, r2
   1c6f8:	bl	17d58 <__assert_fail@plt+0x6800>
   1c6fc:	cmp	sl, #5
   1c700:	mov	r7, r0
   1c704:	beq	1c744 <__assert_fail@plt+0xb1ec>
   1c708:	sub	r4, sl, #6
   1c70c:	cmp	r0, #1
   1c710:	clz	r4, r4
   1c714:	lsr	r4, r4, #5
   1c718:	movle	r4, #0
   1c71c:	cmp	r4, #0
   1c720:	bne	1c78c <__assert_fail@plt+0xb234>
   1c724:	mov	r7, #0
   1c728:	mov	r0, r7
   1c72c:	ldrd	r4, [sp]
   1c730:	ldrd	r6, [sp, #8]
   1c734:	ldrd	r8, [sp, #16]
   1c738:	ldr	sl, [sp, #24]
   1c73c:	add	sp, sp, #28
   1c740:	pop	{pc}		; (ldr pc, [sp], #4)
   1c744:	cmp	r0, #1
   1c748:	ble	1c724 <__assert_fail@plt+0xb1cc>
   1c74c:	ldr	r3, [r9]
   1c750:	tst	r3, #64	; 0x40
   1c754:	bne	1c76c <__assert_fail@plt+0xb214>
   1c758:	ldr	r2, [r8, #4]
   1c75c:	ldr	r1, [sp, #32]
   1c760:	ldrb	r2, [r2, r1]
   1c764:	cmp	r2, #10
   1c768:	beq	1c724 <__assert_fail@plt+0xb1cc>
   1c76c:	tst	r3, #128	; 0x80
   1c770:	beq	1c728 <__assert_fail@plt+0xb1d0>
   1c774:	ldr	r3, [r8, #4]
   1c778:	ldr	r2, [sp, #32]
   1c77c:	ldrb	r3, [r3, r2]
   1c780:	cmp	r3, #0
   1c784:	beq	1c724 <__assert_fail@plt+0xb1cc>
   1c788:	b	1c728 <__assert_fail@plt+0xb1d0>
   1c78c:	ldr	r6, [r5, r6, lsl #3]
   1c790:	ldr	r0, [r6, #20]
   1c794:	ldr	ip, [r6, #32]
   1c798:	cmp	ip, #0
   1c79c:	bne	1c7ac <__assert_fail@plt+0xb254>
   1c7a0:	ldr	r3, [r6, #36]	; 0x24
   1c7a4:	orrs	r3, r0, r3
   1c7a8:	beq	1c910 <__assert_fail@plt+0xb3b8>
   1c7ac:	ldr	r3, [r8, #8]
   1c7b0:	cmp	r0, #0
   1c7b4:	ldr	r2, [sp, #32]
   1c7b8:	ldr	r4, [r3, r2, lsl #2]
   1c7bc:	ble	1c7f0 <__assert_fail@plt+0xb298>
   1c7c0:	ldr	r2, [r6]
   1c7c4:	ldr	r3, [r2]
   1c7c8:	cmp	r4, r3
   1c7cc:	beq	1c82c <__assert_fail@plt+0xb2d4>
   1c7d0:	mov	r3, #0
   1c7d4:	b	1c7e4 <__assert_fail@plt+0xb28c>
   1c7d8:	ldr	r1, [r2, #4]!
   1c7dc:	cmp	r4, r1
   1c7e0:	beq	1c82c <__assert_fail@plt+0xb2d4>
   1c7e4:	add	r3, r3, #1
   1c7e8:	cmp	r0, r3
   1c7ec:	bne	1c7d8 <__assert_fail@plt+0xb280>
   1c7f0:	ldr	r3, [r6, #36]	; 0x24
   1c7f4:	cmp	r3, #0
   1c7f8:	ble	1c8d4 <__assert_fail@plt+0xb37c>
   1c7fc:	mov	r5, #0
   1c800:	b	1c810 <__assert_fail@plt+0xb2b8>
   1c804:	ldr	r3, [r6, #36]	; 0x24
   1c808:	cmp	r5, r3
   1c80c:	bge	1c8d0 <__assert_fail@plt+0xb378>
   1c810:	ldr	r3, [r6, #12]
   1c814:	mov	r0, r4
   1c818:	ldr	r1, [r3, r5, lsl #2]
   1c81c:	add	r5, r5, #1
   1c820:	bl	111ec <iswctype@plt>
   1c824:	cmp	r0, #0
   1c828:	beq	1c804 <__assert_fail@plt+0xb2ac>
   1c82c:	ldrb	r3, [r6, #16]
   1c830:	tst	r3, #1
   1c834:	beq	1c728 <__assert_fail@plt+0xb1d0>
   1c838:	b	1c724 <__assert_fail@plt+0xb1cc>
   1c83c:	ldr	r2, [r3, #4]
   1c840:	ldr	r1, [sp, #32]
   1c844:	ldr	r0, [sp, #32]
   1c848:	ldrb	r1, [r2, r1]
   1c84c:	add	r0, r2, r0
   1c850:	cmp	r1, #193	; 0xc1
   1c854:	bls	1c724 <__assert_fail@plt+0xb1cc>
   1c858:	ldr	ip, [sp, #32]
   1c85c:	ldr	r3, [r3, #48]	; 0x30
   1c860:	add	ip, ip, #1
   1c864:	cmp	ip, r3
   1c868:	bge	1c724 <__assert_fail@plt+0xb1cc>
   1c86c:	cmp	r1, #223	; 0xdf
   1c870:	ldrb	ip, [r0, #1]
   1c874:	bls	1c93c <__assert_fail@plt+0xb3e4>
   1c878:	cmp	r1, #239	; 0xef
   1c87c:	bhi	1c920 <__assert_fail@plt+0xb3c8>
   1c880:	cmp	ip, #159	; 0x9f
   1c884:	cmpls	r1, #224	; 0xe0
   1c888:	movne	r7, #3
   1c88c:	beq	1c724 <__assert_fail@plt+0xb1cc>
   1c890:	ldr	r1, [sp, #32]
   1c894:	add	r1, r1, r7
   1c898:	cmp	r3, r1
   1c89c:	blt	1c724 <__assert_fail@plt+0xb1cc>
   1c8a0:	ldr	r3, [sp, #32]
   1c8a4:	sub	r3, r3, #1
   1c8a8:	add	r3, r2, r3
   1c8ac:	add	r3, r3, r7
   1c8b0:	b	1c8bc <__assert_fail@plt+0xb364>
   1c8b4:	cmp	r3, r0
   1c8b8:	beq	1c728 <__assert_fail@plt+0xb1d0>
   1c8bc:	ldrb	r2, [r0, #1]!
   1c8c0:	eor	r2, r2, #128	; 0x80
   1c8c4:	cmp	r2, #63	; 0x3f
   1c8c8:	bls	1c8b4 <__assert_fail@plt+0xb35c>
   1c8cc:	b	1c724 <__assert_fail@plt+0xb1cc>
   1c8d0:	ldr	ip, [r6, #32]
   1c8d4:	cmp	ip, #0
   1c8d8:	ble	1c910 <__assert_fail@plt+0xb3b8>
   1c8dc:	ldr	r2, [r6, #4]
   1c8e0:	mov	r3, #0
   1c8e4:	sub	r2, r2, #4
   1c8e8:	ldr	r1, [r2, #4]!
   1c8ec:	cmp	r4, r1
   1c8f0:	bcc	1c904 <__assert_fail@plt+0xb3ac>
   1c8f4:	ldr	r1, [r6, #8]
   1c8f8:	ldr	r1, [r1, r3, lsl #2]
   1c8fc:	cmp	r4, r1
   1c900:	bls	1c82c <__assert_fail@plt+0xb2d4>
   1c904:	add	r3, r3, #1
   1c908:	cmp	r3, ip
   1c90c:	bne	1c8e8 <__assert_fail@plt+0xb390>
   1c910:	ldrb	r3, [r6, #16]
   1c914:	tst	r3, #1
   1c918:	bne	1c728 <__assert_fail@plt+0xb1d0>
   1c91c:	b	1c724 <__assert_fail@plt+0xb1cc>
   1c920:	cmp	r1, #247	; 0xf7
   1c924:	bhi	1c950 <__assert_fail@plt+0xb3f8>
   1c928:	cmp	ip, #143	; 0x8f
   1c92c:	cmpls	r1, #240	; 0xf0
   1c930:	movne	r7, #4
   1c934:	bne	1c890 <__assert_fail@plt+0xb338>
   1c938:	b	1c724 <__assert_fail@plt+0xb1cc>
   1c93c:	eor	ip, ip, #128	; 0x80
   1c940:	cmp	ip, #63	; 0x3f
   1c944:	movls	r7, #2
   1c948:	bls	1c728 <__assert_fail@plt+0xb1d0>
   1c94c:	b	1c724 <__assert_fail@plt+0xb1cc>
   1c950:	cmp	r1, #251	; 0xfb
   1c954:	bhi	1c96c <__assert_fail@plt+0xb414>
   1c958:	cmp	ip, #135	; 0x87
   1c95c:	cmpls	r1, #248	; 0xf8
   1c960:	movne	r7, #5
   1c964:	bne	1c890 <__assert_fail@plt+0xb338>
   1c968:	b	1c724 <__assert_fail@plt+0xb1cc>
   1c96c:	cmp	r1, #253	; 0xfd
   1c970:	bhi	1c724 <__assert_fail@plt+0xb1cc>
   1c974:	cmp	ip, #131	; 0x83
   1c978:	cmpls	r1, #252	; 0xfc
   1c97c:	beq	1c724 <__assert_fail@plt+0xb1cc>
   1c980:	mov	r7, #6
   1c984:	b	1c890 <__assert_fail@plt+0xb338>
   1c988:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c98c:	mov	r5, r0
   1c990:	ldr	r0, [r0, #84]	; 0x54
   1c994:	ldr	r4, [r1, #4]
   1c998:	strd	r6, [sp, #8]
   1c99c:	mov	r7, r2
   1c9a0:	mov	r6, #0
   1c9a4:	strd	sl, [sp, #24]
   1c9a8:	mov	sl, r3
   1c9ac:	ldr	r3, [r0]
   1c9b0:	strd	r8, [sp, #16]
   1c9b4:	str	lr, [sp, #32]
   1c9b8:	sub	sp, sp, #84	; 0x54
   1c9bc:	ldr	r2, [r5, #120]	; 0x78
   1c9c0:	str	r0, [sp, #20]
   1c9c4:	str	r1, [sp, #36]	; 0x24
   1c9c8:	ldr	r1, [sp, #124]	; 0x7c
   1c9cc:	ldr	r3, [r3, r7, lsl #3]
   1c9d0:	add	r2, r1, r2
   1c9d4:	cmp	r2, r4
   1c9d8:	str	r3, [sp, #28]
   1c9dc:	str	r6, [sp, #48]	; 0x30
   1c9e0:	bge	1cecc <__assert_fail@plt+0xb974>
   1c9e4:	ldr	r3, [sp, #36]	; 0x24
   1c9e8:	ldr	r2, [r5, #88]	; 0x58
   1c9ec:	ldr	r4, [r3]
   1c9f0:	ldr	r8, [r3, #8]
   1c9f4:	ldr	r3, [r5, #40]	; 0x28
   1c9f8:	cmp	r4, #0
   1c9fc:	str	r3, [sp, #44]	; 0x2c
   1ca00:	ldr	r3, [r5, #100]	; 0x64
   1ca04:	str	r3, [sp, #40]	; 0x28
   1ca08:	beq	1ce58 <__assert_fail@plt+0xb900>
   1ca0c:	sub	r1, r4, #1
   1ca10:	mov	r0, r5
   1ca14:	str	r4, [r5, #40]	; 0x28
   1ca18:	str	r8, [r5, #100]	; 0x64
   1ca1c:	bl	1a9f4 <__assert_fail@plt+0x949c>
   1ca20:	cmp	r4, sl
   1ca24:	mov	r6, r0
   1ca28:	beq	1ce70 <__assert_fail@plt+0xb918>
   1ca2c:	ldr	sl, [r8, r4, lsl #2]
   1ca30:	cmp	sl, #0
   1ca34:	beq	1cf20 <__assert_fail@plt+0xb9c8>
   1ca38:	ldrb	r3, [sl, #52]	; 0x34
   1ca3c:	ands	r3, r3, #64	; 0x40
   1ca40:	bne	1cd50 <__assert_fail@plt+0xb7f8>
   1ca44:	add	r2, sp, #56	; 0x38
   1ca48:	str	r2, [sp, #8]
   1ca4c:	str	r3, [sp, #56]	; 0x38
   1ca50:	str	r3, [sp, #60]	; 0x3c
   1ca54:	str	r3, [sp, #64]	; 0x40
   1ca58:	ldr	r3, [sp, #124]	; 0x7c
   1ca5c:	cmp	r4, r3
   1ca60:	bge	1cce8 <__assert_fail@plt+0xb790>
   1ca64:	ldr	r3, [r5, #120]	; 0x78
   1ca68:	cmp	r3, #0
   1ca6c:	blt	1cce8 <__assert_fail@plt+0xb790>
   1ca70:	ldr	r3, [r5, #100]	; 0x64
   1ca74:	mov	r2, #0
   1ca78:	add	fp, r4, #1
   1ca7c:	str	r2, [sp, #12]
   1ca80:	ldr	r1, [r3, fp, lsl #2]
   1ca84:	lsl	r3, fp, #2
   1ca88:	sub	r6, fp, #1
   1ca8c:	str	r3, [sp, #16]
   1ca90:	mov	r3, #0
   1ca94:	cmp	r1, r3
   1ca98:	str	r3, [sp, #60]	; 0x3c
   1ca9c:	beq	1cde8 <__assert_fail@plt+0xb890>
   1caa0:	add	r1, r1, #4
   1caa4:	ldr	r0, [sp, #8]
   1caa8:	bl	19678 <__assert_fail@plt+0x8120>
   1caac:	cmp	r0, #0
   1cab0:	str	r0, [sp, #48]	; 0x30
   1cab4:	bne	1ce08 <__assert_fail@plt+0xb8b0>
   1cab8:	cmp	sl, #0
   1cabc:	beq	1cc30 <__assert_fail@plt+0xb6d8>
   1cac0:	ldr	r3, [sl, #20]
   1cac4:	mov	r2, #0
   1cac8:	str	r2, [sp, #52]	; 0x34
   1cacc:	str	r2, [sp, #68]	; 0x44
   1cad0:	str	r2, [sp, #72]	; 0x48
   1cad4:	cmp	r3, r2
   1cad8:	str	r2, [sp, #76]	; 0x4c
   1cadc:	ldr	r7, [r5, #84]	; 0x54
   1cae0:	ble	1cf70 <__assert_fail@plt+0xba18>
   1cae4:	mov	r2, r7
   1cae8:	mov	r8, #0
   1caec:	str	fp, [sp, #32]
   1caf0:	ldr	r3, [sl, #24]
   1caf4:	ldr	r0, [r2], #128	; 0x80
   1caf8:	ldr	r4, [r3]
   1cafc:	str	r2, [sp, #24]
   1cb00:	lsl	r9, r4, #3
   1cb04:	add	r3, r0, r9
   1cb08:	b	1cb64 <__assert_fail@plt+0xb60c>
   1cb0c:	add	r1, r0, r9
   1cb10:	mov	r2, r6
   1cb14:	mov	r0, r5
   1cb18:	bl	1ab0c <__assert_fail@plt+0x95b4>
   1cb1c:	cmp	r0, #0
   1cb20:	beq	1cb40 <__assert_fail@plt+0xb5e8>
   1cb24:	lsl	fp, r4, #2
   1cb28:	ldr	r3, [r7, #12]
   1cb2c:	ldr	r0, [sp, #8]
   1cb30:	ldr	r1, [r3, fp]
   1cb34:	bl	177e0 <__assert_fail@plt+0x6288>
   1cb38:	cmp	r0, #0
   1cb3c:	beq	1cdf8 <__assert_fail@plt+0xb8a0>
   1cb40:	ldr	r3, [sl, #20]
   1cb44:	add	r8, r8, #1
   1cb48:	cmp	r8, r3
   1cb4c:	bge	1ce18 <__assert_fail@plt+0xb8c0>
   1cb50:	ldr	r3, [sl, #24]
   1cb54:	ldr	r0, [r7]
   1cb58:	ldr	r4, [r3, r8, lsl #2]
   1cb5c:	lsl	r9, r4, #3
   1cb60:	add	r3, r0, r9
   1cb64:	ldrb	r3, [r3, #6]
   1cb68:	tst	r3, #16
   1cb6c:	beq	1cb0c <__assert_fail@plt+0xb5b4>
   1cb70:	mov	r3, r5
   1cb74:	mov	r2, r4
   1cb78:	str	r6, [sp]
   1cb7c:	ldr	r1, [sp, #24]
   1cb80:	bl	1c6b0 <__assert_fail@plt+0xb158>
   1cb84:	cmp	r0, #1
   1cb88:	ble	1cdd8 <__assert_fail@plt+0xb880>
   1cb8c:	ldr	r2, [r5, #100]	; 0x64
   1cb90:	add	r9, r0, r6
   1cb94:	lsl	fp, r4, #2
   1cb98:	ldr	r3, [r7, #12]
   1cb9c:	ldr	r1, [r2, r9, lsl #2]
   1cba0:	ldr	r4, [r3, r4, lsl #2]
   1cba4:	mov	r3, #0
   1cba8:	str	r3, [sp, #72]	; 0x48
   1cbac:	cmp	r1, r3
   1cbb0:	beq	1cbcc <__assert_fail@plt+0xb674>
   1cbb4:	add	r1, r1, #4
   1cbb8:	add	r0, sp, #68	; 0x44
   1cbbc:	bl	19678 <__assert_fail@plt+0x8120>
   1cbc0:	cmp	r0, #0
   1cbc4:	str	r0, [sp, #52]	; 0x34
   1cbc8:	bne	1cc14 <__assert_fail@plt+0xb6bc>
   1cbcc:	mov	r1, r4
   1cbd0:	add	r0, sp, #68	; 0x44
   1cbd4:	bl	177e0 <__assert_fail@plt+0x6288>
   1cbd8:	cmp	r0, #0
   1cbdc:	beq	1cdf8 <__assert_fail@plt+0xb8a0>
   1cbe0:	add	r2, sp, #68	; 0x44
   1cbe4:	mov	r1, r7
   1cbe8:	ldr	r4, [r5, #100]	; 0x64
   1cbec:	add	r0, sp, #52	; 0x34
   1cbf0:	bl	18eb8 <__assert_fail@plt+0x7960>
   1cbf4:	ldr	r3, [r5, #100]	; 0x64
   1cbf8:	str	r0, [r4, r9, lsl #2]
   1cbfc:	ldr	r3, [r3, r9, lsl #2]
   1cc00:	cmp	r3, #0
   1cc04:	bne	1cb28 <__assert_fail@plt+0xb5d0>
   1cc08:	ldr	r3, [sp, #52]	; 0x34
   1cc0c:	cmp	r3, #0
   1cc10:	beq	1cb28 <__assert_fail@plt+0xb5d0>
   1cc14:	ldr	fp, [sp, #32]
   1cc18:	ldr	r0, [sp, #76]	; 0x4c
   1cc1c:	bl	13b9c <__assert_fail@plt+0x2644>
   1cc20:	ldr	r3, [sp, #52]	; 0x34
   1cc24:	cmp	r3, #0
   1cc28:	str	r3, [sp, #48]	; 0x30
   1cc2c:	bne	1ce08 <__assert_fail@plt+0xb8b0>
   1cc30:	ldr	r3, [sp, #60]	; 0x3c
   1cc34:	mov	r4, fp
   1cc38:	cmp	r3, #0
   1cc3c:	beq	1cc88 <__assert_fail@plt+0xb730>
   1cc40:	ldr	r1, [sp, #8]
   1cc44:	ldr	r0, [sp, #20]
   1cc48:	ldr	r2, [sp, #28]
   1cc4c:	ldr	r3, [sp, #128]	; 0x80
   1cc50:	bl	19a74 <__assert_fail@plt+0x851c>
   1cc54:	cmp	r0, #0
   1cc58:	str	r0, [sp, #48]	; 0x30
   1cc5c:	bne	1ce08 <__assert_fail@plt+0xb8b0>
   1cc60:	mov	r2, fp
   1cc64:	mov	r0, r5
   1cc68:	ldr	r3, [sp, #28]
   1cc6c:	ldr	r1, [sp, #128]	; 0x80
   1cc70:	str	r1, [sp]
   1cc74:	ldr	r1, [sp, #8]
   1cc78:	bl	19bc4 <__assert_fail@plt+0x866c>
   1cc7c:	cmp	r0, #0
   1cc80:	str	r0, [sp, #48]	; 0x30
   1cc84:	bne	1ce08 <__assert_fail@plt+0xb8b0>
   1cc88:	mov	r1, r6
   1cc8c:	mov	r0, r5
   1cc90:	ldr	r2, [r5, #88]	; 0x58
   1cc94:	bl	1a9f4 <__assert_fail@plt+0x949c>
   1cc98:	mov	r3, r0
   1cc9c:	add	r0, sp, #48	; 0x30
   1cca0:	ldr	r2, [sp, #8]
   1cca4:	ldr	r1, [sp, #20]
   1cca8:	bl	18bd0 <__assert_fail@plt+0x7678>
   1ccac:	subs	sl, r0, #0
   1ccb0:	beq	1ce30 <__assert_fail@plt+0xb8d8>
   1ccb4:	mov	r2, #0
   1ccb8:	ldr	r3, [r5, #100]	; 0x64
   1ccbc:	str	r2, [sp, #12]
   1ccc0:	ldr	r2, [sp, #16]
   1ccc4:	str	sl, [r3, r2]
   1ccc8:	ldr	r2, [sp, #124]	; 0x7c
   1cccc:	cmp	r2, fp
   1ccd0:	ble	1cce8 <__assert_fail@plt+0xb790>
   1ccd4:	ldr	r1, [sp, #12]
   1ccd8:	add	fp, fp, #1
   1ccdc:	ldr	r2, [r5, #120]	; 0x78
   1cce0:	cmp	r2, r1
   1cce4:	bge	1ca80 <__assert_fail@plt+0xb528>
   1cce8:	ldr	r0, [sp, #64]	; 0x40
   1ccec:	bl	13b9c <__assert_fail@plt+0x2644>
   1ccf0:	ldr	r3, [r5, #100]	; 0x64
   1ccf4:	ldr	r2, [sp, #124]	; 0x7c
   1ccf8:	ldr	r3, [r3, r2, lsl #2]
   1ccfc:	cmp	r3, #0
   1cd00:	beq	1cf50 <__assert_fail@plt+0xb9f8>
   1cd04:	ldr	r2, [sp, #36]	; 0x24
   1cd08:	add	r1, r3, #12
   1cd0c:	ldr	r0, [sp, #44]	; 0x2c
   1cd10:	str	r4, [r2]
   1cd14:	ldr	r2, [sp, #120]	; 0x78
   1cd18:	str	r0, [r5, #40]	; 0x28
   1cd1c:	ldr	r0, [sp, #40]	; 0x28
   1cd20:	str	r0, [r5, #100]	; 0x64
   1cd24:	ldr	r0, [r3, #8]
   1cd28:	bl	17db4 <__assert_fail@plt+0x685c>
   1cd2c:	clz	r0, r0
   1cd30:	lsr	r0, r0, #5
   1cd34:	add	sp, sp, #84	; 0x54
   1cd38:	ldrd	r4, [sp]
   1cd3c:	ldrd	r6, [sp, #8]
   1cd40:	ldrd	r8, [sp, #16]
   1cd44:	ldrd	sl, [sp, #24]
   1cd48:	add	sp, sp, #32
   1cd4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cd50:	add	r3, sp, #56	; 0x38
   1cd54:	add	r1, sl, #4
   1cd58:	mov	r0, r3
   1cd5c:	str	r3, [sp, #8]
   1cd60:	bl	189dc <__assert_fail@plt+0x7484>
   1cd64:	cmp	r0, #0
   1cd68:	str	r0, [sp, #48]	; 0x30
   1cd6c:	bne	1cd34 <__assert_fail@plt+0xb7dc>
   1cd70:	ldrb	r3, [sl, #52]	; 0x34
   1cd74:	tst	r3, #64	; 0x40
   1cd78:	beq	1ca58 <__assert_fail@plt+0xb500>
   1cd7c:	ldr	r3, [sp, #60]	; 0x3c
   1cd80:	cmp	r3, #0
   1cd84:	beq	1cdb0 <__assert_fail@plt+0xb858>
   1cd88:	mov	r2, r4
   1cd8c:	mov	r0, r5
   1cd90:	ldr	r3, [sp, #28]
   1cd94:	ldr	r1, [sp, #128]	; 0x80
   1cd98:	str	r1, [sp]
   1cd9c:	ldr	r1, [sp, #8]
   1cda0:	bl	19bc4 <__assert_fail@plt+0x866c>
   1cda4:	cmp	r0, #0
   1cda8:	str	r0, [sp, #48]	; 0x30
   1cdac:	bne	1ce08 <__assert_fail@plt+0xb8b0>
   1cdb0:	mov	r3, r6
   1cdb4:	add	r0, sp, #48	; 0x30
   1cdb8:	ldr	r2, [sp, #8]
   1cdbc:	ldr	r1, [sp, #20]
   1cdc0:	bl	18bd0 <__assert_fail@plt+0x7678>
   1cdc4:	subs	sl, r0, #0
   1cdc8:	beq	1cf38 <__assert_fail@plt+0xb9e0>
   1cdcc:	ldr	r3, [r5, #100]	; 0x64
   1cdd0:	str	sl, [r3, r4, lsl #2]
   1cdd4:	b	1ca58 <__assert_fail@plt+0xb500>
   1cdd8:	cmp	r0, #0
   1cddc:	bne	1cb24 <__assert_fail@plt+0xb5cc>
   1cde0:	ldr	r0, [r7]
   1cde4:	b	1cb0c <__assert_fail@plt+0xb5b4>
   1cde8:	cmp	sl, #0
   1cdec:	bne	1cac0 <__assert_fail@plt+0xb568>
   1cdf0:	mov	r4, fp
   1cdf4:	b	1cc88 <__assert_fail@plt+0xb730>
   1cdf8:	ldr	r0, [sp, #76]	; 0x4c
   1cdfc:	bl	13b9c <__assert_fail@plt+0x2644>
   1ce00:	mov	r3, #12
   1ce04:	str	r3, [sp, #48]	; 0x30
   1ce08:	ldr	r0, [sp, #64]	; 0x40
   1ce0c:	bl	13b9c <__assert_fail@plt+0x2644>
   1ce10:	ldr	r0, [sp, #48]	; 0x30
   1ce14:	b	1cd34 <__assert_fail@plt+0xb7dc>
   1ce18:	ldr	fp, [sp, #32]
   1ce1c:	ldr	r0, [sp, #76]	; 0x4c
   1ce20:	bl	13b9c <__assert_fail@plt+0x2644>
   1ce24:	mov	r3, #0
   1ce28:	str	r3, [sp, #48]	; 0x30
   1ce2c:	b	1cc30 <__assert_fail@plt+0xb6d8>
   1ce30:	ldr	r3, [sp, #48]	; 0x30
   1ce34:	cmp	r3, #0
   1ce38:	bne	1ce08 <__assert_fail@plt+0xb8b0>
   1ce3c:	ldr	r2, [sp, #12]
   1ce40:	ldr	r3, [r5, #100]	; 0x64
   1ce44:	add	r2, r2, #1
   1ce48:	str	r2, [sp, #12]
   1ce4c:	ldr	r2, [sp, #16]
   1ce50:	str	sl, [r3, r2]
   1ce54:	b	1ccc8 <__assert_fail@plt+0xb770>
   1ce58:	sub	r1, sl, #1
   1ce5c:	mov	r0, r5
   1ce60:	str	sl, [r5, #40]	; 0x28
   1ce64:	str	r8, [r5, #100]	; 0x64
   1ce68:	bl	1a9f4 <__assert_fail@plt+0x949c>
   1ce6c:	mov	r6, r0
   1ce70:	mov	r3, #1
   1ce74:	mov	r0, #4
   1ce78:	str	r3, [sp, #56]	; 0x38
   1ce7c:	str	r3, [sp, #60]	; 0x3c
   1ce80:	bl	26190 <__assert_fail@plt+0x14c38>
   1ce84:	cmp	r0, #0
   1ce88:	str	r0, [sp, #64]	; 0x40
   1ce8c:	beq	1cf48 <__assert_fail@plt+0xb9f0>
   1ce90:	add	r3, sp, #56	; 0x38
   1ce94:	mov	ip, #0
   1ce98:	str	r7, [r0]
   1ce9c:	mov	r1, r3
   1cea0:	ldr	r0, [sp, #20]
   1cea4:	str	r3, [sp, #8]
   1cea8:	ldr	r2, [sp, #28]
   1ceac:	str	ip, [sp, #48]	; 0x30
   1ceb0:	ldr	r3, [sp, #128]	; 0x80
   1ceb4:	bl	19a74 <__assert_fail@plt+0x851c>
   1ceb8:	cmp	r0, #0
   1cebc:	str	r0, [sp, #48]	; 0x30
   1cec0:	moveq	r4, sl
   1cec4:	beq	1cd7c <__assert_fail@plt+0xb824>
   1cec8:	b	1ce08 <__assert_fail@plt+0xb8b0>
   1cecc:	mvn	r3, #-2147483648	; 0x80000000
   1ced0:	add	r9, r2, #1
   1ced4:	sub	r3, r3, r4
   1ced8:	cmp	r3, r9
   1cedc:	blt	1cf48 <__assert_fail@plt+0xb9f0>
   1cee0:	add	r8, r4, r9
   1cee4:	cmn	r8, #-1073741823	; 0xc0000001
   1cee8:	bhi	1cf48 <__assert_fail@plt+0xb9f0>
   1ceec:	ldr	fp, [sp, #36]	; 0x24
   1cef0:	lsl	r1, r8, #2
   1cef4:	ldr	r0, [fp, #8]
   1cef8:	bl	261cc <__assert_fail@plt+0x14c74>
   1cefc:	subs	r3, r0, #0
   1cf00:	beq	1cf48 <__assert_fail@plt+0xb9f0>
   1cf04:	lsl	r2, r9, #2
   1cf08:	mov	r1, r6
   1cf0c:	str	r8, [fp, #4]
   1cf10:	add	r0, r3, r4, lsl #2
   1cf14:	str	r3, [fp, #8]
   1cf18:	bl	1145c <memset@plt>
   1cf1c:	b	1c9e4 <__assert_fail@plt+0xb48c>
   1cf20:	add	r3, sp, #56	; 0x38
   1cf24:	str	r3, [sp, #8]
   1cf28:	str	sl, [sp, #56]	; 0x38
   1cf2c:	str	sl, [sp, #60]	; 0x3c
   1cf30:	str	sl, [sp, #64]	; 0x40
   1cf34:	b	1ca58 <__assert_fail@plt+0xb500>
   1cf38:	ldr	r3, [sp, #48]	; 0x30
   1cf3c:	cmp	r3, #0
   1cf40:	beq	1cdcc <__assert_fail@plt+0xb874>
   1cf44:	b	1ce08 <__assert_fail@plt+0xb8b0>
   1cf48:	mov	r0, #12
   1cf4c:	b	1cd34 <__assert_fail@plt+0xb7dc>
   1cf50:	ldr	r3, [sp, #36]	; 0x24
   1cf54:	mov	r0, #1
   1cf58:	str	r4, [r3]
   1cf5c:	ldr	r3, [sp, #44]	; 0x2c
   1cf60:	str	r3, [r5, #40]	; 0x28
   1cf64:	ldr	r3, [sp, #40]	; 0x28
   1cf68:	str	r3, [r5, #100]	; 0x64
   1cf6c:	b	1cd34 <__assert_fail@plt+0xb7dc>
   1cf70:	mov	r0, #0
   1cf74:	b	1ce20 <__assert_fail@plt+0xb8c8>
   1cf78:	mov	ip, r2
   1cf7c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cf80:	mov	r4, r0
   1cf84:	strd	r6, [sp, #8]
   1cf88:	mov	r6, r2
   1cf8c:	mov	r7, r3
   1cf90:	strd	r8, [sp, #16]
   1cf94:	mov	r3, #8
   1cf98:	mov	r8, r1
   1cf9c:	strd	sl, [sp, #24]
   1cfa0:	str	lr, [sp, #32]
   1cfa4:	sub	sp, sp, #20
   1cfa8:	ldr	r2, [ip], #8
   1cfac:	str	r7, [sp]
   1cfb0:	ldr	r5, [sp, #56]	; 0x38
   1cfb4:	mov	r1, ip
   1cfb8:	str	r5, [sp, #4]
   1cfbc:	str	r3, [sp, #8]
   1cfc0:	ldr	r3, [r6, #4]
   1cfc4:	bl	1c988 <__assert_fail@plt+0xb430>
   1cfc8:	subs	fp, r0, #0
   1cfcc:	beq	1cff0 <__assert_fail@plt+0xba98>
   1cfd0:	mov	r0, fp
   1cfd4:	add	sp, sp, #20
   1cfd8:	ldrd	r4, [sp]
   1cfdc:	ldrd	r6, [sp, #8]
   1cfe0:	ldrd	r8, [sp, #16]
   1cfe4:	ldrd	sl, [sp, #24]
   1cfe8:	add	sp, sp, #32
   1cfec:	pop	{pc}		; (ldr pc, [sp], #4)
   1cff0:	ldr	r3, [r4, #108]	; 0x6c
   1cff4:	ldr	r1, [r4, #112]	; 0x70
   1cff8:	ldr	r9, [r6, #4]
   1cffc:	ldr	sl, [r8]
   1d000:	cmp	r3, r1
   1d004:	ldr	r0, [r4, #116]	; 0x74
   1d008:	movlt	lr, r9
   1d00c:	bge	1d0a8 <__assert_fail@plt+0xbb50>
   1d010:	add	r2, r3, r3, lsl #1
   1d014:	cmp	r3, #0
   1d018:	lsl	r2, r2, #3
   1d01c:	ble	1d038 <__assert_fail@plt+0xbae0>
   1d020:	sub	r1, r2, #24
   1d024:	add	r1, r0, r1
   1d028:	ldr	ip, [r1, #4]
   1d02c:	cmp	r5, ip
   1d030:	moveq	ip, #1
   1d034:	strbeq	ip, [r1, #20]
   1d038:	cmp	sl, r9
   1d03c:	add	ip, r0, r2
   1d040:	str	r7, [r0, r2]
   1d044:	add	r3, r3, #1
   1d048:	movne	r0, #0
   1d04c:	mvneq	r0, #0
   1d050:	mov	r1, #0
   1d054:	stmib	ip, {r5, sl}
   1d058:	str	r9, [ip, #12]
   1d05c:	sub	r2, r9, sl
   1d060:	add	r5, r5, lr
   1d064:	str	r0, [ip, #16]
   1d068:	mov	r0, r4
   1d06c:	str	r3, [r4, #108]	; 0x6c
   1d070:	strb	r1, [ip, #20]
   1d074:	ldr	r3, [r4, #120]	; 0x78
   1d078:	cmp	r3, r2
   1d07c:	strlt	r2, [r4, #120]	; 0x78
   1d080:	ldr	r1, [r8]
   1d084:	sub	r1, r5, r1
   1d088:	add	sp, sp, #20
   1d08c:	ldrd	r4, [sp]
   1d090:	ldrd	r6, [sp, #8]
   1d094:	ldrd	r8, [sp, #16]
   1d098:	ldrd	sl, [sp, #24]
   1d09c:	ldr	lr, [sp, #32]
   1d0a0:	add	sp, sp, #36	; 0x24
   1d0a4:	b	17bdc <__assert_fail@plt+0x6684>
   1d0a8:	add	r1, r1, r1, lsl #1
   1d0ac:	lsl	r1, r1, #4
   1d0b0:	bl	261cc <__assert_fail@plt+0x14c74>
   1d0b4:	cmp	r0, #0
   1d0b8:	beq	1d0fc <__assert_fail@plt+0xbba4>
   1d0bc:	ldr	r3, [r4, #108]	; 0x6c
   1d0c0:	mov	r1, fp
   1d0c4:	str	r0, [r4, #116]	; 0x74
   1d0c8:	ldr	r2, [r4, #112]	; 0x70
   1d0cc:	add	r3, r3, r3, lsl #1
   1d0d0:	add	r2, r2, r2, lsl #1
   1d0d4:	add	r0, r0, r3, lsl #3
   1d0d8:	lsl	r2, r2, #3
   1d0dc:	bl	1145c <memset@plt>
   1d0e0:	ldr	lr, [r6, #4]
   1d0e4:	ldr	r2, [r4, #112]	; 0x70
   1d0e8:	ldr	r3, [r4, #108]	; 0x6c
   1d0ec:	ldr	r0, [r4, #116]	; 0x74
   1d0f0:	lsl	r2, r2, #1
   1d0f4:	str	r2, [r4, #112]	; 0x70
   1d0f8:	b	1d010 <__assert_fail@plt+0xbab8>
   1d0fc:	ldr	r0, [r4, #116]	; 0x74
   1d100:	mov	fp, #12
   1d104:	bl	13b9c <__assert_fail@plt+0x2644>
   1d108:	b	1cfd0 <__assert_fail@plt+0xba78>
   1d10c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d110:	ldr	r3, [r0, #84]	; 0x54
   1d114:	strd	r6, [sp, #8]
   1d118:	ldr	r6, [r1]
   1d11c:	strd	r8, [sp, #16]
   1d120:	strd	sl, [sp, #24]
   1d124:	str	lr, [sp, #32]
   1d128:	sub	sp, sp, #84	; 0x54
   1d12c:	ldr	sl, [r0, #40]	; 0x28
   1d130:	cmp	r6, #0
   1d134:	str	r3, [sp, #24]
   1d138:	ble	1d660 <__assert_fail@plt+0xc108>
   1d13c:	lsl	r3, sl, #2
   1d140:	mov	fp, r0
   1d144:	mov	r9, sl
   1d148:	str	r2, [sp, #36]	; 0x24
   1d14c:	str	r3, [sp, #44]	; 0x2c
   1d150:	mov	r3, #0
   1d154:	str	r1, [sp, #56]	; 0x38
   1d158:	str	r3, [sp, #16]
   1d15c:	b	1d1a4 <__assert_fail@plt+0xbc4c>
   1d160:	tst	r0, #1
   1d164:	beq	1d190 <__assert_fail@plt+0xbc38>
   1d168:	tst	r3, #8
   1d16c:	bne	1d190 <__assert_fail@plt+0xbc38>
   1d170:	tst	r3, #32
   1d174:	beq	1d180 <__assert_fail@plt+0xbc28>
   1d178:	tst	r0, #2
   1d17c:	beq	1d190 <__assert_fail@plt+0xbc38>
   1d180:	tst	r3, #128	; 0x80
   1d184:	beq	1d214 <__assert_fail@plt+0xbcbc>
   1d188:	tst	r0, #8
   1d18c:	bne	1d214 <__assert_fail@plt+0xbcbc>
   1d190:	ldr	r3, [sp, #16]
   1d194:	add	r3, r3, #1
   1d198:	cmp	r3, r6
   1d19c:	str	r3, [sp, #16]
   1d1a0:	bge	1d660 <__assert_fail@plt+0xc108>
   1d1a4:	ldr	r1, [sp, #16]
   1d1a8:	ldr	r3, [sp, #36]	; 0x24
   1d1ac:	ldr	r2, [r3]
   1d1b0:	ldr	r3, [sp, #24]
   1d1b4:	ldr	sl, [r2, r1, lsl #2]
   1d1b8:	ldr	r3, [r3]
   1d1bc:	add	r3, r3, sl, lsl #3
   1d1c0:	ldrb	r2, [r3, #4]
   1d1c4:	cmp	r2, #4
   1d1c8:	bne	1d190 <__assert_fail@plt+0xbc38>
   1d1cc:	ldr	r4, [r3, #4]
   1d1d0:	mov	r3, #65280	; 0xff00
   1d1d4:	movt	r3, #3
   1d1d8:	and	r3, r3, r4
   1d1dc:	cmp	r3, #0
   1d1e0:	beq	1d214 <__assert_fail@plt+0xbcbc>
   1d1e4:	mov	r1, r9
   1d1e8:	mov	r0, fp
   1d1ec:	ldr	r2, [fp, #88]	; 0x58
   1d1f0:	bl	1a9f4 <__assert_fail@plt+0x949c>
   1d1f4:	ubfx	r3, r4, #8, #10
   1d1f8:	tst	r3, #4
   1d1fc:	bne	1d160 <__assert_fail@plt+0xbc08>
   1d200:	tst	r3, #8
   1d204:	beq	1d170 <__assert_fail@plt+0xbc18>
   1d208:	tst	r0, #1
   1d20c:	beq	1d170 <__assert_fail@plt+0xbc18>
   1d210:	b	1d190 <__assert_fail@plt+0xbc38>
   1d214:	ldr	ip, [fp, #108]	; 0x6c
   1d218:	mov	r0, #0
   1d21c:	mov	r4, ip
   1d220:	mov	r3, ip
   1d224:	cmp	r0, r3
   1d228:	bge	1d284 <__assert_fail@plt+0xbd2c>
   1d22c:	add	r2, r0, r3
   1d230:	ldr	lr, [fp, #116]	; 0x74
   1d234:	add	r2, r2, r2, lsr #31
   1d238:	asr	r2, r2, #1
   1d23c:	add	r1, r2, r2, lsl #1
   1d240:	add	r1, lr, r1, lsl #3
   1d244:	ldr	r1, [r1, #4]
   1d248:	cmp	r9, r1
   1d24c:	ble	1d274 <__assert_fail@plt+0xbd1c>
   1d250:	b	1d48c <__assert_fail@plt+0xbf34>
   1d254:	asr	r3, r3, #1
   1d258:	add	r1, r3, r3, lsl #1
   1d25c:	mov	r5, r3
   1d260:	add	r1, lr, r1, lsl #3
   1d264:	ldr	r1, [r1, #4]
   1d268:	cmp	r9, r1
   1d26c:	bgt	1d494 <__assert_fail@plt+0xbf3c>
   1d270:	mov	r2, r3
   1d274:	add	r3, r0, r2
   1d278:	cmp	r0, r2
   1d27c:	add	r3, r3, r3, lsr #31
   1d280:	blt	1d254 <__assert_fail@plt+0xbcfc>
   1d284:	cmp	ip, r0
   1d288:	ble	1d4a0 <__assert_fail@plt+0xbf48>
   1d28c:	ldr	r3, [fp, #116]	; 0x74
   1d290:	add	r2, r0, r0, lsl #1
   1d294:	cmn	r0, #1
   1d298:	add	r3, r3, r2, lsl #3
   1d29c:	ldr	r1, [r3, #4]
   1d2a0:	sub	r2, r1, r9
   1d2a4:	clz	r2, r2
   1d2a8:	lsr	r2, r2, #5
   1d2ac:	moveq	r2, #0
   1d2b0:	cmp	r2, #0
   1d2b4:	beq	1d4a0 <__assert_fail@plt+0xbf48>
   1d2b8:	add	r3, r3, #24
   1d2bc:	b	1d2cc <__assert_fail@plt+0xbd74>
   1d2c0:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   1d2c4:	cmp	r2, #0
   1d2c8:	beq	1d4a0 <__assert_fail@plt+0xbf48>
   1d2cc:	ldr	r2, [r3, #-24]	; 0xffffffe8
   1d2d0:	add	r3, r3, #24
   1d2d4:	cmp	sl, r2
   1d2d8:	bne	1d2c0 <__assert_fail@plt+0xbd68>
   1d2dc:	lsl	r2, sl, #2
   1d2e0:	mov	r3, #0
   1d2e4:	cmp	r4, ip
   1d2e8:	str	r2, [sp, #40]	; 0x28
   1d2ec:	str	r3, [sp, #64]	; 0x40
   1d2f0:	bge	1d614 <__assert_fail@plt+0xc0bc>
   1d2f4:	add	r3, sl, sl, lsl #1
   1d2f8:	ldr	r8, [sp, #24]
   1d2fc:	lsl	r3, r3, #2
   1d300:	str	r3, [sp, #48]	; 0x30
   1d304:	b	1d3ec <__assert_fail@plt+0xbe94>
   1d308:	ldr	r2, [r8, #20]
   1d30c:	ldr	r1, [sp, #48]	; 0x30
   1d310:	add	r2, r2, r1
   1d314:	ldr	r2, [r2, #8]
   1d318:	ldr	r2, [r2]
   1d31c:	add	r2, r2, r2, lsl #1
   1d320:	add	r6, r6, r2, lsl #2
   1d324:	add	r3, r9, r3
   1d328:	mov	r0, fp
   1d32c:	ldr	r2, [fp, #88]	; 0x58
   1d330:	sub	r5, r3, r5
   1d334:	sub	r1, r5, #1
   1d338:	bl	1a9f4 <__assert_fail@plt+0x949c>
   1d33c:	ldr	r2, [sp, #44]	; 0x2c
   1d340:	mov	r3, r0
   1d344:	ldr	r7, [fp, #100]	; 0x64
   1d348:	ldr	r2, [r7, r2]
   1d34c:	ldr	r1, [r7, r5, lsl #2]
   1d350:	cmp	r2, #0
   1d354:	ldrne	r2, [r2, #8]
   1d358:	cmp	r1, #0
   1d35c:	str	r2, [sp, #28]
   1d360:	beq	1d440 <__assert_fail@plt+0xbee8>
   1d364:	mov	r2, r6
   1d368:	add	r0, sp, #68	; 0x44
   1d36c:	ldr	r1, [r1, #40]	; 0x28
   1d370:	str	r3, [sp, #32]
   1d374:	bl	18a64 <__assert_fail@plt+0x750c>
   1d378:	cmp	r0, #0
   1d37c:	str	r0, [sp, #64]	; 0x40
   1d380:	ldr	r3, [sp, #32]
   1d384:	bne	1d650 <__assert_fail@plt+0xc0f8>
   1d388:	add	r2, sp, #68	; 0x44
   1d38c:	mov	r1, r8
   1d390:	ldr	r7, [fp, #100]	; 0x64
   1d394:	add	r0, sp, #64	; 0x40
   1d398:	bl	18bd0 <__assert_fail@plt+0x7678>
   1d39c:	str	r0, [r7, r5, lsl #2]
   1d3a0:	ldr	r0, [sp, #76]	; 0x4c
   1d3a4:	bl	13b9c <__assert_fail@plt+0x2644>
   1d3a8:	ldr	r3, [fp, #100]	; 0x64
   1d3ac:	ldr	r2, [r3, r5, lsl #2]
   1d3b0:	cmp	r2, #0
   1d3b4:	beq	1d464 <__assert_fail@plt+0xbf0c>
   1d3b8:	ldr	r2, [sp, #20]
   1d3bc:	cmp	r2, #0
   1d3c0:	bne	1d3dc <__assert_fail@plt+0xbe84>
   1d3c4:	ldr	r2, [sp, #44]	; 0x2c
   1d3c8:	ldr	r3, [r3, r2]
   1d3cc:	ldr	r2, [sp, #28]
   1d3d0:	ldr	r3, [r3, #8]
   1d3d4:	cmp	r3, r2
   1d3d8:	bgt	1d5cc <__assert_fail@plt+0xc074>
   1d3dc:	ldr	ip, [fp, #108]	; 0x6c
   1d3e0:	add	r4, r4, #1
   1d3e4:	cmp	r4, ip
   1d3e8:	bge	1d614 <__assert_fail@plt+0xc0bc>
   1d3ec:	ldr	r3, [fp, #116]	; 0x74
   1d3f0:	add	r2, r4, r4, lsl #1
   1d3f4:	ldr	r1, [r3, r2, lsl #3]
   1d3f8:	add	r3, r3, r2, lsl #3
   1d3fc:	cmp	sl, r1
   1d400:	bne	1d3e0 <__assert_fail@plt+0xbe88>
   1d404:	ldr	r2, [r3, #4]
   1d408:	cmp	r9, r2
   1d40c:	bne	1d3e0 <__assert_fail@plt+0xbe88>
   1d410:	ldr	r5, [r3, #8]
   1d414:	ldr	r3, [r3, #12]
   1d418:	ldr	r6, [r8, #24]
   1d41c:	subs	r2, r3, r5
   1d420:	str	r2, [sp, #20]
   1d424:	beq	1d308 <__assert_fail@plt+0xbdb0>
   1d428:	ldr	r2, [r8, #12]
   1d42c:	ldr	r1, [sp, #40]	; 0x28
   1d430:	ldr	r2, [r2, r1]
   1d434:	add	r2, r2, r2, lsl #1
   1d438:	add	r6, r6, r2, lsl #2
   1d43c:	b	1d324 <__assert_fail@plt+0xbdcc>
   1d440:	mov	r2, r6
   1d444:	mov	r1, r8
   1d448:	add	r0, sp, #64	; 0x40
   1d44c:	bl	18bd0 <__assert_fail@plt+0x7678>
   1d450:	ldr	r3, [fp, #100]	; 0x64
   1d454:	str	r0, [r7, r5, lsl #2]
   1d458:	ldr	r2, [r3, r5, lsl #2]
   1d45c:	cmp	r2, #0
   1d460:	bne	1d3b8 <__assert_fail@plt+0xbe60>
   1d464:	ldr	r0, [sp, #64]	; 0x40
   1d468:	cmp	r0, #0
   1d46c:	beq	1d3b8 <__assert_fail@plt+0xbe60>
   1d470:	add	sp, sp, #84	; 0x54
   1d474:	ldrd	r4, [sp]
   1d478:	ldrd	r6, [sp, #8]
   1d47c:	ldrd	r8, [sp, #16]
   1d480:	ldrd	sl, [sp, #24]
   1d484:	add	sp, sp, #32
   1d488:	pop	{pc}		; (ldr pc, [sp], #4)
   1d48c:	mov	r5, r2
   1d490:	mov	r2, r3
   1d494:	add	r0, r5, #1
   1d498:	mov	r3, r2
   1d49c:	b	1d224 <__assert_fail@plt+0xbccc>
   1d4a0:	ldr	r3, [fp, #84]	; 0x54
   1d4a4:	ldr	r1, [fp, #124]	; 0x7c
   1d4a8:	str	r3, [sp, #52]	; 0x34
   1d4ac:	ldr	r3, [r3]
   1d4b0:	cmp	r1, #0
   1d4b4:	ldr	r2, [r3, sl, lsl #3]
   1d4b8:	str	r2, [sp, #48]	; 0x30
   1d4bc:	ble	1d2dc <__assert_fail@plt+0xbd84>
   1d4c0:	mov	r2, #0
   1d4c4:	str	sl, [sp, #40]	; 0x28
   1d4c8:	str	r2, [sp, #28]
   1d4cc:	ldr	r2, [fp, #4]
   1d4d0:	str	r9, [sp, #32]
   1d4d4:	str	r4, [sp, #60]	; 0x3c
   1d4d8:	mov	sl, r2
   1d4dc:	ldr	r0, [sp, #28]
   1d4e0:	ldr	r2, [fp, #132]	; 0x84
   1d4e4:	ldr	r4, [r2, r0, lsl #2]
   1d4e8:	ldr	r2, [r4, #4]
   1d4ec:	ldr	r3, [r3, r2, lsl #3]
   1d4f0:	ldr	r2, [sp, #48]	; 0x30
   1d4f4:	cmp	r2, r3
   1d4f8:	beq	1d51c <__assert_fail@plt+0xbfc4>
   1d4fc:	ldr	r3, [sp, #28]
   1d500:	add	r3, r3, #1
   1d504:	cmp	r3, r1
   1d508:	str	r3, [sp, #28]
   1d50c:	bge	1d858 <__assert_fail@plt+0xc300>
   1d510:	ldr	r3, [sp, #52]	; 0x34
   1d514:	ldr	r3, [r3]
   1d518:	b	1d4dc <__assert_fail@plt+0xbf84>
   1d51c:	ldr	r6, [r4]
   1d520:	ldr	ip, [r4, #16]
   1d524:	ldr	r7, [sp, #32]
   1d528:	cmp	ip, #0
   1d52c:	ble	1d678 <__assert_fail@plt+0xc120>
   1d530:	mov	r3, sl
   1d534:	mov	r5, #0
   1d538:	mov	sl, r7
   1d53c:	mov	r7, r6
   1d540:	b	1d554 <__assert_fail@plt+0xbffc>
   1d544:	ldr	ip, [r4, #16]
   1d548:	mov	sl, r6
   1d54c:	cmp	r5, ip
   1d550:	bge	1d668 <__assert_fail@plt+0xc110>
   1d554:	ldr	r2, [r4, #20]
   1d558:	ldr	r9, [r2, r5, lsl #2]
   1d55c:	ldr	r8, [r9, #4]
   1d560:	sub	r2, r8, r7
   1d564:	cmp	r2, #0
   1d568:	add	r6, r2, sl
   1d56c:	ble	1d598 <__assert_fail@plt+0xc040>
   1d570:	ldr	r1, [fp, #28]
   1d574:	cmp	r1, r6
   1d578:	blt	1d620 <__assert_fail@plt+0xc0c8>
   1d57c:	add	r1, r3, r7
   1d580:	add	r0, r3, sl
   1d584:	str	r3, [sp, #20]
   1d588:	bl	112b8 <memcmp@plt>
   1d58c:	cmp	r0, #0
   1d590:	ldr	r3, [sp, #20]
   1d594:	bne	1d800 <__assert_fail@plt+0xc2a8>
   1d598:	ldr	r1, [sp, #32]
   1d59c:	mov	r2, r9
   1d5a0:	mov	r0, fp
   1d5a4:	add	r5, r5, #1
   1d5a8:	mov	r7, r8
   1d5ac:	ldr	r3, [sp, #40]	; 0x28
   1d5b0:	str	r1, [sp]
   1d5b4:	mov	r1, r4
   1d5b8:	bl	1cf78 <__assert_fail@plt+0xba20>
   1d5bc:	cmp	r0, #1
   1d5c0:	ldr	r3, [fp, #4]
   1d5c4:	bls	1d544 <__assert_fail@plt+0xbfec>
   1d5c8:	b	1d470 <__assert_fail@plt+0xbf18>
   1d5cc:	add	r5, r6, #4
   1d5d0:	add	r6, r6, #8
   1d5d4:	mov	r2, r6
   1d5d8:	mov	r1, r5
   1d5dc:	mov	r3, r9
   1d5e0:	mov	r0, fp
   1d5e4:	bl	1b594 <__assert_fail@plt+0xa03c>
   1d5e8:	cmp	r0, #0
   1d5ec:	str	r0, [sp, #64]	; 0x40
   1d5f0:	bne	1d470 <__assert_fail@plt+0xbf18>
   1d5f4:	mov	r2, r6
   1d5f8:	mov	r1, r5
   1d5fc:	mov	r0, fp
   1d600:	bl	1d10c <__assert_fail@plt+0xbbb4>
   1d604:	cmp	r0, #0
   1d608:	str	r0, [sp, #64]	; 0x40
   1d60c:	beq	1d3dc <__assert_fail@plt+0xbe84>
   1d610:	b	1d470 <__assert_fail@plt+0xbf18>
   1d614:	ldr	r3, [sp, #56]	; 0x38
   1d618:	ldr	r6, [r3]
   1d61c:	b	1d190 <__assert_fail@plt+0xbc38>
   1d620:	ldr	lr, [fp, #48]	; 0x30
   1d624:	mov	r1, r6
   1d628:	mov	r0, fp
   1d62c:	str	r2, [sp, #20]
   1d630:	cmp	lr, r6
   1d634:	blt	1d89c <__assert_fail@plt+0xc344>
   1d638:	bl	17bdc <__assert_fail@plt+0x6684>
   1d63c:	cmp	r0, #0
   1d640:	bne	1d470 <__assert_fail@plt+0xbf18>
   1d644:	ldr	r3, [fp, #4]
   1d648:	ldr	r2, [sp, #20]
   1d64c:	b	1d57c <__assert_fail@plt+0xc024>
   1d650:	ldr	r0, [sp, #76]	; 0x4c
   1d654:	bl	13b9c <__assert_fail@plt+0x2644>
   1d658:	ldr	r0, [sp, #64]	; 0x40
   1d65c:	b	1d470 <__assert_fail@plt+0xbf18>
   1d660:	mov	r0, #0
   1d664:	b	1d470 <__assert_fail@plt+0xbf18>
   1d668:	mov	r9, r6
   1d66c:	mov	sl, r3
   1d670:	add	r6, r8, #1
   1d674:	mov	r7, r9
   1d678:	ldr	r3, [sp, #32]
   1d67c:	cmp	r3, r6
   1d680:	blt	1d7d0 <__assert_fail@plt+0xc278>
   1d684:	ldr	r9, [sp, #32]
   1d688:	ldr	r8, [sp, #48]	; 0x30
   1d68c:	ldr	r3, [r4]
   1d690:	sub	r3, r6, r3
   1d694:	cmp	r3, #0
   1d698:	ble	1d6c4 <__assert_fail@plt+0xc16c>
   1d69c:	ldr	r3, [fp, #28]
   1d6a0:	cmp	r3, r7
   1d6a4:	ble	1d82c <__assert_fail@plt+0xc2d4>
   1d6a8:	add	r5, r7, #1
   1d6ac:	add	r3, sl, r6
   1d6b0:	ldrb	r2, [sl, r7]
   1d6b4:	ldrb	r3, [r3, #-1]
   1d6b8:	cmp	r2, r3
   1d6bc:	bne	1d7d0 <__assert_fail@plt+0xc278>
   1d6c0:	mov	r7, r5
   1d6c4:	ldr	r3, [fp, #100]	; 0x64
   1d6c8:	ldr	r3, [r3, r6, lsl #2]
   1d6cc:	cmp	r3, #0
   1d6d0:	beq	1d7c4 <__assert_fail@plt+0xc26c>
   1d6d4:	ldr	ip, [r3, #8]
   1d6d8:	cmp	ip, #0
   1d6dc:	ble	1d7c4 <__assert_fail@plt+0xc26c>
   1d6e0:	ldr	r2, [r3, #12]
   1d6e4:	mov	r3, #0
   1d6e8:	ldr	r1, [sp, #52]	; 0x34
   1d6ec:	sub	r2, r2, #4
   1d6f0:	ldr	r0, [r1]
   1d6f4:	b	1d700 <__assert_fail@plt+0xc1a8>
   1d6f8:	cmp	ip, r3
   1d6fc:	beq	1d7c4 <__assert_fail@plt+0xc26c>
   1d700:	ldr	r5, [r2, #4]!
   1d704:	add	r3, r3, #1
   1d708:	add	r1, r0, r5, lsl #3
   1d70c:	ldrb	r1, [r1, #4]
   1d710:	cmp	r1, #9
   1d714:	bne	1d6f8 <__assert_fail@plt+0xc1a0>
   1d718:	ldr	r1, [r0, r5, lsl #3]
   1d71c:	cmp	r8, r1
   1d720:	bne	1d6f8 <__assert_fail@plt+0xc1a0>
   1d724:	cmn	r5, #1
   1d728:	beq	1d7c4 <__assert_fail@plt+0xc26c>
   1d72c:	ldr	r3, [r4]
   1d730:	ldr	r1, [r4, #8]
   1d734:	cmp	r1, #0
   1d738:	beq	1d7d8 <__assert_fail@plt+0xc280>
   1d73c:	mov	ip, #9
   1d740:	mov	r0, fp
   1d744:	ldr	r2, [r4, #4]
   1d748:	stm	sp, {r5, r6, ip}
   1d74c:	bl	1c988 <__assert_fail@plt+0xb430>
   1d750:	cmp	r0, #1
   1d754:	beq	1d7c4 <__assert_fail@plt+0xc26c>
   1d758:	cmp	r0, #0
   1d75c:	bne	1d470 <__assert_fail@plt+0xbf18>
   1d760:	ldrd	r2, [r4, #12]
   1d764:	cmp	r3, r2
   1d768:	beq	1d874 <__assert_fail@plt+0xc31c>
   1d76c:	mov	r1, #20
   1d770:	mov	r0, #1
   1d774:	bl	2611c <__assert_fail@plt+0x14bc4>
   1d778:	subs	ip, r0, #0
   1d77c:	beq	1d86c <__assert_fail@plt+0xc314>
   1d780:	ldr	lr, [r4, #16]
   1d784:	mov	r2, ip
   1d788:	mov	r1, r4
   1d78c:	mov	r0, fp
   1d790:	ldr	r3, [sp, #40]	; 0x28
   1d794:	add	sl, lr, #1
   1d798:	str	sl, [sp, #20]
   1d79c:	ldr	sl, [r4, #20]
   1d7a0:	str	ip, [sl, lr, lsl #2]
   1d7a4:	stm	ip, {r5, r6}
   1d7a8:	ldr	ip, [sp, #20]
   1d7ac:	str	ip, [r4, #16]
   1d7b0:	str	r9, [sp]
   1d7b4:	bl	1cf78 <__assert_fail@plt+0xba20>
   1d7b8:	cmp	r0, #1
   1d7bc:	ldr	sl, [fp, #4]
   1d7c0:	bhi	1d470 <__assert_fail@plt+0xbf18>
   1d7c4:	add	r6, r6, #1
   1d7c8:	cmp	r9, r6
   1d7cc:	bge	1d68c <__assert_fail@plt+0xc134>
   1d7d0:	ldr	r1, [fp, #124]	; 0x7c
   1d7d4:	b	1d4fc <__assert_fail@plt+0xbfa4>
   1d7d8:	sub	r3, r6, r3
   1d7dc:	mov	r0, #12
   1d7e0:	add	r1, r3, #1
   1d7e4:	bl	2611c <__assert_fail@plt+0x14bc4>
   1d7e8:	cmp	r0, #0
   1d7ec:	mov	r1, r0
   1d7f0:	str	r0, [r4, #8]
   1d7f4:	beq	1d86c <__assert_fail@plt+0xc314>
   1d7f8:	ldr	r3, [r4]
   1d7fc:	b	1d73c <__assert_fail@plt+0xc1e4>
   1d800:	ldr	ip, [r4, #16]
   1d804:	mov	r6, r7
   1d808:	mov	r7, sl
   1d80c:	mov	sl, r3
   1d810:	cmp	ip, r5
   1d814:	bgt	1d7d0 <__assert_fail@plt+0xc278>
   1d818:	cmp	r5, #0
   1d81c:	ble	1d678 <__assert_fail@plt+0xc120>
   1d820:	mov	r9, r7
   1d824:	mov	r8, r6
   1d828:	b	1d670 <__assert_fail@plt+0xc118>
   1d82c:	ldr	r3, [fp, #48]	; 0x30
   1d830:	cmp	r3, r7
   1d834:	ble	1d7d0 <__assert_fail@plt+0xc278>
   1d838:	add	r5, r7, #1
   1d83c:	mov	r0, fp
   1d840:	mov	r1, r5
   1d844:	bl	17048 <__assert_fail@plt+0x5af0>
   1d848:	cmp	r0, #0
   1d84c:	bne	1d470 <__assert_fail@plt+0xbf18>
   1d850:	ldr	sl, [fp, #4]
   1d854:	b	1d6ac <__assert_fail@plt+0xc154>
   1d858:	ldr	r9, [sp, #32]
   1d85c:	ldr	sl, [sp, #40]	; 0x28
   1d860:	ldr	r4, [sp, #60]	; 0x3c
   1d864:	ldr	ip, [fp, #108]	; 0x6c
   1d868:	b	1d2dc <__assert_fail@plt+0xbd84>
   1d86c:	mov	r0, #12
   1d870:	b	1d470 <__assert_fail@plt+0xbf18>
   1d874:	lsl	r3, r3, #1
   1d878:	ldr	r0, [r4, #20]
   1d87c:	add	sl, r3, #1
   1d880:	lsl	r1, sl, #2
   1d884:	bl	261cc <__assert_fail@plt+0x14c74>
   1d888:	cmp	r0, #0
   1d88c:	beq	1d86c <__assert_fail@plt+0xc314>
   1d890:	str	sl, [r4, #12]
   1d894:	str	r0, [r4, #20]
   1d898:	b	1d76c <__assert_fail@plt+0xc214>
   1d89c:	mov	r6, r7
   1d8a0:	mov	r7, sl
   1d8a4:	mov	sl, r3
   1d8a8:	b	1d810 <__assert_fail@plt+0xc2b8>
   1d8ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1d8b0:	mov	r4, r1
   1d8b4:	ldr	r5, [r1, #40]	; 0x28
   1d8b8:	ldr	r3, [r1, #104]	; 0x68
   1d8bc:	strd	r6, [sp, #8]
   1d8c0:	strd	r8, [sp, #16]
   1d8c4:	str	sl, [sp, #24]
   1d8c8:	mov	sl, r0
   1d8cc:	str	lr, [sp, #28]
   1d8d0:	sub	sp, sp, #16
   1d8d4:	cmp	r3, r5
   1d8d8:	ldr	r8, [r1, #84]	; 0x54
   1d8dc:	ldr	r9, [r1, #100]	; 0x64
   1d8e0:	bge	1d91c <__assert_fail@plt+0xc3c4>
   1d8e4:	mov	r6, r2
   1d8e8:	str	r2, [r9, r5, lsl #2]
   1d8ec:	str	r5, [r1, #104]	; 0x68
   1d8f0:	ldr	r3, [r8, #76]	; 0x4c
   1d8f4:	cmp	r3, #0
   1d8f8:	bne	1d9e4 <__assert_fail@plt+0xc48c>
   1d8fc:	mov	r0, r6
   1d900:	add	sp, sp, #16
   1d904:	ldrd	r4, [sp]
   1d908:	ldrd	r6, [sp, #8]
   1d90c:	ldrd	r8, [sp, #16]
   1d910:	ldr	sl, [sp, #24]
   1d914:	add	sp, sp, #28
   1d918:	pop	{pc}		; (ldr pc, [sp], #4)
   1d91c:	ldr	r3, [r9, r5, lsl #2]
   1d920:	cmp	r3, #0
   1d924:	moveq	r6, r2
   1d928:	streq	r2, [r9, r5, lsl #2]
   1d92c:	beq	1d8f0 <__assert_fail@plt+0xc398>
   1d930:	cmp	r2, #0
   1d934:	ldr	r3, [r3, #40]	; 0x28
   1d938:	beq	1d9a4 <__assert_fail@plt+0xc44c>
   1d93c:	ldr	r7, [r2, #40]	; 0x28
   1d940:	add	r0, sp, #4
   1d944:	mov	r2, r3
   1d948:	mov	r1, r7
   1d94c:	bl	18a64 <__assert_fail@plt+0x750c>
   1d950:	cmp	r0, #0
   1d954:	str	r0, [sl]
   1d958:	bne	1da48 <__assert_fail@plt+0xc4f0>
   1d95c:	ldr	r1, [r4, #40]	; 0x28
   1d960:	mov	r0, r4
   1d964:	ldr	r2, [r4, #88]	; 0x58
   1d968:	sub	r1, r1, #1
   1d96c:	bl	1a9f4 <__assert_fail@plt+0x949c>
   1d970:	ldr	r9, [r4, #100]	; 0x64
   1d974:	mov	r3, r0
   1d978:	add	r2, sp, #4
   1d97c:	mov	r1, r8
   1d980:	mov	r0, sl
   1d984:	bl	18bd0 <__assert_fail@plt+0x7678>
   1d988:	cmp	r7, #0
   1d98c:	mov	r6, r0
   1d990:	str	r0, [r9, r5, lsl #2]
   1d994:	beq	1d8f0 <__assert_fail@plt+0xc398>
   1d998:	ldr	r0, [sp, #12]
   1d99c:	bl	13b9c <__assert_fail@plt+0x2644>
   1d9a0:	b	1d8f0 <__assert_fail@plt+0xc398>
   1d9a4:	ldrd	r6, [r3]
   1d9a8:	sub	r1, r5, #1
   1d9ac:	mov	r0, r4
   1d9b0:	ldr	r2, [r4, #88]	; 0x58
   1d9b4:	strd	r6, [sp, #4]
   1d9b8:	ldr	r3, [r3, #8]
   1d9bc:	str	r3, [sp, #12]
   1d9c0:	bl	1a9f4 <__assert_fail@plt+0x949c>
   1d9c4:	mov	r3, r0
   1d9c8:	add	r2, sp, #4
   1d9cc:	mov	r1, r8
   1d9d0:	mov	r0, sl
   1d9d4:	bl	18bd0 <__assert_fail@plt+0x7678>
   1d9d8:	mov	r6, r0
   1d9dc:	str	r0, [r9, r5, lsl #2]
   1d9e0:	b	1d8f0 <__assert_fail@plt+0xc398>
   1d9e4:	cmp	r6, #0
   1d9e8:	beq	1da48 <__assert_fail@plt+0xc4f0>
   1d9ec:	add	r7, r6, #8
   1d9f0:	add	r8, r6, #12
   1d9f4:	mov	r1, r7
   1d9f8:	mov	r2, r8
   1d9fc:	mov	r3, r5
   1da00:	mov	r0, r4
   1da04:	bl	1b594 <__assert_fail@plt+0xa03c>
   1da08:	cmp	r0, #0
   1da0c:	str	r0, [sl]
   1da10:	bne	1da48 <__assert_fail@plt+0xc4f0>
   1da14:	ldrb	r3, [r6, #52]	; 0x34
   1da18:	tst	r3, #64	; 0x40
   1da1c:	beq	1d8fc <__assert_fail@plt+0xc3a4>
   1da20:	mov	r2, r8
   1da24:	mov	r1, r7
   1da28:	mov	r0, r4
   1da2c:	bl	1d10c <__assert_fail@plt+0xbbb4>
   1da30:	cmp	r0, #0
   1da34:	str	r0, [sl]
   1da38:	bne	1da48 <__assert_fail@plt+0xc4f0>
   1da3c:	ldr	r3, [r4, #100]	; 0x64
   1da40:	ldr	r6, [r3, r5, lsl #2]
   1da44:	b	1d8fc <__assert_fail@plt+0xc3a4>
   1da48:	mov	r6, #0
   1da4c:	b	1d8fc <__assert_fail@plt+0xc3a4>
   1da50:	mov	r3, #1
   1da54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1da58:	ldr	r4, [r1, #8]
   1da5c:	strd	r6, [sp, #8]
   1da60:	strd	r8, [sp, #16]
   1da64:	mov	r9, r1
   1da68:	strd	sl, [sp, #24]
   1da6c:	mov	fp, r0
   1da70:	mov	r0, #4
   1da74:	str	lr, [sp, #32]
   1da78:	sub	sp, sp, #60	; 0x3c
   1da7c:	ldr	sl, [r1, #12]
   1da80:	str	r3, [sp, #44]	; 0x2c
   1da84:	str	r3, [sp, #48]	; 0x30
   1da88:	bl	26190 <__assert_fail@plt+0x14c38>
   1da8c:	cmp	r0, #0
   1da90:	str	r0, [sp, #52]	; 0x34
   1da94:	beq	1dd20 <__assert_fail@plt+0xc7c8>
   1da98:	mov	r2, sl
   1da9c:	add	r3, sp, #44	; 0x2c
   1daa0:	str	r4, [r0]
   1daa4:	mov	r1, r9
   1daa8:	mov	r0, fp
   1daac:	bl	1f85c <__assert_fail@plt+0xe304>
   1dab0:	cmp	r0, #0
   1dab4:	bne	1dcfc <__assert_fail@plt+0xc7a4>
   1dab8:	cmp	sl, #0
   1dabc:	addgt	r3, r9, #24
   1dac0:	strgt	r0, [sp, #20]
   1dac4:	strgt	r3, [sp, #36]	; 0x24
   1dac8:	ble	1dcc8 <__assert_fail@plt+0xc770>
   1dacc:	ldr	r0, [r9]
   1dad0:	lsl	r3, sl, #2
   1dad4:	str	r3, [sp, #16]
   1dad8:	ldr	r3, [r0, sl, lsl #2]
   1dadc:	cmp	r3, #0
   1dae0:	ldreq	r3, [sp, #20]
   1dae4:	movne	r3, #0
   1dae8:	addeq	r3, r3, #1
   1daec:	str	r3, [sp, #20]
   1daf0:	ldr	r2, [sp, #20]
   1daf4:	ldr	r3, [fp, #120]	; 0x78
   1daf8:	cmp	r3, r2
   1dafc:	blt	1dd04 <__assert_fail@plt+0xc7ac>
   1db00:	mov	r2, #0
   1db04:	ldr	r3, [fp, #100]	; 0x64
   1db08:	sub	sl, sl, #1
   1db0c:	str	r2, [sp, #48]	; 0x30
   1db10:	ldr	r2, [sp, #16]
   1db14:	add	r3, r3, r2
   1db18:	ldr	r6, [r3, #-4]
   1db1c:	cmp	r6, #0
   1db20:	beq	1dca4 <__assert_fail@plt+0xc74c>
   1db24:	ldr	r3, [r6, #20]
   1db28:	ldr	r5, [fp, #84]	; 0x54
   1db2c:	cmp	r3, #0
   1db30:	ble	1dca4 <__assert_fail@plt+0xc74c>
   1db34:	ldr	r3, [r6, #24]
   1db38:	add	r2, r9, #20
   1db3c:	mov	r8, #0
   1db40:	ldr	r1, [r5]
   1db44:	str	r2, [sp, #28]
   1db48:	ldr	r4, [r3]
   1db4c:	lsl	r7, r4, #3
   1db50:	add	r3, r1, r7
   1db54:	b	1dc14 <__assert_fail@plt+0xc6bc>
   1db58:	add	r1, r1, r7
   1db5c:	mov	r2, sl
   1db60:	mov	r0, fp
   1db64:	bl	1ab0c <__assert_fail@plt+0x95b4>
   1db68:	cmp	r0, #0
   1db6c:	beq	1dbf0 <__assert_fail@plt+0xc698>
   1db70:	ldr	r3, [r9]
   1db74:	ldr	r2, [sp, #16]
   1db78:	ldr	r3, [r3, r2]
   1db7c:	cmp	r3, #0
   1db80:	beq	1dbf0 <__assert_fail@plt+0xc698>
   1db84:	ldr	r2, [r5, #12]
   1db88:	add	r1, r3, #12
   1db8c:	ldr	r0, [r3, #8]
   1db90:	ldr	r2, [r2, r4, lsl #2]
   1db94:	bl	17db4 <__assert_fail@plt+0x685c>
   1db98:	cmp	r0, #0
   1db9c:	beq	1dbf0 <__assert_fail@plt+0xc698>
   1dba0:	mov	r3, #1
   1dba4:	ldr	r2, [r9, #20]
   1dba8:	cmp	r2, #0
   1dbac:	beq	1dbdc <__assert_fail@plt+0xc684>
   1dbb0:	ldr	lr, [r5, #12]
   1dbb4:	add	ip, sl, r3
   1dbb8:	mov	r0, fp
   1dbbc:	ldr	r1, [sp, #28]
   1dbc0:	ldr	r2, [sp, #36]	; 0x24
   1dbc4:	ldr	r3, [lr, r4, lsl #2]
   1dbc8:	str	ip, [sp]
   1dbcc:	stmib	sp, {r4, sl}
   1dbd0:	bl	18088 <__assert_fail@plt+0x6b30>
   1dbd4:	cmp	r0, #0
   1dbd8:	bne	1dbf0 <__assert_fail@plt+0xc698>
   1dbdc:	mov	r1, r4
   1dbe0:	add	r0, sp, #44	; 0x2c
   1dbe4:	bl	177e0 <__assert_fail@plt+0x6288>
   1dbe8:	cmp	r0, #0
   1dbec:	beq	1dcd0 <__assert_fail@plt+0xc778>
   1dbf0:	ldr	r3, [r6, #20]
   1dbf4:	add	r8, r8, #1
   1dbf8:	cmp	r8, r3
   1dbfc:	bge	1dca4 <__assert_fail@plt+0xc74c>
   1dc00:	ldr	r3, [r6, #24]
   1dc04:	ldr	r1, [r5]
   1dc08:	ldr	r4, [r3, r8, lsl #2]
   1dc0c:	lsl	r7, r4, #3
   1dc10:	add	r3, r1, r7
   1dc14:	ldrb	r3, [r3, #6]
   1dc18:	tst	r3, #16
   1dc1c:	beq	1db58 <__assert_fail@plt+0xc600>
   1dc20:	ldr	r0, [r9, #12]
   1dc24:	mov	r3, fp
   1dc28:	mov	r2, r4
   1dc2c:	ldr	r1, [fp, #84]	; 0x54
   1dc30:	str	r0, [sp, #24]
   1dc34:	str	r1, [sp, #32]
   1dc38:	ldr	r0, [r1], #128	; 0x80
   1dc3c:	str	sl, [sp]
   1dc40:	bl	1c6b0 <__assert_fail@plt+0xb158>
   1dc44:	subs	r3, r0, #0
   1dc48:	ble	1dc9c <__assert_fail@plt+0xc744>
   1dc4c:	ldr	r0, [sp, #24]
   1dc50:	add	r2, sl, r3
   1dc54:	cmp	r0, r2
   1dc58:	blt	1dba4 <__assert_fail@plt+0xc64c>
   1dc5c:	ldr	r1, [r9]
   1dc60:	ldr	r2, [r1, r2, lsl #2]
   1dc64:	cmp	r2, #0
   1dc68:	beq	1dc94 <__assert_fail@plt+0xc73c>
   1dc6c:	str	r3, [sp, #24]
   1dc70:	add	r1, r2, #12
   1dc74:	ldr	r3, [sp, #32]
   1dc78:	ldr	r0, [r2, #8]
   1dc7c:	ldr	ip, [r3, #12]
   1dc80:	ldr	r2, [ip, r4, lsl #2]
   1dc84:	bl	17db4 <__assert_fail@plt+0x685c>
   1dc88:	cmp	r0, #0
   1dc8c:	ldr	r3, [sp, #24]
   1dc90:	bne	1dba4 <__assert_fail@plt+0xc64c>
   1dc94:	ldr	r1, [r5]
   1dc98:	b	1db58 <__assert_fail@plt+0xc600>
   1dc9c:	beq	1dc94 <__assert_fail@plt+0xc73c>
   1dca0:	b	1dba4 <__assert_fail@plt+0xc64c>
   1dca4:	add	r3, sp, #44	; 0x2c
   1dca8:	mov	r2, sl
   1dcac:	mov	r1, r9
   1dcb0:	mov	r0, fp
   1dcb4:	bl	1f85c <__assert_fail@plt+0xe304>
   1dcb8:	cmp	r0, #0
   1dcbc:	bne	1dcfc <__assert_fail@plt+0xc7a4>
   1dcc0:	cmp	sl, #0
   1dcc4:	bne	1dacc <__assert_fail@plt+0xc574>
   1dcc8:	mov	r4, #0
   1dccc:	b	1dcd4 <__assert_fail@plt+0xc77c>
   1dcd0:	mov	r4, #12
   1dcd4:	ldr	r0, [sp, #52]	; 0x34
   1dcd8:	bl	13b9c <__assert_fail@plt+0x2644>
   1dcdc:	mov	r0, r4
   1dce0:	add	sp, sp, #60	; 0x3c
   1dce4:	ldrd	r4, [sp]
   1dce8:	ldrd	r6, [sp, #8]
   1dcec:	ldrd	r8, [sp, #16]
   1dcf0:	ldrd	sl, [sp, #24]
   1dcf4:	add	sp, sp, #32
   1dcf8:	pop	{pc}		; (ldr pc, [sp], #4)
   1dcfc:	mov	r4, r0
   1dd00:	b	1dcd4 <__assert_fail@plt+0xc77c>
   1dd04:	mov	r1, #0
   1dd08:	ldr	r2, [sp, #16]
   1dd0c:	mov	r4, r1
   1dd10:	bl	1145c <memset@plt>
   1dd14:	ldr	r0, [sp, #52]	; 0x34
   1dd18:	bl	13b9c <__assert_fail@plt+0x2644>
   1dd1c:	b	1dcdc <__assert_fail@plt+0xc784>
   1dd20:	mov	r4, #12
   1dd24:	b	1dcdc <__assert_fail@plt+0xc784>
   1dd28:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1dd2c:	mov	r4, r0
   1dd30:	mov	r5, r3
   1dd34:	strd	r6, [sp, #8]
   1dd38:	strd	r8, [sp, #16]
   1dd3c:	strd	sl, [sp, #24]
   1dd40:	str	lr, [sp, #32]
   1dd44:	sub	sp, sp, #428	; 0x1ac
   1dd48:	ldr	r9, [r0]
   1dd4c:	str	r0, [sp, #32]
   1dd50:	add	r0, sp, #148	; 0x94
   1dd54:	str	r1, [sp, #56]	; 0x38
   1dd58:	mov	r1, #0
   1dd5c:	str	r2, [sp, #72]	; 0x48
   1dd60:	mov	r2, #136	; 0x88
   1dd64:	ldr	r6, [sp, #464]	; 0x1d0
   1dd68:	bl	1145c <memset@plt>
   1dd6c:	ldr	r2, [r4, #16]
   1dd70:	cmp	r2, #0
   1dd74:	str	r2, [sp, #48]	; 0x30
   1dd78:	str	r9, [sp, #232]	; 0xe8
   1dd7c:	beq	1dd98 <__assert_fail@plt+0xc840>
   1dd80:	ldrb	r2, [r4, #28]
   1dd84:	subs	r3, r5, r6
   1dd88:	movne	r3, #1
   1dd8c:	ands	r3, r3, r2, lsr #3
   1dd90:	streq	r3, [sp, #48]	; 0x30
   1dd94:	bne	1e13c <__assert_fail@plt+0xcbe4>
   1dd98:	ldr	r3, [sp, #32]
   1dd9c:	ldr	r2, [sp, #472]	; 0x1d8
   1dda0:	ldr	r3, [r3, #24]
   1dda4:	cmp	r3, r2
   1dda8:	movcs	r3, #0
   1ddac:	strcs	r3, [sp, #108]	; 0x6c
   1ddb0:	bcs	1ddd0 <__assert_fail@plt+0xc878>
   1ddb4:	sub	r2, r2, #1
   1ddb8:	sub	r1, r3, r2
   1ddbc:	sub	r3, r2, r3
   1ddc0:	str	r3, [sp, #108]	; 0x6c
   1ddc4:	ldr	r3, [sp, #472]	; 0x1d8
   1ddc8:	add	r3, r3, r1
   1ddcc:	str	r3, [sp, #472]	; 0x1d8
   1ddd0:	ldr	ip, [sp, #32]
   1ddd4:	ldr	r3, [ip, #8]
   1ddd8:	cmp	r3, #0
   1dddc:	beq	1ea18 <__assert_fail@plt+0xd4c0>
   1dde0:	ldr	r3, [r9, #36]	; 0x24
   1dde4:	cmp	r3, #0
   1dde8:	beq	1ea18 <__assert_fail@plt+0xd4c0>
   1ddec:	ldr	r2, [r9, #40]	; 0x28
   1ddf0:	cmp	r2, #0
   1ddf4:	beq	1ea18 <__assert_fail@plt+0xd4c0>
   1ddf8:	ldr	r1, [r9, #44]	; 0x2c
   1ddfc:	cmp	r1, #0
   1de00:	beq	1ea18 <__assert_fail@plt+0xd4c0>
   1de04:	ldr	r0, [r9, #48]	; 0x30
   1de08:	cmp	r0, #0
   1de0c:	beq	1ea18 <__assert_fail@plt+0xd4c0>
   1de10:	ldr	r3, [r3, #8]
   1de14:	cmp	r3, #0
   1de18:	bne	1de5c <__assert_fail@plt+0xc904>
   1de1c:	ldr	r3, [r2, #8]
   1de20:	cmp	r3, #0
   1de24:	bne	1de5c <__assert_fail@plt+0xc904>
   1de28:	ldr	r3, [r1, #8]
   1de2c:	cmp	r3, #0
   1de30:	beq	1de40 <__assert_fail@plt+0xc8e8>
   1de34:	ldrsb	r3, [ip, #28]
   1de38:	cmp	r3, #0
   1de3c:	blt	1de5c <__assert_fail@plt+0xc904>
   1de40:	adds	r6, r6, #0
   1de44:	movne	r6, #1
   1de48:	cmp	r5, #0
   1de4c:	moveq	r6, #0
   1de50:	cmp	r6, #0
   1de54:	bne	1ea18 <__assert_fail@plt+0xd4c0>
   1de58:	mov	r5, r6
   1de5c:	ldr	r3, [sp, #472]	; 0x1d8
   1de60:	cmp	r3, #0
   1de64:	bne	1e12c <__assert_fail@plt+0xcbd4>
   1de68:	ldr	r3, [r9, #76]	; 0x4c
   1de6c:	adds	r3, r3, #0
   1de70:	movne	r3, #1
   1de74:	str	r3, [sp, #20]
   1de78:	str	r3, [sp, #60]	; 0x3c
   1de7c:	ldr	r8, [sp, #32]
   1de80:	add	r0, sp, #148	; 0x94
   1de84:	ldr	r2, [sp, #56]	; 0x38
   1de88:	ldr	r3, [r9, #8]
   1de8c:	ldr	ip, [r8, #12]
   1de90:	str	r2, [sp, #148]	; 0x94
   1de94:	ldr	lr, [r9, #92]	; 0x5c
   1de98:	add	r3, r3, #1
   1de9c:	ldrb	r2, [r9, #88]	; 0x58
   1dea0:	and	r4, ip, #4194304	; 0x400000
   1dea4:	ubfx	ip, ip, #22, #1
   1dea8:	ldr	r8, [r8, #20]
   1deac:	cmp	r3, lr
   1deb0:	ldr	r7, [sp, #72]	; 0x48
   1deb4:	movlt	r3, lr
   1deb8:	str	r8, [sp, #80]	; 0x50
   1debc:	strb	ip, [sp, #220]	; 0xdc
   1dec0:	ubfx	ip, r2, #2, #1
   1dec4:	add	r1, r7, #1
   1dec8:	ubfx	r2, r2, #3, #1
   1decc:	str	lr, [sp, #228]	; 0xe4
   1ded0:	orrs	lr, r8, r4
   1ded4:	str	r7, [sp, #192]	; 0xc0
   1ded8:	movne	lr, #1
   1dedc:	moveq	lr, #0
   1dee0:	str	r7, [sp, #196]	; 0xc4
   1dee4:	cmp	r3, r1
   1dee8:	str	r7, [sp, #200]	; 0xc8
   1deec:	movlt	r1, r3
   1def0:	str	r7, [sp, #204]	; 0xcc
   1def4:	str	r8, [sp, #212]	; 0xd4
   1def8:	strb	ip, [sp, #221]	; 0xdd
   1defc:	strb	r2, [sp, #222]	; 0xde
   1df00:	strb	lr, [sp, #223]	; 0xdf
   1df04:	bl	16610 <__assert_fail@plt+0x50b8>
   1df08:	subs	r3, r0, #0
   1df0c:	str	r3, [sp, #36]	; 0x24
   1df10:	bne	1e5f4 <__assert_fail@plt+0xd09c>
   1df14:	ldrb	r3, [r9, #88]	; 0x58
   1df18:	add	r1, r9, #96	; 0x60
   1df1c:	ldrb	r2, [sp, #223]	; 0xdf
   1df20:	str	r1, [sp, #216]	; 0xd8
   1df24:	ubfx	r3, r3, #4, #1
   1df28:	cmp	r2, #0
   1df2c:	strb	r3, [sp, #226]	; 0xe2
   1df30:	bne	1df48 <__assert_fail@plt+0xc9f0>
   1df34:	ldr	r3, [r9, #92]	; 0x5c
   1df38:	ldr	r2, [sp, #56]	; 0x38
   1df3c:	cmp	r3, #1
   1df40:	str	r2, [sp, #152]	; 0x98
   1df44:	ble	1eb10 <__assert_fail@plt+0xd5b8>
   1df48:	mov	r2, #0
   1df4c:	ldr	r3, [sp, #32]
   1df50:	mvn	r1, #0
   1df54:	str	r2, [sp, #176]	; 0xb0
   1df58:	str	r2, [sp, #180]	; 0xb4
   1df5c:	ldr	r2, [sp, #468]	; 0x1d4
   1df60:	ldrb	r3, [r3, #28]
   1df64:	str	r2, [sp, #200]	; 0xc8
   1df68:	str	r2, [sp, #204]	; 0xcc
   1df6c:	ubfx	r3, r3, #7, #1
   1df70:	strb	r3, [sp, #225]	; 0xe1
   1df74:	ldr	r7, [r9, #76]	; 0x4c
   1df78:	str	r1, [sp, #240]	; 0xf0
   1df7c:	ldr	r3, [sp, #480]	; 0x1e0
   1df80:	lsl	r4, r7, #1
   1df84:	cmp	r4, #0
   1df88:	str	r3, [sp, #236]	; 0xec
   1df8c:	ble	1dfcc <__assert_fail@plt+0xca74>
   1df90:	movw	r3, #43690	; 0xaaaa
   1df94:	movt	r3, #2730	; 0xaaa
   1df98:	cmp	r4, r3
   1df9c:	bgt	1ed70 <__assert_fail@plt+0xd818>
   1dfa0:	add	r0, r4, r7, lsl #2
   1dfa4:	lsl	r0, r0, #3
   1dfa8:	bl	26190 <__assert_fail@plt+0x14c38>
   1dfac:	str	r0, [sp, #264]	; 0x108
   1dfb0:	lsl	r0, r7, #3
   1dfb4:	bl	26190 <__assert_fail@plt+0x14c38>
   1dfb8:	ldr	r3, [sp, #264]	; 0x108
   1dfbc:	str	r0, [sp, #280]	; 0x118
   1dfc0:	cmp	r0, #0
   1dfc4:	cmpne	r3, #0
   1dfc8:	beq	1ed70 <__assert_fail@plt+0xd818>
   1dfcc:	ldr	r2, [sp, #472]	; 0x1d8
   1dfd0:	mov	r3, #1
   1dfd4:	str	r4, [sp, #260]	; 0x104
   1dfd8:	str	r3, [sp, #268]	; 0x10c
   1dfdc:	str	r4, [sp, #276]	; 0x114
   1dfe0:	cmp	r2, r3
   1dfe4:	bls	1ed04 <__assert_fail@plt+0xd7ac>
   1dfe8:	ldr	r0, [sp, #184]	; 0xb8
   1dfec:	cmn	r0, #-1073741822	; 0xc0000002
   1dff0:	bhi	1ed70 <__assert_fail@plt+0xd818>
   1dff4:	add	r0, r0, #1
   1dff8:	lsl	r0, r0, #2
   1dffc:	bl	26190 <__assert_fail@plt+0x14c38>
   1e000:	cmp	r0, #0
   1e004:	mov	r4, r0
   1e008:	str	r0, [sp, #248]	; 0xf8
   1e00c:	beq	1ea44 <__assert_fail@plt+0xd4ec>
   1e010:	ldr	r3, [sp, #480]	; 0x1e0
   1e014:	str	r5, [sp, #116]	; 0x74
   1e018:	ldr	r2, [r9, #92]	; 0x5c
   1e01c:	tst	r3, #1
   1e020:	movne	r3, #4
   1e024:	moveq	r3, #6
   1e028:	cmp	r5, r6
   1e02c:	str	r2, [sp, #88]	; 0x58
   1e030:	str	r3, [sp, #208]	; 0xd0
   1e034:	movge	r3, r5
   1e038:	movlt	r3, r6
   1e03c:	mvngt	r2, #0
   1e040:	movle	r2, #1
   1e044:	str	r3, [sp, #64]	; 0x40
   1e048:	ldr	r3, [sp, #48]	; 0x30
   1e04c:	str	r2, [sp, #96]	; 0x60
   1e050:	movlt	r2, r5
   1e054:	movge	r2, r6
   1e058:	str	r2, [sp, #76]	; 0x4c
   1e05c:	cmp	r3, #0
   1e060:	beq	1ed80 <__assert_fail@plt+0xd828>
   1e064:	ldr	r3, [sp, #88]	; 0x58
   1e068:	cmp	r3, #1
   1e06c:	moveq	r3, #4
   1e070:	beq	1e090 <__assert_fail@plt+0xcb38>
   1e074:	ldr	r3, [sp, #32]
   1e078:	ldr	r2, [sp, #80]	; 0x50
   1e07c:	ldr	r3, [r3, #12]
   1e080:	and	r3, r3, #4194304	; 0x400000
   1e084:	orrs	r3, r2, r3
   1e088:	moveq	r3, #4
   1e08c:	movne	r3, #0
   1e090:	ldr	r2, [sp, #36]	; 0x24
   1e094:	cmp	r5, r6
   1e098:	movle	r2, #2
   1e09c:	ldr	r1, [sp, #80]	; 0x50
   1e0a0:	cmp	r1, #0
   1e0a4:	orrne	r3, r3, #1
   1e0a8:	orr	r3, r3, r2
   1e0ac:	ldr	r1, [sp, #64]	; 0x40
   1e0b0:	ldr	r2, [sp, #76]	; 0x4c
   1e0b4:	cmp	r5, r2
   1e0b8:	movge	r2, #0
   1e0bc:	movlt	r2, #1
   1e0c0:	cmp	r5, r1
   1e0c4:	orrgt	r2, r2, #1
   1e0c8:	cmp	r2, #0
   1e0cc:	bne	1e5ec <__assert_fail@plt+0xd094>
   1e0d0:	add	r2, sp, #424	; 0x1a8
   1e0d4:	cmp	r5, r6
   1e0d8:	str	r9, [sp, #68]	; 0x44
   1e0dc:	sub	r3, r3, #4
   1e0e0:	suble	r2, r2, #308	; 0x134
   1e0e4:	movgt	r2, #0
   1e0e8:	str	r3, [sp, #92]	; 0x5c
   1e0ec:	adds	r3, r2, #0
   1e0f0:	movne	r3, #1
   1e0f4:	str	r2, [sp, #100]	; 0x64
   1e0f8:	str	r3, [sp, #104]	; 0x68
   1e0fc:	mov	r3, #65280	; 0xff00
   1e100:	movt	r3, #3
   1e104:	str	r3, [sp, #52]	; 0x34
   1e108:	ldr	r3, [sp, #92]	; 0x5c
   1e10c:	cmp	r3, #4
   1e110:	ldrls	pc, [pc, r3, lsl #2]
   1e114:	b	1ed9c <__assert_fail@plt+0xd844>
   1e118:	andeq	lr, r1, r4, ror #12
   1e11c:	andeq	lr, r1, r4, ror #12
   1e120:	strdeq	lr, [r1], -ip
   1e124:	andeq	lr, r1, r8, lsr r5
   1e128:	andeq	lr, r1, r4, asr r1
   1e12c:	mov	r3, #1
   1e130:	str	r3, [sp, #20]
   1e134:	str	r3, [sp, #60]	; 0x3c
   1e138:	b	1de7c <__assert_fail@plt+0xc924>
   1e13c:	ldr	r3, [sp, #48]	; 0x30
   1e140:	tst	r2, #1
   1e144:	movne	r3, #0
   1e148:	str	r3, [sp, #48]	; 0x30
   1e14c:	b	1dd98 <__assert_fail@plt+0xc840>
   1e150:	str	r5, [sp, #116]	; 0x74
   1e154:	mov	r1, r5
   1e158:	add	r0, sp, #148	; 0x94
   1e15c:	ldr	r2, [sp, #480]	; 0x1e0
   1e160:	bl	1ac44 <__assert_fail@plt+0x96ec>
   1e164:	subs	r3, r0, #0
   1e168:	str	r3, [sp, #36]	; 0x24
   1e16c:	bne	1edd0 <__assert_fail@plt+0xd878>
   1e170:	ldr	r3, [sp, #88]	; 0x58
   1e174:	cmp	r3, #1
   1e178:	beq	1e198 <__assert_fail@plt+0xcc40>
   1e17c:	ldr	r3, [sp, #176]	; 0xb0
   1e180:	cmp	r3, #0
   1e184:	beq	1e198 <__assert_fail@plt+0xcc40>
   1e188:	ldr	r3, [sp, #156]	; 0x9c
   1e18c:	ldr	r3, [r3]
   1e190:	cmn	r3, #1
   1e194:	beq	1e9c8 <__assert_fail@plt+0xd470>
   1e198:	ldr	r4, [sp, #232]	; 0xe8
   1e19c:	mov	r3, #0
   1e1a0:	ldr	sl, [r4, #36]	; 0x24
   1e1a4:	str	r3, [sp, #124]	; 0x7c
   1e1a8:	str	r3, [sp, #252]	; 0xfc
   1e1ac:	str	r3, [sp, #256]	; 0x100
   1e1b0:	str	r3, [sp, #268]	; 0x10c
   1e1b4:	ldr	r3, [sp, #188]	; 0xbc
   1e1b8:	mov	r2, r3
   1e1bc:	ldrsb	r3, [sl, #52]	; 0x34
   1e1c0:	str	r2, [sp, #12]
   1e1c4:	cmp	r3, #0
   1e1c8:	bge	1e208 <__assert_fail@plt+0xccb0>
   1e1cc:	sub	r1, r2, #1
   1e1d0:	add	r0, sp, #148	; 0x94
   1e1d4:	ldr	r2, [sp, #236]	; 0xec
   1e1d8:	bl	1a9f4 <__assert_fail@plt+0x949c>
   1e1dc:	tst	r0, #1
   1e1e0:	bne	1ed30 <__assert_fail@plt+0xd7d8>
   1e1e4:	cmp	r0, #0
   1e1e8:	beq	1e208 <__assert_fail@plt+0xccb0>
   1e1ec:	and	r3, r0, #6
   1e1f0:	cmp	r3, #6
   1e1f4:	beq	1eec0 <__assert_fail@plt+0xd968>
   1e1f8:	tst	r0, #2
   1e1fc:	bne	1ee14 <__assert_fail@plt+0xd8bc>
   1e200:	tst	r0, #4
   1e204:	bne	1ee3c <__assert_fail@plt+0xd8e4>
   1e208:	ldr	r3, [sp, #248]	; 0xf8
   1e20c:	cmp	r3, #0
   1e210:	beq	1ead8 <__assert_fail@plt+0xd580>
   1e214:	ldr	r2, [r4, #76]	; 0x4c
   1e218:	ldr	r1, [sp, #12]
   1e21c:	cmp	r2, #0
   1e220:	str	sl, [r3, r1, lsl #2]
   1e224:	bne	1ee7c <__assert_fail@plt+0xd924>
   1e228:	ldrb	r3, [sl, #52]	; 0x34
   1e22c:	ldr	r2, [sp, #104]	; 0x68
   1e230:	str	r2, [sp, #16]
   1e234:	ubfx	r3, r3, #4, #1
   1e238:	cmp	r3, #0
   1e23c:	mvneq	fp, #0
   1e240:	streq	r3, [sp, #28]
   1e244:	bne	1eddc <__assert_fail@plt+0xd884>
   1e248:	ldr	r3, [sp, #100]	; 0x64
   1e24c:	str	fp, [sp, #24]
   1e250:	ldr	r4, [sp, #188]	; 0xbc
   1e254:	str	r3, [sp, #40]	; 0x28
   1e258:	b	1e2bc <__assert_fail@plt+0xcd64>
   1e25c:	ldrb	r3, [r5, #52]	; 0x34
   1e260:	ldr	r2, [sp, #16]
   1e264:	ldr	r1, [sp, #12]
   1e268:	ldr	r4, [sp, #188]	; 0xbc
   1e26c:	cmp	sl, r5
   1e270:	movne	r2, #0
   1e274:	andeq	r2, r2, #1
   1e278:	cmp	r2, #0
   1e27c:	movne	r1, r8
   1e280:	tst	r3, #16
   1e284:	str	r1, [sp, #12]
   1e288:	str	r2, [sp, #16]
   1e28c:	beq	1e2b8 <__assert_fail@plt+0xcd60>
   1e290:	tst	r3, #128	; 0x80
   1e294:	bne	1e714 <__assert_fail@plt+0xd1bc>
   1e298:	ldr	r3, [sp, #20]
   1e29c:	cmp	r3, #0
   1e2a0:	beq	1ee0c <__assert_fail@plt+0xd8b4>
   1e2a4:	ldr	r3, [sp, #20]
   1e2a8:	str	r4, [sp, #24]
   1e2ac:	str	r3, [sp, #28]
   1e2b0:	mov	r3, #0
   1e2b4:	str	r3, [sp, #40]	; 0x28
   1e2b8:	mov	sl, r5
   1e2bc:	ldr	r3, [sp, #204]	; 0xcc
   1e2c0:	cmp	r3, r4
   1e2c4:	ble	1e70c <__assert_fail@plt+0xd1b4>
   1e2c8:	ldr	r3, [sp, #184]	; 0xb8
   1e2cc:	add	r8, r4, #1
   1e2d0:	cmp	r8, r3
   1e2d4:	bge	1e730 <__assert_fail@plt+0xd1d8>
   1e2d8:	ldr	r3, [sp, #176]	; 0xb0
   1e2dc:	cmp	r8, r3
   1e2e0:	bge	1e99c <__assert_fail@plt+0xd444>
   1e2e4:	ldrb	r3, [sl, #52]	; 0x34
   1e2e8:	tst	r3, #32
   1e2ec:	bne	1e764 <__assert_fail@plt+0xd20c>
   1e2f0:	ldr	r3, [sp, #152]	; 0x98
   1e2f4:	add	r2, r4, #1
   1e2f8:	str	r2, [sp, #188]	; 0xbc
   1e2fc:	ldrb	r4, [r3, r4]
   1e300:	ldr	r3, [sl, #44]	; 0x2c
   1e304:	cmp	r3, #0
   1e308:	beq	1e96c <__assert_fail@plt+0xd414>
   1e30c:	ldr	r5, [r3, r4, lsl #2]
   1e310:	ldr	r3, [sp, #248]	; 0xf8
   1e314:	cmp	r3, #0
   1e318:	beq	1e330 <__assert_fail@plt+0xcdd8>
   1e31c:	mov	r2, r5
   1e320:	add	r1, sp, #148	; 0x94
   1e324:	add	r0, sp, #124	; 0x7c
   1e328:	bl	1d8ac <__assert_fail@plt+0xc354>
   1e32c:	mov	r5, r0
   1e330:	cmp	r5, #0
   1e334:	bne	1e25c <__assert_fail@plt+0xcd04>
   1e338:	ldr	r3, [sp, #124]	; 0x7c
   1e33c:	ldr	r4, [sp, #248]	; 0xf8
   1e340:	cmp	r3, #0
   1e344:	bne	1ea40 <__assert_fail@plt+0xd4e8>
   1e348:	cmp	r4, #0
   1e34c:	beq	1e70c <__assert_fail@plt+0xd1b4>
   1e350:	ldr	r2, [sp, #28]
   1e354:	ldr	r3, [sp, #60]	; 0x3c
   1e358:	eor	r3, r3, #1
   1e35c:	tst	r2, r3
   1e360:	bne	1e70c <__assert_fail@plt+0xd1b4>
   1e364:	ldr	r3, [sp, #188]	; 0xbc
   1e368:	mov	r1, #0
   1e36c:	ldr	r0, [sp, #252]	; 0xfc
   1e370:	add	r4, r4, r3, lsl #2
   1e374:	b	1e38c <__assert_fail@plt+0xce34>
   1e378:	ldr	ip, [r4, #4]!
   1e37c:	mov	r3, r2
   1e380:	mov	r1, #1
   1e384:	cmp	ip, #0
   1e388:	bne	1e6d0 <__assert_fail@plt+0xd178>
   1e38c:	add	r2, r3, #1
   1e390:	cmp	r0, r2
   1e394:	bge	1e378 <__assert_fail@plt+0xce20>
   1e398:	ldr	fp, [sp, #24]
   1e39c:	cmp	r1, #0
   1e3a0:	strne	r3, [sp, #188]	; 0xbc
   1e3a4:	ldr	r2, [sp, #40]	; 0x28
   1e3a8:	cmp	r2, #0
   1e3ac:	beq	1e3c0 <__assert_fail@plt+0xce68>
   1e3b0:	ldr	r3, [r2]
   1e3b4:	ldr	r1, [sp, #12]
   1e3b8:	add	r3, r3, r1
   1e3bc:	str	r3, [r2]
   1e3c0:	cmn	fp, #1
   1e3c4:	beq	1e9bc <__assert_fail@plt+0xd464>
   1e3c8:	cmn	fp, #2
   1e3cc:	ldr	r4, [sp, #248]	; 0xf8
   1e3d0:	beq	1ea40 <__assert_fail@plt+0xd4e8>
   1e3d4:	ldr	r3, [sp, #32]
   1e3d8:	str	fp, [sp, #240]	; 0xf0
   1e3dc:	ldrb	r3, [r3, #28]
   1e3e0:	tst	r3, #16
   1e3e4:	bne	1ea7c <__assert_fail@plt+0xd524>
   1e3e8:	ldr	r2, [sp, #472]	; 0x1d8
   1e3ec:	cmp	r2, #1
   1e3f0:	bls	1eae8 <__assert_fail@plt+0xd590>
   1e3f4:	mov	r2, fp
   1e3f8:	add	r0, sp, #148	; 0x94
   1e3fc:	ldr	r1, [r4, fp, lsl #2]
   1e400:	bl	1b4b0 <__assert_fail@plt+0x9f58>
   1e404:	ldr	r3, [sp, #68]	; 0x44
   1e408:	ldrb	r3, [r3, #88]	; 0x58
   1e40c:	str	r0, [sp, #244]	; 0xf4
   1e410:	tst	r3, #1
   1e414:	bne	1e428 <__assert_fail@plt+0xced0>
   1e418:	ldr	r3, [sp, #68]	; 0x44
   1e41c:	ldr	r3, [r3, #76]	; 0x4c
   1e420:	cmp	r3, #0
   1e424:	beq	1f7f0 <__assert_fail@plt+0xe298>
   1e428:	ldr	r3, [sp, #232]	; 0xe8
   1e42c:	cmn	fp, #-1073741822	; 0xc0000002
   1e430:	ldr	r9, [sp, #244]	; 0xf4
   1e434:	str	r3, [sp, #12]
   1e438:	bhi	1ea40 <__assert_fail@plt+0xd4e8>
   1e43c:	add	r5, fp, #1
   1e440:	lsl	r4, r5, #2
   1e444:	mov	r0, r4
   1e448:	bl	26190 <__assert_fail@plt+0x14c38>
   1e44c:	subs	sl, r0, #0
   1e450:	beq	1ee1c <__assert_fail@plt+0xd8c4>
   1e454:	ldr	r3, [sp, #12]
   1e458:	ldr	r6, [r3, #76]	; 0x4c
   1e45c:	cmp	r6, #0
   1e460:	beq	1eb18 <__assert_fail@plt+0xd5c0>
   1e464:	mov	r0, r4
   1e468:	bl	26190 <__assert_fail@plt+0x14c38>
   1e46c:	cmp	r0, #0
   1e470:	mov	r6, r0
   1e474:	str	r0, [sp, #24]
   1e478:	beq	1eef4 <__assert_fail@plt+0xd99c>
   1e47c:	add	r4, sp, #300	; 0x12c
   1e480:	mov	r8, #0
   1e484:	lsl	r7, r5, #2
   1e488:	mov	r1, #0
   1e48c:	mov	r0, r6
   1e490:	mov	r2, r7
   1e494:	bl	1145c <memset@plt>
   1e498:	add	r1, sp, #284	; 0x11c
   1e49c:	add	r0, sp, #148	; 0x94
   1e4a0:	str	sl, [sp, #284]	; 0x11c
   1e4a4:	str	r6, [sp, #288]	; 0x120
   1e4a8:	str	r9, [sp, #292]	; 0x124
   1e4ac:	str	fp, [sp, #296]	; 0x128
   1e4b0:	str	r8, [r4]
   1e4b4:	str	r8, [r4, #4]
   1e4b8:	str	r8, [r4, #8]
   1e4bc:	bl	1da50 <__assert_fail@plt+0xc4f8>
   1e4c0:	mov	r3, r0
   1e4c4:	ldr	r0, [sp, #308]	; 0x134
   1e4c8:	str	r3, [sp, #16]
   1e4cc:	bl	13b9c <__assert_fail@plt+0x2644>
   1e4d0:	ldr	r3, [sp, #16]
   1e4d4:	cmp	r3, #0
   1e4d8:	bne	1eec8 <__assert_fail@plt+0xd970>
   1e4dc:	ldr	r3, [sl]
   1e4e0:	cmp	r3, #0
   1e4e4:	bne	1ef1c <__assert_fail@plt+0xd9c4>
   1e4e8:	ldr	r3, [r6]
   1e4ec:	cmp	r3, #0
   1e4f0:	bne	1ef1c <__assert_fail@plt+0xd9c4>
   1e4f4:	ldr	r3, [sp, #248]	; 0xf8
   1e4f8:	sub	r7, r7, #4
   1e4fc:	add	r3, r3, r7
   1e500:	subs	fp, fp, #1
   1e504:	bcc	1ed50 <__assert_fail@plt+0xd7f8>
   1e508:	ldr	r1, [r3, #-4]!
   1e50c:	cmp	r1, #0
   1e510:	beq	1e500 <__assert_fail@plt+0xcfa8>
   1e514:	ldrb	r2, [r1, #52]	; 0x34
   1e518:	tst	r2, #16
   1e51c:	beq	1e500 <__assert_fail@plt+0xcfa8>
   1e520:	mov	r2, fp
   1e524:	add	r0, sp, #148	; 0x94
   1e528:	bl	1b4b0 <__assert_fail@plt+0x9f58>
   1e52c:	add	r5, fp, #1
   1e530:	mov	r9, r0
   1e534:	b	1e484 <__assert_fail@plt+0xcf2c>
   1e538:	ldr	r3, [sp, #64]	; 0x40
   1e53c:	cmp	r3, r5
   1e540:	ble	1e5ac <__assert_fail@plt+0xd054>
   1e544:	ldr	r3, [sp, #56]	; 0x38
   1e548:	ldr	r1, [sp, #80]	; 0x50
   1e54c:	ldrb	r2, [r3, r5]
   1e550:	add	r3, r3, r5
   1e554:	ldrb	r2, [r1, r2]
   1e558:	ldr	r1, [sp, #48]	; 0x30
   1e55c:	ldrb	r2, [r1, r2]
   1e560:	cmp	r2, #0
   1e564:	bne	1e154 <__assert_fail@plt+0xcbfc>
   1e568:	ldr	ip, [sp, #48]	; 0x30
   1e56c:	ldr	r2, [sp, #56]	; 0x38
   1e570:	ldr	r1, [sp, #64]	; 0x40
   1e574:	ldr	lr, [sp, #80]	; 0x50
   1e578:	sub	r0, r2, #1
   1e57c:	rsb	r2, r2, #1
   1e580:	add	r0, r0, r1
   1e584:	b	1e59c <__assert_fail@plt+0xd044>
   1e588:	ldrb	r1, [r3, #1]!
   1e58c:	ldrb	r1, [lr, r1]
   1e590:	ldrb	r1, [ip, r1]
   1e594:	cmp	r1, #0
   1e598:	bne	1e150 <__assert_fail@plt+0xcbf8>
   1e59c:	cmp	r3, r0
   1e5a0:	add	r5, r2, r3
   1e5a4:	bne	1e588 <__assert_fail@plt+0xd030>
   1e5a8:	str	r5, [sp, #116]	; 0x74
   1e5ac:	ldr	r3, [sp, #64]	; 0x40
   1e5b0:	cmp	r3, r5
   1e5b4:	bne	1e154 <__assert_fail@plt+0xcbfc>
   1e5b8:	ldr	r2, [sp, #72]	; 0x48
   1e5bc:	cmp	r2, r3
   1e5c0:	ldrgt	r2, [sp, #56]	; 0x38
   1e5c4:	movle	r3, #0
   1e5c8:	ldrbgt	r3, [r2, r3]
   1e5cc:	ldr	r2, [sp, #80]	; 0x50
   1e5d0:	cmp	r2, #0
   1e5d4:	ldrbne	r3, [r2, r3]
   1e5d8:	ldr	r2, [sp, #48]	; 0x30
   1e5dc:	ldrb	r3, [r2, r3]
   1e5e0:	cmp	r3, #0
   1e5e4:	bne	1e154 <__assert_fail@plt+0xcbfc>
   1e5e8:	ldr	r9, [sp, #68]	; 0x44
   1e5ec:	mov	r3, #1
   1e5f0:	str	r3, [sp, #36]	; 0x24
   1e5f4:	ldr	r4, [sp, #248]	; 0xf8
   1e5f8:	b	1ea4c <__assert_fail@plt+0xd4f4>
   1e5fc:	ldr	r3, [sp, #64]	; 0x40
   1e600:	cmp	r3, r5
   1e604:	ble	1e5ac <__assert_fail@plt+0xd054>
   1e608:	ldr	r1, [sp, #48]	; 0x30
   1e60c:	ldr	r3, [sp, #56]	; 0x38
   1e610:	ldrb	r2, [r3, r5]
   1e614:	add	r3, r3, r5
   1e618:	ldrb	r2, [r1, r2]
   1e61c:	cmp	r2, #0
   1e620:	bne	1e154 <__assert_fail@plt+0xcbfc>
   1e624:	ldr	ip, [sp, #48]	; 0x30
   1e628:	ldr	r2, [sp, #56]	; 0x38
   1e62c:	ldr	r1, [sp, #64]	; 0x40
   1e630:	sub	r0, r2, #1
   1e634:	rsb	r2, r2, #1
   1e638:	add	r0, r0, r1
   1e63c:	b	1e650 <__assert_fail@plt+0xd0f8>
   1e640:	ldrb	r1, [r3, #1]!
   1e644:	ldrb	r1, [ip, r1]
   1e648:	cmp	r1, #0
   1e64c:	bne	1e150 <__assert_fail@plt+0xcbf8>
   1e650:	cmp	r0, r3
   1e654:	add	r5, r2, r3
   1e658:	bne	1e640 <__assert_fail@plt+0xd0e8>
   1e65c:	str	r5, [sp, #116]	; 0x74
   1e660:	b	1e5ac <__assert_fail@plt+0xd054>
   1e664:	ldr	r3, [sp, #76]	; 0x4c
   1e668:	cmp	r3, r5
   1e66c:	bgt	1e5e8 <__assert_fail@plt+0xd090>
   1e670:	mov	r1, #0
   1e674:	mov	r3, r5
   1e678:	ldr	ip, [sp, #48]	; 0x30
   1e67c:	ldr	r6, [sp, #56]	; 0x38
   1e680:	ldr	lr, [sp, #72]	; 0x48
   1e684:	ldr	r4, [sp, #76]	; 0x4c
   1e688:	ldr	r0, [sp, #80]	; 0x50
   1e68c:	b	1e6a0 <__assert_fail@plt+0xd148>
   1e690:	sub	r3, r3, #1
   1e694:	mov	r1, #1
   1e698:	cmp	r3, r4
   1e69c:	blt	1ed88 <__assert_fail@plt+0xd830>
   1e6a0:	cmp	lr, r3
   1e6a4:	mov	r2, #0
   1e6a8:	ldrbgt	r2, [r6, r3]
   1e6ac:	cmp	r0, #0
   1e6b0:	ldrbne	r2, [r0, r2]
   1e6b4:	ldrb	r2, [ip, r2]
   1e6b8:	cmp	r2, #0
   1e6bc:	beq	1e690 <__assert_fail@plt+0xd138>
   1e6c0:	cmp	r1, #0
   1e6c4:	movne	r5, r3
   1e6c8:	strne	r3, [sp, #116]	; 0x74
   1e6cc:	b	1e154 <__assert_fail@plt+0xcbfc>
   1e6d0:	mov	r2, #0
   1e6d4:	add	r1, sp, #148	; 0x94
   1e6d8:	str	r3, [sp, #188]	; 0xbc
   1e6dc:	add	r0, sp, #124	; 0x7c
   1e6e0:	bl	1d8ac <__assert_fail@plt+0xc354>
   1e6e4:	ldr	r3, [sp, #124]	; 0x7c
   1e6e8:	cmp	r3, #0
   1e6ec:	bne	1e700 <__assert_fail@plt+0xd1a8>
   1e6f0:	cmp	r0, #0
   1e6f4:	bne	1ee04 <__assert_fail@plt+0xd8ac>
   1e6f8:	ldr	r4, [sp, #248]	; 0xf8
   1e6fc:	b	1e364 <__assert_fail@plt+0xce0c>
   1e700:	cmp	r0, #0
   1e704:	mov	r5, r0
   1e708:	bne	1e25c <__assert_fail@plt+0xcd04>
   1e70c:	ldr	fp, [sp, #24]
   1e710:	b	1e3a4 <__assert_fail@plt+0xce4c>
   1e714:	mov	r2, r4
   1e718:	mov	r1, r5
   1e71c:	add	r0, sp, #148	; 0x94
   1e720:	bl	1b4b0 <__assert_fail@plt+0x9f58>
   1e724:	cmp	r0, #0
   1e728:	beq	1e2b8 <__assert_fail@plt+0xcd60>
   1e72c:	b	1e298 <__assert_fail@plt+0xcd40>
   1e730:	ldr	r2, [sp, #196]	; 0xc4
   1e734:	cmp	r3, r2
   1e738:	bge	1e2d8 <__assert_fail@plt+0xcd80>
   1e73c:	add	r1, r4, #2
   1e740:	add	r0, sp, #148	; 0x94
   1e744:	bl	17048 <__assert_fail@plt+0x5af0>
   1e748:	cmp	r0, #0
   1e74c:	str	r0, [sp, #124]	; 0x7c
   1e750:	bne	1ed3c <__assert_fail@plt+0xd7e4>
   1e754:	ldrb	r3, [sl, #52]	; 0x34
   1e758:	ldr	r4, [sp, #188]	; 0xbc
   1e75c:	tst	r3, #32
   1e760:	beq	1e2f0 <__assert_fail@plt+0xcd98>
   1e764:	ldr	fp, [sl, #8]
   1e768:	ldr	r6, [sp, #232]	; 0xe8
   1e76c:	cmp	fp, #0
   1e770:	ble	1ea70 <__assert_fail@plt+0xd518>
   1e774:	add	r3, r6, #128	; 0x80
   1e778:	mov	r7, #0
   1e77c:	str	r3, [sp, #44]	; 0x2c
   1e780:	str	r8, [sp, #84]	; 0x54
   1e784:	b	1e8a4 <__assert_fail@plt+0xd34c>
   1e788:	tst	r0, #1
   1e78c:	beq	1e898 <__assert_fail@plt+0xd340>
   1e790:	tst	r5, #8
   1e794:	bne	1e898 <__assert_fail@plt+0xd340>
   1e798:	tst	r5, #32
   1e79c:	beq	1e7a8 <__assert_fail@plt+0xd250>
   1e7a0:	tst	r0, #2
   1e7a4:	beq	1e898 <__assert_fail@plt+0xd340>
   1e7a8:	tst	r5, #128	; 0x80
   1e7ac:	beq	1e7b8 <__assert_fail@plt+0xd260>
   1e7b0:	tst	r0, #8
   1e7b4:	beq	1e898 <__assert_fail@plt+0xd340>
   1e7b8:	mov	r0, r8
   1e7bc:	add	r3, sp, #148	; 0x94
   1e7c0:	str	r4, [sp]
   1e7c4:	mov	r2, r9
   1e7c8:	ldr	r1, [sp, #44]	; 0x2c
   1e7cc:	bl	1c6b0 <__assert_fail@plt+0xb158>
   1e7d0:	subs	r4, r0, #0
   1e7d4:	beq	1e890 <__assert_fail@plt+0xd338>
   1e7d8:	ldr	r2, [sp, #188]	; 0xbc
   1e7dc:	add	r0, sp, #148	; 0x94
   1e7e0:	ldr	r3, [sp, #268]	; 0x10c
   1e7e4:	cmp	r3, r4
   1e7e8:	movlt	r3, r4
   1e7ec:	add	r4, r4, r2
   1e7f0:	mov	r1, r4
   1e7f4:	str	r3, [sp, #268]	; 0x10c
   1e7f8:	bl	17bdc <__assert_fail@plt+0x6684>
   1e7fc:	cmp	r0, #0
   1e800:	str	r0, [sp, #136]	; 0x88
   1e804:	bne	1e9fc <__assert_fail@plt+0xd4a4>
   1e808:	ldr	r3, [r6, #12]
   1e80c:	ldr	r5, [sp, #248]	; 0xf8
   1e810:	ldr	r2, [r6, #24]
   1e814:	ldr	r3, [r3, r9, lsl #2]
   1e818:	ldr	r1, [r5, r4, lsl #2]
   1e81c:	add	r3, r3, r3, lsl #1
   1e820:	lsl	r3, r3, #2
   1e824:	cmp	r1, #0
   1e828:	add	ip, r2, r3
   1e82c:	beq	1e900 <__assert_fail@plt+0xd3a8>
   1e830:	mov	r2, ip
   1e834:	add	r0, sp, #284	; 0x11c
   1e838:	ldr	r1, [r1, #40]	; 0x28
   1e83c:	bl	18a64 <__assert_fail@plt+0x750c>
   1e840:	cmp	r0, #0
   1e844:	str	r0, [sp, #136]	; 0x88
   1e848:	bne	1e9fc <__assert_fail@plt+0xd4a4>
   1e84c:	sub	r1, r4, #1
   1e850:	add	r0, sp, #148	; 0x94
   1e854:	ldr	r2, [sp, #236]	; 0xec
   1e858:	bl	1a9f4 <__assert_fail@plt+0x949c>
   1e85c:	ldr	r5, [sp, #248]	; 0xf8
   1e860:	mov	r3, r0
   1e864:	add	r2, sp, #284	; 0x11c
   1e868:	mov	r1, r6
   1e86c:	add	r0, sp, #136	; 0x88
   1e870:	bl	18bd0 <__assert_fail@plt+0x7678>
   1e874:	str	r0, [r5, r4, lsl #2]
   1e878:	ldr	r0, [sp, #292]	; 0x124
   1e87c:	bl	13b9c <__assert_fail@plt+0x2644>
   1e880:	ldr	r3, [sp, #248]	; 0xf8
   1e884:	ldr	r2, [r3, r4, lsl #2]
   1e888:	cmp	r2, #0
   1e88c:	beq	1e958 <__assert_fail@plt+0xd400>
   1e890:	ldr	fp, [sl, #8]
   1e894:	ldr	r4, [sp, #188]	; 0xbc
   1e898:	add	r7, r7, #1
   1e89c:	cmp	r7, fp
   1e8a0:	bge	1ea6c <__assert_fail@plt+0xd514>
   1e8a4:	ldr	r2, [sl, #12]
   1e8a8:	ldr	r8, [r6]
   1e8ac:	ldr	r9, [r2, r7, lsl #2]
   1e8b0:	add	r2, r8, r9, lsl #3
   1e8b4:	ldrb	r1, [r2, #6]
   1e8b8:	tst	r1, #16
   1e8bc:	beq	1e898 <__assert_fail@plt+0xd340>
   1e8c0:	ldr	r5, [r2, #4]
   1e8c4:	ldr	r3, [sp, #52]	; 0x34
   1e8c8:	tst	r3, r5
   1e8cc:	beq	1e7b8 <__assert_fail@plt+0xd260>
   1e8d0:	ubfx	r5, r5, #8, #10
   1e8d4:	mov	r1, r4
   1e8d8:	add	r0, sp, #148	; 0x94
   1e8dc:	ldr	r2, [sp, #236]	; 0xec
   1e8e0:	bl	1a9f4 <__assert_fail@plt+0x949c>
   1e8e4:	tst	r5, #4
   1e8e8:	bne	1e788 <__assert_fail@plt+0xd230>
   1e8ec:	tst	r5, #8
   1e8f0:	beq	1e798 <__assert_fail@plt+0xd240>
   1e8f4:	tst	r0, #1
   1e8f8:	beq	1e798 <__assert_fail@plt+0xd240>
   1e8fc:	b	1e898 <__assert_fail@plt+0xd340>
   1e900:	add	r2, r2, r3
   1e904:	sub	r1, r4, #1
   1e908:	ldrd	r2, [r2]
   1e90c:	add	r0, sp, #148	; 0x94
   1e910:	mov	r8, r2
   1e914:	mov	r9, r3
   1e918:	ldr	r2, [sp, #236]	; 0xec
   1e91c:	add	r3, sp, #284	; 0x11c
   1e920:	strd	r8, [r3]
   1e924:	ldr	r3, [ip, #8]
   1e928:	str	r3, [sp, #292]	; 0x124
   1e92c:	bl	1a9f4 <__assert_fail@plt+0x949c>
   1e930:	mov	r3, r0
   1e934:	add	r2, sp, #284	; 0x11c
   1e938:	mov	r1, r6
   1e93c:	add	r0, sp, #136	; 0x88
   1e940:	bl	18bd0 <__assert_fail@plt+0x7678>
   1e944:	ldr	r3, [sp, #248]	; 0xf8
   1e948:	str	r0, [r5, r4, lsl #2]
   1e94c:	ldr	r2, [r3, r4, lsl #2]
   1e950:	cmp	r2, #0
   1e954:	bne	1e890 <__assert_fail@plt+0xd338>
   1e958:	ldr	r0, [sp, #136]	; 0x88
   1e95c:	cmp	r0, #0
   1e960:	beq	1e890 <__assert_fail@plt+0xd338>
   1e964:	ldr	r8, [sp, #84]	; 0x54
   1e968:	b	1ea04 <__assert_fail@plt+0xd4ac>
   1e96c:	ldr	r5, [sl, #48]	; 0x30
   1e970:	cmp	r5, #0
   1e974:	beq	1eaa4 <__assert_fail@plt+0xd54c>
   1e978:	ldr	r1, [sp, #188]	; 0xbc
   1e97c:	add	r0, sp, #148	; 0x94
   1e980:	ldr	r2, [sp, #236]	; 0xec
   1e984:	sub	r1, r1, #1
   1e988:	bl	1a9f4 <__assert_fail@plt+0x949c>
   1e98c:	tst	r0, #1
   1e990:	addne	r4, r4, #256	; 0x100
   1e994:	ldr	r5, [r5, r4, lsl #2]
   1e998:	b	1e310 <__assert_fail@plt+0xcdb8>
   1e99c:	ldr	r2, [sp, #196]	; 0xc4
   1e9a0:	cmp	r3, r2
   1e9a4:	bge	1e2e4 <__assert_fail@plt+0xcd8c>
   1e9a8:	b	1e73c <__assert_fail@plt+0xd1e4>
   1e9ac:	mov	r0, sl
   1e9b0:	bl	13b9c <__assert_fail@plt+0x2644>
   1e9b4:	mov	r0, r4
   1e9b8:	bl	13b9c <__assert_fail@plt+0x2644>
   1e9bc:	add	r0, sp, #148	; 0x94
   1e9c0:	bl	17538 <__assert_fail@plt+0x5fe0>
   1e9c4:	ldr	r5, [sp, #116]	; 0x74
   1e9c8:	ldr	r2, [sp, #76]	; 0x4c
   1e9cc:	ldr	r3, [sp, #96]	; 0x60
   1e9d0:	add	r5, r5, r3
   1e9d4:	ldr	r3, [sp, #64]	; 0x40
   1e9d8:	str	r5, [sp, #116]	; 0x74
   1e9dc:	cmp	r5, r3
   1e9e0:	movle	r3, #0
   1e9e4:	movgt	r3, #1
   1e9e8:	cmp	r5, r2
   1e9ec:	orrlt	r3, r3, #1
   1e9f0:	cmp	r3, #0
   1e9f4:	beq	1e108 <__assert_fail@plt+0xcbb0>
   1e9f8:	b	1e5e8 <__assert_fail@plt+0xd090>
   1e9fc:	ldr	r8, [sp, #84]	; 0x54
   1ea00:	ldr	r3, [sp, #248]	; 0xf8
   1ea04:	cmp	r3, #0
   1ea08:	str	r0, [sp, #124]	; 0x7c
   1ea0c:	beq	1eacc <__assert_fail@plt+0xd574>
   1ea10:	mov	r5, #0
   1ea14:	b	1e31c <__assert_fail@plt+0xcdc4>
   1ea18:	mov	r3, #1
   1ea1c:	str	r3, [sp, #36]	; 0x24
   1ea20:	ldr	r0, [sp, #36]	; 0x24
   1ea24:	add	sp, sp, #428	; 0x1ac
   1ea28:	ldrd	r4, [sp]
   1ea2c:	ldrd	r6, [sp, #8]
   1ea30:	ldrd	r8, [sp, #16]
   1ea34:	ldrd	sl, [sp, #24]
   1ea38:	add	sp, sp, #32
   1ea3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea40:	ldr	r9, [sp, #68]	; 0x44
   1ea44:	mov	r3, #12
   1ea48:	str	r3, [sp, #36]	; 0x24
   1ea4c:	mov	r0, r4
   1ea50:	bl	13b9c <__assert_fail@plt+0x2644>
   1ea54:	ldr	r3, [r9, #76]	; 0x4c
   1ea58:	cmp	r3, #0
   1ea5c:	bne	1ed14 <__assert_fail@plt+0xd7bc>
   1ea60:	add	r0, sp, #148	; 0x94
   1ea64:	bl	174f0 <__assert_fail@plt+0x5f98>
   1ea68:	b	1ea20 <__assert_fail@plt+0xd4c8>
   1ea6c:	ldr	r8, [sp, #84]	; 0x54
   1ea70:	mov	r3, #0
   1ea74:	str	r3, [sp, #124]	; 0x7c
   1ea78:	b	1e2f0 <__assert_fail@plt+0xcd98>
   1ea7c:	ldr	r9, [sp, #68]	; 0x44
   1ea80:	ldr	r3, [r9, #76]	; 0x4c
   1ea84:	cmp	r3, #0
   1ea88:	beq	1eb94 <__assert_fail@plt+0xd63c>
   1ea8c:	mov	r2, fp
   1ea90:	add	r0, sp, #148	; 0x94
   1ea94:	ldr	r1, [r4, fp, lsl #2]
   1ea98:	bl	1b4b0 <__assert_fail@plt+0x9f58>
   1ea9c:	str	r0, [sp, #244]	; 0xf4
   1eaa0:	b	1e428 <__assert_fail@plt+0xced0>
   1eaa4:	mov	r1, sl
   1eaa8:	ldr	r0, [sp, #232]	; 0xe8
   1eaac:	bl	19eec <__assert_fail@plt+0x8994>
   1eab0:	cmp	r0, #0
   1eab4:	bne	1e300 <__assert_fail@plt+0xcda8>
   1eab8:	ldr	r3, [sp, #248]	; 0xf8
   1eabc:	mov	r2, #12
   1eac0:	str	r2, [sp, #124]	; 0x7c
   1eac4:	cmp	r3, #0
   1eac8:	bne	1ea10 <__assert_fail@plt+0xd4b8>
   1eacc:	mov	r4, #0
   1ead0:	ldr	r9, [sp, #68]	; 0x44
   1ead4:	b	1ea44 <__assert_fail@plt+0xd4ec>
   1ead8:	ldr	r3, [sp, #104]	; 0x68
   1eadc:	str	r3, [sp, #16]
   1eae0:	ldrb	r3, [sl, #52]	; 0x34
   1eae4:	b	1e234 <__assert_fail@plt+0xccdc>
   1eae8:	ldr	r2, [sp, #68]	; 0x44
   1eaec:	ldr	r2, [r2, #76]	; 0x4c
   1eaf0:	cmp	r2, #0
   1eaf4:	bne	1ea8c <__assert_fail@plt+0xd534>
   1eaf8:	ldr	r9, [sp, #68]	; 0x44
   1eafc:	ldr	r2, [sp, #472]	; 0x1d8
   1eb00:	cmp	r2, #0
   1eb04:	bne	1ebd8 <__assert_fail@plt+0xd680>
   1eb08:	str	r2, [sp, #36]	; 0x24
   1eb0c:	b	1ea4c <__assert_fail@plt+0xd4f4>
   1eb10:	ldr	r2, [sp, #72]	; 0x48
   1eb14:	b	1df4c <__assert_fail@plt+0xc9f4>
   1eb18:	add	r1, sp, #284	; 0x11c
   1eb1c:	add	r0, sp, #148	; 0x94
   1eb20:	str	sl, [sp, #284]	; 0x11c
   1eb24:	str	r6, [sp, #288]	; 0x120
   1eb28:	str	r9, [sp, #292]	; 0x124
   1eb2c:	str	fp, [sp, #296]	; 0x128
   1eb30:	str	r6, [sp, #300]	; 0x12c
   1eb34:	str	r6, [sp, #304]	; 0x130
   1eb38:	str	r6, [sp, #308]	; 0x134
   1eb3c:	bl	1da50 <__assert_fail@plt+0xc4f8>
   1eb40:	mov	r7, r0
   1eb44:	ldr	r0, [sp, #308]	; 0x134
   1eb48:	bl	13b9c <__assert_fail@plt+0x2644>
   1eb4c:	cmp	r7, #0
   1eb50:	bne	1ef14 <__assert_fail@plt+0xd9bc>
   1eb54:	ldr	r4, [sl]
   1eb58:	cmp	r4, #0
   1eb5c:	beq	1e9ac <__assert_fail@plt+0xd454>
   1eb60:	mov	r8, fp
   1eb64:	mov	fp, r9
   1eb68:	ldr	r9, [sp, #68]	; 0x44
   1eb6c:	ldr	r0, [sp, #248]	; 0xf8
   1eb70:	bl	13b9c <__assert_fail@plt+0x2644>
   1eb74:	mov	r0, #0
   1eb78:	str	r8, [sp, #240]	; 0xf0
   1eb7c:	str	fp, [sp, #244]	; 0xf4
   1eb80:	str	sl, [sp, #248]	; 0xf8
   1eb84:	bl	13b9c <__assert_fail@plt+0x2644>
   1eb88:	mov	r0, #0
   1eb8c:	bl	13b9c <__assert_fail@plt+0x2644>
   1eb90:	ldr	r4, [sp, #248]	; 0xf8
   1eb94:	ldr	r3, [sp, #472]	; 0x1d8
   1eb98:	cmp	r3, #0
   1eb9c:	beq	1ea4c <__assert_fail@plt+0xd4f4>
   1eba0:	ldr	r3, [sp, #472]	; 0x1d8
   1eba4:	cmp	r3, #1
   1eba8:	bls	1ebd0 <__assert_fail@plt+0xd678>
   1ebac:	ldr	r2, [sp, #472]	; 0x1d8
   1ebb0:	ldr	r3, [sp, #476]	; 0x1dc
   1ebb4:	sub	r1, r3, #8
   1ebb8:	add	r1, r1, r2, lsl #3
   1ebbc:	mvn	r2, #0
   1ebc0:	str	r2, [r3, #12]
   1ebc4:	str	r2, [r3, #8]!
   1ebc8:	cmp	r1, r3
   1ebcc:	bne	1ebc0 <__assert_fail@plt+0xd668>
   1ebd0:	ldr	r3, [sp, #32]
   1ebd4:	ldrb	r3, [r3, #28]
   1ebd8:	eor	r3, r3, #16
   1ebdc:	mov	r5, #0
   1ebe0:	ldr	r1, [sp, #240]	; 0xf0
   1ebe4:	ldr	r2, [sp, #472]	; 0x1d8
   1ebe8:	subs	r2, r2, #1
   1ebec:	movne	r2, #1
   1ebf0:	ands	r3, r2, r3, lsr #4
   1ebf4:	ldr	r2, [sp, #476]	; 0x1dc
   1ebf8:	str	r5, [r2]
   1ebfc:	str	r1, [r2, #4]
   1ec00:	bne	1ef98 <__assert_fail@plt+0xda40>
   1ec04:	ldrb	lr, [sp, #224]	; 0xe0
   1ec08:	mov	r1, #0
   1ec0c:	ldr	ip, [sp, #116]	; 0x74
   1ec10:	ldr	r7, [sp, #160]	; 0xa0
   1ec14:	ldr	r5, [sp, #176]	; 0xb0
   1ec18:	ldr	r6, [sp, #180]	; 0xb4
   1ec1c:	ldr	r8, [sp, #472]	; 0x1d8
   1ec20:	ldr	r2, [sp, #476]	; 0x1dc
   1ec24:	b	1ec2c <__assert_fail@plt+0xd6d4>
   1ec28:	ldr	r3, [r2, #8]!
   1ec2c:	cmn	r3, #1
   1ec30:	beq	1ec50 <__assert_fail@plt+0xd6f8>
   1ec34:	cmp	lr, #0
   1ec38:	ldr	r0, [r2, #4]
   1ec3c:	bne	1ef78 <__assert_fail@plt+0xda20>
   1ec40:	add	r3, ip, r3
   1ec44:	add	r0, ip, r0
   1ec48:	str	r3, [r2]
   1ec4c:	str	r0, [r2, #4]
   1ec50:	add	r1, r1, #1
   1ec54:	cmp	r1, r8
   1ec58:	bne	1ec28 <__assert_fail@plt+0xd6d0>
   1ec5c:	ldr	r3, [sp, #108]	; 0x6c
   1ec60:	cmp	r3, #0
   1ec64:	ble	1ec9c <__assert_fail@plt+0xd744>
   1ec68:	ldr	r3, [sp, #108]	; 0x6c
   1ec6c:	ldr	r2, [sp, #472]	; 0x1d8
   1ec70:	ldr	r0, [sp, #476]	; 0x1dc
   1ec74:	add	r1, r3, r2
   1ec78:	ldr	r3, [sp, #476]	; 0x1dc
   1ec7c:	add	r1, r0, r1, lsl #3
   1ec80:	add	r3, r3, r2, lsl #3
   1ec84:	mvn	r2, #0
   1ec88:	add	r3, r3, #8
   1ec8c:	str	r2, [r3, #-8]
   1ec90:	str	r2, [r3, #-4]
   1ec94:	cmp	r1, r3
   1ec98:	bne	1ec88 <__assert_fail@plt+0xd730>
   1ec9c:	ldr	r1, [r9, #132]	; 0x84
   1eca0:	cmp	r1, #0
   1eca4:	beq	1ea4c <__assert_fail@plt+0xd4f4>
   1eca8:	ldr	r3, [sp, #472]	; 0x1d8
   1ecac:	ldr	r2, [sp, #476]	; 0x1dc
   1ecb0:	sub	ip, r3, #1
   1ecb4:	mov	r3, #0
   1ecb8:	add	r5, r2, #8
   1ecbc:	add	lr, r2, #12
   1ecc0:	b	1ecf8 <__assert_fail@plt+0xd7a0>
   1ecc4:	ldr	r2, [r1, r3, lsl #2]
   1ecc8:	cmp	r2, r3
   1eccc:	add	r0, r2, #1
   1ecd0:	beq	1ecf4 <__assert_fail@plt+0xd79c>
   1ecd4:	ldr	r2, [sp, #476]	; 0x1dc
   1ecd8:	ldr	r2, [r2, r0, lsl #3]
   1ecdc:	ldr	r0, [sp, #476]	; 0x1dc
   1ece0:	str	r2, [r5, r3, lsl #3]
   1ece4:	ldr	r2, [r1, r3, lsl #2]
   1ece8:	add	r2, r0, r2, lsl #3
   1ecec:	ldr	r2, [r2, #12]
   1ecf0:	str	r2, [lr, r3, lsl #3]
   1ecf4:	add	r3, r3, #1
   1ecf8:	cmp	r3, ip
   1ecfc:	bne	1ecc4 <__assert_fail@plt+0xd76c>
   1ed00:	b	1ea4c <__assert_fail@plt+0xd4f4>
   1ed04:	ldrb	r3, [r9, #88]	; 0x58
   1ed08:	tst	r3, #2
   1ed0c:	bne	1dfe8 <__assert_fail@plt+0xca90>
   1ed10:	b	1e010 <__assert_fail@plt+0xcab8>
   1ed14:	add	r0, sp, #148	; 0x94
   1ed18:	bl	17538 <__assert_fail@plt+0x5fe0>
   1ed1c:	ldr	r0, [sp, #280]	; 0x118
   1ed20:	bl	13b9c <__assert_fail@plt+0x2644>
   1ed24:	ldr	r0, [sp, #264]	; 0x108
   1ed28:	bl	13b9c <__assert_fail@plt+0x2644>
   1ed2c:	b	1ea60 <__assert_fail@plt+0xd508>
   1ed30:	ldr	sl, [r4, #40]	; 0x28
   1ed34:	cmp	sl, #0
   1ed38:	bne	1e208 <__assert_fail@plt+0xccb0>
   1ed3c:	mov	r3, #12
   1ed40:	ldr	r9, [sp, #68]	; 0x44
   1ed44:	str	r3, [sp, #36]	; 0x24
   1ed48:	ldr	r4, [sp, #248]	; 0xf8
   1ed4c:	b	1ea4c <__assert_fail@plt+0xd4f4>
   1ed50:	mov	r0, sl
   1ed54:	bl	13b9c <__assert_fail@plt+0x2644>
   1ed58:	mov	r0, r6
   1ed5c:	bl	13b9c <__assert_fail@plt+0x2644>
   1ed60:	add	r0, sp, #148	; 0x94
   1ed64:	bl	17538 <__assert_fail@plt+0x5fe0>
   1ed68:	ldr	r5, [sp, #116]	; 0x74
   1ed6c:	b	1e9c8 <__assert_fail@plt+0xd470>
   1ed70:	mov	r3, #12
   1ed74:	ldr	r4, [sp, #248]	; 0xf8
   1ed78:	str	r3, [sp, #36]	; 0x24
   1ed7c:	b	1ea4c <__assert_fail@plt+0xd4f4>
   1ed80:	mov	r3, #8
   1ed84:	b	1e0ac <__assert_fail@plt+0xcb54>
   1ed88:	str	r1, [sp, #36]	; 0x24
   1ed8c:	str	r3, [sp, #116]	; 0x74
   1ed90:	ldr	r9, [sp, #68]	; 0x44
   1ed94:	ldr	r4, [sp, #248]	; 0xf8
   1ed98:	b	1ea4c <__assert_fail@plt+0xd4f4>
   1ed9c:	ldr	r4, [sp, #48]	; 0x30
   1eda0:	ldr	r1, [sp, #172]	; 0xac
   1eda4:	sub	r2, r5, r1
   1eda8:	ldr	r3, [sp, #180]	; 0xb4
   1edac:	cmp	r3, r2
   1edb0:	bhi	1f800 <__assert_fail@plt+0xe2a8>
   1edb4:	mov	r1, r5
   1edb8:	add	r0, sp, #148	; 0x94
   1edbc:	ldr	r2, [sp, #480]	; 0x1e0
   1edc0:	bl	1ac44 <__assert_fail@plt+0x96ec>
   1edc4:	subs	r3, r0, #0
   1edc8:	str	r3, [sp, #36]	; 0x24
   1edcc:	beq	1f7f8 <__assert_fail@plt+0xe2a0>
   1edd0:	ldr	r9, [sp, #68]	; 0x44
   1edd4:	ldr	r4, [sp, #248]	; 0xf8
   1edd8:	b	1ea4c <__assert_fail@plt+0xd4f4>
   1eddc:	ldrsb	r3, [sl, #52]	; 0x34
   1ede0:	cmp	r3, #0
   1ede4:	blt	1ee58 <__assert_fail@plt+0xd900>
   1ede8:	ldr	fp, [sp, #12]
   1edec:	ldr	r3, [sp, #20]
   1edf0:	cmp	r3, #0
   1edf4:	beq	1e3c0 <__assert_fail@plt+0xce68>
   1edf8:	ldr	r3, [sp, #20]
   1edfc:	str	r3, [sp, #28]
   1ee00:	b	1e248 <__assert_fail@plt+0xccf0>
   1ee04:	mov	r5, r0
   1ee08:	b	1e25c <__assert_fail@plt+0xcd04>
   1ee0c:	mov	fp, r4
   1ee10:	b	1e3c0 <__assert_fail@plt+0xce68>
   1ee14:	ldr	sl, [r4, #44]	; 0x2c
   1ee18:	b	1ed34 <__assert_fail@plt+0xd7dc>
   1ee1c:	ldr	r9, [sp, #68]	; 0x44
   1ee20:	bl	13b9c <__assert_fail@plt+0x2644>
   1ee24:	mov	r3, #12
   1ee28:	mov	r0, sl
   1ee2c:	str	r3, [sp, #36]	; 0x24
   1ee30:	bl	13b9c <__assert_fail@plt+0x2644>
   1ee34:	ldr	r4, [sp, #248]	; 0xf8
   1ee38:	b	1ea4c <__assert_fail@plt+0xd4f4>
   1ee3c:	mov	r3, r0
   1ee40:	mov	r1, r4
   1ee44:	ldr	r2, [sl, #40]	; 0x28
   1ee48:	add	r0, sp, #124	; 0x7c
   1ee4c:	bl	18bd0 <__assert_fail@plt+0x7678>
   1ee50:	mov	sl, r0
   1ee54:	b	1ed34 <__assert_fail@plt+0xd7dc>
   1ee58:	mov	r1, sl
   1ee5c:	add	r0, sp, #148	; 0x94
   1ee60:	ldr	r2, [sp, #12]
   1ee64:	bl	1b4b0 <__assert_fail@plt+0x9f58>
   1ee68:	subs	r3, r0, #0
   1ee6c:	str	r3, [sp, #28]
   1ee70:	bne	1ede8 <__assert_fail@plt+0xd890>
   1ee74:	mvn	fp, #0
   1ee78:	b	1e248 <__assert_fail@plt+0xccf0>
   1ee7c:	add	r4, sl, #8
   1ee80:	add	r5, sl, #12
   1ee84:	mov	r1, r4
   1ee88:	mov	r2, r5
   1ee8c:	mov	r3, #0
   1ee90:	add	r0, sp, #148	; 0x94
   1ee94:	bl	1b594 <__assert_fail@plt+0xa03c>
   1ee98:	cmp	r0, #0
   1ee9c:	mov	fp, r0
   1eea0:	str	r0, [sp, #124]	; 0x7c
   1eea4:	bne	1e3c0 <__assert_fail@plt+0xce68>
   1eea8:	ldrb	r3, [sl, #52]	; 0x34
   1eeac:	tst	r3, #64	; 0x40
   1eeb0:	bne	1ef50 <__assert_fail@plt+0xd9f8>
   1eeb4:	mov	r2, #0
   1eeb8:	str	r2, [sp, #16]
   1eebc:	b	1e234 <__assert_fail@plt+0xccdc>
   1eec0:	ldr	sl, [r4, #48]	; 0x30
   1eec4:	b	1ed34 <__assert_fail@plt+0xd7dc>
   1eec8:	mov	r7, r3
   1eecc:	mov	r0, sl
   1eed0:	bl	13b9c <__assert_fail@plt+0x2644>
   1eed4:	ldr	r0, [sp, #24]
   1eed8:	bl	13b9c <__assert_fail@plt+0x2644>
   1eedc:	cmp	r7, #1
   1eee0:	beq	1e9bc <__assert_fail@plt+0xd464>
   1eee4:	str	r7, [sp, #36]	; 0x24
   1eee8:	ldr	r9, [sp, #68]	; 0x44
   1eeec:	ldr	r4, [sp, #248]	; 0xf8
   1eef0:	b	1ea4c <__assert_fail@plt+0xd4f4>
   1eef4:	mov	r3, #12
   1eef8:	mov	r0, sl
   1eefc:	ldr	r9, [sp, #68]	; 0x44
   1ef00:	str	r3, [sp, #36]	; 0x24
   1ef04:	bl	13b9c <__assert_fail@plt+0x2644>
   1ef08:	mov	r0, r6
   1ef0c:	bl	13b9c <__assert_fail@plt+0x2644>
   1ef10:	b	1e5f4 <__assert_fail@plt+0xd09c>
   1ef14:	str	r6, [sp, #24]
   1ef18:	b	1eecc <__assert_fail@plt+0xd974>
   1ef1c:	mov	r3, r5
   1ef20:	mov	r2, r6
   1ef24:	ldr	r0, [sp, #12]
   1ef28:	mov	r1, sl
   1ef2c:	bl	190dc <__assert_fail@plt+0x7b84>
   1ef30:	mov	r7, r0
   1ef34:	mov	r0, r6
   1ef38:	bl	13b9c <__assert_fail@plt+0x2644>
   1ef3c:	cmp	r7, #0
   1ef40:	beq	1eb60 <__assert_fail@plt+0xd608>
   1ef44:	mov	r3, #0
   1ef48:	str	r3, [sp, #24]
   1ef4c:	b	1eecc <__assert_fail@plt+0xd974>
   1ef50:	mov	r2, r5
   1ef54:	mov	r1, r4
   1ef58:	add	r0, sp, #148	; 0x94
   1ef5c:	bl	1d10c <__assert_fail@plt+0xbbb4>
   1ef60:	cmp	r0, #0
   1ef64:	mov	fp, r0
   1ef68:	str	r0, [sp, #124]	; 0x7c
   1ef6c:	bne	1e3c0 <__assert_fail@plt+0xce68>
   1ef70:	ldrb	r3, [sl, #52]	; 0x34
   1ef74:	b	1eeb4 <__assert_fail@plt+0xd95c>
   1ef78:	cmp	r5, r3
   1ef7c:	ldrne	r3, [r7, r3, lsl #2]
   1ef80:	moveq	r3, r6
   1ef84:	cmp	r5, r0
   1ef88:	moveq	r0, r6
   1ef8c:	str	r3, [r2]
   1ef90:	ldrne	r0, [r7, r0, lsl #2]
   1ef94:	b	1ec40 <__assert_fail@plt+0xd6e8>
   1ef98:	ldr	r2, [sp, #32]
   1ef9c:	ldrb	r3, [r9, #88]	; 0x58
   1efa0:	ldr	r2, [r2]
   1efa4:	tst	r3, #1
   1efa8:	str	r2, [sp, #16]
   1efac:	beq	1f60c <__assert_fail@plt+0xe0b4>
   1efb0:	ldr	r3, [r9, #76]	; 0x4c
   1efb4:	cmp	r3, r5
   1efb8:	ble	1f60c <__assert_fail@plt+0xe0b4>
   1efbc:	add	r1, sp, #296	; 0x128
   1efc0:	mov	r2, #2
   1efc4:	mov	r3, #16
   1efc8:	mov	r0, #48	; 0x30
   1efcc:	str	r1, [sp, #20]
   1efd0:	str	r5, [sp, #136]	; 0x88
   1efd4:	str	r2, [sp, #140]	; 0x8c
   1efd8:	str	r5, [sp, #144]	; 0x90
   1efdc:	str	r5, [sp, #284]	; 0x11c
   1efe0:	str	r3, [sp, #288]	; 0x120
   1efe4:	str	r1, [sp, #292]	; 0x124
   1efe8:	bl	26190 <__assert_fail@plt+0x14c38>
   1efec:	cmp	r0, #0
   1eff0:	str	r0, [sp, #144]	; 0x90
   1eff4:	beq	1ed70 <__assert_fail@plt+0xd818>
   1eff8:	ldr	r1, [sp, #16]
   1effc:	add	r2, sp, #124	; 0x7c
   1f000:	ldr	r3, [sp, #284]	; 0x11c
   1f004:	str	r2, [sp, #28]
   1f008:	ldr	sl, [r1, #72]	; 0x48
   1f00c:	str	r5, [sp, #124]	; 0x7c
   1f010:	ldr	r1, [sp, #472]	; 0x1d8
   1f014:	str	r5, [sp, #128]	; 0x80
   1f018:	str	r5, [sp, #132]	; 0x84
   1f01c:	cmp	r3, r1
   1f020:	add	r3, sp, #136	; 0x88
   1f024:	str	r3, [sp, #12]
   1f028:	bcc	1f658 <__assert_fail@plt+0xe100>
   1f02c:	ldr	r3, [sp, #472]	; 0x1d8
   1f030:	str	r3, [sp, #284]	; 0x11c
   1f034:	ldr	r0, [sp, #292]	; 0x124
   1f038:	ldr	r3, [sp, #472]	; 0x1d8
   1f03c:	ldr	r1, [sp, #476]	; 0x1dc
   1f040:	str	r0, [sp, #32]
   1f044:	lsl	r2, r3, #3
   1f048:	lsl	r3, r3, #4
   1f04c:	mov	r4, r1
   1f050:	str	r2, [sp, #40]	; 0x28
   1f054:	str	r3, [sp, #48]	; 0x30
   1f058:	bl	11264 <memcpy@plt>
   1f05c:	ldr	r5, [r4], #4
   1f060:	str	r9, [sp, #24]
   1f064:	ldr	fp, [sp, #472]	; 0x1d8
   1f068:	str	r4, [sp, #44]	; 0x2c
   1f06c:	str	r5, [sp, #120]	; 0x78
   1f070:	ldr	r3, [sp, #476]	; 0x1dc
   1f074:	ldr	r3, [r3, #4]
   1f078:	cmp	r5, r3
   1f07c:	bgt	1f74c <__assert_fail@plt+0xe1f4>
   1f080:	ldr	r2, [sp, #16]
   1f084:	lsl	r4, sl, #3
   1f088:	mov	r6, sl
   1f08c:	ldr	r1, [r2]
   1f090:	add	r0, r1, r4
   1f094:	ldrb	r2, [r0, #4]
   1f098:	cmp	r2, #8
   1f09c:	beq	1f2b0 <__assert_fail@plt+0xdd58>
   1f0a0:	cmp	r2, #9
   1f0a4:	beq	1f314 <__assert_fail@plt+0xddbc>
   1f0a8:	cmp	r5, r3
   1f0ac:	beq	1f20c <__assert_fail@plt+0xdcb4>
   1f0b0:	ldr	r3, [sp, #12]
   1f0b4:	cmp	r3, #0
   1f0b8:	beq	1f0d4 <__assert_fail@plt+0xdb7c>
   1f0bc:	mov	r2, sl
   1f0c0:	add	r1, sp, #132	; 0x84
   1f0c4:	ldr	r0, [sp, #128]	; 0x80
   1f0c8:	bl	17db4 <__assert_fail@plt+0x685c>
   1f0cc:	cmp	r0, #0
   1f0d0:	bne	1f224 <__assert_fail@plt+0xdccc>
   1f0d4:	ldr	r5, [sp, #232]	; 0xe8
   1f0d8:	ldr	r0, [r5]
   1f0dc:	add	r1, r0, r4
   1f0e0:	ldrb	r3, [r1, #4]
   1f0e4:	tst	r3, #8
   1f0e8:	beq	1f184 <__assert_fail@plt+0xdc2c>
   1f0ec:	ldr	r5, [r5, #20]
   1f0f0:	add	r4, sl, sl, lsl #1
   1f0f4:	add	r1, sp, #132	; 0x84
   1f0f8:	mov	r2, sl
   1f0fc:	ldr	lr, [sp, #120]	; 0x78
   1f100:	ldr	r0, [sp, #128]	; 0x80
   1f104:	add	r4, r5, r4, lsl #2
   1f108:	ldr	ip, [sp, #248]	; 0xf8
   1f10c:	ldr	r5, [ip, lr, lsl #2]
   1f110:	bl	17db4 <__assert_fail@plt+0x685c>
   1f114:	cmp	r0, #0
   1f118:	beq	1f4b8 <__assert_fail@plt+0xdf60>
   1f11c:	ldr	r6, [r4, #4]
   1f120:	cmp	r6, #0
   1f124:	ble	1f580 <__assert_fail@plt+0xe028>
   1f128:	ldr	r3, [r4, #8]
   1f12c:	add	r8, r5, #12
   1f130:	mvn	sl, #0
   1f134:	mov	r4, #0
   1f138:	ldr	r7, [r5, #8]
   1f13c:	sub	r9, r3, #4
   1f140:	ldr	r5, [r9, #4]!
   1f144:	mov	r1, r8
   1f148:	mov	r0, r7
   1f14c:	add	r4, r4, #1
   1f150:	mov	r2, r5
   1f154:	bl	17db4 <__assert_fail@plt+0x685c>
   1f158:	cmp	r0, #0
   1f15c:	beq	1f16c <__assert_fail@plt+0xdc14>
   1f160:	cmn	sl, #1
   1f164:	bne	1f36c <__assert_fail@plt+0xde14>
   1f168:	mov	sl, r5
   1f16c:	cmp	r4, r6
   1f170:	bne	1f140 <__assert_fail@plt+0xdbe8>
   1f174:	cmp	sl, #0
   1f178:	blt	1f578 <__assert_fail@plt+0xe020>
   1f17c:	ldr	r5, [sp, #120]	; 0x78
   1f180:	b	1f070 <__assert_fail@plt+0xdb18>
   1f184:	ldrb	r2, [r1, #6]
   1f188:	tst	r2, #16
   1f18c:	bne	1f488 <__assert_fail@plt+0xdf30>
   1f190:	cmp	r3, #4
   1f194:	beq	1f4ec <__assert_fail@plt+0xdf94>
   1f198:	ldr	r7, [sp, #120]	; 0x78
   1f19c:	mov	r2, r7
   1f1a0:	add	r0, sp, #148	; 0x94
   1f1a4:	bl	1ab0c <__assert_fail@plt+0x95b4>
   1f1a8:	cmp	r0, #0
   1f1ac:	beq	1f580 <__assert_fail@plt+0xe028>
   1f1b0:	ldr	r2, [r5, #12]
   1f1b4:	add	r3, r7, #1
   1f1b8:	ldr	sl, [r2, r6, lsl #2]
   1f1bc:	str	r3, [sp, #120]	; 0x78
   1f1c0:	ldr	r2, [sp, #12]
   1f1c4:	cmp	r2, #0
   1f1c8:	beq	1f200 <__assert_fail@plt+0xdca8>
   1f1cc:	ldr	r2, [sp, #240]	; 0xf0
   1f1d0:	cmp	r3, r2
   1f1d4:	bgt	1f580 <__assert_fail@plt+0xe028>
   1f1d8:	ldr	r2, [sp, #248]	; 0xf8
   1f1dc:	ldr	r3, [r2, r3, lsl #2]
   1f1e0:	cmp	r3, #0
   1f1e4:	beq	1f580 <__assert_fail@plt+0xe028>
   1f1e8:	mov	r2, sl
   1f1ec:	add	r1, r3, #12
   1f1f0:	ldr	r0, [r3, #8]
   1f1f4:	bl	17db4 <__assert_fail@plt+0x685c>
   1f1f8:	cmp	r0, #0
   1f1fc:	beq	1f580 <__assert_fail@plt+0xe028>
   1f200:	mov	r3, #0
   1f204:	str	r3, [sp, #128]	; 0x80
   1f208:	b	1f174 <__assert_fail@plt+0xdc1c>
   1f20c:	ldr	r3, [sp, #244]	; 0xf4
   1f210:	cmp	sl, r3
   1f214:	bne	1f0b0 <__assert_fail@plt+0xdb58>
   1f218:	ldr	r3, [sp, #12]
   1f21c:	cmp	r3, #0
   1f220:	beq	1f7b8 <__assert_fail@plt+0xe260>
   1f224:	ldr	r1, [sp, #44]	; 0x2c
   1f228:	mov	r3, #0
   1f22c:	ldr	r2, [sp, #476]	; 0x1dc
   1f230:	ldr	r2, [r2, r3, lsl #3]
   1f234:	cmp	r2, #0
   1f238:	blt	1f248 <__assert_fail@plt+0xdcf0>
   1f23c:	ldr	r2, [r1, r3, lsl #3]
   1f240:	cmn	r2, #1
   1f244:	beq	1f2e0 <__assert_fail@plt+0xdd88>
   1f248:	add	r3, r3, #1
   1f24c:	cmp	fp, r3
   1f250:	bne	1f22c <__assert_fail@plt+0xdcd4>
   1f254:	ldr	r9, [sp, #24]
   1f258:	ldr	r0, [sp, #132]	; 0x84
   1f25c:	bl	13b9c <__assert_fail@plt+0x2644>
   1f260:	ldr	r3, [sp, #20]
   1f264:	ldr	r0, [sp, #292]	; 0x124
   1f268:	cmp	r0, r3
   1f26c:	beq	1f7dc <__assert_fail@plt+0xe284>
   1f270:	bl	13b9c <__assert_fail@plt+0x2644>
   1f274:	ldr	r1, [sp, #20]
   1f278:	mov	r2, #0
   1f27c:	mov	r3, #16
   1f280:	str	r2, [sp, #284]	; 0x11c
   1f284:	str	r3, [sp, #288]	; 0x120
   1f288:	str	r1, [sp, #292]	; 0x124
   1f28c:	ldr	r1, [sp, #12]
   1f290:	cmp	r1, r2
   1f294:	beq	1f794 <__assert_fail@plt+0xe23c>
   1f298:	ldr	r0, [sp, #12]
   1f29c:	bl	19608 <__assert_fail@plt+0x80b0>
   1f2a0:	ldr	r4, [sp, #248]	; 0xf8
   1f2a4:	ldr	r3, [sp, #476]	; 0x1dc
   1f2a8:	ldr	r3, [r3]
   1f2ac:	b	1ec04 <__assert_fail@plt+0xd6ac>
   1f2b0:	ldr	r2, [r1, sl, lsl #3]
   1f2b4:	add	r2, r2, #1
   1f2b8:	cmp	fp, r2
   1f2bc:	ble	1f0a8 <__assert_fail@plt+0xdb50>
   1f2c0:	ldr	r3, [sp, #476]	; 0x1dc
   1f2c4:	ldr	r1, [sp, #476]	; 0x1dc
   1f2c8:	add	r3, r3, r2, lsl #3
   1f2cc:	str	r5, [r1, r2, lsl #3]
   1f2d0:	mvn	r2, #0
   1f2d4:	str	r2, [r3, #4]
   1f2d8:	ldr	r3, [r1, #4]
   1f2dc:	b	1f0a8 <__assert_fail@plt+0xdb50>
   1f2e0:	mov	r2, fp
   1f2e4:	ldr	r0, [sp, #12]
   1f2e8:	ldr	ip, [sp, #28]
   1f2ec:	ldr	r1, [sp, #32]
   1f2f0:	ldr	r3, [sp, #476]	; 0x1dc
   1f2f4:	stm	sp, {r1, ip}
   1f2f8:	add	r1, sp, #120	; 0x78
   1f2fc:	bl	17c8c <__assert_fail@plt+0x6734>
   1f300:	subs	sl, r0, #0
   1f304:	blt	1f254 <__assert_fail@plt+0xdcfc>
   1f308:	mov	r6, sl
   1f30c:	lsl	r4, sl, #3
   1f310:	b	1f0d4 <__assert_fail@plt+0xdb7c>
   1f314:	ldr	r2, [r0]
   1f318:	add	r2, r2, #1
   1f31c:	cmp	fp, r2
   1f320:	ble	1f0a8 <__assert_fail@plt+0xdb50>
   1f324:	ldr	r3, [sp, #476]	; 0x1dc
   1f328:	ldr	r1, [r3, r2, lsl #3]
   1f32c:	add	r3, r3, r2, lsl #3
   1f330:	cmp	r5, r1
   1f334:	bgt	1f6fc <__assert_fail@plt+0xe1a4>
   1f338:	ldrb	r1, [r0, #6]
   1f33c:	tst	r1, #8
   1f340:	beq	1f678 <__assert_fail@plt+0xe120>
   1f344:	ldr	r1, [sp, #32]
   1f348:	ldr	r2, [r1, r2, lsl #3]
   1f34c:	cmn	r2, #1
   1f350:	beq	1f678 <__assert_fail@plt+0xe120>
   1f354:	ldr	r2, [sp, #40]	; 0x28
   1f358:	ldr	r0, [sp, #476]	; 0x1dc
   1f35c:	bl	11264 <memcpy@plt>
   1f360:	ldr	r3, [sp, #476]	; 0x1dc
   1f364:	ldr	r3, [r3, #4]
   1f368:	b	1f0a8 <__assert_fail@plt+0xdb50>
   1f36c:	add	r1, sp, #132	; 0x84
   1f370:	mov	r2, sl
   1f374:	ldr	r0, [sp, #128]	; 0x80
   1f378:	bl	17db4 <__assert_fail@plt+0x685c>
   1f37c:	cmp	r0, #0
   1f380:	bne	1f604 <__assert_fail@plt+0xe0ac>
   1f384:	ldr	r0, [sp, #12]
   1f388:	cmp	r0, #0
   1f38c:	beq	1f174 <__assert_fail@plt+0xdc1c>
   1f390:	ldr	r4, [r0]
   1f394:	ldmib	r0, {r1, r3}
   1f398:	ldr	r6, [sp, #120]	; 0x78
   1f39c:	add	r2, r4, #1
   1f3a0:	cmp	r2, r1
   1f3a4:	str	r2, [r0]
   1f3a8:	beq	1f720 <__assert_fail@plt+0xe1c8>
   1f3ac:	add	r2, r4, r4, lsl #1
   1f3b0:	ldr	r0, [sp, #48]	; 0x30
   1f3b4:	lsl	r4, r2, #3
   1f3b8:	str	r6, [r3, r2, lsl #3]
   1f3bc:	add	r6, r3, r4
   1f3c0:	str	r5, [r6, #4]
   1f3c4:	bl	26190 <__assert_fail@plt+0x14c38>
   1f3c8:	ldr	r5, [sp, #12]
   1f3cc:	ldr	r3, [r5, #8]
   1f3d0:	str	r0, [r6, #8]
   1f3d4:	add	r3, r3, r4
   1f3d8:	ldr	r0, [r3, #8]
   1f3dc:	cmp	r0, #0
   1f3e0:	beq	1f42c <__assert_fail@plt+0xded4>
   1f3e4:	ldr	r6, [sp, #40]	; 0x28
   1f3e8:	ldr	r1, [sp, #476]	; 0x1dc
   1f3ec:	mov	r2, r6
   1f3f0:	bl	11264 <memcpy@plt>
   1f3f4:	ldr	r3, [r5, #8]
   1f3f8:	mov	r2, r6
   1f3fc:	ldr	r1, [sp, #32]
   1f400:	add	r3, r3, r4
   1f404:	ldr	r0, [r3, #8]
   1f408:	add	r0, r0, r6
   1f40c:	bl	11264 <memcpy@plt>
   1f410:	ldr	r0, [r5, #8]
   1f414:	ldr	r1, [sp, #28]
   1f418:	add	r0, r0, r4
   1f41c:	add	r0, r0, #12
   1f420:	bl	189dc <__assert_fail@plt+0x7484>
   1f424:	cmp	r0, #0
   1f428:	beq	1f174 <__assert_fail@plt+0xdc1c>
   1f42c:	ldr	r9, [sp, #24]
   1f430:	ldr	r0, [sp, #132]	; 0x84
   1f434:	bl	13b9c <__assert_fail@plt+0x2644>
   1f438:	ldr	r3, [sp, #20]
   1f43c:	ldr	r0, [sp, #292]	; 0x124
   1f440:	cmp	r0, r3
   1f444:	beq	1f7a4 <__assert_fail@plt+0xe24c>
   1f448:	bl	13b9c <__assert_fail@plt+0x2644>
   1f44c:	ldr	r1, [sp, #20]
   1f450:	mov	r2, #0
   1f454:	mov	r3, #16
   1f458:	str	r2, [sp, #284]	; 0x11c
   1f45c:	str	r3, [sp, #288]	; 0x120
   1f460:	str	r1, [sp, #292]	; 0x124
   1f464:	ldr	r1, [sp, #12]
   1f468:	cmp	r1, r2
   1f46c:	beq	1ed70 <__assert_fail@plt+0xd818>
   1f470:	mov	r3, #12
   1f474:	ldr	r0, [sp, #12]
   1f478:	str	r3, [sp, #36]	; 0x24
   1f47c:	bl	19608 <__assert_fail@plt+0x80b0>
   1f480:	ldr	r4, [sp, #248]	; 0xf8
   1f484:	b	1ea4c <__assert_fail@plt+0xd4f4>
   1f488:	ldr	ip, [sp, #120]	; 0x78
   1f48c:	add	r3, sp, #148	; 0x94
   1f490:	mov	r2, sl
   1f494:	add	r1, r5, #128	; 0x80
   1f498:	str	ip, [sp]
   1f49c:	bl	1c6b0 <__assert_fail@plt+0xb158>
   1f4a0:	subs	r7, r0, #0
   1f4a4:	bne	1f6f4 <__assert_fail@plt+0xe19c>
   1f4a8:	ldr	r1, [r5]
   1f4ac:	ldr	r7, [sp, #120]	; 0x78
   1f4b0:	add	r1, r1, r4
   1f4b4:	b	1f19c <__assert_fail@plt+0xdc44>
   1f4b8:	mov	r1, sl
   1f4bc:	ldr	r0, [sp, #28]
   1f4c0:	bl	177e0 <__assert_fail@plt+0x6288>
   1f4c4:	cmp	r0, #0
   1f4c8:	bne	1f11c <__assert_fail@plt+0xdbc4>
   1f4cc:	ldr	r9, [sp, #24]
   1f4d0:	ldr	r0, [sp, #132]	; 0x84
   1f4d4:	bl	13b9c <__assert_fail@plt+0x2644>
   1f4d8:	ldr	r3, [sp, #20]
   1f4dc:	ldr	r0, [sp, #292]	; 0x124
   1f4e0:	cmp	r0, r3
   1f4e4:	bne	1f448 <__assert_fail@plt+0xdef0>
   1f4e8:	b	1f44c <__assert_fail@plt+0xdef4>
   1f4ec:	ldr	r3, [r1]
   1f4f0:	add	r3, r3, #1
   1f4f4:	cmp	fp, r3
   1f4f8:	ble	1f688 <__assert_fail@plt+0xe130>
   1f4fc:	ldr	r2, [sp, #476]	; 0x1dc
   1f500:	ldr	r1, [sp, #476]	; 0x1dc
   1f504:	add	r2, r2, r3, lsl #3
   1f508:	ldr	r0, [r1, r3, lsl #3]
   1f50c:	ldr	r3, [sp, #12]
   1f510:	cmp	r3, #0
   1f514:	ldr	r3, [r2, #4]
   1f518:	sub	r7, r3, r0
   1f51c:	beq	1f6ec <__assert_fail@plt+0xe194>
   1f520:	cmn	r0, #1
   1f524:	beq	1f580 <__assert_fail@plt+0xe028>
   1f528:	cmn	r3, #1
   1f52c:	beq	1f580 <__assert_fail@plt+0xe028>
   1f530:	cmp	r7, #0
   1f534:	beq	1f694 <__assert_fail@plt+0xe13c>
   1f538:	ldr	r4, [sp, #120]	; 0x78
   1f53c:	ldr	r1, [sp, #152]	; 0x98
   1f540:	ldr	r3, [sp, #176]	; 0xb0
   1f544:	sub	r3, r3, r4
   1f548:	cmp	r7, r3
   1f54c:	bgt	1f580 <__assert_fail@plt+0xe028>
   1f550:	add	r0, r1, r0
   1f554:	mov	r2, r7
   1f558:	add	r1, r1, r4
   1f55c:	bl	112b8 <memcmp@plt>
   1f560:	cmp	r0, #0
   1f564:	bne	1f580 <__assert_fail@plt+0xe028>
   1f568:	ldr	r2, [r5, #12]
   1f56c:	add	r3, r4, r7
   1f570:	ldr	sl, [r2, sl, lsl #2]
   1f574:	b	1f1bc <__assert_fail@plt+0xdc64>
   1f578:	cmn	sl, #2
   1f57c:	beq	1f4cc <__assert_fail@plt+0xdf74>
   1f580:	mov	r2, fp
   1f584:	ldr	r0, [sp, #12]
   1f588:	ldr	ip, [sp, #28]
   1f58c:	ldr	r1, [sp, #32]
   1f590:	ldr	r3, [sp, #476]	; 0x1dc
   1f594:	stm	sp, {r1, ip}
   1f598:	add	r1, sp, #120	; 0x78
   1f59c:	bl	17c8c <__assert_fail@plt+0x6734>
   1f5a0:	subs	sl, r0, #0
   1f5a4:	bge	1f17c <__assert_fail@plt+0xdc24>
   1f5a8:	ldr	r9, [sp, #24]
   1f5ac:	ldr	r0, [sp, #132]	; 0x84
   1f5b0:	bl	13b9c <__assert_fail@plt+0x2644>
   1f5b4:	ldr	r3, [sp, #20]
   1f5b8:	ldr	r0, [sp, #292]	; 0x124
   1f5bc:	cmp	r0, r3
   1f5c0:	beq	1f5c8 <__assert_fail@plt+0xe070>
   1f5c4:	bl	13b9c <__assert_fail@plt+0x2644>
   1f5c8:	ldr	r1, [sp, #20]
   1f5cc:	mov	r2, #0
   1f5d0:	mov	r3, #16
   1f5d4:	str	r2, [sp, #284]	; 0x11c
   1f5d8:	str	r3, [sp, #288]	; 0x120
   1f5dc:	str	r1, [sp, #292]	; 0x124
   1f5e0:	ldr	r1, [sp, #12]
   1f5e4:	cmp	r1, r2
   1f5e8:	beq	1e5ec <__assert_fail@plt+0xd094>
   1f5ec:	mov	r3, #1
   1f5f0:	ldr	r0, [sp, #12]
   1f5f4:	str	r3, [sp, #36]	; 0x24
   1f5f8:	bl	19608 <__assert_fail@plt+0x80b0>
   1f5fc:	ldr	r4, [sp, #248]	; 0xf8
   1f600:	b	1ea4c <__assert_fail@plt+0xd4f4>
   1f604:	mov	sl, r5
   1f608:	b	1f174 <__assert_fail@plt+0xdc1c>
   1f60c:	ldr	r2, [sp, #16]
   1f610:	mov	r3, #0
   1f614:	add	ip, sp, #296	; 0x128
   1f618:	add	r0, sp, #124	; 0x7c
   1f61c:	mov	r1, #2
   1f620:	str	r3, [sp, #12]
   1f624:	str	ip, [sp, #20]
   1f628:	str	r0, [sp, #28]
   1f62c:	ldr	sl, [r2, #72]	; 0x48
   1f630:	mov	r2, #16
   1f634:	str	r3, [sp, #124]	; 0x7c
   1f638:	str	r3, [sp, #128]	; 0x80
   1f63c:	str	r3, [sp, #132]	; 0x84
   1f640:	str	r3, [sp, #136]	; 0x88
   1f644:	str	r1, [sp, #140]	; 0x8c
   1f648:	str	r3, [sp, #144]	; 0x90
   1f64c:	str	r3, [sp, #284]	; 0x11c
   1f650:	str	r2, [sp, #288]	; 0x120
   1f654:	str	ip, [sp, #292]	; 0x124
   1f658:	mov	r3, #8
   1f65c:	add	r0, sp, #284	; 0x11c
   1f660:	ldr	r2, [sp, #20]
   1f664:	ldr	r1, [sp, #472]	; 0x1d8
   1f668:	bl	262ac <__assert_fail@plt+0x14d54>
   1f66c:	cmp	r0, #0
   1f670:	bne	1f034 <__assert_fail@plt+0xdadc>
   1f674:	b	1f4d8 <__assert_fail@plt+0xdf80>
   1f678:	str	r5, [r3, #4]
   1f67c:	ldr	r3, [sp, #476]	; 0x1dc
   1f680:	ldr	r3, [r3, #4]
   1f684:	b	1f0a8 <__assert_fail@plt+0xdb50>
   1f688:	ldr	r3, [sp, #12]
   1f68c:	cmp	r3, #0
   1f690:	bne	1f580 <__assert_fail@plt+0xe028>
   1f694:	mov	r1, sl
   1f698:	ldr	r0, [sp, #28]
   1f69c:	bl	177e0 <__assert_fail@plt+0x6288>
   1f6a0:	cmp	r0, #0
   1f6a4:	beq	1f4cc <__assert_fail@plt+0xdf74>
   1f6a8:	ldr	r3, [r5, #20]
   1f6ac:	add	sl, sl, sl, lsl #1
   1f6b0:	ldr	r7, [sp, #120]	; 0x78
   1f6b4:	ldr	r1, [sp, #248]	; 0xf8
   1f6b8:	add	r3, r3, sl, lsl #2
   1f6bc:	ldr	r2, [r3, #8]
   1f6c0:	ldr	r3, [r1, r7, lsl #2]
   1f6c4:	ldr	sl, [r2]
   1f6c8:	add	r1, r3, #12
   1f6cc:	ldr	r0, [r3, #8]
   1f6d0:	mov	r2, sl
   1f6d4:	bl	17db4 <__assert_fail@plt+0x685c>
   1f6d8:	cmp	r0, #0
   1f6dc:	bne	1f174 <__assert_fail@plt+0xdc1c>
   1f6e0:	ldr	r1, [r5]
   1f6e4:	add	r1, r1, r4
   1f6e8:	b	1f19c <__assert_fail@plt+0xdc44>
   1f6ec:	cmp	r7, #0
   1f6f0:	beq	1f694 <__assert_fail@plt+0xe13c>
   1f6f4:	ldr	r4, [sp, #120]	; 0x78
   1f6f8:	b	1f568 <__assert_fail@plt+0xe010>
   1f6fc:	str	r5, [r3, #4]
   1f700:	ldr	r0, [sp, #32]
   1f704:	ldr	r2, [sp, #40]	; 0x28
   1f708:	ldr	r1, [sp, #476]	; 0x1dc
   1f70c:	bl	11264 <memcpy@plt>
   1f710:	ldr	r5, [sp, #120]	; 0x78
   1f714:	ldr	r3, [sp, #476]	; 0x1dc
   1f718:	ldr	r3, [r3, #4]
   1f71c:	b	1f0a8 <__assert_fail@plt+0xdb50>
   1f720:	mov	r1, #48	; 0x30
   1f724:	mov	r0, r3
   1f728:	mul	r1, r1, r2
   1f72c:	bl	261cc <__assert_fail@plt+0x14c74>
   1f730:	subs	r3, r0, #0
   1f734:	beq	1f42c <__assert_fail@plt+0xded4>
   1f738:	ldr	r1, [sp, #12]
   1f73c:	ldr	r2, [r1, #4]
   1f740:	lsl	r2, r2, #1
   1f744:	strd	r2, [r1, #4]
   1f748:	b	1f3ac <__assert_fail@plt+0xde54>
   1f74c:	ldr	r9, [sp, #24]
   1f750:	ldr	r0, [sp, #132]	; 0x84
   1f754:	bl	13b9c <__assert_fail@plt+0x2644>
   1f758:	ldr	r3, [sp, #20]
   1f75c:	ldr	r0, [sp, #292]	; 0x124
   1f760:	cmp	r0, r3
   1f764:	beq	1f76c <__assert_fail@plt+0xe214>
   1f768:	bl	13b9c <__assert_fail@plt+0x2644>
   1f76c:	ldr	r0, [sp, #12]
   1f770:	mov	r2, #0
   1f774:	ldr	r3, [sp, #20]
   1f778:	str	r2, [sp, #284]	; 0x11c
   1f77c:	cmp	r0, r2
   1f780:	str	r3, [sp, #292]	; 0x124
   1f784:	mov	r3, #16
   1f788:	str	r3, [sp, #288]	; 0x120
   1f78c:	beq	1f794 <__assert_fail@plt+0xe23c>
   1f790:	bl	19608 <__assert_fail@plt+0x80b0>
   1f794:	ldr	r4, [sp, #248]	; 0xf8
   1f798:	ldr	r3, [sp, #476]	; 0x1dc
   1f79c:	ldr	r3, [r3]
   1f7a0:	b	1ec04 <__assert_fail@plt+0xd6ac>
   1f7a4:	mov	r2, #0
   1f7a8:	mov	r3, #16
   1f7ac:	str	r2, [sp, #284]	; 0x11c
   1f7b0:	str	r3, [sp, #288]	; 0x120
   1f7b4:	b	1f470 <__assert_fail@plt+0xdf18>
   1f7b8:	ldr	r9, [sp, #24]
   1f7bc:	ldr	r0, [sp, #132]	; 0x84
   1f7c0:	bl	13b9c <__assert_fail@plt+0x2644>
   1f7c4:	ldr	r3, [sp, #20]
   1f7c8:	ldr	r0, [sp, #292]	; 0x124
   1f7cc:	cmp	r0, r3
   1f7d0:	beq	1f794 <__assert_fail@plt+0xe23c>
   1f7d4:	bl	13b9c <__assert_fail@plt+0x2644>
   1f7d8:	b	1f794 <__assert_fail@plt+0xe23c>
   1f7dc:	mov	r2, #0
   1f7e0:	mov	r3, #16
   1f7e4:	str	r2, [sp, #284]	; 0x11c
   1f7e8:	str	r3, [sp, #288]	; 0x120
   1f7ec:	b	1f298 <__assert_fail@plt+0xdd40>
   1f7f0:	ldr	r9, [sp, #68]	; 0x44
   1f7f4:	b	1eba0 <__assert_fail@plt+0xd648>
   1f7f8:	ldr	r1, [sp, #172]	; 0xac
   1f7fc:	sub	r2, r5, r1
   1f800:	ldr	r0, [sp, #176]	; 0xb0
   1f804:	mov	r3, r4
   1f808:	cmp	r0, r2
   1f80c:	bls	1f81c <__assert_fail@plt+0xe2c4>
   1f810:	ldr	r3, [sp, #152]	; 0x98
   1f814:	ldrb	r3, [r3, r2]
   1f818:	add	r3, r4, r3
   1f81c:	ldrb	r3, [r3]
   1f820:	cmp	r3, #0
   1f824:	bne	1e154 <__assert_fail@plt+0xcbfc>
   1f828:	ldr	r2, [sp, #76]	; 0x4c
   1f82c:	ldr	r3, [sp, #96]	; 0x60
   1f830:	add	r5, r5, r3
   1f834:	ldr	r3, [sp, #64]	; 0x40
   1f838:	str	r5, [sp, #116]	; 0x74
   1f83c:	cmp	r5, r3
   1f840:	movle	r3, #0
   1f844:	movgt	r3, #1
   1f848:	cmp	r5, r2
   1f84c:	orrlt	r3, r3, #1
   1f850:	cmp	r3, #0
   1f854:	beq	1eda4 <__assert_fail@plt+0xd84c>
   1f858:	b	1e5e8 <__assert_fail@plt+0xd090>
   1f85c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f860:	mov	r4, r3
   1f864:	ldr	r3, [r3, #4]
   1f868:	ldr	r5, [r0, #84]	; 0x54
   1f86c:	strd	r6, [sp, #8]
   1f870:	strd	sl, [sp, #24]
   1f874:	mov	fp, r2
   1f878:	mov	sl, r1
   1f87c:	str	lr, [sp, #32]
   1f880:	lsl	lr, r2, #2
   1f884:	ldr	r2, [r0, #100]	; 0x64
   1f888:	strd	r8, [sp, #16]
   1f88c:	sub	sp, sp, #108	; 0x6c
   1f890:	str	lr, [sp, #24]
   1f894:	ldr	r1, [r2, fp, lsl #2]
   1f898:	add	r2, r2, lr
   1f89c:	strd	r0, [sp, #16]
   1f8a0:	mov	r0, #0
   1f8a4:	cmp	r1, r0
   1f8a8:	str	r0, [sp, #72]	; 0x48
   1f8ac:	beq	1fd04 <__assert_fail@plt+0xe7ac>
   1f8b0:	cmp	r3, #0
   1f8b4:	bne	1f8f0 <__assert_fail@plt+0xe398>
   1f8b8:	ldr	r1, [sl]
   1f8bc:	str	r3, [r1, fp, lsl #2]
   1f8c0:	ldr	r3, [r2]
   1f8c4:	ldrb	r3, [r3, #52]	; 0x34
   1f8c8:	ands	r3, r3, #64	; 0x40
   1f8cc:	bne	1fa0c <__assert_fail@plt+0xe4b4>
   1f8d0:	mov	r0, r3
   1f8d4:	add	sp, sp, #108	; 0x6c
   1f8d8:	ldrd	r4, [sp]
   1f8dc:	ldrd	r6, [sp, #8]
   1f8e0:	ldrd	r8, [sp, #16]
   1f8e4:	ldrd	sl, [sp, #24]
   1f8e8:	add	sp, sp, #32
   1f8ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1f8f0:	mov	r2, r4
   1f8f4:	mov	r1, r5
   1f8f8:	str	r0, [sp, #76]	; 0x4c
   1f8fc:	add	r0, sp, #76	; 0x4c
   1f900:	bl	18eb8 <__assert_fail@plt+0x7960>
   1f904:	ldr	r3, [sp, #76]	; 0x4c
   1f908:	mov	r8, r0
   1f90c:	cmp	r3, #0
   1f910:	bne	1f8d0 <__assert_fail@plt+0xe378>
   1f914:	mov	r6, r0
   1f918:	ldr	r7, [r6, #28]!
   1f91c:	cmp	r7, #0
   1f920:	bne	1f994 <__assert_fail@plt+0xe43c>
   1f924:	ldr	r2, [r4, #4]
   1f928:	lsl	r0, r2, #2
   1f92c:	strd	r2, [r8, #28]
   1f930:	bl	26190 <__assert_fail@plt+0x14c38>
   1f934:	cmp	r0, #0
   1f938:	str	r0, [r8, #36]	; 0x24
   1f93c:	beq	1f98c <__assert_fail@plt+0xe434>
   1f940:	ldr	r3, [r4, #4]
   1f944:	str	r7, [sp, #76]	; 0x4c
   1f948:	cmp	r3, #0
   1f94c:	bgt	1f960 <__assert_fail@plt+0xe408>
   1f950:	b	1f994 <__assert_fail@plt+0xe43c>
   1f954:	ldr	r3, [r4, #4]
   1f958:	cmp	r7, r3
   1f95c:	bge	1f994 <__assert_fail@plt+0xe43c>
   1f960:	ldr	r3, [r4, #8]
   1f964:	mov	r0, r6
   1f968:	ldr	r1, [r5, #28]
   1f96c:	ldr	r3, [r3, r7, lsl #2]
   1f970:	add	r7, r7, #1
   1f974:	add	r3, r3, r3, lsl #1
   1f978:	add	r1, r1, r3, lsl #2
   1f97c:	bl	19678 <__assert_fail@plt+0x8120>
   1f980:	cmp	r0, #0
   1f984:	str	r0, [sp, #76]	; 0x4c
   1f988:	beq	1f954 <__assert_fail@plt+0xe3fc>
   1f98c:	mov	r3, #12
   1f990:	b	1f8d0 <__assert_fail@plt+0xe378>
   1f994:	ldr	r3, [sp, #20]
   1f998:	mov	r2, r6
   1f99c:	mov	r0, r4
   1f9a0:	add	r3, r3, #4
   1f9a4:	mov	r1, r3
   1f9a8:	str	r3, [sp, #36]	; 0x24
   1f9ac:	bl	18338 <__assert_fail@plt+0x6de0>
   1f9b0:	cmp	r0, #0
   1f9b4:	str	r0, [sp, #72]	; 0x48
   1f9b8:	bne	1ffd0 <__assert_fail@plt+0xea78>
   1f9bc:	ldr	r3, [sl, #20]
   1f9c0:	cmp	r3, #0
   1f9c4:	bne	1fdd0 <__assert_fail@plt+0xe878>
   1f9c8:	mov	r2, r4
   1f9cc:	mov	r1, r5
   1f9d0:	ldr	r4, [sl]
   1f9d4:	add	r0, sp, #72	; 0x48
   1f9d8:	bl	18eb8 <__assert_fail@plt+0x7960>
   1f9dc:	ldr	r3, [sp, #72]	; 0x48
   1f9e0:	str	r0, [r4, fp, lsl #2]
   1f9e4:	cmp	r3, #0
   1f9e8:	bne	1f8d0 <__assert_fail@plt+0xe378>
   1f9ec:	ldr	r3, [sp, #16]
   1f9f0:	ldr	r2, [r3, #100]	; 0x64
   1f9f4:	ldr	r3, [sp, #24]
   1f9f8:	add	r2, r2, r3
   1f9fc:	ldr	r3, [r2]
   1fa00:	ldrb	r3, [r3, #52]	; 0x34
   1fa04:	ands	r3, r3, #64	; 0x40
   1fa08:	beq	1f8d0 <__assert_fail@plt+0xe378>
   1fa0c:	ldr	r3, [sp, #16]
   1fa10:	mov	r8, #0
   1fa14:	ldr	ip, [r3, #108]	; 0x6c
   1fa18:	mov	r3, ip
   1fa1c:	cmp	r8, r3
   1fa20:	bge	1fa80 <__assert_fail@plt+0xe528>
   1fa24:	ldr	r1, [sp, #16]
   1fa28:	add	r2, r8, r3
   1fa2c:	add	r2, r2, r2, lsr #31
   1fa30:	asr	r2, r2, #1
   1fa34:	ldr	r0, [r1, #116]	; 0x74
   1fa38:	add	r1, r2, r2, lsl #1
   1fa3c:	add	r1, r0, r1, lsl #3
   1fa40:	ldr	r1, [r1, #4]
   1fa44:	cmp	fp, r1
   1fa48:	ble	1fa70 <__assert_fail@plt+0xe518>
   1fa4c:	b	1fd44 <__assert_fail@plt+0xe7ec>
   1fa50:	asr	r3, r3, #1
   1fa54:	add	r1, r3, r3, lsl #1
   1fa58:	mov	lr, r3
   1fa5c:	add	r1, r0, r1, lsl #3
   1fa60:	ldr	r1, [r1, #4]
   1fa64:	cmp	fp, r1
   1fa68:	bgt	1fd4c <__assert_fail@plt+0xe7f4>
   1fa6c:	mov	r2, r3
   1fa70:	add	r3, r8, r2
   1fa74:	cmp	r8, r2
   1fa78:	add	r3, r3, r3, lsr #31
   1fa7c:	blt	1fa50 <__assert_fail@plt+0xe4f8>
   1fa80:	cmp	ip, r8
   1fa84:	ble	1fd3c <__assert_fail@plt+0xe7e4>
   1fa88:	ldr	r1, [sp, #16]
   1fa8c:	add	r2, r8, r8, lsl #1
   1fa90:	lsl	r2, r2, #3
   1fa94:	ldr	r3, [r1, #116]	; 0x74
   1fa98:	str	r2, [sp, #48]	; 0x30
   1fa9c:	add	r3, r3, r2
   1faa0:	ldr	r3, [r3, #4]
   1faa4:	cmp	fp, r3
   1faa8:	bne	1fd3c <__assert_fail@plt+0xe7e4>
   1faac:	cmn	r8, #1
   1fab0:	beq	1fd3c <__assert_fail@plt+0xe7e4>
   1fab4:	ldr	r3, [sp, #20]
   1fab8:	ldr	r9, [r1, #84]	; 0x54
   1fabc:	ldr	r0, [r3, #8]
   1fac0:	mov	r3, #0
   1fac4:	str	r3, [sp, #76]	; 0x4c
   1fac8:	cmp	r0, r3
   1facc:	ble	1fd3c <__assert_fail@plt+0xe7e4>
   1fad0:	add	r2, sl, #24
   1fad4:	str	r2, [sp, #36]	; 0x24
   1fad8:	add	r2, sl, #20
   1fadc:	str	fp, [sp, #44]	; 0x2c
   1fae0:	mov	fp, r3
   1fae4:	str	r2, [sp, #40]	; 0x28
   1fae8:	str	r8, [sp, #56]	; 0x38
   1faec:	b	1fb04 <__assert_fail@plt+0xe5ac>
   1faf0:	cmp	r3, #4
   1faf4:	beq	1fb40 <__assert_fail@plt+0xe5e8>
   1faf8:	add	fp, fp, #1
   1fafc:	cmp	fp, r0
   1fb00:	bge	1fd30 <__assert_fail@plt+0xe7d8>
   1fb04:	ldr	r3, [sp, #20]
   1fb08:	ldr	r2, [sl, #8]
   1fb0c:	ldr	r1, [r3, #12]
   1fb10:	ldr	r3, [r9]
   1fb14:	ldr	r6, [r1, fp, lsl #2]
   1fb18:	add	r3, r3, r6, lsl #3
   1fb1c:	cmp	r6, r2
   1fb20:	ldrb	r3, [r3, #4]
   1fb24:	bne	1faf0 <__assert_fail@plt+0xe598>
   1fb28:	ldr	r2, [sl, #12]
   1fb2c:	ldr	r1, [sp, #44]	; 0x2c
   1fb30:	cmp	r1, r2
   1fb34:	beq	1faf8 <__assert_fail@plt+0xe5a0>
   1fb38:	cmp	r3, #4
   1fb3c:	bne	1faf8 <__assert_fail@plt+0xe5a0>
   1fb40:	ldr	r3, [sp, #16]
   1fb44:	lsl	r2, r6, #2
   1fb48:	str	fp, [sp, #60]	; 0x3c
   1fb4c:	ldr	fp, [sp, #44]	; 0x2c
   1fb50:	ldr	r7, [sp, #56]	; 0x38
   1fb54:	ldr	r4, [r3, #116]	; 0x74
   1fb58:	add	r3, r6, r6, lsl #1
   1fb5c:	lsl	r3, r3, #2
   1fb60:	strd	r2, [sp, #28]
   1fb64:	add	r2, sl, #16
   1fb68:	ldr	r3, [sp, #48]	; 0x30
   1fb6c:	str	r2, [sp, #52]	; 0x34
   1fb70:	add	r4, r4, r3
   1fb74:	b	1fcc8 <__assert_fail@plt+0xe770>
   1fb78:	ldr	r3, [r9, #12]
   1fb7c:	ldr	r2, [sp, #28]
   1fb80:	ldr	r8, [r3, r2]
   1fb84:	ldr	r3, [sl, #12]
   1fb88:	cmp	r5, r3
   1fb8c:	bgt	1fcb4 <__assert_fail@plt+0xe75c>
   1fb90:	ldr	r3, [sl]
   1fb94:	ldr	r3, [r3, r5, lsl #2]
   1fb98:	cmp	r3, #0
   1fb9c:	beq	1fcb4 <__assert_fail@plt+0xe75c>
   1fba0:	mov	r2, r8
   1fba4:	add	r1, r3, #12
   1fba8:	ldr	r0, [r3, #8]
   1fbac:	bl	17db4 <__assert_fail@plt+0x685c>
   1fbb0:	cmp	r0, #0
   1fbb4:	beq	1fcb4 <__assert_fail@plt+0xe75c>
   1fbb8:	mov	r3, r6
   1fbbc:	str	fp, [sp]
   1fbc0:	str	r8, [sp, #4]
   1fbc4:	str	r5, [sp, #8]
   1fbc8:	ldr	r0, [sp, #16]
   1fbcc:	ldr	r2, [sp, #36]	; 0x24
   1fbd0:	ldr	r1, [sp, #40]	; 0x28
   1fbd4:	bl	18088 <__assert_fail@plt+0x6b30>
   1fbd8:	cmp	r0, #0
   1fbdc:	bne	1fcb4 <__assert_fail@plt+0xe75c>
   1fbe0:	ldr	r3, [sp, #76]	; 0x4c
   1fbe4:	cmp	r3, #0
   1fbe8:	beq	1fd58 <__assert_fail@plt+0xe800>
   1fbec:	add	r4, sp, #76	; 0x4c
   1fbf0:	add	r5, sp, #92	; 0x5c
   1fbf4:	mov	r0, r5
   1fbf8:	mov	r1, r7
   1fbfc:	str	r6, [sp, #84]	; 0x54
   1fc00:	str	fp, [sp, #88]	; 0x58
   1fc04:	bl	177e0 <__assert_fail@plt+0x6288>
   1fc08:	cmp	r0, #0
   1fc0c:	beq	20010 <__assert_fail@plt+0xeab8>
   1fc10:	mov	r1, r4
   1fc14:	ldr	r0, [sp, #16]
   1fc18:	ldr	r2, [sp, #24]
   1fc1c:	ldr	r3, [sp, #76]	; 0x4c
   1fc20:	ldr	r4, [r3, r2]
   1fc24:	bl	1da50 <__assert_fail@plt+0xc4f8>
   1fc28:	cmp	r0, #0
   1fc2c:	bne	1fd9c <__assert_fail@plt+0xe844>
   1fc30:	ldr	r1, [sl, #4]
   1fc34:	ldr	r3, [sp, #76]	; 0x4c
   1fc38:	cmp	r1, #0
   1fc3c:	beq	1fc5c <__assert_fail@plt+0xe704>
   1fc40:	mov	r2, r3
   1fc44:	mov	r0, r9
   1fc48:	add	r3, fp, #1
   1fc4c:	bl	190dc <__assert_fail@plt+0x7b84>
   1fc50:	cmp	r0, #0
   1fc54:	bne	1fd9c <__assert_fail@plt+0xe844>
   1fc58:	ldr	r3, [sp, #76]	; 0x4c
   1fc5c:	mov	r2, r7
   1fc60:	ldr	r1, [sp, #24]
   1fc64:	str	r4, [r3, r1]
   1fc68:	add	r1, sp, #100	; 0x64
   1fc6c:	ldr	r4, [sp, #96]	; 0x60
   1fc70:	mov	r0, r4
   1fc74:	bl	17db4 <__assert_fail@plt+0x685c>
   1fc78:	sub	r2, r0, #1
   1fc7c:	cmp	r4, r2
   1fc80:	movgt	r3, #0
   1fc84:	movle	r3, #1
   1fc88:	orrs	r3, r3, r2, lsr #31
   1fc8c:	bne	1fca4 <__assert_fail@plt+0xe74c>
   1fc90:	sub	r4, r4, #1
   1fc94:	add	r1, sp, #100	; 0x64
   1fc98:	add	r0, sp, #96	; 0x60
   1fc9c:	str	r4, [sp, #96]	; 0x60
   1fca0:	bl	17f54 <__assert_fail@plt+0x69fc>
   1fca4:	ldr	r3, [sp, #16]
   1fca8:	ldr	r4, [r3, #116]	; 0x74
   1fcac:	add	r3, r7, r7, lsl #1
   1fcb0:	add	r4, r4, r3, lsl #3
   1fcb4:	ldrb	r3, [r4, #20]
   1fcb8:	add	r7, r7, #1
   1fcbc:	add	r4, r4, #24
   1fcc0:	cmp	r3, #0
   1fcc4:	beq	1fdc0 <__assert_fail@plt+0xe868>
   1fcc8:	ldr	r3, [r4]
   1fccc:	cmp	r6, r3
   1fcd0:	bne	1fcb4 <__assert_fail@plt+0xe75c>
   1fcd4:	ldr	r3, [r4, #8]
   1fcd8:	ldr	r5, [r4, #12]
   1fcdc:	sub	r5, r5, r3
   1fce0:	cmp	r5, #0
   1fce4:	add	r5, fp, r5
   1fce8:	bne	1fb78 <__assert_fail@plt+0xe620>
   1fcec:	ldr	r3, [r9, #20]
   1fcf0:	ldr	r2, [sp, #32]
   1fcf4:	add	r3, r3, r2
   1fcf8:	ldr	r3, [r3, #8]
   1fcfc:	ldr	r8, [r3]
   1fd00:	b	1fb84 <__assert_fail@plt+0xe62c>
   1fd04:	ldr	r6, [sl]
   1fd08:	cmp	r3, r0
   1fd0c:	streq	r3, [r6, fp, lsl #2]
   1fd10:	beq	1f8d0 <__assert_fail@plt+0xe378>
   1fd14:	mov	r2, r4
   1fd18:	mov	r1, r5
   1fd1c:	add	r0, sp, #72	; 0x48
   1fd20:	bl	18eb8 <__assert_fail@plt+0x7960>
   1fd24:	str	r0, [r6, fp, lsl #2]
   1fd28:	ldr	r3, [sp, #72]	; 0x48
   1fd2c:	b	1f8d0 <__assert_fail@plt+0xe378>
   1fd30:	ldr	r3, [sp, #76]	; 0x4c
   1fd34:	cmp	r3, #0
   1fd38:	bne	20020 <__assert_fail@plt+0xeac8>
   1fd3c:	mov	r3, #0
   1fd40:	b	1f8d0 <__assert_fail@plt+0xe378>
   1fd44:	mov	lr, r2
   1fd48:	mov	r2, r3
   1fd4c:	add	r8, lr, #1
   1fd50:	mov	r3, r2
   1fd54:	b	1fa1c <__assert_fail@plt+0xe4c4>
   1fd58:	ldrd	r2, [sl]
   1fd5c:	add	r4, sp, #76	; 0x4c
   1fd60:	add	r5, sp, #92	; 0x5c
   1fd64:	mov	r0, r5
   1fd68:	ldr	ip, [sl, #24]
   1fd6c:	ldr	r1, [sp, #52]	; 0x34
   1fd70:	strd	r2, [sp, #76]	; 0x4c
   1fd74:	ldrd	r2, [sl, #16]
   1fd78:	str	ip, [r4, #24]
   1fd7c:	strd	r2, [sp, #64]	; 0x40
   1fd80:	ldrd	r2, [sl, #8]
   1fd84:	strd	r2, [r4, #8]
   1fd88:	ldrd	r2, [sp, #64]	; 0x40
   1fd8c:	strd	r2, [r4, #16]
   1fd90:	bl	189dc <__assert_fail@plt+0x7484>
   1fd94:	cmp	r0, #0
   1fd98:	beq	1fbf4 <__assert_fail@plt+0xe69c>
   1fd9c:	mov	r3, r0
   1fda0:	ldr	r2, [sp, #76]	; 0x4c
   1fda4:	cmp	r2, #0
   1fda8:	beq	1f8d0 <__assert_fail@plt+0xe378>
   1fdac:	ldr	r0, [sp, #100]	; 0x64
   1fdb0:	str	r3, [sp, #16]
   1fdb4:	bl	13b9c <__assert_fail@plt+0x2644>
   1fdb8:	ldr	r3, [sp, #16]
   1fdbc:	b	1f8d0 <__assert_fail@plt+0xe378>
   1fdc0:	ldr	r3, [sp, #20]
   1fdc4:	ldr	fp, [sp, #60]	; 0x3c
   1fdc8:	ldr	r0, [r3, #8]
   1fdcc:	b	1faf8 <__assert_fail@plt+0xe5a0>
   1fdd0:	ldr	r3, [sp, #16]
   1fdd4:	ldr	r3, [r3, #116]	; 0x74
   1fdd8:	str	r3, [sp, #32]
   1fddc:	ble	1febc <__assert_fail@plt+0xe964>
   1fde0:	mov	r6, r0
   1fde4:	str	fp, [sp, #28]
   1fde8:	ldr	r3, [sl, #24]
   1fdec:	ldr	r0, [sp, #28]
   1fdf0:	ldr	ip, [sp, #32]
   1fdf4:	ldr	r3, [r3, r6, lsl #2]
   1fdf8:	add	r3, r3, r3, lsl #1
   1fdfc:	add	r2, ip, r3, lsl #3
   1fe00:	ldr	r1, [r2, #8]
   1fe04:	cmp	r0, r1
   1fe08:	ble	1fea8 <__assert_fail@plt+0xe950>
   1fe0c:	ldr	r1, [r2, #4]
   1fe10:	cmp	r0, r1
   1fe14:	bgt	1fea8 <__assert_fail@plt+0xe950>
   1fe18:	ldr	r1, [r2, #12]
   1fe1c:	ldr	r2, [ip, r3, lsl #3]
   1fe20:	ldr	r3, [r5]
   1fe24:	cmp	r0, r1
   1fe28:	ldr	r7, [r4, #4]
   1fe2c:	ldr	r9, [r3, r2, lsl #3]
   1fe30:	beq	1fec8 <__assert_fail@plt+0xe970>
   1fe34:	cmp	r7, #0
   1fe38:	ble	1fea8 <__assert_fail@plt+0xe950>
   1fe3c:	mov	r8, #0
   1fe40:	ldr	fp, [sp, #36]	; 0x24
   1fe44:	b	1fe58 <__assert_fail@plt+0xe900>
   1fe48:	add	r8, r8, #1
   1fe4c:	cmp	r8, r7
   1fe50:	bge	1fea8 <__assert_fail@plt+0xe950>
   1fe54:	ldr	r3, [r5]
   1fe58:	ldr	r2, [r4, #8]
   1fe5c:	ldr	r1, [r2, r8, lsl #2]
   1fe60:	add	r2, r3, r1, lsl #3
   1fe64:	ldrb	r2, [r2, #4]
   1fe68:	sub	r2, r2, #8
   1fe6c:	cmp	r2, #1
   1fe70:	bhi	1fe48 <__assert_fail@plt+0xe8f0>
   1fe74:	ldr	r3, [r3, r1, lsl #3]
   1fe78:	cmp	r9, r3
   1fe7c:	bne	1fe48 <__assert_fail@plt+0xe8f0>
   1fe80:	mov	r3, fp
   1fe84:	mov	r2, r4
   1fe88:	mov	r0, r5
   1fe8c:	bl	193d0 <__assert_fail@plt+0x7e78>
   1fe90:	cmp	r0, #0
   1fe94:	bne	1ffd0 <__assert_fail@plt+0xea78>
   1fe98:	ldr	r7, [r4, #4]
   1fe9c:	add	r8, r8, #1
   1fea0:	cmp	r8, r7
   1fea4:	blt	1fe54 <__assert_fail@plt+0xe8fc>
   1fea8:	ldr	r3, [sl, #20]
   1feac:	add	r6, r6, #1
   1feb0:	cmp	r6, r3
   1feb4:	blt	1fde8 <__assert_fail@plt+0xe890>
   1feb8:	ldr	fp, [sp, #28]
   1febc:	mov	r3, #0
   1fec0:	str	r3, [sp, #72]	; 0x48
   1fec4:	b	1f9c8 <__assert_fail@plt+0xe470>
   1fec8:	cmp	r7, #0
   1fecc:	ble	1fea8 <__assert_fail@plt+0xe950>
   1fed0:	ldr	lr, [r4, #8]
   1fed4:	mvn	r8, #0
   1fed8:	mov	fp, r8
   1fedc:	str	r6, [sp, #40]	; 0x28
   1fee0:	add	r2, lr, r7, lsl #2
   1fee4:	mov	r1, lr
   1fee8:	mov	r6, r2
   1feec:	b	1ff0c <__assert_fail@plt+0xe9b4>
   1fef0:	cmp	r0, #9
   1fef4:	bne	1ff04 <__assert_fail@plt+0xe9ac>
   1fef8:	ldr	r0, [ip]
   1fefc:	cmp	r9, r0
   1ff00:	moveq	r8, r2
   1ff04:	cmp	r6, r1
   1ff08:	beq	1ff34 <__assert_fail@plt+0xe9dc>
   1ff0c:	ldr	r2, [r1], #4
   1ff10:	add	ip, r3, r2, lsl #3
   1ff14:	ldrb	r0, [ip, #4]
   1ff18:	cmp	r0, #8
   1ff1c:	bne	1fef0 <__assert_fail@plt+0xe998>
   1ff20:	ldr	r0, [r3, r2, lsl #3]
   1ff24:	cmp	r9, r0
   1ff28:	moveq	fp, r2
   1ff2c:	cmp	r6, r1
   1ff30:	bne	1ff0c <__assert_fail@plt+0xe9b4>
   1ff34:	cmp	fp, #0
   1ff38:	ldr	r6, [sp, #40]	; 0x28
   1ff3c:	bge	1ffd8 <__assert_fail@plt+0xea80>
   1ff40:	cmp	r8, #0
   1ff44:	blt	1fea8 <__assert_fail@plt+0xe950>
   1ff48:	mov	r9, #0
   1ff4c:	str	r6, [sp, #40]	; 0x28
   1ff50:	b	1ff64 <__assert_fail@plt+0xea0c>
   1ff54:	add	r9, r9, #1
   1ff58:	cmp	r7, r9
   1ff5c:	ble	20018 <__assert_fail@plt+0xeac0>
   1ff60:	ldr	lr, [r4, #8]
   1ff64:	mov	r2, r8
   1ff68:	ldr	r6, [lr, r9, lsl #2]
   1ff6c:	ldr	r0, [r5, #28]
   1ff70:	add	fp, r6, r6, lsl #1
   1ff74:	lsl	fp, fp, #2
   1ff78:	add	r0, r0, fp
   1ff7c:	add	r1, r0, #8
   1ff80:	ldr	r0, [r0, #4]
   1ff84:	bl	17db4 <__assert_fail@plt+0x685c>
   1ff88:	cmp	r0, #0
   1ff8c:	bne	1ff54 <__assert_fail@plt+0xe9fc>
   1ff90:	ldr	r1, [r5, #24]
   1ff94:	add	fp, r1, fp
   1ff98:	add	r1, fp, #8
   1ff9c:	ldr	r0, [fp, #4]
   1ffa0:	bl	17db4 <__assert_fail@plt+0x685c>
   1ffa4:	cmp	r0, #0
   1ffa8:	bne	1ff54 <__assert_fail@plt+0xe9fc>
   1ffac:	mov	r1, r6
   1ffb0:	mov	r2, r4
   1ffb4:	ldr	r3, [sp, #36]	; 0x24
   1ffb8:	mov	r0, r5
   1ffbc:	bl	193d0 <__assert_fail@plt+0x7e78>
   1ffc0:	cmp	r0, #0
   1ffc4:	bne	1ffd0 <__assert_fail@plt+0xea78>
   1ffc8:	ldr	r7, [r4, #4]
   1ffcc:	b	1ff58 <__assert_fail@plt+0xea00>
   1ffd0:	mov	r3, r0
   1ffd4:	b	1f8d0 <__assert_fail@plt+0xe378>
   1ffd8:	mov	r1, fp
   1ffdc:	mov	r2, r4
   1ffe0:	ldr	r3, [sp, #36]	; 0x24
   1ffe4:	mov	r0, r5
   1ffe8:	bl	193d0 <__assert_fail@plt+0x7e78>
   1ffec:	cmp	r0, #0
   1fff0:	bne	1ffd0 <__assert_fail@plt+0xea78>
   1fff4:	cmp	r8, #0
   1fff8:	blt	1fea8 <__assert_fail@plt+0xe950>
   1fffc:	ldr	r7, [r4, #4]
   20000:	cmp	r7, #0
   20004:	ble	1fea8 <__assert_fail@plt+0xe950>
   20008:	ldr	lr, [r4, #8]
   2000c:	b	1ff48 <__assert_fail@plt+0xe9f0>
   20010:	mov	r3, #12
   20014:	b	1fda0 <__assert_fail@plt+0xe848>
   20018:	ldr	r6, [sp, #40]	; 0x28
   2001c:	b	1fea8 <__assert_fail@plt+0xe950>
   20020:	mov	r3, #0
   20024:	b	1fdac <__assert_fail@plt+0xe854>
   20028:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2002c:	ldr	r3, [r1, #56]	; 0x38
   20030:	strd	r6, [sp, #8]
   20034:	mov	r6, r0
   20038:	ldr	r7, [r1, #40]	; 0x28
   2003c:	strd	r8, [sp, #16]
   20040:	str	sl, [sp, #24]
   20044:	str	lr, [sp, #28]
   20048:	sub	sp, sp, #8
   2004c:	cmp	r3, r7
   20050:	movle	r3, #2
   20054:	movle	r0, #0
   20058:	strble	r3, [r6, #4]
   2005c:	ble	20324 <__assert_fail@plt+0xedcc>
   20060:	ldr	sl, [r1, #4]
   20064:	mov	r8, r2
   20068:	mov	r5, r1
   2006c:	ldrb	r3, [r6, #6]
   20070:	ldr	r2, [r1, #80]	; 0x50
   20074:	ldrb	r4, [sl, r7]
   20078:	bic	r3, r3, #96	; 0x60
   2007c:	cmp	r2, #1
   20080:	strb	r4, [r6]
   20084:	strb	r3, [r6, #6]
   20088:	ble	20340 <__assert_fail@plt+0xede8>
   2008c:	ldr	r3, [r1, #28]
   20090:	cmp	r7, r3
   20094:	beq	200a8 <__assert_fail@plt+0xeb50>
   20098:	ldr	r3, [r1, #8]
   2009c:	ldr	r3, [r3, r7, lsl #2]
   200a0:	cmn	r3, #1
   200a4:	beq	20588 <__assert_fail@plt+0xf030>
   200a8:	cmp	r4, #92	; 0x5c
   200ac:	beq	2037c <__assert_fail@plt+0xee24>
   200b0:	ldr	r3, [r5, #8]
   200b4:	mov	r2, #1
   200b8:	strb	r2, [r6, #4]
   200bc:	ldr	r9, [r3, r7, lsl #2]
   200c0:	mov	r0, r9
   200c4:	sub	r9, r9, #95	; 0x5f
   200c8:	bl	11438 <iswalnum@plt>
   200cc:	ldrb	r3, [r6, #6]
   200d0:	clz	r9, r9
   200d4:	cmp	r0, #0
   200d8:	lsr	r9, r9, #5
   200dc:	movne	r9, #1
   200e0:	bfi	r3, r9, #6, #1
   200e4:	strb	r3, [r6, #6]
   200e8:	sub	r4, r4, #10
   200ec:	cmp	r4, #115	; 0x73
   200f0:	ldrls	pc, [pc, r4, lsl #2]
   200f4:	b	20580 <__assert_fail@plt+0xf028>
   200f8:	andeq	r0, r2, r0, ror #13
   200fc:	andeq	r0, r2, r0, lsl #11
   20100:	andeq	r0, r2, r0, lsl #11
   20104:	andeq	r0, r2, r0, lsl #11
   20108:	andeq	r0, r2, r0, lsl #11
   2010c:	andeq	r0, r2, r0, lsl #11
   20110:	andeq	r0, r2, r0, lsl #11
   20114:	andeq	r0, r2, r0, lsl #11
   20118:	andeq	r0, r2, r0, lsl #11
   2011c:	andeq	r0, r2, r0, lsl #11
   20120:	andeq	r0, r2, r0, lsl #11
   20124:	andeq	r0, r2, r0, lsl #11
   20128:	andeq	r0, r2, r0, lsl #11
   2012c:	andeq	r0, r2, r0, lsl #11
   20130:	andeq	r0, r2, r0, lsl #11
   20134:	andeq	r0, r2, r0, lsl #11
   20138:	andeq	r0, r2, r0, lsl #11
   2013c:	andeq	r0, r2, r0, lsl #11
   20140:	andeq	r0, r2, r0, lsl #11
   20144:	andeq	r0, r2, r0, lsl #11
   20148:	andeq	r0, r2, r0, lsl #11
   2014c:	andeq	r0, r2, r0, lsl #11
   20150:	andeq	r0, r2, r0, lsl #11
   20154:	andeq	r0, r2, r0, lsl #11
   20158:	andeq	r0, r2, r0, lsl #11
   2015c:	andeq	r0, r2, r0, lsl #11
   20160:	andeq	r0, r2, r8, asr #5
   20164:	andeq	r0, r2, r0, lsl #11
   20168:	andeq	r0, r2, r0, lsl #11
   2016c:	andeq	r0, r2, r0, lsl #11
   20170:	andeq	r0, r2, ip, asr r6
   20174:	andeq	r0, r2, r4, ror r6
   20178:	andeq	r0, r2, ip, asr #12
   2017c:	andeq	r0, r2, ip, lsl #13
   20180:	andeq	r0, r2, r0, lsl #11
   20184:	andeq	r0, r2, r0, lsl #11
   20188:	ldrdeq	r0, [r2], -r4
   2018c:	andeq	r0, r2, r0, lsl #11
   20190:	andeq	r0, r2, r0, lsl #11
   20194:	andeq	r0, r2, r0, lsl #11
   20198:	andeq	r0, r2, r0, lsl #11
   2019c:	andeq	r0, r2, r0, lsl #11
   201a0:	andeq	r0, r2, r0, lsl #11
   201a4:	andeq	r0, r2, r0, lsl #11
   201a8:	andeq	r0, r2, r0, lsl #11
   201ac:	andeq	r0, r2, r0, lsl #11
   201b0:	andeq	r0, r2, r0, lsl #11
   201b4:	andeq	r0, r2, r0, lsl #11
   201b8:	andeq	r0, r2, r0, lsl #11
   201bc:	andeq	r0, r2, r0, lsl #11
   201c0:	andeq	r0, r2, r0, lsl #11
   201c4:	andeq	r0, r2, r0, lsl #11
   201c8:	andeq	r0, r2, r0, lsl #11
   201cc:	andeq	r0, r2, r4, ror #11
   201d0:	andeq	r0, r2, r0, lsl #11
   201d4:	andeq	r0, r2, r0, lsl #11
   201d8:	andeq	r0, r2, r0, lsl #11
   201dc:	andeq	r0, r2, r0, lsl #11
   201e0:	andeq	r0, r2, r0, lsl #11
   201e4:	andeq	r0, r2, r0, lsl #11
   201e8:	andeq	r0, r2, r0, lsl #11
   201ec:	andeq	r0, r2, r0, lsl #11
   201f0:	andeq	r0, r2, r0, lsl #11
   201f4:	andeq	r0, r2, r0, lsl #11
   201f8:	andeq	r0, r2, r0, lsl #11
   201fc:	andeq	r0, r2, r0, lsl #11
   20200:	andeq	r0, r2, r0, lsl #11
   20204:	andeq	r0, r2, r0, lsl #11
   20208:	andeq	r0, r2, r0, lsl #11
   2020c:	andeq	r0, r2, r0, lsl #11
   20210:	andeq	r0, r2, r0, lsl #11
   20214:	andeq	r0, r2, r0, lsl #11
   20218:	andeq	r0, r2, r0, lsl #11
   2021c:	andeq	r0, r2, r0, lsl #11
   20220:	andeq	r0, r2, r0, lsl #11
   20224:	andeq	r0, r2, r0, lsl #11
   20228:	andeq	r0, r2, r0, lsl #11
   2022c:	andeq	r0, r2, r0, lsl #11
   20230:	andeq	r0, r2, r0, lsl #11
   20234:	andeq	r0, r2, r0, lsl #11
   20238:	andeq	r0, r2, r0, lsl #11
   2023c:	andeq	r0, r2, r0, lsl #12
   20240:	andeq	r0, r2, r0, lsl #11
   20244:	andeq	r0, r2, r0, lsl #11
   20248:	andeq	r0, r2, r0, lsl r6
   2024c:	andeq	r0, r2, r0, lsl #11
   20250:	andeq	r0, r2, r0, lsl #11
   20254:	andeq	r0, r2, r0, lsl #11
   20258:	andeq	r0, r2, r0, lsl #11
   2025c:	andeq	r0, r2, r0, lsl #11
   20260:	andeq	r0, r2, r0, lsl #11
   20264:	andeq	r0, r2, r0, lsl #11
   20268:	andeq	r0, r2, r0, lsl #11
   2026c:	andeq	r0, r2, r0, lsl #11
   20270:	andeq	r0, r2, r0, lsl #11
   20274:	andeq	r0, r2, r0, lsl #11
   20278:	andeq	r0, r2, r0, lsl #11
   2027c:	andeq	r0, r2, r0, lsl #11
   20280:	andeq	r0, r2, r0, lsl #11
   20284:	andeq	r0, r2, r0, lsl #11
   20288:	andeq	r0, r2, r0, lsl #11
   2028c:	andeq	r0, r2, r0, lsl #11
   20290:	andeq	r0, r2, r0, lsl #11
   20294:	andeq	r0, r2, r0, lsl #11
   20298:	andeq	r0, r2, r0, lsl #11
   2029c:	andeq	r0, r2, r0, lsl #11
   202a0:	andeq	r0, r2, r0, lsl #11
   202a4:	andeq	r0, r2, r0, lsl #11
   202a8:	andeq	r0, r2, r0, lsl #11
   202ac:	andeq	r0, r2, r0, lsl #11
   202b0:	andeq	r0, r2, r0, lsl #11
   202b4:	andeq	r0, r2, r0, lsl #11
   202b8:	andeq	r0, r2, r0, lsl #11
   202bc:	andeq	r0, r2, r8, lsr #13
   202c0:	andeq	r0, r2, r4, asr #13
   202c4:	andeq	r0, r2, ip, ror #13
   202c8:	tst	r8, #8
   202cc:	bne	20310 <__assert_fail@plt+0xedb8>
   202d0:	ldr	r3, [r5, #48]	; 0x30
   202d4:	add	r7, r7, #1
   202d8:	cmp	r7, r3
   202dc:	beq	20310 <__assert_fail@plt+0xedb8>
   202e0:	mov	r2, r8
   202e4:	mov	r1, r5
   202e8:	str	r7, [r5, #40]	; 0x28
   202ec:	mov	r0, sp
   202f0:	bl	20028 <__assert_fail@plt+0xead0>
   202f4:	ldrb	r2, [sp, #4]
   202f8:	ldr	r3, [r5, #40]	; 0x28
   202fc:	sub	r2, r2, #9
   20300:	cmp	r2, #1
   20304:	sub	r3, r3, #1
   20308:	str	r3, [r5, #40]	; 0x28
   2030c:	bhi	20580 <__assert_fail@plt+0xf028>
   20310:	mov	r3, #12
   20314:	mov	r2, #32
   20318:	mov	r0, #1
   2031c:	str	r2, [r6]
   20320:	strb	r3, [r6, #4]
   20324:	add	sp, sp, #8
   20328:	ldrd	r4, [sp]
   2032c:	ldrd	r6, [sp, #8]
   20330:	ldrd	r8, [sp, #16]
   20334:	ldr	sl, [sp, #24]
   20338:	add	sp, sp, #28
   2033c:	pop	{pc}		; (ldr pc, [sp], #4)
   20340:	cmp	r4, #92	; 0x5c
   20344:	beq	2037c <__assert_fail@plt+0xee24>
   20348:	mov	r3, #1
   2034c:	strb	r3, [r6, #4]
   20350:	bl	113fc <__ctype_b_loc@plt>
   20354:	ldr	r1, [r0]
   20358:	lsl	r3, r4, #1
   2035c:	ldrb	r2, [r6, #6]
   20360:	ldrh	r3, [r1, r3]
   20364:	ubfx	r3, r3, #3, #1
   20368:	cmp	r4, #95	; 0x5f
   2036c:	orreq	r3, r3, #1
   20370:	bfi	r2, r3, #6, #1
   20374:	strb	r2, [r6, #6]
   20378:	b	200e8 <__assert_fail@plt+0xeb90>
   2037c:	ldr	r1, [r5, #48]	; 0x30
   20380:	add	r3, r7, #1
   20384:	cmp	r3, r1
   20388:	blt	2039c <__assert_fail@plt+0xee44>
   2038c:	mov	r3, #36	; 0x24
   20390:	mov	r0, #1
   20394:	strb	r3, [r6, #4]
   20398:	b	20324 <__assert_fail@plt+0xedcc>
   2039c:	ldrb	r1, [r5, #75]	; 0x4b
   203a0:	cmp	r1, #0
   203a4:	bne	2090c <__assert_fail@plt+0xf3b4>
   203a8:	ldrb	r7, [sl, r3]
   203ac:	mov	r1, #1
   203b0:	strb	r7, [r6]
   203b4:	cmp	r2, r1
   203b8:	strb	r1, [r6, #4]
   203bc:	ble	205a8 <__assert_fail@plt+0xf050>
   203c0:	ldr	r1, [r5, #8]
   203c4:	add	r1, r1, r3, lsl #2
   203c8:	ldr	r4, [r1]
   203cc:	mov	r0, r4
   203d0:	sub	r4, r4, #95	; 0x5f
   203d4:	bl	11438 <iswalnum@plt>
   203d8:	ldrb	r3, [r6, #6]
   203dc:	clz	r4, r4
   203e0:	cmp	r0, #0
   203e4:	lsr	r4, r4, #5
   203e8:	movne	r4, #1
   203ec:	bfi	r3, r4, #6, #1
   203f0:	strb	r3, [r6, #6]
   203f4:	sub	r3, r7, #39	; 0x27
   203f8:	cmp	r3, #86	; 0x56
   203fc:	ldrls	pc, [pc, r3, lsl #2]
   20400:	b	20720 <__assert_fail@plt+0xf1c8>
   20404:	ldrdeq	r0, [r2], -r4
   20408:	strdeq	r0, [r2], -r4
   2040c:			; <UNDEFINED> instruction: 0x000208bc
   20410:	andeq	r0, r2, r0, lsr #14
   20414:	muleq	r2, ip, r8
   20418:	andeq	r0, r2, r0, lsr #14
   2041c:	andeq	r0, r2, r0, lsr #14
   20420:	andeq	r0, r2, r0, lsr #14
   20424:	andeq	r0, r2, r0, lsr #14
   20428:	andeq	r0, r2, r0, lsr #14
   2042c:	andeq	r0, r2, ip, ror r8
   20430:	andeq	r0, r2, ip, ror r8
   20434:	andeq	r0, r2, ip, ror r8
   20438:	andeq	r0, r2, ip, ror r8
   2043c:	andeq	r0, r2, ip, ror r8
   20440:	andeq	r0, r2, ip, ror r8
   20444:	andeq	r0, r2, ip, ror r8
   20448:	andeq	r0, r2, ip, ror r8
   2044c:	andeq	r0, r2, ip, ror r8
   20450:	andeq	r0, r2, r0, lsr #14
   20454:	andeq	r0, r2, r0, lsr #14
   20458:	andeq	r0, r2, ip, asr r8
   2045c:	andeq	r0, r2, r0, lsr #14
   20460:	andeq	r0, r2, ip, lsr r8
   20464:	andeq	r0, r2, ip, lsl r8
   20468:	andeq	r0, r2, r0, lsr #14
   2046c:	andeq	r0, r2, r0, lsr #14
   20470:	strdeq	r0, [r2], -ip
   20474:	andeq	r0, r2, r0, lsr #14
   20478:	andeq	r0, r2, r0, lsr #14
   2047c:	andeq	r0, r2, r0, lsr #14
   20480:	andeq	r0, r2, r0, lsr #14
   20484:	andeq	r0, r2, r0, lsr #14
   20488:	andeq	r0, r2, r0, lsr #14
   2048c:	andeq	r0, r2, r0, lsr #14
   20490:	andeq	r0, r2, r0, lsr #14
   20494:	andeq	r0, r2, r0, lsr #14
   20498:	andeq	r0, r2, r0, lsr #14
   2049c:	andeq	r0, r2, r0, lsr #14
   204a0:	andeq	r0, r2, r0, lsr #14
   204a4:	andeq	r0, r2, r0, lsr #14
   204a8:	andeq	r0, r2, r0, lsr #14
   204ac:	andeq	r0, r2, r0, lsr #14
   204b0:	andeq	r0, r2, r0, lsr #14
   204b4:	andeq	r0, r2, r4, ror #15
   204b8:	andeq	r0, r2, r0, lsr #14
   204bc:	andeq	r0, r2, r0, lsr #14
   204c0:	andeq	r0, r2, r0, lsr #14
   204c4:	andeq	r0, r2, ip, asr #15
   204c8:	andeq	r0, r2, r0, lsr #14
   204cc:	andeq	r0, r2, r0, lsr #14
   204d0:	andeq	r0, r2, r0, lsr #14
   204d4:	andeq	r0, r2, r0, lsr #14
   204d8:	andeq	r0, r2, r0, lsr #14
   204dc:	andeq	r0, r2, r0, lsr #14
   204e0:	andeq	r0, r2, r0, lsr #14
   204e4:	andeq	r0, r2, r0, lsr #14
   204e8:	andeq	r0, r2, ip, lsr #15
   204ec:	andeq	r0, r2, r0, lsr #14
   204f0:	andeq	r0, r2, ip, lsl #15
   204f4:	andeq	r0, r2, r0, lsr #14
   204f8:	andeq	r0, r2, r0, lsr #14
   204fc:	andeq	r0, r2, r0, lsr #14
   20500:	andeq	r0, r2, r0, lsr #14
   20504:	andeq	r0, r2, r0, lsr #14
   20508:	andeq	r0, r2, r0, lsr #14
   2050c:	andeq	r0, r2, r0, lsr #14
   20510:	andeq	r0, r2, r0, lsr #14
   20514:	andeq	r0, r2, r0, lsr #14
   20518:	andeq	r0, r2, r0, lsr #14
   2051c:	andeq	r0, r2, r0, lsr #14
   20520:	andeq	r0, r2, r0, lsr #14
   20524:	andeq	r0, r2, r0, lsr #14
   20528:	andeq	r0, r2, r0, lsr #14
   2052c:	andeq	r0, r2, r0, lsr #14
   20530:	andeq	r0, r2, r0, lsr #14
   20534:	andeq	r0, r2, r4, ror r7
   20538:	andeq	r0, r2, r0, lsr #14
   2053c:	andeq	r0, r2, r0, lsr #14
   20540:	andeq	r0, r2, r0, lsr #14
   20544:	andeq	r0, r2, ip, asr r7
   20548:	andeq	r0, r2, r0, lsr #14
   2054c:	andeq	r0, r2, r0, lsr #14
   20550:	andeq	r0, r2, r0, lsr #14
   20554:	andeq	r0, r2, r0, asr #14
   20558:	andeq	r0, r2, r8, lsr #14
   2055c:	andeq	r0, r2, r8, lsl #14
   20560:	add	r7, sl, r7
   20564:	eor	r3, r8, #2048	; 0x800
   20568:	ldrb	r2, [r7, #-1]
   2056c:	ubfx	r3, r3, #11, #1
   20570:	cmp	r2, #10
   20574:	orrne	r3, r3, #1
   20578:	cmp	r3, #0
   2057c:	beq	20634 <__assert_fail@plt+0xf0dc>
   20580:	mov	r0, #1
   20584:	b	20324 <__assert_fail@plt+0xedcc>
   20588:	ldr	r3, [r6, #4]
   2058c:	mov	r0, #1
   20590:	bic	r3, r3, #2097152	; 0x200000
   20594:	bic	r3, r3, #255	; 0xff
   20598:	orr	r3, r3, #2097152	; 0x200000
   2059c:	orr	r3, r3, r0
   205a0:	str	r3, [r6, #4]
   205a4:	b	20324 <__assert_fail@plt+0xedcc>
   205a8:	bl	113fc <__ctype_b_loc@plt>
   205ac:	ldr	r1, [r0]
   205b0:	lsl	r3, r7, #1
   205b4:	ldrb	r2, [r6, #6]
   205b8:	ldrh	r3, [r1, r3]
   205bc:	ubfx	r3, r3, #3, #1
   205c0:	cmp	r7, #95	; 0x5f
   205c4:	orreq	r3, r3, #1
   205c8:	bfi	r2, r3, #6, #1
   205cc:	strb	r2, [r6, #6]
   205d0:	b	203f4 <__assert_fail@plt+0xee9c>
   205d4:	mov	r3, #5
   205d8:	mov	r0, #1
   205dc:	strb	r3, [r6, #4]
   205e0:	b	20324 <__assert_fail@plt+0xedcc>
   205e4:	movw	r3, #1026	; 0x402
   205e8:	tst	r8, r3
   205ec:	bne	20580 <__assert_fail@plt+0xf028>
   205f0:	mov	r3, #19
   205f4:	mov	r0, #1
   205f8:	strb	r3, [r6, #4]
   205fc:	b	20324 <__assert_fail@plt+0xedcc>
   20600:	mov	r3, #20
   20604:	mov	r0, #1
   20608:	strb	r3, [r6, #4]
   2060c:	b	20324 <__assert_fail@plt+0xedcc>
   20610:	mov	r3, #8
   20614:	movt	r3, #128	; 0x80
   20618:	tst	r8, r3
   2061c:	moveq	r3, #1
   20620:	movne	r3, #0
   20624:	cmp	r7, #0
   20628:	moveq	r3, #0
   2062c:	cmp	r3, #0
   20630:	bne	20560 <__assert_fail@plt+0xf008>
   20634:	mov	r3, #12
   20638:	mov	r2, #16
   2063c:	mov	r0, #1
   20640:	str	r2, [r6]
   20644:	strb	r3, [r6, #4]
   20648:	b	20324 <__assert_fail@plt+0xedcc>
   2064c:	mov	r3, #11
   20650:	mov	r0, #1
   20654:	strb	r3, [r6, #4]
   20658:	b	20324 <__assert_fail@plt+0xedcc>
   2065c:	tst	r8, #8192	; 0x2000
   20660:	beq	20580 <__assert_fail@plt+0xf028>
   20664:	mov	r3, #8
   20668:	mov	r0, #1
   2066c:	strb	r3, [r6, #4]
   20670:	b	20324 <__assert_fail@plt+0xedcc>
   20674:	tst	r8, #8192	; 0x2000
   20678:	beq	20580 <__assert_fail@plt+0xf028>
   2067c:	mov	r3, #9
   20680:	mov	r0, #1
   20684:	strb	r3, [r6, #4]
   20688:	b	20324 <__assert_fail@plt+0xedcc>
   2068c:	movw	r3, #1026	; 0x402
   20690:	tst	r8, r3
   20694:	bne	20580 <__assert_fail@plt+0xf028>
   20698:	mov	r3, #18
   2069c:	mov	r0, #1
   206a0:	strb	r3, [r6, #4]
   206a4:	b	20324 <__assert_fail@plt+0xedcc>
   206a8:	and	r2, r8, #4608	; 0x1200
   206ac:	cmp	r2, #4608	; 0x1200
   206b0:	moveq	r3, #23
   206b4:	moveq	r0, #1
   206b8:	strbeq	r3, [r6, #4]
   206bc:	bne	20580 <__assert_fail@plt+0xf028>
   206c0:	b	20324 <__assert_fail@plt+0xedcc>
   206c4:	and	r2, r8, #33792	; 0x8400
   206c8:	cmp	r2, #32768	; 0x8000
   206cc:	bne	20580 <__assert_fail@plt+0xf028>
   206d0:	mov	r3, #10
   206d4:	mov	r0, #1
   206d8:	strb	r3, [r6, #4]
   206dc:	b	20324 <__assert_fail@plt+0xedcc>
   206e0:	tst	r8, #2048	; 0x800
   206e4:	beq	20580 <__assert_fail@plt+0xf028>
   206e8:	b	206d0 <__assert_fail@plt+0xf178>
   206ec:	and	r2, r8, #4608	; 0x1200
   206f0:	cmp	r2, #4608	; 0x1200
   206f4:	moveq	r3, #24
   206f8:	moveq	r0, #1
   206fc:	strbeq	r3, [r6, #4]
   20700:	bne	20580 <__assert_fail@plt+0xf028>
   20704:	b	20324 <__assert_fail@plt+0xedcc>
   20708:	and	r2, r8, #4608	; 0x1200
   2070c:	cmp	r2, #512	; 0x200
   20710:	moveq	r3, #24
   20714:	moveq	r0, #2
   20718:	strbeq	r3, [r6, #4]
   2071c:	beq	20324 <__assert_fail@plt+0xedcc>
   20720:	mov	r0, #2
   20724:	b	20324 <__assert_fail@plt+0xedcc>
   20728:	tst	r8, #33792	; 0x8400
   2072c:	bne	20720 <__assert_fail@plt+0xf1c8>
   20730:	mov	r3, #10
   20734:	mov	r0, #2
   20738:	strb	r3, [r6, #4]
   2073c:	b	20324 <__assert_fail@plt+0xedcc>
   20740:	and	r2, r8, #4608	; 0x1200
   20744:	cmp	r2, #512	; 0x200
   20748:	moveq	r3, #23
   2074c:	moveq	r0, #2
   20750:	strbeq	r3, [r6, #4]
   20754:	bne	20720 <__assert_fail@plt+0xf1c8>
   20758:	b	20324 <__assert_fail@plt+0xedcc>
   2075c:	tst	r8, #524288	; 0x80000
   20760:	bne	20720 <__assert_fail@plt+0xf1c8>
   20764:	mov	r3, #32
   20768:	mov	r0, #2
   2076c:	strb	r3, [r6, #4]
   20770:	b	20324 <__assert_fail@plt+0xedcc>
   20774:	tst	r8, #524288	; 0x80000
   20778:	bne	20720 <__assert_fail@plt+0xf1c8>
   2077c:	mov	r3, #34	; 0x22
   20780:	mov	r0, #2
   20784:	strb	r3, [r6, #4]
   20788:	b	20324 <__assert_fail@plt+0xedcc>
   2078c:	tst	r8, #524288	; 0x80000
   20790:	bne	20720 <__assert_fail@plt+0xf1c8>
   20794:	mov	r3, #12
   20798:	mov	r2, #256	; 0x100
   2079c:	mov	r0, #2
   207a0:	str	r2, [r6]
   207a4:	strb	r3, [r6, #4]
   207a8:	b	20324 <__assert_fail@plt+0xedcc>
   207ac:	tst	r8, #524288	; 0x80000
   207b0:	bne	20720 <__assert_fail@plt+0xf1c8>
   207b4:	mov	r3, #12
   207b8:	mov	r2, #64	; 0x40
   207bc:	mov	r0, #2
   207c0:	str	r2, [r6]
   207c4:	strb	r3, [r6, #4]
   207c8:	b	20324 <__assert_fail@plt+0xedcc>
   207cc:	tst	r8, #524288	; 0x80000
   207d0:	bne	20720 <__assert_fail@plt+0xf1c8>
   207d4:	mov	r3, #33	; 0x21
   207d8:	mov	r0, #2
   207dc:	strb	r3, [r6, #4]
   207e0:	b	20324 <__assert_fail@plt+0xedcc>
   207e4:	tst	r8, #524288	; 0x80000
   207e8:	bne	20720 <__assert_fail@plt+0xf1c8>
   207ec:	mov	r3, #35	; 0x23
   207f0:	mov	r0, #2
   207f4:	strb	r3, [r6, #4]
   207f8:	b	20324 <__assert_fail@plt+0xedcc>
   207fc:	tst	r8, #524288	; 0x80000
   20800:	bne	20720 <__assert_fail@plt+0xf1c8>
   20804:	mov	r3, #12
   20808:	mov	r2, #512	; 0x200
   2080c:	mov	r0, #2
   20810:	str	r2, [r6]
   20814:	strb	r3, [r6, #4]
   20818:	b	20324 <__assert_fail@plt+0xedcc>
   2081c:	movw	r2, #1026	; 0x402
   20820:	and	r2, r2, r8
   20824:	cmp	r2, #2
   20828:	moveq	r3, #19
   2082c:	moveq	r0, r2
   20830:	strbeq	r3, [r6, #4]
   20834:	bne	20720 <__assert_fail@plt+0xf1c8>
   20838:	b	20324 <__assert_fail@plt+0xedcc>
   2083c:	tst	r8, #524288	; 0x80000
   20840:	bne	20720 <__assert_fail@plt+0xf1c8>
   20844:	mov	r3, #12
   20848:	mov	r2, #9
   2084c:	mov	r0, #2
   20850:	str	r2, [r6]
   20854:	strb	r3, [r6, #4]
   20858:	b	20324 <__assert_fail@plt+0xedcc>
   2085c:	tst	r8, #524288	; 0x80000
   20860:	bne	20720 <__assert_fail@plt+0xf1c8>
   20864:	mov	r3, #12
   20868:	mov	r2, #6
   2086c:	mov	r0, #2
   20870:	str	r2, [r6]
   20874:	strb	r3, [r6, #4]
   20878:	b	20324 <__assert_fail@plt+0xedcc>
   2087c:	tst	r8, #16384	; 0x4000
   20880:	bne	20720 <__assert_fail@plt+0xf1c8>
   20884:	sub	r7, r7, #49	; 0x31
   20888:	mov	r3, #4
   2088c:	mov	r0, #2
   20890:	str	r7, [r6]
   20894:	strb	r3, [r6, #4]
   20898:	b	20324 <__assert_fail@plt+0xedcc>
   2089c:	movw	r2, #1026	; 0x402
   208a0:	and	r2, r2, r8
   208a4:	cmp	r2, #2
   208a8:	moveq	r3, #18
   208ac:	moveq	r0, r2
   208b0:	strbeq	r3, [r6, #4]
   208b4:	bne	20720 <__assert_fail@plt+0xf1c8>
   208b8:	b	20324 <__assert_fail@plt+0xedcc>
   208bc:	tst	r8, #8192	; 0x2000
   208c0:	bne	20720 <__assert_fail@plt+0xf1c8>
   208c4:	mov	r3, #9
   208c8:	mov	r0, #2
   208cc:	strb	r3, [r6, #4]
   208d0:	b	20324 <__assert_fail@plt+0xedcc>
   208d4:	tst	r8, #524288	; 0x80000
   208d8:	bne	20720 <__assert_fail@plt+0xf1c8>
   208dc:	mov	r3, #12
   208e0:	mov	r2, #128	; 0x80
   208e4:	mov	r0, #2
   208e8:	str	r2, [r6]
   208ec:	strb	r3, [r6, #4]
   208f0:	b	20324 <__assert_fail@plt+0xedcc>
   208f4:	tst	r8, #8192	; 0x2000
   208f8:	bne	20720 <__assert_fail@plt+0xf1c8>
   208fc:	mov	r3, #8
   20900:	mov	r0, #2
   20904:	strb	r3, [r6, #4]
   20908:	b	20324 <__assert_fail@plt+0xedcc>
   2090c:	cmp	r2, #1
   20910:	ble	20944 <__assert_fail@plt+0xf3ec>
   20914:	ldr	r1, [r5, #8]
   20918:	ldr	r0, [r1, r3, lsl #2]
   2091c:	add	r1, r1, r3, lsl #2
   20920:	cmn	r0, #1
   20924:	beq	20980 <__assert_fail@plt+0xf428>
   20928:	ldr	r0, [r5, #28]
   2092c:	add	r7, r7, #2
   20930:	cmp	r0, r7
   20934:	beq	20944 <__assert_fail@plt+0xf3ec>
   20938:	ldr	r0, [r1, #4]
   2093c:	cmn	r0, #1
   20940:	beq	20980 <__assert_fail@plt+0xf428>
   20944:	ldrb	r0, [r5, #76]	; 0x4c
   20948:	ldr	r1, [r5]
   2094c:	ldr	ip, [r5, #24]
   20950:	cmp	r0, #0
   20954:	beq	20974 <__assert_fail@plt+0xf41c>
   20958:	ldr	r0, [r5, #12]
   2095c:	add	r1, r1, ip
   20960:	ldr	r0, [r0, r3, lsl #2]
   20964:	ldrb	r7, [r1, r0]
   20968:	tst	r7, #128	; 0x80
   2096c:	beq	203ac <__assert_fail@plt+0xee54>
   20970:	b	203a8 <__assert_fail@plt+0xee50>
   20974:	add	r1, r1, r3
   20978:	ldrb	r7, [r1, ip]
   2097c:	b	203ac <__assert_fail@plt+0xee54>
   20980:	ldrb	r7, [sl, r3]
   20984:	mov	r3, #1
   20988:	strb	r7, [r6]
   2098c:	strb	r3, [r6, #4]
   20990:	b	203c8 <__assert_fail@plt+0xee70>
   20994:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20998:	mov	r5, r0
   2099c:	mov	r4, r1
   209a0:	strd	r6, [sp, #8]
   209a4:	mov	r7, r2
   209a8:	mvn	r6, #0
   209ac:	str	r8, [sp, #16]
   209b0:	movw	r8, #32816	; 0x8030
   209b4:	str	lr, [sp, #20]
   209b8:	mov	r2, r7
   209bc:	mov	r1, r5
   209c0:	mov	r0, r4
   209c4:	bl	20028 <__assert_fail@plt+0xead0>
   209c8:	ldr	r3, [r5, #40]	; 0x28
   209cc:	ldrb	r2, [r4, #4]
   209d0:	ldrb	r1, [r4]
   209d4:	add	r0, r3, r0
   209d8:	cmp	r2, #2
   209dc:	str	r0, [r5, #40]	; 0x28
   209e0:	beq	20a48 <__assert_fail@plt+0xf4f0>
   209e4:	cmp	r1, #44	; 0x2c
   209e8:	cmpne	r2, #24
   209ec:	beq	20a4c <__assert_fail@plt+0xf4f4>
   209f0:	cmp	r2, #1
   209f4:	beq	20a00 <__assert_fail@plt+0xf4a8>
   209f8:	mvn	r6, #1
   209fc:	b	209b8 <__assert_fail@plt+0xf460>
   20a00:	sub	r2, r1, #48	; 0x30
   20a04:	uxtb	r0, r2
   20a08:	cmp	r0, #9
   20a0c:	movhi	r3, #0
   20a10:	movls	r3, #1
   20a14:	cmn	r6, #2
   20a18:	moveq	r3, #0
   20a1c:	cmp	r3, #0
   20a20:	beq	209f8 <__assert_fail@plt+0xf4a0>
   20a24:	cmn	r6, #1
   20a28:	add	r3, r6, r6, lsl #2
   20a2c:	moveq	r6, r2
   20a30:	beq	209b8 <__assert_fail@plt+0xf460>
   20a34:	add	r6, r1, r3, lsl #1
   20a38:	cmp	r6, r8
   20a3c:	movge	r6, r8
   20a40:	sub	r6, r6, #48	; 0x30
   20a44:	b	209b8 <__assert_fail@plt+0xf460>
   20a48:	mvn	r6, #1
   20a4c:	mov	r0, r6
   20a50:	ldrd	r4, [sp]
   20a54:	ldrd	r6, [sp, #8]
   20a58:	ldr	r8, [sp, #16]
   20a5c:	add	sp, sp, #20
   20a60:	pop	{pc}		; (ldr pc, [sp], #4)
   20a64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20a68:	mov	r4, r1
   20a6c:	ldr	r5, [r1, #40]	; 0x28
   20a70:	strd	r6, [sp, #8]
   20a74:	mov	r6, r0
   20a78:	strd	r8, [sp, #16]
   20a7c:	mov	r8, r2
   20a80:	mov	r9, r3
   20a84:	ldr	r2, [r1, #80]	; 0x50
   20a88:	strd	sl, [sp, #24]
   20a8c:	str	lr, [sp, #32]
   20a90:	sub	sp, sp, #12
   20a94:	ldrb	r7, [sp, #52]	; 0x34
   20a98:	cmp	r2, #1
   20a9c:	beq	20ab4 <__assert_fail@plt+0xf55c>
   20aa0:	mov	r1, r5
   20aa4:	mov	r0, r4
   20aa8:	bl	17d58 <__assert_fail@plt+0x6800>
   20aac:	cmp	r0, #1
   20ab0:	bgt	20b14 <__assert_fail@plt+0xf5bc>
   20ab4:	ldrb	r2, [r8, #4]
   20ab8:	add	r5, r5, r9
   20abc:	str	r5, [r4, #40]	; 0x28
   20ac0:	and	r3, r2, #251	; 0xfb
   20ac4:	cmp	r2, #28
   20ac8:	cmpne	r3, #26
   20acc:	beq	20b34 <__assert_fail@plt+0xf5dc>
   20ad0:	cmp	r2, #22
   20ad4:	moveq	r2, r7
   20ad8:	orrne	r2, r7, #1
   20adc:	cmp	r2, #0
   20ae0:	beq	20c7c <__assert_fail@plt+0xf724>
   20ae4:	ldrb	r2, [r8]
   20ae8:	mov	r3, #0
   20aec:	mov	r0, r3
   20af0:	str	r3, [r6]
   20af4:	strb	r2, [r6, #4]
   20af8:	add	sp, sp, #12
   20afc:	ldrd	r4, [sp]
   20b00:	ldrd	r6, [sp, #8]
   20b04:	ldrd	r8, [sp, #16]
   20b08:	ldrd	sl, [sp, #24]
   20b0c:	add	sp, sp, #32
   20b10:	pop	{pc}		; (ldr pc, [sp], #4)
   20b14:	ldr	r2, [r4, #8]
   20b18:	add	r3, r5, r0
   20b1c:	mov	r1, #1
   20b20:	mov	r0, #0
   20b24:	ldr	r2, [r2, r5, lsl #2]
   20b28:	stm	r6, {r1, r2}
   20b2c:	str	r3, [r4, #40]	; 0x28
   20b30:	b	20af8 <__assert_fail@plt+0xf5a0>
   20b34:	ldr	sl, [r4, #56]	; 0x38
   20b38:	cmp	r5, sl
   20b3c:	bge	20bdc <__assert_fail@plt+0xf684>
   20b40:	ldrb	fp, [r8]
   20b44:	mov	r9, #0
   20b48:	b	20b6c <__assert_fail@plt+0xf614>
   20b4c:	ldr	r3, [r6, #4]
   20b50:	strb	r7, [r3, r9]
   20b54:	add	r9, r9, #1
   20b58:	cmp	r9, #32
   20b5c:	beq	20bdc <__assert_fail@plt+0xf684>
   20b60:	ldrb	r2, [r8, #4]
   20b64:	ldr	r5, [r4, #40]	; 0x28
   20b68:	ldr	sl, [r4, #56]	; 0x38
   20b6c:	cmp	r2, #30
   20b70:	beq	20be4 <__assert_fail@plt+0xf68c>
   20b74:	ldr	r2, [r4, #4]
   20b78:	add	r3, r5, #1
   20b7c:	str	r3, [r4, #40]	; 0x28
   20b80:	ldrb	r7, [r2, r5]
   20b84:	cmp	sl, r3
   20b88:	ble	20bdc <__assert_fail@plt+0xf684>
   20b8c:	cmp	fp, r7
   20b90:	bne	20b4c <__assert_fail@plt+0xf5f4>
   20b94:	ldr	r2, [r4, #4]
   20b98:	ldrb	r2, [r2, r3]
   20b9c:	cmp	r2, #93	; 0x5d
   20ba0:	bne	20b4c <__assert_fail@plt+0xf5f4>
   20ba4:	ldr	r2, [r6, #4]
   20ba8:	add	r3, r3, #1
   20bac:	mov	r0, #0
   20bb0:	str	r3, [r4, #40]	; 0x28
   20bb4:	strb	r0, [r2, r9]
   20bb8:	ldrb	r3, [r8, #4]
   20bbc:	cmp	r3, #28
   20bc0:	beq	20cac <__assert_fail@plt+0xf754>
   20bc4:	cmp	r3, #30
   20bc8:	beq	20ca0 <__assert_fail@plt+0xf748>
   20bcc:	cmp	r3, #26
   20bd0:	moveq	r3, #3
   20bd4:	streq	r3, [r6]
   20bd8:	b	20af8 <__assert_fail@plt+0xf5a0>
   20bdc:	mov	r0, #7
   20be0:	b	20af8 <__assert_fail@plt+0xf5a0>
   20be4:	ldrb	r3, [r4, #75]	; 0x4b
   20be8:	cmp	r3, #0
   20bec:	beq	20b74 <__assert_fail@plt+0xf61c>
   20bf0:	ldrb	r3, [r4, #76]	; 0x4c
   20bf4:	cmp	r3, #0
   20bf8:	beq	20c60 <__assert_fail@plt+0xf708>
   20bfc:	ldr	r3, [r4, #28]
   20c00:	lsl	r2, r5, #2
   20c04:	cmp	r5, r3
   20c08:	beq	20c1c <__assert_fail@plt+0xf6c4>
   20c0c:	ldr	r3, [r4, #8]
   20c10:	ldr	r3, [r3, r5, lsl #2]
   20c14:	cmn	r3, #1
   20c18:	beq	20b74 <__assert_fail@plt+0xf61c>
   20c1c:	ldr	r3, [r4]
   20c20:	ldr	r1, [r4, #12]
   20c24:	ldr	r1, [r1, r2]
   20c28:	ldr	r2, [r4, #24]
   20c2c:	add	r3, r3, r1
   20c30:	ldrb	r7, [r3, r2]
   20c34:	tst	r7, #128	; 0x80
   20c38:	bne	20b74 <__assert_fail@plt+0xf61c>
   20c3c:	ldr	r0, [r4, #80]	; 0x50
   20c40:	cmp	r0, #1
   20c44:	beq	20c54 <__assert_fail@plt+0xf6fc>
   20c48:	mov	r1, r5
   20c4c:	mov	r0, r4
   20c50:	bl	17d58 <__assert_fail@plt+0x6800>
   20c54:	add	r3, r5, r0
   20c58:	str	r3, [r4, #40]	; 0x28
   20c5c:	b	20b84 <__assert_fail@plt+0xf62c>
   20c60:	ldr	r2, [r4]
   20c64:	add	r3, r5, #1
   20c68:	ldr	r1, [r4, #24]
   20c6c:	str	r3, [r4, #40]	; 0x28
   20c70:	add	r5, r2, r5
   20c74:	ldrb	r7, [r5, r1]
   20c78:	b	20b84 <__assert_fail@plt+0xf62c>
   20c7c:	mov	r1, r4
   20c80:	mov	r0, sp
   20c84:	ldr	r2, [sp, #48]	; 0x30
   20c88:	bl	161ac <__assert_fail@plt+0x4c54>
   20c8c:	ldrb	r3, [sp, #4]
   20c90:	cmp	r3, #21
   20c94:	movne	r0, #11
   20c98:	beq	20ae4 <__assert_fail@plt+0xf58c>
   20c9c:	b	20af8 <__assert_fail@plt+0xf5a0>
   20ca0:	mov	r3, #4
   20ca4:	str	r3, [r6]
   20ca8:	b	20af8 <__assert_fail@plt+0xf5a0>
   20cac:	mov	r3, #2
   20cb0:	str	r3, [r6]
   20cb4:	b	20af8 <__assert_fail@plt+0xf5a0>
   20cb8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20cbc:	mov	r5, r1
   20cc0:	strd	r6, [sp, #8]
   20cc4:	strd	r8, [sp, #16]
   20cc8:	strd	sl, [sp, #24]
   20ccc:	mov	fp, r2
   20cd0:	mov	sl, r0
   20cd4:	str	lr, [sp, #32]
   20cd8:	sub	sp, sp, #164	; 0xa4
   20cdc:	ldrb	r2, [r2, #4]
   20ce0:	str	r3, [sp, #20]
   20ce4:	ldr	r3, [r1]
   20ce8:	str	r3, [sp, #32]
   20cec:	sub	r3, r2, #1
   20cf0:	cmp	r3, #35	; 0x23
   20cf4:	ldrls	pc, [pc, r3, lsl #2]
   20cf8:	b	21848 <__assert_fail@plt+0x102f0>
   20cfc:	andeq	r1, r2, r0, asr #13
   20d00:	andeq	r1, r2, ip, ror #1
   20d04:	andeq	r1, r2, r8, asr #16
   20d08:	andeq	r1, r2, r0, ror #16
   20d0c:	andeq	r1, r2, ip, asr #17
   20d10:	andeq	r1, r2, r8, asr #16
   20d14:	andeq	r1, r2, r8, asr #16
   20d18:	andeq	r1, r2, r8, asr #32
   20d1c:	andeq	r1, r2, r0, lsl r9
   20d20:	andeq	r1, r2, ip, ror #1
   20d24:	muleq	r2, r8, sp
   20d28:	andeq	r1, r2, ip, asr #8
   20d2c:	andeq	r1, r2, r8, asr #16
   20d30:	andeq	r1, r2, r8, asr #16
   20d34:	andeq	r1, r2, r8, asr #16
   20d38:	andeq	r1, r2, r8, asr #16
   20d3c:	andeq	r1, r2, r8, asr #16
   20d40:	muleq	r2, r8, sp
   20d44:	muleq	r2, r8, sp
   20d48:	muleq	r2, r8, r5
   20d4c:	andeq	r1, r2, r8, asr #16
   20d50:	andeq	r1, r2, r8, asr #16
   20d54:	andeq	r0, r2, ip, lsl #27
   20d58:			; <UNDEFINED> instruction: 0x00020db4
   20d5c:	andeq	r1, r2, r8, asr #16
   20d60:	andeq	r1, r2, r8, asr #16
   20d64:	andeq	r1, r2, r8, asr #16
   20d68:	andeq	r1, r2, r8, asr #16
   20d6c:	andeq	r1, r2, r8, asr #16
   20d70:	andeq	r1, r2, r8, asr #16
   20d74:	andeq	r1, r2, r8, asr #16
   20d78:	andeq	r1, r2, ip, asr #15
   20d7c:	andeq	r1, r2, ip, asr #15
   20d80:	andeq	r1, r2, r8, lsr #16
   20d84:	andeq	r1, r2, r8, lsr #16
   20d88:	andeq	r1, r2, r8, asr #16
   20d8c:	ldr	r3, [sp, #20]
   20d90:	tst	r3, #16777216	; 0x1000000
   20d94:	bne	21014 <__assert_fail@plt+0xfabc>
   20d98:	ldr	r3, [sp, #20]
   20d9c:	tst	r3, #32
   20da0:	bne	21014 <__assert_fail@plt+0xfabc>
   20da4:	tst	r3, #16
   20da8:	bne	21b28 <__assert_fail@plt+0x105d0>
   20dac:	cmp	r2, #9
   20db0:	beq	21910 <__assert_fail@plt+0x103b8>
   20db4:	ldr	ip, [sp, #32]
   20db8:	mov	r0, #1
   20dbc:	mov	r3, #0
   20dc0:	mov	r2, r3
   20dc4:	str	fp, [sp]
   20dc8:	strb	r0, [fp, #4]
   20dcc:	add	r1, ip, #64	; 0x40
   20dd0:	add	r0, ip, #56	; 0x38
   20dd4:	bl	18520 <__assert_fail@plt+0x6fc8>
   20dd8:	subs	r3, r0, #0
   20ddc:	str	r3, [sp, #24]
   20de0:	beq	217b4 <__assert_fail@plt+0x1025c>
   20de4:	mov	r1, sl
   20de8:	mov	r0, fp
   20dec:	ldr	r2, [sp, #20]
   20df0:	bl	20028 <__assert_fail@plt+0xead0>
   20df4:	ldr	r3, [sl, #40]	; 0x28
   20df8:	ldrb	r5, [fp, #4]
   20dfc:	add	r0, r3, r0
   20e00:	str	r0, [sl, #40]	; 0x28
   20e04:	cmp	r5, #23
   20e08:	cmpne	r5, #11
   20e0c:	sub	r2, r5, #18
   20e10:	moveq	r3, #1
   20e14:	movne	r3, #0
   20e18:	cmp	r2, #1
   20e1c:	orrls	r3, r3, #1
   20e20:	sub	r4, r5, #18
   20e24:	clz	r4, r4
   20e28:	cmp	r3, #0
   20e2c:	lsr	r4, r4, #5
   20e30:	beq	21028 <__assert_fail@plt+0xfad0>
   20e34:	ldrd	r2, [fp]
   20e38:	cmp	r5, #23
   20e3c:	add	r7, sp, #96	; 0x60
   20e40:	ldr	r6, [sl, #40]	; 0x28
   20e44:	strd	r2, [sp, #96]	; 0x60
   20e48:	beq	2123c <__assert_fail@plt+0xfce4>
   20e4c:	cmp	r5, #19
   20e50:	beq	211bc <__assert_fail@plt+0xfc64>
   20e54:	mov	r1, sl
   20e58:	mov	r0, fp
   20e5c:	ldr	r2, [sp, #20]
   20e60:	bl	20028 <__assert_fail@plt+0xead0>
   20e64:	ldr	r3, [sl, #40]	; 0x28
   20e68:	ldr	r2, [sp, #24]
   20e6c:	add	r0, r3, r0
   20e70:	cmp	r2, #0
   20e74:	str	r0, [sl, #40]	; 0x28
   20e78:	beq	212b4 <__assert_fail@plt+0xfd5c>
   20e7c:	cmp	r5, #18
   20e80:	beq	2140c <__assert_fail@plt+0xfeb4>
   20e84:	ldr	r6, [sp, #24]
   20e88:	ldrb	r3, [r6, #24]
   20e8c:	cmp	r3, #17
   20e90:	beq	21208 <__assert_fail@plt+0xfcb0>
   20e94:	mov	r4, #0
   20e98:	mvn	r9, #0
   20e9c:	str	r4, [sp, #36]	; 0x24
   20ea0:	mov	r3, #11
   20ea4:	ldr	r2, [sp, #32]
   20ea8:	mov	r0, #0
   20eac:	mov	r1, #0
   20eb0:	add	r5, sp, #128	; 0x80
   20eb4:	str	r5, [sp]
   20eb8:	strd	r0, [sp, #128]	; 0x80
   20ebc:	add	r7, r2, #56	; 0x38
   20ec0:	add	r8, r2, #64	; 0x40
   20ec4:	strb	r3, [sp, #132]	; 0x84
   20ec8:	mov	r2, r6
   20ecc:	mov	r0, r7
   20ed0:	mov	r1, r8
   20ed4:	mov	r3, #0
   20ed8:	bl	18520 <__assert_fail@plt+0x6fc8>
   20edc:	subs	r2, r0, #0
   20ee0:	beq	21190 <__assert_fail@plt+0xfc38>
   20ee4:	add	r4, r4, #2
   20ee8:	cmp	r4, r9
   20eec:	bgt	20f8c <__assert_fail@plt+0xfa34>
   20ef0:	strd	sl, [sp, #40]	; 0x28
   20ef4:	mov	sl, r2
   20ef8:	mov	r0, r6
   20efc:	ldr	r1, [sp, #32]
   20f00:	mov	fp, #0
   20f04:	bl	185f0 <__assert_fail@plt+0x7098>
   20f08:	mov	r2, sl
   20f0c:	mov	sl, #0
   20f10:	str	r5, [sp]
   20f14:	mov	ip, #16
   20f18:	mov	r3, r0
   20f1c:	mov	r6, r0
   20f20:	mov	r1, r8
   20f24:	strd	sl, [r5]
   20f28:	mov	r0, r7
   20f2c:	strb	ip, [sp, #132]	; 0x84
   20f30:	add	r4, r4, #1
   20f34:	bl	18520 <__assert_fail@plt+0x6fc8>
   20f38:	clz	r3, r0
   20f3c:	cmp	r6, #0
   20f40:	lsr	r3, r3, #5
   20f44:	moveq	ip, #1
   20f48:	mov	r2, r0
   20f4c:	mov	r1, r8
   20f50:	mov	r0, r7
   20f54:	movne	ip, r3
   20f58:	subs	r3, ip, #0
   20f5c:	bne	21190 <__assert_fail@plt+0xfc38>
   20f60:	mov	ip, #10
   20f64:	str	r5, [sp]
   20f68:	strd	sl, [r5]
   20f6c:	strb	ip, [sp, #132]	; 0x84
   20f70:	bl	18520 <__assert_fail@plt+0x6fc8>
   20f74:	subs	sl, r0, #0
   20f78:	beq	21190 <__assert_fail@plt+0xfc38>
   20f7c:	cmp	r4, r9
   20f80:	ble	20ef8 <__assert_fail@plt+0xf9a0>
   20f84:	mov	r2, sl
   20f88:	ldrd	sl, [sp, #40]	; 0x28
   20f8c:	ldr	r1, [sp, #36]	; 0x24
   20f90:	cmp	r1, #0
   20f94:	beq	21404 <__assert_fail@plt+0xfeac>
   20f98:	mov	r3, r2
   20f9c:	mov	r9, #0
   20fa0:	str	r5, [sp]
   20fa4:	mov	r2, r1
   20fa8:	mov	r1, r8
   20fac:	mov	r8, #0
   20fb0:	mov	ip, #16
   20fb4:	mov	r0, r7
   20fb8:	strd	r8, [r5]
   20fbc:	strb	ip, [sp, #132]	; 0x84
   20fc0:	bl	18520 <__assert_fail@plt+0x6fc8>
   20fc4:	ldr	r3, [sp, #204]	; 0xcc
   20fc8:	ldr	r3, [r3]
   20fcc:	cmp	r3, #0
   20fd0:	bne	212a8 <__assert_fail@plt+0xfd50>
   20fd4:	str	r0, [sp, #24]
   20fd8:	ldr	r3, [sp, #20]
   20fdc:	ldrb	r5, [fp, #4]
   20fe0:	tst	r3, #16777216	; 0x1000000
   20fe4:	beq	20e04 <__assert_fail@plt+0xf8ac>
   20fe8:	cmp	r5, #11
   20fec:	cmpne	r5, #23
   20ff0:	bne	20e04 <__assert_fail@plt+0xf8ac>
   20ff4:	ldr	r3, [sp, #24]
   20ff8:	cmp	r3, #0
   20ffc:	beq	21014 <__assert_fail@plt+0xfabc>
   21000:	movw	r1, #29180	; 0x71fc
   21004:	movt	r1, #1
   21008:	mov	r0, r3
   2100c:	mov	r2, #0
   21010:	bl	16118 <__assert_fail@plt+0x4bc0>
   21014:	mov	r2, #0
   21018:	mov	r3, #13
   2101c:	str	r2, [sp, #24]
   21020:	ldr	r2, [sp, #204]	; 0xcc
   21024:	str	r3, [r2]
   21028:	ldr	r0, [sp, #24]
   2102c:	add	sp, sp, #164	; 0xa4
   21030:	ldrd	r4, [sp]
   21034:	ldrd	r6, [sp, #8]
   21038:	ldrd	r8, [sp, #16]
   2103c:	ldrd	sl, [sp, #24]
   21040:	add	sp, sp, #32
   21044:	pop	{pc}		; (ldr pc, [sp], #4)
   21048:	ldr	r4, [r5, #24]
   2104c:	mov	r1, r0
   21050:	mov	r0, fp
   21054:	ldr	r6, [sp, #20]
   21058:	add	r3, r4, #1
   2105c:	orr	r2, r6, #8388608	; 0x800000
   21060:	str	r3, [r5, #24]
   21064:	bl	20028 <__assert_fail@plt+0xead0>
   21068:	ldr	r3, [sl, #40]	; 0x28
   2106c:	ldrb	r2, [fp, #4]
   21070:	add	r3, r3, r0
   21074:	cmp	r2, #9
   21078:	str	r3, [sl, #40]	; 0x28
   2107c:	moveq	r2, #0
   21080:	beq	21930 <__assert_fail@plt+0x103d8>
   21084:	ldr	r3, [sp, #200]	; 0xc8
   21088:	mov	r2, fp
   2108c:	mov	r1, r5
   21090:	add	r0, r3, #1
   21094:	ldr	r3, [sp, #204]	; 0xcc
   21098:	stm	sp, {r0, r3}
   2109c:	mov	r3, r6
   210a0:	mov	r0, sl
   210a4:	bl	223fc <__assert_fail@plt+0x10ea4>
   210a8:	ldr	r3, [sp, #204]	; 0xcc
   210ac:	mov	r2, r0
   210b0:	ldr	r3, [r3]
   210b4:	cmp	r3, #0
   210b8:	bne	210ec <__assert_fail@plt+0xfb94>
   210bc:	ldrb	r1, [fp, #4]
   210c0:	cmp	r1, #9
   210c4:	beq	21930 <__assert_fail@plt+0x103d8>
   210c8:	cmp	r0, #0
   210cc:	beq	210e0 <__assert_fail@plt+0xfb88>
   210d0:	movw	r1, #29180	; 0x71fc
   210d4:	movt	r1, #1
   210d8:	mov	r2, r3
   210dc:	bl	16118 <__assert_fail@plt+0x4bc0>
   210e0:	ldr	r2, [sp, #204]	; 0xcc
   210e4:	mov	r3, #8
   210e8:	str	r3, [r2]
   210ec:	mov	r3, #0
   210f0:	str	r3, [sp, #24]
   210f4:	b	21028 <__assert_fail@plt+0xfad0>
   210f8:	cmp	r4, #0
   210fc:	ble	22208 <__assert_fail@plt+0x10cb0>
   21100:	cmp	r4, #1
   21104:	beq	221a4 <__assert_fail@plt+0x10c4c>
   21108:	ldr	r6, [sp, #24]
   2110c:	mov	r7, #2
   21110:	add	r5, sp, #128	; 0x80
   21114:	str	r9, [sp, #36]	; 0x24
   21118:	ldr	r3, [sp, #32]
   2111c:	strd	sl, [sp, #40]	; 0x28
   21120:	mov	r9, r6
   21124:	add	r1, r3, #56	; 0x38
   21128:	add	r3, r3, #64	; 0x40
   2112c:	mov	sl, r3
   21130:	mov	fp, r1
   21134:	b	21140 <__assert_fail@plt+0xfbe8>
   21138:	cmp	r7, r4
   2113c:	bgt	213f0 <__assert_fail@plt+0xfe98>
   21140:	mov	r0, r6
   21144:	ldr	r1, [sp, #32]
   21148:	mov	r8, #0
   2114c:	bl	185f0 <__assert_fail@plt+0x7098>
   21150:	mov	r2, r9
   21154:	mov	r9, #0
   21158:	str	r5, [sp]
   2115c:	mov	ip, #16
   21160:	mov	r6, r0
   21164:	mov	r3, r0
   21168:	mov	r1, sl
   2116c:	strd	r8, [r5]
   21170:	mov	r0, fp
   21174:	strb	ip, [sp, #132]	; 0x84
   21178:	add	r7, r7, #1
   2117c:	bl	18520 <__assert_fail@plt+0x6fc8>
   21180:	cmp	r0, #0
   21184:	cmpne	r6, #0
   21188:	mov	r9, r0
   2118c:	bne	21138 <__assert_fail@plt+0xfbe0>
   21190:	ldr	r2, [sp, #204]	; 0xcc
   21194:	mov	r3, #12
   21198:	str	r3, [r2]
   2119c:	movw	r1, #29180	; 0x71fc
   211a0:	movt	r1, #1
   211a4:	ldr	r0, [sp, #24]
   211a8:	mov	r2, #0
   211ac:	bl	16118 <__assert_fail@plt+0x4bc0>
   211b0:	mov	r3, #0
   211b4:	str	r3, [sp, #24]
   211b8:	b	21028 <__assert_fail@plt+0xfad0>
   211bc:	mov	r1, sl
   211c0:	mov	r0, fp
   211c4:	ldr	r2, [sp, #20]
   211c8:	bl	20028 <__assert_fail@plt+0xead0>
   211cc:	ldr	r3, [sl, #40]	; 0x28
   211d0:	ldr	r2, [sp, #24]
   211d4:	add	r0, r3, r0
   211d8:	cmp	r2, #0
   211dc:	str	r0, [sl, #40]	; 0x28
   211e0:	beq	212b4 <__assert_fail@plt+0xfd5c>
   211e4:	ldr	r6, [sp, #24]
   211e8:	ldrb	r3, [r6, #24]
   211ec:	cmp	r3, #17
   211f0:	beq	22238 <__assert_fail@plt+0x10ce0>
   211f4:	mov	r3, #0
   211f8:	mov	r9, #1
   211fc:	str	r3, [sp, #36]	; 0x24
   21200:	mov	r3, #10
   21204:	b	20ea4 <__assert_fail@plt+0xf94c>
   21208:	ldr	r6, [sp, #24]
   2120c:	mov	r3, #0
   21210:	mvn	r9, #0
   21214:	mov	r4, r3
   21218:	str	r3, [sp, #36]	; 0x24
   2121c:	movw	r1, #25432	; 0x6358
   21220:	movt	r1, #1
   21224:	ldr	r2, [r6, #20]
   21228:	mov	r0, r6
   2122c:	bl	16118 <__assert_fail@plt+0x4bc0>
   21230:	cmn	r9, #1
   21234:	bne	21200 <__assert_fail@plt+0xfca8>
   21238:	b	20ea0 <__assert_fail@plt+0xf948>
   2123c:	mov	r1, fp
   21240:	mov	r0, sl
   21244:	ldr	r2, [sp, #20]
   21248:	bl	20994 <__assert_fail@plt+0xf43c>
   2124c:	cmn	r0, #1
   21250:	mov	r4, r0
   21254:	beq	212d0 <__assert_fail@plt+0xfd78>
   21258:	cmn	r0, #2
   2125c:	beq	21274 <__assert_fail@plt+0xfd1c>
   21260:	ldrb	r3, [fp, #4]
   21264:	cmp	r3, #24
   21268:	beq	21394 <__assert_fail@plt+0xfe3c>
   2126c:	cmp	r3, #1
   21270:	beq	213bc <__assert_fail@plt+0xfe64>
   21274:	ldr	r3, [sp, #20]
   21278:	tst	r3, #2097152	; 0x200000
   2127c:	beq	21db0 <__assert_fail@plt+0x10858>
   21280:	ldrd	r2, [r7]
   21284:	mov	r1, #1
   21288:	str	r6, [sl, #40]	; 0x28
   2128c:	ldr	r0, [sp, #24]
   21290:	strd	r2, [fp]
   21294:	ldr	r3, [sp, #204]	; 0xcc
   21298:	strb	r1, [fp, #4]
   2129c:	ldr	r3, [r3]
   212a0:	cmp	r3, #0
   212a4:	beq	20fd4 <__assert_fail@plt+0xfa7c>
   212a8:	cmp	r0, #0
   212ac:	bne	20fd4 <__assert_fail@plt+0xfa7c>
   212b0:	b	213e0 <__assert_fail@plt+0xfe88>
   212b4:	ldr	r3, [sp, #204]	; 0xcc
   212b8:	ldr	r3, [r3]
   212bc:	cmp	r3, #0
   212c0:	bne	210ec <__assert_fail@plt+0xfb94>
   212c4:	mov	r3, #0
   212c8:	str	r3, [sp, #24]
   212cc:	b	20fd8 <__assert_fail@plt+0xfa80>
   212d0:	ldrb	r3, [fp, #4]
   212d4:	cmp	r3, #1
   212d8:	bne	213d4 <__assert_fail@plt+0xfe7c>
   212dc:	ldrb	r3, [fp]
   212e0:	cmp	r3, #44	; 0x2c
   212e4:	bne	213d4 <__assert_fail@plt+0xfe7c>
   212e8:	mov	r4, #0
   212ec:	mov	r1, fp
   212f0:	mov	r0, sl
   212f4:	ldr	r2, [sp, #20]
   212f8:	bl	20994 <__assert_fail@plt+0xf43c>
   212fc:	cmn	r0, #2
   21300:	mov	r9, r0
   21304:	beq	21274 <__assert_fail@plt+0xfd1c>
   21308:	cmn	r0, #1
   2130c:	cmpne	r0, r4
   21310:	blt	213d4 <__assert_fail@plt+0xfe7c>
   21314:	ldrb	r3, [fp, #4]
   21318:	cmp	r3, #24
   2131c:	bne	213d4 <__assert_fail@plt+0xfe7c>
   21320:	cmn	r0, #1
   21324:	bne	21398 <__assert_fail@plt+0xfe40>
   21328:	cmp	r4, #32768	; 0x8000
   2132c:	movlt	r5, #0
   21330:	movge	r5, #1
   21334:	cmp	r5, #0
   21338:	bne	213ac <__assert_fail@plt+0xfe54>
   2133c:	mov	r1, sl
   21340:	mov	r0, fp
   21344:	ldr	r2, [sp, #20]
   21348:	bl	20028 <__assert_fail@plt+0xead0>
   2134c:	ldr	r3, [sl, #40]	; 0x28
   21350:	ldr	ip, [sp, #24]
   21354:	add	r0, r3, r0
   21358:	cmp	ip, #0
   2135c:	str	r0, [sl, #40]	; 0x28
   21360:	beq	212b4 <__assert_fail@plt+0xfd5c>
   21364:	orrs	r3, r9, r4
   21368:	bne	210f8 <__assert_fail@plt+0xfba0>
   2136c:	mov	r2, r5
   21370:	movw	r1, #29180	; 0x71fc
   21374:	movt	r1, #1
   21378:	mov	r0, ip
   2137c:	bl	16118 <__assert_fail@plt+0x4bc0>
   21380:	ldr	r3, [sp, #204]	; 0xcc
   21384:	ldr	r3, [r3]
   21388:	cmp	r3, #0
   2138c:	beq	212c4 <__assert_fail@plt+0xfd6c>
   21390:	b	2119c <__assert_fail@plt+0xfc44>
   21394:	mov	r9, r0
   21398:	cmp	r9, #32768	; 0x8000
   2139c:	movlt	r5, #0
   213a0:	movge	r5, #1
   213a4:	cmp	r5, #0
   213a8:	beq	2133c <__assert_fail@plt+0xfde4>
   213ac:	ldr	r2, [sp, #204]	; 0xcc
   213b0:	mov	r3, #15
   213b4:	str	r3, [r2]
   213b8:	b	213e0 <__assert_fail@plt+0xfe88>
   213bc:	ldrb	r3, [fp]
   213c0:	cmp	r3, #44	; 0x2c
   213c4:	beq	212ec <__assert_fail@plt+0xfd94>
   213c8:	ldr	r3, [sp, #20]
   213cc:	tst	r3, #2097152	; 0x200000
   213d0:	bne	21280 <__assert_fail@plt+0xfd28>
   213d4:	ldr	r2, [sp, #204]	; 0xcc
   213d8:	mov	r3, #10
   213dc:	str	r3, [r2]
   213e0:	ldr	r3, [sp, #24]
   213e4:	cmp	r3, #0
   213e8:	beq	210ec <__assert_fail@plt+0xfb94>
   213ec:	b	2119c <__assert_fail@plt+0xfc44>
   213f0:	add	r9, sp, #36	; 0x24
   213f4:	mov	r2, r0
   213f8:	ldm	r9, {r9, sl, fp}
   213fc:	cmp	r4, r9
   21400:	bne	2141c <__assert_fail@plt+0xfec4>
   21404:	str	r2, [sp, #24]
   21408:	b	20fd8 <__assert_fail@plt+0xfa80>
   2140c:	ldr	r2, [sp, #24]
   21410:	mvn	r9, #0
   21414:	mov	r4, #1
   21418:	mov	r6, r2
   2141c:	mov	r0, r6
   21420:	ldr	r1, [sp, #32]
   21424:	str	r2, [sp, #36]	; 0x24
   21428:	bl	185f0 <__assert_fail@plt+0x7098>
   2142c:	subs	r6, r0, #0
   21430:	ldr	r2, [sp, #36]	; 0x24
   21434:	beq	21190 <__assert_fail@plt+0xfc38>
   21438:	ldrb	r3, [r6, #24]
   2143c:	str	r2, [sp, #36]	; 0x24
   21440:	cmp	r3, #17
   21444:	bne	21230 <__assert_fail@plt+0xfcd8>
   21448:	b	2121c <__assert_fail@plt+0xfcc4>
   2144c:	ldr	r4, [fp]
   21450:	movw	r3, #783	; 0x30f
   21454:	tst	r4, r3
   21458:	beq	214bc <__assert_fail@plt+0xff64>
   2145c:	ldr	r3, [sp, #32]
   21460:	ldrb	r3, [r3, #88]	; 0x58
   21464:	ands	r5, r3, #16
   21468:	bne	214bc <__assert_fail@plt+0xff64>
   2146c:	ldr	r0, [sp, #32]
   21470:	orr	r3, r3, #16
   21474:	ands	r2, r3, #8
   21478:	mov	r1, r3
   2147c:	strb	r3, [r0, #88]	; 0x58
   21480:	bne	22138 <__assert_fail@plt+0x10be0>
   21484:	mov	r3, #0
   21488:	movt	r3, #1023	; 0x3ff
   2148c:	tst	r1, #4
   21490:	mvn	r1, #2013265921	; 0x78000001
   21494:	strd	r2, [r0, #96]	; 0x60
   21498:	mvn	r3, #-134217727	; 0xf8000001
   2149c:	str	r1, [r0, #104]	; 0x68
   214a0:	str	r3, [r0, #108]	; 0x6c
   214a4:	beq	22084 <__assert_fail@plt+0x10b2c>
   214a8:	str	r2, [r0, #112]	; 0x70
   214ac:	str	r2, [r0, #116]	; 0x74
   214b0:	str	r2, [r0, #120]	; 0x78
   214b4:	str	r2, [r0, #124]	; 0x7c
   214b8:	ldr	r4, [fp]
   214bc:	sub	r3, r4, #256	; 0x100
   214c0:	ldr	r2, [sp, #32]
   214c4:	bics	r3, r3, #256	; 0x100
   214c8:	add	r5, r2, #56	; 0x38
   214cc:	add	r6, r2, #64	; 0x40
   214d0:	bne	21a94 <__assert_fail@plt+0x1053c>
   214d4:	cmp	r4, #256	; 0x100
   214d8:	beq	21b88 <__assert_fail@plt+0x10630>
   214dc:	mov	r0, #5
   214e0:	mov	r2, r3
   214e4:	str	fp, [sp]
   214e8:	mov	r1, r6
   214ec:	str	r0, [fp]
   214f0:	mov	r0, r5
   214f4:	bl	18520 <__assert_fail@plt+0x6fc8>
   214f8:	mov	r7, r0
   214fc:	mov	r3, #10
   21500:	str	r3, [fp]
   21504:	mov	r3, #0
   21508:	mov	r1, r6
   2150c:	str	fp, [sp]
   21510:	mov	r2, r3
   21514:	mov	r0, r5
   21518:	bl	18520 <__assert_fail@plt+0x6fc8>
   2151c:	add	r3, sp, #128	; 0x80
   21520:	mov	r4, r0
   21524:	mov	ip, #10
   21528:	mov	r8, #0
   2152c:	mov	r9, #0
   21530:	mov	r1, r6
   21534:	str	r3, [sp]
   21538:	mov	r0, r5
   2153c:	mov	r3, r4
   21540:	mov	r2, r7
   21544:	clz	r4, r4
   21548:	strd	r8, [sp, #128]	; 0x80
   2154c:	lsr	r4, r4, #5
   21550:	strb	ip, [sp, #132]	; 0x84
   21554:	bl	18520 <__assert_fail@plt+0x6fc8>
   21558:	cmp	r7, #0
   2155c:	str	r0, [sp, #24]
   21560:	moveq	r4, #1
   21564:	cmp	r0, #0
   21568:	movne	r3, r4
   2156c:	moveq	r3, #1
   21570:	cmp	r3, #0
   21574:	bne	217b4 <__assert_fail@plt+0x1025c>
   21578:	mov	r0, fp
   2157c:	mov	r1, sl
   21580:	ldr	r2, [sp, #20]
   21584:	bl	20028 <__assert_fail@plt+0xead0>
   21588:	ldr	r3, [sl, #40]	; 0x28
   2158c:	add	r3, r3, r0
   21590:	str	r3, [sl, #40]	; 0x28
   21594:	b	21028 <__assert_fail@plt+0xfad0>
   21598:	mov	r5, #0
   2159c:	mov	r1, #1
   215a0:	mov	r0, #32
   215a4:	str	r5, [sp, #68]	; 0x44
   215a8:	bl	2611c <__assert_fail@plt+0x14bc4>
   215ac:	mov	r8, r0
   215b0:	mov	r1, #1
   215b4:	mov	r0, #40	; 0x28
   215b8:	bl	2611c <__assert_fail@plt+0x14bc4>
   215bc:	clz	r4, r0
   215c0:	cmp	r8, r5
   215c4:	lsr	r4, r4, #5
   215c8:	moveq	r4, #1
   215cc:	mov	r9, r0
   215d0:	cmp	r4, r5
   215d4:	bne	21dcc <__assert_fail@plt+0x10874>
   215d8:	mov	r1, sl
   215dc:	mov	r0, fp
   215e0:	ldr	r2, [sp, #20]
   215e4:	bl	161ac <__assert_fail@plt+0x4c54>
   215e8:	ldrb	r3, [fp, #4]
   215ec:	mov	r5, r0
   215f0:	cmp	r3, #2
   215f4:	beq	21da0 <__assert_fail@plt+0x10848>
   215f8:	cmp	r3, #25
   215fc:	strne	r4, [sp, #44]	; 0x2c
   21600:	beq	21abc <__assert_fail@plt+0x10564>
   21604:	ldr	r7, [sp, #20]
   21608:	cmp	r3, #21
   2160c:	mov	r0, #1
   21610:	moveq	r3, #1
   21614:	strbeq	r3, [fp, #4]
   21618:	mov	r3, #0
   2161c:	ubfx	r2, r7, #16, #1
   21620:	str	r3, [sp, #24]
   21624:	str	r3, [sp, #40]	; 0x28
   21628:	add	r3, sp, #96	; 0x60
   2162c:	str	r3, [sp, #36]	; 0x24
   21630:	str	r2, [sp, #48]	; 0x30
   21634:	mov	ip, #3
   21638:	mov	r3, r5
   2163c:	str	r7, [sp]
   21640:	mov	r2, fp
   21644:	mov	r1, sl
   21648:	str	r0, [sp, #4]
   2164c:	str	ip, [sp, #72]	; 0x48
   21650:	add	r0, sp, #72	; 0x48
   21654:	ldr	ip, [sp, #36]	; 0x24
   21658:	str	ip, [sp, #76]	; 0x4c
   2165c:	bl	20a64 <__assert_fail@plt+0xf50c>
   21660:	cmp	r0, #0
   21664:	bne	21b74 <__assert_fail@plt+0x1061c>
   21668:	mov	r2, r7
   2166c:	mov	r1, sl
   21670:	mov	r0, fp
   21674:	bl	161ac <__assert_fail@plt+0x4c54>
   21678:	ldr	r3, [sp, #72]	; 0x48
   2167c:	mov	r5, r0
   21680:	sub	r2, r3, #2
   21684:	bics	r2, r2, #2
   21688:	beq	216a0 <__assert_fail@plt+0x10148>
   2168c:	ldrb	r2, [fp, #4]
   21690:	cmp	r2, #2
   21694:	beq	21b18 <__assert_fail@plt+0x105c0>
   21698:	cmp	r2, #22
   2169c:	beq	21bb4 <__assert_fail@plt+0x1065c>
   216a0:	cmp	r3, #4
   216a4:	ldrls	pc, [pc, r3, lsl #2]
   216a8:	b	219ec <__assert_fail@plt+0x10494>
   216ac:	andeq	r1, r2, ip, asr #19
   216b0:	andeq	r1, r2, ip, ror #20
   216b4:	andeq	r1, r2, ip, asr #20
   216b8:	muleq	r2, r4, r9
   216bc:	andeq	r1, r2, ip, ror #19
   216c0:	ldr	r3, [sp, #32]
   216c4:	str	fp, [sp]
   216c8:	add	r6, r3, #56	; 0x38
   216cc:	add	r5, r3, #64	; 0x40
   216d0:	mov	r3, #0
   216d4:	mov	r0, r6
   216d8:	mov	r2, r3
   216dc:	mov	r1, r5
   216e0:	bl	18520 <__assert_fail@plt+0x6fc8>
   216e4:	subs	r3, r0, #0
   216e8:	str	r3, [sp, #24]
   216ec:	beq	217b4 <__assert_fail@plt+0x1025c>
   216f0:	ldr	r3, [sp, #32]
   216f4:	ldr	r3, [r3, #92]	; 0x5c
   216f8:	cmp	r3, #1
   216fc:	ble	20de4 <__assert_fail@plt+0xf88c>
   21700:	mov	r9, #0
   21704:	mov	r8, #0
   21708:	ldr	r4, [sp, #24]
   2170c:	add	r7, sp, #128	; 0x80
   21710:	strd	r8, [sp, #24]
   21714:	mov	r9, r5
   21718:	ldr	r3, [sl, #40]	; 0x28
   2171c:	mov	r1, sl
   21720:	mov	r0, fp
   21724:	ldr	ip, [sl, #56]	; 0x38
   21728:	ldr	r2, [sp, #20]
   2172c:	cmp	ip, r3
   21730:	ble	21b80 <__assert_fail@plt+0x10628>
   21734:	ldr	ip, [sl, #28]
   21738:	cmp	r3, ip
   2173c:	beq	21b80 <__assert_fail@plt+0x10628>
   21740:	ldr	ip, [sl, #8]
   21744:	ldr	r3, [ip, r3, lsl #2]
   21748:	cmn	r3, #1
   2174c:	bne	21b80 <__assert_fail@plt+0x10628>
   21750:	bl	20028 <__assert_fail@plt+0xead0>
   21754:	ldr	ip, [sl, #40]	; 0x28
   21758:	mov	r3, #0
   2175c:	mov	r1, r9
   21760:	mov	r2, r3
   21764:	str	fp, [sp]
   21768:	add	ip, ip, r0
   2176c:	mov	r0, r6
   21770:	str	ip, [sl, #40]	; 0x28
   21774:	bl	18520 <__assert_fail@plt+0x6fc8>
   21778:	mov	r5, r0
   2177c:	mov	r3, r0
   21780:	ldrd	r0, [sp, #24]
   21784:	mov	ip, #16
   21788:	mov	r2, r4
   2178c:	str	r7, [sp]
   21790:	strd	r0, [r7]
   21794:	mov	r1, r9
   21798:	mov	r0, r6
   2179c:	strb	ip, [sp, #132]	; 0x84
   217a0:	bl	18520 <__assert_fail@plt+0x6fc8>
   217a4:	cmp	r0, #0
   217a8:	cmpne	r5, #0
   217ac:	mov	r4, r0
   217b0:	bne	21718 <__assert_fail@plt+0x101c0>
   217b4:	mov	r2, #0
   217b8:	mov	r3, #12
   217bc:	str	r2, [sp, #24]
   217c0:	ldr	r2, [sp, #204]	; 0xcc
   217c4:	str	r3, [r2]
   217c8:	b	21028 <__assert_fail@plt+0xfad0>
   217cc:	sub	r1, r2, #33	; 0x21
   217d0:	movw	r3, #31216	; 0x79f0
   217d4:	movt	r3, #2
   217d8:	clz	r1, r1
   217dc:	lsr	r1, r1, #5
   217e0:	movw	r2, #31144	; 0x79a8
   217e4:	movt	r2, #2
   217e8:	str	r1, [sp]
   217ec:	ldr	r0, [sp, #32]
   217f0:	ldr	r1, [sp, #204]	; 0xcc
   217f4:	str	r1, [sp, #4]
   217f8:	ldr	r1, [sl, #64]	; 0x40
   217fc:	bl	1bf68 <__assert_fail@plt+0xaa10>
   21800:	ldr	r3, [sp, #204]	; 0xcc
   21804:	str	r0, [sp, #24]
   21808:	ldr	r2, [r3]
   2180c:	clz	r3, r0
   21810:	lsr	r3, r3, #5
   21814:	cmp	r2, #0
   21818:	moveq	r3, #0
   2181c:	cmp	r3, #0
   21820:	beq	20de4 <__assert_fail@plt+0xf88c>
   21824:	b	210ec <__assert_fail@plt+0xfb94>
   21828:	sub	r1, r2, #35	; 0x23
   2182c:	movw	r3, #28508	; 0x6f5c
   21830:	movt	r3, #2
   21834:	clz	r1, r1
   21838:	movw	r2, #31160	; 0x79b8
   2183c:	movt	r2, #2
   21840:	lsr	r1, r1, #5
   21844:	b	217e8 <__assert_fail@plt+0x10290>
   21848:	mov	r2, #0
   2184c:	mov	r3, #5
   21850:	str	r2, [sp, #24]
   21854:	ldr	r2, [sp, #204]	; 0xcc
   21858:	str	r3, [r2]
   2185c:	b	21028 <__assert_fail@plt+0xfad0>
   21860:	ldr	r3, [sp, #32]
   21864:	mov	ip, #1
   21868:	ldr	r2, [fp]
   2186c:	ldr	r3, [r3, #84]	; 0x54
   21870:	lsl	ip, ip, r2
   21874:	ands	r3, ip, r3
   21878:	beq	21df0 <__assert_fail@plt+0x10898>
   2187c:	ldr	r4, [sp, #32]
   21880:	mov	r3, #0
   21884:	mov	r2, r3
   21888:	ldr	lr, [r4, #80]	; 0x50
   2188c:	add	r1, r4, #64	; 0x40
   21890:	add	r0, r4, #56	; 0x38
   21894:	orr	ip, lr, ip
   21898:	str	ip, [r4, #80]	; 0x50
   2189c:	str	fp, [sp]
   218a0:	bl	18520 <__assert_fail@plt+0x6fc8>
   218a4:	subs	r3, r0, #0
   218a8:	str	r3, [sp, #24]
   218ac:	beq	217b4 <__assert_fail@plt+0x1025c>
   218b0:	ldrb	r3, [r4, #88]	; 0x58
   218b4:	ldr	r2, [r4, #76]	; 0x4c
   218b8:	orr	r3, r3, #2
   218bc:	add	r2, r2, #1
   218c0:	str	r2, [r4, #76]	; 0x4c
   218c4:	strb	r3, [r4, #88]	; 0x58
   218c8:	b	20de4 <__assert_fail@plt+0xf88c>
   218cc:	ldr	r4, [sp, #32]
   218d0:	mov	r3, #0
   218d4:	mov	r2, r3
   218d8:	str	fp, [sp]
   218dc:	add	r1, r4, #64	; 0x40
   218e0:	add	r0, r4, #56	; 0x38
   218e4:	bl	18520 <__assert_fail@plt+0x6fc8>
   218e8:	subs	r3, r0, #0
   218ec:	str	r3, [sp, #24]
   218f0:	beq	217b4 <__assert_fail@plt+0x1025c>
   218f4:	ldr	r3, [r4, #92]	; 0x5c
   218f8:	cmp	r3, #1
   218fc:	ble	20de4 <__assert_fail@plt+0xf88c>
   21900:	ldrb	r3, [r4, #88]	; 0x58
   21904:	orr	r3, r3, #2
   21908:	strb	r3, [r4, #88]	; 0x58
   2190c:	b	20de4 <__assert_fail@plt+0xf88c>
   21910:	ldr	r3, [sp, #20]
   21914:	ands	r3, r3, #131072	; 0x20000
   21918:	bne	20db4 <__assert_fail@plt+0xf85c>
   2191c:	str	r3, [sp, #24]
   21920:	mov	r2, #16
   21924:	ldr	r3, [sp, #204]	; 0xcc
   21928:	str	r2, [r3]
   2192c:	b	21028 <__assert_fail@plt+0xfad0>
   21930:	cmp	r4, #8
   21934:	bls	2197c <__assert_fail@plt+0x10424>
   21938:	ldr	r0, [sp, #32]
   2193c:	add	ip, sp, #128	; 0x80
   21940:	mov	lr, #17
   21944:	mov	r6, #0
   21948:	mov	r7, #0
   2194c:	mov	r3, #0
   21950:	str	ip, [sp]
   21954:	strd	r6, [sp, #128]	; 0x80
   21958:	strb	lr, [sp, #132]	; 0x84
   2195c:	add	r1, r0, #64	; 0x40
   21960:	add	r0, r0, #56	; 0x38
   21964:	bl	18520 <__assert_fail@plt+0x6fc8>
   21968:	subs	r3, r0, #0
   2196c:	str	r3, [sp, #24]
   21970:	beq	217b4 <__assert_fail@plt+0x1025c>
   21974:	str	r4, [r3, #20]
   21978:	b	20de4 <__assert_fail@plt+0xf88c>
   2197c:	ldr	r0, [sp, #32]
   21980:	mov	r1, #1
   21984:	ldr	r3, [r0, #84]	; 0x54
   21988:	orr	r3, r3, r1, lsl r4
   2198c:	str	r3, [r0, #84]	; 0x54
   21990:	b	21938 <__assert_fail@plt+0x103e0>
   21994:	mov	r0, r8
   21998:	ldr	r1, [sp, #76]	; 0x4c
   2199c:	bl	1b6c4 <__assert_fail@plt+0xa16c>
   219a0:	ldr	r3, [sp, #204]	; 0xcc
   219a4:	cmp	r0, #0
   219a8:	str	r0, [r3]
   219ac:	bne	21a24 <__assert_fail@plt+0x104cc>
   219b0:	ldrb	r3, [fp, #4]
   219b4:	cmp	r3, #2
   219b8:	beq	21b18 <__assert_fail@plt+0x105c0>
   219bc:	cmp	r3, #21
   219c0:	beq	21e48 <__assert_fail@plt+0x108f0>
   219c4:	mov	r0, #0
   219c8:	b	21634 <__assert_fail@plt+0x100dc>
   219cc:	ldrb	r3, [sp, #76]	; 0x4c
   219d0:	mov	r0, #1
   219d4:	asr	r1, r3, #5
   219d8:	and	r3, r3, #31
   219dc:	ldr	r2, [r8, r1, lsl #2]
   219e0:	orr	r3, r2, r0, lsl r3
   219e4:	str	r3, [r8, r1, lsl #2]
   219e8:	b	219b0 <__assert_fail@plt+0x10458>
   219ec:	ldr	ip, [sp, #76]	; 0x4c
   219f0:	add	r0, sp, #68	; 0x44
   219f4:	add	r3, r9, #36	; 0x24
   219f8:	add	r2, r9, #12
   219fc:	mov	r1, r8
   21a00:	str	r0, [sp]
   21a04:	str	r7, [sp, #8]
   21a08:	ldr	r0, [sl, #64]	; 0x40
   21a0c:	str	ip, [sp, #4]
   21a10:	bl	1b720 <__assert_fail@plt+0xa1c8>
   21a14:	ldr	r3, [sp, #204]	; 0xcc
   21a18:	cmp	r0, #0
   21a1c:	str	r0, [r3]
   21a20:	beq	219b0 <__assert_fail@plt+0x10458>
   21a24:	mov	r0, r8
   21a28:	bl	13b9c <__assert_fail@plt+0x2644>
   21a2c:	mov	r0, r9
   21a30:	bl	17188 <__assert_fail@plt+0x5c30>
   21a34:	ldr	r3, [sp, #204]	; 0xcc
   21a38:	ldr	r3, [r3]
   21a3c:	cmp	r3, #0
   21a40:	bne	210ec <__assert_fail@plt+0xfb94>
   21a44:	str	r3, [sp, #24]
   21a48:	b	20de4 <__assert_fail@plt+0xf88c>
   21a4c:	mov	r0, r8
   21a50:	ldr	r1, [sp, #76]	; 0x4c
   21a54:	bl	1b6c4 <__assert_fail@plt+0xa16c>
   21a58:	ldr	r3, [sp, #204]	; 0xcc
   21a5c:	cmp	r0, #0
   21a60:	str	r0, [r3]
   21a64:	beq	219b0 <__assert_fail@plt+0x10458>
   21a68:	b	21a24 <__assert_fail@plt+0x104cc>
   21a6c:	ldr	r2, [sp, #24]
   21a70:	ldr	r3, [r9, #20]
   21a74:	ldr	r0, [r9]
   21a78:	cmp	r3, r2
   21a7c:	beq	21e20 <__assert_fail@plt+0x108c8>
   21a80:	ldr	r2, [sp, #76]	; 0x4c
   21a84:	add	r1, r3, #1
   21a88:	str	r1, [r9, #20]
   21a8c:	str	r2, [r0, r3, lsl #2]
   21a90:	b	219b0 <__assert_fail@plt+0x10458>
   21a94:	mov	r3, #0
   21a98:	mov	r1, r6
   21a9c:	str	fp, [sp]
   21aa0:	mov	r2, r3
   21aa4:	mov	r0, r5
   21aa8:	bl	18520 <__assert_fail@plt+0x6fc8>
   21aac:	subs	r3, r0, #0
   21ab0:	str	r3, [sp, #24]
   21ab4:	bne	21578 <__assert_fail@plt+0x10020>
   21ab8:	b	217b4 <__assert_fail@plt+0x1025c>
   21abc:	ldrb	r3, [r9, #16]
   21ac0:	ldr	r2, [sp, #20]
   21ac4:	orr	r3, r3, #1
   21ac8:	tst	r2, #256	; 0x100
   21acc:	strb	r3, [r9, #16]
   21ad0:	beq	21ae0 <__assert_fail@plt+0x10588>
   21ad4:	ldr	r3, [r8]
   21ad8:	orr	r3, r3, #1024	; 0x400
   21adc:	str	r3, [r8]
   21ae0:	ldr	r3, [sl, #40]	; 0x28
   21ae4:	mov	r1, sl
   21ae8:	mov	r0, fp
   21aec:	ldr	r2, [sp, #20]
   21af0:	add	r3, r3, r5
   21af4:	str	r3, [sl, #40]	; 0x28
   21af8:	bl	161ac <__assert_fail@plt+0x4c54>
   21afc:	ldrb	r3, [fp, #4]
   21b00:	mov	r5, r0
   21b04:	cmp	r3, #2
   21b08:	beq	21da0 <__assert_fail@plt+0x10848>
   21b0c:	mov	r2, #1
   21b10:	str	r2, [sp, #44]	; 0x2c
   21b14:	b	21604 <__assert_fail@plt+0x100ac>
   21b18:	ldr	r2, [sp, #204]	; 0xcc
   21b1c:	mov	r3, #7
   21b20:	str	r3, [r2]
   21b24:	b	21a24 <__assert_fail@plt+0x104cc>
   21b28:	mov	r2, r3
   21b2c:	mov	r1, sl
   21b30:	mov	r0, fp
   21b34:	mov	r4, r3
   21b38:	bl	20028 <__assert_fail@plt+0xead0>
   21b3c:	ldr	lr, [sp, #200]	; 0xc8
   21b40:	mov	r3, r4
   21b44:	mov	r2, fp
   21b48:	mov	r1, r5
   21b4c:	ldr	ip, [sl, #40]	; 0x28
   21b50:	str	lr, [sp]
   21b54:	ldr	lr, [sp, #204]	; 0xcc
   21b58:	add	ip, ip, r0
   21b5c:	mov	r0, sl
   21b60:	str	lr, [sp, #4]
   21b64:	str	ip, [sl, #40]	; 0x28
   21b68:	bl	20cb8 <__assert_fail@plt+0xf760>
   21b6c:	str	r0, [sp, #24]
   21b70:	b	21028 <__assert_fail@plt+0xfad0>
   21b74:	ldr	r3, [sp, #204]	; 0xcc
   21b78:	str	r0, [r3]
   21b7c:	b	21a24 <__assert_fail@plt+0x104cc>
   21b80:	str	r4, [sp, #24]
   21b84:	b	20de4 <__assert_fail@plt+0xf88c>
   21b88:	mov	r0, #6
   21b8c:	mov	r2, r3
   21b90:	str	fp, [sp]
   21b94:	mov	r1, r6
   21b98:	str	r0, [fp]
   21b9c:	mov	r0, r5
   21ba0:	bl	18520 <__assert_fail@plt+0x6fc8>
   21ba4:	mov	r3, #9
   21ba8:	mov	r7, r0
   21bac:	str	r3, [fp]
   21bb0:	b	21504 <__assert_fail@plt+0xffac>
   21bb4:	ldr	r3, [sl, #40]	; 0x28
   21bb8:	mov	r2, r7
   21bbc:	add	r0, sp, #88	; 0x58
   21bc0:	mov	r1, sl
   21bc4:	add	r3, r3, r5
   21bc8:	str	r3, [sl, #40]	; 0x28
   21bcc:	bl	161ac <__assert_fail@plt+0x4c54>
   21bd0:	ldrb	r2, [sp, #92]	; 0x5c
   21bd4:	mov	r3, r0
   21bd8:	cmp	r2, #2
   21bdc:	beq	21b18 <__assert_fail@plt+0x105c0>
   21be0:	cmp	r2, #21
   21be4:	beq	21e04 <__assert_fail@plt+0x108ac>
   21be8:	mov	r1, #1
   21bec:	mov	r0, #3
   21bf0:	str	r7, [sp]
   21bf4:	add	ip, sp, #128	; 0x80
   21bf8:	add	r2, sp, #88	; 0x58
   21bfc:	str	r1, [sp, #4]
   21c00:	mov	r1, sl
   21c04:	str	r0, [sp, #80]	; 0x50
   21c08:	add	r0, sp, #80	; 0x50
   21c0c:	str	ip, [sp, #84]	; 0x54
   21c10:	bl	20a64 <__assert_fail@plt+0xf50c>
   21c14:	cmp	r0, #0
   21c18:	bne	21b74 <__assert_fail@plt+0x1061c>
   21c1c:	mov	r2, r7
   21c20:	mov	r1, sl
   21c24:	mov	r0, fp
   21c28:	bl	161ac <__assert_fail@plt+0x4c54>
   21c2c:	ldr	r2, [sp, #72]	; 0x48
   21c30:	mov	r5, r0
   21c34:	sub	r3, r2, #2
   21c38:	bics	r3, r3, #2
   21c3c:	beq	22074 <__assert_fail@plt+0x10b1c>
   21c40:	ldr	r3, [sp, #80]	; 0x50
   21c44:	sub	r1, r3, #2
   21c48:	bics	r1, r1, #2
   21c4c:	beq	22074 <__assert_fail@plt+0x10b1c>
   21c50:	cmp	r2, #3
   21c54:	moveq	r1, #1
   21c58:	movne	r1, #0
   21c5c:	str	r1, [sp, #52]	; 0x34
   21c60:	beq	22170 <__assert_fail@plt+0x10c18>
   21c64:	cmp	r3, #3
   21c68:	beq	22140 <__assert_fail@plt+0x10be8>
   21c6c:	cmp	r2, #0
   21c70:	bne	2205c <__assert_fail@plt+0x10b04>
   21c74:	ldrb	r4, [sp, #76]	; 0x4c
   21c78:	cmp	r3, #0
   21c7c:	beq	2206c <__assert_fail@plt+0x10b14>
   21c80:	cmp	r3, #3
   21c84:	bne	22054 <__assert_fail@plt+0x10afc>
   21c88:	ldr	r1, [sp, #84]	; 0x54
   21c8c:	ldrb	r6, [r1]
   21c90:	cmp	r2, #0
   21c94:	ldr	r1, [sp, #52]	; 0x34
   21c98:	moveq	r1, #1
   21c9c:	cmp	r1, #0
   21ca0:	beq	2204c <__assert_fail@plt+0x10af4>
   21ca4:	ldr	r2, [sp, #32]
   21ca8:	ldr	r2, [r2, #92]	; 0x5c
   21cac:	cmp	r2, #1
   21cb0:	ble	22038 <__assert_fail@plt+0x10ae0>
   21cb4:	mov	r0, r4
   21cb8:	bl	11468 <btowc@plt>
   21cbc:	ldr	r3, [sp, #80]	; 0x50
   21cc0:	mov	r4, r0
   21cc4:	cmp	r3, #3
   21cc8:	cmpne	r3, #0
   21ccc:	bne	22044 <__assert_fail@plt+0x10aec>
   21cd0:	ldr	r3, [sp, #32]
   21cd4:	ldr	r3, [r3, #92]	; 0x5c
   21cd8:	cmp	r3, #1
   21cdc:	ble	21cec <__assert_fail@plt+0x10794>
   21ce0:	mov	r0, r6
   21ce4:	bl	11468 <btowc@plt>
   21ce8:	mov	r6, r0
   21cec:	cmn	r4, #1
   21cf0:	cmnne	r6, #1
   21cf4:	beq	22128 <__assert_fail@plt+0x10bd0>
   21cf8:	ldr	r3, [sp, #48]	; 0x30
   21cfc:	cmp	r4, r6
   21d00:	movls	r3, #0
   21d04:	andhi	r3, r3, #1
   21d08:	cmp	r3, #0
   21d0c:	bne	22074 <__assert_fail@plt+0x10b1c>
   21d10:	ldr	r3, [sp, #32]
   21d14:	ldr	r3, [r3, #92]	; 0x5c
   21d18:	cmp	r3, #1
   21d1c:	ble	21d4c <__assert_fail@plt+0x107f4>
   21d20:	ldr	r1, [sp, #40]	; 0x28
   21d24:	ldr	r3, [r9, #32]
   21d28:	ldr	r2, [r9, #4]
   21d2c:	cmp	r3, r1
   21d30:	beq	221b0 <__assert_fail@plt+0x10c58>
   21d34:	str	r4, [r2, r3, lsl #2]
   21d38:	ldr	r2, [r9, #8]
   21d3c:	ldr	r3, [r9, #32]
   21d40:	add	r1, r3, #1
   21d44:	str	r1, [r9, #32]
   21d48:	str	r6, [r2, r3, lsl #2]
   21d4c:	mov	r3, #0
   21d50:	mov	ip, #1
   21d54:	cmp	r4, r3
   21d58:	asr	r2, r3, #5
   21d5c:	and	r0, r3, #31
   21d60:	movhi	r1, #0
   21d64:	movls	r1, #1
   21d68:	cmp	r6, r3
   21d6c:	add	r3, r3, #1
   21d70:	movcc	r1, #0
   21d74:	cmp	r1, #0
   21d78:	beq	21d88 <__assert_fail@plt+0x10830>
   21d7c:	ldr	r1, [r8, r2, lsl #2]
   21d80:	orr	r1, r1, ip, lsl r0
   21d84:	str	r1, [r8, r2, lsl #2]
   21d88:	cmp	r3, #256	; 0x100
   21d8c:	bne	21d54 <__assert_fail@plt+0x107fc>
   21d90:	ldr	r2, [sp, #204]	; 0xcc
   21d94:	mov	r3, #0
   21d98:	str	r3, [r2]
   21d9c:	b	219b0 <__assert_fail@plt+0x10458>
   21da0:	ldr	r2, [sp, #204]	; 0xcc
   21da4:	mov	r3, #2
   21da8:	str	r3, [r2]
   21dac:	b	21a24 <__assert_fail@plt+0x104cc>
   21db0:	ldrb	r3, [fp, #4]
   21db4:	cmp	r3, #2
   21db8:	bne	213d4 <__assert_fail@plt+0xfe7c>
   21dbc:	ldr	r2, [sp, #204]	; 0xcc
   21dc0:	mov	r3, #9
   21dc4:	str	r3, [r2]
   21dc8:	b	213e0 <__assert_fail@plt+0xfe88>
   21dcc:	mov	r0, r8
   21dd0:	str	r5, [sp, #24]
   21dd4:	bl	13b9c <__assert_fail@plt+0x2644>
   21dd8:	mov	r0, r9
   21ddc:	bl	13b9c <__assert_fail@plt+0x2644>
   21de0:	ldr	r2, [sp, #204]	; 0xcc
   21de4:	mov	r3, #12
   21de8:	str	r3, [r2]
   21dec:	b	21028 <__assert_fail@plt+0xfad0>
   21df0:	str	r3, [sp, #24]
   21df4:	mov	r2, #6
   21df8:	ldr	r3, [sp, #204]	; 0xcc
   21dfc:	str	r2, [r3]
   21e00:	b	21028 <__assert_fail@plt+0xfad0>
   21e04:	ldr	r2, [sl, #40]	; 0x28
   21e08:	mov	r1, #1
   21e0c:	ldr	r3, [sp, #72]	; 0x48
   21e10:	sub	r2, r2, r5
   21e14:	str	r2, [sl, #40]	; 0x28
   21e18:	strb	r1, [fp, #4]
   21e1c:	b	216a0 <__assert_fail@plt+0x10148>
   21e20:	lsl	r3, r2, #1
   21e24:	add	r3, r3, #1
   21e28:	lsl	r1, r3, #2
   21e2c:	str	r3, [sp, #24]
   21e30:	bl	261cc <__assert_fail@plt+0x14c74>
   21e34:	cmp	r0, #0
   21e38:	beq	21f48 <__assert_fail@plt+0x109f0>
   21e3c:	str	r0, [r9]
   21e40:	ldr	r3, [r9, #20]
   21e44:	b	21a80 <__assert_fail@plt+0x10528>
   21e48:	ldr	r3, [sl, #40]	; 0x28
   21e4c:	ldr	r2, [sp, #44]	; 0x2c
   21e50:	add	r3, r3, r5
   21e54:	cmp	r2, #0
   21e58:	str	r3, [sl, #40]	; 0x28
   21e5c:	beq	21e7c <__assert_fail@plt+0x10924>
   21e60:	sub	r3, r8, #4
   21e64:	add	r1, r8, #28
   21e68:	ldr	r2, [r3, #4]!
   21e6c:	mvn	r2, r2
   21e70:	cmp	r1, r3
   21e74:	str	r2, [r3]
   21e78:	bne	21e68 <__assert_fail@plt+0x10910>
   21e7c:	ldr	r3, [sp, #32]
   21e80:	ldr	r0, [r3, #92]	; 0x5c
   21e84:	cmp	r0, #1
   21e88:	ble	21eb8 <__assert_fail@plt+0x10960>
   21e8c:	ldr	r3, [sp, #32]
   21e90:	sub	r2, r8, #4
   21e94:	add	ip, r8, #28
   21e98:	ldr	r3, [r3, #60]	; 0x3c
   21e9c:	sub	r3, r3, #4
   21ea0:	ldr	r1, [r2, #4]!
   21ea4:	ldr	lr, [r3, #4]!
   21ea8:	cmp	ip, r2
   21eac:	and	r1, r1, lr
   21eb0:	str	r1, [r2]
   21eb4:	bne	21ea0 <__assert_fail@plt+0x10948>
   21eb8:	ldr	r3, [r9, #20]
   21ebc:	cmp	r3, #0
   21ec0:	bne	21f58 <__assert_fail@plt+0x10a00>
   21ec4:	ldr	r3, [r9, #24]
   21ec8:	cmp	r3, #0
   21ecc:	bne	21f58 <__assert_fail@plt+0x10a00>
   21ed0:	ldr	r3, [r9, #28]
   21ed4:	cmp	r3, #0
   21ed8:	bne	21f58 <__assert_fail@plt+0x10a00>
   21edc:	ldr	r3, [r9, #32]
   21ee0:	cmp	r3, #0
   21ee4:	bne	21f58 <__assert_fail@plt+0x10a00>
   21ee8:	cmp	r0, #1
   21eec:	ble	21f08 <__assert_fail@plt+0x109b0>
   21ef0:	ldr	r3, [r9, #36]	; 0x24
   21ef4:	cmp	r3, #0
   21ef8:	bne	21f58 <__assert_fail@plt+0x10a00>
   21efc:	ldrb	r3, [r9, #16]
   21f00:	tst	r3, #1
   21f04:	bne	21f58 <__assert_fail@plt+0x10a00>
   21f08:	mov	r0, r9
   21f0c:	bl	17188 <__assert_fail@plt+0x5c30>
   21f10:	ldr	r0, [sp, #32]
   21f14:	mov	r3, #0
   21f18:	mov	ip, #3
   21f1c:	str	r8, [sp, #96]	; 0x60
   21f20:	ldr	r2, [sp, #36]	; 0x24
   21f24:	add	r1, r0, #64	; 0x40
   21f28:	add	r0, r0, #56	; 0x38
   21f2c:	str	r2, [sp]
   21f30:	mov	r2, r3
   21f34:	strb	ip, [sp, #100]	; 0x64
   21f38:	bl	18520 <__assert_fail@plt+0x6fc8>
   21f3c:	subs	r3, r0, #0
   21f40:	str	r3, [sp, #24]
   21f44:	bne	20de4 <__assert_fail@plt+0xf88c>
   21f48:	ldr	r2, [sp, #204]	; 0xcc
   21f4c:	mov	r3, #12
   21f50:	str	r3, [r2]
   21f54:	b	21a24 <__assert_fail@plt+0x104cc>
   21f58:	ldr	r4, [sp, #32]
   21f5c:	mov	r3, #0
   21f60:	mov	lr, #6
   21f64:	mov	r2, r3
   21f68:	ldrb	ip, [r4, #88]	; 0x58
   21f6c:	add	r7, r4, #56	; 0x38
   21f70:	add	r6, r4, #64	; 0x40
   21f74:	mov	r0, r7
   21f78:	mov	r1, r6
   21f7c:	orr	ip, ip, #2
   21f80:	strb	ip, [r4, #88]	; 0x58
   21f84:	ldr	ip, [sp, #36]	; 0x24
   21f88:	str	ip, [sp]
   21f8c:	str	r9, [sp, #96]	; 0x60
   21f90:	strb	lr, [sp, #100]	; 0x64
   21f94:	bl	18520 <__assert_fail@plt+0x6fc8>
   21f98:	subs	r3, r0, #0
   21f9c:	str	r3, [sp, #24]
   21fa0:	beq	21f48 <__assert_fail@plt+0x109f0>
   21fa4:	sub	r3, r8, #4
   21fa8:	add	r2, r8, #28
   21fac:	ldr	r1, [r3, #4]!
   21fb0:	cmp	r1, #0
   21fb4:	bne	21fcc <__assert_fail@plt+0x10a74>
   21fb8:	cmp	r2, r3
   21fbc:	bne	21fac <__assert_fail@plt+0x10a54>
   21fc0:	mov	r0, r8
   21fc4:	bl	13b9c <__assert_fail@plt+0x2644>
   21fc8:	b	20de4 <__assert_fail@plt+0xf88c>
   21fcc:	ldr	r2, [sp, #36]	; 0x24
   21fd0:	mov	ip, #3
   21fd4:	mov	r3, #0
   21fd8:	mov	r1, r6
   21fdc:	mov	r0, r7
   21fe0:	str	r2, [sp]
   21fe4:	mov	r2, r3
   21fe8:	str	r8, [sp, #96]	; 0x60
   21fec:	strb	ip, [sp, #100]	; 0x64
   21ff0:	bl	18520 <__assert_fail@plt+0x6fc8>
   21ff4:	subs	r2, r0, #0
   21ff8:	beq	21f48 <__assert_fail@plt+0x109f0>
   21ffc:	add	ip, sp, #128	; 0x80
   22000:	mov	r4, #0
   22004:	ldr	r3, [sp, #24]
   22008:	mov	r5, #0
   2200c:	mov	r1, r6
   22010:	str	ip, [sp]
   22014:	mov	ip, #10
   22018:	mov	r0, r7
   2201c:	strd	r4, [sp, #128]	; 0x80
   22020:	strb	ip, [sp, #132]	; 0x84
   22024:	bl	18520 <__assert_fail@plt+0x6fc8>
   22028:	subs	r3, r0, #0
   2202c:	str	r3, [sp, #24]
   22030:	bne	20de4 <__assert_fail@plt+0xf88c>
   22034:	b	21f48 <__assert_fail@plt+0x109f0>
   22038:	cmp	r3, #0
   2203c:	cmpne	r3, #3
   22040:	beq	21cf8 <__assert_fail@plt+0x107a0>
   22044:	ldr	r6, [sp, #84]	; 0x54
   22048:	b	21cec <__assert_fail@plt+0x10794>
   2204c:	ldr	r4, [sp, #76]	; 0x4c
   22050:	b	21cc4 <__assert_fail@plt+0x1076c>
   22054:	mov	r6, #0
   22058:	b	21c90 <__assert_fail@plt+0x10738>
   2205c:	cmp	r3, #0
   22060:	movne	r4, #0
   22064:	bne	22054 <__assert_fail@plt+0x10afc>
   22068:	mov	r4, r3
   2206c:	ldrb	r6, [sp, #84]	; 0x54
   22070:	b	21c90 <__assert_fail@plt+0x10738>
   22074:	ldr	r2, [sp, #204]	; 0xcc
   22078:	mov	r3, #11
   2207c:	str	r3, [r2]
   22080:	b	21a24 <__assert_fail@plt+0x104cc>
   22084:	mov	r5, #128	; 0x80
   22088:	mov	r7, #4
   2208c:	bl	113fc <__ctype_b_loc@plt>
   22090:	ldr	r2, [r0]
   22094:	add	ip, r7, #24
   22098:	sub	r3, r5, #-2147483647	; 0x80000001
   2209c:	mov	lr, #1
   220a0:	ldr	r1, [sp, #32]
   220a4:	add	r6, r2, r3, lsl lr
   220a8:	add	ip, r1, ip, lsl #2
   220ac:	add	r7, r1, #128	; 0x80
   220b0:	mov	r0, r6
   220b4:	mov	r1, #0
   220b8:	ldrh	r2, [r0, #2]!
   220bc:	add	r3, r5, r1
   220c0:	ubfx	r2, r2, #3, #1
   220c4:	cmp	r3, #95	; 0x5f
   220c8:	movne	r3, r2
   220cc:	orreq	r3, r2, #1
   220d0:	cmp	r3, #0
   220d4:	beq	220e4 <__assert_fail@plt+0x10b8c>
   220d8:	ldr	r3, [ip]
   220dc:	orr	r3, r3, lr, lsl r1
   220e0:	str	r3, [ip]
   220e4:	add	r1, r1, #1
   220e8:	cmp	r1, #32
   220ec:	bne	220b8 <__assert_fail@plt+0x10b60>
   220f0:	add	ip, ip, #4
   220f4:	add	r5, r5, #32
   220f8:	cmp	r7, ip
   220fc:	add	r6, r6, #64	; 0x40
   22100:	bne	220b0 <__assert_fail@plt+0x10b58>
   22104:	b	214bc <__assert_fail@plt+0xff64>
   22108:	ldr	r0, [sp, #84]	; 0x54
   2210c:	str	r3, [sp, #56]	; 0x38
   22110:	str	r2, [sp, #60]	; 0x3c
   22114:	bl	11414 <strlen@plt>
   22118:	cmp	r0, #1
   2211c:	ldr	r3, [sp, #56]	; 0x38
   22120:	ldr	r2, [sp, #60]	; 0x3c
   22124:	bls	22198 <__assert_fail@plt+0x10c40>
   22128:	ldr	r2, [sp, #204]	; 0xcc
   2212c:	mov	r3, #3
   22130:	str	r3, [r2]
   22134:	b	21a24 <__assert_fail@plt+0x104cc>
   22138:	mov	r7, r5
   2213c:	b	2208c <__assert_fail@plt+0x10b34>
   22140:	ldr	r0, [sp, #84]	; 0x54
   22144:	str	r3, [sp, #56]	; 0x38
   22148:	str	r2, [sp, #60]	; 0x3c
   2214c:	bl	11414 <strlen@plt>
   22150:	cmp	r0, #1
   22154:	bhi	22128 <__assert_fail@plt+0x10bd0>
   22158:	ldr	r3, [sp, #56]	; 0x38
   2215c:	ldr	r2, [sp, #60]	; 0x3c
   22160:	cmp	r2, #0
   22164:	movne	r4, #0
   22168:	bne	21c88 <__assert_fail@plt+0x10730>
   2216c:	b	21c74 <__assert_fail@plt+0x1071c>
   22170:	ldr	r0, [sp, #76]	; 0x4c
   22174:	str	r3, [sp, #56]	; 0x38
   22178:	str	r2, [sp, #60]	; 0x3c
   2217c:	bl	11414 <strlen@plt>
   22180:	cmp	r0, #1
   22184:	ldr	r3, [sp, #56]	; 0x38
   22188:	ldr	r2, [sp, #60]	; 0x3c
   2218c:	bhi	22128 <__assert_fail@plt+0x10bd0>
   22190:	cmp	r3, #3
   22194:	beq	22108 <__assert_fail@plt+0x10bb0>
   22198:	ldr	r1, [sp, #76]	; 0x4c
   2219c:	ldrb	r4, [r1]
   221a0:	b	21c78 <__assert_fail@plt+0x10720>
   221a4:	ldr	r6, [sp, #24]
   221a8:	mov	r2, r6
   221ac:	b	213fc <__assert_fail@plt+0xfea4>
   221b0:	lsl	r3, r1, #1
   221b4:	mov	r0, r2
   221b8:	add	r3, r3, #1
   221bc:	str	r3, [sp, #40]	; 0x28
   221c0:	lsl	r3, r3, #2
   221c4:	mov	r1, r3
   221c8:	str	r3, [sp, #56]	; 0x38
   221cc:	bl	261cc <__assert_fail@plt+0x14c74>
   221d0:	ldr	r3, [sp, #56]	; 0x38
   221d4:	mov	r2, r0
   221d8:	ldr	r0, [r9, #8]
   221dc:	str	r2, [sp, #52]	; 0x34
   221e0:	mov	r1, r3
   221e4:	bl	261cc <__assert_fail@plt+0x14c74>
   221e8:	ldr	r2, [sp, #52]	; 0x34
   221ec:	cmp	r0, #0
   221f0:	cmpne	r2, #0
   221f4:	beq	22214 <__assert_fail@plt+0x10cbc>
   221f8:	str	r2, [r9, #4]
   221fc:	str	r0, [r9, #8]
   22200:	ldr	r3, [r9, #32]
   22204:	b	21d34 <__assert_fail@plt+0x107dc>
   22208:	mov	r2, r5
   2220c:	ldr	r6, [sp, #24]
   22210:	b	21438 <__assert_fail@plt+0xfee0>
   22214:	mov	r7, r0
   22218:	mov	r0, r2
   2221c:	bl	13b9c <__assert_fail@plt+0x2644>
   22220:	mov	r0, r7
   22224:	bl	13b9c <__assert_fail@plt+0x2644>
   22228:	ldr	r2, [sp, #204]	; 0xcc
   2222c:	mov	r3, #12
   22230:	str	r3, [r2]
   22234:	b	21a24 <__assert_fail@plt+0x104cc>
   22238:	mov	r3, #0
   2223c:	mov	r9, #1
   22240:	ldr	r6, [sp, #24]
   22244:	str	r3, [sp, #36]	; 0x24
   22248:	b	2121c <__assert_fail@plt+0xfcc4>
   2224c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22250:	ldr	ip, [r1]
   22254:	strd	r6, [sp, #8]
   22258:	mov	r7, r2
   2225c:	strd	r8, [sp, #16]
   22260:	mov	r8, r1
   22264:	mov	r9, r0
   22268:	strd	sl, [sp, #24]
   2226c:	mov	sl, r3
   22270:	str	lr, [sp, #32]
   22274:	sub	sp, sp, #36	; 0x24
   22278:	ldr	r6, [sp, #72]	; 0x48
   2227c:	ldr	r5, [sp, #76]	; 0x4c
   22280:	str	r6, [sp]
   22284:	str	ip, [sp, #20]
   22288:	str	r5, [sp, #4]
   2228c:	bl	20cb8 <__assert_fail@plt+0xf760>
   22290:	ldr	r2, [r5]
   22294:	clz	r3, r0
   22298:	lsr	r3, r3, #5
   2229c:	cmp	r2, #0
   222a0:	moveq	r3, #0
   222a4:	cmp	r3, #0
   222a8:	bne	223f4 <__assert_fail@plt+0x10e9c>
   222ac:	mov	r4, r0
   222b0:	str	r9, [sp, #12]
   222b4:	str	r8, [sp, #16]
   222b8:	ldrb	lr, [r7, #4]
   222bc:	clz	ip, r6
   222c0:	mov	r3, sl
   222c4:	mov	r2, r7
   222c8:	lsr	ip, ip, #5
   222cc:	ldrd	r0, [sp, #12]
   222d0:	and	fp, lr, #247	; 0xf7
   222d4:	cmp	fp, #2
   222d8:	beq	223b8 <__assert_fail@plt+0x10e60>
   222dc:	cmp	lr, #9
   222e0:	orrne	ip, ip, #1
   222e4:	cmp	ip, #0
   222e8:	beq	223b8 <__assert_fail@plt+0x10e60>
   222ec:	str	r6, [sp]
   222f0:	str	r5, [sp, #4]
   222f4:	bl	20cb8 <__assert_fail@plt+0xf760>
   222f8:	ldr	r2, [r5]
   222fc:	clz	r3, r0
   22300:	mov	fp, r0
   22304:	lsr	r3, r3, #5
   22308:	cmp	r2, #0
   2230c:	moveq	r3, #0
   22310:	cmp	r3, #0
   22314:	bne	223d8 <__assert_fail@plt+0x10e80>
   22318:	cmp	r4, #0
   2231c:	cmpne	r0, #0
   22320:	bne	22330 <__assert_fail@plt+0x10dd8>
   22324:	cmp	r4, #0
   22328:	moveq	r4, r0
   2232c:	b	222b8 <__assert_fail@plt+0x10d60>
   22330:	mov	r3, r0
   22334:	ldr	r0, [sp, #20]
   22338:	add	r1, sp, #24
   2233c:	mov	ip, #16
   22340:	mov	r8, #0
   22344:	mov	r9, #0
   22348:	mov	r2, r4
   2234c:	str	r1, [sp]
   22350:	strd	r8, [sp, #24]
   22354:	add	r1, r0, #64	; 0x40
   22358:	add	r0, r0, #56	; 0x38
   2235c:	strb	ip, [sp, #28]
   22360:	bl	18520 <__assert_fail@plt+0x6fc8>
   22364:	cmp	r0, #0
   22368:	beq	22374 <__assert_fail@plt+0x10e1c>
   2236c:	mov	r4, r0
   22370:	b	222b8 <__assert_fail@plt+0x10d60>
   22374:	mov	r3, r0
   22378:	movw	r1, #29180	; 0x71fc
   2237c:	movt	r1, #1
   22380:	mov	r2, r3
   22384:	mov	r0, fp
   22388:	str	r3, [sp, #12]
   2238c:	bl	16118 <__assert_fail@plt+0x4bc0>
   22390:	ldr	r3, [sp, #12]
   22394:	mov	r0, r4
   22398:	movw	r1, #29180	; 0x71fc
   2239c:	movt	r1, #1
   223a0:	mov	r2, r3
   223a4:	bl	16118 <__assert_fail@plt+0x4bc0>
   223a8:	ldr	r3, [sp, #12]
   223ac:	mov	r2, #12
   223b0:	str	r2, [r5]
   223b4:	mov	r4, r3
   223b8:	mov	r0, r4
   223bc:	add	sp, sp, #36	; 0x24
   223c0:	ldrd	r4, [sp]
   223c4:	ldrd	r6, [sp, #8]
   223c8:	ldrd	r8, [sp, #16]
   223cc:	ldrd	sl, [sp, #24]
   223d0:	add	sp, sp, #32
   223d4:	pop	{pc}		; (ldr pc, [sp], #4)
   223d8:	cmp	r4, #0
   223dc:	beq	223f4 <__assert_fail@plt+0x10e9c>
   223e0:	movw	r1, #29180	; 0x71fc
   223e4:	movt	r1, #1
   223e8:	mov	r0, r4
   223ec:	mov	r2, #0
   223f0:	bl	16118 <__assert_fail@plt+0x4bc0>
   223f4:	mov	r4, #0
   223f8:	b	223b8 <__assert_fail@plt+0x10e60>
   223fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22400:	mov	r5, r2
   22404:	ldr	r4, [r1]
   22408:	ldr	ip, [r4, #84]	; 0x54
   2240c:	strd	r6, [sp, #8]
   22410:	mov	r6, r0
   22414:	strd	r8, [sp, #16]
   22418:	strd	sl, [sp, #24]
   2241c:	mov	fp, r3
   22420:	mov	sl, r1
   22424:	str	lr, [sp, #32]
   22428:	sub	sp, sp, #36	; 0x24
   2242c:	ldrd	r8, [sp, #72]	; 0x48
   22430:	strd	r8, [sp]
   22434:	str	r3, [sp, #12]
   22438:	str	ip, [sp, #20]
   2243c:	bl	2224c <__assert_fail@plt+0x10cf4>
   22440:	ldr	r2, [r9]
   22444:	clz	r3, r0
   22448:	lsr	r3, r3, #5
   2244c:	cmp	r2, #0
   22450:	moveq	r3, #0
   22454:	cmp	r3, #0
   22458:	bne	22570 <__assert_fail@plt+0x11018>
   2245c:	orr	r3, fp, #8388608	; 0x800000
   22460:	mov	r7, r0
   22464:	str	r3, [sp, #8]
   22468:	str	sl, [sp, #16]
   2246c:	b	224f4 <__assert_fail@plt+0x10f9c>
   22470:	cmp	fp, #9
   22474:	orrne	ip, ip, #1
   22478:	cmp	ip, #0
   2247c:	beq	2254c <__assert_fail@plt+0x10ff4>
   22480:	ldr	ip, [sp, #20]
   22484:	ldr	fp, [r4, #84]	; 0x54
   22488:	str	ip, [r4, #84]	; 0x54
   2248c:	strd	r8, [sp]
   22490:	bl	2224c <__assert_fail@plt+0x10cf4>
   22494:	ldr	r1, [r9]
   22498:	clz	r2, r0
   2249c:	mov	r3, r0
   224a0:	lsr	r2, r2, #5
   224a4:	cmp	r1, #0
   224a8:	moveq	r2, #0
   224ac:	cmp	r2, #0
   224b0:	bne	22554 <__assert_fail@plt+0x10ffc>
   224b4:	ldr	r2, [r4, #84]	; 0x54
   224b8:	orr	fp, r2, fp
   224bc:	str	fp, [r4, #84]	; 0x54
   224c0:	add	r1, sp, #24
   224c4:	mov	ip, #10
   224c8:	mov	sl, #0
   224cc:	mov	fp, #0
   224d0:	mov	r2, r7
   224d4:	add	r0, r4, #56	; 0x38
   224d8:	str	r1, [sp]
   224dc:	add	r1, r4, #64	; 0x40
   224e0:	strd	sl, [sp, #24]
   224e4:	strb	ip, [sp, #28]
   224e8:	bl	18520 <__assert_fail@plt+0x6fc8>
   224ec:	subs	r7, r0, #0
   224f0:	beq	22594 <__assert_fail@plt+0x1103c>
   224f4:	ldrb	r3, [r5, #4]
   224f8:	mov	r1, r6
   224fc:	mov	r0, r5
   22500:	ldr	r2, [sp, #8]
   22504:	cmp	r3, #10
   22508:	bne	22574 <__assert_fail@plt+0x1101c>
   2250c:	bl	20028 <__assert_fail@plt+0xead0>
   22510:	ldr	lr, [r6, #40]	; 0x28
   22514:	clz	ip, r8
   22518:	mov	r2, r5
   2251c:	lsr	ip, ip, #5
   22520:	ldrb	fp, [r5, #4]
   22524:	ldr	r3, [sp, #12]
   22528:	add	lr, lr, r0
   2252c:	mov	r0, r6
   22530:	ldr	r1, [sp, #16]
   22534:	str	lr, [r6, #40]	; 0x28
   22538:	and	lr, fp, #247	; 0xf7
   2253c:	cmp	lr, #2
   22540:	bne	22470 <__assert_fail@plt+0x10f18>
   22544:	mov	r3, #0
   22548:	b	224c0 <__assert_fail@plt+0x10f68>
   2254c:	mov	r3, ip
   22550:	b	224c0 <__assert_fail@plt+0x10f68>
   22554:	cmp	r7, #0
   22558:	beq	22570 <__assert_fail@plt+0x11018>
   2255c:	movw	r1, #29180	; 0x71fc
   22560:	movt	r1, #1
   22564:	mov	r0, r7
   22568:	mov	r2, #0
   2256c:	bl	16118 <__assert_fail@plt+0x4bc0>
   22570:	mov	r7, #0
   22574:	mov	r0, r7
   22578:	add	sp, sp, #36	; 0x24
   2257c:	ldrd	r4, [sp]
   22580:	ldrd	r6, [sp, #8]
   22584:	ldrd	r8, [sp, #16]
   22588:	ldrd	sl, [sp, #24]
   2258c:	add	sp, sp, #32
   22590:	pop	{pc}		; (ldr pc, [sp], #4)
   22594:	mov	r3, #12
   22598:	str	r3, [r9]
   2259c:	b	22574 <__assert_fail@plt+0x1101c>
   225a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   225a4:	mov	r5, r0
   225a8:	ldr	r4, [r0]
   225ac:	strd	r6, [sp, #8]
   225b0:	mov	r7, r3
   225b4:	mov	r6, r2
   225b8:	ldrb	r3, [r0, #28]
   225bc:	mov	r0, #0
   225c0:	strd	r8, [sp, #16]
   225c4:	mov	r8, r1
   225c8:	ldr	r2, [r5, #4]
   225cc:	strd	sl, [sp, #24]
   225d0:	str	lr, [sp, #32]
   225d4:	sub	sp, sp, #140	; 0x8c
   225d8:	bic	r3, r3, #111	; 0x6f
   225dc:	str	r0, [r5, #8]
   225e0:	str	r7, [r5, #12]
   225e4:	cmp	r2, #159	; 0x9f
   225e8:	str	r0, [r5, #24]
   225ec:	strb	r3, [r5, #28]
   225f0:	str	r0, [sp, #28]
   225f4:	bls	23178 <__assert_fail@plt+0x11c20>
   225f8:	mov	r3, #160	; 0xa0
   225fc:	mov	r1, #0
   22600:	mov	r2, r3
   22604:	mov	r0, r4
   22608:	str	r3, [r5, #8]
   2260c:	bl	1145c <memset@plt>
   22610:	movw	r3, #43689	; 0xaaa9
   22614:	movt	r3, #2730	; 0xaaa
   22618:	mov	r2, #31
   2261c:	cmp	r6, r3
   22620:	str	r2, [r4, #64]	; 0x40
   22624:	bhi	22c28 <__assert_fail@plt+0x116d0>
   22628:	add	r9, r6, #1
   2262c:	lsl	r0, r9, #3
   22630:	str	r9, [r4, #4]
   22634:	bl	26190 <__assert_fail@plt+0x14c38>
   22638:	cmp	r6, #0
   2263c:	str	r0, [r4]
   22640:	beq	2319c <__assert_fail@plt+0x11c44>
   22644:	mov	r1, #1
   22648:	lsl	r1, r1, #1
   2264c:	cmp	r6, r1
   22650:	bcs	22648 <__assert_fail@plt+0x110f0>
   22654:	sub	sl, r1, #1
   22658:	mov	r0, #12
   2265c:	bl	2611c <__assert_fail@plt+0x14bc4>
   22660:	str	r0, [r4, #32]
   22664:	str	sl, [r4, #68]	; 0x44
   22668:	bl	11354 <__ctype_get_mb_cur_max@plt>
   2266c:	str	r0, [r4, #92]	; 0x5c
   22670:	mov	r0, #14
   22674:	bl	114e0 <nl_langinfo@plt>
   22678:	ldrb	r3, [r0]
   2267c:	and	r3, r3, #223	; 0xdf
   22680:	cmp	r3, #85	; 0x55
   22684:	bne	226dc <__assert_fail@plt+0x11184>
   22688:	ldrb	r3, [r0, #1]
   2268c:	and	r3, r3, #223	; 0xdf
   22690:	cmp	r3, #84	; 0x54
   22694:	bne	226dc <__assert_fail@plt+0x11184>
   22698:	ldrb	r3, [r0, #2]
   2269c:	and	r3, r3, #223	; 0xdf
   226a0:	cmp	r3, #70	; 0x46
   226a4:	bne	226dc <__assert_fail@plt+0x11184>
   226a8:	ldrb	r3, [r0, #3]
   226ac:	movw	r1, #31220	; 0x79f4
   226b0:	movt	r1, #2
   226b4:	cmp	r3, #45	; 0x2d
   226b8:	moveq	r3, #4
   226bc:	movne	r3, #3
   226c0:	add	r0, r0, r3
   226c4:	bl	111f8 <strcmp@plt>
   226c8:	cmp	r0, #0
   226cc:	bne	226dc <__assert_fail@plt+0x11184>
   226d0:	ldrb	r3, [r4, #88]	; 0x58
   226d4:	orr	r3, r3, #4
   226d8:	strb	r3, [r4, #88]	; 0x58
   226dc:	ldrb	r3, [r4, #88]	; 0x58
   226e0:	ldr	r2, [r4, #92]	; 0x5c
   226e4:	bfc	r3, #3, #1
   226e8:	cmp	r2, #1
   226ec:	strb	r3, [r4, #88]	; 0x58
   226f0:	ble	2270c <__assert_fail@plt+0x111b4>
   226f4:	uxtb	sl, r3
   226f8:	ands	sl, sl, #4
   226fc:	beq	22c8c <__assert_fail@plt+0x11734>
   22700:	movw	r3, #30636	; 0x77ac
   22704:	movt	r3, #2
   22708:	str	r3, [r4, #60]	; 0x3c
   2270c:	ldr	r3, [r4]
   22710:	cmp	r3, #0
   22714:	beq	22c28 <__assert_fail@plt+0x116d0>
   22718:	ldr	r3, [r4, #32]
   2271c:	cmp	r3, #0
   22720:	beq	22c28 <__assert_fail@plt+0x116d0>
   22724:	mov	r1, #0
   22728:	movw	r2, #0
   2272c:	movt	r2, #0
   22730:	mov	r3, #1
   22734:	cmp	r2, r1
   22738:	str	r1, [sp, #28]
   2273c:	mov	r1, #1
   22740:	moveq	r3, r2
   22744:	movw	r2, #0
   22748:	movt	r2, #0
   2274c:	cmp	r2, #0
   22750:	moveq	r1, r2
   22754:	orr	r3, r3, r1
   22758:	ands	r3, r3, #255	; 0xff
   2275c:	str	r3, [sp, #8]
   22760:	beq	22784 <__assert_fail@plt+0x1122c>
   22764:	mov	r1, #0
   22768:	add	r0, r4, #136	; 0x88
   2276c:	bl	11270 <pthread_mutex_init@plt>
   22770:	cmp	r0, #0
   22774:	bne	22c28 <__assert_fail@plt+0x116d0>
   22778:	ldr	r3, [sp, #28]
   2277c:	cmp	r3, #0
   22780:	bne	22c30 <__assert_fail@plt+0x116d8>
   22784:	mov	r2, #76	; 0x4c
   22788:	mov	r1, #0
   2278c:	ldr	sl, [r5, #20]
   22790:	add	r0, sp, #56	; 0x38
   22794:	and	fp, r7, #4194304	; 0x400000
   22798:	bl	1145c <memset@plt>
   2279c:	ldrb	r3, [r4, #88]	; 0x58
   227a0:	adds	lr, fp, #0
   227a4:	movne	lr, #1
   227a8:	str	r8, [sp, #52]	; 0x34
   227ac:	ldr	r0, [r4, #92]	; 0x5c
   227b0:	orr	r2, sl, fp
   227b4:	adds	r1, r2, #0
   227b8:	str	r6, [sp, #96]	; 0x60
   227bc:	movne	r1, #1
   227c0:	cmp	r6, #0
   227c4:	str	r6, [sp, #100]	; 0x64
   227c8:	ubfx	ip, r3, #2, #1
   227cc:	str	r6, [sp, #104]	; 0x68
   227d0:	ubfx	r3, r3, #3, #1
   227d4:	str	r6, [sp, #108]	; 0x6c
   227d8:	str	sl, [sp, #116]	; 0x74
   227dc:	strb	lr, [sp, #124]	; 0x7c
   227e0:	strb	ip, [sp, #125]	; 0x7d
   227e4:	strb	r3, [sp, #126]	; 0x7e
   227e8:	strb	r1, [sp, #127]	; 0x7f
   227ec:	str	r0, [sp, #132]	; 0x84
   227f0:	bne	22c64 <__assert_fail@plt+0x1170c>
   227f4:	cmp	r1, #0
   227f8:	ldrne	r8, [sp, #56]	; 0x38
   227fc:	cmp	fp, #0
   22800:	str	r8, [sp, #56]	; 0x38
   22804:	beq	228bc <__assert_fail@plt+0x11364>
   22808:	cmp	r0, #1
   2280c:	ble	23164 <__assert_fail@plt+0x11c0c>
   22810:	add	r0, sp, #52	; 0x34
   22814:	bl	16a00 <__assert_fail@plt+0x54a8>
   22818:	cmp	r0, #0
   2281c:	bne	22858 <__assert_fail@plt+0x11300>
   22820:	ldr	r3, [sp, #84]	; 0x54
   22824:	cmp	r6, r3
   22828:	ble	231f0 <__assert_fail@plt+0x11c98>
   2282c:	ldr	r3, [sp, #80]	; 0x50
   22830:	ldr	r2, [r4, #92]	; 0x5c
   22834:	ldr	r1, [sp, #88]	; 0x58
   22838:	add	r3, r3, r2
   2283c:	cmp	r1, r3
   22840:	bgt	231f0 <__assert_fail@plt+0x11c98>
   22844:	lsl	r1, r1, #1
   22848:	add	r0, sp, #52	; 0x34
   2284c:	bl	16610 <__assert_fail@plt+0x50b8>
   22850:	cmp	r0, #0
   22854:	beq	22810 <__assert_fail@plt+0x112b8>
   22858:	ldr	r6, [r5]
   2285c:	str	r0, [sp, #28]
   22860:	ldr	r0, [r6, #56]	; 0x38
   22864:	cmp	r0, #0
   22868:	beq	2287c <__assert_fail@plt+0x11324>
   2286c:	ldr	r7, [r0]
   22870:	bl	13b9c <__assert_fail@plt+0x2644>
   22874:	subs	r0, r7, #0
   22878:	bne	2286c <__assert_fail@plt+0x11314>
   2287c:	mov	r7, #0
   22880:	mov	r3, #31
   22884:	ldr	r0, [r6, #16]
   22888:	str	r7, [r6, #52]	; 0x34
   2288c:	str	r7, [r6, #56]	; 0x38
   22890:	str	r3, [r6, #64]	; 0x40
   22894:	bl	13b9c <__assert_fail@plt+0x2644>
   22898:	add	r0, sp, #52	; 0x34
   2289c:	str	r7, [r6, #16]
   228a0:	bl	174f0 <__assert_fail@plt+0x5f98>
   228a4:	ldr	r3, [sp, #8]
   228a8:	cmp	r3, r7
   228ac:	beq	22c30 <__assert_fail@plt+0x116d8>
   228b0:	add	r0, r4, #136	; 0x88
   228b4:	bl	11210 <pthread_mutex_destroy@plt>
   228b8:	b	22c30 <__assert_fail@plt+0x116d8>
   228bc:	cmp	r0, #1
   228c0:	bgt	2307c <__assert_fail@plt+0x11b24>
   228c4:	cmp	r2, #0
   228c8:	ldr	r1, [sp, #88]	; 0x58
   228cc:	beq	22d3c <__assert_fail@plt+0x117e4>
   228d0:	ldr	r3, [sp, #80]	; 0x50
   228d4:	ldr	r2, [sp, #100]	; 0x64
   228d8:	cmp	r1, r2
   228dc:	movge	r1, r2
   228e0:	cmp	r1, r3
   228e4:	bgt	228f0 <__assert_fail@plt+0x11398>
   228e8:	b	232dc <__assert_fail@plt+0x11d84>
   228ec:	ldr	r8, [sp, #56]	; 0x38
   228f0:	ldr	r2, [sp, #52]	; 0x34
   228f4:	ldr	ip, [sp, #76]	; 0x4c
   228f8:	ldr	r0, [sp, #116]	; 0x74
   228fc:	add	r2, r2, r3
   22900:	ldrb	r2, [r2, ip]
   22904:	ldrb	r2, [r0, r2]
   22908:	strb	r2, [r8, r3]
   2290c:	add	r3, r3, #1
   22910:	cmp	r1, r3
   22914:	bne	228ec <__assert_fail@plt+0x11394>
   22918:	mov	r3, #0
   2291c:	str	r3, [sp, #28]
   22920:	str	r1, [sp, #80]	; 0x50
   22924:	str	r1, [sp, #84]	; 0x54
   22928:	ldr	r6, [r5]
   2292c:	mov	r8, #0
   22930:	orr	r2, r7, #8388608	; 0x800000
   22934:	add	r1, sp, #52	; 0x34
   22938:	add	r0, sp, #32
   2293c:	str	r8, [r5, #24]
   22940:	str	r7, [r6, #128]	; 0x80
   22944:	bl	20028 <__assert_fail@plt+0xead0>
   22948:	ldr	ip, [sp, #92]	; 0x5c
   2294c:	add	r1, sp, #28
   22950:	mov	r3, r7
   22954:	add	r2, sp, #32
   22958:	str	r8, [sp]
   2295c:	str	r1, [sp, #4]
   22960:	mov	r1, r5
   22964:	add	ip, ip, r0
   22968:	add	r0, sp, #52	; 0x34
   2296c:	str	ip, [sp, #92]	; 0x5c
   22970:	bl	223fc <__assert_fail@plt+0x10ea4>
   22974:	ldr	lr, [sp, #28]
   22978:	mov	r9, r0
   2297c:	cmp	lr, r8
   22980:	bne	231a8 <__assert_fail@plt+0x11c50>
   22984:	mov	r2, #0
   22988:	mov	r3, #0
   2298c:	add	r7, sp, #40	; 0x28
   22990:	mov	ip, #2
   22994:	add	sl, r6, #56	; 0x38
   22998:	add	r6, r6, #64	; 0x40
   2299c:	mov	r0, sl
   229a0:	mov	r1, r6
   229a4:	str	r7, [sp]
   229a8:	strd	r2, [sp, #40]	; 0x28
   229ac:	mov	r3, lr
   229b0:	mov	r2, lr
   229b4:	strb	ip, [sp, #44]	; 0x2c
   229b8:	bl	18520 <__assert_fail@plt+0x6fc8>
   229bc:	cmp	r9, #0
   229c0:	mov	lr, r0
   229c4:	moveq	r9, r0
   229c8:	beq	22a00 <__assert_fail@plt+0x114a8>
   229cc:	mov	ip, #16
   229d0:	mov	r2, r9
   229d4:	str	r7, [sp]
   229d8:	mov	r9, #0
   229dc:	mov	r8, #0
   229e0:	mov	r3, lr
   229e4:	mov	r1, r6
   229e8:	mov	r0, sl
   229ec:	strd	r8, [sp, #40]	; 0x28
   229f0:	mov	r9, lr
   229f4:	strb	ip, [sp, #44]	; 0x2c
   229f8:	bl	18520 <__assert_fail@plt+0x6fc8>
   229fc:	mov	lr, r0
   22a00:	clz	r3, lr
   22a04:	cmp	r9, #0
   22a08:	ldr	r6, [r5]
   22a0c:	lsr	r3, r3, #5
   22a10:	moveq	r9, #1
   22a14:	movne	r9, r3
   22a18:	cmp	r9, #0
   22a1c:	movne	r2, #12
   22a20:	movne	r3, #0
   22a24:	strne	r2, [sp, #28]
   22a28:	strne	r3, [r4, #52]	; 0x34
   22a2c:	bne	22860 <__assert_fail@plt+0x11308>
   22a30:	ldr	r0, [r6, #4]
   22a34:	str	lr, [r4, #52]	; 0x34
   22a38:	lsl	r0, r0, #2
   22a3c:	bl	26190 <__assert_fail@plt+0x14c38>
   22a40:	ldr	r3, [r6, #4]
   22a44:	str	r0, [r6, #12]
   22a48:	lsl	r0, r3, #2
   22a4c:	bl	26190 <__assert_fail@plt+0x14c38>
   22a50:	ldr	r3, [r6, #4]
   22a54:	str	r0, [r6, #16]
   22a58:	add	r3, r3, r3, lsl #1
   22a5c:	lsl	r0, r3, #2
   22a60:	bl	26190 <__assert_fail@plt+0x14c38>
   22a64:	ldr	r3, [r6, #4]
   22a68:	str	r0, [r6, #20]
   22a6c:	add	r3, r3, r3, lsl #1
   22a70:	lsl	r0, r3, #2
   22a74:	bl	26190 <__assert_fail@plt+0x14c38>
   22a78:	ldr	r3, [r6, #12]
   22a7c:	str	r0, [r6, #24]
   22a80:	cmp	r3, #0
   22a84:	beq	2306c <__assert_fail@plt+0x11b14>
   22a88:	ldr	r3, [r6, #16]
   22a8c:	cmp	r3, #0
   22a90:	beq	2306c <__assert_fail@plt+0x11b14>
   22a94:	ldr	r3, [r6, #20]
   22a98:	cmp	r3, #0
   22a9c:	beq	2306c <__assert_fail@plt+0x11b14>
   22aa0:	cmp	r0, #0
   22aa4:	beq	2306c <__assert_fail@plt+0x11b14>
   22aa8:	ldr	r0, [r5, #24]
   22aac:	lsl	r0, r0, #2
   22ab0:	bl	26190 <__assert_fail@plt+0x14c38>
   22ab4:	cmp	r0, #0
   22ab8:	str	r0, [r6, #132]	; 0x84
   22abc:	beq	22b40 <__assert_fail@plt+0x115e8>
   22ac0:	ldr	r2, [r5, #24]
   22ac4:	cmp	r2, #0
   22ac8:	subne	r0, r0, #4
   22acc:	movne	r3, r9
   22ad0:	beq	22ae4 <__assert_fail@plt+0x1158c>
   22ad4:	str	r3, [r0, #4]!
   22ad8:	add	r3, r3, #1
   22adc:	cmp	r3, r2
   22ae0:	bne	22ad4 <__assert_fail@plt+0x1157c>
   22ae4:	movw	r1, #32644	; 0x7f84
   22ae8:	movt	r1, #1
   22aec:	ldr	r0, [r6, #52]	; 0x34
   22af0:	mov	r2, r6
   22af4:	bl	182c0 <__assert_fail@plt+0x6d68>
   22af8:	ldr	ip, [r5, #24]
   22afc:	cmp	ip, #0
   22b00:	beq	232e4 <__assert_fail@plt+0x11d8c>
   22b04:	ldr	r0, [r6, #132]	; 0x84
   22b08:	ldr	r3, [r0]
   22b0c:	cmp	r3, #0
   22b10:	bne	22b40 <__assert_fail@plt+0x115e8>
   22b14:	mov	r2, r0
   22b18:	b	22b28 <__assert_fail@plt+0x115d0>
   22b1c:	ldr	r1, [r2, #4]!
   22b20:	cmp	r1, r3
   22b24:	bne	22b40 <__assert_fail@plt+0x115e8>
   22b28:	add	r3, r3, #1
   22b2c:	cmp	r3, ip
   22b30:	bne	22b1c <__assert_fail@plt+0x115c4>
   22b34:	bl	13b9c <__assert_fail@plt+0x2644>
   22b38:	mov	r3, #0
   22b3c:	str	r3, [r6, #132]	; 0x84
   22b40:	movw	r1, #35140	; 0x8944
   22b44:	movt	r1, #1
   22b48:	ldr	r0, [r6, #52]	; 0x34
   22b4c:	mov	r2, r5
   22b50:	bl	16118 <__assert_fail@plt+0x4bc0>
   22b54:	cmp	r0, #0
   22b58:	bne	22858 <__assert_fail@plt+0x11300>
   22b5c:	movw	r1, #37280	; 0x91a0
   22b60:	movt	r1, #1
   22b64:	ldr	r0, [r6, #52]	; 0x34
   22b68:	mov	r2, r6
   22b6c:	bl	16118 <__assert_fail@plt+0x4bc0>
   22b70:	cmp	r0, #0
   22b74:	bne	22858 <__assert_fail@plt+0x11300>
   22b78:	mov	r2, r6
   22b7c:	movw	r1, #32812	; 0x802c
   22b80:	movt	r1, #1
   22b84:	ldr	r0, [r6, #52]	; 0x34
   22b88:	bl	182c0 <__assert_fail@plt+0x6d68>
   22b8c:	mov	r2, r6
   22b90:	movw	r1, #30200	; 0x75f8
   22b94:	movt	r1, #1
   22b98:	ldr	r0, [r6, #52]	; 0x34
   22b9c:	bl	182c0 <__assert_fail@plt+0x6d68>
   22ba0:	subs	r3, r0, #0
   22ba4:	str	r3, [sp, #12]
   22ba8:	bne	232c0 <__assert_fail@plt+0x11d68>
   22bac:	ldr	r1, [r6, #24]
   22bb0:	mov	sl, r3
   22bb4:	mov	r8, r3
   22bb8:	add	r9, r8, r8, lsl #1
   22bbc:	lsl	r9, r9, #2
   22bc0:	add	r3, r1, r9
   22bc4:	ldr	r3, [r3, #4]
   22bc8:	cmp	r3, #0
   22bcc:	addne	r8, r8, #1
   22bd0:	bne	22c08 <__assert_fail@plt+0x116b0>
   22bd4:	mov	r3, #1
   22bd8:	mov	r2, r8
   22bdc:	mov	r1, r6
   22be0:	mov	r0, r7
   22be4:	bl	19820 <__assert_fail@plt+0x82c8>
   22be8:	cmp	r0, #0
   22bec:	bne	22858 <__assert_fail@plt+0x11300>
   22bf0:	ldr	r1, [r6, #24]
   22bf4:	add	r8, r8, #1
   22bf8:	add	r9, r1, r9
   22bfc:	ldr	r9, [r9, #4]
   22c00:	cmp	r9, #0
   22c04:	beq	22d4c <__assert_fail@plt+0x117f4>
   22c08:	ldr	r3, [r6, #8]
   22c0c:	cmp	r8, r3
   22c10:	bne	22bb8 <__assert_fail@plt+0x11660>
   22c14:	cmp	sl, #0
   22c18:	beq	22d70 <__assert_fail@plt+0x11818>
   22c1c:	mov	sl, #0
   22c20:	mov	r8, sl
   22c24:	b	22bb8 <__assert_fail@plt+0x11660>
   22c28:	mov	r3, #12
   22c2c:	str	r3, [sp, #28]
   22c30:	mov	r0, r4
   22c34:	bl	19240 <__assert_fail@plt+0x7ce8>
   22c38:	ldr	r0, [sp, #28]
   22c3c:	mov	r3, #0
   22c40:	str	r3, [r5]
   22c44:	str	r3, [r5, #4]
   22c48:	add	sp, sp, #140	; 0x8c
   22c4c:	ldrd	r4, [sp]
   22c50:	ldrd	r6, [sp, #8]
   22c54:	ldrd	r8, [sp, #16]
   22c58:	ldrd	sl, [sp, #24]
   22c5c:	add	sp, sp, #32
   22c60:	pop	{pc}		; (ldr pc, [sp], #4)
   22c64:	mov	r1, r9
   22c68:	add	r0, sp, #52	; 0x34
   22c6c:	str	r2, [sp, #12]
   22c70:	bl	16610 <__assert_fail@plt+0x50b8>
   22c74:	cmp	r0, #0
   22c78:	bne	22858 <__assert_fail@plt+0x11300>
   22c7c:	ldrb	r1, [sp, #127]	; 0x7f
   22c80:	ldr	r2, [sp, #12]
   22c84:	ldr	r0, [r4, #92]	; 0x5c
   22c88:	b	227f4 <__assert_fail@plt+0x1129c>
   22c8c:	mov	r1, #1
   22c90:	mov	r0, #32
   22c94:	bl	2611c <__assert_fail@plt+0x14bc4>
   22c98:	cmp	r0, #0
   22c9c:	str	r0, [r4, #60]	; 0x3c
   22ca0:	beq	22c28 <__assert_fail@plt+0x116d0>
   22ca4:	str	r5, [sp, #8]
   22ca8:	mov	r5, r4
   22cac:	lsl	fp, sl, #3
   22cb0:	mov	r4, #0
   22cb4:	b	22cdc <__assert_fail@plt+0x11784>
   22cb8:	cmp	r3, #0
   22cbc:	bne	22ccc <__assert_fail@plt+0x11774>
   22cc0:	ldrb	r3, [r5, #88]	; 0x58
   22cc4:	orr	r3, r3, #8
   22cc8:	strb	r3, [r5, #88]	; 0x58
   22ccc:	add	r4, r4, #1
   22cd0:	add	fp, fp, #1
   22cd4:	cmp	r4, #32
   22cd8:	beq	22d24 <__assert_fail@plt+0x117cc>
   22cdc:	mov	r0, fp
   22ce0:	bl	11468 <btowc@plt>
   22ce4:	cmn	r0, #1
   22ce8:	bic	r3, fp, #127	; 0x7f
   22cec:	beq	22cb8 <__assert_fail@plt+0x11760>
   22cf0:	ldr	r1, [r5, #60]	; 0x3c
   22cf4:	cmp	r3, #0
   22cf8:	mov	r2, #1
   22cfc:	ldr	r3, [r1, sl]
   22d00:	orr	r3, r3, r2, lsl r4
   22d04:	str	r3, [r1, sl]
   22d08:	bne	22ccc <__assert_fail@plt+0x11774>
   22d0c:	cmp	r0, fp
   22d10:	bne	22cc0 <__assert_fail@plt+0x11768>
   22d14:	add	r4, r4, #1
   22d18:	add	fp, fp, #1
   22d1c:	cmp	r4, #32
   22d20:	bne	22cdc <__assert_fail@plt+0x11784>
   22d24:	add	sl, sl, #4
   22d28:	cmp	sl, #32
   22d2c:	bne	22cac <__assert_fail@plt+0x11754>
   22d30:	mov	r4, r5
   22d34:	ldr	r5, [sp, #8]
   22d38:	b	2270c <__assert_fail@plt+0x111b4>
   22d3c:	str	fp, [sp, #28]
   22d40:	str	r1, [sp, #80]	; 0x50
   22d44:	str	r1, [sp, #84]	; 0x54
   22d48:	b	22928 <__assert_fail@plt+0x113d0>
   22d4c:	ldr	r0, [sp, #48]	; 0x30
   22d50:	bl	13b9c <__assert_fail@plt+0x2644>
   22d54:	ldr	r3, [r6, #8]
   22d58:	cmp	r3, r8
   22d5c:	moveq	sl, r9
   22d60:	moveq	r8, sl
   22d64:	movne	sl, #1
   22d68:	ldr	r1, [r6, #24]
   22d6c:	b	22bb8 <__assert_fail@plt+0x11660>
   22d70:	ldrb	r3, [r5, #28]
   22d74:	tst	r3, #16
   22d78:	bne	22d94 <__assert_fail@plt+0x1183c>
   22d7c:	ldr	r3, [r5, #24]
   22d80:	cmp	r3, #0
   22d84:	beq	22d94 <__assert_fail@plt+0x1183c>
   22d88:	ldrb	r3, [r6, #88]	; 0x58
   22d8c:	tst	r3, #1
   22d90:	bne	22da0 <__assert_fail@plt+0x11848>
   22d94:	ldr	r3, [r6, #76]	; 0x4c
   22d98:	cmp	r3, #0
   22d9c:	beq	22e98 <__assert_fail@plt+0x11940>
   22da0:	add	r8, r8, r8, lsl #1
   22da4:	lsl	r0, r8, #2
   22da8:	bl	26190 <__assert_fail@plt+0x14c38>
   22dac:	cmp	r0, #0
   22db0:	str	r0, [r6, #28]
   22db4:	beq	2306c <__assert_fail@plt+0x11b14>
   22db8:	ldr	r3, [r6, #8]
   22dbc:	cmp	r3, #0
   22dc0:	movne	r3, #0
   22dc4:	movne	r2, r3
   22dc8:	bne	22dd4 <__assert_fail@plt+0x1187c>
   22dcc:	b	22e98 <__assert_fail@plt+0x11940>
   22dd0:	ldr	r0, [r6, #28]
   22dd4:	add	ip, r3, r3, lsl #1
   22dd8:	add	r3, r3, #1
   22ddc:	add	r1, r0, ip, lsl #2
   22de0:	str	r2, [r0, ip, lsl #2]
   22de4:	str	r2, [r1, #4]
   22de8:	str	r2, [r1, #8]
   22dec:	ldr	r0, [r6, #8]
   22df0:	cmp	r0, r3
   22df4:	bhi	22dd0 <__assert_fail@plt+0x11878>
   22df8:	cmp	r0, #0
   22dfc:	beq	22e98 <__assert_fail@plt+0x11940>
   22e00:	mov	r3, #0
   22e04:	ldr	r1, [r6, #24]
   22e08:	mov	r9, r3
   22e0c:	str	r7, [sp, #20]
   22e10:	mov	r7, r6
   22e14:	mov	r6, r3
   22e18:	str	sl, [sp, #16]
   22e1c:	add	r3, r1, r9
   22e20:	ldr	ip, [r3, #4]
   22e24:	ldr	r3, [r3, #8]
   22e28:	cmp	ip, #0
   22e2c:	movgt	r8, #0
   22e30:	subgt	sl, r3, #4
   22e34:	bgt	22e54 <__assert_fail@plt+0x118fc>
   22e38:	b	22e80 <__assert_fail@plt+0x11928>
   22e3c:	ldr	r1, [r7, #24]
   22e40:	add	r8, r8, #1
   22e44:	add	r3, r1, r9
   22e48:	ldr	r3, [r3, #4]
   22e4c:	cmp	r8, r3
   22e50:	bge	22e7c <__assert_fail@plt+0x11924>
   22e54:	ldr	r3, [sl, #4]!
   22e58:	mov	r1, r6
   22e5c:	ldr	r0, [r7, #28]
   22e60:	add	r3, r3, r3, lsl #1
   22e64:	add	r0, r0, r3, lsl #2
   22e68:	bl	166c8 <__assert_fail@plt+0x5170>
   22e6c:	cmp	r0, #0
   22e70:	bne	22e3c <__assert_fail@plt+0x118e4>
   22e74:	mov	r0, #12
   22e78:	b	22858 <__assert_fail@plt+0x11300>
   22e7c:	ldr	r0, [r7, #8]
   22e80:	add	r6, r6, #1
   22e84:	add	r9, r9, #12
   22e88:	cmp	r0, r6
   22e8c:	bhi	22e1c <__assert_fail@plt+0x118c4>
   22e90:	ldr	sl, [sp, #16]
   22e94:	ldr	r7, [sp, #20]
   22e98:	clz	fp, fp
   22e9c:	mov	r2, #0
   22ea0:	ldrb	r3, [r4, #88]	; 0x58
   22ea4:	lsr	fp, fp, #5
   22ea8:	str	r2, [sp, #28]
   22eac:	ands	fp, fp, r3, lsr #2
   22eb0:	bne	2308c <__assert_fail@plt+0x11b34>
   22eb4:	ldr	r2, [r4, #24]
   22eb8:	mov	r0, r7
   22ebc:	ldr	r3, [r4, #52]	; 0x34
   22ec0:	ldr	r3, [r3, #12]
   22ec4:	ldr	r3, [r3, #28]
   22ec8:	add	r1, r3, r3, lsl #1
   22ecc:	str	r3, [r4, #72]	; 0x48
   22ed0:	add	r1, r2, r1, lsl #2
   22ed4:	bl	189dc <__assert_fail@plt+0x7484>
   22ed8:	cmp	r0, #0
   22edc:	mov	r8, r0
   22ee0:	str	r0, [sp, #32]
   22ee4:	bne	23004 <__assert_fail@plt+0x11aac>
   22ee8:	ldr	r3, [r4, #76]	; 0x4c
   22eec:	cmp	r3, #0
   22ef0:	ble	22fc4 <__assert_fail@plt+0x11a6c>
   22ef4:	ldr	r9, [sp, #44]	; 0x2c
   22ef8:	cmp	r9, #0
   22efc:	ble	22fc4 <__assert_fail@plt+0x11a6c>
   22f00:	mov	r6, r0
   22f04:	b	22f14 <__assert_fail@plt+0x119bc>
   22f08:	add	r6, r6, #1
   22f0c:	cmp	r9, r6
   22f10:	ble	22fc4 <__assert_fail@plt+0x11a6c>
   22f14:	ldr	r2, [sp, #48]	; 0x30
   22f18:	ldr	r0, [r4]
   22f1c:	ldr	r3, [r2, r6, lsl #2]
   22f20:	add	ip, r0, r3, lsl #3
   22f24:	ldrb	r1, [ip, #4]
   22f28:	cmp	r1, #4
   22f2c:	bne	22f08 <__assert_fail@plt+0x119b0>
   22f30:	sub	r2, r2, #4
   22f34:	mov	r1, #0
   22f38:	b	22f48 <__assert_fail@plt+0x119f0>
   22f3c:	add	r1, r1, #1
   22f40:	cmp	r9, r1
   22f44:	beq	22f08 <__assert_fail@plt+0x119b0>
   22f48:	ldr	lr, [r2, #4]!
   22f4c:	add	sl, r0, lr, lsl #3
   22f50:	ldrb	sl, [sl, #4]
   22f54:	cmp	sl, #9
   22f58:	bne	22f3c <__assert_fail@plt+0x119e4>
   22f5c:	ldr	sl, [r0, lr, lsl #3]
   22f60:	ldr	lr, [ip]
   22f64:	cmp	sl, lr
   22f68:	bne	22f3c <__assert_fail@plt+0x119e4>
   22f6c:	ldr	r2, [r4, #20]
   22f70:	add	r3, r3, r3, lsl #1
   22f74:	add	r1, sp, #48	; 0x30
   22f78:	mov	r0, r9
   22f7c:	add	r3, r2, r3, lsl #2
   22f80:	ldr	r3, [r3, #8]
   22f84:	ldr	sl, [r3]
   22f88:	mov	r2, sl
   22f8c:	bl	17db4 <__assert_fail@plt+0x685c>
   22f90:	cmp	r0, #0
   22f94:	bne	22f08 <__assert_fail@plt+0x119b0>
   22f98:	ldr	r1, [r4, #24]
   22f9c:	add	sl, sl, sl, lsl #1
   22fa0:	mov	r0, r7
   22fa4:	add	r1, r1, sl, lsl #2
   22fa8:	bl	19678 <__assert_fail@plt+0x8120>
   22fac:	cmp	r0, #0
   22fb0:	bne	232c8 <__assert_fail@plt+0x11d70>
   22fb4:	ldr	r9, [sp, #44]	; 0x2c
   22fb8:	mov	r6, #1
   22fbc:	cmp	r9, r6
   22fc0:	bgt	22f14 <__assert_fail@plt+0x119bc>
   22fc4:	mov	r3, #0
   22fc8:	mov	r2, r7
   22fcc:	mov	r1, r4
   22fd0:	add	r0, sp, #32
   22fd4:	bl	18bd0 <__assert_fail@plt+0x7678>
   22fd8:	cmp	r0, #0
   22fdc:	str	r0, [r4, #36]	; 0x24
   22fe0:	beq	2315c <__assert_fail@plt+0x11c04>
   22fe4:	ldrsb	r3, [r0, #52]	; 0x34
   22fe8:	cmp	r3, #0
   22fec:	strge	r0, [r4, #40]	; 0x28
   22ff0:	strge	r0, [r4, #44]	; 0x2c
   22ff4:	strge	r0, [r4, #48]	; 0x30
   22ff8:	blt	230f8 <__assert_fail@plt+0x11ba0>
   22ffc:	ldr	r0, [sp, #48]	; 0x30
   23000:	bl	13b9c <__assert_fail@plt+0x2644>
   23004:	ldr	r6, [r5]
   23008:	str	r8, [sp, #28]
   2300c:	ldr	r0, [r6, #56]	; 0x38
   23010:	cmp	r0, #0
   23014:	beq	23028 <__assert_fail@plt+0x11ad0>
   23018:	ldr	r7, [r0]
   2301c:	bl	13b9c <__assert_fail@plt+0x2644>
   23020:	subs	r0, r7, #0
   23024:	bne	23018 <__assert_fail@plt+0x11ac0>
   23028:	mov	r7, #0
   2302c:	mov	r3, #31
   23030:	ldr	r0, [r6, #16]
   23034:	str	r7, [r6, #52]	; 0x34
   23038:	str	r7, [r6, #56]	; 0x38
   2303c:	str	r3, [r6, #64]	; 0x40
   23040:	bl	13b9c <__assert_fail@plt+0x2644>
   23044:	add	r0, sp, #52	; 0x34
   23048:	str	r7, [r6, #16]
   2304c:	bl	174f0 <__assert_fail@plt+0x5f98>
   23050:	ldr	r0, [sp, #28]
   23054:	cmp	r0, r7
   23058:	beq	22c48 <__assert_fail@plt+0x116f0>
   2305c:	ldr	r3, [sp, #8]
   23060:	cmp	r3, #0
   23064:	bne	228b0 <__assert_fail@plt+0x11358>
   23068:	b	22c30 <__assert_fail@plt+0x116d8>
   2306c:	mov	r3, #12
   23070:	ldr	r6, [r5]
   23074:	str	r3, [sp, #28]
   23078:	b	22860 <__assert_fail@plt+0x11308>
   2307c:	add	r0, sp, #52	; 0x34
   23080:	bl	16860 <__assert_fail@plt+0x5308>
   23084:	str	fp, [sp, #28]
   23088:	b	22928 <__assert_fail@plt+0x113d0>
   2308c:	ldr	r3, [r5, #20]
   23090:	cmp	r3, #0
   23094:	bne	22eb4 <__assert_fail@plt+0x1195c>
   23098:	ldr	r0, [r4, #8]
   2309c:	cmp	r0, #0
   230a0:	beq	23300 <__assert_fail@plt+0x11da8>
   230a4:	ldr	ip, [r4]
   230a8:	mov	r1, r3
   230ac:	ldr	lr, [sp, #12]
   230b0:	mov	r2, ip
   230b4:	ldrb	r3, [r2, #4]
   230b8:	sub	r3, r3, #1
   230bc:	cmp	r3, #11
   230c0:	ldrls	pc, [pc, r3, lsl #2]
   230c4:	b	23330 <__assert_fail@plt+0x11dd8>
   230c8:	andeq	r3, r2, r8, ror #4
   230cc:	andeq	r3, r2, r0, lsl #4
   230d0:	muleq	r2, ip, r2
   230d4:	andeq	r3, r2, r0, lsl #4
   230d8:	strdeq	r3, [r2], -ip
   230dc:			; <UNDEFINED> instruction: 0x00022eb4
   230e0:	andeq	r3, r2, r0, lsr r3
   230e4:	andeq	r3, r2, r0, lsl #4
   230e8:	andeq	r3, r2, r0, lsl #4
   230ec:	andeq	r3, r2, r0, lsl #4
   230f0:	andeq	r3, r2, r0, lsl #4
   230f4:	andeq	r3, r2, r8, ror r2
   230f8:	mov	r3, #1
   230fc:	mov	r2, r7
   23100:	mov	r1, r4
   23104:	add	r0, sp, #32
   23108:	bl	18bd0 <__assert_fail@plt+0x7678>
   2310c:	mov	r3, #2
   23110:	mov	r2, r7
   23114:	str	r0, [r4, #40]	; 0x28
   23118:	mov	r1, r4
   2311c:	add	r0, sp, #32
   23120:	bl	18bd0 <__assert_fail@plt+0x7678>
   23124:	mov	r3, #6
   23128:	mov	r2, r7
   2312c:	str	r0, [r4, #44]	; 0x2c
   23130:	mov	r1, r4
   23134:	add	r0, sp, #32
   23138:	bl	18bd0 <__assert_fail@plt+0x7678>
   2313c:	ldr	r3, [r4, #40]	; 0x28
   23140:	str	r0, [r4, #48]	; 0x30
   23144:	cmp	r3, #0
   23148:	beq	2315c <__assert_fail@plt+0x11c04>
   2314c:	ldr	r3, [r4, #44]	; 0x2c
   23150:	cmp	r0, #0
   23154:	cmpne	r3, #0
   23158:	bne	22ffc <__assert_fail@plt+0x11aa4>
   2315c:	ldr	r8, [sp, #32]
   23160:	b	23004 <__assert_fail@plt+0x11aac>
   23164:	add	r0, sp, #52	; 0x34
   23168:	bl	16fc0 <__assert_fail@plt+0x5a68>
   2316c:	mov	r3, #0
   23170:	str	r3, [sp, #28]
   23174:	b	22928 <__assert_fail@plt+0x113d0>
   23178:	mov	r0, r4
   2317c:	mov	r1, #160	; 0xa0
   23180:	bl	261cc <__assert_fail@plt+0x14c74>
   23184:	subs	r4, r0, #0
   23188:	beq	232ec <__assert_fail@plt+0x11d94>
   2318c:	mov	r3, #160	; 0xa0
   23190:	str	r4, [r5]
   23194:	str	r3, [r5, #4]
   23198:	b	225f8 <__assert_fail@plt+0x110a0>
   2319c:	mov	sl, r6
   231a0:	mov	r1, #1
   231a4:	b	22658 <__assert_fail@plt+0x11100>
   231a8:	cmp	r0, r8
   231ac:	beq	232f4 <__assert_fail@plt+0x11d9c>
   231b0:	mov	r2, #0
   231b4:	mov	r3, #0
   231b8:	add	r7, sp, #40	; 0x28
   231bc:	mov	ip, #2
   231c0:	add	sl, r6, #56	; 0x38
   231c4:	add	r6, r6, #64	; 0x40
   231c8:	mov	r0, sl
   231cc:	mov	r1, r6
   231d0:	str	r7, [sp]
   231d4:	strd	r2, [sp, #40]	; 0x28
   231d8:	mov	r3, r8
   231dc:	mov	r2, r8
   231e0:	strb	ip, [sp, #44]	; 0x2c
   231e4:	bl	18520 <__assert_fail@plt+0x6fc8>
   231e8:	mov	lr, r0
   231ec:	b	229cc <__assert_fail@plt+0x11474>
   231f0:	mov	r3, #0
   231f4:	str	r3, [sp, #28]
   231f8:	b	22928 <__assert_fail@plt+0x113d0>
   231fc:	mov	r1, fp
   23200:	add	lr, lr, #1
   23204:	add	r2, r2, #8
   23208:	cmp	lr, r0
   2320c:	bne	230b4 <__assert_fail@plt+0x11b5c>
   23210:	orr	sl, sl, r1
   23214:	ands	sl, sl, #255	; 0xff
   23218:	moveq	r1, sl
   2321c:	beq	23304 <__assert_fail@plt+0x11dac>
   23220:	add	r2, ip, lr, lsl #3
   23224:	mov	r0, #7
   23228:	b	23240 <__assert_fail@plt+0x11ce8>
   2322c:	cmp	r3, #5
   23230:	strbeq	r0, [ip, #4]
   23234:	add	ip, ip, #8
   23238:	cmp	r2, ip
   2323c:	beq	23304 <__assert_fail@plt+0x11dac>
   23240:	ldrb	r3, [ip, #4]
   23244:	cmp	r3, #1
   23248:	bne	2322c <__assert_fail@plt+0x11cd4>
   2324c:	ldrsb	r3, [ip]
   23250:	cmp	r3, #0
   23254:	bge	23234 <__assert_fail@plt+0x11cdc>
   23258:	ldrb	r3, [ip, #6]
   2325c:	bfc	r3, #5, #1
   23260:	strb	r3, [ip, #6]
   23264:	b	23234 <__assert_fail@plt+0x11cdc>
   23268:	ldrsb	r3, [r2]
   2326c:	cmp	r3, #0
   23270:	movlt	sl, fp
   23274:	b	23200 <__assert_fail@plt+0x11ca8>
   23278:	ldr	r3, [r2]
   2327c:	cmp	r3, #32
   23280:	beq	23200 <__assert_fail@plt+0x11ca8>
   23284:	bls	232d0 <__assert_fail@plt+0x11d78>
   23288:	cmp	r3, #64	; 0x40
   2328c:	beq	23200 <__assert_fail@plt+0x11ca8>
   23290:	cmp	r3, #128	; 0x80
   23294:	beq	23200 <__assert_fail@plt+0x11ca8>
   23298:	b	22eb4 <__assert_fail@plt+0x1195c>
   2329c:	ldr	r6, [r2]
   232a0:	add	r3, r6, #12
   232a4:	add	r6, r6, #28
   232a8:	ldr	r8, [r3, #4]!
   232ac:	cmp	r8, #0
   232b0:	bne	22eb4 <__assert_fail@plt+0x1195c>
   232b4:	cmp	r6, r3
   232b8:	bne	232a8 <__assert_fail@plt+0x11d50>
   232bc:	b	23200 <__assert_fail@plt+0x11ca8>
   232c0:	ldr	r0, [sp, #12]
   232c4:	b	22858 <__assert_fail@plt+0x11300>
   232c8:	mov	r8, r0
   232cc:	b	23004 <__assert_fail@plt+0x11aac>
   232d0:	cmp	r3, #16
   232d4:	beq	23200 <__assert_fail@plt+0x11ca8>
   232d8:	b	22eb4 <__assert_fail@plt+0x1195c>
   232dc:	mov	r1, r3
   232e0:	b	22918 <__assert_fail@plt+0x113c0>
   232e4:	ldr	r0, [r6, #132]	; 0x84
   232e8:	b	22b34 <__assert_fail@plt+0x115dc>
   232ec:	mov	r0, #12
   232f0:	b	22c48 <__assert_fail@plt+0x116f0>
   232f4:	ldr	r6, [r5]
   232f8:	str	r0, [r4, #52]	; 0x34
   232fc:	b	22860 <__assert_fail@plt+0x11308>
   23300:	mov	r1, r0
   23304:	ldrb	r2, [r4, #88]	; 0x58
   23308:	mov	r0, #1
   2330c:	ldr	r3, [r4, #76]	; 0x4c
   23310:	str	r0, [r4, #92]	; 0x5c
   23314:	and	r2, r2, #251	; 0xfb
   23318:	cmp	r3, #0
   2331c:	movle	r3, r1
   23320:	orrgt	r3, r1, #1
   23324:	bfi	r2, r3, #1, #1
   23328:	strb	r2, [r4, #88]	; 0x58
   2332c:	b	22eb4 <__assert_fail@plt+0x1195c>
   23330:	bl	11534 <abort@plt>
   23334:	movw	r3, #33772	; 0x83ec
   23338:	movt	r3, #3
   2333c:	str	r4, [sp, #-8]!
   23340:	ldr	r3, [r3]
   23344:	str	lr, [sp, #4]
   23348:	mov	lr, r2
   2334c:	mov	r2, r1
   23350:	ldrb	ip, [lr, #28]
   23354:	mov	r1, r0
   23358:	mov	r0, lr
   2335c:	ubfx	r4, r3, #25, #1
   23360:	bfi	ip, r4, #4, #1
   23364:	mvn	ip, ip, lsl #25
   23368:	mvn	ip, ip, lsr #25
   2336c:	strb	ip, [lr, #28]
   23370:	bl	225a0 <__assert_fail@plt+0x11048>
   23374:	subs	r3, r0, #0
   23378:	beq	233ac <__assert_fail@plt+0x11e54>
   2337c:	movw	r1, #30636	; 0x77ac
   23380:	movt	r1, #2
   23384:	ldr	r4, [sp]
   23388:	add	r3, r1, r3, lsl #2
   2338c:	add	r1, r1, #32
   23390:	mov	r2, #5
   23394:	mov	r0, #0
   23398:	ldr	lr, [sp, #4]
   2339c:	add	sp, sp, #8
   233a0:	ldr	r3, [r3, #416]	; 0x1a0
   233a4:	add	r1, r1, r3
   233a8:	b	112d0 <dcgettext@plt>
   233ac:	ldr	r4, [sp]
   233b0:	add	sp, sp, #4
   233b4:	pop	{pc}		; (ldr pc, [sp], #4)
   233b8:	movw	r3, #33772	; 0x83ec
   233bc:	movt	r3, #3
   233c0:	ldr	r2, [r3]
   233c4:	str	r0, [r3]
   233c8:	mov	r0, r2
   233cc:	bx	lr
   233d0:	strd	r4, [sp, #-16]!
   233d4:	mov	r2, #256	; 0x100
   233d8:	mov	r4, r0
   233dc:	ldr	r5, [r0]
   233e0:	mov	r1, #0
   233e4:	str	r6, [sp, #8]
   233e8:	ldr	r6, [r0, #16]
   233ec:	str	lr, [sp, #12]
   233f0:	mov	r0, r6
   233f4:	bl	1145c <memset@plt>
   233f8:	ldr	r1, [r5, #36]	; 0x24
   233fc:	mov	r3, r6
   23400:	mov	r0, r4
   23404:	add	r2, r1, #12
   23408:	add	r1, r1, #8
   2340c:	bl	1c1d4 <__assert_fail@plt+0xac7c>
   23410:	ldr	r3, [r5, #36]	; 0x24
   23414:	ldr	r0, [r5, #40]	; 0x28
   23418:	cmp	r3, r0
   2341c:	beq	23438 <__assert_fail@plt+0x11ee0>
   23420:	add	r2, r0, #12
   23424:	add	r1, r0, #8
   23428:	mov	r3, r6
   2342c:	mov	r0, r4
   23430:	bl	1c1d4 <__assert_fail@plt+0xac7c>
   23434:	ldr	r0, [r5, #36]	; 0x24
   23438:	ldr	r1, [r5, #44]	; 0x2c
   2343c:	cmp	r1, r0
   23440:	beq	2345c <__assert_fail@plt+0x11f04>
   23444:	add	r2, r1, #12
   23448:	mov	r0, r4
   2344c:	mov	r3, r6
   23450:	add	r1, r1, #8
   23454:	bl	1c1d4 <__assert_fail@plt+0xac7c>
   23458:	ldr	r0, [r5, #36]	; 0x24
   2345c:	ldr	r1, [r5, #48]	; 0x30
   23460:	cmp	r1, r0
   23464:	beq	2347c <__assert_fail@plt+0x11f24>
   23468:	add	r2, r1, #12
   2346c:	mov	r3, r6
   23470:	add	r1, r1, #8
   23474:	mov	r0, r4
   23478:	bl	1c1d4 <__assert_fail@plt+0xac7c>
   2347c:	ldrb	r3, [r4, #28]
   23480:	mov	r0, #0
   23484:	ldr	r6, [sp, #8]
   23488:	orr	r3, r3, #8
   2348c:	strb	r3, [r4, #28]
   23490:	ldrd	r4, [sp]
   23494:	add	sp, sp, #12
   23498:	pop	{pc}		; (ldr pc, [sp], #4)
   2349c:	cmp	r3, r2
   234a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   234a4:	strd	r6, [sp, #8]
   234a8:	strd	r8, [sp, #16]
   234ac:	strd	sl, [sp, #24]
   234b0:	str	lr, [sp, #32]
   234b4:	sub	sp, sp, #52	; 0x34
   234b8:	movle	lr, #0
   234bc:	movgt	lr, #1
   234c0:	ldr	ip, [sp, #88]	; 0x58
   234c4:	orrs	lr, lr, r3, lsr #31
   234c8:	ldrb	lr, [sp, #100]	; 0x64
   234cc:	ldr	r8, [sp, #96]	; 0x60
   234d0:	add	r7, r3, ip
   234d4:	str	lr, [sp, #36]	; 0x24
   234d8:	ldr	lr, [r0]
   234dc:	str	lr, [sp, #28]
   234e0:	bne	237d4 <__assert_fail@plt+0x1227c>
   234e4:	cmp	r7, r2
   234e8:	mov	r4, r0
   234ec:	str	r2, [sp, #32]
   234f0:	mov	fp, r3
   234f4:	str	r1, [sp, #40]	; 0x28
   234f8:	bgt	23780 <__assert_fail@plt+0x12228>
   234fc:	cmp	ip, #0
   23500:	cmpge	fp, r7
   23504:	bgt	23780 <__assert_fail@plt+0x12228>
   23508:	cmp	r7, #0
   2350c:	blt	23788 <__assert_fail@plt+0x12230>
   23510:	cmp	fp, r7
   23514:	movgt	r2, #0
   23518:	movle	r2, #1
   2351c:	ands	r3, r2, ip, lsr #31
   23520:	bne	23788 <__assert_fail@plt+0x12230>
   23524:	movw	r2, #0
   23528:	movt	r2, #0
   2352c:	cmp	r2, #0
   23530:	mov	r5, #1
   23534:	moveq	r5, r2
   23538:	movw	r2, #0
   2353c:	movt	r2, #0
   23540:	mov	r0, #1
   23544:	cmp	r2, #0
   23548:	moveq	r0, r2
   2354c:	orr	r5, r5, r0
   23550:	ands	r5, r5, #255	; 0xff
   23554:	beq	23568 <__assert_fail@plt+0x12010>
   23558:	ldr	r3, [sp, #28]
   2355c:	mov	r5, #1
   23560:	add	r0, r3, #136	; 0x88
   23564:	bl	1124c <pthread_mutex_lock@plt>
   23568:	ldrb	r0, [r4, #28]
   2356c:	cmp	fp, r7
   23570:	ubfx	r3, r0, #5, #2
   23574:	str	r3, [sp, #44]	; 0x2c
   23578:	bge	23590 <__assert_fail@plt+0x12038>
   2357c:	ldr	r2, [r4, #16]
   23580:	cmp	r2, #0
   23584:	beq	23590 <__assert_fail@plt+0x12038>
   23588:	tst	r0, #8
   2358c:	beq	2372c <__assert_fail@plt+0x121d4>
   23590:	ubfx	r2, r0, #4, #1
   23594:	cmp	r8, #0
   23598:	orreq	r2, r2, #1
   2359c:	ands	r2, r2, #255	; 0xff
   235a0:	bne	23718 <__assert_fail@plt+0x121c0>
   235a4:	and	r0, r0, #6
   235a8:	ldr	ip, [r4, #24]
   235ac:	cmp	r0, #4
   235b0:	beq	237e4 <__assert_fail@plt+0x1228c>
   235b4:	add	sl, ip, #1
   235b8:	mov	r6, sl
   235bc:	lsl	r0, sl, #3
   235c0:	bl	26190 <__assert_fail@plt+0x14c38>
   235c4:	subs	r9, r0, #0
   235c8:	beq	237dc <__assert_fail@plt+0x12284>
   235cc:	mov	r3, fp
   235d0:	mov	r0, r4
   235d4:	str	sl, [sp, #8]
   235d8:	ldr	ip, [sp, #92]	; 0x5c
   235dc:	ldr	r2, [sp, #32]
   235e0:	ldr	r1, [sp, #40]	; 0x28
   235e4:	stm	sp, {r7, ip}
   235e8:	ldr	ip, [sp, #44]	; 0x2c
   235ec:	str	r9, [sp, #12]
   235f0:	str	ip, [sp, #16]
   235f4:	bl	1dd28 <__assert_fail@plt+0xc7d0>
   235f8:	cmp	r0, #0
   235fc:	beq	2364c <__assert_fail@plt+0x120f4>
   23600:	cmp	r0, #1
   23604:	mvneq	r4, #0
   23608:	beq	23610 <__assert_fail@plt+0x120b8>
   2360c:	mvn	r4, #1
   23610:	mov	r0, r9
   23614:	bl	13b9c <__assert_fail@plt+0x2644>
   23618:	cmp	r5, #0
   2361c:	beq	2362c <__assert_fail@plt+0x120d4>
   23620:	ldr	r3, [sp, #28]
   23624:	add	r0, r3, #136	; 0x88
   23628:	bl	11198 <pthread_mutex_unlock@plt>
   2362c:	mov	r0, r4
   23630:	add	sp, sp, #52	; 0x34
   23634:	ldrd	r4, [sp]
   23638:	ldrd	r6, [sp, #8]
   2363c:	ldrd	r8, [sp, #16]
   23640:	ldrd	sl, [sp, #24]
   23644:	add	sp, sp, #32
   23648:	pop	{pc}		; (ldr pc, [sp], #4)
   2364c:	cmp	r8, #0
   23650:	beq	236fc <__assert_fail@plt+0x121a4>
   23654:	ldrb	r7, [r4, #28]
   23658:	add	sl, r6, #1
   2365c:	ubfx	r7, r7, #1, #2
   23660:	cmp	r7, #0
   23664:	beq	2373c <__assert_fail@plt+0x121e4>
   23668:	cmp	r7, #1
   2366c:	movne	r7, #2
   23670:	beq	23810 <__assert_fail@plt+0x122b8>
   23674:	cmp	r6, #0
   23678:	ble	2385c <__assert_fail@plt+0x12304>
   2367c:	ldrd	r0, [r8, #4]
   23680:	add	lr, r9, r6, lsl #3
   23684:	mov	r3, r9
   23688:	mov	r2, r6
   2368c:	sub	r0, r0, #4
   23690:	sub	r1, r1, #4
   23694:	ldr	ip, [r3]
   23698:	add	r3, r3, #8
   2369c:	str	ip, [r0, #4]!
   236a0:	ldr	ip, [r3, #-4]
   236a4:	cmp	lr, r3
   236a8:	str	ip, [r1, #4]!
   236ac:	bne	23694 <__assert_fail@plt+0x1213c>
   236b0:	ldr	r3, [r8]
   236b4:	cmp	r3, r2
   236b8:	bls	236e4 <__assert_fail@plt+0x1218c>
   236bc:	ldr	ip, [r8, #4]
   236c0:	mvn	r3, #0
   236c4:	ldr	r0, [r8, #8]
   236c8:	str	r3, [r0, r2, lsl #2]
   236cc:	add	r6, r6, #1
   236d0:	str	r3, [ip, r2, lsl #2]
   236d4:	mov	r2, r6
   236d8:	ldr	r1, [r8]
   236dc:	cmp	r1, r6
   236e0:	bhi	236c8 <__assert_fail@plt+0x12170>
   236e4:	ldrb	r3, [r4, #28]
   236e8:	bfi	r3, r7, #1, #2
   236ec:	and	r2, r3, #6
   236f0:	cmp	r2, #0
   236f4:	strb	r3, [r4, #28]
   236f8:	beq	2360c <__assert_fail@plt+0x120b4>
   236fc:	ldr	r3, [sp, #36]	; 0x24
   23700:	ldr	r4, [r9]
   23704:	cmp	r3, #0
   23708:	beq	23610 <__assert_fail@plt+0x120b8>
   2370c:	ldr	r3, [r9, #4]
   23710:	sub	r4, r3, r4
   23714:	b	23610 <__assert_fail@plt+0x120b8>
   23718:	mov	sl, #1
   2371c:	mov	r0, #8
   23720:	mov	r6, sl
   23724:	mov	r8, #0
   23728:	b	235c0 <__assert_fail@plt+0x12068>
   2372c:	mov	r0, r4
   23730:	bl	233d0 <__assert_fail@plt+0x11e78>
   23734:	ldrb	r0, [r4, #28]
   23738:	b	23590 <__assert_fail@plt+0x12038>
   2373c:	lsl	r7, sl, #2
   23740:	mov	r0, r7
   23744:	bl	26190 <__assert_fail@plt+0x14c38>
   23748:	cmp	r0, #0
   2374c:	str	r0, [r8, #4]
   23750:	beq	23868 <__assert_fail@plt+0x12310>
   23754:	mov	r0, r7
   23758:	bl	26190 <__assert_fail@plt+0x14c38>
   2375c:	cmp	r0, #0
   23760:	mov	r7, r0
   23764:	str	r0, [r8, #8]
   23768:	movne	r7, #1
   2376c:	strne	sl, [r8]
   23770:	bne	23674 <__assert_fail@plt+0x1211c>
   23774:	ldr	r0, [r8, #4]
   23778:	bl	13b9c <__assert_fail@plt+0x2644>
   2377c:	b	236e4 <__assert_fail@plt+0x1218c>
   23780:	ldr	r7, [sp, #32]
   23784:	b	23524 <__assert_fail@plt+0x11fcc>
   23788:	movw	r2, #0
   2378c:	movt	r2, #0
   23790:	cmp	r2, #0
   23794:	mov	r5, #1
   23798:	moveq	r5, r2
   2379c:	movw	r2, #0
   237a0:	movt	r2, #0
   237a4:	mov	r1, #1
   237a8:	cmp	r2, #0
   237ac:	moveq	r1, r2
   237b0:	orr	r5, r5, r1
   237b4:	ands	r5, r5, #255	; 0xff
   237b8:	movne	r7, #0
   237bc:	bne	23558 <__assert_fail@plt+0x12000>
   237c0:	ldrb	r0, [r4, #28]
   237c4:	mov	r7, r5
   237c8:	ubfx	r3, r0, #5, #2
   237cc:	str	r3, [sp, #44]	; 0x2c
   237d0:	b	23590 <__assert_fail@plt+0x12038>
   237d4:	mvn	r4, #0
   237d8:	b	2362c <__assert_fail@plt+0x120d4>
   237dc:	mvn	r4, #1
   237e0:	b	23618 <__assert_fail@plt+0x120c0>
   237e4:	ldr	sl, [r8]
   237e8:	cmp	sl, ip
   237ec:	bhi	235b4 <__assert_fail@plt+0x1205c>
   237f0:	cmp	sl, #0
   237f4:	mov	r6, sl
   237f8:	bgt	235bc <__assert_fail@plt+0x12064>
   237fc:	mov	sl, #1
   23800:	mov	r8, r2
   23804:	mov	r6, sl
   23808:	mov	r0, #8
   2380c:	b	235c0 <__assert_fail@plt+0x12068>
   23810:	ldr	r3, [r8]
   23814:	cmp	r3, sl
   23818:	bcs	23674 <__assert_fail@plt+0x1211c>
   2381c:	lsl	fp, sl, #2
   23820:	ldr	r0, [r8, #4]
   23824:	mov	r1, fp
   23828:	bl	261cc <__assert_fail@plt+0x14c74>
   2382c:	subs	r2, r0, #0
   23830:	str	r2, [sp, #32]
   23834:	beq	23868 <__assert_fail@plt+0x12310>
   23838:	mov	r1, fp
   2383c:	ldr	r0, [r8, #8]
   23840:	bl	261cc <__assert_fail@plt+0x14c74>
   23844:	subs	fp, r0, #0
   23848:	ldr	r2, [sp, #32]
   2384c:	beq	23870 <__assert_fail@plt+0x12318>
   23850:	str	sl, [r8]
   23854:	stmib	r8, {r2, fp}
   23858:	b	23674 <__assert_fail@plt+0x1211c>
   2385c:	mov	r6, #0
   23860:	mov	r2, r6
   23864:	b	236b0 <__assert_fail@plt+0x12158>
   23868:	mov	r7, #0
   2386c:	b	236e4 <__assert_fail@plt+0x1218c>
   23870:	mov	r0, r2
   23874:	mov	r7, fp
   23878:	bl	13b9c <__assert_fail@plt+0x2644>
   2387c:	b	236e4 <__assert_fail@plt+0x1218c>
   23880:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23884:	strd	r6, [sp, #8]
   23888:	mov	r7, r3
   2388c:	strd	r8, [sp, #16]
   23890:	strd	sl, [sp, #24]
   23894:	str	lr, [sp, #32]
   23898:	sub	sp, sp, #28
   2389c:	ldr	r5, [sp, #64]	; 0x40
   238a0:	ldr	r6, [sp, #80]	; 0x50
   238a4:	ldrb	fp, [sp, #84]	; 0x54
   238a8:	orr	r3, r5, r2
   238ac:	orrs	r3, r3, r6
   238b0:	bmi	23960 <__assert_fail@plt+0x12408>
   238b4:	adds	r9, r2, r5
   238b8:	mov	r4, r2
   238bc:	bvs	23960 <__assert_fail@plt+0x12408>
   238c0:	cmp	r5, #0
   238c4:	mov	sl, r0
   238c8:	beq	23968 <__assert_fail@plt+0x12410>
   238cc:	cmp	r2, #0
   238d0:	str	r1, [sp, #20]
   238d4:	moveq	r8, r2
   238d8:	bne	2392c <__assert_fail@plt+0x123d4>
   238dc:	ldr	r3, [sp, #72]	; 0x48
   238e0:	mov	r2, r9
   238e4:	mov	r1, r7
   238e8:	mov	r0, sl
   238ec:	str	fp, [sp, #12]
   238f0:	ldr	ip, [sp, #76]	; 0x4c
   238f4:	stm	sp, {r3, r6, ip}
   238f8:	ldr	r3, [sp, #68]	; 0x44
   238fc:	bl	2349c <__assert_fail@plt+0x11f44>
   23900:	mov	r4, r0
   23904:	mov	r0, r8
   23908:	bl	13b9c <__assert_fail@plt+0x2644>
   2390c:	mov	r0, r4
   23910:	add	sp, sp, #28
   23914:	ldrd	r4, [sp]
   23918:	ldrd	r6, [sp, #8]
   2391c:	ldrd	r8, [sp, #16]
   23920:	ldrd	sl, [sp, #24]
   23924:	add	sp, sp, #32
   23928:	pop	{pc}		; (ldr pc, [sp], #4)
   2392c:	mov	r0, r9
   23930:	bl	26190 <__assert_fail@plt+0x14c38>
   23934:	subs	r8, r0, #0
   23938:	beq	23960 <__assert_fail@plt+0x12408>
   2393c:	mov	r2, r4
   23940:	ldr	r1, [sp, #20]
   23944:	bl	11264 <memcpy@plt>
   23948:	mov	r1, r7
   2394c:	mov	r2, r5
   23950:	add	r0, r8, r4
   23954:	mov	r7, r8
   23958:	bl	11264 <memcpy@plt>
   2395c:	b	238dc <__assert_fail@plt+0x12384>
   23960:	mvn	r4, #1
   23964:	b	2390c <__assert_fail@plt+0x123b4>
   23968:	mov	r7, r1
   2396c:	mov	r8, r5
   23970:	b	238dc <__assert_fail@plt+0x12384>
   23974:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23978:	mov	r4, r0
   2397c:	mov	r0, #0
   23980:	tst	r2, #1
   23984:	movw	r5, #45820	; 0xb2fc
   23988:	movt	r5, #3
   2398c:	movw	r3, #710	; 0x2c6
   23990:	movt	r3, #257	; 0x101
   23994:	strd	r6, [sp, #8]
   23998:	mov	r6, r2
   2399c:	str	r8, [sp, #16]
   239a0:	mov	r7, r1
   239a4:	movne	r8, r5
   239a8:	str	lr, [sp, #20]
   239ac:	moveq	r8, r3
   239b0:	str	r0, [r4]
   239b4:	str	r0, [r4, #4]
   239b8:	str	r0, [r4, #8]
   239bc:	mov	r0, #256	; 0x100
   239c0:	bl	26190 <__assert_fail@plt+0x14c38>
   239c4:	cmp	r0, #0
   239c8:	str	r0, [r4, #16]
   239cc:	beq	23a78 <__assert_fail@plt+0x12520>
   239d0:	lsl	r5, r6, #21
   239d4:	ands	r2, r6, #4
   239d8:	and	r5, r5, #4194304	; 0x400000
   239dc:	orr	r5, r5, r8
   239e0:	bne	23a50 <__assert_fail@plt+0x124f8>
   239e4:	ldrb	r3, [r4, #28]
   239e8:	ubfx	r6, r6, #3, #1
   239ec:	mov	r1, #0
   239f0:	mov	r0, r7
   239f4:	str	r1, [r4, #20]
   239f8:	bfi	r3, r2, #7, #1
   239fc:	bfi	r3, r6, #4, #1
   23a00:	strb	r3, [r4, #28]
   23a04:	bl	11414 <strlen@plt>
   23a08:	mov	r2, r0
   23a0c:	mov	r3, r5
   23a10:	mov	r1, r7
   23a14:	mov	r0, r4
   23a18:	bl	225a0 <__assert_fail@plt+0x11048>
   23a1c:	cmp	r0, #16
   23a20:	mov	r5, r0
   23a24:	beq	23a60 <__assert_fail@plt+0x12508>
   23a28:	cmp	r0, #0
   23a2c:	bne	23a64 <__assert_fail@plt+0x1250c>
   23a30:	mov	r0, r4
   23a34:	bl	233d0 <__assert_fail@plt+0x11e78>
   23a38:	mov	r0, r5
   23a3c:	ldrd	r4, [sp]
   23a40:	ldrd	r6, [sp, #8]
   23a44:	ldr	r8, [sp, #16]
   23a48:	add	sp, sp, #20
   23a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   23a50:	bic	r5, r5, #64	; 0x40
   23a54:	mov	r2, #1
   23a58:	orr	r5, r5, #256	; 0x100
   23a5c:	b	239e4 <__assert_fail@plt+0x1248c>
   23a60:	mov	r5, #8
   23a64:	ldr	r0, [r4, #16]
   23a68:	bl	13b9c <__assert_fail@plt+0x2644>
   23a6c:	mov	r3, #0
   23a70:	str	r3, [r4, #16]
   23a74:	b	23a38 <__assert_fail@plt+0x124e0>
   23a78:	mov	r5, #12
   23a7c:	b	23a38 <__assert_fail@plt+0x124e0>
   23a80:	cmp	r0, #16
   23a84:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23a88:	strd	r6, [sp, #8]
   23a8c:	str	r8, [sp, #16]
   23a90:	str	lr, [sp, #20]
   23a94:	bhi	23b10 <__assert_fail@plt+0x125b8>
   23a98:	movw	r1, #30636	; 0x77ac
   23a9c:	movt	r1, #2
   23aa0:	add	ip, r1, r0, lsl #2
   23aa4:	mov	r4, r3
   23aa8:	add	r1, r1, #32
   23aac:	mov	r6, r2
   23ab0:	mov	r0, #0
   23ab4:	ldr	r3, [ip, #416]	; 0x1a0
   23ab8:	mov	r2, #5
   23abc:	add	r1, r1, r3
   23ac0:	bl	112d0 <dcgettext@plt>
   23ac4:	mov	r7, r0
   23ac8:	bl	11414 <strlen@plt>
   23acc:	cmp	r4, #0
   23ad0:	add	r5, r0, #1
   23ad4:	beq	23af8 <__assert_fail@plt+0x125a0>
   23ad8:	cmp	r5, r4
   23adc:	mov	r1, r7
   23ae0:	subhi	r2, r4, #1
   23ae4:	movhi	r3, #0
   23ae8:	movls	r2, r5
   23aec:	mov	r0, r6
   23af0:	strbhi	r3, [r6, r2]
   23af4:	bl	11264 <memcpy@plt>
   23af8:	mov	r0, r5
   23afc:	ldrd	r4, [sp]
   23b00:	ldrd	r6, [sp, #8]
   23b04:	ldr	r8, [sp, #16]
   23b08:	add	sp, sp, #20
   23b0c:	pop	{pc}		; (ldr pc, [sp], #4)
   23b10:	bl	11534 <abort@plt>
   23b14:	strd	r4, [sp, #-16]!
   23b18:	mov	r4, r0
   23b1c:	ldr	r5, [r0]
   23b20:	str	r6, [sp, #8]
   23b24:	str	lr, [sp, #12]
   23b28:	cmp	r5, #0
   23b2c:	beq	23b74 <__assert_fail@plt+0x1261c>
   23b30:	movw	r2, #0
   23b34:	movt	r2, #0
   23b38:	cmp	r2, #0
   23b3c:	mov	r3, #1
   23b40:	moveq	r3, r2
   23b44:	movw	r2, #0
   23b48:	movt	r2, #0
   23b4c:	mov	r1, #1
   23b50:	cmp	r2, #0
   23b54:	moveq	r1, r2
   23b58:	orr	r3, r3, r1
   23b5c:	tst	r3, #1
   23b60:	beq	23b6c <__assert_fail@plt+0x12614>
   23b64:	add	r0, r5, #136	; 0x88
   23b68:	bl	11210 <pthread_mutex_destroy@plt>
   23b6c:	mov	r0, r5
   23b70:	bl	19240 <__assert_fail@plt+0x7ce8>
   23b74:	mov	r5, #0
   23b78:	ldr	r0, [r4, #16]
   23b7c:	str	r5, [r4]
   23b80:	str	r5, [r4, #4]
   23b84:	bl	13b9c <__assert_fail@plt+0x2644>
   23b88:	str	r5, [r4, #16]
   23b8c:	ldr	r0, [r4, #20]
   23b90:	bl	13b9c <__assert_fail@plt+0x2644>
   23b94:	ldr	r6, [sp, #8]
   23b98:	str	r5, [r4, #20]
   23b9c:	ldrd	r4, [sp]
   23ba0:	add	sp, sp, #12
   23ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   23ba8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23bac:	strd	r6, [sp, #8]
   23bb0:	strd	r8, [sp, #16]
   23bb4:	strd	sl, [sp, #24]
   23bb8:	str	lr, [sp, #32]
   23bbc:	sub	sp, sp, #36	; 0x24
   23bc0:	ldr	r6, [sp, #72]	; 0x48
   23bc4:	bics	ip, r6, #7
   23bc8:	movne	r0, #2
   23bcc:	bne	23c84 <__assert_fail@plt+0x1272c>
   23bd0:	ands	sl, r6, #4
   23bd4:	mov	r7, r3
   23bd8:	str	r2, [sp, #28]
   23bdc:	mov	r8, r1
   23be0:	mov	r5, r0
   23be4:	bne	23ca0 <__assert_fail@plt+0x12748>
   23be8:	mov	r0, r1
   23bec:	bl	11414 <strlen@plt>
   23bf0:	mov	r9, r0
   23bf4:	movw	r2, #0
   23bf8:	movt	r2, #0
   23bfc:	ldr	fp, [r5]
   23c00:	cmp	r2, #0
   23c04:	mov	r4, #1
   23c08:	moveq	r4, r2
   23c0c:	movw	r2, #0
   23c10:	movt	r2, #0
   23c14:	mov	r1, #1
   23c18:	cmp	r2, #0
   23c1c:	moveq	r1, r2
   23c20:	orr	r4, r4, r1
   23c24:	ands	r4, r4, #255	; 0xff
   23c28:	beq	23c34 <__assert_fail@plt+0x126dc>
   23c2c:	add	r0, fp, #136	; 0x88
   23c30:	bl	1124c <pthread_mutex_lock@plt>
   23c34:	ldrb	r2, [r5, #28]
   23c38:	tst	r2, #16
   23c3c:	beq	23cac <__assert_fail@plt+0x12754>
   23c40:	mov	ip, #0
   23c44:	mov	r0, r5
   23c48:	str	r9, [sp]
   23c4c:	mov	r3, sl
   23c50:	mov	r1, r8
   23c54:	mov	r2, r9
   23c58:	stmib	sp, {r9, ip}
   23c5c:	str	ip, [sp, #12]
   23c60:	str	r6, [sp, #16]
   23c64:	bl	1dd28 <__assert_fail@plt+0xc7d0>
   23c68:	mov	r5, r0
   23c6c:	cmp	r4, #0
   23c70:	beq	23c7c <__assert_fail@plt+0x12724>
   23c74:	add	r0, fp, #136	; 0x88
   23c78:	bl	11198 <pthread_mutex_unlock@plt>
   23c7c:	adds	r0, r5, #0
   23c80:	movne	r0, #1
   23c84:	add	sp, sp, #36	; 0x24
   23c88:	ldrd	r4, [sp]
   23c8c:	ldrd	r6, [sp, #8]
   23c90:	ldrd	r8, [sp, #16]
   23c94:	ldrd	sl, [sp, #24]
   23c98:	add	sp, sp, #32
   23c9c:	pop	{pc}		; (ldr pc, [sp], #4)
   23ca0:	ldr	sl, [r3]
   23ca4:	ldr	r9, [r3, #4]
   23ca8:	b	23bf4 <__assert_fail@plt+0x1269c>
   23cac:	ldr	ip, [sp, #28]
   23cb0:	mov	r0, r5
   23cb4:	mov	r3, sl
   23cb8:	mov	r1, r8
   23cbc:	mov	r2, r9
   23cc0:	str	r9, [sp]
   23cc4:	stmib	sp, {r9, ip}
   23cc8:	str	r7, [sp, #12]
   23ccc:	str	r6, [sp, #16]
   23cd0:	bl	1dd28 <__assert_fail@plt+0xc7d0>
   23cd4:	mov	r5, r0
   23cd8:	b	23c6c <__assert_fail@plt+0x12714>
   23cdc:	str	r4, [sp, #-8]!
   23ce0:	mov	r4, #0
   23ce4:	str	lr, [sp, #4]
   23ce8:	sub	sp, sp, #16
   23cec:	mov	lr, #1
   23cf0:	ldr	ip, [sp, #24]
   23cf4:	str	r4, [sp]
   23cf8:	stmib	sp, {r2, ip, lr}
   23cfc:	bl	2349c <__assert_fail@plt+0x11f44>
   23d00:	add	sp, sp, #16
   23d04:	ldr	r4, [sp]
   23d08:	add	sp, sp, #4
   23d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   23d10:	str	r4, [sp, #-8]!
   23d14:	mov	r4, #0
   23d18:	str	lr, [sp, #4]
   23d1c:	sub	sp, sp, #16
   23d20:	ldr	lr, [sp, #24]
   23d24:	ldr	ip, [sp, #28]
   23d28:	str	lr, [sp]
   23d2c:	str	r4, [sp, #12]
   23d30:	stmib	sp, {r2, ip}
   23d34:	bl	2349c <__assert_fail@plt+0x11f44>
   23d38:	add	sp, sp, #16
   23d3c:	ldr	r4, [sp]
   23d40:	add	sp, sp, #4
   23d44:	pop	{pc}		; (ldr pc, [sp], #4)
   23d48:	strd	r4, [sp, #-12]!
   23d4c:	mov	r4, #1
   23d50:	str	lr, [sp, #8]
   23d54:	sub	sp, sp, #28
   23d58:	mov	lr, #0
   23d5c:	ldr	ip, [sp, #40]	; 0x28
   23d60:	ldr	r5, [sp, #44]	; 0x2c
   23d64:	str	ip, [sp]
   23d68:	ldr	ip, [sp, #52]	; 0x34
   23d6c:	stmib	sp, {r5, lr}
   23d70:	ldr	lr, [sp, #48]	; 0x30
   23d74:	str	r4, [sp, #20]
   23d78:	str	lr, [sp, #12]
   23d7c:	str	ip, [sp, #16]
   23d80:	bl	23880 <__assert_fail@plt+0x12328>
   23d84:	add	sp, sp, #28
   23d88:	ldrd	r4, [sp]
   23d8c:	add	sp, sp, #8
   23d90:	pop	{pc}		; (ldr pc, [sp], #4)
   23d94:	str	r4, [sp, #-8]!
   23d98:	mov	r4, #0
   23d9c:	str	lr, [sp, #4]
   23da0:	sub	sp, sp, #24
   23da4:	ldr	lr, [sp, #32]
   23da8:	ldr	ip, [sp, #36]	; 0x24
   23dac:	str	lr, [sp]
   23db0:	str	r4, [sp, #20]
   23db4:	str	ip, [sp, #4]
   23db8:	ldr	r4, [sp, #40]	; 0x28
   23dbc:	ldr	lr, [sp, #44]	; 0x2c
   23dc0:	ldr	ip, [sp, #48]	; 0x30
   23dc4:	str	r4, [sp, #8]
   23dc8:	str	lr, [sp, #12]
   23dcc:	str	ip, [sp, #16]
   23dd0:	bl	23880 <__assert_fail@plt+0x12328>
   23dd4:	add	sp, sp, #24
   23dd8:	ldr	r4, [sp]
   23ddc:	add	sp, sp, #4
   23de0:	pop	{pc}		; (ldr pc, [sp], #4)
   23de4:	cmp	r2, #0
   23de8:	beq	23e10 <__assert_fail@plt+0x128b8>
   23dec:	ldrb	ip, [r0, #28]
   23df0:	push	{lr}		; (str lr, [sp, #-4]!)
   23df4:	mov	lr, #1
   23df8:	bfi	ip, lr, #1, #2
   23dfc:	strb	ip, [r0, #28]
   23e00:	strd	r2, [r1]
   23e04:	ldr	r3, [sp, #4]
   23e08:	str	r3, [r1, #8]
   23e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   23e10:	ldrb	r3, [r0, #28]
   23e14:	bfi	r3, r2, #1, #2
   23e18:	strb	r3, [r0, #28]
   23e1c:	str	r2, [r1]
   23e20:	str	r2, [r1, #4]
   23e24:	str	r2, [r1, #8]
   23e28:	bx	lr
   23e2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23e30:	mov	r5, #0
   23e34:	movt	r5, #32752	; 0x7ff0
   23e38:	mov	r4, r2
   23e3c:	strd	r6, [sp, #8]
   23e40:	mov	r7, r1
   23e44:	str	r8, [sp, #16]
   23e48:	mov	r8, r0
   23e4c:	str	lr, [sp, #20]
   23e50:	mov	r2, r4
   23e54:	mov	r1, r7
   23e58:	mov	r0, r8
   23e5c:	bl	11204 <read@plt>
   23e60:	subs	r6, r0, #0
   23e64:	bge	23e98 <__assert_fail@plt+0x12940>
   23e68:	bl	1142c <__errno_location@plt>
   23e6c:	ldr	r3, [r0]
   23e70:	cmp	r3, #4
   23e74:	beq	23e50 <__assert_fail@plt+0x128f8>
   23e78:	cmp	r4, r5
   23e7c:	mov	r4, r5
   23e80:	movls	r2, #0
   23e84:	movhi	r2, #1
   23e88:	cmp	r3, #22
   23e8c:	movne	r2, #0
   23e90:	cmp	r2, #0
   23e94:	bne	23e50 <__assert_fail@plt+0x128f8>
   23e98:	mov	r0, r6
   23e9c:	ldrd	r4, [sp]
   23ea0:	ldrd	r6, [sp, #8]
   23ea4:	ldr	r8, [sp, #16]
   23ea8:	add	sp, sp, #20
   23eac:	pop	{pc}		; (ldr pc, [sp], #4)
   23eb0:	mov	r2, #3
   23eb4:	mov	r1, #0
   23eb8:	b	26378 <__assert_fail@plt+0x14e20>
   23ebc:	cmp	r1, #0
   23ec0:	strd	r4, [sp, #-16]!
   23ec4:	mov	ip, r3
   23ec8:	str	r6, [sp, #8]
   23ecc:	mov	r4, r0
   23ed0:	str	lr, [sp, #12]
   23ed4:	sub	sp, sp, #32
   23ed8:	ldr	r5, [sp, #48]	; 0x30
   23edc:	ldr	r6, [sp, #52]	; 0x34
   23ee0:	beq	24024 <__assert_fail@plt+0x12acc>
   23ee4:	mov	r3, r1
   23ee8:	mov	r1, #1
   23eec:	stm	sp, {r2, ip}
   23ef0:	movw	r2, #31224	; 0x79f8
   23ef4:	movt	r2, #2
   23ef8:	bl	1148c <__fprintf_chk@plt>
   23efc:	mov	r2, #5
   23f00:	movw	r1, #31244	; 0x7a0c
   23f04:	movt	r1, #2
   23f08:	mov	r0, #0
   23f0c:	bl	112d0 <dcgettext@plt>
   23f10:	movw	ip, #2022	; 0x7e6
   23f14:	mov	r3, r0
   23f18:	mov	r1, #1
   23f1c:	movw	r2, #31972	; 0x7ce4
   23f20:	movt	r2, #2
   23f24:	mov	r0, r4
   23f28:	str	ip, [sp]
   23f2c:	bl	1148c <__fprintf_chk@plt>
   23f30:	mov	r1, r4
   23f34:	mov	r0, #10
   23f38:	bl	112c4 <fputc_unlocked@plt>
   23f3c:	mov	r2, #5
   23f40:	movw	r1, #31248	; 0x7a10
   23f44:	movt	r1, #2
   23f48:	mov	r0, #0
   23f4c:	bl	112d0 <dcgettext@plt>
   23f50:	mov	r2, r0
   23f54:	mov	r1, #1
   23f58:	movw	r3, #31420	; 0x7abc
   23f5c:	movt	r3, #2
   23f60:	mov	r0, r4
   23f64:	bl	1148c <__fprintf_chk@plt>
   23f68:	mov	r1, r4
   23f6c:	mov	r0, #10
   23f70:	bl	112c4 <fputc_unlocked@plt>
   23f74:	cmp	r6, #9
   23f78:	ldrls	pc, [pc, r6, lsl #2]
   23f7c:	b	24290 <__assert_fail@plt+0x12d38>
   23f80:	andeq	r4, r2, r0, lsl r0
   23f84:	andeq	r4, r2, r0, asr #32
   23f88:	andeq	r4, r2, ip, ror r0
   23f8c:	strheq	r4, [r2], -ip
   23f90:	andeq	r4, r2, r4, lsl #2
   23f94:	andeq	r4, r2, ip, lsr r1
   23f98:	andeq	r4, r2, r4, lsl #3
   23f9c:	ldrdeq	r4, [r2], -r8
   23fa0:	andeq	r4, r2, r0, lsr r2
   23fa4:	andeq	r3, r2, r8, lsr #31
   23fa8:	movw	r1, #31724	; 0x7bec
   23fac:	movt	r1, #2
   23fb0:	mov	r2, #5
   23fb4:	mov	r0, #0
   23fb8:	bl	112d0 <dcgettext@plt>
   23fbc:	ldr	lr, [r5, #4]
   23fc0:	mov	r2, r0
   23fc4:	mov	r1, #1
   23fc8:	mov	r0, r4
   23fcc:	ldr	r3, [r5, #8]
   23fd0:	ldr	ip, [r5, #32]
   23fd4:	str	lr, [sp]
   23fd8:	ldr	lr, [r5, #12]
   23fdc:	str	ip, [sp, #28]
   23fe0:	ldr	ip, [r5, #28]
   23fe4:	str	r3, [sp, #4]
   23fe8:	ldr	r3, [r5, #16]
   23fec:	str	lr, [sp, #8]
   23ff0:	ldr	lr, [r5, #20]
   23ff4:	str	ip, [sp, #24]
   23ff8:	ldr	ip, [r5, #24]
   23ffc:	str	r3, [sp, #12]
   24000:	ldr	r3, [r5]
   24004:	str	lr, [sp, #16]
   24008:	str	ip, [sp, #20]
   2400c:	bl	1148c <__fprintf_chk@plt>
   24010:	add	sp, sp, #32
   24014:	ldrd	r4, [sp]
   24018:	ldr	r6, [sp, #8]
   2401c:	add	sp, sp, #12
   24020:	pop	{pc}		; (ldr pc, [sp], #4)
   24024:	mov	r3, r2
   24028:	mov	r1, #1
   2402c:	str	ip, [sp]
   24030:	movw	r2, #31236	; 0x7a04
   24034:	movt	r2, #2
   24038:	bl	1148c <__fprintf_chk@plt>
   2403c:	b	23efc <__assert_fail@plt+0x129a4>
   24040:	mov	r2, #5
   24044:	movw	r1, #31456	; 0x7ae0
   24048:	movt	r1, #2
   2404c:	mov	r0, #0
   24050:	bl	112d0 <dcgettext@plt>
   24054:	ldr	r3, [r5]
   24058:	mov	r2, r0
   2405c:	mov	r1, #1
   24060:	mov	r0, r4
   24064:	add	sp, sp, #32
   24068:	ldrd	r4, [sp]
   2406c:	ldr	r6, [sp, #8]
   24070:	ldr	lr, [sp, #12]
   24074:	add	sp, sp, #16
   24078:	b	1148c <__fprintf_chk@plt>
   2407c:	mov	r2, #5
   24080:	movw	r1, #31472	; 0x7af0
   24084:	movt	r1, #2
   24088:	mov	r0, #0
   2408c:	bl	112d0 <dcgettext@plt>
   24090:	ldm	r5, {r3, ip}
   24094:	mov	r2, r0
   24098:	mov	r1, #1
   2409c:	mov	r0, r4
   240a0:	str	ip, [sp, #48]	; 0x30
   240a4:	add	sp, sp, #32
   240a8:	ldrd	r4, [sp]
   240ac:	ldr	r6, [sp, #8]
   240b0:	ldr	lr, [sp, #12]
   240b4:	add	sp, sp, #16
   240b8:	b	1148c <__fprintf_chk@plt>
   240bc:	mov	r2, #5
   240c0:	movw	r1, #31496	; 0x7b08
   240c4:	movt	r1, #2
   240c8:	mov	r0, #0
   240cc:	bl	112d0 <dcgettext@plt>
   240d0:	ldm	r5, {r3, lr}
   240d4:	mov	r2, r0
   240d8:	mov	r1, #1
   240dc:	mov	r0, r4
   240e0:	ldr	ip, [r5, #8]
   240e4:	str	lr, [sp, #48]	; 0x30
   240e8:	str	ip, [sp, #52]	; 0x34
   240ec:	add	sp, sp, #32
   240f0:	ldrd	r4, [sp]
   240f4:	ldr	r6, [sp, #8]
   240f8:	ldr	lr, [sp, #12]
   240fc:	add	sp, sp, #16
   24100:	b	1148c <__fprintf_chk@plt>
   24104:	mov	r2, #5
   24108:	movw	r1, #31524	; 0x7b24
   2410c:	movt	r1, #2
   24110:	mov	r0, #0
   24114:	bl	112d0 <dcgettext@plt>
   24118:	ldmib	r5, {r3, ip, lr}
   2411c:	mov	r2, r0
   24120:	mov	r1, #1
   24124:	mov	r0, r4
   24128:	str	r3, [sp]
   2412c:	ldr	r3, [r5]
   24130:	stmib	sp, {ip, lr}
   24134:	bl	1148c <__fprintf_chk@plt>
   24138:	b	24010 <__assert_fail@plt+0x12ab8>
   2413c:	mov	r2, #5
   24140:	movw	r1, #31556	; 0x7b44
   24144:	movt	r1, #2
   24148:	mov	r0, #0
   2414c:	bl	112d0 <dcgettext@plt>
   24150:	ldmib	r5, {ip, lr}
   24154:	mov	r2, r0
   24158:	mov	r1, #1
   2415c:	mov	r0, r4
   24160:	ldr	r3, [r5, #16]
   24164:	str	ip, [sp]
   24168:	ldr	ip, [r5, #12]
   2416c:	str	r3, [sp, #12]
   24170:	ldr	r3, [r5]
   24174:	str	lr, [sp, #4]
   24178:	str	ip, [sp, #8]
   2417c:	bl	1148c <__fprintf_chk@plt>
   24180:	b	24010 <__assert_fail@plt+0x12ab8>
   24184:	mov	r2, #5
   24188:	movw	r1, #31592	; 0x7b68
   2418c:	movt	r1, #2
   24190:	mov	r0, #0
   24194:	bl	112d0 <dcgettext@plt>
   24198:	ldr	lr, [r5, #4]
   2419c:	mov	r2, r0
   241a0:	mov	r1, #1
   241a4:	mov	r0, r4
   241a8:	ldr	r3, [r5, #8]
   241ac:	ldr	ip, [r5, #20]
   241b0:	str	lr, [sp]
   241b4:	ldr	lr, [r5, #12]
   241b8:	str	ip, [sp, #16]
   241bc:	ldr	ip, [r5, #16]
   241c0:	str	r3, [sp, #4]
   241c4:	ldr	r3, [r5]
   241c8:	str	lr, [sp, #8]
   241cc:	str	ip, [sp, #12]
   241d0:	bl	1148c <__fprintf_chk@plt>
   241d4:	b	24010 <__assert_fail@plt+0x12ab8>
   241d8:	mov	r2, #5
   241dc:	movw	r1, #31632	; 0x7b90
   241e0:	movt	r1, #2
   241e4:	mov	r0, #0
   241e8:	bl	112d0 <dcgettext@plt>
   241ec:	ldmib	r5, {r3, ip}
   241f0:	mov	r2, r0
   241f4:	mov	r1, #1
   241f8:	mov	r0, r4
   241fc:	ldr	lr, [r5, #24]
   24200:	str	r3, [sp]
   24204:	ldr	r3, [r5, #12]
   24208:	str	lr, [sp, #20]
   2420c:	ldr	lr, [r5, #20]
   24210:	str	ip, [sp, #4]
   24214:	ldr	ip, [r5, #16]
   24218:	str	r3, [sp, #8]
   2421c:	ldr	r3, [r5]
   24220:	str	ip, [sp, #12]
   24224:	str	lr, [sp, #16]
   24228:	bl	1148c <__fprintf_chk@plt>
   2422c:	b	24010 <__assert_fail@plt+0x12ab8>
   24230:	mov	r2, #5
   24234:	movw	r1, #31676	; 0x7bbc
   24238:	movt	r1, #2
   2423c:	mov	r0, #0
   24240:	bl	112d0 <dcgettext@plt>
   24244:	ldmib	r5, {ip, lr}
   24248:	mov	r2, r0
   2424c:	mov	r1, #1
   24250:	mov	r0, r4
   24254:	ldr	r3, [r5, #28]
   24258:	str	ip, [sp]
   2425c:	ldr	ip, [r5, #12]
   24260:	str	r3, [sp, #24]
   24264:	ldr	r3, [r5, #24]
   24268:	str	lr, [sp, #4]
   2426c:	ldr	lr, [r5, #16]
   24270:	str	ip, [sp, #8]
   24274:	ldr	ip, [r5, #20]
   24278:	str	r3, [sp, #20]
   2427c:	ldr	r3, [r5]
   24280:	str	lr, [sp, #12]
   24284:	str	ip, [sp, #16]
   24288:	bl	1148c <__fprintf_chk@plt>
   2428c:	b	24010 <__assert_fail@plt+0x12ab8>
   24290:	movw	r1, #31776	; 0x7c20
   24294:	movt	r1, #2
   24298:	b	23fb0 <__assert_fail@plt+0x12a58>
   2429c:	strd	r4, [sp, #-12]!
   242a0:	str	lr, [sp, #8]
   242a4:	sub	sp, sp, #12
   242a8:	ldr	r5, [sp, #24]
   242ac:	ldr	ip, [r5]
   242b0:	cmp	ip, #0
   242b4:	beq	242d0 <__assert_fail@plt+0x12d78>
   242b8:	mov	lr, r5
   242bc:	mov	ip, #0
   242c0:	ldr	r4, [lr, #4]!
   242c4:	add	ip, ip, #1
   242c8:	cmp	r4, #0
   242cc:	bne	242c0 <__assert_fail@plt+0x12d68>
   242d0:	stm	sp, {r5, ip}
   242d4:	bl	23ebc <__assert_fail@plt+0x12964>
   242d8:	add	sp, sp, #12
   242dc:	ldrd	r4, [sp]
   242e0:	add	sp, sp, #8
   242e4:	pop	{pc}		; (ldr pc, [sp], #4)
   242e8:	strd	r4, [sp, #-16]!
   242ec:	mov	ip, #0
   242f0:	str	r6, [sp, #8]
   242f4:	str	lr, [sp, #12]
   242f8:	sub	sp, sp, #48	; 0x30
   242fc:	ldr	r5, [sp, #64]	; 0x40
   24300:	add	r6, sp, #8
   24304:	mov	r4, r6
   24308:	ldr	lr, [r5], #4
   2430c:	cmp	lr, #0
   24310:	str	lr, [r4], #4
   24314:	beq	24324 <__assert_fail@plt+0x12dcc>
   24318:	add	ip, ip, #1
   2431c:	cmp	ip, #10
   24320:	bne	24308 <__assert_fail@plt+0x12db0>
   24324:	stm	sp, {r6, ip}
   24328:	bl	23ebc <__assert_fail@plt+0x12964>
   2432c:	add	sp, sp, #48	; 0x30
   24330:	ldrd	r4, [sp]
   24334:	ldr	r6, [sp, #8]
   24338:	add	sp, sp, #12
   2433c:	pop	{pc}		; (ldr pc, [sp], #4)
   24340:	push	{r3}		; (str r3, [sp, #-4]!)
   24344:	mov	ip, #0
   24348:	strd	r4, [sp, #-12]!
   2434c:	str	lr, [sp, #8]
   24350:	sub	sp, sp, #56	; 0x38
   24354:	add	r3, sp, #72	; 0x48
   24358:	add	r5, sp, #16
   2435c:	mov	r4, r3
   24360:	mov	lr, r5
   24364:	str	r3, [sp, #12]
   24368:	ldr	r3, [r4], #4
   2436c:	cmp	r3, #0
   24370:	str	r3, [lr], #4
   24374:	beq	24384 <__assert_fail@plt+0x12e2c>
   24378:	add	ip, ip, #1
   2437c:	cmp	ip, #10
   24380:	bne	24368 <__assert_fail@plt+0x12e10>
   24384:	ldr	r3, [sp, #68]	; 0x44
   24388:	stm	sp, {r5, ip}
   2438c:	bl	23ebc <__assert_fail@plt+0x12964>
   24390:	add	sp, sp, #56	; 0x38
   24394:	ldrd	r4, [sp]
   24398:	ldr	lr, [sp, #8]
   2439c:	add	sp, sp, #12
   243a0:	add	sp, sp, #4
   243a4:	bx	lr
   243a8:	movw	r3, #33212	; 0x81bc
   243ac:	movt	r3, #3
   243b0:	str	r4, [sp, #-8]!
   243b4:	mov	r0, #10
   243b8:	ldr	r1, [r3]
   243bc:	str	lr, [sp, #4]
   243c0:	bl	112c4 <fputc_unlocked@plt>
   243c4:	mov	r2, #5
   243c8:	movw	r1, #31836	; 0x7c5c
   243cc:	movt	r1, #2
   243d0:	mov	r0, #0
   243d4:	bl	112d0 <dcgettext@plt>
   243d8:	mov	r1, r0
   243dc:	movw	r2, #31856	; 0x7c70
   243e0:	movt	r2, #2
   243e4:	mov	r0, #1
   243e8:	bl	11474 <__printf_chk@plt>
   243ec:	mov	r2, #5
   243f0:	movw	r1, #31880	; 0x7c88
   243f4:	movt	r1, #2
   243f8:	mov	r0, #0
   243fc:	bl	112d0 <dcgettext@plt>
   24400:	mov	r1, r0
   24404:	movw	r3, #29032	; 0x7168
   24408:	movt	r3, #2
   2440c:	movw	r2, #29072	; 0x7190
   24410:	movt	r2, #2
   24414:	mov	r0, #1
   24418:	bl	11474 <__printf_chk@plt>
   2441c:	mov	r2, #5
   24420:	movw	r1, #31900	; 0x7c9c
   24424:	movt	r1, #2
   24428:	mov	r0, #0
   2442c:	bl	112d0 <dcgettext@plt>
   24430:	mov	r1, r0
   24434:	movw	r2, #31940	; 0x7cc4
   24438:	movt	r2, #2
   2443c:	mov	r0, #1
   24440:	ldr	r4, [sp]
   24444:	ldr	lr, [sp, #4]
   24448:	add	sp, sp, #8
   2444c:	b	11474 <__printf_chk@plt>
   24450:	str	r4, [sp, #-8]!
   24454:	str	lr, [sp, #4]
   24458:	bl	26190 <__assert_fail@plt+0x14c38>
   2445c:	cmp	r0, #0
   24460:	beq	24470 <__assert_fail@plt+0x12f18>
   24464:	ldr	r4, [sp]
   24468:	add	sp, sp, #4
   2446c:	pop	{pc}		; (ldr pc, [sp], #4)
   24470:	bl	12db8 <__assert_fail@plt+0x1860>
   24474:	str	r4, [sp, #-8]!
   24478:	str	lr, [sp, #4]
   2447c:	bl	26190 <__assert_fail@plt+0x14c38>
   24480:	cmp	r0, #0
   24484:	beq	24494 <__assert_fail@plt+0x12f3c>
   24488:	ldr	r4, [sp]
   2448c:	add	sp, sp, #4
   24490:	pop	{pc}		; (ldr pc, [sp], #4)
   24494:	bl	12db8 <__assert_fail@plt+0x1860>
   24498:	str	r4, [sp, #-8]!
   2449c:	str	lr, [sp, #4]
   244a0:	bl	26190 <__assert_fail@plt+0x14c38>
   244a4:	cmp	r0, #0
   244a8:	beq	244b8 <__assert_fail@plt+0x12f60>
   244ac:	ldr	r4, [sp]
   244b0:	add	sp, sp, #4
   244b4:	pop	{pc}		; (ldr pc, [sp], #4)
   244b8:	bl	12db8 <__assert_fail@plt+0x1860>
   244bc:	strd	r4, [sp, #-16]!
   244c0:	mov	r5, r0
   244c4:	mov	r4, r1
   244c8:	str	r6, [sp, #8]
   244cc:	str	lr, [sp, #12]
   244d0:	bl	261cc <__assert_fail@plt+0x14c74>
   244d4:	cmp	r0, #0
   244d8:	beq	244ec <__assert_fail@plt+0x12f94>
   244dc:	ldrd	r4, [sp]
   244e0:	ldr	r6, [sp, #8]
   244e4:	add	sp, sp, #12
   244e8:	pop	{pc}		; (ldr pc, [sp], #4)
   244ec:	adds	r4, r4, #0
   244f0:	movne	r4, #1
   244f4:	cmp	r5, #0
   244f8:	moveq	r4, #1
   244fc:	cmp	r4, #0
   24500:	beq	244dc <__assert_fail@plt+0x12f84>
   24504:	bl	12db8 <__assert_fail@plt+0x1860>
   24508:	cmp	r1, #0
   2450c:	orreq	r1, r1, #1
   24510:	str	r4, [sp, #-8]!
   24514:	str	lr, [sp, #4]
   24518:	bl	261cc <__assert_fail@plt+0x14c74>
   2451c:	cmp	r0, #0
   24520:	beq	24530 <__assert_fail@plt+0x12fd8>
   24524:	ldr	r4, [sp]
   24528:	add	sp, sp, #4
   2452c:	pop	{pc}		; (ldr pc, [sp], #4)
   24530:	bl	12db8 <__assert_fail@plt+0x1860>
   24534:	strd	r4, [sp, #-16]!
   24538:	mov	r4, r0
   2453c:	mov	r5, r2
   24540:	str	r6, [sp, #8]
   24544:	mov	r6, r1
   24548:	str	lr, [sp, #12]
   2454c:	bl	2661c <__assert_fail@plt+0x150c4>
   24550:	cmp	r0, #0
   24554:	beq	24568 <__assert_fail@plt+0x13010>
   24558:	ldrd	r4, [sp]
   2455c:	ldr	r6, [sp, #8]
   24560:	add	sp, sp, #12
   24564:	pop	{pc}		; (ldr pc, [sp], #4)
   24568:	cmp	r4, #0
   2456c:	beq	2457c <__assert_fail@plt+0x13024>
   24570:	cmp	r6, #0
   24574:	cmpne	r5, #0
   24578:	beq	24558 <__assert_fail@plt+0x13000>
   2457c:	bl	12db8 <__assert_fail@plt+0x1860>
   24580:	b	24534 <__assert_fail@plt+0x12fdc>
   24584:	cmp	r2, #0
   24588:	cmpne	r1, #0
   2458c:	str	r4, [sp, #-8]!
   24590:	moveq	r2, #1
   24594:	str	lr, [sp, #4]
   24598:	moveq	r1, r2
   2459c:	bl	2661c <__assert_fail@plt+0x150c4>
   245a0:	cmp	r0, #0
   245a4:	beq	245b4 <__assert_fail@plt+0x1305c>
   245a8:	ldr	r4, [sp]
   245ac:	add	sp, sp, #4
   245b0:	pop	{pc}		; (ldr pc, [sp], #4)
   245b4:	bl	12db8 <__assert_fail@plt+0x1860>
   245b8:	mov	r2, r1
   245bc:	mov	r1, r0
   245c0:	mov	r0, #0
   245c4:	b	24534 <__assert_fail@plt+0x12fdc>
   245c8:	mov	r2, r1
   245cc:	mov	r1, r0
   245d0:	mov	r0, #0
   245d4:	b	24584 <__assert_fail@plt+0x1302c>
   245d8:	cmp	r0, #0
   245dc:	strd	r4, [sp, #-16]!
   245e0:	mov	r5, r1
   245e4:	ldr	r4, [r1]
   245e8:	str	r6, [sp, #8]
   245ec:	str	lr, [sp, #12]
   245f0:	beq	24620 <__assert_fail@plt+0x130c8>
   245f4:	lsr	r3, r4, #1
   245f8:	add	r3, r3, #1
   245fc:	adds	r4, r4, r3
   24600:	bcs	2463c <__assert_fail@plt+0x130e4>
   24604:	mov	r1, r4
   24608:	bl	24534 <__assert_fail@plt+0x12fdc>
   2460c:	ldr	r6, [sp, #8]
   24610:	str	r4, [r5]
   24614:	ldrd	r4, [sp]
   24618:	add	sp, sp, #12
   2461c:	pop	{pc}		; (ldr pc, [sp], #4)
   24620:	cmp	r4, #0
   24624:	bne	24604 <__assert_fail@plt+0x130ac>
   24628:	mov	r4, #64	; 0x40
   2462c:	udiv	r4, r4, r2
   24630:	cmp	r2, #64	; 0x40
   24634:	addhi	r4, r4, #1
   24638:	b	24604 <__assert_fail@plt+0x130ac>
   2463c:	bl	12db8 <__assert_fail@plt+0x1860>
   24640:	mov	r2, #1
   24644:	b	245d8 <__assert_fail@plt+0x13080>
   24648:	ldr	ip, [r1]
   2464c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   24650:	mov	r5, r1
   24654:	strd	r6, [sp, #8]
   24658:	str	lr, [sp, #28]
   2465c:	strd	r8, [sp, #16]
   24660:	asr	lr, ip, #1
   24664:	ldr	r8, [sp, #32]
   24668:	str	sl, [sp, #24]
   2466c:	adds	r4, ip, lr
   24670:	mvn	lr, r3
   24674:	lsr	lr, lr, #31
   24678:	mvnvs	r4, #-2147483648	; 0x80000000
   2467c:	cmp	r3, r4
   24680:	movge	r1, #0
   24684:	andlt	r1, lr, #1
   24688:	cmp	r1, #0
   2468c:	movne	r4, r3
   24690:	smull	r6, r7, r4, r8
   24694:	cmp	r7, r6, asr #31
   24698:	bne	24720 <__assert_fail@plt+0x131c8>
   2469c:	cmp	r6, #63	; 0x3f
   246a0:	mov	r1, r6
   246a4:	ble	24708 <__assert_fail@plt+0x131b0>
   246a8:	cmp	r0, #0
   246ac:	sub	r6, r4, ip
   246b0:	streq	r0, [r5]
   246b4:	cmp	r6, r2
   246b8:	bge	246e8 <__assert_fail@plt+0x13190>
   246bc:	adds	r4, ip, r2
   246c0:	bvs	2471c <__assert_fail@plt+0x131c4>
   246c4:	cmp	r4, r3
   246c8:	movle	r3, #0
   246cc:	andgt	r3, lr, #1
   246d0:	cmp	r3, #0
   246d4:	bne	2471c <__assert_fail@plt+0x131c4>
   246d8:	smull	r8, r9, r4, r8
   246dc:	cmp	r9, r8, asr #31
   246e0:	mov	r1, r8
   246e4:	bne	2471c <__assert_fail@plt+0x131c4>
   246e8:	bl	244bc <__assert_fail@plt+0x12f64>
   246ec:	ldrd	r6, [sp, #8]
   246f0:	ldrd	r8, [sp, #16]
   246f4:	ldr	sl, [sp, #24]
   246f8:	str	r4, [r5]
   246fc:	ldrd	r4, [sp]
   24700:	add	sp, sp, #28
   24704:	pop	{pc}		; (ldr pc, [sp], #4)
   24708:	mov	r6, #64	; 0x40
   2470c:	sdiv	r4, r6, r8
   24710:	mls	r1, r8, r4, r6
   24714:	sub	r1, r6, r1
   24718:	b	246a8 <__assert_fail@plt+0x13150>
   2471c:	bl	12db8 <__assert_fail@plt+0x1860>
   24720:	mvn	r6, #-2147483648	; 0x80000000
   24724:	b	2470c <__assert_fail@plt+0x131b4>
   24728:	mov	r1, #1
   2472c:	str	r4, [sp, #-8]!
   24730:	str	lr, [sp, #4]
   24734:	bl	2611c <__assert_fail@plt+0x14bc4>
   24738:	cmp	r0, #0
   2473c:	beq	2474c <__assert_fail@plt+0x131f4>
   24740:	ldr	r4, [sp]
   24744:	add	sp, sp, #4
   24748:	pop	{pc}		; (ldr pc, [sp], #4)
   2474c:	bl	12db8 <__assert_fail@plt+0x1860>
   24750:	mov	r1, #1
   24754:	str	r4, [sp, #-8]!
   24758:	str	lr, [sp, #4]
   2475c:	bl	2611c <__assert_fail@plt+0x14bc4>
   24760:	cmp	r0, #0
   24764:	beq	24774 <__assert_fail@plt+0x1321c>
   24768:	ldr	r4, [sp]
   2476c:	add	sp, sp, #4
   24770:	pop	{pc}		; (ldr pc, [sp], #4)
   24774:	bl	12db8 <__assert_fail@plt+0x1860>
   24778:	str	r4, [sp, #-8]!
   2477c:	str	lr, [sp, #4]
   24780:	bl	2611c <__assert_fail@plt+0x14bc4>
   24784:	cmp	r0, #0
   24788:	beq	24798 <__assert_fail@plt+0x13240>
   2478c:	ldr	r4, [sp]
   24790:	add	sp, sp, #4
   24794:	pop	{pc}		; (ldr pc, [sp], #4)
   24798:	bl	12db8 <__assert_fail@plt+0x1860>
   2479c:	str	r4, [sp, #-8]!
   247a0:	str	lr, [sp, #4]
   247a4:	bl	2611c <__assert_fail@plt+0x14bc4>
   247a8:	cmp	r0, #0
   247ac:	beq	247bc <__assert_fail@plt+0x13264>
   247b0:	ldr	r4, [sp]
   247b4:	add	sp, sp, #4
   247b8:	pop	{pc}		; (ldr pc, [sp], #4)
   247bc:	bl	12db8 <__assert_fail@plt+0x1860>
   247c0:	strd	r4, [sp, #-16]!
   247c4:	mov	r4, r1
   247c8:	str	r6, [sp, #8]
   247cc:	mov	r6, r0
   247d0:	mov	r0, r1
   247d4:	str	lr, [sp, #12]
   247d8:	bl	26190 <__assert_fail@plt+0x14c38>
   247dc:	subs	r5, r0, #0
   247e0:	beq	24804 <__assert_fail@plt+0x132ac>
   247e4:	mov	r2, r4
   247e8:	mov	r1, r6
   247ec:	bl	11264 <memcpy@plt>
   247f0:	mov	r0, r5
   247f4:	ldrd	r4, [sp]
   247f8:	ldr	r6, [sp, #8]
   247fc:	add	sp, sp, #12
   24800:	pop	{pc}		; (ldr pc, [sp], #4)
   24804:	bl	12db8 <__assert_fail@plt+0x1860>
   24808:	strd	r4, [sp, #-16]!
   2480c:	mov	r4, r1
   24810:	str	r6, [sp, #8]
   24814:	mov	r6, r0
   24818:	mov	r0, r1
   2481c:	str	lr, [sp, #12]
   24820:	bl	26190 <__assert_fail@plt+0x14c38>
   24824:	subs	r5, r0, #0
   24828:	beq	2484c <__assert_fail@plt+0x132f4>
   2482c:	mov	r2, r4
   24830:	mov	r1, r6
   24834:	bl	11264 <memcpy@plt>
   24838:	mov	r0, r5
   2483c:	ldrd	r4, [sp]
   24840:	ldr	r6, [sp, #8]
   24844:	add	sp, sp, #12
   24848:	pop	{pc}		; (ldr pc, [sp], #4)
   2484c:	bl	12db8 <__assert_fail@plt+0x1860>
   24850:	strd	r4, [sp, #-16]!
   24854:	mov	r4, r1
   24858:	str	r6, [sp, #8]
   2485c:	mov	r6, r0
   24860:	add	r0, r1, #1
   24864:	str	lr, [sp, #12]
   24868:	bl	26190 <__assert_fail@plt+0x14c38>
   2486c:	subs	r5, r0, #0
   24870:	beq	2489c <__assert_fail@plt+0x13344>
   24874:	mov	r3, #0
   24878:	mov	r1, r6
   2487c:	mov	r2, r4
   24880:	strb	r3, [r5, r4]
   24884:	bl	11264 <memcpy@plt>
   24888:	mov	r0, r5
   2488c:	ldrd	r4, [sp]
   24890:	ldr	r6, [sp, #8]
   24894:	add	sp, sp, #12
   24898:	pop	{pc}		; (ldr pc, [sp], #4)
   2489c:	bl	12db8 <__assert_fail@plt+0x1860>
   248a0:	str	r4, [sp, #-8]!
   248a4:	mov	r4, r0
   248a8:	str	lr, [sp, #4]
   248ac:	bl	11414 <strlen@plt>
   248b0:	add	r1, r0, #1
   248b4:	mov	r0, r4
   248b8:	ldr	r4, [sp]
   248bc:	ldr	lr, [sp, #4]
   248c0:	add	sp, sp, #8
   248c4:	b	247c0 <__assert_fail@plt+0x13268>
   248c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   248cc:	strd	r6, [sp, #8]
   248d0:	mov	r6, r2
   248d4:	mov	r7, r3
   248d8:	str	r8, [sp, #16]
   248dc:	mov	r2, r1
   248e0:	mov	r1, #0
   248e4:	str	lr, [sp, #20]
   248e8:	sub	sp, sp, #16
   248ec:	mov	r8, r0
   248f0:	ldr	ip, [sp, #48]	; 0x30
   248f4:	add	r3, sp, #8
   248f8:	str	ip, [sp]
   248fc:	bl	24a38 <__assert_fail@plt+0x134e0>
   24900:	subs	r4, r0, #0
   24904:	bne	24954 <__assert_fail@plt+0x133fc>
   24908:	ldrd	r4, [sp, #8]
   2490c:	ldrd	r0, [sp, #40]	; 0x28
   24910:	cmp	r4, r6
   24914:	sbcs	r3, r5, r7
   24918:	movlt	r3, #1
   2491c:	movge	r3, #0
   24920:	cmp	r0, r4
   24924:	sbcs	r2, r1, r5
   24928:	orrlt	r3, r3, #1
   2492c:	cmp	r3, #0
   24930:	bne	249d4 <__assert_fail@plt+0x1347c>
   24934:	mov	r0, r4
   24938:	mov	r1, r5
   2493c:	add	sp, sp, #16
   24940:	ldrd	r4, [sp]
   24944:	ldrd	r6, [sp, #8]
   24948:	ldr	r8, [sp, #16]
   2494c:	add	sp, sp, #20
   24950:	pop	{pc}		; (ldr pc, [sp], #4)
   24954:	bl	1142c <__errno_location@plt>
   24958:	cmp	r4, #1
   2495c:	moveq	r3, #75	; 0x4b
   24960:	moveq	r4, r3
   24964:	streq	r3, [r0]
   24968:	beq	249c4 <__assert_fail@plt+0x1346c>
   2496c:	cmp	r4, #3
   24970:	beq	249b8 <__assert_fail@plt+0x13460>
   24974:	ldr	r3, [sp, #56]	; 0x38
   24978:	ldr	r4, [r0]
   2497c:	cmp	r3, #0
   24980:	bne	2498c <__assert_fail@plt+0x13434>
   24984:	mov	r3, #1
   24988:	str	r3, [sp, #56]	; 0x38
   2498c:	cmp	r4, #22
   24990:	moveq	r4, #0
   24994:	mov	r0, r8
   24998:	bl	1609c <__assert_fail@plt+0x4b44>
   2499c:	movw	r2, #30352	; 0x7690
   249a0:	movt	r2, #2
   249a4:	str	r0, [sp]
   249a8:	mov	r1, r4
   249ac:	ldr	r3, [sp, #52]	; 0x34
   249b0:	ldr	r0, [sp, #56]	; 0x38
   249b4:	bl	11384 <error@plt>
   249b8:	mov	r3, #0
   249bc:	mov	r4, r3
   249c0:	str	r3, [r0]
   249c4:	ldr	r3, [sp, #56]	; 0x38
   249c8:	cmp	r3, #0
   249cc:	bne	24994 <__assert_fail@plt+0x1343c>
   249d0:	b	24984 <__assert_fail@plt+0x1342c>
   249d4:	bl	1142c <__errno_location@plt>
   249d8:	cmp	r4, #1073741824	; 0x40000000
   249dc:	sbcs	r3, r5, #0
   249e0:	bge	24a08 <__assert_fail@plt+0x134b0>
   249e4:	mov	r2, #-1073741824	; 0xc0000000
   249e8:	mvn	r3, #0
   249ec:	cmp	r4, r2
   249f0:	sbcs	r3, r5, r3
   249f4:	blt	24a08 <__assert_fail@plt+0x134b0>
   249f8:	mov	r3, #34	; 0x22
   249fc:	mov	r4, r3
   24a00:	str	r3, [r0]
   24a04:	b	249c4 <__assert_fail@plt+0x1346c>
   24a08:	mov	r3, #75	; 0x4b
   24a0c:	str	r3, [r0]
   24a10:	ldr	r3, [sp, #56]	; 0x38
   24a14:	cmp	r3, #0
   24a18:	movne	r4, #75	; 0x4b
   24a1c:	bne	24994 <__assert_fail@plt+0x1343c>
   24a20:	mov	r3, #1
   24a24:	mov	r4, #75	; 0x4b
   24a28:	str	r3, [sp, #56]	; 0x38
   24a2c:	b	24994 <__assert_fail@plt+0x1343c>
   24a30:	mov	r1, #10
   24a34:	b	248c8 <__assert_fail@plt+0x13370>
   24a38:	cmp	r2, #36	; 0x24
   24a3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   24a40:	strd	r6, [sp, #8]
   24a44:	strd	r8, [sp, #16]
   24a48:	strd	sl, [sp, #24]
   24a4c:	str	lr, [sp, #32]
   24a50:	sub	sp, sp, #44	; 0x2c
   24a54:	bhi	25640 <__assert_fail@plt+0x140e8>
   24a58:	cmp	r1, #0
   24a5c:	mov	r5, r1
   24a60:	mov	r6, r2
   24a64:	addeq	r5, sp, #36	; 0x24
   24a68:	mov	sl, r0
   24a6c:	mov	r7, r3
   24a70:	bl	1142c <__errno_location@plt>
   24a74:	mov	fp, r0
   24a78:	mov	r4, #0
   24a7c:	mov	r2, r6
   24a80:	mov	r3, r4
   24a84:	mov	r1, r5
   24a88:	mov	r0, sl
   24a8c:	str	r4, [fp]
   24a90:	bl	114f8 <__strtoll_internal@plt>
   24a94:	ldr	r6, [r5]
   24a98:	mov	r8, r0
   24a9c:	mov	r9, r1
   24aa0:	cmp	r6, sl
   24aa4:	beq	24afc <__assert_fail@plt+0x135a4>
   24aa8:	ldr	r4, [fp]
   24aac:	cmp	r4, #0
   24ab0:	beq	24ac0 <__assert_fail@plt+0x13568>
   24ab4:	cmp	r4, #34	; 0x22
   24ab8:	bne	24c00 <__assert_fail@plt+0x136a8>
   24abc:	mov	r4, #1
   24ac0:	ldr	r3, [sp, #80]	; 0x50
   24ac4:	cmp	r3, #0
   24ac8:	beq	24ad8 <__assert_fail@plt+0x13580>
   24acc:	ldrb	sl, [r6]
   24ad0:	cmp	sl, #0
   24ad4:	bne	24d04 <__assert_fail@plt+0x137ac>
   24ad8:	strd	r8, [r7]
   24adc:	mov	r0, r4
   24ae0:	add	sp, sp, #44	; 0x2c
   24ae4:	ldrd	r4, [sp]
   24ae8:	ldrd	r6, [sp, #8]
   24aec:	ldrd	r8, [sp, #16]
   24af0:	ldrd	sl, [sp, #24]
   24af4:	add	sp, sp, #32
   24af8:	pop	{pc}		; (ldr pc, [sp], #4)
   24afc:	ldr	r3, [sp, #80]	; 0x50
   24b00:	cmp	r3, r4
   24b04:	beq	24c00 <__assert_fail@plt+0x136a8>
   24b08:	ldrb	sl, [sl]
   24b0c:	cmp	sl, r4
   24b10:	beq	24c00 <__assert_fail@plt+0x136a8>
   24b14:	mov	r1, sl
   24b18:	mov	r0, r3
   24b1c:	bl	11420 <strchr@plt>
   24b20:	cmp	r0, r4
   24b24:	movne	r8, #1
   24b28:	movne	r9, #0
   24b2c:	beq	24c00 <__assert_fail@plt+0x136a8>
   24b30:	sub	fp, sl, #69	; 0x45
   24b34:	cmp	fp, #47	; 0x2f
   24b38:	ldrls	pc, [pc, fp, lsl #2]
   24b3c:	b	24d20 <__assert_fail@plt+0x137c8>
   24b40:	andeq	r4, r2, r8, lsl #24
   24b44:	andeq	r4, r2, r0, lsr #26
   24b48:	andeq	r4, r2, r8, lsl #24
   24b4c:	andeq	r4, r2, r0, lsr #26
   24b50:	andeq	r4, r2, r0, lsr #26
   24b54:	andeq	r4, r2, r0, lsr #26
   24b58:	andeq	r4, r2, r8, lsl #24
   24b5c:	andeq	r4, r2, r0, lsr #26
   24b60:	andeq	r4, r2, r8, lsl #24
   24b64:	andeq	r4, r2, r0, lsr #26
   24b68:	andeq	r4, r2, r0, lsr #26
   24b6c:	andeq	r4, r2, r8, lsl #24
   24b70:	andeq	r4, r2, r0, lsr #26
   24b74:	andeq	r4, r2, r0, lsr #26
   24b78:	andeq	r4, r2, r0, lsr #26
   24b7c:	andeq	r4, r2, r8, lsl #24
   24b80:	andeq	r4, r2, r0, lsr #26
   24b84:	andeq	r4, r2, r0, lsr #26
   24b88:	andeq	r4, r2, r0, lsr #26
   24b8c:	andeq	r4, r2, r0, lsr #26
   24b90:	andeq	r4, r2, r8, lsl #24
   24b94:	andeq	r4, r2, r8, lsl #24
   24b98:	andeq	r4, r2, r0, lsr #26
   24b9c:	andeq	r4, r2, r0, lsr #26
   24ba0:	andeq	r4, r2, r0, lsr #26
   24ba4:	andeq	r4, r2, r0, lsr #26
   24ba8:	andeq	r4, r2, r0, lsr #26
   24bac:	andeq	r4, r2, r0, lsr #26
   24bb0:	andeq	r4, r2, r0, lsr #26
   24bb4:	andeq	r4, r2, r0, lsr #26
   24bb8:	andeq	r4, r2, r0, lsr #26
   24bbc:	andeq	r4, r2, r0, lsr #26
   24bc0:	andeq	r4, r2, r0, lsr #26
   24bc4:	andeq	r4, r2, r0, lsr #26
   24bc8:	andeq	r4, r2, r8, lsl #24
   24bcc:	andeq	r4, r2, r0, lsr #26
   24bd0:	andeq	r4, r2, r0, lsr #26
   24bd4:	andeq	r4, r2, r0, lsr #26
   24bd8:	andeq	r4, r2, r8, lsl #24
   24bdc:	andeq	r4, r2, r0, lsr #26
   24be0:	andeq	r4, r2, r8, lsl #24
   24be4:	andeq	r4, r2, r0, lsr #26
   24be8:	andeq	r4, r2, r0, lsr #26
   24bec:	andeq	r4, r2, r0, lsr #26
   24bf0:	andeq	r4, r2, r0, lsr #26
   24bf4:	andeq	r4, r2, r0, lsr #26
   24bf8:	andeq	r4, r2, r0, lsr #26
   24bfc:	andeq	r4, r2, r8, lsl #24
   24c00:	mov	r4, #4
   24c04:	b	24adc <__assert_fail@plt+0x13584>
   24c08:	mov	r1, #48	; 0x30
   24c0c:	ldr	r0, [sp, #80]	; 0x50
   24c10:	bl	11420 <strchr@plt>
   24c14:	cmp	r0, #0
   24c18:	beq	24d20 <__assert_fail@plt+0x137c8>
   24c1c:	ldrb	r3, [r6, #1]
   24c20:	cmp	r3, #68	; 0x44
   24c24:	beq	252e8 <__assert_fail@plt+0x13d90>
   24c28:	cmp	r3, #105	; 0x69
   24c2c:	beq	25498 <__assert_fail@plt+0x13f40>
   24c30:	cmp	r3, #66	; 0x42
   24c34:	beq	252e8 <__assert_fail@plt+0x13d90>
   24c38:	cmp	fp, #47	; 0x2f
   24c3c:	ldrls	pc, [pc, fp, lsl #2]
   24c40:	b	24d18 <__assert_fail@plt+0x137c0>
   24c44:	andeq	r5, r2, r0, asr #4
   24c48:	andeq	r4, r2, r8, lsl sp
   24c4c:	andeq	r5, r2, r0, lsr r2
   24c50:	andeq	r4, r2, r8, lsl sp
   24c54:	andeq	r4, r2, r8, lsl sp
   24c58:	andeq	r4, r2, r8, lsl sp
   24c5c:	andeq	r5, r2, ip, lsr #5
   24c60:	andeq	r4, r2, r8, lsl sp
   24c64:	muleq	r2, ip, r2
   24c68:	andeq	r4, r2, r8, lsl sp
   24c6c:	andeq	r4, r2, r8, lsl sp
   24c70:	andeq	r5, r2, ip, ror #4
   24c74:	andeq	r4, r2, r8, lsl sp
   24c78:	andeq	r4, r2, r8, lsl sp
   24c7c:	andeq	r4, r2, r8, lsl sp
   24c80:	andeq	r5, r2, ip, asr r2
   24c84:	andeq	r4, r2, r8, lsl sp
   24c88:	andeq	r4, r2, r8, lsl sp
   24c8c:	andeq	r4, r2, r8, lsl sp
   24c90:	andeq	r4, r2, r8, lsl sp
   24c94:	andeq	r5, r2, ip, lsl #5
   24c98:	andeq	r5, r2, ip, ror r2
   24c9c:	andeq	r4, r2, r8, lsl sp
   24ca0:	andeq	r4, r2, r8, lsl sp
   24ca4:	andeq	r4, r2, r8, lsl sp
   24ca8:	andeq	r4, r2, r8, lsl sp
   24cac:	andeq	r4, r2, r8, lsl sp
   24cb0:	andeq	r4, r2, r8, lsl sp
   24cb4:	andeq	r4, r2, r8, lsl sp
   24cb8:	andeq	r4, r2, r0, lsl lr
   24cbc:	andeq	r5, r2, r0, asr r2
   24cc0:	andeq	r4, r2, r8, lsl sp
   24cc4:	andeq	r4, r2, r8, lsl sp
   24cc8:	andeq	r4, r2, r8, lsl sp
   24ccc:	andeq	r5, r2, r0, lsr r2
   24cd0:	andeq	r4, r2, r8, lsl sp
   24cd4:	andeq	r4, r2, r8, lsl sp
   24cd8:	andeq	r4, r2, r8, lsl sp
   24cdc:	andeq	r5, r2, ip, lsr #5
   24ce0:	andeq	r4, r2, r8, lsl sp
   24ce4:	muleq	r2, ip, r2
   24ce8:	andeq	r4, r2, r8, lsl sp
   24cec:	andeq	r4, r2, r8, lsl sp
   24cf0:	andeq	r4, r2, r8, lsl sp
   24cf4:	andeq	r4, r2, r8, lsl sp
   24cf8:	andeq	r4, r2, r8, lsl sp
   24cfc:	andeq	r4, r2, r8, lsl sp
   24d00:	andeq	r5, r2, ip, asr r2
   24d04:	mov	r1, sl
   24d08:	ldr	r0, [sp, #80]	; 0x50
   24d0c:	bl	11420 <strchr@plt>
   24d10:	cmp	r0, #0
   24d14:	bne	24b30 <__assert_fail@plt+0x135d8>
   24d18:	orr	r4, r4, #2
   24d1c:	b	24ad8 <__assert_fail@plt+0x13580>
   24d20:	mov	r3, #1
   24d24:	mov	fp, #1024	; 0x400
   24d28:	sub	sl, sl, #66	; 0x42
   24d2c:	cmp	sl, #53	; 0x35
   24d30:	ldrls	pc, [pc, sl, lsl #2]
   24d34:	b	24d18 <__assert_fail@plt+0x137c0>
   24d38:	andeq	r4, r2, ip, asr lr
   24d3c:	andeq	r4, r2, r8, lsl sp
   24d40:	andeq	r4, r2, r8, lsl sp
   24d44:	andeq	r5, r2, r8, asr #32
   24d48:	andeq	r4, r2, r8, lsl sp
   24d4c:	ldrdeq	r4, [r2], -r0
   24d50:	andeq	r4, r2, r8, lsl sp
   24d54:	andeq	r4, r2, r8, lsl sp
   24d58:	andeq	r4, r2, r8, lsl sp
   24d5c:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   24d60:	andeq	r4, r2, r8, lsl sp
   24d64:	andeq	r4, r2, r8, lsr pc
   24d68:	andeq	r4, r2, r8, lsl sp
   24d6c:	andeq	r4, r2, r8, lsl sp
   24d70:	andeq	r5, r2, r8, lsr r1
   24d74:	andeq	r4, r2, r8, lsl sp
   24d78:	andeq	r4, r2, r8, lsl sp
   24d7c:	andeq	r4, r2, r8, lsl sp
   24d80:	andeq	r5, r2, r0, asr #1
   24d84:	andeq	r4, r2, r8, lsl sp
   24d88:	andeq	r4, r2, r8, lsl sp
   24d8c:	andeq	r4, r2, r8, lsl sp
   24d90:	andeq	r4, r2, r8, lsl sp
   24d94:			; <UNDEFINED> instruction: 0x000251b0
   24d98:	andeq	r4, r2, r0, asr #29
   24d9c:	andeq	r4, r2, r8, lsl sp
   24da0:	andeq	r4, r2, r8, lsl sp
   24da4:	andeq	r4, r2, r8, lsl sp
   24da8:	andeq	r4, r2, r8, lsl sp
   24dac:	andeq	r4, r2, r8, lsl sp
   24db0:	andeq	r4, r2, r8, lsl sp
   24db4:	andeq	r4, r2, r8, lsl sp
   24db8:	andeq	r4, r2, r4, lsl lr
   24dbc:	andeq	r5, r2, r8, lsr #4
   24dc0:	andeq	r4, r2, r8, lsl sp
   24dc4:	andeq	r4, r2, r8, lsl sp
   24dc8:	andeq	r4, r2, r8, lsl sp
   24dcc:	ldrdeq	r4, [r2], -r0
   24dd0:	andeq	r4, r2, r8, lsl sp
   24dd4:	andeq	r4, r2, r8, lsl sp
   24dd8:	andeq	r4, r2, r8, lsl sp
   24ddc:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   24de0:	andeq	r4, r2, r8, lsl sp
   24de4:	andeq	r4, r2, r8, lsr pc
   24de8:	andeq	r4, r2, r8, lsl sp
   24dec:	andeq	r4, r2, r8, lsl sp
   24df0:	andeq	r4, r2, r8, lsl sp
   24df4:	andeq	r4, r2, r8, lsl sp
   24df8:	andeq	r4, r2, r8, lsl sp
   24dfc:	andeq	r4, r2, r8, lsl sp
   24e00:	andeq	r5, r2, r0, asr #1
   24e04:	andeq	r4, r2, r8, lsl sp
   24e08:	andeq	r4, r2, r8, lsl sp
   24e0c:	andeq	r4, r2, ip, ror lr
   24e10:	mov	r3, #1
   24e14:	cmp	r9, r8, asr #31
   24e18:	mov	ip, #0
   24e1c:	str	r3, [sp, #4]
   24e20:	bne	254b0 <__assert_fail@plt+0x13f58>
   24e24:	lsl	r3, r9, #9
   24e28:	lsl	r2, r8, #9
   24e2c:	orr	r3, r3, r8, lsr #23
   24e30:	cmp	ip, #0
   24e34:	bne	24ea4 <__assert_fail@plt+0x1394c>
   24e38:	mov	r8, r2
   24e3c:	mov	r9, r3
   24e40:	ldr	r2, [sp, #4]
   24e44:	add	r3, r6, r2
   24e48:	str	r3, [r5]
   24e4c:	ldrb	r3, [r6, r2]
   24e50:	cmp	r3, #0
   24e54:	beq	24ad8 <__assert_fail@plt+0x13580>
   24e58:	b	24d18 <__assert_fail@plt+0x137c0>
   24e5c:	cmp	r9, r8, asr #31
   24e60:	mov	ip, #0
   24e64:	str	r3, [sp, #4]
   24e68:	bne	254f8 <__assert_fail@plt+0x13fa0>
   24e6c:	lsl	r3, r9, #10
   24e70:	lsl	r2, r8, #10
   24e74:	orr	r3, r3, r8, lsr #22
   24e78:	b	24e30 <__assert_fail@plt+0x138d8>
   24e7c:	cmp	r9, r8, asr #31
   24e80:	mov	r1, #0
   24e84:	str	r3, [sp, #4]
   24e88:	bne	2557c <__assert_fail@plt+0x14024>
   24e8c:	adds	ip, r8, r8
   24e90:	adc	r3, r9, r9
   24e94:	cmp	r1, #0
   24e98:	moveq	r8, ip
   24e9c:	moveq	r9, r3
   24ea0:	beq	24e40 <__assert_fail@plt+0x138e8>
   24ea4:	cmp	r8, #0
   24ea8:	mov	r4, #1
   24eac:	sbcs	r3, r9, #0
   24eb0:	blt	252dc <__assert_fail@plt+0x13d84>
   24eb4:	mvn	r8, #0
   24eb8:	mvn	r9, #-2147483648	; 0x80000000
   24ebc:	b	24e40 <__assert_fail@plt+0x138e8>
   24ec0:	str	r3, [sp, #4]
   24ec4:	asr	r1, fp, #31
   24ec8:	mov	r0, fp
   24ecc:	mov	r3, #0
   24ed0:	mov	ip, #7
   24ed4:	mov	lr, r3
   24ed8:	strd	r0, [sp, #8]
   24edc:	str	r4, [sp, #16]
   24ee0:	str	r5, [sp, #24]
   24ee4:	b	24ef8 <__assert_fail@plt+0x139a0>
   24ee8:	mov	r8, fp
   24eec:	mov	r9, r2
   24ef0:	subs	ip, ip, #1
   24ef4:	beq	252bc <__assert_fail@plt+0x13d64>
   24ef8:	cmp	r9, r8, asr #31
   24efc:	mov	r1, #0
   24f00:	bne	253f0 <__assert_fail@plt+0x13e98>
   24f04:	smull	r2, r3, r8, r0
   24f08:	mov	fp, r2
   24f0c:	mov	r2, r3
   24f10:	cmp	r1, #0
   24f14:	beq	24ee8 <__assert_fail@plt+0x13990>
   24f18:	cmp	r8, #0
   24f1c:	mov	lr, #1
   24f20:	sbcs	r3, r9, #0
   24f24:	mvnge	r8, #0
   24f28:	mvnge	r9, #-2147483648	; 0x80000000
   24f2c:	movlt	r8, #0
   24f30:	movlt	r9, #-2147483648	; 0x80000000
   24f34:	b	24ef0 <__assert_fail@plt+0x13998>
   24f38:	str	r3, [sp, #4]
   24f3c:	asr	r3, fp, #31
   24f40:	mov	r2, fp
   24f44:	mov	r1, #0
   24f48:	cmp	r9, r8, asr #31
   24f4c:	strd	r2, [sp, #8]
   24f50:	bne	2553c <__assert_fail@plt+0x13fe4>
   24f54:	smull	r2, r3, r8, fp
   24f58:	mov	lr, r2
   24f5c:	subs	ip, r1, #0
   24f60:	bne	24ea4 <__assert_fail@plt+0x1394c>
   24f64:	cmp	r3, lr, asr #31
   24f68:	mov	r0, lr
   24f6c:	mov	r1, r3
   24f70:	bne	255d0 <__assert_fail@plt+0x14078>
   24f74:	smull	r2, r3, lr, fp
   24f78:	mov	sl, r2
   24f7c:	mov	r2, r3
   24f80:	cmp	ip, #0
   24f84:	bne	252cc <__assert_fail@plt+0x13d74>
   24f88:	mov	r8, sl
   24f8c:	mov	r9, r2
   24f90:	b	24e40 <__assert_fail@plt+0x138e8>
   24f94:	str	r3, [sp, #4]
   24f98:	asr	r3, fp, #31
   24f9c:	mov	r2, fp
   24fa0:	mov	ip, #0
   24fa4:	cmp	r9, r8, asr #31
   24fa8:	strd	r2, [sp, #8]
   24fac:	bne	25364 <__assert_fail@plt+0x13e0c>
   24fb0:	smull	r2, r3, r8, fp
   24fb4:	mov	r1, r2
   24fb8:	mov	r2, r3
   24fbc:	cmp	ip, #0
   24fc0:	bne	24ea4 <__assert_fail@plt+0x1394c>
   24fc4:	mov	r8, r1
   24fc8:	mov	r9, r2
   24fcc:	b	24e40 <__assert_fail@plt+0x138e8>
   24fd0:	str	r3, [sp, #4]
   24fd4:	asr	r1, fp, #31
   24fd8:	mov	r0, fp
   24fdc:	mov	r3, #0
   24fe0:	mov	ip, #3
   24fe4:	mov	lr, r3
   24fe8:	strd	r0, [sp, #8]
   24fec:	str	r4, [sp, #16]
   24ff0:	str	r5, [sp, #24]
   24ff4:	b	25008 <__assert_fail@plt+0x13ab0>
   24ff8:	mov	r8, fp
   24ffc:	mov	r9, r2
   25000:	subs	ip, ip, #1
   25004:	beq	252bc <__assert_fail@plt+0x13d64>
   25008:	cmp	r9, r8, asr #31
   2500c:	mov	r1, #0
   25010:	bne	2532c <__assert_fail@plt+0x13dd4>
   25014:	smull	r2, r3, r8, r0
   25018:	mov	fp, r2
   2501c:	mov	r2, r3
   25020:	cmp	r1, #0
   25024:	beq	24ff8 <__assert_fail@plt+0x13aa0>
   25028:	cmp	r8, #0
   2502c:	mov	lr, #1
   25030:	sbcs	r3, r9, #0
   25034:	mvnge	r8, #0
   25038:	mvnge	r9, #-2147483648	; 0x80000000
   2503c:	movlt	r8, #0
   25040:	movlt	r9, #-2147483648	; 0x80000000
   25044:	b	25000 <__assert_fail@plt+0x13aa8>
   25048:	str	r3, [sp, #4]
   2504c:	asr	r1, fp, #31
   25050:	mov	r0, fp
   25054:	mov	r3, #0
   25058:	mov	ip, #6
   2505c:	mov	lr, r3
   25060:	strd	r0, [sp, #8]
   25064:	str	r4, [sp, #16]
   25068:	str	r5, [sp, #24]
   2506c:	b	25080 <__assert_fail@plt+0x13b28>
   25070:	mov	r8, fp
   25074:	mov	r9, r2
   25078:	subs	ip, ip, #1
   2507c:	beq	252bc <__assert_fail@plt+0x13d64>
   25080:	cmp	r9, r8, asr #31
   25084:	mov	r1, #0
   25088:	bne	25460 <__assert_fail@plt+0x13f08>
   2508c:	smull	r2, r3, r8, r0
   25090:	mov	fp, r2
   25094:	mov	r2, r3
   25098:	cmp	r1, #0
   2509c:	beq	25070 <__assert_fail@plt+0x13b18>
   250a0:	cmp	r8, #0
   250a4:	mov	lr, #1
   250a8:	sbcs	r3, r9, #0
   250ac:	mvnge	r8, #0
   250b0:	mvnge	r9, #-2147483648	; 0x80000000
   250b4:	movlt	r8, #0
   250b8:	movlt	r9, #-2147483648	; 0x80000000
   250bc:	b	25078 <__assert_fail@plt+0x13b20>
   250c0:	str	r3, [sp, #4]
   250c4:	asr	r1, fp, #31
   250c8:	mov	r0, fp
   250cc:	mov	r3, #0
   250d0:	mov	ip, #4
   250d4:	mov	lr, r3
   250d8:	strd	r0, [sp, #8]
   250dc:	str	r4, [sp, #16]
   250e0:	str	r5, [sp, #24]
   250e4:	b	250f8 <__assert_fail@plt+0x13ba0>
   250e8:	mov	r8, fp
   250ec:	mov	r9, r2
   250f0:	subs	ip, ip, #1
   250f4:	beq	252bc <__assert_fail@plt+0x13d64>
   250f8:	cmp	r9, r8, asr #31
   250fc:	mov	r1, #0
   25100:	bne	25428 <__assert_fail@plt+0x13ed0>
   25104:	smull	r2, r3, r8, r0
   25108:	mov	fp, r2
   2510c:	mov	r2, r3
   25110:	cmp	r1, #0
   25114:	beq	250e8 <__assert_fail@plt+0x13b90>
   25118:	cmp	r8, #0
   2511c:	mov	lr, #1
   25120:	sbcs	r3, r9, #0
   25124:	mvnge	r8, #0
   25128:	mvnge	r9, #-2147483648	; 0x80000000
   2512c:	movlt	r8, #0
   25130:	movlt	r9, #-2147483648	; 0x80000000
   25134:	b	250f0 <__assert_fail@plt+0x13b98>
   25138:	str	r3, [sp, #4]
   2513c:	asr	r1, fp, #31
   25140:	mov	r0, fp
   25144:	mov	r3, #0
   25148:	mov	ip, #5
   2514c:	mov	lr, r3
   25150:	strd	r0, [sp, #8]
   25154:	str	r4, [sp, #16]
   25158:	str	r5, [sp, #24]
   2515c:	b	25170 <__assert_fail@plt+0x13c18>
   25160:	mov	r8, fp
   25164:	mov	r9, r2
   25168:	subs	ip, ip, #1
   2516c:	beq	252bc <__assert_fail@plt+0x13d64>
   25170:	cmp	r9, r8, asr #31
   25174:	mov	r1, #0
   25178:	bne	253b8 <__assert_fail@plt+0x13e60>
   2517c:	smull	r2, r3, r8, r0
   25180:	mov	fp, r2
   25184:	mov	r2, r3
   25188:	cmp	r1, #0
   2518c:	beq	25160 <__assert_fail@plt+0x13c08>
   25190:	cmp	r8, #0
   25194:	mov	lr, #1
   25198:	sbcs	r3, r9, #0
   2519c:	mvnge	r8, #0
   251a0:	mvnge	r9, #-2147483648	; 0x80000000
   251a4:	movlt	r8, #0
   251a8:	movlt	r9, #-2147483648	; 0x80000000
   251ac:	b	25168 <__assert_fail@plt+0x13c10>
   251b0:	str	r3, [sp, #4]
   251b4:	asr	r1, fp, #31
   251b8:	mov	r0, fp
   251bc:	mov	r3, #0
   251c0:	mov	ip, #8
   251c4:	mov	lr, r3
   251c8:	strd	r0, [sp, #8]
   251cc:	str	r4, [sp, #16]
   251d0:	str	r5, [sp, #24]
   251d4:	b	251e8 <__assert_fail@plt+0x13c90>
   251d8:	mov	r8, fp
   251dc:	mov	r9, r2
   251e0:	subs	ip, ip, #1
   251e4:	beq	252bc <__assert_fail@plt+0x13d64>
   251e8:	cmp	r9, r8, asr #31
   251ec:	mov	r1, #0
   251f0:	bne	252f4 <__assert_fail@plt+0x13d9c>
   251f4:	smull	r2, r3, r8, r0
   251f8:	mov	fp, r2
   251fc:	mov	r2, r3
   25200:	cmp	r1, #0
   25204:	beq	251d8 <__assert_fail@plt+0x13c80>
   25208:	cmp	r8, #0
   2520c:	mov	lr, #1
   25210:	sbcs	r3, r9, #0
   25214:	mvnge	r8, #0
   25218:	mvnge	r9, #-2147483648	; 0x80000000
   2521c:	movlt	r8, #0
   25220:	movlt	r9, #-2147483648	; 0x80000000
   25224:	b	251e0 <__assert_fail@plt+0x13c88>
   25228:	str	r3, [sp, #4]
   2522c:	b	24e40 <__assert_fail@plt+0x138e8>
   25230:	mov	r3, #1
   25234:	mov	fp, #1024	; 0x400
   25238:	str	r3, [sp, #4]
   2523c:	b	24fd4 <__assert_fail@plt+0x13a7c>
   25240:	mov	r3, #1
   25244:	mov	fp, #1024	; 0x400
   25248:	str	r3, [sp, #4]
   2524c:	b	2504c <__assert_fail@plt+0x13af4>
   25250:	mov	r3, #1
   25254:	str	r3, [sp, #4]
   25258:	b	24e40 <__assert_fail@plt+0x138e8>
   2525c:	mov	r3, #1
   25260:	mov	fp, #1024	; 0x400
   25264:	str	r3, [sp, #4]
   25268:	b	250c4 <__assert_fail@plt+0x13b6c>
   2526c:	mov	r3, #1
   25270:	mov	fp, #1024	; 0x400
   25274:	str	r3, [sp, #4]
   25278:	b	2513c <__assert_fail@plt+0x13be4>
   2527c:	mov	r3, #1
   25280:	mov	fp, #1024	; 0x400
   25284:	str	r3, [sp, #4]
   25288:	b	24ec4 <__assert_fail@plt+0x1396c>
   2528c:	mov	r3, #1
   25290:	mov	fp, #1024	; 0x400
   25294:	str	r3, [sp, #4]
   25298:	b	251b4 <__assert_fail@plt+0x13c5c>
   2529c:	mov	r3, #1
   252a0:	mov	fp, #1024	; 0x400
   252a4:	str	r3, [sp, #4]
   252a8:	b	24f3c <__assert_fail@plt+0x139e4>
   252ac:	mov	r3, #1
   252b0:	mov	fp, #1024	; 0x400
   252b4:	str	r3, [sp, #4]
   252b8:	b	24f98 <__assert_fail@plt+0x13a40>
   252bc:	ldr	r4, [sp, #16]
   252c0:	ldr	r5, [sp, #24]
   252c4:	orr	r4, r4, lr
   252c8:	b	24e40 <__assert_fail@plt+0x138e8>
   252cc:	cmp	r0, #0
   252d0:	mov	r4, #1
   252d4:	sbcs	r3, r1, #0
   252d8:	bge	24eb4 <__assert_fail@plt+0x1395c>
   252dc:	mov	r8, #0
   252e0:	mov	r9, #-2147483648	; 0x80000000
   252e4:	b	24e40 <__assert_fail@plt+0x138e8>
   252e8:	mov	r3, #2
   252ec:	mov	fp, #1000	; 0x3e8
   252f0:	b	24d28 <__assert_fail@plt+0x137d0>
   252f4:	cmp	r9, #0
   252f8:	umull	r4, r5, r8, r0
   252fc:	umull	sl, fp, r0, r9
   25300:	bge	25310 <__assert_fail@plt+0x13db8>
   25304:	mov	r3, #0
   25308:	subs	sl, sl, r3
   2530c:	sbc	fp, fp, r0
   25310:	adds	r2, sl, r5
   25314:	mov	r3, #0
   25318:	adc	r3, fp, r3
   2531c:	cmp	r3, r2, asr #31
   25320:	bne	256b0 <__assert_fail@plt+0x14158>
   25324:	mov	fp, r4
   25328:	b	25200 <__assert_fail@plt+0x13ca8>
   2532c:	cmp	r9, #0
   25330:	umull	r4, r5, r8, r0
   25334:	umull	sl, fp, r0, r9
   25338:	bge	25348 <__assert_fail@plt+0x13df0>
   2533c:	mov	r3, #0
   25340:	subs	sl, sl, r3
   25344:	sbc	fp, fp, r0
   25348:	adds	r2, sl, r5
   2534c:	mov	r3, #0
   25350:	adc	r3, fp, r3
   25354:	cmp	r3, r2, asr #31
   25358:	bne	256d0 <__assert_fail@plt+0x14178>
   2535c:	mov	fp, r4
   25360:	b	25020 <__assert_fail@plt+0x13ac8>
   25364:	umull	r0, r1, fp, r9
   25368:	cmp	r9, #0
   2536c:	umull	r2, r3, r8, fp
   25370:	strd	r0, [sp, #16]
   25374:	bge	2538c <__assert_fail@plt+0x13e34>
   25378:	subs	r1, r0, ip
   2537c:	str	r1, [sp, #16]
   25380:	ldr	r1, [sp, #20]
   25384:	sbc	r1, r1, fp
   25388:	str	r1, [sp, #20]
   2538c:	mov	r1, r3
   25390:	ldr	r3, [sp, #16]
   25394:	mov	r0, r2
   25398:	mov	lr, #0
   2539c:	adds	r2, r3, r1
   253a0:	ldr	r3, [sp, #20]
   253a4:	adc	lr, r3, lr
   253a8:	cmp	lr, r2, asr #31
   253ac:	bne	25730 <__assert_fail@plt+0x141d8>
   253b0:	mov	r1, r0
   253b4:	b	24fbc <__assert_fail@plt+0x13a64>
   253b8:	cmp	r9, #0
   253bc:	umull	r4, r5, r8, r0
   253c0:	umull	sl, fp, r0, r9
   253c4:	bge	253d4 <__assert_fail@plt+0x13e7c>
   253c8:	mov	r3, #0
   253cc:	subs	sl, sl, r3
   253d0:	sbc	fp, fp, r0
   253d4:	adds	r2, sl, r5
   253d8:	mov	r3, #0
   253dc:	adc	r3, fp, r3
   253e0:	cmp	r3, r2, asr #31
   253e4:	bne	25670 <__assert_fail@plt+0x14118>
   253e8:	mov	fp, r4
   253ec:	b	25188 <__assert_fail@plt+0x13c30>
   253f0:	cmp	r9, #0
   253f4:	umull	r4, r5, r8, r0
   253f8:	umull	sl, fp, r0, r9
   253fc:	bge	2540c <__assert_fail@plt+0x13eb4>
   25400:	mov	r3, #0
   25404:	subs	sl, sl, r3
   25408:	sbc	fp, fp, r0
   2540c:	adds	r2, sl, r5
   25410:	mov	r3, #0
   25414:	adc	r3, fp, r3
   25418:	cmp	r3, r2, asr #31
   2541c:	bne	256f0 <__assert_fail@plt+0x14198>
   25420:	mov	fp, r4
   25424:	b	24f10 <__assert_fail@plt+0x139b8>
   25428:	cmp	r9, #0
   2542c:	umull	r4, r5, r8, r0
   25430:	umull	sl, fp, r0, r9
   25434:	bge	25444 <__assert_fail@plt+0x13eec>
   25438:	mov	r3, #0
   2543c:	subs	sl, sl, r3
   25440:	sbc	fp, fp, r0
   25444:	adds	r2, sl, r5
   25448:	mov	r3, #0
   2544c:	adc	r3, fp, r3
   25450:	cmp	r3, r2, asr #31
   25454:	bne	25710 <__assert_fail@plt+0x141b8>
   25458:	mov	fp, r4
   2545c:	b	25110 <__assert_fail@plt+0x13bb8>
   25460:	cmp	r9, #0
   25464:	umull	r4, r5, r8, r0
   25468:	umull	sl, fp, r0, r9
   2546c:	bge	2547c <__assert_fail@plt+0x13f24>
   25470:	mov	r3, #0
   25474:	subs	sl, sl, r3
   25478:	sbc	fp, fp, r0
   2547c:	adds	r2, sl, r5
   25480:	mov	r3, #0
   25484:	adc	r3, fp, r3
   25488:	cmp	r3, r2, asr #31
   2548c:	bne	25690 <__assert_fail@plt+0x14138>
   25490:	mov	fp, r4
   25494:	b	25098 <__assert_fail@plt+0x13b40>
   25498:	ldrb	r3, [r6, #2]
   2549c:	mov	fp, #1024	; 0x400
   254a0:	cmp	r3, #66	; 0x42
   254a4:	movne	r3, #1
   254a8:	moveq	r3, #3
   254ac:	b	24d28 <__assert_fail@plt+0x137d0>
   254b0:	mov	lr, #512	; 0x200
   254b4:	cmp	r9, #0
   254b8:	lsr	r3, r8, #23
   254bc:	lsl	r2, r8, #9
   254c0:	umull	r0, r1, lr, r9
   254c4:	bge	254d0 <__assert_fail@plt+0x13f78>
   254c8:	subs	r0, r0, ip
   254cc:	sbc	r1, r1, lr
   254d0:	adds	r3, r0, r3
   254d4:	mov	lr, #0
   254d8:	adc	r1, r1, lr
   254dc:	cmp	r1, r3, asr #31
   254e0:	beq	24e30 <__assert_fail@plt+0x138d8>
   254e4:	lsl	r3, r9, #9
   254e8:	mov	ip, #1
   254ec:	lsl	r2, r8, #9
   254f0:	orr	r3, r3, r8, lsr #23
   254f4:	b	24e30 <__assert_fail@plt+0x138d8>
   254f8:	mov	lr, #1024	; 0x400
   254fc:	cmp	r9, #0
   25500:	lsr	r3, r8, #22
   25504:	lsl	r2, r8, #10
   25508:	umull	r0, r1, lr, r9
   2550c:	bge	25518 <__assert_fail@plt+0x13fc0>
   25510:	subs	r0, r0, ip
   25514:	sbc	r1, r1, lr
   25518:	adds	r3, r0, r3
   2551c:	mov	lr, #0
   25520:	adc	r1, r1, lr
   25524:	cmp	r1, r3, asr #31
   25528:	lslne	r3, r9, #10
   2552c:	movne	ip, #1
   25530:	lslne	r2, r8, #10
   25534:	orrne	r3, r3, r8, lsr #22
   25538:	b	24e30 <__assert_fail@plt+0x138d8>
   2553c:	umull	r2, r3, r8, fp
   25540:	cmp	r9, #0
   25544:	strd	r2, [sp, #16]
   25548:	umull	r2, r3, fp, r9
   2554c:	bge	25558 <__assert_fail@plt+0x14000>
   25550:	subs	r2, r2, r1
   25554:	sbc	r3, r3, fp
   25558:	ldr	r0, [sp, #20]
   2555c:	mov	ip, #0
   25560:	adds	r0, r2, r0
   25564:	adc	ip, r3, ip
   25568:	cmp	ip, r0, asr #31
   2556c:	bne	25750 <__assert_fail@plt+0x141f8>
   25570:	mov	r3, r0
   25574:	ldr	lr, [sp, #16]
   25578:	b	24f5c <__assert_fail@plt+0x13a04>
   2557c:	mov	lr, #2
   25580:	mov	r3, #0
   25584:	adds	ip, r8, r8
   25588:	adc	r0, r3, r3
   2558c:	umull	r2, r3, lr, r9
   25590:	cmp	r9, #0
   25594:	strd	r2, [sp, #8]
   25598:	bge	255b0 <__assert_fail@plt+0x14058>
   2559c:	subs	r3, r2, r1
   255a0:	str	r3, [sp, #8]
   255a4:	ldr	r3, [sp, #12]
   255a8:	sbc	r3, r3, lr
   255ac:	str	r3, [sp, #12]
   255b0:	ldrd	sl, [sp, #8]
   255b4:	mov	lr, #0
   255b8:	adds	r2, sl, r0
   255bc:	adc	r3, fp, lr
   255c0:	cmp	r3, r2, asr #31
   255c4:	bne	25660 <__assert_fail@plt+0x14108>
   255c8:	mov	r3, r2
   255cc:	b	24e94 <__assert_fail@plt+0x1393c>
   255d0:	cmp	r3, #0
   255d4:	umull	r8, r9, lr, fp
   255d8:	umull	r2, r3, fp, r3
   255dc:	strd	r2, [sp, #16]
   255e0:	strd	r8, [sp, #24]
   255e4:	bge	255fc <__assert_fail@plt+0x140a4>
   255e8:	subs	r3, r2, ip
   255ec:	str	r3, [sp, #16]
   255f0:	ldr	r3, [sp, #20]
   255f4:	sbc	r3, r3, fp
   255f8:	str	r3, [sp, #20]
   255fc:	ldr	r3, [sp, #16]
   25600:	mov	lr, #0
   25604:	ldrd	sl, [sp, #24]
   25608:	adds	r2, r3, fp
   2560c:	ldr	r3, [sp, #20]
   25610:	adc	lr, r3, lr
   25614:	cmp	lr, r2, asr #31
   25618:	beq	24f80 <__assert_fail@plt+0x13a28>
   2561c:	ldrd	r8, [sp, #8]
   25620:	mov	ip, #1
   25624:	mul	lr, r0, r9
   25628:	umull	r2, r3, r0, r8
   2562c:	mla	lr, r8, r1, lr
   25630:	mov	sl, r2
   25634:	add	r3, lr, r3
   25638:	mov	r2, r3
   2563c:	b	24f80 <__assert_fail@plt+0x13a28>
   25640:	movw	r3, #32020	; 0x7d14
   25644:	movt	r3, #2
   25648:	movw	r1, #32032	; 0x7d20
   2564c:	movt	r1, #2
   25650:	movw	r0, #32048	; 0x7d30
   25654:	movt	r0, #2
   25658:	mov	r2, #85	; 0x55
   2565c:	bl	11558 <__assert_fail@plt>
   25660:	adds	ip, r8, r8
   25664:	mov	r1, #1
   25668:	adc	r3, r9, r9
   2566c:	b	24e94 <__assert_fail@plt+0x1393c>
   25670:	ldrd	r4, [sp, #8]
   25674:	mov	r1, #1
   25678:	mul	sl, r8, r5
   2567c:	umull	r2, r3, r8, r4
   25680:	mla	sl, r4, r9, sl
   25684:	mov	fp, r2
   25688:	add	r2, sl, r3
   2568c:	b	25188 <__assert_fail@plt+0x13c30>
   25690:	ldrd	r4, [sp, #8]
   25694:	mov	r1, #1
   25698:	mul	sl, r8, r5
   2569c:	umull	r2, r3, r8, r4
   256a0:	mla	sl, r4, r9, sl
   256a4:	mov	fp, r2
   256a8:	add	r2, sl, r3
   256ac:	b	25098 <__assert_fail@plt+0x13b40>
   256b0:	ldrd	r4, [sp, #8]
   256b4:	mov	r1, #1
   256b8:	mul	sl, r8, r5
   256bc:	umull	r2, r3, r8, r4
   256c0:	mla	sl, r4, r9, sl
   256c4:	mov	fp, r2
   256c8:	add	r2, sl, r3
   256cc:	b	25200 <__assert_fail@plt+0x13ca8>
   256d0:	ldrd	r4, [sp, #8]
   256d4:	mov	r1, #1
   256d8:	mul	sl, r8, r5
   256dc:	umull	r2, r3, r8, r4
   256e0:	mla	sl, r4, r9, sl
   256e4:	mov	fp, r2
   256e8:	add	r2, sl, r3
   256ec:	b	25020 <__assert_fail@plt+0x13ac8>
   256f0:	ldrd	r4, [sp, #8]
   256f4:	mov	r1, #1
   256f8:	mul	sl, r8, r5
   256fc:	umull	r2, r3, r8, r4
   25700:	mla	sl, r4, r9, sl
   25704:	mov	fp, r2
   25708:	add	r2, sl, r3
   2570c:	b	24f10 <__assert_fail@plt+0x139b8>
   25710:	ldrd	r4, [sp, #8]
   25714:	mov	r1, #1
   25718:	mul	sl, r8, r5
   2571c:	umull	r2, r3, r8, r4
   25720:	mla	sl, r4, r9, sl
   25724:	mov	fp, r2
   25728:	add	r2, sl, r3
   2572c:	b	25110 <__assert_fail@plt+0x13bb8>
   25730:	ldrd	sl, [sp, #8]
   25734:	mov	ip, #1
   25738:	mul	r1, r8, fp
   2573c:	umull	r2, r3, r8, sl
   25740:	mla	r0, sl, r9, r1
   25744:	mov	r1, r2
   25748:	add	r2, r0, r3
   2574c:	b	24fbc <__assert_fail@plt+0x13a64>
   25750:	ldrd	r2, [sp, #8]
   25754:	mov	r1, #1
   25758:	ldr	ip, [sp, #8]
   2575c:	mul	r0, r8, r3
   25760:	umull	r2, r3, r8, r2
   25764:	mla	r0, ip, r9, r0
   25768:	mov	lr, r2
   2576c:	add	r3, r0, r3
   25770:	b	24f5c <__assert_fail@plt+0x13a04>
   25774:	cmp	r2, #36	; 0x24
   25778:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2577c:	strd	r6, [sp, #8]
   25780:	strd	r8, [sp, #16]
   25784:	strd	sl, [sp, #24]
   25788:	str	lr, [sp, #32]
   2578c:	sub	sp, sp, #36	; 0x24
   25790:	bhi	26020 <__assert_fail@plt+0x14ac8>
   25794:	cmp	r1, #0
   25798:	mov	r8, r2
   2579c:	mov	r6, r0
   257a0:	mov	r5, r1
   257a4:	mov	sl, r3
   257a8:	addeq	r5, sp, #28
   257ac:	bl	1142c <__errno_location@plt>
   257b0:	mov	r3, #0
   257b4:	mov	r7, r0
   257b8:	str	r3, [r0]
   257bc:	bl	113fc <__ctype_b_loc@plt>
   257c0:	ldrb	r3, [r6]
   257c4:	mov	r2, r6
   257c8:	ldr	r0, [r0]
   257cc:	b	257d4 <__assert_fail@plt+0x1427c>
   257d0:	ldrb	r3, [r2, #1]!
   257d4:	lsl	r1, r3, #1
   257d8:	ldrh	r4, [r0, r1]
   257dc:	ands	r4, r4, #8192	; 0x2000
   257e0:	bne	257d0 <__assert_fail@plt+0x14278>
   257e4:	cmp	r3, #45	; 0x2d
   257e8:	beq	25888 <__assert_fail@plt+0x14330>
   257ec:	mov	r2, r8
   257f0:	mov	r3, r4
   257f4:	mov	r1, r5
   257f8:	mov	r0, r6
   257fc:	bl	1127c <__strtoull_internal@plt>
   25800:	ldr	fp, [r5]
   25804:	mov	r9, r0
   25808:	mov	r8, r1
   2580c:	cmp	fp, r6
   25810:	beq	25870 <__assert_fail@plt+0x14318>
   25814:	ldr	r4, [r7]
   25818:	cmp	r4, #0
   2581c:	bne	25860 <__assert_fail@plt+0x14308>
   25820:	ldr	r3, [sp, #72]	; 0x48
   25824:	cmp	r3, #0
   25828:	beq	25838 <__assert_fail@plt+0x142e0>
   2582c:	ldrb	r6, [fp]
   25830:	cmp	r6, #0
   25834:	bne	25b78 <__assert_fail@plt+0x14620>
   25838:	str	r9, [sl]
   2583c:	str	r8, [sl, #4]
   25840:	mov	r0, r4
   25844:	add	sp, sp, #36	; 0x24
   25848:	ldrd	r4, [sp]
   2584c:	ldrd	r6, [sp, #8]
   25850:	ldrd	r8, [sp, #16]
   25854:	ldrd	sl, [sp, #24]
   25858:	add	sp, sp, #32
   2585c:	pop	{pc}		; (ldr pc, [sp], #4)
   25860:	cmp	r4, #34	; 0x22
   25864:	bne	25888 <__assert_fail@plt+0x14330>
   25868:	mov	r4, #1
   2586c:	b	25820 <__assert_fail@plt+0x142c8>
   25870:	ldr	r3, [sp, #72]	; 0x48
   25874:	cmp	r3, #0
   25878:	beq	25888 <__assert_fail@plt+0x14330>
   2587c:	ldrb	r6, [r6]
   25880:	cmp	r6, #0
   25884:	bne	25890 <__assert_fail@plt+0x14338>
   25888:	mov	r4, #4
   2588c:	b	25840 <__assert_fail@plt+0x142e8>
   25890:	mov	r1, r6
   25894:	mov	r0, r3
   25898:	bl	11420 <strchr@plt>
   2589c:	cmp	r0, #0
   258a0:	movne	r9, #1
   258a4:	movne	r8, #0
   258a8:	beq	25888 <__assert_fail@plt+0x14330>
   258ac:	sub	r3, r6, #69	; 0x45
   258b0:	cmp	r3, #47	; 0x2f
   258b4:	ldrls	pc, [pc, r3, lsl #2]
   258b8:	b	259c0 <__assert_fail@plt+0x14468>
   258bc:	andeq	r5, r2, ip, ror r9
   258c0:	andeq	r5, r2, r0, asr #19
   258c4:	andeq	r5, r2, ip, ror r9
   258c8:	andeq	r5, r2, r0, asr #19
   258cc:	andeq	r5, r2, r0, asr #19
   258d0:	andeq	r5, r2, r0, asr #19
   258d4:	andeq	r5, r2, ip, ror r9
   258d8:	andeq	r5, r2, r0, asr #19
   258dc:	andeq	r5, r2, ip, ror r9
   258e0:	andeq	r5, r2, r0, asr #19
   258e4:	andeq	r5, r2, r0, asr #19
   258e8:	andeq	r5, r2, ip, ror r9
   258ec:	andeq	r5, r2, r0, asr #19
   258f0:	andeq	r5, r2, r0, asr #19
   258f4:	andeq	r5, r2, r0, asr #19
   258f8:	andeq	r5, r2, ip, ror r9
   258fc:	andeq	r5, r2, r0, asr #19
   25900:	andeq	r5, r2, r0, asr #19
   25904:	andeq	r5, r2, r0, asr #19
   25908:	andeq	r5, r2, r0, asr #19
   2590c:	andeq	r5, r2, ip, ror r9
   25910:	andeq	r5, r2, ip, ror r9
   25914:	andeq	r5, r2, r0, asr #19
   25918:	andeq	r5, r2, r0, asr #19
   2591c:	andeq	r5, r2, r0, asr #19
   25920:	andeq	r5, r2, r0, asr #19
   25924:	andeq	r5, r2, r0, asr #19
   25928:	andeq	r5, r2, r0, asr #19
   2592c:	andeq	r5, r2, r0, asr #19
   25930:	andeq	r5, r2, r0, asr #19
   25934:	andeq	r5, r2, r0, asr #19
   25938:	andeq	r5, r2, r0, asr #19
   2593c:	andeq	r5, r2, r0, asr #19
   25940:	andeq	r5, r2, r0, asr #19
   25944:	andeq	r5, r2, ip, ror r9
   25948:	andeq	r5, r2, r0, asr #19
   2594c:	andeq	r5, r2, r0, asr #19
   25950:	andeq	r5, r2, r0, asr #19
   25954:	andeq	r5, r2, ip, ror r9
   25958:	andeq	r5, r2, r0, asr #19
   2595c:	andeq	r5, r2, ip, ror r9
   25960:	andeq	r5, r2, r0, asr #19
   25964:	andeq	r5, r2, r0, asr #19
   25968:	andeq	r5, r2, r0, asr #19
   2596c:	andeq	r5, r2, r0, asr #19
   25970:	andeq	r5, r2, r0, asr #19
   25974:	andeq	r5, r2, r0, asr #19
   25978:	andeq	r5, r2, ip, ror r9
   2597c:	mov	r1, #48	; 0x30
   25980:	ldr	r0, [sp, #72]	; 0x48
   25984:	bl	11420 <strchr@plt>
   25988:	cmp	r0, #0
   2598c:	beq	259c0 <__assert_fail@plt+0x14468>
   25990:	ldrb	r3, [fp, #1]
   25994:	cmp	r3, #68	; 0x44
   25998:	beq	25eec <__assert_fail@plt+0x14994>
   2599c:	cmp	r3, #105	; 0x69
   259a0:	beq	25b90 <__assert_fail@plt+0x14638>
   259a4:	cmp	r3, #66	; 0x42
   259a8:	moveq	r3, #2
   259ac:	movne	r3, #1
   259b0:	moveq	r7, #1000	; 0x3e8
   259b4:	movne	r7, #1024	; 0x400
   259b8:	str	r3, [sp, #4]
   259bc:	b	259cc <__assert_fail@plt+0x14474>
   259c0:	mov	r3, #1
   259c4:	mov	r7, #1024	; 0x400
   259c8:	str	r3, [sp, #4]
   259cc:	sub	r6, r6, #66	; 0x42
   259d0:	cmp	r6, #53	; 0x35
   259d4:	ldrls	pc, [pc, r6, lsl #2]
   259d8:	b	25b3c <__assert_fail@plt+0x145e4>
   259dc:	muleq	r2, r4, lr
   259e0:	andeq	r5, r2, ip, lsr fp
   259e4:	andeq	r5, r2, ip, lsr fp
   259e8:	andeq	r5, r2, r0, lsr #25
   259ec:	andeq	r5, r2, ip, lsr fp
   259f0:			; <UNDEFINED> instruction: 0x00025ab4
   259f4:	andeq	r5, r2, ip, lsr fp
   259f8:	andeq	r5, r2, ip, lsr fp
   259fc:	andeq	r5, r2, ip, lsr fp
   25a00:	andeq	r5, r2, r4, asr #22
   25a04:	andeq	r5, r2, ip, lsr fp
   25a08:	andeq	r5, r2, r0, asr #28
   25a0c:	andeq	r5, r2, ip, lsr fp
   25a10:	andeq	r5, r2, ip, lsr fp
   25a14:	muleq	r2, r0, sp
   25a18:	andeq	r5, r2, ip, lsr fp
   25a1c:	andeq	r5, r2, ip, lsr fp
   25a20:	andeq	r5, r2, ip, lsr fp
   25a24:	andeq	r5, r2, r8, lsl sp
   25a28:	andeq	r5, r2, ip, lsr fp
   25a2c:	andeq	r5, r2, ip, lsr fp
   25a30:	andeq	r5, r2, ip, lsr fp
   25a34:	andeq	r5, r2, ip, lsr fp
   25a38:	andeq	r5, r2, r8, lsr #24
   25a3c:	andeq	r5, r2, ip, lsr #23
   25a40:	andeq	r5, r2, ip, lsr fp
   25a44:	andeq	r5, r2, ip, lsr fp
   25a48:	andeq	r5, r2, ip, lsr fp
   25a4c:	andeq	r5, r2, ip, lsr fp
   25a50:	andeq	r5, r2, ip, lsr fp
   25a54:	andeq	r5, r2, ip, lsr fp
   25a58:	andeq	r5, r2, ip, lsr fp
   25a5c:	andeq	r5, r2, r0, lsr #28
   25a60:	andeq	r5, r2, r4, lsr #22
   25a64:	andeq	r5, r2, ip, lsr fp
   25a68:	andeq	r5, r2, ip, lsr fp
   25a6c:	andeq	r5, r2, ip, lsr fp
   25a70:			; <UNDEFINED> instruction: 0x00025ab4
   25a74:	andeq	r5, r2, ip, lsr fp
   25a78:	andeq	r5, r2, ip, lsr fp
   25a7c:	andeq	r5, r2, ip, lsr fp
   25a80:	andeq	r5, r2, r4, asr #22
   25a84:	andeq	r5, r2, ip, lsr fp
   25a88:	andeq	r5, r2, r0, asr #28
   25a8c:	andeq	r5, r2, ip, lsr fp
   25a90:	andeq	r5, r2, ip, lsr fp
   25a94:	andeq	r5, r2, ip, lsr fp
   25a98:	andeq	r5, r2, ip, lsr fp
   25a9c:	andeq	r5, r2, ip, lsr fp
   25aa0:	andeq	r5, r2, ip, lsr fp
   25aa4:	andeq	r5, r2, r8, lsl sp
   25aa8:	andeq	r5, r2, ip, lsr fp
   25aac:	andeq	r5, r2, ip, lsr fp
   25ab0:	andeq	r5, r2, r8, lsl #28
   25ab4:	asr	r3, r7, #31
   25ab8:	mov	r2, r7
   25abc:	cmp	r8, #0
   25ac0:	umull	r0, r1, r9, r7
   25ac4:	mov	ip, #0
   25ac8:	strd	r2, [sp, #8]
   25acc:	bne	25f20 <__assert_fail@plt+0x149c8>
   25ad0:	mov	r2, r0
   25ad4:	mov	r3, r1
   25ad8:	cmp	ip, #0
   25adc:	bne	25b68 <__assert_fail@plt+0x14610>
   25ae0:	cmp	r3, #0
   25ae4:	mov	lr, ip
   25ae8:	bne	25f84 <__assert_fail@plt+0x14a2c>
   25aec:	umull	r2, r3, r2, r7
   25af0:	mov	ip, r2
   25af4:	mov	r1, r3
   25af8:	subs	r0, lr, #0
   25afc:	bne	25b68 <__assert_fail@plt+0x14610>
   25b00:	cmp	r1, #0
   25b04:	bne	25f64 <__assert_fail@plt+0x14a0c>
   25b08:	umull	r2, r3, ip, r7
   25b0c:	mov	r6, r2
   25b10:	mov	r2, r3
   25b14:	cmp	r0, #0
   25b18:	mov	r9, r6
   25b1c:	mov	r8, r2
   25b20:	bne	25b68 <__assert_fail@plt+0x14610>
   25b24:	ldr	r2, [sp, #4]
   25b28:	add	r3, fp, r2
   25b2c:	str	r3, [r5]
   25b30:	ldrb	r3, [fp, r2]
   25b34:	cmp	r3, #0
   25b38:	beq	25838 <__assert_fail@plt+0x142e0>
   25b3c:	orr	r4, r4, #2
   25b40:	b	25838 <__assert_fail@plt+0x142e0>
   25b44:	cmp	r8, #0
   25b48:	umull	r2, r3, r9, r7
   25b4c:	mov	ip, #0
   25b50:	asr	r1, r7, #31
   25b54:	bne	25ebc <__assert_fail@plt+0x14964>
   25b58:	mov	r9, r2
   25b5c:	mov	r8, r3
   25b60:	cmp	ip, #0
   25b64:	beq	25b24 <__assert_fail@plt+0x145cc>
   25b68:	mvn	r9, #0
   25b6c:	mov	r4, #1
   25b70:	mov	r8, r9
   25b74:	b	25b24 <__assert_fail@plt+0x145cc>
   25b78:	mov	r1, r6
   25b7c:	ldr	r0, [sp, #72]	; 0x48
   25b80:	bl	11420 <strchr@plt>
   25b84:	cmp	r0, #0
   25b88:	bne	258ac <__assert_fail@plt+0x14354>
   25b8c:	b	25b3c <__assert_fail@plt+0x145e4>
   25b90:	ldrb	r3, [fp, #2]
   25b94:	mov	r7, #1024	; 0x400
   25b98:	cmp	r3, #66	; 0x42
   25b9c:	movne	r3, #1
   25ba0:	moveq	r3, #3
   25ba4:	str	r3, [sp, #4]
   25ba8:	b	259cc <__assert_fail@plt+0x14474>
   25bac:	asr	r3, r7, #31
   25bb0:	mov	r2, r7
   25bb4:	mov	ip, #0
   25bb8:	mov	r0, #7
   25bbc:	mov	lr, ip
   25bc0:	mov	r6, r4
   25bc4:	strd	r2, [sp, #8]
   25bc8:	str	r5, [sp, #16]
   25bcc:	b	25bf8 <__assert_fail@plt+0x146a0>
   25bd0:	umull	r2, r3, r9, r7
   25bd4:	mov	r9, r2
   25bd8:	mov	r8, r3
   25bdc:	cmp	r1, #0
   25be0:	beq	25bf0 <__assert_fail@plt+0x14698>
   25be4:	mvn	r9, #0
   25be8:	mov	ip, #1
   25bec:	mov	r8, r9
   25bf0:	subs	r0, r0, #1
   25bf4:	beq	25ee0 <__assert_fail@plt+0x14988>
   25bf8:	cmp	r8, #0
   25bfc:	mov	r1, #0
   25c00:	beq	25bd0 <__assert_fail@plt+0x14678>
   25c04:	umull	r4, r5, r9, r7
   25c08:	mov	r3, lr
   25c0c:	mov	r2, r5
   25c10:	umlal	r2, r3, r8, r7
   25c14:	cmp	r3, #0
   25c18:	bne	26040 <__assert_fail@plt+0x14ae8>
   25c1c:	mov	r9, r4
   25c20:	mov	r8, r2
   25c24:	b	25bdc <__assert_fail@plt+0x14684>
   25c28:	asr	r3, r7, #31
   25c2c:	mov	r2, r7
   25c30:	mov	r6, #0
   25c34:	mov	lr, #8
   25c38:	mov	r0, r4
   25c3c:	mov	ip, r5
   25c40:	strd	r2, [sp, #8]
   25c44:	b	25c70 <__assert_fail@plt+0x14718>
   25c48:	umull	r2, r3, r9, r7
   25c4c:	mov	r9, r2
   25c50:	mov	r8, r3
   25c54:	cmp	r1, #0
   25c58:	beq	25c68 <__assert_fail@plt+0x14710>
   25c5c:	mvn	r9, #0
   25c60:	mov	r6, #1
   25c64:	mov	r8, r9
   25c68:	subs	lr, lr, #1
   25c6c:	beq	25eb0 <__assert_fail@plt+0x14958>
   25c70:	cmp	r8, #0
   25c74:	mov	r1, #0
   25c78:	beq	25c48 <__assert_fail@plt+0x146f0>
   25c7c:	umull	r4, r5, r9, r7
   25c80:	mov	r3, #0
   25c84:	mov	r2, r5
   25c88:	umlal	r2, r3, r8, r7
   25c8c:	cmp	r3, #0
   25c90:	bne	26098 <__assert_fail@plt+0x14b40>
   25c94:	mov	r9, r4
   25c98:	mov	r8, r2
   25c9c:	b	25c54 <__assert_fail@plt+0x146fc>
   25ca0:	asr	r3, r7, #31
   25ca4:	mov	r2, r7
   25ca8:	mov	r6, #0
   25cac:	mov	lr, #6
   25cb0:	mov	r0, r4
   25cb4:	mov	ip, r5
   25cb8:	strd	r2, [sp, #8]
   25cbc:	b	25ce8 <__assert_fail@plt+0x14790>
   25cc0:	umull	r2, r3, r9, r7
   25cc4:	mov	r9, r2
   25cc8:	mov	r8, r3
   25ccc:	cmp	r1, #0
   25cd0:	beq	25ce0 <__assert_fail@plt+0x14788>
   25cd4:	mvn	r9, #0
   25cd8:	mov	r6, #1
   25cdc:	mov	r8, r9
   25ce0:	subs	lr, lr, #1
   25ce4:	beq	25eb0 <__assert_fail@plt+0x14958>
   25ce8:	cmp	r8, #0
   25cec:	mov	r1, #0
   25cf0:	beq	25cc0 <__assert_fail@plt+0x14768>
   25cf4:	umull	r4, r5, r9, r7
   25cf8:	mov	r3, #0
   25cfc:	mov	r2, r5
   25d00:	umlal	r2, r3, r8, r7
   25d04:	cmp	r3, #0
   25d08:	bne	26060 <__assert_fail@plt+0x14b08>
   25d0c:	mov	r9, r4
   25d10:	mov	r8, r2
   25d14:	b	25ccc <__assert_fail@plt+0x14774>
   25d18:	asr	r3, r7, #31
   25d1c:	mov	r2, r7
   25d20:	mov	r6, #0
   25d24:	mov	lr, #4
   25d28:	mov	r0, r4
   25d2c:	mov	ip, r5
   25d30:	strd	r2, [sp, #8]
   25d34:	b	25d60 <__assert_fail@plt+0x14808>
   25d38:	umull	r2, r3, r9, r7
   25d3c:	mov	r9, r2
   25d40:	mov	r8, r3
   25d44:	cmp	r1, #0
   25d48:	beq	25d58 <__assert_fail@plt+0x14800>
   25d4c:	mvn	r9, #0
   25d50:	mov	r6, #1
   25d54:	mov	r8, r9
   25d58:	subs	lr, lr, #1
   25d5c:	beq	25eb0 <__assert_fail@plt+0x14958>
   25d60:	cmp	r8, #0
   25d64:	mov	r1, #0
   25d68:	beq	25d38 <__assert_fail@plt+0x147e0>
   25d6c:	umull	r4, r5, r9, r7
   25d70:	mov	r3, #0
   25d74:	mov	r2, r5
   25d78:	umlal	r2, r3, r8, r7
   25d7c:	cmp	r3, #0
   25d80:	bne	2607c <__assert_fail@plt+0x14b24>
   25d84:	mov	r9, r4
   25d88:	mov	r8, r2
   25d8c:	b	25d44 <__assert_fail@plt+0x147ec>
   25d90:	asr	r3, r7, #31
   25d94:	mov	r2, r7
   25d98:	mov	r6, #0
   25d9c:	mov	lr, #5
   25da0:	mov	r0, r4
   25da4:	mov	ip, r5
   25da8:	strd	r2, [sp, #8]
   25dac:	b	25dd8 <__assert_fail@plt+0x14880>
   25db0:	umull	r2, r3, r9, r7
   25db4:	mov	r9, r2
   25db8:	mov	r8, r3
   25dbc:	cmp	r1, #0
   25dc0:	beq	25dd0 <__assert_fail@plt+0x14878>
   25dc4:	mvn	r9, #0
   25dc8:	mov	r6, #1
   25dcc:	mov	r8, r9
   25dd0:	subs	lr, lr, #1
   25dd4:	beq	25eb0 <__assert_fail@plt+0x14958>
   25dd8:	cmp	r8, #0
   25ddc:	mov	r1, #0
   25de0:	beq	25db0 <__assert_fail@plt+0x14858>
   25de4:	umull	r4, r5, r9, r7
   25de8:	mov	r3, #0
   25dec:	mov	r2, r5
   25df0:	umlal	r2, r3, r8, r7
   25df4:	cmp	r3, #0
   25df8:	bne	25fe8 <__assert_fail@plt+0x14a90>
   25dfc:	mov	r9, r4
   25e00:	mov	r8, r2
   25e04:	b	25dbc <__assert_fail@plt+0x14864>
   25e08:	lsr	r3, r8, #31
   25e0c:	adds	r9, r9, r9
   25e10:	adc	r8, r8, r8
   25e14:	cmp	r3, #0
   25e18:	beq	25b24 <__assert_fail@plt+0x145cc>
   25e1c:	b	25b68 <__assert_fail@plt+0x14610>
   25e20:	lsr	r3, r8, #23
   25e24:	lsl	r8, r8, #9
   25e28:	cmp	r3, #0
   25e2c:	lsl	r3, r9, #9
   25e30:	orr	r8, r8, r9, lsr #23
   25e34:	bne	25b68 <__assert_fail@plt+0x14610>
   25e38:	mov	r9, r3
   25e3c:	b	25b24 <__assert_fail@plt+0x145cc>
   25e40:	asr	r3, r7, #31
   25e44:	mov	r2, r7
   25e48:	cmp	r8, #0
   25e4c:	mov	r1, #0
   25e50:	strd	r2, [sp, #8]
   25e54:	umull	r2, r3, r9, r7
   25e58:	bne	25efc <__assert_fail@plt+0x149a4>
   25e5c:	mov	r0, r2
   25e60:	mov	ip, r3
   25e64:	cmp	r1, #0
   25e68:	bne	25b68 <__assert_fail@plt+0x14610>
   25e6c:	cmp	ip, #0
   25e70:	bne	25f44 <__assert_fail@plt+0x149ec>
   25e74:	umull	r2, r3, r0, r7
   25e78:	mov	r6, r2
   25e7c:	mov	r2, r3
   25e80:	cmp	r1, #0
   25e84:	mov	r9, r6
   25e88:	mov	r8, r2
   25e8c:	beq	25b24 <__assert_fail@plt+0x145cc>
   25e90:	b	25b68 <__assert_fail@plt+0x14610>
   25e94:	lsr	r3, r8, #22
   25e98:	lsl	r8, r8, #10
   25e9c:	cmp	r3, #0
   25ea0:	lsl	r3, r9, #10
   25ea4:	orr	r8, r8, r9, lsr #22
   25ea8:	beq	25e38 <__assert_fail@plt+0x148e0>
   25eac:	b	25b68 <__assert_fail@plt+0x14610>
   25eb0:	mov	r5, ip
   25eb4:	orr	r4, r0, r6
   25eb8:	b	25b24 <__assert_fail@plt+0x145cc>
   25ebc:	strd	r2, [sp, #8]
   25ec0:	mov	r3, ip
   25ec4:	ldr	r2, [sp, #12]
   25ec8:	umlal	r2, r3, r8, r7
   25ecc:	cmp	r3, #0
   25ed0:	bne	26004 <__assert_fail@plt+0x14aac>
   25ed4:	mov	r8, r2
   25ed8:	ldr	r9, [sp, #8]
   25edc:	b	25b60 <__assert_fail@plt+0x14608>
   25ee0:	orr	r4, r6, ip
   25ee4:	ldr	r5, [sp, #16]
   25ee8:	b	25b24 <__assert_fail@plt+0x145cc>
   25eec:	mov	r3, #2
   25ef0:	mov	r7, #1000	; 0x3e8
   25ef4:	str	r3, [sp, #4]
   25ef8:	b	259cc <__assert_fail@plt+0x14474>
   25efc:	strd	r2, [sp, #16]
   25f00:	mov	r3, r1
   25f04:	ldr	r2, [sp, #20]
   25f08:	umlal	r2, r3, r8, r7
   25f0c:	cmp	r3, #0
   25f10:	bne	260d4 <__assert_fail@plt+0x14b7c>
   25f14:	mov	ip, r2
   25f18:	ldr	r0, [sp, #16]
   25f1c:	b	25e64 <__assert_fail@plt+0x1490c>
   25f20:	mov	r2, r1
   25f24:	mov	r3, ip
   25f28:	umlal	r2, r3, r8, r7
   25f2c:	cmp	r3, #0
   25f30:	strd	r2, [sp, #16]
   25f34:	bne	25fa8 <__assert_fail@plt+0x14a50>
   25f38:	mov	r2, r0
   25f3c:	ldr	r3, [sp, #16]
   25f40:	b	25ad8 <__assert_fail@plt+0x14580>
   25f44:	umull	r8, r9, r0, r7
   25f48:	mov	r3, r1
   25f4c:	mov	r2, r9
   25f50:	umlal	r2, r3, ip, r7
   25f54:	cmp	r3, #0
   25f58:	bne	260b4 <__assert_fail@plt+0x14b5c>
   25f5c:	mov	r6, r8
   25f60:	b	25e80 <__assert_fail@plt+0x14928>
   25f64:	umull	r8, r9, ip, r7
   25f68:	mov	r3, r0
   25f6c:	mov	r2, r9
   25f70:	umlal	r2, r3, r1, r7
   25f74:	cmp	r3, #0
   25f78:	bne	260fc <__assert_fail@plt+0x14ba4>
   25f7c:	mov	r6, r8
   25f80:	b	25b14 <__assert_fail@plt+0x145bc>
   25f84:	umull	r8, r9, r2, r7
   25f88:	mov	r1, ip
   25f8c:	mov	r0, r9
   25f90:	umlal	r0, r1, r3, r7
   25f94:	cmp	r1, #0
   25f98:	bne	25fc8 <__assert_fail@plt+0x14a70>
   25f9c:	mov	ip, r8
   25fa0:	mov	r1, r0
   25fa4:	b	25af8 <__assert_fail@plt+0x145a0>
   25fa8:	ldr	lr, [sp, #8]
   25fac:	mov	r2, r0
   25fb0:	mov	ip, #1
   25fb4:	ldr	r3, [sp, #12]
   25fb8:	mul	r3, r9, r3
   25fbc:	mla	r3, lr, r8, r3
   25fc0:	add	r3, r3, r1
   25fc4:	b	25ad8 <__assert_fail@plt+0x14580>
   25fc8:	ldr	r1, [sp, #12]
   25fcc:	mov	lr, #1
   25fd0:	mov	ip, r8
   25fd4:	mul	r1, r2, r1
   25fd8:	ldr	r2, [sp, #8]
   25fdc:	mla	r1, r3, r2, r1
   25fe0:	add	r1, r1, r9
   25fe4:	b	25af8 <__assert_fail@plt+0x145a0>
   25fe8:	ldrd	r2, [sp, #8]
   25fec:	mov	r1, #1
   25ff0:	mul	r3, r9, r3
   25ff4:	mov	r9, r4
   25ff8:	mla	r8, r2, r8, r3
   25ffc:	add	r8, r8, r5
   26000:	b	25dbc <__assert_fail@plt+0x14864>
   26004:	mul	r3, r9, r1
   26008:	mov	ip, #1
   2600c:	mla	r8, r7, r8, r3
   26010:	ldrd	r6, [sp, #8]
   26014:	mov	r9, r6
   26018:	add	r8, r8, r7
   2601c:	b	25b60 <__assert_fail@plt+0x14608>
   26020:	movw	r3, #32088	; 0x7d58
   26024:	movt	r3, #2
   26028:	movw	r1, #32032	; 0x7d20
   2602c:	movt	r1, #2
   26030:	movw	r0, #32048	; 0x7d30
   26034:	movt	r0, #2
   26038:	mov	r2, #85	; 0x55
   2603c:	bl	11558 <__assert_fail@plt>
   26040:	ldr	r3, [sp, #12]
   26044:	mov	r1, #1
   26048:	mul	r2, r9, r3
   2604c:	ldr	r3, [sp, #8]
   26050:	mov	r9, r4
   26054:	mla	r8, r3, r8, r2
   26058:	add	r8, r8, r5
   2605c:	b	25bdc <__assert_fail@plt+0x14684>
   26060:	ldrd	r2, [sp, #8]
   26064:	mov	r1, #1
   26068:	mul	r3, r9, r3
   2606c:	mov	r9, r4
   26070:	mla	r8, r2, r8, r3
   26074:	add	r8, r8, r5
   26078:	b	25ccc <__assert_fail@plt+0x14774>
   2607c:	ldrd	r2, [sp, #8]
   26080:	mov	r1, #1
   26084:	mul	r3, r9, r3
   26088:	mov	r9, r4
   2608c:	mla	r8, r2, r8, r3
   26090:	add	r8, r8, r5
   26094:	b	25d44 <__assert_fail@plt+0x147ec>
   26098:	ldrd	r2, [sp, #8]
   2609c:	mov	r1, #1
   260a0:	mul	r3, r9, r3
   260a4:	mov	r9, r4
   260a8:	mla	r8, r2, r8, r3
   260ac:	add	r8, r8, r5
   260b0:	b	25c54 <__assert_fail@plt+0x146fc>
   260b4:	ldr	r3, [sp, #12]
   260b8:	mov	r6, r8
   260bc:	mov	r1, #1
   260c0:	mul	r2, r0, r3
   260c4:	ldr	r3, [sp, #8]
   260c8:	mla	r2, ip, r3, r2
   260cc:	add	r2, r2, r9
   260d0:	b	25e80 <__assert_fail@plt+0x14928>
   260d4:	ldr	r3, [sp, #12]
   260d8:	mov	r1, #1
   260dc:	ldr	r2, [sp, #16]
   260e0:	mul	ip, r9, r3
   260e4:	ldr	r3, [sp, #8]
   260e8:	mov	r0, r2
   260ec:	mla	ip, r3, r8, ip
   260f0:	ldr	r3, [sp, #20]
   260f4:	add	ip, ip, r3
   260f8:	b	25e64 <__assert_fail@plt+0x1490c>
   260fc:	ldr	r3, [sp, #12]
   26100:	mov	r6, r8
   26104:	mov	r0, #1
   26108:	mul	r2, ip, r3
   2610c:	ldr	r3, [sp, #8]
   26110:	mla	r2, r1, r3, r2
   26114:	add	r2, r2, r9
   26118:	b	25b14 <__assert_fail@plt+0x145bc>
   2611c:	cmp	r1, #0
   26120:	cmpne	r0, #0
   26124:	beq	26170 <__assert_fail@plt+0x14c18>
   26128:	strd	r4, [sp, #-16]!
   2612c:	umull	r4, r5, r0, r1
   26130:	str	r6, [sp, #8]
   26134:	str	lr, [sp, #12]
   26138:	adds	r3, r5, #0
   2613c:	movne	r3, #1
   26140:	cmp	r4, #0
   26144:	blt	26150 <__assert_fail@plt+0x14bf8>
   26148:	cmp	r3, #0
   2614c:	beq	2617c <__assert_fail@plt+0x14c24>
   26150:	bl	1142c <__errno_location@plt>
   26154:	mov	r3, #12
   26158:	ldrd	r4, [sp]
   2615c:	ldr	r6, [sp, #8]
   26160:	add	sp, sp, #12
   26164:	str	r3, [r0]
   26168:	mov	r0, #0
   2616c:	pop	{pc}		; (ldr pc, [sp], #4)
   26170:	mov	r1, #1
   26174:	mov	r0, r1
   26178:	b	111b0 <calloc@plt>
   2617c:	ldrd	r4, [sp]
   26180:	ldr	r6, [sp, #8]
   26184:	ldr	lr, [sp, #12]
   26188:	add	sp, sp, #16
   2618c:	b	111b0 <calloc@plt>
   26190:	cmp	r0, #0
   26194:	beq	261a0 <__assert_fail@plt+0x14c48>
   26198:	blt	261a8 <__assert_fail@plt+0x14c50>
   2619c:	b	1139c <malloc@plt>
   261a0:	mov	r0, #1
   261a4:	b	1139c <malloc@plt>
   261a8:	str	r4, [sp, #-8]!
   261ac:	str	lr, [sp, #4]
   261b0:	bl	1142c <__errno_location@plt>
   261b4:	mov	r3, #12
   261b8:	ldr	r4, [sp]
   261bc:	add	sp, sp, #4
   261c0:	str	r3, [r0]
   261c4:	mov	r0, #0
   261c8:	pop	{pc}		; (ldr pc, [sp], #4)
   261cc:	cmp	r0, #0
   261d0:	beq	261f8 <__assert_fail@plt+0x14ca0>
   261d4:	cmp	r1, #0
   261d8:	str	r4, [sp, #-8]!
   261dc:	str	lr, [sp, #4]
   261e0:	beq	26200 <__assert_fail@plt+0x14ca8>
   261e4:	blt	26214 <__assert_fail@plt+0x14cbc>
   261e8:	ldr	r4, [sp]
   261ec:	ldr	lr, [sp, #4]
   261f0:	add	sp, sp, #8
   261f4:	b	112f4 <realloc@plt>
   261f8:	mov	r0, r1
   261fc:	b	26190 <__assert_fail@plt+0x14c38>
   26200:	bl	13b9c <__assert_fail@plt+0x2644>
   26204:	ldr	r4, [sp]
   26208:	add	sp, sp, #4
   2620c:	mov	r0, #0
   26210:	pop	{pc}		; (ldr pc, [sp], #4)
   26214:	bl	1142c <__errno_location@plt>
   26218:	mov	r3, #12
   2621c:	str	r3, [r0]
   26220:	b	26204 <__assert_fail@plt+0x14cac>
   26224:	strd	r4, [sp, #-16]!
   26228:	mov	r4, r0
   2622c:	str	r6, [sp, #8]
   26230:	str	lr, [sp, #12]
   26234:	bl	1136c <__fpending@plt>
   26238:	ldr	r5, [r4]
   2623c:	mov	r6, r0
   26240:	mov	r0, r4
   26244:	bl	13958 <__assert_fail@plt+0x2400>
   26248:	mov	r4, r0
   2624c:	and	r5, r5, #32
   26250:	cmp	r5, #0
   26254:	bne	2628c <__assert_fail@plt+0x14d34>
   26258:	cmp	r0, #0
   2625c:	beq	26278 <__assert_fail@plt+0x14d20>
   26260:	cmp	r6, #0
   26264:	bne	262a4 <__assert_fail@plt+0x14d4c>
   26268:	bl	1142c <__errno_location@plt>
   2626c:	ldr	r4, [r0]
   26270:	subs	r4, r4, #9
   26274:	mvnne	r4, #0
   26278:	mov	r0, r4
   2627c:	ldrd	r4, [sp]
   26280:	ldr	r6, [sp, #8]
   26284:	add	sp, sp, #12
   26288:	pop	{pc}		; (ldr pc, [sp], #4)
   2628c:	cmp	r0, #0
   26290:	bne	262a4 <__assert_fail@plt+0x14d4c>
   26294:	bl	1142c <__errno_location@plt>
   26298:	str	r4, [r0]
   2629c:	mvn	r4, #0
   262a0:	b	26278 <__assert_fail@plt+0x14d20>
   262a4:	mvn	r4, #0
   262a8:	b	26278 <__assert_fail@plt+0x14d20>
   262ac:	ldr	ip, [r0, #4]
   262b0:	cmp	ip, r1
   262b4:	bcs	26320 <__assert_fail@plt+0x14dc8>
   262b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   262bc:	mov	r5, r1
   262c0:	mov	r4, r0
   262c4:	strd	r6, [sp, #8]
   262c8:	umull	r6, r7, r1, r3
   262cc:	str	r8, [sp, #16]
   262d0:	mov	r8, r3
   262d4:	str	lr, [sp, #20]
   262d8:	cmp	r7, #0
   262dc:	bne	26364 <__assert_fail@plt+0x14e0c>
   262e0:	ldr	r0, [r0, #8]
   262e4:	cmp	r0, r2
   262e8:	beq	26330 <__assert_fail@plt+0x14dd8>
   262ec:	mov	r1, r6
   262f0:	bl	261cc <__assert_fail@plt+0x14c74>
   262f4:	subs	r6, r0, #0
   262f8:	beq	2635c <__assert_fail@plt+0x14e04>
   262fc:	mov	r3, #1
   26300:	str	r5, [r4]
   26304:	stmib	r4, {r5, r6}
   26308:	ldrd	r4, [sp]
   2630c:	mov	r0, r3
   26310:	ldrd	r6, [sp, #8]
   26314:	ldr	r8, [sp, #16]
   26318:	add	sp, sp, #20
   2631c:	pop	{pc}		; (ldr pc, [sp], #4)
   26320:	mov	r3, #1
   26324:	str	r1, [r0]
   26328:	mov	r0, r3
   2632c:	bx	lr
   26330:	mov	r0, r6
   26334:	bl	26190 <__assert_fail@plt+0x14c38>
   26338:	subs	r6, r0, #0
   2633c:	beq	2635c <__assert_fail@plt+0x14e04>
   26340:	ldr	r1, [r4, #8]
   26344:	cmp	r1, #0
   26348:	beq	262fc <__assert_fail@plt+0x14da4>
   2634c:	ldr	r2, [r4]
   26350:	mul	r2, r2, r8
   26354:	bl	11264 <memcpy@plt>
   26358:	b	262fc <__assert_fail@plt+0x14da4>
   2635c:	mov	r3, #0
   26360:	b	26308 <__assert_fail@plt+0x14db0>
   26364:	bl	1142c <__errno_location@plt>
   26368:	mov	r2, #12
   2636c:	mov	r3, #0
   26370:	str	r2, [r0]
   26374:	b	26308 <__assert_fail@plt+0x14db0>
   26378:	push	{r1, r2, r3}
   2637c:	strd	r4, [sp, #-20]!	; 0xffffffec
   26380:	strd	r6, [sp, #8]
   26384:	str	lr, [sp, #16]
   26388:	sub	sp, sp, #8
   2638c:	ldr	r1, [sp, #28]
   26390:	add	r2, sp, #32
   26394:	str	r2, [sp, #4]
   26398:	cmp	r1, #0
   2639c:	beq	26478 <__assert_fail@plt+0x14f20>
   263a0:	movw	r3, #1030	; 0x406
   263a4:	mov	r6, r0
   263a8:	cmp	r1, r3
   263ac:	beq	26488 <__assert_fail@plt+0x14f30>
   263b0:	cmp	r1, #11
   263b4:	beq	26430 <__assert_fail@plt+0x14ed8>
   263b8:	ble	26410 <__assert_fail@plt+0x14eb8>
   263bc:	movw	r2, #1031	; 0x407
   263c0:	cmp	r1, r2
   263c4:	bgt	2644c <__assert_fail@plt+0x14ef4>
   263c8:	cmp	r1, r3
   263cc:	bge	263dc <__assert_fail@plt+0x14e84>
   263d0:	movw	r3, #1025	; 0x401
   263d4:	cmp	r1, r3
   263d8:	beq	26430 <__assert_fail@plt+0x14ed8>
   263dc:	ldr	r3, [sp, #4]
   263e0:	mov	r0, r6
   263e4:	ldr	r2, [r3]
   263e8:	bl	114b0 <fcntl64@plt>
   263ec:	mov	r4, r0
   263f0:	mov	r0, r4
   263f4:	add	sp, sp, #8
   263f8:	ldrd	r4, [sp]
   263fc:	ldrd	r6, [sp, #8]
   26400:	ldr	lr, [sp, #16]
   26404:	add	sp, sp, #20
   26408:	add	sp, sp, #12
   2640c:	bx	lr
   26410:	cmp	r1, #4
   26414:	beq	263dc <__assert_fail@plt+0x14e84>
   26418:	bgt	26440 <__assert_fail@plt+0x14ee8>
   2641c:	cmp	r1, #2
   26420:	beq	263dc <__assert_fail@plt+0x14e84>
   26424:	bgt	26430 <__assert_fail@plt+0x14ed8>
   26428:	cmp	r1, #1
   2642c:	bne	263dc <__assert_fail@plt+0x14e84>
   26430:	mov	r0, r6
   26434:	bl	114b0 <fcntl64@plt>
   26438:	mov	r4, r0
   2643c:	b	263f0 <__assert_fail@plt+0x14e98>
   26440:	cmp	r1, #9
   26444:	bne	263dc <__assert_fail@plt+0x14e84>
   26448:	b	26430 <__assert_fail@plt+0x14ed8>
   2644c:	movw	r3, #1033	; 0x409
   26450:	cmp	r1, r3
   26454:	beq	263dc <__assert_fail@plt+0x14e84>
   26458:	blt	26430 <__assert_fail@plt+0x14ed8>
   2645c:	movw	r3, #1034	; 0x40a
   26460:	cmp	r1, r3
   26464:	bne	263dc <__assert_fail@plt+0x14e84>
   26468:	mov	r0, r6
   2646c:	bl	114b0 <fcntl64@plt>
   26470:	mov	r4, r0
   26474:	b	263f0 <__assert_fail@plt+0x14e98>
   26478:	ldr	r2, [sp, #32]
   2647c:	bl	114b0 <fcntl64@plt>
   26480:	mov	r4, r0
   26484:	b	263f0 <__assert_fail@plt+0x14e98>
   26488:	movw	r5, #33776	; 0x83f0
   2648c:	movt	r5, #3
   26490:	ldr	r7, [r2]
   26494:	add	r2, sp, #36	; 0x24
   26498:	ldr	r3, [r5]
   2649c:	str	r2, [sp, #4]
   264a0:	mov	r2, r7
   264a4:	cmp	r3, #0
   264a8:	blt	264c4 <__assert_fail@plt+0x14f6c>
   264ac:	bl	114b0 <fcntl64@plt>
   264b0:	subs	r4, r0, #0
   264b4:	blt	2652c <__assert_fail@plt+0x14fd4>
   264b8:	mov	r3, #1
   264bc:	str	r3, [r5]
   264c0:	b	263f0 <__assert_fail@plt+0x14e98>
   264c4:	mov	r1, #0
   264c8:	bl	114b0 <fcntl64@plt>
   264cc:	subs	r4, r0, #0
   264d0:	blt	263f0 <__assert_fail@plt+0x14e98>
   264d4:	ldr	r3, [r5]
   264d8:	cmn	r3, #1
   264dc:	bne	263f0 <__assert_fail@plt+0x14e98>
   264e0:	mov	r1, #1
   264e4:	mov	r0, r4
   264e8:	bl	114b0 <fcntl64@plt>
   264ec:	subs	r2, r0, #0
   264f0:	blt	2650c <__assert_fail@plt+0x14fb4>
   264f4:	orr	r2, r2, #1
   264f8:	mov	r1, #2
   264fc:	mov	r0, r4
   26500:	bl	114b0 <fcntl64@plt>
   26504:	cmn	r0, #1
   26508:	bne	263f0 <__assert_fail@plt+0x14e98>
   2650c:	bl	1142c <__errno_location@plt>
   26510:	mov	r5, r0
   26514:	mov	r0, r4
   26518:	ldr	r6, [r5]
   2651c:	mvn	r4, #0
   26520:	bl	11540 <close@plt>
   26524:	str	r6, [r5]
   26528:	b	263f0 <__assert_fail@plt+0x14e98>
   2652c:	bl	1142c <__errno_location@plt>
   26530:	ldr	r3, [r0]
   26534:	cmp	r3, #22
   26538:	bne	264b8 <__assert_fail@plt+0x14f60>
   2653c:	mov	r2, r7
   26540:	mov	r0, r6
   26544:	mov	r1, #0
   26548:	bl	114b0 <fcntl64@plt>
   2654c:	subs	r4, r0, #0
   26550:	mvnge	r3, #0
   26554:	strge	r3, [r5]
   26558:	bge	264e0 <__assert_fail@plt+0x14f88>
   2655c:	b	263f0 <__assert_fail@plt+0x14e98>
   26560:	mov	r0, #14
   26564:	str	r4, [sp, #-8]!
   26568:	str	lr, [sp, #4]
   2656c:	bl	114e0 <nl_langinfo@plt>
   26570:	cmp	r0, #0
   26574:	beq	26598 <__assert_fail@plt+0x15040>
   26578:	ldrb	r2, [r0]
   2657c:	movw	r3, #32100	; 0x7d64
   26580:	movt	r3, #2
   26584:	ldr	r4, [sp]
   26588:	add	sp, sp, #4
   2658c:	cmp	r2, #0
   26590:	moveq	r0, r3
   26594:	pop	{pc}		; (ldr pc, [sp], #4)
   26598:	ldr	r4, [sp]
   2659c:	add	sp, sp, #4
   265a0:	movw	r0, #32100	; 0x7d64
   265a4:	movt	r0, #2
   265a8:	pop	{pc}		; (ldr pc, [sp], #4)
   265ac:	strd	r4, [sp, #-20]!	; 0xffffffec
   265b0:	mov	r5, r2
   265b4:	strd	r6, [sp, #8]
   265b8:	subs	r6, r0, #0
   265bc:	mov	r7, r1
   265c0:	str	lr, [sp, #16]
   265c4:	sub	sp, sp, #12
   265c8:	addeq	r6, sp, #4
   265cc:	mov	r0, r6
   265d0:	bl	11378 <mbrtowc@plt>
   265d4:	cmp	r5, #0
   265d8:	cmnne	r0, #3
   265dc:	mov	r4, r0
   265e0:	bhi	265fc <__assert_fail@plt+0x150a4>
   265e4:	mov	r0, r4
   265e8:	add	sp, sp, #12
   265ec:	ldrd	r4, [sp]
   265f0:	ldrd	r6, [sp, #8]
   265f4:	add	sp, sp, #16
   265f8:	pop	{pc}		; (ldr pc, [sp], #4)
   265fc:	mov	r0, #0
   26600:	bl	26654 <__assert_fail@plt+0x150fc>
   26604:	cmp	r0, #0
   26608:	bne	265e4 <__assert_fail@plt+0x1508c>
   2660c:	ldrb	r3, [r7]
   26610:	mov	r4, #1
   26614:	str	r3, [r6]
   26618:	b	265e4 <__assert_fail@plt+0x1508c>
   2661c:	umull	r2, r3, r1, r2
   26620:	cmp	r3, #0
   26624:	bne	26630 <__assert_fail@plt+0x150d8>
   26628:	mov	r1, r2
   2662c:	b	261cc <__assert_fail@plt+0x14c74>
   26630:	str	r4, [sp, #-8]!
   26634:	str	lr, [sp, #4]
   26638:	bl	1142c <__errno_location@plt>
   2663c:	mov	r3, #12
   26640:	ldr	r4, [sp]
   26644:	add	sp, sp, #4
   26648:	str	r3, [r0]
   2664c:	mov	r0, #0
   26650:	pop	{pc}		; (ldr pc, [sp], #4)
   26654:	push	{lr}		; (str lr, [sp, #-4]!)
   26658:	sub	sp, sp, #268	; 0x10c
   2665c:	movw	r2, #257	; 0x101
   26660:	add	r1, sp, #4
   26664:	bl	266ac <__assert_fail@plt+0x15154>
   26668:	cmp	r0, #0
   2666c:	movne	r0, #0
   26670:	bne	266a4 <__assert_fail@plt+0x1514c>
   26674:	movw	r1, #32108	; 0x7d6c
   26678:	movt	r1, #2
   2667c:	add	r0, sp, #4
   26680:	bl	111f8 <strcmp@plt>
   26684:	cmp	r0, #0
   26688:	beq	266a4 <__assert_fail@plt+0x1514c>
   2668c:	add	r0, sp, #4
   26690:	movw	r1, #32112	; 0x7d70
   26694:	movt	r1, #2
   26698:	bl	111f8 <strcmp@plt>
   2669c:	adds	r0, r0, #0
   266a0:	movne	r0, #1
   266a4:	add	sp, sp, #268	; 0x10c
   266a8:	pop	{pc}		; (ldr pc, [sp], #4)
   266ac:	strd	r4, [sp, #-16]!
   266b0:	mov	r5, r1
   266b4:	mov	r1, #0
   266b8:	mov	r4, r2
   266bc:	str	r6, [sp, #8]
   266c0:	str	lr, [sp, #12]
   266c4:	bl	114bc <setlocale@plt>
   266c8:	subs	r6, r0, #0
   266cc:	beq	2674c <__assert_fail@plt+0x151f4>
   266d0:	bl	11414 <strlen@plt>
   266d4:	cmp	r4, r0
   266d8:	bhi	266f8 <__assert_fail@plt+0x151a0>
   266dc:	cmp	r4, #0
   266e0:	moveq	r0, #34	; 0x22
   266e4:	bne	2671c <__assert_fail@plt+0x151c4>
   266e8:	ldrd	r4, [sp]
   266ec:	ldr	r6, [sp, #8]
   266f0:	add	sp, sp, #12
   266f4:	pop	{pc}		; (ldr pc, [sp], #4)
   266f8:	add	r2, r0, #1
   266fc:	mov	r1, r6
   26700:	mov	r0, r5
   26704:	bl	11264 <memcpy@plt>
   26708:	ldrd	r4, [sp]
   2670c:	mov	r0, #0
   26710:	ldr	r6, [sp, #8]
   26714:	add	sp, sp, #12
   26718:	pop	{pc}		; (ldr pc, [sp], #4)
   2671c:	sub	r4, r4, #1
   26720:	mov	r1, r6
   26724:	mov	r2, r4
   26728:	mov	r0, r5
   2672c:	bl	11264 <memcpy@plt>
   26730:	mov	r3, #0
   26734:	mov	r0, #34	; 0x22
   26738:	strb	r3, [r5, r4]
   2673c:	ldrd	r4, [sp]
   26740:	ldr	r6, [sp, #8]
   26744:	add	sp, sp, #12
   26748:	pop	{pc}		; (ldr pc, [sp], #4)
   2674c:	cmp	r4, #0
   26750:	mov	r0, #22
   26754:	strbne	r6, [r5]
   26758:	ldrd	r4, [sp]
   2675c:	ldr	r6, [sp, #8]
   26760:	add	sp, sp, #12
   26764:	pop	{pc}		; (ldr pc, [sp], #4)
   26768:	mov	r1, #0
   2676c:	b	114bc <setlocale@plt>
   26770:	cmp	r3, #0
   26774:	cmpeq	r2, #0
   26778:	bne	2679c <__assert_fail@plt+0x15244>
   2677c:	cmp	r1, #0
   26780:	movlt	r1, #-2147483648	; 0x80000000
   26784:	movlt	r0, #0
   26788:	blt	26798 <__assert_fail@plt+0x15240>
   2678c:	cmpeq	r0, #0
   26790:	mvnne	r1, #-2147483648	; 0x80000000
   26794:	mvnne	r0, #0
   26798:	b	26880 <__assert_fail@plt+0x15328>
   2679c:	sub	sp, sp, #8
   267a0:	push	{sp, lr}
   267a4:	cmp	r1, #0
   267a8:	blt	267c8 <__assert_fail@plt+0x15270>
   267ac:	cmp	r3, #0
   267b0:	blt	267fc <__assert_fail@plt+0x152a4>
   267b4:	bl	26890 <__assert_fail@plt+0x15338>
   267b8:	ldr	lr, [sp, #4]
   267bc:	add	sp, sp, #8
   267c0:	pop	{r2, r3}
   267c4:	bx	lr
   267c8:	rsbs	r0, r0, #0
   267cc:	sbc	r1, r1, r1, lsl #1
   267d0:	cmp	r3, #0
   267d4:	blt	26820 <__assert_fail@plt+0x152c8>
   267d8:	bl	26890 <__assert_fail@plt+0x15338>
   267dc:	ldr	lr, [sp, #4]
   267e0:	add	sp, sp, #8
   267e4:	pop	{r2, r3}
   267e8:	rsbs	r0, r0, #0
   267ec:	sbc	r1, r1, r1, lsl #1
   267f0:	rsbs	r2, r2, #0
   267f4:	sbc	r3, r3, r3, lsl #1
   267f8:	bx	lr
   267fc:	rsbs	r2, r2, #0
   26800:	sbc	r3, r3, r3, lsl #1
   26804:	bl	26890 <__assert_fail@plt+0x15338>
   26808:	ldr	lr, [sp, #4]
   2680c:	add	sp, sp, #8
   26810:	pop	{r2, r3}
   26814:	rsbs	r0, r0, #0
   26818:	sbc	r1, r1, r1, lsl #1
   2681c:	bx	lr
   26820:	rsbs	r2, r2, #0
   26824:	sbc	r3, r3, r3, lsl #1
   26828:	bl	26890 <__assert_fail@plt+0x15338>
   2682c:	ldr	lr, [sp, #4]
   26830:	add	sp, sp, #8
   26834:	pop	{r2, r3}
   26838:	rsbs	r2, r2, #0
   2683c:	sbc	r3, r3, r3, lsl #1
   26840:	bx	lr
   26844:	cmp	r3, #0
   26848:	cmpeq	r2, #0
   2684c:	bne	26864 <__assert_fail@plt+0x1530c>
   26850:	cmp	r1, #0
   26854:	cmpeq	r0, #0
   26858:	mvnne	r1, #0
   2685c:	mvnne	r0, #0
   26860:	b	26880 <__assert_fail@plt+0x15328>
   26864:	sub	sp, sp, #8
   26868:	push	{sp, lr}
   2686c:	bl	26890 <__assert_fail@plt+0x15338>
   26870:	ldr	lr, [sp, #4]
   26874:	add	sp, sp, #8
   26878:	pop	{r2, r3}
   2687c:	bx	lr
   26880:	push	{r1, lr}
   26884:	mov	r0, #8
   26888:	bl	111d4 <raise@plt>
   2688c:	pop	{r1, pc}
   26890:	cmp	r1, r3
   26894:	cmpeq	r0, r2
   26898:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2689c:	mov	r4, r0
   268a0:	movcc	r0, #0
   268a4:	mov	r5, r1
   268a8:	ldr	lr, [sp, #36]	; 0x24
   268ac:	movcc	r1, r0
   268b0:	bcc	269ac <__assert_fail@plt+0x15454>
   268b4:	cmp	r3, #0
   268b8:	clzeq	ip, r2
   268bc:	clzne	ip, r3
   268c0:	addeq	ip, ip, #32
   268c4:	cmp	r5, #0
   268c8:	clzeq	r1, r4
   268cc:	addeq	r1, r1, #32
   268d0:	clzne	r1, r5
   268d4:	sub	ip, ip, r1
   268d8:	sub	sl, ip, #32
   268dc:	lsl	r9, r3, ip
   268e0:	rsb	fp, ip, #32
   268e4:	orr	r9, r9, r2, lsl sl
   268e8:	orr	r9, r9, r2, lsr fp
   268ec:	lsl	r8, r2, ip
   268f0:	cmp	r5, r9
   268f4:	cmpeq	r4, r8
   268f8:	movcc	r0, #0
   268fc:	movcc	r1, r0
   26900:	bcc	2691c <__assert_fail@plt+0x153c4>
   26904:	mov	r0, #1
   26908:	subs	r4, r4, r8
   2690c:	lsl	r1, r0, sl
   26910:	orr	r1, r1, r0, lsr fp
   26914:	lsl	r0, r0, ip
   26918:	sbc	r5, r5, r9
   2691c:	cmp	ip, #0
   26920:	beq	269ac <__assert_fail@plt+0x15454>
   26924:	lsr	r6, r8, #1
   26928:	orr	r6, r6, r9, lsl #31
   2692c:	lsr	r7, r9, #1
   26930:	mov	r2, ip
   26934:	b	26958 <__assert_fail@plt+0x15400>
   26938:	subs	r3, r4, r6
   2693c:	sbc	r8, r5, r7
   26940:	adds	r3, r3, r3
   26944:	adc	r8, r8, r8
   26948:	adds	r4, r3, #1
   2694c:	adc	r5, r8, #0
   26950:	subs	r2, r2, #1
   26954:	beq	26974 <__assert_fail@plt+0x1541c>
   26958:	cmp	r5, r7
   2695c:	cmpeq	r4, r6
   26960:	bcs	26938 <__assert_fail@plt+0x153e0>
   26964:	adds	r4, r4, r4
   26968:	adc	r5, r5, r5
   2696c:	subs	r2, r2, #1
   26970:	bne	26958 <__assert_fail@plt+0x15400>
   26974:	lsr	r3, r4, ip
   26978:	orr	r3, r3, r5, lsl fp
   2697c:	lsr	r2, r5, ip
   26980:	orr	r3, r3, r5, lsr sl
   26984:	adds	r0, r0, r4
   26988:	mov	r4, r3
   2698c:	lsl	r3, r2, ip
   26990:	orr	r3, r3, r4, lsl sl
   26994:	lsl	ip, r4, ip
   26998:	orr	r3, r3, r4, lsr fp
   2699c:	adc	r1, r1, r5
   269a0:	subs	r0, r0, ip
   269a4:	mov	r5, r2
   269a8:	sbc	r1, r1, r3
   269ac:	cmp	lr, #0
   269b0:	strdne	r4, [lr]
   269b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   269b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   269bc:	mov	r7, r0
   269c0:	ldr	r6, [pc, #72]	; 26a10 <__assert_fail@plt+0x154b8>
   269c4:	ldr	r5, [pc, #72]	; 26a14 <__assert_fail@plt+0x154bc>
   269c8:	add	r6, pc, r6
   269cc:	add	r5, pc, r5
   269d0:	sub	r6, r6, r5
   269d4:	mov	r8, r1
   269d8:	mov	r9, r2
   269dc:	bl	11178 <pthread_mutex_unlock@plt-0x20>
   269e0:	asrs	r6, r6, #2
   269e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   269e8:	mov	r4, #0
   269ec:	add	r4, r4, #1
   269f0:	ldr	r3, [r5], #4
   269f4:	mov	r2, r9
   269f8:	mov	r1, r8
   269fc:	mov	r0, r7
   26a00:	blx	r3
   26a04:	cmp	r6, r4
   26a08:	bne	269ec <__assert_fail@plt+0x15494>
   26a0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26a10:	andeq	r1, r1, r4, asr #10
   26a14:	andeq	r1, r1, ip, lsr r5
   26a18:	bx	lr
   26a1c:	ldr	r3, [pc, #12]	; 26a30 <__assert_fail@plt+0x154d8>
   26a20:	mov	r1, #0
   26a24:	add	r3, pc, r3
   26a28:	ldr	r2, [r3]
   26a2c:	b	11450 <__cxa_atexit@plt>
   26a30:	andeq	r1, r1, ip, lsr #14

Disassembly of section .fini:

00026a34 <.fini>:
   26a34:	push	{r3, lr}
   26a38:	pop	{r3, pc}
