
../repos/findutils/xargs/xargs:     file format elf32-littlearm


Disassembly of section .init:

0001140c <.init>:
   1140c:	push	{r3, lr}
   11410:	bl	1184c <__assert_fail@plt+0x48>
   11414:	pop	{r3, pc}

Disassembly of section .plt:

00011418 <fdopen@plt-0x14>:
   11418:	push	{lr}		; (str lr, [sp, #-4]!)
   1141c:	ldr	lr, [pc, #4]	; 11428 <fdopen@plt-0x4>
   11420:	add	lr, pc, lr
   11424:	ldr	pc, [lr, #8]!
   11428:	ldrdeq	fp, [r1], -r8

0001142c <fdopen@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #110592	; 0x1b000
   11434:	ldr	pc, [ip, #3032]!	; 0xbd8

00011438 <calloc@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #110592	; 0x1b000
   11440:	ldr	pc, [ip, #3024]!	; 0xbd0

00011444 <strcmp@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #110592	; 0x1b000
   1144c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011450 <strtol@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #110592	; 0x1b000
   11458:	ldr	pc, [ip, #3008]!	; 0xbc0

0001145c <printf@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #110592	; 0x1b000
   11464:	ldr	pc, [ip, #3000]!	; 0xbb8

00011468 <read@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #110592	; 0x1b000
   11470:	ldr	pc, [ip, #2992]!	; 0xbb0

00011474 <fflush@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #110592	; 0x1b000
   1147c:	ldr	pc, [ip, #2984]!	; 0xba8

00011480 <wcwidth@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #110592	; 0x1b000
   11488:	ldr	pc, [ip, #2976]!	; 0xba0

0001148c <free@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #110592	; 0x1b000
   11494:	ldr	pc, [ip, #2968]!	; 0xb98

00011498 <ferror@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #110592	; 0x1b000
   114a0:	ldr	pc, [ip, #2960]!	; 0xb90

000114a4 <_exit@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #110592	; 0x1b000
   114ac:	ldr	pc, [ip, #2952]!	; 0xb88

000114b0 <memcpy@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #110592	; 0x1b000
   114b8:	ldr	pc, [ip, #2944]!	; 0xb80

000114bc <execvp@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #110592	; 0x1b000
   114c4:	ldr	pc, [ip, #2936]!	; 0xb78

000114c8 <mbsinit@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #110592	; 0x1b000
   114d0:	ldr	pc, [ip, #2928]!	; 0xb70

000114d4 <signal@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #110592	; 0x1b000
   114dc:	ldr	pc, [ip, #2920]!	; 0xb68

000114e0 <memcmp@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #110592	; 0x1b000
   114e8:	ldr	pc, [ip, #2912]!	; 0xb60

000114ec <dcgettext@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #110592	; 0x1b000
   114f4:	ldr	pc, [ip, #2904]!	; 0xb58

000114f8 <sysconf@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #110592	; 0x1b000
   11500:	ldr	pc, [ip, #2896]!	; 0xb50

00011504 <dup2@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #110592	; 0x1b000
   1150c:	ldr	pc, [ip, #2888]!	; 0xb48

00011510 <getrlimit64@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #110592	; 0x1b000
   11518:	ldr	pc, [ip, #2880]!	; 0xb40

0001151c <realloc@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #110592	; 0x1b000
   11524:	ldr	pc, [ip, #2872]!	; 0xb38

00011528 <textdomain@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #110592	; 0x1b000
   11530:	ldr	pc, [ip, #2864]!	; 0xb30

00011534 <iswcntrl@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #110592	; 0x1b000
   1153c:	ldr	pc, [ip, #2856]!	; 0xb28

00011540 <iswprint@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #110592	; 0x1b000
   11548:	ldr	pc, [ip, #2848]!	; 0xb20

0001154c <poll@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #110592	; 0x1b000
   11554:	ldr	pc, [ip, #2840]!	; 0xb18

00011558 <sigaction@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #110592	; 0x1b000
   11560:	ldr	pc, [ip, #2832]!	; 0xb10

00011564 <fwrite@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #110592	; 0x1b000
   1156c:	ldr	pc, [ip, #2824]!	; 0xb08

00011570 <lseek64@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #110592	; 0x1b000
   11578:	ldr	pc, [ip, #2816]!	; 0xb00

0001157c <waitpid@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #110592	; 0x1b000
   11584:	ldr	pc, [ip, #2808]!	; 0xaf8

00011588 <__ctype_get_mb_cur_max@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #110592	; 0x1b000
   11590:	ldr	pc, [ip, #2800]!	; 0xaf0

00011594 <strcpy@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #110592	; 0x1b000
   1159c:	ldr	pc, [ip, #2792]!	; 0xae8

000115a0 <__fpending@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #110592	; 0x1b000
   115a8:	ldr	pc, [ip, #2784]!	; 0xae0

000115ac <mbrtowc@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #110592	; 0x1b000
   115b4:	ldr	pc, [ip, #2776]!	; 0xad8

000115b8 <error@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #110592	; 0x1b000
   115c0:	ldr	pc, [ip, #2768]!	; 0xad0

000115c4 <opendir@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #110592	; 0x1b000
   115cc:	ldr	pc, [ip, #2760]!	; 0xac8

000115d0 <open64@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #110592	; 0x1b000
   115d8:	ldr	pc, [ip, #2752]!	; 0xac0

000115dc <getenv@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #110592	; 0x1b000
   115e4:	ldr	pc, [ip, #2744]!	; 0xab8

000115e8 <malloc@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #110592	; 0x1b000
   115f0:	ldr	pc, [ip, #2736]!	; 0xab0

000115f4 <__libc_start_main@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #110592	; 0x1b000
   115fc:	ldr	pc, [ip, #2728]!	; 0xaa8

00011600 <__freading@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #110592	; 0x1b000
   11608:	ldr	pc, [ip, #2720]!	; 0xaa0

0001160c <__gmon_start__@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #110592	; 0x1b000
   11614:	ldr	pc, [ip, #2712]!	; 0xa98

00011618 <getopt_long@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #110592	; 0x1b000
   11620:	ldr	pc, [ip, #2704]!	; 0xa90

00011624 <__ctype_b_loc@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #110592	; 0x1b000
   1162c:	ldr	pc, [ip, #2696]!	; 0xa88

00011630 <getpid@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #110592	; 0x1b000
   11638:	ldr	pc, [ip, #2688]!	; 0xa80

0001163c <exit@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #110592	; 0x1b000
   11644:	ldr	pc, [ip, #2680]!	; 0xa78

00011648 <strtoul@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #110592	; 0x1b000
   11650:	ldr	pc, [ip, #2672]!	; 0xa70

00011654 <strlen@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #110592	; 0x1b000
   1165c:	ldr	pc, [ip, #2664]!	; 0xa68

00011660 <strchr@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #110592	; 0x1b000
   11668:	ldr	pc, [ip, #2656]!	; 0xa60

0001166c <setenv@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #110592	; 0x1b000
   11674:	ldr	pc, [ip, #2648]!	; 0xa58

00011678 <fprintf@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #110592	; 0x1b000
   11680:	ldr	pc, [ip, #2640]!	; 0xa50

00011684 <__errno_location@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #110592	; 0x1b000
   1168c:	ldr	pc, [ip, #2632]!	; 0xa48

00011690 <snprintf@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #110592	; 0x1b000
   11698:	ldr	pc, [ip, #2624]!	; 0xa40

0001169c <__cxa_atexit@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #110592	; 0x1b000
   116a4:	ldr	pc, [ip, #2616]!	; 0xa38

000116a8 <memset@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #110592	; 0x1b000
   116b0:	ldr	pc, [ip, #2608]!	; 0xa30

000116b4 <strncpy@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #110592	; 0x1b000
   116bc:	ldr	pc, [ip, #2600]!	; 0xa28

000116c0 <write@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #110592	; 0x1b000
   116c8:	ldr	pc, [ip, #2592]!	; 0xa20

000116cc <fileno@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #110592	; 0x1b000
   116d4:	ldr	pc, [ip, #2584]!	; 0xa18

000116d8 <memchr@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #110592	; 0x1b000
   116e0:	ldr	pc, [ip, #2576]!	; 0xa10

000116e4 <fclose@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #110592	; 0x1b000
   116ec:	ldr	pc, [ip, #2568]!	; 0xa08

000116f0 <strnlen@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #110592	; 0x1b000
   116f8:	ldr	pc, [ip, #2560]!	; 0xa00

000116fc <pipe@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #110592	; 0x1b000
   11704:	ldr	pc, [ip, #2552]!	; 0x9f8

00011708 <fseeko64@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #110592	; 0x1b000
   11710:	ldr	pc, [ip, #2544]!	; 0x9f0

00011714 <fcntl64@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #110592	; 0x1b000
   1171c:	ldr	pc, [ip, #2536]!	; 0x9e8

00011720 <setlocale@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #110592	; 0x1b000
   11728:	ldr	pc, [ip, #2528]!	; 0x9e0

0001172c <sigemptyset@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #110592	; 0x1b000
   11734:	ldr	pc, [ip, #2520]!	; 0x9d8

00011738 <fork@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #110592	; 0x1b000
   11740:	ldr	pc, [ip, #2512]!	; 0x9d0

00011744 <strrchr@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #110592	; 0x1b000
   1174c:	ldr	pc, [ip, #2504]!	; 0x9c8

00011750 <nl_langinfo@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #110592	; 0x1b000
   11758:	ldr	pc, [ip, #2496]!	; 0x9c0

0001175c <fputc@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #110592	; 0x1b000
   11764:	ldr	pc, [ip, #2488]!	; 0x9b8

00011768 <readdir64@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #110592	; 0x1b000
   11770:	ldr	pc, [ip, #2480]!	; 0x9b0

00011774 <fdopendir@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #110592	; 0x1b000
   1177c:	ldr	pc, [ip, #2472]!	; 0x9a8

00011780 <putc@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #110592	; 0x1b000
   11788:	ldr	pc, [ip, #2464]!	; 0x9a0

0001178c <dirfd@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #110592	; 0x1b000
   11794:	ldr	pc, [ip, #2456]!	; 0x998

00011798 <bindtextdomain@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #110592	; 0x1b000
   117a0:	ldr	pc, [ip, #2448]!	; 0x990

000117a4 <isatty@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #110592	; 0x1b000
   117ac:	ldr	pc, [ip, #2440]!	; 0x988

000117b0 <unsetenv@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #110592	; 0x1b000
   117b8:	ldr	pc, [ip, #2432]!	; 0x980

000117bc <fputs@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #110592	; 0x1b000
   117c4:	ldr	pc, [ip, #2424]!	; 0x978

000117c8 <strncmp@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #110592	; 0x1b000
   117d0:	ldr	pc, [ip, #2416]!	; 0x970

000117d4 <abort@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #110592	; 0x1b000
   117dc:	ldr	pc, [ip, #2408]!	; 0x968

000117e0 <getc@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #110592	; 0x1b000
   117e8:	ldr	pc, [ip, #2400]!	; 0x960

000117ec <close@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #110592	; 0x1b000
   117f4:	ldr	pc, [ip, #2392]!	; 0x958

000117f8 <closedir@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #110592	; 0x1b000
   11800:	ldr	pc, [ip, #2384]!	; 0x950

00011804 <__assert_fail@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #110592	; 0x1b000
   1180c:	ldr	pc, [ip, #2376]!	; 0x948

Disassembly of section .text:

00011810 <.text>:
   11810:	mov	fp, #0
   11814:	mov	lr, #0
   11818:	pop	{r1}		; (ldr r1, [sp], #4)
   1181c:	mov	r2, sp
   11820:	push	{r2}		; (str r2, [sp, #-4]!)
   11824:	push	{r0}		; (str r0, [sp, #-4]!)
   11828:	ldr	ip, [pc, #16]	; 11840 <__assert_fail@plt+0x3c>
   1182c:	push	{ip}		; (str ip, [sp, #-4]!)
   11830:	ldr	r0, [pc, #12]	; 11844 <__assert_fail@plt+0x40>
   11834:	ldr	r3, [pc, #12]	; 11848 <__assert_fail@plt+0x44>
   11838:	bl	115f4 <__libc_start_main@plt>
   1183c:	bl	117d4 <abort@plt>
   11840:	andeq	sl, r1, r8, ror #12
   11844:	andeq	r1, r1, r0, lsl #18
   11848:	andeq	sl, r1, r8, lsl #12
   1184c:	ldr	r3, [pc, #20]	; 11868 <__assert_fail@plt+0x64>
   11850:	ldr	r2, [pc, #20]	; 1186c <__assert_fail@plt+0x68>
   11854:	add	r3, pc, r3
   11858:	ldr	r2, [r3, r2]
   1185c:	cmp	r2, #0
   11860:	bxeq	lr
   11864:	b	1160c <__gmon_start__@plt>
   11868:	andeq	fp, r1, r4, lsr #15
   1186c:	andeq	r0, r0, r8, asr r1
   11870:	ldr	r0, [pc, #24]	; 11890 <__assert_fail@plt+0x8c>
   11874:	ldr	r3, [pc, #24]	; 11894 <__assert_fail@plt+0x90>
   11878:	cmp	r3, r0
   1187c:	bxeq	lr
   11880:	ldr	r3, [pc, #16]	; 11898 <__assert_fail@plt+0x94>
   11884:	cmp	r3, #0
   11888:	bxeq	lr
   1188c:	bx	r3
   11890:			; <UNDEFINED> instruction: 0x0002d1b8
   11894:			; <UNDEFINED> instruction: 0x0002d1b8
   11898:	andeq	r0, r0, r0
   1189c:	ldr	r0, [pc, #36]	; 118c8 <__assert_fail@plt+0xc4>
   118a0:	ldr	r1, [pc, #36]	; 118cc <__assert_fail@plt+0xc8>
   118a4:	sub	r1, r1, r0
   118a8:	asr	r1, r1, #2
   118ac:	add	r1, r1, r1, lsr #31
   118b0:	asrs	r1, r1, #1
   118b4:	bxeq	lr
   118b8:	ldr	r3, [pc, #16]	; 118d0 <__assert_fail@plt+0xcc>
   118bc:	cmp	r3, #0
   118c0:	bxeq	lr
   118c4:	bx	r3
   118c8:			; <UNDEFINED> instruction: 0x0002d1b8
   118cc:			; <UNDEFINED> instruction: 0x0002d1b8
   118d0:	andeq	r0, r0, r0
   118d4:	push	{r4, lr}
   118d8:	ldr	r4, [pc, #24]	; 118f8 <__assert_fail@plt+0xf4>
   118dc:	ldrb	r3, [r4]
   118e0:	cmp	r3, #0
   118e4:	popne	{r4, pc}
   118e8:	bl	11870 <__assert_fail@plt+0x6c>
   118ec:	mov	r3, #1
   118f0:	strb	r3, [r4]
   118f4:	pop	{r4, pc}
   118f8:	andeq	sp, r2, r4, ror #3
   118fc:	b	1189c <__assert_fail@plt+0x98>
   11900:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11904:	add	fp, sp, #28
   11908:	sub	sp, sp, #212	; 0xd4
   1190c:	mov	r9, r0
   11910:	mov	r0, #0
   11914:	mov	sl, r1
   11918:	strb	r0, [fp, #-40]	; 0xffffffd8
   1191c:	movw	r0, #25445	; 0x6365
   11920:	movt	r0, #28520	; 0x6f68
   11924:	str	r0, [fp, #-44]	; 0xffffffd4
   11928:	ldr	r0, [r1]
   1192c:	cmp	r0, #0
   11930:	movweq	r0, #42645	; 0xa695
   11934:	movteq	r0, #1
   11938:	bl	16a6c <__assert_fail@plt+0x5268>
   1193c:	bl	15190 <__assert_fail@plt+0x398c>
   11940:	bl	11630 <getpid@plt>
   11944:	movw	r1, #53736	; 0xd1e8
   11948:	movt	r1, #2
   1194c:	str	r0, [r1]
   11950:	movw	r1, #53740	; 0xd1ec
   11954:	mov	r0, #0
   11958:	movt	r1, #2
   1195c:	str	r0, [r1]
   11960:	movw	r1, #45955	; 0xb383
   11964:	mov	r0, #6
   11968:	movt	r1, #1
   1196c:	bl	11720 <setlocale@plt>
   11970:	movw	r4, #50134	; 0xc3d6
   11974:	movw	r1, #42651	; 0xa69b
   11978:	movt	r4, #1
   1197c:	movt	r1, #1
   11980:	mov	r0, r4
   11984:	bl	11798 <bindtextdomain@plt>
   11988:	mov	r0, r4
   1198c:	bl	11528 <textdomain@plt>
   11990:	movw	r0, #23240	; 0x5ac8
   11994:	movt	r0, #1
   11998:	bl	1a66c <__assert_fail@plt+0x8e68>
   1199c:	cmp	r0, #0
   119a0:	bne	12bf4 <__assert_fail@plt+0x13f0>
   119a4:	movw	r0, #13288	; 0x33e8
   119a8:	movt	r0, #1
   119ac:	bl	1a66c <__assert_fail@plt+0x8e68>
   119b0:	cmp	r0, #0
   119b4:	bne	12bf4 <__assert_fail@plt+0x13f0>
   119b8:	movw	r5, #53744	; 0xd1f0
   119bc:	mov	r1, #2048	; 0x800
   119c0:	movt	r5, #2
   119c4:	mov	r0, r5
   119c8:	bl	14ec8 <__assert_fail@plt+0x36c4>
   119cc:	mov	r4, r0
   119d0:	sub	r0, r0, #1
   119d4:	cmp	r0, #2
   119d8:	str	r4, [sp, #36]	; 0x24
   119dc:	bcs	119ec <__assert_fail@plt+0x1e8>
   119e0:	movw	r0, #13444	; 0x3484
   119e4:	movt	r0, #1
   119e8:	b	11a48 <__assert_fail@plt+0x244>
   119ec:	mov	r0, #0
   119f0:	bl	114f8 <sysconf@plt>
   119f4:	cmp	r0, #1
   119f8:	blt	11a1c <__assert_fail@plt+0x218>
   119fc:	cmp	r0, #2048	; 0x800
   11a00:	ble	12d30 <__assert_fail@plt+0x152c>
   11a04:	ldr	r1, [r5, #12]
   11a08:	sub	r0, r0, #2048	; 0x800
   11a0c:	cmp	r1, r0
   11a10:	movcc	r0, r1
   11a14:	str	r0, [r5, #12]
   11a18:	b	11a20 <__assert_fail@plt+0x21c>
   11a1c:	ldr	r0, [r5, #12]
   11a20:	mov	r1, #0
   11a24:	cmp	r1, r0, lsr #11
   11a28:	beq	12cf0 <__assert_fail@plt+0x14ec>
   11a2c:	movw	r0, #13488	; 0x34b0
   11a30:	movt	r0, #1
   11a34:	str	r0, [r5, #32]
   11a38:	mov	r0, r5
   11a3c:	bl	14fcc <__assert_fail@plt+0x37c8>
   11a40:	movw	r0, #13284	; 0x33e4
   11a44:	movt	r0, #1
   11a48:	str	r0, [sp, #40]	; 0x28
   11a4c:	movw	r0, #11688	; 0x2da8
   11a50:	movw	r4, #48652	; 0xbe0c
   11a54:	mov	r6, #0
   11a58:	mov	r8, #1
   11a5c:	movt	r0, #1
   11a60:	movt	r4, #1
   11a64:	str	r0, [sp, #48]	; 0x30
   11a68:	movw	r0, #50863	; 0xc6af
   11a6c:	movt	r0, #1
   11a70:	str	r0, [sp, #44]	; 0x2c
   11a74:	mov	r0, #1
   11a78:	str	r0, [sp, #32]
   11a7c:	mov	r0, #0
   11a80:	b	11a8c <__assert_fail@plt+0x288>
   11a84:	strb	r8, [r0]
   11a88:	mov	r0, r7
   11a8c:	movw	r2, #42795	; 0xa72b
   11a90:	mov	r7, r0
   11a94:	sub	r0, fp, #36	; 0x24
   11a98:	mov	r1, sl
   11a9c:	mov	r3, r4
   11aa0:	str	r0, [sp]
   11aa4:	mov	r0, r9
   11aa8:	movt	r2, #1
   11aac:	bl	11618 <getopt_long@plt>
   11ab0:	sub	r1, r0, #48	; 0x30
   11ab4:	cmp	r1, #208	; 0xd0
   11ab8:	bhi	12484 <__assert_fail@plt+0xc80>
   11abc:	add	r2, pc, #4
   11ac0:	mov	r0, #1
   11ac4:	ldr	pc, [r2, r1, lsl #2]
   11ac8:	andeq	r2, r1, r4, asr r0
   11acc:	andeq	r2, r1, r4, ror #23
   11ad0:	andeq	r2, r1, r4, ror #23
   11ad4:	andeq	r2, r1, r4, ror #23
   11ad8:	andeq	r2, r1, r4, ror #23
   11adc:	andeq	r2, r1, r4, ror #23
   11ae0:	andeq	r2, r1, r4, ror #23
   11ae4:	andeq	r2, r1, r4, ror #23
   11ae8:	andeq	r2, r1, r4, ror #23
   11aec:	andeq	r2, r1, r4, ror #23
   11af0:	andeq	r2, r1, r4, ror #23
   11af4:	andeq	r2, r1, r4, ror #23
   11af8:	andeq	r2, r1, r4, ror #23
   11afc:	andeq	r2, r1, r4, ror #23
   11b00:	andeq	r2, r1, r4, ror #23
   11b04:	andeq	r2, r1, r4, ror #23
   11b08:	andeq	r2, r1, r4, ror #23
   11b0c:	andeq	r2, r1, r4, ror #23
   11b10:	andeq	r2, r1, r4, ror #23
   11b14:	andeq	r2, r1, r4, ror #23
   11b18:	andeq	r2, r1, r4, ror #23
   11b1c:	andeq	r1, r1, ip, lsl #28
   11b20:	andeq	r2, r1, r4, ror #23
   11b24:	andeq	r2, r1, r4, ror #23
   11b28:	andeq	r2, r1, r4, ror #23
   11b2c:	andeq	r1, r1, ip, lsr lr
   11b30:	andeq	r2, r1, r4, ror #23
   11b34:	andeq	r2, r1, r4, ror #23
   11b38:	andeq	r1, r1, r4, lsr #31
   11b3c:	andeq	r2, r1, r4, ror #23
   11b40:	andeq	r2, r1, r4, ror #23
   11b44:	andeq	r2, r1, r4, ror #23
   11b48:	andeq	r2, r1, r8, asr r1
   11b4c:	andeq	r2, r1, r4, ror #23
   11b50:	andeq	r2, r1, r4, ror #23
   11b54:	andeq	r1, r1, ip, lsl #21
   11b58:	andeq	r2, r1, r4, ror #23
   11b5c:	andeq	r2, r1, r4, ror #23
   11b60:	andeq	r2, r1, r4, ror #23
   11b64:	andeq	r2, r1, r4, ror #23
   11b68:	andeq	r2, r1, r4, ror #23
   11b6c:	andeq	r2, r1, r4, ror #23
   11b70:	andeq	r2, r1, r4, ror #23
   11b74:	andeq	r2, r1, r4, ror #23
   11b78:	andeq	r2, r1, r4, ror #23
   11b7c:	andeq	r2, r1, r4, ror #23
   11b80:	andeq	r2, r1, r4, ror #23
   11b84:	andeq	r2, r1, r4, ror #23
   11b88:	andeq	r2, r1, r4, ror #23
   11b8c:	andeq	r2, r1, r4, lsr r2
   11b90:	andeq	r2, r1, r4, ror #23
   11b94:	andeq	r2, r1, r4, ror #23
   11b98:	andeq	r2, r1, r0, lsl #2
   11b9c:	andeq	r1, r1, ip, lsl #28
   11ba0:	andeq	r2, r1, r4, ror #23
   11ba4:	andeq	r2, r1, r4, ror #23
   11ba8:	andeq	r2, r1, ip, ror #23
   11bac:	andeq	r1, r1, ip, lsr lr
   11bb0:	andeq	r2, r1, r4, ror #23
   11bb4:	andeq	r2, r1, r4, ror #23
   11bb8:	andeq	r1, r1, r8, ror pc
   11bbc:	andeq	r2, r1, r4, ror #23
   11bc0:	muleq	r1, ip, r1
   11bc4:	andeq	r2, r1, r8, asr #32
   11bc8:	andeq	r2, r1, r4, lsl #3
   11bcc:	andeq	r2, r1, r4, ror #23
   11bd0:	andeq	r1, r1, ip, lsl #30
   11bd4:	andeq	r2, r1, r4, ror r0
   11bd8:	andeq	r1, r1, r0, lsl #30
   11bdc:	andeq	r2, r1, r4, ror #23
   11be0:	andeq	r2, r1, ip, lsr #12
   11be4:	andeq	r2, r1, r4, ror #23
   11be8:	andeq	r1, r1, ip, lsl pc
   11bec:	andeq	r2, r1, r4, ror #23
   11bf0:	andeq	r2, r1, r4, ror #23
   11bf4:	andeq	r2, r1, r4, ror #23
   11bf8:	andeq	r2, r1, r4, ror #23
   11bfc:	andeq	r2, r1, r4, ror #23
   11c00:	andeq	r2, r1, r4, ror #23
   11c04:	andeq	r2, r1, r4, ror #23
   11c08:	andeq	r2, r1, r4, ror #23
   11c0c:	andeq	r2, r1, r4, ror #23
   11c10:	andeq	r2, r1, r4, ror #23
   11c14:	andeq	r2, r1, r4, ror #23
   11c18:	andeq	r2, r1, r4, ror #23
   11c1c:	andeq	r2, r1, r4, ror #23
   11c20:	andeq	r2, r1, r4, ror #23
   11c24:	andeq	r2, r1, r4, ror #23
   11c28:	andeq	r2, r1, r4, ror #23
   11c2c:	andeq	r2, r1, r4, ror #23
   11c30:	andeq	r2, r1, r4, ror #23
   11c34:	andeq	r2, r1, r4, ror #23
   11c38:	andeq	r2, r1, r4, ror #23
   11c3c:	andeq	r2, r1, r4, ror #23
   11c40:	andeq	r2, r1, r4, ror #23
   11c44:	andeq	r2, r1, r4, ror #23
   11c48:	andeq	r2, r1, r4, ror #23
   11c4c:	andeq	r2, r1, r4, ror #23
   11c50:	andeq	r2, r1, r4, ror #23
   11c54:	andeq	r2, r1, r4, ror #23
   11c58:	andeq	r2, r1, r4, ror #23
   11c5c:	andeq	r2, r1, r4, ror #23
   11c60:	andeq	r2, r1, r4, ror #23
   11c64:	andeq	r2, r1, r4, ror #23
   11c68:	andeq	r2, r1, r4, ror #23
   11c6c:	andeq	r2, r1, r4, ror #23
   11c70:	andeq	r2, r1, r4, ror #23
   11c74:	andeq	r2, r1, r4, ror #23
   11c78:	andeq	r2, r1, r4, ror #23
   11c7c:	andeq	r2, r1, r4, ror #23
   11c80:	andeq	r2, r1, r4, ror #23
   11c84:	andeq	r2, r1, r4, ror #23
   11c88:	andeq	r2, r1, r4, ror #23
   11c8c:	andeq	r2, r1, r4, ror #23
   11c90:	andeq	r2, r1, r4, ror #23
   11c94:	andeq	r2, r1, r4, ror #23
   11c98:	andeq	r2, r1, r4, ror #23
   11c9c:	andeq	r2, r1, r4, ror #23
   11ca0:	andeq	r2, r1, r4, ror #23
   11ca4:	andeq	r2, r1, r4, ror #23
   11ca8:	andeq	r2, r1, r4, ror #23
   11cac:	andeq	r2, r1, r4, ror #23
   11cb0:	andeq	r2, r1, r4, ror #23
   11cb4:	andeq	r2, r1, r4, ror #23
   11cb8:	andeq	r2, r1, r4, ror #23
   11cbc:	andeq	r2, r1, r4, ror #23
   11cc0:	andeq	r2, r1, r4, ror #23
   11cc4:	andeq	r2, r1, r4, ror #23
   11cc8:	andeq	r2, r1, r4, ror #23
   11ccc:	andeq	r2, r1, r4, ror #23
   11cd0:	andeq	r2, r1, r4, ror #23
   11cd4:	andeq	r2, r1, r4, ror #23
   11cd8:	andeq	r2, r1, r4, ror #23
   11cdc:	andeq	r2, r1, r4, ror #23
   11ce0:	andeq	r2, r1, r4, ror #23
   11ce4:	andeq	r2, r1, r4, ror #23
   11ce8:	andeq	r2, r1, r4, ror #23
   11cec:	andeq	r2, r1, r4, ror #23
   11cf0:	andeq	r2, r1, r4, ror #23
   11cf4:	andeq	r2, r1, r4, ror #23
   11cf8:	andeq	r2, r1, r4, ror #23
   11cfc:	andeq	r2, r1, r4, ror #23
   11d00:	andeq	r2, r1, r4, ror #23
   11d04:	andeq	r2, r1, r4, ror #23
   11d08:	andeq	r2, r1, r4, ror #23
   11d0c:	andeq	r2, r1, r4, ror #23
   11d10:	andeq	r2, r1, r4, ror #23
   11d14:	andeq	r2, r1, r4, ror #23
   11d18:	andeq	r2, r1, r4, ror #23
   11d1c:	andeq	r2, r1, r4, ror #23
   11d20:	andeq	r2, r1, r4, ror #23
   11d24:	andeq	r2, r1, r4, ror #23
   11d28:	andeq	r2, r1, r4, ror #23
   11d2c:	andeq	r2, r1, r4, ror #23
   11d30:	andeq	r2, r1, r4, ror #23
   11d34:	andeq	r2, r1, r4, ror #23
   11d38:	andeq	r2, r1, r4, ror #23
   11d3c:	andeq	r2, r1, r4, ror #23
   11d40:	andeq	r2, r1, r4, ror #23
   11d44:	andeq	r2, r1, r4, ror #23
   11d48:	andeq	r2, r1, r4, ror #23
   11d4c:	andeq	r2, r1, r4, ror #23
   11d50:	andeq	r2, r1, r4, ror #23
   11d54:	andeq	r2, r1, r4, ror #23
   11d58:	andeq	r2, r1, r4, ror #23
   11d5c:	andeq	r2, r1, r4, ror #23
   11d60:	andeq	r2, r1, r4, ror #23
   11d64:	andeq	r2, r1, r4, ror #23
   11d68:	andeq	r2, r1, r4, ror #23
   11d6c:	andeq	r2, r1, r4, ror #23
   11d70:	andeq	r2, r1, r4, ror #23
   11d74:	andeq	r2, r1, r4, ror #23
   11d78:	andeq	r2, r1, r4, ror #23
   11d7c:	andeq	r2, r1, r4, ror #23
   11d80:	andeq	r2, r1, r4, ror #23
   11d84:	andeq	r2, r1, r4, ror #23
   11d88:	andeq	r2, r1, r4, ror #23
   11d8c:	andeq	r2, r1, r4, ror #23
   11d90:	andeq	r2, r1, r4, ror #23
   11d94:	andeq	r2, r1, r4, ror #23
   11d98:	andeq	r2, r1, r4, ror #23
   11d9c:	andeq	r2, r1, r4, ror #23
   11da0:	andeq	r2, r1, r4, ror #23
   11da4:	andeq	r2, r1, r4, ror #23
   11da8:	andeq	r2, r1, r4, ror #23
   11dac:	andeq	r2, r1, r4, ror #23
   11db0:	andeq	r2, r1, r4, ror #23
   11db4:	andeq	r2, r1, r4, ror #23
   11db8:	andeq	r2, r1, r4, ror #23
   11dbc:	andeq	r2, r1, r4, ror #23
   11dc0:	andeq	r2, r1, r4, ror #23
   11dc4:	andeq	r2, r1, r4, ror #23
   11dc8:	andeq	r2, r1, r4, ror #23
   11dcc:	andeq	r2, r1, r4, ror #23
   11dd0:	andeq	r2, r1, r4, ror #23
   11dd4:	andeq	r2, r1, r4, ror #23
   11dd8:	andeq	r2, r1, r4, ror #23
   11ddc:	andeq	r2, r1, r4, ror #23
   11de0:	andeq	r2, r1, r4, ror #23
   11de4:	andeq	r2, r1, r4, ror #23
   11de8:	andeq	r2, r1, r4, ror #23
   11dec:	andeq	r2, r1, r4, ror #23
   11df0:	andeq	r2, r1, r4, ror #23
   11df4:	andeq	r2, r1, r4, ror #23
   11df8:	andeq	r2, r1, r4, ror #23
   11dfc:	andeq	r2, r1, r4, ror #23
   11e00:	andeq	r2, r1, r4, ror #23
   11e04:	andeq	r2, r1, r4, ror #23
   11e08:	andeq	r1, r1, r8, lsr #30
   11e0c:	movw	r0, #53728	; 0xd1e0
   11e10:	movt	r0, #2
   11e14:	ldr	r0, [r0]
   11e18:	cmp	r0, #0
   11e1c:	ldrbne	r1, [r0]
   11e20:	cmpne	r1, #0
   11e24:	bne	1224c <__assert_fail@plt+0xa48>
   11e28:	movw	r0, #53792	; 0xd220
   11e2c:	movt	r0, #2
   11e30:	str	r6, [r0]
   11e34:	mov	r0, r7
   11e38:	b	11a8c <__assert_fail@plt+0x288>
   11e3c:	movw	r0, #53728	; 0xd1e0
   11e40:	movw	r1, #42828	; 0xa74c
   11e44:	movt	r0, #2
   11e48:	movt	r1, #1
   11e4c:	ldr	r0, [r0]
   11e50:	cmp	r0, #0
   11e54:	moveq	r0, r1
   11e58:	str	r0, [r5, #24]
   11e5c:	ldr	r0, [r5, #40]	; 0x28
   11e60:	cmp	r0, #0
   11e64:	beq	11ea8 <__assert_fail@plt+0x6a4>
   11e68:	movw	r1, #44541	; 0xadfd
   11e6c:	mov	r0, #0
   11e70:	mov	r2, #5
   11e74:	movt	r1, #1
   11e78:	bl	114ec <dcgettext@plt>
   11e7c:	mov	r2, r0
   11e80:	movw	r0, #42831	; 0xa74f
   11e84:	movw	r3, #42847	; 0xa75f
   11e88:	mov	r1, #0
   11e8c:	movt	r0, #1
   11e90:	movt	r3, #1
   11e94:	str	r0, [sp]
   11e98:	mov	r0, #0
   11e9c:	str	r3, [sp, #4]
   11ea0:	bl	115b8 <error@plt>
   11ea4:	str	r6, [r5, #40]	; 0x28
   11ea8:	ldr	r0, [r5, #36]	; 0x24
   11eac:	cmp	r0, #0
   11eb0:	mov	r0, r7
   11eb4:	beq	11a8c <__assert_fail@plt+0x288>
   11eb8:	movw	r1, #44541	; 0xadfd
   11ebc:	mov	r0, #0
   11ec0:	mov	r2, #5
   11ec4:	movt	r1, #1
   11ec8:	bl	114ec <dcgettext@plt>
   11ecc:	mov	r2, r0
   11ed0:	movw	r0, #42831	; 0xa74f
   11ed4:	movw	r3, #42858	; 0xa76a
   11ed8:	mov	r1, #0
   11edc:	movt	r0, #1
   11ee0:	movt	r3, #1
   11ee4:	str	r0, [sp]
   11ee8:	mov	r0, #0
   11eec:	str	r3, [sp, #4]
   11ef0:	bl	115b8 <error@plt>
   11ef4:	str	r6, [r5, #36]	; 0x24
   11ef8:	mov	r0, r7
   11efc:	b	11a8c <__assert_fail@plt+0x288>
   11f00:	movw	r0, #53796	; 0xd224
   11f04:	movt	r0, #2
   11f08:	b	11a84 <__assert_fail@plt+0x280>
   11f0c:	mov	r0, #0
   11f10:	str	r0, [sp, #32]
   11f14:	mov	r0, r7
   11f18:	b	11a8c <__assert_fail@plt+0x288>
   11f1c:	str	r8, [r5]
   11f20:	mov	r0, r7
   11f24:	b	11a8c <__assert_fail@plt+0x288>
   11f28:	movw	r0, #53728	; 0xd1e0
   11f2c:	mov	r6, r4
   11f30:	mov	r1, #61	; 0x3d
   11f34:	movt	r0, #2
   11f38:	ldr	r4, [r0]
   11f3c:	mov	r0, r4
   11f40:	bl	11660 <strchr@plt>
   11f44:	cmp	r0, #0
   11f48:	bne	12c5c <__assert_fail@plt+0x1458>
   11f4c:	movw	r0, #53800	; 0xd228
   11f50:	movt	r0, #2
   11f54:	str	r4, [r0]
   11f58:	mov	r0, r4
   11f5c:	bl	117b0 <unsetenv@plt>
   11f60:	cmp	r0, #0
   11f64:	mov	r4, r6
   11f68:	mov	r0, r7
   11f6c:	mov	r6, #0
   11f70:	beq	11a8c <__assert_fail@plt+0x288>
   11f74:	b	12c88 <__assert_fail@plt+0x1484>
   11f78:	movw	r0, #53728	; 0xd1e0
   11f7c:	movt	r0, #2
   11f80:	ldr	r0, [r0]
   11f84:	cmp	r0, #0
   11f88:	beq	122fc <__assert_fail@plt+0xaf8>
   11f8c:	mov	r1, #108	; 0x6c
   11f90:	mov	r2, #1
   11f94:	mvn	r3, #0
   11f98:	str	r8, [sp]
   11f9c:	bl	13f98 <__assert_fail@plt+0x2794>
   11fa0:	b	12300 <__assert_fail@plt+0xafc>
   11fa4:	movw	r0, #53728	; 0xd1e0
   11fa8:	mov	r1, #76	; 0x4c
   11fac:	mov	r2, #1
   11fb0:	mvn	r3, #0
   11fb4:	str	r8, [sp]
   11fb8:	movt	r0, #2
   11fbc:	ldr	r0, [r0]
   11fc0:	bl	13f98 <__assert_fail@plt+0x2794>
   11fc4:	str	r0, [r5, #36]	; 0x24
   11fc8:	ldr	r0, [r5, #40]	; 0x28
   11fcc:	cmp	r0, #0
   11fd0:	beq	12014 <__assert_fail@plt+0x810>
   11fd4:	movw	r1, #44541	; 0xadfd
   11fd8:	mov	r0, #0
   11fdc:	mov	r2, #5
   11fe0:	movt	r1, #1
   11fe4:	bl	114ec <dcgettext@plt>
   11fe8:	mov	r2, r0
   11fec:	movw	r0, #42870	; 0xa776
   11ff0:	movw	r3, #42847	; 0xa75f
   11ff4:	mov	r1, #0
   11ff8:	movt	r0, #1
   11ffc:	movt	r3, #1
   12000:	str	r0, [sp]
   12004:	mov	r0, #0
   12008:	str	r3, [sp, #4]
   1200c:	bl	115b8 <error@plt>
   12010:	str	r6, [r5, #40]	; 0x28
   12014:	ldr	r0, [r5, #24]
   12018:	cmp	r0, #0
   1201c:	mov	r0, r7
   12020:	beq	11a8c <__assert_fail@plt+0x288>
   12024:	movw	r1, #44541	; 0xadfd
   12028:	mov	r0, #0
   1202c:	mov	r2, #5
   12030:	movt	r1, #1
   12034:	bl	114ec <dcgettext@plt>
   12038:	mov	r2, r0
   1203c:	movw	r0, #42870	; 0xa776
   12040:	movt	r0, #1
   12044:	b	123a4 <__assert_fail@plt+0xba0>
   12048:	movw	r0, #53797	; 0xd225
   1204c:	movt	r0, #2
   12050:	b	11a84 <__assert_fail@plt+0x280>
   12054:	movw	r0, #53788	; 0xd21c
   12058:	movt	r0, #2
   1205c:	strb	r6, [r0]
   12060:	movw	r0, #15116	; 0x3b0c
   12064:	movt	r0, #1
   12068:	str	r0, [sp, #48]	; 0x30
   1206c:	mov	r0, r7
   12070:	b	11a8c <__assert_fail@plt+0x288>
   12074:	ldr	r0, [sp, #40]	; 0x28
   12078:	mov	r8, #0
   1207c:	mov	r6, r4
   12080:	blx	r0
   12084:	movw	r0, #53728	; 0xd1e0
   12088:	ldr	r3, [r5, #4]
   1208c:	mov	r1, #115	; 0x73
   12090:	mov	r2, #1
   12094:	str	r8, [sp]
   12098:	movt	r0, #2
   1209c:	ldr	r0, [r0]
   120a0:	bl	13f98 <__assert_fail@plt+0x2794>
   120a4:	mov	r4, r0
   120a8:	ldr	r0, [r5, #4]
   120ac:	cmp	r4, r0
   120b0:	bls	120e8 <__assert_fail@plt+0x8e4>
   120b4:	movw	r1, #42912	; 0xa7a0
   120b8:	mov	r0, #0
   120bc:	mov	r2, #5
   120c0:	movt	r1, #1
   120c4:	bl	114ec <dcgettext@plt>
   120c8:	mov	r2, r0
   120cc:	ldr	r0, [r5, #4]
   120d0:	mov	r1, #0
   120d4:	mov	r3, r4
   120d8:	str	r0, [sp]
   120dc:	mov	r0, #0
   120e0:	bl	115b8 <error@plt>
   120e4:	ldr	r4, [r5, #4]
   120e8:	str	r4, [r5, #12]
   120ec:	mov	r4, r6
   120f0:	mov	r0, r7
   120f4:	mov	r6, #0
   120f8:	mov	r8, #1
   120fc:	b	11a8c <__assert_fail@plt+0x288>
   12100:	movw	r0, #53728	; 0xd1e0
   12104:	movt	r0, #2
   12108:	ldr	r6, [r0]
   1210c:	mov	r0, r6
   12110:	bl	11654 <strlen@plt>
   12114:	mov	r1, r0
   12118:	ldrb	r0, [r6]
   1211c:	cmp	r1, #1
   12120:	bne	12260 <__assert_fail@plt+0xa5c>
   12124:	movw	r1, #53788	; 0xd21c
   12128:	movw	r5, #53744	; 0xd1f0
   1212c:	movw	r4, #48652	; 0xbe0c
   12130:	mov	r6, #0
   12134:	movt	r1, #2
   12138:	movt	r5, #2
   1213c:	movt	r4, #1
   12140:	strb	r0, [r1]
   12144:	movw	r0, #15116	; 0x3b0c
   12148:	movt	r0, #1
   1214c:	str	r0, [sp, #48]	; 0x30
   12150:	mov	r0, r7
   12154:	b	11a8c <__assert_fail@plt+0x288>
   12158:	movw	r0, #53728	; 0xd1e0
   1215c:	mov	r1, #80	; 0x50
   12160:	mov	r2, #0
   12164:	mvn	r3, #-2147483648	; 0x80000000
   12168:	str	r8, [sp]
   1216c:	movt	r0, #2
   12170:	ldr	r0, [r0]
   12174:	bl	13f98 <__assert_fail@plt+0x2794>
   12178:	movw	r1, #53608	; 0xd168
   1217c:	movt	r1, #2
   12180:	b	12254 <__assert_fail@plt+0xa50>
   12184:	movw	r0, #53796	; 0xd224
   12188:	movt	r0, #2
   1218c:	strb	r8, [r0]
   12190:	movw	r0, #53798	; 0xd226
   12194:	movt	r0, #2
   12198:	b	11a84 <__assert_fail@plt+0x280>
   1219c:	movw	r0, #53728	; 0xd1e0
   121a0:	mov	r1, #110	; 0x6e
   121a4:	mov	r2, #1
   121a8:	mvn	r3, #0
   121ac:	str	r8, [sp]
   121b0:	movt	r0, #2
   121b4:	ldr	r0, [r0]
   121b8:	bl	13f98 <__assert_fail@plt+0x2794>
   121bc:	str	r0, [r5, #40]	; 0x28
   121c0:	ldr	r0, [r5, #36]	; 0x24
   121c4:	cmp	r0, #0
   121c8:	beq	1220c <__assert_fail@plt+0xa08>
   121cc:	movw	r1, #44541	; 0xadfd
   121d0:	mov	r0, #0
   121d4:	mov	r2, #5
   121d8:	movt	r1, #1
   121dc:	bl	114ec <dcgettext@plt>
   121e0:	mov	r2, r0
   121e4:	movw	r0, #42898	; 0xa792
   121e8:	movw	r3, #42858	; 0xa76a
   121ec:	mov	r1, #0
   121f0:	movt	r0, #1
   121f4:	movt	r3, #1
   121f8:	str	r0, [sp]
   121fc:	mov	r0, #0
   12200:	str	r3, [sp, #4]
   12204:	bl	115b8 <error@plt>
   12208:	str	r6, [r5, #36]	; 0x24
   1220c:	ldr	r0, [r5, #24]
   12210:	cmp	r0, #0
   12214:	mov	r0, r7
   12218:	beq	11a8c <__assert_fail@plt+0x288>
   1221c:	ldr	r0, [r5, #40]	; 0x28
   12220:	cmp	r0, #1
   12224:	bne	12384 <__assert_fail@plt+0xb80>
   12228:	str	r6, [r5, #40]	; 0x28
   1222c:	mov	r0, r7
   12230:	b	11a8c <__assert_fail@plt+0x288>
   12234:	movw	r0, #53728	; 0xd1e0
   12238:	movt	r0, #2
   1223c:	ldr	r0, [r0]
   12240:	str	r0, [sp, #44]	; 0x2c
   12244:	mov	r0, r7
   12248:	b	11a8c <__assert_fail@plt+0x288>
   1224c:	movw	r1, #53792	; 0xd220
   12250:	movt	r1, #2
   12254:	str	r0, [r1]
   12258:	mov	r0, r7
   1225c:	b	11a8c <__assert_fail@plt+0x288>
   12260:	cmp	r0, #92	; 0x5c
   12264:	bne	12c20 <__assert_fail@plt+0x141c>
   12268:	mov	r4, r6
   1226c:	ldrb	r5, [r4, #1]!
   12270:	sub	r1, r5, #92	; 0x5c
   12274:	cmp	r1, #26
   12278:	bhi	123cc <__assert_fail@plt+0xbc8>
   1227c:	add	r2, pc, #4
   12280:	mov	r0, #7
   12284:	ldr	pc, [r2, r1, lsl #2]
   12288:	strdeq	r2, [r1], -r4
   1228c:	andeq	r2, r1, ip, asr #7
   12290:	andeq	r2, r1, ip, asr #7
   12294:	andeq	r2, r1, ip, asr #7
   12298:	andeq	r2, r1, ip, asr #7
   1229c:	andeq	r2, r1, r4, lsr #2
   122a0:	andeq	r2, r1, r8, ror #7
   122a4:	andeq	r2, r1, ip, asr #7
   122a8:	andeq	r2, r1, ip, asr #7
   122ac:	andeq	r2, r1, ip, asr #7
   122b0:	andeq	r2, r1, r0, lsl #8
   122b4:	andeq	r2, r1, ip, asr #7
   122b8:	andeq	r2, r1, ip, asr #7
   122bc:	andeq	r2, r1, ip, asr #7
   122c0:	andeq	r2, r1, ip, asr #7
   122c4:	andeq	r2, r1, ip, asr #7
   122c8:	andeq	r2, r1, ip, asr #7
   122cc:	andeq	r2, r1, ip, asr #7
   122d0:	andeq	r2, r1, r8, lsl #8
   122d4:	andeq	r2, r1, ip, asr #7
   122d8:	andeq	r2, r1, ip, asr #7
   122dc:	andeq	r2, r1, ip, asr #7
   122e0:	andeq	r2, r1, r0, ror #7
   122e4:	andeq	r2, r1, ip, asr #7
   122e8:	strdeq	r2, [r1], -r0
   122ec:	andeq	r2, r1, ip, asr #7
   122f0:	strdeq	r2, [r1], -r8
   122f4:	mov	r0, #92	; 0x5c
   122f8:	b	12124 <__assert_fail@plt+0x920>
   122fc:	mov	r0, #1
   12300:	str	r0, [r5, #36]	; 0x24
   12304:	ldr	r0, [r5, #40]	; 0x28
   12308:	cmp	r0, #0
   1230c:	beq	12350 <__assert_fail@plt+0xb4c>
   12310:	movw	r1, #44541	; 0xadfd
   12314:	mov	r0, #0
   12318:	mov	r2, #5
   1231c:	movt	r1, #1
   12320:	bl	114ec <dcgettext@plt>
   12324:	mov	r2, r0
   12328:	movw	r0, #42883	; 0xa783
   1232c:	movw	r3, #42847	; 0xa75f
   12330:	mov	r1, #0
   12334:	movt	r0, #1
   12338:	movt	r3, #1
   1233c:	str	r0, [sp]
   12340:	mov	r0, #0
   12344:	str	r3, [sp, #4]
   12348:	bl	115b8 <error@plt>
   1234c:	str	r6, [r5, #40]	; 0x28
   12350:	ldr	r0, [r5, #24]
   12354:	cmp	r0, #0
   12358:	mov	r0, r7
   1235c:	beq	11a8c <__assert_fail@plt+0x288>
   12360:	movw	r1, #44541	; 0xadfd
   12364:	mov	r0, #0
   12368:	mov	r2, #5
   1236c:	movt	r1, #1
   12370:	bl	114ec <dcgettext@plt>
   12374:	mov	r2, r0
   12378:	movw	r0, #42883	; 0xa783
   1237c:	movt	r0, #1
   12380:	b	123a4 <__assert_fail@plt+0xba0>
   12384:	movw	r1, #44541	; 0xadfd
   12388:	mov	r0, #0
   1238c:	mov	r2, #5
   12390:	movt	r1, #1
   12394:	bl	114ec <dcgettext@plt>
   12398:	mov	r2, r0
   1239c:	movw	r0, #42898	; 0xa792
   123a0:	movt	r0, #1
   123a4:	movw	r3, #42873	; 0xa779
   123a8:	str	r0, [sp]
   123ac:	mov	r0, #0
   123b0:	mov	r1, #0
   123b4:	movt	r3, #1
   123b8:	str	r3, [sp, #4]
   123bc:	bl	115b8 <error@plt>
   123c0:	str	r6, [r5, #24]
   123c4:	mov	r0, r7
   123c8:	b	11a8c <__assert_fail@plt+0x288>
   123cc:	cmp	r5, #120	; 0x78
   123d0:	bne	12410 <__assert_fail@plt+0xc0c>
   123d4:	add	r4, r6, #2
   123d8:	mov	r5, #16
   123dc:	b	1242c <__assert_fail@plt+0xc28>
   123e0:	mov	r0, #13
   123e4:	b	12124 <__assert_fail@plt+0x920>
   123e8:	mov	r0, #8
   123ec:	b	12124 <__assert_fail@plt+0x920>
   123f0:	mov	r0, #9
   123f4:	b	12124 <__assert_fail@plt+0x920>
   123f8:	mov	r0, #11
   123fc:	b	12124 <__assert_fail@plt+0x920>
   12400:	mov	r0, #12
   12404:	b	12124 <__assert_fail@plt+0x920>
   12408:	mov	r0, #10
   1240c:	b	12124 <__assert_fail@plt+0x920>
   12410:	bl	11624 <__ctype_b_loc@plt>
   12414:	ldr	r0, [r0]
   12418:	add	r0, r0, r5, lsl #1
   1241c:	mov	r5, #8
   12420:	ldrb	r0, [r0, #1]
   12424:	tst	r0, #8
   12428:	beq	12c2c <__assert_fail@plt+0x1428>
   1242c:	bl	11684 <__errno_location@plt>
   12430:	mov	r1, #0
   12434:	mov	r2, r5
   12438:	str	r1, [r0]
   1243c:	str	r1, [sp, #52]	; 0x34
   12440:	mov	r0, r4
   12444:	add	r1, sp, #52	; 0x34
   12448:	bl	11648 <strtoul@plt>
   1244c:	cmp	r0, #256	; 0x100
   12450:	bcs	12c48 <__assert_fail@plt+0x1444>
   12454:	ldr	r4, [sp, #52]	; 0x34
   12458:	ldrb	r1, [r4]
   1245c:	cmp	r1, #0
   12460:	beq	12124 <__assert_fail@plt+0x920>
   12464:	movw	r1, #44441	; 0xad99
   12468:	mov	r0, #0
   1246c:	mov	r2, #5
   12470:	movt	r1, #1
   12474:	bl	114ec <dcgettext@plt>
   12478:	mov	r2, r0
   1247c:	str	r4, [sp]
   12480:	b	12ce0 <__assert_fail@plt+0x14dc>
   12484:	cmn	r0, #1
   12488:	bne	12be4 <__assert_fail@plt+0x13e0>
   1248c:	ldr	r1, [sp, #48]	; 0x30
   12490:	movw	r0, #15116	; 0x3b0c
   12494:	movt	r0, #1
   12498:	cmp	r1, r0
   1249c:	bne	124d8 <__assert_fail@plt+0xcd4>
   124a0:	movw	r0, #53792	; 0xd220
   124a4:	movt	r0, #2
   124a8:	ldr	r0, [r0]
   124ac:	cmp	r0, #0
   124b0:	beq	124d8 <__assert_fail@plt+0xcd4>
   124b4:	movw	r1, #43074	; 0xa842
   124b8:	mov	r0, #0
   124bc:	mov	r2, #5
   124c0:	movt	r1, #1
   124c4:	bl	114ec <dcgettext@plt>
   124c8:	mov	r2, r0
   124cc:	mov	r0, #0
   124d0:	mov	r1, #0
   124d4:	bl	115b8 <error@plt>
   124d8:	ldr	r0, [sp, #40]	; 0x28
   124dc:	blx	r0
   124e0:	ldr	r0, [sp, #36]	; 0x24
   124e4:	cmp	r0, #0
   124e8:	bne	12d10 <__assert_fail@plt+0x150c>
   124ec:	movw	r0, #16624	; 0x40f0
   124f0:	add	r8, sp, #52	; 0x34
   124f4:	movt	r0, #1
   124f8:	add	r4, r8, #4
   124fc:	str	r0, [sp, #52]	; 0x34
   12500:	mov	r0, r4
   12504:	bl	1172c <sigemptyset@plt>
   12508:	mov	r6, #0
   1250c:	mov	r0, #10
   12510:	mov	r1, r8
   12514:	mov	r2, #0
   12518:	str	r6, [sp, #184]	; 0xb8
   1251c:	bl	11558 <sigaction@plt>
   12520:	cmp	r0, #0
   12524:	beq	1255c <__assert_fail@plt+0xd58>
   12528:	bl	11684 <__errno_location@plt>
   1252c:	ldr	r5, [r0]
   12530:	movw	r1, #43156	; 0xa894
   12534:	mov	r0, #0
   12538:	mov	r2, #5
   1253c:	movt	r1, #1
   12540:	bl	114ec <dcgettext@plt>
   12544:	mov	r2, r0
   12548:	mov	r1, r5
   1254c:	movw	r5, #53744	; 0xd1f0
   12550:	mov	r0, #0
   12554:	movt	r5, #2
   12558:	bl	115b8 <error@plt>
   1255c:	movw	r0, #16672	; 0x4120
   12560:	movt	r0, #1
   12564:	str	r0, [sp, #52]	; 0x34
   12568:	mov	r0, r4
   1256c:	bl	1172c <sigemptyset@plt>
   12570:	add	r1, sp, #52	; 0x34
   12574:	mov	r0, #12
   12578:	mov	r2, #0
   1257c:	str	r6, [sp, #184]	; 0xb8
   12580:	bl	11558 <sigaction@plt>
   12584:	cmp	r0, #0
   12588:	beq	125b8 <__assert_fail@plt+0xdb4>
   1258c:	bl	11684 <__errno_location@plt>
   12590:	ldr	r4, [r0]
   12594:	movw	r1, #43190	; 0xa8b6
   12598:	mov	r0, #0
   1259c:	mov	r2, #5
   125a0:	movt	r1, #1
   125a4:	bl	114ec <dcgettext@plt>
   125a8:	mov	r2, r0
   125ac:	mov	r0, #0
   125b0:	mov	r1, r4
   125b4:	bl	115b8 <error@plt>
   125b8:	ldr	r4, [sp, #44]	; 0x2c
   125bc:	movw	r1, #50863	; 0xc6af
   125c0:	movt	r1, #1
   125c4:	mov	r0, r4
   125c8:	bl	11444 <strcmp@plt>
   125cc:	cmp	r0, #0
   125d0:	beq	12644 <__assert_fail@plt+0xe40>
   125d4:	movw	r0, #53808	; 0xd230
   125d8:	mov	r1, #1
   125dc:	movt	r0, #2
   125e0:	strb	r1, [r0]
   125e4:	mov	r0, r4
   125e8:	mov	r1, #0
   125ec:	bl	1543c <__assert_fail@plt+0x3c38>
   125f0:	cmn	r0, #1
   125f4:	ble	12d50 <__assert_fail@plt+0x154c>
   125f8:	movw	r1, #44038	; 0xac06
   125fc:	mov	r4, r0
   12600:	movt	r1, #1
   12604:	bl	1142c <fdopen@plt>
   12608:	cmp	r0, #0
   1260c:	bne	12650 <__assert_fail@plt+0xe4c>
   12610:	bl	11684 <__errno_location@plt>
   12614:	ldr	r6, [r0]
   12618:	mov	r5, r0
   1261c:	mov	r0, r4
   12620:	bl	117ec <close@plt>
   12624:	str	r6, [r5]
   12628:	b	12d58 <__assert_fail@plt+0x1554>
   1262c:	movw	r0, #42645	; 0xa695
   12630:	movt	r0, #1
   12634:	bl	1570c <__assert_fail@plt+0x3f08>
   12638:	mov	r0, #0
   1263c:	sub	sp, fp, #28
   12640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12644:	movw	r0, #53720	; 0xd1d8
   12648:	movt	r0, #2
   1264c:	ldr	r0, [r0]
   12650:	movw	r1, #53804	; 0xd22c
   12654:	movt	r1, #2
   12658:	str	r0, [r1]
   1265c:	ldr	r0, [r5, #24]
   12660:	cmp	r0, #0
   12664:	ldreq	r0, [r5, #36]	; 0x24
   12668:	cmpeq	r0, #0
   1266c:	beq	12678 <__assert_fail@plt+0xe74>
   12670:	mov	r0, #1
   12674:	str	r0, [r5]
   12678:	movw	r6, #53704	; 0xd1c8
   1267c:	movt	r6, #2
   12680:	ldr	r0, [r6]
   12684:	cmp	r0, r9
   12688:	bne	126a4 <__assert_fail@plt+0xea0>
   1268c:	mov	r0, #0
   12690:	mov	r9, #1
   12694:	sub	sl, fp, #48	; 0x30
   12698:	str	r0, [r6]
   1269c:	sub	r0, fp, #44	; 0x2c
   126a0:	str	r0, [fp, #-48]	; 0xffffffd0
   126a4:	cmp	r7, #0
   126a8:	bne	12a30 <__assert_fail@plt+0x122c>
   126ac:	ldr	r0, [r5, #12]
   126b0:	add	r0, r0, #1
   126b4:	bl	18fb8 <__assert_fail@plt+0x77b4>
   126b8:	movw	r1, #53812	; 0xd234
   126bc:	movt	r1, #2
   126c0:	str	r0, [r1]
   126c4:	ldr	r0, [r5, #12]
   126c8:	add	r0, r0, #1
   126cc:	bl	18fb8 <__assert_fail@plt+0x77b4>
   126d0:	movw	r7, #53816	; 0xd238
   126d4:	mov	r1, #0
   126d8:	movt	r7, #2
   126dc:	str	r0, [r7, #12]
   126e0:	mov	r0, #17
   126e4:	bl	114d4 <signal@plt>
   126e8:	ldr	r0, [r5, #24]
   126ec:	cmp	r0, #0
   126f0:	beq	128b8 <__assert_fail@plt+0x10b4>
   126f4:	lsl	r0, r9, #2
   126f8:	bl	18fb8 <__assert_fail@plt+0x77b4>
   126fc:	str	r0, [sp, #44]	; 0x2c
   12700:	ldr	r0, [r6]
   12704:	cmp	r0, r9
   12708:	bge	12730 <__assert_fail@plt+0xf2c>
   1270c:	ldr	r1, [sp, #44]	; 0x2c
   12710:	sub	r4, r9, r0
   12714:	add	r6, sl, r0, lsl #2
   12718:	add	r5, r1, r0, lsl #2
   1271c:	ldr	r0, [r6], #4
   12720:	bl	11654 <strlen@plt>
   12724:	str	r0, [r5], #4
   12728:	subs	r4, r4, #1
   1272c:	bne	1271c <__assert_fail@plt+0xf18>
   12730:	movw	r0, #53744	; 0xd1f0
   12734:	str	sl, [sp, #40]	; 0x28
   12738:	movt	r0, #2
   1273c:	mov	r4, r0
   12740:	ldr	r0, [r0, #24]
   12744:	bl	11654 <strlen@plt>
   12748:	str	r0, [r4, #20]
   1274c:	ldr	r0, [sp, #48]	; 0x30
   12750:	blx	r0
   12754:	cmn	r0, #1
   12758:	beq	12a0c <__assert_fail@plt+0x1208>
   1275c:	mov	r4, r0
   12760:	ldr	r0, [sp, #40]	; 0x28
   12764:	movw	r5, #53744	; 0xd1f0
   12768:	mov	sl, #0
   1276c:	str	r9, [sp, #36]	; 0x24
   12770:	movt	r5, #2
   12774:	add	r0, r0, #4
   12778:	str	r0, [sp, #32]
   1277c:	ldr	r0, [sp, #44]	; 0x2c
   12780:	add	r0, r0, #4
   12784:	str	r0, [sp, #28]
   12788:	sub	r0, r9, #2
   1278c:	str	r0, [sp, #24]
   12790:	mov	r0, r5
   12794:	mov	r1, r7
   12798:	bl	14e38 <__assert_fail@plt+0x3634>
   1279c:	movw	r0, #53704	; 0xd1c8
   127a0:	ldr	r1, [sp, #40]	; 0x28
   127a4:	str	sl, [r7, #16]
   127a8:	movw	r6, #53860	; 0xd264
   127ac:	mov	r8, r7
   127b0:	movt	r0, #2
   127b4:	movt	r6, #2
   127b8:	ldr	r0, [r0]
   127bc:	ldr	r2, [r1, r0, lsl #2]
   127c0:	ldr	r1, [sp, #44]	; 0x2c
   127c4:	str	sl, [sp]
   127c8:	str	sl, [sp, #4]
   127cc:	ldr	r0, [r1, r0, lsl #2]
   127d0:	ldrb	r1, [r6]
   127d4:	eor	r1, r1, #1
   127d8:	add	r3, r0, #1
   127dc:	mov	r0, r5
   127e0:	str	r1, [sp, #8]
   127e4:	mov	r1, r7
   127e8:	bl	147e4 <__assert_fail@plt+0x2fe0>
   127ec:	mov	r0, #1
   127f0:	strb	r0, [r6]
   127f4:	movw	r0, #53704	; 0xd1c8
   127f8:	movt	r0, #2
   127fc:	ldr	r0, [r0]
   12800:	add	r1, r0, #1
   12804:	cmp	r1, r9
   12808:	bge	1288c <__assert_fail@plt+0x1088>
   1280c:	ldr	r1, [sp, #32]
   12810:	sub	r4, r4, #1
   12814:	add	r7, r1, r0, lsl #2
   12818:	ldr	r1, [sp, #28]
   1281c:	add	r9, r1, r0, lsl #2
   12820:	ldr	r1, [sp, #24]
   12824:	sub	r6, r1, r0
   12828:	mov	r0, #1
   1282c:	b	12848 <__assert_fail@plt+0x1044>
   12830:	movw	r0, #53860	; 0xd264
   12834:	add	r7, r7, #4
   12838:	add	r9, r9, #4
   1283c:	sub	r6, r6, #1
   12840:	movt	r0, #2
   12844:	ldrb	r0, [r0]
   12848:	mov	r1, #1
   1284c:	ldr	r2, [r7]
   12850:	ldr	r3, [r9]
   12854:	str	sl, [sp]
   12858:	str	sl, [sp, #4]
   1285c:	str	r4, [sp, #12]
   12860:	bic	r0, r1, r0
   12864:	movw	r1, #53812	; 0xd234
   12868:	movt	r1, #2
   1286c:	str	r0, [sp, #16]
   12870:	mov	r0, r5
   12874:	ldr	r1, [r1]
   12878:	str	r1, [sp, #8]
   1287c:	mov	r1, r8
   12880:	bl	1466c <__assert_fail@plt+0x2e68>
   12884:	cmp	r6, #0
   12888:	bne	12830 <__assert_fail@plt+0x102c>
   1288c:	mov	r0, r5
   12890:	mov	r1, r8
   12894:	mov	r7, r8
   12898:	bl	14a54 <__assert_fail@plt+0x3250>
   1289c:	ldr	r0, [sp, #48]	; 0x30
   128a0:	blx	r0
   128a4:	ldr	r9, [sp, #36]	; 0x24
   128a8:	mov	r4, r0
   128ac:	cmn	r0, #1
   128b0:	bne	12790 <__assert_fail@plt+0xf8c>
   128b4:	b	12a0c <__assert_fail@plt+0x1208>
   128b8:	ldr	r0, [r6]
   128bc:	cmp	r0, r9
   128c0:	bge	1292c <__assert_fail@plt+0x1128>
   128c4:	movw	r4, #53744	; 0xd1f0
   128c8:	movw	r5, #53816	; 0xd238
   128cc:	mov	r8, r6
   128d0:	mov	r7, #0
   128d4:	movt	r4, #2
   128d8:	movt	r5, #2
   128dc:	ldr	r6, [sl, r0, lsl #2]
   128e0:	mov	r0, r6
   128e4:	bl	11654 <strlen@plt>
   128e8:	movw	r1, #53860	; 0xd264
   128ec:	add	r3, r0, #1
   128f0:	mov	r0, r4
   128f4:	mov	r2, r6
   128f8:	str	r7, [sp]
   128fc:	str	r7, [sp, #4]
   12900:	movt	r1, #2
   12904:	ldrb	r1, [r1]
   12908:	eor	r1, r1, #1
   1290c:	str	r1, [sp, #8]
   12910:	mov	r1, r5
   12914:	bl	147e4 <__assert_fail@plt+0x2fe0>
   12918:	ldr	r0, [r8]
   1291c:	add	r0, r0, #1
   12920:	cmp	r0, r9
   12924:	str	r0, [r8]
   12928:	blt	128dc <__assert_fail@plt+0x10d8>
   1292c:	movw	r0, #53860	; 0xd264
   12930:	movw	r7, #53816	; 0xd238
   12934:	mov	r1, #1
   12938:	movt	r0, #2
   1293c:	movt	r7, #2
   12940:	strb	r1, [r0]
   12944:	ldr	r1, [r7, #16]
   12948:	ldr	r0, [r7]
   1294c:	str	r1, [r7, #20]
   12950:	movw	r1, #53744	; 0xd1f0
   12954:	movt	r1, #2
   12958:	str	r0, [r1, #28]
   1295c:	ldr	r0, [sp, #48]	; 0x30
   12960:	blx	r0
   12964:	cmn	r0, #1
   12968:	beq	129c0 <__assert_fail@plt+0x11bc>
   1296c:	movw	r5, #53864	; 0xd268
   12970:	movw	r4, #53816	; 0xd238
   12974:	mov	r6, #0
   12978:	movt	r5, #2
   1297c:	movt	r4, #2
   12980:	movw	r1, #53744	; 0xd1f0
   12984:	ldr	r0, [r5]
   12988:	movt	r1, #2
   1298c:	ldr	r1, [r1, #36]	; 0x24
   12990:	sub	r1, r1, #1
   12994:	cmp	r1, r0
   12998:	bcs	129b0 <__assert_fail@plt+0x11ac>
   1299c:	movw	r0, #53744	; 0xd1f0
   129a0:	mov	r1, r4
   129a4:	movt	r0, #2
   129a8:	bl	14a54 <__assert_fail@plt+0x3250>
   129ac:	str	r6, [r5]
   129b0:	ldr	r0, [sp, #48]	; 0x30
   129b4:	blx	r0
   129b8:	cmn	r0, #1
   129bc:	bne	12980 <__assert_fail@plt+0x117c>
   129c0:	movw	r0, #53744	; 0xd1f0
   129c4:	ldr	r1, [r7]
   129c8:	movt	r0, #2
   129cc:	ldr	r0, [r0, #28]
   129d0:	cmp	r1, r0
   129d4:	bne	129f8 <__assert_fail@plt+0x11f4>
   129d8:	ldr	r0, [sp, #32]
   129dc:	cmp	r0, #0
   129e0:	beq	12a0c <__assert_fail@plt+0x1208>
   129e4:	movw	r0, #53868	; 0xd26c
   129e8:	movt	r0, #2
   129ec:	ldrb	r0, [r0]
   129f0:	cmp	r0, #0
   129f4:	bne	12a0c <__assert_fail@plt+0x1208>
   129f8:	movw	r0, #53744	; 0xd1f0
   129fc:	movw	r1, #53816	; 0xd238
   12a00:	movt	r0, #2
   12a04:	movt	r1, #2
   12a08:	bl	14a54 <__assert_fail@plt+0x3250>
   12a0c:	movw	r0, #53872	; 0xd270
   12a10:	movw	r2, #53740	; 0xd1ec
   12a14:	movt	r0, #2
   12a18:	movt	r2, #2
   12a1c:	ldr	r1, [r0]
   12a20:	str	r1, [r2]
   12a24:	ldr	r0, [r0]
   12a28:	sub	sp, fp, #28
   12a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a30:	movw	r8, #53712	; 0xd1d0
   12a34:	movw	r1, #43250	; 0xa8f2
   12a38:	mov	r0, #0
   12a3c:	mov	r2, #5
   12a40:	movt	r8, #2
   12a44:	movt	r1, #1
   12a48:	ldr	r4, [r8]
   12a4c:	bl	114ec <dcgettext@plt>
   12a50:	mov	r5, r0
   12a54:	bl	14e78 <__assert_fail@plt+0x3674>
   12a58:	mov	r2, r0
   12a5c:	mov	r0, r4
   12a60:	mov	r1, r5
   12a64:	mov	r3, #0
   12a68:	bl	11678 <fprintf@plt>
   12a6c:	ldr	r4, [r8]
   12a70:	movw	r1, #43297	; 0xa921
   12a74:	mov	r0, #0
   12a78:	mov	r2, #5
   12a7c:	movt	r1, #1
   12a80:	bl	114ec <dcgettext@plt>
   12a84:	mov	r1, r0
   12a88:	movw	r0, #53744	; 0xd1f0
   12a8c:	mov	r3, #0
   12a90:	movt	r0, #2
   12a94:	ldr	r2, [r0, #4]
   12a98:	mov	r0, r4
   12a9c:	bl	11678 <fprintf@plt>
   12aa0:	ldr	r4, [r8]
   12aa4:	movw	r1, #43355	; 0xa95b
   12aa8:	mov	r0, #0
   12aac:	mov	r2, #5
   12ab0:	movt	r1, #1
   12ab4:	bl	114ec <dcgettext@plt>
   12ab8:	mov	r1, r0
   12abc:	movw	r0, #53744	; 0xd1f0
   12ac0:	mov	r3, #0
   12ac4:	movt	r0, #2
   12ac8:	ldr	r2, [r0, #8]
   12acc:	mov	r0, r4
   12ad0:	bl	11678 <fprintf@plt>
   12ad4:	ldr	r4, [r8]
   12ad8:	movw	r1, #43432	; 0xa9a8
   12adc:	mov	r0, #0
   12ae0:	mov	r2, #5
   12ae4:	movt	r1, #1
   12ae8:	bl	114ec <dcgettext@plt>
   12aec:	mov	r5, r0
   12af0:	movw	r0, #53744	; 0xd1f0
   12af4:	movt	r0, #2
   12af8:	ldr	r7, [r0, #4]
   12afc:	bl	14e78 <__assert_fail@plt+0x3674>
   12b00:	sub	r2, r7, r0
   12b04:	mov	r1, r5
   12b08:	movw	r5, #53744	; 0xd1f0
   12b0c:	mov	r0, r4
   12b10:	mov	r3, #0
   12b14:	movt	r5, #2
   12b18:	bl	11678 <fprintf@plt>
   12b1c:	ldr	r4, [r8]
   12b20:	movw	r1, #43487	; 0xa9df
   12b24:	mov	r0, #0
   12b28:	mov	r2, #5
   12b2c:	movt	r1, #1
   12b30:	bl	114ec <dcgettext@plt>
   12b34:	ldr	r2, [r5, #12]
   12b38:	mov	r1, r0
   12b3c:	mov	r0, r4
   12b40:	mov	r3, #0
   12b44:	bl	11678 <fprintf@plt>
   12b48:	ldr	r4, [r8]
   12b4c:	movw	r1, #43539	; 0xaa13
   12b50:	mov	r0, #0
   12b54:	mov	r2, #5
   12b58:	movt	r1, #1
   12b5c:	bl	114ec <dcgettext@plt>
   12b60:	mov	r1, r0
   12b64:	mov	r0, r4
   12b68:	mvn	r2, #-2147483648	; 0x80000000
   12b6c:	mov	r3, #0
   12b70:	bl	11678 <fprintf@plt>
   12b74:	mov	r0, #0
   12b78:	bl	117a4 <isatty@plt>
   12b7c:	cmp	r0, #0
   12b80:	beq	126ac <__assert_fail@plt+0xea8>
   12b84:	ldr	r4, [r8]
   12b88:	movw	r1, #43599	; 0xaa4f
   12b8c:	mov	r0, #0
   12b90:	mov	r2, #5
   12b94:	movt	r1, #1
   12b98:	bl	114ec <dcgettext@plt>
   12b9c:	mov	r1, r0
   12ba0:	mov	r0, r4
   12ba4:	bl	11678 <fprintf@plt>
   12ba8:	ldr	r0, [sp, #32]
   12bac:	cmp	r0, #0
   12bb0:	beq	126ac <__assert_fail@plt+0xea8>
   12bb4:	ldr	r4, [r8]
   12bb8:	movw	r1, #43772	; 0xaafc
   12bbc:	mov	r0, #0
   12bc0:	mov	r2, #5
   12bc4:	movt	r1, #1
   12bc8:	bl	114ec <dcgettext@plt>
   12bcc:	mov	r1, r0
   12bd0:	ldr	r0, [r6]
   12bd4:	ldr	r2, [sl, r0, lsl #2]
   12bd8:	mov	r0, r4
   12bdc:	bl	11678 <fprintf@plt>
   12be0:	b	126ac <__assert_fail@plt+0xea8>
   12be4:	mov	r0, #1
   12be8:	bl	13c74 <__assert_fail@plt+0x2470>
   12bec:	mov	r0, #0
   12bf0:	bl	13c74 <__assert_fail@plt+0x2470>
   12bf4:	bl	11684 <__errno_location@plt>
   12bf8:	ldr	r4, [r0]
   12bfc:	movw	r1, #42675	; 0xa6b3
   12c00:	mov	r0, #0
   12c04:	mov	r2, #5
   12c08:	movt	r1, #1
   12c0c:	bl	114ec <dcgettext@plt>
   12c10:	mov	r2, r0
   12c14:	mov	r0, #1
   12c18:	mov	r1, r4
   12c1c:	bl	115b8 <error@plt>
   12c20:	movw	r1, #44053	; 0xac15
   12c24:	movt	r1, #1
   12c28:	b	12c34 <__assert_fail@plt+0x1430>
   12c2c:	movw	r1, #44182	; 0xac96
   12c30:	movt	r1, #1
   12c34:	mov	r0, #0
   12c38:	mov	r2, #5
   12c3c:	bl	114ec <dcgettext@plt>
   12c40:	mov	r2, r0
   12c44:	b	12ce0 <__assert_fail@plt+0x14dc>
   12c48:	cmp	r5, #16
   12c4c:	bne	12cc0 <__assert_fail@plt+0x14bc>
   12c50:	movw	r1, #44243	; 0xacd3
   12c54:	movt	r1, #1
   12c58:	b	12cc8 <__assert_fail@plt+0x14c4>
   12c5c:	movw	r1, #42977	; 0xa7e1
   12c60:	mov	r0, #0
   12c64:	mov	r2, #5
   12c68:	movt	r1, #1
   12c6c:	bl	114ec <dcgettext@plt>
   12c70:	mov	r2, r0
   12c74:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12c78:	mov	r1, #0
   12c7c:	ldr	r3, [r6, r0, lsl #4]
   12c80:	mov	r0, #1
   12c84:	bl	115b8 <error@plt>
   12c88:	bl	11684 <__errno_location@plt>
   12c8c:	ldr	r4, [r0]
   12c90:	movw	r1, #43034	; 0xa81a
   12c94:	mov	r0, #0
   12c98:	mov	r2, #5
   12c9c:	movt	r1, #1
   12ca0:	bl	114ec <dcgettext@plt>
   12ca4:	mov	r2, r0
   12ca8:	movw	r0, #53800	; 0xd228
   12cac:	mov	r1, r4
   12cb0:	movt	r0, #2
   12cb4:	ldr	r3, [r0]
   12cb8:	mov	r0, #1
   12cbc:	bl	115b8 <error@plt>
   12cc0:	movw	r1, #44342	; 0xad36
   12cc4:	movt	r1, #1
   12cc8:	mov	r0, #0
   12ccc:	mov	r2, #5
   12cd0:	bl	114ec <dcgettext@plt>
   12cd4:	mov	r2, r0
   12cd8:	mov	r0, #255	; 0xff
   12cdc:	str	r0, [sp]
   12ce0:	mov	r0, #1
   12ce4:	mov	r1, #0
   12ce8:	mov	r3, r6
   12cec:	bl	115b8 <error@plt>
   12cf0:	movw	r0, #42768	; 0xa710
   12cf4:	movw	r1, #42737	; 0xa6f1
   12cf8:	movw	r3, #42745	; 0xa6f9
   12cfc:	movw	r2, #511	; 0x1ff
   12d00:	movt	r0, #1
   12d04:	movt	r1, #1
   12d08:	movt	r3, #1
   12d0c:	bl	11804 <__assert_fail@plt>
   12d10:	movw	r0, #43133	; 0xa87d
   12d14:	movw	r1, #42737	; 0xa6f1
   12d18:	movw	r3, #42745	; 0xa6f9
   12d1c:	movw	r2, #723	; 0x2d3
   12d20:	movt	r0, #1
   12d24:	movt	r1, #1
   12d28:	movt	r3, #1
   12d2c:	bl	11804 <__assert_fail@plt>
   12d30:	movw	r0, #42710	; 0xa6d6
   12d34:	movw	r1, #42737	; 0xa6f1
   12d38:	movw	r3, #42745	; 0xa6f9
   12d3c:	movw	r2, #483	; 0x1e3
   12d40:	movt	r0, #1
   12d44:	movt	r1, #1
   12d48:	movt	r3, #1
   12d4c:	bl	11804 <__assert_fail@plt>
   12d50:	bl	11684 <__errno_location@plt>
   12d54:	mov	r5, r0
   12d58:	movw	r0, #53804	; 0xd22c
   12d5c:	mov	r1, #0
   12d60:	mov	r2, #5
   12d64:	movt	r0, #2
   12d68:	str	r1, [r0]
   12d6c:	movw	r1, #43224	; 0xa8d8
   12d70:	mov	r0, #0
   12d74:	ldr	r4, [r5]
   12d78:	movt	r1, #1
   12d7c:	bl	114ec <dcgettext@plt>
   12d80:	ldr	r2, [sp, #44]	; 0x2c
   12d84:	mov	r5, r0
   12d88:	mov	r0, #0
   12d8c:	mov	r1, #8
   12d90:	bl	180d0 <__assert_fail@plt+0x68cc>
   12d94:	mov	r3, r0
   12d98:	mov	r0, #1
   12d9c:	mov	r1, r4
   12da0:	mov	r2, r5
   12da4:	bl	115b8 <error@plt>
   12da8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dac:	add	fp, sp, #28
   12db0:	sub	sp, sp, #28
   12db4:	movw	r6, #53876	; 0xd274
   12db8:	mvn	r4, #0
   12dbc:	movt	r6, #2
   12dc0:	ldrb	r0, [r6]
   12dc4:	cmp	r0, #0
   12dc8:	bne	131d8 <__assert_fail@plt+0x19d4>
   12dcc:	movw	r0, #53744	; 0xd1f0
   12dd0:	movw	sl, #53804	; 0xd22c
   12dd4:	movt	r0, #2
   12dd8:	movt	sl, #2
   12ddc:	ldr	r4, [r0, #12]
   12de0:	movw	r0, #53812	; 0xd234
   12de4:	movt	r0, #2
   12de8:	ldr	r8, [r0]
   12dec:	movw	r0, #53816	; 0xd238
   12df0:	movt	r0, #2
   12df4:	ldr	r5, [r0, #20]
   12df8:	ldr	r0, [sl]
   12dfc:	bl	117e0 <getc@plt>
   12e00:	cmn	r0, #1
   12e04:	beq	130e8 <__assert_fail@plt+0x18e4>
   12e08:	add	r1, r8, r4
   12e0c:	movw	r7, #53864	; 0xd268
   12e10:	mov	r2, #0
   12e14:	mov	r4, #0
   12e18:	mov	r9, #1
   12e1c:	sub	r1, r1, r5
   12e20:	mvn	r5, #0
   12e24:	movt	r7, #2
   12e28:	str	r2, [sp, #24]
   12e2c:	sub	r1, r1, #1
   12e30:	str	r1, [sp, #16]
   12e34:	mov	r1, #1
   12e38:	str	r1, [sp, #20]
   12e3c:	mov	r6, r5
   12e40:	mov	r5, r6
   12e44:	mov	r6, r5
   12e48:	mov	r5, r0
   12e4c:	cmp	r9, #3
   12e50:	bhi	12f88 <__assert_fail@plt+0x1784>
   12e54:	add	r0, pc, #0
   12e58:	ldr	pc, [r0, r9, lsl #2]
   12e5c:	muleq	r1, r8, lr
   12e60:	andeq	r2, r1, ip, ror #28
   12e64:	andeq	r2, r1, r4, asr #30
   12e68:	andeq	r2, r1, r4, lsl #31
   12e6c:	cmp	r5, #127	; 0x7f
   12e70:	bhi	12f30 <__assert_fail@plt+0x172c>
   12e74:	bl	11624 <__ctype_b_loc@plt>
   12e78:	sub	r1, r5, #10
   12e7c:	cmp	r1, #4
   12e80:	bcc	12ee8 <__assert_fail@plt+0x16e4>
   12e84:	ldr	r0, [r0]
   12e88:	add	r0, r0, r5, lsl #1
   12e8c:	ldrh	r0, [r0]
   12e90:	ands	r0, r0, #1
   12e94:	bne	12ee8 <__assert_fail@plt+0x16e4>
   12e98:	cmp	r5, #10
   12e9c:	bne	12f00 <__assert_fail@plt+0x16fc>
   12ea0:	cmp	r6, #127	; 0x7f
   12ea4:	bhi	12ebc <__assert_fail@plt+0x16b8>
   12ea8:	bl	11624 <__ctype_b_loc@plt>
   12eac:	ldr	r0, [r0]
   12eb0:	ldrb	r0, [r0, r6, lsl #1]
   12eb4:	tst	r0, #1
   12eb8:	bne	12ec8 <__assert_fail@plt+0x16c4>
   12ebc:	ldr	r0, [r7]
   12ec0:	add	r0, r0, #1
   12ec4:	str	r0, [r7]
   12ec8:	movw	r0, #53812	; 0xd234
   12ecc:	movt	r0, #2
   12ed0:	ldr	r6, [r0]
   12ed4:	subs	r0, r8, r6
   12ed8:	movwne	r0, #1
   12edc:	orr	r0, r4, r0
   12ee0:	tst	r0, #1
   12ee4:	bne	131e4 <__assert_fail@plt+0x19e0>
   12ee8:	ldr	r0, [sl]
   12eec:	bl	117e0 <getc@plt>
   12ef0:	mov	r9, #1
   12ef4:	cmn	r0, #1
   12ef8:	bne	12e44 <__assert_fail@plt+0x1640>
   12efc:	b	130f8 <__assert_fail@plt+0x18f4>
   12f00:	cmp	r5, #127	; 0x7f
   12f04:	bhi	12f30 <__assert_fail@plt+0x172c>
   12f08:	movw	r0, #53744	; 0xd1f0
   12f0c:	movt	r0, #2
   12f10:	ldr	r0, [r0, #24]
   12f14:	cmp	r0, #0
   12f18:	bne	12f30 <__assert_fail@plt+0x172c>
   12f1c:	bl	11624 <__ctype_b_loc@plt>
   12f20:	ldr	r0, [r0]
   12f24:	ldrb	r0, [r0, r5, lsl #1]
   12f28:	tst	r0, #1
   12f2c:	bne	13004 <__assert_fail@plt+0x1800>
   12f30:	mov	r9, #3
   12f34:	cmp	r5, #92	; 0x5c
   12f38:	bne	12f74 <__assert_fail@plt+0x1770>
   12f3c:	mov	r6, r5
   12f40:	b	12f5c <__assert_fail@plt+0x1758>
   12f44:	cmp	r5, #10
   12f48:	beq	13280 <__assert_fail@plt+0x1a7c>
   12f4c:	ldr	r6, [sp, #24]
   12f50:	mov	r9, #0
   12f54:	cmp	r5, r6
   12f58:	bne	12ffc <__assert_fail@plt+0x17f8>
   12f5c:	ldr	r0, [sl]
   12f60:	bl	117e0 <getc@plt>
   12f64:	mov	r4, #1
   12f68:	cmn	r0, #1
   12f6c:	bne	12e40 <__assert_fail@plt+0x163c>
   12f70:	b	130f8 <__assert_fail@plt+0x18f4>
   12f74:	cmp	r5, #34	; 0x22
   12f78:	cmpne	r5, #39	; 0x27
   12f7c:	beq	130bc <__assert_fail@plt+0x18b8>
   12f80:	mov	r4, #1
   12f84:	mov	r9, #0
   12f88:	cmp	r5, #0
   12f8c:	movweq	r0, #53880	; 0xd278
   12f90:	movteq	r0, #2
   12f94:	ldrbeq	r0, [r0]
   12f98:	cmpeq	r0, #0
   12f9c:	bne	12fd4 <__assert_fail@plt+0x17d0>
   12fa0:	movw	r1, #44721	; 0xaeb1
   12fa4:	mov	r0, #0
   12fa8:	mov	r2, #5
   12fac:	movt	r1, #1
   12fb0:	bl	114ec <dcgettext@plt>
   12fb4:	mov	r2, r0
   12fb8:	mov	r0, #0
   12fbc:	mov	r1, #0
   12fc0:	bl	115b8 <error@plt>
   12fc4:	movw	r1, #53880	; 0xd278
   12fc8:	mov	r0, #1
   12fcc:	movt	r1, #2
   12fd0:	strb	r0, [r1]
   12fd4:	ldr	r0, [sp, #16]
   12fd8:	cmp	r8, r0
   12fdc:	bcs	13258 <__assert_fail@plt+0x1a54>
   12fe0:	strb	r5, [r8], #1
   12fe4:	ldr	r0, [sl]
   12fe8:	bl	117e0 <getc@plt>
   12fec:	cmn	r0, #1
   12ff0:	mov	r6, r5
   12ff4:	bne	12e40 <__assert_fail@plt+0x163c>
   12ff8:	b	130f8 <__assert_fail@plt+0x18f4>
   12ffc:	mov	r9, #2
   13000:	b	12f88 <__assert_fail@plt+0x1784>
   13004:	mov	r0, #0
   13008:	strb	r0, [r8], #1
   1300c:	movw	r0, #53812	; 0xd234
   13010:	movt	r0, #2
   13014:	ldr	r6, [r0]
   13018:	movw	r0, #53792	; 0xd220
   1301c:	movt	r0, #2
   13020:	ldr	r0, [r0]
   13024:	sub	r4, r8, r6
   13028:	cmp	r0, #0
   1302c:	beq	13050 <__assert_fail@plt+0x184c>
   13030:	ldrb	r1, [r6]
   13034:	ldrb	r2, [r0]
   13038:	cmp	r2, r1
   1303c:	bne	13050 <__assert_fail@plt+0x184c>
   13040:	mov	r1, r6
   13044:	bl	11444 <strcmp@plt>
   13048:	cmp	r0, #0
   1304c:	beq	13224 <__assert_fail@plt+0x1a20>
   13050:	movw	r0, #53860	; 0xd264
   13054:	mov	r1, #0
   13058:	mov	r2, #0
   1305c:	mov	r3, r4
   13060:	movt	r0, #2
   13064:	str	r1, [sp, #20]
   13068:	movw	r1, #53816	; 0xd238
   1306c:	str	r2, [sp]
   13070:	str	r2, [sp, #4]
   13074:	mov	r2, r6
   13078:	ldrb	r0, [r0]
   1307c:	movt	r1, #2
   13080:	eor	r0, r0, #1
   13084:	str	r0, [sp, #8]
   13088:	movw	r0, #53744	; 0xd1f0
   1308c:	movt	r0, #2
   13090:	bl	147e4 <__assert_fail@plt+0x2fe0>
   13094:	movw	r0, #53812	; 0xd234
   13098:	movt	r0, #2
   1309c:	ldr	r8, [r0]
   130a0:	ldr	r0, [sl]
   130a4:	bl	117e0 <getc@plt>
   130a8:	mov	r4, #1
   130ac:	cmn	r0, #1
   130b0:	mov	r9, #1
   130b4:	bne	12e3c <__assert_fail@plt+0x1638>
   130b8:	b	13244 <__assert_fail@plt+0x1a40>
   130bc:	ldr	r0, [sl]
   130c0:	bl	117e0 <getc@plt>
   130c4:	ldr	r1, [sp, #20]
   130c8:	movw	r6, #53876	; 0xd274
   130cc:	mov	r4, #1
   130d0:	mov	r9, #2
   130d4:	cmn	r0, #1
   130d8:	str	r5, [sp, #24]
   130dc:	movt	r6, #2
   130e0:	bne	12e38 <__assert_fail@plt+0x1634>
   130e4:	b	13108 <__assert_fail@plt+0x1904>
   130e8:	mov	r5, #0
   130ec:	mov	r1, #1
   130f0:	mov	r9, #1
   130f4:	b	13108 <__assert_fail@plt+0x1904>
   130f8:	ldr	r5, [sp, #24]
   130fc:	ldr	r1, [sp, #20]
   13100:	movw	r6, #53876	; 0xd274
   13104:	movt	r6, #2
   13108:	mov	r0, #1
   1310c:	strb	r0, [r6]
   13110:	movw	r0, #53812	; 0xd234
   13114:	movt	r0, #2
   13118:	ldr	r6, [r0]
   1311c:	cmp	r8, r6
   13120:	beq	131d4 <__assert_fail@plt+0x19d0>
   13124:	mov	r0, #0
   13128:	cmp	r9, #2
   1312c:	strb	r0, [r8], #1
   13130:	beq	13324 <__assert_fail@plt+0x1b20>
   13134:	movw	r0, #53792	; 0xd220
   13138:	mvn	r1, r1
   1313c:	mvn	r4, #0
   13140:	movt	r0, #2
   13144:	ldr	r0, [r0]
   13148:	clz	r2, r0
   1314c:	lsr	r2, r2, #5
   13150:	orr	r1, r1, r2
   13154:	tst	r1, #1
   13158:	bne	1317c <__assert_fail@plt+0x1978>
   1315c:	ldrb	r1, [r6]
   13160:	ldrb	r2, [r0]
   13164:	cmp	r2, r1
   13168:	bne	1317c <__assert_fail@plt+0x1978>
   1316c:	mov	r1, r6
   13170:	bl	11444 <strcmp@plt>
   13174:	cmp	r0, #0
   13178:	beq	131d8 <__assert_fail@plt+0x19d4>
   1317c:	sub	r4, r8, r6
   13180:	movw	r0, #53744	; 0xd1f0
   13184:	movt	r0, #2
   13188:	ldr	r0, [r0, #24]
   1318c:	cmp	r0, #0
   13190:	bne	131d8 <__assert_fail@plt+0x19d4>
   13194:	movw	r0, #53860	; 0xd264
   13198:	mov	r1, #0
   1319c:	mov	r2, r6
   131a0:	mov	r3, r4
   131a4:	movt	r0, #2
   131a8:	str	r1, [sp]
   131ac:	str	r1, [sp, #4]
   131b0:	movw	r1, #53816	; 0xd238
   131b4:	ldrb	r0, [r0]
   131b8:	movt	r1, #2
   131bc:	eor	r0, r0, #1
   131c0:	str	r0, [sp, #8]
   131c4:	movw	r0, #53744	; 0xd1f0
   131c8:	movt	r0, #2
   131cc:	bl	147e4 <__assert_fail@plt+0x2fe0>
   131d0:	b	131d8 <__assert_fail@plt+0x19d4>
   131d4:	mvn	r4, #0
   131d8:	mov	r0, r4
   131dc:	sub	sp, fp, #28
   131e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e4:	mov	r0, #0
   131e8:	strb	r0, [r8], #1
   131ec:	movw	r0, #53792	; 0xd220
   131f0:	movt	r0, #2
   131f4:	sub	r4, r8, r6
   131f8:	ldr	r0, [r0]
   131fc:	cmp	r0, #0
   13200:	beq	13180 <__assert_fail@plt+0x197c>
   13204:	ldrb	r1, [r6]
   13208:	ldrb	r2, [r0]
   1320c:	cmp	r2, r1
   13210:	bne	13180 <__assert_fail@plt+0x197c>
   13214:	mov	r1, r6
   13218:	bl	11444 <strcmp@plt>
   1321c:	cmp	r0, #0
   13220:	bne	13180 <__assert_fail@plt+0x197c>
   13224:	movw	r1, #53876	; 0xd274
   13228:	mov	r0, #1
   1322c:	movt	r1, #2
   13230:	strb	r0, [r1]
   13234:	ldr	r0, [sp, #20]
   13238:	tst	r0, #1
   1323c:	mvnne	r4, #0
   13240:	b	131d8 <__assert_fail@plt+0x19d4>
   13244:	ldr	r5, [sp, #24]
   13248:	movw	r6, #53876	; 0xd274
   1324c:	mov	r9, #1
   13250:	mov	r1, #0
   13254:	b	13104 <__assert_fail@plt+0x1900>
   13258:	bl	14140 <__assert_fail@plt+0x293c>
   1325c:	movw	r1, #44860	; 0xaf3c
   13260:	mov	r0, #0
   13264:	mov	r2, #5
   13268:	movt	r1, #1
   1326c:	bl	114ec <dcgettext@plt>
   13270:	mov	r2, r0
   13274:	mov	r0, #1
   13278:	mov	r1, #0
   1327c:	bl	115b8 <error@plt>
   13280:	movw	r0, #53744	; 0xd1f0
   13284:	movt	r0, #2
   13288:	ldr	r0, [r0, #24]
   1328c:	cmp	r0, #0
   13290:	bne	132f0 <__assert_fail@plt+0x1aec>
   13294:	movw	r0, #53860	; 0xd264
   13298:	movt	r0, #2
   1329c:	ldrb	r0, [r0]
   132a0:	cmp	r0, #1
   132a4:	bne	132f0 <__assert_fail@plt+0x1aec>
   132a8:	movw	r0, #53744	; 0xd1f0
   132ac:	movw	r1, #53816	; 0xd238
   132b0:	movt	r0, #2
   132b4:	movt	r1, #2
   132b8:	ldr	r0, [r0, #28]
   132bc:	ldr	r1, [r1]
   132c0:	cmp	r1, r0
   132c4:	beq	132f0 <__assert_fail@plt+0x1aec>
   132c8:	movw	r0, #53744	; 0xd1f0
   132cc:	movt	r0, #2
   132d0:	ldr	r0, [r0]
   132d4:	cmp	r0, #0
   132d8:	bne	132f0 <__assert_fail@plt+0x1aec>
   132dc:	movw	r0, #53744	; 0xd1f0
   132e0:	movw	r1, #53816	; 0xd238
   132e4:	movt	r0, #2
   132e8:	movt	r1, #2
   132ec:	bl	14a54 <__assert_fail@plt+0x3250>
   132f0:	movw	r1, #44619	; 0xae4b
   132f4:	mov	r0, #0
   132f8:	mov	r2, #5
   132fc:	movt	r1, #1
   13300:	bl	114ec <dcgettext@plt>
   13304:	ldr	r2, [sp, #24]
   13308:	movw	r1, #44714	; 0xaeaa
   1330c:	mov	r4, r0
   13310:	movw	r0, #44707	; 0xaea3
   13314:	movt	r0, #1
   13318:	movt	r1, #1
   1331c:	cmp	r2, #34	; 0x22
   13320:	b	133c0 <__assert_fail@plt+0x1bbc>
   13324:	movw	r0, #53744	; 0xd1f0
   13328:	movt	r0, #2
   1332c:	ldr	r0, [r0, #24]
   13330:	cmp	r0, #0
   13334:	bne	13394 <__assert_fail@plt+0x1b90>
   13338:	movw	r0, #53860	; 0xd264
   1333c:	movt	r0, #2
   13340:	ldrb	r0, [r0]
   13344:	cmp	r0, #1
   13348:	bne	13394 <__assert_fail@plt+0x1b90>
   1334c:	movw	r0, #53744	; 0xd1f0
   13350:	movw	r1, #53816	; 0xd238
   13354:	movt	r0, #2
   13358:	movt	r1, #2
   1335c:	ldr	r0, [r0, #28]
   13360:	ldr	r1, [r1]
   13364:	cmp	r1, r0
   13368:	beq	13394 <__assert_fail@plt+0x1b90>
   1336c:	movw	r0, #53744	; 0xd1f0
   13370:	movt	r0, #2
   13374:	ldr	r0, [r0]
   13378:	cmp	r0, #0
   1337c:	bne	13394 <__assert_fail@plt+0x1b90>
   13380:	movw	r0, #53744	; 0xd1f0
   13384:	movw	r1, #53816	; 0xd238
   13388:	movt	r0, #2
   1338c:	movt	r1, #2
   13390:	bl	14a54 <__assert_fail@plt+0x3250>
   13394:	movw	r1, #44619	; 0xae4b
   13398:	mov	r0, #0
   1339c:	mov	r2, #5
   133a0:	movt	r1, #1
   133a4:	bl	114ec <dcgettext@plt>
   133a8:	movw	r1, #44714	; 0xaeaa
   133ac:	mov	r4, r0
   133b0:	movw	r0, #44707	; 0xaea3
   133b4:	cmp	r5, #34	; 0x22
   133b8:	movt	r0, #1
   133bc:	movt	r1, #1
   133c0:	moveq	r1, r0
   133c4:	mov	r0, #0
   133c8:	mov	r2, #5
   133cc:	bl	114ec <dcgettext@plt>
   133d0:	mov	r3, r0
   133d4:	mov	r0, #1
   133d8:	mov	r1, #0
   133dc:	mov	r2, r4
   133e0:	bl	115b8 <error@plt>
   133e4:	bx	lr
   133e8:	push	{r4, r5, fp, lr}
   133ec:	add	fp, sp, #8
   133f0:	bl	11630 <getpid@plt>
   133f4:	movw	r1, #53736	; 0xd1e8
   133f8:	movt	r1, #2
   133fc:	ldr	r1, [r1]
   13400:	cmp	r0, r1
   13404:	bne	1345c <__assert_fail@plt+0x1c58>
   13408:	movw	r4, #53904	; 0xd290
   1340c:	movt	r4, #2
   13410:	ldrb	r0, [r4]
   13414:	cmp	r0, #0
   13418:	popne	{r4, r5, fp, pc}
   1341c:	mov	r0, #1
   13420:	mov	r1, #0
   13424:	mov	r5, #0
   13428:	strb	r0, [r4]
   1342c:	mov	r0, #1
   13430:	bl	141a4 <__assert_fail@plt+0x29a0>
   13434:	movw	r0, #53740	; 0xd1ec
   13438:	strb	r5, [r4]
   1343c:	movt	r0, #2
   13440:	ldr	r1, [r0]
   13444:	movw	r0, #53872	; 0xd270
   13448:	movt	r0, #2
   1344c:	ldr	r2, [r0]
   13450:	cmp	r1, r2
   13454:	bne	1347c <__assert_fail@plt+0x1c78>
   13458:	pop	{r4, r5, fp, pc}
   1345c:	movw	r0, #45609	; 0xb229
   13460:	movw	r1, #42737	; 0xa6f1
   13464:	movw	r3, #45629	; 0xb23d
   13468:	movw	r2, #1605	; 0x645
   1346c:	movt	r0, #1
   13470:	movt	r1, #1
   13474:	movt	r3, #1
   13478:	bl	11804 <__assert_fail@plt>
   1347c:	ldr	r0, [r0]
   13480:	bl	114a4 <_exit@plt>
   13484:	push	{fp, lr}
   13488:	mov	fp, sp
   1348c:	movw	r1, #43884	; 0xab6c
   13490:	mov	r0, #0
   13494:	mov	r2, #5
   13498:	movt	r1, #1
   1349c:	bl	114ec <dcgettext@plt>
   134a0:	mov	r2, r0
   134a4:	mov	r0, #1
   134a8:	mov	r1, #0
   134ac:	bl	115b8 <error@plt>
   134b0:	push	{r4, r5, r6, r7, fp, lr}
   134b4:	add	fp, sp, #16
   134b8:	sub	sp, sp, #32
   134bc:	movw	r5, #53608	; 0xd168
   134c0:	mov	r4, r3
   134c4:	movt	r5, #2
   134c8:	ldr	r0, [r5]
   134cc:	cmp	r0, #0
   134d0:	beq	13500 <__assert_fail@plt+0x1cfc>
   134d4:	ldr	r0, [r5]
   134d8:	movw	r6, #53884	; 0xd27c
   134dc:	movt	r6, #2
   134e0:	b	134f4 <__assert_fail@plt+0x1cf0>
   134e4:	mov	r0, #0
   134e8:	mov	r1, #1
   134ec:	bl	141a4 <__assert_fail@plt+0x29a0>
   134f0:	ldr	r0, [r5]
   134f4:	ldr	r1, [r6]
   134f8:	cmp	r1, r0
   134fc:	bcs	134e4 <__assert_fail@plt+0x1ce0>
   13500:	movw	r5, #53798	; 0xd226
   13504:	movt	r5, #2
   13508:	ldrb	r0, [r5]
   1350c:	cmp	r0, #1
   13510:	bne	13534 <__assert_fail@plt+0x1d30>
   13514:	mov	r0, #1
   13518:	mov	r6, #1
   1351c:	bl	1446c <__assert_fail@plt+0x2c68>
   13520:	cmp	r0, #0
   13524:	beq	13918 <__assert_fail@plt+0x2114>
   13528:	ldrb	r0, [r5]
   1352c:	cmp	r0, #0
   13530:	bne	1354c <__assert_fail@plt+0x1d48>
   13534:	movw	r0, #53796	; 0xd224
   13538:	movt	r0, #2
   1353c:	ldrb	r0, [r0]
   13540:	cmp	r0, #1
   13544:	moveq	r0, #0
   13548:	bleq	1446c <__assert_fail@plt+0x2c68>
   1354c:	mov	r0, #0
   13550:	mov	r1, #0
   13554:	bl	141a4 <__assert_fail@plt+0x29a0>
   13558:	add	r0, sp, #4
   1355c:	bl	188b0 <__assert_fail@plt+0x70ac>
   13560:	cmp	r0, #0
   13564:	bne	13aac <__assert_fail@plt+0x22a8>
   13568:	ldr	r0, [sp, #8]
   1356c:	mov	r1, #2
   13570:	mov	r2, #1
   13574:	bl	19dd4 <__assert_fail@plt+0x85d0>
   13578:	bl	11738 <fork@plt>
   1357c:	mov	r5, r0
   13580:	cmn	r0, #1
   13584:	ble	13674 <__assert_fail@plt+0x1e70>
   13588:	cmp	r5, #0
   1358c:	beq	13604 <__assert_fail@plt+0x1e00>
   13590:	cmn	r5, #1
   13594:	beq	13ac0 <__assert_fail@plt+0x22bc>
   13598:	ldr	r0, [sp, #8]
   1359c:	bl	117ec <close@plt>
   135a0:	ldr	r0, [sp, #4]
   135a4:	add	r1, sp, #12
   135a8:	mov	r2, #4
   135ac:	bl	187d8 <__assert_fail@plt+0x6fd4>
   135b0:	cmp	r0, #4
   135b4:	beq	13838 <__assert_fail@plt+0x2034>
   135b8:	mov	r4, r0
   135bc:	cmp	r0, #0
   135c0:	beq	137f0 <__assert_fail@plt+0x1fec>
   135c4:	cmn	r4, #1
   135c8:	bne	13ad4 <__assert_fail@plt+0x22d0>
   135cc:	ldr	r0, [sp, #4]
   135d0:	bl	117ec <close@plt>
   135d4:	bl	11684 <__errno_location@plt>
   135d8:	ldr	r4, [r0]
   135dc:	movw	r1, #44929	; 0xaf81
   135e0:	mov	r0, #0
   135e4:	mov	r2, #5
   135e8:	movt	r1, #1
   135ec:	bl	114ec <dcgettext@plt>
   135f0:	mov	r2, r0
   135f4:	mov	r0, #0
   135f8:	mov	r1, r4
   135fc:	bl	115b8 <error@plt>
   13600:	b	1390c <__assert_fail@plt+0x2108>
   13604:	ldr	r0, [sp, #4]
   13608:	bl	117ec <close@plt>
   1360c:	movw	r0, #53872	; 0xd270
   13610:	mov	r1, #0
   13614:	movt	r0, #2
   13618:	str	r1, [r0]
   1361c:	bl	15558 <__assert_fail@plt+0x3d54>
   13620:	cmp	r0, #0
   13624:	beq	1362c <__assert_fail@plt+0x1e28>
   13628:	bl	15578 <__assert_fail@plt+0x3d74>
   1362c:	movw	r5, #53892	; 0xd284
   13630:	movw	r0, #53896	; 0xd288
   13634:	movt	r5, #2
   13638:	movt	r0, #2
   1363c:	ldr	r6, [r5]
   13640:	cmp	r6, #0
   13644:	beq	136c8 <__assert_fail@plt+0x1ec4>
   13648:	ldr	r0, [r0]
   1364c:	mov	r3, #0
   13650:	ldr	r1, [r0, r3, lsl #2]
   13654:	cmp	r1, #0
   13658:	beq	13668 <__assert_fail@plt+0x1e64>
   1365c:	add	r3, r3, #1
   13660:	cmp	r3, r6
   13664:	bcc	13650 <__assert_fail@plt+0x1e4c>
   13668:	cmp	r3, r6
   1366c:	beq	136cc <__assert_fail@plt+0x1ec8>
   13670:	b	13710 <__assert_fail@plt+0x1f0c>
   13674:	bl	11684 <__errno_location@plt>
   13678:	mov	r6, r0
   1367c:	ldr	r0, [r0]
   13680:	cmp	r0, #11
   13684:	bne	13588 <__assert_fail@plt+0x1d84>
   13688:	movw	r7, #53884	; 0xd27c
   1368c:	movt	r7, #2
   13690:	ldr	r0, [r7]
   13694:	cmp	r0, #0
   13698:	beq	13588 <__assert_fail@plt+0x1d84>
   1369c:	mov	r0, #0
   136a0:	mov	r1, #1
   136a4:	bl	141a4 <__assert_fail@plt+0x29a0>
   136a8:	bl	11738 <fork@plt>
   136ac:	mov	r5, r0
   136b0:	cmp	r0, #0
   136b4:	bge	13588 <__assert_fail@plt+0x1d84>
   136b8:	ldr	r0, [r6]
   136bc:	cmp	r0, #11
   136c0:	beq	13690 <__assert_fail@plt+0x1e8c>
   136c4:	b	13588 <__assert_fail@plt+0x1d84>
   136c8:	ldr	r0, [r0]
   136cc:	mov	r1, r5
   136d0:	mov	r2, #4
   136d4:	bl	19164 <__assert_fail@plt+0x7960>
   136d8:	movw	r1, #53896	; 0xd288
   136dc:	movt	r1, #2
   136e0:	str	r0, [r1]
   136e4:	ldr	r1, [r5]
   136e8:	cmp	r6, r1
   136ec:	bcs	1370c <__assert_fail@plt+0x1f08>
   136f0:	mov	r1, #0
   136f4:	mov	r2, r6
   136f8:	str	r1, [r0, r2, lsl #2]
   136fc:	add	r2, r2, #1
   13700:	ldr	r3, [r5]
   13704:	cmp	r2, r3
   13708:	bcc	136f8 <__assert_fail@plt+0x1ef4>
   1370c:	mov	r3, r6
   13710:	ldr	r1, [r0, r3, lsl #2]
   13714:	cmp	r1, #0
   13718:	bne	13924 <__assert_fail@plt+0x2120>
   1371c:	mov	r1, #0
   13720:	movw	r2, #45436	; 0xb17c
   13724:	str	r1, [r0, r3, lsl #2]
   13728:	movw	r0, #53868	; 0xd26c
   1372c:	mov	r1, #1
   13730:	movt	r2, #1
   13734:	movt	r0, #2
   13738:	strb	r1, [r0]
   1373c:	movw	r0, #53884	; 0xd27c
   13740:	movt	r0, #2
   13744:	ldr	r1, [r0]
   13748:	add	r1, r1, #1
   1374c:	str	r1, [r0]
   13750:	add	r0, sp, #12
   13754:	mov	r1, #19
   13758:	bl	11690 <snprintf@plt>
   1375c:	cmp	r0, #20
   13760:	bcs	13870 <__assert_fail@plt+0x206c>
   13764:	movw	r6, #53800	; 0xd228
   13768:	movt	r6, #2
   1376c:	ldr	r0, [r6]
   13770:	cmp	r0, #0
   13774:	beq	137bc <__assert_fail@plt+0x1fb8>
   13778:	add	r1, sp, #12
   1377c:	mov	r2, #1
   13780:	bl	1166c <setenv@plt>
   13784:	cmn	r0, #1
   13788:	bgt	137bc <__assert_fail@plt+0x1fb8>
   1378c:	bl	11684 <__errno_location@plt>
   13790:	ldr	r5, [r0]
   13794:	movw	r1, #45529	; 0xb1d9
   13798:	mov	r0, #0
   1379c:	mov	r2, #5
   137a0:	movt	r1, #1
   137a4:	bl	114ec <dcgettext@plt>
   137a8:	ldr	r3, [r6]
   137ac:	mov	r2, r0
   137b0:	mov	r0, #0
   137b4:	mov	r1, r5
   137b8:	bl	115b8 <error@plt>
   137bc:	movw	r1, #53808	; 0xd230
   137c0:	movw	r7, #53797	; 0xd225
   137c4:	movt	r1, #2
   137c8:	movt	r7, #2
   137cc:	ldrb	r1, [r1]
   137d0:	ldrb	r0, [r7]
   137d4:	cmp	r1, #0
   137d8:	beq	13944 <__assert_fail@plt+0x2140>
   137dc:	cmp	r0, #0
   137e0:	beq	139ec <__assert_fail@plt+0x21e8>
   137e4:	movw	r5, #45295	; 0xb0ef
   137e8:	movt	r5, #1
   137ec:	b	1395c <__assert_fail@plt+0x2158>
   137f0:	movw	r4, #53892	; 0xd284
   137f4:	movw	r0, #53896	; 0xd288
   137f8:	movt	r4, #2
   137fc:	movt	r0, #2
   13800:	ldr	r6, [r4]
   13804:	cmp	r6, #0
   13808:	beq	13890 <__assert_fail@plt+0x208c>
   1380c:	ldr	r0, [r0]
   13810:	mov	r1, #0
   13814:	ldr	r2, [r0, r1, lsl #2]
   13818:	cmp	r2, #0
   1381c:	beq	1382c <__assert_fail@plt+0x2028>
   13820:	add	r1, r1, #1
   13824:	cmp	r1, r6
   13828:	bcc	13814 <__assert_fail@plt+0x2010>
   1382c:	cmp	r1, r6
   13830:	beq	13894 <__assert_fail@plt+0x2090>
   13834:	b	138d8 <__assert_fail@plt+0x20d4>
   13838:	ldr	r0, [sp, #4]
   1383c:	bl	117ec <close@plt>
   13840:	mov	r1, sp
   13844:	mov	r0, r5
   13848:	mov	r2, #0
   1384c:	mov	r6, #0
   13850:	bl	1157c <waitpid@plt>
   13854:	ldr	r0, [sp, #12]
   13858:	cmp	r0, #7
   1385c:	beq	13918 <__assert_fail@plt+0x2114>
   13860:	cmp	r0, #2
   13864:	bne	13b04 <__assert_fail@plt+0x2300>
   13868:	mov	r0, #127	; 0x7f
   1386c:	bl	1163c <exit@plt>
   13870:	movw	r0, #45439	; 0xb17f
   13874:	movw	r1, #42737	; 0xa6f1
   13878:	movw	r3, #45497	; 0xb1b9
   1387c:	movw	r2, #1190	; 0x4a6
   13880:	movt	r0, #1
   13884:	movt	r1, #1
   13888:	movt	r3, #1
   1388c:	bl	11804 <__assert_fail@plt>
   13890:	ldr	r0, [r0]
   13894:	mov	r1, r4
   13898:	mov	r2, #4
   1389c:	bl	19164 <__assert_fail@plt+0x7960>
   138a0:	movw	r1, #53896	; 0xd288
   138a4:	movt	r1, #2
   138a8:	str	r0, [r1]
   138ac:	ldr	r1, [r4]
   138b0:	cmp	r6, r1
   138b4:	bcs	138d4 <__assert_fail@plt+0x20d0>
   138b8:	mov	r1, #0
   138bc:	mov	r2, r6
   138c0:	str	r1, [r0, r2, lsl #2]
   138c4:	add	r2, r2, #1
   138c8:	ldr	r3, [r4]
   138cc:	cmp	r2, r3
   138d0:	bcc	138c0 <__assert_fail@plt+0x20bc>
   138d4:	mov	r1, r6
   138d8:	ldr	r2, [r0, r1, lsl #2]
   138dc:	cmp	r2, #0
   138e0:	bne	13924 <__assert_fail@plt+0x2120>
   138e4:	str	r5, [r0, r1, lsl #2]
   138e8:	movw	r0, #53868	; 0xd26c
   138ec:	mov	r1, #1
   138f0:	movt	r0, #2
   138f4:	strb	r1, [r0]
   138f8:	movw	r0, #53884	; 0xd27c
   138fc:	movt	r0, #2
   13900:	ldr	r1, [r0]
   13904:	add	r1, r1, #1
   13908:	str	r1, [r0]
   1390c:	ldr	r0, [sp, #4]
   13910:	bl	117ec <close@plt>
   13914:	mov	r6, #1
   13918:	mov	r0, r6
   1391c:	sub	sp, fp, #16
   13920:	pop	{r4, r5, r6, r7, fp, pc}
   13924:	movw	r0, #45567	; 0xb1ff
   13928:	movw	r1, #42737	; 0xa6f1
   1392c:	movw	r3, #45580	; 0xb20c
   13930:	movw	r2, #1477	; 0x5c5
   13934:	movt	r0, #1
   13938:	movt	r1, #1
   1393c:	movt	r3, #1
   13940:	bl	11804 <__assert_fail@plt>
   13944:	movw	r1, #45295	; 0xb0ef
   13948:	movw	r5, #45371	; 0xb13b
   1394c:	cmp	r0, #0
   13950:	movt	r1, #1
   13954:	movt	r5, #1
   13958:	movne	r5, r1
   1395c:	mov	r0, #0
   13960:	bl	117ec <close@plt>
   13964:	mov	r0, r5
   13968:	mov	r1, #0
   1396c:	bl	15d70 <__assert_fail@plt+0x456c>
   13970:	cmn	r0, #1
   13974:	bgt	139b4 <__assert_fail@plt+0x21b0>
   13978:	ldrb	r7, [r7]
   1397c:	bl	11684 <__errno_location@plt>
   13980:	ldr	r6, [r0]
   13984:	mov	r0, #0
   13988:	mov	r1, #8
   1398c:	mov	r2, r5
   13990:	bl	180d0 <__assert_fail@plt+0x68cc>
   13994:	movw	r2, #50235	; 0xc43b
   13998:	mov	r3, r0
   1399c:	cmp	r7, #1
   139a0:	movt	r2, #1
   139a4:	bne	139e0 <__assert_fail@plt+0x21dc>
   139a8:	mov	r0, #1
   139ac:	mov	r1, r6
   139b0:	bl	115b8 <error@plt>
   139b4:	mov	r6, r0
   139b8:	cmp	r0, #0
   139bc:	beq	139ec <__assert_fail@plt+0x21e8>
   139c0:	mov	r0, r6
   139c4:	mov	r1, #0
   139c8:	bl	11504 <dup2@plt>
   139cc:	cmp	r0, #0
   139d0:	bne	13a80 <__assert_fail@plt+0x227c>
   139d4:	mov	r0, r6
   139d8:	bl	117ec <close@plt>
   139dc:	b	139ec <__assert_fail@plt+0x21e8>
   139e0:	mov	r0, #0
   139e4:	mov	r1, r6
   139e8:	bl	115b8 <error@plt>
   139ec:	mov	r0, r4
   139f0:	bl	15078 <__assert_fail@plt+0x3874>
   139f4:	cmp	r0, #0
   139f8:	beq	13a10 <__assert_fail@plt+0x220c>
   139fc:	bl	11684 <__errno_location@plt>
   13a00:	mov	r5, r0
   13a04:	mov	r0, #7
   13a08:	str	r0, [r5]
   13a0c:	b	13a30 <__assert_fail@plt+0x222c>
   13a10:	ldr	r0, [r4]
   13a14:	mov	r1, r4
   13a18:	bl	114bc <execvp@plt>
   13a1c:	bl	11684 <__errno_location@plt>
   13a20:	mov	r5, r0
   13a24:	ldr	r0, [r0]
   13a28:	cmp	r0, #0
   13a2c:	beq	13a40 <__assert_fail@plt+0x223c>
   13a30:	ldr	r0, [sp, #8]
   13a34:	mov	r1, r5
   13a38:	mov	r2, #4
   13a3c:	bl	116c0 <write@plt>
   13a40:	ldr	r0, [sp, #8]
   13a44:	bl	117ec <close@plt>
   13a48:	ldr	r1, [r5]
   13a4c:	mov	r0, #126	; 0x7e
   13a50:	cmp	r1, #7
   13a54:	beq	13a7c <__assert_fail@plt+0x2278>
   13a58:	ldr	r3, [r4]
   13a5c:	movw	r2, #50235	; 0xc43b
   13a60:	mov	r0, #0
   13a64:	movt	r2, #1
   13a68:	bl	115b8 <error@plt>
   13a6c:	ldr	r1, [r5]
   13a70:	mov	r0, #126	; 0x7e
   13a74:	cmp	r1, #2
   13a78:	movweq	r0, #127	; 0x7f
   13a7c:	bl	114a4 <_exit@plt>
   13a80:	bl	11684 <__errno_location@plt>
   13a84:	ldr	r4, [r0]
   13a88:	movw	r1, #45381	; 0xb145
   13a8c:	movt	r1, #1
   13a90:	mov	r0, #0
   13a94:	mov	r2, #5
   13a98:	bl	114ec <dcgettext@plt>
   13a9c:	mov	r2, r0
   13aa0:	mov	r0, #1
   13aa4:	mov	r1, r4
   13aa8:	bl	115b8 <error@plt>
   13aac:	bl	11684 <__errno_location@plt>
   13ab0:	ldr	r4, [r0]
   13ab4:	movw	r1, #44883	; 0xaf53
   13ab8:	movt	r1, #1
   13abc:	b	13a90 <__assert_fail@plt+0x228c>
   13ac0:	bl	11684 <__errno_location@plt>
   13ac4:	ldr	r4, [r0]
   13ac8:	movw	r1, #44917	; 0xaf75
   13acc:	movt	r1, #1
   13ad0:	b	13a90 <__assert_fail@plt+0x228c>
   13ad4:	bl	11684 <__errno_location@plt>
   13ad8:	ldr	r5, [r0]
   13adc:	movw	r1, #45019	; 0xafdb
   13ae0:	mov	r0, #0
   13ae4:	mov	r2, #5
   13ae8:	movt	r1, #1
   13aec:	bl	114ec <dcgettext@plt>
   13af0:	mov	r2, r0
   13af4:	mov	r0, #1
   13af8:	mov	r1, r5
   13afc:	mov	r3, r4
   13b00:	bl	115b8 <error@plt>
   13b04:	mov	r0, #126	; 0x7e
   13b08:	bl	1163c <exit@plt>
   13b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b10:	add	fp, sp, #28
   13b14:	sub	sp, sp, #12
   13b18:	movw	sl, #53881	; 0xd279
   13b1c:	mvn	r9, #0
   13b20:	movt	sl, #2
   13b24:	ldrb	r0, [sl]
   13b28:	cmp	r0, #0
   13b2c:	bne	13c40 <__assert_fail@plt+0x243c>
   13b30:	movw	r0, #53744	; 0xd1f0
   13b34:	movw	r7, #53804	; 0xd22c
   13b38:	movt	r0, #2
   13b3c:	movt	r7, #2
   13b40:	ldr	r5, [r0, #12]
   13b44:	movw	r0, #53812	; 0xd234
   13b48:	movt	r0, #2
   13b4c:	ldr	r6, [r0]
   13b50:	movw	r0, #53816	; 0xd238
   13b54:	movt	r0, #2
   13b58:	ldr	r4, [r0, #20]
   13b5c:	ldr	r0, [r7]
   13b60:	bl	117e0 <getc@plt>
   13b64:	cmn	r0, #1
   13b68:	beq	13ba8 <__assert_fail@plt+0x23a4>
   13b6c:	add	r1, r6, r5
   13b70:	movw	r8, #53788	; 0xd21c
   13b74:	sub	r1, r1, r4
   13b78:	movt	r8, #2
   13b7c:	sub	r5, r1, #1
   13b80:	ldrb	r1, [r8]
   13b84:	cmp	r0, r1
   13b88:	beq	13bd0 <__assert_fail@plt+0x23cc>
   13b8c:	cmp	r6, r5
   13b90:	bcs	13c4c <__assert_fail@plt+0x2448>
   13b94:	strb	r0, [r6], #1
   13b98:	ldr	r0, [r7]
   13b9c:	bl	117e0 <getc@plt>
   13ba0:	cmn	r0, #1
   13ba4:	bne	13b80 <__assert_fail@plt+0x237c>
   13ba8:	mov	r0, #1
   13bac:	strb	r0, [sl]
   13bb0:	movw	r0, #53812	; 0xd234
   13bb4:	movt	r0, #2
   13bb8:	ldr	r2, [r0]
   13bbc:	cmp	r6, r2
   13bc0:	beq	13c40 <__assert_fail@plt+0x243c>
   13bc4:	mov	r0, #0
   13bc8:	strb	r0, [r6], #1
   13bcc:	b	13bf8 <__assert_fail@plt+0x23f4>
   13bd0:	movw	r0, #53864	; 0xd268
   13bd4:	movt	r0, #2
   13bd8:	ldr	r1, [r0]
   13bdc:	add	r1, r1, #1
   13be0:	str	r1, [r0]
   13be4:	movw	r1, #53812	; 0xd234
   13be8:	mov	r0, #0
   13bec:	strb	r0, [r6], #1
   13bf0:	movt	r1, #2
   13bf4:	ldr	r2, [r1]
   13bf8:	movw	r1, #53744	; 0xd1f0
   13bfc:	sub	r9, r6, r2
   13c00:	movt	r1, #2
   13c04:	ldr	r1, [r1, #24]
   13c08:	cmp	r1, #0
   13c0c:	bne	13c40 <__assert_fail@plt+0x243c>
   13c10:	movw	r1, #53860	; 0xd264
   13c14:	str	r0, [sp]
   13c18:	mov	r3, r9
   13c1c:	movt	r1, #2
   13c20:	ldrb	r1, [r1]
   13c24:	eor	r1, r1, #1
   13c28:	stmib	sp, {r0, r1}
   13c2c:	movw	r0, #53744	; 0xd1f0
   13c30:	movw	r1, #53816	; 0xd238
   13c34:	movt	r0, #2
   13c38:	movt	r1, #2
   13c3c:	bl	147e4 <__assert_fail@plt+0x2fe0>
   13c40:	mov	r0, r9
   13c44:	sub	sp, fp, #28
   13c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c4c:	bl	14140 <__assert_fail@plt+0x293c>
   13c50:	movw	r1, #44860	; 0xaf3c
   13c54:	mov	r0, #0
   13c58:	mov	r2, #5
   13c5c:	movt	r1, #1
   13c60:	bl	114ec <dcgettext@plt>
   13c64:	mov	r2, r0
   13c68:	mov	r0, #1
   13c6c:	mov	r1, #0
   13c70:	bl	115b8 <error@plt>
   13c74:	push	{fp, lr}
   13c78:	mov	fp, sp
   13c7c:	cmp	r0, #0
   13c80:	bne	13f54 <__assert_fail@plt+0x2750>
   13c84:	movw	r5, #53724	; 0xd1dc
   13c88:	movw	r1, #45829	; 0xb305
   13c8c:	mov	r0, #0
   13c90:	mov	r2, #5
   13c94:	movt	r5, #2
   13c98:	movt	r1, #1
   13c9c:	ldr	r4, [r5]
   13ca0:	bl	114ec <dcgettext@plt>
   13ca4:	movw	r6, #53936	; 0xd2b0
   13ca8:	mov	r1, r0
   13cac:	mov	r0, r4
   13cb0:	movt	r6, #2
   13cb4:	ldr	r2, [r6]
   13cb8:	bl	11678 <fprintf@plt>
   13cbc:	movw	r1, #45878	; 0xb336
   13cc0:	mov	r0, #0
   13cc4:	mov	r2, #5
   13cc8:	movt	r1, #1
   13ccc:	bl	114ec <dcgettext@plt>
   13cd0:	ldr	r1, [r5]
   13cd4:	bl	117bc <fputs@plt>
   13cd8:	movw	r1, #45956	; 0xb384
   13cdc:	mov	r0, #0
   13ce0:	mov	r2, #5
   13ce4:	movt	r1, #1
   13ce8:	bl	114ec <dcgettext@plt>
   13cec:	ldr	r1, [r5]
   13cf0:	bl	117bc <fputs@plt>
   13cf4:	movw	r1, #46073	; 0xb3f9
   13cf8:	mov	r0, #0
   13cfc:	mov	r2, #5
   13d00:	movt	r1, #1
   13d04:	bl	114ec <dcgettext@plt>
   13d08:	ldr	r1, [r5]
   13d0c:	bl	117bc <fputs@plt>
   13d10:	movw	r1, #46285	; 0xb4cd
   13d14:	mov	r0, #0
   13d18:	mov	r2, #5
   13d1c:	movt	r1, #1
   13d20:	bl	114ec <dcgettext@plt>
   13d24:	ldr	r1, [r5]
   13d28:	bl	117bc <fputs@plt>
   13d2c:	movw	r1, #46362	; 0xb51a
   13d30:	mov	r0, #0
   13d34:	mov	r2, #5
   13d38:	movt	r1, #1
   13d3c:	bl	114ec <dcgettext@plt>
   13d40:	ldr	r1, [r5]
   13d44:	bl	117bc <fputs@plt>
   13d48:	movw	r1, #46596	; 0xb604
   13d4c:	mov	r0, #0
   13d50:	mov	r2, #5
   13d54:	movt	r1, #1
   13d58:	bl	114ec <dcgettext@plt>
   13d5c:	ldr	r1, [r5]
   13d60:	bl	117bc <fputs@plt>
   13d64:	movw	r1, #46821	; 0xb6e5
   13d68:	mov	r0, #0
   13d6c:	mov	r2, #5
   13d70:	movt	r1, #1
   13d74:	bl	114ec <dcgettext@plt>
   13d78:	ldr	r1, [r5]
   13d7c:	bl	117bc <fputs@plt>
   13d80:	movw	r1, #46970	; 0xb77a
   13d84:	mov	r0, #0
   13d88:	mov	r2, #5
   13d8c:	movt	r1, #1
   13d90:	bl	114ec <dcgettext@plt>
   13d94:	ldr	r1, [r5]
   13d98:	bl	117bc <fputs@plt>
   13d9c:	movw	r1, #47022	; 0xb7ae
   13da0:	mov	r0, #0
   13da4:	mov	r2, #5
   13da8:	movt	r1, #1
   13dac:	bl	114ec <dcgettext@plt>
   13db0:	ldr	r1, [r5]
   13db4:	bl	117bc <fputs@plt>
   13db8:	movw	r1, #47233	; 0xb881
   13dbc:	mov	r0, #0
   13dc0:	mov	r2, #5
   13dc4:	movt	r1, #1
   13dc8:	bl	114ec <dcgettext@plt>
   13dcc:	ldr	r1, [r5]
   13dd0:	bl	117bc <fputs@plt>
   13dd4:	movw	r1, #47359	; 0xb8ff
   13dd8:	mov	r0, #0
   13ddc:	mov	r2, #5
   13de0:	movt	r1, #1
   13de4:	bl	114ec <dcgettext@plt>
   13de8:	ldr	r1, [r5]
   13dec:	bl	117bc <fputs@plt>
   13df0:	movw	r1, #47518	; 0xb99e
   13df4:	mov	r0, #0
   13df8:	mov	r2, #5
   13dfc:	movt	r1, #1
   13e00:	bl	114ec <dcgettext@plt>
   13e04:	ldr	r1, [r5]
   13e08:	bl	117bc <fputs@plt>
   13e0c:	movw	r1, #47598	; 0xb9ee
   13e10:	mov	r0, #0
   13e14:	mov	r2, #5
   13e18:	movt	r1, #1
   13e1c:	bl	114ec <dcgettext@plt>
   13e20:	ldr	r1, [r5]
   13e24:	bl	117bc <fputs@plt>
   13e28:	movw	r1, #47814	; 0xbac6
   13e2c:	mov	r0, #0
   13e30:	mov	r2, #5
   13e34:	movt	r1, #1
   13e38:	bl	114ec <dcgettext@plt>
   13e3c:	ldr	r1, [r5]
   13e40:	bl	117bc <fputs@plt>
   13e44:	movw	r1, #47888	; 0xbb10
   13e48:	mov	r0, #0
   13e4c:	mov	r2, #5
   13e50:	movt	r1, #1
   13e54:	bl	114ec <dcgettext@plt>
   13e58:	ldr	r1, [r5]
   13e5c:	bl	117bc <fputs@plt>
   13e60:	movw	r1, #47951	; 0xbb4f
   13e64:	mov	r0, #0
   13e68:	mov	r2, #5
   13e6c:	movt	r1, #1
   13e70:	bl	114ec <dcgettext@plt>
   13e74:	ldr	r1, [r5]
   13e78:	bl	117bc <fputs@plt>
   13e7c:	movw	r1, #48031	; 0xbb9f
   13e80:	mov	r0, #0
   13e84:	mov	r2, #5
   13e88:	movt	r1, #1
   13e8c:	bl	114ec <dcgettext@plt>
   13e90:	ldr	r1, [r5]
   13e94:	bl	117bc <fputs@plt>
   13e98:	movw	r1, #48244	; 0xbc74
   13e9c:	mov	r0, #0
   13ea0:	mov	r2, #5
   13ea4:	movt	r1, #1
   13ea8:	bl	114ec <dcgettext@plt>
   13eac:	ldr	r1, [r5]
   13eb0:	bl	117bc <fputs@plt>
   13eb4:	movw	r1, #48318	; 0xbcbe
   13eb8:	mov	r0, #0
   13ebc:	mov	r2, #5
   13ec0:	movt	r1, #1
   13ec4:	bl	114ec <dcgettext@plt>
   13ec8:	ldr	r1, [r5]
   13ecc:	bl	117bc <fputs@plt>
   13ed0:	movw	r1, #48385	; 0xbd01
   13ed4:	mov	r0, #0
   13ed8:	mov	r2, #5
   13edc:	movt	r1, #1
   13ee0:	bl	114ec <dcgettext@plt>
   13ee4:	ldr	r1, [r5]
   13ee8:	bl	117bc <fputs@plt>
   13eec:	movw	r1, #48454	; 0xbd46
   13ef0:	mov	r0, #0
   13ef4:	mov	r2, #5
   13ef8:	movt	r1, #1
   13efc:	bl	114ec <dcgettext@plt>
   13f00:	ldr	r1, [r5]
   13f04:	bl	117bc <fputs@plt>
   13f08:	movw	r1, #48524	; 0xbd8c
   13f0c:	mov	r0, #0
   13f10:	mov	r2, #5
   13f14:	movt	r1, #1
   13f18:	bl	114ec <dcgettext@plt>
   13f1c:	ldr	r1, [r5]
   13f20:	bl	117bc <fputs@plt>
   13f24:	movw	r1, #48583	; 0xbdc7
   13f28:	mov	r0, #0
   13f2c:	mov	r2, #5
   13f30:	movt	r1, #1
   13f34:	bl	114ec <dcgettext@plt>
   13f38:	ldr	r1, [r5]
   13f3c:	bl	117bc <fputs@plt>
   13f40:	ldr	r0, [r5]
   13f44:	ldr	r1, [r6]
   13f48:	bl	158c8 <__assert_fail@plt+0x40c4>
   13f4c:	mov	r0, #0
   13f50:	bl	1163c <exit@plt>
   13f54:	mov	r4, r0
   13f58:	movw	r0, #53712	; 0xd1d0
   13f5c:	movw	r1, #45790	; 0xb2de
   13f60:	mov	r2, #5
   13f64:	movt	r0, #2
   13f68:	movt	r1, #1
   13f6c:	ldr	r5, [r0]
   13f70:	mov	r0, #0
   13f74:	bl	114ec <dcgettext@plt>
   13f78:	mov	r1, r0
   13f7c:	movw	r0, #53936	; 0xd2b0
   13f80:	movt	r0, #2
   13f84:	ldr	r2, [r0]
   13f88:	mov	r0, r5
   13f8c:	bl	11678 <fprintf@plt>
   13f90:	mov	r0, r4
   13f94:	bl	1163c <exit@plt>
   13f98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f9c:	add	fp, sp, #24
   13fa0:	sub	sp, sp, #16
   13fa4:	mov	r6, r2
   13fa8:	mov	r5, r1
   13fac:	add	r1, sp, #12
   13fb0:	mov	r2, #10
   13fb4:	mov	r7, r3
   13fb8:	mov	r4, r0
   13fbc:	bl	11450 <strtol@plt>
   13fc0:	ldr	r1, [sp, #12]
   13fc4:	cmp	r1, r4
   13fc8:	beq	140a8 <__assert_fail@plt+0x28a4>
   13fcc:	ldrb	r1, [r1]
   13fd0:	cmp	r1, #0
   13fd4:	bne	140a8 <__assert_fail@plt+0x28a4>
   13fd8:	ldr	r8, [fp, #8]
   13fdc:	cmp	r0, r6
   13fe0:	blt	14058 <__assert_fail@plt+0x2854>
   13fe4:	cmp	r7, #0
   13fe8:	blt	14048 <__assert_fail@plt+0x2844>
   13fec:	cmp	r0, r7
   13ff0:	mov	r6, r0
   13ff4:	ble	1404c <__assert_fail@plt+0x2848>
   13ff8:	movw	r0, #53712	; 0xd1d0
   13ffc:	movw	r1, #45744	; 0xb2b0
   14000:	mov	r2, #5
   14004:	movt	r0, #2
   14008:	movt	r1, #1
   1400c:	ldr	r6, [r0]
   14010:	mov	r0, #0
   14014:	bl	114ec <dcgettext@plt>
   14018:	mov	r1, r0
   1401c:	movw	r0, #53936	; 0xd2b0
   14020:	mov	r3, r4
   14024:	movt	r0, #2
   14028:	ldr	r2, [r0]
   1402c:	mov	r0, r6
   14030:	stm	sp, {r5, r7}
   14034:	bl	11678 <fprintf@plt>
   14038:	cmp	r8, #0
   1403c:	mov	r6, r7
   14040:	beq	1404c <__assert_fail@plt+0x2848>
   14044:	b	140a0 <__assert_fail@plt+0x289c>
   14048:	mov	r6, r0
   1404c:	mov	r0, r6
   14050:	sub	sp, fp, #24
   14054:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14058:	movw	r0, #53712	; 0xd1d0
   1405c:	movw	r1, #45698	; 0xb282
   14060:	mov	r2, #5
   14064:	movt	r0, #2
   14068:	movt	r1, #1
   1406c:	ldr	r7, [r0]
   14070:	mov	r0, #0
   14074:	bl	114ec <dcgettext@plt>
   14078:	mov	r1, r0
   1407c:	movw	r0, #53936	; 0xd2b0
   14080:	mov	r3, r4
   14084:	movt	r0, #2
   14088:	ldr	r2, [r0]
   1408c:	mov	r0, r7
   14090:	stm	sp, {r5, r6}
   14094:	bl	11678 <fprintf@plt>
   14098:	cmp	r8, #0
   1409c:	beq	1404c <__assert_fail@plt+0x2848>
   140a0:	mov	r0, #1
   140a4:	bl	13c74 <__assert_fail@plt+0x2470>
   140a8:	movw	r0, #53712	; 0xd1d0
   140ac:	movw	r1, #45658	; 0xb25a
   140b0:	mov	r2, #5
   140b4:	movt	r0, #2
   140b8:	movt	r1, #1
   140bc:	ldr	r6, [r0]
   140c0:	mov	r0, #0
   140c4:	bl	114ec <dcgettext@plt>
   140c8:	mov	r1, r0
   140cc:	movw	r0, #53936	; 0xd2b0
   140d0:	mov	r3, r4
   140d4:	str	r5, [sp]
   140d8:	movt	r0, #2
   140dc:	ldr	r2, [r0]
   140e0:	mov	r0, r6
   140e4:	bl	11678 <fprintf@plt>
   140e8:	mov	r0, #1
   140ec:	bl	13c74 <__assert_fail@plt+0x2470>
   140f0:	movw	r0, #53608	; 0xd168
   140f4:	movt	r0, #2
   140f8:	ldr	r1, [r0]
   140fc:	cmn	r1, #-2147483647	; 0x80000001
   14100:	ldrne	r1, [r0]
   14104:	addne	r1, r1, #1
   14108:	strne	r1, [r0]
   1410c:	movw	r0, #53888	; 0xd280
   14110:	mov	r1, #1
   14114:	movt	r0, #2
   14118:	str	r1, [r0]
   1411c:	bx	lr
   14120:	movw	r0, #53608	; 0xd168
   14124:	movt	r0, #2
   14128:	ldr	r1, [r0]
   1412c:	cmp	r1, #2
   14130:	ldrge	r1, [r0]
   14134:	subge	r1, r1, #1
   14138:	strge	r1, [r0]
   1413c:	bx	lr
   14140:	movw	r0, #53744	; 0xd1f0
   14144:	movt	r0, #2
   14148:	ldr	r1, [r0, #24]
   1414c:	cmp	r1, #0
   14150:	bne	141a0 <__assert_fail@plt+0x299c>
   14154:	movw	r1, #53860	; 0xd264
   14158:	movt	r1, #2
   1415c:	ldrb	r1, [r1]
   14160:	cmp	r1, #1
   14164:	bne	141a0 <__assert_fail@plt+0x299c>
   14168:	movw	r2, #53816	; 0xd238
   1416c:	ldr	r1, [r0, #28]
   14170:	movt	r2, #2
   14174:	ldr	r2, [r2]
   14178:	cmp	r2, r1
   1417c:	bxeq	lr
   14180:	ldr	r0, [r0]
   14184:	cmp	r0, #0
   14188:	bne	141a0 <__assert_fail@plt+0x299c>
   1418c:	movw	r0, #53744	; 0xd1f0
   14190:	movw	r1, #53816	; 0xd238
   14194:	movt	r0, #2
   14198:	movt	r1, #2
   1419c:	b	14a54 <__assert_fail@plt+0x3250>
   141a0:	bx	lr
   141a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141a8:	add	fp, sp, #28
   141ac:	sub	sp, sp, #20
   141b0:	mov	r5, r0
   141b4:	movw	r0, #53884	; 0xd27c
   141b8:	movt	r0, #2
   141bc:	ldr	r0, [r0]
   141c0:	cmp	r0, #0
   141c4:	beq	14440 <__assert_fail@plt+0x2c3c>
   141c8:	movw	sl, #53888	; 0xd280
   141cc:	movw	r8, #53892	; 0xd284
   141d0:	eor	r2, r5, #1
   141d4:	mov	r7, #0
   141d8:	add	r6, sp, #16
   141dc:	mov	r3, #0
   141e0:	str	r1, [sp, #8]
   141e4:	movt	sl, #2
   141e8:	movt	r8, #2
   141ec:	str	r2, [sp, #4]
   141f0:	cmp	r3, r1
   141f4:	mov	r0, #0
   141f8:	str	r7, [sl]
   141fc:	str	r3, [sp, #12]
   14200:	movwcs	r0, #1
   14204:	and	r7, r0, r2
   14208:	mvn	r0, #0
   1420c:	mov	r1, r6
   14210:	mov	r2, r7
   14214:	bl	1157c <waitpid@plt>
   14218:	cmn	r0, #1
   1421c:	bne	1426c <__assert_fail@plt+0x2a68>
   14220:	mov	r4, r8
   14224:	bl	11684 <__errno_location@plt>
   14228:	mov	r8, r0
   1422c:	ldr	r9, [r8]
   14230:	cmp	r9, #4
   14234:	bne	14448 <__assert_fail@plt+0x2c44>
   14238:	ldr	r1, [sl]
   1423c:	cmp	r5, #0
   14240:	mov	r0, r7
   14244:	moveq	r0, #1
   14248:	cmp	r1, #0
   1424c:	mov	r1, r6
   14250:	movne	r7, r0
   14254:	mvn	r0, #0
   14258:	mov	r2, r7
   1425c:	bl	1157c <waitpid@plt>
   14260:	cmn	r0, #1
   14264:	beq	1422c <__assert_fail@plt+0x2a28>
   14268:	mov	r8, r4
   1426c:	cmp	r0, #0
   14270:	beq	14408 <__assert_fail@plt+0x2c04>
   14274:	ldr	r1, [r8]
   14278:	cmp	r1, #0
   1427c:	beq	142b4 <__assert_fail@plt+0x2ab0>
   14280:	movw	r2, #53896	; 0xd288
   14284:	movt	r2, #2
   14288:	ldr	r3, [r2]
   1428c:	mov	r2, #0
   14290:	ldr	r4, [r3, r2, lsl #2]
   14294:	cmp	r0, r4
   14298:	beq	142a8 <__assert_fail@plt+0x2aa4>
   1429c:	add	r2, r2, #1
   142a0:	cmp	r2, r1
   142a4:	bcc	14290 <__assert_fail@plt+0x2a8c>
   142a8:	cmp	r2, r1
   142ac:	beq	14208 <__assert_fail@plt+0x2a04>
   142b0:	b	142c0 <__assert_fail@plt+0x2abc>
   142b4:	mov	r2, #0
   142b8:	cmp	r2, r1
   142bc:	beq	14208 <__assert_fail@plt+0x2a04>
   142c0:	movw	r0, #53896	; 0xd288
   142c4:	movw	r4, #53884	; 0xd27c
   142c8:	mov	r7, #0
   142cc:	movt	r0, #2
   142d0:	movt	r4, #2
   142d4:	ldr	r0, [r0]
   142d8:	str	r7, [r0, r2, lsl #2]
   142dc:	ldr	r0, [r4]
   142e0:	sub	r0, r0, #1
   142e4:	str	r0, [r4]
   142e8:	ldr	r0, [sp, #16]
   142ec:	and	r1, r0, #65280	; 0xff00
   142f0:	cmp	r1, #65280	; 0xff00
   142f4:	bne	14330 <__assert_fail@plt+0x2b2c>
   142f8:	movw	r1, #45172	; 0xb074
   142fc:	mov	r0, #0
   14300:	mov	r2, #5
   14304:	movt	r1, #1
   14308:	bl	114ec <dcgettext@plt>
   1430c:	mov	r2, r0
   14310:	movw	r0, #53816	; 0xd238
   14314:	mov	r1, #0
   14318:	movt	r0, #2
   1431c:	ldr	r0, [r0, #4]
   14320:	ldr	r3, [r0]
   14324:	mov	r0, #124	; 0x7c
   14328:	bl	115b8 <error@plt>
   1432c:	ldr	r0, [sp, #16]
   14330:	uxtb	r1, r0
   14334:	cmp	r1, #127	; 0x7f
   14338:	bne	1437c <__assert_fail@plt+0x2b78>
   1433c:	movw	r1, #45209	; 0xb099
   14340:	mov	r0, #0
   14344:	mov	r2, #5
   14348:	movt	r1, #1
   1434c:	bl	114ec <dcgettext@plt>
   14350:	mov	r2, r0
   14354:	movw	r0, #53816	; 0xd238
   14358:	mov	r1, #0
   1435c:	movt	r0, #2
   14360:	ldr	r0, [r0, #4]
   14364:	ldr	r3, [r0]
   14368:	ldrb	r0, [sp, #17]
   1436c:	str	r0, [sp]
   14370:	mov	r0, #125	; 0x7d
   14374:	bl	115b8 <error@plt>
   14378:	ldr	r0, [sp, #16]
   1437c:	mov	r1, #2130706432	; 0x7f000000
   14380:	and	r1, r1, r0, lsl #24
   14384:	add	r1, r1, #16777216	; 0x1000000
   14388:	cmp	r1, #33554432	; 0x2000000
   1438c:	blt	143d4 <__assert_fail@plt+0x2bd0>
   14390:	movw	r1, #45234	; 0xb0b2
   14394:	mov	r0, #0
   14398:	mov	r2, #5
   1439c:	movt	r1, #1
   143a0:	bl	114ec <dcgettext@plt>
   143a4:	mov	r2, r0
   143a8:	movw	r0, #53816	; 0xd238
   143ac:	mov	r1, #0
   143b0:	movt	r0, #2
   143b4:	ldr	r0, [r0, #4]
   143b8:	ldr	r3, [r0]
   143bc:	ldr	r0, [sp, #16]
   143c0:	and	r0, r0, #127	; 0x7f
   143c4:	str	r0, [sp]
   143c8:	mov	r0, #125	; 0x7d
   143cc:	bl	115b8 <error@plt>
   143d0:	ldr	r0, [sp, #16]
   143d4:	tst	r0, #65280	; 0xff00
   143d8:	ldr	r3, [sp, #12]
   143dc:	ldr	r2, [sp, #4]
   143e0:	movwne	r0, #53872	; 0xd270
   143e4:	movne	r1, #123	; 0x7b
   143e8:	movtne	r0, #2
   143ec:	strne	r1, [r0]
   143f0:	ldr	r0, [r4]
   143f4:	ldr	r1, [sp, #8]
   143f8:	add	r3, r3, #1
   143fc:	cmp	r0, #0
   14400:	bne	141f0 <__assert_fail@plt+0x29ec>
   14404:	b	14440 <__assert_fail@plt+0x2c3c>
   14408:	tst	r7, #1
   1440c:	bne	14440 <__assert_fail@plt+0x2c3c>
   14410:	movw	r1, #45129	; 0xb049
   14414:	mov	r0, #0
   14418:	mov	r2, #5
   1441c:	movt	r1, #1
   14420:	bl	114ec <dcgettext@plt>
   14424:	mov	r2, r0
   14428:	movw	r0, #53884	; 0xd27c
   1442c:	mov	r1, #0
   14430:	movt	r0, #2
   14434:	ldr	r3, [r0]
   14438:	mov	r0, #0
   1443c:	bl	115b8 <error@plt>
   14440:	sub	sp, fp, #28
   14444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14448:	movw	r1, #45097	; 0xb029
   1444c:	mov	r0, #0
   14450:	mov	r2, #5
   14454:	movt	r1, #1
   14458:	bl	114ec <dcgettext@plt>
   1445c:	mov	r2, r0
   14460:	mov	r0, #1
   14464:	mov	r1, r9
   14468:	bl	115b8 <error@plt>
   1446c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14470:	add	fp, sp, #28
   14474:	sub	sp, sp, #4
   14478:	movw	r5, #53816	; 0xd238
   1447c:	mov	r9, r0
   14480:	movt	r5, #2
   14484:	ldr	r0, [r5]
   14488:	cmp	r0, #1
   1448c:	bne	1458c <__assert_fail@plt+0x2d88>
   14490:	cmp	r9, #0
   14494:	beq	14528 <__assert_fail@plt+0x2d24>
   14498:	movw	r6, #53900	; 0xd28c
   1449c:	movt	r6, #2
   144a0:	ldr	r0, [r6]
   144a4:	cmp	r0, #0
   144a8:	bne	144e0 <__assert_fail@plt+0x2cdc>
   144ac:	movw	r0, #45295	; 0xb0ef
   144b0:	mov	r1, #0
   144b4:	movt	r0, #1
   144b8:	bl	1543c <__assert_fail@plt+0x3c38>
   144bc:	cmn	r0, #1
   144c0:	ble	14618 <__assert_fail@plt+0x2e14>
   144c4:	movw	r1, #44038	; 0xac06
   144c8:	mov	r4, r0
   144cc:	movt	r1, #1
   144d0:	bl	1142c <fdopen@plt>
   144d4:	cmp	r0, #0
   144d8:	beq	14624 <__assert_fail@plt+0x2e20>
   144dc:	str	r0, [r6]
   144e0:	movw	r4, #53712	; 0xd1d0
   144e4:	movw	r0, #45340	; 0xb11c
   144e8:	mov	r1, #4
   144ec:	mov	r2, #1
   144f0:	movt	r4, #2
   144f4:	movt	r0, #1
   144f8:	ldr	r3, [r4]
   144fc:	bl	11564 <fwrite@plt>
   14500:	ldr	r0, [r4]
   14504:	bl	19fb4 <__assert_fail@plt+0x87b0>
   14508:	cmp	r0, #0
   1450c:	bne	14604 <__assert_fail@plt+0x2e00>
   14510:	ldr	r0, [r6]
   14514:	bl	117e0 <getc@plt>
   14518:	mov	r4, r0
   1451c:	cmp	r0, #10
   14520:	bne	14558 <__assert_fail@plt+0x2d54>
   14524:	b	14574 <__assert_fail@plt+0x2d70>
   14528:	movw	r0, #53712	; 0xd1d0
   1452c:	movt	r0, #2
   14530:	ldr	r1, [r0]
   14534:	mov	r0, #10
   14538:	bl	11780 <putc@plt>
   1453c:	mov	r0, #0
   14540:	sub	sp, fp, #28
   14544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14548:	ldr	r0, [r6]
   1454c:	bl	117e0 <getc@plt>
   14550:	cmp	r0, #10
   14554:	beq	14574 <__assert_fail@plt+0x2d70>
   14558:	cmn	r0, #1
   1455c:	bne	14548 <__assert_fail@plt+0x2d44>
   14560:	bl	11684 <__errno_location@plt>
   14564:	ldr	r4, [r0]
   14568:	movw	r1, #45345	; 0xb121
   1456c:	movt	r1, #1
   14570:	b	14650 <__assert_fail@plt+0x2e4c>
   14574:	orr	r1, r4, #32
   14578:	mov	r0, #1
   1457c:	cmp	r1, #121	; 0x79
   14580:	movne	r0, #0
   14584:	sub	sp, fp, #28
   14588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1458c:	movw	sl, #53712	; 0xd1d0
   14590:	movw	r8, #45262	; 0xb0ce
   14594:	mov	r4, #0
   14598:	movt	sl, #2
   1459c:	movt	r8, #1
   145a0:	movw	r6, #45267	; 0xb0d3
   145a4:	movw	r0, #45955	; 0xb383
   145a8:	cmp	r4, #0
   145ac:	ldr	r7, [sl]
   145b0:	mov	r1, #3
   145b4:	movt	r6, #1
   145b8:	movt	r0, #1
   145bc:	moveq	r6, r0
   145c0:	ldr	r0, [r5, #4]
   145c4:	ldr	r2, [r0, r4, lsl #2]
   145c8:	mov	r0, #0
   145cc:	bl	180d0 <__assert_fail@plt+0x68cc>
   145d0:	mov	r3, r0
   145d4:	mov	r0, r7
   145d8:	mov	r1, r8
   145dc:	mov	r2, r6
   145e0:	bl	11678 <fprintf@plt>
   145e4:	cmn	r0, #1
   145e8:	ble	14604 <__assert_fail@plt+0x2e00>
   145ec:	ldr	r0, [r5]
   145f0:	add	r4, r4, #1
   145f4:	sub	r0, r0, #1
   145f8:	cmp	r4, r0
   145fc:	bcc	145a0 <__assert_fail@plt+0x2d9c>
   14600:	b	14490 <__assert_fail@plt+0x2c8c>
   14604:	bl	11684 <__errno_location@plt>
   14608:	ldr	r4, [r0]
   1460c:	movw	r1, #45269	; 0xb0d5
   14610:	movt	r1, #1
   14614:	b	14650 <__assert_fail@plt+0x2e4c>
   14618:	bl	11684 <__errno_location@plt>
   1461c:	mov	r5, r0
   14620:	b	1463c <__assert_fail@plt+0x2e38>
   14624:	bl	11684 <__errno_location@plt>
   14628:	ldr	r7, [r0]
   1462c:	mov	r5, r0
   14630:	mov	r0, r4
   14634:	bl	117ec <close@plt>
   14638:	str	r7, [r5]
   1463c:	mov	r0, #0
   14640:	movw	r1, #45304	; 0xb0f8
   14644:	str	r0, [r6]
   14648:	movt	r1, #1
   1464c:	ldr	r4, [r5]
   14650:	mov	r0, #0
   14654:	mov	r2, #5
   14658:	bl	114ec <dcgettext@plt>
   1465c:	mov	r2, r0
   14660:	mov	r0, #1
   14664:	mov	r1, r4
   14668:	bl	115b8 <error@plt>
   1466c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14670:	add	fp, sp, #28
   14674:	sub	sp, sp, #20
   14678:	movw	r5, #53908	; 0xd294
   1467c:	str	r1, [sp, #12]
   14680:	str	r0, [sp, #16]
   14684:	ldr	r4, [r0, #12]
   14688:	ldr	r0, [fp, #20]
   1468c:	ldr	r1, [fp, #12]
   14690:	mov	r9, r3
   14694:	mov	r7, r2
   14698:	movt	r5, #2
   1469c:	ldr	r6, [r5]
   146a0:	cmp	r6, #0
   146a4:	bne	146c4 <__assert_fail@plt+0x2ec0>
   146a8:	mov	r8, r0
   146ac:	add	r0, r4, #1
   146b0:	bl	18fb8 <__assert_fail@plt+0x77b4>
   146b4:	ldr	r1, [fp, #12]
   146b8:	mov	r6, r0
   146bc:	mov	r0, r8
   146c0:	str	r6, [r5]
   146c4:	sub	sl, r4, #1
   146c8:	add	r5, r0, r1
   146cc:	ldr	r0, [sp, #16]
   146d0:	ldr	r1, [r0, #24]
   146d4:	mov	r0, r7
   146d8:	bl	15db8 <__assert_fail@plt+0x45b4>
   146dc:	cmp	r0, #0
   146e0:	mov	r4, r9
   146e4:	subne	r4, r0, r7
   146e8:	cmp	sl, r4
   146ec:	bls	14778 <__assert_fail@plt+0x2f74>
   146f0:	mov	r8, r0
   146f4:	mov	r0, r6
   146f8:	mov	r1, r7
   146fc:	mov	r2, r4
   14700:	bl	116b4 <strncpy@plt>
   14704:	sub	r9, r9, r4
   14708:	add	r7, r7, r4
   1470c:	add	r6, r6, r4
   14710:	sub	sl, sl, r4
   14714:	cmp	r8, #0
   14718:	beq	14768 <__assert_fail@plt+0x2f64>
   1471c:	ldr	r4, [fp, #12]
   14720:	ldr	r1, [fp, #8]
   14724:	cmp	sl, r5
   14728:	bls	14778 <__assert_fail@plt+0x2f74>
   1472c:	cmp	r1, #0
   14730:	beq	14740 <__assert_fail@plt+0x2f3c>
   14734:	mov	r0, r6
   14738:	bl	11594 <strcpy@plt>
   1473c:	add	r6, r6, r4
   14740:	ldr	r1, [fp, #16]
   14744:	mov	r0, r6
   14748:	sub	sl, sl, r5
   1474c:	bl	11594 <strcpy@plt>
   14750:	ldr	r0, [fp, #20]
   14754:	add	r6, r6, r0
   14758:	ldr	r0, [sp, #16]
   1475c:	ldr	r0, [r0, #20]
   14760:	sub	r9, r9, r0
   14764:	add	r7, r7, r0
   14768:	ldrb	r0, [r7]
   1476c:	cmp	r0, #0
   14770:	bne	146cc <__assert_fail@plt+0x2ec8>
   14774:	b	14784 <__assert_fail@plt+0x2f80>
   14778:	ldrb	r0, [r7]
   1477c:	cmp	r0, #0
   14780:	bne	147c0 <__assert_fail@plt+0x2fbc>
   14784:	mov	r0, #0
   14788:	movw	r1, #53908	; 0xd294
   1478c:	strb	r0, [r6], #1
   14790:	str	r0, [sp]
   14794:	str	r0, [sp, #4]
   14798:	ldr	r0, [fp, #24]
   1479c:	movt	r1, #2
   147a0:	ldr	r2, [r1]
   147a4:	ldr	r1, [sp, #12]
   147a8:	str	r0, [sp, #8]
   147ac:	ldr	r0, [sp, #16]
   147b0:	sub	r3, r6, r2
   147b4:	bl	147e4 <__assert_fail@plt+0x2fe0>
   147b8:	sub	sp, fp, #28
   147bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147c0:	movw	r1, #48956	; 0xbf3c
   147c4:	mov	r0, #0
   147c8:	mov	r2, #5
   147cc:	movt	r1, #1
   147d0:	bl	114ec <dcgettext@plt>
   147d4:	mov	r2, r0
   147d8:	mov	r0, #1
   147dc:	mov	r1, #0
   147e0:	bl	115b8 <error@plt>
   147e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147e8:	add	fp, sp, #28
   147ec:	sub	sp, sp, #4
   147f0:	cmp	r2, #0
   147f4:	beq	14a04 <__assert_fail@plt+0x3200>
   147f8:	mov	r5, r0
   147fc:	ldr	r6, [fp, #16]
   14800:	ldr	r0, [fp, #12]
   14804:	movw	sl, #49795	; 0xc283
   14808:	mov	r9, r3
   1480c:	mov	r8, r2
   14810:	mov	r4, r1
   14814:	movt	sl, #1
   14818:	cmp	r2, sl
   1481c:	beq	148d0 <__assert_fail@plt+0x30cc>
   14820:	ldr	r1, [r4, #16]
   14824:	add	r0, r0, r9
   14828:	add	r0, r0, r1
   1482c:	ldr	r1, [r5, #12]
   14830:	cmp	r0, r1
   14834:	bls	1488c <__assert_fail@plt+0x3088>
   14838:	cmp	r6, #0
   1483c:	bne	14a24 <__assert_fail@plt+0x3220>
   14840:	ldr	r0, [r5, #28]
   14844:	ldr	r1, [r4]
   14848:	cmp	r1, r0
   1484c:	beq	14a24 <__assert_fail@plt+0x3220>
   14850:	ldr	r0, [r5, #24]
   14854:	cmp	r0, #0
   14858:	bne	14a30 <__assert_fail@plt+0x322c>
   1485c:	ldr	r0, [r5]
   14860:	cmp	r0, #0
   14864:	beq	1487c <__assert_fail@plt+0x3078>
   14868:	ldr	r0, [r5, #36]	; 0x24
   1486c:	cmp	r0, #0
   14870:	ldreq	r0, [r5, #40]	; 0x28
   14874:	cmpeq	r0, #0
   14878:	bne	14a30 <__assert_fail@plt+0x322c>
   1487c:	mov	r0, r5
   14880:	mov	r1, r4
   14884:	bl	14a54 <__assert_fail@plt+0x3250>
   14888:	b	14894 <__assert_fail@plt+0x3090>
   1488c:	cmp	r6, #0
   14890:	bne	148b4 <__assert_fail@plt+0x30b0>
   14894:	ldr	r0, [r5, #40]	; 0x28
   14898:	cmp	r0, #0
   1489c:	beq	148b4 <__assert_fail@plt+0x30b0>
   148a0:	ldr	r1, [r5, #28]
   148a4:	ldr	r2, [r4]
   148a8:	sub	r1, r2, r1
   148ac:	cmp	r1, r0
   148b0:	beq	148c4 <__assert_fail@plt+0x30c0>
   148b4:	ldr	r0, [r5, #16]
   148b8:	ldr	r1, [r4]
   148bc:	cmp	r1, r0
   148c0:	bne	148d0 <__assert_fail@plt+0x30cc>
   148c4:	mov	r0, r5
   148c8:	mov	r1, r4
   148cc:	bl	14a54 <__assert_fail@plt+0x3250>
   148d0:	cmp	r6, #0
   148d4:	moveq	r0, #1
   148d8:	streq	r0, [r4, #28]
   148dc:	ldr	r0, [r4]
   148e0:	ldr	r1, [r4, #8]
   148e4:	cmp	r0, r1
   148e8:	bcc	14920 <__assert_fail@plt+0x311c>
   148ec:	ldr	r0, [r4, #4]
   148f0:	cmp	r0, #0
   148f4:	beq	1490c <__assert_fail@plt+0x3108>
   148f8:	lsl	r2, r1, #1
   148fc:	lsl	r1, r1, #3
   14900:	str	r2, [r4, #8]
   14904:	bl	19000 <__assert_fail@plt+0x77fc>
   14908:	b	1491c <__assert_fail@plt+0x3118>
   1490c:	mov	r0, #64	; 0x40
   14910:	str	r0, [r4, #8]
   14914:	mov	r0, #256	; 0x100
   14918:	bl	18fb8 <__assert_fail@plt+0x77b4>
   1491c:	str	r0, [r4, #4]
   14920:	cmp	r8, sl
   14924:	beq	149ac <__assert_fail@plt+0x31a8>
   14928:	ldm	r4, {r2, r3}
   1492c:	mov	sl, r6
   14930:	ldr	r1, [fp, #8]
   14934:	ldr	r6, [r4, #12]
   14938:	ldr	r0, [r4, #16]
   1493c:	add	r7, r2, #1
   14940:	cmp	r1, #0
   14944:	str	r7, [r4]
   14948:	add	r7, r6, r0
   1494c:	str	r7, [r3, r2, lsl #2]
   14950:	beq	14970 <__assert_fail@plt+0x316c>
   14954:	ldr	r2, [r4, #12]
   14958:	add	r0, r2, r0
   1495c:	bl	11594 <strcpy@plt>
   14960:	ldr	r0, [r4, #16]
   14964:	ldr	r1, [fp, #12]
   14968:	add	r0, r0, r1
   1496c:	str	r0, [r4, #16]
   14970:	ldr	r1, [r4, #12]
   14974:	mov	r6, sl
   14978:	add	r0, r1, r0
   1497c:	mov	r1, r8
   14980:	bl	11594 <strcpy@plt>
   14984:	ldr	r0, [r4, #16]
   14988:	cmp	sl, #0
   1498c:	add	r0, r0, r9
   14990:	str	r0, [r4, #16]
   14994:	beq	149c4 <__assert_fail@plt+0x31c0>
   14998:	ldr	r0, [r5, #16]
   1499c:	ldr	r1, [r4]
   149a0:	cmp	r1, r0
   149a4:	beq	149e4 <__assert_fail@plt+0x31e0>
   149a8:	b	149f0 <__assert_fail@plt+0x31ec>
   149ac:	ldm	r4, {r0, r1}
   149b0:	add	r2, r0, #1
   149b4:	str	r2, [r4]
   149b8:	mov	r2, #0
   149bc:	str	r2, [r1, r0, lsl #2]
   149c0:	b	149f0 <__assert_fail@plt+0x31ec>
   149c4:	ldr	r0, [r5, #40]	; 0x28
   149c8:	cmp	r0, #0
   149cc:	beq	14998 <__assert_fail@plt+0x3194>
   149d0:	ldr	r1, [r5, #28]
   149d4:	ldr	r2, [r4]
   149d8:	sub	r1, r2, r1
   149dc:	cmp	r1, r0
   149e0:	bne	14998 <__assert_fail@plt+0x3194>
   149e4:	mov	r0, r5
   149e8:	mov	r1, r4
   149ec:	bl	14a54 <__assert_fail@plt+0x3250>
   149f0:	cmp	r6, #0
   149f4:	ldrne	r0, [r4, #16]
   149f8:	strne	r0, [r4, #20]
   149fc:	sub	sp, fp, #28
   14a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a04:	movw	r0, #49167	; 0xc00f
   14a08:	movw	r1, #48993	; 0xbf61
   14a0c:	movw	r3, #49179	; 0xc01b
   14a10:	movw	r2, #341	; 0x155
   14a14:	movt	r0, #1
   14a18:	movt	r1, #1
   14a1c:	movt	r3, #1
   14a20:	bl	11804 <__assert_fail@plt>
   14a24:	movw	r1, #49297	; 0xc091
   14a28:	movt	r1, #1
   14a2c:	b	14a38 <__assert_fail@plt+0x3234>
   14a30:	movw	r1, #49356	; 0xc0cc
   14a34:	movt	r1, #1
   14a38:	mov	r0, #0
   14a3c:	mov	r2, #5
   14a40:	bl	114ec <dcgettext@plt>
   14a44:	mov	r2, r0
   14a48:	mov	r0, #1
   14a4c:	mov	r1, #0
   14a50:	bl	115b8 <error@plt>
   14a54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a58:	add	fp, sp, #28
   14a5c:	sub	sp, sp, #12
   14a60:	mov	r9, r0
   14a64:	mov	r0, #1
   14a68:	mov	r8, r1
   14a6c:	str	r0, [r1, #28]
   14a70:	ldr	r2, [r1]
   14a74:	ldmib	r1, {r0, r1}
   14a78:	cmp	r2, r1
   14a7c:	bcc	14ab0 <__assert_fail@plt+0x32ac>
   14a80:	cmp	r0, #0
   14a84:	beq	14a9c <__assert_fail@plt+0x3298>
   14a88:	lsl	r2, r1, #1
   14a8c:	lsl	r1, r1, #3
   14a90:	str	r2, [r8, #8]
   14a94:	bl	19000 <__assert_fail@plt+0x77fc>
   14a98:	b	14aac <__assert_fail@plt+0x32a8>
   14a9c:	mov	r0, #64	; 0x40
   14aa0:	str	r0, [r8, #8]
   14aa4:	mov	r0, #256	; 0x100
   14aa8:	bl	18fb8 <__assert_fail@plt+0x77b4>
   14aac:	str	r0, [r8, #4]
   14ab0:	ldr	r2, [r8]
   14ab4:	mov	r3, #0
   14ab8:	adds	r1, r2, #1
   14abc:	str	r1, [r8]
   14ac0:	str	r3, [r0, r2, lsl #2]
   14ac4:	beq	14df8 <__assert_fail@plt+0x35f4>
   14ac8:	ldr	r0, [r8, #4]
   14acc:	ldr	r0, [r0, r2, lsl #2]
   14ad0:	cmp	r0, #0
   14ad4:	bne	14e18 <__assert_fail@plt+0x3614>
   14ad8:	mov	r0, #4
   14adc:	add	r0, r0, r1, lsl #2
   14ae0:	bl	18fb8 <__assert_fail@plt+0x77b4>
   14ae4:	ldr	r1, [r8]
   14ae8:	mov	sl, r0
   14aec:	ldr	r0, [r9, #28]
   14af0:	mov	lr, #0
   14af4:	str	r9, [sp, #4]
   14af8:	mov	r5, r1
   14afc:	cmp	r0, #0
   14b00:	beq	14b70 <__assert_fail@plt+0x336c>
   14b04:	ldr	ip, [r8, #4]
   14b08:	mov	r4, #0
   14b0c:	cmp	r0, #4
   14b10:	bcc	14b54 <__assert_fail@plt+0x3350>
   14b14:	add	r2, ip, r0, lsl #2
   14b18:	cmp	sl, r2
   14b1c:	bcs	14b2c <__assert_fail@plt+0x3328>
   14b20:	add	r2, sl, r0, lsl #2
   14b24:	cmp	r2, ip
   14b28:	bhi	14b54 <__assert_fail@plt+0x3350>
   14b2c:	bic	r4, r0, #3
   14b30:	mov	r6, sl
   14b34:	mov	r2, ip
   14b38:	mov	r3, r4
   14b3c:	vld1.32	{d16-d17}, [r2]!
   14b40:	subs	r3, r3, #4
   14b44:	vst1.32	{d16-d17}, [r6]!
   14b48:	bne	14b3c <__assert_fail@plt+0x3338>
   14b4c:	cmp	r0, r4
   14b50:	beq	14b70 <__assert_fail@plt+0x336c>
   14b54:	sub	r7, r0, r4
   14b58:	add	r2, ip, r4, lsl #2
   14b5c:	add	r3, sl, r4, lsl #2
   14b60:	ldr	r6, [r2], #4
   14b64:	subs	r7, r7, #1
   14b68:	str	r6, [r3], #4
   14b6c:	bne	14b60 <__assert_fail@plt+0x335c>
   14b70:	cmp	r0, r5
   14b74:	mov	r7, r0
   14b78:	str	lr, [sp, #8]
   14b7c:	bcs	14c48 <__assert_fail@plt+0x3444>
   14b80:	add	r2, r0, lr
   14b84:	mov	r7, r0
   14b88:	cmp	r2, r1
   14b8c:	bcs	14c48 <__assert_fail@plt+0x3444>
   14b90:	add	lr, r0, lr
   14b94:	sub	r7, r0, r5
   14b98:	sub	r4, lr, r1
   14b9c:	mov	r3, r7
   14ba0:	cmp	r4, r7
   14ba4:	movhi	r3, r4
   14ba8:	rsb	ip, r3, #0
   14bac:	ldr	r3, [r8, #4]
   14bb0:	cmp	ip, #4
   14bb4:	bcs	14bc0 <__assert_fail@plt+0x33bc>
   14bb8:	mov	r7, r0
   14bbc:	b	14c2c <__assert_fail@plt+0x3428>
   14bc0:	cmp	r4, r7
   14bc4:	movhi	r7, r4
   14bc8:	sub	r4, lr, r7
   14bcc:	add	r6, r3, r4, lsl #2
   14bd0:	add	r4, sl, r0, lsl #2
   14bd4:	cmp	r4, r6
   14bd8:	bcs	14bfc <__assert_fail@plt+0x33f8>
   14bdc:	lsl	r6, r0, #2
   14be0:	sub	r6, r6, r7, lsl #2
   14be4:	add	r7, r3, r2, lsl #2
   14be8:	add	r6, sl, r6
   14bec:	cmp	r6, r7
   14bf0:	bls	14bfc <__assert_fail@plt+0x33f8>
   14bf4:	mov	r7, r0
   14bf8:	b	14c2c <__assert_fail@plt+0x3428>
   14bfc:	bic	r6, ip, #3
   14c00:	add	r9, r3, lr, lsl #2
   14c04:	add	r7, r0, r6
   14c08:	add	r2, r2, r6
   14c0c:	mov	lr, r6
   14c10:	vld1.32	{d16-d17}, [r9]!
   14c14:	subs	lr, lr, #4
   14c18:	vst1.32	{d16-d17}, [r4]!
   14c1c:	bne	14c10 <__assert_fail@plt+0x340c>
   14c20:	ldr	r9, [sp, #4]
   14c24:	cmp	r6, ip
   14c28:	beq	14c48 <__assert_fail@plt+0x3444>
   14c2c:	ldr	r6, [r3, r2, lsl #2]
   14c30:	add	r2, r2, #1
   14c34:	cmp	r2, r1
   14c38:	str	r6, [sl, r7, lsl #2]
   14c3c:	add	r7, r7, #1
   14c40:	cmpcc	r7, r5
   14c44:	bcc	14c2c <__assert_fail@plt+0x3428>
   14c48:	cmp	r7, r0
   14c4c:	bcc	14db4 <__assert_fail@plt+0x35b0>
   14c50:	mov	r0, #0
   14c54:	mov	r2, r7
   14c58:	mov	r3, sl
   14c5c:	str	r0, [sl, r7, lsl #2]
   14c60:	mov	r0, r9
   14c64:	ldr	r1, [r8, #24]
   14c68:	ldr	r6, [r9, #32]
   14c6c:	blx	r6
   14c70:	cmp	r0, #0
   14c74:	beq	14c94 <__assert_fail@plt+0x3490>
   14c78:	ldr	r0, [r8, #36]	; 0x24
   14c7c:	cmp	r0, r5
   14c80:	bcs	14cd4 <__assert_fail@plt+0x34d0>
   14c84:	ldr	r3, [sp, #8]
   14c88:	str	r5, [r8, #36]	; 0x24
   14c8c:	mov	r0, r5
   14c90:	b	14ce0 <__assert_fail@plt+0x34dc>
   14c94:	ldr	r0, [r9, #28]
   14c98:	add	r2, r0, #1
   14c9c:	cmp	r5, r2
   14ca0:	bls	14dd4 <__assert_fail@plt+0x35d0>
   14ca4:	ldr	r1, [r8, #40]	; 0x28
   14ca8:	ldr	lr, [sp, #8]
   14cac:	sub	r3, r1, #1
   14cb0:	cmp	r3, r5
   14cb4:	strcs	r5, [r8, #40]	; 0x28
   14cb8:	movcs	r1, r5
   14cbc:	ldr	r3, [r8, #36]	; 0x24
   14cc0:	cmp	r3, #0
   14cc4:	cmpne	r1, r3
   14cc8:	bhi	14d3c <__assert_fail@plt+0x3538>
   14ccc:	lsr	r1, r5, #1
   14cd0:	b	14d54 <__assert_fail@plt+0x3550>
   14cd4:	ldr	r3, [sp, #8]
   14cd8:	cmp	r0, #0
   14cdc:	beq	14d08 <__assert_fail@plt+0x3504>
   14ce0:	ldr	r1, [r8, #40]	; 0x28
   14ce4:	cmp	r1, r0
   14ce8:	bls	14d08 <__assert_fail@plt+0x3504>
   14cec:	sub	r0, r1, r0
   14cf0:	mov	r1, #0
   14cf4:	cmp	r1, r0, lsr #1
   14cf8:	addeq	r5, r5, #1
   14cfc:	lsrne	r0, r0, #1
   14d00:	addne	r5, r0, r5
   14d04:	b	14d10 <__assert_fail@plt+0x350c>
   14d08:	cmn	r5, #1
   14d0c:	addne	r5, r5, #1
   14d10:	ldr	r0, [r9, #28]
   14d14:	cmp	r0, #0
   14d18:	beq	14d2c <__assert_fail@plt+0x3528>
   14d1c:	add	r2, r0, #1
   14d20:	cmp	r5, r2
   14d24:	movhi	r2, r5
   14d28:	b	14d30 <__assert_fail@plt+0x352c>
   14d2c:	mov	r2, r5
   14d30:	add	r1, r7, r3
   14d34:	sub	lr, r1, r0
   14d38:	b	14d64 <__assert_fail@plt+0x3560>
   14d3c:	sub	r1, r1, r3
   14d40:	mov	r3, #0
   14d44:	cmp	r3, r1, lsr #1
   14d48:	subeq	r1, r5, #1
   14d4c:	lsrne	r1, r1, #1
   14d50:	subne	r1, r5, r1
   14d54:	cmp	r1, r2
   14d58:	movhi	r2, r1
   14d5c:	cmp	r0, #0
   14d60:	moveq	r2, r1
   14d64:	ldr	r1, [r8]
   14d68:	cmp	r2, #0
   14d6c:	add	r7, lr, #1
   14d70:	movweq	r2, #1
   14d74:	mov	r5, r2
   14d78:	sub	r3, r1, r0
   14d7c:	cmp	r7, r3
   14d80:	bcc	14afc <__assert_fail@plt+0x32f8>
   14d84:	mov	r0, sl
   14d88:	bl	1a04c <__assert_fail@plt+0x8848>
   14d8c:	ldr	r0, [r9, #28]
   14d90:	mov	r1, #0
   14d94:	mvn	r2, #0
   14d98:	str	r1, [r8, #28]
   14d9c:	str	r2, [r8, #32]
   14da0:	str	r0, [r8]
   14da4:	ldr	r0, [r8, #20]
   14da8:	str	r0, [r8, #16]
   14dac:	sub	sp, fp, #28
   14db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14db4:	movw	r0, #49672	; 0xc208
   14db8:	movw	r1, #48993	; 0xbf61
   14dbc:	movw	r3, #49701	; 0xc225
   14dc0:	mov	r2, #242	; 0xf2
   14dc4:	movt	r0, #1
   14dc8:	movt	r1, #1
   14dcc:	movt	r3, #1
   14dd0:	bl	11804 <__assert_fail@plt>
   14dd4:	movw	r1, #49115	; 0xbfdb
   14dd8:	mov	r0, #0
   14ddc:	mov	r2, #5
   14de0:	movt	r1, #1
   14de4:	bl	114ec <dcgettext@plt>
   14de8:	mov	r2, r0
   14dec:	mov	r0, #1
   14df0:	mov	r1, #0
   14df4:	bl	115b8 <error@plt>
   14df8:	movw	r0, #48973	; 0xbf4d
   14dfc:	movw	r1, #48993	; 0xbf61
   14e00:	movw	r3, #49004	; 0xbf6c
   14e04:	movw	r2, #261	; 0x105
   14e08:	movt	r0, #1
   14e0c:	movt	r1, #1
   14e10:	movt	r3, #1
   14e14:	bl	11804 <__assert_fail@plt>
   14e18:	movw	r0, #49072	; 0xbfb0
   14e1c:	movw	r1, #48993	; 0xbf61
   14e20:	movw	r3, #49004	; 0xbf6c
   14e24:	movw	r2, #262	; 0x106
   14e28:	movt	r0, #1
   14e2c:	movt	r1, #1
   14e30:	movt	r3, #1
   14e34:	bl	11804 <__assert_fail@plt>
   14e38:	ldr	r0, [r0, #28]
   14e3c:	mov	r2, #0
   14e40:	mvn	r3, #0
   14e44:	str	r2, [r1, #28]
   14e48:	str	r3, [r1, #32]
   14e4c:	str	r0, [r1]
   14e50:	ldr	r0, [r1, #20]
   14e54:	str	r0, [r1, #16]
   14e58:	bx	lr
   14e5c:	push	{fp, lr}
   14e60:	mov	fp, sp
   14e64:	mov	r0, #0
   14e68:	bl	114f8 <sysconf@plt>
   14e6c:	cmp	r0, #0
   14e70:	mvnle	r0, #-2147483648	; 0x80000000
   14e74:	pop	{fp, pc}
   14e78:	push	{r4, r5, fp, lr}
   14e7c:	add	fp, sp, #8
   14e80:	movw	r0, #53692	; 0xd1bc
   14e84:	movt	r0, #2
   14e88:	ldr	r1, [r0]
   14e8c:	ldr	r0, [r1]
   14e90:	cmp	r0, #0
   14e94:	moveq	r4, #0
   14e98:	moveq	r0, r4
   14e9c:	popeq	{r4, r5, fp, pc}
   14ea0:	add	r5, r1, #4
   14ea4:	mov	r4, #0
   14ea8:	bl	11654 <strlen@plt>
   14eac:	add	r0, r4, r0
   14eb0:	add	r4, r0, #1
   14eb4:	ldr	r0, [r5], #4
   14eb8:	cmp	r0, #0
   14ebc:	bne	14ea8 <__assert_fail@plt+0x36a4>
   14ec0:	mov	r0, r4
   14ec4:	pop	{r4, r5, fp, pc}
   14ec8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ecc:	add	fp, sp, #24
   14ed0:	mov	r4, r0
   14ed4:	movw	r0, #53692	; 0xd1bc
   14ed8:	mov	r5, r1
   14edc:	mov	r8, #0
   14ee0:	mov	r6, #0
   14ee4:	movt	r0, #2
   14ee8:	ldr	r1, [r0]
   14eec:	ldr	r0, [r1]
   14ef0:	cmp	r0, #0
   14ef4:	beq	14f18 <__assert_fail@plt+0x3714>
   14ef8:	add	r7, r1, #4
   14efc:	mov	r6, #0
   14f00:	bl	11654 <strlen@plt>
   14f04:	add	r0, r6, r0
   14f08:	add	r6, r0, #1
   14f0c:	ldr	r0, [r7], #4
   14f10:	cmp	r0, #0
   14f14:	bne	14f00 <__assert_fail@plt+0x36fc>
   14f18:	mov	r0, #4096	; 0x1000
   14f1c:	str	r0, [r4, #8]
   14f20:	mov	r0, #0
   14f24:	bl	114f8 <sysconf@plt>
   14f28:	mov	r1, r0
   14f2c:	cmp	r0, #0
   14f30:	mov	r0, #1
   14f34:	str	r8, [r4]
   14f38:	mvnle	r1, #-2147483648	; 0x80000000
   14f3c:	cmp	r1, r6
   14f40:	str	r1, [r4, #4]
   14f44:	bcc	14fa0 <__assert_fail@plt+0x379c>
   14f48:	add	r2, r6, r5
   14f4c:	mov	r0, #2
   14f50:	cmp	r2, r1
   14f54:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f58:	sub	r0, r1, r6
   14f5c:	sub	r1, r0, r5
   14f60:	mvn	r0, #1
   14f64:	add	r0, r0, r1, lsr #2
   14f68:	str	r1, [r4, #4]
   14f6c:	cmp	r0, #0
   14f70:	str	r0, [r4, #16]
   14f74:	beq	14fa4 <__assert_fail@plt+0x37a0>
   14f78:	movw	r2, #20420	; 0x4fc4
   14f7c:	mov	r0, #0
   14f80:	movt	r2, #1
   14f84:	str	r0, [r4, #20]
   14f88:	str	r0, [r4, #24]
   14f8c:	str	r0, [r4, #28]
   14f90:	str	r2, [r4, #32]
   14f94:	str	r0, [r4, #36]	; 0x24
   14f98:	str	r0, [r4, #40]	; 0x28
   14f9c:	str	r1, [r4, #12]
   14fa0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14fa4:	movw	r0, #49379	; 0xc0e3
   14fa8:	movw	r1, #48993	; 0xbf61
   14fac:	movw	r3, #49402	; 0xc0fa
   14fb0:	movw	r2, #518	; 0x206
   14fb4:	movt	r0, #1
   14fb8:	movt	r1, #1
   14fbc:	movt	r3, #1
   14fc0:	bl	11804 <__assert_fail@plt>
   14fc4:	mov	r0, #0
   14fc8:	bx	lr
   14fcc:	ldr	r1, [r0, #4]
   14fd0:	mov	r2, #0
   14fd4:	cmp	r2, r1, lsr #17
   14fd8:	beq	14fe8 <__assert_fail@plt+0x37e4>
   14fdc:	ldr	r1, [r0, #8]
   14fe0:	cmp	r1, #131072	; 0x20000
   14fe4:	movls	r1, #131072	; 0x20000
   14fe8:	str	r1, [r0, #12]
   14fec:	bx	lr
   14ff0:	push	{r4, r5, r6, sl, fp, lr}
   14ff4:	add	fp, sp, #16
   14ff8:	mov	r6, #0
   14ffc:	mov	r4, r1
   15000:	str	r6, [r1, #16]
   15004:	str	r6, [r1]
   15008:	str	r6, [r1, #4]
   1500c:	str	r6, [r1, #8]
   15010:	str	r6, [r1, #36]	; 0x24
   15014:	str	r6, [r1, #40]	; 0x28
   15018:	movw	r1, #63488	; 0xf800
   1501c:	ldr	r0, [r0, #12]
   15020:	movt	r1, #32767	; 0x7fff
   15024:	cmp	r0, r1
   15028:	bcs	15058 <__assert_fail@plt+0x3854>
   1502c:	add	r0, r0, #1
   15030:	mov	r5, r2
   15034:	bl	18fb8 <__assert_fail@plt+0x77b4>
   15038:	mvn	r1, #0
   1503c:	str	r0, [r4, #12]
   15040:	str	r6, [r4, #16]
   15044:	str	r6, [r4, #20]
   15048:	str	r5, [r4, #24]
   1504c:	str	r6, [r4, #28]
   15050:	str	r1, [r4, #32]
   15054:	pop	{r4, r5, r6, sl, fp, pc}
   15058:	movw	r0, #49477	; 0xc145
   1505c:	movw	r1, #48993	; 0xbf61
   15060:	movw	r3, #49512	; 0xc168
   15064:	mov	r2, #572	; 0x23c
   15068:	movt	r0, #1
   1506c:	movt	r1, #1
   15070:	movt	r3, #1
   15074:	bl	11804 <__assert_fail@plt>
   15078:	push	{r4, r5, r6, sl, fp, lr}
   1507c:	add	fp, sp, #16
   15080:	mov	r1, r0
   15084:	ldr	r0, [r0]
   15088:	cmp	r0, #0
   1508c:	beq	150b8 <__assert_fail@plt+0x38b4>
   15090:	add	r6, r1, #4
   15094:	mov	r5, #0
   15098:	mov	r4, #0
   1509c:	bl	11654 <strlen@plt>
   150a0:	add	r4, r0, r4
   150a4:	ldr	r0, [r6, r5, lsl #2]
   150a8:	add	r5, r5, #1
   150ac:	cmp	r0, #0
   150b0:	bne	1509c <__assert_fail@plt+0x3898>
   150b4:	b	150c0 <__assert_fail@plt+0x38bc>
   150b8:	mov	r4, #0
   150bc:	mov	r5, #0
   150c0:	movw	r0, #49597	; 0xc1bd
   150c4:	mov	r1, r5
   150c8:	movt	r0, #1
   150cc:	bl	150fc <__assert_fail@plt+0x38f8>
   150d0:	mov	r1, r0
   150d4:	mov	r0, #1
   150d8:	cmp	r1, #0
   150dc:	popne	{r4, r5, r6, sl, fp, pc}
   150e0:	movw	r0, #49634	; 0xc1e2
   150e4:	mov	r1, r4
   150e8:	movt	r0, #1
   150ec:	bl	150fc <__assert_fail@plt+0x38f8>
   150f0:	cmp	r0, #0
   150f4:	movwne	r0, #1
   150f8:	pop	{r4, r5, r6, sl, fp, pc}
   150fc:	push	{r4, r5, fp, lr}
   15100:	add	fp, sp, #8
   15104:	sub	sp, sp, #16
   15108:	mov	r5, r1
   1510c:	mov	r4, r0
   15110:	bl	115dc <getenv@plt>
   15114:	cmp	r0, #0
   15118:	beq	15154 <__assert_fail@plt+0x3950>
   1511c:	mov	r1, #0
   15120:	add	r3, sp, #8
   15124:	mov	r2, #10
   15128:	str	r1, [sp]
   1512c:	add	r1, sp, #12
   15130:	bl	1955c <__assert_fail@plt+0x7d58>
   15134:	cmp	r0, #0
   15138:	bne	15160 <__assert_fail@plt+0x395c>
   1513c:	ldr	r1, [sp, #8]
   15140:	mov	r0, #1
   15144:	cmp	r1, r5
   15148:	movcs	r0, #0
   1514c:	sub	sp, fp, #8
   15150:	pop	{r4, r5, fp, pc}
   15154:	mov	r0, #0
   15158:	sub	sp, fp, #8
   1515c:	pop	{r4, r5, fp, pc}
   15160:	bl	11684 <__errno_location@plt>
   15164:	ldr	r5, [r0]
   15168:	movw	r1, #49807	; 0xc28f
   1516c:	mov	r0, #0
   15170:	mov	r2, #5
   15174:	movt	r1, #1
   15178:	bl	114ec <dcgettext@plt>
   1517c:	mov	r2, r0
   15180:	mov	r0, #1
   15184:	mov	r1, r5
   15188:	mov	r3, r4
   1518c:	bl	115b8 <error@plt>
   15190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15194:	add	fp, sp, #28
   15198:	sub	sp, sp, #540	; 0x21c
   1519c:	bl	152ec <__assert_fail@plt+0x3ae8>
   151a0:	cmn	r0, #-2147483647	; 0x80000001
   151a4:	mov	r5, #0
   151a8:	addne	r0, r0, #1
   151ac:	str	r5, [sp, #20]
   151b0:	str	r5, [sp, #12]
   151b4:	str	r5, [sp, #16]
   151b8:	cmp	r0, #1
   151bc:	str	r0, [sp, #4]
   151c0:	blt	152c4 <__assert_fail@plt+0x3ac0>
   151c4:	add	r0, sp, #12
   151c8:	add	r6, sp, #24
   151cc:	mov	sl, #5
   151d0:	add	r0, r0, #8
   151d4:	str	r0, [sp, #8]
   151d8:	ldr	r0, [sp, #4]
   151dc:	sub	r4, r0, r5
   151e0:	cmp	r4, #64	; 0x40
   151e4:	mov	r7, r4
   151e8:	movge	r7, #64	; 0x40
   151ec:	cmp	r4, #1
   151f0:	blt	1521c <__assert_fail@plt+0x3a18>
   151f4:	mov	r0, #0
   151f8:	mov	r1, #0
   151fc:	add	r2, r6, r0
   15200:	add	r0, r0, #8
   15204:	str	sl, [r2, #4]
   15208:	add	r2, r5, r1
   1520c:	str	r2, [r6, r1, lsl #3]
   15210:	add	r1, r1, #1
   15214:	cmp	r1, r7
   15218:	blt	151fc <__assert_fail@plt+0x39f8>
   1521c:	mov	r0, r6
   15220:	mov	r1, r7
   15224:	mov	r2, #0
   15228:	bl	1154c <poll@plt>
   1522c:	cmn	r0, #1
   15230:	beq	152c4 <__assert_fail@plt+0x3ac0>
   15234:	cmp	r4, #1
   15238:	blt	152b4 <__assert_fail@plt+0x3ab0>
   1523c:	mov	r8, #0
   15240:	mov	r9, #6
   15244:	add	r0, r6, r9
   15248:	ldrh	r0, [r0]
   1524c:	cmp	r0, #32
   15250:	beq	152a4 <__assert_fail@plt+0x3aa0>
   15254:	ldr	r4, [r6, r8, lsl #3]
   15258:	mov	r1, #1
   1525c:	mov	r0, r4
   15260:	bl	19dd4 <__assert_fail@plt+0x85d0>
   15264:	tst	r0, #1
   15268:	bne	152a4 <__assert_fail@plt+0x3aa0>
   1526c:	ldr	r1, [sp, #16]
   15270:	mov	r2, #4
   15274:	ldr	r0, [sp, #12]
   15278:	add	r1, r2, r1, lsl #2
   1527c:	ldr	r2, [sp, #8]
   15280:	bl	15934 <__assert_fail@plt+0x4130>
   15284:	cmp	r0, #0
   15288:	beq	152c4 <__assert_fail@plt+0x3ac0>
   1528c:	str	r0, [sp, #12]
   15290:	ldr	r1, [sp, #16]
   15294:	str	r4, [r0, r1, lsl #2]
   15298:	ldr	r0, [sp, #16]
   1529c:	add	r0, r0, #1
   152a0:	str	r0, [sp, #16]
   152a4:	add	r8, r8, #1
   152a8:	add	r9, r9, #8
   152ac:	cmp	r8, r7
   152b0:	blt	15244 <__assert_fail@plt+0x3a40>
   152b4:	ldr	r0, [sp, #4]
   152b8:	add	r5, r7, r5
   152bc:	cmp	r5, r0
   152c0:	blt	151d8 <__assert_fail@plt+0x39d4>
   152c4:	ldr	r0, [sp, #12]
   152c8:	movw	r2, #53912	; 0xd298
   152cc:	ldr	r1, [sp, #16]
   152d0:	movt	r2, #2
   152d4:	str	r0, [r2]
   152d8:	movw	r0, #53916	; 0xd29c
   152dc:	movt	r0, #2
   152e0:	str	r1, [r0]
   152e4:	sub	sp, fp, #28
   152e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   152f0:	add	fp, sp, #24
   152f4:	sub	sp, sp, #16
   152f8:	movw	r0, #50102	; 0xc3b6
   152fc:	movt	r0, #1
   15300:	bl	15cdc <__assert_fail@plt+0x44d8>
   15304:	cmp	r0, #0
   15308:	beq	153dc <__assert_fail@plt+0x3bd8>
   1530c:	mov	r4, r0
   15310:	bl	11684 <__errno_location@plt>
   15314:	mov	r7, #0
   15318:	mov	r6, r0
   1531c:	str	r7, [r0]
   15320:	mov	r0, r4
   15324:	bl	11768 <readdir64@plt>
   15328:	cmp	r0, #0
   1532c:	beq	15398 <__assert_fail@plt+0x3b94>
   15330:	mov	r8, #0
   15334:	mvn	r5, #0
   15338:	mov	r7, #0
   1533c:	mov	r1, r0
   15340:	ldrb	r2, [r1, #19]!
   15344:	cmp	r2, #46	; 0x2e
   15348:	bne	15368 <__assert_fail@plt+0x3b64>
   1534c:	ldrb	r2, [r0, #20]
   15350:	cmp	r2, #0
   15354:	beq	15380 <__assert_fail@plt+0x3b7c>
   15358:	cmp	r2, #46	; 0x2e
   1535c:	ldrbeq	r0, [r0, #21]
   15360:	cmpeq	r0, #0
   15364:	beq	15380 <__assert_fail@plt+0x3b7c>
   15368:	mov	r0, r1
   1536c:	mov	r1, #0
   15370:	bl	157bc <__assert_fail@plt+0x3fb8>
   15374:	cmp	r0, r5
   15378:	mov	r7, #1
   1537c:	movgt	r5, r0
   15380:	mov	r0, r4
   15384:	str	r8, [r6]
   15388:	bl	11768 <readdir64@plt>
   1538c:	cmp	r0, #0
   15390:	bne	1533c <__assert_fail@plt+0x3b38>
   15394:	b	1539c <__assert_fail@plt+0x3b98>
   15398:	mvn	r5, #0
   1539c:	ldr	r6, [r6]
   153a0:	cmp	r6, #0
   153a4:	beq	15418 <__assert_fail@plt+0x3c14>
   153a8:	movw	r2, #50102	; 0xc3b6
   153ac:	mov	r0, #0
   153b0:	mov	r1, #8
   153b4:	movt	r2, #1
   153b8:	bl	180d0 <__assert_fail@plt+0x68cc>
   153bc:	movw	r2, #50235	; 0xc43b
   153c0:	mov	r3, r0
   153c4:	mov	r0, #0
   153c8:	mov	r1, r6
   153cc:	movt	r2, #1
   153d0:	bl	115b8 <error@plt>
   153d4:	mov	r0, r4
   153d8:	bl	117f8 <closedir@plt>
   153dc:	mov	r0, #4
   153e0:	bl	114f8 <sysconf@plt>
   153e4:	mov	r5, r0
   153e8:	mov	r1, sp
   153ec:	mov	r0, #7
   153f0:	bl	11510 <getrlimit64@plt>
   153f4:	cmn	r5, #1
   153f8:	movweq	r5, #20
   153fc:	cmp	r0, #0
   15400:	bne	15430 <__assert_fail@plt+0x3c2c>
   15404:	ldm	sp, {r0, r1}
   15408:	and	r1, r0, r1
   1540c:	cmn	r1, #1
   15410:	movne	r5, r0
   15414:	b	15430 <__assert_fail@plt+0x3c2c>
   15418:	mov	r0, r4
   1541c:	bl	117f8 <closedir@plt>
   15420:	cmp	r7, #0
   15424:	beq	153dc <__assert_fail@plt+0x3bd8>
   15428:	cmn	r5, #1
   1542c:	ble	153dc <__assert_fail@plt+0x3bd8>
   15430:	mov	r0, r5
   15434:	sub	sp, fp, #24
   15438:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1543c:	sub	sp, sp, #8
   15440:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15444:	add	fp, sp, #24
   15448:	sub	sp, sp, #8
   1544c:	tst	r1, #64	; 0x40
   15450:	movw	r9, #53921	; 0xd2a1
   15454:	mov	r4, r0
   15458:	str	r3, [fp, #12]
   1545c:	str	r2, [fp, #8]
   15460:	mov	r6, #0
   15464:	mov	r5, r1
   15468:	addne	r0, fp, #8
   1546c:	movt	r9, #2
   15470:	orrne	r0, r0, #4
   15474:	strne	r0, [sp, #4]
   15478:	ldrb	r0, [r9]
   1547c:	ldrne	r6, [fp, #8]
   15480:	cmp	r0, #0
   15484:	bne	154d8 <__assert_fail@plt+0x3cd4>
   15488:	movw	r0, #51757	; 0xca2d
   1548c:	mov	r1, #524288	; 0x80000
   15490:	movt	r0, #1
   15494:	bl	15d70 <__assert_fail@plt+0x456c>
   15498:	cmp	r0, #0
   1549c:	blt	154c0 <__assert_fail@plt+0x3cbc>
   154a0:	mov	r1, #1
   154a4:	mov	r7, r0
   154a8:	bl	19dd4 <__assert_fail@plt+0x85d0>
   154ac:	mov	r8, r0
   154b0:	mov	r0, r7
   154b4:	bl	117ec <close@plt>
   154b8:	and	r0, r8, #1
   154bc:	b	154c4 <__assert_fail@plt+0x3cc0>
   154c0:	mov	r0, #0
   154c4:	mov	r1, #1
   154c8:	strb	r1, [r9]
   154cc:	movw	r1, #53920	; 0xd2a0
   154d0:	movt	r1, #2
   154d4:	strb	r0, [r1]
   154d8:	orr	r1, r5, #524288	; 0x80000
   154dc:	mov	r0, r4
   154e0:	mov	r2, r6
   154e4:	bl	15d70 <__assert_fail@plt+0x456c>
   154e8:	mov	r4, r0
   154ec:	cmp	r0, #0
   154f0:	blt	15514 <__assert_fail@plt+0x3d10>
   154f4:	movw	r0, #53920	; 0xd2a0
   154f8:	movt	r0, #2
   154fc:	ldrb	r0, [r0]
   15500:	cmp	r0, #0
   15504:	bne	15514 <__assert_fail@plt+0x3d10>
   15508:	mov	r0, r4
   1550c:	mov	r1, #1
   15510:	bl	15a4c <__assert_fail@plt+0x4248>
   15514:	mov	r0, r4
   15518:	sub	sp, fp, #24
   1551c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   15520:	add	sp, sp, #8
   15524:	bx	lr
   15528:	push	{r4, sl, fp, lr}
   1552c:	add	fp, sp, #8
   15530:	movw	r4, #53912	; 0xd298
   15534:	movt	r4, #2
   15538:	ldr	r0, [r4]
   1553c:	bl	1a04c <__assert_fail@plt+0x8848>
   15540:	movw	r0, #53916	; 0xd29c
   15544:	mov	r1, #0
   15548:	movt	r0, #2
   1554c:	str	r1, [r4]
   15550:	str	r1, [r0]
   15554:	pop	{r4, sl, fp, pc}
   15558:	push	{fp, lr}
   1555c:	mov	fp, sp
   15560:	movw	r0, #49868	; 0xc2cc
   15564:	movt	r0, #1
   15568:	bl	115dc <getenv@plt>
   1556c:	cmp	r0, #0
   15570:	movwne	r0, #1
   15574:	pop	{fp, pc}
   15578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1557c:	add	fp, sp, #28
   15580:	sub	sp, sp, #524	; 0x20c
   15584:	movw	r0, #53916	; 0xd29c
   15588:	movt	r0, #2
   1558c:	ldr	sl, [r0]
   15590:	movw	r0, #53912	; 0xd298
   15594:	movt	r0, #2
   15598:	ldr	r0, [r0]
   1559c:	str	r0, [sp, #4]
   155a0:	bl	152ec <__assert_fail@plt+0x3ae8>
   155a4:	mov	r7, r0
   155a8:	cmn	r0, #-2147483647	; 0x80000001
   155ac:	addne	r7, r7, #1
   155b0:	cmp	r7, #1
   155b4:	blt	156bc <__assert_fail@plt+0x3eb8>
   155b8:	mov	r4, #0
   155bc:	add	r5, sp, #8
   155c0:	mov	r3, #5
   155c4:	mov	r8, #0
   155c8:	str	r7, [sp]
   155cc:	sub	r9, r7, r8
   155d0:	cmp	r9, #64	; 0x40
   155d4:	mov	r6, r9
   155d8:	movge	r6, #64	; 0x40
   155dc:	cmp	r9, #1
   155e0:	blt	1560c <__assert_fail@plt+0x3e08>
   155e4:	mov	r0, #0
   155e8:	mov	r1, #0
   155ec:	add	r2, r5, r0
   155f0:	add	r0, r0, #8
   155f4:	str	r3, [r2, #4]
   155f8:	add	r2, r8, r1
   155fc:	str	r2, [r5, r1, lsl #3]
   15600:	add	r1, r1, #1
   15604:	cmp	r1, r6
   15608:	blt	155ec <__assert_fail@plt+0x3de8>
   1560c:	mov	r0, r5
   15610:	mov	r1, r6
   15614:	mov	r2, #0
   15618:	bl	1154c <poll@plt>
   1561c:	mov	r3, #5
   15620:	cmn	r0, #1
   15624:	beq	156bc <__assert_fail@plt+0x3eb8>
   15628:	cmp	r9, #1
   1562c:	blt	156a0 <__assert_fail@plt+0x3e9c>
   15630:	mov	r9, #0
   15634:	add	r0, r5, r9, lsl #3
   15638:	ldrh	r0, [r0, #6]
   1563c:	cmp	r0, #32
   15640:	beq	15694 <__assert_fail@plt+0x3e90>
   15644:	ldr	r7, [r5, r9, lsl #3]
   15648:	mov	r1, #1
   1564c:	mov	r0, r7
   15650:	bl	19dd4 <__assert_fail@plt+0x85d0>
   15654:	tst	r0, #1
   15658:	bne	15688 <__assert_fail@plt+0x3e84>
   1565c:	ldr	r1, [sp, #4]
   15660:	cmp	r4, sl
   15664:	mov	r3, #5
   15668:	bcs	156b4 <__assert_fail@plt+0x3eb0>
   1566c:	ldr	r0, [r1, r4, lsl #2]
   15670:	cmp	r0, r7
   15674:	bge	15690 <__assert_fail@plt+0x3e8c>
   15678:	add	r4, r4, #1
   1567c:	cmp	r4, sl
   15680:	bcc	1566c <__assert_fail@plt+0x3e68>
   15684:	b	156b4 <__assert_fail@plt+0x3eb0>
   15688:	mov	r3, #5
   1568c:	b	15694 <__assert_fail@plt+0x3e90>
   15690:	bne	156b4 <__assert_fail@plt+0x3eb0>
   15694:	add	r9, r9, #1
   15698:	cmp	r9, r6
   1569c:	blt	15634 <__assert_fail@plt+0x3e30>
   156a0:	ldr	r7, [sp]
   156a4:	add	r8, r6, r8
   156a8:	cmp	r8, r7
   156ac:	blt	155cc <__assert_fail@plt+0x3dc8>
   156b0:	b	156bc <__assert_fail@plt+0x3eb8>
   156b4:	cmp	r7, #0
   156b8:	bge	156c4 <__assert_fail@plt+0x3ec0>
   156bc:	sub	sp, fp, #28
   156c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156c4:	movw	r1, #49896	; 0xc2e8
   156c8:	mov	r0, #0
   156cc:	mov	r2, #5
   156d0:	movt	r1, #1
   156d4:	bl	114ec <dcgettext@plt>
   156d8:	mov	r2, r0
   156dc:	mov	r0, #0
   156e0:	mov	r1, #0
   156e4:	mov	r3, r7
   156e8:	bl	115b8 <error@plt>
   156ec:	movw	r0, #50048	; 0xc380
   156f0:	movw	r1, #50057	; 0xc389
   156f4:	movw	r3, #50066	; 0xc392
   156f8:	mov	r2, #396	; 0x18c
   156fc:	movt	r0, #1
   15700:	movt	r1, #1
   15704:	movt	r3, #1
   15708:	bl	11804 <__assert_fail@plt>
   1570c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15710:	add	fp, sp, #24
   15714:	sub	sp, sp, #16
   15718:	mov	r8, r0
   1571c:	movw	r0, #53712	; 0xd1d0
   15720:	movt	r0, #2
   15724:	ldr	r0, [r0]
   15728:	bl	19fb4 <__assert_fail@plt+0x87b0>
   1572c:	movw	r0, #53724	; 0xd1dc
   15730:	movw	r1, #50144	; 0xc3e0
   15734:	mov	r2, #5
   15738:	mov	r9, #0
   1573c:	movt	r0, #2
   15740:	movt	r1, #1
   15744:	ldr	r6, [r0]
   15748:	movw	r0, #53612	; 0xd16c
   1574c:	movt	r0, #2
   15750:	ldr	r5, [r0]
   15754:	mov	r0, #0
   15758:	bl	114ec <dcgettext@plt>
   1575c:	movw	r1, #50159	; 0xc3ef
   15760:	mov	r7, r0
   15764:	mov	r0, #0
   15768:	mov	r2, #5
   1576c:	movt	r1, #1
   15770:	bl	114ec <dcgettext@plt>
   15774:	movw	r1, #50174	; 0xc3fe
   15778:	mov	r4, r0
   1577c:	mov	r0, #0
   15780:	mov	r2, #5
   15784:	movt	r1, #1
   15788:	bl	114ec <dcgettext@plt>
   1578c:	movw	r2, #50130	; 0xc3d2
   15790:	str	r0, [sp, #8]
   15794:	mov	r0, r6
   15798:	mov	r1, r8
   1579c:	mov	r3, r5
   157a0:	str	r7, [sp]
   157a4:	str	r4, [sp, #4]
   157a8:	str	r9, [sp, #12]
   157ac:	movt	r2, #1
   157b0:	bl	18da0 <__assert_fail@plt+0x759c>
   157b4:	sub	sp, fp, #24
   157b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   157bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   157c0:	add	fp, sp, #24
   157c4:	sub	sp, sp, #8
   157c8:	mov	r5, r1
   157cc:	mov	r4, r0
   157d0:	bl	11684 <__errno_location@plt>
   157d4:	mov	r6, r0
   157d8:	mov	r0, #0
   157dc:	add	r1, sp, #4
   157e0:	mov	r2, #10
   157e4:	str	r0, [r6]
   157e8:	mov	r0, r4
   157ec:	bl	11450 <strtol@plt>
   157f0:	add	r1, r0, #-2147483647	; 0x80000001
   157f4:	cmp	r1, #1
   157f8:	bls	15858 <__assert_fail@plt+0x4054>
   157fc:	ldr	r7, [sp, #4]
   15800:	ldrb	r1, [r7]
   15804:	cmp	r1, #0
   15808:	bne	15870 <__assert_fail@plt+0x406c>
   1580c:	cmp	r7, r4
   15810:	subne	sp, fp, #24
   15814:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   15818:	ldr	r6, [r6]
   1581c:	movw	r1, #50214	; 0xc426
   15820:	mov	r0, #0
   15824:	mov	r2, #5
   15828:	movt	r1, #1
   1582c:	bl	114ec <dcgettext@plt>
   15830:	mov	r7, r0
   15834:	mov	r0, #0
   15838:	mov	r1, r5
   1583c:	mov	r2, r4
   15840:	bl	180d0 <__assert_fail@plt+0x68cc>
   15844:	mov	r3, r0
   15848:	mov	r0, #1
   1584c:	mov	r1, r6
   15850:	mov	r2, r7
   15854:	bl	115b8 <error@plt>
   15858:	ldr	r1, [r6]
   1585c:	movw	r2, #50235	; 0xc43b
   15860:	mov	r0, #1
   15864:	mov	r3, r4
   15868:	movt	r2, #1
   1586c:	bl	115b8 <error@plt>
   15870:	ldr	r8, [r6]
   15874:	movw	r1, #50187	; 0xc40b
   15878:	mov	r0, #0
   1587c:	mov	r2, #5
   15880:	movt	r1, #1
   15884:	bl	114ec <dcgettext@plt>
   15888:	mov	r6, r0
   1588c:	mov	r0, #0
   15890:	mov	r1, r5
   15894:	mov	r2, r7
   15898:	bl	180d0 <__assert_fail@plt+0x68cc>
   1589c:	mov	r7, r0
   158a0:	mov	r0, #1
   158a4:	mov	r1, r5
   158a8:	mov	r2, r4
   158ac:	bl	180d0 <__assert_fail@plt+0x68cc>
   158b0:	str	r0, [sp]
   158b4:	mov	r0, #1
   158b8:	mov	r1, r8
   158bc:	mov	r2, r6
   158c0:	mov	r3, r7
   158c4:	bl	115b8 <error@plt>
   158c8:	push	{r4, r5, fp, lr}
   158cc:	add	fp, sp, #8
   158d0:	sub	sp, sp, #16
   158d4:	mov	r4, r1
   158d8:	movw	r1, #50238	; 0xc43e
   158dc:	mov	r5, r0
   158e0:	mov	r0, #0
   158e4:	mov	r2, #5
   158e8:	movt	r1, #1
   158ec:	bl	114ec <dcgettext@plt>
   158f0:	movw	r2, #50483	; 0xc533
   158f4:	movw	r3, #50130	; 0xc3d2
   158f8:	mov	r1, r0
   158fc:	movw	r0, #50530	; 0xc562
   15900:	movt	r2, #1
   15904:	movt	r0, #1
   15908:	movt	r3, #1
   1590c:	str	r2, [sp, #4]
   15910:	movw	r2, #50444	; 0xc50c
   15914:	str	r3, [sp]
   15918:	str	r0, [sp, #8]
   1591c:	mov	r0, r5
   15920:	mov	r3, r4
   15924:	movt	r2, #1
   15928:	bl	11678 <fprintf@plt>
   1592c:	sub	sp, fp, #8
   15930:	pop	{r4, r5, fp, pc}
   15934:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15938:	add	fp, sp, #24
   1593c:	mov	r6, r2
   15940:	mov	r7, r1
   15944:	mov	r4, r0
   15948:	bl	11684 <__errno_location@plt>
   1594c:	cmp	r7, #0
   15950:	beq	159e8 <__assert_fail@plt+0x41e4>
   15954:	mov	r5, r0
   15958:	ldr	r8, [r0]
   1595c:	ldr	r0, [r6]
   15960:	cmp	r0, #0
   15964:	mov	r1, r0
   15968:	movweq	r1, #16
   1596c:	cmp	r1, r7
   15970:	bcs	15988 <__assert_fail@plt+0x4184>
   15974:	lsl	r2, r1, #1
   15978:	cmp	r1, r1, lsl #1
   1597c:	mov	r1, r2
   15980:	bls	1596c <__assert_fail@plt+0x4168>
   15984:	mov	r1, r7
   15988:	cmp	r0, #0
   1598c:	beq	159bc <__assert_fail@plt+0x41b8>
   15990:	cmp	r1, r0
   15994:	beq	159d4 <__assert_fail@plt+0x41d0>
   15998:	mov	r0, r4
   1599c:	str	r1, [r6]
   159a0:	bl	1a1a8 <__assert_fail@plt+0x89a4>
   159a4:	mov	r4, r0
   159a8:	cmp	r0, #0
   159ac:	bne	159dc <__assert_fail@plt+0x41d8>
   159b0:	mov	r4, #0
   159b4:	mov	r0, r4
   159b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   159bc:	cmp	r4, #0
   159c0:	bne	15a08 <__assert_fail@plt+0x4204>
   159c4:	mov	r0, r1
   159c8:	str	r1, [r6]
   159cc:	bl	1a118 <__assert_fail@plt+0x8914>
   159d0:	mov	r4, r0
   159d4:	cmp	r4, #0
   159d8:	beq	159b0 <__assert_fail@plt+0x41ac>
   159dc:	mov	r0, r4
   159e0:	str	r8, [r5]
   159e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   159e8:	movw	r0, #50552	; 0xc578
   159ec:	movw	r1, #50564	; 0xc584
   159f0:	movw	r3, #50576	; 0xc590
   159f4:	mov	r2, #71	; 0x47
   159f8:	movt	r0, #1
   159fc:	movt	r1, #1
   15a00:	movt	r3, #1
   15a04:	bl	11804 <__assert_fail@plt>
   15a08:	movw	r0, #50618	; 0xc5ba
   15a0c:	movw	r1, #50564	; 0xc584
   15a10:	movw	r3, #50576	; 0xc590
   15a14:	mov	r2, #79	; 0x4f
   15a18:	movt	r0, #1
   15a1c:	movt	r1, #1
   15a20:	movt	r3, #1
   15a24:	bl	11804 <__assert_fail@plt>
   15a28:	push	{r4, sl, fp, lr}
   15a2c:	add	fp, sp, #8
   15a30:	mov	r4, r0
   15a34:	bl	15934 <__assert_fail@plt+0x4130>
   15a38:	cmp	r0, #0
   15a3c:	popne	{r4, sl, fp, pc}
   15a40:	mov	r0, r4
   15a44:	bl	1a04c <__assert_fail@plt+0x8848>
   15a48:	bl	19518 <__assert_fail@plt+0x7d14>
   15a4c:	push	{r4, r5, r6, sl, fp, lr}
   15a50:	add	fp, sp, #16
   15a54:	mov	r6, r1
   15a58:	mov	r1, #1
   15a5c:	mov	r2, #0
   15a60:	mov	r4, r0
   15a64:	mov	r5, #0
   15a68:	bl	19dd4 <__assert_fail@plt+0x85d0>
   15a6c:	cmp	r0, #0
   15a70:	blt	15aa0 <__assert_fail@plt+0x429c>
   15a74:	bic	r2, r0, #1
   15a78:	cmp	r6, #0
   15a7c:	orrne	r2, r0, #1
   15a80:	cmp	r0, r2
   15a84:	beq	15aa4 <__assert_fail@plt+0x42a0>
   15a88:	mov	r0, r4
   15a8c:	mov	r1, #2
   15a90:	bl	19dd4 <__assert_fail@plt+0x85d0>
   15a94:	cmn	r0, #1
   15a98:	movwne	r0, #0
   15a9c:	pop	{r4, r5, r6, sl, fp, pc}
   15aa0:	mvn	r5, #0
   15aa4:	mov	r0, r5
   15aa8:	pop	{r4, r5, r6, sl, fp, pc}
   15aac:	movw	r1, #1030	; 0x406
   15ab0:	mov	r2, #0
   15ab4:	b	19dd4 <__assert_fail@plt+0x85d0>
   15ab8:	movw	r1, #53924	; 0xd2a4
   15abc:	movt	r1, #2
   15ac0:	str	r0, [r1]
   15ac4:	bx	lr
   15ac8:	push	{r4, r5, r6, sl, fp, lr}
   15acc:	add	fp, sp, #16
   15ad0:	sub	sp, sp, #8
   15ad4:	movw	r6, #53720	; 0xd1d8
   15ad8:	movt	r6, #2
   15adc:	ldr	r5, [r6]
   15ae0:	mov	r0, r5
   15ae4:	bl	1a010 <__assert_fail@plt+0x880c>
   15ae8:	cmp	r0, #0
   15aec:	beq	15b2c <__assert_fail@plt+0x4328>
   15af0:	mov	r0, #1
   15af4:	mov	r2, #0
   15af8:	mov	r3, #0
   15afc:	mov	r4, #0
   15b00:	str	r0, [sp]
   15b04:	mov	r0, r5
   15b08:	bl	1a074 <__assert_fail@plt+0x8870>
   15b0c:	cmp	r0, #0
   15b10:	bne	15b30 <__assert_fail@plt+0x432c>
   15b14:	ldr	r0, [r6]
   15b18:	bl	19fb4 <__assert_fail@plt+0x87b0>
   15b1c:	mov	r4, r0
   15b20:	cmp	r0, #0
   15b24:	movwne	r4, #1
   15b28:	b	15b30 <__assert_fail@plt+0x432c>
   15b2c:	mov	r4, #0
   15b30:	ldr	r0, [r6]
   15b34:	bl	1a238 <__assert_fail@plt+0x8a34>
   15b38:	cmp	r4, #0
   15b3c:	cmpeq	r0, #0
   15b40:	bne	15b50 <__assert_fail@plt+0x434c>
   15b44:	sub	sp, fp, #16
   15b48:	pop	{r4, r5, r6, sl, fp, lr}
   15b4c:	b	15bf4 <__assert_fail@plt+0x43f0>
   15b50:	movw	r1, #50635	; 0xc5cb
   15b54:	mov	r0, #0
   15b58:	mov	r2, #5
   15b5c:	movt	r1, #1
   15b60:	bl	114ec <dcgettext@plt>
   15b64:	mov	r4, r0
   15b68:	movw	r0, #53924	; 0xd2a4
   15b6c:	movt	r0, #2
   15b70:	ldr	r6, [r0]
   15b74:	bl	11684 <__errno_location@plt>
   15b78:	ldr	r5, [r0]
   15b7c:	cmp	r6, #0
   15b80:	bne	15b9c <__assert_fail@plt+0x4398>
   15b84:	movw	r2, #50235	; 0xc43b
   15b88:	mov	r0, #0
   15b8c:	mov	r1, r5
   15b90:	mov	r3, r4
   15b94:	movt	r2, #1
   15b98:	b	15bbc <__assert_fail@plt+0x43b8>
   15b9c:	mov	r0, r6
   15ba0:	bl	18318 <__assert_fail@plt+0x6b14>
   15ba4:	movw	r2, #50654	; 0xc5de
   15ba8:	mov	r3, r0
   15bac:	str	r4, [sp]
   15bb0:	mov	r0, #0
   15bb4:	mov	r1, r5
   15bb8:	movt	r2, #1
   15bbc:	bl	115b8 <error@plt>
   15bc0:	bl	15bf4 <__assert_fail@plt+0x43f0>
   15bc4:	movw	r0, #53616	; 0xd170
   15bc8:	movt	r0, #2
   15bcc:	ldr	r0, [r0]
   15bd0:	bl	114a4 <_exit@plt>
   15bd4:	movw	r1, #53928	; 0xd2a8
   15bd8:	movt	r1, #2
   15bdc:	str	r0, [r1]
   15be0:	bx	lr
   15be4:	movw	r1, #53932	; 0xd2ac
   15be8:	movt	r1, #2
   15bec:	strb	r0, [r1]
   15bf0:	bx	lr
   15bf4:	push	{r4, r5, r6, sl, fp, lr}
   15bf8:	add	fp, sp, #16
   15bfc:	sub	sp, sp, #8
   15c00:	movw	r0, #53724	; 0xd1dc
   15c04:	movt	r0, #2
   15c08:	ldr	r0, [r0]
   15c0c:	bl	1a238 <__assert_fail@plt+0x8a34>
   15c10:	cmp	r0, #0
   15c14:	beq	15c3c <__assert_fail@plt+0x4438>
   15c18:	movw	r0, #53932	; 0xd2ac
   15c1c:	movt	r0, #2
   15c20:	ldrb	r0, [r0]
   15c24:	cmp	r0, #0
   15c28:	beq	15c5c <__assert_fail@plt+0x4458>
   15c2c:	bl	11684 <__errno_location@plt>
   15c30:	ldr	r0, [r0]
   15c34:	cmp	r0, #32
   15c38:	bne	15c5c <__assert_fail@plt+0x4458>
   15c3c:	movw	r0, #53712	; 0xd1d0
   15c40:	movt	r0, #2
   15c44:	ldr	r0, [r0]
   15c48:	bl	1a238 <__assert_fail@plt+0x8a34>
   15c4c:	cmp	r0, #0
   15c50:	subeq	sp, fp, #16
   15c54:	popeq	{r4, r5, r6, sl, fp, pc}
   15c58:	b	15ccc <__assert_fail@plt+0x44c8>
   15c5c:	movw	r1, #50661	; 0xc5e5
   15c60:	mov	r0, #0
   15c64:	mov	r2, #5
   15c68:	movt	r1, #1
   15c6c:	bl	114ec <dcgettext@plt>
   15c70:	mov	r4, r0
   15c74:	movw	r0, #53928	; 0xd2a8
   15c78:	movt	r0, #2
   15c7c:	ldr	r6, [r0]
   15c80:	bl	11684 <__errno_location@plt>
   15c84:	ldr	r5, [r0]
   15c88:	cmp	r6, #0
   15c8c:	bne	15ca8 <__assert_fail@plt+0x44a4>
   15c90:	movw	r2, #50235	; 0xc43b
   15c94:	mov	r0, #0
   15c98:	mov	r1, r5
   15c9c:	mov	r3, r4
   15ca0:	movt	r2, #1
   15ca4:	b	15cc8 <__assert_fail@plt+0x44c4>
   15ca8:	mov	r0, r6
   15cac:	bl	18318 <__assert_fail@plt+0x6b14>
   15cb0:	movw	r2, #50654	; 0xc5de
   15cb4:	mov	r3, r0
   15cb8:	str	r4, [sp]
   15cbc:	mov	r0, #0
   15cc0:	mov	r1, r5
   15cc4:	movt	r2, #1
   15cc8:	bl	115b8 <error@plt>
   15ccc:	movw	r0, #53616	; 0xd170
   15cd0:	movt	r0, #2
   15cd4:	ldr	r0, [r0]
   15cd8:	bl	114a4 <_exit@plt>
   15cdc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ce0:	add	fp, sp, #24
   15ce4:	bl	115c4 <opendir@plt>
   15ce8:	cmp	r0, #0
   15cec:	moveq	r5, #0
   15cf0:	moveq	r0, r5
   15cf4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15cf8:	mov	r4, r0
   15cfc:	bl	1178c <dirfd@plt>
   15d00:	cmp	r0, #2
   15d04:	movhi	r0, r4
   15d08:	pophi	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d0c:	movw	r1, #1030	; 0x406
   15d10:	mov	r2, #3
   15d14:	bl	19dd4 <__assert_fail@plt+0x85d0>
   15d18:	cmn	r0, #1
   15d1c:	ble	15d4c <__assert_fail@plt+0x4548>
   15d20:	mov	r7, r0
   15d24:	bl	11774 <fdopendir@plt>
   15d28:	mov	r5, r0
   15d2c:	bl	11684 <__errno_location@plt>
   15d30:	ldr	r8, [r0]
   15d34:	mov	r6, r0
   15d38:	cmp	r5, #0
   15d3c:	bne	15d5c <__assert_fail@plt+0x4558>
   15d40:	mov	r0, r7
   15d44:	bl	117ec <close@plt>
   15d48:	b	15d58 <__assert_fail@plt+0x4554>
   15d4c:	bl	11684 <__errno_location@plt>
   15d50:	ldr	r8, [r0]
   15d54:	mov	r6, r0
   15d58:	mov	r5, #0
   15d5c:	mov	r0, r4
   15d60:	bl	117f8 <closedir@plt>
   15d64:	mov	r0, r5
   15d68:	str	r8, [r6]
   15d6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d70:	sub	sp, sp, #8
   15d74:	push	{fp, lr}
   15d78:	mov	fp, sp
   15d7c:	sub	sp, sp, #8
   15d80:	str	r2, [fp, #8]
   15d84:	mov	r2, #0
   15d88:	tst	r1, #64	; 0x40
   15d8c:	str	r3, [fp, #12]
   15d90:	addne	r2, fp, #8
   15d94:	orrne	r2, r2, #4
   15d98:	strne	r2, [sp, #4]
   15d9c:	ldrne	r2, [fp, #8]
   15da0:	bl	115d0 <open64@plt>
   15da4:	bl	1886c <__assert_fail@plt+0x7068>
   15da8:	mov	sp, fp
   15dac:	pop	{fp, lr}
   15db0:	add	sp, sp, #8
   15db4:	bx	lr
   15db8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dbc:	add	fp, sp, #28
   15dc0:	sub	sp, sp, #308	; 0x134
   15dc4:	mov	r5, r1
   15dc8:	mov	r6, r0
   15dcc:	bl	11588 <__ctype_get_mb_cur_max@plt>
   15dd0:	cmp	r0, #2
   15dd4:	bcc	1617c <__assert_fail@plt+0x4978>
   15dd8:	mov	r4, #0
   15ddc:	sub	r0, fp, #88	; 0x58
   15de0:	str	r4, [fp, #-80]	; 0xffffffb0
   15de4:	str	r4, [fp, #-84]	; 0xffffffac
   15de8:	strb	r4, [fp, #-88]	; 0xffffffa8
   15dec:	str	r5, [fp, #-72]	; 0xffffffb8
   15df0:	strb	r4, [fp, #-76]	; 0xffffffb4
   15df4:	bl	16830 <__assert_fail@plt+0x502c>
   15df8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15dfc:	cmp	r0, #0
   15e00:	beq	15e10 <__assert_fail@plt+0x460c>
   15e04:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15e08:	cmp	r0, #0
   15e0c:	beq	1629c <__assert_fail@plt+0x4a98>
   15e10:	add	r0, sp, #136	; 0x88
   15e14:	str	r4, [fp, #-136]	; 0xffffff78
   15e18:	str	r4, [fp, #-140]	; 0xffffff74
   15e1c:	strb	r4, [fp, #-144]	; 0xffffff70
   15e20:	str	r5, [fp, #-128]	; 0xffffff80
   15e24:	str	r4, [sp, #144]	; 0x90
   15e28:	str	r4, [sp, #140]	; 0x8c
   15e2c:	str	r6, [sp, #152]	; 0x98
   15e30:	strb	r4, [sp, #136]	; 0x88
   15e34:	str	r5, [sp, #16]
   15e38:	strb	r4, [fp, #-132]	; 0xffffff7c
   15e3c:	strb	r4, [sp, #148]	; 0x94
   15e40:	bl	16830 <__assert_fail@plt+0x502c>
   15e44:	ldrb	r0, [sp, #160]	; 0xa0
   15e48:	cmp	r0, #0
   15e4c:	beq	15e5c <__assert_fail@plt+0x4658>
   15e50:	ldr	r0, [sp, #164]	; 0xa4
   15e54:	cmp	r0, #0
   15e58:	beq	162a8 <__assert_fail@plt+0x4aa4>
   15e5c:	add	r0, sp, #24
   15e60:	mov	r8, #1
   15e64:	mov	sl, #0
   15e68:	sub	r5, fp, #144	; 0x90
   15e6c:	mov	r1, #0
   15e70:	mov	r7, #0
   15e74:	mov	r9, #0
   15e78:	add	r0, r0, #4
   15e7c:	str	r0, [sp, #12]
   15e80:	add	r0, sp, #136	; 0x88
   15e84:	add	r0, r0, #16
   15e88:	str	r0, [sp, #8]
   15e8c:	add	r0, r9, r9, lsl #2
   15e90:	mov	r4, r7
   15e94:	cmp	r7, r0
   15e98:	bcc	15f40 <__assert_fail@plt+0x473c>
   15e9c:	tst	r8, #1
   15ea0:	beq	15f40 <__assert_fail@plt+0x473c>
   15ea4:	cmp	r9, #10
   15ea8:	bcc	15f40 <__assert_fail@plt+0x473c>
   15eac:	subs	r0, r4, r1
   15eb0:	beq	15ef4 <__assert_fail@plt+0x46f0>
   15eb4:	sub	r7, r1, r4
   15eb8:	mov	r0, r5
   15ebc:	bl	16830 <__assert_fail@plt+0x502c>
   15ec0:	ldrb	r0, [fp, #-120]	; 0xffffff88
   15ec4:	cmp	r0, #0
   15ec8:	beq	15ed8 <__assert_fail@plt+0x46d4>
   15ecc:	ldr	r0, [fp, #-116]	; 0xffffff8c
   15ed0:	cmp	r0, #0
   15ed4:	beq	15ef4 <__assert_fail@plt+0x46f0>
   15ed8:	strb	sl, [fp, #-132]	; 0xffffff7c
   15edc:	adds	r7, r7, #1
   15ee0:	ldr	r0, [fp, #-128]	; 0xffffff80
   15ee4:	ldr	r1, [fp, #-124]	; 0xffffff84
   15ee8:	add	r0, r0, r1
   15eec:	str	r0, [fp, #-128]	; 0xffffff80
   15ef0:	bne	15eb8 <__assert_fail@plt+0x46b4>
   15ef4:	mov	r0, r5
   15ef8:	bl	16830 <__assert_fail@plt+0x502c>
   15efc:	ldrb	r0, [fp, #-120]	; 0xffffff88
   15f00:	cmp	r0, #0
   15f04:	beq	15f3c <__assert_fail@plt+0x4738>
   15f08:	ldr	r0, [fp, #-116]	; 0xffffff8c
   15f0c:	mov	r1, r4
   15f10:	cmp	r0, #0
   15f14:	bne	15f40 <__assert_fail@plt+0x473c>
   15f18:	ldr	r1, [sp, #16]
   15f1c:	mov	r0, r6
   15f20:	add	r2, sp, #80	; 0x50
   15f24:	bl	162d0 <__assert_fail@plt+0x4acc>
   15f28:	mov	r8, #0
   15f2c:	cmp	r0, #0
   15f30:	mov	r1, r4
   15f34:	beq	15f40 <__assert_fail@plt+0x473c>
   15f38:	b	162c4 <__assert_fail@plt+0x4ac0>
   15f3c:	mov	r1, r4
   15f40:	ldrb	r0, [sp, #160]	; 0xa0
   15f44:	add	r7, r4, #1
   15f48:	str	r1, [sp, #20]
   15f4c:	cmp	r0, #0
   15f50:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   15f54:	cmpne	r0, #0
   15f58:	bne	15f84 <__assert_fail@plt+0x4780>
   15f5c:	ldr	r2, [sp, #156]	; 0x9c
   15f60:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15f64:	cmp	r2, r0
   15f68:	bne	16138 <__assert_fail@plt+0x4934>
   15f6c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15f70:	ldr	r0, [sp, #152]	; 0x98
   15f74:	bl	114e0 <memcmp@plt>
   15f78:	cmp	r0, #0
   15f7c:	bne	16138 <__assert_fail@plt+0x4934>
   15f80:	b	15f94 <__assert_fail@plt+0x4790>
   15f84:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15f88:	ldr	r1, [sp, #164]	; 0xa4
   15f8c:	cmp	r1, r0
   15f90:	bne	16138 <__assert_fail@plt+0x4934>
   15f94:	add	r2, sp, #136	; 0x88
   15f98:	mov	r1, #48	; 0x30
   15f9c:	add	r3, sp, #80	; 0x50
   15fa0:	str	r9, [sp]
   15fa4:	str	r8, [sp, #4]
   15fa8:	mov	r0, r2
   15fac:	add	r2, r2, #32
   15fb0:	vld1.64	{d16-d17}, [r0], r1
   15fb4:	ldr	r1, [sp, #8]
   15fb8:	vld1.64	{d20-d21}, [r2]
   15fbc:	vld1.64	{d18-d19}, [r1]
   15fc0:	add	r1, r3, #16
   15fc4:	vldr	d22, [r0]
   15fc8:	add	r0, r3, #32
   15fcc:	vst1.64	{d20-d21}, [r0]
   15fd0:	mov	r0, r3
   15fd4:	vst1.64	{d18-d19}, [r1]
   15fd8:	mov	r1, #12
   15fdc:	vst1.64	{d16-d17}, [r0], r1
   15fe0:	strb	sl, [r0]
   15fe4:	ldr	r0, [sp, #16]
   15fe8:	vstr	d22, [sp, #128]	; 0x80
   15fec:	ldr	r1, [sp, #100]	; 0x64
   15ff0:	str	r0, [sp, #40]	; 0x28
   15ff4:	ldr	r0, [sp, #96]	; 0x60
   15ff8:	strb	sl, [sp, #24]
   15ffc:	add	r0, r0, r1
   16000:	str	r0, [sp, #96]	; 0x60
   16004:	ldr	r0, [sp, #12]
   16008:	str	sl, [r0]
   1600c:	str	sl, [r0, #4]
   16010:	add	r0, sp, #24
   16014:	strb	sl, [sp, #36]	; 0x24
   16018:	bl	16830 <__assert_fail@plt+0x502c>
   1601c:	ldrb	r0, [sp, #48]	; 0x30
   16020:	cmp	r0, #0
   16024:	beq	16034 <__assert_fail@plt+0x4830>
   16028:	ldr	r0, [sp, #52]	; 0x34
   1602c:	cmp	r0, #0
   16030:	beq	162cc <__assert_fail@plt+0x4ac8>
   16034:	strb	sl, [sp, #36]	; 0x24
   16038:	ldr	r0, [sp, #40]	; 0x28
   1603c:	ldr	r1, [sp, #44]	; 0x2c
   16040:	add	r0, r0, r1
   16044:	str	r0, [sp, #40]	; 0x28
   16048:	add	r0, sp, #24
   1604c:	bl	16830 <__assert_fail@plt+0x502c>
   16050:	ldrb	r0, [sp, #48]	; 0x30
   16054:	cmp	r0, #0
   16058:	beq	16068 <__assert_fail@plt+0x4864>
   1605c:	ldr	r0, [sp, #52]	; 0x34
   16060:	cmp	r0, #0
   16064:	beq	162b4 <__assert_fail@plt+0x4ab0>
   16068:	add	r7, r4, #2
   1606c:	add	r0, sp, #80	; 0x50
   16070:	bl	16830 <__assert_fail@plt+0x502c>
   16074:	ldr	r0, [sp, #108]	; 0x6c
   16078:	ldrb	r1, [sp, #104]	; 0x68
   1607c:	cmp	r0, #0
   16080:	bne	1608c <__assert_fail@plt+0x4888>
   16084:	cmp	r1, #0
   16088:	bne	162a4 <__assert_fail@plt+0x4aa0>
   1608c:	cmp	r1, #0
   16090:	ldrbne	r1, [sp, #48]	; 0x30
   16094:	cmpne	r1, #0
   16098:	bne	160d4 <__assert_fail@plt+0x48d0>
   1609c:	ldr	r4, [sp, #100]	; 0x64
   160a0:	ldr	r0, [sp, #44]	; 0x2c
   160a4:	cmp	r4, r0
   160a8:	bne	16130 <__assert_fail@plt+0x492c>
   160ac:	ldr	r8, [sp, #40]	; 0x28
   160b0:	ldr	r9, [sp, #96]	; 0x60
   160b4:	mov	r2, r4
   160b8:	mov	r0, r9
   160bc:	mov	r1, r8
   160c0:	bl	114e0 <memcmp@plt>
   160c4:	cmp	r0, #0
   160c8:	mov	r0, r4
   160cc:	beq	160f0 <__assert_fail@plt+0x48ec>
   160d0:	b	16130 <__assert_fail@plt+0x492c>
   160d4:	ldr	r1, [sp, #52]	; 0x34
   160d8:	cmp	r0, r1
   160dc:	bne	16130 <__assert_fail@plt+0x492c>
   160e0:	ldr	r8, [sp, #40]	; 0x28
   160e4:	ldr	r4, [sp, #44]	; 0x2c
   160e8:	ldr	r9, [sp, #96]	; 0x60
   160ec:	ldr	r0, [sp, #100]	; 0x64
   160f0:	add	r0, r9, r0
   160f4:	strb	sl, [sp, #92]	; 0x5c
   160f8:	strb	sl, [sp, #36]	; 0x24
   160fc:	str	r0, [sp, #96]	; 0x60
   16100:	add	r0, r8, r4
   16104:	str	r0, [sp, #40]	; 0x28
   16108:	add	r0, sp, #24
   1610c:	bl	16830 <__assert_fail@plt+0x502c>
   16110:	ldrb	r0, [sp, #48]	; 0x30
   16114:	add	r7, r7, #1
   16118:	cmp	r0, #0
   1611c:	beq	1606c <__assert_fail@plt+0x4868>
   16120:	ldr	r0, [sp, #52]	; 0x34
   16124:	cmp	r0, #0
   16128:	bne	1606c <__assert_fail@plt+0x4868>
   1612c:	b	162b4 <__assert_fail@plt+0x4ab0>
   16130:	ldr	r8, [sp, #4]
   16134:	ldr	r9, [sp]
   16138:	mov	r4, #0
   1613c:	add	r9, r9, #1
   16140:	strb	r4, [sp, #148]	; 0x94
   16144:	ldr	r0, [sp, #152]	; 0x98
   16148:	ldr	r1, [sp, #156]	; 0x9c
   1614c:	add	r0, r0, r1
   16150:	str	r0, [sp, #152]	; 0x98
   16154:	add	r0, sp, #136	; 0x88
   16158:	bl	16830 <__assert_fail@plt+0x502c>
   1615c:	ldrb	r0, [sp, #160]	; 0xa0
   16160:	ldr	r1, [sp, #20]
   16164:	cmp	r0, #0
   16168:	beq	15e8c <__assert_fail@plt+0x4688>
   1616c:	ldr	r0, [sp, #164]	; 0xa4
   16170:	cmp	r0, #0
   16174:	bne	15e8c <__assert_fail@plt+0x4688>
   16178:	b	162a8 <__assert_fail@plt+0x4aa4>
   1617c:	ldrb	r7, [r5]
   16180:	cmp	r7, #0
   16184:	beq	1629c <__assert_fail@plt+0x4a98>
   16188:	ldrb	r9, [r6]
   1618c:	cmp	r9, #0
   16190:	beq	162a4 <__assert_fail@plt+0x4aa0>
   16194:	mov	r3, #1
   16198:	mov	ip, #0
   1619c:	mov	lr, r5
   161a0:	mov	r8, #0
   161a4:	mov	sl, #0
   161a8:	str	r7, [sp, #16]
   161ac:	add	r0, sl, sl, lsl #2
   161b0:	cmp	r8, r0
   161b4:	bcc	16244 <__assert_fail@plt+0x4a40>
   161b8:	tst	r3, #1
   161bc:	beq	16244 <__assert_fail@plt+0x4a40>
   161c0:	cmp	sl, #10
   161c4:	bcc	16244 <__assert_fail@plt+0x4a40>
   161c8:	cmp	lr, #0
   161cc:	str	r3, [sp, #20]
   161d0:	beq	16204 <__assert_fail@plt+0x4a00>
   161d4:	sub	r1, r8, ip
   161d8:	mov	r0, lr
   161dc:	mov	r7, lr
   161e0:	bl	116f0 <strnlen@plt>
   161e4:	mov	lr, r7
   161e8:	mov	ip, r8
   161ec:	ldrb	r0, [lr, r0]!
   161f0:	cmp	r0, #0
   161f4:	beq	16204 <__assert_fail@plt+0x4a00>
   161f8:	ldr	r3, [sp, #20]
   161fc:	mov	ip, r8
   16200:	b	16240 <__assert_fail@plt+0x4a3c>
   16204:	mov	r0, r5
   16208:	mov	r4, ip
   1620c:	bl	11654 <strlen@plt>
   16210:	mov	r2, r0
   16214:	mov	r0, r6
   16218:	mov	r1, r5
   1621c:	sub	r3, fp, #88	; 0x58
   16220:	bl	166d8 <__assert_fail@plt+0x4ed4>
   16224:	cmp	r0, #0
   16228:	bne	162bc <__assert_fail@plt+0x4ab8>
   1622c:	ldr	r3, [sp, #20]
   16230:	ldrb	r9, [r6]
   16234:	mov	lr, #0
   16238:	mov	ip, r4
   1623c:	and	r3, r3, r0
   16240:	ldr	r7, [sp, #16]
   16244:	uxtb	r0, r9
   16248:	cmp	r0, r7
   1624c:	bne	16280 <__assert_fail@plt+0x4a7c>
   16250:	mov	r0, #1
   16254:	ldrb	r1, [r5, r0]
   16258:	cmp	r1, #0
   1625c:	beq	1629c <__assert_fail@plt+0x4a98>
   16260:	ldrb	r2, [r6, r0]
   16264:	cmp	r2, #0
   16268:	beq	162a4 <__assert_fail@plt+0x4aa0>
   1626c:	add	r0, r0, #1
   16270:	cmp	r2, r1
   16274:	beq	16254 <__assert_fail@plt+0x4a50>
   16278:	add	r8, r8, r0
   1627c:	b	16284 <__assert_fail@plt+0x4a80>
   16280:	add	r8, r8, #1
   16284:	ldrb	r9, [r6, #1]!
   16288:	add	sl, sl, #1
   1628c:	mov	r4, #0
   16290:	cmp	r9, #0
   16294:	bne	161ac <__assert_fail@plt+0x49a8>
   16298:	b	162a8 <__assert_fail@plt+0x4aa4>
   1629c:	mov	r4, r6
   162a0:	b	162a8 <__assert_fail@plt+0x4aa4>
   162a4:	mov	r4, #0
   162a8:	mov	r0, r4
   162ac:	sub	sp, fp, #28
   162b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162b4:	ldr	r4, [sp, #152]	; 0x98
   162b8:	b	162a8 <__assert_fail@plt+0x4aa4>
   162bc:	ldr	r4, [fp, #-88]	; 0xffffffa8
   162c0:	b	162a8 <__assert_fail@plt+0x4aa4>
   162c4:	ldr	r4, [sp, #80]	; 0x50
   162c8:	b	162a8 <__assert_fail@plt+0x4aa4>
   162cc:	bl	117d4 <abort@plt>
   162d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162d4:	add	fp, sp, #28
   162d8:	sub	sp, sp, #132	; 0x84
   162dc:	mov	r4, r0
   162e0:	mov	r0, r1
   162e4:	mov	r8, r2
   162e8:	mov	r7, r1
   162ec:	bl	1a4a4 <__assert_fail@plt+0x8ca0>
   162f0:	mov	sl, r0
   162f4:	movw	r0, #47662	; 0xba2e
   162f8:	mov	r5, #0
   162fc:	movt	r0, #744	; 0x2e8
   16300:	cmp	sl, r0
   16304:	bhi	166c8 <__assert_fail@plt+0x4ec4>
   16308:	mov	r0, #44	; 0x2c
   1630c:	mul	r0, sl, r0
   16310:	cmp	r0, #4016	; 0xfb0
   16314:	bhi	1633c <__assert_fail@plt+0x4b38>
   16318:	add	r0, r0, #22
   1631c:	bic	r0, r0, #7
   16320:	sub	r0, sp, r0
   16324:	add	r1, r0, #15
   16328:	bic	r9, r1, #15
   1632c:	mov	sp, r0
   16330:	cmp	r9, #0
   16334:	bne	1634c <__assert_fail@plt+0x4b48>
   16338:	b	166c8 <__assert_fail@plt+0x4ec4>
   1633c:	bl	1a35c <__assert_fail@plt+0x8b58>
   16340:	mov	r9, r0
   16344:	cmp	r9, #0
   16348:	beq	166c8 <__assert_fail@plt+0x4ec4>
   1634c:	sub	r6, fp, #88	; 0x58
   16350:	str	r4, [fp, #-160]	; 0xffffff60
   16354:	mov	r4, #0
   16358:	mov	r0, r6
   1635c:	str	r4, [fp, #-80]	; 0xffffffb0
   16360:	str	r4, [fp, #-84]	; 0xffffffac
   16364:	strb	r4, [fp, #-88]	; 0xffffffa8
   16368:	str	r7, [fp, #-72]	; 0xffffffb8
   1636c:	strb	r4, [fp, #-76]	; 0xffffffb4
   16370:	bl	16830 <__assert_fail@plt+0x502c>
   16374:	add	r0, sl, sl, lsl #2
   16378:	add	r3, r9, r0, lsl #3
   1637c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16380:	str	r3, [fp, #-148]	; 0xffffff6c
   16384:	cmp	r0, #0
   16388:	beq	16398 <__assert_fail@plt+0x4b94>
   1638c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16390:	cmp	r0, #0
   16394:	beq	1641c <__assert_fail@plt+0x4c18>
   16398:	add	r7, r9, #16
   1639c:	add	r5, r6, #32
   163a0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   163a4:	cmp	r0, r5
   163a8:	bne	163c0 <__assert_fail@plt+0x4bbc>
   163ac:	ldr	r2, [fp, #-68]	; 0xffffffbc
   163b0:	mov	r0, r7
   163b4:	mov	r1, r5
   163b8:	bl	114b0 <memcpy@plt>
   163bc:	mov	r0, r7
   163c0:	str	r0, [r7, #-16]
   163c4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   163c8:	str	r0, [r7, #-12]
   163cc:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   163d0:	strb	r0, [r7, #-8]
   163d4:	cmp	r0, #0
   163d8:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   163dc:	strne	r0, [r7, #-4]
   163e0:	strb	r4, [fp, #-76]	; 0xffffffb4
   163e4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   163e8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   163ec:	add	r0, r0, r1
   163f0:	str	r0, [fp, #-72]	; 0xffffffb8
   163f4:	mov	r0, r6
   163f8:	bl	16830 <__assert_fail@plt+0x502c>
   163fc:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   16400:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16404:	ldr	r3, [fp, #-148]	; 0xffffff6c
   16408:	add	r7, r7, #40	; 0x28
   1640c:	cmp	r1, #0
   16410:	beq	163a0 <__assert_fail@plt+0x4b9c>
   16414:	cmp	r0, #0
   16418:	bne	163a0 <__assert_fail@plt+0x4b9c>
   1641c:	mov	r0, #1
   16420:	cmp	sl, #3
   16424:	str	r8, [fp, #-156]	; 0xffffff64
   16428:	str	sl, [fp, #-152]	; 0xffffff68
   1642c:	str	r0, [r3, #4]
   16430:	bcc	164f8 <__assert_fail@plt+0x4cf4>
   16434:	mov	r4, #2
   16438:	mov	r5, #0
   1643c:	add	r0, r4, r4, lsl #2
   16440:	add	r0, r9, r0, lsl #3
   16444:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   16448:	sub	r7, r0, #28
   1644c:	sub	sl, r0, #40	; 0x28
   16450:	sub	r6, r0, #36	; 0x24
   16454:	cmp	r8, #0
   16458:	bne	16470 <__assert_fail@plt+0x4c6c>
   1645c:	b	16498 <__assert_fail@plt+0x4c94>
   16460:	ldr	r0, [r3, r5, lsl #2]
   16464:	sub	r5, r5, r0
   16468:	cmp	r8, #0
   1646c:	beq	16498 <__assert_fail@plt+0x4c94>
   16470:	add	r0, r5, r5, lsl #2
   16474:	add	r0, r9, r0, lsl #3
   16478:	ldrb	r1, [r0, #8]
   1647c:	cmp	r1, #0
   16480:	beq	16498 <__assert_fail@plt+0x4c94>
   16484:	ldr	r0, [r0, #12]
   16488:	ldr	r1, [r7]
   1648c:	cmp	r1, r0
   16490:	bne	164c8 <__assert_fail@plt+0x4cc4>
   16494:	b	164dc <__assert_fail@plt+0x4cd8>
   16498:	add	r0, r5, r5, lsl #2
   1649c:	ldr	r2, [r6]
   164a0:	add	r1, r9, r0, lsl #3
   164a4:	ldr	r1, [r1, #4]
   164a8:	cmp	r2, r1
   164ac:	bne	164c8 <__assert_fail@plt+0x4cc4>
   164b0:	ldr	r1, [r9, r0, lsl #3]
   164b4:	ldr	r0, [sl]
   164b8:	bl	114e0 <memcmp@plt>
   164bc:	ldr	r3, [fp, #-148]	; 0xffffff6c
   164c0:	cmp	r0, #0
   164c4:	beq	164dc <__assert_fail@plt+0x4cd8>
   164c8:	cmp	r5, #0
   164cc:	bne	16460 <__assert_fail@plt+0x4c5c>
   164d0:	mov	r5, #0
   164d4:	mov	r0, r4
   164d8:	b	164e4 <__assert_fail@plt+0x4ce0>
   164dc:	add	r5, r5, #1
   164e0:	sub	r0, r4, r5
   164e4:	str	r0, [r3, r4, lsl #2]
   164e8:	ldr	r0, [fp, #-152]	; 0xffffff68
   164ec:	add	r4, r4, #1
   164f0:	cmp	r4, r0
   164f4:	bne	1643c <__assert_fail@plt+0x4c38>
   164f8:	ldr	r8, [fp, #-156]	; 0xffffff64
   164fc:	ldr	r0, [fp, #-160]	; 0xffffff60
   16500:	mov	r6, #0
   16504:	str	r6, [r8]
   16508:	str	r6, [fp, #-80]	; 0xffffffb0
   1650c:	str	r6, [fp, #-84]	; 0xffffffac
   16510:	strb	r6, [fp, #-88]	; 0xffffffa8
   16514:	str	r0, [fp, #-72]	; 0xffffffb8
   16518:	str	r6, [fp, #-136]	; 0xffffff78
   1651c:	str	r6, [fp, #-140]	; 0xffffff74
   16520:	str	r0, [fp, #-128]	; 0xffffff80
   16524:	sub	r0, fp, #144	; 0x90
   16528:	strb	r6, [fp, #-144]	; 0xffffff70
   1652c:	strb	r6, [fp, #-76]	; 0xffffffb4
   16530:	strb	r6, [fp, #-132]	; 0xffffff7c
   16534:	bl	16830 <__assert_fail@plt+0x502c>
   16538:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1653c:	ldrb	r1, [fp, #-120]	; 0xffffff88
   16540:	cmp	r0, #0
   16544:	bne	16550 <__assert_fail@plt+0x4d4c>
   16548:	cmp	r1, #0
   1654c:	bne	166bc <__assert_fail@plt+0x4eb8>
   16550:	clz	r1, r1
   16554:	sub	r4, fp, #88	; 0x58
   16558:	mov	sl, #0
   1655c:	lsr	r1, r1, #5
   16560:	add	r2, sl, sl, lsl #2
   16564:	tst	r1, #1
   16568:	add	r3, r9, r2, lsl #3
   1656c:	bne	16594 <__assert_fail@plt+0x4d90>
   16570:	ldrb	r1, [r3, #8]
   16574:	cmp	r1, #0
   16578:	beq	16594 <__assert_fail@plt+0x4d90>
   1657c:	ldr	r1, [r3, #12]
   16580:	cmp	r1, r0
   16584:	bne	165c0 <__assert_fail@plt+0x4dbc>
   16588:	ldr	r7, [fp, #-128]	; 0xffffff80
   1658c:	ldr	r5, [fp, #-124]	; 0xffffff84
   16590:	b	1661c <__assert_fail@plt+0x4e18>
   16594:	ldr	r5, [r3, #4]
   16598:	ldr	r0, [fp, #-124]	; 0xffffff84
   1659c:	cmp	r5, r0
   165a0:	bne	165c0 <__assert_fail@plt+0x4dbc>
   165a4:	ldr	r7, [fp, #-128]	; 0xffffff80
   165a8:	ldr	r0, [r9, r2, lsl #3]
   165ac:	mov	r2, r5
   165b0:	mov	r1, r7
   165b4:	bl	114e0 <memcmp@plt>
   165b8:	cmp	r0, #0
   165bc:	beq	1661c <__assert_fail@plt+0x4e18>
   165c0:	cmp	sl, #0
   165c4:	beq	1663c <__assert_fail@plt+0x4e38>
   165c8:	ldr	r0, [fp, #-148]	; 0xffffff6c
   165cc:	ldr	r5, [r0, sl, lsl #2]
   165d0:	sub	sl, sl, r5
   165d4:	cmp	r5, #0
   165d8:	beq	16688 <__assert_fail@plt+0x4e84>
   165dc:	mov	r0, r4
   165e0:	bl	16830 <__assert_fail@plt+0x502c>
   165e4:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   165e8:	cmp	r0, #0
   165ec:	beq	165fc <__assert_fail@plt+0x4df8>
   165f0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   165f4:	cmp	r0, #0
   165f8:	beq	166d4 <__assert_fail@plt+0x4ed0>
   165fc:	strb	r6, [fp, #-76]	; 0xffffffb4
   16600:	subs	r5, r5, #1
   16604:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16608:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1660c:	add	r0, r0, r1
   16610:	str	r0, [fp, #-72]	; 0xffffffb8
   16614:	bne	165dc <__assert_fail@plt+0x4dd8>
   16618:	b	16688 <__assert_fail@plt+0x4e84>
   1661c:	add	r0, r7, r5
   16620:	strb	r6, [fp, #-132]	; 0xffffff7c
   16624:	add	sl, sl, #1
   16628:	str	r0, [fp, #-128]	; 0xffffff80
   1662c:	ldr	r0, [fp, #-152]	; 0xffffff68
   16630:	cmp	sl, r0
   16634:	bne	16688 <__assert_fail@plt+0x4e84>
   16638:	b	166b4 <__assert_fail@plt+0x4eb0>
   1663c:	mov	r0, r4
   16640:	bl	16830 <__assert_fail@plt+0x502c>
   16644:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16648:	cmp	r0, #0
   1664c:	beq	1665c <__assert_fail@plt+0x4e58>
   16650:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16654:	cmp	r0, #0
   16658:	beq	166d4 <__assert_fail@plt+0x4ed0>
   1665c:	mov	sl, #0
   16660:	strb	sl, [fp, #-76]	; 0xffffffb4
   16664:	strb	sl, [fp, #-132]	; 0xffffff7c
   16668:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1666c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16670:	add	r0, r0, r1
   16674:	ldr	r1, [fp, #-124]	; 0xffffff84
   16678:	str	r0, [fp, #-72]	; 0xffffffb8
   1667c:	ldr	r0, [fp, #-128]	; 0xffffff80
   16680:	add	r0, r0, r1
   16684:	str	r0, [fp, #-128]	; 0xffffff80
   16688:	sub	r0, fp, #144	; 0x90
   1668c:	bl	16830 <__assert_fail@plt+0x502c>
   16690:	ldrb	r2, [fp, #-120]	; 0xffffff88
   16694:	clz	r0, r2
   16698:	lsr	r1, r0, #5
   1669c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   166a0:	cmp	r0, #0
   166a4:	bne	16560 <__assert_fail@plt+0x4d5c>
   166a8:	cmp	r2, #0
   166ac:	beq	16560 <__assert_fail@plt+0x4d5c>
   166b0:	b	166bc <__assert_fail@plt+0x4eb8>
   166b4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   166b8:	str	r0, [r8]
   166bc:	mov	r0, r9
   166c0:	bl	1a3cc <__assert_fail@plt+0x8bc8>
   166c4:	mov	r5, #1
   166c8:	mov	r0, r5
   166cc:	sub	sp, fp, #28
   166d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166d4:	bl	117d4 <abort@plt>
   166d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   166dc:	add	fp, sp, #24
   166e0:	mov	r4, #0
   166e4:	cmn	r2, #-536870911	; 0xe0000001
   166e8:	bhi	16824 <__assert_fail@plt+0x5020>
   166ec:	mov	r7, r0
   166f0:	lsl	r0, r2, #2
   166f4:	mov	r8, r3
   166f8:	mov	r5, r2
   166fc:	mov	r6, r1
   16700:	cmp	r0, #4016	; 0xfb0
   16704:	bhi	1672c <__assert_fail@plt+0x4f28>
   16708:	add	r0, r0, #22
   1670c:	bic	r0, r0, #7
   16710:	sub	r1, sp, r0
   16714:	add	r0, r1, #15
   16718:	bic	r0, r0, #15
   1671c:	mov	sp, r1
   16720:	cmp	r0, #0
   16724:	bne	16738 <__assert_fail@plt+0x4f34>
   16728:	b	16824 <__assert_fail@plt+0x5020>
   1672c:	bl	1a35c <__assert_fail@plt+0x8b58>
   16730:	cmp	r0, #0
   16734:	beq	16824 <__assert_fail@plt+0x5020>
   16738:	mov	r1, #1
   1673c:	cmp	r5, #3
   16740:	str	r1, [r0, #4]
   16744:	bcc	167a8 <__assert_fail@plt+0x4fa4>
   16748:	mov	r1, #2
   1674c:	mov	r2, #0
   16750:	add	r3, r6, r1
   16754:	ldrb	r4, [r6, r2]
   16758:	ldrb	r3, [r3, #-1]
   1675c:	cmp	r3, r4
   16760:	bne	1677c <__assert_fail@plt+0x4f78>
   16764:	b	16790 <__assert_fail@plt+0x4f8c>
   16768:	ldr	r4, [r0, r2, lsl #2]
   1676c:	sub	r2, r2, r4
   16770:	ldrb	r4, [r6, r2]
   16774:	cmp	r3, r4
   16778:	beq	16790 <__assert_fail@plt+0x4f8c>
   1677c:	cmp	r2, #0
   16780:	bne	16768 <__assert_fail@plt+0x4f64>
   16784:	mov	r2, #0
   16788:	mov	r3, r1
   1678c:	b	16798 <__assert_fail@plt+0x4f94>
   16790:	add	r2, r2, #1
   16794:	sub	r3, r1, r2
   16798:	str	r3, [r0, r1, lsl #2]
   1679c:	add	r1, r1, #1
   167a0:	cmp	r1, r5
   167a4:	bne	16750 <__assert_fail@plt+0x4f4c>
   167a8:	mov	r1, #0
   167ac:	str	r1, [r8]
   167b0:	ldrb	r3, [r7]
   167b4:	cmp	r3, #0
   167b8:	beq	1681c <__assert_fail@plt+0x5018>
   167bc:	mov	r2, r7
   167c0:	ldrb	r4, [r6, r1]
   167c4:	uxtb	r3, r3
   167c8:	cmp	r4, r3
   167cc:	bne	167e4 <__assert_fail@plt+0x4fe0>
   167d0:	add	r1, r1, #1
   167d4:	cmp	r1, r5
   167d8:	beq	16818 <__assert_fail@plt+0x5014>
   167dc:	add	r7, r7, #1
   167e0:	b	16808 <__assert_fail@plt+0x5004>
   167e4:	cmp	r1, #0
   167e8:	beq	167fc <__assert_fail@plt+0x4ff8>
   167ec:	ldr	r3, [r0, r1, lsl #2]
   167f0:	sub	r1, r1, r3
   167f4:	add	r2, r2, r3
   167f8:	b	16808 <__assert_fail@plt+0x5004>
   167fc:	add	r7, r7, #1
   16800:	add	r2, r2, #1
   16804:	mov	r1, #0
   16808:	ldrb	r3, [r7]
   1680c:	cmp	r3, #0
   16810:	bne	167c0 <__assert_fail@plt+0x4fbc>
   16814:	b	1681c <__assert_fail@plt+0x5018>
   16818:	str	r2, [r8]
   1681c:	bl	1a3cc <__assert_fail@plt+0x8bc8>
   16820:	mov	r4, #1
   16824:	mov	r0, r4
   16828:	sub	sp, fp, #24
   1682c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16830:	push	{r4, r5, r6, r7, fp, lr}
   16834:	add	fp, sp, #16
   16838:	mov	r4, r0
   1683c:	ldrb	r0, [r0, #12]
   16840:	cmp	r0, #0
   16844:	popne	{r4, r5, r6, r7, fp, pc}
   16848:	ldrb	r0, [r4]
   1684c:	ldr	r6, [r4, #16]
   16850:	cmp	r0, #0
   16854:	beq	168b4 <__assert_fail@plt+0x50b0>
   16858:	add	r5, r4, #4
   1685c:	bl	11588 <__ctype_get_mb_cur_max@plt>
   16860:	mov	r1, r0
   16864:	mov	r0, r6
   16868:	bl	1883c <__assert_fail@plt+0x7038>
   1686c:	add	r7, r4, #28
   16870:	mov	r2, r0
   16874:	mov	r1, r6
   16878:	mov	r3, r5
   1687c:	mov	r0, r7
   16880:	bl	1a148 <__assert_fail@plt+0x8944>
   16884:	cmn	r0, #2
   16888:	str	r0, [r4, #20]
   1688c:	beq	16930 <__assert_fail@plt+0x512c>
   16890:	cmp	r0, #0
   16894:	beq	168ec <__assert_fail@plt+0x50e8>
   16898:	cmn	r0, #1
   1689c:	bne	16910 <__assert_fail@plt+0x510c>
   168a0:	mov	r0, #0
   168a4:	strb	r0, [r4, #24]
   168a8:	mov	r0, #1
   168ac:	str	r0, [r4, #20]
   168b0:	b	16944 <__assert_fail@plt+0x5140>
   168b4:	ldrb	r0, [r6]
   168b8:	movw	r2, #51968	; 0xcb00
   168bc:	movt	r2, #1
   168c0:	ubfx	r1, r0, #5, #3
   168c4:	ldr	r1, [r2, r1, lsl #2]
   168c8:	and	r2, r0, #31
   168cc:	mov	r0, #1
   168d0:	tst	r1, r0, lsl r2
   168d4:	beq	16950 <__assert_fail@plt+0x514c>
   168d8:	str	r0, [r4, #20]
   168dc:	ldrb	r1, [r6]
   168e0:	strb	r0, [r4, #24]
   168e4:	str	r1, [r4, #28]
   168e8:	b	16944 <__assert_fail@plt+0x5140>
   168ec:	mov	r0, #1
   168f0:	str	r0, [r4, #20]
   168f4:	ldr	r0, [r4, #16]
   168f8:	ldrb	r0, [r0]
   168fc:	cmp	r0, #0
   16900:	bne	16970 <__assert_fail@plt+0x516c>
   16904:	ldr	r0, [r7]
   16908:	cmp	r0, #0
   1690c:	bne	16990 <__assert_fail@plt+0x518c>
   16910:	mov	r0, #1
   16914:	strb	r0, [r4, #24]
   16918:	mov	r0, r5
   1691c:	bl	114c8 <mbsinit@plt>
   16920:	cmp	r0, #0
   16924:	movne	r0, #0
   16928:	strbne	r0, [r4]
   1692c:	b	16944 <__assert_fail@plt+0x5140>
   16930:	ldr	r0, [r4, #16]
   16934:	bl	11654 <strlen@plt>
   16938:	str	r0, [r4, #20]
   1693c:	mov	r0, #0
   16940:	strb	r0, [r4, #24]
   16944:	mov	r0, #1
   16948:	strb	r0, [r4, #12]
   1694c:	pop	{r4, r5, r6, r7, fp, pc}
   16950:	add	r5, r4, #4
   16954:	mov	r0, r5
   16958:	bl	114c8 <mbsinit@plt>
   1695c:	cmp	r0, #0
   16960:	beq	169b0 <__assert_fail@plt+0x51ac>
   16964:	mov	r0, #1
   16968:	strb	r0, [r4]
   1696c:	b	1685c <__assert_fail@plt+0x5058>
   16970:	movw	r0, #50756	; 0xc644
   16974:	movw	r1, #50696	; 0xc608
   16978:	movw	r3, #50708	; 0xc614
   1697c:	mov	r2, #171	; 0xab
   16980:	movt	r0, #1
   16984:	movt	r1, #1
   16988:	movt	r3, #1
   1698c:	bl	11804 <__assert_fail@plt>
   16990:	movw	r0, #50779	; 0xc65b
   16994:	movw	r1, #50696	; 0xc608
   16998:	movw	r3, #50708	; 0xc614
   1699c:	mov	r2, #172	; 0xac
   169a0:	movt	r0, #1
   169a4:	movt	r1, #1
   169a8:	movt	r3, #1
   169ac:	bl	11804 <__assert_fail@plt>
   169b0:	movw	r0, #50673	; 0xc5f1
   169b4:	movw	r1, #50696	; 0xc608
   169b8:	movw	r3, #50708	; 0xc614
   169bc:	mov	r2, #143	; 0x8f
   169c0:	movt	r0, #1
   169c4:	movt	r1, #1
   169c8:	movt	r3, #1
   169cc:	bl	11804 <__assert_fail@plt>
   169d0:	ldr	r2, [r0, #16]
   169d4:	add	r1, r2, r1
   169d8:	str	r1, [r0, #16]
   169dc:	bx	lr
   169e0:	push	{r4, r5, r6, sl, fp, lr}
   169e4:	add	fp, sp, #16
   169e8:	mov	r5, r1
   169ec:	ldrb	r1, [r1]
   169f0:	mov	r4, r0
   169f4:	strb	r1, [r0], #4
   169f8:	cmp	r1, #0
   169fc:	beq	16a0c <__assert_fail@plt+0x5208>
   16a00:	ldmib	r5, {r1, r2}
   16a04:	stm	r0, {r1, r2}
   16a08:	b	16a18 <__assert_fail@plt+0x5214>
   16a0c:	mov	r1, #0
   16a10:	str	r1, [r0]
   16a14:	str	r1, [r0, #4]
   16a18:	ldrb	r0, [r5, #12]
   16a1c:	strb	r0, [r4, #12]
   16a20:	add	r0, r5, #32
   16a24:	ldr	r1, [r5, #16]
   16a28:	cmp	r1, r0
   16a2c:	beq	16a38 <__assert_fail@plt+0x5234>
   16a30:	mov	r6, r1
   16a34:	b	16a48 <__assert_fail@plt+0x5244>
   16a38:	ldr	r2, [r5, #20]
   16a3c:	add	r6, r4, #32
   16a40:	mov	r0, r6
   16a44:	bl	114b0 <memcpy@plt>
   16a48:	str	r6, [r4, #16]
   16a4c:	ldr	r0, [r5, #20]
   16a50:	str	r0, [r4, #20]
   16a54:	ldrb	r0, [r5, #24]
   16a58:	strb	r0, [r4, #24]
   16a5c:	cmp	r0, #0
   16a60:	ldrne	r0, [r5, #28]
   16a64:	strne	r0, [r4, #28]
   16a68:	pop	{r4, r5, r6, sl, fp, pc}
   16a6c:	push	{r4, r5, fp, lr}
   16a70:	add	fp, sp, #8
   16a74:	cmp	r0, #0
   16a78:	beq	16b0c <__assert_fail@plt+0x5308>
   16a7c:	mov	r1, #47	; 0x2f
   16a80:	mov	r4, r0
   16a84:	bl	11744 <strrchr@plt>
   16a88:	cmp	r0, #0
   16a8c:	mov	r5, r4
   16a90:	addne	r5, r0, #1
   16a94:	sub	r0, r5, r4
   16a98:	cmp	r0, #7
   16a9c:	blt	16af0 <__assert_fail@plt+0x52ec>
   16aa0:	movw	r1, #50853	; 0xc6a5
   16aa4:	sub	r0, r5, #7
   16aa8:	mov	r2, #7
   16aac:	movt	r1, #1
   16ab0:	bl	117c8 <strncmp@plt>
   16ab4:	cmp	r0, #0
   16ab8:	bne	16af0 <__assert_fail@plt+0x52ec>
   16abc:	movw	r1, #50861	; 0xc6ad
   16ac0:	mov	r0, r5
   16ac4:	mov	r2, #3
   16ac8:	movt	r1, #1
   16acc:	bl	117c8 <strncmp@plt>
   16ad0:	cmp	r0, #0
   16ad4:	beq	16ae0 <__assert_fail@plt+0x52dc>
   16ad8:	mov	r4, r5
   16adc:	b	16af0 <__assert_fail@plt+0x52ec>
   16ae0:	movw	r0, #53688	; 0xd1b8
   16ae4:	add	r4, r5, #3
   16ae8:	movt	r0, #2
   16aec:	str	r4, [r0]
   16af0:	movw	r0, #53696	; 0xd1c0
   16af4:	movt	r0, #2
   16af8:	str	r4, [r0]
   16afc:	movw	r0, #53936	; 0xd2b0
   16b00:	movt	r0, #2
   16b04:	str	r4, [r0]
   16b08:	pop	{r4, r5, fp, pc}
   16b0c:	movw	r0, #53712	; 0xd1d0
   16b10:	mov	r1, #55	; 0x37
   16b14:	mov	r2, #1
   16b18:	movt	r0, #2
   16b1c:	ldr	r3, [r0]
   16b20:	movw	r0, #50797	; 0xc66d
   16b24:	movt	r0, #1
   16b28:	bl	11564 <fwrite@plt>
   16b2c:	bl	117d4 <abort@plt>
   16b30:	push	{r4, r5, r6, sl, fp, lr}
   16b34:	add	fp, sp, #16
   16b38:	mov	r4, r0
   16b3c:	movw	r0, #53944	; 0xd2b8
   16b40:	movt	r0, #2
   16b44:	cmp	r4, #0
   16b48:	moveq	r4, r0
   16b4c:	bl	11684 <__errno_location@plt>
   16b50:	ldr	r6, [r0]
   16b54:	mov	r5, r0
   16b58:	mov	r0, r4
   16b5c:	mov	r1, #48	; 0x30
   16b60:	bl	19418 <__assert_fail@plt+0x7c14>
   16b64:	str	r6, [r5]
   16b68:	pop	{r4, r5, r6, sl, fp, pc}
   16b6c:	movw	r1, #53944	; 0xd2b8
   16b70:	cmp	r0, #0
   16b74:	movt	r1, #2
   16b78:	movne	r1, r0
   16b7c:	ldr	r0, [r1]
   16b80:	bx	lr
   16b84:	movw	r2, #53944	; 0xd2b8
   16b88:	cmp	r0, #0
   16b8c:	movt	r2, #2
   16b90:	movne	r2, r0
   16b94:	str	r1, [r2]
   16b98:	bx	lr
   16b9c:	movw	r3, #53944	; 0xd2b8
   16ba0:	cmp	r0, #0
   16ba4:	movt	r3, #2
   16ba8:	movne	r3, r0
   16bac:	ubfx	r0, r1, #5, #3
   16bb0:	and	r1, r1, #31
   16bb4:	add	r0, r3, r0, lsl #2
   16bb8:	ldr	r3, [r0, #8]
   16bbc:	eor	r2, r2, r3, lsr r1
   16bc0:	and	r2, r2, #1
   16bc4:	eor	r2, r3, r2, lsl r1
   16bc8:	str	r2, [r0, #8]
   16bcc:	mov	r0, #1
   16bd0:	and	r0, r0, r3, lsr r1
   16bd4:	bx	lr
   16bd8:	movw	r2, #53944	; 0xd2b8
   16bdc:	cmp	r0, #0
   16be0:	movt	r2, #2
   16be4:	movne	r2, r0
   16be8:	ldr	r0, [r2, #4]
   16bec:	str	r1, [r2, #4]
   16bf0:	bx	lr
   16bf4:	movw	r3, #53944	; 0xd2b8
   16bf8:	cmp	r0, #0
   16bfc:	movt	r3, #2
   16c00:	movne	r3, r0
   16c04:	cmp	r1, #0
   16c08:	mov	r0, #10
   16c0c:	cmpne	r2, #0
   16c10:	str	r0, [r3]
   16c14:	bne	16c24 <__assert_fail@plt+0x5420>
   16c18:	push	{fp, lr}
   16c1c:	mov	fp, sp
   16c20:	bl	117d4 <abort@plt>
   16c24:	str	r1, [r3, #40]	; 0x28
   16c28:	str	r2, [r3, #44]	; 0x2c
   16c2c:	bx	lr
   16c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c34:	add	fp, sp, #28
   16c38:	sub	sp, sp, #20
   16c3c:	mov	r7, r0
   16c40:	ldr	r0, [fp, #8]
   16c44:	movw	r5, #53944	; 0xd2b8
   16c48:	mov	r8, r3
   16c4c:	mov	r9, r2
   16c50:	mov	sl, r1
   16c54:	movt	r5, #2
   16c58:	cmp	r0, #0
   16c5c:	movne	r5, r0
   16c60:	bl	11684 <__errno_location@plt>
   16c64:	mov	r4, r0
   16c68:	ldm	r5, {r0, r1}
   16c6c:	ldr	r2, [r5, #40]	; 0x28
   16c70:	ldr	r3, [r5, #44]	; 0x2c
   16c74:	add	r5, r5, #8
   16c78:	ldr	r6, [r4]
   16c7c:	stm	sp, {r0, r1, r5}
   16c80:	str	r2, [sp, #12]
   16c84:	str	r3, [sp, #16]
   16c88:	mov	r0, r7
   16c8c:	mov	r1, sl
   16c90:	mov	r2, r9
   16c94:	mov	r3, r8
   16c98:	bl	16ca8 <__assert_fail@plt+0x54a4>
   16c9c:	str	r6, [r4]
   16ca0:	sub	sp, fp, #28
   16ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cac:	add	fp, sp, #28
   16cb0:	sub	sp, sp, #156	; 0x9c
   16cb4:	str	r0, [sp, #80]	; 0x50
   16cb8:	ldr	r0, [fp, #12]
   16cbc:	mov	r6, r1
   16cc0:	mov	r9, r3
   16cc4:	str	r2, [fp, #-84]	; 0xffffffac
   16cc8:	and	r1, r0, #4
   16ccc:	str	r1, [sp, #32]
   16cd0:	and	r1, r0, #1
   16cd4:	str	r1, [sp, #36]	; 0x24
   16cd8:	ubfx	r4, r0, #1, #1
   16cdc:	bl	11588 <__ctype_get_mb_cur_max@plt>
   16ce0:	str	r0, [sp, #40]	; 0x28
   16ce4:	ldr	r0, [fp, #24]
   16ce8:	ldr	r7, [fp, #8]
   16cec:	mov	r1, #0
   16cf0:	mov	r5, #1
   16cf4:	str	r1, [fp, #-56]	; 0xffffffc8
   16cf8:	mov	r1, #0
   16cfc:	str	r1, [sp, #60]	; 0x3c
   16d00:	str	r0, [sp, #76]	; 0x4c
   16d04:	ldr	r0, [fp, #20]
   16d08:	str	r0, [sp, #72]	; 0x48
   16d0c:	mov	r0, #0
   16d10:	str	r0, [sp, #56]	; 0x38
   16d14:	mov	r0, #0
   16d18:	str	r0, [sp, #92]	; 0x5c
   16d1c:	mov	r0, #0
   16d20:	str	r0, [fp, #-76]	; 0xffffffb4
   16d24:	mov	r0, #0
   16d28:	cmp	r7, #10
   16d2c:	bhi	17cac <__assert_fail@plt+0x64a8>
   16d30:	add	r1, pc, #28
   16d34:	mov	sl, r6
   16d38:	ldr	r6, [sp, #80]	; 0x50
   16d3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16d40:	mov	r8, #0
   16d44:	mov	r2, #1
   16d48:	mov	r3, #0
   16d4c:	mov	lr, r9
   16d50:	ldr	pc, [r1, r7, lsl #2]
   16d54:	andeq	r6, r1, r8, lsr lr
   16d58:	andeq	r6, r1, r4, ror #28
   16d5c:	andeq	r6, r1, r8, lsr #28
   16d60:	andeq	r6, r1, r0, lsr #28
   16d64:	andeq	r6, r1, r8, asr lr
   16d68:	andeq	r6, r1, ip, lsr #29
   16d6c:	andeq	r6, r1, r8, asr #28
   16d70:	andeq	r6, r1, r8, lsl #30
   16d74:	andeq	r6, r1, r0, lsl #27
   16d78:	andeq	r6, r1, r0, lsl #27
   16d7c:	andeq	r6, r1, r8, lsr #27
   16d80:	movw	r0, #50943	; 0xc6ff
   16d84:	mov	r1, r7
   16d88:	movt	r0, #1
   16d8c:	bl	186b8 <__assert_fail@plt+0x6eb4>
   16d90:	str	r0, [sp, #72]	; 0x48
   16d94:	movw	r0, #50777	; 0xc659
   16d98:	mov	r1, r7
   16d9c:	movt	r0, #1
   16da0:	bl	186b8 <__assert_fail@plt+0x6eb4>
   16da4:	str	r0, [sp, #76]	; 0x4c
   16da8:	str	r5, [fp, #-48]	; 0xffffffd0
   16dac:	mov	r8, #0
   16db0:	mov	r5, r7
   16db4:	tst	r4, #1
   16db8:	bne	16df0 <__assert_fail@plt+0x55ec>
   16dbc:	ldr	r0, [sp, #72]	; 0x48
   16dc0:	ldrb	r0, [r0]
   16dc4:	cmp	r0, #0
   16dc8:	beq	16df0 <__assert_fail@plt+0x55ec>
   16dcc:	ldr	r1, [sp, #72]	; 0x48
   16dd0:	mov	r8, #0
   16dd4:	add	r1, r1, #1
   16dd8:	cmp	r8, sl
   16ddc:	strbcc	r0, [r6, r8]
   16de0:	ldrb	r0, [r1, r8]
   16de4:	add	r8, r8, #1
   16de8:	cmp	r0, #0
   16dec:	bne	16dd8 <__assert_fail@plt+0x55d4>
   16df0:	ldr	r7, [sp, #76]	; 0x4c
   16df4:	mov	r0, r7
   16df8:	bl	11654 <strlen@plt>
   16dfc:	str	r7, [sp, #92]	; 0x5c
   16e00:	mov	r7, r5
   16e04:	ldr	ip, [fp, #-84]	; 0xffffffac
   16e08:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16e0c:	str	r0, [fp, #-76]	; 0xffffffb4
   16e10:	mov	r2, #1
   16e14:	mov	r3, r4
   16e18:	mov	lr, r9
   16e1c:	b	16f08 <__assert_fail@plt+0x5704>
   16e20:	mov	r0, #1
   16e24:	b	16e64 <__assert_fail@plt+0x5660>
   16e28:	tst	r4, #1
   16e2c:	bne	16e64 <__assert_fail@plt+0x5660>
   16e30:	mov	r2, r0
   16e34:	b	16e8c <__assert_fail@plt+0x5688>
   16e38:	mov	r7, #0
   16e3c:	mov	r8, #0
   16e40:	mov	r2, r0
   16e44:	b	16f04 <__assert_fail@plt+0x5700>
   16e48:	mov	r0, #1
   16e4c:	mov	r8, #0
   16e50:	mov	r7, #5
   16e54:	b	16ec0 <__assert_fail@plt+0x56bc>
   16e58:	mov	r2, #1
   16e5c:	tst	r4, #1
   16e60:	beq	16e8c <__assert_fail@plt+0x5688>
   16e64:	mov	r1, #1
   16e68:	mov	r8, #0
   16e6c:	mov	r7, #2
   16e70:	mov	r2, r0
   16e74:	mov	r3, #1
   16e78:	str	r1, [fp, #-76]	; 0xffffffb4
   16e7c:	movw	r1, #50777	; 0xc659
   16e80:	movt	r1, #1
   16e84:	str	r1, [sp, #92]	; 0x5c
   16e88:	b	16f08 <__assert_fail@plt+0x5704>
   16e8c:	cmp	sl, #0
   16e90:	mov	r8, #1
   16e94:	mov	r7, #2
   16e98:	movne	r0, #39	; 0x27
   16e9c:	strbne	r0, [r6]
   16ea0:	movw	r0, #50777	; 0xc659
   16ea4:	movt	r0, #1
   16ea8:	b	16ef8 <__assert_fail@plt+0x56f4>
   16eac:	mov	r7, #5
   16eb0:	tst	r4, #1
   16eb4:	beq	16edc <__assert_fail@plt+0x56d8>
   16eb8:	mov	r0, #1
   16ebc:	mov	r8, #0
   16ec0:	str	r0, [fp, #-76]	; 0xffffffb4
   16ec4:	movw	r0, #50941	; 0xc6fd
   16ec8:	mov	r2, #1
   16ecc:	mov	r3, #1
   16ed0:	movt	r0, #1
   16ed4:	str	r0, [sp, #92]	; 0x5c
   16ed8:	b	16f08 <__assert_fail@plt+0x5704>
   16edc:	cmp	sl, #0
   16ee0:	mov	r8, #1
   16ee4:	mov	r2, #1
   16ee8:	movne	r0, #34	; 0x22
   16eec:	strbne	r0, [r6]
   16ef0:	movw	r0, #50941	; 0xc6fd
   16ef4:	movt	r0, #1
   16ef8:	str	r0, [sp, #92]	; 0x5c
   16efc:	mov	r0, #1
   16f00:	str	r0, [fp, #-76]	; 0xffffffb4
   16f04:	mov	r3, #0
   16f08:	ldr	r0, [fp, #16]
   16f0c:	str	r3, [fp, #-72]	; 0xffffffb8
   16f10:	str	r7, [fp, #-64]	; 0xffffffc0
   16f14:	str	r2, [sp, #84]	; 0x54
   16f18:	cmp	r0, #0
   16f1c:	movwne	r0, #1
   16f20:	and	r0, r0, r3
   16f24:	str	r0, [fp, #-88]	; 0xffffffa8
   16f28:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16f2c:	cmp	r0, #0
   16f30:	movwne	r0, #1
   16f34:	subs	r4, r7, #2
   16f38:	mov	r7, #0
   16f3c:	and	r1, r0, r3
   16f40:	str	r4, [fp, #-80]	; 0xffffffb0
   16f44:	and	r1, r2, r1
   16f48:	str	r1, [sp, #48]	; 0x30
   16f4c:	clz	r1, r4
   16f50:	lsr	r1, r1, #5
   16f54:	and	r1, r1, r3
   16f58:	eor	r3, r3, #1
   16f5c:	str	r1, [sp, #64]	; 0x40
   16f60:	mov	r1, r4
   16f64:	str	r3, [sp, #88]	; 0x58
   16f68:	movwne	r1, #1
   16f6c:	orr	r3, r1, r3
   16f70:	and	r1, r1, r2
   16f74:	and	r0, r0, r1
   16f78:	str	r3, [sp, #68]	; 0x44
   16f7c:	str	r1, [fp, #-68]	; 0xffffffbc
   16f80:	str	r0, [fp, #-60]	; 0xffffffc4
   16f84:	eor	r0, r2, #1
   16f88:	str	r0, [sp, #52]	; 0x34
   16f8c:	cmn	lr, #1
   16f90:	beq	16fa0 <__assert_fail@plt+0x579c>
   16f94:	cmp	r7, lr
   16f98:	bne	16fac <__assert_fail@plt+0x57a8>
   16f9c:	b	17ad4 <__assert_fail@plt+0x62d0>
   16fa0:	ldrb	r0, [ip, r7]
   16fa4:	cmp	r0, #0
   16fa8:	beq	17adc <__assert_fail@plt+0x62d8>
   16fac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16fb0:	mov	r9, #0
   16fb4:	str	r5, [fp, #-48]	; 0xffffffd0
   16fb8:	cmp	r0, #0
   16fbc:	beq	16ff0 <__assert_fail@plt+0x57ec>
   16fc0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16fc4:	add	r4, r7, r0
   16fc8:	cmp	r0, #2
   16fcc:	bcc	16fe8 <__assert_fail@plt+0x57e4>
   16fd0:	cmn	lr, #1
   16fd4:	bne	16fe8 <__assert_fail@plt+0x57e4>
   16fd8:	mov	r0, ip
   16fdc:	bl	11654 <strlen@plt>
   16fe0:	ldr	ip, [fp, #-84]	; 0xffffffac
   16fe4:	mov	lr, r0
   16fe8:	cmp	r4, lr
   16fec:	bls	16ff8 <__assert_fail@plt+0x57f4>
   16ff0:	mov	r0, #0
   16ff4:	b	17038 <__assert_fail@plt+0x5834>
   16ff8:	ldr	r1, [sp, #92]	; 0x5c
   16ffc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17000:	add	r0, ip, r7
   17004:	mov	r4, lr
   17008:	bl	114e0 <memcmp@plt>
   1700c:	ldr	r2, [sp, #88]	; 0x58
   17010:	cmp	r0, #0
   17014:	mov	r1, r0
   17018:	movwne	r1, #1
   1701c:	orr	r1, r1, r2
   17020:	tst	r1, #1
   17024:	beq	17b6c <__assert_fail@plt+0x6368>
   17028:	ldr	ip, [fp, #-84]	; 0xffffffac
   1702c:	clz	r0, r0
   17030:	mov	lr, r4
   17034:	lsr	r0, r0, #5
   17038:	str	r0, [fp, #-52]	; 0xffffffcc
   1703c:	ldrb	r5, [ip, r7]
   17040:	cmp	r5, #126	; 0x7e
   17044:	bhi	173fc <__assert_fail@plt+0x5bf8>
   17048:	add	r3, pc, #16
   1704c:	mov	r4, #1
   17050:	mov	r2, #110	; 0x6e
   17054:	mov	r0, #97	; 0x61
   17058:	mov	r1, #0
   1705c:	ldr	pc, [r3, r5, lsl #2]
   17060:	strdeq	r7, [r1], -r8
   17064:	strdeq	r7, [r1], -ip
   17068:	strdeq	r7, [r1], -ip
   1706c:	strdeq	r7, [r1], -ip
   17070:	strdeq	r7, [r1], -ip
   17074:	strdeq	r7, [r1], -ip
   17078:	strdeq	r7, [r1], -ip
   1707c:			; <UNDEFINED> instruction: 0x000174b0
   17080:	ldrdeq	r7, [r1], -r8
   17084:	ldrdeq	r7, [r1], -r0
   17088:	andeq	r7, r1, r4, ror #5
   1708c:	andeq	r7, r1, r4, ror #6
   17090:	andeq	r7, r1, r8, asr #5
   17094:	andeq	r7, r1, r0, ror #5
   17098:	strdeq	r7, [r1], -ip
   1709c:	strdeq	r7, [r1], -ip
   170a0:	strdeq	r7, [r1], -ip
   170a4:	strdeq	r7, [r1], -ip
   170a8:	strdeq	r7, [r1], -ip
   170ac:	strdeq	r7, [r1], -ip
   170b0:	strdeq	r7, [r1], -ip
   170b4:	strdeq	r7, [r1], -ip
   170b8:	strdeq	r7, [r1], -ip
   170bc:	strdeq	r7, [r1], -ip
   170c0:	strdeq	r7, [r1], -ip
   170c4:	strdeq	r7, [r1], -ip
   170c8:	strdeq	r7, [r1], -ip
   170cc:	strdeq	r7, [r1], -ip
   170d0:	strdeq	r7, [r1], -ip
   170d4:	strdeq	r7, [r1], -ip
   170d8:	strdeq	r7, [r1], -ip
   170dc:	strdeq	r7, [r1], -ip
   170e0:	andeq	r7, r1, r8, ror #8
   170e4:	andeq	r7, r1, ip, ror #8
   170e8:	andeq	r7, r1, ip, ror #8
   170ec:	andeq	r7, r1, r0, ror r2
   170f0:	andeq	r7, r1, ip, ror #8
   170f4:	andeq	r7, r1, ip, asr r2
   170f8:	andeq	r7, r1, ip, ror #8
   170fc:	andeq	r7, r1, ip, ror #6
   17100:	andeq	r7, r1, ip, ror #8
   17104:	andeq	r7, r1, ip, ror #8
   17108:	andeq	r7, r1, ip, ror #8
   1710c:	andeq	r7, r1, ip, asr r2
   17110:	andeq	r7, r1, ip, asr r2
   17114:	andeq	r7, r1, ip, asr r2
   17118:	andeq	r7, r1, ip, asr r2
   1711c:	andeq	r7, r1, ip, asr r2
   17120:	andeq	r7, r1, ip, asr r2
   17124:	andeq	r7, r1, ip, asr r2
   17128:	andeq	r7, r1, ip, asr r2
   1712c:	andeq	r7, r1, ip, asr r2
   17130:	andeq	r7, r1, ip, asr r2
   17134:	andeq	r7, r1, ip, asr r2
   17138:	andeq	r7, r1, ip, asr r2
   1713c:	andeq	r7, r1, ip, asr r2
   17140:	andeq	r7, r1, ip, asr r2
   17144:	andeq	r7, r1, ip, asr r2
   17148:	andeq	r7, r1, ip, asr r2
   1714c:	andeq	r7, r1, ip, ror #8
   17150:	andeq	r7, r1, ip, ror #8
   17154:	andeq	r7, r1, ip, ror #8
   17158:	andeq	r7, r1, ip, ror #8
   1715c:	andeq	r7, r1, r8, lsr r3
   17160:	strdeq	r7, [r1], -ip
   17164:	andeq	r7, r1, ip, asr r2
   17168:	andeq	r7, r1, ip, asr r2
   1716c:	andeq	r7, r1, ip, asr r2
   17170:	andeq	r7, r1, ip, asr r2
   17174:	andeq	r7, r1, ip, asr r2
   17178:	andeq	r7, r1, ip, asr r2
   1717c:	andeq	r7, r1, ip, asr r2
   17180:	andeq	r7, r1, ip, asr r2
   17184:	andeq	r7, r1, ip, asr r2
   17188:	andeq	r7, r1, ip, asr r2
   1718c:	andeq	r7, r1, ip, asr r2
   17190:	andeq	r7, r1, ip, asr r2
   17194:	andeq	r7, r1, ip, asr r2
   17198:	andeq	r7, r1, ip, asr r2
   1719c:	andeq	r7, r1, ip, asr r2
   171a0:	andeq	r7, r1, ip, asr r2
   171a4:	andeq	r7, r1, ip, asr r2
   171a8:	andeq	r7, r1, ip, asr r2
   171ac:	andeq	r7, r1, ip, asr r2
   171b0:	andeq	r7, r1, ip, asr r2
   171b4:	andeq	r7, r1, ip, asr r2
   171b8:	andeq	r7, r1, ip, asr r2
   171bc:	andeq	r7, r1, ip, asr r2
   171c0:	andeq	r7, r1, ip, asr r2
   171c4:	andeq	r7, r1, ip, asr r2
   171c8:	andeq	r7, r1, ip, asr r2
   171cc:	andeq	r7, r1, ip, ror #8
   171d0:	andeq	r7, r1, r4, lsr #5
   171d4:	andeq	r7, r1, ip, asr r2
   171d8:	andeq	r7, r1, ip, ror #8
   171dc:	andeq	r7, r1, ip, asr r2
   171e0:	andeq	r7, r1, ip, ror #8
   171e4:	andeq	r7, r1, ip, asr r2
   171e8:	andeq	r7, r1, ip, asr r2
   171ec:	andeq	r7, r1, ip, asr r2
   171f0:	andeq	r7, r1, ip, asr r2
   171f4:	andeq	r7, r1, ip, asr r2
   171f8:	andeq	r7, r1, ip, asr r2
   171fc:	andeq	r7, r1, ip, asr r2
   17200:	andeq	r7, r1, ip, asr r2
   17204:	andeq	r7, r1, ip, asr r2
   17208:	andeq	r7, r1, ip, asr r2
   1720c:	andeq	r7, r1, ip, asr r2
   17210:	andeq	r7, r1, ip, asr r2
   17214:	andeq	r7, r1, ip, asr r2
   17218:	andeq	r7, r1, ip, asr r2
   1721c:	andeq	r7, r1, ip, asr r2
   17220:	andeq	r7, r1, ip, asr r2
   17224:	andeq	r7, r1, ip, asr r2
   17228:	andeq	r7, r1, ip, asr r2
   1722c:	andeq	r7, r1, ip, asr r2
   17230:	andeq	r7, r1, ip, asr r2
   17234:	andeq	r7, r1, ip, asr r2
   17238:	andeq	r7, r1, ip, asr r2
   1723c:	andeq	r7, r1, ip, asr r2
   17240:	andeq	r7, r1, ip, asr r2
   17244:	andeq	r7, r1, ip, asr r2
   17248:	andeq	r7, r1, ip, asr r2
   1724c:	andeq	r7, r1, r4, lsl #5
   17250:	andeq	r7, r1, ip, ror #8
   17254:	andeq	r7, r1, r4, lsl #5
   17258:	andeq	r7, r1, r0, ror r2
   1725c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17260:	cmp	r0, #0
   17264:	beq	174c4 <__assert_fail@plt+0x5cc0>
   17268:	ldr	r0, [fp, #16]
   1726c:	b	174c8 <__assert_fail@plt+0x5cc4>
   17270:	mov	r4, #0
   17274:	cmp	r7, #0
   17278:	beq	17468 <__assert_fail@plt+0x5c64>
   1727c:	mov	r9, #0
   17280:	b	1725c <__assert_fail@plt+0x5a58>
   17284:	mov	r4, #0
   17288:	cmn	lr, #1
   1728c:	beq	1744c <__assert_fail@plt+0x5c48>
   17290:	cmp	r7, #0
   17294:	bne	1727c <__assert_fail@plt+0x5a78>
   17298:	cmp	lr, #1
   1729c:	beq	17468 <__assert_fail@plt+0x5c64>
   172a0:	b	1727c <__assert_fail@plt+0x5a78>
   172a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   172a8:	cmp	r0, #2
   172ac:	bne	1748c <__assert_fail@plt+0x5c88>
   172b0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   172b4:	tst	r0, #1
   172b8:	bne	17b88 <__assert_fail@plt+0x6384>
   172bc:	mov	r9, #0
   172c0:	mov	r0, #92	; 0x5c
   172c4:	b	174a0 <__assert_fail@plt+0x5c9c>
   172c8:	mov	r0, #102	; 0x66
   172cc:	b	174b0 <__assert_fail@plt+0x5cac>
   172d0:	mov	r2, #116	; 0x74
   172d4:	b	172e4 <__assert_fail@plt+0x5ae0>
   172d8:	mov	r0, #98	; 0x62
   172dc:	b	174b0 <__assert_fail@plt+0x5cac>
   172e0:	mov	r2, #114	; 0x72
   172e4:	ldr	r0, [sp, #68]	; 0x44
   172e8:	tst	r0, #1
   172ec:	mov	r0, r2
   172f0:	bne	174b0 <__assert_fail@plt+0x5cac>
   172f4:	b	17b88 <__assert_fail@plt+0x6384>
   172f8:	ldr	r0, [sp, #84]	; 0x54
   172fc:	tst	r0, #1
   17300:	beq	175a0 <__assert_fail@plt+0x5d9c>
   17304:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17308:	tst	r0, #1
   1730c:	bne	17c98 <__assert_fail@plt+0x6494>
   17310:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17314:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17318:	cmp	r0, #2
   1731c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   17320:	movwne	r0, #1
   17324:	orr	r0, r0, r2
   17328:	tst	r0, #1
   1732c:	beq	17970 <__assert_fail@plt+0x616c>
   17330:	mov	r0, r8
   17334:	b	179a4 <__assert_fail@plt+0x61a0>
   17338:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1733c:	mov	r9, #0
   17340:	mov	r5, #63	; 0x3f
   17344:	cmp	r0, #5
   17348:	beq	17754 <__assert_fail@plt+0x5f50>
   1734c:	cmp	r0, #2
   17350:	bne	177f8 <__assert_fail@plt+0x5ff4>
   17354:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17358:	tst	r0, #1
   1735c:	beq	177fc <__assert_fail@plt+0x5ff8>
   17360:	b	17b88 <__assert_fail@plt+0x6384>
   17364:	mov	r0, #118	; 0x76
   17368:	b	174b0 <__assert_fail@plt+0x5cac>
   1736c:	mov	r0, #1
   17370:	mov	r5, #39	; 0x27
   17374:	str	r0, [sp, #60]	; 0x3c
   17378:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1737c:	cmp	r0, #2
   17380:	bne	173f4 <__assert_fail@plt+0x5bf0>
   17384:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17388:	tst	r0, #1
   1738c:	bne	17b88 <__assert_fail@plt+0x6384>
   17390:	ldr	r2, [sp, #56]	; 0x38
   17394:	clz	r1, sl
   17398:	mov	r9, #0
   1739c:	lsr	r1, r1, #5
   173a0:	cmp	r2, #0
   173a4:	mov	r0, r2
   173a8:	movwne	r0, #1
   173ac:	orrs	r0, r0, r1
   173b0:	moveq	r2, sl
   173b4:	moveq	sl, r0
   173b8:	cmp	r8, sl
   173bc:	str	r2, [sp, #56]	; 0x38
   173c0:	movcc	r0, #39	; 0x27
   173c4:	strbcc	r0, [r6, r8]
   173c8:	add	r0, r8, #1
   173cc:	cmp	r0, sl
   173d0:	movcc	r1, #92	; 0x5c
   173d4:	strbcc	r1, [r6, r0]
   173d8:	add	r0, r8, #2
   173dc:	add	r8, r8, #3
   173e0:	cmp	r0, sl
   173e4:	movcc	r1, #39	; 0x27
   173e8:	strbcc	r1, [r6, r0]
   173ec:	mov	r0, #0
   173f0:	str	r0, [fp, #-56]	; 0xffffffc8
   173f4:	mov	r4, #1
   173f8:	b	1725c <__assert_fail@plt+0x5a58>
   173fc:	ldr	r0, [sp, #40]	; 0x28
   17400:	cmp	r0, #1
   17404:	bne	175cc <__assert_fail@plt+0x5dc8>
   17408:	str	lr, [sp, #28]
   1740c:	bl	11624 <__ctype_b_loc@plt>
   17410:	ldr	r0, [r0]
   17414:	ldr	ip, [fp, #-84]	; 0xffffffac
   17418:	mov	r1, #1
   1741c:	add	r0, r0, r5, lsl #1
   17420:	ldrb	r0, [r0, #1]
   17424:	ubfx	r4, r0, #6, #1
   17428:	ldr	r0, [sp, #52]	; 0x34
   1742c:	mov	r2, r1
   17430:	cmp	r1, #1
   17434:	orr	r0, r4, r0
   17438:	bhi	17804 <__assert_fail@plt+0x6000>
   1743c:	tst	r0, #1
   17440:	beq	17804 <__assert_fail@plt+0x6000>
   17444:	ldr	lr, [sp, #28]
   17448:	b	1725c <__assert_fail@plt+0x5a58>
   1744c:	cmp	r7, #0
   17450:	ldrbeq	r0, [ip, #1]
   17454:	cmpeq	r0, #0
   17458:	beq	17468 <__assert_fail@plt+0x5c64>
   1745c:	mvn	lr, #0
   17460:	mov	r9, #0
   17464:	b	1725c <__assert_fail@plt+0x5a58>
   17468:	mov	r1, #1
   1746c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17470:	cmp	r0, #2
   17474:	bne	17484 <__assert_fail@plt+0x5c80>
   17478:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1747c:	tst	r0, #1
   17480:	bne	17b88 <__assert_fail@plt+0x6384>
   17484:	mov	r4, r1
   17488:	b	1725c <__assert_fail@plt+0x5a58>
   1748c:	ldr	r1, [sp, #48]	; 0x30
   17490:	mov	r9, #0
   17494:	mov	r0, #92	; 0x5c
   17498:	cmp	r1, #0
   1749c:	beq	174b0 <__assert_fail@plt+0x5cac>
   174a0:	mov	r4, #0
   174a4:	cmp	r9, #0
   174a8:	beq	17a3c <__assert_fail@plt+0x6238>
   174ac:	b	17a78 <__assert_fail@plt+0x6274>
   174b0:	ldr	r1, [sp, #84]	; 0x54
   174b4:	mov	r4, #0
   174b8:	mov	r9, #0
   174bc:	tst	r1, #1
   174c0:	bne	17500 <__assert_fail@plt+0x5cfc>
   174c4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   174c8:	cmp	r0, #0
   174cc:	mov	r0, r5
   174d0:	beq	174f4 <__assert_fail@plt+0x5cf0>
   174d4:	ldr	r1, [fp, #16]
   174d8:	ubfx	r0, r5, #5, #3
   174dc:	mov	r2, #1
   174e0:	ldr	r0, [r1, r0, lsl #2]
   174e4:	and	r1, r5, #31
   174e8:	tst	r0, r2, lsl r1
   174ec:	mov	r0, r5
   174f0:	bne	17500 <__assert_fail@plt+0x5cfc>
   174f4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   174f8:	cmp	r1, #0
   174fc:	beq	17a34 <__assert_fail@plt+0x6230>
   17500:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17504:	tst	r1, #1
   17508:	bne	17b60 <__assert_fail@plt+0x635c>
   1750c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17510:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17514:	cmp	r1, #2
   17518:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1751c:	movwne	r1, #1
   17520:	orr	r1, r1, r2
   17524:	tst	r1, #1
   17528:	beq	17534 <__assert_fail@plt+0x5d30>
   1752c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17530:	b	17570 <__assert_fail@plt+0x5d6c>
   17534:	cmp	r8, sl
   17538:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1753c:	movcc	r1, #39	; 0x27
   17540:	strbcc	r1, [r6, r8]
   17544:	add	r1, r8, #1
   17548:	cmp	r1, sl
   1754c:	movcc	r2, #36	; 0x24
   17550:	strbcc	r2, [r6, r1]
   17554:	add	r1, r8, #2
   17558:	add	r8, r8, #3
   1755c:	cmp	r1, sl
   17560:	movcc	r2, #39	; 0x27
   17564:	strbcc	r2, [r6, r1]
   17568:	mov	r1, #1
   1756c:	str	r1, [fp, #-56]	; 0xffffffc8
   17570:	cmp	r8, sl
   17574:	movcc	r1, #92	; 0x5c
   17578:	strbcc	r1, [r6, r8]
   1757c:	add	r8, r8, #1
   17580:	cmp	r8, sl
   17584:	and	r5, r5, r4
   17588:	add	r7, r7, #1
   1758c:	strbcc	r0, [r6, r8]
   17590:	add	r8, r8, #1
   17594:	cmn	lr, #1
   17598:	bne	16f94 <__assert_fail@plt+0x5790>
   1759c:	b	16fa0 <__assert_fail@plt+0x579c>
   175a0:	ldr	r0, [sp, #36]	; 0x24
   175a4:	mov	r4, #0
   175a8:	mov	r9, #0
   175ac:	mov	r5, #0
   175b0:	cmp	r0, #0
   175b4:	beq	174c4 <__assert_fail@plt+0x5cc0>
   175b8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   175bc:	add	r7, r7, #1
   175c0:	cmn	lr, #1
   175c4:	bne	16f94 <__assert_fail@plt+0x5790>
   175c8:	b	16fa0 <__assert_fail@plt+0x579c>
   175cc:	mov	r0, #0
   175d0:	cmn	lr, #1
   175d4:	str	r0, [fp, #-36]	; 0xffffffdc
   175d8:	str	r0, [fp, #-40]	; 0xffffffd8
   175dc:	bne	175f0 <__assert_fail@plt+0x5dec>
   175e0:	mov	r0, ip
   175e4:	bl	11654 <strlen@plt>
   175e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   175ec:	mov	lr, r0
   175f0:	add	r0, ip, r7
   175f4:	mov	r4, #1
   175f8:	mov	r6, #0
   175fc:	str	lr, [sp, #28]
   17600:	str	r0, [sp, #24]
   17604:	sub	r0, fp, #40	; 0x28
   17608:	mov	r3, r0
   1760c:	str	r6, [sp, #44]	; 0x2c
   17610:	add	r6, r6, r7
   17614:	sub	r0, fp, #44	; 0x2c
   17618:	add	r1, ip, r6
   1761c:	sub	r2, lr, r6
   17620:	bl	1a148 <__assert_fail@plt+0x8944>
   17624:	cmp	r0, #0
   17628:	beq	17ac0 <__assert_fail@plt+0x62bc>
   1762c:	cmn	r0, #1
   17630:	beq	17a80 <__assert_fail@plt+0x627c>
   17634:	ldr	lr, [sp, #28]
   17638:	cmn	r0, #2
   1763c:	beq	17a88 <__assert_fail@plt+0x6284>
   17640:	ldr	r2, [sp, #64]	; 0x40
   17644:	cmp	r0, #2
   17648:	mov	r1, #0
   1764c:	movwcc	r1, #1
   17650:	eor	r2, r2, #1
   17654:	orrs	r1, r2, r1
   17658:	bne	17718 <__assert_fail@plt+0x5f14>
   1765c:	ldr	r1, [sp, #44]	; 0x2c
   17660:	ldr	r2, [sp, #24]
   17664:	add	r1, r2, r1
   17668:	mov	r2, #1
   1766c:	ldrb	r3, [r1, r2]
   17670:	sub	r3, r3, #91	; 0x5b
   17674:	cmp	r3, #33	; 0x21
   17678:	bhi	1770c <__assert_fail@plt+0x5f08>
   1767c:	add	r6, pc, #0
   17680:	ldr	pc, [r6, r3, lsl #2]
   17684:	andeq	r7, r1, r0, lsl #23
   17688:	andeq	r7, r1, r0, lsl #23
   1768c:	andeq	r7, r1, ip, lsl #14
   17690:	andeq	r7, r1, r0, lsl #23
   17694:	andeq	r7, r1, ip, lsl #14
   17698:	andeq	r7, r1, r0, lsl #23
   1769c:	andeq	r7, r1, ip, lsl #14
   176a0:	andeq	r7, r1, ip, lsl #14
   176a4:	andeq	r7, r1, ip, lsl #14
   176a8:	andeq	r7, r1, ip, lsl #14
   176ac:	andeq	r7, r1, ip, lsl #14
   176b0:	andeq	r7, r1, ip, lsl #14
   176b4:	andeq	r7, r1, ip, lsl #14
   176b8:	andeq	r7, r1, ip, lsl #14
   176bc:	andeq	r7, r1, ip, lsl #14
   176c0:	andeq	r7, r1, ip, lsl #14
   176c4:	andeq	r7, r1, ip, lsl #14
   176c8:	andeq	r7, r1, ip, lsl #14
   176cc:	andeq	r7, r1, ip, lsl #14
   176d0:	andeq	r7, r1, ip, lsl #14
   176d4:	andeq	r7, r1, ip, lsl #14
   176d8:	andeq	r7, r1, ip, lsl #14
   176dc:	andeq	r7, r1, ip, lsl #14
   176e0:	andeq	r7, r1, ip, lsl #14
   176e4:	andeq	r7, r1, ip, lsl #14
   176e8:	andeq	r7, r1, ip, lsl #14
   176ec:	andeq	r7, r1, ip, lsl #14
   176f0:	andeq	r7, r1, ip, lsl #14
   176f4:	andeq	r7, r1, ip, lsl #14
   176f8:	andeq	r7, r1, ip, lsl #14
   176fc:	andeq	r7, r1, ip, lsl #14
   17700:	andeq	r7, r1, ip, lsl #14
   17704:	andeq	r7, r1, ip, lsl #14
   17708:	andeq	r7, r1, r0, lsl #23
   1770c:	add	r2, r2, #1
   17710:	cmp	r2, r0
   17714:	bcc	1766c <__assert_fail@plt+0x5e68>
   17718:	ldr	r6, [sp, #44]	; 0x2c
   1771c:	add	r6, r0, r6
   17720:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17724:	bl	11540 <iswprint@plt>
   17728:	cmp	r0, #0
   1772c:	movwne	r0, #1
   17730:	and	r4, r4, r0
   17734:	sub	r0, fp, #40	; 0x28
   17738:	bl	114c8 <mbsinit@plt>
   1773c:	ldr	lr, [sp, #28]
   17740:	ldr	ip, [fp, #-84]	; 0xffffffac
   17744:	sub	r3, fp, #40	; 0x28
   17748:	cmp	r0, #0
   1774c:	beq	1760c <__assert_fail@plt+0x5e08>
   17750:	b	17ac8 <__assert_fail@plt+0x62c4>
   17754:	ldr	r0, [sp, #32]
   17758:	cmp	r0, #0
   1775c:	beq	177f8 <__assert_fail@plt+0x5ff4>
   17760:	add	r0, r7, #2
   17764:	cmp	r0, lr
   17768:	bcs	177f8 <__assert_fail@plt+0x5ff4>
   1776c:	add	r1, ip, r7
   17770:	ldrb	r1, [r1, #1]
   17774:	cmp	r1, #63	; 0x3f
   17778:	bne	177f8 <__assert_fail@plt+0x5ff4>
   1777c:	ldrb	r5, [ip, r0]
   17780:	sub	r1, r5, #33	; 0x21
   17784:	cmp	r1, #29
   17788:	bhi	177f8 <__assert_fail@plt+0x5ff4>
   1778c:	movw	r3, #20929	; 0x51c1
   17790:	mov	r2, #1
   17794:	movt	r3, #14336	; 0x3800
   17798:	tst	r3, r2, lsl r1
   1779c:	beq	177f8 <__assert_fail@plt+0x5ff4>
   177a0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   177a4:	tst	r1, #1
   177a8:	bne	17ca0 <__assert_fail@plt+0x649c>
   177ac:	cmp	r8, sl
   177b0:	mov	r7, r0
   177b4:	mov	r4, #0
   177b8:	movcc	r1, #63	; 0x3f
   177bc:	strbcc	r1, [r6, r8]
   177c0:	add	r1, r8, #1
   177c4:	cmp	r1, sl
   177c8:	movcc	r2, #34	; 0x22
   177cc:	strbcc	r2, [r6, r1]
   177d0:	add	r1, r8, #2
   177d4:	cmp	r1, sl
   177d8:	movcc	r2, #34	; 0x22
   177dc:	strbcc	r2, [r6, r1]
   177e0:	add	r1, r8, #3
   177e4:	add	r8, r8, #4
   177e8:	cmp	r1, sl
   177ec:	movcc	r2, #63	; 0x3f
   177f0:	strbcc	r2, [r6, r1]
   177f4:	b	1725c <__assert_fail@plt+0x5a58>
   177f8:	mov	r5, #63	; 0x3f
   177fc:	mov	r4, #0
   17800:	b	1725c <__assert_fail@plt+0x5a58>
   17804:	add	r1, r2, r7
   17808:	ldr	lr, [sp, #28]
   1780c:	mov	r3, #0
   17810:	str	r1, [sp, #44]	; 0x2c
   17814:	add	r1, r7, #1
   17818:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1781c:	tst	r0, #1
   17820:	bne	178f4 <__assert_fail@plt+0x60f0>
   17824:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17828:	tst	r2, #1
   1782c:	bne	17be8 <__assert_fail@plt+0x63e4>
   17830:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17834:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17838:	cmp	r7, #2
   1783c:	movwne	r3, #1
   17840:	orr	r3, r3, r2
   17844:	tst	r3, #1
   17848:	bne	17884 <__assert_fail@plt+0x6080>
   1784c:	cmp	r8, sl
   17850:	add	r3, r8, #1
   17854:	movcc	r2, #39	; 0x27
   17858:	strbcc	r2, [r6, r8]
   1785c:	cmp	r3, sl
   17860:	movcc	r2, #36	; 0x24
   17864:	strbcc	r2, [r6, r3]
   17868:	add	r3, r8, #2
   1786c:	add	r8, r8, #3
   17870:	cmp	r3, sl
   17874:	movcc	r2, #39	; 0x27
   17878:	strbcc	r2, [r6, r3]
   1787c:	mov	r2, #1
   17880:	str	r2, [fp, #-56]	; 0xffffffc8
   17884:	cmp	r8, sl
   17888:	movcc	r3, #92	; 0x5c
   1788c:	strbcc	r3, [r6, r8]
   17890:	add	r3, r8, #1
   17894:	cmp	r3, sl
   17898:	andcc	r7, r5, #192	; 0xc0
   1789c:	movcc	r2, #48	; 0x30
   178a0:	orrcc	r7, r2, r7, lsr #6
   178a4:	strbcc	r7, [r6, r3]
   178a8:	add	r3, r8, #2
   178ac:	add	r8, r8, #3
   178b0:	cmp	r3, sl
   178b4:	lsrcc	r7, r5, #3
   178b8:	movcc	r2, #6
   178bc:	bficc	r7, r2, #3, #29
   178c0:	mov	r2, #6
   178c4:	strbcc	r7, [r6, r3]
   178c8:	bfi	r5, r2, #3, #29
   178cc:	mov	r3, #1
   178d0:	b	17918 <__assert_fail@plt+0x6114>
   178d4:	cmp	r8, sl
   178d8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   178dc:	strbcc	r5, [r6, r8]
   178e0:	add	r8, r8, #1
   178e4:	ldrb	r5, [ip, r1]
   178e8:	add	r1, r1, #1
   178ec:	tst	r0, #1
   178f0:	beq	17824 <__assert_fail@plt+0x6020>
   178f4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   178f8:	tst	r2, #1
   178fc:	beq	17910 <__assert_fail@plt+0x610c>
   17900:	cmp	r8, sl
   17904:	movcc	r7, #92	; 0x5c
   17908:	strbcc	r7, [r6, r8]
   1790c:	add	r8, r8, #1
   17910:	mov	r2, #0
   17914:	str	r2, [fp, #-52]	; 0xffffffcc
   17918:	ldr	r2, [sp, #44]	; 0x2c
   1791c:	and	r9, r3, #1
   17920:	cmp	r2, r1
   17924:	bls	17a24 <__assert_fail@plt+0x6220>
   17928:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1792c:	cmp	r9, #0
   17930:	movwne	r9, #1
   17934:	mvn	r7, r2
   17938:	orr	r7, r7, r9
   1793c:	tst	r7, #1
   17940:	bne	178d4 <__assert_fail@plt+0x60d0>
   17944:	cmp	r8, sl
   17948:	movcc	r7, #39	; 0x27
   1794c:	strbcc	r7, [r6, r8]
   17950:	add	r7, r8, #1
   17954:	add	r8, r8, #2
   17958:	cmp	r7, sl
   1795c:	movcc	r2, #39	; 0x27
   17960:	strbcc	r2, [r6, r7]
   17964:	mov	r2, #0
   17968:	str	r2, [fp, #-56]	; 0xffffffc8
   1796c:	b	178d4 <__assert_fail@plt+0x60d0>
   17970:	cmp	r8, sl
   17974:	mov	r2, #1
   17978:	movcc	r0, #39	; 0x27
   1797c:	strbcc	r0, [r6, r8]
   17980:	add	r0, r8, #1
   17984:	cmp	r0, sl
   17988:	movcc	r1, #36	; 0x24
   1798c:	strbcc	r1, [r6, r0]
   17990:	add	r0, r8, #2
   17994:	cmp	r0, sl
   17998:	movcc	r1, #39	; 0x27
   1799c:	strbcc	r1, [r6, r0]
   179a0:	add	r0, r8, #3
   179a4:	cmp	r0, sl
   179a8:	add	r8, r0, #1
   179ac:	str	r2, [fp, #-56]	; 0xffffffc8
   179b0:	movcc	r1, #92	; 0x5c
   179b4:	strbcc	r1, [r6, r0]
   179b8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   179bc:	cmp	r1, #2
   179c0:	beq	17a14 <__assert_fail@plt+0x6210>
   179c4:	add	r1, r7, #1
   179c8:	mov	r4, #0
   179cc:	mov	r9, #1
   179d0:	mov	r5, #48	; 0x30
   179d4:	cmp	r1, lr
   179d8:	bcs	1725c <__assert_fail@plt+0x5a58>
   179dc:	ldrb	r1, [ip, r1]
   179e0:	sub	r1, r1, #48	; 0x30
   179e4:	uxtb	r1, r1
   179e8:	cmp	r1, #9
   179ec:	bhi	1725c <__assert_fail@plt+0x5a58>
   179f0:	cmp	r8, sl
   179f4:	movcc	r1, #48	; 0x30
   179f8:	strbcc	r1, [r6, r8]
   179fc:	add	r1, r0, #2
   17a00:	add	r8, r0, #3
   17a04:	cmp	r1, sl
   17a08:	movcc	r2, #48	; 0x30
   17a0c:	strbcc	r2, [r6, r1]
   17a10:	b	1725c <__assert_fail@plt+0x5a58>
   17a14:	mov	r0, #48	; 0x30
   17a18:	mov	r9, #1
   17a1c:	mov	r4, #0
   17a20:	b	174f4 <__assert_fail@plt+0x5cf0>
   17a24:	cmp	r9, #0
   17a28:	sub	r7, r1, #1
   17a2c:	mov	r0, r5
   17a30:	movwne	r9, #1
   17a34:	cmp	r9, #0
   17a38:	bne	17a78 <__assert_fail@plt+0x6274>
   17a3c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17a40:	tst	r1, #1
   17a44:	beq	17a78 <__assert_fail@plt+0x6274>
   17a48:	cmp	r8, sl
   17a4c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17a50:	movcc	r1, #39	; 0x27
   17a54:	strbcc	r1, [r6, r8]
   17a58:	add	r1, r8, #1
   17a5c:	add	r8, r8, #2
   17a60:	cmp	r1, sl
   17a64:	movcc	r2, #39	; 0x27
   17a68:	strbcc	r2, [r6, r1]
   17a6c:	mov	r1, #0
   17a70:	str	r1, [fp, #-56]	; 0xffffffc8
   17a74:	b	17580 <__assert_fail@plt+0x5d7c>
   17a78:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17a7c:	b	17580 <__assert_fail@plt+0x5d7c>
   17a80:	mov	r4, #0
   17a84:	b	17ac0 <__assert_fail@plt+0x62bc>
   17a88:	mov	r4, #0
   17a8c:	cmp	lr, r6
   17a90:	bls	17ac0 <__assert_fail@plt+0x62bc>
   17a94:	ldr	ip, [fp, #-84]	; 0xffffffac
   17a98:	ldr	r6, [sp, #44]	; 0x2c
   17a9c:	ldr	r0, [sp, #24]
   17aa0:	ldrb	r0, [r0, r6]
   17aa4:	cmp	r0, #0
   17aa8:	beq	17ac8 <__assert_fail@plt+0x62c4>
   17aac:	add	r6, r6, #1
   17ab0:	add	r0, r7, r6
   17ab4:	cmp	r0, lr
   17ab8:	bcc	17a9c <__assert_fail@plt+0x6298>
   17abc:	b	17ac8 <__assert_fail@plt+0x62c4>
   17ac0:	ldr	ip, [fp, #-84]	; 0xffffffac
   17ac4:	ldr	r6, [sp, #44]	; 0x2c
   17ac8:	mov	r1, r6
   17acc:	ldr	r6, [sp, #80]	; 0x50
   17ad0:	b	17428 <__assert_fail@plt+0x5c24>
   17ad4:	mov	lr, r7
   17ad8:	b	17ae0 <__assert_fail@plt+0x62dc>
   17adc:	mvn	lr, #0
   17ae0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17ae4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17ae8:	eor	r0, r7, #2
   17aec:	orr	r0, r0, r8
   17af0:	clz	r0, r0
   17af4:	lsr	r0, r0, #5
   17af8:	tst	r1, r0
   17afc:	bne	17b88 <__assert_fail@plt+0x6384>
   17b00:	mov	r0, r1
   17b04:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17b08:	cmp	r7, #2
   17b0c:	movwne	r1, #1
   17b10:	orr	r0, r0, r1
   17b14:	tst	r0, #1
   17b18:	ldreq	r0, [sp, #60]	; 0x3c
   17b1c:	eoreq	r0, r0, #1
   17b20:	tsteq	r0, #1
   17b24:	bne	17c34 <__assert_fail@plt+0x6430>
   17b28:	mov	r9, lr
   17b2c:	tst	r5, #1
   17b30:	bne	17bf0 <__assert_fail@plt+0x63ec>
   17b34:	ldr	r6, [sp, #56]	; 0x38
   17b38:	mov	r4, #0
   17b3c:	cmp	r6, #0
   17b40:	beq	17c2c <__assert_fail@plt+0x6428>
   17b44:	ldr	r0, [sp, #84]	; 0x54
   17b48:	mov	r1, #0
   17b4c:	cmp	sl, #0
   17b50:	mov	r5, #0
   17b54:	str	r1, [fp, #-72]	; 0xffffffb8
   17b58:	beq	16d28 <__assert_fail@plt+0x5524>
   17b5c:	b	17c34 <__assert_fail@plt+0x6430>
   17b60:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17b64:	ldr	r2, [sp, #84]	; 0x54
   17b68:	b	17b90 <__assert_fail@plt+0x638c>
   17b6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17b70:	mov	r2, #1
   17b74:	mov	lr, r4
   17b78:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17b7c:	b	17b90 <__assert_fail@plt+0x638c>
   17b80:	ldr	r6, [sp, #80]	; 0x50
   17b84:	ldr	ip, [fp, #-84]	; 0xffffffac
   17b88:	ldr	r2, [sp, #84]	; 0x54
   17b8c:	mov	r7, #2
   17b90:	mov	r0, #0
   17b94:	ldr	r1, [fp, #12]
   17b98:	tst	r2, #1
   17b9c:	mov	r2, r7
   17ba0:	mov	r3, lr
   17ba4:	str	r0, [sp, #8]
   17ba8:	ldr	r0, [sp, #72]	; 0x48
   17bac:	movwne	r2, #4
   17bb0:	cmp	r7, #2
   17bb4:	movne	r2, r7
   17bb8:	str	r2, [sp]
   17bbc:	mov	r2, ip
   17bc0:	bic	r1, r1, #2
   17bc4:	str	r0, [sp, #12]
   17bc8:	ldr	r0, [sp, #76]	; 0x4c
   17bcc:	str	r1, [sp, #4]
   17bd0:	mov	r1, sl
   17bd4:	str	r0, [sp, #16]
   17bd8:	mov	r0, r6
   17bdc:	bl	16ca8 <__assert_fail@plt+0x54a4>
   17be0:	mov	r8, r0
   17be4:	b	17c8c <__assert_fail@plt+0x6488>
   17be8:	ldr	r2, [sp, #84]	; 0x54
   17bec:	b	17b90 <__assert_fail@plt+0x638c>
   17bf0:	mov	r0, #5
   17bf4:	ldr	r1, [sp, #56]	; 0x38
   17bf8:	ldr	r2, [fp, #-84]	; 0xffffffac
   17bfc:	mov	r3, r9
   17c00:	str	r0, [sp]
   17c04:	ldr	r0, [fp, #12]
   17c08:	str	r0, [sp, #4]
   17c0c:	ldr	r0, [fp, #16]
   17c10:	str	r0, [sp, #8]
   17c14:	ldr	r0, [sp, #72]	; 0x48
   17c18:	str	r0, [sp, #12]
   17c1c:	ldr	r0, [sp, #76]	; 0x4c
   17c20:	str	r0, [sp, #16]
   17c24:	ldr	r0, [sp, #80]	; 0x50
   17c28:	b	17bdc <__assert_fail@plt+0x63d8>
   17c2c:	mov	r0, #0
   17c30:	str	r0, [fp, #-72]	; 0xffffffb8
   17c34:	ldr	r1, [sp, #92]	; 0x5c
   17c38:	cmp	r1, #0
   17c3c:	beq	17c7c <__assert_fail@plt+0x6478>
   17c40:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17c44:	ldr	r2, [sp, #80]	; 0x50
   17c48:	tst	r0, #1
   17c4c:	bne	17c80 <__assert_fail@plt+0x647c>
   17c50:	ldrb	r0, [r1]
   17c54:	cmp	r0, #0
   17c58:	beq	17c80 <__assert_fail@plt+0x647c>
   17c5c:	add	r1, r1, #1
   17c60:	cmp	r8, sl
   17c64:	strbcc	r0, [r2, r8]
   17c68:	add	r8, r8, #1
   17c6c:	ldrb	r0, [r1], #1
   17c70:	cmp	r0, #0
   17c74:	bne	17c60 <__assert_fail@plt+0x645c>
   17c78:	b	17c80 <__assert_fail@plt+0x647c>
   17c7c:	ldr	r2, [sp, #80]	; 0x50
   17c80:	cmp	r8, sl
   17c84:	movcc	r0, #0
   17c88:	strbcc	r0, [r2, r8]
   17c8c:	mov	r0, r8
   17c90:	sub	sp, fp, #28
   17c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c98:	mov	r2, #1
   17c9c:	b	17b78 <__assert_fail@plt+0x6374>
   17ca0:	ldr	r2, [sp, #84]	; 0x54
   17ca4:	mov	r7, #5
   17ca8:	b	17b90 <__assert_fail@plt+0x638c>
   17cac:	bl	117d4 <abort@plt>
   17cb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cb4:	add	fp, sp, #28
   17cb8:	sub	sp, sp, #28
   17cbc:	movw	r5, #53944	; 0xd2b8
   17cc0:	cmp	r2, #0
   17cc4:	mov	r4, r1
   17cc8:	mov	r7, r0
   17ccc:	str	r0, [sp, #20]
   17cd0:	movt	r5, #2
   17cd4:	movne	r5, r2
   17cd8:	bl	11684 <__errno_location@plt>
   17cdc:	mov	sl, r0
   17ce0:	ldm	r5, {r0, r1}
   17ce4:	ldr	r2, [r5, #40]	; 0x28
   17ce8:	ldr	r3, [r5, #44]	; 0x2c
   17cec:	add	r9, r5, #8
   17cf0:	ldr	r6, [sl]
   17cf4:	orr	r8, r1, #1
   17cf8:	mov	r1, #0
   17cfc:	str	r6, [sp, #24]
   17d00:	stm	sp, {r0, r8, r9}
   17d04:	str	r2, [sp, #12]
   17d08:	str	r3, [sp, #16]
   17d0c:	mov	r0, #0
   17d10:	mov	r2, r7
   17d14:	mov	r3, r4
   17d18:	mov	r6, r4
   17d1c:	bl	16ca8 <__assert_fail@plt+0x54a4>
   17d20:	add	r7, r0, #1
   17d24:	mov	r0, r7
   17d28:	bl	18fe8 <__assert_fail@plt+0x77e4>
   17d2c:	mov	r4, r0
   17d30:	ldr	r0, [r5]
   17d34:	ldr	r2, [r5, #44]	; 0x2c
   17d38:	ldr	r1, [r5, #40]	; 0x28
   17d3c:	mov	r3, r6
   17d40:	stm	sp, {r0, r8, r9}
   17d44:	str	r2, [sp, #16]
   17d48:	str	r1, [sp, #12]
   17d4c:	mov	r0, r4
   17d50:	mov	r1, r7
   17d54:	ldr	r2, [sp, #20]
   17d58:	bl	16ca8 <__assert_fail@plt+0x54a4>
   17d5c:	ldr	r0, [sp, #24]
   17d60:	str	r0, [sl]
   17d64:	mov	r0, r4
   17d68:	sub	sp, fp, #28
   17d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d74:	add	fp, sp, #28
   17d78:	sub	sp, sp, #36	; 0x24
   17d7c:	movw	r8, #53944	; 0xd2b8
   17d80:	cmp	r3, #0
   17d84:	mov	r4, r2
   17d88:	str	r2, [sp, #24]
   17d8c:	mov	r5, r1
   17d90:	mov	r6, r0
   17d94:	str	r0, [sp, #20]
   17d98:	movt	r8, #2
   17d9c:	movne	r8, r3
   17da0:	bl	11684 <__errno_location@plt>
   17da4:	str	r0, [sp, #28]
   17da8:	cmp	r4, #0
   17dac:	add	sl, r8, #8
   17db0:	ldm	r8, {r3, r9}
   17db4:	ldr	r7, [r0]
   17db8:	ldr	r1, [r8, #40]	; 0x28
   17dbc:	ldr	r2, [r8, #44]	; 0x2c
   17dc0:	mov	r0, #0
   17dc4:	orreq	r9, r9, #1
   17dc8:	str	r7, [sp, #32]
   17dcc:	mov	r7, r5
   17dd0:	stm	sp, {r3, r9, sl}
   17dd4:	str	r1, [sp, #12]
   17dd8:	str	r2, [sp, #16]
   17ddc:	mov	r1, #0
   17de0:	mov	r2, r6
   17de4:	mov	r3, r5
   17de8:	bl	16ca8 <__assert_fail@plt+0x54a4>
   17dec:	add	r4, r0, #1
   17df0:	mov	r5, r0
   17df4:	mov	r0, r4
   17df8:	bl	18fe8 <__assert_fail@plt+0x77e4>
   17dfc:	mov	r6, r0
   17e00:	ldr	r0, [r8]
   17e04:	ldr	r2, [r8, #44]	; 0x2c
   17e08:	ldr	r1, [r8, #40]	; 0x28
   17e0c:	mov	r3, r7
   17e10:	stm	sp, {r0, r9, sl}
   17e14:	str	r2, [sp, #16]
   17e18:	str	r1, [sp, #12]
   17e1c:	mov	r0, r6
   17e20:	mov	r1, r4
   17e24:	ldr	r2, [sp, #20]
   17e28:	bl	16ca8 <__assert_fail@plt+0x54a4>
   17e2c:	ldr	r0, [sp, #24]
   17e30:	ldr	r1, [sp, #32]
   17e34:	ldr	r2, [sp, #28]
   17e38:	cmp	r0, #0
   17e3c:	str	r1, [r2]
   17e40:	strne	r5, [r0]
   17e44:	mov	r0, r6
   17e48:	sub	sp, fp, #28
   17e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17e54:	add	fp, sp, #24
   17e58:	movw	r5, #53628	; 0xd17c
   17e5c:	movw	r8, #53624	; 0xd178
   17e60:	movt	r5, #2
   17e64:	movt	r8, #2
   17e68:	ldr	r0, [r5]
   17e6c:	ldr	r4, [r8]
   17e70:	cmp	r0, #2
   17e74:	blt	17ea0 <__assert_fail@plt+0x669c>
   17e78:	add	r7, r4, #12
   17e7c:	mov	r6, #0
   17e80:	ldr	r0, [r7, r6, lsl #3]
   17e84:	bl	1a04c <__assert_fail@plt+0x8848>
   17e88:	ldr	r1, [r5]
   17e8c:	add	r2, r6, #2
   17e90:	add	r0, r6, #1
   17e94:	mov	r6, r0
   17e98:	cmp	r2, r1
   17e9c:	blt	17e80 <__assert_fail@plt+0x667c>
   17ea0:	ldr	r0, [r4, #4]
   17ea4:	movw	r7, #53992	; 0xd2e8
   17ea8:	movt	r7, #2
   17eac:	cmp	r0, r7
   17eb0:	beq	17ec8 <__assert_fail@plt+0x66c4>
   17eb4:	bl	1a04c <__assert_fail@plt+0x8848>
   17eb8:	movw	r0, #53632	; 0xd180
   17ebc:	mov	r6, #256	; 0x100
   17ec0:	movt	r0, #2
   17ec4:	strd	r6, [r0]
   17ec8:	movw	r6, #53632	; 0xd180
   17ecc:	movt	r6, #2
   17ed0:	cmp	r4, r6
   17ed4:	beq	17ee4 <__assert_fail@plt+0x66e0>
   17ed8:	mov	r0, r4
   17edc:	bl	1a04c <__assert_fail@plt+0x8848>
   17ee0:	str	r6, [r8]
   17ee4:	mov	r0, #1
   17ee8:	str	r0, [r5]
   17eec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ef0:	movw	r3, #53944	; 0xd2b8
   17ef4:	mvn	r2, #0
   17ef8:	movt	r3, #2
   17efc:	b	17f00 <__assert_fail@plt+0x66fc>
   17f00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f04:	add	fp, sp, #28
   17f08:	sub	sp, sp, #44	; 0x2c
   17f0c:	mov	r7, r3
   17f10:	str	r2, [sp, #36]	; 0x24
   17f14:	str	r1, [sp, #32]
   17f18:	mov	r5, r0
   17f1c:	bl	11684 <__errno_location@plt>
   17f20:	cmp	r5, #0
   17f24:	blt	18090 <__assert_fail@plt+0x688c>
   17f28:	cmn	r5, #-2147483647	; 0x80000001
   17f2c:	beq	18090 <__assert_fail@plt+0x688c>
   17f30:	movw	r8, #53628	; 0xd17c
   17f34:	movw	r4, #53624	; 0xd178
   17f38:	str	r0, [sp, #28]
   17f3c:	ldr	r0, [r0]
   17f40:	movt	r8, #2
   17f44:	movt	r4, #2
   17f48:	ldr	r1, [r8]
   17f4c:	ldr	r6, [r4]
   17f50:	str	r0, [sp, #24]
   17f54:	cmp	r1, r5
   17f58:	ble	17f64 <__assert_fail@plt+0x6760>
   17f5c:	mov	sl, r6
   17f60:	b	17fcc <__assert_fail@plt+0x67c8>
   17f64:	movw	r9, #53632	; 0xd180
   17f68:	mov	r0, #8
   17f6c:	add	r2, r5, #1
   17f70:	str	r1, [fp, #-32]	; 0xffffffe0
   17f74:	mvn	r3, #-2147483648	; 0x80000000
   17f78:	movt	r9, #2
   17f7c:	str	r0, [sp]
   17f80:	sub	r2, r2, r1
   17f84:	sub	r1, fp, #32
   17f88:	subs	r0, r6, r9
   17f8c:	movne	r0, r6
   17f90:	bl	191e8 <__assert_fail@plt+0x79e4>
   17f94:	cmp	r6, r9
   17f98:	mov	sl, r0
   17f9c:	str	r0, [r4]
   17fa0:	ldrdeq	r0, [r9]
   17fa4:	stmeq	sl, {r0, r1}
   17fa8:	ldr	r1, [r8]
   17fac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17fb0:	add	r0, sl, r1, lsl #3
   17fb4:	sub	r1, r2, r1
   17fb8:	lsl	r2, r1, #3
   17fbc:	mov	r1, #0
   17fc0:	bl	116a8 <memset@plt>
   17fc4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17fc8:	str	r0, [r8]
   17fcc:	mov	r9, sl
   17fd0:	ldr	r6, [r9, r5, lsl #3]!
   17fd4:	ldr	r4, [r9, #4]!
   17fd8:	ldm	r7, {r0, r1}
   17fdc:	ldr	r2, [r7, #40]	; 0x28
   17fe0:	ldr	r3, [r7, #44]	; 0x2c
   17fe4:	orr	r8, r1, #1
   17fe8:	add	r1, r7, #8
   17fec:	stm	sp, {r0, r8}
   17ff0:	add	r0, sp, #8
   17ff4:	str	r1, [sp, #20]
   17ff8:	stm	r0, {r1, r2, r3}
   17ffc:	mov	r0, r4
   18000:	mov	r1, r6
   18004:	ldr	r2, [sp, #32]
   18008:	ldr	r3, [sp, #36]	; 0x24
   1800c:	bl	16ca8 <__assert_fail@plt+0x54a4>
   18010:	cmp	r6, r0
   18014:	bhi	18078 <__assert_fail@plt+0x6874>
   18018:	add	r6, r0, #1
   1801c:	movw	r0, #53992	; 0xd2e8
   18020:	movt	r0, #2
   18024:	str	r6, [sl, r5, lsl #3]
   18028:	cmp	r4, r0
   1802c:	beq	18038 <__assert_fail@plt+0x6834>
   18030:	mov	r0, r4
   18034:	bl	1a04c <__assert_fail@plt+0x8848>
   18038:	mov	r0, r6
   1803c:	bl	18fe8 <__assert_fail@plt+0x77e4>
   18040:	str	r0, [r9]
   18044:	mov	r4, r0
   18048:	add	r3, sp, #8
   1804c:	ldr	r0, [r7]
   18050:	ldr	r1, [r7, #40]	; 0x28
   18054:	ldr	r2, [r7, #44]	; 0x2c
   18058:	stm	sp, {r0, r8}
   1805c:	ldr	r0, [sp, #20]
   18060:	stm	r3, {r0, r1, r2}
   18064:	mov	r0, r4
   18068:	mov	r1, r6
   1806c:	ldr	r2, [sp, #32]
   18070:	ldr	r3, [sp, #36]	; 0x24
   18074:	bl	16ca8 <__assert_fail@plt+0x54a4>
   18078:	ldr	r0, [sp, #28]
   1807c:	ldr	r1, [sp, #24]
   18080:	str	r1, [r0]
   18084:	mov	r0, r4
   18088:	sub	sp, fp, #28
   1808c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18090:	bl	117d4 <abort@plt>
   18094:	movw	r3, #53944	; 0xd2b8
   18098:	movt	r3, #2
   1809c:	b	17f00 <__assert_fail@plt+0x66fc>
   180a0:	movw	r3, #53944	; 0xd2b8
   180a4:	mov	r1, r0
   180a8:	mov	r0, #0
   180ac:	mvn	r2, #0
   180b0:	movt	r3, #2
   180b4:	b	17f00 <__assert_fail@plt+0x66fc>
   180b8:	movw	r3, #53944	; 0xd2b8
   180bc:	mov	r2, r1
   180c0:	mov	r1, r0
   180c4:	mov	r0, #0
   180c8:	movt	r3, #2
   180cc:	b	17f00 <__assert_fail@plt+0x66fc>
   180d0:	push	{fp, lr}
   180d4:	mov	fp, sp
   180d8:	sub	sp, sp, #48	; 0x30
   180dc:	vmov.i32	q8, #0	; 0x00000000
   180e0:	mov	ip, #32
   180e4:	mov	r3, sp
   180e8:	mov	lr, r2
   180ec:	cmp	r1, #10
   180f0:	add	r2, r3, #16
   180f4:	vst1.64	{d16-d17}, [r3], ip
   180f8:	vst1.64	{d16-d17}, [r3]
   180fc:	vst1.64	{d16-d17}, [r2]
   18100:	beq	18120 <__assert_fail@plt+0x691c>
   18104:	str	r1, [sp]
   18108:	mov	r3, sp
   1810c:	mov	r1, lr
   18110:	mvn	r2, #0
   18114:	bl	17f00 <__assert_fail@plt+0x66fc>
   18118:	mov	sp, fp
   1811c:	pop	{fp, pc}
   18120:	bl	117d4 <abort@plt>
   18124:	push	{r4, sl, fp, lr}
   18128:	add	fp, sp, #8
   1812c:	sub	sp, sp, #48	; 0x30
   18130:	mov	ip, r3
   18134:	mov	r3, sp
   18138:	vmov.i32	q8, #0	; 0x00000000
   1813c:	mov	lr, #32
   18140:	cmp	r1, #10
   18144:	add	r4, r3, #16
   18148:	vst1.64	{d16-d17}, [r3], lr
   1814c:	vst1.64	{d16-d17}, [r3]
   18150:	vst1.64	{d16-d17}, [r4]
   18154:	beq	18174 <__assert_fail@plt+0x6970>
   18158:	str	r1, [sp]
   1815c:	mov	r1, r2
   18160:	mov	r3, sp
   18164:	mov	r2, ip
   18168:	bl	17f00 <__assert_fail@plt+0x66fc>
   1816c:	sub	sp, fp, #8
   18170:	pop	{r4, sl, fp, pc}
   18174:	bl	117d4 <abort@plt>
   18178:	push	{fp, lr}
   1817c:	mov	fp, sp
   18180:	sub	sp, sp, #48	; 0x30
   18184:	mov	r3, sp
   18188:	vmov.i32	q8, #0	; 0x00000000
   1818c:	mov	ip, #32
   18190:	cmp	r0, #10
   18194:	add	r2, r3, #16
   18198:	vst1.64	{d16-d17}, [r3], ip
   1819c:	vst1.64	{d16-d17}, [r3]
   181a0:	vst1.64	{d16-d17}, [r2]
   181a4:	beq	181c4 <__assert_fail@plt+0x69c0>
   181a8:	str	r0, [sp]
   181ac:	mov	r3, sp
   181b0:	mov	r0, #0
   181b4:	mvn	r2, #0
   181b8:	bl	17f00 <__assert_fail@plt+0x66fc>
   181bc:	mov	sp, fp
   181c0:	pop	{fp, pc}
   181c4:	bl	117d4 <abort@plt>
   181c8:	push	{fp, lr}
   181cc:	mov	fp, sp
   181d0:	sub	sp, sp, #48	; 0x30
   181d4:	mov	r3, sp
   181d8:	vmov.i32	q8, #0	; 0x00000000
   181dc:	mov	ip, #32
   181e0:	cmp	r0, #10
   181e4:	add	lr, r3, #16
   181e8:	vst1.64	{d16-d17}, [r3], ip
   181ec:	vst1.64	{d16-d17}, [r3]
   181f0:	vst1.64	{d16-d17}, [lr]
   181f4:	beq	18210 <__assert_fail@plt+0x6a0c>
   181f8:	str	r0, [sp]
   181fc:	mov	r3, sp
   18200:	mov	r0, #0
   18204:	bl	17f00 <__assert_fail@plt+0x66fc>
   18208:	mov	sp, fp
   1820c:	pop	{fp, pc}
   18210:	bl	117d4 <abort@plt>
   18214:	push	{r4, sl, fp, lr}
   18218:	add	fp, sp, #8
   1821c:	sub	sp, sp, #48	; 0x30
   18220:	mov	lr, r0
   18224:	movw	r0, #53944	; 0xd2b8
   18228:	mov	r3, #32
   1822c:	mov	ip, r1
   18230:	mov	r4, #1
   18234:	movt	r0, #2
   18238:	add	r1, r0, #16
   1823c:	vld1.64	{d16-d17}, [r0], r3
   18240:	mov	r3, sp
   18244:	vld1.64	{d18-d19}, [r1]
   18248:	add	r1, r3, #16
   1824c:	vld1.64	{d20-d21}, [r0]
   18250:	add	r0, r3, #32
   18254:	vst1.64	{d18-d19}, [r1]
   18258:	mov	r1, r3
   1825c:	vst1.64	{d20-d21}, [r0]
   18260:	mov	r0, #28
   18264:	and	r0, r0, r2, lsr #3
   18268:	and	r2, r2, #31
   1826c:	vst1.64	{d16-d17}, [r1], r0
   18270:	ldr	r0, [r1, #8]
   18274:	bic	r4, r4, r0, lsr r2
   18278:	eor	r0, r0, r4, lsl r2
   1827c:	mov	r2, ip
   18280:	str	r0, [r1, #8]
   18284:	mov	r0, #0
   18288:	mov	r1, lr
   1828c:	bl	17f00 <__assert_fail@plt+0x66fc>
   18290:	sub	sp, fp, #8
   18294:	pop	{r4, sl, fp, pc}
   18298:	push	{fp, lr}
   1829c:	mov	fp, sp
   182a0:	sub	sp, sp, #48	; 0x30
   182a4:	mov	ip, r0
   182a8:	movw	r0, #53944	; 0xd2b8
   182ac:	mov	r3, #32
   182b0:	movt	r0, #2
   182b4:	add	r2, r0, #16
   182b8:	vld1.64	{d16-d17}, [r0], r3
   182bc:	mov	r3, sp
   182c0:	vld1.64	{d18-d19}, [r2]
   182c4:	add	r2, r3, #16
   182c8:	vld1.64	{d20-d21}, [r0]
   182cc:	add	r0, r3, #32
   182d0:	vst1.64	{d18-d19}, [r2]
   182d4:	mov	r2, r3
   182d8:	vst1.64	{d20-d21}, [r0]
   182dc:	mov	r0, #28
   182e0:	and	r0, r0, r1, lsr #3
   182e4:	and	r1, r1, #31
   182e8:	vst1.64	{d16-d17}, [r2], r0
   182ec:	mov	r0, #1
   182f0:	ldr	lr, [r2, #8]
   182f4:	bic	r0, r0, lr, lsr r1
   182f8:	eor	r0, lr, r0, lsl r1
   182fc:	mov	r1, ip
   18300:	str	r0, [r2, #8]
   18304:	mov	r0, #0
   18308:	mvn	r2, #0
   1830c:	bl	17f00 <__assert_fail@plt+0x66fc>
   18310:	mov	sp, fp
   18314:	pop	{fp, pc}
   18318:	push	{fp, lr}
   1831c:	mov	fp, sp
   18320:	sub	sp, sp, #48	; 0x30
   18324:	movw	r2, #53944	; 0xd2b8
   18328:	mov	r3, #32
   1832c:	mov	r1, r0
   18330:	movt	r2, #2
   18334:	add	r0, r2, #16
   18338:	vld1.64	{d16-d17}, [r2], r3
   1833c:	mov	r3, sp
   18340:	vld1.64	{d18-d19}, [r0]
   18344:	add	r0, r3, #16
   18348:	vld1.64	{d20-d21}, [r2]
   1834c:	mov	r2, r3
   18350:	vst1.64	{d18-d19}, [r0]
   18354:	add	r0, r3, #32
   18358:	vst1.64	{d20-d21}, [r0]
   1835c:	mov	r0, #12
   18360:	vst1.64	{d16-d17}, [r2], r0
   18364:	ldr	r0, [r2]
   18368:	orr	r0, r0, #67108864	; 0x4000000
   1836c:	str	r0, [r2]
   18370:	mov	r0, #0
   18374:	mvn	r2, #0
   18378:	bl	17f00 <__assert_fail@plt+0x66fc>
   1837c:	mov	sp, fp
   18380:	pop	{fp, pc}
   18384:	push	{fp, lr}
   18388:	mov	fp, sp
   1838c:	sub	sp, sp, #48	; 0x30
   18390:	mov	ip, r1
   18394:	mov	r1, r0
   18398:	movw	r0, #53944	; 0xd2b8
   1839c:	mov	r3, #32
   183a0:	movt	r0, #2
   183a4:	add	r2, r0, #16
   183a8:	vld1.64	{d16-d17}, [r0], r3
   183ac:	mov	r3, sp
   183b0:	vld1.64	{d18-d19}, [r2]
   183b4:	add	r2, r3, #16
   183b8:	vld1.64	{d20-d21}, [r0]
   183bc:	add	r0, r3, #32
   183c0:	vst1.64	{d18-d19}, [r2]
   183c4:	mov	r2, r3
   183c8:	vst1.64	{d20-d21}, [r0]
   183cc:	mov	r0, #12
   183d0:	vst1.64	{d16-d17}, [r2], r0
   183d4:	ldr	r0, [r2]
   183d8:	orr	r0, r0, #67108864	; 0x4000000
   183dc:	str	r0, [r2]
   183e0:	mov	r0, #0
   183e4:	mov	r2, ip
   183e8:	bl	17f00 <__assert_fail@plt+0x66fc>
   183ec:	mov	sp, fp
   183f0:	pop	{fp, pc}
   183f4:	push	{r4, sl, fp, lr}
   183f8:	add	fp, sp, #8
   183fc:	sub	sp, sp, #96	; 0x60
   18400:	mov	ip, r2
   18404:	mov	r2, sp
   18408:	vmov.i32	q8, #0	; 0x00000000
   1840c:	mov	r4, #28
   18410:	cmp	r1, #10
   18414:	mov	r3, r2
   18418:	add	lr, r2, #16
   1841c:	vst1.64	{d16-d17}, [r3], r4
   18420:	vst1.64	{d16-d17}, [lr]
   18424:	vst1.32	{d16-d17}, [r3]
   18428:	beq	18478 <__assert_fail@plt+0x6c74>
   1842c:	vld1.64	{d16-d17}, [r2], r4
   18430:	vld1.64	{d18-d19}, [lr]
   18434:	add	r3, sp, #48	; 0x30
   18438:	add	r4, r3, #4
   1843c:	vld1.32	{d20-d21}, [r2]
   18440:	add	r2, r3, #20
   18444:	vst1.32	{d16-d17}, [r4]
   18448:	vst1.32	{d18-d19}, [r2]
   1844c:	add	r2, r3, #32
   18450:	vst1.32	{d20-d21}, [r2]
   18454:	str	r1, [sp, #48]	; 0x30
   18458:	mvn	r2, #0
   1845c:	ldr	r1, [sp, #60]	; 0x3c
   18460:	orr	r1, r1, #67108864	; 0x4000000
   18464:	str	r1, [sp, #60]	; 0x3c
   18468:	mov	r1, ip
   1846c:	bl	17f00 <__assert_fail@plt+0x66fc>
   18470:	sub	sp, fp, #8
   18474:	pop	{r4, sl, fp, pc}
   18478:	bl	117d4 <abort@plt>
   1847c:	push	{r4, r5, fp, lr}
   18480:	add	fp, sp, #8
   18484:	sub	sp, sp, #48	; 0x30
   18488:	mov	ip, r3
   1848c:	movw	r3, #53944	; 0xd2b8
   18490:	mov	lr, #32
   18494:	cmp	r1, #0
   18498:	mov	r5, sp
   1849c:	movt	r3, #2
   184a0:	cmpne	r2, #0
   184a4:	add	r4, r3, #16
   184a8:	vld1.64	{d16-d17}, [r3], lr
   184ac:	vld1.64	{d18-d19}, [r4]
   184b0:	add	r4, r5, #16
   184b4:	vld1.64	{d20-d21}, [r3]
   184b8:	vst1.64	{d16-d17}, [r5], lr
   184bc:	mov	r3, #10
   184c0:	vst1.64	{d18-d19}, [r4]
   184c4:	vst1.64	{d20-d21}, [r5]
   184c8:	str	r3, [sp]
   184cc:	bne	184d4 <__assert_fail@plt+0x6cd0>
   184d0:	bl	117d4 <abort@plt>
   184d4:	str	r2, [sp, #44]	; 0x2c
   184d8:	str	r1, [sp, #40]	; 0x28
   184dc:	mov	r3, sp
   184e0:	mov	r1, ip
   184e4:	mvn	r2, #0
   184e8:	bl	17f00 <__assert_fail@plt+0x66fc>
   184ec:	sub	sp, fp, #8
   184f0:	pop	{r4, r5, fp, pc}
   184f4:	push	{r4, r5, fp, lr}
   184f8:	add	fp, sp, #8
   184fc:	sub	sp, sp, #48	; 0x30
   18500:	mov	lr, r3
   18504:	movw	r3, #53944	; 0xd2b8
   18508:	mov	ip, #32
   1850c:	cmp	r1, #0
   18510:	mov	r5, sp
   18514:	movt	r3, #2
   18518:	cmpne	r2, #0
   1851c:	add	r4, r3, #16
   18520:	vld1.64	{d16-d17}, [r3], ip
   18524:	vld1.64	{d18-d19}, [r4]
   18528:	add	r4, r5, #16
   1852c:	vld1.64	{d20-d21}, [r3]
   18530:	vst1.64	{d16-d17}, [r5], ip
   18534:	mov	r3, #10
   18538:	vst1.64	{d18-d19}, [r4]
   1853c:	vst1.64	{d20-d21}, [r5]
   18540:	str	r3, [sp]
   18544:	bne	1854c <__assert_fail@plt+0x6d48>
   18548:	bl	117d4 <abort@plt>
   1854c:	ldr	ip, [fp, #8]
   18550:	str	r2, [sp, #44]	; 0x2c
   18554:	str	r1, [sp, #40]	; 0x28
   18558:	mov	r3, sp
   1855c:	mov	r1, lr
   18560:	mov	r2, ip
   18564:	bl	17f00 <__assert_fail@plt+0x66fc>
   18568:	sub	sp, fp, #8
   1856c:	pop	{r4, r5, fp, pc}
   18570:	push	{r4, sl, fp, lr}
   18574:	add	fp, sp, #8
   18578:	sub	sp, sp, #48	; 0x30
   1857c:	mov	ip, r2
   18580:	movw	r2, #53944	; 0xd2b8
   18584:	mov	lr, #32
   18588:	cmp	r0, #0
   1858c:	mov	r4, sp
   18590:	movt	r2, #2
   18594:	cmpne	r1, #0
   18598:	add	r3, r2, #16
   1859c:	vld1.64	{d16-d17}, [r2], lr
   185a0:	vld1.64	{d18-d19}, [r3]
   185a4:	add	r3, r4, #16
   185a8:	vld1.64	{d20-d21}, [r2]
   185ac:	vst1.64	{d16-d17}, [r4], lr
   185b0:	mov	r2, #10
   185b4:	vst1.64	{d18-d19}, [r3]
   185b8:	vst1.64	{d20-d21}, [r4]
   185bc:	str	r2, [sp]
   185c0:	bne	185c8 <__assert_fail@plt+0x6dc4>
   185c4:	bl	117d4 <abort@plt>
   185c8:	str	r1, [sp, #44]	; 0x2c
   185cc:	str	r0, [sp, #40]	; 0x28
   185d0:	mov	r3, sp
   185d4:	mov	r0, #0
   185d8:	mov	r1, ip
   185dc:	mvn	r2, #0
   185e0:	bl	17f00 <__assert_fail@plt+0x66fc>
   185e4:	sub	sp, fp, #8
   185e8:	pop	{r4, sl, fp, pc}
   185ec:	push	{r4, r5, fp, lr}
   185f0:	add	fp, sp, #8
   185f4:	sub	sp, sp, #48	; 0x30
   185f8:	mov	lr, r2
   185fc:	movw	r2, #53944	; 0xd2b8
   18600:	mov	ip, r3
   18604:	mov	r3, #32
   18608:	cmp	r0, #0
   1860c:	mov	r5, sp
   18610:	movt	r2, #2
   18614:	cmpne	r1, #0
   18618:	add	r4, r2, #16
   1861c:	vld1.64	{d16-d17}, [r2], r3
   18620:	vld1.64	{d18-d19}, [r4]
   18624:	add	r4, r5, #16
   18628:	vld1.64	{d20-d21}, [r2]
   1862c:	vst1.64	{d16-d17}, [r5], r3
   18630:	mov	r2, #10
   18634:	vst1.64	{d18-d19}, [r4]
   18638:	vst1.64	{d20-d21}, [r5]
   1863c:	str	r2, [sp]
   18640:	bne	18648 <__assert_fail@plt+0x6e44>
   18644:	bl	117d4 <abort@plt>
   18648:	str	r1, [sp, #44]	; 0x2c
   1864c:	str	r0, [sp, #40]	; 0x28
   18650:	mov	r3, sp
   18654:	mov	r0, #0
   18658:	mov	r1, lr
   1865c:	mov	r2, ip
   18660:	bl	17f00 <__assert_fail@plt+0x66fc>
   18664:	sub	sp, fp, #8
   18668:	pop	{r4, r5, fp, pc}
   1866c:	movw	r3, #53640	; 0xd188
   18670:	movt	r3, #2
   18674:	b	17f00 <__assert_fail@plt+0x66fc>
   18678:	movw	r3, #53640	; 0xd188
   1867c:	mov	r2, r1
   18680:	mov	r1, r0
   18684:	mov	r0, #0
   18688:	movt	r3, #2
   1868c:	b	17f00 <__assert_fail@plt+0x66fc>
   18690:	movw	r3, #53640	; 0xd188
   18694:	mvn	r2, #0
   18698:	movt	r3, #2
   1869c:	b	17f00 <__assert_fail@plt+0x66fc>
   186a0:	movw	r3, #53640	; 0xd188
   186a4:	mov	r1, r0
   186a8:	mov	r0, #0
   186ac:	mvn	r2, #0
   186b0:	movt	r3, #2
   186b4:	b	17f00 <__assert_fail@plt+0x66fc>
   186b8:	push	{r4, r5, fp, lr}
   186bc:	add	fp, sp, #8
   186c0:	mov	r5, r0
   186c4:	mov	r4, r1
   186c8:	mov	r0, #0
   186cc:	mov	r2, #5
   186d0:	mov	r1, r5
   186d4:	bl	114ec <dcgettext@plt>
   186d8:	cmp	r0, r5
   186dc:	popne	{r4, r5, fp, pc}
   186e0:	bl	1a324 <__assert_fail@plt+0x8b20>
   186e4:	ldrb	r1, [r0]
   186e8:	and	r1, r1, #223	; 0xdf
   186ec:	cmp	r1, #71	; 0x47
   186f0:	beq	18758 <__assert_fail@plt+0x6f54>
   186f4:	cmp	r1, #85	; 0x55
   186f8:	bne	1877c <__assert_fail@plt+0x6f78>
   186fc:	ldrb	r1, [r0, #1]
   18700:	and	r1, r1, #223	; 0xdf
   18704:	cmp	r1, #84	; 0x54
   18708:	bne	1877c <__assert_fail@plt+0x6f78>
   1870c:	ldrb	r1, [r0, #2]
   18710:	and	r1, r1, #223	; 0xdf
   18714:	cmp	r1, #70	; 0x46
   18718:	ldrbeq	r1, [r0, #3]
   1871c:	cmpeq	r1, #45	; 0x2d
   18720:	bne	1877c <__assert_fail@plt+0x6f78>
   18724:	ldrb	r1, [r0, #4]
   18728:	cmp	r1, #56	; 0x38
   1872c:	ldrbeq	r0, [r0, #5]
   18730:	cmpeq	r0, #0
   18734:	bne	1877c <__assert_fail@plt+0x6f78>
   18738:	ldrb	r1, [r5]
   1873c:	movw	r2, #50945	; 0xc701
   18740:	movw	r0, #50949	; 0xc705
   18744:	movt	r2, #1
   18748:	movt	r0, #1
   1874c:	cmp	r1, #96	; 0x60
   18750:	moveq	r0, r2
   18754:	pop	{r4, r5, fp, pc}
   18758:	ldrb	r1, [r0, #1]
   1875c:	and	r1, r1, #223	; 0xdf
   18760:	cmp	r1, #66	; 0x42
   18764:	bne	1877c <__assert_fail@plt+0x6f78>
   18768:	ldrb	r1, [r0, #2]
   1876c:	cmp	r1, #49	; 0x31
   18770:	ldrbeq	r1, [r0, #3]
   18774:	cmpeq	r1, #56	; 0x38
   18778:	beq	18798 <__assert_fail@plt+0x6f94>
   1877c:	movw	r1, #50941	; 0xc6fd
   18780:	movw	r0, #50777	; 0xc659
   18784:	cmp	r4, #9
   18788:	movt	r1, #1
   1878c:	movt	r0, #1
   18790:	moveq	r0, r1
   18794:	pop	{r4, r5, fp, pc}
   18798:	ldrb	r1, [r0, #4]
   1879c:	cmp	r1, #48	; 0x30
   187a0:	ldrbeq	r1, [r0, #5]
   187a4:	cmpeq	r1, #51	; 0x33
   187a8:	bne	1877c <__assert_fail@plt+0x6f78>
   187ac:	ldrb	r1, [r0, #6]
   187b0:	cmp	r1, #48	; 0x30
   187b4:	ldrbeq	r0, [r0, #7]
   187b8:	cmpeq	r0, #0
   187bc:	bne	1877c <__assert_fail@plt+0x6f78>
   187c0:	ldrb	r1, [r5]
   187c4:	movw	r2, #50953	; 0xc709
   187c8:	movw	r0, #50957	; 0xc70d
   187cc:	movt	r2, #1
   187d0:	movt	r0, #1
   187d4:	b	1874c <__assert_fail@plt+0x6f48>
   187d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   187dc:	add	fp, sp, #24
   187e0:	movw	r8, #0
   187e4:	mov	r6, r2
   187e8:	mov	r4, r1
   187ec:	mov	r5, r0
   187f0:	movt	r8, #32752	; 0x7ff0
   187f4:	mov	r0, r5
   187f8:	mov	r1, r4
   187fc:	mov	r2, r6
   18800:	bl	11468 <read@plt>
   18804:	mov	r7, r0
   18808:	cmn	r0, #1
   1880c:	bgt	18834 <__assert_fail@plt+0x7030>
   18810:	bl	11684 <__errno_location@plt>
   18814:	ldr	r0, [r0]
   18818:	cmp	r0, #4
   1881c:	beq	187f4 <__assert_fail@plt+0x6ff0>
   18820:	cmp	r6, r8
   18824:	bls	18834 <__assert_fail@plt+0x7030>
   18828:	cmp	r0, #22
   1882c:	mov	r6, r8
   18830:	beq	187f4 <__assert_fail@plt+0x6ff0>
   18834:	mov	r0, r7
   18838:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1883c:	push	{r4, r5, fp, lr}
   18840:	add	fp, sp, #8
   18844:	mov	r4, r1
   18848:	mov	r1, #0
   1884c:	mov	r5, r0
   18850:	mov	r2, r4
   18854:	bl	116d8 <memchr@plt>
   18858:	rsb	r1, r5, #1
   1885c:	cmp	r0, #0
   18860:	addne	r4, r1, r0
   18864:	mov	r0, r4
   18868:	pop	{r4, r5, fp, pc}
   1886c:	push	{r4, r5, r6, r7, fp, lr}
   18870:	add	fp, sp, #16
   18874:	mov	r4, r0
   18878:	cmp	r0, #2
   1887c:	movhi	r0, r4
   18880:	pophi	{r4, r5, r6, r7, fp, pc}
   18884:	mov	r0, r4
   18888:	bl	1a5fc <__assert_fail@plt+0x8df8>
   1888c:	mov	r5, r0
   18890:	bl	11684 <__errno_location@plt>
   18894:	ldr	r7, [r0]
   18898:	mov	r6, r0
   1889c:	mov	r0, r4
   188a0:	bl	117ec <close@plt>
   188a4:	mov	r0, r5
   188a8:	str	r7, [r6]
   188ac:	pop	{r4, r5, r6, r7, fp, pc}
   188b0:	push	{r4, r5, r6, sl, fp, lr}
   188b4:	add	fp, sp, #16
   188b8:	mov	r4, r0
   188bc:	bl	116fc <pipe@plt>
   188c0:	mvn	r5, #0
   188c4:	cmp	r0, #0
   188c8:	beq	188d4 <__assert_fail@plt+0x70d0>
   188cc:	mov	r0, r5
   188d0:	pop	{r4, r5, r6, sl, fp, pc}
   188d4:	ldr	r0, [r4]
   188d8:	bl	1886c <__assert_fail@plt+0x7068>
   188dc:	cmn	r0, #1
   188e0:	str	r0, [r4]
   188e4:	ble	18904 <__assert_fail@plt+0x7100>
   188e8:	ldr	r0, [r4, #4]
   188ec:	bl	1886c <__assert_fail@plt+0x7068>
   188f0:	mov	r5, #0
   188f4:	cmp	r0, #0
   188f8:	str	r0, [r4, #4]
   188fc:	bge	188cc <__assert_fail@plt+0x70c8>
   18900:	b	18908 <__assert_fail@plt+0x7104>
   18904:	mov	r5, #1
   18908:	bl	11684 <__errno_location@plt>
   1890c:	mov	r6, r0
   18910:	ldr	r0, [r4, r5, lsl #2]
   18914:	ldr	r4, [r6]
   18918:	bl	117ec <close@plt>
   1891c:	mvn	r5, #0
   18920:	str	r4, [r6]
   18924:	mov	r0, r5
   18928:	pop	{r4, r5, r6, sl, fp, pc}
   1892c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18930:	add	fp, sp, #24
   18934:	sub	sp, sp, #32
   18938:	ldr	r7, [fp, #12]
   1893c:	ldr	r6, [fp, #8]
   18940:	mov	r4, r2
   18944:	mov	r5, r0
   18948:	cmp	r1, #0
   1894c:	beq	1896c <__assert_fail@plt+0x7168>
   18950:	mov	r2, r1
   18954:	movw	r1, #51044	; 0xc764
   18958:	str	r3, [sp]
   1895c:	mov	r0, r5
   18960:	mov	r3, r4
   18964:	movt	r1, #1
   18968:	b	1897c <__assert_fail@plt+0x7178>
   1896c:	movw	r1, #51056	; 0xc770
   18970:	mov	r0, r5
   18974:	mov	r2, r4
   18978:	movt	r1, #1
   1897c:	bl	11678 <fprintf@plt>
   18980:	movw	r1, #51063	; 0xc777
   18984:	mov	r0, #0
   18988:	mov	r2, #5
   1898c:	movt	r1, #1
   18990:	bl	114ec <dcgettext@plt>
   18994:	movw	r1, #51759	; 0xca2f
   18998:	mov	r2, r0
   1899c:	mov	r0, r5
   189a0:	movw	r3, #2022	; 0x7e6
   189a4:	movt	r1, #1
   189a8:	bl	11678 <fprintf@plt>
   189ac:	mov	r0, #10
   189b0:	mov	r1, r5
   189b4:	bl	1175c <fputc@plt>
   189b8:	movw	r1, #51067	; 0xc77b
   189bc:	mov	r0, #0
   189c0:	mov	r2, #5
   189c4:	movt	r1, #1
   189c8:	bl	114ec <dcgettext@plt>
   189cc:	movw	r2, #51238	; 0xc826
   189d0:	mov	r1, r0
   189d4:	mov	r0, r5
   189d8:	movt	r2, #1
   189dc:	bl	11678 <fprintf@plt>
   189e0:	mov	r0, #10
   189e4:	mov	r1, r5
   189e8:	bl	1175c <fputc@plt>
   189ec:	cmp	r7, #9
   189f0:	bhi	18a2c <__assert_fail@plt+0x7228>
   189f4:	add	r0, pc, #0
   189f8:	ldr	pc, [r0, r7, lsl #2]
   189fc:	andeq	r8, r1, r4, lsr #20
   18a00:	andeq	r8, r1, r8, lsr sl
   18a04:	andeq	r8, r1, r4, ror #20
   18a08:	muleq	r1, r0, sl
   18a0c:			; <UNDEFINED> instruction: 0x00018ab8
   18a10:	andeq	r8, r1, r4, ror #21
   18a14:	andeq	r8, r1, r8, lsl fp
   18a18:	andeq	r8, r1, r8, asr fp
   18a1c:	strdeq	r8, [r1], -r4
   18a20:	muleq	r1, ip, fp
   18a24:	sub	sp, fp, #24
   18a28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18a2c:	movw	r1, #51591	; 0xc987
   18a30:	movt	r1, #1
   18a34:	b	18ba4 <__assert_fail@plt+0x73a0>
   18a38:	movw	r1, #51272	; 0xc848
   18a3c:	mov	r0, #0
   18a40:	mov	r2, #5
   18a44:	movt	r1, #1
   18a48:	bl	114ec <dcgettext@plt>
   18a4c:	ldr	r2, [r6]
   18a50:	mov	r1, r0
   18a54:	mov	r0, r5
   18a58:	sub	sp, fp, #24
   18a5c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18a60:	b	11678 <fprintf@plt>
   18a64:	movw	r1, #51288	; 0xc858
   18a68:	mov	r0, #0
   18a6c:	mov	r2, #5
   18a70:	movt	r1, #1
   18a74:	bl	114ec <dcgettext@plt>
   18a78:	ldm	r6, {r2, r3}
   18a7c:	mov	r1, r0
   18a80:	mov	r0, r5
   18a84:	sub	sp, fp, #24
   18a88:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18a8c:	b	11678 <fprintf@plt>
   18a90:	movw	r1, #51311	; 0xc86f
   18a94:	mov	r0, #0
   18a98:	mov	r2, #5
   18a9c:	movt	r1, #1
   18aa0:	bl	114ec <dcgettext@plt>
   18aa4:	mov	r1, r0
   18aa8:	ldm	r6, {r2, r3}
   18aac:	ldr	r0, [r6, #8]
   18ab0:	str	r0, [sp]
   18ab4:	b	18b50 <__assert_fail@plt+0x734c>
   18ab8:	movw	r1, #51339	; 0xc88b
   18abc:	mov	r0, #0
   18ac0:	mov	r2, #5
   18ac4:	movt	r1, #1
   18ac8:	bl	114ec <dcgettext@plt>
   18acc:	ldm	r6, {r2, r3}
   18ad0:	mov	r1, r0
   18ad4:	ldr	r0, [r6, #8]
   18ad8:	ldr	r7, [r6, #12]
   18adc:	stm	sp, {r0, r7}
   18ae0:	b	18b50 <__assert_fail@plt+0x734c>
   18ae4:	movw	r1, #51371	; 0xc8ab
   18ae8:	mov	r0, #0
   18aec:	mov	r2, #5
   18af0:	movt	r1, #1
   18af4:	bl	114ec <dcgettext@plt>
   18af8:	ldm	r6, {r2, r3}
   18afc:	mov	r1, r0
   18b00:	ldr	r0, [r6, #8]
   18b04:	ldr	r7, [r6, #12]
   18b08:	ldr	r6, [r6, #16]
   18b0c:	stm	sp, {r0, r7}
   18b10:	str	r6, [sp, #8]
   18b14:	b	18b50 <__assert_fail@plt+0x734c>
   18b18:	movw	r1, #51407	; 0xc8cf
   18b1c:	mov	r0, #0
   18b20:	mov	r2, #5
   18b24:	movt	r1, #1
   18b28:	bl	114ec <dcgettext@plt>
   18b2c:	ldm	r6, {r2, r3}
   18b30:	mov	r1, r0
   18b34:	ldr	r0, [r6, #8]
   18b38:	ldr	r7, [r6, #12]
   18b3c:	ldr	r4, [r6, #16]
   18b40:	ldr	r6, [r6, #20]
   18b44:	stm	sp, {r0, r7}
   18b48:	str	r4, [sp, #8]
   18b4c:	str	r6, [sp, #12]
   18b50:	mov	r0, r5
   18b54:	b	18c44 <__assert_fail@plt+0x7440>
   18b58:	movw	r1, #51447	; 0xc8f7
   18b5c:	mov	r0, #0
   18b60:	mov	r2, #5
   18b64:	movt	r1, #1
   18b68:	bl	114ec <dcgettext@plt>
   18b6c:	ldm	r6, {r2, r3}
   18b70:	mov	ip, r0
   18b74:	ldr	r0, [r6, #8]
   18b78:	ldr	r7, [r6, #12]
   18b7c:	ldr	r4, [r6, #16]
   18b80:	ldr	r1, [r6, #20]
   18b84:	ldr	r6, [r6, #24]
   18b88:	stm	sp, {r0, r7}
   18b8c:	str	r4, [sp, #8]
   18b90:	str	r1, [sp, #12]
   18b94:	str	r6, [sp, #16]
   18b98:	b	18c3c <__assert_fail@plt+0x7438>
   18b9c:	movw	r1, #51539	; 0xc953
   18ba0:	movt	r1, #1
   18ba4:	mov	r0, #0
   18ba8:	mov	r2, #5
   18bac:	bl	114ec <dcgettext@plt>
   18bb0:	mov	ip, r0
   18bb4:	ldr	r2, [r6]
   18bb8:	ldr	r3, [r6, #4]
   18bbc:	ldr	r0, [r6, #8]
   18bc0:	ldr	r7, [r6, #12]
   18bc4:	ldr	r4, [r6, #16]
   18bc8:	ldr	r1, [r6, #20]
   18bcc:	ldr	lr, [r6, #24]
   18bd0:	ldr	r8, [r6, #28]
   18bd4:	ldr	r6, [r6, #32]
   18bd8:	stm	sp, {r0, r7}
   18bdc:	str	r4, [sp, #8]
   18be0:	str	r1, [sp, #12]
   18be4:	str	lr, [sp, #16]
   18be8:	str	r8, [sp, #20]
   18bec:	str	r6, [sp, #24]
   18bf0:	b	18c3c <__assert_fail@plt+0x7438>
   18bf4:	movw	r1, #51491	; 0xc923
   18bf8:	mov	r0, #0
   18bfc:	mov	r2, #5
   18c00:	movt	r1, #1
   18c04:	bl	114ec <dcgettext@plt>
   18c08:	ldm	r6, {r2, r3}
   18c0c:	mov	ip, r0
   18c10:	ldr	r0, [r6, #8]
   18c14:	ldr	r7, [r6, #12]
   18c18:	ldr	r4, [r6, #16]
   18c1c:	ldr	r1, [r6, #20]
   18c20:	ldr	lr, [r6, #24]
   18c24:	ldr	r6, [r6, #28]
   18c28:	stm	sp, {r0, r7}
   18c2c:	str	r4, [sp, #8]
   18c30:	str	r1, [sp, #12]
   18c34:	str	lr, [sp, #16]
   18c38:	str	r6, [sp, #20]
   18c3c:	mov	r0, r5
   18c40:	mov	r1, ip
   18c44:	bl	11678 <fprintf@plt>
   18c48:	sub	sp, fp, #24
   18c4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18c50:	push	{r4, sl, fp, lr}
   18c54:	add	fp, sp, #8
   18c58:	sub	sp, sp, #8
   18c5c:	ldr	ip, [fp, #8]
   18c60:	mov	lr, #0
   18c64:	ldr	r4, [ip, lr, lsl #2]
   18c68:	add	lr, lr, #1
   18c6c:	cmp	r4, #0
   18c70:	bne	18c64 <__assert_fail@plt+0x7460>
   18c74:	sub	r4, lr, #1
   18c78:	str	ip, [sp]
   18c7c:	str	r4, [sp, #4]
   18c80:	bl	1892c <__assert_fail@plt+0x7128>
   18c84:	sub	sp, fp, #8
   18c88:	pop	{r4, sl, fp, pc}
   18c8c:	push	{fp, lr}
   18c90:	mov	fp, sp
   18c94:	sub	sp, sp, #48	; 0x30
   18c98:	ldr	ip, [fp, #8]
   18c9c:	ldr	lr, [ip]
   18ca0:	cmp	lr, #0
   18ca4:	str	lr, [sp, #8]
   18ca8:	beq	18d44 <__assert_fail@plt+0x7540>
   18cac:	ldr	lr, [ip, #4]
   18cb0:	cmp	lr, #0
   18cb4:	str	lr, [sp, #12]
   18cb8:	beq	18d4c <__assert_fail@plt+0x7548>
   18cbc:	ldr	lr, [ip, #8]
   18cc0:	cmp	lr, #0
   18cc4:	str	lr, [sp, #16]
   18cc8:	beq	18d54 <__assert_fail@plt+0x7550>
   18ccc:	ldr	lr, [ip, #12]
   18cd0:	cmp	lr, #0
   18cd4:	str	lr, [sp, #20]
   18cd8:	beq	18d5c <__assert_fail@plt+0x7558>
   18cdc:	ldr	lr, [ip, #16]
   18ce0:	cmp	lr, #0
   18ce4:	str	lr, [sp, #24]
   18ce8:	beq	18d64 <__assert_fail@plt+0x7560>
   18cec:	ldr	lr, [ip, #20]
   18cf0:	cmp	lr, #0
   18cf4:	str	lr, [sp, #28]
   18cf8:	beq	18d6c <__assert_fail@plt+0x7568>
   18cfc:	ldr	lr, [ip, #24]
   18d00:	cmp	lr, #0
   18d04:	str	lr, [sp, #32]
   18d08:	beq	18d74 <__assert_fail@plt+0x7570>
   18d0c:	ldr	lr, [ip, #28]
   18d10:	cmp	lr, #0
   18d14:	str	lr, [sp, #36]	; 0x24
   18d18:	beq	18d7c <__assert_fail@plt+0x7578>
   18d1c:	ldr	lr, [ip, #32]
   18d20:	cmp	lr, #0
   18d24:	str	lr, [sp, #40]	; 0x28
   18d28:	beq	18d84 <__assert_fail@plt+0x7580>
   18d2c:	ldr	lr, [ip, #36]	; 0x24
   18d30:	mov	ip, #10
   18d34:	cmp	lr, #0
   18d38:	str	lr, [sp, #44]	; 0x2c
   18d3c:	movweq	ip, #9
   18d40:	b	18d88 <__assert_fail@plt+0x7584>
   18d44:	mov	ip, #0
   18d48:	b	18d88 <__assert_fail@plt+0x7584>
   18d4c:	mov	ip, #1
   18d50:	b	18d88 <__assert_fail@plt+0x7584>
   18d54:	mov	ip, #2
   18d58:	b	18d88 <__assert_fail@plt+0x7584>
   18d5c:	mov	ip, #3
   18d60:	b	18d88 <__assert_fail@plt+0x7584>
   18d64:	mov	ip, #4
   18d68:	b	18d88 <__assert_fail@plt+0x7584>
   18d6c:	mov	ip, #5
   18d70:	b	18d88 <__assert_fail@plt+0x7584>
   18d74:	mov	ip, #6
   18d78:	b	18d88 <__assert_fail@plt+0x7584>
   18d7c:	mov	ip, #7
   18d80:	b	18d88 <__assert_fail@plt+0x7584>
   18d84:	mov	ip, #8
   18d88:	add	lr, sp, #8
   18d8c:	str	ip, [sp, #4]
   18d90:	str	lr, [sp]
   18d94:	bl	1892c <__assert_fail@plt+0x7128>
   18d98:	mov	sp, fp
   18d9c:	pop	{fp, pc}
   18da0:	push	{fp, lr}
   18da4:	mov	fp, sp
   18da8:	sub	sp, sp, #56	; 0x38
   18dac:	add	ip, fp, #8
   18db0:	str	ip, [sp, #12]
   18db4:	ldr	lr, [fp, #8]
   18db8:	cmp	lr, #0
   18dbc:	str	lr, [sp, #16]
   18dc0:	beq	18e5c <__assert_fail@plt+0x7658>
   18dc4:	ldr	lr, [ip, #4]
   18dc8:	cmp	lr, #0
   18dcc:	str	lr, [sp, #20]
   18dd0:	beq	18e64 <__assert_fail@plt+0x7660>
   18dd4:	ldr	lr, [ip, #8]
   18dd8:	cmp	lr, #0
   18ddc:	str	lr, [sp, #24]
   18de0:	beq	18e6c <__assert_fail@plt+0x7668>
   18de4:	ldr	lr, [ip, #12]
   18de8:	cmp	lr, #0
   18dec:	str	lr, [sp, #28]
   18df0:	beq	18e74 <__assert_fail@plt+0x7670>
   18df4:	ldr	lr, [ip, #16]
   18df8:	cmp	lr, #0
   18dfc:	str	lr, [sp, #32]
   18e00:	beq	18e7c <__assert_fail@plt+0x7678>
   18e04:	ldr	lr, [ip, #20]
   18e08:	cmp	lr, #0
   18e0c:	str	lr, [sp, #36]	; 0x24
   18e10:	beq	18e84 <__assert_fail@plt+0x7680>
   18e14:	ldr	lr, [ip, #24]
   18e18:	cmp	lr, #0
   18e1c:	str	lr, [sp, #40]	; 0x28
   18e20:	beq	18e8c <__assert_fail@plt+0x7688>
   18e24:	ldr	lr, [ip, #28]
   18e28:	cmp	lr, #0
   18e2c:	str	lr, [sp, #44]	; 0x2c
   18e30:	beq	18e94 <__assert_fail@plt+0x7690>
   18e34:	ldr	lr, [ip, #32]
   18e38:	cmp	lr, #0
   18e3c:	str	lr, [sp, #48]	; 0x30
   18e40:	beq	18e9c <__assert_fail@plt+0x7698>
   18e44:	ldr	lr, [ip, #36]	; 0x24
   18e48:	mov	ip, #10
   18e4c:	cmp	lr, #0
   18e50:	str	lr, [sp, #52]	; 0x34
   18e54:	movweq	ip, #9
   18e58:	b	18ea0 <__assert_fail@plt+0x769c>
   18e5c:	mov	ip, #0
   18e60:	b	18ea0 <__assert_fail@plt+0x769c>
   18e64:	mov	ip, #1
   18e68:	b	18ea0 <__assert_fail@plt+0x769c>
   18e6c:	mov	ip, #2
   18e70:	b	18ea0 <__assert_fail@plt+0x769c>
   18e74:	mov	ip, #3
   18e78:	b	18ea0 <__assert_fail@plt+0x769c>
   18e7c:	mov	ip, #4
   18e80:	b	18ea0 <__assert_fail@plt+0x769c>
   18e84:	mov	ip, #5
   18e88:	b	18ea0 <__assert_fail@plt+0x769c>
   18e8c:	mov	ip, #6
   18e90:	b	18ea0 <__assert_fail@plt+0x769c>
   18e94:	mov	ip, #7
   18e98:	b	18ea0 <__assert_fail@plt+0x769c>
   18e9c:	mov	ip, #8
   18ea0:	add	lr, sp, #16
   18ea4:	str	ip, [sp, #4]
   18ea8:	str	lr, [sp]
   18eac:	bl	1892c <__assert_fail@plt+0x7128>
   18eb0:	mov	sp, fp
   18eb4:	pop	{fp, pc}
   18eb8:	push	{fp, lr}
   18ebc:	mov	fp, sp
   18ec0:	movw	r0, #53724	; 0xd1dc
   18ec4:	movt	r0, #2
   18ec8:	ldr	r1, [r0]
   18ecc:	mov	r0, #10
   18ed0:	bl	1175c <fputc@plt>
   18ed4:	movw	r1, #51651	; 0xc9c3
   18ed8:	mov	r0, #0
   18edc:	mov	r2, #5
   18ee0:	movt	r1, #1
   18ee4:	bl	114ec <dcgettext@plt>
   18ee8:	movw	r1, #50530	; 0xc562
   18eec:	movt	r1, #1
   18ef0:	bl	1145c <printf@plt>
   18ef4:	movw	r1, #51671	; 0xc9d7
   18ef8:	mov	r0, #0
   18efc:	mov	r2, #5
   18f00:	movt	r1, #1
   18f04:	bl	114ec <dcgettext@plt>
   18f08:	movw	r1, #50130	; 0xc3d2
   18f0c:	movw	r2, #50444	; 0xc50c
   18f10:	movt	r1, #1
   18f14:	movt	r2, #1
   18f18:	bl	1145c <printf@plt>
   18f1c:	movw	r1, #51691	; 0xc9eb
   18f20:	mov	r0, #0
   18f24:	mov	r2, #5
   18f28:	movt	r1, #1
   18f2c:	bl	114ec <dcgettext@plt>
   18f30:	movw	r1, #51730	; 0xca12
   18f34:	movt	r1, #1
   18f38:	pop	{fp, lr}
   18f3c:	b	1145c <printf@plt>
   18f40:	push	{r4, r5, r6, sl, fp, lr}
   18f44:	add	fp, sp, #16
   18f48:	mov	r4, r2
   18f4c:	mov	r5, r1
   18f50:	mov	r6, r0
   18f54:	bl	1a1fc <__assert_fail@plt+0x89f8>
   18f58:	cmp	r0, #0
   18f5c:	popne	{r4, r5, r6, sl, fp, pc}
   18f60:	cmp	r6, #0
   18f64:	beq	18f78 <__assert_fail@plt+0x7774>
   18f68:	cmp	r5, #0
   18f6c:	cmpne	r4, #0
   18f70:	bne	18f78 <__assert_fail@plt+0x7774>
   18f74:	pop	{r4, r5, r6, sl, fp, pc}
   18f78:	bl	19518 <__assert_fail@plt+0x7d14>
   18f7c:	push	{r4, r5, r6, sl, fp, lr}
   18f80:	add	fp, sp, #16
   18f84:	mov	r4, r2
   18f88:	mov	r5, r1
   18f8c:	mov	r6, r0
   18f90:	bl	1a1fc <__assert_fail@plt+0x89f8>
   18f94:	cmp	r0, #0
   18f98:	popne	{r4, r5, r6, sl, fp, pc}
   18f9c:	cmp	r6, #0
   18fa0:	beq	18fb4 <__assert_fail@plt+0x77b0>
   18fa4:	cmp	r5, #0
   18fa8:	cmpne	r4, #0
   18fac:	bne	18fb4 <__assert_fail@plt+0x77b0>
   18fb0:	pop	{r4, r5, r6, sl, fp, pc}
   18fb4:	bl	19518 <__assert_fail@plt+0x7d14>
   18fb8:	push	{fp, lr}
   18fbc:	mov	fp, sp
   18fc0:	bl	1a118 <__assert_fail@plt+0x8914>
   18fc4:	cmp	r0, #0
   18fc8:	popne	{fp, pc}
   18fcc:	bl	19518 <__assert_fail@plt+0x7d14>
   18fd0:	push	{fp, lr}
   18fd4:	mov	fp, sp
   18fd8:	bl	1a118 <__assert_fail@plt+0x8914>
   18fdc:	cmp	r0, #0
   18fe0:	popne	{fp, pc}
   18fe4:	bl	19518 <__assert_fail@plt+0x7d14>
   18fe8:	push	{fp, lr}
   18fec:	mov	fp, sp
   18ff0:	bl	1a118 <__assert_fail@plt+0x8914>
   18ff4:	cmp	r0, #0
   18ff8:	popne	{fp, pc}
   18ffc:	bl	19518 <__assert_fail@plt+0x7d14>
   19000:	push	{r4, r5, fp, lr}
   19004:	add	fp, sp, #8
   19008:	mov	r4, r1
   1900c:	mov	r5, r0
   19010:	bl	1a1a8 <__assert_fail@plt+0x89a4>
   19014:	cmp	r0, #0
   19018:	popne	{r4, r5, fp, pc}
   1901c:	cmp	r5, #0
   19020:	beq	19030 <__assert_fail@plt+0x782c>
   19024:	cmp	r4, #0
   19028:	bne	19030 <__assert_fail@plt+0x782c>
   1902c:	pop	{r4, r5, fp, pc}
   19030:	bl	19518 <__assert_fail@plt+0x7d14>
   19034:	push	{fp, lr}
   19038:	mov	fp, sp
   1903c:	cmp	r1, #0
   19040:	orreq	r1, r1, #1
   19044:	bl	1a1a8 <__assert_fail@plt+0x89a4>
   19048:	cmp	r0, #0
   1904c:	popne	{fp, pc}
   19050:	bl	19518 <__assert_fail@plt+0x7d14>
   19054:	push	{fp, lr}
   19058:	mov	fp, sp
   1905c:	clz	r3, r2
   19060:	lsr	ip, r3, #5
   19064:	clz	r3, r1
   19068:	lsr	r3, r3, #5
   1906c:	orrs	r3, r3, ip
   19070:	movwne	r1, #1
   19074:	movwne	r2, #1
   19078:	bl	1a1fc <__assert_fail@plt+0x89f8>
   1907c:	cmp	r0, #0
   19080:	popne	{fp, pc}
   19084:	bl	19518 <__assert_fail@plt+0x7d14>
   19088:	push	{fp, lr}
   1908c:	mov	fp, sp
   19090:	mov	r2, r1
   19094:	mov	r1, r0
   19098:	mov	r0, #0
   1909c:	bl	1a1fc <__assert_fail@plt+0x89f8>
   190a0:	cmp	r0, #0
   190a4:	popne	{fp, pc}
   190a8:	bl	19518 <__assert_fail@plt+0x7d14>
   190ac:	push	{fp, lr}
   190b0:	mov	fp, sp
   190b4:	mov	r2, r1
   190b8:	mov	r1, r0
   190bc:	clz	r0, r2
   190c0:	clz	r3, r1
   190c4:	lsr	r0, r0, #5
   190c8:	lsr	r3, r3, #5
   190cc:	orrs	r0, r3, r0
   190d0:	movwne	r1, #1
   190d4:	movwne	r2, #1
   190d8:	mov	r0, #0
   190dc:	bl	1a1fc <__assert_fail@plt+0x89f8>
   190e0:	cmp	r0, #0
   190e4:	popne	{fp, pc}
   190e8:	bl	19518 <__assert_fail@plt+0x7d14>
   190ec:	push	{r4, r5, r6, sl, fp, lr}
   190f0:	add	fp, sp, #16
   190f4:	ldr	r5, [r1]
   190f8:	mov	r4, r1
   190fc:	mov	r6, r0
   19100:	cmp	r0, #0
   19104:	beq	1911c <__assert_fail@plt+0x7918>
   19108:	mov	r0, #1
   1910c:	add	r0, r0, r5, lsr #1
   19110:	adds	r5, r5, r0
   19114:	bcc	19124 <__assert_fail@plt+0x7920>
   19118:	b	19160 <__assert_fail@plt+0x795c>
   1911c:	cmp	r5, #0
   19120:	movweq	r5, #64	; 0x40
   19124:	mov	r0, r6
   19128:	mov	r1, r5
   1912c:	mov	r2, #1
   19130:	bl	1a1fc <__assert_fail@plt+0x89f8>
   19134:	cmp	r5, #0
   19138:	mov	r1, r5
   1913c:	movwne	r1, #1
   19140:	cmp	r0, #0
   19144:	bne	19158 <__assert_fail@plt+0x7954>
   19148:	clz	r2, r6
   1914c:	lsr	r2, r2, #5
   19150:	orrs	r1, r2, r1
   19154:	bne	19160 <__assert_fail@plt+0x795c>
   19158:	str	r5, [r4]
   1915c:	pop	{r4, r5, r6, sl, fp, pc}
   19160:	bl	19518 <__assert_fail@plt+0x7d14>
   19164:	push	{r4, r5, r6, r7, fp, lr}
   19168:	add	fp, sp, #16
   1916c:	ldr	r5, [r1]
   19170:	mov	r6, r2
   19174:	mov	r4, r1
   19178:	mov	r7, r0
   1917c:	cmp	r0, #0
   19180:	beq	19198 <__assert_fail@plt+0x7994>
   19184:	mov	r0, #1
   19188:	add	r0, r0, r5, lsr #1
   1918c:	adds	r5, r5, r0
   19190:	bcc	191b0 <__assert_fail@plt+0x79ac>
   19194:	b	191e4 <__assert_fail@plt+0x79e0>
   19198:	cmp	r5, #0
   1919c:	bne	191b0 <__assert_fail@plt+0x79ac>
   191a0:	mov	r0, #64	; 0x40
   191a4:	cmp	r6, #64	; 0x40
   191a8:	udiv	r5, r0, r6
   191ac:	addhi	r5, r5, #1
   191b0:	mov	r0, r7
   191b4:	mov	r1, r5
   191b8:	mov	r2, r6
   191bc:	bl	1a1fc <__assert_fail@plt+0x89f8>
   191c0:	cmp	r0, #0
   191c4:	bne	191dc <__assert_fail@plt+0x79d8>
   191c8:	cmp	r7, #0
   191cc:	beq	191e4 <__assert_fail@plt+0x79e0>
   191d0:	cmp	r6, #0
   191d4:	cmpne	r5, #0
   191d8:	bne	191e4 <__assert_fail@plt+0x79e0>
   191dc:	str	r5, [r4]
   191e0:	pop	{r4, r5, r6, r7, fp, pc}
   191e4:	bl	19518 <__assert_fail@plt+0x7d14>
   191e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   191ec:	add	fp, sp, #24
   191f0:	mov	r8, r1
   191f4:	ldr	r1, [r1]
   191f8:	mov	r5, r0
   191fc:	add	r0, r1, r1, asr #1
   19200:	cmp	r0, r1
   19204:	mvnvs	r0, #-2147483648	; 0x80000000
   19208:	cmp	r0, r3
   1920c:	mov	r7, r0
   19210:	movgt	r7, r3
   19214:	cmn	r3, #1
   19218:	movle	r7, r0
   1921c:	ldr	r0, [fp, #8]
   19220:	cmn	r0, #1
   19224:	ble	1924c <__assert_fail@plt+0x7a48>
   19228:	cmp	r0, #0
   1922c:	beq	192a0 <__assert_fail@plt+0x7a9c>
   19230:	cmn	r7, #1
   19234:	ble	19274 <__assert_fail@plt+0x7a70>
   19238:	mvn	r4, #-2147483648	; 0x80000000
   1923c:	udiv	r6, r4, r0
   19240:	cmp	r6, r7
   19244:	bge	192a0 <__assert_fail@plt+0x7a9c>
   19248:	b	192b0 <__assert_fail@plt+0x7aac>
   1924c:	cmn	r7, #1
   19250:	ble	19290 <__assert_fail@plt+0x7a8c>
   19254:	cmn	r0, #1
   19258:	beq	192a0 <__assert_fail@plt+0x7a9c>
   1925c:	mov	r6, #-2147483648	; 0x80000000
   19260:	mvn	r4, #-2147483648	; 0x80000000
   19264:	sdiv	r6, r6, r0
   19268:	cmp	r6, r7
   1926c:	bge	192a0 <__assert_fail@plt+0x7a9c>
   19270:	b	192b0 <__assert_fail@plt+0x7aac>
   19274:	beq	192a0 <__assert_fail@plt+0x7a9c>
   19278:	mov	r6, #-2147483648	; 0x80000000
   1927c:	mvn	r4, #-2147483648	; 0x80000000
   19280:	sdiv	r6, r6, r7
   19284:	cmp	r6, r0
   19288:	bge	192a0 <__assert_fail@plt+0x7a9c>
   1928c:	b	192b0 <__assert_fail@plt+0x7aac>
   19290:	mvn	r4, #-2147483648	; 0x80000000
   19294:	sdiv	r6, r4, r0
   19298:	cmp	r7, r6
   1929c:	blt	192b0 <__assert_fail@plt+0x7aac>
   192a0:	mul	r6, r7, r0
   192a4:	mov	r4, #64	; 0x40
   192a8:	cmp	r6, #63	; 0x3f
   192ac:	bgt	192b8 <__assert_fail@plt+0x7ab4>
   192b0:	sdiv	r7, r4, r0
   192b4:	mul	r6, r7, r0
   192b8:	cmp	r5, #0
   192bc:	moveq	r4, #0
   192c0:	streq	r4, [r8]
   192c4:	sub	r4, r7, r1
   192c8:	cmp	r4, r2
   192cc:	bge	19378 <__assert_fail@plt+0x7b74>
   192d0:	add	r7, r1, r2
   192d4:	mov	r6, #0
   192d8:	mov	r2, #0
   192dc:	cmp	r7, r3
   192e0:	movwgt	r6, #1
   192e4:	cmn	r3, #1
   192e8:	movwgt	r2, #1
   192ec:	cmp	r7, r1
   192f0:	bvs	193ac <__assert_fail@plt+0x7ba8>
   192f4:	ands	r1, r2, r6
   192f8:	bne	193ac <__assert_fail@plt+0x7ba8>
   192fc:	cmn	r0, #1
   19300:	ble	19328 <__assert_fail@plt+0x7b24>
   19304:	cmp	r0, #0
   19308:	beq	19374 <__assert_fail@plt+0x7b70>
   1930c:	cmn	r7, #1
   19310:	ble	1934c <__assert_fail@plt+0x7b48>
   19314:	mvn	r1, #-2147483648	; 0x80000000
   19318:	udiv	r1, r1, r0
   1931c:	cmp	r1, r7
   19320:	bge	19374 <__assert_fail@plt+0x7b70>
   19324:	b	193ac <__assert_fail@plt+0x7ba8>
   19328:	cmn	r7, #1
   1932c:	ble	19364 <__assert_fail@plt+0x7b60>
   19330:	cmn	r0, #1
   19334:	beq	19374 <__assert_fail@plt+0x7b70>
   19338:	mov	r1, #-2147483648	; 0x80000000
   1933c:	sdiv	r1, r1, r0
   19340:	cmp	r1, r7
   19344:	bge	19374 <__assert_fail@plt+0x7b70>
   19348:	b	193ac <__assert_fail@plt+0x7ba8>
   1934c:	beq	19374 <__assert_fail@plt+0x7b70>
   19350:	mov	r1, #-2147483648	; 0x80000000
   19354:	sdiv	r1, r1, r7
   19358:	cmp	r1, r0
   1935c:	bge	19374 <__assert_fail@plt+0x7b70>
   19360:	b	193ac <__assert_fail@plt+0x7ba8>
   19364:	mvn	r1, #-2147483648	; 0x80000000
   19368:	sdiv	r1, r1, r0
   1936c:	cmp	r7, r1
   19370:	blt	193ac <__assert_fail@plt+0x7ba8>
   19374:	mul	r6, r7, r0
   19378:	mov	r0, r5
   1937c:	mov	r1, r6
   19380:	bl	1a1a8 <__assert_fail@plt+0x89a4>
   19384:	cmp	r6, #0
   19388:	movwne	r6, #1
   1938c:	cmp	r0, #0
   19390:	bne	193a4 <__assert_fail@plt+0x7ba0>
   19394:	clz	r1, r5
   19398:	lsr	r1, r1, #5
   1939c:	orrs	r1, r1, r6
   193a0:	bne	193ac <__assert_fail@plt+0x7ba8>
   193a4:	str	r7, [r8]
   193a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   193ac:	bl	19518 <__assert_fail@plt+0x7d14>
   193b0:	push	{fp, lr}
   193b4:	mov	fp, sp
   193b8:	mov	r1, #1
   193bc:	bl	19d80 <__assert_fail@plt+0x857c>
   193c0:	cmp	r0, #0
   193c4:	popne	{fp, pc}
   193c8:	bl	19518 <__assert_fail@plt+0x7d14>
   193cc:	push	{fp, lr}
   193d0:	mov	fp, sp
   193d4:	bl	19d80 <__assert_fail@plt+0x857c>
   193d8:	cmp	r0, #0
   193dc:	popne	{fp, pc}
   193e0:	bl	19518 <__assert_fail@plt+0x7d14>
   193e4:	push	{fp, lr}
   193e8:	mov	fp, sp
   193ec:	mov	r1, #1
   193f0:	bl	19d80 <__assert_fail@plt+0x857c>
   193f4:	cmp	r0, #0
   193f8:	popne	{fp, pc}
   193fc:	bl	19518 <__assert_fail@plt+0x7d14>
   19400:	push	{fp, lr}
   19404:	mov	fp, sp
   19408:	bl	19d80 <__assert_fail@plt+0x857c>
   1940c:	cmp	r0, #0
   19410:	popne	{fp, pc}
   19414:	bl	19518 <__assert_fail@plt+0x7d14>
   19418:	push	{r4, r5, r6, sl, fp, lr}
   1941c:	add	fp, sp, #16
   19420:	mov	r5, r0
   19424:	mov	r0, r1
   19428:	mov	r4, r1
   1942c:	bl	1a118 <__assert_fail@plt+0x8914>
   19430:	cmp	r0, #0
   19434:	beq	19450 <__assert_fail@plt+0x7c4c>
   19438:	mov	r1, r5
   1943c:	mov	r2, r4
   19440:	mov	r6, r0
   19444:	bl	114b0 <memcpy@plt>
   19448:	mov	r0, r6
   1944c:	pop	{r4, r5, r6, sl, fp, pc}
   19450:	bl	19518 <__assert_fail@plt+0x7d14>
   19454:	push	{r4, r5, r6, sl, fp, lr}
   19458:	add	fp, sp, #16
   1945c:	mov	r5, r0
   19460:	mov	r0, r1
   19464:	mov	r4, r1
   19468:	bl	1a118 <__assert_fail@plt+0x8914>
   1946c:	cmp	r0, #0
   19470:	beq	1948c <__assert_fail@plt+0x7c88>
   19474:	mov	r1, r5
   19478:	mov	r2, r4
   1947c:	mov	r6, r0
   19480:	bl	114b0 <memcpy@plt>
   19484:	mov	r0, r6
   19488:	pop	{r4, r5, r6, sl, fp, pc}
   1948c:	bl	19518 <__assert_fail@plt+0x7d14>
   19490:	push	{r4, r5, r6, sl, fp, lr}
   19494:	add	fp, sp, #16
   19498:	mov	r5, r0
   1949c:	add	r0, r1, #1
   194a0:	mov	r4, r1
   194a4:	bl	1a118 <__assert_fail@plt+0x8914>
   194a8:	cmp	r0, #0
   194ac:	beq	194d4 <__assert_fail@plt+0x7cd0>
   194b0:	mov	r6, r0
   194b4:	mov	r0, #0
   194b8:	mov	r1, r5
   194bc:	mov	r2, r4
   194c0:	strb	r0, [r6, r4]
   194c4:	mov	r0, r6
   194c8:	bl	114b0 <memcpy@plt>
   194cc:	mov	r0, r6
   194d0:	pop	{r4, r5, r6, sl, fp, pc}
   194d4:	bl	19518 <__assert_fail@plt+0x7d14>
   194d8:	push	{r4, r5, r6, sl, fp, lr}
   194dc:	add	fp, sp, #16
   194e0:	mov	r4, r0
   194e4:	bl	11654 <strlen@plt>
   194e8:	add	r5, r0, #1
   194ec:	mov	r0, r5
   194f0:	bl	1a118 <__assert_fail@plt+0x8914>
   194f4:	cmp	r0, #0
   194f8:	beq	19514 <__assert_fail@plt+0x7d10>
   194fc:	mov	r1, r4
   19500:	mov	r2, r5
   19504:	mov	r6, r0
   19508:	bl	114b0 <memcpy@plt>
   1950c:	mov	r0, r6
   19510:	pop	{r4, r5, r6, sl, fp, pc}
   19514:	bl	19518 <__assert_fail@plt+0x7d14>
   19518:	push	{fp, lr}
   1951c:	mov	fp, sp
   19520:	movw	r0, #53616	; 0xd170
   19524:	movw	r1, #51806	; 0xca5e
   19528:	mov	r2, #5
   1952c:	movt	r0, #2
   19530:	movt	r1, #1
   19534:	ldr	r4, [r0]
   19538:	mov	r0, #0
   1953c:	bl	114ec <dcgettext@plt>
   19540:	movw	r2, #50235	; 0xc43b
   19544:	mov	r3, r0
   19548:	mov	r0, r4
   1954c:	mov	r1, #0
   19550:	movt	r2, #1
   19554:	bl	115b8 <error@plt>
   19558:	bl	117d4 <abort@plt>
   1955c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19560:	add	fp, sp, #28
   19564:	sub	sp, sp, #20
   19568:	cmp	r2, #37	; 0x25
   1956c:	bcs	19d60 <__assert_fail@plt+0x855c>
   19570:	ldr	r9, [fp, #8]
   19574:	mov	r5, r2
   19578:	mov	r4, r1
   1957c:	mov	r7, r0
   19580:	str	r3, [sp, #12]
   19584:	bl	11684 <__errno_location@plt>
   19588:	mov	r8, r0
   1958c:	mov	r0, #0
   19590:	str	r0, [r8]
   19594:	bl	11624 <__ctype_b_loc@plt>
   19598:	ldr	r1, [r0]
   1959c:	mov	r2, r7
   195a0:	ldrb	r0, [r2], #1
   195a4:	add	r3, r1, r0, lsl #1
   195a8:	ldrb	r3, [r3, #1]
   195ac:	tst	r3, #32
   195b0:	bne	195a0 <__assert_fail@plt+0x7d9c>
   195b4:	add	r6, sp, #16
   195b8:	cmp	r4, #0
   195bc:	mov	sl, #4
   195c0:	movne	r6, r4
   195c4:	cmp	r0, #45	; 0x2d
   195c8:	beq	19d54 <__assert_fail@plt+0x8550>
   195cc:	mov	r0, r7
   195d0:	mov	r1, r6
   195d4:	mov	r2, r5
   195d8:	bl	11648 <strtoul@plt>
   195dc:	ldr	r5, [r6]
   195e0:	cmp	r5, r7
   195e4:	beq	19610 <__assert_fail@plt+0x7e0c>
   195e8:	mov	r4, r0
   195ec:	ldr	r0, [r8]
   195f0:	cmp	r0, #0
   195f4:	beq	1963c <__assert_fail@plt+0x7e38>
   195f8:	cmp	r0, #34	; 0x22
   195fc:	bne	19d54 <__assert_fail@plt+0x8550>
   19600:	mov	sl, #1
   19604:	cmp	r9, #0
   19608:	bne	19648 <__assert_fail@plt+0x7e44>
   1960c:	b	19d4c <__assert_fail@plt+0x8548>
   19610:	cmp	r9, #0
   19614:	ldrbne	r1, [r7]
   19618:	cmpne	r1, #0
   1961c:	beq	19d54 <__assert_fail@plt+0x8550>
   19620:	mov	r0, r9
   19624:	bl	11660 <strchr@plt>
   19628:	cmp	r0, #0
   1962c:	beq	19d54 <__assert_fail@plt+0x8550>
   19630:	mov	r4, #1
   19634:	mov	sl, #0
   19638:	b	19648 <__assert_fail@plt+0x7e44>
   1963c:	mov	sl, r0
   19640:	cmp	r9, #0
   19644:	beq	19d4c <__assert_fail@plt+0x8548>
   19648:	ldrb	r7, [r5]
   1964c:	cmp	r7, #0
   19650:	beq	19d4c <__assert_fail@plt+0x8548>
   19654:	mov	r0, r9
   19658:	mov	r1, r7
   1965c:	bl	11660 <strchr@plt>
   19660:	cmp	r0, #0
   19664:	beq	198e0 <__assert_fail@plt+0x80dc>
   19668:	sub	r0, r7, #69	; 0x45
   1966c:	mov	lr, #1
   19670:	mov	r8, #1024	; 0x400
   19674:	cmp	r0, #47	; 0x2f
   19678:	bhi	19794 <__assert_fail@plt+0x7f90>
   1967c:	add	r1, pc, #0
   19680:	ldr	pc, [r1, r0, lsl #2]
   19684:	andeq	r9, r1, r4, asr #14
   19688:	muleq	r1, r4, r7
   1968c:	andeq	r9, r1, r4, asr #14
   19690:	muleq	r1, r4, r7
   19694:	muleq	r1, r4, r7
   19698:	muleq	r1, r4, r7
   1969c:	andeq	r9, r1, r4, asr #14
   196a0:	muleq	r1, r4, r7
   196a4:	andeq	r9, r1, r4, asr #14
   196a8:	muleq	r1, r4, r7
   196ac:	muleq	r1, r4, r7
   196b0:	andeq	r9, r1, r4, asr #14
   196b4:	muleq	r1, r4, r7
   196b8:	muleq	r1, r4, r7
   196bc:	muleq	r1, r4, r7
   196c0:	andeq	r9, r1, r4, asr #14
   196c4:	muleq	r1, r4, r7
   196c8:	muleq	r1, r4, r7
   196cc:	muleq	r1, r4, r7
   196d0:	muleq	r1, r4, r7
   196d4:	andeq	r9, r1, r4, asr #14
   196d8:	andeq	r9, r1, r4, asr #14
   196dc:	muleq	r1, r4, r7
   196e0:	muleq	r1, r4, r7
   196e4:	muleq	r1, r4, r7
   196e8:	muleq	r1, r4, r7
   196ec:	muleq	r1, r4, r7
   196f0:	muleq	r1, r4, r7
   196f4:	muleq	r1, r4, r7
   196f8:	muleq	r1, r4, r7
   196fc:	muleq	r1, r4, r7
   19700:	muleq	r1, r4, r7
   19704:	muleq	r1, r4, r7
   19708:	muleq	r1, r4, r7
   1970c:	andeq	r9, r1, r4, asr #14
   19710:	muleq	r1, r4, r7
   19714:	muleq	r1, r4, r7
   19718:	muleq	r1, r4, r7
   1971c:	andeq	r9, r1, r4, asr #14
   19720:	muleq	r1, r4, r7
   19724:	andeq	r9, r1, r4, asr #14
   19728:	muleq	r1, r4, r7
   1972c:	muleq	r1, r4, r7
   19730:	muleq	r1, r4, r7
   19734:	muleq	r1, r4, r7
   19738:	muleq	r1, r4, r7
   1973c:	muleq	r1, r4, r7
   19740:	andeq	r9, r1, r4, asr #14
   19744:	mov	r0, r9
   19748:	mov	r1, #48	; 0x30
   1974c:	bl	11660 <strchr@plt>
   19750:	cmp	r0, #0
   19754:	beq	19790 <__assert_fail@plt+0x7f8c>
   19758:	ldrb	r0, [r5, #1]
   1975c:	cmp	r0, #66	; 0x42
   19760:	cmpne	r0, #68	; 0x44
   19764:	bne	19774 <__assert_fail@plt+0x7f70>
   19768:	mov	lr, #2
   1976c:	mov	r8, #1000	; 0x3e8
   19770:	b	19794 <__assert_fail@plt+0x7f90>
   19774:	cmp	r0, #105	; 0x69
   19778:	bne	19790 <__assert_fail@plt+0x7f8c>
   1977c:	ldrb	r0, [r5, #2]
   19780:	mov	lr, #1
   19784:	cmp	r0, #66	; 0x42
   19788:	movweq	lr, #3
   1978c:	b	19794 <__assert_fail@plt+0x7f90>
   19790:	mov	lr, #1
   19794:	sub	r1, r7, #66	; 0x42
   19798:	cmp	r1, #53	; 0x35
   1979c:	bhi	198e0 <__assert_fail@plt+0x80dc>
   197a0:	add	r2, pc, #4
   197a4:	mov	r0, #0
   197a8:	ldr	pc, [r2, r1, lsl #2]
   197ac:	muleq	r1, r4, sl
   197b0:	andeq	r9, r1, r0, ror #17
   197b4:	andeq	r9, r1, r0, ror #17
   197b8:			; <UNDEFINED> instruction: 0x00019ab0
   197bc:	andeq	r9, r1, r0, ror #17
   197c0:	andeq	r9, r1, r4, lsl #17
   197c4:	andeq	r9, r1, r0, ror #17
   197c8:	andeq	r9, r1, r0, ror #17
   197cc:	andeq	r9, r1, r0, ror #17
   197d0:	andeq	r9, r1, ip, ror #17
   197d4:	andeq	r9, r1, r0, ror #17
   197d8:	andeq	r9, r1, ip, lsl #18
   197dc:	andeq	r9, r1, r0, ror #17
   197e0:	andeq	r9, r1, r0, ror #17
   197e4:	andeq	r9, r1, r8, ror #22
   197e8:	andeq	r9, r1, r0, ror #17
   197ec:	andeq	r9, r1, r0, ror #17
   197f0:	andeq	r9, r1, r0, ror #17
   197f4:	andeq	r9, r1, ip, asr #18
   197f8:	andeq	r9, r1, r0, ror #17
   197fc:	andeq	r9, r1, r0, ror #17
   19800:	andeq	r9, r1, r0, ror #17
   19804:	andeq	r9, r1, r0, ror #17
   19808:	andeq	r9, r1, r4, lsl #24
   1980c:	andeq	r9, r1, r4, asr #19
   19810:	andeq	r9, r1, r0, ror #17
   19814:	andeq	r9, r1, r0, ror #17
   19818:	andeq	r9, r1, r0, ror #17
   1981c:	andeq	r9, r1, r0, ror #17
   19820:	andeq	r9, r1, r0, ror #17
   19824:	andeq	r9, r1, r0, ror #17
   19828:	andeq	r9, r1, r0, ror #17
   1982c:	strdeq	r9, [r1], -ip
   19830:	andeq	r9, r1, r4, lsr sp
   19834:	andeq	r9, r1, r0, ror #17
   19838:	andeq	r9, r1, r0, ror #17
   1983c:	andeq	r9, r1, r0, ror #17
   19840:	andeq	r9, r1, r4, lsl #17
   19844:	andeq	r9, r1, r0, ror #17
   19848:	andeq	r9, r1, r0, ror #17
   1984c:	andeq	r9, r1, r0, ror #17
   19850:	andeq	r9, r1, ip, ror #17
   19854:	andeq	r9, r1, r0, ror #17
   19858:	andeq	r9, r1, ip, lsl #18
   1985c:	andeq	r9, r1, r0, ror #17
   19860:	andeq	r9, r1, r0, ror #17
   19864:	andeq	r9, r1, r0, ror #17
   19868:	andeq	r9, r1, r0, ror #17
   1986c:	andeq	r9, r1, r0, ror #17
   19870:	andeq	r9, r1, r0, ror #17
   19874:	andeq	r9, r1, ip, asr #18
   19878:	andeq	r9, r1, r0, ror #17
   1987c:	andeq	r9, r1, r0, ror #17
   19880:	andeq	r9, r1, r0, lsr #26
   19884:	mvn	r0, #0
   19888:	mul	r1, r4, r8
   1988c:	mov	r7, #0
   19890:	udiv	r0, r0, r8
   19894:	cmp	r0, r4
   19898:	mvncc	r1, #0
   1989c:	mul	r2, r1, r8
   198a0:	cmp	r0, r1
   198a4:	mvncc	r2, #0
   198a8:	cmp	r0, r2
   198ac:	mul	r3, r2, r8
   198b0:	mov	r2, #0
   198b4:	mvncc	r3, #0
   198b8:	movwcc	r7, #1
   198bc:	cmp	r0, r1
   198c0:	mov	r1, #0
   198c4:	movwcc	r1, #1
   198c8:	cmp	r0, r4
   198cc:	mov	r4, r3
   198d0:	movwcc	r2, #1
   198d4:	orr	r0, r2, r1
   198d8:	orr	r0, r0, r7
   198dc:	b	19d34 <__assert_fail@plt+0x8530>
   198e0:	ldr	r0, [sp, #12]
   198e4:	orr	sl, sl, #2
   198e8:	b	19d50 <__assert_fail@plt+0x854c>
   198ec:	mvn	r0, #0
   198f0:	mul	r1, r4, r8
   198f4:	udiv	r0, r0, r8
   198f8:	cmp	r0, r4
   198fc:	mov	r0, #0
   19900:	mvncc	r1, #0
   19904:	movwcc	r0, #1
   19908:	b	19d30 <__assert_fail@plt+0x852c>
   1990c:	mvn	r0, #0
   19910:	mul	r1, r4, r8
   19914:	mov	r3, #0
   19918:	udiv	r0, r0, r8
   1991c:	cmp	r0, r4
   19920:	mvncc	r1, #0
   19924:	cmp	r0, r1
   19928:	mul	r2, r1, r8
   1992c:	mov	r1, #0
   19930:	mvncc	r2, #0
   19934:	movwcc	r3, #1
   19938:	cmp	r0, r4
   1993c:	movwcc	r1, #1
   19940:	mov	r4, r2
   19944:	orr	r0, r1, r3
   19948:	b	19d34 <__assert_fail@plt+0x8530>
   1994c:	mvn	r0, #0
   19950:	mul	r1, r4, r8
   19954:	mov	r7, #0
   19958:	udiv	r0, r0, r8
   1995c:	cmp	r0, r4
   19960:	mvncc	r1, #0
   19964:	mul	r2, r1, r8
   19968:	cmp	r0, r1
   1996c:	mvncc	r2, #0
   19970:	mul	r3, r2, r8
   19974:	cmp	r0, r2
   19978:	mvncc	r3, #0
   1997c:	cmp	r0, r3
   19980:	mul	ip, r3, r8
   19984:	mov	r3, #0
   19988:	mvncc	ip, #0
   1998c:	movwcc	r7, #1
   19990:	cmp	r0, r2
   19994:	mov	r2, #0
   19998:	movwcc	r2, #1
   1999c:	cmp	r0, r1
   199a0:	mov	r1, #0
   199a4:	movwcc	r1, #1
   199a8:	cmp	r0, r4
   199ac:	mov	r4, ip
   199b0:	movwcc	r3, #1
   199b4:	orr	r0, r3, r1
   199b8:	orr	r0, r0, r2
   199bc:	orr	r0, r0, r7
   199c0:	b	19d34 <__assert_fail@plt+0x8530>
   199c4:	mvn	r0, #0
   199c8:	str	lr, [sp, #8]
   199cc:	mul	lr, r4, r8
   199d0:	udiv	r0, r0, r8
   199d4:	cmp	r0, r4
   199d8:	mvncc	lr, #0
   199dc:	mul	r9, lr, r8
   199e0:	cmp	r0, lr
   199e4:	mvncc	r9, #0
   199e8:	mul	r7, r9, r8
   199ec:	cmp	r0, r9
   199f0:	mvncc	r7, #0
   199f4:	mul	r3, r7, r8
   199f8:	cmp	r0, r7
   199fc:	mvncc	r3, #0
   19a00:	mul	r1, r3, r8
   19a04:	cmp	r0, r3
   19a08:	mvncc	r1, #0
   19a0c:	mul	r2, r1, r8
   19a10:	cmp	r0, r1
   19a14:	mvncc	r2, #0
   19a18:	mul	ip, r2, r8
   19a1c:	cmp	r0, r2
   19a20:	mov	r8, #0
   19a24:	mov	r2, #0
   19a28:	mvncc	ip, #0
   19a2c:	movwcc	r8, #1
   19a30:	cmp	r0, r1
   19a34:	mov	r1, #0
   19a38:	movwcc	r1, #1
   19a3c:	cmp	r0, r3
   19a40:	mov	r3, #0
   19a44:	movwcc	r3, #1
   19a48:	cmp	r0, r7
   19a4c:	mov	r7, #0
   19a50:	movwcc	r7, #1
   19a54:	cmp	r0, r9
   19a58:	mov	r9, #0
   19a5c:	movwcc	r9, #1
   19a60:	cmp	r0, lr
   19a64:	mov	lr, #0
   19a68:	movwcc	lr, #1
   19a6c:	cmp	r0, r4
   19a70:	mov	r4, ip
   19a74:	movwcc	r2, #1
   19a78:	orr	r0, r2, lr
   19a7c:	ldr	lr, [sp, #8]
   19a80:	orr	r0, r0, r9
   19a84:	orr	r0, r0, r7
   19a88:	orr	r0, r0, r3
   19a8c:	orr	r0, r0, r1
   19a90:	b	19cf0 <__assert_fail@plt+0x84ec>
   19a94:	mov	r1, #0
   19a98:	lsr	r0, r4, #22
   19a9c:	cmp	r1, r4, lsr #22
   19aa0:	lsl	r4, r4, #10
   19aa4:	movwne	r0, #1
   19aa8:	mvnne	r4, #0
   19aac:	b	19d34 <__assert_fail@plt+0x8530>
   19ab0:	mvn	r0, #0
   19ab4:	mul	ip, r4, r8
   19ab8:	str	lr, [sp, #8]
   19abc:	mov	r9, #0
   19ac0:	udiv	r0, r0, r8
   19ac4:	cmp	r0, r4
   19ac8:	mvncc	ip, #0
   19acc:	mul	r2, ip, r8
   19ad0:	cmp	r0, ip
   19ad4:	mvncc	r2, #0
   19ad8:	mul	r3, r2, r8
   19adc:	cmp	r0, r2
   19ae0:	mvncc	r3, #0
   19ae4:	mul	r7, r3, r8
   19ae8:	cmp	r0, r3
   19aec:	mvncc	r7, #0
   19af0:	mul	r1, r7, r8
   19af4:	cmp	r0, r7
   19af8:	mvncc	r1, #0
   19afc:	mul	lr, r1, r8
   19b00:	cmp	r0, r1
   19b04:	mov	r8, #0
   19b08:	mov	r1, #0
   19b0c:	mvncc	lr, #0
   19b10:	movwcc	r8, #1
   19b14:	cmp	r0, r7
   19b18:	mov	r7, #0
   19b1c:	movwcc	r7, #1
   19b20:	cmp	r0, r3
   19b24:	mov	r3, #0
   19b28:	movwcc	r3, #1
   19b2c:	cmp	r0, r2
   19b30:	mov	r2, #0
   19b34:	movwcc	r2, #1
   19b38:	cmp	r0, ip
   19b3c:	movwcc	r1, #1
   19b40:	cmp	r0, r4
   19b44:	mov	r4, lr
   19b48:	ldr	lr, [sp, #8]
   19b4c:	movwcc	r9, #1
   19b50:	orr	r0, r9, r1
   19b54:	orr	r0, r0, r2
   19b58:	orr	r0, r0, r3
   19b5c:	orr	r0, r0, r7
   19b60:	orr	r0, r0, r8
   19b64:	b	19d34 <__assert_fail@plt+0x8530>
   19b68:	mvn	r0, #0
   19b6c:	mul	r1, r4, r8
   19b70:	udiv	r0, r0, r8
   19b74:	cmp	r0, r4
   19b78:	mvncc	r1, #0
   19b7c:	mul	r2, r1, r8
   19b80:	cmp	r0, r1
   19b84:	mvncc	r2, #0
   19b88:	mul	r3, r2, r8
   19b8c:	cmp	r0, r2
   19b90:	mvncc	r3, #0
   19b94:	mul	r7, r3, r8
   19b98:	cmp	r0, r3
   19b9c:	mvncc	r7, #0
   19ba0:	mul	ip, r7, r8
   19ba4:	cmp	r0, r7
   19ba8:	mov	r8, lr
   19bac:	mov	lr, #0
   19bb0:	mov	r7, #0
   19bb4:	mvncc	ip, #0
   19bb8:	movwcc	lr, #1
   19bbc:	cmp	r0, r3
   19bc0:	mov	r3, #0
   19bc4:	movwcc	r3, #1
   19bc8:	cmp	r0, r2
   19bcc:	mov	r2, #0
   19bd0:	movwcc	r2, #1
   19bd4:	cmp	r0, r1
   19bd8:	mov	r1, #0
   19bdc:	movwcc	r1, #1
   19be0:	cmp	r0, r4
   19be4:	mov	r4, ip
   19be8:	movwcc	r7, #1
   19bec:	orr	r0, r7, r1
   19bf0:	orr	r0, r0, r2
   19bf4:	orr	r0, r0, r3
   19bf8:	orr	r0, r0, lr
   19bfc:	mov	lr, r8
   19c00:	b	19d34 <__assert_fail@plt+0x8530>
   19c04:	mvn	r0, #0
   19c08:	str	lr, [sp, #8]
   19c0c:	mul	lr, r4, r8
   19c10:	udiv	r0, r0, r8
   19c14:	cmp	r0, r4
   19c18:	mvncc	lr, #0
   19c1c:	mul	r9, lr, r8
   19c20:	cmp	r0, lr
   19c24:	mvncc	r9, #0
   19c28:	mul	r7, r9, r8
   19c2c:	cmp	r0, r9
   19c30:	mvncc	r7, #0
   19c34:	mul	r3, r7, r8
   19c38:	cmp	r0, r7
   19c3c:	mvncc	r3, #0
   19c40:	mul	r1, r3, r8
   19c44:	cmp	r0, r3
   19c48:	mvncc	r1, #0
   19c4c:	mul	r2, r1, r8
   19c50:	cmp	r0, r1
   19c54:	mvncc	r2, #0
   19c58:	mul	ip, r2, r8
   19c5c:	cmp	r0, r2
   19c60:	mvncc	ip, #0
   19c64:	mul	r8, ip, r8
   19c68:	cmp	r0, ip
   19c6c:	mov	ip, #0
   19c70:	mvncc	r8, #0
   19c74:	str	r8, [sp, #4]
   19c78:	mov	r8, #0
   19c7c:	movwcc	r8, #1
   19c80:	cmp	r0, r2
   19c84:	mov	r2, #0
   19c88:	movwcc	r2, #1
   19c8c:	cmp	r0, r1
   19c90:	mov	r1, #0
   19c94:	movwcc	r1, #1
   19c98:	cmp	r0, r3
   19c9c:	mov	r3, #0
   19ca0:	movwcc	r3, #1
   19ca4:	cmp	r0, r7
   19ca8:	mov	r7, #0
   19cac:	movwcc	r7, #1
   19cb0:	cmp	r0, r9
   19cb4:	mov	r9, #0
   19cb8:	movwcc	r9, #1
   19cbc:	cmp	r0, lr
   19cc0:	mov	lr, #0
   19cc4:	movwcc	lr, #1
   19cc8:	cmp	r0, r4
   19ccc:	ldr	r4, [sp, #4]
   19cd0:	movwcc	ip, #1
   19cd4:	orr	r0, ip, lr
   19cd8:	ldr	lr, [sp, #8]
   19cdc:	orr	r0, r0, r9
   19ce0:	orr	r0, r0, r7
   19ce4:	orr	r0, r0, r3
   19ce8:	orr	r0, r0, r1
   19cec:	orr	r0, r0, r2
   19cf0:	orr	r0, r0, r8
   19cf4:	and	r0, r0, #1
   19cf8:	b	19d34 <__assert_fail@plt+0x8530>
   19cfc:	movw	r0, #65535	; 0xffff
   19d00:	movt	r0, #63	; 0x3f
   19d04:	add	r1, r0, #4194304	; 0x400000
   19d08:	mov	r0, #0
   19d0c:	cmp	r4, r1
   19d10:	lsl	r4, r4, #9
   19d14:	movwhi	r0, #1
   19d18:	mvnhi	r4, #0
   19d1c:	b	19d34 <__assert_fail@plt+0x8530>
   19d20:	lsl	r1, r4, #1
   19d24:	cmp	r4, #0
   19d28:	lsr	r0, r4, #31
   19d2c:	mvnlt	r1, #0
   19d30:	mov	r4, r1
   19d34:	add	r1, r5, lr
   19d38:	orr	sl, r0, sl
   19d3c:	str	r1, [r6]
   19d40:	ldrb	r1, [r5, lr]
   19d44:	cmp	r1, #0
   19d48:	orrne	sl, sl, #2
   19d4c:	ldr	r0, [sp, #12]
   19d50:	str	r4, [r0]
   19d54:	mov	r0, sl
   19d58:	sub	sp, fp, #28
   19d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d60:	movw	r0, #51823	; 0xca6f
   19d64:	movw	r1, #51861	; 0xca95
   19d68:	movw	r3, #51873	; 0xcaa1
   19d6c:	mov	r2, #84	; 0x54
   19d70:	movt	r0, #1
   19d74:	movt	r1, #1
   19d78:	movt	r3, #1
   19d7c:	bl	11804 <__assert_fail@plt>
   19d80:	clz	r2, r1
   19d84:	clz	r3, r0
   19d88:	lsr	r2, r2, #5
   19d8c:	lsr	r3, r3, #5
   19d90:	orrs	r2, r3, r2
   19d94:	movwne	r1, #1
   19d98:	movwne	r0, #1
   19d9c:	cmp	r1, #0
   19da0:	beq	19dd0 <__assert_fail@plt+0x85cc>
   19da4:	mvn	r2, #-2147483648	; 0x80000000
   19da8:	udiv	r2, r2, r1
   19dac:	cmp	r2, r0
   19db0:	bcs	19dd0 <__assert_fail@plt+0x85cc>
   19db4:	push	{fp, lr}
   19db8:	mov	fp, sp
   19dbc:	bl	11684 <__errno_location@plt>
   19dc0:	mov	r1, #12
   19dc4:	str	r1, [r0]
   19dc8:	mov	r0, #0
   19dcc:	pop	{fp, pc}
   19dd0:	b	11438 <calloc@plt>
   19dd4:	sub	sp, sp, #8
   19dd8:	push	{r4, r5, r6, r7, fp, lr}
   19ddc:	add	fp, sp, #16
   19de0:	sub	sp, sp, #8
   19de4:	mov	r5, r0
   19de8:	add	r0, fp, #8
   19dec:	cmp	r1, #11
   19df0:	str	r3, [fp, #12]
   19df4:	str	r2, [fp, #8]
   19df8:	str	r0, [sp, #4]
   19dfc:	bhi	19e38 <__assert_fail@plt+0x8634>
   19e00:	mov	r0, #1
   19e04:	movw	r2, #1300	; 0x514
   19e08:	tst	r2, r0, lsl r1
   19e0c:	bne	19ef8 <__assert_fail@plt+0x86f4>
   19e10:	movw	r2, #2570	; 0xa0a
   19e14:	tst	r2, r0, lsl r1
   19e18:	bne	19e60 <__assert_fail@plt+0x865c>
   19e1c:	cmp	r1, #0
   19e20:	bne	19e38 <__assert_fail@plt+0x8634>
   19e24:	ldr	r0, [sp, #4]
   19e28:	add	r1, r0, #4
   19e2c:	str	r1, [sp, #4]
   19e30:	mov	r1, #0
   19e34:	b	19f04 <__assert_fail@plt+0x8700>
   19e38:	sub	r0, r1, #1024	; 0x400
   19e3c:	cmp	r0, #10
   19e40:	bhi	19ef8 <__assert_fail@plt+0x86f4>
   19e44:	mov	r2, #1
   19e48:	movw	r3, #645	; 0x285
   19e4c:	tst	r3, r2, lsl r0
   19e50:	bne	19ef8 <__assert_fail@plt+0x86f4>
   19e54:	movw	r3, #1282	; 0x502
   19e58:	tst	r3, r2, lsl r0
   19e5c:	beq	19e6c <__assert_fail@plt+0x8668>
   19e60:	mov	r0, r5
   19e64:	bl	11714 <fcntl64@plt>
   19e68:	b	19f10 <__assert_fail@plt+0x870c>
   19e6c:	cmp	r0, #6
   19e70:	bne	19ef8 <__assert_fail@plt+0x86f4>
   19e74:	ldr	r0, [sp, #4]
   19e78:	movw	r7, #54248	; 0xd3e8
   19e7c:	movt	r7, #2
   19e80:	add	r1, r0, #4
   19e84:	str	r1, [sp, #4]
   19e88:	ldr	r6, [r0]
   19e8c:	ldr	r0, [r7]
   19e90:	cmp	r0, #0
   19e94:	blt	19f34 <__assert_fail@plt+0x8730>
   19e98:	mov	r0, r5
   19e9c:	movw	r1, #1030	; 0x406
   19ea0:	mov	r2, r6
   19ea4:	bl	11714 <fcntl64@plt>
   19ea8:	mov	r4, r0
   19eac:	cmn	r0, #1
   19eb0:	bgt	19f28 <__assert_fail@plt+0x8724>
   19eb4:	bl	11684 <__errno_location@plt>
   19eb8:	ldr	r0, [r0]
   19ebc:	cmp	r0, #22
   19ec0:	bne	19f28 <__assert_fail@plt+0x8724>
   19ec4:	mov	r0, r5
   19ec8:	mov	r1, #0
   19ecc:	mov	r2, r6
   19ed0:	bl	11714 <fcntl64@plt>
   19ed4:	mov	r4, r0
   19ed8:	cmp	r0, #0
   19edc:	blt	19f14 <__assert_fail@plt+0x8710>
   19ee0:	mvn	r0, #0
   19ee4:	str	r0, [r7]
   19ee8:	mov	r0, #1
   19eec:	cmp	r0, #0
   19ef0:	bne	19f60 <__assert_fail@plt+0x875c>
   19ef4:	b	19f14 <__assert_fail@plt+0x8710>
   19ef8:	ldr	r0, [sp, #4]
   19efc:	add	r2, r0, #4
   19f00:	str	r2, [sp, #4]
   19f04:	ldr	r2, [r0]
   19f08:	mov	r0, r5
   19f0c:	bl	11714 <fcntl64@plt>
   19f10:	mov	r4, r0
   19f14:	mov	r0, r4
   19f18:	sub	sp, fp, #16
   19f1c:	pop	{r4, r5, r6, r7, fp, lr}
   19f20:	add	sp, sp, #8
   19f24:	bx	lr
   19f28:	mov	r0, #1
   19f2c:	str	r0, [r7]
   19f30:	b	19f14 <__assert_fail@plt+0x8710>
   19f34:	mov	r0, r5
   19f38:	mov	r1, #0
   19f3c:	mov	r2, r6
   19f40:	bl	11714 <fcntl64@plt>
   19f44:	mov	r4, r0
   19f48:	ldr	r0, [r7]
   19f4c:	add	r0, r0, #1
   19f50:	clz	r0, r0
   19f54:	lsr	r0, r0, #5
   19f58:	cmp	r0, #0
   19f5c:	beq	19f14 <__assert_fail@plt+0x8710>
   19f60:	cmp	r4, #0
   19f64:	blt	19f14 <__assert_fail@plt+0x8710>
   19f68:	mov	r0, r4
   19f6c:	mov	r1, #1
   19f70:	bl	11714 <fcntl64@plt>
   19f74:	cmp	r0, #0
   19f78:	blt	19f94 <__assert_fail@plt+0x8790>
   19f7c:	orr	r2, r0, #1
   19f80:	mov	r0, r4
   19f84:	mov	r1, #2
   19f88:	bl	11714 <fcntl64@plt>
   19f8c:	cmn	r0, #1
   19f90:	bne	19f14 <__assert_fail@plt+0x8710>
   19f94:	bl	11684 <__errno_location@plt>
   19f98:	ldr	r6, [r0]
   19f9c:	mov	r5, r0
   19fa0:	mov	r0, r4
   19fa4:	bl	117ec <close@plt>
   19fa8:	str	r6, [r5]
   19fac:	mvn	r4, #0
   19fb0:	b	19f14 <__assert_fail@plt+0x8710>
   19fb4:	push	{r4, sl, fp, lr}
   19fb8:	add	fp, sp, #8
   19fbc:	sub	sp, sp, #8
   19fc0:	mov	r4, r0
   19fc4:	cmp	r0, #0
   19fc8:	beq	19fe4 <__assert_fail@plt+0x87e0>
   19fcc:	mov	r0, r4
   19fd0:	bl	11600 <__freading@plt>
   19fd4:	cmp	r0, #0
   19fd8:	ldrbne	r0, [r4, #1]
   19fdc:	tstne	r0, #1
   19fe0:	bne	19ff4 <__assert_fail@plt+0x87f0>
   19fe4:	mov	r0, r4
   19fe8:	sub	sp, fp, #8
   19fec:	pop	{r4, sl, fp, lr}
   19ff0:	b	11474 <fflush@plt>
   19ff4:	mov	r0, #1
   19ff8:	mov	r2, #0
   19ffc:	mov	r3, #0
   1a000:	str	r0, [sp]
   1a004:	mov	r0, r4
   1a008:	bl	1a074 <__assert_fail@plt+0x8870>
   1a00c:	b	19fe4 <__assert_fail@plt+0x87e0>
   1a010:	ldrd	r2, [r0, #16]
   1a014:	mov	r1, #0
   1a018:	cmp	r3, r2
   1a01c:	bhi	1a044 <__assert_fail@plt+0x8840>
   1a020:	ldmib	r0, {r1, r2}
   1a024:	ldrb	r3, [r0, #1]
   1a028:	sub	r1, r2, r1
   1a02c:	mov	r2, #0
   1a030:	tst	r3, #1
   1a034:	ldrne	r2, [r0, #36]	; 0x24
   1a038:	ldrne	r0, [r0, #44]	; 0x2c
   1a03c:	subne	r2, r0, r2
   1a040:	add	r1, r1, r2
   1a044:	mov	r0, r1
   1a048:	bx	lr
   1a04c:	push	{r4, r5, r6, sl, fp, lr}
   1a050:	add	fp, sp, #16
   1a054:	mov	r4, r0
   1a058:	bl	11684 <__errno_location@plt>
   1a05c:	ldr	r6, [r0]
   1a060:	mov	r5, r0
   1a064:	mov	r0, r4
   1a068:	bl	1148c <free@plt>
   1a06c:	str	r6, [r5]
   1a070:	pop	{r4, r5, r6, sl, fp, pc}
   1a074:	push	{r4, r5, r6, r7, fp, lr}
   1a078:	add	fp, sp, #16
   1a07c:	sub	sp, sp, #8
   1a080:	mov	r4, r0
   1a084:	ldr	r0, [r0, #4]
   1a088:	mov	r5, r3
   1a08c:	mov	r6, r2
   1a090:	ldr	r1, [r4, #8]
   1a094:	cmp	r1, r0
   1a098:	bne	1a0b4 <__assert_fail@plt+0x88b0>
   1a09c:	ldrd	r0, [r4, #16]
   1a0a0:	cmp	r1, r0
   1a0a4:	bne	1a0b4 <__assert_fail@plt+0x88b0>
   1a0a8:	ldr	r0, [r4, #36]	; 0x24
   1a0ac:	cmp	r0, #0
   1a0b0:	beq	1a0cc <__assert_fail@plt+0x88c8>
   1a0b4:	mov	r0, r4
   1a0b8:	mov	r2, r6
   1a0bc:	mov	r3, r5
   1a0c0:	sub	sp, fp, #16
   1a0c4:	pop	{r4, r5, r6, r7, fp, lr}
   1a0c8:	b	11708 <fseeko64@plt>
   1a0cc:	ldr	r7, [fp, #8]
   1a0d0:	mov	r0, r4
   1a0d4:	bl	116cc <fileno@plt>
   1a0d8:	mov	r2, r6
   1a0dc:	mov	r3, r5
   1a0e0:	str	r7, [sp]
   1a0e4:	bl	11570 <lseek64@plt>
   1a0e8:	and	r2, r0, r1
   1a0ec:	cmn	r2, #1
   1a0f0:	mvneq	r0, #0
   1a0f4:	subeq	sp, fp, #16
   1a0f8:	popeq	{r4, r5, r6, r7, fp, pc}
   1a0fc:	strd	r0, [r4, #80]	; 0x50
   1a100:	ldr	r0, [r4]
   1a104:	bic	r0, r0, #16
   1a108:	str	r0, [r4]
   1a10c:	mov	r0, #0
   1a110:	sub	sp, fp, #16
   1a114:	pop	{r4, r5, r6, r7, fp, pc}
   1a118:	cmp	r0, #0
   1a11c:	movweq	r0, #1
   1a120:	cmn	r0, #1
   1a124:	ble	1a12c <__assert_fail@plt+0x8928>
   1a128:	b	115e8 <malloc@plt>
   1a12c:	push	{fp, lr}
   1a130:	mov	fp, sp
   1a134:	bl	11684 <__errno_location@plt>
   1a138:	mov	r1, #12
   1a13c:	str	r1, [r0]
   1a140:	mov	r0, #0
   1a144:	pop	{fp, pc}
   1a148:	push	{r4, r5, r6, r7, fp, lr}
   1a14c:	add	fp, sp, #16
   1a150:	sub	sp, sp, #8
   1a154:	add	r5, sp, #4
   1a158:	cmp	r0, #0
   1a15c:	mov	r7, r2
   1a160:	mov	r4, r1
   1a164:	movne	r5, r0
   1a168:	mov	r0, r5
   1a16c:	bl	115ac <mbrtowc@plt>
   1a170:	mov	r6, r0
   1a174:	cmp	r7, #0
   1a178:	beq	1a19c <__assert_fail@plt+0x8998>
   1a17c:	cmn	r6, #2
   1a180:	bcc	1a19c <__assert_fail@plt+0x8998>
   1a184:	mov	r0, #0
   1a188:	bl	1a2c0 <__assert_fail@plt+0x8abc>
   1a18c:	cmp	r0, #0
   1a190:	ldrbeq	r0, [r4]
   1a194:	moveq	r6, #1
   1a198:	streq	r0, [r5]
   1a19c:	mov	r0, r6
   1a1a0:	sub	sp, fp, #16
   1a1a4:	pop	{r4, r5, r6, r7, fp, pc}
   1a1a8:	push	{fp, lr}
   1a1ac:	mov	fp, sp
   1a1b0:	cmp	r0, #0
   1a1b4:	beq	1a1d0 <__assert_fail@plt+0x89cc>
   1a1b8:	cmp	r1, #0
   1a1bc:	beq	1a1dc <__assert_fail@plt+0x89d8>
   1a1c0:	cmn	r1, #1
   1a1c4:	ble	1a1e8 <__assert_fail@plt+0x89e4>
   1a1c8:	pop	{fp, lr}
   1a1cc:	b	1151c <realloc@plt>
   1a1d0:	mov	r0, r1
   1a1d4:	pop	{fp, lr}
   1a1d8:	b	1a118 <__assert_fail@plt+0x8914>
   1a1dc:	bl	1a04c <__assert_fail@plt+0x8848>
   1a1e0:	mov	r0, #0
   1a1e4:	pop	{fp, pc}
   1a1e8:	bl	11684 <__errno_location@plt>
   1a1ec:	mov	r1, #12
   1a1f0:	str	r1, [r0]
   1a1f4:	mov	r0, #0
   1a1f8:	pop	{fp, pc}
   1a1fc:	cmp	r2, #0
   1a200:	beq	1a230 <__assert_fail@plt+0x8a2c>
   1a204:	mvn	r3, #0
   1a208:	udiv	r3, r3, r2
   1a20c:	cmp	r3, r1
   1a210:	bcs	1a230 <__assert_fail@plt+0x8a2c>
   1a214:	push	{fp, lr}
   1a218:	mov	fp, sp
   1a21c:	bl	11684 <__errno_location@plt>
   1a220:	mov	r1, #12
   1a224:	str	r1, [r0]
   1a228:	mov	r0, #0
   1a22c:	pop	{fp, pc}
   1a230:	mul	r1, r2, r1
   1a234:	b	1a1a8 <__assert_fail@plt+0x89a4>
   1a238:	push	{r4, r5, r6, sl, fp, lr}
   1a23c:	add	fp, sp, #16
   1a240:	mov	r4, r0
   1a244:	bl	115a0 <__fpending@plt>
   1a248:	mov	r5, r0
   1a24c:	mov	r0, r4
   1a250:	bl	11498 <ferror@plt>
   1a254:	mov	r6, r0
   1a258:	mov	r0, r4
   1a25c:	bl	116e4 <fclose@plt>
   1a260:	cmp	r6, #0
   1a264:	beq	1a284 <__assert_fail@plt+0x8a80>
   1a268:	mvn	r4, #0
   1a26c:	cmp	r0, #0
   1a270:	bne	1a2b8 <__assert_fail@plt+0x8ab4>
   1a274:	bl	11684 <__errno_location@plt>
   1a278:	mov	r1, #0
   1a27c:	str	r1, [r0]
   1a280:	b	1a2b8 <__assert_fail@plt+0x8ab4>
   1a284:	cmp	r0, #0
   1a288:	mov	r4, r0
   1a28c:	mvnne	r4, #0
   1a290:	cmp	r5, #0
   1a294:	bne	1a2b8 <__assert_fail@plt+0x8ab4>
   1a298:	cmp	r0, #0
   1a29c:	beq	1a2b8 <__assert_fail@plt+0x8ab4>
   1a2a0:	bl	11684 <__errno_location@plt>
   1a2a4:	ldr	r0, [r0]
   1a2a8:	subs	r4, r0, #9
   1a2ac:	mvnne	r4, #0
   1a2b0:	mov	r0, r4
   1a2b4:	pop	{r4, r5, r6, sl, fp, pc}
   1a2b8:	mov	r0, r4
   1a2bc:	pop	{r4, r5, r6, sl, fp, pc}
   1a2c0:	push	{r4, sl, fp, lr}
   1a2c4:	add	fp, sp, #8
   1a2c8:	sub	sp, sp, #264	; 0x108
   1a2cc:	add	r1, sp, #7
   1a2d0:	movw	r2, #257	; 0x101
   1a2d4:	bl	1a558 <__assert_fail@plt+0x8d54>
   1a2d8:	mov	r4, #0
   1a2dc:	cmp	r0, #0
   1a2e0:	bne	1a318 <__assert_fail@plt+0x8b14>
   1a2e4:	movw	r1, #51954	; 0xcaf2
   1a2e8:	add	r0, sp, #7
   1a2ec:	movt	r1, #1
   1a2f0:	bl	11444 <strcmp@plt>
   1a2f4:	cmp	r0, #0
   1a2f8:	beq	1a318 <__assert_fail@plt+0x8b14>
   1a2fc:	movw	r1, #51956	; 0xcaf4
   1a300:	add	r0, sp, #7
   1a304:	movt	r1, #1
   1a308:	bl	11444 <strcmp@plt>
   1a30c:	mov	r4, r0
   1a310:	cmp	r0, #0
   1a314:	movwne	r4, #1
   1a318:	mov	r0, r4
   1a31c:	sub	sp, fp, #8
   1a320:	pop	{r4, sl, fp, pc}
   1a324:	push	{fp, lr}
   1a328:	mov	fp, sp
   1a32c:	mov	r0, #14
   1a330:	bl	11750 <nl_langinfo@plt>
   1a334:	movw	r1, #45955	; 0xb383
   1a338:	cmp	r0, #0
   1a33c:	movt	r1, #1
   1a340:	movne	r1, r0
   1a344:	movw	r0, #51962	; 0xcafa
   1a348:	ldrb	r2, [r1]
   1a34c:	movt	r0, #1
   1a350:	cmp	r2, #0
   1a354:	movne	r0, r1
   1a358:	pop	{fp, pc}
   1a35c:	push	{r4, sl, fp, lr}
   1a360:	add	fp, sp, #8
   1a364:	mov	r4, #0
   1a368:	adds	r0, r0, #16
   1a36c:	adc	r1, r4, #0
   1a370:	rsb	r2, r1, #0
   1a374:	eors	r2, r2, r1
   1a378:	movwne	r2, #1
   1a37c:	cmp	r0, #0
   1a380:	blt	1a3a0 <__assert_fail@plt+0x8b9c>
   1a384:	cmp	r2, #0
   1a388:	asreq	r2, r0, #31
   1a38c:	eoreq	r3, r0, r0
   1a390:	andeq	r2, r2, #1
   1a394:	eoreq	r1, r1, r2
   1a398:	orrseq	r1, r3, r1
   1a39c:	beq	1a3a8 <__assert_fail@plt+0x8ba4>
   1a3a0:	mov	r0, r4
   1a3a4:	pop	{r4, sl, fp, pc}
   1a3a8:	bl	115e8 <malloc@plt>
   1a3ac:	cmp	r0, #0
   1a3b0:	addne	r4, r0, #8
   1a3b4:	movne	r1, #8
   1a3b8:	bfine	r4, r1, #0, #4
   1a3bc:	subne	r0, r4, r0
   1a3c0:	strbne	r0, [r4, #-1]
   1a3c4:	mov	r0, r4
   1a3c8:	pop	{r4, sl, fp, pc}
   1a3cc:	tst	r0, #7
   1a3d0:	bne	1a3e8 <__assert_fail@plt+0x8be4>
   1a3d4:	tst	r0, #8
   1a3d8:	bxeq	lr
   1a3dc:	ldrb	r1, [r0, #-1]
   1a3e0:	sub	r0, r0, r1
   1a3e4:	b	1a04c <__assert_fail@plt+0x8848>
   1a3e8:	push	{fp, lr}
   1a3ec:	mov	fp, sp
   1a3f0:	bl	117d4 <abort@plt>
   1a3f4:	push	{r4, sl, fp, lr}
   1a3f8:	add	fp, sp, #8
   1a3fc:	mov	r4, r0
   1a400:	bl	11480 <wcwidth@plt>
   1a404:	cmn	r0, #1
   1a408:	popgt	{r4, sl, fp, pc}
   1a40c:	mov	r0, r4
   1a410:	bl	11534 <iswcntrl@plt>
   1a414:	clz	r0, r0
   1a418:	lsr	r0, r0, #5
   1a41c:	pop	{r4, sl, fp, pc}
   1a420:	push	{r4, r5, r6, sl, fp, lr}
   1a424:	add	fp, sp, #16
   1a428:	mov	r4, r0
   1a42c:	mov	r0, r1
   1a430:	mov	r5, r1
   1a434:	ldr	r1, [r0], #16
   1a438:	cmp	r1, r0
   1a43c:	beq	1a448 <__assert_fail@plt+0x8c44>
   1a440:	mov	r6, r1
   1a444:	b	1a458 <__assert_fail@plt+0x8c54>
   1a448:	ldr	r2, [r5, #4]
   1a44c:	add	r6, r4, #16
   1a450:	mov	r0, r6
   1a454:	bl	114b0 <memcpy@plt>
   1a458:	str	r6, [r4]
   1a45c:	ldr	r0, [r5, #4]
   1a460:	str	r0, [r4, #4]
   1a464:	ldrb	r0, [r5, #8]
   1a468:	strb	r0, [r4, #8]
   1a46c:	cmp	r0, #0
   1a470:	ldrne	r0, [r5, #12]
   1a474:	strne	r0, [r4, #12]
   1a478:	pop	{r4, r5, r6, sl, fp, pc}
   1a47c:	movw	r2, #51968	; 0xcb00
   1a480:	ubfx	r1, r0, #5, #3
   1a484:	and	r0, r0, #31
   1a488:	movt	r2, #1
   1a48c:	ldr	r1, [r2, r1, lsl #2]
   1a490:	mov	r2, #1
   1a494:	and	r0, r1, r2, lsl r0
   1a498:	cmp	r0, #0
   1a49c:	movwne	r0, #1
   1a4a0:	bx	lr
   1a4a4:	push	{r4, r5, r6, sl, fp, lr}
   1a4a8:	add	fp, sp, #16
   1a4ac:	sub	sp, sp, #56	; 0x38
   1a4b0:	mov	r5, r0
   1a4b4:	bl	11588 <__ctype_get_mb_cur_max@plt>
   1a4b8:	cmp	r0, #2
   1a4bc:	bcc	1a548 <__assert_fail@plt+0x8d44>
   1a4c0:	mov	r4, #0
   1a4c4:	mov	r0, sp
   1a4c8:	str	r4, [sp, #8]
   1a4cc:	str	r4, [sp, #4]
   1a4d0:	strb	r4, [sp]
   1a4d4:	str	r5, [sp, #16]
   1a4d8:	strb	r4, [sp, #12]
   1a4dc:	bl	16830 <__assert_fail@plt+0x502c>
   1a4e0:	ldrb	r0, [sp, #24]
   1a4e4:	cmp	r0, #0
   1a4e8:	beq	1a4f8 <__assert_fail@plt+0x8cf4>
   1a4ec:	ldr	r0, [sp, #28]
   1a4f0:	cmp	r0, #0
   1a4f4:	beq	1a53c <__assert_fail@plt+0x8d38>
   1a4f8:	mov	r6, #0
   1a4fc:	mov	r5, sp
   1a500:	mov	r4, #0
   1a504:	strb	r6, [sp, #12]
   1a508:	ldr	r0, [sp, #16]
   1a50c:	ldr	r1, [sp, #20]
   1a510:	add	r0, r0, r1
   1a514:	str	r0, [sp, #16]
   1a518:	mov	r0, r5
   1a51c:	bl	16830 <__assert_fail@plt+0x502c>
   1a520:	ldrb	r1, [sp, #24]
   1a524:	ldr	r0, [sp, #28]
   1a528:	add	r4, r4, #1
   1a52c:	cmp	r1, #0
   1a530:	beq	1a504 <__assert_fail@plt+0x8d00>
   1a534:	cmp	r0, #0
   1a538:	bne	1a504 <__assert_fail@plt+0x8d00>
   1a53c:	mov	r0, r4
   1a540:	sub	sp, fp, #16
   1a544:	pop	{r4, r5, r6, sl, fp, pc}
   1a548:	mov	r0, r5
   1a54c:	sub	sp, fp, #16
   1a550:	pop	{r4, r5, r6, sl, fp, lr}
   1a554:	b	11654 <strlen@plt>
   1a558:	push	{r4, r5, r6, r7, fp, lr}
   1a55c:	add	fp, sp, #16
   1a560:	mov	r4, r1
   1a564:	mov	r1, #0
   1a568:	mov	r6, r2
   1a56c:	bl	11720 <setlocale@plt>
   1a570:	cmp	r0, #0
   1a574:	beq	1a5a4 <__assert_fail@plt+0x8da0>
   1a578:	mov	r7, r0
   1a57c:	bl	11654 <strlen@plt>
   1a580:	cmp	r0, r6
   1a584:	bcs	1a5c4 <__assert_fail@plt+0x8dc0>
   1a588:	add	r2, r0, #1
   1a58c:	mov	r0, r4
   1a590:	mov	r1, r7
   1a594:	bl	114b0 <memcpy@plt>
   1a598:	mov	r5, #0
   1a59c:	mov	r0, r5
   1a5a0:	pop	{r4, r5, r6, r7, fp, pc}
   1a5a4:	cmp	r6, #0
   1a5a8:	mov	r5, #22
   1a5ac:	movne	r0, #0
   1a5b0:	strbne	r0, [r4]
   1a5b4:	movne	r0, r5
   1a5b8:	popne	{r4, r5, r6, r7, fp, pc}
   1a5bc:	mov	r0, r5
   1a5c0:	pop	{r4, r5, r6, r7, fp, pc}
   1a5c4:	mov	r5, #34	; 0x22
   1a5c8:	cmp	r6, #0
   1a5cc:	beq	1a5ec <__assert_fail@plt+0x8de8>
   1a5d0:	sub	r6, r6, #1
   1a5d4:	mov	r0, r4
   1a5d8:	mov	r1, r7
   1a5dc:	mov	r2, r6
   1a5e0:	bl	114b0 <memcpy@plt>
   1a5e4:	mov	r0, #0
   1a5e8:	strb	r0, [r4, r6]
   1a5ec:	mov	r0, r5
   1a5f0:	pop	{r4, r5, r6, r7, fp, pc}
   1a5f4:	mov	r1, #0
   1a5f8:	b	11720 <setlocale@plt>
   1a5fc:	mov	r1, #0
   1a600:	mov	r2, #3
   1a604:	b	19dd4 <__assert_fail@plt+0x85d0>
   1a608:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a60c:	mov	r7, r0
   1a610:	ldr	r6, [pc, #72]	; 1a660 <__assert_fail@plt+0x8e5c>
   1a614:	ldr	r5, [pc, #72]	; 1a664 <__assert_fail@plt+0x8e60>
   1a618:	add	r6, pc, r6
   1a61c:	add	r5, pc, r5
   1a620:	sub	r6, r6, r5
   1a624:	mov	r8, r1
   1a628:	mov	r9, r2
   1a62c:	bl	1140c <fdopen@plt-0x20>
   1a630:	asrs	r6, r6, #2
   1a634:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a638:	mov	r4, #0
   1a63c:	add	r4, r4, #1
   1a640:	ldr	r3, [r5], #4
   1a644:	mov	r2, r9
   1a648:	mov	r1, r8
   1a64c:	mov	r0, r7
   1a650:	blx	r3
   1a654:	cmp	r6, r4
   1a658:	bne	1a63c <__assert_fail@plt+0x8e38>
   1a65c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a660:	andeq	r2, r1, ip, ror #17
   1a664:	andeq	r2, r1, r4, ror #17
   1a668:	bx	lr
   1a66c:	ldr	r3, [pc, #12]	; 1a680 <__assert_fail@plt+0x8e7c>
   1a670:	mov	r1, #0
   1a674:	add	r3, pc, r3
   1a678:	ldr	r2, [r3]
   1a67c:	b	1169c <__cxa_atexit@plt>
   1a680:	andeq	r2, r1, r8, ror #21

Disassembly of section .fini:

0001a684 <.fini>:
   1a684:	push	{r3, lr}
   1a688:	pop	{r3, pc}
