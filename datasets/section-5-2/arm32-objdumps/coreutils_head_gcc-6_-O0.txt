
../repos/coreutils/src/head:     file format elf32-littlearm


Disassembly of section .init:

00010cc0 <.init>:
   10cc0:	push	{r3, lr}
   10cc4:	bl	10fbc <__assert_fail@plt+0x48>
   10cc8:	pop	{r3, pc}

Disassembly of section .plt:

00010ccc <calloc@plt-0x14>:
   10ccc:	push	{lr}		; (str lr, [sp, #-4]!)
   10cd0:	ldr	lr, [pc, #4]	; 10cdc <calloc@plt-0x4>
   10cd4:	add	lr, pc, lr
   10cd8:	ldr	pc, [lr, #8]!
   10cdc:	andeq	sl, r1, r4, lsr #6

00010ce0 <calloc@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #106496	; 0x1a000
   10ce8:	ldr	pc, [ip, #804]!	; 0x324

00010cec <fputs_unlocked@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #106496	; 0x1a000
   10cf4:	ldr	pc, [ip, #796]!	; 0x31c

00010cf8 <raise@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #106496	; 0x1a000
   10d00:	ldr	pc, [ip, #788]!	; 0x314

00010d04 <strcmp@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #106496	; 0x1a000
   10d0c:	ldr	pc, [ip, #780]!	; 0x30c

00010d10 <printf@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #106496	; 0x1a000
   10d18:	ldr	pc, [ip, #772]!	; 0x304

00010d1c <read@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #106496	; 0x1a000
   10d24:	ldr	pc, [ip, #764]!	; 0x2fc

00010d28 <fflush@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #106496	; 0x1a000
   10d30:	ldr	pc, [ip, #756]!	; 0x2f4

00010d34 <free@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #106496	; 0x1a000
   10d3c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d40 <_exit@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #106496	; 0x1a000
   10d48:	ldr	pc, [ip, #740]!	; 0x2e4

00010d4c <memcpy@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #106496	; 0x1a000
   10d54:	ldr	pc, [ip, #732]!	; 0x2dc

00010d58 <mbsinit@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #106496	; 0x1a000
   10d60:	ldr	pc, [ip, #724]!	; 0x2d4

00010d64 <fwrite_unlocked@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #106496	; 0x1a000
   10d6c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d70 <memcmp@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #106496	; 0x1a000
   10d78:	ldr	pc, [ip, #708]!	; 0x2c4

00010d7c <fputc_unlocked@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #106496	; 0x1a000
   10d84:	ldr	pc, [ip, #700]!	; 0x2bc

00010d88 <realloc@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #106496	; 0x1a000
   10d90:	ldr	pc, [ip, #692]!	; 0x2b4

00010d94 <textdomain@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #106496	; 0x1a000
   10d9c:	ldr	pc, [ip, #684]!	; 0x2ac

00010da0 <rawmemchr@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #106496	; 0x1a000
   10da8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dac <iswprint@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #106496	; 0x1a000
   10db4:	ldr	pc, [ip, #668]!	; 0x29c

00010db8 <__fxstat64@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #106496	; 0x1a000
   10dc0:	ldr	pc, [ip, #660]!	; 0x294

00010dc4 <fwrite@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #106496	; 0x1a000
   10dcc:	ldr	pc, [ip, #652]!	; 0x28c

00010dd0 <lseek64@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #106496	; 0x1a000
   10dd8:	ldr	pc, [ip, #644]!	; 0x284

00010ddc <__ctype_get_mb_cur_max@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #106496	; 0x1a000
   10de4:	ldr	pc, [ip, #636]!	; 0x27c

00010de8 <__fpending@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #106496	; 0x1a000
   10df0:	ldr	pc, [ip, #628]!	; 0x274

00010df4 <ferror_unlocked@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #106496	; 0x1a000
   10dfc:	ldr	pc, [ip, #620]!	; 0x26c

00010e00 <mbrtowc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #106496	; 0x1a000
   10e08:	ldr	pc, [ip, #612]!	; 0x264

00010e0c <error@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #106496	; 0x1a000
   10e14:	ldr	pc, [ip, #604]!	; 0x25c

00010e18 <open64@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #106496	; 0x1a000
   10e20:	ldr	pc, [ip, #596]!	; 0x254

00010e24 <malloc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #106496	; 0x1a000
   10e2c:	ldr	pc, [ip, #588]!	; 0x24c

00010e30 <__libc_start_main@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #106496	; 0x1a000
   10e38:	ldr	pc, [ip, #580]!	; 0x244

00010e3c <__freading@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #106496	; 0x1a000
   10e44:	ldr	pc, [ip, #572]!	; 0x23c

00010e48 <__gmon_start__@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #106496	; 0x1a000
   10e50:	ldr	pc, [ip, #564]!	; 0x234

00010e54 <getopt_long@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #106496	; 0x1a000
   10e5c:	ldr	pc, [ip, #556]!	; 0x22c

00010e60 <__ctype_b_loc@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #106496	; 0x1a000
   10e68:	ldr	pc, [ip, #548]!	; 0x224

00010e6c <exit@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #106496	; 0x1a000
   10e74:	ldr	pc, [ip, #540]!	; 0x21c

00010e78 <gettext@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #106496	; 0x1a000
   10e80:	ldr	pc, [ip, #532]!	; 0x214

00010e84 <strlen@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #106496	; 0x1a000
   10e8c:	ldr	pc, [ip, #524]!	; 0x20c

00010e90 <strchr@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #106496	; 0x1a000
   10e98:	ldr	pc, [ip, #516]!	; 0x204

00010e9c <memrchr@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #106496	; 0x1a000
   10ea4:	ldr	pc, [ip, #508]!	; 0x1fc

00010ea8 <fprintf@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #106496	; 0x1a000
   10eb0:	ldr	pc, [ip, #500]!	; 0x1f4

00010eb4 <__errno_location@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #106496	; 0x1a000
   10ebc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec0 <__cxa_atexit@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #106496	; 0x1a000
   10ec8:	ldr	pc, [ip, #484]!	; 0x1e4

00010ecc <memset@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #106496	; 0x1a000
   10ed4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ed8 <fileno@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #106496	; 0x1a000
   10ee0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ee4 <strtoumax@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #106496	; 0x1a000
   10eec:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef0 <memchr@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #106496	; 0x1a000
   10ef8:	ldr	pc, [ip, #452]!	; 0x1c4

00010efc <fclose@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #106496	; 0x1a000
   10f04:	ldr	pc, [ip, #444]!	; 0x1bc

00010f08 <fseeko64@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #106496	; 0x1a000
   10f10:	ldr	pc, [ip, #436]!	; 0x1b4

00010f14 <setlocale@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #106496	; 0x1a000
   10f1c:	ldr	pc, [ip, #428]!	; 0x1ac

00010f20 <strrchr@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #106496	; 0x1a000
   10f28:	ldr	pc, [ip, #420]!	; 0x1a4

00010f2c <nl_langinfo@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #106496	; 0x1a000
   10f34:	ldr	pc, [ip, #412]!	; 0x19c

00010f38 <clearerr_unlocked@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #106496	; 0x1a000
   10f40:	ldr	pc, [ip, #404]!	; 0x194

00010f44 <bindtextdomain@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #106496	; 0x1a000
   10f4c:	ldr	pc, [ip, #396]!	; 0x18c

00010f50 <strncmp@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #106496	; 0x1a000
   10f58:	ldr	pc, [ip, #388]!	; 0x184

00010f5c <abort@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #106496	; 0x1a000
   10f64:	ldr	pc, [ip, #380]!	; 0x17c

00010f68 <close@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #106496	; 0x1a000
   10f70:	ldr	pc, [ip, #372]!	; 0x174

00010f74 <__assert_fail@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #106496	; 0x1a000
   10f7c:	ldr	pc, [ip, #364]!	; 0x16c

Disassembly of section .text:

00010f80 <.text>:
   10f80:	mov	fp, #0
   10f84:	mov	lr, #0
   10f88:	pop	{r1}		; (ldr r1, [sp], #4)
   10f8c:	mov	r2, sp
   10f90:	push	{r2}		; (str r2, [sp, #-4]!)
   10f94:	push	{r0}		; (str r0, [sp, #-4]!)
   10f98:	ldr	ip, [pc, #16]	; 10fb0 <__assert_fail@plt+0x3c>
   10f9c:	push	{ip}		; (str ip, [sp, #-4]!)
   10fa0:	ldr	r0, [pc, #12]	; 10fb4 <__assert_fail@plt+0x40>
   10fa4:	ldr	r3, [pc, #12]	; 10fb8 <__assert_fail@plt+0x44>
   10fa8:	bl	10e30 <__libc_start_main@plt>
   10fac:	bl	10f5c <abort@plt>
   10fb0:	andeq	r9, r1, r0, asr #27
   10fb4:	andeq	r3, r1, ip, asr r5
   10fb8:	andeq	r9, r1, r0, ror #26
   10fbc:	ldr	r3, [pc, #20]	; 10fd8 <__assert_fail@plt+0x64>
   10fc0:	ldr	r2, [pc, #20]	; 10fdc <__assert_fail@plt+0x68>
   10fc4:	add	r3, pc, r3
   10fc8:	ldr	r2, [r3, r2]
   10fcc:	cmp	r2, #0
   10fd0:	bxeq	lr
   10fd4:	b	10e48 <__gmon_start__@plt>
   10fd8:	andeq	sl, r1, r4, lsr r0
   10fdc:	andeq	r0, r0, ip, ror #1
   10fe0:	ldr	r3, [pc, #28]	; 11004 <__assert_fail@plt+0x90>
   10fe4:	ldr	r0, [pc, #28]	; 11008 <__assert_fail@plt+0x94>
   10fe8:	sub	r3, r3, r0
   10fec:	cmp	r3, #6
   10ff0:	bxls	lr
   10ff4:	ldr	r3, [pc, #16]	; 1100c <__assert_fail@plt+0x98>
   10ff8:	cmp	r3, #0
   10ffc:	bxeq	lr
   11000:	bx	r3
   11004:	andeq	fp, r2, r7, asr #2
   11008:	andeq	fp, r2, r4, asr #2
   1100c:	andeq	r0, r0, r0
   11010:	ldr	r1, [pc, #36]	; 1103c <__assert_fail@plt+0xc8>
   11014:	ldr	r0, [pc, #36]	; 11040 <__assert_fail@plt+0xcc>
   11018:	sub	r1, r1, r0
   1101c:	asr	r1, r1, #2
   11020:	add	r1, r1, r1, lsr #31
   11024:	asrs	r1, r1, #1
   11028:	bxeq	lr
   1102c:	ldr	r3, [pc, #16]	; 11044 <__assert_fail@plt+0xd0>
   11030:	cmp	r3, #0
   11034:	bxeq	lr
   11038:	bx	r3
   1103c:	andeq	fp, r2, r4, asr #2
   11040:	andeq	fp, r2, r4, asr #2
   11044:	andeq	r0, r0, r0
   11048:	push	{r4, lr}
   1104c:	ldr	r4, [pc, #24]	; 1106c <__assert_fail@plt+0xf8>
   11050:	ldrb	r3, [r4]
   11054:	cmp	r3, #0
   11058:	popne	{r4, pc}
   1105c:	bl	10fe0 <__assert_fail@plt+0x6c>
   11060:	mov	r3, #1
   11064:	strb	r3, [r4]
   11068:	pop	{r4, pc}
   1106c:	andeq	fp, r2, r4, ror #2
   11070:	ldr	r0, [pc, #40]	; 110a0 <__assert_fail@plt+0x12c>
   11074:	ldr	r3, [r0]
   11078:	cmp	r3, #0
   1107c:	bne	11084 <__assert_fail@plt+0x110>
   11080:	b	11010 <__assert_fail@plt+0x9c>
   11084:	ldr	r3, [pc, #24]	; 110a4 <__assert_fail@plt+0x130>
   11088:	cmp	r3, #0
   1108c:	beq	11080 <__assert_fail@plt+0x10c>
   11090:	push	{r4, lr}
   11094:	blx	r3
   11098:	pop	{r4, lr}
   1109c:	b	11010 <__assert_fail@plt+0x9c>
   110a0:	andeq	sl, r2, r4, lsl pc
   110a4:	andeq	r0, r0, r0
   110a8:	push	{fp, lr}
   110ac:	add	fp, sp, #4
   110b0:	ldr	r0, [pc, #32]	; 110d8 <__assert_fail@plt+0x164>
   110b4:	bl	10e78 <gettext@plt>
   110b8:	mov	r2, r0
   110bc:	ldr	r3, [pc, #24]	; 110dc <__assert_fail@plt+0x168>
   110c0:	ldr	r3, [r3]
   110c4:	mov	r1, r3
   110c8:	mov	r0, r2
   110cc:	bl	10cec <fputs_unlocked@plt>
   110d0:	nop			; (mov r0, r0)
   110d4:	pop	{fp, pc}
   110d8:	strdeq	r9, [r1], -r8
   110dc:	andeq	fp, r2, ip, asr r1
   110e0:	push	{fp, lr}
   110e4:	add	fp, sp, #4
   110e8:	ldr	r0, [pc, #32]	; 11110 <__assert_fail@plt+0x19c>
   110ec:	bl	10e78 <gettext@plt>
   110f0:	mov	r2, r0
   110f4:	ldr	r3, [pc, #24]	; 11114 <__assert_fail@plt+0x1a0>
   110f8:	ldr	r3, [r3]
   110fc:	mov	r1, r3
   11100:	mov	r0, r2
   11104:	bl	10cec <fputs_unlocked@plt>
   11108:	nop			; (mov r0, r0)
   1110c:	pop	{fp, pc}
   11110:	andeq	r9, r1, r0, lsr lr
   11114:	andeq	fp, r2, ip, asr r1
   11118:	push	{fp, lr}
   1111c:	add	fp, sp, #4
   11120:	sub	sp, sp, #80	; 0x50
   11124:	str	r0, [fp, #-80]	; 0xffffffb0
   11128:	ldr	r3, [pc, #348]	; 1128c <__assert_fail@plt+0x318>
   1112c:	sub	ip, fp, #72	; 0x48
   11130:	mov	lr, r3
   11134:	ldm	lr!, {r0, r1, r2, r3}
   11138:	stmia	ip!, {r0, r1, r2, r3}
   1113c:	ldm	lr!, {r0, r1, r2, r3}
   11140:	stmia	ip!, {r0, r1, r2, r3}
   11144:	ldm	lr!, {r0, r1, r2, r3}
   11148:	stmia	ip!, {r0, r1, r2, r3}
   1114c:	ldm	lr, {r0, r1}
   11150:	stm	ip, {r0, r1}
   11154:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11158:	str	r3, [fp, #-8]
   1115c:	sub	r3, fp, #72	; 0x48
   11160:	str	r3, [fp, #-12]
   11164:	b	11174 <__assert_fail@plt+0x200>
   11168:	ldr	r3, [fp, #-12]
   1116c:	add	r3, r3, #8
   11170:	str	r3, [fp, #-12]
   11174:	ldr	r3, [fp, #-12]
   11178:	ldr	r3, [r3]
   1117c:	cmp	r3, #0
   11180:	beq	111a4 <__assert_fail@plt+0x230>
   11184:	ldr	r3, [fp, #-12]
   11188:	ldr	r3, [r3]
   1118c:	mov	r1, r3
   11190:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11194:	bl	10d04 <strcmp@plt>
   11198:	mov	r3, r0
   1119c:	cmp	r3, #0
   111a0:	bne	11168 <__assert_fail@plt+0x1f4>
   111a4:	ldr	r3, [fp, #-12]
   111a8:	ldr	r3, [r3, #4]
   111ac:	cmp	r3, #0
   111b0:	beq	111c0 <__assert_fail@plt+0x24c>
   111b4:	ldr	r3, [fp, #-12]
   111b8:	ldr	r3, [r3, #4]
   111bc:	str	r3, [fp, #-8]
   111c0:	ldr	r0, [pc, #200]	; 11290 <__assert_fail@plt+0x31c>
   111c4:	bl	10e78 <gettext@plt>
   111c8:	mov	r3, r0
   111cc:	ldr	r2, [pc, #192]	; 11294 <__assert_fail@plt+0x320>
   111d0:	ldr	r1, [pc, #192]	; 11298 <__assert_fail@plt+0x324>
   111d4:	mov	r0, r3
   111d8:	bl	10d10 <printf@plt>
   111dc:	mov	r1, #0
   111e0:	mov	r0, #5
   111e4:	bl	10f14 <setlocale@plt>
   111e8:	str	r0, [fp, #-16]
   111ec:	ldr	r3, [fp, #-16]
   111f0:	cmp	r3, #0
   111f4:	beq	11234 <__assert_fail@plt+0x2c0>
   111f8:	mov	r2, #3
   111fc:	ldr	r1, [pc, #152]	; 1129c <__assert_fail@plt+0x328>
   11200:	ldr	r0, [fp, #-16]
   11204:	bl	10f50 <strncmp@plt>
   11208:	mov	r3, r0
   1120c:	cmp	r3, #0
   11210:	beq	11234 <__assert_fail@plt+0x2c0>
   11214:	ldr	r0, [pc, #132]	; 112a0 <__assert_fail@plt+0x32c>
   11218:	bl	10e78 <gettext@plt>
   1121c:	mov	r2, r0
   11220:	ldr	r3, [pc, #124]	; 112a4 <__assert_fail@plt+0x330>
   11224:	ldr	r3, [r3]
   11228:	mov	r1, r3
   1122c:	mov	r0, r2
   11230:	bl	10cec <fputs_unlocked@plt>
   11234:	ldr	r0, [pc, #108]	; 112a8 <__assert_fail@plt+0x334>
   11238:	bl	10e78 <gettext@plt>
   1123c:	mov	r3, r0
   11240:	ldr	r2, [fp, #-80]	; 0xffffffb0
   11244:	ldr	r1, [pc, #72]	; 11294 <__assert_fail@plt+0x320>
   11248:	mov	r0, r3
   1124c:	bl	10d10 <printf@plt>
   11250:	ldr	r0, [pc, #84]	; 112ac <__assert_fail@plt+0x338>
   11254:	bl	10e78 <gettext@plt>
   11258:	ldr	r2, [fp, #-8]
   1125c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11260:	cmp	r2, r3
   11264:	bne	11270 <__assert_fail@plt+0x2fc>
   11268:	ldr	r3, [pc, #64]	; 112b0 <__assert_fail@plt+0x33c>
   1126c:	b	11274 <__assert_fail@plt+0x300>
   11270:	ldr	r3, [pc, #60]	; 112b4 <__assert_fail@plt+0x340>
   11274:	mov	r2, r3
   11278:	ldr	r1, [fp, #-8]
   1127c:	bl	10d10 <printf@plt>
   11280:	nop			; (mov r0, r0)
   11284:	sub	sp, fp, #4
   11288:	pop	{fp, pc}
   1128c:	strdeq	r9, [r1], -r0
   11290:	andeq	r9, r1, ip, ror lr
   11294:	muleq	r1, r4, lr
   11298:			; <UNDEFINED> instruction: 0x00019ebc
   1129c:	andeq	r9, r1, ip, asr #29
   112a0:	ldrdeq	r9, [r1], -r0
   112a4:	andeq	fp, r2, ip, asr r1
   112a8:	andeq	r9, r1, r8, lsl pc
   112ac:	andeq	r9, r1, r4, lsr pc
   112b0:	andeq	r9, r1, r8, ror #30
   112b4:	andeq	r9, r1, r4, ror pc
   112b8:	push	{fp}		; (str fp, [sp, #-4]!)
   112bc:	add	fp, sp, #0
   112c0:	sub	sp, sp, #12
   112c4:	str	r0, [fp, #-8]
   112c8:	ldr	r3, [fp, #-8]
   112cc:	ldr	r3, [r3, #16]
   112d0:	and	r3, r3, #61440	; 0xf000
   112d4:	cmp	r3, #32768	; 0x8000
   112d8:	beq	112f0 <__assert_fail@plt+0x37c>
   112dc:	ldr	r3, [fp, #-8]
   112e0:	ldr	r3, [r3, #16]
   112e4:	and	r3, r3, #61440	; 0xf000
   112e8:	cmp	r3, #40960	; 0xa000
   112ec:	bne	112f8 <__assert_fail@plt+0x384>
   112f0:	mov	r3, #1
   112f4:	b	112fc <__assert_fail@plt+0x388>
   112f8:	mov	r3, #0
   112fc:	and	r3, r3, #1
   11300:	uxtb	r3, r3
   11304:	mov	r0, r3
   11308:	add	sp, fp, #0
   1130c:	pop	{fp}		; (ldr fp, [sp], #4)
   11310:	bx	lr
   11314:	push	{r4, fp, lr}
   11318:	add	fp, sp, #8
   1131c:	sub	sp, sp, #12
   11320:	str	r0, [fp, #-16]
   11324:	ldr	r3, [fp, #-16]
   11328:	cmp	r3, #0
   1132c:	beq	1135c <__assert_fail@plt+0x3e8>
   11330:	ldr	r3, [pc, #300]	; 11464 <__assert_fail@plt+0x4f0>
   11334:	ldr	r4, [r3]
   11338:	ldr	r0, [pc, #296]	; 11468 <__assert_fail@plt+0x4f4>
   1133c:	bl	10e78 <gettext@plt>
   11340:	mov	r1, r0
   11344:	ldr	r3, [pc, #288]	; 1146c <__assert_fail@plt+0x4f8>
   11348:	ldr	r3, [r3]
   1134c:	mov	r2, r3
   11350:	mov	r0, r4
   11354:	bl	10ea8 <fprintf@plt>
   11358:	b	1145c <__assert_fail@plt+0x4e8>
   1135c:	ldr	r0, [pc, #268]	; 11470 <__assert_fail@plt+0x4fc>
   11360:	bl	10e78 <gettext@plt>
   11364:	mov	r2, r0
   11368:	ldr	r3, [pc, #252]	; 1146c <__assert_fail@plt+0x4f8>
   1136c:	ldr	r3, [r3]
   11370:	mov	r1, r3
   11374:	mov	r0, r2
   11378:	bl	10d10 <printf@plt>
   1137c:	ldr	r0, [pc, #240]	; 11474 <__assert_fail@plt+0x500>
   11380:	bl	10e78 <gettext@plt>
   11384:	mov	r3, r0
   11388:	mov	r1, #10
   1138c:	mov	r0, r3
   11390:	bl	10d10 <printf@plt>
   11394:	bl	110a8 <__assert_fail@plt+0x134>
   11398:	bl	110e0 <__assert_fail@plt+0x16c>
   1139c:	ldr	r0, [pc, #212]	; 11478 <__assert_fail@plt+0x504>
   113a0:	bl	10e78 <gettext@plt>
   113a4:	mov	r3, r0
   113a8:	mov	r1, #10
   113ac:	mov	r0, r3
   113b0:	bl	10d10 <printf@plt>
   113b4:	ldr	r0, [pc, #192]	; 1147c <__assert_fail@plt+0x508>
   113b8:	bl	10e78 <gettext@plt>
   113bc:	mov	r2, r0
   113c0:	ldr	r3, [pc, #184]	; 11480 <__assert_fail@plt+0x50c>
   113c4:	ldr	r3, [r3]
   113c8:	mov	r1, r3
   113cc:	mov	r0, r2
   113d0:	bl	10cec <fputs_unlocked@plt>
   113d4:	ldr	r0, [pc, #168]	; 11484 <__assert_fail@plt+0x510>
   113d8:	bl	10e78 <gettext@plt>
   113dc:	mov	r2, r0
   113e0:	ldr	r3, [pc, #152]	; 11480 <__assert_fail@plt+0x50c>
   113e4:	ldr	r3, [r3]
   113e8:	mov	r1, r3
   113ec:	mov	r0, r2
   113f0:	bl	10cec <fputs_unlocked@plt>
   113f4:	ldr	r0, [pc, #140]	; 11488 <__assert_fail@plt+0x514>
   113f8:	bl	10e78 <gettext@plt>
   113fc:	mov	r2, r0
   11400:	ldr	r3, [pc, #120]	; 11480 <__assert_fail@plt+0x50c>
   11404:	ldr	r3, [r3]
   11408:	mov	r1, r3
   1140c:	mov	r0, r2
   11410:	bl	10cec <fputs_unlocked@plt>
   11414:	ldr	r0, [pc, #112]	; 1148c <__assert_fail@plt+0x518>
   11418:	bl	10e78 <gettext@plt>
   1141c:	mov	r2, r0
   11420:	ldr	r3, [pc, #88]	; 11480 <__assert_fail@plt+0x50c>
   11424:	ldr	r3, [r3]
   11428:	mov	r1, r3
   1142c:	mov	r0, r2
   11430:	bl	10cec <fputs_unlocked@plt>
   11434:	ldr	r0, [pc, #84]	; 11490 <__assert_fail@plt+0x51c>
   11438:	bl	10e78 <gettext@plt>
   1143c:	mov	r2, r0
   11440:	ldr	r3, [pc, #56]	; 11480 <__assert_fail@plt+0x50c>
   11444:	ldr	r3, [r3]
   11448:	mov	r1, r3
   1144c:	mov	r0, r2
   11450:	bl	10cec <fputs_unlocked@plt>
   11454:	ldr	r0, [pc, #56]	; 11494 <__assert_fail@plt+0x520>
   11458:	bl	11118 <__assert_fail@plt+0x1a4>
   1145c:	ldr	r0, [fp, #-16]
   11460:	bl	10e6c <exit@plt>
   11464:	andeq	fp, r2, r8, asr r1
   11468:	andeq	sl, r1, r4, lsr #2
   1146c:	andeq	fp, r2, r4, ror r1
   11470:	andeq	sl, r1, ip, asr #2
   11474:	andeq	sl, r1, r0, ror r1
   11478:	strdeq	sl, [r1], -r8
   1147c:	andeq	sl, r1, r8, lsl #7
   11480:	andeq	fp, r2, ip, asr r1
   11484:	andeq	sl, r1, ip, lsl #8
   11488:	andeq	sl, r1, ip, asr #8
   1148c:	andeq	sl, r1, ip, ror r4
   11490:			; <UNDEFINED> instruction: 0x0001a4b4
   11494:	andeq	sl, r1, r8, lsl #11
   11498:	push	{r4, r5, fp, lr}
   1149c:	add	fp, sp, #12
   114a0:	sub	sp, sp, #8
   114a4:	str	r0, [fp, #-16]
   114a8:	str	r1, [fp, #-20]	; 0xffffffec
   114ac:	ldr	r3, [fp, #-16]
   114b0:	cmp	r3, #1
   114b4:	beq	114c4 <__assert_fail@plt+0x550>
   114b8:	cmp	r3, #2
   114bc:	beq	11500 <__assert_fail@plt+0x58c>
   114c0:	b	11540 <__assert_fail@plt+0x5cc>
   114c4:	bl	10eb4 <__errno_location@plt>
   114c8:	mov	r3, r0
   114cc:	ldr	r4, [r3]
   114d0:	ldr	r0, [pc, #120]	; 11550 <__assert_fail@plt+0x5dc>
   114d4:	bl	10e78 <gettext@plt>
   114d8:	mov	r5, r0
   114dc:	ldr	r1, [fp, #-20]	; 0xffffffec
   114e0:	mov	r0, #4
   114e4:	bl	16418 <__assert_fail@plt+0x54a4>
   114e8:	mov	r3, r0
   114ec:	mov	r2, r5
   114f0:	mov	r1, r4
   114f4:	mov	r0, #0
   114f8:	bl	10e0c <error@plt>
   114fc:	b	11544 <__assert_fail@plt+0x5d0>
   11500:	bl	10eb4 <__errno_location@plt>
   11504:	mov	r3, r0
   11508:	ldr	r4, [r3]
   1150c:	ldr	r0, [pc, #64]	; 11554 <__assert_fail@plt+0x5e0>
   11510:	bl	10e78 <gettext@plt>
   11514:	mov	r5, r0
   11518:	ldr	r2, [fp, #-20]	; 0xffffffec
   1151c:	mov	r1, #3
   11520:	mov	r0, #0
   11524:	bl	165a0 <__assert_fail@plt+0x562c>
   11528:	mov	r3, r0
   1152c:	mov	r2, r5
   11530:	mov	r1, r4
   11534:	mov	r0, #0
   11538:	bl	10e0c <error@plt>
   1153c:	b	11544 <__assert_fail@plt+0x5d0>
   11540:	bl	10f5c <abort@plt>
   11544:	nop			; (mov r0, r0)
   11548:	sub	sp, fp, #12
   1154c:	pop	{r4, r5, fp, pc}
   11550:	muleq	r1, r0, r5
   11554:	andeq	sl, r1, r4, lsr #11
   11558:	push	{fp, lr}
   1155c:	add	fp, sp, #4
   11560:	sub	sp, sp, #8
   11564:	str	r0, [fp, #-8]
   11568:	ldr	r3, [pc, #60]	; 115ac <__assert_fail@plt+0x638>
   1156c:	ldrb	r3, [r3]
   11570:	cmp	r3, #0
   11574:	beq	11580 <__assert_fail@plt+0x60c>
   11578:	ldr	r3, [pc, #48]	; 115b0 <__assert_fail@plt+0x63c>
   1157c:	b	11584 <__assert_fail@plt+0x610>
   11580:	ldr	r3, [pc, #44]	; 115b4 <__assert_fail@plt+0x640>
   11584:	ldr	r2, [fp, #-8]
   11588:	mov	r1, r3
   1158c:	ldr	r0, [pc, #36]	; 115b8 <__assert_fail@plt+0x644>
   11590:	bl	10d10 <printf@plt>
   11594:	ldr	r3, [pc, #16]	; 115ac <__assert_fail@plt+0x638>
   11598:	mov	r2, #0
   1159c:	strb	r2, [r3]
   115a0:	nop			; (mov r0, r0)
   115a4:	sub	sp, fp, #4
   115a8:	pop	{fp, pc}
   115ac:	strdeq	fp, [r2], -r8
   115b0:	andeq	r9, r1, r4, ror pc
   115b4:	andeq	sl, r1, r4, asr #11
   115b8:	andeq	sl, r1, r8, asr #11
   115bc:	push	{r4, r5, fp, lr}
   115c0:	add	fp, sp, #12
   115c4:	sub	sp, sp, #8
   115c8:	str	r0, [fp, #-16]
   115cc:	str	r1, [fp, #-20]	; 0xffffffec
   115d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   115d4:	cmp	r3, #0
   115d8:	beq	1164c <__assert_fail@plt+0x6d8>
   115dc:	ldr	r3, [pc, #116]	; 11658 <__assert_fail@plt+0x6e4>
   115e0:	ldr	r3, [r3]
   115e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   115e8:	mov	r1, #1
   115ec:	ldr	r0, [fp, #-16]
   115f0:	bl	10d64 <fwrite_unlocked@plt>
   115f4:	mov	r2, r0
   115f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   115fc:	cmp	r2, r3
   11600:	bcs	1164c <__assert_fail@plt+0x6d8>
   11604:	ldr	r3, [pc, #76]	; 11658 <__assert_fail@plt+0x6e4>
   11608:	ldr	r3, [r3]
   1160c:	mov	r0, r3
   11610:	bl	10f38 <clearerr_unlocked@plt>
   11614:	bl	10eb4 <__errno_location@plt>
   11618:	mov	r3, r0
   1161c:	ldr	r4, [r3]
   11620:	ldr	r0, [pc, #52]	; 1165c <__assert_fail@plt+0x6e8>
   11624:	bl	10e78 <gettext@plt>
   11628:	mov	r5, r0
   1162c:	ldr	r1, [pc, #44]	; 11660 <__assert_fail@plt+0x6ec>
   11630:	mov	r0, #4
   11634:	bl	16418 <__assert_fail@plt+0x54a4>
   11638:	mov	r3, r0
   1163c:	mov	r2, r5
   11640:	mov	r1, r4
   11644:	mov	r0, #1
   11648:	bl	10e0c <error@plt>
   1164c:	nop			; (mov r0, r0)
   11650:	sub	sp, fp, #12
   11654:	pop	{r4, r5, fp, pc}
   11658:	andeq	fp, r2, ip, asr r1
   1165c:	ldrdeq	sl, [r1], -r8
   11660:	andeq	sl, r1, ip, ror #11
   11664:	push	{fp, lr}
   11668:	add	fp, sp, #4
   1166c:	sub	sp, sp, #8192	; 0x2000
   11670:	sub	sp, sp, #32
   11674:	sub	r1, fp, #8192	; 0x2000
   11678:	sub	r1, r1, #4
   1167c:	str	r0, [r1, #-20]	; 0xffffffec
   11680:	sub	r1, fp, #8192	; 0x2000
   11684:	sub	r1, r1, #4
   11688:	sub	r1, r1, #32
   1168c:	strd	r2, [r1]
   11690:	mov	r3, #8192	; 0x2000
   11694:	str	r3, [fp, #-8]
   11698:	b	11790 <__assert_fail@plt+0x81c>
   1169c:	ldr	r3, [fp, #-8]
   116a0:	mov	r0, r3
   116a4:	mov	r1, #0
   116a8:	sub	r3, fp, #8192	; 0x2000
   116ac:	sub	r3, r3, #4
   116b0:	sub	r3, r3, #32
   116b4:	ldrd	r2, [r3]
   116b8:	cmp	r1, r3
   116bc:	cmpeq	r0, r2
   116c0:	bls	116cc <__assert_fail@plt+0x758>
   116c4:	mov	r0, r2
   116c8:	mov	r1, r3
   116cc:	mov	r3, r0
   116d0:	str	r3, [fp, #-12]
   116d4:	sub	r3, fp, #8192	; 0x2000
   116d8:	sub	r3, r3, #4
   116dc:	sub	r3, r3, #12
   116e0:	sub	r2, fp, #8192	; 0x2000
   116e4:	sub	r2, r2, #4
   116e8:	mov	r0, r2
   116ec:	ldr	r2, [fp, #-12]
   116f0:	mov	r1, r3
   116f4:	ldr	r0, [r0, #-20]	; 0xffffffec
   116f8:	bl	1683c <__assert_fail@plt+0x58c8>
   116fc:	str	r0, [fp, #-16]
   11700:	ldr	r3, [fp, #-16]
   11704:	cmn	r3, #1
   11708:	bne	11714 <__assert_fail@plt+0x7a0>
   1170c:	mov	r3, #1
   11710:	b	117ac <__assert_fail@plt+0x838>
   11714:	ldr	r3, [fp, #-16]
   11718:	mov	r0, r3
   1171c:	mov	r1, #0
   11720:	sub	r3, fp, #8192	; 0x2000
   11724:	sub	r3, r3, #4
   11728:	sub	r3, r3, #32
   1172c:	mov	ip, r3
   11730:	sub	r3, fp, #8192	; 0x2000
   11734:	sub	r3, r3, #4
   11738:	sub	r3, r3, #32
   1173c:	ldrd	r2, [r3]
   11740:	subs	r2, r2, r0
   11744:	sbc	r3, r3, r1
   11748:	strd	r2, [ip]
   1174c:	ldr	r3, [fp, #-16]
   11750:	cmp	r3, #0
   11754:	bne	11778 <__assert_fail@plt+0x804>
   11758:	sub	r3, fp, #8192	; 0x2000
   1175c:	sub	r3, r3, #4
   11760:	sub	r3, r3, #32
   11764:	ldrd	r2, [r3]
   11768:	orrs	r3, r2, r3
   1176c:	beq	11778 <__assert_fail@plt+0x804>
   11770:	mov	r3, #2
   11774:	b	117ac <__assert_fail@plt+0x838>
   11778:	sub	r3, fp, #8192	; 0x2000
   1177c:	sub	r3, r3, #4
   11780:	sub	r3, r3, #12
   11784:	ldr	r1, [fp, #-16]
   11788:	mov	r0, r3
   1178c:	bl	115bc <__assert_fail@plt+0x648>
   11790:	sub	r3, fp, #8192	; 0x2000
   11794:	sub	r3, r3, #4
   11798:	sub	r3, r3, #32
   1179c:	ldrd	r2, [r3]
   117a0:	orrs	r3, r2, r3
   117a4:	bne	1169c <__assert_fail@plt+0x728>
   117a8:	mov	r3, #0
   117ac:	mov	r0, r3
   117b0:	sub	sp, fp, #4
   117b4:	pop	{fp, pc}
   117b8:	push	{r4, r5, r6, fp, lr}
   117bc:	add	fp, sp, #16
   117c0:	sub	sp, sp, #60	; 0x3c
   117c4:	str	r0, [fp, #-56]	; 0xffffffc8
   117c8:	strd	r2, [fp, #-68]	; 0xffffffbc
   117cc:	ldr	r3, [fp, #4]
   117d0:	str	r3, [sp]
   117d4:	ldrd	r2, [fp, #-68]	; 0xffffffbc
   117d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   117dc:	bl	10dd0 <lseek64@plt>
   117e0:	strd	r0, [fp, #-28]	; 0xffffffe4
   117e4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   117e8:	cmp	r2, #0
   117ec:	sbcs	r3, r3, #0
   117f0:	bge	11864 <__assert_fail@plt+0x8f0>
   117f4:	bl	10eb4 <__errno_location@plt>
   117f8:	mov	r3, r0
   117fc:	ldr	r4, [r3]
   11800:	ldr	r3, [fp, #4]
   11804:	cmp	r3, #0
   11808:	bne	11814 <__assert_fail@plt+0x8a0>
   1180c:	ldr	r3, [pc, #100]	; 11878 <__assert_fail@plt+0x904>
   11810:	b	11818 <__assert_fail@plt+0x8a4>
   11814:	ldr	r3, [pc, #96]	; 1187c <__assert_fail@plt+0x908>
   11818:	mov	r0, r3
   1181c:	bl	10e78 <gettext@plt>
   11820:	mov	r5, r0
   11824:	ldr	r2, [fp, #8]
   11828:	mov	r1, #3
   1182c:	mov	r0, #0
   11830:	bl	165a0 <__assert_fail@plt+0x562c>
   11834:	mov	r6, r0
   11838:	sub	r3, fp, #52	; 0x34
   1183c:	mov	r2, r3
   11840:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   11844:	bl	13f34 <__assert_fail@plt+0x2fc0>
   11848:	mov	r3, r0
   1184c:	str	r3, [sp]
   11850:	mov	r3, r6
   11854:	mov	r2, r5
   11858:	mov	r1, r4
   1185c:	mov	r0, #0
   11860:	bl	10e0c <error@plt>
   11864:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11868:	mov	r0, r2
   1186c:	mov	r1, r3
   11870:	sub	sp, fp, #16
   11874:	pop	{r4, r5, r6, fp, pc}
   11878:	strdeq	sl, [r1], -ip
   1187c:	andeq	sl, r1, ip, lsl r6
   11880:	push	{r4, r5, fp, lr}
   11884:	add	fp, sp, #12
   11888:	sub	sp, sp, #144	; 0x90
   1188c:	str	r0, [fp, #-136]	; 0xffffff78
   11890:	str	r1, [fp, #-140]	; 0xffffff74
   11894:	strd	r2, [fp, #-148]	; 0xffffff6c
   11898:	ldr	r3, [fp, #-148]	; 0xffffff6c
   1189c:	str	r3, [fp, #-64]	; 0xffffffc0
   118a0:	ldrd	r2, [fp, #4]
   118a4:	strd	r2, [fp, #-20]	; 0xffffffec
   118a8:	mov	r3, #1
   118ac:	strb	r3, [fp, #-21]	; 0xffffffeb
   118b0:	ldrd	r2, [fp, #-148]	; 0xffffff6c
   118b4:	adds	r2, r2, #8192	; 0x2000
   118b8:	adc	r3, r3, #0
   118bc:	mvn	r0, #0
   118c0:	mov	r1, #0
   118c4:	cmp	r3, r1
   118c8:	cmpeq	r2, r0
   118cc:	bls	11900 <__assert_fail@plt+0x98c>
   118d0:	ldr	r0, [pc, #1696]	; 11f78 <__assert_fail@plt+0x1004>
   118d4:	bl	10e78 <gettext@plt>
   118d8:	mov	r4, r0
   118dc:	sub	r3, fp, #120	; 0x78
   118e0:	mov	r2, r3
   118e4:	ldrd	r0, [fp, #-148]	; 0xffffff6c
   118e8:	bl	1404c <__assert_fail@plt+0x30d8>
   118ec:	mov	r3, r0
   118f0:	mov	r2, r4
   118f4:	mov	r1, #0
   118f8:	mov	r0, #1
   118fc:	bl	10e0c <error@plt>
   11900:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11904:	cmp	r3, #1048576	; 0x100000
   11908:	bhi	11b44 <__assert_fail@plt+0xbd0>
   1190c:	mov	r3, #1
   11910:	strb	r3, [fp, #-22]	; 0xffffffea
   11914:	mov	r3, #0
   11918:	strb	r3, [fp, #-23]	; 0xffffffe9
   1191c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11920:	add	r3, r3, #8192	; 0x2000
   11924:	str	r3, [fp, #-68]	; 0xffffffbc
   11928:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1192c:	mov	r0, #2
   11930:	bl	172a8 <__assert_fail@plt+0x6334>
   11934:	mov	r3, r0
   11938:	str	r3, [fp, #-128]	; 0xffffff80
   1193c:	ldr	r2, [fp, #-128]	; 0xffffff80
   11940:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11944:	add	r3, r2, r3
   11948:	str	r3, [fp, #-124]	; 0xffffff84
   1194c:	mov	r3, #0
   11950:	strb	r3, [fp, #-24]	; 0xffffffe8
   11954:	b	11b20 <__assert_fail@plt+0xbac>
   11958:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   1195c:	lsl	r3, r3, #2
   11960:	sub	r2, fp, #12
   11964:	add	r3, r2, r3
   11968:	ldr	r3, [r3, #-116]	; 0xffffff8c
   1196c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   11970:	mov	r1, r3
   11974:	ldr	r0, [fp, #-140]	; 0xffffff74
   11978:	bl	13e74 <__assert_fail@plt+0x2f00>
   1197c:	str	r0, [fp, #-72]	; 0xffffffb8
   11980:	mov	r3, #0
   11984:	str	r3, [fp, #-28]	; 0xffffffe4
   11988:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1198c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   11990:	cmp	r2, r3
   11994:	bcs	11a24 <__assert_fail@plt+0xab0>
   11998:	bl	10eb4 <__errno_location@plt>
   1199c:	mov	r3, r0
   119a0:	ldr	r3, [r3]
   119a4:	cmp	r3, #0
   119a8:	beq	119f0 <__assert_fail@plt+0xa7c>
   119ac:	bl	10eb4 <__errno_location@plt>
   119b0:	mov	r3, r0
   119b4:	ldr	r4, [r3]
   119b8:	ldr	r0, [pc, #1468]	; 11f7c <__assert_fail@plt+0x1008>
   119bc:	bl	10e78 <gettext@plt>
   119c0:	mov	r5, r0
   119c4:	ldr	r1, [fp, #-136]	; 0xffffff78
   119c8:	mov	r0, #4
   119cc:	bl	16418 <__assert_fail@plt+0x54a4>
   119d0:	mov	r3, r0
   119d4:	mov	r2, r5
   119d8:	mov	r1, r4
   119dc:	mov	r0, #0
   119e0:	bl	10e0c <error@plt>
   119e4:	mov	r3, #0
   119e8:	strb	r3, [fp, #-21]	; 0xffffffeb
   119ec:	b	11b34 <__assert_fail@plt+0xbc0>
   119f0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   119f4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   119f8:	cmp	r2, r3
   119fc:	bhi	11a1c <__assert_fail@plt+0xaa8>
   11a00:	ldrb	r3, [fp, #-22]	; 0xffffffea
   11a04:	cmp	r3, #0
   11a08:	bne	11a1c <__assert_fail@plt+0xaa8>
   11a0c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   11a10:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11a14:	sub	r3, r2, r3
   11a18:	str	r3, [fp, #-28]	; 0xffffffe4
   11a1c:	mov	r3, #1
   11a20:	strb	r3, [fp, #-23]	; 0xffffffe9
   11a24:	ldrb	r3, [fp, #-22]	; 0xffffffea
   11a28:	eor	r3, r3, #1
   11a2c:	uxtb	r3, r3
   11a30:	cmp	r3, #0
   11a34:	beq	11a90 <__assert_fail@plt+0xb1c>
   11a38:	ldr	r2, [fp, #-64]	; 0xffffffc0
   11a3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a40:	sub	r3, r2, r3
   11a44:	mov	r2, r3
   11a48:	mov	r3, #0
   11a4c:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11a50:	adds	r2, r2, r0
   11a54:	adc	r3, r3, r1
   11a58:	strd	r2, [fp, #-20]	; 0xffffffec
   11a5c:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   11a60:	eor	r3, r3, #1
   11a64:	uxtb	r3, r3
   11a68:	lsl	r3, r3, #2
   11a6c:	sub	r2, fp, #12
   11a70:	add	r3, r2, r3
   11a74:	ldr	r3, [r3, #-116]	; 0xffffff8c
   11a78:	add	r0, r3, #8192	; 0x2000
   11a7c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   11a80:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11a84:	sub	r3, r2, r3
   11a88:	mov	r1, r3
   11a8c:	bl	115bc <__assert_fail@plt+0x648>
   11a90:	mov	r3, #0
   11a94:	strb	r3, [fp, #-22]	; 0xffffffea
   11a98:	ldr	r2, [fp, #-64]	; 0xffffffc0
   11a9c:	ldr	r3, [fp, #-72]	; 0xffffffb8
   11aa0:	cmp	r2, r3
   11aa4:	bcs	11af4 <__assert_fail@plt+0xb80>
   11aa8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   11aac:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11ab0:	sub	r3, r2, r3
   11ab4:	mov	r2, r3
   11ab8:	mov	r3, #0
   11abc:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11ac0:	adds	r2, r2, r0
   11ac4:	adc	r3, r3, r1
   11ac8:	strd	r2, [fp, #-20]	; 0xffffffec
   11acc:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   11ad0:	lsl	r3, r3, #2
   11ad4:	sub	r2, fp, #12
   11ad8:	add	r3, r2, r3
   11adc:	ldr	r0, [r3, #-116]	; 0xffffff8c
   11ae0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   11ae4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11ae8:	sub	r3, r2, r3
   11aec:	mov	r1, r3
   11af0:	bl	115bc <__assert_fail@plt+0x648>
   11af4:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   11af8:	cmp	r3, #0
   11afc:	movne	r3, #1
   11b00:	moveq	r3, #0
   11b04:	uxtb	r3, r3
   11b08:	eor	r3, r3, #1
   11b0c:	uxtb	r3, r3
   11b10:	strb	r3, [fp, #-24]	; 0xffffffe8
   11b14:	ldrb	r3, [fp, #-24]	; 0xffffffe8
   11b18:	and	r3, r3, #1
   11b1c:	strb	r3, [fp, #-24]	; 0xffffffe8
   11b20:	ldrb	r3, [fp, #-23]	; 0xffffffe9
   11b24:	eor	r3, r3, #1
   11b28:	uxtb	r3, r3
   11b2c:	cmp	r3, #0
   11b30:	bne	11958 <__assert_fail@plt+0x9e4>
   11b34:	ldr	r3, [fp, #-128]	; 0xffffff80
   11b38:	mov	r0, r3
   11b3c:	bl	13de8 <__assert_fail@plt+0x2e74>
   11b40:	b	11f20 <__assert_fail@plt+0xfac>
   11b44:	mov	r3, #0
   11b48:	strb	r3, [fp, #-29]	; 0xffffffe3
   11b4c:	mov	r3, #0
   11b50:	str	r3, [fp, #-52]	; 0xffffffcc
   11b54:	ldr	r3, [fp, #-64]	; 0xffffffc0
   11b58:	lsl	r3, r3, #19
   11b5c:	lsr	r3, r3, #19
   11b60:	rsb	r3, r3, #8192	; 0x2000
   11b64:	str	r3, [fp, #-76]	; 0xffffffb4
   11b68:	ldr	r2, [fp, #-64]	; 0xffffffc0
   11b6c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11b70:	add	r3, r2, r3
   11b74:	str	r3, [fp, #-80]	; 0xffffffb0
   11b78:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11b7c:	lsr	r3, r3, #13
   11b80:	add	r3, r3, #1
   11b84:	str	r3, [fp, #-84]	; 0xffffffac
   11b88:	mov	r3, #0
   11b8c:	str	r3, [fp, #-56]	; 0xffffffc8
   11b90:	mov	r3, #0
   11b94:	str	r3, [fp, #-60]	; 0xffffffc4
   11b98:	mov	r3, #0
   11b9c:	strb	r3, [fp, #-37]	; 0xffffffdb
   11ba0:	mov	r3, #0
   11ba4:	str	r3, [fp, #-44]	; 0xffffffd4
   11ba8:	mov	r3, #1
   11bac:	str	r3, [fp, #-48]	; 0xffffffd0
   11bb0:	b	11d84 <__assert_fail@plt+0xe10>
   11bb4:	ldr	r2, [fp, #-60]	; 0xffffffc4
   11bb8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11bbc:	cmp	r2, r3
   11bc0:	bne	11c28 <__assert_fail@plt+0xcb4>
   11bc4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11bc8:	cmp	r3, #0
   11bcc:	bne	11be8 <__assert_fail@plt+0xc74>
   11bd0:	ldr	r3, [fp, #-84]	; 0xffffffac
   11bd4:	cmp	r3, #16
   11bd8:	movcc	r3, r3
   11bdc:	movcs	r3, #16
   11be0:	str	r3, [fp, #-60]	; 0xffffffc4
   11be4:	b	11c14 <__assert_fail@plt+0xca0>
   11be8:	ldr	r3, [fp, #-84]	; 0xffffffac
   11bec:	lsr	r2, r3, #1
   11bf0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11bf4:	cmp	r2, r3
   11bf8:	bcc	11c0c <__assert_fail@plt+0xc98>
   11bfc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11c00:	lsl	r3, r3, #1
   11c04:	str	r3, [fp, #-60]	; 0xffffffc4
   11c08:	b	11c14 <__assert_fail@plt+0xca0>
   11c0c:	ldr	r3, [fp, #-84]	; 0xffffffac
   11c10:	str	r3, [fp, #-60]	; 0xffffffc4
   11c14:	mov	r2, #4
   11c18:	ldr	r1, [fp, #-60]	; 0xffffffc4
   11c1c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11c20:	bl	17064 <__assert_fail@plt+0x60f0>
   11c24:	str	r0, [fp, #-52]	; 0xffffffcc
   11c28:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   11c2c:	eor	r3, r3, #1
   11c30:	uxtb	r3, r3
   11c34:	cmp	r3, #0
   11c38:	beq	11c68 <__assert_fail@plt+0xcf4>
   11c3c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11c40:	lsl	r3, r3, #2
   11c44:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11c48:	add	r4, r2, r3
   11c4c:	mov	r0, #8192	; 0x2000
   11c50:	bl	170cc <__assert_fail@plt+0x6158>
   11c54:	mov	r3, r0
   11c58:	str	r3, [r4]
   11c5c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11c60:	add	r3, r3, #1
   11c64:	str	r3, [fp, #-56]	; 0xffffffc8
   11c68:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11c6c:	lsl	r3, r3, #2
   11c70:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11c74:	add	r3, r2, r3
   11c78:	ldr	r3, [r3]
   11c7c:	mov	r2, #8192	; 0x2000
   11c80:	mov	r1, r3
   11c84:	ldr	r0, [fp, #-140]	; 0xffffff74
   11c88:	bl	13e74 <__assert_fail@plt+0x2f00>
   11c8c:	str	r0, [fp, #-36]	; 0xffffffdc
   11c90:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11c94:	cmp	r3, #8192	; 0x2000
   11c98:	bcs	11cfc <__assert_fail@plt+0xd88>
   11c9c:	bl	10eb4 <__errno_location@plt>
   11ca0:	mov	r3, r0
   11ca4:	ldr	r3, [r3]
   11ca8:	cmp	r3, #0
   11cac:	beq	11cf4 <__assert_fail@plt+0xd80>
   11cb0:	bl	10eb4 <__errno_location@plt>
   11cb4:	mov	r3, r0
   11cb8:	ldr	r4, [r3]
   11cbc:	ldr	r0, [pc, #696]	; 11f7c <__assert_fail@plt+0x1008>
   11cc0:	bl	10e78 <gettext@plt>
   11cc4:	mov	r5, r0
   11cc8:	ldr	r1, [fp, #-136]	; 0xffffff78
   11ccc:	mov	r0, #4
   11cd0:	bl	16418 <__assert_fail@plt+0x54a4>
   11cd4:	mov	r3, r0
   11cd8:	mov	r2, r5
   11cdc:	mov	r1, r4
   11ce0:	mov	r0, #0
   11ce4:	bl	10e0c <error@plt>
   11ce8:	mov	r3, #0
   11cec:	strb	r3, [fp, #-21]	; 0xffffffeb
   11cf0:	b	11ed4 <__assert_fail@plt+0xf60>
   11cf4:	mov	r3, #1
   11cf8:	strb	r3, [fp, #-29]	; 0xffffffe3
   11cfc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11d00:	add	r2, r3, #1
   11d04:	ldr	r3, [fp, #-84]	; 0xffffffac
   11d08:	cmp	r2, r3
   11d0c:	bne	11d18 <__assert_fail@plt+0xda4>
   11d10:	mov	r3, #1
   11d14:	strb	r3, [fp, #-37]	; 0xffffffdb
   11d18:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   11d1c:	cmp	r3, #0
   11d20:	beq	11d60 <__assert_fail@plt+0xdec>
   11d24:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11d28:	mov	r2, r3
   11d2c:	mov	r3, #0
   11d30:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11d34:	adds	r2, r2, r0
   11d38:	adc	r3, r3, r1
   11d3c:	strd	r2, [fp, #-20]	; 0xffffffec
   11d40:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11d44:	lsl	r3, r3, #2
   11d48:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11d4c:	add	r3, r2, r3
   11d50:	ldr	r3, [r3]
   11d54:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11d58:	mov	r0, r3
   11d5c:	bl	115bc <__assert_fail@plt+0x648>
   11d60:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11d64:	str	r3, [fp, #-44]	; 0xffffffd4
   11d68:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11d6c:	add	r3, r3, #1
   11d70:	ldr	r1, [fp, #-84]	; 0xffffffac
   11d74:	mov	r0, r3
   11d78:	bl	198b8 <__assert_fail@plt+0x8944>
   11d7c:	mov	r3, r1
   11d80:	str	r3, [fp, #-48]	; 0xffffffd0
   11d84:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   11d88:	eor	r3, r3, #1
   11d8c:	uxtb	r3, r3
   11d90:	cmp	r3, #0
   11d94:	bne	11bb4 <__assert_fail@plt+0xc40>
   11d98:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11d9c:	cmp	r3, #0
   11da0:	beq	11ed4 <__assert_fail@plt+0xf60>
   11da4:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   11da8:	cmp	r3, #0
   11dac:	beq	11e68 <__assert_fail@plt+0xef4>
   11db0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11db4:	rsb	r3, r3, #8192	; 0x2000
   11db8:	str	r3, [fp, #-88]	; 0xffffffa8
   11dbc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11dc0:	mov	r2, r3
   11dc4:	mov	r3, #0
   11dc8:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11dcc:	adds	r2, r2, r0
   11dd0:	adc	r3, r3, r1
   11dd4:	strd	r2, [fp, #-20]	; 0xffffffec
   11dd8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   11ddc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   11de0:	cmp	r2, r3
   11de4:	bcs	11e14 <__assert_fail@plt+0xea0>
   11de8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11dec:	lsl	r3, r3, #2
   11df0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11df4:	add	r3, r2, r3
   11df8:	ldr	r2, [r3]
   11dfc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11e00:	add	r3, r2, r3
   11e04:	ldr	r1, [fp, #-76]	; 0xffffffb4
   11e08:	mov	r0, r3
   11e0c:	bl	115bc <__assert_fail@plt+0x648>
   11e10:	b	11ed4 <__assert_fail@plt+0xf60>
   11e14:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11e18:	lsl	r3, r3, #2
   11e1c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11e20:	add	r3, r2, r3
   11e24:	ldr	r2, [r3]
   11e28:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11e2c:	add	r3, r2, r3
   11e30:	ldr	r1, [fp, #-88]	; 0xffffffa8
   11e34:	mov	r0, r3
   11e38:	bl	115bc <__assert_fail@plt+0x648>
   11e3c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11e40:	lsl	r3, r3, #2
   11e44:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11e48:	add	r3, r2, r3
   11e4c:	ldr	r0, [r3]
   11e50:	ldr	r2, [fp, #-76]	; 0xffffffb4
   11e54:	ldr	r3, [fp, #-88]	; 0xffffffa8
   11e58:	sub	r3, r2, r3
   11e5c:	mov	r1, r3
   11e60:	bl	115bc <__assert_fail@plt+0x648>
   11e64:	b	11ed4 <__assert_fail@plt+0xf60>
   11e68:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11e6c:	add	r2, r3, #1
   11e70:	ldr	r3, [fp, #-84]	; 0xffffffac
   11e74:	cmp	r2, r3
   11e78:	bne	11ed4 <__assert_fail@plt+0xf60>
   11e7c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   11e80:	rsb	r3, r3, #8192	; 0x2000
   11e84:	str	r3, [fp, #-92]	; 0xffffffa4
   11e88:	ldr	r2, [fp, #-36]	; 0xffffffdc
   11e8c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   11e90:	sub	r3, r2, r3
   11e94:	str	r3, [fp, #-96]	; 0xffffffa0
   11e98:	ldr	r3, [fp, #-96]	; 0xffffffa0
   11e9c:	mov	r2, r3
   11ea0:	mov	r3, #0
   11ea4:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11ea8:	adds	r2, r2, r0
   11eac:	adc	r3, r3, r1
   11eb0:	strd	r2, [fp, #-20]	; 0xffffffec
   11eb4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   11eb8:	lsl	r3, r3, #2
   11ebc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11ec0:	add	r3, r2, r3
   11ec4:	ldr	r3, [r3]
   11ec8:	ldr	r1, [fp, #-96]	; 0xffffffa0
   11ecc:	mov	r0, r3
   11ed0:	bl	115bc <__assert_fail@plt+0x648>
   11ed4:	mov	r3, #0
   11ed8:	str	r3, [fp, #-44]	; 0xffffffd4
   11edc:	b	11f08 <__assert_fail@plt+0xf94>
   11ee0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11ee4:	lsl	r3, r3, #2
   11ee8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11eec:	add	r3, r2, r3
   11ef0:	ldr	r3, [r3]
   11ef4:	mov	r0, r3
   11ef8:	bl	13de8 <__assert_fail@plt+0x2e74>
   11efc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   11f00:	add	r3, r3, #1
   11f04:	str	r3, [fp, #-44]	; 0xffffffd4
   11f08:	ldr	r2, [fp, #-44]	; 0xffffffd4
   11f0c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11f10:	cmp	r2, r3
   11f14:	bcc	11ee0 <__assert_fail@plt+0xf6c>
   11f18:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11f1c:	bl	13de8 <__assert_fail@plt+0x2e74>
   11f20:	ldrd	r2, [fp, #4]
   11f24:	cmp	r2, #0
   11f28:	sbcs	r3, r3, #0
   11f2c:	blt	11f68 <__assert_fail@plt+0xff4>
   11f30:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11f34:	ldr	r1, [fp, #-136]	; 0xffffff78
   11f38:	str	r1, [sp, #4]
   11f3c:	mov	r1, #0
   11f40:	str	r1, [sp]
   11f44:	ldr	r0, [fp, #-140]	; 0xffffff74
   11f48:	bl	117b8 <__assert_fail@plt+0x844>
   11f4c:	mov	r2, r0
   11f50:	mov	r3, r1
   11f54:	cmp	r2, #0
   11f58:	sbcs	r3, r3, #0
   11f5c:	bge	11f68 <__assert_fail@plt+0xff4>
   11f60:	mov	r3, #0
   11f64:	strb	r3, [fp, #-21]	; 0xffffffeb
   11f68:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   11f6c:	mov	r0, r3
   11f70:	sub	sp, fp, #12
   11f74:	pop	{r4, r5, fp, pc}
   11f78:	andeq	sl, r1, r4, asr #12
   11f7c:	muleq	r1, r0, r5
   11f80:	push	{fp, lr}
   11f84:	add	fp, sp, #4
   11f88:	sub	sp, sp, #56	; 0x38
   11f8c:	str	r0, [fp, #-40]	; 0xffffffd8
   11f90:	str	r1, [fp, #-44]	; 0xffffffd4
   11f94:	strd	r2, [fp, #-52]	; 0xffffffcc
   11f98:	ldr	r3, [fp, #4]
   11f9c:	ldrd	r2, [r3, #48]	; 0x30
   11fa0:	strd	r2, [fp, #-12]
   11fa4:	ldr	r3, [pc, #284]	; 120c8 <__assert_fail@plt+0x1154>
   11fa8:	ldrb	r3, [r3]
   11fac:	cmp	r3, #0
   11fb0:	bne	12010 <__assert_fail@plt+0x109c>
   11fb4:	ldrd	r2, [fp, #12]
   11fb8:	cmp	r2, #0
   11fbc:	sbcs	r3, r3, #0
   11fc0:	blt	12010 <__assert_fail@plt+0x109c>
   11fc4:	ldr	r3, [fp, #4]
   11fc8:	ldr	r3, [r3, #56]	; 0x38
   11fcc:	cmp	r3, #0
   11fd0:	ble	11ff8 <__assert_fail@plt+0x1084>
   11fd4:	ldr	r3, [fp, #4]
   11fd8:	ldr	r3, [r3, #56]	; 0x38
   11fdc:	cmp	r3, #536870912	; 0x20000000
   11fe0:	bhi	11ff8 <__assert_fail@plt+0x1084>
   11fe4:	ldr	r3, [fp, #4]
   11fe8:	ldr	r3, [r3, #56]	; 0x38
   11fec:	mov	r2, r3
   11ff0:	asr	r3, r2, #31
   11ff4:	b	12000 <__assert_fail@plt+0x108c>
   11ff8:	mov	r2, #512	; 0x200
   11ffc:	mov	r3, #0
   12000:	ldrd	r0, [fp, #-12]
   12004:	cmp	r2, r0
   12008:	sbcs	r3, r3, r1
   1200c:	blt	12030 <__assert_fail@plt+0x10bc>
   12010:	ldrd	r2, [fp, #12]
   12014:	strd	r2, [sp]
   12018:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   1201c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   12020:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12024:	bl	11880 <__assert_fail@plt+0x90c>
   12028:	mov	r3, r0
   1202c:	b	120bc <__assert_fail@plt+0x1148>
   12030:	ldrd	r0, [fp, #-12]
   12034:	ldrd	r2, [fp, #12]
   12038:	subs	r2, r0, r2
   1203c:	sbc	r3, r1, r3
   12040:	strd	r2, [fp, #-20]	; 0xffffffec
   12044:	ldrd	r2, [fp, #-20]	; 0xffffffec
   12048:	cmp	r2, #0
   1204c:	sbcs	r1, r3, #0
   12050:	bge	1205c <__assert_fail@plt+0x10e8>
   12054:	mov	r2, #0
   12058:	mov	r3, #0
   1205c:	strd	r2, [fp, #-28]	; 0xffffffe4
   12060:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   12064:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12068:	cmp	r1, r3
   1206c:	cmpeq	r0, r2
   12070:	bhi	1207c <__assert_fail@plt+0x1108>
   12074:	mov	r3, #1
   12078:	b	120bc <__assert_fail@plt+0x1148>
   1207c:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   12080:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12084:	subs	r2, r0, r2
   12088:	sbc	r3, r1, r3
   1208c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12090:	bl	11664 <__assert_fail@plt+0x6f0>
   12094:	str	r0, [fp, #-32]	; 0xffffffe0
   12098:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1209c:	cmp	r3, #0
   120a0:	bne	120ac <__assert_fail@plt+0x1138>
   120a4:	mov	r3, #1
   120a8:	b	120bc <__assert_fail@plt+0x1148>
   120ac:	ldr	r1, [fp, #-40]	; 0xffffffd8
   120b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   120b4:	bl	11498 <__assert_fail@plt+0x524>
   120b8:	mov	r3, #0
   120bc:	mov	r0, r3
   120c0:	sub	sp, fp, #4
   120c4:	pop	{fp, pc}
   120c8:	andeq	fp, r2, r5, ror #2
   120cc:	push	{r4, r5, fp, lr}
   120d0:	add	fp, sp, #12
   120d4:	sub	sp, sp, #80	; 0x50
   120d8:	str	r0, [fp, #-72]	; 0xffffffb8
   120dc:	str	r1, [fp, #-76]	; 0xffffffb4
   120e0:	strd	r2, [fp, #-84]	; 0xffffffac
   120e4:	ldrd	r2, [fp, #4]
   120e8:	strd	r2, [fp, #-20]	; 0xffffffec
   120ec:	mov	r3, #0
   120f0:	str	r3, [fp, #-36]	; 0xffffffdc
   120f4:	mov	r3, #1
   120f8:	strb	r3, [fp, #-37]	; 0xffffffdb
   120fc:	ldr	r0, [pc, #1536]	; 12704 <__assert_fail@plt+0x1790>
   12100:	bl	170cc <__assert_fail@plt+0x6158>
   12104:	mov	r3, r0
   12108:	str	r3, [fp, #-28]	; 0xffffffe4
   1210c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12110:	str	r3, [fp, #-24]	; 0xffffffe8
   12114:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12118:	add	r3, r3, #8192	; 0x2000
   1211c:	mov	r2, r3
   12120:	mov	r3, #0
   12124:	str	r3, [r2, #8]
   12128:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1212c:	add	r3, r3, #8192	; 0x2000
   12130:	ldr	r3, [r3, #8]
   12134:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12138:	add	r2, r2, #8192	; 0x2000
   1213c:	str	r3, [r2, #4]
   12140:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12144:	add	r3, r3, #8192	; 0x2000
   12148:	mov	r2, r3
   1214c:	mov	r3, #0
   12150:	str	r3, [r2, #12]
   12154:	ldr	r0, [pc, #1448]	; 12704 <__assert_fail@plt+0x1790>
   12158:	bl	170cc <__assert_fail@plt+0x6158>
   1215c:	mov	r3, r0
   12160:	str	r3, [fp, #-32]	; 0xffffffe0
   12164:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12168:	mov	r2, #8192	; 0x2000
   1216c:	mov	r1, r3
   12170:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12174:	bl	1683c <__assert_fail@plt+0x58c8>
   12178:	str	r0, [fp, #-56]	; 0xffffffc8
   1217c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12180:	cmp	r3, #0
   12184:	beq	1241c <__assert_fail@plt+0x14a8>
   12188:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1218c:	cmn	r3, #1
   12190:	beq	1241c <__assert_fail@plt+0x14a8>
   12194:	ldrd	r2, [fp, #-84]	; 0xffffffac
   12198:	orrs	r3, r2, r3
   1219c:	bne	121d0 <__assert_fail@plt+0x125c>
   121a0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   121a4:	mov	r2, r3
   121a8:	mov	r3, #0
   121ac:	ldrd	r0, [fp, #-20]	; 0xffffffec
   121b0:	adds	r2, r2, r0
   121b4:	adc	r3, r3, r1
   121b8:	strd	r2, [fp, #-20]	; 0xffffffec
   121bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121c0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   121c4:	mov	r0, r3
   121c8:	bl	115bc <__assert_fail@plt+0x648>
   121cc:	b	12418 <__assert_fail@plt+0x14a4>
   121d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121d4:	add	r3, r3, #8192	; 0x2000
   121d8:	mov	r2, r3
   121dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   121e0:	str	r3, [r2, #4]
   121e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121e8:	add	r3, r3, #8192	; 0x2000
   121ec:	mov	r2, r3
   121f0:	mov	r3, #0
   121f4:	str	r3, [r2, #8]
   121f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   121fc:	add	r3, r3, #8192	; 0x2000
   12200:	mov	r2, r3
   12204:	mov	r3, #0
   12208:	str	r3, [r2, #12]
   1220c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12210:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12214:	add	r3, r2, r3
   12218:	str	r3, [fp, #-60]	; 0xffffffc4
   1221c:	ldr	r3, [pc, #1252]	; 12708 <__assert_fail@plt+0x1794>
   12220:	ldrb	r2, [r3]
   12224:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12228:	strb	r2, [r3]
   1222c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12230:	str	r3, [fp, #-44]	; 0xffffffd4
   12234:	b	12260 <__assert_fail@plt+0x12ec>
   12238:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1223c:	add	r3, r3, #1
   12240:	str	r3, [fp, #-44]	; 0xffffffd4
   12244:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12248:	add	r3, r3, #8192	; 0x2000
   1224c:	ldr	r3, [r3, #8]
   12250:	add	r3, r3, #1
   12254:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12258:	add	r2, r2, #8192	; 0x2000
   1225c:	str	r3, [r2, #8]
   12260:	ldr	r3, [pc, #1184]	; 12708 <__assert_fail@plt+0x1794>
   12264:	ldrb	r3, [r3]
   12268:	mov	r1, r3
   1226c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12270:	bl	10da0 <rawmemchr@plt>
   12274:	str	r0, [fp, #-44]	; 0xffffffd4
   12278:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1227c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12280:	cmp	r2, r3
   12284:	bcc	12238 <__assert_fail@plt+0x12c4>
   12288:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1228c:	add	r3, r3, #8192	; 0x2000
   12290:	ldr	r3, [r3, #8]
   12294:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12298:	add	r3, r2, r3
   1229c:	str	r3, [fp, #-36]	; 0xffffffdc
   122a0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122a4:	add	r3, r3, #8192	; 0x2000
   122a8:	ldr	r2, [r3, #4]
   122ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   122b0:	add	r3, r3, #8192	; 0x2000
   122b4:	ldr	r3, [r3, #4]
   122b8:	add	r3, r2, r3
   122bc:	cmp	r3, #8192	; 0x2000
   122c0:	bcs	12344 <__assert_fail@plt+0x13d0>
   122c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   122c8:	add	r3, r3, #8192	; 0x2000
   122cc:	ldr	r3, [r3, #4]
   122d0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   122d4:	add	r0, r2, r3
   122d8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   122dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122e0:	add	r3, r3, #8192	; 0x2000
   122e4:	ldr	r3, [r3, #4]
   122e8:	mov	r2, r3
   122ec:	bl	10d4c <memcpy@plt>
   122f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   122f4:	add	r3, r3, #8192	; 0x2000
   122f8:	ldr	r2, [r3, #4]
   122fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12300:	add	r3, r3, #8192	; 0x2000
   12304:	ldr	r3, [r3, #4]
   12308:	add	r3, r2, r3
   1230c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12310:	add	r2, r2, #8192	; 0x2000
   12314:	str	r3, [r2, #4]
   12318:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1231c:	add	r3, r3, #8192	; 0x2000
   12320:	ldr	r2, [r3, #8]
   12324:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12328:	add	r3, r3, #8192	; 0x2000
   1232c:	ldr	r3, [r3, #8]
   12330:	add	r3, r2, r3
   12334:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12338:	add	r2, r2, #8192	; 0x2000
   1233c:	str	r3, [r2, #8]
   12340:	b	12164 <__assert_fail@plt+0x11f0>
   12344:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12348:	add	r3, r3, #8192	; 0x2000
   1234c:	mov	r2, r3
   12350:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12354:	str	r3, [r2, #12]
   12358:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1235c:	add	r3, r3, #8192	; 0x2000
   12360:	ldr	r3, [r3, #12]
   12364:	str	r3, [fp, #-28]	; 0xffffffe4
   12368:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1236c:	add	r3, r3, #8192	; 0x2000
   12370:	ldr	r3, [r3, #8]
   12374:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12378:	sub	r3, r2, r3
   1237c:	mov	r0, r3
   12380:	mov	r1, #0
   12384:	ldrd	r2, [fp, #-84]	; 0xffffffac
   12388:	cmp	r1, r3
   1238c:	cmpeq	r0, r2
   12390:	bls	12408 <__assert_fail@plt+0x1494>
   12394:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12398:	add	r3, r3, #8192	; 0x2000
   1239c:	ldr	r3, [r3, #4]
   123a0:	mov	r2, r3
   123a4:	mov	r3, #0
   123a8:	ldrd	r0, [fp, #-20]	; 0xffffffec
   123ac:	adds	r2, r2, r0
   123b0:	adc	r3, r3, r1
   123b4:	strd	r2, [fp, #-20]	; 0xffffffec
   123b8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   123bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   123c0:	add	r3, r3, #8192	; 0x2000
   123c4:	ldr	r3, [r3, #4]
   123c8:	mov	r1, r3
   123cc:	mov	r0, r2
   123d0:	bl	115bc <__assert_fail@plt+0x648>
   123d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   123d8:	str	r3, [fp, #-32]	; 0xffffffe0
   123dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   123e0:	add	r3, r3, #8192	; 0x2000
   123e4:	ldr	r3, [r3, #8]
   123e8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   123ec:	sub	r3, r2, r3
   123f0:	str	r3, [fp, #-36]	; 0xffffffdc
   123f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   123f8:	add	r3, r3, #8192	; 0x2000
   123fc:	ldr	r3, [r3, #12]
   12400:	str	r3, [fp, #-24]	; 0xffffffe8
   12404:	b	12164 <__assert_fail@plt+0x11f0>
   12408:	ldr	r0, [pc, #756]	; 12704 <__assert_fail@plt+0x1790>
   1240c:	bl	170cc <__assert_fail@plt+0x6158>
   12410:	mov	r3, r0
   12414:	str	r3, [fp, #-32]	; 0xffffffe0
   12418:	b	12164 <__assert_fail@plt+0x11f0>
   1241c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12420:	bl	13de8 <__assert_fail@plt+0x2e74>
   12424:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12428:	cmn	r3, #1
   1242c:	bne	12474 <__assert_fail@plt+0x1500>
   12430:	bl	10eb4 <__errno_location@plt>
   12434:	mov	r3, r0
   12438:	ldr	r4, [r3]
   1243c:	ldr	r0, [pc, #712]	; 1270c <__assert_fail@plt+0x1798>
   12440:	bl	10e78 <gettext@plt>
   12444:	mov	r5, r0
   12448:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1244c:	mov	r0, #4
   12450:	bl	16418 <__assert_fail@plt+0x54a4>
   12454:	mov	r3, r0
   12458:	mov	r2, r5
   1245c:	mov	r1, r4
   12460:	mov	r0, #0
   12464:	bl	10e0c <error@plt>
   12468:	mov	r3, #0
   1246c:	strb	r3, [fp, #-37]	; 0xffffffdb
   12470:	b	1267c <__assert_fail@plt+0x1708>
   12474:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12478:	add	r3, r3, #8192	; 0x2000
   1247c:	ldr	r3, [r3, #4]
   12480:	cmp	r3, #0
   12484:	beq	124d8 <__assert_fail@plt+0x1564>
   12488:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1248c:	add	r3, r3, #8192	; 0x2000
   12490:	ldr	r3, [r3, #4]
   12494:	sub	r3, r3, #1
   12498:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1249c:	ldrb	r2, [r2, r3]
   124a0:	ldr	r3, [pc, #608]	; 12708 <__assert_fail@plt+0x1794>
   124a4:	ldrb	r3, [r3]
   124a8:	cmp	r2, r3
   124ac:	beq	124d8 <__assert_fail@plt+0x1564>
   124b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   124b4:	add	r3, r3, #8192	; 0x2000
   124b8:	ldr	r3, [r3, #8]
   124bc:	add	r3, r3, #1
   124c0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   124c4:	add	r2, r2, #8192	; 0x2000
   124c8:	str	r3, [r2, #8]
   124cc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   124d0:	add	r3, r3, #1
   124d4:	str	r3, [fp, #-36]	; 0xffffffdc
   124d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   124dc:	str	r3, [fp, #-32]	; 0xffffffe0
   124e0:	b	1254c <__assert_fail@plt+0x15d8>
   124e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   124e8:	add	r3, r3, #8192	; 0x2000
   124ec:	ldr	r3, [r3, #4]
   124f0:	mov	r2, r3
   124f4:	mov	r3, #0
   124f8:	ldrd	r0, [fp, #-20]	; 0xffffffec
   124fc:	adds	r2, r2, r0
   12500:	adc	r3, r3, r1
   12504:	strd	r2, [fp, #-20]	; 0xffffffec
   12508:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1250c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12510:	add	r3, r3, #8192	; 0x2000
   12514:	ldr	r3, [r3, #4]
   12518:	mov	r1, r3
   1251c:	mov	r0, r2
   12520:	bl	115bc <__assert_fail@plt+0x648>
   12524:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12528:	add	r3, r3, #8192	; 0x2000
   1252c:	ldr	r3, [r3, #8]
   12530:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12534:	sub	r3, r2, r3
   12538:	str	r3, [fp, #-36]	; 0xffffffdc
   1253c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12540:	add	r3, r3, #8192	; 0x2000
   12544:	ldr	r3, [r3, #12]
   12548:	str	r3, [fp, #-32]	; 0xffffffe0
   1254c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12550:	add	r3, r3, #8192	; 0x2000
   12554:	ldr	r3, [r3, #8]
   12558:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1255c:	sub	r3, r2, r3
   12560:	mov	r0, r3
   12564:	mov	r1, #0
   12568:	ldrd	r2, [fp, #-84]	; 0xffffffac
   1256c:	cmp	r1, r3
   12570:	cmpeq	r0, r2
   12574:	bhi	124e4 <__assert_fail@plt+0x1570>
   12578:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1257c:	mov	r0, r3
   12580:	mov	r1, #0
   12584:	ldrd	r2, [fp, #-84]	; 0xffffffac
   12588:	cmp	r1, r3
   1258c:	cmpeq	r0, r2
   12590:	bls	126a0 <__assert_fail@plt+0x172c>
   12594:	ldr	r3, [fp, #-84]	; 0xffffffac
   12598:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1259c:	sub	r3, r2, r3
   125a0:	str	r3, [fp, #-48]	; 0xffffffd0
   125a4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   125a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   125ac:	add	r3, r3, #8192	; 0x2000
   125b0:	ldr	r3, [r3, #4]
   125b4:	add	r3, r2, r3
   125b8:	str	r3, [fp, #-64]	; 0xffffffc0
   125bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   125c0:	str	r3, [fp, #-52]	; 0xffffffcc
   125c4:	b	125fc <__assert_fail@plt+0x1688>
   125c8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   125cc:	add	r3, r3, #1
   125d0:	str	r3, [fp, #-52]	; 0xffffffcc
   125d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   125d8:	add	r3, r3, #8192	; 0x2000
   125dc:	ldr	r3, [r3, #8]
   125e0:	add	r3, r3, #1
   125e4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   125e8:	add	r2, r2, #8192	; 0x2000
   125ec:	str	r3, [r2, #8]
   125f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   125f4:	sub	r3, r3, #1
   125f8:	str	r3, [fp, #-48]	; 0xffffffd0
   125fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12600:	cmp	r3, #0
   12604:	beq	1263c <__assert_fail@plt+0x16c8>
   12608:	ldr	r3, [pc, #248]	; 12708 <__assert_fail@plt+0x1794>
   1260c:	ldrb	r3, [r3]
   12610:	mov	r1, r3
   12614:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12618:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1261c:	sub	r3, r2, r3
   12620:	mov	r2, r3
   12624:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12628:	bl	10ef0 <memchr@plt>
   1262c:	str	r0, [fp, #-52]	; 0xffffffcc
   12630:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12634:	cmp	r3, #0
   12638:	bne	125c8 <__assert_fail@plt+0x1654>
   1263c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12640:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12644:	sub	r3, r3, r2
   12648:	mov	r2, r3
   1264c:	asr	r3, r2, #31
   12650:	ldrd	r0, [fp, #-20]	; 0xffffffec
   12654:	adds	r2, r2, r0
   12658:	adc	r3, r3, r1
   1265c:	strd	r2, [fp, #-20]	; 0xffffffec
   12660:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12664:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12668:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1266c:	sub	r3, r3, r1
   12670:	mov	r1, r3
   12674:	mov	r0, r2
   12678:	bl	115bc <__assert_fail@plt+0x648>
   1267c:	b	126a0 <__assert_fail@plt+0x172c>
   12680:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12684:	add	r3, r3, #8192	; 0x2000
   12688:	ldr	r3, [r3, #12]
   1268c:	str	r3, [fp, #-32]	; 0xffffffe0
   12690:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12694:	bl	13de8 <__assert_fail@plt+0x2e74>
   12698:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1269c:	str	r3, [fp, #-24]	; 0xffffffe8
   126a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   126a4:	cmp	r3, #0
   126a8:	bne	12680 <__assert_fail@plt+0x170c>
   126ac:	ldrd	r2, [fp, #4]
   126b0:	cmp	r2, #0
   126b4:	sbcs	r3, r3, #0
   126b8:	blt	126f4 <__assert_fail@plt+0x1780>
   126bc:	ldrd	r2, [fp, #-20]	; 0xffffffec
   126c0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   126c4:	str	r1, [sp, #4]
   126c8:	mov	r1, #0
   126cc:	str	r1, [sp]
   126d0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   126d4:	bl	117b8 <__assert_fail@plt+0x844>
   126d8:	mov	r2, r0
   126dc:	mov	r3, r1
   126e0:	cmp	r2, #0
   126e4:	sbcs	r3, r3, #0
   126e8:	bge	126f4 <__assert_fail@plt+0x1780>
   126ec:	mov	r3, #0
   126f0:	strb	r3, [fp, #-37]	; 0xffffffdb
   126f4:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   126f8:	mov	r0, r3
   126fc:	sub	sp, fp, #12
   12700:	pop	{r4, r5, fp, pc}
   12704:	andeq	r2, r0, r0, lsl r0
   12708:	andeq	fp, r2, r7, ror #2
   1270c:	muleq	r1, r0, r5
   12710:	push	{r4, r5, fp, lr}
   12714:	add	fp, sp, #12
   12718:	sub	sp, sp, #8192	; 0x2000
   1271c:	sub	sp, sp, #56	; 0x38
   12720:	sub	ip, fp, #8192	; 0x2000
   12724:	sub	ip, ip, #12
   12728:	str	r0, [ip, #-36]	; 0xffffffdc
   1272c:	sub	r0, fp, #8192	; 0x2000
   12730:	sub	r0, r0, #12
   12734:	str	r1, [r0, #-40]	; 0xffffffd8
   12738:	sub	r1, fp, #8192	; 0x2000
   1273c:	sub	r1, r1, #12
   12740:	sub	r1, r1, #48	; 0x30
   12744:	strd	r2, [r1]
   12748:	ldrd	r2, [fp, #12]
   1274c:	strd	r2, [fp, #-28]	; 0xffffffe4
   12750:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   12754:	ldrd	r2, [fp, #4]
   12758:	subs	r0, r0, r2
   1275c:	sbc	r1, r1, r3
   12760:	asr	r3, r1, #31
   12764:	mov	r2, r3
   12768:	asr	r3, r2, #31
   1276c:	eor	r0, r0, r2
   12770:	eor	r1, r1, r3
   12774:	subs	r0, r0, r2
   12778:	sbc	r1, r1, r3
   1277c:	ldr	r4, [pc, #1232]	; 12c54 <__assert_fail@plt+0x1ce0>
   12780:	mov	r5, #0
   12784:	and	r0, r0, r4
   12788:	and	r1, r1, r5
   1278c:	eor	r0, r0, r2
   12790:	eor	r1, r1, r3
   12794:	subs	r2, r0, r2
   12798:	sbc	r3, r1, r3
   1279c:	mov	r3, r2
   127a0:	str	r3, [fp, #-16]
   127a4:	ldr	r3, [fp, #-16]
   127a8:	cmp	r3, #0
   127ac:	bne	127b8 <__assert_fail@plt+0x1844>
   127b0:	mov	r3, #8192	; 0x2000
   127b4:	str	r3, [fp, #-16]
   127b8:	ldr	r3, [fp, #-16]
   127bc:	mov	r2, r3
   127c0:	mov	r3, #0
   127c4:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   127c8:	subs	r2, r0, r2
   127cc:	sbc	r3, r1, r3
   127d0:	strd	r2, [fp, #-28]	; 0xffffffe4
   127d4:	sub	r3, fp, #8192	; 0x2000
   127d8:	sub	r3, r3, #12
   127dc:	mov	r1, r3
   127e0:	sub	r3, fp, #8192	; 0x2000
   127e4:	sub	r3, r3, #12
   127e8:	ldr	r3, [r3, #-36]	; 0xffffffdc
   127ec:	str	r3, [sp, #4]
   127f0:	mov	r3, #0
   127f4:	str	r3, [sp]
   127f8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   127fc:	ldr	r0, [r1, #-40]	; 0xffffffd8
   12800:	bl	117b8 <__assert_fail@plt+0x844>
   12804:	mov	r2, r0
   12808:	mov	r3, r1
   1280c:	cmp	r2, #0
   12810:	sbcs	r3, r3, #0
   12814:	bge	12820 <__assert_fail@plt+0x18ac>
   12818:	mov	r3, #0
   1281c:	b	12c48 <__assert_fail@plt+0x1cd4>
   12820:	sub	r3, fp, #8192	; 0x2000
   12824:	sub	r3, r3, #12
   12828:	sub	r3, r3, #32
   1282c:	sub	r2, fp, #8192	; 0x2000
   12830:	sub	r2, r2, #12
   12834:	mov	r0, r2
   12838:	ldr	r2, [fp, #-16]
   1283c:	mov	r1, r3
   12840:	ldr	r0, [r0, #-40]	; 0xffffffd8
   12844:	bl	1683c <__assert_fail@plt+0x58c8>
   12848:	str	r0, [fp, #-16]
   1284c:	ldr	r3, [fp, #-16]
   12850:	cmn	r3, #1
   12854:	bne	128a0 <__assert_fail@plt+0x192c>
   12858:	bl	10eb4 <__errno_location@plt>
   1285c:	mov	r3, r0
   12860:	ldr	r4, [r3]
   12864:	ldr	r0, [pc, #1004]	; 12c58 <__assert_fail@plt+0x1ce4>
   12868:	bl	10e78 <gettext@plt>
   1286c:	mov	r5, r0
   12870:	sub	r3, fp, #8192	; 0x2000
   12874:	sub	r3, r3, #12
   12878:	ldr	r1, [r3, #-36]	; 0xffffffdc
   1287c:	mov	r0, #4
   12880:	bl	16418 <__assert_fail@plt+0x54a4>
   12884:	mov	r3, r0
   12888:	mov	r2, r5
   1288c:	mov	r1, r4
   12890:	mov	r0, #0
   12894:	bl	10e0c <error@plt>
   12898:	mov	r3, #0
   1289c:	b	12c48 <__assert_fail@plt+0x1cd4>
   128a0:	sub	r3, fp, #8192	; 0x2000
   128a4:	sub	r3, r3, #12
   128a8:	sub	r3, r3, #48	; 0x30
   128ac:	ldr	r2, [r3]
   128b0:	ldr	r3, [r3, #4]
   128b4:	orr	r3, r2, r3
   128b8:	cmp	r3, #0
   128bc:	moveq	r3, #1
   128c0:	movne	r3, #0
   128c4:	strb	r3, [fp, #-33]	; 0xffffffdf
   128c8:	sub	r3, fp, #8192	; 0x2000
   128cc:	sub	r3, r3, #12
   128d0:	sub	r3, r3, #48	; 0x30
   128d4:	ldrd	r2, [r3]
   128d8:	orrs	r3, r2, r3
   128dc:	beq	12940 <__assert_fail@plt+0x19cc>
   128e0:	ldr	r3, [fp, #-16]
   128e4:	cmp	r3, #0
   128e8:	beq	12940 <__assert_fail@plt+0x19cc>
   128ec:	ldr	r3, [fp, #-16]
   128f0:	sub	r3, r3, #1
   128f4:	sub	r2, fp, #8192	; 0x2000
   128f8:	sub	r2, r2, #12
   128fc:	add	r3, r2, r3
   12900:	ldrb	r2, [r3, #-32]	; 0xffffffe0
   12904:	ldr	r3, [pc, #848]	; 12c5c <__assert_fail@plt+0x1ce8>
   12908:	ldrb	r3, [r3]
   1290c:	cmp	r2, r3
   12910:	beq	12940 <__assert_fail@plt+0x19cc>
   12914:	sub	r3, fp, #8192	; 0x2000
   12918:	sub	r3, r3, #12
   1291c:	sub	r3, r3, #48	; 0x30
   12920:	mov	r1, r3
   12924:	sub	r3, fp, #8192	; 0x2000
   12928:	sub	r3, r3, #12
   1292c:	sub	r3, r3, #48	; 0x30
   12930:	ldrd	r2, [r3]
   12934:	subs	r2, r2, #1
   12938:	sbc	r3, r3, #0
   1293c:	strd	r2, [r1]
   12940:	ldr	r3, [fp, #-16]
   12944:	str	r3, [fp, #-32]	; 0xffffffe0
   12948:	b	12b2c <__assert_fail@plt+0x1bb8>
   1294c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12950:	cmp	r3, #0
   12954:	beq	12968 <__assert_fail@plt+0x19f4>
   12958:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1295c:	sub	r3, r3, #1
   12960:	str	r3, [fp, #-32]	; 0xffffffe0
   12964:	b	129b4 <__assert_fail@plt+0x1a40>
   12968:	ldr	r3, [pc, #748]	; 12c5c <__assert_fail@plt+0x1ce8>
   1296c:	ldrb	r3, [r3]
   12970:	mov	r1, r3
   12974:	sub	r3, fp, #8192	; 0x2000
   12978:	sub	r3, r3, #12
   1297c:	sub	r3, r3, #32
   12980:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12984:	mov	r0, r3
   12988:	bl	10e9c <memrchr@plt>
   1298c:	str	r0, [fp, #-40]	; 0xffffffd8
   12990:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12994:	cmp	r3, #0
   12998:	beq	12b3c <__assert_fail@plt+0x1bc8>
   1299c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   129a0:	sub	r3, fp, #8192	; 0x2000
   129a4:	sub	r3, r3, #12
   129a8:	sub	r3, r3, #32
   129ac:	sub	r3, r2, r3
   129b0:	str	r3, [fp, #-32]	; 0xffffffe0
   129b4:	sub	r3, fp, #8192	; 0x2000
   129b8:	sub	r3, r3, #12
   129bc:	sub	r3, r3, #48	; 0x30
   129c0:	ldrd	r2, [r3]
   129c4:	sub	r1, fp, #8192	; 0x2000
   129c8:	sub	r1, r1, #12
   129cc:	sub	r1, r1, #48	; 0x30
   129d0:	mov	ip, r1
   129d4:	subs	r0, r2, #1
   129d8:	sbc	r1, r3, #0
   129dc:	strd	r0, [ip]
   129e0:	orrs	r3, r2, r3
   129e4:	bne	12b2c <__assert_fail@plt+0x1bb8>
   129e8:	ldrd	r0, [fp, #4]
   129ec:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   129f0:	cmp	r0, r2
   129f4:	sbcs	r3, r1, r3
   129f8:	bge	12aa8 <__assert_fail@plt+0x1b34>
   129fc:	sub	r3, fp, #8192	; 0x2000
   12a00:	sub	r3, r3, #12
   12a04:	mov	r1, r3
   12a08:	sub	r3, fp, #8192	; 0x2000
   12a0c:	sub	r3, r3, #12
   12a10:	ldr	r3, [r3, #-36]	; 0xffffffdc
   12a14:	str	r3, [sp, #4]
   12a18:	mov	r3, #0
   12a1c:	str	r3, [sp]
   12a20:	ldrd	r2, [fp, #4]
   12a24:	ldr	r0, [r1, #-40]	; 0xffffffd8
   12a28:	bl	117b8 <__assert_fail@plt+0x844>
   12a2c:	mov	r2, r0
   12a30:	mov	r3, r1
   12a34:	cmp	r2, #0
   12a38:	sbcs	r3, r3, #0
   12a3c:	bge	12a48 <__assert_fail@plt+0x1ad4>
   12a40:	mov	r3, #0
   12a44:	b	12c48 <__assert_fail@plt+0x1cd4>
   12a48:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   12a4c:	ldrd	r2, [fp, #4]
   12a50:	subs	r2, r0, r2
   12a54:	sbc	r3, r1, r3
   12a58:	mov	r4, r2
   12a5c:	mov	r5, r3
   12a60:	sub	r3, fp, #8192	; 0x2000
   12a64:	sub	r3, r3, #12
   12a68:	mov	r1, r3
   12a6c:	mov	r2, r4
   12a70:	mov	r3, r5
   12a74:	ldr	r0, [r1, #-40]	; 0xffffffd8
   12a78:	bl	11664 <__assert_fail@plt+0x6f0>
   12a7c:	str	r0, [fp, #-44]	; 0xffffffd4
   12a80:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12a84:	cmp	r3, #0
   12a88:	beq	12aa8 <__assert_fail@plt+0x1b34>
   12a8c:	sub	r3, fp, #8192	; 0x2000
   12a90:	sub	r3, r3, #12
   12a94:	ldr	r1, [r3, #-36]	; 0xffffffdc
   12a98:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12a9c:	bl	11498 <__assert_fail@plt+0x524>
   12aa0:	mov	r3, #0
   12aa4:	b	12c48 <__assert_fail@plt+0x1cd4>
   12aa8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12aac:	add	r2, r3, #1
   12ab0:	sub	r3, fp, #8192	; 0x2000
   12ab4:	sub	r3, r3, #12
   12ab8:	sub	r3, r3, #32
   12abc:	mov	r1, r2
   12ac0:	mov	r0, r3
   12ac4:	bl	115bc <__assert_fail@plt+0x648>
   12ac8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12acc:	mov	r0, r3
   12ad0:	mov	r1, #0
   12ad4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12ad8:	adds	r2, r2, r0
   12adc:	adc	r3, r3, r1
   12ae0:	adds	r2, r2, #1
   12ae4:	adc	r3, r3, #0
   12ae8:	sub	r1, fp, #8192	; 0x2000
   12aec:	sub	r1, r1, #12
   12af0:	mov	r0, r1
   12af4:	sub	r1, fp, #8192	; 0x2000
   12af8:	sub	r1, r1, #12
   12afc:	ldr	r1, [r1, #-36]	; 0xffffffdc
   12b00:	str	r1, [sp, #4]
   12b04:	mov	r1, #0
   12b08:	str	r1, [sp]
   12b0c:	ldr	r0, [r0, #-40]	; 0xffffffd8
   12b10:	bl	117b8 <__assert_fail@plt+0x844>
   12b14:	mov	r2, r0
   12b18:	mov	r3, r1
   12b1c:	mvn	r3, r3
   12b20:	lsr	r3, r3, #31
   12b24:	uxtb	r3, r3
   12b28:	b	12c48 <__assert_fail@plt+0x1cd4>
   12b2c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12b30:	cmp	r3, #0
   12b34:	bne	1294c <__assert_fail@plt+0x19d8>
   12b38:	b	12b40 <__assert_fail@plt+0x1bcc>
   12b3c:	nop			; (mov r0, r0)
   12b40:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   12b44:	ldrd	r2, [fp, #4]
   12b48:	cmp	r1, r3
   12b4c:	cmpeq	r0, r2
   12b50:	bne	12b5c <__assert_fail@plt+0x1be8>
   12b54:	mov	r3, #1
   12b58:	b	12c48 <__assert_fail@plt+0x1cd4>
   12b5c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12b60:	subs	r2, r2, #8192	; 0x2000
   12b64:	sbc	r3, r3, #0
   12b68:	strd	r2, [fp, #-28]	; 0xffffffe4
   12b6c:	sub	r3, fp, #8192	; 0x2000
   12b70:	sub	r3, r3, #12
   12b74:	mov	r1, r3
   12b78:	sub	r3, fp, #8192	; 0x2000
   12b7c:	sub	r3, r3, #12
   12b80:	ldr	r3, [r3, #-36]	; 0xffffffdc
   12b84:	str	r3, [sp, #4]
   12b88:	mov	r3, #0
   12b8c:	str	r3, [sp]
   12b90:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12b94:	ldr	r0, [r1, #-40]	; 0xffffffd8
   12b98:	bl	117b8 <__assert_fail@plt+0x844>
   12b9c:	mov	r2, r0
   12ba0:	mov	r3, r1
   12ba4:	cmp	r2, #0
   12ba8:	sbcs	r3, r3, #0
   12bac:	bge	12bb8 <__assert_fail@plt+0x1c44>
   12bb0:	mov	r3, #0
   12bb4:	b	12c48 <__assert_fail@plt+0x1cd4>
   12bb8:	sub	r3, fp, #8192	; 0x2000
   12bbc:	sub	r3, r3, #12
   12bc0:	sub	r3, r3, #32
   12bc4:	sub	r2, fp, #8192	; 0x2000
   12bc8:	sub	r2, r2, #12
   12bcc:	mov	r0, r2
   12bd0:	mov	r2, #8192	; 0x2000
   12bd4:	mov	r1, r3
   12bd8:	ldr	r0, [r0, #-40]	; 0xffffffd8
   12bdc:	bl	1683c <__assert_fail@plt+0x58c8>
   12be0:	str	r0, [fp, #-16]
   12be4:	ldr	r3, [fp, #-16]
   12be8:	cmn	r3, #1
   12bec:	bne	12c38 <__assert_fail@plt+0x1cc4>
   12bf0:	bl	10eb4 <__errno_location@plt>
   12bf4:	mov	r3, r0
   12bf8:	ldr	r4, [r3]
   12bfc:	ldr	r0, [pc, #84]	; 12c58 <__assert_fail@plt+0x1ce4>
   12c00:	bl	10e78 <gettext@plt>
   12c04:	mov	r5, r0
   12c08:	sub	r3, fp, #8192	; 0x2000
   12c0c:	sub	r3, r3, #12
   12c10:	ldr	r1, [r3, #-36]	; 0xffffffdc
   12c14:	mov	r0, #4
   12c18:	bl	16418 <__assert_fail@plt+0x54a4>
   12c1c:	mov	r3, r0
   12c20:	mov	r2, r5
   12c24:	mov	r1, r4
   12c28:	mov	r0, #0
   12c2c:	bl	10e0c <error@plt>
   12c30:	mov	r3, #0
   12c34:	b	12c48 <__assert_fail@plt+0x1cd4>
   12c38:	ldr	r3, [fp, #-16]
   12c3c:	cmp	r3, #0
   12c40:	bne	12940 <__assert_fail@plt+0x19cc>
   12c44:	mov	r3, #1
   12c48:	mov	r0, r3
   12c4c:	sub	sp, fp, #12
   12c50:	pop	{r4, r5, fp, pc}
   12c54:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   12c58:	muleq	r1, r0, r5
   12c5c:	andeq	fp, r2, r7, ror #2
   12c60:	push	{fp, lr}
   12c64:	add	fp, sp, #4
   12c68:	sub	sp, sp, #40	; 0x28
   12c6c:	str	r0, [fp, #-16]
   12c70:	str	r1, [fp, #-20]	; 0xffffffec
   12c74:	strd	r2, [fp, #-28]	; 0xffffffe4
   12c78:	ldr	r3, [fp, #4]
   12c7c:	ldrd	r2, [r3, #48]	; 0x30
   12c80:	strd	r2, [fp, #-12]
   12c84:	ldr	r3, [pc, #228]	; 12d70 <__assert_fail@plt+0x1dfc>
   12c88:	ldrb	r3, [r3]
   12c8c:	cmp	r3, #0
   12c90:	bne	12cf0 <__assert_fail@plt+0x1d7c>
   12c94:	ldrd	r2, [fp, #12]
   12c98:	cmp	r2, #0
   12c9c:	sbcs	r3, r3, #0
   12ca0:	blt	12cf0 <__assert_fail@plt+0x1d7c>
   12ca4:	ldr	r3, [fp, #4]
   12ca8:	ldr	r3, [r3, #56]	; 0x38
   12cac:	cmp	r3, #0
   12cb0:	ble	12cd8 <__assert_fail@plt+0x1d64>
   12cb4:	ldr	r3, [fp, #4]
   12cb8:	ldr	r3, [r3, #56]	; 0x38
   12cbc:	cmp	r3, #536870912	; 0x20000000
   12cc0:	bhi	12cd8 <__assert_fail@plt+0x1d64>
   12cc4:	ldr	r3, [fp, #4]
   12cc8:	ldr	r3, [r3, #56]	; 0x38
   12ccc:	mov	r2, r3
   12cd0:	asr	r3, r2, #31
   12cd4:	b	12ce0 <__assert_fail@plt+0x1d6c>
   12cd8:	mov	r2, #512	; 0x200
   12cdc:	mov	r3, #0
   12ce0:	ldrd	r0, [fp, #-12]
   12ce4:	cmp	r2, r0
   12ce8:	sbcs	r3, r3, r1
   12cec:	blt	12d10 <__assert_fail@plt+0x1d9c>
   12cf0:	ldrd	r2, [fp, #12]
   12cf4:	strd	r2, [sp]
   12cf8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12cfc:	ldr	r1, [fp, #-20]	; 0xffffffec
   12d00:	ldr	r0, [fp, #-16]
   12d04:	bl	120cc <__assert_fail@plt+0x1158>
   12d08:	mov	r3, r0
   12d0c:	b	12d64 <__assert_fail@plt+0x1df0>
   12d10:	ldrd	r2, [fp, #-12]
   12d14:	ldrd	r0, [fp, #12]
   12d18:	cmp	r0, r2
   12d1c:	sbcs	r3, r1, r3
   12d20:	bge	12d50 <__assert_fail@plt+0x1ddc>
   12d24:	ldrd	r2, [fp, #-12]
   12d28:	strd	r2, [sp, #8]
   12d2c:	ldrd	r2, [fp, #12]
   12d30:	strd	r2, [sp]
   12d34:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12d38:	ldr	r1, [fp, #-20]	; 0xffffffec
   12d3c:	ldr	r0, [fp, #-16]
   12d40:	bl	12710 <__assert_fail@plt+0x179c>
   12d44:	mov	r3, r0
   12d48:	cmp	r3, #0
   12d4c:	beq	12d58 <__assert_fail@plt+0x1de4>
   12d50:	mov	r3, #1
   12d54:	b	12d5c <__assert_fail@plt+0x1de8>
   12d58:	mov	r3, #0
   12d5c:	and	r3, r3, #1
   12d60:	uxtb	r3, r3
   12d64:	mov	r0, r3
   12d68:	sub	sp, fp, #4
   12d6c:	pop	{fp, pc}
   12d70:	andeq	fp, r2, r5, ror #2
   12d74:	push	{r4, r5, fp, lr}
   12d78:	add	fp, sp, #12
   12d7c:	sub	sp, sp, #8192	; 0x2000
   12d80:	sub	sp, sp, #24
   12d84:	sub	ip, fp, #8192	; 0x2000
   12d88:	sub	ip, ip, #12
   12d8c:	str	r0, [ip, #-12]
   12d90:	sub	r0, fp, #8192	; 0x2000
   12d94:	sub	r0, r0, #12
   12d98:	str	r1, [r0, #-16]
   12d9c:	sub	r1, fp, #8192	; 0x2000
   12da0:	sub	r1, r1, #12
   12da4:	sub	r1, r1, #16
   12da8:	strd	r2, [r1, #-8]
   12dac:	mov	r3, #8192	; 0x2000
   12db0:	str	r3, [fp, #-16]
   12db4:	b	12ed0 <__assert_fail@plt+0x1f5c>
   12db8:	ldr	r3, [fp, #-16]
   12dbc:	mov	r0, r3
   12dc0:	mov	r1, #0
   12dc4:	sub	r3, fp, #8192	; 0x2000
   12dc8:	sub	r3, r3, #12
   12dcc:	sub	r3, r3, #16
   12dd0:	ldrd	r2, [r3, #-8]
   12dd4:	cmp	r1, r3
   12dd8:	cmpeq	r0, r2
   12ddc:	bls	12df4 <__assert_fail@plt+0x1e80>
   12de0:	sub	r3, fp, #8192	; 0x2000
   12de4:	sub	r3, r3, #12
   12de8:	sub	r3, r3, #16
   12dec:	ldr	r3, [r3, #-8]
   12df0:	str	r3, [fp, #-16]
   12df4:	sub	r3, fp, #8192	; 0x2000
   12df8:	sub	r3, r3, #12
   12dfc:	sub	r3, r3, #8
   12e00:	sub	r2, fp, #8192	; 0x2000
   12e04:	sub	r2, r2, #12
   12e08:	mov	r0, r2
   12e0c:	ldr	r2, [fp, #-16]
   12e10:	mov	r1, r3
   12e14:	ldr	r0, [r0, #-16]
   12e18:	bl	1683c <__assert_fail@plt+0x58c8>
   12e1c:	str	r0, [fp, #-20]	; 0xffffffec
   12e20:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e24:	cmn	r3, #1
   12e28:	bne	12e74 <__assert_fail@plt+0x1f00>
   12e2c:	bl	10eb4 <__errno_location@plt>
   12e30:	mov	r3, r0
   12e34:	ldr	r4, [r3]
   12e38:	ldr	r0, [pc, #192]	; 12f00 <__assert_fail@plt+0x1f8c>
   12e3c:	bl	10e78 <gettext@plt>
   12e40:	mov	r5, r0
   12e44:	sub	r3, fp, #8192	; 0x2000
   12e48:	sub	r3, r3, #12
   12e4c:	ldr	r1, [r3, #-12]
   12e50:	mov	r0, #4
   12e54:	bl	16418 <__assert_fail@plt+0x54a4>
   12e58:	mov	r3, r0
   12e5c:	mov	r2, r5
   12e60:	mov	r1, r4
   12e64:	mov	r0, #0
   12e68:	bl	10e0c <error@plt>
   12e6c:	mov	r3, #0
   12e70:	b	12ef4 <__assert_fail@plt+0x1f80>
   12e74:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e78:	cmp	r3, #0
   12e7c:	beq	12eec <__assert_fail@plt+0x1f78>
   12e80:	sub	r3, fp, #8192	; 0x2000
   12e84:	sub	r3, r3, #12
   12e88:	sub	r3, r3, #8
   12e8c:	ldr	r1, [fp, #-20]	; 0xffffffec
   12e90:	mov	r0, r3
   12e94:	bl	115bc <__assert_fail@plt+0x648>
   12e98:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e9c:	mov	r0, r3
   12ea0:	mov	r1, #0
   12ea4:	sub	r3, fp, #8192	; 0x2000
   12ea8:	sub	r3, r3, #12
   12eac:	sub	r3, r3, #16
   12eb0:	mov	ip, r3
   12eb4:	sub	r3, fp, #8192	; 0x2000
   12eb8:	sub	r3, r3, #12
   12ebc:	sub	r3, r3, #16
   12ec0:	ldrd	r2, [r3, #-8]
   12ec4:	subs	r2, r2, r0
   12ec8:	sbc	r3, r3, r1
   12ecc:	strd	r2, [ip, #-8]
   12ed0:	sub	r3, fp, #8192	; 0x2000
   12ed4:	sub	r3, r3, #12
   12ed8:	sub	r3, r3, #16
   12edc:	ldrd	r2, [r3, #-8]
   12ee0:	orrs	r3, r2, r3
   12ee4:	bne	12db8 <__assert_fail@plt+0x1e44>
   12ee8:	b	12ef0 <__assert_fail@plt+0x1f7c>
   12eec:	nop			; (mov r0, r0)
   12ef0:	mov	r3, #1
   12ef4:	mov	r0, r3
   12ef8:	sub	sp, fp, #12
   12efc:	pop	{r4, r5, fp, pc}
   12f00:	muleq	r1, r0, r5
   12f04:	push	{r4, r5, fp, lr}
   12f08:	add	fp, sp, #12
   12f0c:	sub	sp, sp, #8320	; 0x2080
   12f10:	sub	sp, sp, #16
   12f14:	sub	ip, fp, #8192	; 0x2000
   12f18:	sub	ip, ip, #12
   12f1c:	str	r0, [ip, #-124]	; 0xffffff84
   12f20:	sub	r0, fp, #8192	; 0x2000
   12f24:	sub	r0, r0, #12
   12f28:	str	r1, [r0, #-128]	; 0xffffff80
   12f2c:	sub	r1, fp, #8320	; 0x2080
   12f30:	sub	r1, r1, #12
   12f34:	strd	r2, [r1, #-8]
   12f38:	b	13158 <__assert_fail@plt+0x21e4>
   12f3c:	sub	r3, fp, #8192	; 0x2000
   12f40:	sub	r3, r3, #12
   12f44:	sub	r3, r3, #16
   12f48:	sub	r2, fp, #8192	; 0x2000
   12f4c:	sub	r2, r2, #12
   12f50:	mov	r0, r2
   12f54:	mov	r2, #8192	; 0x2000
   12f58:	mov	r1, r3
   12f5c:	ldr	r0, [r0, #-128]	; 0xffffff80
   12f60:	bl	1683c <__assert_fail@plt+0x58c8>
   12f64:	str	r0, [fp, #-20]	; 0xffffffec
   12f68:	mov	r3, #0
   12f6c:	str	r3, [fp, #-16]
   12f70:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f74:	cmn	r3, #1
   12f78:	bne	12fc4 <__assert_fail@plt+0x2050>
   12f7c:	bl	10eb4 <__errno_location@plt>
   12f80:	mov	r3, r0
   12f84:	ldr	r4, [r3]
   12f88:	ldr	r0, [pc, #500]	; 13184 <__assert_fail@plt+0x2210>
   12f8c:	bl	10e78 <gettext@plt>
   12f90:	mov	r5, r0
   12f94:	sub	r3, fp, #8192	; 0x2000
   12f98:	sub	r3, r3, #12
   12f9c:	ldr	r1, [r3, #-124]	; 0xffffff84
   12fa0:	mov	r0, #4
   12fa4:	bl	16418 <__assert_fail@plt+0x54a4>
   12fa8:	mov	r3, r0
   12fac:	mov	r2, r5
   12fb0:	mov	r1, r4
   12fb4:	mov	r0, #0
   12fb8:	bl	10e0c <error@plt>
   12fbc:	mov	r3, #0
   12fc0:	b	13178 <__assert_fail@plt+0x2204>
   12fc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fc8:	cmp	r3, #0
   12fcc:	beq	13170 <__assert_fail@plt+0x21fc>
   12fd0:	b	13128 <__assert_fail@plt+0x21b4>
   12fd4:	ldr	r3, [fp, #-16]
   12fd8:	add	r2, r3, #1
   12fdc:	str	r2, [fp, #-16]
   12fe0:	sub	r2, fp, #8192	; 0x2000
   12fe4:	sub	r2, r2, #12
   12fe8:	add	r3, r2, r3
   12fec:	ldrb	r0, [r3, #-16]
   12ff0:	ldr	r3, [pc, #400]	; 13188 <__assert_fail@plt+0x2214>
   12ff4:	ldrb	r1, [r3]
   12ff8:	sub	r3, fp, #8320	; 0x2080
   12ffc:	sub	r3, r3, #12
   13000:	mov	ip, r3
   13004:	sub	r3, fp, #8320	; 0x2080
   13008:	sub	r3, r3, #12
   1300c:	ldrd	r2, [r3, #-8]
   13010:	strd	r2, [ip, #-8]
   13014:	cmp	r0, r1
   13018:	bne	13128 <__assert_fail@plt+0x21b4>
   1301c:	sub	r3, fp, #8320	; 0x2080
   13020:	sub	r3, r3, #12
   13024:	mov	r1, r3
   13028:	sub	r3, fp, #8320	; 0x2080
   1302c:	sub	r3, r3, #12
   13030:	ldrd	r2, [r3, #-8]
   13034:	subs	r2, r2, #1
   13038:	sbc	r3, r3, #0
   1303c:	strd	r2, [r1, #-8]
   13040:	sub	r3, fp, #8320	; 0x2080
   13044:	sub	r3, r3, #12
   13048:	ldrd	r2, [r3, #-8]
   1304c:	orrs	r3, r2, r3
   13050:	bne	13128 <__assert_fail@plt+0x21b4>
   13054:	ldr	r2, [fp, #-20]	; 0xffffffec
   13058:	ldr	r3, [fp, #-16]
   1305c:	sub	r3, r2, r3
   13060:	mov	r2, r3
   13064:	mov	r3, #0
   13068:	strd	r2, [fp, #-28]	; 0xffffffe4
   1306c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13070:	rsbs	r2, r2, #0
   13074:	rsc	r3, r3, #0
   13078:	sub	r1, fp, #8192	; 0x2000
   1307c:	sub	r1, r1, #12
   13080:	mov	r0, r1
   13084:	mov	r1, #1
   13088:	str	r1, [sp]
   1308c:	ldr	r0, [r0, #-128]	; 0xffffff80
   13090:	bl	10dd0 <lseek64@plt>
   13094:	mov	r2, r0
   13098:	mov	r3, r1
   1309c:	cmp	r2, #0
   130a0:	sbcs	r3, r3, #0
   130a4:	bge	1313c <__assert_fail@plt+0x21c8>
   130a8:	sub	r3, fp, #8256	; 0x2040
   130ac:	sub	r3, r3, #12
   130b0:	sub	r3, r3, #56	; 0x38
   130b4:	sub	r2, fp, #8192	; 0x2000
   130b8:	sub	r2, r2, #12
   130bc:	mov	r1, r3
   130c0:	ldr	r0, [r2, #-128]	; 0xffffff80
   130c4:	bl	19ddc <__assert_fail@plt+0x8e68>
   130c8:	mov	r3, r0
   130cc:	cmp	r3, #0
   130d0:	bne	130ec <__assert_fail@plt+0x2178>
   130d4:	sub	r3, fp, #8192	; 0x2000
   130d8:	sub	r3, r3, #12
   130dc:	ldr	r3, [r3, #-104]	; 0xffffff98
   130e0:	and	r3, r3, #61440	; 0xf000
   130e4:	cmp	r3, #32768	; 0x8000
   130e8:	bne	1313c <__assert_fail@plt+0x21c8>
   130ec:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   130f0:	rsbs	r2, r2, #0
   130f4:	rsc	r3, r3, #0
   130f8:	sub	r1, fp, #8192	; 0x2000
   130fc:	sub	r1, r1, #12
   13100:	mov	r0, r1
   13104:	sub	r1, fp, #8192	; 0x2000
   13108:	sub	r1, r1, #12
   1310c:	ldr	r1, [r1, #-124]	; 0xffffff84
   13110:	str	r1, [sp, #4]
   13114:	mov	r1, #1
   13118:	str	r1, [sp]
   1311c:	ldr	r0, [r0, #-128]	; 0xffffff80
   13120:	bl	117b8 <__assert_fail@plt+0x844>
   13124:	b	1313c <__assert_fail@plt+0x21c8>
   13128:	ldr	r2, [fp, #-16]
   1312c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13130:	cmp	r2, r3
   13134:	bcc	12fd4 <__assert_fail@plt+0x2060>
   13138:	b	13140 <__assert_fail@plt+0x21cc>
   1313c:	nop			; (mov r0, r0)
   13140:	sub	r3, fp, #8192	; 0x2000
   13144:	sub	r3, r3, #12
   13148:	sub	r3, r3, #16
   1314c:	ldr	r1, [fp, #-16]
   13150:	mov	r0, r3
   13154:	bl	115bc <__assert_fail@plt+0x648>
   13158:	sub	r3, fp, #8320	; 0x2080
   1315c:	sub	r3, r3, #12
   13160:	ldrd	r2, [r3, #-8]
   13164:	orrs	r3, r2, r3
   13168:	bne	12f3c <__assert_fail@plt+0x1fc8>
   1316c:	b	13174 <__assert_fail@plt+0x2200>
   13170:	nop			; (mov r0, r0)
   13174:	mov	r3, #1
   13178:	mov	r0, r3
   1317c:	sub	sp, fp, #12
   13180:	pop	{r4, r5, fp, pc}
   13184:	muleq	r1, r0, r5
   13188:	andeq	fp, r2, r7, ror #2
   1318c:	push	{r4, r5, fp, lr}
   13190:	add	fp, sp, #12
   13194:	sub	sp, sp, #144	; 0x90
   13198:	str	r0, [fp, #-128]	; 0xffffff80
   1319c:	str	r1, [fp, #-132]	; 0xffffff7c
   131a0:	strd	r2, [fp, #-140]	; 0xffffff74
   131a4:	ldr	r3, [pc, #400]	; 1333c <__assert_fail@plt+0x23c8>
   131a8:	ldrb	r3, [r3]
   131ac:	cmp	r3, #0
   131b0:	beq	131bc <__assert_fail@plt+0x2248>
   131b4:	ldr	r0, [fp, #-128]	; 0xffffff80
   131b8:	bl	11558 <__assert_fail@plt+0x5e4>
   131bc:	ldrb	r3, [fp, #8]
   131c0:	cmp	r3, #0
   131c4:	beq	132f8 <__assert_fail@plt+0x2384>
   131c8:	mvn	r2, #0
   131cc:	mvn	r3, #0
   131d0:	strd	r2, [fp, #-20]	; 0xffffffec
   131d4:	sub	r3, fp, #124	; 0x7c
   131d8:	mov	r1, r3
   131dc:	ldr	r0, [fp, #-132]	; 0xffffff7c
   131e0:	bl	19ddc <__assert_fail@plt+0x8e68>
   131e4:	mov	r3, r0
   131e8:	cmp	r3, #0
   131ec:	beq	13230 <__assert_fail@plt+0x22bc>
   131f0:	bl	10eb4 <__errno_location@plt>
   131f4:	mov	r3, r0
   131f8:	ldr	r4, [r3]
   131fc:	ldr	r0, [pc, #316]	; 13340 <__assert_fail@plt+0x23cc>
   13200:	bl	10e78 <gettext@plt>
   13204:	mov	r5, r0
   13208:	ldr	r1, [fp, #-128]	; 0xffffff80
   1320c:	mov	r0, #4
   13210:	bl	16418 <__assert_fail@plt+0x54a4>
   13214:	mov	r3, r0
   13218:	mov	r2, r5
   1321c:	mov	r1, r4
   13220:	mov	r0, #0
   13224:	bl	10e0c <error@plt>
   13228:	mov	r3, #0
   1322c:	b	13330 <__assert_fail@plt+0x23bc>
   13230:	ldr	r3, [pc, #268]	; 13344 <__assert_fail@plt+0x23d0>
   13234:	ldrb	r3, [r3]
   13238:	eor	r3, r3, #1
   1323c:	uxtb	r3, r3
   13240:	cmp	r3, #0
   13244:	beq	1329c <__assert_fail@plt+0x2328>
   13248:	sub	r3, fp, #124	; 0x7c
   1324c:	mov	r0, r3
   13250:	bl	112b8 <__assert_fail@plt+0x344>
   13254:	mov	r3, r0
   13258:	cmp	r3, #0
   1325c:	beq	1329c <__assert_fail@plt+0x2328>
   13260:	ldr	r3, [fp, #-128]	; 0xffffff80
   13264:	str	r3, [sp, #4]
   13268:	mov	r3, #1
   1326c:	str	r3, [sp]
   13270:	mov	r2, #0
   13274:	mov	r3, #0
   13278:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1327c:	bl	117b8 <__assert_fail@plt+0x844>
   13280:	strd	r0, [fp, #-20]	; 0xffffffec
   13284:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13288:	cmp	r2, #0
   1328c:	sbcs	r3, r3, #0
   13290:	bge	1329c <__assert_fail@plt+0x2328>
   13294:	mov	r3, #0
   13298:	b	13330 <__assert_fail@plt+0x23bc>
   1329c:	ldrb	r3, [fp, #4]
   132a0:	cmp	r3, #0
   132a4:	beq	132d0 <__assert_fail@plt+0x235c>
   132a8:	ldrd	r2, [fp, #-20]	; 0xffffffec
   132ac:	strd	r2, [sp, #8]
   132b0:	sub	r3, fp, #124	; 0x7c
   132b4:	str	r3, [sp]
   132b8:	ldrd	r2, [fp, #-140]	; 0xffffff74
   132bc:	ldr	r1, [fp, #-132]	; 0xffffff7c
   132c0:	ldr	r0, [fp, #-128]	; 0xffffff80
   132c4:	bl	12c60 <__assert_fail@plt+0x1cec>
   132c8:	mov	r3, r0
   132cc:	b	13330 <__assert_fail@plt+0x23bc>
   132d0:	ldrd	r2, [fp, #-20]	; 0xffffffec
   132d4:	strd	r2, [sp, #8]
   132d8:	sub	r3, fp, #124	; 0x7c
   132dc:	str	r3, [sp]
   132e0:	ldrd	r2, [fp, #-140]	; 0xffffff74
   132e4:	ldr	r1, [fp, #-132]	; 0xffffff7c
   132e8:	ldr	r0, [fp, #-128]	; 0xffffff80
   132ec:	bl	11f80 <__assert_fail@plt+0x100c>
   132f0:	mov	r3, r0
   132f4:	b	13330 <__assert_fail@plt+0x23bc>
   132f8:	ldrb	r3, [fp, #4]
   132fc:	cmp	r3, #0
   13300:	beq	1331c <__assert_fail@plt+0x23a8>
   13304:	ldrd	r2, [fp, #-140]	; 0xffffff74
   13308:	ldr	r1, [fp, #-132]	; 0xffffff7c
   1330c:	ldr	r0, [fp, #-128]	; 0xffffff80
   13310:	bl	12f04 <__assert_fail@plt+0x1f90>
   13314:	mov	r3, r0
   13318:	b	13330 <__assert_fail@plt+0x23bc>
   1331c:	ldrd	r2, [fp, #-140]	; 0xffffff74
   13320:	ldr	r1, [fp, #-132]	; 0xffffff7c
   13324:	ldr	r0, [fp, #-128]	; 0xffffff80
   13328:	bl	12d74 <__assert_fail@plt+0x1e00>
   1332c:	mov	r3, r0
   13330:	mov	r0, r3
   13334:	sub	sp, fp, #12
   13338:	pop	{r4, r5, fp, pc}
   1333c:	andeq	fp, r2, r6, ror #2
   13340:	andeq	sl, r1, r8, ror #12
   13344:	andeq	fp, r2, r5, ror #2
   13348:	push	{r4, r5, fp, lr}
   1334c:	add	fp, sp, #12
   13350:	sub	sp, sp, #32
   13354:	str	r0, [fp, #-24]	; 0xffffffe8
   13358:	strd	r2, [fp, #-36]	; 0xffffffdc
   1335c:	ldr	r1, [pc, #336]	; 134b4 <__assert_fail@plt+0x2540>
   13360:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13364:	bl	10d04 <strcmp@plt>
   13368:	mov	r3, r0
   1336c:	cmp	r3, #0
   13370:	moveq	r3, #1
   13374:	movne	r3, #0
   13378:	strb	r3, [fp, #-17]	; 0xffffffef
   1337c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13380:	cmp	r3, #0
   13384:	beq	133b8 <__assert_fail@plt+0x2444>
   13388:	ldr	r3, [pc, #296]	; 134b8 <__assert_fail@plt+0x2544>
   1338c:	mov	r2, #1
   13390:	strb	r2, [r3]
   13394:	mov	r3, #0
   13398:	str	r3, [fp, #-16]
   1339c:	ldr	r0, [pc, #280]	; 134bc <__assert_fail@plt+0x2548>
   133a0:	bl	10e78 <gettext@plt>
   133a4:	str	r0, [fp, #-24]	; 0xffffffe8
   133a8:	mov	r1, #0
   133ac:	mov	r0, #0
   133b0:	bl	17c3c <__assert_fail@plt+0x6cc8>
   133b4:	b	13414 <__assert_fail@plt+0x24a0>
   133b8:	mov	r1, #0
   133bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   133c0:	bl	10e18 <open64@plt>
   133c4:	str	r0, [fp, #-16]
   133c8:	ldr	r3, [fp, #-16]
   133cc:	cmp	r3, #0
   133d0:	bge	13414 <__assert_fail@plt+0x24a0>
   133d4:	bl	10eb4 <__errno_location@plt>
   133d8:	mov	r3, r0
   133dc:	ldr	r4, [r3]
   133e0:	ldr	r0, [pc, #216]	; 134c0 <__assert_fail@plt+0x254c>
   133e4:	bl	10e78 <gettext@plt>
   133e8:	mov	r5, r0
   133ec:	ldr	r1, [fp, #-24]	; 0xffffffe8
   133f0:	mov	r0, #4
   133f4:	bl	16418 <__assert_fail@plt+0x54a4>
   133f8:	mov	r3, r0
   133fc:	mov	r2, r5
   13400:	mov	r1, r4
   13404:	mov	r0, #0
   13408:	bl	10e0c <error@plt>
   1340c:	mov	r3, #0
   13410:	b	134a8 <__assert_fail@plt+0x2534>
   13414:	ldrb	r3, [fp, #8]
   13418:	str	r3, [sp, #4]
   1341c:	ldrb	r3, [fp, #4]
   13420:	str	r3, [sp]
   13424:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   13428:	ldr	r1, [fp, #-16]
   1342c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13430:	bl	1318c <__assert_fail@plt+0x2218>
   13434:	mov	r3, r0
   13438:	strb	r3, [fp, #-18]	; 0xffffffee
   1343c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13440:	eor	r3, r3, #1
   13444:	uxtb	r3, r3
   13448:	cmp	r3, #0
   1344c:	beq	134a4 <__assert_fail@plt+0x2530>
   13450:	ldr	r0, [fp, #-16]
   13454:	bl	10f68 <close@plt>
   13458:	mov	r3, r0
   1345c:	cmp	r3, #0
   13460:	beq	134a4 <__assert_fail@plt+0x2530>
   13464:	bl	10eb4 <__errno_location@plt>
   13468:	mov	r3, r0
   1346c:	ldr	r4, [r3]
   13470:	ldr	r0, [pc, #76]	; 134c4 <__assert_fail@plt+0x2550>
   13474:	bl	10e78 <gettext@plt>
   13478:	mov	r5, r0
   1347c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13480:	mov	r0, #4
   13484:	bl	16418 <__assert_fail@plt+0x54a4>
   13488:	mov	r3, r0
   1348c:	mov	r2, r5
   13490:	mov	r1, r4
   13494:	mov	r0, #0
   13498:	bl	10e0c <error@plt>
   1349c:	mov	r3, #0
   134a0:	b	134a8 <__assert_fail@plt+0x2534>
   134a4:	ldrb	r3, [fp, #-18]	; 0xffffffee
   134a8:	mov	r0, r3
   134ac:	sub	sp, fp, #12
   134b0:	pop	{r4, r5, fp, pc}
   134b4:	andeq	sl, r1, r8, ror r6
   134b8:	andeq	fp, r2, r8, ror #2
   134bc:	andeq	sl, r1, ip, ror r6
   134c0:	andeq	sl, r1, ip, lsl #13
   134c4:	andeq	sl, r1, r8, lsr #13
   134c8:	push	{fp, lr}
   134cc:	add	fp, sp, #4
   134d0:	sub	sp, sp, #32
   134d4:	mov	r3, r0
   134d8:	str	r1, [fp, #-12]
   134dc:	strb	r3, [fp, #-5]
   134e0:	ldrb	r3, [fp, #-5]
   134e4:	cmp	r3, #0
   134e8:	beq	134fc <__assert_fail@plt+0x2588>
   134ec:	ldr	r0, [pc, #92]	; 13550 <__assert_fail@plt+0x25dc>
   134f0:	bl	10e78 <gettext@plt>
   134f4:	mov	r2, r0
   134f8:	b	13508 <__assert_fail@plt+0x2594>
   134fc:	ldr	r0, [pc, #80]	; 13554 <__assert_fail@plt+0x25e0>
   13500:	bl	10e78 <gettext@plt>
   13504:	mov	r2, r0
   13508:	mov	r3, #0
   1350c:	str	r3, [sp, #16]
   13510:	str	r2, [sp, #12]
   13514:	ldr	r3, [pc, #60]	; 13558 <__assert_fail@plt+0x25e4>
   13518:	str	r3, [sp, #8]
   1351c:	mvn	r2, #0
   13520:	mvn	r3, #0
   13524:	strd	r2, [sp]
   13528:	mov	r2, #0
   1352c:	mov	r3, #0
   13530:	ldr	r0, [fp, #-12]
   13534:	bl	17df4 <__assert_fail@plt+0x6e80>
   13538:	mov	r2, r0
   1353c:	mov	r3, r1
   13540:	mov	r0, r2
   13544:	mov	r1, r3
   13548:	sub	sp, fp, #4
   1354c:	pop	{fp, pc}
   13550:			; <UNDEFINED> instruction: 0x0001a6bc
   13554:	ldrdeq	sl, [r1], -r4
   13558:	andeq	sl, r1, ip, ror #13
   1355c:	push	{r4, fp, lr}
   13560:	add	fp, sp, #8
   13564:	sub	sp, sp, #108	; 0x6c
   13568:	str	r0, [fp, #-96]	; 0xffffffa0
   1356c:	str	r1, [fp, #-100]	; 0xffffff9c
   13570:	mov	r3, #0
   13574:	str	r3, [fp, #-16]
   13578:	mov	r3, #1
   1357c:	strb	r3, [fp, #-17]	; 0xffffffef
   13580:	mov	r2, #10
   13584:	mov	r3, #0
   13588:	strd	r2, [fp, #-36]	; 0xffffffdc
   1358c:	mov	r3, #1
   13590:	strb	r3, [fp, #-37]	; 0xffffffdb
   13594:	mov	r3, #0
   13598:	strb	r3, [fp, #-38]	; 0xffffffda
   1359c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   135a0:	ldr	r3, [r3]
   135a4:	mov	r0, r3
   135a8:	bl	140e0 <__assert_fail@plt+0x316c>
   135ac:	ldr	r1, [pc, #1600]	; 13bf4 <__assert_fail@plt+0x2c80>
   135b0:	mov	r0, #6
   135b4:	bl	10f14 <setlocale@plt>
   135b8:	ldr	r1, [pc, #1592]	; 13bf8 <__assert_fail@plt+0x2c84>
   135bc:	ldr	r0, [pc, #1592]	; 13bfc <__assert_fail@plt+0x2c88>
   135c0:	bl	10f44 <bindtextdomain@plt>
   135c4:	ldr	r0, [pc, #1584]	; 13bfc <__assert_fail@plt+0x2c88>
   135c8:	bl	10d94 <textdomain@plt>
   135cc:	ldr	r0, [pc, #1580]	; 13c00 <__assert_fail@plt+0x2c8c>
   135d0:	bl	19dc4 <__assert_fail@plt+0x8e50>
   135d4:	ldr	r3, [pc, #1576]	; 13c04 <__assert_fail@plt+0x2c90>
   135d8:	mov	r2, #0
   135dc:	strb	r2, [r3]
   135e0:	ldr	r3, [pc, #1568]	; 13c08 <__assert_fail@plt+0x2c94>
   135e4:	mov	r2, #0
   135e8:	strb	r2, [r3]
   135ec:	ldr	r3, [pc, #1560]	; 13c0c <__assert_fail@plt+0x2c98>
   135f0:	mov	r2, #10
   135f4:	strb	r2, [r3]
   135f8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   135fc:	cmp	r3, #1
   13600:	ble	139fc <__assert_fail@plt+0x2a88>
   13604:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13608:	add	r3, r3, #4
   1360c:	ldr	r3, [r3]
   13610:	ldrb	r3, [r3]
   13614:	cmp	r3, #45	; 0x2d
   13618:	bne	139fc <__assert_fail@plt+0x2a88>
   1361c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13620:	add	r3, r3, #4
   13624:	ldr	r3, [r3]
   13628:	add	r3, r3, #1
   1362c:	ldrb	r3, [r3]
   13630:	sub	r3, r3, #48	; 0x30
   13634:	cmp	r3, #9
   13638:	bhi	139fc <__assert_fail@plt+0x2a88>
   1363c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13640:	ldr	r3, [r3, #4]
   13644:	str	r3, [fp, #-44]	; 0xffffffd4
   13648:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1364c:	add	r3, r3, #1
   13650:	str	r3, [fp, #-44]	; 0xffffffd4
   13654:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13658:	str	r3, [fp, #-52]	; 0xffffffcc
   1365c:	mov	r3, #0
   13660:	strb	r3, [fp, #-45]	; 0xffffffd3
   13664:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13668:	add	r3, r3, #1
   1366c:	str	r3, [fp, #-44]	; 0xffffffd4
   13670:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13674:	ldrb	r3, [r3]
   13678:	sub	r3, r3, #48	; 0x30
   1367c:	cmp	r3, #9
   13680:	bls	13664 <__assert_fail@plt+0x26f0>
   13684:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13688:	str	r3, [fp, #-56]	; 0xffffffc8
   1368c:	b	137a0 <__assert_fail@plt+0x282c>
   13690:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13694:	ldrb	r3, [r3]
   13698:	sub	r3, r3, #98	; 0x62
   1369c:	cmp	r3, #24
   136a0:	ldrls	pc, [pc, r3, lsl #2]
   136a4:	b	1376c <__assert_fail@plt+0x27f8>
   136a8:	andeq	r3, r1, r0, lsr #14
   136ac:	andeq	r3, r1, ip, lsl #14
   136b0:	andeq	r3, r1, ip, ror #14
   136b4:	andeq	r3, r1, ip, ror #14
   136b8:	andeq	r3, r1, ip, ror #14
   136bc:	andeq	r3, r1, ip, ror #14
   136c0:	andeq	r3, r1, ip, ror #14
   136c4:	andeq	r3, r1, ip, ror #14
   136c8:	andeq	r3, r1, ip, ror #14
   136cc:	andeq	r3, r1, r0, lsr #14
   136d0:	andeq	r3, r1, r8, lsr r7
   136d4:	andeq	r3, r1, r0, lsr #14
   136d8:	andeq	r3, r1, ip, ror #14
   136dc:	andeq	r3, r1, ip, ror #14
   136e0:	andeq	r3, r1, ip, ror #14
   136e4:	andeq	r3, r1, r4, asr #14
   136e8:	andeq	r3, r1, ip, ror #14
   136ec:	andeq	r3, r1, ip, ror #14
   136f0:	andeq	r3, r1, ip, ror #14
   136f4:	andeq	r3, r1, ip, ror #14
   136f8:	andeq	r3, r1, r0, asr r7
   136fc:	andeq	r3, r1, ip, ror #14
   13700:	andeq	r3, r1, ip, ror #14
   13704:	andeq	r3, r1, ip, ror #14
   13708:	andeq	r3, r1, ip, asr r7
   1370c:	mov	r3, #0
   13710:	strb	r3, [fp, #-37]	; 0xffffffdb
   13714:	mov	r3, #0
   13718:	strb	r3, [fp, #-45]	; 0xffffffd3
   1371c:	b	13794 <__assert_fail@plt+0x2820>
   13720:	mov	r3, #0
   13724:	strb	r3, [fp, #-37]	; 0xffffffdb
   13728:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1372c:	ldrb	r3, [r3]
   13730:	strb	r3, [fp, #-45]	; 0xffffffd3
   13734:	b	13794 <__assert_fail@plt+0x2820>
   13738:	mov	r3, #1
   1373c:	strb	r3, [fp, #-37]	; 0xffffffdb
   13740:	b	13794 <__assert_fail@plt+0x2820>
   13744:	mov	r3, #2
   13748:	str	r3, [fp, #-16]
   1374c:	b	13794 <__assert_fail@plt+0x2820>
   13750:	mov	r3, #1
   13754:	str	r3, [fp, #-16]
   13758:	b	13794 <__assert_fail@plt+0x2820>
   1375c:	ldr	r3, [pc, #1192]	; 13c0c <__assert_fail@plt+0x2c98>
   13760:	mov	r2, #0
   13764:	strb	r2, [r3]
   13768:	b	13794 <__assert_fail@plt+0x2820>
   1376c:	ldr	r0, [pc, #1180]	; 13c10 <__assert_fail@plt+0x2c9c>
   13770:	bl	10e78 <gettext@plt>
   13774:	mov	r2, r0
   13778:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1377c:	ldrb	r3, [r3]
   13780:	mov	r1, #0
   13784:	mov	r0, #0
   13788:	bl	10e0c <error@plt>
   1378c:	mov	r0, #1
   13790:	bl	11314 <__assert_fail@plt+0x3a0>
   13794:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13798:	add	r3, r3, #1
   1379c:	str	r3, [fp, #-44]	; 0xffffffd4
   137a0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   137a4:	ldrb	r3, [r3]
   137a8:	cmp	r3, #0
   137ac:	bne	13690 <__assert_fail@plt+0x271c>
   137b0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   137b4:	ldrb	r2, [fp, #-45]	; 0xffffffd3
   137b8:	strb	r2, [r3]
   137bc:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   137c0:	cmp	r3, #0
   137c4:	beq	137e0 <__assert_fail@plt+0x286c>
   137c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   137cc:	add	r3, r3, #1
   137d0:	str	r3, [fp, #-56]	; 0xffffffc8
   137d4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   137d8:	mov	r2, #0
   137dc:	strb	r2, [r3]
   137e0:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   137e4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   137e8:	mov	r0, r3
   137ec:	bl	134c8 <__assert_fail@plt+0x2554>
   137f0:	strd	r0, [fp, #-36]	; 0xffffffdc
   137f4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   137f8:	add	r3, r3, #4
   137fc:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13800:	ldr	r2, [r2]
   13804:	str	r2, [r3]
   13808:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1380c:	add	r3, r3, #4
   13810:	str	r3, [fp, #-100]	; 0xffffff9c
   13814:	ldr	r3, [fp, #-96]	; 0xffffffa0
   13818:	sub	r3, r3, #1
   1381c:	str	r3, [fp, #-96]	; 0xffffffa0
   13820:	b	139fc <__assert_fail@plt+0x2a88>
   13824:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13828:	cmp	r3, #110	; 0x6e
   1382c:	beq	138f4 <__assert_fail@plt+0x2980>
   13830:	cmp	r3, #110	; 0x6e
   13834:	bgt	13854 <__assert_fail@plt+0x28e0>
   13838:	cmn	r3, #2
   1383c:	beq	13980 <__assert_fail@plt+0x2a0c>
   13840:	cmp	r3, #99	; 0x63
   13844:	beq	13890 <__assert_fail@plt+0x291c>
   13848:	cmn	r3, #3
   1384c:	beq	13988 <__assert_fail@plt+0x2a14>
   13850:	b	139c8 <__assert_fail@plt+0x2a54>
   13854:	cmp	r3, #118	; 0x76
   13858:	beq	13964 <__assert_fail@plt+0x29f0>
   1385c:	cmp	r3, #118	; 0x76
   13860:	bgt	13870 <__assert_fail@plt+0x28fc>
   13864:	cmp	r3, #113	; 0x71
   13868:	beq	13958 <__assert_fail@plt+0x29e4>
   1386c:	b	139c8 <__assert_fail@plt+0x2a54>
   13870:	cmp	r3, #122	; 0x7a
   13874:	beq	13970 <__assert_fail@plt+0x29fc>
   13878:	cmp	r3, #256	; 0x100
   1387c:	bne	139c8 <__assert_fail@plt+0x2a54>
   13880:	ldr	r3, [pc, #908]	; 13c14 <__assert_fail@plt+0x2ca0>
   13884:	mov	r2, #1
   13888:	strb	r2, [r3]
   1388c:	b	139fc <__assert_fail@plt+0x2a88>
   13890:	mov	r3, #0
   13894:	strb	r3, [fp, #-37]	; 0xffffffdb
   13898:	ldr	r3, [pc, #888]	; 13c18 <__assert_fail@plt+0x2ca4>
   1389c:	ldr	r3, [r3]
   138a0:	ldrb	r3, [r3]
   138a4:	cmp	r3, #45	; 0x2d
   138a8:	moveq	r3, #1
   138ac:	movne	r3, #0
   138b0:	strb	r3, [fp, #-38]	; 0xffffffda
   138b4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   138b8:	cmp	r3, #0
   138bc:	beq	138d4 <__assert_fail@plt+0x2960>
   138c0:	ldr	r3, [pc, #848]	; 13c18 <__assert_fail@plt+0x2ca4>
   138c4:	ldr	r3, [r3]
   138c8:	add	r3, r3, #1
   138cc:	ldr	r2, [pc, #836]	; 13c18 <__assert_fail@plt+0x2ca4>
   138d0:	str	r3, [r2]
   138d4:	ldr	r3, [pc, #828]	; 13c18 <__assert_fail@plt+0x2ca4>
   138d8:	ldr	r2, [r3]
   138dc:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   138e0:	mov	r1, r2
   138e4:	mov	r0, r3
   138e8:	bl	134c8 <__assert_fail@plt+0x2554>
   138ec:	strd	r0, [fp, #-36]	; 0xffffffdc
   138f0:	b	139fc <__assert_fail@plt+0x2a88>
   138f4:	mov	r3, #1
   138f8:	strb	r3, [fp, #-37]	; 0xffffffdb
   138fc:	ldr	r3, [pc, #788]	; 13c18 <__assert_fail@plt+0x2ca4>
   13900:	ldr	r3, [r3]
   13904:	ldrb	r3, [r3]
   13908:	cmp	r3, #45	; 0x2d
   1390c:	moveq	r3, #1
   13910:	movne	r3, #0
   13914:	strb	r3, [fp, #-38]	; 0xffffffda
   13918:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1391c:	cmp	r3, #0
   13920:	beq	13938 <__assert_fail@plt+0x29c4>
   13924:	ldr	r3, [pc, #748]	; 13c18 <__assert_fail@plt+0x2ca4>
   13928:	ldr	r3, [r3]
   1392c:	add	r3, r3, #1
   13930:	ldr	r2, [pc, #736]	; 13c18 <__assert_fail@plt+0x2ca4>
   13934:	str	r3, [r2]
   13938:	ldr	r3, [pc, #728]	; 13c18 <__assert_fail@plt+0x2ca4>
   1393c:	ldr	r2, [r3]
   13940:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   13944:	mov	r1, r2
   13948:	mov	r0, r3
   1394c:	bl	134c8 <__assert_fail@plt+0x2554>
   13950:	strd	r0, [fp, #-36]	; 0xffffffdc
   13954:	b	139fc <__assert_fail@plt+0x2a88>
   13958:	mov	r3, #2
   1395c:	str	r3, [fp, #-16]
   13960:	b	139fc <__assert_fail@plt+0x2a88>
   13964:	mov	r3, #1
   13968:	str	r3, [fp, #-16]
   1396c:	b	139fc <__assert_fail@plt+0x2a88>
   13970:	ldr	r3, [pc, #660]	; 13c0c <__assert_fail@plt+0x2c98>
   13974:	mov	r2, #0
   13978:	strb	r2, [r3]
   1397c:	b	139fc <__assert_fail@plt+0x2a88>
   13980:	mov	r0, #0
   13984:	bl	11314 <__assert_fail@plt+0x3a0>
   13988:	ldr	r3, [pc, #652]	; 13c1c <__assert_fail@plt+0x2ca8>
   1398c:	ldr	r0, [r3]
   13990:	ldr	r3, [pc, #648]	; 13c20 <__assert_fail@plt+0x2cac>
   13994:	ldr	r2, [r3]
   13998:	mov	r3, #0
   1399c:	str	r3, [sp, #8]
   139a0:	ldr	r3, [pc, #636]	; 13c24 <__assert_fail@plt+0x2cb0>
   139a4:	str	r3, [sp, #4]
   139a8:	ldr	r3, [pc, #632]	; 13c28 <__assert_fail@plt+0x2cb4>
   139ac:	str	r3, [sp]
   139b0:	mov	r3, r2
   139b4:	ldr	r2, [pc, #624]	; 13c2c <__assert_fail@plt+0x2cb8>
   139b8:	ldr	r1, [pc, #624]	; 13c30 <__assert_fail@plt+0x2cbc>
   139bc:	bl	16f80 <__assert_fail@plt+0x600c>
   139c0:	mov	r0, #0
   139c4:	bl	10e6c <exit@plt>
   139c8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   139cc:	sub	r3, r3, #48	; 0x30
   139d0:	cmp	r3, #9
   139d4:	bhi	139f4 <__assert_fail@plt+0x2a80>
   139d8:	ldr	r0, [pc, #560]	; 13c10 <__assert_fail@plt+0x2c9c>
   139dc:	bl	10e78 <gettext@plt>
   139e0:	mov	r2, r0
   139e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   139e8:	mov	r1, #0
   139ec:	mov	r0, #0
   139f0:	bl	10e0c <error@plt>
   139f4:	mov	r0, #1
   139f8:	bl	11314 <__assert_fail@plt+0x3a0>
   139fc:	mov	r3, #0
   13a00:	str	r3, [sp]
   13a04:	ldr	r3, [pc, #552]	; 13c34 <__assert_fail@plt+0x2cc0>
   13a08:	ldr	r2, [pc, #552]	; 13c38 <__assert_fail@plt+0x2cc4>
   13a0c:	ldr	r1, [fp, #-100]	; 0xffffff9c
   13a10:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13a14:	bl	10e54 <getopt_long@plt>
   13a18:	str	r0, [fp, #-60]	; 0xffffffc4
   13a1c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13a20:	cmn	r3, #1
   13a24:	bne	13824 <__assert_fail@plt+0x28b0>
   13a28:	ldr	r3, [fp, #-16]
   13a2c:	cmp	r3, #1
   13a30:	beq	13a58 <__assert_fail@plt+0x2ae4>
   13a34:	ldr	r3, [fp, #-16]
   13a38:	cmp	r3, #0
   13a3c:	bne	13a64 <__assert_fail@plt+0x2af0>
   13a40:	ldr	r3, [fp, #-96]	; 0xffffffa0
   13a44:	sub	r2, r3, #1
   13a48:	ldr	r3, [pc, #492]	; 13c3c <__assert_fail@plt+0x2cc8>
   13a4c:	ldr	r3, [r3]
   13a50:	cmp	r2, r3
   13a54:	ble	13a64 <__assert_fail@plt+0x2af0>
   13a58:	ldr	r3, [pc, #424]	; 13c08 <__assert_fail@plt+0x2c94>
   13a5c:	mov	r2, #1
   13a60:	strb	r2, [r3]
   13a64:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   13a68:	eor	r3, r3, #1
   13a6c:	uxtb	r3, r3
   13a70:	cmp	r3, #0
   13a74:	beq	13ad8 <__assert_fail@plt+0x2b64>
   13a78:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13a7c:	cmp	r3, #0
   13a80:	beq	13ad8 <__assert_fail@plt+0x2b64>
   13a84:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   13a88:	cmp	r2, #0
   13a8c:	sbcs	r3, r3, #0
   13a90:	bge	13ad8 <__assert_fail@plt+0x2b64>
   13a94:	ldr	r0, [pc, #420]	; 13c40 <__assert_fail@plt+0x2ccc>
   13a98:	bl	10e78 <gettext@plt>
   13a9c:	mov	r4, r0
   13aa0:	sub	r3, fp, #88	; 0x58
   13aa4:	mov	r2, r3
   13aa8:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   13aac:	bl	1404c <__assert_fail@plt+0x30d8>
   13ab0:	mov	r3, r0
   13ab4:	mov	r0, r3
   13ab8:	bl	16810 <__assert_fail@plt+0x589c>
   13abc:	mov	r3, r0
   13ac0:	str	r3, [sp]
   13ac4:	mov	r3, r4
   13ac8:	ldr	r2, [pc, #372]	; 13c44 <__assert_fail@plt+0x2cd0>
   13acc:	mov	r1, #75	; 0x4b
   13ad0:	mov	r0, #1
   13ad4:	bl	10e0c <error@plt>
   13ad8:	ldr	r3, [pc, #348]	; 13c3c <__assert_fail@plt+0x2cc8>
   13adc:	ldr	r2, [r3]
   13ae0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   13ae4:	cmp	r2, r3
   13ae8:	bge	13b04 <__assert_fail@plt+0x2b90>
   13aec:	ldr	r3, [pc, #328]	; 13c3c <__assert_fail@plt+0x2cc8>
   13af0:	ldr	r3, [r3]
   13af4:	lsl	r3, r3, #2
   13af8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   13afc:	add	r3, r2, r3
   13b00:	b	13b08 <__assert_fail@plt+0x2b94>
   13b04:	ldr	r3, [pc, #316]	; 13c48 <__assert_fail@plt+0x2cd4>
   13b08:	str	r3, [fp, #-64]	; 0xffffffc0
   13b0c:	mov	r1, #0
   13b10:	mov	r0, #1
   13b14:	bl	17c3c <__assert_fail@plt+0x6cc8>
   13b18:	mov	r3, #0
   13b1c:	str	r3, [fp, #-24]	; 0xffffffe8
   13b20:	b	13b80 <__assert_fail@plt+0x2c0c>
   13b24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b28:	lsl	r3, r3, #2
   13b2c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13b30:	add	r3, r2, r3
   13b34:	ldr	r1, [r3]
   13b38:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13b3c:	str	r3, [sp, #4]
   13b40:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   13b44:	str	r3, [sp]
   13b48:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   13b4c:	mov	r0, r1
   13b50:	bl	13348 <__assert_fail@plt+0x23d4>
   13b54:	mov	r3, r0
   13b58:	mov	r2, r3
   13b5c:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13b60:	and	r3, r3, r2
   13b64:	cmp	r3, #0
   13b68:	movne	r3, #1
   13b6c:	moveq	r3, #0
   13b70:	strb	r3, [fp, #-17]	; 0xffffffef
   13b74:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b78:	add	r3, r3, #1
   13b7c:	str	r3, [fp, #-24]	; 0xffffffe8
   13b80:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13b84:	lsl	r3, r3, #2
   13b88:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13b8c:	add	r3, r2, r3
   13b90:	ldr	r3, [r3]
   13b94:	cmp	r3, #0
   13b98:	bne	13b24 <__assert_fail@plt+0x2bb0>
   13b9c:	ldr	r3, [pc, #96]	; 13c04 <__assert_fail@plt+0x2c90>
   13ba0:	ldrb	r3, [r3]
   13ba4:	cmp	r3, #0
   13ba8:	beq	13bdc <__assert_fail@plt+0x2c68>
   13bac:	mov	r0, #0
   13bb0:	bl	10f68 <close@plt>
   13bb4:	mov	r3, r0
   13bb8:	cmp	r3, #0
   13bbc:	bge	13bdc <__assert_fail@plt+0x2c68>
   13bc0:	bl	10eb4 <__errno_location@plt>
   13bc4:	mov	r3, r0
   13bc8:	ldr	r3, [r3]
   13bcc:	ldr	r2, [pc, #120]	; 13c4c <__assert_fail@plt+0x2cd8>
   13bd0:	mov	r1, r3
   13bd4:	mov	r0, #1
   13bd8:	bl	10e0c <error@plt>
   13bdc:	ldrb	r3, [fp, #-17]	; 0xffffffef
   13be0:	eor	r3, r3, #1
   13be4:	uxtb	r3, r3
   13be8:	mov	r0, r3
   13bec:	sub	sp, fp, #8
   13bf0:	pop	{r4, fp, pc}
   13bf4:	andeq	r9, r1, r4, ror pc
   13bf8:	strdeq	sl, [r1], -ip
   13bfc:	andeq	r9, r1, ip, lsl #31
   13c00:			; <UNDEFINED> instruction: 0x00013cb4
   13c04:	andeq	fp, r2, r8, ror #2
   13c08:	andeq	fp, r2, r6, ror #2
   13c0c:	andeq	fp, r2, r7, ror #2
   13c10:	andeq	sl, r1, r4, lsl r7
   13c14:	andeq	fp, r2, r5, ror #2
   13c18:	andeq	fp, r2, r0, ror #2
   13c1c:	andeq	fp, r2, ip, asr r1
   13c20:	strdeq	fp, [r2], -ip
   13c24:	andeq	sl, r1, r4, lsr r7
   13c28:	andeq	sl, r1, r4, asr #14
   13c2c:			; <UNDEFINED> instruction: 0x00019ebc
   13c30:	andeq	sl, r1, r8, lsl #11
   13c34:	andeq	sl, r1, r4, lsl #1
   13c38:	andeq	sl, r1, r4, asr r7
   13c3c:	andeq	fp, r2, r0, asr r1
   13c40:	ldrdeq	sl, [r1], -r4
   13c44:	andeq	sl, r1, r8, ror #14
   13c48:	andeq	sl, r1, r0, ror r7
   13c4c:	andeq	sl, r1, r8, ror r6
   13c50:	push	{fp}		; (str fp, [sp, #-4]!)
   13c54:	add	fp, sp, #0
   13c58:	sub	sp, sp, #12
   13c5c:	str	r0, [fp, #-8]
   13c60:	ldr	r2, [pc, #20]	; 13c7c <__assert_fail@plt+0x2d08>
   13c64:	ldr	r3, [fp, #-8]
   13c68:	str	r3, [r2]
   13c6c:	nop			; (mov r0, r0)
   13c70:	add	sp, fp, #0
   13c74:	pop	{fp}		; (ldr fp, [sp], #4)
   13c78:	bx	lr
   13c7c:	andeq	fp, r2, ip, ror #2
   13c80:	push	{fp}		; (str fp, [sp, #-4]!)
   13c84:	add	fp, sp, #0
   13c88:	sub	sp, sp, #12
   13c8c:	mov	r3, r0
   13c90:	strb	r3, [fp, #-5]
   13c94:	ldr	r2, [pc, #20]	; 13cb0 <__assert_fail@plt+0x2d3c>
   13c98:	ldrb	r3, [fp, #-5]
   13c9c:	strb	r3, [r2]
   13ca0:	nop			; (mov r0, r0)
   13ca4:	add	sp, fp, #0
   13ca8:	pop	{fp}		; (ldr fp, [sp], #4)
   13cac:	bx	lr
   13cb0:	andeq	fp, r2, r0, ror r1
   13cb4:	push	{r4, fp, lr}
   13cb8:	add	fp, sp, #8
   13cbc:	sub	sp, sp, #20
   13cc0:	ldr	r3, [pc, #256]	; 13dc8 <__assert_fail@plt+0x2e54>
   13cc4:	ldr	r3, [r3]
   13cc8:	mov	r0, r3
   13ccc:	bl	18984 <__assert_fail@plt+0x7a10>
   13cd0:	mov	r3, r0
   13cd4:	cmp	r3, #0
   13cd8:	beq	13d90 <__assert_fail@plt+0x2e1c>
   13cdc:	ldr	r3, [pc, #232]	; 13dcc <__assert_fail@plt+0x2e58>
   13ce0:	ldrb	r3, [r3]
   13ce4:	eor	r3, r3, #1
   13ce8:	uxtb	r3, r3
   13cec:	cmp	r3, #0
   13cf0:	bne	13d08 <__assert_fail@plt+0x2d94>
   13cf4:	bl	10eb4 <__errno_location@plt>
   13cf8:	mov	r3, r0
   13cfc:	ldr	r3, [r3]
   13d00:	cmp	r3, #32
   13d04:	beq	13d90 <__assert_fail@plt+0x2e1c>
   13d08:	ldr	r0, [pc, #192]	; 13dd0 <__assert_fail@plt+0x2e5c>
   13d0c:	bl	10e78 <gettext@plt>
   13d10:	str	r0, [fp, #-16]
   13d14:	ldr	r3, [pc, #184]	; 13dd4 <__assert_fail@plt+0x2e60>
   13d18:	ldr	r3, [r3]
   13d1c:	cmp	r3, #0
   13d20:	beq	13d64 <__assert_fail@plt+0x2df0>
   13d24:	bl	10eb4 <__errno_location@plt>
   13d28:	mov	r3, r0
   13d2c:	ldr	r4, [r3]
   13d30:	ldr	r3, [pc, #156]	; 13dd4 <__assert_fail@plt+0x2e60>
   13d34:	ldr	r3, [r3]
   13d38:	mov	r0, r3
   13d3c:	bl	16540 <__assert_fail@plt+0x55cc>
   13d40:	mov	r2, r0
   13d44:	ldr	r3, [fp, #-16]
   13d48:	str	r3, [sp]
   13d4c:	mov	r3, r2
   13d50:	ldr	r2, [pc, #128]	; 13dd8 <__assert_fail@plt+0x2e64>
   13d54:	mov	r1, r4
   13d58:	mov	r0, #0
   13d5c:	bl	10e0c <error@plt>
   13d60:	b	13d80 <__assert_fail@plt+0x2e0c>
   13d64:	bl	10eb4 <__errno_location@plt>
   13d68:	mov	r3, r0
   13d6c:	ldr	r1, [r3]
   13d70:	ldr	r3, [fp, #-16]
   13d74:	ldr	r2, [pc, #96]	; 13ddc <__assert_fail@plt+0x2e68>
   13d78:	mov	r0, #0
   13d7c:	bl	10e0c <error@plt>
   13d80:	ldr	r3, [pc, #88]	; 13de0 <__assert_fail@plt+0x2e6c>
   13d84:	ldr	r3, [r3]
   13d88:	mov	r0, r3
   13d8c:	bl	10d40 <_exit@plt>
   13d90:	ldr	r3, [pc, #76]	; 13de4 <__assert_fail@plt+0x2e70>
   13d94:	ldr	r3, [r3]
   13d98:	mov	r0, r3
   13d9c:	bl	18984 <__assert_fail@plt+0x7a10>
   13da0:	mov	r3, r0
   13da4:	cmp	r3, #0
   13da8:	beq	13dbc <__assert_fail@plt+0x2e48>
   13dac:	ldr	r3, [pc, #44]	; 13de0 <__assert_fail@plt+0x2e6c>
   13db0:	ldr	r3, [r3]
   13db4:	mov	r0, r3
   13db8:	bl	10d40 <_exit@plt>
   13dbc:	nop			; (mov r0, r0)
   13dc0:	sub	sp, fp, #8
   13dc4:	pop	{r4, fp, pc}
   13dc8:	andeq	fp, r2, ip, asr r1
   13dcc:	andeq	fp, r2, r0, ror r1
   13dd0:	andeq	sl, r1, r8, lsl #15
   13dd4:	andeq	fp, r2, ip, ror #2
   13dd8:	muleq	r1, r4, r7
   13ddc:	muleq	r1, ip, r7
   13de0:	andeq	fp, r2, r0, lsl #2
   13de4:	andeq	fp, r2, r8, asr r1
   13de8:	push	{r4, fp, lr}
   13dec:	add	fp, sp, #8
   13df0:	sub	sp, sp, #20
   13df4:	str	r0, [fp, #-24]	; 0xffffffe8
   13df8:	bl	10eb4 <__errno_location@plt>
   13dfc:	mov	r3, r0
   13e00:	ldr	r3, [r3]
   13e04:	str	r3, [fp, #-20]	; 0xffffffec
   13e08:	bl	10eb4 <__errno_location@plt>
   13e0c:	mov	r3, r0
   13e10:	ldr	r3, [r3]
   13e14:	str	r3, [fp, #-16]
   13e18:	bl	10eb4 <__errno_location@plt>
   13e1c:	mov	r2, r0
   13e20:	mov	r3, #0
   13e24:	str	r3, [r2]
   13e28:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13e2c:	bl	10d34 <free@plt>
   13e30:	bl	10eb4 <__errno_location@plt>
   13e34:	mov	r4, r0
   13e38:	bl	10eb4 <__errno_location@plt>
   13e3c:	mov	r3, r0
   13e40:	ldr	r3, [r3]
   13e44:	cmp	r3, #0
   13e48:	moveq	r3, #1
   13e4c:	movne	r3, #0
   13e50:	uxtb	r3, r3
   13e54:	lsl	r3, r3, #2
   13e58:	sub	r2, fp, #12
   13e5c:	add	r3, r2, r3
   13e60:	ldr	r3, [r3, #-8]
   13e64:	str	r3, [r4]
   13e68:	nop			; (mov r0, r0)
   13e6c:	sub	sp, fp, #8
   13e70:	pop	{r4, fp, pc}
   13e74:	push	{fp, lr}
   13e78:	add	fp, sp, #4
   13e7c:	sub	sp, sp, #32
   13e80:	str	r0, [fp, #-24]	; 0xffffffe8
   13e84:	str	r1, [fp, #-28]	; 0xffffffe4
   13e88:	str	r2, [fp, #-32]	; 0xffffffe0
   13e8c:	mov	r3, #0
   13e90:	str	r3, [fp, #-8]
   13e94:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13e98:	str	r3, [fp, #-12]
   13e9c:	b	13f10 <__assert_fail@plt+0x2f9c>
   13ea0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13ea4:	ldr	r1, [fp, #-12]
   13ea8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13eac:	bl	1683c <__assert_fail@plt+0x58c8>
   13eb0:	str	r0, [fp, #-16]
   13eb4:	ldr	r3, [fp, #-16]
   13eb8:	cmn	r3, #1
   13ebc:	beq	13f20 <__assert_fail@plt+0x2fac>
   13ec0:	ldr	r3, [fp, #-16]
   13ec4:	cmp	r3, #0
   13ec8:	bne	13ee0 <__assert_fail@plt+0x2f6c>
   13ecc:	bl	10eb4 <__errno_location@plt>
   13ed0:	mov	r2, r0
   13ed4:	mov	r3, #0
   13ed8:	str	r3, [r2]
   13edc:	b	13f24 <__assert_fail@plt+0x2fb0>
   13ee0:	ldr	r2, [fp, #-8]
   13ee4:	ldr	r3, [fp, #-16]
   13ee8:	add	r3, r2, r3
   13eec:	str	r3, [fp, #-8]
   13ef0:	ldr	r2, [fp, #-12]
   13ef4:	ldr	r3, [fp, #-16]
   13ef8:	add	r3, r2, r3
   13efc:	str	r3, [fp, #-12]
   13f00:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13f04:	ldr	r3, [fp, #-16]
   13f08:	sub	r3, r2, r3
   13f0c:	str	r3, [fp, #-32]	; 0xffffffe0
   13f10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13f14:	cmp	r3, #0
   13f18:	bne	13ea0 <__assert_fail@plt+0x2f2c>
   13f1c:	b	13f24 <__assert_fail@plt+0x2fb0>
   13f20:	nop			; (mov r0, r0)
   13f24:	ldr	r3, [fp, #-8]
   13f28:	mov	r0, r3
   13f2c:	sub	sp, fp, #4
   13f30:	pop	{fp, pc}
   13f34:	push	{fp, lr}
   13f38:	add	fp, sp, #4
   13f3c:	sub	sp, sp, #24
   13f40:	strd	r0, [fp, #-20]	; 0xffffffec
   13f44:	str	r2, [fp, #-24]	; 0xffffffe8
   13f48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f4c:	add	r3, r3, #20
   13f50:	str	r3, [fp, #-8]
   13f54:	ldr	r3, [fp, #-8]
   13f58:	mov	r2, #0
   13f5c:	strb	r2, [r3]
   13f60:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13f64:	cmp	r2, #0
   13f68:	sbcs	r3, r3, #0
   13f6c:	bge	13fe4 <__assert_fail@plt+0x3070>
   13f70:	ldr	r3, [fp, #-8]
   13f74:	sub	r3, r3, #1
   13f78:	str	r3, [fp, #-8]
   13f7c:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13f80:	mov	r2, #10
   13f84:	mov	r3, #0
   13f88:	bl	19b18 <__assert_fail@plt+0x8ba4>
   13f8c:	uxtb	r3, r2
   13f90:	rsb	r3, r3, #48	; 0x30
   13f94:	uxtb	r2, r3
   13f98:	ldr	r3, [fp, #-8]
   13f9c:	strb	r2, [r3]
   13fa0:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13fa4:	mov	r2, #10
   13fa8:	mov	r3, #0
   13fac:	bl	19b18 <__assert_fail@plt+0x8ba4>
   13fb0:	mov	r2, r0
   13fb4:	mov	r3, r1
   13fb8:	strd	r2, [fp, #-20]	; 0xffffffec
   13fbc:	ldrd	r2, [fp, #-20]	; 0xffffffec
   13fc0:	orrs	r3, r2, r3
   13fc4:	bne	13f70 <__assert_fail@plt+0x2ffc>
   13fc8:	ldr	r3, [fp, #-8]
   13fcc:	sub	r3, r3, #1
   13fd0:	str	r3, [fp, #-8]
   13fd4:	ldr	r3, [fp, #-8]
   13fd8:	mov	r2, #45	; 0x2d
   13fdc:	strb	r2, [r3]
   13fe0:	b	1403c <__assert_fail@plt+0x30c8>
   13fe4:	ldr	r3, [fp, #-8]
   13fe8:	sub	r3, r3, #1
   13fec:	str	r3, [fp, #-8]
   13ff0:	ldrd	r0, [fp, #-20]	; 0xffffffec
   13ff4:	mov	r2, #10
   13ff8:	mov	r3, #0
   13ffc:	bl	19b18 <__assert_fail@plt+0x8ba4>
   14000:	uxtb	r3, r2
   14004:	add	r3, r3, #48	; 0x30
   14008:	uxtb	r2, r3
   1400c:	ldr	r3, [fp, #-8]
   14010:	strb	r2, [r3]
   14014:	ldrd	r0, [fp, #-20]	; 0xffffffec
   14018:	mov	r2, #10
   1401c:	mov	r3, #0
   14020:	bl	19b18 <__assert_fail@plt+0x8ba4>
   14024:	mov	r2, r0
   14028:	mov	r3, r1
   1402c:	strd	r2, [fp, #-20]	; 0xffffffec
   14030:	ldrd	r2, [fp, #-20]	; 0xffffffec
   14034:	orrs	r3, r2, r3
   14038:	bne	13fe4 <__assert_fail@plt+0x3070>
   1403c:	ldr	r3, [fp, #-8]
   14040:	mov	r0, r3
   14044:	sub	sp, fp, #4
   14048:	pop	{fp, pc}
   1404c:	push	{fp, lr}
   14050:	add	fp, sp, #4
   14054:	sub	sp, sp, #24
   14058:	strd	r0, [fp, #-20]	; 0xffffffec
   1405c:	str	r2, [fp, #-24]	; 0xffffffe8
   14060:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14064:	add	r3, r3, #20
   14068:	str	r3, [fp, #-8]
   1406c:	ldr	r3, [fp, #-8]
   14070:	mov	r2, #0
   14074:	strb	r2, [r3]
   14078:	ldr	r3, [fp, #-8]
   1407c:	sub	r3, r3, #1
   14080:	str	r3, [fp, #-8]
   14084:	ldrd	r0, [fp, #-20]	; 0xffffffec
   14088:	mov	r2, #10
   1408c:	mov	r3, #0
   14090:	bl	19bec <__assert_fail@plt+0x8c78>
   14094:	uxtb	r3, r2
   14098:	add	r3, r3, #48	; 0x30
   1409c:	uxtb	r2, r3
   140a0:	ldr	r3, [fp, #-8]
   140a4:	strb	r2, [r3]
   140a8:	ldrd	r0, [fp, #-20]	; 0xffffffec
   140ac:	mov	r2, #10
   140b0:	mov	r3, #0
   140b4:	bl	19bec <__assert_fail@plt+0x8c78>
   140b8:	mov	r2, r0
   140bc:	mov	r3, r1
   140c0:	strd	r2, [fp, #-20]	; 0xffffffec
   140c4:	ldrd	r2, [fp, #-20]	; 0xffffffec
   140c8:	orrs	r3, r2, r3
   140cc:	bne	14078 <__assert_fail@plt+0x3104>
   140d0:	ldr	r3, [fp, #-8]
   140d4:	mov	r0, r3
   140d8:	sub	sp, fp, #4
   140dc:	pop	{fp, pc}
   140e0:	push	{fp, lr}
   140e4:	add	fp, sp, #4
   140e8:	sub	sp, sp, #16
   140ec:	str	r0, [fp, #-16]
   140f0:	ldr	r3, [fp, #-16]
   140f4:	cmp	r3, #0
   140f8:	bne	14118 <__assert_fail@plt+0x31a4>
   140fc:	ldr	r3, [pc, #220]	; 141e0 <__assert_fail@plt+0x326c>
   14100:	ldr	r3, [r3]
   14104:	mov	r2, #55	; 0x37
   14108:	mov	r1, #1
   1410c:	ldr	r0, [pc, #208]	; 141e4 <__assert_fail@plt+0x3270>
   14110:	bl	10dc4 <fwrite@plt>
   14114:	bl	10f5c <abort@plt>
   14118:	mov	r1, #47	; 0x2f
   1411c:	ldr	r0, [fp, #-16]
   14120:	bl	10f20 <strrchr@plt>
   14124:	str	r0, [fp, #-8]
   14128:	ldr	r3, [fp, #-8]
   1412c:	cmp	r3, #0
   14130:	beq	14140 <__assert_fail@plt+0x31cc>
   14134:	ldr	r3, [fp, #-8]
   14138:	add	r3, r3, #1
   1413c:	b	14144 <__assert_fail@plt+0x31d0>
   14140:	ldr	r3, [fp, #-16]
   14144:	str	r3, [fp, #-12]
   14148:	ldr	r2, [fp, #-12]
   1414c:	ldr	r3, [fp, #-16]
   14150:	sub	r3, r2, r3
   14154:	cmp	r3, #6
   14158:	ble	141bc <__assert_fail@plt+0x3248>
   1415c:	ldr	r3, [fp, #-12]
   14160:	sub	r3, r3, #7
   14164:	mov	r2, #7
   14168:	ldr	r1, [pc, #120]	; 141e8 <__assert_fail@plt+0x3274>
   1416c:	mov	r0, r3
   14170:	bl	10f50 <strncmp@plt>
   14174:	mov	r3, r0
   14178:	cmp	r3, #0
   1417c:	bne	141bc <__assert_fail@plt+0x3248>
   14180:	ldr	r3, [fp, #-12]
   14184:	str	r3, [fp, #-16]
   14188:	mov	r2, #3
   1418c:	ldr	r1, [pc, #88]	; 141ec <__assert_fail@plt+0x3278>
   14190:	ldr	r0, [fp, #-12]
   14194:	bl	10f50 <strncmp@plt>
   14198:	mov	r3, r0
   1419c:	cmp	r3, #0
   141a0:	bne	141bc <__assert_fail@plt+0x3248>
   141a4:	ldr	r3, [fp, #-12]
   141a8:	add	r3, r3, #3
   141ac:	str	r3, [fp, #-16]
   141b0:	ldr	r2, [pc, #56]	; 141f0 <__assert_fail@plt+0x327c>
   141b4:	ldr	r3, [fp, #-16]
   141b8:	str	r3, [r2]
   141bc:	ldr	r2, [pc, #48]	; 141f4 <__assert_fail@plt+0x3280>
   141c0:	ldr	r3, [fp, #-16]
   141c4:	str	r3, [r2]
   141c8:	ldr	r2, [pc, #40]	; 141f8 <__assert_fail@plt+0x3284>
   141cc:	ldr	r3, [fp, #-16]
   141d0:	str	r3, [r2]
   141d4:	nop			; (mov r0, r0)
   141d8:	sub	sp, fp, #4
   141dc:	pop	{fp, pc}
   141e0:	andeq	fp, r2, r8, asr r1
   141e4:	andeq	sl, r1, r0, lsr #15
   141e8:	ldrdeq	sl, [r1], -r8
   141ec:	andeq	sl, r1, r0, ror #15
   141f0:	andeq	fp, r2, r8, asr #2
   141f4:	andeq	fp, r2, r4, ror r1
   141f8:	andeq	fp, r2, ip, asr #2
   141fc:	push	{fp, lr}
   14200:	add	fp, sp, #4
   14204:	sub	sp, sp, #16
   14208:	str	r0, [fp, #-16]
   1420c:	bl	10eb4 <__errno_location@plt>
   14210:	mov	r3, r0
   14214:	ldr	r3, [r3]
   14218:	str	r3, [fp, #-8]
   1421c:	ldr	r3, [fp, #-16]
   14220:	cmp	r3, #0
   14224:	beq	14230 <__assert_fail@plt+0x32bc>
   14228:	ldr	r3, [fp, #-16]
   1422c:	b	14234 <__assert_fail@plt+0x32c0>
   14230:	ldr	r3, [pc, #48]	; 14268 <__assert_fail@plt+0x32f4>
   14234:	mov	r1, #48	; 0x30
   14238:	mov	r0, r3
   1423c:	bl	17ac4 <__assert_fail@plt+0x6b50>
   14240:	mov	r3, r0
   14244:	str	r3, [fp, #-12]
   14248:	bl	10eb4 <__errno_location@plt>
   1424c:	mov	r2, r0
   14250:	ldr	r3, [fp, #-8]
   14254:	str	r3, [r2]
   14258:	ldr	r3, [fp, #-12]
   1425c:	mov	r0, r3
   14260:	sub	sp, fp, #4
   14264:	pop	{fp, pc}
   14268:	andeq	fp, r2, r8, ror r1
   1426c:	push	{fp}		; (str fp, [sp, #-4]!)
   14270:	add	fp, sp, #0
   14274:	sub	sp, sp, #12
   14278:	str	r0, [fp, #-8]
   1427c:	ldr	r3, [fp, #-8]
   14280:	cmp	r3, #0
   14284:	beq	14290 <__assert_fail@plt+0x331c>
   14288:	ldr	r3, [fp, #-8]
   1428c:	b	14294 <__assert_fail@plt+0x3320>
   14290:	ldr	r3, [pc, #16]	; 142a8 <__assert_fail@plt+0x3334>
   14294:	ldr	r3, [r3]
   14298:	mov	r0, r3
   1429c:	add	sp, fp, #0
   142a0:	pop	{fp}		; (ldr fp, [sp], #4)
   142a4:	bx	lr
   142a8:	andeq	fp, r2, r8, ror r1
   142ac:	push	{fp}		; (str fp, [sp, #-4]!)
   142b0:	add	fp, sp, #0
   142b4:	sub	sp, sp, #12
   142b8:	str	r0, [fp, #-8]
   142bc:	str	r1, [fp, #-12]
   142c0:	ldr	r3, [fp, #-8]
   142c4:	cmp	r3, #0
   142c8:	beq	142d4 <__assert_fail@plt+0x3360>
   142cc:	ldr	r3, [fp, #-8]
   142d0:	b	142d8 <__assert_fail@plt+0x3364>
   142d4:	ldr	r3, [pc, #20]	; 142f0 <__assert_fail@plt+0x337c>
   142d8:	ldr	r2, [fp, #-12]
   142dc:	str	r2, [r3]
   142e0:	nop			; (mov r0, r0)
   142e4:	add	sp, fp, #0
   142e8:	pop	{fp}		; (ldr fp, [sp], #4)
   142ec:	bx	lr
   142f0:	andeq	fp, r2, r8, ror r1
   142f4:	push	{fp}		; (str fp, [sp, #-4]!)
   142f8:	add	fp, sp, #0
   142fc:	sub	sp, sp, #36	; 0x24
   14300:	str	r0, [fp, #-24]	; 0xffffffe8
   14304:	mov	r3, r1
   14308:	str	r2, [fp, #-32]	; 0xffffffe0
   1430c:	strb	r3, [fp, #-25]	; 0xffffffe7
   14310:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   14314:	strb	r3, [fp, #-5]
   14318:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1431c:	cmp	r3, #0
   14320:	beq	1432c <__assert_fail@plt+0x33b8>
   14324:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14328:	b	14330 <__assert_fail@plt+0x33bc>
   1432c:	ldr	r3, [pc, #124]	; 143b0 <__assert_fail@plt+0x343c>
   14330:	add	r2, r3, #8
   14334:	ldrb	r3, [fp, #-5]
   14338:	lsr	r3, r3, #5
   1433c:	uxtb	r3, r3
   14340:	lsl	r3, r3, #2
   14344:	add	r3, r2, r3
   14348:	str	r3, [fp, #-12]
   1434c:	ldrb	r3, [fp, #-5]
   14350:	and	r3, r3, #31
   14354:	str	r3, [fp, #-16]
   14358:	ldr	r3, [fp, #-12]
   1435c:	ldr	r2, [r3]
   14360:	ldr	r3, [fp, #-16]
   14364:	lsr	r3, r2, r3
   14368:	and	r3, r3, #1
   1436c:	str	r3, [fp, #-20]	; 0xffffffec
   14370:	ldr	r3, [fp, #-12]
   14374:	ldr	r3, [r3]
   14378:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1437c:	and	r1, r2, #1
   14380:	ldr	r2, [fp, #-20]	; 0xffffffec
   14384:	eor	r1, r1, r2
   14388:	ldr	r2, [fp, #-16]
   1438c:	lsl	r2, r1, r2
   14390:	eor	r2, r2, r3
   14394:	ldr	r3, [fp, #-12]
   14398:	str	r2, [r3]
   1439c:	ldr	r3, [fp, #-20]	; 0xffffffec
   143a0:	mov	r0, r3
   143a4:	add	sp, fp, #0
   143a8:	pop	{fp}		; (ldr fp, [sp], #4)
   143ac:	bx	lr
   143b0:	andeq	fp, r2, r8, ror r1
   143b4:	push	{fp}		; (str fp, [sp, #-4]!)
   143b8:	add	fp, sp, #0
   143bc:	sub	sp, sp, #20
   143c0:	str	r0, [fp, #-16]
   143c4:	str	r1, [fp, #-20]	; 0xffffffec
   143c8:	ldr	r3, [fp, #-16]
   143cc:	cmp	r3, #0
   143d0:	bne	143dc <__assert_fail@plt+0x3468>
   143d4:	ldr	r3, [pc, #44]	; 14408 <__assert_fail@plt+0x3494>
   143d8:	str	r3, [fp, #-16]
   143dc:	ldr	r3, [fp, #-16]
   143e0:	ldr	r3, [r3, #4]
   143e4:	str	r3, [fp, #-8]
   143e8:	ldr	r3, [fp, #-16]
   143ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   143f0:	str	r2, [r3, #4]
   143f4:	ldr	r3, [fp, #-8]
   143f8:	mov	r0, r3
   143fc:	add	sp, fp, #0
   14400:	pop	{fp}		; (ldr fp, [sp], #4)
   14404:	bx	lr
   14408:	andeq	fp, r2, r8, ror r1
   1440c:	push	{fp, lr}
   14410:	add	fp, sp, #4
   14414:	sub	sp, sp, #16
   14418:	str	r0, [fp, #-8]
   1441c:	str	r1, [fp, #-12]
   14420:	str	r2, [fp, #-16]
   14424:	ldr	r3, [fp, #-8]
   14428:	cmp	r3, #0
   1442c:	bne	14438 <__assert_fail@plt+0x34c4>
   14430:	ldr	r3, [pc, #76]	; 14484 <__assert_fail@plt+0x3510>
   14434:	str	r3, [fp, #-8]
   14438:	ldr	r3, [fp, #-8]
   1443c:	mov	r2, #10
   14440:	str	r2, [r3]
   14444:	ldr	r3, [fp, #-12]
   14448:	cmp	r3, #0
   1444c:	beq	1445c <__assert_fail@plt+0x34e8>
   14450:	ldr	r3, [fp, #-16]
   14454:	cmp	r3, #0
   14458:	bne	14460 <__assert_fail@plt+0x34ec>
   1445c:	bl	10f5c <abort@plt>
   14460:	ldr	r3, [fp, #-8]
   14464:	ldr	r2, [fp, #-12]
   14468:	str	r2, [r3, #40]	; 0x28
   1446c:	ldr	r3, [fp, #-8]
   14470:	ldr	r2, [fp, #-16]
   14474:	str	r2, [r3, #44]	; 0x2c
   14478:	nop			; (mov r0, r0)
   1447c:	sub	sp, fp, #4
   14480:	pop	{fp, pc}
   14484:	andeq	fp, r2, r8, ror r1
   14488:	push	{fp, lr}
   1448c:	add	fp, sp, #4
   14490:	sub	sp, sp, #56	; 0x38
   14494:	str	r0, [fp, #-56]	; 0xffffffc8
   14498:	str	r1, [fp, #-60]	; 0xffffffc4
   1449c:	sub	r3, fp, #52	; 0x34
   144a0:	mov	r2, #48	; 0x30
   144a4:	mov	r1, #0
   144a8:	mov	r0, r3
   144ac:	bl	10ecc <memset@plt>
   144b0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   144b4:	cmp	r3, #10
   144b8:	bne	144c0 <__assert_fail@plt+0x354c>
   144bc:	bl	10f5c <abort@plt>
   144c0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   144c4:	str	r3, [fp, #-52]	; 0xffffffcc
   144c8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   144cc:	mov	lr, r3
   144d0:	sub	ip, fp, #52	; 0x34
   144d4:	ldm	ip!, {r0, r1, r2, r3}
   144d8:	stmia	lr!, {r0, r1, r2, r3}
   144dc:	ldm	ip!, {r0, r1, r2, r3}
   144e0:	stmia	lr!, {r0, r1, r2, r3}
   144e4:	ldm	ip, {r0, r1, r2, r3}
   144e8:	stm	lr, {r0, r1, r2, r3}
   144ec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   144f0:	sub	sp, fp, #4
   144f4:	pop	{fp, pc}
   144f8:	push	{fp, lr}
   144fc:	add	fp, sp, #4
   14500:	sub	sp, sp, #16
   14504:	str	r0, [fp, #-16]
   14508:	str	r1, [fp, #-20]	; 0xffffffec
   1450c:	ldr	r0, [fp, #-16]
   14510:	bl	10e78 <gettext@plt>
   14514:	str	r0, [fp, #-8]
   14518:	ldr	r2, [fp, #-8]
   1451c:	ldr	r3, [fp, #-16]
   14520:	cmp	r2, r3
   14524:	beq	14530 <__assert_fail@plt+0x35bc>
   14528:	ldr	r3, [fp, #-8]
   1452c:	b	145c0 <__assert_fail@plt+0x364c>
   14530:	bl	18e1c <__assert_fail@plt+0x7ea8>
   14534:	str	r0, [fp, #-12]
   14538:	ldr	r1, [pc, #140]	; 145cc <__assert_fail@plt+0x3658>
   1453c:	ldr	r0, [fp, #-12]
   14540:	bl	188ec <__assert_fail@plt+0x7978>
   14544:	mov	r3, r0
   14548:	cmp	r3, #0
   1454c:	bne	14570 <__assert_fail@plt+0x35fc>
   14550:	ldr	r3, [fp, #-16]
   14554:	ldrb	r3, [r3]
   14558:	cmp	r3, #96	; 0x60
   1455c:	bne	14568 <__assert_fail@plt+0x35f4>
   14560:	ldr	r3, [pc, #104]	; 145d0 <__assert_fail@plt+0x365c>
   14564:	b	145c0 <__assert_fail@plt+0x364c>
   14568:	ldr	r3, [pc, #100]	; 145d4 <__assert_fail@plt+0x3660>
   1456c:	b	145c0 <__assert_fail@plt+0x364c>
   14570:	ldr	r1, [pc, #96]	; 145d8 <__assert_fail@plt+0x3664>
   14574:	ldr	r0, [fp, #-12]
   14578:	bl	188ec <__assert_fail@plt+0x7978>
   1457c:	mov	r3, r0
   14580:	cmp	r3, #0
   14584:	bne	145a8 <__assert_fail@plt+0x3634>
   14588:	ldr	r3, [fp, #-16]
   1458c:	ldrb	r3, [r3]
   14590:	cmp	r3, #96	; 0x60
   14594:	bne	145a0 <__assert_fail@plt+0x362c>
   14598:	ldr	r3, [pc, #60]	; 145dc <__assert_fail@plt+0x3668>
   1459c:	b	145c0 <__assert_fail@plt+0x364c>
   145a0:	ldr	r3, [pc, #56]	; 145e0 <__assert_fail@plt+0x366c>
   145a4:	b	145c0 <__assert_fail@plt+0x364c>
   145a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   145ac:	cmp	r3, #9
   145b0:	bne	145bc <__assert_fail@plt+0x3648>
   145b4:	ldr	r3, [pc, #40]	; 145e4 <__assert_fail@plt+0x3670>
   145b8:	b	145c0 <__assert_fail@plt+0x364c>
   145bc:	ldr	r3, [pc, #36]	; 145e8 <__assert_fail@plt+0x3674>
   145c0:	mov	r0, r3
   145c4:	sub	sp, fp, #4
   145c8:	pop	{fp, pc}
   145cc:	andeq	sl, r1, r0, lsr #17
   145d0:	andeq	sl, r1, r8, lsr #17
   145d4:	andeq	sl, r1, ip, lsr #17
   145d8:			; <UNDEFINED> instruction: 0x0001a8b0
   145dc:			; <UNDEFINED> instruction: 0x0001a8b8
   145e0:			; <UNDEFINED> instruction: 0x0001a8bc
   145e4:	andeq	sl, r1, r0, asr #17
   145e8:	andeq	sl, r1, r4, asr #17
   145ec:	push	{r4, fp, lr}
   145f0:	add	fp, sp, #8
   145f4:	sub	sp, sp, #116	; 0x74
   145f8:	str	r0, [fp, #-88]	; 0xffffffa8
   145fc:	str	r1, [fp, #-92]	; 0xffffffa4
   14600:	str	r2, [fp, #-96]	; 0xffffffa0
   14604:	str	r3, [fp, #-100]	; 0xffffff9c
   14608:	mov	r3, #0
   1460c:	str	r3, [fp, #-20]	; 0xffffffec
   14610:	mov	r3, #0
   14614:	str	r3, [fp, #-24]	; 0xffffffe8
   14618:	mov	r3, #0
   1461c:	str	r3, [fp, #-28]	; 0xffffffe4
   14620:	mov	r3, #0
   14624:	str	r3, [fp, #-32]	; 0xffffffe0
   14628:	mov	r3, #0
   1462c:	strb	r3, [fp, #-33]	; 0xffffffdf
   14630:	bl	10ddc <__ctype_get_mb_cur_max@plt>
   14634:	mov	r3, r0
   14638:	cmp	r3, #1
   1463c:	moveq	r3, #1
   14640:	movne	r3, #0
   14644:	strb	r3, [fp, #-57]	; 0xffffffc7
   14648:	ldr	r3, [fp, #8]
   1464c:	and	r3, r3, #2
   14650:	cmp	r3, #0
   14654:	movne	r3, #1
   14658:	moveq	r3, #0
   1465c:	strb	r3, [fp, #-34]	; 0xffffffde
   14660:	mov	r3, #0
   14664:	strb	r3, [fp, #-35]	; 0xffffffdd
   14668:	mov	r3, #0
   1466c:	strb	r3, [fp, #-36]	; 0xffffffdc
   14670:	mov	r3, #1
   14674:	strb	r3, [fp, #-37]	; 0xffffffdb
   14678:	ldr	r3, [fp, #4]
   1467c:	cmp	r3, #10
   14680:	ldrls	pc, [pc, r3, lsl #2]
   14684:	b	1488c <__assert_fail@plt+0x3918>
   14688:	andeq	r4, r1, r0, lsl #17
   1468c:	strdeq	r4, [r1], -ip
   14690:	andeq	r4, r1, r0, lsr #16
   14694:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14698:	andeq	r4, r1, r4, lsl #16
   1469c:	andeq	r4, r1, r4, asr #13
   146a0:			; <UNDEFINED> instruction: 0x000146b4
   146a4:	andeq	r4, r1, r4, lsr #14
   146a8:	andeq	r4, r1, r8, lsr r7
   146ac:	andeq	r4, r1, r8, lsr r7
   146b0:	andeq	r4, r1, r8, lsr r7
   146b4:	mov	r3, #5
   146b8:	str	r3, [fp, #4]
   146bc:	mov	r3, #1
   146c0:	strb	r3, [fp, #-34]	; 0xffffffde
   146c4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   146c8:	eor	r3, r3, #1
   146cc:	uxtb	r3, r3
   146d0:	cmp	r3, #0
   146d4:	beq	14708 <__assert_fail@plt+0x3794>
   146d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   146dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   146e0:	cmp	r2, r3
   146e4:	bcs	146fc <__assert_fail@plt+0x3788>
   146e8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   146ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   146f0:	add	r3, r2, r3
   146f4:	mov	r2, #34	; 0x22
   146f8:	strb	r2, [r3]
   146fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14700:	add	r3, r3, #1
   14704:	str	r3, [fp, #-20]	; 0xffffffec
   14708:	mov	r3, #1
   1470c:	strb	r3, [fp, #-33]	; 0xffffffdf
   14710:	ldr	r3, [pc, #3872]	; 15638 <__assert_fail@plt+0x46c4>
   14714:	str	r3, [fp, #-28]	; 0xffffffe4
   14718:	mov	r3, #1
   1471c:	str	r3, [fp, #-32]	; 0xffffffe0
   14720:	b	14890 <__assert_fail@plt+0x391c>
   14724:	mov	r3, #1
   14728:	strb	r3, [fp, #-33]	; 0xffffffdf
   1472c:	mov	r3, #0
   14730:	strb	r3, [fp, #-34]	; 0xffffffde
   14734:	b	14890 <__assert_fail@plt+0x391c>
   14738:	ldr	r3, [fp, #4]
   1473c:	cmp	r3, #10
   14740:	beq	14764 <__assert_fail@plt+0x37f0>
   14744:	ldr	r1, [fp, #4]
   14748:	ldr	r0, [pc, #3820]	; 1563c <__assert_fail@plt+0x46c8>
   1474c:	bl	144f8 <__assert_fail@plt+0x3584>
   14750:	str	r0, [fp, #16]
   14754:	ldr	r1, [fp, #4]
   14758:	ldr	r0, [pc, #3808]	; 15640 <__assert_fail@plt+0x46cc>
   1475c:	bl	144f8 <__assert_fail@plt+0x3584>
   14760:	str	r0, [fp, #20]
   14764:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14768:	eor	r3, r3, #1
   1476c:	uxtb	r3, r3
   14770:	cmp	r3, #0
   14774:	beq	147d4 <__assert_fail@plt+0x3860>
   14778:	ldr	r3, [fp, #16]
   1477c:	str	r3, [fp, #-28]	; 0xffffffe4
   14780:	b	147c4 <__assert_fail@plt+0x3850>
   14784:	ldr	r2, [fp, #-20]	; 0xffffffec
   14788:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1478c:	cmp	r2, r3
   14790:	bcs	147ac <__assert_fail@plt+0x3838>
   14794:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14798:	ldr	r3, [fp, #-20]	; 0xffffffec
   1479c:	add	r3, r2, r3
   147a0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   147a4:	ldrb	r2, [r2]
   147a8:	strb	r2, [r3]
   147ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   147b0:	add	r3, r3, #1
   147b4:	str	r3, [fp, #-20]	; 0xffffffec
   147b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   147bc:	add	r3, r3, #1
   147c0:	str	r3, [fp, #-28]	; 0xffffffe4
   147c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   147c8:	ldrb	r3, [r3]
   147cc:	cmp	r3, #0
   147d0:	bne	14784 <__assert_fail@plt+0x3810>
   147d4:	mov	r3, #1
   147d8:	strb	r3, [fp, #-33]	; 0xffffffdf
   147dc:	ldr	r3, [fp, #20]
   147e0:	str	r3, [fp, #-28]	; 0xffffffe4
   147e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   147e8:	bl	10e84 <strlen@plt>
   147ec:	str	r0, [fp, #-32]	; 0xffffffe0
   147f0:	b	14890 <__assert_fail@plt+0x391c>
   147f4:	mov	r3, #1
   147f8:	strb	r3, [fp, #-33]	; 0xffffffdf
   147fc:	mov	r3, #1
   14800:	strb	r3, [fp, #-34]	; 0xffffffde
   14804:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14808:	eor	r3, r3, #1
   1480c:	uxtb	r3, r3
   14810:	cmp	r3, #0
   14814:	beq	14820 <__assert_fail@plt+0x38ac>
   14818:	mov	r3, #1
   1481c:	strb	r3, [fp, #-33]	; 0xffffffdf
   14820:	mov	r3, #2
   14824:	str	r3, [fp, #4]
   14828:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1482c:	eor	r3, r3, #1
   14830:	uxtb	r3, r3
   14834:	cmp	r3, #0
   14838:	beq	1486c <__assert_fail@plt+0x38f8>
   1483c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14840:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14844:	cmp	r2, r3
   14848:	bcs	14860 <__assert_fail@plt+0x38ec>
   1484c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14850:	ldr	r3, [fp, #-20]	; 0xffffffec
   14854:	add	r3, r2, r3
   14858:	mov	r2, #39	; 0x27
   1485c:	strb	r2, [r3]
   14860:	ldr	r3, [fp, #-20]	; 0xffffffec
   14864:	add	r3, r3, #1
   14868:	str	r3, [fp, #-20]	; 0xffffffec
   1486c:	ldr	r3, [pc, #3532]	; 15640 <__assert_fail@plt+0x46cc>
   14870:	str	r3, [fp, #-28]	; 0xffffffe4
   14874:	mov	r3, #1
   14878:	str	r3, [fp, #-32]	; 0xffffffe0
   1487c:	b	14890 <__assert_fail@plt+0x391c>
   14880:	mov	r3, #0
   14884:	strb	r3, [fp, #-34]	; 0xffffffde
   14888:	b	14890 <__assert_fail@plt+0x391c>
   1488c:	bl	10f5c <abort@plt>
   14890:	mov	r3, #0
   14894:	str	r3, [fp, #-16]
   14898:	b	15a28 <__assert_fail@plt+0x4ab4>
   1489c:	mov	r3, #0
   148a0:	strb	r3, [fp, #-40]	; 0xffffffd8
   148a4:	mov	r3, #0
   148a8:	strb	r3, [fp, #-41]	; 0xffffffd7
   148ac:	mov	r3, #0
   148b0:	strb	r3, [fp, #-42]	; 0xffffffd6
   148b4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   148b8:	cmp	r3, #0
   148bc:	beq	14958 <__assert_fail@plt+0x39e4>
   148c0:	ldr	r3, [fp, #4]
   148c4:	cmp	r3, #2
   148c8:	beq	14958 <__assert_fail@plt+0x39e4>
   148cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   148d0:	cmp	r3, #0
   148d4:	beq	14958 <__assert_fail@plt+0x39e4>
   148d8:	ldr	r2, [fp, #-16]
   148dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   148e0:	add	r4, r2, r3
   148e4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   148e8:	cmn	r3, #1
   148ec:	bne	14910 <__assert_fail@plt+0x399c>
   148f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   148f4:	cmp	r3, #1
   148f8:	bls	14910 <__assert_fail@plt+0x399c>
   148fc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14900:	bl	10e84 <strlen@plt>
   14904:	str	r0, [fp, #-100]	; 0xffffff9c
   14908:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1490c:	b	14914 <__assert_fail@plt+0x39a0>
   14910:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14914:	cmp	r4, r3
   14918:	bhi	14958 <__assert_fail@plt+0x39e4>
   1491c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14920:	ldr	r3, [fp, #-16]
   14924:	add	r3, r2, r3
   14928:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1492c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14930:	mov	r0, r3
   14934:	bl	10d70 <memcmp@plt>
   14938:	mov	r3, r0
   1493c:	cmp	r3, #0
   14940:	bne	14958 <__assert_fail@plt+0x39e4>
   14944:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14948:	cmp	r3, #0
   1494c:	bne	15be4 <__assert_fail@plt+0x4c70>
   14950:	mov	r3, #1
   14954:	strb	r3, [fp, #-40]	; 0xffffffd8
   14958:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1495c:	ldr	r3, [fp, #-16]
   14960:	add	r3, r2, r3
   14964:	ldrb	r3, [r3]
   14968:	strb	r3, [fp, #-38]	; 0xffffffda
   1496c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14970:	cmp	r3, #126	; 0x7e
   14974:	ldrls	pc, [pc, r3, lsl #2]
   14978:	b	151a4 <__assert_fail@plt+0x4230>
   1497c:	andeq	r4, r1, r8, ror fp
   14980:	andeq	r5, r1, r4, lsr #3
   14984:	andeq	r5, r1, r4, lsr #3
   14988:	andeq	r5, r1, r4, lsr #3
   1498c:	andeq	r5, r1, r4, lsr #3
   14990:	andeq	r5, r1, r4, lsr #3
   14994:	andeq	r5, r1, r4, lsr #3
   14998:	andeq	r4, r1, r8, ror #30
   1499c:	andeq	r4, r1, r4, ror pc
   149a0:	andeq	r4, r1, r4, lsr #31
   149a4:	andeq	r4, r1, ip, lsl #31
   149a8:			; <UNDEFINED> instruction: 0x00014fb0
   149ac:	andeq	r4, r1, r0, lsl #31
   149b0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   149b4:	andeq	r5, r1, r4, lsr #3
   149b8:	andeq	r5, r1, r4, lsr #3
   149bc:	andeq	r5, r1, r4, lsr #3
   149c0:	andeq	r5, r1, r4, lsr #3
   149c4:	andeq	r5, r1, r4, lsr #3
   149c8:	andeq	r5, r1, r4, lsr #3
   149cc:	andeq	r5, r1, r4, lsr #3
   149d0:	andeq	r5, r1, r4, lsr #3
   149d4:	andeq	r5, r1, r4, lsr #3
   149d8:	andeq	r5, r1, r4, lsr #3
   149dc:	andeq	r5, r1, r4, lsr #3
   149e0:	andeq	r5, r1, r4, lsr #3
   149e4:	andeq	r5, r1, r4, lsr #3
   149e8:	andeq	r5, r1, r4, lsr #3
   149ec:	andeq	r5, r1, r4, lsr #3
   149f0:	andeq	r5, r1, r4, lsr #3
   149f4:	andeq	r5, r1, r4, lsr #3
   149f8:	andeq	r5, r1, r4, lsr #3
   149fc:	andeq	r5, r1, r8, lsl #1
   14a00:	muleq	r1, r0, r0
   14a04:	muleq	r1, r0, r0
   14a08:	andeq	r5, r1, ip, ror r0
   14a0c:	muleq	r1, r0, r0
   14a10:	muleq	r1, r8, r1
   14a14:	muleq	r1, r0, r0
   14a18:	andeq	r5, r1, ip, lsr #1
   14a1c:	muleq	r1, r0, r0
   14a20:	muleq	r1, r0, r0
   14a24:	muleq	r1, r0, r0
   14a28:	muleq	r1, r8, r1
   14a2c:	muleq	r1, r8, r1
   14a30:	muleq	r1, r8, r1
   14a34:	muleq	r1, r8, r1
   14a38:	muleq	r1, r8, r1
   14a3c:	muleq	r1, r8, r1
   14a40:	muleq	r1, r8, r1
   14a44:	muleq	r1, r8, r1
   14a48:	muleq	r1, r8, r1
   14a4c:	muleq	r1, r8, r1
   14a50:	muleq	r1, r8, r1
   14a54:	muleq	r1, r8, r1
   14a58:	muleq	r1, r8, r1
   14a5c:	muleq	r1, r8, r1
   14a60:	muleq	r1, r8, r1
   14a64:	muleq	r1, r8, r1
   14a68:	muleq	r1, r0, r0
   14a6c:	muleq	r1, r0, r0
   14a70:	muleq	r1, r0, r0
   14a74:	muleq	r1, r0, r0
   14a78:	andeq	r4, r1, r8, asr sp
   14a7c:	andeq	r5, r1, r4, lsr #3
   14a80:	muleq	r1, r8, r1
   14a84:	muleq	r1, r8, r1
   14a88:	muleq	r1, r8, r1
   14a8c:	muleq	r1, r8, r1
   14a90:	muleq	r1, r8, r1
   14a94:	muleq	r1, r8, r1
   14a98:	muleq	r1, r8, r1
   14a9c:	muleq	r1, r8, r1
   14aa0:	muleq	r1, r8, r1
   14aa4:	muleq	r1, r8, r1
   14aa8:	muleq	r1, r8, r1
   14aac:	muleq	r1, r8, r1
   14ab0:	muleq	r1, r8, r1
   14ab4:	muleq	r1, r8, r1
   14ab8:	muleq	r1, r8, r1
   14abc:	muleq	r1, r8, r1
   14ac0:	muleq	r1, r8, r1
   14ac4:	muleq	r1, r8, r1
   14ac8:	muleq	r1, r8, r1
   14acc:	muleq	r1, r8, r1
   14ad0:	muleq	r1, r8, r1
   14ad4:	muleq	r1, r8, r1
   14ad8:	muleq	r1, r8, r1
   14adc:	muleq	r1, r8, r1
   14ae0:	muleq	r1, r8, r1
   14ae4:	muleq	r1, r8, r1
   14ae8:	muleq	r1, r0, r0
   14aec:			; <UNDEFINED> instruction: 0x00014fbc
   14af0:	muleq	r1, r8, r1
   14af4:	muleq	r1, r0, r0
   14af8:	muleq	r1, r8, r1
   14afc:	muleq	r1, r0, r0
   14b00:	muleq	r1, r8, r1
   14b04:	muleq	r1, r8, r1
   14b08:	muleq	r1, r8, r1
   14b0c:	muleq	r1, r8, r1
   14b10:	muleq	r1, r8, r1
   14b14:	muleq	r1, r8, r1
   14b18:	muleq	r1, r8, r1
   14b1c:	muleq	r1, r8, r1
   14b20:	muleq	r1, r8, r1
   14b24:	muleq	r1, r8, r1
   14b28:	muleq	r1, r8, r1
   14b2c:	muleq	r1, r8, r1
   14b30:	muleq	r1, r8, r1
   14b34:	muleq	r1, r8, r1
   14b38:	muleq	r1, r8, r1
   14b3c:	muleq	r1, r8, r1
   14b40:	muleq	r1, r8, r1
   14b44:	muleq	r1, r8, r1
   14b48:	muleq	r1, r8, r1
   14b4c:	muleq	r1, r8, r1
   14b50:	muleq	r1, r8, r1
   14b54:	muleq	r1, r8, r1
   14b58:	muleq	r1, r8, r1
   14b5c:	muleq	r1, r8, r1
   14b60:	muleq	r1, r8, r1
   14b64:	muleq	r1, r8, r1
   14b68:	andeq	r5, r1, r4, lsr r0
   14b6c:	muleq	r1, r0, r0
   14b70:	andeq	r5, r1, r4, lsr r0
   14b74:	andeq	r5, r1, ip, ror r0
   14b78:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14b7c:	cmp	r3, #0
   14b80:	beq	14d44 <__assert_fail@plt+0x3dd0>
   14b84:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14b88:	cmp	r3, #0
   14b8c:	bne	15bec <__assert_fail@plt+0x4c78>
   14b90:	mov	r3, #1
   14b94:	strb	r3, [fp, #-41]	; 0xffffffd7
   14b98:	ldr	r3, [fp, #4]
   14b9c:	cmp	r3, #2
   14ba0:	bne	14c50 <__assert_fail@plt+0x3cdc>
   14ba4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   14ba8:	eor	r3, r3, #1
   14bac:	uxtb	r3, r3
   14bb0:	cmp	r3, #0
   14bb4:	beq	14c50 <__assert_fail@plt+0x3cdc>
   14bb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   14bbc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14bc0:	cmp	r2, r3
   14bc4:	bcs	14bdc <__assert_fail@plt+0x3c68>
   14bc8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14bcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14bd0:	add	r3, r2, r3
   14bd4:	mov	r2, #39	; 0x27
   14bd8:	strb	r2, [r3]
   14bdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14be0:	add	r3, r3, #1
   14be4:	str	r3, [fp, #-20]	; 0xffffffec
   14be8:	ldr	r2, [fp, #-20]	; 0xffffffec
   14bec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14bf0:	cmp	r2, r3
   14bf4:	bcs	14c0c <__assert_fail@plt+0x3c98>
   14bf8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14bfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c00:	add	r3, r2, r3
   14c04:	mov	r2, #36	; 0x24
   14c08:	strb	r2, [r3]
   14c0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c10:	add	r3, r3, #1
   14c14:	str	r3, [fp, #-20]	; 0xffffffec
   14c18:	ldr	r2, [fp, #-20]	; 0xffffffec
   14c1c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14c20:	cmp	r2, r3
   14c24:	bcs	14c3c <__assert_fail@plt+0x3cc8>
   14c28:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14c2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c30:	add	r3, r2, r3
   14c34:	mov	r2, #39	; 0x27
   14c38:	strb	r2, [r3]
   14c3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c40:	add	r3, r3, #1
   14c44:	str	r3, [fp, #-20]	; 0xffffffec
   14c48:	mov	r3, #1
   14c4c:	strb	r3, [fp, #-35]	; 0xffffffdd
   14c50:	ldr	r2, [fp, #-20]	; 0xffffffec
   14c54:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14c58:	cmp	r2, r3
   14c5c:	bcs	14c74 <__assert_fail@plt+0x3d00>
   14c60:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14c64:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c68:	add	r3, r2, r3
   14c6c:	mov	r2, #92	; 0x5c
   14c70:	strb	r2, [r3]
   14c74:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c78:	add	r3, r3, #1
   14c7c:	str	r3, [fp, #-20]	; 0xffffffec
   14c80:	ldr	r3, [fp, #4]
   14c84:	cmp	r3, #2
   14c88:	beq	14d38 <__assert_fail@plt+0x3dc4>
   14c8c:	ldr	r3, [fp, #-16]
   14c90:	add	r2, r3, #1
   14c94:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14c98:	cmp	r2, r3
   14c9c:	bcs	14d38 <__assert_fail@plt+0x3dc4>
   14ca0:	ldr	r3, [fp, #-16]
   14ca4:	add	r3, r3, #1
   14ca8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14cac:	add	r3, r2, r3
   14cb0:	ldrb	r3, [r3]
   14cb4:	cmp	r3, #47	; 0x2f
   14cb8:	bls	14d38 <__assert_fail@plt+0x3dc4>
   14cbc:	ldr	r3, [fp, #-16]
   14cc0:	add	r3, r3, #1
   14cc4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14cc8:	add	r3, r2, r3
   14ccc:	ldrb	r3, [r3]
   14cd0:	cmp	r3, #57	; 0x39
   14cd4:	bhi	14d38 <__assert_fail@plt+0x3dc4>
   14cd8:	ldr	r2, [fp, #-20]	; 0xffffffec
   14cdc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ce0:	cmp	r2, r3
   14ce4:	bcs	14cfc <__assert_fail@plt+0x3d88>
   14ce8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14cec:	ldr	r3, [fp, #-20]	; 0xffffffec
   14cf0:	add	r3, r2, r3
   14cf4:	mov	r2, #48	; 0x30
   14cf8:	strb	r2, [r3]
   14cfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d00:	add	r3, r3, #1
   14d04:	str	r3, [fp, #-20]	; 0xffffffec
   14d08:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d0c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14d10:	cmp	r2, r3
   14d14:	bcs	14d2c <__assert_fail@plt+0x3db8>
   14d18:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14d1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d20:	add	r3, r2, r3
   14d24:	mov	r2, #48	; 0x30
   14d28:	strb	r2, [r3]
   14d2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d30:	add	r3, r3, #1
   14d34:	str	r3, [fp, #-20]	; 0xffffffec
   14d38:	mov	r3, #48	; 0x30
   14d3c:	strb	r3, [fp, #-38]	; 0xffffffda
   14d40:	b	15780 <__assert_fail@plt+0x480c>
   14d44:	ldr	r3, [fp, #8]
   14d48:	and	r3, r3, #1
   14d4c:	cmp	r3, #0
   14d50:	beq	15780 <__assert_fail@plt+0x480c>
   14d54:	b	15a1c <__assert_fail@plt+0x4aa8>
   14d58:	ldr	r3, [fp, #4]
   14d5c:	cmp	r3, #2
   14d60:	beq	14d70 <__assert_fail@plt+0x3dfc>
   14d64:	cmp	r3, #5
   14d68:	beq	14d80 <__assert_fail@plt+0x3e0c>
   14d6c:	b	14f64 <__assert_fail@plt+0x3ff0>
   14d70:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14d74:	cmp	r3, #0
   14d78:	beq	14f58 <__assert_fail@plt+0x3fe4>
   14d7c:	b	15c28 <__assert_fail@plt+0x4cb4>
   14d80:	ldr	r3, [fp, #8]
   14d84:	and	r3, r3, #4
   14d88:	cmp	r3, #0
   14d8c:	beq	14f60 <__assert_fail@plt+0x3fec>
   14d90:	ldr	r3, [fp, #-16]
   14d94:	add	r2, r3, #2
   14d98:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14d9c:	cmp	r2, r3
   14da0:	bcs	14f60 <__assert_fail@plt+0x3fec>
   14da4:	ldr	r3, [fp, #-16]
   14da8:	add	r3, r3, #1
   14dac:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14db0:	add	r3, r2, r3
   14db4:	ldrb	r3, [r3]
   14db8:	cmp	r3, #63	; 0x3f
   14dbc:	bne	14f60 <__assert_fail@plt+0x3fec>
   14dc0:	ldr	r3, [fp, #-16]
   14dc4:	add	r3, r3, #2
   14dc8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14dcc:	add	r3, r2, r3
   14dd0:	ldrb	r3, [r3]
   14dd4:	sub	r3, r3, #33	; 0x21
   14dd8:	cmp	r3, #29
   14ddc:	ldrls	pc, [pc, r3, lsl #2]
   14de0:	b	14f50 <__assert_fail@plt+0x3fdc>
   14de4:	andeq	r4, r1, ip, asr lr
   14de8:	andeq	r4, r1, r0, asr pc
   14dec:	andeq	r4, r1, r0, asr pc
   14df0:	andeq	r4, r1, r0, asr pc
   14df4:	andeq	r4, r1, r0, asr pc
   14df8:	andeq	r4, r1, r0, asr pc
   14dfc:	andeq	r4, r1, ip, asr lr
   14e00:	andeq	r4, r1, ip, asr lr
   14e04:	andeq	r4, r1, ip, asr lr
   14e08:	andeq	r4, r1, r0, asr pc
   14e0c:	andeq	r4, r1, r0, asr pc
   14e10:	andeq	r4, r1, r0, asr pc
   14e14:	andeq	r4, r1, ip, asr lr
   14e18:	andeq	r4, r1, r0, asr pc
   14e1c:	andeq	r4, r1, ip, asr lr
   14e20:	andeq	r4, r1, r0, asr pc
   14e24:	andeq	r4, r1, r0, asr pc
   14e28:	andeq	r4, r1, r0, asr pc
   14e2c:	andeq	r4, r1, r0, asr pc
   14e30:	andeq	r4, r1, r0, asr pc
   14e34:	andeq	r4, r1, r0, asr pc
   14e38:	andeq	r4, r1, r0, asr pc
   14e3c:	andeq	r4, r1, r0, asr pc
   14e40:	andeq	r4, r1, r0, asr pc
   14e44:	andeq	r4, r1, r0, asr pc
   14e48:	andeq	r4, r1, r0, asr pc
   14e4c:	andeq	r4, r1, r0, asr pc
   14e50:	andeq	r4, r1, ip, asr lr
   14e54:	andeq	r4, r1, ip, asr lr
   14e58:	andeq	r4, r1, ip, asr lr
   14e5c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14e60:	cmp	r3, #0
   14e64:	bne	15bf4 <__assert_fail@plt+0x4c80>
   14e68:	ldr	r3, [fp, #-16]
   14e6c:	add	r3, r3, #2
   14e70:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14e74:	add	r3, r2, r3
   14e78:	ldrb	r3, [r3]
   14e7c:	strb	r3, [fp, #-38]	; 0xffffffda
   14e80:	ldr	r3, [fp, #-16]
   14e84:	add	r3, r3, #2
   14e88:	str	r3, [fp, #-16]
   14e8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14e90:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14e94:	cmp	r2, r3
   14e98:	bcs	14eb0 <__assert_fail@plt+0x3f3c>
   14e9c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14ea0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ea4:	add	r3, r2, r3
   14ea8:	mov	r2, #63	; 0x3f
   14eac:	strb	r2, [r3]
   14eb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14eb4:	add	r3, r3, #1
   14eb8:	str	r3, [fp, #-20]	; 0xffffffec
   14ebc:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ec0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ec4:	cmp	r2, r3
   14ec8:	bcs	14ee0 <__assert_fail@plt+0x3f6c>
   14ecc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14ed0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ed4:	add	r3, r2, r3
   14ed8:	mov	r2, #34	; 0x22
   14edc:	strb	r2, [r3]
   14ee0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14ee4:	add	r3, r3, #1
   14ee8:	str	r3, [fp, #-20]	; 0xffffffec
   14eec:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ef0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14ef4:	cmp	r2, r3
   14ef8:	bcs	14f10 <__assert_fail@plt+0x3f9c>
   14efc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14f00:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f04:	add	r3, r2, r3
   14f08:	mov	r2, #34	; 0x22
   14f0c:	strb	r2, [r3]
   14f10:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f14:	add	r3, r3, #1
   14f18:	str	r3, [fp, #-20]	; 0xffffffec
   14f1c:	ldr	r2, [fp, #-20]	; 0xffffffec
   14f20:	ldr	r3, [fp, #-92]	; 0xffffffa4
   14f24:	cmp	r2, r3
   14f28:	bcs	14f40 <__assert_fail@plt+0x3fcc>
   14f2c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14f30:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f34:	add	r3, r2, r3
   14f38:	mov	r2, #63	; 0x3f
   14f3c:	strb	r2, [r3]
   14f40:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f44:	add	r3, r3, #1
   14f48:	str	r3, [fp, #-20]	; 0xffffffec
   14f4c:	b	14f54 <__assert_fail@plt+0x3fe0>
   14f50:	nop			; (mov r0, r0)
   14f54:	b	14f60 <__assert_fail@plt+0x3fec>
   14f58:	nop			; (mov r0, r0)
   14f5c:	b	157ac <__assert_fail@plt+0x4838>
   14f60:	nop			; (mov r0, r0)
   14f64:	b	157ac <__assert_fail@plt+0x4838>
   14f68:	mov	r3, #97	; 0x61
   14f6c:	strb	r3, [fp, #-39]	; 0xffffffd9
   14f70:	b	1501c <__assert_fail@plt+0x40a8>
   14f74:	mov	r3, #98	; 0x62
   14f78:	strb	r3, [fp, #-39]	; 0xffffffd9
   14f7c:	b	1501c <__assert_fail@plt+0x40a8>
   14f80:	mov	r3, #102	; 0x66
   14f84:	strb	r3, [fp, #-39]	; 0xffffffd9
   14f88:	b	1501c <__assert_fail@plt+0x40a8>
   14f8c:	mov	r3, #110	; 0x6e
   14f90:	strb	r3, [fp, #-39]	; 0xffffffd9
   14f94:	b	15004 <__assert_fail@plt+0x4090>
   14f98:	mov	r3, #114	; 0x72
   14f9c:	strb	r3, [fp, #-39]	; 0xffffffd9
   14fa0:	b	15004 <__assert_fail@plt+0x4090>
   14fa4:	mov	r3, #116	; 0x74
   14fa8:	strb	r3, [fp, #-39]	; 0xffffffd9
   14fac:	b	15004 <__assert_fail@plt+0x4090>
   14fb0:	mov	r3, #118	; 0x76
   14fb4:	strb	r3, [fp, #-39]	; 0xffffffd9
   14fb8:	b	1501c <__assert_fail@plt+0x40a8>
   14fbc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   14fc0:	strb	r3, [fp, #-39]	; 0xffffffd9
   14fc4:	ldr	r3, [fp, #4]
   14fc8:	cmp	r3, #2
   14fcc:	bne	14fe0 <__assert_fail@plt+0x406c>
   14fd0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14fd4:	cmp	r3, #0
   14fd8:	beq	15934 <__assert_fail@plt+0x49c0>
   14fdc:	b	15c28 <__assert_fail@plt+0x4cb4>
   14fe0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14fe4:	cmp	r3, #0
   14fe8:	beq	15004 <__assert_fail@plt+0x4090>
   14fec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14ff0:	cmp	r3, #0
   14ff4:	beq	15004 <__assert_fail@plt+0x4090>
   14ff8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14ffc:	cmp	r3, #0
   15000:	bne	1593c <__assert_fail@plt+0x49c8>
   15004:	ldr	r3, [fp, #4]
   15008:	cmp	r3, #2
   1500c:	bne	1501c <__assert_fail@plt+0x40a8>
   15010:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15014:	cmp	r3, #0
   15018:	bne	15bfc <__assert_fail@plt+0x4c88>
   1501c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15020:	cmp	r3, #0
   15024:	beq	15788 <__assert_fail@plt+0x4814>
   15028:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   1502c:	strb	r3, [fp, #-38]	; 0xffffffda
   15030:	b	15834 <__assert_fail@plt+0x48c0>
   15034:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15038:	cmn	r3, #1
   1503c:	bne	15060 <__assert_fail@plt+0x40ec>
   15040:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15044:	add	r3, r3, #1
   15048:	ldrb	r3, [r3]
   1504c:	cmp	r3, #0
   15050:	movne	r3, #1
   15054:	moveq	r3, #0
   15058:	uxtb	r3, r3
   1505c:	b	15074 <__assert_fail@plt+0x4100>
   15060:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15064:	cmp	r3, #1
   15068:	movne	r3, #1
   1506c:	moveq	r3, #0
   15070:	uxtb	r3, r3
   15074:	cmp	r3, #0
   15078:	bne	15790 <__assert_fail@plt+0x481c>
   1507c:	ldr	r3, [fp, #-16]
   15080:	cmp	r3, #0
   15084:	bne	15798 <__assert_fail@plt+0x4824>
   15088:	mov	r3, #1
   1508c:	strb	r3, [fp, #-42]	; 0xffffffd6
   15090:	ldr	r3, [fp, #4]
   15094:	cmp	r3, #2
   15098:	bne	157a0 <__assert_fail@plt+0x482c>
   1509c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   150a0:	cmp	r3, #0
   150a4:	beq	157a0 <__assert_fail@plt+0x482c>
   150a8:	b	15c28 <__assert_fail@plt+0x4cb4>
   150ac:	mov	r3, #1
   150b0:	strb	r3, [fp, #-36]	; 0xffffffdc
   150b4:	mov	r3, #1
   150b8:	strb	r3, [fp, #-42]	; 0xffffffd6
   150bc:	ldr	r3, [fp, #4]
   150c0:	cmp	r3, #2
   150c4:	bne	157a8 <__assert_fail@plt+0x4834>
   150c8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   150cc:	cmp	r3, #0
   150d0:	bne	15c04 <__assert_fail@plt+0x4c90>
   150d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   150d8:	cmp	r3, #0
   150dc:	beq	150fc <__assert_fail@plt+0x4188>
   150e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   150e4:	cmp	r3, #0
   150e8:	bne	150fc <__assert_fail@plt+0x4188>
   150ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   150f0:	str	r3, [fp, #-24]	; 0xffffffe8
   150f4:	mov	r3, #0
   150f8:	str	r3, [fp, #-92]	; 0xffffffa4
   150fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   15100:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15104:	cmp	r2, r3
   15108:	bcs	15120 <__assert_fail@plt+0x41ac>
   1510c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15110:	ldr	r3, [fp, #-20]	; 0xffffffec
   15114:	add	r3, r2, r3
   15118:	mov	r2, #39	; 0x27
   1511c:	strb	r2, [r3]
   15120:	ldr	r3, [fp, #-20]	; 0xffffffec
   15124:	add	r3, r3, #1
   15128:	str	r3, [fp, #-20]	; 0xffffffec
   1512c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15130:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15134:	cmp	r2, r3
   15138:	bcs	15150 <__assert_fail@plt+0x41dc>
   1513c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15140:	ldr	r3, [fp, #-20]	; 0xffffffec
   15144:	add	r3, r2, r3
   15148:	mov	r2, #92	; 0x5c
   1514c:	strb	r2, [r3]
   15150:	ldr	r3, [fp, #-20]	; 0xffffffec
   15154:	add	r3, r3, #1
   15158:	str	r3, [fp, #-20]	; 0xffffffec
   1515c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15160:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15164:	cmp	r2, r3
   15168:	bcs	15180 <__assert_fail@plt+0x420c>
   1516c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15170:	ldr	r3, [fp, #-20]	; 0xffffffec
   15174:	add	r3, r2, r3
   15178:	mov	r2, #39	; 0x27
   1517c:	strb	r2, [r3]
   15180:	ldr	r3, [fp, #-20]	; 0xffffffec
   15184:	add	r3, r3, #1
   15188:	str	r3, [fp, #-20]	; 0xffffffec
   1518c:	mov	r3, #0
   15190:	strb	r3, [fp, #-35]	; 0xffffffdd
   15194:	b	157a8 <__assert_fail@plt+0x4834>
   15198:	mov	r3, #1
   1519c:	strb	r3, [fp, #-42]	; 0xffffffd6
   151a0:	b	157ac <__assert_fail@plt+0x4838>
   151a4:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   151a8:	cmp	r3, #0
   151ac:	beq	151ec <__assert_fail@plt+0x4278>
   151b0:	mov	r3, #1
   151b4:	str	r3, [fp, #-48]	; 0xffffffd0
   151b8:	bl	10e60 <__ctype_b_loc@plt>
   151bc:	mov	r3, r0
   151c0:	ldr	r2, [r3]
   151c4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   151c8:	lsl	r3, r3, #1
   151cc:	add	r3, r2, r3
   151d0:	ldrh	r3, [r3]
   151d4:	and	r3, r3, #16384	; 0x4000
   151d8:	cmp	r3, #0
   151dc:	movne	r3, #1
   151e0:	moveq	r3, #0
   151e4:	strb	r3, [fp, #-49]	; 0xffffffcf
   151e8:	b	15438 <__assert_fail@plt+0x44c4>
   151ec:	sub	r3, fp, #76	; 0x4c
   151f0:	mov	r2, #8
   151f4:	mov	r1, #0
   151f8:	mov	r0, r3
   151fc:	bl	10ecc <memset@plt>
   15200:	mov	r3, #0
   15204:	str	r3, [fp, #-48]	; 0xffffffd0
   15208:	mov	r3, #1
   1520c:	strb	r3, [fp, #-49]	; 0xffffffcf
   15210:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15214:	cmn	r3, #1
   15218:	bne	15228 <__assert_fail@plt+0x42b4>
   1521c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15220:	bl	10e84 <strlen@plt>
   15224:	str	r0, [fp, #-100]	; 0xffffff9c
   15228:	ldr	r2, [fp, #-16]
   1522c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15230:	add	r3, r2, r3
   15234:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15238:	add	r1, r2, r3
   1523c:	ldr	r2, [fp, #-16]
   15240:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15244:	add	r3, r2, r3
   15248:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1524c:	sub	r2, r2, r3
   15250:	sub	r3, fp, #76	; 0x4c
   15254:	sub	r0, fp, #80	; 0x50
   15258:	bl	18e78 <__assert_fail@plt+0x7f04>
   1525c:	str	r0, [fp, #-64]	; 0xffffffc0
   15260:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15264:	cmp	r3, #0
   15268:	beq	1542c <__assert_fail@plt+0x44b8>
   1526c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15270:	cmn	r3, #1
   15274:	bne	15284 <__assert_fail@plt+0x4310>
   15278:	mov	r3, #0
   1527c:	strb	r3, [fp, #-49]	; 0xffffffcf
   15280:	b	15438 <__assert_fail@plt+0x44c4>
   15284:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15288:	cmn	r3, #2
   1528c:	bne	152e4 <__assert_fail@plt+0x4370>
   15290:	mov	r3, #0
   15294:	strb	r3, [fp, #-49]	; 0xffffffcf
   15298:	b	152a8 <__assert_fail@plt+0x4334>
   1529c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   152a0:	add	r3, r3, #1
   152a4:	str	r3, [fp, #-48]	; 0xffffffd0
   152a8:	ldr	r2, [fp, #-16]
   152ac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   152b0:	add	r2, r2, r3
   152b4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   152b8:	cmp	r2, r3
   152bc:	bcs	15434 <__assert_fail@plt+0x44c0>
   152c0:	ldr	r2, [fp, #-16]
   152c4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   152c8:	add	r3, r2, r3
   152cc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   152d0:	add	r3, r2, r3
   152d4:	ldrb	r3, [r3]
   152d8:	cmp	r3, #0
   152dc:	bne	1529c <__assert_fail@plt+0x4328>
   152e0:	b	15434 <__assert_fail@plt+0x44c0>
   152e4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   152e8:	cmp	r3, #0
   152ec:	beq	153e0 <__assert_fail@plt+0x446c>
   152f0:	ldr	r3, [fp, #4]
   152f4:	cmp	r3, #2
   152f8:	bne	153e0 <__assert_fail@plt+0x446c>
   152fc:	mov	r3, #1
   15300:	str	r3, [fp, #-56]	; 0xffffffc8
   15304:	b	153d0 <__assert_fail@plt+0x445c>
   15308:	ldr	r2, [fp, #-16]
   1530c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15310:	add	r2, r2, r3
   15314:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15318:	add	r3, r2, r3
   1531c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15320:	add	r3, r2, r3
   15324:	ldrb	r3, [r3]
   15328:	sub	r3, r3, #91	; 0x5b
   1532c:	cmp	r3, #33	; 0x21
   15330:	ldrls	pc, [pc, r3, lsl #2]
   15334:	b	153c0 <__assert_fail@plt+0x444c>
   15338:	andeq	r5, r1, ip, lsl #24
   1533c:	andeq	r5, r1, ip, lsl #24
   15340:	andeq	r5, r1, r0, asr #7
   15344:	andeq	r5, r1, ip, lsl #24
   15348:	andeq	r5, r1, r0, asr #7
   1534c:	andeq	r5, r1, ip, lsl #24
   15350:	andeq	r5, r1, r0, asr #7
   15354:	andeq	r5, r1, r0, asr #7
   15358:	andeq	r5, r1, r0, asr #7
   1535c:	andeq	r5, r1, r0, asr #7
   15360:	andeq	r5, r1, r0, asr #7
   15364:	andeq	r5, r1, r0, asr #7
   15368:	andeq	r5, r1, r0, asr #7
   1536c:	andeq	r5, r1, r0, asr #7
   15370:	andeq	r5, r1, r0, asr #7
   15374:	andeq	r5, r1, r0, asr #7
   15378:	andeq	r5, r1, r0, asr #7
   1537c:	andeq	r5, r1, r0, asr #7
   15380:	andeq	r5, r1, r0, asr #7
   15384:	andeq	r5, r1, r0, asr #7
   15388:	andeq	r5, r1, r0, asr #7
   1538c:	andeq	r5, r1, r0, asr #7
   15390:	andeq	r5, r1, r0, asr #7
   15394:	andeq	r5, r1, r0, asr #7
   15398:	andeq	r5, r1, r0, asr #7
   1539c:	andeq	r5, r1, r0, asr #7
   153a0:	andeq	r5, r1, r0, asr #7
   153a4:	andeq	r5, r1, r0, asr #7
   153a8:	andeq	r5, r1, r0, asr #7
   153ac:	andeq	r5, r1, r0, asr #7
   153b0:	andeq	r5, r1, r0, asr #7
   153b4:	andeq	r5, r1, r0, asr #7
   153b8:	andeq	r5, r1, r0, asr #7
   153bc:	andeq	r5, r1, ip, lsl #24
   153c0:	nop			; (mov r0, r0)
   153c4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   153c8:	add	r3, r3, #1
   153cc:	str	r3, [fp, #-56]	; 0xffffffc8
   153d0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   153d4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   153d8:	cmp	r2, r3
   153dc:	bcc	15308 <__assert_fail@plt+0x4394>
   153e0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   153e4:	mov	r0, r3
   153e8:	bl	10dac <iswprint@plt>
   153ec:	mov	r3, r0
   153f0:	cmp	r3, #0
   153f4:	bne	15400 <__assert_fail@plt+0x448c>
   153f8:	mov	r3, #0
   153fc:	strb	r3, [fp, #-49]	; 0xffffffcf
   15400:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15404:	ldr	r3, [fp, #-64]	; 0xffffffc0
   15408:	add	r3, r2, r3
   1540c:	str	r3, [fp, #-48]	; 0xffffffd0
   15410:	sub	r3, fp, #76	; 0x4c
   15414:	mov	r0, r3
   15418:	bl	10d58 <mbsinit@plt>
   1541c:	mov	r3, r0
   15420:	cmp	r3, #0
   15424:	beq	15228 <__assert_fail@plt+0x42b4>
   15428:	b	15438 <__assert_fail@plt+0x44c4>
   1542c:	nop			; (mov r0, r0)
   15430:	b	15438 <__assert_fail@plt+0x44c4>
   15434:	nop			; (mov r0, r0)
   15438:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1543c:	strb	r3, [fp, #-42]	; 0xffffffd6
   15440:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15444:	cmp	r3, #1
   15448:	bhi	1546c <__assert_fail@plt+0x44f8>
   1544c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15450:	cmp	r3, #0
   15454:	beq	157ac <__assert_fail@plt+0x4838>
   15458:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1545c:	eor	r3, r3, #1
   15460:	uxtb	r3, r3
   15464:	cmp	r3, #0
   15468:	beq	157ac <__assert_fail@plt+0x4838>
   1546c:	ldr	r2, [fp, #-16]
   15470:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15474:	add	r3, r2, r3
   15478:	str	r3, [fp, #-68]	; 0xffffffbc
   1547c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15480:	cmp	r3, #0
   15484:	beq	15644 <__assert_fail@plt+0x46d0>
   15488:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1548c:	eor	r3, r3, #1
   15490:	uxtb	r3, r3
   15494:	cmp	r3, #0
   15498:	beq	15644 <__assert_fail@plt+0x46d0>
   1549c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   154a0:	cmp	r3, #0
   154a4:	bne	15c14 <__assert_fail@plt+0x4ca0>
   154a8:	mov	r3, #1
   154ac:	strb	r3, [fp, #-41]	; 0xffffffd7
   154b0:	ldr	r3, [fp, #4]
   154b4:	cmp	r3, #2
   154b8:	bne	15568 <__assert_fail@plt+0x45f4>
   154bc:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   154c0:	eor	r3, r3, #1
   154c4:	uxtb	r3, r3
   154c8:	cmp	r3, #0
   154cc:	beq	15568 <__assert_fail@plt+0x45f4>
   154d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   154d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   154d8:	cmp	r2, r3
   154dc:	bcs	154f4 <__assert_fail@plt+0x4580>
   154e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   154e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   154e8:	add	r3, r2, r3
   154ec:	mov	r2, #39	; 0x27
   154f0:	strb	r2, [r3]
   154f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   154f8:	add	r3, r3, #1
   154fc:	str	r3, [fp, #-20]	; 0xffffffec
   15500:	ldr	r2, [fp, #-20]	; 0xffffffec
   15504:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15508:	cmp	r2, r3
   1550c:	bcs	15524 <__assert_fail@plt+0x45b0>
   15510:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15514:	ldr	r3, [fp, #-20]	; 0xffffffec
   15518:	add	r3, r2, r3
   1551c:	mov	r2, #36	; 0x24
   15520:	strb	r2, [r3]
   15524:	ldr	r3, [fp, #-20]	; 0xffffffec
   15528:	add	r3, r3, #1
   1552c:	str	r3, [fp, #-20]	; 0xffffffec
   15530:	ldr	r2, [fp, #-20]	; 0xffffffec
   15534:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15538:	cmp	r2, r3
   1553c:	bcs	15554 <__assert_fail@plt+0x45e0>
   15540:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15544:	ldr	r3, [fp, #-20]	; 0xffffffec
   15548:	add	r3, r2, r3
   1554c:	mov	r2, #39	; 0x27
   15550:	strb	r2, [r3]
   15554:	ldr	r3, [fp, #-20]	; 0xffffffec
   15558:	add	r3, r3, #1
   1555c:	str	r3, [fp, #-20]	; 0xffffffec
   15560:	mov	r3, #1
   15564:	strb	r3, [fp, #-35]	; 0xffffffdd
   15568:	ldr	r2, [fp, #-20]	; 0xffffffec
   1556c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15570:	cmp	r2, r3
   15574:	bcs	1558c <__assert_fail@plt+0x4618>
   15578:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1557c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15580:	add	r3, r2, r3
   15584:	mov	r2, #92	; 0x5c
   15588:	strb	r2, [r3]
   1558c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15590:	add	r3, r3, #1
   15594:	str	r3, [fp, #-20]	; 0xffffffec
   15598:	ldr	r2, [fp, #-20]	; 0xffffffec
   1559c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   155a0:	cmp	r2, r3
   155a4:	bcs	155cc <__assert_fail@plt+0x4658>
   155a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   155ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   155b0:	add	r3, r2, r3
   155b4:	ldrb	r2, [fp, #-38]	; 0xffffffda
   155b8:	lsr	r2, r2, #6
   155bc:	uxtb	r2, r2
   155c0:	add	r2, r2, #48	; 0x30
   155c4:	uxtb	r2, r2
   155c8:	strb	r2, [r3]
   155cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   155d0:	add	r3, r3, #1
   155d4:	str	r3, [fp, #-20]	; 0xffffffec
   155d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   155dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   155e0:	cmp	r2, r3
   155e4:	bcs	15614 <__assert_fail@plt+0x46a0>
   155e8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   155ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   155f0:	add	r3, r2, r3
   155f4:	ldrb	r2, [fp, #-38]	; 0xffffffda
   155f8:	lsr	r2, r2, #3
   155fc:	uxtb	r2, r2
   15600:	and	r2, r2, #7
   15604:	uxtb	r2, r2
   15608:	add	r2, r2, #48	; 0x30
   1560c:	uxtb	r2, r2
   15610:	strb	r2, [r3]
   15614:	ldr	r3, [fp, #-20]	; 0xffffffec
   15618:	add	r3, r3, #1
   1561c:	str	r3, [fp, #-20]	; 0xffffffec
   15620:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15624:	and	r3, r3, #7
   15628:	uxtb	r3, r3
   1562c:	add	r3, r3, #48	; 0x30
   15630:	strb	r3, [fp, #-38]	; 0xffffffda
   15634:	b	15688 <__assert_fail@plt+0x4714>
   15638:	andeq	sl, r1, r0, asr #17
   1563c:	andeq	sl, r1, r8, asr #17
   15640:	andeq	sl, r1, r4, asr #17
   15644:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   15648:	cmp	r3, #0
   1564c:	beq	15688 <__assert_fail@plt+0x4714>
   15650:	ldr	r2, [fp, #-20]	; 0xffffffec
   15654:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15658:	cmp	r2, r3
   1565c:	bcs	15674 <__assert_fail@plt+0x4700>
   15660:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15664:	ldr	r3, [fp, #-20]	; 0xffffffec
   15668:	add	r3, r2, r3
   1566c:	mov	r2, #92	; 0x5c
   15670:	strb	r2, [r3]
   15674:	ldr	r3, [fp, #-20]	; 0xffffffec
   15678:	add	r3, r3, #1
   1567c:	str	r3, [fp, #-20]	; 0xffffffec
   15680:	mov	r3, #0
   15684:	strb	r3, [fp, #-40]	; 0xffffffd8
   15688:	ldr	r3, [fp, #-16]
   1568c:	add	r2, r3, #1
   15690:	ldr	r3, [fp, #-68]	; 0xffffffbc
   15694:	cmp	r2, r3
   15698:	bcs	15778 <__assert_fail@plt+0x4804>
   1569c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   156a0:	cmp	r3, #0
   156a4:	beq	15724 <__assert_fail@plt+0x47b0>
   156a8:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   156ac:	eor	r3, r3, #1
   156b0:	uxtb	r3, r3
   156b4:	cmp	r3, #0
   156b8:	beq	15724 <__assert_fail@plt+0x47b0>
   156bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   156c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   156c4:	cmp	r2, r3
   156c8:	bcs	156e0 <__assert_fail@plt+0x476c>
   156cc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   156d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   156d4:	add	r3, r2, r3
   156d8:	mov	r2, #39	; 0x27
   156dc:	strb	r2, [r3]
   156e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   156e4:	add	r3, r3, #1
   156e8:	str	r3, [fp, #-20]	; 0xffffffec
   156ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   156f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   156f4:	cmp	r2, r3
   156f8:	bcs	15710 <__assert_fail@plt+0x479c>
   156fc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15700:	ldr	r3, [fp, #-20]	; 0xffffffec
   15704:	add	r3, r2, r3
   15708:	mov	r2, #39	; 0x27
   1570c:	strb	r2, [r3]
   15710:	ldr	r3, [fp, #-20]	; 0xffffffec
   15714:	add	r3, r3, #1
   15718:	str	r3, [fp, #-20]	; 0xffffffec
   1571c:	mov	r3, #0
   15720:	strb	r3, [fp, #-35]	; 0xffffffdd
   15724:	ldr	r2, [fp, #-20]	; 0xffffffec
   15728:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1572c:	cmp	r2, r3
   15730:	bcs	15748 <__assert_fail@plt+0x47d4>
   15734:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15738:	ldr	r3, [fp, #-20]	; 0xffffffec
   1573c:	add	r3, r2, r3
   15740:	ldrb	r2, [fp, #-38]	; 0xffffffda
   15744:	strb	r2, [r3]
   15748:	ldr	r3, [fp, #-20]	; 0xffffffec
   1574c:	add	r3, r3, #1
   15750:	str	r3, [fp, #-20]	; 0xffffffec
   15754:	ldr	r3, [fp, #-16]
   15758:	add	r3, r3, #1
   1575c:	str	r3, [fp, #-16]
   15760:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15764:	ldr	r3, [fp, #-16]
   15768:	add	r3, r2, r3
   1576c:	ldrb	r3, [r3]
   15770:	strb	r3, [fp, #-38]	; 0xffffffda
   15774:	b	1547c <__assert_fail@plt+0x4508>
   15778:	nop			; (mov r0, r0)
   1577c:	b	15948 <__assert_fail@plt+0x49d4>
   15780:	nop			; (mov r0, r0)
   15784:	b	157ac <__assert_fail@plt+0x4838>
   15788:	nop			; (mov r0, r0)
   1578c:	b	157ac <__assert_fail@plt+0x4838>
   15790:	nop			; (mov r0, r0)
   15794:	b	157ac <__assert_fail@plt+0x4838>
   15798:	nop			; (mov r0, r0)
   1579c:	b	157ac <__assert_fail@plt+0x4838>
   157a0:	nop			; (mov r0, r0)
   157a4:	b	157ac <__assert_fail@plt+0x4838>
   157a8:	nop			; (mov r0, r0)
   157ac:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   157b0:	eor	r3, r3, #1
   157b4:	uxtb	r3, r3
   157b8:	cmp	r3, #0
   157bc:	bne	157cc <__assert_fail@plt+0x4858>
   157c0:	ldr	r3, [fp, #4]
   157c4:	cmp	r3, #2
   157c8:	bne	157e0 <__assert_fail@plt+0x486c>
   157cc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   157d0:	eor	r3, r3, #1
   157d4:	uxtb	r3, r3
   157d8:	cmp	r3, #0
   157dc:	bne	15820 <__assert_fail@plt+0x48ac>
   157e0:	ldr	r3, [fp, #12]
   157e4:	cmp	r3, #0
   157e8:	beq	15820 <__assert_fail@plt+0x48ac>
   157ec:	ldrb	r3, [fp, #-38]	; 0xffffffda
   157f0:	lsr	r3, r3, #5
   157f4:	uxtb	r3, r3
   157f8:	lsl	r3, r3, #2
   157fc:	ldr	r2, [fp, #12]
   15800:	add	r3, r2, r3
   15804:	ldr	r2, [r3]
   15808:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1580c:	and	r3, r3, #31
   15810:	lsr	r3, r2, r3
   15814:	and	r3, r3, #1
   15818:	cmp	r3, #0
   1581c:	bne	15834 <__assert_fail@plt+0x48c0>
   15820:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   15824:	eor	r3, r3, #1
   15828:	uxtb	r3, r3
   1582c:	cmp	r3, #0
   15830:	bne	15944 <__assert_fail@plt+0x49d0>
   15834:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15838:	cmp	r3, #0
   1583c:	bne	15c1c <__assert_fail@plt+0x4ca8>
   15840:	mov	r3, #1
   15844:	strb	r3, [fp, #-41]	; 0xffffffd7
   15848:	ldr	r3, [fp, #4]
   1584c:	cmp	r3, #2
   15850:	bne	15900 <__assert_fail@plt+0x498c>
   15854:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   15858:	eor	r3, r3, #1
   1585c:	uxtb	r3, r3
   15860:	cmp	r3, #0
   15864:	beq	15900 <__assert_fail@plt+0x498c>
   15868:	ldr	r2, [fp, #-20]	; 0xffffffec
   1586c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15870:	cmp	r2, r3
   15874:	bcs	1588c <__assert_fail@plt+0x4918>
   15878:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1587c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15880:	add	r3, r2, r3
   15884:	mov	r2, #39	; 0x27
   15888:	strb	r2, [r3]
   1588c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15890:	add	r3, r3, #1
   15894:	str	r3, [fp, #-20]	; 0xffffffec
   15898:	ldr	r2, [fp, #-20]	; 0xffffffec
   1589c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   158a0:	cmp	r2, r3
   158a4:	bcs	158bc <__assert_fail@plt+0x4948>
   158a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   158ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   158b0:	add	r3, r2, r3
   158b4:	mov	r2, #36	; 0x24
   158b8:	strb	r2, [r3]
   158bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   158c0:	add	r3, r3, #1
   158c4:	str	r3, [fp, #-20]	; 0xffffffec
   158c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   158cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   158d0:	cmp	r2, r3
   158d4:	bcs	158ec <__assert_fail@plt+0x4978>
   158d8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   158dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   158e0:	add	r3, r2, r3
   158e4:	mov	r2, #39	; 0x27
   158e8:	strb	r2, [r3]
   158ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   158f0:	add	r3, r3, #1
   158f4:	str	r3, [fp, #-20]	; 0xffffffec
   158f8:	mov	r3, #1
   158fc:	strb	r3, [fp, #-35]	; 0xffffffdd
   15900:	ldr	r2, [fp, #-20]	; 0xffffffec
   15904:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15908:	cmp	r2, r3
   1590c:	bcs	15924 <__assert_fail@plt+0x49b0>
   15910:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15914:	ldr	r3, [fp, #-20]	; 0xffffffec
   15918:	add	r3, r2, r3
   1591c:	mov	r2, #92	; 0x5c
   15920:	strb	r2, [r3]
   15924:	ldr	r3, [fp, #-20]	; 0xffffffec
   15928:	add	r3, r3, #1
   1592c:	str	r3, [fp, #-20]	; 0xffffffec
   15930:	b	15948 <__assert_fail@plt+0x49d4>
   15934:	nop			; (mov r0, r0)
   15938:	b	15948 <__assert_fail@plt+0x49d4>
   1593c:	nop			; (mov r0, r0)
   15940:	b	15948 <__assert_fail@plt+0x49d4>
   15944:	nop			; (mov r0, r0)
   15948:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1594c:	cmp	r3, #0
   15950:	beq	159d0 <__assert_fail@plt+0x4a5c>
   15954:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   15958:	eor	r3, r3, #1
   1595c:	uxtb	r3, r3
   15960:	cmp	r3, #0
   15964:	beq	159d0 <__assert_fail@plt+0x4a5c>
   15968:	ldr	r2, [fp, #-20]	; 0xffffffec
   1596c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15970:	cmp	r2, r3
   15974:	bcs	1598c <__assert_fail@plt+0x4a18>
   15978:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1597c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15980:	add	r3, r2, r3
   15984:	mov	r2, #39	; 0x27
   15988:	strb	r2, [r3]
   1598c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15990:	add	r3, r3, #1
   15994:	str	r3, [fp, #-20]	; 0xffffffec
   15998:	ldr	r2, [fp, #-20]	; 0xffffffec
   1599c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   159a0:	cmp	r2, r3
   159a4:	bcs	159bc <__assert_fail@plt+0x4a48>
   159a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   159ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   159b0:	add	r3, r2, r3
   159b4:	mov	r2, #39	; 0x27
   159b8:	strb	r2, [r3]
   159bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   159c0:	add	r3, r3, #1
   159c4:	str	r3, [fp, #-20]	; 0xffffffec
   159c8:	mov	r3, #0
   159cc:	strb	r3, [fp, #-35]	; 0xffffffdd
   159d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   159d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   159d8:	cmp	r2, r3
   159dc:	bcs	159f4 <__assert_fail@plt+0x4a80>
   159e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   159e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   159e8:	add	r3, r2, r3
   159ec:	ldrb	r2, [fp, #-38]	; 0xffffffda
   159f0:	strb	r2, [r3]
   159f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   159f8:	add	r3, r3, #1
   159fc:	str	r3, [fp, #-20]	; 0xffffffec
   15a00:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   15a04:	eor	r3, r3, #1
   15a08:	uxtb	r3, r3
   15a0c:	cmp	r3, #0
   15a10:	beq	15a1c <__assert_fail@plt+0x4aa8>
   15a14:	mov	r3, #0
   15a18:	strb	r3, [fp, #-37]	; 0xffffffdb
   15a1c:	ldr	r3, [fp, #-16]
   15a20:	add	r3, r3, #1
   15a24:	str	r3, [fp, #-16]
   15a28:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15a2c:	cmn	r3, #1
   15a30:	bne	15a58 <__assert_fail@plt+0x4ae4>
   15a34:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15a38:	ldr	r3, [fp, #-16]
   15a3c:	add	r3, r2, r3
   15a40:	ldrb	r3, [r3]
   15a44:	cmp	r3, #0
   15a48:	movne	r3, #1
   15a4c:	moveq	r3, #0
   15a50:	uxtb	r3, r3
   15a54:	b	15a70 <__assert_fail@plt+0x4afc>
   15a58:	ldr	r2, [fp, #-16]
   15a5c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15a60:	cmp	r2, r3
   15a64:	movne	r3, #1
   15a68:	moveq	r3, #0
   15a6c:	uxtb	r3, r3
   15a70:	cmp	r3, #0
   15a74:	bne	1489c <__assert_fail@plt+0x3928>
   15a78:	ldr	r3, [fp, #-20]	; 0xffffffec
   15a7c:	cmp	r3, #0
   15a80:	bne	15a9c <__assert_fail@plt+0x4b28>
   15a84:	ldr	r3, [fp, #4]
   15a88:	cmp	r3, #2
   15a8c:	bne	15a9c <__assert_fail@plt+0x4b28>
   15a90:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15a94:	cmp	r3, #0
   15a98:	bne	15c24 <__assert_fail@plt+0x4cb0>
   15a9c:	ldr	r3, [fp, #4]
   15aa0:	cmp	r3, #2
   15aa4:	bne	15b44 <__assert_fail@plt+0x4bd0>
   15aa8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15aac:	eor	r3, r3, #1
   15ab0:	uxtb	r3, r3
   15ab4:	cmp	r3, #0
   15ab8:	beq	15b44 <__assert_fail@plt+0x4bd0>
   15abc:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   15ac0:	cmp	r3, #0
   15ac4:	beq	15b44 <__assert_fail@plt+0x4bd0>
   15ac8:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   15acc:	cmp	r3, #0
   15ad0:	beq	15b18 <__assert_fail@plt+0x4ba4>
   15ad4:	ldr	r3, [fp, #20]
   15ad8:	str	r3, [sp, #16]
   15adc:	ldr	r3, [fp, #16]
   15ae0:	str	r3, [sp, #12]
   15ae4:	ldr	r3, [fp, #12]
   15ae8:	str	r3, [sp, #8]
   15aec:	ldr	r3, [fp, #8]
   15af0:	str	r3, [sp, #4]
   15af4:	mov	r3, #5
   15af8:	str	r3, [sp]
   15afc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15b00:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15b04:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15b08:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15b0c:	bl	145ec <__assert_fail@plt+0x3678>
   15b10:	mov	r3, r0
   15b14:	b	15c8c <__assert_fail@plt+0x4d18>
   15b18:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15b1c:	cmp	r3, #0
   15b20:	bne	15b44 <__assert_fail@plt+0x4bd0>
   15b24:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15b28:	cmp	r3, #0
   15b2c:	beq	15b44 <__assert_fail@plt+0x4bd0>
   15b30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15b34:	str	r3, [fp, #-92]	; 0xffffffa4
   15b38:	mov	r3, #0
   15b3c:	str	r3, [fp, #-20]	; 0xffffffec
   15b40:	b	14678 <__assert_fail@plt+0x3704>
   15b44:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15b48:	cmp	r3, #0
   15b4c:	beq	15bb8 <__assert_fail@plt+0x4c44>
   15b50:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15b54:	eor	r3, r3, #1
   15b58:	uxtb	r3, r3
   15b5c:	cmp	r3, #0
   15b60:	beq	15bb8 <__assert_fail@plt+0x4c44>
   15b64:	b	15ba8 <__assert_fail@plt+0x4c34>
   15b68:	ldr	r2, [fp, #-20]	; 0xffffffec
   15b6c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15b70:	cmp	r2, r3
   15b74:	bcs	15b90 <__assert_fail@plt+0x4c1c>
   15b78:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15b7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b80:	add	r3, r2, r3
   15b84:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15b88:	ldrb	r2, [r2]
   15b8c:	strb	r2, [r3]
   15b90:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b94:	add	r3, r3, #1
   15b98:	str	r3, [fp, #-20]	; 0xffffffec
   15b9c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15ba0:	add	r3, r3, #1
   15ba4:	str	r3, [fp, #-28]	; 0xffffffe4
   15ba8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15bac:	ldrb	r3, [r3]
   15bb0:	cmp	r3, #0
   15bb4:	bne	15b68 <__assert_fail@plt+0x4bf4>
   15bb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   15bbc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15bc0:	cmp	r2, r3
   15bc4:	bcs	15bdc <__assert_fail@plt+0x4c68>
   15bc8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15bcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15bd0:	add	r3, r2, r3
   15bd4:	mov	r2, #0
   15bd8:	strb	r2, [r3]
   15bdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15be0:	b	15c8c <__assert_fail@plt+0x4d18>
   15be4:	nop			; (mov r0, r0)
   15be8:	b	15c28 <__assert_fail@plt+0x4cb4>
   15bec:	nop			; (mov r0, r0)
   15bf0:	b	15c28 <__assert_fail@plt+0x4cb4>
   15bf4:	nop			; (mov r0, r0)
   15bf8:	b	15c28 <__assert_fail@plt+0x4cb4>
   15bfc:	nop			; (mov r0, r0)
   15c00:	b	15c28 <__assert_fail@plt+0x4cb4>
   15c04:	nop			; (mov r0, r0)
   15c08:	b	15c28 <__assert_fail@plt+0x4cb4>
   15c0c:	nop			; (mov r0, r0)
   15c10:	b	15c28 <__assert_fail@plt+0x4cb4>
   15c14:	nop			; (mov r0, r0)
   15c18:	b	15c28 <__assert_fail@plt+0x4cb4>
   15c1c:	nop			; (mov r0, r0)
   15c20:	b	15c28 <__assert_fail@plt+0x4cb4>
   15c24:	nop			; (mov r0, r0)
   15c28:	ldr	r3, [fp, #4]
   15c2c:	cmp	r3, #2
   15c30:	bne	15c48 <__assert_fail@plt+0x4cd4>
   15c34:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15c38:	cmp	r3, #0
   15c3c:	beq	15c48 <__assert_fail@plt+0x4cd4>
   15c40:	mov	r3, #4
   15c44:	str	r3, [fp, #4]
   15c48:	ldr	r3, [fp, #8]
   15c4c:	bic	r3, r3, #2
   15c50:	ldr	r2, [fp, #20]
   15c54:	str	r2, [sp, #16]
   15c58:	ldr	r2, [fp, #16]
   15c5c:	str	r2, [sp, #12]
   15c60:	mov	r2, #0
   15c64:	str	r2, [sp, #8]
   15c68:	str	r3, [sp, #4]
   15c6c:	ldr	r3, [fp, #4]
   15c70:	str	r3, [sp]
   15c74:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15c78:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15c7c:	ldr	r1, [fp, #-92]	; 0xffffffa4
   15c80:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15c84:	bl	145ec <__assert_fail@plt+0x3678>
   15c88:	mov	r3, r0
   15c8c:	mov	r0, r3
   15c90:	sub	sp, fp, #8
   15c94:	pop	{r4, fp, pc}
   15c98:	push	{fp, lr}
   15c9c:	add	fp, sp, #4
   15ca0:	sub	sp, sp, #56	; 0x38
   15ca4:	str	r0, [fp, #-24]	; 0xffffffe8
   15ca8:	str	r1, [fp, #-28]	; 0xffffffe4
   15cac:	str	r2, [fp, #-32]	; 0xffffffe0
   15cb0:	str	r3, [fp, #-36]	; 0xffffffdc
   15cb4:	ldr	r3, [fp, #4]
   15cb8:	cmp	r3, #0
   15cbc:	beq	15cc8 <__assert_fail@plt+0x4d54>
   15cc0:	ldr	r3, [fp, #4]
   15cc4:	b	15ccc <__assert_fail@plt+0x4d58>
   15cc8:	ldr	r3, [pc, #132]	; 15d54 <__assert_fail@plt+0x4de0>
   15ccc:	str	r3, [fp, #-8]
   15cd0:	bl	10eb4 <__errno_location@plt>
   15cd4:	mov	r3, r0
   15cd8:	ldr	r3, [r3]
   15cdc:	str	r3, [fp, #-12]
   15ce0:	ldr	r3, [fp, #-8]
   15ce4:	ldr	r3, [r3]
   15ce8:	ldr	r2, [fp, #-8]
   15cec:	ldr	r2, [r2, #4]
   15cf0:	ldr	r1, [fp, #-8]
   15cf4:	add	r1, r1, #8
   15cf8:	ldr	r0, [fp, #-8]
   15cfc:	ldr	r0, [r0, #40]	; 0x28
   15d00:	ldr	ip, [fp, #-8]
   15d04:	ldr	ip, [ip, #44]	; 0x2c
   15d08:	str	ip, [sp, #16]
   15d0c:	str	r0, [sp, #12]
   15d10:	str	r1, [sp, #8]
   15d14:	str	r2, [sp, #4]
   15d18:	str	r3, [sp]
   15d1c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15d20:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15d24:	ldr	r1, [fp, #-28]	; 0xffffffe4
   15d28:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15d2c:	bl	145ec <__assert_fail@plt+0x3678>
   15d30:	str	r0, [fp, #-16]
   15d34:	bl	10eb4 <__errno_location@plt>
   15d38:	mov	r2, r0
   15d3c:	ldr	r3, [fp, #-12]
   15d40:	str	r3, [r2]
   15d44:	ldr	r3, [fp, #-16]
   15d48:	mov	r0, r3
   15d4c:	sub	sp, fp, #4
   15d50:	pop	{fp, pc}
   15d54:	andeq	fp, r2, r8, ror r1
   15d58:	push	{fp, lr}
   15d5c:	add	fp, sp, #4
   15d60:	sub	sp, sp, #16
   15d64:	str	r0, [fp, #-8]
   15d68:	str	r1, [fp, #-12]
   15d6c:	str	r2, [fp, #-16]
   15d70:	ldr	r3, [fp, #-16]
   15d74:	mov	r2, #0
   15d78:	ldr	r1, [fp, #-12]
   15d7c:	ldr	r0, [fp, #-8]
   15d80:	bl	15d94 <__assert_fail@plt+0x4e20>
   15d84:	mov	r3, r0
   15d88:	mov	r0, r3
   15d8c:	sub	sp, fp, #4
   15d90:	pop	{fp, pc}
   15d94:	push	{fp, lr}
   15d98:	add	fp, sp, #4
   15d9c:	sub	sp, sp, #64	; 0x40
   15da0:	str	r0, [fp, #-32]	; 0xffffffe0
   15da4:	str	r1, [fp, #-36]	; 0xffffffdc
   15da8:	str	r2, [fp, #-40]	; 0xffffffd8
   15dac:	str	r3, [fp, #-44]	; 0xffffffd4
   15db0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15db4:	cmp	r3, #0
   15db8:	beq	15dc4 <__assert_fail@plt+0x4e50>
   15dbc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15dc0:	b	15dc8 <__assert_fail@plt+0x4e54>
   15dc4:	ldr	r3, [pc, #292]	; 15ef0 <__assert_fail@plt+0x4f7c>
   15dc8:	str	r3, [fp, #-8]
   15dcc:	bl	10eb4 <__errno_location@plt>
   15dd0:	mov	r3, r0
   15dd4:	ldr	r3, [r3]
   15dd8:	str	r3, [fp, #-12]
   15ddc:	ldr	r3, [fp, #-8]
   15de0:	ldr	r3, [r3, #4]
   15de4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15de8:	cmp	r2, #0
   15dec:	moveq	r2, #1
   15df0:	movne	r2, #0
   15df4:	uxtb	r2, r2
   15df8:	orr	r3, r3, r2
   15dfc:	str	r3, [fp, #-16]
   15e00:	ldr	r3, [fp, #-8]
   15e04:	ldr	r3, [r3]
   15e08:	ldr	r2, [fp, #-8]
   15e0c:	add	r2, r2, #8
   15e10:	ldr	r1, [fp, #-8]
   15e14:	ldr	r1, [r1, #40]	; 0x28
   15e18:	ldr	r0, [fp, #-8]
   15e1c:	ldr	r0, [r0, #44]	; 0x2c
   15e20:	str	r0, [sp, #16]
   15e24:	str	r1, [sp, #12]
   15e28:	str	r2, [sp, #8]
   15e2c:	ldr	r2, [fp, #-16]
   15e30:	str	r2, [sp, #4]
   15e34:	str	r3, [sp]
   15e38:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15e3c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15e40:	mov	r1, #0
   15e44:	mov	r0, #0
   15e48:	bl	145ec <__assert_fail@plt+0x3678>
   15e4c:	mov	r3, r0
   15e50:	add	r3, r3, #1
   15e54:	str	r3, [fp, #-20]	; 0xffffffec
   15e58:	ldr	r0, [fp, #-20]	; 0xffffffec
   15e5c:	bl	17134 <__assert_fail@plt+0x61c0>
   15e60:	mov	r3, r0
   15e64:	str	r3, [fp, #-24]	; 0xffffffe8
   15e68:	ldr	r3, [fp, #-8]
   15e6c:	ldr	r3, [r3]
   15e70:	ldr	r2, [fp, #-8]
   15e74:	add	r2, r2, #8
   15e78:	ldr	r1, [fp, #-8]
   15e7c:	ldr	r1, [r1, #40]	; 0x28
   15e80:	ldr	r0, [fp, #-8]
   15e84:	ldr	r0, [r0, #44]	; 0x2c
   15e88:	str	r0, [sp, #16]
   15e8c:	str	r1, [sp, #12]
   15e90:	str	r2, [sp, #8]
   15e94:	ldr	r2, [fp, #-16]
   15e98:	str	r2, [sp, #4]
   15e9c:	str	r3, [sp]
   15ea0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15ea4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15ea8:	ldr	r1, [fp, #-20]	; 0xffffffec
   15eac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15eb0:	bl	145ec <__assert_fail@plt+0x3678>
   15eb4:	bl	10eb4 <__errno_location@plt>
   15eb8:	mov	r2, r0
   15ebc:	ldr	r3, [fp, #-12]
   15ec0:	str	r3, [r2]
   15ec4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15ec8:	cmp	r3, #0
   15ecc:	beq	15ee0 <__assert_fail@plt+0x4f6c>
   15ed0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ed4:	sub	r2, r3, #1
   15ed8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15edc:	str	r2, [r3]
   15ee0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ee4:	mov	r0, r3
   15ee8:	sub	sp, fp, #4
   15eec:	pop	{fp, pc}
   15ef0:	andeq	fp, r2, r8, ror r1
   15ef4:	push	{fp, lr}
   15ef8:	add	fp, sp, #4
   15efc:	sub	sp, sp, #8
   15f00:	ldr	r3, [pc, #196]	; 15fcc <__assert_fail@plt+0x5058>
   15f04:	ldr	r3, [r3]
   15f08:	str	r3, [fp, #-12]
   15f0c:	mov	r3, #1
   15f10:	str	r3, [fp, #-8]
   15f14:	b	15f40 <__assert_fail@plt+0x4fcc>
   15f18:	ldr	r3, [fp, #-8]
   15f1c:	lsl	r3, r3, #3
   15f20:	ldr	r2, [fp, #-12]
   15f24:	add	r3, r2, r3
   15f28:	ldr	r3, [r3, #4]
   15f2c:	mov	r0, r3
   15f30:	bl	13de8 <__assert_fail@plt+0x2e74>
   15f34:	ldr	r3, [fp, #-8]
   15f38:	add	r3, r3, #1
   15f3c:	str	r3, [fp, #-8]
   15f40:	ldr	r3, [pc, #136]	; 15fd0 <__assert_fail@plt+0x505c>
   15f44:	ldr	r3, [r3]
   15f48:	ldr	r2, [fp, #-8]
   15f4c:	cmp	r2, r3
   15f50:	blt	15f18 <__assert_fail@plt+0x4fa4>
   15f54:	ldr	r3, [fp, #-12]
   15f58:	ldr	r3, [r3, #4]
   15f5c:	ldr	r2, [pc, #112]	; 15fd4 <__assert_fail@plt+0x5060>
   15f60:	cmp	r3, r2
   15f64:	beq	15f90 <__assert_fail@plt+0x501c>
   15f68:	ldr	r3, [fp, #-12]
   15f6c:	ldr	r3, [r3, #4]
   15f70:	mov	r0, r3
   15f74:	bl	13de8 <__assert_fail@plt+0x2e74>
   15f78:	ldr	r3, [pc, #88]	; 15fd8 <__assert_fail@plt+0x5064>
   15f7c:	mov	r2, #256	; 0x100
   15f80:	str	r2, [r3]
   15f84:	ldr	r3, [pc, #76]	; 15fd8 <__assert_fail@plt+0x5064>
   15f88:	ldr	r2, [pc, #68]	; 15fd4 <__assert_fail@plt+0x5060>
   15f8c:	str	r2, [r3, #4]
   15f90:	ldr	r3, [fp, #-12]
   15f94:	ldr	r2, [pc, #60]	; 15fd8 <__assert_fail@plt+0x5064>
   15f98:	cmp	r3, r2
   15f9c:	beq	15fb4 <__assert_fail@plt+0x5040>
   15fa0:	ldr	r0, [fp, #-12]
   15fa4:	bl	13de8 <__assert_fail@plt+0x2e74>
   15fa8:	ldr	r3, [pc, #28]	; 15fcc <__assert_fail@plt+0x5058>
   15fac:	ldr	r2, [pc, #36]	; 15fd8 <__assert_fail@plt+0x5064>
   15fb0:	str	r2, [r3]
   15fb4:	ldr	r3, [pc, #20]	; 15fd0 <__assert_fail@plt+0x505c>
   15fb8:	mov	r2, #1
   15fbc:	str	r2, [r3]
   15fc0:	nop			; (mov r0, r0)
   15fc4:	sub	sp, fp, #4
   15fc8:	pop	{fp, pc}
   15fcc:	andeq	fp, r2, r0, lsl r1
   15fd0:	andeq	fp, r2, r4, lsl #2
   15fd4:	andeq	fp, r2, r8, lsr #3
   15fd8:	andeq	fp, r2, r8, lsl #2
   15fdc:	push	{r4, fp, lr}
   15fe0:	add	fp, sp, #8
   15fe4:	sub	sp, sp, #84	; 0x54
   15fe8:	str	r0, [fp, #-56]	; 0xffffffc8
   15fec:	str	r1, [fp, #-60]	; 0xffffffc4
   15ff0:	str	r2, [fp, #-64]	; 0xffffffc0
   15ff4:	str	r3, [fp, #-68]	; 0xffffffbc
   15ff8:	bl	10eb4 <__errno_location@plt>
   15ffc:	mov	r3, r0
   16000:	ldr	r3, [r3]
   16004:	str	r3, [fp, #-24]	; 0xffffffe8
   16008:	ldr	r3, [pc, #640]	; 16290 <__assert_fail@plt+0x531c>
   1600c:	ldr	r3, [r3]
   16010:	str	r3, [fp, #-16]
   16014:	mvn	r3, #-2147483648	; 0x80000000
   16018:	str	r3, [fp, #-28]	; 0xffffffe4
   1601c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16020:	cmp	r3, #0
   16024:	blt	16038 <__assert_fail@plt+0x50c4>
   16028:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1602c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16030:	cmp	r2, r3
   16034:	blt	1603c <__assert_fail@plt+0x50c8>
   16038:	bl	10f5c <abort@plt>
   1603c:	ldr	r3, [pc, #592]	; 16294 <__assert_fail@plt+0x5320>
   16040:	ldr	r2, [r3]
   16044:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16048:	cmp	r2, r3
   1604c:	bgt	16120 <__assert_fail@plt+0x51ac>
   16050:	ldr	r3, [fp, #-16]
   16054:	ldr	r2, [pc, #572]	; 16298 <__assert_fail@plt+0x5324>
   16058:	cmp	r3, r2
   1605c:	moveq	r3, #1
   16060:	movne	r3, #0
   16064:	strb	r3, [fp, #-29]	; 0xffffffe3
   16068:	ldr	r3, [pc, #548]	; 16294 <__assert_fail@plt+0x5320>
   1606c:	ldr	r3, [r3]
   16070:	str	r3, [fp, #-48]	; 0xffffffd0
   16074:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   16078:	cmp	r3, #0
   1607c:	beq	16088 <__assert_fail@plt+0x5114>
   16080:	mov	r0, #0
   16084:	b	1608c <__assert_fail@plt+0x5118>
   16088:	ldr	r0, [fp, #-16]
   1608c:	ldr	r3, [pc, #512]	; 16294 <__assert_fail@plt+0x5320>
   16090:	ldr	r3, [r3]
   16094:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16098:	sub	r3, r2, r3
   1609c:	add	r2, r3, #1
   160a0:	sub	r1, fp, #48	; 0x30
   160a4:	mov	r3, #8
   160a8:	str	r3, [sp]
   160ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   160b0:	bl	17454 <__assert_fail@plt+0x64e0>
   160b4:	str	r0, [fp, #-16]
   160b8:	ldr	r2, [pc, #464]	; 16290 <__assert_fail@plt+0x531c>
   160bc:	ldr	r3, [fp, #-16]
   160c0:	str	r3, [r2]
   160c4:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   160c8:	cmp	r3, #0
   160cc:	beq	160e0 <__assert_fail@plt+0x516c>
   160d0:	ldr	r3, [fp, #-16]
   160d4:	ldr	r2, [pc, #444]	; 16298 <__assert_fail@plt+0x5324>
   160d8:	ldm	r2, {r0, r1}
   160dc:	stm	r3, {r0, r1}
   160e0:	ldr	r3, [pc, #428]	; 16294 <__assert_fail@plt+0x5320>
   160e4:	ldr	r3, [r3]
   160e8:	lsl	r3, r3, #3
   160ec:	ldr	r2, [fp, #-16]
   160f0:	add	r0, r2, r3
   160f4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   160f8:	ldr	r3, [pc, #404]	; 16294 <__assert_fail@plt+0x5320>
   160fc:	ldr	r3, [r3]
   16100:	sub	r3, r2, r3
   16104:	lsl	r3, r3, #3
   16108:	mov	r2, r3
   1610c:	mov	r1, #0
   16110:	bl	10ecc <memset@plt>
   16114:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16118:	ldr	r2, [pc, #372]	; 16294 <__assert_fail@plt+0x5320>
   1611c:	str	r3, [r2]
   16120:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16124:	lsl	r3, r3, #3
   16128:	ldr	r2, [fp, #-16]
   1612c:	add	r3, r2, r3
   16130:	ldr	r3, [r3]
   16134:	str	r3, [fp, #-36]	; 0xffffffdc
   16138:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1613c:	lsl	r3, r3, #3
   16140:	ldr	r2, [fp, #-16]
   16144:	add	r3, r2, r3
   16148:	ldr	r3, [r3, #4]
   1614c:	str	r3, [fp, #-20]	; 0xffffffec
   16150:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16154:	ldr	r3, [r3, #4]
   16158:	orr	r3, r3, #1
   1615c:	str	r3, [fp, #-40]	; 0xffffffd8
   16160:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16164:	ldr	r3, [r3]
   16168:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1616c:	add	r2, r2, #8
   16170:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16174:	ldr	r1, [r1, #40]	; 0x28
   16178:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1617c:	ldr	r0, [r0, #44]	; 0x2c
   16180:	str	r0, [sp, #16]
   16184:	str	r1, [sp, #12]
   16188:	str	r2, [sp, #8]
   1618c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16190:	str	r2, [sp, #4]
   16194:	str	r3, [sp]
   16198:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1619c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   161a0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   161a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   161a8:	bl	145ec <__assert_fail@plt+0x3678>
   161ac:	str	r0, [fp, #-44]	; 0xffffffd4
   161b0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   161b4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   161b8:	cmp	r2, r3
   161bc:	bhi	16270 <__assert_fail@plt+0x52fc>
   161c0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   161c4:	lsl	r3, r3, #3
   161c8:	ldr	r2, [fp, #-16]
   161cc:	add	r3, r2, r3
   161d0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   161d4:	add	r2, r2, #1
   161d8:	str	r2, [fp, #-36]	; 0xffffffdc
   161dc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   161e0:	str	r2, [r3]
   161e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   161e8:	ldr	r2, [pc, #172]	; 1629c <__assert_fail@plt+0x5328>
   161ec:	cmp	r3, r2
   161f0:	beq	161fc <__assert_fail@plt+0x5288>
   161f4:	ldr	r0, [fp, #-20]	; 0xffffffec
   161f8:	bl	13de8 <__assert_fail@plt+0x2e74>
   161fc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16200:	lsl	r3, r3, #3
   16204:	ldr	r2, [fp, #-16]
   16208:	add	r4, r2, r3
   1620c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   16210:	bl	17134 <__assert_fail@plt+0x61c0>
   16214:	mov	r3, r0
   16218:	str	r3, [fp, #-20]	; 0xffffffec
   1621c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16220:	str	r3, [r4, #4]
   16224:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16228:	ldr	r3, [r3]
   1622c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16230:	add	r2, r2, #8
   16234:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16238:	ldr	r1, [r1, #40]	; 0x28
   1623c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16240:	ldr	r0, [r0, #44]	; 0x2c
   16244:	str	r0, [sp, #16]
   16248:	str	r1, [sp, #12]
   1624c:	str	r2, [sp, #8]
   16250:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16254:	str	r2, [sp, #4]
   16258:	str	r3, [sp]
   1625c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16260:	ldr	r2, [fp, #-60]	; 0xffffffc4
   16264:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16268:	ldr	r0, [fp, #-20]	; 0xffffffec
   1626c:	bl	145ec <__assert_fail@plt+0x3678>
   16270:	bl	10eb4 <__errno_location@plt>
   16274:	mov	r2, r0
   16278:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1627c:	str	r3, [r2]
   16280:	ldr	r3, [fp, #-20]	; 0xffffffec
   16284:	mov	r0, r3
   16288:	sub	sp, fp, #8
   1628c:	pop	{r4, fp, pc}
   16290:	andeq	fp, r2, r0, lsl r1
   16294:	andeq	fp, r2, r4, lsl #2
   16298:	andeq	fp, r2, r8, lsl #2
   1629c:	andeq	fp, r2, r8, lsr #3
   162a0:	push	{fp, lr}
   162a4:	add	fp, sp, #4
   162a8:	sub	sp, sp, #8
   162ac:	str	r0, [fp, #-8]
   162b0:	str	r1, [fp, #-12]
   162b4:	ldr	r3, [pc, #28]	; 162d8 <__assert_fail@plt+0x5364>
   162b8:	mvn	r2, #0
   162bc:	ldr	r1, [fp, #-12]
   162c0:	ldr	r0, [fp, #-8]
   162c4:	bl	15fdc <__assert_fail@plt+0x5068>
   162c8:	mov	r3, r0
   162cc:	mov	r0, r3
   162d0:	sub	sp, fp, #4
   162d4:	pop	{fp, pc}
   162d8:	andeq	fp, r2, r8, ror r1
   162dc:	push	{fp, lr}
   162e0:	add	fp, sp, #4
   162e4:	sub	sp, sp, #16
   162e8:	str	r0, [fp, #-8]
   162ec:	str	r1, [fp, #-12]
   162f0:	str	r2, [fp, #-16]
   162f4:	ldr	r3, [pc, #28]	; 16318 <__assert_fail@plt+0x53a4>
   162f8:	ldr	r2, [fp, #-16]
   162fc:	ldr	r1, [fp, #-12]
   16300:	ldr	r0, [fp, #-8]
   16304:	bl	15fdc <__assert_fail@plt+0x5068>
   16308:	mov	r3, r0
   1630c:	mov	r0, r3
   16310:	sub	sp, fp, #4
   16314:	pop	{fp, pc}
   16318:	andeq	fp, r2, r8, ror r1
   1631c:	push	{fp, lr}
   16320:	add	fp, sp, #4
   16324:	sub	sp, sp, #8
   16328:	str	r0, [fp, #-8]
   1632c:	ldr	r1, [fp, #-8]
   16330:	mov	r0, #0
   16334:	bl	162a0 <__assert_fail@plt+0x532c>
   16338:	mov	r3, r0
   1633c:	mov	r0, r3
   16340:	sub	sp, fp, #4
   16344:	pop	{fp, pc}
   16348:	push	{fp, lr}
   1634c:	add	fp, sp, #4
   16350:	sub	sp, sp, #8
   16354:	str	r0, [fp, #-8]
   16358:	str	r1, [fp, #-12]
   1635c:	ldr	r2, [fp, #-12]
   16360:	ldr	r1, [fp, #-8]
   16364:	mov	r0, #0
   16368:	bl	162dc <__assert_fail@plt+0x5368>
   1636c:	mov	r3, r0
   16370:	mov	r0, r3
   16374:	sub	sp, fp, #4
   16378:	pop	{fp, pc}
   1637c:	push	{fp, lr}
   16380:	add	fp, sp, #4
   16384:	sub	sp, sp, #64	; 0x40
   16388:	str	r0, [fp, #-56]	; 0xffffffc8
   1638c:	str	r1, [fp, #-60]	; 0xffffffc4
   16390:	str	r2, [fp, #-64]	; 0xffffffc0
   16394:	sub	r3, fp, #52	; 0x34
   16398:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1639c:	mov	r0, r3
   163a0:	bl	14488 <__assert_fail@plt+0x3514>
   163a4:	sub	r3, fp, #52	; 0x34
   163a8:	mvn	r2, #0
   163ac:	ldr	r1, [fp, #-64]	; 0xffffffc0
   163b0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   163b4:	bl	15fdc <__assert_fail@plt+0x5068>
   163b8:	mov	r3, r0
   163bc:	mov	r0, r3
   163c0:	sub	sp, fp, #4
   163c4:	pop	{fp, pc}
   163c8:	push	{fp, lr}
   163cc:	add	fp, sp, #4
   163d0:	sub	sp, sp, #64	; 0x40
   163d4:	str	r0, [fp, #-56]	; 0xffffffc8
   163d8:	str	r1, [fp, #-60]	; 0xffffffc4
   163dc:	str	r2, [fp, #-64]	; 0xffffffc0
   163e0:	str	r3, [fp, #-68]	; 0xffffffbc
   163e4:	sub	r3, fp, #52	; 0x34
   163e8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   163ec:	mov	r0, r3
   163f0:	bl	14488 <__assert_fail@plt+0x3514>
   163f4:	sub	r3, fp, #52	; 0x34
   163f8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   163fc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16400:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16404:	bl	15fdc <__assert_fail@plt+0x5068>
   16408:	mov	r3, r0
   1640c:	mov	r0, r3
   16410:	sub	sp, fp, #4
   16414:	pop	{fp, pc}
   16418:	push	{fp, lr}
   1641c:	add	fp, sp, #4
   16420:	sub	sp, sp, #8
   16424:	str	r0, [fp, #-8]
   16428:	str	r1, [fp, #-12]
   1642c:	ldr	r2, [fp, #-12]
   16430:	ldr	r1, [fp, #-8]
   16434:	mov	r0, #0
   16438:	bl	1637c <__assert_fail@plt+0x5408>
   1643c:	mov	r3, r0
   16440:	mov	r0, r3
   16444:	sub	sp, fp, #4
   16448:	pop	{fp, pc}
   1644c:	push	{fp, lr}
   16450:	add	fp, sp, #4
   16454:	sub	sp, sp, #16
   16458:	str	r0, [fp, #-8]
   1645c:	str	r1, [fp, #-12]
   16460:	str	r2, [fp, #-16]
   16464:	ldr	r3, [fp, #-16]
   16468:	ldr	r2, [fp, #-12]
   1646c:	ldr	r1, [fp, #-8]
   16470:	mov	r0, #0
   16474:	bl	163c8 <__assert_fail@plt+0x5454>
   16478:	mov	r3, r0
   1647c:	mov	r0, r3
   16480:	sub	sp, fp, #4
   16484:	pop	{fp, pc}
   16488:	push	{fp, lr}
   1648c:	add	fp, sp, #4
   16490:	sub	sp, sp, #64	; 0x40
   16494:	str	r0, [fp, #-56]	; 0xffffffc8
   16498:	str	r1, [fp, #-60]	; 0xffffffc4
   1649c:	mov	r3, r2
   164a0:	strb	r3, [fp, #-61]	; 0xffffffc3
   164a4:	ldr	r3, [pc, #84]	; 16500 <__assert_fail@plt+0x558c>
   164a8:	sub	ip, fp, #52	; 0x34
   164ac:	mov	lr, r3
   164b0:	ldm	lr!, {r0, r1, r2, r3}
   164b4:	stmia	ip!, {r0, r1, r2, r3}
   164b8:	ldm	lr!, {r0, r1, r2, r3}
   164bc:	stmia	ip!, {r0, r1, r2, r3}
   164c0:	ldm	lr, {r0, r1, r2, r3}
   164c4:	stm	ip, {r0, r1, r2, r3}
   164c8:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   164cc:	sub	r3, fp, #52	; 0x34
   164d0:	mov	r2, #1
   164d4:	mov	r0, r3
   164d8:	bl	142f4 <__assert_fail@plt+0x3380>
   164dc:	sub	r3, fp, #52	; 0x34
   164e0:	ldr	r2, [fp, #-60]	; 0xffffffc4
   164e4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   164e8:	mov	r0, #0
   164ec:	bl	15fdc <__assert_fail@plt+0x5068>
   164f0:	mov	r3, r0
   164f4:	mov	r0, r3
   164f8:	sub	sp, fp, #4
   164fc:	pop	{fp, pc}
   16500:	andeq	fp, r2, r8, ror r1
   16504:	push	{fp, lr}
   16508:	add	fp, sp, #4
   1650c:	sub	sp, sp, #8
   16510:	str	r0, [fp, #-8]
   16514:	mov	r3, r1
   16518:	strb	r3, [fp, #-9]
   1651c:	ldrb	r3, [fp, #-9]
   16520:	mov	r2, r3
   16524:	mvn	r1, #0
   16528:	ldr	r0, [fp, #-8]
   1652c:	bl	16488 <__assert_fail@plt+0x5514>
   16530:	mov	r3, r0
   16534:	mov	r0, r3
   16538:	sub	sp, fp, #4
   1653c:	pop	{fp, pc}
   16540:	push	{fp, lr}
   16544:	add	fp, sp, #4
   16548:	sub	sp, sp, #8
   1654c:	str	r0, [fp, #-8]
   16550:	mov	r1, #58	; 0x3a
   16554:	ldr	r0, [fp, #-8]
   16558:	bl	16504 <__assert_fail@plt+0x5590>
   1655c:	mov	r3, r0
   16560:	mov	r0, r3
   16564:	sub	sp, fp, #4
   16568:	pop	{fp, pc}
   1656c:	push	{fp, lr}
   16570:	add	fp, sp, #4
   16574:	sub	sp, sp, #8
   16578:	str	r0, [fp, #-8]
   1657c:	str	r1, [fp, #-12]
   16580:	mov	r2, #58	; 0x3a
   16584:	ldr	r1, [fp, #-12]
   16588:	ldr	r0, [fp, #-8]
   1658c:	bl	16488 <__assert_fail@plt+0x5514>
   16590:	mov	r3, r0
   16594:	mov	r0, r3
   16598:	sub	sp, fp, #4
   1659c:	pop	{fp, pc}
   165a0:	push	{fp, lr}
   165a4:	add	fp, sp, #4
   165a8:	sub	sp, sp, #112	; 0x70
   165ac:	str	r0, [fp, #-56]	; 0xffffffc8
   165b0:	str	r1, [fp, #-60]	; 0xffffffc4
   165b4:	str	r2, [fp, #-64]	; 0xffffffc0
   165b8:	sub	r3, fp, #116	; 0x74
   165bc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   165c0:	mov	r0, r3
   165c4:	bl	14488 <__assert_fail@plt+0x3514>
   165c8:	sub	ip, fp, #52	; 0x34
   165cc:	sub	lr, fp, #116	; 0x74
   165d0:	ldm	lr!, {r0, r1, r2, r3}
   165d4:	stmia	ip!, {r0, r1, r2, r3}
   165d8:	ldm	lr!, {r0, r1, r2, r3}
   165dc:	stmia	ip!, {r0, r1, r2, r3}
   165e0:	ldm	lr, {r0, r1, r2, r3}
   165e4:	stm	ip, {r0, r1, r2, r3}
   165e8:	sub	r3, fp, #52	; 0x34
   165ec:	mov	r2, #1
   165f0:	mov	r1, #58	; 0x3a
   165f4:	mov	r0, r3
   165f8:	bl	142f4 <__assert_fail@plt+0x3380>
   165fc:	sub	r3, fp, #52	; 0x34
   16600:	mvn	r2, #0
   16604:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16608:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1660c:	bl	15fdc <__assert_fail@plt+0x5068>
   16610:	mov	r3, r0
   16614:	mov	r0, r3
   16618:	sub	sp, fp, #4
   1661c:	pop	{fp, pc}
   16620:	push	{fp, lr}
   16624:	add	fp, sp, #4
   16628:	sub	sp, sp, #24
   1662c:	str	r0, [fp, #-8]
   16630:	str	r1, [fp, #-12]
   16634:	str	r2, [fp, #-16]
   16638:	str	r3, [fp, #-20]	; 0xffffffec
   1663c:	mvn	r3, #0
   16640:	str	r3, [sp]
   16644:	ldr	r3, [fp, #-20]	; 0xffffffec
   16648:	ldr	r2, [fp, #-16]
   1664c:	ldr	r1, [fp, #-12]
   16650:	ldr	r0, [fp, #-8]
   16654:	bl	16668 <__assert_fail@plt+0x56f4>
   16658:	mov	r3, r0
   1665c:	mov	r0, r3
   16660:	sub	sp, fp, #4
   16664:	pop	{fp, pc}
   16668:	push	{fp, lr}
   1666c:	add	fp, sp, #4
   16670:	sub	sp, sp, #64	; 0x40
   16674:	str	r0, [fp, #-56]	; 0xffffffc8
   16678:	str	r1, [fp, #-60]	; 0xffffffc4
   1667c:	str	r2, [fp, #-64]	; 0xffffffc0
   16680:	str	r3, [fp, #-68]	; 0xffffffbc
   16684:	ldr	r3, [pc, #84]	; 166e0 <__assert_fail@plt+0x576c>
   16688:	sub	ip, fp, #52	; 0x34
   1668c:	mov	lr, r3
   16690:	ldm	lr!, {r0, r1, r2, r3}
   16694:	stmia	ip!, {r0, r1, r2, r3}
   16698:	ldm	lr!, {r0, r1, r2, r3}
   1669c:	stmia	ip!, {r0, r1, r2, r3}
   166a0:	ldm	lr, {r0, r1, r2, r3}
   166a4:	stm	ip, {r0, r1, r2, r3}
   166a8:	sub	r3, fp, #52	; 0x34
   166ac:	ldr	r2, [fp, #-64]	; 0xffffffc0
   166b0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   166b4:	mov	r0, r3
   166b8:	bl	1440c <__assert_fail@plt+0x3498>
   166bc:	sub	r3, fp, #52	; 0x34
   166c0:	ldr	r2, [fp, #4]
   166c4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   166c8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   166cc:	bl	15fdc <__assert_fail@plt+0x5068>
   166d0:	mov	r3, r0
   166d4:	mov	r0, r3
   166d8:	sub	sp, fp, #4
   166dc:	pop	{fp, pc}
   166e0:	andeq	fp, r2, r8, ror r1
   166e4:	push	{fp, lr}
   166e8:	add	fp, sp, #4
   166ec:	sub	sp, sp, #16
   166f0:	str	r0, [fp, #-8]
   166f4:	str	r1, [fp, #-12]
   166f8:	str	r2, [fp, #-16]
   166fc:	ldr	r3, [fp, #-16]
   16700:	ldr	r2, [fp, #-12]
   16704:	ldr	r1, [fp, #-8]
   16708:	mov	r0, #0
   1670c:	bl	16620 <__assert_fail@plt+0x56ac>
   16710:	mov	r3, r0
   16714:	mov	r0, r3
   16718:	sub	sp, fp, #4
   1671c:	pop	{fp, pc}
   16720:	push	{fp, lr}
   16724:	add	fp, sp, #4
   16728:	sub	sp, sp, #24
   1672c:	str	r0, [fp, #-8]
   16730:	str	r1, [fp, #-12]
   16734:	str	r2, [fp, #-16]
   16738:	str	r3, [fp, #-20]	; 0xffffffec
   1673c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16740:	str	r3, [sp]
   16744:	ldr	r3, [fp, #-16]
   16748:	ldr	r2, [fp, #-12]
   1674c:	ldr	r1, [fp, #-8]
   16750:	mov	r0, #0
   16754:	bl	16668 <__assert_fail@plt+0x56f4>
   16758:	mov	r3, r0
   1675c:	mov	r0, r3
   16760:	sub	sp, fp, #4
   16764:	pop	{fp, pc}
   16768:	push	{fp, lr}
   1676c:	add	fp, sp, #4
   16770:	sub	sp, sp, #16
   16774:	str	r0, [fp, #-8]
   16778:	str	r1, [fp, #-12]
   1677c:	str	r2, [fp, #-16]
   16780:	ldr	r3, [pc, #28]	; 167a4 <__assert_fail@plt+0x5830>
   16784:	ldr	r2, [fp, #-16]
   16788:	ldr	r1, [fp, #-12]
   1678c:	ldr	r0, [fp, #-8]
   16790:	bl	15fdc <__assert_fail@plt+0x5068>
   16794:	mov	r3, r0
   16798:	mov	r0, r3
   1679c:	sub	sp, fp, #4
   167a0:	pop	{fp, pc}
   167a4:	andeq	fp, r2, r4, lsl r1
   167a8:	push	{fp, lr}
   167ac:	add	fp, sp, #4
   167b0:	sub	sp, sp, #8
   167b4:	str	r0, [fp, #-8]
   167b8:	str	r1, [fp, #-12]
   167bc:	ldr	r2, [fp, #-12]
   167c0:	ldr	r1, [fp, #-8]
   167c4:	mov	r0, #0
   167c8:	bl	16768 <__assert_fail@plt+0x57f4>
   167cc:	mov	r3, r0
   167d0:	mov	r0, r3
   167d4:	sub	sp, fp, #4
   167d8:	pop	{fp, pc}
   167dc:	push	{fp, lr}
   167e0:	add	fp, sp, #4
   167e4:	sub	sp, sp, #8
   167e8:	str	r0, [fp, #-8]
   167ec:	str	r1, [fp, #-12]
   167f0:	mvn	r2, #0
   167f4:	ldr	r1, [fp, #-12]
   167f8:	ldr	r0, [fp, #-8]
   167fc:	bl	16768 <__assert_fail@plt+0x57f4>
   16800:	mov	r3, r0
   16804:	mov	r0, r3
   16808:	sub	sp, fp, #4
   1680c:	pop	{fp, pc}
   16810:	push	{fp, lr}
   16814:	add	fp, sp, #4
   16818:	sub	sp, sp, #8
   1681c:	str	r0, [fp, #-8]
   16820:	ldr	r1, [fp, #-8]
   16824:	mov	r0, #0
   16828:	bl	167dc <__assert_fail@plt+0x5868>
   1682c:	mov	r3, r0
   16830:	mov	r0, r3
   16834:	sub	sp, fp, #4
   16838:	pop	{fp, pc}
   1683c:	push	{fp, lr}
   16840:	add	fp, sp, #4
   16844:	sub	sp, sp, #24
   16848:	str	r0, [fp, #-16]
   1684c:	str	r1, [fp, #-20]	; 0xffffffec
   16850:	str	r2, [fp, #-24]	; 0xffffffe8
   16854:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16858:	ldr	r1, [fp, #-20]	; 0xffffffec
   1685c:	ldr	r0, [fp, #-16]
   16860:	bl	10d1c <read@plt>
   16864:	str	r0, [fp, #-8]
   16868:	ldr	r3, [fp, #-8]
   1686c:	cmp	r3, #0
   16870:	blt	1687c <__assert_fail@plt+0x5908>
   16874:	ldr	r3, [fp, #-8]
   16878:	b	168d0 <__assert_fail@plt+0x595c>
   1687c:	bl	10eb4 <__errno_location@plt>
   16880:	mov	r3, r0
   16884:	ldr	r3, [r3]
   16888:	cmp	r3, #4
   1688c:	beq	168c8 <__assert_fail@plt+0x5954>
   16890:	bl	10eb4 <__errno_location@plt>
   16894:	mov	r3, r0
   16898:	ldr	r3, [r3]
   1689c:	cmp	r3, #22
   168a0:	bne	168c0 <__assert_fail@plt+0x594c>
   168a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168a8:	ldr	r2, [pc, #44]	; 168dc <__assert_fail@plt+0x5968>
   168ac:	cmp	r3, r2
   168b0:	bls	168c0 <__assert_fail@plt+0x594c>
   168b4:	ldr	r3, [pc, #32]	; 168dc <__assert_fail@plt+0x5968>
   168b8:	str	r3, [fp, #-24]	; 0xffffffe8
   168bc:	b	168cc <__assert_fail@plt+0x5958>
   168c0:	ldr	r3, [fp, #-8]
   168c4:	b	168d0 <__assert_fail@plt+0x595c>
   168c8:	nop			; (mov r0, r0)
   168cc:	b	16854 <__assert_fail@plt+0x58e0>
   168d0:	mov	r0, r3
   168d4:	sub	sp, fp, #4
   168d8:	pop	{fp, pc}
   168dc:	svcvc	0x00f00000	; IMB
   168e0:	push	{r4, r5, r6, r7, fp, lr}
   168e4:	add	fp, sp, #20
   168e8:	sub	sp, sp, #48	; 0x30
   168ec:	str	r0, [fp, #-24]	; 0xffffffe8
   168f0:	str	r1, [fp, #-28]	; 0xffffffe4
   168f4:	str	r2, [fp, #-32]	; 0xffffffe0
   168f8:	str	r3, [fp, #-36]	; 0xffffffdc
   168fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16900:	cmp	r3, #0
   16904:	beq	16928 <__assert_fail@plt+0x59b4>
   16908:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1690c:	str	r3, [sp]
   16910:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16914:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16918:	ldr	r1, [pc, #1260]	; 16e0c <__assert_fail@plt+0x5e98>
   1691c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16920:	bl	10ea8 <fprintf@plt>
   16924:	b	1693c <__assert_fail@plt+0x59c8>
   16928:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1692c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16930:	ldr	r1, [pc, #1240]	; 16e10 <__assert_fail@plt+0x5e9c>
   16934:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16938:	bl	10ea8 <fprintf@plt>
   1693c:	ldr	r0, [pc, #1232]	; 16e14 <__assert_fail@plt+0x5ea0>
   16940:	bl	10e78 <gettext@plt>
   16944:	mov	r2, r0
   16948:	ldr	r3, [pc, #1224]	; 16e18 <__assert_fail@plt+0x5ea4>
   1694c:	ldr	r1, [pc, #1224]	; 16e1c <__assert_fail@plt+0x5ea8>
   16950:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16954:	bl	10ea8 <fprintf@plt>
   16958:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1695c:	mov	r0, #10
   16960:	bl	10d7c <fputc_unlocked@plt>
   16964:	ldr	r0, [pc, #1204]	; 16e20 <__assert_fail@plt+0x5eac>
   16968:	bl	10e78 <gettext@plt>
   1696c:	mov	r3, r0
   16970:	ldr	r2, [pc, #1196]	; 16e24 <__assert_fail@plt+0x5eb0>
   16974:	mov	r1, r3
   16978:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1697c:	bl	10ea8 <fprintf@plt>
   16980:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16984:	mov	r0, #10
   16988:	bl	10d7c <fputc_unlocked@plt>
   1698c:	ldr	r3, [fp, #8]
   16990:	cmp	r3, #9
   16994:	ldrls	pc, [pc, r3, lsl #2]
   16998:	b	16d54 <__assert_fail@plt+0x5de0>
   1699c:	strdeq	r6, [r1], -ip
   169a0:	andeq	r6, r1, r4, asr #19
   169a4:	andeq	r6, r1, r8, ror #19
   169a8:	andeq	r6, r1, r4, lsl sl
   169ac:	andeq	r6, r1, r4, asr sl
   169b0:	andeq	r6, r1, ip, lsr #21
   169b4:	andeq	r6, r1, r4, lsl fp
   169b8:	andeq	r6, r1, ip, lsl #23
   169bc:	andeq	r6, r1, r4, lsl ip
   169c0:	andeq	r6, r1, ip, lsr #25
   169c4:	ldr	r0, [pc, #1116]	; 16e28 <__assert_fail@plt+0x5eb4>
   169c8:	bl	10e78 <gettext@plt>
   169cc:	mov	r1, r0
   169d0:	ldr	r3, [fp, #4]
   169d4:	ldr	r3, [r3]
   169d8:	mov	r2, r3
   169dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   169e0:	bl	10ea8 <fprintf@plt>
   169e4:	b	16e00 <__assert_fail@plt+0x5e8c>
   169e8:	ldr	r0, [pc, #1084]	; 16e2c <__assert_fail@plt+0x5eb8>
   169ec:	bl	10e78 <gettext@plt>
   169f0:	mov	r1, r0
   169f4:	ldr	r3, [fp, #4]
   169f8:	ldr	r2, [r3]
   169fc:	ldr	r3, [fp, #4]
   16a00:	add	r3, r3, #4
   16a04:	ldr	r3, [r3]
   16a08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16a0c:	bl	10ea8 <fprintf@plt>
   16a10:	b	16e00 <__assert_fail@plt+0x5e8c>
   16a14:	ldr	r0, [pc, #1044]	; 16e30 <__assert_fail@plt+0x5ebc>
   16a18:	bl	10e78 <gettext@plt>
   16a1c:	ldr	r3, [fp, #4]
   16a20:	ldr	r2, [r3]
   16a24:	ldr	r3, [fp, #4]
   16a28:	add	r3, r3, #4
   16a2c:	ldr	r1, [r3]
   16a30:	ldr	r3, [fp, #4]
   16a34:	add	r3, r3, #8
   16a38:	ldr	r3, [r3]
   16a3c:	str	r3, [sp]
   16a40:	mov	r3, r1
   16a44:	mov	r1, r0
   16a48:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16a4c:	bl	10ea8 <fprintf@plt>
   16a50:	b	16e00 <__assert_fail@plt+0x5e8c>
   16a54:	ldr	r0, [pc, #984]	; 16e34 <__assert_fail@plt+0x5ec0>
   16a58:	bl	10e78 <gettext@plt>
   16a5c:	mov	ip, r0
   16a60:	ldr	r3, [fp, #4]
   16a64:	ldr	r1, [r3]
   16a68:	ldr	r3, [fp, #4]
   16a6c:	add	r3, r3, #4
   16a70:	ldr	r0, [r3]
   16a74:	ldr	r3, [fp, #4]
   16a78:	add	r3, r3, #8
   16a7c:	ldr	r3, [r3]
   16a80:	ldr	r2, [fp, #4]
   16a84:	add	r2, r2, #12
   16a88:	ldr	r2, [r2]
   16a8c:	str	r2, [sp, #4]
   16a90:	str	r3, [sp]
   16a94:	mov	r3, r0
   16a98:	mov	r2, r1
   16a9c:	mov	r1, ip
   16aa0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16aa4:	bl	10ea8 <fprintf@plt>
   16aa8:	b	16e00 <__assert_fail@plt+0x5e8c>
   16aac:	ldr	r0, [pc, #900]	; 16e38 <__assert_fail@plt+0x5ec4>
   16ab0:	bl	10e78 <gettext@plt>
   16ab4:	mov	lr, r0
   16ab8:	ldr	r3, [fp, #4]
   16abc:	ldr	r0, [r3]
   16ac0:	ldr	r3, [fp, #4]
   16ac4:	add	r3, r3, #4
   16ac8:	ldr	ip, [r3]
   16acc:	ldr	r3, [fp, #4]
   16ad0:	add	r3, r3, #8
   16ad4:	ldr	r3, [r3]
   16ad8:	ldr	r2, [fp, #4]
   16adc:	add	r2, r2, #12
   16ae0:	ldr	r2, [r2]
   16ae4:	ldr	r1, [fp, #4]
   16ae8:	add	r1, r1, #16
   16aec:	ldr	r1, [r1]
   16af0:	str	r1, [sp, #8]
   16af4:	str	r2, [sp, #4]
   16af8:	str	r3, [sp]
   16afc:	mov	r3, ip
   16b00:	mov	r2, r0
   16b04:	mov	r1, lr
   16b08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16b0c:	bl	10ea8 <fprintf@plt>
   16b10:	b	16e00 <__assert_fail@plt+0x5e8c>
   16b14:	ldr	r0, [pc, #800]	; 16e3c <__assert_fail@plt+0x5ec8>
   16b18:	bl	10e78 <gettext@plt>
   16b1c:	mov	r4, r0
   16b20:	ldr	r3, [fp, #4]
   16b24:	ldr	ip, [r3]
   16b28:	ldr	r3, [fp, #4]
   16b2c:	add	r3, r3, #4
   16b30:	ldr	lr, [r3]
   16b34:	ldr	r3, [fp, #4]
   16b38:	add	r3, r3, #8
   16b3c:	ldr	r3, [r3]
   16b40:	ldr	r2, [fp, #4]
   16b44:	add	r2, r2, #12
   16b48:	ldr	r2, [r2]
   16b4c:	ldr	r1, [fp, #4]
   16b50:	add	r1, r1, #16
   16b54:	ldr	r1, [r1]
   16b58:	ldr	r0, [fp, #4]
   16b5c:	add	r0, r0, #20
   16b60:	ldr	r0, [r0]
   16b64:	str	r0, [sp, #12]
   16b68:	str	r1, [sp, #8]
   16b6c:	str	r2, [sp, #4]
   16b70:	str	r3, [sp]
   16b74:	mov	r3, lr
   16b78:	mov	r2, ip
   16b7c:	mov	r1, r4
   16b80:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16b84:	bl	10ea8 <fprintf@plt>
   16b88:	b	16e00 <__assert_fail@plt+0x5e8c>
   16b8c:	ldr	r0, [pc, #684]	; 16e40 <__assert_fail@plt+0x5ecc>
   16b90:	bl	10e78 <gettext@plt>
   16b94:	mov	r5, r0
   16b98:	ldr	r3, [fp, #4]
   16b9c:	ldr	lr, [r3]
   16ba0:	ldr	r3, [fp, #4]
   16ba4:	add	r3, r3, #4
   16ba8:	ldr	r4, [r3]
   16bac:	ldr	r3, [fp, #4]
   16bb0:	add	r3, r3, #8
   16bb4:	ldr	r3, [r3]
   16bb8:	ldr	r2, [fp, #4]
   16bbc:	add	r2, r2, #12
   16bc0:	ldr	r2, [r2]
   16bc4:	ldr	r1, [fp, #4]
   16bc8:	add	r1, r1, #16
   16bcc:	ldr	r1, [r1]
   16bd0:	ldr	r0, [fp, #4]
   16bd4:	add	r0, r0, #20
   16bd8:	ldr	r0, [r0]
   16bdc:	ldr	ip, [fp, #4]
   16be0:	add	ip, ip, #24
   16be4:	ldr	ip, [ip]
   16be8:	str	ip, [sp, #16]
   16bec:	str	r0, [sp, #12]
   16bf0:	str	r1, [sp, #8]
   16bf4:	str	r2, [sp, #4]
   16bf8:	str	r3, [sp]
   16bfc:	mov	r3, r4
   16c00:	mov	r2, lr
   16c04:	mov	r1, r5
   16c08:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16c0c:	bl	10ea8 <fprintf@plt>
   16c10:	b	16e00 <__assert_fail@plt+0x5e8c>
   16c14:	ldr	r0, [pc, #552]	; 16e44 <__assert_fail@plt+0x5ed0>
   16c18:	bl	10e78 <gettext@plt>
   16c1c:	mov	r6, r0
   16c20:	ldr	r3, [fp, #4]
   16c24:	ldr	r4, [r3]
   16c28:	ldr	r3, [fp, #4]
   16c2c:	add	r3, r3, #4
   16c30:	ldr	r5, [r3]
   16c34:	ldr	r3, [fp, #4]
   16c38:	add	r3, r3, #8
   16c3c:	ldr	r3, [r3]
   16c40:	ldr	r2, [fp, #4]
   16c44:	add	r2, r2, #12
   16c48:	ldr	r2, [r2]
   16c4c:	ldr	r1, [fp, #4]
   16c50:	add	r1, r1, #16
   16c54:	ldr	r1, [r1]
   16c58:	ldr	r0, [fp, #4]
   16c5c:	add	r0, r0, #20
   16c60:	ldr	r0, [r0]
   16c64:	ldr	ip, [fp, #4]
   16c68:	add	ip, ip, #24
   16c6c:	ldr	ip, [ip]
   16c70:	ldr	lr, [fp, #4]
   16c74:	add	lr, lr, #28
   16c78:	ldr	lr, [lr]
   16c7c:	str	lr, [sp, #20]
   16c80:	str	ip, [sp, #16]
   16c84:	str	r0, [sp, #12]
   16c88:	str	r1, [sp, #8]
   16c8c:	str	r2, [sp, #4]
   16c90:	str	r3, [sp]
   16c94:	mov	r3, r5
   16c98:	mov	r2, r4
   16c9c:	mov	r1, r6
   16ca0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ca4:	bl	10ea8 <fprintf@plt>
   16ca8:	b	16e00 <__assert_fail@plt+0x5e8c>
   16cac:	ldr	r0, [pc, #404]	; 16e48 <__assert_fail@plt+0x5ed4>
   16cb0:	bl	10e78 <gettext@plt>
   16cb4:	mov	r7, r0
   16cb8:	ldr	r3, [fp, #4]
   16cbc:	ldr	r5, [r3]
   16cc0:	ldr	r3, [fp, #4]
   16cc4:	add	r3, r3, #4
   16cc8:	ldr	r6, [r3]
   16ccc:	ldr	r3, [fp, #4]
   16cd0:	add	r3, r3, #8
   16cd4:	ldr	r3, [r3]
   16cd8:	ldr	r2, [fp, #4]
   16cdc:	add	r2, r2, #12
   16ce0:	ldr	r2, [r2]
   16ce4:	ldr	r1, [fp, #4]
   16ce8:	add	r1, r1, #16
   16cec:	ldr	r1, [r1]
   16cf0:	ldr	r0, [fp, #4]
   16cf4:	add	r0, r0, #20
   16cf8:	ldr	r0, [r0]
   16cfc:	ldr	ip, [fp, #4]
   16d00:	add	ip, ip, #24
   16d04:	ldr	ip, [ip]
   16d08:	ldr	lr, [fp, #4]
   16d0c:	add	lr, lr, #28
   16d10:	ldr	lr, [lr]
   16d14:	ldr	r4, [fp, #4]
   16d18:	add	r4, r4, #32
   16d1c:	ldr	r4, [r4]
   16d20:	str	r4, [sp, #24]
   16d24:	str	lr, [sp, #20]
   16d28:	str	ip, [sp, #16]
   16d2c:	str	r0, [sp, #12]
   16d30:	str	r1, [sp, #8]
   16d34:	str	r2, [sp, #4]
   16d38:	str	r3, [sp]
   16d3c:	mov	r3, r6
   16d40:	mov	r2, r5
   16d44:	mov	r1, r7
   16d48:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16d4c:	bl	10ea8 <fprintf@plt>
   16d50:	b	16e00 <__assert_fail@plt+0x5e8c>
   16d54:	ldr	r0, [pc, #240]	; 16e4c <__assert_fail@plt+0x5ed8>
   16d58:	bl	10e78 <gettext@plt>
   16d5c:	mov	r7, r0
   16d60:	ldr	r3, [fp, #4]
   16d64:	ldr	r5, [r3]
   16d68:	ldr	r3, [fp, #4]
   16d6c:	add	r3, r3, #4
   16d70:	ldr	r6, [r3]
   16d74:	ldr	r3, [fp, #4]
   16d78:	add	r3, r3, #8
   16d7c:	ldr	r3, [r3]
   16d80:	ldr	r2, [fp, #4]
   16d84:	add	r2, r2, #12
   16d88:	ldr	r2, [r2]
   16d8c:	ldr	r1, [fp, #4]
   16d90:	add	r1, r1, #16
   16d94:	ldr	r1, [r1]
   16d98:	ldr	r0, [fp, #4]
   16d9c:	add	r0, r0, #20
   16da0:	ldr	r0, [r0]
   16da4:	ldr	ip, [fp, #4]
   16da8:	add	ip, ip, #24
   16dac:	ldr	ip, [ip]
   16db0:	ldr	lr, [fp, #4]
   16db4:	add	lr, lr, #28
   16db8:	ldr	lr, [lr]
   16dbc:	ldr	r4, [fp, #4]
   16dc0:	add	r4, r4, #32
   16dc4:	ldr	r4, [r4]
   16dc8:	str	r4, [sp, #24]
   16dcc:	str	lr, [sp, #20]
   16dd0:	str	ip, [sp, #16]
   16dd4:	str	r0, [sp, #12]
   16dd8:	str	r1, [sp, #8]
   16ddc:	str	r2, [sp, #4]
   16de0:	str	r3, [sp]
   16de4:	mov	r3, r6
   16de8:	mov	r2, r5
   16dec:	mov	r1, r7
   16df0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16df4:	bl	10ea8 <fprintf@plt>
   16df8:	b	16e00 <__assert_fail@plt+0x5e8c>
   16dfc:	nop			; (mov r0, r0)
   16e00:	nop			; (mov r0, r0)
   16e04:	sub	sp, fp, #20
   16e08:	pop	{r4, r5, r6, r7, fp, pc}
   16e0c:	andeq	sl, r1, ip, asr #17
   16e10:	ldrdeq	sl, [r1], -r8
   16e14:	andeq	sl, r1, r0, ror #17
   16e18:	andeq	r0, r0, r6, ror #15
   16e1c:	strdeq	sl, [r1], -r0
   16e20:	andeq	sl, r1, r4, ror #17
   16e24:	muleq	r1, r0, r9
   16e28:			; <UNDEFINED> instruction: 0x0001a9b4
   16e2c:	andeq	sl, r1, r4, asr #19
   16e30:	ldrdeq	sl, [r1], -ip
   16e34:	strdeq	sl, [r1], -r8
   16e38:	andeq	sl, r1, r8, lsl sl
   16e3c:	andeq	sl, r1, ip, lsr sl
   16e40:	andeq	sl, r1, r4, ror #20
   16e44:	muleq	r1, r0, sl
   16e48:	andeq	sl, r1, r0, asr #21
   16e4c:	strdeq	sl, [r1], -r4
   16e50:	push	{fp, lr}
   16e54:	add	fp, sp, #4
   16e58:	sub	sp, sp, #32
   16e5c:	str	r0, [fp, #-16]
   16e60:	str	r1, [fp, #-20]	; 0xffffffec
   16e64:	str	r2, [fp, #-24]	; 0xffffffe8
   16e68:	str	r3, [fp, #-28]	; 0xffffffe4
   16e6c:	mov	r3, #0
   16e70:	str	r3, [fp, #-8]
   16e74:	b	16e84 <__assert_fail@plt+0x5f10>
   16e78:	ldr	r3, [fp, #-8]
   16e7c:	add	r3, r3, #1
   16e80:	str	r3, [fp, #-8]
   16e84:	ldr	r3, [fp, #-8]
   16e88:	lsl	r3, r3, #2
   16e8c:	ldr	r2, [fp, #4]
   16e90:	add	r3, r2, r3
   16e94:	ldr	r3, [r3]
   16e98:	cmp	r3, #0
   16e9c:	bne	16e78 <__assert_fail@plt+0x5f04>
   16ea0:	ldr	r3, [fp, #-8]
   16ea4:	str	r3, [sp, #4]
   16ea8:	ldr	r3, [fp, #4]
   16eac:	str	r3, [sp]
   16eb0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16eb4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16eb8:	ldr	r1, [fp, #-20]	; 0xffffffec
   16ebc:	ldr	r0, [fp, #-16]
   16ec0:	bl	168e0 <__assert_fail@plt+0x596c>
   16ec4:	nop			; (mov r0, r0)
   16ec8:	sub	sp, fp, #4
   16ecc:	pop	{fp, pc}
   16ed0:	push	{fp, lr}
   16ed4:	add	fp, sp, #4
   16ed8:	sub	sp, sp, #72	; 0x48
   16edc:	str	r0, [fp, #-56]	; 0xffffffc8
   16ee0:	str	r1, [fp, #-60]	; 0xffffffc4
   16ee4:	str	r2, [fp, #-64]	; 0xffffffc0
   16ee8:	str	r3, [fp, #-68]	; 0xffffffbc
   16eec:	mov	r3, #0
   16ef0:	str	r3, [fp, #-8]
   16ef4:	b	16f04 <__assert_fail@plt+0x5f90>
   16ef8:	ldr	r3, [fp, #-8]
   16efc:	add	r3, r3, #1
   16f00:	str	r3, [fp, #-8]
   16f04:	ldr	r3, [fp, #-8]
   16f08:	cmp	r3, #9
   16f0c:	bhi	16f50 <__assert_fail@plt+0x5fdc>
   16f10:	ldr	r3, [fp, #4]
   16f14:	add	r2, r3, #4
   16f18:	str	r2, [fp, #4]
   16f1c:	ldr	r2, [r3]
   16f20:	ldr	r3, [fp, #-8]
   16f24:	lsl	r3, r3, #2
   16f28:	sub	r1, fp, #4
   16f2c:	add	r3, r1, r3
   16f30:	str	r2, [r3, #-44]	; 0xffffffd4
   16f34:	ldr	r3, [fp, #-8]
   16f38:	lsl	r3, r3, #2
   16f3c:	sub	r2, fp, #4
   16f40:	add	r3, r2, r3
   16f44:	ldr	r3, [r3, #-44]	; 0xffffffd4
   16f48:	cmp	r3, #0
   16f4c:	bne	16ef8 <__assert_fail@plt+0x5f84>
   16f50:	ldr	r3, [fp, #-8]
   16f54:	str	r3, [sp, #4]
   16f58:	sub	r3, fp, #48	; 0x30
   16f5c:	str	r3, [sp]
   16f60:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16f64:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16f68:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16f6c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16f70:	bl	168e0 <__assert_fail@plt+0x596c>
   16f74:	nop			; (mov r0, r0)
   16f78:	sub	sp, fp, #4
   16f7c:	pop	{fp, pc}
   16f80:	push	{r3}		; (str r3, [sp, #-4]!)
   16f84:	push	{fp, lr}
   16f88:	add	fp, sp, #4
   16f8c:	sub	sp, sp, #36	; 0x24
   16f90:	str	r0, [fp, #-20]	; 0xffffffec
   16f94:	str	r1, [fp, #-24]	; 0xffffffe8
   16f98:	str	r2, [fp, #-28]	; 0xffffffe4
   16f9c:	add	r3, fp, #8
   16fa0:	str	r3, [fp, #-12]
   16fa4:	ldr	r3, [fp, #-12]
   16fa8:	str	r3, [sp]
   16fac:	ldr	r3, [fp, #4]
   16fb0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16fb4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16fb8:	ldr	r0, [fp, #-20]	; 0xffffffec
   16fbc:	bl	16ed0 <__assert_fail@plt+0x5f5c>
   16fc0:	nop			; (mov r0, r0)
   16fc4:	sub	sp, fp, #4
   16fc8:	pop	{fp, lr}
   16fcc:	add	sp, sp, #4
   16fd0:	bx	lr
   16fd4:	push	{fp, lr}
   16fd8:	add	fp, sp, #4
   16fdc:	ldr	r3, [pc, #96]	; 17044 <__assert_fail@plt+0x60d0>
   16fe0:	ldr	r3, [r3]
   16fe4:	mov	r1, r3
   16fe8:	mov	r0, #10
   16fec:	bl	10d7c <fputc_unlocked@plt>
   16ff0:	ldr	r0, [pc, #80]	; 17048 <__assert_fail@plt+0x60d4>
   16ff4:	bl	10e78 <gettext@plt>
   16ff8:	mov	r3, r0
   16ffc:	ldr	r1, [pc, #72]	; 1704c <__assert_fail@plt+0x60d8>
   17000:	mov	r0, r3
   17004:	bl	10d10 <printf@plt>
   17008:	ldr	r0, [pc, #64]	; 17050 <__assert_fail@plt+0x60dc>
   1700c:	bl	10e78 <gettext@plt>
   17010:	mov	r3, r0
   17014:	ldr	r2, [pc, #56]	; 17054 <__assert_fail@plt+0x60e0>
   17018:	ldr	r1, [pc, #56]	; 17058 <__assert_fail@plt+0x60e4>
   1701c:	mov	r0, r3
   17020:	bl	10d10 <printf@plt>
   17024:	ldr	r0, [pc, #48]	; 1705c <__assert_fail@plt+0x60e8>
   17028:	bl	10e78 <gettext@plt>
   1702c:	mov	r3, r0
   17030:	ldr	r1, [pc, #40]	; 17060 <__assert_fail@plt+0x60ec>
   17034:	mov	r0, r3
   17038:	bl	10d10 <printf@plt>
   1703c:	nop			; (mov r0, r0)
   17040:	pop	{fp, pc}
   17044:	andeq	fp, r2, ip, asr r1
   17048:	andeq	sl, r1, r0, lsr fp
   1704c:	andeq	sl, r1, r4, asr #22
   17050:	andeq	sl, r1, ip, asr fp
   17054:	andeq	sl, r1, r0, ror fp
   17058:	muleq	r1, r8, fp
   1705c:	andeq	sl, r1, r8, lsr #23
   17060:	ldrdeq	sl, [r1], -r0
   17064:	push	{fp, lr}
   17068:	add	fp, sp, #4
   1706c:	sub	sp, sp, #16
   17070:	str	r0, [fp, #-8]
   17074:	str	r1, [fp, #-12]
   17078:	str	r2, [fp, #-16]
   1707c:	ldr	r2, [fp, #-16]
   17080:	ldr	r1, [fp, #-12]
   17084:	ldr	r0, [fp, #-8]
   17088:	bl	171f4 <__assert_fail@plt+0x6280>
   1708c:	mov	r3, r0
   17090:	mov	r0, r3
   17094:	sub	sp, fp, #4
   17098:	pop	{fp, pc}
   1709c:	push	{fp, lr}
   170a0:	add	fp, sp, #4
   170a4:	sub	sp, sp, #8
   170a8:	str	r0, [fp, #-8]
   170ac:	ldr	r3, [fp, #-8]
   170b0:	cmp	r3, #0
   170b4:	bne	170bc <__assert_fail@plt+0x6148>
   170b8:	bl	17be8 <__assert_fail@plt+0x6c74>
   170bc:	ldr	r3, [fp, #-8]
   170c0:	mov	r0, r3
   170c4:	sub	sp, fp, #4
   170c8:	pop	{fp, pc}
   170cc:	push	{fp, lr}
   170d0:	add	fp, sp, #4
   170d4:	sub	sp, sp, #8
   170d8:	str	r0, [fp, #-8]
   170dc:	ldr	r0, [fp, #-8]
   170e0:	bl	1871c <__assert_fail@plt+0x77a8>
   170e4:	mov	r3, r0
   170e8:	mov	r0, r3
   170ec:	bl	1709c <__assert_fail@plt+0x6128>
   170f0:	mov	r3, r0
   170f4:	mov	r0, r3
   170f8:	sub	sp, fp, #4
   170fc:	pop	{fp, pc}
   17100:	push	{fp, lr}
   17104:	add	fp, sp, #4
   17108:	sub	sp, sp, #8
   1710c:	str	r0, [fp, #-8]
   17110:	ldr	r0, [fp, #-8]
   17114:	bl	18d04 <__assert_fail@plt+0x7d90>
   17118:	mov	r3, r0
   1711c:	mov	r0, r3
   17120:	bl	1709c <__assert_fail@plt+0x6128>
   17124:	mov	r3, r0
   17128:	mov	r0, r3
   1712c:	sub	sp, fp, #4
   17130:	pop	{fp, pc}
   17134:	push	{fp, lr}
   17138:	add	fp, sp, #4
   1713c:	sub	sp, sp, #8
   17140:	str	r0, [fp, #-8]
   17144:	ldr	r0, [fp, #-8]
   17148:	bl	170cc <__assert_fail@plt+0x6158>
   1714c:	mov	r3, r0
   17150:	mov	r0, r3
   17154:	sub	sp, fp, #4
   17158:	pop	{fp, pc}
   1715c:	push	{fp, lr}
   17160:	add	fp, sp, #4
   17164:	sub	sp, sp, #16
   17168:	str	r0, [fp, #-16]
   1716c:	str	r1, [fp, #-20]	; 0xffffffec
   17170:	ldr	r1, [fp, #-20]	; 0xffffffec
   17174:	ldr	r0, [fp, #-16]
   17178:	bl	187c4 <__assert_fail@plt+0x7850>
   1717c:	str	r0, [fp, #-8]
   17180:	ldr	r3, [fp, #-8]
   17184:	cmp	r3, #0
   17188:	bne	171a8 <__assert_fail@plt+0x6234>
   1718c:	ldr	r3, [fp, #-16]
   17190:	cmp	r3, #0
   17194:	beq	171a4 <__assert_fail@plt+0x6230>
   17198:	ldr	r3, [fp, #-20]	; 0xffffffec
   1719c:	cmp	r3, #0
   171a0:	beq	171a8 <__assert_fail@plt+0x6234>
   171a4:	bl	17be8 <__assert_fail@plt+0x6c74>
   171a8:	ldr	r3, [fp, #-8]
   171ac:	mov	r0, r3
   171b0:	sub	sp, fp, #4
   171b4:	pop	{fp, pc}
   171b8:	push	{fp, lr}
   171bc:	add	fp, sp, #4
   171c0:	sub	sp, sp, #8
   171c4:	str	r0, [fp, #-8]
   171c8:	str	r1, [fp, #-12]
   171cc:	ldr	r1, [fp, #-12]
   171d0:	ldr	r0, [fp, #-8]
   171d4:	bl	18d30 <__assert_fail@plt+0x7dbc>
   171d8:	mov	r3, r0
   171dc:	mov	r0, r3
   171e0:	bl	1709c <__assert_fail@plt+0x6128>
   171e4:	mov	r3, r0
   171e8:	mov	r0, r3
   171ec:	sub	sp, fp, #4
   171f0:	pop	{fp, pc}
   171f4:	push	{fp, lr}
   171f8:	add	fp, sp, #4
   171fc:	sub	sp, sp, #24
   17200:	str	r0, [fp, #-16]
   17204:	str	r1, [fp, #-20]	; 0xffffffec
   17208:	str	r2, [fp, #-24]	; 0xffffffe8
   1720c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17210:	ldr	r1, [fp, #-20]	; 0xffffffec
   17214:	ldr	r0, [fp, #-16]
   17218:	bl	18f24 <__assert_fail@plt+0x7fb0>
   1721c:	str	r0, [fp, #-8]
   17220:	ldr	r3, [fp, #-8]
   17224:	cmp	r3, #0
   17228:	bne	17254 <__assert_fail@plt+0x62e0>
   1722c:	ldr	r3, [fp, #-16]
   17230:	cmp	r3, #0
   17234:	beq	17250 <__assert_fail@plt+0x62dc>
   17238:	ldr	r3, [fp, #-20]	; 0xffffffec
   1723c:	cmp	r3, #0
   17240:	beq	17254 <__assert_fail@plt+0x62e0>
   17244:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17248:	cmp	r3, #0
   1724c:	beq	17254 <__assert_fail@plt+0x62e0>
   17250:	bl	17be8 <__assert_fail@plt+0x6c74>
   17254:	ldr	r3, [fp, #-8]
   17258:	mov	r0, r3
   1725c:	sub	sp, fp, #4
   17260:	pop	{fp, pc}
   17264:	push	{fp, lr}
   17268:	add	fp, sp, #4
   1726c:	sub	sp, sp, #16
   17270:	str	r0, [fp, #-8]
   17274:	str	r1, [fp, #-12]
   17278:	str	r2, [fp, #-16]
   1727c:	ldr	r2, [fp, #-16]
   17280:	ldr	r1, [fp, #-12]
   17284:	ldr	r0, [fp, #-8]
   17288:	bl	18db8 <__assert_fail@plt+0x7e44>
   1728c:	mov	r3, r0
   17290:	mov	r0, r3
   17294:	bl	1709c <__assert_fail@plt+0x6128>
   17298:	mov	r3, r0
   1729c:	mov	r0, r3
   172a0:	sub	sp, fp, #4
   172a4:	pop	{fp, pc}
   172a8:	push	{fp, lr}
   172ac:	add	fp, sp, #4
   172b0:	sub	sp, sp, #8
   172b4:	str	r0, [fp, #-8]
   172b8:	str	r1, [fp, #-12]
   172bc:	ldr	r2, [fp, #-12]
   172c0:	ldr	r1, [fp, #-8]
   172c4:	mov	r0, #0
   172c8:	bl	171f4 <__assert_fail@plt+0x6280>
   172cc:	mov	r3, r0
   172d0:	mov	r0, r3
   172d4:	sub	sp, fp, #4
   172d8:	pop	{fp, pc}
   172dc:	push	{fp, lr}
   172e0:	add	fp, sp, #4
   172e4:	sub	sp, sp, #8
   172e8:	str	r0, [fp, #-8]
   172ec:	str	r1, [fp, #-12]
   172f0:	ldr	r2, [fp, #-12]
   172f4:	ldr	r1, [fp, #-8]
   172f8:	mov	r0, #0
   172fc:	bl	17264 <__assert_fail@plt+0x62f0>
   17300:	mov	r3, r0
   17304:	mov	r0, r3
   17308:	sub	sp, fp, #4
   1730c:	pop	{fp, pc}
   17310:	push	{fp, lr}
   17314:	add	fp, sp, #4
   17318:	sub	sp, sp, #8
   1731c:	str	r0, [fp, #-8]
   17320:	str	r1, [fp, #-12]
   17324:	mov	r2, #1
   17328:	ldr	r1, [fp, #-12]
   1732c:	ldr	r0, [fp, #-8]
   17330:	bl	17344 <__assert_fail@plt+0x63d0>
   17334:	mov	r3, r0
   17338:	mov	r0, r3
   1733c:	sub	sp, fp, #4
   17340:	pop	{fp, pc}
   17344:	push	{fp, lr}
   17348:	add	fp, sp, #4
   1734c:	sub	sp, sp, #24
   17350:	str	r0, [fp, #-16]
   17354:	str	r1, [fp, #-20]	; 0xffffffec
   17358:	str	r2, [fp, #-24]	; 0xffffffe8
   1735c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17360:	ldr	r3, [r3]
   17364:	str	r3, [fp, #-8]
   17368:	ldr	r3, [fp, #-16]
   1736c:	cmp	r3, #0
   17370:	bne	173bc <__assert_fail@plt+0x6448>
   17374:	ldr	r3, [fp, #-8]
   17378:	cmp	r3, #0
   1737c:	bne	17420 <__assert_fail@plt+0x64ac>
   17380:	ldr	r1, [fp, #-24]	; 0xffffffe8
   17384:	mov	r0, #64	; 0x40
   17388:	bl	196cc <__assert_fail@plt+0x8758>
   1738c:	mov	r3, r0
   17390:	str	r3, [fp, #-8]
   17394:	ldr	r3, [fp, #-8]
   17398:	cmp	r3, #0
   1739c:	moveq	r3, #1
   173a0:	movne	r3, #0
   173a4:	uxtb	r3, r3
   173a8:	mov	r2, r3
   173ac:	ldr	r3, [fp, #-8]
   173b0:	add	r3, r2, r3
   173b4:	str	r3, [fp, #-8]
   173b8:	b	17420 <__assert_fail@plt+0x64ac>
   173bc:	ldr	r3, [fp, #-8]
   173c0:	lsr	r3, r3, #1
   173c4:	add	r3, r3, #1
   173c8:	mvn	r2, r3
   173cc:	ldr	r3, [fp, #-8]
   173d0:	cmp	r2, r3
   173d4:	bcs	173f8 <__assert_fail@plt+0x6484>
   173d8:	ldr	r3, [fp, #-8]
   173dc:	lsr	r2, r3, #1
   173e0:	ldr	r3, [fp, #-8]
   173e4:	add	r3, r2, r3
   173e8:	add	r3, r3, #1
   173ec:	str	r3, [fp, #-8]
   173f0:	mov	r3, #1
   173f4:	b	17414 <__assert_fail@plt+0x64a0>
   173f8:	ldr	r3, [fp, #-8]
   173fc:	lsr	r2, r3, #1
   17400:	ldr	r3, [fp, #-8]
   17404:	add	r3, r2, r3
   17408:	add	r3, r3, #1
   1740c:	str	r3, [fp, #-8]
   17410:	mov	r3, #0
   17414:	cmp	r3, #0
   17418:	beq	17420 <__assert_fail@plt+0x64ac>
   1741c:	bl	17be8 <__assert_fail@plt+0x6c74>
   17420:	ldr	r3, [fp, #-8]
   17424:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17428:	mov	r1, r3
   1742c:	ldr	r0, [fp, #-16]
   17430:	bl	171f4 <__assert_fail@plt+0x6280>
   17434:	str	r0, [fp, #-16]
   17438:	ldr	r2, [fp, #-8]
   1743c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17440:	str	r2, [r3]
   17444:	ldr	r3, [fp, #-16]
   17448:	mov	r0, r3
   1744c:	sub	sp, fp, #4
   17450:	pop	{fp, pc}
   17454:	push	{fp, lr}
   17458:	add	fp, sp, #4
   1745c:	sub	sp, sp, #32
   17460:	str	r0, [fp, #-24]	; 0xffffffe8
   17464:	str	r1, [fp, #-28]	; 0xffffffe4
   17468:	str	r2, [fp, #-32]	; 0xffffffe0
   1746c:	str	r3, [fp, #-36]	; 0xffffffdc
   17470:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17474:	ldr	r3, [r3]
   17478:	str	r3, [fp, #-8]
   1747c:	ldr	r3, [fp, #-8]
   17480:	asr	r3, r3, #1
   17484:	cmp	r3, #0
   17488:	bge	174b0 <__assert_fail@plt+0x653c>
   1748c:	ldr	r3, [fp, #-8]
   17490:	asr	r3, r3, #1
   17494:	rsb	r2, r3, #-2147483648	; 0x80000000
   17498:	ldr	r3, [fp, #-8]
   1749c:	cmp	r2, r3
   174a0:	movgt	r3, #1
   174a4:	movle	r3, #0
   174a8:	uxtb	r3, r3
   174ac:	b	17504 <__assert_fail@plt+0x6590>
   174b0:	ldr	r3, [fp, #-8]
   174b4:	cmp	r3, #0
   174b8:	bge	174e0 <__assert_fail@plt+0x656c>
   174bc:	ldr	r3, [fp, #-8]
   174c0:	asr	r2, r3, #1
   174c4:	ldr	r3, [fp, #-8]
   174c8:	rsb	r3, r3, #-2147483648	; 0x80000000
   174cc:	cmp	r2, r3
   174d0:	movlt	r3, #1
   174d4:	movge	r3, #0
   174d8:	uxtb	r3, r3
   174dc:	b	17504 <__assert_fail@plt+0x6590>
   174e0:	ldr	r3, [fp, #-8]
   174e4:	asr	r2, r3, #1
   174e8:	mvn	r3, #-2147483648	; 0x80000000
   174ec:	sub	r3, r3, r2
   174f0:	ldr	r2, [fp, #-8]
   174f4:	cmp	r3, r2
   174f8:	movlt	r3, #1
   174fc:	movge	r3, #0
   17500:	uxtb	r3, r3
   17504:	cmp	r3, #0
   17508:	beq	1752c <__assert_fail@plt+0x65b8>
   1750c:	ldr	r3, [fp, #-8]
   17510:	asr	r3, r3, #1
   17514:	mov	r2, r3
   17518:	ldr	r3, [fp, #-8]
   1751c:	add	r3, r2, r3
   17520:	str	r3, [fp, #-16]
   17524:	mov	r3, #1
   17528:	b	17548 <__assert_fail@plt+0x65d4>
   1752c:	ldr	r3, [fp, #-8]
   17530:	asr	r3, r3, #1
   17534:	mov	r2, r3
   17538:	ldr	r3, [fp, #-8]
   1753c:	add	r3, r2, r3
   17540:	str	r3, [fp, #-16]
   17544:	mov	r3, #0
   17548:	cmp	r3, #0
   1754c:	beq	17558 <__assert_fail@plt+0x65e4>
   17550:	mvn	r3, #-2147483648	; 0x80000000
   17554:	str	r3, [fp, #-16]
   17558:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1755c:	cmp	r3, #0
   17560:	blt	1757c <__assert_fail@plt+0x6608>
   17564:	ldr	r3, [fp, #-16]
   17568:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1756c:	cmp	r2, r3
   17570:	bge	1757c <__assert_fail@plt+0x6608>
   17574:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17578:	str	r3, [fp, #-16]
   1757c:	ldr	r3, [fp, #4]
   17580:	cmp	r3, #0
   17584:	bge	17614 <__assert_fail@plt+0x66a0>
   17588:	ldr	r3, [fp, #-16]
   1758c:	cmp	r3, #0
   17590:	bge	175c0 <__assert_fail@plt+0x664c>
   17594:	ldr	r1, [fp, #4]
   17598:	mvn	r0, #-2147483648	; 0x80000000
   1759c:	bl	198d8 <__assert_fail@plt+0x8964>
   175a0:	mov	r3, r0
   175a4:	mov	r2, r3
   175a8:	ldr	r3, [fp, #-16]
   175ac:	cmp	r2, r3
   175b0:	movgt	r3, #1
   175b4:	movle	r3, #0
   175b8:	uxtb	r3, r3
   175bc:	b	176b4 <__assert_fail@plt+0x6740>
   175c0:	ldr	r3, [fp, #4]
   175c4:	cmn	r3, #1
   175c8:	bne	175e8 <__assert_fail@plt+0x6674>
   175cc:	ldr	r3, [fp, #-16]
   175d0:	add	r3, r3, #-2147483648	; 0x80000000
   175d4:	cmp	r3, #0
   175d8:	movgt	r3, #1
   175dc:	movle	r3, #0
   175e0:	uxtb	r3, r3
   175e4:	b	176b4 <__assert_fail@plt+0x6740>
   175e8:	ldr	r1, [fp, #4]
   175ec:	mov	r0, #-2147483648	; 0x80000000
   175f0:	bl	198d8 <__assert_fail@plt+0x8964>
   175f4:	mov	r3, r0
   175f8:	mov	r2, r3
   175fc:	ldr	r3, [fp, #-16]
   17600:	cmp	r2, r3
   17604:	movlt	r3, #1
   17608:	movge	r3, #0
   1760c:	uxtb	r3, r3
   17610:	b	176b4 <__assert_fail@plt+0x6740>
   17614:	ldr	r3, [fp, #4]
   17618:	cmp	r3, #0
   1761c:	beq	176b0 <__assert_fail@plt+0x673c>
   17620:	ldr	r3, [fp, #-16]
   17624:	cmp	r3, #0
   17628:	bge	17684 <__assert_fail@plt+0x6710>
   1762c:	ldr	r3, [fp, #-16]
   17630:	cmn	r3, #1
   17634:	bne	17654 <__assert_fail@plt+0x66e0>
   17638:	ldr	r3, [fp, #4]
   1763c:	add	r3, r3, #-2147483648	; 0x80000000
   17640:	cmp	r3, #0
   17644:	movgt	r3, #1
   17648:	movle	r3, #0
   1764c:	uxtb	r3, r3
   17650:	b	176b4 <__assert_fail@plt+0x6740>
   17654:	ldr	r3, [fp, #-16]
   17658:	mov	r1, r3
   1765c:	mov	r0, #-2147483648	; 0x80000000
   17660:	bl	198d8 <__assert_fail@plt+0x8964>
   17664:	mov	r3, r0
   17668:	mov	r2, r3
   1766c:	ldr	r3, [fp, #4]
   17670:	cmp	r2, r3
   17674:	movlt	r3, #1
   17678:	movge	r3, #0
   1767c:	uxtb	r3, r3
   17680:	b	176b4 <__assert_fail@plt+0x6740>
   17684:	ldr	r1, [fp, #4]
   17688:	mvn	r0, #-2147483648	; 0x80000000
   1768c:	bl	198d8 <__assert_fail@plt+0x8964>
   17690:	mov	r3, r0
   17694:	mov	r2, r3
   17698:	ldr	r3, [fp, #-16]
   1769c:	cmp	r2, r3
   176a0:	movlt	r3, #1
   176a4:	movge	r3, #0
   176a8:	uxtb	r3, r3
   176ac:	b	176b4 <__assert_fail@plt+0x6740>
   176b0:	mov	r3, #0
   176b4:	cmp	r3, #0
   176b8:	beq	176d8 <__assert_fail@plt+0x6764>
   176bc:	ldr	r3, [fp, #-16]
   176c0:	mov	r2, r3
   176c4:	ldr	r3, [fp, #4]
   176c8:	mul	r3, r3, r2
   176cc:	str	r3, [fp, #-20]	; 0xffffffec
   176d0:	mov	r3, #1
   176d4:	b	176f0 <__assert_fail@plt+0x677c>
   176d8:	ldr	r3, [fp, #-16]
   176dc:	mov	r2, r3
   176e0:	ldr	r3, [fp, #4]
   176e4:	mul	r3, r3, r2
   176e8:	str	r3, [fp, #-20]	; 0xffffffec
   176ec:	mov	r3, #0
   176f0:	cmp	r3, #0
   176f4:	beq	17700 <__assert_fail@plt+0x678c>
   176f8:	mvn	r3, #-2147483648	; 0x80000000
   176fc:	b	17718 <__assert_fail@plt+0x67a4>
   17700:	ldr	r3, [fp, #-20]	; 0xffffffec
   17704:	cmp	r3, #63	; 0x3f
   17708:	bgt	17714 <__assert_fail@plt+0x67a0>
   1770c:	mov	r3, #64	; 0x40
   17710:	b	17718 <__assert_fail@plt+0x67a4>
   17714:	mov	r3, #0
   17718:	str	r3, [fp, #-12]
   1771c:	ldr	r3, [fp, #-12]
   17720:	cmp	r3, #0
   17724:	beq	17760 <__assert_fail@plt+0x67ec>
   17728:	ldr	r1, [fp, #4]
   1772c:	ldr	r0, [fp, #-12]
   17730:	bl	198d8 <__assert_fail@plt+0x8964>
   17734:	mov	r3, r0
   17738:	str	r3, [fp, #-16]
   1773c:	ldr	r3, [fp, #-12]
   17740:	ldr	r1, [fp, #4]
   17744:	mov	r0, r3
   17748:	bl	19af8 <__assert_fail@plt+0x8b84>
   1774c:	mov	r3, r1
   17750:	mov	r2, r3
   17754:	ldr	r3, [fp, #-12]
   17758:	sub	r3, r3, r2
   1775c:	str	r3, [fp, #-20]	; 0xffffffec
   17760:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17764:	cmp	r3, #0
   17768:	bne	17778 <__assert_fail@plt+0x6804>
   1776c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17770:	mov	r2, #0
   17774:	str	r2, [r3]
   17778:	ldr	r2, [fp, #-16]
   1777c:	ldr	r3, [fp, #-8]
   17780:	sub	r2, r2, r3
   17784:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17788:	cmp	r2, r3
   1778c:	bge	179c4 <__assert_fail@plt+0x6a50>
   17790:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17794:	cmp	r3, #0
   17798:	bge	177bc <__assert_fail@plt+0x6848>
   1779c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   177a0:	rsb	r2, r3, #-2147483648	; 0x80000000
   177a4:	ldr	r3, [fp, #-8]
   177a8:	cmp	r2, r3
   177ac:	movgt	r3, #1
   177b0:	movle	r3, #0
   177b4:	uxtb	r3, r3
   177b8:	b	17808 <__assert_fail@plt+0x6894>
   177bc:	ldr	r3, [fp, #-8]
   177c0:	cmp	r3, #0
   177c4:	bge	177e8 <__assert_fail@plt+0x6874>
   177c8:	ldr	r3, [fp, #-8]
   177cc:	rsb	r2, r3, #-2147483648	; 0x80000000
   177d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   177d4:	cmp	r2, r3
   177d8:	movgt	r3, #1
   177dc:	movle	r3, #0
   177e0:	uxtb	r3, r3
   177e4:	b	17808 <__assert_fail@plt+0x6894>
   177e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   177ec:	mvn	r3, #-2147483648	; 0x80000000
   177f0:	sub	r3, r3, r2
   177f4:	ldr	r2, [fp, #-8]
   177f8:	cmp	r3, r2
   177fc:	movlt	r3, #1
   17800:	movge	r3, #0
   17804:	uxtb	r3, r3
   17808:	cmp	r3, #0
   1780c:	beq	17824 <__assert_fail@plt+0x68b0>
   17810:	ldr	r2, [fp, #-8]
   17814:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17818:	add	r3, r2, r3
   1781c:	str	r3, [fp, #-16]
   17820:	b	179c0 <__assert_fail@plt+0x6a4c>
   17824:	ldr	r2, [fp, #-8]
   17828:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1782c:	add	r3, r2, r3
   17830:	str	r3, [fp, #-16]
   17834:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17838:	cmp	r3, #0
   1783c:	blt	17850 <__assert_fail@plt+0x68dc>
   17840:	ldr	r3, [fp, #-16]
   17844:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17848:	cmp	r2, r3
   1784c:	blt	179c0 <__assert_fail@plt+0x6a4c>
   17850:	ldr	r3, [fp, #4]
   17854:	cmp	r3, #0
   17858:	bge	178e8 <__assert_fail@plt+0x6974>
   1785c:	ldr	r3, [fp, #-16]
   17860:	cmp	r3, #0
   17864:	bge	17894 <__assert_fail@plt+0x6920>
   17868:	ldr	r1, [fp, #4]
   1786c:	mvn	r0, #-2147483648	; 0x80000000
   17870:	bl	198d8 <__assert_fail@plt+0x8964>
   17874:	mov	r3, r0
   17878:	mov	r2, r3
   1787c:	ldr	r3, [fp, #-16]
   17880:	cmp	r2, r3
   17884:	movgt	r3, #1
   17888:	movle	r3, #0
   1788c:	uxtb	r3, r3
   17890:	b	17988 <__assert_fail@plt+0x6a14>
   17894:	ldr	r3, [fp, #4]
   17898:	cmn	r3, #1
   1789c:	bne	178bc <__assert_fail@plt+0x6948>
   178a0:	ldr	r3, [fp, #-16]
   178a4:	add	r3, r3, #-2147483648	; 0x80000000
   178a8:	cmp	r3, #0
   178ac:	movgt	r3, #1
   178b0:	movle	r3, #0
   178b4:	uxtb	r3, r3
   178b8:	b	17988 <__assert_fail@plt+0x6a14>
   178bc:	ldr	r1, [fp, #4]
   178c0:	mov	r0, #-2147483648	; 0x80000000
   178c4:	bl	198d8 <__assert_fail@plt+0x8964>
   178c8:	mov	r3, r0
   178cc:	mov	r2, r3
   178d0:	ldr	r3, [fp, #-16]
   178d4:	cmp	r2, r3
   178d8:	movlt	r3, #1
   178dc:	movge	r3, #0
   178e0:	uxtb	r3, r3
   178e4:	b	17988 <__assert_fail@plt+0x6a14>
   178e8:	ldr	r3, [fp, #4]
   178ec:	cmp	r3, #0
   178f0:	beq	17984 <__assert_fail@plt+0x6a10>
   178f4:	ldr	r3, [fp, #-16]
   178f8:	cmp	r3, #0
   178fc:	bge	17958 <__assert_fail@plt+0x69e4>
   17900:	ldr	r3, [fp, #-16]
   17904:	cmn	r3, #1
   17908:	bne	17928 <__assert_fail@plt+0x69b4>
   1790c:	ldr	r3, [fp, #4]
   17910:	add	r3, r3, #-2147483648	; 0x80000000
   17914:	cmp	r3, #0
   17918:	movgt	r3, #1
   1791c:	movle	r3, #0
   17920:	uxtb	r3, r3
   17924:	b	17988 <__assert_fail@plt+0x6a14>
   17928:	ldr	r3, [fp, #-16]
   1792c:	mov	r1, r3
   17930:	mov	r0, #-2147483648	; 0x80000000
   17934:	bl	198d8 <__assert_fail@plt+0x8964>
   17938:	mov	r3, r0
   1793c:	mov	r2, r3
   17940:	ldr	r3, [fp, #4]
   17944:	cmp	r2, r3
   17948:	movlt	r3, #1
   1794c:	movge	r3, #0
   17950:	uxtb	r3, r3
   17954:	b	17988 <__assert_fail@plt+0x6a14>
   17958:	ldr	r1, [fp, #4]
   1795c:	mvn	r0, #-2147483648	; 0x80000000
   17960:	bl	198d8 <__assert_fail@plt+0x8964>
   17964:	mov	r3, r0
   17968:	mov	r2, r3
   1796c:	ldr	r3, [fp, #-16]
   17970:	cmp	r2, r3
   17974:	movlt	r3, #1
   17978:	movge	r3, #0
   1797c:	uxtb	r3, r3
   17980:	b	17988 <__assert_fail@plt+0x6a14>
   17984:	mov	r3, #0
   17988:	cmp	r3, #0
   1798c:	beq	179a8 <__assert_fail@plt+0x6a34>
   17990:	ldr	r3, [fp, #-16]
   17994:	mov	r2, r3
   17998:	ldr	r3, [fp, #4]
   1799c:	mul	r3, r3, r2
   179a0:	str	r3, [fp, #-20]	; 0xffffffec
   179a4:	b	179c0 <__assert_fail@plt+0x6a4c>
   179a8:	ldr	r3, [fp, #-16]
   179ac:	mov	r2, r3
   179b0:	ldr	r3, [fp, #4]
   179b4:	mul	r3, r3, r2
   179b8:	str	r3, [fp, #-20]	; 0xffffffec
   179bc:	b	179c4 <__assert_fail@plt+0x6a50>
   179c0:	bl	17be8 <__assert_fail@plt+0x6c74>
   179c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   179c8:	mov	r1, r3
   179cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   179d0:	bl	1715c <__assert_fail@plt+0x61e8>
   179d4:	str	r0, [fp, #-24]	; 0xffffffe8
   179d8:	ldr	r2, [fp, #-16]
   179dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   179e0:	str	r2, [r3]
   179e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   179e8:	mov	r0, r3
   179ec:	sub	sp, fp, #4
   179f0:	pop	{fp, pc}
   179f4:	push	{fp, lr}
   179f8:	add	fp, sp, #4
   179fc:	sub	sp, sp, #8
   17a00:	str	r0, [fp, #-8]
   17a04:	mov	r1, #1
   17a08:	ldr	r0, [fp, #-8]
   17a0c:	bl	17a4c <__assert_fail@plt+0x6ad8>
   17a10:	mov	r3, r0
   17a14:	mov	r0, r3
   17a18:	sub	sp, fp, #4
   17a1c:	pop	{fp, pc}
   17a20:	push	{fp, lr}
   17a24:	add	fp, sp, #4
   17a28:	sub	sp, sp, #8
   17a2c:	str	r0, [fp, #-8]
   17a30:	mov	r1, #1
   17a34:	ldr	r0, [fp, #-8]
   17a38:	bl	17a88 <__assert_fail@plt+0x6b14>
   17a3c:	mov	r3, r0
   17a40:	mov	r0, r3
   17a44:	sub	sp, fp, #4
   17a48:	pop	{fp, pc}
   17a4c:	push	{fp, lr}
   17a50:	add	fp, sp, #4
   17a54:	sub	sp, sp, #8
   17a58:	str	r0, [fp, #-8]
   17a5c:	str	r1, [fp, #-12]
   17a60:	ldr	r1, [fp, #-12]
   17a64:	ldr	r0, [fp, #-8]
   17a68:	bl	18658 <__assert_fail@plt+0x76e4>
   17a6c:	mov	r3, r0
   17a70:	mov	r0, r3
   17a74:	bl	1709c <__assert_fail@plt+0x6128>
   17a78:	mov	r3, r0
   17a7c:	mov	r0, r3
   17a80:	sub	sp, fp, #4
   17a84:	pop	{fp, pc}
   17a88:	push	{fp, lr}
   17a8c:	add	fp, sp, #4
   17a90:	sub	sp, sp, #8
   17a94:	str	r0, [fp, #-8]
   17a98:	str	r1, [fp, #-12]
   17a9c:	ldr	r1, [fp, #-12]
   17aa0:	ldr	r0, [fp, #-8]
   17aa4:	bl	18d80 <__assert_fail@plt+0x7e0c>
   17aa8:	mov	r3, r0
   17aac:	mov	r0, r3
   17ab0:	bl	1709c <__assert_fail@plt+0x6128>
   17ab4:	mov	r3, r0
   17ab8:	mov	r0, r3
   17abc:	sub	sp, fp, #4
   17ac0:	pop	{fp, pc}
   17ac4:	push	{fp, lr}
   17ac8:	add	fp, sp, #4
   17acc:	sub	sp, sp, #8
   17ad0:	str	r0, [fp, #-8]
   17ad4:	str	r1, [fp, #-12]
   17ad8:	ldr	r0, [fp, #-12]
   17adc:	bl	170cc <__assert_fail@plt+0x6158>
   17ae0:	mov	r3, r0
   17ae4:	ldr	r2, [fp, #-12]
   17ae8:	ldr	r1, [fp, #-8]
   17aec:	mov	r0, r3
   17af0:	bl	10d4c <memcpy@plt>
   17af4:	mov	r3, r0
   17af8:	mov	r0, r3
   17afc:	sub	sp, fp, #4
   17b00:	pop	{fp, pc}
   17b04:	push	{fp, lr}
   17b08:	add	fp, sp, #4
   17b0c:	sub	sp, sp, #8
   17b10:	str	r0, [fp, #-8]
   17b14:	str	r1, [fp, #-12]
   17b18:	ldr	r0, [fp, #-12]
   17b1c:	bl	17100 <__assert_fail@plt+0x618c>
   17b20:	mov	r3, r0
   17b24:	mov	r0, r3
   17b28:	ldr	r3, [fp, #-12]
   17b2c:	mov	r2, r3
   17b30:	ldr	r1, [fp, #-8]
   17b34:	bl	10d4c <memcpy@plt>
   17b38:	mov	r3, r0
   17b3c:	mov	r0, r3
   17b40:	sub	sp, fp, #4
   17b44:	pop	{fp, pc}
   17b48:	push	{fp, lr}
   17b4c:	add	fp, sp, #4
   17b50:	sub	sp, sp, #16
   17b54:	str	r0, [fp, #-16]
   17b58:	str	r1, [fp, #-20]	; 0xffffffec
   17b5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b60:	add	r3, r3, #1
   17b64:	mov	r0, r3
   17b68:	bl	17100 <__assert_fail@plt+0x618c>
   17b6c:	mov	r3, r0
   17b70:	str	r3, [fp, #-8]
   17b74:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b78:	ldr	r2, [fp, #-8]
   17b7c:	add	r3, r2, r3
   17b80:	mov	r2, #0
   17b84:	strb	r2, [r3]
   17b88:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b8c:	mov	r2, r3
   17b90:	ldr	r1, [fp, #-16]
   17b94:	ldr	r0, [fp, #-8]
   17b98:	bl	10d4c <memcpy@plt>
   17b9c:	mov	r3, r0
   17ba0:	mov	r0, r3
   17ba4:	sub	sp, fp, #4
   17ba8:	pop	{fp, pc}
   17bac:	push	{fp, lr}
   17bb0:	add	fp, sp, #4
   17bb4:	sub	sp, sp, #8
   17bb8:	str	r0, [fp, #-8]
   17bbc:	ldr	r0, [fp, #-8]
   17bc0:	bl	10e84 <strlen@plt>
   17bc4:	mov	r3, r0
   17bc8:	add	r3, r3, #1
   17bcc:	mov	r1, r3
   17bd0:	ldr	r0, [fp, #-8]
   17bd4:	bl	17ac4 <__assert_fail@plt+0x6b50>
   17bd8:	mov	r3, r0
   17bdc:	mov	r0, r3
   17be0:	sub	sp, fp, #4
   17be4:	pop	{fp, pc}
   17be8:	push	{r4, r5, fp, lr}
   17bec:	add	fp, sp, #12
   17bf0:	ldr	r3, [pc, #32]	; 17c18 <__assert_fail@plt+0x6ca4>
   17bf4:	ldr	r4, [r3]
   17bf8:	ldr	r0, [pc, #28]	; 17c1c <__assert_fail@plt+0x6ca8>
   17bfc:	bl	10e78 <gettext@plt>
   17c00:	mov	r3, r0
   17c04:	ldr	r2, [pc, #20]	; 17c20 <__assert_fail@plt+0x6cac>
   17c08:	mov	r1, #0
   17c0c:	mov	r0, r4
   17c10:	bl	10e0c <error@plt>
   17c14:	bl	10f5c <abort@plt>
   17c18:	andeq	fp, r2, r0, lsl #2
   17c1c:	andeq	sl, r1, r0, lsr #24
   17c20:	andeq	sl, r1, r4, lsr ip
   17c24:	push	{fp}		; (str fp, [sp, #-4]!)
   17c28:	add	fp, sp, #0
   17c2c:	nop			; (mov r0, r0)
   17c30:	add	sp, fp, #0
   17c34:	pop	{fp}		; (ldr fp, [sp], #4)
   17c38:	bx	lr
   17c3c:	push	{fp, lr}
   17c40:	add	fp, sp, #4
   17c44:	sub	sp, sp, #8
   17c48:	str	r0, [fp, #-8]
   17c4c:	str	r1, [fp, #-12]
   17c50:	ldr	r1, [fp, #-12]
   17c54:	ldr	r0, [fp, #-8]
   17c58:	bl	188bc <__assert_fail@plt+0x7948>
   17c5c:	mov	r3, r0
   17c60:	cmp	r3, #0
   17c64:	bge	17c6c <__assert_fail@plt+0x6cf8>
   17c68:	bl	17c24 <__assert_fail@plt+0x6cb0>
   17c6c:	nop			; (mov r0, r0)
   17c70:	sub	sp, fp, #4
   17c74:	pop	{fp, pc}
   17c78:	push	{r4, r5, fp, lr}
   17c7c:	add	fp, sp, #12
   17c80:	sub	sp, sp, #40	; 0x28
   17c84:	str	r0, [fp, #-32]	; 0xffffffe0
   17c88:	str	r1, [fp, #-36]	; 0xffffffdc
   17c8c:	strd	r2, [fp, #-44]	; 0xffffffd4
   17c90:	sub	r2, fp, #28
   17c94:	ldr	r3, [fp, #12]
   17c98:	str	r3, [sp]
   17c9c:	mov	r3, r2
   17ca0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17ca4:	mov	r1, #0
   17ca8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17cac:	bl	18018 <__assert_fail@plt+0x70a4>
   17cb0:	str	r0, [fp, #-16]
   17cb4:	ldr	r3, [fp, #-16]
   17cb8:	cmp	r3, #0
   17cbc:	bne	17d30 <__assert_fail@plt+0x6dbc>
   17cc0:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   17cc4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   17cc8:	cmp	r1, r3
   17ccc:	cmpeq	r0, r2
   17cd0:	bcc	17ce8 <__assert_fail@plt+0x6d74>
   17cd4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17cd8:	ldrd	r0, [fp, #4]
   17cdc:	cmp	r1, r3
   17ce0:	cmpeq	r0, r2
   17ce4:	bcs	17d6c <__assert_fail@plt+0x6df8>
   17ce8:	mov	r3, #1
   17cec:	str	r3, [fp, #-16]
   17cf0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17cf4:	mvn	r0, #-1073741824	; 0xc0000000
   17cf8:	mov	r1, #0
   17cfc:	cmp	r3, r1
   17d00:	cmpeq	r2, r0
   17d04:	bls	17d1c <__assert_fail@plt+0x6da8>
   17d08:	bl	10eb4 <__errno_location@plt>
   17d0c:	mov	r2, r0
   17d10:	mov	r3, #75	; 0x4b
   17d14:	str	r3, [r2]
   17d18:	b	17d6c <__assert_fail@plt+0x6df8>
   17d1c:	bl	10eb4 <__errno_location@plt>
   17d20:	mov	r2, r0
   17d24:	mov	r3, #34	; 0x22
   17d28:	str	r3, [r2]
   17d2c:	b	17d6c <__assert_fail@plt+0x6df8>
   17d30:	ldr	r3, [fp, #-16]
   17d34:	cmp	r3, #1
   17d38:	bne	17d50 <__assert_fail@plt+0x6ddc>
   17d3c:	bl	10eb4 <__errno_location@plt>
   17d40:	mov	r2, r0
   17d44:	mov	r3, #75	; 0x4b
   17d48:	str	r3, [r2]
   17d4c:	b	17d6c <__assert_fail@plt+0x6df8>
   17d50:	ldr	r3, [fp, #-16]
   17d54:	cmp	r3, #3
   17d58:	bne	17d6c <__assert_fail@plt+0x6df8>
   17d5c:	bl	10eb4 <__errno_location@plt>
   17d60:	mov	r2, r0
   17d64:	mov	r3, #0
   17d68:	str	r3, [r2]
   17d6c:	ldr	r3, [fp, #-16]
   17d70:	cmp	r3, #0
   17d74:	beq	17ddc <__assert_fail@plt+0x6e68>
   17d78:	ldr	r3, [fp, #20]
   17d7c:	cmp	r3, #0
   17d80:	beq	17d8c <__assert_fail@plt+0x6e18>
   17d84:	ldr	r4, [fp, #20]
   17d88:	b	17d90 <__assert_fail@plt+0x6e1c>
   17d8c:	mov	r4, #1
   17d90:	bl	10eb4 <__errno_location@plt>
   17d94:	mov	r3, r0
   17d98:	ldr	r3, [r3]
   17d9c:	cmp	r3, #22
   17da0:	beq	17db4 <__assert_fail@plt+0x6e40>
   17da4:	bl	10eb4 <__errno_location@plt>
   17da8:	mov	r3, r0
   17dac:	ldr	r5, [r3]
   17db0:	b	17db8 <__assert_fail@plt+0x6e44>
   17db4:	mov	r5, #0
   17db8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17dbc:	bl	16810 <__assert_fail@plt+0x589c>
   17dc0:	mov	r3, r0
   17dc4:	str	r3, [sp]
   17dc8:	ldr	r3, [fp, #16]
   17dcc:	ldr	r2, [pc, #28]	; 17df0 <__assert_fail@plt+0x6e7c>
   17dd0:	mov	r1, r5
   17dd4:	mov	r0, r4
   17dd8:	bl	10e0c <error@plt>
   17ddc:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   17de0:	mov	r0, r2
   17de4:	mov	r1, r3
   17de8:	sub	sp, fp, #12
   17dec:	pop	{r4, r5, fp, pc}
   17df0:	andeq	sl, r1, r8, lsr ip
   17df4:	push	{fp, lr}
   17df8:	add	fp, sp, #4
   17dfc:	sub	sp, sp, #40	; 0x28
   17e00:	str	r0, [fp, #-8]
   17e04:	strd	r2, [fp, #-20]	; 0xffffffec
   17e08:	ldr	r3, [fp, #20]
   17e0c:	str	r3, [sp, #16]
   17e10:	ldr	r3, [fp, #16]
   17e14:	str	r3, [sp, #12]
   17e18:	ldr	r3, [fp, #12]
   17e1c:	str	r3, [sp, #8]
   17e20:	ldrd	r2, [fp, #4]
   17e24:	strd	r2, [sp]
   17e28:	ldrd	r2, [fp, #-20]	; 0xffffffec
   17e2c:	mov	r1, #10
   17e30:	ldr	r0, [fp, #-8]
   17e34:	bl	17c78 <__assert_fail@plt+0x6d04>
   17e38:	mov	r2, r0
   17e3c:	mov	r3, r1
   17e40:	mov	r0, r2
   17e44:	mov	r1, r3
   17e48:	sub	sp, fp, #4
   17e4c:	pop	{fp, pc}
   17e50:	push	{fp, lr}
   17e54:	add	fp, sp, #4
   17e58:	sub	sp, sp, #16
   17e5c:	str	r0, [fp, #-16]
   17e60:	str	r1, [fp, #-20]	; 0xffffffec
   17e64:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e68:	cmp	r3, #0
   17e6c:	bge	17ea8 <__assert_fail@plt+0x6f34>
   17e70:	ldr	r1, [fp, #-20]	; 0xffffffec
   17e74:	mov	r0, #0
   17e78:	bl	198d8 <__assert_fail@plt+0x8964>
   17e7c:	mov	r3, r0
   17e80:	mov	r0, r3
   17e84:	asr	r1, r0, #31
   17e88:	ldr	r3, [fp, #-16]
   17e8c:	ldrd	r2, [r3]
   17e90:	cmp	r1, r3
   17e94:	cmpeq	r0, r2
   17e98:	movcc	r3, #1
   17e9c:	movcs	r3, #0
   17ea0:	uxtb	r3, r3
   17ea4:	b	17f04 <__assert_fail@plt+0x6f90>
   17ea8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17eac:	cmp	r3, #0
   17eb0:	beq	17ef8 <__assert_fail@plt+0x6f84>
   17eb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17eb8:	mov	r2, r3
   17ebc:	asr	r3, r2, #31
   17ec0:	mvn	r0, #0
   17ec4:	mvn	r1, #0
   17ec8:	bl	19bec <__assert_fail@plt+0x8c78>
   17ecc:	mov	r2, r0
   17ed0:	mov	r3, r1
   17ed4:	mov	r0, r2
   17ed8:	mov	r1, r3
   17edc:	ldr	r3, [fp, #-16]
   17ee0:	ldrd	r2, [r3]
   17ee4:	cmp	r1, r3
   17ee8:	cmpeq	r0, r2
   17eec:	bcs	17ef8 <__assert_fail@plt+0x6f84>
   17ef0:	mov	r3, #1
   17ef4:	b	17efc <__assert_fail@plt+0x6f88>
   17ef8:	mov	r3, #0
   17efc:	and	r3, r3, #1
   17f00:	uxtb	r3, r3
   17f04:	cmp	r3, #0
   17f08:	beq	17f44 <__assert_fail@plt+0x6fd0>
   17f0c:	ldr	r3, [fp, #-16]
   17f10:	ldrd	r0, [r3]
   17f14:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f18:	mov	r2, r3
   17f1c:	asr	r3, r2, #31
   17f20:	mul	lr, r2, r1
   17f24:	mul	ip, r0, r3
   17f28:	add	ip, lr, ip
   17f2c:	umull	r2, r3, r0, r2
   17f30:	add	r1, ip, r3
   17f34:	mov	r3, r1
   17f38:	strd	r2, [fp, #-12]
   17f3c:	mov	r3, #1
   17f40:	b	17f78 <__assert_fail@plt+0x7004>
   17f44:	ldr	r3, [fp, #-16]
   17f48:	ldrd	r0, [r3]
   17f4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f50:	mov	r2, r3
   17f54:	asr	r3, r2, #31
   17f58:	mul	lr, r2, r1
   17f5c:	mul	ip, r0, r3
   17f60:	add	ip, lr, ip
   17f64:	umull	r2, r3, r0, r2
   17f68:	add	r1, ip, r3
   17f6c:	mov	r3, r1
   17f70:	strd	r2, [fp, #-12]
   17f74:	mov	r3, #0
   17f78:	cmp	r3, #0
   17f7c:	beq	17f98 <__assert_fail@plt+0x7024>
   17f80:	ldr	r1, [fp, #-16]
   17f84:	mvn	r2, #0
   17f88:	mvn	r3, #0
   17f8c:	strd	r2, [r1]
   17f90:	mov	r3, #1
   17f94:	b	17fa8 <__assert_fail@plt+0x7034>
   17f98:	ldrd	r2, [fp, #-12]
   17f9c:	ldr	r1, [fp, #-16]
   17fa0:	strd	r2, [r1]
   17fa4:	mov	r3, #0
   17fa8:	mov	r0, r3
   17fac:	sub	sp, fp, #4
   17fb0:	pop	{fp, pc}
   17fb4:	push	{fp, lr}
   17fb8:	add	fp, sp, #4
   17fbc:	sub	sp, sp, #24
   17fc0:	str	r0, [fp, #-16]
   17fc4:	str	r1, [fp, #-20]	; 0xffffffec
   17fc8:	str	r2, [fp, #-24]	; 0xffffffe8
   17fcc:	mov	r3, #0
   17fd0:	str	r3, [fp, #-8]
   17fd4:	b	17ff4 <__assert_fail@plt+0x7080>
   17fd8:	ldr	r1, [fp, #-20]	; 0xffffffec
   17fdc:	ldr	r0, [fp, #-16]
   17fe0:	bl	17e50 <__assert_fail@plt+0x6edc>
   17fe4:	mov	r2, r0
   17fe8:	ldr	r3, [fp, #-8]
   17fec:	orr	r3, r3, r2
   17ff0:	str	r3, [fp, #-8]
   17ff4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17ff8:	sub	r2, r3, #1
   17ffc:	str	r2, [fp, #-24]	; 0xffffffe8
   18000:	cmp	r3, #0
   18004:	bne	17fd8 <__assert_fail@plt+0x7064>
   18008:	ldr	r3, [fp, #-8]
   1800c:	mov	r0, r3
   18010:	sub	sp, fp, #4
   18014:	pop	{fp, pc}
   18018:	push	{fp, lr}
   1801c:	add	fp, sp, #4
   18020:	sub	sp, sp, #56	; 0x38
   18024:	str	r0, [fp, #-48]	; 0xffffffd0
   18028:	str	r1, [fp, #-52]	; 0xffffffcc
   1802c:	str	r2, [fp, #-56]	; 0xffffffc8
   18030:	str	r3, [fp, #-60]	; 0xffffffc4
   18034:	mov	r3, #0
   18038:	str	r3, [fp, #-8]
   1803c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18040:	cmp	r3, #0
   18044:	blt	18054 <__assert_fail@plt+0x70e0>
   18048:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1804c:	cmp	r3, #36	; 0x24
   18050:	ble	18068 <__assert_fail@plt+0x70f4>
   18054:	ldr	r3, [pc, #1520]	; 1864c <__assert_fail@plt+0x76d8>
   18058:	mov	r2, #85	; 0x55
   1805c:	ldr	r1, [pc, #1516]	; 18650 <__assert_fail@plt+0x76dc>
   18060:	ldr	r0, [pc, #1516]	; 18654 <__assert_fail@plt+0x76e0>
   18064:	bl	10f74 <__assert_fail@plt>
   18068:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1806c:	cmp	r3, #0
   18070:	bne	1807c <__assert_fail@plt+0x7108>
   18074:	sub	r3, fp, #36	; 0x24
   18078:	b	18080 <__assert_fail@plt+0x710c>
   1807c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   18080:	str	r3, [fp, #-32]	; 0xffffffe0
   18084:	bl	10eb4 <__errno_location@plt>
   18088:	mov	r2, r0
   1808c:	mov	r3, #0
   18090:	str	r3, [r2]
   18094:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18098:	str	r3, [fp, #-12]
   1809c:	ldr	r3, [fp, #-12]
   180a0:	ldrb	r3, [r3]
   180a4:	strb	r3, [fp, #-13]
   180a8:	b	180c4 <__assert_fail@plt+0x7150>
   180ac:	ldr	r3, [fp, #-12]
   180b0:	add	r3, r3, #1
   180b4:	str	r3, [fp, #-12]
   180b8:	ldr	r3, [fp, #-12]
   180bc:	ldrb	r3, [r3]
   180c0:	strb	r3, [fp, #-13]
   180c4:	bl	10e60 <__ctype_b_loc@plt>
   180c8:	mov	r3, r0
   180cc:	ldr	r2, [r3]
   180d0:	ldrb	r3, [fp, #-13]
   180d4:	lsl	r3, r3, #1
   180d8:	add	r3, r2, r3
   180dc:	ldrh	r3, [r3]
   180e0:	and	r3, r3, #8192	; 0x2000
   180e4:	cmp	r3, #0
   180e8:	bne	180ac <__assert_fail@plt+0x7138>
   180ec:	ldrb	r3, [fp, #-13]
   180f0:	cmp	r3, #45	; 0x2d
   180f4:	bne	18100 <__assert_fail@plt+0x718c>
   180f8:	mov	r3, #4
   180fc:	b	18640 <__assert_fail@plt+0x76cc>
   18100:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18104:	ldr	r1, [fp, #-32]	; 0xffffffe0
   18108:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1810c:	bl	10ee4 <strtoumax@plt>
   18110:	mov	r2, r0
   18114:	mov	r3, r1
   18118:	strd	r2, [fp, #-44]	; 0xffffffd4
   1811c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18120:	ldr	r2, [r3]
   18124:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18128:	cmp	r2, r3
   1812c:	bne	1818c <__assert_fail@plt+0x7218>
   18130:	ldr	r3, [fp, #4]
   18134:	cmp	r3, #0
   18138:	beq	18184 <__assert_fail@plt+0x7210>
   1813c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18140:	ldr	r3, [r3]
   18144:	ldrb	r3, [r3]
   18148:	cmp	r3, #0
   1814c:	beq	18184 <__assert_fail@plt+0x7210>
   18150:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18154:	ldr	r3, [r3]
   18158:	ldrb	r3, [r3]
   1815c:	mov	r1, r3
   18160:	ldr	r0, [fp, #4]
   18164:	bl	10e90 <strchr@plt>
   18168:	mov	r3, r0
   1816c:	cmp	r3, #0
   18170:	beq	18184 <__assert_fail@plt+0x7210>
   18174:	mov	r2, #1
   18178:	mov	r3, #0
   1817c:	strd	r2, [fp, #-44]	; 0xffffffd4
   18180:	b	181c4 <__assert_fail@plt+0x7250>
   18184:	mov	r3, #4
   18188:	b	18640 <__assert_fail@plt+0x76cc>
   1818c:	bl	10eb4 <__errno_location@plt>
   18190:	mov	r3, r0
   18194:	ldr	r3, [r3]
   18198:	cmp	r3, #0
   1819c:	beq	181c4 <__assert_fail@plt+0x7250>
   181a0:	bl	10eb4 <__errno_location@plt>
   181a4:	mov	r3, r0
   181a8:	ldr	r3, [r3]
   181ac:	cmp	r3, #34	; 0x22
   181b0:	beq	181bc <__assert_fail@plt+0x7248>
   181b4:	mov	r3, #4
   181b8:	b	18640 <__assert_fail@plt+0x76cc>
   181bc:	mov	r3, #1
   181c0:	str	r3, [fp, #-8]
   181c4:	ldr	r3, [fp, #4]
   181c8:	cmp	r3, #0
   181cc:	bne	181e4 <__assert_fail@plt+0x7270>
   181d0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   181d4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   181d8:	strd	r2, [r1]
   181dc:	ldr	r3, [fp, #-8]
   181e0:	b	18640 <__assert_fail@plt+0x76cc>
   181e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   181e8:	ldr	r3, [r3]
   181ec:	ldrb	r3, [r3]
   181f0:	cmp	r3, #0
   181f4:	beq	18630 <__assert_fail@plt+0x76bc>
   181f8:	mov	r3, #1024	; 0x400
   181fc:	str	r3, [fp, #-20]	; 0xffffffec
   18200:	mov	r3, #1
   18204:	str	r3, [fp, #-24]	; 0xffffffe8
   18208:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1820c:	ldr	r3, [r3]
   18210:	ldrb	r3, [r3]
   18214:	mov	r1, r3
   18218:	ldr	r0, [fp, #4]
   1821c:	bl	10e90 <strchr@plt>
   18220:	mov	r3, r0
   18224:	cmp	r3, #0
   18228:	bne	18244 <__assert_fail@plt+0x72d0>
   1822c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   18230:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18234:	strd	r2, [r1]
   18238:	ldr	r3, [fp, #-8]
   1823c:	orr	r3, r3, #2
   18240:	b	18640 <__assert_fail@plt+0x76cc>
   18244:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18248:	ldr	r3, [r3]
   1824c:	ldrb	r3, [r3]
   18250:	sub	r3, r3, #69	; 0x45
   18254:	cmp	r3, #47	; 0x2f
   18258:	ldrls	pc, [pc, r3, lsl #2]
   1825c:	b	183a8 <__assert_fail@plt+0x7434>
   18260:	andeq	r8, r1, r0, lsr #6
   18264:	andeq	r8, r1, r8, lsr #7
   18268:	andeq	r8, r1, r0, lsr #6
   1826c:	andeq	r8, r1, r8, lsr #7
   18270:	andeq	r8, r1, r8, lsr #7
   18274:	andeq	r8, r1, r8, lsr #7
   18278:	andeq	r8, r1, r0, lsr #6
   1827c:	andeq	r8, r1, r8, lsr #7
   18280:	andeq	r8, r1, r0, lsr #6
   18284:	andeq	r8, r1, r8, lsr #7
   18288:	andeq	r8, r1, r8, lsr #7
   1828c:	andeq	r8, r1, r0, lsr #6
   18290:	andeq	r8, r1, r8, lsr #7
   18294:	andeq	r8, r1, r8, lsr #7
   18298:	andeq	r8, r1, r8, lsr #7
   1829c:	andeq	r8, r1, r0, lsr #6
   182a0:	andeq	r8, r1, r8, lsr #7
   182a4:	andeq	r8, r1, r8, lsr #7
   182a8:	andeq	r8, r1, r8, lsr #7
   182ac:	andeq	r8, r1, r8, lsr #7
   182b0:	andeq	r8, r1, r0, lsr #6
   182b4:	andeq	r8, r1, r0, lsr #6
   182b8:	andeq	r8, r1, r8, lsr #7
   182bc:	andeq	r8, r1, r8, lsr #7
   182c0:	andeq	r8, r1, r8, lsr #7
   182c4:	andeq	r8, r1, r8, lsr #7
   182c8:	andeq	r8, r1, r8, lsr #7
   182cc:	andeq	r8, r1, r8, lsr #7
   182d0:	andeq	r8, r1, r8, lsr #7
   182d4:	andeq	r8, r1, r8, lsr #7
   182d8:	andeq	r8, r1, r8, lsr #7
   182dc:	andeq	r8, r1, r8, lsr #7
   182e0:	andeq	r8, r1, r8, lsr #7
   182e4:	andeq	r8, r1, r8, lsr #7
   182e8:	andeq	r8, r1, r0, lsr #6
   182ec:	andeq	r8, r1, r8, lsr #7
   182f0:	andeq	r8, r1, r8, lsr #7
   182f4:	andeq	r8, r1, r8, lsr #7
   182f8:	andeq	r8, r1, r0, lsr #6
   182fc:	andeq	r8, r1, r8, lsr #7
   18300:	andeq	r8, r1, r0, lsr #6
   18304:	andeq	r8, r1, r8, lsr #7
   18308:	andeq	r8, r1, r8, lsr #7
   1830c:	andeq	r8, r1, r8, lsr #7
   18310:	andeq	r8, r1, r8, lsr #7
   18314:	andeq	r8, r1, r8, lsr #7
   18318:	andeq	r8, r1, r8, lsr #7
   1831c:	andeq	r8, r1, r0, lsr #6
   18320:	mov	r1, #48	; 0x30
   18324:	ldr	r0, [fp, #4]
   18328:	bl	10e90 <strchr@plt>
   1832c:	mov	r3, r0
   18330:	cmp	r3, #0
   18334:	beq	183a8 <__assert_fail@plt+0x7434>
   18338:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1833c:	ldr	r3, [r3]
   18340:	add	r3, r3, #1
   18344:	ldrb	r3, [r3]
   18348:	cmp	r3, #68	; 0x44
   1834c:	beq	1838c <__assert_fail@plt+0x7418>
   18350:	cmp	r3, #105	; 0x69
   18354:	beq	18364 <__assert_fail@plt+0x73f0>
   18358:	cmp	r3, #66	; 0x42
   1835c:	beq	1838c <__assert_fail@plt+0x7418>
   18360:	b	183a8 <__assert_fail@plt+0x7434>
   18364:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18368:	ldr	r3, [r3]
   1836c:	add	r3, r3, #2
   18370:	ldrb	r3, [r3]
   18374:	cmp	r3, #66	; 0x42
   18378:	bne	183a4 <__assert_fail@plt+0x7430>
   1837c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18380:	add	r3, r3, #2
   18384:	str	r3, [fp, #-24]	; 0xffffffe8
   18388:	b	183a4 <__assert_fail@plt+0x7430>
   1838c:	mov	r3, #1000	; 0x3e8
   18390:	str	r3, [fp, #-20]	; 0xffffffec
   18394:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18398:	add	r3, r3, #1
   1839c:	str	r3, [fp, #-24]	; 0xffffffe8
   183a0:	b	183a8 <__assert_fail@plt+0x7434>
   183a4:	nop			; (mov r0, r0)
   183a8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   183ac:	ldr	r3, [r3]
   183b0:	ldrb	r3, [r3]
   183b4:	sub	r3, r3, #66	; 0x42
   183b8:	cmp	r3, #53	; 0x35
   183bc:	ldrls	pc, [pc, r3, lsl #2]
   183c0:	b	185d0 <__assert_fail@plt+0x765c>
   183c4:			; <UNDEFINED> instruction: 0x000184b4
   183c8:	ldrdeq	r8, [r1], -r0
   183cc:	ldrdeq	r8, [r1], -r0
   183d0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   183d4:	ldrdeq	r8, [r1], -r0
   183d8:	strdeq	r8, [r1], -r4
   183dc:	ldrdeq	r8, [r1], -r0
   183e0:	ldrdeq	r8, [r1], -r0
   183e4:	ldrdeq	r8, [r1], -r0
   183e8:	andeq	r8, r1, r0, lsl r5
   183ec:	ldrdeq	r8, [r1], -r0
   183f0:	andeq	r8, r1, ip, lsr #10
   183f4:	ldrdeq	r8, [r1], -r0
   183f8:	ldrdeq	r8, [r1], -r0
   183fc:	andeq	r8, r1, r8, asr #10
   18400:	ldrdeq	r8, [r1], -r0
   18404:	ldrdeq	r8, [r1], -r0
   18408:	ldrdeq	r8, [r1], -r0
   1840c:	andeq	r8, r1, r4, ror #10
   18410:	ldrdeq	r8, [r1], -r0
   18414:	ldrdeq	r8, [r1], -r0
   18418:	ldrdeq	r8, [r1], -r0
   1841c:	ldrdeq	r8, [r1], -r0
   18420:	muleq	r1, r8, r5
   18424:			; <UNDEFINED> instruction: 0x000185b4
   18428:	ldrdeq	r8, [r1], -r0
   1842c:	ldrdeq	r8, [r1], -r0
   18430:	ldrdeq	r8, [r1], -r0
   18434:	ldrdeq	r8, [r1], -r0
   18438:	ldrdeq	r8, [r1], -r0
   1843c:	ldrdeq	r8, [r1], -r0
   18440:	ldrdeq	r8, [r1], -r0
   18444:	muleq	r1, ip, r4
   18448:	andeq	r8, r1, ip, asr #9
   1844c:	ldrdeq	r8, [r1], -r0
   18450:	ldrdeq	r8, [r1], -r0
   18454:	ldrdeq	r8, [r1], -r0
   18458:	strdeq	r8, [r1], -r4
   1845c:	ldrdeq	r8, [r1], -r0
   18460:	ldrdeq	r8, [r1], -r0
   18464:	ldrdeq	r8, [r1], -r0
   18468:	andeq	r8, r1, r0, lsl r5
   1846c:	ldrdeq	r8, [r1], -r0
   18470:	andeq	r8, r1, ip, lsr #10
   18474:	ldrdeq	r8, [r1], -r0
   18478:	ldrdeq	r8, [r1], -r0
   1847c:	ldrdeq	r8, [r1], -r0
   18480:	ldrdeq	r8, [r1], -r0
   18484:	ldrdeq	r8, [r1], -r0
   18488:	ldrdeq	r8, [r1], -r0
   1848c:	andeq	r8, r1, r4, ror #10
   18490:	ldrdeq	r8, [r1], -r0
   18494:	ldrdeq	r8, [r1], -r0
   18498:	andeq	r8, r1, r0, lsl #11
   1849c:	sub	r3, fp, #44	; 0x2c
   184a0:	mov	r1, #512	; 0x200
   184a4:	mov	r0, r3
   184a8:	bl	17e50 <__assert_fail@plt+0x6edc>
   184ac:	str	r0, [fp, #-28]	; 0xffffffe4
   184b0:	b	185e8 <__assert_fail@plt+0x7674>
   184b4:	sub	r3, fp, #44	; 0x2c
   184b8:	mov	r1, #1024	; 0x400
   184bc:	mov	r0, r3
   184c0:	bl	17e50 <__assert_fail@plt+0x6edc>
   184c4:	str	r0, [fp, #-28]	; 0xffffffe4
   184c8:	b	185e8 <__assert_fail@plt+0x7674>
   184cc:	mov	r3, #0
   184d0:	str	r3, [fp, #-28]	; 0xffffffe4
   184d4:	b	185e8 <__assert_fail@plt+0x7674>
   184d8:	sub	r3, fp, #44	; 0x2c
   184dc:	mov	r2, #6
   184e0:	ldr	r1, [fp, #-20]	; 0xffffffec
   184e4:	mov	r0, r3
   184e8:	bl	17fb4 <__assert_fail@plt+0x7040>
   184ec:	str	r0, [fp, #-28]	; 0xffffffe4
   184f0:	b	185e8 <__assert_fail@plt+0x7674>
   184f4:	sub	r3, fp, #44	; 0x2c
   184f8:	mov	r2, #3
   184fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   18500:	mov	r0, r3
   18504:	bl	17fb4 <__assert_fail@plt+0x7040>
   18508:	str	r0, [fp, #-28]	; 0xffffffe4
   1850c:	b	185e8 <__assert_fail@plt+0x7674>
   18510:	sub	r3, fp, #44	; 0x2c
   18514:	mov	r2, #1
   18518:	ldr	r1, [fp, #-20]	; 0xffffffec
   1851c:	mov	r0, r3
   18520:	bl	17fb4 <__assert_fail@plt+0x7040>
   18524:	str	r0, [fp, #-28]	; 0xffffffe4
   18528:	b	185e8 <__assert_fail@plt+0x7674>
   1852c:	sub	r3, fp, #44	; 0x2c
   18530:	mov	r2, #2
   18534:	ldr	r1, [fp, #-20]	; 0xffffffec
   18538:	mov	r0, r3
   1853c:	bl	17fb4 <__assert_fail@plt+0x7040>
   18540:	str	r0, [fp, #-28]	; 0xffffffe4
   18544:	b	185e8 <__assert_fail@plt+0x7674>
   18548:	sub	r3, fp, #44	; 0x2c
   1854c:	mov	r2, #5
   18550:	ldr	r1, [fp, #-20]	; 0xffffffec
   18554:	mov	r0, r3
   18558:	bl	17fb4 <__assert_fail@plt+0x7040>
   1855c:	str	r0, [fp, #-28]	; 0xffffffe4
   18560:	b	185e8 <__assert_fail@plt+0x7674>
   18564:	sub	r3, fp, #44	; 0x2c
   18568:	mov	r2, #4
   1856c:	ldr	r1, [fp, #-20]	; 0xffffffec
   18570:	mov	r0, r3
   18574:	bl	17fb4 <__assert_fail@plt+0x7040>
   18578:	str	r0, [fp, #-28]	; 0xffffffe4
   1857c:	b	185e8 <__assert_fail@plt+0x7674>
   18580:	sub	r3, fp, #44	; 0x2c
   18584:	mov	r1, #2
   18588:	mov	r0, r3
   1858c:	bl	17e50 <__assert_fail@plt+0x6edc>
   18590:	str	r0, [fp, #-28]	; 0xffffffe4
   18594:	b	185e8 <__assert_fail@plt+0x7674>
   18598:	sub	r3, fp, #44	; 0x2c
   1859c:	mov	r2, #8
   185a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   185a4:	mov	r0, r3
   185a8:	bl	17fb4 <__assert_fail@plt+0x7040>
   185ac:	str	r0, [fp, #-28]	; 0xffffffe4
   185b0:	b	185e8 <__assert_fail@plt+0x7674>
   185b4:	sub	r3, fp, #44	; 0x2c
   185b8:	mov	r2, #7
   185bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   185c0:	mov	r0, r3
   185c4:	bl	17fb4 <__assert_fail@plt+0x7040>
   185c8:	str	r0, [fp, #-28]	; 0xffffffe4
   185cc:	b	185e8 <__assert_fail@plt+0x7674>
   185d0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   185d4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   185d8:	strd	r2, [r1]
   185dc:	ldr	r3, [fp, #-8]
   185e0:	orr	r3, r3, #2
   185e4:	b	18640 <__assert_fail@plt+0x76cc>
   185e8:	ldr	r2, [fp, #-8]
   185ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   185f0:	orr	r3, r2, r3
   185f4:	str	r3, [fp, #-8]
   185f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   185fc:	ldr	r2, [r3]
   18600:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18604:	add	r2, r2, r3
   18608:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1860c:	str	r2, [r3]
   18610:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18614:	ldr	r3, [r3]
   18618:	ldrb	r3, [r3]
   1861c:	cmp	r3, #0
   18620:	beq	18630 <__assert_fail@plt+0x76bc>
   18624:	ldr	r3, [fp, #-8]
   18628:	orr	r3, r3, #2
   1862c:	str	r3, [fp, #-8]
   18630:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   18634:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18638:	strd	r2, [r1]
   1863c:	ldr	r3, [fp, #-8]
   18640:	mov	r0, r3
   18644:	sub	sp, fp, #4
   18648:	pop	{fp, pc}
   1864c:	andeq	sl, r1, r8, ror ip
   18650:	andeq	sl, r1, r0, asr #24
   18654:	andeq	sl, r1, r0, asr ip
   18658:	push	{r4, r5, fp, lr}
   1865c:	add	fp, sp, #12
   18660:	sub	sp, sp, #16
   18664:	str	r0, [fp, #-24]	; 0xffffffe8
   18668:	str	r1, [fp, #-28]	; 0xffffffe4
   1866c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18670:	cmp	r3, #0
   18674:	beq	18684 <__assert_fail@plt+0x7710>
   18678:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1867c:	cmp	r3, #0
   18680:	bne	18694 <__assert_fail@plt+0x7720>
   18684:	mov	r3, #1
   18688:	str	r3, [fp, #-28]	; 0xffffffe4
   1868c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18690:	str	r3, [fp, #-24]	; 0xffffffe8
   18694:	mov	r1, #0
   18698:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1869c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   186a0:	umull	r2, r3, r2, r3
   186a4:	mov	r4, r3
   186a8:	mov	r5, #0
   186ac:	cmp	r4, #0
   186b0:	beq	186b8 <__assert_fail@plt+0x7744>
   186b4:	mov	r1, #1
   186b8:	cmp	r2, #0
   186bc:	bge	186c4 <__assert_fail@plt+0x7750>
   186c0:	mov	r1, #1
   186c4:	mov	r3, r2
   186c8:	str	r3, [fp, #-20]	; 0xffffffec
   186cc:	mov	r3, r1
   186d0:	and	r3, r3, #1
   186d4:	uxtb	r3, r3
   186d8:	cmp	r3, #0
   186dc:	beq	186f8 <__assert_fail@plt+0x7784>
   186e0:	bl	10eb4 <__errno_location@plt>
   186e4:	mov	r2, r0
   186e8:	mov	r3, #12
   186ec:	str	r3, [r2]
   186f0:	mov	r3, #0
   186f4:	b	18710 <__assert_fail@plt+0x779c>
   186f8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   186fc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18700:	bl	10ce0 <calloc@plt>
   18704:	mov	r3, r0
   18708:	str	r3, [fp, #-16]
   1870c:	ldr	r3, [fp, #-16]
   18710:	mov	r0, r3
   18714:	sub	sp, fp, #12
   18718:	pop	{r4, r5, fp, pc}
   1871c:	push	{r4, r5, fp, lr}
   18720:	add	fp, sp, #12
   18724:	sub	sp, sp, #16
   18728:	str	r0, [fp, #-24]	; 0xffffffe8
   1872c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18730:	cmp	r3, #0
   18734:	bne	18740 <__assert_fail@plt+0x77cc>
   18738:	mov	r3, #1
   1873c:	str	r3, [fp, #-24]	; 0xffffffe8
   18740:	mov	r1, #0
   18744:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18748:	mov	r2, r3
   1874c:	mov	r3, #0
   18750:	mov	r4, r3
   18754:	mov	r5, #0
   18758:	cmp	r4, #0
   1875c:	beq	18764 <__assert_fail@plt+0x77f0>
   18760:	mov	r1, #1
   18764:	cmp	r2, #0
   18768:	bge	18770 <__assert_fail@plt+0x77fc>
   1876c:	mov	r1, #1
   18770:	mov	r3, r2
   18774:	str	r3, [fp, #-20]	; 0xffffffec
   18778:	mov	r3, r1
   1877c:	and	r3, r3, #1
   18780:	uxtb	r3, r3
   18784:	cmp	r3, #0
   18788:	beq	187a4 <__assert_fail@plt+0x7830>
   1878c:	bl	10eb4 <__errno_location@plt>
   18790:	mov	r2, r0
   18794:	mov	r3, #12
   18798:	str	r3, [r2]
   1879c:	mov	r3, #0
   187a0:	b	187b8 <__assert_fail@plt+0x7844>
   187a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   187a8:	bl	10e24 <malloc@plt>
   187ac:	mov	r3, r0
   187b0:	str	r3, [fp, #-16]
   187b4:	ldr	r3, [fp, #-16]
   187b8:	mov	r0, r3
   187bc:	sub	sp, fp, #12
   187c0:	pop	{r4, r5, fp, pc}
   187c4:	push	{r4, r5, fp, lr}
   187c8:	add	fp, sp, #12
   187cc:	sub	sp, sp, #16
   187d0:	str	r0, [fp, #-24]	; 0xffffffe8
   187d4:	str	r1, [fp, #-28]	; 0xffffffe4
   187d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   187dc:	cmp	r3, #0
   187e0:	bne	187f4 <__assert_fail@plt+0x7880>
   187e4:	ldr	r0, [fp, #-28]	; 0xffffffe4
   187e8:	bl	1871c <__assert_fail@plt+0x77a8>
   187ec:	mov	r3, r0
   187f0:	b	18888 <__assert_fail@plt+0x7914>
   187f4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   187f8:	cmp	r3, #0
   187fc:	bne	18810 <__assert_fail@plt+0x789c>
   18800:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18804:	bl	13de8 <__assert_fail@plt+0x2e74>
   18808:	mov	r3, #0
   1880c:	b	18888 <__assert_fail@plt+0x7914>
   18810:	mov	r1, #0
   18814:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18818:	mov	r2, r3
   1881c:	mov	r3, #0
   18820:	mov	r4, r3
   18824:	mov	r5, #0
   18828:	cmp	r4, #0
   1882c:	beq	18834 <__assert_fail@plt+0x78c0>
   18830:	mov	r1, #1
   18834:	cmp	r2, #0
   18838:	bge	18840 <__assert_fail@plt+0x78cc>
   1883c:	mov	r1, #1
   18840:	mov	r3, r2
   18844:	str	r3, [fp, #-20]	; 0xffffffec
   18848:	mov	r3, r1
   1884c:	and	r3, r3, #1
   18850:	uxtb	r3, r3
   18854:	cmp	r3, #0
   18858:	beq	18874 <__assert_fail@plt+0x7900>
   1885c:	bl	10eb4 <__errno_location@plt>
   18860:	mov	r2, r0
   18864:	mov	r3, #12
   18868:	str	r3, [r2]
   1886c:	mov	r3, #0
   18870:	b	18888 <__assert_fail@plt+0x7914>
   18874:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18878:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1887c:	bl	10d88 <realloc@plt>
   18880:	str	r0, [fp, #-16]
   18884:	ldr	r3, [fp, #-16]
   18888:	mov	r0, r3
   1888c:	sub	sp, fp, #12
   18890:	pop	{r4, r5, fp, pc}
   18894:	push	{fp}		; (str fp, [sp, #-4]!)
   18898:	add	fp, sp, #0
   1889c:	sub	sp, sp, #12
   188a0:	str	r0, [fp, #-8]
   188a4:	str	r1, [fp, #-12]
   188a8:	mov	r3, #0
   188ac:	mov	r0, r3
   188b0:	add	sp, fp, #0
   188b4:	pop	{fp}		; (ldr fp, [sp], #4)
   188b8:	bx	lr
   188bc:	push	{fp, lr}
   188c0:	add	fp, sp, #4
   188c4:	sub	sp, sp, #8
   188c8:	str	r0, [fp, #-8]
   188cc:	str	r1, [fp, #-12]
   188d0:	ldr	r1, [fp, #-12]
   188d4:	ldr	r0, [fp, #-8]
   188d8:	bl	18894 <__assert_fail@plt+0x7920>
   188dc:	mov	r3, r0
   188e0:	mov	r0, r3
   188e4:	sub	sp, fp, #4
   188e8:	pop	{fp, pc}
   188ec:	push	{r4, r5, fp, lr}
   188f0:	add	fp, sp, #12
   188f4:	sub	sp, sp, #16
   188f8:	str	r0, [fp, #-24]	; 0xffffffe8
   188fc:	str	r1, [fp, #-28]	; 0xffffffe4
   18900:	ldr	r5, [fp, #-24]	; 0xffffffe8
   18904:	ldr	r4, [fp, #-28]	; 0xffffffe4
   18908:	cmp	r5, r4
   1890c:	bne	18918 <__assert_fail@plt+0x79a4>
   18910:	mov	r3, #0
   18914:	b	18978 <__assert_fail@plt+0x7a04>
   18918:	ldrb	r3, [r5]
   1891c:	mov	r0, r3
   18920:	bl	19448 <__assert_fail@plt+0x84d4>
   18924:	mov	r3, r0
   18928:	strb	r3, [fp, #-13]
   1892c:	ldrb	r3, [r4]
   18930:	mov	r0, r3
   18934:	bl	19448 <__assert_fail@plt+0x84d4>
   18938:	mov	r3, r0
   1893c:	strb	r3, [fp, #-14]
   18940:	ldrb	r3, [fp, #-13]
   18944:	cmp	r3, #0
   18948:	beq	18968 <__assert_fail@plt+0x79f4>
   1894c:	add	r5, r5, #1
   18950:	add	r4, r4, #1
   18954:	ldrb	r2, [fp, #-13]
   18958:	ldrb	r3, [fp, #-14]
   1895c:	cmp	r2, r3
   18960:	beq	18918 <__assert_fail@plt+0x79a4>
   18964:	b	1896c <__assert_fail@plt+0x79f8>
   18968:	nop			; (mov r0, r0)
   1896c:	ldrb	r2, [fp, #-13]
   18970:	ldrb	r3, [fp, #-14]
   18974:	sub	r3, r2, r3
   18978:	mov	r0, r3
   1897c:	sub	sp, fp, #12
   18980:	pop	{r4, r5, fp, pc}
   18984:	push	{fp, lr}
   18988:	add	fp, sp, #4
   1898c:	sub	sp, sp, #16
   18990:	str	r0, [fp, #-16]
   18994:	ldr	r0, [fp, #-16]
   18998:	bl	10de8 <__fpending@plt>
   1899c:	mov	r3, r0
   189a0:	cmp	r3, #0
   189a4:	movne	r3, #1
   189a8:	moveq	r3, #0
   189ac:	strb	r3, [fp, #-5]
   189b0:	ldr	r0, [fp, #-16]
   189b4:	bl	10df4 <ferror_unlocked@plt>
   189b8:	mov	r3, r0
   189bc:	cmp	r3, #0
   189c0:	movne	r3, #1
   189c4:	moveq	r3, #0
   189c8:	strb	r3, [fp, #-6]
   189cc:	ldr	r0, [fp, #-16]
   189d0:	bl	18a5c <__assert_fail@plt+0x7ae8>
   189d4:	mov	r3, r0
   189d8:	cmp	r3, #0
   189dc:	movne	r3, #1
   189e0:	moveq	r3, #0
   189e4:	strb	r3, [fp, #-7]
   189e8:	ldrb	r3, [fp, #-6]
   189ec:	cmp	r3, #0
   189f0:	bne	18a20 <__assert_fail@plt+0x7aac>
   189f4:	ldrb	r3, [fp, #-7]
   189f8:	cmp	r3, #0
   189fc:	beq	18a4c <__assert_fail@plt+0x7ad8>
   18a00:	ldrb	r3, [fp, #-5]
   18a04:	cmp	r3, #0
   18a08:	bne	18a20 <__assert_fail@plt+0x7aac>
   18a0c:	bl	10eb4 <__errno_location@plt>
   18a10:	mov	r3, r0
   18a14:	ldr	r3, [r3]
   18a18:	cmp	r3, #9
   18a1c:	beq	18a4c <__assert_fail@plt+0x7ad8>
   18a20:	ldrb	r3, [fp, #-7]
   18a24:	eor	r3, r3, #1
   18a28:	uxtb	r3, r3
   18a2c:	cmp	r3, #0
   18a30:	beq	18a44 <__assert_fail@plt+0x7ad0>
   18a34:	bl	10eb4 <__errno_location@plt>
   18a38:	mov	r2, r0
   18a3c:	mov	r3, #0
   18a40:	str	r3, [r2]
   18a44:	mvn	r3, #0
   18a48:	b	18a50 <__assert_fail@plt+0x7adc>
   18a4c:	mov	r3, #0
   18a50:	mov	r0, r3
   18a54:	sub	sp, fp, #4
   18a58:	pop	{fp, pc}
   18a5c:	push	{fp, lr}
   18a60:	add	fp, sp, #4
   18a64:	sub	sp, sp, #32
   18a68:	str	r0, [fp, #-24]	; 0xffffffe8
   18a6c:	mov	r3, #0
   18a70:	str	r3, [fp, #-8]
   18a74:	mov	r3, #0
   18a78:	str	r3, [fp, #-12]
   18a7c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18a80:	bl	10ed8 <fileno@plt>
   18a84:	str	r0, [fp, #-16]
   18a88:	ldr	r3, [fp, #-16]
   18a8c:	cmp	r3, #0
   18a90:	bge	18aa4 <__assert_fail@plt+0x7b30>
   18a94:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18a98:	bl	10efc <fclose@plt>
   18a9c:	mov	r3, r0
   18aa0:	b	18b48 <__assert_fail@plt+0x7bd4>
   18aa4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18aa8:	bl	10e3c <__freading@plt>
   18aac:	mov	r3, r0
   18ab0:	cmp	r3, #0
   18ab4:	beq	18af0 <__assert_fail@plt+0x7b7c>
   18ab8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18abc:	bl	10ed8 <fileno@plt>
   18ac0:	mov	r1, r0
   18ac4:	mov	r3, #1
   18ac8:	str	r3, [sp]
   18acc:	mov	r2, #0
   18ad0:	mov	r3, #0
   18ad4:	mov	r0, r1
   18ad8:	bl	10dd0 <lseek64@plt>
   18adc:	mvn	r2, #0
   18ae0:	mvn	r3, #0
   18ae4:	cmp	r1, r3
   18ae8:	cmpeq	r0, r2
   18aec:	beq	18b14 <__assert_fail@plt+0x7ba0>
   18af0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18af4:	bl	18b9c <__assert_fail@plt+0x7c28>
   18af8:	mov	r3, r0
   18afc:	cmp	r3, #0
   18b00:	beq	18b14 <__assert_fail@plt+0x7ba0>
   18b04:	bl	10eb4 <__errno_location@plt>
   18b08:	mov	r3, r0
   18b0c:	ldr	r3, [r3]
   18b10:	str	r3, [fp, #-8]
   18b14:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18b18:	bl	10efc <fclose@plt>
   18b1c:	str	r0, [fp, #-12]
   18b20:	ldr	r3, [fp, #-8]
   18b24:	cmp	r3, #0
   18b28:	beq	18b44 <__assert_fail@plt+0x7bd0>
   18b2c:	bl	10eb4 <__errno_location@plt>
   18b30:	mov	r2, r0
   18b34:	ldr	r3, [fp, #-8]
   18b38:	str	r3, [r2]
   18b3c:	mvn	r3, #0
   18b40:	str	r3, [fp, #-12]
   18b44:	ldr	r3, [fp, #-12]
   18b48:	mov	r0, r3
   18b4c:	sub	sp, fp, #4
   18b50:	pop	{fp, pc}
   18b54:	push	{fp, lr}
   18b58:	add	fp, sp, #4
   18b5c:	sub	sp, sp, #16
   18b60:	str	r0, [fp, #-8]
   18b64:	ldr	r3, [fp, #-8]
   18b68:	ldr	r3, [r3]
   18b6c:	and	r3, r3, #256	; 0x100
   18b70:	cmp	r3, #0
   18b74:	beq	18b90 <__assert_fail@plt+0x7c1c>
   18b78:	mov	r3, #1
   18b7c:	str	r3, [sp]
   18b80:	mov	r2, #0
   18b84:	mov	r3, #0
   18b88:	ldr	r0, [fp, #-8]
   18b8c:	bl	18bfc <__assert_fail@plt+0x7c88>
   18b90:	nop			; (mov r0, r0)
   18b94:	sub	sp, fp, #4
   18b98:	pop	{fp, pc}
   18b9c:	push	{fp, lr}
   18ba0:	add	fp, sp, #4
   18ba4:	sub	sp, sp, #8
   18ba8:	str	r0, [fp, #-8]
   18bac:	ldr	r3, [fp, #-8]
   18bb0:	cmp	r3, #0
   18bb4:	beq	18bcc <__assert_fail@plt+0x7c58>
   18bb8:	ldr	r0, [fp, #-8]
   18bbc:	bl	10e3c <__freading@plt>
   18bc0:	mov	r3, r0
   18bc4:	cmp	r3, #0
   18bc8:	bne	18bdc <__assert_fail@plt+0x7c68>
   18bcc:	ldr	r0, [fp, #-8]
   18bd0:	bl	10d28 <fflush@plt>
   18bd4:	mov	r3, r0
   18bd8:	b	18bf0 <__assert_fail@plt+0x7c7c>
   18bdc:	ldr	r0, [fp, #-8]
   18be0:	bl	18b54 <__assert_fail@plt+0x7be0>
   18be4:	ldr	r0, [fp, #-8]
   18be8:	bl	10d28 <fflush@plt>
   18bec:	mov	r3, r0
   18bf0:	mov	r0, r3
   18bf4:	sub	sp, fp, #4
   18bf8:	pop	{fp, pc}
   18bfc:	push	{fp, lr}
   18c00:	add	fp, sp, #4
   18c04:	sub	sp, sp, #32
   18c08:	str	r0, [fp, #-16]
   18c0c:	strd	r2, [fp, #-28]	; 0xffffffe4
   18c10:	ldr	r3, [fp, #-16]
   18c14:	ldr	r2, [r3, #8]
   18c18:	ldr	r3, [fp, #-16]
   18c1c:	ldr	r3, [r3, #4]
   18c20:	cmp	r2, r3
   18c24:	bne	18cbc <__assert_fail@plt+0x7d48>
   18c28:	ldr	r3, [fp, #-16]
   18c2c:	ldr	r2, [r3, #20]
   18c30:	ldr	r3, [fp, #-16]
   18c34:	ldr	r3, [r3, #16]
   18c38:	cmp	r2, r3
   18c3c:	bne	18cbc <__assert_fail@plt+0x7d48>
   18c40:	ldr	r3, [fp, #-16]
   18c44:	ldr	r3, [r3, #36]	; 0x24
   18c48:	cmp	r3, #0
   18c4c:	bne	18cbc <__assert_fail@plt+0x7d48>
   18c50:	ldr	r0, [fp, #-16]
   18c54:	bl	10ed8 <fileno@plt>
   18c58:	mov	r1, r0
   18c5c:	ldr	r3, [fp, #4]
   18c60:	str	r3, [sp]
   18c64:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   18c68:	mov	r0, r1
   18c6c:	bl	10dd0 <lseek64@plt>
   18c70:	strd	r0, [fp, #-12]
   18c74:	ldrd	r2, [fp, #-12]
   18c78:	mvn	r0, #0
   18c7c:	mvn	r1, #0
   18c80:	cmp	r3, r1
   18c84:	cmpeq	r2, r0
   18c88:	bne	18c94 <__assert_fail@plt+0x7d20>
   18c8c:	mvn	r3, #0
   18c90:	b	18cd4 <__assert_fail@plt+0x7d60>
   18c94:	ldr	r3, [fp, #-16]
   18c98:	ldr	r3, [r3]
   18c9c:	bic	r2, r3, #16
   18ca0:	ldr	r3, [fp, #-16]
   18ca4:	str	r2, [r3]
   18ca8:	ldr	r1, [fp, #-16]
   18cac:	ldrd	r2, [fp, #-12]
   18cb0:	strd	r2, [r1, #80]	; 0x50
   18cb4:	mov	r3, #0
   18cb8:	b	18cd4 <__assert_fail@plt+0x7d60>
   18cbc:	ldr	r3, [fp, #4]
   18cc0:	str	r3, [sp]
   18cc4:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   18cc8:	ldr	r0, [fp, #-16]
   18ccc:	bl	10f08 <fseeko64@plt>
   18cd0:	mov	r3, r0
   18cd4:	mov	r0, r3
   18cd8:	sub	sp, fp, #4
   18cdc:	pop	{fp, pc}
   18ce0:	push	{fp, lr}
   18ce4:	add	fp, sp, #4
   18ce8:	bl	10eb4 <__errno_location@plt>
   18cec:	mov	r2, r0
   18cf0:	mov	r3, #12
   18cf4:	str	r3, [r2]
   18cf8:	mov	r3, #0
   18cfc:	mov	r0, r3
   18d00:	pop	{fp, pc}
   18d04:	push	{fp, lr}
   18d08:	add	fp, sp, #4
   18d0c:	sub	sp, sp, #8
   18d10:	str	r0, [fp, #-8]
   18d14:	ldr	r3, [fp, #-8]
   18d18:	mov	r0, r3
   18d1c:	bl	1871c <__assert_fail@plt+0x77a8>
   18d20:	mov	r3, r0
   18d24:	mov	r0, r3
   18d28:	sub	sp, fp, #4
   18d2c:	pop	{fp, pc}
   18d30:	push	{fp, lr}
   18d34:	add	fp, sp, #4
   18d38:	sub	sp, sp, #8
   18d3c:	str	r0, [fp, #-8]
   18d40:	str	r1, [fp, #-12]
   18d44:	ldr	r3, [fp, #-12]
   18d48:	cmp	r3, #0
   18d4c:	moveq	r3, #1
   18d50:	movne	r3, #0
   18d54:	uxtb	r3, r3
   18d58:	mov	r2, r3
   18d5c:	ldr	r3, [fp, #-12]
   18d60:	orr	r3, r2, r3
   18d64:	mov	r1, r3
   18d68:	ldr	r0, [fp, #-8]
   18d6c:	bl	187c4 <__assert_fail@plt+0x7850>
   18d70:	mov	r3, r0
   18d74:	mov	r0, r3
   18d78:	sub	sp, fp, #4
   18d7c:	pop	{fp, pc}
   18d80:	push	{fp, lr}
   18d84:	add	fp, sp, #4
   18d88:	sub	sp, sp, #8
   18d8c:	str	r0, [fp, #-8]
   18d90:	str	r1, [fp, #-12]
   18d94:	ldr	r3, [fp, #-8]
   18d98:	ldr	r2, [fp, #-12]
   18d9c:	mov	r1, r2
   18da0:	mov	r0, r3
   18da4:	bl	18658 <__assert_fail@plt+0x76e4>
   18da8:	mov	r3, r0
   18dac:	mov	r0, r3
   18db0:	sub	sp, fp, #4
   18db4:	pop	{fp, pc}
   18db8:	push	{fp, lr}
   18dbc:	add	fp, sp, #4
   18dc0:	sub	sp, sp, #16
   18dc4:	str	r0, [fp, #-8]
   18dc8:	str	r1, [fp, #-12]
   18dcc:	str	r2, [fp, #-16]
   18dd0:	ldr	r3, [fp, #-12]
   18dd4:	cmp	r3, #0
   18dd8:	beq	18de8 <__assert_fail@plt+0x7e74>
   18ddc:	ldr	r3, [fp, #-16]
   18de0:	cmp	r3, #0
   18de4:	bne	18df8 <__assert_fail@plt+0x7e84>
   18de8:	mov	r3, #1
   18dec:	str	r3, [fp, #-16]
   18df0:	ldr	r3, [fp, #-16]
   18df4:	str	r3, [fp, #-12]
   18df8:	ldr	r3, [fp, #-12]
   18dfc:	ldr	r2, [fp, #-16]
   18e00:	mov	r1, r3
   18e04:	ldr	r0, [fp, #-8]
   18e08:	bl	18f24 <__assert_fail@plt+0x7fb0>
   18e0c:	mov	r3, r0
   18e10:	mov	r0, r3
   18e14:	sub	sp, fp, #4
   18e18:	pop	{fp, pc}
   18e1c:	push	{fp, lr}
   18e20:	add	fp, sp, #4
   18e24:	sub	sp, sp, #8
   18e28:	mov	r0, #14
   18e2c:	bl	10f2c <nl_langinfo@plt>
   18e30:	str	r0, [fp, #-8]
   18e34:	ldr	r3, [fp, #-8]
   18e38:	cmp	r3, #0
   18e3c:	bne	18e48 <__assert_fail@plt+0x7ed4>
   18e40:	ldr	r3, [pc, #40]	; 18e70 <__assert_fail@plt+0x7efc>
   18e44:	str	r3, [fp, #-8]
   18e48:	ldr	r3, [fp, #-8]
   18e4c:	ldrb	r3, [r3]
   18e50:	cmp	r3, #0
   18e54:	bne	18e60 <__assert_fail@plt+0x7eec>
   18e58:	ldr	r3, [pc, #20]	; 18e74 <__assert_fail@plt+0x7f00>
   18e5c:	str	r3, [fp, #-8]
   18e60:	ldr	r3, [fp, #-8]
   18e64:	mov	r0, r3
   18e68:	sub	sp, fp, #4
   18e6c:	pop	{fp, pc}
   18e70:	andeq	sl, r1, r4, lsl #25
   18e74:	andeq	sl, r1, r8, lsl #25
   18e78:	push	{fp, lr}
   18e7c:	add	fp, sp, #4
   18e80:	sub	sp, sp, #32
   18e84:	str	r0, [fp, #-24]	; 0xffffffe8
   18e88:	str	r1, [fp, #-28]	; 0xffffffe4
   18e8c:	str	r2, [fp, #-32]	; 0xffffffe0
   18e90:	str	r3, [fp, #-36]	; 0xffffffdc
   18e94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18e98:	cmp	r3, #0
   18e9c:	bne	18ea8 <__assert_fail@plt+0x7f34>
   18ea0:	sub	r3, fp, #16
   18ea4:	str	r3, [fp, #-24]	; 0xffffffe8
   18ea8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18eac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18eb0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18eb4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18eb8:	bl	10e00 <mbrtowc@plt>
   18ebc:	str	r0, [fp, #-8]
   18ec0:	ldr	r3, [fp, #-8]
   18ec4:	cmn	r3, #3
   18ec8:	bls	18f14 <__assert_fail@plt+0x7fa0>
   18ecc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18ed0:	cmp	r3, #0
   18ed4:	beq	18f14 <__assert_fail@plt+0x7fa0>
   18ed8:	mov	r0, #0
   18edc:	bl	194c8 <__assert_fail@plt+0x8554>
   18ee0:	mov	r3, r0
   18ee4:	eor	r3, r3, #1
   18ee8:	uxtb	r3, r3
   18eec:	cmp	r3, #0
   18ef0:	beq	18f14 <__assert_fail@plt+0x7fa0>
   18ef4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18ef8:	ldrb	r3, [r3]
   18efc:	strb	r3, [fp, #-9]
   18f00:	ldrb	r2, [fp, #-9]
   18f04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18f08:	str	r2, [r3]
   18f0c:	mov	r3, #1
   18f10:	b	18f18 <__assert_fail@plt+0x7fa4>
   18f14:	ldr	r3, [fp, #-8]
   18f18:	mov	r0, r3
   18f1c:	sub	sp, fp, #4
   18f20:	pop	{fp, pc}
   18f24:	push	{fp, lr}
   18f28:	add	fp, sp, #4
   18f2c:	sub	sp, sp, #24
   18f30:	str	r0, [fp, #-16]
   18f34:	str	r1, [fp, #-20]	; 0xffffffec
   18f38:	str	r2, [fp, #-24]	; 0xffffffe8
   18f3c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18f40:	cmp	r3, #0
   18f44:	beq	18f80 <__assert_fail@plt+0x800c>
   18f48:	ldr	r1, [fp, #-24]	; 0xffffffe8
   18f4c:	mvn	r0, #0
   18f50:	bl	196cc <__assert_fail@plt+0x8758>
   18f54:	mov	r3, r0
   18f58:	mov	r2, r3
   18f5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18f60:	cmp	r2, r3
   18f64:	bcs	18f80 <__assert_fail@plt+0x800c>
   18f68:	ldr	r3, [fp, #-20]	; 0xffffffec
   18f6c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18f70:	mul	r3, r2, r3
   18f74:	str	r3, [fp, #-8]
   18f78:	mov	r3, #1
   18f7c:	b	18f94 <__assert_fail@plt+0x8020>
   18f80:	ldr	r3, [fp, #-20]	; 0xffffffec
   18f84:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18f88:	mul	r3, r2, r3
   18f8c:	str	r3, [fp, #-8]
   18f90:	mov	r3, #0
   18f94:	cmp	r3, #0
   18f98:	beq	18fb4 <__assert_fail@plt+0x8040>
   18f9c:	bl	10eb4 <__errno_location@plt>
   18fa0:	mov	r2, r0
   18fa4:	mov	r3, #12
   18fa8:	str	r3, [r2]
   18fac:	mov	r3, #0
   18fb0:	b	18fc8 <__assert_fail@plt+0x8054>
   18fb4:	ldr	r3, [fp, #-8]
   18fb8:	mov	r1, r3
   18fbc:	ldr	r0, [fp, #-16]
   18fc0:	bl	187c4 <__assert_fail@plt+0x7850>
   18fc4:	mov	r3, r0
   18fc8:	mov	r0, r3
   18fcc:	sub	sp, fp, #4
   18fd0:	pop	{fp, pc}
   18fd4:	push	{fp}		; (str fp, [sp, #-4]!)
   18fd8:	add	fp, sp, #0
   18fdc:	sub	sp, sp, #12
   18fe0:	str	r0, [fp, #-8]
   18fe4:	ldr	r3, [fp, #-8]
   18fe8:	cmp	r3, #90	; 0x5a
   18fec:	bgt	19008 <__assert_fail@plt+0x8094>
   18ff0:	cmp	r3, #65	; 0x41
   18ff4:	bge	19014 <__assert_fail@plt+0x80a0>
   18ff8:	sub	r3, r3, #48	; 0x30
   18ffc:	cmp	r3, #9
   19000:	bhi	1901c <__assert_fail@plt+0x80a8>
   19004:	b	19014 <__assert_fail@plt+0x80a0>
   19008:	sub	r3, r3, #97	; 0x61
   1900c:	cmp	r3, #25
   19010:	bhi	1901c <__assert_fail@plt+0x80a8>
   19014:	mov	r3, #1
   19018:	b	19020 <__assert_fail@plt+0x80ac>
   1901c:	mov	r3, #0
   19020:	mov	r0, r3
   19024:	add	sp, fp, #0
   19028:	pop	{fp}		; (ldr fp, [sp], #4)
   1902c:	bx	lr
   19030:	push	{fp}		; (str fp, [sp, #-4]!)
   19034:	add	fp, sp, #0
   19038:	sub	sp, sp, #12
   1903c:	str	r0, [fp, #-8]
   19040:	ldr	r3, [fp, #-8]
   19044:	cmp	r3, #65	; 0x41
   19048:	blt	19068 <__assert_fail@plt+0x80f4>
   1904c:	cmp	r3, #90	; 0x5a
   19050:	ble	19060 <__assert_fail@plt+0x80ec>
   19054:	sub	r3, r3, #97	; 0x61
   19058:	cmp	r3, #25
   1905c:	bhi	19068 <__assert_fail@plt+0x80f4>
   19060:	mov	r3, #1
   19064:	b	1906c <__assert_fail@plt+0x80f8>
   19068:	mov	r3, #0
   1906c:	mov	r0, r3
   19070:	add	sp, fp, #0
   19074:	pop	{fp}		; (ldr fp, [sp], #4)
   19078:	bx	lr
   1907c:	push	{fp}		; (str fp, [sp, #-4]!)
   19080:	add	fp, sp, #0
   19084:	sub	sp, sp, #12
   19088:	str	r0, [fp, #-8]
   1908c:	ldr	r3, [fp, #-8]
   19090:	add	r3, r3, #0
   19094:	cmp	r3, #127	; 0x7f
   19098:	bhi	190a4 <__assert_fail@plt+0x8130>
   1909c:	mov	r3, #1
   190a0:	b	190a8 <__assert_fail@plt+0x8134>
   190a4:	mov	r3, #0
   190a8:	mov	r0, r3
   190ac:	add	sp, fp, #0
   190b0:	pop	{fp}		; (ldr fp, [sp], #4)
   190b4:	bx	lr
   190b8:	push	{fp}		; (str fp, [sp, #-4]!)
   190bc:	add	fp, sp, #0
   190c0:	sub	sp, sp, #12
   190c4:	str	r0, [fp, #-8]
   190c8:	ldr	r3, [fp, #-8]
   190cc:	cmp	r3, #32
   190d0:	beq	190e0 <__assert_fail@plt+0x816c>
   190d4:	ldr	r3, [fp, #-8]
   190d8:	cmp	r3, #9
   190dc:	bne	190e8 <__assert_fail@plt+0x8174>
   190e0:	mov	r3, #1
   190e4:	b	190ec <__assert_fail@plt+0x8178>
   190e8:	mov	r3, #0
   190ec:	and	r3, r3, #1
   190f0:	uxtb	r3, r3
   190f4:	mov	r0, r3
   190f8:	add	sp, fp, #0
   190fc:	pop	{fp}		; (ldr fp, [sp], #4)
   19100:	bx	lr
   19104:	push	{fp}		; (str fp, [sp, #-4]!)
   19108:	add	fp, sp, #0
   1910c:	sub	sp, sp, #12
   19110:	str	r0, [fp, #-8]
   19114:	ldr	r3, [fp, #-8]
   19118:	cmp	r3, #0
   1911c:	blt	19138 <__assert_fail@plt+0x81c4>
   19120:	cmp	r3, #31
   19124:	ble	19130 <__assert_fail@plt+0x81bc>
   19128:	cmp	r3, #127	; 0x7f
   1912c:	bne	19138 <__assert_fail@plt+0x81c4>
   19130:	mov	r3, #1
   19134:	b	1913c <__assert_fail@plt+0x81c8>
   19138:	mov	r3, #0
   1913c:	mov	r0, r3
   19140:	add	sp, fp, #0
   19144:	pop	{fp}		; (ldr fp, [sp], #4)
   19148:	bx	lr
   1914c:	push	{fp}		; (str fp, [sp, #-4]!)
   19150:	add	fp, sp, #0
   19154:	sub	sp, sp, #12
   19158:	str	r0, [fp, #-8]
   1915c:	ldr	r3, [fp, #-8]
   19160:	sub	r3, r3, #48	; 0x30
   19164:	cmp	r3, #9
   19168:	bhi	19174 <__assert_fail@plt+0x8200>
   1916c:	mov	r3, #1
   19170:	b	19178 <__assert_fail@plt+0x8204>
   19174:	mov	r3, #0
   19178:	mov	r0, r3
   1917c:	add	sp, fp, #0
   19180:	pop	{fp}		; (ldr fp, [sp], #4)
   19184:	bx	lr
   19188:	push	{fp}		; (str fp, [sp, #-4]!)
   1918c:	add	fp, sp, #0
   19190:	sub	sp, sp, #12
   19194:	str	r0, [fp, #-8]
   19198:	ldr	r3, [fp, #-8]
   1919c:	sub	r3, r3, #33	; 0x21
   191a0:	cmp	r3, #93	; 0x5d
   191a4:	bhi	191b0 <__assert_fail@plt+0x823c>
   191a8:	mov	r3, #1
   191ac:	b	191b4 <__assert_fail@plt+0x8240>
   191b0:	mov	r3, #0
   191b4:	mov	r0, r3
   191b8:	add	sp, fp, #0
   191bc:	pop	{fp}		; (ldr fp, [sp], #4)
   191c0:	bx	lr
   191c4:	push	{fp}		; (str fp, [sp, #-4]!)
   191c8:	add	fp, sp, #0
   191cc:	sub	sp, sp, #12
   191d0:	str	r0, [fp, #-8]
   191d4:	ldr	r3, [fp, #-8]
   191d8:	sub	r3, r3, #97	; 0x61
   191dc:	cmp	r3, #25
   191e0:	bhi	191ec <__assert_fail@plt+0x8278>
   191e4:	mov	r3, #1
   191e8:	b	191f0 <__assert_fail@plt+0x827c>
   191ec:	mov	r3, #0
   191f0:	mov	r0, r3
   191f4:	add	sp, fp, #0
   191f8:	pop	{fp}		; (ldr fp, [sp], #4)
   191fc:	bx	lr
   19200:	push	{fp}		; (str fp, [sp, #-4]!)
   19204:	add	fp, sp, #0
   19208:	sub	sp, sp, #12
   1920c:	str	r0, [fp, #-8]
   19210:	ldr	r3, [fp, #-8]
   19214:	sub	r3, r3, #32
   19218:	cmp	r3, #94	; 0x5e
   1921c:	bhi	19228 <__assert_fail@plt+0x82b4>
   19220:	mov	r3, #1
   19224:	b	1922c <__assert_fail@plt+0x82b8>
   19228:	mov	r3, #0
   1922c:	mov	r0, r3
   19230:	add	sp, fp, #0
   19234:	pop	{fp}		; (ldr fp, [sp], #4)
   19238:	bx	lr
   1923c:	push	{fp}		; (str fp, [sp, #-4]!)
   19240:	add	fp, sp, #0
   19244:	sub	sp, sp, #12
   19248:	str	r0, [fp, #-8]
   1924c:	ldr	r3, [fp, #-8]
   19250:	cmp	r3, #64	; 0x40
   19254:	bgt	19270 <__assert_fail@plt+0x82fc>
   19258:	cmp	r3, #58	; 0x3a
   1925c:	bge	1928c <__assert_fail@plt+0x8318>
   19260:	sub	r3, r3, #33	; 0x21
   19264:	cmp	r3, #14
   19268:	bhi	19294 <__assert_fail@plt+0x8320>
   1926c:	b	1928c <__assert_fail@plt+0x8318>
   19270:	cmp	r3, #91	; 0x5b
   19274:	blt	19294 <__assert_fail@plt+0x8320>
   19278:	cmp	r3, #96	; 0x60
   1927c:	ble	1928c <__assert_fail@plt+0x8318>
   19280:	sub	r3, r3, #123	; 0x7b
   19284:	cmp	r3, #3
   19288:	bhi	19294 <__assert_fail@plt+0x8320>
   1928c:	mov	r3, #1
   19290:	b	19298 <__assert_fail@plt+0x8324>
   19294:	mov	r3, #0
   19298:	mov	r0, r3
   1929c:	add	sp, fp, #0
   192a0:	pop	{fp}		; (ldr fp, [sp], #4)
   192a4:	bx	lr
   192a8:	push	{fp}		; (str fp, [sp, #-4]!)
   192ac:	add	fp, sp, #0
   192b0:	sub	sp, sp, #12
   192b4:	str	r0, [fp, #-8]
   192b8:	ldr	r3, [fp, #-8]
   192bc:	cmp	r3, #9
   192c0:	blt	192dc <__assert_fail@plt+0x8368>
   192c4:	cmp	r3, #13
   192c8:	ble	192d4 <__assert_fail@plt+0x8360>
   192cc:	cmp	r3, #32
   192d0:	bne	192dc <__assert_fail@plt+0x8368>
   192d4:	mov	r3, #1
   192d8:	b	192e0 <__assert_fail@plt+0x836c>
   192dc:	mov	r3, #0
   192e0:	mov	r0, r3
   192e4:	add	sp, fp, #0
   192e8:	pop	{fp}		; (ldr fp, [sp], #4)
   192ec:	bx	lr
   192f0:	push	{fp}		; (str fp, [sp, #-4]!)
   192f4:	add	fp, sp, #0
   192f8:	sub	sp, sp, #12
   192fc:	str	r0, [fp, #-8]
   19300:	ldr	r3, [fp, #-8]
   19304:	sub	r3, r3, #65	; 0x41
   19308:	cmp	r3, #25
   1930c:	bhi	19318 <__assert_fail@plt+0x83a4>
   19310:	mov	r3, #1
   19314:	b	1931c <__assert_fail@plt+0x83a8>
   19318:	mov	r3, #0
   1931c:	mov	r0, r3
   19320:	add	sp, fp, #0
   19324:	pop	{fp}		; (ldr fp, [sp], #4)
   19328:	bx	lr
   1932c:	push	{fp}		; (str fp, [sp, #-4]!)
   19330:	add	fp, sp, #0
   19334:	sub	sp, sp, #12
   19338:	str	r0, [fp, #-8]
   1933c:	ldr	r3, [fp, #-8]
   19340:	sub	r3, r3, #48	; 0x30
   19344:	cmp	r3, #54	; 0x36
   19348:	addls	pc, pc, r3, lsl #2
   1934c:	b	19434 <__assert_fail@plt+0x84c0>
   19350:	b	1942c <__assert_fail@plt+0x84b8>
   19354:	b	1942c <__assert_fail@plt+0x84b8>
   19358:	b	1942c <__assert_fail@plt+0x84b8>
   1935c:	b	1942c <__assert_fail@plt+0x84b8>
   19360:	b	1942c <__assert_fail@plt+0x84b8>
   19364:	b	1942c <__assert_fail@plt+0x84b8>
   19368:	b	1942c <__assert_fail@plt+0x84b8>
   1936c:	b	1942c <__assert_fail@plt+0x84b8>
   19370:	b	1942c <__assert_fail@plt+0x84b8>
   19374:	b	1942c <__assert_fail@plt+0x84b8>
   19378:	b	19434 <__assert_fail@plt+0x84c0>
   1937c:	b	19434 <__assert_fail@plt+0x84c0>
   19380:	b	19434 <__assert_fail@plt+0x84c0>
   19384:	b	19434 <__assert_fail@plt+0x84c0>
   19388:	b	19434 <__assert_fail@plt+0x84c0>
   1938c:	b	19434 <__assert_fail@plt+0x84c0>
   19390:	b	19434 <__assert_fail@plt+0x84c0>
   19394:	b	1942c <__assert_fail@plt+0x84b8>
   19398:	b	1942c <__assert_fail@plt+0x84b8>
   1939c:	b	1942c <__assert_fail@plt+0x84b8>
   193a0:	b	1942c <__assert_fail@plt+0x84b8>
   193a4:	b	1942c <__assert_fail@plt+0x84b8>
   193a8:	b	1942c <__assert_fail@plt+0x84b8>
   193ac:	b	19434 <__assert_fail@plt+0x84c0>
   193b0:	b	19434 <__assert_fail@plt+0x84c0>
   193b4:	b	19434 <__assert_fail@plt+0x84c0>
   193b8:	b	19434 <__assert_fail@plt+0x84c0>
   193bc:	b	19434 <__assert_fail@plt+0x84c0>
   193c0:	b	19434 <__assert_fail@plt+0x84c0>
   193c4:	b	19434 <__assert_fail@plt+0x84c0>
   193c8:	b	19434 <__assert_fail@plt+0x84c0>
   193cc:	b	19434 <__assert_fail@plt+0x84c0>
   193d0:	b	19434 <__assert_fail@plt+0x84c0>
   193d4:	b	19434 <__assert_fail@plt+0x84c0>
   193d8:	b	19434 <__assert_fail@plt+0x84c0>
   193dc:	b	19434 <__assert_fail@plt+0x84c0>
   193e0:	b	19434 <__assert_fail@plt+0x84c0>
   193e4:	b	19434 <__assert_fail@plt+0x84c0>
   193e8:	b	19434 <__assert_fail@plt+0x84c0>
   193ec:	b	19434 <__assert_fail@plt+0x84c0>
   193f0:	b	19434 <__assert_fail@plt+0x84c0>
   193f4:	b	19434 <__assert_fail@plt+0x84c0>
   193f8:	b	19434 <__assert_fail@plt+0x84c0>
   193fc:	b	19434 <__assert_fail@plt+0x84c0>
   19400:	b	19434 <__assert_fail@plt+0x84c0>
   19404:	b	19434 <__assert_fail@plt+0x84c0>
   19408:	b	19434 <__assert_fail@plt+0x84c0>
   1940c:	b	19434 <__assert_fail@plt+0x84c0>
   19410:	b	19434 <__assert_fail@plt+0x84c0>
   19414:	b	1942c <__assert_fail@plt+0x84b8>
   19418:	b	1942c <__assert_fail@plt+0x84b8>
   1941c:	b	1942c <__assert_fail@plt+0x84b8>
   19420:	b	1942c <__assert_fail@plt+0x84b8>
   19424:	b	1942c <__assert_fail@plt+0x84b8>
   19428:	b	1942c <__assert_fail@plt+0x84b8>
   1942c:	mov	r3, #1
   19430:	b	19438 <__assert_fail@plt+0x84c4>
   19434:	mov	r3, #0
   19438:	mov	r0, r3
   1943c:	add	sp, fp, #0
   19440:	pop	{fp}		; (ldr fp, [sp], #4)
   19444:	bx	lr
   19448:	push	{fp}		; (str fp, [sp, #-4]!)
   1944c:	add	fp, sp, #0
   19450:	sub	sp, sp, #12
   19454:	str	r0, [fp, #-8]
   19458:	ldr	r3, [fp, #-8]
   1945c:	sub	r3, r3, #65	; 0x41
   19460:	cmp	r3, #25
   19464:	bhi	19474 <__assert_fail@plt+0x8500>
   19468:	ldr	r3, [fp, #-8]
   1946c:	add	r3, r3, #32
   19470:	b	19478 <__assert_fail@plt+0x8504>
   19474:	ldr	r3, [fp, #-8]
   19478:	mov	r0, r3
   1947c:	add	sp, fp, #0
   19480:	pop	{fp}		; (ldr fp, [sp], #4)
   19484:	bx	lr
   19488:	push	{fp}		; (str fp, [sp, #-4]!)
   1948c:	add	fp, sp, #0
   19490:	sub	sp, sp, #12
   19494:	str	r0, [fp, #-8]
   19498:	ldr	r3, [fp, #-8]
   1949c:	sub	r3, r3, #97	; 0x61
   194a0:	cmp	r3, #25
   194a4:	bhi	194b4 <__assert_fail@plt+0x8540>
   194a8:	ldr	r3, [fp, #-8]
   194ac:	sub	r3, r3, #32
   194b0:	b	194b8 <__assert_fail@plt+0x8544>
   194b4:	ldr	r3, [fp, #-8]
   194b8:	mov	r0, r3
   194bc:	add	sp, fp, #0
   194c0:	pop	{fp}		; (ldr fp, [sp], #4)
   194c4:	bx	lr
   194c8:	push	{fp, lr}
   194cc:	add	fp, sp, #4
   194d0:	sub	sp, sp, #272	; 0x110
   194d4:	str	r0, [fp, #-272]	; 0xfffffef0
   194d8:	sub	r3, fp, #264	; 0x108
   194dc:	ldr	r2, [pc, #116]	; 19558 <__assert_fail@plt+0x85e4>
   194e0:	mov	r1, r3
   194e4:	ldr	r0, [fp, #-272]	; 0xfffffef0
   194e8:	bl	1966c <__assert_fail@plt+0x86f8>
   194ec:	mov	r3, r0
   194f0:	cmp	r3, #0
   194f4:	beq	19500 <__assert_fail@plt+0x858c>
   194f8:	mov	r3, #0
   194fc:	b	1954c <__assert_fail@plt+0x85d8>
   19500:	sub	r3, fp, #264	; 0x108
   19504:	ldr	r1, [pc, #80]	; 1955c <__assert_fail@plt+0x85e8>
   19508:	mov	r0, r3
   1950c:	bl	10d04 <strcmp@plt>
   19510:	mov	r3, r0
   19514:	cmp	r3, #0
   19518:	beq	19540 <__assert_fail@plt+0x85cc>
   1951c:	sub	r3, fp, #264	; 0x108
   19520:	ldr	r1, [pc, #56]	; 19560 <__assert_fail@plt+0x85ec>
   19524:	mov	r0, r3
   19528:	bl	10d04 <strcmp@plt>
   1952c:	mov	r3, r0
   19530:	cmp	r3, #0
   19534:	beq	19540 <__assert_fail@plt+0x85cc>
   19538:	mov	r3, #1
   1953c:	b	19544 <__assert_fail@plt+0x85d0>
   19540:	mov	r3, #0
   19544:	and	r3, r3, #1
   19548:	uxtb	r3, r3
   1954c:	mov	r0, r3
   19550:	sub	sp, fp, #4
   19554:	pop	{fp, pc}
   19558:	andeq	r0, r0, r1, lsl #2
   1955c:	muleq	r1, r0, ip
   19560:	muleq	r1, r4, ip
   19564:	push	{fp, lr}
   19568:	add	fp, sp, #4
   1956c:	sub	sp, sp, #16
   19570:	str	r0, [fp, #-16]
   19574:	mov	r1, #0
   19578:	ldr	r0, [fp, #-16]
   1957c:	bl	10f14 <setlocale@plt>
   19580:	str	r0, [fp, #-8]
   19584:	ldr	r3, [fp, #-8]
   19588:	mov	r0, r3
   1958c:	sub	sp, fp, #4
   19590:	pop	{fp, pc}
   19594:	push	{fp, lr}
   19598:	add	fp, sp, #4
   1959c:	sub	sp, sp, #24
   195a0:	str	r0, [fp, #-16]
   195a4:	str	r1, [fp, #-20]	; 0xffffffec
   195a8:	str	r2, [fp, #-24]	; 0xffffffe8
   195ac:	ldr	r0, [fp, #-16]
   195b0:	bl	19564 <__assert_fail@plt+0x85f0>
   195b4:	str	r0, [fp, #-8]
   195b8:	ldr	r3, [fp, #-8]
   195bc:	cmp	r3, #0
   195c0:	bne	195e4 <__assert_fail@plt+0x8670>
   195c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   195c8:	cmp	r3, #0
   195cc:	beq	195dc <__assert_fail@plt+0x8668>
   195d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   195d4:	mov	r2, #0
   195d8:	strb	r2, [r3]
   195dc:	mov	r3, #22
   195e0:	b	19660 <__assert_fail@plt+0x86ec>
   195e4:	ldr	r0, [fp, #-8]
   195e8:	bl	10e84 <strlen@plt>
   195ec:	str	r0, [fp, #-12]
   195f0:	ldr	r2, [fp, #-12]
   195f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   195f8:	cmp	r2, r3
   195fc:	bcs	19620 <__assert_fail@plt+0x86ac>
   19600:	ldr	r3, [fp, #-12]
   19604:	add	r3, r3, #1
   19608:	mov	r2, r3
   1960c:	ldr	r1, [fp, #-8]
   19610:	ldr	r0, [fp, #-20]	; 0xffffffec
   19614:	bl	10d4c <memcpy@plt>
   19618:	mov	r3, #0
   1961c:	b	19660 <__assert_fail@plt+0x86ec>
   19620:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19624:	cmp	r3, #0
   19628:	beq	1965c <__assert_fail@plt+0x86e8>
   1962c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19630:	sub	r3, r3, #1
   19634:	mov	r2, r3
   19638:	ldr	r1, [fp, #-8]
   1963c:	ldr	r0, [fp, #-20]	; 0xffffffec
   19640:	bl	10d4c <memcpy@plt>
   19644:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19648:	sub	r3, r3, #1
   1964c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19650:	add	r3, r2, r3
   19654:	mov	r2, #0
   19658:	strb	r2, [r3]
   1965c:	mov	r3, #34	; 0x22
   19660:	mov	r0, r3
   19664:	sub	sp, fp, #4
   19668:	pop	{fp, pc}
   1966c:	push	{fp, lr}
   19670:	add	fp, sp, #4
   19674:	sub	sp, sp, #16
   19678:	str	r0, [fp, #-8]
   1967c:	str	r1, [fp, #-12]
   19680:	str	r2, [fp, #-16]
   19684:	ldr	r2, [fp, #-16]
   19688:	ldr	r1, [fp, #-12]
   1968c:	ldr	r0, [fp, #-8]
   19690:	bl	19594 <__assert_fail@plt+0x8620>
   19694:	mov	r3, r0
   19698:	mov	r0, r3
   1969c:	sub	sp, fp, #4
   196a0:	pop	{fp, pc}
   196a4:	push	{fp, lr}
   196a8:	add	fp, sp, #4
   196ac:	sub	sp, sp, #8
   196b0:	str	r0, [fp, #-8]
   196b4:	ldr	r0, [fp, #-8]
   196b8:	bl	19564 <__assert_fail@plt+0x85f0>
   196bc:	mov	r3, r0
   196c0:	mov	r0, r3
   196c4:	sub	sp, fp, #4
   196c8:	pop	{fp, pc}
   196cc:	subs	r2, r1, #1
   196d0:	bxeq	lr
   196d4:	bcc	198ac <__assert_fail@plt+0x8938>
   196d8:	cmp	r0, r1
   196dc:	bls	19890 <__assert_fail@plt+0x891c>
   196e0:	tst	r1, r2
   196e4:	beq	1989c <__assert_fail@plt+0x8928>
   196e8:	clz	r3, r0
   196ec:	clz	r2, r1
   196f0:	sub	r3, r2, r3
   196f4:	rsbs	r3, r3, #31
   196f8:	addne	r3, r3, r3, lsl #1
   196fc:	mov	r2, #0
   19700:	addne	pc, pc, r3, lsl #2
   19704:	nop			; (mov r0, r0)
   19708:	cmp	r0, r1, lsl #31
   1970c:	adc	r2, r2, r2
   19710:	subcs	r0, r0, r1, lsl #31
   19714:	cmp	r0, r1, lsl #30
   19718:	adc	r2, r2, r2
   1971c:	subcs	r0, r0, r1, lsl #30
   19720:	cmp	r0, r1, lsl #29
   19724:	adc	r2, r2, r2
   19728:	subcs	r0, r0, r1, lsl #29
   1972c:	cmp	r0, r1, lsl #28
   19730:	adc	r2, r2, r2
   19734:	subcs	r0, r0, r1, lsl #28
   19738:	cmp	r0, r1, lsl #27
   1973c:	adc	r2, r2, r2
   19740:	subcs	r0, r0, r1, lsl #27
   19744:	cmp	r0, r1, lsl #26
   19748:	adc	r2, r2, r2
   1974c:	subcs	r0, r0, r1, lsl #26
   19750:	cmp	r0, r1, lsl #25
   19754:	adc	r2, r2, r2
   19758:	subcs	r0, r0, r1, lsl #25
   1975c:	cmp	r0, r1, lsl #24
   19760:	adc	r2, r2, r2
   19764:	subcs	r0, r0, r1, lsl #24
   19768:	cmp	r0, r1, lsl #23
   1976c:	adc	r2, r2, r2
   19770:	subcs	r0, r0, r1, lsl #23
   19774:	cmp	r0, r1, lsl #22
   19778:	adc	r2, r2, r2
   1977c:	subcs	r0, r0, r1, lsl #22
   19780:	cmp	r0, r1, lsl #21
   19784:	adc	r2, r2, r2
   19788:	subcs	r0, r0, r1, lsl #21
   1978c:	cmp	r0, r1, lsl #20
   19790:	adc	r2, r2, r2
   19794:	subcs	r0, r0, r1, lsl #20
   19798:	cmp	r0, r1, lsl #19
   1979c:	adc	r2, r2, r2
   197a0:	subcs	r0, r0, r1, lsl #19
   197a4:	cmp	r0, r1, lsl #18
   197a8:	adc	r2, r2, r2
   197ac:	subcs	r0, r0, r1, lsl #18
   197b0:	cmp	r0, r1, lsl #17
   197b4:	adc	r2, r2, r2
   197b8:	subcs	r0, r0, r1, lsl #17
   197bc:	cmp	r0, r1, lsl #16
   197c0:	adc	r2, r2, r2
   197c4:	subcs	r0, r0, r1, lsl #16
   197c8:	cmp	r0, r1, lsl #15
   197cc:	adc	r2, r2, r2
   197d0:	subcs	r0, r0, r1, lsl #15
   197d4:	cmp	r0, r1, lsl #14
   197d8:	adc	r2, r2, r2
   197dc:	subcs	r0, r0, r1, lsl #14
   197e0:	cmp	r0, r1, lsl #13
   197e4:	adc	r2, r2, r2
   197e8:	subcs	r0, r0, r1, lsl #13
   197ec:	cmp	r0, r1, lsl #12
   197f0:	adc	r2, r2, r2
   197f4:	subcs	r0, r0, r1, lsl #12
   197f8:	cmp	r0, r1, lsl #11
   197fc:	adc	r2, r2, r2
   19800:	subcs	r0, r0, r1, lsl #11
   19804:	cmp	r0, r1, lsl #10
   19808:	adc	r2, r2, r2
   1980c:	subcs	r0, r0, r1, lsl #10
   19810:	cmp	r0, r1, lsl #9
   19814:	adc	r2, r2, r2
   19818:	subcs	r0, r0, r1, lsl #9
   1981c:	cmp	r0, r1, lsl #8
   19820:	adc	r2, r2, r2
   19824:	subcs	r0, r0, r1, lsl #8
   19828:	cmp	r0, r1, lsl #7
   1982c:	adc	r2, r2, r2
   19830:	subcs	r0, r0, r1, lsl #7
   19834:	cmp	r0, r1, lsl #6
   19838:	adc	r2, r2, r2
   1983c:	subcs	r0, r0, r1, lsl #6
   19840:	cmp	r0, r1, lsl #5
   19844:	adc	r2, r2, r2
   19848:	subcs	r0, r0, r1, lsl #5
   1984c:	cmp	r0, r1, lsl #4
   19850:	adc	r2, r2, r2
   19854:	subcs	r0, r0, r1, lsl #4
   19858:	cmp	r0, r1, lsl #3
   1985c:	adc	r2, r2, r2
   19860:	subcs	r0, r0, r1, lsl #3
   19864:	cmp	r0, r1, lsl #2
   19868:	adc	r2, r2, r2
   1986c:	subcs	r0, r0, r1, lsl #2
   19870:	cmp	r0, r1, lsl #1
   19874:	adc	r2, r2, r2
   19878:	subcs	r0, r0, r1, lsl #1
   1987c:	cmp	r0, r1
   19880:	adc	r2, r2, r2
   19884:	subcs	r0, r0, r1
   19888:	mov	r0, r2
   1988c:	bx	lr
   19890:	moveq	r0, #1
   19894:	movne	r0, #0
   19898:	bx	lr
   1989c:	clz	r2, r1
   198a0:	rsb	r2, r2, #31
   198a4:	lsr	r0, r0, r2
   198a8:	bx	lr
   198ac:	cmp	r0, #0
   198b0:	mvnne	r0, #0
   198b4:	b	19c28 <__assert_fail@plt+0x8cb4>
   198b8:	cmp	r1, #0
   198bc:	beq	198ac <__assert_fail@plt+0x8938>
   198c0:	push	{r0, r1, lr}
   198c4:	bl	196cc <__assert_fail@plt+0x8758>
   198c8:	pop	{r1, r2, lr}
   198cc:	mul	r3, r2, r0
   198d0:	sub	r1, r1, r3
   198d4:	bx	lr
   198d8:	cmp	r1, #0
   198dc:	beq	19ae8 <__assert_fail@plt+0x8b74>
   198e0:	eor	ip, r0, r1
   198e4:	rsbmi	r1, r1, #0
   198e8:	subs	r2, r1, #1
   198ec:	beq	19ab4 <__assert_fail@plt+0x8b40>
   198f0:	movs	r3, r0
   198f4:	rsbmi	r3, r0, #0
   198f8:	cmp	r3, r1
   198fc:	bls	19ac0 <__assert_fail@plt+0x8b4c>
   19900:	tst	r1, r2
   19904:	beq	19ad0 <__assert_fail@plt+0x8b5c>
   19908:	clz	r2, r3
   1990c:	clz	r0, r1
   19910:	sub	r2, r0, r2
   19914:	rsbs	r2, r2, #31
   19918:	addne	r2, r2, r2, lsl #1
   1991c:	mov	r0, #0
   19920:	addne	pc, pc, r2, lsl #2
   19924:	nop			; (mov r0, r0)
   19928:	cmp	r3, r1, lsl #31
   1992c:	adc	r0, r0, r0
   19930:	subcs	r3, r3, r1, lsl #31
   19934:	cmp	r3, r1, lsl #30
   19938:	adc	r0, r0, r0
   1993c:	subcs	r3, r3, r1, lsl #30
   19940:	cmp	r3, r1, lsl #29
   19944:	adc	r0, r0, r0
   19948:	subcs	r3, r3, r1, lsl #29
   1994c:	cmp	r3, r1, lsl #28
   19950:	adc	r0, r0, r0
   19954:	subcs	r3, r3, r1, lsl #28
   19958:	cmp	r3, r1, lsl #27
   1995c:	adc	r0, r0, r0
   19960:	subcs	r3, r3, r1, lsl #27
   19964:	cmp	r3, r1, lsl #26
   19968:	adc	r0, r0, r0
   1996c:	subcs	r3, r3, r1, lsl #26
   19970:	cmp	r3, r1, lsl #25
   19974:	adc	r0, r0, r0
   19978:	subcs	r3, r3, r1, lsl #25
   1997c:	cmp	r3, r1, lsl #24
   19980:	adc	r0, r0, r0
   19984:	subcs	r3, r3, r1, lsl #24
   19988:	cmp	r3, r1, lsl #23
   1998c:	adc	r0, r0, r0
   19990:	subcs	r3, r3, r1, lsl #23
   19994:	cmp	r3, r1, lsl #22
   19998:	adc	r0, r0, r0
   1999c:	subcs	r3, r3, r1, lsl #22
   199a0:	cmp	r3, r1, lsl #21
   199a4:	adc	r0, r0, r0
   199a8:	subcs	r3, r3, r1, lsl #21
   199ac:	cmp	r3, r1, lsl #20
   199b0:	adc	r0, r0, r0
   199b4:	subcs	r3, r3, r1, lsl #20
   199b8:	cmp	r3, r1, lsl #19
   199bc:	adc	r0, r0, r0
   199c0:	subcs	r3, r3, r1, lsl #19
   199c4:	cmp	r3, r1, lsl #18
   199c8:	adc	r0, r0, r0
   199cc:	subcs	r3, r3, r1, lsl #18
   199d0:	cmp	r3, r1, lsl #17
   199d4:	adc	r0, r0, r0
   199d8:	subcs	r3, r3, r1, lsl #17
   199dc:	cmp	r3, r1, lsl #16
   199e0:	adc	r0, r0, r0
   199e4:	subcs	r3, r3, r1, lsl #16
   199e8:	cmp	r3, r1, lsl #15
   199ec:	adc	r0, r0, r0
   199f0:	subcs	r3, r3, r1, lsl #15
   199f4:	cmp	r3, r1, lsl #14
   199f8:	adc	r0, r0, r0
   199fc:	subcs	r3, r3, r1, lsl #14
   19a00:	cmp	r3, r1, lsl #13
   19a04:	adc	r0, r0, r0
   19a08:	subcs	r3, r3, r1, lsl #13
   19a0c:	cmp	r3, r1, lsl #12
   19a10:	adc	r0, r0, r0
   19a14:	subcs	r3, r3, r1, lsl #12
   19a18:	cmp	r3, r1, lsl #11
   19a1c:	adc	r0, r0, r0
   19a20:	subcs	r3, r3, r1, lsl #11
   19a24:	cmp	r3, r1, lsl #10
   19a28:	adc	r0, r0, r0
   19a2c:	subcs	r3, r3, r1, lsl #10
   19a30:	cmp	r3, r1, lsl #9
   19a34:	adc	r0, r0, r0
   19a38:	subcs	r3, r3, r1, lsl #9
   19a3c:	cmp	r3, r1, lsl #8
   19a40:	adc	r0, r0, r0
   19a44:	subcs	r3, r3, r1, lsl #8
   19a48:	cmp	r3, r1, lsl #7
   19a4c:	adc	r0, r0, r0
   19a50:	subcs	r3, r3, r1, lsl #7
   19a54:	cmp	r3, r1, lsl #6
   19a58:	adc	r0, r0, r0
   19a5c:	subcs	r3, r3, r1, lsl #6
   19a60:	cmp	r3, r1, lsl #5
   19a64:	adc	r0, r0, r0
   19a68:	subcs	r3, r3, r1, lsl #5
   19a6c:	cmp	r3, r1, lsl #4
   19a70:	adc	r0, r0, r0
   19a74:	subcs	r3, r3, r1, lsl #4
   19a78:	cmp	r3, r1, lsl #3
   19a7c:	adc	r0, r0, r0
   19a80:	subcs	r3, r3, r1, lsl #3
   19a84:	cmp	r3, r1, lsl #2
   19a88:	adc	r0, r0, r0
   19a8c:	subcs	r3, r3, r1, lsl #2
   19a90:	cmp	r3, r1, lsl #1
   19a94:	adc	r0, r0, r0
   19a98:	subcs	r3, r3, r1, lsl #1
   19a9c:	cmp	r3, r1
   19aa0:	adc	r0, r0, r0
   19aa4:	subcs	r3, r3, r1
   19aa8:	cmp	ip, #0
   19aac:	rsbmi	r0, r0, #0
   19ab0:	bx	lr
   19ab4:	teq	ip, r0
   19ab8:	rsbmi	r0, r0, #0
   19abc:	bx	lr
   19ac0:	movcc	r0, #0
   19ac4:	asreq	r0, ip, #31
   19ac8:	orreq	r0, r0, #1
   19acc:	bx	lr
   19ad0:	clz	r2, r1
   19ad4:	rsb	r2, r2, #31
   19ad8:	cmp	ip, #0
   19adc:	lsr	r0, r3, r2
   19ae0:	rsbmi	r0, r0, #0
   19ae4:	bx	lr
   19ae8:	cmp	r0, #0
   19aec:	mvngt	r0, #-2147483648	; 0x80000000
   19af0:	movlt	r0, #-2147483648	; 0x80000000
   19af4:	b	19c28 <__assert_fail@plt+0x8cb4>
   19af8:	cmp	r1, #0
   19afc:	beq	19ae8 <__assert_fail@plt+0x8b74>
   19b00:	push	{r0, r1, lr}
   19b04:	bl	198e0 <__assert_fail@plt+0x896c>
   19b08:	pop	{r1, r2, lr}
   19b0c:	mul	r3, r2, r0
   19b10:	sub	r1, r1, r3
   19b14:	bx	lr
   19b18:	cmp	r3, #0
   19b1c:	cmpeq	r2, #0
   19b20:	bne	19b44 <__assert_fail@plt+0x8bd0>
   19b24:	cmp	r1, #0
   19b28:	movlt	r1, #-2147483648	; 0x80000000
   19b2c:	movlt	r0, #0
   19b30:	blt	19b40 <__assert_fail@plt+0x8bcc>
   19b34:	cmpeq	r0, #0
   19b38:	mvnne	r1, #-2147483648	; 0x80000000
   19b3c:	mvnne	r0, #0
   19b40:	b	19c28 <__assert_fail@plt+0x8cb4>
   19b44:	sub	sp, sp, #8
   19b48:	push	{sp, lr}
   19b4c:	cmp	r1, #0
   19b50:	blt	19b70 <__assert_fail@plt+0x8bfc>
   19b54:	cmp	r3, #0
   19b58:	blt	19ba4 <__assert_fail@plt+0x8c30>
   19b5c:	bl	19c38 <__assert_fail@plt+0x8cc4>
   19b60:	ldr	lr, [sp, #4]
   19b64:	add	sp, sp, #8
   19b68:	pop	{r2, r3}
   19b6c:	bx	lr
   19b70:	rsbs	r0, r0, #0
   19b74:	sbc	r1, r1, r1, lsl #1
   19b78:	cmp	r3, #0
   19b7c:	blt	19bc8 <__assert_fail@plt+0x8c54>
   19b80:	bl	19c38 <__assert_fail@plt+0x8cc4>
   19b84:	ldr	lr, [sp, #4]
   19b88:	add	sp, sp, #8
   19b8c:	pop	{r2, r3}
   19b90:	rsbs	r0, r0, #0
   19b94:	sbc	r1, r1, r1, lsl #1
   19b98:	rsbs	r2, r2, #0
   19b9c:	sbc	r3, r3, r3, lsl #1
   19ba0:	bx	lr
   19ba4:	rsbs	r2, r2, #0
   19ba8:	sbc	r3, r3, r3, lsl #1
   19bac:	bl	19c38 <__assert_fail@plt+0x8cc4>
   19bb0:	ldr	lr, [sp, #4]
   19bb4:	add	sp, sp, #8
   19bb8:	pop	{r2, r3}
   19bbc:	rsbs	r0, r0, #0
   19bc0:	sbc	r1, r1, r1, lsl #1
   19bc4:	bx	lr
   19bc8:	rsbs	r2, r2, #0
   19bcc:	sbc	r3, r3, r3, lsl #1
   19bd0:	bl	19c38 <__assert_fail@plt+0x8cc4>
   19bd4:	ldr	lr, [sp, #4]
   19bd8:	add	sp, sp, #8
   19bdc:	pop	{r2, r3}
   19be0:	rsbs	r2, r2, #0
   19be4:	sbc	r3, r3, r3, lsl #1
   19be8:	bx	lr
   19bec:	cmp	r3, #0
   19bf0:	cmpeq	r2, #0
   19bf4:	bne	19c0c <__assert_fail@plt+0x8c98>
   19bf8:	cmp	r1, #0
   19bfc:	cmpeq	r0, #0
   19c00:	mvnne	r1, #0
   19c04:	mvnne	r0, #0
   19c08:	b	19c28 <__assert_fail@plt+0x8cb4>
   19c0c:	sub	sp, sp, #8
   19c10:	push	{sp, lr}
   19c14:	bl	19c38 <__assert_fail@plt+0x8cc4>
   19c18:	ldr	lr, [sp, #4]
   19c1c:	add	sp, sp, #8
   19c20:	pop	{r2, r3}
   19c24:	bx	lr
   19c28:	push	{r1, lr}
   19c2c:	mov	r0, #8
   19c30:	bl	10cf8 <raise@plt>
   19c34:	pop	{r1, pc}
   19c38:	cmp	r1, r3
   19c3c:	push	{r4, r5, r6, r7, r8, r9, lr}
   19c40:	cmpeq	r0, r2
   19c44:	mov	r4, r0
   19c48:	mov	r5, r1
   19c4c:	ldr	r9, [sp, #28]
   19c50:	movcc	r0, #0
   19c54:	movcc	r1, #0
   19c58:	bcc	19d50 <__assert_fail@plt+0x8ddc>
   19c5c:	cmp	r3, #0
   19c60:	clzeq	ip, r2
   19c64:	clzne	ip, r3
   19c68:	addeq	ip, ip, #32
   19c6c:	cmp	r5, #0
   19c70:	clzeq	r1, r4
   19c74:	addeq	r1, r1, #32
   19c78:	clzne	r1, r5
   19c7c:	sub	ip, ip, r1
   19c80:	sub	lr, ip, #32
   19c84:	lsl	r7, r3, ip
   19c88:	rsb	r8, ip, #32
   19c8c:	orr	r7, r7, r2, lsl lr
   19c90:	orr	r7, r7, r2, lsr r8
   19c94:	lsl	r6, r2, ip
   19c98:	cmp	r5, r7
   19c9c:	cmpeq	r4, r6
   19ca0:	movcc	r0, #0
   19ca4:	movcc	r1, #0
   19ca8:	bcc	19cc4 <__assert_fail@plt+0x8d50>
   19cac:	mov	r3, #1
   19cb0:	subs	r4, r4, r6
   19cb4:	lsl	r1, r3, lr
   19cb8:	lsl	r0, r3, ip
   19cbc:	orr	r1, r1, r3, lsr r8
   19cc0:	sbc	r5, r5, r7
   19cc4:	cmp	ip, #0
   19cc8:	beq	19d50 <__assert_fail@plt+0x8ddc>
   19ccc:	lsrs	r3, r7, #1
   19cd0:	rrx	r2, r6
   19cd4:	mov	r6, ip
   19cd8:	b	19cfc <__assert_fail@plt+0x8d88>
   19cdc:	subs	r4, r4, r2
   19ce0:	sbc	r5, r5, r3
   19ce4:	adds	r4, r4, r4
   19ce8:	adc	r5, r5, r5
   19cec:	adds	r4, r4, #1
   19cf0:	adc	r5, r5, #0
   19cf4:	subs	r6, r6, #1
   19cf8:	beq	19d18 <__assert_fail@plt+0x8da4>
   19cfc:	cmp	r5, r3
   19d00:	cmpeq	r4, r2
   19d04:	bcs	19cdc <__assert_fail@plt+0x8d68>
   19d08:	adds	r4, r4, r4
   19d0c:	adc	r5, r5, r5
   19d10:	subs	r6, r6, #1
   19d14:	bne	19cfc <__assert_fail@plt+0x8d88>
   19d18:	lsr	r6, r4, ip
   19d1c:	lsr	r7, r5, ip
   19d20:	orr	r6, r6, r5, lsl r8
   19d24:	adds	r2, r0, r4
   19d28:	orr	r6, r6, r5, lsr lr
   19d2c:	adc	r3, r1, r5
   19d30:	lsl	r1, r7, ip
   19d34:	orr	r1, r1, r6, lsl lr
   19d38:	lsl	r0, r6, ip
   19d3c:	orr	r1, r1, r6, lsr r8
   19d40:	subs	r0, r2, r0
   19d44:	mov	r4, r6
   19d48:	mov	r5, r7
   19d4c:	sbc	r1, r3, r1
   19d50:	cmp	r9, #0
   19d54:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   19d58:	strd	r4, [r9]
   19d5c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19d60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19d64:	mov	r7, r0
   19d68:	ldr	r6, [pc, #72]	; 19db8 <__assert_fail@plt+0x8e44>
   19d6c:	ldr	r5, [pc, #72]	; 19dbc <__assert_fail@plt+0x8e48>
   19d70:	add	r6, pc, r6
   19d74:	add	r5, pc, r5
   19d78:	sub	r6, r6, r5
   19d7c:	mov	r8, r1
   19d80:	mov	r9, r2
   19d84:	bl	10cc0 <calloc@plt-0x20>
   19d88:	asrs	r6, r6, #2
   19d8c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19d90:	mov	r4, #0
   19d94:	add	r4, r4, #1
   19d98:	ldr	r3, [r5], #4
   19d9c:	mov	r2, r9
   19da0:	mov	r1, r8
   19da4:	mov	r0, r7
   19da8:	blx	r3
   19dac:	cmp	r6, r4
   19db0:	bne	19d94 <__assert_fail@plt+0x8e20>
   19db4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19db8:	muleq	r1, r8, r1
   19dbc:	muleq	r1, r0, r1
   19dc0:	bx	lr
   19dc4:	ldr	r3, [pc, #12]	; 19dd8 <__assert_fail@plt+0x8e64>
   19dc8:	mov	r1, #0
   19dcc:	add	r3, pc, r3
   19dd0:	ldr	r2, [r3]
   19dd4:	b	10ec0 <__cxa_atexit@plt>
   19dd8:	andeq	r1, r1, r0, lsr #6
   19ddc:	mov	r2, r1
   19de0:	mov	r1, r0
   19de4:	mov	r0, #3
   19de8:	b	10db8 <__fxstat64@plt>

Disassembly of section .fini:

00019dec <.fini>:
   19dec:	push	{r3, lr}
   19df0:	pop	{r3, pc}
