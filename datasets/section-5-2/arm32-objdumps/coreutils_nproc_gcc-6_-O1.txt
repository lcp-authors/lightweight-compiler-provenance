
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010c44 <.init>:
   10c44:	push	{r3, lr}
   10c48:	bl	10f04 <__assert_fail@plt+0x48>
   10c4c:	pop	{r3, pc}

Disassembly of section .plt:

00010c50 <calloc@plt-0x14>:
   10c50:	push	{lr}		; (str lr, [sp, #-4]!)
   10c54:	ldr	lr, [pc, #4]	; 10c60 <calloc@plt-0x4>
   10c58:	add	lr, pc, lr
   10c5c:	ldr	pc, [lr, #8]!
   10c60:	andeq	r5, r1, r0, lsr #7

00010c64 <calloc@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #86016	; 0x15000
   10c6c:	ldr	pc, [ip, #928]!	; 0x3a0

00010c70 <fputs_unlocked@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #86016	; 0x15000
   10c78:	ldr	pc, [ip, #920]!	; 0x398

00010c7c <raise@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #86016	; 0x15000
   10c84:	ldr	pc, [ip, #912]!	; 0x390

00010c88 <strcmp@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #86016	; 0x15000
   10c90:	ldr	pc, [ip, #904]!	; 0x388

00010c94 <fflush@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #86016	; 0x15000
   10c9c:	ldr	pc, [ip, #896]!	; 0x380

00010ca0 <free@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #86016	; 0x15000
   10ca8:	ldr	pc, [ip, #888]!	; 0x378

00010cac <_exit@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #86016	; 0x15000
   10cb4:	ldr	pc, [ip, #880]!	; 0x370

00010cb8 <memcpy@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #86016	; 0x15000
   10cc0:	ldr	pc, [ip, #872]!	; 0x368

00010cc4 <__strtoull_internal@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #86016	; 0x15000
   10ccc:	ldr	pc, [ip, #864]!	; 0x360

00010cd0 <mbsinit@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #86016	; 0x15000
   10cd8:	ldr	pc, [ip, #856]!	; 0x358

00010cdc <__sched_cpucount@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #86016	; 0x15000
   10ce4:	ldr	pc, [ip, #848]!	; 0x350

00010ce8 <memcmp@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #86016	; 0x15000
   10cf0:	ldr	pc, [ip, #840]!	; 0x348

00010cf4 <fputc_unlocked@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #86016	; 0x15000
   10cfc:	ldr	pc, [ip, #832]!	; 0x340

00010d00 <dcgettext@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #86016	; 0x15000
   10d08:	ldr	pc, [ip, #824]!	; 0x338

00010d0c <sysconf@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #86016	; 0x15000
   10d14:	ldr	pc, [ip, #816]!	; 0x330

00010d18 <realloc@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #86016	; 0x15000
   10d20:	ldr	pc, [ip, #808]!	; 0x328

00010d24 <textdomain@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #86016	; 0x15000
   10d2c:	ldr	pc, [ip, #800]!	; 0x320

00010d30 <iswprint@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #86016	; 0x15000
   10d38:	ldr	pc, [ip, #792]!	; 0x318

00010d3c <fwrite@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #86016	; 0x15000
   10d44:	ldr	pc, [ip, #784]!	; 0x310

00010d48 <lseek64@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #86016	; 0x15000
   10d50:	ldr	pc, [ip, #776]!	; 0x308

00010d54 <__ctype_get_mb_cur_max@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #86016	; 0x15000
   10d5c:	ldr	pc, [ip, #768]!	; 0x300

00010d60 <__fpending@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #86016	; 0x15000
   10d68:	ldr	pc, [ip, #760]!	; 0x2f8

00010d6c <mbrtowc@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #86016	; 0x15000
   10d74:	ldr	pc, [ip, #752]!	; 0x2f0

00010d78 <error@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #86016	; 0x15000
   10d80:	ldr	pc, [ip, #744]!	; 0x2e8

00010d84 <getenv@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #86016	; 0x15000
   10d8c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d90 <malloc@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #86016	; 0x15000
   10d98:	ldr	pc, [ip, #728]!	; 0x2d8

00010d9c <__libc_start_main@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #86016	; 0x15000
   10da4:	ldr	pc, [ip, #720]!	; 0x2d0

00010da8 <__freading@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #86016	; 0x15000
   10db0:	ldr	pc, [ip, #712]!	; 0x2c8

00010db4 <__gmon_start__@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #86016	; 0x15000
   10dbc:	ldr	pc, [ip, #704]!	; 0x2c0

00010dc0 <getopt_long@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #86016	; 0x15000
   10dc8:	ldr	pc, [ip, #696]!	; 0x2b8

00010dcc <__ctype_b_loc@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #86016	; 0x15000
   10dd4:	ldr	pc, [ip, #688]!	; 0x2b0

00010dd8 <exit@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #86016	; 0x15000
   10de0:	ldr	pc, [ip, #680]!	; 0x2a8

00010de4 <strtoul@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #672]!	; 0x2a0

00010df0 <strlen@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #664]!	; 0x298

00010dfc <strchr@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #656]!	; 0x290

00010e08 <__errno_location@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #648]!	; 0x288

00010e14 <__cxa_atexit@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #640]!	; 0x280

00010e20 <memset@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #632]!	; 0x278

00010e2c <__printf_chk@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #624]!	; 0x270

00010e38 <fileno@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #616]!	; 0x268

00010e44 <__fprintf_chk@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #608]!	; 0x260

00010e50 <fclose@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #600]!	; 0x258

00010e5c <fseeko64@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #592]!	; 0x250

00010e68 <setlocale@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #584]!	; 0x248

00010e74 <strrchr@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #576]!	; 0x240

00010e80 <nl_langinfo@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #568]!	; 0x238

00010e8c <sched_getaffinity@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #560]!	; 0x230

00010e98 <bindtextdomain@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #552]!	; 0x228

00010ea4 <strncmp@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #544]!	; 0x220

00010eb0 <abort@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #536]!	; 0x218

00010ebc <__assert_fail@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #528]!	; 0x210

Disassembly of section .text:

00010ec8 <.text>:
   10ec8:	mov	fp, #0
   10ecc:	mov	lr, #0
   10ed0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ed4:	mov	r2, sp
   10ed8:	push	{r2}		; (str r2, [sp, #-4]!)
   10edc:	push	{r0}		; (str r0, [sp, #-4]!)
   10ee0:	ldr	ip, [pc, #16]	; 10ef8 <__assert_fail@plt+0x3c>
   10ee4:	push	{ip}		; (str ip, [sp, #-4]!)
   10ee8:	ldr	r0, [pc, #12]	; 10efc <__assert_fail@plt+0x40>
   10eec:	ldr	r3, [pc, #12]	; 10f00 <__assert_fail@plt+0x44>
   10ef0:	bl	10d9c <__libc_start_main@plt>
   10ef4:	bl	10eb0 <abort@plt>
   10ef8:	andeq	r5, r1, r8, lsl #2
   10efc:	andeq	r1, r1, r8, lsl r3
   10f00:	andeq	r5, r1, r8, lsr #1
   10f04:	ldr	r3, [pc, #20]	; 10f20 <__assert_fail@plt+0x64>
   10f08:	ldr	r2, [pc, #20]	; 10f24 <__assert_fail@plt+0x68>
   10f0c:	add	r3, pc, r3
   10f10:	ldr	r2, [r3, r2]
   10f14:	cmp	r2, #0
   10f18:	bxeq	lr
   10f1c:	b	10db4 <__gmon_start__@plt>
   10f20:	andeq	r5, r1, ip, ror #1
   10f24:	ldrdeq	r0, [r0], -r8
   10f28:	ldr	r3, [pc, #28]	; 10f4c <__assert_fail@plt+0x90>
   10f2c:	ldr	r0, [pc, #28]	; 10f50 <__assert_fail@plt+0x94>
   10f30:	sub	r3, r3, r0
   10f34:	cmp	r3, #6
   10f38:	bxls	lr
   10f3c:	ldr	r3, [pc, #16]	; 10f54 <__assert_fail@plt+0x98>
   10f40:	cmp	r3, #0
   10f44:	bxeq	lr
   10f48:	bx	r3
   10f4c:	andeq	r6, r2, pc, lsr #2
   10f50:	andeq	r6, r2, ip, lsr #2
   10f54:	andeq	r0, r0, r0
   10f58:	ldr	r1, [pc, #36]	; 10f84 <__assert_fail@plt+0xc8>
   10f5c:	ldr	r0, [pc, #36]	; 10f88 <__assert_fail@plt+0xcc>
   10f60:	sub	r1, r1, r0
   10f64:	asr	r1, r1, #2
   10f68:	add	r1, r1, r1, lsr #31
   10f6c:	asrs	r1, r1, #1
   10f70:	bxeq	lr
   10f74:	ldr	r3, [pc, #16]	; 10f8c <__assert_fail@plt+0xd0>
   10f78:	cmp	r3, #0
   10f7c:	bxeq	lr
   10f80:	bx	r3
   10f84:	andeq	r6, r2, ip, lsr #2
   10f88:	andeq	r6, r2, ip, lsr #2
   10f8c:	andeq	r0, r0, r0
   10f90:	push	{r4, lr}
   10f94:	ldr	r4, [pc, #24]	; 10fb4 <__assert_fail@plt+0xf8>
   10f98:	ldrb	r3, [r4]
   10f9c:	cmp	r3, #0
   10fa0:	popne	{r4, pc}
   10fa4:	bl	10f28 <__assert_fail@plt+0x6c>
   10fa8:	mov	r3, #1
   10fac:	strb	r3, [r4]
   10fb0:	pop	{r4, pc}
   10fb4:	andeq	r6, r2, ip, asr #2
   10fb8:	ldr	r0, [pc, #40]	; 10fe8 <__assert_fail@plt+0x12c>
   10fbc:	ldr	r3, [r0]
   10fc0:	cmp	r3, #0
   10fc4:	bne	10fcc <__assert_fail@plt+0x110>
   10fc8:	b	10f58 <__assert_fail@plt+0x9c>
   10fcc:	ldr	r3, [pc, #24]	; 10fec <__assert_fail@plt+0x130>
   10fd0:	cmp	r3, #0
   10fd4:	beq	10fc8 <__assert_fail@plt+0x10c>
   10fd8:	push	{r4, lr}
   10fdc:	blx	r3
   10fe0:	pop	{r4, lr}
   10fe4:	b	10f58 <__assert_fail@plt+0x9c>
   10fe8:	andeq	r5, r2, r4, lsl pc
   10fec:	andeq	r0, r0, r0
   10ff0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ff4:	sub	sp, sp, #60	; 0x3c
   10ff8:	subs	r6, r0, #0
   10ffc:	beq	11038 <__assert_fail@plt+0x17c>
   11000:	ldr	r3, [pc, #704]	; 112c8 <__assert_fail@plt+0x40c>
   11004:	ldr	r4, [r3]
   11008:	mov	r2, #5
   1100c:	ldr	r1, [pc, #696]	; 112cc <__assert_fail@plt+0x410>
   11010:	mov	r0, #0
   11014:	bl	10d00 <dcgettext@plt>
   11018:	ldr	r3, [pc, #688]	; 112d0 <__assert_fail@plt+0x414>
   1101c:	ldr	r3, [r3]
   11020:	mov	r2, r0
   11024:	mov	r1, #1
   11028:	mov	r0, r4
   1102c:	bl	10e44 <__fprintf_chk@plt>
   11030:	mov	r0, r6
   11034:	bl	10dd8 <exit@plt>
   11038:	mov	r2, #5
   1103c:	ldr	r1, [pc, #656]	; 112d4 <__assert_fail@plt+0x418>
   11040:	mov	r0, #0
   11044:	bl	10d00 <dcgettext@plt>
   11048:	ldr	r3, [pc, #640]	; 112d0 <__assert_fail@plt+0x414>
   1104c:	ldr	r2, [r3]
   11050:	mov	r1, r0
   11054:	mov	r0, #1
   11058:	bl	10e2c <__printf_chk@plt>
   1105c:	mov	r2, #5
   11060:	ldr	r1, [pc, #624]	; 112d8 <__assert_fail@plt+0x41c>
   11064:	mov	r0, #0
   11068:	bl	10d00 <dcgettext@plt>
   1106c:	ldr	r4, [pc, #616]	; 112dc <__assert_fail@plt+0x420>
   11070:	ldr	r1, [r4]
   11074:	bl	10c70 <fputs_unlocked@plt>
   11078:	mov	r2, #5
   1107c:	ldr	r1, [pc, #604]	; 112e0 <__assert_fail@plt+0x424>
   11080:	mov	r0, #0
   11084:	bl	10d00 <dcgettext@plt>
   11088:	ldr	r1, [r4]
   1108c:	bl	10c70 <fputs_unlocked@plt>
   11090:	mov	r2, #5
   11094:	ldr	r1, [pc, #584]	; 112e4 <__assert_fail@plt+0x428>
   11098:	mov	r0, #0
   1109c:	bl	10d00 <dcgettext@plt>
   110a0:	ldr	r1, [r4]
   110a4:	bl	10c70 <fputs_unlocked@plt>
   110a8:	mov	r2, #5
   110ac:	ldr	r1, [pc, #564]	; 112e8 <__assert_fail@plt+0x42c>
   110b0:	mov	r0, #0
   110b4:	bl	10d00 <dcgettext@plt>
   110b8:	ldr	r1, [r4]
   110bc:	bl	10c70 <fputs_unlocked@plt>
   110c0:	mov	ip, sp
   110c4:	ldr	lr, [pc, #544]	; 112ec <__assert_fail@plt+0x430>
   110c8:	ldm	lr!, {r0, r1, r2, r3}
   110cc:	stmia	ip!, {r0, r1, r2, r3}
   110d0:	ldm	lr!, {r0, r1, r2, r3}
   110d4:	stmia	ip!, {r0, r1, r2, r3}
   110d8:	ldm	lr!, {r0, r1, r2, r3}
   110dc:	stmia	ip!, {r0, r1, r2, r3}
   110e0:	ldm	lr, {r0, r1}
   110e4:	stm	ip, {r0, r1}
   110e8:	ldr	r1, [sp]
   110ec:	cmp	r1, #0
   110f0:	moveq	r4, sp
   110f4:	beq	1111c <__assert_fail@plt+0x260>
   110f8:	mov	r4, sp
   110fc:	ldr	r5, [pc, #492]	; 112f0 <__assert_fail@plt+0x434>
   11100:	mov	r0, r5
   11104:	bl	10c88 <strcmp@plt>
   11108:	cmp	r0, #0
   1110c:	beq	1111c <__assert_fail@plt+0x260>
   11110:	ldr	r1, [r4, #8]!
   11114:	cmp	r1, #0
   11118:	bne	11100 <__assert_fail@plt+0x244>
   1111c:	ldr	r4, [r4, #4]
   11120:	cmp	r4, #0
   11124:	beq	11238 <__assert_fail@plt+0x37c>
   11128:	mov	r2, #5
   1112c:	ldr	r1, [pc, #448]	; 112f4 <__assert_fail@plt+0x438>
   11130:	mov	r0, #0
   11134:	bl	10d00 <dcgettext@plt>
   11138:	ldr	r3, [pc, #440]	; 112f8 <__assert_fail@plt+0x43c>
   1113c:	ldr	r2, [pc, #440]	; 112fc <__assert_fail@plt+0x440>
   11140:	mov	r1, r0
   11144:	mov	r0, #1
   11148:	bl	10e2c <__printf_chk@plt>
   1114c:	mov	r1, #0
   11150:	mov	r0, #5
   11154:	bl	10e68 <setlocale@plt>
   11158:	cmp	r0, #0
   1115c:	beq	11174 <__assert_fail@plt+0x2b8>
   11160:	mov	r2, #3
   11164:	ldr	r1, [pc, #404]	; 11300 <__assert_fail@plt+0x444>
   11168:	bl	10ea4 <strncmp@plt>
   1116c:	cmp	r0, #0
   11170:	bne	111d4 <__assert_fail@plt+0x318>
   11174:	mov	r2, #5
   11178:	ldr	r1, [pc, #388]	; 11304 <__assert_fail@plt+0x448>
   1117c:	mov	r0, #0
   11180:	bl	10d00 <dcgettext@plt>
   11184:	ldr	r5, [pc, #356]	; 112f0 <__assert_fail@plt+0x434>
   11188:	mov	r3, r5
   1118c:	ldr	r2, [pc, #356]	; 112f8 <__assert_fail@plt+0x43c>
   11190:	mov	r1, r0
   11194:	mov	r0, #1
   11198:	bl	10e2c <__printf_chk@plt>
   1119c:	mov	r2, #5
   111a0:	ldr	r1, [pc, #352]	; 11308 <__assert_fail@plt+0x44c>
   111a4:	mov	r0, #0
   111a8:	bl	10d00 <dcgettext@plt>
   111ac:	mov	r1, r0
   111b0:	ldr	r2, [pc, #340]	; 1130c <__assert_fail@plt+0x450>
   111b4:	ldr	r3, [pc, #340]	; 11310 <__assert_fail@plt+0x454>
   111b8:	cmp	r4, r5
   111bc:	movne	r3, r2
   111c0:	mov	r2, r4
   111c4:	mov	r0, #1
   111c8:	bl	10e2c <__printf_chk@plt>
   111cc:	b	11030 <__assert_fail@plt+0x174>
   111d0:	ldr	r4, [pc, #280]	; 112f0 <__assert_fail@plt+0x434>
   111d4:	mov	r2, #5
   111d8:	ldr	r1, [pc, #308]	; 11314 <__assert_fail@plt+0x458>
   111dc:	mov	r0, #0
   111e0:	bl	10d00 <dcgettext@plt>
   111e4:	ldr	r3, [pc, #240]	; 112dc <__assert_fail@plt+0x420>
   111e8:	ldr	r1, [r3]
   111ec:	bl	10c70 <fputs_unlocked@plt>
   111f0:	b	11174 <__assert_fail@plt+0x2b8>
   111f4:	mov	r2, #5
   111f8:	ldr	r1, [pc, #260]	; 11304 <__assert_fail@plt+0x448>
   111fc:	mov	r0, #0
   11200:	bl	10d00 <dcgettext@plt>
   11204:	ldr	r4, [pc, #228]	; 112f0 <__assert_fail@plt+0x434>
   11208:	mov	r3, r4
   1120c:	ldr	r2, [pc, #228]	; 112f8 <__assert_fail@plt+0x43c>
   11210:	mov	r1, r0
   11214:	mov	r0, #1
   11218:	bl	10e2c <__printf_chk@plt>
   1121c:	mov	r2, #5
   11220:	ldr	r1, [pc, #224]	; 11308 <__assert_fail@plt+0x44c>
   11224:	mov	r0, #0
   11228:	bl	10d00 <dcgettext@plt>
   1122c:	mov	r1, r0
   11230:	ldr	r3, [pc, #216]	; 11310 <__assert_fail@plt+0x454>
   11234:	b	111c0 <__assert_fail@plt+0x304>
   11238:	mov	r2, #5
   1123c:	ldr	r1, [pc, #176]	; 112f4 <__assert_fail@plt+0x438>
   11240:	mov	r0, #0
   11244:	bl	10d00 <dcgettext@plt>
   11248:	ldr	r3, [pc, #168]	; 112f8 <__assert_fail@plt+0x43c>
   1124c:	ldr	r2, [pc, #168]	; 112fc <__assert_fail@plt+0x440>
   11250:	mov	r1, r0
   11254:	mov	r0, #1
   11258:	bl	10e2c <__printf_chk@plt>
   1125c:	mov	r1, #0
   11260:	mov	r0, #5
   11264:	bl	10e68 <setlocale@plt>
   11268:	cmp	r0, #0
   1126c:	beq	111f4 <__assert_fail@plt+0x338>
   11270:	mov	r2, #3
   11274:	ldr	r1, [pc, #132]	; 11300 <__assert_fail@plt+0x444>
   11278:	bl	10ea4 <strncmp@plt>
   1127c:	cmp	r0, #0
   11280:	bne	111d0 <__assert_fail@plt+0x314>
   11284:	mov	r2, #5
   11288:	ldr	r1, [pc, #116]	; 11304 <__assert_fail@plt+0x448>
   1128c:	mov	r0, #0
   11290:	bl	10d00 <dcgettext@plt>
   11294:	ldr	r4, [pc, #84]	; 112f0 <__assert_fail@plt+0x434>
   11298:	mov	r3, r4
   1129c:	ldr	r2, [pc, #84]	; 112f8 <__assert_fail@plt+0x43c>
   112a0:	mov	r1, r0
   112a4:	mov	r0, #1
   112a8:	bl	10e2c <__printf_chk@plt>
   112ac:	mov	r2, #5
   112b0:	ldr	r1, [pc, #80]	; 11308 <__assert_fail@plt+0x44c>
   112b4:	mov	r0, #0
   112b8:	bl	10d00 <dcgettext@plt>
   112bc:	mov	r1, r0
   112c0:	ldr	r3, [pc, #72]	; 11310 <__assert_fail@plt+0x454>
   112c4:	b	111c0 <__assert_fail@plt+0x304>
   112c8:	andeq	r6, r2, r0, asr #2
   112cc:	andeq	r5, r1, r0, asr #3
   112d0:	andeq	r6, r2, r8, asr r1
   112d4:	andeq	r5, r1, r8, ror #3
   112d8:	andeq	r5, r1, r0, lsl #4
   112dc:	andeq	r6, r2, r4, asr #2
   112e0:	andeq	r5, r1, r0, lsl #5
   112e4:	strdeq	r5, [r1], -r8
   112e8:	andeq	r5, r1, r8, lsr #6
   112ec:	andeq	r5, r1, r0, lsr r1
   112f0:			; <UNDEFINED> instruction: 0x000151b8
   112f4:	andeq	r5, r1, r0, ror #6
   112f8:	andeq	r5, r1, r8, ror r3
   112fc:	andeq	r5, r1, r0, lsr #7
   11300:			; <UNDEFINED> instruction: 0x000153b0
   11304:	strdeq	r5, [r1], -ip
   11308:	andeq	r5, r1, r8, lsl r4
   1130c:	strdeq	r5, [r1], -r4
   11310:	andeq	r5, r1, ip, lsr #9
   11314:			; <UNDEFINED> instruction: 0x000153b4
   11318:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1131c:	sub	sp, sp, #36	; 0x24
   11320:	str	r0, [sp, #28]
   11324:	mov	r4, r1
   11328:	ldr	r0, [r1]
   1132c:	bl	11810 <__assert_fail@plt+0x954>
   11330:	ldr	r1, [pc, #408]	; 114d0 <__assert_fail@plt+0x614>
   11334:	mov	r0, #6
   11338:	bl	10e68 <setlocale@plt>
   1133c:	ldr	r5, [pc, #400]	; 114d4 <__assert_fail@plt+0x618>
   11340:	ldr	r1, [pc, #400]	; 114d8 <__assert_fail@plt+0x61c>
   11344:	mov	r0, r5
   11348:	bl	10e98 <bindtextdomain@plt>
   1134c:	mov	r0, r5
   11350:	bl	10d24 <textdomain@plt>
   11354:	ldr	r0, [pc, #384]	; 114dc <__assert_fail@plt+0x620>
   11358:	bl	1510c <__assert_fail@plt+0x4250>
   1135c:	mov	r7, #2
   11360:	mov	sl, #0
   11364:	ldr	r8, [pc, #372]	; 114e0 <__assert_fail@plt+0x624>
   11368:	ldr	r6, [pc, #352]	; 114d0 <__assert_fail@plt+0x614>
   1136c:	ldr	r9, [pc, #368]	; 114e4 <__assert_fail@plt+0x628>
   11370:	ldr	fp, [pc, #368]	; 114e8 <__assert_fail@plt+0x62c>
   11374:	mov	r5, #0
   11378:	str	r5, [sp]
   1137c:	mov	r3, r8
   11380:	mov	r2, r6
   11384:	mov	r1, r4
   11388:	ldr	r0, [sp, #28]
   1138c:	bl	10dc0 <getopt_long@plt>
   11390:	cmn	r0, #1
   11394:	beq	11450 <__assert_fail@plt+0x594>
   11398:	cmn	r0, #2
   1139c:	beq	11440 <__assert_fail@plt+0x584>
   113a0:	ble	11404 <__assert_fail@plt+0x548>
   113a4:	cmp	r0, #256	; 0x100
   113a8:	beq	113fc <__assert_fail@plt+0x540>
   113ac:	cmp	r0, r9
   113b0:	bne	11448 <__assert_fail@plt+0x58c>
   113b4:	ldr	r5, [fp]
   113b8:	mov	r2, #5
   113bc:	ldr	r1, [pc, #296]	; 114ec <__assert_fail@plt+0x630>
   113c0:	mov	r0, #0
   113c4:	bl	10d00 <dcgettext@plt>
   113c8:	mov	r3, #0
   113cc:	str	r3, [sp, #16]
   113d0:	str	r0, [sp, #12]
   113d4:	str	r6, [sp, #8]
   113d8:	mvn	r2, #0
   113dc:	mov	r3, #0
   113e0:	strd	r2, [sp]
   113e4:	mov	r2, #0
   113e8:	mov	r3, #0
   113ec:	mov	r0, r5
   113f0:	bl	14014 <__assert_fail@plt+0x3158>
   113f4:	mov	sl, r0
   113f8:	b	11374 <__assert_fail@plt+0x4b8>
   113fc:	mov	r7, r5
   11400:	b	11378 <__assert_fail@plt+0x4bc>
   11404:	cmn	r0, #3
   11408:	bne	11448 <__assert_fail@plt+0x58c>
   1140c:	mov	r4, #0
   11410:	str	r4, [sp, #4]
   11414:	ldr	r3, [pc, #212]	; 114f0 <__assert_fail@plt+0x634>
   11418:	str	r3, [sp]
   1141c:	ldr	r3, [pc, #208]	; 114f4 <__assert_fail@plt+0x638>
   11420:	ldr	r3, [r3]
   11424:	ldr	r2, [pc, #204]	; 114f8 <__assert_fail@plt+0x63c>
   11428:	ldr	r1, [pc, #204]	; 114fc <__assert_fail@plt+0x640>
   1142c:	ldr	r0, [pc, #204]	; 11500 <__assert_fail@plt+0x644>
   11430:	ldr	r0, [r0]
   11434:	bl	1382c <__assert_fail@plt+0x2970>
   11438:	mov	r0, r4
   1143c:	bl	10dd8 <exit@plt>
   11440:	mov	r0, #0
   11444:	bl	10ff0 <__assert_fail@plt+0x134>
   11448:	mov	r0, #1
   1144c:	bl	10ff0 <__assert_fail@plt+0x134>
   11450:	ldr	r3, [pc, #172]	; 11504 <__assert_fail@plt+0x648>
   11454:	ldr	r3, [r3]
   11458:	ldr	r2, [sp, #28]
   1145c:	cmp	r2, r3
   11460:	bne	11490 <__assert_fail@plt+0x5d4>
   11464:	mov	r0, r7
   11468:	bl	11748 <__assert_fail@plt+0x88c>
   1146c:	cmp	r0, sl
   11470:	subhi	r2, r0, sl
   11474:	movls	r2, #1
   11478:	ldr	r1, [pc, #136]	; 11508 <__assert_fail@plt+0x64c>
   1147c:	mov	r0, #1
   11480:	bl	10e2c <__printf_chk@plt>
   11484:	mov	r0, #0
   11488:	add	sp, sp, #36	; 0x24
   1148c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11490:	mov	r2, #5
   11494:	ldr	r1, [pc, #112]	; 1150c <__assert_fail@plt+0x650>
   11498:	mov	r0, #0
   1149c:	bl	10d00 <dcgettext@plt>
   114a0:	mov	r5, r0
   114a4:	ldr	r3, [pc, #88]	; 11504 <__assert_fail@plt+0x648>
   114a8:	ldr	r3, [r3]
   114ac:	ldr	r0, [r4, r3, lsl #2]
   114b0:	bl	13360 <__assert_fail@plt+0x24a4>
   114b4:	mov	r3, r0
   114b8:	mov	r2, r5
   114bc:	mov	r1, #0
   114c0:	mov	r0, r1
   114c4:	bl	10d78 <error@plt>
   114c8:	mov	r0, #1
   114cc:	bl	10ff0 <__assert_fail@plt+0x134>
   114d0:	strdeq	r5, [r1], -r4
   114d4:	andeq	r5, r1, r4, lsr #7
   114d8:	andeq	r5, r1, ip, asr #8
   114dc:	andeq	r1, r1, r0, lsr r5
   114e0:	andeq	r5, r1, r8, ror #2
   114e4:	andeq	r0, r0, r1, lsl #2
   114e8:	andeq	r6, r2, r8, asr #2
   114ec:	andeq	r5, r1, r8, ror r4
   114f0:	andeq	r5, r1, r4, ror #8
   114f4:	andeq	r6, r2, r4, ror #1
   114f8:	andeq	r5, r1, r0, lsr #7
   114fc:			; <UNDEFINED> instruction: 0x000151b8
   11500:	andeq	r6, r2, r4, asr #2
   11504:	andeq	r6, r2, r8, lsr r1
   11508:	muleq	r1, ip, r4
   1150c:	andeq	r5, r1, r8, lsl #9
   11510:	ldr	r3, [pc, #4]	; 1151c <__assert_fail@plt+0x660>
   11514:	str	r0, [r3]
   11518:	bx	lr
   1151c:	andeq	r6, r2, r0, asr r1
   11520:	ldr	r3, [pc, #4]	; 1152c <__assert_fail@plt+0x670>
   11524:	strb	r0, [r3, #4]
   11528:	bx	lr
   1152c:	andeq	r6, r2, r0, asr r1
   11530:	push	{r4, r5, r6, lr}
   11534:	sub	sp, sp, #8
   11538:	ldr	r3, [pc, #200]	; 11608 <__assert_fail@plt+0x74c>
   1153c:	ldr	r0, [r3]
   11540:	bl	14684 <__assert_fail@plt+0x37c8>
   11544:	cmp	r0, #0
   11548:	beq	1156c <__assert_fail@plt+0x6b0>
   1154c:	ldr	r3, [pc, #184]	; 1160c <__assert_fail@plt+0x750>
   11550:	ldrb	r3, [r3, #4]
   11554:	cmp	r3, #0
   11558:	beq	11588 <__assert_fail@plt+0x6cc>
   1155c:	bl	10e08 <__errno_location@plt>
   11560:	ldr	r3, [r0]
   11564:	cmp	r3, #32
   11568:	bne	11588 <__assert_fail@plt+0x6cc>
   1156c:	ldr	r3, [pc, #156]	; 11610 <__assert_fail@plt+0x754>
   11570:	ldr	r0, [r3]
   11574:	bl	14684 <__assert_fail@plt+0x37c8>
   11578:	cmp	r0, #0
   1157c:	bne	115fc <__assert_fail@plt+0x740>
   11580:	add	sp, sp, #8
   11584:	pop	{r4, r5, r6, pc}
   11588:	mov	r2, #5
   1158c:	ldr	r1, [pc, #128]	; 11614 <__assert_fail@plt+0x758>
   11590:	mov	r0, #0
   11594:	bl	10d00 <dcgettext@plt>
   11598:	mov	r4, r0
   1159c:	ldr	r3, [pc, #104]	; 1160c <__assert_fail@plt+0x750>
   115a0:	ldr	r5, [r3]
   115a4:	cmp	r5, #0
   115a8:	beq	115e0 <__assert_fail@plt+0x724>
   115ac:	bl	10e08 <__errno_location@plt>
   115b0:	ldr	r6, [r0]
   115b4:	mov	r0, r5
   115b8:	bl	131d8 <__assert_fail@plt+0x231c>
   115bc:	str	r4, [sp]
   115c0:	mov	r3, r0
   115c4:	ldr	r2, [pc, #76]	; 11618 <__assert_fail@plt+0x75c>
   115c8:	mov	r1, r6
   115cc:	mov	r0, #0
   115d0:	bl	10d78 <error@plt>
   115d4:	ldr	r3, [pc, #64]	; 1161c <__assert_fail@plt+0x760>
   115d8:	ldr	r0, [r3]
   115dc:	bl	10cac <_exit@plt>
   115e0:	bl	10e08 <__errno_location@plt>
   115e4:	mov	r3, r4
   115e8:	ldr	r2, [pc, #48]	; 11620 <__assert_fail@plt+0x764>
   115ec:	ldr	r1, [r0]
   115f0:	mov	r0, #0
   115f4:	bl	10d78 <error@plt>
   115f8:	b	115d4 <__assert_fail@plt+0x718>
   115fc:	ldr	r3, [pc, #24]	; 1161c <__assert_fail@plt+0x760>
   11600:	ldr	r0, [r3]
   11604:	bl	10cac <_exit@plt>
   11608:	andeq	r6, r2, r4, asr #2
   1160c:	andeq	r6, r2, r0, asr r1
   11610:	andeq	r6, r2, r0, asr #2
   11614:	andeq	r5, r1, ip, lsr r5
   11618:	andeq	r5, r1, r8, asr #10
   1161c:	andeq	r6, r2, r8, ror #1
   11620:	andeq	r5, r1, ip, asr #10
   11624:	cmp	r0, #0
   11628:	beq	116ec <__assert_fail@plt+0x830>
   1162c:	ldrb	r3, [r0]
   11630:	cmp	r3, #0
   11634:	bne	1164c <__assert_fail@plt+0x790>
   11638:	mov	r0, #0
   1163c:	bx	lr
   11640:	ldrb	r3, [r0, #1]!
   11644:	cmp	r3, #0
   11648:	beq	116f4 <__assert_fail@plt+0x838>
   1164c:	cmp	r3, #9
   11650:	bcc	11664 <__assert_fail@plt+0x7a8>
   11654:	cmp	r3, #13
   11658:	bls	11640 <__assert_fail@plt+0x784>
   1165c:	cmp	r3, #32
   11660:	beq	11640 <__assert_fail@plt+0x784>
   11664:	sub	r3, r3, #48	; 0x30
   11668:	cmp	r3, #9
   1166c:	bhi	116fc <__assert_fail@plt+0x840>
   11670:	push	{lr}		; (str lr, [sp, #-4]!)
   11674:	sub	sp, sp, #12
   11678:	add	r1, sp, #8
   1167c:	mov	r3, #0
   11680:	str	r3, [r1, #-4]!
   11684:	mov	r2, #10
   11688:	bl	10de4 <strtoul@plt>
   1168c:	ldr	r2, [sp, #4]
   11690:	cmp	r2, #0
   11694:	beq	116e0 <__assert_fail@plt+0x824>
   11698:	ldrb	r3, [r2]
   1169c:	cmp	r3, #0
   116a0:	bne	116bc <__assert_fail@plt+0x800>
   116a4:	b	116e4 <__assert_fail@plt+0x828>
   116a8:	add	r2, r2, #1
   116ac:	str	r2, [sp, #4]
   116b0:	ldrb	r3, [r2]
   116b4:	cmp	r3, #0
   116b8:	beq	116e4 <__assert_fail@plt+0x828>
   116bc:	cmp	r3, #9
   116c0:	bcc	116d4 <__assert_fail@plt+0x818>
   116c4:	cmp	r3, #13
   116c8:	bls	116a8 <__assert_fail@plt+0x7ec>
   116cc:	cmp	r3, #32
   116d0:	beq	116a8 <__assert_fail@plt+0x7ec>
   116d4:	cmp	r3, #0
   116d8:	cmpne	r3, #44	; 0x2c
   116dc:	beq	116e4 <__assert_fail@plt+0x828>
   116e0:	mov	r0, #0
   116e4:	add	sp, sp, #12
   116e8:	pop	{pc}		; (ldr pc, [sp], #4)
   116ec:	mov	r0, #0
   116f0:	bx	lr
   116f4:	mov	r0, #0
   116f8:	bx	lr
   116fc:	mov	r0, #0
   11700:	bx	lr
   11704:	push	{lr}		; (str lr, [sp, #-4]!)
   11708:	sub	sp, sp, #132	; 0x84
   1170c:	mov	r2, sp
   11710:	mov	r1, #128	; 0x80
   11714:	mov	r0, #0
   11718:	bl	10e8c <sched_getaffinity@plt>
   1171c:	cmp	r0, #0
   11720:	beq	11730 <__assert_fail@plt+0x874>
   11724:	mov	r0, #0
   11728:	add	sp, sp, #132	; 0x84
   1172c:	pop	{pc}		; (ldr pc, [sp], #4)
   11730:	mov	r1, sp
   11734:	mov	r0, #128	; 0x80
   11738:	bl	10cdc <__sched_cpucount@plt>
   1173c:	cmp	r0, #0
   11740:	beq	11724 <__assert_fail@plt+0x868>
   11744:	b	11728 <__assert_fail@plt+0x86c>
   11748:	push	{r4, r5, r6, lr}
   1174c:	cmp	r0, #2
   11750:	beq	11790 <__assert_fail@plt+0x8d4>
   11754:	cmp	r0, #1
   11758:	beq	117f0 <__assert_fail@plt+0x934>
   1175c:	mov	r0, #83	; 0x53
   11760:	bl	10d0c <sysconf@plt>
   11764:	mov	r4, r0
   11768:	sub	r3, r0, #1
   1176c:	cmp	r3, #1
   11770:	bls	117f8 <__assert_fail@plt+0x93c>
   11774:	cmp	r4, #0
   11778:	movle	r4, #1
   1177c:	mvn	r5, #0
   11780:	cmp	r4, r5
   11784:	movcc	r0, r4
   11788:	movcs	r0, r5
   1178c:	pop	{r4, r5, r6, pc}
   11790:	ldr	r0, [pc, #112]	; 11808 <__assert_fail@plt+0x94c>
   11794:	bl	10d84 <getenv@plt>
   11798:	bl	11624 <__assert_fail@plt+0x768>
   1179c:	mov	r4, r0
   117a0:	ldr	r0, [pc, #100]	; 1180c <__assert_fail@plt+0x950>
   117a4:	bl	10d84 <getenv@plt>
   117a8:	bl	11624 <__assert_fail@plt+0x768>
   117ac:	subs	r5, r0, #0
   117b0:	mvneq	r5, #0
   117b4:	cmp	r4, #0
   117b8:	bne	117e0 <__assert_fail@plt+0x924>
   117bc:	bl	11704 <__assert_fail@plt+0x848>
   117c0:	subs	r4, r0, #0
   117c4:	bne	11780 <__assert_fail@plt+0x8c4>
   117c8:	mov	r0, #84	; 0x54
   117cc:	bl	10d0c <sysconf@plt>
   117d0:	cmp	r0, #1
   117d4:	movge	r4, r0
   117d8:	movlt	r4, #1
   117dc:	b	11780 <__assert_fail@plt+0x8c4>
   117e0:	cmp	r5, r4
   117e4:	movcc	r0, r5
   117e8:	movcs	r0, r4
   117ec:	pop	{r4, r5, r6, pc}
   117f0:	mvn	r5, #0
   117f4:	b	117bc <__assert_fail@plt+0x900>
   117f8:	bl	11704 <__assert_fail@plt+0x848>
   117fc:	cmp	r4, r0
   11800:	movcc	r4, r0
   11804:	b	11774 <__assert_fail@plt+0x8b8>
   11808:	andeq	r5, r1, r0, asr r5
   1180c:	andeq	r5, r1, r0, ror #10
   11810:	push	{r4, r5, r6, lr}
   11814:	subs	r4, r0, #0
   11818:	beq	11890 <__assert_fail@plt+0x9d4>
   1181c:	mov	r1, #47	; 0x2f
   11820:	mov	r0, r4
   11824:	bl	10e74 <strrchr@plt>
   11828:	cmp	r0, #0
   1182c:	addne	r5, r0, #1
   11830:	moveq	r5, r4
   11834:	sub	r3, r5, r4
   11838:	cmp	r3, #6
   1183c:	ble	1187c <__assert_fail@plt+0x9c0>
   11840:	mov	r2, #7
   11844:	ldr	r1, [pc, #96]	; 118ac <__assert_fail@plt+0x9f0>
   11848:	sub	r0, r5, #7
   1184c:	bl	10ea4 <strncmp@plt>
   11850:	cmp	r0, #0
   11854:	bne	1187c <__assert_fail@plt+0x9c0>
   11858:	mov	r2, #3
   1185c:	ldr	r1, [pc, #76]	; 118b0 <__assert_fail@plt+0x9f4>
   11860:	mov	r0, r5
   11864:	bl	10ea4 <strncmp@plt>
   11868:	cmp	r0, #0
   1186c:	addeq	r4, r5, #3
   11870:	ldreq	r3, [pc, #60]	; 118b4 <__assert_fail@plt+0x9f8>
   11874:	streq	r4, [r3]
   11878:	movne	r4, r5
   1187c:	ldr	r3, [pc, #52]	; 118b8 <__assert_fail@plt+0x9fc>
   11880:	str	r4, [r3]
   11884:	ldr	r3, [pc, #48]	; 118bc <__assert_fail@plt+0xa00>
   11888:	str	r4, [r3]
   1188c:	pop	{r4, r5, r6, pc}
   11890:	ldr	r3, [pc, #40]	; 118c0 <__assert_fail@plt+0xa04>
   11894:	ldr	r3, [r3]
   11898:	mov	r2, #55	; 0x37
   1189c:	mov	r1, #1
   118a0:	ldr	r0, [pc, #28]	; 118c4 <__assert_fail@plt+0xa08>
   118a4:	bl	10d3c <fwrite@plt>
   118a8:	bl	10eb0 <abort@plt>
   118ac:	andeq	r5, r1, ip, lsr #11
   118b0:			; <UNDEFINED> instruction: 0x000155b4
   118b4:	andeq	r6, r2, r0, lsr r1
   118b8:	andeq	r6, r2, r8, asr r1
   118bc:	andeq	r6, r2, r4, lsr r1
   118c0:	andeq	r6, r2, r0, asr #2
   118c4:	andeq	r5, r1, r4, ror r5
   118c8:	push	{r4, r5, r6, lr}
   118cc:	mov	r5, r0
   118d0:	mov	r4, r1
   118d4:	mov	r2, #48	; 0x30
   118d8:	mov	r1, #0
   118dc:	bl	10e20 <memset@plt>
   118e0:	cmp	r4, #10
   118e4:	beq	118f4 <__assert_fail@plt+0xa38>
   118e8:	str	r4, [r5]
   118ec:	mov	r0, r5
   118f0:	pop	{r4, r5, r6, pc}
   118f4:	bl	10eb0 <abort@plt>
   118f8:	push	{r4, r5, r6, lr}
   118fc:	mov	r4, r0
   11900:	mov	r5, r1
   11904:	mov	r2, #5
   11908:	mov	r1, r0
   1190c:	mov	r0, #0
   11910:	bl	10d00 <dcgettext@plt>
   11914:	cmp	r4, r0
   11918:	popne	{r4, r5, r6, pc}
   1191c:	bl	14908 <__assert_fail@plt+0x3a4c>
   11920:	ldrb	r3, [r0]
   11924:	bic	r3, r3, #32
   11928:	cmp	r3, #85	; 0x55
   1192c:	beq	119a8 <__assert_fail@plt+0xaec>
   11930:	cmp	r3, #71	; 0x47
   11934:	bne	11a04 <__assert_fail@plt+0xb48>
   11938:	ldrb	r3, [r0, #1]
   1193c:	bic	r3, r3, #32
   11940:	cmp	r3, #66	; 0x42
   11944:	bne	11a04 <__assert_fail@plt+0xb48>
   11948:	ldrb	r3, [r0, #2]
   1194c:	cmp	r3, #49	; 0x31
   11950:	bne	11a04 <__assert_fail@plt+0xb48>
   11954:	ldrb	r3, [r0, #3]
   11958:	cmp	r3, #56	; 0x38
   1195c:	bne	11a04 <__assert_fail@plt+0xb48>
   11960:	ldrb	r3, [r0, #4]
   11964:	cmp	r3, #48	; 0x30
   11968:	bne	11a04 <__assert_fail@plt+0xb48>
   1196c:	ldrb	r3, [r0, #5]
   11970:	cmp	r3, #51	; 0x33
   11974:	bne	11a04 <__assert_fail@plt+0xb48>
   11978:	ldrb	r3, [r0, #6]
   1197c:	cmp	r3, #48	; 0x30
   11980:	bne	11a04 <__assert_fail@plt+0xb48>
   11984:	ldrb	r3, [r0, #7]
   11988:	cmp	r3, #0
   1198c:	bne	11a04 <__assert_fail@plt+0xb48>
   11990:	ldrb	r2, [r4]
   11994:	ldr	r3, [pc, #124]	; 11a18 <__assert_fail@plt+0xb5c>
   11998:	ldr	r0, [pc, #124]	; 11a1c <__assert_fail@plt+0xb60>
   1199c:	cmp	r2, #96	; 0x60
   119a0:	movne	r0, r3
   119a4:	pop	{r4, r5, r6, pc}
   119a8:	ldrb	r3, [r0, #1]
   119ac:	bic	r3, r3, #32
   119b0:	cmp	r3, #84	; 0x54
   119b4:	bne	11a04 <__assert_fail@plt+0xb48>
   119b8:	ldrb	r3, [r0, #2]
   119bc:	bic	r3, r3, #32
   119c0:	cmp	r3, #70	; 0x46
   119c4:	bne	11a04 <__assert_fail@plt+0xb48>
   119c8:	ldrb	r3, [r0, #3]
   119cc:	cmp	r3, #45	; 0x2d
   119d0:	bne	11a04 <__assert_fail@plt+0xb48>
   119d4:	ldrb	r3, [r0, #4]
   119d8:	cmp	r3, #56	; 0x38
   119dc:	bne	11a04 <__assert_fail@plt+0xb48>
   119e0:	ldrb	r3, [r0, #5]
   119e4:	cmp	r3, #0
   119e8:	bne	11a04 <__assert_fail@plt+0xb48>
   119ec:	ldrb	r2, [r4]
   119f0:	ldr	r3, [pc, #40]	; 11a20 <__assert_fail@plt+0xb64>
   119f4:	ldr	r0, [pc, #40]	; 11a24 <__assert_fail@plt+0xb68>
   119f8:	cmp	r2, #96	; 0x60
   119fc:	movne	r0, r3
   11a00:	pop	{r4, r5, r6, pc}
   11a04:	ldr	r3, [pc, #28]	; 11a28 <__assert_fail@plt+0xb6c>
   11a08:	ldr	r0, [pc, #28]	; 11a2c <__assert_fail@plt+0xb70>
   11a0c:	cmp	r5, #9
   11a10:	movne	r0, r3
   11a14:	pop	{r4, r5, r6, pc}
   11a18:	andeq	r5, r1, r0, lsl r6
   11a1c:	andeq	r5, r1, ip, lsl r6
   11a20:	andeq	r5, r1, ip, lsl #12
   11a24:	andeq	r5, r1, r0, lsr #12
   11a28:	andeq	r5, r1, r4, lsl r6
   11a2c:	andeq	r5, r1, r8, lsl r6
   11a30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a34:	sub	sp, sp, #116	; 0x74
   11a38:	str	r0, [sp, #36]	; 0x24
   11a3c:	mov	sl, r1
   11a40:	str	r2, [sp, #52]	; 0x34
   11a44:	str	r3, [sp, #28]
   11a48:	ldr	r8, [sp, #152]	; 0x98
   11a4c:	bl	10d54 <__ctype_get_mb_cur_max@plt>
   11a50:	str	r0, [sp, #84]	; 0x54
   11a54:	ldr	r3, [sp, #156]	; 0x9c
   11a58:	lsr	r3, r3, #1
   11a5c:	and	r3, r3, #1
   11a60:	str	r3, [sp, #32]
   11a64:	mov	r3, #1
   11a68:	str	r3, [sp, #40]	; 0x28
   11a6c:	mov	r3, #0
   11a70:	str	r3, [sp, #80]	; 0x50
   11a74:	str	r3, [sp, #44]	; 0x2c
   11a78:	str	r3, [sp, #48]	; 0x30
   11a7c:	str	r3, [sp, #60]	; 0x3c
   11a80:	str	r3, [sp, #72]	; 0x48
   11a84:	str	r3, [sp, #76]	; 0x4c
   11a88:	mov	r7, sl
   11a8c:	mov	sl, r8
   11a90:	cmp	sl, #10
   11a94:	ldrls	pc, [pc, sl, lsl #2]
   11a98:	b	11c50 <__assert_fail@plt+0xd94>
   11a9c:	andeq	r1, r1, r0, lsl #22
   11aa0:	ldrdeq	r1, [r1], -r0
   11aa4:	andeq	r1, r1, ip, lsr #24
   11aa8:	andeq	r1, r1, r8, asr #21
   11aac:	andeq	r1, r1, r0, ror #23
   11ab0:	andeq	r1, r1, r0, lsl fp
   11ab4:	andeq	r2, r1, ip, ror fp
   11ab8:	andeq	r1, r1, r4, asr ip
   11abc:	andeq	r1, r1, ip, asr #22
   11ac0:	andeq	r1, r1, ip, asr #22
   11ac4:	andeq	r1, r1, ip, asr #22
   11ac8:	mov	r3, #1
   11acc:	str	r3, [sp, #48]	; 0x30
   11ad0:	mov	r3, #1
   11ad4:	str	r3, [sp, #32]
   11ad8:	str	r3, [sp, #60]	; 0x3c
   11adc:	ldr	r3, [pc, #4068]	; 12ac8 <__assert_fail@plt+0x1c0c>
   11ae0:	str	r3, [sp, #72]	; 0x48
   11ae4:	mov	fp, #0
   11ae8:	mov	sl, #2
   11aec:	mov	r6, #0
   11af0:	ldr	r3, [sp, #48]	; 0x30
   11af4:	eor	r3, r3, #1
   11af8:	str	r3, [sp, #68]	; 0x44
   11afc:	b	123e4 <__assert_fail@plt+0x1528>
   11b00:	mov	r3, #0
   11b04:	str	r3, [sp, #32]
   11b08:	mov	fp, r3
   11b0c:	b	11aec <__assert_fail@plt+0xc30>
   11b10:	ldr	r3, [sp, #32]
   11b14:	cmp	r3, #0
   11b18:	bne	11c6c <__assert_fail@plt+0xdb0>
   11b1c:	cmp	r7, #0
   11b20:	beq	11c8c <__assert_fail@plt+0xdd0>
   11b24:	ldr	r3, [sp, #36]	; 0x24
   11b28:	mov	r2, #34	; 0x22
   11b2c:	strb	r2, [r3]
   11b30:	mov	r3, #1
   11b34:	str	r3, [sp, #48]	; 0x30
   11b38:	str	r3, [sp, #60]	; 0x3c
   11b3c:	ldr	r3, [pc, #3980]	; 12ad0 <__assert_fail@plt+0x1c14>
   11b40:	str	r3, [sp, #72]	; 0x48
   11b44:	mov	fp, #1
   11b48:	b	11aec <__assert_fail@plt+0xc30>
   11b4c:	cmp	sl, #10
   11b50:	beq	11b74 <__assert_fail@plt+0xcb8>
   11b54:	mov	r1, sl
   11b58:	ldr	r0, [pc, #3948]	; 12acc <__assert_fail@plt+0x1c10>
   11b5c:	bl	118f8 <__assert_fail@plt+0xa3c>
   11b60:	str	r0, [sp, #164]	; 0xa4
   11b64:	mov	r1, sl
   11b68:	ldr	r0, [pc, #3928]	; 12ac8 <__assert_fail@plt+0x1c0c>
   11b6c:	bl	118f8 <__assert_fail@plt+0xa3c>
   11b70:	str	r0, [sp, #168]	; 0xa8
   11b74:	ldr	r3, [sp, #32]
   11b78:	cmp	r3, #0
   11b7c:	movne	fp, #0
   11b80:	bne	11bb8 <__assert_fail@plt+0xcfc>
   11b84:	ldr	r3, [sp, #164]	; 0xa4
   11b88:	ldrb	r3, [r3]
   11b8c:	cmp	r3, #0
   11b90:	beq	11bd8 <__assert_fail@plt+0xd1c>
   11b94:	ldr	r2, [sp, #164]	; 0xa4
   11b98:	mov	fp, #0
   11b9c:	ldr	r1, [sp, #36]	; 0x24
   11ba0:	cmp	r7, fp
   11ba4:	strbhi	r3, [r1, fp]
   11ba8:	add	fp, fp, #1
   11bac:	ldrb	r3, [r2, #1]!
   11bb0:	cmp	r3, #0
   11bb4:	bne	11ba0 <__assert_fail@plt+0xce4>
   11bb8:	ldr	r0, [sp, #168]	; 0xa8
   11bbc:	bl	10df0 <strlen@plt>
   11bc0:	str	r0, [sp, #60]	; 0x3c
   11bc4:	ldr	r3, [sp, #168]	; 0xa8
   11bc8:	str	r3, [sp, #72]	; 0x48
   11bcc:	mov	r3, #1
   11bd0:	str	r3, [sp, #48]	; 0x30
   11bd4:	b	11aec <__assert_fail@plt+0xc30>
   11bd8:	mov	fp, #0
   11bdc:	b	11bb8 <__assert_fail@plt+0xcfc>
   11be0:	ldr	r3, [sp, #32]
   11be4:	cmp	r3, #0
   11be8:	bne	11ca8 <__assert_fail@plt+0xdec>
   11bec:	mov	r3, #1
   11bf0:	str	r3, [sp, #48]	; 0x30
   11bf4:	cmp	r7, #0
   11bf8:	beq	11cc4 <__assert_fail@plt+0xe08>
   11bfc:	ldr	r3, [sp, #36]	; 0x24
   11c00:	mov	r2, #39	; 0x27
   11c04:	strb	r2, [r3]
   11c08:	mov	r3, #0
   11c0c:	str	r3, [sp, #32]
   11c10:	mov	r3, #1
   11c14:	str	r3, [sp, #60]	; 0x3c
   11c18:	ldr	r3, [pc, #3752]	; 12ac8 <__assert_fail@plt+0x1c0c>
   11c1c:	str	r3, [sp, #72]	; 0x48
   11c20:	mov	fp, #1
   11c24:	mov	sl, #2
   11c28:	b	11aec <__assert_fail@plt+0xc30>
   11c2c:	ldr	r3, [sp, #32]
   11c30:	cmp	r3, #0
   11c34:	beq	11bf4 <__assert_fail@plt+0xd38>
   11c38:	mov	r3, #1
   11c3c:	str	r3, [sp, #60]	; 0x3c
   11c40:	ldr	r3, [pc, #3712]	; 12ac8 <__assert_fail@plt+0x1c0c>
   11c44:	str	r3, [sp, #72]	; 0x48
   11c48:	mov	fp, #0
   11c4c:	b	11aec <__assert_fail@plt+0xc30>
   11c50:	bl	10eb0 <abort@plt>
   11c54:	mov	r3, #0
   11c58:	str	r3, [sp, #32]
   11c5c:	mov	r3, #1
   11c60:	str	r3, [sp, #48]	; 0x30
   11c64:	mov	fp, #0
   11c68:	b	11aec <__assert_fail@plt+0xc30>
   11c6c:	ldr	r3, [sp, #32]
   11c70:	str	r3, [sp, #48]	; 0x30
   11c74:	mov	r3, #1
   11c78:	str	r3, [sp, #60]	; 0x3c
   11c7c:	ldr	r3, [pc, #3660]	; 12ad0 <__assert_fail@plt+0x1c14>
   11c80:	str	r3, [sp, #72]	; 0x48
   11c84:	mov	fp, #0
   11c88:	b	11aec <__assert_fail@plt+0xc30>
   11c8c:	mov	r3, #1
   11c90:	str	r3, [sp, #48]	; 0x30
   11c94:	str	r3, [sp, #60]	; 0x3c
   11c98:	ldr	r3, [pc, #3632]	; 12ad0 <__assert_fail@plt+0x1c14>
   11c9c:	str	r3, [sp, #72]	; 0x48
   11ca0:	mov	fp, #1
   11ca4:	b	11aec <__assert_fail@plt+0xc30>
   11ca8:	mov	r3, #1
   11cac:	str	r3, [sp, #60]	; 0x3c
   11cb0:	ldr	r3, [pc, #3600]	; 12ac8 <__assert_fail@plt+0x1c0c>
   11cb4:	str	r3, [sp, #72]	; 0x48
   11cb8:	mov	fp, #0
   11cbc:	mov	sl, #2
   11cc0:	b	11aec <__assert_fail@plt+0xc30>
   11cc4:	mov	r3, #0
   11cc8:	str	r3, [sp, #32]
   11ccc:	mov	r3, #1
   11cd0:	str	r3, [sp, #60]	; 0x3c
   11cd4:	ldr	r3, [pc, #3564]	; 12ac8 <__assert_fail@plt+0x1c0c>
   11cd8:	str	r3, [sp, #72]	; 0x48
   11cdc:	mov	fp, #1
   11ce0:	mov	sl, #2
   11ce4:	b	11aec <__assert_fail@plt+0xc30>
   11ce8:	mov	r3, #0
   11cec:	str	r3, [sp, #56]	; 0x38
   11cf0:	ldr	r3, [sp, #52]	; 0x34
   11cf4:	add	r2, r3, r6
   11cf8:	str	r2, [sp, #64]	; 0x40
   11cfc:	ldrb	r4, [r3, r6]
   11d00:	cmp	r4, #126	; 0x7e
   11d04:	ldrls	pc, [pc, r4, lsl #2]
   11d08:	b	12544 <__assert_fail@plt+0x1688>
   11d0c:	andeq	r1, r1, r4, lsr #30
   11d10:	andeq	r2, r1, r4, asr #10
   11d14:	andeq	r2, r1, r4, asr #10
   11d18:	andeq	r2, r1, r4, asr #10
   11d1c:	andeq	r2, r1, r4, asr #10
   11d20:	andeq	r2, r1, r4, asr #10
   11d24:	andeq	r2, r1, r4, asr #10
   11d28:	andeq	r2, r1, r0, lsl #5
   11d2c:	andeq	r1, r1, ip, lsl pc
   11d30:	andeq	r2, r1, r8, lsr r2
   11d34:	andeq	r2, r1, r0, lsr r2
   11d38:	andeq	r2, r1, r0, lsr #3
   11d3c:	muleq	r1, r8, r1
   11d40:	andeq	r1, r1, r4, lsl pc
   11d44:	andeq	r2, r1, r4, asr #10
   11d48:	andeq	r2, r1, r4, asr #10
   11d4c:	andeq	r2, r1, r4, asr #10
   11d50:	andeq	r2, r1, r4, asr #10
   11d54:	andeq	r2, r1, r4, asr #10
   11d58:	andeq	r2, r1, r4, asr #10
   11d5c:	andeq	r2, r1, r4, asr #10
   11d60:	andeq	r2, r1, r4, asr #10
   11d64:	andeq	r2, r1, r4, asr #10
   11d68:	andeq	r2, r1, r4, asr #10
   11d6c:	andeq	r2, r1, r4, asr #10
   11d70:	andeq	r2, r1, r4, asr #10
   11d74:	andeq	r2, r1, r4, asr #10
   11d78:	andeq	r2, r1, r4, asr #10
   11d7c:	andeq	r2, r1, r4, asr #10
   11d80:	andeq	r2, r1, r4, asr #10
   11d84:	andeq	r2, r1, r4, asr #10
   11d88:	andeq	r2, r1, r4, asr #10
   11d8c:	ldrdeq	r2, [r1], -r4
   11d90:	ldrdeq	r2, [r1], -r0
   11d94:	ldrdeq	r2, [r1], -r0
   11d98:	andeq	r2, r1, r8, lsr #5
   11d9c:	ldrdeq	r2, [r1], -r0
   11da0:	andeq	r2, r1, r8, lsl r9
   11da4:	ldrdeq	r2, [r1], -r0
   11da8:	andeq	r2, r1, r8, lsr #9
   11dac:	ldrdeq	r2, [r1], -r0
   11db0:	ldrdeq	r2, [r1], -r0
   11db4:	ldrdeq	r2, [r1], -r0
   11db8:	andeq	r2, r1, r8, lsl r9
   11dbc:	andeq	r2, r1, r8, lsl r9
   11dc0:	andeq	r2, r1, r8, lsl r9
   11dc4:	andeq	r2, r1, r8, lsl r9
   11dc8:	andeq	r2, r1, r8, lsl r9
   11dcc:	andeq	r2, r1, r8, lsl r9
   11dd0:	andeq	r2, r1, r8, lsl r9
   11dd4:	andeq	r2, r1, r8, lsl r9
   11dd8:	andeq	r2, r1, r8, lsl r9
   11ddc:	andeq	r2, r1, r8, lsl r9
   11de0:	andeq	r2, r1, r8, lsl r9
   11de4:	andeq	r2, r1, r8, lsl r9
   11de8:	andeq	r2, r1, r8, lsl r9
   11dec:	andeq	r2, r1, r8, lsl r9
   11df0:	andeq	r2, r1, r8, lsl r9
   11df4:	andeq	r2, r1, r8, lsl r9
   11df8:	ldrdeq	r2, [r1], -r0
   11dfc:	ldrdeq	r2, [r1], -r0
   11e00:	ldrdeq	r2, [r1], -r0
   11e04:	ldrdeq	r2, [r1], -r0
   11e08:	andeq	r2, r1, ip, lsr #32
   11e0c:	andeq	r2, r1, r4, asr #10
   11e10:	andeq	r2, r1, r8, lsl r9
   11e14:	andeq	r2, r1, r8, lsl r9
   11e18:	andeq	r2, r1, r8, lsl r9
   11e1c:	andeq	r2, r1, r8, lsl r9
   11e20:	andeq	r2, r1, r8, lsl r9
   11e24:	andeq	r2, r1, r8, lsl r9
   11e28:	andeq	r2, r1, r8, lsl r9
   11e2c:	andeq	r2, r1, r8, lsl r9
   11e30:	andeq	r2, r1, r8, lsl r9
   11e34:	andeq	r2, r1, r8, lsl r9
   11e38:	andeq	r2, r1, r8, lsl r9
   11e3c:	andeq	r2, r1, r8, lsl r9
   11e40:	andeq	r2, r1, r8, lsl r9
   11e44:	andeq	r2, r1, r8, lsl r9
   11e48:	andeq	r2, r1, r8, lsl r9
   11e4c:	andeq	r2, r1, r8, lsl r9
   11e50:	andeq	r2, r1, r8, lsl r9
   11e54:	andeq	r2, r1, r8, lsl r9
   11e58:	andeq	r2, r1, r8, lsl r9
   11e5c:	andeq	r2, r1, r8, lsl r9
   11e60:	andeq	r2, r1, r8, lsl r9
   11e64:	andeq	r2, r1, r8, lsl r9
   11e68:	andeq	r2, r1, r8, lsl r9
   11e6c:	andeq	r2, r1, r8, lsl r9
   11e70:	andeq	r2, r1, r8, lsl r9
   11e74:	andeq	r2, r1, r8, lsl r9
   11e78:	ldrdeq	r2, [r1], -r0
   11e7c:	andeq	r2, r1, r8, lsr #3
   11e80:	andeq	r2, r1, r8, lsl r9
   11e84:	ldrdeq	r2, [r1], -r0
   11e88:	andeq	r2, r1, r8, lsl r9
   11e8c:	ldrdeq	r2, [r1], -r0
   11e90:	andeq	r2, r1, r8, lsl r9
   11e94:	andeq	r2, r1, r8, lsl r9
   11e98:	andeq	r2, r1, r8, lsl r9
   11e9c:	andeq	r2, r1, r8, lsl r9
   11ea0:	andeq	r2, r1, r8, lsl r9
   11ea4:	andeq	r2, r1, r8, lsl r9
   11ea8:	andeq	r2, r1, r8, lsl r9
   11eac:	andeq	r2, r1, r8, lsl r9
   11eb0:	andeq	r2, r1, r8, lsl r9
   11eb4:	andeq	r2, r1, r8, lsl r9
   11eb8:	andeq	r2, r1, r8, lsl r9
   11ebc:	andeq	r2, r1, r8, lsl r9
   11ec0:	andeq	r2, r1, r8, lsl r9
   11ec4:	andeq	r2, r1, r8, lsl r9
   11ec8:	andeq	r2, r1, r8, lsl r9
   11ecc:	andeq	r2, r1, r8, lsl r9
   11ed0:	andeq	r2, r1, r8, lsl r9
   11ed4:	andeq	r2, r1, r8, lsl r9
   11ed8:	andeq	r2, r1, r8, lsl r9
   11edc:	andeq	r2, r1, r8, lsl r9
   11ee0:	andeq	r2, r1, r8, lsl r9
   11ee4:	andeq	r2, r1, r8, lsl r9
   11ee8:	andeq	r2, r1, r8, lsl r9
   11eec:	andeq	r2, r1, r8, lsl r9
   11ef0:	andeq	r2, r1, r8, lsl r9
   11ef4:	andeq	r2, r1, r8, lsl r9
   11ef8:	andeq	r2, r1, r8, lsl #5
   11efc:	ldrdeq	r2, [r1], -r0
   11f00:	andeq	r2, r1, r8, lsl #5
   11f04:	andeq	r2, r1, r8, lsr #5
   11f08:	mov	r3, #0
   11f0c:	str	r3, [sp, #56]	; 0x38
   11f10:	b	11cf0 <__assert_fail@plt+0xe34>
   11f14:	mov	r3, #114	; 0x72
   11f18:	b	1223c <__assert_fail@plt+0x1380>
   11f1c:	mov	r3, #98	; 0x62
   11f20:	b	12254 <__assert_fail@plt+0x1398>
   11f24:	ldr	r3, [sp, #48]	; 0x30
   11f28:	cmp	r3, #0
   11f2c:	beq	12014 <__assert_fail@plt+0x1158>
   11f30:	ldr	r3, [sp, #32]
   11f34:	cmp	r3, #0
   11f38:	bne	12a9c <__assert_fail@plt+0x1be0>
   11f3c:	ldr	r3, [sp, #44]	; 0x2c
   11f40:	eor	r3, r3, #1
   11f44:	cmp	sl, #2
   11f48:	movne	r3, #0
   11f4c:	andeq	r3, r3, #1
   11f50:	cmp	r3, #0
   11f54:	moveq	r2, fp
   11f58:	beq	11f9c <__assert_fail@plt+0x10e0>
   11f5c:	cmp	r7, fp
   11f60:	ldrhi	r2, [sp, #36]	; 0x24
   11f64:	movhi	r1, #39	; 0x27
   11f68:	strbhi	r1, [r2, fp]
   11f6c:	add	r2, fp, #1
   11f70:	cmp	r7, r2
   11f74:	ldrhi	r1, [sp, #36]	; 0x24
   11f78:	movhi	r0, #36	; 0x24
   11f7c:	strbhi	r0, [r1, r2]
   11f80:	add	r2, fp, #2
   11f84:	cmp	r7, r2
   11f88:	ldrhi	r1, [sp, #36]	; 0x24
   11f8c:	movhi	r0, #39	; 0x27
   11f90:	strbhi	r0, [r1, r2]
   11f94:	add	r2, fp, #3
   11f98:	str	r3, [sp, #44]	; 0x2c
   11f9c:	cmp	r7, r2
   11fa0:	ldrhi	r3, [sp, #36]	; 0x24
   11fa4:	movhi	r1, #92	; 0x5c
   11fa8:	strbhi	r1, [r3, r2]
   11fac:	add	fp, r2, #1
   11fb0:	cmp	r5, #0
   11fb4:	beq	12920 <__assert_fail@plt+0x1a64>
   11fb8:	add	r3, r6, #1
   11fbc:	ldr	r1, [sp, #28]
   11fc0:	cmp	r1, r3
   11fc4:	bls	12930 <__assert_fail@plt+0x1a74>
   11fc8:	ldr	r1, [sp, #52]	; 0x34
   11fcc:	ldrb	r3, [r1, r3]
   11fd0:	sub	r3, r3, #48	; 0x30
   11fd4:	uxtb	r3, r3
   11fd8:	cmp	r3, #9
   11fdc:	bhi	1293c <__assert_fail@plt+0x1a80>
   11fe0:	cmp	r7, fp
   11fe4:	movhi	r3, #48	; 0x30
   11fe8:	ldrhi	r1, [sp, #36]	; 0x24
   11fec:	strbhi	r3, [r1, fp]
   11ff0:	add	r3, r2, #2
   11ff4:	cmp	r7, r3
   11ff8:	movhi	r1, #48	; 0x30
   11ffc:	ldrhi	r0, [sp, #36]	; 0x24
   12000:	strbhi	r1, [r0, r3]
   12004:	add	fp, r2, #3
   12008:	ldr	r8, [sp, #32]
   1200c:	mov	r4, #48	; 0x30
   12010:	b	122ec <__assert_fail@plt+0x1430>
   12014:	ldr	r3, [sp, #156]	; 0x9c
   12018:	tst	r3, #1
   1201c:	bne	123e0 <__assert_fail@plt+0x1524>
   12020:	ldr	r5, [sp, #48]	; 0x30
   12024:	mov	r8, r5
   12028:	b	122ec <__assert_fail@plt+0x1430>
   1202c:	cmp	sl, #2
   12030:	beq	12048 <__assert_fail@plt+0x118c>
   12034:	cmp	sl, #5
   12038:	beq	12060 <__assert_fail@plt+0x11a4>
   1203c:	mov	r8, #0
   12040:	mov	r5, r8
   12044:	b	122ec <__assert_fail@plt+0x1430>
   12048:	ldr	r3, [sp, #32]
   1204c:	cmp	r3, #0
   12050:	bne	12ab0 <__assert_fail@plt+0x1bf4>
   12054:	mov	r8, r3
   12058:	mov	r5, r3
   1205c:	b	122ec <__assert_fail@plt+0x1430>
   12060:	ldr	r3, [sp, #156]	; 0x9c
   12064:	tst	r3, #4
   12068:	beq	12948 <__assert_fail@plt+0x1a8c>
   1206c:	add	r3, r6, #2
   12070:	ldr	r2, [sp, #28]
   12074:	cmp	r2, r3
   12078:	bls	12954 <__assert_fail@plt+0x1a98>
   1207c:	ldr	r2, [sp, #52]	; 0x34
   12080:	add	r2, r2, r6
   12084:	ldrb	r2, [r2, #1]
   12088:	cmp	r2, #63	; 0x3f
   1208c:	movne	r8, #0
   12090:	movne	r5, r8
   12094:	bne	122ec <__assert_fail@plt+0x1430>
   12098:	ldr	r2, [sp, #52]	; 0x34
   1209c:	ldrb	r2, [r2, r3]
   120a0:	sub	r1, r2, #33	; 0x21
   120a4:	cmp	r1, #29
   120a8:	ldrls	pc, [pc, r1, lsl #2]
   120ac:	b	12960 <__assert_fail@plt+0x1aa4>
   120b0:	andeq	r2, r1, r8, lsr #2
   120b4:	andeq	r2, r1, r0, ror #18
   120b8:	andeq	r2, r1, r0, ror #18
   120bc:	andeq	r2, r1, r0, ror #18
   120c0:	andeq	r2, r1, r0, ror #18
   120c4:	andeq	r2, r1, r0, ror #18
   120c8:	andeq	r2, r1, r8, lsr #2
   120cc:	andeq	r2, r1, r8, lsr #2
   120d0:	andeq	r2, r1, r8, lsr #2
   120d4:	andeq	r2, r1, r0, ror #18
   120d8:	andeq	r2, r1, r0, ror #18
   120dc:	andeq	r2, r1, r0, ror #18
   120e0:	andeq	r2, r1, r8, lsr #2
   120e4:	andeq	r2, r1, r0, ror #18
   120e8:	andeq	r2, r1, r8, lsr #2
   120ec:	andeq	r2, r1, r0, ror #18
   120f0:	andeq	r2, r1, r0, ror #18
   120f4:	andeq	r2, r1, r0, ror #18
   120f8:	andeq	r2, r1, r0, ror #18
   120fc:	andeq	r2, r1, r0, ror #18
   12100:	andeq	r2, r1, r0, ror #18
   12104:	andeq	r2, r1, r0, ror #18
   12108:	andeq	r2, r1, r0, ror #18
   1210c:	andeq	r2, r1, r0, ror #18
   12110:	andeq	r2, r1, r0, ror #18
   12114:	andeq	r2, r1, r0, ror #18
   12118:	andeq	r2, r1, r0, ror #18
   1211c:	andeq	r2, r1, r8, lsr #2
   12120:	andeq	r2, r1, r8, lsr #2
   12124:	andeq	r2, r1, r8, lsr #2
   12128:	ldr	r1, [sp, #32]
   1212c:	cmp	r1, #0
   12130:	bne	12b70 <__assert_fail@plt+0x1cb4>
   12134:	cmp	r7, fp
   12138:	movhi	r1, #63	; 0x3f
   1213c:	ldrhi	r0, [sp, #36]	; 0x24
   12140:	strbhi	r1, [r0, fp]
   12144:	add	r1, fp, #1
   12148:	cmp	r7, r1
   1214c:	ldrhi	r0, [sp, #36]	; 0x24
   12150:	movhi	ip, #34	; 0x22
   12154:	strbhi	ip, [r0, r1]
   12158:	add	r1, fp, #2
   1215c:	cmp	r7, r1
   12160:	ldrhi	r0, [sp, #36]	; 0x24
   12164:	movhi	ip, #34	; 0x22
   12168:	strbhi	ip, [r0, r1]
   1216c:	add	r1, fp, #3
   12170:	cmp	r7, r1
   12174:	movhi	r0, #63	; 0x3f
   12178:	ldrhi	ip, [sp, #36]	; 0x24
   1217c:	strbhi	r0, [ip, r1]
   12180:	add	fp, fp, #4
   12184:	ldr	r5, [sp, #32]
   12188:	mov	r8, r5
   1218c:	mov	r4, r2
   12190:	mov	r6, r3
   12194:	b	122ec <__assert_fail@plt+0x1430>
   12198:	mov	r3, #102	; 0x66
   1219c:	b	12254 <__assert_fail@plt+0x1398>
   121a0:	mov	r3, #118	; 0x76
   121a4:	b	12254 <__assert_fail@plt+0x1398>
   121a8:	cmp	sl, #2
   121ac:	beq	12218 <__assert_fail@plt+0x135c>
   121b0:	ldr	r3, [sp, #48]	; 0x30
   121b4:	ldr	r2, [sp, #32]
   121b8:	and	r3, r3, r2
   121bc:	tst	r9, r3
   121c0:	moveq	r3, r4
   121c4:	beq	12254 <__assert_fail@plt+0x1398>
   121c8:	mov	r8, #0
   121cc:	mov	r5, r8
   121d0:	eor	r5, r5, #1
   121d4:	ldr	r3, [sp, #44]	; 0x2c
   121d8:	and	r5, r5, r3
   121dc:	tst	r5, #255	; 0xff
   121e0:	beq	123c0 <__assert_fail@plt+0x1504>
   121e4:	cmp	r7, fp
   121e8:	ldrhi	r3, [sp, #36]	; 0x24
   121ec:	movhi	r2, #39	; 0x27
   121f0:	strbhi	r2, [r3, fp]
   121f4:	add	r3, fp, #1
   121f8:	cmp	r7, r3
   121fc:	ldrhi	r2, [sp, #36]	; 0x24
   12200:	movhi	r1, #39	; 0x27
   12204:	strbhi	r1, [r2, r3]
   12208:	add	fp, fp, #2
   1220c:	mov	r3, #0
   12210:	str	r3, [sp, #44]	; 0x2c
   12214:	b	123c0 <__assert_fail@plt+0x1504>
   12218:	ldr	r3, [sp, #32]
   1221c:	cmp	r3, #0
   12220:	bne	12abc <__assert_fail@plt+0x1c00>
   12224:	mov	r8, r3
   12228:	mov	r5, r3
   1222c:	b	121d0 <__assert_fail@plt+0x1314>
   12230:	mov	r3, #110	; 0x6e
   12234:	b	1223c <__assert_fail@plt+0x1380>
   12238:	mov	r3, #116	; 0x74
   1223c:	ldr	r2, [sp, #32]
   12240:	cmp	sl, #2
   12244:	movne	r2, #0
   12248:	andeq	r2, r2, #1
   1224c:	cmp	r2, #0
   12250:	bne	12274 <__assert_fail@plt+0x13b8>
   12254:	ldr	r2, [sp, #48]	; 0x30
   12258:	cmp	r2, #0
   1225c:	moveq	r8, r2
   12260:	moveq	r5, r2
   12264:	beq	122ec <__assert_fail@plt+0x1430>
   12268:	mov	r4, r3
   1226c:	mov	r8, #0
   12270:	b	12344 <__assert_fail@plt+0x1488>
   12274:	mov	r8, sl
   12278:	mov	sl, r7
   1227c:	b	12ae8 <__assert_fail@plt+0x1c2c>
   12280:	mov	r3, #97	; 0x61
   12284:	b	12254 <__assert_fail@plt+0x1398>
   12288:	ldr	r3, [sp, #28]
   1228c:	cmn	r3, #1
   12290:	beq	122bc <__assert_fail@plt+0x1400>
   12294:	ldr	r3, [sp, #28]
   12298:	subs	r3, r3, #1
   1229c:	movne	r3, #1
   122a0:	cmp	r3, #0
   122a4:	bne	1296c <__assert_fail@plt+0x1ab0>
   122a8:	cmp	r6, #0
   122ac:	beq	122d4 <__assert_fail@plt+0x1418>
   122b0:	mov	r8, #0
   122b4:	mov	r5, r8
   122b8:	b	122ec <__assert_fail@plt+0x1430>
   122bc:	ldr	r3, [sp, #52]	; 0x34
   122c0:	ldrb	r3, [r3, #1]
   122c4:	adds	r3, r3, #0
   122c8:	movne	r3, #1
   122cc:	b	122a0 <__assert_fail@plt+0x13e4>
   122d0:	mov	r8, #0
   122d4:	ldr	r5, [sp, #32]
   122d8:	cmp	sl, #2
   122dc:	movne	r5, #0
   122e0:	andeq	r5, r5, #1
   122e4:	cmp	r5, #0
   122e8:	bne	1249c <__assert_fail@plt+0x15e0>
   122ec:	ldr	r3, [sp, #68]	; 0x44
   122f0:	cmp	sl, #2
   122f4:	orreq	r3, r3, #1
   122f8:	eor	r3, r3, #1
   122fc:	ldr	r2, [sp, #32]
   12300:	orr	r3, r2, r3
   12304:	tst	r3, #255	; 0xff
   12308:	beq	12338 <__assert_fail@plt+0x147c>
   1230c:	ldr	r3, [sp, #160]	; 0xa0
   12310:	cmp	r3, #0
   12314:	beq	12338 <__assert_fail@plt+0x147c>
   12318:	lsr	r2, r4, #5
   1231c:	uxtb	r2, r2
   12320:	and	r3, r4, #31
   12324:	ldr	r1, [sp, #160]	; 0xa0
   12328:	ldr	r2, [r1, r2, lsl #2]
   1232c:	lsr	r3, r2, r3
   12330:	tst	r3, #1
   12334:	bne	12344 <__assert_fail@plt+0x1488>
   12338:	ldr	r3, [sp, #56]	; 0x38
   1233c:	cmp	r3, #0
   12340:	beq	121d0 <__assert_fail@plt+0x1314>
   12344:	ldr	r3, [sp, #32]
   12348:	cmp	r3, #0
   1234c:	bne	12b58 <__assert_fail@plt+0x1c9c>
   12350:	ldr	r3, [sp, #44]	; 0x2c
   12354:	eor	r3, r3, #1
   12358:	cmp	sl, #2
   1235c:	movne	r3, #0
   12360:	andeq	r3, r3, #1
   12364:	cmp	r3, #0
   12368:	beq	123ac <__assert_fail@plt+0x14f0>
   1236c:	cmp	r7, fp
   12370:	ldrhi	r2, [sp, #36]	; 0x24
   12374:	movhi	r1, #39	; 0x27
   12378:	strbhi	r1, [r2, fp]
   1237c:	add	r2, fp, #1
   12380:	cmp	r7, r2
   12384:	ldrhi	r1, [sp, #36]	; 0x24
   12388:	movhi	r0, #36	; 0x24
   1238c:	strbhi	r0, [r1, r2]
   12390:	add	r2, fp, #2
   12394:	cmp	r7, r2
   12398:	ldrhi	r1, [sp, #36]	; 0x24
   1239c:	movhi	r0, #39	; 0x27
   123a0:	strbhi	r0, [r1, r2]
   123a4:	add	fp, fp, #3
   123a8:	str	r3, [sp, #44]	; 0x2c
   123ac:	cmp	r7, fp
   123b0:	ldrhi	r3, [sp, #36]	; 0x24
   123b4:	movhi	r2, #92	; 0x5c
   123b8:	strbhi	r2, [r3, fp]
   123bc:	add	fp, fp, #1
   123c0:	cmp	fp, r7
   123c4:	ldrcc	r3, [sp, #36]	; 0x24
   123c8:	strbcc	r4, [r3, fp]
   123cc:	add	fp, fp, #1
   123d0:	ldr	r3, [sp, #40]	; 0x28
   123d4:	cmp	r8, #0
   123d8:	moveq	r3, #0
   123dc:	str	r3, [sp, #40]	; 0x28
   123e0:	add	r6, r6, #1
   123e4:	ldr	r3, [sp, #28]
   123e8:	cmn	r3, #1
   123ec:	beq	12978 <__assert_fail@plt+0x1abc>
   123f0:	ldr	r3, [sp, #28]
   123f4:	subs	r8, r3, r6
   123f8:	movne	r8, #1
   123fc:	cmp	r8, #0
   12400:	beq	1298c <__assert_fail@plt+0x1ad0>
   12404:	ldr	r5, [sp, #48]	; 0x30
   12408:	cmp	sl, #2
   1240c:	moveq	r5, #0
   12410:	andne	r5, r5, #1
   12414:	ldr	r3, [sp, #60]	; 0x3c
   12418:	adds	r9, r3, #0
   1241c:	movne	r9, #1
   12420:	ands	r2, r5, r9
   12424:	str	r2, [sp, #56]	; 0x38
   12428:	beq	11cf0 <__assert_fail@plt+0xe34>
   1242c:	add	r4, r6, r3
   12430:	ldr	r2, [sp, #28]
   12434:	cmp	r3, #1
   12438:	movls	r3, #0
   1243c:	movhi	r3, #1
   12440:	cmn	r2, #1
   12444:	movne	r3, #0
   12448:	cmp	r3, #0
   1244c:	beq	1245c <__assert_fail@plt+0x15a0>
   12450:	ldr	r0, [sp, #52]	; 0x34
   12454:	bl	10df0 <strlen@plt>
   12458:	str	r0, [sp, #28]
   1245c:	ldr	r3, [sp, #28]
   12460:	cmp	r3, r4
   12464:	bcc	11ce8 <__assert_fail@plt+0xe2c>
   12468:	ldr	r2, [sp, #60]	; 0x3c
   1246c:	ldr	r1, [sp, #72]	; 0x48
   12470:	ldr	r3, [sp, #52]	; 0x34
   12474:	add	r0, r3, r6
   12478:	bl	10ce8 <memcmp@plt>
   1247c:	cmp	r0, #0
   12480:	bne	11f08 <__assert_fail@plt+0x104c>
   12484:	ldr	r3, [sp, #32]
   12488:	cmp	r3, #0
   1248c:	beq	11cf0 <__assert_fail@plt+0xe34>
   12490:	mov	r8, sl
   12494:	mov	sl, r7
   12498:	b	12ae8 <__assert_fail@plt+0x1c2c>
   1249c:	mov	r8, sl
   124a0:	mov	sl, r7
   124a4:	b	12ae8 <__assert_fail@plt+0x1c2c>
   124a8:	cmp	sl, #2
   124ac:	strne	r8, [sp, #80]	; 0x50
   124b0:	movne	r5, #0
   124b4:	bne	122ec <__assert_fail@plt+0x1430>
   124b8:	ldr	r3, [sp, #32]
   124bc:	cmp	r3, #0
   124c0:	bne	12ad4 <__assert_fail@plt+0x1c18>
   124c4:	ldr	r2, [sp, #76]	; 0x4c
   124c8:	adds	r3, r7, #0
   124cc:	movne	r3, #1
   124d0:	cmp	r2, #0
   124d4:	movne	r3, #0
   124d8:	cmp	r3, #0
   124dc:	movne	r3, #0
   124e0:	bne	12510 <__assert_fail@plt+0x1654>
   124e4:	cmp	r7, fp
   124e8:	ldrhi	r3, [sp, #36]	; 0x24
   124ec:	movhi	r2, #39	; 0x27
   124f0:	strbhi	r2, [r3, fp]
   124f4:	add	r3, fp, #1
   124f8:	cmp	r7, r3
   124fc:	ldrhi	r2, [sp, #36]	; 0x24
   12500:	movhi	r1, #92	; 0x5c
   12504:	strbhi	r1, [r2, r3]
   12508:	mov	r3, r7
   1250c:	ldr	r7, [sp, #76]	; 0x4c
   12510:	add	r2, fp, #2
   12514:	cmp	r2, r3
   12518:	ldrcc	r1, [sp, #36]	; 0x24
   1251c:	movcc	r0, #39	; 0x27
   12520:	strbcc	r0, [r1, r2]
   12524:	add	fp, fp, #3
   12528:	ldr	r2, [sp, #32]
   1252c:	mov	r5, r2
   12530:	str	r8, [sp, #80]	; 0x50
   12534:	str	r2, [sp, #44]	; 0x2c
   12538:	str	r7, [sp, #76]	; 0x4c
   1253c:	mov	r7, r3
   12540:	b	122ec <__assert_fail@plt+0x1430>
   12544:	ldr	r5, [sp, #84]	; 0x54
   12548:	cmp	r5, #1
   1254c:	beq	1257c <__assert_fail@plt+0x16c0>
   12550:	mov	r3, #0
   12554:	str	r3, [sp, #104]	; 0x68
   12558:	str	r3, [sp, #108]	; 0x6c
   1255c:	ldr	r3, [sp, #28]
   12560:	cmn	r3, #1
   12564:	beq	125b0 <__assert_fail@plt+0x16f4>
   12568:	mov	r3, #0
   1256c:	str	r4, [sp, #88]	; 0x58
   12570:	str	fp, [sp, #92]	; 0x5c
   12574:	mov	fp, r3
   12578:	b	126d8 <__assert_fail@plt+0x181c>
   1257c:	bl	10dcc <__ctype_b_loc@plt>
   12580:	ldr	r2, [r0]
   12584:	lsl	r3, r4, #1
   12588:	ldrh	r8, [r2, r3]
   1258c:	lsr	r8, r8, #14
   12590:	and	r8, r8, #1
   12594:	mov	r2, r5
   12598:	eor	r5, r8, #1
   1259c:	ldr	r3, [sp, #48]	; 0x30
   125a0:	and	r5, r5, r3
   125a4:	ands	r5, r5, #255	; 0xff
   125a8:	beq	122ec <__assert_fail@plt+0x1430>
   125ac:	b	12770 <__assert_fail@plt+0x18b4>
   125b0:	ldr	r0, [sp, #52]	; 0x34
   125b4:	bl	10df0 <strlen@plt>
   125b8:	str	r0, [sp, #28]
   125bc:	b	12568 <__assert_fail@plt+0x16ac>
   125c0:	mov	r2, fp
   125c4:	mov	r1, r4
   125c8:	ldr	r4, [sp, #88]	; 0x58
   125cc:	ldr	fp, [sp, #92]	; 0x5c
   125d0:	ldr	r0, [sp, #28]
   125d4:	cmp	r0, r5
   125d8:	bls	127a4 <__assert_fail@plt+0x18e8>
   125dc:	ldrb	r3, [r1]
   125e0:	cmp	r3, #0
   125e4:	beq	127ac <__assert_fail@plt+0x18f0>
   125e8:	mov	r3, r1
   125ec:	add	r2, r2, #1
   125f0:	add	r1, r6, r2
   125f4:	cmp	r0, r1
   125f8:	bls	127b4 <__assert_fail@plt+0x18f8>
   125fc:	ldrb	r1, [r3, #1]!
   12600:	cmp	r1, #0
   12604:	bne	125ec <__assert_fail@plt+0x1730>
   12608:	mov	r8, #0
   1260c:	b	12768 <__assert_fail@plt+0x18ac>
   12610:	cmp	r4, r5
   12614:	beq	126b4 <__assert_fail@plt+0x17f8>
   12618:	ldrb	r3, [r4, #1]!
   1261c:	sub	r3, r3, #91	; 0x5b
   12620:	cmp	r3, #33	; 0x21
   12624:	ldrls	pc, [pc, r3, lsl #2]
   12628:	b	12610 <__assert_fail@plt+0x1754>
   1262c:	andeq	r2, r1, r0, ror #21
   12630:	andeq	r2, r1, r0, ror #21
   12634:	andeq	r2, r1, r0, lsl r6
   12638:	andeq	r2, r1, r0, ror #21
   1263c:	andeq	r2, r1, r0, lsl r6
   12640:	andeq	r2, r1, r0, ror #21
   12644:	andeq	r2, r1, r0, lsl r6
   12648:	andeq	r2, r1, r0, lsl r6
   1264c:	andeq	r2, r1, r0, lsl r6
   12650:	andeq	r2, r1, r0, lsl r6
   12654:	andeq	r2, r1, r0, lsl r6
   12658:	andeq	r2, r1, r0, lsl r6
   1265c:	andeq	r2, r1, r0, lsl r6
   12660:	andeq	r2, r1, r0, lsl r6
   12664:	andeq	r2, r1, r0, lsl r6
   12668:	andeq	r2, r1, r0, lsl r6
   1266c:	andeq	r2, r1, r0, lsl r6
   12670:	andeq	r2, r1, r0, lsl r6
   12674:	andeq	r2, r1, r0, lsl r6
   12678:	andeq	r2, r1, r0, lsl r6
   1267c:	andeq	r2, r1, r0, lsl r6
   12680:	andeq	r2, r1, r0, lsl r6
   12684:	andeq	r2, r1, r0, lsl r6
   12688:	andeq	r2, r1, r0, lsl r6
   1268c:	andeq	r2, r1, r0, lsl r6
   12690:	andeq	r2, r1, r0, lsl r6
   12694:	andeq	r2, r1, r0, lsl r6
   12698:	andeq	r2, r1, r0, lsl r6
   1269c:	andeq	r2, r1, r0, lsl r6
   126a0:	andeq	r2, r1, r0, lsl r6
   126a4:	andeq	r2, r1, r0, lsl r6
   126a8:	andeq	r2, r1, r0, lsl r6
   126ac:	andeq	r2, r1, r0, lsl r6
   126b0:	andeq	r2, r1, r0, ror #21
   126b4:	ldr	r0, [sp, #100]	; 0x64
   126b8:	bl	10d30 <iswprint@plt>
   126bc:	cmp	r0, #0
   126c0:	moveq	r8, #0
   126c4:	add	fp, fp, r9
   126c8:	add	r0, sp, #104	; 0x68
   126cc:	bl	10cd0 <mbsinit@plt>
   126d0:	cmp	r0, #0
   126d4:	bne	12748 <__assert_fail@plt+0x188c>
   126d8:	add	r5, r6, fp
   126dc:	ldr	r3, [sp, #52]	; 0x34
   126e0:	add	r4, r3, r5
   126e4:	add	r3, sp, #104	; 0x68
   126e8:	ldr	r2, [sp, #28]
   126ec:	sub	r2, r2, r5
   126f0:	mov	r1, r4
   126f4:	add	r0, sp, #100	; 0x64
   126f8:	bl	1493c <__assert_fail@plt+0x3a80>
   126fc:	subs	r9, r0, #0
   12700:	beq	127bc <__assert_fail@plt+0x1900>
   12704:	cmn	r9, #1
   12708:	beq	12758 <__assert_fail@plt+0x189c>
   1270c:	cmn	r9, #2
   12710:	beq	125c0 <__assert_fail@plt+0x1704>
   12714:	ldr	r3, [sp, #32]
   12718:	cmp	sl, #2
   1271c:	movne	r3, #0
   12720:	andeq	r3, r3, #1
   12724:	cmp	r3, #0
   12728:	beq	126b4 <__assert_fail@plt+0x17f8>
   1272c:	cmp	r9, #1
   12730:	bls	126b4 <__assert_fail@plt+0x17f8>
   12734:	sub	r3, r9, #1
   12738:	add	r5, r3, r5
   1273c:	ldr	r3, [sp, #52]	; 0x34
   12740:	add	r5, r3, r5
   12744:	b	12618 <__assert_fail@plt+0x175c>
   12748:	ldr	r4, [sp, #88]	; 0x58
   1274c:	mov	r2, fp
   12750:	ldr	fp, [sp, #92]	; 0x5c
   12754:	b	12768 <__assert_fail@plt+0x18ac>
   12758:	ldr	r4, [sp, #88]	; 0x58
   1275c:	mov	r2, fp
   12760:	ldr	fp, [sp, #92]	; 0x5c
   12764:	mov	r8, #0
   12768:	cmp	r2, #1
   1276c:	bls	12598 <__assert_fail@plt+0x16dc>
   12770:	add	r1, r6, r2
   12774:	ldr	ip, [sp, #64]	; 0x40
   12778:	mov	r5, #0
   1277c:	eor	r3, r8, #1
   12780:	ldr	r2, [sp, #48]	; 0x30
   12784:	and	r3, r3, r2
   12788:	uxtb	r3, r3
   1278c:	ldr	r9, [sp, #32]
   12790:	ldr	lr, [sp, #44]	; 0x2c
   12794:	ldr	r2, [sp, #56]	; 0x38
   12798:	str	r8, [sp, #56]	; 0x38
   1279c:	ldr	r0, [sp, #36]	; 0x24
   127a0:	b	1283c <__assert_fail@plt+0x1980>
   127a4:	mov	r8, #0
   127a8:	b	12768 <__assert_fail@plt+0x18ac>
   127ac:	mov	r8, #0
   127b0:	b	12768 <__assert_fail@plt+0x18ac>
   127b4:	mov	r8, #0
   127b8:	b	12768 <__assert_fail@plt+0x18ac>
   127bc:	ldr	r4, [sp, #88]	; 0x58
   127c0:	mov	r2, fp
   127c4:	ldr	fp, [sp, #92]	; 0x5c
   127c8:	b	12768 <__assert_fail@plt+0x18ac>
   127cc:	cmp	r2, #0
   127d0:	beq	127e4 <__assert_fail@plt+0x1928>
   127d4:	cmp	r7, fp
   127d8:	movhi	r2, #92	; 0x5c
   127dc:	strbhi	r2, [r0, fp]
   127e0:	add	fp, fp, #1
   127e4:	add	r8, r6, #1
   127e8:	cmp	r1, r8
   127ec:	bls	128f4 <__assert_fail@plt+0x1a38>
   127f0:	eor	r2, r5, #1
   127f4:	and	r2, r2, lr
   127f8:	ands	r2, r2, #255	; 0xff
   127fc:	beq	12910 <__assert_fail@plt+0x1a54>
   12800:	cmp	r7, fp
   12804:	movhi	r2, #39	; 0x27
   12808:	strbhi	r2, [r0, fp]
   1280c:	add	r2, fp, #1
   12810:	cmp	r7, r2
   12814:	movhi	lr, #39	; 0x27
   12818:	strbhi	lr, [r0, r2]
   1281c:	add	fp, fp, #2
   12820:	mov	r6, r8
   12824:	mov	r2, r3
   12828:	mov	lr, r3
   1282c:	cmp	r7, fp
   12830:	strbhi	r4, [r0, fp]
   12834:	add	fp, fp, #1
   12838:	ldrb	r4, [ip, #1]!
   1283c:	cmp	r3, #0
   12840:	beq	127cc <__assert_fail@plt+0x1910>
   12844:	cmp	r9, #0
   12848:	bne	12b4c <__assert_fail@plt+0x1c90>
   1284c:	eor	r5, lr, #1
   12850:	cmp	sl, #2
   12854:	movne	r5, #0
   12858:	andeq	r5, r5, #1
   1285c:	cmp	r5, #0
   12860:	beq	12898 <__assert_fail@plt+0x19dc>
   12864:	cmp	r7, fp
   12868:	movhi	lr, #39	; 0x27
   1286c:	strbhi	lr, [r0, fp]
   12870:	add	lr, fp, #1
   12874:	cmp	r7, lr
   12878:	movhi	r8, #36	; 0x24
   1287c:	strbhi	r8, [r0, lr]
   12880:	add	lr, fp, #2
   12884:	cmp	r7, lr
   12888:	movhi	r8, #39	; 0x27
   1288c:	strbhi	r8, [r0, lr]
   12890:	add	fp, fp, #3
   12894:	mov	lr, r5
   12898:	cmp	r7, fp
   1289c:	movhi	r5, #92	; 0x5c
   128a0:	strbhi	r5, [r0, fp]
   128a4:	add	r5, fp, #1
   128a8:	cmp	r7, r5
   128ac:	lsrhi	r8, r4, #6
   128b0:	addhi	r8, r8, #48	; 0x30
   128b4:	strbhi	r8, [r0, r5]
   128b8:	add	r8, fp, #2
   128bc:	cmp	r7, r8
   128c0:	lsrhi	r5, r4, #3
   128c4:	andhi	r5, r5, #7
   128c8:	addhi	r5, r5, #48	; 0x30
   128cc:	strbhi	r5, [r0, r8]
   128d0:	add	fp, fp, #3
   128d4:	and	r4, r4, #7
   128d8:	add	r4, r4, #48	; 0x30
   128dc:	add	r5, r6, #1
   128e0:	cmp	r1, r5
   128e4:	bls	12900 <__assert_fail@plt+0x1a44>
   128e8:	mov	r6, r5
   128ec:	mov	r5, r3
   128f0:	b	1282c <__assert_fail@plt+0x1970>
   128f4:	str	lr, [sp, #44]	; 0x2c
   128f8:	ldr	r8, [sp, #56]	; 0x38
   128fc:	b	121d0 <__assert_fail@plt+0x1314>
   12900:	str	lr, [sp, #44]	; 0x2c
   12904:	ldr	r8, [sp, #56]	; 0x38
   12908:	mov	r5, r3
   1290c:	b	121d0 <__assert_fail@plt+0x1314>
   12910:	mov	r6, r8
   12914:	b	1282c <__assert_fail@plt+0x1970>
   12918:	mov	r5, #0
   1291c:	b	122ec <__assert_fail@plt+0x1430>
   12920:	mov	r8, r5
   12924:	ldr	r5, [sp, #48]	; 0x30
   12928:	mov	r4, #48	; 0x30
   1292c:	b	122ec <__assert_fail@plt+0x1430>
   12930:	ldr	r8, [sp, #32]
   12934:	mov	r4, #48	; 0x30
   12938:	b	122ec <__assert_fail@plt+0x1430>
   1293c:	ldr	r8, [sp, #32]
   12940:	mov	r4, #48	; 0x30
   12944:	b	122ec <__assert_fail@plt+0x1430>
   12948:	mov	r8, #0
   1294c:	mov	r5, r8
   12950:	b	122ec <__assert_fail@plt+0x1430>
   12954:	mov	r8, #0
   12958:	mov	r5, r8
   1295c:	b	122ec <__assert_fail@plt+0x1430>
   12960:	mov	r8, #0
   12964:	mov	r5, r8
   12968:	b	122ec <__assert_fail@plt+0x1430>
   1296c:	mov	r8, #0
   12970:	mov	r5, r8
   12974:	b	122ec <__assert_fail@plt+0x1430>
   12978:	ldr	r3, [sp, #52]	; 0x34
   1297c:	ldrb	r8, [r3, r6]
   12980:	adds	r8, r8, #0
   12984:	movne	r8, #1
   12988:	b	123fc <__assert_fail@plt+0x1540>
   1298c:	cmp	sl, #2
   12990:	movne	r3, #0
   12994:	moveq	r3, #1
   12998:	ldr	r1, [sp, #32]
   1299c:	mov	r2, r1
   129a0:	and	r2, r2, r3
   129a4:	cmp	fp, #0
   129a8:	movne	r2, #0
   129ac:	andeq	r2, r2, #1
   129b0:	cmp	r2, #0
   129b4:	bne	12b64 <__assert_fail@plt+0x1ca8>
   129b8:	eor	r2, r1, #1
   129bc:	and	r3, r3, r2
   129c0:	ldr	r1, [sp, #80]	; 0x50
   129c4:	tst	r1, r3
   129c8:	beq	12a40 <__assert_fail@plt+0x1b84>
   129cc:	ldr	r3, [sp, #40]	; 0x28
   129d0:	cmp	r3, #0
   129d4:	bne	129fc <__assert_fail@plt+0x1b40>
   129d8:	ldr	r1, [sp, #76]	; 0x4c
   129dc:	clz	r3, r7
   129e0:	lsr	r3, r3, #5
   129e4:	cmp	r1, #0
   129e8:	moveq	r3, #0
   129ec:	cmp	r3, #0
   129f0:	beq	12a40 <__assert_fail@plt+0x1b84>
   129f4:	ldr	r7, [sp, #76]	; 0x4c
   129f8:	b	11a90 <__assert_fail@plt+0xbd4>
   129fc:	ldr	r3, [sp, #168]	; 0xa8
   12a00:	str	r3, [sp, #16]
   12a04:	ldr	r3, [sp, #164]	; 0xa4
   12a08:	str	r3, [sp, #12]
   12a0c:	ldr	r3, [sp, #160]	; 0xa0
   12a10:	str	r3, [sp, #8]
   12a14:	ldr	r3, [sp, #156]	; 0x9c
   12a18:	str	r3, [sp, #4]
   12a1c:	mov	r3, #5
   12a20:	str	r3, [sp]
   12a24:	ldr	r3, [sp, #28]
   12a28:	ldr	r2, [sp, #52]	; 0x34
   12a2c:	ldr	r1, [sp, #76]	; 0x4c
   12a30:	ldr	r0, [sp, #36]	; 0x24
   12a34:	bl	11a30 <__assert_fail@plt+0xb74>
   12a38:	mov	fp, r0
   12a3c:	b	12b40 <__assert_fail@plt+0x1c84>
   12a40:	mov	sl, r7
   12a44:	ldr	r3, [sp, #72]	; 0x48
   12a48:	cmp	r3, #0
   12a4c:	moveq	r2, #0
   12a50:	andne	r2, r2, #1
   12a54:	cmp	r2, #0
   12a58:	beq	12a88 <__assert_fail@plt+0x1bcc>
   12a5c:	mov	r2, r3
   12a60:	ldrb	r3, [r3]
   12a64:	cmp	r3, #0
   12a68:	beq	12a88 <__assert_fail@plt+0x1bcc>
   12a6c:	ldr	r1, [sp, #36]	; 0x24
   12a70:	cmp	sl, fp
   12a74:	strbhi	r3, [r1, fp]
   12a78:	add	fp, fp, #1
   12a7c:	ldrb	r3, [r2, #1]!
   12a80:	cmp	r3, #0
   12a84:	bne	12a70 <__assert_fail@plt+0x1bb4>
   12a88:	cmp	sl, fp
   12a8c:	movhi	r3, #0
   12a90:	ldrhi	r2, [sp, #36]	; 0x24
   12a94:	strbhi	r3, [r2, fp]
   12a98:	b	12b40 <__assert_fail@plt+0x1c84>
   12a9c:	mov	r8, sl
   12aa0:	mov	sl, r7
   12aa4:	ldr	r3, [sp, #32]
   12aa8:	str	r3, [sp, #48]	; 0x30
   12aac:	b	12ae8 <__assert_fail@plt+0x1c2c>
   12ab0:	mov	r8, sl
   12ab4:	mov	sl, r7
   12ab8:	b	12ae8 <__assert_fail@plt+0x1c2c>
   12abc:	mov	r8, sl
   12ac0:	mov	sl, r7
   12ac4:	b	12ae8 <__assert_fail@plt+0x1c2c>
   12ac8:	andeq	r5, r1, r4, lsl r6
   12acc:	andeq	r5, r1, r4, lsr #12
   12ad0:	andeq	r5, r1, r8, lsl r6
   12ad4:	mov	r8, sl
   12ad8:	mov	sl, r7
   12adc:	b	12ae8 <__assert_fail@plt+0x1c2c>
   12ae0:	mov	r8, sl
   12ae4:	mov	sl, r7
   12ae8:	ldr	r3, [sp, #48]	; 0x30
   12aec:	cmp	r8, #2
   12af0:	movne	r3, #0
   12af4:	andeq	r3, r3, #1
   12af8:	cmp	r3, #0
   12afc:	movne	r8, #4
   12b00:	ldr	r3, [sp, #168]	; 0xa8
   12b04:	str	r3, [sp, #16]
   12b08:	ldr	r3, [sp, #164]	; 0xa4
   12b0c:	str	r3, [sp, #12]
   12b10:	mov	r3, #0
   12b14:	str	r3, [sp, #8]
   12b18:	ldr	r3, [sp, #156]	; 0x9c
   12b1c:	bic	r3, r3, #2
   12b20:	str	r3, [sp, #4]
   12b24:	str	r8, [sp]
   12b28:	ldr	r3, [sp, #28]
   12b2c:	ldr	r2, [sp, #52]	; 0x34
   12b30:	mov	r1, sl
   12b34:	ldr	r0, [sp, #36]	; 0x24
   12b38:	bl	11a30 <__assert_fail@plt+0xb74>
   12b3c:	mov	fp, r0
   12b40:	mov	r0, fp
   12b44:	add	sp, sp, #116	; 0x74
   12b48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b4c:	mov	r8, sl
   12b50:	mov	sl, r7
   12b54:	b	12ae8 <__assert_fail@plt+0x1c2c>
   12b58:	mov	r8, sl
   12b5c:	mov	sl, r7
   12b60:	b	12ae8 <__assert_fail@plt+0x1c2c>
   12b64:	mov	r8, sl
   12b68:	mov	sl, r7
   12b6c:	b	12ae8 <__assert_fail@plt+0x1c2c>
   12b70:	mov	r8, sl
   12b74:	mov	sl, r7
   12b78:	b	12b00 <__assert_fail@plt+0x1c44>
   12b7c:	mov	r3, #1
   12b80:	str	r3, [sp, #32]
   12b84:	str	r3, [sp, #48]	; 0x30
   12b88:	str	r3, [sp, #60]	; 0x3c
   12b8c:	ldr	r3, [pc, #-196]	; 12ad0 <__assert_fail@plt+0x1c14>
   12b90:	str	r3, [sp, #72]	; 0x48
   12b94:	mov	fp, #0
   12b98:	mov	sl, #5
   12b9c:	b	11aec <__assert_fail@plt+0xc30>
   12ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ba4:	sub	sp, sp, #52	; 0x34
   12ba8:	mov	r5, r0
   12bac:	str	r1, [sp, #24]
   12bb0:	str	r2, [sp, #28]
   12bb4:	mov	r4, r3
   12bb8:	bl	10e08 <__errno_location@plt>
   12bbc:	str	r0, [sp, #32]
   12bc0:	ldr	r3, [r0]
   12bc4:	str	r3, [sp, #36]	; 0x24
   12bc8:	ldr	r3, [pc, #396]	; 12d5c <__assert_fail@plt+0x1ea0>
   12bcc:	ldr	r6, [r3]
   12bd0:	cmn	r5, #-2147483647	; 0x80000001
   12bd4:	movne	r3, #0
   12bd8:	moveq	r3, #1
   12bdc:	orrs	r3, r3, r5, lsr #31
   12be0:	bne	12d20 <__assert_fail@plt+0x1e64>
   12be4:	ldr	r3, [pc, #368]	; 12d5c <__assert_fail@plt+0x1ea0>
   12be8:	ldr	r2, [r3, #4]
   12bec:	cmp	r5, r2
   12bf0:	blt	12c58 <__assert_fail@plt+0x1d9c>
   12bf4:	str	r2, [sp, #44]	; 0x2c
   12bf8:	add	r3, r3, #8
   12bfc:	cmp	r6, r3
   12c00:	beq	12d24 <__assert_fail@plt+0x1e68>
   12c04:	sub	r2, r5, r2
   12c08:	mov	r3, #8
   12c0c:	str	r3, [sp]
   12c10:	mvn	r3, #-2147483648	; 0x80000000
   12c14:	add	r2, r2, #1
   12c18:	add	r1, sp, #44	; 0x2c
   12c1c:	mov	r0, r6
   12c20:	bl	13aa4 <__assert_fail@plt+0x2be8>
   12c24:	mov	r6, r0
   12c28:	ldr	r3, [pc, #300]	; 12d5c <__assert_fail@plt+0x1ea0>
   12c2c:	str	r0, [r3]
   12c30:	ldr	r7, [pc, #292]	; 12d5c <__assert_fail@plt+0x1ea0>
   12c34:	ldr	r0, [r7, #4]
   12c38:	ldr	r2, [sp, #44]	; 0x2c
   12c3c:	sub	r2, r2, r0
   12c40:	lsl	r2, r2, #3
   12c44:	mov	r1, #0
   12c48:	add	r0, r6, r0, lsl #3
   12c4c:	bl	10e20 <memset@plt>
   12c50:	ldr	r3, [sp, #44]	; 0x2c
   12c54:	str	r3, [r7, #4]
   12c58:	add	fp, r6, r5, lsl #3
   12c5c:	ldr	r8, [r6, r5, lsl #3]
   12c60:	ldr	r7, [fp, #4]
   12c64:	ldr	r9, [r4, #4]
   12c68:	orr	r9, r9, #1
   12c6c:	add	sl, r4, #8
   12c70:	ldr	r3, [r4, #44]	; 0x2c
   12c74:	str	r3, [sp, #16]
   12c78:	ldr	r3, [r4, #40]	; 0x28
   12c7c:	str	r3, [sp, #12]
   12c80:	str	sl, [sp, #8]
   12c84:	str	r9, [sp, #4]
   12c88:	ldr	r3, [r4]
   12c8c:	str	r3, [sp]
   12c90:	ldr	r3, [sp, #28]
   12c94:	ldr	r2, [sp, #24]
   12c98:	mov	r1, r8
   12c9c:	mov	r0, r7
   12ca0:	bl	11a30 <__assert_fail@plt+0xb74>
   12ca4:	cmp	r8, r0
   12ca8:	bhi	12d08 <__assert_fail@plt+0x1e4c>
   12cac:	add	r8, r0, #1
   12cb0:	str	r8, [r6, r5, lsl #3]
   12cb4:	ldr	r3, [pc, #164]	; 12d60 <__assert_fail@plt+0x1ea4>
   12cb8:	cmp	r7, r3
   12cbc:	beq	12cc8 <__assert_fail@plt+0x1e0c>
   12cc0:	mov	r0, r7
   12cc4:	bl	14808 <__assert_fail@plt+0x394c>
   12cc8:	mov	r0, r8
   12ccc:	bl	13920 <__assert_fail@plt+0x2a64>
   12cd0:	mov	r7, r0
   12cd4:	str	r0, [fp, #4]
   12cd8:	ldr	r3, [r4, #44]	; 0x2c
   12cdc:	str	r3, [sp, #16]
   12ce0:	ldr	r3, [r4, #40]	; 0x28
   12ce4:	str	r3, [sp, #12]
   12ce8:	str	sl, [sp, #8]
   12cec:	str	r9, [sp, #4]
   12cf0:	ldr	r3, [r4]
   12cf4:	str	r3, [sp]
   12cf8:	ldr	r3, [sp, #28]
   12cfc:	ldr	r2, [sp, #24]
   12d00:	mov	r1, r8
   12d04:	bl	11a30 <__assert_fail@plt+0xb74>
   12d08:	ldr	r3, [sp, #32]
   12d0c:	ldr	r2, [sp, #36]	; 0x24
   12d10:	str	r2, [r3]
   12d14:	mov	r0, r7
   12d18:	add	sp, sp, #52	; 0x34
   12d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d20:	bl	10eb0 <abort@plt>
   12d24:	sub	r2, r5, r2
   12d28:	mov	r3, #8
   12d2c:	str	r3, [sp]
   12d30:	mvn	r3, #-2147483648	; 0x80000000
   12d34:	add	r2, r2, #1
   12d38:	add	r1, sp, #44	; 0x2c
   12d3c:	mov	r0, #0
   12d40:	bl	13aa4 <__assert_fail@plt+0x2be8>
   12d44:	mov	r6, r0
   12d48:	ldr	r3, [pc, #12]	; 12d5c <__assert_fail@plt+0x1ea0>
   12d4c:	str	r0, [r3], #8
   12d50:	ldm	r3, {r0, r1}
   12d54:	stm	r6, {r0, r1}
   12d58:	b	12c30 <__assert_fail@plt+0x1d74>
   12d5c:	andeq	r6, r2, ip, ror #1
   12d60:	andeq	r6, r2, ip, asr r1
   12d64:	push	{r4, r5, r6, lr}
   12d68:	mov	r4, r0
   12d6c:	bl	10e08 <__errno_location@plt>
   12d70:	mov	r5, r0
   12d74:	ldr	r6, [r0]
   12d78:	cmp	r4, #0
   12d7c:	ldr	r3, [pc, #20]	; 12d98 <__assert_fail@plt+0x1edc>
   12d80:	moveq	r4, r3
   12d84:	mov	r1, #48	; 0x30
   12d88:	mov	r0, r4
   12d8c:	bl	13e0c <__assert_fail@plt+0x2f50>
   12d90:	str	r6, [r5]
   12d94:	pop	{r4, r5, r6, pc}
   12d98:	andeq	r6, r2, ip, asr r2
   12d9c:	subs	r3, r0, #0
   12da0:	ldr	r2, [pc, #8]	; 12db0 <__assert_fail@plt+0x1ef4>
   12da4:	moveq	r3, r2
   12da8:	ldr	r0, [r3]
   12dac:	bx	lr
   12db0:	andeq	r6, r2, ip, asr r2
   12db4:	subs	r3, r0, #0
   12db8:	ldr	r2, [pc, #8]	; 12dc8 <__assert_fail@plt+0x1f0c>
   12dbc:	moveq	r3, r2
   12dc0:	str	r1, [r3]
   12dc4:	bx	lr
   12dc8:	andeq	r6, r2, ip, asr r2
   12dcc:	push	{lr}		; (str lr, [sp, #-4]!)
   12dd0:	subs	r3, r0, #0
   12dd4:	ldr	r0, [pc, #44]	; 12e08 <__assert_fail@plt+0x1f4c>
   12dd8:	moveq	r3, r0
   12ddc:	add	r3, r3, #8
   12de0:	lsr	lr, r1, #5
   12de4:	and	r1, r1, #31
   12de8:	ldr	ip, [r3, lr, lsl #2]
   12dec:	lsr	r0, ip, r1
   12df0:	eor	r2, r2, r0
   12df4:	and	r2, r2, #1
   12df8:	eor	r1, ip, r2, lsl r1
   12dfc:	str	r1, [r3, lr, lsl #2]
   12e00:	and	r0, r0, #1
   12e04:	pop	{pc}		; (ldr pc, [sp], #4)
   12e08:	andeq	r6, r2, ip, asr r2
   12e0c:	subs	r3, r0, #0
   12e10:	ldr	r2, [pc, #12]	; 12e24 <__assert_fail@plt+0x1f68>
   12e14:	moveq	r3, r2
   12e18:	ldr	r0, [r3, #4]
   12e1c:	str	r1, [r3, #4]
   12e20:	bx	lr
   12e24:	andeq	r6, r2, ip, asr r2
   12e28:	subs	r3, r0, #0
   12e2c:	ldr	r0, [pc, #40]	; 12e5c <__assert_fail@plt+0x1fa0>
   12e30:	moveq	r3, r0
   12e34:	mov	r0, #10
   12e38:	str	r0, [r3]
   12e3c:	cmp	r2, #0
   12e40:	cmpne	r1, #0
   12e44:	beq	12e54 <__assert_fail@plt+0x1f98>
   12e48:	str	r1, [r3, #40]	; 0x28
   12e4c:	str	r2, [r3, #44]	; 0x2c
   12e50:	bx	lr
   12e54:	push	{r4, lr}
   12e58:	bl	10eb0 <abort@plt>
   12e5c:	andeq	r6, r2, ip, asr r2
   12e60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e64:	sub	sp, sp, #24
   12e68:	mov	r7, r0
   12e6c:	mov	r8, r1
   12e70:	mov	r9, r2
   12e74:	mov	sl, r3
   12e78:	ldr	r4, [sp, #56]	; 0x38
   12e7c:	cmp	r4, #0
   12e80:	ldr	r3, [pc, #84]	; 12edc <__assert_fail@plt+0x2020>
   12e84:	moveq	r4, r3
   12e88:	bl	10e08 <__errno_location@plt>
   12e8c:	mov	r5, r0
   12e90:	ldr	r6, [r0]
   12e94:	ldr	r3, [r4, #44]	; 0x2c
   12e98:	str	r3, [sp, #16]
   12e9c:	ldr	r3, [r4, #40]	; 0x28
   12ea0:	str	r3, [sp, #12]
   12ea4:	add	r3, r4, #8
   12ea8:	str	r3, [sp, #8]
   12eac:	ldr	r3, [r4, #4]
   12eb0:	str	r3, [sp, #4]
   12eb4:	ldr	r3, [r4]
   12eb8:	str	r3, [sp]
   12ebc:	mov	r3, sl
   12ec0:	mov	r2, r9
   12ec4:	mov	r1, r8
   12ec8:	mov	r0, r7
   12ecc:	bl	11a30 <__assert_fail@plt+0xb74>
   12ed0:	str	r6, [r5]
   12ed4:	add	sp, sp, #24
   12ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12edc:	andeq	r6, r2, ip, asr r2
   12ee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ee4:	sub	sp, sp, #44	; 0x2c
   12ee8:	str	r0, [sp, #28]
   12eec:	str	r1, [sp, #32]
   12ef0:	mov	r6, r2
   12ef4:	subs	r4, r3, #0
   12ef8:	ldr	r3, [pc, #172]	; 12fac <__assert_fail@plt+0x20f0>
   12efc:	moveq	r4, r3
   12f00:	bl	10e08 <__errno_location@plt>
   12f04:	mov	r7, r0
   12f08:	ldr	fp, [r0]
   12f0c:	ldr	r5, [r4, #4]
   12f10:	cmp	r6, #0
   12f14:	orreq	r5, r5, #1
   12f18:	add	r9, r4, #8
   12f1c:	ldr	r3, [r4, #44]	; 0x2c
   12f20:	str	r3, [sp, #16]
   12f24:	ldr	r3, [r4, #40]	; 0x28
   12f28:	str	r3, [sp, #12]
   12f2c:	str	r9, [sp, #8]
   12f30:	str	r5, [sp, #4]
   12f34:	ldr	r3, [r4]
   12f38:	str	r3, [sp]
   12f3c:	ldr	r3, [sp, #32]
   12f40:	ldr	r2, [sp, #28]
   12f44:	mov	r1, #0
   12f48:	mov	r0, r1
   12f4c:	bl	11a30 <__assert_fail@plt+0xb74>
   12f50:	mov	sl, r0
   12f54:	add	r8, r0, #1
   12f58:	mov	r0, r8
   12f5c:	bl	13920 <__assert_fail@plt+0x2a64>
   12f60:	str	r0, [sp, #36]	; 0x24
   12f64:	ldr	r3, [r4, #44]	; 0x2c
   12f68:	str	r3, [sp, #16]
   12f6c:	ldr	r3, [r4, #40]	; 0x28
   12f70:	str	r3, [sp, #12]
   12f74:	str	r9, [sp, #8]
   12f78:	str	r5, [sp, #4]
   12f7c:	ldr	r3, [r4]
   12f80:	str	r3, [sp]
   12f84:	ldr	r3, [sp, #32]
   12f88:	ldr	r2, [sp, #28]
   12f8c:	mov	r1, r8
   12f90:	bl	11a30 <__assert_fail@plt+0xb74>
   12f94:	str	fp, [r7]
   12f98:	cmp	r6, #0
   12f9c:	strne	sl, [r6]
   12fa0:	ldr	r0, [sp, #36]	; 0x24
   12fa4:	add	sp, sp, #44	; 0x2c
   12fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fac:	andeq	r6, r2, ip, asr r2
   12fb0:	push	{r4, lr}
   12fb4:	mov	r3, r2
   12fb8:	mov	r2, #0
   12fbc:	bl	12ee0 <__assert_fail@plt+0x2024>
   12fc0:	pop	{r4, pc}
   12fc4:	push	{r4, r5, r6, r7, r8, lr}
   12fc8:	ldr	r3, [pc, #140]	; 1305c <__assert_fail@plt+0x21a0>
   12fcc:	ldr	r7, [r3]
   12fd0:	ldr	r3, [r3, #4]
   12fd4:	cmp	r3, #1
   12fd8:	ble	13004 <__assert_fail@plt+0x2148>
   12fdc:	mov	r5, r7
   12fe0:	mov	r4, #1
   12fe4:	ldr	r6, [pc, #112]	; 1305c <__assert_fail@plt+0x21a0>
   12fe8:	ldr	r0, [r5, #12]
   12fec:	bl	14808 <__assert_fail@plt+0x394c>
   12ff0:	add	r4, r4, #1
   12ff4:	add	r5, r5, #8
   12ff8:	ldr	r3, [r6, #4]
   12ffc:	cmp	r3, r4
   13000:	bgt	12fe8 <__assert_fail@plt+0x212c>
   13004:	ldr	r0, [r7, #4]
   13008:	ldr	r3, [pc, #80]	; 13060 <__assert_fail@plt+0x21a4>
   1300c:	cmp	r0, r3
   13010:	beq	1302c <__assert_fail@plt+0x2170>
   13014:	bl	14808 <__assert_fail@plt+0x394c>
   13018:	ldr	r3, [pc, #60]	; 1305c <__assert_fail@plt+0x21a0>
   1301c:	mov	r2, #256	; 0x100
   13020:	str	r2, [r3, #8]
   13024:	ldr	r2, [pc, #52]	; 13060 <__assert_fail@plt+0x21a4>
   13028:	str	r2, [r3, #12]
   1302c:	ldr	r3, [pc, #48]	; 13064 <__assert_fail@plt+0x21a8>
   13030:	cmp	r7, r3
   13034:	beq	1304c <__assert_fail@plt+0x2190>
   13038:	mov	r0, r7
   1303c:	bl	14808 <__assert_fail@plt+0x394c>
   13040:	ldr	r3, [pc, #20]	; 1305c <__assert_fail@plt+0x21a0>
   13044:	add	r2, r3, #8
   13048:	str	r2, [r3]
   1304c:	mov	r2, #1
   13050:	ldr	r3, [pc, #4]	; 1305c <__assert_fail@plt+0x21a0>
   13054:	str	r2, [r3, #4]
   13058:	pop	{r4, r5, r6, r7, r8, pc}
   1305c:	andeq	r6, r2, ip, ror #1
   13060:	andeq	r6, r2, ip, asr r1
   13064:	strdeq	r6, [r2], -r4
   13068:	push	{r4, lr}
   1306c:	ldr	r3, [pc, #8]	; 1307c <__assert_fail@plt+0x21c0>
   13070:	mvn	r2, #0
   13074:	bl	12ba0 <__assert_fail@plt+0x1ce4>
   13078:	pop	{r4, pc}
   1307c:	andeq	r6, r2, ip, asr r2
   13080:	push	{r4, lr}
   13084:	ldr	r3, [pc, #4]	; 13090 <__assert_fail@plt+0x21d4>
   13088:	bl	12ba0 <__assert_fail@plt+0x1ce4>
   1308c:	pop	{r4, pc}
   13090:	andeq	r6, r2, ip, asr r2
   13094:	push	{r4, lr}
   13098:	mov	r1, r0
   1309c:	mov	r0, #0
   130a0:	bl	13068 <__assert_fail@plt+0x21ac>
   130a4:	pop	{r4, pc}
   130a8:	push	{r4, lr}
   130ac:	mov	r2, r1
   130b0:	mov	r1, r0
   130b4:	mov	r0, #0
   130b8:	bl	13080 <__assert_fail@plt+0x21c4>
   130bc:	pop	{r4, pc}
   130c0:	push	{r4, r5, lr}
   130c4:	sub	sp, sp, #52	; 0x34
   130c8:	mov	r4, r0
   130cc:	mov	r5, r2
   130d0:	mov	r0, sp
   130d4:	bl	118c8 <__assert_fail@plt+0xa0c>
   130d8:	mov	r3, sp
   130dc:	mvn	r2, #0
   130e0:	mov	r1, r5
   130e4:	mov	r0, r4
   130e8:	bl	12ba0 <__assert_fail@plt+0x1ce4>
   130ec:	add	sp, sp, #52	; 0x34
   130f0:	pop	{r4, r5, pc}
   130f4:	push	{r4, r5, r6, lr}
   130f8:	sub	sp, sp, #48	; 0x30
   130fc:	mov	r4, r0
   13100:	mov	r5, r2
   13104:	mov	r6, r3
   13108:	mov	r0, sp
   1310c:	bl	118c8 <__assert_fail@plt+0xa0c>
   13110:	mov	r3, sp
   13114:	mov	r2, r6
   13118:	mov	r1, r5
   1311c:	mov	r0, r4
   13120:	bl	12ba0 <__assert_fail@plt+0x1ce4>
   13124:	add	sp, sp, #48	; 0x30
   13128:	pop	{r4, r5, r6, pc}
   1312c:	push	{r4, lr}
   13130:	mov	r2, r1
   13134:	mov	r1, r0
   13138:	mov	r0, #0
   1313c:	bl	130c0 <__assert_fail@plt+0x2204>
   13140:	pop	{r4, pc}
   13144:	push	{r4, lr}
   13148:	mov	r3, r2
   1314c:	mov	r2, r1
   13150:	mov	r1, r0
   13154:	mov	r0, #0
   13158:	bl	130f4 <__assert_fail@plt+0x2238>
   1315c:	pop	{r4, pc}
   13160:	push	{r4, r5, r6, lr}
   13164:	sub	sp, sp, #48	; 0x30
   13168:	mov	r4, r0
   1316c:	mov	r5, r1
   13170:	mov	r6, r2
   13174:	mov	ip, sp
   13178:	ldr	lr, [pc, #64]	; 131c0 <__assert_fail@plt+0x2304>
   1317c:	ldm	lr!, {r0, r1, r2, r3}
   13180:	stmia	ip!, {r0, r1, r2, r3}
   13184:	ldm	lr!, {r0, r1, r2, r3}
   13188:	stmia	ip!, {r0, r1, r2, r3}
   1318c:	ldm	lr, {r0, r1, r2, r3}
   13190:	stm	ip, {r0, r1, r2, r3}
   13194:	mov	r2, #1
   13198:	mov	r1, r6
   1319c:	mov	r0, sp
   131a0:	bl	12dcc <__assert_fail@plt+0x1f10>
   131a4:	mov	r3, sp
   131a8:	mov	r2, r5
   131ac:	mov	r1, r4
   131b0:	mov	r0, #0
   131b4:	bl	12ba0 <__assert_fail@plt+0x1ce4>
   131b8:	add	sp, sp, #48	; 0x30
   131bc:	pop	{r4, r5, r6, pc}
   131c0:	andeq	r6, r2, ip, asr r2
   131c4:	push	{r4, lr}
   131c8:	mov	r2, r1
   131cc:	mvn	r1, #0
   131d0:	bl	13160 <__assert_fail@plt+0x22a4>
   131d4:	pop	{r4, pc}
   131d8:	push	{r4, lr}
   131dc:	mov	r1, #58	; 0x3a
   131e0:	bl	131c4 <__assert_fail@plt+0x2308>
   131e4:	pop	{r4, pc}
   131e8:	push	{r4, lr}
   131ec:	mov	r2, #58	; 0x3a
   131f0:	bl	13160 <__assert_fail@plt+0x22a4>
   131f4:	pop	{r4, pc}
   131f8:	push	{r4, r5, lr}
   131fc:	sub	sp, sp, #100	; 0x64
   13200:	mov	r4, r0
   13204:	mov	r5, r2
   13208:	mov	r0, sp
   1320c:	bl	118c8 <__assert_fail@plt+0xa0c>
   13210:	add	lr, sp, #48	; 0x30
   13214:	mov	ip, sp
   13218:	ldm	ip!, {r0, r1, r2, r3}
   1321c:	stmia	lr!, {r0, r1, r2, r3}
   13220:	ldm	ip!, {r0, r1, r2, r3}
   13224:	stmia	lr!, {r0, r1, r2, r3}
   13228:	ldm	ip, {r0, r1, r2, r3}
   1322c:	stm	lr, {r0, r1, r2, r3}
   13230:	mov	r2, #1
   13234:	mov	r1, #58	; 0x3a
   13238:	add	r0, sp, #48	; 0x30
   1323c:	bl	12dcc <__assert_fail@plt+0x1f10>
   13240:	add	r3, sp, #48	; 0x30
   13244:	mvn	r2, #0
   13248:	mov	r1, r5
   1324c:	mov	r0, r4
   13250:	bl	12ba0 <__assert_fail@plt+0x1ce4>
   13254:	add	sp, sp, #100	; 0x64
   13258:	pop	{r4, r5, pc}
   1325c:	push	{r4, r5, r6, r7, lr}
   13260:	sub	sp, sp, #52	; 0x34
   13264:	mov	r4, r0
   13268:	mov	r6, r1
   1326c:	mov	r7, r2
   13270:	mov	r5, r3
   13274:	mov	ip, sp
   13278:	ldr	lr, [pc, #64]	; 132c0 <__assert_fail@plt+0x2404>
   1327c:	ldm	lr!, {r0, r1, r2, r3}
   13280:	stmia	ip!, {r0, r1, r2, r3}
   13284:	ldm	lr!, {r0, r1, r2, r3}
   13288:	stmia	ip!, {r0, r1, r2, r3}
   1328c:	ldm	lr, {r0, r1, r2, r3}
   13290:	stm	ip, {r0, r1, r2, r3}
   13294:	mov	r2, r7
   13298:	mov	r1, r6
   1329c:	mov	r0, sp
   132a0:	bl	12e28 <__assert_fail@plt+0x1f6c>
   132a4:	mov	r3, sp
   132a8:	ldr	r2, [sp, #72]	; 0x48
   132ac:	mov	r1, r5
   132b0:	mov	r0, r4
   132b4:	bl	12ba0 <__assert_fail@plt+0x1ce4>
   132b8:	add	sp, sp, #52	; 0x34
   132bc:	pop	{r4, r5, r6, r7, pc}
   132c0:	andeq	r6, r2, ip, asr r2
   132c4:	push	{lr}		; (str lr, [sp, #-4]!)
   132c8:	sub	sp, sp, #12
   132cc:	mvn	ip, #0
   132d0:	str	ip, [sp]
   132d4:	bl	1325c <__assert_fail@plt+0x23a0>
   132d8:	add	sp, sp, #12
   132dc:	pop	{pc}		; (ldr pc, [sp], #4)
   132e0:	push	{r4, lr}
   132e4:	mov	r3, r2
   132e8:	mov	r2, r1
   132ec:	mov	r1, r0
   132f0:	mov	r0, #0
   132f4:	bl	132c4 <__assert_fail@plt+0x2408>
   132f8:	pop	{r4, pc}
   132fc:	push	{lr}		; (str lr, [sp, #-4]!)
   13300:	sub	sp, sp, #12
   13304:	str	r3, [sp]
   13308:	mov	r3, r2
   1330c:	mov	r2, r1
   13310:	mov	r1, r0
   13314:	mov	r0, #0
   13318:	bl	1325c <__assert_fail@plt+0x23a0>
   1331c:	add	sp, sp, #12
   13320:	pop	{pc}		; (ldr pc, [sp], #4)
   13324:	push	{r4, lr}
   13328:	ldr	r3, [pc, #4]	; 13334 <__assert_fail@plt+0x2478>
   1332c:	bl	12ba0 <__assert_fail@plt+0x1ce4>
   13330:	pop	{r4, pc}
   13334:	strdeq	r6, [r2], -ip
   13338:	push	{r4, lr}
   1333c:	mov	r2, r1
   13340:	mov	r1, r0
   13344:	mov	r0, #0
   13348:	bl	13324 <__assert_fail@plt+0x2468>
   1334c:	pop	{r4, pc}
   13350:	push	{r4, lr}
   13354:	mvn	r2, #0
   13358:	bl	13324 <__assert_fail@plt+0x2468>
   1335c:	pop	{r4, pc}
   13360:	push	{r4, lr}
   13364:	mov	r1, r0
   13368:	mov	r0, #0
   1336c:	bl	13350 <__assert_fail@plt+0x2494>
   13370:	pop	{r4, pc}
   13374:	push	{r4, r5, r6, lr}
   13378:	sub	sp, sp, #32
   1337c:	mov	r4, r0
   13380:	ldr	r5, [sp, #48]	; 0x30
   13384:	ldr	r6, [sp, #52]	; 0x34
   13388:	cmp	r1, #0
   1338c:	beq	13444 <__assert_fail@plt+0x2588>
   13390:	str	r3, [sp, #4]
   13394:	str	r2, [sp]
   13398:	mov	r3, r1
   1339c:	ldr	r2, [pc, #940]	; 13750 <__assert_fail@plt+0x2894>
   133a0:	mov	r1, #1
   133a4:	bl	10e44 <__fprintf_chk@plt>
   133a8:	mov	r2, #5
   133ac:	ldr	r1, [pc, #928]	; 13754 <__assert_fail@plt+0x2898>
   133b0:	mov	r0, #0
   133b4:	bl	10d00 <dcgettext@plt>
   133b8:	ldr	r3, [pc, #920]	; 13758 <__assert_fail@plt+0x289c>
   133bc:	str	r3, [sp]
   133c0:	mov	r3, r0
   133c4:	ldr	r2, [pc, #912]	; 1375c <__assert_fail@plt+0x28a0>
   133c8:	mov	r1, #1
   133cc:	mov	r0, r4
   133d0:	bl	10e44 <__fprintf_chk@plt>
   133d4:	mov	r1, r4
   133d8:	mov	r0, #10
   133dc:	bl	10cf4 <fputc_unlocked@plt>
   133e0:	mov	r2, #5
   133e4:	ldr	r1, [pc, #884]	; 13760 <__assert_fail@plt+0x28a4>
   133e8:	mov	r0, #0
   133ec:	bl	10d00 <dcgettext@plt>
   133f0:	ldr	r3, [pc, #876]	; 13764 <__assert_fail@plt+0x28a8>
   133f4:	mov	r2, r0
   133f8:	mov	r1, #1
   133fc:	mov	r0, r4
   13400:	bl	10e44 <__fprintf_chk@plt>
   13404:	mov	r1, r4
   13408:	mov	r0, #10
   1340c:	bl	10cf4 <fputc_unlocked@plt>
   13410:	cmp	r6, #9
   13414:	ldrls	pc, [pc, r6, lsl #2]
   13418:	b	136e8 <__assert_fail@plt+0x282c>
   1341c:	andeq	r3, r1, r0, lsl #9
   13420:	andeq	r3, r1, ip, asr r4
   13424:	andeq	r3, r1, r8, lsl #9
   13428:			; <UNDEFINED> instruction: 0x000134b8
   1342c:	strdeq	r3, [r1], -r0
   13430:	andeq	r3, r1, r0, lsr r5
   13434:	andeq	r3, r1, r8, ror r5
   13438:	andeq	r3, r1, r8, asr #11
   1343c:	andeq	r3, r1, r0, lsr #12
   13440:	andeq	r3, r1, r0, lsl #13
   13444:	str	r3, [sp]
   13448:	mov	r3, r2
   1344c:	ldr	r2, [pc, #788]	; 13768 <__assert_fail@plt+0x28ac>
   13450:	mov	r1, #1
   13454:	bl	10e44 <__fprintf_chk@plt>
   13458:	b	133a8 <__assert_fail@plt+0x24ec>
   1345c:	mov	r2, #5
   13460:	ldr	r1, [pc, #772]	; 1376c <__assert_fail@plt+0x28b0>
   13464:	mov	r0, #0
   13468:	bl	10d00 <dcgettext@plt>
   1346c:	ldr	r3, [r5]
   13470:	mov	r2, r0
   13474:	mov	r1, #1
   13478:	mov	r0, r4
   1347c:	bl	10e44 <__fprintf_chk@plt>
   13480:	add	sp, sp, #32
   13484:	pop	{r4, r5, r6, pc}
   13488:	mov	r2, #5
   1348c:	ldr	r1, [pc, #732]	; 13770 <__assert_fail@plt+0x28b4>
   13490:	mov	r0, #0
   13494:	bl	10d00 <dcgettext@plt>
   13498:	ldr	r3, [r5]
   1349c:	ldr	r2, [r5, #4]
   134a0:	str	r2, [sp]
   134a4:	mov	r2, r0
   134a8:	mov	r1, #1
   134ac:	mov	r0, r4
   134b0:	bl	10e44 <__fprintf_chk@plt>
   134b4:	b	13480 <__assert_fail@plt+0x25c4>
   134b8:	mov	r2, #5
   134bc:	ldr	r1, [pc, #688]	; 13774 <__assert_fail@plt+0x28b8>
   134c0:	mov	r0, #0
   134c4:	bl	10d00 <dcgettext@plt>
   134c8:	ldr	r3, [r5]
   134cc:	ldr	r2, [r5, #8]
   134d0:	str	r2, [sp, #4]
   134d4:	ldr	r2, [r5, #4]
   134d8:	str	r2, [sp]
   134dc:	mov	r2, r0
   134e0:	mov	r1, #1
   134e4:	mov	r0, r4
   134e8:	bl	10e44 <__fprintf_chk@plt>
   134ec:	b	13480 <__assert_fail@plt+0x25c4>
   134f0:	mov	r2, #5
   134f4:	ldr	r1, [pc, #636]	; 13778 <__assert_fail@plt+0x28bc>
   134f8:	mov	r0, #0
   134fc:	bl	10d00 <dcgettext@plt>
   13500:	ldr	r3, [r5]
   13504:	ldr	r2, [r5, #12]
   13508:	str	r2, [sp, #8]
   1350c:	ldr	r2, [r5, #8]
   13510:	str	r2, [sp, #4]
   13514:	ldr	r2, [r5, #4]
   13518:	str	r2, [sp]
   1351c:	mov	r2, r0
   13520:	mov	r1, #1
   13524:	mov	r0, r4
   13528:	bl	10e44 <__fprintf_chk@plt>
   1352c:	b	13480 <__assert_fail@plt+0x25c4>
   13530:	mov	r2, #5
   13534:	ldr	r1, [pc, #576]	; 1377c <__assert_fail@plt+0x28c0>
   13538:	mov	r0, #0
   1353c:	bl	10d00 <dcgettext@plt>
   13540:	ldr	r3, [r5]
   13544:	ldr	r2, [r5, #16]
   13548:	str	r2, [sp, #12]
   1354c:	ldr	r2, [r5, #12]
   13550:	str	r2, [sp, #8]
   13554:	ldr	r2, [r5, #8]
   13558:	str	r2, [sp, #4]
   1355c:	ldr	r2, [r5, #4]
   13560:	str	r2, [sp]
   13564:	mov	r2, r0
   13568:	mov	r1, #1
   1356c:	mov	r0, r4
   13570:	bl	10e44 <__fprintf_chk@plt>
   13574:	b	13480 <__assert_fail@plt+0x25c4>
   13578:	mov	r2, #5
   1357c:	ldr	r1, [pc, #508]	; 13780 <__assert_fail@plt+0x28c4>
   13580:	mov	r0, #0
   13584:	bl	10d00 <dcgettext@plt>
   13588:	ldr	r3, [r5]
   1358c:	ldr	r2, [r5, #20]
   13590:	str	r2, [sp, #16]
   13594:	ldr	r2, [r5, #16]
   13598:	str	r2, [sp, #12]
   1359c:	ldr	r2, [r5, #12]
   135a0:	str	r2, [sp, #8]
   135a4:	ldr	r2, [r5, #8]
   135a8:	str	r2, [sp, #4]
   135ac:	ldr	r2, [r5, #4]
   135b0:	str	r2, [sp]
   135b4:	mov	r2, r0
   135b8:	mov	r1, #1
   135bc:	mov	r0, r4
   135c0:	bl	10e44 <__fprintf_chk@plt>
   135c4:	b	13480 <__assert_fail@plt+0x25c4>
   135c8:	mov	r2, #5
   135cc:	ldr	r1, [pc, #432]	; 13784 <__assert_fail@plt+0x28c8>
   135d0:	mov	r0, #0
   135d4:	bl	10d00 <dcgettext@plt>
   135d8:	ldr	r3, [r5]
   135dc:	ldr	r2, [r5, #24]
   135e0:	str	r2, [sp, #20]
   135e4:	ldr	r2, [r5, #20]
   135e8:	str	r2, [sp, #16]
   135ec:	ldr	r2, [r5, #16]
   135f0:	str	r2, [sp, #12]
   135f4:	ldr	r2, [r5, #12]
   135f8:	str	r2, [sp, #8]
   135fc:	ldr	r2, [r5, #8]
   13600:	str	r2, [sp, #4]
   13604:	ldr	r2, [r5, #4]
   13608:	str	r2, [sp]
   1360c:	mov	r2, r0
   13610:	mov	r1, #1
   13614:	mov	r0, r4
   13618:	bl	10e44 <__fprintf_chk@plt>
   1361c:	b	13480 <__assert_fail@plt+0x25c4>
   13620:	mov	r2, #5
   13624:	ldr	r1, [pc, #348]	; 13788 <__assert_fail@plt+0x28cc>
   13628:	mov	r0, #0
   1362c:	bl	10d00 <dcgettext@plt>
   13630:	ldr	r3, [r5]
   13634:	ldr	r2, [r5, #28]
   13638:	str	r2, [sp, #24]
   1363c:	ldr	r2, [r5, #24]
   13640:	str	r2, [sp, #20]
   13644:	ldr	r2, [r5, #20]
   13648:	str	r2, [sp, #16]
   1364c:	ldr	r2, [r5, #16]
   13650:	str	r2, [sp, #12]
   13654:	ldr	r2, [r5, #12]
   13658:	str	r2, [sp, #8]
   1365c:	ldr	r2, [r5, #8]
   13660:	str	r2, [sp, #4]
   13664:	ldr	r2, [r5, #4]
   13668:	str	r2, [sp]
   1366c:	mov	r2, r0
   13670:	mov	r1, #1
   13674:	mov	r0, r4
   13678:	bl	10e44 <__fprintf_chk@plt>
   1367c:	b	13480 <__assert_fail@plt+0x25c4>
   13680:	mov	r2, #5
   13684:	ldr	r1, [pc, #256]	; 1378c <__assert_fail@plt+0x28d0>
   13688:	mov	r0, #0
   1368c:	bl	10d00 <dcgettext@plt>
   13690:	ldr	r3, [r5]
   13694:	ldr	r2, [r5, #32]
   13698:	str	r2, [sp, #28]
   1369c:	ldr	r2, [r5, #28]
   136a0:	str	r2, [sp, #24]
   136a4:	ldr	r2, [r5, #24]
   136a8:	str	r2, [sp, #20]
   136ac:	ldr	r2, [r5, #20]
   136b0:	str	r2, [sp, #16]
   136b4:	ldr	r2, [r5, #16]
   136b8:	str	r2, [sp, #12]
   136bc:	ldr	r2, [r5, #12]
   136c0:	str	r2, [sp, #8]
   136c4:	ldr	r2, [r5, #8]
   136c8:	str	r2, [sp, #4]
   136cc:	ldr	r2, [r5, #4]
   136d0:	str	r2, [sp]
   136d4:	mov	r2, r0
   136d8:	mov	r1, #1
   136dc:	mov	r0, r4
   136e0:	bl	10e44 <__fprintf_chk@plt>
   136e4:	b	13480 <__assert_fail@plt+0x25c4>
   136e8:	mov	r2, #5
   136ec:	ldr	r1, [pc, #156]	; 13790 <__assert_fail@plt+0x28d4>
   136f0:	mov	r0, #0
   136f4:	bl	10d00 <dcgettext@plt>
   136f8:	ldr	r3, [r5]
   136fc:	ldr	r2, [r5, #32]
   13700:	str	r2, [sp, #28]
   13704:	ldr	r2, [r5, #28]
   13708:	str	r2, [sp, #24]
   1370c:	ldr	r2, [r5, #24]
   13710:	str	r2, [sp, #20]
   13714:	ldr	r2, [r5, #20]
   13718:	str	r2, [sp, #16]
   1371c:	ldr	r2, [r5, #16]
   13720:	str	r2, [sp, #12]
   13724:	ldr	r2, [r5, #12]
   13728:	str	r2, [sp, #8]
   1372c:	ldr	r2, [r5, #8]
   13730:	str	r2, [sp, #4]
   13734:	ldr	r2, [r5, #4]
   13738:	str	r2, [sp]
   1373c:	mov	r2, r0
   13740:	mov	r1, #1
   13744:	mov	r0, r4
   13748:	bl	10e44 <__fprintf_chk@plt>
   1374c:	b	13480 <__assert_fail@plt+0x25c4>
   13750:	andeq	r5, r1, ip, lsl #13
   13754:	andeq	r5, r1, r0, lsr #13
   13758:	andeq	r0, r0, r6, ror #15
   1375c:	andeq	r5, r1, r8, ror r9
   13760:	andeq	r5, r1, r4, lsr #13
   13764:	andeq	r5, r1, r0, asr r7
   13768:	muleq	r1, r8, r6
   1376c:	andeq	r5, r1, r4, ror r7
   13770:	andeq	r5, r1, r4, lsl #15
   13774:	muleq	r1, ip, r7
   13778:			; <UNDEFINED> instruction: 0x000157b8
   1377c:	ldrdeq	r5, [r1], -r8
   13780:	strdeq	r5, [r1], -ip
   13784:	andeq	r5, r1, r4, lsr #16
   13788:	andeq	r5, r1, r0, asr r8
   1378c:	andeq	r5, r1, r0, lsl #17
   13790:			; <UNDEFINED> instruction: 0x000158b4
   13794:	push	{r4, r5, lr}
   13798:	sub	sp, sp, #12
   1379c:	ldr	r5, [sp, #24]
   137a0:	ldr	ip, [r5]
   137a4:	cmp	ip, #0
   137a8:	beq	137d8 <__assert_fail@plt+0x291c>
   137ac:	mov	lr, r5
   137b0:	mov	ip, #0
   137b4:	add	ip, ip, #1
   137b8:	ldr	r4, [lr, #4]!
   137bc:	cmp	r4, #0
   137c0:	bne	137b4 <__assert_fail@plt+0x28f8>
   137c4:	str	ip, [sp, #4]
   137c8:	str	r5, [sp]
   137cc:	bl	13374 <__assert_fail@plt+0x24b8>
   137d0:	add	sp, sp, #12
   137d4:	pop	{r4, r5, pc}
   137d8:	mov	ip, #0
   137dc:	b	137c4 <__assert_fail@plt+0x2908>
   137e0:	push	{r4, r5, lr}
   137e4:	sub	sp, sp, #52	; 0x34
   137e8:	ldr	r4, [sp, #64]	; 0x40
   137ec:	sub	r4, r4, #4
   137f0:	add	r5, sp, #4
   137f4:	mov	ip, #0
   137f8:	ldr	lr, [r4, #4]!
   137fc:	str	lr, [r5, #4]!
   13800:	cmp	lr, #0
   13804:	beq	13814 <__assert_fail@plt+0x2958>
   13808:	add	ip, ip, #1
   1380c:	cmp	ip, #10
   13810:	bne	137f8 <__assert_fail@plt+0x293c>
   13814:	str	ip, [sp, #4]
   13818:	add	ip, sp, #8
   1381c:	str	ip, [sp]
   13820:	bl	13374 <__assert_fail@plt+0x24b8>
   13824:	add	sp, sp, #52	; 0x34
   13828:	pop	{r4, r5, pc}
   1382c:	push	{r3}		; (str r3, [sp, #-4]!)
   13830:	push	{lr}		; (str lr, [sp, #-4]!)
   13834:	sub	sp, sp, #16
   13838:	add	r3, sp, #24
   1383c:	str	r3, [sp, #12]
   13840:	str	r3, [sp]
   13844:	ldr	r3, [sp, #20]
   13848:	bl	137e0 <__assert_fail@plt+0x2924>
   1384c:	add	sp, sp, #16
   13850:	pop	{lr}		; (ldr lr, [sp], #4)
   13854:	add	sp, sp, #4
   13858:	bx	lr
   1385c:	push	{r4, lr}
   13860:	ldr	r3, [pc, #112]	; 138d8 <__assert_fail@plt+0x2a1c>
   13864:	ldr	r1, [r3]
   13868:	mov	r0, #10
   1386c:	bl	10cf4 <fputc_unlocked@plt>
   13870:	mov	r2, #5
   13874:	ldr	r1, [pc, #96]	; 138dc <__assert_fail@plt+0x2a20>
   13878:	mov	r0, #0
   1387c:	bl	10d00 <dcgettext@plt>
   13880:	ldr	r2, [pc, #88]	; 138e0 <__assert_fail@plt+0x2a24>
   13884:	mov	r1, r0
   13888:	mov	r0, #1
   1388c:	bl	10e2c <__printf_chk@plt>
   13890:	mov	r2, #5
   13894:	ldr	r1, [pc, #72]	; 138e4 <__assert_fail@plt+0x2a28>
   13898:	mov	r0, #0
   1389c:	bl	10d00 <dcgettext@plt>
   138a0:	ldr	r3, [pc, #64]	; 138e8 <__assert_fail@plt+0x2a2c>
   138a4:	ldr	r2, [pc, #64]	; 138ec <__assert_fail@plt+0x2a30>
   138a8:	mov	r1, r0
   138ac:	mov	r0, #1
   138b0:	bl	10e2c <__printf_chk@plt>
   138b4:	mov	r2, #5
   138b8:	ldr	r1, [pc, #48]	; 138f0 <__assert_fail@plt+0x2a34>
   138bc:	mov	r0, #0
   138c0:	bl	10d00 <dcgettext@plt>
   138c4:	ldr	r2, [pc, #40]	; 138f4 <__assert_fail@plt+0x2a38>
   138c8:	mov	r1, r0
   138cc:	mov	r0, #1
   138d0:	bl	10e2c <__printf_chk@plt>
   138d4:	pop	{r4, pc}
   138d8:	andeq	r6, r2, r4, asr #2
   138dc:	strdeq	r5, [r1], -r0
   138e0:	andeq	r5, r1, r4, lsl #18
   138e4:	andeq	r5, r1, ip, lsl r9
   138e8:	andeq	r5, r1, r8, ror r3
   138ec:	andeq	r5, r1, r0, lsr #7
   138f0:	andeq	r5, r1, r0, lsr r9
   138f4:	andeq	r5, r1, r8, asr r9
   138f8:	push	{r4, lr}
   138fc:	bl	14604 <__assert_fail@plt+0x3748>
   13900:	cmp	r0, #0
   13904:	popne	{r4, pc}
   13908:	bl	13e9c <__assert_fail@plt+0x2fe0>
   1390c:	push	{r4, lr}
   13910:	bl	14604 <__assert_fail@plt+0x3748>
   13914:	cmp	r0, #0
   13918:	popne	{r4, pc}
   1391c:	bl	13e9c <__assert_fail@plt+0x2fe0>
   13920:	push	{r4, lr}
   13924:	bl	138f8 <__assert_fail@plt+0x2a3c>
   13928:	pop	{r4, pc}
   1392c:	push	{r4, r5, r6, lr}
   13930:	mov	r5, r0
   13934:	mov	r4, r1
   13938:	bl	14634 <__assert_fail@plt+0x3778>
   1393c:	cmp	r0, #0
   13940:	popne	{r4, r5, r6, pc}
   13944:	adds	r4, r4, #0
   13948:	movne	r4, #1
   1394c:	cmp	r5, #0
   13950:	orreq	r4, r4, #1
   13954:	cmp	r4, #0
   13958:	popeq	{r4, r5, r6, pc}
   1395c:	bl	13e9c <__assert_fail@plt+0x2fe0>
   13960:	push	{r4, lr}
   13964:	cmp	r1, #0
   13968:	orreq	r1, r1, #1
   1396c:	bl	14634 <__assert_fail@plt+0x3778>
   13970:	cmp	r0, #0
   13974:	popne	{r4, pc}
   13978:	bl	13e9c <__assert_fail@plt+0x2fe0>
   1397c:	push	{r4, r5, r6, lr}
   13980:	mov	r6, r0
   13984:	mov	r5, r1
   13988:	mov	r4, r2
   1398c:	bl	14994 <__assert_fail@plt+0x3ad8>
   13990:	cmp	r0, #0
   13994:	popne	{r4, r5, r6, pc}
   13998:	cmp	r6, #0
   1399c:	beq	139ac <__assert_fail@plt+0x2af0>
   139a0:	cmp	r5, #0
   139a4:	cmpne	r4, #0
   139a8:	popeq	{r4, r5, r6, pc}
   139ac:	bl	13e9c <__assert_fail@plt+0x2fe0>
   139b0:	push	{r4, lr}
   139b4:	bl	1397c <__assert_fail@plt+0x2ac0>
   139b8:	pop	{r4, pc}
   139bc:	push	{r4, lr}
   139c0:	mov	ip, r1
   139c4:	mov	r3, r2
   139c8:	cmp	r2, #0
   139cc:	cmpne	r1, #0
   139d0:	moveq	r3, #1
   139d4:	moveq	ip, r3
   139d8:	mov	r2, r3
   139dc:	mov	r1, ip
   139e0:	bl	14994 <__assert_fail@plt+0x3ad8>
   139e4:	cmp	r0, #0
   139e8:	popne	{r4, pc}
   139ec:	bl	13e9c <__assert_fail@plt+0x2fe0>
   139f0:	push	{r4, lr}
   139f4:	mov	r2, r1
   139f8:	mov	r1, r0
   139fc:	mov	r0, #0
   13a00:	bl	1397c <__assert_fail@plt+0x2ac0>
   13a04:	pop	{r4, pc}
   13a08:	push	{r4, lr}
   13a0c:	mov	r2, r1
   13a10:	mov	r1, r0
   13a14:	mov	r0, #0
   13a18:	bl	139bc <__assert_fail@plt+0x2b00>
   13a1c:	pop	{r4, pc}
   13a20:	push	{r4, r5, r6, r7, r8, lr}
   13a24:	mov	r5, r1
   13a28:	mov	r6, r2
   13a2c:	ldr	r4, [r1]
   13a30:	subs	r7, r0, #0
   13a34:	beq	13a50 <__assert_fail@plt+0x2b94>
   13a38:	lsr	r2, r4, #1
   13a3c:	add	r3, r2, #1
   13a40:	mvn	r3, r3
   13a44:	cmp	r4, r3
   13a48:	bls	13a74 <__assert_fail@plt+0x2bb8>
   13a4c:	bl	13e9c <__assert_fail@plt+0x2fe0>
   13a50:	cmp	r4, #0
   13a54:	bne	13a7c <__assert_fail@plt+0x2bc0>
   13a58:	mov	r1, r2
   13a5c:	mov	r0, #64	; 0x40
   13a60:	bl	14ae8 <__assert_fail@plt+0x3c2c>
   13a64:	cmp	r0, #0
   13a68:	movne	r4, r0
   13a6c:	addeq	r4, r0, #1
   13a70:	b	13a7c <__assert_fail@plt+0x2bc0>
   13a74:	add	r4, r4, #1
   13a78:	add	r4, r4, r2
   13a7c:	mov	r2, r6
   13a80:	mov	r1, r4
   13a84:	mov	r0, r7
   13a88:	bl	1397c <__assert_fail@plt+0x2ac0>
   13a8c:	str	r4, [r5]
   13a90:	pop	{r4, r5, r6, r7, r8, pc}
   13a94:	push	{r4, lr}
   13a98:	mov	r2, #1
   13a9c:	bl	13a20 <__assert_fail@plt+0x2b64>
   13aa0:	pop	{r4, pc}
   13aa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13aa8:	sub	sp, sp, #12
   13aac:	mov	fp, r0
   13ab0:	mov	sl, r1
   13ab4:	mov	r9, r2
   13ab8:	mov	r7, r3
   13abc:	ldr	r6, [sp, #48]	; 0x30
   13ac0:	ldr	r5, [r1]
   13ac4:	asrs	r4, r5, #1
   13ac8:	bmi	13c24 <__assert_fail@plt+0x2d68>
   13acc:	cmp	r5, #0
   13ad0:	blt	13c38 <__assert_fail@plt+0x2d7c>
   13ad4:	mvn	r3, #-2147483648	; 0x80000000
   13ad8:	sub	r3, r3, r4
   13adc:	cmp	r5, r3
   13ae0:	movle	r3, #0
   13ae4:	movgt	r3, #1
   13ae8:	cmp	r3, #0
   13aec:	addeq	r4, r4, r5
   13af0:	mvnne	r4, #-2147483648	; 0x80000000
   13af4:	mvn	r8, r7
   13af8:	lsr	r8, r8, #31
   13afc:	cmp	r7, r4
   13b00:	movge	r3, #0
   13b04:	andlt	r3, r8, #1
   13b08:	cmp	r3, #0
   13b0c:	movne	r4, r7
   13b10:	cmp	r6, #0
   13b14:	blt	13c4c <__assert_fail@plt+0x2d90>
   13b18:	cmp	r6, #0
   13b1c:	beq	13cf8 <__assert_fail@plt+0x2e3c>
   13b20:	cmp	r4, #0
   13b24:	blt	13ca8 <__assert_fail@plt+0x2dec>
   13b28:	mov	r1, r6
   13b2c:	mvn	r0, #-2147483648	; 0x80000000
   13b30:	bl	14cf4 <__assert_fail@plt+0x3e38>
   13b34:	cmp	r0, r4
   13b38:	movge	r0, #0
   13b3c:	movlt	r0, #1
   13b40:	cmp	r0, #0
   13b44:	mvnne	r3, #-2147483648	; 0x80000000
   13b48:	strne	r3, [sp, #4]
   13b4c:	beq	13ce0 <__assert_fail@plt+0x2e24>
   13b50:	mov	r1, r6
   13b54:	ldr	r0, [sp, #4]
   13b58:	bl	14cf4 <__assert_fail@plt+0x3e38>
   13b5c:	mov	r4, r0
   13b60:	mov	r1, r6
   13b64:	ldr	r0, [sp, #4]
   13b68:	bl	14f14 <__assert_fail@plt+0x4058>
   13b6c:	ldr	r3, [sp, #4]
   13b70:	sub	r1, r3, r1
   13b74:	cmp	fp, #0
   13b78:	moveq	r3, #0
   13b7c:	streq	r3, [sl]
   13b80:	sub	r3, r4, r5
   13b84:	cmp	r3, r9
   13b88:	bge	13c10 <__assert_fail@plt+0x2d54>
   13b8c:	cmp	r9, #0
   13b90:	blt	13d04 <__assert_fail@plt+0x2e48>
   13b94:	cmp	r5, #0
   13b98:	blt	13d18 <__assert_fail@plt+0x2e5c>
   13b9c:	mvn	r3, #-2147483648	; 0x80000000
   13ba0:	sub	r3, r3, r9
   13ba4:	cmp	r5, r3
   13ba8:	movle	r3, #0
   13bac:	movgt	r3, #1
   13bb0:	cmp	r3, #0
   13bb4:	bne	13dc0 <__assert_fail@plt+0x2f04>
   13bb8:	add	r5, r5, r9
   13bbc:	mov	r4, r5
   13bc0:	cmp	r7, r5
   13bc4:	movge	r7, #0
   13bc8:	andlt	r7, r8, #1
   13bcc:	cmp	r7, #0
   13bd0:	bne	13dc0 <__assert_fail@plt+0x2f04>
   13bd4:	cmp	r6, #0
   13bd8:	blt	13d2c <__assert_fail@plt+0x2e70>
   13bdc:	cmp	r6, #0
   13be0:	beq	13c0c <__assert_fail@plt+0x2d50>
   13be4:	cmp	r5, #0
   13be8:	blt	13d88 <__assert_fail@plt+0x2ecc>
   13bec:	mov	r1, r6
   13bf0:	mvn	r0, #-2147483648	; 0x80000000
   13bf4:	bl	14cf4 <__assert_fail@plt+0x3e38>
   13bf8:	cmp	r5, r0
   13bfc:	movle	r0, #0
   13c00:	movgt	r0, #1
   13c04:	cmp	r0, #0
   13c08:	bne	13dc0 <__assert_fail@plt+0x2f04>
   13c0c:	mul	r1, r5, r6
   13c10:	mov	r0, fp
   13c14:	bl	1392c <__assert_fail@plt+0x2a70>
   13c18:	str	r4, [sl]
   13c1c:	add	sp, sp, #12
   13c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c24:	rsb	r3, r4, #-2147483648	; 0x80000000
   13c28:	cmp	r5, r3
   13c2c:	movge	r3, #0
   13c30:	movlt	r3, #1
   13c34:	b	13ae8 <__assert_fail@plt+0x2c2c>
   13c38:	rsb	r3, r5, #-2147483648	; 0x80000000
   13c3c:	cmp	r4, r3
   13c40:	movge	r3, #0
   13c44:	movlt	r3, #1
   13c48:	b	13ae8 <__assert_fail@plt+0x2c2c>
   13c4c:	cmp	r4, #0
   13c50:	blt	13c78 <__assert_fail@plt+0x2dbc>
   13c54:	cmn	r6, #1
   13c58:	beq	13c94 <__assert_fail@plt+0x2dd8>
   13c5c:	mov	r1, r6
   13c60:	mov	r0, #-2147483648	; 0x80000000
   13c64:	bl	14cf4 <__assert_fail@plt+0x3e38>
   13c68:	cmp	r0, r4
   13c6c:	movge	r0, #0
   13c70:	movlt	r0, #1
   13c74:	b	13b40 <__assert_fail@plt+0x2c84>
   13c78:	mov	r1, r6
   13c7c:	mvn	r0, #-2147483648	; 0x80000000
   13c80:	bl	14cf4 <__assert_fail@plt+0x3e38>
   13c84:	cmp	r0, r4
   13c88:	movle	r0, #0
   13c8c:	movgt	r0, #1
   13c90:	b	13b40 <__assert_fail@plt+0x2c84>
   13c94:	add	r0, r4, #-2147483648	; 0x80000000
   13c98:	cmp	r0, #0
   13c9c:	movle	r0, #0
   13ca0:	movgt	r0, #1
   13ca4:	b	13b40 <__assert_fail@plt+0x2c84>
   13ca8:	cmn	r4, #1
   13cac:	beq	13ccc <__assert_fail@plt+0x2e10>
   13cb0:	mov	r1, r4
   13cb4:	mov	r0, #-2147483648	; 0x80000000
   13cb8:	bl	14cf4 <__assert_fail@plt+0x3e38>
   13cbc:	cmp	r6, r0
   13cc0:	movle	r0, #0
   13cc4:	movgt	r0, #1
   13cc8:	b	13b40 <__assert_fail@plt+0x2c84>
   13ccc:	add	r0, r6, #-2147483648	; 0x80000000
   13cd0:	cmp	r0, #0
   13cd4:	movle	r0, #0
   13cd8:	movgt	r0, #1
   13cdc:	b	13b40 <__assert_fail@plt+0x2c84>
   13ce0:	mul	r1, r6, r4
   13ce4:	cmp	r1, #63	; 0x3f
   13ce8:	movle	r3, #64	; 0x40
   13cec:	strle	r3, [sp, #4]
   13cf0:	bgt	13b74 <__assert_fail@plt+0x2cb8>
   13cf4:	b	13b50 <__assert_fail@plt+0x2c94>
   13cf8:	mov	r3, #64	; 0x40
   13cfc:	str	r3, [sp, #4]
   13d00:	b	13b50 <__assert_fail@plt+0x2c94>
   13d04:	rsb	r3, r9, #-2147483648	; 0x80000000
   13d08:	cmp	r5, r3
   13d0c:	movge	r3, #0
   13d10:	movlt	r3, #1
   13d14:	b	13bb0 <__assert_fail@plt+0x2cf4>
   13d18:	rsb	r3, r5, #-2147483648	; 0x80000000
   13d1c:	cmp	r9, r3
   13d20:	movge	r3, #0
   13d24:	movlt	r3, #1
   13d28:	b	13bb0 <__assert_fail@plt+0x2cf4>
   13d2c:	cmp	r5, #0
   13d30:	blt	13d58 <__assert_fail@plt+0x2e9c>
   13d34:	cmn	r6, #1
   13d38:	beq	13d74 <__assert_fail@plt+0x2eb8>
   13d3c:	mov	r1, r6
   13d40:	mov	r0, #-2147483648	; 0x80000000
   13d44:	bl	14cf4 <__assert_fail@plt+0x3e38>
   13d48:	cmp	r5, r0
   13d4c:	movle	r0, #0
   13d50:	movgt	r0, #1
   13d54:	b	13c04 <__assert_fail@plt+0x2d48>
   13d58:	mov	r1, r6
   13d5c:	mvn	r0, #-2147483648	; 0x80000000
   13d60:	bl	14cf4 <__assert_fail@plt+0x3e38>
   13d64:	cmp	r5, r0
   13d68:	movge	r0, #0
   13d6c:	movlt	r0, #1
   13d70:	b	13c04 <__assert_fail@plt+0x2d48>
   13d74:	add	r0, r5, #-2147483648	; 0x80000000
   13d78:	cmp	r0, #0
   13d7c:	movle	r0, #0
   13d80:	movgt	r0, #1
   13d84:	b	13c04 <__assert_fail@plt+0x2d48>
   13d88:	cmn	r5, #1
   13d8c:	beq	13dac <__assert_fail@plt+0x2ef0>
   13d90:	mov	r1, r5
   13d94:	mov	r0, #-2147483648	; 0x80000000
   13d98:	bl	14cf4 <__assert_fail@plt+0x3e38>
   13d9c:	cmp	r6, r0
   13da0:	movle	r0, #0
   13da4:	movgt	r0, #1
   13da8:	b	13c04 <__assert_fail@plt+0x2d48>
   13dac:	add	r0, r6, #-2147483648	; 0x80000000
   13db0:	cmp	r0, #0
   13db4:	movle	r0, #0
   13db8:	movgt	r0, #1
   13dbc:	b	13c04 <__assert_fail@plt+0x2d48>
   13dc0:	bl	13e9c <__assert_fail@plt+0x2fe0>
   13dc4:	push	{r4, lr}
   13dc8:	bl	145b4 <__assert_fail@plt+0x36f8>
   13dcc:	cmp	r0, #0
   13dd0:	popne	{r4, pc}
   13dd4:	bl	13e9c <__assert_fail@plt+0x2fe0>
   13dd8:	push	{r4, lr}
   13ddc:	mov	r1, #1
   13de0:	bl	13dc4 <__assert_fail@plt+0x2f08>
   13de4:	pop	{r4, pc}
   13de8:	push	{r4, lr}
   13dec:	bl	145b4 <__assert_fail@plt+0x36f8>
   13df0:	cmp	r0, #0
   13df4:	popne	{r4, pc}
   13df8:	bl	13e9c <__assert_fail@plt+0x2fe0>
   13dfc:	push	{r4, lr}
   13e00:	mov	r1, #1
   13e04:	bl	13de8 <__assert_fail@plt+0x2f2c>
   13e08:	pop	{r4, pc}
   13e0c:	push	{r4, r5, r6, lr}
   13e10:	mov	r5, r0
   13e14:	mov	r4, r1
   13e18:	mov	r0, r1
   13e1c:	bl	138f8 <__assert_fail@plt+0x2a3c>
   13e20:	mov	r2, r4
   13e24:	mov	r1, r5
   13e28:	bl	10cb8 <memcpy@plt>
   13e2c:	pop	{r4, r5, r6, pc}
   13e30:	push	{r4, r5, r6, lr}
   13e34:	mov	r5, r0
   13e38:	mov	r4, r1
   13e3c:	mov	r0, r1
   13e40:	bl	1390c <__assert_fail@plt+0x2a50>
   13e44:	mov	r2, r4
   13e48:	mov	r1, r5
   13e4c:	bl	10cb8 <memcpy@plt>
   13e50:	pop	{r4, r5, r6, pc}
   13e54:	push	{r4, r5, r6, lr}
   13e58:	mov	r5, r0
   13e5c:	mov	r4, r1
   13e60:	add	r0, r1, #1
   13e64:	bl	1390c <__assert_fail@plt+0x2a50>
   13e68:	mov	r2, #0
   13e6c:	strb	r2, [r0, r4]
   13e70:	mov	r2, r4
   13e74:	mov	r1, r5
   13e78:	bl	10cb8 <memcpy@plt>
   13e7c:	pop	{r4, r5, r6, pc}
   13e80:	push	{r4, lr}
   13e84:	mov	r4, r0
   13e88:	bl	10df0 <strlen@plt>
   13e8c:	add	r1, r0, #1
   13e90:	mov	r0, r4
   13e94:	bl	13e0c <__assert_fail@plt+0x2f50>
   13e98:	pop	{r4, pc}
   13e9c:	push	{r4, lr}
   13ea0:	ldr	r3, [pc, #40]	; 13ed0 <__assert_fail@plt+0x3014>
   13ea4:	ldr	r4, [r3]
   13ea8:	mov	r2, #5
   13eac:	ldr	r1, [pc, #32]	; 13ed4 <__assert_fail@plt+0x3018>
   13eb0:	mov	r0, #0
   13eb4:	bl	10d00 <dcgettext@plt>
   13eb8:	mov	r3, r0
   13ebc:	ldr	r2, [pc, #20]	; 13ed8 <__assert_fail@plt+0x301c>
   13ec0:	mov	r1, #0
   13ec4:	mov	r0, r4
   13ec8:	bl	10d78 <error@plt>
   13ecc:	bl	10eb0 <abort@plt>
   13ed0:	andeq	r6, r2, r8, ror #1
   13ed4:	andeq	r5, r1, r8, lsr #19
   13ed8:	andeq	r5, r1, ip, asr #10
   13edc:	push	{r4, r5, r6, r7, lr}
   13ee0:	sub	sp, sp, #20
   13ee4:	mov	r7, r0
   13ee8:	mov	r4, r2
   13eec:	mov	r5, r3
   13ef0:	ldr	r6, [sp, #56]	; 0x38
   13ef4:	ldr	r3, [sp, #48]	; 0x30
   13ef8:	str	r3, [sp]
   13efc:	add	r3, sp, #8
   13f00:	mov	r2, r1
   13f04:	mov	r1, #0
   13f08:	bl	14134 <__assert_fail@plt+0x3278>
   13f0c:	cmp	r0, #0
   13f10:	bne	13f90 <__assert_fail@plt+0x30d4>
   13f14:	ldrd	r0, [sp, #8]
   13f18:	ldrd	r2, [sp, #40]	; 0x28
   13f1c:	cmp	r1, r3
   13f20:	cmpeq	r0, r2
   13f24:	movhi	r3, #1
   13f28:	movls	r3, #0
   13f2c:	cmp	r1, r5
   13f30:	cmpeq	r0, r4
   13f34:	orrcc	r3, r3, #1
   13f38:	cmp	r3, #0
   13f3c:	beq	14008 <__assert_fail@plt+0x314c>
   13f40:	mvn	r2, #-1073741824	; 0xc0000000
   13f44:	mov	r3, #0
   13f48:	cmp	r1, r3
   13f4c:	cmpeq	r0, r2
   13f50:	bls	13f80 <__assert_fail@plt+0x30c4>
   13f54:	bl	10e08 <__errno_location@plt>
   13f58:	mov	r3, #75	; 0x4b
   13f5c:	str	r3, [r0]
   13f60:	cmp	r6, #0
   13f64:	bne	13fe0 <__assert_fail@plt+0x3124>
   13f68:	mov	r6, #1
   13f6c:	bl	10e08 <__errno_location@plt>
   13f70:	ldr	r4, [r0]
   13f74:	cmp	r4, #22
   13f78:	moveq	r4, #0
   13f7c:	b	13fe8 <__assert_fail@plt+0x312c>
   13f80:	bl	10e08 <__errno_location@plt>
   13f84:	mov	r3, #34	; 0x22
   13f88:	str	r3, [r0]
   13f8c:	b	13f60 <__assert_fail@plt+0x30a4>
   13f90:	cmp	r0, #1
   13f94:	beq	13fac <__assert_fail@plt+0x30f0>
   13f98:	cmp	r0, #3
   13f9c:	beq	13fd0 <__assert_fail@plt+0x3114>
   13fa0:	cmp	r6, #0
   13fa4:	moveq	r6, #1
   13fa8:	b	13f6c <__assert_fail@plt+0x30b0>
   13fac:	bl	10e08 <__errno_location@plt>
   13fb0:	mov	r3, #75	; 0x4b
   13fb4:	str	r3, [r0]
   13fb8:	cmp	r6, #0
   13fbc:	bne	13f6c <__assert_fail@plt+0x30b0>
   13fc0:	bl	10e08 <__errno_location@plt>
   13fc4:	ldr	r4, [r0]
   13fc8:	mov	r6, #1
   13fcc:	b	13fe8 <__assert_fail@plt+0x312c>
   13fd0:	bl	10e08 <__errno_location@plt>
   13fd4:	mov	r3, #0
   13fd8:	str	r3, [r0]
   13fdc:	b	13fb8 <__assert_fail@plt+0x30fc>
   13fe0:	bl	10e08 <__errno_location@plt>
   13fe4:	ldr	r4, [r0]
   13fe8:	mov	r0, r7
   13fec:	bl	13360 <__assert_fail@plt+0x24a4>
   13ff0:	str	r0, [sp]
   13ff4:	ldr	r3, [sp, #52]	; 0x34
   13ff8:	ldr	r2, [pc, #16]	; 14010 <__assert_fail@plt+0x3154>
   13ffc:	mov	r1, r4
   14000:	mov	r0, r6
   14004:	bl	10d78 <error@plt>
   14008:	add	sp, sp, #20
   1400c:	pop	{r4, r5, r6, r7, pc}
   14010:	andeq	r5, r1, r8, asr #10
   14014:	push	{r4, r5, lr}
   14018:	sub	sp, sp, #28
   1401c:	ldr	r1, [sp, #56]	; 0x38
   14020:	str	r1, [sp, #16]
   14024:	ldr	r1, [sp, #52]	; 0x34
   14028:	str	r1, [sp, #12]
   1402c:	ldr	r1, [sp, #48]	; 0x30
   14030:	str	r1, [sp, #8]
   14034:	ldrd	r4, [sp, #40]	; 0x28
   14038:	strd	r4, [sp]
   1403c:	mov	r1, #10
   14040:	bl	13edc <__assert_fail@plt+0x3020>
   14044:	add	sp, sp, #28
   14048:	pop	{r4, r5, pc}
   1404c:	push	{r4, r5, r6, lr}
   14050:	mov	r5, r0
   14054:	subs	r4, r1, #0
   14058:	blt	140ac <__assert_fail@plt+0x31f0>
   1405c:	cmp	r4, #0
   14060:	moveq	r3, #0
   14064:	beq	14090 <__assert_fail@plt+0x31d4>
   14068:	mov	r2, r4
   1406c:	asr	r3, r4, #31
   14070:	mvn	r0, #0
   14074:	mvn	r1, #0
   14078:	bl	14f34 <__assert_fail@plt+0x4078>
   1407c:	ldrd	r2, [r5]
   14080:	cmp	r1, r3
   14084:	cmpeq	r0, r2
   14088:	movcc	r3, #1
   1408c:	movcs	r3, #0
   14090:	cmp	r3, #0
   14094:	beq	140cc <__assert_fail@plt+0x3210>
   14098:	mvn	r2, #0
   1409c:	mvn	r3, #0
   140a0:	strd	r2, [r5]
   140a4:	mov	r0, #1
   140a8:	pop	{r4, r5, r6, pc}
   140ac:	mov	r1, r4
   140b0:	mov	r0, #0
   140b4:	bl	14cf4 <__assert_fail@plt+0x3e38>
   140b8:	ldrd	r2, [r5]
   140bc:	orrs	r3, r2, r3
   140c0:	movne	r3, #1
   140c4:	moveq	r3, #0
   140c8:	b	14090 <__assert_fail@plt+0x31d4>
   140cc:	asr	r3, r4, #31
   140d0:	ldr	r1, [r5, #4]
   140d4:	ldr	r2, [r5]
   140d8:	mul	r3, r3, r2
   140dc:	mla	r1, r4, r1, r3
   140e0:	umull	r2, r3, r2, r4
   140e4:	add	r3, r1, r3
   140e8:	strd	r2, [r5]
   140ec:	mov	r0, #0
   140f0:	pop	{r4, r5, r6, pc}
   140f4:	push	{r4, r5, r6, r7, r8, lr}
   140f8:	subs	r4, r2, #0
   140fc:	beq	1412c <__assert_fail@plt+0x3270>
   14100:	mov	r7, r1
   14104:	mov	r6, r0
   14108:	mov	r5, #0
   1410c:	mov	r1, r7
   14110:	mov	r0, r6
   14114:	bl	1404c <__assert_fail@plt+0x3190>
   14118:	orr	r5, r5, r0
   1411c:	subs	r4, r4, #1
   14120:	bne	1410c <__assert_fail@plt+0x3250>
   14124:	mov	r0, r5
   14128:	pop	{r4, r5, r6, r7, r8, pc}
   1412c:	mov	r5, #0
   14130:	b	14124 <__assert_fail@plt+0x3268>
   14134:	push	{r4, r5, r6, r7, r8, r9, lr}
   14138:	sub	sp, sp, #20
   1413c:	cmp	r2, #36	; 0x24
   14140:	bhi	14180 <__assert_fail@plt+0x32c4>
   14144:	mov	r5, r0
   14148:	mov	r6, r1
   1414c:	mov	r7, r2
   14150:	mov	r9, r3
   14154:	cmp	r1, #0
   14158:	addeq	r6, sp, #12
   1415c:	bl	10e08 <__errno_location@plt>
   14160:	mov	r8, r0
   14164:	mov	r3, #0
   14168:	str	r3, [r0]
   1416c:	ldrb	r4, [r5]
   14170:	bl	10dcc <__ctype_b_loc@plt>
   14174:	ldr	r1, [r0]
   14178:	mov	r2, r5
   1417c:	b	14198 <__assert_fail@plt+0x32dc>
   14180:	ldr	r3, [pc, #1056]	; 145a8 <__assert_fail@plt+0x36ec>
   14184:	mov	r2, #85	; 0x55
   14188:	ldr	r1, [pc, #1052]	; 145ac <__assert_fail@plt+0x36f0>
   1418c:	ldr	r0, [pc, #1052]	; 145b0 <__assert_fail@plt+0x36f4>
   14190:	bl	10ebc <__assert_fail@plt>
   14194:	ldrb	r4, [r2, #1]!
   14198:	lsl	r3, r4, #1
   1419c:	ldrh	r3, [r1, r3]
   141a0:	tst	r3, #8192	; 0x2000
   141a4:	bne	14194 <__assert_fail@plt+0x32d8>
   141a8:	cmp	r4, #45	; 0x2d
   141ac:	moveq	r4, #4
   141b0:	bne	141c0 <__assert_fail@plt+0x3304>
   141b4:	mov	r0, r4
   141b8:	add	sp, sp, #20
   141bc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   141c0:	mov	r3, #0
   141c4:	mov	r2, r7
   141c8:	mov	r1, r6
   141cc:	mov	r0, r5
   141d0:	bl	10cc4 <__strtoull_internal@plt>
   141d4:	strd	r0, [sp]
   141d8:	ldr	r7, [r6]
   141dc:	cmp	r5, r7
   141e0:	beq	14204 <__assert_fail@plt+0x3348>
   141e4:	ldr	r3, [r8]
   141e8:	cmp	r3, #0
   141ec:	beq	1424c <__assert_fail@plt+0x3390>
   141f0:	cmp	r3, #34	; 0x22
   141f4:	moveq	r4, #1
   141f8:	beq	14250 <__assert_fail@plt+0x3394>
   141fc:	mov	r4, #4
   14200:	b	141b4 <__assert_fail@plt+0x32f8>
   14204:	ldr	r3, [sp, #48]	; 0x30
   14208:	cmp	r3, #0
   1420c:	moveq	r4, #4
   14210:	beq	141b4 <__assert_fail@plt+0x32f8>
   14214:	ldrb	r1, [r7]
   14218:	cmp	r1, #0
   1421c:	moveq	r4, #4
   14220:	beq	141b4 <__assert_fail@plt+0x32f8>
   14224:	mov	r0, r3
   14228:	bl	10dfc <strchr@plt>
   1422c:	cmp	r0, #0
   14230:	moveq	r4, #4
   14234:	beq	141b4 <__assert_fail@plt+0x32f8>
   14238:	mov	r2, #1
   1423c:	mov	r3, #0
   14240:	strd	r2, [sp]
   14244:	mov	r4, #0
   14248:	b	1425c <__assert_fail@plt+0x33a0>
   1424c:	mov	r4, #0
   14250:	ldr	r3, [sp, #48]	; 0x30
   14254:	cmp	r3, #0
   14258:	beq	1434c <__assert_fail@plt+0x3490>
   1425c:	ldrb	r5, [r7]
   14260:	cmp	r5, #0
   14264:	beq	144e4 <__assert_fail@plt+0x3628>
   14268:	mov	r1, r5
   1426c:	ldr	r0, [sp, #48]	; 0x30
   14270:	bl	10dfc <strchr@plt>
   14274:	cmp	r0, #0
   14278:	beq	14354 <__assert_fail@plt+0x3498>
   1427c:	sub	r3, r5, #69	; 0x45
   14280:	cmp	r3, #47	; 0x2f
   14284:	ldrls	pc, [pc, r3, lsl #2]
   14288:	b	143c0 <__assert_fail@plt+0x3504>
   1428c:	andeq	r4, r1, r4, ror #6
   14290:	andeq	r4, r1, r0, asr #7
   14294:	andeq	r4, r1, r4, ror #6
   14298:	andeq	r4, r1, r0, asr #7
   1429c:	andeq	r4, r1, r0, asr #7
   142a0:	andeq	r4, r1, r0, asr #7
   142a4:	andeq	r4, r1, r4, ror #6
   142a8:	andeq	r4, r1, r0, asr #7
   142ac:	andeq	r4, r1, r4, ror #6
   142b0:	andeq	r4, r1, r0, asr #7
   142b4:	andeq	r4, r1, r0, asr #7
   142b8:	andeq	r4, r1, r4, ror #6
   142bc:	andeq	r4, r1, r0, asr #7
   142c0:	andeq	r4, r1, r0, asr #7
   142c4:	andeq	r4, r1, r0, asr #7
   142c8:	andeq	r4, r1, r4, ror #6
   142cc:	andeq	r4, r1, r0, asr #7
   142d0:	andeq	r4, r1, r0, asr #7
   142d4:	andeq	r4, r1, r0, asr #7
   142d8:	andeq	r4, r1, r0, asr #7
   142dc:	andeq	r4, r1, r4, ror #6
   142e0:	andeq	r4, r1, r4, ror #6
   142e4:	andeq	r4, r1, r0, asr #7
   142e8:	andeq	r4, r1, r0, asr #7
   142ec:	andeq	r4, r1, r0, asr #7
   142f0:	andeq	r4, r1, r0, asr #7
   142f4:	andeq	r4, r1, r0, asr #7
   142f8:	andeq	r4, r1, r0, asr #7
   142fc:	andeq	r4, r1, r0, asr #7
   14300:	andeq	r4, r1, r0, asr #7
   14304:	andeq	r4, r1, r0, asr #7
   14308:	andeq	r4, r1, r0, asr #7
   1430c:	andeq	r4, r1, r0, asr #7
   14310:	andeq	r4, r1, r0, asr #7
   14314:	andeq	r4, r1, r4, ror #6
   14318:	andeq	r4, r1, r0, asr #7
   1431c:	andeq	r4, r1, r0, asr #7
   14320:	andeq	r4, r1, r0, asr #7
   14324:	andeq	r4, r1, r4, ror #6
   14328:	andeq	r4, r1, r0, asr #7
   1432c:	andeq	r4, r1, r4, ror #6
   14330:	andeq	r4, r1, r0, asr #7
   14334:	andeq	r4, r1, r0, asr #7
   14338:	andeq	r4, r1, r0, asr #7
   1433c:	andeq	r4, r1, r0, asr #7
   14340:	andeq	r4, r1, r0, asr #7
   14344:	andeq	r4, r1, r0, asr #7
   14348:	andeq	r4, r1, r4, ror #6
   1434c:	strd	r0, [r9]
   14350:	b	141b4 <__assert_fail@plt+0x32f8>
   14354:	ldrd	r2, [sp]
   14358:	strd	r2, [r9]
   1435c:	orr	r4, r4, #2
   14360:	b	141b4 <__assert_fail@plt+0x32f8>
   14364:	mov	r1, #48	; 0x30
   14368:	ldr	r0, [sp, #48]	; 0x30
   1436c:	bl	10dfc <strchr@plt>
   14370:	cmp	r0, #0
   14374:	beq	144b0 <__assert_fail@plt+0x35f4>
   14378:	ldrb	r3, [r7, #1]
   1437c:	cmp	r3, #68	; 0x44
   14380:	beq	1439c <__assert_fail@plt+0x34e0>
   14384:	cmp	r3, #105	; 0x69
   14388:	beq	143a8 <__assert_fail@plt+0x34ec>
   1438c:	cmp	r3, #66	; 0x42
   14390:	movne	r7, #1
   14394:	movne	r1, #1024	; 0x400
   14398:	bne	143c8 <__assert_fail@plt+0x350c>
   1439c:	mov	r7, #2
   143a0:	mov	r1, #1000	; 0x3e8
   143a4:	b	143c8 <__assert_fail@plt+0x350c>
   143a8:	ldrb	r7, [r7, #2]
   143ac:	cmp	r7, #66	; 0x42
   143b0:	movne	r7, #1
   143b4:	moveq	r7, #3
   143b8:	mov	r1, #1024	; 0x400
   143bc:	b	143c8 <__assert_fail@plt+0x350c>
   143c0:	mov	r7, #1
   143c4:	mov	r1, #1024	; 0x400
   143c8:	sub	r5, r5, #66	; 0x42
   143cc:	cmp	r5, #53	; 0x35
   143d0:	ldrls	pc, [pc, r5, lsl #2]
   143d4:	b	14590 <__assert_fail@plt+0x36d4>
   143d8:	strdeq	r4, [r1], -r0
   143dc:	muleq	r1, r0, r5
   143e0:	muleq	r1, r0, r5
   143e4:	andeq	r4, r1, r0, lsl #10
   143e8:	muleq	r1, r0, r5
   143ec:	andeq	r4, r1, r0, lsl r5
   143f0:	muleq	r1, r0, r5
   143f4:	muleq	r1, r0, r5
   143f8:	muleq	r1, r0, r5
   143fc:	andeq	r4, r1, r0, lsr #10
   14400:	muleq	r1, r0, r5
   14404:	andeq	r4, r1, r0, lsr r5
   14408:	muleq	r1, r0, r5
   1440c:	muleq	r1, r0, r5
   14410:	andeq	r4, r1, r0, asr #10
   14414:	muleq	r1, r0, r5
   14418:	muleq	r1, r0, r5
   1441c:	muleq	r1, r0, r5
   14420:	andeq	r4, r1, r0, asr r5
   14424:	muleq	r1, r0, r5
   14428:	muleq	r1, r0, r5
   1442c:	muleq	r1, r0, r5
   14430:	muleq	r1, r0, r5
   14434:	andeq	r4, r1, r0, ror r5
   14438:	andeq	r4, r1, r0, lsl #11
   1443c:	muleq	r1, r0, r5
   14440:	muleq	r1, r0, r5
   14444:	muleq	r1, r0, r5
   14448:	muleq	r1, r0, r5
   1444c:	muleq	r1, r0, r5
   14450:	muleq	r1, r0, r5
   14454:	muleq	r1, r0, r5
   14458:			; <UNDEFINED> instruction: 0x000144bc
   1445c:	andeq	r4, r1, r0, lsr #11
   14460:	muleq	r1, r0, r5
   14464:	muleq	r1, r0, r5
   14468:	muleq	r1, r0, r5
   1446c:	andeq	r4, r1, r0, lsl r5
   14470:	muleq	r1, r0, r5
   14474:	muleq	r1, r0, r5
   14478:	muleq	r1, r0, r5
   1447c:	andeq	r4, r1, r0, lsr #10
   14480:	muleq	r1, r0, r5
   14484:	andeq	r4, r1, r0, lsr r5
   14488:	muleq	r1, r0, r5
   1448c:	muleq	r1, r0, r5
   14490:	muleq	r1, r0, r5
   14494:	muleq	r1, r0, r5
   14498:	muleq	r1, r0, r5
   1449c:	muleq	r1, r0, r5
   144a0:	andeq	r4, r1, r0, asr r5
   144a4:	muleq	r1, r0, r5
   144a8:	muleq	r1, r0, r5
   144ac:	andeq	r4, r1, r0, ror #10
   144b0:	mov	r7, #1
   144b4:	mov	r1, #1024	; 0x400
   144b8:	b	143c8 <__assert_fail@plt+0x350c>
   144bc:	mov	r1, #512	; 0x200
   144c0:	mov	r0, sp
   144c4:	bl	1404c <__assert_fail@plt+0x3190>
   144c8:	orr	r4, r4, r0
   144cc:	ldr	r3, [r6]
   144d0:	add	r2, r3, r7
   144d4:	str	r2, [r6]
   144d8:	ldrb	r3, [r3, r7]
   144dc:	cmp	r3, #0
   144e0:	orrne	r4, r4, #2
   144e4:	ldrd	r2, [sp]
   144e8:	strd	r2, [r9]
   144ec:	b	141b4 <__assert_fail@plt+0x32f8>
   144f0:	mov	r1, #1024	; 0x400
   144f4:	mov	r0, sp
   144f8:	bl	1404c <__assert_fail@plt+0x3190>
   144fc:	b	144c8 <__assert_fail@plt+0x360c>
   14500:	mov	r2, #6
   14504:	mov	r0, sp
   14508:	bl	140f4 <__assert_fail@plt+0x3238>
   1450c:	b	144c8 <__assert_fail@plt+0x360c>
   14510:	mov	r2, #3
   14514:	mov	r0, sp
   14518:	bl	140f4 <__assert_fail@plt+0x3238>
   1451c:	b	144c8 <__assert_fail@plt+0x360c>
   14520:	mov	r2, #1
   14524:	mov	r0, sp
   14528:	bl	140f4 <__assert_fail@plt+0x3238>
   1452c:	b	144c8 <__assert_fail@plt+0x360c>
   14530:	mov	r2, #2
   14534:	mov	r0, sp
   14538:	bl	140f4 <__assert_fail@plt+0x3238>
   1453c:	b	144c8 <__assert_fail@plt+0x360c>
   14540:	mov	r2, #5
   14544:	mov	r0, sp
   14548:	bl	140f4 <__assert_fail@plt+0x3238>
   1454c:	b	144c8 <__assert_fail@plt+0x360c>
   14550:	mov	r2, #4
   14554:	mov	r0, sp
   14558:	bl	140f4 <__assert_fail@plt+0x3238>
   1455c:	b	144c8 <__assert_fail@plt+0x360c>
   14560:	mov	r1, #2
   14564:	mov	r0, sp
   14568:	bl	1404c <__assert_fail@plt+0x3190>
   1456c:	b	144c8 <__assert_fail@plt+0x360c>
   14570:	mov	r2, #8
   14574:	mov	r0, sp
   14578:	bl	140f4 <__assert_fail@plt+0x3238>
   1457c:	b	144c8 <__assert_fail@plt+0x360c>
   14580:	mov	r2, #7
   14584:	mov	r0, sp
   14588:	bl	140f4 <__assert_fail@plt+0x3238>
   1458c:	b	144c8 <__assert_fail@plt+0x360c>
   14590:	ldrd	r2, [sp]
   14594:	strd	r2, [r9]
   14598:	orr	r4, r4, #2
   1459c:	b	141b4 <__assert_fail@plt+0x32f8>
   145a0:	mov	r0, #0
   145a4:	b	144c8 <__assert_fail@plt+0x360c>
   145a8:			; <UNDEFINED> instruction: 0x000159bc
   145ac:	andeq	r5, r1, r8, asr #19
   145b0:	ldrdeq	r5, [r1], -r8
   145b4:	push	{r4, lr}
   145b8:	mov	r2, r0
   145bc:	mov	r3, r1
   145c0:	cmp	r1, #0
   145c4:	cmpne	r0, #0
   145c8:	moveq	r3, #1
   145cc:	moveq	r2, r3
   145d0:	umull	r0, r1, r2, r3
   145d4:	cmp	r0, #0
   145d8:	cmpge	r1, #0
   145dc:	bne	145f0 <__assert_fail@plt+0x3734>
   145e0:	mov	r1, r3
   145e4:	mov	r0, r2
   145e8:	bl	10c64 <calloc@plt>
   145ec:	pop	{r4, pc}
   145f0:	bl	10e08 <__errno_location@plt>
   145f4:	mov	r3, #12
   145f8:	str	r3, [r0]
   145fc:	mov	r0, #0
   14600:	pop	{r4, pc}
   14604:	push	{r4, lr}
   14608:	cmp	r0, #0
   1460c:	moveq	r0, #1
   14610:	cmp	r0, #0
   14614:	blt	14620 <__assert_fail@plt+0x3764>
   14618:	bl	10d90 <malloc@plt>
   1461c:	pop	{r4, pc}
   14620:	bl	10e08 <__errno_location@plt>
   14624:	mov	r3, #12
   14628:	str	r3, [r0]
   1462c:	mov	r0, #0
   14630:	pop	{r4, pc}
   14634:	push	{r4, lr}
   14638:	cmp	r0, #0
   1463c:	beq	14658 <__assert_fail@plt+0x379c>
   14640:	cmp	r1, #0
   14644:	beq	14664 <__assert_fail@plt+0x37a8>
   14648:	cmp	r1, #0
   1464c:	blt	14670 <__assert_fail@plt+0x37b4>
   14650:	bl	10d18 <realloc@plt>
   14654:	pop	{r4, pc}
   14658:	mov	r0, r1
   1465c:	bl	14604 <__assert_fail@plt+0x3748>
   14660:	pop	{r4, pc}
   14664:	bl	14808 <__assert_fail@plt+0x394c>
   14668:	mov	r0, #0
   1466c:	pop	{r4, pc}
   14670:	bl	10e08 <__errno_location@plt>
   14674:	mov	r3, #12
   14678:	str	r3, [r0]
   1467c:	mov	r0, #0
   14680:	pop	{r4, pc}
   14684:	push	{r4, r5, r6, lr}
   14688:	mov	r5, r0
   1468c:	bl	10d60 <__fpending@plt>
   14690:	mov	r6, r0
   14694:	ldr	r4, [r5]
   14698:	and	r4, r4, #32
   1469c:	mov	r0, r5
   146a0:	bl	146fc <__assert_fail@plt+0x3840>
   146a4:	cmp	r4, #0
   146a8:	bne	146d0 <__assert_fail@plt+0x3814>
   146ac:	cmp	r0, #0
   146b0:	popeq	{r4, r5, r6, pc}
   146b4:	cmp	r6, #0
   146b8:	bne	146ec <__assert_fail@plt+0x3830>
   146bc:	bl	10e08 <__errno_location@plt>
   146c0:	ldr	r0, [r0]
   146c4:	subs	r0, r0, #9
   146c8:	mvnne	r0, #0
   146cc:	pop	{r4, r5, r6, pc}
   146d0:	cmp	r0, #0
   146d4:	bne	146f4 <__assert_fail@plt+0x3838>
   146d8:	bl	10e08 <__errno_location@plt>
   146dc:	mov	r3, #0
   146e0:	str	r3, [r0]
   146e4:	mvn	r0, #0
   146e8:	pop	{r4, r5, r6, pc}
   146ec:	mvn	r0, #0
   146f0:	pop	{r4, r5, r6, pc}
   146f4:	mvn	r0, #0
   146f8:	pop	{r4, r5, r6, pc}
   146fc:	push	{r4, r5, r6, lr}
   14700:	sub	sp, sp, #8
   14704:	mov	r4, r0
   14708:	bl	10e38 <fileno@plt>
   1470c:	cmp	r0, #0
   14710:	blt	14788 <__assert_fail@plt+0x38cc>
   14714:	mov	r0, r4
   14718:	bl	10da8 <__freading@plt>
   1471c:	cmp	r0, #0
   14720:	beq	14754 <__assert_fail@plt+0x3898>
   14724:	mov	r0, r4
   14728:	bl	10e38 <fileno@plt>
   1472c:	mov	r3, #1
   14730:	str	r3, [sp]
   14734:	mov	r2, #0
   14738:	mov	r3, #0
   1473c:	bl	10d48 <lseek64@plt>
   14740:	mvn	r2, #0
   14744:	mvn	r3, #0
   14748:	cmp	r1, r3
   1474c:	cmpeq	r0, r2
   14750:	beq	14794 <__assert_fail@plt+0x38d8>
   14754:	mov	r0, r4
   14758:	bl	147a4 <__assert_fail@plt+0x38e8>
   1475c:	cmp	r0, #0
   14760:	beq	14794 <__assert_fail@plt+0x38d8>
   14764:	bl	10e08 <__errno_location@plt>
   14768:	mov	r5, r0
   1476c:	ldr	r6, [r0]
   14770:	mov	r0, r4
   14774:	bl	10e50 <fclose@plt>
   14778:	cmp	r6, #0
   1477c:	strne	r6, [r5]
   14780:	mvnne	r0, #0
   14784:	b	1479c <__assert_fail@plt+0x38e0>
   14788:	mov	r0, r4
   1478c:	bl	10e50 <fclose@plt>
   14790:	b	1479c <__assert_fail@plt+0x38e0>
   14794:	mov	r0, r4
   14798:	bl	10e50 <fclose@plt>
   1479c:	add	sp, sp, #8
   147a0:	pop	{r4, r5, r6, pc}
   147a4:	push	{r4, lr}
   147a8:	sub	sp, sp, #8
   147ac:	subs	r4, r0, #0
   147b0:	beq	147c4 <__assert_fail@plt+0x3908>
   147b4:	mov	r0, r4
   147b8:	bl	10da8 <__freading@plt>
   147bc:	cmp	r0, #0
   147c0:	bne	147d4 <__assert_fail@plt+0x3918>
   147c4:	mov	r0, r4
   147c8:	bl	10c94 <fflush@plt>
   147cc:	add	sp, sp, #8
   147d0:	pop	{r4, pc}
   147d4:	ldr	r3, [r4]
   147d8:	tst	r3, #256	; 0x100
   147dc:	bne	147ec <__assert_fail@plt+0x3930>
   147e0:	mov	r0, r4
   147e4:	bl	10c94 <fflush@plt>
   147e8:	b	147cc <__assert_fail@plt+0x3910>
   147ec:	mov	r3, #1
   147f0:	str	r3, [sp]
   147f4:	mov	r2, #0
   147f8:	mov	r3, #0
   147fc:	mov	r0, r4
   14800:	bl	14860 <__assert_fail@plt+0x39a4>
   14804:	b	147e0 <__assert_fail@plt+0x3924>
   14808:	push	{r4, r5, lr}
   1480c:	sub	sp, sp, #12
   14810:	mov	r5, r0
   14814:	bl	10e08 <__errno_location@plt>
   14818:	mov	r4, r0
   1481c:	ldr	r3, [r0]
   14820:	str	r3, [sp]
   14824:	str	r3, [sp, #4]
   14828:	mov	r3, #0
   1482c:	str	r3, [r0]
   14830:	mov	r0, r5
   14834:	bl	10ca0 <free@plt>
   14838:	ldr	r3, [r4]
   1483c:	cmp	r3, #0
   14840:	moveq	r3, #4
   14844:	movne	r3, #0
   14848:	add	r2, sp, #8
   1484c:	add	r3, r2, r3
   14850:	ldr	r3, [r3, #-8]
   14854:	str	r3, [r4]
   14858:	add	sp, sp, #12
   1485c:	pop	{r4, r5, pc}
   14860:	push	{r4, r5, r6, r7, lr}
   14864:	sub	sp, sp, #12
   14868:	mov	r4, r0
   1486c:	mov	r6, r2
   14870:	mov	r7, r3
   14874:	ldr	r5, [sp, #32]
   14878:	ldr	r2, [r0, #8]
   1487c:	ldr	r3, [r0, #4]
   14880:	cmp	r2, r3
   14884:	beq	148a4 <__assert_fail@plt+0x39e8>
   14888:	str	r5, [sp]
   1488c:	mov	r2, r6
   14890:	mov	r3, r7
   14894:	mov	r0, r4
   14898:	bl	10e5c <fseeko64@plt>
   1489c:	add	sp, sp, #12
   148a0:	pop	{r4, r5, r6, r7, pc}
   148a4:	ldr	r2, [r0, #20]
   148a8:	ldr	r3, [r0, #16]
   148ac:	cmp	r2, r3
   148b0:	bne	14888 <__assert_fail@plt+0x39cc>
   148b4:	ldr	r3, [r0, #36]	; 0x24
   148b8:	cmp	r3, #0
   148bc:	bne	14888 <__assert_fail@plt+0x39cc>
   148c0:	bl	10e38 <fileno@plt>
   148c4:	str	r5, [sp]
   148c8:	mov	r2, r6
   148cc:	mov	r3, r7
   148d0:	bl	10d48 <lseek64@plt>
   148d4:	mvn	r2, #0
   148d8:	mvn	r3, #0
   148dc:	cmp	r1, r3
   148e0:	cmpeq	r0, r2
   148e4:	beq	14900 <__assert_fail@plt+0x3a44>
   148e8:	ldr	r3, [r4]
   148ec:	bic	r3, r3, #16
   148f0:	str	r3, [r4]
   148f4:	strd	r0, [r4, #80]	; 0x50
   148f8:	mov	r0, #0
   148fc:	b	1489c <__assert_fail@plt+0x39e0>
   14900:	mvn	r0, #0
   14904:	b	1489c <__assert_fail@plt+0x39e0>
   14908:	push	{r4, lr}
   1490c:	mov	r0, #14
   14910:	bl	10e80 <nl_langinfo@plt>
   14914:	cmp	r0, #0
   14918:	beq	14930 <__assert_fail@plt+0x3a74>
   1491c:	ldrb	r2, [r0]
   14920:	ldr	r3, [pc, #16]	; 14938 <__assert_fail@plt+0x3a7c>
   14924:	cmp	r2, #0
   14928:	moveq	r0, r3
   1492c:	pop	{r4, pc}
   14930:	ldr	r0, [pc]	; 14938 <__assert_fail@plt+0x3a7c>
   14934:	pop	{r4, pc}
   14938:	andeq	r5, r1, r0, lsl #20
   1493c:	push	{r4, r5, r6, r7, lr}
   14940:	sub	sp, sp, #12
   14944:	mov	r7, r1
   14948:	mov	r5, r2
   1494c:	subs	r6, r0, #0
   14950:	addeq	r6, sp, #4
   14954:	mov	r0, r6
   14958:	bl	10d6c <mbrtowc@plt>
   1495c:	mov	r4, r0
   14960:	cmp	r5, #0
   14964:	cmnne	r0, #3
   14968:	bhi	14978 <__assert_fail@plt+0x3abc>
   1496c:	mov	r0, r4
   14970:	add	sp, sp, #12
   14974:	pop	{r4, r5, r6, r7, pc}
   14978:	mov	r0, #0
   1497c:	bl	149e0 <__assert_fail@plt+0x3b24>
   14980:	cmp	r0, #0
   14984:	ldrbeq	r3, [r7]
   14988:	streq	r3, [r6]
   1498c:	moveq	r4, #1
   14990:	b	1496c <__assert_fail@plt+0x3ab0>
   14994:	push	{r4, r5, r6, lr}
   14998:	mov	r6, r0
   1499c:	mov	r5, r1
   149a0:	subs	r4, r2, #0
   149a4:	beq	149d0 <__assert_fail@plt+0x3b14>
   149a8:	mov	r1, r4
   149ac:	mvn	r0, #0
   149b0:	bl	14ae8 <__assert_fail@plt+0x3c2c>
   149b4:	cmp	r0, r5
   149b8:	bcs	149d0 <__assert_fail@plt+0x3b14>
   149bc:	bl	10e08 <__errno_location@plt>
   149c0:	mov	r3, #12
   149c4:	str	r3, [r0]
   149c8:	mov	r0, #0
   149cc:	pop	{r4, r5, r6, pc}
   149d0:	mul	r1, r5, r4
   149d4:	mov	r0, r6
   149d8:	bl	14634 <__assert_fail@plt+0x3778>
   149dc:	pop	{r4, r5, r6, pc}
   149e0:	push	{lr}		; (str lr, [sp, #-4]!)
   149e4:	sub	sp, sp, #268	; 0x10c
   149e8:	ldr	r2, [pc, #68]	; 14a34 <__assert_fail@plt+0x3b78>
   149ec:	add	r1, sp, #4
   149f0:	bl	14a40 <__assert_fail@plt+0x3b84>
   149f4:	cmp	r0, #0
   149f8:	movne	r0, #0
   149fc:	bne	14a2c <__assert_fail@plt+0x3b70>
   14a00:	ldr	r1, [pc, #48]	; 14a38 <__assert_fail@plt+0x3b7c>
   14a04:	add	r0, sp, #4
   14a08:	bl	10c88 <strcmp@plt>
   14a0c:	cmp	r0, #0
   14a10:	moveq	r0, #0
   14a14:	beq	14a2c <__assert_fail@plt+0x3b70>
   14a18:	ldr	r1, [pc, #28]	; 14a3c <__assert_fail@plt+0x3b80>
   14a1c:	add	r0, sp, #4
   14a20:	bl	10c88 <strcmp@plt>
   14a24:	adds	r0, r0, #0
   14a28:	movne	r0, #1
   14a2c:	add	sp, sp, #268	; 0x10c
   14a30:	pop	{pc}		; (ldr pc, [sp], #4)
   14a34:	andeq	r0, r0, r1, lsl #2
   14a38:	andeq	r5, r1, r8, lsl #20
   14a3c:	andeq	r5, r1, ip, lsl #20
   14a40:	push	{r4, r5, r6, lr}
   14a44:	mov	r6, r1
   14a48:	mov	r4, r2
   14a4c:	mov	r1, #0
   14a50:	bl	10e68 <setlocale@plt>
   14a54:	subs	r5, r0, #0
   14a58:	beq	14a7c <__assert_fail@plt+0x3bc0>
   14a5c:	mov	r0, r5
   14a60:	bl	10df0 <strlen@plt>
   14a64:	cmp	r4, r0
   14a68:	bhi	14a94 <__assert_fail@plt+0x3bd8>
   14a6c:	cmp	r4, #0
   14a70:	bne	14aac <__assert_fail@plt+0x3bf0>
   14a74:	mov	r0, #34	; 0x22
   14a78:	pop	{r4, r5, r6, pc}
   14a7c:	cmp	r4, #0
   14a80:	beq	14ad0 <__assert_fail@plt+0x3c14>
   14a84:	mov	r3, #0
   14a88:	strb	r3, [r6]
   14a8c:	mov	r0, #22
   14a90:	pop	{r4, r5, r6, pc}
   14a94:	add	r2, r0, #1
   14a98:	mov	r1, r5
   14a9c:	mov	r0, r6
   14aa0:	bl	10cb8 <memcpy@plt>
   14aa4:	mov	r0, #0
   14aa8:	pop	{r4, r5, r6, pc}
   14aac:	sub	r4, r4, #1
   14ab0:	mov	r2, r4
   14ab4:	mov	r1, r5
   14ab8:	mov	r0, r6
   14abc:	bl	10cb8 <memcpy@plt>
   14ac0:	mov	r3, #0
   14ac4:	strb	r3, [r6, r4]
   14ac8:	mov	r0, #34	; 0x22
   14acc:	pop	{r4, r5, r6, pc}
   14ad0:	mov	r0, #22
   14ad4:	pop	{r4, r5, r6, pc}
   14ad8:	push	{r4, lr}
   14adc:	mov	r1, #0
   14ae0:	bl	10e68 <setlocale@plt>
   14ae4:	pop	{r4, pc}
   14ae8:	subs	r2, r1, #1
   14aec:	bxeq	lr
   14af0:	bcc	14cc8 <__assert_fail@plt+0x3e0c>
   14af4:	cmp	r0, r1
   14af8:	bls	14cac <__assert_fail@plt+0x3df0>
   14afc:	tst	r1, r2
   14b00:	beq	14cb8 <__assert_fail@plt+0x3dfc>
   14b04:	clz	r3, r0
   14b08:	clz	r2, r1
   14b0c:	sub	r3, r2, r3
   14b10:	rsbs	r3, r3, #31
   14b14:	addne	r3, r3, r3, lsl #1
   14b18:	mov	r2, #0
   14b1c:	addne	pc, pc, r3, lsl #2
   14b20:	nop			; (mov r0, r0)
   14b24:	cmp	r0, r1, lsl #31
   14b28:	adc	r2, r2, r2
   14b2c:	subcs	r0, r0, r1, lsl #31
   14b30:	cmp	r0, r1, lsl #30
   14b34:	adc	r2, r2, r2
   14b38:	subcs	r0, r0, r1, lsl #30
   14b3c:	cmp	r0, r1, lsl #29
   14b40:	adc	r2, r2, r2
   14b44:	subcs	r0, r0, r1, lsl #29
   14b48:	cmp	r0, r1, lsl #28
   14b4c:	adc	r2, r2, r2
   14b50:	subcs	r0, r0, r1, lsl #28
   14b54:	cmp	r0, r1, lsl #27
   14b58:	adc	r2, r2, r2
   14b5c:	subcs	r0, r0, r1, lsl #27
   14b60:	cmp	r0, r1, lsl #26
   14b64:	adc	r2, r2, r2
   14b68:	subcs	r0, r0, r1, lsl #26
   14b6c:	cmp	r0, r1, lsl #25
   14b70:	adc	r2, r2, r2
   14b74:	subcs	r0, r0, r1, lsl #25
   14b78:	cmp	r0, r1, lsl #24
   14b7c:	adc	r2, r2, r2
   14b80:	subcs	r0, r0, r1, lsl #24
   14b84:	cmp	r0, r1, lsl #23
   14b88:	adc	r2, r2, r2
   14b8c:	subcs	r0, r0, r1, lsl #23
   14b90:	cmp	r0, r1, lsl #22
   14b94:	adc	r2, r2, r2
   14b98:	subcs	r0, r0, r1, lsl #22
   14b9c:	cmp	r0, r1, lsl #21
   14ba0:	adc	r2, r2, r2
   14ba4:	subcs	r0, r0, r1, lsl #21
   14ba8:	cmp	r0, r1, lsl #20
   14bac:	adc	r2, r2, r2
   14bb0:	subcs	r0, r0, r1, lsl #20
   14bb4:	cmp	r0, r1, lsl #19
   14bb8:	adc	r2, r2, r2
   14bbc:	subcs	r0, r0, r1, lsl #19
   14bc0:	cmp	r0, r1, lsl #18
   14bc4:	adc	r2, r2, r2
   14bc8:	subcs	r0, r0, r1, lsl #18
   14bcc:	cmp	r0, r1, lsl #17
   14bd0:	adc	r2, r2, r2
   14bd4:	subcs	r0, r0, r1, lsl #17
   14bd8:	cmp	r0, r1, lsl #16
   14bdc:	adc	r2, r2, r2
   14be0:	subcs	r0, r0, r1, lsl #16
   14be4:	cmp	r0, r1, lsl #15
   14be8:	adc	r2, r2, r2
   14bec:	subcs	r0, r0, r1, lsl #15
   14bf0:	cmp	r0, r1, lsl #14
   14bf4:	adc	r2, r2, r2
   14bf8:	subcs	r0, r0, r1, lsl #14
   14bfc:	cmp	r0, r1, lsl #13
   14c00:	adc	r2, r2, r2
   14c04:	subcs	r0, r0, r1, lsl #13
   14c08:	cmp	r0, r1, lsl #12
   14c0c:	adc	r2, r2, r2
   14c10:	subcs	r0, r0, r1, lsl #12
   14c14:	cmp	r0, r1, lsl #11
   14c18:	adc	r2, r2, r2
   14c1c:	subcs	r0, r0, r1, lsl #11
   14c20:	cmp	r0, r1, lsl #10
   14c24:	adc	r2, r2, r2
   14c28:	subcs	r0, r0, r1, lsl #10
   14c2c:	cmp	r0, r1, lsl #9
   14c30:	adc	r2, r2, r2
   14c34:	subcs	r0, r0, r1, lsl #9
   14c38:	cmp	r0, r1, lsl #8
   14c3c:	adc	r2, r2, r2
   14c40:	subcs	r0, r0, r1, lsl #8
   14c44:	cmp	r0, r1, lsl #7
   14c48:	adc	r2, r2, r2
   14c4c:	subcs	r0, r0, r1, lsl #7
   14c50:	cmp	r0, r1, lsl #6
   14c54:	adc	r2, r2, r2
   14c58:	subcs	r0, r0, r1, lsl #6
   14c5c:	cmp	r0, r1, lsl #5
   14c60:	adc	r2, r2, r2
   14c64:	subcs	r0, r0, r1, lsl #5
   14c68:	cmp	r0, r1, lsl #4
   14c6c:	adc	r2, r2, r2
   14c70:	subcs	r0, r0, r1, lsl #4
   14c74:	cmp	r0, r1, lsl #3
   14c78:	adc	r2, r2, r2
   14c7c:	subcs	r0, r0, r1, lsl #3
   14c80:	cmp	r0, r1, lsl #2
   14c84:	adc	r2, r2, r2
   14c88:	subcs	r0, r0, r1, lsl #2
   14c8c:	cmp	r0, r1, lsl #1
   14c90:	adc	r2, r2, r2
   14c94:	subcs	r0, r0, r1, lsl #1
   14c98:	cmp	r0, r1
   14c9c:	adc	r2, r2, r2
   14ca0:	subcs	r0, r0, r1
   14ca4:	mov	r0, r2
   14ca8:	bx	lr
   14cac:	moveq	r0, #1
   14cb0:	movne	r0, #0
   14cb4:	bx	lr
   14cb8:	clz	r2, r1
   14cbc:	rsb	r2, r2, #31
   14cc0:	lsr	r0, r0, r2
   14cc4:	bx	lr
   14cc8:	cmp	r0, #0
   14ccc:	mvnne	r0, #0
   14cd0:	b	14f70 <__assert_fail@plt+0x40b4>
   14cd4:	cmp	r1, #0
   14cd8:	beq	14cc8 <__assert_fail@plt+0x3e0c>
   14cdc:	push	{r0, r1, lr}
   14ce0:	bl	14ae8 <__assert_fail@plt+0x3c2c>
   14ce4:	pop	{r1, r2, lr}
   14ce8:	mul	r3, r2, r0
   14cec:	sub	r1, r1, r3
   14cf0:	bx	lr
   14cf4:	cmp	r1, #0
   14cf8:	beq	14f04 <__assert_fail@plt+0x4048>
   14cfc:	eor	ip, r0, r1
   14d00:	rsbmi	r1, r1, #0
   14d04:	subs	r2, r1, #1
   14d08:	beq	14ed0 <__assert_fail@plt+0x4014>
   14d0c:	movs	r3, r0
   14d10:	rsbmi	r3, r0, #0
   14d14:	cmp	r3, r1
   14d18:	bls	14edc <__assert_fail@plt+0x4020>
   14d1c:	tst	r1, r2
   14d20:	beq	14eec <__assert_fail@plt+0x4030>
   14d24:	clz	r2, r3
   14d28:	clz	r0, r1
   14d2c:	sub	r2, r0, r2
   14d30:	rsbs	r2, r2, #31
   14d34:	addne	r2, r2, r2, lsl #1
   14d38:	mov	r0, #0
   14d3c:	addne	pc, pc, r2, lsl #2
   14d40:	nop			; (mov r0, r0)
   14d44:	cmp	r3, r1, lsl #31
   14d48:	adc	r0, r0, r0
   14d4c:	subcs	r3, r3, r1, lsl #31
   14d50:	cmp	r3, r1, lsl #30
   14d54:	adc	r0, r0, r0
   14d58:	subcs	r3, r3, r1, lsl #30
   14d5c:	cmp	r3, r1, lsl #29
   14d60:	adc	r0, r0, r0
   14d64:	subcs	r3, r3, r1, lsl #29
   14d68:	cmp	r3, r1, lsl #28
   14d6c:	adc	r0, r0, r0
   14d70:	subcs	r3, r3, r1, lsl #28
   14d74:	cmp	r3, r1, lsl #27
   14d78:	adc	r0, r0, r0
   14d7c:	subcs	r3, r3, r1, lsl #27
   14d80:	cmp	r3, r1, lsl #26
   14d84:	adc	r0, r0, r0
   14d88:	subcs	r3, r3, r1, lsl #26
   14d8c:	cmp	r3, r1, lsl #25
   14d90:	adc	r0, r0, r0
   14d94:	subcs	r3, r3, r1, lsl #25
   14d98:	cmp	r3, r1, lsl #24
   14d9c:	adc	r0, r0, r0
   14da0:	subcs	r3, r3, r1, lsl #24
   14da4:	cmp	r3, r1, lsl #23
   14da8:	adc	r0, r0, r0
   14dac:	subcs	r3, r3, r1, lsl #23
   14db0:	cmp	r3, r1, lsl #22
   14db4:	adc	r0, r0, r0
   14db8:	subcs	r3, r3, r1, lsl #22
   14dbc:	cmp	r3, r1, lsl #21
   14dc0:	adc	r0, r0, r0
   14dc4:	subcs	r3, r3, r1, lsl #21
   14dc8:	cmp	r3, r1, lsl #20
   14dcc:	adc	r0, r0, r0
   14dd0:	subcs	r3, r3, r1, lsl #20
   14dd4:	cmp	r3, r1, lsl #19
   14dd8:	adc	r0, r0, r0
   14ddc:	subcs	r3, r3, r1, lsl #19
   14de0:	cmp	r3, r1, lsl #18
   14de4:	adc	r0, r0, r0
   14de8:	subcs	r3, r3, r1, lsl #18
   14dec:	cmp	r3, r1, lsl #17
   14df0:	adc	r0, r0, r0
   14df4:	subcs	r3, r3, r1, lsl #17
   14df8:	cmp	r3, r1, lsl #16
   14dfc:	adc	r0, r0, r0
   14e00:	subcs	r3, r3, r1, lsl #16
   14e04:	cmp	r3, r1, lsl #15
   14e08:	adc	r0, r0, r0
   14e0c:	subcs	r3, r3, r1, lsl #15
   14e10:	cmp	r3, r1, lsl #14
   14e14:	adc	r0, r0, r0
   14e18:	subcs	r3, r3, r1, lsl #14
   14e1c:	cmp	r3, r1, lsl #13
   14e20:	adc	r0, r0, r0
   14e24:	subcs	r3, r3, r1, lsl #13
   14e28:	cmp	r3, r1, lsl #12
   14e2c:	adc	r0, r0, r0
   14e30:	subcs	r3, r3, r1, lsl #12
   14e34:	cmp	r3, r1, lsl #11
   14e38:	adc	r0, r0, r0
   14e3c:	subcs	r3, r3, r1, lsl #11
   14e40:	cmp	r3, r1, lsl #10
   14e44:	adc	r0, r0, r0
   14e48:	subcs	r3, r3, r1, lsl #10
   14e4c:	cmp	r3, r1, lsl #9
   14e50:	adc	r0, r0, r0
   14e54:	subcs	r3, r3, r1, lsl #9
   14e58:	cmp	r3, r1, lsl #8
   14e5c:	adc	r0, r0, r0
   14e60:	subcs	r3, r3, r1, lsl #8
   14e64:	cmp	r3, r1, lsl #7
   14e68:	adc	r0, r0, r0
   14e6c:	subcs	r3, r3, r1, lsl #7
   14e70:	cmp	r3, r1, lsl #6
   14e74:	adc	r0, r0, r0
   14e78:	subcs	r3, r3, r1, lsl #6
   14e7c:	cmp	r3, r1, lsl #5
   14e80:	adc	r0, r0, r0
   14e84:	subcs	r3, r3, r1, lsl #5
   14e88:	cmp	r3, r1, lsl #4
   14e8c:	adc	r0, r0, r0
   14e90:	subcs	r3, r3, r1, lsl #4
   14e94:	cmp	r3, r1, lsl #3
   14e98:	adc	r0, r0, r0
   14e9c:	subcs	r3, r3, r1, lsl #3
   14ea0:	cmp	r3, r1, lsl #2
   14ea4:	adc	r0, r0, r0
   14ea8:	subcs	r3, r3, r1, lsl #2
   14eac:	cmp	r3, r1, lsl #1
   14eb0:	adc	r0, r0, r0
   14eb4:	subcs	r3, r3, r1, lsl #1
   14eb8:	cmp	r3, r1
   14ebc:	adc	r0, r0, r0
   14ec0:	subcs	r3, r3, r1
   14ec4:	cmp	ip, #0
   14ec8:	rsbmi	r0, r0, #0
   14ecc:	bx	lr
   14ed0:	teq	ip, r0
   14ed4:	rsbmi	r0, r0, #0
   14ed8:	bx	lr
   14edc:	movcc	r0, #0
   14ee0:	asreq	r0, ip, #31
   14ee4:	orreq	r0, r0, #1
   14ee8:	bx	lr
   14eec:	clz	r2, r1
   14ef0:	rsb	r2, r2, #31
   14ef4:	cmp	ip, #0
   14ef8:	lsr	r0, r3, r2
   14efc:	rsbmi	r0, r0, #0
   14f00:	bx	lr
   14f04:	cmp	r0, #0
   14f08:	mvngt	r0, #-2147483648	; 0x80000000
   14f0c:	movlt	r0, #-2147483648	; 0x80000000
   14f10:	b	14f70 <__assert_fail@plt+0x40b4>
   14f14:	cmp	r1, #0
   14f18:	beq	14f04 <__assert_fail@plt+0x4048>
   14f1c:	push	{r0, r1, lr}
   14f20:	bl	14cfc <__assert_fail@plt+0x3e40>
   14f24:	pop	{r1, r2, lr}
   14f28:	mul	r3, r2, r0
   14f2c:	sub	r1, r1, r3
   14f30:	bx	lr
   14f34:	cmp	r3, #0
   14f38:	cmpeq	r2, #0
   14f3c:	bne	14f54 <__assert_fail@plt+0x4098>
   14f40:	cmp	r1, #0
   14f44:	cmpeq	r0, #0
   14f48:	mvnne	r1, #0
   14f4c:	mvnne	r0, #0
   14f50:	b	14f70 <__assert_fail@plt+0x40b4>
   14f54:	sub	sp, sp, #8
   14f58:	push	{sp, lr}
   14f5c:	bl	14f80 <__assert_fail@plt+0x40c4>
   14f60:	ldr	lr, [sp, #4]
   14f64:	add	sp, sp, #8
   14f68:	pop	{r2, r3}
   14f6c:	bx	lr
   14f70:	push	{r1, lr}
   14f74:	mov	r0, #8
   14f78:	bl	10c7c <raise@plt>
   14f7c:	pop	{r1, pc}
   14f80:	cmp	r1, r3
   14f84:	push	{r4, r5, r6, r7, r8, r9, lr}
   14f88:	cmpeq	r0, r2
   14f8c:	mov	r4, r0
   14f90:	mov	r5, r1
   14f94:	ldr	r9, [sp, #28]
   14f98:	movcc	r0, #0
   14f9c:	movcc	r1, #0
   14fa0:	bcc	15098 <__assert_fail@plt+0x41dc>
   14fa4:	cmp	r3, #0
   14fa8:	clzeq	ip, r2
   14fac:	clzne	ip, r3
   14fb0:	addeq	ip, ip, #32
   14fb4:	cmp	r5, #0
   14fb8:	clzeq	r1, r4
   14fbc:	addeq	r1, r1, #32
   14fc0:	clzne	r1, r5
   14fc4:	sub	ip, ip, r1
   14fc8:	sub	lr, ip, #32
   14fcc:	lsl	r7, r3, ip
   14fd0:	rsb	r8, ip, #32
   14fd4:	orr	r7, r7, r2, lsl lr
   14fd8:	orr	r7, r7, r2, lsr r8
   14fdc:	lsl	r6, r2, ip
   14fe0:	cmp	r5, r7
   14fe4:	cmpeq	r4, r6
   14fe8:	movcc	r0, #0
   14fec:	movcc	r1, #0
   14ff0:	bcc	1500c <__assert_fail@plt+0x4150>
   14ff4:	mov	r3, #1
   14ff8:	subs	r4, r4, r6
   14ffc:	lsl	r1, r3, lr
   15000:	lsl	r0, r3, ip
   15004:	orr	r1, r1, r3, lsr r8
   15008:	sbc	r5, r5, r7
   1500c:	cmp	ip, #0
   15010:	beq	15098 <__assert_fail@plt+0x41dc>
   15014:	lsrs	r3, r7, #1
   15018:	rrx	r2, r6
   1501c:	mov	r6, ip
   15020:	b	15044 <__assert_fail@plt+0x4188>
   15024:	subs	r4, r4, r2
   15028:	sbc	r5, r5, r3
   1502c:	adds	r4, r4, r4
   15030:	adc	r5, r5, r5
   15034:	adds	r4, r4, #1
   15038:	adc	r5, r5, #0
   1503c:	subs	r6, r6, #1
   15040:	beq	15060 <__assert_fail@plt+0x41a4>
   15044:	cmp	r5, r3
   15048:	cmpeq	r4, r2
   1504c:	bcs	15024 <__assert_fail@plt+0x4168>
   15050:	adds	r4, r4, r4
   15054:	adc	r5, r5, r5
   15058:	subs	r6, r6, #1
   1505c:	bne	15044 <__assert_fail@plt+0x4188>
   15060:	lsr	r6, r4, ip
   15064:	lsr	r7, r5, ip
   15068:	orr	r6, r6, r5, lsl r8
   1506c:	adds	r2, r0, r4
   15070:	orr	r6, r6, r5, lsr lr
   15074:	adc	r3, r1, r5
   15078:	lsl	r1, r7, ip
   1507c:	orr	r1, r1, r6, lsl lr
   15080:	lsl	r0, r6, ip
   15084:	orr	r1, r1, r6, lsr r8
   15088:	subs	r0, r2, r0
   1508c:	mov	r4, r6
   15090:	mov	r5, r7
   15094:	sbc	r1, r3, r1
   15098:	cmp	r9, #0
   1509c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   150a0:	strd	r4, [r9]
   150a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   150a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   150ac:	mov	r7, r0
   150b0:	ldr	r6, [pc, #72]	; 15100 <__assert_fail@plt+0x4244>
   150b4:	ldr	r5, [pc, #72]	; 15104 <__assert_fail@plt+0x4248>
   150b8:	add	r6, pc, r6
   150bc:	add	r5, pc, r5
   150c0:	sub	r6, r6, r5
   150c4:	mov	r8, r1
   150c8:	mov	r9, r2
   150cc:	bl	10c44 <calloc@plt-0x20>
   150d0:	asrs	r6, r6, #2
   150d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   150d8:	mov	r4, #0
   150dc:	add	r4, r4, #1
   150e0:	ldr	r3, [r5], #4
   150e4:	mov	r2, r9
   150e8:	mov	r1, r8
   150ec:	mov	r0, r7
   150f0:	blx	r3
   150f4:	cmp	r6, r4
   150f8:	bne	150dc <__assert_fail@plt+0x4220>
   150fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15100:	andeq	r0, r1, r0, asr lr
   15104:	andeq	r0, r1, r8, asr #28
   15108:	bx	lr
   1510c:	ldr	r3, [pc, #12]	; 15120 <__assert_fail@plt+0x4264>
   15110:	mov	r1, #0
   15114:	add	r3, pc, r3
   15118:	ldr	r2, [r3]
   1511c:	b	10e14 <__cxa_atexit@plt>
   15120:	andeq	r0, r1, r4, asr #31

Disassembly of section .fini:

00015124 <.fini>:
   15124:	push	{r3, lr}
   15128:	pop	{r3, pc}
