
../repos/coreutils/src/chcon:     file format elf32-littlearm


Disassembly of section .init:

00011464 <.init>:
   11464:	push	{r3, lr}
   11468:	bl	1189c <__assert_fail@plt+0x4c>
   1146c:	pop	{r3, pc}

Disassembly of section .plt:

00011470 <fstatfs64@plt-0x14>:
   11470:	push	{lr}		; (str lr, [sp, #-4]!)
   11474:	ldr	lr, [pc, #4]	; 11480 <fstatfs64@plt-0x4>
   11478:	add	lr, pc, lr
   1147c:	ldr	pc, [lr, #8]!
   11480:	andeq	fp, r1, r0, lsl #23

00011484 <fstatfs64@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #110592	; 0x1b000
   1148c:	ldr	pc, [ip, #2944]!	; 0xb80

00011490 <calloc@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #110592	; 0x1b000
   11498:	ldr	pc, [ip, #2936]!	; 0xb78

0001149c <fputs_unlocked@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #110592	; 0x1b000
   114a4:	ldr	pc, [ip, #2928]!	; 0xb70

000114a8 <raise@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #110592	; 0x1b000
   114b0:	ldr	pc, [ip, #2920]!	; 0xb68

000114b4 <is_selinux_enabled@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #110592	; 0x1b000
   114bc:	ldr	pc, [ip, #2912]!	; 0xb60

000114c0 <strcmp@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #110592	; 0x1b000
   114c8:	ldr	pc, [ip, #2904]!	; 0xb58

000114cc <fflush@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #110592	; 0x1b000
   114d4:	ldr	pc, [ip, #2896]!	; 0xb50

000114d8 <lsetfilecon@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #110592	; 0x1b000
   114e0:	ldr	pc, [ip, #2888]!	; 0xb48

000114e4 <memmove@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #110592	; 0x1b000
   114ec:	ldr	pc, [ip, #2880]!	; 0xb40

000114f0 <free@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #110592	; 0x1b000
   114f8:	ldr	pc, [ip, #2872]!	; 0xb38

000114fc <_exit@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #110592	; 0x1b000
   11504:	ldr	pc, [ip, #2864]!	; 0xb30

00011508 <memcpy@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #110592	; 0x1b000
   11510:	ldr	pc, [ip, #2856]!	; 0xb28

00011514 <mbsinit@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #110592	; 0x1b000
   1151c:	ldr	pc, [ip, #2848]!	; 0xb20

00011520 <context_new@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #110592	; 0x1b000
   11528:	ldr	pc, [ip, #2840]!	; 0xb18

0001152c <context_role_set@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #110592	; 0x1b000
   11534:	ldr	pc, [ip, #2832]!	; 0xb10

00011538 <dcgettext@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #110592	; 0x1b000
   11540:	ldr	pc, [ip, #2824]!	; 0xb08

00011544 <context_type_set@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #110592	; 0x1b000
   1154c:	ldr	pc, [ip, #2816]!	; 0xb00

00011550 <realloc@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #110592	; 0x1b000
   11558:	ldr	pc, [ip, #2808]!	; 0xaf8

0001155c <fgetfilecon@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #110592	; 0x1b000
   11564:	ldr	pc, [ip, #2800]!	; 0xaf0

00011568 <textdomain@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #110592	; 0x1b000
   11570:	ldr	pc, [ip, #2792]!	; 0xae8

00011574 <chdir@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #110592	; 0x1b000
   1157c:	ldr	pc, [ip, #2784]!	; 0xae0

00011580 <__fxstatat64@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #110592	; 0x1b000
   11588:	ldr	pc, [ip, #2776]!	; 0xad8

0001158c <iswprint@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #110592	; 0x1b000
   11594:	ldr	pc, [ip, #2768]!	; 0xad0

00011598 <__fxstat64@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #110592	; 0x1b000
   115a0:	ldr	pc, [ip, #2760]!	; 0xac8

000115a4 <fwrite@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #110592	; 0x1b000
   115ac:	ldr	pc, [ip, #2752]!	; 0xac0

000115b0 <lseek64@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #110592	; 0x1b000
   115b8:	ldr	pc, [ip, #2744]!	; 0xab8

000115bc <__ctype_get_mb_cur_max@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #110592	; 0x1b000
   115c4:	ldr	pc, [ip, #2736]!	; 0xab0

000115c8 <strcpy@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #110592	; 0x1b000
   115d0:	ldr	pc, [ip, #2728]!	; 0xaa8

000115d4 <__fpending@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #110592	; 0x1b000
   115dc:	ldr	pc, [ip, #2720]!	; 0xaa0

000115e0 <mbrtowc@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #110592	; 0x1b000
   115e8:	ldr	pc, [ip, #2712]!	; 0xa98

000115ec <error@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #110592	; 0x1b000
   115f4:	ldr	pc, [ip, #2704]!	; 0xa90

000115f8 <security_check_context@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #110592	; 0x1b000
   11600:	ldr	pc, [ip, #2696]!	; 0xa88

00011604 <open64@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #110592	; 0x1b000
   1160c:	ldr	pc, [ip, #2688]!	; 0xa80

00011610 <lgetfilecon@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #110592	; 0x1b000
   11618:	ldr	pc, [ip, #2680]!	; 0xa78

0001161c <malloc@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #110592	; 0x1b000
   11624:	ldr	pc, [ip, #2672]!	; 0xa70

00011628 <__libc_start_main@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #110592	; 0x1b000
   11630:	ldr	pc, [ip, #2664]!	; 0xa68

00011634 <__freading@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #110592	; 0x1b000
   1163c:	ldr	pc, [ip, #2656]!	; 0xa60

00011640 <__gmon_start__@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #110592	; 0x1b000
   11648:	ldr	pc, [ip, #2648]!	; 0xa58

0001164c <context_free@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #110592	; 0x1b000
   11654:	ldr	pc, [ip, #2640]!	; 0xa50

00011658 <getopt_long@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #110592	; 0x1b000
   11660:	ldr	pc, [ip, #2632]!	; 0xa48

00011664 <__ctype_b_loc@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #110592	; 0x1b000
   1166c:	ldr	pc, [ip, #2624]!	; 0xa40

00011670 <getcwd@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #110592	; 0x1b000
   11678:	ldr	pc, [ip, #2616]!	; 0xa38

0001167c <exit@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #110592	; 0x1b000
   11684:	ldr	pc, [ip, #2608]!	; 0xa30

00011688 <context_user_set@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #110592	; 0x1b000
   11690:	ldr	pc, [ip, #2600]!	; 0xa28

00011694 <getfilecon@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #110592	; 0x1b000
   1169c:	ldr	pc, [ip, #2592]!	; 0xa20

000116a0 <bcmp@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #110592	; 0x1b000
   116a8:	ldr	pc, [ip, #2584]!	; 0xa18

000116ac <strlen@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #110592	; 0x1b000
   116b4:	ldr	pc, [ip, #2576]!	; 0xa10

000116b8 <openat64@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #110592	; 0x1b000
   116c0:	ldr	pc, [ip, #2568]!	; 0xa08

000116c4 <memrchr@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #110592	; 0x1b000
   116cc:	ldr	pc, [ip, #2560]!	; 0xa00

000116d0 <__errno_location@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #110592	; 0x1b000
   116d8:	ldr	pc, [ip, #2552]!	; 0x9f8

000116dc <__sprintf_chk@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #110592	; 0x1b000
   116e4:	ldr	pc, [ip, #2544]!	; 0x9f0

000116e8 <__cxa_atexit@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #110592	; 0x1b000
   116f0:	ldr	pc, [ip, #2536]!	; 0x9e8

000116f4 <memset@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #110592	; 0x1b000
   116fc:	ldr	pc, [ip, #2528]!	; 0x9e0

00011700 <__printf_chk@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #110592	; 0x1b000
   11708:	ldr	pc, [ip, #2520]!	; 0x9d8

0001170c <fileno@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #110592	; 0x1b000
   11714:	ldr	pc, [ip, #2512]!	; 0x9d0

00011718 <__fprintf_chk@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #110592	; 0x1b000
   11720:	ldr	pc, [ip, #2504]!	; 0x9c8

00011724 <memchr@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #110592	; 0x1b000
   1172c:	ldr	pc, [ip, #2496]!	; 0x9c0

00011730 <setfilecon@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #110592	; 0x1b000
   11738:	ldr	pc, [ip, #2488]!	; 0x9b8

0001173c <access@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #110592	; 0x1b000
   11744:	ldr	pc, [ip, #2480]!	; 0x9b0

00011748 <fclose@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #110592	; 0x1b000
   11750:	ldr	pc, [ip, #2472]!	; 0x9a8

00011754 <fseeko64@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #110592	; 0x1b000
   1175c:	ldr	pc, [ip, #2464]!	; 0x9a0

00011760 <fcntl64@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #110592	; 0x1b000
   11768:	ldr	pc, [ip, #2456]!	; 0x998

0001176c <setlocale@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #110592	; 0x1b000
   11774:	ldr	pc, [ip, #2448]!	; 0x990

00011778 <strrchr@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #110592	; 0x1b000
   11780:	ldr	pc, [ip, #2440]!	; 0x988

00011784 <nl_langinfo@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #110592	; 0x1b000
   1178c:	ldr	pc, [ip, #2432]!	; 0x980

00011790 <readdir64@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #110592	; 0x1b000
   11798:	ldr	pc, [ip, #2424]!	; 0x978

0001179c <fdopendir@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #110592	; 0x1b000
   117a4:	ldr	pc, [ip, #2416]!	; 0x970

000117a8 <dirfd@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #110592	; 0x1b000
   117b0:	ldr	pc, [ip, #2408]!	; 0x968

000117b4 <fchdir@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #110592	; 0x1b000
   117bc:	ldr	pc, [ip, #2400]!	; 0x960

000117c0 <qsort@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #110592	; 0x1b000
   117c8:	ldr	pc, [ip, #2392]!	; 0x958

000117cc <freecon@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #110592	; 0x1b000
   117d4:	ldr	pc, [ip, #2384]!	; 0x950

000117d8 <bindtextdomain@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #110592	; 0x1b000
   117e0:	ldr	pc, [ip, #2376]!	; 0x948

000117e4 <context_range_set@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #110592	; 0x1b000
   117ec:	ldr	pc, [ip, #2368]!	; 0x940

000117f0 <context_str@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #110592	; 0x1b000
   117f8:	ldr	pc, [ip, #2360]!	; 0x938

000117fc <__xstat64@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #110592	; 0x1b000
   11804:	ldr	pc, [ip, #2352]!	; 0x930

00011808 <strncmp@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #110592	; 0x1b000
   11810:	ldr	pc, [ip, #2344]!	; 0x928

00011814 <abort@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #110592	; 0x1b000
   1181c:	ldr	pc, [ip, #2336]!	; 0x920

00011820 <close@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #110592	; 0x1b000
   11828:	ldr	pc, [ip, #2328]!	; 0x918

0001182c <__lxstat64@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #110592	; 0x1b000
   11834:	ldr	pc, [ip, #2320]!	; 0x910

00011838 <closedir@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #110592	; 0x1b000
   11840:	ldr	pc, [ip, #2312]!	; 0x908

00011844 <strspn@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #110592	; 0x1b000
   1184c:	ldr	pc, [ip, #2304]!	; 0x900

00011850 <__assert_fail@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #110592	; 0x1b000
   11858:	ldr	pc, [ip, #2296]!	; 0x8f8

Disassembly of section .text:

00011860 <.text>:
   11860:	mov	fp, #0
   11864:	mov	lr, #0
   11868:	pop	{r1}		; (ldr r1, [sp], #4)
   1186c:	mov	r2, sp
   11870:	push	{r2}		; (str r2, [sp, #-4]!)
   11874:	push	{r0}		; (str r0, [sp, #-4]!)
   11878:	ldr	ip, [pc, #16]	; 11890 <__assert_fail@plt+0x40>
   1187c:	push	{ip}		; (str ip, [sp, #-4]!)
   11880:	ldr	r0, [pc, #12]	; 11894 <__assert_fail@plt+0x44>
   11884:	ldr	r3, [pc, #12]	; 11898 <__assert_fail@plt+0x48>
   11888:	bl	11628 <__libc_start_main@plt>
   1188c:	bl	11814 <abort@plt>
   11890:	andeq	fp, r1, ip, asr #6
   11894:	andeq	r1, r1, ip, ror ip
   11898:	andeq	fp, r1, ip, ror #5
   1189c:	ldr	r3, [pc, #20]	; 118b8 <__assert_fail@plt+0x68>
   118a0:	ldr	r2, [pc, #20]	; 118bc <__assert_fail@plt+0x6c>
   118a4:	add	r3, pc, r3
   118a8:	ldr	r2, [r3, r2]
   118ac:	cmp	r2, #0
   118b0:	bxeq	lr
   118b4:	b	11640 <__gmon_start__@plt>
   118b8:	andeq	fp, r1, r4, asr r7
   118bc:	andeq	r0, r0, r4, asr r1
   118c0:	ldr	r0, [pc, #24]	; 118e0 <__assert_fail@plt+0x90>
   118c4:	ldr	r3, [pc, #24]	; 118e4 <__assert_fail@plt+0x94>
   118c8:	cmp	r3, r0
   118cc:	bxeq	lr
   118d0:	ldr	r3, [pc, #16]	; 118e8 <__assert_fail@plt+0x98>
   118d4:	cmp	r3, #0
   118d8:	bxeq	lr
   118dc:	bx	r3
   118e0:	andeq	sp, r2, r8, lsr #3
   118e4:	andeq	sp, r2, r8, lsr #3
   118e8:	andeq	r0, r0, r0
   118ec:	ldr	r0, [pc, #36]	; 11918 <__assert_fail@plt+0xc8>
   118f0:	ldr	r1, [pc, #36]	; 1191c <__assert_fail@plt+0xcc>
   118f4:	sub	r1, r1, r0
   118f8:	asr	r1, r1, #2
   118fc:	add	r1, r1, r1, lsr #31
   11900:	asrs	r1, r1, #1
   11904:	bxeq	lr
   11908:	ldr	r3, [pc, #16]	; 11920 <__assert_fail@plt+0xd0>
   1190c:	cmp	r3, #0
   11910:	bxeq	lr
   11914:	bx	r3
   11918:	andeq	sp, r2, r8, lsr #3
   1191c:	andeq	sp, r2, r8, lsr #3
   11920:	andeq	r0, r0, r0
   11924:	push	{r4, lr}
   11928:	ldr	r4, [pc, #24]	; 11948 <__assert_fail@plt+0xf8>
   1192c:	ldrb	r3, [r4]
   11930:	cmp	r3, #0
   11934:	popne	{r4, pc}
   11938:	bl	118c0 <__assert_fail@plt+0x70>
   1193c:	mov	r3, #1
   11940:	strb	r3, [r4]
   11944:	pop	{r4, pc}
   11948:	andeq	sp, r2, r4, asr #3
   1194c:	b	118ec <__assert_fail@plt+0x9c>
   11950:	push	{fp, lr}
   11954:	mov	fp, sp
   11958:	sub	sp, sp, #64	; 0x40
   1195c:	mov	r4, r0
   11960:	cmp	r0, #0
   11964:	bne	11c38 <__assert_fail@plt+0x3e8>
   11968:	movw	r1, #45979	; 0xb39b
   1196c:	mov	r0, #0
   11970:	mov	r2, #5
   11974:	movt	r1, #1
   11978:	bl	11538 <dcgettext@plt>
   1197c:	mov	r1, r0
   11980:	movw	r0, #53760	; 0xd200
   11984:	movt	r0, #2
   11988:	ldr	r2, [r0]
   1198c:	mov	r0, #1
   11990:	mov	r3, r2
   11994:	str	r2, [sp]
   11998:	bl	11700 <__printf_chk@plt>
   1199c:	movw	r1, #46137	; 0xb439
   119a0:	mov	r0, #0
   119a4:	mov	r2, #5
   119a8:	movt	r1, #1
   119ac:	bl	11538 <dcgettext@plt>
   119b0:	movw	r7, #53692	; 0xd1bc
   119b4:	movt	r7, #2
   119b8:	ldr	r1, [r7]
   119bc:	bl	1149c <fputs_unlocked@plt>
   119c0:	movw	r1, #48064	; 0xbbc0
   119c4:	mov	r0, #0
   119c8:	mov	r2, #5
   119cc:	movt	r1, #1
   119d0:	bl	11538 <dcgettext@plt>
   119d4:	ldr	r1, [r7]
   119d8:	bl	1149c <fputs_unlocked@plt>
   119dc:	movw	r1, #46276	; 0xb4c4
   119e0:	mov	r0, #0
   119e4:	mov	r2, #5
   119e8:	movt	r1, #1
   119ec:	bl	11538 <dcgettext@plt>
   119f0:	ldr	r1, [r7]
   119f4:	bl	1149c <fputs_unlocked@plt>
   119f8:	movw	r1, #46507	; 0xb5ab
   119fc:	mov	r0, #0
   11a00:	mov	r2, #5
   11a04:	movt	r1, #1
   11a08:	bl	11538 <dcgettext@plt>
   11a0c:	ldr	r1, [r7]
   11a10:	bl	1149c <fputs_unlocked@plt>
   11a14:	movw	r1, #46790	; 0xb6c6
   11a18:	mov	r0, #0
   11a1c:	mov	r2, #5
   11a20:	movt	r1, #1
   11a24:	bl	11538 <dcgettext@plt>
   11a28:	ldr	r1, [r7]
   11a2c:	bl	1149c <fputs_unlocked@plt>
   11a30:	movw	r1, #46918	; 0xb746
   11a34:	mov	r0, #0
   11a38:	mov	r2, #5
   11a3c:	movt	r1, #1
   11a40:	bl	11538 <dcgettext@plt>
   11a44:	ldr	r1, [r7]
   11a48:	bl	1149c <fputs_unlocked@plt>
   11a4c:	movw	r1, #47037	; 0xb7bd
   11a50:	mov	r0, #0
   11a54:	mov	r2, #5
   11a58:	movt	r1, #1
   11a5c:	bl	11538 <dcgettext@plt>
   11a60:	ldr	r1, [r7]
   11a64:	bl	1149c <fputs_unlocked@plt>
   11a68:	movw	r1, #47108	; 0xb804
   11a6c:	mov	r0, #0
   11a70:	mov	r2, #5
   11a74:	movt	r1, #1
   11a78:	bl	11538 <dcgettext@plt>
   11a7c:	ldr	r1, [r7]
   11a80:	bl	1149c <fputs_unlocked@plt>
   11a84:	movw	r1, #47179	; 0xb84b
   11a88:	mov	r0, #0
   11a8c:	mov	r2, #5
   11a90:	movt	r1, #1
   11a94:	bl	11538 <dcgettext@plt>
   11a98:	ldr	r1, [r7]
   11a9c:	bl	1149c <fputs_unlocked@plt>
   11aa0:	movw	r1, #47644	; 0xba1c
   11aa4:	mov	r0, #0
   11aa8:	mov	r2, #5
   11aac:	movt	r1, #1
   11ab0:	bl	11538 <dcgettext@plt>
   11ab4:	ldr	r1, [r7]
   11ab8:	bl	1149c <fputs_unlocked@plt>
   11abc:	movw	r1, #47689	; 0xba49
   11ac0:	mov	r0, #0
   11ac4:	mov	r2, #5
   11ac8:	movt	r1, #1
   11acc:	bl	11538 <dcgettext@plt>
   11ad0:	ldr	r1, [r7]
   11ad4:	bl	1149c <fputs_unlocked@plt>
   11ad8:	movw	r0, #49384	; 0xc0e8
   11adc:	mov	r2, #48	; 0x30
   11ae0:	add	r6, sp, #8
   11ae4:	movw	r5, #47743	; 0xba7f
   11ae8:	movt	r0, #1
   11aec:	movt	r5, #1
   11af0:	add	r1, r0, #32
   11af4:	add	r3, r0, #16
   11af8:	vld1.64	{d18-d19}, [r0], r2
   11afc:	vld1.64	{d16-d17}, [r1]
   11b00:	vld1.64	{d20-d21}, [r3]
   11b04:	vldr	d22, [r0]
   11b08:	add	r1, r6, #32
   11b0c:	add	r0, r6, #16
   11b10:	vst1.64	{d16-d17}, [r1]
   11b14:	movw	r1, #48139	; 0xbc0b
   11b18:	vst1.64	{d20-d21}, [r0]
   11b1c:	mov	r0, r6
   11b20:	movt	r1, #1
   11b24:	vst1.64	{d18-d19}, [r0], r2
   11b28:	vstr	d22, [r0]
   11b2c:	mov	r0, r5
   11b30:	bl	114c0 <strcmp@plt>
   11b34:	cmp	r0, #0
   11b38:	ldrne	r1, [r6, #8]!
   11b3c:	cmpne	r1, #0
   11b40:	bne	11b2c <__assert_fail@plt+0x2dc>
   11b44:	movw	r1, #48234	; 0xbc6a
   11b48:	ldr	r6, [r6, #4]
   11b4c:	mov	r0, #0
   11b50:	mov	r2, #5
   11b54:	movt	r1, #1
   11b58:	bl	11538 <dcgettext@plt>
   11b5c:	movw	r2, #47788	; 0xbaac
   11b60:	movw	r3, #48257	; 0xbc81
   11b64:	mov	r1, r0
   11b68:	mov	r0, #1
   11b6c:	movt	r2, #1
   11b70:	movt	r3, #1
   11b74:	bl	11700 <__printf_chk@plt>
   11b78:	cmp	r6, #0
   11b7c:	mov	r0, #5
   11b80:	mov	r1, #0
   11b84:	moveq	r6, r5
   11b88:	bl	1176c <setlocale@plt>
   11b8c:	cmp	r0, #0
   11b90:	beq	11bc8 <__assert_fail@plt+0x378>
   11b94:	movw	r1, #48297	; 0xbca9
   11b98:	mov	r2, #3
   11b9c:	movt	r1, #1
   11ba0:	bl	11808 <strncmp@plt>
   11ba4:	cmp	r0, #0
   11ba8:	beq	11bc8 <__assert_fail@plt+0x378>
   11bac:	movw	r1, #48301	; 0xbcad
   11bb0:	mov	r0, #0
   11bb4:	mov	r2, #5
   11bb8:	movt	r1, #1
   11bbc:	bl	11538 <dcgettext@plt>
   11bc0:	ldr	r1, [r7]
   11bc4:	bl	1149c <fputs_unlocked@plt>
   11bc8:	movw	r1, #48372	; 0xbcf4
   11bcc:	mov	r0, #0
   11bd0:	mov	r2, #5
   11bd4:	movt	r1, #1
   11bd8:	bl	11538 <dcgettext@plt>
   11bdc:	movw	r2, #48257	; 0xbc81
   11be0:	mov	r1, r0
   11be4:	mov	r0, #1
   11be8:	mov	r3, r5
   11bec:	movt	r2, #1
   11bf0:	bl	11700 <__printf_chk@plt>
   11bf4:	movw	r1, #48399	; 0xbd0f
   11bf8:	mov	r0, #0
   11bfc:	mov	r2, #5
   11c00:	movt	r1, #1
   11c04:	bl	11538 <dcgettext@plt>
   11c08:	mov	r1, r0
   11c0c:	movw	r0, #48167	; 0xbc27
   11c10:	movw	r3, #47643	; 0xba1b
   11c14:	cmp	r6, r5
   11c18:	mov	r2, r6
   11c1c:	movt	r0, #1
   11c20:	movt	r3, #1
   11c24:	moveq	r3, r0
   11c28:	mov	r0, #1
   11c2c:	bl	11700 <__printf_chk@plt>
   11c30:	mov	r0, r4
   11c34:	bl	1167c <exit@plt>
   11c38:	movw	r0, #53688	; 0xd1b8
   11c3c:	movw	r1, #45940	; 0xb374
   11c40:	mov	r2, #5
   11c44:	movt	r0, #2
   11c48:	movt	r1, #1
   11c4c:	ldr	r5, [r0]
   11c50:	mov	r0, #0
   11c54:	bl	11538 <dcgettext@plt>
   11c58:	mov	r2, r0
   11c5c:	movw	r0, #53760	; 0xd200
   11c60:	mov	r1, #1
   11c64:	movt	r0, #2
   11c68:	ldr	r3, [r0]
   11c6c:	mov	r0, r5
   11c70:	bl	11718 <__fprintf_chk@plt>
   11c74:	mov	r0, r4
   11c78:	bl	1167c <exit@plt>
   11c7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c80:	add	fp, sp, #28
   11c84:	sub	sp, sp, #36	; 0x24
   11c88:	mov	r5, r0
   11c8c:	ldr	r0, [r1]
   11c90:	mov	r4, r1
   11c94:	bl	16b68 <__assert_fail@plt+0x5318>
   11c98:	movw	r1, #47643	; 0xba1b
   11c9c:	mov	r0, #6
   11ca0:	movt	r1, #1
   11ca4:	bl	1176c <setlocale@plt>
   11ca8:	movw	r6, #47792	; 0xbab0
   11cac:	movw	r1, #47749	; 0xba85
   11cb0:	movt	r6, #1
   11cb4:	movt	r1, #1
   11cb8:	mov	r0, r6
   11cbc:	bl	117d8 <bindtextdomain@plt>
   11cc0:	mov	r0, r6
   11cc4:	bl	11568 <textdomain@plt>
   11cc8:	movw	r0, #11448	; 0x2cb8
   11ccc:	movt	r0, #1
   11cd0:	bl	1b350 <__assert_fail@plt+0x9b00>
   11cd4:	movw	r7, #47773	; 0xba9d
   11cd8:	movw	r6, #49160	; 0xc008
   11cdc:	mov	r0, #16
   11ce0:	mov	r9, #0
   11ce4:	mvn	r8, #0
   11ce8:	mov	sl, #0
   11cec:	str	r0, [sp, #24]
   11cf0:	mov	r0, #0
   11cf4:	movt	r7, #1
   11cf8:	movt	r6, #1
   11cfc:	str	r0, [sp, #20]
   11d00:	mov	r0, #0
   11d04:	str	r0, [sp, #16]
   11d08:	mov	r0, r5
   11d0c:	mov	r1, r4
   11d10:	mov	r2, r7
   11d14:	mov	r3, r6
   11d18:	str	r9, [sp]
   11d1c:	bl	11658 <getopt_long@plt>
   11d20:	add	r1, r0, #3
   11d24:	cmp	r1, #121	; 0x79
   11d28:	bhi	11f28 <__assert_fail@plt+0x6d8>
   11d2c:	add	r0, pc, #0
   11d30:	ldr	pc, [r0, r1, lsl #2]
   11d34:	andeq	r2, r1, ip, lsr #22
   11d38:	andeq	r2, r1, r0, lsl #23
   11d3c:	andeq	r2, r1, r4, asr #32
   11d40:	andeq	r2, r1, r8, asr #23
   11d44:	andeq	r2, r1, r8, asr #23
   11d48:	andeq	r2, r1, r8, asr #23
   11d4c:	andeq	r2, r1, r8, asr #23
   11d50:	andeq	r2, r1, r8, asr #23
   11d54:	andeq	r2, r1, r8, asr #23
   11d58:	andeq	r2, r1, r8, asr #23
   11d5c:	andeq	r2, r1, r8, asr #23
   11d60:	andeq	r2, r1, r8, asr #23
   11d64:	andeq	r2, r1, r8, asr #23
   11d68:	andeq	r2, r1, r8, asr #23
   11d6c:	andeq	r2, r1, r8, asr #23
   11d70:	andeq	r2, r1, r8, asr #23
   11d74:	andeq	r2, r1, r8, asr #23
   11d78:	andeq	r2, r1, r8, asr #23
   11d7c:	andeq	r2, r1, r8, asr #23
   11d80:	andeq	r2, r1, r8, asr #23
   11d84:	andeq	r2, r1, r8, asr #23
   11d88:	andeq	r2, r1, r8, asr #23
   11d8c:	andeq	r2, r1, r8, asr #23
   11d90:	andeq	r2, r1, r8, asr #23
   11d94:	andeq	r2, r1, r8, asr #23
   11d98:	andeq	r2, r1, r8, asr #23
   11d9c:	andeq	r2, r1, r8, asr #23
   11da0:	andeq	r2, r1, r8, asr #23
   11da4:	andeq	r2, r1, r8, asr #23
   11da8:	andeq	r2, r1, r8, asr #23
   11dac:	andeq	r2, r1, r8, asr #23
   11db0:	andeq	r2, r1, r8, asr #23
   11db4:	andeq	r2, r1, r8, asr #23
   11db8:	andeq	r2, r1, r8, asr #23
   11dbc:	andeq	r2, r1, r8, asr #23
   11dc0:	andeq	r2, r1, r8, asr #23
   11dc4:	andeq	r2, r1, r8, asr #23
   11dc8:	andeq	r2, r1, r8, asr #23
   11dcc:	andeq	r2, r1, r8, asr #23
   11dd0:	andeq	r2, r1, r8, asr #23
   11dd4:	andeq	r2, r1, r8, asr #23
   11dd8:	andeq	r2, r1, r8, asr #23
   11ddc:	andeq	r2, r1, r8, asr #23
   11de0:	andeq	r2, r1, r8, asr #23
   11de4:	andeq	r2, r1, r8, asr #23
   11de8:	andeq	r2, r1, r8, asr #23
   11dec:	andeq	r2, r1, r8, asr #23
   11df0:	andeq	r2, r1, r8, asr #23
   11df4:	andeq	r2, r1, r8, asr #23
   11df8:	andeq	r2, r1, r8, asr #23
   11dfc:	andeq	r2, r1, r8, asr #23
   11e00:	andeq	r2, r1, r8, asr #23
   11e04:	andeq	r2, r1, r8, asr #23
   11e08:	andeq	r2, r1, r8, asr #23
   11e0c:	andeq	r2, r1, r8, asr #23
   11e10:	andeq	r2, r1, r8, asr #23
   11e14:	andeq	r2, r1, r8, asr #23
   11e18:	andeq	r2, r1, r8, asr #23
   11e1c:	andeq	r2, r1, r8, asr #23
   11e20:	andeq	r2, r1, r8, asr #23
   11e24:	andeq	r2, r1, r8, asr #23
   11e28:	andeq	r2, r1, r8, asr #23
   11e2c:	andeq	r2, r1, r8, asr #23
   11e30:	andeq	r2, r1, r8, asr #23
   11e34:	andeq	r2, r1, r8, asr #23
   11e38:	andeq	r2, r1, r8, asr #23
   11e3c:	andeq	r2, r1, r8, asr #23
   11e40:	andeq	r2, r1, r8, asr #23
   11e44:	andeq	r2, r1, r8, asr #23
   11e48:	andeq	r2, r1, r8, asr #23
   11e4c:	andeq	r2, r1, r8, asr #23
   11e50:	andeq	r2, r1, r8, asr #23
   11e54:	andeq	r2, r1, r8, asr #23
   11e58:	andeq	r2, r1, r8, asr #23
   11e5c:	andeq	r2, r1, r8, asr #23
   11e60:	andeq	r1, r1, ip, lsl pc
   11e64:	andeq	r2, r1, r8, asr #23
   11e68:	andeq	r2, r1, r8, asr #23
   11e6c:	andeq	r2, r1, r8, asr #23
   11e70:	andeq	r1, r1, r0, lsr #31
   11e74:	andeq	r2, r1, r8, asr #23
   11e78:	andeq	r2, r1, r8, asr #23
   11e7c:	andeq	r2, r1, r8, asr #23
   11e80:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11e84:	andeq	r2, r1, r8, asr #23
   11e88:	andeq	r1, r1, r0, asr #31
   11e8c:	andeq	r2, r1, r8, asr #23
   11e90:	andeq	r2, r1, r8, asr #23
   11e94:	andeq	r2, r1, r8, asr #23
   11e98:	andeq	r2, r1, r8, asr #23
   11e9c:	andeq	r2, r1, r8, asr #23
   11ea0:	andeq	r2, r1, r8, asr #23
   11ea4:	andeq	r2, r1, r8, asr #23
   11ea8:	andeq	r2, r1, r8, asr #23
   11eac:	andeq	r2, r1, r8, asr #23
   11eb0:	andeq	r2, r1, r8, asr #23
   11eb4:	andeq	r2, r1, r8, asr #23
   11eb8:	andeq	r2, r1, r8, asr #23
   11ebc:	andeq	r2, r1, r8, asr #23
   11ec0:	andeq	r2, r1, r8, asr #23
   11ec4:	andeq	r2, r1, r8, asr #23
   11ec8:	andeq	r2, r1, r8, asr #23
   11ecc:	andeq	r2, r1, r8, asr #23
   11ed0:	andeq	r2, r1, r8, asr #23
   11ed4:	andeq	r2, r1, r8, asr #23
   11ed8:	andeq	r1, r1, r8, lsl #26
   11edc:	andeq	r2, r1, r8, asr #23
   11ee0:	andeq	r1, r1, r0, ror #31
   11ee4:	andeq	r2, r1, r8, asr #23
   11ee8:	andeq	r2, r1, r8, asr #23
   11eec:	andeq	r2, r1, r8, asr #23
   11ef0:	andeq	r1, r1, r4, asr pc
   11ef4:	andeq	r2, r1, r8, asr #23
   11ef8:	andeq	r2, r1, r8, asr #23
   11efc:	andeq	r2, r1, r8, asr #23
   11f00:	andeq	r2, r1, r8, asr #23
   11f04:	andeq	r2, r1, r8, asr #23
   11f08:	strdeq	r1, [r1], -r4
   11f0c:	andeq	r2, r1, r8, asr #23
   11f10:	andeq	r1, r1, r4, ror pc
   11f14:	andeq	r2, r1, r4, lsl r0
   11f18:	andeq	r1, r1, ip, lsr #31
   11f1c:	mov	r0, #17
   11f20:	str	r0, [sp, #24]
   11f24:	b	11d08 <__assert_fail@plt+0x4b8>
   11f28:	sub	r0, r0, #256	; 0x100
   11f2c:	cmp	r0, #3
   11f30:	bhi	12bc8 <__assert_fail@plt+0x1378>
   11f34:	add	r1, pc, #0
   11f38:	ldr	pc, [r1, r0, lsl #2]
   11f3c:	andeq	r1, r1, ip, asr #30
   11f40:	andeq	r1, r1, r8, ror #31
   11f44:	ldrdeq	r1, [r1], -r4
   11f48:	andeq	r2, r1, r4, lsr r0
   11f4c:	mov	r8, #1
   11f50:	b	11d08 <__assert_fail@plt+0x4b8>
   11f54:	movw	r0, #53696	; 0xd1c0
   11f58:	movw	r1, #53704	; 0xd1c8
   11f5c:	mov	sl, #1
   11f60:	movt	r0, #2
   11f64:	movt	r1, #2
   11f68:	ldr	r0, [r0]
   11f6c:	str	r0, [r1, #16]
   11f70:	b	11d08 <__assert_fail@plt+0x4b8>
   11f74:	movw	r0, #53696	; 0xd1c0
   11f78:	movw	r1, #53704	; 0xd1c8
   11f7c:	mov	sl, #1
   11f80:	movt	r0, #2
   11f84:	movt	r1, #2
   11f88:	ldr	r0, [r0]
   11f8c:	str	r0, [r1, #12]
   11f90:	b	11d08 <__assert_fail@plt+0x4b8>
   11f94:	mov	r0, #16
   11f98:	str	r0, [sp, #24]
   11f9c:	b	11d08 <__assert_fail@plt+0x4b8>
   11fa0:	mov	r0, #2
   11fa4:	str	r0, [sp, #24]
   11fa8:	b	11d08 <__assert_fail@plt+0x4b8>
   11fac:	movw	r0, #53704	; 0xd1c8
   11fb0:	mov	r1, #1
   11fb4:	movt	r0, #2
   11fb8:	strb	r1, [r0, #1]
   11fbc:	b	11d08 <__assert_fail@plt+0x4b8>
   11fc0:	movw	r0, #53704	; 0xd1c8
   11fc4:	mov	r1, #1
   11fc8:	movt	r0, #2
   11fcc:	strb	r1, [r0]
   11fd0:	b	11d08 <__assert_fail@plt+0x4b8>
   11fd4:	mov	r0, #1
   11fd8:	str	r0, [sp, #20]
   11fdc:	b	11d08 <__assert_fail@plt+0x4b8>
   11fe0:	mov	r8, #0
   11fe4:	b	11d08 <__assert_fail@plt+0x4b8>
   11fe8:	mov	r0, #0
   11fec:	str	r0, [sp, #20]
   11ff0:	b	11d08 <__assert_fail@plt+0x4b8>
   11ff4:	movw	r0, #53696	; 0xd1c0
   11ff8:	movw	r1, #53704	; 0xd1c8
   11ffc:	mov	sl, #1
   12000:	movt	r0, #2
   12004:	movt	r1, #2
   12008:	ldr	r0, [r0]
   1200c:	str	r0, [r1, #8]
   12010:	b	11d08 <__assert_fail@plt+0x4b8>
   12014:	movw	r0, #53696	; 0xd1c0
   12018:	movw	r1, #53704	; 0xd1c8
   1201c:	mov	sl, #1
   12020:	movt	r0, #2
   12024:	movt	r1, #2
   12028:	ldr	r0, [r0]
   1202c:	str	r0, [r1, #4]
   12030:	b	11d08 <__assert_fail@plt+0x4b8>
   12034:	movw	r0, #53696	; 0xd1c0
   12038:	movt	r0, #2
   1203c:	ldr	r0, [r0]
   12040:	b	11d04 <__assert_fail@plt+0x4b4>
   12044:	movw	r0, #53704	; 0xd1c8
   12048:	movt	r0, #2
   1204c:	ldrb	r0, [r0]
   12050:	cmp	r0, #1
   12054:	bne	1207c <__assert_fail@plt+0x82c>
   12058:	ldr	r6, [sp, #24]
   1205c:	ldr	r7, [sp, #16]
   12060:	cmp	r6, #16
   12064:	bne	12094 <__assert_fail@plt+0x844>
   12068:	cmp	r8, #1
   1206c:	beq	12c3c <__assert_fail@plt+0x13ec>
   12070:	mov	r6, #16
   12074:	mov	r0, #0
   12078:	b	120a0 <__assert_fail@plt+0x850>
   1207c:	ldr	r7, [sp, #16]
   12080:	cmp	r8, #0
   12084:	mov	r6, #16
   12088:	movwne	r8, #1
   1208c:	mov	r0, r8
   12090:	b	120a0 <__assert_fail@plt+0x850>
   12094:	mov	r0, #1
   12098:	cmp	r8, #0
   1209c:	beq	12c48 <__assert_fail@plt+0x13f8>
   120a0:	movw	r1, #53704	; 0xd1c8
   120a4:	movw	r8, #53680	; 0xd1b0
   120a8:	cmp	r7, #0
   120ac:	movt	r1, #2
   120b0:	movt	r8, #2
   120b4:	strb	r0, [r1, #2]
   120b8:	ldr	r0, [r8]
   120bc:	mov	r1, #2
   120c0:	movwne	r1, #1
   120c4:	tst	sl, #1
   120c8:	movwne	r1, #1
   120cc:	sub	r2, r5, r0
   120d0:	cmp	r2, r1
   120d4:	blt	12b88 <__assert_fail@plt+0x1338>
   120d8:	cmp	r7, #0
   120dc:	beq	12124 <__assert_fail@plt+0x8d4>
   120e0:	mov	r0, #0
   120e4:	add	r1, sp, #28
   120e8:	str	r0, [sp, #28]
   120ec:	mov	r0, r7
   120f0:	bl	194dc <__assert_fail@plt+0x7c8c>
   120f4:	cmn	r0, #1
   120f8:	ble	12bd0 <__assert_fail@plt+0x1380>
   120fc:	movw	r1, #53704	; 0xd1c8
   12100:	ldr	r0, [sp, #28]
   12104:	tst	sl, #1
   12108:	movt	r1, #2
   1210c:	mov	r7, r1
   12110:	str	r0, [r1, #20]
   12114:	beq	12174 <__assert_fail@plt+0x924>
   12118:	movw	r1, #47987	; 0xbb73
   1211c:	movt	r1, #1
   12120:	b	12c18 <__assert_fail@plt+0x13c8>
   12124:	tst	sl, #1
   12128:	beq	12140 <__assert_fail@plt+0x8f0>
   1212c:	movw	r7, #53704	; 0xd1c8
   12130:	mov	r0, #0
   12134:	movt	r7, #2
   12138:	str	r0, [r7, #20]
   1213c:	b	12174 <__assert_fail@plt+0x924>
   12140:	add	r1, r0, #1
   12144:	movw	r7, #53704	; 0xd1c8
   12148:	str	r1, [r8]
   1214c:	movt	r7, #2
   12150:	ldr	r0, [r4, r0, lsl #2]
   12154:	str	r0, [r7, #20]
   12158:	bl	114b4 <is_selinux_enabled@plt>
   1215c:	cmp	r0, #1
   12160:	blt	12174 <__assert_fail@plt+0x924>
   12164:	ldr	r0, [r7, #20]
   12168:	bl	115f8 <security_check_context@plt>
   1216c:	cmn	r0, #1
   12170:	ble	12c6c <__assert_fail@plt+0x141c>
   12174:	ldrb	r0, [r7]
   12178:	ldr	r1, [sp, #20]
   1217c:	and	r0, r1, r0
   12180:	tst	r0, #1
   12184:	beq	121cc <__assert_fail@plt+0x97c>
   12188:	add	r0, r7, #32
   1218c:	bl	18b44 <__assert_fail@plt+0x72f4>
   12190:	cmp	r0, #0
   12194:	str	r0, [r7, #24]
   12198:	bne	121d4 <__assert_fail@plt+0x984>
   1219c:	bl	116d0 <__errno_location@plt>
   121a0:	movw	r1, #48033	; 0xbba1
   121a4:	ldr	r4, [r0]
   121a8:	mov	r0, #0
   121ac:	mov	r2, #5
   121b0:	movt	r1, #1
   121b4:	bl	11538 <dcgettext@plt>
   121b8:	movw	r1, #50877	; 0xc6bd
   121bc:	mov	r5, r0
   121c0:	mov	r0, #4
   121c4:	movt	r1, #1
   121c8:	b	12bf8 <__assert_fail@plt+0x13a8>
   121cc:	mov	r0, #0
   121d0:	str	r0, [r7, #24]
   121d4:	ldr	r0, [r8]
   121d8:	orr	r1, r6, #8
   121dc:	mov	r2, #0
   121e0:	add	r0, r4, r0, lsl #2
   121e4:	bl	1a2c0 <__assert_fail@plt+0x8a70>
   121e8:	str	r0, [sp, #24]
   121ec:	bl	138e4 <__assert_fail@plt+0x2094>
   121f0:	cmp	r0, #0
   121f4:	beq	12a9c <__assert_fail@plt+0x124c>
   121f8:	mov	r8, r0
   121fc:	mov	r6, #1
   12200:	b	12220 <__assert_fail@plt+0x9d0>
   12204:	mov	r7, r4
   12208:	ldr	r0, [sp, #24]
   1220c:	and	r6, r6, r7
   12210:	bl	138e4 <__assert_fail@plt+0x2094>
   12214:	mov	r8, r0
   12218:	cmp	r0, #0
   1221c:	beq	12aa0 <__assert_fail@plt+0x1250>
   12220:	ldr	r0, [r8, #24]
   12224:	ldr	r9, [r8, #28]
   12228:	add	r4, r8, #64	; 0x40
   1222c:	add	sl, r8, #160	; 0xa0
   12230:	str	r0, [sp, #20]
   12234:	ldrh	r0, [r8, #56]	; 0x38
   12238:	sub	r1, r0, #1
   1223c:	cmp	r1, #9
   12240:	bhi	12518 <__assert_fail@plt+0xcc8>
   12244:	add	r2, pc, #4
   12248:	mov	r7, #1
   1224c:	ldr	pc, [r2, r1, lsl #2]
   12250:	andeq	r2, r1, r8, ror r2
   12254:	andeq	r2, r1, ip, lsr #7
   12258:	andeq	r2, r1, r4, asr r4
   1225c:	andeq	r2, r1, r4, asr #6
   12260:	andeq	r2, r1, r4, asr r4
   12264:	andeq	r2, r1, r4, lsl #8
   12268:	andeq	r2, r1, r0, lsr #8
   1226c:	andeq	r2, r1, r4, asr r4
   12270:	andeq	r2, r1, r4, asr r4
   12274:	andeq	r2, r1, r8, asr r3
   12278:	movw	r0, #53704	; 0xd1c8
   1227c:	movt	r0, #2
   12280:	ldrb	r0, [r0]
   12284:	cmp	r0, #1
   12288:	bne	12530 <__assert_fail@plt+0xce0>
   1228c:	movw	r0, #53704	; 0xd1c8
   12290:	mov	r7, #1
   12294:	movt	r0, #2
   12298:	ldr	r0, [r0, #24]
   1229c:	cmp	r0, #0
   122a0:	beq	12208 <__assert_fail@plt+0x9b8>
   122a4:	ldrd	r2, [r0]
   122a8:	ldm	sl, {r1, r5}
   122ac:	eor	r3, r5, r3
   122b0:	eor	r1, r1, r2
   122b4:	orrs	r1, r1, r3
   122b8:	bne	12208 <__assert_fail@plt+0x9b8>
   122bc:	ldrd	r0, [r0, #8]
   122c0:	ldrd	r2, [r4]
   122c4:	eor	r1, r3, r1
   122c8:	eor	r0, r2, r0
   122cc:	orrs	r0, r0, r1
   122d0:	bne	12208 <__assert_fail@plt+0x9b8>
   122d4:	movw	r4, #50877	; 0xc6bd
   122d8:	mov	r0, r9
   122dc:	movt	r4, #1
   122e0:	mov	r1, r4
   122e4:	bl	114c0 <strcmp@plt>
   122e8:	cmp	r0, #0
   122ec:	beq	12a1c <__assert_fail@plt+0x11cc>
   122f0:	movw	r1, #48612	; 0xbde4
   122f4:	mov	r0, #0
   122f8:	mov	r2, #5
   122fc:	movt	r1, #1
   12300:	bl	11538 <dcgettext@plt>
   12304:	mov	r5, r0
   12308:	mov	r0, #0
   1230c:	mov	r1, #4
   12310:	mov	r2, r9
   12314:	bl	1855c <__assert_fail@plt+0x6d0c>
   12318:	mov	r7, r0
   1231c:	mov	r0, #1
   12320:	mov	r1, #4
   12324:	mov	r2, r4
   12328:	bl	1855c <__assert_fail@plt+0x6d0c>
   1232c:	str	r0, [sp]
   12330:	mov	r0, #0
   12334:	mov	r1, #0
   12338:	mov	r2, r5
   1233c:	mov	r3, r7
   12340:	b	12a50 <__assert_fail@plt+0x1200>
   12344:	ldr	r5, [r8, #32]
   12348:	movw	r1, #48736	; 0xbe60
   1234c:	mov	r0, #0
   12350:	movt	r1, #1
   12354:	b	12380 <__assert_fail@plt+0xb30>
   12358:	ldr	r0, [r8, #48]	; 0x30
   1235c:	cmp	r0, #0
   12360:	bne	12370 <__assert_fail@plt+0xb20>
   12364:	ldr	r0, [r8, #16]
   12368:	cmp	r0, #0
   1236c:	beq	12954 <__assert_fail@plt+0x1104>
   12370:	ldr	r5, [r8, #32]
   12374:	movw	r1, #48719	; 0xbe4f
   12378:	mov	r0, #0
   1237c:	movt	r1, #1
   12380:	mov	r2, #5
   12384:	bl	11538 <dcgettext@plt>
   12388:	mov	r7, r0
   1238c:	mov	r0, #4
   12390:	mov	r1, r9
   12394:	bl	18604 <__assert_fail@plt+0x6db4>
   12398:	mov	r3, r0
   1239c:	mov	r0, #0
   123a0:	mov	r1, r5
   123a4:	mov	r2, r7
   123a8:	b	12448 <__assert_fail@plt+0xbf8>
   123ac:	ldr	r0, [sp, #24]
   123b0:	mov	r1, r8
   123b4:	bl	1a30c <__assert_fail@plt+0x8abc>
   123b8:	cmp	r0, #0
   123bc:	beq	12530 <__assert_fail@plt+0xce0>
   123c0:	movw	r1, #48761	; 0xbe79
   123c4:	mov	r0, #0
   123c8:	mov	r2, #5
   123cc:	mov	r7, #0
   123d0:	movt	r1, #1
   123d4:	bl	11538 <dcgettext@plt>
   123d8:	mov	r5, r0
   123dc:	mov	r0, #0
   123e0:	mov	r1, #3
   123e4:	mov	r2, r9
   123e8:	bl	18880 <__assert_fail@plt+0x7030>
   123ec:	mov	r3, r0
   123f0:	mov	r0, #0
   123f4:	mov	r1, #0
   123f8:	mov	r2, r5
   123fc:	bl	115ec <error@plt>
   12400:	b	12208 <__assert_fail@plt+0x9b8>
   12404:	movw	r0, #53704	; 0xd1c8
   12408:	mov	r7, #1
   1240c:	movt	r0, #2
   12410:	ldrb	r0, [r0]
   12414:	cmp	r0, #0
   12418:	beq	12208 <__assert_fail@plt+0x9b8>
   1241c:	b	1245c <__assert_fail@plt+0xc0c>
   12420:	ldr	r5, [r8, #32]
   12424:	mov	r0, #0
   12428:	mov	r1, #3
   1242c:	mov	r2, r9
   12430:	bl	18880 <__assert_fail@plt+0x7030>
   12434:	movw	r2, #49471	; 0xc13f
   12438:	mov	r3, r0
   1243c:	mov	r0, #0
   12440:	mov	r1, r5
   12444:	movt	r2, #1
   12448:	bl	115ec <error@plt>
   1244c:	ldrh	r0, [r8, #56]	; 0x38
   12450:	mov	r7, #0
   12454:	cmp	r0, #6
   12458:	bne	12524 <__assert_fail@plt+0xcd4>
   1245c:	cmp	r7, #0
   12460:	beq	12524 <__assert_fail@plt+0xcd4>
   12464:	movw	r0, #53704	; 0xd1c8
   12468:	movt	r0, #2
   1246c:	ldr	r0, [r0, #24]
   12470:	cmp	r0, #0
   12474:	beq	12524 <__assert_fail@plt+0xcd4>
   12478:	ldrd	r2, [r0]
   1247c:	ldm	sl, {r1, r5}
   12480:	eor	r3, r5, r3
   12484:	eor	r1, r1, r2
   12488:	orrs	r1, r1, r3
   1248c:	bne	12530 <__assert_fail@plt+0xce0>
   12490:	ldrd	r0, [r0, #8]
   12494:	ldrd	r2, [r4]
   12498:	eor	r1, r3, r1
   1249c:	eor	r0, r2, r0
   124a0:	orrs	r0, r0, r1
   124a4:	bne	12530 <__assert_fail@plt+0xce0>
   124a8:	movw	r4, #50877	; 0xc6bd
   124ac:	mov	r0, r9
   124b0:	movt	r4, #1
   124b4:	mov	r1, r4
   124b8:	bl	114c0 <strcmp@plt>
   124bc:	cmp	r0, #0
   124c0:	beq	129b8 <__assert_fail@plt+0x1168>
   124c4:	movw	r1, #48612	; 0xbde4
   124c8:	mov	r0, #0
   124cc:	mov	r2, #5
   124d0:	movt	r1, #1
   124d4:	bl	11538 <dcgettext@plt>
   124d8:	mov	r5, r0
   124dc:	mov	r0, #0
   124e0:	mov	r1, #4
   124e4:	mov	r2, r9
   124e8:	bl	1855c <__assert_fail@plt+0x6d0c>
   124ec:	mov	r7, r0
   124f0:	mov	r0, #1
   124f4:	mov	r1, #4
   124f8:	mov	r2, r4
   124fc:	bl	1855c <__assert_fail@plt+0x6d0c>
   12500:	str	r0, [sp]
   12504:	mov	r0, #0
   12508:	mov	r1, #0
   1250c:	mov	r2, r5
   12510:	mov	r3, r7
   12514:	b	129ec <__assert_fail@plt+0x119c>
   12518:	mov	r7, #1
   1251c:	cmp	r0, #6
   12520:	beq	1245c <__assert_fail@plt+0xc0c>
   12524:	mov	r4, #0
   12528:	cmp	r7, #0
   1252c:	beq	12990 <__assert_fail@plt+0x1140>
   12530:	str	r6, [sp, #16]
   12534:	movw	r6, #53704	; 0xd1c8
   12538:	movt	r6, #2
   1253c:	ldrb	r0, [r6, #1]
   12540:	cmp	r0, #1
   12544:	bne	1257c <__assert_fail@plt+0xd2c>
   12548:	movw	r1, #48947	; 0xbf33
   1254c:	mov	r0, #0
   12550:	mov	r2, #5
   12554:	movt	r1, #1
   12558:	bl	11538 <dcgettext@plt>
   1255c:	mov	r5, r0
   12560:	mov	r0, #4
   12564:	mov	r1, r9
   12568:	bl	18604 <__assert_fail@plt+0x6db4>
   1256c:	mov	r2, r0
   12570:	mov	r0, #1
   12574:	mov	r1, r5
   12578:	bl	11700 <__printf_chk@plt>
   1257c:	ldr	r0, [sp, #24]
   12580:	ldr	r7, [r6, #20]
   12584:	ldr	r4, [sp, #20]
   12588:	ldr	r5, [r0, #32]
   1258c:	mov	r0, #0
   12590:	cmp	r7, #0
   12594:	str	r0, [sp, #32]
   12598:	beq	125c4 <__assert_fail@plt+0xd74>
   1259c:	ldrb	r0, [r6, #2]
   125a0:	cmp	r0, #0
   125a4:	beq	1262c <__assert_fail@plt+0xddc>
   125a8:	mov	r0, r5
   125ac:	mov	r1, r4
   125b0:	mov	r2, r7
   125b4:	bl	1903c <__assert_fail@plt+0x77ec>
   125b8:	cmp	r0, #0
   125bc:	bne	12644 <__assert_fail@plt+0xdf4>
   125c0:	b	12900 <__assert_fail@plt+0x10b0>
   125c4:	ldrb	r0, [r6, #2]
   125c8:	cmp	r0, #0
   125cc:	beq	126cc <__assert_fail@plt+0xe7c>
   125d0:	mov	r0, r5
   125d4:	mov	r1, r4
   125d8:	add	r2, sp, #32
   125dc:	bl	18b9c <__assert_fail@plt+0x734c>
   125e0:	cmn	r0, #1
   125e4:	bgt	126e4 <__assert_fail@plt+0xe94>
   125e8:	bl	116d0 <__errno_location@plt>
   125ec:	ldr	r7, [r0]
   125f0:	cmp	r7, #61	; 0x3d
   125f4:	beq	126e4 <__assert_fail@plt+0xe94>
   125f8:	movw	r1, #47930	; 0xbb3a
   125fc:	mov	r0, #0
   12600:	mov	r2, #5
   12604:	movt	r1, #1
   12608:	bl	11538 <dcgettext@plt>
   1260c:	mov	r5, r0
   12610:	mov	r0, #4
   12614:	mov	r1, r4
   12618:	bl	18604 <__assert_fail@plt+0x6db4>
   1261c:	mov	r3, r0
   12620:	mov	r0, #0
   12624:	mov	r1, r7
   12628:	b	128c8 <__assert_fail@plt+0x1078>
   1262c:	mov	r0, r5
   12630:	mov	r1, r4
   12634:	mov	r2, r7
   12638:	bl	1928c <__assert_fail@plt+0x7a3c>
   1263c:	cmp	r0, #0
   12640:	beq	12900 <__assert_fail@plt+0x10b0>
   12644:	bl	116d0 <__errno_location@plt>
   12648:	movw	r1, #49029	; 0xbf85
   1264c:	ldr	r5, [r0]
   12650:	mov	r0, #0
   12654:	mov	r2, #5
   12658:	movt	r1, #1
   1265c:	bl	11538 <dcgettext@plt>
   12660:	mov	r6, r0
   12664:	mov	r0, #0
   12668:	mov	r1, #4
   1266c:	mov	r2, r4
   12670:	bl	1855c <__assert_fail@plt+0x6d0c>
   12674:	mov	sl, r0
   12678:	mov	r0, #1
   1267c:	mov	r1, r7
   12680:	mov	r4, #1
   12684:	bl	18b1c <__assert_fail@plt+0x72cc>
   12688:	str	r0, [sp]
   1268c:	mov	r2, r6
   12690:	movw	r6, #53704	; 0xd1c8
   12694:	mov	r0, #0
   12698:	mov	r1, r5
   1269c:	mov	r3, sl
   126a0:	movt	r6, #2
   126a4:	bl	115ec <error@plt>
   126a8:	ldr	r0, [r6, #20]
   126ac:	cmp	r0, #0
   126b0:	bne	126c4 <__assert_fail@plt+0xe74>
   126b4:	ldr	r0, [sp, #12]
   126b8:	bl	1164c <context_free@plt>
   126bc:	ldr	r0, [sp, #32]
   126c0:	bl	117cc <freecon@plt>
   126c4:	eor	r4, r4, #1
   126c8:	b	1298c <__assert_fail@plt+0x113c>
   126cc:	mov	r0, r5
   126d0:	mov	r1, r4
   126d4:	add	r2, sp, #32
   126d8:	bl	18dec <__assert_fail@plt+0x759c>
   126dc:	cmn	r0, #1
   126e0:	ble	125e8 <__assert_fail@plt+0xd98>
   126e4:	ldr	r7, [sp, #32]
   126e8:	cmp	r7, #0
   126ec:	beq	12898 <__assert_fail@plt+0x1048>
   126f0:	mov	r0, r7
   126f4:	bl	11520 <context_new@plt>
   126f8:	cmp	r0, #0
   126fc:	beq	12914 <__assert_fail@plt+0x10c4>
   12700:	ldr	r1, [r6, #4]
   12704:	mov	r9, #1
   12708:	str	r0, [sp, #12]
   1270c:	cmp	r1, #0
   12710:	beq	12768 <__assert_fail@plt+0xf18>
   12714:	bl	11688 <context_user_set@plt>
   12718:	cmp	r0, #0
   1271c:	beq	12768 <__assert_fail@plt+0xf18>
   12720:	bl	116d0 <__errno_location@plt>
   12724:	movw	r1, #49104	; 0xbfd0
   12728:	ldr	sl, [r0]
   1272c:	mov	r0, #0
   12730:	mov	r2, #5
   12734:	mov	r9, #0
   12738:	movt	r1, #1
   1273c:	bl	11538 <dcgettext@plt>
   12740:	mov	r7, r0
   12744:	ldr	r0, [r6, #4]
   12748:	bl	18b2c <__assert_fail@plt+0x72dc>
   1274c:	movw	r3, #48492	; 0xbd6c
   12750:	str	r0, [sp]
   12754:	mov	r0, #0
   12758:	mov	r1, sl
   1275c:	mov	r2, r7
   12760:	movt	r3, #1
   12764:	bl	115ec <error@plt>
   12768:	ldr	r1, [r6, #16]
   1276c:	cmp	r1, #0
   12770:	beq	127cc <__assert_fail@plt+0xf7c>
   12774:	ldr	r0, [sp, #12]
   12778:	bl	117e4 <context_range_set@plt>
   1277c:	cmp	r0, #0
   12780:	beq	127cc <__assert_fail@plt+0xf7c>
   12784:	bl	116d0 <__errno_location@plt>
   12788:	movw	r1, #49104	; 0xbfd0
   1278c:	ldr	sl, [r0]
   12790:	mov	r0, #0
   12794:	mov	r2, #5
   12798:	mov	r9, #0
   1279c:	movt	r1, #1
   127a0:	bl	11538 <dcgettext@plt>
   127a4:	mov	r7, r0
   127a8:	ldr	r0, [r6, #16]
   127ac:	bl	18b2c <__assert_fail@plt+0x72dc>
   127b0:	movw	r3, #48507	; 0xbd7b
   127b4:	str	r0, [sp]
   127b8:	mov	r0, #0
   127bc:	mov	r1, sl
   127c0:	mov	r2, r7
   127c4:	movt	r3, #1
   127c8:	bl	115ec <error@plt>
   127cc:	ldr	r1, [r6, #8]
   127d0:	cmp	r1, #0
   127d4:	beq	12830 <__assert_fail@plt+0xfe0>
   127d8:	ldr	r0, [sp, #12]
   127dc:	bl	1152c <context_role_set@plt>
   127e0:	cmp	r0, #0
   127e4:	beq	12830 <__assert_fail@plt+0xfe0>
   127e8:	bl	116d0 <__errno_location@plt>
   127ec:	movw	r1, #49104	; 0xbfd0
   127f0:	ldr	sl, [r0]
   127f4:	mov	r0, #0
   127f8:	mov	r2, #5
   127fc:	mov	r9, #0
   12800:	movt	r1, #1
   12804:	bl	11538 <dcgettext@plt>
   12808:	mov	r7, r0
   1280c:	ldr	r0, [r6, #8]
   12810:	bl	18b2c <__assert_fail@plt+0x72dc>
   12814:	movw	r3, #48497	; 0xbd71
   12818:	str	r0, [sp]
   1281c:	mov	r0, #0
   12820:	mov	r1, sl
   12824:	mov	r2, r7
   12828:	movt	r3, #1
   1282c:	bl	115ec <error@plt>
   12830:	ldr	r1, [r6, #12]
   12834:	cmp	r1, #0
   12838:	beq	128d0 <__assert_fail@plt+0x1080>
   1283c:	ldr	r0, [sp, #12]
   12840:	bl	11544 <context_type_set@plt>
   12844:	cmp	r0, #0
   12848:	beq	128d0 <__assert_fail@plt+0x1080>
   1284c:	bl	116d0 <__errno_location@plt>
   12850:	movw	r1, #49104	; 0xbfd0
   12854:	ldr	r4, [r0]
   12858:	mov	r5, r0
   1285c:	mov	r0, #0
   12860:	mov	r2, #5
   12864:	movt	r1, #1
   12868:	bl	11538 <dcgettext@plt>
   1286c:	mov	r7, r0
   12870:	ldr	r0, [r6, #12]
   12874:	bl	18b2c <__assert_fail@plt+0x72dc>
   12878:	movw	r3, #48502	; 0xbd76
   1287c:	str	r0, [sp]
   12880:	mov	r0, #0
   12884:	mov	r1, r4
   12888:	mov	r2, r7
   1288c:	movt	r3, #1
   12890:	bl	115ec <error@plt>
   12894:	b	12978 <__assert_fail@plt+0x1128>
   12898:	movw	r1, #48980	; 0xbf54
   1289c:	mov	r0, #0
   128a0:	mov	r2, #5
   128a4:	movt	r1, #1
   128a8:	bl	11538 <dcgettext@plt>
   128ac:	mov	r5, r0
   128b0:	mov	r0, #4
   128b4:	mov	r1, r4
   128b8:	bl	18604 <__assert_fail@plt+0x6db4>
   128bc:	mov	r3, r0
   128c0:	mov	r0, #0
   128c4:	mov	r1, #0
   128c8:	mov	r2, r5
   128cc:	b	1294c <__assert_fail@plt+0x10fc>
   128d0:	cmp	r9, #0
   128d4:	beq	12970 <__assert_fail@plt+0x1120>
   128d8:	ldr	r0, [sp, #12]
   128dc:	bl	117f0 <context_str@plt>
   128e0:	ldr	r1, [sp, #32]
   128e4:	mov	r7, r0
   128e8:	cmp	r1, #0
   128ec:	beq	1259c <__assert_fail@plt+0xd4c>
   128f0:	mov	r0, r7
   128f4:	bl	114c0 <strcmp@plt>
   128f8:	cmp	r0, #0
   128fc:	bne	1259c <__assert_fail@plt+0xd4c>
   12900:	mov	r4, #0
   12904:	ldr	r0, [r6, #20]
   12908:	cmp	r0, #0
   1290c:	bne	126c4 <__assert_fail@plt+0xe74>
   12910:	b	126b4 <__assert_fail@plt+0xe64>
   12914:	bl	116d0 <__errno_location@plt>
   12918:	movw	r1, #49066	; 0xbfaa
   1291c:	ldr	r5, [r0]
   12920:	mov	r0, #0
   12924:	mov	r2, #5
   12928:	movt	r1, #1
   1292c:	bl	11538 <dcgettext@plt>
   12930:	mov	r6, r0
   12934:	mov	r0, r7
   12938:	bl	18b2c <__assert_fail@plt+0x72dc>
   1293c:	mov	r3, r0
   12940:	mov	r0, #0
   12944:	mov	r1, r5
   12948:	mov	r2, r6
   1294c:	bl	115ec <error@plt>
   12950:	b	12988 <__assert_fail@plt+0x1138>
   12954:	ldr	r0, [sp, #24]
   12958:	mov	r7, #1
   1295c:	mov	r1, r8
   12960:	mov	r2, #1
   12964:	str	r7, [r8, #16]
   12968:	bl	15144 <__assert_fail@plt+0x38f4>
   1296c:	b	12208 <__assert_fail@plt+0x9b8>
   12970:	bl	116d0 <__errno_location@plt>
   12974:	mov	r5, r0
   12978:	ldr	r0, [sp, #12]
   1297c:	ldr	r4, [r5]
   12980:	bl	1164c <context_free@plt>
   12984:	str	r4, [r5]
   12988:	mov	r4, #0
   1298c:	ldr	r6, [sp, #16]
   12990:	movw	r0, #53704	; 0xd1c8
   12994:	movt	r0, #2
   12998:	ldrb	r0, [r0]
   1299c:	cmp	r0, #0
   129a0:	bne	12204 <__assert_fail@plt+0x9b4>
   129a4:	ldr	r0, [sp, #24]
   129a8:	mov	r1, r8
   129ac:	mov	r2, #4
   129b0:	bl	15144 <__assert_fail@plt+0x38f4>
   129b4:	b	12204 <__assert_fail@plt+0x9b4>
   129b8:	movw	r1, #48567	; 0xbdb7
   129bc:	mov	r0, #0
   129c0:	mov	r2, #5
   129c4:	movt	r1, #1
   129c8:	bl	11538 <dcgettext@plt>
   129cc:	mov	r5, r0
   129d0:	mov	r0, #4
   129d4:	mov	r1, r9
   129d8:	bl	18604 <__assert_fail@plt+0x6db4>
   129dc:	mov	r3, r0
   129e0:	mov	r0, #0
   129e4:	mov	r1, #0
   129e8:	mov	r2, r5
   129ec:	bl	115ec <error@plt>
   129f0:	movw	r1, #48670	; 0xbe1e
   129f4:	mov	r0, #0
   129f8:	mov	r2, #5
   129fc:	mov	r4, #0
   12a00:	movt	r1, #1
   12a04:	bl	11538 <dcgettext@plt>
   12a08:	mov	r2, r0
   12a0c:	mov	r0, #0
   12a10:	mov	r1, #0
   12a14:	bl	115ec <error@plt>
   12a18:	b	12990 <__assert_fail@plt+0x1140>
   12a1c:	movw	r1, #48567	; 0xbdb7
   12a20:	mov	r0, #0
   12a24:	mov	r2, #5
   12a28:	movt	r1, #1
   12a2c:	bl	11538 <dcgettext@plt>
   12a30:	mov	r5, r0
   12a34:	mov	r0, #4
   12a38:	mov	r1, r9
   12a3c:	bl	18604 <__assert_fail@plt+0x6db4>
   12a40:	mov	r3, r0
   12a44:	mov	r0, #0
   12a48:	mov	r1, #0
   12a4c:	mov	r2, r5
   12a50:	bl	115ec <error@plt>
   12a54:	movw	r1, #48670	; 0xbe1e
   12a58:	mov	r0, #0
   12a5c:	mov	r2, #5
   12a60:	mov	r7, #0
   12a64:	movt	r1, #1
   12a68:	bl	11538 <dcgettext@plt>
   12a6c:	mov	r2, r0
   12a70:	mov	r0, #0
   12a74:	mov	r1, #0
   12a78:	bl	115ec <error@plt>
   12a7c:	ldr	r4, [sp, #24]
   12a80:	mov	r1, r8
   12a84:	mov	r2, #4
   12a88:	mov	r0, r4
   12a8c:	bl	15144 <__assert_fail@plt+0x38f4>
   12a90:	mov	r0, r4
   12a94:	bl	138e4 <__assert_fail@plt+0x2094>
   12a98:	b	12208 <__assert_fail@plt+0x9b8>
   12a9c:	mov	r6, #1
   12aa0:	mov	r4, r6
   12aa4:	bl	116d0 <__errno_location@plt>
   12aa8:	ldr	r6, [r0]
   12aac:	mov	r5, r0
   12ab0:	cmp	r6, #0
   12ab4:	beq	12ae0 <__assert_fail@plt+0x1290>
   12ab8:	movw	r1, #48534	; 0xbd96
   12abc:	mov	r0, #0
   12ac0:	mov	r2, #5
   12ac4:	mov	r4, #0
   12ac8:	movt	r1, #1
   12acc:	bl	11538 <dcgettext@plt>
   12ad0:	mov	r2, r0
   12ad4:	mov	r0, #0
   12ad8:	mov	r1, r6
   12adc:	bl	115ec <error@plt>
   12ae0:	ldr	r0, [sp, #24]
   12ae4:	bl	1371c <__assert_fail@plt+0x1ecc>
   12ae8:	cmp	r0, #0
   12aec:	mov	r6, r4
   12af0:	beq	12b20 <__assert_fail@plt+0x12d0>
   12af4:	movw	r1, #48550	; 0xbda6
   12af8:	ldr	r4, [r5]
   12afc:	mov	r0, #0
   12b00:	mov	r2, #5
   12b04:	mov	r6, #0
   12b08:	movt	r1, #1
   12b0c:	bl	11538 <dcgettext@plt>
   12b10:	mov	r2, r0
   12b14:	mov	r0, #0
   12b18:	mov	r1, r4
   12b1c:	bl	115ec <error@plt>
   12b20:	eor	r0, r6, #1
   12b24:	sub	sp, fp, #28
   12b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b2c:	movw	r0, #53600	; 0xd160
   12b30:	movw	r2, #47816	; 0xbac8
   12b34:	mov	r1, #0
   12b38:	movw	r7, #47802	; 0xbaba
   12b3c:	movt	r0, #2
   12b40:	movt	r2, #1
   12b44:	str	r1, [sp, #8]
   12b48:	movw	r1, #47743	; 0xba7f
   12b4c:	movt	r7, #1
   12b50:	movt	r1, #1
   12b54:	ldr	r3, [r0]
   12b58:	movw	r0, #53692	; 0xd1bc
   12b5c:	str	r2, [sp, #4]
   12b60:	movw	r2, #47788	; 0xbaac
   12b64:	str	r7, [sp]
   12b68:	movt	r0, #2
   12b6c:	movt	r2, #1
   12b70:	ldr	r0, [r0]
   12b74:	bl	19b0c <__assert_fail@plt+0x82bc>
   12b78:	mov	r0, #0
   12b7c:	bl	1167c <exit@plt>
   12b80:	mov	r0, #0
   12b84:	bl	11950 <__assert_fail@plt+0x100>
   12b88:	cmp	r0, r5
   12b8c:	bge	12c10 <__assert_fail@plt+0x13c0>
   12b90:	movw	r1, #47905	; 0xbb21
   12b94:	mov	r0, #0
   12b98:	mov	r2, #5
   12b9c:	movt	r1, #1
   12ba0:	bl	11538 <dcgettext@plt>
   12ba4:	mov	r6, r0
   12ba8:	add	r0, r4, r5, lsl #2
   12bac:	ldr	r0, [r0, #-4]
   12bb0:	bl	18b2c <__assert_fail@plt+0x72dc>
   12bb4:	mov	r3, r0
   12bb8:	mov	r0, #0
   12bbc:	mov	r1, #0
   12bc0:	mov	r2, r6
   12bc4:	bl	115ec <error@plt>
   12bc8:	mov	r0, #1
   12bcc:	bl	11950 <__assert_fail@plt+0x100>
   12bd0:	bl	116d0 <__errno_location@plt>
   12bd4:	movw	r1, #47930	; 0xbb3a
   12bd8:	ldr	r4, [r0]
   12bdc:	mov	r0, #0
   12be0:	mov	r2, #5
   12be4:	movt	r1, #1
   12be8:	bl	11538 <dcgettext@plt>
   12bec:	mov	r5, r0
   12bf0:	mov	r0, #4
   12bf4:	mov	r1, r7
   12bf8:	bl	18604 <__assert_fail@plt+0x6db4>
   12bfc:	mov	r3, r0
   12c00:	mov	r0, #1
   12c04:	mov	r1, r4
   12c08:	mov	r2, r5
   12c0c:	bl	115ec <error@plt>
   12c10:	movw	r1, #47889	; 0xbb11
   12c14:	movt	r1, #1
   12c18:	mov	r0, #0
   12c1c:	mov	r2, #5
   12c20:	bl	11538 <dcgettext@plt>
   12c24:	mov	r2, r0
   12c28:	mov	r0, #0
   12c2c:	mov	r1, #0
   12c30:	bl	115ec <error@plt>
   12c34:	mov	r0, #1
   12c38:	bl	11950 <__assert_fail@plt+0x100>
   12c3c:	movw	r1, #47829	; 0xbad5
   12c40:	movt	r1, #1
   12c44:	b	12c50 <__assert_fail@plt+0x1400>
   12c48:	movw	r1, #47871	; 0xbaff
   12c4c:	movt	r1, #1
   12c50:	mov	r0, #0
   12c54:	mov	r2, #5
   12c58:	bl	11538 <dcgettext@plt>
   12c5c:	mov	r2, r0
   12c60:	mov	r0, #1
   12c64:	mov	r1, #0
   12c68:	bl	115ec <error@plt>
   12c6c:	bl	116d0 <__errno_location@plt>
   12c70:	movw	r1, #47967	; 0xbb5f
   12c74:	ldr	r4, [r0]
   12c78:	mov	r0, #0
   12c7c:	mov	r2, #5
   12c80:	movt	r1, #1
   12c84:	bl	11538 <dcgettext@plt>
   12c88:	mov	r5, r0
   12c8c:	ldr	r0, [r7, #20]
   12c90:	bl	18b2c <__assert_fail@plt+0x72dc>
   12c94:	b	12bfc <__assert_fail@plt+0x13ac>
   12c98:	movw	r1, #53752	; 0xd1f8
   12c9c:	movt	r1, #2
   12ca0:	str	r0, [r1, #4]
   12ca4:	bx	lr
   12ca8:	movw	r1, #53752	; 0xd1f8
   12cac:	movt	r1, #2
   12cb0:	strb	r0, [r1]
   12cb4:	bx	lr
   12cb8:	push	{r4, r5, r6, sl, fp, lr}
   12cbc:	add	fp, sp, #16
   12cc0:	sub	sp, sp, #8
   12cc4:	movw	r0, #53692	; 0xd1bc
   12cc8:	movt	r0, #2
   12ccc:	ldr	r0, [r0]
   12cd0:	bl	1a550 <__assert_fail@plt+0x8d00>
   12cd4:	cmp	r0, #0
   12cd8:	beq	12d00 <__assert_fail@plt+0x14b0>
   12cdc:	movw	r5, #53752	; 0xd1f8
   12ce0:	movt	r5, #2
   12ce4:	ldrb	r0, [r5]
   12ce8:	cmp	r0, #0
   12cec:	beq	12d2c <__assert_fail@plt+0x14dc>
   12cf0:	bl	116d0 <__errno_location@plt>
   12cf4:	ldr	r0, [r0]
   12cf8:	cmp	r0, #32
   12cfc:	bne	12d2c <__assert_fail@plt+0x14dc>
   12d00:	movw	r0, #53688	; 0xd1b8
   12d04:	movt	r0, #2
   12d08:	ldr	r0, [r0]
   12d0c:	bl	1a550 <__assert_fail@plt+0x8d00>
   12d10:	cmp	r0, #0
   12d14:	subeq	sp, fp, #16
   12d18:	popeq	{r4, r5, r6, sl, fp, pc}
   12d1c:	movw	r0, #53604	; 0xd164
   12d20:	movt	r0, #2
   12d24:	ldr	r0, [r0]
   12d28:	bl	114fc <_exit@plt>
   12d2c:	movw	r1, #49455	; 0xc12f
   12d30:	mov	r0, #0
   12d34:	mov	r2, #5
   12d38:	movt	r1, #1
   12d3c:	bl	11538 <dcgettext@plt>
   12d40:	ldr	r6, [r5, #4]
   12d44:	mov	r4, r0
   12d48:	bl	116d0 <__errno_location@plt>
   12d4c:	ldr	r5, [r0]
   12d50:	cmp	r6, #0
   12d54:	bne	12d70 <__assert_fail@plt+0x1520>
   12d58:	movw	r2, #49471	; 0xc13f
   12d5c:	mov	r0, #0
   12d60:	mov	r1, r5
   12d64:	mov	r3, r4
   12d68:	movt	r2, #1
   12d6c:	b	12d90 <__assert_fail@plt+0x1540>
   12d70:	mov	r0, r6
   12d74:	bl	187a4 <__assert_fail@plt+0x6f54>
   12d78:	movw	r2, #49467	; 0xc13b
   12d7c:	mov	r3, r0
   12d80:	str	r4, [sp]
   12d84:	mov	r0, #0
   12d88:	mov	r1, r5
   12d8c:	movt	r2, #1
   12d90:	bl	115ec <error@plt>
   12d94:	movw	r0, #53604	; 0xd164
   12d98:	movt	r0, #2
   12d9c:	ldr	r0, [r0]
   12da0:	bl	114fc <_exit@plt>
   12da4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12da8:	add	fp, sp, #28
   12dac:	sub	sp, sp, #28
   12db0:	cmp	r1, #4096	; 0x1000
   12db4:	bcs	12dd0 <__assert_fail@plt+0x1580>
   12db8:	mov	sl, r0
   12dbc:	and	r0, r1, #516	; 0x204
   12dc0:	mov	r6, r1
   12dc4:	cmp	r0, #516	; 0x204
   12dc8:	tstne	r6, #18
   12dcc:	bne	12dec <__assert_fail@plt+0x159c>
   12dd0:	bl	116d0 <__errno_location@plt>
   12dd4:	mov	r1, #22
   12dd8:	mov	r4, #0
   12ddc:	str	r1, [r0]
   12de0:	mov	r0, r4
   12de4:	sub	sp, fp, #28
   12de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dec:	mov	r0, #1
   12df0:	mov	r1, #96	; 0x60
   12df4:	mov	r5, r2
   12df8:	bl	1a33c <__assert_fail@plt+0x8aec>
   12dfc:	cmp	r0, #0
   12e00:	beq	133e0 <__assert_fail@plt+0x1b90>
   12e04:	mov	r4, r0
   12e08:	mvn	r0, #99	; 0x63
   12e0c:	tst	r6, #2
   12e10:	mov	r1, r6
   12e14:	str	r0, [r4, #32]
   12e18:	bic	r0, r6, #516	; 0x204
   12e1c:	str	r5, [r4, #44]	; 0x2c
   12e20:	str	r4, [sp, #24]
   12e24:	orrne	r1, r0, #4
   12e28:	str	r1, [r4, #48]	; 0x30
   12e2c:	ldr	r0, [sl]
   12e30:	cmp	r0, #0
   12e34:	beq	12e98 <__assert_fail@plt+0x1648>
   12e38:	add	r7, sl, #4
   12e3c:	mov	r4, #0
   12e40:	bl	116ac <strlen@plt>
   12e44:	cmp	r0, r4
   12e48:	movhi	r4, r0
   12e4c:	ldr	r0, [r7], #4
   12e50:	cmp	r0, #0
   12e54:	bne	12e40 <__assert_fail@plt+0x15f0>
   12e58:	add	r0, r4, #1
   12e5c:	ldr	r4, [sp, #24]
   12e60:	cmp	r0, #4096	; 0x1000
   12e64:	movls	r0, #4096	; 0x1000
   12e68:	ldr	r1, [r4, #36]	; 0x24
   12e6c:	add	r0, r0, #256	; 0x100
   12e70:	adds	r1, r0, r1
   12e74:	bcc	12eac <__assert_fail@plt+0x165c>
   12e78:	ldr	r0, [r4, #24]
   12e7c:	bl	1a9d8 <__assert_fail@plt+0x9188>
   12e80:	mov	r0, #0
   12e84:	str	r0, [r4, #24]
   12e88:	bl	116d0 <__errno_location@plt>
   12e8c:	mov	r1, #36	; 0x24
   12e90:	str	r1, [r0]
   12e94:	b	133d8 <__assert_fail@plt+0x1b88>
   12e98:	mov	r0, #4096	; 0x1000
   12e9c:	ldr	r1, [r4, #36]	; 0x24
   12ea0:	add	r0, r0, #256	; 0x100
   12ea4:	adds	r1, r0, r1
   12ea8:	bcs	12e78 <__assert_fail@plt+0x1628>
   12eac:	str	r1, [r4, #36]	; 0x24
   12eb0:	ldr	r0, [r4, #24]
   12eb4:	bl	1a3c0 <__assert_fail@plt+0x8b70>
   12eb8:	cmp	r0, #0
   12ebc:	beq	130b8 <__assert_fail@plt+0x1868>
   12ec0:	str	r0, [r4, #24]
   12ec4:	ldr	r0, [sl]
   12ec8:	cmp	r0, #0
   12ecc:	beq	130cc <__assert_fail@plt+0x187c>
   12ed0:	mov	r0, #176	; 0xb0
   12ed4:	bl	1a390 <__assert_fail@plt+0x8b40>
   12ed8:	cmp	r0, #0
   12edc:	beq	133d0 <__assert_fail@plt+0x1b80>
   12ee0:	ldr	r1, [r4, #24]
   12ee4:	mov	r7, r0
   12ee8:	mov	r0, #0
   12eec:	mov	r2, #196608	; 0x30000
   12ef0:	strb	r0, [r7, #168]	; 0xa8
   12ef4:	str	r2, [r7, #58]	; 0x3a
   12ef8:	mvn	r2, #0
   12efc:	str	r4, [r7, #44]	; 0x2c
   12f00:	str	r2, [r7, #48]	; 0x30
   12f04:	str	r0, [r7, #52]	; 0x34
   12f08:	str	r0, [r7, #12]
   12f0c:	str	r0, [r7, #16]
   12f10:	str	r0, [r7, #20]
   12f14:	str	r1, [r7, #28]
   12f18:	str	r0, [r7, #32]
   12f1c:	cmp	r5, #0
   12f20:	beq	130d8 <__assert_fail@plt+0x1888>
   12f24:	ldrb	r0, [r4, #49]	; 0x31
   12f28:	ubfx	r0, r0, #2, #1
   12f2c:	ldr	r4, [sl]
   12f30:	str	r0, [sp, #12]
   12f34:	cmp	r4, #0
   12f38:	beq	130ec <__assert_fail@plt+0x189c>
   12f3c:	tst	r6, #2048	; 0x800
   12f40:	str	r5, [sp, #16]
   12f44:	str	r7, [sp, #20]
   12f48:	bne	13110 <__assert_fail@plt+0x18c0>
   12f4c:	mov	r0, #0
   12f50:	mov	r8, #0
   12f54:	mov	r5, #0
   12f58:	str	r0, [sp, #8]
   12f5c:	b	12fb0 <__assert_fail@plt+0x1760>
   12f60:	cmp	r8, #0
   12f64:	str	r4, [r7, #8]
   12f68:	beq	12f8c <__assert_fail@plt+0x173c>
   12f6c:	ldr	r0, [sp, #8]
   12f70:	str	r7, [sp, #8]
   12f74:	str	r7, [r0, #8]
   12f78:	ldr	r4, [sl, #4]!
   12f7c:	add	r5, r5, #1
   12f80:	cmp	r4, #0
   12f84:	bne	12fb0 <__assert_fail@plt+0x1760>
   12f88:	b	13264 <__assert_fail@plt+0x1a14>
   12f8c:	mov	r0, r7
   12f90:	str	r7, [sp, #8]
   12f94:	b	12f9c <__assert_fail@plt+0x174c>
   12f98:	str	r8, [r7, #8]
   12f9c:	mov	r8, r7
   12fa0:	ldr	r4, [sl, #4]!
   12fa4:	add	r5, r5, #1
   12fa8:	cmp	r4, #0
   12fac:	beq	13264 <__assert_fail@plt+0x1a14>
   12fb0:	mov	r0, r4
   12fb4:	bl	116ac <strlen@plt>
   12fb8:	mov	r9, r0
   12fbc:	cmp	r0, #3
   12fc0:	bcc	12ff0 <__assert_fail@plt+0x17a0>
   12fc4:	add	r0, r9, r4
   12fc8:	ldrb	r0, [r0, #-1]
   12fcc:	cmp	r0, #47	; 0x2f
   12fd0:	bne	12ff0 <__assert_fail@plt+0x17a0>
   12fd4:	sub	r0, r4, #2
   12fd8:	ldrb	r1, [r0, r9]
   12fdc:	cmp	r1, #47	; 0x2f
   12fe0:	bne	12ff0 <__assert_fail@plt+0x17a0>
   12fe4:	sub	r9, r9, #1
   12fe8:	cmp	r9, #1
   12fec:	bhi	12fd8 <__assert_fail@plt+0x1788>
   12ff0:	add	r0, r9, #176	; 0xb0
   12ff4:	bic	r0, r0, #7
   12ff8:	bl	1a390 <__assert_fail@plt+0x8b40>
   12ffc:	cmp	r0, #0
   13000:	beq	13254 <__assert_fail@plt+0x1a04>
   13004:	add	r6, r0, #168	; 0xa8
   13008:	mov	r7, r0
   1300c:	mov	r1, r4
   13010:	mov	r2, r9
   13014:	mov	r0, r6
   13018:	bl	11508 <memcpy@plt>
   1301c:	ldr	r0, [sp, #24]
   13020:	ldr	r1, [sp, #20]
   13024:	mov	r4, #0
   13028:	cmp	r8, #0
   1302c:	strb	r4, [r6, r9]
   13030:	ldr	r2, [r0, #24]
   13034:	str	r1, [r7, #4]
   13038:	add	r1, r7, #44	; 0x2c
   1303c:	stm	r1, {r0, r4, r9}
   13040:	mov	r1, #196608	; 0x30000
   13044:	str	r1, [r7, #58]	; 0x3a
   13048:	str	r4, [r7, #12]
   1304c:	str	r4, [r7, #16]
   13050:	str	r4, [r7, #20]
   13054:	str	r6, [r7, #24]
   13058:	mov	r1, r8
   1305c:	movwne	r1, #1
   13060:	str	r2, [r7, #28]
   13064:	ldr	r2, [sp, #12]
   13068:	str	r4, [r7, #32]
   1306c:	tst	r2, r1
   13070:	beq	13098 <__assert_fail@plt+0x1848>
   13074:	mov	r0, #2
   13078:	str	r0, [r7, #112]	; 0x70
   1307c:	mov	r0, #11
   13080:	str	r4, [r7, #116]	; 0x74
   13084:	strh	r0, [r7, #56]	; 0x38
   13088:	ldr	r0, [sp, #16]
   1308c:	cmp	r0, #0
   13090:	bne	12f98 <__assert_fail@plt+0x1748>
   13094:	b	12f60 <__assert_fail@plt+0x1710>
   13098:	mov	r1, r7
   1309c:	mov	r2, #0
   130a0:	bl	13454 <__assert_fail@plt+0x1c04>
   130a4:	strh	r0, [r7, #56]	; 0x38
   130a8:	ldr	r0, [sp, #16]
   130ac:	cmp	r0, #0
   130b0:	bne	12f98 <__assert_fail@plt+0x1748>
   130b4:	b	12f60 <__assert_fail@plt+0x1710>
   130b8:	ldr	r0, [r4, #24]
   130bc:	bl	1a9d8 <__assert_fail@plt+0x9188>
   130c0:	mov	r0, #0
   130c4:	str	r0, [r4, #24]
   130c8:	b	133d8 <__assert_fail@plt+0x1b88>
   130cc:	mov	r7, #0
   130d0:	cmp	r5, #0
   130d4:	bne	12f24 <__assert_fail@plt+0x16d4>
   130d8:	mov	r0, #1
   130dc:	ldr	r4, [sl]
   130e0:	str	r0, [sp, #12]
   130e4:	cmp	r4, #0
   130e8:	bne	12f3c <__assert_fail@plt+0x16ec>
   130ec:	ldr	r4, [sp, #24]
   130f0:	mov	r8, #0
   130f4:	mov	r0, #176	; 0xb0
   130f8:	bl	1a390 <__assert_fail@plt+0x8b40>
   130fc:	cmp	r0, #0
   13100:	bne	132bc <__assert_fail@plt+0x1a6c>
   13104:	mov	r0, #0
   13108:	str	r0, [r4]
   1310c:	b	1338c <__assert_fail@plt+0x1b3c>
   13110:	add	r0, sl, #4
   13114:	mov	r9, #0
   13118:	mov	r8, #0
   1311c:	mov	r5, #0
   13120:	str	r0, [sp, #8]
   13124:	ldr	r0, [sp, #12]
   13128:	eor	r0, r0, #1
   1312c:	str	r0, [sp, #12]
   13130:	mov	r0, #0
   13134:	str	r0, [sp, #4]
   13138:	b	1316c <__assert_fail@plt+0x191c>
   1313c:	cmp	r8, #0
   13140:	str	r9, [r5, #8]
   13144:	beq	13248 <__assert_fail@plt+0x19f8>
   13148:	ldr	r0, [sp, #4]
   1314c:	str	r5, [sp, #4]
   13150:	str	r5, [r0, #8]
   13154:	ldr	r0, [sp, #8]
   13158:	mov	r5, sl
   1315c:	add	r5, sl, #1
   13160:	ldr	r4, [r0, sl, lsl #2]
   13164:	cmp	r4, #0
   13168:	beq	13264 <__assert_fail@plt+0x1a14>
   1316c:	mov	r0, r4
   13170:	mov	sl, r5
   13174:	bl	116ac <strlen@plt>
   13178:	mov	r7, r0
   1317c:	add	r0, r0, #176	; 0xb0
   13180:	bic	r0, r0, #7
   13184:	bl	1a390 <__assert_fail@plt+0x8b40>
   13188:	cmp	r0, #0
   1318c:	beq	13254 <__assert_fail@plt+0x1a04>
   13190:	add	r6, r0, #168	; 0xa8
   13194:	mov	r5, r0
   13198:	mov	r1, r4
   1319c:	mov	r2, r7
   131a0:	mov	r0, r6
   131a4:	bl	11508 <memcpy@plt>
   131a8:	ldr	r0, [sp, #24]
   131ac:	ldr	r1, [sp, #20]
   131b0:	strb	r9, [r6, r7]
   131b4:	ldr	r2, [r0, #24]
   131b8:	str	r1, [r5, #4]
   131bc:	mov	r1, #196608	; 0x30000
   131c0:	str	r0, [r5, #44]	; 0x2c
   131c4:	str	r9, [r5, #48]	; 0x30
   131c8:	str	r7, [r5, #52]	; 0x34
   131cc:	str	r1, [r5, #58]	; 0x3a
   131d0:	str	r9, [r5, #12]
   131d4:	str	r9, [r5, #16]
   131d8:	str	r9, [r5, #20]
   131dc:	str	r6, [r5, #24]
   131e0:	clz	r1, r8
   131e4:	lsr	r1, r1, #5
   131e8:	str	r2, [r5, #28]
   131ec:	ldr	r2, [sp, #12]
   131f0:	str	r9, [r5, #32]
   131f4:	orrs	r1, r2, r1
   131f8:	bne	13220 <__assert_fail@plt+0x19d0>
   131fc:	mov	r0, #2
   13200:	str	r0, [r5, #112]	; 0x70
   13204:	str	r9, [r5, #116]	; 0x74
   13208:	mov	r0, #11
   1320c:	strh	r0, [r5, #56]	; 0x38
   13210:	ldr	r0, [sp, #16]
   13214:	cmp	r0, #0
   13218:	bne	1323c <__assert_fail@plt+0x19ec>
   1321c:	b	1313c <__assert_fail@plt+0x18ec>
   13220:	mov	r1, r5
   13224:	mov	r2, #0
   13228:	bl	13454 <__assert_fail@plt+0x1c04>
   1322c:	strh	r0, [r5, #56]	; 0x38
   13230:	ldr	r0, [sp, #16]
   13234:	cmp	r0, #0
   13238:	beq	1313c <__assert_fail@plt+0x18ec>
   1323c:	str	r8, [r5, #8]
   13240:	mov	r8, r5
   13244:	b	13154 <__assert_fail@plt+0x1904>
   13248:	mov	r0, r5
   1324c:	str	r5, [sp, #4]
   13250:	b	13240 <__assert_fail@plt+0x19f0>
   13254:	ldr	r7, [sp, #20]
   13258:	cmp	r8, #0
   1325c:	bne	133ac <__assert_fail@plt+0x1b5c>
   13260:	b	133c4 <__assert_fail@plt+0x1b74>
   13264:	ldr	r0, [sp, #16]
   13268:	ldr	r7, [sp, #20]
   1326c:	cmp	r0, #0
   13270:	beq	132a8 <__assert_fail@plt+0x1a58>
   13274:	ldr	r4, [sp, #24]
   13278:	cmp	r5, #2
   1327c:	bcc	132ac <__assert_fail@plt+0x1a5c>
   13280:	mov	r0, r4
   13284:	mov	r1, r8
   13288:	mov	r2, r5
   1328c:	bl	135ec <__assert_fail@plt+0x1d9c>
   13290:	mov	r8, r0
   13294:	mov	r0, #176	; 0xb0
   13298:	bl	1a390 <__assert_fail@plt+0x8b40>
   1329c:	cmp	r0, #0
   132a0:	bne	132bc <__assert_fail@plt+0x1a6c>
   132a4:	b	13104 <__assert_fail@plt+0x18b4>
   132a8:	ldr	r4, [sp, #24]
   132ac:	mov	r0, #176	; 0xb0
   132b0:	bl	1a390 <__assert_fail@plt+0x8b40>
   132b4:	cmp	r0, #0
   132b8:	beq	13104 <__assert_fail@plt+0x18b4>
   132bc:	ldr	r2, [r4, #24]
   132c0:	mov	r1, #0
   132c4:	mov	r3, #196608	; 0x30000
   132c8:	str	r0, [r4]
   132cc:	str	r1, [r0, #52]	; 0x34
   132d0:	strb	r1, [r0, #168]	; 0xa8
   132d4:	str	r4, [r0, #44]	; 0x2c
   132d8:	str	r3, [r0, #58]	; 0x3a
   132dc:	str	r2, [r0, #28]
   132e0:	mov	r2, #9
   132e4:	str	r1, [r0, #32]
   132e8:	strh	r2, [r0, #56]	; 0x38
   132ec:	str	r8, [r0, #8]
   132f0:	str	r1, [r0, #12]
   132f4:	str	r1, [r0, #16]
   132f8:	str	r1, [r0, #20]
   132fc:	mov	r1, #1
   13300:	str	r1, [r0, #48]	; 0x30
   13304:	ldrh	r0, [r4, #48]	; 0x30
   13308:	movw	r1, #258	; 0x102
   1330c:	tst	r0, r1
   13310:	beq	1334c <__assert_fail@plt+0x1afc>
   13314:	movw	r0, #43480	; 0xa9d8
   13318:	movw	r2, #21404	; 0x539c
   1331c:	movw	r3, #21436	; 0x53bc
   13320:	mov	r1, #0
   13324:	movt	r0, #1
   13328:	movt	r2, #1
   1332c:	movt	r3, #1
   13330:	str	r0, [sp]
   13334:	mov	r0, #31
   13338:	bl	15aac <__assert_fail@plt+0x425c>
   1333c:	cmp	r0, #0
   13340:	str	r0, [r4, #56]	; 0x38
   13344:	bne	13364 <__assert_fail@plt+0x1b14>
   13348:	b	1338c <__assert_fail@plt+0x1b3c>
   1334c:	mov	r0, #32
   13350:	bl	1a390 <__assert_fail@plt+0x8b40>
   13354:	cmp	r0, #0
   13358:	str	r0, [r4, #56]	; 0x38
   1335c:	beq	1338c <__assert_fail@plt+0x1b3c>
   13360:	bl	1a5d4 <__assert_fail@plt+0x8d84>
   13364:	ldr	r4, [sp, #24]
   13368:	ldr	r0, [r4, #48]	; 0x30
   1336c:	tst	r0, #516	; 0x204
   13370:	beq	133f0 <__assert_fail@plt+0x1ba0>
   13374:	add	r0, r4, #60	; 0x3c
   13378:	mvn	r1, #0
   1337c:	bl	16a08 <__assert_fail@plt+0x51b8>
   13380:	mov	r0, r4
   13384:	sub	sp, fp, #28
   13388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1338c:	cmp	r8, #0
   13390:	bne	133ac <__assert_fail@plt+0x1b5c>
   13394:	b	133c4 <__assert_fail@plt+0x1b74>
   13398:	mov	r0, r8
   1339c:	bl	1a9d8 <__assert_fail@plt+0x9188>
   133a0:	cmp	r4, #0
   133a4:	mov	r8, r4
   133a8:	beq	133c4 <__assert_fail@plt+0x1b74>
   133ac:	ldrd	r4, [r8, #8]
   133b0:	cmp	r5, #0
   133b4:	beq	13398 <__assert_fail@plt+0x1b48>
   133b8:	mov	r0, r5
   133bc:	bl	11838 <closedir@plt>
   133c0:	b	13398 <__assert_fail@plt+0x1b48>
   133c4:	mov	r0, r7
   133c8:	bl	1a9d8 <__assert_fail@plt+0x9188>
   133cc:	ldr	r4, [sp, #24]
   133d0:	ldr	r0, [r4, #24]
   133d4:	bl	1a9d8 <__assert_fail@plt+0x9188>
   133d8:	mov	r0, r4
   133dc:	bl	1a9d8 <__assert_fail@plt+0x9188>
   133e0:	mov	r4, #0
   133e4:	mov	r0, r4
   133e8:	sub	sp, fp, #28
   133ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133f0:	mov	r1, #32768	; 0x8000
   133f4:	tst	r0, #512	; 0x200
   133f8:	and	r1, r1, r0, lsl #11
   133fc:	orr	r1, r1, #18688	; 0x4900
   13400:	orr	r2, r1, #524288	; 0x80000
   13404:	bne	13428 <__assert_fail@plt+0x1bd8>
   13408:	movw	r0, #49475	; 0xc143
   1340c:	mov	r1, r2
   13410:	movt	r0, #1
   13414:	bl	1a940 <__assert_fail@plt+0x90f0>
   13418:	cmn	r0, #1
   1341c:	str	r0, [r4, #28]
   13420:	bgt	13374 <__assert_fail@plt+0x1b24>
   13424:	b	13444 <__assert_fail@plt+0x1bf4>
   13428:	ldr	r0, [r4, #32]
   1342c:	movw	r1, #49475	; 0xc143
   13430:	movt	r1, #1
   13434:	bl	16ad0 <__assert_fail@plt+0x5280>
   13438:	cmn	r0, #1
   1343c:	str	r0, [r4, #28]
   13440:	bgt	13374 <__assert_fail@plt+0x1b24>
   13444:	ldr	r0, [r4, #48]	; 0x30
   13448:	orr	r0, r0, #4
   1344c:	str	r0, [r4, #48]	; 0x30
   13450:	b	13374 <__assert_fail@plt+0x1b24>
   13454:	push	{r4, r5, r6, sl, fp, lr}
   13458:	add	fp, sp, #16
   1345c:	sub	sp, sp, #8
   13460:	mov	r4, r1
   13464:	ldr	r1, [r0, #48]	; 0x30
   13468:	ldr	r3, [r4, #48]	; 0x30
   1346c:	add	r5, r4, #64	; 0x40
   13470:	cmp	r3, #0
   13474:	andeq	r3, r1, #1
   13478:	orreq	r2, r3, r2
   1347c:	cmp	r2, #0
   13480:	andseq	r1, r1, #2
   13484:	beq	134e0 <__assert_fail@plt+0x1c90>
   13488:	ldr	r1, [r4, #24]
   1348c:	mov	r0, #3
   13490:	mov	r2, r5
   13494:	bl	117fc <__xstat64@plt>
   13498:	cmp	r0, #0
   1349c:	beq	13560 <__assert_fail@plt+0x1d10>
   134a0:	bl	116d0 <__errno_location@plt>
   134a4:	mov	r6, r0
   134a8:	ldr	r0, [r0]
   134ac:	cmp	r0, #2
   134b0:	bne	13510 <__assert_fail@plt+0x1cc0>
   134b4:	ldr	r1, [r4, #24]
   134b8:	mov	r0, #3
   134bc:	mov	r2, r5
   134c0:	bl	1182c <__lxstat64@plt>
   134c4:	cmp	r0, #0
   134c8:	bne	1350c <__assert_fail@plt+0x1cbc>
   134cc:	mov	r0, #0
   134d0:	str	r0, [r6]
   134d4:	mov	r0, #13
   134d8:	sub	sp, fp, #16
   134dc:	pop	{r4, r5, r6, sl, fp, pc}
   134e0:	ldr	r1, [r0, #32]
   134e4:	ldr	r2, [r4, #24]
   134e8:	mov	r0, #256	; 0x100
   134ec:	mov	r3, r5
   134f0:	str	r0, [sp]
   134f4:	mov	r0, #3
   134f8:	bl	11580 <__fxstatat64@plt>
   134fc:	cmp	r0, #0
   13500:	beq	13560 <__assert_fail@plt+0x1d10>
   13504:	bl	116d0 <__errno_location@plt>
   13508:	mov	r6, r0
   1350c:	ldr	r0, [r6]
   13510:	vmov.i32	q8, #0	; 0x00000000
   13514:	add	r1, r5, #80	; 0x50
   13518:	str	r0, [r4, #32]
   1351c:	mov	r0, #0
   13520:	str	r0, [r5, #96]	; 0x60
   13524:	vst1.64	{d16-d17}, [r1]
   13528:	add	r1, r5, #64	; 0x40
   1352c:	vst1.64	{d16-d17}, [r1]
   13530:	add	r1, r5, #48	; 0x30
   13534:	vst1.64	{d16-d17}, [r1]
   13538:	add	r1, r5, #32
   1353c:	vst1.64	{d16-d17}, [r1]
   13540:	add	r1, r5, #16
   13544:	vst1.64	{d16-d17}, [r1]
   13548:	mov	r1, #100	; 0x64
   1354c:	vst1.64	{d16-d17}, [r5], r1
   13550:	str	r0, [r5]
   13554:	mov	r0, #10
   13558:	sub	sp, fp, #16
   1355c:	pop	{r4, r5, r6, sl, fp, pc}
   13560:	ldr	r0, [r4, #80]	; 0x50
   13564:	and	r0, r0, #61440	; 0xf000
   13568:	cmp	r0, #40960	; 0xa000
   1356c:	beq	135d4 <__assert_fail@plt+0x1d84>
   13570:	cmp	r0, #32768	; 0x8000
   13574:	beq	135c8 <__assert_fail@plt+0x1d78>
   13578:	cmp	r0, #16384	; 0x4000
   1357c:	bne	135e0 <__assert_fail@plt+0x1d90>
   13580:	ldrb	r1, [r4, #168]	; 0xa8
   13584:	mov	r0, #1
   13588:	cmp	r1, #46	; 0x2e
   1358c:	bne	135e4 <__assert_fail@plt+0x1d94>
   13590:	ldrb	r1, [r4, #169]	; 0xa9
   13594:	cmp	r1, #0
   13598:	beq	135b0 <__assert_fail@plt+0x1d60>
   1359c:	cmp	r1, #46	; 0x2e
   135a0:	bne	135e4 <__assert_fail@plt+0x1d94>
   135a4:	ldrb	r1, [r4, #170]	; 0xaa
   135a8:	cmp	r1, #0
   135ac:	bne	135e4 <__assert_fail@plt+0x1d94>
   135b0:	ldr	r1, [r4, #48]	; 0x30
   135b4:	mov	r0, #5
   135b8:	cmp	r1, #0
   135bc:	movweq	r0, #1
   135c0:	sub	sp, fp, #16
   135c4:	pop	{r4, r5, r6, sl, fp, pc}
   135c8:	mov	r0, #8
   135cc:	sub	sp, fp, #16
   135d0:	pop	{r4, r5, r6, sl, fp, pc}
   135d4:	mov	r0, #12
   135d8:	sub	sp, fp, #16
   135dc:	pop	{r4, r5, r6, sl, fp, pc}
   135e0:	mov	r0, #3
   135e4:	sub	sp, fp, #16
   135e8:	pop	{r4, r5, r6, sl, fp, pc}
   135ec:	push	{r4, r5, r6, r7, fp, lr}
   135f0:	add	fp, sp, #16
   135f4:	mov	r6, r0
   135f8:	ldr	r7, [r0, #44]	; 0x2c
   135fc:	ldr	r0, [r0, #40]	; 0x28
   13600:	mov	r5, r2
   13604:	mov	r4, r1
   13608:	cmp	r0, r2
   1360c:	bcs	13644 <__assert_fail@plt+0x1df4>
   13610:	add	r1, r5, #40	; 0x28
   13614:	cmn	r1, #-1073741823	; 0xc0000001
   13618:	str	r1, [r6, #40]	; 0x28
   1361c:	bhi	136e8 <__assert_fail@plt+0x1e98>
   13620:	ldr	r0, [r6, #8]
   13624:	lsl	r1, r1, #2
   13628:	bl	1a3c0 <__assert_fail@plt+0x8b70>
   1362c:	cmp	r0, #0
   13630:	beq	136e8 <__assert_fail@plt+0x1e98>
   13634:	str	r0, [r6, #8]
   13638:	cmp	r4, #0
   1363c:	bne	13650 <__assert_fail@plt+0x1e00>
   13640:	b	13664 <__assert_fail@plt+0x1e14>
   13644:	ldr	r0, [r6, #8]
   13648:	cmp	r4, #0
   1364c:	beq	13664 <__assert_fail@plt+0x1e14>
   13650:	str	r4, [r0], #4
   13654:	ldr	r4, [r4, #8]
   13658:	cmp	r4, #0
   1365c:	bne	13650 <__assert_fail@plt+0x1e00>
   13660:	ldr	r0, [r6, #8]
   13664:	mov	r1, r5
   13668:	mov	r2, #4
   1366c:	mov	r3, r7
   13670:	bl	117c0 <qsort@plt>
   13674:	ldr	r0, [r6, #8]
   13678:	cmp	r5, #1
   1367c:	ldr	r4, [r0]
   13680:	mov	r1, r4
   13684:	beq	1370c <__assert_fail@plt+0x1ebc>
   13688:	mov	r2, r0
   1368c:	ldr	r1, [r2, #4]!
   13690:	str	r1, [r4, #8]
   13694:	subs	r1, r5, #2
   13698:	beq	13704 <__assert_fail@plt+0x1eb4>
   1369c:	tst	r1, #1
   136a0:	beq	136b8 <__assert_fail@plt+0x1e68>
   136a4:	ldr	r1, [r0, #8]!
   136a8:	ldr	r2, [r0, #-4]
   136ac:	str	r1, [r2, #8]
   136b0:	sub	r1, r5, #3
   136b4:	mov	r2, r0
   136b8:	cmp	r5, #3
   136bc:	beq	13708 <__assert_fail@plt+0x1eb8>
   136c0:	mov	r0, r2
   136c4:	ldm	r2, {r3, r7}
   136c8:	subs	r1, r1, #2
   136cc:	str	r7, [r3, #8]
   136d0:	ldr	r3, [r0, #8]!
   136d4:	ldr	r2, [r2, #4]
   136d8:	str	r3, [r2, #8]
   136dc:	mov	r2, r0
   136e0:	bne	136c4 <__assert_fail@plt+0x1e74>
   136e4:	b	13708 <__assert_fail@plt+0x1eb8>
   136e8:	ldr	r0, [r6, #8]
   136ec:	bl	1a9d8 <__assert_fail@plt+0x9188>
   136f0:	mov	r0, #0
   136f4:	str	r0, [r6, #40]	; 0x28
   136f8:	str	r0, [r6, #8]
   136fc:	mov	r0, r4
   13700:	pop	{r4, r5, r6, r7, fp, pc}
   13704:	mov	r0, r2
   13708:	ldr	r1, [r0]
   1370c:	mov	r0, #0
   13710:	str	r0, [r1, #8]
   13714:	mov	r0, r4
   13718:	pop	{r4, r5, r6, r7, fp, pc}
   1371c:	push	{r4, r5, r6, r7, fp, lr}
   13720:	add	fp, sp, #16
   13724:	mov	r4, r0
   13728:	ldr	r0, [r0]
   1372c:	cmp	r0, #0
   13730:	beq	13770 <__assert_fail@plt+0x1f20>
   13734:	ldr	r1, [r0, #48]	; 0x30
   13738:	cmp	r1, #0
   1373c:	bmi	13764 <__assert_fail@plt+0x1f14>
   13740:	ldr	r5, [r0, #8]
   13744:	cmp	r5, #0
   13748:	ldreq	r5, [r0, #4]
   1374c:	bl	1a9d8 <__assert_fail@plt+0x9188>
   13750:	ldr	r0, [r5, #48]	; 0x30
   13754:	cmn	r0, #1
   13758:	mov	r0, r5
   1375c:	bgt	13740 <__assert_fail@plt+0x1ef0>
   13760:	b	13768 <__assert_fail@plt+0x1f18>
   13764:	mov	r5, r0
   13768:	mov	r0, r5
   1376c:	bl	1a9d8 <__assert_fail@plt+0x9188>
   13770:	ldr	r5, [r4, #4]
   13774:	cmp	r5, #0
   13778:	bne	13794 <__assert_fail@plt+0x1f44>
   1377c:	b	137ac <__assert_fail@plt+0x1f5c>
   13780:	mov	r0, r5
   13784:	bl	1a9d8 <__assert_fail@plt+0x9188>
   13788:	cmp	r6, #0
   1378c:	mov	r5, r6
   13790:	beq	137ac <__assert_fail@plt+0x1f5c>
   13794:	ldrd	r6, [r5, #8]
   13798:	cmp	r7, #0
   1379c:	beq	13780 <__assert_fail@plt+0x1f30>
   137a0:	mov	r0, r7
   137a4:	bl	11838 <closedir@plt>
   137a8:	b	13780 <__assert_fail@plt+0x1f30>
   137ac:	ldr	r0, [r4, #8]
   137b0:	bl	1a9d8 <__assert_fail@plt+0x9188>
   137b4:	ldr	r0, [r4, #24]
   137b8:	bl	1a9d8 <__assert_fail@plt+0x9188>
   137bc:	ldr	r0, [r4, #48]	; 0x30
   137c0:	tst	r0, #512	; 0x200
   137c4:	bne	13800 <__assert_fail@plt+0x1fb0>
   137c8:	mov	r6, #0
   137cc:	tst	r0, #4
   137d0:	bne	13824 <__assert_fail@plt+0x1fd4>
   137d4:	ldr	r0, [r4, #28]
   137d8:	bl	117b4 <fchdir@plt>
   137dc:	cmp	r0, #0
   137e0:	beq	138cc <__assert_fail@plt+0x207c>
   137e4:	bl	116d0 <__errno_location@plt>
   137e8:	ldr	r6, [r0]
   137ec:	ldr	r0, [r4, #28]
   137f0:	bl	11820 <close@plt>
   137f4:	cmp	r6, #0
   137f8:	beq	13814 <__assert_fail@plt+0x1fc4>
   137fc:	b	13824 <__assert_fail@plt+0x1fd4>
   13800:	ldr	r0, [r4, #32]
   13804:	mov	r6, #0
   13808:	cmp	r0, #0
   1380c:	bmi	13824 <__assert_fail@plt+0x1fd4>
   13810:	bl	11820 <close@plt>
   13814:	cmp	r0, #0
   13818:	beq	13824 <__assert_fail@plt+0x1fd4>
   1381c:	bl	116d0 <__errno_location@plt>
   13820:	ldr	r6, [r0]
   13824:	add	r5, r4, #60	; 0x3c
   13828:	mov	r0, r5
   1382c:	bl	16a2c <__assert_fail@plt+0x51dc>
   13830:	cmp	r0, #0
   13834:	bne	1385c <__assert_fail@plt+0x200c>
   13838:	mov	r0, r5
   1383c:	bl	16a80 <__assert_fail@plt+0x5230>
   13840:	cmp	r0, #0
   13844:	bmi	13828 <__assert_fail@plt+0x1fd8>
   13848:	bl	11820 <close@plt>
   1384c:	mov	r0, r5
   13850:	bl	16a2c <__assert_fail@plt+0x51dc>
   13854:	cmp	r0, #0
   13858:	beq	13838 <__assert_fail@plt+0x1fe8>
   1385c:	ldr	r0, [r4, #52]	; 0x34
   13860:	cmp	r0, #0
   13864:	beq	1386c <__assert_fail@plt+0x201c>
   13868:	bl	15dc8 <__assert_fail@plt+0x4578>
   1386c:	ldrh	r0, [r4, #48]	; 0x30
   13870:	movw	r1, #258	; 0x102
   13874:	tst	r0, r1
   13878:	beq	138ac <__assert_fail@plt+0x205c>
   1387c:	ldr	r0, [r4, #56]	; 0x38
   13880:	cmp	r0, #0
   13884:	beq	1388c <__assert_fail@plt+0x203c>
   13888:	bl	15dc8 <__assert_fail@plt+0x4578>
   1388c:	mov	r0, r4
   13890:	bl	1a9d8 <__assert_fail@plt+0x9188>
   13894:	cmp	r6, #0
   13898:	beq	138c4 <__assert_fail@plt+0x2074>
   1389c:	bl	116d0 <__errno_location@plt>
   138a0:	str	r6, [r0]
   138a4:	mvn	r0, #0
   138a8:	pop	{r4, r5, r6, r7, fp, pc}
   138ac:	ldr	r0, [r4, #56]	; 0x38
   138b0:	bl	1a9d8 <__assert_fail@plt+0x9188>
   138b4:	mov	r0, r4
   138b8:	bl	1a9d8 <__assert_fail@plt+0x9188>
   138bc:	cmp	r6, #0
   138c0:	bne	1389c <__assert_fail@plt+0x204c>
   138c4:	mov	r0, #0
   138c8:	pop	{r4, r5, r6, r7, fp, pc}
   138cc:	mov	r6, #0
   138d0:	ldr	r0, [r4, #28]
   138d4:	bl	11820 <close@plt>
   138d8:	cmp	r6, #0
   138dc:	beq	13814 <__assert_fail@plt+0x1fc4>
   138e0:	b	13824 <__assert_fail@plt+0x1fd4>
   138e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   138e8:	add	fp, sp, #24
   138ec:	sub	sp, sp, #8
   138f0:	ldr	r6, [r0]
   138f4:	mov	r5, #0
   138f8:	cmp	r6, #0
   138fc:	beq	140a4 <__assert_fail@plt+0x2854>
   13900:	mov	r4, r0
   13904:	ldr	r0, [r0, #48]	; 0x30
   13908:	tst	r0, #8192	; 0x2000
   1390c:	bne	140a4 <__assert_fail@plt+0x2854>
   13910:	ldrh	r1, [r6, #60]	; 0x3c
   13914:	mov	r2, #3
   13918:	strh	r2, [r6, #60]	; 0x3c
   1391c:	cmp	r1, #1
   13920:	beq	139c0 <__assert_fail@plt+0x2170>
   13924:	cmp	r1, #2
   13928:	bne	139e4 <__assert_fail@plt+0x2194>
   1392c:	ldrh	r2, [r6, #56]	; 0x38
   13930:	bic	r3, r2, #1
   13934:	cmp	r3, #12
   13938:	bne	139e8 <__assert_fail@plt+0x2198>
   1393c:	mov	r0, r4
   13940:	mov	r1, r6
   13944:	mov	r2, #1
   13948:	bl	13454 <__assert_fail@plt+0x1c04>
   1394c:	cmp	r0, #1
   13950:	strh	r0, [r6, #56]	; 0x38
   13954:	bne	13fb8 <__assert_fail@plt+0x2768>
   13958:	ldr	r0, [r4, #48]	; 0x30
   1395c:	tst	r0, #4
   13960:	bne	13fb8 <__assert_fail@plt+0x2768>
   13964:	mov	r1, #32768	; 0x8000
   13968:	tst	r0, #512	; 0x200
   1396c:	and	r1, r1, r0, lsl #11
   13970:	orr	r1, r1, #18688	; 0x4900
   13974:	orr	r2, r1, #524288	; 0x80000
   13978:	bne	13cec <__assert_fail@plt+0x249c>
   1397c:	movw	r0, #49475	; 0xc143
   13980:	mov	r1, r2
   13984:	movt	r0, #1
   13988:	bl	1a940 <__assert_fail@plt+0x90f0>
   1398c:	cmn	r0, #1
   13990:	str	r0, [r6, #36]	; 0x24
   13994:	bgt	13d08 <__assert_fail@plt+0x24b8>
   13998:	bl	116d0 <__errno_location@plt>
   1399c:	ldr	r0, [r0]
   139a0:	mov	r1, #7
   139a4:	strh	r1, [r6, #56]	; 0x38
   139a8:	str	r0, [r6, #32]
   139ac:	str	r6, [r4]
   139b0:	ldrh	r0, [r6, #56]	; 0x38
   139b4:	cmp	r0, #11
   139b8:	beq	13fc8 <__assert_fail@plt+0x2778>
   139bc:	b	13ffc <__assert_fail@plt+0x27ac>
   139c0:	mov	r0, r4
   139c4:	mov	r1, r6
   139c8:	mov	r2, #0
   139cc:	bl	13454 <__assert_fail@plt+0x1c04>
   139d0:	strh	r0, [r6, #56]	; 0x38
   139d4:	mov	r5, r6
   139d8:	mov	r0, r5
   139dc:	sub	sp, fp, #24
   139e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   139e4:	ldrh	r2, [r6, #56]	; 0x38
   139e8:	cmp	r2, #1
   139ec:	bne	13a48 <__assert_fail@plt+0x21f8>
   139f0:	cmp	r1, #4
   139f4:	bne	13afc <__assert_fail@plt+0x22ac>
   139f8:	ldrb	r0, [r6, #58]	; 0x3a
   139fc:	tst	r0, #2
   13a00:	beq	13a0c <__assert_fail@plt+0x21bc>
   13a04:	ldr	r0, [r6, #36]	; 0x24
   13a08:	bl	11820 <close@plt>
   13a0c:	ldr	r5, [r4, #4]
   13a10:	cmp	r5, #0
   13a14:	bne	13a30 <__assert_fail@plt+0x21e0>
   13a18:	b	13b94 <__assert_fail@plt+0x2344>
   13a1c:	mov	r0, r5
   13a20:	bl	1a9d8 <__assert_fail@plt+0x9188>
   13a24:	cmp	r8, #0
   13a28:	mov	r5, r8
   13a2c:	beq	13b8c <__assert_fail@plt+0x233c>
   13a30:	ldrd	r8, [r5, #8]
   13a34:	cmp	r9, #0
   13a38:	beq	13a1c <__assert_fail@plt+0x21cc>
   13a3c:	mov	r0, r9
   13a40:	bl	11838 <closedir@plt>
   13a44:	b	13a1c <__assert_fail@plt+0x21cc>
   13a48:	mov	r7, r6
   13a4c:	ldr	r6, [r7, #8]
   13a50:	cmp	r6, #0
   13a54:	beq	13bb8 <__assert_fail@plt+0x2368>
   13a58:	mov	r0, r7
   13a5c:	str	r6, [r4]
   13a60:	bl	1a9d8 <__assert_fail@plt+0x9188>
   13a64:	ldr	r0, [r6, #48]	; 0x30
   13a68:	cmp	r0, #0
   13a6c:	beq	13c00 <__assert_fail@plt+0x23b0>
   13a70:	ldrh	r0, [r6, #60]	; 0x3c
   13a74:	mov	r7, r6
   13a78:	cmp	r0, #4
   13a7c:	beq	13a4c <__assert_fail@plt+0x21fc>
   13a80:	cmp	r0, #2
   13a84:	bne	13f7c <__assert_fail@plt+0x272c>
   13a88:	mov	r0, r4
   13a8c:	mov	r1, r6
   13a90:	mov	r2, #1
   13a94:	bl	13454 <__assert_fail@plt+0x1c04>
   13a98:	cmp	r0, #1
   13a9c:	strh	r0, [r6, #56]	; 0x38
   13aa0:	bne	13f74 <__assert_fail@plt+0x2724>
   13aa4:	ldr	r0, [r4, #48]	; 0x30
   13aa8:	tst	r0, #4
   13aac:	bne	13f74 <__assert_fail@plt+0x2724>
   13ab0:	mov	r1, #32768	; 0x8000
   13ab4:	tst	r0, #512	; 0x200
   13ab8:	and	r1, r1, r0, lsl #11
   13abc:	orr	r1, r1, #18688	; 0x4900
   13ac0:	orr	r2, r1, #524288	; 0x80000
   13ac4:	bne	13f4c <__assert_fail@plt+0x26fc>
   13ac8:	movw	r0, #49475	; 0xc143
   13acc:	mov	r1, r2
   13ad0:	movt	r0, #1
   13ad4:	bl	1a940 <__assert_fail@plt+0x90f0>
   13ad8:	cmn	r0, #1
   13adc:	str	r0, [r6, #36]	; 0x24
   13ae0:	bgt	13f68 <__assert_fail@plt+0x2718>
   13ae4:	bl	116d0 <__errno_location@plt>
   13ae8:	ldr	r0, [r0]
   13aec:	mov	r1, #7
   13af0:	strh	r1, [r6, #56]	; 0x38
   13af4:	str	r0, [r6, #32]
   13af8:	b	13f74 <__assert_fail@plt+0x2724>
   13afc:	tst	r0, #64	; 0x40
   13b00:	beq	13b1c <__assert_fail@plt+0x22cc>
   13b04:	ldrd	r2, [r4, #16]
   13b08:	ldrd	r8, [r6, #64]	; 0x40
   13b0c:	eor	r1, r9, r3
   13b10:	eor	r2, r8, r2
   13b14:	orrs	r1, r2, r1
   13b18:	bne	139f8 <__assert_fail@plt+0x21a8>
   13b1c:	ldr	r7, [r4, #4]
   13b20:	cmp	r7, #0
   13b24:	beq	13c98 <__assert_fail@plt+0x2448>
   13b28:	tst	r0, #4096	; 0x1000
   13b2c:	bne	13c50 <__assert_fail@plt+0x2400>
   13b30:	ldr	r3, [r6, #24]
   13b34:	mov	r0, r4
   13b38:	mov	r1, r6
   13b3c:	mvn	r2, #0
   13b40:	bl	14260 <__assert_fail@plt+0x2a10>
   13b44:	cmp	r0, #0
   13b48:	beq	13cb0 <__assert_fail@plt+0x2460>
   13b4c:	bl	116d0 <__errno_location@plt>
   13b50:	ldr	r0, [r0]
   13b54:	str	r0, [r6, #32]
   13b58:	ldrh	r0, [r6, #58]	; 0x3a
   13b5c:	orr	r0, r0, #1
   13b60:	strh	r0, [r6, #58]	; 0x3a
   13b64:	ldr	r0, [r4, #4]
   13b68:	cmp	r0, #0
   13b6c:	beq	13cb0 <__assert_fail@plt+0x2460>
   13b70:	ldmib	r0, {r1, r2}
   13b74:	cmp	r2, #0
   13b78:	ldr	r1, [r1, #24]
   13b7c:	str	r1, [r0, #24]
   13b80:	mov	r0, r2
   13b84:	bne	13b70 <__assert_fail@plt+0x2320>
   13b88:	b	13cb0 <__assert_fail@plt+0x2460>
   13b8c:	mov	r0, #0
   13b90:	str	r0, [r4, #4]
   13b94:	mov	r0, #6
   13b98:	strh	r0, [r6, #56]	; 0x38
   13b9c:	mov	r0, r4
   13ba0:	mov	r1, r6
   13ba4:	bl	14184 <__assert_fail@plt+0x2934>
   13ba8:	mov	r5, r6
   13bac:	mov	r0, r5
   13bb0:	sub	sp, fp, #24
   13bb4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13bb8:	ldr	r0, [r7, #4]
   13bbc:	ldr	r1, [r0, #12]
   13bc0:	cmp	r1, #0
   13bc4:	beq	13c28 <__assert_fail@plt+0x23d8>
   13bc8:	str	r0, [r4]
   13bcc:	mov	r2, #0
   13bd0:	ldr	r1, [r4, #24]
   13bd4:	ldr	r0, [r0, #40]	; 0x28
   13bd8:	strb	r2, [r1, r0]
   13bdc:	mov	r0, r4
   13be0:	mov	r1, #3
   13be4:	bl	14510 <__assert_fail@plt+0x2cc0>
   13be8:	cmp	r0, #0
   13bec:	beq	13d28 <__assert_fail@plt+0x24d8>
   13bf0:	mov	r6, r0
   13bf4:	mov	r0, r7
   13bf8:	bl	1a9d8 <__assert_fail@plt+0x9188>
   13bfc:	b	13f7c <__assert_fail@plt+0x272c>
   13c00:	mov	r0, r4
   13c04:	bl	150a8 <__assert_fail@plt+0x3858>
   13c08:	ldr	r1, [r4, #48]	; 0x30
   13c0c:	cmp	r0, #0
   13c10:	beq	13c30 <__assert_fail@plt+0x23e0>
   13c14:	orr	r0, r1, #8192	; 0x2000
   13c18:	str	r0, [r4, #48]	; 0x30
   13c1c:	mov	r0, r5
   13c20:	sub	sp, fp, #24
   13c24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13c28:	mov	r5, r0
   13c2c:	b	13d3c <__assert_fail@plt+0x24ec>
   13c30:	movw	r0, #258	; 0x102
   13c34:	tst	r1, r0
   13c38:	beq	13dd8 <__assert_fail@plt+0x2588>
   13c3c:	ldr	r0, [r4, #56]	; 0x38
   13c40:	cmp	r0, #0
   13c44:	beq	13de0 <__assert_fail@plt+0x2590>
   13c48:	bl	15dc8 <__assert_fail@plt+0x4578>
   13c4c:	b	13de0 <__assert_fail@plt+0x2590>
   13c50:	bic	r0, r0, #4096	; 0x1000
   13c54:	str	r0, [r4, #48]	; 0x30
   13c58:	ldrd	r8, [r7, #8]
   13c5c:	cmp	r9, #0
   13c60:	bne	13c84 <__assert_fail@plt+0x2434>
   13c64:	mov	r0, r7
   13c68:	bl	1a9d8 <__assert_fail@plt+0x9188>
   13c6c:	cmp	r8, #0
   13c70:	mov	r7, r8
   13c74:	beq	13c90 <__assert_fail@plt+0x2440>
   13c78:	ldrd	r8, [r7, #8]
   13c7c:	cmp	r9, #0
   13c80:	beq	13c64 <__assert_fail@plt+0x2414>
   13c84:	mov	r0, r9
   13c88:	bl	11838 <closedir@plt>
   13c8c:	b	13c64 <__assert_fail@plt+0x2414>
   13c90:	mov	r0, #0
   13c94:	str	r0, [r4, #4]
   13c98:	mov	r0, r4
   13c9c:	mov	r1, #3
   13ca0:	bl	14510 <__assert_fail@plt+0x2cc0>
   13ca4:	cmp	r0, #0
   13ca8:	str	r0, [r4, #4]
   13cac:	beq	13cc0 <__assert_fail@plt+0x2470>
   13cb0:	ldr	r6, [r4, #4]
   13cb4:	mov	r0, #0
   13cb8:	str	r0, [r4, #4]
   13cbc:	b	13f7c <__assert_fail@plt+0x272c>
   13cc0:	ldrb	r0, [r4, #49]	; 0x31
   13cc4:	tst	r0, #32
   13cc8:	bne	140a4 <__assert_fail@plt+0x2854>
   13ccc:	ldr	r0, [r6, #32]
   13cd0:	cmp	r0, #0
   13cd4:	beq	13b9c <__assert_fail@plt+0x234c>
   13cd8:	ldrh	r0, [r6, #56]	; 0x38
   13cdc:	cmp	r0, #4
   13ce0:	beq	13b9c <__assert_fail@plt+0x234c>
   13ce4:	mov	r0, #7
   13ce8:	b	13b98 <__assert_fail@plt+0x2348>
   13cec:	ldr	r0, [r4, #32]
   13cf0:	movw	r1, #49475	; 0xc143
   13cf4:	movt	r1, #1
   13cf8:	bl	16ad0 <__assert_fail@plt+0x5280>
   13cfc:	cmn	r0, #1
   13d00:	str	r0, [r6, #36]	; 0x24
   13d04:	ble	13998 <__assert_fail@plt+0x2148>
   13d08:	ldrh	r0, [r6, #58]	; 0x3a
   13d0c:	orr	r0, r0, #2
   13d10:	strh	r0, [r6, #58]	; 0x3a
   13d14:	str	r6, [r4]
   13d18:	ldrh	r0, [r6, #56]	; 0x38
   13d1c:	cmp	r0, #11
   13d20:	beq	13fc8 <__assert_fail@plt+0x2778>
   13d24:	b	13ffc <__assert_fail@plt+0x27ac>
   13d28:	ldrb	r0, [r4, #49]	; 0x31
   13d2c:	mov	r5, #0
   13d30:	tst	r0, #32
   13d34:	bne	140a4 <__assert_fail@plt+0x2854>
   13d38:	ldr	r5, [r7, #4]
   13d3c:	mov	r0, r7
   13d40:	str	r5, [r4]
   13d44:	bl	1a9d8 <__assert_fail@plt+0x9188>
   13d48:	ldr	r0, [r5, #48]	; 0x30
   13d4c:	cmn	r0, #1
   13d50:	beq	13db4 <__assert_fail@plt+0x2564>
   13d54:	ldrh	r0, [r5, #56]	; 0x38
   13d58:	cmp	r0, #11
   13d5c:	beq	14180 <__assert_fail@plt+0x2930>
   13d60:	ldr	r0, [r5, #40]	; 0x28
   13d64:	ldr	r1, [r4, #24]
   13d68:	mov	r2, #0
   13d6c:	strb	r2, [r1, r0]
   13d70:	ldr	r0, [r5, #48]	; 0x30
   13d74:	cmp	r0, #0
   13d78:	beq	13ed0 <__assert_fail@plt+0x2680>
   13d7c:	ldrh	r0, [r5, #58]	; 0x3a
   13d80:	tst	r0, #2
   13d84:	bne	13f08 <__assert_fail@plt+0x26b8>
   13d88:	tst	r0, #1
   13d8c:	bne	14138 <__assert_fail@plt+0x28e8>
   13d90:	ldr	r1, [r5, #4]
   13d94:	movw	r3, #49474	; 0xc142
   13d98:	mov	r0, r4
   13d9c:	mvn	r2, #0
   13da0:	movt	r3, #1
   13da4:	bl	14260 <__assert_fail@plt+0x2a10>
   13da8:	cmp	r0, #0
   13dac:	bne	13ee0 <__assert_fail@plt+0x2690>
   13db0:	b	14138 <__assert_fail@plt+0x28e8>
   13db4:	mov	r0, r5
   13db8:	bl	1a9d8 <__assert_fail@plt+0x9188>
   13dbc:	bl	116d0 <__errno_location@plt>
   13dc0:	mov	r5, #0
   13dc4:	str	r5, [r0]
   13dc8:	str	r5, [r4]
   13dcc:	mov	r0, r5
   13dd0:	sub	sp, fp, #24
   13dd4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13dd8:	ldr	r0, [r4, #56]	; 0x38
   13ddc:	bl	1a9d8 <__assert_fail@plt+0x9188>
   13de0:	ldr	r1, [r6, #52]	; 0x34
   13de4:	add	r7, r6, #168	; 0xa8
   13de8:	str	r1, [r6, #40]	; 0x28
   13dec:	add	r2, r1, #1
   13df0:	mov	r1, r7
   13df4:	ldr	r0, [r4, #24]
   13df8:	bl	114e4 <memmove@plt>
   13dfc:	mov	r0, r7
   13e00:	mov	r1, #47	; 0x2f
   13e04:	bl	11778 <strrchr@plt>
   13e08:	cmp	r0, #0
   13e0c:	beq	13e48 <__assert_fail@plt+0x25f8>
   13e10:	cmp	r0, r7
   13e14:	bne	13e24 <__assert_fail@plt+0x25d4>
   13e18:	ldrb	r1, [r6, #169]	; 0xa9
   13e1c:	cmp	r1, #0
   13e20:	beq	13e48 <__assert_fail@plt+0x25f8>
   13e24:	add	r8, r0, #1
   13e28:	mov	r0, r8
   13e2c:	bl	116ac <strlen@plt>
   13e30:	mov	r9, r0
   13e34:	add	r2, r0, #1
   13e38:	mov	r0, r7
   13e3c:	mov	r1, r8
   13e40:	bl	114e4 <memmove@plt>
   13e44:	str	r9, [r6, #52]	; 0x34
   13e48:	ldr	r0, [r4, #24]
   13e4c:	movw	r1, #258	; 0x102
   13e50:	str	r0, [r6, #24]
   13e54:	str	r0, [r6, #28]
   13e58:	ldrh	r0, [r4, #48]	; 0x30
   13e5c:	tst	r0, r1
   13e60:	beq	13ea4 <__assert_fail@plt+0x2654>
   13e64:	movw	r0, #43480	; 0xa9d8
   13e68:	movw	r2, #21404	; 0x539c
   13e6c:	movw	r3, #21436	; 0x53bc
   13e70:	mov	r1, #0
   13e74:	movt	r0, #1
   13e78:	movt	r2, #1
   13e7c:	movt	r3, #1
   13e80:	str	r0, [sp]
   13e84:	mov	r0, #31
   13e88:	bl	15aac <__assert_fail@plt+0x425c>
   13e8c:	str	r0, [r4, #56]	; 0x38
   13e90:	str	r6, [r4]
   13e94:	ldrh	r0, [r6, #56]	; 0x38
   13e98:	cmp	r0, #11
   13e9c:	beq	13fc8 <__assert_fail@plt+0x2778>
   13ea0:	b	13ffc <__assert_fail@plt+0x27ac>
   13ea4:	mov	r0, #32
   13ea8:	bl	1a390 <__assert_fail@plt+0x8b40>
   13eac:	cmp	r0, #0
   13eb0:	str	r0, [r4, #56]	; 0x38
   13eb4:	beq	13fb8 <__assert_fail@plt+0x2768>
   13eb8:	bl	1a5d4 <__assert_fail@plt+0x8d84>
   13ebc:	str	r6, [r4]
   13ec0:	ldrh	r0, [r6, #56]	; 0x38
   13ec4:	cmp	r0, #11
   13ec8:	beq	13fc8 <__assert_fail@plt+0x2778>
   13ecc:	b	13ffc <__assert_fail@plt+0x27ac>
   13ed0:	mov	r0, r4
   13ed4:	bl	150a8 <__assert_fail@plt+0x3858>
   13ed8:	cmp	r0, #0
   13edc:	beq	14138 <__assert_fail@plt+0x28e8>
   13ee0:	bl	116d0 <__errno_location@plt>
   13ee4:	ldr	r0, [r0]
   13ee8:	str	r0, [r5, #32]
   13eec:	ldr	r0, [r4, #48]	; 0x30
   13ef0:	orr	r0, r0, #8192	; 0x2000
   13ef4:	str	r0, [r4, #48]	; 0x30
   13ef8:	ldrh	r0, [r5, #56]	; 0x38
   13efc:	cmp	r0, #2
   13f00:	bne	14144 <__assert_fail@plt+0x28f4>
   13f04:	b	14168 <__assert_fail@plt+0x2918>
   13f08:	ldr	r0, [r4, #48]	; 0x30
   13f0c:	tst	r0, #4
   13f10:	bne	14130 <__assert_fail@plt+0x28e0>
   13f14:	ldr	r6, [r5, #36]	; 0x24
   13f18:	tst	r0, #512	; 0x200
   13f1c:	bne	14104 <__assert_fail@plt+0x28b4>
   13f20:	mov	r0, r6
   13f24:	bl	117b4 <fchdir@plt>
   13f28:	cmp	r0, #0
   13f2c:	beq	14130 <__assert_fail@plt+0x28e0>
   13f30:	bl	116d0 <__errno_location@plt>
   13f34:	ldr	r0, [r0]
   13f38:	str	r0, [r5, #32]
   13f3c:	ldr	r0, [r4, #48]	; 0x30
   13f40:	orr	r0, r0, #8192	; 0x2000
   13f44:	str	r0, [r4, #48]	; 0x30
   13f48:	b	14130 <__assert_fail@plt+0x28e0>
   13f4c:	ldr	r0, [r4, #32]
   13f50:	movw	r1, #49475	; 0xc143
   13f54:	movt	r1, #1
   13f58:	bl	16ad0 <__assert_fail@plt+0x5280>
   13f5c:	cmn	r0, #1
   13f60:	str	r0, [r6, #36]	; 0x24
   13f64:	ble	13ae4 <__assert_fail@plt+0x2294>
   13f68:	ldrh	r0, [r6, #58]	; 0x3a
   13f6c:	orr	r0, r0, #2
   13f70:	strh	r0, [r6, #58]	; 0x3a
   13f74:	mov	r0, #3
   13f78:	strh	r0, [r6, #60]	; 0x3c
   13f7c:	ldr	r0, [r6, #4]
   13f80:	ldr	r1, [r0, #28]
   13f84:	ldr	r0, [r0, #40]	; 0x28
   13f88:	sub	r2, r0, #1
   13f8c:	ldrb	r1, [r1, r2]
   13f90:	cmp	r1, #47	; 0x2f
   13f94:	ldr	r1, [r4, #24]
   13f98:	moveq	r0, r2
   13f9c:	mov	r2, #47	; 0x2f
   13fa0:	strb	r2, [r1, r0]!
   13fa4:	ldr	r2, [r6, #52]	; 0x34
   13fa8:	add	r0, r1, #1
   13fac:	add	r1, r6, #168	; 0xa8
   13fb0:	add	r2, r2, #1
   13fb4:	bl	114e4 <memmove@plt>
   13fb8:	str	r6, [r4]
   13fbc:	ldrh	r0, [r6, #56]	; 0x38
   13fc0:	cmp	r0, #11
   13fc4:	bne	13ffc <__assert_fail@plt+0x27ac>
   13fc8:	add	r0, r6, #112	; 0x70
   13fcc:	ldrd	r0, [r0]
   13fd0:	eor	r2, r0, #1
   13fd4:	orrs	r2, r2, r1
   13fd8:	beq	140b0 <__assert_fail@plt+0x2860>
   13fdc:	eor	r0, r0, #2
   13fe0:	orrs	r0, r0, r1
   13fe4:	bne	14180 <__assert_fail@plt+0x2930>
   13fe8:	mov	r0, r4
   13fec:	mov	r1, r6
   13ff0:	mov	r2, #0
   13ff4:	bl	13454 <__assert_fail@plt+0x1c04>
   13ff8:	strh	r0, [r6, #56]	; 0x38
   13ffc:	cmp	r0, #1
   14000:	bne	140a0 <__assert_fail@plt+0x2850>
   14004:	ldr	r0, [r6, #48]	; 0x30
   14008:	add	r8, r6, #64	; 0x40
   1400c:	cmp	r0, #0
   14010:	bne	1401c <__assert_fail@plt+0x27cc>
   14014:	ldrd	r0, [r8]
   14018:	strd	r0, [r4, #16]
   1401c:	ldrh	r0, [r4, #48]	; 0x30
   14020:	movw	r1, #258	; 0x102
   14024:	tst	r0, r1
   14028:	beq	140c0 <__assert_fail@plt+0x2870>
   1402c:	mov	r0, #24
   14030:	bl	1a390 <__assert_fail@plt+0x8b40>
   14034:	cmp	r0, #0
   14038:	beq	140ec <__assert_fail@plt+0x289c>
   1403c:	ldrd	r2, [r8]
   14040:	mov	r7, r0
   14044:	add	r0, r6, #160	; 0xa0
   14048:	stm	r7, {r2, r3}
   1404c:	add	r2, r7, #8
   14050:	ldrd	r0, [r0]
   14054:	stm	r2, {r0, r1, r6}
   14058:	mov	r1, r7
   1405c:	ldr	r0, [r4, #56]	; 0x38
   14060:	bl	16708 <__assert_fail@plt+0x4eb8>
   14064:	cmp	r0, r7
   14068:	beq	140b0 <__assert_fail@plt+0x2860>
   1406c:	mov	r4, r0
   14070:	mov	r0, r7
   14074:	bl	1a9d8 <__assert_fail@plt+0x9188>
   14078:	cmp	r4, #0
   1407c:	beq	140ec <__assert_fail@plt+0x289c>
   14080:	ldr	r0, [r4, #16]
   14084:	mov	r1, #2
   14088:	mov	r5, r6
   1408c:	strh	r1, [r6, #56]	; 0x38
   14090:	str	r0, [r6]
   14094:	mov	r0, r5
   14098:	sub	sp, fp, #24
   1409c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   140a0:	mov	r5, r6
   140a4:	mov	r0, r5
   140a8:	sub	sp, fp, #24
   140ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   140b0:	mov	r5, r6
   140b4:	mov	r0, r5
   140b8:	sub	sp, fp, #24
   140bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   140c0:	ldr	r0, [r4, #56]	; 0x38
   140c4:	mov	r1, r8
   140c8:	bl	1a5f0 <__assert_fail@plt+0x8da0>
   140cc:	cmp	r0, #0
   140d0:	mov	r5, r6
   140d4:	movne	r0, #2
   140d8:	strhne	r0, [r6, #56]	; 0x38
   140dc:	strne	r6, [r6]
   140e0:	mov	r0, r5
   140e4:	sub	sp, fp, #24
   140e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   140ec:	bl	116d0 <__errno_location@plt>
   140f0:	mov	r1, #12
   140f4:	str	r1, [r0]
   140f8:	mov	r0, r5
   140fc:	sub	sp, fp, #24
   14100:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14104:	ldr	r1, [r4, #32]
   14108:	cmp	r1, r6
   1410c:	bne	14118 <__assert_fail@plt+0x28c8>
   14110:	cmn	r1, #100	; 0x64
   14114:	bne	14180 <__assert_fail@plt+0x2930>
   14118:	add	r0, r4, #60	; 0x3c
   1411c:	bl	16a34 <__assert_fail@plt+0x51e4>
   14120:	cmp	r0, #0
   14124:	bmi	1412c <__assert_fail@plt+0x28dc>
   14128:	bl	11820 <close@plt>
   1412c:	str	r6, [r4, #32]
   14130:	ldr	r0, [r5, #36]	; 0x24
   14134:	bl	11820 <close@plt>
   14138:	ldrh	r0, [r5, #56]	; 0x38
   1413c:	cmp	r0, #2
   14140:	beq	14168 <__assert_fail@plt+0x2918>
   14144:	ldr	r0, [r5, #32]
   14148:	mov	r1, #7
   1414c:	cmp	r0, #0
   14150:	movweq	r1, #6
   14154:	strh	r1, [r5, #56]	; 0x38
   14158:	bne	14168 <__assert_fail@plt+0x2918>
   1415c:	mov	r0, r4
   14160:	mov	r1, r5
   14164:	bl	14184 <__assert_fail@plt+0x2934>
   14168:	ldrb	r0, [r4, #49]	; 0x31
   1416c:	tst	r0, #32
   14170:	movne	r5, #0
   14174:	mov	r0, r5
   14178:	sub	sp, fp, #24
   1417c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14180:	bl	11814 <abort@plt>
   14184:	push	{r4, r5, r7, sl, fp, lr}
   14188:	add	fp, sp, #16
   1418c:	sub	sp, sp, #24
   14190:	ldrh	r2, [r0, #48]	; 0x30
   14194:	movw	r3, #258	; 0x102
   14198:	add	lr, r1, #64	; 0x40
   1419c:	add	r4, r1, #160	; 0xa0
   141a0:	tst	r2, r3
   141a4:	beq	141dc <__assert_fail@plt+0x298c>
   141a8:	ldrd	r2, [lr]
   141ac:	mov	r1, sp
   141b0:	stm	sp, {r2, r3}
   141b4:	ldrd	r2, [r4]
   141b8:	str	r3, [sp, #12]
   141bc:	str	r2, [sp, #8]
   141c0:	ldr	r0, [r0, #56]	; 0x38
   141c4:	bl	16750 <__assert_fail@plt+0x4f00>
   141c8:	cmp	r0, #0
   141cc:	beq	1425c <__assert_fail@plt+0x2a0c>
   141d0:	bl	1a9d8 <__assert_fail@plt+0x9188>
   141d4:	sub	sp, fp, #16
   141d8:	pop	{r4, r5, r7, sl, fp, pc}
   141dc:	ldr	r1, [r1, #4]
   141e0:	cmp	r1, #0
   141e4:	beq	14254 <__assert_fail@plt+0x2a04>
   141e8:	ldr	r2, [r1, #48]	; 0x30
   141ec:	cmp	r2, #0
   141f0:	bmi	14254 <__assert_fail@plt+0x2a04>
   141f4:	ldr	ip, [r0, #56]	; 0x38
   141f8:	ldrd	r2, [ip, #16]
   141fc:	orrs	r2, r2, r3
   14200:	beq	1425c <__assert_fail@plt+0x2a0c>
   14204:	ldrd	r2, [r4]
   14208:	ldrd	r4, [ip]
   1420c:	eor	r3, r5, r3
   14210:	eor	r2, r4, r2
   14214:	orrs	r2, r2, r3
   14218:	bne	14254 <__assert_fail@plt+0x2a04>
   1421c:	add	r3, ip, #8
   14220:	ldm	lr, {r2, r5}
   14224:	ldm	r3, {r4, r7}
   14228:	eor	r7, r7, r5
   1422c:	eor	r2, r4, r2
   14230:	orrs	r2, r2, r7
   14234:	bne	14254 <__assert_fail@plt+0x2a04>
   14238:	add	r2, r1, #64	; 0x40
   1423c:	add	r1, r1, #160	; 0xa0
   14240:	ldm	r2, {r2, r5}
   14244:	stm	r3, {r2, r5}
   14248:	ldr	r0, [r0, #56]	; 0x38
   1424c:	ldrd	r2, [r1]
   14250:	strd	r2, [r0]
   14254:	sub	sp, fp, #16
   14258:	pop	{r4, r5, r7, sl, fp, pc}
   1425c:	bl	11814 <abort@plt>
   14260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14264:	add	fp, sp, #28
   14268:	sub	sp, sp, #108	; 0x6c
   1426c:	mov	r7, r3
   14270:	mov	r4, r2
   14274:	mov	r8, r1
   14278:	mov	sl, r0
   1427c:	cmp	r3, #0
   14280:	beq	1430c <__assert_fail@plt+0x2abc>
   14284:	movw	r1, #49474	; 0xc142
   14288:	mov	r0, r7
   1428c:	movt	r1, #1
   14290:	bl	114c0 <strcmp@plt>
   14294:	cmp	r0, #0
   14298:	mov	r6, r0
   1429c:	movwne	r6, #1
   142a0:	ldr	r0, [sl, #48]	; 0x30
   142a4:	tst	r0, #4
   142a8:	bne	1431c <__assert_fail@plt+0x2acc>
   142ac:	cmn	r4, #1
   142b0:	mov	r1, #0
   142b4:	mov	r9, #0
   142b8:	movwgt	r1, #1
   142bc:	orrs	r1, r1, r6
   142c0:	bne	14344 <__assert_fail@plt+0x2af4>
   142c4:	ands	r0, r0, #512	; 0x200
   142c8:	beq	14344 <__assert_fail@plt+0x2af4>
   142cc:	add	r4, sl, #60	; 0x3c
   142d0:	mov	r0, r4
   142d4:	bl	16a2c <__assert_fail@plt+0x51dc>
   142d8:	cmp	r0, #0
   142dc:	bne	1434c <__assert_fail@plt+0x2afc>
   142e0:	mov	r0, r4
   142e4:	bl	16a80 <__assert_fail@plt+0x5230>
   142e8:	cmn	r0, #1
   142ec:	ble	1434c <__assert_fail@plt+0x2afc>
   142f0:	mov	r4, r0
   142f4:	mov	r9, #0
   142f8:	mov	r7, #0
   142fc:	ldr	r5, [sl, #48]	; 0x30
   14300:	tst	r5, #2
   14304:	beq	14390 <__assert_fail@plt+0x2b40>
   14308:	b	143d8 <__assert_fail@plt+0x2b88>
   1430c:	mov	r6, #1
   14310:	ldr	r0, [sl, #48]	; 0x30
   14314:	tst	r0, #4
   14318:	beq	142ac <__assert_fail@plt+0x2a5c>
   1431c:	mov	r5, #0
   14320:	cmp	r4, #0
   14324:	bmi	143cc <__assert_fail@plt+0x2b7c>
   14328:	ands	r0, r0, #512	; 0x200
   1432c:	beq	143cc <__assert_fail@plt+0x2b7c>
   14330:	mov	r0, r4
   14334:	bl	11820 <close@plt>
   14338:	mov	r0, r5
   1433c:	sub	sp, fp, #28
   14340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14344:	cmn	r4, #1
   14348:	bgt	14384 <__assert_fail@plt+0x2b34>
   1434c:	ldr	r0, [sl, #48]	; 0x30
   14350:	mov	r1, #32768	; 0x8000
   14354:	and	r1, r1, r0, lsl #11
   14358:	tst	r0, #512	; 0x200
   1435c:	orr	r1, r1, #18688	; 0x4900
   14360:	orr	r2, r1, #524288	; 0x80000
   14364:	bne	14400 <__assert_fail@plt+0x2bb0>
   14368:	mov	r0, r7
   1436c:	mov	r1, r2
   14370:	bl	1a940 <__assert_fail@plt+0x90f0>
   14374:	mov	r4, r0
   14378:	mov	r9, #1
   1437c:	cmp	r0, #0
   14380:	bmi	1441c <__assert_fail@plt+0x2bcc>
   14384:	ldr	r5, [sl, #48]	; 0x30
   14388:	tst	r5, #2
   1438c:	bne	143d8 <__assert_fail@plt+0x2b88>
   14390:	cmp	r7, #0
   14394:	beq	143b0 <__assert_fail@plt+0x2b60>
   14398:	movw	r1, #49474	; 0xc142
   1439c:	mov	r0, r7
   143a0:	movt	r1, #1
   143a4:	bl	114c0 <strcmp@plt>
   143a8:	cmp	r0, #0
   143ac:	beq	143d8 <__assert_fail@plt+0x2b88>
   143b0:	tst	r5, #512	; 0x200
   143b4:	bne	14474 <__assert_fail@plt+0x2c24>
   143b8:	mov	r0, r4
   143bc:	bl	117b4 <fchdir@plt>
   143c0:	mov	r5, r0
   143c4:	cmp	r9, #0
   143c8:	bne	144bc <__assert_fail@plt+0x2c6c>
   143cc:	mov	r0, r5
   143d0:	sub	sp, fp, #28
   143d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143d8:	mov	r2, sp
   143dc:	mov	r0, #3
   143e0:	mov	r1, r4
   143e4:	bl	11598 <__fxstat64@plt>
   143e8:	cmp	r0, #0
   143ec:	beq	1442c <__assert_fail@plt+0x2bdc>
   143f0:	mvn	r5, #0
   143f4:	cmp	r9, #0
   143f8:	beq	143cc <__assert_fail@plt+0x2b7c>
   143fc:	b	144bc <__assert_fail@plt+0x2c6c>
   14400:	ldr	r0, [sl, #32]
   14404:	mov	r1, r7
   14408:	bl	16ad0 <__assert_fail@plt+0x5280>
   1440c:	mov	r4, r0
   14410:	mov	r9, #1
   14414:	cmp	r0, #0
   14418:	bpl	14384 <__assert_fail@plt+0x2b34>
   1441c:	mvn	r5, #0
   14420:	mov	r0, r5
   14424:	sub	sp, fp, #28
   14428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1442c:	add	r0, r8, #64	; 0x40
   14430:	ldm	sp, {r2, r3}
   14434:	ldrd	r0, [r0]
   14438:	eor	r1, r1, r3
   1443c:	eor	r0, r0, r2
   14440:	orrs	r0, r0, r1
   14444:	bne	144a4 <__assert_fail@plt+0x2c54>
   14448:	add	r0, r8, #160	; 0xa0
   1444c:	ldr	r2, [sp, #96]	; 0x60
   14450:	ldr	r3, [sp, #100]	; 0x64
   14454:	ldrd	r0, [r0]
   14458:	eor	r1, r1, r3
   1445c:	eor	r0, r0, r2
   14460:	orrs	r0, r0, r1
   14464:	bne	144a4 <__assert_fail@plt+0x2c54>
   14468:	ldr	r5, [sl, #48]	; 0x30
   1446c:	tst	r5, #512	; 0x200
   14470:	beq	143b8 <__assert_fail@plt+0x2b68>
   14474:	ldr	r1, [sl, #32]
   14478:	cmp	r1, r4
   1447c:	bne	14488 <__assert_fail@plt+0x2c38>
   14480:	cmn	r1, #100	; 0x64
   14484:	bne	1450c <__assert_fail@plt+0x2cbc>
   14488:	cmp	r6, #0
   1448c:	beq	144e0 <__assert_fail@plt+0x2c90>
   14490:	add	r0, sl, #60	; 0x3c
   14494:	bl	16a34 <__assert_fail@plt+0x51e4>
   14498:	cmp	r0, #0
   1449c:	bpl	144f4 <__assert_fail@plt+0x2ca4>
   144a0:	b	144f8 <__assert_fail@plt+0x2ca8>
   144a4:	bl	116d0 <__errno_location@plt>
   144a8:	mov	r1, #2
   144ac:	str	r1, [r0]
   144b0:	mvn	r5, #0
   144b4:	cmp	r9, #0
   144b8:	beq	143cc <__assert_fail@plt+0x2b7c>
   144bc:	bl	116d0 <__errno_location@plt>
   144c0:	ldr	r7, [r0]
   144c4:	mov	r6, r0
   144c8:	mov	r0, r4
   144cc:	bl	11820 <close@plt>
   144d0:	str	r7, [r6]
   144d4:	mov	r0, r5
   144d8:	sub	sp, fp, #28
   144dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144e0:	tst	r5, #4
   144e4:	bne	144f8 <__assert_fail@plt+0x2ca8>
   144e8:	cmp	r1, #0
   144ec:	bmi	144f8 <__assert_fail@plt+0x2ca8>
   144f0:	mov	r0, r1
   144f4:	bl	11820 <close@plt>
   144f8:	str	r4, [sl, #32]
   144fc:	mov	r5, #0
   14500:	mov	r0, r5
   14504:	sub	sp, fp, #28
   14508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1450c:	bl	11814 <abort@plt>
   14510:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14514:	add	fp, sp, #28
   14518:	sub	sp, sp, #68	; 0x44
   1451c:	ldr	sl, [r0]
   14520:	mov	r4, r1
   14524:	mov	r5, r0
   14528:	str	r0, [fp, #-44]	; 0xffffffd4
   1452c:	ldr	r6, [sl, #12]
   14530:	cmp	r6, #0
   14534:	beq	1457c <__assert_fail@plt+0x2d2c>
   14538:	mov	r0, r6
   1453c:	bl	117a8 <dirfd@plt>
   14540:	cmn	r0, #1
   14544:	str	r0, [fp, #-32]	; 0xffffffe0
   14548:	ble	145b0 <__assert_fail@plt+0x2d60>
   1454c:	mov	r1, r5
   14550:	str	r6, [sp, #12]
   14554:	str	r4, [sp, #4]
   14558:	mov	r7, #0
   1455c:	ldr	r0, [r1, #44]!	; 0x2c
   14560:	str	r1, [sp, #20]
   14564:	mvn	r1, #0
   14568:	cmp	r0, #0
   1456c:	movweq	r1, #34464	; 0x86a0
   14570:	movteq	r1, #1
   14574:	str	r1, [sp, #32]
   14578:	b	148a8 <__assert_fail@plt+0x3058>
   1457c:	ldr	r3, [r5, #48]	; 0x30
   14580:	mvn	r0, #99	; 0x63
   14584:	mov	r2, #0
   14588:	and	r1, r3, #516	; 0x204
   1458c:	cmp	r1, #512	; 0x200
   14590:	ldr	r1, [sl, #24]
   14594:	ldreq	r0, [r5, #32]
   14598:	tst	r3, #16
   1459c:	beq	145d8 <__assert_fail@plt+0x2d88>
   145a0:	tst	r3, #1
   145a4:	bne	145cc <__assert_fail@plt+0x2d7c>
   145a8:	mov	r2, #32768	; 0x8000
   145ac:	b	145d8 <__assert_fail@plt+0x2d88>
   145b0:	ldr	r0, [sl, #12]
   145b4:	bl	11838 <closedir@plt>
   145b8:	mov	r6, #0
   145bc:	str	r6, [sl, #12]
   145c0:	cmp	r4, #3
   145c4:	beq	14620 <__assert_fail@plt+0x2dd0>
   145c8:	b	14fb8 <__assert_fail@plt+0x3768>
   145cc:	ldr	r3, [sl, #48]	; 0x30
   145d0:	cmp	r3, #0
   145d4:	movne	r2, #32768	; 0x8000
   145d8:	sub	r3, fp, #32
   145dc:	bl	16b08 <__assert_fail@plt+0x52b8>
   145e0:	cmp	r0, #0
   145e4:	str	r0, [sl, #12]
   145e8:	beq	14614 <__assert_fail@plt+0x2dc4>
   145ec:	ldrh	r0, [sl, #56]	; 0x38
   145f0:	cmp	r0, #11
   145f4:	bne	14640 <__assert_fail@plt+0x2df0>
   145f8:	mov	r0, r5
   145fc:	mov	r1, sl
   14600:	mov	r2, #0
   14604:	bl	13454 <__assert_fail@plt+0x1c04>
   14608:	strh	r0, [sl, #56]	; 0x38
   1460c:	mov	r7, r5
   14610:	b	1470c <__assert_fail@plt+0x2ebc>
   14614:	mov	r6, #0
   14618:	cmp	r4, #3
   1461c:	bne	14fb8 <__assert_fail@plt+0x3768>
   14620:	mov	r0, #4
   14624:	strh	r0, [sl, #56]	; 0x38
   14628:	bl	116d0 <__errno_location@plt>
   1462c:	ldr	r0, [r0]
   14630:	str	r0, [sl, #32]
   14634:	mov	r0, r6
   14638:	sub	sp, fp, #28
   1463c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14640:	ldrb	r0, [r5, #49]	; 0x31
   14644:	mov	r7, r5
   14648:	tst	r0, #1
   1464c:	beq	1470c <__assert_fail@plt+0x2ebc>
   14650:	mov	r0, r7
   14654:	mov	r1, sl
   14658:	add	r8, sl, #64	; 0x40
   1465c:	bl	14184 <__assert_fail@plt+0x2934>
   14660:	mov	r0, r7
   14664:	mov	r1, sl
   14668:	mov	r2, #0
   1466c:	bl	13454 <__assert_fail@plt+0x1c04>
   14670:	ldrh	r0, [r7, #48]	; 0x30
   14674:	movw	r1, #258	; 0x102
   14678:	tst	r0, r1
   1467c:	beq	146f0 <__assert_fail@plt+0x2ea0>
   14680:	mov	r0, #24
   14684:	bl	1a390 <__assert_fail@plt+0x8b40>
   14688:	cmp	r0, #0
   1468c:	beq	147b4 <__assert_fail@plt+0x2f64>
   14690:	ldrd	r2, [r8]
   14694:	mov	r5, r0
   14698:	add	r0, sl, #160	; 0xa0
   1469c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   146a0:	stm	r5, {r2, r3}
   146a4:	add	r2, r5, #8
   146a8:	ldrd	r0, [r0]
   146ac:	stm	r2, {r0, r1, sl}
   146b0:	mov	r1, r5
   146b4:	ldr	r0, [r7, #56]	; 0x38
   146b8:	bl	16708 <__assert_fail@plt+0x4eb8>
   146bc:	cmp	r0, r5
   146c0:	beq	1470c <__assert_fail@plt+0x2ebc>
   146c4:	mov	r8, r0
   146c8:	mov	r0, r5
   146cc:	bl	1a9d8 <__assert_fail@plt+0x9188>
   146d0:	cmp	r8, #0
   146d4:	beq	147b4 <__assert_fail@plt+0x2f64>
   146d8:	ldr	r7, [fp, #-44]	; 0xffffffd4
   146dc:	ldr	r0, [r8, #16]
   146e0:	mov	r1, #2
   146e4:	strh	r1, [sl, #56]	; 0x38
   146e8:	str	r0, [sl]
   146ec:	b	1470c <__assert_fail@plt+0x2ebc>
   146f0:	ldr	r0, [r7, #56]	; 0x38
   146f4:	mov	r1, r8
   146f8:	bl	1a5f0 <__assert_fail@plt+0x8da0>
   146fc:	cmp	r0, #0
   14700:	movne	r0, #2
   14704:	strhne	r0, [sl, #56]	; 0x38
   14708:	strne	sl, [sl]
   1470c:	mov	r1, r7
   14710:	mov	r5, r7
   14714:	str	r4, [sp, #4]
   14718:	str	r6, [sp, #12]
   1471c:	ldr	r0, [r1, #44]!	; 0x2c
   14720:	str	r1, [sp, #20]
   14724:	mvn	r1, #0
   14728:	cmp	r0, #0
   1472c:	movweq	r1, #34464	; 0x86a0
   14730:	movteq	r1, #1
   14734:	cmp	r4, #2
   14738:	str	r1, [sp, #32]
   1473c:	bne	14758 <__assert_fail@plt+0x2f08>
   14740:	mov	r7, #1
   14744:	cmp	r4, #3
   14748:	bne	148a8 <__assert_fail@plt+0x3058>
   1474c:	sub	r0, r4, #3
   14750:	mov	r5, #0
   14754:	b	147ec <__assert_fail@plt+0x2f9c>
   14758:	ldr	r0, [r5, #48]	; 0x30
   1475c:	and	r0, r0, #56	; 0x38
   14760:	cmp	r0, #24
   14764:	bne	147e4 <__assert_fail@plt+0x2f94>
   14768:	ldr	r0, [sl, #84]	; 0x54
   1476c:	cmp	r0, #2
   14770:	bne	147e4 <__assert_fail@plt+0x2f94>
   14774:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14778:	mov	r0, sl
   1477c:	bl	1543c <__assert_fail@plt+0x3bec>
   14780:	movw	r1, #26984	; 0x6968
   14784:	cmp	r0, r1
   14788:	ble	147d0 <__assert_fail@plt+0x2f80>
   1478c:	movw	r1, #26985	; 0x6969
   14790:	cmp	r0, r1
   14794:	movwne	r1, #16719	; 0x414f
   14798:	movtne	r1, #21318	; 0x5346
   1479c:	cmpne	r0, r1
   147a0:	beq	147e4 <__assert_fail@plt+0x2f94>
   147a4:	movw	r1, #40864	; 0x9fa0
   147a8:	cmp	r0, r1
   147ac:	beq	147e4 <__assert_fail@plt+0x2f94>
   147b0:	b	14740 <__assert_fail@plt+0x2ef0>
   147b4:	bl	116d0 <__errno_location@plt>
   147b8:	mov	r1, #12
   147bc:	mov	r6, #0
   147c0:	str	r1, [r0]
   147c4:	mov	r0, r6
   147c8:	sub	sp, fp, #28
   147cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147d0:	movw	r1, #19778	; 0x4d42
   147d4:	movt	r1, #65363	; 0xff53
   147d8:	cmp	r0, r1
   147dc:	cmpne	r0, #0
   147e0:	bne	14740 <__assert_fail@plt+0x2ef0>
   147e4:	sub	r0, r4, #3
   147e8:	mov	r5, #1
   147ec:	clz	r0, r0
   147f0:	lsr	r7, r0, #5
   147f4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   147f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   147fc:	ldrb	r0, [r0, #49]	; 0x31
   14800:	tst	r0, #2
   14804:	beq	14820 <__assert_fail@plt+0x2fd0>
   14808:	mov	r0, r2
   1480c:	movw	r1, #1030	; 0x406
   14810:	mov	r2, #3
   14814:	bl	1a760 <__assert_fail@plt+0x8f10>
   14818:	mov	r2, r0
   1481c:	str	r0, [fp, #-32]	; 0xffffffe0
   14820:	cmp	r2, #0
   14824:	bmi	14840 <__assert_fail@plt+0x2ff0>
   14828:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1482c:	mov	r1, sl
   14830:	mov	r3, #0
   14834:	bl	14260 <__assert_fail@plt+0x2a10>
   14838:	cmp	r0, #0
   1483c:	beq	148a0 <__assert_fail@plt+0x3050>
   14840:	and	r0, r7, r5
   14844:	cmp	r0, #1
   14848:	bne	14858 <__assert_fail@plt+0x3008>
   1484c:	bl	116d0 <__errno_location@plt>
   14850:	ldr	r0, [r0]
   14854:	str	r0, [sl, #32]
   14858:	ldrh	r0, [sl, #58]	; 0x3a
   1485c:	orr	r0, r0, #1
   14860:	strh	r0, [sl, #58]	; 0x3a
   14864:	ldr	r0, [sl, #12]
   14868:	bl	11838 <closedir@plt>
   1486c:	ldr	r5, [fp, #-44]	; 0xffffffd4
   14870:	mov	r4, #0
   14874:	str	r4, [sl, #12]
   14878:	ldrb	r0, [r5, #49]	; 0x31
   1487c:	tst	r0, #2
   14880:	beq	14894 <__assert_fail@plt+0x3044>
   14884:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14888:	cmp	r0, #0
   1488c:	bmi	14894 <__assert_fail@plt+0x3044>
   14890:	bl	11820 <close@plt>
   14894:	mov	r7, #1
   14898:	str	r4, [sl, #12]
   1489c:	b	148a8 <__assert_fail@plt+0x3058>
   148a0:	ldr	r5, [fp, #-44]	; 0xffffffd4
   148a4:	mov	r7, #0
   148a8:	ldr	r0, [sl, #40]	; 0x28
   148ac:	ldr	r1, [sl, #28]
   148b0:	mov	r9, #0
   148b4:	sub	r2, r0, #1
   148b8:	ldrb	r1, [r1, r2]
   148bc:	cmp	r1, #47	; 0x2f
   148c0:	ldrb	r1, [r5, #48]	; 0x30
   148c4:	moveq	r0, r2
   148c8:	tst	r1, #4
   148cc:	mov	r1, #0
   148d0:	str	r1, [sp, #40]	; 0x28
   148d4:	beq	148ec <__assert_fail@plt+0x309c>
   148d8:	ldr	r1, [r5, #24]
   148dc:	mov	r2, #47	; 0x2f
   148e0:	strb	r2, [r1, r0]!
   148e4:	add	r1, r1, #1
   148e8:	str	r1, [sp, #40]	; 0x28
   148ec:	ldr	r6, [sl, #12]
   148f0:	add	r1, r0, #1
   148f4:	str	r1, [fp, #-40]	; 0xffffffd8
   148f8:	cmp	r6, #0
   148fc:	beq	14cc4 <__assert_fail@plt+0x3474>
   14900:	ldr	r0, [sl, #48]	; 0x30
   14904:	str	r7, [sp]
   14908:	mov	r7, #0
   1490c:	add	r0, r0, #1
   14910:	str	r0, [sp, #24]
   14914:	ldr	r0, [r5, #36]	; 0x24
   14918:	sub	r0, r0, r1
   1491c:	str	r0, [sp, #44]	; 0x2c
   14920:	bl	116d0 <__errno_location@plt>
   14924:	str	r0, [sp, #36]	; 0x24
   14928:	mov	r0, #0
   1492c:	mov	r9, #0
   14930:	mov	r4, #0
   14934:	str	sl, [sp, #28]
   14938:	str	r0, [sp, #48]	; 0x30
   1493c:	mov	r0, #0
   14940:	str	r0, [sp, #8]
   14944:	mov	r0, #0
   14948:	str	r0, [sp, #16]
   1494c:	ldr	r0, [sp, #36]	; 0x24
   14950:	str	r7, [r0]
   14954:	mov	r0, r6
   14958:	bl	11790 <readdir64@plt>
   1495c:	cmp	r0, #0
   14960:	beq	14d40 <__assert_fail@plt+0x34f0>
   14964:	mov	r8, r0
   14968:	ldrb	r0, [r5, #48]	; 0x30
   1496c:	tst	r0, #32
   14970:	bne	149a0 <__assert_fail@plt+0x3150>
   14974:	ldrb	r0, [r8, #19]
   14978:	cmp	r0, #46	; 0x2e
   1497c:	bne	149a0 <__assert_fail@plt+0x3150>
   14980:	ldrb	r0, [r8, #20]
   14984:	cmp	r0, #0
   14988:	beq	14c5c <__assert_fail@plt+0x340c>
   1498c:	cmp	r0, #46	; 0x2e
   14990:	bne	149a0 <__assert_fail@plt+0x3150>
   14994:	ldrb	r0, [r8, #21]
   14998:	cmp	r0, #0
   1499c:	beq	14c5c <__assert_fail@plt+0x340c>
   149a0:	str	r4, [fp, #-36]	; 0xffffffdc
   149a4:	add	r4, r8, #19
   149a8:	mov	r0, r4
   149ac:	bl	116ac <strlen@plt>
   149b0:	mov	r5, r0
   149b4:	add	r0, r0, #176	; 0xb0
   149b8:	bic	r0, r0, #7
   149bc:	bl	1a390 <__assert_fail@plt+0x8b40>
   149c0:	mov	r6, r0
   149c4:	cmp	r0, #0
   149c8:	beq	15024 <__assert_fail@plt+0x37d4>
   149cc:	add	sl, r6, #168	; 0xa8
   149d0:	mov	r1, r4
   149d4:	mov	r2, r5
   149d8:	mov	r0, sl
   149dc:	bl	11508 <memcpy@plt>
   149e0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   149e4:	strb	r7, [sl, r5]
   149e8:	str	r5, [r6, #52]	; 0x34
   149ec:	mov	r0, #196608	; 0x30000
   149f0:	ldr	r1, [sp, #44]	; 0x2c
   149f4:	str	r2, [r6, #44]	; 0x2c
   149f8:	cmp	r5, r1
   149fc:	ldr	r4, [r2, #24]
   14a00:	str	r7, [r6, #12]
   14a04:	str	r7, [r6, #16]
   14a08:	str	r7, [r6, #20]
   14a0c:	str	r0, [r6, #58]	; 0x3a
   14a10:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14a14:	str	r4, [r6, #28]
   14a18:	str	r7, [r6, #32]
   14a1c:	add	r7, r5, r0
   14a20:	bcs	14a34 <__assert_fail@plt+0x31e4>
   14a24:	mov	r5, r2
   14a28:	cmp	r7, r0
   14a2c:	bcs	14aac <__assert_fail@plt+0x325c>
   14a30:	b	14f04 <__assert_fail@plt+0x36b4>
   14a34:	ldr	r1, [r2, #36]	; 0x24
   14a38:	movw	r0, #257	; 0x101
   14a3c:	mov	r5, r2
   14a40:	add	r0, r7, r0
   14a44:	adds	r1, r0, r1
   14a48:	bcs	14ff0 <__assert_fail@plt+0x37a0>
   14a4c:	mov	r0, r4
   14a50:	str	r1, [r5, #36]	; 0x24
   14a54:	bl	1a3c0 <__assert_fail@plt+0x8b70>
   14a58:	cmp	r0, #0
   14a5c:	beq	15010 <__assert_fail@plt+0x37c0>
   14a60:	cmp	r0, r4
   14a64:	str	r0, [r5, #24]
   14a68:	beq	14a90 <__assert_fail@plt+0x3240>
   14a6c:	ldrb	r1, [r5, #48]	; 0x30
   14a70:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14a74:	tst	r1, #4
   14a78:	ldr	r1, [sp, #40]	; 0x28
   14a7c:	addne	r1, r0, r2
   14a80:	mov	r0, #1
   14a84:	str	r1, [sp, #40]	; 0x28
   14a88:	str	r0, [sp, #16]
   14a8c:	b	14a94 <__assert_fail@plt+0x3244>
   14a90:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14a94:	ldr	r0, [r5, #36]	; 0x24
   14a98:	sub	r0, r0, r2
   14a9c:	str	r0, [sp, #44]	; 0x2c
   14aa0:	mov	r0, r2
   14aa4:	cmp	r7, r0
   14aa8:	bcc	14f04 <__assert_fail@plt+0x36b4>
   14aac:	ldr	r0, [sp, #24]
   14ab0:	add	r4, r6, #112	; 0x70
   14ab4:	str	r0, [r6, #48]	; 0x30
   14ab8:	ldr	r0, [r5]
   14abc:	str	r7, [r6, #40]	; 0x28
   14ac0:	str	r0, [r6, #4]
   14ac4:	ldrd	r0, [r8]
   14ac8:	strd	r0, [r4, #48]	; 0x30
   14acc:	ldrb	r0, [r5, #48]	; 0x30
   14ad0:	tst	r0, #4
   14ad4:	bne	14ae0 <__assert_fail@plt+0x3290>
   14ad8:	str	sl, [r6, #24]
   14adc:	b	14afc <__assert_fail@plt+0x32ac>
   14ae0:	ldr	r0, [r6, #28]
   14ae4:	ldr	r1, [r6, #52]	; 0x34
   14ae8:	str	r0, [r6, #24]
   14aec:	ldr	r0, [sp, #40]	; 0x28
   14af0:	add	r2, r1, #1
   14af4:	mov	r1, sl
   14af8:	bl	114e4 <memmove@plt>
   14afc:	ldr	r0, [r5, #44]	; 0x2c
   14b00:	ldr	r2, [r5, #48]	; 0x30
   14b04:	ldr	sl, [sp, #28]
   14b08:	mov	r7, #0
   14b0c:	cmp	r0, #0
   14b10:	beq	14bb8 <__assert_fail@plt+0x3368>
   14b14:	ands	r0, r2, #1024	; 0x400
   14b18:	bne	14bb8 <__assert_fail@plt+0x3368>
   14b1c:	mov	r0, r5
   14b20:	mov	r1, r6
   14b24:	mov	r2, #0
   14b28:	bl	13454 <__assert_fail@plt+0x1c04>
   14b2c:	strh	r0, [r6, #56]	; 0x38
   14b30:	ldr	r4, [fp, #-36]	; 0xffffffdc
   14b34:	cmp	r9, #0
   14b38:	str	r7, [r6, #8]
   14b3c:	beq	14c38 <__assert_fail@plt+0x33e8>
   14b40:	ldr	r0, [sp, #48]	; 0x30
   14b44:	str	r6, [r0, #8]
   14b48:	movw	r0, #10000	; 0x2710
   14b4c:	cmp	r4, r0
   14b50:	bne	14c48 <__assert_fail@plt+0x33f8>
   14b54:	ldr	r0, [sp, #20]
   14b58:	ldr	r0, [r0]
   14b5c:	cmp	r0, #0
   14b60:	bne	14c48 <__assert_fail@plt+0x33f8>
   14b64:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14b68:	mov	r0, sl
   14b6c:	bl	1543c <__assert_fail@plt+0x3bec>
   14b70:	mov	r1, #0
   14b74:	str	r1, [sp, #8]
   14b78:	movw	r1, #19778	; 0x4d42
   14b7c:	movt	r1, #65363	; 0xff53
   14b80:	cmp	r0, r1
   14b84:	movwne	r1, #26985	; 0x6969
   14b88:	cmpne	r0, r1
   14b8c:	beq	14c48 <__assert_fail@plt+0x33f8>
   14b90:	movw	r1, #6548	; 0x1994
   14b94:	movt	r1, #258	; 0x102
   14b98:	cmp	r0, r1
   14b9c:	movne	r0, #1
   14ba0:	strne	r0, [sp, #8]
   14ba4:	ldr	r0, [sp, #32]
   14ba8:	add	r4, r4, #1
   14bac:	cmp	r0, r4
   14bb0:	bhi	14c58 <__assert_fail@plt+0x3408>
   14bb4:	b	14c68 <__assert_fail@plt+0x3418>
   14bb8:	ldrb	r3, [r8, #18]
   14bbc:	mov	r0, #0
   14bc0:	tst	r2, #8
   14bc4:	mov	r1, #0
   14bc8:	beq	14bec <__assert_fail@plt+0x339c>
   14bcc:	orr	r1, r3, #4
   14bd0:	cmp	r1, #4
   14bd4:	mov	r1, #0
   14bd8:	beq	14bec <__assert_fail@plt+0x339c>
   14bdc:	eor	r1, r3, #10
   14be0:	and	r2, r2, #16
   14be4:	orrs	r1, r2, r1
   14be8:	movwne	r1, #1
   14bec:	mov	r2, #11
   14bf0:	strh	r2, [r6, #56]	; 0x38
   14bf4:	sub	r2, r3, #1
   14bf8:	uxtb	r3, r2
   14bfc:	cmp	r3, #11
   14c00:	bhi	14c14 <__assert_fail@plt+0x33c4>
   14c04:	sxtb	r0, r2
   14c08:	movw	r2, #49480	; 0xc148
   14c0c:	movt	r2, #1
   14c10:	ldr	r0, [r2, r0, lsl #2]
   14c14:	cmp	r1, #0
   14c18:	str	r0, [r6, #80]	; 0x50
   14c1c:	mov	r0, #2
   14c20:	movwne	r0, #1
   14c24:	stm	r4, {r0, r7}
   14c28:	ldr	r4, [fp, #-36]	; 0xffffffdc
   14c2c:	cmp	r9, #0
   14c30:	str	r7, [r6, #8]
   14c34:	bne	14b40 <__assert_fail@plt+0x32f0>
   14c38:	mov	r9, r6
   14c3c:	movw	r0, #10000	; 0x2710
   14c40:	cmp	r4, r0
   14c44:	beq	14b54 <__assert_fail@plt+0x3304>
   14c48:	ldr	r0, [sp, #32]
   14c4c:	add	r4, r4, #1
   14c50:	cmp	r0, r4
   14c54:	bls	14c68 <__assert_fail@plt+0x3418>
   14c58:	str	r6, [sp, #48]	; 0x30
   14c5c:	ldr	r6, [sl, #12]
   14c60:	cmp	r6, #0
   14c64:	bne	1494c <__assert_fail@plt+0x30fc>
   14c68:	ldr	r0, [sp, #16]
   14c6c:	ldr	r7, [sp]
   14c70:	ldr	r6, [sp, #8]
   14c74:	tst	r0, #1
   14c78:	beq	14d94 <__assert_fail@plt+0x3544>
   14c7c:	ldr	r1, [r5, #4]
   14c80:	ldr	r0, [r5, #24]
   14c84:	cmp	r1, #0
   14c88:	bne	14ca0 <__assert_fail@plt+0x3450>
   14c8c:	b	14cdc <__assert_fail@plt+0x348c>
   14c90:	str	r0, [r1, #28]
   14c94:	ldr	r1, [r1, #8]
   14c98:	cmp	r1, #0
   14c9c:	beq	14cdc <__assert_fail@plt+0x348c>
   14ca0:	ldr	r2, [r1, #24]
   14ca4:	add	r3, r1, #168	; 0xa8
   14ca8:	cmp	r2, r3
   14cac:	beq	14c90 <__assert_fail@plt+0x3440>
   14cb0:	ldr	r3, [r1, #28]
   14cb4:	sub	r2, r2, r3
   14cb8:	add	r2, r0, r2
   14cbc:	str	r2, [r1, #24]
   14cc0:	b	14c90 <__assert_fail@plt+0x3440>
   14cc4:	mov	r4, #0
   14cc8:	mov	r6, #0
   14ccc:	ldrb	r0, [r5, #48]	; 0x30
   14cd0:	tst	r0, #4
   14cd4:	bne	14da0 <__assert_fail@plt+0x3550>
   14cd8:	b	14dc8 <__assert_fail@plt+0x3578>
   14cdc:	ldr	r1, [r9, #48]	; 0x30
   14ce0:	cmp	r1, #0
   14ce4:	bmi	14d94 <__assert_fail@plt+0x3544>
   14ce8:	mov	r1, r9
   14cec:	ldr	r2, [r1, #24]
   14cf0:	add	r3, r1, #168	; 0xa8
   14cf4:	cmp	r2, r3
   14cf8:	bne	14d2c <__assert_fail@plt+0x34dc>
   14cfc:	str	r0, [r1, #28]
   14d00:	ldr	r2, [r1, #8]
   14d04:	cmp	r2, #0
   14d08:	ldreq	r2, [r1, #4]
   14d0c:	ldr	r1, [r2, #48]	; 0x30
   14d10:	cmn	r1, #1
   14d14:	mov	r1, r2
   14d18:	ble	14d94 <__assert_fail@plt+0x3544>
   14d1c:	ldr	r2, [r1, #24]
   14d20:	add	r3, r1, #168	; 0xa8
   14d24:	cmp	r2, r3
   14d28:	beq	14cfc <__assert_fail@plt+0x34ac>
   14d2c:	ldr	r3, [r1, #28]
   14d30:	sub	r2, r2, r3
   14d34:	add	r2, r0, r2
   14d38:	str	r2, [r1, #24]
   14d3c:	b	14cfc <__assert_fail@plt+0x34ac>
   14d40:	ldr	r0, [sp, #36]	; 0x24
   14d44:	ldr	r0, [r0]
   14d48:	cmp	r0, #0
   14d4c:	beq	14d68 <__assert_fail@plt+0x3518>
   14d50:	str	r0, [sl, #32]
   14d54:	ldr	r0, [sp, #12]
   14d58:	orrs	r0, r0, r4
   14d5c:	mov	r0, #4
   14d60:	movwne	r0, #7
   14d64:	strh	r0, [sl, #56]	; 0x38
   14d68:	ldr	r0, [sl, #12]
   14d6c:	ldr	r6, [sp, #8]
   14d70:	cmp	r0, #0
   14d74:	beq	14d84 <__assert_fail@plt+0x3534>
   14d78:	bl	11838 <closedir@plt>
   14d7c:	mov	r0, #0
   14d80:	str	r0, [sl, #12]
   14d84:	ldr	r0, [sp, #16]
   14d88:	ldr	r7, [sp]
   14d8c:	tst	r0, #1
   14d90:	bne	14c7c <__assert_fail@plt+0x342c>
   14d94:	ldrb	r0, [r5, #48]	; 0x30
   14d98:	tst	r0, #4
   14d9c:	beq	14dc8 <__assert_fail@plt+0x3578>
   14da0:	ldr	r2, [sp, #40]	; 0x28
   14da4:	ldr	r0, [r5, #36]	; 0x24
   14da8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14dac:	cmp	r3, r0
   14db0:	sub	r1, r2, #1
   14db4:	mov	r0, #0
   14db8:	moveq	r2, r1
   14dbc:	cmp	r4, #0
   14dc0:	moveq	r2, r1
   14dc4:	strb	r0, [r2]
   14dc8:	ldr	r0, [sp, #12]
   14dcc:	cmp	r0, #0
   14dd0:	movwne	r0, #1
   14dd4:	orrs	r0, r0, r7
   14dd8:	beq	14e40 <__assert_fail@plt+0x35f0>
   14ddc:	cmp	r4, #0
   14de0:	bne	14e80 <__assert_fail@plt+0x3630>
   14de4:	ldr	r0, [sp, #4]
   14de8:	cmp	r0, #3
   14dec:	bne	14e04 <__assert_fail@plt+0x35b4>
   14df0:	ldrh	r0, [sl, #56]	; 0x38
   14df4:	cmp	r0, #4
   14df8:	cmpne	r0, #7
   14dfc:	movne	r0, #6
   14e00:	strhne	r0, [sl, #56]	; 0x38
   14e04:	mov	r6, #0
   14e08:	cmp	r9, #0
   14e0c:	bne	14e28 <__assert_fail@plt+0x35d8>
   14e10:	b	14fb8 <__assert_fail@plt+0x3768>
   14e14:	mov	r0, r9
   14e18:	bl	1a9d8 <__assert_fail@plt+0x9188>
   14e1c:	cmp	r4, #0
   14e20:	mov	r9, r4
   14e24:	beq	14fb8 <__assert_fail@plt+0x3768>
   14e28:	ldrd	r4, [r9, #8]
   14e2c:	cmp	r5, #0
   14e30:	beq	14e14 <__assert_fail@plt+0x35c4>
   14e34:	mov	r0, r5
   14e38:	bl	11838 <closedir@plt>
   14e3c:	b	14e14 <__assert_fail@plt+0x35c4>
   14e40:	ldr	r0, [sp, #4]
   14e44:	cmp	r0, #1
   14e48:	cmpne	r4, #0
   14e4c:	bne	14e80 <__assert_fail@plt+0x3630>
   14e50:	ldr	r0, [sl, #48]	; 0x30
   14e54:	cmp	r0, #0
   14e58:	beq	14f88 <__assert_fail@plt+0x3738>
   14e5c:	ldr	r1, [sl, #4]
   14e60:	movw	r3, #49474	; 0xc142
   14e64:	mov	r0, r5
   14e68:	mvn	r2, #0
   14e6c:	movt	r3, #1
   14e70:	bl	14260 <__assert_fail@plt+0x2a10>
   14e74:	cmp	r0, #0
   14e78:	bne	14f98 <__assert_fail@plt+0x3748>
   14e7c:	b	14ddc <__assert_fail@plt+0x358c>
   14e80:	tst	r6, #1
   14e84:	beq	14ebc <__assert_fail@plt+0x366c>
   14e88:	movw	r0, #21508	; 0x5404
   14e8c:	mov	r1, r9
   14e90:	mov	r2, r4
   14e94:	movt	r0, #1
   14e98:	str	r0, [r5, #44]	; 0x2c
   14e9c:	mov	r0, r5
   14ea0:	bl	135ec <__assert_fail@plt+0x1d9c>
   14ea4:	mov	r6, r0
   14ea8:	mov	r0, #0
   14eac:	str	r0, [r5, #44]	; 0x2c
   14eb0:	mov	r0, r6
   14eb4:	sub	sp, fp, #28
   14eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ebc:	cmp	r4, #2
   14ec0:	bcc	14ef4 <__assert_fail@plt+0x36a4>
   14ec4:	ldr	r0, [sp, #20]
   14ec8:	ldr	r0, [r0]
   14ecc:	cmp	r0, #0
   14ed0:	beq	14ef4 <__assert_fail@plt+0x36a4>
   14ed4:	mov	r0, r5
   14ed8:	mov	r1, r9
   14edc:	mov	r2, r4
   14ee0:	bl	135ec <__assert_fail@plt+0x1d9c>
   14ee4:	mov	r6, r0
   14ee8:	mov	r0, r6
   14eec:	sub	sp, fp, #28
   14ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ef4:	mov	r6, r9
   14ef8:	mov	r0, r6
   14efc:	sub	sp, fp, #28
   14f00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f04:	mov	r0, r6
   14f08:	bl	1a9d8 <__assert_fail@plt+0x9188>
   14f0c:	ldr	r7, [sp, #28]
   14f10:	cmp	r9, #0
   14f14:	bne	14f30 <__assert_fail@plt+0x36e0>
   14f18:	b	14f48 <__assert_fail@plt+0x36f8>
   14f1c:	mov	r0, r9
   14f20:	bl	1a9d8 <__assert_fail@plt+0x9188>
   14f24:	cmp	r4, #0
   14f28:	mov	r9, r4
   14f2c:	beq	14f48 <__assert_fail@plt+0x36f8>
   14f30:	ldrd	r4, [r9, #8]
   14f34:	cmp	r5, #0
   14f38:	beq	14f1c <__assert_fail@plt+0x36cc>
   14f3c:	mov	r0, r5
   14f40:	bl	11838 <closedir@plt>
   14f44:	b	14f1c <__assert_fail@plt+0x36cc>
   14f48:	ldr	r0, [r7, #12]
   14f4c:	bl	11838 <closedir@plt>
   14f50:	ldr	r1, [fp, #-44]	; 0xffffffd4
   14f54:	mov	r0, #7
   14f58:	mov	r6, #0
   14f5c:	strh	r0, [r7, #56]	; 0x38
   14f60:	str	r6, [r7, #12]
   14f64:	ldr	r0, [r1, #48]	; 0x30
   14f68:	orr	r0, r0, #8192	; 0x2000
   14f6c:	str	r0, [r1, #48]	; 0x30
   14f70:	ldr	r1, [sp, #36]	; 0x24
   14f74:	mov	r0, #36	; 0x24
   14f78:	str	r0, [r1]
   14f7c:	mov	r0, r6
   14f80:	sub	sp, fp, #28
   14f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f88:	mov	r0, r5
   14f8c:	bl	150a8 <__assert_fail@plt+0x3858>
   14f90:	cmp	r0, #0
   14f94:	beq	14ddc <__assert_fail@plt+0x358c>
   14f98:	mov	r0, #7
   14f9c:	mov	r6, #0
   14fa0:	cmp	r9, #0
   14fa4:	strh	r0, [sl, #56]	; 0x38
   14fa8:	ldr	r0, [r5, #48]	; 0x30
   14fac:	orr	r0, r0, #8192	; 0x2000
   14fb0:	str	r0, [r5, #48]	; 0x30
   14fb4:	bne	14fd8 <__assert_fail@plt+0x3788>
   14fb8:	mov	r0, r6
   14fbc:	sub	sp, fp, #28
   14fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fc4:	mov	r0, r9
   14fc8:	bl	1a9d8 <__assert_fail@plt+0x9188>
   14fcc:	cmp	r4, #0
   14fd0:	mov	r9, r4
   14fd4:	beq	14fb8 <__assert_fail@plt+0x3768>
   14fd8:	ldrd	r4, [r9, #8]
   14fdc:	cmp	r5, #0
   14fe0:	beq	14fc4 <__assert_fail@plt+0x3774>
   14fe4:	mov	r0, r5
   14fe8:	bl	11838 <closedir@plt>
   14fec:	b	14fc4 <__assert_fail@plt+0x3774>
   14ff0:	mov	r0, r4
   14ff4:	bl	1a9d8 <__assert_fail@plt+0x9188>
   14ff8:	ldr	r1, [sp, #36]	; 0x24
   14ffc:	mov	r0, #0
   15000:	str	r0, [r5, #24]
   15004:	mov	r0, #36	; 0x24
   15008:	str	r0, [r1]
   1500c:	b	15020 <__assert_fail@plt+0x37d0>
   15010:	ldr	r0, [r5, #24]
   15014:	bl	1a9d8 <__assert_fail@plt+0x9188>
   15018:	mov	r0, #0
   1501c:	str	r0, [r5, #24]
   15020:	ldr	sl, [sp, #28]
   15024:	ldr	r0, [sp, #36]	; 0x24
   15028:	ldr	r4, [r0]
   1502c:	mov	r0, r6
   15030:	bl	1a9d8 <__assert_fail@plt+0x9188>
   15034:	ldr	r5, [fp, #-44]	; 0xffffffd4
   15038:	cmp	r9, #0
   1503c:	bne	15058 <__assert_fail@plt+0x3808>
   15040:	b	15070 <__assert_fail@plt+0x3820>
   15044:	mov	r0, r9
   15048:	bl	1a9d8 <__assert_fail@plt+0x9188>
   1504c:	cmp	r6, #0
   15050:	mov	r9, r6
   15054:	beq	15070 <__assert_fail@plt+0x3820>
   15058:	ldrd	r6, [r9, #8]
   1505c:	cmp	r7, #0
   15060:	beq	15044 <__assert_fail@plt+0x37f4>
   15064:	mov	r0, r7
   15068:	bl	11838 <closedir@plt>
   1506c:	b	15044 <__assert_fail@plt+0x37f4>
   15070:	ldr	r0, [sl, #12]
   15074:	bl	11838 <closedir@plt>
   15078:	mov	r0, #7
   1507c:	mov	r6, #0
   15080:	strh	r0, [sl, #56]	; 0x38
   15084:	str	r6, [sl, #12]
   15088:	ldr	r0, [r5, #48]	; 0x30
   1508c:	orr	r0, r0, #8192	; 0x2000
   15090:	str	r0, [r5, #48]	; 0x30
   15094:	ldr	r0, [sp, #36]	; 0x24
   15098:	str	r4, [r0]
   1509c:	mov	r0, r6
   150a0:	sub	sp, fp, #28
   150a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150a8:	push	{r4, r5, fp, lr}
   150ac:	add	fp, sp, #8
   150b0:	mov	r5, r0
   150b4:	ldr	r0, [r0, #48]	; 0x30
   150b8:	mov	r4, #0
   150bc:	tst	r0, #4
   150c0:	bne	15104 <__assert_fail@plt+0x38b4>
   150c4:	tst	r0, #512	; 0x200
   150c8:	bne	150e4 <__assert_fail@plt+0x3894>
   150cc:	ldr	r0, [r5, #28]
   150d0:	bl	117b4 <fchdir@plt>
   150d4:	cmp	r0, #0
   150d8:	mov	r4, r0
   150dc:	movwne	r4, #1
   150e0:	b	15104 <__assert_fail@plt+0x38b4>
   150e4:	ldr	r1, [r5, #32]
   150e8:	add	r0, r5, #60	; 0x3c
   150ec:	bl	16a34 <__assert_fail@plt+0x51e4>
   150f0:	cmp	r0, #0
   150f4:	bmi	150fc <__assert_fail@plt+0x38ac>
   150f8:	bl	11820 <close@plt>
   150fc:	mvn	r0, #99	; 0x63
   15100:	str	r0, [r5, #32]
   15104:	add	r5, r5, #60	; 0x3c
   15108:	mov	r0, r5
   1510c:	bl	16a2c <__assert_fail@plt+0x51dc>
   15110:	cmp	r0, #0
   15114:	bne	1513c <__assert_fail@plt+0x38ec>
   15118:	mov	r0, r5
   1511c:	bl	16a80 <__assert_fail@plt+0x5230>
   15120:	cmp	r0, #0
   15124:	bmi	15108 <__assert_fail@plt+0x38b8>
   15128:	bl	11820 <close@plt>
   1512c:	mov	r0, r5
   15130:	bl	16a2c <__assert_fail@plt+0x51dc>
   15134:	cmp	r0, #0
   15138:	beq	15118 <__assert_fail@plt+0x38c8>
   1513c:	mov	r0, r4
   15140:	pop	{r4, r5, fp, pc}
   15144:	push	{fp, lr}
   15148:	mov	fp, sp
   1514c:	cmp	r2, #5
   15150:	bcc	15168 <__assert_fail@plt+0x3918>
   15154:	bl	116d0 <__errno_location@plt>
   15158:	mov	r1, #22
   1515c:	str	r1, [r0]
   15160:	mov	r0, #1
   15164:	pop	{fp, pc}
   15168:	mov	r0, #0
   1516c:	strh	r2, [r1, #60]	; 0x3c
   15170:	pop	{fp, pc}
   15174:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15178:	add	fp, sp, #28
   1517c:	sub	sp, sp, #4
   15180:	mov	r9, r0
   15184:	mvn	r0, #4096	; 0x1000
   15188:	tst	r1, r0
   1518c:	beq	151ac <__assert_fail@plt+0x395c>
   15190:	bl	116d0 <__errno_location@plt>
   15194:	mov	r1, #22
   15198:	mov	r5, #0
   1519c:	str	r1, [r0]
   151a0:	mov	r0, r5
   151a4:	sub	sp, fp, #28
   151a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151ac:	ldr	r8, [r9]
   151b0:	mov	r7, r1
   151b4:	bl	116d0 <__errno_location@plt>
   151b8:	mov	r5, #0
   151bc:	mov	sl, r0
   151c0:	str	r5, [r0]
   151c4:	ldrb	r0, [r9, #49]	; 0x31
   151c8:	tst	r0, #32
   151cc:	bne	151e4 <__assert_fail@plt+0x3994>
   151d0:	ldrh	r0, [r8, #56]	; 0x38
   151d4:	cmp	r0, #1
   151d8:	beq	151f0 <__assert_fail@plt+0x39a0>
   151dc:	cmp	r0, #9
   151e0:	ldreq	r5, [r8, #8]
   151e4:	mov	r0, r5
   151e8:	sub	sp, fp, #28
   151ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151f0:	ldr	r6, [r9, #4]
   151f4:	cmp	r6, #0
   151f8:	bne	15214 <__assert_fail@plt+0x39c4>
   151fc:	b	15230 <__assert_fail@plt+0x39e0>
   15200:	mov	r0, r6
   15204:	bl	1a9d8 <__assert_fail@plt+0x9188>
   15208:	cmp	r4, #0
   1520c:	mov	r6, r4
   15210:	beq	15230 <__assert_fail@plt+0x39e0>
   15214:	ldr	r1, [r6, #12]
   15218:	ldr	r4, [r6, #8]
   1521c:	cmp	r1, #0
   15220:	beq	15200 <__assert_fail@plt+0x39b0>
   15224:	mov	r0, r1
   15228:	bl	11838 <closedir@plt>
   1522c:	b	15200 <__assert_fail@plt+0x39b0>
   15230:	mov	r4, #1
   15234:	cmp	r7, #4096	; 0x1000
   15238:	bne	1524c <__assert_fail@plt+0x39fc>
   1523c:	ldr	r0, [r9, #48]	; 0x30
   15240:	mov	r4, #2
   15244:	orr	r0, r0, #4096	; 0x1000
   15248:	str	r0, [r9, #48]	; 0x30
   1524c:	ldr	r0, [r8, #48]	; 0x30
   15250:	cmp	r0, #0
   15254:	bne	152ac <__assert_fail@plt+0x3a5c>
   15258:	ldr	r0, [r8, #24]
   1525c:	ldrb	r0, [r0]
   15260:	cmp	r0, #47	; 0x2f
   15264:	beq	152ac <__assert_fail@plt+0x3a5c>
   15268:	ldr	r0, [r9, #48]	; 0x30
   1526c:	tst	r0, #4
   15270:	bne	152ac <__assert_fail@plt+0x3a5c>
   15274:	mov	r1, #32768	; 0x8000
   15278:	tst	r0, #512	; 0x200
   1527c:	and	r1, r1, r0, lsl #11
   15280:	orr	r1, r1, #18688	; 0x4900
   15284:	orr	r2, r1, #524288	; 0x80000
   15288:	bne	152cc <__assert_fail@plt+0x3a7c>
   1528c:	movw	r0, #49475	; 0xc143
   15290:	mov	r1, r2
   15294:	movt	r0, #1
   15298:	bl	1a940 <__assert_fail@plt+0x90f0>
   1529c:	mov	r8, r0
   152a0:	cmn	r0, #1
   152a4:	bgt	152e8 <__assert_fail@plt+0x3a98>
   152a8:	b	15330 <__assert_fail@plt+0x3ae0>
   152ac:	mov	r0, r9
   152b0:	mov	r1, r4
   152b4:	bl	14510 <__assert_fail@plt+0x2cc0>
   152b8:	mov	r5, r0
   152bc:	str	r0, [r9, #4]
   152c0:	mov	r0, r5
   152c4:	sub	sp, fp, #28
   152c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152cc:	ldr	r0, [r9, #32]
   152d0:	movw	r1, #49475	; 0xc143
   152d4:	movt	r1, #1
   152d8:	bl	16ad0 <__assert_fail@plt+0x5280>
   152dc:	mov	r8, r0
   152e0:	cmn	r0, #1
   152e4:	ble	15330 <__assert_fail@plt+0x3ae0>
   152e8:	mov	r0, r9
   152ec:	mov	r1, r4
   152f0:	bl	14510 <__assert_fail@plt+0x2cc0>
   152f4:	str	r0, [r9, #4]
   152f8:	ldrb	r0, [r9, #49]	; 0x31
   152fc:	tst	r0, #2
   15300:	bne	15344 <__assert_fail@plt+0x3af4>
   15304:	mov	r0, r8
   15308:	bl	117b4 <fchdir@plt>
   1530c:	cmp	r0, #0
   15310:	beq	15380 <__assert_fail@plt+0x3b30>
   15314:	ldr	r4, [sl]
   15318:	mov	r0, r8
   1531c:	bl	11820 <close@plt>
   15320:	str	r4, [sl]
   15324:	mov	r0, r5
   15328:	sub	sp, fp, #28
   1532c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15330:	mov	r5, #0
   15334:	str	r5, [r9, #4]
   15338:	mov	r0, r5
   1533c:	sub	sp, fp, #28
   15340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15344:	ldr	r1, [r9, #32]
   15348:	cmp	r1, r8
   1534c:	bne	15358 <__assert_fail@plt+0x3b08>
   15350:	cmn	r1, #100	; 0x64
   15354:	bne	15398 <__assert_fail@plt+0x3b48>
   15358:	add	r0, r9, #60	; 0x3c
   1535c:	bl	16a34 <__assert_fail@plt+0x51e4>
   15360:	cmp	r0, #0
   15364:	bmi	1536c <__assert_fail@plt+0x3b1c>
   15368:	bl	11820 <close@plt>
   1536c:	str	r8, [r9, #32]
   15370:	ldr	r5, [r9, #4]
   15374:	mov	r0, r5
   15378:	sub	sp, fp, #28
   1537c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15380:	mov	r0, r8
   15384:	bl	11820 <close@plt>
   15388:	ldr	r5, [r9, #4]
   1538c:	mov	r0, r5
   15390:	sub	sp, fp, #28
   15394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15398:	bl	11814 <abort@plt>
   1539c:	push	{fp, lr}
   153a0:	mov	fp, sp
   153a4:	mov	r2, r1
   153a8:	ldrd	r0, [r0, #8]
   153ac:	mov	r3, #0
   153b0:	bl	1b178 <__assert_fail@plt+0x9928>
   153b4:	mov	r0, r2
   153b8:	pop	{fp, pc}
   153bc:	push	{r4, r5, fp, lr}
   153c0:	add	fp, sp, #8
   153c4:	ldrd	r2, [r1, #8]
   153c8:	ldrd	r4, [r0, #8]
   153cc:	eor	r3, r5, r3
   153d0:	eor	r2, r4, r2
   153d4:	orrs	r2, r2, r3
   153d8:	mov	r2, #0
   153dc:	bne	153fc <__assert_fail@plt+0x3bac>
   153e0:	ldrd	r2, [r1]
   153e4:	ldrd	r0, [r0]
   153e8:	eor	r1, r1, r3
   153ec:	eor	r0, r0, r2
   153f0:	orr	r0, r0, r1
   153f4:	clz	r0, r0
   153f8:	lsr	r2, r0, #5
   153fc:	mov	r0, r2
   15400:	pop	{r4, r5, fp, pc}
   15404:	push	{r4, r5, fp, lr}
   15408:	add	fp, sp, #8
   1540c:	ldr	r0, [r0]
   15410:	ldrd	r2, [r0, #160]	; 0xa0
   15414:	ldr	r0, [r1]
   15418:	ldrd	r4, [r0, #160]	; 0xa0
   1541c:	mov	r0, #0
   15420:	subs	r1, r4, r2
   15424:	sbcs	r1, r5, r3
   15428:	movwcc	r0, #1
   1542c:	subs	r1, r2, r4
   15430:	sbcs	r1, r3, r5
   15434:	subcc	r0, r0, #1
   15438:	pop	{r4, r5, fp, pc}
   1543c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15440:	add	fp, sp, #24
   15444:	sub	sp, sp, #96	; 0x60
   15448:	ldr	r7, [r0, #44]	; 0x2c
   1544c:	mov	r4, r0
   15450:	mov	r5, #0
   15454:	ldrb	r0, [r7, #49]	; 0x31
   15458:	tst	r0, #2
   1545c:	beq	1550c <__assert_fail@plt+0x3cbc>
   15460:	ldr	r6, [r7, #52]	; 0x34
   15464:	mov	r9, r1
   15468:	cmp	r6, #0
   1546c:	bne	154ac <__assert_fail@plt+0x3c5c>
   15470:	movw	r0, #43480	; 0xa9d8
   15474:	movw	r2, #21880	; 0x5578
   15478:	movw	r3, #21912	; 0x5598
   1547c:	mov	r1, #0
   15480:	mov	r8, #0
   15484:	movt	r0, #1
   15488:	movt	r2, #1
   1548c:	movt	r3, #1
   15490:	str	r0, [sp]
   15494:	mov	r0, #13
   15498:	bl	15aac <__assert_fail@plt+0x425c>
   1549c:	mov	r6, r0
   154a0:	cmp	r0, #0
   154a4:	str	r0, [r7, #52]	; 0x34
   154a8:	beq	154ec <__assert_fail@plt+0x3c9c>
   154ac:	ldrd	r0, [r4, #64]	; 0x40
   154b0:	str	r1, [sp, #12]
   154b4:	str	r0, [sp, #8]
   154b8:	add	r1, sp, #8
   154bc:	mov	r0, r6
   154c0:	bl	157d8 <__assert_fail@plt+0x3f88>
   154c4:	cmp	r0, #0
   154c8:	beq	154dc <__assert_fail@plt+0x3c8c>
   154cc:	ldr	r5, [r0, #8]
   154d0:	mov	r0, r5
   154d4:	sub	sp, fp, #24
   154d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   154dc:	mov	r8, #1
   154e0:	cmp	r9, #0
   154e4:	bpl	154f8 <__assert_fail@plt+0x3ca8>
   154e8:	b	1550c <__assert_fail@plt+0x3cbc>
   154ec:	mov	r6, #0
   154f0:	cmp	r9, #0
   154f4:	bmi	1550c <__assert_fail@plt+0x3cbc>
   154f8:	add	r1, sp, #8
   154fc:	mov	r0, r9
   15500:	bl	11484 <fstatfs64@plt>
   15504:	cmp	r0, #0
   15508:	beq	15518 <__assert_fail@plt+0x3cc8>
   1550c:	mov	r0, r5
   15510:	sub	sp, fp, #24
   15514:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15518:	cmp	r8, #0
   1551c:	beq	15568 <__assert_fail@plt+0x3d18>
   15520:	mov	r0, #16
   15524:	bl	1a390 <__assert_fail@plt+0x8b40>
   15528:	cmp	r0, #0
   1552c:	beq	15568 <__assert_fail@plt+0x3d18>
   15530:	mov	r5, r0
   15534:	ldrd	r0, [r4, #64]	; 0x40
   15538:	ldr	r2, [sp, #8]
   1553c:	stm	r5, {r0, r1, r2}
   15540:	mov	r0, r6
   15544:	mov	r1, r5
   15548:	bl	16708 <__assert_fail@plt+0x4eb8>
   1554c:	cmp	r0, #0
   15550:	beq	15560 <__assert_fail@plt+0x3d10>
   15554:	cmp	r0, r5
   15558:	beq	15568 <__assert_fail@plt+0x3d18>
   1555c:	bl	11814 <abort@plt>
   15560:	mov	r0, r5
   15564:	bl	1a9d8 <__assert_fail@plt+0x9188>
   15568:	ldr	r5, [sp, #8]
   1556c:	mov	r0, r5
   15570:	sub	sp, fp, #24
   15574:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15578:	push	{fp, lr}
   1557c:	mov	fp, sp
   15580:	mov	r2, r1
   15584:	ldrd	r0, [r0]
   15588:	mov	r3, #0
   1558c:	bl	1b178 <__assert_fail@plt+0x9928>
   15590:	mov	r0, r2
   15594:	pop	{fp, pc}
   15598:	ldrd	r2, [r1]
   1559c:	ldrd	r0, [r0]
   155a0:	eor	r1, r1, r3
   155a4:	eor	r0, r0, r2
   155a8:	orr	r0, r0, r1
   155ac:	clz	r0, r0
   155b0:	lsr	r0, r0, #5
   155b4:	bx	lr
   155b8:	ldr	r0, [r0, #8]
   155bc:	bx	lr
   155c0:	ldr	r0, [r0, #12]
   155c4:	bx	lr
   155c8:	ldr	r0, [r0, #16]
   155cc:	bx	lr
   155d0:	ldm	r0, {r2, ip}
   155d4:	mov	r0, #0
   155d8:	cmp	r2, ip
   155dc:	bxcs	lr
   155e0:	mov	r0, #0
   155e4:	ldr	r1, [r2]
   155e8:	cmp	r1, #0
   155ec:	bne	15608 <__assert_fail@plt+0x3db8>
   155f0:	add	r2, r2, #8
   155f4:	cmp	r2, ip
   155f8:	bcs	15634 <__assert_fail@plt+0x3de4>
   155fc:	ldr	r1, [r2]
   15600:	cmp	r1, #0
   15604:	beq	155f0 <__assert_fail@plt+0x3da0>
   15608:	mov	r3, #0
   1560c:	mov	r1, r2
   15610:	ldr	r1, [r1, #4]
   15614:	add	r3, r3, #1
   15618:	cmp	r1, #0
   1561c:	bne	15610 <__assert_fail@plt+0x3dc0>
   15620:	cmp	r3, r0
   15624:	movhi	r0, r3
   15628:	add	r2, r2, #8
   1562c:	cmp	r2, ip
   15630:	bcc	155fc <__assert_fail@plt+0x3dac>
   15634:	bx	lr
   15638:	push	{fp, lr}
   1563c:	mov	fp, sp
   15640:	ldm	r0, {r3, ip}
   15644:	mov	lr, #0
   15648:	mov	r1, #0
   1564c:	cmp	r3, ip
   15650:	bcs	156a4 <__assert_fail@plt+0x3e54>
   15654:	mov	r1, #0
   15658:	mov	lr, #0
   1565c:	ldr	r2, [r3]
   15660:	cmp	r2, #0
   15664:	bne	15680 <__assert_fail@plt+0x3e30>
   15668:	add	r3, r3, #8
   1566c:	cmp	r3, ip
   15670:	bcs	156a4 <__assert_fail@plt+0x3e54>
   15674:	ldr	r2, [r3]
   15678:	cmp	r2, #0
   1567c:	beq	15668 <__assert_fail@plt+0x3e18>
   15680:	mov	r2, r3
   15684:	ldr	r2, [r2, #4]
   15688:	add	r1, r1, #1
   1568c:	cmp	r2, #0
   15690:	bne	15684 <__assert_fail@plt+0x3e34>
   15694:	add	lr, lr, #1
   15698:	add	r3, r3, #8
   1569c:	cmp	r3, ip
   156a0:	bcc	15674 <__assert_fail@plt+0x3e24>
   156a4:	ldr	r2, [r0, #12]
   156a8:	cmp	lr, r2
   156ac:	bne	156c4 <__assert_fail@plt+0x3e74>
   156b0:	ldr	r2, [r0, #16]
   156b4:	mov	r0, #1
   156b8:	cmp	r1, r2
   156bc:	movne	r0, #0
   156c0:	pop	{fp, pc}
   156c4:	mov	r0, #0
   156c8:	pop	{fp, pc}
   156cc:	nop	{0}
   156d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   156d4:	add	fp, sp, #24
   156d8:	sub	sp, sp, #8
   156dc:	ldr	r6, [r0]
   156e0:	ldmib	r0, {r2, r7, r8}
   156e4:	ldr	r3, [r0, #16]
   156e8:	mov	r4, r1
   156ec:	mov	r5, #0
   156f0:	cmp	r6, r2
   156f4:	bcs	1574c <__assert_fail@plt+0x3efc>
   156f8:	mov	r5, #0
   156fc:	ldr	r0, [r6]
   15700:	cmp	r0, #0
   15704:	bne	15720 <__assert_fail@plt+0x3ed0>
   15708:	add	r6, r6, #8
   1570c:	cmp	r6, r2
   15710:	bcs	1574c <__assert_fail@plt+0x3efc>
   15714:	ldr	r0, [r6]
   15718:	cmp	r0, #0
   1571c:	beq	15708 <__assert_fail@plt+0x3eb8>
   15720:	mov	r0, #0
   15724:	mov	r1, r6
   15728:	ldr	r1, [r1, #4]
   1572c:	add	r0, r0, #1
   15730:	cmp	r1, #0
   15734:	bne	15728 <__assert_fail@plt+0x3ed8>
   15738:	cmp	r0, r5
   1573c:	movhi	r5, r0
   15740:	add	r6, r6, #8
   15744:	cmp	r6, r2
   15748:	bcc	15714 <__assert_fail@plt+0x3ec4>
   1574c:	movw	r2, #49528	; 0xc178
   15750:	mov	r0, r4
   15754:	mov	r1, #1
   15758:	movt	r2, #1
   1575c:	bl	11718 <__fprintf_chk@plt>
   15760:	movw	r2, #49552	; 0xc190
   15764:	mov	r0, r4
   15768:	mov	r1, #1
   1576c:	mov	r3, r7
   15770:	movt	r2, #1
   15774:	bl	11718 <__fprintf_chk@plt>
   15778:	vmov	s0, r8
   1577c:	vldr	d16, [pc, #76]	; 157d0 <__assert_fail@plt+0x3f80>
   15780:	movw	r2, #49576	; 0xc1a8
   15784:	mov	r0, r4
   15788:	mov	r1, #1
   1578c:	mov	r3, r8
   15790:	movt	r2, #1
   15794:	vcvt.f64.u32	d17, s0
   15798:	vmov	s0, r7
   1579c:	vcvt.f64.u32	d18, s0
   157a0:	vmul.f64	d16, d17, d16
   157a4:	vdiv.f64	d16, d16, d18
   157a8:	vstr	d16, [sp]
   157ac:	bl	11718 <__fprintf_chk@plt>
   157b0:	movw	r2, #49609	; 0xc1c9
   157b4:	mov	r0, r4
   157b8:	mov	r1, #1
   157bc:	mov	r3, r5
   157c0:	movt	r2, #1
   157c4:	sub	sp, fp, #24
   157c8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   157cc:	b	11718 <__fprintf_chk@plt>
   157d0:	andeq	r0, r0, r0
   157d4:	subsmi	r0, r9, r0
   157d8:	push	{r4, r5, r6, r7, fp, lr}
   157dc:	add	fp, sp, #16
   157e0:	mov	r4, r1
   157e4:	ldr	r1, [r0, #8]
   157e8:	ldr	r2, [r0, #24]
   157ec:	mov	r5, r0
   157f0:	mov	r0, r4
   157f4:	blx	r2
   157f8:	ldr	r1, [r5, #8]
   157fc:	cmp	r0, r1
   15800:	bcs	15868 <__assert_fail@plt+0x4018>
   15804:	ldr	r7, [r5]
   15808:	mov	r6, #0
   1580c:	ldr	r1, [r7, r0, lsl #3]!
   15810:	cmp	r1, #0
   15814:	cmpne	r7, #0
   15818:	bne	15848 <__assert_fail@plt+0x3ff8>
   1581c:	mov	r0, r6
   15820:	pop	{r4, r5, r6, r7, fp, pc}
   15824:	ldr	r2, [r5, #28]
   15828:	mov	r0, r4
   1582c:	blx	r2
   15830:	cmp	r0, #0
   15834:	bne	1585c <__assert_fail@plt+0x400c>
   15838:	ldr	r7, [r7, #4]
   1583c:	cmp	r7, #0
   15840:	beq	1581c <__assert_fail@plt+0x3fcc>
   15844:	ldr	r1, [r7]
   15848:	cmp	r1, r4
   1584c:	bne	15824 <__assert_fail@plt+0x3fd4>
   15850:	mov	r6, r4
   15854:	mov	r0, r6
   15858:	pop	{r4, r5, r6, r7, fp, pc}
   1585c:	ldr	r6, [r7]
   15860:	mov	r0, r6
   15864:	pop	{r4, r5, r6, r7, fp, pc}
   15868:	bl	11814 <abort@plt>
   1586c:	push	{fp, lr}
   15870:	mov	fp, sp
   15874:	ldr	r1, [r0, #16]
   15878:	cmp	r1, #0
   1587c:	beq	1589c <__assert_fail@plt+0x404c>
   15880:	ldm	r0, {r1, r2}
   15884:	cmp	r1, r2
   15888:	bcs	158a4 <__assert_fail@plt+0x4054>
   1588c:	ldr	r0, [r1], #8
   15890:	cmp	r0, #0
   15894:	beq	15884 <__assert_fail@plt+0x4034>
   15898:	pop	{fp, pc}
   1589c:	mov	r0, #0
   158a0:	pop	{fp, pc}
   158a4:	bl	11814 <abort@plt>
   158a8:	push	{r4, r5, fp, lr}
   158ac:	add	fp, sp, #8
   158b0:	mov	r5, r1
   158b4:	ldr	r1, [r0, #8]
   158b8:	ldr	r2, [r0, #24]
   158bc:	mov	r4, r0
   158c0:	mov	r0, r5
   158c4:	blx	r2
   158c8:	ldr	r1, [r4, #8]
   158cc:	cmp	r0, r1
   158d0:	bcs	15934 <__assert_fail@plt+0x40e4>
   158d4:	ldr	r1, [r4]
   158d8:	add	r2, r1, r0, lsl #3
   158dc:	ldr	r3, [r2]
   158e0:	ldr	r2, [r2, #4]
   158e4:	cmp	r3, r5
   158e8:	beq	158f8 <__assert_fail@plt+0x40a8>
   158ec:	cmp	r2, #0
   158f0:	bne	158dc <__assert_fail@plt+0x408c>
   158f4:	b	15908 <__assert_fail@plt+0x40b8>
   158f8:	cmp	r2, #0
   158fc:	beq	15908 <__assert_fail@plt+0x40b8>
   15900:	ldr	r0, [r2]
   15904:	pop	{r4, r5, fp, pc}
   15908:	ldr	r2, [r4, #4]
   1590c:	add	r0, r1, r0, lsl #3
   15910:	add	r1, r0, #8
   15914:	cmp	r1, r2
   15918:	bcs	1592c <__assert_fail@plt+0x40dc>
   1591c:	ldr	r0, [r1], #8
   15920:	cmp	r0, #0
   15924:	beq	15914 <__assert_fail@plt+0x40c4>
   15928:	pop	{r4, r5, fp, pc}
   1592c:	mov	r0, #0
   15930:	pop	{r4, r5, fp, pc}
   15934:	bl	11814 <abort@plt>
   15938:	push	{r4, r5, fp, lr}
   1593c:	add	fp, sp, #8
   15940:	ldm	r0, {r5, lr}
   15944:	mov	ip, r0
   15948:	mov	r0, #0
   1594c:	cmp	r5, lr
   15950:	popcs	{r4, r5, fp, pc}
   15954:	mov	r0, #0
   15958:	ldr	r3, [r5]
   1595c:	cmp	r3, #0
   15960:	cmpne	r5, #0
   15964:	beq	15970 <__assert_fail@plt+0x4120>
   15968:	b	1598c <__assert_fail@plt+0x413c>
   1596c:	ldr	lr, [ip, #4]
   15970:	add	r5, r5, #8
   15974:	cmp	r5, lr
   15978:	bcs	159b4 <__assert_fail@plt+0x4164>
   1597c:	ldr	r3, [r5]
   15980:	cmp	r3, #0
   15984:	cmpne	r5, #0
   15988:	beq	15970 <__assert_fail@plt+0x4120>
   1598c:	mov	r3, r5
   15990:	cmp	r0, r2
   15994:	bcs	159b4 <__assert_fail@plt+0x4164>
   15998:	ldr	r4, [r3]
   1599c:	str	r4, [r1, r0, lsl #2]
   159a0:	add	r0, r0, #1
   159a4:	ldr	r3, [r3, #4]
   159a8:	cmp	r3, #0
   159ac:	bne	15990 <__assert_fail@plt+0x4140>
   159b0:	b	1596c <__assert_fail@plt+0x411c>
   159b4:	pop	{r4, r5, fp, pc}
   159b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   159bc:	add	fp, sp, #24
   159c0:	mov	r5, r1
   159c4:	ldr	r4, [r0]
   159c8:	ldr	r1, [r0, #4]
   159cc:	mov	r6, #0
   159d0:	cmp	r4, r1
   159d4:	bcs	15a50 <__assert_fail@plt+0x4200>
   159d8:	mov	r9, r2
   159dc:	mov	r8, r0
   159e0:	mov	r6, #0
   159e4:	ldr	r0, [r4]
   159e8:	cmp	r0, #0
   159ec:	cmpne	r4, #0
   159f0:	beq	159fc <__assert_fail@plt+0x41ac>
   159f4:	b	15a18 <__assert_fail@plt+0x41c8>
   159f8:	ldr	r1, [r8, #4]
   159fc:	add	r4, r4, #8
   15a00:	cmp	r4, r1
   15a04:	bcs	15a50 <__assert_fail@plt+0x4200>
   15a08:	ldr	r0, [r4]
   15a0c:	cmp	r0, #0
   15a10:	cmpne	r4, #0
   15a14:	beq	159fc <__assert_fail@plt+0x41ac>
   15a18:	mov	r1, r9
   15a1c:	blx	r5
   15a20:	cmp	r0, #0
   15a24:	beq	15a50 <__assert_fail@plt+0x4200>
   15a28:	mov	r7, r4
   15a2c:	ldr	r7, [r7, #4]
   15a30:	add	r6, r6, #1
   15a34:	cmp	r7, #0
   15a38:	beq	159f8 <__assert_fail@plt+0x41a8>
   15a3c:	ldr	r0, [r7]
   15a40:	mov	r1, r9
   15a44:	blx	r5
   15a48:	cmp	r0, #0
   15a4c:	bne	15a2c <__assert_fail@plt+0x41dc>
   15a50:	mov	r0, r6
   15a54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15a58:	ldrb	r2, [r0]
   15a5c:	cmp	r2, #0
   15a60:	moveq	r0, #0
   15a64:	bxeq	lr
   15a68:	add	r3, r0, #1
   15a6c:	mov	r0, #0
   15a70:	rsb	r0, r0, r0, lsl #5
   15a74:	uxtab	r0, r0, r2
   15a78:	udiv	r2, r0, r1
   15a7c:	mls	r0, r2, r1, r0
   15a80:	ldrb	r2, [r3], #1
   15a84:	cmp	r2, #0
   15a88:	bne	15a70 <__assert_fail@plt+0x4220>
   15a8c:	bx	lr
   15a90:	movw	r1, #49640	; 0xc1e8
   15a94:	movt	r1, #1
   15a98:	vld1.32	{d16-d17}, [r1]!
   15a9c:	ldr	r1, [r1]
   15aa0:	vst1.32	{d16-d17}, [r0]!
   15aa4:	str	r1, [r0]
   15aa8:	bx	lr
   15aac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15ab0:	add	fp, sp, #24
   15ab4:	movw	r9, #23776	; 0x5ce0
   15ab8:	cmp	r3, #0
   15abc:	movw	r5, #23756	; 0x5ccc
   15ac0:	mov	r6, r0
   15ac4:	mov	r0, #40	; 0x28
   15ac8:	mov	r7, r1
   15acc:	movt	r9, #1
   15ad0:	movne	r9, r3
   15ad4:	cmp	r2, #0
   15ad8:	movt	r5, #1
   15adc:	movne	r5, r2
   15ae0:	bl	1a390 <__assert_fail@plt+0x8b40>
   15ae4:	mov	r8, #0
   15ae8:	cmp	r0, #0
   15aec:	beq	15cb4 <__assert_fail@plt+0x4464>
   15af0:	mov	r4, r0
   15af4:	movw	r0, #49640	; 0xc1e8
   15af8:	cmp	r7, #0
   15afc:	movt	r0, #1
   15b00:	moveq	r7, r0
   15b04:	cmp	r7, r0
   15b08:	str	r7, [r4, #20]
   15b0c:	beq	15b88 <__assert_fail@plt+0x4338>
   15b10:	vldr	s2, [pc, #420]	; 15cbc <__assert_fail@plt+0x446c>
   15b14:	vldr	s0, [r7, #8]
   15b18:	vcmpe.f32	s0, s2
   15b1c:	vmrs	APSR_nzcv, fpscr
   15b20:	ble	15c34 <__assert_fail@plt+0x43e4>
   15b24:	vldr	s4, [pc, #404]	; 15cc0 <__assert_fail@plt+0x4470>
   15b28:	vcmpe.f32	s0, s4
   15b2c:	vmrs	APSR_nzcv, fpscr
   15b30:	bpl	15c34 <__assert_fail@plt+0x43e4>
   15b34:	vldr	s4, [pc, #392]	; 15cc4 <__assert_fail@plt+0x4474>
   15b38:	vldr	s6, [r7, #12]
   15b3c:	vcmpe.f32	s6, s4
   15b40:	vmrs	APSR_nzcv, fpscr
   15b44:	ble	15c34 <__assert_fail@plt+0x43e4>
   15b48:	vldr	s4, [r7]
   15b4c:	vcmpe.f32	s4, #0.0
   15b50:	vmrs	APSR_nzcv, fpscr
   15b54:	blt	15c34 <__assert_fail@plt+0x43e4>
   15b58:	vadd.f32	s2, s4, s2
   15b5c:	vcmpe.f32	s2, s0
   15b60:	vmrs	APSR_nzcv, fpscr
   15b64:	bpl	15c34 <__assert_fail@plt+0x43e4>
   15b68:	vldr	s0, [r7, #4]
   15b6c:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15b70:	vcmpe.f32	s0, s4
   15b74:	vmrs	APSR_nzcv, fpscr
   15b78:	bhi	15c34 <__assert_fail@plt+0x43e4>
   15b7c:	vcmpe.f32	s2, s0
   15b80:	vmrs	APSR_nzcv, fpscr
   15b84:	bpl	15c34 <__assert_fail@plt+0x43e4>
   15b88:	ldrb	r0, [r7, #16]
   15b8c:	cmp	r0, #0
   15b90:	bne	15bbc <__assert_fail@plt+0x436c>
   15b94:	vmov	s2, r6
   15b98:	vldr	s0, [r7, #8]
   15b9c:	vldr	s4, [pc, #292]	; 15cc8 <__assert_fail@plt+0x4478>
   15ba0:	vcvt.f32.u32	s2, s2
   15ba4:	vdiv.f32	s2, s2, s0
   15ba8:	vcvt.u32.f32	s0, s2
   15bac:	vcmpe.f32	s2, s4
   15bb0:	vmrs	APSR_nzcv, fpscr
   15bb4:	bge	15c50 <__assert_fail@plt+0x4400>
   15bb8:	vmov	r6, s0
   15bbc:	cmp	r6, #10
   15bc0:	movls	r6, #10
   15bc4:	orr	r0, r6, #1
   15bc8:	cmn	r0, #1
   15bcc:	beq	15c50 <__assert_fail@plt+0x4400>
   15bd0:	ldr	r6, [fp, #8]
   15bd4:	mov	r1, #3
   15bd8:	cmp	r0, #10
   15bdc:	bcc	15c14 <__assert_fail@plt+0x43c4>
   15be0:	mov	r1, #3
   15be4:	mov	r3, #9
   15be8:	mov	r2, #12
   15bec:	udiv	r7, r0, r1
   15bf0:	mls	r7, r7, r1, r0
   15bf4:	cmp	r7, #0
   15bf8:	beq	15c14 <__assert_fail@plt+0x43c4>
   15bfc:	add	r3, r3, r2
   15c00:	add	r2, r2, #8
   15c04:	add	r1, r1, #2
   15c08:	add	r3, r3, #4
   15c0c:	cmp	r3, r0
   15c10:	bcc	15bec <__assert_fail@plt+0x439c>
   15c14:	udiv	r2, r0, r1
   15c18:	mls	r1, r2, r1, r0
   15c1c:	cmp	r1, #0
   15c20:	bne	15c48 <__assert_fail@plt+0x43f8>
   15c24:	add	r0, r0, #2
   15c28:	cmn	r0, #1
   15c2c:	bne	15bd4 <__assert_fail@plt+0x4384>
   15c30:	b	15c50 <__assert_fail@plt+0x4400>
   15c34:	str	r0, [r4, #20]
   15c38:	mov	r0, r4
   15c3c:	bl	1a9d8 <__assert_fail@plt+0x9188>
   15c40:	mov	r0, r8
   15c44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15c48:	cmp	r0, #536870912	; 0x20000000
   15c4c:	bcc	15c68 <__assert_fail@plt+0x4418>
   15c50:	mov	r0, #0
   15c54:	str	r0, [r4, #8]
   15c58:	mov	r0, r4
   15c5c:	bl	1a9d8 <__assert_fail@plt+0x9188>
   15c60:	mov	r0, r8
   15c64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15c68:	cmp	r0, #0
   15c6c:	str	r0, [r4, #8]
   15c70:	beq	15c58 <__assert_fail@plt+0x4408>
   15c74:	mov	r1, #8
   15c78:	bl	1a33c <__assert_fail@plt+0x8aec>
   15c7c:	cmp	r0, #0
   15c80:	str	r0, [r4]
   15c84:	beq	15c58 <__assert_fail@plt+0x4408>
   15c88:	mov	r1, #0
   15c8c:	str	r5, [r4, #24]
   15c90:	str	r9, [r4, #28]
   15c94:	str	r6, [r4, #32]
   15c98:	mov	r8, r4
   15c9c:	str	r1, [r4, #36]	; 0x24
   15ca0:	str	r1, [r4, #12]
   15ca4:	str	r1, [r4, #16]
   15ca8:	ldr	r1, [r4, #8]
   15cac:	add	r0, r0, r1, lsl #3
   15cb0:	str	r0, [r4, #4]
   15cb4:	mov	r0, r8
   15cb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15cbc:	stclcc	12, cr12, [ip, #820]	; 0x334
   15cc0:	svccc	0x00666666
   15cc4:	svccc	0x008ccccd
   15cc8:	svcmi	0x00800000
   15ccc:	ror	r2, r0, #3
   15cd0:	udiv	r2, r2, r1
   15cd4:	mul	r1, r2, r1
   15cd8:	rsb	r0, r1, r0, ror #3
   15cdc:	bx	lr
   15ce0:	sub	r0, r0, r1
   15ce4:	clz	r0, r0
   15ce8:	lsr	r0, r0, #5
   15cec:	bx	lr
   15cf0:	push	{r4, r5, r6, r7, fp, lr}
   15cf4:	add	fp, sp, #16
   15cf8:	mov	r4, r0
   15cfc:	ldr	r5, [r0]
   15d00:	ldr	r0, [r0, #4]
   15d04:	cmp	r5, r0
   15d08:	bcs	15db8 <__assert_fail@plt+0x4568>
   15d0c:	mov	r6, #0
   15d10:	ldr	r1, [r5]
   15d14:	cmp	r1, #0
   15d18:	bne	15d44 <__assert_fail@plt+0x44f4>
   15d1c:	b	15d2c <__assert_fail@plt+0x44dc>
   15d20:	str	r6, [r5]
   15d24:	str	r6, [r5, #4]
   15d28:	ldr	r0, [r4, #4]
   15d2c:	add	r5, r5, #8
   15d30:	cmp	r5, r0
   15d34:	bcs	15db8 <__assert_fail@plt+0x4568>
   15d38:	ldr	r1, [r5]
   15d3c:	cmp	r1, #0
   15d40:	beq	15d2c <__assert_fail@plt+0x44dc>
   15d44:	ldr	r1, [r4, #32]
   15d48:	ldr	r7, [r5, #4]
   15d4c:	cmp	r1, #0
   15d50:	mov	r0, r1
   15d54:	movwne	r0, #1
   15d58:	cmp	r7, #0
   15d5c:	bne	15da0 <__assert_fail@plt+0x4550>
   15d60:	cmp	r0, #0
   15d64:	beq	15d20 <__assert_fail@plt+0x44d0>
   15d68:	ldr	r0, [r5]
   15d6c:	blx	r1
   15d70:	b	15d20 <__assert_fail@plt+0x44d0>
   15d74:	str	r6, [r7]
   15d78:	cmp	r1, #0
   15d7c:	ldr	r2, [r7, #4]
   15d80:	ldr	r0, [r4, #36]	; 0x24
   15d84:	str	r0, [r7, #4]
   15d88:	mov	r0, r1
   15d8c:	str	r7, [r4, #36]	; 0x24
   15d90:	movwne	r0, #1
   15d94:	cmp	r2, #0
   15d98:	mov	r7, r2
   15d9c:	beq	15d60 <__assert_fail@plt+0x4510>
   15da0:	tst	r0, #1
   15da4:	beq	15d74 <__assert_fail@plt+0x4524>
   15da8:	ldr	r0, [r7]
   15dac:	blx	r1
   15db0:	ldr	r1, [r4, #32]
   15db4:	b	15d74 <__assert_fail@plt+0x4524>
   15db8:	mov	r0, #0
   15dbc:	str	r0, [r4, #12]
   15dc0:	str	r0, [r4, #16]
   15dc4:	pop	{r4, r5, r6, r7, fp, pc}
   15dc8:	push	{r4, r5, r6, sl, fp, lr}
   15dcc:	add	fp, sp, #16
   15dd0:	mov	r4, r0
   15dd4:	ldr	r0, [r0, #32]
   15dd8:	cmp	r0, #0
   15ddc:	beq	15e50 <__assert_fail@plt+0x4600>
   15de0:	ldr	r0, [r4, #16]
   15de4:	cmp	r0, #0
   15de8:	beq	15e50 <__assert_fail@plt+0x4600>
   15dec:	ldr	r5, [r4]
   15df0:	ldr	r1, [r4, #4]
   15df4:	cmp	r5, r1
   15df8:	bcc	15e10 <__assert_fail@plt+0x45c0>
   15dfc:	b	15e50 <__assert_fail@plt+0x4600>
   15e00:	ldr	r1, [r4, #4]
   15e04:	add	r5, r5, #8
   15e08:	cmp	r5, r1
   15e0c:	bcs	15e50 <__assert_fail@plt+0x4600>
   15e10:	ldr	r0, [r5]
   15e14:	cmp	r0, #0
   15e18:	cmpne	r5, #0
   15e1c:	beq	15e04 <__assert_fail@plt+0x45b4>
   15e20:	ldr	r1, [r4, #32]
   15e24:	blx	r1
   15e28:	ldr	r6, [r5, #4]
   15e2c:	cmp	r6, #0
   15e30:	beq	15e00 <__assert_fail@plt+0x45b0>
   15e34:	ldr	r1, [r4, #32]
   15e38:	ldr	r0, [r6]
   15e3c:	blx	r1
   15e40:	ldr	r6, [r6, #4]
   15e44:	cmp	r6, #0
   15e48:	bne	15e34 <__assert_fail@plt+0x45e4>
   15e4c:	b	15e00 <__assert_fail@plt+0x45b0>
   15e50:	ldr	r5, [r4]
   15e54:	ldr	r1, [r4, #4]
   15e58:	cmp	r5, r1
   15e5c:	bcc	15e70 <__assert_fail@plt+0x4620>
   15e60:	b	15e98 <__assert_fail@plt+0x4648>
   15e64:	add	r5, r5, #8
   15e68:	cmp	r5, r1
   15e6c:	bcs	15e98 <__assert_fail@plt+0x4648>
   15e70:	ldr	r0, [r5, #4]
   15e74:	cmp	r0, #0
   15e78:	beq	15e64 <__assert_fail@plt+0x4614>
   15e7c:	ldr	r6, [r0, #4]
   15e80:	bl	1a9d8 <__assert_fail@plt+0x9188>
   15e84:	cmp	r6, #0
   15e88:	mov	r0, r6
   15e8c:	bne	15e7c <__assert_fail@plt+0x462c>
   15e90:	ldr	r1, [r4, #4]
   15e94:	b	15e64 <__assert_fail@plt+0x4614>
   15e98:	ldr	r0, [r4, #36]	; 0x24
   15e9c:	cmp	r0, #0
   15ea0:	beq	15eb8 <__assert_fail@plt+0x4668>
   15ea4:	ldr	r5, [r0, #4]
   15ea8:	bl	1a9d8 <__assert_fail@plt+0x9188>
   15eac:	cmp	r5, #0
   15eb0:	mov	r0, r5
   15eb4:	bne	15ea4 <__assert_fail@plt+0x4654>
   15eb8:	ldr	r0, [r4]
   15ebc:	bl	1a9d8 <__assert_fail@plt+0x9188>
   15ec0:	mov	r0, r4
   15ec4:	pop	{r4, r5, r6, sl, fp, lr}
   15ec8:	b	1a9d8 <__assert_fail@plt+0x9188>
   15ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ed0:	add	fp, sp, #28
   15ed4:	sub	sp, sp, #44	; 0x2c
   15ed8:	mov	r7, r0
   15edc:	mov	r4, r0
   15ee0:	ldr	r0, [r7, #20]!
   15ee4:	ldrb	r2, [r0, #16]
   15ee8:	cmp	r2, #0
   15eec:	bne	15f1c <__assert_fail@plt+0x46cc>
   15ef0:	vmov	s2, r1
   15ef4:	vldr	s0, [r0, #8]
   15ef8:	vldr	s4, [pc, #592]	; 16150 <__assert_fail@plt+0x4900>
   15efc:	mov	r5, #0
   15f00:	vcvt.f32.u32	s2, s2
   15f04:	vdiv.f32	s2, s2, s0
   15f08:	vcvt.u32.f32	s0, s2
   15f0c:	vcmpe.f32	s2, s4
   15f10:	vmrs	APSR_nzcv, fpscr
   15f14:	bge	16040 <__assert_fail@plt+0x47f0>
   15f18:	vmov	r1, s0
   15f1c:	cmp	r1, #10
   15f20:	mov	r5, #0
   15f24:	movls	r1, #10
   15f28:	orr	r6, r1, #1
   15f2c:	cmn	r6, #1
   15f30:	beq	16040 <__assert_fail@plt+0x47f0>
   15f34:	mov	r0, #3
   15f38:	cmp	r6, #10
   15f3c:	bcc	15f74 <__assert_fail@plt+0x4724>
   15f40:	mov	r0, #3
   15f44:	mov	r2, #9
   15f48:	mov	r1, #12
   15f4c:	udiv	r3, r6, r0
   15f50:	mls	r3, r3, r0, r6
   15f54:	cmp	r3, #0
   15f58:	beq	15f74 <__assert_fail@plt+0x4724>
   15f5c:	add	r2, r2, r1
   15f60:	add	r1, r1, #8
   15f64:	add	r0, r0, #2
   15f68:	add	r2, r2, #4
   15f6c:	cmp	r2, r6
   15f70:	bcc	15f4c <__assert_fail@plt+0x46fc>
   15f74:	udiv	r1, r6, r0
   15f78:	mls	r0, r1, r0, r6
   15f7c:	cmp	r0, #0
   15f80:	bne	15f94 <__assert_fail@plt+0x4744>
   15f84:	add	r6, r6, #2
   15f88:	cmn	r6, #1
   15f8c:	bne	15f34 <__assert_fail@plt+0x46e4>
   15f90:	b	16040 <__assert_fail@plt+0x47f0>
   15f94:	sub	r0, r6, #1
   15f98:	cmn	r0, #-536870910	; 0xe0000002
   15f9c:	bhi	16040 <__assert_fail@plt+0x47f0>
   15fa0:	ldr	r0, [r4, #8]
   15fa4:	cmp	r6, r0
   15fa8:	bne	15fbc <__assert_fail@plt+0x476c>
   15fac:	mov	r5, #1
   15fb0:	mov	r0, r5
   15fb4:	sub	sp, fp, #28
   15fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fbc:	mov	r0, r6
   15fc0:	mov	r1, #8
   15fc4:	bl	1a33c <__assert_fail@plt+0x8aec>
   15fc8:	cmp	r0, #0
   15fcc:	str	r0, [sp, #4]
   15fd0:	beq	16040 <__assert_fail@plt+0x47f0>
   15fd4:	add	r0, r0, r6, lsl #3
   15fd8:	mov	r1, #0
   15fdc:	add	r5, sp, #4
   15fe0:	mov	sl, r4
   15fe4:	mov	r2, #0
   15fe8:	str	r1, [sp, #20]
   15fec:	str	r1, [sp, #16]
   15ff0:	str	r6, [sp, #12]
   15ff4:	mov	r1, r4
   15ff8:	str	r0, [sp, #8]
   15ffc:	add	r0, r5, #20
   16000:	vld1.32	{d16-d17}, [r7]
   16004:	vst1.32	{d16-d17}, [r0]
   16008:	ldr	r0, [sl, #36]!	; 0x24
   1600c:	str	r0, [sp, #40]	; 0x28
   16010:	mov	r0, r5
   16014:	bl	16154 <__assert_fail@plt+0x4904>
   16018:	cmp	r0, #0
   1601c:	beq	1604c <__assert_fail@plt+0x47fc>
   16020:	ldr	r0, [r4]
   16024:	bl	1a9d8 <__assert_fail@plt+0x9188>
   16028:	mov	r0, #36	; 0x24
   1602c:	vld1.32	{d16-d17}, [r5], r0
   16030:	vst1.32	{d16-d17}, [r4], r0
   16034:	ldr	r0, [r5]
   16038:	mov	r5, #1
   1603c:	str	r0, [r4]
   16040:	mov	r0, r5
   16044:	sub	sp, fp, #28
   16048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1604c:	ldr	r0, [sp, #40]	; 0x28
   16050:	str	r0, [sl]
   16054:	ldr	r0, [sp, #8]
   16058:	ldr	r8, [sp, #4]
   1605c:	cmp	r8, r0
   16060:	str	r0, [sp]
   16064:	bcs	1611c <__assert_fail@plt+0x48cc>
   16068:	mov	r9, #0
   1606c:	ldr	r0, [r8]
   16070:	cmp	r0, #0
   16074:	bne	1609c <__assert_fail@plt+0x484c>
   16078:	b	16080 <__assert_fail@plt+0x4830>
   1607c:	str	r9, [r8, #4]
   16080:	ldr	r0, [sp]
   16084:	add	r8, r8, #8
   16088:	cmp	r8, r0
   1608c:	bcs	1611c <__assert_fail@plt+0x48cc>
   16090:	ldr	r0, [r8]
   16094:	cmp	r0, #0
   16098:	beq	16080 <__assert_fail@plt+0x4830>
   1609c:	ldr	r6, [r8, #4]
   160a0:	cmp	r6, #0
   160a4:	beq	1607c <__assert_fail@plt+0x482c>
   160a8:	ldr	r1, [r4, #8]
   160ac:	b	160d0 <__assert_fail@plt+0x4880>
   160b0:	add	r0, r3, r0, lsl #3
   160b4:	add	r0, r0, #4
   160b8:	ldr	r3, [r0]
   160bc:	cmp	r2, #0
   160c0:	str	r3, [r6, #4]
   160c4:	str	r6, [r0]
   160c8:	mov	r6, r2
   160cc:	beq	1607c <__assert_fail@plt+0x482c>
   160d0:	ldr	r5, [r6]
   160d4:	ldr	r2, [r4, #24]
   160d8:	mov	r0, r5
   160dc:	blx	r2
   160e0:	ldr	r1, [r4, #8]
   160e4:	cmp	r0, r1
   160e8:	bcs	1614c <__assert_fail@plt+0x48fc>
   160ec:	ldr	r3, [r4]
   160f0:	ldr	r2, [r6, #4]
   160f4:	ldr	r7, [r3, r0, lsl #3]
   160f8:	cmp	r7, #0
   160fc:	bne	160b0 <__assert_fail@plt+0x4860>
   16100:	str	r5, [r3, r0, lsl #3]
   16104:	ldr	r0, [r4, #12]
   16108:	add	r0, r0, #1
   1610c:	str	r0, [r4, #12]
   16110:	mov	r0, sl
   16114:	str	r9, [r6]
   16118:	b	160b8 <__assert_fail@plt+0x4868>
   1611c:	add	r1, sp, #4
   16120:	mov	r0, r4
   16124:	mov	r2, #0
   16128:	mov	r5, #0
   1612c:	bl	16154 <__assert_fail@plt+0x4904>
   16130:	cmp	r0, #0
   16134:	beq	1614c <__assert_fail@plt+0x48fc>
   16138:	ldr	r0, [sp, #4]
   1613c:	bl	1a9d8 <__assert_fail@plt+0x9188>
   16140:	mov	r0, r5
   16144:	sub	sp, fp, #28
   16148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1614c:	bl	11814 <abort@plt>
   16150:	svcmi	0x00800000
   16154:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16158:	add	fp, sp, #28
   1615c:	sub	sp, sp, #4
   16160:	ldr	r8, [r1]
   16164:	ldr	r3, [r1, #4]
   16168:	mov	r6, r0
   1616c:	mov	r0, #1
   16170:	str	r1, [sp]
   16174:	cmp	r8, r3
   16178:	bcs	1638c <__assert_fail@plt+0x4b3c>
   1617c:	add	sl, r6, #36	; 0x24
   16180:	cmp	r2, #0
   16184:	beq	16240 <__assert_fail@plt+0x49f0>
   16188:	mov	r9, #0
   1618c:	ldr	r1, [r8]
   16190:	cmp	r1, #0
   16194:	bne	161c0 <__assert_fail@plt+0x4970>
   16198:	b	161a8 <__assert_fail@plt+0x4958>
   1619c:	ldr	r0, [sp]
   161a0:	ldr	r3, [r0, #4]
   161a4:	str	r9, [r8, #4]
   161a8:	add	r8, r8, #8
   161ac:	cmp	r8, r3
   161b0:	bcs	16388 <__assert_fail@plt+0x4b38>
   161b4:	ldr	r1, [r8]
   161b8:	cmp	r1, #0
   161bc:	beq	161a8 <__assert_fail@plt+0x4958>
   161c0:	ldr	r7, [r8, #4]
   161c4:	cmp	r7, #0
   161c8:	beq	161a4 <__assert_fail@plt+0x4954>
   161cc:	ldr	r1, [r6, #8]
   161d0:	b	16204 <__assert_fail@plt+0x49b4>
   161d4:	str	r4, [r3, r0, lsl #3]
   161d8:	ldr	r0, [r6, #12]
   161dc:	add	r0, r0, #1
   161e0:	str	r0, [r6, #12]
   161e4:	mov	r0, sl
   161e8:	str	r9, [r7]
   161ec:	ldr	r3, [r0]
   161f0:	cmp	r2, #0
   161f4:	str	r3, [r7, #4]
   161f8:	str	r7, [r0]
   161fc:	mov	r7, r2
   16200:	beq	1619c <__assert_fail@plt+0x494c>
   16204:	ldr	r4, [r7]
   16208:	ldr	r2, [r6, #24]
   1620c:	mov	r0, r4
   16210:	blx	r2
   16214:	ldr	r1, [r6, #8]
   16218:	cmp	r0, r1
   1621c:	bcs	163a0 <__assert_fail@plt+0x4b50>
   16220:	ldr	r3, [r6]
   16224:	ldr	r2, [r7, #4]
   16228:	ldr	r5, [r3, r0, lsl #3]
   1622c:	cmp	r5, #0
   16230:	beq	161d4 <__assert_fail@plt+0x4984>
   16234:	add	r0, r3, r0, lsl #3
   16238:	add	r0, r0, #4
   1623c:	b	161ec <__assert_fail@plt+0x499c>
   16240:	mov	r5, #0
   16244:	ldr	r7, [r8]
   16248:	cmp	r7, #0
   1624c:	bne	16294 <__assert_fail@plt+0x4a44>
   16250:	b	1627c <__assert_fail@plt+0x4a2c>
   16254:	str	r7, [r9, r4, lsl #3]
   16258:	ldr	r0, [r6, #12]
   1625c:	add	r0, r0, #1
   16260:	str	r0, [r6, #12]
   16264:	ldr	r0, [sp]
   16268:	str	r5, [r8]
   1626c:	ldr	r1, [r0, #12]
   16270:	ldr	r3, [r0, #4]
   16274:	sub	r1, r1, #1
   16278:	str	r1, [r0, #12]
   1627c:	add	r8, r8, #8
   16280:	cmp	r8, r3
   16284:	bcs	16388 <__assert_fail@plt+0x4b38>
   16288:	ldr	r7, [r8]
   1628c:	cmp	r7, #0
   16290:	beq	1627c <__assert_fail@plt+0x4a2c>
   16294:	ldr	r9, [r8, #4]
   16298:	ldr	r1, [r6, #8]
   1629c:	cmp	r9, #0
   162a0:	bne	162c8 <__assert_fail@plt+0x4a78>
   162a4:	b	16318 <__assert_fail@plt+0x4ac8>
   162a8:	add	r0, r3, r0, lsl #3
   162ac:	add	r0, r0, #4
   162b0:	ldr	r3, [r0]
   162b4:	cmp	r2, #0
   162b8:	str	r3, [r9, #4]
   162bc:	str	r9, [r0]
   162c0:	mov	r9, r2
   162c4:	beq	16314 <__assert_fail@plt+0x4ac4>
   162c8:	ldr	r4, [r9]
   162cc:	ldr	r2, [r6, #24]
   162d0:	mov	r0, r4
   162d4:	blx	r2
   162d8:	ldr	r1, [r6, #8]
   162dc:	cmp	r0, r1
   162e0:	bcs	163a0 <__assert_fail@plt+0x4b50>
   162e4:	ldr	r3, [r6]
   162e8:	ldr	r2, [r9, #4]
   162ec:	ldr	r7, [r3, r0, lsl #3]
   162f0:	cmp	r7, #0
   162f4:	bne	162a8 <__assert_fail@plt+0x4a58>
   162f8:	str	r4, [r3, r0, lsl #3]
   162fc:	ldr	r0, [r6, #12]
   16300:	add	r0, r0, #1
   16304:	str	r0, [r6, #12]
   16308:	mov	r0, sl
   1630c:	str	r5, [r9]
   16310:	b	162b0 <__assert_fail@plt+0x4a60>
   16314:	ldr	r7, [r8]
   16318:	str	r5, [r8, #4]
   1631c:	mov	r0, r7
   16320:	ldr	r2, [r6, #24]
   16324:	blx	r2
   16328:	mov	r4, r0
   1632c:	ldr	r0, [r6, #8]
   16330:	cmp	r4, r0
   16334:	bcs	163a0 <__assert_fail@plt+0x4b50>
   16338:	ldr	r9, [r6]
   1633c:	ldr	r0, [r9, r4, lsl #3]
   16340:	cmp	r0, #0
   16344:	beq	16254 <__assert_fail@plt+0x4a04>
   16348:	ldr	r0, [sl]
   1634c:	cmp	r0, #0
   16350:	beq	16360 <__assert_fail@plt+0x4b10>
   16354:	ldr	r1, [r0, #4]
   16358:	str	r1, [sl]
   1635c:	b	16370 <__assert_fail@plt+0x4b20>
   16360:	mov	r0, #8
   16364:	bl	1a390 <__assert_fail@plt+0x8b40>
   16368:	cmp	r0, #0
   1636c:	beq	16394 <__assert_fail@plt+0x4b44>
   16370:	add	r1, r9, r4, lsl #3
   16374:	str	r7, [r0]
   16378:	ldr	r2, [r1, #4]
   1637c:	str	r2, [r0, #4]
   16380:	str	r0, [r1, #4]
   16384:	b	16264 <__assert_fail@plt+0x4a14>
   16388:	mov	r0, #1
   1638c:	sub	sp, fp, #28
   16390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16394:	mov	r0, #0
   16398:	sub	sp, fp, #28
   1639c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163a0:	bl	11814 <abort@plt>
   163a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163a8:	add	fp, sp, #28
   163ac:	sub	sp, sp, #4
   163b0:	cmp	r1, #0
   163b4:	beq	166f0 <__assert_fail@plt+0x4ea0>
   163b8:	mov	r8, r2
   163bc:	mov	sl, r1
   163c0:	ldr	r1, [r0, #8]
   163c4:	ldr	r2, [r0, #24]
   163c8:	mov	r4, r0
   163cc:	mov	r0, sl
   163d0:	blx	r2
   163d4:	mov	r7, r0
   163d8:	ldr	r0, [r4, #8]
   163dc:	cmp	r7, r0
   163e0:	bcs	166f0 <__assert_fail@plt+0x4ea0>
   163e4:	ldr	r5, [r4]
   163e8:	mov	r9, r5
   163ec:	ldr	r1, [r9, r7, lsl #3]!
   163f0:	cmp	r1, #0
   163f4:	beq	16488 <__assert_fail@plt+0x4c38>
   163f8:	cmp	r1, sl
   163fc:	beq	16428 <__assert_fail@plt+0x4bd8>
   16400:	ldr	r2, [r4, #28]
   16404:	mov	r0, sl
   16408:	blx	r2
   1640c:	cmp	r0, #0
   16410:	mov	r6, r9
   16414:	beq	16444 <__assert_fail@plt+0x4bf4>
   16418:	ldr	r0, [r6]
   1641c:	cmp	r0, #0
   16420:	bne	1642c <__assert_fail@plt+0x4bdc>
   16424:	b	16488 <__assert_fail@plt+0x4c38>
   16428:	mov	r0, sl
   1642c:	cmp	r8, #0
   16430:	mov	r7, #0
   16434:	strne	r0, [r8]
   16438:	mov	r0, r7
   1643c:	sub	sp, fp, #28
   16440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16444:	add	r6, r5, r7, lsl #3
   16448:	ldr	r0, [r6, #4]!
   1644c:	cmp	r0, #0
   16450:	beq	16488 <__assert_fail@plt+0x4c38>
   16454:	ldr	r1, [r0]
   16458:	cmp	r1, sl
   1645c:	beq	1647c <__assert_fail@plt+0x4c2c>
   16460:	ldr	r2, [r4, #28]
   16464:	mov	r0, sl
   16468:	blx	r2
   1646c:	ldr	r6, [r6]
   16470:	cmp	r0, #0
   16474:	beq	16448 <__assert_fail@plt+0x4bf8>
   16478:	b	16418 <__assert_fail@plt+0x4bc8>
   1647c:	mov	r0, sl
   16480:	cmp	r0, #0
   16484:	bne	1642c <__assert_fail@plt+0x4bdc>
   16488:	vldr	s0, [r4, #8]
   1648c:	vldr	s2, [r4, #12]
   16490:	ldr	r0, [r4, #20]
   16494:	vcvt.f32.u32	s0, s0
   16498:	vcvt.f32.u32	s4, s2
   1649c:	vldr	s2, [r0, #8]
   164a0:	vmul.f32	s6, s2, s0
   164a4:	vcmpe.f32	s6, s4
   164a8:	vmrs	APSR_nzcv, fpscr
   164ac:	bpl	16610 <__assert_fail@plt+0x4dc0>
   164b0:	movw	r1, #49640	; 0xc1e8
   164b4:	movt	r1, #1
   164b8:	cmp	r0, r1
   164bc:	beq	16558 <__assert_fail@plt+0x4d08>
   164c0:	vldr	s6, [pc, #556]	; 166f4 <__assert_fail@plt+0x4ea4>
   164c4:	vcmpe.f32	s2, s6
   164c8:	vmrs	APSR_nzcv, fpscr
   164cc:	ble	16534 <__assert_fail@plt+0x4ce4>
   164d0:	vldr	s8, [pc, #544]	; 166f8 <__assert_fail@plt+0x4ea8>
   164d4:	vcmpe.f32	s2, s8
   164d8:	vmrs	APSR_nzcv, fpscr
   164dc:	bpl	16534 <__assert_fail@plt+0x4ce4>
   164e0:	vldr	s8, [pc, #532]	; 166fc <__assert_fail@plt+0x4eac>
   164e4:	vldr	s10, [r0, #12]
   164e8:	vcmpe.f32	s10, s8
   164ec:	vmrs	APSR_nzcv, fpscr
   164f0:	ble	16534 <__assert_fail@plt+0x4ce4>
   164f4:	vldr	s8, [r0]
   164f8:	vcmpe.f32	s8, #0.0
   164fc:	vmrs	APSR_nzcv, fpscr
   16500:	blt	16534 <__assert_fail@plt+0x4ce4>
   16504:	vadd.f32	s6, s8, s6
   16508:	vcmpe.f32	s6, s2
   1650c:	vmrs	APSR_nzcv, fpscr
   16510:	bpl	16534 <__assert_fail@plt+0x4ce4>
   16514:	vldr	s8, [r0, #4]
   16518:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1651c:	vcmpe.f32	s8, s10
   16520:	vmrs	APSR_nzcv, fpscr
   16524:	bhi	16534 <__assert_fail@plt+0x4ce4>
   16528:	vcmpe.f32	s6, s8
   1652c:	vmrs	APSR_nzcv, fpscr
   16530:	bmi	16544 <__assert_fail@plt+0x4cf4>
   16534:	vldr	s2, [pc, #452]	; 16700 <__assert_fail@plt+0x4eb0>
   16538:	movw	r0, #49640	; 0xc1e8
   1653c:	movt	r0, #1
   16540:	str	r0, [r4, #20]
   16544:	vmul.f32	s6, s2, s0
   16548:	vcmpe.f32	s6, s4
   1654c:	vmrs	APSR_nzcv, fpscr
   16550:	bmi	1656c <__assert_fail@plt+0x4d1c>
   16554:	b	16610 <__assert_fail@plt+0x4dc0>
   16558:	mov	r0, r1
   1655c:	vmul.f32	s6, s2, s0
   16560:	vcmpe.f32	s6, s4
   16564:	vmrs	APSR_nzcv, fpscr
   16568:	bpl	16610 <__assert_fail@plt+0x4dc0>
   1656c:	vldr	s4, [r0, #12]
   16570:	ldrb	r0, [r0, #16]
   16574:	mvn	r7, #0
   16578:	cmp	r0, #0
   1657c:	vmul.f32	s0, s4, s0
   16580:	vldr	s4, [pc, #380]	; 16704 <__assert_fail@plt+0x4eb4>
   16584:	vmul.f32	s2, s2, s0
   16588:	vseleq.f32	s0, s2, s0
   1658c:	vcmpe.f32	s0, s4
   16590:	vmrs	APSR_nzcv, fpscr
   16594:	bge	16684 <__assert_fail@plt+0x4e34>
   16598:	vcvt.u32.f32	s0, s0
   1659c:	mov	r0, r4
   165a0:	vmov	r1, s0
   165a4:	bl	15ecc <__assert_fail@plt+0x467c>
   165a8:	cmp	r0, #0
   165ac:	beq	16684 <__assert_fail@plt+0x4e34>
   165b0:	ldr	r1, [r4, #8]
   165b4:	ldr	r2, [r4, #24]
   165b8:	mov	r0, sl
   165bc:	blx	r2
   165c0:	mov	r7, r0
   165c4:	ldr	r0, [r4, #8]
   165c8:	cmp	r7, r0
   165cc:	bcs	166f0 <__assert_fail@plt+0x4ea0>
   165d0:	ldr	r5, [r4]
   165d4:	mov	r9, r5
   165d8:	ldr	r1, [r9, r7, lsl #3]!
   165dc:	cmp	r1, #0
   165e0:	beq	16610 <__assert_fail@plt+0x4dc0>
   165e4:	cmp	r1, sl
   165e8:	mov	r0, sl
   165ec:	beq	16608 <__assert_fail@plt+0x4db8>
   165f0:	ldr	r2, [r4, #28]
   165f4:	mov	r0, sl
   165f8:	blx	r2
   165fc:	cmp	r0, #0
   16600:	beq	166a0 <__assert_fail@plt+0x4e50>
   16604:	ldr	r0, [r9]
   16608:	cmp	r0, #0
   1660c:	bne	166f0 <__assert_fail@plt+0x4ea0>
   16610:	ldr	r0, [r9]
   16614:	cmp	r0, #0
   16618:	beq	16634 <__assert_fail@plt+0x4de4>
   1661c:	ldr	r0, [r4, #36]	; 0x24
   16620:	cmp	r0, #0
   16624:	beq	16654 <__assert_fail@plt+0x4e04>
   16628:	ldr	r1, [r0, #4]
   1662c:	str	r1, [r4, #36]	; 0x24
   16630:	b	16664 <__assert_fail@plt+0x4e14>
   16634:	str	sl, [r9]
   16638:	ldr	r0, [r4, #12]
   1663c:	ldr	r1, [r4, #16]
   16640:	add	r0, r0, #1
   16644:	add	r1, r1, #1
   16648:	str	r0, [r4, #12]
   1664c:	str	r1, [r4, #16]
   16650:	b	16680 <__assert_fail@plt+0x4e30>
   16654:	mov	r0, #8
   16658:	bl	1a390 <__assert_fail@plt+0x8b40>
   1665c:	cmp	r0, #0
   16660:	beq	16690 <__assert_fail@plt+0x4e40>
   16664:	str	sl, [r0]
   16668:	ldr	r1, [r9, #4]
   1666c:	str	r1, [r0, #4]
   16670:	str	r0, [r9, #4]
   16674:	ldr	r0, [r4, #16]
   16678:	add	r0, r0, #1
   1667c:	str	r0, [r4, #16]
   16680:	mov	r7, #1
   16684:	mov	r0, r7
   16688:	sub	sp, fp, #28
   1668c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16690:	mvn	r7, #0
   16694:	mov	r0, r7
   16698:	sub	sp, fp, #28
   1669c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166a0:	add	r6, r5, r7, lsl #3
   166a4:	ldr	r0, [r6, #4]!
   166a8:	cmp	r0, #0
   166ac:	beq	16610 <__assert_fail@plt+0x4dc0>
   166b0:	ldr	r1, [r0]
   166b4:	cmp	r1, sl
   166b8:	beq	166e4 <__assert_fail@plt+0x4e94>
   166bc:	ldr	r2, [r4, #28]
   166c0:	mov	r0, sl
   166c4:	blx	r2
   166c8:	ldr	r6, [r6]
   166cc:	cmp	r0, #0
   166d0:	beq	166a4 <__assert_fail@plt+0x4e54>
   166d4:	ldr	r0, [r6]
   166d8:	cmp	r0, #0
   166dc:	beq	16610 <__assert_fail@plt+0x4dc0>
   166e0:	b	166f0 <__assert_fail@plt+0x4ea0>
   166e4:	mov	r0, sl
   166e8:	cmp	r0, #0
   166ec:	beq	16610 <__assert_fail@plt+0x4dc0>
   166f0:	bl	11814 <abort@plt>
   166f4:	stclcc	12, cr12, [ip, #820]	; 0x334
   166f8:	svccc	0x00666666
   166fc:	svccc	0x008ccccd
   16700:	svccc	0x004ccccd
   16704:	svcmi	0x00800000
   16708:	push	{r4, sl, fp, lr}
   1670c:	add	fp, sp, #8
   16710:	sub	sp, sp, #8
   16714:	add	r2, sp, #4
   16718:	mov	r4, r1
   1671c:	bl	163a4 <__assert_fail@plt+0x4b54>
   16720:	cmn	r0, #1
   16724:	beq	16740 <__assert_fail@plt+0x4ef0>
   16728:	ldr	r1, [sp, #4]
   1672c:	cmp	r0, #0
   16730:	moveq	r4, r1
   16734:	mov	r0, r4
   16738:	sub	sp, fp, #8
   1673c:	pop	{r4, sl, fp, pc}
   16740:	mov	r4, #0
   16744:	mov	r0, r4
   16748:	sub	sp, fp, #8
   1674c:	pop	{r4, sl, fp, pc}
   16750:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16754:	add	fp, sp, #24
   16758:	mov	r9, r1
   1675c:	ldr	r1, [r0, #8]
   16760:	ldr	r2, [r0, #24]
   16764:	mov	r5, r0
   16768:	mov	r0, r9
   1676c:	blx	r2
   16770:	mov	r7, r0
   16774:	ldr	r0, [r5, #8]
   16778:	cmp	r7, r0
   1677c:	bcs	169f0 <__assert_fail@plt+0x51a0>
   16780:	ldr	r6, [r5]
   16784:	mov	r8, #0
   16788:	mov	r4, r6
   1678c:	ldr	r1, [r4, r7, lsl #3]!
   16790:	cmp	r1, #0
   16794:	beq	16848 <__assert_fail@plt+0x4ff8>
   16798:	cmp	r1, r9
   1679c:	beq	167b8 <__assert_fail@plt+0x4f68>
   167a0:	ldr	r2, [r5, #28]
   167a4:	mov	r0, r9
   167a8:	blx	r2
   167ac:	cmp	r0, #0
   167b0:	beq	167f0 <__assert_fail@plt+0x4fa0>
   167b4:	ldr	r9, [r4]
   167b8:	add	r0, r6, r7, lsl #3
   167bc:	ldr	r0, [r0, #4]
   167c0:	cmp	r0, #0
   167c4:	beq	16838 <__assert_fail@plt+0x4fe8>
   167c8:	ldm	r0, {r1, r2}
   167cc:	stm	r4, {r1, r2}
   167d0:	mov	r1, #0
   167d4:	str	r1, [r0]
   167d8:	ldr	r1, [r5, #36]	; 0x24
   167dc:	str	r1, [r0, #4]
   167e0:	str	r0, [r5, #36]	; 0x24
   167e4:	cmp	r9, #0
   167e8:	bne	16880 <__assert_fail@plt+0x5030>
   167ec:	b	16848 <__assert_fail@plt+0x4ff8>
   167f0:	add	r7, r6, r7, lsl #3
   167f4:	ldr	r0, [r7, #4]!
   167f8:	cmp	r0, #0
   167fc:	beq	16848 <__assert_fail@plt+0x4ff8>
   16800:	ldr	r1, [r0]
   16804:	cmp	r1, r9
   16808:	beq	16850 <__assert_fail@plt+0x5000>
   1680c:	ldr	r2, [r5, #28]
   16810:	mov	r0, r9
   16814:	blx	r2
   16818:	ldr	r1, [r7]
   1681c:	cmp	r0, #0
   16820:	bne	16858 <__assert_fail@plt+0x5008>
   16824:	ldr	r0, [r1, #4]!
   16828:	mov	r7, r1
   1682c:	cmp	r0, #0
   16830:	bne	16800 <__assert_fail@plt+0x4fb0>
   16834:	b	16848 <__assert_fail@plt+0x4ff8>
   16838:	mov	r0, #0
   1683c:	str	r0, [r4]
   16840:	cmp	r9, #0
   16844:	bne	16880 <__assert_fail@plt+0x5030>
   16848:	mov	r0, r8
   1684c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16850:	mov	r1, r0
   16854:	b	1685c <__assert_fail@plt+0x500c>
   16858:	ldr	r9, [r1]
   1685c:	ldr	r0, [r1, #4]
   16860:	str	r0, [r7]
   16864:	mov	r0, #0
   16868:	str	r0, [r1]
   1686c:	ldr	r0, [r5, #36]	; 0x24
   16870:	str	r0, [r1, #4]
   16874:	str	r1, [r5, #36]	; 0x24
   16878:	cmp	r9, #0
   1687c:	beq	16848 <__assert_fail@plt+0x4ff8>
   16880:	ldr	r0, [r5, #16]
   16884:	sub	r0, r0, #1
   16888:	str	r0, [r5, #16]
   1688c:	ldr	r0, [r4]
   16890:	cmp	r0, #0
   16894:	bne	169e4 <__assert_fail@plt+0x5194>
   16898:	ldr	r0, [r5, #12]
   1689c:	vldr	s0, [r5, #8]
   168a0:	sub	r1, r0, #1
   168a4:	str	r1, [r5, #12]
   168a8:	vmov	s2, r1
   168ac:	ldr	r0, [r5, #20]
   168b0:	vcvt.f32.u32	s0, s0
   168b4:	vcvt.f32.u32	s2, s2
   168b8:	vldr	s4, [r0]
   168bc:	vmul.f32	s6, s4, s0
   168c0:	vcmpe.f32	s6, s2
   168c4:	vmrs	APSR_nzcv, fpscr
   168c8:	ble	169e4 <__assert_fail@plt+0x5194>
   168cc:	movw	r1, #49640	; 0xc1e8
   168d0:	movt	r1, #1
   168d4:	cmp	r0, r1
   168d8:	beq	16974 <__assert_fail@plt+0x5124>
   168dc:	vldr	s8, [pc, #272]	; 169f4 <__assert_fail@plt+0x51a4>
   168e0:	vldr	s6, [r0, #8]
   168e4:	vcmpe.f32	s6, s8
   168e8:	vmrs	APSR_nzcv, fpscr
   168ec:	ble	16950 <__assert_fail@plt+0x5100>
   168f0:	vldr	s10, [pc, #256]	; 169f8 <__assert_fail@plt+0x51a8>
   168f4:	vcmpe.f32	s6, s10
   168f8:	vmrs	APSR_nzcv, fpscr
   168fc:	bpl	16950 <__assert_fail@plt+0x5100>
   16900:	vcmpe.f32	s4, #0.0
   16904:	vmrs	APSR_nzcv, fpscr
   16908:	blt	16950 <__assert_fail@plt+0x5100>
   1690c:	vldr	s10, [r0, #12]
   16910:	vldr	s12, [pc, #228]	; 169fc <__assert_fail@plt+0x51ac>
   16914:	vcmpe.f32	s10, s12
   16918:	vmrs	APSR_nzcv, fpscr
   1691c:	ble	16950 <__assert_fail@plt+0x5100>
   16920:	vadd.f32	s8, s4, s8
   16924:	vcmpe.f32	s8, s6
   16928:	vmrs	APSR_nzcv, fpscr
   1692c:	bpl	16950 <__assert_fail@plt+0x5100>
   16930:	vldr	s6, [r0, #4]
   16934:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16938:	vcmpe.f32	s6, s10
   1693c:	vmrs	APSR_nzcv, fpscr
   16940:	bhi	16950 <__assert_fail@plt+0x5100>
   16944:	vcmpe.f32	s8, s6
   16948:	vmrs	APSR_nzcv, fpscr
   1694c:	bmi	16960 <__assert_fail@plt+0x5110>
   16950:	vldr	s4, [pc, #168]	; 16a00 <__assert_fail@plt+0x51b0>
   16954:	movw	r0, #49640	; 0xc1e8
   16958:	movt	r0, #1
   1695c:	str	r0, [r5, #20]
   16960:	vmul.f32	s4, s4, s0
   16964:	vcmpe.f32	s4, s2
   16968:	vmrs	APSR_nzcv, fpscr
   1696c:	bgt	16988 <__assert_fail@plt+0x5138>
   16970:	b	169e4 <__assert_fail@plt+0x5194>
   16974:	mov	r0, r1
   16978:	vmul.f32	s4, s4, s0
   1697c:	vcmpe.f32	s4, s2
   16980:	vmrs	APSR_nzcv, fpscr
   16984:	ble	169e4 <__assert_fail@plt+0x5194>
   16988:	vldr	s2, [r0, #4]
   1698c:	ldrb	r1, [r0, #16]
   16990:	cmp	r1, #0
   16994:	vmul.f32	s0, s2, s0
   16998:	bne	169a4 <__assert_fail@plt+0x5154>
   1699c:	vldr	s2, [r0, #8]
   169a0:	vmul.f32	s0, s0, s2
   169a4:	vcvt.u32.f32	s0, s0
   169a8:	mov	r0, r5
   169ac:	vmov	r1, s0
   169b0:	bl	15ecc <__assert_fail@plt+0x467c>
   169b4:	cmp	r0, #0
   169b8:	bne	169e4 <__assert_fail@plt+0x5194>
   169bc:	ldr	r0, [r5, #36]	; 0x24
   169c0:	cmp	r0, #0
   169c4:	beq	169dc <__assert_fail@plt+0x518c>
   169c8:	ldr	r4, [r0, #4]
   169cc:	bl	1a9d8 <__assert_fail@plt+0x9188>
   169d0:	cmp	r4, #0
   169d4:	mov	r0, r4
   169d8:	bne	169c8 <__assert_fail@plt+0x5178>
   169dc:	mov	r0, #0
   169e0:	str	r0, [r5, #36]	; 0x24
   169e4:	mov	r8, r9
   169e8:	mov	r0, r8
   169ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   169f0:	bl	11814 <abort@plt>
   169f4:	stclcc	12, cr12, [ip, #820]	; 0x334
   169f8:	svccc	0x00666666
   169fc:	svccc	0x008ccccd
   16a00:	andeq	r0, r0, r0
   16a04:	b	16750 <__assert_fail@plt+0x4f00>
   16a08:	vdup.32	q8, r1
   16a0c:	mov	r2, #0
   16a10:	str	r2, [r0, #20]
   16a14:	str	r2, [r0, #24]
   16a18:	mov	r2, #1
   16a1c:	strb	r2, [r0, #28]
   16a20:	vst1.32	{d16-d17}, [r0]!
   16a24:	str	r1, [r0]
   16a28:	bx	lr
   16a2c:	ldrb	r0, [r0, #28]
   16a30:	bx	lr
   16a34:	push	{fp, lr}
   16a38:	mov	fp, sp
   16a3c:	ldrb	r3, [r0, #28]
   16a40:	ldr	r2, [r0, #20]
   16a44:	eor	lr, r3, #1
   16a48:	add	r2, r2, lr
   16a4c:	and	r3, r2, #3
   16a50:	ldr	ip, [r0, r3, lsl #2]
   16a54:	str	r1, [r0, r3, lsl #2]
   16a58:	str	r3, [r0, #20]
   16a5c:	ldr	r1, [r0, #24]
   16a60:	cmp	r3, r1
   16a64:	addeq	r1, r2, lr
   16a68:	andeq	r1, r1, #3
   16a6c:	streq	r1, [r0, #24]
   16a70:	mov	r1, #0
   16a74:	strb	r1, [r0, #28]
   16a78:	mov	r0, ip
   16a7c:	pop	{fp, pc}
   16a80:	push	{fp, lr}
   16a84:	mov	fp, sp
   16a88:	ldrb	r1, [r0, #28]
   16a8c:	cmp	r1, #0
   16a90:	bne	16acc <__assert_fail@plt+0x527c>
   16a94:	ldr	r3, [r0, #20]
   16a98:	ldr	r2, [r0, #16]
   16a9c:	ldr	r1, [r0, r3, lsl #2]
   16aa0:	str	r2, [r0, r3, lsl #2]
   16aa4:	ldr	r2, [r0, #20]
   16aa8:	ldr	r3, [r0, #24]
   16aac:	cmp	r2, r3
   16ab0:	moveq	r2, #1
   16ab4:	strbeq	r2, [r0, #28]
   16ab8:	subne	r2, r2, #1
   16abc:	andne	r2, r2, #3
   16ac0:	strne	r2, [r0, #20]
   16ac4:	mov	r0, r1
   16ac8:	pop	{fp, pc}
   16acc:	bl	11814 <abort@plt>
   16ad0:	sub	sp, sp, #4
   16ad4:	push	{fp, lr}
   16ad8:	mov	fp, sp
   16adc:	sub	sp, sp, #4
   16ae0:	str	r3, [fp, #8]
   16ae4:	tst	r2, #64	; 0x40
   16ae8:	mov	r3, #0
   16aec:	ldrne	r3, [fp, #8]
   16af0:	bl	116b8 <openat64@plt>
   16af4:	bl	19638 <__assert_fail@plt+0x7de8>
   16af8:	mov	sp, fp
   16afc:	pop	{fp, lr}
   16b00:	add	sp, sp, #4
   16b04:	bx	lr
   16b08:	push	{r4, r5, r6, sl, fp, lr}
   16b0c:	add	fp, sp, #16
   16b10:	orr	r2, r2, #18688	; 0x4900
   16b14:	mov	r4, r3
   16b18:	orr	r2, r2, #524288	; 0x80000
   16b1c:	bl	16ad0 <__assert_fail@plt+0x5280>
   16b20:	mov	r5, r0
   16b24:	mov	r0, #0
   16b28:	cmp	r5, #0
   16b2c:	bmi	16b64 <__assert_fail@plt+0x5314>
   16b30:	mov	r0, r5
   16b34:	bl	1179c <fdopendir@plt>
   16b38:	cmp	r0, #0
   16b3c:	beq	16b48 <__assert_fail@plt+0x52f8>
   16b40:	str	r5, [r4]
   16b44:	pop	{r4, r5, r6, sl, fp, pc}
   16b48:	bl	116d0 <__errno_location@plt>
   16b4c:	ldr	r6, [r0]
   16b50:	mov	r4, r0
   16b54:	mov	r0, r5
   16b58:	bl	11820 <close@plt>
   16b5c:	mov	r0, #0
   16b60:	str	r6, [r4]
   16b64:	pop	{r4, r5, r6, sl, fp, pc}
   16b68:	push	{r4, r5, fp, lr}
   16b6c:	add	fp, sp, #8
   16b70:	cmp	r0, #0
   16b74:	beq	16c08 <__assert_fail@plt+0x53b8>
   16b78:	mov	r1, #47	; 0x2f
   16b7c:	mov	r4, r0
   16b80:	bl	11778 <strrchr@plt>
   16b84:	cmp	r0, #0
   16b88:	mov	r5, r4
   16b8c:	addne	r5, r0, #1
   16b90:	sub	r0, r5, r4
   16b94:	cmp	r0, #7
   16b98:	blt	16bec <__assert_fail@plt+0x539c>
   16b9c:	movw	r1, #49716	; 0xc234
   16ba0:	sub	r0, r5, #7
   16ba4:	mov	r2, #7
   16ba8:	movt	r1, #1
   16bac:	bl	11808 <strncmp@plt>
   16bb0:	cmp	r0, #0
   16bb4:	bne	16bec <__assert_fail@plt+0x539c>
   16bb8:	movw	r1, #49724	; 0xc23c
   16bbc:	mov	r0, r5
   16bc0:	mov	r2, #3
   16bc4:	movt	r1, #1
   16bc8:	bl	11808 <strncmp@plt>
   16bcc:	cmp	r0, #0
   16bd0:	beq	16bdc <__assert_fail@plt+0x538c>
   16bd4:	mov	r4, r5
   16bd8:	b	16bec <__assert_fail@plt+0x539c>
   16bdc:	movw	r0, #53672	; 0xd1a8
   16be0:	add	r4, r5, #3
   16be4:	movt	r0, #2
   16be8:	str	r4, [r0]
   16bec:	movw	r0, #53676	; 0xd1ac
   16bf0:	movt	r0, #2
   16bf4:	str	r4, [r0]
   16bf8:	movw	r0, #53760	; 0xd200
   16bfc:	movt	r0, #2
   16c00:	str	r4, [r0]
   16c04:	pop	{r4, r5, fp, pc}
   16c08:	movw	r0, #53688	; 0xd1b8
   16c0c:	mov	r1, #55	; 0x37
   16c10:	mov	r2, #1
   16c14:	movt	r0, #2
   16c18:	ldr	r3, [r0]
   16c1c:	movw	r0, #49660	; 0xc1fc
   16c20:	movt	r0, #1
   16c24:	bl	115a4 <fwrite@plt>
   16c28:	bl	11814 <abort@plt>
   16c2c:	push	{r4, r5, r6, sl, fp, lr}
   16c30:	add	fp, sp, #16
   16c34:	mov	r4, r0
   16c38:	movw	r0, #53768	; 0xd208
   16c3c:	movt	r0, #2
   16c40:	cmp	r4, #0
   16c44:	moveq	r4, r0
   16c48:	bl	116d0 <__errno_location@plt>
   16c4c:	ldr	r6, [r0]
   16c50:	mov	r5, r0
   16c54:	mov	r0, r4
   16c58:	mov	r1, #48	; 0x30
   16c5c:	bl	1a1a0 <__assert_fail@plt+0x8950>
   16c60:	str	r6, [r5]
   16c64:	pop	{r4, r5, r6, sl, fp, pc}
   16c68:	movw	r1, #53768	; 0xd208
   16c6c:	cmp	r0, #0
   16c70:	movt	r1, #2
   16c74:	movne	r1, r0
   16c78:	ldr	r0, [r1]
   16c7c:	bx	lr
   16c80:	movw	r2, #53768	; 0xd208
   16c84:	cmp	r0, #0
   16c88:	movt	r2, #2
   16c8c:	movne	r2, r0
   16c90:	str	r1, [r2]
   16c94:	bx	lr
   16c98:	movw	r3, #53768	; 0xd208
   16c9c:	cmp	r0, #0
   16ca0:	and	r2, r2, #1
   16ca4:	movt	r3, #2
   16ca8:	movne	r3, r0
   16cac:	ubfx	r0, r1, #5, #3
   16cb0:	and	r1, r1, #31
   16cb4:	add	ip, r3, r0, lsl #2
   16cb8:	mov	r0, #1
   16cbc:	ldr	r3, [ip, #8]
   16cc0:	and	r0, r0, r3, lsr r1
   16cc4:	eor	r2, r0, r2
   16cc8:	eor	r1, r3, r2, lsl r1
   16ccc:	str	r1, [ip, #8]
   16cd0:	bx	lr
   16cd4:	movw	r2, #53768	; 0xd208
   16cd8:	cmp	r0, #0
   16cdc:	movt	r2, #2
   16ce0:	movne	r2, r0
   16ce4:	ldr	r0, [r2, #4]
   16ce8:	str	r1, [r2, #4]
   16cec:	bx	lr
   16cf0:	push	{fp, lr}
   16cf4:	mov	fp, sp
   16cf8:	movw	r3, #53768	; 0xd208
   16cfc:	cmp	r0, #0
   16d00:	movt	r3, #2
   16d04:	movne	r3, r0
   16d08:	cmp	r1, #0
   16d0c:	mov	r0, #10
   16d10:	cmpne	r2, #0
   16d14:	str	r0, [r3]
   16d18:	bne	16d20 <__assert_fail@plt+0x54d0>
   16d1c:	bl	11814 <abort@plt>
   16d20:	str	r1, [r3, #40]	; 0x28
   16d24:	str	r2, [r3, #44]	; 0x2c
   16d28:	pop	{fp, pc}
   16d2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d30:	add	fp, sp, #28
   16d34:	sub	sp, sp, #20
   16d38:	mov	r7, r0
   16d3c:	ldr	r0, [fp, #8]
   16d40:	movw	r5, #53768	; 0xd208
   16d44:	mov	r8, r3
   16d48:	mov	r9, r2
   16d4c:	mov	sl, r1
   16d50:	movt	r5, #2
   16d54:	cmp	r0, #0
   16d58:	movne	r5, r0
   16d5c:	bl	116d0 <__errno_location@plt>
   16d60:	ldr	r2, [r5, #40]	; 0x28
   16d64:	ldr	r3, [r5, #44]	; 0x2c
   16d68:	mov	r4, r0
   16d6c:	ldm	r5, {r0, r1}
   16d70:	add	r5, r5, #8
   16d74:	ldr	r6, [r4]
   16d78:	stm	sp, {r0, r1, r5}
   16d7c:	mov	r0, r7
   16d80:	mov	r1, sl
   16d84:	str	r2, [sp, #12]
   16d88:	str	r3, [sp, #16]
   16d8c:	mov	r2, r9
   16d90:	mov	r3, r8
   16d94:	bl	16da4 <__assert_fail@plt+0x5554>
   16d98:	str	r6, [r4]
   16d9c:	sub	sp, fp, #28
   16da0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16da4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16da8:	add	fp, sp, #28
   16dac:	sub	sp, sp, #156	; 0x9c
   16db0:	str	r0, [fp, #-84]	; 0xffffffac
   16db4:	add	r0, r2, #1
   16db8:	mov	r6, r1
   16dbc:	mov	r7, r3
   16dc0:	str	r2, [fp, #-80]	; 0xffffffb0
   16dc4:	str	r0, [sp, #80]	; 0x50
   16dc8:	ldr	r0, [fp, #12]
   16dcc:	and	r1, r0, #1
   16dd0:	str	r1, [sp, #36]	; 0x24
   16dd4:	and	r1, r0, #4
   16dd8:	str	r1, [sp, #32]
   16ddc:	ubfx	r8, r0, #1, #1
   16de0:	bl	115bc <__ctype_get_mb_cur_max@plt>
   16de4:	str	r0, [sp, #40]	; 0x28
   16de8:	ldr	r0, [fp, #24]
   16dec:	ldr	r4, [fp, #8]
   16df0:	mov	r1, #0
   16df4:	str	r1, [fp, #-52]	; 0xffffffcc
   16df8:	mov	r1, #0
   16dfc:	str	r1, [sp, #60]	; 0x3c
   16e00:	mov	r1, #1
   16e04:	str	r1, [sp, #84]	; 0x54
   16e08:	str	r0, [sp, #76]	; 0x4c
   16e0c:	ldr	r0, [fp, #20]
   16e10:	str	r0, [sp, #72]	; 0x48
   16e14:	mov	r0, #0
   16e18:	str	r0, [sp, #56]	; 0x38
   16e1c:	mov	r0, #0
   16e20:	str	r0, [fp, #-88]	; 0xffffffa8
   16e24:	mov	r0, #0
   16e28:	str	r0, [fp, #-72]	; 0xffffffb8
   16e2c:	mov	r0, #0
   16e30:	cmp	r4, #10
   16e34:	bhi	18150 <__assert_fail@plt+0x6900>
   16e38:	add	r1, pc, #24
   16e3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16e40:	ldr	lr, [fp, #-80]	; 0xffffffb0
   16e44:	mov	r5, r6
   16e48:	mov	r9, #0
   16e4c:	mov	r2, #1
   16e50:	mov	r3, #0
   16e54:	ldr	pc, [r1, r4, lsl #2]
   16e58:	andeq	r6, r1, r0, lsr #30
   16e5c:	andeq	r6, r1, ip, asr pc
   16e60:	andeq	r6, r1, r0, lsr pc
   16e64:	andeq	r6, r1, r8, lsl pc
   16e68:	andeq	r6, r1, r0, asr pc
   16e6c:			; <UNDEFINED> instruction: 0x00016fb4
   16e70:	andeq	r6, r1, r0, asr #30
   16e74:	andeq	r7, r1, ip, lsr #4
   16e78:	andeq	r6, r1, r4, lsl #29
   16e7c:	andeq	r6, r1, r4, lsl #29
   16e80:	strheq	r7, [r1], -ip
   16e84:	movw	r6, #49806	; 0xc28e
   16e88:	mov	r0, #0
   16e8c:	mov	r2, #5
   16e90:	movt	r6, #1
   16e94:	mov	r1, r6
   16e98:	bl	11538 <dcgettext@plt>
   16e9c:	cmp	r0, r6
   16ea0:	str	r0, [sp, #72]	; 0x48
   16ea4:	bne	17094 <__assert_fail@plt+0x5844>
   16ea8:	bl	1aaa8 <__assert_fail@plt+0x9258>
   16eac:	ldrb	r1, [r0]
   16eb0:	and	r1, r1, #223	; 0xdf
   16eb4:	cmp	r1, #71	; 0x47
   16eb8:	beq	17014 <__assert_fail@plt+0x57c4>
   16ebc:	cmp	r1, #85	; 0x55
   16ec0:	bne	17078 <__assert_fail@plt+0x5828>
   16ec4:	ldrb	r1, [r0, #1]
   16ec8:	and	r1, r1, #223	; 0xdf
   16ecc:	cmp	r1, #84	; 0x54
   16ed0:	bne	17078 <__assert_fail@plt+0x5828>
   16ed4:	ldrb	r1, [r0, #2]
   16ed8:	and	r1, r1, #223	; 0xdf
   16edc:	cmp	r1, #70	; 0x46
   16ee0:	bne	17078 <__assert_fail@plt+0x5828>
   16ee4:	ldrb	r1, [r0, #3]
   16ee8:	cmp	r1, #45	; 0x2d
   16eec:	bne	17078 <__assert_fail@plt+0x5828>
   16ef0:	ldrb	r1, [r0, #4]
   16ef4:	cmp	r1, #56	; 0x38
   16ef8:	bne	17078 <__assert_fail@plt+0x5828>
   16efc:	ldrb	r0, [r0, #5]
   16f00:	cmp	r0, #0
   16f04:	movw	r0, #49808	; 0xc290
   16f08:	movt	r0, #1
   16f0c:	str	r0, [sp, #72]	; 0x48
   16f10:	bne	17078 <__assert_fail@plt+0x5828>
   16f14:	b	17094 <__assert_fail@plt+0x5844>
   16f18:	mov	r0, #1
   16f1c:	b	16f5c <__assert_fail@plt+0x570c>
   16f20:	mov	r4, #0
   16f24:	mov	r9, #0
   16f28:	mov	r2, r0
   16f2c:	b	16fac <__assert_fail@plt+0x575c>
   16f30:	tst	r8, #1
   16f34:	bne	16f5c <__assert_fail@plt+0x570c>
   16f38:	mov	r2, r0
   16f3c:	b	16f84 <__assert_fail@plt+0x5734>
   16f40:	mov	r0, #1
   16f44:	mov	r9, #0
   16f48:	mov	r4, #5
   16f4c:	b	16fc8 <__assert_fail@plt+0x5778>
   16f50:	mov	r2, #1
   16f54:	tst	r8, #1
   16f58:	beq	16f84 <__assert_fail@plt+0x5734>
   16f5c:	mov	r1, #1
   16f60:	mov	r9, #0
   16f64:	mov	r4, #2
   16f68:	mov	r2, r0
   16f6c:	mov	r3, #1
   16f70:	str	r1, [fp, #-72]	; 0xffffffb8
   16f74:	movw	r1, #51153	; 0xc7d1
   16f78:	movt	r1, #1
   16f7c:	str	r1, [fp, #-88]	; 0xffffffa8
   16f80:	b	1722c <__assert_fail@plt+0x59dc>
   16f84:	cmp	r5, #0
   16f88:	mov	r9, #1
   16f8c:	mov	r4, #2
   16f90:	movne	r0, #39	; 0x27
   16f94:	strbne	r0, [ip]
   16f98:	movw	r0, #51153	; 0xc7d1
   16f9c:	movt	r0, #1
   16fa0:	str	r0, [fp, #-88]	; 0xffffffa8
   16fa4:	mov	r0, #1
   16fa8:	str	r0, [fp, #-72]	; 0xffffffb8
   16fac:	mov	r3, #0
   16fb0:	b	1722c <__assert_fail@plt+0x59dc>
   16fb4:	mov	r4, #5
   16fb8:	tst	r8, #1
   16fbc:	beq	16fe4 <__assert_fail@plt+0x5794>
   16fc0:	mov	r0, #1
   16fc4:	mov	r9, #0
   16fc8:	str	r0, [fp, #-72]	; 0xffffffb8
   16fcc:	movw	r0, #49804	; 0xc28c
   16fd0:	mov	r2, #1
   16fd4:	mov	r3, #1
   16fd8:	movt	r0, #1
   16fdc:	str	r0, [fp, #-88]	; 0xffffffa8
   16fe0:	b	1722c <__assert_fail@plt+0x59dc>
   16fe4:	cmp	r5, #0
   16fe8:	mov	r3, #0
   16fec:	mov	r9, #1
   16ff0:	mov	r2, #1
   16ff4:	movne	r0, #34	; 0x22
   16ff8:	strbne	r0, [ip]
   16ffc:	movw	r0, #49804	; 0xc28c
   17000:	movt	r0, #1
   17004:	str	r0, [fp, #-88]	; 0xffffffa8
   17008:	mov	r0, #1
   1700c:	str	r0, [fp, #-72]	; 0xffffffb8
   17010:	b	1722c <__assert_fail@plt+0x59dc>
   17014:	ldrb	r1, [r0, #1]
   17018:	and	r1, r1, #223	; 0xdf
   1701c:	cmp	r1, #66	; 0x42
   17020:	bne	17078 <__assert_fail@plt+0x5828>
   17024:	ldrb	r1, [r0, #2]
   17028:	cmp	r1, #49	; 0x31
   1702c:	bne	17078 <__assert_fail@plt+0x5828>
   17030:	ldrb	r1, [r0, #3]
   17034:	cmp	r1, #56	; 0x38
   17038:	bne	17078 <__assert_fail@plt+0x5828>
   1703c:	ldrb	r1, [r0, #4]
   17040:	cmp	r1, #48	; 0x30
   17044:	bne	17078 <__assert_fail@plt+0x5828>
   17048:	ldrb	r1, [r0, #5]
   1704c:	cmp	r1, #51	; 0x33
   17050:	bne	17078 <__assert_fail@plt+0x5828>
   17054:	ldrb	r1, [r0, #6]
   17058:	cmp	r1, #48	; 0x30
   1705c:	bne	17078 <__assert_fail@plt+0x5828>
   17060:	ldrb	r0, [r0, #7]
   17064:	cmp	r0, #0
   17068:	movw	r0, #49816	; 0xc298
   1706c:	movt	r0, #1
   17070:	str	r0, [sp, #72]	; 0x48
   17074:	beq	17094 <__assert_fail@plt+0x5844>
   17078:	movw	r1, #49804	; 0xc28c
   1707c:	movw	r0, #51153	; 0xc7d1
   17080:	cmp	r4, #9
   17084:	movt	r1, #1
   17088:	movt	r0, #1
   1708c:	moveq	r0, r1
   17090:	str	r0, [sp, #72]	; 0x48
   17094:	movw	r6, #51153	; 0xc7d1
   17098:	mov	r0, #0
   1709c:	mov	r2, #5
   170a0:	movt	r6, #1
   170a4:	mov	r1, r6
   170a8:	bl	11538 <dcgettext@plt>
   170ac:	cmp	r0, r6
   170b0:	str	r0, [sp, #76]	; 0x4c
   170b4:	beq	17100 <__assert_fail@plt+0x58b0>
   170b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   170bc:	mov	r9, #0
   170c0:	tst	r8, #1
   170c4:	bne	17208 <__assert_fail@plt+0x59b8>
   170c8:	ldr	r0, [sp, #72]	; 0x48
   170cc:	ldrb	r0, [r0]
   170d0:	cmp	r0, #0
   170d4:	beq	17208 <__assert_fail@plt+0x59b8>
   170d8:	ldr	r1, [sp, #72]	; 0x48
   170dc:	mov	r9, #0
   170e0:	add	r1, r1, #1
   170e4:	cmp	r9, r5
   170e8:	strbcc	r0, [ip, r9]
   170ec:	ldrb	r0, [r1, r9]
   170f0:	add	r9, r9, #1
   170f4:	cmp	r0, #0
   170f8:	bne	170e4 <__assert_fail@plt+0x5894>
   170fc:	b	17208 <__assert_fail@plt+0x59b8>
   17100:	bl	1aaa8 <__assert_fail@plt+0x9258>
   17104:	ldrb	r1, [r0]
   17108:	and	r1, r1, #223	; 0xdf
   1710c:	cmp	r1, #71	; 0x47
   17110:	beq	17180 <__assert_fail@plt+0x5930>
   17114:	ldr	ip, [fp, #-84]	; 0xffffffac
   17118:	cmp	r1, #85	; 0x55
   1711c:	bne	171dc <__assert_fail@plt+0x598c>
   17120:	ldrb	r1, [r0, #1]
   17124:	and	r1, r1, #223	; 0xdf
   17128:	cmp	r1, #84	; 0x54
   1712c:	bne	171dc <__assert_fail@plt+0x598c>
   17130:	ldrb	r1, [r0, #2]
   17134:	and	r1, r1, #223	; 0xdf
   17138:	cmp	r1, #70	; 0x46
   1713c:	bne	171dc <__assert_fail@plt+0x598c>
   17140:	ldrb	r1, [r0, #3]
   17144:	cmp	r1, #45	; 0x2d
   17148:	bne	171dc <__assert_fail@plt+0x598c>
   1714c:	ldrb	r1, [r0, #4]
   17150:	cmp	r1, #56	; 0x38
   17154:	bne	171dc <__assert_fail@plt+0x598c>
   17158:	ldrb	r0, [r0, #5]
   1715c:	cmp	r0, #0
   17160:	bne	171dc <__assert_fail@plt+0x598c>
   17164:	movw	r0, #49812	; 0xc294
   17168:	movt	r0, #1
   1716c:	str	r0, [sp, #76]	; 0x4c
   17170:	mov	r9, #0
   17174:	tst	r8, #1
   17178:	beq	170c8 <__assert_fail@plt+0x5878>
   1717c:	b	17208 <__assert_fail@plt+0x59b8>
   17180:	ldrb	r1, [r0, #1]
   17184:	ldr	ip, [fp, #-84]	; 0xffffffac
   17188:	and	r1, r1, #223	; 0xdf
   1718c:	cmp	r1, #66	; 0x42
   17190:	bne	171dc <__assert_fail@plt+0x598c>
   17194:	ldrb	r1, [r0, #2]
   17198:	cmp	r1, #49	; 0x31
   1719c:	bne	171dc <__assert_fail@plt+0x598c>
   171a0:	ldrb	r1, [r0, #3]
   171a4:	cmp	r1, #56	; 0x38
   171a8:	bne	171dc <__assert_fail@plt+0x598c>
   171ac:	ldrb	r1, [r0, #4]
   171b0:	cmp	r1, #48	; 0x30
   171b4:	bne	171dc <__assert_fail@plt+0x598c>
   171b8:	ldrb	r1, [r0, #5]
   171bc:	cmp	r1, #51	; 0x33
   171c0:	bne	171dc <__assert_fail@plt+0x598c>
   171c4:	ldrb	r1, [r0, #6]
   171c8:	cmp	r1, #48	; 0x30
   171cc:	bne	171dc <__assert_fail@plt+0x598c>
   171d0:	ldrb	r0, [r0, #7]
   171d4:	cmp	r0, #0
   171d8:	beq	17ff0 <__assert_fail@plt+0x67a0>
   171dc:	movw	r0, #51153	; 0xc7d1
   171e0:	cmp	r4, #9
   171e4:	movt	r0, #1
   171e8:	mov	r1, r0
   171ec:	movw	r0, #49804	; 0xc28c
   171f0:	movt	r0, #1
   171f4:	moveq	r1, r0
   171f8:	str	r1, [sp, #76]	; 0x4c
   171fc:	mov	r9, #0
   17200:	tst	r8, #1
   17204:	beq	170c8 <__assert_fail@plt+0x5878>
   17208:	ldr	r6, [sp, #76]	; 0x4c
   1720c:	mov	r0, r6
   17210:	bl	116ac <strlen@plt>
   17214:	ldr	ip, [fp, #-84]	; 0xffffffac
   17218:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1721c:	str	r0, [fp, #-72]	; 0xffffffb8
   17220:	str	r6, [fp, #-88]	; 0xffffffa8
   17224:	mov	r2, #1
   17228:	mov	r3, r8
   1722c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17230:	str	r4, [fp, #-64]	; 0xffffffc0
   17234:	mov	sl, #0
   17238:	str	r3, [fp, #-76]	; 0xffffffb4
   1723c:	str	r2, [sp, #88]	; 0x58
   17240:	cmp	r0, #0
   17244:	movwne	r0, #1
   17248:	and	r1, r0, r3
   1724c:	and	r1, r2, r1
   17250:	str	r1, [sp, #48]	; 0x30
   17254:	sub	r1, r4, #2
   17258:	clz	r1, r1
   1725c:	lsr	r1, r1, #5
   17260:	and	r1, r1, r3
   17264:	str	r1, [sp, #44]	; 0x2c
   17268:	subs	r1, r4, #2
   1726c:	eor	r4, r3, #1
   17270:	movwne	r1, #1
   17274:	str	r4, [sp, #92]	; 0x5c
   17278:	orr	r4, r1, r4
   1727c:	and	r1, r1, r2
   17280:	and	r0, r0, r1
   17284:	str	r4, [sp, #64]	; 0x40
   17288:	ldr	r4, [sp, #84]	; 0x54
   1728c:	str	r0, [fp, #-60]	; 0xffffffc4
   17290:	orr	r0, r1, r3
   17294:	ldr	r1, [fp, #16]
   17298:	eor	r0, r0, #1
   1729c:	clz	r1, r1
   172a0:	lsr	r1, r1, #5
   172a4:	orr	r0, r1, r0
   172a8:	str	r0, [fp, #-68]	; 0xffffffbc
   172ac:	eor	r0, r2, #1
   172b0:	str	r0, [sp, #52]	; 0x34
   172b4:	cmn	r7, #1
   172b8:	beq	172c8 <__assert_fail@plt+0x5a78>
   172bc:	cmp	sl, r7
   172c0:	bne	172d4 <__assert_fail@plt+0x5a84>
   172c4:	b	17f68 <__assert_fail@plt+0x6718>
   172c8:	ldrb	r0, [lr, sl]
   172cc:	cmp	r0, #0
   172d0:	beq	17f70 <__assert_fail@plt+0x6720>
   172d4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   172d8:	cmp	r0, #0
   172dc:	beq	1733c <__assert_fail@plt+0x5aec>
   172e0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   172e4:	mov	r6, r5
   172e8:	add	r5, sl, r0
   172ec:	cmp	r0, #2
   172f0:	bcc	1735c <__assert_fail@plt+0x5b0c>
   172f4:	mov	r0, #0
   172f8:	cmn	r7, #1
   172fc:	str	r0, [fp, #-56]	; 0xffffffc8
   17300:	bne	17318 <__assert_fail@plt+0x5ac8>
   17304:	mov	r0, lr
   17308:	bl	116ac <strlen@plt>
   1730c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17310:	ldr	ip, [fp, #-84]	; 0xffffffac
   17314:	mov	r7, r0
   17318:	cmp	r5, r7
   1731c:	bls	1736c <__assert_fail@plt+0x5b1c>
   17320:	mov	r0, #0
   17324:	mov	r5, r6
   17328:	str	r0, [fp, #-48]	; 0xffffffd0
   1732c:	ldrb	r6, [lr, sl]
   17330:	cmp	r6, #126	; 0x7e
   17334:	bls	173bc <__assert_fail@plt+0x5b6c>
   17338:	b	17918 <__assert_fail@plt+0x60c8>
   1733c:	mov	r0, #0
   17340:	str	r0, [fp, #-56]	; 0xffffffc8
   17344:	mov	r0, #0
   17348:	str	r0, [fp, #-48]	; 0xffffffd0
   1734c:	ldrb	r6, [lr, sl]
   17350:	cmp	r6, #126	; 0x7e
   17354:	bls	173bc <__assert_fail@plt+0x5b6c>
   17358:	b	17918 <__assert_fail@plt+0x60c8>
   1735c:	mov	r0, #0
   17360:	str	r0, [fp, #-56]	; 0xffffffc8
   17364:	cmp	r5, r7
   17368:	bhi	17320 <__assert_fail@plt+0x5ad0>
   1736c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17370:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17374:	add	r0, lr, sl
   17378:	bl	116a0 <bcmp@plt>
   1737c:	ldr	r2, [sp, #92]	; 0x5c
   17380:	cmp	r0, #0
   17384:	mov	r1, r0
   17388:	mov	r5, r6
   1738c:	movwne	r1, #1
   17390:	orr	r1, r1, r2
   17394:	tst	r1, #1
   17398:	beq	18030 <__assert_fail@plt+0x67e0>
   1739c:	ldr	ip, [fp, #-84]	; 0xffffffac
   173a0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   173a4:	clz	r0, r0
   173a8:	lsr	r0, r0, #5
   173ac:	str	r0, [fp, #-48]	; 0xffffffd0
   173b0:	ldrb	r6, [lr, sl]
   173b4:	cmp	r6, #126	; 0x7e
   173b8:	bhi	17918 <__assert_fail@plt+0x60c8>
   173bc:	add	r3, pc, #16
   173c0:	mov	r8, #1
   173c4:	mov	r2, #110	; 0x6e
   173c8:	mov	r0, #97	; 0x61
   173cc:	mov	r1, #0
   173d0:	ldr	pc, [r3, r6, lsl #2]
   173d4:	ldrdeq	r7, [r1], -r0
   173d8:	andeq	r7, r1, r8, lsl r9
   173dc:	andeq	r7, r1, r8, lsl r9
   173e0:	andeq	r7, r1, r8, lsl r9
   173e4:	andeq	r7, r1, r8, lsl r9
   173e8:	andeq	r7, r1, r8, lsl r9
   173ec:	andeq	r7, r1, r8, lsl r9
   173f0:	andeq	r7, r1, ip, asr #19
   173f4:			; <UNDEFINED> instruction: 0x000176b0
   173f8:	andeq	r7, r1, r8, lsr #13
   173fc:			; <UNDEFINED> instruction: 0x000176bc
   17400:	andeq	r7, r1, ip, ror #15
   17404:	andeq	r7, r1, r0, lsr #13
   17408:			; <UNDEFINED> instruction: 0x000176b8
   1740c:	andeq	r7, r1, r8, lsl r9
   17410:	andeq	r7, r1, r8, lsl r9
   17414:	andeq	r7, r1, r8, lsl r9
   17418:	andeq	r7, r1, r8, lsl r9
   1741c:	andeq	r7, r1, r8, lsl r9
   17420:	andeq	r7, r1, r8, lsl r9
   17424:	andeq	r7, r1, r8, lsl r9
   17428:	andeq	r7, r1, r8, lsl r9
   1742c:	andeq	r7, r1, r8, lsl r9
   17430:	andeq	r7, r1, r8, lsl r9
   17434:	andeq	r7, r1, r8, lsl r9
   17438:	andeq	r7, r1, r8, lsl r9
   1743c:	andeq	r7, r1, r8, lsl r9
   17440:	andeq	r7, r1, r8, lsl r9
   17444:	andeq	r7, r1, r8, lsl r9
   17448:	andeq	r7, r1, r8, lsl r9
   1744c:	andeq	r7, r1, r8, lsl r9
   17450:	andeq	r7, r1, r8, lsl r9
   17454:	andeq	r7, r1, r4, asr #12
   17458:	andeq	r7, r1, r8, asr #12
   1745c:	andeq	r7, r1, r8, asr #12
   17460:	andeq	r7, r1, r8, lsr r6
   17464:	andeq	r7, r1, r8, asr #12
   17468:	ldrdeq	r7, [r1], -r0
   1746c:	andeq	r7, r1, r8, asr #12
   17470:	strdeq	r7, [r1], -r4
   17474:	andeq	r7, r1, r8, asr #12
   17478:	andeq	r7, r1, r8, asr #12
   1747c:	andeq	r7, r1, r8, asr #12
   17480:	ldrdeq	r7, [r1], -r0
   17484:	ldrdeq	r7, [r1], -r0
   17488:	ldrdeq	r7, [r1], -r0
   1748c:	ldrdeq	r7, [r1], -r0
   17490:	ldrdeq	r7, [r1], -r0
   17494:	ldrdeq	r7, [r1], -r0
   17498:	ldrdeq	r7, [r1], -r0
   1749c:	ldrdeq	r7, [r1], -r0
   174a0:	ldrdeq	r7, [r1], -r0
   174a4:	ldrdeq	r7, [r1], -r0
   174a8:	ldrdeq	r7, [r1], -r0
   174ac:	ldrdeq	r7, [r1], -r0
   174b0:	ldrdeq	r7, [r1], -r0
   174b4:	ldrdeq	r7, [r1], -r0
   174b8:	ldrdeq	r7, [r1], -r0
   174bc:	ldrdeq	r7, [r1], -r0
   174c0:	andeq	r7, r1, r8, asr #12
   174c4:	andeq	r7, r1, r8, asr #12
   174c8:	andeq	r7, r1, r8, asr #12
   174cc:	andeq	r7, r1, r8, asr #12
   174d0:			; <UNDEFINED> instruction: 0x000177b8
   174d4:	andeq	r7, r1, r8, lsl r9
   174d8:	ldrdeq	r7, [r1], -r0
   174dc:	ldrdeq	r7, [r1], -r0
   174e0:	ldrdeq	r7, [r1], -r0
   174e4:	ldrdeq	r7, [r1], -r0
   174e8:	ldrdeq	r7, [r1], -r0
   174ec:	ldrdeq	r7, [r1], -r0
   174f0:	ldrdeq	r7, [r1], -r0
   174f4:	ldrdeq	r7, [r1], -r0
   174f8:	ldrdeq	r7, [r1], -r0
   174fc:	ldrdeq	r7, [r1], -r0
   17500:	ldrdeq	r7, [r1], -r0
   17504:	ldrdeq	r7, [r1], -r0
   17508:	ldrdeq	r7, [r1], -r0
   1750c:	ldrdeq	r7, [r1], -r0
   17510:	ldrdeq	r7, [r1], -r0
   17514:	ldrdeq	r7, [r1], -r0
   17518:	ldrdeq	r7, [r1], -r0
   1751c:	ldrdeq	r7, [r1], -r0
   17520:	ldrdeq	r7, [r1], -r0
   17524:	ldrdeq	r7, [r1], -r0
   17528:	ldrdeq	r7, [r1], -r0
   1752c:	ldrdeq	r7, [r1], -r0
   17530:	ldrdeq	r7, [r1], -r0
   17534:	ldrdeq	r7, [r1], -r0
   17538:	ldrdeq	r7, [r1], -r0
   1753c:	ldrdeq	r7, [r1], -r0
   17540:	andeq	r7, r1, r8, asr #12
   17544:	andeq	r7, r1, ip, ror r6
   17548:	ldrdeq	r7, [r1], -r0
   1754c:	andeq	r7, r1, r8, asr #12
   17550:	ldrdeq	r7, [r1], -r0
   17554:	andeq	r7, r1, r8, asr #12
   17558:	ldrdeq	r7, [r1], -r0
   1755c:	ldrdeq	r7, [r1], -r0
   17560:	ldrdeq	r7, [r1], -r0
   17564:	ldrdeq	r7, [r1], -r0
   17568:	ldrdeq	r7, [r1], -r0
   1756c:	ldrdeq	r7, [r1], -r0
   17570:	ldrdeq	r7, [r1], -r0
   17574:	ldrdeq	r7, [r1], -r0
   17578:	ldrdeq	r7, [r1], -r0
   1757c:	ldrdeq	r7, [r1], -r0
   17580:	ldrdeq	r7, [r1], -r0
   17584:	ldrdeq	r7, [r1], -r0
   17588:	ldrdeq	r7, [r1], -r0
   1758c:	ldrdeq	r7, [r1], -r0
   17590:	ldrdeq	r7, [r1], -r0
   17594:	ldrdeq	r7, [r1], -r0
   17598:	ldrdeq	r7, [r1], -r0
   1759c:	ldrdeq	r7, [r1], -r0
   175a0:	ldrdeq	r7, [r1], -r0
   175a4:	ldrdeq	r7, [r1], -r0
   175a8:	ldrdeq	r7, [r1], -r0
   175ac:	ldrdeq	r7, [r1], -r0
   175b0:	ldrdeq	r7, [r1], -r0
   175b4:	ldrdeq	r7, [r1], -r0
   175b8:	ldrdeq	r7, [r1], -r0
   175bc:	ldrdeq	r7, [r1], -r0
   175c0:	andeq	r7, r1, r0, lsl r6
   175c4:	andeq	r7, r1, r8, asr #12
   175c8:	andeq	r7, r1, r0, lsl r6
   175cc:	andeq	r7, r1, r8, lsr r6
   175d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   175d4:	tst	r0, #1
   175d8:	bne	17890 <__assert_fail@plt+0x6040>
   175dc:	ldr	r1, [fp, #16]
   175e0:	ubfx	r0, r6, #5, #3
   175e4:	mov	r2, #1
   175e8:	ldr	r0, [r1, r0, lsl #2]
   175ec:	and	r1, r6, #31
   175f0:	tst	r0, r2, lsl r1
   175f4:	beq	17890 <__assert_fail@plt+0x6040>
   175f8:	mov	r0, r6
   175fc:	mov	r1, r8
   17600:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17604:	tst	r2, #1
   17608:	beq	178b0 <__assert_fail@plt+0x6060>
   1760c:	b	1800c <__assert_fail@plt+0x67bc>
   17610:	cmp	r7, #1
   17614:	beq	17638 <__assert_fail@plt+0x5de8>
   17618:	mov	r8, #0
   1761c:	cmn	r7, #1
   17620:	bne	1787c <__assert_fail@plt+0x602c>
   17624:	ldrb	r0, [lr, #1]
   17628:	cmp	r0, #0
   1762c:	beq	17638 <__assert_fail@plt+0x5de8>
   17630:	mvn	r7, #0
   17634:	b	1787c <__assert_fail@plt+0x602c>
   17638:	mov	r8, #0
   1763c:	cmp	sl, #0
   17640:	bne	1787c <__assert_fail@plt+0x602c>
   17644:	mov	r1, #1
   17648:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1764c:	cmp	r0, #2
   17650:	bne	17668 <__assert_fail@plt+0x5e18>
   17654:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17658:	mov	r8, r1
   1765c:	tst	r0, #1
   17660:	beq	175d0 <__assert_fail@plt+0x5d80>
   17664:	b	1800c <__assert_fail@plt+0x67bc>
   17668:	mov	r8, r1
   1766c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17670:	tst	r0, #1
   17674:	beq	175dc <__assert_fail@plt+0x5d8c>
   17678:	b	17890 <__assert_fail@plt+0x6040>
   1767c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17680:	cmp	r0, #2
   17684:	bne	17944 <__assert_fail@plt+0x60f4>
   17688:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1768c:	tst	r0, #1
   17690:	bne	1800c <__assert_fail@plt+0x67bc>
   17694:	mov	r0, #0
   17698:	str	r0, [fp, #-56]	; 0xffffffc8
   1769c:	b	1795c <__assert_fail@plt+0x610c>
   176a0:	mov	r0, #102	; 0x66
   176a4:	b	179cc <__assert_fail@plt+0x617c>
   176a8:	mov	r2, #116	; 0x74
   176ac:	b	176bc <__assert_fail@plt+0x5e6c>
   176b0:	mov	r0, #98	; 0x62
   176b4:	b	179cc <__assert_fail@plt+0x617c>
   176b8:	mov	r2, #114	; 0x72
   176bc:	ldr	r0, [sp, #64]	; 0x40
   176c0:	tst	r0, #1
   176c4:	mov	r0, r2
   176c8:	bne	179cc <__assert_fail@plt+0x617c>
   176cc:	b	1800c <__assert_fail@plt+0x67bc>
   176d0:	ldr	r0, [sp, #88]	; 0x58
   176d4:	tst	r0, #1
   176d8:	beq	179ec <__assert_fail@plt+0x619c>
   176dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   176e0:	tst	r0, #1
   176e4:	bne	18148 <__assert_fail@plt+0x68f8>
   176e8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   176ec:	ldr	r1, [fp, #-52]	; 0xffffffcc
   176f0:	subs	r0, r0, #2
   176f4:	movwne	r0, #1
   176f8:	orr	r0, r0, r1
   176fc:	tst	r0, #1
   17700:	bne	1773c <__assert_fail@plt+0x5eec>
   17704:	cmp	r9, r5
   17708:	movcc	r0, #39	; 0x27
   1770c:	strbcc	r0, [ip, r9]
   17710:	add	r0, r9, #1
   17714:	cmp	r0, r5
   17718:	movcc	r1, #36	; 0x24
   1771c:	strbcc	r1, [ip, r0]
   17720:	add	r0, r9, #2
   17724:	add	r9, r9, #3
   17728:	cmp	r0, r5
   1772c:	movcc	r1, #39	; 0x27
   17730:	strbcc	r1, [ip, r0]
   17734:	mov	r0, #1
   17738:	str	r0, [fp, #-52]	; 0xffffffcc
   1773c:	mov	r1, #1
   17740:	cmp	r9, r5
   17744:	mov	r8, #0
   17748:	mov	r6, #48	; 0x30
   1774c:	str	r1, [fp, #-56]	; 0xffffffc8
   17750:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17754:	movcc	r0, #92	; 0x5c
   17758:	strbcc	r0, [ip, r9]
   1775c:	add	r0, r9, #1
   17760:	cmp	r1, #2
   17764:	beq	17bb8 <__assert_fail@plt+0x6368>
   17768:	add	r1, sl, #1
   1776c:	cmp	r1, r7
   17770:	bcs	17bb8 <__assert_fail@plt+0x6368>
   17774:	ldrb	r1, [lr, r1]
   17778:	sub	r1, r1, #48	; 0x30
   1777c:	uxtb	r1, r1
   17780:	cmp	r1, #9
   17784:	bhi	17bb8 <__assert_fail@plt+0x6368>
   17788:	cmp	r0, r5
   1778c:	movcc	r1, #48	; 0x30
   17790:	strbcc	r1, [ip, r0]
   17794:	add	r0, r9, #2
   17798:	add	r9, r9, #3
   1779c:	cmp	r0, r5
   177a0:	movcc	r1, #48	; 0x30
   177a4:	strbcc	r1, [ip, r0]
   177a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   177ac:	tst	r0, #1
   177b0:	beq	175dc <__assert_fail@plt+0x5d8c>
   177b4:	b	17890 <__assert_fail@plt+0x6040>
   177b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   177bc:	mov	r6, #63	; 0x3f
   177c0:	cmp	r0, #5
   177c4:	beq	17bcc <__assert_fail@plt+0x637c>
   177c8:	mov	r1, #0
   177cc:	cmp	r0, #2
   177d0:	str	r1, [fp, #-56]	; 0xffffffc8
   177d4:	bne	17c94 <__assert_fail@plt+0x6444>
   177d8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   177dc:	mov	r8, #0
   177e0:	tst	r0, #1
   177e4:	beq	175d0 <__assert_fail@plt+0x5d80>
   177e8:	b	1800c <__assert_fail@plt+0x67bc>
   177ec:	mov	r0, #118	; 0x76
   177f0:	b	179cc <__assert_fail@plt+0x617c>
   177f4:	mov	r0, #1
   177f8:	mov	r6, #39	; 0x27
   177fc:	str	r0, [sp, #60]	; 0x3c
   17800:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17804:	cmp	r0, #2
   17808:	bne	17a0c <__assert_fail@plt+0x61bc>
   1780c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17810:	tst	r0, #1
   17814:	bne	1800c <__assert_fail@plt+0x67bc>
   17818:	ldr	r2, [sp, #56]	; 0x38
   1781c:	clz	r1, r5
   17820:	mov	r8, #1
   17824:	lsr	r1, r1, #5
   17828:	cmp	r2, #0
   1782c:	mov	r0, r2
   17830:	movwne	r0, #1
   17834:	orrs	r0, r0, r1
   17838:	moveq	r2, r5
   1783c:	moveq	r5, r0
   17840:	cmp	r9, r5
   17844:	str	r2, [sp, #56]	; 0x38
   17848:	movcc	r0, #39	; 0x27
   1784c:	strbcc	r0, [ip, r9]
   17850:	add	r0, r9, #1
   17854:	cmp	r0, r5
   17858:	movcc	r1, #92	; 0x5c
   1785c:	strbcc	r1, [ip, r0]
   17860:	add	r0, r9, #2
   17864:	add	r9, r9, #3
   17868:	cmp	r0, r5
   1786c:	movcc	r1, #39	; 0x27
   17870:	strbcc	r1, [ip, r0]
   17874:	mov	r0, #0
   17878:	str	r0, [fp, #-52]	; 0xffffffcc
   1787c:	mov	r0, #0
   17880:	str	r0, [fp, #-56]	; 0xffffffc8
   17884:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17888:	tst	r0, #1
   1788c:	beq	175dc <__assert_fail@plt+0x5d8c>
   17890:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17894:	mov	r1, r8
   17898:	cmp	r0, #0
   1789c:	mov	r0, r6
   178a0:	beq	17964 <__assert_fail@plt+0x6114>
   178a4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   178a8:	tst	r2, #1
   178ac:	bne	1800c <__assert_fail@plt+0x67bc>
   178b0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   178b4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   178b8:	subs	r2, r2, #2
   178bc:	movwne	r2, #1
   178c0:	orr	r2, r2, r3
   178c4:	tst	r2, #1
   178c8:	bne	17904 <__assert_fail@plt+0x60b4>
   178cc:	cmp	r9, r5
   178d0:	movcc	r2, #39	; 0x27
   178d4:	strbcc	r2, [ip, r9]
   178d8:	add	r2, r9, #1
   178dc:	cmp	r2, r5
   178e0:	movcc	r3, #36	; 0x24
   178e4:	strbcc	r3, [ip, r2]
   178e8:	add	r2, r9, #2
   178ec:	add	r9, r9, #3
   178f0:	cmp	r2, r5
   178f4:	movcc	r3, #39	; 0x27
   178f8:	strbcc	r3, [ip, r2]
   178fc:	mov	r2, #1
   17900:	str	r2, [fp, #-52]	; 0xffffffcc
   17904:	cmp	r9, r5
   17908:	movcc	r2, #92	; 0x5c
   1790c:	strbcc	r2, [ip, r9]
   17910:	add	r9, r9, #1
   17914:	b	179ac <__assert_fail@plt+0x615c>
   17918:	ldr	r0, [sp, #40]	; 0x28
   1791c:	cmp	r0, #1
   17920:	bne	17a20 <__assert_fail@plt+0x61d0>
   17924:	bl	11664 <__ctype_b_loc@plt>
   17928:	ldr	r0, [r0]
   1792c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17930:	mov	r1, #1
   17934:	add	r0, r0, r6, lsl #1
   17938:	ldrb	r0, [r0, #1]
   1793c:	ubfx	r8, r0, #6, #1
   17940:	b	17d78 <__assert_fail@plt+0x6528>
   17944:	ldr	r1, [sp, #48]	; 0x30
   17948:	mov	r0, #0
   1794c:	str	r0, [fp, #-56]	; 0xffffffc8
   17950:	mov	r0, #92	; 0x5c
   17954:	cmp	r1, #0
   17958:	beq	179cc <__assert_fail@plt+0x617c>
   1795c:	mov	r6, #92	; 0x5c
   17960:	mov	r8, #0
   17964:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17968:	cmp	r0, #0
   1796c:	bne	179a4 <__assert_fail@plt+0x6154>
   17970:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17974:	tst	r0, #1
   17978:	beq	179a4 <__assert_fail@plt+0x6154>
   1797c:	cmp	r9, r5
   17980:	movcc	r0, #39	; 0x27
   17984:	strbcc	r0, [ip, r9]
   17988:	add	r0, r9, #1
   1798c:	add	r9, r9, #2
   17990:	cmp	r0, r5
   17994:	movcc	r1, #39	; 0x27
   17998:	strbcc	r1, [ip, r0]
   1799c:	mov	r0, #0
   179a0:	str	r0, [fp, #-52]	; 0xffffffcc
   179a4:	mov	r1, r8
   179a8:	mov	r0, r6
   179ac:	cmp	r9, r5
   179b0:	and	r4, r4, r1
   179b4:	strbcc	r0, [ip, r9]
   179b8:	add	r9, r9, #1
   179bc:	add	sl, sl, #1
   179c0:	cmn	r7, #1
   179c4:	bne	172bc <__assert_fail@plt+0x5a6c>
   179c8:	b	172c8 <__assert_fail@plt+0x5a78>
   179cc:	mov	r1, #0
   179d0:	mov	r8, #0
   179d4:	str	r1, [fp, #-56]	; 0xffffffc8
   179d8:	ldr	r1, [sp, #88]	; 0x58
   179dc:	tst	r1, #1
   179e0:	mov	r1, #0
   179e4:	beq	175d0 <__assert_fail@plt+0x5d80>
   179e8:	b	178a4 <__assert_fail@plt+0x6054>
   179ec:	ldr	r0, [sp, #36]	; 0x24
   179f0:	mov	r6, #0
   179f4:	mov	r8, #0
   179f8:	cmp	r0, #0
   179fc:	mov	r0, #0
   17a00:	str	r0, [fp, #-56]	; 0xffffffc8
   17a04:	bne	179bc <__assert_fail@plt+0x616c>
   17a08:	b	175d0 <__assert_fail@plt+0x5d80>
   17a0c:	mov	r8, #1
   17a10:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17a14:	tst	r0, #1
   17a18:	beq	175dc <__assert_fail@plt+0x5d8c>
   17a1c:	b	17890 <__assert_fail@plt+0x6040>
   17a20:	mov	r0, #0
   17a24:	cmn	r7, #1
   17a28:	str	r0, [fp, #-36]	; 0xffffffdc
   17a2c:	str	r0, [fp, #-40]	; 0xffffffd8
   17a30:	bne	17a44 <__assert_fail@plt+0x61f4>
   17a34:	mov	r0, lr
   17a38:	bl	116ac <strlen@plt>
   17a3c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17a40:	mov	r7, r0
   17a44:	ldr	r0, [sp, #44]	; 0x2c
   17a48:	str	r4, [sp, #84]	; 0x54
   17a4c:	str	r5, [sp, #28]
   17a50:	cmp	r0, #0
   17a54:	beq	17ca8 <__assert_fail@plt+0x6458>
   17a58:	ldr	r0, [sp, #80]	; 0x50
   17a5c:	mov	r8, #1
   17a60:	mov	r5, #0
   17a64:	add	r0, r0, sl
   17a68:	str	r0, [sp, #24]
   17a6c:	sub	r0, fp, #40	; 0x28
   17a70:	mov	r3, r0
   17a74:	b	17ab0 <__assert_fail@plt+0x6260>
   17a78:	ldr	r5, [sp, #68]	; 0x44
   17a7c:	add	r5, r0, r5
   17a80:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17a84:	bl	1158c <iswprint@plt>
   17a88:	cmp	r0, #0
   17a8c:	sub	r4, fp, #40	; 0x28
   17a90:	movwne	r0, #1
   17a94:	and	r8, r8, r0
   17a98:	mov	r0, r4
   17a9c:	bl	11514 <mbsinit@plt>
   17aa0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17aa4:	mov	r3, r4
   17aa8:	cmp	r0, #0
   17aac:	bne	17d6c <__assert_fail@plt+0x651c>
   17ab0:	str	r5, [sp, #68]	; 0x44
   17ab4:	add	r5, r5, sl
   17ab8:	sub	r0, fp, #44	; 0x2c
   17abc:	add	r1, lr, r5
   17ac0:	sub	r2, r7, r5
   17ac4:	bl	1aae0 <__assert_fail@plt+0x9290>
   17ac8:	cmn	r0, #2
   17acc:	beq	17d2c <__assert_fail@plt+0x64dc>
   17ad0:	ldr	ip, [fp, #-84]	; 0xffffffac
   17ad4:	cmn	r0, #1
   17ad8:	beq	17d20 <__assert_fail@plt+0x64d0>
   17adc:	cmp	r0, #0
   17ae0:	beq	17d24 <__assert_fail@plt+0x64d4>
   17ae4:	cmp	r0, #2
   17ae8:	bcc	17a78 <__assert_fail@plt+0x6228>
   17aec:	ldr	r1, [sp, #68]	; 0x44
   17af0:	ldr	r2, [sp, #24]
   17af4:	add	r1, r2, r1
   17af8:	sub	r2, r0, #1
   17afc:	ldrb	r3, [r1]
   17b00:	sub	r3, r3, #91	; 0x5b
   17b04:	cmp	r3, #33	; 0x21
   17b08:	bls	17b28 <__assert_fail@plt+0x62d8>
   17b0c:	add	r1, r1, #1
   17b10:	subs	r2, r2, #1
   17b14:	beq	17a78 <__assert_fail@plt+0x6228>
   17b18:	ldrb	r3, [r1]
   17b1c:	sub	r3, r3, #91	; 0x5b
   17b20:	cmp	r3, #33	; 0x21
   17b24:	bhi	17b0c <__assert_fail@plt+0x62bc>
   17b28:	add	r5, pc, #0
   17b2c:	ldr	pc, [r5, r3, lsl #2]
   17b30:	andeq	r8, r1, r4, asr #32
   17b34:	andeq	r8, r1, r4, asr #32
   17b38:	andeq	r7, r1, ip, lsl #22
   17b3c:	andeq	r8, r1, r4, asr #32
   17b40:	andeq	r7, r1, ip, lsl #22
   17b44:	andeq	r8, r1, r4, asr #32
   17b48:	andeq	r7, r1, ip, lsl #22
   17b4c:	andeq	r7, r1, ip, lsl #22
   17b50:	andeq	r7, r1, ip, lsl #22
   17b54:	andeq	r7, r1, ip, lsl #22
   17b58:	andeq	r7, r1, ip, lsl #22
   17b5c:	andeq	r7, r1, ip, lsl #22
   17b60:	andeq	r7, r1, ip, lsl #22
   17b64:	andeq	r7, r1, ip, lsl #22
   17b68:	andeq	r7, r1, ip, lsl #22
   17b6c:	andeq	r7, r1, ip, lsl #22
   17b70:	andeq	r7, r1, ip, lsl #22
   17b74:	andeq	r7, r1, ip, lsl #22
   17b78:	andeq	r7, r1, ip, lsl #22
   17b7c:	andeq	r7, r1, ip, lsl #22
   17b80:	andeq	r7, r1, ip, lsl #22
   17b84:	andeq	r7, r1, ip, lsl #22
   17b88:	andeq	r7, r1, ip, lsl #22
   17b8c:	andeq	r7, r1, ip, lsl #22
   17b90:	andeq	r7, r1, ip, lsl #22
   17b94:	andeq	r7, r1, ip, lsl #22
   17b98:	andeq	r7, r1, ip, lsl #22
   17b9c:	andeq	r7, r1, ip, lsl #22
   17ba0:	andeq	r7, r1, ip, lsl #22
   17ba4:	andeq	r7, r1, ip, lsl #22
   17ba8:	andeq	r7, r1, ip, lsl #22
   17bac:	andeq	r7, r1, ip, lsl #22
   17bb0:	andeq	r7, r1, ip, lsl #22
   17bb4:	andeq	r8, r1, r4, asr #32
   17bb8:	mov	r9, r0
   17bbc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17bc0:	tst	r0, #1
   17bc4:	beq	175dc <__assert_fail@plt+0x5d8c>
   17bc8:	b	17890 <__assert_fail@plt+0x6040>
   17bcc:	mov	r0, #0
   17bd0:	str	r0, [fp, #-56]	; 0xffffffc8
   17bd4:	ldr	r0, [sp, #32]
   17bd8:	cmp	r0, #0
   17bdc:	beq	17c94 <__assert_fail@plt+0x6444>
   17be0:	add	r0, sl, #2
   17be4:	mov	r1, r7
   17be8:	cmp	r0, r7
   17bec:	bcs	17c94 <__assert_fail@plt+0x6444>
   17bf0:	add	r1, sl, lr
   17bf4:	ldrb	r1, [r1, #1]
   17bf8:	cmp	r1, #63	; 0x3f
   17bfc:	bne	17c94 <__assert_fail@plt+0x6444>
   17c00:	ldrb	r8, [lr, r0]
   17c04:	sub	r2, r8, #33	; 0x21
   17c08:	cmp	r2, #29
   17c0c:	bhi	17c94 <__assert_fail@plt+0x6444>
   17c10:	mov	r1, r4
   17c14:	movw	r4, #20929	; 0x51c1
   17c18:	mov	r3, #1
   17c1c:	movt	r4, #14336	; 0x3800
   17c20:	tst	r4, r3, lsl r2
   17c24:	beq	17f50 <__assert_fail@plt+0x6700>
   17c28:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17c2c:	tst	r2, #1
   17c30:	bne	1800c <__assert_fail@plt+0x67bc>
   17c34:	cmp	r9, r5
   17c38:	mov	r6, r8
   17c3c:	mov	r4, r1
   17c40:	mov	sl, r0
   17c44:	mov	r8, #0
   17c48:	movcc	r2, #63	; 0x3f
   17c4c:	strbcc	r2, [ip, r9]
   17c50:	add	r2, r9, #1
   17c54:	cmp	r2, r5
   17c58:	movcc	r3, #34	; 0x22
   17c5c:	strbcc	r3, [ip, r2]
   17c60:	add	r2, r9, #2
   17c64:	cmp	r2, r5
   17c68:	movcc	r3, #34	; 0x22
   17c6c:	strbcc	r3, [ip, r2]
   17c70:	add	r2, r9, #3
   17c74:	add	r9, r9, #4
   17c78:	cmp	r2, r5
   17c7c:	movcc	r3, #63	; 0x3f
   17c80:	strbcc	r3, [ip, r2]
   17c84:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17c88:	tst	r0, #1
   17c8c:	beq	175dc <__assert_fail@plt+0x5d8c>
   17c90:	b	17890 <__assert_fail@plt+0x6040>
   17c94:	mov	r8, #0
   17c98:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17c9c:	tst	r0, #1
   17ca0:	beq	175dc <__assert_fail@plt+0x5d8c>
   17ca4:	b	17890 <__assert_fail@plt+0x6040>
   17ca8:	mov	r8, #1
   17cac:	mov	r5, #0
   17cb0:	sub	r4, fp, #40	; 0x28
   17cb4:	str	r5, [sp, #68]	; 0x44
   17cb8:	add	r5, r5, sl
   17cbc:	sub	r0, fp, #44	; 0x2c
   17cc0:	mov	r3, r4
   17cc4:	add	r1, lr, r5
   17cc8:	sub	r2, r7, r5
   17ccc:	bl	1aae0 <__assert_fail@plt+0x9290>
   17cd0:	cmn	r0, #2
   17cd4:	beq	17d2c <__assert_fail@plt+0x64dc>
   17cd8:	cmn	r0, #1
   17cdc:	beq	17d20 <__assert_fail@plt+0x64d0>
   17ce0:	ldr	r5, [sp, #68]	; 0x44
   17ce4:	cmp	r0, #0
   17ce8:	beq	17d68 <__assert_fail@plt+0x6518>
   17cec:	add	r5, r0, r5
   17cf0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17cf4:	bl	1158c <iswprint@plt>
   17cf8:	cmp	r0, #0
   17cfc:	sub	r4, fp, #40	; 0x28
   17d00:	movwne	r0, #1
   17d04:	and	r8, r8, r0
   17d08:	mov	r0, r4
   17d0c:	bl	11514 <mbsinit@plt>
   17d10:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17d14:	cmp	r0, #0
   17d18:	beq	17cb4 <__assert_fail@plt+0x6464>
   17d1c:	b	17d6c <__assert_fail@plt+0x651c>
   17d20:	mov	r8, #0
   17d24:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17d28:	b	17d60 <__assert_fail@plt+0x6510>
   17d2c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17d30:	mov	r8, #0
   17d34:	cmp	r5, r7
   17d38:	bcs	17d60 <__assert_fail@plt+0x6510>
   17d3c:	ldrb	r0, [lr, r5]
   17d40:	cmp	r0, #0
   17d44:	beq	17d60 <__assert_fail@plt+0x6510>
   17d48:	ldr	r0, [sp, #68]	; 0x44
   17d4c:	add	r0, r0, #1
   17d50:	add	r5, r0, sl
   17d54:	str	r0, [sp, #68]	; 0x44
   17d58:	cmp	r5, r7
   17d5c:	bcc	17d3c <__assert_fail@plt+0x64ec>
   17d60:	ldr	r5, [sp, #68]	; 0x44
   17d64:	b	17d6c <__assert_fail@plt+0x651c>
   17d68:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17d6c:	mov	r1, r5
   17d70:	ldr	r5, [sp, #28]
   17d74:	ldr	r4, [sp, #84]	; 0x54
   17d78:	ldr	r0, [sp, #52]	; 0x34
   17d7c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17d80:	cmp	r1, #1
   17d84:	orr	r2, r8, r0
   17d88:	mov	r0, r1
   17d8c:	bhi	17d98 <__assert_fail@plt+0x6548>
   17d90:	tst	r2, #1
   17d94:	bne	175d0 <__assert_fail@plt+0x5d80>
   17d98:	add	r0, r0, sl
   17d9c:	str	r2, [sp, #84]	; 0x54
   17da0:	str	r0, [fp, #-56]	; 0xffffffc8
   17da4:	mov	r0, #0
   17da8:	tst	r2, #1
   17dac:	bne	17e8c <__assert_fail@plt+0x663c>
   17db0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17db4:	tst	r1, #1
   17db8:	bne	1800c <__assert_fail@plt+0x67bc>
   17dbc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17dc0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17dc4:	subs	r2, r1, #2
   17dc8:	movwne	r2, #1
   17dcc:	orr	r2, r2, r0
   17dd0:	tst	r2, #1
   17dd4:	bne	17e10 <__assert_fail@plt+0x65c0>
   17dd8:	cmp	r9, r5
   17ddc:	add	r2, r9, #1
   17de0:	mov	r0, #1
   17de4:	movcc	r1, #39	; 0x27
   17de8:	str	r0, [fp, #-52]	; 0xffffffcc
   17dec:	strbcc	r1, [ip, r9]
   17df0:	cmp	r2, r5
   17df4:	movcc	r1, #36	; 0x24
   17df8:	strbcc	r1, [ip, r2]
   17dfc:	add	r2, r9, #2
   17e00:	add	r9, r9, #3
   17e04:	cmp	r2, r5
   17e08:	movcc	r1, #39	; 0x27
   17e0c:	strbcc	r1, [ip, r2]
   17e10:	cmp	r9, r5
   17e14:	add	r2, r9, #1
   17e18:	movcc	r1, #92	; 0x5c
   17e1c:	strbcc	r1, [ip, r9]
   17e20:	cmp	r2, r5
   17e24:	bcs	17e38 <__assert_fail@plt+0x65e8>
   17e28:	uxtb	r3, r6
   17e2c:	mov	r1, #48	; 0x30
   17e30:	orr	r3, r1, r3, lsr #6
   17e34:	strb	r3, [ip, r2]
   17e38:	add	r2, r9, #2
   17e3c:	add	r9, r9, #3
   17e40:	cmp	r2, r5
   17e44:	lsrcc	r3, r6, #3
   17e48:	movcc	r1, #6
   17e4c:	bficc	r3, r1, #3, #29
   17e50:	mov	r1, #6
   17e54:	bfi	r6, r1, #3, #29
   17e58:	strbcc	r3, [ip, r2]
   17e5c:	mov	r2, #1
   17e60:	b	17ec0 <__assert_fail@plt+0x6670>
   17e64:	ldr	r1, [sp, #80]	; 0x50
   17e68:	cmp	r9, r2
   17e6c:	mov	r5, r2
   17e70:	ldr	r2, [sp, #84]	; 0x54
   17e74:	strbcc	r6, [ip, r9]
   17e78:	add	r9, r9, #1
   17e7c:	ldrb	r6, [r1, sl]
   17e80:	mov	sl, r3
   17e84:	tst	r2, #1
   17e88:	beq	17db0 <__assert_fail@plt+0x6560>
   17e8c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   17e90:	tst	r1, #1
   17e94:	beq	17eb4 <__assert_fail@plt+0x6664>
   17e98:	cmp	r9, r5
   17e9c:	mov	r2, r0
   17ea0:	movcc	r1, #92	; 0x5c
   17ea4:	strbcc	r1, [ip, r9]
   17ea8:	add	r9, r9, #1
   17eac:	mov	r1, #0
   17eb0:	b	17ebc <__assert_fail@plt+0x666c>
   17eb4:	mov	r1, #0
   17eb8:	mov	r2, r0
   17ebc:	str	r1, [fp, #-48]	; 0xffffffd0
   17ec0:	mov	r0, r2
   17ec4:	and	r1, r2, #1
   17ec8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17ecc:	add	r3, sl, #1
   17ed0:	cmp	r2, r3
   17ed4:	bls	17f34 <__assert_fail@plt+0x66e4>
   17ed8:	mov	r2, r5
   17edc:	ldr	r5, [fp, #-52]	; 0xffffffcc
   17ee0:	cmp	r1, #0
   17ee4:	movwne	r1, #1
   17ee8:	mvn	r5, r5
   17eec:	orr	r5, r5, r1
   17ef0:	tst	r5, #1
   17ef4:	bne	17e64 <__assert_fail@plt+0x6614>
   17ef8:	cmp	r9, r2
   17efc:	movcc	r5, r4
   17f00:	movcc	r4, #39	; 0x27
   17f04:	strbcc	r4, [ip, r9]
   17f08:	movcc	r4, r5
   17f0c:	add	r5, r9, #1
   17f10:	add	r9, r9, #2
   17f14:	cmp	r5, r2
   17f18:	movcc	r1, r4
   17f1c:	movcc	r4, #39	; 0x27
   17f20:	strbcc	r4, [ip, r5]
   17f24:	movcc	r4, r1
   17f28:	mov	r1, #0
   17f2c:	str	r1, [fp, #-52]	; 0xffffffcc
   17f30:	b	17e64 <__assert_fail@plt+0x6614>
   17f34:	cmp	r1, #0
   17f38:	movwne	r1, #1
   17f3c:	str	r1, [fp, #-56]	; 0xffffffc8
   17f40:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17f44:	cmp	r0, #0
   17f48:	beq	17970 <__assert_fail@plt+0x6120>
   17f4c:	b	179a4 <__assert_fail@plt+0x6154>
   17f50:	mov	r8, #0
   17f54:	mov	r4, r1
   17f58:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17f5c:	tst	r0, #1
   17f60:	beq	175dc <__assert_fail@plt+0x5d8c>
   17f64:	b	17890 <__assert_fail@plt+0x6040>
   17f68:	mov	r7, sl
   17f6c:	b	17f74 <__assert_fail@plt+0x6724>
   17f70:	mvn	r7, #0
   17f74:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17f78:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17f7c:	ldr	r2, [sp, #88]	; 0x58
   17f80:	eor	r0, r1, #2
   17f84:	orr	r0, r0, r9
   17f88:	clz	r0, r0
   17f8c:	lsr	r0, r0, #5
   17f90:	tst	r3, r0
   17f94:	bne	1800c <__assert_fail@plt+0x67bc>
   17f98:	subs	r0, r1, #2
   17f9c:	movwne	r0, #1
   17fa0:	orr	r0, r3, r0
   17fa4:	tst	r0, #1
   17fa8:	ldreq	r0, [sp, #60]	; 0x3c
   17fac:	eoreq	r0, r0, #1
   17fb0:	tsteq	r0, #1
   17fb4:	bne	180e8 <__assert_fail@plt+0x6898>
   17fb8:	tst	r4, #1
   17fbc:	bne	180ac <__assert_fail@plt+0x685c>
   17fc0:	ldr	r6, [sp, #56]	; 0x38
   17fc4:	mov	r8, #0
   17fc8:	cmp	r6, #0
   17fcc:	beq	180e4 <__assert_fail@plt+0x6894>
   17fd0:	mov	r1, #0
   17fd4:	mov	r4, #2
   17fd8:	cmp	r5, #0
   17fdc:	mov	r0, r2
   17fe0:	mov	r3, #0
   17fe4:	str	r1, [sp, #84]	; 0x54
   17fe8:	beq	16e30 <__assert_fail@plt+0x55e0>
   17fec:	b	180e8 <__assert_fail@plt+0x6898>
   17ff0:	movw	r0, #49820	; 0xc29c
   17ff4:	movt	r0, #1
   17ff8:	str	r0, [sp, #76]	; 0x4c
   17ffc:	mov	r9, #0
   18000:	tst	r8, #1
   18004:	beq	170c8 <__assert_fail@plt+0x5878>
   18008:	b	17208 <__assert_fail@plt+0x59b8>
   1800c:	ldr	r1, [sp, #88]	; 0x58
   18010:	mov	r0, #2
   18014:	tst	r1, #1
   18018:	movwne	r0, #4
   1801c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   18020:	ldr	r1, [fp, #12]
   18024:	cmp	r2, #2
   18028:	moveq	r2, r0
   1802c:	b	18064 <__assert_fail@plt+0x6814>
   18030:	ldr	ip, [fp, #-84]	; 0xffffffac
   18034:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18038:	ldr	r1, [fp, #12]
   1803c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   18040:	b	18064 <__assert_fail@plt+0x6814>
   18044:	ldr	r1, [sp, #88]	; 0x58
   18048:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1804c:	ldr	r5, [sp, #28]
   18050:	mov	r0, #2
   18054:	tst	r1, #1
   18058:	ldr	r1, [fp, #12]
   1805c:	movwne	r0, #4
   18060:	mov	r2, r0
   18064:	mov	r0, #0
   18068:	bic	r1, r1, #2
   1806c:	str	r2, [sp]
   18070:	mov	r2, lr
   18074:	str	r0, [sp, #8]
   18078:	ldr	r0, [sp, #72]	; 0x48
   1807c:	str	r1, [sp, #4]
   18080:	mov	r1, r5
   18084:	str	r0, [sp, #12]
   18088:	ldr	r0, [sp, #76]	; 0x4c
   1808c:	str	r0, [sp, #16]
   18090:	mov	r0, ip
   18094:	mov	r3, r7
   18098:	bl	16da4 <__assert_fail@plt+0x5554>
   1809c:	mov	r9, r0
   180a0:	mov	r0, r9
   180a4:	sub	sp, fp, #28
   180a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180ac:	mov	r0, #5
   180b0:	ldr	r1, [sp, #56]	; 0x38
   180b4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   180b8:	str	r0, [sp]
   180bc:	ldr	r0, [fp, #12]
   180c0:	str	r0, [sp, #4]
   180c4:	ldr	r0, [fp, #16]
   180c8:	str	r0, [sp, #8]
   180cc:	ldr	r0, [sp, #72]	; 0x48
   180d0:	str	r0, [sp, #12]
   180d4:	ldr	r0, [sp, #76]	; 0x4c
   180d8:	str	r0, [sp, #16]
   180dc:	ldr	r0, [fp, #-84]	; 0xffffffac
   180e0:	b	18094 <__assert_fail@plt+0x6844>
   180e4:	mov	r3, #0
   180e8:	ldr	r1, [fp, #-88]	; 0xffffffa8
   180ec:	cmp	r1, #0
   180f0:	beq	1812c <__assert_fail@plt+0x68dc>
   180f4:	ldr	r2, [fp, #-84]	; 0xffffffac
   180f8:	tst	r3, #1
   180fc:	bne	18130 <__assert_fail@plt+0x68e0>
   18100:	ldrb	r0, [r1]
   18104:	cmp	r0, #0
   18108:	beq	18130 <__assert_fail@plt+0x68e0>
   1810c:	add	r1, r1, #1
   18110:	cmp	r9, r5
   18114:	strbcc	r0, [r2, r9]
   18118:	add	r9, r9, #1
   1811c:	ldrb	r0, [r1], #1
   18120:	cmp	r0, #0
   18124:	bne	18110 <__assert_fail@plt+0x68c0>
   18128:	b	18130 <__assert_fail@plt+0x68e0>
   1812c:	ldr	r2, [fp, #-84]	; 0xffffffac
   18130:	cmp	r9, r5
   18134:	movcc	r0, #0
   18138:	strbcc	r0, [r2, r9]
   1813c:	mov	r0, r9
   18140:	sub	sp, fp, #28
   18144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18148:	mov	r0, #4
   1814c:	b	1801c <__assert_fail@plt+0x67cc>
   18150:	bl	11814 <abort@plt>
   18154:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18158:	add	fp, sp, #28
   1815c:	sub	sp, sp, #28
   18160:	movw	r5, #53768	; 0xd208
   18164:	cmp	r2, #0
   18168:	mov	r4, r1
   1816c:	mov	r7, r0
   18170:	str	r0, [sp, #20]
   18174:	movt	r5, #2
   18178:	movne	r5, r2
   1817c:	bl	116d0 <__errno_location@plt>
   18180:	mov	sl, r0
   18184:	ldr	r2, [r5, #40]	; 0x28
   18188:	ldr	r3, [r5, #44]	; 0x2c
   1818c:	ldm	r5, {r0, r1}
   18190:	orr	r8, r1, #1
   18194:	add	r9, r5, #8
   18198:	mov	r1, #0
   1819c:	ldr	r6, [sl]
   181a0:	stm	sp, {r0, r8, r9}
   181a4:	mov	r0, #0
   181a8:	str	r2, [sp, #12]
   181ac:	str	r3, [sp, #16]
   181b0:	mov	r2, r7
   181b4:	mov	r3, r4
   181b8:	str	r6, [sp, #24]
   181bc:	mov	r6, r4
   181c0:	bl	16da4 <__assert_fail@plt+0x5554>
   181c4:	add	r7, r0, #1
   181c8:	mov	r0, r7
   181cc:	bl	19d70 <__assert_fail@plt+0x8520>
   181d0:	mov	r4, r0
   181d4:	ldr	r0, [r5]
   181d8:	ldr	r2, [r5, #44]	; 0x2c
   181dc:	ldr	r1, [r5, #40]	; 0x28
   181e0:	mov	r3, r6
   181e4:	stm	sp, {r0, r8, r9}
   181e8:	str	r2, [sp, #16]
   181ec:	ldr	r2, [sp, #20]
   181f0:	str	r1, [sp, #12]
   181f4:	mov	r0, r4
   181f8:	mov	r1, r7
   181fc:	bl	16da4 <__assert_fail@plt+0x5554>
   18200:	ldr	r0, [sp, #24]
   18204:	str	r0, [sl]
   18208:	mov	r0, r4
   1820c:	sub	sp, fp, #28
   18210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18214:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18218:	add	fp, sp, #28
   1821c:	sub	sp, sp, #36	; 0x24
   18220:	movw	r8, #53768	; 0xd208
   18224:	cmp	r3, #0
   18228:	mov	r4, r2
   1822c:	str	r2, [sp, #24]
   18230:	mov	r5, r1
   18234:	mov	r6, r0
   18238:	str	r0, [sp, #20]
   1823c:	movt	r8, #2
   18240:	movne	r8, r3
   18244:	bl	116d0 <__errno_location@plt>
   18248:	str	r0, [sp, #28]
   1824c:	ldr	r1, [r8, #40]	; 0x28
   18250:	ldr	r2, [r8, #44]	; 0x2c
   18254:	ldr	r7, [r0]
   18258:	cmp	r4, #0
   1825c:	add	sl, r8, #8
   18260:	mov	r0, #0
   18264:	ldm	r8, {r3, r9}
   18268:	orreq	r9, r9, #1
   1826c:	stm	sp, {r3, r9, sl}
   18270:	str	r1, [sp, #12]
   18274:	str	r2, [sp, #16]
   18278:	mov	r1, #0
   1827c:	mov	r2, r6
   18280:	mov	r3, r5
   18284:	str	r7, [sp, #32]
   18288:	mov	r7, r5
   1828c:	bl	16da4 <__assert_fail@plt+0x5554>
   18290:	add	r4, r0, #1
   18294:	mov	r5, r0
   18298:	mov	r0, r4
   1829c:	bl	19d70 <__assert_fail@plt+0x8520>
   182a0:	mov	r6, r0
   182a4:	ldr	r0, [r8]
   182a8:	ldr	r2, [r8, #44]	; 0x2c
   182ac:	ldr	r1, [r8, #40]	; 0x28
   182b0:	mov	r3, r7
   182b4:	stm	sp, {r0, r9, sl}
   182b8:	str	r2, [sp, #16]
   182bc:	ldr	r2, [sp, #20]
   182c0:	str	r1, [sp, #12]
   182c4:	mov	r0, r6
   182c8:	mov	r1, r4
   182cc:	bl	16da4 <__assert_fail@plt+0x5554>
   182d0:	ldr	r0, [sp, #24]
   182d4:	ldr	r1, [sp, #32]
   182d8:	ldr	r2, [sp, #28]
   182dc:	cmp	r0, #0
   182e0:	str	r1, [r2]
   182e4:	strne	r5, [r0]
   182e8:	mov	r0, r6
   182ec:	sub	sp, fp, #28
   182f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182f4:	push	{r4, r5, r6, r7, fp, lr}
   182f8:	add	fp, sp, #16
   182fc:	movw	r4, #53656	; 0xd198
   18300:	movt	r4, #2
   18304:	ldrd	r6, [r4]
   18308:	cmp	r7, #2
   1830c:	blt	18338 <__assert_fail@plt+0x6ae8>
   18310:	add	r5, r6, #12
   18314:	mov	r7, #0
   18318:	ldr	r0, [r5, r7, lsl #3]
   1831c:	bl	1a9d8 <__assert_fail@plt+0x9188>
   18320:	ldr	r1, [r4, #4]
   18324:	add	r2, r7, #2
   18328:	add	r0, r7, #1
   1832c:	mov	r7, r0
   18330:	cmp	r2, r1
   18334:	blt	18318 <__assert_fail@plt+0x6ac8>
   18338:	ldr	r0, [r6, #4]
   1833c:	movw	r5, #53816	; 0xd238
   18340:	movt	r5, #2
   18344:	cmp	r0, r5
   18348:	beq	1835c <__assert_fail@plt+0x6b0c>
   1834c:	bl	1a9d8 <__assert_fail@plt+0x9188>
   18350:	mov	r0, #256	; 0x100
   18354:	str	r0, [r4, #8]
   18358:	str	r5, [r4, #12]
   1835c:	add	r5, r4, #8
   18360:	cmp	r6, r5
   18364:	beq	18374 <__assert_fail@plt+0x6b24>
   18368:	mov	r0, r6
   1836c:	bl	1a9d8 <__assert_fail@plt+0x9188>
   18370:	str	r5, [r4]
   18374:	mov	r0, #1
   18378:	str	r0, [r4, #4]
   1837c:	pop	{r4, r5, r6, r7, fp, pc}
   18380:	movw	r3, #53768	; 0xd208
   18384:	mvn	r2, #0
   18388:	movt	r3, #2
   1838c:	b	18390 <__assert_fail@plt+0x6b40>
   18390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18394:	add	fp, sp, #28
   18398:	sub	sp, sp, #44	; 0x2c
   1839c:	mov	r7, r3
   183a0:	str	r2, [sp, #36]	; 0x24
   183a4:	str	r1, [sp, #32]
   183a8:	mov	r5, r0
   183ac:	bl	116d0 <__errno_location@plt>
   183b0:	cmp	r5, #0
   183b4:	bmi	1851c <__assert_fail@plt+0x6ccc>
   183b8:	cmn	r5, #-2147483647	; 0x80000001
   183bc:	beq	1851c <__assert_fail@plt+0x6ccc>
   183c0:	movw	r8, #53656	; 0xd198
   183c4:	mov	r4, r0
   183c8:	ldr	r0, [r0]
   183cc:	movt	r8, #2
   183d0:	str	r4, [sp, #28]
   183d4:	ldr	r1, [r8, #4]
   183d8:	ldr	r6, [r8]
   183dc:	str	r0, [sp, #24]
   183e0:	cmp	r1, r5
   183e4:	ble	183f0 <__assert_fail@plt+0x6ba0>
   183e8:	mov	sl, r6
   183ec:	b	18458 <__assert_fail@plt+0x6c08>
   183f0:	mov	r0, #8
   183f4:	add	r9, r8, #8
   183f8:	str	r1, [fp, #-32]	; 0xffffffe0
   183fc:	sub	r1, r5, r1
   18400:	mvn	r3, #-2147483648	; 0x80000000
   18404:	str	r0, [sp]
   18408:	subs	r0, r6, r9
   1840c:	add	r2, r1, #1
   18410:	sub	r1, fp, #32
   18414:	movne	r0, r6
   18418:	bl	19f70 <__assert_fail@plt+0x8720>
   1841c:	mov	sl, r0
   18420:	cmp	r6, r9
   18424:	str	r0, [r8]
   18428:	bne	18434 <__assert_fail@plt+0x6be4>
   1842c:	ldrd	r0, [r8, #8]
   18430:	stm	sl, {r0, r1}
   18434:	ldr	r1, [r8, #4]
   18438:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1843c:	add	r0, sl, r1, lsl #3
   18440:	sub	r1, r2, r1
   18444:	lsl	r2, r1, #3
   18448:	mov	r1, #0
   1844c:	bl	116f4 <memset@plt>
   18450:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18454:	str	r0, [r8, #4]
   18458:	mov	r9, sl
   1845c:	ldm	r7, {r0, r1}
   18460:	orr	r8, r1, #1
   18464:	add	r1, r7, #8
   18468:	ldr	r2, [r7, #40]	; 0x28
   1846c:	ldr	r3, [r7, #44]	; 0x2c
   18470:	ldr	r6, [r9, r5, lsl #3]!
   18474:	str	r1, [sp, #20]
   18478:	ldr	r4, [r9, #4]!
   1847c:	stm	sp, {r0, r8}
   18480:	add	r0, sp, #8
   18484:	stm	r0, {r1, r2, r3}
   18488:	ldr	r2, [sp, #32]
   1848c:	ldr	r3, [sp, #36]	; 0x24
   18490:	mov	r1, r6
   18494:	mov	r0, r4
   18498:	bl	16da4 <__assert_fail@plt+0x5554>
   1849c:	cmp	r6, r0
   184a0:	bhi	18504 <__assert_fail@plt+0x6cb4>
   184a4:	add	r6, r0, #1
   184a8:	movw	r0, #53816	; 0xd238
   184ac:	movt	r0, #2
   184b0:	str	r6, [sl, r5, lsl #3]
   184b4:	cmp	r4, r0
   184b8:	beq	184c4 <__assert_fail@plt+0x6c74>
   184bc:	mov	r0, r4
   184c0:	bl	1a9d8 <__assert_fail@plt+0x9188>
   184c4:	mov	r0, r6
   184c8:	bl	19d70 <__assert_fail@plt+0x8520>
   184cc:	str	r0, [r9]
   184d0:	mov	r4, r0
   184d4:	add	r3, sp, #8
   184d8:	ldr	r0, [r7]
   184dc:	ldr	r1, [r7, #40]	; 0x28
   184e0:	ldr	r2, [r7, #44]	; 0x2c
   184e4:	stm	sp, {r0, r8}
   184e8:	ldr	r0, [sp, #20]
   184ec:	stm	r3, {r0, r1, r2}
   184f0:	ldr	r2, [sp, #32]
   184f4:	ldr	r3, [sp, #36]	; 0x24
   184f8:	mov	r0, r4
   184fc:	mov	r1, r6
   18500:	bl	16da4 <__assert_fail@plt+0x5554>
   18504:	ldr	r1, [sp, #24]
   18508:	ldr	r0, [sp, #28]
   1850c:	str	r1, [r0]
   18510:	mov	r0, r4
   18514:	sub	sp, fp, #28
   18518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1851c:	bl	11814 <abort@plt>
   18520:	movw	r3, #53768	; 0xd208
   18524:	movt	r3, #2
   18528:	b	18390 <__assert_fail@plt+0x6b40>
   1852c:	movw	r3, #53768	; 0xd208
   18530:	mov	r1, r0
   18534:	mov	r0, #0
   18538:	mvn	r2, #0
   1853c:	movt	r3, #2
   18540:	b	18390 <__assert_fail@plt+0x6b40>
   18544:	movw	r3, #53768	; 0xd208
   18548:	mov	r2, r1
   1854c:	mov	r1, r0
   18550:	mov	r0, #0
   18554:	movt	r3, #2
   18558:	b	18390 <__assert_fail@plt+0x6b40>
   1855c:	push	{fp, lr}
   18560:	mov	fp, sp
   18564:	sub	sp, sp, #48	; 0x30
   18568:	vmov.i32	q8, #0	; 0x00000000
   1856c:	mov	ip, #32
   18570:	mov	r3, sp
   18574:	mov	lr, r2
   18578:	cmp	r1, #10
   1857c:	add	r2, r3, #16
   18580:	vst1.64	{d16-d17}, [r3], ip
   18584:	vst1.64	{d16-d17}, [r2]
   18588:	vst1.64	{d16-d17}, [r3]
   1858c:	beq	185ac <__assert_fail@plt+0x6d5c>
   18590:	str	r1, [sp]
   18594:	mov	r3, sp
   18598:	mov	r1, lr
   1859c:	mvn	r2, #0
   185a0:	bl	18390 <__assert_fail@plt+0x6b40>
   185a4:	mov	sp, fp
   185a8:	pop	{fp, pc}
   185ac:	bl	11814 <abort@plt>
   185b0:	push	{r4, sl, fp, lr}
   185b4:	add	fp, sp, #8
   185b8:	sub	sp, sp, #48	; 0x30
   185bc:	vmov.i32	q8, #0	; 0x00000000
   185c0:	mov	ip, r3
   185c4:	mov	r3, sp
   185c8:	mov	lr, #32
   185cc:	cmp	r1, #10
   185d0:	add	r4, r3, #16
   185d4:	vst1.64	{d16-d17}, [r3], lr
   185d8:	vst1.64	{d16-d17}, [r4]
   185dc:	vst1.64	{d16-d17}, [r3]
   185e0:	beq	18600 <__assert_fail@plt+0x6db0>
   185e4:	str	r1, [sp]
   185e8:	mov	r1, r2
   185ec:	mov	r3, sp
   185f0:	mov	r2, ip
   185f4:	bl	18390 <__assert_fail@plt+0x6b40>
   185f8:	sub	sp, fp, #8
   185fc:	pop	{r4, sl, fp, pc}
   18600:	bl	11814 <abort@plt>
   18604:	push	{fp, lr}
   18608:	mov	fp, sp
   1860c:	sub	sp, sp, #48	; 0x30
   18610:	vmov.i32	q8, #0	; 0x00000000
   18614:	mov	r3, sp
   18618:	mov	ip, #32
   1861c:	cmp	r0, #10
   18620:	add	r2, r3, #16
   18624:	vst1.64	{d16-d17}, [r3], ip
   18628:	vst1.64	{d16-d17}, [r2]
   1862c:	vst1.64	{d16-d17}, [r3]
   18630:	beq	18650 <__assert_fail@plt+0x6e00>
   18634:	str	r0, [sp]
   18638:	mov	r3, sp
   1863c:	mov	r0, #0
   18640:	mvn	r2, #0
   18644:	bl	18390 <__assert_fail@plt+0x6b40>
   18648:	mov	sp, fp
   1864c:	pop	{fp, pc}
   18650:	bl	11814 <abort@plt>
   18654:	push	{fp, lr}
   18658:	mov	fp, sp
   1865c:	sub	sp, sp, #48	; 0x30
   18660:	vmov.i32	q8, #0	; 0x00000000
   18664:	mov	r3, sp
   18668:	mov	ip, #32
   1866c:	cmp	r0, #10
   18670:	add	lr, r3, #16
   18674:	vst1.64	{d16-d17}, [r3], ip
   18678:	vst1.64	{d16-d17}, [lr]
   1867c:	vst1.64	{d16-d17}, [r3]
   18680:	beq	1869c <__assert_fail@plt+0x6e4c>
   18684:	str	r0, [sp]
   18688:	mov	r3, sp
   1868c:	mov	r0, #0
   18690:	bl	18390 <__assert_fail@plt+0x6b40>
   18694:	mov	sp, fp
   18698:	pop	{fp, pc}
   1869c:	bl	11814 <abort@plt>
   186a0:	push	{r4, sl, fp, lr}
   186a4:	add	fp, sp, #8
   186a8:	sub	sp, sp, #48	; 0x30
   186ac:	mov	lr, r0
   186b0:	movw	r0, #53768	; 0xd208
   186b4:	mov	ip, r1
   186b8:	mov	r1, #32
   186bc:	mov	r4, #1
   186c0:	movt	r0, #2
   186c4:	add	r3, r0, #16
   186c8:	vld1.64	{d16-d17}, [r0], r1
   186cc:	vld1.64	{d20-d21}, [r0]
   186d0:	vld1.64	{d18-d19}, [r3]
   186d4:	mov	r3, sp
   186d8:	add	r0, r3, #32
   186dc:	add	r1, r3, #16
   186e0:	vst1.64	{d20-d21}, [r0]
   186e4:	mov	r0, #28
   186e8:	vst1.64	{d18-d19}, [r1]
   186ec:	mov	r1, r3
   186f0:	and	r0, r0, r2, lsr #3
   186f4:	and	r2, r2, #31
   186f8:	vst1.64	{d16-d17}, [r1], r0
   186fc:	ldr	r0, [r1, #8]
   18700:	bic	r4, r4, r0, lsr r2
   18704:	eor	r0, r0, r4, lsl r2
   18708:	mov	r2, ip
   1870c:	str	r0, [r1, #8]
   18710:	mov	r0, #0
   18714:	mov	r1, lr
   18718:	bl	18390 <__assert_fail@plt+0x6b40>
   1871c:	sub	sp, fp, #8
   18720:	pop	{r4, sl, fp, pc}
   18724:	push	{fp, lr}
   18728:	mov	fp, sp
   1872c:	sub	sp, sp, #48	; 0x30
   18730:	mov	ip, r0
   18734:	movw	r0, #53768	; 0xd208
   18738:	mov	r2, #32
   1873c:	movt	r0, #2
   18740:	add	r3, r0, #16
   18744:	vld1.64	{d16-d17}, [r0], r2
   18748:	vld1.64	{d20-d21}, [r0]
   1874c:	vld1.64	{d18-d19}, [r3]
   18750:	mov	r3, sp
   18754:	add	r0, r3, #32
   18758:	add	r2, r3, #16
   1875c:	vst1.64	{d20-d21}, [r0]
   18760:	mov	r0, #28
   18764:	vst1.64	{d18-d19}, [r2]
   18768:	mov	r2, r3
   1876c:	and	r0, r0, r1, lsr #3
   18770:	and	r1, r1, #31
   18774:	vst1.64	{d16-d17}, [r2], r0
   18778:	mov	r0, #1
   1877c:	ldr	lr, [r2, #8]
   18780:	bic	r0, r0, lr, lsr r1
   18784:	eor	r0, lr, r0, lsl r1
   18788:	mov	r1, ip
   1878c:	str	r0, [r2, #8]
   18790:	mov	r0, #0
   18794:	mvn	r2, #0
   18798:	bl	18390 <__assert_fail@plt+0x6b40>
   1879c:	mov	sp, fp
   187a0:	pop	{fp, pc}
   187a4:	push	{fp, lr}
   187a8:	mov	fp, sp
   187ac:	sub	sp, sp, #48	; 0x30
   187b0:	mov	r1, r0
   187b4:	movw	r0, #53768	; 0xd208
   187b8:	mov	r3, #32
   187bc:	movt	r0, #2
   187c0:	add	r2, r0, #16
   187c4:	vld1.64	{d16-d17}, [r0], r3
   187c8:	mov	r3, sp
   187cc:	vld1.64	{d18-d19}, [r2]
   187d0:	vld1.64	{d20-d21}, [r0]
   187d4:	add	r2, r3, #16
   187d8:	add	r0, r3, #32
   187dc:	vst1.64	{d18-d19}, [r2]
   187e0:	vst1.64	{d20-d21}, [r0]
   187e4:	mov	r0, #12
   187e8:	mov	r2, r3
   187ec:	vst1.64	{d16-d17}, [r2], r0
   187f0:	ldr	r0, [r2]
   187f4:	orr	r0, r0, #67108864	; 0x4000000
   187f8:	str	r0, [r2]
   187fc:	mov	r0, #0
   18800:	mvn	r2, #0
   18804:	bl	18390 <__assert_fail@plt+0x6b40>
   18808:	mov	sp, fp
   1880c:	pop	{fp, pc}
   18810:	push	{fp, lr}
   18814:	mov	fp, sp
   18818:	sub	sp, sp, #48	; 0x30
   1881c:	mov	ip, r1
   18820:	mov	r1, r0
   18824:	movw	r0, #53768	; 0xd208
   18828:	mov	r2, #32
   1882c:	movt	r0, #2
   18830:	add	r3, r0, #16
   18834:	vld1.64	{d16-d17}, [r0], r2
   18838:	vld1.64	{d18-d19}, [r3]
   1883c:	vld1.64	{d20-d21}, [r0]
   18840:	mov	r3, sp
   18844:	add	r2, r3, #16
   18848:	add	r0, r3, #32
   1884c:	vst1.64	{d18-d19}, [r2]
   18850:	vst1.64	{d20-d21}, [r0]
   18854:	mov	r0, #12
   18858:	mov	r2, r3
   1885c:	vst1.64	{d16-d17}, [r2], r0
   18860:	ldr	r0, [r2]
   18864:	orr	r0, r0, #67108864	; 0x4000000
   18868:	str	r0, [r2]
   1886c:	mov	r0, #0
   18870:	mov	r2, ip
   18874:	bl	18390 <__assert_fail@plt+0x6b40>
   18878:	mov	sp, fp
   1887c:	pop	{fp, pc}
   18880:	push	{r4, sl, fp, lr}
   18884:	add	fp, sp, #8
   18888:	sub	sp, sp, #96	; 0x60
   1888c:	vmov.i32	q8, #0	; 0x00000000
   18890:	mov	ip, r2
   18894:	mov	r2, sp
   18898:	mov	r4, #28
   1889c:	cmp	r1, #10
   188a0:	mov	r3, r2
   188a4:	add	lr, r2, #16
   188a8:	vst1.64	{d16-d17}, [r3], r4
   188ac:	vst1.64	{d16-d17}, [lr]
   188b0:	vst1.32	{d16-d17}, [r3]
   188b4:	beq	18904 <__assert_fail@plt+0x70b4>
   188b8:	vld1.64	{d16-d17}, [r2], r4
   188bc:	vld1.64	{d18-d19}, [lr]
   188c0:	add	r3, sp, #48	; 0x30
   188c4:	vld1.32	{d20-d21}, [r2]
   188c8:	add	r2, r3, #20
   188cc:	add	r4, r3, #4
   188d0:	vst1.32	{d18-d19}, [r2]
   188d4:	add	r2, r3, #32
   188d8:	vst1.32	{d16-d17}, [r4]
   188dc:	vst1.32	{d20-d21}, [r2]
   188e0:	str	r1, [sp, #48]	; 0x30
   188e4:	mvn	r2, #0
   188e8:	ldr	r1, [sp, #60]	; 0x3c
   188ec:	orr	r1, r1, #67108864	; 0x4000000
   188f0:	str	r1, [sp, #60]	; 0x3c
   188f4:	mov	r1, ip
   188f8:	bl	18390 <__assert_fail@plt+0x6b40>
   188fc:	sub	sp, fp, #8
   18900:	pop	{r4, sl, fp, pc}
   18904:	bl	11814 <abort@plt>
   18908:	push	{r4, r5, r6, sl, fp, lr}
   1890c:	add	fp, sp, #16
   18910:	sub	sp, sp, #48	; 0x30
   18914:	mov	ip, r3
   18918:	movw	r3, #53768	; 0xd208
   1891c:	mov	r6, #32
   18920:	cmp	r1, #0
   18924:	mov	r4, sp
   18928:	movt	r3, #2
   1892c:	cmpne	r2, #0
   18930:	add	r5, r4, #16
   18934:	add	lr, r3, #16
   18938:	vld1.64	{d16-d17}, [r3], r6
   1893c:	vld1.64	{d18-d19}, [lr]
   18940:	vld1.64	{d20-d21}, [r3]
   18944:	mov	r3, #10
   18948:	vst1.64	{d16-d17}, [r4], r6
   1894c:	vst1.64	{d18-d19}, [r5]
   18950:	vst1.64	{d20-d21}, [r4]
   18954:	str	r3, [sp]
   18958:	bne	18960 <__assert_fail@plt+0x7110>
   1895c:	bl	11814 <abort@plt>
   18960:	str	r2, [sp, #44]	; 0x2c
   18964:	str	r1, [sp, #40]	; 0x28
   18968:	mov	r3, sp
   1896c:	mov	r1, ip
   18970:	mvn	r2, #0
   18974:	bl	18390 <__assert_fail@plt+0x6b40>
   18978:	sub	sp, fp, #16
   1897c:	pop	{r4, r5, r6, sl, fp, pc}
   18980:	push	{r4, r5, r6, sl, fp, lr}
   18984:	add	fp, sp, #16
   18988:	sub	sp, sp, #48	; 0x30
   1898c:	mov	lr, r3
   18990:	movw	r3, #53768	; 0xd208
   18994:	mov	r6, #32
   18998:	cmp	r1, #0
   1899c:	mov	r4, sp
   189a0:	movt	r3, #2
   189a4:	cmpne	r2, #0
   189a8:	add	r5, r4, #16
   189ac:	add	ip, r3, #16
   189b0:	vld1.64	{d16-d17}, [r3], r6
   189b4:	vld1.64	{d18-d19}, [ip]
   189b8:	vld1.64	{d20-d21}, [r3]
   189bc:	mov	r3, #10
   189c0:	vst1.64	{d16-d17}, [r4], r6
   189c4:	vst1.64	{d18-d19}, [r5]
   189c8:	vst1.64	{d20-d21}, [r4]
   189cc:	str	r3, [sp]
   189d0:	bne	189d8 <__assert_fail@plt+0x7188>
   189d4:	bl	11814 <abort@plt>
   189d8:	ldr	ip, [fp, #8]
   189dc:	str	r2, [sp, #44]	; 0x2c
   189e0:	str	r1, [sp, #40]	; 0x28
   189e4:	mov	r3, sp
   189e8:	mov	r1, lr
   189ec:	mov	r2, ip
   189f0:	bl	18390 <__assert_fail@plt+0x6b40>
   189f4:	sub	sp, fp, #16
   189f8:	pop	{r4, r5, r6, sl, fp, pc}
   189fc:	push	{r4, sl, fp, lr}
   18a00:	add	fp, sp, #8
   18a04:	sub	sp, sp, #48	; 0x30
   18a08:	movw	r3, #53768	; 0xd208
   18a0c:	mov	lr, #32
   18a10:	mov	ip, r2
   18a14:	cmp	r0, #0
   18a18:	movt	r3, #2
   18a1c:	cmpne	r1, #0
   18a20:	add	r2, r3, #16
   18a24:	vld1.64	{d16-d17}, [r3], lr
   18a28:	vld1.64	{d20-d21}, [r3]
   18a2c:	vld1.64	{d18-d19}, [r2]
   18a30:	mov	r2, sp
   18a34:	add	r4, r2, #16
   18a38:	vst1.64	{d16-d17}, [r2], lr
   18a3c:	vst1.64	{d20-d21}, [r2]
   18a40:	mov	r2, #10
   18a44:	vst1.64	{d18-d19}, [r4]
   18a48:	str	r2, [sp]
   18a4c:	bne	18a54 <__assert_fail@plt+0x7204>
   18a50:	bl	11814 <abort@plt>
   18a54:	str	r1, [sp, #44]	; 0x2c
   18a58:	str	r0, [sp, #40]	; 0x28
   18a5c:	mov	r3, sp
   18a60:	mov	r0, #0
   18a64:	mov	r1, ip
   18a68:	mvn	r2, #0
   18a6c:	bl	18390 <__assert_fail@plt+0x6b40>
   18a70:	sub	sp, fp, #8
   18a74:	pop	{r4, sl, fp, pc}
   18a78:	push	{r4, r5, fp, lr}
   18a7c:	add	fp, sp, #8
   18a80:	sub	sp, sp, #48	; 0x30
   18a84:	mov	ip, r3
   18a88:	movw	r3, #53768	; 0xd208
   18a8c:	mov	r4, #32
   18a90:	mov	lr, r2
   18a94:	cmp	r0, #0
   18a98:	movt	r3, #2
   18a9c:	cmpne	r1, #0
   18aa0:	add	r2, r3, #16
   18aa4:	vld1.64	{d16-d17}, [r3], r4
   18aa8:	vld1.64	{d20-d21}, [r3]
   18aac:	vld1.64	{d18-d19}, [r2]
   18ab0:	mov	r2, sp
   18ab4:	add	r5, r2, #16
   18ab8:	vst1.64	{d16-d17}, [r2], r4
   18abc:	vst1.64	{d20-d21}, [r2]
   18ac0:	mov	r2, #10
   18ac4:	vst1.64	{d18-d19}, [r5]
   18ac8:	str	r2, [sp]
   18acc:	bne	18ad4 <__assert_fail@plt+0x7284>
   18ad0:	bl	11814 <abort@plt>
   18ad4:	str	r1, [sp, #44]	; 0x2c
   18ad8:	str	r0, [sp, #40]	; 0x28
   18adc:	mov	r3, sp
   18ae0:	mov	r0, #0
   18ae4:	mov	r1, lr
   18ae8:	mov	r2, ip
   18aec:	bl	18390 <__assert_fail@plt+0x6b40>
   18af0:	sub	sp, fp, #8
   18af4:	pop	{r4, r5, fp, pc}
   18af8:	movw	r3, #53608	; 0xd168
   18afc:	movt	r3, #2
   18b00:	b	18390 <__assert_fail@plt+0x6b40>
   18b04:	movw	r3, #53608	; 0xd168
   18b08:	mov	r2, r1
   18b0c:	mov	r1, r0
   18b10:	mov	r0, #0
   18b14:	movt	r3, #2
   18b18:	b	18390 <__assert_fail@plt+0x6b40>
   18b1c:	movw	r3, #53608	; 0xd168
   18b20:	mvn	r2, #0
   18b24:	movt	r3, #2
   18b28:	b	18390 <__assert_fail@plt+0x6b40>
   18b2c:	movw	r3, #53608	; 0xd168
   18b30:	mov	r1, r0
   18b34:	mov	r0, #0
   18b38:	mvn	r2, #0
   18b3c:	movt	r3, #2
   18b40:	b	18390 <__assert_fail@plt+0x6b40>
   18b44:	push	{r4, sl, fp, lr}
   18b48:	add	fp, sp, #8
   18b4c:	sub	sp, sp, #104	; 0x68
   18b50:	movw	r1, #50877	; 0xc6bd
   18b54:	mov	r4, r0
   18b58:	mov	r2, sp
   18b5c:	mov	r0, #3
   18b60:	movt	r1, #1
   18b64:	bl	1182c <__lxstat64@plt>
   18b68:	mov	r1, r0
   18b6c:	mov	r0, #0
   18b70:	cmp	r1, #0
   18b74:	beq	18b80 <__assert_fail@plt+0x7330>
   18b78:	sub	sp, fp, #8
   18b7c:	pop	{r4, sl, fp, pc}
   18b80:	ldr	r0, [sp, #96]	; 0x60
   18b84:	ldr	r1, [sp, #100]	; 0x64
   18b88:	ldm	sp, {r2, r3}
   18b8c:	stm	r4, {r0, r1, r2, r3}
   18b90:	mov	r0, r4
   18b94:	sub	sp, fp, #8
   18b98:	pop	{r4, sl, fp, pc}
   18b9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ba0:	add	fp, sp, #28
   18ba4:	sub	sp, sp, #964	; 0x3c4
   18ba8:	sub	sp, sp, #3072	; 0xc00
   18bac:	mov	r4, r2
   18bb0:	mov	r5, r1
   18bb4:	cmn	r0, #100	; 0x64
   18bb8:	beq	18bcc <__assert_fail@plt+0x737c>
   18bbc:	mov	r7, r0
   18bc0:	ldrb	r0, [r5]
   18bc4:	cmp	r0, #47	; 0x2f
   18bc8:	bne	18be0 <__assert_fail@plt+0x7390>
   18bcc:	mov	r0, r5
   18bd0:	mov	r1, r4
   18bd4:	sub	sp, fp, #28
   18bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bdc:	b	194dc <__assert_fail@plt+0x7c8c>
   18be0:	mov	sl, sp
   18be4:	mov	r1, r7
   18be8:	mov	r2, r5
   18bec:	mov	r0, sl
   18bf0:	bl	1a414 <__assert_fail@plt+0x8bc4>
   18bf4:	cmp	r0, #0
   18bf8:	beq	18ce4 <__assert_fail@plt+0x7494>
   18bfc:	mov	r1, r4
   18c00:	mov	r6, r0
   18c04:	bl	194dc <__assert_fail@plt+0x7c8c>
   18c08:	mov	r9, r0
   18c0c:	bl	116d0 <__errno_location@plt>
   18c10:	ldr	r2, [r0]
   18c14:	mov	r8, r0
   18c18:	cmp	r6, sl
   18c1c:	beq	18c30 <__assert_fail@plt+0x73e0>
   18c20:	mov	r0, r6
   18c24:	mov	r6, r2
   18c28:	bl	1a9d8 <__assert_fail@plt+0x9188>
   18c2c:	mov	r2, r6
   18c30:	cmn	r9, #1
   18c34:	bne	18db0 <__assert_fail@plt+0x7560>
   18c38:	sub	r0, r2, #1
   18c3c:	cmp	r0, #37	; 0x25
   18c40:	bhi	18dbc <__assert_fail@plt+0x756c>
   18c44:	add	r1, pc, #0
   18c48:	ldr	pc, [r1, r0, lsl #2]
   18c4c:	andeq	r8, r1, r4, ror #25
   18c50:	andeq	r8, r1, r4, ror #25
   18c54:	andeq	r8, r1, r4, asr #27
   18c58:	andeq	r8, r1, r4, asr #27
   18c5c:	andeq	r8, r1, r4, asr #27
   18c60:	andeq	r8, r1, r4, asr #27
   18c64:	andeq	r8, r1, r4, asr #27
   18c68:	andeq	r8, r1, r4, asr #27
   18c6c:	andeq	r8, r1, r4, asr #27
   18c70:	andeq	r8, r1, r4, asr #27
   18c74:	andeq	r8, r1, r4, asr #27
   18c78:	andeq	r8, r1, r4, asr #27
   18c7c:	andeq	r8, r1, r4, ror #25
   18c80:	andeq	r8, r1, r4, asr #27
   18c84:	andeq	r8, r1, r4, asr #27
   18c88:	andeq	r8, r1, r4, asr #27
   18c8c:	andeq	r8, r1, r4, asr #27
   18c90:	andeq	r8, r1, r4, asr #27
   18c94:	andeq	r8, r1, r4, asr #27
   18c98:	andeq	r8, r1, r4, ror #25
   18c9c:	andeq	r8, r1, r4, asr #27
   18ca0:	andeq	r8, r1, r4, asr #27
   18ca4:	andeq	r8, r1, r4, asr #27
   18ca8:	andeq	r8, r1, r4, asr #27
   18cac:	andeq	r8, r1, r4, asr #27
   18cb0:	andeq	r8, r1, r4, asr #27
   18cb4:	andeq	r8, r1, r4, asr #27
   18cb8:	andeq	r8, r1, r4, asr #27
   18cbc:	andeq	r8, r1, r4, asr #27
   18cc0:	andeq	r8, r1, r4, asr #27
   18cc4:	andeq	r8, r1, r4, asr #27
   18cc8:	andeq	r8, r1, r4, asr #27
   18ccc:	andeq	r8, r1, r4, asr #27
   18cd0:	andeq	r8, r1, r4, asr #27
   18cd4:	andeq	r8, r1, r4, asr #27
   18cd8:	andeq	r8, r1, r4, asr #27
   18cdc:	andeq	r8, r1, r4, asr #27
   18ce0:	andeq	r8, r1, r4, ror #25
   18ce4:	mov	r0, sp
   18ce8:	bl	1ac00 <__assert_fail@plt+0x93b0>
   18cec:	cmp	r0, #0
   18cf0:	bne	18dd4 <__assert_fail@plt+0x7584>
   18cf4:	cmp	r7, #0
   18cf8:	bmi	18d2c <__assert_fail@plt+0x74dc>
   18cfc:	ldr	r0, [sp]
   18d00:	cmp	r0, r7
   18d04:	bne	18d2c <__assert_fail@plt+0x74dc>
   18d08:	mov	r0, sp
   18d0c:	bl	1ac78 <__assert_fail@plt+0x9428>
   18d10:	bl	116d0 <__errno_location@plt>
   18d14:	mov	r1, #9
   18d18:	mvn	r9, #0
   18d1c:	str	r1, [r0]
   18d20:	mov	r0, r9
   18d24:	sub	sp, fp, #28
   18d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d2c:	mov	r0, r7
   18d30:	bl	117b4 <fchdir@plt>
   18d34:	cmp	r0, #0
   18d38:	beq	18d64 <__assert_fail@plt+0x7514>
   18d3c:	bl	116d0 <__errno_location@plt>
   18d40:	ldr	r5, [r0]
   18d44:	mov	r4, r0
   18d48:	mov	r0, sp
   18d4c:	bl	1ac78 <__assert_fail@plt+0x9428>
   18d50:	str	r5, [r4]
   18d54:	mvn	r9, #0
   18d58:	mov	r0, r9
   18d5c:	sub	sp, fp, #28
   18d60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d64:	mov	r0, r5
   18d68:	mov	r1, r4
   18d6c:	bl	194dc <__assert_fail@plt+0x7c8c>
   18d70:	mov	r9, r0
   18d74:	mov	r4, #0
   18d78:	cmn	r0, #1
   18d7c:	bne	18d88 <__assert_fail@plt+0x7538>
   18d80:	bl	116d0 <__errno_location@plt>
   18d84:	ldr	r4, [r0]
   18d88:	mov	r0, sp
   18d8c:	bl	1ac5c <__assert_fail@plt+0x940c>
   18d90:	cmp	r0, #0
   18d94:	bne	18de0 <__assert_fail@plt+0x7590>
   18d98:	mov	r0, sp
   18d9c:	bl	1ac78 <__assert_fail@plt+0x9428>
   18da0:	cmp	r4, #0
   18da4:	beq	18db0 <__assert_fail@plt+0x7560>
   18da8:	bl	116d0 <__errno_location@plt>
   18dac:	str	r4, [r0]
   18db0:	mov	r0, r9
   18db4:	sub	sp, fp, #28
   18db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dbc:	cmp	r2, #95	; 0x5f
   18dc0:	beq	18ce4 <__assert_fail@plt+0x7494>
   18dc4:	str	r2, [r8]
   18dc8:	mov	r0, r9
   18dcc:	sub	sp, fp, #28
   18dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dd4:	bl	116d0 <__errno_location@plt>
   18dd8:	ldr	r0, [r0]
   18ddc:	bl	1ab44 <__assert_fail@plt+0x92f4>
   18de0:	bl	116d0 <__errno_location@plt>
   18de4:	ldr	r0, [r0]
   18de8:	bl	1ab84 <__assert_fail@plt+0x9334>
   18dec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18df0:	add	fp, sp, #28
   18df4:	sub	sp, sp, #964	; 0x3c4
   18df8:	sub	sp, sp, #3072	; 0xc00
   18dfc:	mov	r4, r2
   18e00:	mov	r5, r1
   18e04:	cmn	r0, #100	; 0x64
   18e08:	beq	18e1c <__assert_fail@plt+0x75cc>
   18e0c:	mov	r7, r0
   18e10:	ldrb	r0, [r5]
   18e14:	cmp	r0, #47	; 0x2f
   18e18:	bne	18e30 <__assert_fail@plt+0x75e0>
   18e1c:	mov	r0, r5
   18e20:	mov	r1, r4
   18e24:	sub	sp, fp, #28
   18e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e2c:	b	19550 <__assert_fail@plt+0x7d00>
   18e30:	mov	sl, sp
   18e34:	mov	r1, r7
   18e38:	mov	r2, r5
   18e3c:	mov	r0, sl
   18e40:	bl	1a414 <__assert_fail@plt+0x8bc4>
   18e44:	cmp	r0, #0
   18e48:	beq	18f34 <__assert_fail@plt+0x76e4>
   18e4c:	mov	r1, r4
   18e50:	mov	r6, r0
   18e54:	bl	19550 <__assert_fail@plt+0x7d00>
   18e58:	mov	r9, r0
   18e5c:	bl	116d0 <__errno_location@plt>
   18e60:	ldr	r2, [r0]
   18e64:	mov	r8, r0
   18e68:	cmp	r6, sl
   18e6c:	beq	18e80 <__assert_fail@plt+0x7630>
   18e70:	mov	r0, r6
   18e74:	mov	r6, r2
   18e78:	bl	1a9d8 <__assert_fail@plt+0x9188>
   18e7c:	mov	r2, r6
   18e80:	cmn	r9, #1
   18e84:	bne	19000 <__assert_fail@plt+0x77b0>
   18e88:	sub	r0, r2, #1
   18e8c:	cmp	r0, #37	; 0x25
   18e90:	bhi	1900c <__assert_fail@plt+0x77bc>
   18e94:	add	r1, pc, #0
   18e98:	ldr	pc, [r1, r0, lsl #2]
   18e9c:	andeq	r8, r1, r4, lsr pc
   18ea0:	andeq	r8, r1, r4, lsr pc
   18ea4:	andeq	r9, r1, r4, lsl r0
   18ea8:	andeq	r9, r1, r4, lsl r0
   18eac:	andeq	r9, r1, r4, lsl r0
   18eb0:	andeq	r9, r1, r4, lsl r0
   18eb4:	andeq	r9, r1, r4, lsl r0
   18eb8:	andeq	r9, r1, r4, lsl r0
   18ebc:	andeq	r9, r1, r4, lsl r0
   18ec0:	andeq	r9, r1, r4, lsl r0
   18ec4:	andeq	r9, r1, r4, lsl r0
   18ec8:	andeq	r9, r1, r4, lsl r0
   18ecc:	andeq	r8, r1, r4, lsr pc
   18ed0:	andeq	r9, r1, r4, lsl r0
   18ed4:	andeq	r9, r1, r4, lsl r0
   18ed8:	andeq	r9, r1, r4, lsl r0
   18edc:	andeq	r9, r1, r4, lsl r0
   18ee0:	andeq	r9, r1, r4, lsl r0
   18ee4:	andeq	r9, r1, r4, lsl r0
   18ee8:	andeq	r8, r1, r4, lsr pc
   18eec:	andeq	r9, r1, r4, lsl r0
   18ef0:	andeq	r9, r1, r4, lsl r0
   18ef4:	andeq	r9, r1, r4, lsl r0
   18ef8:	andeq	r9, r1, r4, lsl r0
   18efc:	andeq	r9, r1, r4, lsl r0
   18f00:	andeq	r9, r1, r4, lsl r0
   18f04:	andeq	r9, r1, r4, lsl r0
   18f08:	andeq	r9, r1, r4, lsl r0
   18f0c:	andeq	r9, r1, r4, lsl r0
   18f10:	andeq	r9, r1, r4, lsl r0
   18f14:	andeq	r9, r1, r4, lsl r0
   18f18:	andeq	r9, r1, r4, lsl r0
   18f1c:	andeq	r9, r1, r4, lsl r0
   18f20:	andeq	r9, r1, r4, lsl r0
   18f24:	andeq	r9, r1, r4, lsl r0
   18f28:	andeq	r9, r1, r4, lsl r0
   18f2c:	andeq	r9, r1, r4, lsl r0
   18f30:	andeq	r8, r1, r4, lsr pc
   18f34:	mov	r0, sp
   18f38:	bl	1ac00 <__assert_fail@plt+0x93b0>
   18f3c:	cmp	r0, #0
   18f40:	bne	19024 <__assert_fail@plt+0x77d4>
   18f44:	cmp	r7, #0
   18f48:	bmi	18f7c <__assert_fail@plt+0x772c>
   18f4c:	ldr	r0, [sp]
   18f50:	cmp	r0, r7
   18f54:	bne	18f7c <__assert_fail@plt+0x772c>
   18f58:	mov	r0, sp
   18f5c:	bl	1ac78 <__assert_fail@plt+0x9428>
   18f60:	bl	116d0 <__errno_location@plt>
   18f64:	mov	r1, #9
   18f68:	mvn	r9, #0
   18f6c:	str	r1, [r0]
   18f70:	mov	r0, r9
   18f74:	sub	sp, fp, #28
   18f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f7c:	mov	r0, r7
   18f80:	bl	117b4 <fchdir@plt>
   18f84:	cmp	r0, #0
   18f88:	beq	18fb4 <__assert_fail@plt+0x7764>
   18f8c:	bl	116d0 <__errno_location@plt>
   18f90:	ldr	r5, [r0]
   18f94:	mov	r4, r0
   18f98:	mov	r0, sp
   18f9c:	bl	1ac78 <__assert_fail@plt+0x9428>
   18fa0:	str	r5, [r4]
   18fa4:	mvn	r9, #0
   18fa8:	mov	r0, r9
   18fac:	sub	sp, fp, #28
   18fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fb4:	mov	r0, r5
   18fb8:	mov	r1, r4
   18fbc:	bl	19550 <__assert_fail@plt+0x7d00>
   18fc0:	mov	r9, r0
   18fc4:	mov	r4, #0
   18fc8:	cmn	r0, #1
   18fcc:	bne	18fd8 <__assert_fail@plt+0x7788>
   18fd0:	bl	116d0 <__errno_location@plt>
   18fd4:	ldr	r4, [r0]
   18fd8:	mov	r0, sp
   18fdc:	bl	1ac5c <__assert_fail@plt+0x940c>
   18fe0:	cmp	r0, #0
   18fe4:	bne	19030 <__assert_fail@plt+0x77e0>
   18fe8:	mov	r0, sp
   18fec:	bl	1ac78 <__assert_fail@plt+0x9428>
   18ff0:	cmp	r4, #0
   18ff4:	beq	19000 <__assert_fail@plt+0x77b0>
   18ff8:	bl	116d0 <__errno_location@plt>
   18ffc:	str	r4, [r0]
   19000:	mov	r0, r9
   19004:	sub	sp, fp, #28
   19008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1900c:	cmp	r2, #95	; 0x5f
   19010:	beq	18f34 <__assert_fail@plt+0x76e4>
   19014:	str	r2, [r8]
   19018:	mov	r0, r9
   1901c:	sub	sp, fp, #28
   19020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19024:	bl	116d0 <__errno_location@plt>
   19028:	ldr	r0, [r0]
   1902c:	bl	1ab44 <__assert_fail@plt+0x92f4>
   19030:	bl	116d0 <__errno_location@plt>
   19034:	ldr	r0, [r0]
   19038:	bl	1ab84 <__assert_fail@plt+0x9334>
   1903c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19040:	add	fp, sp, #28
   19044:	sub	sp, sp, #964	; 0x3c4
   19048:	sub	sp, sp, #3072	; 0xc00
   1904c:	mov	r4, r2
   19050:	mov	r5, r1
   19054:	cmn	r0, #100	; 0x64
   19058:	beq	1906c <__assert_fail@plt+0x781c>
   1905c:	mov	r7, r0
   19060:	ldrb	r0, [r5]
   19064:	cmp	r0, #47	; 0x2f
   19068:	bne	19080 <__assert_fail@plt+0x7830>
   1906c:	mov	r0, r5
   19070:	mov	r1, r4
   19074:	sub	sp, fp, #28
   19078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1907c:	b	11730 <setfilecon@plt>
   19080:	mov	sl, sp
   19084:	mov	r1, r7
   19088:	mov	r2, r5
   1908c:	mov	r0, sl
   19090:	bl	1a414 <__assert_fail@plt+0x8bc4>
   19094:	cmp	r0, #0
   19098:	beq	19184 <__assert_fail@plt+0x7934>
   1909c:	mov	r1, r4
   190a0:	mov	r6, r0
   190a4:	bl	11730 <setfilecon@plt>
   190a8:	mov	r9, r0
   190ac:	bl	116d0 <__errno_location@plt>
   190b0:	ldr	r2, [r0]
   190b4:	mov	r8, r0
   190b8:	cmp	r6, sl
   190bc:	beq	190d0 <__assert_fail@plt+0x7880>
   190c0:	mov	r0, r6
   190c4:	mov	r6, r2
   190c8:	bl	1a9d8 <__assert_fail@plt+0x9188>
   190cc:	mov	r2, r6
   190d0:	cmn	r9, #1
   190d4:	bne	19250 <__assert_fail@plt+0x7a00>
   190d8:	sub	r0, r2, #1
   190dc:	cmp	r0, #37	; 0x25
   190e0:	bhi	1925c <__assert_fail@plt+0x7a0c>
   190e4:	add	r1, pc, #0
   190e8:	ldr	pc, [r1, r0, lsl #2]
   190ec:	andeq	r9, r1, r4, lsl #3
   190f0:	andeq	r9, r1, r4, lsl #3
   190f4:	andeq	r9, r1, r4, ror #4
   190f8:	andeq	r9, r1, r4, ror #4
   190fc:	andeq	r9, r1, r4, ror #4
   19100:	andeq	r9, r1, r4, ror #4
   19104:	andeq	r9, r1, r4, ror #4
   19108:	andeq	r9, r1, r4, ror #4
   1910c:	andeq	r9, r1, r4, ror #4
   19110:	andeq	r9, r1, r4, ror #4
   19114:	andeq	r9, r1, r4, ror #4
   19118:	andeq	r9, r1, r4, ror #4
   1911c:	andeq	r9, r1, r4, lsl #3
   19120:	andeq	r9, r1, r4, ror #4
   19124:	andeq	r9, r1, r4, ror #4
   19128:	andeq	r9, r1, r4, ror #4
   1912c:	andeq	r9, r1, r4, ror #4
   19130:	andeq	r9, r1, r4, ror #4
   19134:	andeq	r9, r1, r4, ror #4
   19138:	andeq	r9, r1, r4, lsl #3
   1913c:	andeq	r9, r1, r4, ror #4
   19140:	andeq	r9, r1, r4, ror #4
   19144:	andeq	r9, r1, r4, ror #4
   19148:	andeq	r9, r1, r4, ror #4
   1914c:	andeq	r9, r1, r4, ror #4
   19150:	andeq	r9, r1, r4, ror #4
   19154:	andeq	r9, r1, r4, ror #4
   19158:	andeq	r9, r1, r4, ror #4
   1915c:	andeq	r9, r1, r4, ror #4
   19160:	andeq	r9, r1, r4, ror #4
   19164:	andeq	r9, r1, r4, ror #4
   19168:	andeq	r9, r1, r4, ror #4
   1916c:	andeq	r9, r1, r4, ror #4
   19170:	andeq	r9, r1, r4, ror #4
   19174:	andeq	r9, r1, r4, ror #4
   19178:	andeq	r9, r1, r4, ror #4
   1917c:	andeq	r9, r1, r4, ror #4
   19180:	andeq	r9, r1, r4, lsl #3
   19184:	mov	r0, sp
   19188:	bl	1ac00 <__assert_fail@plt+0x93b0>
   1918c:	cmp	r0, #0
   19190:	bne	19274 <__assert_fail@plt+0x7a24>
   19194:	cmp	r7, #0
   19198:	bmi	191cc <__assert_fail@plt+0x797c>
   1919c:	ldr	r0, [sp]
   191a0:	cmp	r0, r7
   191a4:	bne	191cc <__assert_fail@plt+0x797c>
   191a8:	mov	r0, sp
   191ac:	bl	1ac78 <__assert_fail@plt+0x9428>
   191b0:	bl	116d0 <__errno_location@plt>
   191b4:	mov	r1, #9
   191b8:	mvn	r9, #0
   191bc:	str	r1, [r0]
   191c0:	mov	r0, r9
   191c4:	sub	sp, fp, #28
   191c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191cc:	mov	r0, r7
   191d0:	bl	117b4 <fchdir@plt>
   191d4:	cmp	r0, #0
   191d8:	beq	19204 <__assert_fail@plt+0x79b4>
   191dc:	bl	116d0 <__errno_location@plt>
   191e0:	ldr	r5, [r0]
   191e4:	mov	r4, r0
   191e8:	mov	r0, sp
   191ec:	bl	1ac78 <__assert_fail@plt+0x9428>
   191f0:	str	r5, [r4]
   191f4:	mvn	r9, #0
   191f8:	mov	r0, r9
   191fc:	sub	sp, fp, #28
   19200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19204:	mov	r0, r5
   19208:	mov	r1, r4
   1920c:	bl	11730 <setfilecon@plt>
   19210:	mov	r9, r0
   19214:	mov	r4, #0
   19218:	cmn	r0, #1
   1921c:	bne	19228 <__assert_fail@plt+0x79d8>
   19220:	bl	116d0 <__errno_location@plt>
   19224:	ldr	r4, [r0]
   19228:	mov	r0, sp
   1922c:	bl	1ac5c <__assert_fail@plt+0x940c>
   19230:	cmp	r0, #0
   19234:	bne	19280 <__assert_fail@plt+0x7a30>
   19238:	mov	r0, sp
   1923c:	bl	1ac78 <__assert_fail@plt+0x9428>
   19240:	cmp	r4, #0
   19244:	beq	19250 <__assert_fail@plt+0x7a00>
   19248:	bl	116d0 <__errno_location@plt>
   1924c:	str	r4, [r0]
   19250:	mov	r0, r9
   19254:	sub	sp, fp, #28
   19258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1925c:	cmp	r2, #95	; 0x5f
   19260:	beq	19184 <__assert_fail@plt+0x7934>
   19264:	str	r2, [r8]
   19268:	mov	r0, r9
   1926c:	sub	sp, fp, #28
   19270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19274:	bl	116d0 <__errno_location@plt>
   19278:	ldr	r0, [r0]
   1927c:	bl	1ab44 <__assert_fail@plt+0x92f4>
   19280:	bl	116d0 <__errno_location@plt>
   19284:	ldr	r0, [r0]
   19288:	bl	1ab84 <__assert_fail@plt+0x9334>
   1928c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19290:	add	fp, sp, #28
   19294:	sub	sp, sp, #964	; 0x3c4
   19298:	sub	sp, sp, #3072	; 0xc00
   1929c:	mov	r4, r2
   192a0:	mov	r5, r1
   192a4:	cmn	r0, #100	; 0x64
   192a8:	beq	192bc <__assert_fail@plt+0x7a6c>
   192ac:	mov	r7, r0
   192b0:	ldrb	r0, [r5]
   192b4:	cmp	r0, #47	; 0x2f
   192b8:	bne	192d0 <__assert_fail@plt+0x7a80>
   192bc:	mov	r0, r5
   192c0:	mov	r1, r4
   192c4:	sub	sp, fp, #28
   192c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192cc:	b	114d8 <lsetfilecon@plt>
   192d0:	mov	sl, sp
   192d4:	mov	r1, r7
   192d8:	mov	r2, r5
   192dc:	mov	r0, sl
   192e0:	bl	1a414 <__assert_fail@plt+0x8bc4>
   192e4:	cmp	r0, #0
   192e8:	beq	193d4 <__assert_fail@plt+0x7b84>
   192ec:	mov	r1, r4
   192f0:	mov	r6, r0
   192f4:	bl	114d8 <lsetfilecon@plt>
   192f8:	mov	r9, r0
   192fc:	bl	116d0 <__errno_location@plt>
   19300:	ldr	r2, [r0]
   19304:	mov	r8, r0
   19308:	cmp	r6, sl
   1930c:	beq	19320 <__assert_fail@plt+0x7ad0>
   19310:	mov	r0, r6
   19314:	mov	r6, r2
   19318:	bl	1a9d8 <__assert_fail@plt+0x9188>
   1931c:	mov	r2, r6
   19320:	cmn	r9, #1
   19324:	bne	194a0 <__assert_fail@plt+0x7c50>
   19328:	sub	r0, r2, #1
   1932c:	cmp	r0, #37	; 0x25
   19330:	bhi	194ac <__assert_fail@plt+0x7c5c>
   19334:	add	r1, pc, #0
   19338:	ldr	pc, [r1, r0, lsl #2]
   1933c:	ldrdeq	r9, [r1], -r4
   19340:	ldrdeq	r9, [r1], -r4
   19344:			; <UNDEFINED> instruction: 0x000194b4
   19348:			; <UNDEFINED> instruction: 0x000194b4
   1934c:			; <UNDEFINED> instruction: 0x000194b4
   19350:			; <UNDEFINED> instruction: 0x000194b4
   19354:			; <UNDEFINED> instruction: 0x000194b4
   19358:			; <UNDEFINED> instruction: 0x000194b4
   1935c:			; <UNDEFINED> instruction: 0x000194b4
   19360:			; <UNDEFINED> instruction: 0x000194b4
   19364:			; <UNDEFINED> instruction: 0x000194b4
   19368:			; <UNDEFINED> instruction: 0x000194b4
   1936c:	ldrdeq	r9, [r1], -r4
   19370:			; <UNDEFINED> instruction: 0x000194b4
   19374:			; <UNDEFINED> instruction: 0x000194b4
   19378:			; <UNDEFINED> instruction: 0x000194b4
   1937c:			; <UNDEFINED> instruction: 0x000194b4
   19380:			; <UNDEFINED> instruction: 0x000194b4
   19384:			; <UNDEFINED> instruction: 0x000194b4
   19388:	ldrdeq	r9, [r1], -r4
   1938c:			; <UNDEFINED> instruction: 0x000194b4
   19390:			; <UNDEFINED> instruction: 0x000194b4
   19394:			; <UNDEFINED> instruction: 0x000194b4
   19398:			; <UNDEFINED> instruction: 0x000194b4
   1939c:			; <UNDEFINED> instruction: 0x000194b4
   193a0:			; <UNDEFINED> instruction: 0x000194b4
   193a4:			; <UNDEFINED> instruction: 0x000194b4
   193a8:			; <UNDEFINED> instruction: 0x000194b4
   193ac:			; <UNDEFINED> instruction: 0x000194b4
   193b0:			; <UNDEFINED> instruction: 0x000194b4
   193b4:			; <UNDEFINED> instruction: 0x000194b4
   193b8:			; <UNDEFINED> instruction: 0x000194b4
   193bc:			; <UNDEFINED> instruction: 0x000194b4
   193c0:			; <UNDEFINED> instruction: 0x000194b4
   193c4:			; <UNDEFINED> instruction: 0x000194b4
   193c8:			; <UNDEFINED> instruction: 0x000194b4
   193cc:			; <UNDEFINED> instruction: 0x000194b4
   193d0:	ldrdeq	r9, [r1], -r4
   193d4:	mov	r0, sp
   193d8:	bl	1ac00 <__assert_fail@plt+0x93b0>
   193dc:	cmp	r0, #0
   193e0:	bne	194c4 <__assert_fail@plt+0x7c74>
   193e4:	cmp	r7, #0
   193e8:	bmi	1941c <__assert_fail@plt+0x7bcc>
   193ec:	ldr	r0, [sp]
   193f0:	cmp	r0, r7
   193f4:	bne	1941c <__assert_fail@plt+0x7bcc>
   193f8:	mov	r0, sp
   193fc:	bl	1ac78 <__assert_fail@plt+0x9428>
   19400:	bl	116d0 <__errno_location@plt>
   19404:	mov	r1, #9
   19408:	mvn	r9, #0
   1940c:	str	r1, [r0]
   19410:	mov	r0, r9
   19414:	sub	sp, fp, #28
   19418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1941c:	mov	r0, r7
   19420:	bl	117b4 <fchdir@plt>
   19424:	cmp	r0, #0
   19428:	beq	19454 <__assert_fail@plt+0x7c04>
   1942c:	bl	116d0 <__errno_location@plt>
   19430:	ldr	r5, [r0]
   19434:	mov	r4, r0
   19438:	mov	r0, sp
   1943c:	bl	1ac78 <__assert_fail@plt+0x9428>
   19440:	str	r5, [r4]
   19444:	mvn	r9, #0
   19448:	mov	r0, r9
   1944c:	sub	sp, fp, #28
   19450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19454:	mov	r0, r5
   19458:	mov	r1, r4
   1945c:	bl	114d8 <lsetfilecon@plt>
   19460:	mov	r9, r0
   19464:	mov	r4, #0
   19468:	cmn	r0, #1
   1946c:	bne	19478 <__assert_fail@plt+0x7c28>
   19470:	bl	116d0 <__errno_location@plt>
   19474:	ldr	r4, [r0]
   19478:	mov	r0, sp
   1947c:	bl	1ac5c <__assert_fail@plt+0x940c>
   19480:	cmp	r0, #0
   19484:	bne	194d0 <__assert_fail@plt+0x7c80>
   19488:	mov	r0, sp
   1948c:	bl	1ac78 <__assert_fail@plt+0x9428>
   19490:	cmp	r4, #0
   19494:	beq	194a0 <__assert_fail@plt+0x7c50>
   19498:	bl	116d0 <__errno_location@plt>
   1949c:	str	r4, [r0]
   194a0:	mov	r0, r9
   194a4:	sub	sp, fp, #28
   194a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194ac:	cmp	r2, #95	; 0x5f
   194b0:	beq	193d4 <__assert_fail@plt+0x7b84>
   194b4:	str	r2, [r8]
   194b8:	mov	r0, r9
   194bc:	sub	sp, fp, #28
   194c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194c4:	bl	116d0 <__errno_location@plt>
   194c8:	ldr	r0, [r0]
   194cc:	bl	1ab44 <__assert_fail@plt+0x92f4>
   194d0:	bl	116d0 <__errno_location@plt>
   194d4:	ldr	r0, [r0]
   194d8:	bl	1ab84 <__assert_fail@plt+0x9334>
   194dc:	push	{r4, r5, fp, lr}
   194e0:	add	fp, sp, #8
   194e4:	mov	r4, r1
   194e8:	bl	11694 <getfilecon@plt>
   194ec:	cmp	r0, #10
   194f0:	beq	19508 <__assert_fail@plt+0x7cb8>
   194f4:	cmp	r0, #0
   194f8:	bne	1954c <__assert_fail@plt+0x7cfc>
   194fc:	bl	116d0 <__errno_location@plt>
   19500:	mov	r1, #95	; 0x5f
   19504:	b	19544 <__assert_fail@plt+0x7cf4>
   19508:	ldr	r5, [r4]
   1950c:	movw	r1, #49908	; 0xc2f4
   19510:	movt	r1, #1
   19514:	mov	r0, r5
   19518:	bl	114c0 <strcmp@plt>
   1951c:	mov	r1, r0
   19520:	mov	r0, #10
   19524:	cmp	r1, #0
   19528:	popne	{r4, r5, fp, pc}
   1952c:	mov	r0, r5
   19530:	bl	117cc <freecon@plt>
   19534:	mov	r0, #0
   19538:	str	r0, [r4]
   1953c:	bl	116d0 <__errno_location@plt>
   19540:	mov	r1, #61	; 0x3d
   19544:	str	r1, [r0]
   19548:	mvn	r0, #0
   1954c:	pop	{r4, r5, fp, pc}
   19550:	push	{r4, r5, fp, lr}
   19554:	add	fp, sp, #8
   19558:	mov	r4, r1
   1955c:	bl	11610 <lgetfilecon@plt>
   19560:	cmp	r0, #10
   19564:	beq	1957c <__assert_fail@plt+0x7d2c>
   19568:	cmp	r0, #0
   1956c:	bne	195c0 <__assert_fail@plt+0x7d70>
   19570:	bl	116d0 <__errno_location@plt>
   19574:	mov	r1, #95	; 0x5f
   19578:	b	195b8 <__assert_fail@plt+0x7d68>
   1957c:	ldr	r5, [r4]
   19580:	movw	r1, #49908	; 0xc2f4
   19584:	movt	r1, #1
   19588:	mov	r0, r5
   1958c:	bl	114c0 <strcmp@plt>
   19590:	mov	r1, r0
   19594:	mov	r0, #10
   19598:	cmp	r1, #0
   1959c:	popne	{r4, r5, fp, pc}
   195a0:	mov	r0, r5
   195a4:	bl	117cc <freecon@plt>
   195a8:	mov	r0, #0
   195ac:	str	r0, [r4]
   195b0:	bl	116d0 <__errno_location@plt>
   195b4:	mov	r1, #61	; 0x3d
   195b8:	str	r1, [r0]
   195bc:	mvn	r0, #0
   195c0:	pop	{r4, r5, fp, pc}
   195c4:	push	{r4, r5, fp, lr}
   195c8:	add	fp, sp, #8
   195cc:	mov	r4, r1
   195d0:	bl	1155c <fgetfilecon@plt>
   195d4:	cmp	r0, #10
   195d8:	beq	195f0 <__assert_fail@plt+0x7da0>
   195dc:	cmp	r0, #0
   195e0:	bne	19634 <__assert_fail@plt+0x7de4>
   195e4:	bl	116d0 <__errno_location@plt>
   195e8:	mov	r1, #95	; 0x5f
   195ec:	b	1962c <__assert_fail@plt+0x7ddc>
   195f0:	ldr	r5, [r4]
   195f4:	movw	r1, #49908	; 0xc2f4
   195f8:	movt	r1, #1
   195fc:	mov	r0, r5
   19600:	bl	114c0 <strcmp@plt>
   19604:	mov	r1, r0
   19608:	mov	r0, #10
   1960c:	cmp	r1, #0
   19610:	popne	{r4, r5, fp, pc}
   19614:	mov	r0, r5
   19618:	bl	117cc <freecon@plt>
   1961c:	mov	r0, #0
   19620:	str	r0, [r4]
   19624:	bl	116d0 <__errno_location@plt>
   19628:	mov	r1, #61	; 0x3d
   1962c:	str	r1, [r0]
   19630:	mvn	r0, #0
   19634:	pop	{r4, r5, fp, pc}
   19638:	push	{r4, r5, r6, r7, fp, lr}
   1963c:	add	fp, sp, #16
   19640:	mov	r4, r0
   19644:	cmp	r0, #2
   19648:	bhi	19678 <__assert_fail@plt+0x7e28>
   1964c:	mov	r0, r4
   19650:	bl	1aca0 <__assert_fail@plt+0x9450>
   19654:	mov	r5, r0
   19658:	bl	116d0 <__errno_location@plt>
   1965c:	ldr	r7, [r0]
   19660:	mov	r6, r0
   19664:	mov	r0, r4
   19668:	bl	11820 <close@plt>
   1966c:	mov	r0, r5
   19670:	str	r7, [r6]
   19674:	pop	{r4, r5, r6, r7, fp, pc}
   19678:	mov	r0, r4
   1967c:	pop	{r4, r5, r6, r7, fp, pc}
   19680:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19684:	add	fp, sp, #24
   19688:	sub	sp, sp, #32
   1968c:	ldr	r6, [fp, #12]
   19690:	ldr	r7, [fp, #8]
   19694:	mov	r4, r2
   19698:	mov	r8, r0
   1969c:	cmp	r1, #0
   196a0:	beq	196c8 <__assert_fail@plt+0x7e78>
   196a4:	movw	r2, #49918	; 0xc2fe
   196a8:	mov	r5, r1
   196ac:	str	r3, [sp, #4]
   196b0:	str	r4, [sp]
   196b4:	mov	r0, r8
   196b8:	mov	r1, #1
   196bc:	movt	r2, #1
   196c0:	mov	r3, r5
   196c4:	b	196e0 <__assert_fail@plt+0x7e90>
   196c8:	movw	r2, #49930	; 0xc30a
   196cc:	str	r3, [sp]
   196d0:	mov	r0, r8
   196d4:	mov	r1, #1
   196d8:	mov	r3, r4
   196dc:	movt	r2, #1
   196e0:	bl	11718 <__fprintf_chk@plt>
   196e4:	movw	r1, #49937	; 0xc311
   196e8:	mov	r0, #0
   196ec:	mov	r2, #5
   196f0:	movt	r1, #1
   196f4:	bl	11538 <dcgettext@plt>
   196f8:	movw	r2, #50655	; 0xc5df
   196fc:	mov	r3, r0
   19700:	movw	r0, #2022	; 0x7e6
   19704:	mov	r1, #1
   19708:	movt	r2, #1
   1970c:	str	r0, [sp]
   19710:	mov	r0, r8
   19714:	bl	11718 <__fprintf_chk@plt>
   19718:	movw	r4, #47642	; 0xba1a
   1971c:	mov	r1, r8
   19720:	movt	r4, #1
   19724:	mov	r0, r4
   19728:	bl	1149c <fputs_unlocked@plt>
   1972c:	movw	r1, #49941	; 0xc315
   19730:	mov	r0, #0
   19734:	mov	r2, #5
   19738:	movt	r1, #1
   1973c:	bl	11538 <dcgettext@plt>
   19740:	movw	r3, #50112	; 0xc3c0
   19744:	mov	r2, r0
   19748:	mov	r0, r8
   1974c:	mov	r1, #1
   19750:	movt	r3, #1
   19754:	bl	11718 <__fprintf_chk@plt>
   19758:	mov	r0, r4
   1975c:	mov	r1, r8
   19760:	bl	1149c <fputs_unlocked@plt>
   19764:	cmp	r6, #9
   19768:	bhi	197a4 <__assert_fail@plt+0x7f54>
   1976c:	add	r0, pc, #0
   19770:	ldr	pc, [r0, r6, lsl #2]
   19774:	muleq	r1, ip, r7
   19778:			; <UNDEFINED> instruction: 0x000197b0
   1977c:	andeq	r9, r1, r0, ror #15
   19780:	andeq	r9, r1, r8, lsl #16
   19784:	andeq	r9, r1, r0, lsr r8
   19788:	andeq	r9, r1, r8, asr r8
   1978c:	andeq	r9, r1, r0, lsl #17
   19790:			; <UNDEFINED> instruction: 0x000198b8
   19794:	andeq	r9, r1, r0, ror #18
   19798:	andeq	r9, r1, r8, lsl #18
   1979c:	sub	sp, fp, #24
   197a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   197a4:	movw	r1, #50465	; 0xc521
   197a8:	movt	r1, #1
   197ac:	b	19910 <__assert_fail@plt+0x80c0>
   197b0:	movw	r1, #50146	; 0xc3e2
   197b4:	mov	r0, #0
   197b8:	mov	r2, #5
   197bc:	movt	r1, #1
   197c0:	bl	11538 <dcgettext@plt>
   197c4:	ldr	r3, [r7]
   197c8:	mov	r2, r0
   197cc:	mov	r0, r8
   197d0:	mov	r1, #1
   197d4:	sub	sp, fp, #24
   197d8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   197dc:	b	11718 <__fprintf_chk@plt>
   197e0:	movw	r1, #50162	; 0xc3f2
   197e4:	mov	r0, #0
   197e8:	mov	r2, #5
   197ec:	movt	r1, #1
   197f0:	bl	11538 <dcgettext@plt>
   197f4:	mov	r2, r0
   197f8:	ldr	r3, [r7]
   197fc:	ldr	r0, [r7, #4]
   19800:	str	r0, [sp]
   19804:	b	198f4 <__assert_fail@plt+0x80a4>
   19808:	movw	r1, #50185	; 0xc409
   1980c:	mov	r0, #0
   19810:	mov	r2, #5
   19814:	movt	r1, #1
   19818:	bl	11538 <dcgettext@plt>
   1981c:	mov	r2, r0
   19820:	ldr	r3, [r7]
   19824:	ldmib	r7, {r0, r1}
   19828:	stm	sp, {r0, r1}
   1982c:	b	198f4 <__assert_fail@plt+0x80a4>
   19830:	movw	r1, #50213	; 0xc425
   19834:	mov	r0, #0
   19838:	mov	r2, #5
   1983c:	movt	r1, #1
   19840:	bl	11538 <dcgettext@plt>
   19844:	ldr	r3, [r7]
   19848:	mov	r2, r0
   1984c:	ldmib	r7, {r0, r1, r7}
   19850:	stm	sp, {r0, r1, r7}
   19854:	b	198f4 <__assert_fail@plt+0x80a4>
   19858:	movw	r1, #50245	; 0xc445
   1985c:	mov	r0, #0
   19860:	mov	r2, #5
   19864:	movt	r1, #1
   19868:	bl	11538 <dcgettext@plt>
   1986c:	ldr	r3, [r7]
   19870:	mov	r2, r0
   19874:	ldmib	r7, {r0, r1, r6, r7}
   19878:	stm	sp, {r0, r1, r6, r7}
   1987c:	b	198f4 <__assert_fail@plt+0x80a4>
   19880:	movw	r1, #50281	; 0xc469
   19884:	mov	r0, #0
   19888:	mov	r2, #5
   1988c:	movt	r1, #1
   19890:	bl	11538 <dcgettext@plt>
   19894:	mov	r2, r0
   19898:	ldr	r3, [r7]
   1989c:	ldmib	r7, {r0, r1, r6}
   198a0:	ldr	r5, [r7, #16]
   198a4:	ldr	r7, [r7, #20]
   198a8:	stm	sp, {r0, r1, r6}
   198ac:	str	r5, [sp, #12]
   198b0:	str	r7, [sp, #16]
   198b4:	b	198f4 <__assert_fail@plt+0x80a4>
   198b8:	movw	r1, #50321	; 0xc491
   198bc:	mov	r0, #0
   198c0:	mov	r2, #5
   198c4:	movt	r1, #1
   198c8:	bl	11538 <dcgettext@plt>
   198cc:	mov	r2, r0
   198d0:	ldr	r3, [r7]
   198d4:	ldmib	r7, {r0, r1, r6}
   198d8:	ldr	r5, [r7, #16]
   198dc:	ldr	r4, [r7, #20]
   198e0:	ldr	r7, [r7, #24]
   198e4:	stm	sp, {r0, r1, r6}
   198e8:	str	r5, [sp, #12]
   198ec:	str	r4, [sp, #16]
   198f0:	str	r7, [sp, #20]
   198f4:	mov	r0, r8
   198f8:	mov	r1, #1
   198fc:	bl	11718 <__fprintf_chk@plt>
   19900:	sub	sp, fp, #24
   19904:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19908:	movw	r1, #50413	; 0xc4ed
   1990c:	movt	r1, #1
   19910:	mov	r0, #0
   19914:	mov	r2, #5
   19918:	bl	11538 <dcgettext@plt>
   1991c:	mov	ip, r0
   19920:	ldr	r3, [r7]
   19924:	ldr	r0, [r7, #4]
   19928:	ldr	r1, [r7, #8]
   1992c:	ldr	r6, [r7, #12]
   19930:	ldr	r5, [r7, #16]
   19934:	ldr	r4, [r7, #20]
   19938:	ldr	r2, [r7, #24]
   1993c:	ldr	lr, [r7, #28]
   19940:	ldr	r7, [r7, #32]
   19944:	stm	sp, {r0, r1, r6}
   19948:	str	r5, [sp, #12]
   1994c:	str	r4, [sp, #16]
   19950:	str	r2, [sp, #20]
   19954:	str	lr, [sp, #24]
   19958:	str	r7, [sp, #28]
   1995c:	b	199a4 <__assert_fail@plt+0x8154>
   19960:	movw	r1, #50365	; 0xc4bd
   19964:	mov	r0, #0
   19968:	mov	r2, #5
   1996c:	movt	r1, #1
   19970:	bl	11538 <dcgettext@plt>
   19974:	mov	ip, r0
   19978:	ldr	r3, [r7]
   1997c:	ldmib	r7, {r0, r1, r6}
   19980:	ldr	r5, [r7, #16]
   19984:	ldr	r4, [r7, #20]
   19988:	ldr	r2, [r7, #24]
   1998c:	ldr	r7, [r7, #28]
   19990:	stm	sp, {r0, r1, r6}
   19994:	str	r5, [sp, #12]
   19998:	str	r4, [sp, #16]
   1999c:	str	r2, [sp, #20]
   199a0:	str	r7, [sp, #24]
   199a4:	mov	r0, r8
   199a8:	mov	r1, #1
   199ac:	mov	r2, ip
   199b0:	bl	11718 <__fprintf_chk@plt>
   199b4:	sub	sp, fp, #24
   199b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   199bc:	push	{r4, sl, fp, lr}
   199c0:	add	fp, sp, #8
   199c4:	sub	sp, sp, #8
   199c8:	ldr	ip, [fp, #8]
   199cc:	mov	lr, #0
   199d0:	ldr	r4, [ip, lr, lsl #2]
   199d4:	add	lr, lr, #1
   199d8:	cmp	r4, #0
   199dc:	bne	199d0 <__assert_fail@plt+0x8180>
   199e0:	sub	r4, lr, #1
   199e4:	str	ip, [sp]
   199e8:	str	r4, [sp, #4]
   199ec:	bl	19680 <__assert_fail@plt+0x7e30>
   199f0:	sub	sp, fp, #8
   199f4:	pop	{r4, sl, fp, pc}
   199f8:	push	{fp, lr}
   199fc:	mov	fp, sp
   19a00:	sub	sp, sp, #48	; 0x30
   19a04:	ldr	ip, [fp, #8]
   19a08:	ldr	lr, [ip]
   19a0c:	cmp	lr, #0
   19a10:	str	lr, [sp, #8]
   19a14:	beq	19ab0 <__assert_fail@plt+0x8260>
   19a18:	ldr	lr, [ip, #4]
   19a1c:	cmp	lr, #0
   19a20:	str	lr, [sp, #12]
   19a24:	beq	19ab8 <__assert_fail@plt+0x8268>
   19a28:	ldr	lr, [ip, #8]
   19a2c:	cmp	lr, #0
   19a30:	str	lr, [sp, #16]
   19a34:	beq	19ac0 <__assert_fail@plt+0x8270>
   19a38:	ldr	lr, [ip, #12]
   19a3c:	cmp	lr, #0
   19a40:	str	lr, [sp, #20]
   19a44:	beq	19ac8 <__assert_fail@plt+0x8278>
   19a48:	ldr	lr, [ip, #16]
   19a4c:	cmp	lr, #0
   19a50:	str	lr, [sp, #24]
   19a54:	beq	19ad0 <__assert_fail@plt+0x8280>
   19a58:	ldr	lr, [ip, #20]
   19a5c:	cmp	lr, #0
   19a60:	str	lr, [sp, #28]
   19a64:	beq	19ad8 <__assert_fail@plt+0x8288>
   19a68:	ldr	lr, [ip, #24]
   19a6c:	cmp	lr, #0
   19a70:	str	lr, [sp, #32]
   19a74:	beq	19ae0 <__assert_fail@plt+0x8290>
   19a78:	ldr	lr, [ip, #28]
   19a7c:	cmp	lr, #0
   19a80:	str	lr, [sp, #36]	; 0x24
   19a84:	beq	19ae8 <__assert_fail@plt+0x8298>
   19a88:	ldr	lr, [ip, #32]
   19a8c:	cmp	lr, #0
   19a90:	str	lr, [sp, #40]	; 0x28
   19a94:	beq	19af0 <__assert_fail@plt+0x82a0>
   19a98:	ldr	lr, [ip, #36]	; 0x24
   19a9c:	mov	ip, #10
   19aa0:	cmp	lr, #0
   19aa4:	str	lr, [sp, #44]	; 0x2c
   19aa8:	movweq	ip, #9
   19aac:	b	19af4 <__assert_fail@plt+0x82a4>
   19ab0:	mov	ip, #0
   19ab4:	b	19af4 <__assert_fail@plt+0x82a4>
   19ab8:	mov	ip, #1
   19abc:	b	19af4 <__assert_fail@plt+0x82a4>
   19ac0:	mov	ip, #2
   19ac4:	b	19af4 <__assert_fail@plt+0x82a4>
   19ac8:	mov	ip, #3
   19acc:	b	19af4 <__assert_fail@plt+0x82a4>
   19ad0:	mov	ip, #4
   19ad4:	b	19af4 <__assert_fail@plt+0x82a4>
   19ad8:	mov	ip, #5
   19adc:	b	19af4 <__assert_fail@plt+0x82a4>
   19ae0:	mov	ip, #6
   19ae4:	b	19af4 <__assert_fail@plt+0x82a4>
   19ae8:	mov	ip, #7
   19aec:	b	19af4 <__assert_fail@plt+0x82a4>
   19af0:	mov	ip, #8
   19af4:	add	lr, sp, #8
   19af8:	str	ip, [sp, #4]
   19afc:	str	lr, [sp]
   19b00:	bl	19680 <__assert_fail@plt+0x7e30>
   19b04:	mov	sp, fp
   19b08:	pop	{fp, pc}
   19b0c:	push	{fp, lr}
   19b10:	mov	fp, sp
   19b14:	sub	sp, sp, #56	; 0x38
   19b18:	add	ip, fp, #8
   19b1c:	str	ip, [sp, #12]
   19b20:	ldr	lr, [fp, #8]
   19b24:	cmp	lr, #0
   19b28:	str	lr, [sp, #16]
   19b2c:	beq	19bc8 <__assert_fail@plt+0x8378>
   19b30:	ldr	lr, [ip, #4]
   19b34:	cmp	lr, #0
   19b38:	str	lr, [sp, #20]
   19b3c:	beq	19bd0 <__assert_fail@plt+0x8380>
   19b40:	ldr	lr, [ip, #8]
   19b44:	cmp	lr, #0
   19b48:	str	lr, [sp, #24]
   19b4c:	beq	19bd8 <__assert_fail@plt+0x8388>
   19b50:	ldr	lr, [ip, #12]
   19b54:	cmp	lr, #0
   19b58:	str	lr, [sp, #28]
   19b5c:	beq	19be0 <__assert_fail@plt+0x8390>
   19b60:	ldr	lr, [ip, #16]
   19b64:	cmp	lr, #0
   19b68:	str	lr, [sp, #32]
   19b6c:	beq	19be8 <__assert_fail@plt+0x8398>
   19b70:	ldr	lr, [ip, #20]
   19b74:	cmp	lr, #0
   19b78:	str	lr, [sp, #36]	; 0x24
   19b7c:	beq	19bf0 <__assert_fail@plt+0x83a0>
   19b80:	ldr	lr, [ip, #24]
   19b84:	cmp	lr, #0
   19b88:	str	lr, [sp, #40]	; 0x28
   19b8c:	beq	19bf8 <__assert_fail@plt+0x83a8>
   19b90:	ldr	lr, [ip, #28]
   19b94:	cmp	lr, #0
   19b98:	str	lr, [sp, #44]	; 0x2c
   19b9c:	beq	19c00 <__assert_fail@plt+0x83b0>
   19ba0:	ldr	lr, [ip, #32]
   19ba4:	cmp	lr, #0
   19ba8:	str	lr, [sp, #48]	; 0x30
   19bac:	beq	19c08 <__assert_fail@plt+0x83b8>
   19bb0:	ldr	lr, [ip, #36]	; 0x24
   19bb4:	mov	ip, #10
   19bb8:	cmp	lr, #0
   19bbc:	str	lr, [sp, #52]	; 0x34
   19bc0:	movweq	ip, #9
   19bc4:	b	19c0c <__assert_fail@plt+0x83bc>
   19bc8:	mov	ip, #0
   19bcc:	b	19c0c <__assert_fail@plt+0x83bc>
   19bd0:	mov	ip, #1
   19bd4:	b	19c0c <__assert_fail@plt+0x83bc>
   19bd8:	mov	ip, #2
   19bdc:	b	19c0c <__assert_fail@plt+0x83bc>
   19be0:	mov	ip, #3
   19be4:	b	19c0c <__assert_fail@plt+0x83bc>
   19be8:	mov	ip, #4
   19bec:	b	19c0c <__assert_fail@plt+0x83bc>
   19bf0:	mov	ip, #5
   19bf4:	b	19c0c <__assert_fail@plt+0x83bc>
   19bf8:	mov	ip, #6
   19bfc:	b	19c0c <__assert_fail@plt+0x83bc>
   19c00:	mov	ip, #7
   19c04:	b	19c0c <__assert_fail@plt+0x83bc>
   19c08:	mov	ip, #8
   19c0c:	add	lr, sp, #16
   19c10:	str	ip, [sp, #4]
   19c14:	str	lr, [sp]
   19c18:	bl	19680 <__assert_fail@plt+0x7e30>
   19c1c:	mov	sp, fp
   19c20:	pop	{fp, pc}
   19c24:	push	{fp, lr}
   19c28:	mov	fp, sp
   19c2c:	movw	r0, #53692	; 0xd1bc
   19c30:	movt	r0, #2
   19c34:	ldr	r1, [r0]
   19c38:	movw	r0, #47642	; 0xba1a
   19c3c:	movt	r0, #1
   19c40:	bl	1149c <fputs_unlocked@plt>
   19c44:	movw	r1, #50525	; 0xc55d
   19c48:	mov	r0, #0
   19c4c:	mov	r2, #5
   19c50:	movt	r1, #1
   19c54:	bl	11538 <dcgettext@plt>
   19c58:	movw	r2, #50545	; 0xc571
   19c5c:	mov	r1, r0
   19c60:	mov	r0, #1
   19c64:	movt	r2, #1
   19c68:	bl	11700 <__printf_chk@plt>
   19c6c:	movw	r1, #50567	; 0xc587
   19c70:	mov	r0, #0
   19c74:	mov	r2, #5
   19c78:	movt	r1, #1
   19c7c:	bl	11538 <dcgettext@plt>
   19c80:	movw	r2, #47788	; 0xbaac
   19c84:	movw	r3, #48257	; 0xbc81
   19c88:	mov	r1, r0
   19c8c:	mov	r0, #1
   19c90:	movt	r2, #1
   19c94:	movt	r3, #1
   19c98:	bl	11700 <__printf_chk@plt>
   19c9c:	movw	r1, #50587	; 0xc59b
   19ca0:	mov	r0, #0
   19ca4:	mov	r2, #5
   19ca8:	movt	r1, #1
   19cac:	bl	11538 <dcgettext@plt>
   19cb0:	movw	r2, #50626	; 0xc5c2
   19cb4:	mov	r1, r0
   19cb8:	mov	r0, #1
   19cbc:	movt	r2, #1
   19cc0:	pop	{fp, lr}
   19cc4:	b	11700 <__printf_chk@plt>
   19cc8:	push	{r4, r5, r6, sl, fp, lr}
   19ccc:	add	fp, sp, #16
   19cd0:	mov	r4, r2
   19cd4:	mov	r5, r1
   19cd8:	mov	r6, r0
   19cdc:	bl	1abc4 <__assert_fail@plt+0x9374>
   19ce0:	cmp	r0, #0
   19ce4:	popne	{r4, r5, r6, sl, fp, pc}
   19ce8:	cmp	r6, #0
   19cec:	beq	19d00 <__assert_fail@plt+0x84b0>
   19cf0:	cmp	r5, #0
   19cf4:	cmpne	r4, #0
   19cf8:	bne	19d00 <__assert_fail@plt+0x84b0>
   19cfc:	pop	{r4, r5, r6, sl, fp, pc}
   19d00:	bl	1a27c <__assert_fail@plt+0x8a2c>
   19d04:	push	{r4, r5, r6, sl, fp, lr}
   19d08:	add	fp, sp, #16
   19d0c:	mov	r4, r2
   19d10:	mov	r5, r1
   19d14:	mov	r6, r0
   19d18:	bl	1abc4 <__assert_fail@plt+0x9374>
   19d1c:	cmp	r0, #0
   19d20:	popne	{r4, r5, r6, sl, fp, pc}
   19d24:	cmp	r6, #0
   19d28:	beq	19d3c <__assert_fail@plt+0x84ec>
   19d2c:	cmp	r5, #0
   19d30:	cmpne	r4, #0
   19d34:	bne	19d3c <__assert_fail@plt+0x84ec>
   19d38:	pop	{r4, r5, r6, sl, fp, pc}
   19d3c:	bl	1a27c <__assert_fail@plt+0x8a2c>
   19d40:	push	{fp, lr}
   19d44:	mov	fp, sp
   19d48:	bl	1a390 <__assert_fail@plt+0x8b40>
   19d4c:	cmp	r0, #0
   19d50:	popne	{fp, pc}
   19d54:	bl	1a27c <__assert_fail@plt+0x8a2c>
   19d58:	push	{fp, lr}
   19d5c:	mov	fp, sp
   19d60:	bl	1a390 <__assert_fail@plt+0x8b40>
   19d64:	cmp	r0, #0
   19d68:	popne	{fp, pc}
   19d6c:	bl	1a27c <__assert_fail@plt+0x8a2c>
   19d70:	push	{fp, lr}
   19d74:	mov	fp, sp
   19d78:	bl	1a390 <__assert_fail@plt+0x8b40>
   19d7c:	cmp	r0, #0
   19d80:	popne	{fp, pc}
   19d84:	bl	1a27c <__assert_fail@plt+0x8a2c>
   19d88:	push	{r4, r5, fp, lr}
   19d8c:	add	fp, sp, #8
   19d90:	mov	r4, r1
   19d94:	mov	r5, r0
   19d98:	bl	1a3c0 <__assert_fail@plt+0x8b70>
   19d9c:	cmp	r0, #0
   19da0:	popne	{r4, r5, fp, pc}
   19da4:	cmp	r5, #0
   19da8:	beq	19db8 <__assert_fail@plt+0x8568>
   19dac:	cmp	r4, #0
   19db0:	bne	19db8 <__assert_fail@plt+0x8568>
   19db4:	pop	{r4, r5, fp, pc}
   19db8:	bl	1a27c <__assert_fail@plt+0x8a2c>
   19dbc:	push	{fp, lr}
   19dc0:	mov	fp, sp
   19dc4:	cmp	r1, #0
   19dc8:	orreq	r1, r1, #1
   19dcc:	bl	1a3c0 <__assert_fail@plt+0x8b70>
   19dd0:	cmp	r0, #0
   19dd4:	popne	{fp, pc}
   19dd8:	bl	1a27c <__assert_fail@plt+0x8a2c>
   19ddc:	push	{fp, lr}
   19de0:	mov	fp, sp
   19de4:	clz	r3, r2
   19de8:	lsr	ip, r3, #5
   19dec:	clz	r3, r1
   19df0:	lsr	r3, r3, #5
   19df4:	orrs	r3, r3, ip
   19df8:	movwne	r1, #1
   19dfc:	movwne	r2, #1
   19e00:	bl	1abc4 <__assert_fail@plt+0x9374>
   19e04:	cmp	r0, #0
   19e08:	popne	{fp, pc}
   19e0c:	bl	1a27c <__assert_fail@plt+0x8a2c>
   19e10:	push	{fp, lr}
   19e14:	mov	fp, sp
   19e18:	mov	r2, r1
   19e1c:	mov	r1, r0
   19e20:	mov	r0, #0
   19e24:	bl	1abc4 <__assert_fail@plt+0x9374>
   19e28:	cmp	r0, #0
   19e2c:	popne	{fp, pc}
   19e30:	bl	1a27c <__assert_fail@plt+0x8a2c>
   19e34:	push	{fp, lr}
   19e38:	mov	fp, sp
   19e3c:	mov	r2, r1
   19e40:	mov	r1, r0
   19e44:	clz	r0, r2
   19e48:	clz	r3, r1
   19e4c:	lsr	r0, r0, #5
   19e50:	lsr	r3, r3, #5
   19e54:	orrs	r0, r3, r0
   19e58:	mov	r0, #0
   19e5c:	movwne	r1, #1
   19e60:	movwne	r2, #1
   19e64:	bl	1abc4 <__assert_fail@plt+0x9374>
   19e68:	cmp	r0, #0
   19e6c:	popne	{fp, pc}
   19e70:	bl	1a27c <__assert_fail@plt+0x8a2c>
   19e74:	push	{r4, r5, r6, sl, fp, lr}
   19e78:	add	fp, sp, #16
   19e7c:	ldr	r5, [r1]
   19e80:	mov	r4, r1
   19e84:	mov	r6, r0
   19e88:	cmp	r0, #0
   19e8c:	beq	19ea4 <__assert_fail@plt+0x8654>
   19e90:	mov	r0, #1
   19e94:	add	r0, r0, r5, lsr #1
   19e98:	adds	r5, r5, r0
   19e9c:	bcc	19eac <__assert_fail@plt+0x865c>
   19ea0:	b	19ee8 <__assert_fail@plt+0x8698>
   19ea4:	cmp	r5, #0
   19ea8:	movweq	r5, #64	; 0x40
   19eac:	mov	r0, r6
   19eb0:	mov	r1, r5
   19eb4:	mov	r2, #1
   19eb8:	bl	1abc4 <__assert_fail@plt+0x9374>
   19ebc:	cmp	r5, #0
   19ec0:	mov	r1, r5
   19ec4:	movwne	r1, #1
   19ec8:	cmp	r0, #0
   19ecc:	bne	19ee0 <__assert_fail@plt+0x8690>
   19ed0:	clz	r2, r6
   19ed4:	lsr	r2, r2, #5
   19ed8:	orrs	r1, r2, r1
   19edc:	bne	19ee8 <__assert_fail@plt+0x8698>
   19ee0:	str	r5, [r4]
   19ee4:	pop	{r4, r5, r6, sl, fp, pc}
   19ee8:	bl	1a27c <__assert_fail@plt+0x8a2c>
   19eec:	push	{r4, r5, r6, r7, fp, lr}
   19ef0:	add	fp, sp, #16
   19ef4:	ldr	r5, [r1]
   19ef8:	mov	r6, r2
   19efc:	mov	r4, r1
   19f00:	mov	r7, r0
   19f04:	cmp	r0, #0
   19f08:	beq	19f20 <__assert_fail@plt+0x86d0>
   19f0c:	mov	r0, #1
   19f10:	add	r0, r0, r5, lsr #1
   19f14:	adds	r5, r5, r0
   19f18:	bcc	19f38 <__assert_fail@plt+0x86e8>
   19f1c:	b	19f6c <__assert_fail@plt+0x871c>
   19f20:	cmp	r5, #0
   19f24:	bne	19f38 <__assert_fail@plt+0x86e8>
   19f28:	mov	r0, #64	; 0x40
   19f2c:	cmp	r6, #64	; 0x40
   19f30:	udiv	r5, r0, r6
   19f34:	addhi	r5, r5, #1
   19f38:	mov	r0, r7
   19f3c:	mov	r1, r5
   19f40:	mov	r2, r6
   19f44:	bl	1abc4 <__assert_fail@plt+0x9374>
   19f48:	cmp	r0, #0
   19f4c:	bne	19f64 <__assert_fail@plt+0x8714>
   19f50:	cmp	r7, #0
   19f54:	beq	19f6c <__assert_fail@plt+0x871c>
   19f58:	cmp	r6, #0
   19f5c:	cmpne	r5, #0
   19f60:	bne	19f6c <__assert_fail@plt+0x871c>
   19f64:	str	r5, [r4]
   19f68:	pop	{r4, r5, r6, r7, fp, pc}
   19f6c:	bl	1a27c <__assert_fail@plt+0x8a2c>
   19f70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19f74:	add	fp, sp, #24
   19f78:	mov	r8, r1
   19f7c:	ldr	r1, [r1]
   19f80:	mov	r5, r0
   19f84:	add	r0, r1, r1, asr #1
   19f88:	cmp	r0, r1
   19f8c:	mvnvs	r0, #-2147483648	; 0x80000000
   19f90:	cmp	r0, r3
   19f94:	mov	r7, r0
   19f98:	movgt	r7, r3
   19f9c:	cmn	r3, #1
   19fa0:	movle	r7, r0
   19fa4:	ldr	r0, [fp, #8]
   19fa8:	cmn	r0, #1
   19fac:	ble	19fd4 <__assert_fail@plt+0x8784>
   19fb0:	cmp	r0, #0
   19fb4:	beq	1a028 <__assert_fail@plt+0x87d8>
   19fb8:	cmn	r7, #1
   19fbc:	ble	19ffc <__assert_fail@plt+0x87ac>
   19fc0:	mvn	r4, #-2147483648	; 0x80000000
   19fc4:	udiv	r6, r4, r0
   19fc8:	cmp	r6, r7
   19fcc:	bge	1a028 <__assert_fail@plt+0x87d8>
   19fd0:	b	1a038 <__assert_fail@plt+0x87e8>
   19fd4:	cmn	r7, #1
   19fd8:	ble	1a018 <__assert_fail@plt+0x87c8>
   19fdc:	cmn	r0, #1
   19fe0:	beq	1a028 <__assert_fail@plt+0x87d8>
   19fe4:	mov	r6, #-2147483648	; 0x80000000
   19fe8:	mvn	r4, #-2147483648	; 0x80000000
   19fec:	sdiv	r6, r6, r0
   19ff0:	cmp	r6, r7
   19ff4:	bge	1a028 <__assert_fail@plt+0x87d8>
   19ff8:	b	1a038 <__assert_fail@plt+0x87e8>
   19ffc:	beq	1a028 <__assert_fail@plt+0x87d8>
   1a000:	mov	r6, #-2147483648	; 0x80000000
   1a004:	mvn	r4, #-2147483648	; 0x80000000
   1a008:	sdiv	r6, r6, r7
   1a00c:	cmp	r6, r0
   1a010:	bge	1a028 <__assert_fail@plt+0x87d8>
   1a014:	b	1a038 <__assert_fail@plt+0x87e8>
   1a018:	mvn	r4, #-2147483648	; 0x80000000
   1a01c:	sdiv	r6, r4, r0
   1a020:	cmp	r7, r6
   1a024:	blt	1a038 <__assert_fail@plt+0x87e8>
   1a028:	mul	r6, r7, r0
   1a02c:	mov	r4, #64	; 0x40
   1a030:	cmp	r6, #63	; 0x3f
   1a034:	bgt	1a040 <__assert_fail@plt+0x87f0>
   1a038:	sdiv	r7, r4, r0
   1a03c:	mul	r6, r7, r0
   1a040:	cmp	r5, #0
   1a044:	moveq	r4, #0
   1a048:	streq	r4, [r8]
   1a04c:	sub	r4, r7, r1
   1a050:	cmp	r4, r2
   1a054:	bge	1a100 <__assert_fail@plt+0x88b0>
   1a058:	add	r7, r1, r2
   1a05c:	mov	r6, #0
   1a060:	mov	r2, #0
   1a064:	cmp	r7, r3
   1a068:	movwgt	r6, #1
   1a06c:	cmn	r3, #1
   1a070:	movwgt	r2, #1
   1a074:	cmp	r7, r1
   1a078:	bvs	1a134 <__assert_fail@plt+0x88e4>
   1a07c:	ands	r1, r2, r6
   1a080:	bne	1a134 <__assert_fail@plt+0x88e4>
   1a084:	cmn	r0, #1
   1a088:	ble	1a0b0 <__assert_fail@plt+0x8860>
   1a08c:	cmp	r0, #0
   1a090:	beq	1a0fc <__assert_fail@plt+0x88ac>
   1a094:	cmn	r7, #1
   1a098:	ble	1a0d4 <__assert_fail@plt+0x8884>
   1a09c:	mvn	r1, #-2147483648	; 0x80000000
   1a0a0:	udiv	r1, r1, r0
   1a0a4:	cmp	r1, r7
   1a0a8:	bge	1a0fc <__assert_fail@plt+0x88ac>
   1a0ac:	b	1a134 <__assert_fail@plt+0x88e4>
   1a0b0:	cmn	r7, #1
   1a0b4:	ble	1a0ec <__assert_fail@plt+0x889c>
   1a0b8:	cmn	r0, #1
   1a0bc:	beq	1a0fc <__assert_fail@plt+0x88ac>
   1a0c0:	mov	r1, #-2147483648	; 0x80000000
   1a0c4:	sdiv	r1, r1, r0
   1a0c8:	cmp	r1, r7
   1a0cc:	bge	1a0fc <__assert_fail@plt+0x88ac>
   1a0d0:	b	1a134 <__assert_fail@plt+0x88e4>
   1a0d4:	beq	1a0fc <__assert_fail@plt+0x88ac>
   1a0d8:	mov	r1, #-2147483648	; 0x80000000
   1a0dc:	sdiv	r1, r1, r7
   1a0e0:	cmp	r1, r0
   1a0e4:	bge	1a0fc <__assert_fail@plt+0x88ac>
   1a0e8:	b	1a134 <__assert_fail@plt+0x88e4>
   1a0ec:	mvn	r1, #-2147483648	; 0x80000000
   1a0f0:	sdiv	r1, r1, r0
   1a0f4:	cmp	r7, r1
   1a0f8:	blt	1a134 <__assert_fail@plt+0x88e4>
   1a0fc:	mul	r6, r7, r0
   1a100:	mov	r0, r5
   1a104:	mov	r1, r6
   1a108:	bl	1a3c0 <__assert_fail@plt+0x8b70>
   1a10c:	cmp	r6, #0
   1a110:	movwne	r6, #1
   1a114:	cmp	r0, #0
   1a118:	bne	1a12c <__assert_fail@plt+0x88dc>
   1a11c:	clz	r1, r5
   1a120:	lsr	r1, r1, #5
   1a124:	orrs	r1, r1, r6
   1a128:	bne	1a134 <__assert_fail@plt+0x88e4>
   1a12c:	str	r7, [r8]
   1a130:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a134:	bl	1a27c <__assert_fail@plt+0x8a2c>
   1a138:	push	{fp, lr}
   1a13c:	mov	fp, sp
   1a140:	mov	r1, #1
   1a144:	bl	1a33c <__assert_fail@plt+0x8aec>
   1a148:	cmp	r0, #0
   1a14c:	popne	{fp, pc}
   1a150:	bl	1a27c <__assert_fail@plt+0x8a2c>
   1a154:	push	{fp, lr}
   1a158:	mov	fp, sp
   1a15c:	bl	1a33c <__assert_fail@plt+0x8aec>
   1a160:	cmp	r0, #0
   1a164:	popne	{fp, pc}
   1a168:	bl	1a27c <__assert_fail@plt+0x8a2c>
   1a16c:	push	{fp, lr}
   1a170:	mov	fp, sp
   1a174:	mov	r1, #1
   1a178:	bl	1a33c <__assert_fail@plt+0x8aec>
   1a17c:	cmp	r0, #0
   1a180:	popne	{fp, pc}
   1a184:	bl	1a27c <__assert_fail@plt+0x8a2c>
   1a188:	push	{fp, lr}
   1a18c:	mov	fp, sp
   1a190:	bl	1a33c <__assert_fail@plt+0x8aec>
   1a194:	cmp	r0, #0
   1a198:	popne	{fp, pc}
   1a19c:	bl	1a27c <__assert_fail@plt+0x8a2c>
   1a1a0:	push	{r4, r5, fp, lr}
   1a1a4:	add	fp, sp, #8
   1a1a8:	mov	r5, r0
   1a1ac:	mov	r0, r1
   1a1b0:	mov	r4, r1
   1a1b4:	bl	1a390 <__assert_fail@plt+0x8b40>
   1a1b8:	cmp	r0, #0
   1a1bc:	beq	1a1d0 <__assert_fail@plt+0x8980>
   1a1c0:	mov	r1, r5
   1a1c4:	mov	r2, r4
   1a1c8:	pop	{r4, r5, fp, lr}
   1a1cc:	b	11508 <memcpy@plt>
   1a1d0:	bl	1a27c <__assert_fail@plt+0x8a2c>
   1a1d4:	push	{r4, r5, fp, lr}
   1a1d8:	add	fp, sp, #8
   1a1dc:	mov	r5, r0
   1a1e0:	mov	r0, r1
   1a1e4:	mov	r4, r1
   1a1e8:	bl	1a390 <__assert_fail@plt+0x8b40>
   1a1ec:	cmp	r0, #0
   1a1f0:	beq	1a204 <__assert_fail@plt+0x89b4>
   1a1f4:	mov	r1, r5
   1a1f8:	mov	r2, r4
   1a1fc:	pop	{r4, r5, fp, lr}
   1a200:	b	11508 <memcpy@plt>
   1a204:	bl	1a27c <__assert_fail@plt+0x8a2c>
   1a208:	push	{r4, r5, fp, lr}
   1a20c:	add	fp, sp, #8
   1a210:	mov	r5, r0
   1a214:	add	r0, r1, #1
   1a218:	mov	r4, r1
   1a21c:	bl	1a390 <__assert_fail@plt+0x8b40>
   1a220:	cmp	r0, #0
   1a224:	beq	1a240 <__assert_fail@plt+0x89f0>
   1a228:	mov	r1, #0
   1a22c:	mov	r2, r4
   1a230:	strb	r1, [r0, r4]
   1a234:	mov	r1, r5
   1a238:	pop	{r4, r5, fp, lr}
   1a23c:	b	11508 <memcpy@plt>
   1a240:	bl	1a27c <__assert_fail@plt+0x8a2c>
   1a244:	push	{r4, r5, fp, lr}
   1a248:	add	fp, sp, #8
   1a24c:	mov	r4, r0
   1a250:	bl	116ac <strlen@plt>
   1a254:	add	r5, r0, #1
   1a258:	mov	r0, r5
   1a25c:	bl	1a390 <__assert_fail@plt+0x8b40>
   1a260:	cmp	r0, #0
   1a264:	beq	1a278 <__assert_fail@plt+0x8a28>
   1a268:	mov	r1, r4
   1a26c:	mov	r2, r5
   1a270:	pop	{r4, r5, fp, lr}
   1a274:	b	11508 <memcpy@plt>
   1a278:	bl	1a27c <__assert_fail@plt+0x8a2c>
   1a27c:	push	{fp, lr}
   1a280:	mov	fp, sp
   1a284:	movw	r0, #53604	; 0xd164
   1a288:	movw	r1, #50702	; 0xc60e
   1a28c:	mov	r2, #5
   1a290:	movt	r0, #2
   1a294:	movt	r1, #1
   1a298:	ldr	r4, [r0]
   1a29c:	mov	r0, #0
   1a2a0:	bl	11538 <dcgettext@plt>
   1a2a4:	movw	r2, #49471	; 0xc13f
   1a2a8:	mov	r3, r0
   1a2ac:	mov	r0, r4
   1a2b0:	mov	r1, #0
   1a2b4:	movt	r2, #1
   1a2b8:	bl	115ec <error@plt>
   1a2bc:	bl	11814 <abort@plt>
   1a2c0:	push	{fp, lr}
   1a2c4:	mov	fp, sp
   1a2c8:	orr	r1, r1, #512	; 0x200
   1a2cc:	bl	12da4 <__assert_fail@plt+0x1554>
   1a2d0:	cmp	r0, #0
   1a2d4:	popne	{fp, pc}
   1a2d8:	bl	116d0 <__errno_location@plt>
   1a2dc:	ldr	r0, [r0]
   1a2e0:	cmp	r0, #22
   1a2e4:	bne	1a308 <__assert_fail@plt+0x8ab8>
   1a2e8:	movw	r0, #50719	; 0xc61f
   1a2ec:	movw	r1, #50735	; 0xc62f
   1a2f0:	movw	r3, #50746	; 0xc63a
   1a2f4:	mov	r2, #41	; 0x29
   1a2f8:	movt	r0, #1
   1a2fc:	movt	r1, #1
   1a300:	movt	r3, #1
   1a304:	bl	11850 <__assert_fail@plt>
   1a308:	bl	1a27c <__assert_fail@plt+0x8a2c>
   1a30c:	ldr	r0, [r0, #48]	; 0x30
   1a310:	and	r0, r0, #17
   1a314:	cmp	r0, #16
   1a318:	moveq	r0, #1
   1a31c:	bxeq	lr
   1a320:	cmp	r0, #17
   1a324:	movne	r0, #0
   1a328:	bxne	lr
   1a32c:	ldr	r0, [r1, #48]	; 0x30
   1a330:	cmp	r0, #0
   1a334:	movwne	r0, #1
   1a338:	bx	lr
   1a33c:	clz	r2, r1
   1a340:	clz	r3, r0
   1a344:	lsr	r2, r2, #5
   1a348:	lsr	r3, r3, #5
   1a34c:	orrs	r2, r3, r2
   1a350:	movwne	r1, #1
   1a354:	movwne	r0, #1
   1a358:	cmp	r1, #0
   1a35c:	beq	1a38c <__assert_fail@plt+0x8b3c>
   1a360:	mvn	r2, #-2147483648	; 0x80000000
   1a364:	udiv	r2, r2, r1
   1a368:	cmp	r2, r0
   1a36c:	bcs	1a38c <__assert_fail@plt+0x8b3c>
   1a370:	push	{fp, lr}
   1a374:	mov	fp, sp
   1a378:	bl	116d0 <__errno_location@plt>
   1a37c:	mov	r1, #12
   1a380:	str	r1, [r0]
   1a384:	mov	r0, #0
   1a388:	pop	{fp, pc}
   1a38c:	b	11490 <calloc@plt>
   1a390:	cmp	r0, #0
   1a394:	movweq	r0, #1
   1a398:	cmn	r0, #1
   1a39c:	ble	1a3a4 <__assert_fail@plt+0x8b54>
   1a3a0:	b	1161c <malloc@plt>
   1a3a4:	push	{fp, lr}
   1a3a8:	mov	fp, sp
   1a3ac:	bl	116d0 <__errno_location@plt>
   1a3b0:	mov	r1, #12
   1a3b4:	str	r1, [r0]
   1a3b8:	mov	r0, #0
   1a3bc:	pop	{fp, pc}
   1a3c0:	push	{fp, lr}
   1a3c4:	mov	fp, sp
   1a3c8:	cmp	r0, #0
   1a3cc:	beq	1a3e8 <__assert_fail@plt+0x8b98>
   1a3d0:	cmp	r1, #0
   1a3d4:	beq	1a3f4 <__assert_fail@plt+0x8ba4>
   1a3d8:	cmn	r1, #1
   1a3dc:	ble	1a400 <__assert_fail@plt+0x8bb0>
   1a3e0:	pop	{fp, lr}
   1a3e4:	b	11550 <realloc@plt>
   1a3e8:	mov	r0, r1
   1a3ec:	pop	{fp, lr}
   1a3f0:	b	1a390 <__assert_fail@plt+0x8b40>
   1a3f4:	bl	1a9d8 <__assert_fail@plt+0x9188>
   1a3f8:	mov	r0, #0
   1a3fc:	pop	{fp, pc}
   1a400:	bl	116d0 <__errno_location@plt>
   1a404:	mov	r1, #12
   1a408:	str	r1, [r0]
   1a40c:	mov	r0, #0
   1a410:	pop	{fp, pc}
   1a414:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a418:	add	fp, sp, #24
   1a41c:	sub	sp, sp, #40	; 0x28
   1a420:	mov	r5, r0
   1a424:	ldrb	r0, [r2]
   1a428:	cmp	r0, #0
   1a42c:	beq	1a45c <__assert_fail@plt+0x8c0c>
   1a430:	movw	r9, #54072	; 0xd338
   1a434:	mov	r4, r2
   1a438:	mov	r6, r1
   1a43c:	movt	r9, #2
   1a440:	ldr	r0, [r9]
   1a444:	cmp	r0, #0
   1a448:	beq	1a468 <__assert_fail@plt+0x8c18>
   1a44c:	mov	r7, #0
   1a450:	cmp	r0, #0
   1a454:	bpl	1a4dc <__assert_fail@plt+0x8c8c>
   1a458:	b	1a52c <__assert_fail@plt+0x8cdc>
   1a45c:	mov	r0, #0
   1a460:	strb	r0, [r5]
   1a464:	b	1a528 <__assert_fail@plt+0x8cd8>
   1a468:	movw	r0, #50824	; 0xc688
   1a46c:	movw	r1, #18688	; 0x4900
   1a470:	movt	r0, #1
   1a474:	movt	r1, #8
   1a478:	bl	11604 <open64@plt>
   1a47c:	cmn	r0, #1
   1a480:	ble	1a538 <__assert_fail@plt+0x8ce8>
   1a484:	movw	r3, #50838	; 0xc696
   1a488:	add	r8, sp, #8
   1a48c:	mov	r7, r0
   1a490:	str	r0, [sp]
   1a494:	mov	r1, #1
   1a498:	mov	r2, #32
   1a49c:	movt	r3, #1
   1a4a0:	mov	r0, r8
   1a4a4:	bl	116dc <__sprintf_chk@plt>
   1a4a8:	mov	r0, r8
   1a4ac:	mov	r1, #0
   1a4b0:	bl	1173c <access@plt>
   1a4b4:	cmp	r0, #0
   1a4b8:	mvn	r1, #0
   1a4bc:	mov	r0, r7
   1a4c0:	movweq	r1, #1
   1a4c4:	str	r1, [r9]
   1a4c8:	bl	11820 <close@plt>
   1a4cc:	ldr	r0, [r9]
   1a4d0:	mov	r7, #0
   1a4d4:	cmp	r0, #0
   1a4d8:	bmi	1a52c <__assert_fail@plt+0x8cdc>
   1a4dc:	mov	r0, r4
   1a4e0:	bl	116ac <strlen@plt>
   1a4e4:	add	r0, r0, #27
   1a4e8:	cmp	r0, #4032	; 0xfc0
   1a4ec:	bls	1a500 <__assert_fail@plt+0x8cb0>
   1a4f0:	bl	1a390 <__assert_fail@plt+0x8b40>
   1a4f4:	mov	r5, r0
   1a4f8:	cmp	r0, #0
   1a4fc:	beq	1a52c <__assert_fail@plt+0x8cdc>
   1a500:	movw	r3, #50861	; 0xc6ad
   1a504:	mov	r0, r5
   1a508:	mov	r1, #1
   1a50c:	mvn	r2, #0
   1a510:	str	r6, [sp]
   1a514:	movt	r3, #1
   1a518:	bl	116dc <__sprintf_chk@plt>
   1a51c:	add	r0, r5, r0
   1a520:	mov	r1, r4
   1a524:	bl	115c8 <strcpy@plt>
   1a528:	mov	r7, r5
   1a52c:	mov	r0, r7
   1a530:	sub	sp, fp, #24
   1a534:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a538:	mvn	r0, #0
   1a53c:	mov	r7, #0
   1a540:	str	r0, [r9]
   1a544:	mov	r0, r7
   1a548:	sub	sp, fp, #24
   1a54c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a550:	push	{r4, r5, r6, sl, fp, lr}
   1a554:	add	fp, sp, #16
   1a558:	mov	r4, r0
   1a55c:	bl	115d4 <__fpending@plt>
   1a560:	ldr	r6, [r4]
   1a564:	mov	r5, r0
   1a568:	mov	r0, r4
   1a56c:	bl	1a6c4 <__assert_fail@plt+0x8e74>
   1a570:	tst	r6, #32
   1a574:	bne	1a5ac <__assert_fail@plt+0x8d5c>
   1a578:	cmp	r0, #0
   1a57c:	mov	r4, r0
   1a580:	mvnne	r4, #0
   1a584:	cmp	r5, #0
   1a588:	bne	1a5b8 <__assert_fail@plt+0x8d68>
   1a58c:	cmp	r0, #0
   1a590:	beq	1a5b8 <__assert_fail@plt+0x8d68>
   1a594:	bl	116d0 <__errno_location@plt>
   1a598:	ldr	r0, [r0]
   1a59c:	subs	r4, r0, #9
   1a5a0:	mvnne	r4, #0
   1a5a4:	mov	r0, r4
   1a5a8:	pop	{r4, r5, r6, sl, fp, pc}
   1a5ac:	mvn	r4, #0
   1a5b0:	cmp	r0, #0
   1a5b4:	beq	1a5c0 <__assert_fail@plt+0x8d70>
   1a5b8:	mov	r0, r4
   1a5bc:	pop	{r4, r5, r6, sl, fp, pc}
   1a5c0:	bl	116d0 <__errno_location@plt>
   1a5c4:	mov	r1, #0
   1a5c8:	str	r1, [r0]
   1a5cc:	mov	r0, r4
   1a5d0:	pop	{r4, r5, r6, sl, fp, pc}
   1a5d4:	movw	r2, #62998	; 0xf616
   1a5d8:	mov	r1, #0
   1a5dc:	movt	r2, #149	; 0x95
   1a5e0:	str	r1, [r0, #16]
   1a5e4:	str	r1, [r0, #20]
   1a5e8:	str	r2, [r0, #24]
   1a5ec:	bx	lr
   1a5f0:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   1a5f4:	add	fp, sp, #24
   1a5f8:	ldr	r2, [r0, #24]
   1a5fc:	movw	r3, #62998	; 0xf616
   1a600:	movt	r3, #149	; 0x95
   1a604:	cmp	r2, r3
   1a608:	bne	1a6a4 <__assert_fail@plt+0x8e54>
   1a60c:	add	r3, r0, #16
   1a610:	add	ip, r0, #8
   1a614:	ldrd	r4, [r3]
   1a618:	orrs	r2, r4, r5
   1a61c:	beq	1a658 <__assert_fail@plt+0x8e08>
   1a620:	ldr	r6, [r1, #96]	; 0x60
   1a624:	ldr	r9, [r1, #100]	; 0x64
   1a628:	ldm	r0, {r2, r7}
   1a62c:	eor	r7, r9, r7
   1a630:	eor	r2, r6, r2
   1a634:	orrs	r2, r2, r7
   1a638:	bne	1a658 <__assert_fail@plt+0x8e08>
   1a63c:	ldm	ip, {r2, r7}
   1a640:	ldm	r1, {r6, r9}
   1a644:	eor	r7, r9, r7
   1a648:	eor	r2, r6, r2
   1a64c:	orrs	r2, r2, r7
   1a650:	mov	r2, #1
   1a654:	beq	1a690 <__assert_fail@plt+0x8e40>
   1a658:	adds	r6, r4, #1
   1a65c:	adc	r7, r5, #0
   1a660:	and	r2, r6, r4
   1a664:	strd	r6, [r3]
   1a668:	and	r3, r7, r5
   1a66c:	orrs	r2, r2, r3
   1a670:	mov	r2, #0
   1a674:	bne	1a690 <__assert_fail@plt+0x8e40>
   1a678:	orrs	r3, r6, r7
   1a67c:	beq	1a698 <__assert_fail@plt+0x8e48>
   1a680:	ldrd	r4, [r1]
   1a684:	strd	r4, [ip]
   1a688:	ldrd	r4, [r1, #96]	; 0x60
   1a68c:	strd	r4, [r0]
   1a690:	mov	r0, r2
   1a694:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a698:	mov	r2, #1
   1a69c:	mov	r0, r2
   1a6a0:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a6a4:	movw	r0, #50879	; 0xc6bf
   1a6a8:	movw	r1, #50903	; 0xc6d7
   1a6ac:	movw	r3, #50921	; 0xc6e9
   1a6b0:	mov	r2, #60	; 0x3c
   1a6b4:	movt	r0, #1
   1a6b8:	movt	r1, #1
   1a6bc:	movt	r3, #1
   1a6c0:	bl	11850 <__assert_fail@plt>
   1a6c4:	push	{r4, r5, r6, sl, fp, lr}
   1a6c8:	add	fp, sp, #16
   1a6cc:	sub	sp, sp, #8
   1a6d0:	mov	r4, r0
   1a6d4:	bl	1170c <fileno@plt>
   1a6d8:	cmn	r0, #1
   1a6dc:	ble	1a750 <__assert_fail@plt+0x8f00>
   1a6e0:	mov	r0, r4
   1a6e4:	bl	11634 <__freading@plt>
   1a6e8:	cmp	r0, #0
   1a6ec:	beq	1a718 <__assert_fail@plt+0x8ec8>
   1a6f0:	mov	r0, r4
   1a6f4:	bl	1170c <fileno@plt>
   1a6f8:	mov	r1, #1
   1a6fc:	mov	r2, #0
   1a700:	mov	r3, #0
   1a704:	str	r1, [sp]
   1a708:	bl	115b0 <lseek64@plt>
   1a70c:	and	r0, r0, r1
   1a710:	cmn	r0, #1
   1a714:	beq	1a750 <__assert_fail@plt+0x8f00>
   1a718:	mov	r0, r4
   1a71c:	bl	1a97c <__assert_fail@plt+0x912c>
   1a720:	cmp	r0, #0
   1a724:	beq	1a750 <__assert_fail@plt+0x8f00>
   1a728:	bl	116d0 <__errno_location@plt>
   1a72c:	ldr	r6, [r0]
   1a730:	mov	r5, r0
   1a734:	mov	r0, r4
   1a738:	bl	11748 <fclose@plt>
   1a73c:	cmp	r6, #0
   1a740:	strne	r6, [r5]
   1a744:	mvnne	r0, #0
   1a748:	sub	sp, fp, #16
   1a74c:	pop	{r4, r5, r6, sl, fp, pc}
   1a750:	mov	r0, r4
   1a754:	sub	sp, fp, #16
   1a758:	pop	{r4, r5, r6, sl, fp, lr}
   1a75c:	b	11748 <fclose@plt>
   1a760:	sub	sp, sp, #8
   1a764:	push	{r4, r5, r6, r7, fp, lr}
   1a768:	add	fp, sp, #16
   1a76c:	sub	sp, sp, #8
   1a770:	mov	r5, r0
   1a774:	add	r0, fp, #8
   1a778:	cmp	r1, #11
   1a77c:	str	r2, [fp, #8]
   1a780:	str	r3, [fp, #12]
   1a784:	str	r0, [sp, #4]
   1a788:	bhi	1a7c4 <__assert_fail@plt+0x8f74>
   1a78c:	mov	r0, #1
   1a790:	movw	r2, #1300	; 0x514
   1a794:	tst	r2, r0, lsl r1
   1a798:	bne	1a884 <__assert_fail@plt+0x9034>
   1a79c:	movw	r2, #2570	; 0xa0a
   1a7a0:	tst	r2, r0, lsl r1
   1a7a4:	bne	1a7ec <__assert_fail@plt+0x8f9c>
   1a7a8:	cmp	r1, #0
   1a7ac:	bne	1a7c4 <__assert_fail@plt+0x8f74>
   1a7b0:	ldr	r0, [sp, #4]
   1a7b4:	add	r1, r0, #4
   1a7b8:	str	r1, [sp, #4]
   1a7bc:	mov	r1, #0
   1a7c0:	b	1a890 <__assert_fail@plt+0x9040>
   1a7c4:	sub	r0, r1, #1024	; 0x400
   1a7c8:	cmp	r0, #10
   1a7cc:	bhi	1a884 <__assert_fail@plt+0x9034>
   1a7d0:	mov	r2, #1
   1a7d4:	movw	r3, #645	; 0x285
   1a7d8:	tst	r3, r2, lsl r0
   1a7dc:	bne	1a884 <__assert_fail@plt+0x9034>
   1a7e0:	movw	r3, #1282	; 0x502
   1a7e4:	tst	r3, r2, lsl r0
   1a7e8:	beq	1a7f8 <__assert_fail@plt+0x8fa8>
   1a7ec:	mov	r0, r5
   1a7f0:	bl	11760 <fcntl64@plt>
   1a7f4:	b	1a89c <__assert_fail@plt+0x904c>
   1a7f8:	cmp	r0, #6
   1a7fc:	bne	1a884 <__assert_fail@plt+0x9034>
   1a800:	ldr	r0, [sp, #4]
   1a804:	movw	r7, #54076	; 0xd33c
   1a808:	movt	r7, #2
   1a80c:	add	r1, r0, #4
   1a810:	str	r1, [sp, #4]
   1a814:	ldr	r6, [r0]
   1a818:	ldr	r0, [r7]
   1a81c:	cmp	r0, #0
   1a820:	bmi	1a8c0 <__assert_fail@plt+0x9070>
   1a824:	mov	r0, r5
   1a828:	movw	r1, #1030	; 0x406
   1a82c:	mov	r2, r6
   1a830:	bl	11760 <fcntl64@plt>
   1a834:	mov	r4, r0
   1a838:	cmn	r0, #1
   1a83c:	bgt	1a8b4 <__assert_fail@plt+0x9064>
   1a840:	bl	116d0 <__errno_location@plt>
   1a844:	ldr	r0, [r0]
   1a848:	cmp	r0, #22
   1a84c:	bne	1a8b4 <__assert_fail@plt+0x9064>
   1a850:	mov	r0, r5
   1a854:	mov	r1, #0
   1a858:	mov	r2, r6
   1a85c:	bl	11760 <fcntl64@plt>
   1a860:	mov	r4, r0
   1a864:	cmp	r0, #0
   1a868:	bmi	1a8a0 <__assert_fail@plt+0x9050>
   1a86c:	mvn	r0, #0
   1a870:	str	r0, [r7]
   1a874:	mov	r0, #1
   1a878:	cmp	r0, #0
   1a87c:	bne	1a8ec <__assert_fail@plt+0x909c>
   1a880:	b	1a8a0 <__assert_fail@plt+0x9050>
   1a884:	ldr	r0, [sp, #4]
   1a888:	add	r2, r0, #4
   1a88c:	str	r2, [sp, #4]
   1a890:	ldr	r2, [r0]
   1a894:	mov	r0, r5
   1a898:	bl	11760 <fcntl64@plt>
   1a89c:	mov	r4, r0
   1a8a0:	mov	r0, r4
   1a8a4:	sub	sp, fp, #16
   1a8a8:	pop	{r4, r5, r6, r7, fp, lr}
   1a8ac:	add	sp, sp, #8
   1a8b0:	bx	lr
   1a8b4:	mov	r0, #1
   1a8b8:	str	r0, [r7]
   1a8bc:	b	1a8a0 <__assert_fail@plt+0x9050>
   1a8c0:	mov	r0, r5
   1a8c4:	mov	r1, #0
   1a8c8:	mov	r2, r6
   1a8cc:	bl	11760 <fcntl64@plt>
   1a8d0:	mov	r4, r0
   1a8d4:	ldr	r0, [r7]
   1a8d8:	add	r0, r0, #1
   1a8dc:	clz	r0, r0
   1a8e0:	lsr	r0, r0, #5
   1a8e4:	cmp	r0, #0
   1a8e8:	beq	1a8a0 <__assert_fail@plt+0x9050>
   1a8ec:	cmp	r4, #0
   1a8f0:	bmi	1a8a0 <__assert_fail@plt+0x9050>
   1a8f4:	mov	r0, r4
   1a8f8:	mov	r1, #1
   1a8fc:	bl	11760 <fcntl64@plt>
   1a900:	cmp	r0, #0
   1a904:	bmi	1a920 <__assert_fail@plt+0x90d0>
   1a908:	orr	r2, r0, #1
   1a90c:	mov	r0, r4
   1a910:	mov	r1, #2
   1a914:	bl	11760 <fcntl64@plt>
   1a918:	cmn	r0, #1
   1a91c:	bne	1a8a0 <__assert_fail@plt+0x9050>
   1a920:	bl	116d0 <__errno_location@plt>
   1a924:	ldr	r6, [r0]
   1a928:	mov	r5, r0
   1a92c:	mov	r0, r4
   1a930:	bl	11820 <close@plt>
   1a934:	str	r6, [r5]
   1a938:	mvn	r4, #0
   1a93c:	b	1a8a0 <__assert_fail@plt+0x9050>
   1a940:	sub	sp, sp, #8
   1a944:	push	{fp, lr}
   1a948:	mov	fp, sp
   1a94c:	sub	sp, sp, #8
   1a950:	str	r2, [fp, #8]
   1a954:	str	r3, [fp, #12]
   1a958:	tst	r1, #64	; 0x40
   1a95c:	mov	r2, #0
   1a960:	ldrne	r2, [fp, #8]
   1a964:	bl	11604 <open64@plt>
   1a968:	bl	19638 <__assert_fail@plt+0x7de8>
   1a96c:	mov	sp, fp
   1a970:	pop	{fp, lr}
   1a974:	add	sp, sp, #8
   1a978:	bx	lr
   1a97c:	push	{r4, sl, fp, lr}
   1a980:	add	fp, sp, #8
   1a984:	sub	sp, sp, #8
   1a988:	mov	r4, r0
   1a98c:	cmp	r0, #0
   1a990:	beq	1a9c8 <__assert_fail@plt+0x9178>
   1a994:	mov	r0, r4
   1a998:	bl	11634 <__freading@plt>
   1a99c:	cmp	r0, #0
   1a9a0:	beq	1a9c8 <__assert_fail@plt+0x9178>
   1a9a4:	ldrb	r0, [r4, #1]
   1a9a8:	tst	r0, #1
   1a9ac:	beq	1a9c8 <__assert_fail@plt+0x9178>
   1a9b0:	mov	r0, #1
   1a9b4:	mov	r2, #0
   1a9b8:	mov	r3, #0
   1a9bc:	str	r0, [sp]
   1a9c0:	mov	r0, r4
   1a9c4:	bl	1aa00 <__assert_fail@plt+0x91b0>
   1a9c8:	mov	r0, r4
   1a9cc:	sub	sp, fp, #8
   1a9d0:	pop	{r4, sl, fp, lr}
   1a9d4:	b	114cc <fflush@plt>
   1a9d8:	push	{r4, r5, r6, sl, fp, lr}
   1a9dc:	add	fp, sp, #16
   1a9e0:	mov	r4, r0
   1a9e4:	bl	116d0 <__errno_location@plt>
   1a9e8:	ldr	r6, [r0]
   1a9ec:	mov	r5, r0
   1a9f0:	mov	r0, r4
   1a9f4:	bl	114f0 <free@plt>
   1a9f8:	str	r6, [r5]
   1a9fc:	pop	{r4, r5, r6, sl, fp, pc}
   1aa00:	push	{r4, r5, r6, r7, fp, lr}
   1aa04:	add	fp, sp, #16
   1aa08:	sub	sp, sp, #8
   1aa0c:	mov	r4, r0
   1aa10:	ldr	r0, [r0, #4]
   1aa14:	mov	r5, r3
   1aa18:	mov	r6, r2
   1aa1c:	ldr	r1, [r4, #8]
   1aa20:	cmp	r1, r0
   1aa24:	bne	1aa40 <__assert_fail@plt+0x91f0>
   1aa28:	ldrd	r0, [r4, #16]
   1aa2c:	cmp	r1, r0
   1aa30:	bne	1aa40 <__assert_fail@plt+0x91f0>
   1aa34:	ldr	r0, [r4, #36]	; 0x24
   1aa38:	cmp	r0, #0
   1aa3c:	beq	1aa58 <__assert_fail@plt+0x9208>
   1aa40:	mov	r0, r4
   1aa44:	mov	r2, r6
   1aa48:	mov	r3, r5
   1aa4c:	sub	sp, fp, #16
   1aa50:	pop	{r4, r5, r6, r7, fp, lr}
   1aa54:	b	11754 <fseeko64@plt>
   1aa58:	ldr	r7, [fp, #8]
   1aa5c:	mov	r0, r4
   1aa60:	bl	1170c <fileno@plt>
   1aa64:	mov	r2, r6
   1aa68:	mov	r3, r5
   1aa6c:	str	r7, [sp]
   1aa70:	bl	115b0 <lseek64@plt>
   1aa74:	and	r2, r0, r1
   1aa78:	cmn	r2, #1
   1aa7c:	beq	1aa9c <__assert_fail@plt+0x924c>
   1aa80:	strd	r0, [r4, #80]	; 0x50
   1aa84:	ldr	r0, [r4]
   1aa88:	bic	r0, r0, #16
   1aa8c:	str	r0, [r4]
   1aa90:	mov	r0, #0
   1aa94:	sub	sp, fp, #16
   1aa98:	pop	{r4, r5, r6, r7, fp, pc}
   1aa9c:	mvn	r0, #0
   1aaa0:	sub	sp, fp, #16
   1aaa4:	pop	{r4, r5, r6, r7, fp, pc}
   1aaa8:	push	{fp, lr}
   1aaac:	mov	fp, sp
   1aab0:	mov	r0, #14
   1aab4:	bl	11784 <nl_langinfo@plt>
   1aab8:	movw	r1, #47643	; 0xba1b
   1aabc:	cmp	r0, #0
   1aac0:	movt	r1, #1
   1aac4:	movne	r1, r0
   1aac8:	movw	r0, #50988	; 0xc72c
   1aacc:	ldrb	r2, [r1]
   1aad0:	movt	r0, #1
   1aad4:	cmp	r2, #0
   1aad8:	movne	r0, r1
   1aadc:	pop	{fp, pc}
   1aae0:	push	{r4, r5, r6, r7, fp, lr}
   1aae4:	add	fp, sp, #16
   1aae8:	sub	sp, sp, #8
   1aaec:	cmp	r0, #0
   1aaf0:	add	r5, sp, #4
   1aaf4:	mov	r7, r2
   1aaf8:	mov	r4, r1
   1aafc:	movne	r5, r0
   1ab00:	mov	r0, r5
   1ab04:	bl	115e0 <mbrtowc@plt>
   1ab08:	mov	r6, r0
   1ab0c:	cmp	r7, #0
   1ab10:	beq	1ab38 <__assert_fail@plt+0x92e8>
   1ab14:	cmn	r6, #2
   1ab18:	bcc	1ab38 <__assert_fail@plt+0x92e8>
   1ab1c:	mov	r0, #0
   1ab20:	bl	1b06c <__assert_fail@plt+0x981c>
   1ab24:	cmp	r0, #0
   1ab28:	bne	1ab38 <__assert_fail@plt+0x92e8>
   1ab2c:	ldrb	r0, [r4]
   1ab30:	mov	r6, #1
   1ab34:	str	r0, [r5]
   1ab38:	mov	r0, r6
   1ab3c:	sub	sp, fp, #16
   1ab40:	pop	{r4, r5, r6, r7, fp, pc}
   1ab44:	push	{fp, lr}
   1ab48:	mov	fp, sp
   1ab4c:	mov	r4, r0
   1ab50:	movw	r0, #53604	; 0xd164
   1ab54:	movw	r1, #50994	; 0xc732
   1ab58:	mov	r2, #5
   1ab5c:	movt	r0, #2
   1ab60:	movt	r1, #1
   1ab64:	ldr	r5, [r0]
   1ab68:	mov	r0, #0
   1ab6c:	bl	11538 <dcgettext@plt>
   1ab70:	mov	r2, r0
   1ab74:	mov	r0, r5
   1ab78:	mov	r1, r4
   1ab7c:	bl	115ec <error@plt>
   1ab80:	bl	11814 <abort@plt>
   1ab84:	push	{fp, lr}
   1ab88:	mov	fp, sp
   1ab8c:	mov	r4, r0
   1ab90:	movw	r0, #53604	; 0xd164
   1ab94:	movw	r1, #51037	; 0xc75d
   1ab98:	mov	r2, #5
   1ab9c:	movt	r0, #2
   1aba0:	movt	r1, #1
   1aba4:	ldr	r5, [r0]
   1aba8:	mov	r0, #0
   1abac:	bl	11538 <dcgettext@plt>
   1abb0:	mov	r2, r0
   1abb4:	mov	r0, r5
   1abb8:	mov	r1, r4
   1abbc:	bl	115ec <error@plt>
   1abc0:	bl	11814 <abort@plt>
   1abc4:	cmp	r2, #0
   1abc8:	beq	1abf8 <__assert_fail@plt+0x93a8>
   1abcc:	mvn	r3, #0
   1abd0:	udiv	r3, r3, r2
   1abd4:	cmp	r3, r1
   1abd8:	bcs	1abf8 <__assert_fail@plt+0x93a8>
   1abdc:	push	{fp, lr}
   1abe0:	mov	fp, sp
   1abe4:	bl	116d0 <__errno_location@plt>
   1abe8:	mov	r1, #12
   1abec:	str	r1, [r0]
   1abf0:	mov	r0, #0
   1abf4:	pop	{fp, pc}
   1abf8:	mul	r1, r2, r1
   1abfc:	b	1a3c0 <__assert_fail@plt+0x8b70>
   1ac00:	push	{r4, r5, fp, lr}
   1ac04:	add	fp, sp, #8
   1ac08:	mov	r4, #0
   1ac0c:	mov	r5, r0
   1ac10:	mov	r1, #524288	; 0x80000
   1ac14:	str	r4, [r0, #4]
   1ac18:	movw	r0, #49475	; 0xc143
   1ac1c:	movt	r0, #1
   1ac20:	bl	1a940 <__assert_fail@plt+0x90f0>
   1ac24:	cmn	r0, #1
   1ac28:	str	r0, [r5]
   1ac2c:	ble	1ac38 <__assert_fail@plt+0x93e8>
   1ac30:	mov	r0, r4
   1ac34:	pop	{r4, r5, fp, pc}
   1ac38:	mov	r0, #0
   1ac3c:	mov	r1, #0
   1ac40:	mov	r4, #0
   1ac44:	bl	11670 <getcwd@plt>
   1ac48:	cmp	r0, #0
   1ac4c:	str	r0, [r5, #4]
   1ac50:	mvneq	r4, #0
   1ac54:	mov	r0, r4
   1ac58:	pop	{r4, r5, fp, pc}
   1ac5c:	ldr	r1, [r0]
   1ac60:	cmp	r1, #0
   1ac64:	bmi	1ac70 <__assert_fail@plt+0x9420>
   1ac68:	mov	r0, r1
   1ac6c:	b	117b4 <fchdir@plt>
   1ac70:	ldr	r0, [r0, #4]
   1ac74:	b	1acac <__assert_fail@plt+0x945c>
   1ac78:	push	{r4, sl, fp, lr}
   1ac7c:	add	fp, sp, #8
   1ac80:	mov	r4, r0
   1ac84:	ldr	r0, [r0]
   1ac88:	cmp	r0, #0
   1ac8c:	bmi	1ac94 <__assert_fail@plt+0x9444>
   1ac90:	bl	11820 <close@plt>
   1ac94:	ldr	r0, [r4, #4]
   1ac98:	pop	{r4, sl, fp, lr}
   1ac9c:	b	1a9d8 <__assert_fail@plt+0x9188>
   1aca0:	mov	r1, #0
   1aca4:	mov	r2, #3
   1aca8:	b	1a760 <__assert_fail@plt+0x8f10>
   1acac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acb0:	add	fp, sp, #28
   1acb4:	sub	sp, sp, #4
   1acb8:	mov	r4, r0
   1acbc:	bl	11574 <chdir@plt>
   1acc0:	cmp	r0, #0
   1acc4:	beq	1ad94 <__assert_fail@plt+0x9544>
   1acc8:	mov	r6, r0
   1accc:	bl	116d0 <__errno_location@plt>
   1acd0:	mov	r9, r0
   1acd4:	ldr	r0, [r0]
   1acd8:	cmp	r0, #36	; 0x24
   1acdc:	bne	1af54 <__assert_fail@plt+0x9704>
   1ace0:	mov	r0, r4
   1ace4:	bl	116ac <strlen@plt>
   1ace8:	cmp	r0, #0
   1acec:	beq	1b00c <__assert_fail@plt+0x97bc>
   1acf0:	mov	r7, r0
   1acf4:	mov	r0, #0
   1acf8:	cmp	r0, r7, lsr #12
   1acfc:	beq	1b02c <__assert_fail@plt+0x97dc>
   1ad00:	movw	r1, #50877	; 0xc6bd
   1ad04:	mov	r0, r4
   1ad08:	movt	r1, #1
   1ad0c:	bl	11844 <strspn@plt>
   1ad10:	cmp	r0, #0
   1ad14:	beq	1ada4 <__assert_fail@plt+0x9554>
   1ad18:	mov	r6, r0
   1ad1c:	cmp	r0, #2
   1ad20:	bne	1aed0 <__assert_fail@plt+0x9680>
   1ad24:	add	r0, r4, #3
   1ad28:	sub	r2, r7, #3
   1ad2c:	mov	r1, #47	; 0x2f
   1ad30:	mov	r8, #47	; 0x2f
   1ad34:	bl	11724 <memchr@plt>
   1ad38:	cmp	r0, #0
   1ad3c:	beq	1af68 <__assert_fail@plt+0x9718>
   1ad40:	mov	r6, r0
   1ad44:	mov	r0, #0
   1ad48:	mov	r1, r4
   1ad4c:	mov	r2, #18688	; 0x4900
   1ad50:	strb	r0, [r6]
   1ad54:	mvn	r0, #99	; 0x63
   1ad58:	bl	116b8 <openat64@plt>
   1ad5c:	cmp	r0, #0
   1ad60:	strb	r8, [r6]
   1ad64:	bmi	1af60 <__assert_fail@plt+0x9710>
   1ad68:	movw	r1, #50877	; 0xc6bd
   1ad6c:	add	r6, r6, #1
   1ad70:	mov	r5, r0
   1ad74:	movt	r1, #1
   1ad78:	mov	r0, r6
   1ad7c:	bl	11844 <strspn@plt>
   1ad80:	add	r6, r6, r0
   1ad84:	ldrb	r0, [r6]
   1ad88:	cmp	r0, #47	; 0x2f
   1ad8c:	bne	1adb8 <__assert_fail@plt+0x9568>
   1ad90:	b	1af00 <__assert_fail@plt+0x96b0>
   1ad94:	mov	r6, #0
   1ad98:	mov	r0, r6
   1ad9c:	sub	sp, fp, #28
   1ada0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ada4:	mvn	r5, #99	; 0x63
   1ada8:	mov	r6, r4
   1adac:	ldrb	r0, [r6]
   1adb0:	cmp	r0, #47	; 0x2f
   1adb4:	beq	1af00 <__assert_fail@plt+0x96b0>
   1adb8:	add	sl, r4, r7
   1adbc:	cmp	r6, sl
   1adc0:	bhi	1b04c <__assert_fail@plt+0x97fc>
   1adc4:	sub	r0, sl, r6
   1adc8:	str	r9, [sp]
   1adcc:	cmp	r0, #4096	; 0x1000
   1add0:	blt	1ae88 <__assert_fail@plt+0x9638>
   1add4:	movw	r9, #50877	; 0xc6bd
   1add8:	mov	r8, #0
   1addc:	movt	r9, #1
   1ade0:	b	1ae0c <__assert_fail@plt+0x95bc>
   1ade4:	mov	r0, #47	; 0x2f
   1ade8:	mov	r1, r9
   1adec:	strb	r0, [r4], #1
   1adf0:	mov	r0, r4
   1adf4:	bl	11844 <strspn@plt>
   1adf8:	add	r6, r4, r0
   1adfc:	mov	r5, r7
   1ae00:	sub	r0, sl, r6
   1ae04:	cmp	r0, #4096	; 0x1000
   1ae08:	blt	1ae8c <__assert_fail@plt+0x963c>
   1ae0c:	mov	r0, r6
   1ae10:	mov	r1, #47	; 0x2f
   1ae14:	mov	r2, #4096	; 0x1000
   1ae18:	bl	116c4 <memrchr@plt>
   1ae1c:	cmp	r0, #0
   1ae20:	beq	1af80 <__assert_fail@plt+0x9730>
   1ae24:	mov	r4, r0
   1ae28:	strb	r8, [r0], -r6
   1ae2c:	cmp	r0, #4096	; 0x1000
   1ae30:	bge	1afec <__assert_fail@plt+0x979c>
   1ae34:	mov	r0, r5
   1ae38:	mov	r1, r6
   1ae3c:	mov	r2, #18688	; 0x4900
   1ae40:	bl	116b8 <openat64@plt>
   1ae44:	cmp	r0, #0
   1ae48:	bmi	1af9c <__assert_fail@plt+0x974c>
   1ae4c:	mov	r7, r0
   1ae50:	cmp	r5, #0
   1ae54:	bmi	1ade4 <__assert_fail@plt+0x9594>
   1ae58:	mov	r0, r5
   1ae5c:	bl	11820 <close@plt>
   1ae60:	cmp	r0, #0
   1ae64:	beq	1ade4 <__assert_fail@plt+0x9594>
   1ae68:	movw	r0, #51189	; 0xc7f5
   1ae6c:	movw	r1, #51091	; 0xc793
   1ae70:	movw	r3, #51202	; 0xc802
   1ae74:	mov	r2, #64	; 0x40
   1ae78:	movt	r0, #1
   1ae7c:	movt	r1, #1
   1ae80:	movt	r3, #1
   1ae84:	bl	11850 <__assert_fail@plt>
   1ae88:	mov	r7, r5
   1ae8c:	cmp	r6, sl
   1ae90:	bcs	1af20 <__assert_fail@plt+0x96d0>
   1ae94:	mov	r0, r7
   1ae98:	mov	r1, r6
   1ae9c:	mov	r2, #18688	; 0x4900
   1aea0:	bl	116b8 <openat64@plt>
   1aea4:	ldr	r9, [sp]
   1aea8:	cmp	r0, #0
   1aeac:	bmi	1afd8 <__assert_fail@plt+0x9788>
   1aeb0:	mov	r5, r0
   1aeb4:	cmp	r7, #0
   1aeb8:	bmi	1af28 <__assert_fail@plt+0x96d8>
   1aebc:	mov	r0, r7
   1aec0:	bl	11820 <close@plt>
   1aec4:	cmp	r0, #0
   1aec8:	beq	1af28 <__assert_fail@plt+0x96d8>
   1aecc:	b	1ae68 <__assert_fail@plt+0x9618>
   1aed0:	movw	r1, #50877	; 0xc6bd
   1aed4:	mvn	r0, #99	; 0x63
   1aed8:	mov	r2, #18688	; 0x4900
   1aedc:	movt	r1, #1
   1aee0:	bl	116b8 <openat64@plt>
   1aee4:	cmp	r0, #0
   1aee8:	bmi	1af60 <__assert_fail@plt+0x9710>
   1aeec:	mov	r5, r0
   1aef0:	add	r6, r4, r6
   1aef4:	ldrb	r0, [r6]
   1aef8:	cmp	r0, #47	; 0x2f
   1aefc:	bne	1adb8 <__assert_fail@plt+0x9568>
   1af00:	movw	r0, #51143	; 0xc7c7
   1af04:	movw	r1, #51091	; 0xc793
   1af08:	movw	r3, #51108	; 0xc7a4
   1af0c:	mov	r2, #162	; 0xa2
   1af10:	movt	r0, #1
   1af14:	movt	r1, #1
   1af18:	movt	r3, #1
   1af1c:	bl	11850 <__assert_fail@plt>
   1af20:	ldr	r9, [sp]
   1af24:	mov	r5, r7
   1af28:	mov	r0, r5
   1af2c:	bl	117b4 <fchdir@plt>
   1af30:	cmp	r0, #0
   1af34:	bne	1afa8 <__assert_fail@plt+0x9758>
   1af38:	mov	r6, #0
   1af3c:	cmp	r5, #0
   1af40:	bmi	1af54 <__assert_fail@plt+0x9704>
   1af44:	mov	r0, r5
   1af48:	bl	11820 <close@plt>
   1af4c:	cmp	r0, #0
   1af50:	bne	1ae68 <__assert_fail@plt+0x9618>
   1af54:	mov	r0, r6
   1af58:	sub	sp, fp, #28
   1af5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af60:	ldr	r4, [r9]
   1af64:	b	1afc4 <__assert_fail@plt+0x9774>
   1af68:	mov	r0, #36	; 0x24
   1af6c:	str	r0, [r9]
   1af70:	mvn	r6, #0
   1af74:	mov	r0, r6
   1af78:	sub	sp, fp, #28
   1af7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af80:	ldr	r1, [sp]
   1af84:	mov	r0, #36	; 0x24
   1af88:	str	r0, [r1]
   1af8c:	mvn	r6, #0
   1af90:	mov	r0, r6
   1af94:	sub	sp, fp, #28
   1af98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af9c:	ldr	r9, [sp]
   1afa0:	mov	r0, #47	; 0x2f
   1afa4:	strb	r0, [r4]
   1afa8:	ldr	r4, [r9]
   1afac:	cmp	r5, #0
   1afb0:	bmi	1afc4 <__assert_fail@plt+0x9774>
   1afb4:	mov	r0, r5
   1afb8:	bl	11820 <close@plt>
   1afbc:	cmp	r0, #0
   1afc0:	bne	1ae68 <__assert_fail@plt+0x9618>
   1afc4:	str	r4, [r9]
   1afc8:	mvn	r6, #0
   1afcc:	mov	r0, r6
   1afd0:	sub	sp, fp, #28
   1afd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afd8:	mov	r5, r7
   1afdc:	ldr	r4, [r9]
   1afe0:	cmp	r5, #0
   1afe4:	bpl	1afb4 <__assert_fail@plt+0x9764>
   1afe8:	b	1afc4 <__assert_fail@plt+0x9774>
   1afec:	movw	r0, #51170	; 0xc7e2
   1aff0:	movw	r1, #51091	; 0xc793
   1aff4:	movw	r3, #51108	; 0xc7a4
   1aff8:	mov	r2, #179	; 0xb3
   1affc:	movt	r0, #1
   1b000:	movt	r1, #1
   1b004:	movt	r3, #1
   1b008:	bl	11850 <__assert_fail@plt>
   1b00c:	movw	r0, #51083	; 0xc78b
   1b010:	movw	r1, #51091	; 0xc793
   1b014:	movw	r3, #51108	; 0xc7a4
   1b018:	mov	r2, #126	; 0x7e
   1b01c:	movt	r0, #1
   1b020:	movt	r1, #1
   1b024:	movt	r3, #1
   1b028:	bl	11850 <__assert_fail@plt>
   1b02c:	movw	r0, #51131	; 0xc7bb
   1b030:	movw	r1, #51091	; 0xc793
   1b034:	movw	r3, #51108	; 0xc7a4
   1b038:	mov	r2, #127	; 0x7f
   1b03c:	movt	r0, #1
   1b040:	movt	r1, #1
   1b044:	movt	r3, #1
   1b048:	bl	11850 <__assert_fail@plt>
   1b04c:	movw	r0, #51155	; 0xc7d3
   1b050:	movw	r1, #51091	; 0xc793
   1b054:	movw	r3, #51108	; 0xc7a4
   1b058:	mov	r2, #163	; 0xa3
   1b05c:	movt	r0, #1
   1b060:	movt	r1, #1
   1b064:	movt	r3, #1
   1b068:	bl	11850 <__assert_fail@plt>
   1b06c:	push	{r4, sl, fp, lr}
   1b070:	add	fp, sp, #8
   1b074:	sub	sp, sp, #264	; 0x108
   1b078:	add	r1, sp, #7
   1b07c:	movw	r2, #257	; 0x101
   1b080:	bl	1b0d8 <__assert_fail@plt+0x9888>
   1b084:	mov	r4, #0
   1b088:	cmp	r0, #0
   1b08c:	bne	1b0cc <__assert_fail@plt+0x987c>
   1b090:	movw	r1, #51239	; 0xc827
   1b094:	add	r0, sp, #7
   1b098:	mov	r2, #2
   1b09c:	movt	r1, #1
   1b0a0:	bl	116a0 <bcmp@plt>
   1b0a4:	cmp	r0, #0
   1b0a8:	beq	1b0cc <__assert_fail@plt+0x987c>
   1b0ac:	movw	r1, #51241	; 0xc829
   1b0b0:	add	r0, sp, #7
   1b0b4:	mov	r2, #6
   1b0b8:	movt	r1, #1
   1b0bc:	bl	116a0 <bcmp@plt>
   1b0c0:	cmp	r0, #0
   1b0c4:	mov	r4, r0
   1b0c8:	movwne	r4, #1
   1b0cc:	mov	r0, r4
   1b0d0:	sub	sp, fp, #8
   1b0d4:	pop	{r4, sl, fp, pc}
   1b0d8:	push	{r4, r5, r6, r7, fp, lr}
   1b0dc:	add	fp, sp, #16
   1b0e0:	mov	r4, r1
   1b0e4:	mov	r1, #0
   1b0e8:	mov	r6, r2
   1b0ec:	bl	1176c <setlocale@plt>
   1b0f0:	cmp	r0, #0
   1b0f4:	beq	1b124 <__assert_fail@plt+0x98d4>
   1b0f8:	mov	r7, r0
   1b0fc:	bl	116ac <strlen@plt>
   1b100:	cmp	r0, r6
   1b104:	bcs	1b140 <__assert_fail@plt+0x98f0>
   1b108:	add	r2, r0, #1
   1b10c:	mov	r0, r4
   1b110:	mov	r1, r7
   1b114:	bl	11508 <memcpy@plt>
   1b118:	mov	r5, #0
   1b11c:	mov	r0, r5
   1b120:	pop	{r4, r5, r6, r7, fp, pc}
   1b124:	mov	r5, #22
   1b128:	cmp	r6, #0
   1b12c:	beq	1b168 <__assert_fail@plt+0x9918>
   1b130:	mov	r0, #0
   1b134:	strb	r0, [r4]
   1b138:	mov	r0, r5
   1b13c:	pop	{r4, r5, r6, r7, fp, pc}
   1b140:	mov	r5, #34	; 0x22
   1b144:	cmp	r6, #0
   1b148:	beq	1b168 <__assert_fail@plt+0x9918>
   1b14c:	sub	r6, r6, #1
   1b150:	mov	r0, r4
   1b154:	mov	r1, r7
   1b158:	mov	r2, r6
   1b15c:	bl	11508 <memcpy@plt>
   1b160:	mov	r0, #0
   1b164:	strb	r0, [r4, r6]
   1b168:	mov	r0, r5
   1b16c:	pop	{r4, r5, r6, r7, fp, pc}
   1b170:	mov	r1, #0
   1b174:	b	1176c <setlocale@plt>
   1b178:	cmp	r3, #0
   1b17c:	cmpeq	r2, #0
   1b180:	bne	1b198 <__assert_fail@plt+0x9948>
   1b184:	cmp	r1, #0
   1b188:	cmpeq	r0, #0
   1b18c:	mvnne	r1, #0
   1b190:	mvnne	r0, #0
   1b194:	b	1b1b4 <__assert_fail@plt+0x9964>
   1b198:	sub	sp, sp, #8
   1b19c:	push	{sp, lr}
   1b1a0:	bl	1b1c4 <__assert_fail@plt+0x9974>
   1b1a4:	ldr	lr, [sp, #4]
   1b1a8:	add	sp, sp, #8
   1b1ac:	pop	{r2, r3}
   1b1b0:	bx	lr
   1b1b4:	push	{r1, lr}
   1b1b8:	mov	r0, #8
   1b1bc:	bl	114a8 <raise@plt>
   1b1c0:	pop	{r1, pc}
   1b1c4:	cmp	r1, r3
   1b1c8:	cmpeq	r0, r2
   1b1cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1d0:	mov	r4, r0
   1b1d4:	movcc	r0, #0
   1b1d8:	mov	r5, r1
   1b1dc:	ldr	lr, [sp, #36]	; 0x24
   1b1e0:	movcc	r1, r0
   1b1e4:	bcc	1b2e0 <__assert_fail@plt+0x9a90>
   1b1e8:	cmp	r3, #0
   1b1ec:	clzeq	ip, r2
   1b1f0:	clzne	ip, r3
   1b1f4:	addeq	ip, ip, #32
   1b1f8:	cmp	r5, #0
   1b1fc:	clzeq	r1, r4
   1b200:	addeq	r1, r1, #32
   1b204:	clzne	r1, r5
   1b208:	sub	ip, ip, r1
   1b20c:	sub	sl, ip, #32
   1b210:	lsl	r9, r3, ip
   1b214:	rsb	fp, ip, #32
   1b218:	orr	r9, r9, r2, lsl sl
   1b21c:	orr	r9, r9, r2, lsr fp
   1b220:	lsl	r8, r2, ip
   1b224:	cmp	r5, r9
   1b228:	cmpeq	r4, r8
   1b22c:	movcc	r0, #0
   1b230:	movcc	r1, r0
   1b234:	bcc	1b250 <__assert_fail@plt+0x9a00>
   1b238:	mov	r0, #1
   1b23c:	subs	r4, r4, r8
   1b240:	lsl	r1, r0, sl
   1b244:	orr	r1, r1, r0, lsr fp
   1b248:	lsl	r0, r0, ip
   1b24c:	sbc	r5, r5, r9
   1b250:	cmp	ip, #0
   1b254:	beq	1b2e0 <__assert_fail@plt+0x9a90>
   1b258:	lsr	r6, r8, #1
   1b25c:	orr	r6, r6, r9, lsl #31
   1b260:	lsr	r7, r9, #1
   1b264:	mov	r2, ip
   1b268:	b	1b28c <__assert_fail@plt+0x9a3c>
   1b26c:	subs	r3, r4, r6
   1b270:	sbc	r8, r5, r7
   1b274:	adds	r3, r3, r3
   1b278:	adc	r8, r8, r8
   1b27c:	adds	r4, r3, #1
   1b280:	adc	r5, r8, #0
   1b284:	subs	r2, r2, #1
   1b288:	beq	1b2a8 <__assert_fail@plt+0x9a58>
   1b28c:	cmp	r5, r7
   1b290:	cmpeq	r4, r6
   1b294:	bcs	1b26c <__assert_fail@plt+0x9a1c>
   1b298:	adds	r4, r4, r4
   1b29c:	adc	r5, r5, r5
   1b2a0:	subs	r2, r2, #1
   1b2a4:	bne	1b28c <__assert_fail@plt+0x9a3c>
   1b2a8:	lsr	r3, r4, ip
   1b2ac:	orr	r3, r3, r5, lsl fp
   1b2b0:	lsr	r2, r5, ip
   1b2b4:	orr	r3, r3, r5, lsr sl
   1b2b8:	adds	r0, r0, r4
   1b2bc:	mov	r4, r3
   1b2c0:	lsl	r3, r2, ip
   1b2c4:	orr	r3, r3, r4, lsl sl
   1b2c8:	lsl	ip, r4, ip
   1b2cc:	orr	r3, r3, r4, lsr fp
   1b2d0:	adc	r1, r1, r5
   1b2d4:	subs	r0, r0, ip
   1b2d8:	mov	r5, r2
   1b2dc:	sbc	r1, r1, r3
   1b2e0:	cmp	lr, #0
   1b2e4:	strdne	r4, [lr]
   1b2e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b2f0:	mov	r7, r0
   1b2f4:	ldr	r6, [pc, #72]	; 1b344 <__assert_fail@plt+0x9af4>
   1b2f8:	ldr	r5, [pc, #72]	; 1b348 <__assert_fail@plt+0x9af8>
   1b2fc:	add	r6, pc, r6
   1b300:	add	r5, pc, r5
   1b304:	sub	r6, r6, r5
   1b308:	mov	r8, r1
   1b30c:	mov	r9, r2
   1b310:	bl	11464 <fstatfs64@plt-0x20>
   1b314:	asrs	r6, r6, #2
   1b318:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b31c:	mov	r4, #0
   1b320:	add	r4, r4, #1
   1b324:	ldr	r3, [r5], #4
   1b328:	mov	r2, r9
   1b32c:	mov	r1, r8
   1b330:	mov	r0, r7
   1b334:	blx	r3
   1b338:	cmp	r6, r4
   1b33c:	bne	1b320 <__assert_fail@plt+0x9ad0>
   1b340:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b344:	andeq	r1, r1, r0, lsl #24
   1b348:	strdeq	r1, [r1], -r8
   1b34c:	bx	lr
   1b350:	ldr	r3, [pc, #12]	; 1b364 <__assert_fail@plt+0x9b14>
   1b354:	mov	r1, #0
   1b358:	add	r3, pc, r3
   1b35c:	ldr	r2, [r3]
   1b360:	b	116e8 <__cxa_atexit@plt>
   1b364:	strdeq	r1, [r1], -ip

Disassembly of section .fini:

0001b368 <.fini>:
   1b368:	push	{r3, lr}
   1b36c:	pop	{r3, pc}
