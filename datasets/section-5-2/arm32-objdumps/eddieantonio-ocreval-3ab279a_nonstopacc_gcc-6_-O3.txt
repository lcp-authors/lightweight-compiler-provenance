
../repos/eddieantonio-ocreval-3ab279a/nonstopacc/nonstopacc:     file format elf32-littlearm


Disassembly of section .init:

000109cc <.init>:
   109cc:	push	{r3, lr}
   109d0:	bl	10c94 <__assert_fail@plt+0xf8>
   109d4:	pop	{r3, pc}

Disassembly of section .plt:

000109d8 <calloc@plt-0x14>:
   109d8:	push	{lr}		; (str lr, [sp, #-4]!)
   109dc:	ldr	lr, [pc, #4]	; 109e8 <calloc@plt-0x4>
   109e0:	add	lr, pc, lr
   109e4:	ldr	pc, [lr, #8]!
   109e8:	andeq	r7, r1, r8, lsl r6

000109ec <calloc@plt>:
   109ec:	add	ip, pc, #0, 12
   109f0:	add	ip, ip, #94208	; 0x17000
   109f4:	ldr	pc, [ip, #1560]!	; 0x618

000109f8 <strcmp@plt>:
   109f8:	add	ip, pc, #0, 12
   109fc:	add	ip, ip, #94208	; 0x17000
   10a00:	ldr	pc, [ip, #1552]!	; 0x610

00010a04 <strtol@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #94208	; 0x17000
   10a0c:	ldr	pc, [ip, #1544]!	; 0x608

00010a10 <printf@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #94208	; 0x17000
   10a18:	ldr	pc, [ip, #1536]!	; 0x600

00010a1c <fopen@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #94208	; 0x17000
   10a24:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a28 <free@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #94208	; 0x17000
   10a30:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a34 <utf8proc_get_property@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #94208	; 0x17000
   10a3c:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a40 <fgets@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #94208	; 0x17000
   10a48:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a4c <utf8proc_encode_char@plt>:
   10a4c:	add	ip, pc, #0, 12
   10a50:	add	ip, ip, #94208	; 0x17000
   10a54:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a58 <strdup@plt>:
   10a58:	add	ip, pc, #0, 12
   10a5c:	add	ip, ip, #94208	; 0x17000
   10a60:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a64 <rewind@plt>:
   10a64:	add	ip, pc, #0, 12
   10a68:	add	ip, ip, #94208	; 0x17000
   10a6c:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a70 <unlink@plt>:
   10a70:	add	ip, pc, #0, 12
   10a74:	add	ip, ip, #94208	; 0x17000
   10a78:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a7c <utf8proc_tolower@plt>:
   10a7c:	add	ip, pc, #0, 12
   10a80:	add	ip, ip, #94208	; 0x17000
   10a84:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a88 <__xstat@plt>:
   10a88:	add	ip, pc, #0, 12
   10a8c:	add	ip, ip, #94208	; 0x17000
   10a90:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a94 <fwrite@plt>:
   10a94:	add	ip, pc, #0, 12
   10a98:	add	ip, ip, #94208	; 0x17000
   10a9c:	ldr	pc, [ip, #1448]!	; 0x5a8

00010aa0 <fread@plt>:
   10aa0:	add	ip, pc, #0, 12
   10aa4:	add	ip, ip, #94208	; 0x17000
   10aa8:	ldr	pc, [ip, #1440]!	; 0x5a0

00010aac <utf8proc_iterate@plt>:
   10aac:	add	ip, pc, #0, 12
   10ab0:	add	ip, ip, #94208	; 0x17000
   10ab4:	ldr	pc, [ip, #1432]!	; 0x598

00010ab8 <malloc@plt>:
   10ab8:	add	ip, pc, #0, 12
   10abc:	add	ip, ip, #94208	; 0x17000
   10ac0:	ldr	pc, [ip, #1424]!	; 0x590

00010ac4 <__libc_start_main@plt>:
   10ac4:	add	ip, pc, #0, 12
   10ac8:	add	ip, ip, #94208	; 0x17000
   10acc:	ldr	pc, [ip, #1416]!	; 0x588

00010ad0 <__sysv_signal@plt>:
   10ad0:	add	ip, pc, #0, 12
   10ad4:	add	ip, ip, #94208	; 0x17000
   10ad8:	ldr	pc, [ip, #1408]!	; 0x580

00010adc <__gmon_start__@plt>:
   10adc:	add	ip, pc, #0, 12
   10ae0:	add	ip, ip, #94208	; 0x17000
   10ae4:	ldr	pc, [ip, #1400]!	; 0x578

00010ae8 <getpid@plt>:
   10ae8:	add	ip, pc, #0, 12
   10aec:	add	ip, ip, #94208	; 0x17000
   10af0:	ldr	pc, [ip, #1392]!	; 0x570

00010af4 <exit@plt>:
   10af4:	add	ip, pc, #0, 12
   10af8:	add	ip, ip, #94208	; 0x17000
   10afc:	ldr	pc, [ip, #1384]!	; 0x568

00010b00 <utf8proc_category@plt>:
   10b00:	add	ip, pc, #0, 12
   10b04:	add	ip, ip, #94208	; 0x17000
   10b08:	ldr	pc, [ip, #1376]!	; 0x560

00010b0c <strlen@plt>:
   10b0c:	add	ip, pc, #0, 12
   10b10:	add	ip, ip, #94208	; 0x17000
   10b14:	ldr	pc, [ip, #1368]!	; 0x558

00010b18 <fprintf@plt>:
   10b18:	add	ip, pc, #0, 12
   10b1c:	add	ip, ip, #94208	; 0x17000
   10b20:	ldr	pc, [ip, #1360]!	; 0x550

00010b24 <__isoc99_sscanf@plt>:
   10b24:	add	ip, pc, #0, 12
   10b28:	add	ip, ip, #94208	; 0x17000
   10b2c:	ldr	pc, [ip, #1352]!	; 0x548

00010b30 <fclose@plt>:
   10b30:	add	ip, pc, #0, 12
   10b34:	add	ip, ip, #94208	; 0x17000
   10b38:	ldr	pc, [ip, #1344]!	; 0x540

00010b3c <utf8proc_NFC@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #94208	; 0x17000
   10b44:	ldr	pc, [ip, #1336]!	; 0x538

00010b48 <fputc@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #94208	; 0x17000
   10b50:	ldr	pc, [ip, #1328]!	; 0x530

00010b54 <sprintf@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #94208	; 0x17000
   10b5c:	ldr	pc, [ip, #1320]!	; 0x528

00010b60 <utf8proc_errmsg@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #94208	; 0x17000
   10b68:	ldr	pc, [ip, #1312]!	; 0x520

00010b6c <fputs@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #94208	; 0x17000
   10b74:	ldr	pc, [ip, #1304]!	; 0x518

00010b78 <strncmp@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #94208	; 0x17000
   10b80:	ldr	pc, [ip, #1296]!	; 0x510

00010b84 <abort@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #94208	; 0x17000
   10b8c:	ldr	pc, [ip, #1288]!	; 0x508

00010b90 <getc@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #94208	; 0x17000
   10b98:	ldr	pc, [ip, #1280]!	; 0x500

00010b9c <__assert_fail@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #94208	; 0x17000
   10ba4:	ldr	pc, [ip, #1272]!	; 0x4f8

Disassembly of section .text:

00010ba8 <error@@Base-0x1e24>:
   10ba8:	push	{lr}		; (str lr, [sp, #-4]!)
   10bac:	sub	sp, sp, #12
   10bb0:	add	ip, sp, #8
   10bb4:	mov	r3, #0
   10bb8:	str	r0, [ip, #-4]!
   10bbc:	ldr	r2, [pc, #116]	; 10c38 <__assert_fail@plt+0x9c>
   10bc0:	mov	r0, ip
   10bc4:	mov	r4, r1
   10bc8:	bl	12b04 <error@@Base+0x138>
   10bcc:	ldr	r3, [sp, #4]
   10bd0:	cmp	r3, #2
   10bd4:	beq	10be0 <__assert_fail@plt+0x44>
   10bd8:	ldr	r0, [pc, #92]	; 10c3c <__assert_fail@plt+0xa0>
   10bdc:	bl	129cc <error@@Base>
   10be0:	ldr	r2, [pc, #88]	; 10c40 <__assert_fail@plt+0xa4>
   10be4:	ldr	r5, [pc, #88]	; 10c44 <__assert_fail@plt+0xa8>
   10be8:	ldr	r1, [r4]
   10bec:	ldr	r0, [pc, #84]	; 10c48 <__assert_fail@plt+0xac>
   10bf0:	bl	12db8 <error@@Base+0x3ec>
   10bf4:	ldr	r1, [pc, #76]	; 10c48 <__assert_fail@plt+0xac>
   10bf8:	ldr	r0, [pc, #76]	; 10c4c <__assert_fail@plt+0xb0>
   10bfc:	bl	11d64 <__assert_fail@plt+0x11c8>
   10c00:	ldr	r1, [r4, #4]
   10c04:	mov	r0, r5
   10c08:	bl	11728 <__assert_fail@plt+0xb8c>
   10c0c:	ldr	r3, [r5]
   10c10:	ldr	r0, [pc, #56]	; 10c50 <__assert_fail@plt+0xb4>
   10c14:	ldr	r2, [pc, #56]	; 10c54 <__assert_fail@plt+0xb8>
   10c18:	ldr	r1, [r5, #4]
   10c1c:	cmp	r3, #0
   10c20:	str	r3, [r0]
   10c24:	str	r1, [r2]
   10c28:	bne	10c30 <__assert_fail@plt+0x94>
   10c2c:	bl	12974 <__assert_fail@plt+0x1dd8>
   10c30:	bl	10d80 <__assert_fail@plt+0x1e4>
   10c34:	b	10c2c <__assert_fail@plt+0x90>
   10c38:	andeq	r3, r1, r4, ror #20
   10c3c:	andeq	r3, r1, r8, lsl #21
   10c40:	andeq	r8, r2, ip, lsr #1
   10c44:	andeq	r8, r2, ip, ror #2
   10c48:	andeq	r8, r2, ip, asr #2
   10c4c:	andeq	r8, r2, ip, asr r1
   10c50:	andeq	r8, r2, r8, asr #2
   10c54:	andeq	ip, r2, ip, lsr r4
   10c58:	mov	fp, #0
   10c5c:	mov	lr, #0
   10c60:	pop	{r1}		; (ldr r1, [sp], #4)
   10c64:	mov	r2, sp
   10c68:	push	{r2}		; (str r2, [sp, #-4]!)
   10c6c:	push	{r0}		; (str r0, [sp, #-4]!)
   10c70:	ldr	ip, [pc, #16]	; 10c88 <__assert_fail@plt+0xec>
   10c74:	push	{ip}		; (str ip, [sp, #-4]!)
   10c78:	ldr	r0, [pc, #12]	; 10c8c <__assert_fail@plt+0xf0>
   10c7c:	ldr	r3, [pc, #12]	; 10c90 <__assert_fail@plt+0xf4>
   10c80:	bl	10ac4 <__libc_start_main@plt>
   10c84:	bl	10b84 <abort@plt>
   10c88:	andeq	r3, r1, r8, asr #20
   10c8c:	andeq	r0, r1, r8, lsr #23
   10c90:	andeq	r3, r1, r8, ror #19
   10c94:	ldr	r3, [pc, #20]	; 10cb0 <__assert_fail@plt+0x114>
   10c98:	ldr	r2, [pc, #20]	; 10cb4 <__assert_fail@plt+0x118>
   10c9c:	add	r3, pc, r3
   10ca0:	ldr	r2, [r3, r2]
   10ca4:	cmp	r2, #0
   10ca8:	bxeq	lr
   10cac:	b	10adc <__gmon_start__@plt>
   10cb0:	andeq	r7, r1, ip, asr r3
   10cb4:	andeq	r0, r0, r0, lsr #1
   10cb8:	ldr	r3, [pc, #28]	; 10cdc <__assert_fail@plt+0x140>
   10cbc:	ldr	r0, [pc, #28]	; 10ce0 <__assert_fail@plt+0x144>
   10cc0:	sub	r3, r3, r0
   10cc4:	cmp	r3, #6
   10cc8:	bxls	lr
   10ccc:	ldr	r3, [pc, #16]	; 10ce4 <__assert_fail@plt+0x148>
   10cd0:	cmp	r3, #0
   10cd4:	bxeq	lr
   10cd8:	bx	r3
   10cdc:	andeq	r8, r2, r3, asr #1
   10ce0:	andeq	r8, r2, r0, asr #1
   10ce4:	andeq	r0, r0, r0
   10ce8:	ldr	r1, [pc, #36]	; 10d14 <__assert_fail@plt+0x178>
   10cec:	ldr	r0, [pc, #36]	; 10d18 <__assert_fail@plt+0x17c>
   10cf0:	sub	r1, r1, r0
   10cf4:	asr	r1, r1, #2
   10cf8:	add	r1, r1, r1, lsr #31
   10cfc:	asrs	r1, r1, #1
   10d00:	bxeq	lr
   10d04:	ldr	r3, [pc, #16]	; 10d1c <__assert_fail@plt+0x180>
   10d08:	cmp	r3, #0
   10d0c:	bxeq	lr
   10d10:	bx	r3
   10d14:	andeq	r8, r2, r0, asr #1
   10d18:	andeq	r8, r2, r0, asr #1
   10d1c:	andeq	r0, r0, r0
   10d20:	push	{r4, lr}
   10d24:	ldr	r4, [pc, #24]	; 10d44 <__assert_fail@plt+0x1a8>
   10d28:	ldrb	r3, [r4]
   10d2c:	cmp	r3, #0
   10d30:	popne	{r4, pc}
   10d34:	bl	10cb8 <__assert_fail@plt+0x11c>
   10d38:	mov	r3, #1
   10d3c:	strb	r3, [r4]
   10d40:	pop	{r4, pc}
   10d44:	ldrdeq	r8, [r2], -r0
   10d48:	ldr	r0, [pc, #40]	; 10d78 <__assert_fail@plt+0x1dc>
   10d4c:	ldr	r3, [r0]
   10d50:	cmp	r3, #0
   10d54:	bne	10d5c <__assert_fail@plt+0x1c0>
   10d58:	b	10ce8 <__assert_fail@plt+0x14c>
   10d5c:	ldr	r3, [pc, #24]	; 10d7c <__assert_fail@plt+0x1e0>
   10d60:	cmp	r3, #0
   10d64:	beq	10d58 <__assert_fail@plt+0x1bc>
   10d68:	push	{r4, lr}
   10d6c:	blx	r3
   10d70:	pop	{r4, lr}
   10d74:	b	10ce8 <__assert_fail@plt+0x14c>
   10d78:	andeq	r7, r2, r4, lsl #28
   10d7c:	andeq	r0, r0, r0
   10d80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10d84:	vpush	{d8}
   10d88:	ldr	r6, [pc, #296]	; 10eb8 <__assert_fail@plt+0x31c>
   10d8c:	ldr	r5, [pc, #296]	; 10ebc <__assert_fail@plt+0x320>
   10d90:	vldr	d8, [pc, #280]	; 10eb0 <__assert_fail@plt+0x314>
   10d94:	ldr	r2, [r6]
   10d98:	ldr	r3, [r5]
   10d9c:	ldr	r7, [pc, #284]	; 10ec0 <__assert_fail@plt+0x324>
   10da0:	sub	r3, r2, r3
   10da4:	vmov	s15, r2
   10da8:	vmov	s14, r3
   10dac:	ldr	r1, [r7]
   10db0:	ldr	r0, [pc, #268]	; 10ec4 <__assert_fail@plt+0x328>
   10db4:	vcvt.f64.s32	d6, s15
   10db8:	vcvt.f64.s32	d7, s14
   10dbc:	add	r3, r1, #1
   10dc0:	str	r3, [r7]
   10dc4:	vmul.f64	d7, d7, d8
   10dc8:	vdiv.f64	d5, d7, d6
   10dcc:	vmov	r2, r3, d5
   10dd0:	bl	10a10 <printf@plt>
   10dd4:	ldr	r3, [pc, #236]	; 10ec8 <__assert_fail@plt+0x32c>
   10dd8:	ldr	r4, [r3]
   10ddc:	cmp	r4, #0
   10de0:	beq	10ea8 <__assert_fail@plt+0x30c>
   10de4:	ldr	sl, [pc, #224]	; 10ecc <__assert_fail@plt+0x330>
   10de8:	ldr	r9, [pc, #224]	; 10ed0 <__assert_fail@plt+0x334>
   10dec:	ldr	r8, [pc, #208]	; 10ec4 <__assert_fail@plt+0x328>
   10df0:	b	10e34 <__assert_fail@plt+0x298>
   10df4:	ldr	r2, [r5]
   10df8:	vmov	s15, r3
   10dfc:	sub	r3, r3, r2
   10e00:	ldr	r1, [r7]
   10e04:	vmov	s14, r3
   10e08:	vcvt.f64.s32	d6, s15
   10e0c:	add	r3, r1, #1
   10e10:	str	r3, [r7]
   10e14:	vcvt.f64.s32	d7, s14
   10e18:	vmul.f64	d7, d7, d8
   10e1c:	vdiv.f64	d5, d7, d6
   10e20:	vmov	r2, r3, d5
   10e24:	bl	10a10 <printf@plt>
   10e28:	ldr	r4, [r4, #4]
   10e2c:	cmp	r4, #0
   10e30:	beq	10ea8 <__assert_fail@plt+0x30c>
   10e34:	ldr	r1, [r4, #8]
   10e38:	mov	r0, sl
   10e3c:	bl	11b08 <__assert_fail@plt+0xf6c>
   10e40:	subs	r3, r0, #0
   10e44:	mov	r0, r9
   10e48:	beq	10e6c <__assert_fail@plt+0x2d0>
   10e4c:	ldr	r2, [r6]
   10e50:	ldr	ip, [r3, #12]
   10e54:	ldr	r1, [r3, #16]
   10e58:	ldr	r3, [r5]
   10e5c:	sub	r2, r2, ip
   10e60:	sub	r3, r3, r1
   10e64:	str	r2, [r6]
   10e68:	str	r3, [r5]
   10e6c:	ldr	r1, [r4, #8]
   10e70:	bl	11b08 <__assert_fail@plt+0xf6c>
   10e74:	ldr	r3, [r6]
   10e78:	cmp	r0, #0
   10e7c:	beq	10e9c <__assert_fail@plt+0x300>
   10e80:	ldr	r2, [r5]
   10e84:	ldr	ip, [r0, #12]
   10e88:	ldr	r1, [r0, #16]
   10e8c:	sub	r3, r3, ip
   10e90:	sub	r2, r2, r1
   10e94:	str	r3, [r6]
   10e98:	str	r2, [r5]
   10e9c:	cmp	r3, #0
   10ea0:	mov	r0, r8
   10ea4:	bne	10df4 <__assert_fail@plt+0x258>
   10ea8:	vpop	{d8}
   10eac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10eb0:	andeq	r0, r0, r0
   10eb4:	subsmi	r0, r9, r0
   10eb8:	andeq	r8, r2, r8, asr #2
   10ebc:	andeq	ip, r2, ip, lsr r4
   10ec0:	ldrdeq	r8, [r2], -r4
   10ec4:	andeq	r3, r1, r8, asr sl
   10ec8:	andeq	r8, r2, ip, asr r1
   10ecc:	andeq	r8, r2, ip, asr #10
   10ed0:	andeq	sl, r2, r4, asr #9
   10ed4:	push	{r4, lr}
   10ed8:	bl	11b08 <__assert_fail@plt+0xf6c>
   10edc:	cmp	r0, #0
   10ee0:	popeq	{r4, pc}
   10ee4:	ldr	ip, [pc, #36]	; 10f10 <__assert_fail@plt+0x374>
   10ee8:	ldr	r1, [pc, #36]	; 10f14 <__assert_fail@plt+0x378>
   10eec:	ldr	lr, [r0, #12]
   10ef0:	ldr	r2, [ip]
   10ef4:	ldr	r3, [r1]
   10ef8:	ldr	r0, [r0, #16]
   10efc:	sub	r2, r2, lr
   10f00:	sub	r3, r3, r0
   10f04:	str	r2, [ip]
   10f08:	str	r3, [r1]
   10f0c:	pop	{r4, pc}
   10f10:	andeq	r8, r2, r8, asr #2
   10f14:	andeq	ip, r2, ip, lsr r4
   10f18:	ldr	r2, [pc, #80]	; 10f70 <__assert_fail@plt+0x3d4>
   10f1c:	ldr	r3, [pc, #80]	; 10f74 <__assert_fail@plt+0x3d8>
   10f20:	vldr	d5, [pc, #64]	; 10f68 <__assert_fail@plt+0x3cc>
   10f24:	ldr	r2, [r2]
   10f28:	ldr	r3, [r3]
   10f2c:	ldr	ip, [pc, #68]	; 10f78 <__assert_fail@plt+0x3dc>
   10f30:	sub	r3, r2, r3
   10f34:	vmov	s15, r2
   10f38:	vmov	s14, r3
   10f3c:	ldr	r1, [ip]
   10f40:	ldr	r0, [pc, #52]	; 10f7c <__assert_fail@plt+0x3e0>
   10f44:	vcvt.f64.s32	d6, s15
   10f48:	vcvt.f64.s32	d7, s14
   10f4c:	add	r3, r1, #1
   10f50:	str	r3, [ip]
   10f54:	vmul.f64	d7, d7, d5
   10f58:	vdiv.f64	d5, d7, d6
   10f5c:	vmov	r2, r3, d5
   10f60:	b	10a10 <printf@plt>
   10f64:	nop			; (mov r0, r0)
   10f68:	andeq	r0, r0, r0
   10f6c:	subsmi	r0, r9, r0
   10f70:	andeq	r8, r2, r8, asr #2
   10f74:	andeq	ip, r2, ip, lsr r4
   10f78:	ldrdeq	r8, [r2], -r4
   10f7c:	andeq	r3, r1, r8, asr sl
   10f80:	ldr	r2, [pc, #32]	; 10fa8 <__assert_fail@plt+0x40c>
   10f84:	ldr	r0, [pc, #32]	; 10fac <__assert_fail@plt+0x410>
   10f88:	ldr	r1, [pc, #32]	; 10fb0 <__assert_fail@plt+0x414>
   10f8c:	ldr	r3, [r2]
   10f90:	ldr	r2, [r2, #4]
   10f94:	cmp	r3, #0
   10f98:	str	r3, [r0]
   10f9c:	str	r2, [r1]
   10fa0:	bxeq	lr
   10fa4:	b	10d80 <__assert_fail@plt+0x1e4>
   10fa8:	andeq	r8, r2, ip, ror #2
   10fac:	andeq	r8, r2, r8, asr #2
   10fb0:	andeq	ip, r2, ip, lsr r4
   10fb4:	andeq	r0, r0, r0
   10fb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fbc:	mov	r2, r0
   10fc0:	sub	sp, sp, #12
   10fc4:	mov	r7, r0
   10fc8:	mov	r4, r1
   10fcc:	ldr	r0, [pc, #248]	; 110cc <__assert_fail@plt+0x530>
   10fd0:	mov	r1, #99	; 0x63
   10fd4:	bl	10a40 <fgets@plt>
   10fd8:	cmp	r0, #0
   10fdc:	beq	110bc <__assert_fail@plt+0x520>
   10fe0:	mov	r2, r7
   10fe4:	mov	r1, #99	; 0x63
   10fe8:	ldr	r0, [pc, #220]	; 110cc <__assert_fail@plt+0x530>
   10fec:	bl	10a40 <fgets@plt>
   10ff0:	cmp	r0, #0
   10ff4:	beq	110bc <__assert_fail@plt+0x520>
   10ff8:	ldr	r5, [pc, #204]	; 110cc <__assert_fail@plt+0x530>
   10ffc:	ldr	r8, [pc, #204]	; 110d0 <__assert_fail@plt+0x534>
   11000:	ldr	sl, [pc, #204]	; 110d4 <__assert_fail@plt+0x538>
   11004:	mov	fp, #0
   11008:	add	r6, r5, #29
   1100c:	mov	r9, #99	; 0x63
   11010:	mov	r2, r7
   11014:	mov	r1, r9
   11018:	mov	r0, r5
   1101c:	bl	10a40 <fgets@plt>
   11020:	add	r3, sp, #4
   11024:	mov	r2, sp
   11028:	mov	r1, r8
   1102c:	cmp	r0, #0
   11030:	mov	r0, r5
   11034:	beq	11044 <__assert_fail@plt+0x4a8>
   11038:	bl	10b24 <__isoc99_sscanf@plt>
   1103c:	cmp	r0, #2
   11040:	beq	11050 <__assert_fail@plt+0x4b4>
   11044:	mov	r0, fp
   11048:	add	sp, sp, #12
   1104c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11050:	mov	r1, #0
   11054:	mov	r2, #10
   11058:	mov	r0, r6
   1105c:	bl	10a04 <strtol@plt>
   11060:	mov	r1, sl
   11064:	subs	r3, r0, #0
   11068:	mov	r0, r6
   1106c:	beq	1109c <__assert_fail@plt+0x500>
   11070:	lsl	r3, r3, #3
   11074:	ldr	ip, [sp]
   11078:	add	r0, r4, r3
   1107c:	ldr	r1, [r4, r3]
   11080:	ldr	r2, [r0, #4]
   11084:	ldr	lr, [sp, #4]
   11088:	add	r1, r1, ip
   1108c:	add	r2, r2, lr
   11090:	str	r1, [r4, r3]
   11094:	str	r2, [r0, #4]
   11098:	b	11010 <__assert_fail@plt+0x474>
   1109c:	bl	109f8 <strcmp@plt>
   110a0:	mov	r3, #88	; 0x58
   110a4:	cmp	r0, #0
   110a8:	bne	11074 <__assert_fail@plt+0x4d8>
   110ac:	ldr	fp, [sp]
   110b0:	mov	r3, r0
   110b4:	mov	ip, fp
   110b8:	b	11078 <__assert_fail@plt+0x4dc>
   110bc:	mov	fp, #0
   110c0:	mov	r0, fp
   110c4:	add	sp, sp, #12
   110c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110cc:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   110d0:	andeq	r3, r1, r8, lsr #21
   110d4:	andeq	r3, r1, r0, lsr #21
   110d8:	ldr	r1, [r1, #8]
   110dc:	ldr	r0, [r0, #8]
   110e0:	b	127dc <__assert_fail@plt+0x1c40>
   110e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110e8:	mov	r2, r0
   110ec:	ldr	r7, [pc, #252]	; 111f0 <__assert_fail@plt+0x654>
   110f0:	sub	sp, sp, #20
   110f4:	mov	r8, r0
   110f8:	mov	r9, r1
   110fc:	mov	r0, r7
   11100:	mov	r1, #99	; 0x63
   11104:	bl	10a40 <fgets@plt>
   11108:	cmp	r0, #0
   1110c:	beq	11168 <__assert_fail@plt+0x5cc>
   11110:	mov	r2, r8
   11114:	mov	r1, #99	; 0x63
   11118:	mov	r0, r7
   1111c:	bl	10a40 <fgets@plt>
   11120:	cmp	r0, #0
   11124:	beq	11168 <__assert_fail@plt+0x5cc>
   11128:	ldr	fp, [pc, #196]	; 111f4 <__assert_fail@plt+0x658>
   1112c:	mov	r4, r7
   11130:	add	sl, r7, #29
   11134:	mov	r2, r8
   11138:	mov	r1, #99	; 0x63
   1113c:	mov	r0, r4
   11140:	bl	10a40 <fgets@plt>
   11144:	add	r3, sp, #12
   11148:	add	r2, sp, #8
   1114c:	mov	r1, fp
   11150:	cmp	r0, #0
   11154:	mov	r0, r4
   11158:	beq	11168 <__assert_fail@plt+0x5cc>
   1115c:	bl	10b24 <__isoc99_sscanf@plt>
   11160:	cmp	r0, #2
   11164:	beq	11170 <__assert_fail@plt+0x5d4>
   11168:	add	sp, sp, #20
   1116c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11170:	mov	r0, r4
   11174:	bl	10b0c <strlen@plt>
   11178:	mov	r2, #0
   1117c:	mov	r1, sl
   11180:	ldr	r5, [sp, #8]
   11184:	ldr	r6, [sp, #12]
   11188:	add	r3, r7, r0
   1118c:	mov	r0, r9
   11190:	strb	r2, [r3, #-1]
   11194:	bl	11b08 <__assert_fail@plt+0xf6c>
   11198:	subs	r3, r0, #0
   1119c:	beq	111bc <__assert_fail@plt+0x620>
   111a0:	ldr	r1, [r3, #12]
   111a4:	ldr	r2, [r3, #16]
   111a8:	add	r5, r1, r5
   111ac:	add	r6, r2, r6
   111b0:	str	r5, [r3, #12]
   111b4:	str	r6, [r3, #16]
   111b8:	b	11134 <__assert_fail@plt+0x598>
   111bc:	mov	r1, #20
   111c0:	mov	r0, #1
   111c4:	bl	12a08 <error@@Base+0x3c>
   111c8:	str	r0, [sp, #4]
   111cc:	mov	r0, sl
   111d0:	bl	10a58 <strdup@plt>
   111d4:	ldr	r3, [sp, #4]
   111d8:	mov	r1, r3
   111dc:	str	r0, [r3, #8]
   111e0:	mov	r0, r9
   111e4:	bl	11b8c <__assert_fail@plt+0xff0>
   111e8:	ldr	r3, [sp, #4]
   111ec:	b	111a0 <__assert_fail@plt+0x604>
   111f0:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   111f4:	andeq	r3, r1, r8, lsr #21
   111f8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111fc:	add	r7, r1, #4096	; 0x1000
   11200:	vpush	{d8}
   11204:	mov	r6, r0
   11208:	mov	r0, r1
   1120c:	mov	r4, r2
   11210:	bl	11c94 <__assert_fail@plt+0x10f8>
   11214:	ldr	r1, [r7, #3952]	; 0xf70
   11218:	ldr	r0, [r7, #3956]	; 0xf74
   1121c:	ldr	r2, [pc, #332]	; 11370 <__assert_fail@plt+0x7d4>
   11220:	bl	139c0 <error@@Base+0xff4>
   11224:	mov	r2, r4
   11228:	ldr	r1, [pc, #324]	; 11374 <__assert_fail@plt+0x7d8>
   1122c:	mov	r0, r6
   11230:	bl	10b18 <fprintf@plt>
   11234:	mov	r3, r6
   11238:	mov	r2, #26
   1123c:	mov	r1, #1
   11240:	ldr	r0, [pc, #304]	; 11378 <__assert_fail@plt+0x7dc>
   11244:	bl	10a94 <fwrite@plt>
   11248:	mov	r3, r6
   1124c:	mov	r2, #3
   11250:	mov	r1, #1
   11254:	ldr	r0, [pc, #288]	; 1137c <__assert_fail@plt+0x7e0>
   11258:	bl	10a94 <fwrite@plt>
   1125c:	mov	r1, r6
   11260:	mov	r0, #10
   11264:	bl	10b48 <fputc@plt>
   11268:	ldr	r3, [r7, #3956]	; 0xf74
   1126c:	cmp	r3, #0
   11270:	ble	1135c <__assert_fail@plt+0x7c0>
   11274:	vldr	d8, [pc, #236]	; 11368 <__assert_fail@plt+0x7cc>
   11278:	ldr	sl, [pc, #256]	; 11380 <__assert_fail@plt+0x7e4>
   1127c:	ldr	fp, [pc, #256]	; 11384 <__assert_fail@plt+0x7e8>
   11280:	ldr	r9, [pc, #244]	; 1137c <__assert_fail@plt+0x7e0>
   11284:	mov	r4, #0
   11288:	b	112f0 <__assert_fail@plt+0x754>
   1128c:	ldr	r2, [r5, #16]
   11290:	vmov	s15, r3
   11294:	sub	r3, r3, r2
   11298:	vmov	s14, r3
   1129c:	vcvt.f64.s32	d6, s15
   112a0:	vcvt.f64.s32	d7, s14
   112a4:	vmul.f64	d7, d7, d8
   112a8:	vdiv.f64	d5, d7, d6
   112ac:	vmov	r2, r3, d5
   112b0:	bl	10b18 <fprintf@plt>
   112b4:	mov	r3, r6
   112b8:	mov	r2, #3
   112bc:	mov	r1, #1
   112c0:	mov	r0, r9
   112c4:	bl	10a94 <fwrite@plt>
   112c8:	ldr	r3, [r7, #3952]	; 0xf70
   112cc:	ldr	r1, [pc, #180]	; 11388 <__assert_fail@plt+0x7ec>
   112d0:	mov	r0, r6
   112d4:	ldr	r3, [r3, r8]
   112d8:	add	r4, r4, #1
   112dc:	ldr	r2, [r3, #8]
   112e0:	bl	10b18 <fprintf@plt>
   112e4:	ldr	r3, [r7, #3956]	; 0xf74
   112e8:	cmp	r3, r4
   112ec:	ble	1135c <__assert_fail@plt+0x7c0>
   112f0:	ldr	r3, [r7, #3952]	; 0xf70
   112f4:	mov	r1, sl
   112f8:	mov	r0, r6
   112fc:	ldr	r5, [r3, r4, lsl #2]
   11300:	lsl	r8, r4, #2
   11304:	cmn	r5, #12
   11308:	beq	11344 <__assert_fail@plt+0x7a8>
   1130c:	ldr	r3, [r5, #16]
   11310:	ldr	r2, [r5, #12]
   11314:	bl	10b18 <fprintf@plt>
   11318:	ldr	r3, [r5, #12]
   1131c:	mov	r1, fp
   11320:	cmp	r3, #0
   11324:	mov	r0, r6
   11328:	bne	1128c <__assert_fail@plt+0x6f0>
   1132c:	mov	r3, r6
   11330:	mov	r2, #8
   11334:	mov	r1, #1
   11338:	ldr	r0, [pc, #76]	; 1138c <__assert_fail@plt+0x7f0>
   1133c:	bl	10a94 <fwrite@plt>
   11340:	b	112b4 <__assert_fail@plt+0x718>
   11344:	mov	r3, r6
   11348:	mov	r2, #26
   1134c:	mov	r1, #1
   11350:	ldr	r0, [pc, #32]	; 11378 <__assert_fail@plt+0x7dc>
   11354:	bl	10a94 <fwrite@plt>
   11358:	b	112b4 <__assert_fail@plt+0x718>
   1135c:	vpop	{d8}
   11360:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11364:	nop			; (mov r0, r0)
   11368:	andeq	r0, r0, r0
   1136c:	subsmi	r0, r9, r0
   11370:	ldrdeq	r1, [r1], -r8
   11374:			; <UNDEFINED> instruction: 0x00013ab0
   11378:			; <UNDEFINED> instruction: 0x00013ab8
   1137c:	ldrdeq	r3, [r1], -r4
   11380:	ldrdeq	r3, [r1], -r8
   11384:	strdeq	r3, [r1], -r0
   11388:	andeq	r6, r1, r4, lsr #31
   1138c:	andeq	r3, r1, r4, ror #21
   11390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11394:	vpush	{d8}
   11398:	mov	r8, r2
   1139c:	mov	r2, r3
   113a0:	mov	r5, r0
   113a4:	sub	sp, sp, #12
   113a8:	mov	r6, r1
   113ac:	ldrb	r3, [sp, #56]	; 0x38
   113b0:	ldr	r1, [pc, #704]	; 11678 <__assert_fail@plt+0xadc>
   113b4:	mov	r4, r3
   113b8:	str	r3, [sp, #4]
   113bc:	ldrb	r3, [sp, #60]	; 0x3c
   113c0:	str	r3, [sp]
   113c4:	bl	10b18 <fprintf@plt>
   113c8:	mov	r3, r5
   113cc:	mov	r2, #26
   113d0:	mov	r1, #1
   113d4:	ldr	r0, [pc, #672]	; 1167c <__assert_fail@plt+0xae0>
   113d8:	bl	10a94 <fwrite@plt>
   113dc:	mov	r3, r5
   113e0:	mov	r2, #3
   113e4:	mov	r1, #1
   113e8:	ldr	r0, [pc, #656]	; 11680 <__assert_fail@plt+0xae4>
   113ec:	bl	10a94 <fwrite@plt>
   113f0:	cmp	r4, #0
   113f4:	beq	1157c <__assert_fail@plt+0x9e0>
   113f8:	ldr	r2, [pc, #644]	; 11684 <__assert_fail@plt+0xae8>
   113fc:	ldr	r1, [pc, #644]	; 11688 <__assert_fail@plt+0xaec>
   11400:	mov	r0, r5
   11404:	bl	10b18 <fprintf@plt>
   11408:	cmp	r8, #0
   1140c:	ble	114dc <__assert_fail@plt+0x940>
   11410:	vldr	d8, [pc, #600]	; 11670 <__assert_fail@plt+0xad4>
   11414:	ldr	r9, [pc, #624]	; 1168c <__assert_fail@plt+0xaf0>
   11418:	ldr	fp, [pc, #608]	; 11680 <__assert_fail@plt+0xae4>
   1141c:	ldr	sl, [pc, #620]	; 11690 <__assert_fail@plt+0xaf4>
   11420:	mov	r4, #1
   11424:	b	11484 <__assert_fail@plt+0x8e8>
   11428:	ldr	r2, [r7, #4]
   1142c:	vmov	s15, r3
   11430:	sub	r3, r3, r2
   11434:	vmov	s14, r3
   11438:	vcvt.f64.s32	d6, s15
   1143c:	vcvt.f64.s32	d7, s14
   11440:	vmul.f64	d7, d7, d8
   11444:	vdiv.f64	d5, d7, d6
   11448:	vmov	r2, r3, d5
   1144c:	bl	10b18 <fprintf@plt>
   11450:	mov	r2, #3
   11454:	mov	r1, #1
   11458:	mov	r3, r5
   1145c:	mov	r0, fp
   11460:	bl	10a94 <fwrite@plt>
   11464:	mov	r2, r4
   11468:	mov	r1, sl
   1146c:	mov	r0, r5
   11470:	bl	10b18 <fprintf@plt>
   11474:	add	r4, r4, #1
   11478:	sxth	r4, r4
   1147c:	cmp	r8, r4
   11480:	blt	114d0 <__assert_fail@plt+0x934>
   11484:	ldr	r3, [r6, r4, lsl #3]
   11488:	mov	r1, r9
   1148c:	subs	r2, r3, #0
   11490:	mov	r0, r5
   11494:	add	r7, r6, r4, lsl #3
   11498:	ble	11474 <__assert_fail@plt+0x8d8>
   1149c:	ldr	r3, [r7, #4]
   114a0:	bl	10b18 <fprintf@plt>
   114a4:	ldr	r3, [r6, r4, lsl #3]
   114a8:	ldr	r1, [pc, #484]	; 11694 <__assert_fail@plt+0xaf8>
   114ac:	cmp	r3, #0
   114b0:	mov	r0, r5
   114b4:	bne	11428 <__assert_fail@plt+0x88c>
   114b8:	mov	r3, r5
   114bc:	mov	r2, #8
   114c0:	mov	r1, #1
   114c4:	ldr	r0, [pc, #460]	; 11698 <__assert_fail@plt+0xafc>
   114c8:	bl	10a94 <fwrite@plt>
   114cc:	b	11450 <__assert_fail@plt+0x8b4>
   114d0:	ldr	r3, [sp, #4]
   114d4:	cmp	r3, #0
   114d8:	beq	11564 <__assert_fail@plt+0x9c8>
   114dc:	add	r4, r8, #1
   114e0:	ldr	r2, [r6, r4, lsl #3]
   114e4:	add	r7, r6, r4, lsl #3
   114e8:	cmp	r2, #0
   114ec:	ble	11564 <__assert_fail@plt+0x9c8>
   114f0:	ldr	r3, [r7, #4]
   114f4:	ldr	r1, [pc, #400]	; 1168c <__assert_fail@plt+0xaf0>
   114f8:	mov	r0, r5
   114fc:	bl	10b18 <fprintf@plt>
   11500:	ldr	r2, [r6, r4, lsl #3]
   11504:	cmp	r2, #0
   11508:	beq	1163c <__assert_fail@plt+0xaa0>
   1150c:	ldr	r3, [r7, #4]
   11510:	vmov	s15, r2
   11514:	sub	r3, r2, r3
   11518:	vldr	d5, [pc, #336]	; 11670 <__assert_fail@plt+0xad4>
   1151c:	vmov	s14, r3
   11520:	vcvt.f64.s32	d6, s15
   11524:	ldr	r1, [pc, #360]	; 11694 <__assert_fail@plt+0xaf8>
   11528:	mov	r0, r5
   1152c:	vcvt.f64.s32	d7, s14
   11530:	vmul.f64	d7, d7, d5
   11534:	vdiv.f64	d5, d7, d6
   11538:	vmov	r2, r3, d5
   1153c:	bl	10b18 <fprintf@plt>
   11540:	mov	r2, #3
   11544:	mov	r1, #1
   11548:	mov	r3, r5
   1154c:	ldr	r0, [pc, #300]	; 11680 <__assert_fail@plt+0xae4>
   11550:	bl	10a94 <fwrite@plt>
   11554:	mov	r2, r8
   11558:	ldr	r1, [pc, #316]	; 1169c <__assert_fail@plt+0xb00>
   1155c:	mov	r0, r5
   11560:	bl	10b18 <fprintf@plt>
   11564:	ldr	r3, [sp]
   11568:	cmp	r3, #0
   1156c:	bne	11598 <__assert_fail@plt+0x9fc>
   11570:	add	sp, sp, #12
   11574:	vpop	{d8}
   11578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1157c:	ldr	r2, [pc, #284]	; 116a0 <__assert_fail@plt+0xb04>
   11580:	ldr	r1, [pc, #256]	; 11688 <__assert_fail@plt+0xaec>
   11584:	mov	r0, r5
   11588:	bl	10b18 <fprintf@plt>
   1158c:	cmp	r8, #0
   11590:	bgt	11410 <__assert_fail@plt+0x874>
   11594:	b	11564 <__assert_fail@plt+0x9c8>
   11598:	cmp	r6, #0
   1159c:	beq	11654 <__assert_fail@plt+0xab8>
   115a0:	ldm	r6, {r2, r3}
   115a4:	ldr	r1, [pc, #224]	; 1168c <__assert_fail@plt+0xaf0>
   115a8:	mov	r0, r5
   115ac:	bl	10b18 <fprintf@plt>
   115b0:	ldr	r2, [r6]
   115b4:	cmp	r2, #0
   115b8:	beq	11624 <__assert_fail@plt+0xa88>
   115bc:	ldr	r3, [r6, #4]
   115c0:	vmov	s15, r2
   115c4:	sub	r3, r2, r3
   115c8:	vldr	d5, [pc, #160]	; 11670 <__assert_fail@plt+0xad4>
   115cc:	vmov	s14, r3
   115d0:	vcvt.f64.s32	d6, s15
   115d4:	ldr	r1, [pc, #184]	; 11694 <__assert_fail@plt+0xaf8>
   115d8:	mov	r0, r5
   115dc:	vcvt.f64.s32	d7, s14
   115e0:	vmul.f64	d7, d7, d5
   115e4:	vdiv.f64	d5, d7, d6
   115e8:	vmov	r2, r3, d5
   115ec:	bl	10b18 <fprintf@plt>
   115f0:	mov	r3, r5
   115f4:	mov	r2, #3
   115f8:	mov	r1, #1
   115fc:	ldr	r0, [pc, #124]	; 11680 <__assert_fail@plt+0xae4>
   11600:	bl	10a94 <fwrite@plt>
   11604:	mov	r3, r5
   11608:	mov	r2, #7
   1160c:	mov	r1, #1
   11610:	ldr	r0, [pc, #140]	; 116a4 <__assert_fail@plt+0xb08>
   11614:	add	sp, sp, #12
   11618:	vpop	{d8}
   1161c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11620:	b	10a94 <fwrite@plt>
   11624:	mov	r3, r5
   11628:	mov	r2, #8
   1162c:	mov	r1, #1
   11630:	ldr	r0, [pc, #96]	; 11698 <__assert_fail@plt+0xafc>
   11634:	bl	10a94 <fwrite@plt>
   11638:	b	115f0 <__assert_fail@plt+0xa54>
   1163c:	mov	r3, r5
   11640:	mov	r2, #8
   11644:	mov	r1, #1
   11648:	ldr	r0, [pc, #72]	; 11698 <__assert_fail@plt+0xafc>
   1164c:	bl	10a94 <fwrite@plt>
   11650:	b	11540 <__assert_fail@plt+0x9a4>
   11654:	mov	r3, r5
   11658:	mov	r2, #26
   1165c:	mov	r1, #1
   11660:	ldr	r0, [pc, #20]	; 1167c <__assert_fail@plt+0xae0>
   11664:	bl	10a94 <fwrite@plt>
   11668:	b	115f0 <__assert_fail@plt+0xa54>
   1166c:	nop			; (mov r0, r0)
   11670:	andeq	r0, r0, r0
   11674:	subsmi	r0, r9, r0
   11678:			; <UNDEFINED> instruction: 0x00013ab0
   1167c:			; <UNDEFINED> instruction: 0x00013ab8
   11680:	ldrdeq	r3, [r1], -r4
   11684:	andeq	r3, r1, r8, lsl fp
   11688:	andeq	r6, r1, r4, lsr #31
   1168c:	ldrdeq	r3, [r1], -r8
   11690:	strdeq	r3, [r1], -r8
   11694:	strdeq	r3, [r1], -r0
   11698:	andeq	r3, r1, r4, ror #21
   1169c:	andeq	r3, r1, r4, lsl #22
   116a0:	andeq	r3, r1, r0, lsl fp
   116a4:	andeq	r3, r1, r0, lsr #21
   116a8:	ldr	ip, [r0]
   116ac:	ldr	r3, [r0, #4]
   116b0:	add	r1, ip, r1
   116b4:	add	r2, r3, r2
   116b8:	stm	r0, {r1, r2}
   116bc:	bx	lr
   116c0:	push	{r4, r5, r6, r7, r8, lr}
   116c4:	mov	r6, r2
   116c8:	mov	r5, r3
   116cc:	mov	r7, r0
   116d0:	mov	r8, r1
   116d4:	bl	11b08 <__assert_fail@plt+0xf6c>
   116d8:	subs	r4, r0, #0
   116dc:	beq	116fc <__assert_fail@plt+0xb60>
   116e0:	ldr	r0, [r4, #12]
   116e4:	ldr	r1, [r4, #16]
   116e8:	add	r2, r0, r6
   116ec:	add	r3, r1, r5
   116f0:	str	r2, [r4, #12]
   116f4:	str	r3, [r4, #16]
   116f8:	pop	{r4, r5, r6, r7, r8, pc}
   116fc:	mov	r1, #20
   11700:	mov	r0, #1
   11704:	bl	12a08 <error@@Base+0x3c>
   11708:	mov	r4, r0
   1170c:	mov	r0, r8
   11710:	bl	10a58 <strdup@plt>
   11714:	mov	r1, r4
   11718:	str	r0, [r4, #8]
   1171c:	mov	r0, r7
   11720:	bl	11b8c <__assert_fail@plt+0xff0>
   11724:	b	116e0 <__assert_fail@plt+0xb44>
   11728:	push	{r4, r5, r6, r7, lr}
   1172c:	mov	r6, r1
   11730:	sub	sp, sp, #12
   11734:	ldr	r1, [pc, #428]	; 118e8 <__assert_fail@plt+0xd4c>
   11738:	mov	r5, r0
   1173c:	mov	r0, r6
   11740:	bl	12a9c <error@@Base+0xd0>
   11744:	mov	r1, #99	; 0x63
   11748:	mov	r2, r0
   1174c:	mov	r4, r0
   11750:	ldr	r0, [pc, #404]	; 118ec <__assert_fail@plt+0xd50>
   11754:	bl	10a40 <fgets@plt>
   11758:	cmp	r0, #0
   1175c:	beq	117d4 <__assert_fail@plt+0xc38>
   11760:	mov	r2, #45	; 0x2d
   11764:	ldr	r1, [pc, #388]	; 118f0 <__assert_fail@plt+0xd54>
   11768:	ldr	r0, [pc, #380]	; 118ec <__assert_fail@plt+0xd50>
   1176c:	bl	10b78 <strncmp@plt>
   11770:	cmp	r0, #0
   11774:	bne	117d4 <__assert_fail@plt+0xc38>
   11778:	mov	r2, r4
   1177c:	mov	r1, #99	; 0x63
   11780:	ldr	r0, [pc, #356]	; 118ec <__assert_fail@plt+0xd50>
   11784:	bl	10a40 <fgets@plt>
   11788:	cmp	r0, #0
   1178c:	beq	117d4 <__assert_fail@plt+0xc38>
   11790:	ldr	r1, [pc, #348]	; 118f4 <__assert_fail@plt+0xd58>
   11794:	ldr	r0, [pc, #336]	; 118ec <__assert_fail@plt+0xd50>
   11798:	bl	109f8 <strcmp@plt>
   1179c:	cmp	r0, #0
   117a0:	bne	117d4 <__assert_fail@plt+0xc38>
   117a4:	mov	r2, r4
   117a8:	mov	r1, #99	; 0x63
   117ac:	ldr	r0, [pc, #312]	; 118ec <__assert_fail@plt+0xd50>
   117b0:	bl	10a40 <fgets@plt>
   117b4:	cmp	r0, #0
   117b8:	beq	117d4 <__assert_fail@plt+0xc38>
   117bc:	mov	r2, sp
   117c0:	ldr	r1, [pc, #304]	; 118f8 <__assert_fail@plt+0xd5c>
   117c4:	ldr	r0, [pc, #288]	; 118ec <__assert_fail@plt+0xd50>
   117c8:	bl	10b24 <__isoc99_sscanf@plt>
   117cc:	cmp	r0, #1
   117d0:	beq	117e8 <__assert_fail@plt+0xc4c>
   117d4:	cmp	r6, #0
   117d8:	ldr	r1, [pc, #284]	; 118fc <__assert_fail@plt+0xd60>
   117dc:	ldr	r0, [pc, #284]	; 11900 <__assert_fail@plt+0xd64>
   117e0:	movne	r1, r6
   117e4:	bl	12a54 <error@@Base+0x88>
   117e8:	mov	r2, r4
   117ec:	mov	r1, #99	; 0x63
   117f0:	ldr	r0, [pc, #244]	; 118ec <__assert_fail@plt+0xd50>
   117f4:	bl	10a40 <fgets@plt>
   117f8:	cmp	r0, #0
   117fc:	beq	117d4 <__assert_fail@plt+0xc38>
   11800:	add	r2, sp, #4
   11804:	ldr	r1, [pc, #236]	; 118f8 <__assert_fail@plt+0xd5c>
   11808:	ldr	r0, [pc, #220]	; 118ec <__assert_fail@plt+0xd50>
   1180c:	bl	10b24 <__isoc99_sscanf@plt>
   11810:	cmp	r0, #1
   11814:	bne	117d4 <__assert_fail@plt+0xc38>
   11818:	mov	r2, r4
   1181c:	mov	r1, #99	; 0x63
   11820:	ldr	r0, [pc, #196]	; 118ec <__assert_fail@plt+0xd50>
   11824:	bl	10a40 <fgets@plt>
   11828:	cmp	r0, #0
   1182c:	beq	117d4 <__assert_fail@plt+0xc38>
   11830:	mov	r2, r4
   11834:	mov	r1, #99	; 0x63
   11838:	ldr	r0, [pc, #172]	; 118ec <__assert_fail@plt+0xd50>
   1183c:	bl	10a40 <fgets@plt>
   11840:	cmp	r0, #0
   11844:	beq	117d4 <__assert_fail@plt+0xc38>
   11848:	ldr	r0, [sp, #4]
   1184c:	ldr	r2, [r5, #4]
   11850:	ldr	r3, [r5]
   11854:	ldr	r1, [sp]
   11858:	add	r2, r2, r0
   1185c:	add	r3, r3, r1
   11860:	str	r3, [r5]
   11864:	str	r2, [r5, #4]
   11868:	add	r1, r5, #8
   1186c:	mov	r0, r4
   11870:	bl	10fb8 <__assert_fail@plt+0x41c>
   11874:	add	r1, r5, #416	; 0x1a0
   11878:	mov	r7, r0
   1187c:	mov	r0, r4
   11880:	bl	10fb8 <__assert_fail@plt+0x41c>
   11884:	add	r1, r5, #824	; 0x338
   11888:	mov	r6, r0
   1188c:	mov	r0, r4
   11890:	bl	10fb8 <__assert_fail@plt+0x41c>
   11894:	ldr	r3, [sp]
   11898:	cmp	r3, #0
   1189c:	ble	118d8 <__assert_fail@plt+0xd3c>
   118a0:	add	r1, r5, #920	; 0x398
   118a4:	mov	r0, r4
   118a8:	bl	10fb8 <__assert_fail@plt+0x41c>
   118ac:	cmp	r7, #0
   118b0:	ble	118c0 <__assert_fail@plt+0xd24>
   118b4:	add	r1, r5, #992	; 0x3e0
   118b8:	mov	r0, r4
   118bc:	bl	110e4 <__assert_fail@plt+0x548>
   118c0:	cmp	r6, #0
   118c4:	ble	118d8 <__assert_fail@plt+0xd3c>
   118c8:	add	r1, r5, #9024	; 0x2340
   118cc:	add	r1, r1, #24
   118d0:	mov	r0, r4
   118d4:	bl	110e4 <__assert_fail@plt+0x548>
   118d8:	mov	r0, r4
   118dc:	bl	12870 <__assert_fail@plt+0x1cd4>
   118e0:	add	sp, sp, #12
   118e4:	pop	{r4, r5, r6, r7, pc}
   118e8:	andeq	r3, r1, r8, lsr #22
   118ec:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   118f0:	andeq	r3, r1, ip, lsr #22
   118f4:	muleq	r1, r8, r0
   118f8:	andeq	r3, r1, ip, lsr #21
   118fc:	andeq	r3, r1, r0, lsr #22
   11900:	andeq	r3, r1, ip, asr fp
   11904:	mov	r3, r1
   11908:	push	{r4, r5, r6, r7, lr}
   1190c:	mov	r4, r0
   11910:	sub	sp, sp, #12
   11914:	ldr	r1, [pc, #380]	; 11a98 <__assert_fail@plt+0xefc>
   11918:	mov	r0, r3
   1191c:	bl	12a9c <error@@Base+0xd0>
   11920:	ldr	r3, [pc, #372]	; 11a9c <__assert_fail@plt+0xf00>
   11924:	ldr	r2, [pc, #372]	; 11aa0 <__assert_fail@plt+0xf04>
   11928:	ldr	r1, [pc, #372]	; 11aa4 <__assert_fail@plt+0xf08>
   1192c:	mov	r5, r0
   11930:	bl	10b18 <fprintf@plt>
   11934:	ldr	r2, [r4]
   11938:	ldr	r1, [pc, #360]	; 11aa8 <__assert_fail@plt+0xf0c>
   1193c:	mov	r0, r5
   11940:	bl	10b18 <fprintf@plt>
   11944:	ldr	r2, [r4, #4]
   11948:	mov	r0, r5
   1194c:	ldr	r1, [pc, #344]	; 11aac <__assert_fail@plt+0xf10>
   11950:	bl	10b18 <fprintf@plt>
   11954:	ldr	r2, [r4]
   11958:	cmp	r2, #0
   1195c:	beq	11a78 <__assert_fail@plt+0xedc>
   11960:	ldr	r3, [r4, #4]
   11964:	vmov	s15, r2
   11968:	sub	r3, r2, r3
   1196c:	vldr	d5, [pc, #284]	; 11a90 <__assert_fail@plt+0xef4>
   11970:	vmov	s14, r3
   11974:	vcvt.f64.s32	d6, s15
   11978:	ldr	r1, [pc, #304]	; 11ab0 <__assert_fail@plt+0xf14>
   1197c:	mov	r0, r5
   11980:	vcvt.f64.s32	d7, s14
   11984:	vmul.f64	d7, d7, d5
   11988:	vdiv.f64	d5, d7, d6
   1198c:	vmov	r2, r3, d5
   11990:	bl	10b18 <fprintf@plt>
   11994:	mov	r1, #1
   11998:	mov	r6, r1
   1199c:	mov	r7, #0
   119a0:	mov	r3, r5
   119a4:	mov	r2, #12
   119a8:	ldr	r0, [pc, #260]	; 11ab4 <__assert_fail@plt+0xf18>
   119ac:	bl	10a94 <fwrite@plt>
   119b0:	ldr	r3, [pc, #256]	; 11ab8 <__assert_fail@plt+0xf1c>
   119b4:	mov	r2, #50	; 0x32
   119b8:	add	r1, r4, #8
   119bc:	mov	r0, r5
   119c0:	str	r6, [sp, #4]
   119c4:	str	r7, [sp]
   119c8:	bl	11390 <__assert_fail@plt+0x7f4>
   119cc:	ldr	r3, [pc, #232]	; 11abc <__assert_fail@plt+0xf20>
   119d0:	mov	r2, #50	; 0x32
   119d4:	add	r1, r4, #416	; 0x1a0
   119d8:	mov	r0, r5
   119dc:	str	r6, [sp, #4]
   119e0:	str	r7, [sp]
   119e4:	bl	11390 <__assert_fail@plt+0x7f4>
   119e8:	ldr	r3, [pc, #208]	; 11ac0 <__assert_fail@plt+0xf24>
   119ec:	str	r6, [sp, #4]
   119f0:	str	r6, [sp]
   119f4:	mov	r2, #10
   119f8:	add	r1, r4, #824	; 0x338
   119fc:	mov	r0, r5
   11a00:	bl	11390 <__assert_fail@plt+0x7f4>
   11a04:	ldr	r3, [r4]
   11a08:	cmp	r3, r7
   11a0c:	ble	11a68 <__assert_fail@plt+0xecc>
   11a10:	ldr	r3, [pc, #172]	; 11ac4 <__assert_fail@plt+0xf28>
   11a14:	str	r7, [sp, #4]
   11a18:	str	r7, [sp]
   11a1c:	mov	r2, #8
   11a20:	add	r1, r4, #920	; 0x398
   11a24:	mov	r0, r5
   11a28:	bl	11390 <__assert_fail@plt+0x7f4>
   11a2c:	ldr	r3, [r4, #8]
   11a30:	cmp	r3, r7
   11a34:	ble	11a48 <__assert_fail@plt+0xeac>
   11a38:	ldr	r2, [pc, #120]	; 11ab8 <__assert_fail@plt+0xf1c>
   11a3c:	add	r1, r4, #992	; 0x3e0
   11a40:	mov	r0, r5
   11a44:	bl	111f8 <__assert_fail@plt+0x65c>
   11a48:	ldr	r3, [r4, #416]	; 0x1a0
   11a4c:	cmp	r3, #0
   11a50:	ble	11a68 <__assert_fail@plt+0xecc>
   11a54:	add	r1, r4, #9024	; 0x2340
   11a58:	add	r1, r1, #24
   11a5c:	ldr	r2, [pc, #88]	; 11abc <__assert_fail@plt+0xf20>
   11a60:	mov	r0, r5
   11a64:	bl	111f8 <__assert_fail@plt+0x65c>
   11a68:	mov	r0, r5
   11a6c:	add	sp, sp, #12
   11a70:	pop	{r4, r5, r6, r7, lr}
   11a74:	b	12870 <__assert_fail@plt+0x1cd4>
   11a78:	mov	r3, r5
   11a7c:	mov	r2, #8
   11a80:	mov	r1, #1
   11a84:	ldr	r0, [pc, #60]	; 11ac8 <__assert_fail@plt+0xf2c>
   11a88:	bl	10a94 <fwrite@plt>
   11a8c:	b	11994 <__assert_fail@plt+0xdf8>
   11a90:	andeq	r0, r0, r0
   11a94:	subsmi	r0, r9, r0
   11a98:	andeq	r3, r1, r0, ror fp
   11a9c:	muleq	r1, r8, r0
   11aa0:	andeq	r3, r1, ip, lsr #22
   11aa4:	andeq	r3, r1, r4, ror fp
   11aa8:	andeq	r3, r1, ip, ror fp
   11aac:	andeq	r3, r1, ip, lsl #23
   11ab0:	strdeq	r3, [r1], -r0
   11ab4:	andeq	r3, r1, r4, lsr #23
   11ab8:			; <UNDEFINED> instruction: 0x00013bb4
   11abc:	andeq	r3, r1, r0, asr #23
   11ac0:	ldrdeq	r3, [r1], -r0
   11ac4:	andeq	r3, r1, r8, ror #23
   11ac8:	andeq	r3, r1, r4, ror #21
   11acc:	push	{r4, r5, r6, lr}
   11ad0:	add	r5, r0, #8000	; 0x1f40
   11ad4:	mov	r6, r0
   11ad8:	add	r5, r5, #48	; 0x30
   11adc:	mov	r4, r0
   11ae0:	mov	r0, r4
   11ae4:	add	r4, r4, #16
   11ae8:	bl	135d0 <error@@Base+0xc04>
   11aec:	cmp	r5, r4
   11af0:	bne	11ae0 <__assert_fail@plt+0xf44>
   11af4:	add	r6, r6, #4096	; 0x1000
   11af8:	mov	r3, #0
   11afc:	str	r3, [r6, #3952]	; 0xf70
   11b00:	str	r3, [r6, #3956]	; 0xf74
   11b04:	pop	{r4, r5, r6, pc}
   11b08:	push	{r4, r5, r6, lr}
   11b0c:	mov	r5, r1
   11b10:	ldrb	r3, [r1]
   11b14:	cmp	r3, #0
   11b18:	beq	11b50 <__assert_fail@plt+0xfb4>
   11b1c:	mov	r2, #0
   11b20:	add	r2, r2, r3
   11b24:	ldrb	r3, [r1, #1]!
   11b28:	cmp	r3, #0
   11b2c:	bne	11b20 <__assert_fail@plt+0xf84>
   11b30:	ldr	r1, [pc, #80]	; 11b88 <__assert_fail@plt+0xfec>
   11b34:	asr	r3, r2, #31
   11b38:	smull	ip, r1, r1, r2
   11b3c:	add	r1, r1, r2
   11b40:	rsb	r3, r3, r1, asr #8
   11b44:	rsb	r1, r3, r3, lsl #6
   11b48:	rsb	r3, r3, r1, lsl #3
   11b4c:	sub	r3, r2, r3
   11b50:	ldr	r4, [r0, r3, lsl #4]
   11b54:	cmp	r4, #0
   11b58:	bne	11b6c <__assert_fail@plt+0xfd0>
   11b5c:	b	11b80 <__assert_fail@plt+0xfe4>
   11b60:	ldr	r4, [r4, #4]
   11b64:	cmp	r4, #0
   11b68:	beq	11b80 <__assert_fail@plt+0xfe4>
   11b6c:	ldr	r1, [r4, #8]
   11b70:	mov	r0, r5
   11b74:	bl	109f8 <strcmp@plt>
   11b78:	cmp	r0, #0
   11b7c:	bne	11b60 <__assert_fail@plt+0xfc4>
   11b80:	mov	r0, r4
   11b84:	pop	{r4, r5, r6, pc}
   11b88:	subhi	r4, sl, #1552	; 0x610
   11b8c:	ldr	ip, [r1, #8]
   11b90:	push	{r4, lr}
   11b94:	ldrb	r3, [ip]
   11b98:	cmp	r3, #0
   11b9c:	beq	11bd8 <__assert_fail@plt+0x103c>
   11ba0:	mov	r2, #0
   11ba4:	add	r2, r2, r3
   11ba8:	ldrb	r3, [ip, #1]!
   11bac:	cmp	r3, #0
   11bb0:	bne	11ba4 <__assert_fail@plt+0x1008>
   11bb4:	ldr	ip, [pc, #80]	; 11c0c <__assert_fail@plt+0x1070>
   11bb8:	asr	r3, r2, #31
   11bbc:	smull	lr, ip, ip, r2
   11bc0:	add	ip, ip, r2
   11bc4:	rsb	r3, r3, ip, asr #8
   11bc8:	rsb	ip, r3, r3, lsl #6
   11bcc:	rsb	r3, r3, ip, lsl #3
   11bd0:	sub	r3, r2, r3
   11bd4:	lsl	r3, r3, #4
   11bd8:	add	r4, r0, #4096	; 0x1000
   11bdc:	add	r0, r0, r3
   11be0:	bl	135e8 <error@@Base+0xc1c>
   11be4:	ldr	r0, [r4, #3952]	; 0xf70
   11be8:	cmp	r0, #0
   11bec:	beq	11bfc <__assert_fail@plt+0x1060>
   11bf0:	bl	10a28 <free@plt>
   11bf4:	mov	r3, #0
   11bf8:	str	r3, [r4, #3952]	; 0xf70
   11bfc:	ldr	r3, [r4, #3956]	; 0xf74
   11c00:	add	r3, r3, #1
   11c04:	str	r3, [r4, #3956]	; 0xf74
   11c08:	pop	{r4, pc}
   11c0c:	subhi	r4, sl, #1552	; 0x610
   11c10:	ldr	ip, [r1, #8]
   11c14:	push	{r4, lr}
   11c18:	ldrb	r3, [ip]
   11c1c:	cmp	r3, #0
   11c20:	beq	11c5c <__assert_fail@plt+0x10c0>
   11c24:	mov	r2, #0
   11c28:	add	r2, r2, r3
   11c2c:	ldrb	r3, [ip, #1]!
   11c30:	cmp	r3, #0
   11c34:	bne	11c28 <__assert_fail@plt+0x108c>
   11c38:	ldr	ip, [pc, #80]	; 11c90 <__assert_fail@plt+0x10f4>
   11c3c:	asr	r3, r2, #31
   11c40:	smull	lr, ip, ip, r2
   11c44:	add	ip, ip, r2
   11c48:	rsb	r3, r3, ip, asr #8
   11c4c:	rsb	ip, r3, r3, lsl #6
   11c50:	rsb	r3, r3, ip, lsl #3
   11c54:	sub	r3, r2, r3
   11c58:	lsl	r3, r3, #4
   11c5c:	add	r4, r0, #4096	; 0x1000
   11c60:	add	r0, r0, r3
   11c64:	bl	13718 <error@@Base+0xd4c>
   11c68:	ldr	r0, [r4, #3952]	; 0xf70
   11c6c:	cmp	r0, #0
   11c70:	beq	11c80 <__assert_fail@plt+0x10e4>
   11c74:	bl	10a28 <free@plt>
   11c78:	mov	r3, #0
   11c7c:	str	r3, [r4, #3952]	; 0xf70
   11c80:	ldr	r3, [r4, #3956]	; 0xf74
   11c84:	sub	r3, r3, #1
   11c88:	str	r3, [r4, #3956]	; 0xf74
   11c8c:	pop	{r4, pc}
   11c90:	subhi	r4, sl, #1552	; 0x610
   11c94:	push	{r4, r5, r6, lr}
   11c98:	add	r6, r0, #4096	; 0x1000
   11c9c:	ldr	r4, [r6, #3952]	; 0xf70
   11ca0:	cmp	r4, #0
   11ca4:	popne	{r4, r5, r6, pc}
   11ca8:	ldr	r3, [r6, #3956]	; 0xf74
   11cac:	cmp	r3, #0
   11cb0:	popeq	{r4, r5, r6, pc}
   11cb4:	mov	r5, r0
   11cb8:	mov	r1, #4
   11cbc:	mov	r0, r3
   11cc0:	bl	12a08 <error@@Base+0x3c>
   11cc4:	ldr	lr, [pc, #60]	; 11d08 <__assert_fail@plt+0x116c>
   11cc8:	mov	r2, r4
   11ccc:	mov	ip, r4
   11cd0:	str	r0, [r6, #3952]	; 0xf70
   11cd4:	ldr	r3, [r5, ip, lsl #4]
   11cd8:	cmp	r3, #0
   11cdc:	beq	11cf8 <__assert_fail@plt+0x115c>
   11ce0:	add	r1, r0, r2, lsl #2
   11ce4:	str	r3, [r1], #4
   11ce8:	ldr	r3, [r3, #4]
   11cec:	add	r2, r2, #1
   11cf0:	cmp	r3, #0
   11cf4:	bne	11ce4 <__assert_fail@plt+0x1148>
   11cf8:	add	ip, ip, #1
   11cfc:	cmp	ip, lr
   11d00:	bne	11cd4 <__assert_fail@plt+0x1138>
   11d04:	pop	{r4, r5, r6, pc}
   11d08:	strdeq	r0, [r0], -r7
   11d0c:	push	{r4, r5, r6, r7, r8, lr}
   11d10:	add	r5, r0, #8000	; 0x1f40
   11d14:	mov	r7, r0
   11d18:	mov	r6, r1
   11d1c:	add	r5, r5, #48	; 0x30
   11d20:	mov	r4, r0
   11d24:	mov	r0, r4
   11d28:	mov	r1, r6
   11d2c:	add	r4, r4, #16
   11d30:	bl	137c8 <error@@Base+0xdfc>
   11d34:	cmp	r5, r4
   11d38:	bne	11d24 <__assert_fail@plt+0x1188>
   11d3c:	add	r7, r7, #4096	; 0x1000
   11d40:	ldr	r0, [r7, #3952]	; 0xf70
   11d44:	cmp	r0, #0
   11d48:	beq	11d58 <__assert_fail@plt+0x11bc>
   11d4c:	bl	10a28 <free@plt>
   11d50:	mov	r3, #0
   11d54:	str	r3, [r7, #3952]	; 0xf70
   11d58:	mov	r3, #0
   11d5c:	str	r3, [r7, #3956]	; 0xf74
   11d60:	pop	{r4, r5, r6, r7, r8, pc}
   11d64:	ldr	r3, [r1]
   11d68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d6c:	sub	sp, sp, #44	; 0x2c
   11d70:	cmp	r3, #0
   11d74:	str	r3, [sp, #12]
   11d78:	str	r3, [sp, #28]
   11d7c:	beq	12158 <__assert_fail@plt+0x15bc>
   11d80:	ldr	r9, [pc, #2420]	; 126fc <__assert_fail@plt+0x1b60>
   11d84:	ldr	fp, [pc, #2420]	; 12700 <__assert_fail@plt+0x1b64>
   11d88:	ldr	r4, [pc, #2420]	; 12704 <__assert_fail@plt+0x1b68>
   11d8c:	mov	sl, #0
   11d90:	str	r0, [sp, #20]
   11d94:	mov	r7, #17
   11d98:	mov	r8, r3
   11d9c:	ldr	r1, [r8, #12]
   11da0:	mov	r3, r9
   11da4:	mov	r0, sl
   11da8:	mov	ip, fp
   11dac:	ldr	r2, [pc, #2380]	; 12700 <__assert_fail@plt+0x1b64>
   11db0:	b	11dc8 <__assert_fail@plt+0x122c>
   11db4:	sub	r2, ip, r0
   11db8:	add	r3, r0, r2, lsr #1
   11dbc:	add	r3, r3, r3, lsl #1
   11dc0:	add	r3, r4, r3, lsl #2
   11dc4:	ldr	r3, [r3, #40]	; 0x28
   11dc8:	cmp	r1, r3
   11dcc:	add	r3, r0, r2, lsr #1
   11dd0:	subcc	ip, r3, #1
   11dd4:	bcc	11df0 <__assert_fail@plt+0x1254>
   11dd8:	add	r2, r3, r3, lsl #1
   11ddc:	add	r2, r4, r2, lsl #2
   11de0:	ldr	r0, [r2, #44]	; 0x2c
   11de4:	cmp	r1, r0
   11de8:	bls	12180 <__assert_fail@plt+0x15e4>
   11dec:	add	r0, r3, #1
   11df0:	cmp	ip, r0
   11df4:	bcs	11db4 <__assert_fail@plt+0x1218>
   11df8:	mov	r3, r9
   11dfc:	mov	r0, sl
   11e00:	mov	ip, fp
   11e04:	mov	r2, fp
   11e08:	b	11e20 <__assert_fail@plt+0x1284>
   11e0c:	sub	r2, ip, r0
   11e10:	add	r3, r0, r2, lsr #1
   11e14:	add	r3, r3, r3, lsl #1
   11e18:	add	r3, r4, r3, lsl #2
   11e1c:	ldr	r3, [r3, #40]	; 0x28
   11e20:	cmp	r1, r3
   11e24:	add	r3, r0, r2, lsr #1
   11e28:	subcc	ip, r3, #1
   11e2c:	bcc	11e48 <__assert_fail@plt+0x12ac>
   11e30:	add	r2, r3, r3, lsl #1
   11e34:	add	r2, r4, r2, lsl #2
   11e38:	ldr	r0, [r2, #44]	; 0x2c
   11e3c:	cmp	r1, r0
   11e40:	bls	1224c <__assert_fail@plt+0x16b0>
   11e44:	add	r0, r3, #1
   11e48:	cmp	ip, r0
   11e4c:	bcs	11e0c <__assert_fail@plt+0x1270>
   11e50:	mov	r3, r9
   11e54:	mov	r0, sl
   11e58:	mov	ip, fp
   11e5c:	mov	r2, fp
   11e60:	b	11e78 <__assert_fail@plt+0x12dc>
   11e64:	sub	r2, ip, r0
   11e68:	add	r3, r0, r2, lsr #1
   11e6c:	add	r3, r3, r3, lsl #1
   11e70:	add	r3, r4, r3, lsl #2
   11e74:	ldr	r3, [r3, #40]	; 0x28
   11e78:	cmp	r3, r1
   11e7c:	add	r2, r0, r2, lsr #1
   11e80:	subhi	ip, r2, #1
   11e84:	bhi	11ea0 <__assert_fail@plt+0x1304>
   11e88:	add	r3, r2, r2, lsl #1
   11e8c:	add	r3, r4, r3, lsl #2
   11e90:	ldr	r0, [r3, #44]	; 0x2c
   11e94:	cmp	r0, r1
   11e98:	bcs	12288 <__assert_fail@plt+0x16ec>
   11e9c:	add	r0, r2, #1
   11ea0:	cmp	ip, r0
   11ea4:	bcs	11e64 <__assert_fail@plt+0x12c8>
   11ea8:	mov	r6, #0
   11eac:	str	sl, [sp, #8]
   11eb0:	mov	lr, r8
   11eb4:	ldr	lr, [lr, #4]
   11eb8:	cmp	lr, #0
   11ebc:	beq	121a0 <__assert_fail@plt+0x1604>
   11ec0:	ldr	r0, [lr, #12]
   11ec4:	mov	r3, r9
   11ec8:	mov	r1, sl
   11ecc:	mov	ip, fp
   11ed0:	ldr	r2, [pc, #2088]	; 12700 <__assert_fail@plt+0x1b64>
   11ed4:	b	11eec <__assert_fail@plt+0x1350>
   11ed8:	sub	r2, ip, r1
   11edc:	add	r3, r1, r2, lsr #1
   11ee0:	add	r3, r3, r3, lsl #1
   11ee4:	add	r3, r4, r3, lsl #2
   11ee8:	ldr	r3, [r3, #40]	; 0x28
   11eec:	cmp	r0, r3
   11ef0:	add	r2, r1, r2, lsr #1
   11ef4:	subcc	ip, r2, #1
   11ef8:	bcc	11f14 <__assert_fail@plt+0x1378>
   11efc:	add	r3, r2, r2, lsl #1
   11f00:	add	r3, r4, r3, lsl #2
   11f04:	ldr	r1, [r3, #44]	; 0x2c
   11f08:	cmp	r0, r1
   11f0c:	bls	1221c <__assert_fail@plt+0x1680>
   11f10:	add	r1, r2, #1
   11f14:	cmp	r1, ip
   11f18:	bls	11ed8 <__assert_fail@plt+0x133c>
   11f1c:	mov	r3, r9
   11f20:	mov	r1, sl
   11f24:	mov	ip, fp
   11f28:	mov	r2, fp
   11f2c:	b	11f44 <__assert_fail@plt+0x13a8>
   11f30:	sub	r2, ip, r1
   11f34:	add	r3, r1, r2, lsr #1
   11f38:	add	r3, r3, r3, lsl #1
   11f3c:	add	r3, r4, r3, lsl #2
   11f40:	ldr	r3, [r3, #40]	; 0x28
   11f44:	cmp	r0, r3
   11f48:	add	r2, r1, r2, lsr #1
   11f4c:	subcc	ip, r2, #1
   11f50:	bcc	11f6c <__assert_fail@plt+0x13d0>
   11f54:	add	r3, r2, r2, lsl #1
   11f58:	add	r3, r4, r3, lsl #2
   11f5c:	ldr	r1, [r3, #44]	; 0x2c
   11f60:	cmp	r0, r1
   11f64:	bls	1223c <__assert_fail@plt+0x16a0>
   11f68:	add	r1, r2, #1
   11f6c:	cmp	r1, ip
   11f70:	bls	11f30 <__assert_fail@plt+0x1394>
   11f74:	mov	r3, r9
   11f78:	mov	r1, sl
   11f7c:	mov	ip, fp
   11f80:	mov	r2, fp
   11f84:	b	11f9c <__assert_fail@plt+0x1400>
   11f88:	sub	r2, ip, r1
   11f8c:	add	r3, r1, r2, lsr #1
   11f90:	add	r3, r3, r3, lsl #1
   11f94:	add	r3, r4, r3, lsl #2
   11f98:	ldr	r3, [r3, #40]	; 0x28
   11f9c:	cmp	r0, r3
   11fa0:	add	r2, r1, r2, lsr #1
   11fa4:	subcc	ip, r2, #1
   11fa8:	bcc	11fc4 <__assert_fail@plt+0x1428>
   11fac:	add	r3, r2, r2, lsl #1
   11fb0:	add	r3, r4, r3, lsl #2
   11fb4:	ldr	r1, [r3, #44]	; 0x2c
   11fb8:	cmp	r1, r0
   11fbc:	bcs	12264 <__assert_fail@plt+0x16c8>
   11fc0:	add	r1, r2, #1
   11fc4:	cmp	ip, r1
   11fc8:	bcs	11f88 <__assert_fail@plt+0x13ec>
   11fcc:	mov	r3, #0
   11fd0:	mov	r5, r3
   11fd4:	str	r3, [sp, #4]
   11fd8:	str	sl, [sp, #16]
   11fdc:	ldr	lr, [lr, #4]
   11fe0:	cmp	lr, #0
   11fe4:	beq	12178 <__assert_fail@plt+0x15dc>
   11fe8:	ldr	r0, [lr, #12]
   11fec:	mov	r3, r9
   11ff0:	mov	r1, sl
   11ff4:	mov	ip, fp
   11ff8:	ldr	r2, [pc, #1792]	; 12700 <__assert_fail@plt+0x1b64>
   11ffc:	b	12014 <__assert_fail@plt+0x1478>
   12000:	sub	r2, ip, r1
   12004:	add	r3, r1, r2, lsr #1
   12008:	add	r3, r3, r3, lsl #1
   1200c:	add	r3, r4, r3, lsl #2
   12010:	ldr	r3, [r3, #40]	; 0x28
   12014:	cmp	r0, r3
   12018:	add	r2, r1, r2, lsr #1
   1201c:	subcc	ip, r2, #1
   12020:	bcc	1203c <__assert_fail@plt+0x14a0>
   12024:	add	r3, r2, r2, lsl #1
   12028:	add	r3, r4, r3, lsl #2
   1202c:	ldr	r1, [r3, #44]	; 0x2c
   12030:	cmp	r0, r1
   12034:	bls	12160 <__assert_fail@plt+0x15c4>
   12038:	add	r1, r2, #1
   1203c:	cmp	ip, r1
   12040:	bcs	12000 <__assert_fail@plt+0x1464>
   12044:	mov	r3, r9
   12048:	mov	r1, sl
   1204c:	mov	ip, fp
   12050:	mov	r2, fp
   12054:	b	1206c <__assert_fail@plt+0x14d0>
   12058:	sub	r2, ip, r1
   1205c:	add	r3, r1, r2, lsr #1
   12060:	add	r3, r3, r3, lsl #1
   12064:	add	r3, r4, r3, lsl #2
   12068:	ldr	r3, [r3, #40]	; 0x28
   1206c:	cmp	r0, r3
   12070:	add	r2, r1, r2, lsr #1
   12074:	subcc	ip, r2, #1
   12078:	bcc	12094 <__assert_fail@plt+0x14f8>
   1207c:	add	r3, r2, r2, lsl #1
   12080:	add	r3, r4, r3, lsl #2
   12084:	ldr	r1, [r3, #44]	; 0x2c
   12088:	cmp	r0, r1
   1208c:	bls	1222c <__assert_fail@plt+0x1690>
   12090:	add	r1, r2, #1
   12094:	cmp	ip, r1
   12098:	bcs	12058 <__assert_fail@plt+0x14bc>
   1209c:	mov	r3, r9
   120a0:	mov	r1, sl
   120a4:	mov	ip, fp
   120a8:	mov	r2, fp
   120ac:	b	120c4 <__assert_fail@plt+0x1528>
   120b0:	sub	r2, ip, r1
   120b4:	add	r3, r1, r2, lsr #1
   120b8:	add	r3, r3, r3, lsl #1
   120bc:	add	r3, r4, r3, lsl #2
   120c0:	ldr	r3, [r3, #40]	; 0x28
   120c4:	cmp	r0, r3
   120c8:	add	r2, r1, r2, lsr #1
   120cc:	subcc	ip, r2, #1
   120d0:	bcc	120ec <__assert_fail@plt+0x1550>
   120d4:	add	r3, r2, r2, lsl #1
   120d8:	add	r3, r4, r3, lsl #2
   120dc:	ldr	r1, [r3, #44]	; 0x2c
   120e0:	cmp	r1, r0
   120e4:	bcs	1225c <__assert_fail@plt+0x16c0>
   120e8:	add	r1, r2, #1
   120ec:	cmp	r1, ip
   120f0:	bls	120b0 <__assert_fail@plt+0x1514>
   120f4:	mov	r3, sl
   120f8:	ldr	r2, [sp, #16]
   120fc:	cmp	r2, #0
   12100:	beq	121ac <__assert_fail@plt+0x1610>
   12104:	mov	r7, #1
   12108:	ldr	r3, [r8, #4]
   1210c:	cmp	r3, #0
   12110:	bne	11d98 <__assert_fail@plt+0x11fc>
   12114:	ldr	r3, [sp, #12]
   12118:	ldr	r0, [r3, #12]
   1211c:	bl	10a34 <utf8proc_get_property@plt>
   12120:	ldrh	r3, [r0]
   12124:	sub	r3, r3, #1
   12128:	uxth	r3, r3
   1212c:	cmp	r3, #28
   12130:	bhi	12144 <__assert_fail@plt+0x15a8>
   12134:	mov	r0, #1
   12138:	ldr	r2, [pc, #1480]	; 12708 <__assert_fail@plt+0x1b6c>
   1213c:	ands	r3, r2, r0, lsl r3
   12140:	bne	125b4 <__assert_fail@plt+0x1a18>
   12144:	ldr	r3, [r8, #4]
   12148:	cmp	r3, #0
   1214c:	str	r3, [sp, #12]
   12150:	str	r3, [sp, #28]
   12154:	bne	11d94 <__assert_fail@plt+0x11f8>
   12158:	add	sp, sp, #44	; 0x2c
   1215c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12160:	ldr	r3, [r3, #48]	; 0x30
   12164:	cmp	r3, #4
   12168:	bne	12044 <__assert_fail@plt+0x14a8>
   1216c:	ldr	lr, [lr, #4]
   12170:	cmp	lr, #0
   12174:	bne	11fe8 <__assert_fail@plt+0x144c>
   12178:	mov	r3, #18
   1217c:	b	120f8 <__assert_fail@plt+0x155c>
   12180:	ldr	r3, [r2, #48]	; 0x30
   12184:	cmp	r3, #4
   12188:	bne	11df8 <__assert_fail@plt+0x125c>
   1218c:	ldr	r8, [r8, #4]
   12190:	cmp	r8, #0
   12194:	bne	11d9c <__assert_fail@plt+0x1200>
   12198:	mov	r6, #18
   1219c:	str	sl, [sp, #8]
   121a0:	mov	r5, #18
   121a4:	mov	r3, r5
   121a8:	str	sl, [sp, #4]
   121ac:	ldr	r1, [sp, #8]
   121b0:	sub	r2, r6, #2
   121b4:	cmp	r2, #1
   121b8:	orrls	r1, r1, #1
   121bc:	cmp	r1, #0
   121c0:	bne	123a0 <__assert_fail@plt+0x1804>
   121c4:	ldr	r2, [sp, #4]
   121c8:	bic	ip, r5, #2
   121cc:	cmp	ip, #1
   121d0:	orreq	r2, r2, #1
   121d4:	cmp	r2, #0
   121d8:	bne	123a0 <__assert_fail@plt+0x1804>
   121dc:	sub	r0, r6, #8
   121e0:	cmp	r0, #1
   121e4:	bls	12340 <__assert_fail@plt+0x17a4>
   121e8:	sub	r2, r7, #8
   121ec:	cmp	r2, #1
   121f0:	bls	12370 <__assert_fail@plt+0x17d4>
   121f4:	sub	r2, r6, #8
   121f8:	sub	r1, r5, #10
   121fc:	clz	r2, r2
   12200:	clz	r1, r1
   12204:	lsr	r2, r2, #5
   12208:	lsr	r1, r1, #5
   1220c:	tst	r2, r1
   12210:	beq	122a0 <__assert_fail@plt+0x1704>
   12214:	mov	r7, #8
   12218:	b	12108 <__assert_fail@plt+0x156c>
   1221c:	ldr	r3, [r3, #48]	; 0x30
   12220:	cmp	r3, #4
   12224:	beq	11eb4 <__assert_fail@plt+0x1318>
   12228:	b	11f1c <__assert_fail@plt+0x1380>
   1222c:	ldr	r3, [r3, #48]	; 0x30
   12230:	cmp	r3, #6
   12234:	beq	11fdc <__assert_fail@plt+0x1440>
   12238:	b	1209c <__assert_fail@plt+0x1500>
   1223c:	ldr	r3, [r3, #48]	; 0x30
   12240:	cmp	r3, #6
   12244:	beq	11eb4 <__assert_fail@plt+0x1318>
   12248:	b	11f74 <__assert_fail@plt+0x13d8>
   1224c:	ldr	r3, [r2, #48]	; 0x30
   12250:	cmp	r3, #6
   12254:	beq	1218c <__assert_fail@plt+0x15f0>
   12258:	b	11e50 <__assert_fail@plt+0x12b4>
   1225c:	ldr	r3, [r3, #48]	; 0x30
   12260:	b	120f8 <__assert_fail@plt+0x155c>
   12264:	ldr	r5, [r3, #48]	; 0x30
   12268:	ldr	r2, [sp, #8]
   1226c:	sub	r3, r5, #2
   12270:	clz	r3, r3
   12274:	lsr	r3, r3, #5
   12278:	str	r3, [sp, #4]
   1227c:	and	r3, r2, r3
   12280:	str	r3, [sp, #16]
   12284:	b	11fdc <__assert_fail@plt+0x1440>
   12288:	ldr	r6, [r3, #48]	; 0x30
   1228c:	sub	r3, r6, #1
   12290:	clz	r3, r3
   12294:	lsr	r3, r3, #5
   12298:	str	r3, [sp, #8]
   1229c:	b	11eb0 <__assert_fail@plt+0x1314>
   122a0:	cmp	r5, #11
   122a4:	cmpeq	r3, #8
   122a8:	moveq	lr, #1
   122ac:	movne	lr, #0
   122b0:	tst	r2, lr
   122b4:	bne	12214 <__assert_fail@plt+0x1678>
   122b8:	cmp	r6, #11
   122bc:	cmpeq	r5, #8
   122c0:	moveq	r2, #1
   122c4:	movne	r2, #0
   122c8:	cmp	r7, #8
   122cc:	movne	r2, #0
   122d0:	andeq	r2, r2, #1
   122d4:	cmp	r2, #0
   122d8:	bne	12490 <__assert_fail@plt+0x18f4>
   122dc:	sub	lr, r6, #15
   122e0:	sub	r2, r5, #15
   122e4:	clz	lr, lr
   122e8:	clz	r2, r2
   122ec:	lsr	lr, lr, #5
   122f0:	lsr	r2, r2, #5
   122f4:	str	r2, [sp, #4]
   122f8:	ands	r2, lr, r2
   122fc:	bne	12398 <__assert_fail@plt+0x17fc>
   12300:	cmp	r0, #1
   12304:	bls	12680 <__assert_fail@plt+0x1ae4>
   12308:	cmp	r6, #15
   1230c:	beq	124b4 <__assert_fail@plt+0x1918>
   12310:	cmp	r7, #15
   12314:	beq	12530 <__assert_fail@plt+0x1994>
   12318:	sub	r2, r6, #7
   1231c:	sub	r3, r5, #7
   12320:	clz	r2, r2
   12324:	clz	r3, r3
   12328:	lsr	r2, r2, #5
   1232c:	lsr	r3, r3, #5
   12330:	tst	r3, r2
   12334:	beq	12580 <__assert_fail@plt+0x19e4>
   12338:	mov	r7, #7
   1233c:	b	12108 <__assert_fail@plt+0x156c>
   12340:	sub	r2, r5, #8
   12344:	cmp	r2, #1
   12348:	bls	12368 <__assert_fail@plt+0x17cc>
   1234c:	sub	r2, r5, #12
   12350:	cmp	r5, #10
   12354:	cmpne	r2, #1
   12358:	bhi	121e8 <__assert_fail@plt+0x164c>
   1235c:	sub	r2, r3, #8
   12360:	cmp	r2, #1
   12364:	bhi	121e8 <__assert_fail@plt+0x164c>
   12368:	mov	r7, r6
   1236c:	b	12108 <__assert_fail@plt+0x156c>
   12370:	cmp	r6, #13
   12374:	beq	12498 <__assert_fail@plt+0x18fc>
   12378:	sub	r2, r6, #10
   1237c:	bics	r2, r2, #2
   12380:	bne	121f4 <__assert_fail@plt+0x1658>
   12384:	sub	r2, r5, #8
   12388:	cmp	r2, #1
   1238c:	bhi	121f4 <__assert_fail@plt+0x1658>
   12390:	mov	r7, r6
   12394:	b	12108 <__assert_fail@plt+0x156c>
   12398:	mov	r7, #15
   1239c:	b	12108 <__assert_fail@plt+0x156c>
   123a0:	cmp	r8, #0
   123a4:	beq	12158 <__assert_fail@plt+0x15bc>
   123a8:	ldr	r0, [r8, #4]
   123ac:	cmp	r0, #0
   123b0:	beq	12114 <__assert_fail@plt+0x1578>
   123b4:	ldr	r1, [r0, #12]
   123b8:	mov	r3, r9
   123bc:	mov	ip, sl
   123c0:	mov	lr, fp
   123c4:	ldr	r2, [pc, #820]	; 12700 <__assert_fail@plt+0x1b64>
   123c8:	b	123e0 <__assert_fail@plt+0x1844>
   123cc:	sub	r2, lr, ip
   123d0:	add	r3, ip, r2, lsr #1
   123d4:	add	r3, r3, r3, lsl #1
   123d8:	add	r3, r4, r3, lsl #2
   123dc:	ldr	r3, [r3, #40]	; 0x28
   123e0:	cmp	r1, r3
   123e4:	add	r3, ip, r2, lsr #1
   123e8:	subcc	lr, r3, #1
   123ec:	bcc	12408 <__assert_fail@plt+0x186c>
   123f0:	add	r2, r3, r3, lsl #1
   123f4:	add	r2, r4, r2, lsl #2
   123f8:	ldr	ip, [r2, #44]	; 0x2c
   123fc:	cmp	r1, ip
   12400:	bls	1246c <__assert_fail@plt+0x18d0>
   12404:	add	ip, r3, #1
   12408:	cmp	lr, ip
   1240c:	bcs	123cc <__assert_fail@plt+0x1830>
   12410:	mov	r3, r9
   12414:	mov	ip, sl
   12418:	mov	lr, fp
   1241c:	mov	r2, fp
   12420:	b	12438 <__assert_fail@plt+0x189c>
   12424:	sub	r2, lr, ip
   12428:	add	r3, ip, r2, lsr #1
   1242c:	add	r3, r3, r3, lsl #1
   12430:	add	r3, r4, r3, lsl #2
   12434:	ldr	r3, [r3, #40]	; 0x28
   12438:	cmp	r1, r3
   1243c:	add	r3, ip, r2, lsr #1
   12440:	subcc	lr, r3, #1
   12444:	bcc	12460 <__assert_fail@plt+0x18c4>
   12448:	add	r2, r3, r3, lsl #1
   1244c:	add	r2, r4, r2, lsl #2
   12450:	ldr	ip, [r2, #44]	; 0x2c
   12454:	cmp	r1, ip
   12458:	bls	12480 <__assert_fail@plt+0x18e4>
   1245c:	add	ip, r3, #1
   12460:	cmp	ip, lr
   12464:	bls	12424 <__assert_fail@plt+0x1888>
   12468:	b	12114 <__assert_fail@plt+0x1578>
   1246c:	ldr	r3, [r2, #48]	; 0x30
   12470:	cmp	r3, #4
   12474:	bne	12410 <__assert_fail@plt+0x1874>
   12478:	mov	r8, r0
   1247c:	b	123a8 <__assert_fail@plt+0x180c>
   12480:	ldr	r3, [r2, #48]	; 0x30
   12484:	cmp	r3, #6
   12488:	beq	12478 <__assert_fail@plt+0x18dc>
   1248c:	b	12114 <__assert_fail@plt+0x1578>
   12490:	mov	r7, #11
   12494:	b	12108 <__assert_fail@plt+0x156c>
   12498:	sub	r2, r5, #8
   1249c:	cmp	r2, #1
   124a0:	bls	12368 <__assert_fail@plt+0x17cc>
   124a4:	sub	r1, r5, #10
   124a8:	clz	r1, r1
   124ac:	lsr	r1, r1, #5
   124b0:	b	122b8 <__assert_fail@plt+0x171c>
   124b4:	sub	r2, r5, #8
   124b8:	cmp	r2, #1
   124bc:	bls	12398 <__assert_fail@plt+0x17fc>
   124c0:	cmp	r7, #15
   124c4:	beq	12538 <__assert_fail@plt+0x199c>
   124c8:	cmp	ip, #12
   124cc:	orreq	r1, r1, #1
   124d0:	cmp	r1, #0
   124d4:	beq	124e0 <__assert_fail@plt+0x1944>
   124d8:	cmp	r3, #15
   124dc:	beq	12398 <__assert_fail@plt+0x17fc>
   124e0:	cmp	r6, #7
   124e4:	cmpeq	r5, #7
   124e8:	sub	r3, r5, #7
   124ec:	clz	r3, r3
   124f0:	lsr	r3, r3, #5
   124f4:	beq	12338 <__assert_fail@plt+0x179c>
   124f8:	cmp	r5, #16
   124fc:	beq	12368 <__assert_fail@plt+0x17cc>
   12500:	cmp	r6, #16
   12504:	bne	12590 <__assert_fail@plt+0x19f4>
   12508:	ldr	r1, [sp, #4]
   1250c:	sub	r2, r5, #8
   12510:	cmp	r2, #1
   12514:	orrls	r1, r1, #1
   12518:	cmp	r1, #0
   1251c:	bne	12528 <__assert_fail@plt+0x198c>
   12520:	cmp	r3, #0
   12524:	beq	123a0 <__assert_fail@plt+0x1804>
   12528:	mov	r7, #16
   1252c:	b	12108 <__assert_fail@plt+0x156c>
   12530:	cmp	r6, #14
   12534:	beq	126a8 <__assert_fail@plt+0x1b0c>
   12538:	sub	r2, r6, #10
   1253c:	bics	r2, r2, #2
   12540:	beq	125a4 <__assert_fail@plt+0x1a08>
   12544:	cmp	r6, #15
   12548:	beq	124c8 <__assert_fail@plt+0x192c>
   1254c:	sub	r2, r6, #7
   12550:	sub	r3, r5, #7
   12554:	clz	r2, r2
   12558:	clz	r3, r3
   1255c:	lsr	r2, r2, #5
   12560:	lsr	r3, r3, #5
   12564:	tst	r2, r3
   12568:	bne	12338 <__assert_fail@plt+0x179c>
   1256c:	cmp	r0, #1
   12570:	movhi	r0, lr
   12574:	orrls	r0, lr, #1
   12578:	cmp	r0, #0
   1257c:	bne	124f8 <__assert_fail@plt+0x195c>
   12580:	cmp	r6, #16
   12584:	orreq	r2, r2, #1
   12588:	cmp	r2, #0
   1258c:	bne	124f8 <__assert_fail@plt+0x195c>
   12590:	cmp	r6, #5
   12594:	cmpeq	r5, #5
   12598:	bne	123a0 <__assert_fail@plt+0x1804>
   1259c:	mov	r7, #5
   125a0:	b	12108 <__assert_fail@plt+0x156c>
   125a4:	cmp	r5, #15
   125a8:	bne	12544 <__assert_fail@plt+0x19a8>
   125ac:	mov	r7, r6
   125b0:	b	12108 <__assert_fail@plt+0x156c>
   125b4:	ldr	r3, [sp, #12]
   125b8:	ldr	r6, [r8, #4]
   125bc:	cmp	r6, r3
   125c0:	movne	r5, r3
   125c4:	movne	r7, #0
   125c8:	bne	125d8 <__assert_fail@plt+0x1a3c>
   125cc:	b	126ec <__assert_fail@plt+0x1b50>
   125d0:	cmp	r5, #0
   125d4:	beq	126d8 <__assert_fail@plt+0x1b3c>
   125d8:	add	r1, sp, #24
   125dc:	ldr	r0, [r5, #12]
   125e0:	bl	10a4c <utf8proc_encode_char@plt>
   125e4:	cmp	r0, #0
   125e8:	beq	126c4 <__assert_fail@plt+0x1b28>
   125ec:	ldr	r5, [r5, #4]
   125f0:	add	r7, r7, r0
   125f4:	cmp	r6, r5
   125f8:	bne	125d0 <__assert_fail@plt+0x1a34>
   125fc:	add	r0, r7, #1
   12600:	bl	10ab8 <malloc@plt>
   12604:	mov	r6, r5
   12608:	str	r8, [sp, #4]
   1260c:	mov	r7, #0
   12610:	ldr	r5, [sp, #12]
   12614:	mov	r8, r0
   12618:	b	12624 <__assert_fail@plt+0x1a88>
   1261c:	cmp	r5, #0
   12620:	beq	12694 <__assert_fail@plt+0x1af8>
   12624:	add	r1, r8, r7
   12628:	ldr	r0, [r5, #12]
   1262c:	bl	10a4c <utf8proc_encode_char@plt>
   12630:	ldr	r5, [r5, #4]
   12634:	cmp	r5, r6
   12638:	add	r7, r7, r0
   1263c:	bne	1261c <__assert_fail@plt+0x1a80>
   12640:	mov	r6, r8
   12644:	ldr	r8, [sp, #4]
   12648:	mov	r1, #12
   1264c:	strb	sl, [r6, r7]
   12650:	mov	r0, #1
   12654:	bl	12a08 <error@@Base+0x3c>
   12658:	mov	r5, r0
   1265c:	mov	r0, r6
   12660:	bl	10b3c <utf8proc_NFC@plt>
   12664:	mov	r1, r5
   12668:	str	r0, [r5, #8]
   1266c:	ldr	r0, [sp, #20]
   12670:	bl	13634 <error@@Base+0xc68>
   12674:	mov	r0, r6
   12678:	bl	10a28 <free@plt>
   1267c:	b	12144 <__assert_fail@plt+0x15a8>
   12680:	cmp	r5, #15
   12684:	beq	12368 <__assert_fail@plt+0x17cc>
   12688:	cmp	r7, #15
   1268c:	bne	12544 <__assert_fail@plt+0x19a8>
   12690:	b	12538 <__assert_fail@plt+0x199c>
   12694:	ldr	r3, [pc, #112]	; 1270c <__assert_fail@plt+0x1b70>
   12698:	ldr	r2, [pc, #112]	; 12710 <__assert_fail@plt+0x1b74>
   1269c:	ldr	r1, [pc, #112]	; 12714 <__assert_fail@plt+0x1b78>
   126a0:	ldr	r0, [pc, #112]	; 12718 <__assert_fail@plt+0x1b7c>
   126a4:	bl	10b9c <__assert_fail@plt>
   126a8:	cmp	r5, #15
   126ac:	moveq	r7, #14
   126b0:	beq	12108 <__assert_fail@plt+0x156c>
   126b4:	sub	r3, r5, #7
   126b8:	clz	r3, r3
   126bc:	lsr	r3, r3, #5
   126c0:	b	1256c <__assert_fail@plt+0x19d0>
   126c4:	ldr	r3, [pc, #56]	; 12704 <__assert_fail@plt+0x1b68>
   126c8:	mov	r2, #253	; 0xfd
   126cc:	ldr	r1, [pc, #64]	; 12714 <__assert_fail@plt+0x1b78>
   126d0:	ldr	r0, [pc, #68]	; 1271c <__assert_fail@plt+0x1b80>
   126d4:	bl	10b9c <__assert_fail@plt>
   126d8:	ldr	r3, [pc, #36]	; 12704 <__assert_fail@plt+0x1b68>
   126dc:	mov	r2, #249	; 0xf9
   126e0:	ldr	r1, [pc, #44]	; 12714 <__assert_fail@plt+0x1b78>
   126e4:	ldr	r0, [pc, #44]	; 12718 <__assert_fail@plt+0x1b7c>
   126e8:	bl	10b9c <__assert_fail@plt>
   126ec:	bl	10ab8 <malloc@plt>
   126f0:	mov	r7, #0
   126f4:	mov	r6, r0
   126f8:	b	12648 <__assert_fail@plt+0x1aac>
   126fc:	andeq	r2, r0, r6, rrx
   12700:	andeq	r0, r0, r4, asr #8
   12704:	strdeq	r3, [r1], -r0
   12708:	strdne	r0, [r0], -pc	; <UNPREDICTABLE>
   1270c:	andeq	r3, r1, r4, lsl #24
   12710:	andeq	r0, r0, sp, lsl #2
   12714:	andeq	r6, r1, r4, asr pc
   12718:	andeq	r6, r1, ip, asr pc
   1271c:	andeq	r6, r1, ip, ror #30
   12720:	push	{r4, lr}
   12724:	mov	r4, r0
   12728:	ldr	r0, [r0, #8]
   1272c:	bl	10a28 <free@plt>
   12730:	mov	r0, r4
   12734:	pop	{r4, lr}
   12738:	b	10a28 <free@plt>
   1273c:	ldr	r3, [pc, #136]	; 127cc <__assert_fail@plt+0x1c30>
   12740:	push	{r7, lr}
   12744:	mov	r9, r0
   12748:	ldr	r3, [r3]
   1274c:	sub	sp, sp, #112	; 0x70
   12750:	cmp	r3, #0
   12754:	beq	1275c <__assert_fail@plt+0x1bc0>
   12758:	blx	r3
   1275c:	ldr	r6, [pc, #108]	; 127d0 <__assert_fail@plt+0x1c34>
   12760:	ldrsh	r3, [r6]
   12764:	cmp	r3, #0
   12768:	ble	127c4 <__assert_fail@plt+0x1c28>
   1276c:	ldr	r8, [pc, #96]	; 127d4 <__assert_fail@plt+0x1c38>
   12770:	ldr	r7, [pc, #96]	; 127d8 <__assert_fail@plt+0x1c3c>
   12774:	mov	r4, #1
   12778:	ldr	r5, [r8]
   1277c:	bl	10ae8 <getpid@plt>
   12780:	mov	r2, r5
   12784:	mov	r1, r7
   12788:	str	r4, [sp]
   1278c:	add	r4, r4, #1
   12790:	sxth	r4, r4
   12794:	mov	r3, r0
   12798:	add	r0, sp, #12
   1279c:	bl	10b54 <sprintf@plt>
   127a0:	add	r0, sp, #12
   127a4:	bl	10a58 <strdup@plt>
   127a8:	mov	r5, r0
   127ac:	bl	10a70 <unlink@plt>
   127b0:	mov	r0, r5
   127b4:	bl	10a28 <free@plt>
   127b8:	ldrsh	r3, [r6]
   127bc:	cmp	r3, r4
   127c0:	bge	12778 <__assert_fail@plt+0x1bdc>
   127c4:	mov	r0, r9
   127c8:	bl	10af4 <exit@plt>
   127cc:	andeq	ip, r2, r8, asr #8
   127d0:	andeq	r8, r2, ip, lsr r1
   127d4:	andeq	ip, r2, r4, asr #8
   127d8:	andeq	r6, r1, r0, lsl #31
   127dc:	ldrb	r3, [r0]
   127e0:	cmp	r3, #0
   127e4:	beq	12848 <__assert_fail@plt+0x1cac>
   127e8:	ldrb	ip, [r1]
   127ec:	cmp	ip, r3
   127f0:	bne	12858 <__assert_fail@plt+0x1cbc>
   127f4:	push	{lr}		; (str lr, [sp, #-4]!)
   127f8:	mov	r2, #0
   127fc:	mov	lr, r1
   12800:	b	12810 <__assert_fail@plt+0x1c74>
   12804:	ldrb	ip, [lr, #1]!
   12808:	cmp	r3, ip
   1280c:	bne	12830 <__assert_fail@plt+0x1c94>
   12810:	ldrb	r3, [r0, #1]!
   12814:	add	r2, r2, #1
   12818:	cmp	r3, #0
   1281c:	bne	12804 <__assert_fail@plt+0x1c68>
   12820:	ldrb	ip, [r1, r2]
   12824:	cmp	ip, #0
   12828:	movne	r3, #0
   1282c:	beq	12840 <__assert_fail@plt+0x1ca4>
   12830:	cmp	r3, ip
   12834:	movcs	r0, #1
   12838:	mvncc	r0, #0
   1283c:	pop	{pc}		; (ldr pc, [sp], #4)
   12840:	mov	r0, ip
   12844:	pop	{pc}		; (ldr pc, [sp], #4)
   12848:	ldrb	ip, [r1, r3]
   1284c:	cmp	ip, #0
   12850:	movne	r3, #0
   12854:	beq	12868 <__assert_fail@plt+0x1ccc>
   12858:	cmp	r3, ip
   1285c:	movcs	r0, #1
   12860:	mvncc	r0, #0
   12864:	bx	lr
   12868:	mov	r0, ip
   1286c:	bx	lr
   12870:	ldr	r2, [pc, #28]	; 12894 <__assert_fail@plt+0x1cf8>
   12874:	ldr	r2, [r2]
   12878:	cmp	r2, r0
   1287c:	bxeq	lr
   12880:	ldr	r2, [pc, #16]	; 12898 <__assert_fail@plt+0x1cfc>
   12884:	ldr	r2, [r2]
   12888:	cmp	r0, r2
   1288c:	bxeq	lr
   12890:	b	10b30 <fclose@plt>
   12894:	andeq	r8, r2, r8, asr #1
   12898:	andeq	r8, r2, ip, asr #1
   1289c:	push	{lr}		; (str lr, [sp, #-4]!)
   128a0:	sub	sp, sp, #92	; 0x5c
   128a4:	mov	r1, r0
   128a8:	mov	r2, sp
   128ac:	mov	r0, #3
   128b0:	bl	10a88 <__xstat@plt>
   128b4:	clz	r0, r0
   128b8:	lsr	r0, r0, #5
   128bc:	add	sp, sp, #92	; 0x5c
   128c0:	pop	{pc}		; (ldr pc, [sp], #4)
   128c4:	ldr	r3, [pc, #84]	; 12920 <__assert_fail@plt+0x1d84>
   128c8:	push	{r4, r5, lr}
   128cc:	sub	sp, sp, #116	; 0x74
   128d0:	ldrh	r4, [r3]
   128d4:	ldr	r2, [pc, #72]	; 12924 <__assert_fail@plt+0x1d88>
   128d8:	add	r4, r4, #1
   128dc:	ldr	r5, [r2]
   128e0:	sxth	r4, r4
   128e4:	strh	r4, [r3]
   128e8:	bl	10ae8 <getpid@plt>
   128ec:	mov	r2, r5
   128f0:	ldr	r1, [pc, #48]	; 12928 <__assert_fail@plt+0x1d8c>
   128f4:	str	r4, [sp]
   128f8:	mov	r3, r0
   128fc:	add	r0, sp, #12
   12900:	bl	10b54 <sprintf@plt>
   12904:	add	r0, sp, #12
   12908:	bl	10a58 <strdup@plt>
   1290c:	mov	r4, r0
   12910:	bl	10a70 <unlink@plt>
   12914:	mov	r0, r4
   12918:	add	sp, sp, #116	; 0x74
   1291c:	pop	{r4, r5, pc}
   12920:	andeq	r8, r2, ip, lsr r1
   12924:	andeq	ip, r2, r4, asr #8
   12928:	andeq	r6, r1, r0, lsl #31
   1292c:	push	{r4, lr}
   12930:	mov	r4, r0
   12934:	bl	10b0c <strlen@plt>
   12938:	sub	r0, r0, #1
   1293c:	sxth	r0, r0
   12940:	cmp	r0, #0
   12944:	bge	1295c <__assert_fail@plt+0x1dc0>
   12948:	b	12968 <__assert_fail@plt+0x1dcc>
   1294c:	sub	r0, r0, #1
   12950:	sxth	r0, r0
   12954:	cmn	r0, #1
   12958:	beq	12968 <__assert_fail@plt+0x1dcc>
   1295c:	ldrb	r3, [r4, r0]
   12960:	cmp	r3, #47	; 0x2f
   12964:	bne	1294c <__assert_fail@plt+0x1db0>
   12968:	add	r0, r0, #1
   1296c:	add	r0, r4, r0
   12970:	pop	{r4, pc}
   12974:	push	{r4, lr}
   12978:	mov	r0, #0
   1297c:	bl	1273c <__assert_fail@plt+0x1ba0>
   12980:	ldr	r2, [pc, #52]	; 129bc <__assert_fail@plt+0x1e20>
   12984:	push	{r4, lr}
   12988:	ldr	r2, [r2]
   1298c:	cmp	r2, #0
   12990:	beq	1299c <__assert_fail@plt+0x1e00>
   12994:	blx	r2
   12998:	bl	12974 <__assert_fail@plt+0x1dd8>
   1299c:	ldr	r1, [pc, #28]	; 129c0 <__assert_fail@plt+0x1e24>
   129a0:	ldr	r2, [pc, #28]	; 129c4 <__assert_fail@plt+0x1e28>
   129a4:	mov	r3, r0
   129a8:	ldr	r0, [r1]
   129ac:	ldr	r2, [r2]
   129b0:	ldr	r1, [pc, #16]	; 129c8 <__assert_fail@plt+0x1e2c>
   129b4:	bl	10b18 <fprintf@plt>
   129b8:	b	12998 <__assert_fail@plt+0x1dfc>
   129bc:	andeq	ip, r2, r0, asr #8
   129c0:	andeq	r8, r2, r0, asr #1
   129c4:	andeq	ip, r2, r4, asr #8
   129c8:	muleq	r1, r0, pc	; <UNPREDICTABLE>

000129cc <error@@Base>:
   129cc:	ldr	r1, [pc, #36]	; 129f8 <error@@Base+0x2c>
   129d0:	ldr	r2, [pc, #36]	; 129fc <error@@Base+0x30>
   129d4:	mov	r3, r0
   129d8:	push	{r4, lr}
   129dc:	ldr	r0, [r1]
   129e0:	ldr	r2, [r2]
   129e4:	ldr	r1, [pc, #20]	; 12a00 <error@@Base+0x34>
   129e8:	bl	10b18 <fprintf@plt>
   129ec:	ldr	r3, [pc, #16]	; 12a04 <error@@Base+0x38>
   129f0:	ldr	r0, [r3]
   129f4:	bl	1273c <__assert_fail@plt+0x1ba0>
   129f8:	andeq	r8, r2, r0, asr #1
   129fc:	andeq	ip, r2, r4, asr #8
   12a00:	andeq	r6, r1, r0, lsr #31
   12a04:	strheq	r8, [r2], -r8	; <UNPREDICTABLE>
   12a08:	push	{r4, lr}
   12a0c:	bl	109ec <calloc@plt>
   12a10:	cmp	r0, #0
   12a14:	popne	{r4, pc}
   12a18:	ldr	r0, [pc]	; 12a20 <error@@Base+0x54>
   12a1c:	bl	129cc <error@@Base>
   12a20:	andeq	r6, r1, r8, lsr #31
   12a24:	ldr	r3, [pc, #32]	; 12a4c <error@@Base+0x80>
   12a28:	ldrb	r2, [r3, #2]
   12a2c:	cmp	r2, #0
   12a30:	beq	12a38 <error@@Base+0x6c>
   12a34:	bx	lr
   12a38:	push	{r4, lr}
   12a3c:	mov	r2, #1
   12a40:	ldr	r0, [pc, #8]	; 12a50 <error@@Base+0x84>
   12a44:	strb	r2, [r3, #2]
   12a48:	bl	129cc <error@@Base>
   12a4c:	andeq	r8, r2, ip, lsr r1
   12a50:	andeq	r6, r1, r4, asr #31
   12a54:	ldr	r3, [pc, #48]	; 12a8c <error@@Base+0xc0>
   12a58:	push	{lr}		; (str lr, [sp, #-4]!)
   12a5c:	sub	sp, sp, #12
   12a60:	ldr	r2, [pc, #40]	; 12a90 <error@@Base+0xc4>
   12a64:	str	r1, [sp]
   12a68:	ldr	r1, [r3]
   12a6c:	ldr	r2, [r2]
   12a70:	mov	r3, r0
   12a74:	mov	r0, r1
   12a78:	ldr	r1, [pc, #20]	; 12a94 <error@@Base+0xc8>
   12a7c:	bl	10b18 <fprintf@plt>
   12a80:	ldr	r3, [pc, #16]	; 12a98 <error@@Base+0xcc>
   12a84:	ldr	r0, [r3]
   12a88:	bl	1273c <__assert_fail@plt+0x1ba0>
   12a8c:	andeq	r8, r2, r0, asr #1
   12a90:	andeq	ip, r2, r4, asr #8
   12a94:	ldrdeq	r6, [r1], -r4
   12a98:	strheq	r8, [r2], -r8	; <UNPREDICTABLE>
   12a9c:	subs	r2, r0, #0
   12aa0:	push	{r4, r5, r6, lr}
   12aa4:	mov	r4, r1
   12aa8:	beq	12ad4 <error@@Base+0x108>
   12aac:	mov	r5, r2
   12ab0:	bl	10a1c <fopen@plt>
   12ab4:	cmp	r0, #0
   12ab8:	popne	{r4, r5, r6, pc}
   12abc:	ldrb	r3, [r4]
   12ac0:	mov	r1, r5
   12ac4:	cmp	r3, #119	; 0x77
   12ac8:	beq	12aec <error@@Base+0x120>
   12acc:	ldr	r0, [pc, #32]	; 12af4 <error@@Base+0x128>
   12ad0:	bl	12a54 <error@@Base+0x88>
   12ad4:	ldrb	r3, [r1]
   12ad8:	cmp	r3, #114	; 0x72
   12adc:	ldreq	r3, [pc, #20]	; 12af8 <error@@Base+0x12c>
   12ae0:	ldrne	r3, [pc, #20]	; 12afc <error@@Base+0x130>
   12ae4:	ldr	r0, [r3]
   12ae8:	pop	{r4, r5, r6, pc}
   12aec:	ldr	r0, [pc, #12]	; 12b00 <error@@Base+0x134>
   12af0:	bl	12a54 <error@@Base+0x88>
   12af4:	strdeq	r6, [r1], -ip
   12af8:	andeq	r8, r2, r8, asr #1
   12afc:	andeq	r8, r2, ip, asr #1
   12b00:	andeq	r6, r1, r4, ror #31
   12b04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b08:	sub	sp, sp, #20
   12b0c:	ldr	r4, [r1]
   12b10:	str	r0, [sp, #8]
   12b14:	mov	r0, r4
   12b18:	mov	r9, r1
   12b1c:	str	r2, [sp, #12]
   12b20:	mov	r6, r3
   12b24:	bl	10b0c <strlen@plt>
   12b28:	sub	r0, r0, #1
   12b2c:	sxth	r0, r0
   12b30:	cmp	r0, #0
   12b34:	bge	12b4c <error@@Base+0x180>
   12b38:	b	12b58 <error@@Base+0x18c>
   12b3c:	sub	r0, r0, #1
   12b40:	sxth	r0, r0
   12b44:	cmn	r0, #1
   12b48:	beq	12b58 <error@@Base+0x18c>
   12b4c:	ldrb	r3, [r4, r0]
   12b50:	cmp	r3, #47	; 0x2f
   12b54:	bne	12b3c <error@@Base+0x170>
   12b58:	ldr	r3, [pc, #460]	; 12d2c <error@@Base+0x360>
   12b5c:	add	r0, r0, #1
   12b60:	add	r4, r4, r0
   12b64:	ldr	r1, [pc, #452]	; 12d30 <error@@Base+0x364>
   12b68:	mov	r0, #2
   12b6c:	str	r4, [r3]
   12b70:	bl	10ad0 <__sysv_signal@plt>
   12b74:	ldr	r1, [pc, #436]	; 12d30 <error@@Base+0x364>
   12b78:	mov	r0, #15
   12b7c:	bl	10ad0 <__sysv_signal@plt>
   12b80:	ldr	r3, [sp, #8]
   12b84:	ldr	fp, [r3]
   12b88:	cmp	fp, #1
   12b8c:	beq	12cc0 <error@@Base+0x2f4>
   12b90:	movgt	sl, #1
   12b94:	mov	r7, #0
   12b98:	movgt	r4, sl
   12b9c:	bgt	12bc4 <error@@Base+0x1f8>
   12ba0:	b	12cd0 <error@@Base+0x304>
   12ba4:	add	r3, r7, #1
   12ba8:	str	r5, [r9, r7, lsl #2]
   12bac:	sxth	r7, r3
   12bb0:	add	r4, r4, #1
   12bb4:	sxth	r4, r4
   12bb8:	cmp	r4, fp
   12bbc:	mov	sl, r4
   12bc0:	bge	12cd0 <error@@Base+0x304>
   12bc4:	ldr	r5, [r9, r4, lsl #2]
   12bc8:	lsl	r3, r4, #2
   12bcc:	ldrb	r2, [r5]
   12bd0:	cmp	r2, #45	; 0x2d
   12bd4:	bne	12ba4 <error@@Base+0x1d8>
   12bd8:	ldrb	r8, [r5, #1]
   12bdc:	str	r3, [sp, #4]
   12be0:	cmp	r8, #0
   12be4:	beq	12ba4 <error@@Base+0x1d8>
   12be8:	mov	r0, r5
   12bec:	bl	10b0c <strlen@plt>
   12bf0:	mov	r1, r5
   12bf4:	mov	r2, r0
   12bf8:	ldr	r0, [pc, #308]	; 12d34 <error@@Base+0x368>
   12bfc:	bl	10b78 <strncmp@plt>
   12c00:	cmp	r0, #0
   12c04:	beq	12d18 <error@@Base+0x34c>
   12c08:	add	sl, sl, #1
   12c0c:	cmp	sl, fp
   12c10:	movge	r0, #0
   12c14:	ldrlt	r3, [sp, #4]
   12c18:	addlt	r3, r9, r3
   12c1c:	ldrlt	r0, [r3, #4]
   12c20:	cmp	r6, #0
   12c24:	beq	12c68 <error@@Base+0x29c>
   12c28:	ldrb	r3, [r6]
   12c2c:	cmp	r3, #0
   12c30:	beq	12c68 <error@@Base+0x29c>
   12c34:	cmp	r3, r8
   12c38:	beq	12c74 <error@@Base+0x2a8>
   12c3c:	mov	r3, #0
   12c40:	b	12c4c <error@@Base+0x280>
   12c44:	cmp	r8, r1
   12c48:	beq	12c78 <error@@Base+0x2ac>
   12c4c:	add	r3, r3, #1
   12c50:	sxth	r3, r3
   12c54:	add	r2, r3, r3, lsl #1
   12c58:	ldrb	r1, [r6, r2, lsl #2]
   12c5c:	add	r2, r6, r2, lsl #2
   12c60:	cmp	r1, #0
   12c64:	bne	12c44 <error@@Base+0x278>
   12c68:	mov	r1, r5
   12c6c:	ldr	r0, [pc, #196]	; 12d38 <error@@Base+0x36c>
   12c70:	bl	12a54 <error@@Base+0x88>
   12c74:	mov	r2, r6
   12c78:	ldr	r3, [r2, #4]
   12c7c:	cmp	r3, #0
   12c80:	beq	12ce0 <error@@Base+0x314>
   12c84:	ldrb	r1, [r5, #2]
   12c88:	cmp	r0, #0
   12c8c:	cmpeq	r1, #0
   12c90:	beq	12ce0 <error@@Base+0x314>
   12c94:	ldr	r2, [r3]
   12c98:	cmp	r2, #0
   12c9c:	bne	12d20 <error@@Base+0x354>
   12ca0:	cmp	r1, #0
   12ca4:	addne	r0, r5, #2
   12ca8:	str	r0, [r3]
   12cac:	ldrb	r3, [r5, #2]
   12cb0:	cmp	r3, #0
   12cb4:	addeq	r4, r4, #1
   12cb8:	sxtheq	r4, r4
   12cbc:	b	12bb0 <error@@Base+0x1e4>
   12cc0:	ldr	r3, [pc, #116]	; 12d3c <error@@Base+0x370>
   12cc4:	ldrb	r7, [r3, #4]
   12cc8:	cmp	r7, #0
   12ccc:	bne	12d18 <error@@Base+0x34c>
   12cd0:	ldr	r3, [sp, #8]
   12cd4:	str	r7, [r3]
   12cd8:	add	sp, sp, #20
   12cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ce0:	ldr	r3, [r2, #8]
   12ce4:	cmp	r3, #0
   12ce8:	beq	12c68 <error@@Base+0x29c>
   12cec:	ldrb	r2, [r5, #2]
   12cf0:	cmp	r2, #0
   12cf4:	bne	12c68 <error@@Base+0x29c>
   12cf8:	ldrb	r2, [r3]
   12cfc:	cmp	r2, #0
   12d00:	bne	12d20 <error@@Base+0x354>
   12d04:	mov	r2, #1
   12d08:	strb	r2, [r3]
   12d0c:	ldr	r3, [sp, #8]
   12d10:	ldr	fp, [r3]
   12d14:	b	12bb0 <error@@Base+0x1e4>
   12d18:	ldr	r0, [sp, #12]
   12d1c:	bl	12980 <__assert_fail@plt+0x1de4>
   12d20:	mov	r1, r5
   12d24:	ldr	r0, [pc, #20]	; 12d40 <error@@Base+0x374>
   12d28:	bl	12a54 <error@@Base+0x88>
   12d2c:	andeq	ip, r2, r4, asr #8
   12d30:	andeq	r2, r1, r4, lsr #20
   12d34:	andeq	r7, r1, r0, lsl r0
   12d38:	andeq	r7, r1, r8, lsl r0
   12d3c:	strheq	r8, [r2], -r8	; <UNPREDICTABLE>
   12d40:	andeq	r7, r1, r8, lsr #32
   12d44:	ldr	r3, [pc, #44]	; 12d78 <error@@Base+0x3ac>
   12d48:	push	{lr}		; (str lr, [sp, #-4]!)
   12d4c:	sub	sp, sp, #12
   12d50:	ldr	r2, [pc, #36]	; 12d7c <error@@Base+0x3b0>
   12d54:	str	r1, [sp]
   12d58:	ldr	r1, [r3]
   12d5c:	ldr	r2, [r2]
   12d60:	mov	r3, r0
   12d64:	mov	r0, r1
   12d68:	ldr	r1, [pc, #16]	; 12d80 <error@@Base+0x3b4>
   12d6c:	bl	10b18 <fprintf@plt>
   12d70:	add	sp, sp, #12
   12d74:	pop	{pc}		; (ldr pc, [sp], #4)
   12d78:	andeq	r8, r2, r0, asr #1
   12d7c:	andeq	ip, r2, r4, asr #8
   12d80:	ldrdeq	r6, [r1], -r4
   12d84:	push	{r4, r5, r6, lr}
   12d88:	mov	r4, r0
   12d8c:	uxtb	r6, r1
   12d90:	mov	r0, #1
   12d94:	mov	r1, #16
   12d98:	mov	r5, r2
   12d9c:	bl	12a08 <error@@Base+0x3c>
   12da0:	strb	r6, [r0, #8]
   12da4:	str	r5, [r0, #12]
   12da8:	mov	r1, r0
   12dac:	mov	r0, r4
   12db0:	pop	{r4, r5, r6, lr}
   12db4:	b	13634 <error@@Base+0xc68>
   12db8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dbc:	sub	sp, sp, #124	; 0x7c
   12dc0:	ldrb	r3, [r2]
   12dc4:	str	r2, [sp, #8]
   12dc8:	adds	r3, r3, #0
   12dcc:	movne	r3, #1
   12dd0:	cmp	r1, #0
   12dd4:	movne	r3, #0
   12dd8:	cmp	r3, #0
   12ddc:	bne	131b8 <error@@Base+0x7ec>
   12de0:	mov	sl, r0
   12de4:	mov	r0, r1
   12de8:	ldr	r3, [sl, #4]
   12dec:	ldr	r1, [pc, #976]	; 131c4 <error@@Base+0x7f8>
   12df0:	str	r3, [sp, #12]
   12df4:	bl	12a9c <error@@Base+0xd0>
   12df8:	ldr	r3, [sp, #8]
   12dfc:	ldrb	r3, [r3]
   12e00:	cmp	r3, #0
   12e04:	mov	r5, r0
   12e08:	bne	1310c <error@@Base+0x740>
   12e0c:	ldr	r2, [sp, #8]
   12e10:	mov	r0, r5
   12e14:	ldr	r3, [r2, #4]
   12e18:	ldrb	r6, [r2, #1]
   12e1c:	mov	r4, r3
   12e20:	bl	10b90 <getc@plt>
   12e24:	cmp	r4, #0
   12e28:	mov	r2, r4
   12e2c:	moveq	r2, #94	; 0x5e
   12e30:	str	r2, [sp, #4]
   12e34:	cmn	r0, #1
   12e38:	beq	12efc <error@@Base+0x530>
   12e3c:	ldr	r9, [pc, #900]	; 131c8 <error@@Base+0x7fc>
   12e40:	ldrsb	r4, [r9, r0]
   12e44:	cmp	r4, #0
   12e48:	ble	131a0 <error@@Base+0x7d4>
   12e4c:	cmp	r6, #0
   12e50:	movne	r7, #0
   12e54:	movne	r8, #1
   12e58:	movne	fp, #4
   12e5c:	bne	12e70 <error@@Base+0x4a4>
   12e60:	b	13070 <error@@Base+0x6a4>
   12e64:	ldrsb	r4, [r9, r0]
   12e68:	cmp	r4, #0
   12e6c:	ble	131a0 <error@@Base+0x7d4>
   12e70:	cmp	r4, #1
   12e74:	strb	r0, [sp, #16]
   12e78:	beq	12e9c <error@@Base+0x4d0>
   12e7c:	sub	r6, r4, #1
   12e80:	mov	r2, r6
   12e84:	mov	r3, r5
   12e88:	mov	r1, r8
   12e8c:	add	r0, sp, #17
   12e90:	bl	10aa0 <fread@plt>
   12e94:	cmp	r6, r0
   12e98:	bne	131b0 <error@@Base+0x7e4>
   12e9c:	add	r2, sp, #20
   12ea0:	mov	r1, fp
   12ea4:	add	r0, sp, #16
   12ea8:	bl	10aac <utf8proc_iterate@plt>
   12eac:	cmp	r0, r4
   12eb0:	bne	131a8 <error@@Base+0x7dc>
   12eb4:	ldr	r4, [sp, #20]
   12eb8:	ldr	r3, [sp, #4]
   12ebc:	cmp	r4, r3
   12ec0:	moveq	r7, r8
   12ec4:	beq	12eec <error@@Base+0x520>
   12ec8:	mov	r1, #16
   12ecc:	mov	r0, r8
   12ed0:	bl	12a08 <error@@Base+0x3c>
   12ed4:	strb	r7, [r0, #8]
   12ed8:	mov	r1, r0
   12edc:	str	r4, [r0, #12]
   12ee0:	mov	r0, sl
   12ee4:	bl	13634 <error@@Base+0xc68>
   12ee8:	mov	r7, #0
   12eec:	mov	r0, r5
   12ef0:	bl	10b90 <getc@plt>
   12ef4:	cmn	r0, #1
   12ef8:	bne	12e64 <error@@Base+0x498>
   12efc:	mov	r0, r5
   12f00:	bl	12870 <__assert_fail@plt+0x1cd4>
   12f04:	ldr	r3, [sp, #8]
   12f08:	ldrb	r3, [r3, #9]
   12f0c:	cmp	r3, #0
   12f10:	beq	12f90 <error@@Base+0x5c4>
   12f14:	ldr	r3, [sp, #12]
   12f18:	cmp	r3, #0
   12f1c:	ldrne	r6, [r3, #4]
   12f20:	ldreq	r6, [sl]
   12f24:	cmp	r6, #0
   12f28:	beq	12f90 <error@@Base+0x5c4>
   12f2c:	mov	r5, r6
   12f30:	mov	r7, #32
   12f34:	b	12f5c <error@@Base+0x590>
   12f38:	cmp	r4, #11
   12f3c:	bcs	12f88 <error@@Base+0x5bc>
   12f40:	cmp	r4, #9
   12f44:	beq	12f88 <error@@Base+0x5bc>
   12f48:	cmp	r4, #10
   12f4c:	bne	12f78 <error@@Base+0x5ac>
   12f50:	ldr	r5, [r5, #4]
   12f54:	cmp	r5, #0
   12f58:	beq	13030 <error@@Base+0x664>
   12f5c:	ldr	r4, [r5, #12]
   12f60:	mov	r0, r4
   12f64:	bl	10a34 <utf8proc_get_property@plt>
   12f68:	cmp	r4, #13
   12f6c:	bls	12f38 <error@@Base+0x56c>
   12f70:	cmp	r4, #160	; 0xa0
   12f74:	beq	12f88 <error@@Base+0x5bc>
   12f78:	ldrsh	r3, [r0]
   12f7c:	sub	r3, r3, #23
   12f80:	cmp	r3, #2
   12f84:	bhi	12f50 <error@@Base+0x584>
   12f88:	str	r7, [r5, #12]
   12f8c:	b	12f50 <error@@Base+0x584>
   12f90:	ldr	r3, [sp, #8]
   12f94:	ldrb	r3, [r3, #10]
   12f98:	cmp	r3, #0
   12f9c:	beq	12fcc <error@@Base+0x600>
   12fa0:	ldr	r3, [sp, #12]
   12fa4:	cmp	r3, #0
   12fa8:	ldrne	r4, [r3, #4]
   12fac:	ldreq	r4, [sl]
   12fb0:	b	12fc4 <error@@Base+0x5f8>
   12fb4:	ldr	r0, [r4, #12]
   12fb8:	bl	10a7c <utf8proc_tolower@plt>
   12fbc:	str	r0, [r4, #12]
   12fc0:	ldr	r4, [r4, #4]
   12fc4:	cmp	r4, #0
   12fc8:	bne	12fb4 <error@@Base+0x5e8>
   12fcc:	add	sp, sp, #124	; 0x7c
   12fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fd4:	cmp	r3, #10
   12fd8:	movne	r2, #0
   12fdc:	andeq	r2, r2, #1
   12fe0:	cmp	r2, #0
   12fe4:	beq	13064 <error@@Base+0x698>
   12fe8:	cmp	r4, #0
   12fec:	moveq	r3, #0
   12ff0:	andne	r3, r5, #1
   12ff4:	cmp	r3, #0
   12ff8:	beq	13014 <error@@Base+0x648>
   12ffc:	ldr	r3, [r4, #12]
   13000:	cmp	r3, #32
   13004:	ldrbeq	r3, [r4, #8]
   13008:	ldrbeq	r2, [r6, #8]
   1300c:	orreq	r3, r3, r2
   13010:	strbeq	r3, [r4, #8]
   13014:	mov	r0, sl
   13018:	mov	r1, r6
   1301c:	bl	13718 <error@@Base+0xd4c>
   13020:	mov	r0, r6
   13024:	bl	10a28 <free@plt>
   13028:	subs	r6, r4, #0
   1302c:	beq	12f90 <error@@Base+0x5c4>
   13030:	ldr	r3, [r6, #12]
   13034:	ldr	r4, [r6, #4]
   13038:	cmp	r3, #32
   1303c:	eor	r2, r5, #1
   13040:	bne	12fd4 <error@@Base+0x608>
   13044:	cmp	r4, #0
   13048:	orreq	r2, r2, #1
   1304c:	cmp	r2, #0
   13050:	bne	12fe8 <error@@Base+0x61c>
   13054:	ldr	r2, [r4, #12]
   13058:	cmp	r2, #10
   1305c:	cmpne	r2, #32
   13060:	beq	12fe8 <error@@Base+0x61c>
   13064:	subs	r5, r3, #10
   13068:	movne	r5, #1
   1306c:	b	13028 <error@@Base+0x65c>
   13070:	mov	r7, #1
   13074:	mov	fp, #4
   13078:	mov	r8, #16
   1307c:	b	1308c <error@@Base+0x6c0>
   13080:	ldrsb	r4, [r9, r0]
   13084:	cmp	r4, #0
   13088:	ble	131a0 <error@@Base+0x7d4>
   1308c:	cmp	r4, #1
   13090:	strb	r0, [sp, #16]
   13094:	beq	130b8 <error@@Base+0x6ec>
   13098:	sub	r6, r4, #1
   1309c:	mov	r2, r6
   130a0:	mov	r3, r5
   130a4:	mov	r1, r7
   130a8:	add	r0, sp, #17
   130ac:	bl	10aa0 <fread@plt>
   130b0:	cmp	r6, r0
   130b4:	bne	131b0 <error@@Base+0x7e4>
   130b8:	add	r2, sp, #20
   130bc:	mov	r1, fp
   130c0:	add	r0, sp, #16
   130c4:	bl	10aac <utf8proc_iterate@plt>
   130c8:	cmp	r0, r4
   130cc:	bne	131a8 <error@@Base+0x7dc>
   130d0:	mov	r1, r8
   130d4:	mov	r0, r7
   130d8:	ldr	r4, [sp, #20]
   130dc:	bl	12a08 <error@@Base+0x3c>
   130e0:	mov	r3, #0
   130e4:	mov	r1, r0
   130e8:	strb	r3, [r0, #8]
   130ec:	str	r4, [r0, #12]
   130f0:	mov	r0, sl
   130f4:	bl	13634 <error@@Base+0xc68>
   130f8:	mov	r0, r5
   130fc:	bl	10b90 <getc@plt>
   13100:	cmn	r0, #1
   13104:	bne	13080 <error@@Base+0x6b4>
   13108:	b	12efc <error@@Base+0x530>
   1310c:	add	r0, sp, #20
   13110:	mov	r2, r5
   13114:	mov	r1, #99	; 0x63
   13118:	bl	10a40 <fgets@plt>
   1311c:	cmp	r0, #0
   13120:	beq	13188 <error@@Base+0x7bc>
   13124:	mov	r2, #51	; 0x33
   13128:	ldr	r1, [pc, #156]	; 131cc <error@@Base+0x800>
   1312c:	add	r0, sp, #20
   13130:	bl	10b78 <strncmp@plt>
   13134:	subs	r4, r0, #0
   13138:	bne	13188 <error@@Base+0x7bc>
   1313c:	ldr	r7, [pc, #140]	; 131d0 <error@@Base+0x804>
   13140:	mov	r6, #99	; 0x63
   13144:	mov	r2, r5
   13148:	mov	r1, r6
   1314c:	add	r0, sp, #20
   13150:	bl	10a40 <fgets@plt>
   13154:	cmp	r0, #0
   13158:	beq	13180 <error@@Base+0x7b4>
   1315c:	mov	r1, r7
   13160:	add	r0, sp, #20
   13164:	bl	109f8 <strcmp@plt>
   13168:	cmp	r0, #0
   1316c:	bne	13144 <error@@Base+0x778>
   13170:	add	r4, r4, #1
   13174:	sxth	r4, r4
   13178:	cmp	r4, #1
   1317c:	ble	13144 <error@@Base+0x778>
   13180:	mov	r3, #1
   13184:	b	13194 <error@@Base+0x7c8>
   13188:	mov	r0, r5
   1318c:	bl	10a64 <rewind@plt>
   13190:	mov	r3, #0
   13194:	ldr	r2, [sp, #8]
   13198:	strb	r3, [r2, #11]
   1319c:	b	12e0c <error@@Base+0x440>
   131a0:	ldr	r0, [pc, #44]	; 131d4 <error@@Base+0x808>
   131a4:	bl	129cc <error@@Base>
   131a8:	bl	10b60 <utf8proc_errmsg@plt>
   131ac:	bl	129cc <error@@Base>
   131b0:	ldr	r0, [pc, #32]	; 131d8 <error@@Base+0x80c>
   131b4:	bl	129cc <error@@Base>
   131b8:	ldr	r1, [pc, #28]	; 131dc <error@@Base+0x810>
   131bc:	ldr	r0, [pc, #28]	; 131e0 <error@@Base+0x814>
   131c0:	bl	12a54 <error@@Base+0x88>
   131c4:	andeq	r3, r1, r8, lsr #22
   131c8:	andeq	r7, r2, r8, lsl #28
   131cc:	andeq	r7, r1, r8, asr r0
   131d0:	muleq	r1, r0, r0
   131d4:	andeq	r7, r1, r8, asr #1
   131d8:	andeq	r7, r1, r0, ror #1
   131dc:	andeq	r7, r1, ip, lsr r0
   131e0:	andeq	r7, r1, r8, asr #32
   131e4:	push	{r4, lr}
   131e8:	bl	10a4c <utf8proc_encode_char@plt>
   131ec:	cmp	r0, #0
   131f0:	ble	131fc <error@@Base+0x830>
   131f4:	sxtb	r0, r0
   131f8:	pop	{r4, pc}
   131fc:	ldr	r0, [pc]	; 13204 <error@@Base+0x838>
   13200:	bl	129cc <error@@Base>
   13204:	strdeq	r7, [r1], -r8
   13208:	push	{r4, r5, r6, r7, r8, lr}
   1320c:	uxtb	r4, r0
   13210:	cmp	r4, #0
   13214:	mov	r5, r1
   13218:	mov	r8, r2
   1321c:	uxtb	r7, r3
   13220:	moveq	r6, r4
   13224:	bne	13294 <error@@Base+0x8c8>
   13228:	cmp	r5, #10
   1322c:	beq	13278 <error@@Base+0x8ac>
   13230:	mov	r0, r5
   13234:	bl	10a34 <utf8proc_get_property@plt>
   13238:	cmp	r5, #32
   1323c:	beq	132bc <error@@Base+0x8f0>
   13240:	ldrh	r3, [r0]
   13244:	cmp	r3, #29
   13248:	bhi	1325c <error@@Base+0x890>
   1324c:	mov	r1, #1
   13250:	ldr	r2, [pc, #220]	; 13334 <error@@Base+0x968>
   13254:	ands	r3, r2, r1, lsl r3
   13258:	bne	132bc <error@@Base+0x8f0>
   1325c:	cmp	r5, #255	; 0xff
   13260:	bls	13320 <error@@Base+0x954>
   13264:	mov	r2, r5
   13268:	add	r0, r8, r4
   1326c:	ldr	r1, [pc, #196]	; 13338 <error@@Base+0x96c>
   13270:	pop	{r4, r5, r6, r7, r8, lr}
   13274:	b	10b54 <sprintf@plt>
   13278:	ldr	r3, [pc, #188]	; 1333c <error@@Base+0x970>
   1327c:	cmp	r7, #0
   13280:	ldr	r1, [pc, #184]	; 13340 <error@@Base+0x974>
   13284:	add	r0, r8, r4
   13288:	movne	r1, r3
   1328c:	pop	{r4, r5, r6, r7, r8, lr}
   13290:	b	10b54 <sprintf@plt>
   13294:	mov	r1, r2
   13298:	mov	r0, #94	; 0x5e
   1329c:	bl	10a4c <utf8proc_encode_char@plt>
   132a0:	subs	r6, r0, #0
   132a4:	sxtbgt	r6, r6
   132a8:	movgt	r4, r6
   132ac:	sxthgt	r6, r6
   132b0:	bgt	13228 <error@@Base+0x85c>
   132b4:	ldr	r0, [pc, #136]	; 13344 <error@@Base+0x978>
   132b8:	bl	129cc <error@@Base>
   132bc:	mov	r0, r5
   132c0:	bl	10b00 <utf8proc_category@plt>
   132c4:	sub	r0, r0, #6
   132c8:	cmp	r0, #2
   132cc:	bhi	132f4 <error@@Base+0x928>
   132d0:	add	r1, r8, r4
   132d4:	ldr	r0, [pc, #108]	; 13348 <error@@Base+0x97c>
   132d8:	bl	10a4c <utf8proc_encode_char@plt>
   132dc:	cmp	r0, #0
   132e0:	sxtbgt	r0, r0
   132e4:	addgt	r6, r6, r0
   132e8:	sxthgt	r6, r6
   132ec:	movgt	r4, r6
   132f0:	ble	132b4 <error@@Base+0x8e8>
   132f4:	add	r1, r8, r4
   132f8:	mov	r0, r5
   132fc:	bl	10a4c <utf8proc_encode_char@plt>
   13300:	cmp	r0, #0
   13304:	ble	132b4 <error@@Base+0x8e8>
   13308:	sxtb	r0, r0
   1330c:	add	r6, r6, r0
   13310:	mov	r3, #0
   13314:	sxth	r6, r6
   13318:	strb	r3, [r8, r6]
   1331c:	pop	{r4, r5, r6, r7, r8, pc}
   13320:	mov	r2, r5
   13324:	add	r0, r8, r4
   13328:	ldr	r1, [pc, #28]	; 1334c <error@@Base+0x980>
   1332c:	pop	{r4, r5, r6, r7, r8, lr}
   13330:	b	10b54 <sprintf@plt>
   13334:	ldrshtcs	pc, [pc], #-254	; <UNPREDICTABLE>
   13338:	andeq	r7, r1, r0, lsr #2
   1333c:	andeq	r7, r1, r0, lsl r1
   13340:	andeq	r3, r1, r0, lsr #23
   13344:	strdeq	r7, [r1], -r8
   13348:	andeq	r2, r0, ip, asr #11
   1334c:	andeq	r7, r1, r8, lsl r1
   13350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13354:	mov	r6, r0
   13358:	sub	sp, sp, #20
   1335c:	mov	r0, r1
   13360:	ldr	r1, [pc, #432]	; 13518 <error@@Base+0xb4c>
   13364:	mov	r4, r2
   13368:	bl	12a9c <error@@Base+0xd0>
   1336c:	cmp	r4, #0
   13370:	mov	r5, r0
   13374:	beq	133bc <error@@Base+0x9f0>
   13378:	mov	r3, r0
   1337c:	mov	r2, #55	; 0x37
   13380:	mov	r1, #1
   13384:	ldr	r0, [pc, #400]	; 1351c <error@@Base+0xb50>
   13388:	bl	10a94 <fwrite@plt>
   1338c:	mov	r3, r5
   13390:	mov	r2, #55	; 0x37
   13394:	mov	r1, #1
   13398:	ldr	r0, [pc, #384]	; 13520 <error@@Base+0xb54>
   1339c:	bl	10a94 <fwrite@plt>
   133a0:	mov	r0, r5
   133a4:	blx	r4
   133a8:	mov	r3, r5
   133ac:	mov	r2, #55	; 0x37
   133b0:	mov	r1, #1
   133b4:	ldr	r0, [pc, #356]	; 13520 <error@@Base+0xb54>
   133b8:	bl	10a94 <fwrite@plt>
   133bc:	ldr	fp, [r6]
   133c0:	cmp	fp, #0
   133c4:	beq	13500 <error@@Base+0xb34>
   133c8:	ldr	r8, [pc, #340]	; 13524 <error@@Base+0xb58>
   133cc:	ldr	r7, [pc, #340]	; 13528 <error@@Base+0xb5c>
   133d0:	mov	r6, #0
   133d4:	b	13444 <error@@Base+0xa78>
   133d8:	cmp	r9, #10
   133dc:	ldrheq	r2, [r7]
   133e0:	strheq	r2, [sl]
   133e4:	beq	1342c <error@@Base+0xa60>
   133e8:	mov	r0, r9
   133ec:	bl	10a34 <utf8proc_get_property@plt>
   133f0:	cmp	r9, #32
   133f4:	beq	13484 <error@@Base+0xab8>
   133f8:	ldrh	r0, [r0]
   133fc:	cmp	r0, #29
   13400:	bhi	13414 <error@@Base+0xa48>
   13404:	mov	ip, #1
   13408:	ldr	r3, [pc, #284]	; 1352c <error@@Base+0xb60>
   1340c:	ands	r3, r3, ip, lsl r0
   13410:	bne	13484 <error@@Base+0xab8>
   13414:	cmp	r9, #255	; 0xff
   13418:	bls	134ec <error@@Base+0xb20>
   1341c:	mov	r2, r9
   13420:	mov	r0, sl
   13424:	mov	r1, r8
   13428:	bl	10b54 <sprintf@plt>
   1342c:	mov	r1, r5
   13430:	add	r0, sp, #4
   13434:	bl	10b6c <fputs@plt>
   13438:	ldr	fp, [fp, #4]
   1343c:	cmp	fp, #0
   13440:	beq	13500 <error@@Base+0xb34>
   13444:	ldrb	r1, [fp, #8]
   13448:	ldr	r9, [fp, #12]
   1344c:	cmp	r1, #0
   13450:	addeq	sl, sp, #4
   13454:	moveq	r4, r6
   13458:	beq	133d8 <error@@Base+0xa0c>
   1345c:	add	r1, sp, #4
   13460:	mov	r0, #94	; 0x5e
   13464:	bl	10a4c <utf8proc_encode_char@plt>
   13468:	subs	r4, r0, #0
   1346c:	ble	13510 <error@@Base+0xb44>
   13470:	sxtb	r4, r4
   13474:	add	r3, sp, #4
   13478:	add	sl, r3, r4
   1347c:	sxth	r4, r4
   13480:	b	133d8 <error@@Base+0xa0c>
   13484:	mov	r0, r9
   13488:	bl	10b00 <utf8proc_category@plt>
   1348c:	sub	r0, r0, #6
   13490:	cmp	r0, #2
   13494:	bhi	134c0 <error@@Base+0xaf4>
   13498:	mov	r1, sl
   1349c:	ldr	r0, [pc, #140]	; 13530 <error@@Base+0xb64>
   134a0:	bl	10a4c <utf8proc_encode_char@plt>
   134a4:	cmp	r0, #0
   134a8:	ble	13510 <error@@Base+0xb44>
   134ac:	sxtb	r0, r0
   134b0:	add	r4, r4, r0
   134b4:	add	r3, sp, #4
   134b8:	sxth	r4, r4
   134bc:	add	sl, r3, r4
   134c0:	mov	r1, sl
   134c4:	mov	r0, r9
   134c8:	bl	10a4c <utf8proc_encode_char@plt>
   134cc:	cmp	r0, #0
   134d0:	ble	13510 <error@@Base+0xb44>
   134d4:	sxtb	r0, r0
   134d8:	add	r4, r4, r0
   134dc:	add	r3, sp, #16
   134e0:	sxtah	r4, r3, r4
   134e4:	strb	r6, [r4, #-12]
   134e8:	b	1342c <error@@Base+0xa60>
   134ec:	mov	r2, r9
   134f0:	mov	r0, sl
   134f4:	ldr	r1, [pc, #56]	; 13534 <error@@Base+0xb68>
   134f8:	bl	10b54 <sprintf@plt>
   134fc:	b	1342c <error@@Base+0xa60>
   13500:	mov	r0, r5
   13504:	bl	12870 <__assert_fail@plt+0x1cd4>
   13508:	add	sp, sp, #20
   1350c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13510:	ldr	r0, [pc, #32]	; 13538 <error@@Base+0xb6c>
   13514:	bl	129cc <error@@Base>
   13518:	andeq	r3, r1, r0, ror fp
   1351c:	andeq	r7, r1, r8, asr r0
   13520:	muleq	r1, r0, r0
   13524:	andeq	r7, r1, r0, lsr #2
   13528:	andeq	r3, r1, r0, lsr #23
   1352c:	ldrshtcs	pc, [pc], #-254	; <UNPREDICTABLE>
   13530:	andeq	r2, r0, ip, asr #11
   13534:	andeq	r7, r1, r8, lsl r1
   13538:	strdeq	r7, [r1], -r8
   1353c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13540:	mov	r5, #0
   13544:	ldrb	r3, [r1]
   13548:	sub	sp, sp, #12
   1354c:	cmp	r3, r5
   13550:	str	r5, [sp, #4]
   13554:	beq	135c4 <error@@Base+0xbf8>
   13558:	mov	r4, r1
   1355c:	mov	r9, r0
   13560:	mvn	r8, #0
   13564:	mov	r7, #16
   13568:	mov	r6, #1
   1356c:	b	13598 <error@@Base+0xbcc>
   13570:	ldr	sl, [sp, #4]
   13574:	bl	12a08 <error@@Base+0x3c>
   13578:	mov	r1, r0
   1357c:	strb	r5, [r0, #8]
   13580:	str	sl, [r0, #12]
   13584:	mov	r0, r9
   13588:	bl	13634 <error@@Base+0xc68>
   1358c:	ldrb	r3, [r4, fp]!
   13590:	cmp	r3, #0
   13594:	beq	135c4 <error@@Base+0xbf8>
   13598:	mov	r1, r8
   1359c:	add	r2, sp, #4
   135a0:	mov	r0, r4
   135a4:	bl	10aac <utf8proc_iterate@plt>
   135a8:	mov	r1, r7
   135ac:	subs	fp, r0, #0
   135b0:	mov	r0, r6
   135b4:	bgt	13570 <error@@Base+0xba4>
   135b8:	mov	r0, #0
   135bc:	add	sp, sp, #12
   135c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135c4:	mov	r0, #1
   135c8:	add	sp, sp, #12
   135cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135d0:	mov	r3, #0
   135d4:	str	r3, [r0, #4]
   135d8:	str	r3, [r0]
   135dc:	str	r3, [r0, #8]
   135e0:	str	r3, [r0, #12]
   135e4:	bx	lr
   135e8:	ldr	r3, [r0]
   135ec:	mov	r2, #0
   135f0:	cmp	r3, r2
   135f4:	push	{r4, lr}
   135f8:	mov	r4, r0
   135fc:	stm	r1, {r2, r3}
   13600:	str	r1, [r0]
   13604:	streq	r1, [r0, #4]
   13608:	ldr	r0, [r0, #8]
   1360c:	strne	r1, [r3]
   13610:	cmp	r0, #0
   13614:	beq	13624 <error@@Base+0xc58>
   13618:	bl	10a28 <free@plt>
   1361c:	mov	r3, #0
   13620:	str	r3, [r4, #8]
   13624:	ldr	r3, [r4, #12]
   13628:	add	r3, r3, #1
   1362c:	str	r3, [r4, #12]
   13630:	pop	{r4, pc}
   13634:	ldr	r3, [r0, #4]
   13638:	mov	r2, #0
   1363c:	cmp	r3, r2
   13640:	push	{r4, lr}
   13644:	mov	r4, r0
   13648:	str	r3, [r1]
   1364c:	str	r2, [r1, #4]
   13650:	streq	r1, [r0]
   13654:	ldr	r0, [r0, #8]
   13658:	strne	r1, [r3, #4]
   1365c:	cmp	r0, #0
   13660:	str	r1, [r4, #4]
   13664:	beq	13674 <error@@Base+0xca8>
   13668:	bl	10a28 <free@plt>
   1366c:	mov	r3, #0
   13670:	str	r3, [r4, #8]
   13674:	ldr	r3, [r4, #12]
   13678:	add	r3, r3, #1
   1367c:	str	r3, [r4, #12]
   13680:	pop	{r4, pc}
   13684:	ldr	r3, [r2]
   13688:	push	{r4, lr}
   1368c:	cmp	r3, #0
   13690:	str	r3, [r1]
   13694:	str	r2, [r1, #4]
   13698:	mov	r4, r0
   1369c:	streq	r1, [r0]
   136a0:	ldr	r0, [r0, #8]
   136a4:	strne	r1, [r3, #4]
   136a8:	cmp	r0, #0
   136ac:	str	r1, [r2]
   136b0:	beq	136c0 <error@@Base+0xcf4>
   136b4:	bl	10a28 <free@plt>
   136b8:	mov	r3, #0
   136bc:	str	r3, [r4, #8]
   136c0:	ldr	r3, [r4, #12]
   136c4:	add	r3, r3, #1
   136c8:	str	r3, [r4, #12]
   136cc:	pop	{r4, pc}
   136d0:	ldr	r3, [r1, #4]
   136d4:	push	{r4, lr}
   136d8:	cmp	r3, #0
   136dc:	stm	r2, {r1, r3}
   136e0:	mov	r4, r0
   136e4:	str	r2, [r1, #4]
   136e8:	streq	r2, [r0, #4]
   136ec:	ldr	r0, [r0, #8]
   136f0:	strne	r2, [r3]
   136f4:	cmp	r0, #0
   136f8:	beq	13708 <error@@Base+0xd3c>
   136fc:	bl	10a28 <free@plt>
   13700:	mov	r3, #0
   13704:	str	r3, [r4, #8]
   13708:	ldr	r3, [r4, #12]
   1370c:	add	r3, r3, #1
   13710:	str	r3, [r4, #12]
   13714:	pop	{r4, pc}
   13718:	ldr	r3, [r1]
   1371c:	ldr	r2, [r1, #4]
   13720:	cmp	r3, #0
   13724:	push	{r4, r5, r6, lr}
   13728:	mov	r4, r0
   1372c:	strne	r2, [r3, #4]
   13730:	ldrne	r2, [r1, #4]
   13734:	streq	r2, [r0]
   13738:	cmp	r2, #0
   1373c:	streq	r3, [r0, #4]
   13740:	ldr	r0, [r0, #8]
   13744:	mov	r5, #0
   13748:	strne	r3, [r2]
   1374c:	cmp	r0, r5
   13750:	str	r5, [r1, #4]
   13754:	str	r5, [r1]
   13758:	beq	13764 <error@@Base+0xd98>
   1375c:	bl	10a28 <free@plt>
   13760:	str	r5, [r4, #8]
   13764:	ldr	r3, [r4, #12]
   13768:	sub	r3, r3, #1
   1376c:	str	r3, [r4, #12]
   13770:	pop	{r4, r5, r6, pc}
   13774:	ldr	r3, [r0, #8]
   13778:	cmp	r3, #0
   1377c:	bxne	lr
   13780:	ldr	r3, [r0, #12]
   13784:	cmp	r3, #0
   13788:	bxeq	lr
   1378c:	push	{r4, lr}
   13790:	mov	r1, #4
   13794:	mov	r4, r0
   13798:	mov	r0, r3
   1379c:	bl	12a08 <error@@Base+0x3c>
   137a0:	ldr	r3, [r4]
   137a4:	cmp	r3, #0
   137a8:	str	r0, [r4, #8]
   137ac:	popeq	{r4, pc}
   137b0:	sub	r0, r0, #4
   137b4:	str	r3, [r0, #4]!
   137b8:	ldr	r3, [r3, #4]
   137bc:	cmp	r3, #0
   137c0:	bne	137b4 <error@@Base+0xde8>
   137c4:	pop	{r4, pc}
   137c8:	push	{r4, r5, r6, r7, r8, lr}
   137cc:	ldr	r4, [r0]
   137d0:	cmp	r4, #0
   137d4:	popeq	{r4, r5, r6, r7, r8, pc}
   137d8:	mov	r6, r1
   137dc:	mov	r5, r0
   137e0:	mov	r7, #0
   137e4:	ldr	r3, [r4]
   137e8:	ldr	r2, [r4, #4]
   137ec:	cmp	r3, #0
   137f0:	strne	r2, [r3, #4]
   137f4:	ldrne	r2, [r4, #4]
   137f8:	ldr	r0, [r5, #8]
   137fc:	streq	r2, [r5]
   13800:	cmp	r2, #0
   13804:	strne	r3, [r2]
   13808:	streq	r3, [r5, #4]
   1380c:	cmp	r0, #0
   13810:	str	r7, [r4, #4]
   13814:	str	r7, [r4]
   13818:	beq	13824 <error@@Base+0xe58>
   1381c:	bl	10a28 <free@plt>
   13820:	str	r7, [r5, #8]
   13824:	ldr	r3, [r5, #12]
   13828:	mov	r0, r4
   1382c:	sub	r3, r3, #1
   13830:	str	r3, [r5, #12]
   13834:	blx	r6
   13838:	ldr	r4, [r5]
   1383c:	cmp	r4, #0
   13840:	bne	137e4 <error@@Base+0xe18>
   13844:	pop	{r4, r5, r6, r7, r8, pc}
   13848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1384c:	sub	sp, sp, #12
   13850:	lsl	r3, r1, #2
   13854:	str	r1, [sp]
   13858:	str	r3, [sp, #4]
   1385c:	ldr	r5, [pc, #344]	; 139bc <error@@Base+0xff0>
   13860:	ldr	r3, [sp]
   13864:	mov	r9, r0
   13868:	ldr	r1, [r5]
   1386c:	cmp	r9, r3
   13870:	movlt	r4, r3
   13874:	ldr	r7, [r1, r9, lsl #2]
   13878:	movlt	r8, r9
   1387c:	bge	139a8 <error@@Base+0xfdc>
   13880:	lsl	r6, r4, #2
   13884:	b	1388c <error@@Base+0xec0>
   13888:	ldr	r1, [r5]
   1388c:	ldr	r1, [r1, r6]
   13890:	ldr	r3, [r5, #4]
   13894:	mov	r0, r7
   13898:	blx	r3
   1389c:	cmp	r0, #0
   138a0:	bge	138f0 <error@@Base+0xf24>
   138a4:	sub	r4, r4, #1
   138a8:	cmp	r4, r8
   138ac:	sub	r6, r6, #4
   138b0:	bgt	13888 <error@@Base+0xebc>
   138b4:	bne	138ec <error@@Base+0xf20>
   138b8:	ldr	r1, [r5]
   138bc:	mov	fp, r4
   138c0:	add	r0, r1, fp, lsl #2
   138c4:	sub	r1, fp, #1
   138c8:	cmp	r9, r1
   138cc:	str	r7, [r0]
   138d0:	blt	1398c <error@@Base+0xfc0>
   138d4:	ldr	r3, [sp]
   138d8:	add	r9, r4, #1
   138dc:	cmp	r9, r3
   138e0:	blt	13868 <error@@Base+0xe9c>
   138e4:	add	sp, sp, #12
   138e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138ec:	lsl	r6, r4, #2
   138f0:	ldr	r1, [r5]
   138f4:	add	fp, r8, #1
   138f8:	cmp	fp, r4
   138fc:	ldr	r2, [r1, r6]
   13900:	add	r0, r1, r6
   13904:	str	r2, [r1, r8, lsl #2]
   13908:	lsl	r8, r8, #2
   1390c:	bge	13998 <error@@Base+0xfcc>
   13910:	add	sl, r8, #4
   13914:	b	1392c <error@@Base+0xf60>
   13918:	add	fp, fp, #1
   1391c:	cmp	fp, r4
   13920:	add	sl, sl, #4
   13924:	beq	13970 <error@@Base+0xfa4>
   13928:	ldr	r1, [r5]
   1392c:	ldr	r1, [r1, sl]
   13930:	ldr	r8, [r5, #4]
   13934:	mov	r0, r7
   13938:	blx	r8
   1393c:	cmp	r0, #0
   13940:	bgt	13918 <error@@Base+0xf4c>
   13944:	ldr	r1, [r5]
   13948:	mov	r8, fp
   1394c:	add	r0, r1, r6
   13950:	sub	r4, r4, #1
   13954:	ldr	r2, [r1, sl]
   13958:	cmp	r4, fp
   1395c:	str	r2, [r0]
   13960:	bgt	13880 <error@@Base+0xeb4>
   13964:	mov	fp, r4
   13968:	mov	r4, r8
   1396c:	b	138c0 <error@@Base+0xef4>
   13970:	ldr	r0, [r5]
   13974:	add	r0, r0, r6
   13978:	sub	r1, fp, #1
   1397c:	cmp	r9, r1
   13980:	mov	r4, fp
   13984:	str	r7, [r0]
   13988:	bge	138d4 <error@@Base+0xf08>
   1398c:	mov	r0, r9
   13990:	bl	13848 <error@@Base+0xe7c>
   13994:	b	138d4 <error@@Base+0xf08>
   13998:	beq	13978 <error@@Base+0xfac>
   1399c:	lsl	sl, fp, #2
   139a0:	mov	r8, fp
   139a4:	b	13950 <error@@Base+0xf84>
   139a8:	mov	fp, r3
   139ac:	ldr	r3, [sp, #4]
   139b0:	mov	r4, r9
   139b4:	add	r0, r1, r3
   139b8:	b	138c4 <error@@Base+0xef8>
   139bc:	andeq	r8, r2, r0, asr #2
   139c0:	cmp	r0, #1
   139c4:	mov	ip, r1
   139c8:	bxle	lr
   139cc:	ldr	r3, [pc, #16]	; 139e4 <error@@Base+0x1018>
   139d0:	sub	r1, r0, #1
   139d4:	mov	r0, #0
   139d8:	str	ip, [r3]
   139dc:	str	r2, [r3, #4]
   139e0:	b	13848 <error@@Base+0xe7c>
   139e4:	andeq	r8, r2, r0, asr #2
   139e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   139ec:	mov	r7, r0
   139f0:	ldr	r6, [pc, #72]	; 13a40 <error@@Base+0x1074>
   139f4:	ldr	r5, [pc, #72]	; 13a44 <error@@Base+0x1078>
   139f8:	add	r6, pc, r6
   139fc:	add	r5, pc, r5
   13a00:	sub	r6, r6, r5
   13a04:	mov	r8, r1
   13a08:	mov	r9, r2
   13a0c:	bl	109cc <calloc@plt-0x20>
   13a10:	asrs	r6, r6, #2
   13a14:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a18:	mov	r4, #0
   13a1c:	add	r4, r4, #1
   13a20:	ldr	r3, [r5], #4
   13a24:	mov	r2, r9
   13a28:	mov	r1, r8
   13a2c:	mov	r0, r7
   13a30:	blx	r3
   13a34:	cmp	r6, r4
   13a38:	bne	13a1c <error@@Base+0x1050>
   13a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a40:	andeq	r4, r1, r0, lsl #8
   13a44:	strdeq	r4, [r1], -r8
   13a48:	bx	lr

Disassembly of section .fini:

00013a4c <.fini>:
   13a4c:	push	{r3, lr}
   13a50:	pop	{r3, pc}
