
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

000109ec <.init>:
   109ec:	push	{r3, lr}
   109f0:	bl	10c14 <__assert_fail@plt+0x4c>
   109f4:	pop	{r3, pc}

Disassembly of section .plt:

000109f8 <calloc@plt-0x14>:
   109f8:	push	{lr}		; (str lr, [sp, #-4]!)
   109fc:	ldr	lr, [pc, #4]	; 10a08 <calloc@plt-0x4>
   10a00:	add	lr, pc, lr
   10a04:	ldr	pc, [lr, #8]!
   10a08:	strdeq	r6, [r1], -r8

00010a0c <calloc@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #90112	; 0x16000
   10a14:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a18 <strcmp@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #90112	; 0x16000
   10a20:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a24 <strtol@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #90112	; 0x16000
   10a2c:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a30 <printf@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #90112	; 0x16000
   10a38:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a3c <fopen@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #90112	; 0x16000
   10a44:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a48 <free@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #90112	; 0x16000
   10a50:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a54 <utf8proc_get_property@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #90112	; 0x16000
   10a5c:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a60 <fgets@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #90112	; 0x16000
   10a68:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a6c <utf8proc_encode_char@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #90112	; 0x16000
   10a74:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a78 <strdup@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #90112	; 0x16000
   10a80:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a84 <rewind@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #90112	; 0x16000
   10a8c:	ldr	pc, [ip, #1448]!	; 0x5a8

00010a90 <unlink@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #90112	; 0x16000
   10a98:	ldr	pc, [ip, #1440]!	; 0x5a0

00010a9c <utf8proc_tolower@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #90112	; 0x16000
   10aa4:	ldr	pc, [ip, #1432]!	; 0x598

00010aa8 <__xstat@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #90112	; 0x16000
   10ab0:	ldr	pc, [ip, #1424]!	; 0x590

00010ab4 <fwrite@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #90112	; 0x16000
   10abc:	ldr	pc, [ip, #1416]!	; 0x588

00010ac0 <fread@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #90112	; 0x16000
   10ac8:	ldr	pc, [ip, #1408]!	; 0x580

00010acc <utf8proc_iterate@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #90112	; 0x16000
   10ad4:	ldr	pc, [ip, #1400]!	; 0x578

00010ad8 <puts@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #90112	; 0x16000
   10ae0:	ldr	pc, [ip, #1392]!	; 0x570

00010ae4 <malloc@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #90112	; 0x16000
   10aec:	ldr	pc, [ip, #1384]!	; 0x568

00010af0 <__libc_start_main@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #90112	; 0x16000
   10af8:	ldr	pc, [ip, #1376]!	; 0x560

00010afc <__sysv_signal@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #90112	; 0x16000
   10b04:	ldr	pc, [ip, #1368]!	; 0x558

00010b08 <__gmon_start__@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #90112	; 0x16000
   10b10:	ldr	pc, [ip, #1360]!	; 0x550

00010b14 <getpid@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #90112	; 0x16000
   10b1c:	ldr	pc, [ip, #1352]!	; 0x548

00010b20 <exit@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #90112	; 0x16000
   10b28:	ldr	pc, [ip, #1344]!	; 0x540

00010b2c <utf8proc_category@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #90112	; 0x16000
   10b34:	ldr	pc, [ip, #1336]!	; 0x538

00010b38 <strlen@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #90112	; 0x16000
   10b40:	ldr	pc, [ip, #1328]!	; 0x530

00010b44 <fprintf@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #90112	; 0x16000
   10b4c:	ldr	pc, [ip, #1320]!	; 0x528

00010b50 <__isoc99_sscanf@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #90112	; 0x16000
   10b58:	ldr	pc, [ip, #1312]!	; 0x520

00010b5c <fclose@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #90112	; 0x16000
   10b64:	ldr	pc, [ip, #1304]!	; 0x518

00010b68 <utf8proc_NFC@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #90112	; 0x16000
   10b70:	ldr	pc, [ip, #1296]!	; 0x510

00010b74 <fputc@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #90112	; 0x16000
   10b7c:	ldr	pc, [ip, #1288]!	; 0x508

00010b80 <sprintf@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #90112	; 0x16000
   10b88:	ldr	pc, [ip, #1280]!	; 0x500

00010b8c <utf8proc_errmsg@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #90112	; 0x16000
   10b94:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b98 <fputs@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #90112	; 0x16000
   10ba0:	ldr	pc, [ip, #1264]!	; 0x4f0

00010ba4 <strncmp@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #90112	; 0x16000
   10bac:	ldr	pc, [ip, #1256]!	; 0x4e8

00010bb0 <abort@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #90112	; 0x16000
   10bb8:	ldr	pc, [ip, #1248]!	; 0x4e0

00010bbc <getc@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #90112	; 0x16000
   10bc4:	ldr	pc, [ip, #1240]!	; 0x4d8

00010bc8 <__assert_fail@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #90112	; 0x16000
   10bd0:	ldr	pc, [ip, #1232]!	; 0x4d0

Disassembly of section .text:

00010bd8 <error@@Base-0x1c40>:
   10bd8:	mov	fp, #0
   10bdc:	mov	lr, #0
   10be0:	pop	{r1}		; (ldr r1, [sp], #4)
   10be4:	mov	r2, sp
   10be8:	push	{r2}		; (str r2, [sp, #-4]!)
   10bec:	push	{r0}		; (str r0, [sp, #-4]!)
   10bf0:	ldr	ip, [pc, #16]	; 10c08 <__assert_fail@plt+0x40>
   10bf4:	push	{ip}		; (str ip, [sp, #-4]!)
   10bf8:	ldr	r0, [pc, #12]	; 10c0c <__assert_fail@plt+0x44>
   10bfc:	ldr	r3, [pc, #12]	; 10c10 <__assert_fail@plt+0x48>
   10c00:	bl	10af0 <__libc_start_main@plt>
   10c04:	bl	10bb0 <abort@plt>
   10c08:	andeq	r3, r1, ip, lsr r3
   10c0c:	ldrdeq	r0, [r1], -ip
   10c10:	ldrdeq	r3, [r1], -ip
   10c14:	ldr	r3, [pc, #20]	; 10c30 <__assert_fail@plt+0x68>
   10c18:	ldr	r2, [pc, #20]	; 10c34 <__assert_fail@plt+0x6c>
   10c1c:	add	r3, pc, r3
   10c20:	ldr	r2, [r3, r2]
   10c24:	cmp	r2, #0
   10c28:	bxeq	lr
   10c2c:	b	10b08 <__gmon_start__@plt>
   10c30:	ldrdeq	r6, [r1], -ip
   10c34:	andeq	r0, r0, r4, lsr #1
   10c38:	ldr	r0, [pc, #24]	; 10c58 <__assert_fail@plt+0x90>
   10c3c:	ldr	r3, [pc, #24]	; 10c5c <__assert_fail@plt+0x94>
   10c40:	cmp	r3, r0
   10c44:	bxeq	lr
   10c48:	ldr	r3, [pc, #16]	; 10c60 <__assert_fail@plt+0x98>
   10c4c:	cmp	r3, #0
   10c50:	bxeq	lr
   10c54:	bx	r3
   10c58:	andeq	r7, r2, r4, asr #1
   10c5c:	andeq	r7, r2, r4, asr #1
   10c60:	andeq	r0, r0, r0
   10c64:	ldr	r0, [pc, #36]	; 10c90 <__assert_fail@plt+0xc8>
   10c68:	ldr	r1, [pc, #36]	; 10c94 <__assert_fail@plt+0xcc>
   10c6c:	sub	r1, r1, r0
   10c70:	asr	r1, r1, #2
   10c74:	add	r1, r1, r1, lsr #31
   10c78:	asrs	r1, r1, #1
   10c7c:	bxeq	lr
   10c80:	ldr	r3, [pc, #16]	; 10c98 <__assert_fail@plt+0xd0>
   10c84:	cmp	r3, #0
   10c88:	bxeq	lr
   10c8c:	bx	r3
   10c90:	andeq	r7, r2, r4, asr #1
   10c94:	andeq	r7, r2, r4, asr #1
   10c98:	andeq	r0, r0, r0
   10c9c:	push	{r4, lr}
   10ca0:	ldr	r4, [pc, #24]	; 10cc0 <__assert_fail@plt+0xf8>
   10ca4:	ldrb	r3, [r4]
   10ca8:	cmp	r3, #0
   10cac:	popne	{r4, pc}
   10cb0:	bl	10c38 <__assert_fail@plt+0x70>
   10cb4:	mov	r3, #1
   10cb8:	strb	r3, [r4]
   10cbc:	pop	{r4, pc}
   10cc0:	ldrdeq	r7, [r2], -r8
   10cc4:	b	10c64 <__assert_fail@plt+0x9c>
   10cc8:	str	r4, [sp, #-8]!
   10ccc:	str	lr, [sp, #4]
   10cd0:	ldr	r1, [r1, #8]
   10cd4:	ldr	r0, [r0, #8]
   10cd8:	bl	1261c <__assert_fail@plt+0x1a54>
   10cdc:	ldr	r4, [sp]
   10ce0:	add	sp, sp, #4
   10ce4:	pop	{pc}		; (ldr pc, [sp], #4)
   10ce8:	ldr	r2, [r0, #12]
   10cec:	ldr	r3, [r1, #12]
   10cf0:	cmp	r2, r3
   10cf4:	beq	10d00 <__assert_fail@plt+0x138>
   10cf8:	sub	r0, r3, r2
   10cfc:	bx	lr
   10d00:	str	r4, [sp, #-8]!
   10d04:	str	lr, [sp, #4]
   10d08:	bl	10cc8 <__assert_fail@plt+0x100>
   10d0c:	ldr	r4, [sp]
   10d10:	add	sp, sp, #4
   10d14:	pop	{pc}		; (ldr pc, [sp], #4)
   10d18:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10d1c:	strd	r6, [sp, #8]
   10d20:	str	r8, [sp, #16]
   10d24:	str	lr, [sp, #20]
   10d28:	movw	r5, #29004	; 0x714c
   10d2c:	movt	r5, #2
   10d30:	movw	r2, #28848	; 0x70b0
   10d34:	movt	r2, #2
   10d38:	mov	r1, r0
   10d3c:	mov	r0, r5
   10d40:	bl	12c5c <error@@Base+0x444>
   10d44:	movw	r4, #29020	; 0x715c
   10d48:	movt	r4, #2
   10d4c:	mov	r1, r5
   10d50:	mov	r0, r4
   10d54:	bl	1204c <__assert_fail@plt+0x1484>
   10d58:	ldr	r4, [r4]
   10d5c:	cmp	r4, #0
   10d60:	beq	10d94 <__assert_fail@plt+0x1cc>
   10d64:	movw	r5, #29036	; 0x716c
   10d68:	movt	r5, #2
   10d6c:	mov	r7, #0
   10d70:	mov	r6, #1
   10d74:	mov	r3, r7
   10d78:	mov	r2, r6
   10d7c:	ldr	r1, [r4, #8]
   10d80:	mov	r0, r5
   10d84:	bl	117f8 <__assert_fail@plt+0xc30>
   10d88:	ldr	r4, [r4, #4]
   10d8c:	cmp	r4, #0
   10d90:	bne	10d74 <__assert_fail@plt+0x1ac>
   10d94:	movw	r1, #2632	; 0xa48
   10d98:	movt	r1, #1
   10d9c:	movw	r0, #29004	; 0x714c
   10da0:	movt	r0, #2
   10da4:	bl	11128 <__assert_fail@plt+0x560>
   10da8:	movw	r1, #9512	; 0x2528
   10dac:	movt	r1, #1
   10db0:	movw	r0, #29020	; 0x715c
   10db4:	movt	r0, #2
   10db8:	bl	11128 <__assert_fail@plt+0x560>
   10dbc:	ldrd	r4, [sp]
   10dc0:	ldrd	r6, [sp, #8]
   10dc4:	ldr	r8, [sp, #16]
   10dc8:	add	sp, sp, #20
   10dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   10dd0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10dd4:	strd	r6, [sp, #8]
   10dd8:	str	r8, [sp, #16]
   10ddc:	str	lr, [sp, #20]
   10de0:	movw	r0, #13132	; 0x334c
   10de4:	movt	r0, #1
   10de8:	bl	10ad8 <puts@plt>
   10dec:	ldr	r3, [pc, #128]	; 10e74 <__assert_fail@plt+0x2ac>
   10df0:	ldr	r3, [r3, #3956]	; 0xf74
   10df4:	cmp	r3, #0
   10df8:	ble	10e6c <__assert_fail@plt+0x2a4>
   10dfc:	mov	r6, #0
   10e00:	mov	r4, r6
   10e04:	ldr	r5, [pc, #104]	; 10e74 <__assert_fail@plt+0x2ac>
   10e08:	movw	r7, #13144	; 0x3358
   10e0c:	movt	r7, #1
   10e10:	ldr	r3, [r5, #3952]	; 0xf70
   10e14:	ldr	r3, [r3, r4, lsl #2]
   10e18:	ldr	r2, [r3, #8]
   10e1c:	ldr	r1, [r3, #12]
   10e20:	mov	r0, r7
   10e24:	bl	10a30 <printf@plt>
   10e28:	ldr	r3, [r5, #3952]	; 0xf70
   10e2c:	ldr	r3, [r3, r4, lsl #2]
   10e30:	ldr	r3, [r3, #12]
   10e34:	add	r6, r6, r3
   10e38:	add	r4, r4, #1
   10e3c:	ldr	r3, [r5, #3956]	; 0xf74
   10e40:	cmp	r3, r4
   10e44:	bgt	10e10 <__assert_fail@plt+0x248>
   10e48:	mov	r1, r6
   10e4c:	movw	r0, #13156	; 0x3364
   10e50:	movt	r0, #1
   10e54:	bl	10a30 <printf@plt>
   10e58:	ldrd	r4, [sp]
   10e5c:	ldrd	r6, [sp, #8]
   10e60:	ldr	r8, [sp, #16]
   10e64:	add	sp, sp, #20
   10e68:	pop	{pc}		; (ldr pc, [sp], #4)
   10e6c:	mov	r6, #0
   10e70:	b	10e48 <__assert_fail@plt+0x280>
   10e74:	andeq	r8, r2, ip, ror #2
   10e78:	str	r4, [sp, #-8]!
   10e7c:	str	lr, [sp, #4]
   10e80:	movw	r4, #29036	; 0x716c
   10e84:	movt	r4, #2
   10e88:	mov	r0, r4
   10e8c:	bl	11e2c <__assert_fail@plt+0x1264>
   10e90:	add	r4, r4, #4096	; 0x1000
   10e94:	movw	r2, #3272	; 0xcc8
   10e98:	movt	r2, #1
   10e9c:	ldr	r1, [r4, #3952]	; 0xf70
   10ea0:	ldr	r0, [r4, #3956]	; 0xf74
   10ea4:	bl	112dc <__assert_fail@plt+0x714>
   10ea8:	bl	10dd0 <__assert_fail@plt+0x208>
   10eac:	movw	r0, #13488	; 0x34b0
   10eb0:	movt	r0, #1
   10eb4:	bl	10ad8 <puts@plt>
   10eb8:	movw	r2, #3304	; 0xce8
   10ebc:	movt	r2, #1
   10ec0:	ldr	r1, [r4, #3952]	; 0xf70
   10ec4:	ldr	r0, [r4, #3956]	; 0xf74
   10ec8:	bl	112dc <__assert_fail@plt+0x714>
   10ecc:	bl	10dd0 <__assert_fail@plt+0x208>
   10ed0:	ldr	r4, [sp]
   10ed4:	add	sp, sp, #4
   10ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   10edc:	strd	r4, [sp, #-12]!
   10ee0:	str	lr, [sp, #8]
   10ee4:	sub	sp, sp, #12
   10ee8:	str	r0, [sp, #4]
   10eec:	mov	r5, r1
   10ef0:	mov	r3, #0
   10ef4:	movw	r2, #13172	; 0x3374
   10ef8:	movt	r2, #1
   10efc:	add	r0, sp, #4
   10f00:	bl	12984 <error@@Base+0x16c>
   10f04:	ldr	r3, [sp, #4]
   10f08:	cmp	r3, #0
   10f0c:	beq	10f3c <__assert_fail@plt+0x374>
   10f10:	subgt	r5, r5, #4
   10f14:	movgt	r4, #0
   10f18:	ble	10f34 <__assert_fail@plt+0x36c>
   10f1c:	ldr	r0, [r5, #4]!
   10f20:	bl	10d18 <__assert_fail@plt+0x150>
   10f24:	add	r4, r4, #1
   10f28:	ldr	r3, [sp, #4]
   10f2c:	cmp	r3, r4
   10f30:	bgt	10f1c <__assert_fail@plt+0x354>
   10f34:	bl	10e78 <__assert_fail@plt+0x2b0>
   10f38:	bl	127b8 <__assert_fail@plt+0x1bf0>
   10f3c:	movw	r0, #13208	; 0x3398
   10f40:	movt	r0, #1
   10f44:	bl	12818 <error@@Base>
   10f48:	str	r4, [sp, #-8]!
   10f4c:	str	lr, [sp, #4]
   10f50:	mov	r4, r0
   10f54:	str	r1, [r2]
   10f58:	str	r3, [r2, #4]
   10f5c:	cmp	r1, #0
   10f60:	strne	r2, [r1, #4]
   10f64:	streq	r2, [r0]
   10f68:	cmp	r3, #0
   10f6c:	strne	r2, [r3]
   10f70:	streq	r2, [r0, #4]
   10f74:	ldr	r0, [r0, #8]
   10f78:	cmp	r0, #0
   10f7c:	beq	10f8c <__assert_fail@plt+0x3c4>
   10f80:	bl	10a48 <free@plt>
   10f84:	mov	r3, #0
   10f88:	str	r3, [r4, #8]
   10f8c:	ldr	r3, [r4, #12]
   10f90:	add	r3, r3, #1
   10f94:	str	r3, [r4, #12]
   10f98:	ldr	r4, [sp]
   10f9c:	add	sp, sp, #4
   10fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   10fa4:	mov	r3, #0
   10fa8:	str	r3, [r0, #4]
   10fac:	str	r3, [r0]
   10fb0:	str	r3, [r0, #8]
   10fb4:	str	r3, [r0, #12]
   10fb8:	bx	lr
   10fbc:	str	r4, [sp, #-8]!
   10fc0:	str	lr, [sp, #4]
   10fc4:	ldr	r3, [r0]
   10fc8:	mov	r2, r1
   10fcc:	mov	r1, #0
   10fd0:	bl	10f48 <__assert_fail@plt+0x380>
   10fd4:	ldr	r4, [sp]
   10fd8:	add	sp, sp, #4
   10fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   10fe0:	str	r4, [sp, #-8]!
   10fe4:	str	lr, [sp, #4]
   10fe8:	mov	r3, #0
   10fec:	mov	r2, r1
   10ff0:	ldr	r1, [r0, #4]
   10ff4:	bl	10f48 <__assert_fail@plt+0x380>
   10ff8:	ldr	r4, [sp]
   10ffc:	add	sp, sp, #4
   11000:	pop	{pc}		; (ldr pc, [sp], #4)
   11004:	str	r4, [sp, #-8]!
   11008:	str	lr, [sp, #4]
   1100c:	mov	ip, r2
   11010:	mov	r3, r2
   11014:	mov	r2, r1
   11018:	ldr	r1, [ip]
   1101c:	bl	10f48 <__assert_fail@plt+0x380>
   11020:	ldr	r4, [sp]
   11024:	add	sp, sp, #4
   11028:	pop	{pc}		; (ldr pc, [sp], #4)
   1102c:	str	r4, [sp, #-8]!
   11030:	str	lr, [sp, #4]
   11034:	ldr	r3, [r1, #4]
   11038:	bl	10f48 <__assert_fail@plt+0x380>
   1103c:	ldr	r4, [sp]
   11040:	add	sp, sp, #4
   11044:	pop	{pc}		; (ldr pc, [sp], #4)
   11048:	str	r4, [sp, #-8]!
   1104c:	str	lr, [sp, #4]
   11050:	mov	r4, r0
   11054:	ldr	r3, [r1]
   11058:	cmp	r3, #0
   1105c:	ldrne	r2, [r1, #4]
   11060:	strne	r2, [r3, #4]
   11064:	ldreq	r3, [r1, #4]
   11068:	streq	r3, [r0]
   1106c:	ldr	r3, [r1, #4]
   11070:	cmp	r3, #0
   11074:	ldrne	r2, [r1]
   11078:	strne	r2, [r3]
   1107c:	ldreq	r3, [r1]
   11080:	streq	r3, [r0, #4]
   11084:	mov	r3, #0
   11088:	str	r3, [r1, #4]
   1108c:	str	r3, [r1]
   11090:	ldr	r0, [r0, #8]
   11094:	cmp	r0, r3
   11098:	beq	110a8 <__assert_fail@plt+0x4e0>
   1109c:	bl	10a48 <free@plt>
   110a0:	mov	r3, #0
   110a4:	str	r3, [r4, #8]
   110a8:	ldr	r3, [r4, #12]
   110ac:	sub	r3, r3, #1
   110b0:	str	r3, [r4, #12]
   110b4:	ldr	r4, [sp]
   110b8:	add	sp, sp, #4
   110bc:	pop	{pc}		; (ldr pc, [sp], #4)
   110c0:	ldr	r3, [r0, #8]
   110c4:	cmp	r3, #0
   110c8:	bxne	lr
   110cc:	ldr	r3, [r0, #12]
   110d0:	cmp	r3, #0
   110d4:	bxeq	lr
   110d8:	str	r4, [sp, #-8]!
   110dc:	str	lr, [sp, #4]
   110e0:	mov	r4, r0
   110e4:	mov	r1, #4
   110e8:	mov	r0, r3
   110ec:	bl	12858 <error@@Base+0x40>
   110f0:	str	r0, [r4, #8]
   110f4:	ldr	r3, [r4]
   110f8:	cmp	r3, #0
   110fc:	beq	1111c <__assert_fail@plt+0x554>
   11100:	mov	r2, #0
   11104:	ldr	r1, [r4, #8]
   11108:	str	r3, [r1, r2]
   1110c:	ldr	r3, [r3, #4]
   11110:	add	r2, r2, #4
   11114:	cmp	r3, #0
   11118:	bne	11104 <__assert_fail@plt+0x53c>
   1111c:	ldr	r4, [sp]
   11120:	add	sp, sp, #4
   11124:	pop	{pc}		; (ldr pc, [sp], #4)
   11128:	strd	r4, [sp, #-16]!
   1112c:	str	r6, [sp, #8]
   11130:	str	lr, [sp, #12]
   11134:	mov	r5, r0
   11138:	mov	r6, r1
   1113c:	ldr	r4, [r0]
   11140:	cmp	r4, #0
   11144:	beq	11168 <__assert_fail@plt+0x5a0>
   11148:	mov	r1, r4
   1114c:	mov	r0, r5
   11150:	bl	11048 <__assert_fail@plt+0x480>
   11154:	mov	r0, r4
   11158:	blx	r6
   1115c:	ldr	r4, [r5]
   11160:	cmp	r4, #0
   11164:	bne	11148 <__assert_fail@plt+0x580>
   11168:	ldrd	r4, [sp]
   1116c:	ldr	r6, [sp, #8]
   11170:	add	sp, sp, #12
   11174:	pop	{pc}		; (ldr pc, [sp], #4)
   11178:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1117c:	strd	r6, [sp, #8]
   11180:	strd	r8, [sp, #16]
   11184:	str	sl, [sp, #24]
   11188:	str	lr, [sp, #28]
   1118c:	mov	r8, r0
   11190:	mov	r9, r1
   11194:	movw	r3, #28892	; 0x70dc
   11198:	movt	r3, #2
   1119c:	ldr	r3, [r3]
   111a0:	ldr	r6, [r3, r0, lsl #2]
   111a4:	cmp	r0, r1
   111a8:	movge	r4, r1
   111ac:	movge	r7, r0
   111b0:	bge	1121c <__assert_fail@plt+0x654>
   111b4:	mov	r4, r1
   111b8:	mov	sl, r0
   111bc:	movw	r5, #28892	; 0x70dc
   111c0:	movt	r5, #2
   111c4:	b	11280 <__assert_fail@plt+0x6b8>
   111c8:	mov	r7, r4
   111cc:	cmp	sl, r7
   111d0:	beq	11218 <__assert_fail@plt+0x650>
   111d4:	ldr	r3, [r5]
   111d8:	add	r4, sl, #1
   111dc:	ldr	r2, [r3, r7, lsl #2]
   111e0:	str	r2, [r3, sl, lsl #2]
   111e4:	cmp	r4, r7
   111e8:	movge	sl, r4
   111ec:	bge	11260 <__assert_fail@plt+0x698>
   111f0:	ldr	r2, [r5]
   111f4:	ldr	r3, [r5, #4]
   111f8:	ldr	r1, [r2, r4, lsl #2]
   111fc:	mov	r0, r6
   11200:	blx	r3
   11204:	cmp	r0, #0
   11208:	ble	1125c <__assert_fail@plt+0x694>
   1120c:	add	r4, r4, #1
   11210:	cmp	r4, r7
   11214:	bne	111f0 <__assert_fail@plt+0x628>
   11218:	mov	r4, r7
   1121c:	movw	r3, #28892	; 0x70dc
   11220:	movt	r3, #2
   11224:	ldr	r3, [r3]
   11228:	str	r6, [r3, r4, lsl #2]
   1122c:	sub	r1, r4, #1
   11230:	cmp	r8, r1
   11234:	blt	112c4 <__assert_fail@plt+0x6fc>
   11238:	add	r0, r7, #1
   1123c:	cmp	r9, r0
   11240:	bgt	112d0 <__assert_fail@plt+0x708>
   11244:	ldrd	r4, [sp]
   11248:	ldrd	r6, [sp, #8]
   1124c:	ldrd	r8, [sp, #16]
   11250:	ldr	sl, [sp, #24]
   11254:	add	sp, sp, #28
   11258:	pop	{pc}		; (ldr pc, [sp], #4)
   1125c:	mov	sl, r4
   11260:	cmp	sl, r7
   11264:	beq	11218 <__assert_fail@plt+0x650>
   11268:	ldr	r3, [r5]
   1126c:	sub	r4, r7, #1
   11270:	ldr	r2, [r3, sl, lsl #2]
   11274:	str	r2, [r3, r7, lsl #2]
   11278:	cmp	r4, sl
   1127c:	ble	112bc <__assert_fail@plt+0x6f4>
   11280:	cmp	sl, r4
   11284:	movge	r7, r4
   11288:	bge	111cc <__assert_fail@plt+0x604>
   1128c:	ldr	r2, [r5]
   11290:	ldr	r3, [r5, #4]
   11294:	ldr	r1, [r2, r4, lsl #2]
   11298:	mov	r0, r6
   1129c:	blx	r3
   112a0:	cmp	r0, #0
   112a4:	bge	111c8 <__assert_fail@plt+0x600>
   112a8:	sub	r4, r4, #1
   112ac:	cmp	r4, sl
   112b0:	bne	1128c <__assert_fail@plt+0x6c4>
   112b4:	mov	r7, sl
   112b8:	b	11218 <__assert_fail@plt+0x650>
   112bc:	mov	r7, sl
   112c0:	b	1121c <__assert_fail@plt+0x654>
   112c4:	mov	r0, r8
   112c8:	bl	11178 <__assert_fail@plt+0x5b0>
   112cc:	b	11238 <__assert_fail@plt+0x670>
   112d0:	mov	r1, r9
   112d4:	bl	11178 <__assert_fail@plt+0x5b0>
   112d8:	b	11244 <__assert_fail@plt+0x67c>
   112dc:	cmp	r0, #1
   112e0:	bxle	lr
   112e4:	str	r4, [sp, #-8]!
   112e8:	str	lr, [sp, #4]
   112ec:	movw	r3, #28892	; 0x70dc
   112f0:	movt	r3, #2
   112f4:	str	r1, [r3]
   112f8:	str	r2, [r3, #4]
   112fc:	sub	r1, r0, #1
   11300:	mov	r0, #0
   11304:	bl	11178 <__assert_fail@plt+0x5b0>
   11308:	ldr	r4, [sp]
   1130c:	add	sp, sp, #4
   11310:	pop	{pc}		; (ldr pc, [sp], #4)
   11314:	andeq	r0, r0, r0
   11318:	str	r4, [sp, #-8]!
   1131c:	str	lr, [sp, #4]
   11320:	mov	r2, r0
   11324:	mov	r1, #99	; 0x63
   11328:	movw	r0, #28900	; 0x70e4
   1132c:	movt	r0, #2
   11330:	bl	10a60 <fgets@plt>
   11334:	adds	r0, r0, #0
   11338:	movne	r0, #1
   1133c:	ldr	r4, [sp]
   11340:	add	sp, sp, #4
   11344:	pop	{pc}		; (ldr pc, [sp], #4)
   11348:	str	r4, [sp, #-8]!
   1134c:	str	lr, [sp, #4]
   11350:	mov	r4, r1
   11354:	bl	11318 <__assert_fail@plt+0x750>
   11358:	cmp	r0, #0
   1135c:	moveq	r0, #0
   11360:	bne	11370 <__assert_fail@plt+0x7a8>
   11364:	ldr	r4, [sp]
   11368:	add	sp, sp, #4
   1136c:	pop	{pc}		; (ldr pc, [sp], #4)
   11370:	mov	r2, r4
   11374:	movw	r1, #13356	; 0x342c
   11378:	movt	r1, #1
   1137c:	movw	r0, #28900	; 0x70e4
   11380:	movt	r0, #2
   11384:	bl	10b50 <__isoc99_sscanf@plt>
   11388:	cmp	r0, #1
   1138c:	movne	r0, #0
   11390:	moveq	r0, #1
   11394:	b	11364 <__assert_fail@plt+0x79c>
   11398:	str	r4, [sp, #-8]!
   1139c:	str	lr, [sp, #4]
   113a0:	ldr	r3, [r1]
   113a4:	cmp	r3, #0
   113a8:	bne	113d0 <__assert_fail@plt+0x808>
   113ac:	mov	r3, r0
   113b0:	mov	r2, #8
   113b4:	mov	r1, #1
   113b8:	movw	r0, #13232	; 0x33b0
   113bc:	movt	r0, #1
   113c0:	bl	10ab4 <fwrite@plt>
   113c4:	ldr	r4, [sp]
   113c8:	add	sp, sp, #4
   113cc:	pop	{pc}		; (ldr pc, [sp], #4)
   113d0:	ldr	r2, [r1, #4]
   113d4:	sub	r2, r3, r2
   113d8:	vmov	s12, r2
   113dc:	vcvt.f64.s32	d6, s12
   113e0:	vldr	d7, [pc, #32]	; 11408 <__assert_fail@plt+0x840>
   113e4:	vmul.f64	d6, d6, d7
   113e8:	vmov	s15, r3
   113ec:	vcvt.f64.s32	d7, s15
   113f0:	vdiv.f64	d7, d6, d7
   113f4:	vmov	r2, r3, d7
   113f8:	movw	r1, #13244	; 0x33bc
   113fc:	movt	r1, #1
   11400:	bl	10b44 <fprintf@plt>
   11404:	b	113c4 <__assert_fail@plt+0x7fc>
   11408:	andeq	r0, r0, r0
   1140c:	subsmi	r0, r9, r0
   11410:	strd	r4, [sp, #-16]!
   11414:	str	r6, [sp, #8]
   11418:	str	lr, [sp, #12]
   1141c:	mov	r4, r0
   11420:	subs	r5, r1, #0
   11424:	beq	11470 <__assert_fail@plt+0x8a8>
   11428:	ldr	r3, [r5, #4]
   1142c:	ldr	r2, [r5]
   11430:	movw	r1, #13252	; 0x33c4
   11434:	movt	r1, #1
   11438:	bl	10b44 <fprintf@plt>
   1143c:	mov	r1, r5
   11440:	mov	r0, r4
   11444:	bl	11398 <__assert_fail@plt+0x7d0>
   11448:	mov	r3, r4
   1144c:	mov	r2, #3
   11450:	mov	r1, #1
   11454:	movw	r0, #13292	; 0x33ec
   11458:	movt	r0, #1
   1145c:	bl	10ab4 <fwrite@plt>
   11460:	ldrd	r4, [sp]
   11464:	ldr	r6, [sp, #8]
   11468:	add	sp, sp, #12
   1146c:	pop	{pc}		; (ldr pc, [sp], #4)
   11470:	mov	r3, r0
   11474:	mov	r2, #26
   11478:	mov	r1, #1
   1147c:	movw	r0, #13264	; 0x33d0
   11480:	movt	r0, #1
   11484:	bl	10ab4 <fwrite@plt>
   11488:	b	11448 <__assert_fail@plt+0x880>
   1148c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11490:	strd	r6, [sp, #8]
   11494:	strd	r8, [sp, #16]
   11498:	str	sl, [sp, #24]
   1149c:	str	lr, [sp, #28]
   114a0:	mov	r7, r0
   114a4:	mov	r5, r1
   114a8:	mov	r6, r2
   114ac:	ldrb	r9, [sp, #32]
   114b0:	ldrb	sl, [sp, #36]	; 0x24
   114b4:	mov	r2, r3
   114b8:	movw	r1, #13296	; 0x33f0
   114bc:	movt	r1, #1
   114c0:	bl	10b44 <fprintf@plt>
   114c4:	mov	r1, #0
   114c8:	mov	r0, r7
   114cc:	bl	11410 <__assert_fail@plt+0x848>
   114d0:	cmp	r9, #0
   114d4:	bne	115bc <__assert_fail@plt+0x9f4>
   114d8:	movw	r2, #13344	; 0x3420
   114dc:	movt	r2, #1
   114e0:	movw	r1, #26804	; 0x68b4
   114e4:	movt	r1, #1
   114e8:	mov	r0, r7
   114ec:	bl	10b44 <fprintf@plt>
   114f0:	cmp	r6, #0
   114f4:	bgt	115dc <__assert_fail@plt+0xa14>
   114f8:	b	11540 <__assert_fail@plt+0x978>
   114fc:	add	r4, r4, #1
   11500:	sxth	r4, r4
   11504:	cmp	r4, r6
   11508:	bgt	11538 <__assert_fail@plt+0x970>
   1150c:	add	r1, r5, r4, lsl #3
   11510:	ldr	r3, [r5, r4, lsl #3]
   11514:	cmp	r3, #0
   11518:	ble	114fc <__assert_fail@plt+0x934>
   1151c:	mov	r0, r7
   11520:	bl	11410 <__assert_fail@plt+0x848>
   11524:	mov	r2, r4
   11528:	mov	r1, r8
   1152c:	mov	r0, r7
   11530:	bl	10b44 <fprintf@plt>
   11534:	b	114fc <__assert_fail@plt+0x934>
   11538:	cmp	r9, #0
   1153c:	bne	11560 <__assert_fail@plt+0x998>
   11540:	cmp	sl, #0
   11544:	bne	11594 <__assert_fail@plt+0x9cc>
   11548:	ldrd	r4, [sp]
   1154c:	ldrd	r6, [sp, #8]
   11550:	ldrd	r8, [sp, #16]
   11554:	ldr	sl, [sp, #24]
   11558:	add	sp, sp, #28
   1155c:	pop	{pc}		; (ldr pc, [sp], #4)
   11560:	add	r3, r6, #1
   11564:	add	r1, r5, r3, lsl #3
   11568:	ldr	r3, [r5, r3, lsl #3]
   1156c:	cmp	r3, #0
   11570:	ble	11540 <__assert_fail@plt+0x978>
   11574:	mov	r0, r7
   11578:	bl	11410 <__assert_fail@plt+0x848>
   1157c:	mov	r2, r6
   11580:	movw	r1, #13316	; 0x3404
   11584:	movt	r1, #1
   11588:	mov	r0, r7
   1158c:	bl	10b44 <fprintf@plt>
   11590:	b	11540 <__assert_fail@plt+0x978>
   11594:	mov	r1, r5
   11598:	mov	r0, r7
   1159c:	bl	11410 <__assert_fail@plt+0x848>
   115a0:	mov	r3, r7
   115a4:	mov	r2, #7
   115a8:	mov	r1, #1
   115ac:	movw	r0, #13328	; 0x3410
   115b0:	movt	r0, #1
   115b4:	bl	10ab4 <fwrite@plt>
   115b8:	b	11548 <__assert_fail@plt+0x980>
   115bc:	movw	r2, #13336	; 0x3418
   115c0:	movt	r2, #1
   115c4:	movw	r1, #26804	; 0x68b4
   115c8:	movt	r1, #1
   115cc:	mov	r0, r7
   115d0:	bl	10b44 <fprintf@plt>
   115d4:	cmp	r6, #0
   115d8:	ble	11560 <__assert_fail@plt+0x998>
   115dc:	mov	r4, #1
   115e0:	movw	r8, #13304	; 0x33f8
   115e4:	movt	r8, #1
   115e8:	b	1150c <__assert_fail@plt+0x944>
   115ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   115f0:	strd	r6, [sp, #8]
   115f4:	str	r8, [sp, #16]
   115f8:	str	lr, [sp, #20]
   115fc:	mov	r6, r0
   11600:	mov	r5, r1
   11604:	mov	r7, r2
   11608:	mov	r0, r1
   1160c:	bl	11e2c <__assert_fail@plt+0x1264>
   11610:	add	r4, r5, #4096	; 0x1000
   11614:	movw	r2, #5824	; 0x16c0
   11618:	movt	r2, #1
   1161c:	ldr	r1, [r4, #3952]	; 0xf70
   11620:	ldr	r0, [r4, #3956]	; 0xf74
   11624:	bl	112dc <__assert_fail@plt+0x714>
   11628:	mov	r2, r7
   1162c:	movw	r1, #13296	; 0x33f0
   11630:	movt	r1, #1
   11634:	mov	r0, r6
   11638:	bl	10b44 <fprintf@plt>
   1163c:	mov	r1, #0
   11640:	mov	r0, r6
   11644:	bl	11410 <__assert_fail@plt+0x848>
   11648:	mov	r1, r6
   1164c:	mov	r0, #10
   11650:	bl	10b74 <fputc@plt>
   11654:	ldr	r3, [r4, #3956]	; 0xf74
   11658:	cmp	r3, #0
   1165c:	ble	116ac <__assert_fail@plt+0xae4>
   11660:	mov	r4, #0
   11664:	add	r5, r5, #4096	; 0x1000
   11668:	movw	r7, #26804	; 0x68b4
   1166c:	movt	r7, #1
   11670:	ldr	r3, [r5, #3952]	; 0xf70
   11674:	ldr	r1, [r3, r4, lsl #2]
   11678:	add	r1, r1, #12
   1167c:	mov	r0, r6
   11680:	bl	11410 <__assert_fail@plt+0x848>
   11684:	ldr	r3, [r5, #3952]	; 0xf70
   11688:	ldr	r3, [r3, r4, lsl #2]
   1168c:	ldr	r2, [r3, #8]
   11690:	mov	r1, r7
   11694:	mov	r0, r6
   11698:	bl	10b44 <fprintf@plt>
   1169c:	add	r4, r4, #1
   116a0:	ldr	r3, [r5, #3956]	; 0xf74
   116a4:	cmp	r3, r4
   116a8:	bgt	11670 <__assert_fail@plt+0xaa8>
   116ac:	ldrd	r4, [sp]
   116b0:	ldrd	r6, [sp, #8]
   116b4:	ldr	r8, [sp, #16]
   116b8:	add	sp, sp, #20
   116bc:	pop	{pc}		; (ldr pc, [sp], #4)
   116c0:	str	r4, [sp, #-8]!
   116c4:	str	lr, [sp, #4]
   116c8:	ldr	r1, [r1, #8]
   116cc:	ldr	r0, [r0, #8]
   116d0:	bl	1261c <__assert_fail@plt+0x1a54>
   116d4:	ldr	r4, [sp]
   116d8:	add	sp, sp, #4
   116dc:	pop	{pc}		; (ldr pc, [sp], #4)
   116e0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   116e4:	strd	r6, [sp, #8]
   116e8:	strd	r8, [sp, #16]
   116ec:	str	lr, [sp, #24]
   116f0:	sub	sp, sp, #12
   116f4:	mov	r5, r0
   116f8:	mov	r4, r1
   116fc:	bl	11318 <__assert_fail@plt+0x750>
   11700:	cmp	r0, #0
   11704:	moveq	r6, #0
   11708:	beq	117c0 <__assert_fail@plt+0xbf8>
   1170c:	mov	r0, r5
   11710:	bl	11318 <__assert_fail@plt+0x750>
   11714:	cmp	r0, #0
   11718:	moveq	r6, #0
   1171c:	beq	117c0 <__assert_fail@plt+0xbf8>
   11720:	mov	r6, #0
   11724:	movw	r9, #13352	; 0x3428
   11728:	movt	r9, #1
   1172c:	movw	r8, #28900	; 0x70e4
   11730:	movt	r8, #2
   11734:	add	r7, r8, #29
   11738:	b	117b0 <__assert_fail@plt+0xbe8>
   1173c:	mov	r3, sp
   11740:	add	r2, sp, #4
   11744:	mov	r1, r9
   11748:	mov	r0, r8
   1174c:	bl	10b50 <__isoc99_sscanf@plt>
   11750:	cmp	r0, #2
   11754:	bne	117c0 <__assert_fail@plt+0xbf8>
   11758:	mov	r2, #10
   1175c:	mov	r1, #0
   11760:	mov	r0, r7
   11764:	bl	10a24 <strtol@plt>
   11768:	cmp	r0, #0
   1176c:	bne	1178c <__assert_fail@plt+0xbc4>
   11770:	movw	r1, #13328	; 0x3410
   11774:	movt	r1, #1
   11778:	mov	r0, r7
   1177c:	bl	10a18 <strcmp@plt>
   11780:	cmp	r0, #0
   11784:	ldreq	r6, [sp, #4]
   11788:	movne	r0, #11
   1178c:	add	r2, r4, r0, lsl #3
   11790:	ldr	r3, [r4, r0, lsl #3]
   11794:	ldr	r1, [sp, #4]
   11798:	add	r3, r3, r1
   1179c:	str	r3, [r4, r0, lsl #3]
   117a0:	ldr	r3, [r2, #4]
   117a4:	ldr	r1, [sp]
   117a8:	add	r3, r3, r1
   117ac:	str	r3, [r2, #4]
   117b0:	mov	r0, r5
   117b4:	bl	11318 <__assert_fail@plt+0x750>
   117b8:	cmp	r0, #0
   117bc:	bne	1173c <__assert_fail@plt+0xb74>
   117c0:	mov	r0, r6
   117c4:	add	sp, sp, #12
   117c8:	ldrd	r4, [sp]
   117cc:	ldrd	r6, [sp, #8]
   117d0:	ldrd	r8, [sp, #16]
   117d4:	add	sp, sp, #24
   117d8:	pop	{pc}		; (ldr pc, [sp], #4)
   117dc:	ldr	r3, [r0]
   117e0:	add	r1, r3, r1
   117e4:	str	r1, [r0]
   117e8:	ldr	r3, [r0, #4]
   117ec:	add	r2, r3, r2
   117f0:	str	r2, [r0, #4]
   117f4:	bx	lr
   117f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   117fc:	strd	r6, [sp, #8]
   11800:	str	r8, [sp, #16]
   11804:	str	lr, [sp, #20]
   11808:	mov	r7, r0
   1180c:	mov	r8, r1
   11810:	mov	r6, r2
   11814:	mov	r5, r3
   11818:	bl	11d00 <__assert_fail@plt+0x1138>
   1181c:	subs	r4, r0, #0
   11820:	beq	11850 <__assert_fail@plt+0xc88>
   11824:	ldr	r2, [r4, #12]
   11828:	add	r2, r2, r6
   1182c:	str	r2, [r4, #12]
   11830:	ldr	r3, [r4, #16]
   11834:	add	r3, r3, r5
   11838:	str	r3, [r4, #16]
   1183c:	ldrd	r4, [sp]
   11840:	ldrd	r6, [sp, #8]
   11844:	ldr	r8, [sp, #16]
   11848:	add	sp, sp, #20
   1184c:	pop	{pc}		; (ldr pc, [sp], #4)
   11850:	mov	r1, #20
   11854:	mov	r0, #1
   11858:	bl	12858 <error@@Base+0x40>
   1185c:	mov	r4, r0
   11860:	mov	r0, r8
   11864:	bl	10a78 <strdup@plt>
   11868:	str	r0, [r4, #8]
   1186c:	mov	r1, r4
   11870:	mov	r0, r7
   11874:	bl	11d5c <__assert_fail@plt+0x1194>
   11878:	b	11824 <__assert_fail@plt+0xc5c>
   1187c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11880:	strd	r6, [sp, #8]
   11884:	str	r8, [sp, #16]
   11888:	str	lr, [sp, #20]
   1188c:	sub	sp, sp, #8
   11890:	mov	r5, r0
   11894:	mov	r6, r1
   11898:	bl	11318 <__assert_fail@plt+0x750>
   1189c:	cmp	r0, #0
   118a0:	beq	11920 <__assert_fail@plt+0xd58>
   118a4:	mov	r0, r5
   118a8:	bl	11318 <__assert_fail@plt+0x750>
   118ac:	cmp	r0, #0
   118b0:	beq	11920 <__assert_fail@plt+0xd58>
   118b4:	movw	r7, #13352	; 0x3428
   118b8:	movt	r7, #1
   118bc:	movw	r4, #28900	; 0x70e4
   118c0:	movt	r4, #2
   118c4:	add	r8, r4, #29
   118c8:	b	11910 <__assert_fail@plt+0xd48>
   118cc:	mov	r3, sp
   118d0:	add	r2, sp, #4
   118d4:	mov	r1, r7
   118d8:	mov	r0, r4
   118dc:	bl	10b50 <__isoc99_sscanf@plt>
   118e0:	cmp	r0, #2
   118e4:	bne	11920 <__assert_fail@plt+0xd58>
   118e8:	mov	r0, r4
   118ec:	bl	10b38 <strlen@plt>
   118f0:	add	r0, r4, r0
   118f4:	mov	r3, #0
   118f8:	strb	r3, [r0, #-1]
   118fc:	ldr	r3, [sp]
   11900:	ldr	r2, [sp, #4]
   11904:	mov	r1, r8
   11908:	mov	r0, r6
   1190c:	bl	117f8 <__assert_fail@plt+0xc30>
   11910:	mov	r0, r5
   11914:	bl	11318 <__assert_fail@plt+0x750>
   11918:	cmp	r0, #0
   1191c:	bne	118cc <__assert_fail@plt+0xd04>
   11920:	add	sp, sp, #8
   11924:	ldrd	r4, [sp]
   11928:	ldrd	r6, [sp, #8]
   1192c:	ldr	r8, [sp, #16]
   11930:	add	sp, sp, #20
   11934:	pop	{pc}		; (ldr pc, [sp], #4)
   11938:	strd	r4, [sp, #-20]!	; 0xffffffec
   1193c:	strd	r6, [sp, #8]
   11940:	str	lr, [sp, #16]
   11944:	sub	sp, sp, #12
   11948:	mov	r5, r0
   1194c:	mov	r6, r1
   11950:	movw	r1, #13368	; 0x3438
   11954:	movt	r1, #1
   11958:	mov	r0, r6
   1195c:	bl	12900 <error@@Base+0xe8>
   11960:	mov	r4, r0
   11964:	bl	11318 <__assert_fail@plt+0x750>
   11968:	cmp	r0, #0
   1196c:	beq	11ab8 <__assert_fail@plt+0xef0>
   11970:	mov	r2, #45	; 0x2d
   11974:	movw	r1, #13372	; 0x343c
   11978:	movt	r1, #1
   1197c:	movw	r0, #28900	; 0x70e4
   11980:	movt	r0, #2
   11984:	bl	10ba4 <strncmp@plt>
   11988:	cmp	r0, #0
   1198c:	bne	11ab8 <__assert_fail@plt+0xef0>
   11990:	mov	r0, r4
   11994:	bl	11318 <__assert_fail@plt+0x750>
   11998:	cmp	r0, #0
   1199c:	beq	11ab8 <__assert_fail@plt+0xef0>
   119a0:	movw	r1, #27048	; 0x69a8
   119a4:	movt	r1, #1
   119a8:	movw	r0, #28900	; 0x70e4
   119ac:	movt	r0, #2
   119b0:	bl	10a18 <strcmp@plt>
   119b4:	cmp	r0, #0
   119b8:	bne	11ab8 <__assert_fail@plt+0xef0>
   119bc:	add	r1, sp, #4
   119c0:	mov	r0, r4
   119c4:	bl	11348 <__assert_fail@plt+0x780>
   119c8:	cmp	r0, #0
   119cc:	beq	11ab8 <__assert_fail@plt+0xef0>
   119d0:	mov	r1, sp
   119d4:	mov	r0, r4
   119d8:	bl	11348 <__assert_fail@plt+0x780>
   119dc:	cmp	r0, #0
   119e0:	beq	11ab8 <__assert_fail@plt+0xef0>
   119e4:	mov	r0, r4
   119e8:	bl	11318 <__assert_fail@plt+0x750>
   119ec:	cmp	r0, #0
   119f0:	beq	11ab8 <__assert_fail@plt+0xef0>
   119f4:	mov	r0, r4
   119f8:	bl	11318 <__assert_fail@plt+0x750>
   119fc:	cmp	r0, #0
   11a00:	beq	11ab8 <__assert_fail@plt+0xef0>
   11a04:	ldr	r3, [r5]
   11a08:	ldr	r2, [sp, #4]
   11a0c:	add	r3, r3, r2
   11a10:	str	r3, [r5]
   11a14:	ldr	r3, [r5, #4]
   11a18:	ldr	r2, [sp]
   11a1c:	add	r3, r3, r2
   11a20:	str	r3, [r5, #4]
   11a24:	add	r1, r5, #8
   11a28:	mov	r0, r4
   11a2c:	bl	116e0 <__assert_fail@plt+0xb18>
   11a30:	mov	r7, r0
   11a34:	add	r1, r5, #416	; 0x1a0
   11a38:	mov	r0, r4
   11a3c:	bl	116e0 <__assert_fail@plt+0xb18>
   11a40:	mov	r6, r0
   11a44:	add	r1, r5, #824	; 0x338
   11a48:	mov	r0, r4
   11a4c:	bl	116e0 <__assert_fail@plt+0xb18>
   11a50:	ldr	r3, [sp, #4]
   11a54:	cmp	r3, #0
   11a58:	bgt	11a78 <__assert_fail@plt+0xeb0>
   11a5c:	mov	r0, r4
   11a60:	bl	126a4 <__assert_fail@plt+0x1adc>
   11a64:	add	sp, sp, #12
   11a68:	ldrd	r4, [sp]
   11a6c:	ldrd	r6, [sp, #8]
   11a70:	add	sp, sp, #16
   11a74:	pop	{pc}		; (ldr pc, [sp], #4)
   11a78:	add	r1, r5, #920	; 0x398
   11a7c:	mov	r0, r4
   11a80:	bl	116e0 <__assert_fail@plt+0xb18>
   11a84:	cmp	r7, #0
   11a88:	bgt	11aa8 <__assert_fail@plt+0xee0>
   11a8c:	cmp	r6, #0
   11a90:	ble	11a5c <__assert_fail@plt+0xe94>
   11a94:	add	r1, r5, #9024	; 0x2340
   11a98:	add	r1, r1, #24
   11a9c:	mov	r0, r4
   11aa0:	bl	1187c <__assert_fail@plt+0xcb4>
   11aa4:	b	11a5c <__assert_fail@plt+0xe94>
   11aa8:	add	r1, r5, #992	; 0x3e0
   11aac:	mov	r0, r4
   11ab0:	bl	1187c <__assert_fail@plt+0xcb4>
   11ab4:	b	11a8c <__assert_fail@plt+0xec4>
   11ab8:	movw	r1, #13360	; 0x3430
   11abc:	movt	r1, #1
   11ac0:	cmp	r6, #0
   11ac4:	movne	r1, r6
   11ac8:	movw	r0, #13420	; 0x346c
   11acc:	movt	r0, #1
   11ad0:	bl	128bc <error@@Base+0xa4>
   11ad4:	strd	r4, [sp, #-20]!	; 0xffffffec
   11ad8:	strd	r6, [sp, #8]
   11adc:	str	lr, [sp, #16]
   11ae0:	sub	sp, sp, #12
   11ae4:	mov	r5, r0
   11ae8:	mov	r0, r1
   11aec:	movw	r1, #13440	; 0x3480
   11af0:	movt	r1, #1
   11af4:	bl	12900 <error@@Base+0xe8>
   11af8:	mov	r4, r0
   11afc:	movw	r3, #27048	; 0x69a8
   11b00:	movt	r3, #1
   11b04:	movw	r2, #13372	; 0x343c
   11b08:	movt	r2, #1
   11b0c:	movw	r1, #13444	; 0x3484
   11b10:	movt	r1, #1
   11b14:	bl	10b44 <fprintf@plt>
   11b18:	ldr	r2, [r5]
   11b1c:	movw	r1, #13452	; 0x348c
   11b20:	movt	r1, #1
   11b24:	mov	r0, r4
   11b28:	bl	10b44 <fprintf@plt>
   11b2c:	ldr	r2, [r5, #4]
   11b30:	movw	r1, #13468	; 0x349c
   11b34:	movt	r1, #1
   11b38:	mov	r0, r4
   11b3c:	bl	10b44 <fprintf@plt>
   11b40:	mov	r1, r5
   11b44:	mov	r0, r4
   11b48:	bl	11398 <__assert_fail@plt+0x7d0>
   11b4c:	mov	r3, r4
   11b50:	mov	r2, #12
   11b54:	mov	r1, #1
   11b58:	movw	r0, #13492	; 0x34b4
   11b5c:	movt	r0, #1
   11b60:	bl	10ab4 <fwrite@plt>
   11b64:	mov	r6, #1
   11b68:	str	r6, [sp, #4]
   11b6c:	mov	r7, #0
   11b70:	str	r7, [sp]
   11b74:	movw	r3, #13508	; 0x34c4
   11b78:	movt	r3, #1
   11b7c:	mov	r2, #50	; 0x32
   11b80:	add	r1, r5, #8
   11b84:	mov	r0, r4
   11b88:	bl	1148c <__assert_fail@plt+0x8c4>
   11b8c:	str	r6, [sp, #4]
   11b90:	str	r7, [sp]
   11b94:	movw	r3, #13520	; 0x34d0
   11b98:	movt	r3, #1
   11b9c:	mov	r2, #50	; 0x32
   11ba0:	add	r1, r5, #416	; 0x1a0
   11ba4:	mov	r0, r4
   11ba8:	bl	1148c <__assert_fail@plt+0x8c4>
   11bac:	str	r6, [sp, #4]
   11bb0:	str	r6, [sp]
   11bb4:	movw	r3, #13536	; 0x34e0
   11bb8:	movt	r3, #1
   11bbc:	mov	r2, #10
   11bc0:	add	r1, r5, #824	; 0x338
   11bc4:	mov	r0, r4
   11bc8:	bl	1148c <__assert_fail@plt+0x8c4>
   11bcc:	ldr	r3, [r5]
   11bd0:	cmp	r3, r7
   11bd4:	bgt	11bf4 <__assert_fail@plt+0x102c>
   11bd8:	mov	r0, r4
   11bdc:	bl	126a4 <__assert_fail@plt+0x1adc>
   11be0:	add	sp, sp, #12
   11be4:	ldrd	r4, [sp]
   11be8:	ldrd	r6, [sp, #8]
   11bec:	add	sp, sp, #16
   11bf0:	pop	{pc}		; (ldr pc, [sp], #4)
   11bf4:	str	r7, [sp, #4]
   11bf8:	str	r7, [sp]
   11bfc:	movw	r3, #13560	; 0x34f8
   11c00:	movt	r3, #1
   11c04:	mov	r2, #8
   11c08:	add	r1, r5, #920	; 0x398
   11c0c:	mov	r0, r4
   11c10:	bl	1148c <__assert_fail@plt+0x8c4>
   11c14:	ldr	r3, [r5, #8]
   11c18:	cmp	r3, r7
   11c1c:	bgt	11c48 <__assert_fail@plt+0x1080>
   11c20:	ldr	r3, [r5, #416]	; 0x1a0
   11c24:	cmp	r3, #0
   11c28:	ble	11bd8 <__assert_fail@plt+0x1010>
   11c2c:	movw	r2, #13520	; 0x34d0
   11c30:	movt	r2, #1
   11c34:	add	r1, r5, #9024	; 0x2340
   11c38:	add	r1, r1, #24
   11c3c:	mov	r0, r4
   11c40:	bl	115ec <__assert_fail@plt+0xa24>
   11c44:	b	11bd8 <__assert_fail@plt+0x1010>
   11c48:	movw	r2, #13508	; 0x34c4
   11c4c:	movt	r2, #1
   11c50:	add	r1, r5, #992	; 0x3e0
   11c54:	mov	r0, r4
   11c58:	bl	115ec <__assert_fail@plt+0xa24>
   11c5c:	b	11c20 <__assert_fail@plt+0x1058>
   11c60:	ldrb	r3, [r0]
   11c64:	cmp	r3, #0
   11c68:	beq	11ca8 <__assert_fail@plt+0x10e0>
   11c6c:	mov	r2, #0
   11c70:	add	r2, r2, r3
   11c74:	ldrb	r3, [r0, #1]!
   11c78:	cmp	r3, #0
   11c7c:	bne	11c70 <__assert_fail@plt+0x10a8>
   11c80:	movw	r3, #20065	; 0x4e61
   11c84:	movt	r3, #33354	; 0x824a
   11c88:	smull	r1, r3, r3, r2
   11c8c:	add	r3, r3, r2
   11c90:	asr	r0, r2, #31
   11c94:	rsb	r3, r0, r3, asr #8
   11c98:	movw	r0, #503	; 0x1f7
   11c9c:	mls	r0, r0, r3, r2
   11ca0:	sxth	r0, r0
   11ca4:	bx	lr
   11ca8:	mov	r2, #0
   11cac:	b	11c80 <__assert_fail@plt+0x10b8>
   11cb0:	strd	r4, [sp, #-16]!
   11cb4:	str	r6, [sp, #8]
   11cb8:	str	lr, [sp, #12]
   11cbc:	mov	r6, r0
   11cc0:	mov	r4, r0
   11cc4:	add	r5, r0, #8000	; 0x1f40
   11cc8:	add	r5, r5, #48	; 0x30
   11ccc:	mov	r0, r4
   11cd0:	bl	10fa4 <__assert_fail@plt+0x3dc>
   11cd4:	add	r4, r4, #16
   11cd8:	cmp	r4, r5
   11cdc:	bne	11ccc <__assert_fail@plt+0x1104>
   11ce0:	add	r6, r6, #4096	; 0x1000
   11ce4:	mov	r3, #0
   11ce8:	str	r3, [r6, #3952]	; 0xf70
   11cec:	str	r3, [r6, #3956]	; 0xf74
   11cf0:	ldrd	r4, [sp]
   11cf4:	ldr	r6, [sp, #8]
   11cf8:	add	sp, sp, #12
   11cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   11d00:	strd	r4, [sp, #-16]!
   11d04:	str	r6, [sp, #8]
   11d08:	str	lr, [sp, #12]
   11d0c:	mov	r4, r0
   11d10:	mov	r5, r1
   11d14:	mov	r0, r1
   11d18:	bl	11c60 <__assert_fail@plt+0x1098>
   11d1c:	ldr	r4, [r4, r0, lsl #4]
   11d20:	cmp	r4, #0
   11d24:	beq	11d48 <__assert_fail@plt+0x1180>
   11d28:	ldr	r1, [r4, #8]
   11d2c:	mov	r0, r5
   11d30:	bl	10a18 <strcmp@plt>
   11d34:	cmp	r0, #0
   11d38:	beq	11d48 <__assert_fail@plt+0x1180>
   11d3c:	ldr	r4, [r4, #4]
   11d40:	cmp	r4, #0
   11d44:	bne	11d28 <__assert_fail@plt+0x1160>
   11d48:	mov	r0, r4
   11d4c:	ldrd	r4, [sp]
   11d50:	ldr	r6, [sp, #8]
   11d54:	add	sp, sp, #12
   11d58:	pop	{pc}		; (ldr pc, [sp], #4)
   11d5c:	strd	r4, [sp, #-16]!
   11d60:	str	r6, [sp, #8]
   11d64:	str	lr, [sp, #12]
   11d68:	mov	r4, r0
   11d6c:	mov	r5, r1
   11d70:	ldr	r0, [r1, #8]
   11d74:	bl	11c60 <__assert_fail@plt+0x1098>
   11d78:	mov	r1, r5
   11d7c:	add	r0, r4, r0, lsl #4
   11d80:	bl	10fbc <__assert_fail@plt+0x3f4>
   11d84:	add	r3, r4, #4096	; 0x1000
   11d88:	ldr	r0, [r3, #3952]	; 0xf70
   11d8c:	cmp	r0, #0
   11d90:	beq	11da4 <__assert_fail@plt+0x11dc>
   11d94:	bl	10a48 <free@plt>
   11d98:	add	r3, r4, #4096	; 0x1000
   11d9c:	mov	r2, #0
   11da0:	str	r2, [r3, #3952]	; 0xf70
   11da4:	add	r4, r4, #4096	; 0x1000
   11da8:	ldr	r3, [r4, #3956]	; 0xf74
   11dac:	add	r3, r3, #1
   11db0:	str	r3, [r4, #3956]	; 0xf74
   11db4:	ldrd	r4, [sp]
   11db8:	ldr	r6, [sp, #8]
   11dbc:	add	sp, sp, #12
   11dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   11dc4:	strd	r4, [sp, #-16]!
   11dc8:	str	r6, [sp, #8]
   11dcc:	str	lr, [sp, #12]
   11dd0:	mov	r4, r0
   11dd4:	mov	r5, r1
   11dd8:	ldr	r0, [r1, #8]
   11ddc:	bl	11c60 <__assert_fail@plt+0x1098>
   11de0:	mov	r1, r5
   11de4:	add	r0, r4, r0, lsl #4
   11de8:	bl	11048 <__assert_fail@plt+0x480>
   11dec:	add	r3, r4, #4096	; 0x1000
   11df0:	ldr	r0, [r3, #3952]	; 0xf70
   11df4:	cmp	r0, #0
   11df8:	beq	11e0c <__assert_fail@plt+0x1244>
   11dfc:	bl	10a48 <free@plt>
   11e00:	add	r3, r4, #4096	; 0x1000
   11e04:	mov	r2, #0
   11e08:	str	r2, [r3, #3952]	; 0xf70
   11e0c:	add	r4, r4, #4096	; 0x1000
   11e10:	ldr	r3, [r4, #3956]	; 0xf74
   11e14:	sub	r3, r3, #1
   11e18:	str	r3, [r4, #3956]	; 0xf74
   11e1c:	ldrd	r4, [sp]
   11e20:	ldr	r6, [sp, #8]
   11e24:	add	sp, sp, #12
   11e28:	pop	{pc}		; (ldr pc, [sp], #4)
   11e2c:	add	r3, r0, #4096	; 0x1000
   11e30:	ldr	r3, [r3, #3952]	; 0xf70
   11e34:	cmp	r3, #0
   11e38:	bxne	lr
   11e3c:	add	r3, r0, #4096	; 0x1000
   11e40:	ldr	r3, [r3, #3956]	; 0xf74
   11e44:	cmp	r3, #0
   11e48:	bxeq	lr
   11e4c:	strd	r4, [sp, #-16]!
   11e50:	str	r6, [sp, #8]
   11e54:	str	lr, [sp, #12]
   11e58:	mov	r4, r0
   11e5c:	mov	r1, #4
   11e60:	mov	r0, r3
   11e64:	bl	12858 <error@@Base+0x40>
   11e68:	add	r3, r4, #4096	; 0x1000
   11e6c:	str	r0, [r3, #3952]	; 0xf70
   11e70:	mov	r1, #0
   11e74:	mov	lr, r1
   11e78:	mov	ip, r3
   11e7c:	movw	r5, #503	; 0x1f7
   11e80:	b	11e90 <__assert_fail@plt+0x12c8>
   11e84:	add	lr, lr, #1
   11e88:	cmp	lr, r5
   11e8c:	beq	11ec0 <__assert_fail@plt+0x12f8>
   11e90:	ldr	r3, [r4, lr, lsl #4]
   11e94:	cmp	r3, #0
   11e98:	beq	11e84 <__assert_fail@plt+0x12bc>
   11e9c:	lsl	r2, r1, #2
   11ea0:	add	r1, r1, #1
   11ea4:	ldr	r0, [ip, #3952]	; 0xf70
   11ea8:	str	r3, [r0, r2]
   11eac:	ldr	r3, [r3, #4]
   11eb0:	add	r2, r2, #4
   11eb4:	cmp	r3, #0
   11eb8:	bne	11ea0 <__assert_fail@plt+0x12d8>
   11ebc:	b	11e84 <__assert_fail@plt+0x12bc>
   11ec0:	ldrd	r4, [sp]
   11ec4:	ldr	r6, [sp, #8]
   11ec8:	add	sp, sp, #12
   11ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   11ed0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11ed4:	strd	r6, [sp, #8]
   11ed8:	str	r8, [sp, #16]
   11edc:	str	lr, [sp, #20]
   11ee0:	mov	r7, r0
   11ee4:	mov	r6, r1
   11ee8:	mov	r4, r0
   11eec:	add	r5, r0, #8000	; 0x1f40
   11ef0:	add	r5, r5, #48	; 0x30
   11ef4:	mov	r1, r6
   11ef8:	mov	r0, r4
   11efc:	bl	11128 <__assert_fail@plt+0x560>
   11f00:	add	r4, r4, #16
   11f04:	cmp	r4, r5
   11f08:	bne	11ef4 <__assert_fail@plt+0x132c>
   11f0c:	add	r3, r7, #4096	; 0x1000
   11f10:	ldr	r0, [r3, #3952]	; 0xf70
   11f14:	cmp	r0, #0
   11f18:	beq	11f2c <__assert_fail@plt+0x1364>
   11f1c:	bl	10a48 <free@plt>
   11f20:	add	r3, r7, #4096	; 0x1000
   11f24:	mov	r2, #0
   11f28:	str	r2, [r3, #3952]	; 0xf70
   11f2c:	add	r7, r7, #4096	; 0x1000
   11f30:	mov	r3, #0
   11f34:	str	r3, [r7, #3956]	; 0xf74
   11f38:	ldrd	r4, [sp]
   11f3c:	ldrd	r6, [sp, #8]
   11f40:	ldr	r8, [sp, #16]
   11f44:	add	sp, sp, #20
   11f48:	pop	{pc}		; (ldr pc, [sp], #4)
   11f4c:	cmp	r2, r1
   11f50:	bcc	11fd0 <__assert_fail@plt+0x1408>
   11f54:	str	r4, [sp, #-8]!
   11f58:	str	lr, [sp, #4]
   11f5c:	sub	r3, r2, r1
   11f60:	add	r3, r1, r3, lsr #1
   11f64:	movw	ip, #13608	; 0x3528
   11f68:	movt	ip, #1
   11f6c:	add	lr, r3, r3, lsl #1
   11f70:	ldr	ip, [ip, lr, lsl #2]
   11f74:	cmp	ip, r0
   11f78:	bhi	11fb8 <__assert_fail@plt+0x13f0>
   11f7c:	movw	r1, #13608	; 0x3528
   11f80:	movt	r1, #1
   11f84:	add	ip, r3, r3, lsl #1
   11f88:	add	r1, r1, ip, lsl #2
   11f8c:	ldr	r1, [r1, #4]
   11f90:	cmp	r1, r0
   11f94:	bcc	11fc4 <__assert_fail@plt+0x13fc>
   11f98:	movw	r1, #13608	; 0x3528
   11f9c:	movt	r1, #1
   11fa0:	add	r3, r3, r3, lsl #1
   11fa4:	add	r3, r1, r3, lsl #2
   11fa8:	ldr	r0, [r3, #8]
   11fac:	ldr	r4, [sp]
   11fb0:	add	sp, sp, #4
   11fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   11fb8:	sub	r2, r3, #1
   11fbc:	bl	11f4c <__assert_fail@plt+0x1384>
   11fc0:	b	11fac <__assert_fail@plt+0x13e4>
   11fc4:	add	r1, r3, #1
   11fc8:	bl	11f4c <__assert_fail@plt+0x1384>
   11fcc:	b	11fac <__assert_fail@plt+0x13e4>
   11fd0:	mov	r0, #0
   11fd4:	bx	lr
   11fd8:	cmp	r0, #0
   11fdc:	beq	12004 <__assert_fail@plt+0x143c>
   11fe0:	str	r4, [sp, #-8]!
   11fe4:	str	lr, [sp, #4]
   11fe8:	movw	r2, #1092	; 0x444
   11fec:	mov	r1, #0
   11ff0:	ldr	r0, [r0, #12]
   11ff4:	bl	11f4c <__assert_fail@plt+0x1384>
   11ff8:	ldr	r4, [sp]
   11ffc:	add	sp, sp, #4
   12000:	pop	{pc}		; (ldr pc, [sp], #4)
   12004:	mov	r0, #18
   12008:	bx	lr
   1200c:	str	r4, [sp, #-8]!
   12010:	str	lr, [sp, #4]
   12014:	subs	r4, r0, #0
   12018:	beq	1203c <__assert_fail@plt+0x1474>
   1201c:	ldr	r4, [r4, #4]
   12020:	cmp	r4, #0
   12024:	beq	1203c <__assert_fail@plt+0x1474>
   12028:	mov	r0, r4
   1202c:	bl	11fd8 <__assert_fail@plt+0x1410>
   12030:	bic	r0, r0, #2
   12034:	cmp	r0, #4
   12038:	beq	1201c <__assert_fail@plt+0x1454>
   1203c:	mov	r0, r4
   12040:	ldr	r4, [sp]
   12044:	add	sp, sp, #4
   12048:	pop	{pc}		; (ldr pc, [sp], #4)
   1204c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12050:	strd	r6, [sp, #8]
   12054:	strd	r8, [sp, #16]
   12058:	strd	sl, [sp, #24]
   1205c:	str	lr, [sp, #32]
   12060:	sub	sp, sp, #36	; 0x24
   12064:	str	r0, [sp, #12]
   12068:	ldr	r9, [r1]
   1206c:	mov	r3, #1
   12070:	str	r3, [sp, #8]
   12074:	b	1240c <__assert_fail@plt+0x1844>
   12078:	ldr	r5, [r6, #4]
   1207c:	cmp	r9, r5
   12080:	movne	r4, r9
   12084:	movne	r7, #0
   12088:	beq	12480 <__assert_fail@plt+0x18b8>
   1208c:	add	r1, sp, #16
   12090:	ldr	r0, [r4, #12]
   12094:	bl	10a6c <utf8proc_encode_char@plt>
   12098:	cmp	r0, #0
   1209c:	beq	120d8 <__assert_fail@plt+0x1510>
   120a0:	add	r7, r7, r0
   120a4:	ldr	r4, [r4, #4]
   120a8:	cmp	r5, r4
   120ac:	beq	12430 <__assert_fail@plt+0x1868>
   120b0:	cmp	r4, #0
   120b4:	bne	1208c <__assert_fail@plt+0x14c4>
   120b8:	movw	r3, #13568	; 0x3500
   120bc:	movt	r3, #1
   120c0:	mov	r2, #249	; 0xf9
   120c4:	movw	r1, #26724	; 0x6864
   120c8:	movt	r1, #1
   120cc:	movw	r0, #26732	; 0x686c
   120d0:	movt	r0, #1
   120d4:	bl	10bc8 <__assert_fail@plt>
   120d8:	movw	r3, #13568	; 0x3500
   120dc:	movt	r3, #1
   120e0:	mov	r2, #253	; 0xfd
   120e4:	movw	r1, #26724	; 0x6864
   120e8:	movt	r1, #1
   120ec:	movw	r0, #26748	; 0x687c
   120f0:	movt	r0, #1
   120f4:	bl	10bc8 <__assert_fail@plt>
   120f8:	sub	r2, r5, #8
   120fc:	cmp	r2, #1
   12100:	bls	12234 <__assert_fail@plt+0x166c>
   12104:	sub	r2, r5, #12
   12108:	cmp	r5, #10
   1210c:	cmpne	r2, #1
   12110:	bhi	12120 <__assert_fail@plt+0x1558>
   12114:	sub	r2, r0, #8
   12118:	cmp	r2, #1
   1211c:	bls	12234 <__assert_fail@plt+0x166c>
   12120:	cmp	r4, #8
   12124:	movne	r2, #0
   12128:	moveq	r2, #1
   1212c:	cmp	r5, #10
   12130:	movne	r1, #0
   12134:	moveq	r1, #1
   12138:	tst	r2, r1
   1213c:	movne	r4, r8
   12140:	bne	12234 <__assert_fail@plt+0x166c>
   12144:	b	122e0 <__assert_fail@plt+0x1718>
   12148:	cmp	r4, #13
   1214c:	bne	12508 <__assert_fail@plt+0x1940>
   12150:	sub	r2, r5, #8
   12154:	cmp	r2, #1
   12158:	bls	12234 <__assert_fail@plt+0x166c>
   1215c:	cmp	r5, #10
   12160:	movne	r1, #0
   12164:	moveq	r1, #1
   12168:	b	122f8 <__assert_fail@plt+0x1730>
   1216c:	sub	r3, r5, #8
   12170:	cmp	r3, #1
   12174:	bls	12234 <__assert_fail@plt+0x166c>
   12178:	cmp	ip, #12
   1217c:	orreq	r1, r1, #1
   12180:	cmp	r1, #0
   12184:	beq	12190 <__assert_fail@plt+0x15c8>
   12188:	cmp	r0, #15
   1218c:	beq	123b8 <__assert_fail@plt+0x17f0>
   12190:	cmp	r5, #7
   12194:	movne	r0, #0
   12198:	moveq	r0, #1
   1219c:	cmp	r5, #16
   121a0:	beq	12234 <__assert_fail@plt+0x166c>
   121a4:	cmp	r4, #16
   121a8:	beq	12208 <__assert_fail@plt+0x1640>
   121ac:	cmp	r4, #5
   121b0:	cmpeq	r5, #5
   121b4:	beq	12228 <__assert_fail@plt+0x1660>
   121b8:	cmp	r6, #0
   121bc:	bne	123c4 <__assert_fail@plt+0x17fc>
   121c0:	add	sp, sp, #36	; 0x24
   121c4:	ldrd	r4, [sp]
   121c8:	ldrd	r6, [sp, #8]
   121cc:	ldrd	r8, [sp, #16]
   121d0:	ldrd	sl, [sp, #24]
   121d4:	add	sp, sp, #32
   121d8:	pop	{pc}		; (ldr pc, [sp], #4)
   121dc:	cmp	r4, #14
   121e0:	bne	124cc <__assert_fail@plt+0x1904>
   121e4:	cmp	r5, #15
   121e8:	beq	12234 <__assert_fail@plt+0x166c>
   121ec:	cmp	r4, #7
   121f0:	movne	r1, #0
   121f4:	moveq	r1, #1
   121f8:	cmp	r5, #7
   121fc:	movne	r0, #0
   12200:	moveq	r0, #1
   12204:	b	12384 <__assert_fail@plt+0x17bc>
   12208:	sub	r5, r5, #8
   1220c:	cmp	r5, #1
   12210:	orrls	r2, r2, #1
   12214:	cmp	r2, #0
   12218:	bne	12234 <__assert_fail@plt+0x166c>
   1221c:	cmp	r0, #0
   12220:	beq	121b8 <__assert_fail@plt+0x15f0>
   12224:	b	12234 <__assert_fail@plt+0x166c>
   12228:	mov	r4, #5
   1222c:	b	12234 <__assert_fail@plt+0x166c>
   12230:	ldr	r4, [sp, #8]
   12234:	ldr	r3, [r6, #4]
   12238:	cmp	r3, #0
   1223c:	beq	123e4 <__assert_fail@plt+0x181c>
   12240:	mov	r7, r4
   12244:	mov	r0, r6
   12248:	bl	1200c <__assert_fail@plt+0x1444>
   1224c:	mov	r6, r0
   12250:	bl	11fd8 <__assert_fail@plt+0x1410>
   12254:	mov	r4, r0
   12258:	mov	r0, r6
   1225c:	bl	1200c <__assert_fail@plt+0x1444>
   12260:	str	r0, [sp, #4]
   12264:	bl	11fd8 <__assert_fail@plt+0x1410>
   12268:	mov	r5, r0
   1226c:	ldr	r0, [sp, #4]
   12270:	bl	1200c <__assert_fail@plt+0x1444>
   12274:	bl	11fd8 <__assert_fail@plt+0x1410>
   12278:	sub	r2, r4, #1
   1227c:	cmp	r5, #2
   12280:	movne	r3, #0
   12284:	moveq	r3, #1
   12288:	cmp	r4, #1
   1228c:	cmpeq	r5, #2
   12290:	beq	12230 <__assert_fail@plt+0x1668>
   12294:	cmp	r2, #2
   12298:	bls	121b8 <__assert_fail@plt+0x15f0>
   1229c:	bic	ip, r5, #2
   122a0:	cmp	ip, #1
   122a4:	orreq	r3, r3, #1
   122a8:	cmp	r3, #0
   122ac:	bne	121b8 <__assert_fail@plt+0x15f0>
   122b0:	sub	r3, r4, #8
   122b4:	cmp	r3, #1
   122b8:	bls	120f8 <__assert_fail@plt+0x1530>
   122bc:	sub	r2, r7, #8
   122c0:	cmp	r2, #1
   122c4:	bls	12148 <__assert_fail@plt+0x1580>
   122c8:	cmp	r4, #8
   122cc:	movne	r2, #0
   122d0:	moveq	r2, #1
   122d4:	cmp	r5, #10
   122d8:	movne	r1, #0
   122dc:	moveq	r1, #1
   122e0:	cmp	r5, #11
   122e4:	cmpeq	r0, #8
   122e8:	moveq	lr, #1
   122ec:	movne	lr, #0
   122f0:	tst	r2, lr
   122f4:	bne	123a0 <__assert_fail@plt+0x17d8>
   122f8:	cmp	r7, #8
   122fc:	cmpeq	r4, #11
   12300:	moveq	r2, #1
   12304:	movne	r2, #0
   12308:	cmp	r5, #8
   1230c:	movne	r2, #0
   12310:	andeq	r2, r2, #1
   12314:	cmp	r2, #0
   12318:	bne	123a8 <__assert_fail@plt+0x17e0>
   1231c:	cmp	r4, #15
   12320:	movne	lr, #0
   12324:	moveq	lr, #1
   12328:	cmp	r5, #15
   1232c:	movne	r2, #0
   12330:	moveq	r2, #1
   12334:	tst	lr, r2
   12338:	bne	123b0 <__assert_fail@plt+0x17e8>
   1233c:	cmp	r3, #1
   12340:	movhi	r3, #0
   12344:	movls	r3, #1
   12348:	tst	r2, r3
   1234c:	bne	12234 <__assert_fail@plt+0x166c>
   12350:	cmp	r4, #15
   12354:	beq	1216c <__assert_fail@plt+0x15a4>
   12358:	cmp	r7, #15
   1235c:	beq	121dc <__assert_fail@plt+0x1614>
   12360:	cmp	r4, #7
   12364:	movne	r1, #0
   12368:	moveq	r1, #1
   1236c:	cmp	r5, #7
   12370:	movne	r0, #0
   12374:	moveq	r0, #1
   12378:	tst	r1, r0
   1237c:	movne	r4, sl
   12380:	bne	12234 <__assert_fail@plt+0x166c>
   12384:	orrs	r3, lr, r3
   12388:	bne	1219c <__assert_fail@plt+0x15d4>
   1238c:	cmp	r4, #16
   12390:	orreq	r1, r1, #1
   12394:	cmp	r1, #0
   12398:	beq	121ac <__assert_fail@plt+0x15e4>
   1239c:	b	1219c <__assert_fail@plt+0x15d4>
   123a0:	mov	r4, r8
   123a4:	b	12234 <__assert_fail@plt+0x166c>
   123a8:	mov	r4, #11
   123ac:	b	12234 <__assert_fail@plt+0x166c>
   123b0:	mov	r4, fp
   123b4:	b	12234 <__assert_fail@plt+0x166c>
   123b8:	mov	r4, r0
   123bc:	b	12234 <__assert_fail@plt+0x166c>
   123c0:	mov	r6, r4
   123c4:	ldr	r4, [r6, #4]
   123c8:	cmp	r4, #0
   123cc:	beq	123e4 <__assert_fail@plt+0x181c>
   123d0:	mov	r0, r4
   123d4:	bl	11fd8 <__assert_fail@plt+0x1410>
   123d8:	bic	r0, r0, #2
   123dc:	cmp	r0, #4
   123e0:	beq	123c0 <__assert_fail@plt+0x17f8>
   123e4:	ldr	r0, [r9, #12]
   123e8:	bl	10a54 <utf8proc_get_property@plt>
   123ec:	ldrsh	r3, [r0]
   123f0:	cmp	r3, #0
   123f4:	ble	12408 <__assert_fail@plt+0x1840>
   123f8:	cmp	r3, #12
   123fc:	ble	12078 <__assert_fail@plt+0x14b0>
   12400:	cmp	r3, #29
   12404:	beq	12078 <__assert_fail@plt+0x14b0>
   12408:	ldr	r9, [r6, #4]
   1240c:	str	r9, [sp, #20]
   12410:	cmp	r9, #0
   12414:	beq	121c0 <__assert_fail@plt+0x15f8>
   12418:	mov	r7, #17
   1241c:	add	r6, sp, #16
   12420:	mov	fp, #15
   12424:	mov	sl, #7
   12428:	mov	r8, #8
   1242c:	b	12244 <__assert_fail@plt+0x167c>
   12430:	add	r0, r7, #1
   12434:	bl	10ae4 <malloc@plt>
   12438:	mov	r7, r0
   1243c:	mov	r4, #0
   12440:	add	r1, r7, r4
   12444:	ldr	r0, [r9, #12]
   12448:	bl	10a6c <utf8proc_encode_char@plt>
   1244c:	add	r4, r4, r0
   12450:	ldr	r9, [r9, #4]
   12454:	cmp	r5, r9
   12458:	beq	12490 <__assert_fail@plt+0x18c8>
   1245c:	cmp	r9, #0
   12460:	bne	12440 <__assert_fail@plt+0x1878>
   12464:	ldr	r3, [pc, #184]	; 12524 <__assert_fail@plt+0x195c>
   12468:	movw	r2, #269	; 0x10d
   1246c:	movw	r1, #26724	; 0x6864
   12470:	movt	r1, #1
   12474:	movw	r0, #26732	; 0x686c
   12478:	movt	r0, #1
   1247c:	bl	10bc8 <__assert_fail@plt>
   12480:	mov	r0, #1
   12484:	bl	10ae4 <malloc@plt>
   12488:	mov	r7, r0
   1248c:	mov	r4, #0
   12490:	mov	r3, #0
   12494:	strb	r3, [r7, r4]
   12498:	mov	r1, #12
   1249c:	mov	r0, #1
   124a0:	bl	12858 <error@@Base+0x40>
   124a4:	mov	r4, r0
   124a8:	mov	r0, r7
   124ac:	bl	10b68 <utf8proc_NFC@plt>
   124b0:	str	r0, [r4, #8]
   124b4:	mov	r1, r4
   124b8:	ldr	r0, [sp, #12]
   124bc:	bl	10fe0 <__assert_fail@plt+0x418>
   124c0:	mov	r0, r7
   124c4:	bl	10a48 <free@plt>
   124c8:	b	12408 <__assert_fail@plt+0x1840>
   124cc:	sub	r7, r4, #10
   124d0:	bics	r7, r7, #2
   124d4:	bne	12360 <__assert_fail@plt+0x1798>
   124d8:	cmp	r5, #15
   124dc:	beq	12234 <__assert_fail@plt+0x166c>
   124e0:	cmp	r4, #15
   124e4:	beq	12178 <__assert_fail@plt+0x15b0>
   124e8:	b	12360 <__assert_fail@plt+0x1798>
   124ec:	cmp	r4, #8
   124f0:	movne	r2, #0
   124f4:	moveq	r2, #1
   124f8:	cmp	r5, #10
   124fc:	movne	r1, #0
   12500:	moveq	r1, #1
   12504:	b	122e0 <__assert_fail@plt+0x1718>
   12508:	sub	r2, r4, #10
   1250c:	bics	r2, r2, #2
   12510:	bne	124ec <__assert_fail@plt+0x1924>
   12514:	sub	r2, r5, #8
   12518:	cmp	r2, #1
   1251c:	bhi	12120 <__assert_fail@plt+0x1558>
   12520:	b	12234 <__assert_fail@plt+0x166c>
   12524:	andeq	r3, r1, r4, lsl r5
   12528:	str	r4, [sp, #-8]!
   1252c:	str	lr, [sp, #4]
   12530:	mov	r4, r0
   12534:	ldr	r0, [r0, #8]
   12538:	bl	10a48 <free@plt>
   1253c:	mov	r0, r4
   12540:	bl	10a48 <free@plt>
   12544:	ldr	r4, [sp]
   12548:	add	sp, sp, #4
   1254c:	pop	{pc}		; (ldr pc, [sp], #4)
   12550:	strd	r4, [sp, #-12]!
   12554:	str	lr, [sp, #8]
   12558:	sub	sp, sp, #116	; 0x74
   1255c:	mov	r5, r0
   12560:	movw	r3, #37096	; 0x90e8
   12564:	movt	r3, #2
   12568:	ldr	r4, [r3]
   1256c:	bl	10b14 <getpid@plt>
   12570:	str	r5, [sp]
   12574:	mov	r3, r0
   12578:	mov	r2, r4
   1257c:	movw	r1, #26768	; 0x6890
   12580:	movt	r1, #1
   12584:	add	r0, sp, #12
   12588:	bl	10b80 <sprintf@plt>
   1258c:	add	r0, sp, #12
   12590:	bl	10a78 <strdup@plt>
   12594:	add	sp, sp, #116	; 0x74
   12598:	ldrd	r4, [sp]
   1259c:	add	sp, sp, #8
   125a0:	pop	{pc}		; (ldr pc, [sp], #4)
   125a4:	str	r7, [sp, #-8]!
   125a8:	str	lr, [sp, #4]
   125ac:	mov	r6, r0
   125b0:	movw	r3, #37100	; 0x90ec
   125b4:	movt	r3, #2
   125b8:	ldr	r3, [r3]
   125bc:	cmp	r3, #0
   125c0:	beq	125c8 <__assert_fail@plt+0x1a00>
   125c4:	blx	r3
   125c8:	movw	r3, #29000	; 0x7148
   125cc:	movt	r3, #2
   125d0:	ldrsh	r3, [r3]
   125d4:	cmp	r3, #0
   125d8:	ble	12614 <__assert_fail@plt+0x1a4c>
   125dc:	mov	r4, #1
   125e0:	movw	r5, #29000	; 0x7148
   125e4:	movt	r5, #2
   125e8:	mov	r0, r4
   125ec:	bl	12550 <__assert_fail@plt+0x1988>
   125f0:	mov	r7, r0
   125f4:	bl	10a90 <unlink@plt>
   125f8:	mov	r0, r7
   125fc:	bl	10a48 <free@plt>
   12600:	add	r4, r4, #1
   12604:	sxth	r4, r4
   12608:	ldrsh	r3, [r5]
   1260c:	cmp	r3, r4
   12610:	bge	125e8 <__assert_fail@plt+0x1a20>
   12614:	mov	r0, r6
   12618:	bl	10b20 <exit@plt>
   1261c:	str	r4, [sp, #-8]!
   12620:	str	lr, [sp, #4]
   12624:	ldrb	r3, [r0]
   12628:	cmp	r3, #0
   1262c:	beq	12680 <__assert_fail@plt+0x1ab8>
   12630:	ldrb	r2, [r1]
   12634:	cmp	r2, r3
   12638:	bne	1269c <__assert_fail@plt+0x1ad4>
   1263c:	mov	ip, r1
   12640:	mov	r2, r0
   12644:	rsb	r0, r0, #1
   12648:	add	r4, r0, r2
   1264c:	ldrb	r3, [r2, #1]!
   12650:	cmp	r3, #0
   12654:	beq	12684 <__assert_fail@plt+0x1abc>
   12658:	ldrb	lr, [ip, #1]!
   1265c:	cmp	lr, r3
   12660:	beq	12648 <__assert_fail@plt+0x1a80>
   12664:	ldrb	r2, [r1, r4]
   12668:	cmp	r2, r3
   1266c:	mvnhi	r0, #0
   12670:	movls	r0, #1
   12674:	ldr	r4, [sp]
   12678:	add	sp, sp, #4
   1267c:	pop	{pc}		; (ldr pc, [sp], #4)
   12680:	mov	r4, #0
   12684:	ldrb	r3, [r1, r4]
   12688:	cmp	r3, #0
   1268c:	moveq	r0, #0
   12690:	beq	12674 <__assert_fail@plt+0x1aac>
   12694:	mov	r3, #0
   12698:	b	12664 <__assert_fail@plt+0x1a9c>
   1269c:	mov	r4, #0
   126a0:	b	12664 <__assert_fail@plt+0x1a9c>
   126a4:	movw	r3, #28880	; 0x70d0
   126a8:	movt	r3, #2
   126ac:	ldr	r3, [r3]
   126b0:	cmp	r3, r0
   126b4:	bxeq	lr
   126b8:	movw	r3, #28884	; 0x70d4
   126bc:	movt	r3, #2
   126c0:	ldr	r3, [r3]
   126c4:	cmp	r3, r0
   126c8:	bxeq	lr
   126cc:	str	r4, [sp, #-8]!
   126d0:	str	lr, [sp, #4]
   126d4:	bl	10b5c <fclose@plt>
   126d8:	ldr	r4, [sp]
   126dc:	add	sp, sp, #4
   126e0:	pop	{pc}		; (ldr pc, [sp], #4)
   126e4:	push	{lr}		; (str lr, [sp, #-4]!)
   126e8:	sub	sp, sp, #92	; 0x5c
   126ec:	mov	r2, sp
   126f0:	mov	r1, r0
   126f4:	mov	r0, #3
   126f8:	bl	10aa8 <__xstat@plt>
   126fc:	clz	r0, r0
   12700:	lsr	r0, r0, #5
   12704:	add	sp, sp, #92	; 0x5c
   12708:	pop	{pc}		; (ldr pc, [sp], #4)
   1270c:	str	r4, [sp, #-8]!
   12710:	str	lr, [sp, #4]
   12714:	movw	r3, #29000	; 0x7148
   12718:	movt	r3, #2
   1271c:	ldrh	r0, [r3]
   12720:	add	r0, r0, #1
   12724:	sxth	r0, r0
   12728:	strh	r0, [r3]
   1272c:	bl	12550 <__assert_fail@plt+0x1988>
   12730:	mov	r4, r0
   12734:	bl	10a90 <unlink@plt>
   12738:	mov	r0, r4
   1273c:	ldr	r4, [sp]
   12740:	add	sp, sp, #4
   12744:	pop	{pc}		; (ldr pc, [sp], #4)
   12748:	str	r4, [sp, #-8]!
   1274c:	str	lr, [sp, #4]
   12750:	mov	r4, r0
   12754:	bl	10b38 <strlen@plt>
   12758:	uxth	r0, r0
   1275c:	sub	r2, r0, #1
   12760:	sxth	r2, r2
   12764:	cmp	r2, #0
   12768:	blt	127a4 <__assert_fail@plt+0x1bdc>
   1276c:	ldrb	r3, [r4, r2]
   12770:	cmp	r3, #47	; 0x2f
   12774:	beq	127a4 <__assert_fail@plt+0x1bdc>
   12778:	sub	r0, r0, #2
   1277c:	sxth	r3, r0
   12780:	add	r1, r3, #1
   12784:	add	r1, r4, r1
   12788:	sxth	r2, r3
   1278c:	cmp	r2, #0
   12790:	blt	127a4 <__assert_fail@plt+0x1bdc>
   12794:	sub	r3, r3, #1
   12798:	ldrb	r0, [r1, #-1]!
   1279c:	cmp	r0, #47	; 0x2f
   127a0:	bne	12788 <__assert_fail@plt+0x1bc0>
   127a4:	add	r0, r2, #1
   127a8:	add	r0, r4, r0
   127ac:	ldr	r4, [sp]
   127b0:	add	sp, sp, #4
   127b4:	pop	{pc}		; (ldr pc, [sp], #4)
   127b8:	str	r4, [sp, #-8]!
   127bc:	str	lr, [sp, #4]
   127c0:	mov	r0, #0
   127c4:	bl	125a4 <__assert_fail@plt+0x19dc>
   127c8:	str	r4, [sp, #-8]!
   127cc:	str	lr, [sp, #4]
   127d0:	movw	r2, #37092	; 0x90e4
   127d4:	movt	r2, #2
   127d8:	ldr	r2, [r2]
   127dc:	cmp	r2, #0
   127e0:	beq	127ec <__assert_fail@plt+0x1c24>
   127e4:	blx	r2
   127e8:	bl	127b8 <__assert_fail@plt+0x1bf0>
   127ec:	movw	r2, #37096	; 0x90e8
   127f0:	movt	r2, #2
   127f4:	movw	ip, #28872	; 0x70c8
   127f8:	movt	ip, #2
   127fc:	mov	r3, r0
   12800:	ldr	r2, [r2]
   12804:	movw	r1, #26784	; 0x68a0
   12808:	movt	r1, #1
   1280c:	ldr	r0, [ip]
   12810:	bl	10b44 <fprintf@plt>
   12814:	b	127e8 <__assert_fail@plt+0x1c20>

00012818 <error@@Base>:
   12818:	str	r4, [sp, #-8]!
   1281c:	str	lr, [sp, #4]
   12820:	movw	r2, #37096	; 0x90e8
   12824:	movt	r2, #2
   12828:	movw	ip, #28872	; 0x70c8
   1282c:	movt	ip, #2
   12830:	mov	r3, r0
   12834:	ldr	r2, [r2]
   12838:	movw	r1, #26800	; 0x68b0
   1283c:	movt	r1, #1
   12840:	ldr	r0, [ip]
   12844:	bl	10b44 <fprintf@plt>
   12848:	movw	r3, #28860	; 0x70bc
   1284c:	movt	r3, #2
   12850:	ldr	r0, [r3]
   12854:	bl	125a4 <__assert_fail@plt+0x19dc>
   12858:	str	r4, [sp, #-8]!
   1285c:	str	lr, [sp, #4]
   12860:	bl	10a0c <calloc@plt>
   12864:	cmp	r0, #0
   12868:	beq	12878 <error@@Base+0x60>
   1286c:	ldr	r4, [sp]
   12870:	add	sp, sp, #4
   12874:	pop	{pc}		; (ldr pc, [sp], #4)
   12878:	movw	r0, #26808	; 0x68b8
   1287c:	movt	r0, #1
   12880:	bl	12818 <error@@Base>
   12884:	movw	r3, #29000	; 0x7148
   12888:	movt	r3, #2
   1288c:	ldrb	r3, [r3, #2]
   12890:	cmp	r3, #0
   12894:	bxne	lr
   12898:	str	r4, [sp, #-8]!
   1289c:	str	lr, [sp, #4]
   128a0:	movw	r3, #29000	; 0x7148
   128a4:	movt	r3, #2
   128a8:	mov	r2, #1
   128ac:	strb	r2, [r3, #2]
   128b0:	movw	r0, #26836	; 0x68d4
   128b4:	movt	r0, #1
   128b8:	bl	12818 <error@@Base>
   128bc:	push	{lr}		; (str lr, [sp, #-4]!)
   128c0:	sub	sp, sp, #12
   128c4:	movw	r2, #37096	; 0x90e8
   128c8:	movt	r2, #2
   128cc:	movw	ip, #28872	; 0x70c8
   128d0:	movt	ip, #2
   128d4:	str	r1, [sp]
   128d8:	mov	r3, r0
   128dc:	ldr	r2, [r2]
   128e0:	movw	r1, #26852	; 0x68e4
   128e4:	movt	r1, #1
   128e8:	ldr	r0, [ip]
   128ec:	bl	10b44 <fprintf@plt>
   128f0:	movw	r3, #28860	; 0x70bc
   128f4:	movt	r3, #2
   128f8:	ldr	r0, [r3]
   128fc:	bl	125a4 <__assert_fail@plt+0x19dc>
   12900:	strd	r4, [sp, #-16]!
   12904:	str	r6, [sp, #8]
   12908:	str	lr, [sp, #12]
   1290c:	subs	r5, r0, #0
   12910:	beq	12938 <error@@Base+0x120>
   12914:	mov	r4, r1
   12918:	mov	r0, r5
   1291c:	bl	10a3c <fopen@plt>
   12920:	cmp	r0, #0
   12924:	beq	12958 <error@@Base+0x140>
   12928:	ldrd	r4, [sp]
   1292c:	ldr	r6, [sp, #8]
   12930:	add	sp, sp, #12
   12934:	pop	{pc}		; (ldr pc, [sp], #4)
   12938:	ldrb	r3, [r1]
   1293c:	cmp	r3, #114	; 0x72
   12940:	movweq	r3, #28880	; 0x70d0
   12944:	movteq	r3, #2
   12948:	movwne	r3, #28884	; 0x70d4
   1294c:	movtne	r3, #2
   12950:	ldr	r0, [r3]
   12954:	b	12928 <error@@Base+0x110>
   12958:	ldrb	r3, [r4]
   1295c:	cmp	r3, #119	; 0x77
   12960:	beq	12974 <error@@Base+0x15c>
   12964:	mov	r1, r5
   12968:	movw	r0, #26892	; 0x690c
   1296c:	movt	r0, #1
   12970:	bl	128bc <error@@Base+0xa4>
   12974:	mov	r1, r5
   12978:	movw	r0, #26868	; 0x68f4
   1297c:	movt	r0, #1
   12980:	bl	128bc <error@@Base+0xa4>
   12984:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12988:	strd	r6, [sp, #8]
   1298c:	strd	r8, [sp, #16]
   12990:	strd	sl, [sp, #24]
   12994:	str	lr, [sp, #32]
   12998:	sub	sp, sp, #28
   1299c:	mov	r5, r0
   129a0:	str	r0, [sp, #4]
   129a4:	mov	r9, r1
   129a8:	str	r2, [sp, #20]
   129ac:	mov	r6, r3
   129b0:	ldr	r0, [r1]
   129b4:	bl	12748 <__assert_fail@plt+0x1b80>
   129b8:	movw	r3, #37096	; 0x90e8
   129bc:	movt	r3, #2
   129c0:	str	r0, [r3]
   129c4:	movw	r4, #10372	; 0x2884
   129c8:	movt	r4, #1
   129cc:	mov	r1, r4
   129d0:	mov	r0, #2
   129d4:	bl	10afc <__sysv_signal@plt>
   129d8:	mov	r1, r4
   129dc:	mov	r0, #15
   129e0:	bl	10afc <__sysv_signal@plt>
   129e4:	ldr	r7, [r5]
   129e8:	cmp	r7, #1
   129ec:	beq	12a18 <error@@Base+0x200>
   129f0:	movle	r8, #0
   129f4:	ble	12a30 <error@@Base+0x218>
   129f8:	mov	r8, #0
   129fc:	mov	sl, #1
   12a00:	mov	r4, sl
   12a04:	movw	r3, #26912	; 0x6920
   12a08:	movt	r3, #1
   12a0c:	str	r3, [sp, #12]
   12a10:	str	r6, [sp, #16]
   12a14:	b	12ad4 <error@@Base+0x2bc>
   12a18:	movw	r3, #28860	; 0x70bc
   12a1c:	movt	r3, #2
   12a20:	ldrb	r3, [r3, #4]
   12a24:	cmp	r3, #0
   12a28:	moveq	r8, #0
   12a2c:	bne	12a54 <error@@Base+0x23c>
   12a30:	ldr	r3, [sp, #4]
   12a34:	str	r8, [r3]
   12a38:	add	sp, sp, #28
   12a3c:	ldrd	r4, [sp]
   12a40:	ldrd	r6, [sp, #8]
   12a44:	ldrd	r8, [sp, #16]
   12a48:	ldrd	sl, [sp, #24]
   12a4c:	add	sp, sp, #32
   12a50:	pop	{pc}		; (ldr pc, [sp], #4)
   12a54:	ldr	r0, [sp, #20]
   12a58:	bl	127c8 <__assert_fail@plt+0x1c00>
   12a5c:	ldr	r0, [sp, #20]
   12a60:	bl	127c8 <__assert_fail@plt+0x1c00>
   12a64:	ldr	r0, [sp, #16]
   12a68:	b	12b6c <error@@Base+0x354>
   12a6c:	ldr	r3, [r0, #8]
   12a70:	cmp	r3, #0
   12a74:	beq	12bc8 <error@@Base+0x3b0>
   12a78:	ldrb	r2, [r5, #2]
   12a7c:	cmp	r2, #0
   12a80:	bne	12bc8 <error@@Base+0x3b0>
   12a84:	ldrb	r2, [r3]
   12a88:	cmp	r2, #0
   12a8c:	bne	12a9c <error@@Base+0x284>
   12a90:	mov	r2, #1
   12a94:	strb	r2, [r3]
   12a98:	b	12ab8 <error@@Base+0x2a0>
   12a9c:	mov	r1, r5
   12aa0:	movw	r0, #26936	; 0x6938
   12aa4:	movt	r0, #1
   12aa8:	bl	128bc <error@@Base+0xa4>
   12aac:	add	r3, r8, #1
   12ab0:	str	r5, [r9, r8, lsl #2]
   12ab4:	sxth	r8, r3
   12ab8:	add	r4, r4, #1
   12abc:	sxth	r4, r4
   12ac0:	mov	sl, r4
   12ac4:	ldr	r3, [sp, #4]
   12ac8:	ldr	r7, [r3]
   12acc:	cmp	r4, r7
   12ad0:	bge	12a30 <error@@Base+0x218>
   12ad4:	lsl	r3, r4, #2
   12ad8:	str	r3, [sp, #8]
   12adc:	ldr	r5, [r9, r4, lsl #2]
   12ae0:	ldrb	r3, [r5]
   12ae4:	cmp	r3, #45	; 0x2d
   12ae8:	bne	12aac <error@@Base+0x294>
   12aec:	ldrb	fp, [r5, #1]
   12af0:	cmp	fp, #0
   12af4:	beq	12aac <error@@Base+0x294>
   12af8:	mov	r0, r5
   12afc:	bl	10b38 <strlen@plt>
   12b00:	mov	r2, r0
   12b04:	mov	r1, r5
   12b08:	ldr	r0, [sp, #12]
   12b0c:	bl	10ba4 <strncmp@plt>
   12b10:	cmp	r0, #0
   12b14:	beq	12a5c <error@@Base+0x244>
   12b18:	add	sl, sl, #1
   12b1c:	cmp	sl, r7
   12b20:	ldrlt	r3, [sp, #8]
   12b24:	addlt	r3, r9, r3
   12b28:	ldrlt	r1, [r3, #4]
   12b2c:	movge	r1, #0
   12b30:	cmp	r6, #0
   12b34:	beq	12bc8 <error@@Base+0x3b0>
   12b38:	ldrb	r3, [r6]
   12b3c:	cmp	fp, r3
   12b40:	cmpne	r3, #0
   12b44:	beq	12a64 <error@@Base+0x24c>
   12b48:	mov	r2, #0
   12b4c:	add	r2, r2, #1
   12b50:	sxth	r2, r2
   12b54:	add	r3, r2, r2, lsl #1
   12b58:	add	r0, r6, r3, lsl #2
   12b5c:	ldrb	r3, [r6, r3, lsl #2]
   12b60:	cmp	fp, r3
   12b64:	cmpne	r3, #0
   12b68:	bne	12b4c <error@@Base+0x334>
   12b6c:	cmp	r3, #0
   12b70:	beq	12bc8 <error@@Base+0x3b0>
   12b74:	ldr	r3, [r0, #4]
   12b78:	cmp	r3, #0
   12b7c:	beq	12a6c <error@@Base+0x254>
   12b80:	ldrb	r2, [r5, #2]
   12b84:	cmp	r1, #0
   12b88:	cmpeq	r2, #0
   12b8c:	beq	12bbc <error@@Base+0x3a4>
   12b90:	ldr	r0, [r3]
   12b94:	cmp	r0, #0
   12b98:	bne	12a9c <error@@Base+0x284>
   12b9c:	cmp	r2, #0
   12ba0:	addne	r1, r5, #2
   12ba4:	str	r1, [r3]
   12ba8:	ldrb	r3, [r5, #2]
   12bac:	cmp	r3, #0
   12bb0:	addeq	r4, r4, #1
   12bb4:	sxtheq	r4, r4
   12bb8:	b	12ab8 <error@@Base+0x2a0>
   12bbc:	ldr	r3, [r0, #8]
   12bc0:	cmp	r3, #0
   12bc4:	bne	12a84 <error@@Base+0x26c>
   12bc8:	mov	r1, r5
   12bcc:	movw	r0, #26920	; 0x6928
   12bd0:	movt	r0, #1
   12bd4:	bl	128bc <error@@Base+0xa4>
   12bd8:	push	{lr}		; (str lr, [sp, #-4]!)
   12bdc:	sub	sp, sp, #12
   12be0:	movw	r2, #37096	; 0x90e8
   12be4:	movt	r2, #2
   12be8:	movw	ip, #28872	; 0x70c8
   12bec:	movt	ip, #2
   12bf0:	str	r1, [sp]
   12bf4:	mov	r3, r0
   12bf8:	ldr	r2, [r2]
   12bfc:	movw	r1, #26852	; 0x68e4
   12c00:	movt	r1, #1
   12c04:	ldr	r0, [ip]
   12c08:	bl	10b44 <fprintf@plt>
   12c0c:	add	sp, sp, #12
   12c10:	pop	{pc}		; (ldr pc, [sp], #4)
   12c14:	strd	r4, [sp, #-16]!
   12c18:	str	r6, [sp, #8]
   12c1c:	str	lr, [sp, #12]
   12c20:	mov	r4, r0
   12c24:	mov	r5, r2
   12c28:	uxtb	r6, r1
   12c2c:	mov	r1, #16
   12c30:	mov	r0, #1
   12c34:	bl	12858 <error@@Base+0x40>
   12c38:	mov	r1, r0
   12c3c:	strb	r6, [r0, #8]
   12c40:	str	r5, [r0, #12]
   12c44:	mov	r0, r4
   12c48:	bl	10fe0 <__assert_fail@plt+0x418>
   12c4c:	ldrd	r4, [sp]
   12c50:	ldr	r6, [sp, #8]
   12c54:	add	sp, sp, #12
   12c58:	pop	{pc}		; (ldr pc, [sp], #4)
   12c5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12c60:	strd	r6, [sp, #8]
   12c64:	strd	r8, [sp, #16]
   12c68:	strd	sl, [sp, #24]
   12c6c:	str	lr, [sp, #32]
   12c70:	sub	sp, sp, #116	; 0x74
   12c74:	mov	r8, r0
   12c78:	ldrb	r3, [r2]
   12c7c:	mov	r0, r1
   12c80:	clz	r1, r1
   12c84:	lsr	r1, r1, #5
   12c88:	cmp	r3, #0
   12c8c:	moveq	r1, #0
   12c90:	cmp	r1, #0
   12c94:	bne	12d04 <error@@Base+0x4ec>
   12c98:	mov	r4, r2
   12c9c:	ldr	sl, [r8, #4]
   12ca0:	movw	r1, #13368	; 0x3438
   12ca4:	movt	r1, #1
   12ca8:	bl	12900 <error@@Base+0xe8>
   12cac:	str	r0, [sp]
   12cb0:	ldrb	r3, [r4]
   12cb4:	cmp	r3, #0
   12cb8:	bne	12d18 <error@@Base+0x500>
   12cbc:	ldrb	fp, [r4, #1]
   12cc0:	ldr	r7, [r4, #4]
   12cc4:	cmp	r7, #0
   12cc8:	moveq	r7, #94	; 0x5e
   12ccc:	ldr	r0, [sp]
   12cd0:	bl	10bbc <getc@plt>
   12cd4:	cmn	r0, #1
   12cd8:	beq	12e70 <error@@Base+0x658>
   12cdc:	movw	r3, #28168	; 0x6e08
   12ce0:	movt	r3, #2
   12ce4:	ldrsb	r5, [r3, r0]
   12ce8:	cmp	r5, #0
   12cec:	ble	12db8 <error@@Base+0x5a0>
   12cf0:	mov	r3, #0
   12cf4:	str	r3, [sp, #4]
   12cf8:	movw	r9, #28168	; 0x6e08
   12cfc:	movt	r9, #2
   12d00:	b	12e0c <error@@Base+0x5f4>
   12d04:	movw	r1, #26956	; 0x694c
   12d08:	movt	r1, #1
   12d0c:	movw	r0, #26968	; 0x6958
   12d10:	movt	r0, #1
   12d14:	bl	128bc <error@@Base+0xa4>
   12d18:	mov	r2, r0
   12d1c:	mov	r1, #99	; 0x63
   12d20:	add	r0, sp, #12
   12d24:	bl	10a60 <fgets@plt>
   12d28:	cmp	r0, #0
   12d2c:	beq	12d4c <error@@Base+0x534>
   12d30:	mov	r2, #51	; 0x33
   12d34:	movw	r1, #26984	; 0x6968
   12d38:	movt	r1, #1
   12d3c:	add	r0, sp, #12
   12d40:	bl	10ba4 <strncmp@plt>
   12d44:	cmp	r0, #0
   12d48:	beq	12d60 <error@@Base+0x548>
   12d4c:	ldr	r0, [sp]
   12d50:	bl	10a84 <rewind@plt>
   12d54:	mov	r3, #0
   12d58:	strb	r3, [r4, #11]
   12d5c:	b	12cbc <error@@Base+0x4a4>
   12d60:	mov	r5, #0
   12d64:	mov	r7, #99	; 0x63
   12d68:	movw	r6, #27040	; 0x69a0
   12d6c:	movt	r6, #1
   12d70:	ldr	r2, [sp]
   12d74:	mov	r1, r7
   12d78:	add	r0, sp, #12
   12d7c:	bl	10a60 <fgets@plt>
   12d80:	cmp	r0, #0
   12d84:	beq	12db0 <error@@Base+0x598>
   12d88:	mov	r1, r6
   12d8c:	add	r0, sp, #12
   12d90:	bl	10a18 <strcmp@plt>
   12d94:	cmp	r0, #0
   12d98:	addeq	r5, r5, #1
   12d9c:	sxtheq	r5, r5
   12da0:	cmp	r5, #1
   12da4:	ble	12d70 <error@@Base+0x558>
   12da8:	mov	r3, #1
   12dac:	b	12d58 <error@@Base+0x540>
   12db0:	mov	r3, #1
   12db4:	b	12d58 <error@@Base+0x540>
   12db8:	movw	r0, #27096	; 0x69d8
   12dbc:	movt	r0, #1
   12dc0:	bl	12818 <error@@Base>
   12dc4:	movw	r0, #27120	; 0x69f0
   12dc8:	movt	r0, #1
   12dcc:	bl	12818 <error@@Base>
   12dd0:	bl	10b8c <utf8proc_errmsg@plt>
   12dd4:	bl	12818 <error@@Base>
   12dd8:	ldr	r2, [sp, #12]
   12ddc:	ldr	r1, [sp, #4]
   12de0:	mov	r0, r8
   12de4:	bl	12c14 <error@@Base+0x3fc>
   12de8:	mov	r3, #0
   12dec:	str	r3, [sp, #4]
   12df0:	ldr	r0, [sp]
   12df4:	bl	10bbc <getc@plt>
   12df8:	cmn	r0, #1
   12dfc:	beq	12e70 <error@@Base+0x658>
   12e00:	ldrsb	r5, [r9, r0]
   12e04:	cmp	r5, #0
   12e08:	ble	12db8 <error@@Base+0x5a0>
   12e0c:	strb	r0, [sp, #8]
   12e10:	cmp	r5, #1
   12e14:	ble	12e38 <error@@Base+0x620>
   12e18:	sub	r6, r5, #1
   12e1c:	ldr	r3, [sp]
   12e20:	mov	r2, r6
   12e24:	mov	r1, #1
   12e28:	add	r0, sp, #9
   12e2c:	bl	10ac0 <fread@plt>
   12e30:	cmp	r6, r0
   12e34:	bne	12dc4 <error@@Base+0x5ac>
   12e38:	add	r2, sp, #12
   12e3c:	mov	r1, #4
   12e40:	add	r0, sp, #8
   12e44:	bl	10acc <utf8proc_iterate@plt>
   12e48:	cmp	r0, r5
   12e4c:	bne	12dd0 <error@@Base+0x5b8>
   12e50:	cmp	fp, #0
   12e54:	beq	12dd8 <error@@Base+0x5c0>
   12e58:	ldr	r3, [sp, #12]
   12e5c:	cmp	r7, r3
   12e60:	bne	12dd8 <error@@Base+0x5c0>
   12e64:	mov	r3, #1
   12e68:	str	r3, [sp, #4]
   12e6c:	b	12df0 <error@@Base+0x5d8>
   12e70:	ldr	r0, [sp]
   12e74:	bl	126a4 <__assert_fail@plt+0x1adc>
   12e78:	ldrb	r3, [r4, #9]
   12e7c:	cmp	r3, #0
   12e80:	beq	12fcc <error@@Base+0x7b4>
   12e84:	cmp	sl, #0
   12e88:	ldrne	r5, [sl, #4]
   12e8c:	ldreq	r5, [r8]
   12e90:	cmp	r5, #0
   12e94:	beq	12fcc <error@@Base+0x7b4>
   12e98:	mov	r6, r5
   12e9c:	mov	r9, #32
   12ea0:	mov	r7, #0
   12ea4:	b	12ed8 <error@@Base+0x6c0>
   12ea8:	cmp	fp, #160	; 0xa0
   12eac:	beq	12ec8 <error@@Base+0x6b0>
   12eb0:	ldrsh	r3, [r0]
   12eb4:	sub	r3, r3, #23
   12eb8:	cmp	r3, #2
   12ebc:	movhi	r3, #0
   12ec0:	movls	r3, #1
   12ec4:	b	12f08 <error@@Base+0x6f0>
   12ec8:	str	r9, [r6, #12]
   12ecc:	ldr	r6, [r6, #4]
   12ed0:	cmp	r6, #0
   12ed4:	beq	12f14 <error@@Base+0x6fc>
   12ed8:	ldr	fp, [r6, #12]
   12edc:	mov	r0, fp
   12ee0:	bl	10a54 <utf8proc_get_property@plt>
   12ee4:	cmp	fp, #13
   12ee8:	bhi	12ea8 <error@@Base+0x690>
   12eec:	cmp	fp, #11
   12ef0:	bcs	12ec8 <error@@Base+0x6b0>
   12ef4:	cmp	fp, #9
   12ef8:	beq	12ec8 <error@@Base+0x6b0>
   12efc:	cmp	fp, #10
   12f00:	moveq	r3, r7
   12f04:	bne	12eb0 <error@@Base+0x698>
   12f08:	cmp	r3, #0
   12f0c:	beq	12ecc <error@@Base+0x6b4>
   12f10:	b	12ec8 <error@@Base+0x6b0>
   12f14:	mov	r7, #0
   12f18:	b	12f54 <error@@Base+0x73c>
   12f1c:	eor	r2, r7, #1
   12f20:	cmp	r6, #0
   12f24:	moveq	r2, #1
   12f28:	cmp	r2, #0
   12f2c:	bne	12f80 <error@@Base+0x768>
   12f30:	ldr	r2, [r6, #12]
   12f34:	cmp	r2, #10
   12f38:	cmpne	r2, #32
   12f3c:	beq	12f94 <error@@Base+0x77c>
   12f40:	subs	r7, r3, #10
   12f44:	movne	r7, #1
   12f48:	mov	r5, r6
   12f4c:	cmp	r6, #0
   12f50:	beq	12fcc <error@@Base+0x7b4>
   12f54:	ldr	r6, [r5, #4]
   12f58:	ldr	r3, [r5, #12]
   12f5c:	cmp	r3, #32
   12f60:	beq	12f1c <error@@Base+0x704>
   12f64:	eor	r2, r7, #1
   12f68:	cmp	r3, #10
   12f6c:	movne	r2, #0
   12f70:	andeq	r2, r2, #1
   12f74:	cmp	r2, #0
   12f78:	beq	12f40 <error@@Base+0x728>
   12f7c:	b	12fa0 <error@@Base+0x788>
   12f80:	cmp	r6, #0
   12f84:	movne	r3, r7
   12f88:	moveq	r3, #0
   12f8c:	cmp	r3, #0
   12f90:	beq	12fa0 <error@@Base+0x788>
   12f94:	ldr	r3, [r6, #12]
   12f98:	cmp	r3, #32
   12f9c:	beq	12fb8 <error@@Base+0x7a0>
   12fa0:	mov	r1, r5
   12fa4:	mov	r0, r8
   12fa8:	bl	11048 <__assert_fail@plt+0x480>
   12fac:	mov	r0, r5
   12fb0:	bl	10a48 <free@plt>
   12fb4:	b	12f48 <error@@Base+0x730>
   12fb8:	ldrb	r3, [r6, #8]
   12fbc:	ldrb	r2, [r5, #8]
   12fc0:	orr	r3, r3, r2
   12fc4:	strb	r3, [r6, #8]
   12fc8:	b	12fa0 <error@@Base+0x788>
   12fcc:	ldrb	r3, [r4, #10]
   12fd0:	cmp	r3, #0
   12fd4:	beq	13004 <error@@Base+0x7ec>
   12fd8:	cmp	sl, #0
   12fdc:	ldrne	r4, [sl, #4]
   12fe0:	ldreq	r4, [r8]
   12fe4:	cmp	r4, #0
   12fe8:	beq	13004 <error@@Base+0x7ec>
   12fec:	ldr	r0, [r4, #12]
   12ff0:	bl	10a9c <utf8proc_tolower@plt>
   12ff4:	str	r0, [r4, #12]
   12ff8:	ldr	r4, [r4, #4]
   12ffc:	cmp	r4, #0
   13000:	bne	12fec <error@@Base+0x7d4>
   13004:	add	sp, sp, #116	; 0x74
   13008:	ldrd	r4, [sp]
   1300c:	ldrd	r6, [sp, #8]
   13010:	ldrd	r8, [sp, #16]
   13014:	ldrd	sl, [sp, #24]
   13018:	add	sp, sp, #32
   1301c:	pop	{pc}		; (ldr pc, [sp], #4)
   13020:	str	r4, [sp, #-8]!
   13024:	str	lr, [sp, #4]
   13028:	bl	10a6c <utf8proc_encode_char@plt>
   1302c:	cmp	r0, #0
   13030:	ble	13044 <error@@Base+0x82c>
   13034:	sxtb	r0, r0
   13038:	ldr	r4, [sp]
   1303c:	add	sp, sp, #4
   13040:	pop	{pc}		; (ldr pc, [sp], #4)
   13044:	movw	r0, #27144	; 0x6a08
   13048:	movt	r0, #1
   1304c:	bl	12818 <error@@Base>
   13050:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13054:	strd	r6, [sp, #8]
   13058:	str	r8, [sp, #16]
   1305c:	str	lr, [sp, #20]
   13060:	mov	r4, r1
   13064:	mov	r6, r2
   13068:	uxtb	r0, r0
   1306c:	uxtb	r7, r3
   13070:	cmp	r0, #0
   13074:	moveq	r5, #0
   13078:	bne	130b8 <error@@Base+0x8a0>
   1307c:	cmp	r4, #10
   13080:	bne	130cc <error@@Base+0x8b4>
   13084:	movw	r1, #27168	; 0x6a20
   13088:	movt	r1, #1
   1308c:	movw	r3, #13488	; 0x34b0
   13090:	movt	r3, #1
   13094:	cmp	r7, #0
   13098:	moveq	r1, r3
   1309c:	add	r0, r6, r5
   130a0:	bl	10b80 <sprintf@plt>
   130a4:	ldrd	r4, [sp]
   130a8:	ldrd	r6, [sp, #8]
   130ac:	ldr	r8, [sp, #16]
   130b0:	add	sp, sp, #20
   130b4:	pop	{pc}		; (ldr pc, [sp], #4)
   130b8:	mov	r1, r2
   130bc:	mov	r0, #94	; 0x5e
   130c0:	bl	13020 <error@@Base+0x808>
   130c4:	sxth	r5, r0
   130c8:	b	1307c <error@@Base+0x864>
   130cc:	mov	r0, r4
   130d0:	bl	10a54 <utf8proc_get_property@plt>
   130d4:	cmp	r4, #32
   130d8:	beq	130f8 <error@@Base+0x8e0>
   130dc:	ldrsh	r3, [r0]
   130e0:	cmp	r3, #0
   130e4:	ble	13144 <error@@Base+0x92c>
   130e8:	cmp	r3, #22
   130ec:	ble	130f8 <error@@Base+0x8e0>
   130f0:	cmp	r3, #29
   130f4:	bne	13144 <error@@Base+0x92c>
   130f8:	mov	r0, r4
   130fc:	bl	10b2c <utf8proc_category@plt>
   13100:	sub	r0, r0, #6
   13104:	cmp	r0, #2
   13108:	bls	1312c <error@@Base+0x914>
   1310c:	add	r1, r6, r5
   13110:	mov	r0, r4
   13114:	bl	13020 <error@@Base+0x808>
   13118:	add	r0, r0, r5
   1311c:	sxth	r0, r0
   13120:	mov	r3, #0
   13124:	strb	r3, [r6, r0]
   13128:	b	130a4 <error@@Base+0x88c>
   1312c:	add	r1, r6, r5
   13130:	movw	r0, #9676	; 0x25cc
   13134:	bl	13020 <error@@Base+0x808>
   13138:	add	r5, r0, r5
   1313c:	sxth	r5, r5
   13140:	b	1310c <error@@Base+0x8f4>
   13144:	cmp	r4, #255	; 0xff
   13148:	mov	r2, r4
   1314c:	movwls	r1, #27176	; 0x6a28
   13150:	movtls	r1, #1
   13154:	movwhi	r1, #27184	; 0x6a30
   13158:	movthi	r1, #1
   1315c:	add	r0, r6, r5
   13160:	bl	10b80 <sprintf@plt>
   13164:	b	130a4 <error@@Base+0x88c>
   13168:	strd	r4, [sp, #-20]!	; 0xffffffec
   1316c:	strd	r6, [sp, #8]
   13170:	str	lr, [sp, #16]
   13174:	sub	sp, sp, #20
   13178:	mov	r7, r0
   1317c:	mov	r0, r1
   13180:	mov	r6, r2
   13184:	movw	r1, #13440	; 0x3480
   13188:	movt	r1, #1
   1318c:	bl	12900 <error@@Base+0xe8>
   13190:	mov	r5, r0
   13194:	cmp	r6, #0
   13198:	beq	131ec <error@@Base+0x9d4>
   1319c:	mov	r3, r0
   131a0:	mov	r2, #55	; 0x37
   131a4:	mov	r1, #1
   131a8:	movw	r0, #26984	; 0x6968
   131ac:	movt	r0, #1
   131b0:	bl	10ab4 <fwrite@plt>
   131b4:	movw	r4, #27040	; 0x69a0
   131b8:	movt	r4, #1
   131bc:	mov	r3, r5
   131c0:	mov	r2, #55	; 0x37
   131c4:	mov	r1, #1
   131c8:	mov	r0, r4
   131cc:	bl	10ab4 <fwrite@plt>
   131d0:	mov	r0, r5
   131d4:	blx	r6
   131d8:	mov	r3, r5
   131dc:	mov	r2, #55	; 0x37
   131e0:	mov	r1, #1
   131e4:	mov	r0, r4
   131e8:	bl	10ab4 <fwrite@plt>
   131ec:	ldr	r4, [r7]
   131f0:	cmp	r4, #0
   131f4:	beq	13228 <error@@Base+0xa10>
   131f8:	mov	r6, #0
   131fc:	mov	r3, r6
   13200:	add	r2, sp, #4
   13204:	ldr	r1, [r4, #12]
   13208:	ldrb	r0, [r4, #8]
   1320c:	bl	13050 <error@@Base+0x838>
   13210:	mov	r1, r5
   13214:	add	r0, sp, #4
   13218:	bl	10b98 <fputs@plt>
   1321c:	ldr	r4, [r4, #4]
   13220:	cmp	r4, #0
   13224:	bne	131fc <error@@Base+0x9e4>
   13228:	mov	r0, r5
   1322c:	bl	126a4 <__assert_fail@plt+0x1adc>
   13230:	add	sp, sp, #20
   13234:	ldrd	r4, [sp]
   13238:	ldrd	r6, [sp, #8]
   1323c:	add	sp, sp, #16
   13240:	pop	{pc}		; (ldr pc, [sp], #4)
   13244:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13248:	strd	r6, [sp, #8]
   1324c:	str	r8, [sp, #16]
   13250:	str	lr, [sp, #20]
   13254:	sub	sp, sp, #8
   13258:	mov	r3, #0
   1325c:	str	r3, [sp, #4]
   13260:	ldrb	r3, [r1]
   13264:	cmp	r3, #0
   13268:	beq	132b8 <error@@Base+0xaa0>
   1326c:	mov	r6, r0
   13270:	mov	r4, r1
   13274:	mvn	r5, #0
   13278:	mov	r7, #0
   1327c:	add	r2, sp, #4
   13280:	mov	r1, r5
   13284:	mov	r0, r4
   13288:	bl	10acc <utf8proc_iterate@plt>
   1328c:	subs	r8, r0, #0
   13290:	ble	132c0 <error@@Base+0xaa8>
   13294:	ldr	r2, [sp, #4]
   13298:	mov	r1, r7
   1329c:	mov	r0, r6
   132a0:	bl	12c14 <error@@Base+0x3fc>
   132a4:	ldrb	r3, [r4, r8]!
   132a8:	cmp	r3, #0
   132ac:	bne	1327c <error@@Base+0xa64>
   132b0:	mov	r0, #1
   132b4:	b	132c4 <error@@Base+0xaac>
   132b8:	mov	r0, #1
   132bc:	b	132c4 <error@@Base+0xaac>
   132c0:	mov	r0, #0
   132c4:	add	sp, sp, #8
   132c8:	ldrd	r4, [sp]
   132cc:	ldrd	r6, [sp, #8]
   132d0:	ldr	r8, [sp, #16]
   132d4:	add	sp, sp, #20
   132d8:	pop	{pc}		; (ldr pc, [sp], #4)
   132dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   132e0:	mov	r7, r0
   132e4:	ldr	r6, [pc, #72]	; 13334 <error@@Base+0xb1c>
   132e8:	ldr	r5, [pc, #72]	; 13338 <error@@Base+0xb20>
   132ec:	add	r6, pc, r6
   132f0:	add	r5, pc, r5
   132f4:	sub	r6, r6, r5
   132f8:	mov	r8, r1
   132fc:	mov	r9, r2
   13300:	bl	109ec <calloc@plt-0x20>
   13304:	asrs	r6, r6, #2
   13308:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1330c:	mov	r4, #0
   13310:	add	r4, r4, #1
   13314:	ldr	r3, [r5], #4
   13318:	mov	r2, r9
   1331c:	mov	r1, r8
   13320:	mov	r0, r7
   13324:	blx	r3
   13328:	cmp	r6, r4
   1332c:	bne	13310 <error@@Base+0xaf8>
   13330:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13334:	andeq	r3, r1, r0, lsl fp
   13338:	andeq	r3, r1, r8, lsl #22
   1333c:	bx	lr

Disassembly of section .fini:

00013340 <.fini>:
   13340:	push	{r3, lr}
   13344:	pop	{r3, pc}
