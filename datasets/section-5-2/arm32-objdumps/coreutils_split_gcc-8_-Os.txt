
../repos/coreutils/src/split:     file format elf32-littlearm


Disassembly of section .init:

00011140 <.init>:
   11140:	push	{r3, lr}
   11144:	bl	13224 <__assert_fail@plt+0x1d10>
   11148:	pop	{r3, pc}

Disassembly of section .plt:

0001114c <fdopen@plt-0x14>:
   1114c:	push	{lr}		; (str lr, [sp, #-4]!)
   11150:	ldr	lr, [pc, #4]	; 1115c <fdopen@plt-0x4>
   11154:	add	lr, pc, lr
   11158:	ldr	pc, [lr, #8]!
   1115c:	andeq	r7, r1, r4, lsr #29

00011160 <fdopen@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #94208	; 0x17000
   11168:	ldr	pc, [ip, #3748]!	; 0xea4

0001116c <calloc@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #94208	; 0x17000
   11174:	ldr	pc, [ip, #3740]!	; 0xe9c

00011178 <fputs_unlocked@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #94208	; 0x17000
   11180:	ldr	pc, [ip, #3732]!	; 0xe94

00011184 <raise@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #94208	; 0x17000
   1118c:	ldr	pc, [ip, #3724]!	; 0xe8c

00011190 <strcmp@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #94208	; 0x17000
   11198:	ldr	pc, [ip, #3716]!	; 0xe84

0001119c <strtol@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #94208	; 0x17000
   111a4:	ldr	pc, [ip, #3708]!	; 0xe7c

000111a8 <read@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #94208	; 0x17000
   111b0:	ldr	pc, [ip, #3700]!	; 0xe74

000111b4 <fflush@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #94208	; 0x17000
   111bc:	ldr	pc, [ip, #3692]!	; 0xe6c

000111c0 <sigprocmask@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #94208	; 0x17000
   111c8:	ldr	pc, [ip, #3684]!	; 0xe64

000111cc <memmove@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #94208	; 0x17000
   111d4:	ldr	pc, [ip, #3676]!	; 0xe5c

000111d8 <free@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #94208	; 0x17000
   111e0:	ldr	pc, [ip, #3668]!	; 0xe54

000111e4 <_exit@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #94208	; 0x17000
   111ec:	ldr	pc, [ip, #3660]!	; 0xe4c

000111f0 <memcpy@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #94208	; 0x17000
   111f8:	ldr	pc, [ip, #3652]!	; 0xe44

000111fc <mbsinit@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #94208	; 0x17000
   11204:	ldr	pc, [ip, #3644]!	; 0xe3c

00011208 <ftruncate64@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #94208	; 0x17000
   11210:	ldr	pc, [ip, #3636]!	; 0xe34

00011214 <fwrite_unlocked@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #94208	; 0x17000
   1121c:	ldr	pc, [ip, #3628]!	; 0xe2c

00011220 <memcmp@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #94208	; 0x17000
   11228:	ldr	pc, [ip, #3620]!	; 0xe24

0001122c <fputc_unlocked@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #94208	; 0x17000
   11234:	ldr	pc, [ip, #3612]!	; 0xe1c

00011238 <dcgettext@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #94208	; 0x17000
   11240:	ldr	pc, [ip, #3604]!	; 0xe14

00011244 <dup2@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #94208	; 0x17000
   1124c:	ldr	pc, [ip, #3596]!	; 0xe0c

00011250 <realloc@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #94208	; 0x17000
   11258:	ldr	pc, [ip, #3588]!	; 0xe04

0001125c <textdomain@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #94208	; 0x17000
   11264:	ldr	pc, [ip, #3580]!	; 0xdfc

00011268 <rawmemchr@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #94208	; 0x17000
   11270:	ldr	pc, [ip, #3572]!	; 0xdf4

00011274 <iswprint@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #94208	; 0x17000
   1127c:	ldr	pc, [ip, #3564]!	; 0xdec

00011280 <__fxstat64@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #94208	; 0x17000
   11288:	ldr	pc, [ip, #3556]!	; 0xde4

0001128c <sigaction@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #94208	; 0x17000
   11294:	ldr	pc, [ip, #3548]!	; 0xddc

00011298 <lseek64@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #94208	; 0x17000
   112a0:	ldr	pc, [ip, #3540]!	; 0xdd4

000112a4 <waitpid@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #94208	; 0x17000
   112ac:	ldr	pc, [ip, #3532]!	; 0xdcc

000112b0 <__ctype_get_mb_cur_max@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #94208	; 0x17000
   112b8:	ldr	pc, [ip, #3524]!	; 0xdc4

000112bc <strcpy@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #94208	; 0x17000
   112c4:	ldr	pc, [ip, #3516]!	; 0xdbc

000112c8 <__fpending@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #94208	; 0x17000
   112d0:	ldr	pc, [ip, #3508]!	; 0xdb4

000112d4 <ferror_unlocked@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #94208	; 0x17000
   112dc:	ldr	pc, [ip, #3500]!	; 0xdac

000112e0 <mbrtowc@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #94208	; 0x17000
   112e8:	ldr	pc, [ip, #3492]!	; 0xda4

000112ec <error@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #94208	; 0x17000
   112f4:	ldr	pc, [ip, #3484]!	; 0xd9c

000112f8 <open64@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #94208	; 0x17000
   11300:	ldr	pc, [ip, #3476]!	; 0xd94

00011304 <getenv@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #94208	; 0x17000
   1130c:	ldr	pc, [ip, #3468]!	; 0xd8c

00011310 <malloc@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #94208	; 0x17000
   11318:	ldr	pc, [ip, #3460]!	; 0xd84

0001131c <sigaddset@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #94208	; 0x17000
   11324:	ldr	pc, [ip, #3452]!	; 0xd7c

00011328 <__libc_start_main@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #94208	; 0x17000
   11330:	ldr	pc, [ip, #3444]!	; 0xd74

00011334 <__freading@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #94208	; 0x17000
   1133c:	ldr	pc, [ip, #3436]!	; 0xd6c

00011340 <__gmon_start__@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #94208	; 0x17000
   11348:	ldr	pc, [ip, #3428]!	; 0xd64

0001134c <getopt_long@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #94208	; 0x17000
   11354:	ldr	pc, [ip, #3420]!	; 0xd5c

00011358 <__ctype_b_loc@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #94208	; 0x17000
   11360:	ldr	pc, [ip, #3412]!	; 0xd54

00011364 <exit@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #94208	; 0x17000
   1136c:	ldr	pc, [ip, #3404]!	; 0xd4c

00011370 <strlen@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #94208	; 0x17000
   11378:	ldr	pc, [ip, #3396]!	; 0xd44

0001137c <__libc_current_sigrtmax@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #94208	; 0x17000
   11384:	ldr	pc, [ip, #3388]!	; 0xd3c

00011388 <strchr@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #94208	; 0x17000
   11390:	ldr	pc, [ip, #3380]!	; 0xd34

00011394 <setenv@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #94208	; 0x17000
   1139c:	ldr	pc, [ip, #3372]!	; 0xd2c

000113a0 <memrchr@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #94208	; 0x17000
   113a8:	ldr	pc, [ip, #3364]!	; 0xd24

000113ac <getpagesize@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #94208	; 0x17000
   113b4:	ldr	pc, [ip, #3356]!	; 0xd1c

000113b8 <__errno_location@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #94208	; 0x17000
   113c0:	ldr	pc, [ip, #3348]!	; 0xd14

000113c4 <__sprintf_chk@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #94208	; 0x17000
   113cc:	ldr	pc, [ip, #3340]!	; 0xd0c

000113d0 <__cxa_atexit@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #94208	; 0x17000
   113d8:	ldr	pc, [ip, #3332]!	; 0xd04

000113dc <memset@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #94208	; 0x17000
   113e4:	ldr	pc, [ip, #3324]!	; 0xcfc

000113e8 <__printf_chk@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #94208	; 0x17000
   113f0:	ldr	pc, [ip, #3316]!	; 0xcf4

000113f4 <write@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #94208	; 0x17000
   113fc:	ldr	pc, [ip, #3308]!	; 0xcec

00011400 <fileno@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #94208	; 0x17000
   11408:	ldr	pc, [ip, #3300]!	; 0xce4

0001140c <strtoumax@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #94208	; 0x17000
   11414:	ldr	pc, [ip, #3292]!	; 0xcdc

00011418 <__fprintf_chk@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #94208	; 0x17000
   11420:	ldr	pc, [ip, #3284]!	; 0xcd4

00011424 <memchr@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #94208	; 0x17000
   1142c:	ldr	pc, [ip, #3276]!	; 0xccc

00011430 <fclose@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #94208	; 0x17000
   11438:	ldr	pc, [ip, #3268]!	; 0xcc4

0001143c <pipe@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #94208	; 0x17000
   11444:	ldr	pc, [ip, #3260]!	; 0xcbc

00011448 <fseeko64@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #94208	; 0x17000
   11450:	ldr	pc, [ip, #3252]!	; 0xcb4

00011454 <fcntl64@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #94208	; 0x17000
   1145c:	ldr	pc, [ip, #3244]!	; 0xcac

00011460 <setlocale@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #94208	; 0x17000
   11468:	ldr	pc, [ip, #3236]!	; 0xca4

0001146c <sigemptyset@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #94208	; 0x17000
   11474:	ldr	pc, [ip, #3228]!	; 0xc9c

00011478 <fork@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #94208	; 0x17000
   11480:	ldr	pc, [ip, #3220]!	; 0xc94

00011484 <execl@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #94208	; 0x17000
   1148c:	ldr	pc, [ip, #3212]!	; 0xc8c

00011490 <strrchr@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #94208	; 0x17000
   11498:	ldr	pc, [ip, #3204]!	; 0xc84

0001149c <nl_langinfo@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #94208	; 0x17000
   114a4:	ldr	pc, [ip, #3196]!	; 0xc7c

000114a8 <clearerr_unlocked@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #94208	; 0x17000
   114b0:	ldr	pc, [ip, #3188]!	; 0xc74

000114b4 <bindtextdomain@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #94208	; 0x17000
   114bc:	ldr	pc, [ip, #3180]!	; 0xc6c

000114c0 <aligned_alloc@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #94208	; 0x17000
   114c8:	ldr	pc, [ip, #3172]!	; 0xc64

000114cc <__libc_current_sigrtmin@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #94208	; 0x17000
   114d4:	ldr	pc, [ip, #3164]!	; 0xc5c

000114d8 <fputs@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #94208	; 0x17000
   114e0:	ldr	pc, [ip, #3156]!	; 0xc54

000114e4 <strncmp@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #94208	; 0x17000
   114ec:	ldr	pc, [ip, #3148]!	; 0xc4c

000114f0 <abort@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #94208	; 0x17000
   114f8:	ldr	pc, [ip, #3140]!	; 0xc44

000114fc <close@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #94208	; 0x17000
   11504:	ldr	pc, [ip, #3132]!	; 0xc3c

00011508 <strspn@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #94208	; 0x17000
   11510:	ldr	pc, [ip, #3124]!	; 0xc34

00011514 <__assert_fail@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #94208	; 0x17000
   1151c:	ldr	pc, [ip, #3116]!	; 0xc2c

Disassembly of section .text:

00011520 <.text>:
   11520:	push	{r4, lr}
   11524:	bl	113b8 <__errno_location@plt>
   11528:	mov	r3, #12
   1152c:	str	r3, [r0]
   11530:	mov	r0, #0
   11534:	pop	{r4, pc}
   11538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1153c:	sub	sp, sp, #268	; 0x10c
   11540:	mov	fp, r1
   11544:	mov	r8, #0
   11548:	mov	sl, r8
   1154c:	str	r0, [sp, #112]	; 0x70
   11550:	ldr	r0, [r1]
   11554:	bl	1481c <__assert_fail@plt+0x3308>
   11558:	ldr	r1, [pc, #2296]	; 11e58 <__assert_fail@plt+0x944>
   1155c:	mov	r0, #6
   11560:	bl	11460 <setlocale@plt>
   11564:	ldr	r1, [pc, #2288]	; 11e5c <__assert_fail@plt+0x948>
   11568:	ldr	r0, [pc, #2288]	; 11e60 <__assert_fail@plt+0x94c>
   1156c:	bl	114b4 <bindtextdomain@plt>
   11570:	ldr	r0, [pc, #2280]	; 11e60 <__assert_fail@plt+0x94c>
   11574:	bl	1125c <textdomain@plt>
   11578:	ldr	r0, [pc, #2276]	; 11e64 <__assert_fail@plt+0x950>
   1157c:	bl	1754c <__assert_fail@plt+0x6038>
   11580:	ldr	r3, [pc, #2464]	; 11f28 <__assert_fail@plt+0xa14>
   11584:	str	r8, [sp, #44]	; 0x2c
   11588:	ldr	r2, [pc, #2440]	; 11f18 <__assert_fail@plt+0xa04>
   1158c:	ldr	r5, [pc, #2260]	; 11e68 <__assert_fail@plt+0x954>
   11590:	str	r2, [r3, #300]	; 0x12c
   11594:	ldr	r2, [pc, #2256]	; 11e6c <__assert_fail@plt+0x958>
   11598:	str	r2, [r3, #16]
   1159c:	mov	r2, #0
   115a0:	mov	r3, #0
   115a4:	strd	r2, [sp, #24]
   115a8:	strd	r2, [sp, #32]
   115ac:	ldr	r3, [pc, #2356]	; 11ee8 <__assert_fail@plt+0x9d4>
   115b0:	mov	r7, #0
   115b4:	mov	r1, fp
   115b8:	ldr	r2, [pc, #2224]	; 11e70 <__assert_fail@plt+0x95c>
   115bc:	ldr	r0, [sp, #112]	; 0x70
   115c0:	ldr	r6, [r3]
   115c4:	str	r7, [sp]
   115c8:	ldr	r3, [pc, #2212]	; 11e74 <__assert_fail@plt+0x960>
   115cc:	cmp	r6, #0
   115d0:	moveq	r6, #1
   115d4:	bl	1134c <getopt_long@plt>
   115d8:	cmn	r0, #1
   115dc:	mov	r4, r0
   115e0:	beq	11c64 <__assert_fail@plt+0x750>
   115e4:	cmp	r0, #101	; 0x65
   115e8:	beq	11bc8 <__assert_fail@plt+0x6b4>
   115ec:	bgt	116a8 <__assert_fail@plt+0x194>
   115f0:	cmp	r0, #57	; 0x39
   115f4:	bgt	11628 <__assert_fail@plt+0x114>
   115f8:	cmp	r0, #48	; 0x30
   115fc:	bge	11a98 <__assert_fail@plt+0x584>
   11600:	cmn	r0, #3
   11604:	beq	11c30 <__assert_fail@plt+0x71c>
   11608:	cmn	r0, #2
   1160c:	moveq	r0, r7
   11610:	beq	11618 <__assert_fail@plt+0x104>
   11614:	mov	r0, #1
   11618:	bl	14090 <__assert_fail@plt+0x2b7c>
   1161c:	mov	r8, r6
   11620:	mov	sl, #4
   11624:	b	115ac <__assert_fail@plt+0x98>
   11628:	cmp	r0, #97	; 0x61
   1162c:	beq	117c4 <__assert_fail@plt+0x2b0>
   11630:	bgt	11690 <__assert_fail@plt+0x17c>
   11634:	cmp	r0, #67	; 0x43
   11638:	bne	11614 <__assert_fail@plt+0x100>
   1163c:	cmp	sl, #0
   11640:	bne	11824 <__assert_fail@plt+0x310>
   11644:	mov	r2, #5
   11648:	ldr	r1, [pc, #2088]	; 11e78 <__assert_fail@plt+0x964>
   1164c:	mov	r0, sl
   11650:	ldr	r4, [r5]
   11654:	bl	11238 <dcgettext@plt>
   11658:	ldr	r3, [pc, #2076]	; 11e7c <__assert_fail@plt+0x968>
   1165c:	mvn	r2, #0
   11660:	str	r3, [sp, #8]
   11664:	mov	r3, #0
   11668:	str	r0, [sp, #12]
   1166c:	mov	r0, r4
   11670:	strd	r2, [sp]
   11674:	mov	r2, #1
   11678:	mov	r3, #0
   1167c:	str	sl, [sp, #16]
   11680:	mov	sl, #2
   11684:	bl	16a9c <__assert_fail@plt+0x5588>
   11688:	strd	r0, [sp, #24]
   1168c:	b	115ac <__assert_fail@plt+0x98>
   11690:	cmp	r0, #98	; 0x62
   11694:	beq	1181c <__assert_fail@plt+0x308>
   11698:	cmp	r0, #100	; 0x64
   1169c:	bne	11614 <__assert_fail@plt+0x100>
   116a0:	ldr	r9, [pc, #2008]	; 11e80 <__assert_fail@plt+0x96c>
   116a4:	b	11b50 <__assert_fail@plt+0x63c>
   116a8:	cmp	r0, #120	; 0x78
   116ac:	beq	11b4c <__assert_fail@plt+0x638>
   116b0:	bgt	1173c <__assert_fail@plt+0x228>
   116b4:	cmp	r0, #110	; 0x6e
   116b8:	beq	11894 <__assert_fail@plt+0x380>
   116bc:	bgt	1171c <__assert_fail@plt+0x208>
   116c0:	cmp	r0, #108	; 0x6c
   116c4:	bne	11614 <__assert_fail@plt+0x100>
   116c8:	cmp	sl, #0
   116cc:	bne	11824 <__assert_fail@plt+0x310>
   116d0:	mov	r2, #5
   116d4:	ldr	r1, [pc, #1960]	; 11e84 <__assert_fail@plt+0x970>
   116d8:	mov	r0, sl
   116dc:	ldr	r4, [r5]
   116e0:	bl	11238 <dcgettext@plt>
   116e4:	ldr	r3, [pc, #1900]	; 11e58 <__assert_fail@plt+0x944>
   116e8:	mvn	r2, #0
   116ec:	str	r3, [sp, #8]
   116f0:	mvn	r3, #0
   116f4:	str	r0, [sp, #12]
   116f8:	mov	r0, r4
   116fc:	strd	r2, [sp]
   11700:	mov	r2, #1
   11704:	mov	r3, #0
   11708:	str	sl, [sp, #16]
   1170c:	mov	sl, #3
   11710:	bl	16a9c <__assert_fail@plt+0x5588>
   11714:	strd	r0, [sp, #24]
   11718:	b	115ac <__assert_fail@plt+0x98>
   1171c:	cmp	r0, #116	; 0x74
   11720:	beq	119f4 <__assert_fail@plt+0x4e0>
   11724:	cmp	r0, #117	; 0x75
   11728:	bne	11614 <__assert_fail@plt+0x100>
   1172c:	ldr	r3, [pc, #2036]	; 11f28 <__assert_fail@plt+0xa14>
   11730:	mov	r2, #1
   11734:	strb	r2, [r3, #304]	; 0x130
   11738:	b	115ac <__assert_fail@plt+0x98>
   1173c:	movw	r3, #257	; 0x101
   11740:	cmp	r0, r3
   11744:	beq	11bd8 <__assert_fail@plt+0x6c4>
   11748:	bgt	11764 <__assert_fail@plt+0x250>
   1174c:	cmp	r0, #256	; 0x100
   11750:	bne	11614 <__assert_fail@plt+0x100>
   11754:	ldr	r3, [pc, #1996]	; 11f28 <__assert_fail@plt+0xa14>
   11758:	mov	r2, #1
   1175c:	strb	r2, [r3, #44]	; 0x2c
   11760:	b	115ac <__assert_fail@plt+0x98>
   11764:	movw	r3, #258	; 0x102
   11768:	cmp	r0, r3
   1176c:	beq	11be8 <__assert_fail@plt+0x6d4>
   11770:	movw	r3, #259	; 0x103
   11774:	cmp	r0, r3
   11778:	bne	11614 <__assert_fail@plt+0x100>
   1177c:	ldr	r4, [r5]
   11780:	mov	r0, r4
   11784:	bl	14368 <__assert_fail@plt+0x2e54>
   11788:	cmp	r4, r0
   1178c:	beq	11810 <__assert_fail@plt+0x2fc>
   11790:	ldr	r1, [pc, #1776]	; 11e88 <__assert_fail@plt+0x974>
   11794:	mov	r2, #5
   11798:	mov	r0, #0
   1179c:	bl	11238 <dcgettext@plt>
   117a0:	mov	r4, r0
   117a4:	ldr	r0, [r5]
   117a8:	bl	15e1c <__assert_fail@plt+0x4908>
   117ac:	mov	r3, r0
   117b0:	mov	r2, r4
   117b4:	mov	r1, #0
   117b8:	mov	r0, r1
   117bc:	bl	112ec <error@plt>
   117c0:	b	11614 <__assert_fail@plt+0x100>
   117c4:	mov	r2, #5
   117c8:	ldr	r1, [pc, #1724]	; 11e8c <__assert_fail@plt+0x978>
   117cc:	mov	r0, r7
   117d0:	ldr	r4, [r5]
   117d4:	bl	11238 <dcgettext@plt>
   117d8:	ldr	r3, [pc, #1656]	; 11e58 <__assert_fail@plt+0x944>
   117dc:	mvn	r2, #-1073741824	; 0xc0000000
   117e0:	str	r3, [sp, #8]
   117e4:	mov	r3, #0
   117e8:	str	r0, [sp, #12]
   117ec:	mov	r0, r4
   117f0:	strd	r2, [sp]
   117f4:	mov	r3, #0
   117f8:	mov	r2, #0
   117fc:	str	r7, [sp, #16]
   11800:	bl	16a9c <__assert_fail@plt+0x5588>
   11804:	ldr	r3, [pc, #1820]	; 11f28 <__assert_fail@plt+0xa14>
   11808:	str	r0, [r3, #4]
   1180c:	b	115ac <__assert_fail@plt+0x98>
   11810:	ldr	r3, [pc, #1808]	; 11f28 <__assert_fail@plt+0xa14>
   11814:	str	r4, [r3, #24]
   11818:	b	115ac <__assert_fail@plt+0x98>
   1181c:	cmp	sl, #0
   11820:	beq	11848 <__assert_fail@plt+0x334>
   11824:	ldr	r1, [pc, #1636]	; 11e90 <__assert_fail@plt+0x97c>
   11828:	mov	r2, #5
   1182c:	mov	r0, #0
   11830:	bl	11238 <dcgettext@plt>
   11834:	mov	r1, #0
   11838:	mov	r2, r0
   1183c:	mov	r0, r1
   11840:	bl	112ec <error@plt>
   11844:	b	11614 <__assert_fail@plt+0x100>
   11848:	mov	r2, #5
   1184c:	ldr	r1, [pc, #1572]	; 11e78 <__assert_fail@plt+0x964>
   11850:	mov	r0, sl
   11854:	ldr	r4, [r5]
   11858:	bl	11238 <dcgettext@plt>
   1185c:	ldr	r3, [pc, #1560]	; 11e7c <__assert_fail@plt+0x968>
   11860:	mvn	r2, #0
   11864:	str	r3, [sp, #8]
   11868:	mvn	r3, #-2147483648	; 0x80000000
   1186c:	str	r0, [sp, #12]
   11870:	mov	r0, r4
   11874:	strd	r2, [sp]
   11878:	mov	r2, #1
   1187c:	mov	r3, #0
   11880:	str	sl, [sp, #16]
   11884:	mov	sl, #1
   11888:	bl	16a9c <__assert_fail@plt+0x5588>
   1188c:	strd	r0, [sp, #24]
   11890:	b	115ac <__assert_fail@plt+0x98>
   11894:	cmp	sl, #0
   11898:	bne	11824 <__assert_fail@plt+0x310>
   1189c:	bl	11358 <__ctype_b_loc@plt>
   118a0:	ldr	r2, [r0]
   118a4:	ldr	r4, [r5]
   118a8:	ldrb	r3, [r4]
   118ac:	lsl	r3, r3, #1
   118b0:	ldrh	r3, [r2, r3]
   118b4:	tst	r3, #8192	; 0x2000
   118b8:	bne	119b0 <__assert_fail@plt+0x49c>
   118bc:	mov	r0, r4
   118c0:	mov	r2, #2
   118c4:	ldr	r1, [pc, #1480]	; 11e94 <__assert_fail@plt+0x980>
   118c8:	bl	114e4 <strncmp@plt>
   118cc:	cmp	r0, #0
   118d0:	addeq	r4, r4, #2
   118d4:	moveq	sl, #7
   118d8:	streq	r4, [r5]
   118dc:	beq	11904 <__assert_fail@plt+0x3f0>
   118e0:	mov	r0, r4
   118e4:	mov	r2, #2
   118e8:	ldr	r1, [pc, #1448]	; 11e98 <__assert_fail@plt+0x984>
   118ec:	bl	114e4 <strncmp@plt>
   118f0:	cmp	r0, #0
   118f4:	addeq	r4, r4, #2
   118f8:	moveq	sl, #6
   118fc:	movne	sl, #5
   11900:	streq	r4, [r5]
   11904:	ldr	r6, [r5]
   11908:	mov	r1, #47	; 0x2f
   1190c:	mov	r0, r6
   11910:	bl	11388 <strchr@plt>
   11914:	subs	r4, r0, #0
   11918:	mov	r2, #5
   1191c:	ldr	r1, [pc, #1504]	; 11f04 <__assert_fail@plt+0x9f0>
   11920:	beq	119bc <__assert_fail@plt+0x4a8>
   11924:	ldr	r7, [pc, #1324]	; 11e58 <__assert_fail@plt+0x944>
   11928:	mov	r0, #0
   1192c:	mov	r6, #0
   11930:	bl	11238 <dcgettext@plt>
   11934:	mvn	r2, #0
   11938:	mvn	r3, #0
   1193c:	strd	r2, [sp]
   11940:	mov	r3, #0
   11944:	mov	r2, #1
   11948:	str	r7, [sp, #8]
   1194c:	str	r0, [sp, #12]
   11950:	add	r0, r4, #1
   11954:	str	r6, [sp, #16]
   11958:	bl	16a9c <__assert_fail@plt+0x5588>
   1195c:	ldr	r3, [r5]
   11960:	strd	r0, [sp, #24]
   11964:	cmp	r4, r3
   11968:	beq	115ac <__assert_fail@plt+0x98>
   1196c:	mov	r2, #5
   11970:	ldr	r1, [pc, #1316]	; 11e9c <__assert_fail@plt+0x988>
   11974:	mov	r0, r6
   11978:	strb	r6, [r4]
   1197c:	ldr	r4, [r5]
   11980:	bl	11238 <dcgettext@plt>
   11984:	ldrd	r2, [sp, #24]
   11988:	strd	r2, [sp]
   1198c:	mov	r2, #1
   11990:	mov	r3, #0
   11994:	str	r7, [sp, #8]
   11998:	str	r0, [sp, #12]
   1199c:	mov	r0, r4
   119a0:	str	r6, [sp, #16]
   119a4:	bl	16a9c <__assert_fail@plt+0x5588>
   119a8:	strd	r0, [sp, #32]
   119ac:	b	115ac <__assert_fail@plt+0x98>
   119b0:	add	r4, r4, #1
   119b4:	str	r4, [r5]
   119b8:	b	118a4 <__assert_fail@plt+0x390>
   119bc:	bl	11238 <dcgettext@plt>
   119c0:	ldr	r3, [pc, #1168]	; 11e58 <__assert_fail@plt+0x944>
   119c4:	mvn	r2, #0
   119c8:	str	r3, [sp, #8]
   119cc:	mvn	r3, #0
   119d0:	str	r0, [sp, #12]
   119d4:	mov	r0, r6
   119d8:	strd	r2, [sp]
   119dc:	mov	r2, #1
   119e0:	mov	r3, #0
   119e4:	str	r4, [sp, #16]
   119e8:	bl	16a9c <__assert_fail@plt+0x5588>
   119ec:	strd	r0, [sp, #24]
   119f0:	b	115ac <__assert_fail@plt+0x98>
   119f4:	ldr	r0, [r5]
   119f8:	ldrb	r4, [r0]
   119fc:	cmp	r4, #0
   11a00:	bne	11a24 <__assert_fail@plt+0x510>
   11a04:	ldr	r1, [pc, #1172]	; 11ea0 <__assert_fail@plt+0x98c>
   11a08:	mov	r2, #5
   11a0c:	mov	r0, #0
   11a10:	bl	11238 <dcgettext@plt>
   11a14:	mov	r2, r0
   11a18:	mov	r1, #0
   11a1c:	mov	r0, #1
   11a20:	bl	112ec <error@plt>
   11a24:	ldrb	r3, [r0, #1]
   11a28:	cmp	r3, #0
   11a2c:	beq	11a70 <__assert_fail@plt+0x55c>
   11a30:	ldr	r1, [pc, #1132]	; 11ea4 <__assert_fail@plt+0x990>
   11a34:	bl	11190 <strcmp@plt>
   11a38:	subs	r4, r0, #0
   11a3c:	beq	11a70 <__assert_fail@plt+0x55c>
   11a40:	mov	r2, #5
   11a44:	ldr	r1, [pc, #1116]	; 11ea8 <__assert_fail@plt+0x994>
   11a48:	mov	r0, #0
   11a4c:	bl	11238 <dcgettext@plt>
   11a50:	mov	r4, r0
   11a54:	ldr	r0, [r5]
   11a58:	bl	15e1c <__assert_fail@plt+0x4908>
   11a5c:	mov	r3, r0
   11a60:	mov	r2, r4
   11a64:	mov	r1, #0
   11a68:	mov	r0, #1
   11a6c:	bl	112ec <error@plt>
   11a70:	ldr	r3, [pc, #1212]	; 11f34 <__assert_fail@plt+0xa20>
   11a74:	ldr	r2, [r3, #12]
   11a78:	cmp	r2, #0
   11a7c:	blt	11a90 <__assert_fail@plt+0x57c>
   11a80:	cmp	r2, r4
   11a84:	movne	r2, #5
   11a88:	ldrne	r1, [pc, #1052]	; 11eac <__assert_fail@plt+0x998>
   11a8c:	bne	11a0c <__assert_fail@plt+0x4f8>
   11a90:	str	r4, [r3, #12]
   11a94:	b	115ac <__assert_fail@plt+0x98>
   11a98:	cmp	sl, #0
   11a9c:	beq	11b30 <__assert_fail@plt+0x61c>
   11aa0:	cmp	sl, #4
   11aa4:	bne	11824 <__assert_fail@plt+0x310>
   11aa8:	cmp	r8, #0
   11aac:	cmpne	r8, r6
   11ab0:	bne	11b40 <__assert_fail@plt+0x62c>
   11ab4:	add	r1, pc, #916	; 0x394
   11ab8:	ldrd	r0, [r1]
   11abc:	ldrd	r2, [sp, #24]
   11ac0:	cmp	r3, r1
   11ac4:	cmpeq	r2, r0
   11ac8:	bhi	11af8 <__assert_fail@plt+0x5e4>
   11acc:	mov	ip, #10
   11ad0:	umull	r0, r1, r2, ip
   11ad4:	mla	r1, ip, r3, r1
   11ad8:	sub	ip, r4, #48	; 0x30
   11adc:	adds	r8, r0, ip
   11ae0:	adc	r9, r1, ip, asr #31
   11ae4:	cmp	r9, r3
   11ae8:	cmpeq	r8, r2
   11aec:	strd	r8, [sp, #24]
   11af0:	bcs	1161c <__assert_fail@plt+0x108>
   11af4:	strd	r2, [sp, #24]
   11af8:	mov	r2, #5
   11afc:	ldr	r1, [pc, #940]	; 11eb0 <__assert_fail@plt+0x99c>
   11b00:	mov	r0, #0
   11b04:	bl	11238 <dcgettext@plt>
   11b08:	mov	r5, r0
   11b0c:	add	r2, sp, #120	; 0x78
   11b10:	ldrd	r0, [sp, #24]
   11b14:	bl	147b4 <__assert_fail@plt+0x32a0>
   11b18:	mov	r3, r0
   11b1c:	mov	r2, r5
   11b20:	str	r4, [sp]
   11b24:	mov	r1, #0
   11b28:	mov	r0, #1
   11b2c:	bl	112ec <error@plt>
   11b30:	mov	r2, #0
   11b34:	mov	r3, #0
   11b38:	strd	r2, [sp, #24]
   11b3c:	b	11aa8 <__assert_fail@plt+0x594>
   11b40:	mov	r2, #0
   11b44:	mov	r3, #0
   11b48:	b	11acc <__assert_fail@plt+0x5b8>
   11b4c:	ldr	r9, [pc, #864]	; 11eb4 <__assert_fail@plt+0x9a0>
   11b50:	ldr	r6, [r5]
   11b54:	ldr	r3, [pc, #984]	; 11f34 <__assert_fail@plt+0xa20>
   11b58:	cmp	r6, #0
   11b5c:	str	r9, [r3]
   11b60:	beq	115ac <__assert_fail@plt+0x98>
   11b64:	mov	r0, r6
   11b68:	bl	11370 <strlen@plt>
   11b6c:	mov	r7, r0
   11b70:	mov	r1, r9
   11b74:	mov	r0, r6
   11b78:	bl	11508 <strspn@plt>
   11b7c:	cmp	r7, r0
   11b80:	beq	11ba0 <__assert_fail@plt+0x68c>
   11b84:	cmp	r4, #100	; 0x64
   11b88:	mov	r2, #5
   11b8c:	ldreq	r1, [pc, #804]	; 11eb8 <__assert_fail@plt+0x9a4>
   11b90:	ldrne	r1, [pc, #804]	; 11ebc <__assert_fail@plt+0x9a8>
   11b94:	b	11798 <__assert_fail@plt+0x284>
   11b98:	add	r3, r3, #1
   11b9c:	str	r3, [r5]
   11ba0:	ldr	r3, [r5]
   11ba4:	ldrb	r2, [r3]
   11ba8:	cmp	r2, #48	; 0x30
   11bac:	bne	11bbc <__assert_fail@plt+0x6a8>
   11bb0:	ldrb	r2, [r3, #1]
   11bb4:	cmp	r2, #0
   11bb8:	bne	11b98 <__assert_fail@plt+0x684>
   11bbc:	ldr	r2, [pc, #868]	; 11f28 <__assert_fail@plt+0xa14>
   11bc0:	str	r3, [r2, #40]	; 0x28
   11bc4:	b	115ac <__assert_fail@plt+0x98>
   11bc8:	ldr	r3, [pc, #856]	; 11f28 <__assert_fail@plt+0xa14>
   11bcc:	mov	r2, #1
   11bd0:	strb	r2, [r3, #296]	; 0x128
   11bd4:	b	115ac <__assert_fail@plt+0x98>
   11bd8:	ldr	r3, [pc, #840]	; 11f28 <__assert_fail@plt+0xa14>
   11bdc:	ldr	r2, [r5]
   11be0:	str	r2, [r3]
   11be4:	b	115ac <__assert_fail@plt+0x98>
   11be8:	mov	r2, #5
   11bec:	ldr	r1, [pc, #716]	; 11ec0 <__assert_fail@plt+0x9ac>
   11bf0:	mov	r0, r7
   11bf4:	ldr	r4, [r5]
   11bf8:	bl	11238 <dcgettext@plt>
   11bfc:	ldr	r3, [pc, #632]	; 11e7c <__assert_fail@plt+0x968>
   11c00:	mvn	r2, #-2147483647	; 0x80000001
   11c04:	str	r3, [sp, #8]
   11c08:	mov	r3, #0
   11c0c:	str	r0, [sp, #12]
   11c10:	mov	r0, r4
   11c14:	strd	r2, [sp]
   11c18:	mov	r2, #1
   11c1c:	mov	r3, #0
   11c20:	str	r7, [sp, #16]
   11c24:	bl	16a9c <__assert_fail@plt+0x5588>
   11c28:	str	r0, [sp, #44]	; 0x2c
   11c2c:	b	115ac <__assert_fail@plt+0x98>
   11c30:	ldr	r3, [pc, #652]	; 11ec4 <__assert_fail@plt+0x9b0>
   11c34:	ldr	r0, [pc, #652]	; 11ec8 <__assert_fail@plt+0x9b4>
   11c38:	ldr	r2, [pc, #652]	; 11ecc <__assert_fail@plt+0x9b8>
   11c3c:	stmib	sp, {r3, r7}
   11c40:	ldr	r3, [pc, #648]	; 11ed0 <__assert_fail@plt+0x9bc>
   11c44:	ldr	r1, [pc, #648]	; 11ed4 <__assert_fail@plt+0x9c0>
   11c48:	str	r3, [sp]
   11c4c:	ldr	r3, [pc, #644]	; 11ed8 <__assert_fail@plt+0x9c4>
   11c50:	ldr	r0, [r0]
   11c54:	ldr	r3, [r3]
   11c58:	bl	165d4 <__assert_fail@plt+0x50c0>
   11c5c:	mov	r0, r7
   11c60:	bl	11364 <exit@plt>
   11c64:	ldrd	r2, [sp, #32]
   11c68:	orrs	r3, r2, r3
   11c6c:	ldr	r2, [pc, #692]	; 11f28 <__assert_fail@plt+0xa14>
   11c70:	beq	11c88 <__assert_fail@plt+0x774>
   11c74:	ldr	r3, [r2]
   11c78:	cmp	r3, #0
   11c7c:	movne	r2, #5
   11c80:	ldrne	r1, [pc, #596]	; 11edc <__assert_fail@plt+0x9c8>
   11c84:	bne	1182c <__assert_fail@plt+0x318>
   11c88:	cmp	sl, #0
   11c8c:	beq	11cd4 <__assert_fail@plt+0x7c0>
   11c90:	ldrd	r0, [sp, #24]
   11c94:	orrs	r3, r0, r1
   11c98:	bne	11ce4 <__assert_fail@plt+0x7d0>
   11c9c:	mov	r2, #5
   11ca0:	ldr	r1, [pc, #476]	; 11e84 <__assert_fail@plt+0x970>
   11ca4:	mov	r0, #0
   11ca8:	bl	11238 <dcgettext@plt>
   11cac:	mov	r4, r0
   11cb0:	ldr	r0, [pc, #552]	; 11ee0 <__assert_fail@plt+0x9cc>
   11cb4:	bl	15e1c <__assert_fail@plt+0x4908>
   11cb8:	mov	r1, #0
   11cbc:	mov	r3, r4
   11cc0:	ldr	r2, [pc, #576]	; 11f08 <__assert_fail@plt+0x9f4>
   11cc4:	str	r0, [sp]
   11cc8:	mov	r0, r1
   11ccc:	bl	112ec <error@plt>
   11cd0:	b	11614 <__assert_fail@plt+0x100>
   11cd4:	mov	r0, #1000	; 0x3e8
   11cd8:	mov	r1, #0
   11cdc:	mov	sl, #3
   11ce0:	strd	r0, [sp, #24]
   11ce4:	ldr	r3, [pc, #584]	; 11f34 <__assert_fail@plt+0xa20>
   11ce8:	sub	r8, sl, #5
   11cec:	ldr	r0, [r2, #40]	; 0x28
   11cf0:	ldr	r1, [r3, #12]
   11cf4:	cmp	r1, #0
   11cf8:	movlt	r1, #10
   11cfc:	strlt	r1, [r3, #12]
   11d00:	cmp	r0, #0
   11d04:	movne	r2, #0
   11d08:	strbne	r2, [r3, #4]
   11d0c:	cmp	r8, #2
   11d10:	movhi	r4, #0
   11d14:	movhi	r5, #0
   11d18:	bhi	11e00 <__assert_fail@plt+0x8ec>
   11d1c:	ldr	r3, [sp, #24]
   11d20:	subs	r3, r3, #1
   11d24:	str	r3, [sp, #64]	; 0x40
   11d28:	ldr	r3, [sp, #28]
   11d2c:	sbc	r3, r3, #0
   11d30:	cmp	r0, #0
   11d34:	str	r3, [sp, #68]	; 0x44
   11d38:	beq	11db4 <__assert_fail@plt+0x8a0>
   11d3c:	ldr	r3, [pc, #276]	; 11e58 <__assert_fail@plt+0x944>
   11d40:	mov	r2, #10
   11d44:	mov	r1, #0
   11d48:	str	r3, [sp]
   11d4c:	add	r3, sp, #120	; 0x78
   11d50:	bl	16b38 <__assert_fail@plt+0x5624>
   11d54:	cmp	r0, #0
   11d58:	bne	11db4 <__assert_fail@plt+0x8a0>
   11d5c:	ldr	ip, [sp, #24]
   11d60:	ldrd	r4, [sp, #24]
   11d64:	ldrd	r2, [sp, #120]	; 0x78
   11d68:	mvn	r0, ip
   11d6c:	ldr	ip, [sp, #28]
   11d70:	mvn	r1, ip
   11d74:	cmp	r1, r3
   11d78:	cmpeq	r0, r2
   11d7c:	movcs	r1, #1
   11d80:	movcc	r1, #0
   11d84:	cmp	r5, r3
   11d88:	cmpeq	r4, r2
   11d8c:	movls	r1, #0
   11d90:	andhi	r1, r1, #1
   11d94:	cmp	r1, #0
   11d98:	beq	11db4 <__assert_fail@plt+0x8a0>
   11d9c:	ldr	r1, [sp, #64]	; 0x40
   11da0:	adds	r1, r1, r2
   11da4:	str	r1, [sp, #64]	; 0x40
   11da8:	ldr	r1, [sp, #68]	; 0x44
   11dac:	adc	r3, r1, r3
   11db0:	str	r3, [sp, #68]	; 0x44
   11db4:	ldr	r9, [pc, #376]	; 11f34 <__assert_fail@plt+0xa20>
   11db8:	mov	r4, #0
   11dbc:	mov	r5, #0
   11dc0:	mov	r7, #0
   11dc4:	ldr	r0, [r9]
   11dc8:	bl	11370 <strlen@plt>
   11dcc:	mov	r6, r0
   11dd0:	adds	r4, r4, #1
   11dd4:	mov	r2, r6
   11dd8:	ldrd	r0, [sp, #64]	; 0x40
   11ddc:	mov	r3, r7
   11de0:	adc	r5, r5, #0
   11de4:	bl	17374 <__assert_fail@plt+0x5e60>
   11de8:	ldrd	r2, [sp, #64]	; 0x40
   11dec:	cmp	r7, r3
   11df0:	cmpeq	r6, r2
   11df4:	bls	11e48 <__assert_fail@plt+0x934>
   11df8:	mov	r3, #0
   11dfc:	strb	r3, [r9, #4]
   11e00:	ldr	r3, [pc, #288]	; 11f28 <__assert_fail@plt+0xa14>
   11e04:	ldr	r2, [r3, #4]
   11e08:	mov	r6, r3
   11e0c:	cmp	r2, #0
   11e10:	beq	11fbc <__assert_fail@plt+0xaa8>
   11e14:	mov	r3, #0
   11e18:	cmp	r3, r5
   11e1c:	cmpeq	r2, r4
   11e20:	bcs	11f38 <__assert_fail@plt+0xa24>
   11e24:	mov	r2, #5
   11e28:	ldr	r1, [pc, #180]	; 11ee4 <__assert_fail@plt+0x9d0>
   11e2c:	mov	r0, #0
   11e30:	bl	11238 <dcgettext@plt>
   11e34:	mov	r2, r0
   11e38:	mov	r1, #0
   11e3c:	strd	r4, [sp]
   11e40:	mov	r0, #1
   11e44:	bl	112ec <error@plt>
   11e48:	strd	r0, [sp, #64]	; 0x40
   11e4c:	b	11dd0 <__assert_fail@plt+0x8bc>
   11e50:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11e54:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11e58:			; <UNDEFINED> instruction: 0x00017ebb
   11e5c:			; <UNDEFINED> instruction: 0x000182ba
   11e60:	strdeq	r8, [r1], -fp
   11e64:	andeq	r4, r1, ip, lsl #8
   11e68:	andeq	r9, r2, r0, ror r3
   11e6c:	andeq	r8, r1, fp, ror #8
   11e70:	ldrdeq	r8, [r1], -r2
   11e74:	andeq	r7, r1, r8, asr #11
   11e78:	andeq	r8, r1, r5, asr r3
   11e7c:	ldrdeq	r7, [r1], -r8
   11e80:	andeq	r8, r1, pc, lsr #5
   11e84:	andeq	r8, r1, sp, ror #6
   11e88:	andeq	r8, r1, r3, lsl #6
   11e8c:	andeq	r8, r1, sp, ror #5
   11e90:	andeq	r8, r1, r3, lsr r3
   11e94:	andeq	r8, r1, r5, lsl #7
   11e98:	andeq	r8, r1, r8, lsl #7
   11e9c:	andeq	r8, r1, r4, lsr #7
   11ea0:			; <UNDEFINED> instruction: 0x000183b9
   11ea4:	ldrdeq	r8, [r1], -r0
   11ea8:	ldrdeq	r8, [r1], -r3
   11eac:	strdeq	r8, [r1], -r0
   11eb0:	andeq	r8, r1, r8, lsl r4
   11eb4:	muleq	r1, lr, r2
   11eb8:	andeq	r8, r1, r0, asr #8
   11ebc:	andeq	r8, r1, sp, ror #8
   11ec0:	muleq	r1, ip, r4
   11ec4:			; <UNDEFINED> instruction: 0x000184b2
   11ec8:	andeq	r9, r2, ip, ror #6
   11ecc:	strdeq	r8, [r1], -r7
   11ed0:	andeq	r8, r1, r6, asr #9
   11ed4:	andeq	r7, r1, r9, lsr r9
   11ed8:	andeq	r9, r2, r8, ror #2
   11edc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11ee0:	ldrdeq	r8, [r1], -r1
   11ee4:	andeq	r8, r1, r5, lsl r5
   11ee8:	andeq	r9, r2, r0, ror #6
   11eec:	andeq	r8, r1, r1, asr #10
   11ef0:	andeq	r8, r1, r2, asr r5
   11ef4:	muleq	r1, r2, r5
   11ef8:	andeq	r9, r2, r8, lsr #7
   11efc:	svcne	0x00fe0000
   11f00:	andeq	r8, r1, sp, lsr #11
   11f04:	andeq	r8, r1, fp, lsl #7
   11f08:	andeq	r8, r1, lr, lsl #10
   11f0c:	andeq	r9, r2, r8, lsl r4
   11f10:	andeq	r7, r1, r5, ror #13
   11f14:	andeq	r8, r1, ip, asr #11
   11f18:	andeq	r8, r1, r4, asr r7
   11f1c:	strdeq	r7, [r1], -r9
   11f20:	andeq	r7, r1, fp, lsl #14
   11f24:	ldrdeq	r8, [r1], -r1
   11f28:	andeq	r9, r2, r8, ror r3
   11f2c:	andeq	r8, r1, pc, ror #11
   11f30:	andeq	r7, r1, r3, lsl r9
   11f34:	andeq	r9, r2, r8, asr r1
   11f38:	ldr	r3, [pc, #-12]	; 11f34 <__assert_fail@plt+0xa20>
   11f3c:	mov	r2, #0
   11f40:	strb	r2, [r3, #4]
   11f44:	ldr	r4, [pc, #-100]	; 11ee8 <__assert_fail@plt+0x9d4>
   11f48:	ldr	r2, [sp, #112]	; 0x70
   11f4c:	ldr	r3, [r4]
   11f50:	cmp	r3, r2
   11f54:	addlt	r2, r3, #1
   11f58:	ldrlt	r3, [fp, r3, lsl #2]
   11f5c:	strlt	r2, [r4]
   11f60:	ldr	r2, [sp, #112]	; 0x70
   11f64:	strlt	r3, [r6, #300]	; 0x12c
   11f68:	ldr	r3, [r4]
   11f6c:	cmp	r3, r2
   11f70:	bge	11fd0 <__assert_fail@plt+0xabc>
   11f74:	add	r2, r3, #1
   11f78:	ldr	r3, [fp, r3, lsl #2]
   11f7c:	str	r2, [r4]
   11f80:	str	r3, [r6, #16]
   11f84:	ldr	r3, [sp, #112]	; 0x70
   11f88:	cmp	r2, r3
   11f8c:	bge	11fd0 <__assert_fail@plt+0xabc>
   11f90:	mov	r2, #5
   11f94:	ldr	r1, [pc, #-176]	; 11eec <__assert_fail@plt+0x9d8>
   11f98:	mov	r0, #0
   11f9c:	bl	11238 <dcgettext@plt>
   11fa0:	ldr	r3, [r4]
   11fa4:	mov	r5, r0
   11fa8:	ldr	r0, [fp, r3, lsl #2]
   11fac:	bl	15e1c <__assert_fail@plt+0x4908>
   11fb0:	mov	r3, r0
   11fb4:	mov	r2, r5
   11fb8:	b	117b4 <__assert_fail@plt+0x2a0>
   11fbc:	cmp	r5, #0
   11fc0:	cmpeq	r4, #2
   11fc4:	movcc	r4, #2
   11fc8:	str	r4, [r3, #4]
   11fcc:	b	11f44 <__assert_fail@plt+0xa30>
   11fd0:	ldr	r0, [r6, #40]	; 0x28
   11fd4:	cmp	r0, #0
   11fd8:	beq	11ff4 <__assert_fail@plt+0xae0>
   11fdc:	bl	11370 <strlen@plt>
   11fe0:	ldr	r3, [r6, #4]
   11fe4:	cmp	r0, r3
   11fe8:	movhi	r2, #5
   11fec:	ldrhi	r1, [pc, #-260]	; 11ef0 <__assert_fail@plt+0x9dc>
   11ff0:	bhi	1182c <__assert_fail@plt+0x318>
   11ff4:	ldr	r4, [r6, #300]	; 0x12c
   11ff8:	ldr	r1, [pc, #-232]	; 11f18 <__assert_fail@plt+0xa04>
   11ffc:	mov	r0, r4
   12000:	bl	11190 <strcmp@plt>
   12004:	cmp	r0, #0
   12008:	beq	12060 <__assert_fail@plt+0xb4c>
   1200c:	mov	r3, #0
   12010:	mov	r1, r4
   12014:	mov	r2, r3
   12018:	mov	r0, r3
   1201c:	bl	145bc <__assert_fail@plt+0x30a8>
   12020:	cmp	r0, #0
   12024:	bge	12060 <__assert_fail@plt+0xb4c>
   12028:	bl	113b8 <__errno_location@plt>
   1202c:	ldr	r1, [pc, #-320]	; 11ef4 <__assert_fail@plt+0x9e0>
   12030:	mov	r2, #5
   12034:	ldr	r4, [r0]
   12038:	mov	r0, #0
   1203c:	bl	11238 <dcgettext@plt>
   12040:	mov	r5, r0
   12044:	mov	r0, #4
   12048:	ldr	r1, [r6, #300]	; 0x12c
   1204c:	bl	15c38 <__assert_fail@plt+0x4724>
   12050:	mov	r3, r0
   12054:	mov	r2, r5
   12058:	mov	r1, r4
   1205c:	b	11a68 <__assert_fail@plt+0x554>
   12060:	ldr	r1, [pc, #-368]	; 11ef8 <__assert_fail@plt+0x9e4>
   12064:	mov	r0, #0
   12068:	bl	17564 <__assert_fail@plt+0x6050>
   1206c:	cmp	r0, #0
   12070:	beq	12090 <__assert_fail@plt+0xb7c>
   12074:	bl	113b8 <__errno_location@plt>
   12078:	ldr	r4, [r0]
   1207c:	ldr	r2, [r6, #300]	; 0x12c
   12080:	mov	r1, #3
   12084:	mov	r0, #0
   12088:	bl	15cdc <__assert_fail@plt+0x47c8>
   1208c:	b	12ca8 <__assert_fail@plt+0x1794>
   12090:	ldr	r3, [sp, #44]	; 0x2c
   12094:	cmp	r3, #0
   12098:	bne	120bc <__assert_fail@plt+0xba8>
   1209c:	ldr	r3, [r6, #104]	; 0x68
   120a0:	sub	r2, r3, #131072	; 0x20000
   120a4:	str	r3, [sp, #44]	; 0x2c
   120a8:	ldr	r3, [pc, #-436]	; 11efc <__assert_fail@plt+0x9e8>
   120ac:	ldr	r1, [sp, #44]	; 0x2c
   120b0:	cmp	r2, r3
   120b4:	movhi	r1, #131072	; 0x20000
   120b8:	str	r1, [sp, #44]	; 0x2c
   120bc:	bl	113ac <getpagesize@plt>
   120c0:	ldr	r3, [sp, #44]	; 0x2c
   120c4:	add	r1, r3, #1
   120c8:	bl	1669c <__assert_fail@plt+0x5188>
   120cc:	cmp	r8, #1
   120d0:	mov	fp, r0
   120d4:	mvnhi	r6, #0
   120d8:	mvnhi	r8, #0
   120dc:	mvnhi	r9, #-2147483648	; 0x80000000
   120e0:	bhi	12314 <__assert_fail@plt+0xe00>
   120e4:	mov	r3, #1
   120e8:	mov	r2, #0
   120ec:	mov	r0, #0
   120f0:	str	r3, [sp]
   120f4:	mov	r3, #0
   120f8:	bl	11298 <lseek64@plt>
   120fc:	cmp	r0, #0
   12100:	mov	r8, r0
   12104:	sbcs	r3, r1, #0
   12108:	mov	r9, r1
   1210c:	bge	12158 <__assert_fail@plt+0xc44>
   12110:	bl	113b8 <__errno_location@plt>
   12114:	ldr	r3, [r0]
   12118:	cmp	r3, #29
   1211c:	moveq	r3, #0
   12120:	beq	121b8 <__assert_fail@plt+0xca4>
   12124:	bl	113b8 <__errno_location@plt>
   12128:	mov	r2, #5
   1212c:	ldr	r1, [pc, #-564]	; 11f00 <__assert_fail@plt+0x9ec>
   12130:	ldr	r4, [r0]
   12134:	mov	r0, #0
   12138:	bl	11238 <dcgettext@plt>
   1213c:	ldr	r3, [pc, #-540]	; 11f28 <__assert_fail@plt+0xa14>
   12140:	mov	r5, r0
   12144:	mov	r1, #3
   12148:	mov	r0, #0
   1214c:	ldr	r2, [r3, #300]	; 0x12c
   12150:	bl	15cdc <__assert_fail@plt+0x47c8>
   12154:	b	12050 <__assert_fail@plt+0xb3c>
   12158:	ldr	r6, [sp, #44]	; 0x2c
   1215c:	mov	r4, #0
   12160:	mov	r5, #0
   12164:	mov	r7, #0
   12168:	ldr	r3, [sp, #44]	; 0x2c
   1216c:	add	r1, fp, r4
   12170:	mov	r0, #0
   12174:	sub	r2, r3, r4
   12178:	bl	15e28 <__assert_fail@plt+0x4914>
   1217c:	cmp	r0, #0
   12180:	beq	1229c <__assert_fail@plt+0xd88>
   12184:	cmn	r0, #1
   12188:	beq	12124 <__assert_fail@plt+0xc10>
   1218c:	adds	r4, r4, r0
   12190:	adc	r5, r5, #0
   12194:	cmp	r4, r6
   12198:	sbcs	r3, r5, r7
   1219c:	blt	12168 <__assert_fail@plt+0xc54>
   121a0:	ldr	r3, [pc, #-640]	; 11f28 <__assert_fail@plt+0xa14>
   121a4:	ldrd	r6, [r3, #96]	; 0x60
   121a8:	orrs	r2, r6, r7
   121ac:	bne	121c0 <__assert_fail@plt+0xcac>
   121b0:	bl	113b8 <__errno_location@plt>
   121b4:	mov	r3, #75	; 0x4b
   121b8:	str	r3, [r0]
   121bc:	b	12124 <__assert_fail@plt+0xc10>
   121c0:	adds	r2, r8, r4
   121c4:	ldr	r8, [r3, #64]	; 0x40
   121c8:	str	r2, [sp, #72]	; 0x48
   121cc:	adc	r2, r9, r5
   121d0:	str	r2, [sp, #76]	; 0x4c
   121d4:	ldrd	r0, [sp, #72]	; 0x48
   121d8:	and	r3, r8, #53248	; 0xd000
   121dc:	cmp	r6, r0
   121e0:	sbcs	r2, r7, r1
   121e4:	movge	r8, #1
   121e8:	movlt	r8, #0
   121ec:	cmp	r3, #32768	; 0x8000
   121f0:	movne	r8, #0
   121f4:	andeq	r8, r8, #1
   121f8:	cmp	r8, #0
   121fc:	bne	12264 <__assert_fail@plt+0xd50>
   12200:	mov	r3, #2
   12204:	mov	r2, #0
   12208:	mov	r0, r8
   1220c:	str	r3, [sp]
   12210:	mov	r3, #0
   12214:	bl	11298 <lseek64@plt>
   12218:	cmp	r0, #0
   1221c:	mov	r6, r0
   12220:	sbcs	r3, r1, #0
   12224:	mov	r7, r1
   12228:	blt	12124 <__assert_fail@plt+0xc10>
   1222c:	ldrd	r2, [sp, #72]	; 0x48
   12230:	cmp	r3, r1
   12234:	cmpeq	r2, r0
   12238:	beq	12264 <__assert_fail@plt+0xd50>
   1223c:	mov	r0, r8
   12240:	str	r8, [sp]
   12244:	bl	11298 <lseek64@plt>
   12248:	cmp	r0, #0
   1224c:	sbcs	r3, r1, #0
   12250:	blt	12124 <__assert_fail@plt+0xc10>
   12254:	ldrd	r2, [sp, #72]	; 0x48
   12258:	cmp	r6, r2
   1225c:	sbcs	r3, r7, r3
   12260:	ldrdlt	r6, [sp, #72]	; 0x48
   12264:	ldr	r3, [sp, #72]	; 0x48
   12268:	ldr	r2, [sp, #76]	; 0x4c
   1226c:	subs	r3, r6, r3
   12270:	sbc	r2, r7, r2
   12274:	adds	r4, r4, r3
   12278:	adc	r5, r5, r2
   1227c:	mvn	r3, #-2147483648	; 0x80000000
   12280:	mvn	r2, #0
   12284:	cmp	r5, r3
   12288:	cmpeq	r4, r2
   1228c:	beq	121b0 <__assert_fail@plt+0xc9c>
   12290:	cmp	r4, #0
   12294:	sbcs	r3, r5, #0
   12298:	blt	12124 <__assert_fail@plt+0xc10>
   1229c:	ldr	r6, [sp, #44]	; 0x2c
   122a0:	asr	r7, r6, #31
   122a4:	cmp	r4, r6
   122a8:	sbcs	r3, r5, r7
   122ac:	ldrd	r2, [sp, #24]
   122b0:	movlt	r6, r4
   122b4:	cmp	r2, #0
   122b8:	sbcs	r3, r3, #0
   122bc:	bge	122f8 <__assert_fail@plt+0xde4>
   122c0:	mov	r2, #5
   122c4:	ldr	r1, [pc, #-968]	; 11f04 <__assert_fail@plt+0x9f0>
   122c8:	mov	r0, #0
   122cc:	bl	11238 <dcgettext@plt>
   122d0:	mov	r4, r0
   122d4:	add	r2, sp, #120	; 0x78
   122d8:	ldrd	r0, [sp, #24]
   122dc:	bl	147b4 <__assert_fail@plt+0x32a0>
   122e0:	bl	15e1c <__assert_fail@plt+0x4908>
   122e4:	mov	r3, r4
   122e8:	ldr	r2, [pc, #-1000]	; 11f08 <__assert_fail@plt+0x9f4>
   122ec:	mov	r1, #75	; 0x4b
   122f0:	str	r0, [sp]
   122f4:	b	11b28 <__assert_fail@plt+0x614>
   122f8:	ldrd	r2, [sp, #24]
   122fc:	mov	r8, r4
   12300:	mov	r9, r5
   12304:	cmp	r5, r3
   12308:	cmpeq	r4, r2
   1230c:	movcc	r8, r2
   12310:	movcc	r9, r3
   12314:	ldr	r7, [pc, #-1012]	; 11f28 <__assert_fail@plt+0xa14>
   12318:	ldr	r3, [r7]
   1231c:	cmp	r3, #0
   12320:	beq	12364 <__assert_fail@plt+0xe50>
   12324:	add	r0, r7, #308	; 0x134
   12328:	bl	1146c <sigemptyset@plt>
   1232c:	add	r2, sp, #120	; 0x78
   12330:	mov	r1, #0
   12334:	mov	r0, #13
   12338:	bl	1128c <sigaction@plt>
   1233c:	ldr	r3, [sp, #120]	; 0x78
   12340:	cmp	r3, #1
   12344:	beq	12354 <__assert_fail@plt+0xe40>
   12348:	mov	r1, #13
   1234c:	add	r0, r7, #308	; 0x134
   12350:	bl	1131c <sigaddset@plt>
   12354:	ldr	r2, [pc, #-1104]	; 11f0c <__assert_fail@plt+0x9f8>
   12358:	mov	r0, #0
   1235c:	add	r1, r2, #148	; 0x94
   12360:	bl	111c0 <sigprocmask@plt>
   12364:	sub	sl, sl, #2
   12368:	cmp	sl, #5
   1236c:	ldrls	pc, [pc, sl, lsl #2]
   12370:	b	1248c <__assert_fail@plt+0xf78>
   12374:			; <UNDEFINED> instruction: 0x000124b4
   12378:	andeq	r2, r1, ip, lsl #7
   1237c:	andeq	r2, r1, ip, lsl #7
   12380:	ldrdeq	r2, [r1], -r8
   12384:	ldrdeq	r2, [r1], -r4
   12388:	andeq	r2, r1, ip, lsr lr
   1238c:	mov	r4, #0
   12390:	mov	r5, #0
   12394:	mov	sl, #1
   12398:	mov	r1, fp
   1239c:	mov	r0, #0
   123a0:	ldr	r2, [sp, #44]	; 0x2c
   123a4:	bl	15e28 <__assert_fail@plt+0x4914>
   123a8:	cmn	r0, #1
   123ac:	mov	r9, r0
   123b0:	bne	123c4 <__assert_fail@plt+0xeb0>
   123b4:	bl	113b8 <__errno_location@plt>
   123b8:	ldr	r4, [r0]
   123bc:	ldr	r2, [r7, #300]	; 0x12c
   123c0:	b	12080 <__assert_fail@plt+0xb6c>
   123c4:	ldr	r2, [pc, #-1176]	; 11f34 <__assert_fail@plt+0xa20>
   123c8:	add	r3, fp, r0
   123cc:	mov	r8, fp
   123d0:	mov	r6, fp
   123d4:	ldr	r2, [r2, #12]
   123d8:	strb	r2, [fp, r0]
   123dc:	str	r3, [sp, #32]
   123e0:	mov	r0, r6
   123e4:	ldr	r3, [pc, #-1208]	; 11f34 <__assert_fail@plt+0xa20>
   123e8:	ldr	r1, [r3, #12]
   123ec:	bl	11268 <rawmemchr@plt>
   123f0:	ldr	r3, [sp, #32]
   123f4:	cmp	r3, r0
   123f8:	bne	12444 <__assert_fail@plt+0xf30>
   123fc:	cmp	r3, r8
   12400:	beq	12418 <__assert_fail@plt+0xf04>
   12404:	mov	r0, sl
   12408:	sub	r2, r3, r8
   1240c:	mov	r1, r8
   12410:	mov	sl, #0
   12414:	bl	13d84 <__assert_fail@plt+0x2870>
   12418:	cmp	r9, #0
   1241c:	bne	12398 <__assert_fail@plt+0xe84>
   12420:	mov	r0, #0
   12424:	ldr	r4, [pc, #-1284]	; 11f28 <__assert_fail@plt+0xa14>
   12428:	bl	114fc <close@plt>
   1242c:	subs	r5, r0, #0
   12430:	beq	131bc <__assert_fail@plt+0x1ca8>
   12434:	bl	113b8 <__errno_location@plt>
   12438:	ldr	r5, [r0]
   1243c:	ldr	r2, [r4, #300]	; 0x12c
   12440:	b	12aec <__assert_fail@plt+0x15d8>
   12444:	add	r6, r0, #1
   12448:	ldrd	r0, [sp, #24]
   1244c:	adds	r4, r4, #1
   12450:	adc	r5, r5, #0
   12454:	cmp	r1, r5
   12458:	cmpeq	r0, r4
   1245c:	bhi	123dc <__assert_fail@plt+0xec8>
   12460:	sub	r2, r6, r8
   12464:	mov	r1, r8
   12468:	str	r3, [sp, #32]
   1246c:	mov	r0, sl
   12470:	mov	r8, r6
   12474:	bl	13d84 <__assert_fail@plt+0x2870>
   12478:	mov	r4, #0
   1247c:	mov	r5, #0
   12480:	ldr	r3, [sp, #32]
   12484:	mov	sl, #1
   12488:	b	123dc <__assert_fail@plt+0xec8>
   1248c:	mov	r2, #0
   12490:	mov	r3, #0
   12494:	ldrd	r0, [sp, #24]
   12498:	strd	r2, [sp, #8]
   1249c:	mvn	r3, #0
   124a0:	mov	r2, fp
   124a4:	str	r3, [sp]
   124a8:	ldr	r3, [sp, #44]	; 0x2c
   124ac:	bl	13e7c <__assert_fail@plt+0x2968>
   124b0:	b	12420 <__assert_fail@plt+0xf0c>
   124b4:	mov	r3, #0
   124b8:	mov	r2, #0
   124bc:	mov	r9, r3
   124c0:	mov	r5, r3
   124c4:	str	r3, [sp, #48]	; 0x30
   124c8:	str	r3, [sp, #56]	; 0x38
   124cc:	mov	r3, #0
   124d0:	strd	r2, [sp, #32]
   124d4:	mov	r1, fp
   124d8:	mov	r0, #0
   124dc:	ldr	r2, [sp, #44]	; 0x2c
   124e0:	bl	15e28 <__assert_fail@plt+0x4914>
   124e4:	cmn	r0, #1
   124e8:	str	r0, [sp, #64]	; 0x40
   124ec:	bne	127cc <__assert_fail@plt+0x12b8>
   124f0:	bl	113b8 <__errno_location@plt>
   124f4:	ldr	r3, [pc, #-1492]	; 11f28 <__assert_fail@plt+0xa14>
   124f8:	ldr	r4, [r0]
   124fc:	ldr	r2, [r3, #300]	; 0x12c
   12500:	b	12080 <__assert_fail@plt+0xb6c>
   12504:	ldr	r3, [pc, #-1496]	; 11f34 <__assert_fail@plt+0xa20>
   12508:	str	r5, [sp, #72]	; 0x48
   1250c:	ldr	r2, [sp, #32]
   12510:	ldr	r1, [sp, #36]	; 0x24
   12514:	ldr	ip, [r3, #12]
   12518:	ldr	r3, [sp, #24]
   1251c:	subs	r3, r3, r2
   12520:	ldr	r2, [sp, #28]
   12524:	sbc	r2, r2, r1
   12528:	subs	r3, r3, r5
   1252c:	str	r3, [sp, #104]	; 0x68
   12530:	mov	r3, #0
   12534:	sbc	r3, r2, r3
   12538:	mov	r2, r6
   1253c:	str	r3, [sp, #108]	; 0x6c
   12540:	mov	r3, #0
   12544:	ldrd	r0, [sp, #104]	; 0x68
   12548:	cmp	r1, r3
   1254c:	cmpeq	r0, r6
   12550:	bhi	127ac <__assert_fail@plt+0x1298>
   12554:	ldr	r3, [sp, #24]
   12558:	mov	r1, ip
   1255c:	mov	r0, r7
   12560:	sub	r4, r3, r5
   12564:	ldr	r3, [sp, #32]
   12568:	sub	r4, r4, r3
   1256c:	mov	r2, r4
   12570:	sub	r8, r4, #1
   12574:	bl	113a0 <memrchr@plt>
   12578:	add	r8, r7, r8
   1257c:	mov	sl, r0
   12580:	cmp	r5, #0
   12584:	beq	125f8 <__assert_fail@plt+0x10e4>
   12588:	ldr	r3, [sp, #32]
   1258c:	ldr	r2, [sp, #36]	; 0x24
   12590:	orrs	r3, r3, r2
   12594:	moveq	r0, #1
   12598:	movne	r0, #0
   1259c:	cmp	sl, #0
   125a0:	moveq	r2, r0
   125a4:	movne	r2, #1
   125a8:	cmp	r2, #0
   125ac:	beq	1265c <__assert_fail@plt+0x1148>
   125b0:	mov	r2, r5
   125b4:	mov	r1, r9
   125b8:	bl	13d84 <__assert_fail@plt+0x2870>
   125bc:	ldr	r3, [sp, #32]
   125c0:	adds	r3, r3, r5
   125c4:	str	r3, [sp, #32]
   125c8:	ldr	r3, [sp, #36]	; 0x24
   125cc:	adc	r3, r3, #0
   125d0:	str	r3, [sp, #36]	; 0x24
   125d4:	ldr	r3, [sp, #44]	; 0x2c
   125d8:	cmp	r5, r3
   125dc:	bls	125f0 <__assert_fail@plt+0x10dc>
   125e0:	mov	r0, r9
   125e4:	mov	r1, r3
   125e8:	bl	166dc <__assert_fail@plt+0x51c8>
   125ec:	mov	r9, r0
   125f0:	ldr	r3, [sp, #44]	; 0x2c
   125f4:	str	r3, [sp, #48]	; 0x30
   125f8:	cmp	sl, #0
   125fc:	moveq	r5, sl
   12600:	beq	1265c <__assert_fail@plt+0x1148>
   12604:	sub	r3, sl, r7
   12608:	ldr	r2, [sp, #36]	; 0x24
   1260c:	mov	r1, r7
   12610:	add	r5, r3, #1
   12614:	ldr	r3, [sp, #32]
   12618:	sub	r6, r6, r5
   1261c:	add	r7, r7, r5
   12620:	orrs	r3, r3, r2
   12624:	mov	r2, r5
   12628:	moveq	r0, #1
   1262c:	movne	r0, #0
   12630:	bl	13d84 <__assert_fail@plt+0x2870>
   12634:	ldrd	r2, [sp, #32]
   12638:	adds	r2, r2, r5
   1263c:	adc	r3, r3, #0
   12640:	cmp	r8, #0
   12644:	subne	r4, r4, r5
   12648:	moveq	r5, r8
   1264c:	movne	r5, #0
   12650:	strd	r2, [sp, #32]
   12654:	mov	r3, #1
   12658:	str	r3, [sp, #56]	; 0x38
   1265c:	ldr	r3, [sp, #56]	; 0x38
   12660:	cmp	r6, #0
   12664:	moveq	r3, #0
   12668:	eorne	r3, r3, #1
   1266c:	cmp	r3, #0
   12670:	beq	126c0 <__assert_fail@plt+0x11ac>
   12674:	ldr	r3, [sp, #32]
   12678:	cmp	r8, #0
   1267c:	mov	r1, r7
   12680:	movne	sl, r4
   12684:	moveq	sl, r6
   12688:	ldr	r2, [sp, #36]	; 0x24
   1268c:	sub	r6, r6, sl
   12690:	add	r7, r7, sl
   12694:	orrs	r3, r3, r2
   12698:	mov	r2, sl
   1269c:	moveq	r0, #1
   126a0:	movne	r0, #0
   126a4:	bl	13d84 <__assert_fail@plt+0x2870>
   126a8:	ldrd	r2, [sp, #32]
   126ac:	adds	r2, r2, sl
   126b0:	adc	r3, r3, #0
   126b4:	cmp	r8, #0
   126b8:	subne	r4, r4, sl
   126bc:	strd	r2, [sp, #32]
   126c0:	cmp	r8, #0
   126c4:	cmpne	r4, #0
   126c8:	bne	126e8 <__assert_fail@plt+0x11d4>
   126cc:	adds	r3, r6, #0
   126d0:	movne	r3, #1
   126d4:	cmp	r8, #0
   126d8:	movne	r3, #0
   126dc:	cmp	r3, #0
   126e0:	beq	12748 <__assert_fail@plt+0x1234>
   126e4:	mov	r4, r6
   126e8:	ldr	r3, [sp, #48]	; 0x30
   126ec:	sub	r3, r3, r5
   126f0:	cmp	r3, r4
   126f4:	bcs	1272c <__assert_fail@plt+0x1218>
   126f8:	ldr	r3, [sp, #44]	; 0x2c
   126fc:	ldr	r2, [sp, #48]	; 0x30
   12700:	mvn	r3, r3
   12704:	cmp	r3, r2
   12708:	bcc	127c8 <__assert_fail@plt+0x12b4>
   1270c:	mov	r3, r2
   12710:	ldr	r2, [sp, #44]	; 0x2c
   12714:	mov	r0, r9
   12718:	add	r3, r3, r2
   1271c:	mov	r1, r3
   12720:	str	r3, [sp, #48]	; 0x30
   12724:	bl	166dc <__assert_fail@plt+0x51c8>
   12728:	mov	r9, r0
   1272c:	mov	r1, r7
   12730:	add	r0, r9, r5
   12734:	mov	r2, r4
   12738:	add	r5, r5, r4
   1273c:	sub	r6, r6, r4
   12740:	add	r7, r7, r4
   12744:	bl	111f0 <memcpy@plt>
   12748:	cmp	r8, #0
   1274c:	beq	12764 <__assert_fail@plt+0x1250>
   12750:	mov	r3, #0
   12754:	mov	r2, #0
   12758:	str	r3, [sp, #56]	; 0x38
   1275c:	mov	r3, #0
   12760:	strd	r2, [sp, #32]
   12764:	cmp	r6, #0
   12768:	bne	12504 <__assert_fail@plt+0xff0>
   1276c:	ldr	r3, [sp, #64]	; 0x40
   12770:	cmp	r3, #0
   12774:	bne	124d4 <__assert_fail@plt+0xfc0>
   12778:	cmp	r5, #0
   1277c:	beq	127a0 <__assert_fail@plt+0x128c>
   12780:	ldr	r3, [sp, #32]
   12784:	mov	r1, r9
   12788:	ldr	r2, [sp, #36]	; 0x24
   1278c:	orrs	r3, r3, r2
   12790:	mov	r2, r5
   12794:	moveq	r0, #1
   12798:	movne	r0, #0
   1279c:	bl	13d84 <__assert_fail@plt+0x2870>
   127a0:	mov	r0, r9
   127a4:	bl	1466c <__assert_fail@plt+0x3158>
   127a8:	b	12420 <__assert_fail@plt+0xf0c>
   127ac:	mov	r1, ip
   127b0:	mov	r0, r7
   127b4:	bl	113a0 <memrchr@plt>
   127b8:	mov	r8, #0
   127bc:	mov	sl, r0
   127c0:	mov	r4, r8
   127c4:	b	12580 <__assert_fail@plt+0x106c>
   127c8:	bl	16968 <__assert_fail@plt+0x5454>
   127cc:	mov	r7, fp
   127d0:	ldr	r6, [sp, #64]	; 0x40
   127d4:	b	12764 <__assert_fail@plt+0x1250>
   127d8:	ldrd	r2, [sp, #32]
   127dc:	orrs	r3, r2, r3
   127e0:	ldrd	r2, [sp, #24]
   127e4:	bne	1280c <__assert_fail@plt+0x12f8>
   127e8:	mov	r0, r8
   127ec:	mov	r1, r9
   127f0:	bl	17374 <__assert_fail@plt+0x5e60>
   127f4:	ldrd	r2, [sp, #24]
   127f8:	str	r6, [sp]
   127fc:	strd	r2, [sp, #8]
   12800:	mov	r2, fp
   12804:	ldr	r3, [sp, #44]	; 0x2c
   12808:	b	124ac <__assert_fail@plt+0xf98>
   1280c:	ldrd	r0, [sp, #32]
   12810:	cmp	r3, r1
   12814:	cmpeq	r2, r0
   12818:	ldrd	r0, [sp, #24]
   1281c:	movcs	r3, #1
   12820:	movcc	r3, #0
   12824:	cmp	r1, r9
   12828:	cmpeq	r0, r8
   1282c:	movhi	r3, #0
   12830:	andls	r3, r3, #1
   12834:	cmp	r3, #0
   12838:	bne	12850 <__assert_fail@plt+0x133c>
   1283c:	ldr	r3, [pc, #-2356]	; 11f10 <__assert_fail@plt+0x9fc>
   12840:	mov	r2, #996	; 0x3e4
   12844:	ldr	r1, [pc, #-2348]	; 11f20 <__assert_fail@plt+0xa0c>
   12848:	ldr	r0, [pc, #-2364]	; 11f14 <__assert_fail@plt+0xa00>
   1284c:	bl	11514 <__assert_fail@plt>
   12850:	mov	r0, r8
   12854:	mov	r1, r9
   12858:	ldrd	r2, [sp, #24]
   1285c:	bl	17374 <__assert_fail@plt+0x5e60>
   12860:	ldr	r3, [sp, #32]
   12864:	mov	lr, r1
   12868:	mov	ip, r0
   1286c:	ldrd	r0, [sp, #32]
   12870:	subs	r4, r3, #1
   12874:	ldr	r3, [sp, #36]	; 0x24
   12878:	mul	r2, r4, lr
   1287c:	umull	r4, r5, r4, ip
   12880:	sbc	r3, r3, #0
   12884:	mla	r3, ip, r3, r2
   12888:	add	r5, r3, r5
   1288c:	ldrd	r2, [sp, #24]
   12890:	strd	r4, [sp, #48]	; 0x30
   12894:	cmp	r3, r1
   12898:	cmpeq	r2, r0
   1289c:	beq	128b4 <__assert_fail@plt+0x13a0>
   128a0:	ldrd	r2, [sp, #32]
   128a4:	mul	r3, ip, r3
   128a8:	umull	r8, r9, ip, r2
   128ac:	mla	r1, r2, lr, r3
   128b0:	add	r9, r1, r9
   128b4:	mov	r1, #0
   128b8:	cmp	r4, r6
   128bc:	sbcs	r3, r5, r1
   128c0:	mov	r0, r6
   128c4:	bge	129a8 <__assert_fail@plt+0x1494>
   128c8:	sub	r6, r6, r4
   128cc:	add	r1, fp, r4
   128d0:	mov	r2, r6
   128d4:	mov	r0, fp
   128d8:	bl	111cc <memmove@plt>
   128dc:	ldrd	r2, [sp, #48]	; 0x30
   128e0:	cmp	r2, r8
   128e4:	sbcs	r3, r3, r9
   128e8:	bge	12420 <__assert_fail@plt+0xf0c>
   128ec:	cmn	r6, #1
   128f0:	bne	12910 <__assert_fail@plt+0x13fc>
   128f4:	mov	r1, fp
   128f8:	mov	r0, #0
   128fc:	ldr	r2, [sp, #44]	; 0x2c
   12900:	bl	15e28 <__assert_fail@plt+0x4914>
   12904:	cmn	r0, #1
   12908:	mov	r6, r0
   1290c:	beq	123b4 <__assert_fail@plt+0xea0>
   12910:	cmp	r6, #0
   12914:	beq	12420 <__assert_fail@plt+0xf0c>
   12918:	ldr	r1, [sp, #48]	; 0x30
   1291c:	mov	r3, #0
   12920:	mov	r2, r6
   12924:	subs	r1, r8, r1
   12928:	str	r1, [sp, #80]	; 0x50
   1292c:	ldr	r1, [sp, #52]	; 0x34
   12930:	sbc	r1, r9, r1
   12934:	str	r1, [sp, #84]	; 0x54
   12938:	ldrd	r0, [sp, #80]	; 0x50
   1293c:	cmp	r6, r0
   12940:	mov	r0, #1
   12944:	sbcs	r1, r3, r1
   12948:	mov	r1, fp
   1294c:	strdlt	r2, [sp, #80]	; 0x50
   12950:	ldr	r2, [sp, #80]	; 0x50
   12954:	bl	14754 <__assert_fail@plt+0x3240>
   12958:	ldr	r3, [sp, #80]	; 0x50
   1295c:	cmp	r0, r3
   12960:	beq	12984 <__assert_fail@plt+0x1470>
   12964:	bl	113b8 <__errno_location@plt>
   12968:	ldr	r4, [r0]
   1296c:	mov	r0, r4
   12970:	bl	132d8 <__assert_fail@plt+0x1dc4>
   12974:	cmp	r0, #0
   12978:	ldreq	r2, [pc, #-2664]	; 11f18 <__assert_fail@plt+0xa04>
   1297c:	moveq	r1, #3
   12980:	beq	12088 <__assert_fail@plt+0xb74>
   12984:	ldr	r3, [sp, #48]	; 0x30
   12988:	ldr	r2, [sp, #80]	; 0x50
   1298c:	adds	r3, r3, r2
   12990:	ldr	r2, [sp, #84]	; 0x54
   12994:	str	r3, [sp, #48]	; 0x30
   12998:	ldr	r3, [sp, #52]	; 0x34
   1299c:	adc	r3, r3, r2
   129a0:	str	r3, [sp, #52]	; 0x34
   129a4:	b	129cc <__assert_fail@plt+0x14b8>
   129a8:	mov	r6, #1
   129ac:	subs	r2, r4, r0
   129b0:	sbc	r3, r5, r1
   129b4:	mov	r0, #0
   129b8:	str	r6, [sp]
   129bc:	bl	11298 <lseek64@plt>
   129c0:	cmp	r0, #0
   129c4:	sbcs	r3, r1, #0
   129c8:	blt	123b4 <__assert_fail@plt+0xea0>
   129cc:	mvn	r6, #0
   129d0:	b	128dc <__assert_fail@plt+0x13c8>
   129d4:	ldrd	r2, [sp, #24]
   129d8:	ldrd	r0, [sp, #32]
   129dc:	cmp	r3, r1
   129e0:	cmpeq	r2, r0
   129e4:	bcc	129f4 <__assert_fail@plt+0x14e0>
   129e8:	cmp	r3, r9
   129ec:	cmpeq	r2, r8
   129f0:	bls	12a08 <__assert_fail@plt+0x14f4>
   129f4:	ldr	r3, [pc, #-2784]	; 11f1c <__assert_fail@plt+0xa08>
   129f8:	movw	r2, #867	; 0x363
   129fc:	ldr	r1, [pc, #-2788]	; 11f20 <__assert_fail@plt+0xa0c>
   12a00:	ldr	r0, [pc, #-2788]	; 11f24 <__assert_fail@plt+0xa10>
   12a04:	b	1284c <__assert_fail@plt+0x1338>
   12a08:	mov	r0, r8
   12a0c:	mov	r1, r9
   12a10:	ldrd	r2, [sp, #24]
   12a14:	bl	17374 <__assert_fail@plt+0x5e60>
   12a18:	ldrd	r2, [sp, #32]
   12a1c:	str	r1, [sp, #104]	; 0x68
   12a20:	str	r0, [sp, #112]	; 0x70
   12a24:	cmp	r3, #0
   12a28:	cmpeq	r2, #1
   12a2c:	bls	12e08 <__assert_fail@plt+0x18f4>
   12a30:	ldr	r3, [sp, #32]
   12a34:	subs	r3, r3, #1
   12a38:	str	r3, [sp, #48]	; 0x30
   12a3c:	ldr	r3, [sp, #36]	; 0x24
   12a40:	ldr	r2, [sp, #48]	; 0x30
   12a44:	sbc	r3, r3, #0
   12a48:	str	r3, [sp, #52]	; 0x34
   12a4c:	mul	r3, r0, r3
   12a50:	mla	r3, r2, r1, r3
   12a54:	umull	r0, r1, r0, r2
   12a58:	subs	r2, r0, #1
   12a5c:	add	r1, r3, r1
   12a60:	sbc	r3, r1, #0
   12a64:	mov	r1, #0
   12a68:	strd	r2, [sp, #56]	; 0x38
   12a6c:	ldrd	r4, [sp, #56]	; 0x38
   12a70:	cmp	r4, r6
   12a74:	sbcs	ip, r5, r1
   12a78:	bge	12aac <__assert_fail@plt+0x1598>
   12a7c:	mov	r3, r2
   12a80:	sub	r6, r6, r2
   12a84:	mov	r2, r6
   12a88:	add	r1, fp, r3
   12a8c:	mov	r0, fp
   12a90:	bl	111cc <memmove@plt>
   12a94:	ldrd	r2, [sp, #56]	; 0x38
   12a98:	strd	r2, [sp, #64]	; 0x40
   12a9c:	mov	r3, #1
   12aa0:	mov	r5, #0
   12aa4:	str	r3, [sp, #116]	; 0x74
   12aa8:	b	12b48 <__assert_fail@plt+0x1634>
   12aac:	mov	r4, #1
   12ab0:	subs	r2, r2, r6
   12ab4:	sbc	r3, r3, r1
   12ab8:	mov	r0, #0
   12abc:	str	r4, [sp]
   12ac0:	bl	11298 <lseek64@plt>
   12ac4:	cmp	r0, #0
   12ac8:	sbcs	r3, r1, #0
   12acc:	ldrdge	r2, [sp, #56]	; 0x38
   12ad0:	mvnge	r6, #0
   12ad4:	strdge	r2, [sp, #64]	; 0x40
   12ad8:	bge	12a9c <__assert_fail@plt+0x1588>
   12adc:	bl	113b8 <__errno_location@plt>
   12ae0:	ldr	r3, [pc, #-3008]	; 11f28 <__assert_fail@plt+0xa14>
   12ae4:	ldr	r5, [r0]
   12ae8:	ldr	r2, [r3, #300]	; 0x12c
   12aec:	mov	r1, #3
   12af0:	mov	r0, #0
   12af4:	b	13084 <__assert_fail@plt+0x1b70>
   12af8:	ldr	r3, [sp, #64]	; 0x40
   12afc:	mov	r7, #0
   12b00:	mov	r4, fp
   12b04:	mov	r5, #0
   12b08:	subs	r3, r8, r3
   12b0c:	str	r3, [sp, #88]	; 0x58
   12b10:	ldr	r3, [sp, #68]	; 0x44
   12b14:	sbc	r3, r9, r3
   12b18:	str	r3, [sp, #92]	; 0x5c
   12b1c:	ldrd	r2, [sp, #88]	; 0x58
   12b20:	cmp	r6, r2
   12b24:	sbcs	r3, r7, r3
   12b28:	strdlt	r6, [sp, #88]	; 0x58
   12b2c:	ldr	r7, [sp, #88]	; 0x58
   12b30:	add	r3, fp, r7
   12b34:	str	r3, [sp, #80]	; 0x50
   12b38:	ldr	r3, [sp, #80]	; 0x50
   12b3c:	mvn	r6, #0
   12b40:	cmp	r3, r4
   12b44:	bne	12bd8 <__assert_fail@plt+0x16c4>
   12b48:	ldrd	r2, [sp, #64]	; 0x40
   12b4c:	cmp	r2, r8
   12b50:	sbcs	r3, r3, r9
   12b54:	bge	12b84 <__assert_fail@plt+0x1670>
   12b58:	cmn	r6, #1
   12b5c:	bne	12b7c <__assert_fail@plt+0x1668>
   12b60:	mov	r1, fp
   12b64:	mov	r0, #0
   12b68:	ldr	r2, [sp, #44]	; 0x2c
   12b6c:	bl	15e28 <__assert_fail@plt+0x4914>
   12b70:	cmn	r0, #1
   12b74:	mov	r6, r0
   12b78:	beq	124f0 <__assert_fail@plt+0xfdc>
   12b7c:	cmp	r6, #0
   12b80:	bne	12af8 <__assert_fail@plt+0x15e4>
   12b84:	cmp	r5, #0
   12b88:	bne	12bbc <__assert_fail@plt+0x16a8>
   12b8c:	ldrd	r2, [sp, #32]
   12b90:	orrs	r3, r2, r3
   12b94:	bne	12420 <__assert_fail@plt+0xf0c>
   12b98:	ldrd	r0, [sp, #24]
   12b9c:	ldrd	r2, [sp, #48]	; 0x30
   12ba0:	cmp	r3, r1
   12ba4:	cmpeq	r2, r0
   12ba8:	bhi	12420 <__assert_fail@plt+0xf0c>
   12bac:	mov	r2, #0
   12bb0:	mov	r0, #1
   12bb4:	mov	r1, r2
   12bb8:	bl	13d84 <__assert_fail@plt+0x2870>
   12bbc:	ldr	r3, [sp, #48]	; 0x30
   12bc0:	adds	r3, r3, #1
   12bc4:	str	r3, [sp, #48]	; 0x30
   12bc8:	ldr	r3, [sp, #52]	; 0x34
   12bcc:	adc	r3, r3, #0
   12bd0:	str	r3, [sp, #52]	; 0x34
   12bd4:	b	12b8c <__assert_fail@plt+0x1678>
   12bd8:	ldr	r3, [sp, #56]	; 0x38
   12bdc:	ldr	r2, [sp, #64]	; 0x40
   12be0:	subs	r3, r3, r2
   12be4:	ldr	r2, [sp, #68]	; 0x44
   12be8:	str	r3, [sp, #96]	; 0x60
   12bec:	ldr	r3, [sp, #60]	; 0x3c
   12bf0:	sbc	r3, r3, r2
   12bf4:	str	r3, [sp, #100]	; 0x64
   12bf8:	ldrd	r2, [sp, #96]	; 0x60
   12bfc:	cmp	r2, #0
   12c00:	sbcs	r3, r3, #0
   12c04:	movlt	r2, #0
   12c08:	movlt	r3, #0
   12c0c:	strdlt	r2, [sp, #96]	; 0x60
   12c10:	mov	r3, #0
   12c14:	mov	r2, r7
   12c18:	ldrd	r0, [sp, #96]	; 0x60
   12c1c:	cmp	r7, r0
   12c20:	strd	r0, [sp, #72]	; 0x48
   12c24:	sbcs	r1, r3, r1
   12c28:	strdlt	r2, [sp, #72]	; 0x48
   12c2c:	ldr	r3, [sp, #72]	; 0x48
   12c30:	sub	r2, r7, r3
   12c34:	ldr	r3, [pc, #-3336]	; 11f34 <__assert_fail@plt+0xa20>
   12c38:	ldr	r1, [r3, #12]
   12c3c:	ldr	r3, [sp, #72]	; 0x48
   12c40:	add	r0, r4, r3
   12c44:	bl	11424 <memchr@plt>
   12c48:	cmp	r0, #0
   12c4c:	movne	r3, #1
   12c50:	addne	sl, r0, #1
   12c54:	ldreq	sl, [sp, #80]	; 0x50
   12c58:	streq	r0, [sp, #72]	; 0x48
   12c5c:	strne	r3, [sp, #72]	; 0x48
   12c60:	ldrd	r0, [sp, #32]
   12c64:	ldrd	r2, [sp, #48]	; 0x30
   12c68:	sub	r6, sl, r4
   12c6c:	cmp	r3, r1
   12c70:	cmpeq	r2, r0
   12c74:	bne	12cb4 <__assert_fail@plt+0x17a0>
   12c78:	mov	r2, r6
   12c7c:	mov	r1, r4
   12c80:	mov	r0, #1
   12c84:	bl	14754 <__assert_fail@plt+0x3240>
   12c88:	cmp	r6, r0
   12c8c:	beq	12cd0 <__assert_fail@plt+0x17bc>
   12c90:	bl	113b8 <__errno_location@plt>
   12c94:	mov	r2, #5
   12c98:	ldr	r1, [pc, #-3444]	; 11f2c <__assert_fail@plt+0xa18>
   12c9c:	ldr	r4, [r0]
   12ca0:	mov	r0, #0
   12ca4:	bl	11238 <dcgettext@plt>
   12ca8:	mov	r3, r0
   12cac:	ldr	r2, [pc, #-3460]	; 11f30 <__assert_fail@plt+0xa1c>
   12cb0:	b	12058 <__assert_fail@plt+0xb44>
   12cb4:	ldrd	r2, [sp, #32]
   12cb8:	orrs	r3, r2, r3
   12cbc:	bne	12cd0 <__assert_fail@plt+0x17bc>
   12cc0:	mov	r2, r6
   12cc4:	mov	r1, r4
   12cc8:	ldr	r0, [sp, #116]	; 0x74
   12ccc:	bl	13d84 <__assert_fail@plt+0x2870>
   12cd0:	ldrd	r2, [sp, #64]	; 0x40
   12cd4:	ldr	r4, [sp, #72]	; 0x48
   12cd8:	adds	r2, r2, r6
   12cdc:	adc	r3, r3, #0
   12ce0:	strd	r2, [sp, #64]	; 0x40
   12ce4:	ldrd	r2, [sp, #32]
   12ce8:	orr	r3, r3, r2
   12cec:	str	r3, [sp, #116]	; 0x74
   12cf0:	ldrd	r2, [sp, #56]	; 0x38
   12cf4:	ldrd	r0, [sp, #64]	; 0x40
   12cf8:	cmp	r2, r0
   12cfc:	sbcs	r3, r3, r1
   12d00:	movge	r3, r4
   12d04:	orrlt	r3, r4, #1
   12d08:	tst	r3, #255	; 0xff
   12d0c:	bne	12d2c <__assert_fail@plt+0x1818>
   12d10:	mov	r3, r5
   12d14:	mov	r5, r3
   12d18:	ldr	r3, [sp, #72]	; 0x48
   12d1c:	sub	r7, r7, r6
   12d20:	mov	r4, sl
   12d24:	str	r3, [sp, #116]	; 0x74
   12d28:	b	12b38 <__assert_fail@plt+0x1624>
   12d2c:	ldr	r2, [sp, #80]	; 0x50
   12d30:	eor	r3, r4, #1
   12d34:	cmp	r2, sl
   12d38:	movne	r3, #0
   12d3c:	andeq	r3, r3, #1
   12d40:	cmp	r3, #0
   12d44:	bne	12d14 <__assert_fail@plt+0x1800>
   12d48:	ldrd	r0, [sp, #32]
   12d4c:	ldr	r3, [sp, #48]	; 0x30
   12d50:	adds	r3, r3, #1
   12d54:	str	r3, [sp, #48]	; 0x30
   12d58:	ldr	r3, [sp, #52]	; 0x34
   12d5c:	adc	r3, r3, #0
   12d60:	str	r3, [sp, #52]	; 0x34
   12d64:	ldrd	r2, [sp, #48]	; 0x30
   12d68:	cmp	r3, r1
   12d6c:	cmpeq	r2, r0
   12d70:	ldr	r2, [sp, #116]	; 0x74
   12d74:	movhi	r3, #1
   12d78:	movls	r3, #0
   12d7c:	cmp	r2, #0
   12d80:	moveq	r3, #0
   12d84:	cmp	r3, #0
   12d88:	bne	12420 <__assert_fail@plt+0xf0c>
   12d8c:	ldrd	r2, [sp, #24]
   12d90:	ldrd	r0, [sp, #48]	; 0x30
   12d94:	cmp	r3, r1
   12d98:	cmpeq	r2, r0
   12d9c:	bne	12de8 <__assert_fail@plt+0x18d4>
   12da0:	subs	r3, r8, #1
   12da4:	str	r3, [sp, #56]	; 0x38
   12da8:	sbc	r3, r9, #0
   12dac:	str	r3, [sp, #60]	; 0x3c
   12db0:	ldrd	r2, [sp, #56]	; 0x38
   12db4:	ldrd	r0, [sp, #64]	; 0x40
   12db8:	cmp	r2, r0
   12dbc:	sbcs	r3, r3, r1
   12dc0:	movge	r4, #0
   12dc4:	bge	12cf0 <__assert_fail@plt+0x17dc>
   12dc8:	ldrd	r2, [sp, #32]
   12dcc:	orrs	r3, r2, r3
   12dd0:	bne	12cf0 <__assert_fail@plt+0x17dc>
   12dd4:	mov	r2, #0
   12dd8:	mov	r0, #1
   12ddc:	mov	r1, r2
   12de0:	bl	13d84 <__assert_fail@plt+0x2870>
   12de4:	b	12cf0 <__assert_fail@plt+0x17dc>
   12de8:	ldr	r3, [sp, #56]	; 0x38
   12dec:	ldr	r2, [sp, #112]	; 0x70
   12df0:	adds	r3, r3, r2
   12df4:	ldr	r2, [sp, #104]	; 0x68
   12df8:	str	r3, [sp, #56]	; 0x38
   12dfc:	ldr	r3, [sp, #60]	; 0x3c
   12e00:	adc	r3, r3, r2
   12e04:	b	12dac <__assert_fail@plt+0x1898>
   12e08:	ldr	r3, [sp, #112]	; 0x70
   12e0c:	mov	r2, #0
   12e10:	subs	r3, r3, #1
   12e14:	str	r3, [sp, #56]	; 0x38
   12e18:	ldr	r3, [sp, #104]	; 0x68
   12e1c:	sbc	r3, r3, #0
   12e20:	str	r3, [sp, #60]	; 0x3c
   12e24:	mov	r3, #0
   12e28:	strd	r2, [sp, #64]	; 0x40
   12e2c:	mov	r2, #1
   12e30:	mov	r3, #0
   12e34:	strd	r2, [sp, #48]	; 0x30
   12e38:	b	12a9c <__assert_fail@plt+0x1588>
   12e3c:	ldrd	r2, [sp, #32]
   12e40:	orrs	r3, r2, r3
   12e44:	bne	12fd4 <__assert_fail@plt+0x1ac0>
   12e48:	ldrd	r0, [sp, #24]
   12e4c:	mov	r3, #0
   12e50:	mvn	r2, #0
   12e54:	cmp	r1, r3
   12e58:	cmpeq	r0, r2
   12e5c:	bhi	127c8 <__assert_fail@plt+0x12b4>
   12e60:	ldr	r5, [sp, #24]
   12e64:	mov	r1, #16
   12e68:	mov	r6, #0
   12e6c:	mvn	sl, #0
   12e70:	mov	r9, r6
   12e74:	mov	r0, r5
   12e78:	bl	16770 <__assert_fail@plt+0x525c>
   12e7c:	mov	r8, r0
   12e80:	mov	r4, r0
   12e84:	bl	132fc <__assert_fail@plt+0x1de8>
   12e88:	add	r6, r6, #1
   12e8c:	ldr	r0, [r7, #8]
   12e90:	bl	1694c <__assert_fail@plt+0x5438>
   12e94:	cmp	r5, r6
   12e98:	stm	r4, {r0, sl}
   12e9c:	add	r4, r4, #16
   12ea0:	str	r9, [r4, #-8]
   12ea4:	str	r9, [r4, #-4]
   12ea8:	bne	12e84 <__assert_fail@plt+0x1970>
   12eac:	mov	r4, #0
   12eb0:	mov	r2, #1
   12eb4:	mov	r3, #0
   12eb8:	mov	r7, r4
   12ebc:	strd	r2, [sp, #48]	; 0x30
   12ec0:	str	r4, [sp, #64]	; 0x40
   12ec4:	str	r4, [sp, #88]	; 0x58
   12ec8:	mov	r1, fp
   12ecc:	mov	r0, #0
   12ed0:	ldr	r2, [sp, #44]	; 0x2c
   12ed4:	bl	15e28 <__assert_fail@plt+0x4914>
   12ed8:	cmn	r0, #1
   12edc:	beq	124f0 <__assert_fail@plt+0xfdc>
   12ee0:	cmp	r0, #0
   12ee4:	beq	131a0 <__assert_fail@plt+0x1c8c>
   12ee8:	add	r3, fp, r0
   12eec:	mov	r5, fp
   12ef0:	str	r3, [sp, #72]	; 0x48
   12ef4:	ldr	r3, [sp, #72]	; 0x48
   12ef8:	cmp	r3, r5
   12efc:	beq	12ec8 <__assert_fail@plt+0x19b4>
   12f00:	ldr	r3, [sp, #72]	; 0x48
   12f04:	mov	r0, r5
   12f08:	sub	r2, r3, r5
   12f0c:	ldr	r3, [pc, #-4064]	; 11f34 <__assert_fail@plt+0xa20>
   12f10:	ldr	r1, [r3, #12]
   12f14:	bl	11424 <memchr@plt>
   12f18:	cmp	r0, #0
   12f1c:	ldreq	r3, [sp, #72]	; 0x48
   12f20:	addne	r3, r0, #1
   12f24:	streq	r0, [sp, #80]	; 0x50
   12f28:	strne	r3, [sp, #56]	; 0x38
   12f2c:	movne	r3, #1
   12f30:	strne	r3, [sp, #80]	; 0x50
   12f34:	streq	r3, [sp, #56]	; 0x38
   12f38:	ldr	r3, [sp, #56]	; 0x38
   12f3c:	sub	sl, r3, r5
   12f40:	ldrd	r2, [sp, #32]
   12f44:	orrs	r3, r2, r3
   12f48:	beq	1300c <__assert_fail@plt+0x1af8>
   12f4c:	ldrd	r0, [sp, #32]
   12f50:	ldrd	r2, [sp, #48]	; 0x30
   12f54:	cmp	r3, r1
   12f58:	cmpeq	r2, r0
   12f5c:	bne	12f88 <__assert_fail@plt+0x1a74>
   12f60:	ldr	r3, [pc, #624]	; 131d8 <__assert_fail@plt+0x1cc4>
   12f64:	ldrb	r6, [r3, #304]	; 0x130
   12f68:	cmp	r6, #0
   12f6c:	beq	12fdc <__assert_fail@plt+0x1ac8>
   12f70:	mov	r2, sl
   12f74:	mov	r1, r5
   12f78:	mov	r0, #1
   12f7c:	bl	14754 <__assert_fail@plt+0x3240>
   12f80:	cmp	sl, r0
   12f84:	bne	12c90 <__assert_fail@plt+0x177c>
   12f88:	ldr	r3, [sp, #80]	; 0x50
   12f8c:	cmp	r3, #0
   12f90:	beq	12fcc <__assert_fail@plt+0x1ab8>
   12f94:	ldrd	r2, [sp, #24]
   12f98:	ldrd	r0, [sp, #48]	; 0x30
   12f9c:	cmp	r3, r1
   12fa0:	cmpeq	r2, r0
   12fa4:	moveq	r2, #1
   12fa8:	moveq	r3, #0
   12fac:	strdeq	r2, [sp, #48]	; 0x30
   12fb0:	beq	12fcc <__assert_fail@plt+0x1ab8>
   12fb4:	ldr	r3, [sp, #48]	; 0x30
   12fb8:	adds	r3, r3, #1
   12fbc:	str	r3, [sp, #48]	; 0x30
   12fc0:	ldr	r3, [sp, #52]	; 0x34
   12fc4:	adc	r3, r3, #0
   12fc8:	str	r3, [sp, #52]	; 0x34
   12fcc:	ldr	r5, [sp, #56]	; 0x38
   12fd0:	b	12ef4 <__assert_fail@plt+0x19e0>
   12fd4:	mov	r8, #0
   12fd8:	b	12eac <__assert_fail@plt+0x1998>
   12fdc:	ldr	r3, [pc, #504]	; 131dc <__assert_fail@plt+0x1cc8>
   12fe0:	mov	r2, #1
   12fe4:	mov	r1, sl
   12fe8:	mov	r0, r5
   12fec:	ldr	r3, [r3]
   12ff0:	bl	11214 <fwrite_unlocked@plt>
   12ff4:	cmp	r0, #1
   12ff8:	beq	12f88 <__assert_fail@plt+0x1a74>
   12ffc:	ldr	r3, [pc, #472]	; 131dc <__assert_fail@plt+0x1cc8>
   13000:	ldr	r0, [r3]
   13004:	bl	114a8 <clearerr_unlocked@plt>
   13008:	b	12c90 <__assert_fail@plt+0x177c>
   1300c:	mov	r1, r4
   13010:	mov	r0, r8
   13014:	ldr	r2, [sp, #24]
   13018:	bl	13988 <__assert_fail@plt+0x2474>
   1301c:	ldr	r3, [sp, #64]	; 0x40
   13020:	add	r6, r8, r4, lsl #4
   13024:	orr	r0, r0, r3
   13028:	uxtb	r3, r0
   1302c:	str	r3, [sp, #64]	; 0x40
   13030:	ldr	r3, [pc, #416]	; 131d8 <__assert_fail@plt+0x1cc4>
   13034:	ldrb	r3, [r3, #304]	; 0x130
   13038:	str	r3, [sp, #112]	; 0x70
   1303c:	bl	113b8 <__errno_location@plt>
   13040:	ldr	r3, [sp, #112]	; 0x70
   13044:	mov	r9, r0
   13048:	cmp	r3, #0
   1304c:	beq	13098 <__assert_fail@plt+0x1b84>
   13050:	mov	r2, sl
   13054:	mov	r1, r5
   13058:	ldr	r0, [r6, #4]
   1305c:	bl	14754 <__assert_fail@plt+0x3240>
   13060:	cmp	sl, r0
   13064:	beq	130b4 <__assert_fail@plt+0x1ba0>
   13068:	ldr	r5, [r9]
   1306c:	mov	r0, r5
   13070:	bl	132d8 <__assert_fail@plt+0x1dc4>
   13074:	cmp	r0, #0
   13078:	bne	130c4 <__assert_fail@plt+0x1bb0>
   1307c:	ldr	r2, [r6]
   13080:	mov	r1, #3
   13084:	bl	15cdc <__assert_fail@plt+0x47c8>
   13088:	mov	r3, r0
   1308c:	ldr	r2, [pc, #332]	; 131e0 <__assert_fail@plt+0x1ccc>
   13090:	mov	r1, r5
   13094:	b	11a68 <__assert_fail@plt+0x554>
   13098:	mov	r2, #1
   1309c:	mov	r1, sl
   130a0:	ldr	r3, [r6, #8]
   130a4:	mov	r0, r5
   130a8:	bl	11214 <fwrite_unlocked@plt>
   130ac:	cmp	r0, #1
   130b0:	b	13064 <__assert_fail@plt+0x1b50>
   130b4:	ldr	r0, [r9]
   130b8:	bl	132d8 <__assert_fail@plt+0x1dc4>
   130bc:	cmp	r0, #0
   130c0:	moveq	r7, #1
   130c4:	ldr	r3, [sp, #64]	; 0x40
   130c8:	cmp	r3, #0
   130cc:	beq	130f4 <__assert_fail@plt+0x1be0>
   130d0:	ldr	r0, [r6, #8]
   130d4:	bl	144e0 <__assert_fail@plt+0x2fcc>
   130d8:	cmp	r0, #0
   130dc:	ldrne	r2, [r6]
   130e0:	ldrne	r4, [r9]
   130e4:	bne	12080 <__assert_fail@plt+0xb6c>
   130e8:	mvn	r3, #1
   130ec:	str	r3, [r6, #4]
   130f0:	str	r0, [r6, #8]
   130f4:	ldr	r3, [sp, #80]	; 0x50
   130f8:	cmp	r3, #0
   130fc:	beq	12fcc <__assert_fail@plt+0x1ab8>
   13100:	ldrd	r0, [sp, #24]
   13104:	mov	r3, #0
   13108:	add	r4, r4, #1
   1310c:	cmp	r1, r3
   13110:	cmpeq	r0, r4
   13114:	bne	12fcc <__assert_fail@plt+0x1ab8>
   13118:	cmp	r7, #0
   1311c:	bne	13190 <__assert_fail@plt+0x1c7c>
   13120:	ldr	r4, [sp, #24]
   13124:	mov	r5, r8
   13128:	mov	r6, #0
   1312c:	ldr	sl, [pc, #164]	; 131d8 <__assert_fail@plt+0x1cc4>
   13130:	mvn	r9, #1
   13134:	ldr	r7, [sp, #24]
   13138:	cmp	r4, r6
   1313c:	bhi	1315c <__assert_fail@plt+0x1c48>
   13140:	ldrb	r3, [sl, #296]	; 0x128
   13144:	cmp	r3, #0
   13148:	bne	1315c <__assert_fail@plt+0x1c48>
   1314c:	mov	r2, r7
   13150:	mov	r1, r6
   13154:	mov	r0, r8
   13158:	bl	13988 <__assert_fail@plt+0x2474>
   1315c:	ldr	r1, [r5, #4]
   13160:	cmp	r1, #0
   13164:	blt	13178 <__assert_fail@plt+0x1c64>
   13168:	ldr	r3, [r5]
   1316c:	ldr	r0, [r5, #8]
   13170:	ldr	r2, [r5, #12]
   13174:	bl	13b04 <__assert_fail@plt+0x25f0>
   13178:	add	r6, r6, #1
   1317c:	add	r5, r5, #16
   13180:	str	r9, [r5, #-12]
   13184:	cmp	r7, r6
   13188:	bne	13138 <__assert_fail@plt+0x1c24>
   1318c:	b	12420 <__assert_fail@plt+0xf0c>
   13190:	str	r7, [sp, #88]	; 0x58
   13194:	mov	r7, #0
   13198:	mov	r4, r7
   1319c:	b	12fcc <__assert_fail@plt+0x1ab8>
   131a0:	ldrd	r2, [sp, #32]
   131a4:	orrs	r3, r2, r3
   131a8:	bne	12420 <__assert_fail@plt+0xf0c>
   131ac:	ldr	r3, [sp, #88]	; 0x58
   131b0:	cmp	r3, #0
   131b4:	beq	13124 <__assert_fail@plt+0x1c10>
   131b8:	b	13120 <__assert_fail@plt+0x1c0c>
   131bc:	ldr	r1, [pc, #32]	; 131e4 <__assert_fail@plt+0x1cd0>
   131c0:	ldr	r3, [r4, #8]
   131c4:	ldr	r2, [r4, #288]	; 0x120
   131c8:	ldr	r1, [r1, #8]
   131cc:	bl	13b04 <__assert_fail@plt+0x25f0>
   131d0:	mov	r0, r5
   131d4:	b	11c60 <__assert_fail@plt+0x74c>
   131d8:	andeq	r9, r2, r8, ror r3
   131dc:	andeq	r9, r2, ip, ror #6
   131e0:	andeq	r7, r1, r3, lsl r9
   131e4:	andeq	r9, r2, r8, asr r1
   131e8:	mov	fp, #0
   131ec:	mov	lr, #0
   131f0:	pop	{r1}		; (ldr r1, [sp], #4)
   131f4:	mov	r2, sp
   131f8:	push	{r2}		; (str r2, [sp, #-4]!)
   131fc:	push	{r0}		; (str r0, [sp, #-4]!)
   13200:	ldr	ip, [pc, #16]	; 13218 <__assert_fail@plt+0x1d04>
   13204:	push	{ip}		; (str ip, [sp, #-4]!)
   13208:	ldr	r0, [pc, #12]	; 1321c <__assert_fail@plt+0x1d08>
   1320c:	ldr	r3, [pc, #12]	; 13220 <__assert_fail@plt+0x1d0c>
   13210:	bl	11328 <__libc_start_main@plt>
   13214:	bl	114f0 <abort@plt>
   13218:	andeq	r7, r1, r8, asr #10
   1321c:	andeq	r1, r1, r8, lsr r5
   13220:	andeq	r7, r1, r8, ror #9
   13224:	ldr	r3, [pc, #20]	; 13240 <__assert_fail@plt+0x1d2c>
   13228:	ldr	r2, [pc, #20]	; 13244 <__assert_fail@plt+0x1d30>
   1322c:	add	r3, pc, r3
   13230:	ldr	r2, [r3, r2]
   13234:	cmp	r2, #0
   13238:	bxeq	lr
   1323c:	b	11340 <__gmon_start__@plt>
   13240:	andeq	r5, r1, ip, asr #27
   13244:	andeq	r0, r0, ip, asr #2
   13248:	ldr	r0, [pc, #24]	; 13268 <__assert_fail@plt+0x1d54>
   1324c:	ldr	r3, [pc, #24]	; 1326c <__assert_fail@plt+0x1d58>
   13250:	cmp	r3, r0
   13254:	bxeq	lr
   13258:	ldr	r3, [pc, #16]	; 13270 <__assert_fail@plt+0x1d5c>
   1325c:	cmp	r3, #0
   13260:	bxeq	lr
   13264:	bx	r3
   13268:	andeq	r9, r2, r4, asr r3
   1326c:	andeq	r9, r2, r4, asr r3
   13270:	andeq	r0, r0, r0
   13274:	ldr	r0, [pc, #36]	; 132a0 <__assert_fail@plt+0x1d8c>
   13278:	ldr	r1, [pc, #36]	; 132a4 <__assert_fail@plt+0x1d90>
   1327c:	sub	r1, r1, r0
   13280:	asr	r1, r1, #2
   13284:	add	r1, r1, r1, lsr #31
   13288:	asrs	r1, r1, #1
   1328c:	bxeq	lr
   13290:	ldr	r3, [pc, #16]	; 132a8 <__assert_fail@plt+0x1d94>
   13294:	cmp	r3, #0
   13298:	bxeq	lr
   1329c:	bx	r3
   132a0:	andeq	r9, r2, r4, asr r3
   132a4:	andeq	r9, r2, r4, asr r3
   132a8:	andeq	r0, r0, r0
   132ac:	push	{r4, lr}
   132b0:	ldr	r4, [pc, #24]	; 132d0 <__assert_fail@plt+0x1dbc>
   132b4:	ldrb	r3, [r4]
   132b8:	cmp	r3, #0
   132bc:	popne	{r4, pc}
   132c0:	bl	13248 <__assert_fail@plt+0x1d34>
   132c4:	mov	r3, #1
   132c8:	strb	r3, [r4]
   132cc:	pop	{r4, pc}
   132d0:	andeq	r9, r2, r4, ror r3
   132d4:	b	13274 <__assert_fail@plt+0x1d60>
   132d8:	ldr	r3, [pc, #24]	; 132f8 <__assert_fail@plt+0x1de4>
   132dc:	sub	r0, r0, #32
   132e0:	clz	r0, r0
   132e4:	lsr	r0, r0, #5
   132e8:	ldr	r3, [r3]
   132ec:	cmp	r3, #0
   132f0:	moveq	r0, #0
   132f4:	bx	lr
   132f8:	andeq	r9, r2, r8, ror r3
   132fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13300:	ldr	r4, [pc, #560]	; 13538 <__assert_fail@plt+0x2024>
   13304:	ldr	r7, [pc, #560]	; 1353c <__assert_fail@plt+0x2028>
   13308:	ldr	r5, [r4, #4]
   1330c:	ldr	r3, [r4, #8]
   13310:	cmp	r3, #0
   13314:	bne	134a0 <__assert_fail@plt+0x1f8c>
   13318:	ldr	r8, [r4, #12]
   1331c:	cmp	r8, #0
   13320:	bne	13370 <__assert_fail@plt+0x1e5c>
   13324:	ldr	r0, [r4, #16]
   13328:	bl	11370 <strlen@plt>
   1332c:	mov	r6, r0
   13330:	ldr	r0, [r4, #24]
   13334:	str	r6, [r4, #20]
   13338:	cmp	r0, #0
   1333c:	moveq	r0, r8
   13340:	beq	13348 <__assert_fail@plt+0x1e34>
   13344:	bl	11370 <strlen@plt>
   13348:	add	r5, r6, r5
   1334c:	str	r0, [r4, #28]
   13350:	add	r5, r5, r0
   13354:	str	r5, [r4, #12]
   13358:	ldr	r1, [r4, #12]
   1335c:	ldr	r3, [r4, #20]
   13360:	add	r1, r1, #1
   13364:	cmp	r1, r3
   13368:	bcs	13384 <__assert_fail@plt+0x1e70>
   1336c:	bl	16968 <__assert_fail@plt+0x5454>
   13370:	add	r3, r8, #2
   13374:	add	r5, r5, #1
   13378:	str	r5, [r4, #4]
   1337c:	str	r3, [r4, #12]
   13380:	b	13358 <__assert_fail@plt+0x1e44>
   13384:	ldr	r0, [r4, #8]
   13388:	bl	166dc <__assert_fail@plt+0x51c8>
   1338c:	cmp	r8, #0
   13390:	mov	r5, r0
   13394:	str	r0, [r4, #8]
   13398:	bne	13434 <__assert_fail@plt+0x1f20>
   1339c:	ldr	r1, [r4, #16]
   133a0:	ldr	r2, [r4, #20]
   133a4:	bl	111f0 <memcpy@plt>
   133a8:	ldr	r1, [r7]
   133ac:	ldr	r3, [r4, #20]
   133b0:	ldr	r6, [r4, #4]
   133b4:	ldrb	r1, [r1]
   133b8:	add	r3, r5, r3
   133bc:	mov	r0, r3
   133c0:	mov	r2, r6
   133c4:	str	r3, [r4, #36]	; 0x24
   133c8:	bl	113dc <memset@plt>
   133cc:	ldr	r1, [r4, #24]
   133d0:	cmp	r1, #0
   133d4:	beq	133e4 <__assert_fail@plt+0x1ed0>
   133d8:	add	r0, r0, r6
   133dc:	ldr	r2, [r4, #28]
   133e0:	bl	111f0 <memcpy@plt>
   133e4:	ldr	r3, [r4, #12]
   133e8:	mov	r2, #0
   133ec:	ldr	r0, [r4, #32]
   133f0:	strb	r2, [r5, r3]
   133f4:	bl	1466c <__assert_fail@plt+0x3158>
   133f8:	mov	r1, #4
   133fc:	ldr	r0, [r4, #4]
   13400:	bl	168a0 <__assert_fail@plt+0x538c>
   13404:	ldr	r6, [r4, #40]	; 0x28
   13408:	mov	r7, r0
   1340c:	str	r0, [r4, #32]
   13410:	cmp	r6, #0
   13414:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13418:	cmp	r8, #0
   1341c:	beq	13458 <__assert_fail@plt+0x1f44>
   13420:	ldr	r3, [pc, #280]	; 13540 <__assert_fail@plt+0x202c>
   13424:	movw	r2, #409	; 0x199
   13428:	ldr	r1, [pc, #276]	; 13544 <__assert_fail@plt+0x2030>
   1342c:	ldr	r0, [pc, #276]	; 13548 <__assert_fail@plt+0x2034>
   13430:	bl	11514 <__assert_fail@plt>
   13434:	ldr	r1, [r7]
   13438:	ldr	r2, [r4, #32]
   1343c:	ldr	r3, [r4, #20]
   13440:	ldr	r2, [r2]
   13444:	ldrb	r2, [r1, r2]
   13448:	strb	r2, [r0, r3]
   1344c:	add	r3, r3, #1
   13450:	str	r3, [r4, #20]
   13454:	b	133a8 <__assert_fail@plt+0x1e94>
   13458:	mov	r0, r6
   1345c:	bl	11370 <strlen@plt>
   13460:	ldr	r8, [r4, #4]
   13464:	mov	r5, r0
   13468:	mov	r2, r0
   1346c:	mov	r1, r6
   13470:	ldr	r0, [r4, #36]	; 0x24
   13474:	sub	r3, r8, r5
   13478:	add	r7, r7, r8, lsl #2
   1347c:	add	r5, r6, r5
   13480:	add	r0, r0, r3
   13484:	bl	111f0 <memcpy@plt>
   13488:	cmp	r5, r6
   1348c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13490:	ldrb	r3, [r5, #-1]!
   13494:	sub	r3, r3, #48	; 0x30
   13498:	str	r3, [r7, #-4]!
   1349c:	b	13488 <__assert_fail@plt+0x1f74>
   134a0:	ldr	r6, [r4, #32]
   134a4:	ldr	r0, [r4, #36]	; 0x24
   134a8:	ldrb	r8, [r7, #4]
   134ac:	add	r2, r6, r5, lsl #2
   134b0:	ldr	ip, [r7]
   134b4:	add	r3, r0, r5
   134b8:	mvn	r9, r0
   134bc:	cmp	r0, r3
   134c0:	bne	134e4 <__assert_fail@plt+0x1fd0>
   134c4:	mov	r2, #5
   134c8:	ldr	r1, [pc, #124]	; 1354c <__assert_fail@plt+0x2038>
   134cc:	mov	r0, #0
   134d0:	bl	11238 <dcgettext@plt>
   134d4:	mov	r2, r0
   134d8:	mov	r1, #0
   134dc:	mov	r0, #1
   134e0:	bl	112ec <error@plt>
   134e4:	ldr	r1, [r2, #-4]
   134e8:	cmn	r9, r3
   134ec:	movne	lr, #0
   134f0:	andeq	lr, r8, #1
   134f4:	cmp	lr, #0
   134f8:	add	r1, r1, #1
   134fc:	str	r1, [r2, #-4]
   13500:	beq	13518 <__assert_fail@plt+0x2004>
   13504:	ldr	lr, [r6]
   13508:	add	lr, ip, lr
   1350c:	ldrb	lr, [lr, #1]
   13510:	cmp	lr, #0
   13514:	beq	13318 <__assert_fail@plt+0x1e04>
   13518:	ldrb	r1, [ip, r1]
   1351c:	cmp	r1, #0
   13520:	strb	r1, [r3, #-1]
   13524:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   13528:	str	r1, [r2, #-4]!
   1352c:	ldrb	r1, [ip]
   13530:	strb	r1, [r3, #-1]!
   13534:	b	134bc <__assert_fail@plt+0x1fa8>
   13538:	andeq	r9, r2, r8, ror r3
   1353c:	andeq	r9, r2, r8, asr r1
   13540:	andeq	r7, r1, r0, lsl #11
   13544:	andeq	r7, r1, fp, lsl #14
   13548:	andeq	r7, r1, r7, lsl r7
   1354c:	andeq	r7, r1, pc, lsl r7
   13550:	push	{r4, r5, r6, r7, r8, r9, lr}
   13554:	mov	r7, r0
   13558:	sub	sp, sp, #116	; 0x74
   1355c:	ldr	r6, [pc, #972]	; 13930 <__assert_fail@plt+0x241c>
   13560:	ldr	r0, [r6]
   13564:	cmp	r0, #0
   13568:	bne	136c0 <__assert_fail@plt+0x21ac>
   1356c:	ldrb	r3, [r6, #44]	; 0x2c
   13570:	cmp	r3, #0
   13574:	beq	135b0 <__assert_fail@plt+0x209c>
   13578:	ldr	r3, [pc, #948]	; 13934 <__assert_fail@plt+0x2420>
   1357c:	mov	r2, #5
   13580:	ldr	r1, [pc, #944]	; 13938 <__assert_fail@plt+0x2424>
   13584:	ldr	r4, [r3]
   13588:	bl	11238 <dcgettext@plt>
   1358c:	mov	r5, r0
   13590:	mov	r1, r7
   13594:	mov	r0, #4
   13598:	bl	15c38 <__assert_fail@plt+0x4724>
   1359c:	mov	r3, r0
   135a0:	mov	r2, r5
   135a4:	mov	r1, #1
   135a8:	mov	r0, r4
   135ac:	bl	11418 <__fprintf_chk@plt>
   135b0:	movw	r2, #438	; 0x1b6
   135b4:	mov	r1, #65	; 0x41
   135b8:	mov	r0, r7
   135bc:	bl	14588 <__assert_fail@plt+0x3074>
   135c0:	subs	r8, r0, #0
   135c4:	blt	13924 <__assert_fail@plt+0x2410>
   135c8:	add	r1, sp, #8
   135cc:	bl	17564 <__assert_fail@plt+0x6050>
   135d0:	subs	r9, r0, #0
   135d4:	beq	13610 <__assert_fail@plt+0x20fc>
   135d8:	bl	113b8 <__errno_location@plt>
   135dc:	ldr	r1, [pc, #856]	; 1393c <__assert_fail@plt+0x2428>
   135e0:	mov	r2, #5
   135e4:	ldr	r4, [r0]
   135e8:	mov	r0, #0
   135ec:	bl	11238 <dcgettext@plt>
   135f0:	mov	r5, r0
   135f4:	mov	r1, r7
   135f8:	mov	r0, #4
   135fc:	bl	15c38 <__assert_fail@plt+0x4724>
   13600:	mov	r3, r0
   13604:	mov	r2, r5
   13608:	mov	r1, r4
   1360c:	b	13660 <__assert_fail@plt+0x214c>
   13610:	ldrd	r2, [sp, #104]	; 0x68
   13614:	ldrd	r4, [r6, #144]	; 0x90
   13618:	cmp	r5, r3
   1361c:	cmpeq	r4, r2
   13620:	bne	13668 <__assert_fail@plt+0x2154>
   13624:	ldrd	r2, [sp, #8]
   13628:	ldrd	r4, [r6, #48]	; 0x30
   1362c:	cmp	r5, r3
   13630:	cmpeq	r4, r2
   13634:	bne	13668 <__assert_fail@plt+0x2154>
   13638:	mov	r2, #5
   1363c:	ldr	r1, [pc, #764]	; 13940 <__assert_fail@plt+0x242c>
   13640:	bl	11238 <dcgettext@plt>
   13644:	mov	r4, r0
   13648:	mov	r1, r7
   1364c:	mov	r0, #4
   13650:	bl	15c38 <__assert_fail@plt+0x4724>
   13654:	mov	r3, r0
   13658:	mov	r2, r4
   1365c:	mov	r1, r9
   13660:	mov	r0, #1
   13664:	bl	112ec <error@plt>
   13668:	mov	r2, #0
   1366c:	mov	r3, #0
   13670:	mov	r0, r8
   13674:	bl	11208 <ftruncate64@plt>
   13678:	cmp	r0, #0
   1367c:	beq	13924 <__assert_fail@plt+0x2410>
   13680:	ldr	r3, [sp, #24]
   13684:	and	r3, r3, #61440	; 0xf000
   13688:	cmp	r3, #32768	; 0x8000
   1368c:	bne	13924 <__assert_fail@plt+0x2410>
   13690:	bl	113b8 <__errno_location@plt>
   13694:	mov	r2, #5
   13698:	ldr	r1, [pc, #676]	; 13944 <__assert_fail@plt+0x2430>
   1369c:	ldr	r4, [r0]
   136a0:	mov	r0, #0
   136a4:	bl	11238 <dcgettext@plt>
   136a8:	mov	r5, r0
   136ac:	mov	r2, r7
   136b0:	mov	r1, #3
   136b4:	mov	r0, #0
   136b8:	bl	15cdc <__assert_fail@plt+0x47c8>
   136bc:	b	13600 <__assert_fail@plt+0x20ec>
   136c0:	ldr	r0, [pc, #640]	; 13948 <__assert_fail@plt+0x2434>
   136c4:	bl	11304 <getenv@plt>
   136c8:	cmp	r0, #0
   136cc:	ldr	r4, [pc, #632]	; 1394c <__assert_fail@plt+0x2438>
   136d0:	mov	r2, #1
   136d4:	movne	r4, r0
   136d8:	mov	r1, r7
   136dc:	ldr	r0, [pc, #620]	; 13950 <__assert_fail@plt+0x243c>
   136e0:	bl	11394 <setenv@plt>
   136e4:	subs	r9, r0, #0
   136e8:	beq	13714 <__assert_fail@plt+0x2200>
   136ec:	bl	113b8 <__errno_location@plt>
   136f0:	ldr	r1, [pc, #604]	; 13954 <__assert_fail@plt+0x2440>
   136f4:	mov	r2, #5
   136f8:	ldr	r4, [r0]
   136fc:	mov	r0, #0
   13700:	bl	11238 <dcgettext@plt>
   13704:	mov	r2, r0
   13708:	mov	r1, r4
   1370c:	mov	r0, #1
   13710:	bl	112ec <error@plt>
   13714:	ldrb	r3, [r6, #44]	; 0x2c
   13718:	cmp	r3, #0
   1371c:	beq	1375c <__assert_fail@plt+0x2248>
   13720:	ldr	r3, [pc, #524]	; 13934 <__assert_fail@plt+0x2420>
   13724:	mov	r2, #5
   13728:	ldr	r1, [pc, #552]	; 13958 <__assert_fail@plt+0x2444>
   1372c:	ldr	r5, [r3]
   13730:	bl	11238 <dcgettext@plt>
   13734:	mov	r8, r0
   13738:	mov	r2, r7
   1373c:	mov	r1, #3
   13740:	mov	r0, r9
   13744:	bl	15cdc <__assert_fail@plt+0x47c8>
   13748:	mov	r3, r0
   1374c:	mov	r2, r8
   13750:	mov	r1, #1
   13754:	mov	r0, r5
   13758:	bl	11418 <__fprintf_chk@plt>
   1375c:	add	r0, sp, #8
   13760:	bl	1143c <pipe@plt>
   13764:	subs	r8, r0, #0
   13768:	beq	13780 <__assert_fail@plt+0x226c>
   1376c:	bl	113b8 <__errno_location@plt>
   13770:	mov	r2, #5
   13774:	ldr	r1, [pc, #480]	; 1395c <__assert_fail@plt+0x2448>
   13778:	ldr	r4, [r0]
   1377c:	b	136fc <__assert_fail@plt+0x21e8>
   13780:	bl	11478 <fork@plt>
   13784:	subs	r7, r0, #0
   13788:	mov	r5, r0
   1378c:	beq	137d8 <__assert_fail@plt+0x22c4>
   13790:	cmn	r0, #1
   13794:	bne	138c0 <__assert_fail@plt+0x23ac>
   13798:	bl	113b8 <__errno_location@plt>
   1379c:	mov	r2, #5
   137a0:	ldr	r1, [pc, #440]	; 13960 <__assert_fail@plt+0x244c>
   137a4:	ldr	r4, [r0]
   137a8:	b	136fc <__assert_fail@plt+0x21e8>
   137ac:	ldr	r3, [r6, #152]	; 0x98
   137b0:	ldr	r0, [r3, r7, lsl #2]
   137b4:	bl	114fc <close@plt>
   137b8:	cmp	r0, #0
   137bc:	beq	137d4 <__assert_fail@plt+0x22c0>
   137c0:	bl	113b8 <__errno_location@plt>
   137c4:	mov	r2, #5
   137c8:	ldr	r1, [pc, #404]	; 13964 <__assert_fail@plt+0x2450>
   137cc:	ldr	r4, [r0]
   137d0:	b	136fc <__assert_fail@plt+0x21e8>
   137d4:	add	r7, r7, #1
   137d8:	ldr	r3, [r6, #156]	; 0x9c
   137dc:	cmp	r3, r7
   137e0:	bhi	137ac <__assert_fail@plt+0x2298>
   137e4:	ldr	r0, [sp, #12]
   137e8:	bl	114fc <close@plt>
   137ec:	mov	r7, r0
   137f0:	bl	113b8 <__errno_location@plt>
   137f4:	cmp	r7, #0
   137f8:	mov	r5, r0
   137fc:	beq	13810 <__assert_fail@plt+0x22fc>
   13800:	mov	r2, #5
   13804:	ldr	r1, [pc, #348]	; 13968 <__assert_fail@plt+0x2454>
   13808:	ldr	r4, [r0]
   1380c:	b	136fc <__assert_fail@plt+0x21e8>
   13810:	ldr	r0, [sp, #8]
   13814:	cmp	r0, #0
   13818:	beq	1385c <__assert_fail@plt+0x2348>
   1381c:	mov	r1, r7
   13820:	bl	11244 <dup2@plt>
   13824:	subs	r8, r0, #0
   13828:	beq	1383c <__assert_fail@plt+0x2328>
   1382c:	mov	r2, #5
   13830:	ldr	r1, [pc, #308]	; 1396c <__assert_fail@plt+0x2458>
   13834:	ldr	r4, [r5]
   13838:	b	136fc <__assert_fail@plt+0x21e8>
   1383c:	ldr	r0, [sp, #8]
   13840:	bl	114fc <close@plt>
   13844:	cmp	r0, #0
   13848:	beq	1385c <__assert_fail@plt+0x2348>
   1384c:	mov	r2, #5
   13850:	ldr	r1, [pc, #280]	; 13970 <__assert_fail@plt+0x245c>
   13854:	ldr	r4, [r5]
   13858:	b	136fc <__assert_fail@plt+0x21e8>
   1385c:	mov	r2, #0
   13860:	ldr	r1, [pc, #268]	; 13974 <__assert_fail@plt+0x2460>
   13864:	mov	r0, #2
   13868:	bl	111c0 <sigprocmask@plt>
   1386c:	mov	r0, r4
   13870:	mov	r7, #0
   13874:	bl	14368 <__assert_fail@plt+0x2e54>
   13878:	ldr	r6, [r6]
   1387c:	mov	r1, r0
   13880:	mov	r0, r4
   13884:	str	r7, [sp]
   13888:	ldr	r2, [pc, #232]	; 13978 <__assert_fail@plt+0x2464>
   1388c:	mov	r3, r6
   13890:	bl	11484 <execl@plt>
   13894:	ldr	r5, [r5]
   13898:	mov	r2, #5
   1389c:	mov	r0, r7
   138a0:	ldr	r1, [pc, #212]	; 1397c <__assert_fail@plt+0x2468>
   138a4:	bl	11238 <dcgettext@plt>
   138a8:	mov	r2, r0
   138ac:	mov	r3, r4
   138b0:	str	r6, [sp]
   138b4:	mov	r1, r5
   138b8:	mov	r0, #1
   138bc:	bl	112ec <error@plt>
   138c0:	ldr	r0, [sp, #8]
   138c4:	bl	114fc <close@plt>
   138c8:	cmp	r0, #0
   138cc:	beq	138e4 <__assert_fail@plt+0x23d0>
   138d0:	bl	113b8 <__errno_location@plt>
   138d4:	mov	r2, #5
   138d8:	ldr	r1, [pc, #160]	; 13980 <__assert_fail@plt+0x246c>
   138dc:	ldr	r4, [r0]
   138e0:	b	136fc <__assert_fail@plt+0x21e8>
   138e4:	ldr	r2, [r6, #156]	; 0x9c
   138e8:	str	r5, [r6, #288]	; 0x120
   138ec:	ldr	r3, [r6, #292]	; 0x124
   138f0:	cmp	r2, r3
   138f4:	bne	1390c <__assert_fail@plt+0x23f8>
   138f8:	mov	r2, #4
   138fc:	ldr	r1, [pc, #128]	; 13984 <__assert_fail@plt+0x2470>
   13900:	ldr	r0, [r6, #152]	; 0x98
   13904:	bl	16790 <__assert_fail@plt+0x527c>
   13908:	str	r0, [r6, #152]	; 0x98
   1390c:	ldrd	r2, [r6, #152]	; 0x98
   13910:	add	r1, r3, #1
   13914:	str	r1, [r6, #156]	; 0x9c
   13918:	ldr	r1, [sp, #12]
   1391c:	str	r1, [r2, r3, lsl #2]
   13920:	ldr	r8, [sp, #12]
   13924:	mov	r0, r8
   13928:	add	sp, sp, #116	; 0x74
   1392c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13930:	andeq	r9, r2, r8, ror r3
   13934:	andeq	r9, r2, ip, ror #6
   13938:	andeq	r7, r1, r6, asr #14
   1393c:	andeq	r7, r1, r8, asr r7
   13940:	andeq	r7, r1, sl, ror #14
   13944:	andeq	r7, r1, sp, lsl #15
   13948:	andeq	r7, r1, r2, lsr #15
   1394c:	andeq	r7, r1, lr, lsr r7
   13950:	andeq	r7, r1, r8, lsr #15
   13954:	andeq	r7, r1, sp, lsr #15
   13958:	ldrdeq	r7, [r1], -r5
   1395c:	andeq	r7, r1, sp, ror #15
   13960:	andeq	r7, r1, r4, ror r8
   13964:	andeq	r7, r1, r3, lsl #16
   13968:	andeq	r7, r1, r6, lsl r8
   1396c:	andeq	r7, r1, sl, lsr #16
   13970:	andeq	r7, r1, ip, lsr r8
   13974:	andeq	r9, r2, r8, lsl r4
   13978:	andeq	r7, r1, pc, asr #16
   1397c:	andeq	r7, r1, r2, asr r8
   13980:	andeq	r7, r1, ip, lsl #17
   13984:	muleq	r2, ip, r4
   13988:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1398c:	add	r8, r0, r1, lsl #4
   13990:	ldr	r3, [r8, #4]
   13994:	cmp	r3, #0
   13998:	movge	r6, #0
   1399c:	bge	13aec <__assert_fail@plt+0x25d8>
   139a0:	cmp	r1, #0
   139a4:	mov	r9, r2
   139a8:	subeq	r4, r2, #1
   139ac:	subne	r4, r1, #1
   139b0:	mov	r7, r1
   139b4:	mov	r5, r0
   139b8:	mov	r6, #0
   139bc:	mvn	sl, #1
   139c0:	ldm	r8, {r0, r3}
   139c4:	cmn	r3, #1
   139c8:	bne	13a14 <__assert_fail@plt+0x2500>
   139cc:	bl	13550 <__assert_fail@plt+0x203c>
   139d0:	cmp	r0, #0
   139d4:	bge	13a94 <__assert_fail@plt+0x2580>
   139d8:	bl	113b8 <__errno_location@plt>
   139dc:	ldr	fp, [r0]
   139e0:	mov	r3, r0
   139e4:	sub	r2, fp, #23
   139e8:	cmp	r2, #1
   139ec:	bls	13a38 <__assert_fail@plt+0x2524>
   139f0:	ldr	r2, [r5, r7, lsl #4]
   139f4:	mov	r1, #3
   139f8:	mov	r0, #0
   139fc:	bl	15cdc <__assert_fail@plt+0x47c8>
   13a00:	ldr	r2, [pc, #240]	; 13af8 <__assert_fail@plt+0x25e4>
   13a04:	mov	r3, r0
   13a08:	mov	r1, fp
   13a0c:	mov	r0, #1
   13a10:	bl	112ec <error@plt>
   13a14:	movw	r1, #3073	; 0xc01
   13a18:	bl	14588 <__assert_fail@plt+0x3074>
   13a1c:	b	139d0 <__assert_fail@plt+0x24bc>
   13a20:	cmp	r4, #0
   13a24:	subne	r4, r4, #1
   13a28:	subeq	r4, r9, #1
   13a2c:	cmp	r4, r7
   13a30:	ldreq	r2, [r5, r4, lsl #4]
   13a34:	beq	139f4 <__assert_fail@plt+0x24e0>
   13a38:	add	r6, r5, r4, lsl #4
   13a3c:	ldr	r2, [r6, #4]
   13a40:	cmp	r2, #0
   13a44:	blt	13a20 <__assert_fail@plt+0x250c>
   13a48:	ldr	r0, [r6, #8]
   13a4c:	str	r3, [sp, #4]
   13a50:	bl	144e0 <__assert_fail@plt+0x2fcc>
   13a54:	cmp	r0, #0
   13a58:	ldr	r3, [sp, #4]
   13a5c:	beq	13a84 <__assert_fail@plt+0x2570>
   13a60:	ldr	r4, [r3]
   13a64:	mov	r1, #3
   13a68:	mov	r0, #0
   13a6c:	ldr	r2, [r6]
   13a70:	bl	15cdc <__assert_fail@plt+0x47c8>
   13a74:	mov	r3, r0
   13a78:	ldr	r2, [pc, #120]	; 13af8 <__assert_fail@plt+0x25e4>
   13a7c:	mov	r1, r4
   13a80:	b	13a0c <__assert_fail@plt+0x24f8>
   13a84:	str	sl, [r6, #4]
   13a88:	str	r0, [r6, #8]
   13a8c:	mov	r6, #1
   13a90:	b	139c0 <__assert_fail@plt+0x24ac>
   13a94:	ldr	r1, [pc, #96]	; 13afc <__assert_fail@plt+0x25e8>
   13a98:	str	r0, [r8, #4]
   13a9c:	bl	11160 <fdopen@plt>
   13aa0:	cmp	r0, #0
   13aa4:	mov	r4, r0
   13aa8:	str	r0, [r8, #8]
   13aac:	bne	13ad8 <__assert_fail@plt+0x25c4>
   13ab0:	bl	113b8 <__errno_location@plt>
   13ab4:	ldr	r6, [r0]
   13ab8:	mov	r1, #3
   13abc:	mov	r0, r4
   13ac0:	ldr	r2, [r5, r7, lsl #4]
   13ac4:	bl	15cdc <__assert_fail@plt+0x47c8>
   13ac8:	mov	r3, r0
   13acc:	ldr	r2, [pc, #36]	; 13af8 <__assert_fail@plt+0x25e4>
   13ad0:	mov	r1, r6
   13ad4:	b	13a0c <__assert_fail@plt+0x24f8>
   13ad8:	ldr	r3, [pc, #32]	; 13b00 <__assert_fail@plt+0x25ec>
   13adc:	ldr	r2, [r3, #288]	; 0x120
   13ae0:	str	r2, [r8, #12]
   13ae4:	mov	r2, #0
   13ae8:	str	r2, [r3, #288]	; 0x120
   13aec:	mov	r0, r6
   13af0:	add	sp, sp, #12
   13af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13af8:	andeq	r7, r1, r3, lsl r9
   13afc:	andeq	r7, r1, r7, lsr #17
   13b00:	andeq	r9, r2, r8, ror r3
   13b04:	push	{r4, r5, r6, r7, lr}
   13b08:	subs	r7, r0, #0
   13b0c:	sub	sp, sp, #36	; 0x24
   13b10:	mov	r4, r1
   13b14:	mov	r5, r2
   13b18:	mov	r6, r3
   13b1c:	beq	13c88 <__assert_fail@plt+0x2774>
   13b20:	bl	144e0 <__assert_fail@plt+0x2fcc>
   13b24:	cmp	r0, #0
   13b28:	beq	13cc8 <__assert_fail@plt+0x27b4>
   13b2c:	bl	113b8 <__errno_location@plt>
   13b30:	ldr	r7, [r0]
   13b34:	mov	r0, r7
   13b38:	bl	132d8 <__assert_fail@plt+0x1dc4>
   13b3c:	cmp	r0, #0
   13b40:	bne	13cc8 <__assert_fail@plt+0x27b4>
   13b44:	mov	r2, r6
   13b48:	mov	r1, #3
   13b4c:	bl	15cdc <__assert_fail@plt+0x47c8>
   13b50:	ldr	r2, [pc, #528]	; 13d68 <__assert_fail@plt+0x2854>
   13b54:	mov	r3, r0
   13b58:	mov	r1, r7
   13b5c:	mov	r0, #1
   13b60:	bl	112ec <error@plt>
   13b64:	add	r1, r1, #1
   13b68:	b	13ce4 <__assert_fail@plt+0x27d0>
   13b6c:	ldr	r5, [sp, #8]
   13b70:	and	r4, r5, #127	; 0x7f
   13b74:	add	r3, r4, #1
   13b78:	sbfx	r3, r3, #1, #7
   13b7c:	cmp	r3, #0
   13b80:	ble	13c0c <__assert_fail@plt+0x26f8>
   13b84:	cmp	r4, #13
   13b88:	beq	13c04 <__assert_fail@plt+0x26f0>
   13b8c:	add	r5, sp, #12
   13b90:	mov	r0, r4
   13b94:	mov	r1, r5
   13b98:	bl	16074 <__assert_fail@plt+0x4b60>
   13b9c:	cmp	r0, #0
   13ba0:	beq	13bbc <__assert_fail@plt+0x26a8>
   13ba4:	ldr	r3, [pc, #448]	; 13d6c <__assert_fail@plt+0x2858>
   13ba8:	mov	r2, #19
   13bac:	mov	r1, #1
   13bb0:	mov	r0, r5
   13bb4:	str	r4, [sp]
   13bb8:	bl	113c4 <__sprintf_chk@plt>
   13bbc:	mov	r2, #5
   13bc0:	ldr	r1, [pc, #424]	; 13d70 <__assert_fail@plt+0x285c>
   13bc4:	mov	r0, #0
   13bc8:	bl	11238 <dcgettext@plt>
   13bcc:	mov	r7, r0
   13bd0:	mov	r2, r6
   13bd4:	mov	r1, #3
   13bd8:	mov	r0, #0
   13bdc:	bl	15cdc <__assert_fail@plt+0x47c8>
   13be0:	ldr	r3, [pc, #396]	; 13d74 <__assert_fail@plt+0x2860>
   13be4:	mov	r2, r7
   13be8:	mov	r1, #0
   13bec:	ldr	r3, [r3]
   13bf0:	str	r5, [sp]
   13bf4:	str	r3, [sp, #4]
   13bf8:	mov	r3, r0
   13bfc:	add	r0, r4, #128	; 0x80
   13c00:	bl	112ec <error@plt>
   13c04:	add	sp, sp, #36	; 0x24
   13c08:	pop	{r4, r5, r6, r7, pc}
   13c0c:	cmp	r4, #0
   13c10:	bne	13c68 <__assert_fail@plt+0x2754>
   13c14:	ubfx	r5, r5, #8, #8
   13c18:	cmp	r5, #0
   13c1c:	beq	13c04 <__assert_fail@plt+0x26f0>
   13c20:	mov	r2, #5
   13c24:	ldr	r1, [pc, #332]	; 13d78 <__assert_fail@plt+0x2864>
   13c28:	mov	r0, r4
   13c2c:	bl	11238 <dcgettext@plt>
   13c30:	mov	r7, r0
   13c34:	mov	r2, r6
   13c38:	mov	r1, #3
   13c3c:	mov	r0, r4
   13c40:	bl	15cdc <__assert_fail@plt+0x47c8>
   13c44:	ldr	r3, [pc, #296]	; 13d74 <__assert_fail@plt+0x2860>
   13c48:	mov	r2, r7
   13c4c:	mov	r1, r4
   13c50:	ldr	r3, [r3]
   13c54:	str	r5, [sp]
   13c58:	str	r3, [sp, #4]
   13c5c:	mov	r3, r0
   13c60:	mov	r0, r5
   13c64:	b	13c00 <__assert_fail@plt+0x26ec>
   13c68:	mov	r2, #5
   13c6c:	ldr	r1, [pc, #264]	; 13d7c <__assert_fail@plt+0x2868>
   13c70:	mov	r0, #0
   13c74:	bl	11238 <dcgettext@plt>
   13c78:	mov	r2, r0
   13c7c:	mov	r1, #0
   13c80:	ldr	r3, [sp, #8]
   13c84:	b	13b5c <__assert_fail@plt+0x2648>
   13c88:	cmp	r1, #0
   13c8c:	blt	13d10 <__assert_fail@plt+0x27fc>
   13c90:	mov	r0, r4
   13c94:	bl	114fc <close@plt>
   13c98:	cmp	r0, #0
   13c9c:	bge	13cd0 <__assert_fail@plt+0x27bc>
   13ca0:	bl	113b8 <__errno_location@plt>
   13ca4:	ldr	r4, [r0]
   13ca8:	mov	r2, r6
   13cac:	mov	r1, #3
   13cb0:	mov	r0, r7
   13cb4:	bl	15cdc <__assert_fail@plt+0x47c8>
   13cb8:	mov	r3, r0
   13cbc:	ldr	r2, [pc, #164]	; 13d68 <__assert_fail@plt+0x2854>
   13cc0:	mov	r1, r4
   13cc4:	b	13b5c <__assert_fail@plt+0x2648>
   13cc8:	cmp	r4, #0
   13ccc:	blt	13d10 <__assert_fail@plt+0x27fc>
   13cd0:	ldr	r2, [pc, #156]	; 13d74 <__assert_fail@plt+0x2860>
   13cd4:	mov	r1, #0
   13cd8:	ldr	ip, [r2, #152]	; 0x98
   13cdc:	ldr	r3, [r2, #156]	; 0x9c
   13ce0:	mov	r0, ip
   13ce4:	cmp	r1, r3
   13ce8:	beq	13d10 <__assert_fail@plt+0x27fc>
   13cec:	mov	lr, r0
   13cf0:	add	r0, r0, #4
   13cf4:	ldr	r7, [lr]
   13cf8:	cmp	r7, r4
   13cfc:	bne	13b64 <__assert_fail@plt+0x2650>
   13d00:	sub	r3, r3, #1
   13d04:	str	r3, [r2, #156]	; 0x9c
   13d08:	ldr	r3, [ip, r3, lsl #2]
   13d0c:	str	r3, [lr]
   13d10:	cmp	r5, #0
   13d14:	ble	13c04 <__assert_fail@plt+0x26f0>
   13d18:	mov	r4, #0
   13d1c:	add	r1, sp, #8
   13d20:	mov	r2, r4
   13d24:	mov	r0, r5
   13d28:	str	r4, [sp, #8]
   13d2c:	bl	112a4 <waitpid@plt>
   13d30:	cmn	r0, #1
   13d34:	bne	13b6c <__assert_fail@plt+0x2658>
   13d38:	bl	113b8 <__errno_location@plt>
   13d3c:	ldr	r5, [r0]
   13d40:	cmp	r5, #10
   13d44:	beq	13b6c <__assert_fail@plt+0x2658>
   13d48:	mov	r2, #5
   13d4c:	ldr	r1, [pc, #44]	; 13d80 <__assert_fail@plt+0x286c>
   13d50:	mov	r0, r4
   13d54:	bl	11238 <dcgettext@plt>
   13d58:	mov	r2, r0
   13d5c:	mov	r1, r5
   13d60:	mov	r0, #1
   13d64:	bl	112ec <error@plt>
   13d68:	andeq	r7, r1, r3, lsl r9
   13d6c:	andeq	r7, r1, r3, asr #17
   13d70:	andeq	r7, r1, r6, asr #17
   13d74:	andeq	r9, r2, r8, ror r3
   13d78:	andeq	r7, r1, pc, ror #17
   13d7c:	andeq	r7, r1, r6, lsl r9
   13d80:	andeq	r7, r1, r9, lsr #17
   13d84:	cmp	r0, #0
   13d88:	push	{r4, r5, r6, r7, r8, lr}
   13d8c:	mov	r6, r1
   13d90:	mov	r5, r2
   13d94:	beq	13e0c <__assert_fail@plt+0x28f8>
   13d98:	orrs	r3, r1, r2
   13d9c:	ldr	r4, [pc, #204]	; 13e70 <__assert_fail@plt+0x295c>
   13da0:	bne	13db0 <__assert_fail@plt+0x289c>
   13da4:	ldrb	r3, [r4, #296]	; 0x128
   13da8:	cmp	r3, #0
   13dac:	bne	13e60 <__assert_fail@plt+0x294c>
   13db0:	ldr	r7, [pc, #188]	; 13e74 <__assert_fail@plt+0x2960>
   13db4:	mov	r0, #0
   13db8:	ldr	r3, [r4, #8]
   13dbc:	ldr	r2, [r4, #288]	; 0x120
   13dc0:	ldr	r1, [r7, #8]
   13dc4:	bl	13b04 <__assert_fail@plt+0x25f0>
   13dc8:	bl	132fc <__assert_fail@plt+0x1de8>
   13dcc:	ldr	r0, [r4, #8]
   13dd0:	bl	13550 <__assert_fail@plt+0x203c>
   13dd4:	cmp	r0, #0
   13dd8:	str	r0, [r7, #8]
   13ddc:	bge	13e0c <__assert_fail@plt+0x28f8>
   13de0:	bl	113b8 <__errno_location@plt>
   13de4:	ldr	r5, [r0]
   13de8:	mov	r1, #3
   13dec:	mov	r0, #0
   13df0:	ldr	r2, [r4, #8]
   13df4:	bl	15cdc <__assert_fail@plt+0x47c8>
   13df8:	ldr	r2, [pc, #120]	; 13e78 <__assert_fail@plt+0x2964>
   13dfc:	mov	r3, r0
   13e00:	mov	r1, r5
   13e04:	mov	r0, #1
   13e08:	bl	112ec <error@plt>
   13e0c:	ldr	r3, [pc, #96]	; 13e74 <__assert_fail@plt+0x2960>
   13e10:	mov	r2, r5
   13e14:	mov	r1, r6
   13e18:	ldr	r0, [r3, #8]
   13e1c:	bl	14754 <__assert_fail@plt+0x3240>
   13e20:	cmp	r0, r5
   13e24:	beq	13e60 <__assert_fail@plt+0x294c>
   13e28:	bl	113b8 <__errno_location@plt>
   13e2c:	ldr	r4, [r0]
   13e30:	mov	r0, r4
   13e34:	bl	132d8 <__assert_fail@plt+0x1dc4>
   13e38:	cmp	r0, #0
   13e3c:	bne	13e68 <__assert_fail@plt+0x2954>
   13e40:	ldr	r3, [pc, #40]	; 13e70 <__assert_fail@plt+0x295c>
   13e44:	mov	r1, #3
   13e48:	ldr	r2, [r3, #8]
   13e4c:	bl	15cdc <__assert_fail@plt+0x47c8>
   13e50:	mov	r3, r0
   13e54:	ldr	r2, [pc, #28]	; 13e78 <__assert_fail@plt+0x2964>
   13e58:	mov	r1, r4
   13e5c:	b	13e04 <__assert_fail@plt+0x28f0>
   13e60:	mov	r0, #1
   13e64:	pop	{r4, r5, r6, r7, r8, pc}
   13e68:	mov	r0, #0
   13e6c:	pop	{r4, r5, r6, r7, r8, pc}
   13e70:	andeq	r9, r2, r8, ror r3
   13e74:	andeq	r9, r2, r8, asr r1
   13e78:	andeq	r7, r1, r3, lsl r9
   13e7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e80:	sub	sp, sp, #44	; 0x2c
   13e84:	mov	r7, #1
   13e88:	mov	r4, r0
   13e8c:	mov	r5, r1
   13e90:	mov	sl, #0
   13e94:	mov	fp, #0
   13e98:	ldr	r8, [sp, #80]	; 0x50
   13e9c:	mov	r6, r7
   13ea0:	strd	r2, [sp, #28]
   13ea4:	ldrd	r2, [sp, #88]	; 0x58
   13ea8:	str	r0, [sp, #12]
   13eac:	str	r1, [sp, #24]
   13eb0:	cmn	r8, #1
   13eb4:	orr	r3, r3, r2
   13eb8:	str	r3, [sp, #36]	; 0x24
   13ebc:	beq	13f6c <__assert_fail@plt+0x2a58>
   13ec0:	ldr	r3, [sp, #32]
   13ec4:	cmp	r8, r3
   13ec8:	movcs	r9, #0
   13ecc:	movcc	r9, #1
   13ed0:	ldr	r3, [sp, #28]
   13ed4:	mov	r1, #0
   13ed8:	mov	r0, r8
   13edc:	cmp	r1, r5
   13ee0:	cmpeq	r8, r4
   13ee4:	strd	r0, [sp, #16]
   13ee8:	bcs	13ffc <__assert_fail@plt+0x2ae8>
   13eec:	cmp	r8, #0
   13ef0:	beq	13f4c <__assert_fail@plt+0x2a38>
   13ef4:	orr	r7, r6, r7
   13ef8:	ands	r7, r7, #255	; 0xff
   13efc:	beq	13f14 <__assert_fail@plt+0x2a00>
   13f00:	mov	r2, r8
   13f04:	mov	r1, r3
   13f08:	mov	r0, r6
   13f0c:	bl	13d84 <__assert_fail@plt+0x2870>
   13f10:	mov	r7, r0
   13f14:	ldrd	r2, [sp, #88]	; 0x58
   13f18:	adds	sl, sl, r6
   13f1c:	eor	r6, r7, #1
   13f20:	adc	fp, fp, #0
   13f24:	cmp	r3, fp
   13f28:	cmpeq	r2, sl
   13f2c:	movne	r6, #0
   13f30:	andeq	r6, r6, #1
   13f34:	cmp	r6, #0
   13f38:	bne	13f64 <__assert_fail@plt+0x2a50>
   13f3c:	ldr	r3, [sp, #16]
   13f40:	subs	r4, r4, r3
   13f44:	ldr	r3, [sp, #20]
   13f48:	sbc	r5, r5, r3
   13f4c:	cmp	r9, #0
   13f50:	beq	13f6c <__assert_fail@plt+0x2a58>
   13f54:	ldrd	r2, [sp, #88]	; 0x58
   13f58:	cmp	fp, r3
   13f5c:	cmpeq	sl, r2
   13f60:	bcc	1406c <__assert_fail@plt+0x2b58>
   13f64:	add	sp, sp, #44	; 0x2c
   13f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f6c:	cmp	r7, #0
   13f70:	bne	13fa8 <__assert_fail@plt+0x2a94>
   13f74:	mov	r8, #1
   13f78:	mov	r2, r4
   13f7c:	mov	r3, r5
   13f80:	mov	r0, r7
   13f84:	str	r8, [sp]
   13f88:	bl	11298 <lseek64@plt>
   13f8c:	mvn	r3, #0
   13f90:	mvn	r2, #0
   13f94:	cmp	r1, r3
   13f98:	cmpeq	r0, r2
   13f9c:	ldrne	r4, [sp, #12]
   13fa0:	movne	r6, r8
   13fa4:	ldrne	r5, [sp, #24]
   13fa8:	mov	r0, #0
   13fac:	ldr	r1, [sp, #28]
   13fb0:	ldr	r2, [sp, #32]
   13fb4:	bl	15e28 <__assert_fail@plt+0x4914>
   13fb8:	cmn	r0, #1
   13fbc:	mov	r8, r0
   13fc0:	clzne	r9, r0
   13fc4:	lsrne	r9, r9, #5
   13fc8:	bne	13ed0 <__assert_fail@plt+0x29bc>
   13fcc:	bl	113b8 <__errno_location@plt>
   13fd0:	ldr	r3, [pc, #176]	; 14088 <__assert_fail@plt+0x2b74>
   13fd4:	mov	r1, #3
   13fd8:	ldr	r4, [r0]
   13fdc:	mov	r0, #0
   13fe0:	ldr	r2, [r3, #300]	; 0x12c
   13fe4:	bl	15cdc <__assert_fail@plt+0x47c8>
   13fe8:	mov	r3, r0
   13fec:	ldr	r2, [pc, #152]	; 1408c <__assert_fail@plt+0x2b78>
   13ff0:	mov	r1, r4
   13ff4:	mov	r0, #1
   13ff8:	bl	112ec <error@plt>
   13ffc:	orr	r7, r6, r7
   14000:	ands	r7, r7, #255	; 0xff
   14004:	beq	14024 <__assert_fail@plt+0x2b10>
   14008:	mov	r1, r3
   1400c:	mov	r2, r4
   14010:	str	r3, [sp, #16]
   14014:	mov	r0, r6
   14018:	bl	13d84 <__assert_fail@plt+0x2870>
   1401c:	ldr	r3, [sp, #16]
   14020:	mov	r7, r0
   14024:	adds	sl, sl, r6
   14028:	ldr	r2, [sp, #36]	; 0x24
   1402c:	adc	fp, fp, #0
   14030:	ldrd	r0, [sp, #88]	; 0x58
   14034:	cmp	fp, r1
   14038:	cmpeq	sl, r0
   1403c:	movcc	r6, #1
   14040:	movcs	r6, #0
   14044:	cmp	r2, #0
   14048:	moveq	r6, #1
   1404c:	orr	r2, r6, r7
   14050:	tst	r2, #255	; 0xff
   14054:	beq	13f64 <__assert_fail@plt+0x2a50>
   14058:	add	r3, r3, r4
   1405c:	sub	r8, r8, r4
   14060:	ldr	r4, [sp, #12]
   14064:	ldr	r5, [sp, #24]
   14068:	b	13ed4 <__assert_fail@plt+0x29c0>
   1406c:	mov	r2, #0
   14070:	mov	r0, #1
   14074:	mov	r1, r2
   14078:	bl	13d84 <__assert_fail@plt+0x2870>
   1407c:	adds	sl, sl, #1
   14080:	adc	fp, fp, #0
   14084:	b	13f54 <__assert_fail@plt+0x2a40>
   14088:	andeq	r9, r2, r8, ror r3
   1408c:	andeq	r7, r1, r3, lsl r9
   14090:	subs	r5, r0, #0
   14094:	push	{r7, lr}
   14098:	sub	sp, sp, #56	; 0x38
   1409c:	ldr	r4, [pc, #608]	; 14304 <__assert_fail@plt+0x2df0>
   140a0:	beq	140d8 <__assert_fail@plt+0x2bc4>
   140a4:	mov	r2, #5
   140a8:	mov	r0, #0
   140ac:	ldr	r3, [pc, #596]	; 14308 <__assert_fail@plt+0x2df4>
   140b0:	ldr	r1, [pc, #596]	; 1430c <__assert_fail@plt+0x2df8>
   140b4:	ldr	r6, [r3]
   140b8:	bl	11238 <dcgettext@plt>
   140bc:	mov	r2, r0
   140c0:	mov	r1, #1
   140c4:	ldr	r3, [r4]
   140c8:	mov	r0, r6
   140cc:	bl	11418 <__fprintf_chk@plt>
   140d0:	mov	r0, r5
   140d4:	bl	11364 <exit@plt>
   140d8:	mov	r2, #5
   140dc:	ldr	r1, [pc, #556]	; 14310 <__assert_fail@plt+0x2dfc>
   140e0:	bl	11238 <dcgettext@plt>
   140e4:	ldr	r2, [r4]
   140e8:	mov	r1, r0
   140ec:	mov	r0, #1
   140f0:	bl	113e8 <__printf_chk@plt>
   140f4:	ldr	r4, [pc, #536]	; 14314 <__assert_fail@plt+0x2e00>
   140f8:	mov	r2, #5
   140fc:	mov	r0, r5
   14100:	ldr	r1, [pc, #528]	; 14318 <__assert_fail@plt+0x2e04>
   14104:	bl	11238 <dcgettext@plt>
   14108:	ldr	r7, [pc, #524]	; 1431c <__assert_fail@plt+0x2e08>
   1410c:	ldr	r1, [r4]
   14110:	bl	11178 <fputs_unlocked@plt>
   14114:	mov	r2, #5
   14118:	ldr	r1, [pc, #512]	; 14320 <__assert_fail@plt+0x2e0c>
   1411c:	mov	r0, r5
   14120:	bl	11238 <dcgettext@plt>
   14124:	ldr	r1, [r4]
   14128:	bl	11178 <fputs_unlocked@plt>
   1412c:	mov	r2, #5
   14130:	ldr	r1, [pc, #492]	; 14324 <__assert_fail@plt+0x2e10>
   14134:	mov	r0, r5
   14138:	bl	11238 <dcgettext@plt>
   1413c:	ldr	r1, [r4]
   14140:	bl	11178 <fputs_unlocked@plt>
   14144:	ldr	r6, [r4]
   14148:	mov	r2, #5
   1414c:	mov	r0, r5
   14150:	ldr	r1, [pc, #464]	; 14328 <__assert_fail@plt+0x2e14>
   14154:	bl	11238 <dcgettext@plt>
   14158:	mov	r2, r0
   1415c:	mov	r3, #2
   14160:	mov	r1, #1
   14164:	mov	r0, r6
   14168:	bl	11418 <__fprintf_chk@plt>
   1416c:	mov	r2, #5
   14170:	ldr	r1, [pc, #436]	; 1432c <__assert_fail@plt+0x2e18>
   14174:	mov	r0, r5
   14178:	bl	11238 <dcgettext@plt>
   1417c:	ldr	r1, [r4]
   14180:	mov	r6, sp
   14184:	bl	11178 <fputs_unlocked@plt>
   14188:	mov	r2, #5
   1418c:	ldr	r1, [pc, #412]	; 14330 <__assert_fail@plt+0x2e1c>
   14190:	mov	r0, r5
   14194:	bl	11238 <dcgettext@plt>
   14198:	ldr	r1, [r4]
   1419c:	bl	11178 <fputs_unlocked@plt>
   141a0:	mov	r2, #5
   141a4:	ldr	r1, [pc, #392]	; 14334 <__assert_fail@plt+0x2e20>
   141a8:	mov	r0, r5
   141ac:	bl	11238 <dcgettext@plt>
   141b0:	ldr	r1, [r4]
   141b4:	bl	11178 <fputs_unlocked@plt>
   141b8:	mov	r2, #5
   141bc:	ldr	r1, [pc, #372]	; 14338 <__assert_fail@plt+0x2e24>
   141c0:	mov	r0, r5
   141c4:	bl	11238 <dcgettext@plt>
   141c8:	ldr	r1, [r4]
   141cc:	bl	11178 <fputs_unlocked@plt>
   141d0:	mov	r2, #5
   141d4:	ldr	r1, [pc, #352]	; 1433c <__assert_fail@plt+0x2e28>
   141d8:	mov	r0, r5
   141dc:	bl	11238 <dcgettext@plt>
   141e0:	ldr	r1, [r4]
   141e4:	bl	11178 <fputs_unlocked@plt>
   141e8:	ldr	lr, [pc, #336]	; 14340 <__assert_fail@plt+0x2e2c>
   141ec:	mov	ip, sp
   141f0:	ldm	lr!, {r0, r1, r2, r3}
   141f4:	stmia	ip!, {r0, r1, r2, r3}
   141f8:	ldm	lr!, {r0, r1, r2, r3}
   141fc:	stmia	ip!, {r0, r1, r2, r3}
   14200:	ldm	lr!, {r0, r1, r2, r3}
   14204:	stmia	ip!, {r0, r1, r2, r3}
   14208:	ldm	lr, {r0, r1}
   1420c:	stm	ip, {r0, r1}
   14210:	ldr	r1, [r6]
   14214:	cmp	r1, #0
   14218:	bne	142bc <__assert_fail@plt+0x2da8>
   1421c:	ldr	r6, [r6, #4]
   14220:	mov	r2, #5
   14224:	mov	r0, #0
   14228:	ldr	r7, [pc, #236]	; 1431c <__assert_fail@plt+0x2e08>
   1422c:	ldr	r1, [pc, #272]	; 14344 <__assert_fail@plt+0x2e30>
   14230:	cmp	r6, #0
   14234:	moveq	r6, r7
   14238:	bl	11238 <dcgettext@plt>
   1423c:	mov	r1, r0
   14240:	ldr	r3, [pc, #256]	; 14348 <__assert_fail@plt+0x2e34>
   14244:	mov	r0, #1
   14248:	ldr	r2, [pc, #252]	; 1434c <__assert_fail@plt+0x2e38>
   1424c:	bl	113e8 <__printf_chk@plt>
   14250:	mov	r1, #0
   14254:	mov	r0, #5
   14258:	bl	11460 <setlocale@plt>
   1425c:	cmp	r0, #0
   14260:	bne	142d4 <__assert_fail@plt+0x2dc0>
   14264:	mov	r2, #5
   14268:	ldr	r1, [pc, #224]	; 14350 <__assert_fail@plt+0x2e3c>
   1426c:	mov	r0, #0
   14270:	bl	11238 <dcgettext@plt>
   14274:	mov	r1, r0
   14278:	ldr	r3, [pc, #156]	; 1431c <__assert_fail@plt+0x2e08>
   1427c:	mov	r0, #1
   14280:	ldr	r2, [pc, #192]	; 14348 <__assert_fail@plt+0x2e34>
   14284:	bl	113e8 <__printf_chk@plt>
   14288:	mov	r2, #5
   1428c:	ldr	r1, [pc, #192]	; 14354 <__assert_fail@plt+0x2e40>
   14290:	mov	r0, #0
   14294:	bl	11238 <dcgettext@plt>
   14298:	ldr	r2, [pc, #184]	; 14358 <__assert_fail@plt+0x2e44>
   1429c:	cmp	r6, r7
   142a0:	mov	r1, r0
   142a4:	mov	r0, #1
   142a8:	ldr	r3, [pc, #172]	; 1435c <__assert_fail@plt+0x2e48>
   142ac:	moveq	r3, r2
   142b0:	mov	r2, r6
   142b4:	bl	113e8 <__printf_chk@plt>
   142b8:	b	140d0 <__assert_fail@plt+0x2bbc>
   142bc:	mov	r0, r7
   142c0:	bl	11190 <strcmp@plt>
   142c4:	cmp	r0, #0
   142c8:	beq	1421c <__assert_fail@plt+0x2d08>
   142cc:	add	r6, r6, #8
   142d0:	b	14210 <__assert_fail@plt+0x2cfc>
   142d4:	mov	r2, #3
   142d8:	ldr	r1, [pc, #128]	; 14360 <__assert_fail@plt+0x2e4c>
   142dc:	bl	114e4 <strncmp@plt>
   142e0:	cmp	r0, #0
   142e4:	beq	14264 <__assert_fail@plt+0x2d50>
   142e8:	mov	r2, #5
   142ec:	ldr	r1, [pc, #112]	; 14364 <__assert_fail@plt+0x2e50>
   142f0:	mov	r0, #0
   142f4:	bl	11238 <dcgettext@plt>
   142f8:	ldr	r1, [r4]
   142fc:	bl	11178 <fputs_unlocked@plt>
   14300:	b	14264 <__assert_fail@plt+0x2d50>
   14304:	andeq	r9, r2, r4, lsr r5
   14308:	andeq	r9, r2, r8, ror #6
   1430c:	andeq	r7, r1, pc, lsr r9
   14310:	andeq	r7, r1, r6, ror #18
   14314:	andeq	r9, r2, ip, ror #6
   14318:	andeq	r7, r1, sp, lsl #19
   1431c:	andeq	r7, r1, r9, lsr r9
   14320:	strdeq	r7, [r1], -r7	; <UNPREDICTABLE>
   14324:	andeq	r7, r1, pc, lsr #20
   14328:	andeq	r7, r1, sl, ror sl
   1432c:			; <UNDEFINED> instruction: 0x00017ebc
   14330:	andeq	r7, r1, sp, lsr #30
   14334:	andeq	r7, r1, sl, asr pc
   14338:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1433c:	andeq	r8, r1, r4, rrx
   14340:	muleq	r1, r0, r5
   14344:			; <UNDEFINED> instruction: 0x000181b8
   14348:	andeq	r8, r1, pc, asr #3
   1434c:	strdeq	r8, [r1], -r7
   14350:	andeq	r8, r1, r0, asr r2
   14354:	andeq	r8, r1, fp, ror #4
   14358:	andeq	r8, r1, r7, lsl r6
   1435c:			; <UNDEFINED> instruction: 0x00017ebb
   14360:	andeq	r8, r1, r5, lsl #4
   14364:	andeq	r8, r1, r9, lsl #4
   14368:	mov	r3, r0
   1436c:	mov	r2, r3
   14370:	mov	r0, r3
   14374:	ldrb	r1, [r2], #1
   14378:	cmp	r1, #47	; 0x2f
   1437c:	beq	14388 <__assert_fail@plt+0x2e74>
   14380:	mov	r2, #0
   14384:	b	143a4 <__assert_fail@plt+0x2e90>
   14388:	mov	r3, r2
   1438c:	b	1436c <__assert_fail@plt+0x2e58>
   14390:	cmp	r1, #47	; 0x2f
   14394:	moveq	r2, #1
   14398:	beq	143a4 <__assert_fail@plt+0x2e90>
   1439c:	cmp	r2, #0
   143a0:	bne	143b8 <__assert_fail@plt+0x2ea4>
   143a4:	mov	ip, r3
   143a8:	ldrb	r1, [r3], #1
   143ac:	cmp	r1, #0
   143b0:	bne	14390 <__assert_fail@plt+0x2e7c>
   143b4:	bx	lr
   143b8:	mov	r0, ip
   143bc:	b	14380 <__assert_fail@plt+0x2e6c>
   143c0:	push	{r4, lr}
   143c4:	mov	r4, r0
   143c8:	bl	11370 <strlen@plt>
   143cc:	cmp	r0, #1
   143d0:	popls	{r4, pc}
   143d4:	sub	r3, r0, #1
   143d8:	ldrb	r2, [r4, r3]
   143dc:	cmp	r2, #47	; 0x2f
   143e0:	popne	{r4, pc}
   143e4:	mov	r0, r3
   143e8:	b	143cc <__assert_fail@plt+0x2eb8>
   143ec:	ldr	r3, [pc, #4]	; 143f8 <__assert_fail@plt+0x2ee4>
   143f0:	str	r0, [r3]
   143f4:	bx	lr
   143f8:	andeq	r9, r2, ip, lsr #10
   143fc:	ldr	r3, [pc, #4]	; 14408 <__assert_fail@plt+0x2ef4>
   14400:	strb	r0, [r3, #4]
   14404:	bx	lr
   14408:	andeq	r9, r2, ip, lsr #10
   1440c:	ldr	r3, [pc, #176]	; 144c4 <__assert_fail@plt+0x2fb0>
   14410:	push	{r0, r1, r4, r5, r6, lr}
   14414:	ldr	r0, [r3]
   14418:	bl	16f90 <__assert_fail@plt+0x5a7c>
   1441c:	cmp	r0, #0
   14420:	beq	144a8 <__assert_fail@plt+0x2f94>
   14424:	ldr	r4, [pc, #156]	; 144c8 <__assert_fail@plt+0x2fb4>
   14428:	bl	113b8 <__errno_location@plt>
   1442c:	mov	r5, r0
   14430:	ldrb	r6, [r4, #4]
   14434:	cmp	r6, #0
   14438:	beq	14448 <__assert_fail@plt+0x2f34>
   1443c:	ldr	r3, [r0]
   14440:	cmp	r3, #32
   14444:	beq	144a8 <__assert_fail@plt+0x2f94>
   14448:	mov	r2, #5
   1444c:	ldr	r1, [pc, #120]	; 144cc <__assert_fail@plt+0x2fb8>
   14450:	mov	r0, #0
   14454:	bl	11238 <dcgettext@plt>
   14458:	mov	r6, r0
   1445c:	ldr	r0, [r4]
   14460:	cmp	r0, #0
   14464:	beq	14494 <__assert_fail@plt+0x2f80>
   14468:	ldr	r4, [r5]
   1446c:	bl	15ccc <__assert_fail@plt+0x47b8>
   14470:	mov	r3, r0
   14474:	ldr	r2, [pc, #84]	; 144d0 <__assert_fail@plt+0x2fbc>
   14478:	mov	r0, #0
   1447c:	str	r6, [sp]
   14480:	mov	r1, r4
   14484:	bl	112ec <error@plt>
   14488:	ldr	r3, [pc, #68]	; 144d4 <__assert_fail@plt+0x2fc0>
   1448c:	ldr	r0, [r3]
   14490:	bl	111e4 <_exit@plt>
   14494:	mov	r3, r6
   14498:	ldr	r2, [pc, #56]	; 144d8 <__assert_fail@plt+0x2fc4>
   1449c:	ldr	r1, [r5]
   144a0:	bl	112ec <error@plt>
   144a4:	b	14488 <__assert_fail@plt+0x2f74>
   144a8:	ldr	r3, [pc, #44]	; 144dc <__assert_fail@plt+0x2fc8>
   144ac:	ldr	r0, [r3]
   144b0:	bl	16f90 <__assert_fail@plt+0x5a7c>
   144b4:	cmp	r0, #0
   144b8:	bne	14488 <__assert_fail@plt+0x2f74>
   144bc:	add	sp, sp, #8
   144c0:	pop	{r4, r5, r6, pc}
   144c4:	andeq	r9, r2, ip, ror #6
   144c8:	andeq	r9, r2, ip, lsr #10
   144cc:	andeq	r8, r1, pc, ror #11
   144d0:	andeq	r8, r1, lr, lsl #10
   144d4:	andeq	r9, r2, ip, ror #2
   144d8:	andeq	r7, r1, r3, lsl r9
   144dc:	andeq	r9, r2, r8, ror #6
   144e0:	push	{r0, r1, r2, r4, r5, lr}
   144e4:	mov	r4, r0
   144e8:	bl	11400 <fileno@plt>
   144ec:	cmp	r0, #0
   144f0:	mov	r0, r4
   144f4:	bge	14504 <__assert_fail@plt+0x2ff0>
   144f8:	add	sp, sp, #12
   144fc:	pop	{r4, r5, lr}
   14500:	b	11430 <fclose@plt>
   14504:	bl	11334 <__freading@plt>
   14508:	cmp	r0, #0
   1450c:	bne	14548 <__assert_fail@plt+0x3034>
   14510:	mov	r0, r4
   14514:	bl	1461c <__assert_fail@plt+0x3108>
   14518:	cmp	r0, #0
   1451c:	bne	1457c <__assert_fail@plt+0x3068>
   14520:	mov	r5, #0
   14524:	mov	r0, r4
   14528:	bl	11430 <fclose@plt>
   1452c:	cmp	r5, #0
   14530:	beq	14540 <__assert_fail@plt+0x302c>
   14534:	bl	113b8 <__errno_location@plt>
   14538:	str	r5, [r0]
   1453c:	mvn	r0, #0
   14540:	add	sp, sp, #12
   14544:	pop	{r4, r5, pc}
   14548:	mov	r0, r4
   1454c:	bl	11400 <fileno@plt>
   14550:	mov	r3, #1
   14554:	mov	r2, #0
   14558:	str	r3, [sp]
   1455c:	mov	r3, #0
   14560:	bl	11298 <lseek64@plt>
   14564:	mvn	r3, #0
   14568:	mvn	r2, #0
   1456c:	cmp	r1, r3
   14570:	cmpeq	r0, r2
   14574:	bne	14510 <__assert_fail@plt+0x2ffc>
   14578:	b	14520 <__assert_fail@plt+0x300c>
   1457c:	bl	113b8 <__errno_location@plt>
   14580:	ldr	r5, [r0]
   14584:	b	14524 <__assert_fail@plt+0x3010>
   14588:	push	{r1, r2, r3}
   1458c:	push	{r0, r1, lr}
   14590:	ldr	r1, [sp, #12]
   14594:	ands	r2, r1, #64	; 0x40
   14598:	ldrne	r2, [sp, #16]
   1459c:	addne	r3, sp, #16
   145a0:	strne	r3, [sp, #4]
   145a4:	bl	112f8 <open64@plt>
   145a8:	bl	16158 <__assert_fail@plt+0x4c44>
   145ac:	add	sp, sp, #8
   145b0:	pop	{lr}		; (ldr lr, [sp], #4)
   145b4:	add	sp, sp, #12
   145b8:	bx	lr
   145bc:	push	{r4, r5, r6, r7, r8, lr}
   145c0:	mov	r5, r0
   145c4:	mov	r0, r1
   145c8:	mov	r1, r2
   145cc:	mov	r2, r3
   145d0:	bl	112f8 <open64@plt>
   145d4:	sub	r3, r5, r0
   145d8:	mov	r4, r0
   145dc:	clz	r3, r3
   145e0:	lsr	r3, r3, #5
   145e4:	orrs	r3, r3, r0, lsr #31
   145e8:	bne	14614 <__assert_fail@plt+0x3100>
   145ec:	mov	r1, r5
   145f0:	bl	11244 <dup2@plt>
   145f4:	mov	r6, r0
   145f8:	bl	113b8 <__errno_location@plt>
   145fc:	mov	r5, r0
   14600:	mov	r0, r4
   14604:	ldr	r7, [r5]
   14608:	mov	r4, r6
   1460c:	bl	114fc <close@plt>
   14610:	str	r7, [r5]
   14614:	mov	r0, r4
   14618:	pop	{r4, r5, r6, r7, r8, pc}
   1461c:	push	{r0, r1, r4, lr}
   14620:	subs	r4, r0, #0
   14624:	bne	14638 <__assert_fail@plt+0x3124>
   14628:	mov	r0, r4
   1462c:	add	sp, sp, #8
   14630:	pop	{r4, lr}
   14634:	b	111b4 <fflush@plt>
   14638:	bl	11334 <__freading@plt>
   1463c:	cmp	r0, #0
   14640:	beq	14628 <__assert_fail@plt+0x3114>
   14644:	ldr	r3, [r4]
   14648:	tst	r3, #256	; 0x100
   1464c:	beq	14628 <__assert_fail@plt+0x3114>
   14650:	mov	r3, #1
   14654:	mov	r2, #0
   14658:	mov	r0, r4
   1465c:	str	r3, [sp]
   14660:	mov	r3, #0
   14664:	bl	146bc <__assert_fail@plt+0x31a8>
   14668:	b	14628 <__assert_fail@plt+0x3114>
   1466c:	push	{r0, r1, r2, r4, r5, lr}
   14670:	mov	r5, r0
   14674:	bl	113b8 <__errno_location@plt>
   14678:	mov	r4, r0
   1467c:	mov	r0, r5
   14680:	ldr	r3, [r4]
   14684:	str	r3, [sp]
   14688:	str	r3, [sp, #4]
   1468c:	mov	r3, #0
   14690:	str	r3, [r4]
   14694:	bl	111d8 <free@plt>
   14698:	ldr	r3, [r4]
   1469c:	add	r2, sp, #8
   146a0:	clz	r3, r3
   146a4:	lsr	r3, r3, #5
   146a8:	add	r3, r2, r3, lsl #2
   146ac:	ldr	r3, [r3, #-8]
   146b0:	str	r3, [r4]
   146b4:	add	sp, sp, #12
   146b8:	pop	{r4, r5, pc}
   146bc:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   146c0:	mov	r4, r0
   146c4:	ldmib	r0, {ip, lr}
   146c8:	ldr	r8, [sp, #32]
   146cc:	cmp	lr, ip
   146d0:	bne	14740 <__assert_fail@plt+0x322c>
   146d4:	ldr	ip, [r0, #16]
   146d8:	ldr	lr, [r0, #20]
   146dc:	cmp	lr, ip
   146e0:	bne	14740 <__assert_fail@plt+0x322c>
   146e4:	ldr	r5, [r0, #36]	; 0x24
   146e8:	cmp	r5, #0
   146ec:	bne	14740 <__assert_fail@plt+0x322c>
   146f0:	mov	r6, r2
   146f4:	mov	r7, r3
   146f8:	bl	11400 <fileno@plt>
   146fc:	mov	r2, r6
   14700:	mov	r3, r7
   14704:	str	r8, [sp]
   14708:	bl	11298 <lseek64@plt>
   1470c:	mvn	r3, #0
   14710:	mvn	r2, #0
   14714:	cmp	r1, r3
   14718:	cmpeq	r0, r2
   1471c:	mvneq	r0, #0
   14720:	beq	14738 <__assert_fail@plt+0x3224>
   14724:	ldr	r3, [r4]
   14728:	strd	r0, [r4, #80]	; 0x50
   1472c:	mov	r0, r5
   14730:	bic	r3, r3, #16
   14734:	str	r3, [r4]
   14738:	add	sp, sp, #8
   1473c:	pop	{r4, r5, r6, r7, r8, pc}
   14740:	mov	r0, r4
   14744:	str	r8, [sp, #32]
   14748:	add	sp, sp, #8
   1474c:	pop	{r4, r5, r6, r7, r8, lr}
   14750:	b	11448 <fseeko64@plt>
   14754:	push	{r4, r5, r6, r7, r8, lr}
   14758:	mov	r7, r0
   1475c:	mov	r6, r1
   14760:	mov	r4, r2
   14764:	mov	r5, #0
   14768:	cmp	r4, #0
   1476c:	beq	1479c <__assert_fail@plt+0x3288>
   14770:	mov	r2, r4
   14774:	mov	r1, r6
   14778:	mov	r0, r7
   1477c:	bl	15e94 <__assert_fail@plt+0x4980>
   14780:	cmn	r0, #1
   14784:	beq	1479c <__assert_fail@plt+0x3288>
   14788:	cmp	r0, #0
   1478c:	bne	147a4 <__assert_fail@plt+0x3290>
   14790:	bl	113b8 <__errno_location@plt>
   14794:	mov	r3, #28
   14798:	str	r3, [r0]
   1479c:	mov	r0, r5
   147a0:	pop	{r4, r5, r6, r7, r8, pc}
   147a4:	add	r5, r5, r0
   147a8:	add	r6, r6, r0
   147ac:	sub	r4, r4, r0
   147b0:	b	14768 <__assert_fail@plt+0x3254>
   147b4:	push	{r4, r5, r6, lr}
   147b8:	mov	r3, #0
   147bc:	mov	r4, r0
   147c0:	mov	r5, r1
   147c4:	add	r6, r2, #20
   147c8:	strb	r3, [r2, #20]
   147cc:	mov	r2, #10
   147d0:	mov	r3, #0
   147d4:	mov	r0, r4
   147d8:	mov	r1, r5
   147dc:	bl	17374 <__assert_fail@plt+0x5e60>
   147e0:	add	r2, r2, #48	; 0x30
   147e4:	mov	r3, #0
   147e8:	mov	r0, r4
   147ec:	mov	r1, r5
   147f0:	strb	r2, [r6, #-1]!
   147f4:	mov	r2, #10
   147f8:	bl	17374 <__assert_fail@plt+0x5e60>
   147fc:	cmp	r5, #0
   14800:	cmpeq	r4, #9
   14804:	bhi	14810 <__assert_fail@plt+0x32fc>
   14808:	mov	r0, r6
   1480c:	pop	{r4, r5, r6, pc}
   14810:	mov	r4, r0
   14814:	mov	r5, r1
   14818:	b	147cc <__assert_fail@plt+0x32b8>
   1481c:	push	{r4, r5, r6, lr}
   14820:	subs	r4, r0, #0
   14824:	bne	1483c <__assert_fail@plt+0x3328>
   14828:	ldr	r3, [pc, #124]	; 148ac <__assert_fail@plt+0x3398>
   1482c:	ldr	r0, [pc, #124]	; 148b0 <__assert_fail@plt+0x339c>
   14830:	ldr	r1, [r3]
   14834:	bl	114d8 <fputs@plt>
   14838:	bl	114f0 <abort@plt>
   1483c:	mov	r1, #47	; 0x2f
   14840:	bl	11490 <strrchr@plt>
   14844:	subs	r6, r0, #0
   14848:	beq	14898 <__assert_fail@plt+0x3384>
   1484c:	add	r5, r6, #1
   14850:	sub	r3, r5, r4
   14854:	cmp	r3, #6
   14858:	ble	14898 <__assert_fail@plt+0x3384>
   1485c:	mov	r2, #7
   14860:	ldr	r1, [pc, #76]	; 148b4 <__assert_fail@plt+0x33a0>
   14864:	sub	r0, r6, #6
   14868:	bl	114e4 <strncmp@plt>
   1486c:	cmp	r0, #0
   14870:	bne	14898 <__assert_fail@plt+0x3384>
   14874:	mov	r2, #3
   14878:	ldr	r1, [pc, #56]	; 148b8 <__assert_fail@plt+0x33a4>
   1487c:	mov	r0, r5
   14880:	bl	114e4 <strncmp@plt>
   14884:	cmp	r0, #0
   14888:	ldreq	r3, [pc, #44]	; 148bc <__assert_fail@plt+0x33a8>
   1488c:	addeq	r4, r6, #4
   14890:	movne	r4, r5
   14894:	streq	r4, [r3]
   14898:	ldr	r3, [pc, #32]	; 148c0 <__assert_fail@plt+0x33ac>
   1489c:	str	r4, [r3]
   148a0:	ldr	r3, [pc, #28]	; 148c4 <__assert_fail@plt+0x33b0>
   148a4:	str	r4, [r3]
   148a8:	pop	{r4, r5, r6, pc}
   148ac:	andeq	r9, r2, r8, ror #6
   148b0:	andeq	r8, r1, r2, lsl r7
   148b4:	andeq	r8, r1, sl, asr #14
   148b8:	andeq	r8, r1, r2, asr r7
   148bc:	andeq	r9, r2, r8, asr r3
   148c0:	andeq	r9, r2, r4, lsr r5
   148c4:	andeq	r9, r2, ip, asr r3
   148c8:	push	{r4, lr}
   148cc:	mov	r2, #48	; 0x30
   148d0:	mov	r4, r1
   148d4:	mov	r1, #0
   148d8:	bl	113dc <memset@plt>
   148dc:	cmp	r4, #10
   148e0:	bne	148e8 <__assert_fail@plt+0x33d4>
   148e4:	bl	114f0 <abort@plt>
   148e8:	str	r4, [r0]
   148ec:	pop	{r4, pc}
   148f0:	push	{r4, r5, r6, lr}
   148f4:	mov	r2, #5
   148f8:	mov	r6, r0
   148fc:	mov	r5, r1
   14900:	mov	r1, r0
   14904:	mov	r0, #0
   14908:	bl	11238 <dcgettext@plt>
   1490c:	cmp	r6, r0
   14910:	mov	r4, r0
   14914:	bne	14984 <__assert_fail@plt+0x3470>
   14918:	bl	17028 <__assert_fail@plt+0x5b14>
   1491c:	ldrb	r3, [r0]
   14920:	bic	r3, r3, #32
   14924:	cmp	r3, #85	; 0x55
   14928:	bne	1498c <__assert_fail@plt+0x3478>
   1492c:	ldrb	r3, [r0, #1]
   14930:	bic	r3, r3, #32
   14934:	cmp	r3, #84	; 0x54
   14938:	bne	149fc <__assert_fail@plt+0x34e8>
   1493c:	ldrb	r3, [r0, #2]
   14940:	bic	r3, r3, #32
   14944:	cmp	r3, #70	; 0x46
   14948:	bne	149fc <__assert_fail@plt+0x34e8>
   1494c:	ldrb	r3, [r0, #3]
   14950:	cmp	r3, #45	; 0x2d
   14954:	bne	149fc <__assert_fail@plt+0x34e8>
   14958:	ldrb	r3, [r0, #4]
   1495c:	cmp	r3, #56	; 0x38
   14960:	bne	149fc <__assert_fail@plt+0x34e8>
   14964:	ldrb	r3, [r0, #5]
   14968:	cmp	r3, #0
   1496c:	bne	149fc <__assert_fail@plt+0x34e8>
   14970:	ldrb	r2, [r4]
   14974:	ldr	r3, [pc, #144]	; 14a0c <__assert_fail@plt+0x34f8>
   14978:	ldr	r4, [pc, #144]	; 14a10 <__assert_fail@plt+0x34fc>
   1497c:	cmp	r2, #96	; 0x60
   14980:	movne	r4, r3
   14984:	mov	r0, r4
   14988:	pop	{r4, r5, r6, pc}
   1498c:	cmp	r3, #71	; 0x47
   14990:	bne	149fc <__assert_fail@plt+0x34e8>
   14994:	ldrb	r3, [r0, #1]
   14998:	bic	r3, r3, #32
   1499c:	cmp	r3, #66	; 0x42
   149a0:	bne	149fc <__assert_fail@plt+0x34e8>
   149a4:	ldrb	r3, [r0, #2]
   149a8:	cmp	r3, #49	; 0x31
   149ac:	bne	149fc <__assert_fail@plt+0x34e8>
   149b0:	ldrb	r3, [r0, #3]
   149b4:	cmp	r3, #56	; 0x38
   149b8:	bne	149fc <__assert_fail@plt+0x34e8>
   149bc:	ldrb	r3, [r0, #4]
   149c0:	cmp	r3, #48	; 0x30
   149c4:	bne	149fc <__assert_fail@plt+0x34e8>
   149c8:	ldrb	r3, [r0, #5]
   149cc:	cmp	r3, #51	; 0x33
   149d0:	bne	149fc <__assert_fail@plt+0x34e8>
   149d4:	ldrb	r3, [r0, #6]
   149d8:	cmp	r3, #48	; 0x30
   149dc:	bne	149fc <__assert_fail@plt+0x34e8>
   149e0:	ldrb	r3, [r0, #7]
   149e4:	cmp	r3, #0
   149e8:	bne	149fc <__assert_fail@plt+0x34e8>
   149ec:	ldrb	r2, [r4]
   149f0:	ldr	r3, [pc, #28]	; 14a14 <__assert_fail@plt+0x3500>
   149f4:	ldr	r4, [pc, #28]	; 14a18 <__assert_fail@plt+0x3504>
   149f8:	b	1497c <__assert_fail@plt+0x3468>
   149fc:	ldr	r4, [pc, #24]	; 14a1c <__assert_fail@plt+0x3508>
   14a00:	cmp	r5, #9
   14a04:	ldr	r3, [pc, #20]	; 14a20 <__assert_fail@plt+0x350c>
   14a08:	b	14980 <__assert_fail@plt+0x346c>
   14a0c:	andeq	r8, r1, ip, lsr #15
   14a10:			; <UNDEFINED> instruction: 0x000187b7
   14a14:			; <UNDEFINED> instruction: 0x000187b0
   14a18:			; <UNDEFINED> instruction: 0x000187b3
   14a1c:	andeq	r7, r1, r2, ror r8
   14a20:			; <UNDEFINED> instruction: 0x000187bb
   14a24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a28:	sub	sp, sp, #108	; 0x6c
   14a2c:	mov	r8, r0
   14a30:	mov	r5, r1
   14a34:	mov	r6, #0
   14a38:	str	r3, [sp, #40]	; 0x28
   14a3c:	str	r2, [sp, #48]	; 0x30
   14a40:	ldr	sl, [sp, #144]	; 0x90
   14a44:	bl	112b0 <__ctype_get_mb_cur_max@plt>
   14a48:	ldr	r3, [sp, #148]	; 0x94
   14a4c:	str	r6, [sp, #24]
   14a50:	str	r6, [sp, #32]
   14a54:	str	r6, [sp, #44]	; 0x2c
   14a58:	str	r6, [sp, #52]	; 0x34
   14a5c:	ubfx	r7, r3, #1, #1
   14a60:	mov	r3, #1
   14a64:	str	r6, [sp, #60]	; 0x3c
   14a68:	str	r3, [sp, #72]	; 0x48
   14a6c:	str	r0, [sp, #76]	; 0x4c
   14a70:	cmp	sl, #10
   14a74:	ldrls	pc, [pc, sl, lsl #2]
   14a78:	b	14cbc <__assert_fail@plt+0x37a8>
   14a7c:	andeq	r4, r1, r8, lsr #21
   14a80:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a84:	andeq	r4, r1, r8, asr ip
   14a88:	andeq	r4, r1, r0, ror ip
   14a8c:	andeq	r4, r1, r0, asr #24
   14a90:	muleq	r1, r8, fp
   14a94:	andeq	r4, r1, r8, ror fp
   14a98:	andeq	r4, r1, r0, asr #25
   14a9c:	andeq	r4, r1, r8, asr #23
   14aa0:	andeq	r4, r1, r8, asr #23
   14aa4:	andeq	r4, r1, r8, asr #23
   14aa8:	mov	r4, sl
   14aac:	mov	r7, #0
   14ab0:	mov	r9, r5
   14ab4:	mov	r3, #0
   14ab8:	str	r6, [sp, #68]	; 0x44
   14abc:	str	r3, [sp, #28]
   14ac0:	ldr	r3, [sp, #40]	; 0x28
   14ac4:	cmn	r3, #1
   14ac8:	bne	15668 <__assert_fail@plt+0x4154>
   14acc:	ldr	r2, [sp, #28]
   14ad0:	ldr	r3, [sp, #48]	; 0x30
   14ad4:	ldrb	r3, [r3, r2]
   14ad8:	adds	r3, r3, #0
   14adc:	movne	r3, #1
   14ae0:	str	r3, [sp, #36]	; 0x24
   14ae4:	ldr	r3, [sp, #36]	; 0x24
   14ae8:	cmp	r3, #0
   14aec:	bne	14cf8 <__assert_fail@plt+0x37e4>
   14af0:	sub	r3, sl, #2
   14af4:	cmp	r4, #0
   14af8:	clz	r3, r3
   14afc:	movne	r2, #0
   14b00:	lsr	r3, r3, #5
   14b04:	andeq	r2, r3, r7
   14b08:	cmp	r2, #0
   14b0c:	bne	14ebc <__assert_fail@plt+0x39a8>
   14b10:	eor	r7, r7, #1
   14b14:	ands	r3, r3, r7
   14b18:	beq	156e0 <__assert_fail@plt+0x41cc>
   14b1c:	ldr	r2, [sp, #68]	; 0x44
   14b20:	cmp	r2, #0
   14b24:	beq	156a8 <__assert_fail@plt+0x4194>
   14b28:	ldr	r3, [sp, #72]	; 0x48
   14b2c:	cmp	r3, #0
   14b30:	beq	1567c <__assert_fail@plt+0x4168>
   14b34:	ldr	r2, [sp, #48]	; 0x30
   14b38:	ldr	r3, [sp, #160]	; 0xa0
   14b3c:	ldr	r1, [sp, #60]	; 0x3c
   14b40:	str	r3, [sp, #16]
   14b44:	ldr	r3, [sp, #156]	; 0x9c
   14b48:	str	r3, [sp, #12]
   14b4c:	ldr	r3, [sp, #152]	; 0x98
   14b50:	str	r3, [sp, #8]
   14b54:	ldr	r3, [sp, #148]	; 0x94
   14b58:	str	r3, [sp, #4]
   14b5c:	mov	r3, #5
   14b60:	str	r3, [sp]
   14b64:	ldr	r3, [sp, #40]	; 0x28
   14b68:	mov	r0, r8
   14b6c:	bl	14a24 <__assert_fail@plt+0x3510>
   14b70:	mov	r4, r0
   14b74:	b	156d4 <__assert_fail@plt+0x41c0>
   14b78:	ldr	r3, [pc, #2948]	; 15704 <__assert_fail@plt+0x41f0>
   14b7c:	mov	r7, #1
   14b80:	mov	r4, #0
   14b84:	mov	sl, #5
   14b88:	str	r7, [sp, #24]
   14b8c:	str	r7, [sp, #32]
   14b90:	str	r3, [sp, #44]	; 0x2c
   14b94:	b	14ab0 <__assert_fail@plt+0x359c>
   14b98:	cmp	r7, #0
   14b9c:	bne	14ce0 <__assert_fail@plt+0x37cc>
   14ba0:	cmp	r5, #0
   14ba4:	mov	r4, #1
   14ba8:	movne	r3, #34	; 0x22
   14bac:	strbne	r3, [r8]
   14bb0:	mov	r3, #1
   14bb4:	str	r3, [sp, #24]
   14bb8:	str	r3, [sp, #32]
   14bbc:	ldr	r3, [pc, #2880]	; 15704 <__assert_fail@plt+0x41f0>
   14bc0:	str	r3, [sp, #44]	; 0x2c
   14bc4:	b	14ab0 <__assert_fail@plt+0x359c>
   14bc8:	cmp	sl, #10
   14bcc:	beq	14bf0 <__assert_fail@plt+0x36dc>
   14bd0:	mov	r1, sl
   14bd4:	ldr	r0, [pc, #2860]	; 15708 <__assert_fail@plt+0x41f4>
   14bd8:	bl	148f0 <__assert_fail@plt+0x33dc>
   14bdc:	mov	r1, sl
   14be0:	str	r0, [sp, #156]	; 0x9c
   14be4:	ldr	r0, [pc, #2848]	; 1570c <__assert_fail@plt+0x41f8>
   14be8:	bl	148f0 <__assert_fail@plt+0x33dc>
   14bec:	str	r0, [sp, #160]	; 0xa0
   14bf0:	cmp	r7, #0
   14bf4:	moveq	r4, r7
   14bf8:	beq	14c10 <__assert_fail@plt+0x36fc>
   14bfc:	mov	r4, #0
   14c00:	b	14c20 <__assert_fail@plt+0x370c>
   14c04:	cmp	r5, r4
   14c08:	strbhi	r3, [r8, r4]
   14c0c:	add	r4, r4, #1
   14c10:	ldr	r3, [sp, #156]	; 0x9c
   14c14:	ldrb	r3, [r3, r4]
   14c18:	cmp	r3, #0
   14c1c:	bne	14c04 <__assert_fail@plt+0x36f0>
   14c20:	ldr	r0, [sp, #160]	; 0xa0
   14c24:	bl	11370 <strlen@plt>
   14c28:	ldr	r3, [sp, #160]	; 0xa0
   14c2c:	str	r0, [sp, #32]
   14c30:	str	r3, [sp, #44]	; 0x2c
   14c34:	mov	r3, #1
   14c38:	str	r3, [sp, #24]
   14c3c:	b	14ab0 <__assert_fail@plt+0x359c>
   14c40:	mov	r3, #1
   14c44:	cmp	r7, #0
   14c48:	streq	r3, [sp, #24]
   14c4c:	beq	14c90 <__assert_fail@plt+0x377c>
   14c50:	str	r3, [sp, #32]
   14c54:	b	14c7c <__assert_fail@plt+0x3768>
   14c58:	cmp	r7, #0
   14c5c:	beq	14c90 <__assert_fail@plt+0x377c>
   14c60:	mov	r3, #1
   14c64:	str	r3, [sp, #32]
   14c68:	ldr	r3, [pc, #2716]	; 1570c <__assert_fail@plt+0x41f8>
   14c6c:	b	14cf0 <__assert_fail@plt+0x37dc>
   14c70:	mov	r7, #1
   14c74:	str	r7, [sp, #24]
   14c78:	str	r7, [sp, #32]
   14c7c:	ldr	r3, [pc, #2696]	; 1570c <__assert_fail@plt+0x41f8>
   14c80:	mov	r4, #0
   14c84:	str	r3, [sp, #44]	; 0x2c
   14c88:	mov	sl, #2
   14c8c:	b	14ab0 <__assert_fail@plt+0x359c>
   14c90:	cmp	r5, #0
   14c94:	movne	r3, #39	; 0x27
   14c98:	movne	r7, #0
   14c9c:	strbne	r3, [r8]
   14ca0:	moveq	r7, r5
   14ca4:	mov	r3, #1
   14ca8:	mov	r4, #1
   14cac:	str	r3, [sp, #32]
   14cb0:	ldr	r3, [pc, #2644]	; 1570c <__assert_fail@plt+0x41f8>
   14cb4:	str	r3, [sp, #44]	; 0x2c
   14cb8:	b	14c88 <__assert_fail@plt+0x3774>
   14cbc:	bl	114f0 <abort@plt>
   14cc0:	mov	r3, #1
   14cc4:	mov	r7, #0
   14cc8:	str	r3, [sp, #24]
   14ccc:	mov	r4, #0
   14cd0:	b	14ab0 <__assert_fail@plt+0x359c>
   14cd4:	mov	r7, #1
   14cd8:	str	sl, [sp, #32]
   14cdc:	b	14c7c <__assert_fail@plt+0x3768>
   14ce0:	mov	r3, #1
   14ce4:	str	r7, [sp, #24]
   14ce8:	str	r3, [sp, #32]
   14cec:	ldr	r3, [pc, #2576]	; 15704 <__assert_fail@plt+0x41f0>
   14cf0:	str	r3, [sp, #44]	; 0x2c
   14cf4:	b	14ccc <__assert_fail@plt+0x37b8>
   14cf8:	ldr	fp, [sp, #24]
   14cfc:	ldr	r3, [sp, #32]
   14d00:	cmp	sl, #2
   14d04:	moveq	fp, #0
   14d08:	andne	fp, fp, #1
   14d0c:	adds	r5, r3, #0
   14d10:	movne	r5, #1
   14d14:	ands	r3, fp, r5
   14d18:	str	r3, [sp, #64]	; 0x40
   14d1c:	beq	14dec <__assert_fail@plt+0x38d8>
   14d20:	ldr	r3, [sp, #28]
   14d24:	ldr	r2, [sp, #32]
   14d28:	cmp	r2, #1
   14d2c:	add	r6, r3, r2
   14d30:	mov	r3, r2
   14d34:	ldr	r2, [sp, #40]	; 0x28
   14d38:	movls	r3, #0
   14d3c:	movhi	r3, #1
   14d40:	cmn	r2, #1
   14d44:	movne	r3, #0
   14d48:	cmp	r3, #0
   14d4c:	beq	14d5c <__assert_fail@plt+0x3848>
   14d50:	ldr	r0, [sp, #48]	; 0x30
   14d54:	bl	11370 <strlen@plt>
   14d58:	str	r0, [sp, #40]	; 0x28
   14d5c:	ldr	r3, [sp, #40]	; 0x28
   14d60:	cmp	r6, r3
   14d64:	bhi	14de4 <__assert_fail@plt+0x38d0>
   14d68:	ldr	r0, [sp, #28]
   14d6c:	ldr	r2, [sp, #32]
   14d70:	ldr	r3, [sp, #48]	; 0x30
   14d74:	ldr	r1, [sp, #44]	; 0x2c
   14d78:	add	r0, r3, r0
   14d7c:	bl	11220 <memcmp@plt>
   14d80:	cmp	r0, #0
   14d84:	bne	14de4 <__assert_fail@plt+0x38d0>
   14d88:	cmp	r7, #0
   14d8c:	beq	14dec <__assert_fail@plt+0x38d8>
   14d90:	str	r7, [sp, #24]
   14d94:	ldr	r3, [sp, #24]
   14d98:	mov	r1, r9
   14d9c:	ldr	r2, [sp, #48]	; 0x30
   14da0:	cmp	sl, #2
   14da4:	movne	r3, #0
   14da8:	andeq	r3, r3, #1
   14dac:	cmp	r3, #0
   14db0:	ldr	r3, [sp, #160]	; 0xa0
   14db4:	movne	sl, #4
   14db8:	str	sl, [sp]
   14dbc:	str	r3, [sp, #16]
   14dc0:	ldr	r3, [sp, #156]	; 0x9c
   14dc4:	str	r3, [sp, #12]
   14dc8:	mov	r3, #0
   14dcc:	str	r3, [sp, #8]
   14dd0:	ldr	r3, [sp, #148]	; 0x94
   14dd4:	bic	r3, r3, #2
   14dd8:	str	r3, [sp, #4]
   14ddc:	ldr	r3, [sp, #40]	; 0x28
   14de0:	b	14b68 <__assert_fail@plt+0x3654>
   14de4:	mov	r3, #0
   14de8:	str	r3, [sp, #64]	; 0x40
   14dec:	ldr	r2, [sp, #28]
   14df0:	ldr	r3, [sp, #48]	; 0x30
   14df4:	add	r3, r3, r2
   14df8:	str	r3, [sp, #80]	; 0x50
   14dfc:	ldr	r3, [sp, #48]	; 0x30
   14e00:	ldrb	r6, [r3, r2]
   14e04:	cmp	r6, #58	; 0x3a
   14e08:	bhi	14f6c <__assert_fail@plt+0x3a58>
   14e0c:	cmp	r6, #43	; 0x2b
   14e10:	bcs	1512c <__assert_fail@plt+0x3c18>
   14e14:	cmp	r6, #32
   14e18:	beq	15180 <__assert_fail@plt+0x3c6c>
   14e1c:	bhi	14ec4 <__assert_fail@plt+0x39b0>
   14e20:	cmp	r6, #9
   14e24:	beq	15328 <__assert_fail@plt+0x3e14>
   14e28:	bhi	14e88 <__assert_fail@plt+0x3974>
   14e2c:	cmp	r6, #7
   14e30:	beq	15338 <__assert_fail@plt+0x3e24>
   14e34:	bhi	15354 <__assert_fail@plt+0x3e40>
   14e38:	cmp	r6, #0
   14e3c:	beq	1519c <__assert_fail@plt+0x3c88>
   14e40:	ldr	r3, [sp, #76]	; 0x4c
   14e44:	cmp	r3, #1
   14e48:	bne	153a0 <__assert_fail@plt+0x3e8c>
   14e4c:	bl	11358 <__ctype_b_loc@plt>
   14e50:	ldr	r2, [r0]
   14e54:	sxth	r3, r6
   14e58:	lsl	r3, r3, #1
   14e5c:	ldrh	r5, [r2, r3]
   14e60:	ldr	r3, [sp, #76]	; 0x4c
   14e64:	ubfx	r5, r5, #14, #1
   14e68:	str	r3, [sp, #56]	; 0x38
   14e6c:	ldr	r3, [sp, #24]
   14e70:	eor	fp, r5, #1
   14e74:	and	fp, fp, r3
   14e78:	ands	fp, fp, #255	; 0xff
   14e7c:	beq	1505c <__assert_fail@plt+0x3b48>
   14e80:	mov	r5, #0
   14e84:	b	1544c <__assert_fail@plt+0x3f38>
   14e88:	cmp	r6, #11
   14e8c:	beq	1535c <__assert_fail@plt+0x3e48>
   14e90:	bcc	15330 <__assert_fail@plt+0x3e1c>
   14e94:	cmp	r6, #12
   14e98:	beq	15364 <__assert_fail@plt+0x3e50>
   14e9c:	cmp	r6, #13
   14ea0:	moveq	r3, #114	; 0x72
   14ea4:	bne	14e40 <__assert_fail@plt+0x392c>
   14ea8:	cmp	sl, #2
   14eac:	movne	r2, #0
   14eb0:	andeq	r2, r7, #1
   14eb4:	cmp	r2, #0
   14eb8:	beq	1533c <__assert_fail@plt+0x3e28>
   14ebc:	mov	sl, #2
   14ec0:	b	14d94 <__assert_fail@plt+0x3880>
   14ec4:	cmp	r6, #37	; 0x25
   14ec8:	beq	1512c <__assert_fail@plt+0x3c18>
   14ecc:	bhi	14ee0 <__assert_fail@plt+0x39cc>
   14ed0:	cmp	r6, #35	; 0x23
   14ed4:	beq	15174 <__assert_fail@plt+0x3c60>
   14ed8:	mov	r5, #0
   14edc:	b	15184 <__assert_fail@plt+0x3c70>
   14ee0:	cmp	r6, #39	; 0x27
   14ee4:	bne	14ed8 <__assert_fail@plt+0x39c4>
   14ee8:	cmp	sl, #2
   14eec:	ldrne	r5, [sp, #36]	; 0x24
   14ef0:	movne	r3, r5
   14ef4:	strne	r3, [sp, #68]	; 0x44
   14ef8:	bne	15278 <__assert_fail@plt+0x3d64>
   14efc:	cmp	r7, #0
   14f00:	bne	14d94 <__assert_fail@plt+0x3880>
   14f04:	ldr	r3, [sp, #60]	; 0x3c
   14f08:	cmp	r9, #0
   14f0c:	clz	r3, r3
   14f10:	lsr	r3, r3, #5
   14f14:	moveq	r3, #0
   14f18:	cmp	r3, #0
   14f1c:	strne	r9, [sp, #60]	; 0x3c
   14f20:	movne	r9, #0
   14f24:	bne	14f34 <__assert_fail@plt+0x3a20>
   14f28:	cmp	r9, r4
   14f2c:	movhi	r3, #39	; 0x27
   14f30:	strbhi	r3, [r8, r4]
   14f34:	add	r3, r4, #1
   14f38:	ldr	r5, [sp, #36]	; 0x24
   14f3c:	mov	fp, #0
   14f40:	cmp	r3, r9
   14f44:	movcc	r2, #92	; 0x5c
   14f48:	str	fp, [sp, #52]	; 0x34
   14f4c:	strbcc	r2, [r8, r3]
   14f50:	add	r3, r4, #2
   14f54:	add	r4, r4, #3
   14f58:	cmp	r3, r9
   14f5c:	str	r5, [sp, #68]	; 0x44
   14f60:	movcc	r2, #39	; 0x27
   14f64:	strbcc	r2, [r8, r3]
   14f68:	b	1505c <__assert_fail@plt+0x3b48>
   14f6c:	cmp	r6, #94	; 0x5e
   14f70:	beq	14ed8 <__assert_fail@plt+0x39c4>
   14f74:	bhi	15134 <__assert_fail@plt+0x3c20>
   14f78:	cmp	r6, #90	; 0x5a
   14f7c:	bhi	15120 <__assert_fail@plt+0x3c0c>
   14f80:	cmp	r6, #65	; 0x41
   14f84:	bcs	1512c <__assert_fail@plt+0x3c18>
   14f88:	cmp	r6, #62	; 0x3e
   14f8c:	bls	14ed8 <__assert_fail@plt+0x39c4>
   14f90:	cmp	r6, #63	; 0x3f
   14f94:	bne	14e40 <__assert_fail@plt+0x392c>
   14f98:	cmp	sl, #2
   14f9c:	beq	15280 <__assert_fail@plt+0x3d6c>
   14fa0:	cmp	sl, #5
   14fa4:	movne	fp, #0
   14fa8:	bne	15650 <__assert_fail@plt+0x413c>
   14fac:	ldr	r3, [sp, #148]	; 0x94
   14fb0:	tst	r3, #4
   14fb4:	beq	15288 <__assert_fail@plt+0x3d74>
   14fb8:	ldr	r3, [sp, #28]
   14fbc:	add	r2, r3, #2
   14fc0:	ldr	r3, [sp, #40]	; 0x28
   14fc4:	cmp	r2, r3
   14fc8:	bcs	15288 <__assert_fail@plt+0x3d74>
   14fcc:	ldr	r1, [sp, #28]
   14fd0:	ldr	r3, [sp, #48]	; 0x30
   14fd4:	add	r3, r3, r1
   14fd8:	ldrb	r1, [r3, #1]
   14fdc:	cmp	r1, #63	; 0x3f
   14fe0:	bne	15288 <__assert_fail@plt+0x3d74>
   14fe4:	ldr	r3, [sp, #48]	; 0x30
   14fe8:	ldrb	r6, [r3, r2]
   14fec:	sub	r3, r6, #33	; 0x21
   14ff0:	uxtb	r3, r3
   14ff4:	cmp	r3, #29
   14ff8:	bhi	15658 <__assert_fail@plt+0x4144>
   14ffc:	ldr	r0, [pc, #1804]	; 15710 <__assert_fail@plt+0x41fc>
   15000:	mov	r5, #1
   15004:	ands	r5, r0, r5, lsl r3
   15008:	beq	15660 <__assert_fail@plt+0x414c>
   1500c:	cmp	r7, #0
   15010:	bne	14d94 <__assert_fail@plt+0x3880>
   15014:	cmp	r9, r4
   15018:	add	r3, r4, #1
   1501c:	str	r2, [sp, #28]
   15020:	mov	r5, #0
   15024:	strbhi	r1, [r8, r4]
   15028:	cmp	r9, r3
   1502c:	mov	fp, r5
   15030:	movhi	r1, #34	; 0x22
   15034:	strbhi	r1, [r8, r3]
   15038:	add	r3, r4, #2
   1503c:	cmp	r9, r3
   15040:	movhi	r1, #34	; 0x22
   15044:	strbhi	r1, [r8, r3]
   15048:	add	r3, r4, #3
   1504c:	add	r4, r4, #4
   15050:	cmp	r9, r3
   15054:	movhi	r1, #63	; 0x3f
   15058:	strbhi	r1, [r8, r3]
   1505c:	ldr	r3, [sp, #24]
   15060:	eor	r3, r3, #1
   15064:	cmp	sl, #2
   15068:	orreq	r3, r3, #1
   1506c:	eor	r3, r3, #1
   15070:	orr	r3, r7, r3
   15074:	tst	r3, #255	; 0xff
   15078:	beq	150a4 <__assert_fail@plt+0x3b90>
   1507c:	ldr	r3, [sp, #152]	; 0x98
   15080:	cmp	r3, #0
   15084:	beq	150a4 <__assert_fail@plt+0x3b90>
   15088:	ldr	r1, [sp, #152]	; 0x98
   1508c:	ubfx	r2, r6, #5, #8
   15090:	and	r3, r6, #31
   15094:	ldr	r2, [r1, r2, lsl #2]
   15098:	lsr	r3, r2, r3
   1509c:	tst	r3, #1
   150a0:	bne	150b0 <__assert_fail@plt+0x3b9c>
   150a4:	ldr	r3, [sp, #64]	; 0x40
   150a8:	cmp	r3, #0
   150ac:	beq	152a8 <__assert_fail@plt+0x3d94>
   150b0:	sub	r3, sl, #2
   150b4:	cmp	r7, #0
   150b8:	clz	r3, r3
   150bc:	lsr	r3, r3, #5
   150c0:	bne	14d94 <__assert_fail@plt+0x3880>
   150c4:	ldr	r2, [sp, #52]	; 0x34
   150c8:	eor	r2, r2, #1
   150cc:	ands	r3, r3, r2
   150d0:	beq	15108 <__assert_fail@plt+0x3bf4>
   150d4:	cmp	r9, r4
   150d8:	str	r3, [sp, #52]	; 0x34
   150dc:	movhi	r2, #39	; 0x27
   150e0:	strbhi	r2, [r8, r4]
   150e4:	add	r2, r4, #1
   150e8:	cmp	r9, r2
   150ec:	movhi	r1, #36	; 0x24
   150f0:	strbhi	r1, [r8, r2]
   150f4:	add	r2, r4, #2
   150f8:	add	r4, r4, #3
   150fc:	cmp	r9, r2
   15100:	movhi	r1, #39	; 0x27
   15104:	strbhi	r1, [r8, r2]
   15108:	cmp	r9, r4
   1510c:	ldr	fp, [sp, #36]	; 0x24
   15110:	movhi	r3, #92	; 0x5c
   15114:	strbhi	r3, [r8, r4]
   15118:	add	r4, r4, #1
   1511c:	b	152a8 <__assert_fail@plt+0x3d94>
   15120:	cmp	r6, #92	; 0x5c
   15124:	beq	15290 <__assert_fail@plt+0x3d7c>
   15128:	bls	14ed8 <__assert_fail@plt+0x39c4>
   1512c:	ldr	r5, [sp, #36]	; 0x24
   15130:	b	15278 <__assert_fail@plt+0x3d64>
   15134:	cmp	r6, #122	; 0x7a
   15138:	bhi	15158 <__assert_fail@plt+0x3c44>
   1513c:	cmp	r6, #97	; 0x61
   15140:	bcs	1512c <__assert_fail@plt+0x3c18>
   15144:	cmp	r6, #95	; 0x5f
   15148:	beq	1512c <__assert_fail@plt+0x3c18>
   1514c:	cmp	r6, #96	; 0x60
   15150:	bne	14e40 <__assert_fail@plt+0x392c>
   15154:	b	14ed8 <__assert_fail@plt+0x39c4>
   15158:	cmp	r6, #124	; 0x7c
   1515c:	beq	14ed8 <__assert_fail@plt+0x39c4>
   15160:	bcc	1536c <__assert_fail@plt+0x3e58>
   15164:	cmp	r6, #125	; 0x7d
   15168:	beq	1536c <__assert_fail@plt+0x3e58>
   1516c:	cmp	r6, #126	; 0x7e
   15170:	bne	14e40 <__assert_fail@plt+0x392c>
   15174:	ldr	r3, [sp, #28]
   15178:	cmp	r3, #0
   1517c:	bne	15288 <__assert_fail@plt+0x3d74>
   15180:	ldr	r5, [sp, #36]	; 0x24
   15184:	cmp	sl, #2
   15188:	movne	fp, #0
   1518c:	andeq	fp, r7, #1
   15190:	cmp	fp, #0
   15194:	beq	1505c <__assert_fail@plt+0x3b48>
   15198:	b	14ebc <__assert_fail@plt+0x39a8>
   1519c:	ldr	r3, [sp, #24]
   151a0:	cmp	r3, #0
   151a4:	beq	1526c <__assert_fail@plt+0x3d58>
   151a8:	sub	r2, sl, #2
   151ac:	cmp	r7, #0
   151b0:	clz	r2, r2
   151b4:	lsr	r2, r2, #5
   151b8:	bne	14d90 <__assert_fail@plt+0x387c>
   151bc:	ldr	r3, [sp, #52]	; 0x34
   151c0:	eor	r3, r3, #1
   151c4:	ands	r2, r2, r3
   151c8:	moveq	r3, r4
   151cc:	beq	15204 <__assert_fail@plt+0x3cf0>
   151d0:	cmp	r9, r4
   151d4:	str	r2, [sp, #52]	; 0x34
   151d8:	movhi	r3, #39	; 0x27
   151dc:	strbhi	r3, [r8, r4]
   151e0:	add	r3, r4, #1
   151e4:	cmp	r9, r3
   151e8:	movhi	r1, #36	; 0x24
   151ec:	strbhi	r1, [r8, r3]
   151f0:	add	r3, r4, #2
   151f4:	cmp	r9, r3
   151f8:	movhi	r1, #39	; 0x27
   151fc:	strbhi	r1, [r8, r3]
   15200:	add	r3, r4, #3
   15204:	cmp	r9, r3
   15208:	add	r4, r3, #1
   1520c:	movhi	r2, #92	; 0x5c
   15210:	strbhi	r2, [r8, r3]
   15214:	cmp	fp, #0
   15218:	beq	15640 <__assert_fail@plt+0x412c>
   1521c:	ldr	r2, [sp, #28]
   15220:	ldr	r1, [sp, #40]	; 0x28
   15224:	add	r2, r2, #1
   15228:	cmp	r2, r1
   1522c:	bcs	15264 <__assert_fail@plt+0x3d50>
   15230:	ldr	r1, [sp, #48]	; 0x30
   15234:	mov	r6, #48	; 0x30
   15238:	ldrb	r2, [r1, r2]
   1523c:	sub	r2, r2, #48	; 0x30
   15240:	cmp	r2, #9
   15244:	bhi	15650 <__assert_fail@plt+0x413c>
   15248:	cmp	r9, r4
   1524c:	add	r2, r3, #2
   15250:	strbhi	r6, [r8, r4]
   15254:	cmp	r9, r2
   15258:	add	r4, r3, #3
   1525c:	movhi	r1, #48	; 0x30
   15260:	strbhi	r1, [r8, r2]
   15264:	mov	r5, #0
   15268:	b	15648 <__assert_fail@plt+0x4134>
   1526c:	ldr	r3, [sp, #148]	; 0x94
   15270:	ands	r5, r3, #1
   15274:	bne	152fc <__assert_fail@plt+0x3de8>
   15278:	mov	fp, #0
   1527c:	b	1505c <__assert_fail@plt+0x3b48>
   15280:	cmp	r7, #0
   15284:	bne	14d94 <__assert_fail@plt+0x3880>
   15288:	mov	r5, #0
   1528c:	b	15278 <__assert_fail@plt+0x3d64>
   15290:	cmp	sl, #2
   15294:	bne	15308 <__assert_fail@plt+0x3df4>
   15298:	cmp	r7, #0
   1529c:	bne	14d94 <__assert_fail@plt+0x3880>
   152a0:	mov	r5, r7
   152a4:	mov	fp, r7
   152a8:	ldr	r3, [sp, #52]	; 0x34
   152ac:	eor	fp, fp, #1
   152b0:	tst	r3, fp
   152b4:	beq	152e0 <__assert_fail@plt+0x3dcc>
   152b8:	cmp	r9, r4
   152bc:	movhi	r3, #39	; 0x27
   152c0:	strbhi	r3, [r8, r4]
   152c4:	add	r3, r4, #1
   152c8:	add	r4, r4, #2
   152cc:	cmp	r9, r3
   152d0:	movhi	r2, #39	; 0x27
   152d4:	strbhi	r2, [r8, r3]
   152d8:	mov	r3, #0
   152dc:	str	r3, [sp, #52]	; 0x34
   152e0:	cmp	r9, r4
   152e4:	ldr	r3, [sp, #72]	; 0x48
   152e8:	strbhi	r6, [r8, r4]
   152ec:	cmp	r5, #0
   152f0:	add	r4, r4, #1
   152f4:	moveq	r3, #0
   152f8:	str	r3, [sp, #72]	; 0x48
   152fc:	ldr	r3, [sp, #28]
   15300:	add	r3, r3, #1
   15304:	b	14abc <__assert_fail@plt+0x35a8>
   15308:	ldr	r3, [sp, #24]
   1530c:	and	r3, r3, r7
   15310:	tst	r5, r3
   15314:	moveq	r3, r6
   15318:	beq	14ea8 <__assert_fail@plt+0x3994>
   1531c:	mov	fp, #0
   15320:	mov	r5, fp
   15324:	b	152a8 <__assert_fail@plt+0x3d94>
   15328:	mov	r3, #116	; 0x74
   1532c:	b	14ea8 <__assert_fail@plt+0x3994>
   15330:	mov	r3, #110	; 0x6e
   15334:	b	14ea8 <__assert_fail@plt+0x3994>
   15338:	mov	r3, #97	; 0x61
   1533c:	ldr	r2, [sp, #24]
   15340:	cmp	r2, #0
   15344:	beq	15288 <__assert_fail@plt+0x3d74>
   15348:	mov	r6, r3
   1534c:	mov	r5, #0
   15350:	b	150b0 <__assert_fail@plt+0x3b9c>
   15354:	mov	r3, #98	; 0x62
   15358:	b	1533c <__assert_fail@plt+0x3e28>
   1535c:	mov	r3, #118	; 0x76
   15360:	b	1533c <__assert_fail@plt+0x3e28>
   15364:	mov	r3, #102	; 0x66
   15368:	b	1533c <__assert_fail@plt+0x3e28>
   1536c:	ldr	r3, [sp, #40]	; 0x28
   15370:	cmn	r3, #1
   15374:	bne	15394 <__assert_fail@plt+0x3e80>
   15378:	ldr	r3, [sp, #48]	; 0x30
   1537c:	ldrb	r3, [r3, #1]
   15380:	adds	r3, r3, #0
   15384:	movne	r3, #1
   15388:	cmp	r3, #0
   1538c:	bne	15288 <__assert_fail@plt+0x3d74>
   15390:	b	15174 <__assert_fail@plt+0x3c60>
   15394:	ldr	r3, [sp, #40]	; 0x28
   15398:	subs	r3, r3, #1
   1539c:	b	15384 <__assert_fail@plt+0x3e70>
   153a0:	mov	r3, #0
   153a4:	mov	r2, #0
   153a8:	strd	r2, [sp, #96]	; 0x60
   153ac:	ldr	r3, [sp, #40]	; 0x28
   153b0:	cmn	r3, #1
   153b4:	bne	153c4 <__assert_fail@plt+0x3eb0>
   153b8:	ldr	r0, [sp, #48]	; 0x30
   153bc:	bl	11370 <strlen@plt>
   153c0:	str	r0, [sp, #40]	; 0x28
   153c4:	ldr	r5, [sp, #36]	; 0x24
   153c8:	mov	r3, #0
   153cc:	str	r3, [sp, #56]	; 0x38
   153d0:	ldr	r3, [sp, #28]
   153d4:	add	r0, sp, #92	; 0x5c
   153d8:	ldr	r1, [sp, #40]	; 0x28
   153dc:	ldr	r2, [sp, #56]	; 0x38
   153e0:	add	r2, r3, r2
   153e4:	ldr	r3, [sp, #48]	; 0x30
   153e8:	add	fp, r3, r2
   153ec:	sub	r2, r1, r2
   153f0:	add	r3, sp, #96	; 0x60
   153f4:	mov	r1, fp
   153f8:	bl	1705c <__assert_fail@plt+0x5b48>
   153fc:	subs	r2, r0, #0
   15400:	beq	15440 <__assert_fail@plt+0x3f2c>
   15404:	cmn	r2, #1
   15408:	beq	15614 <__assert_fail@plt+0x4100>
   1540c:	cmn	r2, #2
   15410:	bne	15584 <__assert_fail@plt+0x4070>
   15414:	ldr	r3, [sp, #28]
   15418:	ldr	r2, [sp, #56]	; 0x38
   1541c:	add	r3, r3, r2
   15420:	ldr	r2, [sp, #40]	; 0x28
   15424:	cmp	r2, r3
   15428:	bls	15614 <__assert_fail@plt+0x4100>
   1542c:	ldr	r2, [sp, #56]	; 0x38
   15430:	ldr	r3, [sp, #80]	; 0x50
   15434:	ldrb	r5, [r3, r2]
   15438:	cmp	r5, #0
   1543c:	bne	15574 <__assert_fail@plt+0x4060>
   15440:	ldr	r3, [sp, #56]	; 0x38
   15444:	cmp	r3, #1
   15448:	bls	14e6c <__assert_fail@plt+0x3958>
   1544c:	ldr	r3, [sp, #28]
   15450:	mov	fp, #0
   15454:	mov	ip, #92	; 0x5c
   15458:	ldr	r2, [sp, #56]	; 0x38
   1545c:	add	r3, r3, r2
   15460:	ldr	r2, [sp, #24]
   15464:	str	r3, [sp, #36]	; 0x24
   15468:	eor	r3, r5, #1
   1546c:	and	r3, r3, r2
   15470:	mov	r2, #39	; 0x27
   15474:	uxtb	r3, r3
   15478:	cmp	r3, #0
   1547c:	beq	1561c <__assert_fail@plt+0x4108>
   15480:	sub	r0, sl, #2
   15484:	cmp	r7, #0
   15488:	clz	r0, r0
   1548c:	lsr	r0, r0, #5
   15490:	bne	14d90 <__assert_fail@plt+0x387c>
   15494:	ldr	r1, [sp, #52]	; 0x34
   15498:	eor	r1, r1, #1
   1549c:	ands	r1, r0, r1
   154a0:	beq	154d0 <__assert_fail@plt+0x3fbc>
   154a4:	cmp	r9, r4
   154a8:	add	r0, r4, #1
   154ac:	str	r1, [sp, #52]	; 0x34
   154b0:	strbhi	r2, [r8, r4]
   154b4:	cmp	r9, r0
   154b8:	movhi	lr, #36	; 0x24
   154bc:	strbhi	lr, [r8, r0]
   154c0:	add	r0, r4, #2
   154c4:	add	r4, r4, #3
   154c8:	cmp	r9, r0
   154cc:	strbhi	r2, [r8, r0]
   154d0:	cmp	r9, r4
   154d4:	add	r0, r4, #1
   154d8:	mov	fp, r3
   154dc:	strbhi	ip, [r8, r4]
   154e0:	cmp	r9, r0
   154e4:	lsrhi	r1, r6, #6
   154e8:	addhi	r1, r1, #48	; 0x30
   154ec:	strbhi	r1, [r8, r0]
   154f0:	add	r0, r4, #2
   154f4:	add	r4, r4, #3
   154f8:	cmp	r9, r0
   154fc:	ubfxhi	r1, r6, #3, #3
   15500:	and	r6, r6, #7
   15504:	add	r6, r6, #48	; 0x30
   15508:	addhi	r1, r1, #48	; 0x30
   1550c:	strbhi	r1, [r8, r0]
   15510:	eor	r0, fp, #1
   15514:	ldr	r1, [sp, #28]
   15518:	ldr	lr, [sp, #52]	; 0x34
   1551c:	add	r1, r1, #1
   15520:	and	r0, r0, lr
   15524:	ldr	lr, [sp, #36]	; 0x24
   15528:	cmp	r1, lr
   1552c:	bcs	152a8 <__assert_fail@plt+0x3d94>
   15530:	cmp	r0, #0
   15534:	beq	15558 <__assert_fail@plt+0x4044>
   15538:	cmp	r9, r4
   1553c:	add	r0, r4, #1
   15540:	strbhi	r2, [r8, r4]
   15544:	cmp	r9, r0
   15548:	add	r4, r4, #2
   1554c:	strbhi	r2, [r8, r0]
   15550:	mov	r0, #0
   15554:	str	r0, [sp, #52]	; 0x34
   15558:	ldr	r0, [sp, #48]	; 0x30
   1555c:	cmp	r9, r4
   15560:	str	r1, [sp, #28]
   15564:	strbhi	r6, [r8, r4]
   15568:	add	r4, r4, #1
   1556c:	ldrb	r6, [r0, r1]
   15570:	b	15478 <__assert_fail@plt+0x3f64>
   15574:	ldr	r3, [sp, #56]	; 0x38
   15578:	add	r3, r3, #1
   1557c:	str	r3, [sp, #56]	; 0x38
   15580:	b	15414 <__assert_fail@plt+0x3f00>
   15584:	cmp	sl, #2
   15588:	movne	r3, #0
   1558c:	andeq	r3, r7, #1
   15590:	cmp	r3, #0
   15594:	movne	r1, #1
   15598:	bne	155f4 <__assert_fail@plt+0x40e0>
   1559c:	ldr	r0, [sp, #92]	; 0x5c
   155a0:	str	r2, [sp, #84]	; 0x54
   155a4:	bl	11274 <iswprint@plt>
   155a8:	ldr	r3, [sp, #56]	; 0x38
   155ac:	cmp	r0, #0
   155b0:	add	r0, sp, #96	; 0x60
   155b4:	moveq	r5, #0
   155b8:	ldr	r2, [sp, #84]	; 0x54
   155bc:	add	r3, r3, r2
   155c0:	str	r3, [sp, #56]	; 0x38
   155c4:	bl	111fc <mbsinit@plt>
   155c8:	cmp	r0, #0
   155cc:	beq	153d0 <__assert_fail@plt+0x3ebc>
   155d0:	b	15440 <__assert_fail@plt+0x3f2c>
   155d4:	ldrb	r3, [fp, #1]!
   155d8:	cmp	r3, #94	; 0x5e
   155dc:	beq	14ebc <__assert_fail@plt+0x39a8>
   155e0:	bhi	15600 <__assert_fail@plt+0x40ec>
   155e4:	sub	r3, r3, #91	; 0x5b
   155e8:	cmp	r3, #1
   155ec:	bls	14ebc <__assert_fail@plt+0x39a8>
   155f0:	add	r1, r1, #1
   155f4:	cmp	r1, r2
   155f8:	bne	155d4 <__assert_fail@plt+0x40c0>
   155fc:	b	1559c <__assert_fail@plt+0x4088>
   15600:	cmp	r3, #96	; 0x60
   15604:	beq	14ebc <__assert_fail@plt+0x39a8>
   15608:	cmp	r3, #124	; 0x7c
   1560c:	bne	155f0 <__assert_fail@plt+0x40dc>
   15610:	b	14ebc <__assert_fail@plt+0x39a8>
   15614:	mov	r5, #0
   15618:	b	15440 <__assert_fail@plt+0x3f2c>
   1561c:	ldr	r1, [sp, #64]	; 0x40
   15620:	cmp	r1, #0
   15624:	beq	15510 <__assert_fail@plt+0x3ffc>
   15628:	cmp	r9, r4
   1562c:	mov	r1, #0
   15630:	strbhi	ip, [r8, r4]
   15634:	add	r4, r4, #1
   15638:	str	r1, [sp, #64]	; 0x40
   1563c:	b	15510 <__assert_fail@plt+0x3ffc>
   15640:	mov	r5, fp
   15644:	ldr	fp, [sp, #24]
   15648:	mov	r6, #48	; 0x30
   1564c:	b	1505c <__assert_fail@plt+0x3b48>
   15650:	mov	r5, #0
   15654:	b	1505c <__assert_fail@plt+0x3b48>
   15658:	mov	r6, r1
   1565c:	b	15288 <__assert_fail@plt+0x3d74>
   15660:	mov	r6, r1
   15664:	b	15278 <__assert_fail@plt+0x3d64>
   15668:	ldr	r2, [sp, #28]
   1566c:	ldr	r3, [sp, #40]	; 0x28
   15670:	subs	r3, r3, r2
   15674:	movne	r3, #1
   15678:	b	14ae0 <__assert_fail@plt+0x35cc>
   1567c:	ldr	r3, [sp, #60]	; 0x3c
   15680:	mov	sl, #2
   15684:	ldr	r7, [sp, #72]	; 0x48
   15688:	adds	r6, r3, #0
   1568c:	mov	r5, r3
   15690:	movne	r6, #1
   15694:	cmp	r9, #0
   15698:	movne	r6, #0
   1569c:	cmp	r6, #0
   156a0:	bne	14a70 <__assert_fail@plt+0x355c>
   156a4:	ldr	r3, [sp, #68]	; 0x44
   156a8:	ldr	r2, [sp, #44]	; 0x2c
   156ac:	cmp	r2, #0
   156b0:	moveq	r3, #0
   156b4:	andne	r3, r3, #1
   156b8:	cmp	r3, #0
   156bc:	movne	r3, r2
   156c0:	subne	r3, r3, #1
   156c4:	bne	156f4 <__assert_fail@plt+0x41e0>
   156c8:	cmp	r9, r4
   156cc:	movhi	r3, #0
   156d0:	strbhi	r3, [r8, r4]
   156d4:	mov	r0, r4
   156d8:	add	sp, sp, #108	; 0x6c
   156dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156e0:	mov	r3, r7
   156e4:	b	156a8 <__assert_fail@plt+0x4194>
   156e8:	cmp	r9, r4
   156ec:	strbhi	r2, [r8, r4]
   156f0:	add	r4, r4, #1
   156f4:	ldrb	r2, [r3, #1]!
   156f8:	cmp	r2, #0
   156fc:	bne	156e8 <__assert_fail@plt+0x41d4>
   15700:	b	156c8 <__assert_fail@plt+0x41b4>
   15704:	andeq	r7, r1, r2, ror r8
   15708:			; <UNDEFINED> instruction: 0x000187bd
   1570c:			; <UNDEFINED> instruction: 0x000187bb
   15710:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   15714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15718:	sub	sp, sp, #52	; 0x34
   1571c:	mov	r6, r0
   15720:	mov	r5, r3
   15724:	mov	r8, r1
   15728:	mov	r9, r2
   1572c:	bl	113b8 <__errno_location@plt>
   15730:	ldr	r3, [r0]
   15734:	cmn	r6, #-2147483647	; 0x80000001
   15738:	str	r0, [sp, #24]
   1573c:	ldr	r7, [pc, #368]	; 158b4 <__assert_fail@plt+0x43a0>
   15740:	str	r3, [sp, #32]
   15744:	movne	r3, #0
   15748:	moveq	r3, #1
   1574c:	orrs	r3, r3, r6, lsr #31
   15750:	ldr	r4, [r7]
   15754:	beq	1575c <__assert_fail@plt+0x4248>
   15758:	bl	114f0 <abort@plt>
   1575c:	ldr	r2, [r7, #4]
   15760:	cmp	r2, r6
   15764:	bgt	157d4 <__assert_fail@plt+0x42c0>
   15768:	add	sl, r7, #8
   1576c:	mov	r3, #8
   15770:	cmp	r4, sl
   15774:	add	r1, sp, #44	; 0x2c
   15778:	str	r2, [sp, #44]	; 0x2c
   1577c:	sub	r2, r6, r2
   15780:	movne	r0, r4
   15784:	moveq	r0, #0
   15788:	add	r2, r2, #1
   1578c:	str	r3, [sp]
   15790:	mvn	r3, #-2147483648	; 0x80000000
   15794:	bl	167e8 <__assert_fail@plt+0x52d4>
   15798:	cmp	r4, sl
   1579c:	mov	fp, r0
   157a0:	str	r0, [r7]
   157a4:	ldmeq	r4, {r0, r1}
   157a8:	mov	r4, fp
   157ac:	ldr	r2, [sp, #44]	; 0x2c
   157b0:	stmeq	fp, {r0, r1}
   157b4:	mov	r1, #0
   157b8:	ldr	r0, [r7, #4]
   157bc:	sub	r2, r2, r0
   157c0:	add	r0, fp, r0, lsl #3
   157c4:	lsl	r2, r2, #3
   157c8:	bl	113dc <memset@plt>
   157cc:	ldr	r3, [sp, #44]	; 0x2c
   157d0:	str	r3, [r7, #4]
   157d4:	ldr	r3, [r5, #4]
   157d8:	add	sl, r4, r6, lsl #3
   157dc:	mov	r2, r8
   157e0:	ldr	fp, [r4, r6, lsl #3]
   157e4:	ldr	r7, [sl, #4]
   157e8:	orr	r3, r3, #1
   157ec:	str	r3, [sp, #28]
   157f0:	add	r3, r5, #8
   157f4:	mov	r1, fp
   157f8:	str	r3, [sp, #36]	; 0x24
   157fc:	mov	r0, r7
   15800:	ldr	r3, [r5, #44]	; 0x2c
   15804:	str	r3, [sp, #16]
   15808:	ldr	r3, [r5, #40]	; 0x28
   1580c:	str	r3, [sp, #12]
   15810:	add	r3, r5, #8
   15814:	str	r3, [sp, #8]
   15818:	ldr	r3, [sp, #28]
   1581c:	str	r3, [sp, #4]
   15820:	ldr	r3, [r5]
   15824:	str	r3, [sp]
   15828:	mov	r3, r9
   1582c:	bl	14a24 <__assert_fail@plt+0x3510>
   15830:	cmp	fp, r0
   15834:	bhi	1589c <__assert_fail@plt+0x4388>
   15838:	ldr	r3, [pc, #120]	; 158b8 <__assert_fail@plt+0x43a4>
   1583c:	add	fp, r0, #1
   15840:	str	fp, [r4, r6, lsl #3]
   15844:	cmp	r7, r3
   15848:	beq	15854 <__assert_fail@plt+0x4340>
   1584c:	mov	r0, r7
   15850:	bl	1466c <__assert_fail@plt+0x3158>
   15854:	mov	r0, fp
   15858:	bl	166d8 <__assert_fail@plt+0x51c4>
   1585c:	ldr	r3, [r5, #44]	; 0x2c
   15860:	mov	r2, r8
   15864:	mov	r1, fp
   15868:	str	r0, [sl, #4]
   1586c:	mov	r7, r0
   15870:	str	r3, [sp, #16]
   15874:	ldr	r3, [r5, #40]	; 0x28
   15878:	str	r3, [sp, #12]
   1587c:	add	r3, r5, #8
   15880:	str	r3, [sp, #8]
   15884:	ldr	r3, [sp, #28]
   15888:	str	r3, [sp, #4]
   1588c:	ldr	r3, [r5]
   15890:	str	r3, [sp]
   15894:	mov	r3, r9
   15898:	bl	14a24 <__assert_fail@plt+0x3510>
   1589c:	ldr	r3, [sp, #24]
   158a0:	mov	r0, r7
   158a4:	ldr	r2, [sp, #32]
   158a8:	str	r2, [r3]
   158ac:	add	sp, sp, #52	; 0x34
   158b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158b4:	andeq	r9, r2, r0, ror r1
   158b8:	andeq	r9, r2, r8, lsr r5
   158bc:	push	{r4, r5, r6, lr}
   158c0:	mov	r5, r0
   158c4:	bl	113b8 <__errno_location@plt>
   158c8:	mov	r4, r0
   158cc:	cmp	r5, #0
   158d0:	ldr	r0, [pc, #20]	; 158ec <__assert_fail@plt+0x43d8>
   158d4:	mov	r1, #48	; 0x30
   158d8:	movne	r0, r5
   158dc:	ldr	r6, [r4]
   158e0:	bl	168d8 <__assert_fail@plt+0x53c4>
   158e4:	str	r6, [r4]
   158e8:	pop	{r4, r5, r6, pc}
   158ec:	andeq	r9, r2, r8, lsr r6
   158f0:	ldr	r3, [pc, #12]	; 15904 <__assert_fail@plt+0x43f0>
   158f4:	cmp	r0, #0
   158f8:	moveq	r0, r3
   158fc:	ldr	r0, [r0]
   15900:	bx	lr
   15904:	andeq	r9, r2, r8, lsr r6
   15908:	ldr	r3, [pc, #12]	; 1591c <__assert_fail@plt+0x4408>
   1590c:	cmp	r0, #0
   15910:	moveq	r0, r3
   15914:	str	r1, [r0]
   15918:	bx	lr
   1591c:	andeq	r9, r2, r8, lsr r6
   15920:	ldr	r3, [pc, #52]	; 1595c <__assert_fail@plt+0x4448>
   15924:	cmp	r0, #0
   15928:	push	{lr}		; (str lr, [sp, #-4]!)
   1592c:	lsr	lr, r1, #5
   15930:	and	r1, r1, #31
   15934:	moveq	r0, r3
   15938:	add	r3, r0, #8
   1593c:	ldr	ip, [r3, lr, lsl #2]
   15940:	lsr	r0, ip, r1
   15944:	eor	r2, r2, r0
   15948:	and	r0, r0, #1
   1594c:	and	r2, r2, #1
   15950:	eor	r1, ip, r2, lsl r1
   15954:	str	r1, [r3, lr, lsl #2]
   15958:	pop	{pc}		; (ldr pc, [sp], #4)
   1595c:	andeq	r9, r2, r8, lsr r6
   15960:	ldr	r3, [pc, #16]	; 15978 <__assert_fail@plt+0x4464>
   15964:	cmp	r0, #0
   15968:	movne	r3, r0
   1596c:	ldr	r0, [r3, #4]
   15970:	str	r1, [r3, #4]
   15974:	bx	lr
   15978:	andeq	r9, r2, r8, lsr r6
   1597c:	ldr	r3, [pc, #44]	; 159b0 <__assert_fail@plt+0x449c>
   15980:	cmp	r0, #0
   15984:	moveq	r0, r3
   15988:	mov	r3, #10
   1598c:	cmp	r2, #0
   15990:	cmpne	r1, #0
   15994:	str	r3, [r0]
   15998:	bne	159a4 <__assert_fail@plt+0x4490>
   1599c:	push	{r4, lr}
   159a0:	bl	114f0 <abort@plt>
   159a4:	str	r1, [r0, #40]	; 0x28
   159a8:	str	r2, [r0, #44]	; 0x2c
   159ac:	bx	lr
   159b0:	andeq	r9, r2, r8, lsr r6
   159b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   159b8:	sub	sp, sp, #24
   159bc:	mov	sl, r3
   159c0:	mov	r7, r0
   159c4:	mov	r8, r1
   159c8:	mov	r9, r2
   159cc:	ldr	r4, [sp, #56]	; 0x38
   159d0:	ldr	r3, [pc, #88]	; 15a30 <__assert_fail@plt+0x451c>
   159d4:	cmp	r4, #0
   159d8:	moveq	r4, r3
   159dc:	bl	113b8 <__errno_location@plt>
   159e0:	ldr	r3, [r4, #44]	; 0x2c
   159e4:	mov	r5, r0
   159e8:	mov	r2, r9
   159ec:	mov	r1, r8
   159f0:	mov	r0, r7
   159f4:	ldr	r6, [r5]
   159f8:	str	r3, [sp, #16]
   159fc:	ldr	r3, [r4, #40]	; 0x28
   15a00:	str	r3, [sp, #12]
   15a04:	add	r3, r4, #8
   15a08:	str	r3, [sp, #8]
   15a0c:	ldr	r3, [r4, #4]
   15a10:	str	r3, [sp, #4]
   15a14:	ldr	r3, [r4]
   15a18:	str	r3, [sp]
   15a1c:	mov	r3, sl
   15a20:	bl	14a24 <__assert_fail@plt+0x3510>
   15a24:	str	r6, [r5]
   15a28:	add	sp, sp, #24
   15a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a30:	andeq	r9, r2, r8, lsr r6
   15a34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a38:	cmp	r3, #0
   15a3c:	sub	sp, sp, #44	; 0x2c
   15a40:	mov	r6, r2
   15a44:	mov	sl, r1
   15a48:	mov	r9, r0
   15a4c:	ldr	r4, [pc, #176]	; 15b04 <__assert_fail@plt+0x45f0>
   15a50:	movne	r4, r3
   15a54:	bl	113b8 <__errno_location@plt>
   15a58:	ldr	r3, [r0]
   15a5c:	mov	r1, #0
   15a60:	mov	r2, r9
   15a64:	mov	r8, r0
   15a68:	mov	r0, r1
   15a6c:	ldr	r5, [r4, #4]
   15a70:	add	fp, r4, #8
   15a74:	str	r3, [sp, #28]
   15a78:	ldr	r3, [r4, #44]	; 0x2c
   15a7c:	cmp	r6, #0
   15a80:	orreq	r5, r5, #1
   15a84:	str	r3, [sp, #16]
   15a88:	ldr	r3, [r4, #40]	; 0x28
   15a8c:	stmib	sp, {r5, fp}
   15a90:	str	r3, [sp, #12]
   15a94:	ldr	r3, [r4]
   15a98:	str	r3, [sp]
   15a9c:	mov	r3, sl
   15aa0:	bl	14a24 <__assert_fail@plt+0x3510>
   15aa4:	add	r1, r0, #1
   15aa8:	mov	r7, r0
   15aac:	mov	r0, r1
   15ab0:	str	r1, [sp, #36]	; 0x24
   15ab4:	bl	166d8 <__assert_fail@plt+0x51c4>
   15ab8:	ldr	r3, [r4, #44]	; 0x2c
   15abc:	mov	r2, r9
   15ac0:	ldr	r1, [sp, #36]	; 0x24
   15ac4:	str	r3, [sp, #16]
   15ac8:	ldr	r3, [r4, #40]	; 0x28
   15acc:	stmib	sp, {r5, fp}
   15ad0:	str	r0, [sp, #32]
   15ad4:	str	r3, [sp, #12]
   15ad8:	ldr	r3, [r4]
   15adc:	str	r3, [sp]
   15ae0:	mov	r3, sl
   15ae4:	bl	14a24 <__assert_fail@plt+0x3510>
   15ae8:	ldr	r3, [sp, #28]
   15aec:	cmp	r6, #0
   15af0:	ldr	r0, [sp, #32]
   15af4:	str	r3, [r8]
   15af8:	strne	r7, [r6]
   15afc:	add	sp, sp, #44	; 0x2c
   15b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b04:	andeq	r9, r2, r8, lsr r6
   15b08:	mov	r3, r2
   15b0c:	mov	r2, #0
   15b10:	b	15a34 <__assert_fail@plt+0x4520>
   15b14:	push	{r4, r5, r6, r7, r8, lr}
   15b18:	mov	r6, #1
   15b1c:	ldr	r4, [pc, #100]	; 15b88 <__assert_fail@plt+0x4674>
   15b20:	ldr	r5, [r4]
   15b24:	add	r7, r5, #4
   15b28:	ldr	r3, [r4, #4]
   15b2c:	cmp	r3, r6
   15b30:	bgt	15b78 <__assert_fail@plt+0x4664>
   15b34:	ldr	r6, [pc, #80]	; 15b8c <__assert_fail@plt+0x4678>
   15b38:	ldr	r0, [r5, #4]
   15b3c:	cmp	r0, r6
   15b40:	beq	15b54 <__assert_fail@plt+0x4640>
   15b44:	bl	1466c <__assert_fail@plt+0x3158>
   15b48:	mov	r3, #256	; 0x100
   15b4c:	str	r3, [r4, #8]
   15b50:	str	r6, [r4, #12]
   15b54:	ldr	r6, [pc, #52]	; 15b90 <__assert_fail@plt+0x467c>
   15b58:	cmp	r5, r6
   15b5c:	beq	15b6c <__assert_fail@plt+0x4658>
   15b60:	mov	r0, r5
   15b64:	bl	1466c <__assert_fail@plt+0x3158>
   15b68:	str	r6, [r4]
   15b6c:	mov	r3, #1
   15b70:	str	r3, [r4, #4]
   15b74:	pop	{r4, r5, r6, r7, r8, pc}
   15b78:	ldr	r0, [r7, r6, lsl #3]
   15b7c:	add	r6, r6, #1
   15b80:	bl	1466c <__assert_fail@plt+0x3158>
   15b84:	b	15b28 <__assert_fail@plt+0x4614>
   15b88:	andeq	r9, r2, r0, ror r1
   15b8c:	andeq	r9, r2, r8, lsr r5
   15b90:	andeq	r9, r2, r8, ror r1
   15b94:	ldr	r3, [pc, #4]	; 15ba0 <__assert_fail@plt+0x468c>
   15b98:	mvn	r2, #0
   15b9c:	b	15714 <__assert_fail@plt+0x4200>
   15ba0:	andeq	r9, r2, r8, lsr r6
   15ba4:	ldr	r3, [pc]	; 15bac <__assert_fail@plt+0x4698>
   15ba8:	b	15714 <__assert_fail@plt+0x4200>
   15bac:	andeq	r9, r2, r8, lsr r6
   15bb0:	mov	r1, r0
   15bb4:	mov	r0, #0
   15bb8:	b	15b94 <__assert_fail@plt+0x4680>
   15bbc:	mov	r2, r1
   15bc0:	mov	r1, r0
   15bc4:	mov	r0, #0
   15bc8:	b	15ba4 <__assert_fail@plt+0x4690>
   15bcc:	push	{r4, r5, lr}
   15bd0:	sub	sp, sp, #52	; 0x34
   15bd4:	mov	r5, r2
   15bd8:	mov	r4, r0
   15bdc:	mov	r0, sp
   15be0:	bl	148c8 <__assert_fail@plt+0x33b4>
   15be4:	mov	r3, sp
   15be8:	mvn	r2, #0
   15bec:	mov	r1, r5
   15bf0:	mov	r0, r4
   15bf4:	bl	15714 <__assert_fail@plt+0x4200>
   15bf8:	add	sp, sp, #52	; 0x34
   15bfc:	pop	{r4, r5, pc}
   15c00:	push	{r4, r5, r6, lr}
   15c04:	sub	sp, sp, #48	; 0x30
   15c08:	mov	r5, r2
   15c0c:	mov	r6, r3
   15c10:	mov	r4, r0
   15c14:	mov	r0, sp
   15c18:	bl	148c8 <__assert_fail@plt+0x33b4>
   15c1c:	mov	r3, sp
   15c20:	mov	r2, r6
   15c24:	mov	r1, r5
   15c28:	mov	r0, r4
   15c2c:	bl	15714 <__assert_fail@plt+0x4200>
   15c30:	add	sp, sp, #48	; 0x30
   15c34:	pop	{r4, r5, r6, pc}
   15c38:	mov	r2, r1
   15c3c:	mov	r1, r0
   15c40:	mov	r0, #0
   15c44:	b	15bcc <__assert_fail@plt+0x46b8>
   15c48:	mov	r3, r2
   15c4c:	mov	r2, r1
   15c50:	mov	r1, r0
   15c54:	mov	r0, #0
   15c58:	b	15c00 <__assert_fail@plt+0x46ec>
   15c5c:	push	{r4, r5, r6, lr}
   15c60:	mov	r4, r0
   15c64:	mov	r5, r1
   15c68:	mov	r6, r2
   15c6c:	sub	sp, sp, #48	; 0x30
   15c70:	mov	ip, sp
   15c74:	ldr	lr, [pc, #64]	; 15cbc <__assert_fail@plt+0x47a8>
   15c78:	ldm	lr!, {r0, r1, r2, r3}
   15c7c:	stmia	ip!, {r0, r1, r2, r3}
   15c80:	ldm	lr!, {r0, r1, r2, r3}
   15c84:	stmia	ip!, {r0, r1, r2, r3}
   15c88:	ldm	lr, {r0, r1, r2, r3}
   15c8c:	stm	ip, {r0, r1, r2, r3}
   15c90:	mov	r1, r6
   15c94:	mov	r2, #1
   15c98:	mov	r0, sp
   15c9c:	bl	15920 <__assert_fail@plt+0x440c>
   15ca0:	mov	r3, sp
   15ca4:	mov	r2, r5
   15ca8:	mov	r1, r4
   15cac:	mov	r0, #0
   15cb0:	bl	15714 <__assert_fail@plt+0x4200>
   15cb4:	add	sp, sp, #48	; 0x30
   15cb8:	pop	{r4, r5, r6, pc}
   15cbc:	andeq	r9, r2, r8, lsr r6
   15cc0:	mov	r2, r1
   15cc4:	mvn	r1, #0
   15cc8:	b	15c5c <__assert_fail@plt+0x4748>
   15ccc:	mov	r1, #58	; 0x3a
   15cd0:	b	15cc0 <__assert_fail@plt+0x47ac>
   15cd4:	mov	r2, #58	; 0x3a
   15cd8:	b	15c5c <__assert_fail@plt+0x4748>
   15cdc:	push	{r4, r5, lr}
   15ce0:	sub	sp, sp, #100	; 0x64
   15ce4:	mov	r4, r0
   15ce8:	mov	r0, sp
   15cec:	mov	r5, r2
   15cf0:	bl	148c8 <__assert_fail@plt+0x33b4>
   15cf4:	mov	ip, sp
   15cf8:	add	lr, sp, #48	; 0x30
   15cfc:	ldm	ip!, {r0, r1, r2, r3}
   15d00:	stmia	lr!, {r0, r1, r2, r3}
   15d04:	ldm	ip!, {r0, r1, r2, r3}
   15d08:	stmia	lr!, {r0, r1, r2, r3}
   15d0c:	ldm	ip, {r0, r1, r2, r3}
   15d10:	stm	lr, {r0, r1, r2, r3}
   15d14:	mov	r2, #1
   15d18:	mov	r1, #58	; 0x3a
   15d1c:	add	r0, sp, #48	; 0x30
   15d20:	bl	15920 <__assert_fail@plt+0x440c>
   15d24:	add	r3, sp, #48	; 0x30
   15d28:	mvn	r2, #0
   15d2c:	mov	r1, r5
   15d30:	mov	r0, r4
   15d34:	bl	15714 <__assert_fail@plt+0x4200>
   15d38:	add	sp, sp, #100	; 0x64
   15d3c:	pop	{r4, r5, pc}
   15d40:	push	{r4, r5, r6, r7, lr}
   15d44:	mov	r4, r0
   15d48:	mov	r6, r1
   15d4c:	mov	r7, r2
   15d50:	mov	r5, r3
   15d54:	sub	sp, sp, #52	; 0x34
   15d58:	ldr	lr, [pc, #68]	; 15da4 <__assert_fail@plt+0x4890>
   15d5c:	mov	ip, sp
   15d60:	ldm	lr!, {r0, r1, r2, r3}
   15d64:	stmia	ip!, {r0, r1, r2, r3}
   15d68:	ldm	lr!, {r0, r1, r2, r3}
   15d6c:	stmia	ip!, {r0, r1, r2, r3}
   15d70:	ldm	lr, {r0, r1, r2, r3}
   15d74:	stm	ip, {r0, r1, r2, r3}
   15d78:	mov	r2, r7
   15d7c:	mov	r1, r6
   15d80:	mov	r0, sp
   15d84:	bl	1597c <__assert_fail@plt+0x4468>
   15d88:	ldr	r2, [sp, #72]	; 0x48
   15d8c:	mov	r3, sp
   15d90:	mov	r1, r5
   15d94:	mov	r0, r4
   15d98:	bl	15714 <__assert_fail@plt+0x4200>
   15d9c:	add	sp, sp, #52	; 0x34
   15da0:	pop	{r4, r5, r6, r7, pc}
   15da4:	andeq	r9, r2, r8, lsr r6
   15da8:	mvn	ip, #0
   15dac:	push	{r0, r1, r2, lr}
   15db0:	str	ip, [sp]
   15db4:	bl	15d40 <__assert_fail@plt+0x482c>
   15db8:	add	sp, sp, #12
   15dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   15dc0:	mov	r3, r2
   15dc4:	mov	r2, r1
   15dc8:	mov	r1, r0
   15dcc:	mov	r0, #0
   15dd0:	b	15da8 <__assert_fail@plt+0x4894>
   15dd4:	push	{r0, r1, r2, lr}
   15dd8:	str	r3, [sp]
   15ddc:	mov	r3, r2
   15de0:	mov	r2, r1
   15de4:	mov	r1, r0
   15de8:	mov	r0, #0
   15dec:	bl	15d40 <__assert_fail@plt+0x482c>
   15df0:	add	sp, sp, #12
   15df4:	pop	{pc}		; (ldr pc, [sp], #4)
   15df8:	ldr	r3, [pc]	; 15e00 <__assert_fail@plt+0x48ec>
   15dfc:	b	15714 <__assert_fail@plt+0x4200>
   15e00:	andeq	r9, r2, r0, lsl #3
   15e04:	mov	r2, r1
   15e08:	mov	r1, r0
   15e0c:	mov	r0, #0
   15e10:	b	15df8 <__assert_fail@plt+0x48e4>
   15e14:	mvn	r2, #0
   15e18:	b	15df8 <__assert_fail@plt+0x48e4>
   15e1c:	mov	r1, r0
   15e20:	mov	r0, #0
   15e24:	b	15e14 <__assert_fail@plt+0x4900>
   15e28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e2c:	mov	r7, r0
   15e30:	mov	r8, r1
   15e34:	mov	r9, r2
   15e38:	ldr	r5, [pc, #80]	; 15e90 <__assert_fail@plt+0x497c>
   15e3c:	mov	r2, r9
   15e40:	mov	r1, r8
   15e44:	mov	r0, r7
   15e48:	bl	111a8 <read@plt>
   15e4c:	subs	r6, r0, #0
   15e50:	bge	15e80 <__assert_fail@plt+0x496c>
   15e54:	bl	113b8 <__errno_location@plt>
   15e58:	ldr	r3, [r0]
   15e5c:	cmp	r3, #4
   15e60:	beq	15e3c <__assert_fail@plt+0x4928>
   15e64:	cmp	r9, r5
   15e68:	movls	r4, #0
   15e6c:	movhi	r4, #1
   15e70:	cmp	r3, #22
   15e74:	movne	r4, #0
   15e78:	cmp	r4, #0
   15e7c:	bne	15e88 <__assert_fail@plt+0x4974>
   15e80:	mov	r0, r6
   15e84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e88:	mov	r9, r5
   15e8c:	b	15e3c <__assert_fail@plt+0x4928>
   15e90:	svcvc	0x00f00000	; IMB
   15e94:	push	{r4, r5, r6, r7, r8, lr}
   15e98:	mov	r7, r0
   15e9c:	mov	r8, r1
   15ea0:	mov	r4, r2
   15ea4:	ldr	r5, [pc, #80]	; 15efc <__assert_fail@plt+0x49e8>
   15ea8:	mov	r2, r4
   15eac:	mov	r1, r8
   15eb0:	mov	r0, r7
   15eb4:	bl	113f4 <write@plt>
   15eb8:	subs	r6, r0, #0
   15ebc:	bge	15eec <__assert_fail@plt+0x49d8>
   15ec0:	bl	113b8 <__errno_location@plt>
   15ec4:	ldr	r2, [r0]
   15ec8:	cmp	r2, #4
   15ecc:	beq	15ea8 <__assert_fail@plt+0x4994>
   15ed0:	sub	r3, r2, #22
   15ed4:	cmp	r4, r5
   15ed8:	clz	r3, r3
   15edc:	lsr	r3, r3, #5
   15ee0:	movls	r3, #0
   15ee4:	cmp	r3, #0
   15ee8:	bne	15ef4 <__assert_fail@plt+0x49e0>
   15eec:	mov	r0, r6
   15ef0:	pop	{r4, r5, r6, r7, r8, pc}
   15ef4:	mov	r4, r5
   15ef8:	b	15ea8 <__assert_fail@plt+0x4994>
   15efc:	svcvc	0x00f00000	; IMB
   15f00:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15f04:	mov	r6, r1
   15f08:	ldrb	r3, [r0]
   15f0c:	sub	r3, r3, #48	; 0x30
   15f10:	cmp	r3, #9
   15f14:	bhi	15f48 <__assert_fail@plt+0x4a34>
   15f18:	mov	r2, #10
   15f1c:	add	r1, sp, #4
   15f20:	bl	1119c <strtol@plt>
   15f24:	ldr	r3, [sp, #4]
   15f28:	ldrb	r3, [r3]
   15f2c:	cmp	r0, #64	; 0x40
   15f30:	cmple	r3, #0
   15f34:	beq	15f78 <__assert_fail@plt+0x4a64>
   15f38:	mvn	r0, #0
   15f3c:	str	r0, [r6]
   15f40:	add	sp, sp, #12
   15f44:	pop	{r4, r5, r6, r7, pc}
   15f48:	ldr	r5, [pc, #276]	; 16064 <__assert_fail@plt+0x4b50>
   15f4c:	mov	r7, r0
   15f50:	mov	r4, #0
   15f54:	mov	r1, r7
   15f58:	mov	r0, r5
   15f5c:	bl	11190 <strcmp@plt>
   15f60:	cmp	r0, #0
   15f64:	bne	15f84 <__assert_fail@plt+0x4a70>
   15f68:	mov	r3, #12
   15f6c:	mul	r4, r3, r4
   15f70:	ldr	r3, [pc, #240]	; 16068 <__assert_fail@plt+0x4b54>
   15f74:	ldr	r0, [r3, r4]
   15f78:	str	r0, [r6]
   15f7c:	asr	r0, r0, #31
   15f80:	b	15f40 <__assert_fail@plt+0x4a2c>
   15f84:	add	r4, r4, #1
   15f88:	add	r5, r5, #12
   15f8c:	cmp	r4, #35	; 0x23
   15f90:	bne	15f54 <__assert_fail@plt+0x4a40>
   15f94:	bl	114cc <__libc_current_sigrtmin@plt>
   15f98:	mov	r5, r0
   15f9c:	bl	1137c <__libc_current_sigrtmax@plt>
   15fa0:	cmp	r5, #0
   15fa4:	mov	r4, r0
   15fa8:	ble	15ffc <__assert_fail@plt+0x4ae8>
   15fac:	mov	r2, #5
   15fb0:	ldr	r1, [pc, #180]	; 1606c <__assert_fail@plt+0x4b58>
   15fb4:	mov	r0, r7
   15fb8:	bl	114e4 <strncmp@plt>
   15fbc:	cmp	r0, #0
   15fc0:	bne	15ffc <__assert_fail@plt+0x4ae8>
   15fc4:	mov	r2, #10
   15fc8:	add	r1, sp, #4
   15fcc:	add	r0, r7, #5
   15fd0:	bl	1119c <strtol@plt>
   15fd4:	ldr	r3, [sp, #4]
   15fd8:	ldrb	r3, [r3]
   15fdc:	cmp	r0, #0
   15fe0:	cmpge	r3, #0
   15fe4:	bne	15f38 <__assert_fail@plt+0x4a24>
   15fe8:	sub	r4, r4, r5
   15fec:	cmp	r0, r4
   15ff0:	addle	r0, r5, r0
   15ff4:	ble	15f78 <__assert_fail@plt+0x4a64>
   15ff8:	b	15f38 <__assert_fail@plt+0x4a24>
   15ffc:	cmp	r4, #0
   16000:	ble	15f38 <__assert_fail@plt+0x4a24>
   16004:	mov	r2, #5
   16008:	ldr	r1, [pc, #96]	; 16070 <__assert_fail@plt+0x4b5c>
   1600c:	mov	r0, r7
   16010:	bl	114e4 <strncmp@plt>
   16014:	cmp	r0, #0
   16018:	bne	15f38 <__assert_fail@plt+0x4a24>
   1601c:	mov	r2, #10
   16020:	add	r1, sp, #4
   16024:	add	r0, r7, #5
   16028:	bl	1119c <strtol@plt>
   1602c:	ldr	r3, [sp, #4]
   16030:	ldrb	r3, [r3]
   16034:	cmp	r3, #0
   16038:	bne	15f38 <__assert_fail@plt+0x4a24>
   1603c:	sub	r3, r5, r4
   16040:	cmp	r0, r3
   16044:	movlt	r5, #0
   16048:	movge	r5, #1
   1604c:	cmp	r0, #0
   16050:	movgt	r5, #0
   16054:	cmp	r5, #0
   16058:	addne	r0, r4, r0
   1605c:	bne	15f78 <__assert_fail@plt+0x4a64>
   16060:	b	15f38 <__assert_fail@plt+0x4a24>
   16064:			; <UNDEFINED> instruction: 0x000291b4
   16068:			; <UNDEFINED> instruction: 0x000291b0
   1606c:	andeq	r8, r1, fp, lsl #16
   16070:	andeq	r8, r1, r1, lsl r8
   16074:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16078:	mov	r6, r1
   1607c:	mov	r4, r0
   16080:	mov	r3, #0
   16084:	mov	r0, #12
   16088:	ldr	r1, [pc, #184]	; 16148 <__assert_fail@plt+0x4c34>
   1608c:	mul	r2, r0, r3
   16090:	ldr	ip, [r2, r1]
   16094:	cmp	ip, r4
   16098:	bne	160b8 <__assert_fail@plt+0x4ba4>
   1609c:	add	r2, r2, #4
   160a0:	mov	r0, r6
   160a4:	add	r1, r1, r2
   160a8:	bl	112bc <strcpy@plt>
   160ac:	mov	r0, #0
   160b0:	add	sp, sp, #12
   160b4:	pop	{r4, r5, r6, r7, pc}
   160b8:	add	r3, r3, #1
   160bc:	cmp	r3, #35	; 0x23
   160c0:	bne	1608c <__assert_fail@plt+0x4b78>
   160c4:	bl	114cc <__libc_current_sigrtmin@plt>
   160c8:	mov	r5, r0
   160cc:	bl	1137c <__libc_current_sigrtmax@plt>
   160d0:	cmp	r4, r0
   160d4:	mov	r7, r0
   160d8:	movle	r3, #0
   160dc:	movgt	r3, #1
   160e0:	cmp	r4, r5
   160e4:	orrlt	r3, r3, #1
   160e8:	cmp	r3, #0
   160ec:	mvnne	r0, #0
   160f0:	bne	160b0 <__assert_fail@plt+0x4b9c>
   160f4:	sub	r3, r7, r5
   160f8:	add	r3, r5, r3, asr #1
   160fc:	cmp	r3, r4
   16100:	blt	16134 <__assert_fail@plt+0x4c20>
   16104:	ldr	r1, [pc, #64]	; 1614c <__assert_fail@plt+0x4c38>
   16108:	mov	r0, r6
   1610c:	bl	112bc <strcpy@plt>
   16110:	subs	r0, r4, r5
   16114:	beq	160b0 <__assert_fail@plt+0x4b9c>
   16118:	ldr	r3, [pc, #48]	; 16150 <__assert_fail@plt+0x4c3c>
   1611c:	mvn	r2, #0
   16120:	mov	r1, #1
   16124:	str	r0, [sp]
   16128:	add	r0, r6, #5
   1612c:	bl	113c4 <__sprintf_chk@plt>
   16130:	b	160ac <__assert_fail@plt+0x4b98>
   16134:	ldr	r1, [pc, #24]	; 16154 <__assert_fail@plt+0x4c40>
   16138:	mov	r0, r6
   1613c:	mov	r5, r7
   16140:	bl	112bc <strcpy@plt>
   16144:	b	16110 <__assert_fail@plt+0x4bfc>
   16148:			; <UNDEFINED> instruction: 0x000291b0
   1614c:	andeq	r8, r1, fp, lsl #16
   16150:	andeq	r8, r1, r7, lsl r8
   16154:	andeq	r8, r1, r1, lsl r8
   16158:	cmp	r0, #2
   1615c:	push	{r4, r5, r6, r7, r8, lr}
   16160:	mov	r4, r0
   16164:	bhi	1618c <__assert_fail@plt+0x4c78>
   16168:	bl	170d8 <__assert_fail@plt+0x5bc4>
   1616c:	mov	r6, r0
   16170:	bl	113b8 <__errno_location@plt>
   16174:	mov	r5, r0
   16178:	mov	r0, r4
   1617c:	ldr	r7, [r5]
   16180:	mov	r4, r6
   16184:	bl	114fc <close@plt>
   16188:	str	r7, [r5]
   1618c:	mov	r0, r4
   16190:	pop	{r4, r5, r6, r7, r8, pc}
   16194:	push	{r4, r5, r6, lr}
   16198:	cmp	r1, #0
   1619c:	sub	sp, sp, #32
   161a0:	mov	r5, r0
   161a4:	ldr	r4, [sp, #48]	; 0x30
   161a8:	ldr	r6, [sp, #52]	; 0x34
   161ac:	beq	16260 <__assert_fail@plt+0x4d4c>
   161b0:	strd	r2, [sp]
   161b4:	mov	r3, r1
   161b8:	mov	r1, #1
   161bc:	ldr	r2, [pc, #856]	; 1651c <__assert_fail@plt+0x5008>
   161c0:	bl	11418 <__fprintf_chk@plt>
   161c4:	mov	r2, #5
   161c8:	ldr	r1, [pc, #848]	; 16520 <__assert_fail@plt+0x500c>
   161cc:	mov	r0, #0
   161d0:	bl	11238 <dcgettext@plt>
   161d4:	movw	r3, #2022	; 0x7e6
   161d8:	ldr	r2, [pc, #836]	; 16524 <__assert_fail@plt+0x5010>
   161dc:	mov	r1, #1
   161e0:	str	r3, [sp]
   161e4:	mov	r3, r0
   161e8:	mov	r0, r5
   161ec:	bl	11418 <__fprintf_chk@plt>
   161f0:	mov	r1, r5
   161f4:	mov	r0, #10
   161f8:	bl	1122c <fputc_unlocked@plt>
   161fc:	mov	r2, #5
   16200:	ldr	r1, [pc, #800]	; 16528 <__assert_fail@plt+0x5014>
   16204:	mov	r0, #0
   16208:	bl	11238 <dcgettext@plt>
   1620c:	mov	r2, r0
   16210:	mov	r1, #1
   16214:	ldr	r3, [pc, #784]	; 1652c <__assert_fail@plt+0x5018>
   16218:	mov	r0, r5
   1621c:	bl	11418 <__fprintf_chk@plt>
   16220:	mov	r1, r5
   16224:	mov	r0, #10
   16228:	bl	1122c <fputc_unlocked@plt>
   1622c:	cmp	r6, #9
   16230:	ldrls	pc, [pc, r6, lsl #2]
   16234:	b	16510 <__assert_fail@plt+0x4ffc>
   16238:	andeq	r6, r1, r0, asr r3
   1623c:	andeq	r6, r1, r8, ror r2
   16240:	andeq	r6, r1, r4, lsr #5
   16244:	ldrdeq	r6, [r1], -r8
   16248:	andeq	r6, r1, r4, lsl r3
   1624c:	andeq	r6, r1, r8, asr r3
   16250:	andeq	r6, r1, r0, lsr #7
   16254:	strdeq	r6, [r1], -r0
   16258:	andeq	r6, r1, r8, asr #8
   1625c:	andeq	r6, r1, r8, lsr #9
   16260:	mov	r1, #1
   16264:	str	r3, [sp]
   16268:	mov	r3, r2
   1626c:	ldr	r2, [pc, #700]	; 16530 <__assert_fail@plt+0x501c>
   16270:	bl	11418 <__fprintf_chk@plt>
   16274:	b	161c4 <__assert_fail@plt+0x4cb0>
   16278:	mov	r2, #5
   1627c:	ldr	r1, [pc, #688]	; 16534 <__assert_fail@plt+0x5020>
   16280:	mov	r0, #0
   16284:	bl	11238 <dcgettext@plt>
   16288:	ldr	r3, [r4]
   1628c:	mov	r2, r0
   16290:	mov	r1, #1
   16294:	mov	r0, r5
   16298:	add	sp, sp, #32
   1629c:	pop	{r4, r5, r6, lr}
   162a0:	b	11418 <__fprintf_chk@plt>
   162a4:	mov	r2, #5
   162a8:	ldr	r1, [pc, #648]	; 16538 <__assert_fail@plt+0x5024>
   162ac:	mov	r0, #0
   162b0:	bl	11238 <dcgettext@plt>
   162b4:	ldr	r3, [r4, #4]
   162b8:	mov	r2, r0
   162bc:	mov	r1, #1
   162c0:	mov	r0, r5
   162c4:	str	r3, [sp, #48]	; 0x30
   162c8:	ldr	r3, [r4]
   162cc:	add	sp, sp, #32
   162d0:	pop	{r4, r5, r6, lr}
   162d4:	b	11418 <__fprintf_chk@plt>
   162d8:	mov	r2, #5
   162dc:	ldr	r1, [pc, #600]	; 1653c <__assert_fail@plt+0x5028>
   162e0:	mov	r0, #0
   162e4:	bl	11238 <dcgettext@plt>
   162e8:	ldr	r3, [r4, #8]
   162ec:	mov	r2, r0
   162f0:	mov	r1, #1
   162f4:	mov	r0, r5
   162f8:	str	r3, [sp, #52]	; 0x34
   162fc:	ldr	r3, [r4, #4]
   16300:	str	r3, [sp, #48]	; 0x30
   16304:	ldr	r3, [r4]
   16308:	add	sp, sp, #32
   1630c:	pop	{r4, r5, r6, lr}
   16310:	b	11418 <__fprintf_chk@plt>
   16314:	mov	r2, #5
   16318:	ldr	r1, [pc, #544]	; 16540 <__assert_fail@plt+0x502c>
   1631c:	mov	r0, #0
   16320:	bl	11238 <dcgettext@plt>
   16324:	ldr	r3, [r4, #12]
   16328:	mov	r2, r0
   1632c:	mov	r1, #1
   16330:	mov	r0, r5
   16334:	str	r3, [sp, #8]
   16338:	ldr	r3, [r4, #8]
   1633c:	str	r3, [sp, #4]
   16340:	ldr	r3, [r4, #4]
   16344:	str	r3, [sp]
   16348:	ldr	r3, [r4]
   1634c:	bl	11418 <__fprintf_chk@plt>
   16350:	add	sp, sp, #32
   16354:	pop	{r4, r5, r6, pc}
   16358:	mov	r2, #5
   1635c:	ldr	r1, [pc, #480]	; 16544 <__assert_fail@plt+0x5030>
   16360:	mov	r0, #0
   16364:	bl	11238 <dcgettext@plt>
   16368:	ldr	r3, [r4, #16]
   1636c:	mov	r2, r0
   16370:	mov	r1, #1
   16374:	mov	r0, r5
   16378:	str	r3, [sp, #12]
   1637c:	ldr	r3, [r4, #12]
   16380:	str	r3, [sp, #8]
   16384:	ldr	r3, [r4, #8]
   16388:	str	r3, [sp, #4]
   1638c:	ldr	r3, [r4, #4]
   16390:	str	r3, [sp]
   16394:	ldr	r3, [r4]
   16398:	bl	11418 <__fprintf_chk@plt>
   1639c:	b	16350 <__assert_fail@plt+0x4e3c>
   163a0:	mov	r2, #5
   163a4:	ldr	r1, [pc, #412]	; 16548 <__assert_fail@plt+0x5034>
   163a8:	mov	r0, #0
   163ac:	bl	11238 <dcgettext@plt>
   163b0:	ldr	r3, [r4, #20]
   163b4:	mov	r2, r0
   163b8:	mov	r1, #1
   163bc:	mov	r0, r5
   163c0:	str	r3, [sp, #16]
   163c4:	ldr	r3, [r4, #16]
   163c8:	str	r3, [sp, #12]
   163cc:	ldr	r3, [r4, #12]
   163d0:	str	r3, [sp, #8]
   163d4:	ldr	r3, [r4, #8]
   163d8:	str	r3, [sp, #4]
   163dc:	ldr	r3, [r4, #4]
   163e0:	str	r3, [sp]
   163e4:	ldr	r3, [r4]
   163e8:	bl	11418 <__fprintf_chk@plt>
   163ec:	b	16350 <__assert_fail@plt+0x4e3c>
   163f0:	mov	r2, #5
   163f4:	ldr	r1, [pc, #336]	; 1654c <__assert_fail@plt+0x5038>
   163f8:	mov	r0, #0
   163fc:	bl	11238 <dcgettext@plt>
   16400:	ldr	r3, [r4, #24]
   16404:	mov	r2, r0
   16408:	mov	r1, #1
   1640c:	mov	r0, r5
   16410:	str	r3, [sp, #20]
   16414:	ldr	r3, [r4, #20]
   16418:	str	r3, [sp, #16]
   1641c:	ldr	r3, [r4, #16]
   16420:	str	r3, [sp, #12]
   16424:	ldr	r3, [r4, #12]
   16428:	str	r3, [sp, #8]
   1642c:	ldr	r3, [r4, #8]
   16430:	str	r3, [sp, #4]
   16434:	ldr	r3, [r4, #4]
   16438:	str	r3, [sp]
   1643c:	ldr	r3, [r4]
   16440:	bl	11418 <__fprintf_chk@plt>
   16444:	b	16350 <__assert_fail@plt+0x4e3c>
   16448:	mov	r2, #5
   1644c:	ldr	r1, [pc, #252]	; 16550 <__assert_fail@plt+0x503c>
   16450:	mov	r0, #0
   16454:	bl	11238 <dcgettext@plt>
   16458:	ldr	r3, [r4, #28]
   1645c:	mov	r2, r0
   16460:	mov	r1, #1
   16464:	mov	r0, r5
   16468:	str	r3, [sp, #24]
   1646c:	ldr	r3, [r4, #24]
   16470:	str	r3, [sp, #20]
   16474:	ldr	r3, [r4, #20]
   16478:	str	r3, [sp, #16]
   1647c:	ldr	r3, [r4, #16]
   16480:	str	r3, [sp, #12]
   16484:	ldr	r3, [r4, #12]
   16488:	str	r3, [sp, #8]
   1648c:	ldr	r3, [r4, #8]
   16490:	str	r3, [sp, #4]
   16494:	ldr	r3, [r4, #4]
   16498:	str	r3, [sp]
   1649c:	ldr	r3, [r4]
   164a0:	bl	11418 <__fprintf_chk@plt>
   164a4:	b	16350 <__assert_fail@plt+0x4e3c>
   164a8:	ldr	r1, [pc, #164]	; 16554 <__assert_fail@plt+0x5040>
   164ac:	mov	r2, #5
   164b0:	mov	r0, #0
   164b4:	bl	11238 <dcgettext@plt>
   164b8:	ldr	r3, [r4, #32]
   164bc:	mov	r2, r0
   164c0:	mov	r1, #1
   164c4:	mov	r0, r5
   164c8:	str	r3, [sp, #28]
   164cc:	ldr	r3, [r4, #28]
   164d0:	str	r3, [sp, #24]
   164d4:	ldr	r3, [r4, #24]
   164d8:	str	r3, [sp, #20]
   164dc:	ldr	r3, [r4, #20]
   164e0:	str	r3, [sp, #16]
   164e4:	ldr	r3, [r4, #16]
   164e8:	str	r3, [sp, #12]
   164ec:	ldr	r3, [r4, #12]
   164f0:	str	r3, [sp, #8]
   164f4:	ldr	r3, [r4, #8]
   164f8:	str	r3, [sp, #4]
   164fc:	ldr	r3, [r4, #4]
   16500:	str	r3, [sp]
   16504:	ldr	r3, [r4]
   16508:	bl	11418 <__fprintf_chk@plt>
   1650c:	b	16350 <__assert_fail@plt+0x4e3c>
   16510:	mov	r2, #5
   16514:	ldr	r1, [pc, #60]	; 16558 <__assert_fail@plt+0x5044>
   16518:	b	164b0 <__assert_fail@plt+0x4f9c>
   1651c:	andeq	r8, r1, fp, lsl r8
   16520:	andeq	r8, r1, lr, lsr #16
   16524:	strdeq	r8, [r1], -ip
   16528:	andeq	r8, r1, r2, lsr r8
   1652c:	ldrdeq	r8, [r1], -sp
   16530:	andeq	r8, r1, r7, lsr #16
   16534:	strdeq	r8, [r1], -pc	; <UNPREDICTABLE>
   16538:	andeq	r8, r1, pc, lsl #18
   1653c:	andeq	r8, r1, r6, lsr #18
   16540:	andeq	r8, r1, r2, asr #18
   16544:	andeq	r8, r1, r2, ror #18
   16548:	andeq	r8, r1, r6, lsl #19
   1654c:	andeq	r8, r1, lr, lsr #19
   16550:	ldrdeq	r8, [r1], -sl
   16554:	andeq	r8, r1, sl, lsl #20
   16558:	andeq	r8, r1, lr, lsr sl
   1655c:	push	{r0, r1, r4, lr}
   16560:	mov	ip, #0
   16564:	ldr	lr, [sp, #16]
   16568:	ldr	r4, [lr, ip, lsl #2]
   1656c:	cmp	r4, #0
   16570:	bne	16588 <__assert_fail@plt+0x5074>
   16574:	str	lr, [sp]
   16578:	str	ip, [sp, #4]
   1657c:	bl	16194 <__assert_fail@plt+0x4c80>
   16580:	add	sp, sp, #8
   16584:	pop	{r4, pc}
   16588:	add	ip, ip, #1
   1658c:	b	16568 <__assert_fail@plt+0x5054>
   16590:	push	{r4, r5, r6, lr}
   16594:	sub	sp, sp, #48	; 0x30
   16598:	mov	ip, #0
   1659c:	add	lr, sp, #8
   165a0:	mov	r5, lr
   165a4:	ldr	r6, [sp, #64]	; 0x40
   165a8:	ldr	r4, [r6, ip, lsl #2]
   165ac:	cmp	r4, #0
   165b0:	str	r4, [lr], #4
   165b4:	beq	165c4 <__assert_fail@plt+0x50b0>
   165b8:	add	ip, ip, #1
   165bc:	cmp	ip, #10
   165c0:	bne	165a8 <__assert_fail@plt+0x5094>
   165c4:	stm	sp, {r5, ip}
   165c8:	bl	16194 <__assert_fail@plt+0x4c80>
   165cc:	add	sp, sp, #48	; 0x30
   165d0:	pop	{r4, r5, r6, pc}
   165d4:	push	{r3}		; (str r3, [sp, #-4]!)
   165d8:	push	{r0, r1, r2, r3, lr}
   165dc:	add	r3, sp, #24
   165e0:	str	r3, [sp]
   165e4:	str	r3, [sp, #12]
   165e8:	ldr	r3, [sp, #20]
   165ec:	bl	16590 <__assert_fail@plt+0x507c>
   165f0:	add	sp, sp, #16
   165f4:	pop	{lr}		; (ldr lr, [sp], #4)
   165f8:	add	sp, sp, #4
   165fc:	bx	lr
   16600:	ldr	r3, [pc, #116]	; 1667c <__assert_fail@plt+0x5168>
   16604:	mov	r0, #10
   16608:	push	{r4, lr}
   1660c:	ldr	r1, [r3]
   16610:	bl	1122c <fputc_unlocked@plt>
   16614:	mov	r2, #5
   16618:	ldr	r1, [pc, #96]	; 16680 <__assert_fail@plt+0x516c>
   1661c:	mov	r0, #0
   16620:	bl	11238 <dcgettext@plt>
   16624:	mov	r1, r0
   16628:	ldr	r2, [pc, #84]	; 16684 <__assert_fail@plt+0x5170>
   1662c:	mov	r0, #1
   16630:	bl	113e8 <__printf_chk@plt>
   16634:	mov	r2, #5
   16638:	ldr	r1, [pc, #72]	; 16688 <__assert_fail@plt+0x5174>
   1663c:	mov	r0, #0
   16640:	bl	11238 <dcgettext@plt>
   16644:	mov	r1, r0
   16648:	ldr	r3, [pc, #60]	; 1668c <__assert_fail@plt+0x5178>
   1664c:	mov	r0, #1
   16650:	ldr	r2, [pc, #56]	; 16690 <__assert_fail@plt+0x517c>
   16654:	bl	113e8 <__printf_chk@plt>
   16658:	mov	r2, #5
   1665c:	ldr	r1, [pc, #48]	; 16694 <__assert_fail@plt+0x5180>
   16660:	mov	r0, #0
   16664:	bl	11238 <dcgettext@plt>
   16668:	mov	r1, r0
   1666c:	ldr	r2, [pc, #36]	; 16698 <__assert_fail@plt+0x5184>
   16670:	mov	r0, #1
   16674:	pop	{r4, lr}
   16678:	b	113e8 <__printf_chk@plt>
   1667c:	andeq	r9, r2, ip, ror #6
   16680:	andeq	r8, r1, sl, ror sl
   16684:	andeq	r8, r1, lr, lsl #21
   16688:	andeq	r8, r1, r4, lsr #21
   1668c:	andeq	r8, r1, pc, asr #3
   16690:	strdeq	r8, [r1], -r7
   16694:			; <UNDEFINED> instruction: 0x00018ab8
   16698:	ldrdeq	r8, [r1], -pc	; <UNPREDICTABLE>
   1669c:	push	{r4, lr}
   166a0:	bl	114c0 <aligned_alloc@plt>
   166a4:	cmp	r0, #0
   166a8:	popne	{r4, pc}
   166ac:	bl	16968 <__assert_fail@plt+0x5454>
   166b0:	push	{r4, lr}
   166b4:	bl	16f20 <__assert_fail@plt+0x5a0c>
   166b8:	cmp	r0, #0
   166bc:	popne	{r4, pc}
   166c0:	bl	16968 <__assert_fail@plt+0x5454>
   166c4:	push	{r4, lr}
   166c8:	bl	16f20 <__assert_fail@plt+0x5a0c>
   166cc:	cmp	r0, #0
   166d0:	popne	{r4, pc}
   166d4:	bl	16968 <__assert_fail@plt+0x5454>
   166d8:	b	166b0 <__assert_fail@plt+0x519c>
   166dc:	push	{r4, r5, r6, lr}
   166e0:	mov	r5, r0
   166e4:	mov	r4, r1
   166e8:	bl	16f4c <__assert_fail@plt+0x5a38>
   166ec:	cmp	r0, #0
   166f0:	popne	{r4, r5, r6, pc}
   166f4:	adds	r4, r4, #0
   166f8:	movne	r4, #1
   166fc:	cmp	r5, #0
   16700:	moveq	r4, #1
   16704:	cmp	r4, #0
   16708:	popeq	{r4, r5, r6, pc}
   1670c:	bl	16968 <__assert_fail@plt+0x5454>
   16710:	push	{r4, lr}
   16714:	bl	17004 <__assert_fail@plt+0x5af0>
   16718:	cmp	r0, #0
   1671c:	popne	{r4, pc}
   16720:	bl	16968 <__assert_fail@plt+0x5454>
   16724:	push	{r4, r5, r6, lr}
   16728:	mov	r6, r0
   1672c:	mov	r5, r1
   16730:	mov	r4, r2
   16734:	bl	170ac <__assert_fail@plt+0x5b98>
   16738:	cmp	r0, #0
   1673c:	popne	{r4, r5, r6, pc}
   16740:	cmp	r6, #0
   16744:	beq	16754 <__assert_fail@plt+0x5240>
   16748:	cmp	r5, #0
   1674c:	cmpne	r4, #0
   16750:	popeq	{r4, r5, r6, pc}
   16754:	bl	16968 <__assert_fail@plt+0x5454>
   16758:	b	16724 <__assert_fail@plt+0x5210>
   1675c:	push	{r4, lr}
   16760:	bl	17014 <__assert_fail@plt+0x5b00>
   16764:	cmp	r0, #0
   16768:	popne	{r4, pc}
   1676c:	bl	16968 <__assert_fail@plt+0x5454>
   16770:	mov	r2, r1
   16774:	mov	r1, r0
   16778:	mov	r0, #0
   1677c:	b	16724 <__assert_fail@plt+0x5210>
   16780:	mov	r2, r1
   16784:	mov	r1, r0
   16788:	mov	r0, #0
   1678c:	b	1675c <__assert_fail@plt+0x5248>
   16790:	cmp	r0, #0
   16794:	push	{r4, r5, r6, lr}
   16798:	mov	r5, r1
   1679c:	ldr	r4, [r1]
   167a0:	bne	167cc <__assert_fail@plt+0x52b8>
   167a4:	cmp	r4, #0
   167a8:	bne	167bc <__assert_fail@plt+0x52a8>
   167ac:	mov	r4, #64	; 0x40
   167b0:	udiv	r4, r4, r2
   167b4:	cmp	r2, #64	; 0x40
   167b8:	addhi	r4, r4, #1
   167bc:	mov	r1, r4
   167c0:	bl	16724 <__assert_fail@plt+0x5210>
   167c4:	str	r4, [r5]
   167c8:	pop	{r4, r5, r6, pc}
   167cc:	lsr	r3, r4, #1
   167d0:	add	r3, r3, #1
   167d4:	adds	r4, r4, r3
   167d8:	bcc	167bc <__assert_fail@plt+0x52a8>
   167dc:	bl	16968 <__assert_fail@plt+0x5454>
   167e0:	mov	r2, #1
   167e4:	b	16790 <__assert_fail@plt+0x527c>
   167e8:	ldr	ip, [r1]
   167ec:	push	{r4, r5, r6, r7, r8, lr}
   167f0:	mov	r5, r1
   167f4:	mvn	r8, r3
   167f8:	lsr	r8, r8, #31
   167fc:	ldr	lr, [sp, #24]
   16800:	asr	r1, ip, #1
   16804:	adds	r4, ip, r1
   16808:	mvnvs	r4, #-2147483648	; 0x80000000
   1680c:	cmp	r3, r4
   16810:	movge	r1, #0
   16814:	andlt	r1, r8, #1
   16818:	cmp	r1, #0
   1681c:	movne	r4, r3
   16820:	smull	r6, r7, r4, lr
   16824:	cmp	r7, r6, asr #31
   16828:	bne	16840 <__assert_fail@plt+0x532c>
   1682c:	cmp	r6, #63	; 0x3f
   16830:	mov	r1, r6
   16834:	bgt	16850 <__assert_fail@plt+0x533c>
   16838:	mov	r1, #64	; 0x40
   1683c:	b	16844 <__assert_fail@plt+0x5330>
   16840:	mvn	r1, #-2147483648	; 0x80000000
   16844:	sdiv	r4, r1, lr
   16848:	mls	r6, lr, r4, r1
   1684c:	sub	r1, r1, r6
   16850:	cmp	r0, #0
   16854:	sub	r6, r4, ip
   16858:	streq	r0, [r5]
   1685c:	cmp	r6, r2
   16860:	bge	16894 <__assert_fail@plt+0x5380>
   16864:	adds	r4, ip, r2
   16868:	bvs	16890 <__assert_fail@plt+0x537c>
   1686c:	cmp	r4, r3
   16870:	movle	r3, #0
   16874:	andgt	r3, r8, #1
   16878:	cmp	r3, #0
   1687c:	bne	16890 <__assert_fail@plt+0x537c>
   16880:	smull	r2, r3, r4, lr
   16884:	cmp	r3, r2, asr #31
   16888:	mov	r1, r2
   1688c:	beq	16894 <__assert_fail@plt+0x5380>
   16890:	bl	16968 <__assert_fail@plt+0x5454>
   16894:	bl	166dc <__assert_fail@plt+0x51c8>
   16898:	str	r4, [r5]
   1689c:	pop	{r4, r5, r6, r7, r8, pc}
   168a0:	push	{r4, lr}
   168a4:	bl	16ecc <__assert_fail@plt+0x59b8>
   168a8:	cmp	r0, #0
   168ac:	popne	{r4, pc}
   168b0:	bl	16968 <__assert_fail@plt+0x5454>
   168b4:	mov	r1, #1
   168b8:	b	168a0 <__assert_fail@plt+0x538c>
   168bc:	push	{r4, lr}
   168c0:	bl	16ecc <__assert_fail@plt+0x59b8>
   168c4:	cmp	r0, #0
   168c8:	popne	{r4, pc}
   168cc:	bl	16968 <__assert_fail@plt+0x5454>
   168d0:	mov	r1, #1
   168d4:	b	168bc <__assert_fail@plt+0x53a8>
   168d8:	push	{r4, r5, r6, lr}
   168dc:	mov	r4, r1
   168e0:	mov	r5, r0
   168e4:	mov	r0, r1
   168e8:	bl	166b0 <__assert_fail@plt+0x519c>
   168ec:	mov	r2, r4
   168f0:	mov	r1, r5
   168f4:	pop	{r4, r5, r6, lr}
   168f8:	b	111f0 <memcpy@plt>
   168fc:	push	{r4, r5, r6, lr}
   16900:	mov	r4, r1
   16904:	mov	r5, r0
   16908:	mov	r0, r1
   1690c:	bl	166c4 <__assert_fail@plt+0x51b0>
   16910:	mov	r2, r4
   16914:	mov	r1, r5
   16918:	pop	{r4, r5, r6, lr}
   1691c:	b	111f0 <memcpy@plt>
   16920:	push	{r4, r5, r6, lr}
   16924:	mov	r5, r0
   16928:	add	r0, r1, #1
   1692c:	mov	r4, r1
   16930:	bl	166c4 <__assert_fail@plt+0x51b0>
   16934:	mov	r2, #0
   16938:	mov	r1, r5
   1693c:	strb	r2, [r0, r4]
   16940:	mov	r2, r4
   16944:	pop	{r4, r5, r6, lr}
   16948:	b	111f0 <memcpy@plt>
   1694c:	push	{r4, lr}
   16950:	mov	r4, r0
   16954:	bl	11370 <strlen@plt>
   16958:	add	r1, r0, #1
   1695c:	mov	r0, r4
   16960:	pop	{r4, lr}
   16964:	b	168d8 <__assert_fail@plt+0x53c4>
   16968:	ldr	r3, [pc, #44]	; 1699c <__assert_fail@plt+0x5488>
   1696c:	mov	r2, #5
   16970:	mov	r0, #0
   16974:	push	{r4, lr}
   16978:	ldr	r1, [pc, #32]	; 169a0 <__assert_fail@plt+0x548c>
   1697c:	ldr	r4, [r3]
   16980:	bl	11238 <dcgettext@plt>
   16984:	mov	r3, r0
   16988:	ldr	r2, [pc, #20]	; 169a4 <__assert_fail@plt+0x5490>
   1698c:	mov	r1, #0
   16990:	mov	r0, r4
   16994:	bl	112ec <error@plt>
   16998:	bl	114f0 <abort@plt>
   1699c:	andeq	r9, r2, ip, ror #2
   169a0:	andeq	r8, r1, fp, lsr #22
   169a4:	andeq	r7, r1, r3, lsl r9
   169a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   169ac:	sub	sp, sp, #20
   169b0:	mov	r9, r3
   169b4:	mov	r8, r2
   169b8:	mov	r2, r1
   169bc:	mov	r1, #0
   169c0:	mov	r7, r0
   169c4:	ldr	r3, [sp, #56]	; 0x38
   169c8:	ldr	r6, [sp, #64]	; 0x40
   169cc:	str	r3, [sp]
   169d0:	add	r3, sp, #8
   169d4:	bl	16b38 <__assert_fail@plt+0x5624>
   169d8:	subs	r4, r0, #0
   169dc:	bne	16a6c <__assert_fail@plt+0x5558>
   169e0:	ldrd	r4, [sp, #8]
   169e4:	ldrd	r2, [sp, #48]	; 0x30
   169e8:	cmp	r5, r9
   169ec:	cmpeq	r4, r8
   169f0:	movcc	r1, #1
   169f4:	movcs	r1, #0
   169f8:	cmp	r5, r3
   169fc:	cmpeq	r4, r2
   16a00:	movls	r3, r1
   16a04:	orrhi	r3, r1, #1
   16a08:	cmp	r3, #0
   16a0c:	beq	16a88 <__assert_fail@plt+0x5574>
   16a10:	bl	113b8 <__errno_location@plt>
   16a14:	mov	r3, #0
   16a18:	mvn	r2, #-1073741824	; 0xc0000000
   16a1c:	cmp	r5, r3
   16a20:	cmpeq	r4, r2
   16a24:	movls	r3, #34	; 0x22
   16a28:	bls	16a30 <__assert_fail@plt+0x551c>
   16a2c:	mov	r3, #75	; 0x4b
   16a30:	str	r3, [r0]
   16a34:	cmp	r6, #0
   16a38:	moveq	r6, #1
   16a3c:	bl	113b8 <__errno_location@plt>
   16a40:	ldr	r4, [r0]
   16a44:	mov	r0, r7
   16a48:	cmp	r4, #22
   16a4c:	moveq	r4, #0
   16a50:	bl	15e1c <__assert_fail@plt+0x4908>
   16a54:	ldr	r2, [pc, #60]	; 16a98 <__assert_fail@plt+0x5584>
   16a58:	mov	r1, r4
   16a5c:	str	r0, [sp]
   16a60:	mov	r0, r6
   16a64:	ldr	r3, [sp, #60]	; 0x3c
   16a68:	bl	112ec <error@plt>
   16a6c:	bl	113b8 <__errno_location@plt>
   16a70:	cmp	r4, #1
   16a74:	beq	16a2c <__assert_fail@plt+0x5518>
   16a78:	cmp	r4, #3
   16a7c:	bne	16a34 <__assert_fail@plt+0x5520>
   16a80:	mov	r3, #0
   16a84:	b	16a30 <__assert_fail@plt+0x551c>
   16a88:	mov	r0, r4
   16a8c:	mov	r1, r5
   16a90:	add	sp, sp, #20
   16a94:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16a98:	andeq	r8, r1, lr, lsl #10
   16a9c:	mov	r1, #10
   16aa0:	b	169a8 <__assert_fail@plt+0x5494>
   16aa4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16aa8:	mov	ip, r0
   16aac:	asr	fp, r1, #31
   16ab0:	mov	r0, #0
   16ab4:	mov	lr, r0
   16ab8:	subs	r2, r2, #1
   16abc:	bcs	16ac8 <__assert_fail@plt+0x55b4>
   16ac0:	add	sp, sp, #12
   16ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ac8:	ldrd	r8, [ip]
   16acc:	mov	r3, #0
   16ad0:	cmp	r9, r3
   16ad4:	umulleq	r8, r9, r8, r1
   16ad8:	moveq	r6, r8
   16adc:	moveq	r4, r9
   16ae0:	beq	16b18 <__assert_fail@plt+0x5604>
   16ae4:	umull	r4, r5, r8, r1
   16ae8:	strd	r4, [sp]
   16aec:	mov	r5, lr
   16af0:	ldr	r4, [sp, #4]
   16af4:	umlal	r4, r5, r9, r1
   16af8:	cmp	r5, #0
   16afc:	ldrne	r3, [sp, #4]
   16b00:	mulne	r4, r1, r9
   16b04:	ldreq	r6, [sp]
   16b08:	mlane	r4, r8, fp, r4
   16b0c:	ldrne	r6, [sp]
   16b10:	addne	r4, r4, r3
   16b14:	movne	r3, #1
   16b18:	cmp	r3, #0
   16b1c:	mvnne	r6, #0
   16b20:	movne	r3, #1
   16b24:	movne	r4, r6
   16b28:	orr	r0, r0, r3
   16b2c:	str	r6, [ip]
   16b30:	str	r4, [ip, #4]
   16b34:	b	16ab8 <__assert_fail@plt+0x55a4>
   16b38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b3c:	cmp	r2, #36	; 0x24
   16b40:	sub	sp, sp, #20
   16b44:	ldr	r5, [sp, #56]	; 0x38
   16b48:	bls	16b60 <__assert_fail@plt+0x564c>
   16b4c:	ldr	r3, [pc, #876]	; 16ec0 <__assert_fail@plt+0x59ac>
   16b50:	mov	r2, #85	; 0x55
   16b54:	ldr	r1, [pc, #872]	; 16ec4 <__assert_fail@plt+0x59b0>
   16b58:	ldr	r0, [pc, #872]	; 16ec8 <__assert_fail@plt+0x59b4>
   16b5c:	bl	11514 <__assert_fail@plt>
   16b60:	cmp	r1, #0
   16b64:	mov	r6, r1
   16b68:	mov	r8, r0
   16b6c:	mov	fp, r2
   16b70:	mov	r7, r3
   16b74:	addeq	r6, sp, #4
   16b78:	bl	113b8 <__errno_location@plt>
   16b7c:	mov	r3, #0
   16b80:	mov	sl, r0
   16b84:	str	r3, [r0]
   16b88:	bl	11358 <__ctype_b_loc@plt>
   16b8c:	ldrb	r9, [r8]
   16b90:	mov	r3, r8
   16b94:	ldr	r1, [r0]
   16b98:	lsl	r2, r9, #1
   16b9c:	ldrh	r4, [r1, r2]
   16ba0:	ands	r4, r4, #8192	; 0x2000
   16ba4:	bne	16bc0 <__assert_fail@plt+0x56ac>
   16ba8:	cmp	r9, #45	; 0x2d
   16bac:	bne	16bc8 <__assert_fail@plt+0x56b4>
   16bb0:	mov	r4, #4
   16bb4:	mov	r0, r4
   16bb8:	add	sp, sp, #20
   16bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bc0:	ldrb	r9, [r3, #1]!
   16bc4:	b	16b98 <__assert_fail@plt+0x5684>
   16bc8:	mov	r2, fp
   16bcc:	mov	r1, r6
   16bd0:	mov	r0, r8
   16bd4:	bl	1140c <strtoumax@plt>
   16bd8:	ldr	r9, [r6]
   16bdc:	strd	r0, [sp, #8]
   16be0:	cmp	r9, r8
   16be4:	bne	16c48 <__assert_fail@plt+0x5734>
   16be8:	cmp	r5, #0
   16bec:	beq	16bb0 <__assert_fail@plt+0x569c>
   16bf0:	ldrb	r1, [r8]
   16bf4:	cmp	r1, #0
   16bf8:	beq	16bb0 <__assert_fail@plt+0x569c>
   16bfc:	mov	r0, r5
   16c00:	bl	11388 <strchr@plt>
   16c04:	cmp	r0, #0
   16c08:	movne	r2, #1
   16c0c:	movne	r3, #0
   16c10:	strdne	r2, [sp, #8]
   16c14:	beq	16bb0 <__assert_fail@plt+0x569c>
   16c18:	ldrb	r8, [r9]
   16c1c:	cmp	r8, #0
   16c20:	beq	16e78 <__assert_fail@plt+0x5964>
   16c24:	mov	r1, r8
   16c28:	mov	r0, r5
   16c2c:	bl	11388 <strchr@plt>
   16c30:	cmp	r0, #0
   16c34:	bne	16c70 <__assert_fail@plt+0x575c>
   16c38:	ldrd	r2, [sp, #8]
   16c3c:	orr	r4, r4, #2
   16c40:	strd	r2, [r7]
   16c44:	b	16bb4 <__assert_fail@plt+0x56a0>
   16c48:	ldr	r4, [sl]
   16c4c:	cmp	r4, #0
   16c50:	beq	16c60 <__assert_fail@plt+0x574c>
   16c54:	cmp	r4, #34	; 0x22
   16c58:	bne	16bb0 <__assert_fail@plt+0x569c>
   16c5c:	mov	r4, #1
   16c60:	cmp	r5, #0
   16c64:	strdeq	r0, [r7]
   16c68:	bne	16c18 <__assert_fail@plt+0x5704>
   16c6c:	b	16bb4 <__assert_fail@plt+0x56a0>
   16c70:	cmp	r8, #84	; 0x54
   16c74:	beq	16cc8 <__assert_fail@plt+0x57b4>
   16c78:	bhi	16cb0 <__assert_fail@plt+0x579c>
   16c7c:	cmp	r8, #75	; 0x4b
   16c80:	beq	16cc8 <__assert_fail@plt+0x57b4>
   16c84:	bhi	16ca0 <__assert_fail@plt+0x578c>
   16c88:	cmp	r8, #69	; 0x45
   16c8c:	beq	16cc8 <__assert_fail@plt+0x57b4>
   16c90:	cmp	r8, #71	; 0x47
   16c94:	beq	16cc8 <__assert_fail@plt+0x57b4>
   16c98:	mov	r5, #1
   16c9c:	b	16d80 <__assert_fail@plt+0x586c>
   16ca0:	cmp	r8, #77	; 0x4d
   16ca4:	beq	16cc8 <__assert_fail@plt+0x57b4>
   16ca8:	cmp	r8, #80	; 0x50
   16cac:	b	16c94 <__assert_fail@plt+0x5780>
   16cb0:	cmp	r8, #103	; 0x67
   16cb4:	beq	16cc8 <__assert_fail@plt+0x57b4>
   16cb8:	bhi	16d58 <__assert_fail@plt+0x5844>
   16cbc:	sub	r3, r8, #89	; 0x59
   16cc0:	cmp	r3, #1
   16cc4:	bhi	16c98 <__assert_fail@plt+0x5784>
   16cc8:	mov	r1, #48	; 0x30
   16ccc:	mov	r0, r5
   16cd0:	bl	11388 <strchr@plt>
   16cd4:	cmp	r0, #0
   16cd8:	beq	16c98 <__assert_fail@plt+0x5784>
   16cdc:	ldrb	r3, [r9, #1]
   16ce0:	cmp	r3, #68	; 0x44
   16ce4:	moveq	r5, #2
   16ce8:	moveq	r1, #1000	; 0x3e8
   16cec:	beq	16d0c <__assert_fail@plt+0x57f8>
   16cf0:	cmp	r3, #105	; 0x69
   16cf4:	beq	16d70 <__assert_fail@plt+0x585c>
   16cf8:	cmp	r3, #66	; 0x42
   16cfc:	moveq	r5, #2
   16d00:	movne	r5, #1
   16d04:	moveq	r1, #1000	; 0x3e8
   16d08:	movne	r1, #1024	; 0x400
   16d0c:	cmp	r8, #89	; 0x59
   16d10:	beq	16ea8 <__assert_fail@plt+0x5994>
   16d14:	bhi	16da8 <__assert_fail@plt+0x5894>
   16d18:	cmp	r8, #75	; 0x4b
   16d1c:	beq	16de8 <__assert_fail@plt+0x58d4>
   16d20:	bhi	16d88 <__assert_fail@plt+0x5874>
   16d24:	cmp	r8, #69	; 0x45
   16d28:	beq	16e84 <__assert_fail@plt+0x5970>
   16d2c:	cmp	r8, #71	; 0x47
   16d30:	beq	16e90 <__assert_fail@plt+0x597c>
   16d34:	cmp	r8, #66	; 0x42
   16d38:	bne	16c38 <__assert_fail@plt+0x5724>
   16d3c:	ldr	r3, [sp, #8]
   16d40:	ldr	r1, [sp, #12]
   16d44:	lsl	r2, r1, #10
   16d48:	lsr	r0, r1, #22
   16d4c:	orr	r2, r2, r3, lsr #22
   16d50:	lsl	r3, r3, #10
   16d54:	b	16e34 <__assert_fail@plt+0x5920>
   16d58:	cmp	r8, #109	; 0x6d
   16d5c:	beq	16cc8 <__assert_fail@plt+0x57b4>
   16d60:	cmp	r8, #116	; 0x74
   16d64:	beq	16cc8 <__assert_fail@plt+0x57b4>
   16d68:	cmp	r8, #107	; 0x6b
   16d6c:	b	16c94 <__assert_fail@plt+0x5780>
   16d70:	ldrb	r3, [r9, #2]
   16d74:	cmp	r3, #66	; 0x42
   16d78:	movne	r5, #1
   16d7c:	moveq	r5, #3
   16d80:	mov	r1, #1024	; 0x400
   16d84:	b	16d0c <__assert_fail@plt+0x57f8>
   16d88:	cmp	r8, #80	; 0x50
   16d8c:	beq	16e98 <__assert_fail@plt+0x5984>
   16d90:	cmp	r8, #84	; 0x54
   16d94:	beq	16ea0 <__assert_fail@plt+0x598c>
   16d98:	cmp	r8, #77	; 0x4d
   16d9c:	bne	16c38 <__assert_fail@plt+0x5724>
   16da0:	mov	r2, #2
   16da4:	b	16e88 <__assert_fail@plt+0x5974>
   16da8:	cmp	r8, #103	; 0x67
   16dac:	beq	16e90 <__assert_fail@plt+0x597c>
   16db0:	bhi	16dd4 <__assert_fail@plt+0x58c0>
   16db4:	cmp	r8, #98	; 0x62
   16db8:	beq	16e1c <__assert_fail@plt+0x5908>
   16dbc:	cmp	r8, #99	; 0x63
   16dc0:	beq	16eb8 <__assert_fail@plt+0x59a4>
   16dc4:	cmp	r8, #90	; 0x5a
   16dc8:	bne	16c38 <__assert_fail@plt+0x5724>
   16dcc:	mov	r2, #7
   16dd0:	b	16e88 <__assert_fail@plt+0x5974>
   16dd4:	cmp	r8, #109	; 0x6d
   16dd8:	beq	16da0 <__assert_fail@plt+0x588c>
   16ddc:	bhi	16df0 <__assert_fail@plt+0x58dc>
   16de0:	cmp	r8, #107	; 0x6b
   16de4:	bne	16c38 <__assert_fail@plt+0x5724>
   16de8:	mov	r2, #1
   16dec:	b	16e88 <__assert_fail@plt+0x5974>
   16df0:	cmp	r8, #116	; 0x74
   16df4:	beq	16ea0 <__assert_fail@plt+0x598c>
   16df8:	cmp	r8, #119	; 0x77
   16dfc:	bne	16c38 <__assert_fail@plt+0x5724>
   16e00:	ldr	r3, [sp, #8]
   16e04:	ldr	r2, [sp, #12]
   16e08:	ldr	r0, [sp, #12]
   16e0c:	adds	r3, r3, r3
   16e10:	adc	r2, r2, r2
   16e14:	lsr	r0, r0, #31
   16e18:	b	16e34 <__assert_fail@plt+0x5920>
   16e1c:	ldr	r3, [sp, #8]
   16e20:	ldr	r1, [sp, #12]
   16e24:	lsl	r2, r1, #9
   16e28:	lsr	r0, r1, #23
   16e2c:	orr	r2, r2, r3, lsr #23
   16e30:	lsl	r3, r3, #9
   16e34:	adds	r0, r0, #0
   16e38:	movne	r0, #1
   16e3c:	cmp	r0, #0
   16e40:	streq	r3, [sp, #8]
   16e44:	streq	r2, [sp, #12]
   16e48:	beq	16e5c <__assert_fail@plt+0x5948>
   16e4c:	mvn	r2, #0
   16e50:	mvn	r3, #0
   16e54:	mov	r0, #1
   16e58:	strd	r2, [sp, #8]
   16e5c:	ldr	r3, [r6]
   16e60:	orr	r4, r4, r0
   16e64:	add	r2, r3, r5
   16e68:	str	r2, [r6]
   16e6c:	ldrb	r3, [r3, r5]
   16e70:	cmp	r3, #0
   16e74:	orrne	r4, r4, #2
   16e78:	ldrd	r2, [sp, #8]
   16e7c:	strd	r2, [r7]
   16e80:	b	16bb4 <__assert_fail@plt+0x56a0>
   16e84:	mov	r2, #6
   16e88:	add	r0, sp, #8
   16e8c:	b	16eb0 <__assert_fail@plt+0x599c>
   16e90:	mov	r2, #3
   16e94:	b	16e88 <__assert_fail@plt+0x5974>
   16e98:	mov	r2, #5
   16e9c:	b	16e88 <__assert_fail@plt+0x5974>
   16ea0:	mov	r2, #4
   16ea4:	b	16e88 <__assert_fail@plt+0x5974>
   16ea8:	mov	r2, #8
   16eac:	add	r0, sp, r2
   16eb0:	bl	16aa4 <__assert_fail@plt+0x5590>
   16eb4:	b	16e5c <__assert_fail@plt+0x5948>
   16eb8:	mov	r0, #0
   16ebc:	b	16e5c <__assert_fail@plt+0x5948>
   16ec0:	andeq	r8, r1, ip, lsr fp
   16ec4:	andeq	r8, r1, r7, asr #22
   16ec8:	andeq	r8, r1, r5, asr fp
   16ecc:	cmp	r1, #0
   16ed0:	cmpne	r0, #0
   16ed4:	beq	16f0c <__assert_fail@plt+0x59f8>
   16ed8:	push	{r4, r5, r6, lr}
   16edc:	umull	r4, r5, r0, r1
   16ee0:	adds	r3, r5, #0
   16ee4:	movne	r3, #1
   16ee8:	cmp	r4, #0
   16eec:	blt	16ef8 <__assert_fail@plt+0x59e4>
   16ef0:	cmp	r3, #0
   16ef4:	beq	16f18 <__assert_fail@plt+0x5a04>
   16ef8:	bl	113b8 <__errno_location@plt>
   16efc:	mov	r3, #12
   16f00:	str	r3, [r0]
   16f04:	mov	r0, #0
   16f08:	pop	{r4, r5, r6, pc}
   16f0c:	mov	r1, #1
   16f10:	mov	r0, r1
   16f14:	b	1116c <calloc@plt>
   16f18:	pop	{r4, r5, r6, lr}
   16f1c:	b	16f14 <__assert_fail@plt+0x5a00>
   16f20:	cmp	r0, #0
   16f24:	beq	16f44 <__assert_fail@plt+0x5a30>
   16f28:	bge	16f48 <__assert_fail@plt+0x5a34>
   16f2c:	push	{r4, lr}
   16f30:	bl	113b8 <__errno_location@plt>
   16f34:	mov	r3, #12
   16f38:	str	r3, [r0]
   16f3c:	mov	r0, #0
   16f40:	pop	{r4, pc}
   16f44:	mov	r0, #1
   16f48:	b	11310 <malloc@plt>
   16f4c:	cmp	r0, #0
   16f50:	bne	16f5c <__assert_fail@plt+0x5a48>
   16f54:	mov	r0, r1
   16f58:	b	16f20 <__assert_fail@plt+0x5a0c>
   16f5c:	cmp	r1, #0
   16f60:	push	{r4, lr}
   16f64:	bne	16f74 <__assert_fail@plt+0x5a60>
   16f68:	bl	1466c <__assert_fail@plt+0x3158>
   16f6c:	mov	r0, #0
   16f70:	pop	{r4, pc}
   16f74:	blt	16f80 <__assert_fail@plt+0x5a6c>
   16f78:	pop	{r4, lr}
   16f7c:	b	11250 <realloc@plt>
   16f80:	bl	113b8 <__errno_location@plt>
   16f84:	mov	r3, #12
   16f88:	str	r3, [r0]
   16f8c:	b	16f6c <__assert_fail@plt+0x5a58>
   16f90:	push	{r4, r5, r6, lr}
   16f94:	mov	r4, r0
   16f98:	bl	112c8 <__fpending@plt>
   16f9c:	mov	r5, r0
   16fa0:	mov	r0, r4
   16fa4:	bl	112d4 <ferror_unlocked@plt>
   16fa8:	mov	r6, r0
   16fac:	mov	r0, r4
   16fb0:	bl	144e0 <__assert_fail@plt+0x2fcc>
   16fb4:	cmp	r6, #0
   16fb8:	mov	r4, r0
   16fbc:	bne	16fe8 <__assert_fail@plt+0x5ad4>
   16fc0:	cmp	r0, #0
   16fc4:	beq	16fe0 <__assert_fail@plt+0x5acc>
   16fc8:	cmp	r5, #0
   16fcc:	bne	16ff8 <__assert_fail@plt+0x5ae4>
   16fd0:	bl	113b8 <__errno_location@plt>
   16fd4:	ldr	r4, [r0]
   16fd8:	subs	r4, r4, #9
   16fdc:	mvnne	r4, #0
   16fe0:	mov	r0, r4
   16fe4:	pop	{r4, r5, r6, pc}
   16fe8:	cmp	r0, #0
   16fec:	bne	16ff8 <__assert_fail@plt+0x5ae4>
   16ff0:	bl	113b8 <__errno_location@plt>
   16ff4:	str	r4, [r0]
   16ff8:	mvn	r4, #0
   16ffc:	b	16fe0 <__assert_fail@plt+0x5acc>
   17000:	b	16f20 <__assert_fail@plt+0x5a0c>
   17004:	cmp	r1, #0
   17008:	orreq	r1, r1, #1
   1700c:	b	16f4c <__assert_fail@plt+0x5a38>
   17010:	b	16ecc <__assert_fail@plt+0x59b8>
   17014:	cmp	r2, #0
   17018:	cmpne	r1, #0
   1701c:	moveq	r2, #1
   17020:	moveq	r1, r2
   17024:	b	170ac <__assert_fail@plt+0x5b98>
   17028:	push	{r4, lr}
   1702c:	mov	r0, #14
   17030:	bl	1149c <nl_langinfo@plt>
   17034:	cmp	r0, #0
   17038:	beq	17050 <__assert_fail@plt+0x5b3c>
   1703c:	ldrb	r2, [r0]
   17040:	ldr	r3, [pc, #16]	; 17058 <__assert_fail@plt+0x5b44>
   17044:	cmp	r2, #0
   17048:	moveq	r0, r3
   1704c:	pop	{r4, pc}
   17050:	ldr	r0, [pc]	; 17058 <__assert_fail@plt+0x5b44>
   17054:	pop	{r4, pc}
   17058:	andeq	r8, r1, fp, ror fp
   1705c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   17060:	subs	r5, r0, #0
   17064:	mov	r7, r2
   17068:	addeq	r5, sp, #4
   1706c:	mov	r6, r1
   17070:	mov	r0, r5
   17074:	bl	112e0 <mbrtowc@plt>
   17078:	cmp	r7, #0
   1707c:	cmnne	r0, #3
   17080:	mov	r4, r0
   17084:	bls	170a0 <__assert_fail@plt+0x5b8c>
   17088:	mov	r0, #0
   1708c:	bl	17294 <__assert_fail@plt+0x5d80>
   17090:	cmp	r0, #0
   17094:	ldrbeq	r3, [r6]
   17098:	moveq	r4, #1
   1709c:	streq	r3, [r5]
   170a0:	mov	r0, r4
   170a4:	add	sp, sp, #12
   170a8:	pop	{r4, r5, r6, r7, pc}
   170ac:	umull	r2, r3, r1, r2
   170b0:	cmp	r3, #0
   170b4:	bne	170c0 <__assert_fail@plt+0x5bac>
   170b8:	mov	r1, r2
   170bc:	b	16f4c <__assert_fail@plt+0x5a38>
   170c0:	push	{r4, lr}
   170c4:	bl	113b8 <__errno_location@plt>
   170c8:	mov	r3, #12
   170cc:	str	r3, [r0]
   170d0:	mov	r0, #0
   170d4:	pop	{r4, pc}
   170d8:	mov	r2, #3
   170dc:	mov	r1, #0
   170e0:	b	170e4 <__assert_fail@plt+0x5bd0>
   170e4:	push	{r1, r2, r3}
   170e8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   170ec:	add	r2, sp, #40	; 0x28
   170f0:	ldr	r1, [sp, #36]	; 0x24
   170f4:	str	r2, [sp, #4]
   170f8:	cmp	r1, #0
   170fc:	beq	1714c <__assert_fail@plt+0x5c38>
   17100:	movw	r3, #1030	; 0x406
   17104:	mov	r5, r0
   17108:	cmp	r1, r3
   1710c:	beq	17158 <__assert_fail@plt+0x5c44>
   17110:	cmp	r1, #11
   17114:	beq	1713c <__assert_fail@plt+0x5c28>
   17118:	bgt	1724c <__assert_fail@plt+0x5d38>
   1711c:	cmp	r1, #4
   17120:	beq	17264 <__assert_fail@plt+0x5d50>
   17124:	bgt	17244 <__assert_fail@plt+0x5d30>
   17128:	cmp	r1, #2
   1712c:	beq	17264 <__assert_fail@plt+0x5d50>
   17130:	bgt	1713c <__assert_fail@plt+0x5c28>
   17134:	cmp	r1, #1
   17138:	bne	17264 <__assert_fail@plt+0x5d50>
   1713c:	mov	r0, r5
   17140:	bl	11454 <fcntl64@plt>
   17144:	mov	r4, r0
   17148:	b	171a0 <__assert_fail@plt+0x5c8c>
   1714c:	ldr	r2, [sp, #40]	; 0x28
   17150:	bl	11454 <fcntl64@plt>
   17154:	b	17144 <__assert_fail@plt+0x5c30>
   17158:	ldr	r6, [pc, #304]	; 17290 <__assert_fail@plt+0x5d7c>
   1715c:	add	r3, sp, #44	; 0x2c
   17160:	str	r3, [sp, #4]
   17164:	ldr	r7, [r2]
   17168:	ldr	r3, [r6]
   1716c:	mov	r8, r6
   17170:	mov	r2, r7
   17174:	cmp	r3, #0
   17178:	blt	17208 <__assert_fail@plt+0x5cf4>
   1717c:	bl	11454 <fcntl64@plt>
   17180:	subs	r4, r0, #0
   17184:	bge	17198 <__assert_fail@plt+0x5c84>
   17188:	bl	113b8 <__errno_location@plt>
   1718c:	ldr	r3, [r0]
   17190:	cmp	r3, #22
   17194:	beq	171b4 <__assert_fail@plt+0x5ca0>
   17198:	mov	r3, #1
   1719c:	str	r3, [r8]
   171a0:	mov	r0, r4
   171a4:	add	sp, sp, #12
   171a8:	pop	{r4, r5, r6, r7, r8, lr}
   171ac:	add	sp, sp, #12
   171b0:	bx	lr
   171b4:	mov	r2, r7
   171b8:	mov	r1, #0
   171bc:	mov	r0, r5
   171c0:	bl	11454 <fcntl64@plt>
   171c4:	subs	r4, r0, #0
   171c8:	mvnge	r3, #0
   171cc:	strge	r3, [r6]
   171d0:	blt	171a0 <__assert_fail@plt+0x5c8c>
   171d4:	mov	r1, #1
   171d8:	mov	r0, r4
   171dc:	bl	11454 <fcntl64@plt>
   171e0:	subs	r2, r0, #0
   171e4:	bge	17228 <__assert_fail@plt+0x5d14>
   171e8:	bl	113b8 <__errno_location@plt>
   171ec:	mov	r5, r0
   171f0:	mov	r0, r4
   171f4:	ldr	r6, [r5]
   171f8:	mvn	r4, #0
   171fc:	bl	114fc <close@plt>
   17200:	str	r6, [r5]
   17204:	b	171a0 <__assert_fail@plt+0x5c8c>
   17208:	mov	r1, #0
   1720c:	bl	11454 <fcntl64@plt>
   17210:	subs	r4, r0, #0
   17214:	blt	171a0 <__assert_fail@plt+0x5c8c>
   17218:	ldr	r3, [r6]
   1721c:	cmn	r3, #1
   17220:	bne	171a0 <__assert_fail@plt+0x5c8c>
   17224:	b	171d4 <__assert_fail@plt+0x5cc0>
   17228:	orr	r2, r2, #1
   1722c:	mov	r1, #2
   17230:	mov	r0, r4
   17234:	bl	11454 <fcntl64@plt>
   17238:	cmn	r0, #1
   1723c:	bne	171a0 <__assert_fail@plt+0x5c8c>
   17240:	b	171e8 <__assert_fail@plt+0x5cd4>
   17244:	cmp	r1, #9
   17248:	b	17138 <__assert_fail@plt+0x5c24>
   1724c:	movw	r2, #1031	; 0x407
   17250:	cmp	r1, r2
   17254:	bgt	17274 <__assert_fail@plt+0x5d60>
   17258:	cmp	r1, r3
   1725c:	movwlt	r3, #1025	; 0x401
   17260:	blt	17288 <__assert_fail@plt+0x5d74>
   17264:	ldr	r3, [sp, #4]
   17268:	mov	r0, r5
   1726c:	ldr	r2, [r3]
   17270:	b	17150 <__assert_fail@plt+0x5c3c>
   17274:	movw	r3, #1033	; 0x409
   17278:	cmp	r1, r3
   1727c:	beq	17264 <__assert_fail@plt+0x5d50>
   17280:	blt	1713c <__assert_fail@plt+0x5c28>
   17284:	movw	r3, #1034	; 0x40a
   17288:	cmp	r1, r3
   1728c:	b	17138 <__assert_fail@plt+0x5c24>
   17290:	andeq	r9, r2, r8, ror #12
   17294:	push	{lr}		; (str lr, [sp, #-4]!)
   17298:	sub	sp, sp, #268	; 0x10c
   1729c:	movw	r2, #257	; 0x101
   172a0:	add	r1, sp, #4
   172a4:	bl	172f0 <__assert_fail@plt+0x5ddc>
   172a8:	cmp	r0, #0
   172ac:	movne	r0, #0
   172b0:	bne	172e0 <__assert_fail@plt+0x5dcc>
   172b4:	ldr	r1, [pc, #44]	; 172e8 <__assert_fail@plt+0x5dd4>
   172b8:	add	r0, sp, #4
   172bc:	bl	11190 <strcmp@plt>
   172c0:	cmp	r0, #0
   172c4:	beq	172dc <__assert_fail@plt+0x5dc8>
   172c8:	ldr	r1, [pc, #28]	; 172ec <__assert_fail@plt+0x5dd8>
   172cc:	add	r0, sp, #4
   172d0:	bl	11190 <strcmp@plt>
   172d4:	adds	r0, r0, #0
   172d8:	movne	r0, #1
   172dc:	and	r0, r0, #1
   172e0:	add	sp, sp, #268	; 0x10c
   172e4:	pop	{pc}		; (ldr pc, [sp], #4)
   172e8:	andeq	r8, r1, r1, lsl #23
   172ec:	andeq	r8, r1, r3, lsl #23
   172f0:	push	{r4, r5, r6, lr}
   172f4:	mov	r5, r1
   172f8:	mov	r1, #0
   172fc:	mov	r4, r2
   17300:	bl	11460 <setlocale@plt>
   17304:	subs	r6, r0, #0
   17308:	bne	1731c <__assert_fail@plt+0x5e08>
   1730c:	cmp	r4, #0
   17310:	mov	r0, #22
   17314:	strbne	r6, [r5]
   17318:	pop	{r4, r5, r6, pc}
   1731c:	bl	11370 <strlen@plt>
   17320:	cmp	r4, r0
   17324:	bls	17340 <__assert_fail@plt+0x5e2c>
   17328:	add	r2, r0, #1
   1732c:	mov	r1, r6
   17330:	mov	r0, r5
   17334:	bl	111f0 <memcpy@plt>
   17338:	mov	r0, #0
   1733c:	pop	{r4, r5, r6, pc}
   17340:	cmp	r4, #0
   17344:	beq	17364 <__assert_fail@plt+0x5e50>
   17348:	sub	r4, r4, #1
   1734c:	mov	r1, r6
   17350:	mov	r2, r4
   17354:	mov	r0, r5
   17358:	bl	111f0 <memcpy@plt>
   1735c:	mov	r3, #0
   17360:	strb	r3, [r5, r4]
   17364:	mov	r0, #34	; 0x22
   17368:	pop	{r4, r5, r6, pc}
   1736c:	mov	r1, #0
   17370:	b	11460 <setlocale@plt>
   17374:	cmp	r3, #0
   17378:	cmpeq	r2, #0
   1737c:	bne	17394 <__assert_fail@plt+0x5e80>
   17380:	cmp	r1, #0
   17384:	cmpeq	r0, #0
   17388:	mvnne	r1, #0
   1738c:	mvnne	r0, #0
   17390:	b	173b0 <__assert_fail@plt+0x5e9c>
   17394:	sub	sp, sp, #8
   17398:	push	{sp, lr}
   1739c:	bl	173c0 <__assert_fail@plt+0x5eac>
   173a0:	ldr	lr, [sp, #4]
   173a4:	add	sp, sp, #8
   173a8:	pop	{r2, r3}
   173ac:	bx	lr
   173b0:	push	{r1, lr}
   173b4:	mov	r0, #8
   173b8:	bl	11184 <raise@plt>
   173bc:	pop	{r1, pc}
   173c0:	cmp	r1, r3
   173c4:	cmpeq	r0, r2
   173c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173cc:	mov	r4, r0
   173d0:	movcc	r0, #0
   173d4:	mov	r5, r1
   173d8:	ldr	lr, [sp, #36]	; 0x24
   173dc:	movcc	r1, r0
   173e0:	bcc	174dc <__assert_fail@plt+0x5fc8>
   173e4:	cmp	r3, #0
   173e8:	clzeq	ip, r2
   173ec:	clzne	ip, r3
   173f0:	addeq	ip, ip, #32
   173f4:	cmp	r5, #0
   173f8:	clzeq	r1, r4
   173fc:	addeq	r1, r1, #32
   17400:	clzne	r1, r5
   17404:	sub	ip, ip, r1
   17408:	sub	sl, ip, #32
   1740c:	lsl	r9, r3, ip
   17410:	rsb	fp, ip, #32
   17414:	orr	r9, r9, r2, lsl sl
   17418:	orr	r9, r9, r2, lsr fp
   1741c:	lsl	r8, r2, ip
   17420:	cmp	r5, r9
   17424:	cmpeq	r4, r8
   17428:	movcc	r0, #0
   1742c:	movcc	r1, r0
   17430:	bcc	1744c <__assert_fail@plt+0x5f38>
   17434:	mov	r0, #1
   17438:	subs	r4, r4, r8
   1743c:	lsl	r1, r0, sl
   17440:	orr	r1, r1, r0, lsr fp
   17444:	lsl	r0, r0, ip
   17448:	sbc	r5, r5, r9
   1744c:	cmp	ip, #0
   17450:	beq	174dc <__assert_fail@plt+0x5fc8>
   17454:	lsr	r6, r8, #1
   17458:	orr	r6, r6, r9, lsl #31
   1745c:	lsr	r7, r9, #1
   17460:	mov	r2, ip
   17464:	b	17488 <__assert_fail@plt+0x5f74>
   17468:	subs	r3, r4, r6
   1746c:	sbc	r8, r5, r7
   17470:	adds	r3, r3, r3
   17474:	adc	r8, r8, r8
   17478:	adds	r4, r3, #1
   1747c:	adc	r5, r8, #0
   17480:	subs	r2, r2, #1
   17484:	beq	174a4 <__assert_fail@plt+0x5f90>
   17488:	cmp	r5, r7
   1748c:	cmpeq	r4, r6
   17490:	bcs	17468 <__assert_fail@plt+0x5f54>
   17494:	adds	r4, r4, r4
   17498:	adc	r5, r5, r5
   1749c:	subs	r2, r2, #1
   174a0:	bne	17488 <__assert_fail@plt+0x5f74>
   174a4:	lsr	r3, r4, ip
   174a8:	orr	r3, r3, r5, lsl fp
   174ac:	lsr	r2, r5, ip
   174b0:	orr	r3, r3, r5, lsr sl
   174b4:	adds	r0, r0, r4
   174b8:	mov	r4, r3
   174bc:	lsl	r3, r2, ip
   174c0:	orr	r3, r3, r4, lsl sl
   174c4:	lsl	ip, r4, ip
   174c8:	orr	r3, r3, r4, lsr fp
   174cc:	adc	r1, r1, r5
   174d0:	subs	r0, r0, ip
   174d4:	mov	r5, r2
   174d8:	sbc	r1, r1, r3
   174dc:	cmp	lr, #0
   174e0:	strdne	r4, [lr]
   174e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   174ec:	mov	r7, r0
   174f0:	ldr	r6, [pc, #72]	; 17540 <__assert_fail@plt+0x602c>
   174f4:	ldr	r5, [pc, #72]	; 17544 <__assert_fail@plt+0x6030>
   174f8:	add	r6, pc, r6
   174fc:	add	r5, pc, r5
   17500:	sub	r6, r6, r5
   17504:	mov	r8, r1
   17508:	mov	r9, r2
   1750c:	bl	11140 <fdopen@plt-0x20>
   17510:	asrs	r6, r6, #2
   17514:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17518:	mov	r4, #0
   1751c:	add	r4, r4, #1
   17520:	ldr	r3, [r5], #4
   17524:	mov	r2, r9
   17528:	mov	r1, r8
   1752c:	mov	r0, r7
   17530:	blx	r3
   17534:	cmp	r6, r4
   17538:	bne	1751c <__assert_fail@plt+0x6008>
   1753c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17540:	andeq	r1, r1, r4, lsl sl
   17544:	andeq	r1, r1, ip, lsl #20
   17548:	bx	lr
   1754c:	ldr	r3, [pc, #12]	; 17560 <__assert_fail@plt+0x604c>
   17550:	mov	r1, #0
   17554:	add	r3, pc, r3
   17558:	ldr	r2, [r3]
   1755c:	b	113d0 <__cxa_atexit@plt>
   17560:	strdeq	r1, [r1], -r8
   17564:	mov	r2, r1
   17568:	mov	r1, r0
   1756c:	mov	r0, #3
   17570:	b	11280 <__fxstat64@plt>

Disassembly of section .fini:

00017574 <.fini>:
   17574:	push	{r3, lr}
   17578:	pop	{r3, pc}
