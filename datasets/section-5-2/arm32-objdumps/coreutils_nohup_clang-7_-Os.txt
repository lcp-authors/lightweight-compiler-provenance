
../repos/coreutils/src/nohup:     file format elf32-littlearm


Disassembly of section .init:

00010dcc <.init>:
   10dcc:	push	{r3, lr}
   10dd0:	bl	11098 <__mempcpy_chk@plt+0x48>
   10dd4:	pop	{r3, pc}

Disassembly of section .plt:

00010dd8 <calloc@plt-0x14>:
   10dd8:	push	{lr}		; (str lr, [sp, #-4]!)
   10ddc:	ldr	lr, [pc, #4]	; 10de8 <calloc@plt-0x4>
   10de0:	add	lr, pc, lr
   10de4:	ldr	pc, [lr, #8]!
   10de8:	andeq	r5, r1, r8, lsl r2

00010dec <calloc@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #536]!	; 0x218

00010df8 <fputs_unlocked@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #528]!	; 0x210

00010e04 <strcmp@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #520]!	; 0x208

00010e10 <fflush@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #512]!	; 0x200

00010e1c <free@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #504]!	; 0x1f8

00010e28 <_exit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #496]!	; 0x1f0

00010e34 <memcpy@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #488]!	; 0x1e8

00010e40 <execvp@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #480]!	; 0x1e0

00010e4c <mbsinit@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #472]!	; 0x1d8

00010e58 <signal@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #464]!	; 0x1d0

00010e64 <memcmp@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #456]!	; 0x1c8

00010e70 <dcgettext@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #448]!	; 0x1c0

00010e7c <dup2@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #440]!	; 0x1b8

00010e88 <realloc@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #432]!	; 0x1b0

00010e94 <textdomain@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #424]!	; 0x1a8

00010ea0 <iswprint@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #416]!	; 0x1a0

00010eac <lseek64@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #408]!	; 0x198

00010eb8 <__ctype_get_mb_cur_max@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #400]!	; 0x190

00010ec4 <__fpending@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #392]!	; 0x188

00010ed0 <ferror_unlocked@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #384]!	; 0x180

00010edc <mbrtowc@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #376]!	; 0x178

00010ee8 <error@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #368]!	; 0x170

00010ef4 <open64@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #86016	; 0x15000
   10efc:	ldr	pc, [ip, #360]!	; 0x168

00010f00 <getenv@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #86016	; 0x15000
   10f08:	ldr	pc, [ip, #352]!	; 0x160

00010f0c <malloc@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #86016	; 0x15000
   10f14:	ldr	pc, [ip, #344]!	; 0x158

00010f18 <__libc_start_main@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #86016	; 0x15000
   10f20:	ldr	pc, [ip, #336]!	; 0x150

00010f24 <__freading@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #86016	; 0x15000
   10f2c:	ldr	pc, [ip, #328]!	; 0x148

00010f30 <__gmon_start__@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #86016	; 0x15000
   10f38:	ldr	pc, [ip, #320]!	; 0x140

00010f3c <getopt_long@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #86016	; 0x15000
   10f44:	ldr	pc, [ip, #312]!	; 0x138

00010f48 <__ctype_b_loc@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #86016	; 0x15000
   10f50:	ldr	pc, [ip, #304]!	; 0x130

00010f54 <exit@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #86016	; 0x15000
   10f5c:	ldr	pc, [ip, #296]!	; 0x128

00010f60 <strlen@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #86016	; 0x15000
   10f68:	ldr	pc, [ip, #288]!	; 0x120

00010f6c <__errno_location@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #86016	; 0x15000
   10f74:	ldr	pc, [ip, #280]!	; 0x118

00010f78 <__cxa_atexit@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #86016	; 0x15000
   10f80:	ldr	pc, [ip, #272]!	; 0x110

00010f84 <memset@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #86016	; 0x15000
   10f8c:	ldr	pc, [ip, #264]!	; 0x108

00010f90 <__printf_chk@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #86016	; 0x15000
   10f98:	ldr	pc, [ip, #256]!	; 0x100

00010f9c <fileno@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #86016	; 0x15000
   10fa4:	ldr	pc, [ip, #248]!	; 0xf8

00010fa8 <__fprintf_chk@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #86016	; 0x15000
   10fb0:	ldr	pc, [ip, #240]!	; 0xf0

00010fb4 <fclose@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #86016	; 0x15000
   10fbc:	ldr	pc, [ip, #232]!	; 0xe8

00010fc0 <fseeko64@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #86016	; 0x15000
   10fc8:	ldr	pc, [ip, #224]!	; 0xe0

00010fcc <fcntl64@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #86016	; 0x15000
   10fd4:	ldr	pc, [ip, #216]!	; 0xd8

00010fd8 <setlocale@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #86016	; 0x15000
   10fe0:	ldr	pc, [ip, #208]!	; 0xd0

00010fe4 <strrchr@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #86016	; 0x15000
   10fec:	ldr	pc, [ip, #200]!	; 0xc8

00010ff0 <nl_langinfo@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #86016	; 0x15000
   10ff8:	ldr	pc, [ip, #192]!	; 0xc0

00010ffc <bindtextdomain@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #86016	; 0x15000
   11004:	ldr	pc, [ip, #184]!	; 0xb8

00011008 <umask@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #86016	; 0x15000
   11010:	ldr	pc, [ip, #176]!	; 0xb0

00011014 <isatty@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #86016	; 0x15000
   1101c:	ldr	pc, [ip, #168]!	; 0xa8

00011020 <fputs@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #86016	; 0x15000
   11028:	ldr	pc, [ip, #160]!	; 0xa0

0001102c <strncmp@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #86016	; 0x15000
   11034:	ldr	pc, [ip, #152]!	; 0x98

00011038 <abort@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #86016	; 0x15000
   11040:	ldr	pc, [ip, #144]!	; 0x90

00011044 <close@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #86016	; 0x15000
   1104c:	ldr	pc, [ip, #136]!	; 0x88

00011050 <__mempcpy_chk@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #86016	; 0x15000
   11058:	ldr	pc, [ip, #128]!	; 0x80

Disassembly of section .text:

0001105c <.text>:
   1105c:	mov	fp, #0
   11060:	mov	lr, #0
   11064:	pop	{r1}		; (ldr r1, [sp], #4)
   11068:	mov	r2, sp
   1106c:	push	{r2}		; (str r2, [sp, #-4]!)
   11070:	push	{r0}		; (str r0, [sp, #-4]!)
   11074:	ldr	ip, [pc, #16]	; 1108c <__mempcpy_chk@plt+0x3c>
   11078:	push	{ip}		; (str ip, [sp, #-4]!)
   1107c:	ldr	r0, [pc, #12]	; 11090 <__mempcpy_chk@plt+0x40>
   11080:	ldr	r3, [pc, #12]	; 11094 <__mempcpy_chk@plt+0x44>
   11084:	bl	10f18 <__libc_start_main@plt>
   11088:	bl	11038 <abort@plt>
   1108c:	andeq	r4, r1, r0, ror #17
   11090:			; <UNDEFINED> instruction: 0x000113bc
   11094:	andeq	r4, r1, r0, lsl #17
   11098:	ldr	r3, [pc, #20]	; 110b4 <__mempcpy_chk@plt+0x64>
   1109c:	ldr	r2, [pc, #20]	; 110b8 <__mempcpy_chk@plt+0x68>
   110a0:	add	r3, pc, r3
   110a4:	ldr	r2, [r3, r2]
   110a8:	cmp	r2, #0
   110ac:	bxeq	lr
   110b0:	b	10f30 <__gmon_start__@plt>
   110b4:	andeq	r4, r1, r8, asr pc
   110b8:	ldrdeq	r0, [r0], -ip
   110bc:	ldr	r0, [pc, #24]	; 110dc <__mempcpy_chk@plt+0x8c>
   110c0:	ldr	r3, [pc, #24]	; 110e0 <__mempcpy_chk@plt+0x90>
   110c4:	cmp	r3, r0
   110c8:	bxeq	lr
   110cc:	ldr	r3, [pc, #16]	; 110e4 <__mempcpy_chk@plt+0x94>
   110d0:	cmp	r3, #0
   110d4:	bxeq	lr
   110d8:	bx	r3
   110dc:	andeq	r6, r2, r0, lsr r1
   110e0:	andeq	r6, r2, r0, lsr r1
   110e4:	andeq	r0, r0, r0
   110e8:	ldr	r0, [pc, #36]	; 11114 <__mempcpy_chk@plt+0xc4>
   110ec:	ldr	r1, [pc, #36]	; 11118 <__mempcpy_chk@plt+0xc8>
   110f0:	sub	r1, r1, r0
   110f4:	asr	r1, r1, #2
   110f8:	add	r1, r1, r1, lsr #31
   110fc:	asrs	r1, r1, #1
   11100:	bxeq	lr
   11104:	ldr	r3, [pc, #16]	; 1111c <__mempcpy_chk@plt+0xcc>
   11108:	cmp	r3, #0
   1110c:	bxeq	lr
   11110:	bx	r3
   11114:	andeq	r6, r2, r0, lsr r1
   11118:	andeq	r6, r2, r0, lsr r1
   1111c:	andeq	r0, r0, r0
   11120:	push	{r4, lr}
   11124:	ldr	r4, [pc, #24]	; 11144 <__mempcpy_chk@plt+0xf4>
   11128:	ldrb	r3, [r4]
   1112c:	cmp	r3, #0
   11130:	popne	{r4, pc}
   11134:	bl	110bc <__mempcpy_chk@plt+0x6c>
   11138:	mov	r3, #1
   1113c:	strb	r3, [r4]
   11140:	pop	{r4, pc}
   11144:	andeq	r6, r2, ip, asr #2
   11148:	b	110e8 <__mempcpy_chk@plt+0x98>
   1114c:	push	{fp, lr}
   11150:	mov	fp, sp
   11154:	sub	sp, sp, #56	; 0x38
   11158:	mov	r8, r0
   1115c:	cmp	r0, #0
   11160:	bne	1137c <__mempcpy_chk@plt+0x32c>
   11164:	movw	r1, #18739	; 0x4933
   11168:	mov	r0, #0
   1116c:	mov	r2, #5
   11170:	movt	r1, #1
   11174:	bl	10e70 <dcgettext@plt>
   11178:	movw	r5, #24924	; 0x615c
   1117c:	mov	r1, r0
   11180:	mov	r0, #1
   11184:	movt	r5, #2
   11188:	ldr	r2, [r5]
   1118c:	mov	r3, r2
   11190:	bl	10f90 <__printf_chk@plt>
   11194:	movw	r1, #18784	; 0x4960
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	movt	r1, #1
   111a4:	bl	10e70 <dcgettext@plt>
   111a8:	movw	r9, #24900	; 0x6144
   111ac:	movt	r9, #2
   111b0:	ldr	r1, [r9]
   111b4:	bl	10df8 <fputs_unlocked@plt>
   111b8:	movw	r1, #18824	; 0x4988
   111bc:	mov	r0, #0
   111c0:	mov	r2, #5
   111c4:	movt	r1, #1
   111c8:	bl	10e70 <dcgettext@plt>
   111cc:	ldr	r1, [r9]
   111d0:	bl	10df8 <fputs_unlocked@plt>
   111d4:	movw	r1, #18869	; 0x49b5
   111d8:	mov	r0, #0
   111dc:	mov	r2, #5
   111e0:	movt	r1, #1
   111e4:	bl	10e70 <dcgettext@plt>
   111e8:	ldr	r1, [r9]
   111ec:	bl	10df8 <fputs_unlocked@plt>
   111f0:	movw	r1, #18923	; 0x49eb
   111f4:	mov	r0, #0
   111f8:	mov	r2, #5
   111fc:	movt	r1, #1
   11200:	bl	10e70 <dcgettext@plt>
   11204:	ldr	r2, [r5]
   11208:	mov	r1, r0
   1120c:	mov	r0, #1
   11210:	bl	10f90 <__printf_chk@plt>
   11214:	movw	r1, #19214	; 0x4b0e
   11218:	mov	r0, #0
   1121c:	mov	r2, #5
   11220:	movt	r1, #1
   11224:	bl	10e70 <dcgettext@plt>
   11228:	movw	r5, #19405	; 0x4bcd
   1122c:	mov	r1, r0
   11230:	mov	r0, #1
   11234:	movt	r5, #1
   11238:	mov	r2, r5
   1123c:	bl	10f90 <__printf_chk@plt>
   11240:	movw	ip, #20056	; 0x4e58
   11244:	mov	r6, sp
   11248:	movt	ip, #1
   1124c:	mov	r1, r6
   11250:	ldm	ip!, {r2, r3, r4, r7}
   11254:	stmia	r1!, {r2, r3, r4, r7}
   11258:	ldm	ip!, {r0, r2, r3, r4, r7}
   1125c:	stmia	r1!, {r0, r2, r3, r4, r7}
   11260:	ldm	ip, {r0, r2, r3, r4, r7}
   11264:	stm	r1, {r0, r2, r3, r4, r7}
   11268:	movw	r1, #19742	; 0x4d1e
   1126c:	movt	r1, #1
   11270:	mov	r0, r5
   11274:	bl	10e04 <strcmp@plt>
   11278:	cmp	r0, #0
   1127c:	ldrne	r1, [r6, #8]!
   11280:	cmpne	r1, #0
   11284:	bne	11270 <__mempcpy_chk@plt+0x220>
   11288:	ldr	r6, [r6, #4]
   1128c:	movw	r1, #19837	; 0x4d7d
   11290:	mov	r0, #0
   11294:	mov	r2, #5
   11298:	movt	r1, #1
   1129c:	bl	10e70 <dcgettext@plt>
   112a0:	movw	r2, #19451	; 0x4bfb
   112a4:	movw	r3, #19860	; 0x4d94
   112a8:	mov	r1, r0
   112ac:	mov	r0, #1
   112b0:	movt	r2, #1
   112b4:	movt	r3, #1
   112b8:	bl	10f90 <__printf_chk@plt>
   112bc:	cmp	r6, #0
   112c0:	mov	r0, #5
   112c4:	mov	r1, #0
   112c8:	moveq	r6, r5
   112cc:	bl	10fd8 <setlocale@plt>
   112d0:	cmp	r0, #0
   112d4:	beq	1130c <__mempcpy_chk@plt+0x2bc>
   112d8:	movw	r1, #19900	; 0x4dbc
   112dc:	mov	r2, #3
   112e0:	movt	r1, #1
   112e4:	bl	1102c <strncmp@plt>
   112e8:	cmp	r0, #0
   112ec:	beq	1130c <__mempcpy_chk@plt+0x2bc>
   112f0:	movw	r1, #19904	; 0x4dc0
   112f4:	mov	r0, #0
   112f8:	mov	r2, #5
   112fc:	movt	r1, #1
   11300:	bl	10e70 <dcgettext@plt>
   11304:	ldr	r1, [r9]
   11308:	bl	10df8 <fputs_unlocked@plt>
   1130c:	movw	r1, #19975	; 0x4e07
   11310:	mov	r0, #0
   11314:	mov	r2, #5
   11318:	movt	r1, #1
   1131c:	bl	10e70 <dcgettext@plt>
   11320:	movw	r2, #19860	; 0x4d94
   11324:	mov	r1, r0
   11328:	mov	r0, #1
   1132c:	mov	r3, r5
   11330:	movt	r2, #1
   11334:	bl	10f90 <__printf_chk@plt>
   11338:	movw	r1, #20002	; 0x4e22
   1133c:	mov	r0, #0
   11340:	mov	r2, #5
   11344:	movt	r1, #1
   11348:	bl	10e70 <dcgettext@plt>
   1134c:	movw	r3, #18823	; 0x4987
   11350:	mov	r1, r0
   11354:	movw	r0, #19770	; 0x4d3a
   11358:	cmp	r6, r5
   1135c:	mov	r2, r6
   11360:	movt	r0, #1
   11364:	movt	r3, #1
   11368:	moveq	r3, r0
   1136c:	mov	r0, #1
   11370:	bl	10f90 <__printf_chk@plt>
   11374:	mov	r0, r8
   11378:	bl	10f54 <exit@plt>
   1137c:	movw	r0, #24896	; 0x6140
   11380:	movw	r1, #18700	; 0x490c
   11384:	mov	r2, #5
   11388:	movt	r0, #2
   1138c:	movt	r1, #1
   11390:	ldr	r5, [r0]
   11394:	mov	r0, #0
   11398:	bl	10e70 <dcgettext@plt>
   1139c:	mov	r2, r0
   113a0:	movw	r0, #24924	; 0x615c
   113a4:	mov	r1, #1
   113a8:	movt	r0, #2
   113ac:	ldr	r3, [r0]
   113b0:	mov	r0, r5
   113b4:	bl	10fa8 <__fprintf_chk@plt>
   113b8:	b	11374 <__mempcpy_chk@plt+0x324>
   113bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113c0:	add	fp, sp, #28
   113c4:	sub	sp, sp, #36	; 0x24
   113c8:	mov	r4, r0
   113cc:	ldr	r0, [r1]
   113d0:	mov	r9, r1
   113d4:	bl	11eb8 <__mempcpy_chk@plt+0xe68>
   113d8:	movw	r1, #18823	; 0x4987
   113dc:	mov	r0, #6
   113e0:	movt	r1, #1
   113e4:	bl	10fd8 <setlocale@plt>
   113e8:	movw	r5, #19455	; 0x4bff
   113ec:	movw	r1, #19411	; 0x4bd3
   113f0:	movt	r5, #1
   113f4:	movt	r1, #1
   113f8:	mov	r0, r5
   113fc:	bl	10ffc <bindtextdomain@plt>
   11400:	mov	r0, r5
   11404:	bl	10e94 <textdomain@plt>
   11408:	movw	r0, #19435	; 0x4beb
   1140c:	movt	r0, #1
   11410:	bl	10f00 <getenv@plt>
   11414:	cmp	r0, #0
   11418:	mov	sl, #127	; 0x7f
   1141c:	movw	r0, #24812	; 0x60ec
   11420:	movweq	sl, #125	; 0x7d
   11424:	movt	r0, #2
   11428:	str	sl, [r0]
   1142c:	movw	r0, #6392	; 0x18f8
   11430:	movt	r0, #1
   11434:	bl	148e4 <__mempcpy_chk@plt+0x3894>
   11438:	movw	r0, #24808	; 0x60e8
   1143c:	movw	r2, #4428	; 0x114c
   11440:	movw	r1, #19465	; 0x4c09
   11444:	mov	r5, #0
   11448:	movw	r3, #19451	; 0x4bfb
   1144c:	movt	r0, #2
   11450:	movt	r2, #1
   11454:	movt	r1, #1
   11458:	movt	r3, #1
   1145c:	ldr	r0, [r0]
   11460:	stm	sp, {r0, r5}
   11464:	str	r2, [sp, #8]
   11468:	movw	r2, #19405	; 0x4bcd
   1146c:	str	r1, [sp, #12]
   11470:	mov	r0, r4
   11474:	mov	r1, r9
   11478:	str	r5, [sp, #16]
   1147c:	movt	r2, #1
   11480:	bl	11df0 <__mempcpy_chk@plt+0xda0>
   11484:	movw	r0, #24888	; 0x6138
   11488:	movt	r0, #2
   1148c:	ldr	r0, [r0]
   11490:	cmp	r0, r4
   11494:	bge	118ac <__mempcpy_chk@plt+0x85c>
   11498:	mov	r0, #0
   1149c:	bl	11014 <isatty@plt>
   114a0:	mov	r6, r0
   114a4:	mov	r0, #1
   114a8:	bl	11014 <isatty@plt>
   114ac:	mov	r7, r0
   114b0:	cmp	r0, #0
   114b4:	bne	114cc <__mempcpy_chk@plt+0x47c>
   114b8:	bl	10f6c <__errno_location@plt>
   114bc:	ldr	r0, [r0]
   114c0:	sub	r0, r0, #9
   114c4:	clz	r0, r0
   114c8:	lsr	r5, r0, #5
   114cc:	mov	r0, #2
   114d0:	bl	11014 <isatty@plt>
   114d4:	mov	r8, r0
   114d8:	cmp	r6, #0
   114dc:	beq	11558 <__mempcpy_chk@plt+0x508>
   114e0:	movw	r1, #19494	; 0x4c26
   114e4:	mov	r0, #0
   114e8:	mov	r2, #1
   114ec:	mov	r3, #0
   114f0:	movt	r1, #1
   114f4:	bl	11bb8 <__mempcpy_chk@plt+0xb68>
   114f8:	cmn	r0, #1
   114fc:	bgt	1152c <__mempcpy_chk@plt+0x4dc>
   11500:	bl	10f6c <__errno_location@plt>
   11504:	ldr	r4, [r0]
   11508:	movw	r1, #19504	; 0x4c30
   1150c:	mov	r0, #0
   11510:	mov	r2, #5
   11514:	movt	r1, #1
   11518:	bl	10e70 <dcgettext@plt>
   1151c:	mov	r2, r0
   11520:	mov	r0, sl
   11524:	mov	r1, r4
   11528:	bl	10ee8 <error@plt>
   1152c:	orrs	r0, r8, r7
   11530:	bne	11558 <__mempcpy_chk@plt+0x508>
   11534:	movw	r1, #19545	; 0x4c59
   11538:	mov	r0, #0
   1153c:	mov	r2, #5
   11540:	movt	r1, #1
   11544:	bl	10e70 <dcgettext@plt>
   11548:	mov	r2, r0
   1154c:	mov	r0, #0
   11550:	mov	r1, #0
   11554:	bl	10ee8 <error@plt>
   11558:	cmp	r7, #0
   1155c:	str	r6, [sp, #32]
   11560:	beq	11590 <__mempcpy_chk@plt+0x540>
   11564:	mvn	r0, #384	; 0x180
   11568:	str	r5, [sp, #28]
   1156c:	bl	11008 <umask@plt>
   11570:	movw	r1, #19560	; 0x4c68
   11574:	mov	r5, r0
   11578:	mov	r0, #1
   1157c:	movw	r2, #1089	; 0x441
   11580:	mov	r3, #384	; 0x180
   11584:	movt	r1, #1
   11588:	bl	11bb8 <__mempcpy_chk@plt+0xb68>
   1158c:	b	115cc <__mempcpy_chk@plt+0x57c>
   11590:	cmp	r8, #0
   11594:	mov	r0, r8
   11598:	mov	r6, #1
   1159c:	movwne	r0, #1
   115a0:	tst	r5, r0
   115a4:	beq	1164c <__mempcpy_chk@plt+0x5fc>
   115a8:	mvn	r0, #384	; 0x180
   115ac:	str	r5, [sp, #28]
   115b0:	bl	11008 <umask@plt>
   115b4:	mov	r5, r0
   115b8:	movw	r0, #19560	; 0x4c68
   115bc:	movw	r1, #1089	; 0x441
   115c0:	mov	r2, #384	; 0x180
   115c4:	movt	r0, #1
   115c8:	bl	10ef4 <open64@plt>
   115cc:	mov	r6, r0
   115d0:	cmn	r0, #1
   115d4:	ble	11790 <__mempcpy_chk@plt+0x740>
   115d8:	str	r9, [sp, #24]
   115dc:	movw	r9, #19560	; 0x4c68
   115e0:	mov	r4, #0
   115e4:	movt	r9, #1
   115e8:	mov	r0, r5
   115ec:	bl	11008 <umask@plt>
   115f0:	ldr	r2, [sp, #32]
   115f4:	movw	r0, #19593	; 0x4c89
   115f8:	movw	r1, #19612	; 0x4c9c
   115fc:	movt	r0, #1
   11600:	movt	r1, #1
   11604:	cmp	r2, #0
   11608:	mov	r2, #5
   1160c:	movne	r1, r0
   11610:	mov	r0, #0
   11614:	bl	10e70 <dcgettext@plt>
   11618:	mov	r5, r0
   1161c:	mov	r0, #4
   11620:	mov	r1, r9
   11624:	bl	13584 <__mempcpy_chk@plt+0x2534>
   11628:	mov	r3, r0
   1162c:	mov	r0, #0
   11630:	mov	r1, #0
   11634:	mov	r2, r5
   11638:	bl	10ee8 <error@plt>
   1163c:	mov	r0, r4
   11640:	bl	11d18 <__mempcpy_chk@plt+0xcc8>
   11644:	ldr	r9, [sp, #24]
   11648:	ldr	r5, [sp, #28]
   1164c:	cmp	r8, #0
   11650:	beq	11704 <__mempcpy_chk@plt+0x6b4>
   11654:	mov	r0, #2
   11658:	movw	r1, #1030	; 0x406
   1165c:	mov	r2, #3
   11660:	bl	119e0 <__mempcpy_chk@plt+0x990>
   11664:	mov	r4, r0
   11668:	cmp	r7, #0
   1166c:	bne	116a8 <__mempcpy_chk@plt+0x658>
   11670:	ldr	r2, [sp, #32]
   11674:	movw	r0, #19635	; 0x4cb3
   11678:	movw	r1, #19654	; 0x4cc6
   1167c:	movt	r0, #1
   11680:	movt	r1, #1
   11684:	cmp	r2, #0
   11688:	mov	r2, #5
   1168c:	movne	r1, r0
   11690:	mov	r0, #0
   11694:	bl	10e70 <dcgettext@plt>
   11698:	mov	r2, r0
   1169c:	mov	r0, #0
   116a0:	mov	r1, #0
   116a4:	bl	10ee8 <error@plt>
   116a8:	mov	r0, r6
   116ac:	mov	r1, #2
   116b0:	bl	10e7c <dup2@plt>
   116b4:	cmn	r0, #1
   116b8:	bgt	116f0 <__mempcpy_chk@plt+0x6a0>
   116bc:	bl	10f6c <__errno_location@plt>
   116c0:	mov	r7, r5
   116c4:	ldr	r5, [r0]
   116c8:	movw	r1, #19683	; 0x4ce3
   116cc:	mov	r0, #0
   116d0:	mov	r2, #5
   116d4:	movt	r1, #1
   116d8:	bl	10e70 <dcgettext@plt>
   116dc:	mov	r2, r0
   116e0:	mov	r1, r5
   116e4:	mov	r0, sl
   116e8:	mov	r5, r7
   116ec:	bl	10ee8 <error@plt>
   116f0:	cmp	r5, #0
   116f4:	beq	11708 <__mempcpy_chk@plt+0x6b8>
   116f8:	mov	r0, r6
   116fc:	bl	11044 <close@plt>
   11700:	b	11708 <__mempcpy_chk@plt+0x6b8>
   11704:	mov	r4, #2
   11708:	movw	r0, #24896	; 0x6140
   1170c:	movt	r0, #2
   11710:	ldr	r0, [r0]
   11714:	bl	10ed0 <ferror_unlocked@plt>
   11718:	cmp	r0, #0
   1171c:	bne	118a0 <__mempcpy_chk@plt+0x850>
   11720:	mov	r0, #1
   11724:	mov	r1, #1
   11728:	bl	10e58 <signal@plt>
   1172c:	movw	r0, #24888	; 0x6138
   11730:	movt	r0, #2
   11734:	ldr	r0, [r0]
   11738:	ldr	r0, [r9, r0, lsl #2]!
   1173c:	mov	r1, r9
   11740:	bl	10e40 <execvp@plt>
   11744:	bl	10f6c <__errno_location@plt>
   11748:	ldr	r5, [r0]
   1174c:	mov	sl, #126	; 0x7e
   11750:	mov	r0, r4
   11754:	mov	r1, #2
   11758:	cmp	r5, #2
   1175c:	movweq	sl, #127	; 0x7f
   11760:	bl	10e7c <dup2@plt>
   11764:	cmp	r0, #2
   11768:	bne	118a0 <__mempcpy_chk@plt+0x850>
   1176c:	movw	r1, #19717	; 0x4d05
   11770:	mov	r0, #0
   11774:	mov	r2, #5
   11778:	movt	r1, #1
   1177c:	bl	10e70 <dcgettext@plt>
   11780:	ldr	r1, [r9]
   11784:	mov	r4, r0
   11788:	mov	r0, #4
   1178c:	b	11888 <__mempcpy_chk@plt+0x838>
   11790:	bl	10f6c <__errno_location@plt>
   11794:	ldr	r6, [r0]
   11798:	mov	r4, r0
   1179c:	movw	r0, #19570	; 0x4c72
   117a0:	movt	r0, #1
   117a4:	bl	10f00 <getenv@plt>
   117a8:	cmp	r0, #0
   117ac:	beq	117ec <__mempcpy_chk@plt+0x79c>
   117b0:	movw	r1, #19560	; 0x4c68
   117b4:	mov	r2, #0
   117b8:	str	r6, [sp, #20]
   117bc:	str	r9, [sp, #24]
   117c0:	movt	r1, #1
   117c4:	bl	11c20 <__mempcpy_chk@plt+0xbd0>
   117c8:	mov	r9, r0
   117cc:	cmp	r7, #0
   117d0:	beq	117f8 <__mempcpy_chk@plt+0x7a8>
   117d4:	mov	r0, #1
   117d8:	mov	r1, r9
   117dc:	movw	r2, #1089	; 0x441
   117e0:	mov	r3, #384	; 0x180
   117e4:	bl	11bb8 <__mempcpy_chk@plt+0xb68>
   117e8:	b	11808 <__mempcpy_chk@plt+0x7b8>
   117ec:	mov	r9, #0
   117f0:	mov	r5, r6
   117f4:	b	11824 <__mempcpy_chk@plt+0x7d4>
   117f8:	mov	r0, r9
   117fc:	movw	r1, #1089	; 0x441
   11800:	mov	r2, #384	; 0x180
   11804:	bl	10ef4 <open64@plt>
   11808:	mov	r6, r0
   1180c:	cmn	r0, #1
   11810:	ble	1181c <__mempcpy_chk@plt+0x7cc>
   11814:	mov	r4, r9
   11818:	b	115e8 <__mempcpy_chk@plt+0x598>
   1181c:	ldr	r5, [r4]
   11820:	ldr	r6, [sp, #20]
   11824:	movw	r1, #19575	; 0x4c77
   11828:	mov	r0, #0
   1182c:	mov	r2, #5
   11830:	movt	r1, #1
   11834:	bl	10e70 <dcgettext@plt>
   11838:	movw	r1, #19560	; 0x4c68
   1183c:	mov	r4, r0
   11840:	mov	r0, #4
   11844:	movt	r1, #1
   11848:	bl	13584 <__mempcpy_chk@plt+0x2534>
   1184c:	mov	r3, r0
   11850:	mov	r0, #0
   11854:	mov	r1, r6
   11858:	mov	r2, r4
   1185c:	bl	10ee8 <error@plt>
   11860:	cmp	r9, #0
   11864:	beq	118a0 <__mempcpy_chk@plt+0x850>
   11868:	movw	r1, #19575	; 0x4c77
   1186c:	mov	r0, #0
   11870:	mov	r2, #5
   11874:	movt	r1, #1
   11878:	bl	10e70 <dcgettext@plt>
   1187c:	mov	r4, r0
   11880:	mov	r0, #4
   11884:	mov	r1, r9
   11888:	bl	13584 <__mempcpy_chk@plt+0x2534>
   1188c:	mov	r3, r0
   11890:	mov	r0, #0
   11894:	mov	r1, r5
   11898:	mov	r2, r4
   1189c:	bl	10ee8 <error@plt>
   118a0:	mov	r0, sl
   118a4:	sub	sp, fp, #28
   118a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118ac:	movw	r1, #19478	; 0x4c16
   118b0:	mov	r0, #0
   118b4:	mov	r2, #5
   118b8:	movt	r1, #1
   118bc:	bl	10e70 <dcgettext@plt>
   118c0:	mov	r2, r0
   118c4:	mov	r0, #0
   118c8:	mov	r1, #0
   118cc:	bl	10ee8 <error@plt>
   118d0:	mov	r0, sl
   118d4:	bl	1114c <__mempcpy_chk@plt+0xfc>
   118d8:	movw	r1, #24912	; 0x6150
   118dc:	movt	r1, #2
   118e0:	str	r0, [r1]
   118e4:	bx	lr
   118e8:	movw	r1, #24916	; 0x6154
   118ec:	movt	r1, #2
   118f0:	strb	r0, [r1]
   118f4:	bx	lr
   118f8:	push	{r4, r5, r6, sl, fp, lr}
   118fc:	add	fp, sp, #16
   11900:	sub	sp, sp, #8
   11904:	movw	r0, #24900	; 0x6144
   11908:	movt	r0, #2
   1190c:	ldr	r0, [r0]
   11910:	bl	14498 <__mempcpy_chk@plt+0x3448>
   11914:	cmp	r0, #0
   11918:	beq	11940 <__mempcpy_chk@plt+0x8f0>
   1191c:	movw	r0, #24916	; 0x6154
   11920:	movt	r0, #2
   11924:	ldrb	r0, [r0]
   11928:	cmp	r0, #0
   1192c:	beq	11960 <__mempcpy_chk@plt+0x910>
   11930:	bl	10f6c <__errno_location@plt>
   11934:	ldr	r0, [r0]
   11938:	cmp	r0, #32
   1193c:	bne	11960 <__mempcpy_chk@plt+0x910>
   11940:	movw	r0, #24896	; 0x6140
   11944:	movt	r0, #2
   11948:	ldr	r0, [r0]
   1194c:	bl	14498 <__mempcpy_chk@plt+0x3448>
   11950:	cmp	r0, #0
   11954:	subeq	sp, fp, #16
   11958:	popeq	{r4, r5, r6, sl, fp, pc}
   1195c:	b	119d0 <__mempcpy_chk@plt+0x980>
   11960:	movw	r1, #20127	; 0x4e9f
   11964:	mov	r0, #0
   11968:	mov	r2, #5
   1196c:	movt	r1, #1
   11970:	bl	10e70 <dcgettext@plt>
   11974:	mov	r4, r0
   11978:	movw	r0, #24912	; 0x6150
   1197c:	movt	r0, #2
   11980:	ldr	r6, [r0]
   11984:	bl	10f6c <__errno_location@plt>
   11988:	ldr	r5, [r0]
   1198c:	cmp	r6, #0
   11990:	bne	119ac <__mempcpy_chk@plt+0x95c>
   11994:	movw	r2, #20143	; 0x4eaf
   11998:	mov	r0, #0
   1199c:	mov	r1, r5
   119a0:	mov	r3, r4
   119a4:	movt	r2, #1
   119a8:	b	119cc <__mempcpy_chk@plt+0x97c>
   119ac:	mov	r0, r6
   119b0:	bl	1367c <__mempcpy_chk@plt+0x262c>
   119b4:	movw	r2, #20139	; 0x4eab
   119b8:	mov	r3, r0
   119bc:	str	r4, [sp]
   119c0:	mov	r0, #0
   119c4:	mov	r1, r5
   119c8:	movt	r2, #1
   119cc:	bl	10ee8 <error@plt>
   119d0:	movw	r0, #24812	; 0x60ec
   119d4:	movt	r0, #2
   119d8:	ldr	r0, [r0]
   119dc:	bl	10e28 <_exit@plt>
   119e0:	sub	sp, sp, #8
   119e4:	push	{r4, r5, r6, r7, fp, lr}
   119e8:	add	fp, sp, #16
   119ec:	sub	sp, sp, #8
   119f0:	mov	r5, r0
   119f4:	add	r0, fp, #8
   119f8:	cmp	r1, #11
   119fc:	str	r3, [fp, #12]
   11a00:	str	r2, [fp, #8]
   11a04:	str	r0, [sp, #4]
   11a08:	bhi	11a44 <__mempcpy_chk@plt+0x9f4>
   11a0c:	mov	r0, #1
   11a10:	movw	r2, #1300	; 0x514
   11a14:	tst	r2, r0, lsl r1
   11a18:	bne	11afc <__mempcpy_chk@plt+0xaac>
   11a1c:	movw	r2, #2570	; 0xa0a
   11a20:	tst	r2, r0, lsl r1
   11a24:	bne	11a6c <__mempcpy_chk@plt+0xa1c>
   11a28:	cmp	r1, #0
   11a2c:	bne	11a44 <__mempcpy_chk@plt+0x9f4>
   11a30:	ldr	r0, [sp, #4]
   11a34:	add	r1, r0, #4
   11a38:	str	r1, [sp, #4]
   11a3c:	mov	r1, #0
   11a40:	b	11b08 <__mempcpy_chk@plt+0xab8>
   11a44:	sub	r0, r1, #1024	; 0x400
   11a48:	cmp	r0, #10
   11a4c:	bhi	11afc <__mempcpy_chk@plt+0xaac>
   11a50:	mov	r2, #1
   11a54:	movw	r3, #645	; 0x285
   11a58:	tst	r3, r2, lsl r0
   11a5c:	bne	11afc <__mempcpy_chk@plt+0xaac>
   11a60:	movw	r3, #1282	; 0x502
   11a64:	tst	r3, r2, lsl r0
   11a68:	beq	11a78 <__mempcpy_chk@plt+0xa28>
   11a6c:	mov	r0, r5
   11a70:	bl	10fcc <fcntl64@plt>
   11a74:	b	11b14 <__mempcpy_chk@plt+0xac4>
   11a78:	cmp	r0, #6
   11a7c:	bne	11afc <__mempcpy_chk@plt+0xaac>
   11a80:	ldr	r0, [sp, #4]
   11a84:	movw	r7, #24920	; 0x6158
   11a88:	movt	r7, #2
   11a8c:	add	r1, r0, #4
   11a90:	str	r1, [sp, #4]
   11a94:	ldr	r6, [r0]
   11a98:	ldr	r0, [r7]
   11a9c:	cmp	r0, #0
   11aa0:	blt	11b38 <__mempcpy_chk@plt+0xae8>
   11aa4:	mov	r0, r5
   11aa8:	movw	r1, #1030	; 0x406
   11aac:	mov	r2, r6
   11ab0:	bl	10fcc <fcntl64@plt>
   11ab4:	mov	r4, r0
   11ab8:	cmn	r0, #1
   11abc:	bgt	11b2c <__mempcpy_chk@plt+0xadc>
   11ac0:	bl	10f6c <__errno_location@plt>
   11ac4:	ldr	r0, [r0]
   11ac8:	cmp	r0, #22
   11acc:	bne	11b2c <__mempcpy_chk@plt+0xadc>
   11ad0:	mov	r0, r5
   11ad4:	mov	r1, #0
   11ad8:	mov	r2, r6
   11adc:	bl	10fcc <fcntl64@plt>
   11ae0:	mov	r4, r0
   11ae4:	cmp	r0, #0
   11ae8:	blt	11b18 <__mempcpy_chk@plt+0xac8>
   11aec:	mvn	r0, #0
   11af0:	str	r0, [r7]
   11af4:	mov	r0, #1
   11af8:	b	11b5c <__mempcpy_chk@plt+0xb0c>
   11afc:	ldr	r0, [sp, #4]
   11b00:	add	r2, r0, #4
   11b04:	str	r2, [sp, #4]
   11b08:	ldr	r2, [r0]
   11b0c:	mov	r0, r5
   11b10:	bl	10fcc <fcntl64@plt>
   11b14:	mov	r4, r0
   11b18:	mov	r0, r4
   11b1c:	sub	sp, fp, #16
   11b20:	pop	{r4, r5, r6, r7, fp, lr}
   11b24:	add	sp, sp, #8
   11b28:	bx	lr
   11b2c:	mov	r0, #1
   11b30:	str	r0, [r7]
   11b34:	b	11b18 <__mempcpy_chk@plt+0xac8>
   11b38:	mov	r0, r5
   11b3c:	mov	r1, #0
   11b40:	mov	r2, r6
   11b44:	bl	10fcc <fcntl64@plt>
   11b48:	mov	r4, r0
   11b4c:	ldr	r0, [r7]
   11b50:	add	r0, r0, #1
   11b54:	clz	r0, r0
   11b58:	lsr	r0, r0, #5
   11b5c:	cmp	r0, #0
   11b60:	beq	11b18 <__mempcpy_chk@plt+0xac8>
   11b64:	cmp	r4, #0
   11b68:	blt	11b18 <__mempcpy_chk@plt+0xac8>
   11b6c:	mov	r0, r4
   11b70:	mov	r1, #1
   11b74:	bl	10fcc <fcntl64@plt>
   11b78:	cmp	r0, #0
   11b7c:	blt	11b98 <__mempcpy_chk@plt+0xb48>
   11b80:	orr	r2, r0, #1
   11b84:	mov	r0, r4
   11b88:	mov	r1, #2
   11b8c:	bl	10fcc <fcntl64@plt>
   11b90:	cmn	r0, #1
   11b94:	bne	11b18 <__mempcpy_chk@plt+0xac8>
   11b98:	bl	10f6c <__errno_location@plt>
   11b9c:	ldr	r6, [r0]
   11ba0:	mov	r5, r0
   11ba4:	mov	r0, r4
   11ba8:	bl	11044 <close@plt>
   11bac:	str	r6, [r5]
   11bb0:	mvn	r4, #0
   11bb4:	b	11b18 <__mempcpy_chk@plt+0xac8>
   11bb8:	push	{r4, r5, r6, r7, fp, lr}
   11bbc:	add	fp, sp, #16
   11bc0:	mov	r5, r0
   11bc4:	mov	r0, r1
   11bc8:	mov	r1, r2
   11bcc:	mov	r2, r3
   11bd0:	bl	10ef4 <open64@plt>
   11bd4:	mov	r4, r0
   11bd8:	cmp	r0, r5
   11bdc:	beq	11c18 <__mempcpy_chk@plt+0xbc8>
   11be0:	cmp	r4, #0
   11be4:	blt	11c18 <__mempcpy_chk@plt+0xbc8>
   11be8:	mov	r0, r4
   11bec:	mov	r1, r5
   11bf0:	bl	10e7c <dup2@plt>
   11bf4:	mov	r5, r0
   11bf8:	bl	10f6c <__errno_location@plt>
   11bfc:	ldr	r7, [r0]
   11c00:	mov	r6, r0
   11c04:	mov	r0, r4
   11c08:	bl	11044 <close@plt>
   11c0c:	mov	r0, r5
   11c10:	str	r7, [r6]
   11c14:	pop	{r4, r5, r6, r7, fp, pc}
   11c18:	mov	r0, r4
   11c1c:	pop	{r4, r5, r6, r7, fp, pc}
   11c20:	push	{fp, lr}
   11c24:	mov	fp, sp
   11c28:	bl	11c38 <__mempcpy_chk@plt+0xbe8>
   11c2c:	cmp	r0, #0
   11c30:	popne	{fp, pc}
   11c34:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   11c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c3c:	add	fp, sp, #28
   11c40:	push	{r2}		; (str r2, [sp, #-4]!)
   11c44:	mov	sl, r1
   11c48:	mov	r7, r0
   11c4c:	bl	14418 <__mempcpy_chk@plt+0x33c8>
   11c50:	sub	r4, r0, r7
   11c54:	bl	14460 <__mempcpy_chk@plt+0x3410>
   11c58:	mov	r6, r0
   11c5c:	add	r5, r4, r0
   11c60:	mov	r0, sl
   11c64:	bl	10f60 <strlen@plt>
   11c68:	mov	r9, r0
   11c6c:	cmp	r6, #0
   11c70:	beq	11c98 <__mempcpy_chk@plt+0xc48>
   11c74:	add	r0, r7, r5
   11c78:	mov	r4, #0
   11c7c:	ldrb	r0, [r0, #-1]
   11c80:	cmp	r0, #47	; 0x2f
   11c84:	beq	11ca8 <__mempcpy_chk@plt+0xc58>
   11c88:	ldrb	r0, [sl]
   11c8c:	subs	r4, r0, #47	; 0x2f
   11c90:	movwne	r4, #47	; 0x2f
   11c94:	b	11ca8 <__mempcpy_chk@plt+0xc58>
   11c98:	ldrb	r0, [sl]
   11c9c:	mov	r4, #0
   11ca0:	cmp	r0, #47	; 0x2f
   11ca4:	movweq	r4, #46	; 0x2e
   11ca8:	uxtb	r8, r4
   11cac:	add	r0, r9, r5
   11cb0:	cmp	r8, #0
   11cb4:	movwne	r8, #1
   11cb8:	add	r0, r0, r8
   11cbc:	add	r0, r0, #1
   11cc0:	bl	14398 <__mempcpy_chk@plt+0x3348>
   11cc4:	mov	r6, r0
   11cc8:	cmp	r0, #0
   11ccc:	beq	11d0c <__mempcpy_chk@plt+0xcbc>
   11cd0:	mov	r0, r6
   11cd4:	mov	r1, r7
   11cd8:	mov	r2, r5
   11cdc:	mvn	r3, #0
   11ce0:	bl	11050 <__mempcpy_chk@plt>
   11ce4:	ldr	r1, [sp]
   11ce8:	strb	r4, [r0], r8
   11cec:	mov	r2, r9
   11cf0:	mvn	r3, #0
   11cf4:	cmp	r1, #0
   11cf8:	strne	r0, [r1]
   11cfc:	mov	r1, sl
   11d00:	bl	11050 <__mempcpy_chk@plt>
   11d04:	mov	r1, #0
   11d08:	strb	r1, [r0]
   11d0c:	mov	r0, r6
   11d10:	sub	sp, fp, #28
   11d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d18:	push	{r4, r5, r6, sl, fp, lr}
   11d1c:	add	fp, sp, #16
   11d20:	mov	r4, r0
   11d24:	bl	10f6c <__errno_location@plt>
   11d28:	ldr	r6, [r0]
   11d2c:	mov	r5, r0
   11d30:	mov	r0, r4
   11d34:	bl	10e1c <free@plt>
   11d38:	str	r6, [r5]
   11d3c:	pop	{r4, r5, r6, sl, fp, pc}
   11d40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11d44:	add	fp, sp, #24
   11d48:	sub	sp, sp, #8
   11d4c:	movw	r6, #24904	; 0x6148
   11d50:	mov	r4, #0
   11d54:	cmp	r0, #2
   11d58:	movt	r6, #2
   11d5c:	ldr	r7, [r6]
   11d60:	str	r4, [r6]
   11d64:	bne	11dd8 <__mempcpy_chk@plt+0xd88>
   11d68:	mov	r8, r3
   11d6c:	movw	r3, #20164	; 0x4ec4
   11d70:	mov	r5, r2
   11d74:	movw	r2, #20146	; 0x4eb2
   11d78:	mov	r0, #2
   11d7c:	str	r4, [sp]
   11d80:	movt	r2, #1
   11d84:	movt	r3, #1
   11d88:	bl	10f3c <getopt_long@plt>
   11d8c:	cmp	r0, #104	; 0x68
   11d90:	beq	11dcc <__mempcpy_chk@plt+0xd7c>
   11d94:	cmp	r0, #118	; 0x76
   11d98:	bne	11dd8 <__mempcpy_chk@plt+0xd88>
   11d9c:	movw	r0, #24900	; 0x6144
   11da0:	ldr	r3, [fp, #8]
   11da4:	add	r1, fp, #16
   11da8:	mov	r2, r8
   11dac:	movt	r0, #2
   11db0:	str	r1, [sp, #4]
   11db4:	str	r1, [sp]
   11db8:	mov	r1, r5
   11dbc:	ldr	r0, [r0]
   11dc0:	bl	13d5c <__mempcpy_chk@plt+0x2d0c>
   11dc4:	mov	r0, #0
   11dc8:	bl	10f54 <exit@plt>
   11dcc:	ldr	r1, [fp, #12]
   11dd0:	mov	r0, #0
   11dd4:	blx	r1
   11dd8:	movw	r0, #24888	; 0x6138
   11ddc:	str	r7, [r6]
   11de0:	movt	r0, #2
   11de4:	str	r4, [r0]
   11de8:	sub	sp, fp, #24
   11dec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11df0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11df4:	add	fp, sp, #24
   11df8:	sub	sp, sp, #8
   11dfc:	movw	r6, #24904	; 0x6148
   11e00:	mov	r8, r3
   11e04:	ldr	r3, [fp, #12]
   11e08:	mov	r5, r2
   11e0c:	mov	r2, #1
   11e10:	movw	r4, #18823	; 0x4987
   11e14:	movt	r6, #2
   11e18:	movt	r4, #1
   11e1c:	ldr	r7, [r6]
   11e20:	str	r2, [r6]
   11e24:	mov	r2, #0
   11e28:	str	r2, [sp]
   11e2c:	movw	r2, #20146	; 0x4eb2
   11e30:	cmp	r3, #0
   11e34:	movt	r2, #1
   11e38:	movw	r3, #20164	; 0x4ec4
   11e3c:	movne	r2, r4
   11e40:	movt	r3, #1
   11e44:	bl	10f3c <getopt_long@plt>
   11e48:	cmn	r0, #1
   11e4c:	beq	11e7c <__mempcpy_chk@plt+0xe2c>
   11e50:	ldr	r1, [fp, #16]
   11e54:	cmp	r0, #104	; 0x68
   11e58:	beq	11e74 <__mempcpy_chk@plt+0xe24>
   11e5c:	cmp	r0, #118	; 0x76
   11e60:	beq	11e88 <__mempcpy_chk@plt+0xe38>
   11e64:	movw	r0, #24812	; 0x60ec
   11e68:	movt	r0, #2
   11e6c:	ldr	r0, [r0]
   11e70:	b	11e78 <__mempcpy_chk@plt+0xe28>
   11e74:	mov	r0, #0
   11e78:	blx	r1
   11e7c:	str	r7, [r6]
   11e80:	sub	sp, fp, #24
   11e84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11e88:	movw	r0, #24900	; 0x6144
   11e8c:	ldr	r3, [fp, #8]
   11e90:	add	r1, fp, #20
   11e94:	mov	r2, r8
   11e98:	movt	r0, #2
   11e9c:	str	r1, [sp, #4]
   11ea0:	str	r1, [sp]
   11ea4:	mov	r1, r5
   11ea8:	ldr	r0, [r0]
   11eac:	bl	13d5c <__mempcpy_chk@plt+0x2d0c>
   11eb0:	mov	r0, #0
   11eb4:	bl	10f54 <exit@plt>
   11eb8:	push	{r4, r5, fp, lr}
   11ebc:	add	fp, sp, #8
   11ec0:	cmp	r0, #0
   11ec4:	beq	11f58 <__mempcpy_chk@plt+0xf08>
   11ec8:	mov	r1, #47	; 0x2f
   11ecc:	mov	r4, r0
   11ed0:	bl	10fe4 <strrchr@plt>
   11ed4:	cmp	r0, #0
   11ed8:	mov	r5, r4
   11edc:	addne	r5, r0, #1
   11ee0:	sub	r0, r5, r4
   11ee4:	cmp	r0, #7
   11ee8:	blt	11f3c <__mempcpy_chk@plt+0xeec>
   11eec:	movw	r1, #20268	; 0x4f2c
   11ef0:	sub	r0, r5, #7
   11ef4:	mov	r2, #7
   11ef8:	movt	r1, #1
   11efc:	bl	1102c <strncmp@plt>
   11f00:	cmp	r0, #0
   11f04:	bne	11f3c <__mempcpy_chk@plt+0xeec>
   11f08:	movw	r1, #20276	; 0x4f34
   11f0c:	mov	r0, r5
   11f10:	mov	r2, #3
   11f14:	movt	r1, #1
   11f18:	bl	1102c <strncmp@plt>
   11f1c:	cmp	r0, #0
   11f20:	beq	11f2c <__mempcpy_chk@plt+0xedc>
   11f24:	mov	r4, r5
   11f28:	b	11f3c <__mempcpy_chk@plt+0xeec>
   11f2c:	movw	r0, #24880	; 0x6130
   11f30:	add	r4, r5, #3
   11f34:	movt	r0, #2
   11f38:	str	r4, [r0]
   11f3c:	movw	r0, #24884	; 0x6134
   11f40:	movt	r0, #2
   11f44:	str	r4, [r0]
   11f48:	movw	r0, #24924	; 0x615c
   11f4c:	movt	r0, #2
   11f50:	str	r4, [r0]
   11f54:	pop	{r4, r5, fp, pc}
   11f58:	movw	r0, #24896	; 0x6140
   11f5c:	movt	r0, #2
   11f60:	ldr	r1, [r0]
   11f64:	movw	r0, #20212	; 0x4ef4
   11f68:	movt	r0, #1
   11f6c:	bl	11020 <fputs@plt>
   11f70:	bl	11038 <abort@plt>
   11f74:	push	{r4, r5, r6, sl, fp, lr}
   11f78:	add	fp, sp, #16
   11f7c:	mov	r4, r0
   11f80:	movw	r0, #24928	; 0x6160
   11f84:	movt	r0, #2
   11f88:	cmp	r4, #0
   11f8c:	moveq	r4, r0
   11f90:	bl	10f6c <__errno_location@plt>
   11f94:	ldr	r6, [r0]
   11f98:	mov	r5, r0
   11f9c:	mov	r0, r4
   11fa0:	mov	r1, #48	; 0x30
   11fa4:	bl	14200 <__mempcpy_chk@plt+0x31b0>
   11fa8:	str	r6, [r5]
   11fac:	pop	{r4, r5, r6, sl, fp, pc}
   11fb0:	movw	r1, #24928	; 0x6160
   11fb4:	cmp	r0, #0
   11fb8:	movt	r1, #2
   11fbc:	movne	r1, r0
   11fc0:	ldr	r0, [r1]
   11fc4:	bx	lr
   11fc8:	movw	r2, #24928	; 0x6160
   11fcc:	cmp	r0, #0
   11fd0:	movt	r2, #2
   11fd4:	movne	r2, r0
   11fd8:	str	r1, [r2]
   11fdc:	bx	lr
   11fe0:	movw	r3, #24928	; 0x6160
   11fe4:	cmp	r0, #0
   11fe8:	movt	r3, #2
   11fec:	movne	r3, r0
   11ff0:	ubfx	r0, r1, #5, #3
   11ff4:	and	r1, r1, #31
   11ff8:	add	r0, r3, r0, lsl #2
   11ffc:	ldr	r3, [r0, #8]
   12000:	eor	r2, r2, r3, lsr r1
   12004:	and	r2, r2, #1
   12008:	eor	r2, r3, r2, lsl r1
   1200c:	str	r2, [r0, #8]
   12010:	mov	r0, #1
   12014:	and	r0, r0, r3, lsr r1
   12018:	bx	lr
   1201c:	movw	r2, #24928	; 0x6160
   12020:	cmp	r0, #0
   12024:	movt	r2, #2
   12028:	movne	r2, r0
   1202c:	ldr	r0, [r2, #4]
   12030:	str	r1, [r2, #4]
   12034:	bx	lr
   12038:	movw	r3, #24928	; 0x6160
   1203c:	cmp	r0, #0
   12040:	movt	r3, #2
   12044:	movne	r3, r0
   12048:	cmp	r1, #0
   1204c:	mov	r0, #10
   12050:	cmpne	r2, #0
   12054:	str	r0, [r3]
   12058:	bne	12068 <__mempcpy_chk@plt+0x1018>
   1205c:	push	{fp, lr}
   12060:	mov	fp, sp
   12064:	bl	11038 <abort@plt>
   12068:	str	r1, [r3, #40]	; 0x28
   1206c:	str	r2, [r3, #44]	; 0x2c
   12070:	bx	lr
   12074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12078:	add	fp, sp, #28
   1207c:	sub	sp, sp, #20
   12080:	mov	r7, r0
   12084:	ldr	r0, [fp, #8]
   12088:	movw	r5, #24928	; 0x6160
   1208c:	mov	r8, r3
   12090:	mov	r9, r2
   12094:	mov	sl, r1
   12098:	movt	r5, #2
   1209c:	cmp	r0, #0
   120a0:	movne	r5, r0
   120a4:	bl	10f6c <__errno_location@plt>
   120a8:	mov	r4, r0
   120ac:	ldm	r5, {r0, r1}
   120b0:	ldr	r2, [r5, #40]	; 0x28
   120b4:	ldr	r3, [r5, #44]	; 0x2c
   120b8:	add	r5, r5, #8
   120bc:	ldr	r6, [r4]
   120c0:	stm	sp, {r0, r1, r5}
   120c4:	str	r2, [sp, #12]
   120c8:	str	r3, [sp, #16]
   120cc:	mov	r0, r7
   120d0:	mov	r1, sl
   120d4:	mov	r2, r9
   120d8:	mov	r3, r8
   120dc:	bl	120ec <__mempcpy_chk@plt+0x109c>
   120e0:	str	r6, [r4]
   120e4:	sub	sp, fp, #28
   120e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120f0:	add	fp, sp, #28
   120f4:	sub	sp, sp, #156	; 0x9c
   120f8:	str	r0, [fp, #-56]	; 0xffffffc8
   120fc:	ldr	r0, [fp, #12]
   12100:	mov	r4, r1
   12104:	str	r3, [sp, #80]	; 0x50
   12108:	str	r2, [fp, #-84]	; 0xffffffac
   1210c:	and	r1, r0, #4
   12110:	str	r1, [sp, #24]
   12114:	and	r1, r0, #1
   12118:	str	r1, [sp, #28]
   1211c:	ubfx	r7, r0, #1, #1
   12120:	bl	10eb8 <__ctype_get_mb_cur_max@plt>
   12124:	str	r0, [sp, #32]
   12128:	ldr	r0, [fp, #24]
   1212c:	ldr	r9, [fp, #8]
   12130:	mov	r2, #0
   12134:	mov	r1, #0
   12138:	mov	r5, #0
   1213c:	str	r2, [sp, #52]	; 0x34
   12140:	mov	r2, #1
   12144:	str	r0, [sp, #72]	; 0x48
   12148:	ldr	r0, [fp, #20]
   1214c:	str	r0, [sp, #64]	; 0x40
   12150:	mov	r0, #0
   12154:	str	r0, [sp, #92]	; 0x5c
   12158:	mov	r0, #0
   1215c:	str	r0, [fp, #-76]	; 0xffffffb4
   12160:	mov	r0, #0
   12164:	cmp	r9, #10
   12168:	str	r1, [sp, #68]	; 0x44
   1216c:	bhi	1316c <__mempcpy_chk@plt+0x211c>
   12170:	add	r1, pc, #28
   12174:	ldr	ip, [fp, #-84]	; 0xffffffac
   12178:	ldr	lr, [sp, #80]	; 0x50
   1217c:	mov	r6, r4
   12180:	mov	r8, #0
   12184:	mov	r3, #1
   12188:	mov	sl, #0
   1218c:	mov	r4, r2
   12190:	ldr	pc, [r1, r9, lsl #2]
   12194:	andeq	r2, r1, r4, ror #4
   12198:	andeq	r2, r1, r0, lsr #5
   1219c:	andeq	r2, r1, r4, ror r2
   121a0:	andeq	r2, r1, ip, asr r2
   121a4:	muleq	r1, r4, r2
   121a8:	andeq	r2, r1, ip, ror #5
   121ac:	andeq	r2, r1, r4, lsl #5
   121b0:	andeq	r2, r1, ip, asr #6
   121b4:	andeq	r2, r1, r0, asr #3
   121b8:	andeq	r2, r1, r0, asr #3
   121bc:	andeq	r2, r1, r8, ror #3
   121c0:	movw	r0, #20360	; 0x4f88
   121c4:	mov	r1, r9
   121c8:	movt	r0, #1
   121cc:	bl	138d4 <__mempcpy_chk@plt+0x2884>
   121d0:	str	r0, [sp, #64]	; 0x40
   121d4:	movw	r0, #20362	; 0x4f8a
   121d8:	mov	r1, r9
   121dc:	movt	r0, #1
   121e0:	bl	138d4 <__mempcpy_chk@plt+0x2884>
   121e4:	str	r0, [sp, #72]	; 0x48
   121e8:	mov	r8, #0
   121ec:	mov	sl, r7
   121f0:	tst	r7, #1
   121f4:	str	r5, [fp, #-48]	; 0xffffffd0
   121f8:	bne	12234 <__mempcpy_chk@plt+0x11e4>
   121fc:	ldr	r0, [sp, #64]	; 0x40
   12200:	ldrb	r0, [r0]
   12204:	cmp	r0, #0
   12208:	beq	12234 <__mempcpy_chk@plt+0x11e4>
   1220c:	ldr	r1, [sp, #64]	; 0x40
   12210:	mov	r8, #0
   12214:	add	r1, r1, #1
   12218:	cmp	r8, r6
   1221c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12220:	strbcc	r0, [r2, r8]
   12224:	ldrb	r0, [r1, r8]
   12228:	add	r8, r8, #1
   1222c:	cmp	r0, #0
   12230:	bne	12218 <__mempcpy_chk@plt+0x11c8>
   12234:	ldr	r7, [sp, #72]	; 0x48
   12238:	mov	r0, r7
   1223c:	bl	10f60 <strlen@plt>
   12240:	ldr	ip, [fp, #-84]	; 0xffffffac
   12244:	ldr	lr, [sp, #80]	; 0x50
   12248:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1224c:	str	r0, [fp, #-76]	; 0xffffffb4
   12250:	str	r7, [sp, #92]	; 0x5c
   12254:	mov	r3, #1
   12258:	b	1234c <__mempcpy_chk@plt+0x12fc>
   1225c:	mov	r0, #1
   12260:	b	122a0 <__mempcpy_chk@plt+0x1250>
   12264:	mov	r9, #0
   12268:	mov	r8, #0
   1226c:	mov	r3, r0
   12270:	b	12348 <__mempcpy_chk@plt+0x12f8>
   12274:	tst	r7, #1
   12278:	bne	122a0 <__mempcpy_chk@plt+0x1250>
   1227c:	mov	r3, r0
   12280:	b	122c8 <__mempcpy_chk@plt+0x1278>
   12284:	mov	r0, #1
   12288:	mov	r8, #0
   1228c:	mov	r9, #5
   12290:	b	12300 <__mempcpy_chk@plt+0x12b0>
   12294:	mov	r3, #1
   12298:	tst	r7, #1
   1229c:	beq	122c8 <__mempcpy_chk@plt+0x1278>
   122a0:	mov	r1, #1
   122a4:	mov	r8, #0
   122a8:	mov	r9, #2
   122ac:	mov	r3, r0
   122b0:	mov	sl, #1
   122b4:	str	r1, [fp, #-76]	; 0xffffffb4
   122b8:	movw	r1, #20362	; 0x4f8a
   122bc:	movt	r1, #1
   122c0:	str	r1, [sp, #92]	; 0x5c
   122c4:	b	1234c <__mempcpy_chk@plt+0x12fc>
   122c8:	cmp	r6, #0
   122cc:	mov	r8, #1
   122d0:	mov	r9, #2
   122d4:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   122d8:	movne	r0, #39	; 0x27
   122dc:	strbne	r0, [r1]
   122e0:	movw	r0, #20362	; 0x4f8a
   122e4:	movt	r0, #1
   122e8:	b	1233c <__mempcpy_chk@plt+0x12ec>
   122ec:	mov	r9, #5
   122f0:	tst	r7, #1
   122f4:	beq	1231c <__mempcpy_chk@plt+0x12cc>
   122f8:	mov	r0, #1
   122fc:	mov	r8, #0
   12300:	str	r0, [fp, #-76]	; 0xffffffb4
   12304:	movw	r0, #20358	; 0x4f86
   12308:	mov	r3, #1
   1230c:	mov	sl, #1
   12310:	movt	r0, #1
   12314:	str	r0, [sp, #92]	; 0x5c
   12318:	b	1234c <__mempcpy_chk@plt+0x12fc>
   1231c:	cmp	r6, #0
   12320:	mov	r8, #1
   12324:	mov	r3, #1
   12328:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   1232c:	movne	r0, #34	; 0x22
   12330:	strbne	r0, [r1]
   12334:	movw	r0, #20358	; 0x4f86
   12338:	movt	r0, #1
   1233c:	str	r0, [sp, #92]	; 0x5c
   12340:	mov	r0, #1
   12344:	str	r0, [fp, #-76]	; 0xffffffb4
   12348:	mov	sl, #0
   1234c:	ldr	r0, [fp, #16]
   12350:	mov	r7, #0
   12354:	str	r9, [fp, #-64]	; 0xffffffc0
   12358:	str	sl, [fp, #-72]	; 0xffffffb8
   1235c:	str	r3, [sp, #84]	; 0x54
   12360:	cmp	r0, #0
   12364:	movwne	r0, #1
   12368:	and	r0, r0, sl
   1236c:	str	r0, [fp, #-88]	; 0xffffffa8
   12370:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12374:	cmp	r0, #0
   12378:	movwne	r0, #1
   1237c:	subs	r2, r9, #2
   12380:	and	r1, r0, sl
   12384:	str	r2, [fp, #-80]	; 0xffffffb0
   12388:	and	r1, r3, r1
   1238c:	str	r1, [sp, #44]	; 0x2c
   12390:	clz	r1, r2
   12394:	lsr	r1, r1, #5
   12398:	and	r1, r1, sl
   1239c:	str	r1, [sp, #56]	; 0x38
   123a0:	mov	r1, r2
   123a4:	eor	r2, sl, #1
   123a8:	movwne	r1, #1
   123ac:	str	r2, [sp, #88]	; 0x58
   123b0:	orr	r2, r1, r2
   123b4:	and	r1, r1, r3
   123b8:	and	r0, r0, r1
   123bc:	str	r2, [sp, #60]	; 0x3c
   123c0:	str	r1, [fp, #-68]	; 0xffffffbc
   123c4:	str	r0, [fp, #-60]	; 0xffffffc4
   123c8:	eor	r0, r3, #1
   123cc:	str	r0, [sp, #48]	; 0x30
   123d0:	cmn	lr, #1
   123d4:	beq	123e4 <__mempcpy_chk@plt+0x1394>
   123d8:	cmp	r7, lr
   123dc:	bne	123f0 <__mempcpy_chk@plt+0x13a0>
   123e0:	b	12f9c <__mempcpy_chk@plt+0x1f4c>
   123e4:	ldrb	r0, [ip, r7]
   123e8:	cmp	r0, #0
   123ec:	beq	12fa4 <__mempcpy_chk@plt+0x1f54>
   123f0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   123f4:	mov	r9, #0
   123f8:	str	r5, [fp, #-48]	; 0xffffffd0
   123fc:	str	r6, [fp, #-52]	; 0xffffffcc
   12400:	cmp	r0, #0
   12404:	beq	12444 <__mempcpy_chk@plt+0x13f4>
   12408:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1240c:	mov	r5, r4
   12410:	add	r4, r7, r0
   12414:	cmp	r0, #2
   12418:	bcc	12434 <__mempcpy_chk@plt+0x13e4>
   1241c:	cmn	lr, #1
   12420:	bne	12434 <__mempcpy_chk@plt+0x13e4>
   12424:	mov	r0, ip
   12428:	bl	10f60 <strlen@plt>
   1242c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12430:	mov	lr, r0
   12434:	cmp	r4, lr
   12438:	bls	1244c <__mempcpy_chk@plt+0x13fc>
   1243c:	mov	r6, #0
   12440:	b	1248c <__mempcpy_chk@plt+0x143c>
   12444:	mov	r6, #0
   12448:	b	12490 <__mempcpy_chk@plt+0x1440>
   1244c:	ldr	r1, [sp, #92]	; 0x5c
   12450:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12454:	add	r0, ip, r7
   12458:	mov	r4, lr
   1245c:	bl	10e64 <memcmp@plt>
   12460:	ldr	r2, [sp, #88]	; 0x58
   12464:	cmp	r0, #0
   12468:	mov	r1, r0
   1246c:	movwne	r1, #1
   12470:	orr	r1, r1, r2
   12474:	tst	r1, #1
   12478:	beq	13038 <__mempcpy_chk@plt+0x1fe8>
   1247c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12480:	clz	r0, r0
   12484:	mov	lr, r4
   12488:	lsr	r6, r0, #5
   1248c:	mov	r4, r5
   12490:	ldrb	r5, [ip, r7]
   12494:	cmp	r5, #126	; 0x7e
   12498:	bhi	12860 <__mempcpy_chk@plt+0x1810>
   1249c:	add	r3, pc, #16
   124a0:	mov	sl, #1
   124a4:	mov	r2, #110	; 0x6e
   124a8:	mov	r0, #97	; 0x61
   124ac:	mov	r1, #0
   124b0:	ldr	pc, [r3, r5, lsl #2]
   124b4:	andeq	r2, r1, r4, asr #14
   124b8:	andeq	r2, r1, r0, ror #16
   124bc:	andeq	r2, r1, r0, ror #16
   124c0:	andeq	r2, r1, r0, ror #16
   124c4:	andeq	r2, r1, r0, ror #16
   124c8:	andeq	r2, r1, r0, ror #16
   124cc:	andeq	r2, r1, r0, ror #16
   124d0:	andeq	r2, r1, r4, lsl #18
   124d4:	andeq	r2, r1, r4, lsr #14
   124d8:	andeq	r2, r1, ip, lsl r7
   124dc:	andeq	r2, r1, r0, lsr r7
   124e0:			; <UNDEFINED> instruction: 0x000127b4
   124e4:	andeq	r2, r1, r4, lsl r7
   124e8:	andeq	r2, r1, ip, lsr #14
   124ec:	andeq	r2, r1, r0, ror #16
   124f0:	andeq	r2, r1, r0, ror #16
   124f4:	andeq	r2, r1, r0, ror #16
   124f8:	andeq	r2, r1, r0, ror #16
   124fc:	andeq	r2, r1, r0, ror #16
   12500:	andeq	r2, r1, r0, ror #16
   12504:	andeq	r2, r1, r0, ror #16
   12508:	andeq	r2, r1, r0, ror #16
   1250c:	andeq	r2, r1, r0, ror #16
   12510:	andeq	r2, r1, r0, ror #16
   12514:	andeq	r2, r1, r0, ror #16
   12518:	andeq	r2, r1, r0, ror #16
   1251c:	andeq	r2, r1, r0, ror #16
   12520:	andeq	r2, r1, r0, ror #16
   12524:	andeq	r2, r1, r0, ror #16
   12528:	andeq	r2, r1, r0, ror #16
   1252c:	andeq	r2, r1, r0, ror #16
   12530:	andeq	r2, r1, r0, ror #16
   12534:	andeq	r2, r1, r4, asr #17
   12538:	andeq	r2, r1, r8, asr #17
   1253c:	andeq	r2, r1, r8, asr #17
   12540:	andeq	r2, r1, r4, asr #13
   12544:	andeq	r2, r1, r8, asr #17
   12548:			; <UNDEFINED> instruction: 0x000126b0
   1254c:	andeq	r2, r1, r8, asr #17
   12550:			; <UNDEFINED> instruction: 0x000127bc
   12554:	andeq	r2, r1, r8, asr #17
   12558:	andeq	r2, r1, r8, asr #17
   1255c:	andeq	r2, r1, r8, asr #17
   12560:			; <UNDEFINED> instruction: 0x000126b0
   12564:			; <UNDEFINED> instruction: 0x000126b0
   12568:			; <UNDEFINED> instruction: 0x000126b0
   1256c:			; <UNDEFINED> instruction: 0x000126b0
   12570:			; <UNDEFINED> instruction: 0x000126b0
   12574:			; <UNDEFINED> instruction: 0x000126b0
   12578:			; <UNDEFINED> instruction: 0x000126b0
   1257c:			; <UNDEFINED> instruction: 0x000126b0
   12580:			; <UNDEFINED> instruction: 0x000126b0
   12584:			; <UNDEFINED> instruction: 0x000126b0
   12588:			; <UNDEFINED> instruction: 0x000126b0
   1258c:			; <UNDEFINED> instruction: 0x000126b0
   12590:			; <UNDEFINED> instruction: 0x000126b0
   12594:			; <UNDEFINED> instruction: 0x000126b0
   12598:			; <UNDEFINED> instruction: 0x000126b0
   1259c:			; <UNDEFINED> instruction: 0x000126b0
   125a0:	andeq	r2, r1, r8, asr #17
   125a4:	andeq	r2, r1, r8, asr #17
   125a8:	andeq	r2, r1, r8, asr #17
   125ac:	andeq	r2, r1, r8, asr #17
   125b0:	andeq	r2, r1, r8, lsl #15
   125b4:	andeq	r2, r1, r0, ror #16
   125b8:			; <UNDEFINED> instruction: 0x000126b0
   125bc:			; <UNDEFINED> instruction: 0x000126b0
   125c0:			; <UNDEFINED> instruction: 0x000126b0
   125c4:			; <UNDEFINED> instruction: 0x000126b0
   125c8:			; <UNDEFINED> instruction: 0x000126b0
   125cc:			; <UNDEFINED> instruction: 0x000126b0
   125d0:			; <UNDEFINED> instruction: 0x000126b0
   125d4:			; <UNDEFINED> instruction: 0x000126b0
   125d8:			; <UNDEFINED> instruction: 0x000126b0
   125dc:			; <UNDEFINED> instruction: 0x000126b0
   125e0:			; <UNDEFINED> instruction: 0x000126b0
   125e4:			; <UNDEFINED> instruction: 0x000126b0
   125e8:			; <UNDEFINED> instruction: 0x000126b0
   125ec:			; <UNDEFINED> instruction: 0x000126b0
   125f0:			; <UNDEFINED> instruction: 0x000126b0
   125f4:			; <UNDEFINED> instruction: 0x000126b0
   125f8:			; <UNDEFINED> instruction: 0x000126b0
   125fc:			; <UNDEFINED> instruction: 0x000126b0
   12600:			; <UNDEFINED> instruction: 0x000126b0
   12604:			; <UNDEFINED> instruction: 0x000126b0
   12608:			; <UNDEFINED> instruction: 0x000126b0
   1260c:			; <UNDEFINED> instruction: 0x000126b0
   12610:			; <UNDEFINED> instruction: 0x000126b0
   12614:			; <UNDEFINED> instruction: 0x000126b0
   12618:			; <UNDEFINED> instruction: 0x000126b0
   1261c:			; <UNDEFINED> instruction: 0x000126b0
   12620:	andeq	r2, r1, r8, asr #17
   12624:	strdeq	r2, [r1], -r0
   12628:			; <UNDEFINED> instruction: 0x000126b0
   1262c:	andeq	r2, r1, r8, asr #17
   12630:			; <UNDEFINED> instruction: 0x000126b0
   12634:	andeq	r2, r1, r8, asr #17
   12638:			; <UNDEFINED> instruction: 0x000126b0
   1263c:			; <UNDEFINED> instruction: 0x000126b0
   12640:			; <UNDEFINED> instruction: 0x000126b0
   12644:			; <UNDEFINED> instruction: 0x000126b0
   12648:			; <UNDEFINED> instruction: 0x000126b0
   1264c:			; <UNDEFINED> instruction: 0x000126b0
   12650:			; <UNDEFINED> instruction: 0x000126b0
   12654:			; <UNDEFINED> instruction: 0x000126b0
   12658:			; <UNDEFINED> instruction: 0x000126b0
   1265c:			; <UNDEFINED> instruction: 0x000126b0
   12660:			; <UNDEFINED> instruction: 0x000126b0
   12664:			; <UNDEFINED> instruction: 0x000126b0
   12668:			; <UNDEFINED> instruction: 0x000126b0
   1266c:			; <UNDEFINED> instruction: 0x000126b0
   12670:			; <UNDEFINED> instruction: 0x000126b0
   12674:			; <UNDEFINED> instruction: 0x000126b0
   12678:			; <UNDEFINED> instruction: 0x000126b0
   1267c:			; <UNDEFINED> instruction: 0x000126b0
   12680:			; <UNDEFINED> instruction: 0x000126b0
   12684:			; <UNDEFINED> instruction: 0x000126b0
   12688:			; <UNDEFINED> instruction: 0x000126b0
   1268c:			; <UNDEFINED> instruction: 0x000126b0
   12690:			; <UNDEFINED> instruction: 0x000126b0
   12694:			; <UNDEFINED> instruction: 0x000126b0
   12698:			; <UNDEFINED> instruction: 0x000126b0
   1269c:			; <UNDEFINED> instruction: 0x000126b0
   126a0:	ldrdeq	r2, [r1], -r4
   126a4:	andeq	r2, r1, r8, asr #17
   126a8:	ldrdeq	r2, [r1], -r4
   126ac:	andeq	r2, r1, r4, asr #13
   126b0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   126b4:	cmp	r0, #0
   126b8:	beq	12918 <__mempcpy_chk@plt+0x18c8>
   126bc:	ldr	r0, [fp, #16]
   126c0:	b	1291c <__mempcpy_chk@plt+0x18cc>
   126c4:	mov	sl, #0
   126c8:	cmp	r7, #0
   126cc:	bne	12b34 <__mempcpy_chk@plt+0x1ae4>
   126d0:	b	128c4 <__mempcpy_chk@plt+0x1874>
   126d4:	mov	sl, #0
   126d8:	cmn	lr, #1
   126dc:	beq	128b0 <__mempcpy_chk@plt+0x1860>
   126e0:	cmp	r7, #0
   126e4:	cmpeq	lr, #1
   126e8:	bne	12b34 <__mempcpy_chk@plt+0x1ae4>
   126ec:	b	128c4 <__mempcpy_chk@plt+0x1874>
   126f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   126f4:	cmp	r0, #2
   126f8:	bne	128e8 <__mempcpy_chk@plt+0x1898>
   126fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12700:	tst	r0, #1
   12704:	bne	13054 <__mempcpy_chk@plt+0x2004>
   12708:	mov	r9, #0
   1270c:	mov	r0, #92	; 0x5c
   12710:	b	128fc <__mempcpy_chk@plt+0x18ac>
   12714:	mov	r0, #102	; 0x66
   12718:	b	12904 <__mempcpy_chk@plt+0x18b4>
   1271c:	mov	r2, #116	; 0x74
   12720:	b	12730 <__mempcpy_chk@plt+0x16e0>
   12724:	mov	r0, #98	; 0x62
   12728:	b	12904 <__mempcpy_chk@plt+0x18b4>
   1272c:	mov	r2, #114	; 0x72
   12730:	ldr	r0, [sp, #60]	; 0x3c
   12734:	tst	r0, #1
   12738:	mov	r0, r2
   1273c:	bne	12904 <__mempcpy_chk@plt+0x18b4>
   12740:	b	13054 <__mempcpy_chk@plt+0x2004>
   12744:	ldr	r0, [sp, #84]	; 0x54
   12748:	tst	r0, #1
   1274c:	beq	129f0 <__mempcpy_chk@plt+0x19a0>
   12750:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12754:	tst	r0, #1
   12758:	bne	1315c <__mempcpy_chk@plt+0x210c>
   1275c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12760:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12764:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12768:	cmp	r0, #2
   1276c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12770:	movwne	r0, #1
   12774:	orr	r0, r0, r3
   12778:	tst	r0, #1
   1277c:	beq	12e70 <__mempcpy_chk@plt+0x1e20>
   12780:	mov	r0, r8
   12784:	b	12eb0 <__mempcpy_chk@plt+0x1e60>
   12788:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1278c:	mov	r9, #0
   12790:	mov	r5, #63	; 0x3f
   12794:	cmp	r0, #5
   12798:	beq	12b3c <__mempcpy_chk@plt+0x1aec>
   1279c:	cmp	r0, #2
   127a0:	bne	12bfc <__mempcpy_chk@plt+0x1bac>
   127a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   127a8:	tst	r0, #1
   127ac:	beq	12c00 <__mempcpy_chk@plt+0x1bb0>
   127b0:	b	13054 <__mempcpy_chk@plt+0x2004>
   127b4:	mov	r0, #118	; 0x76
   127b8:	b	12904 <__mempcpy_chk@plt+0x18b4>
   127bc:	mov	r0, #1
   127c0:	mov	r5, #39	; 0x27
   127c4:	str	r0, [sp, #52]	; 0x34
   127c8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   127cc:	cmp	r0, #2
   127d0:	bne	12858 <__mempcpy_chk@plt+0x1808>
   127d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   127d8:	tst	r0, #1
   127dc:	bne	13054 <__mempcpy_chk@plt+0x2004>
   127e0:	ldr	r3, [sp, #68]	; 0x44
   127e4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   127e8:	mov	r9, #0
   127ec:	clz	r1, r2
   127f0:	cmp	r3, #0
   127f4:	mov	r0, r3
   127f8:	movwne	r0, #1
   127fc:	lsr	r1, r1, #5
   12800:	orrs	r0, r0, r1
   12804:	moveq	r3, r2
   12808:	moveq	r2, r0
   1280c:	cmp	r8, r2
   12810:	str	r3, [sp, #68]	; 0x44
   12814:	str	r2, [fp, #-52]	; 0xffffffcc
   12818:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   1281c:	movcc	r0, #39	; 0x27
   12820:	strbcc	r0, [r1, r8]
   12824:	add	r0, r8, #1
   12828:	cmp	r0, r2
   1282c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12830:	movcc	r1, #92	; 0x5c
   12834:	strbcc	r1, [r3, r0]
   12838:	add	r0, r8, #2
   1283c:	add	r8, r8, #3
   12840:	cmp	r0, r2
   12844:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12848:	movcc	r1, #39	; 0x27
   1284c:	strbcc	r1, [r2, r0]
   12850:	mov	r0, #0
   12854:	str	r0, [fp, #-48]	; 0xffffffd0
   12858:	mov	sl, #1
   1285c:	b	126b0 <__mempcpy_chk@plt+0x1660>
   12860:	ldr	r0, [sp, #32]
   12864:	cmp	r0, #1
   12868:	bne	12a14 <__mempcpy_chk@plt+0x19c4>
   1286c:	str	lr, [sp, #80]	; 0x50
   12870:	bl	10f48 <__ctype_b_loc@plt>
   12874:	ldr	r0, [r0]
   12878:	ldr	ip, [fp, #-84]	; 0xffffffac
   1287c:	mov	r1, #1
   12880:	add	r0, r0, r5, lsl #1
   12884:	ldrb	r0, [r0, #1]
   12888:	ubfx	sl, r0, #6, #1
   1288c:	ldr	r0, [sp, #48]	; 0x30
   12890:	mov	r2, r1
   12894:	cmp	r1, #1
   12898:	orr	r0, sl, r0
   1289c:	bhi	12c08 <__mempcpy_chk@plt+0x1bb8>
   128a0:	tst	r0, #1
   128a4:	beq	12c08 <__mempcpy_chk@plt+0x1bb8>
   128a8:	ldr	lr, [sp, #80]	; 0x50
   128ac:	b	126b0 <__mempcpy_chk@plt+0x1660>
   128b0:	cmp	r7, #0
   128b4:	bne	12b30 <__mempcpy_chk@plt+0x1ae0>
   128b8:	ldrb	r0, [ip, #1]
   128bc:	cmp	r0, #0
   128c0:	bne	12b30 <__mempcpy_chk@plt+0x1ae0>
   128c4:	mov	r1, #1
   128c8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   128cc:	cmp	r0, #2
   128d0:	bne	128e0 <__mempcpy_chk@plt+0x1890>
   128d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   128d8:	tst	r0, #1
   128dc:	bne	13054 <__mempcpy_chk@plt+0x2004>
   128e0:	mov	sl, r1
   128e4:	b	126b0 <__mempcpy_chk@plt+0x1660>
   128e8:	ldr	r1, [sp, #44]	; 0x2c
   128ec:	mov	r9, #0
   128f0:	mov	r0, #92	; 0x5c
   128f4:	cmp	r1, #0
   128f8:	beq	12904 <__mempcpy_chk@plt+0x18b4>
   128fc:	mov	sl, #0
   12900:	b	12e1c <__mempcpy_chk@plt+0x1dcc>
   12904:	ldr	r1, [sp, #84]	; 0x54
   12908:	mov	sl, #0
   1290c:	mov	r9, #0
   12910:	tst	r1, #1
   12914:	bne	12950 <__mempcpy_chk@plt+0x1900>
   12918:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1291c:	cmp	r0, #0
   12920:	mov	r0, r5
   12924:	beq	12948 <__mempcpy_chk@plt+0x18f8>
   12928:	ldr	r1, [fp, #16]
   1292c:	ubfx	r0, r5, #5, #3
   12930:	mov	r2, #1
   12934:	ldr	r0, [r1, r0, lsl #2]
   12938:	and	r1, r5, #31
   1293c:	tst	r0, r2, lsl r1
   12940:	mov	r0, r5
   12944:	bne	12950 <__mempcpy_chk@plt+0x1900>
   12948:	cmp	r6, #0
   1294c:	beq	12e1c <__mempcpy_chk@plt+0x1dcc>
   12950:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12954:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12958:	tst	r1, #1
   1295c:	bne	13030 <__mempcpy_chk@plt+0x1fe0>
   12960:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12964:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12968:	cmp	r1, #2
   1296c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12970:	movwne	r1, #1
   12974:	orr	r1, r1, r5
   12978:	tst	r1, #1
   1297c:	bne	129c0 <__mempcpy_chk@plt+0x1970>
   12980:	cmp	r8, r6
   12984:	mov	r5, #1
   12988:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1298c:	movcc	r1, #39	; 0x27
   12990:	strbcc	r1, [r2, r8]
   12994:	add	r1, r8, #1
   12998:	cmp	r1, r6
   1299c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   129a0:	movcc	r2, #36	; 0x24
   129a4:	strbcc	r2, [r3, r1]
   129a8:	add	r1, r8, #2
   129ac:	add	r8, r8, #3
   129b0:	cmp	r1, r6
   129b4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   129b8:	movcc	r2, #39	; 0x27
   129bc:	strbcc	r2, [r3, r1]
   129c0:	cmp	r8, r6
   129c4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   129c8:	movcc	r1, #92	; 0x5c
   129cc:	strbcc	r1, [r2, r8]
   129d0:	add	r8, r8, #1
   129d4:	cmp	r8, r6
   129d8:	and	r4, r4, sl
   129dc:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   129e0:	strbcc	r0, [r1, r8]
   129e4:	add	r8, r8, #1
   129e8:	add	r7, r7, #1
   129ec:	b	123d0 <__mempcpy_chk@plt+0x1380>
   129f0:	ldr	r0, [sp, #28]
   129f4:	mov	sl, #0
   129f8:	mov	r9, #0
   129fc:	mov	r5, #0
   12a00:	cmp	r0, #0
   12a04:	beq	12918 <__mempcpy_chk@plt+0x18c8>
   12a08:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12a0c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12a10:	b	129e8 <__mempcpy_chk@plt+0x1998>
   12a14:	mov	r0, #0
   12a18:	cmn	lr, #1
   12a1c:	str	r6, [sp, #76]	; 0x4c
   12a20:	str	r4, [sp, #20]
   12a24:	str	r0, [fp, #-36]	; 0xffffffdc
   12a28:	str	r0, [fp, #-40]	; 0xffffffd8
   12a2c:	bne	12a40 <__mempcpy_chk@plt+0x19f0>
   12a30:	mov	r0, ip
   12a34:	bl	10f60 <strlen@plt>
   12a38:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a3c:	mov	lr, r0
   12a40:	add	r0, ip, r7
   12a44:	mov	sl, #1
   12a48:	mov	r6, #0
   12a4c:	sub	r4, fp, #40	; 0x28
   12a50:	str	lr, [sp, #80]	; 0x50
   12a54:	str	r0, [sp, #36]	; 0x24
   12a58:	str	r6, [sp, #40]	; 0x28
   12a5c:	add	r6, r6, r7
   12a60:	sub	r0, fp, #44	; 0x2c
   12a64:	mov	r3, r4
   12a68:	add	r1, ip, r6
   12a6c:	sub	r2, lr, r6
   12a70:	bl	146ec <__mempcpy_chk@plt+0x369c>
   12a74:	cmp	r0, #0
   12a78:	beq	12f84 <__mempcpy_chk@plt+0x1f34>
   12a7c:	cmn	r0, #1
   12a80:	beq	12f44 <__mempcpy_chk@plt+0x1ef4>
   12a84:	ldr	lr, [sp, #80]	; 0x50
   12a88:	cmn	r0, #2
   12a8c:	beq	12f4c <__mempcpy_chk@plt+0x1efc>
   12a90:	ldr	r2, [sp, #56]	; 0x38
   12a94:	cmp	r0, #2
   12a98:	mov	r1, #0
   12a9c:	movwcc	r1, #1
   12aa0:	eor	r2, r2, #1
   12aa4:	orrs	r1, r2, r1
   12aa8:	bne	12af4 <__mempcpy_chk@plt+0x1aa4>
   12aac:	ldr	r1, [sp, #40]	; 0x28
   12ab0:	ldr	r2, [sp, #36]	; 0x24
   12ab4:	add	ip, r2, r1
   12ab8:	mov	r2, #1
   12abc:	ldrb	r3, [ip, r2]
   12ac0:	sub	r6, r3, #94	; 0x5e
   12ac4:	cmp	r6, #30
   12ac8:	bhi	12adc <__mempcpy_chk@plt+0x1a8c>
   12acc:	mov	r4, #1
   12ad0:	mov	r1, #1073741829	; 0x40000005
   12ad4:	tst	r1, r4, lsl r6
   12ad8:	bne	13050 <__mempcpy_chk@plt+0x2000>
   12adc:	sub	r3, r3, #91	; 0x5b
   12ae0:	cmp	r3, #2
   12ae4:	bcc	13050 <__mempcpy_chk@plt+0x2000>
   12ae8:	add	r2, r2, #1
   12aec:	cmp	r2, r0
   12af0:	bcc	12abc <__mempcpy_chk@plt+0x1a6c>
   12af4:	ldr	r6, [sp, #40]	; 0x28
   12af8:	add	r6, r0, r6
   12afc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12b00:	bl	10ea0 <iswprint@plt>
   12b04:	cmp	r0, #0
   12b08:	sub	r4, fp, #40	; 0x28
   12b0c:	movwne	r0, #1
   12b10:	and	sl, sl, r0
   12b14:	mov	r0, r4
   12b18:	bl	10e4c <mbsinit@plt>
   12b1c:	ldr	lr, [sp, #80]	; 0x50
   12b20:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b24:	cmp	r0, #0
   12b28:	beq	12a58 <__mempcpy_chk@plt+0x1a08>
   12b2c:	b	12f8c <__mempcpy_chk@plt+0x1f3c>
   12b30:	mvn	lr, #0
   12b34:	mov	r9, #0
   12b38:	b	126b0 <__mempcpy_chk@plt+0x1660>
   12b3c:	ldr	r0, [sp, #24]
   12b40:	cmp	r0, #0
   12b44:	beq	12bfc <__mempcpy_chk@plt+0x1bac>
   12b48:	add	r0, r7, #2
   12b4c:	cmp	r0, lr
   12b50:	bcs	12bfc <__mempcpy_chk@plt+0x1bac>
   12b54:	add	r1, ip, r7
   12b58:	ldrb	r1, [r1, #1]
   12b5c:	cmp	r1, #63	; 0x3f
   12b60:	bne	12bfc <__mempcpy_chk@plt+0x1bac>
   12b64:	ldrb	r5, [ip, r0]
   12b68:	sub	r1, r5, #33	; 0x21
   12b6c:	cmp	r1, #29
   12b70:	bhi	12bfc <__mempcpy_chk@plt+0x1bac>
   12b74:	movw	r3, #20929	; 0x51c1
   12b78:	mov	r2, #1
   12b7c:	movt	r3, #14336	; 0x3800
   12b80:	tst	r3, r2, lsl r1
   12b84:	beq	12bfc <__mempcpy_chk@plt+0x1bac>
   12b88:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12b8c:	tst	r1, #1
   12b90:	bne	13164 <__mempcpy_chk@plt+0x2114>
   12b94:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12b98:	mov	r7, r0
   12b9c:	cmp	r8, r1
   12ba0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12ba4:	movcc	r1, #63	; 0x3f
   12ba8:	strbcc	r1, [r2, r8]
   12bac:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12bb0:	add	r1, r8, #1
   12bb4:	cmp	r1, r2
   12bb8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12bbc:	movcc	r2, #34	; 0x22
   12bc0:	strbcc	r2, [r3, r1]
   12bc4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12bc8:	add	r1, r8, #2
   12bcc:	cmp	r1, r2
   12bd0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12bd4:	movcc	r2, #34	; 0x22
   12bd8:	strbcc	r2, [r3, r1]
   12bdc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12be0:	add	r1, r8, #3
   12be4:	add	r8, r8, #4
   12be8:	cmp	r1, r2
   12bec:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12bf0:	movcc	r2, #63	; 0x3f
   12bf4:	strbcc	r2, [r3, r1]
   12bf8:	b	12c00 <__mempcpy_chk@plt+0x1bb0>
   12bfc:	mov	r5, #63	; 0x3f
   12c00:	mov	sl, #0
   12c04:	b	126b0 <__mempcpy_chk@plt+0x1660>
   12c08:	str	r0, [sp, #40]	; 0x28
   12c0c:	add	r0, r2, r7
   12c10:	str	r6, [sp, #76]	; 0x4c
   12c14:	add	r1, r7, #1
   12c18:	ldr	lr, [sp, #80]	; 0x50
   12c1c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12c20:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12c24:	mov	r3, #0
   12c28:	str	r0, [sp, #36]	; 0x24
   12c2c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12c30:	b	12cc4 <__mempcpy_chk@plt+0x1c74>
   12c34:	str	r0, [sp, #76]	; 0x4c
   12c38:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12c3c:	cmp	r9, #0
   12c40:	movwne	r9, #1
   12c44:	mvn	r7, r0
   12c48:	orr	r7, r7, r9
   12c4c:	tst	r7, #1
   12c50:	bne	12ca0 <__mempcpy_chk@plt+0x1c50>
   12c54:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12c58:	cmp	r8, r6
   12c5c:	bcs	12c74 <__mempcpy_chk@plt+0x1c24>
   12c60:	ldr	r7, [fp, #-56]	; 0xffffffc8
   12c64:	mov	r2, r4
   12c68:	mov	r4, #39	; 0x27
   12c6c:	strb	r4, [r7, r8]
   12c70:	mov	r4, r2
   12c74:	add	r7, r8, #1
   12c78:	cmp	r7, r6
   12c7c:	bcs	12c94 <__mempcpy_chk@plt+0x1c44>
   12c80:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12c84:	mov	r2, r4
   12c88:	mov	r4, #39	; 0x27
   12c8c:	strb	r4, [r0, r7]
   12c90:	mov	r4, r2
   12c94:	add	r8, r8, #2
   12c98:	mov	r0, #0
   12c9c:	b	12ca8 <__mempcpy_chk@plt+0x1c58>
   12ca0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12ca4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12ca8:	cmp	r8, r6
   12cac:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12cb0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12cb4:	strbcc	r5, [r2, r8]
   12cb8:	add	r8, r8, #1
   12cbc:	ldrb	r5, [ip, r1]
   12cc0:	add	r1, r1, #1
   12cc4:	ldr	r2, [sp, #40]	; 0x28
   12cc8:	tst	r2, #1
   12ccc:	beq	12d08 <__mempcpy_chk@plt+0x1cb8>
   12cd0:	ldr	r2, [sp, #76]	; 0x4c
   12cd4:	str	r0, [fp, #-48]	; 0xffffffd0
   12cd8:	tst	r2, #1
   12cdc:	beq	12d00 <__mempcpy_chk@plt+0x1cb0>
   12ce0:	cmp	r8, r6
   12ce4:	bcs	12cfc <__mempcpy_chk@plt+0x1cac>
   12ce8:	ldr	r6, [fp, #-56]	; 0xffffffc8
   12cec:	mov	r2, r4
   12cf0:	mov	r4, #92	; 0x5c
   12cf4:	strb	r4, [r6, r8]
   12cf8:	mov	r4, r2
   12cfc:	add	r8, r8, #1
   12d00:	mov	r0, #0
   12d04:	b	12dfc <__mempcpy_chk@plt+0x1dac>
   12d08:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12d0c:	tst	r2, #1
   12d10:	bne	1305c <__mempcpy_chk@plt+0x200c>
   12d14:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12d18:	cmp	r7, #2
   12d1c:	movwne	r3, #1
   12d20:	orr	r3, r3, r0
   12d24:	tst	r3, #1
   12d28:	bne	12d84 <__mempcpy_chk@plt+0x1d34>
   12d2c:	cmp	r8, r6
   12d30:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12d34:	movcc	r3, #39	; 0x27
   12d38:	strbcc	r3, [r2, r8]
   12d3c:	add	r3, r8, #1
   12d40:	cmp	r3, r6
   12d44:	bcs	12d5c <__mempcpy_chk@plt+0x1d0c>
   12d48:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12d4c:	mov	r7, r4
   12d50:	mov	r4, #36	; 0x24
   12d54:	strb	r4, [r2, r3]
   12d58:	mov	r4, r7
   12d5c:	add	r3, r8, #2
   12d60:	cmp	r3, r6
   12d64:	bcs	12d7c <__mempcpy_chk@plt+0x1d2c>
   12d68:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12d6c:	mov	r7, r4
   12d70:	mov	r4, #39	; 0x27
   12d74:	strb	r4, [r2, r3]
   12d78:	mov	r4, r7
   12d7c:	add	r8, r8, #3
   12d80:	mov	r0, #1
   12d84:	cmp	r8, r6
   12d88:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12d8c:	movcc	r3, #92	; 0x5c
   12d90:	strbcc	r3, [r2, r8]
   12d94:	add	r3, r8, #1
   12d98:	cmp	r3, r6
   12d9c:	bcs	12dbc <__mempcpy_chk@plt+0x1d6c>
   12da0:	mov	r2, r4
   12da4:	and	r7, r5, #192	; 0xc0
   12da8:	mov	r4, #48	; 0x30
   12dac:	orr	r7, r4, r7, lsr #6
   12db0:	mov	r4, r2
   12db4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12db8:	strb	r7, [r2, r3]
   12dbc:	add	r3, r8, #2
   12dc0:	cmp	r3, r6
   12dc4:	bcs	12de4 <__mempcpy_chk@plt+0x1d94>
   12dc8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12dcc:	mov	r6, r4
   12dd0:	lsr	r7, r5, #3
   12dd4:	mov	r4, #6
   12dd8:	bfi	r7, r4, #3, #29
   12ddc:	mov	r4, r6
   12de0:	strb	r7, [r2, r3]
   12de4:	str	r0, [fp, #-48]	; 0xffffffd0
   12de8:	ldr	r0, [sp, #76]	; 0x4c
   12dec:	mov	r3, #6
   12df0:	add	r8, r8, #3
   12df4:	bfi	r5, r3, #3, #29
   12df8:	mov	r3, #1
   12dfc:	ldr	r2, [sp, #36]	; 0x24
   12e00:	and	r9, r3, #1
   12e04:	cmp	r2, r1
   12e08:	bhi	12c34 <__mempcpy_chk@plt+0x1be4>
   12e0c:	cmp	r9, #0
   12e10:	sub	r7, r1, #1
   12e14:	mov	r0, r5
   12e18:	movwne	r9, #1
   12e1c:	cmp	r9, #0
   12e20:	bne	12e64 <__mempcpy_chk@plt+0x1e14>
   12e24:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12e28:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12e2c:	tst	r5, #1
   12e30:	beq	129d4 <__mempcpy_chk@plt+0x1984>
   12e34:	cmp	r8, r6
   12e38:	mov	r5, #0
   12e3c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12e40:	movcc	r1, #39	; 0x27
   12e44:	strbcc	r1, [r2, r8]
   12e48:	add	r1, r8, #1
   12e4c:	add	r8, r8, #2
   12e50:	cmp	r1, r6
   12e54:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12e58:	movcc	r2, #39	; 0x27
   12e5c:	strbcc	r2, [r3, r1]
   12e60:	b	129d4 <__mempcpy_chk@plt+0x1984>
   12e64:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12e68:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12e6c:	b	129d4 <__mempcpy_chk@plt+0x1984>
   12e70:	cmp	r8, r1
   12e74:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12e78:	movcc	r0, #39	; 0x27
   12e7c:	strbcc	r0, [r2, r8]
   12e80:	add	r0, r8, #1
   12e84:	cmp	r0, r1
   12e88:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12e8c:	movcc	r2, #36	; 0x24
   12e90:	strbcc	r2, [r3, r0]
   12e94:	add	r0, r8, #2
   12e98:	cmp	r0, r1
   12e9c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12ea0:	movcc	r2, #39	; 0x27
   12ea4:	strbcc	r2, [r3, r0]
   12ea8:	add	r0, r8, #3
   12eac:	mov	r3, #1
   12eb0:	cmp	r0, r1
   12eb4:	add	r8, r0, #1
   12eb8:	str	r3, [fp, #-48]	; 0xffffffd0
   12ebc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12ec0:	movcc	r1, #92	; 0x5c
   12ec4:	strbcc	r1, [r2, r0]
   12ec8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12ecc:	cmp	r1, #2
   12ed0:	beq	12f34 <__mempcpy_chk@plt+0x1ee4>
   12ed4:	add	r1, r7, #1
   12ed8:	mov	sl, #0
   12edc:	mov	r9, #1
   12ee0:	mov	r5, #48	; 0x30
   12ee4:	cmp	r1, lr
   12ee8:	bcs	126b0 <__mempcpy_chk@plt+0x1660>
   12eec:	ldrb	r1, [ip, r1]
   12ef0:	sub	r1, r1, #48	; 0x30
   12ef4:	uxtb	r1, r1
   12ef8:	cmp	r1, #9
   12efc:	bhi	126b0 <__mempcpy_chk@plt+0x1660>
   12f00:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12f04:	cmp	r8, r1
   12f08:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12f0c:	movcc	r1, #48	; 0x30
   12f10:	strbcc	r1, [r2, r8]
   12f14:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12f18:	add	r1, r0, #2
   12f1c:	add	r8, r0, #3
   12f20:	cmp	r1, r2
   12f24:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12f28:	movcc	r2, #48	; 0x30
   12f2c:	strbcc	r2, [r3, r1]
   12f30:	b	126b0 <__mempcpy_chk@plt+0x1660>
   12f34:	mov	r0, #48	; 0x30
   12f38:	mov	r9, #1
   12f3c:	mov	sl, #0
   12f40:	b	12948 <__mempcpy_chk@plt+0x18f8>
   12f44:	mov	sl, #0
   12f48:	b	12f84 <__mempcpy_chk@plt+0x1f34>
   12f4c:	mov	sl, #0
   12f50:	cmp	lr, r6
   12f54:	bls	12f84 <__mempcpy_chk@plt+0x1f34>
   12f58:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f5c:	ldr	r6, [sp, #40]	; 0x28
   12f60:	ldr	r0, [sp, #36]	; 0x24
   12f64:	ldrb	r0, [r0, r6]
   12f68:	cmp	r0, #0
   12f6c:	beq	12f8c <__mempcpy_chk@plt+0x1f3c>
   12f70:	add	r6, r6, #1
   12f74:	add	r0, r7, r6
   12f78:	cmp	r0, lr
   12f7c:	bcc	12f60 <__mempcpy_chk@plt+0x1f10>
   12f80:	b	12f8c <__mempcpy_chk@plt+0x1f3c>
   12f84:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f88:	ldr	r6, [sp, #40]	; 0x28
   12f8c:	mov	r1, r6
   12f90:	ldr	r4, [sp, #20]
   12f94:	ldr	r6, [sp, #76]	; 0x4c
   12f98:	b	1288c <__mempcpy_chk@plt+0x183c>
   12f9c:	mov	lr, r7
   12fa0:	b	12fa8 <__mempcpy_chk@plt+0x1f58>
   12fa4:	mvn	lr, #0
   12fa8:	ldr	r9, [fp, #-64]	; 0xffffffc0
   12fac:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12fb0:	eor	r0, r9, #2
   12fb4:	orr	r0, r0, r8
   12fb8:	clz	r0, r0
   12fbc:	lsr	r0, r0, #5
   12fc0:	tst	r1, r0
   12fc4:	bne	130c0 <__mempcpy_chk@plt+0x2070>
   12fc8:	mov	r0, r1
   12fcc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12fd0:	cmp	r9, #2
   12fd4:	movwne	r1, #1
   12fd8:	orr	r0, r0, r1
   12fdc:	tst	r0, #1
   12fe0:	bne	13100 <__mempcpy_chk@plt+0x20b0>
   12fe4:	ldr	r0, [sp, #52]	; 0x34
   12fe8:	ldr	r1, [sp, #68]	; 0x44
   12fec:	str	lr, [sp, #80]	; 0x50
   12ff0:	eor	r0, r0, #1
   12ff4:	tst	r0, #1
   12ff8:	bne	13100 <__mempcpy_chk@plt+0x20b0>
   12ffc:	tst	r4, #1
   13000:	bne	130c8 <__mempcpy_chk@plt+0x2078>
   13004:	mov	r7, #0
   13008:	cmp	r1, #0
   1300c:	beq	130f8 <__mempcpy_chk@plt+0x20a8>
   13010:	ldr	r0, [sp, #84]	; 0x54
   13014:	mov	r3, #0
   13018:	cmp	r6, #0
   1301c:	mov	r2, #0
   13020:	mov	r4, r1
   13024:	str	r3, [fp, #-72]	; 0xffffffb8
   13028:	beq	12164 <__mempcpy_chk@plt+0x1114>
   1302c:	b	13100 <__mempcpy_chk@plt+0x20b0>
   13030:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13034:	b	1305c <__mempcpy_chk@plt+0x200c>
   13038:	ldr	ip, [fp, #-84]	; 0xffffffac
   1303c:	mov	r2, #1
   13040:	mov	lr, r4
   13044:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13048:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1304c:	b	13060 <__mempcpy_chk@plt+0x2010>
   13050:	ldr	ip, [fp, #-84]	; 0xffffffac
   13054:	mov	r7, #2
   13058:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1305c:	ldr	r2, [sp, #84]	; 0x54
   13060:	mov	r0, #0
   13064:	ldr	r1, [fp, #12]
   13068:	tst	r2, #1
   1306c:	mov	r2, r7
   13070:	mov	r3, lr
   13074:	str	r0, [sp, #8]
   13078:	ldr	r0, [sp, #64]	; 0x40
   1307c:	movwne	r2, #4
   13080:	cmp	r7, #2
   13084:	movne	r2, r7
   13088:	str	r2, [sp]
   1308c:	mov	r2, ip
   13090:	bic	r1, r1, #2
   13094:	str	r0, [sp, #12]
   13098:	ldr	r0, [sp, #72]	; 0x48
   1309c:	str	r1, [sp, #4]
   130a0:	mov	r1, r6
   130a4:	str	r0, [sp, #16]
   130a8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   130ac:	bl	120ec <__mempcpy_chk@plt+0x109c>
   130b0:	mov	r8, r0
   130b4:	mov	r0, r8
   130b8:	sub	sp, fp, #28
   130bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130c0:	mov	r7, #2
   130c4:	b	1305c <__mempcpy_chk@plt+0x200c>
   130c8:	mov	r0, #5
   130cc:	ldr	r2, [fp, #-84]	; 0xffffffac
   130d0:	ldr	r3, [sp, #80]	; 0x50
   130d4:	str	r0, [sp]
   130d8:	ldr	r0, [fp, #12]
   130dc:	str	r0, [sp, #4]
   130e0:	ldr	r0, [fp, #16]
   130e4:	str	r0, [sp, #8]
   130e8:	ldr	r0, [sp, #64]	; 0x40
   130ec:	str	r0, [sp, #12]
   130f0:	ldr	r0, [sp, #72]	; 0x48
   130f4:	b	130a4 <__mempcpy_chk@plt+0x2054>
   130f8:	mov	r0, #0
   130fc:	str	r0, [fp, #-72]	; 0xffffffb8
   13100:	ldr	r1, [sp, #92]	; 0x5c
   13104:	cmp	r1, #0
   13108:	beq	13148 <__mempcpy_chk@plt+0x20f8>
   1310c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13110:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13114:	tst	r0, #1
   13118:	bne	1314c <__mempcpy_chk@plt+0x20fc>
   1311c:	ldrb	r0, [r1]
   13120:	cmp	r0, #0
   13124:	beq	1314c <__mempcpy_chk@plt+0x20fc>
   13128:	add	r1, r1, #1
   1312c:	cmp	r8, r6
   13130:	strbcc	r0, [r2, r8]
   13134:	add	r8, r8, #1
   13138:	ldrb	r0, [r1], #1
   1313c:	cmp	r0, #0
   13140:	bne	1312c <__mempcpy_chk@plt+0x20dc>
   13144:	b	1314c <__mempcpy_chk@plt+0x20fc>
   13148:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1314c:	cmp	r8, r6
   13150:	movcc	r0, #0
   13154:	strbcc	r0, [r2, r8]
   13158:	b	130b4 <__mempcpy_chk@plt+0x2064>
   1315c:	mov	r2, #1
   13160:	b	13044 <__mempcpy_chk@plt+0x1ff4>
   13164:	mov	r7, #5
   13168:	b	13058 <__mempcpy_chk@plt+0x2008>
   1316c:	bl	11038 <abort@plt>
   13170:	mov	r3, r2
   13174:	mov	r2, #0
   13178:	b	1317c <__mempcpy_chk@plt+0x212c>
   1317c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13180:	add	fp, sp, #28
   13184:	sub	sp, sp, #36	; 0x24
   13188:	movw	r8, #24928	; 0x6160
   1318c:	cmp	r3, #0
   13190:	mov	r4, r2
   13194:	str	r2, [sp, #24]
   13198:	mov	r5, r1
   1319c:	mov	r6, r0
   131a0:	str	r0, [sp, #20]
   131a4:	movt	r8, #2
   131a8:	movne	r8, r3
   131ac:	bl	10f6c <__errno_location@plt>
   131b0:	str	r0, [sp, #28]
   131b4:	cmp	r4, #0
   131b8:	add	sl, r8, #8
   131bc:	ldm	r8, {r3, r9}
   131c0:	ldr	r7, [r0]
   131c4:	ldr	r1, [r8, #40]	; 0x28
   131c8:	ldr	r2, [r8, #44]	; 0x2c
   131cc:	mov	r0, #0
   131d0:	orreq	r9, r9, #1
   131d4:	str	r7, [sp, #32]
   131d8:	mov	r7, r5
   131dc:	stm	sp, {r3, r9, sl}
   131e0:	str	r1, [sp, #12]
   131e4:	str	r2, [sp, #16]
   131e8:	mov	r1, #0
   131ec:	mov	r2, r6
   131f0:	mov	r3, r5
   131f4:	bl	120ec <__mempcpy_chk@plt+0x109c>
   131f8:	add	r4, r0, #1
   131fc:	mov	r5, r0
   13200:	mov	r0, r4
   13204:	bl	13ee0 <__mempcpy_chk@plt+0x2e90>
   13208:	mov	r6, r0
   1320c:	ldr	r0, [r8]
   13210:	ldr	r2, [r8, #44]	; 0x2c
   13214:	ldr	r1, [r8, #40]	; 0x28
   13218:	mov	r3, r7
   1321c:	stm	sp, {r0, r9, sl}
   13220:	str	r2, [sp, #16]
   13224:	str	r1, [sp, #12]
   13228:	mov	r0, r6
   1322c:	mov	r1, r4
   13230:	ldr	r2, [sp, #20]
   13234:	bl	120ec <__mempcpy_chk@plt+0x109c>
   13238:	ldr	r0, [sp, #24]
   1323c:	ldr	r1, [sp, #32]
   13240:	ldr	r2, [sp, #28]
   13244:	cmp	r0, #0
   13248:	str	r1, [r2]
   1324c:	strne	r5, [r0]
   13250:	mov	r0, r6
   13254:	sub	sp, fp, #28
   13258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1325c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13260:	add	fp, sp, #24
   13264:	movw	r5, #24820	; 0x60f4
   13268:	movw	r8, #24816	; 0x60f0
   1326c:	movt	r5, #2
   13270:	movt	r8, #2
   13274:	ldr	r0, [r5]
   13278:	ldr	r4, [r8]
   1327c:	cmp	r0, #2
   13280:	blt	132ac <__mempcpy_chk@plt+0x225c>
   13284:	add	r7, r4, #12
   13288:	mov	r6, #0
   1328c:	ldr	r0, [r7, r6, lsl #3]
   13290:	bl	11d18 <__mempcpy_chk@plt+0xcc8>
   13294:	ldr	r1, [r5]
   13298:	add	r2, r6, #2
   1329c:	add	r0, r6, #1
   132a0:	mov	r6, r0
   132a4:	cmp	r2, r1
   132a8:	blt	1328c <__mempcpy_chk@plt+0x223c>
   132ac:	ldr	r0, [r4, #4]
   132b0:	movw	r7, #24976	; 0x6190
   132b4:	movt	r7, #2
   132b8:	cmp	r0, r7
   132bc:	beq	132d4 <__mempcpy_chk@plt+0x2284>
   132c0:	bl	11d18 <__mempcpy_chk@plt+0xcc8>
   132c4:	movw	r0, #24824	; 0x60f8
   132c8:	mov	r6, #256	; 0x100
   132cc:	movt	r0, #2
   132d0:	strd	r6, [r0]
   132d4:	movw	r6, #24824	; 0x60f8
   132d8:	movt	r6, #2
   132dc:	cmp	r4, r6
   132e0:	beq	132f0 <__mempcpy_chk@plt+0x22a0>
   132e4:	mov	r0, r4
   132e8:	bl	11d18 <__mempcpy_chk@plt+0xcc8>
   132ec:	str	r6, [r8]
   132f0:	mov	r0, #1
   132f4:	str	r0, [r5]
   132f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   132fc:	movw	r3, #24928	; 0x6160
   13300:	mvn	r2, #0
   13304:	movt	r3, #2
   13308:	b	1330c <__mempcpy_chk@plt+0x22bc>
   1330c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13310:	add	fp, sp, #28
   13314:	sub	sp, sp, #44	; 0x2c
   13318:	mov	r7, r3
   1331c:	str	r2, [sp, #36]	; 0x24
   13320:	str	r1, [sp, #32]
   13324:	mov	r5, r0
   13328:	bl	10f6c <__errno_location@plt>
   1332c:	cmp	r5, #0
   13330:	blt	1349c <__mempcpy_chk@plt+0x244c>
   13334:	cmn	r5, #-2147483647	; 0x80000001
   13338:	beq	1349c <__mempcpy_chk@plt+0x244c>
   1333c:	movw	r8, #24820	; 0x60f4
   13340:	movw	r4, #24816	; 0x60f0
   13344:	str	r0, [sp, #28]
   13348:	ldr	r0, [r0]
   1334c:	movt	r8, #2
   13350:	movt	r4, #2
   13354:	ldr	r1, [r8]
   13358:	ldr	r6, [r4]
   1335c:	str	r0, [sp, #24]
   13360:	cmp	r1, r5
   13364:	ble	13370 <__mempcpy_chk@plt+0x2320>
   13368:	mov	sl, r6
   1336c:	b	133d8 <__mempcpy_chk@plt+0x2388>
   13370:	movw	r9, #24824	; 0x60f8
   13374:	mov	r0, #8
   13378:	add	r2, r5, #1
   1337c:	str	r1, [fp, #-32]	; 0xffffffe0
   13380:	mvn	r3, #-2147483648	; 0x80000000
   13384:	movt	r9, #2
   13388:	str	r0, [sp]
   1338c:	sub	r2, r2, r1
   13390:	sub	r1, fp, #32
   13394:	subs	r0, r6, r9
   13398:	movne	r0, r6
   1339c:	bl	14010 <__mempcpy_chk@plt+0x2fc0>
   133a0:	cmp	r6, r9
   133a4:	mov	sl, r0
   133a8:	str	r0, [r4]
   133ac:	ldrdeq	r0, [r9]
   133b0:	stmeq	sl, {r0, r1}
   133b4:	ldr	r1, [r8]
   133b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   133bc:	add	r0, sl, r1, lsl #3
   133c0:	sub	r1, r2, r1
   133c4:	lsl	r2, r1, #3
   133c8:	mov	r1, #0
   133cc:	bl	10f84 <memset@plt>
   133d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   133d4:	str	r0, [r8]
   133d8:	mov	r9, sl
   133dc:	ldr	r6, [r9, r5, lsl #3]!
   133e0:	ldr	r4, [r9, #4]!
   133e4:	ldm	r7, {r0, r1}
   133e8:	ldr	r2, [r7, #40]	; 0x28
   133ec:	ldr	r3, [r7, #44]	; 0x2c
   133f0:	orr	r8, r1, #1
   133f4:	add	r1, r7, #8
   133f8:	stm	sp, {r0, r8}
   133fc:	add	r0, sp, #8
   13400:	str	r1, [sp, #20]
   13404:	stm	r0, {r1, r2, r3}
   13408:	mov	r0, r4
   1340c:	mov	r1, r6
   13410:	ldr	r2, [sp, #32]
   13414:	ldr	r3, [sp, #36]	; 0x24
   13418:	bl	120ec <__mempcpy_chk@plt+0x109c>
   1341c:	cmp	r6, r0
   13420:	bhi	13484 <__mempcpy_chk@plt+0x2434>
   13424:	add	r6, r0, #1
   13428:	movw	r0, #24976	; 0x6190
   1342c:	movt	r0, #2
   13430:	str	r6, [sl, r5, lsl #3]
   13434:	cmp	r4, r0
   13438:	beq	13444 <__mempcpy_chk@plt+0x23f4>
   1343c:	mov	r0, r4
   13440:	bl	11d18 <__mempcpy_chk@plt+0xcc8>
   13444:	mov	r0, r6
   13448:	bl	13ee0 <__mempcpy_chk@plt+0x2e90>
   1344c:	str	r0, [r9]
   13450:	mov	r4, r0
   13454:	add	r3, sp, #8
   13458:	ldr	r0, [r7]
   1345c:	ldr	r1, [r7, #40]	; 0x28
   13460:	ldr	r2, [r7, #44]	; 0x2c
   13464:	stm	sp, {r0, r8}
   13468:	ldr	r0, [sp, #20]
   1346c:	stm	r3, {r0, r1, r2}
   13470:	mov	r0, r4
   13474:	mov	r1, r6
   13478:	ldr	r2, [sp, #32]
   1347c:	ldr	r3, [sp, #36]	; 0x24
   13480:	bl	120ec <__mempcpy_chk@plt+0x109c>
   13484:	ldr	r0, [sp, #28]
   13488:	ldr	r1, [sp, #24]
   1348c:	str	r1, [r0]
   13490:	mov	r0, r4
   13494:	sub	sp, fp, #28
   13498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1349c:	bl	11038 <abort@plt>
   134a0:	movw	r3, #24928	; 0x6160
   134a4:	movt	r3, #2
   134a8:	b	1330c <__mempcpy_chk@plt+0x22bc>
   134ac:	movw	r3, #24928	; 0x6160
   134b0:	mov	r1, r0
   134b4:	mov	r0, #0
   134b8:	mvn	r2, #0
   134bc:	movt	r3, #2
   134c0:	b	1330c <__mempcpy_chk@plt+0x22bc>
   134c4:	movw	r3, #24928	; 0x6160
   134c8:	mov	r2, r1
   134cc:	mov	r1, r0
   134d0:	mov	r0, #0
   134d4:	movt	r3, #2
   134d8:	b	1330c <__mempcpy_chk@plt+0x22bc>
   134dc:	push	{fp, lr}
   134e0:	mov	fp, sp
   134e4:	sub	sp, sp, #48	; 0x30
   134e8:	vmov.i32	q8, #0	; 0x00000000
   134ec:	mov	ip, #32
   134f0:	mov	r3, sp
   134f4:	mov	lr, r2
   134f8:	cmp	r1, #10
   134fc:	add	r2, r3, #16
   13500:	vst1.64	{d16-d17}, [r3], ip
   13504:	vst1.64	{d16-d17}, [r3]
   13508:	vst1.64	{d16-d17}, [r2]
   1350c:	beq	1352c <__mempcpy_chk@plt+0x24dc>
   13510:	str	r1, [sp]
   13514:	mov	r3, sp
   13518:	mov	r1, lr
   1351c:	mvn	r2, #0
   13520:	bl	1330c <__mempcpy_chk@plt+0x22bc>
   13524:	mov	sp, fp
   13528:	pop	{fp, pc}
   1352c:	bl	11038 <abort@plt>
   13530:	push	{r4, sl, fp, lr}
   13534:	add	fp, sp, #8
   13538:	sub	sp, sp, #48	; 0x30
   1353c:	mov	ip, r3
   13540:	mov	r3, sp
   13544:	vmov.i32	q8, #0	; 0x00000000
   13548:	mov	lr, #32
   1354c:	cmp	r1, #10
   13550:	add	r4, r3, #16
   13554:	vst1.64	{d16-d17}, [r3], lr
   13558:	vst1.64	{d16-d17}, [r3]
   1355c:	vst1.64	{d16-d17}, [r4]
   13560:	beq	13580 <__mempcpy_chk@plt+0x2530>
   13564:	str	r1, [sp]
   13568:	mov	r1, r2
   1356c:	mov	r3, sp
   13570:	mov	r2, ip
   13574:	bl	1330c <__mempcpy_chk@plt+0x22bc>
   13578:	sub	sp, fp, #8
   1357c:	pop	{r4, sl, fp, pc}
   13580:	bl	11038 <abort@plt>
   13584:	mov	r2, r1
   13588:	mov	r1, r0
   1358c:	mov	r0, #0
   13590:	b	134dc <__mempcpy_chk@plt+0x248c>
   13594:	mov	r3, r2
   13598:	mov	r2, r1
   1359c:	mov	r1, r0
   135a0:	mov	r0, #0
   135a4:	b	13530 <__mempcpy_chk@plt+0x24e0>
   135a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   135ac:	add	fp, sp, #24
   135b0:	sub	sp, sp, #48	; 0x30
   135b4:	movw	r8, #24928	; 0x6160
   135b8:	mov	lr, r0
   135bc:	mov	r3, sp
   135c0:	mov	ip, r1
   135c4:	movt	r8, #2
   135c8:	mov	r1, r3
   135cc:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   135d0:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   135d4:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   135d8:	stm	r1, {r0, r4, r5, r6, r7, r9}
   135dc:	ubfx	r0, r2, #5, #3
   135e0:	and	r2, r2, #31
   135e4:	mov	r4, #1
   135e8:	add	r0, r3, r0, lsl #2
   135ec:	ldr	r1, [r0, #8]
   135f0:	bic	r4, r4, r1, lsr r2
   135f4:	eor	r1, r1, r4, lsl r2
   135f8:	mov	r2, ip
   135fc:	str	r1, [r0, #8]
   13600:	mov	r0, #0
   13604:	mov	r1, lr
   13608:	bl	1330c <__mempcpy_chk@plt+0x22bc>
   1360c:	sub	sp, fp, #24
   13610:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13614:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13618:	add	fp, sp, #24
   1361c:	sub	sp, sp, #48	; 0x30
   13620:	movw	lr, #24928	; 0x6160
   13624:	mov	ip, r0
   13628:	mov	r3, sp
   1362c:	movt	lr, #2
   13630:	mov	r2, r3
   13634:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   13638:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   1363c:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13640:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13644:	ubfx	r0, r1, #5, #3
   13648:	and	r1, r1, #31
   1364c:	mov	r7, #1
   13650:	add	r0, r3, r0, lsl #2
   13654:	ldr	r2, [r0, #8]
   13658:	bic	r7, r7, r2, lsr r1
   1365c:	eor	r1, r2, r7, lsl r1
   13660:	mvn	r2, #0
   13664:	str	r1, [r0, #8]
   13668:	mov	r0, #0
   1366c:	mov	r1, ip
   13670:	bl	1330c <__mempcpy_chk@plt+0x22bc>
   13674:	sub	sp, fp, #24
   13678:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1367c:	push	{r4, r5, r6, r7, fp, lr}
   13680:	add	fp, sp, #16
   13684:	sub	sp, sp, #48	; 0x30
   13688:	movw	lr, #24928	; 0x6160
   1368c:	mov	ip, r0
   13690:	mov	r3, sp
   13694:	movt	lr, #2
   13698:	mov	r2, r3
   1369c:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   136a0:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   136a4:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   136a8:	stm	r2, {r0, r1, r4, r5, r6, r7}
   136ac:	mov	r1, ip
   136b0:	mvn	r2, #0
   136b4:	ldr	r0, [sp, #12]
   136b8:	orr	r0, r0, #67108864	; 0x4000000
   136bc:	str	r0, [sp, #12]
   136c0:	mov	r0, #0
   136c4:	bl	1330c <__mempcpy_chk@plt+0x22bc>
   136c8:	sub	sp, fp, #16
   136cc:	pop	{r4, r5, r6, r7, fp, pc}
   136d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   136d4:	add	fp, sp, #24
   136d8:	sub	sp, sp, #48	; 0x30
   136dc:	movw	r8, #24928	; 0x6160
   136e0:	mov	ip, r1
   136e4:	mov	lr, r0
   136e8:	mov	r3, sp
   136ec:	movt	r8, #2
   136f0:	mov	r2, r3
   136f4:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   136f8:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   136fc:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   13700:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13704:	mov	r1, lr
   13708:	mov	r2, ip
   1370c:	ldr	r0, [sp, #12]
   13710:	orr	r0, r0, #67108864	; 0x4000000
   13714:	str	r0, [sp, #12]
   13718:	mov	r0, #0
   1371c:	bl	1330c <__mempcpy_chk@plt+0x22bc>
   13720:	sub	sp, fp, #24
   13724:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13728:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1372c:	add	fp, sp, #24
   13730:	sub	sp, sp, #96	; 0x60
   13734:	mov	lr, sp
   13738:	vmov.i32	q8, #0	; 0x00000000
   1373c:	mov	ip, r2
   13740:	cmp	r1, #10
   13744:	add	r3, lr, #16
   13748:	mov	r2, lr
   1374c:	vst1.64	{d16-d17}, [r3]
   13750:	mov	r3, #28
   13754:	vst1.64	{d16-d17}, [r2], r3
   13758:	vst1.32	{d16-d17}, [r2]
   1375c:	beq	1379c <__mempcpy_chk@plt+0x274c>
   13760:	str	r1, [sp, #48]	; 0x30
   13764:	add	r3, sp, #48	; 0x30
   13768:	ldm	lr!, {r2, r4, r5, r6, r7}
   1376c:	add	r1, r3, #4
   13770:	stmia	r1!, {r2, r4, r5, r6, r7}
   13774:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   13778:	stm	r1, {r2, r4, r5, r6, r7, r8}
   1377c:	mvn	r2, #0
   13780:	ldr	r1, [sp, #60]	; 0x3c
   13784:	orr	r1, r1, #67108864	; 0x4000000
   13788:	str	r1, [sp, #60]	; 0x3c
   1378c:	mov	r1, ip
   13790:	bl	1330c <__mempcpy_chk@plt+0x22bc>
   13794:	sub	sp, fp, #24
   13798:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1379c:	bl	11038 <abort@plt>
   137a0:	push	{fp, lr}
   137a4:	mov	fp, sp
   137a8:	sub	sp, sp, #8
   137ac:	mvn	ip, #0
   137b0:	str	ip, [sp]
   137b4:	bl	137c0 <__mempcpy_chk@plt+0x2770>
   137b8:	mov	sp, fp
   137bc:	pop	{fp, pc}
   137c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   137c4:	add	fp, sp, #24
   137c8:	sub	sp, sp, #48	; 0x30
   137cc:	movw	ip, #24928	; 0x6160
   137d0:	mov	lr, r3
   137d4:	mov	r3, sp
   137d8:	cmp	r1, #0
   137dc:	movt	ip, #2
   137e0:	cmpne	r2, #0
   137e4:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   137e8:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   137ec:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   137f0:	stm	r3, {r4, r5, r6, r7, r8, r9}
   137f4:	mov	r3, #10
   137f8:	str	r3, [sp]
   137fc:	bne	13804 <__mempcpy_chk@plt+0x27b4>
   13800:	bl	11038 <abort@plt>
   13804:	ldr	ip, [fp, #8]
   13808:	str	r2, [sp, #44]	; 0x2c
   1380c:	str	r1, [sp, #40]	; 0x28
   13810:	mov	r3, sp
   13814:	mov	r1, lr
   13818:	mov	r2, ip
   1381c:	bl	1330c <__mempcpy_chk@plt+0x22bc>
   13820:	sub	sp, fp, #24
   13824:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13828:	push	{fp, lr}
   1382c:	mov	fp, sp
   13830:	sub	sp, sp, #8
   13834:	mov	r3, r2
   13838:	mov	r2, r1
   1383c:	mov	r1, r0
   13840:	mvn	r0, #0
   13844:	str	r0, [sp]
   13848:	mov	r0, #0
   1384c:	bl	137c0 <__mempcpy_chk@plt+0x2770>
   13850:	mov	sp, fp
   13854:	pop	{fp, pc}
   13858:	push	{fp, lr}
   1385c:	mov	fp, sp
   13860:	sub	sp, sp, #8
   13864:	mov	ip, r2
   13868:	mov	r2, r1
   1386c:	mov	r1, r0
   13870:	str	r3, [sp]
   13874:	mov	r0, #0
   13878:	mov	r3, ip
   1387c:	bl	137c0 <__mempcpy_chk@plt+0x2770>
   13880:	mov	sp, fp
   13884:	pop	{fp, pc}
   13888:	movw	r3, #24832	; 0x6100
   1388c:	movt	r3, #2
   13890:	b	1330c <__mempcpy_chk@plt+0x22bc>
   13894:	movw	r3, #24832	; 0x6100
   13898:	mov	r2, r1
   1389c:	mov	r1, r0
   138a0:	mov	r0, #0
   138a4:	movt	r3, #2
   138a8:	b	1330c <__mempcpy_chk@plt+0x22bc>
   138ac:	movw	r3, #24832	; 0x6100
   138b0:	mvn	r2, #0
   138b4:	movt	r3, #2
   138b8:	b	1330c <__mempcpy_chk@plt+0x22bc>
   138bc:	movw	r3, #24832	; 0x6100
   138c0:	mov	r1, r0
   138c4:	mov	r0, #0
   138c8:	mvn	r2, #0
   138cc:	movt	r3, #2
   138d0:	b	1330c <__mempcpy_chk@plt+0x22bc>
   138d4:	push	{r4, r5, fp, lr}
   138d8:	add	fp, sp, #8
   138dc:	mov	r5, r0
   138e0:	mov	r4, r1
   138e4:	mov	r0, #0
   138e8:	mov	r2, #5
   138ec:	mov	r1, r5
   138f0:	bl	10e70 <dcgettext@plt>
   138f4:	cmp	r0, r5
   138f8:	popne	{r4, r5, fp, pc}
   138fc:	bl	146b4 <__mempcpy_chk@plt+0x3664>
   13900:	ldrb	r1, [r0]
   13904:	and	r1, r1, #223	; 0xdf
   13908:	cmp	r1, #71	; 0x47
   1390c:	beq	13974 <__mempcpy_chk@plt+0x2924>
   13910:	cmp	r1, #85	; 0x55
   13914:	bne	13998 <__mempcpy_chk@plt+0x2948>
   13918:	ldrb	r1, [r0, #1]
   1391c:	and	r1, r1, #223	; 0xdf
   13920:	cmp	r1, #84	; 0x54
   13924:	bne	13998 <__mempcpy_chk@plt+0x2948>
   13928:	ldrb	r1, [r0, #2]
   1392c:	and	r1, r1, #223	; 0xdf
   13930:	cmp	r1, #70	; 0x46
   13934:	ldrbeq	r1, [r0, #3]
   13938:	cmpeq	r1, #45	; 0x2d
   1393c:	bne	13998 <__mempcpy_chk@plt+0x2948>
   13940:	ldrb	r1, [r0, #4]
   13944:	cmp	r1, #56	; 0x38
   13948:	ldrbeq	r0, [r0, #5]
   1394c:	cmpeq	r0, #0
   13950:	bne	13998 <__mempcpy_chk@plt+0x2948>
   13954:	ldrb	r1, [r5]
   13958:	movw	r2, #20364	; 0x4f8c
   1395c:	movw	r0, #20368	; 0x4f90
   13960:	movt	r2, #1
   13964:	movt	r0, #1
   13968:	cmp	r1, #96	; 0x60
   1396c:	moveq	r0, r2
   13970:	pop	{r4, r5, fp, pc}
   13974:	ldrb	r1, [r0, #1]
   13978:	and	r1, r1, #223	; 0xdf
   1397c:	cmp	r1, #66	; 0x42
   13980:	bne	13998 <__mempcpy_chk@plt+0x2948>
   13984:	ldrb	r1, [r0, #2]
   13988:	cmp	r1, #49	; 0x31
   1398c:	ldrbeq	r1, [r0, #3]
   13990:	cmpeq	r1, #56	; 0x38
   13994:	beq	139b4 <__mempcpy_chk@plt+0x2964>
   13998:	movw	r1, #20358	; 0x4f86
   1399c:	movw	r0, #20362	; 0x4f8a
   139a0:	cmp	r4, #9
   139a4:	movt	r1, #1
   139a8:	movt	r0, #1
   139ac:	moveq	r0, r1
   139b0:	pop	{r4, r5, fp, pc}
   139b4:	ldrb	r1, [r0, #4]
   139b8:	cmp	r1, #48	; 0x30
   139bc:	ldrbeq	r1, [r0, #5]
   139c0:	cmpeq	r1, #51	; 0x33
   139c4:	bne	13998 <__mempcpy_chk@plt+0x2948>
   139c8:	ldrb	r1, [r0, #6]
   139cc:	cmp	r1, #48	; 0x30
   139d0:	ldrbeq	r0, [r0, #7]
   139d4:	cmpeq	r0, #0
   139d8:	bne	13998 <__mempcpy_chk@plt+0x2948>
   139dc:	ldrb	r1, [r5]
   139e0:	movw	r2, #20372	; 0x4f94
   139e4:	movw	r0, #20376	; 0x4f98
   139e8:	movt	r2, #1
   139ec:	movt	r0, #1
   139f0:	b	13968 <__mempcpy_chk@plt+0x2918>
   139f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   139f8:	add	fp, sp, #24
   139fc:	sub	sp, sp, #32
   13a00:	ldr	r6, [fp, #12]
   13a04:	ldr	r7, [fp, #8]
   13a08:	mov	r4, r2
   13a0c:	mov	r8, r0
   13a10:	cmp	r1, #0
   13a14:	beq	13a3c <__mempcpy_chk@plt+0x29ec>
   13a18:	movw	r2, #20464	; 0x4ff0
   13a1c:	mov	r5, r1
   13a20:	str	r3, [sp, #4]
   13a24:	str	r4, [sp]
   13a28:	mov	r0, r8
   13a2c:	mov	r1, #1
   13a30:	movt	r2, #1
   13a34:	mov	r3, r5
   13a38:	b	13a54 <__mempcpy_chk@plt+0x2a04>
   13a3c:	movw	r2, #20476	; 0x4ffc
   13a40:	str	r3, [sp]
   13a44:	mov	r0, r8
   13a48:	mov	r1, #1
   13a4c:	mov	r3, r4
   13a50:	movt	r2, #1
   13a54:	bl	10fa8 <__fprintf_chk@plt>
   13a58:	movw	r1, #20483	; 0x5003
   13a5c:	mov	r0, #0
   13a60:	mov	r2, #5
   13a64:	movt	r1, #1
   13a68:	bl	10e70 <dcgettext@plt>
   13a6c:	movw	r2, #21201	; 0x52d1
   13a70:	mov	r3, r0
   13a74:	movw	r0, #2022	; 0x7e6
   13a78:	mov	r1, #1
   13a7c:	str	r0, [sp]
   13a80:	movt	r2, #1
   13a84:	mov	r0, r8
   13a88:	bl	10fa8 <__fprintf_chk@plt>
   13a8c:	movw	r4, #18822	; 0x4986
   13a90:	mov	r1, r8
   13a94:	movt	r4, #1
   13a98:	mov	r0, r4
   13a9c:	bl	10df8 <fputs_unlocked@plt>
   13aa0:	movw	r1, #20487	; 0x5007
   13aa4:	mov	r0, #0
   13aa8:	mov	r2, #5
   13aac:	movt	r1, #1
   13ab0:	bl	10e70 <dcgettext@plt>
   13ab4:	movw	r3, #20658	; 0x50b2
   13ab8:	mov	r2, r0
   13abc:	mov	r0, r8
   13ac0:	mov	r1, #1
   13ac4:	movt	r3, #1
   13ac8:	bl	10fa8 <__fprintf_chk@plt>
   13acc:	mov	r0, r4
   13ad0:	mov	r1, r8
   13ad4:	bl	10df8 <fputs_unlocked@plt>
   13ad8:	cmp	r6, #9
   13adc:	bhi	13b40 <__mempcpy_chk@plt+0x2af0>
   13ae0:	add	r0, pc, #0
   13ae4:	ldr	pc, [r0, r6, lsl #2]
   13ae8:	andeq	r3, r1, r8, lsl sp
   13aec:	andeq	r3, r1, r0, lsl fp
   13af0:	andeq	r3, r1, ip, asr #22
   13af4:	andeq	r3, r1, r4, ror fp
   13af8:	muleq	r1, ip, fp
   13afc:	andeq	r3, r1, r4, asr #23
   13b00:	andeq	r3, r1, ip, ror #23
   13b04:	andeq	r3, r1, r4, lsr #24
   13b08:	andeq	r3, r1, r4, asr #25
   13b0c:	andeq	r3, r1, ip, ror #24
   13b10:	movw	r1, #20692	; 0x50d4
   13b14:	mov	r0, #0
   13b18:	mov	r2, #5
   13b1c:	movt	r1, #1
   13b20:	bl	10e70 <dcgettext@plt>
   13b24:	ldr	r3, [r7]
   13b28:	mov	r2, r0
   13b2c:	mov	r0, r8
   13b30:	mov	r1, #1
   13b34:	sub	sp, fp, #24
   13b38:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b3c:	b	10fa8 <__fprintf_chk@plt>
   13b40:	movw	r1, #21011	; 0x5213
   13b44:	movt	r1, #1
   13b48:	b	13c74 <__mempcpy_chk@plt+0x2c24>
   13b4c:	movw	r1, #20708	; 0x50e4
   13b50:	mov	r0, #0
   13b54:	mov	r2, #5
   13b58:	movt	r1, #1
   13b5c:	bl	10e70 <dcgettext@plt>
   13b60:	mov	r2, r0
   13b64:	ldr	r3, [r7]
   13b68:	ldr	r0, [r7, #4]
   13b6c:	str	r0, [sp]
   13b70:	b	13c60 <__mempcpy_chk@plt+0x2c10>
   13b74:	movw	r1, #20731	; 0x50fb
   13b78:	mov	r0, #0
   13b7c:	mov	r2, #5
   13b80:	movt	r1, #1
   13b84:	bl	10e70 <dcgettext@plt>
   13b88:	ldr	r3, [r7]
   13b8c:	mov	r2, r0
   13b90:	ldmib	r7, {r0, r1}
   13b94:	stm	sp, {r0, r1}
   13b98:	b	13c60 <__mempcpy_chk@plt+0x2c10>
   13b9c:	movw	r1, #20759	; 0x5117
   13ba0:	mov	r0, #0
   13ba4:	mov	r2, #5
   13ba8:	movt	r1, #1
   13bac:	bl	10e70 <dcgettext@plt>
   13bb0:	ldr	r3, [r7]
   13bb4:	mov	r2, r0
   13bb8:	ldmib	r7, {r0, r1, r7}
   13bbc:	stm	sp, {r0, r1, r7}
   13bc0:	b	13c60 <__mempcpy_chk@plt+0x2c10>
   13bc4:	movw	r1, #20791	; 0x5137
   13bc8:	mov	r0, #0
   13bcc:	mov	r2, #5
   13bd0:	movt	r1, #1
   13bd4:	bl	10e70 <dcgettext@plt>
   13bd8:	ldr	r3, [r7]
   13bdc:	mov	r2, r0
   13be0:	ldmib	r7, {r0, r1, r6, r7}
   13be4:	stm	sp, {r0, r1, r6, r7}
   13be8:	b	13c60 <__mempcpy_chk@plt+0x2c10>
   13bec:	movw	r1, #20827	; 0x515b
   13bf0:	mov	r0, #0
   13bf4:	mov	r2, #5
   13bf8:	movt	r1, #1
   13bfc:	bl	10e70 <dcgettext@plt>
   13c00:	ldr	r3, [r7]
   13c04:	mov	r2, r0
   13c08:	ldmib	r7, {r0, r1, r6}
   13c0c:	ldr	r5, [r7, #16]
   13c10:	ldr	r7, [r7, #20]
   13c14:	stm	sp, {r0, r1, r6}
   13c18:	str	r5, [sp, #12]
   13c1c:	str	r7, [sp, #16]
   13c20:	b	13c60 <__mempcpy_chk@plt+0x2c10>
   13c24:	movw	r1, #20867	; 0x5183
   13c28:	mov	r0, #0
   13c2c:	mov	r2, #5
   13c30:	movt	r1, #1
   13c34:	bl	10e70 <dcgettext@plt>
   13c38:	ldr	r3, [r7]
   13c3c:	mov	r2, r0
   13c40:	ldmib	r7, {r0, r1, r6}
   13c44:	ldr	r5, [r7, #16]
   13c48:	ldr	r4, [r7, #20]
   13c4c:	ldr	r7, [r7, #24]
   13c50:	stm	sp, {r0, r1, r6}
   13c54:	str	r5, [sp, #12]
   13c58:	str	r4, [sp, #16]
   13c5c:	str	r7, [sp, #20]
   13c60:	mov	r0, r8
   13c64:	mov	r1, #1
   13c68:	b	13d14 <__mempcpy_chk@plt+0x2cc4>
   13c6c:	movw	r1, #20959	; 0x51df
   13c70:	movt	r1, #1
   13c74:	mov	r0, #0
   13c78:	mov	r2, #5
   13c7c:	bl	10e70 <dcgettext@plt>
   13c80:	mov	ip, r0
   13c84:	ldr	r3, [r7]
   13c88:	ldr	r0, [r7, #4]
   13c8c:	ldr	r1, [r7, #8]
   13c90:	ldr	r6, [r7, #12]
   13c94:	ldr	r5, [r7, #16]
   13c98:	ldr	r4, [r7, #20]
   13c9c:	ldr	r2, [r7, #24]
   13ca0:	ldr	lr, [r7, #28]
   13ca4:	ldr	r7, [r7, #32]
   13ca8:	stm	sp, {r0, r1, r6}
   13cac:	str	r5, [sp, #12]
   13cb0:	str	r4, [sp, #16]
   13cb4:	str	r2, [sp, #20]
   13cb8:	str	lr, [sp, #24]
   13cbc:	str	r7, [sp, #28]
   13cc0:	b	13d08 <__mempcpy_chk@plt+0x2cb8>
   13cc4:	movw	r1, #20911	; 0x51af
   13cc8:	mov	r0, #0
   13ccc:	mov	r2, #5
   13cd0:	movt	r1, #1
   13cd4:	bl	10e70 <dcgettext@plt>
   13cd8:	mov	ip, r0
   13cdc:	ldr	r3, [r7]
   13ce0:	ldmib	r7, {r0, r1, r6}
   13ce4:	ldr	r5, [r7, #16]
   13ce8:	ldr	r4, [r7, #20]
   13cec:	ldr	r2, [r7, #24]
   13cf0:	ldr	r7, [r7, #28]
   13cf4:	stm	sp, {r0, r1, r6}
   13cf8:	str	r5, [sp, #12]
   13cfc:	str	r4, [sp, #16]
   13d00:	str	r2, [sp, #20]
   13d04:	str	r7, [sp, #24]
   13d08:	mov	r0, r8
   13d0c:	mov	r1, #1
   13d10:	mov	r2, ip
   13d14:	bl	10fa8 <__fprintf_chk@plt>
   13d18:	sub	sp, fp, #24
   13d1c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13d20:	push	{r4, sl, fp, lr}
   13d24:	add	fp, sp, #8
   13d28:	sub	sp, sp, #8
   13d2c:	ldr	ip, [fp, #8]
   13d30:	mov	lr, #0
   13d34:	ldr	r4, [ip, lr, lsl #2]
   13d38:	add	lr, lr, #1
   13d3c:	cmp	r4, #0
   13d40:	bne	13d34 <__mempcpy_chk@plt+0x2ce4>
   13d44:	sub	r4, lr, #1
   13d48:	str	ip, [sp]
   13d4c:	str	r4, [sp, #4]
   13d50:	bl	139f4 <__mempcpy_chk@plt+0x29a4>
   13d54:	sub	sp, fp, #8
   13d58:	pop	{r4, sl, fp, pc}
   13d5c:	push	{r4, r5, fp, lr}
   13d60:	add	fp, sp, #8
   13d64:	sub	sp, sp, #48	; 0x30
   13d68:	ldr	r4, [fp, #8]
   13d6c:	mov	ip, #0
   13d70:	add	lr, sp, #8
   13d74:	ldr	r5, [r4]
   13d78:	cmp	r5, #0
   13d7c:	str	r5, [lr, ip, lsl #2]
   13d80:	beq	13d94 <__mempcpy_chk@plt+0x2d44>
   13d84:	add	ip, ip, #1
   13d88:	add	r4, r4, #4
   13d8c:	cmp	ip, #10
   13d90:	bcc	13d74 <__mempcpy_chk@plt+0x2d24>
   13d94:	str	lr, [sp]
   13d98:	str	ip, [sp, #4]
   13d9c:	bl	139f4 <__mempcpy_chk@plt+0x29a4>
   13da0:	sub	sp, fp, #8
   13da4:	pop	{r4, r5, fp, pc}
   13da8:	push	{fp, lr}
   13dac:	mov	fp, sp
   13db0:	sub	sp, sp, #8
   13db4:	add	ip, fp, #8
   13db8:	str	ip, [sp, #4]
   13dbc:	str	ip, [sp]
   13dc0:	bl	13d5c <__mempcpy_chk@plt+0x2d0c>
   13dc4:	mov	sp, fp
   13dc8:	pop	{fp, pc}
   13dcc:	push	{fp, lr}
   13dd0:	mov	fp, sp
   13dd4:	movw	r0, #24900	; 0x6144
   13dd8:	movt	r0, #2
   13ddc:	ldr	r1, [r0]
   13de0:	movw	r0, #18822	; 0x4986
   13de4:	movt	r0, #1
   13de8:	bl	10df8 <fputs_unlocked@plt>
   13dec:	movw	r1, #21071	; 0x524f
   13df0:	mov	r0, #0
   13df4:	mov	r2, #5
   13df8:	movt	r1, #1
   13dfc:	bl	10e70 <dcgettext@plt>
   13e00:	movw	r2, #21091	; 0x5263
   13e04:	mov	r1, r0
   13e08:	mov	r0, #1
   13e0c:	movt	r2, #1
   13e10:	bl	10f90 <__printf_chk@plt>
   13e14:	movw	r1, #21113	; 0x5279
   13e18:	mov	r0, #0
   13e1c:	mov	r2, #5
   13e20:	movt	r1, #1
   13e24:	bl	10e70 <dcgettext@plt>
   13e28:	movw	r2, #19451	; 0x4bfb
   13e2c:	movw	r3, #19860	; 0x4d94
   13e30:	mov	r1, r0
   13e34:	mov	r0, #1
   13e38:	movt	r2, #1
   13e3c:	movt	r3, #1
   13e40:	bl	10f90 <__printf_chk@plt>
   13e44:	movw	r1, #21133	; 0x528d
   13e48:	mov	r0, #0
   13e4c:	mov	r2, #5
   13e50:	movt	r1, #1
   13e54:	bl	10e70 <dcgettext@plt>
   13e58:	movw	r2, #21172	; 0x52b4
   13e5c:	mov	r1, r0
   13e60:	mov	r0, #1
   13e64:	movt	r2, #1
   13e68:	pop	{fp, lr}
   13e6c:	b	10f90 <__printf_chk@plt>
   13e70:	b	13e74 <__mempcpy_chk@plt+0x2e24>
   13e74:	push	{r4, r5, r6, sl, fp, lr}
   13e78:	add	fp, sp, #16
   13e7c:	mov	r4, r2
   13e80:	mov	r5, r1
   13e84:	mov	r6, r0
   13e88:	bl	1474c <__mempcpy_chk@plt+0x36fc>
   13e8c:	cmp	r0, #0
   13e90:	popne	{r4, r5, r6, sl, fp, pc}
   13e94:	cmp	r6, #0
   13e98:	beq	13eac <__mempcpy_chk@plt+0x2e5c>
   13e9c:	cmp	r5, #0
   13ea0:	cmpne	r4, #0
   13ea4:	bne	13eac <__mempcpy_chk@plt+0x2e5c>
   13ea8:	pop	{r4, r5, r6, sl, fp, pc}
   13eac:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   13eb0:	push	{fp, lr}
   13eb4:	mov	fp, sp
   13eb8:	bl	14398 <__mempcpy_chk@plt+0x3348>
   13ebc:	cmp	r0, #0
   13ec0:	popne	{fp, pc}
   13ec4:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   13ec8:	push	{fp, lr}
   13ecc:	mov	fp, sp
   13ed0:	bl	14398 <__mempcpy_chk@plt+0x3348>
   13ed4:	cmp	r0, #0
   13ed8:	popne	{fp, pc}
   13edc:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   13ee0:	push	{fp, lr}
   13ee4:	mov	fp, sp
   13ee8:	bl	14398 <__mempcpy_chk@plt+0x3348>
   13eec:	cmp	r0, #0
   13ef0:	popne	{fp, pc}
   13ef4:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   13ef8:	push	{r4, r5, fp, lr}
   13efc:	add	fp, sp, #8
   13f00:	mov	r4, r1
   13f04:	mov	r5, r0
   13f08:	bl	143c8 <__mempcpy_chk@plt+0x3378>
   13f0c:	cmp	r0, #0
   13f10:	popne	{r4, r5, fp, pc}
   13f14:	cmp	r5, #0
   13f18:	beq	13f28 <__mempcpy_chk@plt+0x2ed8>
   13f1c:	cmp	r4, #0
   13f20:	bne	13f28 <__mempcpy_chk@plt+0x2ed8>
   13f24:	pop	{r4, r5, fp, pc}
   13f28:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   13f2c:	push	{fp, lr}
   13f30:	mov	fp, sp
   13f34:	cmp	r1, #0
   13f38:	orreq	r1, r1, #1
   13f3c:	bl	143c8 <__mempcpy_chk@plt+0x3378>
   13f40:	cmp	r0, #0
   13f44:	popne	{fp, pc}
   13f48:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   13f4c:	push	{fp, lr}
   13f50:	mov	fp, sp
   13f54:	clz	r3, r2
   13f58:	lsr	ip, r3, #5
   13f5c:	clz	r3, r1
   13f60:	lsr	r3, r3, #5
   13f64:	orrs	r3, r3, ip
   13f68:	movwne	r1, #1
   13f6c:	movwne	r2, #1
   13f70:	bl	1474c <__mempcpy_chk@plt+0x36fc>
   13f74:	cmp	r0, #0
   13f78:	popne	{fp, pc}
   13f7c:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   13f80:	push	{fp, lr}
   13f84:	mov	fp, sp
   13f88:	mov	r2, r1
   13f8c:	mov	r1, r0
   13f90:	mov	r0, #0
   13f94:	bl	1474c <__mempcpy_chk@plt+0x36fc>
   13f98:	cmp	r0, #0
   13f9c:	popne	{fp, pc}
   13fa0:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   13fa4:	mov	r2, r1
   13fa8:	mov	r1, r0
   13fac:	mov	r0, #0
   13fb0:	b	13f4c <__mempcpy_chk@plt+0x2efc>
   13fb4:	mov	r2, #1
   13fb8:	b	13fbc <__mempcpy_chk@plt+0x2f6c>
   13fbc:	push	{r4, r5, fp, lr}
   13fc0:	add	fp, sp, #8
   13fc4:	ldr	r5, [r1]
   13fc8:	mov	r4, r1
   13fcc:	cmp	r0, #0
   13fd0:	beq	13fe8 <__mempcpy_chk@plt+0x2f98>
   13fd4:	mov	r1, #1
   13fd8:	add	r1, r1, r5, lsr #1
   13fdc:	adds	r5, r5, r1
   13fe0:	bcc	14000 <__mempcpy_chk@plt+0x2fb0>
   13fe4:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   13fe8:	cmp	r5, #0
   13fec:	bne	14000 <__mempcpy_chk@plt+0x2fb0>
   13ff0:	mov	r1, #64	; 0x40
   13ff4:	cmp	r2, #64	; 0x40
   13ff8:	udiv	r5, r1, r2
   13ffc:	addhi	r5, r5, #1
   14000:	mov	r1, r5
   14004:	bl	13e74 <__mempcpy_chk@plt+0x2e24>
   14008:	str	r5, [r4]
   1400c:	pop	{r4, r5, fp, pc}
   14010:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14014:	add	fp, sp, #24
   14018:	ldr	r6, [r1]
   1401c:	mov	r8, r1
   14020:	ldr	r4, [fp, #8]
   14024:	add	r1, r6, r6, asr #1
   14028:	cmp	r1, r6
   1402c:	mvnvs	r1, #-2147483648	; 0x80000000
   14030:	cmp	r1, r3
   14034:	mov	r5, r1
   14038:	movgt	r5, r3
   1403c:	cmn	r3, #1
   14040:	movle	r5, r1
   14044:	cmn	r4, #1
   14048:	ble	14068 <__mempcpy_chk@plt+0x3018>
   1404c:	cmp	r4, #0
   14050:	beq	140bc <__mempcpy_chk@plt+0x306c>
   14054:	cmn	r5, #1
   14058:	ble	14090 <__mempcpy_chk@plt+0x3040>
   1405c:	mvn	r7, #-2147483648	; 0x80000000
   14060:	udiv	r1, r7, r4
   14064:	b	14084 <__mempcpy_chk@plt+0x3034>
   14068:	cmn	r5, #1
   1406c:	ble	140ac <__mempcpy_chk@plt+0x305c>
   14070:	cmn	r4, #1
   14074:	beq	140bc <__mempcpy_chk@plt+0x306c>
   14078:	mov	r1, #-2147483648	; 0x80000000
   1407c:	mvn	r7, #-2147483648	; 0x80000000
   14080:	sdiv	r1, r1, r4
   14084:	cmp	r1, r5
   14088:	bge	140bc <__mempcpy_chk@plt+0x306c>
   1408c:	b	140cc <__mempcpy_chk@plt+0x307c>
   14090:	beq	140bc <__mempcpy_chk@plt+0x306c>
   14094:	mov	r1, #-2147483648	; 0x80000000
   14098:	mvn	r7, #-2147483648	; 0x80000000
   1409c:	sdiv	r1, r1, r5
   140a0:	cmp	r1, r4
   140a4:	bge	140bc <__mempcpy_chk@plt+0x306c>
   140a8:	b	140cc <__mempcpy_chk@plt+0x307c>
   140ac:	mvn	r7, #-2147483648	; 0x80000000
   140b0:	sdiv	r1, r7, r4
   140b4:	cmp	r5, r1
   140b8:	blt	140cc <__mempcpy_chk@plt+0x307c>
   140bc:	mul	r1, r5, r4
   140c0:	mov	r7, #64	; 0x40
   140c4:	cmp	r1, #63	; 0x3f
   140c8:	bgt	140d4 <__mempcpy_chk@plt+0x3084>
   140cc:	sdiv	r5, r7, r4
   140d0:	mul	r1, r5, r4
   140d4:	cmp	r0, #0
   140d8:	moveq	r7, #0
   140dc:	streq	r7, [r8]
   140e0:	sub	r7, r5, r6
   140e4:	cmp	r7, r2
   140e8:	bge	1418c <__mempcpy_chk@plt+0x313c>
   140ec:	add	r5, r6, r2
   140f0:	mov	r2, #0
   140f4:	mov	r1, #0
   140f8:	cmp	r5, r3
   140fc:	movwgt	r2, #1
   14100:	cmn	r3, #1
   14104:	movwgt	r1, #1
   14108:	cmp	r5, r6
   1410c:	bvs	14174 <__mempcpy_chk@plt+0x3124>
   14110:	ands	r1, r1, r2
   14114:	bne	14174 <__mempcpy_chk@plt+0x3124>
   14118:	cmn	r4, #1
   1411c:	ble	1413c <__mempcpy_chk@plt+0x30ec>
   14120:	cmp	r4, #0
   14124:	beq	14188 <__mempcpy_chk@plt+0x3138>
   14128:	cmn	r5, #1
   1412c:	ble	14160 <__mempcpy_chk@plt+0x3110>
   14130:	mvn	r1, #-2147483648	; 0x80000000
   14134:	udiv	r1, r1, r4
   14138:	b	14154 <__mempcpy_chk@plt+0x3104>
   1413c:	cmn	r5, #1
   14140:	ble	14178 <__mempcpy_chk@plt+0x3128>
   14144:	cmn	r4, #1
   14148:	beq	14188 <__mempcpy_chk@plt+0x3138>
   1414c:	mov	r1, #-2147483648	; 0x80000000
   14150:	sdiv	r1, r1, r4
   14154:	cmp	r1, r5
   14158:	bge	14188 <__mempcpy_chk@plt+0x3138>
   1415c:	b	14174 <__mempcpy_chk@plt+0x3124>
   14160:	beq	14188 <__mempcpy_chk@plt+0x3138>
   14164:	mov	r1, #-2147483648	; 0x80000000
   14168:	sdiv	r1, r1, r5
   1416c:	cmp	r1, r4
   14170:	bge	14188 <__mempcpy_chk@plt+0x3138>
   14174:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   14178:	mvn	r1, #-2147483648	; 0x80000000
   1417c:	sdiv	r1, r1, r4
   14180:	cmp	r5, r1
   14184:	blt	14174 <__mempcpy_chk@plt+0x3124>
   14188:	mul	r1, r5, r4
   1418c:	bl	13ef8 <__mempcpy_chk@plt+0x2ea8>
   14190:	str	r5, [r8]
   14194:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14198:	push	{fp, lr}
   1419c:	mov	fp, sp
   141a0:	mov	r1, #1
   141a4:	bl	14344 <__mempcpy_chk@plt+0x32f4>
   141a8:	cmp	r0, #0
   141ac:	popne	{fp, pc}
   141b0:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   141b4:	push	{fp, lr}
   141b8:	mov	fp, sp
   141bc:	bl	14344 <__mempcpy_chk@plt+0x32f4>
   141c0:	cmp	r0, #0
   141c4:	popne	{fp, pc}
   141c8:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   141cc:	push	{fp, lr}
   141d0:	mov	fp, sp
   141d4:	mov	r1, #1
   141d8:	bl	14344 <__mempcpy_chk@plt+0x32f4>
   141dc:	cmp	r0, #0
   141e0:	popne	{fp, pc}
   141e4:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   141e8:	push	{fp, lr}
   141ec:	mov	fp, sp
   141f0:	bl	14344 <__mempcpy_chk@plt+0x32f4>
   141f4:	cmp	r0, #0
   141f8:	popne	{fp, pc}
   141fc:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   14200:	push	{r4, r5, r6, sl, fp, lr}
   14204:	add	fp, sp, #16
   14208:	mov	r5, r0
   1420c:	mov	r0, r1
   14210:	mov	r4, r1
   14214:	bl	14398 <__mempcpy_chk@plt+0x3348>
   14218:	cmp	r0, #0
   1421c:	beq	14238 <__mempcpy_chk@plt+0x31e8>
   14220:	mov	r1, r5
   14224:	mov	r2, r4
   14228:	mov	r6, r0
   1422c:	bl	10e34 <memcpy@plt>
   14230:	mov	r0, r6
   14234:	pop	{r4, r5, r6, sl, fp, pc}
   14238:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   1423c:	push	{r4, r5, r6, sl, fp, lr}
   14240:	add	fp, sp, #16
   14244:	mov	r5, r0
   14248:	mov	r0, r1
   1424c:	mov	r4, r1
   14250:	bl	14398 <__mempcpy_chk@plt+0x3348>
   14254:	cmp	r0, #0
   14258:	beq	14274 <__mempcpy_chk@plt+0x3224>
   1425c:	mov	r1, r5
   14260:	mov	r2, r4
   14264:	mov	r6, r0
   14268:	bl	10e34 <memcpy@plt>
   1426c:	mov	r0, r6
   14270:	pop	{r4, r5, r6, sl, fp, pc}
   14274:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   14278:	push	{r4, r5, r6, sl, fp, lr}
   1427c:	add	fp, sp, #16
   14280:	mov	r5, r0
   14284:	add	r0, r1, #1
   14288:	mov	r4, r1
   1428c:	bl	14398 <__mempcpy_chk@plt+0x3348>
   14290:	cmp	r0, #0
   14294:	beq	142bc <__mempcpy_chk@plt+0x326c>
   14298:	mov	r6, r0
   1429c:	mov	r0, #0
   142a0:	mov	r1, r5
   142a4:	mov	r2, r4
   142a8:	strb	r0, [r6, r4]
   142ac:	mov	r0, r6
   142b0:	bl	10e34 <memcpy@plt>
   142b4:	mov	r0, r6
   142b8:	pop	{r4, r5, r6, sl, fp, pc}
   142bc:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   142c0:	push	{r4, r5, r6, sl, fp, lr}
   142c4:	add	fp, sp, #16
   142c8:	mov	r4, r0
   142cc:	bl	10f60 <strlen@plt>
   142d0:	add	r5, r0, #1
   142d4:	mov	r0, r5
   142d8:	bl	14398 <__mempcpy_chk@plt+0x3348>
   142dc:	cmp	r0, #0
   142e0:	beq	142fc <__mempcpy_chk@plt+0x32ac>
   142e4:	mov	r1, r4
   142e8:	mov	r2, r5
   142ec:	mov	r6, r0
   142f0:	bl	10e34 <memcpy@plt>
   142f4:	mov	r0, r6
   142f8:	pop	{r4, r5, r6, sl, fp, pc}
   142fc:	bl	14300 <__mempcpy_chk@plt+0x32b0>
   14300:	push	{fp, lr}
   14304:	mov	fp, sp
   14308:	movw	r0, #24812	; 0x60ec
   1430c:	movw	r1, #21248	; 0x5300
   14310:	mov	r2, #5
   14314:	movt	r0, #2
   14318:	movt	r1, #1
   1431c:	ldr	r4, [r0]
   14320:	mov	r0, #0
   14324:	bl	10e70 <dcgettext@plt>
   14328:	movw	r2, #20143	; 0x4eaf
   1432c:	mov	r3, r0
   14330:	mov	r0, r4
   14334:	mov	r1, #0
   14338:	movt	r2, #1
   1433c:	bl	10ee8 <error@plt>
   14340:	bl	11038 <abort@plt>
   14344:	clz	r2, r1
   14348:	clz	r3, r0
   1434c:	lsr	r2, r2, #5
   14350:	lsr	r3, r3, #5
   14354:	orrs	r2, r3, r2
   14358:	movwne	r1, #1
   1435c:	movwne	r0, #1
   14360:	cmp	r1, #0
   14364:	beq	14394 <__mempcpy_chk@plt+0x3344>
   14368:	mvn	r2, #-2147483648	; 0x80000000
   1436c:	udiv	r2, r2, r1
   14370:	cmp	r2, r0
   14374:	bcs	14394 <__mempcpy_chk@plt+0x3344>
   14378:	push	{fp, lr}
   1437c:	mov	fp, sp
   14380:	bl	10f6c <__errno_location@plt>
   14384:	mov	r1, #12
   14388:	str	r1, [r0]
   1438c:	mov	r0, #0
   14390:	pop	{fp, pc}
   14394:	b	10dec <calloc@plt>
   14398:	cmp	r0, #0
   1439c:	movweq	r0, #1
   143a0:	cmn	r0, #1
   143a4:	ble	143ac <__mempcpy_chk@plt+0x335c>
   143a8:	b	10f0c <malloc@plt>
   143ac:	push	{fp, lr}
   143b0:	mov	fp, sp
   143b4:	bl	10f6c <__errno_location@plt>
   143b8:	mov	r1, #12
   143bc:	str	r1, [r0]
   143c0:	mov	r0, #0
   143c4:	pop	{fp, pc}
   143c8:	push	{fp, lr}
   143cc:	mov	fp, sp
   143d0:	cmp	r0, #0
   143d4:	beq	143f0 <__mempcpy_chk@plt+0x33a0>
   143d8:	cmp	r1, #0
   143dc:	beq	143fc <__mempcpy_chk@plt+0x33ac>
   143e0:	cmn	r1, #1
   143e4:	ble	14404 <__mempcpy_chk@plt+0x33b4>
   143e8:	pop	{fp, lr}
   143ec:	b	10e88 <realloc@plt>
   143f0:	mov	r0, r1
   143f4:	pop	{fp, lr}
   143f8:	b	14398 <__mempcpy_chk@plt+0x3348>
   143fc:	bl	11d18 <__mempcpy_chk@plt+0xcc8>
   14400:	b	14410 <__mempcpy_chk@plt+0x33c0>
   14404:	bl	10f6c <__errno_location@plt>
   14408:	mov	r1, #12
   1440c:	str	r1, [r0]
   14410:	mov	r0, #0
   14414:	pop	{fp, pc}
   14418:	sub	r0, r0, #1
   1441c:	ldrb	r3, [r0, #1]!
   14420:	cmp	r3, #47	; 0x2f
   14424:	beq	1441c <__mempcpy_chk@plt+0x33cc>
   14428:	mov	r2, #0
   1442c:	mov	r1, r0
   14430:	uxtb	r3, r3
   14434:	cmp	r3, #47	; 0x2f
   14438:	beq	14454 <__mempcpy_chk@plt+0x3404>
   1443c:	cmp	r3, #0
   14440:	bxeq	lr
   14444:	tst	r2, #1
   14448:	mov	r2, #0
   1444c:	movne	r0, r1
   14450:	b	14458 <__mempcpy_chk@plt+0x3408>
   14454:	mov	r2, #1
   14458:	ldrb	r3, [r1, #1]!
   1445c:	b	14430 <__mempcpy_chk@plt+0x33e0>
   14460:	push	{r4, sl, fp, lr}
   14464:	add	fp, sp, #8
   14468:	mov	r4, r0
   1446c:	bl	10f60 <strlen@plt>
   14470:	mov	r1, r0
   14474:	sub	r2, r4, #1
   14478:	mov	r0, r1
   1447c:	cmp	r1, #2
   14480:	popcc	{r4, sl, fp, pc}
   14484:	ldrb	r3, [r2, r0]
   14488:	sub	r1, r0, #1
   1448c:	cmp	r3, #47	; 0x2f
   14490:	beq	14478 <__mempcpy_chk@plt+0x3428>
   14494:	pop	{r4, sl, fp, pc}
   14498:	push	{r4, r5, r6, sl, fp, lr}
   1449c:	add	fp, sp, #16
   144a0:	mov	r4, r0
   144a4:	bl	10ec4 <__fpending@plt>
   144a8:	mov	r5, r0
   144ac:	mov	r0, r4
   144b0:	bl	10ed0 <ferror_unlocked@plt>
   144b4:	mov	r6, r0
   144b8:	mov	r0, r4
   144bc:	bl	14518 <__mempcpy_chk@plt+0x34c8>
   144c0:	cmp	r6, #0
   144c4:	beq	144e4 <__mempcpy_chk@plt+0x3494>
   144c8:	mvn	r4, #0
   144cc:	cmp	r0, #0
   144d0:	bne	14510 <__mempcpy_chk@plt+0x34c0>
   144d4:	bl	10f6c <__errno_location@plt>
   144d8:	mov	r1, #0
   144dc:	str	r1, [r0]
   144e0:	b	14510 <__mempcpy_chk@plt+0x34c0>
   144e4:	cmp	r0, #0
   144e8:	mov	r4, r0
   144ec:	mvnne	r4, #0
   144f0:	cmp	r5, #0
   144f4:	bne	14510 <__mempcpy_chk@plt+0x34c0>
   144f8:	cmp	r0, #0
   144fc:	beq	14510 <__mempcpy_chk@plt+0x34c0>
   14500:	bl	10f6c <__errno_location@plt>
   14504:	ldr	r0, [r0]
   14508:	subs	r4, r0, #9
   1450c:	mvnne	r4, #0
   14510:	mov	r0, r4
   14514:	pop	{r4, r5, r6, sl, fp, pc}
   14518:	push	{r4, r5, r6, sl, fp, lr}
   1451c:	add	fp, sp, #16
   14520:	sub	sp, sp, #8
   14524:	mov	r4, r0
   14528:	bl	10f9c <fileno@plt>
   1452c:	cmn	r0, #1
   14530:	ble	145a4 <__mempcpy_chk@plt+0x3554>
   14534:	mov	r0, r4
   14538:	bl	10f24 <__freading@plt>
   1453c:	cmp	r0, #0
   14540:	beq	1456c <__mempcpy_chk@plt+0x351c>
   14544:	mov	r0, r4
   14548:	bl	10f9c <fileno@plt>
   1454c:	mov	r1, #1
   14550:	mov	r2, #0
   14554:	mov	r3, #0
   14558:	str	r1, [sp]
   1455c:	bl	10eac <lseek64@plt>
   14560:	and	r0, r0, r1
   14564:	cmn	r0, #1
   14568:	beq	145a4 <__mempcpy_chk@plt+0x3554>
   1456c:	mov	r0, r4
   14570:	bl	145b4 <__mempcpy_chk@plt+0x3564>
   14574:	cmp	r0, #0
   14578:	beq	145a4 <__mempcpy_chk@plt+0x3554>
   1457c:	bl	10f6c <__errno_location@plt>
   14580:	ldr	r6, [r0]
   14584:	mov	r5, r0
   14588:	mov	r0, r4
   1458c:	bl	10fb4 <fclose@plt>
   14590:	cmp	r6, #0
   14594:	strne	r6, [r5]
   14598:	mvnne	r0, #0
   1459c:	sub	sp, fp, #16
   145a0:	pop	{r4, r5, r6, sl, fp, pc}
   145a4:	mov	r0, r4
   145a8:	sub	sp, fp, #16
   145ac:	pop	{r4, r5, r6, sl, fp, lr}
   145b0:	b	10fb4 <fclose@plt>
   145b4:	push	{r4, sl, fp, lr}
   145b8:	add	fp, sp, #8
   145bc:	sub	sp, sp, #8
   145c0:	mov	r4, r0
   145c4:	cmp	r0, #0
   145c8:	beq	145e4 <__mempcpy_chk@plt+0x3594>
   145cc:	mov	r0, r4
   145d0:	bl	10f24 <__freading@plt>
   145d4:	cmp	r0, #0
   145d8:	ldrbne	r0, [r4, #1]
   145dc:	tstne	r0, #1
   145e0:	bne	145f4 <__mempcpy_chk@plt+0x35a4>
   145e4:	mov	r0, r4
   145e8:	sub	sp, fp, #8
   145ec:	pop	{r4, sl, fp, lr}
   145f0:	b	10e10 <fflush@plt>
   145f4:	mov	r0, #1
   145f8:	mov	r2, #0
   145fc:	mov	r3, #0
   14600:	str	r0, [sp]
   14604:	mov	r0, r4
   14608:	bl	14610 <__mempcpy_chk@plt+0x35c0>
   1460c:	b	145e4 <__mempcpy_chk@plt+0x3594>
   14610:	push	{r4, r5, r6, r7, fp, lr}
   14614:	add	fp, sp, #16
   14618:	sub	sp, sp, #8
   1461c:	mov	r4, r0
   14620:	ldr	r0, [r0, #4]
   14624:	mov	r5, r3
   14628:	mov	r6, r2
   1462c:	ldr	r1, [r4, #8]
   14630:	cmp	r1, r0
   14634:	bne	14650 <__mempcpy_chk@plt+0x3600>
   14638:	ldrd	r0, [r4, #16]
   1463c:	cmp	r1, r0
   14640:	bne	14650 <__mempcpy_chk@plt+0x3600>
   14644:	ldr	r0, [r4, #36]	; 0x24
   14648:	cmp	r0, #0
   1464c:	beq	14668 <__mempcpy_chk@plt+0x3618>
   14650:	mov	r0, r4
   14654:	mov	r2, r6
   14658:	mov	r3, r5
   1465c:	sub	sp, fp, #16
   14660:	pop	{r4, r5, r6, r7, fp, lr}
   14664:	b	10fc0 <fseeko64@plt>
   14668:	ldr	r7, [fp, #8]
   1466c:	mov	r0, r4
   14670:	bl	10f9c <fileno@plt>
   14674:	mov	r2, r6
   14678:	mov	r3, r5
   1467c:	str	r7, [sp]
   14680:	bl	10eac <lseek64@plt>
   14684:	and	r2, r0, r1
   14688:	cmn	r2, #1
   1468c:	beq	146a8 <__mempcpy_chk@plt+0x3658>
   14690:	strd	r0, [r4, #80]	; 0x50
   14694:	ldr	r0, [r4]
   14698:	bic	r0, r0, #16
   1469c:	str	r0, [r4]
   146a0:	mov	r0, #0
   146a4:	b	146ac <__mempcpy_chk@plt+0x365c>
   146a8:	mvn	r0, #0
   146ac:	sub	sp, fp, #16
   146b0:	pop	{r4, r5, r6, r7, fp, pc}
   146b4:	push	{fp, lr}
   146b8:	mov	fp, sp
   146bc:	mov	r0, #14
   146c0:	bl	10ff0 <nl_langinfo@plt>
   146c4:	movw	r1, #18823	; 0x4987
   146c8:	cmp	r0, #0
   146cc:	movt	r1, #1
   146d0:	movne	r1, r0
   146d4:	movw	r0, #21265	; 0x5311
   146d8:	ldrb	r2, [r1]
   146dc:	movt	r0, #1
   146e0:	cmp	r2, #0
   146e4:	movne	r0, r1
   146e8:	pop	{fp, pc}
   146ec:	push	{r4, r5, r6, r7, fp, lr}
   146f0:	add	fp, sp, #16
   146f4:	sub	sp, sp, #8
   146f8:	add	r5, sp, #4
   146fc:	cmp	r0, #0
   14700:	mov	r7, r2
   14704:	mov	r4, r1
   14708:	movne	r5, r0
   1470c:	mov	r0, r5
   14710:	bl	10edc <mbrtowc@plt>
   14714:	mov	r6, r0
   14718:	cmp	r7, #0
   1471c:	beq	14740 <__mempcpy_chk@plt+0x36f0>
   14720:	cmn	r6, #2
   14724:	bcc	14740 <__mempcpy_chk@plt+0x36f0>
   14728:	mov	r0, #0
   1472c:	bl	14788 <__mempcpy_chk@plt+0x3738>
   14730:	cmp	r0, #0
   14734:	ldrbeq	r0, [r4]
   14738:	moveq	r6, #1
   1473c:	streq	r0, [r5]
   14740:	mov	r0, r6
   14744:	sub	sp, fp, #16
   14748:	pop	{r4, r5, r6, r7, fp, pc}
   1474c:	cmp	r2, #0
   14750:	beq	14780 <__mempcpy_chk@plt+0x3730>
   14754:	mvn	r3, #0
   14758:	udiv	r3, r3, r2
   1475c:	cmp	r3, r1
   14760:	bcs	14780 <__mempcpy_chk@plt+0x3730>
   14764:	push	{fp, lr}
   14768:	mov	fp, sp
   1476c:	bl	10f6c <__errno_location@plt>
   14770:	mov	r1, #12
   14774:	str	r1, [r0]
   14778:	mov	r0, #0
   1477c:	pop	{fp, pc}
   14780:	mul	r1, r2, r1
   14784:	b	143c8 <__mempcpy_chk@plt+0x3378>
   14788:	push	{r4, sl, fp, lr}
   1478c:	add	fp, sp, #8
   14790:	sub	sp, sp, #264	; 0x108
   14794:	add	r1, sp, #7
   14798:	movw	r2, #257	; 0x101
   1479c:	bl	147ec <__mempcpy_chk@plt+0x379c>
   147a0:	mov	r4, #0
   147a4:	cmp	r0, #0
   147a8:	bne	147e0 <__mempcpy_chk@plt+0x3790>
   147ac:	movw	r1, #21271	; 0x5317
   147b0:	add	r0, sp, #7
   147b4:	movt	r1, #1
   147b8:	bl	10e04 <strcmp@plt>
   147bc:	cmp	r0, #0
   147c0:	beq	147e0 <__mempcpy_chk@plt+0x3790>
   147c4:	movw	r1, #21273	; 0x5319
   147c8:	add	r0, sp, #7
   147cc:	movt	r1, #1
   147d0:	bl	10e04 <strcmp@plt>
   147d4:	mov	r4, r0
   147d8:	cmp	r0, #0
   147dc:	movwne	r4, #1
   147e0:	mov	r0, r4
   147e4:	sub	sp, fp, #8
   147e8:	pop	{r4, sl, fp, pc}
   147ec:	push	{r4, r5, r6, r7, fp, lr}
   147f0:	add	fp, sp, #16
   147f4:	mov	r4, r1
   147f8:	mov	r1, #0
   147fc:	mov	r6, r2
   14800:	bl	10fd8 <setlocale@plt>
   14804:	cmp	r0, #0
   14808:	beq	14834 <__mempcpy_chk@plt+0x37e4>
   1480c:	mov	r7, r0
   14810:	bl	10f60 <strlen@plt>
   14814:	cmp	r0, r6
   14818:	bcs	14848 <__mempcpy_chk@plt+0x37f8>
   1481c:	add	r2, r0, #1
   14820:	mov	r0, r4
   14824:	mov	r1, r7
   14828:	bl	10e34 <memcpy@plt>
   1482c:	mov	r5, #0
   14830:	b	14870 <__mempcpy_chk@plt+0x3820>
   14834:	cmp	r6, #0
   14838:	mov	r5, #22
   1483c:	movne	r0, #0
   14840:	strbne	r0, [r4]
   14844:	b	14870 <__mempcpy_chk@plt+0x3820>
   14848:	mov	r5, #34	; 0x22
   1484c:	cmp	r6, #0
   14850:	beq	14870 <__mempcpy_chk@plt+0x3820>
   14854:	sub	r6, r6, #1
   14858:	mov	r0, r4
   1485c:	mov	r1, r7
   14860:	mov	r2, r6
   14864:	bl	10e34 <memcpy@plt>
   14868:	mov	r0, #0
   1486c:	strb	r0, [r4, r6]
   14870:	mov	r0, r5
   14874:	pop	{r4, r5, r6, r7, fp, pc}
   14878:	mov	r1, #0
   1487c:	b	10fd8 <setlocale@plt>
   14880:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14884:	mov	r7, r0
   14888:	ldr	r6, [pc, #72]	; 148d8 <__mempcpy_chk@plt+0x3888>
   1488c:	ldr	r5, [pc, #72]	; 148dc <__mempcpy_chk@plt+0x388c>
   14890:	add	r6, pc, r6
   14894:	add	r5, pc, r5
   14898:	sub	r6, r6, r5
   1489c:	mov	r8, r1
   148a0:	mov	r9, r2
   148a4:	bl	10dcc <calloc@plt-0x20>
   148a8:	asrs	r6, r6, #2
   148ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   148b0:	mov	r4, #0
   148b4:	add	r4, r4, #1
   148b8:	ldr	r3, [r5], #4
   148bc:	mov	r2, r9
   148c0:	mov	r1, r8
   148c4:	mov	r0, r7
   148c8:	blx	r3
   148cc:	cmp	r6, r4
   148d0:	bne	148b4 <__mempcpy_chk@plt+0x3864>
   148d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   148d8:	andeq	r1, r1, r4, ror r6
   148dc:	andeq	r1, r1, ip, ror #12
   148e0:	bx	lr
   148e4:	ldr	r3, [pc, #12]	; 148f8 <__mempcpy_chk@plt+0x38a8>
   148e8:	mov	r1, #0
   148ec:	add	r3, pc, r3
   148f0:	ldr	r2, [r3]
   148f4:	b	10f78 <__cxa_atexit@plt>
   148f8:	strdeq	r1, [r1], -r0

Disassembly of section .fini:

000148fc <.fini>:
   148fc:	push	{r3, lr}
   14900:	pop	{r3, pc}
