
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010d9c <.init>:
   10d9c:	push	{r3, lr}
   10da0:	bl	11050 <__assert_fail@plt+0x48>
   10da4:	pop	{r3, pc}

Disassembly of section .plt:

00010da8 <calloc@plt-0x14>:
   10da8:	push	{lr}		; (str lr, [sp, #-4]!)
   10dac:	ldr	lr, [pc, #4]	; 10db8 <calloc@plt-0x4>
   10db0:	add	lr, pc, lr
   10db4:	ldr	pc, [lr, #8]!
   10db8:	andeq	r6, r1, r8, asr #4

00010dbc <calloc@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #584]!	; 0x248

00010dc8 <fputs_unlocked@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #576]!	; 0x240

00010dd4 <raise@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #568]!	; 0x238

00010de0 <strcmp@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #560]!	; 0x230

00010dec <fflush@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #552]!	; 0x228

00010df8 <free@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #544]!	; 0x220

00010e04 <_exit@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #536]!	; 0x218

00010e10 <memcpy@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #528]!	; 0x210

00010e1c <__strtoull_internal@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #520]!	; 0x208

00010e28 <mbsinit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #512]!	; 0x200

00010e34 <__sched_cpucount@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #504]!	; 0x1f8

00010e40 <memcmp@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #496]!	; 0x1f0

00010e4c <dcgettext@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #488]!	; 0x1e8

00010e58 <sysconf@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #480]!	; 0x1e0

00010e64 <realloc@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #472]!	; 0x1d8

00010e70 <textdomain@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #464]!	; 0x1d0

00010e7c <iswprint@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #456]!	; 0x1c8

00010e88 <fwrite@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #448]!	; 0x1c0

00010e94 <lseek64@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #440]!	; 0x1b8

00010ea0 <__ctype_get_mb_cur_max@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #432]!	; 0x1b0

00010eac <__fpending@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #424]!	; 0x1a8

00010eb8 <mbrtowc@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #416]!	; 0x1a0

00010ec4 <error@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #408]!	; 0x198

00010ed0 <getenv@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #400]!	; 0x190

00010edc <malloc@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #392]!	; 0x188

00010ee8 <__libc_start_main@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #384]!	; 0x180

00010ef4 <__freading@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #376]!	; 0x178

00010f00 <__gmon_start__@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #368]!	; 0x170

00010f0c <getopt_long@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #360]!	; 0x168

00010f18 <__ctype_b_loc@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #352]!	; 0x160

00010f24 <exit@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #344]!	; 0x158

00010f30 <strtoul@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #336]!	; 0x150

00010f3c <strlen@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #328]!	; 0x148

00010f48 <strchr@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #320]!	; 0x140

00010f54 <__errno_location@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #312]!	; 0x138

00010f60 <__cxa_atexit@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #304]!	; 0x130

00010f6c <memset@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #296]!	; 0x128

00010f78 <__printf_chk@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #288]!	; 0x120

00010f84 <fileno@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #280]!	; 0x118

00010f90 <__fprintf_chk@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #272]!	; 0x110

00010f9c <fclose@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #264]!	; 0x108

00010fa8 <fseeko64@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #256]!	; 0x100

00010fb4 <setlocale@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #248]!	; 0xf8

00010fc0 <strrchr@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #240]!	; 0xf0

00010fcc <nl_langinfo@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #232]!	; 0xe8

00010fd8 <sched_getaffinity@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #224]!	; 0xe0

00010fe4 <bindtextdomain@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #216]!	; 0xd8

00010ff0 <strncmp@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #208]!	; 0xd0

00010ffc <abort@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #200]!	; 0xc8

00011008 <__assert_fail@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #192]!	; 0xc0

Disassembly of section .text:

00011014 <.text>:
   11014:	mov	fp, #0
   11018:	mov	lr, #0
   1101c:	pop	{r1}		; (ldr r1, [sp], #4)
   11020:	mov	r2, sp
   11024:	push	{r2}		; (str r2, [sp, #-4]!)
   11028:	push	{r0}		; (str r0, [sp, #-4]!)
   1102c:	ldr	ip, [pc, #16]	; 11044 <__assert_fail@plt+0x3c>
   11030:	push	{ip}		; (str ip, [sp, #-4]!)
   11034:	ldr	r0, [pc, #12]	; 11048 <__assert_fail@plt+0x40>
   11038:	ldr	r3, [pc, #12]	; 1104c <__assert_fail@plt+0x44>
   1103c:	bl	10ee8 <__libc_start_main@plt>
   11040:	bl	10ffc <abort@plt>
   11044:	andeq	r5, r1, r0, ror r6
   11048:	andeq	r1, r1, r4, ror #6
   1104c:	andeq	r5, r1, r0, lsl r6
   11050:	ldr	r3, [pc, #20]	; 1106c <__assert_fail@plt+0x64>
   11054:	ldr	r2, [pc, #20]	; 11070 <__assert_fail@plt+0x68>
   11058:	add	r3, pc, r3
   1105c:	ldr	r2, [r3, r2]
   11060:	cmp	r2, #0
   11064:	bxeq	lr
   11068:	b	10f00 <__gmon_start__@plt>
   1106c:	andeq	r5, r1, r0, lsr #31
   11070:	ldrdeq	r0, [r0], -r4
   11074:	ldr	r0, [pc, #24]	; 11094 <__assert_fail@plt+0x8c>
   11078:	ldr	r3, [pc, #24]	; 11098 <__assert_fail@plt+0x90>
   1107c:	cmp	r3, r0
   11080:	bxeq	lr
   11084:	ldr	r3, [pc, #16]	; 1109c <__assert_fail@plt+0x94>
   11088:	cmp	r3, #0
   1108c:	bxeq	lr
   11090:	bx	r3
   11094:	andeq	r7, r2, r8, lsr #2
   11098:	andeq	r7, r2, r8, lsr #2
   1109c:	andeq	r0, r0, r0
   110a0:	ldr	r0, [pc, #36]	; 110cc <__assert_fail@plt+0xc4>
   110a4:	ldr	r1, [pc, #36]	; 110d0 <__assert_fail@plt+0xc8>
   110a8:	sub	r1, r1, r0
   110ac:	asr	r1, r1, #2
   110b0:	add	r1, r1, r1, lsr #31
   110b4:	asrs	r1, r1, #1
   110b8:	bxeq	lr
   110bc:	ldr	r3, [pc, #16]	; 110d4 <__assert_fail@plt+0xcc>
   110c0:	cmp	r3, #0
   110c4:	bxeq	lr
   110c8:	bx	r3
   110cc:	andeq	r7, r2, r8, lsr #2
   110d0:	andeq	r7, r2, r8, lsr #2
   110d4:	andeq	r0, r0, r0
   110d8:	push	{r4, lr}
   110dc:	ldr	r4, [pc, #24]	; 110fc <__assert_fail@plt+0xf4>
   110e0:	ldrb	r3, [r4]
   110e4:	cmp	r3, #0
   110e8:	popne	{r4, pc}
   110ec:	bl	11074 <__assert_fail@plt+0x6c>
   110f0:	mov	r3, #1
   110f4:	strb	r3, [r4]
   110f8:	pop	{r4, pc}
   110fc:	andeq	r7, r2, r4, asr #2
   11100:	b	110a0 <__assert_fail@plt+0x98>
   11104:	push	{fp, lr}
   11108:	mov	fp, sp
   1110c:	sub	sp, sp, #56	; 0x38
   11110:	mov	r4, r0
   11114:	cmp	r0, #0
   11118:	bne	11320 <__assert_fail@plt+0x318>
   1111c:	movw	r1, #22211	; 0x56c3
   11120:	mov	r0, #0
   11124:	mov	r2, #5
   11128:	movt	r1, #1
   1112c:	bl	10e4c <dcgettext@plt>
   11130:	mov	r1, r0
   11134:	movw	r0, #29008	; 0x7150
   11138:	movt	r0, #2
   1113c:	ldr	r2, [r0]
   11140:	mov	r0, #1
   11144:	bl	10f78 <__printf_chk@plt>
   11148:	movw	r1, #22234	; 0x56da
   1114c:	mov	r0, #0
   11150:	mov	r2, #5
   11154:	movt	r1, #1
   11158:	bl	10e4c <dcgettext@plt>
   1115c:	movw	r7, #28988	; 0x713c
   11160:	movt	r7, #2
   11164:	ldr	r1, [r7]
   11168:	bl	10dc8 <fputs_unlocked@plt>
   1116c:	movw	r1, #22362	; 0x575a
   11170:	mov	r0, #0
   11174:	mov	r2, #5
   11178:	movt	r1, #1
   1117c:	bl	10e4c <dcgettext@plt>
   11180:	ldr	r1, [r7]
   11184:	bl	10dc8 <fputs_unlocked@plt>
   11188:	movw	r1, #22479	; 0x57cf
   1118c:	mov	r0, #0
   11190:	mov	r2, #5
   11194:	movt	r1, #1
   11198:	bl	10e4c <dcgettext@plt>
   1119c:	ldr	r1, [r7]
   111a0:	bl	10dc8 <fputs_unlocked@plt>
   111a4:	movw	r1, #22524	; 0x57fc
   111a8:	mov	r0, #0
   111ac:	mov	r2, #5
   111b0:	movt	r1, #1
   111b4:	bl	10e4c <dcgettext@plt>
   111b8:	ldr	r1, [r7]
   111bc:	bl	10dc8 <fputs_unlocked@plt>
   111c0:	movw	r0, #23096	; 0x5a38
   111c4:	mov	r2, #48	; 0x30
   111c8:	mov	r6, sp
   111cc:	movw	r5, #22578	; 0x5832
   111d0:	movt	r0, #1
   111d4:	movt	r5, #1
   111d8:	add	r1, r0, #32
   111dc:	add	r3, r0, #16
   111e0:	vld1.64	{d18-d19}, [r0], r2
   111e4:	vld1.64	{d16-d17}, [r1]
   111e8:	vld1.64	{d20-d21}, [r3]
   111ec:	add	r1, r6, #32
   111f0:	vldr	d22, [r0]
   111f4:	add	r0, r6, #16
   111f8:	vst1.64	{d16-d17}, [r1]
   111fc:	movw	r1, #22677	; 0x5895
   11200:	vst1.64	{d20-d21}, [r0]
   11204:	mov	r0, r6
   11208:	vst1.64	{d18-d19}, [r0], r2
   1120c:	movt	r1, #1
   11210:	vstr	d22, [r0]
   11214:	mov	r0, r5
   11218:	bl	10de0 <strcmp@plt>
   1121c:	cmp	r0, #0
   11220:	ldrne	r1, [r6, #8]!
   11224:	cmpne	r1, #0
   11228:	bne	11214 <__assert_fail@plt+0x20c>
   1122c:	ldr	r6, [r6, #4]
   11230:	movw	r1, #22772	; 0x58f4
   11234:	mov	r0, #0
   11238:	mov	r2, #5
   1123c:	movt	r1, #1
   11240:	bl	10e4c <dcgettext@plt>
   11244:	movw	r2, #22608	; 0x5850
   11248:	movw	r3, #22795	; 0x590b
   1124c:	mov	r1, r0
   11250:	mov	r0, #1
   11254:	movt	r2, #1
   11258:	movt	r3, #1
   1125c:	bl	10f78 <__printf_chk@plt>
   11260:	cmp	r6, #0
   11264:	mov	r0, #5
   11268:	mov	r1, #0
   1126c:	moveq	r6, r5
   11270:	bl	10fb4 <setlocale@plt>
   11274:	cmp	r0, #0
   11278:	beq	112b0 <__assert_fail@plt+0x2a8>
   1127c:	movw	r1, #22835	; 0x5933
   11280:	mov	r2, #3
   11284:	movt	r1, #1
   11288:	bl	10ff0 <strncmp@plt>
   1128c:	cmp	r0, #0
   11290:	beq	112b0 <__assert_fail@plt+0x2a8>
   11294:	movw	r1, #22839	; 0x5937
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10e4c <dcgettext@plt>
   112a8:	ldr	r1, [r7]
   112ac:	bl	10dc8 <fputs_unlocked@plt>
   112b0:	movw	r1, #22910	; 0x597e
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10e4c <dcgettext@plt>
   112c4:	movw	r2, #22795	; 0x590b
   112c8:	mov	r1, r0
   112cc:	mov	r0, #1
   112d0:	mov	r3, r5
   112d4:	movt	r2, #1
   112d8:	bl	10f78 <__printf_chk@plt>
   112dc:	movw	r1, #22937	; 0x5999
   112e0:	mov	r0, #0
   112e4:	mov	r2, #5
   112e8:	movt	r1, #1
   112ec:	bl	10e4c <dcgettext@plt>
   112f0:	movw	r3, #22361	; 0x5759
   112f4:	mov	r1, r0
   112f8:	movw	r0, #22705	; 0x58b1
   112fc:	cmp	r6, r5
   11300:	mov	r2, r6
   11304:	movt	r0, #1
   11308:	movt	r3, #1
   1130c:	moveq	r3, r0
   11310:	mov	r0, #1
   11314:	bl	10f78 <__printf_chk@plt>
   11318:	mov	r0, r4
   1131c:	bl	10f24 <exit@plt>
   11320:	movw	r0, #28984	; 0x7138
   11324:	movw	r1, #22172	; 0x569c
   11328:	mov	r2, #5
   1132c:	movt	r0, #2
   11330:	movt	r1, #1
   11334:	ldr	r5, [r0]
   11338:	mov	r0, #0
   1133c:	bl	10e4c <dcgettext@plt>
   11340:	mov	r2, r0
   11344:	movw	r0, #29008	; 0x7150
   11348:	mov	r1, #1
   1134c:	movt	r0, #2
   11350:	ldr	r3, [r0]
   11354:	mov	r0, r5
   11358:	bl	10f90 <__fprintf_chk@plt>
   1135c:	mov	r0, r4
   11360:	bl	10f24 <exit@plt>
   11364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11368:	add	fp, sp, #28
   1136c:	sub	sp, sp, #20
   11370:	mov	r5, r0
   11374:	ldr	r0, [r1]
   11378:	mov	r4, r1
   1137c:	bl	1183c <__assert_fail@plt+0x834>
   11380:	movw	sl, #22361	; 0x5759
   11384:	mov	r0, #6
   11388:	movt	sl, #1
   1138c:	mov	r1, sl
   11390:	bl	10fb4 <setlocale@plt>
   11394:	movw	r6, #22612	; 0x5854
   11398:	movw	r1, #22584	; 0x5838
   1139c:	movt	r6, #1
   113a0:	movt	r1, #1
   113a4:	mov	r0, r6
   113a8:	bl	10fe4 <bindtextdomain@plt>
   113ac:	mov	r0, r6
   113b0:	bl	10e70 <textdomain@plt>
   113b4:	movw	r0, #5496	; 0x1578
   113b8:	movt	r0, #1
   113bc:	bl	15674 <__assert_fail@plt+0x466c>
   113c0:	movw	r8, #23016	; 0x59e8
   113c4:	mov	r7, #2
   113c8:	mov	r6, #0
   113cc:	movt	r8, #1
   113d0:	b	11424 <__assert_fail@plt+0x41c>
   113d4:	movw	r0, #28992	; 0x7140
   113d8:	movw	r1, #22640	; 0x5870
   113dc:	mov	r2, #5
   113e0:	movt	r0, #2
   113e4:	movt	r1, #1
   113e8:	ldr	r6, [r0]
   113ec:	mov	r0, #0
   113f0:	bl	10e4c <dcgettext@plt>
   113f4:	mvn	r1, #0
   113f8:	mov	r2, #0
   113fc:	mov	r3, #0
   11400:	str	r1, [sp]
   11404:	mov	r1, #0
   11408:	stmib	sp, {r1, sl}
   1140c:	str	r0, [sp, #12]
   11410:	mov	r0, r6
   11414:	str	r1, [sp, #16]
   11418:	bl	142f8 <__assert_fail@plt+0x32f0>
   1141c:	mov	r6, r0
   11420:	mov	r7, r9
   11424:	mov	r9, r7
   11428:	mov	r7, #0
   1142c:	mov	r0, r5
   11430:	mov	r1, r4
   11434:	mov	r2, sl
   11438:	mov	r3, r8
   1143c:	str	r7, [sp]
   11440:	bl	10f0c <getopt_long@plt>
   11444:	cmp	r0, #255	; 0xff
   11448:	ble	11464 <__assert_fail@plt+0x45c>
   1144c:	cmp	r0, #256	; 0x100
   11450:	beq	11424 <__assert_fail@plt+0x41c>
   11454:	movw	r1, #257	; 0x101
   11458:	cmp	r0, r1
   1145c:	beq	113d4 <__assert_fail@plt+0x3cc>
   11460:	b	11550 <__assert_fail@plt+0x548>
   11464:	cmn	r0, #1
   11468:	bne	114b0 <__assert_fail@plt+0x4a8>
   1146c:	movw	r7, #28976	; 0x7130
   11470:	movt	r7, #2
   11474:	ldr	r0, [r7]
   11478:	cmp	r0, r5
   1147c:	bne	11510 <__assert_fail@plt+0x508>
   11480:	mov	r0, r9
   11484:	bl	11660 <__assert_fail@plt+0x658>
   11488:	movw	r1, #22672	; 0x5890
   1148c:	subs	r2, r0, r6
   11490:	mov	r0, #1
   11494:	movls	r2, r0
   11498:	movt	r1, #1
   1149c:	mov	r0, #1
   114a0:	bl	10f78 <__printf_chk@plt>
   114a4:	mov	r0, #0
   114a8:	sub	sp, fp, #28
   114ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114b0:	cmn	r0, #3
   114b4:	bne	11500 <__assert_fail@plt+0x4f8>
   114b8:	movw	r0, #28896	; 0x70e0
   114bc:	movw	r2, #22622	; 0x585e
   114c0:	mov	r1, #0
   114c4:	movt	r0, #2
   114c8:	movt	r2, #1
   114cc:	str	r1, [sp, #4]
   114d0:	movw	r1, #22578	; 0x5832
   114d4:	ldr	r3, [r0]
   114d8:	movw	r0, #28988	; 0x713c
   114dc:	str	r2, [sp]
   114e0:	movw	r2, #22608	; 0x5850
   114e4:	movt	r1, #1
   114e8:	movt	r0, #2
   114ec:	movt	r2, #1
   114f0:	ldr	r0, [r0]
   114f4:	bl	13a2c <__assert_fail@plt+0x2a24>
   114f8:	mov	r0, #0
   114fc:	bl	10f24 <exit@plt>
   11500:	cmn	r0, #2
   11504:	bne	11550 <__assert_fail@plt+0x548>
   11508:	mov	r0, #0
   1150c:	bl	11104 <__assert_fail@plt+0xfc>
   11510:	movw	r1, #22655	; 0x587f
   11514:	mov	r0, #0
   11518:	mov	r2, #5
   1151c:	movt	r1, #1
   11520:	bl	10e4c <dcgettext@plt>
   11524:	mov	r5, r0
   11528:	ldr	r0, [r7]
   1152c:	ldr	r0, [r4, r0, lsl #2]
   11530:	bl	13470 <__assert_fail@plt+0x2468>
   11534:	mov	r3, r0
   11538:	mov	r0, #0
   1153c:	mov	r1, #0
   11540:	mov	r2, r5
   11544:	bl	10ec4 <error@plt>
   11548:	mov	r0, #1
   1154c:	bl	11104 <__assert_fail@plt+0xfc>
   11550:	mov	r0, #1
   11554:	bl	11104 <__assert_fail@plt+0xfc>
   11558:	movw	r1, #29000	; 0x7148
   1155c:	movt	r1, #2
   11560:	str	r0, [r1]
   11564:	bx	lr
   11568:	movw	r1, #29004	; 0x714c
   1156c:	movt	r1, #2
   11570:	strb	r0, [r1]
   11574:	bx	lr
   11578:	push	{r4, r5, r6, sl, fp, lr}
   1157c:	add	fp, sp, #16
   11580:	sub	sp, sp, #8
   11584:	movw	r0, #28988	; 0x713c
   11588:	movt	r0, #2
   1158c:	ldr	r0, [r0]
   11590:	bl	15078 <__assert_fail@plt+0x4070>
   11594:	cmp	r0, #0
   11598:	beq	115c0 <__assert_fail@plt+0x5b8>
   1159c:	movw	r0, #29004	; 0x714c
   115a0:	movt	r0, #2
   115a4:	ldrb	r0, [r0]
   115a8:	cmp	r0, #0
   115ac:	beq	115e0 <__assert_fail@plt+0x5d8>
   115b0:	bl	10f54 <__errno_location@plt>
   115b4:	ldr	r0, [r0]
   115b8:	cmp	r0, #32
   115bc:	bne	115e0 <__assert_fail@plt+0x5d8>
   115c0:	movw	r0, #28984	; 0x7138
   115c4:	movt	r0, #2
   115c8:	ldr	r0, [r0]
   115cc:	bl	15078 <__assert_fail@plt+0x4070>
   115d0:	cmp	r0, #0
   115d4:	subeq	sp, fp, #16
   115d8:	popeq	{r4, r5, r6, sl, fp, pc}
   115dc:	b	11650 <__assert_fail@plt+0x648>
   115e0:	movw	r1, #23167	; 0x5a7f
   115e4:	mov	r0, #0
   115e8:	mov	r2, #5
   115ec:	movt	r1, #1
   115f0:	bl	10e4c <dcgettext@plt>
   115f4:	mov	r4, r0
   115f8:	movw	r0, #29000	; 0x7148
   115fc:	movt	r0, #2
   11600:	ldr	r6, [r0]
   11604:	bl	10f54 <__errno_location@plt>
   11608:	ldr	r5, [r0]
   1160c:	cmp	r6, #0
   11610:	bne	1162c <__assert_fail@plt+0x624>
   11614:	movw	r2, #23183	; 0x5a8f
   11618:	mov	r0, #0
   1161c:	mov	r1, r5
   11620:	mov	r3, r4
   11624:	movt	r2, #1
   11628:	b	1164c <__assert_fail@plt+0x644>
   1162c:	mov	r0, r6
   11630:	bl	130e8 <__assert_fail@plt+0x20e0>
   11634:	movw	r2, #23179	; 0x5a8b
   11638:	mov	r3, r0
   1163c:	str	r4, [sp]
   11640:	mov	r0, #0
   11644:	mov	r1, r5
   11648:	movt	r2, #1
   1164c:	bl	10ec4 <error@plt>
   11650:	movw	r0, #28900	; 0x70e4
   11654:	movt	r0, #2
   11658:	ldr	r0, [r0]
   1165c:	bl	10e04 <_exit@plt>
   11660:	push	{r4, r5, fp, lr}
   11664:	add	fp, sp, #8
   11668:	sub	sp, sp, #128	; 0x80
   1166c:	mvn	r4, #0
   11670:	cmp	r0, #2
   11674:	bne	116c4 <__assert_fail@plt+0x6bc>
   11678:	movw	r0, #23186	; 0x5a92
   1167c:	movt	r0, #1
   11680:	bl	10ed0 <getenv@plt>
   11684:	bl	1178c <__assert_fail@plt+0x784>
   11688:	mov	r5, r0
   1168c:	movw	r0, #23202	; 0x5aa2
   11690:	movt	r0, #1
   11694:	bl	10ed0 <getenv@plt>
   11698:	bl	1178c <__assert_fail@plt+0x784>
   1169c:	mov	r1, r0
   116a0:	cmp	r0, #0
   116a4:	mvneq	r1, #0
   116a8:	cmp	r5, r1
   116ac:	mov	r4, r1
   116b0:	movcc	r4, r5
   116b4:	cmp	r5, #0
   116b8:	bne	11780 <__assert_fail@plt+0x778>
   116bc:	mov	r0, #1
   116c0:	mov	r4, r1
   116c4:	cmp	r0, #1
   116c8:	bne	116fc <__assert_fail@plt+0x6f4>
   116cc:	mov	r2, sp
   116d0:	mov	r0, #0
   116d4:	mov	r1, #128	; 0x80
   116d8:	bl	10fd8 <sched_getaffinity@plt>
   116dc:	cmp	r0, #0
   116e0:	beq	11760 <__assert_fail@plt+0x758>
   116e4:	mov	r0, #84	; 0x54
   116e8:	bl	10e58 <sysconf@plt>
   116ec:	mov	r5, r0
   116f0:	cmp	r0, #0
   116f4:	movle	r5, #1
   116f8:	b	11778 <__assert_fail@plt+0x770>
   116fc:	mov	r0, #83	; 0x53
   11700:	bl	10e58 <sysconf@plt>
   11704:	mov	r5, r0
   11708:	sub	r0, r0, #1
   1170c:	cmp	r0, #1
   11710:	bhi	11748 <__assert_fail@plt+0x740>
   11714:	mov	r2, sp
   11718:	mov	r0, #0
   1171c:	mov	r1, #128	; 0x80
   11720:	bl	10fd8 <sched_getaffinity@plt>
   11724:	cmp	r0, #0
   11728:	bne	11778 <__assert_fail@plt+0x770>
   1172c:	mov	r1, sp
   11730:	mov	r0, #128	; 0x80
   11734:	bl	10e34 <__sched_cpucount@plt>
   11738:	cmp	r0, #0
   1173c:	cmpne	r0, r5
   11740:	bls	11778 <__assert_fail@plt+0x770>
   11744:	b	1174c <__assert_fail@plt+0x744>
   11748:	mov	r0, r5
   1174c:	cmp	r0, #0
   11750:	mov	r5, r0
   11754:	bgt	11778 <__assert_fail@plt+0x770>
   11758:	mov	r5, #1
   1175c:	b	11778 <__assert_fail@plt+0x770>
   11760:	mov	r1, sp
   11764:	mov	r0, #128	; 0x80
   11768:	bl	10e34 <__sched_cpucount@plt>
   1176c:	cmp	r0, #0
   11770:	beq	116e4 <__assert_fail@plt+0x6dc>
   11774:	mov	r5, r0
   11778:	cmp	r5, r4
   1177c:	movcc	r4, r5
   11780:	mov	r0, r4
   11784:	sub	sp, fp, #8
   11788:	pop	{r4, r5, fp, pc}
   1178c:	push	{fp, lr}
   11790:	mov	fp, sp
   11794:	sub	sp, sp, #8
   11798:	mov	r2, r0
   1179c:	mov	r0, #0
   117a0:	cmp	r2, #0
   117a4:	bne	117b0 <__assert_fail@plt+0x7a8>
   117a8:	b	11824 <__assert_fail@plt+0x81c>
   117ac:	add	r2, r2, #1
   117b0:	ldrb	r1, [r2]
   117b4:	sub	r3, r1, #9
   117b8:	cmp	r3, #5
   117bc:	bcc	117ac <__assert_fail@plt+0x7a4>
   117c0:	cmp	r1, #32
   117c4:	beq	117ac <__assert_fail@plt+0x7a4>
   117c8:	sub	r1, r1, #48	; 0x30
   117cc:	cmp	r1, #9
   117d0:	bhi	11824 <__assert_fail@plt+0x81c>
   117d4:	mov	r0, #0
   117d8:	add	r1, sp, #4
   117dc:	str	r0, [sp, #4]
   117e0:	mov	r0, r2
   117e4:	mov	r2, #10
   117e8:	bl	10f30 <strtoul@plt>
   117ec:	ldr	r1, [sp, #4]
   117f0:	cmp	r1, #0
   117f4:	bne	11800 <__assert_fail@plt+0x7f8>
   117f8:	b	11830 <__assert_fail@plt+0x828>
   117fc:	add	r1, r1, #1
   11800:	ldrb	r2, [r1]
   11804:	sub	r3, r2, #9
   11808:	cmp	r3, #5
   1180c:	bcc	117fc <__assert_fail@plt+0x7f4>
   11810:	cmp	r2, #32
   11814:	beq	117fc <__assert_fail@plt+0x7f4>
   11818:	cmp	r2, #0
   1181c:	cmpne	r2, #44	; 0x2c
   11820:	bne	1182c <__assert_fail@plt+0x824>
   11824:	mov	sp, fp
   11828:	pop	{fp, pc}
   1182c:	str	r1, [sp, #4]
   11830:	mov	r0, #0
   11834:	mov	sp, fp
   11838:	pop	{fp, pc}
   1183c:	push	{r4, r5, fp, lr}
   11840:	add	fp, sp, #8
   11844:	cmp	r0, #0
   11848:	beq	118dc <__assert_fail@plt+0x8d4>
   1184c:	mov	r1, #47	; 0x2f
   11850:	mov	r4, r0
   11854:	bl	10fc0 <strrchr@plt>
   11858:	cmp	r0, #0
   1185c:	mov	r5, r4
   11860:	addne	r5, r0, #1
   11864:	sub	r0, r5, r4
   11868:	cmp	r0, #7
   1186c:	blt	118c0 <__assert_fail@plt+0x8b8>
   11870:	movw	r1, #23275	; 0x5aeb
   11874:	sub	r0, r5, #7
   11878:	mov	r2, #7
   1187c:	movt	r1, #1
   11880:	bl	10ff0 <strncmp@plt>
   11884:	cmp	r0, #0
   11888:	bne	118c0 <__assert_fail@plt+0x8b8>
   1188c:	movw	r1, #23283	; 0x5af3
   11890:	mov	r0, r5
   11894:	mov	r2, #3
   11898:	movt	r1, #1
   1189c:	bl	10ff0 <strncmp@plt>
   118a0:	cmp	r0, #0
   118a4:	beq	118b0 <__assert_fail@plt+0x8a8>
   118a8:	mov	r4, r5
   118ac:	b	118c0 <__assert_fail@plt+0x8b8>
   118b0:	movw	r0, #28968	; 0x7128
   118b4:	add	r4, r5, #3
   118b8:	movt	r0, #2
   118bc:	str	r4, [r0]
   118c0:	movw	r0, #28972	; 0x712c
   118c4:	movt	r0, #2
   118c8:	str	r4, [r0]
   118cc:	movw	r0, #29008	; 0x7150
   118d0:	movt	r0, #2
   118d4:	str	r4, [r0]
   118d8:	pop	{r4, r5, fp, pc}
   118dc:	movw	r0, #28984	; 0x7138
   118e0:	mov	r1, #55	; 0x37
   118e4:	mov	r2, #1
   118e8:	movt	r0, #2
   118ec:	ldr	r3, [r0]
   118f0:	movw	r0, #23219	; 0x5ab3
   118f4:	movt	r0, #1
   118f8:	bl	10e88 <fwrite@plt>
   118fc:	bl	10ffc <abort@plt>
   11900:	push	{r4, r5, r6, sl, fp, lr}
   11904:	add	fp, sp, #16
   11908:	mov	r4, r0
   1190c:	movw	r0, #29016	; 0x7158
   11910:	movt	r0, #2
   11914:	cmp	r4, #0
   11918:	moveq	r4, r0
   1191c:	bl	10f54 <__errno_location@plt>
   11920:	ldr	r6, [r0]
   11924:	mov	r5, r0
   11928:	mov	r0, r4
   1192c:	mov	r1, #48	; 0x30
   11930:	bl	140c0 <__assert_fail@plt+0x30b8>
   11934:	str	r6, [r5]
   11938:	pop	{r4, r5, r6, sl, fp, pc}
   1193c:	movw	r1, #29016	; 0x7158
   11940:	cmp	r0, #0
   11944:	movt	r1, #2
   11948:	movne	r1, r0
   1194c:	ldr	r0, [r1]
   11950:	bx	lr
   11954:	movw	r2, #29016	; 0x7158
   11958:	cmp	r0, #0
   1195c:	movt	r2, #2
   11960:	movne	r2, r0
   11964:	str	r1, [r2]
   11968:	bx	lr
   1196c:	movw	r3, #29016	; 0x7158
   11970:	cmp	r0, #0
   11974:	movt	r3, #2
   11978:	movne	r3, r0
   1197c:	ubfx	r0, r1, #5, #3
   11980:	and	r1, r1, #31
   11984:	add	r0, r3, r0, lsl #2
   11988:	ldr	r3, [r0, #8]
   1198c:	eor	r2, r2, r3, lsr r1
   11990:	and	r2, r2, #1
   11994:	eor	r2, r3, r2, lsl r1
   11998:	str	r2, [r0, #8]
   1199c:	mov	r0, #1
   119a0:	and	r0, r0, r3, lsr r1
   119a4:	bx	lr
   119a8:	movw	r2, #29016	; 0x7158
   119ac:	cmp	r0, #0
   119b0:	movt	r2, #2
   119b4:	movne	r2, r0
   119b8:	ldr	r0, [r2, #4]
   119bc:	str	r1, [r2, #4]
   119c0:	bx	lr
   119c4:	movw	r3, #29016	; 0x7158
   119c8:	cmp	r0, #0
   119cc:	movt	r3, #2
   119d0:	movne	r3, r0
   119d4:	cmp	r1, #0
   119d8:	mov	r0, #10
   119dc:	cmpne	r2, #0
   119e0:	str	r0, [r3]
   119e4:	bne	119f4 <__assert_fail@plt+0x9ec>
   119e8:	push	{fp, lr}
   119ec:	mov	fp, sp
   119f0:	bl	10ffc <abort@plt>
   119f4:	str	r1, [r3, #40]	; 0x28
   119f8:	str	r2, [r3, #44]	; 0x2c
   119fc:	bx	lr
   11a00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a04:	add	fp, sp, #28
   11a08:	sub	sp, sp, #20
   11a0c:	mov	r7, r0
   11a10:	ldr	r0, [fp, #8]
   11a14:	movw	r5, #29016	; 0x7158
   11a18:	mov	r8, r3
   11a1c:	mov	r9, r2
   11a20:	mov	sl, r1
   11a24:	movt	r5, #2
   11a28:	cmp	r0, #0
   11a2c:	movne	r5, r0
   11a30:	bl	10f54 <__errno_location@plt>
   11a34:	mov	r4, r0
   11a38:	ldm	r5, {r0, r1}
   11a3c:	ldr	r2, [r5, #40]	; 0x28
   11a40:	ldr	r3, [r5, #44]	; 0x2c
   11a44:	add	r5, r5, #8
   11a48:	ldr	r6, [r4]
   11a4c:	stm	sp, {r0, r1, r5}
   11a50:	str	r2, [sp, #12]
   11a54:	str	r3, [sp, #16]
   11a58:	mov	r0, r7
   11a5c:	mov	r1, sl
   11a60:	mov	r2, r9
   11a64:	mov	r3, r8
   11a68:	bl	11a78 <__assert_fail@plt+0xa70>
   11a6c:	str	r6, [r4]
   11a70:	sub	sp, fp, #28
   11a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a7c:	add	fp, sp, #28
   11a80:	sub	sp, sp, #156	; 0x9c
   11a84:	str	r0, [sp, #80]	; 0x50
   11a88:	ldr	r0, [fp, #12]
   11a8c:	mov	r6, r1
   11a90:	mov	r9, r3
   11a94:	str	r2, [fp, #-84]	; 0xffffffac
   11a98:	and	r1, r0, #4
   11a9c:	str	r1, [sp, #32]
   11aa0:	and	r1, r0, #1
   11aa4:	str	r1, [sp, #36]	; 0x24
   11aa8:	ubfx	r4, r0, #1, #1
   11aac:	bl	10ea0 <__ctype_get_mb_cur_max@plt>
   11ab0:	str	r0, [sp, #40]	; 0x28
   11ab4:	ldr	r0, [fp, #24]
   11ab8:	ldr	r7, [fp, #8]
   11abc:	mov	r1, #0
   11ac0:	mov	r5, #1
   11ac4:	str	r1, [fp, #-56]	; 0xffffffc8
   11ac8:	mov	r1, #0
   11acc:	str	r1, [sp, #60]	; 0x3c
   11ad0:	str	r0, [sp, #76]	; 0x4c
   11ad4:	ldr	r0, [fp, #20]
   11ad8:	str	r0, [sp, #72]	; 0x48
   11adc:	mov	r0, #0
   11ae0:	str	r0, [sp, #56]	; 0x38
   11ae4:	mov	r0, #0
   11ae8:	str	r0, [sp, #92]	; 0x5c
   11aec:	mov	r0, #0
   11af0:	str	r0, [fp, #-76]	; 0xffffffb4
   11af4:	mov	r0, #0
   11af8:	cmp	r7, #10
   11afc:	bhi	12a7c <__assert_fail@plt+0x1a74>
   11b00:	add	r1, pc, #28
   11b04:	mov	sl, r6
   11b08:	ldr	r6, [sp, #80]	; 0x50
   11b0c:	ldr	ip, [fp, #-84]	; 0xffffffac
   11b10:	mov	r8, #0
   11b14:	mov	r2, #1
   11b18:	mov	r3, #0
   11b1c:	mov	lr, r9
   11b20:	ldr	pc, [r1, r7, lsl #2]
   11b24:	andeq	r1, r1, r8, lsl #24
   11b28:	andeq	r1, r1, r4, lsr ip
   11b2c:	strdeq	r1, [r1], -r8
   11b30:	strdeq	r1, [r1], -r0
   11b34:	andeq	r1, r1, r8, lsr #24
   11b38:	andeq	r1, r1, ip, ror ip
   11b3c:	andeq	r1, r1, r8, lsl ip
   11b40:	ldrdeq	r1, [r1], -r8
   11b44:	andeq	r1, r1, r0, asr fp
   11b48:	andeq	r1, r1, r0, asr fp
   11b4c:	andeq	r1, r1, r8, ror fp
   11b50:	movw	r0, #23365	; 0x5b45
   11b54:	mov	r1, r7
   11b58:	movt	r0, #1
   11b5c:	bl	13488 <__assert_fail@plt+0x2480>
   11b60:	str	r0, [sp, #72]	; 0x48
   11b64:	movw	r0, #23367	; 0x5b47
   11b68:	mov	r1, r7
   11b6c:	movt	r0, #1
   11b70:	bl	13488 <__assert_fail@plt+0x2480>
   11b74:	str	r0, [sp, #76]	; 0x4c
   11b78:	str	r5, [fp, #-48]	; 0xffffffd0
   11b7c:	mov	r8, #0
   11b80:	mov	r5, r7
   11b84:	tst	r4, #1
   11b88:	bne	11bc0 <__assert_fail@plt+0xbb8>
   11b8c:	ldr	r0, [sp, #72]	; 0x48
   11b90:	ldrb	r0, [r0]
   11b94:	cmp	r0, #0
   11b98:	beq	11bc0 <__assert_fail@plt+0xbb8>
   11b9c:	ldr	r1, [sp, #72]	; 0x48
   11ba0:	mov	r8, #0
   11ba4:	add	r1, r1, #1
   11ba8:	cmp	r8, sl
   11bac:	strbcc	r0, [r6, r8]
   11bb0:	ldrb	r0, [r1, r8]
   11bb4:	add	r8, r8, #1
   11bb8:	cmp	r0, #0
   11bbc:	bne	11ba8 <__assert_fail@plt+0xba0>
   11bc0:	ldr	r7, [sp, #76]	; 0x4c
   11bc4:	mov	r0, r7
   11bc8:	bl	10f3c <strlen@plt>
   11bcc:	str	r7, [sp, #92]	; 0x5c
   11bd0:	mov	r7, r5
   11bd4:	ldr	ip, [fp, #-84]	; 0xffffffac
   11bd8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   11bdc:	str	r0, [fp, #-76]	; 0xffffffb4
   11be0:	mov	r2, #1
   11be4:	mov	r3, r4
   11be8:	mov	lr, r9
   11bec:	b	11cd8 <__assert_fail@plt+0xcd0>
   11bf0:	mov	r0, #1
   11bf4:	b	11c34 <__assert_fail@plt+0xc2c>
   11bf8:	tst	r4, #1
   11bfc:	bne	11c34 <__assert_fail@plt+0xc2c>
   11c00:	mov	r2, r0
   11c04:	b	11c5c <__assert_fail@plt+0xc54>
   11c08:	mov	r7, #0
   11c0c:	mov	r8, #0
   11c10:	mov	r2, r0
   11c14:	b	11cd4 <__assert_fail@plt+0xccc>
   11c18:	mov	r0, #1
   11c1c:	mov	r8, #0
   11c20:	mov	r7, #5
   11c24:	b	11c90 <__assert_fail@plt+0xc88>
   11c28:	mov	r2, #1
   11c2c:	tst	r4, #1
   11c30:	beq	11c5c <__assert_fail@plt+0xc54>
   11c34:	mov	r1, #1
   11c38:	mov	r8, #0
   11c3c:	mov	r7, #2
   11c40:	mov	r2, r0
   11c44:	mov	r3, #1
   11c48:	str	r1, [fp, #-76]	; 0xffffffb4
   11c4c:	movw	r1, #23367	; 0x5b47
   11c50:	movt	r1, #1
   11c54:	str	r1, [sp, #92]	; 0x5c
   11c58:	b	11cd8 <__assert_fail@plt+0xcd0>
   11c5c:	cmp	sl, #0
   11c60:	mov	r8, #1
   11c64:	mov	r7, #2
   11c68:	movne	r0, #39	; 0x27
   11c6c:	strbne	r0, [r6]
   11c70:	movw	r0, #23367	; 0x5b47
   11c74:	movt	r0, #1
   11c78:	b	11cc8 <__assert_fail@plt+0xcc0>
   11c7c:	mov	r7, #5
   11c80:	tst	r4, #1
   11c84:	beq	11cac <__assert_fail@plt+0xca4>
   11c88:	mov	r0, #1
   11c8c:	mov	r8, #0
   11c90:	str	r0, [fp, #-76]	; 0xffffffb4
   11c94:	movw	r0, #23363	; 0x5b43
   11c98:	mov	r2, #1
   11c9c:	mov	r3, #1
   11ca0:	movt	r0, #1
   11ca4:	str	r0, [sp, #92]	; 0x5c
   11ca8:	b	11cd8 <__assert_fail@plt+0xcd0>
   11cac:	cmp	sl, #0
   11cb0:	mov	r8, #1
   11cb4:	mov	r2, #1
   11cb8:	movne	r0, #34	; 0x22
   11cbc:	strbne	r0, [r6]
   11cc0:	movw	r0, #23363	; 0x5b43
   11cc4:	movt	r0, #1
   11cc8:	str	r0, [sp, #92]	; 0x5c
   11ccc:	mov	r0, #1
   11cd0:	str	r0, [fp, #-76]	; 0xffffffb4
   11cd4:	mov	r3, #0
   11cd8:	ldr	r0, [fp, #16]
   11cdc:	str	r3, [fp, #-72]	; 0xffffffb8
   11ce0:	str	r7, [fp, #-64]	; 0xffffffc0
   11ce4:	str	r2, [sp, #84]	; 0x54
   11ce8:	cmp	r0, #0
   11cec:	movwne	r0, #1
   11cf0:	and	r0, r0, r3
   11cf4:	str	r0, [fp, #-88]	; 0xffffffa8
   11cf8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11cfc:	cmp	r0, #0
   11d00:	movwne	r0, #1
   11d04:	subs	r4, r7, #2
   11d08:	mov	r7, #0
   11d0c:	and	r1, r0, r3
   11d10:	str	r4, [fp, #-80]	; 0xffffffb0
   11d14:	and	r1, r2, r1
   11d18:	str	r1, [sp, #48]	; 0x30
   11d1c:	clz	r1, r4
   11d20:	lsr	r1, r1, #5
   11d24:	and	r1, r1, r3
   11d28:	eor	r3, r3, #1
   11d2c:	str	r1, [sp, #64]	; 0x40
   11d30:	mov	r1, r4
   11d34:	str	r3, [sp, #88]	; 0x58
   11d38:	movwne	r1, #1
   11d3c:	orr	r3, r1, r3
   11d40:	and	r1, r1, r2
   11d44:	and	r0, r0, r1
   11d48:	str	r3, [sp, #68]	; 0x44
   11d4c:	str	r1, [fp, #-68]	; 0xffffffbc
   11d50:	str	r0, [fp, #-60]	; 0xffffffc4
   11d54:	eor	r0, r2, #1
   11d58:	str	r0, [sp, #52]	; 0x34
   11d5c:	cmn	lr, #1
   11d60:	beq	11d70 <__assert_fail@plt+0xd68>
   11d64:	cmp	r7, lr
   11d68:	bne	11d7c <__assert_fail@plt+0xd74>
   11d6c:	b	128a4 <__assert_fail@plt+0x189c>
   11d70:	ldrb	r0, [ip, r7]
   11d74:	cmp	r0, #0
   11d78:	beq	128ac <__assert_fail@plt+0x18a4>
   11d7c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11d80:	mov	r9, #0
   11d84:	str	r5, [fp, #-48]	; 0xffffffd0
   11d88:	cmp	r0, #0
   11d8c:	beq	11dc0 <__assert_fail@plt+0xdb8>
   11d90:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11d94:	add	r4, r7, r0
   11d98:	cmp	r0, #2
   11d9c:	bcc	11db8 <__assert_fail@plt+0xdb0>
   11da0:	cmn	lr, #1
   11da4:	bne	11db8 <__assert_fail@plt+0xdb0>
   11da8:	mov	r0, ip
   11dac:	bl	10f3c <strlen@plt>
   11db0:	ldr	ip, [fp, #-84]	; 0xffffffac
   11db4:	mov	lr, r0
   11db8:	cmp	r4, lr
   11dbc:	bls	11dc8 <__assert_fail@plt+0xdc0>
   11dc0:	mov	r0, #0
   11dc4:	b	11e08 <__assert_fail@plt+0xe00>
   11dc8:	ldr	r1, [sp, #92]	; 0x5c
   11dcc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   11dd0:	add	r0, ip, r7
   11dd4:	mov	r4, lr
   11dd8:	bl	10e40 <memcmp@plt>
   11ddc:	ldr	r2, [sp, #88]	; 0x58
   11de0:	cmp	r0, #0
   11de4:	mov	r1, r0
   11de8:	movwne	r1, #1
   11dec:	orr	r1, r1, r2
   11df0:	tst	r1, #1
   11df4:	beq	1293c <__assert_fail@plt+0x1934>
   11df8:	ldr	ip, [fp, #-84]	; 0xffffffac
   11dfc:	clz	r0, r0
   11e00:	mov	lr, r4
   11e04:	lsr	r0, r0, #5
   11e08:	str	r0, [fp, #-52]	; 0xffffffcc
   11e0c:	ldrb	r5, [ip, r7]
   11e10:	cmp	r5, #126	; 0x7e
   11e14:	bhi	121cc <__assert_fail@plt+0x11c4>
   11e18:	add	r3, pc, #16
   11e1c:	mov	r4, #1
   11e20:	mov	r2, #110	; 0x6e
   11e24:	mov	r0, #97	; 0x61
   11e28:	mov	r1, #0
   11e2c:	ldr	pc, [r3, r5, lsl #2]
   11e30:	andeq	r2, r1, r8, asr #1
   11e34:	andeq	r2, r1, ip, asr #3
   11e38:	andeq	r2, r1, ip, asr #3
   11e3c:	andeq	r2, r1, ip, asr #3
   11e40:	andeq	r2, r1, ip, asr #3
   11e44:	andeq	r2, r1, ip, asr #3
   11e48:	andeq	r2, r1, ip, asr #3
   11e4c:	andeq	r2, r1, r0, lsl #5
   11e50:	andeq	r2, r1, r8, lsr #1
   11e54:	andeq	r2, r1, r0, lsr #1
   11e58:	strheq	r2, [r1], -r4
   11e5c:	andeq	r2, r1, r4, lsr r1
   11e60:	muleq	r1, r8, r0
   11e64:	strheq	r2, [r1], -r0
   11e68:	andeq	r2, r1, ip, asr #3
   11e6c:	andeq	r2, r1, ip, asr #3
   11e70:	andeq	r2, r1, ip, asr #3
   11e74:	andeq	r2, r1, ip, asr #3
   11e78:	andeq	r2, r1, ip, asr #3
   11e7c:	andeq	r2, r1, ip, asr #3
   11e80:	andeq	r2, r1, ip, asr #3
   11e84:	andeq	r2, r1, ip, asr #3
   11e88:	andeq	r2, r1, ip, asr #3
   11e8c:	andeq	r2, r1, ip, asr #3
   11e90:	andeq	r2, r1, ip, asr #3
   11e94:	andeq	r2, r1, ip, asr #3
   11e98:	andeq	r2, r1, ip, asr #3
   11e9c:	andeq	r2, r1, ip, asr #3
   11ea0:	andeq	r2, r1, ip, asr #3
   11ea4:	andeq	r2, r1, ip, asr #3
   11ea8:	andeq	r2, r1, ip, asr #3
   11eac:	andeq	r2, r1, ip, asr #3
   11eb0:	andeq	r2, r1, r8, lsr r2
   11eb4:	andeq	r2, r1, ip, lsr r2
   11eb8:	andeq	r2, r1, ip, lsr r2
   11ebc:	andeq	r2, r1, r0, asr #32
   11ec0:	andeq	r2, r1, ip, lsr r2
   11ec4:	andeq	r2, r1, ip, lsr #32
   11ec8:	andeq	r2, r1, ip, lsr r2
   11ecc:	andeq	r2, r1, ip, lsr r1
   11ed0:	andeq	r2, r1, ip, lsr r2
   11ed4:	andeq	r2, r1, ip, lsr r2
   11ed8:	andeq	r2, r1, ip, lsr r2
   11edc:	andeq	r2, r1, ip, lsr #32
   11ee0:	andeq	r2, r1, ip, lsr #32
   11ee4:	andeq	r2, r1, ip, lsr #32
   11ee8:	andeq	r2, r1, ip, lsr #32
   11eec:	andeq	r2, r1, ip, lsr #32
   11ef0:	andeq	r2, r1, ip, lsr #32
   11ef4:	andeq	r2, r1, ip, lsr #32
   11ef8:	andeq	r2, r1, ip, lsr #32
   11efc:	andeq	r2, r1, ip, lsr #32
   11f00:	andeq	r2, r1, ip, lsr #32
   11f04:	andeq	r2, r1, ip, lsr #32
   11f08:	andeq	r2, r1, ip, lsr #32
   11f0c:	andeq	r2, r1, ip, lsr #32
   11f10:	andeq	r2, r1, ip, lsr #32
   11f14:	andeq	r2, r1, ip, lsr #32
   11f18:	andeq	r2, r1, ip, lsr #32
   11f1c:	andeq	r2, r1, ip, lsr r2
   11f20:	andeq	r2, r1, ip, lsr r2
   11f24:	andeq	r2, r1, ip, lsr r2
   11f28:	andeq	r2, r1, ip, lsr r2
   11f2c:	andeq	r2, r1, r8, lsl #2
   11f30:	andeq	r2, r1, ip, asr #3
   11f34:	andeq	r2, r1, ip, lsr #32
   11f38:	andeq	r2, r1, ip, lsr #32
   11f3c:	andeq	r2, r1, ip, lsr #32
   11f40:	andeq	r2, r1, ip, lsr #32
   11f44:	andeq	r2, r1, ip, lsr #32
   11f48:	andeq	r2, r1, ip, lsr #32
   11f4c:	andeq	r2, r1, ip, lsr #32
   11f50:	andeq	r2, r1, ip, lsr #32
   11f54:	andeq	r2, r1, ip, lsr #32
   11f58:	andeq	r2, r1, ip, lsr #32
   11f5c:	andeq	r2, r1, ip, lsr #32
   11f60:	andeq	r2, r1, ip, lsr #32
   11f64:	andeq	r2, r1, ip, lsr #32
   11f68:	andeq	r2, r1, ip, lsr #32
   11f6c:	andeq	r2, r1, ip, lsr #32
   11f70:	andeq	r2, r1, ip, lsr #32
   11f74:	andeq	r2, r1, ip, lsr #32
   11f78:	andeq	r2, r1, ip, lsr #32
   11f7c:	andeq	r2, r1, ip, lsr #32
   11f80:	andeq	r2, r1, ip, lsr #32
   11f84:	andeq	r2, r1, ip, lsr #32
   11f88:	andeq	r2, r1, ip, lsr #32
   11f8c:	andeq	r2, r1, ip, lsr #32
   11f90:	andeq	r2, r1, ip, lsr #32
   11f94:	andeq	r2, r1, ip, lsr #32
   11f98:	andeq	r2, r1, ip, lsr #32
   11f9c:	andeq	r2, r1, ip, lsr r2
   11fa0:	andeq	r2, r1, r4, ror r0
   11fa4:	andeq	r2, r1, ip, lsr #32
   11fa8:	andeq	r2, r1, ip, lsr r2
   11fac:	andeq	r2, r1, ip, lsr #32
   11fb0:	andeq	r2, r1, ip, lsr r2
   11fb4:	andeq	r2, r1, ip, lsr #32
   11fb8:	andeq	r2, r1, ip, lsr #32
   11fbc:	andeq	r2, r1, ip, lsr #32
   11fc0:	andeq	r2, r1, ip, lsr #32
   11fc4:	andeq	r2, r1, ip, lsr #32
   11fc8:	andeq	r2, r1, ip, lsr #32
   11fcc:	andeq	r2, r1, ip, lsr #32
   11fd0:	andeq	r2, r1, ip, lsr #32
   11fd4:	andeq	r2, r1, ip, lsr #32
   11fd8:	andeq	r2, r1, ip, lsr #32
   11fdc:	andeq	r2, r1, ip, lsr #32
   11fe0:	andeq	r2, r1, ip, lsr #32
   11fe4:	andeq	r2, r1, ip, lsr #32
   11fe8:	andeq	r2, r1, ip, lsr #32
   11fec:	andeq	r2, r1, ip, lsr #32
   11ff0:	andeq	r2, r1, ip, lsr #32
   11ff4:	andeq	r2, r1, ip, lsr #32
   11ff8:	andeq	r2, r1, ip, lsr #32
   11ffc:	andeq	r2, r1, ip, lsr #32
   12000:	andeq	r2, r1, ip, lsr #32
   12004:	andeq	r2, r1, ip, lsr #32
   12008:	andeq	r2, r1, ip, lsr #32
   1200c:	andeq	r2, r1, ip, lsr #32
   12010:	andeq	r2, r1, ip, lsr #32
   12014:	andeq	r2, r1, ip, lsr #32
   12018:	andeq	r2, r1, ip, lsr #32
   1201c:	andeq	r2, r1, r4, asr r0
   12020:	andeq	r2, r1, ip, lsr r2
   12024:	andeq	r2, r1, r4, asr r0
   12028:	andeq	r2, r1, r0, asr #32
   1202c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12030:	cmp	r0, #0
   12034:	beq	12294 <__assert_fail@plt+0x128c>
   12038:	ldr	r0, [fp, #16]
   1203c:	b	12298 <__assert_fail@plt+0x1290>
   12040:	mov	r4, #0
   12044:	cmp	r7, #0
   12048:	beq	12238 <__assert_fail@plt+0x1230>
   1204c:	mov	r9, #0
   12050:	b	1202c <__assert_fail@plt+0x1024>
   12054:	mov	r4, #0
   12058:	cmn	lr, #1
   1205c:	beq	1221c <__assert_fail@plt+0x1214>
   12060:	cmp	r7, #0
   12064:	bne	1204c <__assert_fail@plt+0x1044>
   12068:	cmp	lr, #1
   1206c:	beq	12238 <__assert_fail@plt+0x1230>
   12070:	b	1204c <__assert_fail@plt+0x1044>
   12074:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12078:	cmp	r0, #2
   1207c:	bne	1225c <__assert_fail@plt+0x1254>
   12080:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12084:	tst	r0, #1
   12088:	bne	12958 <__assert_fail@plt+0x1950>
   1208c:	mov	r9, #0
   12090:	mov	r0, #92	; 0x5c
   12094:	b	12270 <__assert_fail@plt+0x1268>
   12098:	mov	r0, #102	; 0x66
   1209c:	b	12280 <__assert_fail@plt+0x1278>
   120a0:	mov	r2, #116	; 0x74
   120a4:	b	120b4 <__assert_fail@plt+0x10ac>
   120a8:	mov	r0, #98	; 0x62
   120ac:	b	12280 <__assert_fail@plt+0x1278>
   120b0:	mov	r2, #114	; 0x72
   120b4:	ldr	r0, [sp, #68]	; 0x44
   120b8:	tst	r0, #1
   120bc:	mov	r0, r2
   120c0:	bne	12280 <__assert_fail@plt+0x1278>
   120c4:	b	12958 <__assert_fail@plt+0x1950>
   120c8:	ldr	r0, [sp, #84]	; 0x54
   120cc:	tst	r0, #1
   120d0:	beq	12370 <__assert_fail@plt+0x1368>
   120d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   120d8:	tst	r0, #1
   120dc:	bne	12a68 <__assert_fail@plt+0x1a60>
   120e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   120e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   120e8:	cmp	r0, #2
   120ec:	ldr	r0, [fp, #-80]	; 0xffffffb0
   120f0:	movwne	r0, #1
   120f4:	orr	r0, r0, r2
   120f8:	tst	r0, #1
   120fc:	beq	12740 <__assert_fail@plt+0x1738>
   12100:	mov	r0, r8
   12104:	b	12774 <__assert_fail@plt+0x176c>
   12108:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1210c:	mov	r9, #0
   12110:	mov	r5, #63	; 0x3f
   12114:	cmp	r0, #5
   12118:	beq	12524 <__assert_fail@plt+0x151c>
   1211c:	cmp	r0, #2
   12120:	bne	125c8 <__assert_fail@plt+0x15c0>
   12124:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12128:	tst	r0, #1
   1212c:	beq	125cc <__assert_fail@plt+0x15c4>
   12130:	b	12958 <__assert_fail@plt+0x1950>
   12134:	mov	r0, #118	; 0x76
   12138:	b	12280 <__assert_fail@plt+0x1278>
   1213c:	mov	r0, #1
   12140:	mov	r5, #39	; 0x27
   12144:	str	r0, [sp, #60]	; 0x3c
   12148:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1214c:	cmp	r0, #2
   12150:	bne	121c4 <__assert_fail@plt+0x11bc>
   12154:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12158:	tst	r0, #1
   1215c:	bne	12958 <__assert_fail@plt+0x1950>
   12160:	ldr	r2, [sp, #56]	; 0x38
   12164:	clz	r1, sl
   12168:	mov	r9, #0
   1216c:	lsr	r1, r1, #5
   12170:	cmp	r2, #0
   12174:	mov	r0, r2
   12178:	movwne	r0, #1
   1217c:	orrs	r0, r0, r1
   12180:	moveq	r2, sl
   12184:	moveq	sl, r0
   12188:	cmp	r8, sl
   1218c:	str	r2, [sp, #56]	; 0x38
   12190:	movcc	r0, #39	; 0x27
   12194:	strbcc	r0, [r6, r8]
   12198:	add	r0, r8, #1
   1219c:	cmp	r0, sl
   121a0:	movcc	r1, #92	; 0x5c
   121a4:	strbcc	r1, [r6, r0]
   121a8:	add	r0, r8, #2
   121ac:	add	r8, r8, #3
   121b0:	cmp	r0, sl
   121b4:	movcc	r1, #39	; 0x27
   121b8:	strbcc	r1, [r6, r0]
   121bc:	mov	r0, #0
   121c0:	str	r0, [fp, #-56]	; 0xffffffc8
   121c4:	mov	r4, #1
   121c8:	b	1202c <__assert_fail@plt+0x1024>
   121cc:	ldr	r0, [sp, #40]	; 0x28
   121d0:	cmp	r0, #1
   121d4:	bne	1239c <__assert_fail@plt+0x1394>
   121d8:	str	lr, [sp, #28]
   121dc:	bl	10f18 <__ctype_b_loc@plt>
   121e0:	ldr	r0, [r0]
   121e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   121e8:	mov	r1, #1
   121ec:	add	r0, r0, r5, lsl #1
   121f0:	ldrb	r0, [r0, #1]
   121f4:	ubfx	r4, r0, #6, #1
   121f8:	ldr	r0, [sp, #52]	; 0x34
   121fc:	mov	r2, r1
   12200:	cmp	r1, #1
   12204:	orr	r0, r4, r0
   12208:	bhi	125d4 <__assert_fail@plt+0x15cc>
   1220c:	tst	r0, #1
   12210:	beq	125d4 <__assert_fail@plt+0x15cc>
   12214:	ldr	lr, [sp, #28]
   12218:	b	1202c <__assert_fail@plt+0x1024>
   1221c:	cmp	r7, #0
   12220:	ldrbeq	r0, [ip, #1]
   12224:	cmpeq	r0, #0
   12228:	beq	12238 <__assert_fail@plt+0x1230>
   1222c:	mvn	lr, #0
   12230:	mov	r9, #0
   12234:	b	1202c <__assert_fail@plt+0x1024>
   12238:	mov	r1, #1
   1223c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12240:	cmp	r0, #2
   12244:	bne	12254 <__assert_fail@plt+0x124c>
   12248:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1224c:	tst	r0, #1
   12250:	bne	12958 <__assert_fail@plt+0x1950>
   12254:	mov	r4, r1
   12258:	b	1202c <__assert_fail@plt+0x1024>
   1225c:	ldr	r1, [sp, #48]	; 0x30
   12260:	mov	r9, #0
   12264:	mov	r0, #92	; 0x5c
   12268:	cmp	r1, #0
   1226c:	beq	12280 <__assert_fail@plt+0x1278>
   12270:	mov	r4, #0
   12274:	cmp	r9, #0
   12278:	beq	1280c <__assert_fail@plt+0x1804>
   1227c:	b	12848 <__assert_fail@plt+0x1840>
   12280:	ldr	r1, [sp, #84]	; 0x54
   12284:	mov	r4, #0
   12288:	mov	r9, #0
   1228c:	tst	r1, #1
   12290:	bne	122d0 <__assert_fail@plt+0x12c8>
   12294:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12298:	cmp	r0, #0
   1229c:	mov	r0, r5
   122a0:	beq	122c4 <__assert_fail@plt+0x12bc>
   122a4:	ldr	r1, [fp, #16]
   122a8:	ubfx	r0, r5, #5, #3
   122ac:	mov	r2, #1
   122b0:	ldr	r0, [r1, r0, lsl #2]
   122b4:	and	r1, r5, #31
   122b8:	tst	r0, r2, lsl r1
   122bc:	mov	r0, r5
   122c0:	bne	122d0 <__assert_fail@plt+0x12c8>
   122c4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   122c8:	cmp	r1, #0
   122cc:	beq	12804 <__assert_fail@plt+0x17fc>
   122d0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   122d4:	tst	r1, #1
   122d8:	bne	12930 <__assert_fail@plt+0x1928>
   122dc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   122e0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   122e4:	cmp	r1, #2
   122e8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   122ec:	movwne	r1, #1
   122f0:	orr	r1, r1, r2
   122f4:	tst	r1, #1
   122f8:	beq	12304 <__assert_fail@plt+0x12fc>
   122fc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12300:	b	12340 <__assert_fail@plt+0x1338>
   12304:	cmp	r8, sl
   12308:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1230c:	movcc	r1, #39	; 0x27
   12310:	strbcc	r1, [r6, r8]
   12314:	add	r1, r8, #1
   12318:	cmp	r1, sl
   1231c:	movcc	r2, #36	; 0x24
   12320:	strbcc	r2, [r6, r1]
   12324:	add	r1, r8, #2
   12328:	add	r8, r8, #3
   1232c:	cmp	r1, sl
   12330:	movcc	r2, #39	; 0x27
   12334:	strbcc	r2, [r6, r1]
   12338:	mov	r1, #1
   1233c:	str	r1, [fp, #-56]	; 0xffffffc8
   12340:	cmp	r8, sl
   12344:	movcc	r1, #92	; 0x5c
   12348:	strbcc	r1, [r6, r8]
   1234c:	add	r8, r8, #1
   12350:	cmp	r8, sl
   12354:	and	r5, r5, r4
   12358:	add	r7, r7, #1
   1235c:	strbcc	r0, [r6, r8]
   12360:	add	r8, r8, #1
   12364:	cmn	lr, #1
   12368:	bne	11d64 <__assert_fail@plt+0xd5c>
   1236c:	b	11d70 <__assert_fail@plt+0xd68>
   12370:	ldr	r0, [sp, #36]	; 0x24
   12374:	mov	r4, #0
   12378:	mov	r9, #0
   1237c:	mov	r5, #0
   12380:	cmp	r0, #0
   12384:	beq	12294 <__assert_fail@plt+0x128c>
   12388:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1238c:	add	r7, r7, #1
   12390:	cmn	lr, #1
   12394:	bne	11d64 <__assert_fail@plt+0xd5c>
   12398:	b	11d70 <__assert_fail@plt+0xd68>
   1239c:	mov	r0, #0
   123a0:	cmn	lr, #1
   123a4:	str	r0, [fp, #-36]	; 0xffffffdc
   123a8:	str	r0, [fp, #-40]	; 0xffffffd8
   123ac:	bne	123c0 <__assert_fail@plt+0x13b8>
   123b0:	mov	r0, ip
   123b4:	bl	10f3c <strlen@plt>
   123b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   123bc:	mov	lr, r0
   123c0:	add	r0, ip, r7
   123c4:	mov	r4, #1
   123c8:	mov	r6, #0
   123cc:	str	lr, [sp, #28]
   123d0:	str	r0, [sp, #24]
   123d4:	sub	r0, fp, #40	; 0x28
   123d8:	mov	r3, r0
   123dc:	str	r6, [sp, #44]	; 0x2c
   123e0:	add	r6, r6, r7
   123e4:	sub	r0, fp, #44	; 0x2c
   123e8:	add	r1, ip, r6
   123ec:	sub	r2, lr, r6
   123f0:	bl	152f8 <__assert_fail@plt+0x42f0>
   123f4:	cmp	r0, #0
   123f8:	beq	12890 <__assert_fail@plt+0x1888>
   123fc:	cmn	r0, #1
   12400:	beq	12850 <__assert_fail@plt+0x1848>
   12404:	ldr	lr, [sp, #28]
   12408:	cmn	r0, #2
   1240c:	beq	12858 <__assert_fail@plt+0x1850>
   12410:	ldr	r2, [sp, #64]	; 0x40
   12414:	cmp	r0, #2
   12418:	mov	r1, #0
   1241c:	movwcc	r1, #1
   12420:	eor	r2, r2, #1
   12424:	orrs	r1, r2, r1
   12428:	bne	124e8 <__assert_fail@plt+0x14e0>
   1242c:	ldr	r1, [sp, #44]	; 0x2c
   12430:	ldr	r2, [sp, #24]
   12434:	add	r1, r2, r1
   12438:	mov	r2, #1
   1243c:	ldrb	r3, [r1, r2]
   12440:	sub	r3, r3, #91	; 0x5b
   12444:	cmp	r3, #33	; 0x21
   12448:	bhi	124dc <__assert_fail@plt+0x14d4>
   1244c:	add	r6, pc, #0
   12450:	ldr	pc, [r6, r3, lsl #2]
   12454:	andeq	r2, r1, r0, asr r9
   12458:	andeq	r2, r1, r0, asr r9
   1245c:	ldrdeq	r2, [r1], -ip
   12460:	andeq	r2, r1, r0, asr r9
   12464:	ldrdeq	r2, [r1], -ip
   12468:	andeq	r2, r1, r0, asr r9
   1246c:	ldrdeq	r2, [r1], -ip
   12470:	ldrdeq	r2, [r1], -ip
   12474:	ldrdeq	r2, [r1], -ip
   12478:	ldrdeq	r2, [r1], -ip
   1247c:	ldrdeq	r2, [r1], -ip
   12480:	ldrdeq	r2, [r1], -ip
   12484:	ldrdeq	r2, [r1], -ip
   12488:	ldrdeq	r2, [r1], -ip
   1248c:	ldrdeq	r2, [r1], -ip
   12490:	ldrdeq	r2, [r1], -ip
   12494:	ldrdeq	r2, [r1], -ip
   12498:	ldrdeq	r2, [r1], -ip
   1249c:	ldrdeq	r2, [r1], -ip
   124a0:	ldrdeq	r2, [r1], -ip
   124a4:	ldrdeq	r2, [r1], -ip
   124a8:	ldrdeq	r2, [r1], -ip
   124ac:	ldrdeq	r2, [r1], -ip
   124b0:	ldrdeq	r2, [r1], -ip
   124b4:	ldrdeq	r2, [r1], -ip
   124b8:	ldrdeq	r2, [r1], -ip
   124bc:	ldrdeq	r2, [r1], -ip
   124c0:	ldrdeq	r2, [r1], -ip
   124c4:	ldrdeq	r2, [r1], -ip
   124c8:	ldrdeq	r2, [r1], -ip
   124cc:	ldrdeq	r2, [r1], -ip
   124d0:	ldrdeq	r2, [r1], -ip
   124d4:	ldrdeq	r2, [r1], -ip
   124d8:	andeq	r2, r1, r0, asr r9
   124dc:	add	r2, r2, #1
   124e0:	cmp	r2, r0
   124e4:	bcc	1243c <__assert_fail@plt+0x1434>
   124e8:	ldr	r6, [sp, #44]	; 0x2c
   124ec:	add	r6, r0, r6
   124f0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   124f4:	bl	10e7c <iswprint@plt>
   124f8:	cmp	r0, #0
   124fc:	movwne	r0, #1
   12500:	and	r4, r4, r0
   12504:	sub	r0, fp, #40	; 0x28
   12508:	bl	10e28 <mbsinit@plt>
   1250c:	ldr	lr, [sp, #28]
   12510:	ldr	ip, [fp, #-84]	; 0xffffffac
   12514:	sub	r3, fp, #40	; 0x28
   12518:	cmp	r0, #0
   1251c:	beq	123dc <__assert_fail@plt+0x13d4>
   12520:	b	12898 <__assert_fail@plt+0x1890>
   12524:	ldr	r0, [sp, #32]
   12528:	cmp	r0, #0
   1252c:	beq	125c8 <__assert_fail@plt+0x15c0>
   12530:	add	r0, r7, #2
   12534:	cmp	r0, lr
   12538:	bcs	125c8 <__assert_fail@plt+0x15c0>
   1253c:	add	r1, ip, r7
   12540:	ldrb	r1, [r1, #1]
   12544:	cmp	r1, #63	; 0x3f
   12548:	bne	125c8 <__assert_fail@plt+0x15c0>
   1254c:	ldrb	r5, [ip, r0]
   12550:	sub	r1, r5, #33	; 0x21
   12554:	cmp	r1, #29
   12558:	bhi	125c8 <__assert_fail@plt+0x15c0>
   1255c:	movw	r3, #20929	; 0x51c1
   12560:	mov	r2, #1
   12564:	movt	r3, #14336	; 0x3800
   12568:	tst	r3, r2, lsl r1
   1256c:	beq	125c8 <__assert_fail@plt+0x15c0>
   12570:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12574:	tst	r1, #1
   12578:	bne	12a70 <__assert_fail@plt+0x1a68>
   1257c:	cmp	r8, sl
   12580:	mov	r7, r0
   12584:	mov	r4, #0
   12588:	movcc	r1, #63	; 0x3f
   1258c:	strbcc	r1, [r6, r8]
   12590:	add	r1, r8, #1
   12594:	cmp	r1, sl
   12598:	movcc	r2, #34	; 0x22
   1259c:	strbcc	r2, [r6, r1]
   125a0:	add	r1, r8, #2
   125a4:	cmp	r1, sl
   125a8:	movcc	r2, #34	; 0x22
   125ac:	strbcc	r2, [r6, r1]
   125b0:	add	r1, r8, #3
   125b4:	add	r8, r8, #4
   125b8:	cmp	r1, sl
   125bc:	movcc	r2, #63	; 0x3f
   125c0:	strbcc	r2, [r6, r1]
   125c4:	b	1202c <__assert_fail@plt+0x1024>
   125c8:	mov	r5, #63	; 0x3f
   125cc:	mov	r4, #0
   125d0:	b	1202c <__assert_fail@plt+0x1024>
   125d4:	add	r1, r2, r7
   125d8:	ldr	lr, [sp, #28]
   125dc:	mov	r3, #0
   125e0:	str	r1, [sp, #44]	; 0x2c
   125e4:	add	r1, r7, #1
   125e8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   125ec:	tst	r0, #1
   125f0:	bne	126c4 <__assert_fail@plt+0x16bc>
   125f4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   125f8:	tst	r2, #1
   125fc:	bne	129b8 <__assert_fail@plt+0x19b0>
   12600:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12604:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12608:	cmp	r7, #2
   1260c:	movwne	r3, #1
   12610:	orr	r3, r3, r2
   12614:	tst	r3, #1
   12618:	bne	12654 <__assert_fail@plt+0x164c>
   1261c:	cmp	r8, sl
   12620:	add	r3, r8, #1
   12624:	movcc	r2, #39	; 0x27
   12628:	strbcc	r2, [r6, r8]
   1262c:	cmp	r3, sl
   12630:	movcc	r2, #36	; 0x24
   12634:	strbcc	r2, [r6, r3]
   12638:	add	r3, r8, #2
   1263c:	add	r8, r8, #3
   12640:	cmp	r3, sl
   12644:	movcc	r2, #39	; 0x27
   12648:	strbcc	r2, [r6, r3]
   1264c:	mov	r2, #1
   12650:	str	r2, [fp, #-56]	; 0xffffffc8
   12654:	cmp	r8, sl
   12658:	movcc	r3, #92	; 0x5c
   1265c:	strbcc	r3, [r6, r8]
   12660:	add	r3, r8, #1
   12664:	cmp	r3, sl
   12668:	andcc	r7, r5, #192	; 0xc0
   1266c:	movcc	r2, #48	; 0x30
   12670:	orrcc	r7, r2, r7, lsr #6
   12674:	strbcc	r7, [r6, r3]
   12678:	add	r3, r8, #2
   1267c:	add	r8, r8, #3
   12680:	cmp	r3, sl
   12684:	lsrcc	r7, r5, #3
   12688:	movcc	r2, #6
   1268c:	bficc	r7, r2, #3, #29
   12690:	mov	r2, #6
   12694:	strbcc	r7, [r6, r3]
   12698:	bfi	r5, r2, #3, #29
   1269c:	mov	r3, #1
   126a0:	b	126e8 <__assert_fail@plt+0x16e0>
   126a4:	cmp	r8, sl
   126a8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   126ac:	strbcc	r5, [r6, r8]
   126b0:	add	r8, r8, #1
   126b4:	ldrb	r5, [ip, r1]
   126b8:	add	r1, r1, #1
   126bc:	tst	r0, #1
   126c0:	beq	125f4 <__assert_fail@plt+0x15ec>
   126c4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   126c8:	tst	r2, #1
   126cc:	beq	126e0 <__assert_fail@plt+0x16d8>
   126d0:	cmp	r8, sl
   126d4:	movcc	r7, #92	; 0x5c
   126d8:	strbcc	r7, [r6, r8]
   126dc:	add	r8, r8, #1
   126e0:	mov	r2, #0
   126e4:	str	r2, [fp, #-52]	; 0xffffffcc
   126e8:	ldr	r2, [sp, #44]	; 0x2c
   126ec:	and	r9, r3, #1
   126f0:	cmp	r2, r1
   126f4:	bls	127f4 <__assert_fail@plt+0x17ec>
   126f8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   126fc:	cmp	r9, #0
   12700:	movwne	r9, #1
   12704:	mvn	r7, r2
   12708:	orr	r7, r7, r9
   1270c:	tst	r7, #1
   12710:	bne	126a4 <__assert_fail@plt+0x169c>
   12714:	cmp	r8, sl
   12718:	movcc	r7, #39	; 0x27
   1271c:	strbcc	r7, [r6, r8]
   12720:	add	r7, r8, #1
   12724:	add	r8, r8, #2
   12728:	cmp	r7, sl
   1272c:	movcc	r2, #39	; 0x27
   12730:	strbcc	r2, [r6, r7]
   12734:	mov	r2, #0
   12738:	str	r2, [fp, #-56]	; 0xffffffc8
   1273c:	b	126a4 <__assert_fail@plt+0x169c>
   12740:	cmp	r8, sl
   12744:	mov	r2, #1
   12748:	movcc	r0, #39	; 0x27
   1274c:	strbcc	r0, [r6, r8]
   12750:	add	r0, r8, #1
   12754:	cmp	r0, sl
   12758:	movcc	r1, #36	; 0x24
   1275c:	strbcc	r1, [r6, r0]
   12760:	add	r0, r8, #2
   12764:	cmp	r0, sl
   12768:	movcc	r1, #39	; 0x27
   1276c:	strbcc	r1, [r6, r0]
   12770:	add	r0, r8, #3
   12774:	cmp	r0, sl
   12778:	add	r8, r0, #1
   1277c:	str	r2, [fp, #-56]	; 0xffffffc8
   12780:	movcc	r1, #92	; 0x5c
   12784:	strbcc	r1, [r6, r0]
   12788:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1278c:	cmp	r1, #2
   12790:	beq	127e4 <__assert_fail@plt+0x17dc>
   12794:	add	r1, r7, #1
   12798:	mov	r4, #0
   1279c:	mov	r9, #1
   127a0:	mov	r5, #48	; 0x30
   127a4:	cmp	r1, lr
   127a8:	bcs	1202c <__assert_fail@plt+0x1024>
   127ac:	ldrb	r1, [ip, r1]
   127b0:	sub	r1, r1, #48	; 0x30
   127b4:	uxtb	r1, r1
   127b8:	cmp	r1, #9
   127bc:	bhi	1202c <__assert_fail@plt+0x1024>
   127c0:	cmp	r8, sl
   127c4:	movcc	r1, #48	; 0x30
   127c8:	strbcc	r1, [r6, r8]
   127cc:	add	r1, r0, #2
   127d0:	add	r8, r0, #3
   127d4:	cmp	r1, sl
   127d8:	movcc	r2, #48	; 0x30
   127dc:	strbcc	r2, [r6, r1]
   127e0:	b	1202c <__assert_fail@plt+0x1024>
   127e4:	mov	r0, #48	; 0x30
   127e8:	mov	r9, #1
   127ec:	mov	r4, #0
   127f0:	b	122c4 <__assert_fail@plt+0x12bc>
   127f4:	cmp	r9, #0
   127f8:	sub	r7, r1, #1
   127fc:	mov	r0, r5
   12800:	movwne	r9, #1
   12804:	cmp	r9, #0
   12808:	bne	12848 <__assert_fail@plt+0x1840>
   1280c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12810:	tst	r1, #1
   12814:	beq	12848 <__assert_fail@plt+0x1840>
   12818:	cmp	r8, sl
   1281c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12820:	movcc	r1, #39	; 0x27
   12824:	strbcc	r1, [r6, r8]
   12828:	add	r1, r8, #1
   1282c:	add	r8, r8, #2
   12830:	cmp	r1, sl
   12834:	movcc	r2, #39	; 0x27
   12838:	strbcc	r2, [r6, r1]
   1283c:	mov	r1, #0
   12840:	str	r1, [fp, #-56]	; 0xffffffc8
   12844:	b	12350 <__assert_fail@plt+0x1348>
   12848:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1284c:	b	12350 <__assert_fail@plt+0x1348>
   12850:	mov	r4, #0
   12854:	b	12890 <__assert_fail@plt+0x1888>
   12858:	mov	r4, #0
   1285c:	cmp	lr, r6
   12860:	bls	12890 <__assert_fail@plt+0x1888>
   12864:	ldr	ip, [fp, #-84]	; 0xffffffac
   12868:	ldr	r6, [sp, #44]	; 0x2c
   1286c:	ldr	r0, [sp, #24]
   12870:	ldrb	r0, [r0, r6]
   12874:	cmp	r0, #0
   12878:	beq	12898 <__assert_fail@plt+0x1890>
   1287c:	add	r6, r6, #1
   12880:	add	r0, r7, r6
   12884:	cmp	r0, lr
   12888:	bcc	1286c <__assert_fail@plt+0x1864>
   1288c:	b	12898 <__assert_fail@plt+0x1890>
   12890:	ldr	ip, [fp, #-84]	; 0xffffffac
   12894:	ldr	r6, [sp, #44]	; 0x2c
   12898:	mov	r1, r6
   1289c:	ldr	r6, [sp, #80]	; 0x50
   128a0:	b	121f8 <__assert_fail@plt+0x11f0>
   128a4:	mov	lr, r7
   128a8:	b	128b0 <__assert_fail@plt+0x18a8>
   128ac:	mvn	lr, #0
   128b0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   128b4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   128b8:	eor	r0, r7, #2
   128bc:	orr	r0, r0, r8
   128c0:	clz	r0, r0
   128c4:	lsr	r0, r0, #5
   128c8:	tst	r1, r0
   128cc:	bne	12958 <__assert_fail@plt+0x1950>
   128d0:	mov	r0, r1
   128d4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   128d8:	cmp	r7, #2
   128dc:	movwne	r1, #1
   128e0:	orr	r0, r0, r1
   128e4:	tst	r0, #1
   128e8:	ldreq	r0, [sp, #60]	; 0x3c
   128ec:	eoreq	r0, r0, #1
   128f0:	tsteq	r0, #1
   128f4:	bne	12a04 <__assert_fail@plt+0x19fc>
   128f8:	mov	r9, lr
   128fc:	tst	r5, #1
   12900:	bne	129c0 <__assert_fail@plt+0x19b8>
   12904:	ldr	r6, [sp, #56]	; 0x38
   12908:	mov	r4, #0
   1290c:	cmp	r6, #0
   12910:	beq	129fc <__assert_fail@plt+0x19f4>
   12914:	ldr	r0, [sp, #84]	; 0x54
   12918:	mov	r1, #0
   1291c:	cmp	sl, #0
   12920:	mov	r5, #0
   12924:	str	r1, [fp, #-72]	; 0xffffffb8
   12928:	beq	11af8 <__assert_fail@plt+0xaf0>
   1292c:	b	12a04 <__assert_fail@plt+0x19fc>
   12930:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12934:	ldr	r2, [sp, #84]	; 0x54
   12938:	b	12960 <__assert_fail@plt+0x1958>
   1293c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12940:	mov	r2, #1
   12944:	mov	lr, r4
   12948:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1294c:	b	12960 <__assert_fail@plt+0x1958>
   12950:	ldr	r6, [sp, #80]	; 0x50
   12954:	ldr	ip, [fp, #-84]	; 0xffffffac
   12958:	ldr	r2, [sp, #84]	; 0x54
   1295c:	mov	r7, #2
   12960:	mov	r0, #0
   12964:	ldr	r1, [fp, #12]
   12968:	tst	r2, #1
   1296c:	mov	r2, r7
   12970:	mov	r3, lr
   12974:	str	r0, [sp, #8]
   12978:	ldr	r0, [sp, #72]	; 0x48
   1297c:	movwne	r2, #4
   12980:	cmp	r7, #2
   12984:	movne	r2, r7
   12988:	str	r2, [sp]
   1298c:	mov	r2, ip
   12990:	bic	r1, r1, #2
   12994:	str	r0, [sp, #12]
   12998:	ldr	r0, [sp, #76]	; 0x4c
   1299c:	str	r1, [sp, #4]
   129a0:	mov	r1, sl
   129a4:	str	r0, [sp, #16]
   129a8:	mov	r0, r6
   129ac:	bl	11a78 <__assert_fail@plt+0xa70>
   129b0:	mov	r8, r0
   129b4:	b	12a5c <__assert_fail@plt+0x1a54>
   129b8:	ldr	r2, [sp, #84]	; 0x54
   129bc:	b	12960 <__assert_fail@plt+0x1958>
   129c0:	mov	r0, #5
   129c4:	ldr	r1, [sp, #56]	; 0x38
   129c8:	ldr	r2, [fp, #-84]	; 0xffffffac
   129cc:	mov	r3, r9
   129d0:	str	r0, [sp]
   129d4:	ldr	r0, [fp, #12]
   129d8:	str	r0, [sp, #4]
   129dc:	ldr	r0, [fp, #16]
   129e0:	str	r0, [sp, #8]
   129e4:	ldr	r0, [sp, #72]	; 0x48
   129e8:	str	r0, [sp, #12]
   129ec:	ldr	r0, [sp, #76]	; 0x4c
   129f0:	str	r0, [sp, #16]
   129f4:	ldr	r0, [sp, #80]	; 0x50
   129f8:	b	129ac <__assert_fail@plt+0x19a4>
   129fc:	mov	r0, #0
   12a00:	str	r0, [fp, #-72]	; 0xffffffb8
   12a04:	ldr	r1, [sp, #92]	; 0x5c
   12a08:	cmp	r1, #0
   12a0c:	beq	12a4c <__assert_fail@plt+0x1a44>
   12a10:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a14:	ldr	r2, [sp, #80]	; 0x50
   12a18:	tst	r0, #1
   12a1c:	bne	12a50 <__assert_fail@plt+0x1a48>
   12a20:	ldrb	r0, [r1]
   12a24:	cmp	r0, #0
   12a28:	beq	12a50 <__assert_fail@plt+0x1a48>
   12a2c:	add	r1, r1, #1
   12a30:	cmp	r8, sl
   12a34:	strbcc	r0, [r2, r8]
   12a38:	add	r8, r8, #1
   12a3c:	ldrb	r0, [r1], #1
   12a40:	cmp	r0, #0
   12a44:	bne	12a30 <__assert_fail@plt+0x1a28>
   12a48:	b	12a50 <__assert_fail@plt+0x1a48>
   12a4c:	ldr	r2, [sp, #80]	; 0x50
   12a50:	cmp	r8, sl
   12a54:	movcc	r0, #0
   12a58:	strbcc	r0, [r2, r8]
   12a5c:	mov	r0, r8
   12a60:	sub	sp, fp, #28
   12a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a68:	mov	r2, #1
   12a6c:	b	12948 <__assert_fail@plt+0x1940>
   12a70:	ldr	r2, [sp, #84]	; 0x54
   12a74:	mov	r7, #5
   12a78:	b	12960 <__assert_fail@plt+0x1958>
   12a7c:	bl	10ffc <abort@plt>
   12a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a84:	add	fp, sp, #28
   12a88:	sub	sp, sp, #28
   12a8c:	movw	r5, #29016	; 0x7158
   12a90:	cmp	r2, #0
   12a94:	mov	r4, r1
   12a98:	mov	r7, r0
   12a9c:	str	r0, [sp, #20]
   12aa0:	movt	r5, #2
   12aa4:	movne	r5, r2
   12aa8:	bl	10f54 <__errno_location@plt>
   12aac:	mov	sl, r0
   12ab0:	ldm	r5, {r0, r1}
   12ab4:	ldr	r2, [r5, #40]	; 0x28
   12ab8:	ldr	r3, [r5, #44]	; 0x2c
   12abc:	add	r9, r5, #8
   12ac0:	ldr	r6, [sl]
   12ac4:	orr	r8, r1, #1
   12ac8:	mov	r1, #0
   12acc:	str	r6, [sp, #24]
   12ad0:	stm	sp, {r0, r8, r9}
   12ad4:	str	r2, [sp, #12]
   12ad8:	str	r3, [sp, #16]
   12adc:	mov	r0, #0
   12ae0:	mov	r2, r7
   12ae4:	mov	r3, r4
   12ae8:	mov	r6, r4
   12aec:	bl	11a78 <__assert_fail@plt+0xa70>
   12af0:	add	r7, r0, #1
   12af4:	mov	r0, r7
   12af8:	bl	13c90 <__assert_fail@plt+0x2c88>
   12afc:	mov	r4, r0
   12b00:	ldr	r0, [r5]
   12b04:	ldr	r2, [r5, #44]	; 0x2c
   12b08:	ldr	r1, [r5, #40]	; 0x28
   12b0c:	mov	r3, r6
   12b10:	stm	sp, {r0, r8, r9}
   12b14:	str	r2, [sp, #16]
   12b18:	str	r1, [sp, #12]
   12b1c:	mov	r0, r4
   12b20:	mov	r1, r7
   12b24:	ldr	r2, [sp, #20]
   12b28:	bl	11a78 <__assert_fail@plt+0xa70>
   12b2c:	ldr	r0, [sp, #24]
   12b30:	str	r0, [sl]
   12b34:	mov	r0, r4
   12b38:	sub	sp, fp, #28
   12b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b44:	add	fp, sp, #28
   12b48:	sub	sp, sp, #36	; 0x24
   12b4c:	movw	r8, #29016	; 0x7158
   12b50:	cmp	r3, #0
   12b54:	mov	r4, r2
   12b58:	str	r2, [sp, #24]
   12b5c:	mov	r5, r1
   12b60:	mov	r6, r0
   12b64:	str	r0, [sp, #20]
   12b68:	movt	r8, #2
   12b6c:	movne	r8, r3
   12b70:	bl	10f54 <__errno_location@plt>
   12b74:	str	r0, [sp, #28]
   12b78:	cmp	r4, #0
   12b7c:	add	sl, r8, #8
   12b80:	ldm	r8, {r3, r9}
   12b84:	ldr	r7, [r0]
   12b88:	ldr	r1, [r8, #40]	; 0x28
   12b8c:	ldr	r2, [r8, #44]	; 0x2c
   12b90:	mov	r0, #0
   12b94:	orreq	r9, r9, #1
   12b98:	str	r7, [sp, #32]
   12b9c:	mov	r7, r5
   12ba0:	stm	sp, {r3, r9, sl}
   12ba4:	str	r1, [sp, #12]
   12ba8:	str	r2, [sp, #16]
   12bac:	mov	r1, #0
   12bb0:	mov	r2, r6
   12bb4:	mov	r3, r5
   12bb8:	bl	11a78 <__assert_fail@plt+0xa70>
   12bbc:	add	r4, r0, #1
   12bc0:	mov	r5, r0
   12bc4:	mov	r0, r4
   12bc8:	bl	13c90 <__assert_fail@plt+0x2c88>
   12bcc:	mov	r6, r0
   12bd0:	ldr	r0, [r8]
   12bd4:	ldr	r2, [r8, #44]	; 0x2c
   12bd8:	ldr	r1, [r8, #40]	; 0x28
   12bdc:	mov	r3, r7
   12be0:	stm	sp, {r0, r9, sl}
   12be4:	str	r2, [sp, #16]
   12be8:	str	r1, [sp, #12]
   12bec:	mov	r0, r6
   12bf0:	mov	r1, r4
   12bf4:	ldr	r2, [sp, #20]
   12bf8:	bl	11a78 <__assert_fail@plt+0xa70>
   12bfc:	ldr	r0, [sp, #24]
   12c00:	ldr	r1, [sp, #32]
   12c04:	ldr	r2, [sp, #28]
   12c08:	cmp	r0, #0
   12c0c:	str	r1, [r2]
   12c10:	strne	r5, [r0]
   12c14:	mov	r0, r6
   12c18:	sub	sp, fp, #28
   12c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12c24:	add	fp, sp, #24
   12c28:	movw	r5, #28908	; 0x70ec
   12c2c:	movw	r8, #28904	; 0x70e8
   12c30:	movt	r5, #2
   12c34:	movt	r8, #2
   12c38:	ldr	r0, [r5]
   12c3c:	ldr	r4, [r8]
   12c40:	cmp	r0, #2
   12c44:	blt	12c70 <__assert_fail@plt+0x1c68>
   12c48:	add	r7, r4, #12
   12c4c:	mov	r6, #0
   12c50:	ldr	r0, [r7, r6, lsl #3]
   12c54:	bl	151f4 <__assert_fail@plt+0x41ec>
   12c58:	ldr	r1, [r5]
   12c5c:	add	r2, r6, #2
   12c60:	add	r0, r6, #1
   12c64:	mov	r6, r0
   12c68:	cmp	r2, r1
   12c6c:	blt	12c50 <__assert_fail@plt+0x1c48>
   12c70:	ldr	r0, [r4, #4]
   12c74:	movw	r7, #29064	; 0x7188
   12c78:	movt	r7, #2
   12c7c:	cmp	r0, r7
   12c80:	beq	12c98 <__assert_fail@plt+0x1c90>
   12c84:	bl	151f4 <__assert_fail@plt+0x41ec>
   12c88:	movw	r0, #28912	; 0x70f0
   12c8c:	mov	r6, #256	; 0x100
   12c90:	movt	r0, #2
   12c94:	strd	r6, [r0]
   12c98:	movw	r6, #28912	; 0x70f0
   12c9c:	movt	r6, #2
   12ca0:	cmp	r4, r6
   12ca4:	beq	12cb4 <__assert_fail@plt+0x1cac>
   12ca8:	mov	r0, r4
   12cac:	bl	151f4 <__assert_fail@plt+0x41ec>
   12cb0:	str	r6, [r8]
   12cb4:	mov	r0, #1
   12cb8:	str	r0, [r5]
   12cbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12cc0:	movw	r3, #29016	; 0x7158
   12cc4:	mvn	r2, #0
   12cc8:	movt	r3, #2
   12ccc:	b	12cd0 <__assert_fail@plt+0x1cc8>
   12cd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cd4:	add	fp, sp, #28
   12cd8:	sub	sp, sp, #44	; 0x2c
   12cdc:	mov	r7, r3
   12ce0:	str	r2, [sp, #36]	; 0x24
   12ce4:	str	r1, [sp, #32]
   12ce8:	mov	r5, r0
   12cec:	bl	10f54 <__errno_location@plt>
   12cf0:	cmp	r5, #0
   12cf4:	blt	12e60 <__assert_fail@plt+0x1e58>
   12cf8:	cmn	r5, #-2147483647	; 0x80000001
   12cfc:	beq	12e60 <__assert_fail@plt+0x1e58>
   12d00:	movw	r8, #28908	; 0x70ec
   12d04:	movw	r4, #28904	; 0x70e8
   12d08:	str	r0, [sp, #28]
   12d0c:	ldr	r0, [r0]
   12d10:	movt	r8, #2
   12d14:	movt	r4, #2
   12d18:	ldr	r1, [r8]
   12d1c:	ldr	r6, [r4]
   12d20:	str	r0, [sp, #24]
   12d24:	cmp	r1, r5
   12d28:	ble	12d34 <__assert_fail@plt+0x1d2c>
   12d2c:	mov	sl, r6
   12d30:	b	12d9c <__assert_fail@plt+0x1d94>
   12d34:	movw	r9, #28912	; 0x70f0
   12d38:	mov	r0, #8
   12d3c:	add	r2, r5, #1
   12d40:	str	r1, [fp, #-32]	; 0xffffffe0
   12d44:	mvn	r3, #-2147483648	; 0x80000000
   12d48:	movt	r9, #2
   12d4c:	str	r0, [sp]
   12d50:	sub	r2, r2, r1
   12d54:	sub	r1, fp, #32
   12d58:	subs	r0, r6, r9
   12d5c:	movne	r0, r6
   12d60:	bl	13e90 <__assert_fail@plt+0x2e88>
   12d64:	cmp	r6, r9
   12d68:	mov	sl, r0
   12d6c:	str	r0, [r4]
   12d70:	ldrdeq	r0, [r9]
   12d74:	stmeq	sl, {r0, r1}
   12d78:	ldr	r1, [r8]
   12d7c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d80:	add	r0, sl, r1, lsl #3
   12d84:	sub	r1, r2, r1
   12d88:	lsl	r2, r1, #3
   12d8c:	mov	r1, #0
   12d90:	bl	10f6c <memset@plt>
   12d94:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d98:	str	r0, [r8]
   12d9c:	mov	r9, sl
   12da0:	ldr	r6, [r9, r5, lsl #3]!
   12da4:	ldr	r4, [r9, #4]!
   12da8:	ldm	r7, {r0, r1}
   12dac:	ldr	r2, [r7, #40]	; 0x28
   12db0:	ldr	r3, [r7, #44]	; 0x2c
   12db4:	orr	r8, r1, #1
   12db8:	add	r1, r7, #8
   12dbc:	stm	sp, {r0, r8}
   12dc0:	add	r0, sp, #8
   12dc4:	str	r1, [sp, #20]
   12dc8:	stm	r0, {r1, r2, r3}
   12dcc:	mov	r0, r4
   12dd0:	mov	r1, r6
   12dd4:	ldr	r2, [sp, #32]
   12dd8:	ldr	r3, [sp, #36]	; 0x24
   12ddc:	bl	11a78 <__assert_fail@plt+0xa70>
   12de0:	cmp	r6, r0
   12de4:	bhi	12e48 <__assert_fail@plt+0x1e40>
   12de8:	add	r6, r0, #1
   12dec:	movw	r0, #29064	; 0x7188
   12df0:	movt	r0, #2
   12df4:	str	r6, [sl, r5, lsl #3]
   12df8:	cmp	r4, r0
   12dfc:	beq	12e08 <__assert_fail@plt+0x1e00>
   12e00:	mov	r0, r4
   12e04:	bl	151f4 <__assert_fail@plt+0x41ec>
   12e08:	mov	r0, r6
   12e0c:	bl	13c90 <__assert_fail@plt+0x2c88>
   12e10:	str	r0, [r9]
   12e14:	mov	r4, r0
   12e18:	add	r3, sp, #8
   12e1c:	ldr	r0, [r7]
   12e20:	ldr	r1, [r7, #40]	; 0x28
   12e24:	ldr	r2, [r7, #44]	; 0x2c
   12e28:	stm	sp, {r0, r8}
   12e2c:	ldr	r0, [sp, #20]
   12e30:	stm	r3, {r0, r1, r2}
   12e34:	mov	r0, r4
   12e38:	mov	r1, r6
   12e3c:	ldr	r2, [sp, #32]
   12e40:	ldr	r3, [sp, #36]	; 0x24
   12e44:	bl	11a78 <__assert_fail@plt+0xa70>
   12e48:	ldr	r0, [sp, #28]
   12e4c:	ldr	r1, [sp, #24]
   12e50:	str	r1, [r0]
   12e54:	mov	r0, r4
   12e58:	sub	sp, fp, #28
   12e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e60:	bl	10ffc <abort@plt>
   12e64:	movw	r3, #29016	; 0x7158
   12e68:	movt	r3, #2
   12e6c:	b	12cd0 <__assert_fail@plt+0x1cc8>
   12e70:	movw	r3, #29016	; 0x7158
   12e74:	mov	r1, r0
   12e78:	mov	r0, #0
   12e7c:	mvn	r2, #0
   12e80:	movt	r3, #2
   12e84:	b	12cd0 <__assert_fail@plt+0x1cc8>
   12e88:	movw	r3, #29016	; 0x7158
   12e8c:	mov	r2, r1
   12e90:	mov	r1, r0
   12e94:	mov	r0, #0
   12e98:	movt	r3, #2
   12e9c:	b	12cd0 <__assert_fail@plt+0x1cc8>
   12ea0:	push	{fp, lr}
   12ea4:	mov	fp, sp
   12ea8:	sub	sp, sp, #48	; 0x30
   12eac:	vmov.i32	q8, #0	; 0x00000000
   12eb0:	mov	ip, #32
   12eb4:	mov	r3, sp
   12eb8:	mov	lr, r2
   12ebc:	cmp	r1, #10
   12ec0:	add	r2, r3, #16
   12ec4:	vst1.64	{d16-d17}, [r3], ip
   12ec8:	vst1.64	{d16-d17}, [r3]
   12ecc:	vst1.64	{d16-d17}, [r2]
   12ed0:	beq	12ef0 <__assert_fail@plt+0x1ee8>
   12ed4:	str	r1, [sp]
   12ed8:	mov	r3, sp
   12edc:	mov	r1, lr
   12ee0:	mvn	r2, #0
   12ee4:	bl	12cd0 <__assert_fail@plt+0x1cc8>
   12ee8:	mov	sp, fp
   12eec:	pop	{fp, pc}
   12ef0:	bl	10ffc <abort@plt>
   12ef4:	push	{r4, sl, fp, lr}
   12ef8:	add	fp, sp, #8
   12efc:	sub	sp, sp, #48	; 0x30
   12f00:	mov	ip, r3
   12f04:	mov	r3, sp
   12f08:	vmov.i32	q8, #0	; 0x00000000
   12f0c:	mov	lr, #32
   12f10:	cmp	r1, #10
   12f14:	add	r4, r3, #16
   12f18:	vst1.64	{d16-d17}, [r3], lr
   12f1c:	vst1.64	{d16-d17}, [r3]
   12f20:	vst1.64	{d16-d17}, [r4]
   12f24:	beq	12f44 <__assert_fail@plt+0x1f3c>
   12f28:	str	r1, [sp]
   12f2c:	mov	r1, r2
   12f30:	mov	r3, sp
   12f34:	mov	r2, ip
   12f38:	bl	12cd0 <__assert_fail@plt+0x1cc8>
   12f3c:	sub	sp, fp, #8
   12f40:	pop	{r4, sl, fp, pc}
   12f44:	bl	10ffc <abort@plt>
   12f48:	push	{fp, lr}
   12f4c:	mov	fp, sp
   12f50:	sub	sp, sp, #48	; 0x30
   12f54:	mov	r3, sp
   12f58:	vmov.i32	q8, #0	; 0x00000000
   12f5c:	mov	ip, #32
   12f60:	cmp	r0, #10
   12f64:	add	r2, r3, #16
   12f68:	vst1.64	{d16-d17}, [r3], ip
   12f6c:	vst1.64	{d16-d17}, [r3]
   12f70:	vst1.64	{d16-d17}, [r2]
   12f74:	beq	12f94 <__assert_fail@plt+0x1f8c>
   12f78:	str	r0, [sp]
   12f7c:	mov	r3, sp
   12f80:	mov	r0, #0
   12f84:	mvn	r2, #0
   12f88:	bl	12cd0 <__assert_fail@plt+0x1cc8>
   12f8c:	mov	sp, fp
   12f90:	pop	{fp, pc}
   12f94:	bl	10ffc <abort@plt>
   12f98:	push	{fp, lr}
   12f9c:	mov	fp, sp
   12fa0:	sub	sp, sp, #48	; 0x30
   12fa4:	mov	r3, sp
   12fa8:	vmov.i32	q8, #0	; 0x00000000
   12fac:	mov	ip, #32
   12fb0:	cmp	r0, #10
   12fb4:	add	lr, r3, #16
   12fb8:	vst1.64	{d16-d17}, [r3], ip
   12fbc:	vst1.64	{d16-d17}, [r3]
   12fc0:	vst1.64	{d16-d17}, [lr]
   12fc4:	beq	12fe0 <__assert_fail@plt+0x1fd8>
   12fc8:	str	r0, [sp]
   12fcc:	mov	r3, sp
   12fd0:	mov	r0, #0
   12fd4:	bl	12cd0 <__assert_fail@plt+0x1cc8>
   12fd8:	mov	sp, fp
   12fdc:	pop	{fp, pc}
   12fe0:	bl	10ffc <abort@plt>
   12fe4:	push	{r4, sl, fp, lr}
   12fe8:	add	fp, sp, #8
   12fec:	sub	sp, sp, #48	; 0x30
   12ff0:	mov	lr, r0
   12ff4:	movw	r0, #29016	; 0x7158
   12ff8:	mov	r3, #32
   12ffc:	mov	ip, r1
   13000:	mov	r4, #1
   13004:	movt	r0, #2
   13008:	add	r1, r0, #16
   1300c:	vld1.64	{d16-d17}, [r0], r3
   13010:	mov	r3, sp
   13014:	vld1.64	{d18-d19}, [r1]
   13018:	add	r1, r3, #16
   1301c:	vld1.64	{d20-d21}, [r0]
   13020:	add	r0, r3, #32
   13024:	vst1.64	{d18-d19}, [r1]
   13028:	mov	r1, r3
   1302c:	vst1.64	{d20-d21}, [r0]
   13030:	mov	r0, #28
   13034:	and	r0, r0, r2, lsr #3
   13038:	and	r2, r2, #31
   1303c:	vst1.64	{d16-d17}, [r1], r0
   13040:	ldr	r0, [r1, #8]
   13044:	bic	r4, r4, r0, lsr r2
   13048:	eor	r0, r0, r4, lsl r2
   1304c:	mov	r2, ip
   13050:	str	r0, [r1, #8]
   13054:	mov	r0, #0
   13058:	mov	r1, lr
   1305c:	bl	12cd0 <__assert_fail@plt+0x1cc8>
   13060:	sub	sp, fp, #8
   13064:	pop	{r4, sl, fp, pc}
   13068:	push	{fp, lr}
   1306c:	mov	fp, sp
   13070:	sub	sp, sp, #48	; 0x30
   13074:	mov	ip, r0
   13078:	movw	r0, #29016	; 0x7158
   1307c:	mov	r3, #32
   13080:	movt	r0, #2
   13084:	add	r2, r0, #16
   13088:	vld1.64	{d16-d17}, [r0], r3
   1308c:	mov	r3, sp
   13090:	vld1.64	{d18-d19}, [r2]
   13094:	add	r2, r3, #16
   13098:	vld1.64	{d20-d21}, [r0]
   1309c:	add	r0, r3, #32
   130a0:	vst1.64	{d18-d19}, [r2]
   130a4:	mov	r2, r3
   130a8:	vst1.64	{d20-d21}, [r0]
   130ac:	mov	r0, #28
   130b0:	and	r0, r0, r1, lsr #3
   130b4:	and	r1, r1, #31
   130b8:	vst1.64	{d16-d17}, [r2], r0
   130bc:	mov	r0, #1
   130c0:	ldr	lr, [r2, #8]
   130c4:	bic	r0, r0, lr, lsr r1
   130c8:	eor	r0, lr, r0, lsl r1
   130cc:	mov	r1, ip
   130d0:	str	r0, [r2, #8]
   130d4:	mov	r0, #0
   130d8:	mvn	r2, #0
   130dc:	bl	12cd0 <__assert_fail@plt+0x1cc8>
   130e0:	mov	sp, fp
   130e4:	pop	{fp, pc}
   130e8:	push	{fp, lr}
   130ec:	mov	fp, sp
   130f0:	sub	sp, sp, #48	; 0x30
   130f4:	movw	r2, #29016	; 0x7158
   130f8:	mov	r3, #32
   130fc:	mov	r1, r0
   13100:	movt	r2, #2
   13104:	add	r0, r2, #16
   13108:	vld1.64	{d16-d17}, [r2], r3
   1310c:	mov	r3, sp
   13110:	vld1.64	{d18-d19}, [r0]
   13114:	add	r0, r3, #16
   13118:	vld1.64	{d20-d21}, [r2]
   1311c:	mov	r2, r3
   13120:	vst1.64	{d18-d19}, [r0]
   13124:	add	r0, r3, #32
   13128:	vst1.64	{d20-d21}, [r0]
   1312c:	mov	r0, #12
   13130:	vst1.64	{d16-d17}, [r2], r0
   13134:	ldr	r0, [r2]
   13138:	orr	r0, r0, #67108864	; 0x4000000
   1313c:	str	r0, [r2]
   13140:	mov	r0, #0
   13144:	mvn	r2, #0
   13148:	bl	12cd0 <__assert_fail@plt+0x1cc8>
   1314c:	mov	sp, fp
   13150:	pop	{fp, pc}
   13154:	push	{fp, lr}
   13158:	mov	fp, sp
   1315c:	sub	sp, sp, #48	; 0x30
   13160:	mov	ip, r1
   13164:	mov	r1, r0
   13168:	movw	r0, #29016	; 0x7158
   1316c:	mov	r3, #32
   13170:	movt	r0, #2
   13174:	add	r2, r0, #16
   13178:	vld1.64	{d16-d17}, [r0], r3
   1317c:	mov	r3, sp
   13180:	vld1.64	{d18-d19}, [r2]
   13184:	add	r2, r3, #16
   13188:	vld1.64	{d20-d21}, [r0]
   1318c:	add	r0, r3, #32
   13190:	vst1.64	{d18-d19}, [r2]
   13194:	mov	r2, r3
   13198:	vst1.64	{d20-d21}, [r0]
   1319c:	mov	r0, #12
   131a0:	vst1.64	{d16-d17}, [r2], r0
   131a4:	ldr	r0, [r2]
   131a8:	orr	r0, r0, #67108864	; 0x4000000
   131ac:	str	r0, [r2]
   131b0:	mov	r0, #0
   131b4:	mov	r2, ip
   131b8:	bl	12cd0 <__assert_fail@plt+0x1cc8>
   131bc:	mov	sp, fp
   131c0:	pop	{fp, pc}
   131c4:	push	{r4, sl, fp, lr}
   131c8:	add	fp, sp, #8
   131cc:	sub	sp, sp, #96	; 0x60
   131d0:	mov	ip, r2
   131d4:	mov	r2, sp
   131d8:	vmov.i32	q8, #0	; 0x00000000
   131dc:	mov	r4, #28
   131e0:	cmp	r1, #10
   131e4:	mov	r3, r2
   131e8:	add	lr, r2, #16
   131ec:	vst1.64	{d16-d17}, [r3], r4
   131f0:	vst1.64	{d16-d17}, [lr]
   131f4:	vst1.32	{d16-d17}, [r3]
   131f8:	beq	13248 <__assert_fail@plt+0x2240>
   131fc:	vld1.64	{d16-d17}, [r2], r4
   13200:	vld1.64	{d18-d19}, [lr]
   13204:	add	r3, sp, #48	; 0x30
   13208:	add	r4, r3, #4
   1320c:	vld1.32	{d20-d21}, [r2]
   13210:	add	r2, r3, #20
   13214:	vst1.32	{d16-d17}, [r4]
   13218:	vst1.32	{d18-d19}, [r2]
   1321c:	add	r2, r3, #32
   13220:	vst1.32	{d20-d21}, [r2]
   13224:	str	r1, [sp, #48]	; 0x30
   13228:	mvn	r2, #0
   1322c:	ldr	r1, [sp, #60]	; 0x3c
   13230:	orr	r1, r1, #67108864	; 0x4000000
   13234:	str	r1, [sp, #60]	; 0x3c
   13238:	mov	r1, ip
   1323c:	bl	12cd0 <__assert_fail@plt+0x1cc8>
   13240:	sub	sp, fp, #8
   13244:	pop	{r4, sl, fp, pc}
   13248:	bl	10ffc <abort@plt>
   1324c:	push	{r4, r5, fp, lr}
   13250:	add	fp, sp, #8
   13254:	sub	sp, sp, #48	; 0x30
   13258:	mov	ip, r3
   1325c:	movw	r3, #29016	; 0x7158
   13260:	mov	lr, #32
   13264:	cmp	r1, #0
   13268:	mov	r5, sp
   1326c:	movt	r3, #2
   13270:	cmpne	r2, #0
   13274:	add	r4, r3, #16
   13278:	vld1.64	{d16-d17}, [r3], lr
   1327c:	vld1.64	{d18-d19}, [r4]
   13280:	add	r4, r5, #16
   13284:	vld1.64	{d20-d21}, [r3]
   13288:	vst1.64	{d16-d17}, [r5], lr
   1328c:	mov	r3, #10
   13290:	vst1.64	{d18-d19}, [r4]
   13294:	vst1.64	{d20-d21}, [r5]
   13298:	str	r3, [sp]
   1329c:	bne	132a4 <__assert_fail@plt+0x229c>
   132a0:	bl	10ffc <abort@plt>
   132a4:	str	r2, [sp, #44]	; 0x2c
   132a8:	str	r1, [sp, #40]	; 0x28
   132ac:	mov	r3, sp
   132b0:	mov	r1, ip
   132b4:	mvn	r2, #0
   132b8:	bl	12cd0 <__assert_fail@plt+0x1cc8>
   132bc:	sub	sp, fp, #8
   132c0:	pop	{r4, r5, fp, pc}
   132c4:	push	{r4, r5, fp, lr}
   132c8:	add	fp, sp, #8
   132cc:	sub	sp, sp, #48	; 0x30
   132d0:	mov	lr, r3
   132d4:	movw	r3, #29016	; 0x7158
   132d8:	mov	ip, #32
   132dc:	cmp	r1, #0
   132e0:	mov	r5, sp
   132e4:	movt	r3, #2
   132e8:	cmpne	r2, #0
   132ec:	add	r4, r3, #16
   132f0:	vld1.64	{d16-d17}, [r3], ip
   132f4:	vld1.64	{d18-d19}, [r4]
   132f8:	add	r4, r5, #16
   132fc:	vld1.64	{d20-d21}, [r3]
   13300:	vst1.64	{d16-d17}, [r5], ip
   13304:	mov	r3, #10
   13308:	vst1.64	{d18-d19}, [r4]
   1330c:	vst1.64	{d20-d21}, [r5]
   13310:	str	r3, [sp]
   13314:	bne	1331c <__assert_fail@plt+0x2314>
   13318:	bl	10ffc <abort@plt>
   1331c:	ldr	ip, [fp, #8]
   13320:	str	r2, [sp, #44]	; 0x2c
   13324:	str	r1, [sp, #40]	; 0x28
   13328:	mov	r3, sp
   1332c:	mov	r1, lr
   13330:	mov	r2, ip
   13334:	bl	12cd0 <__assert_fail@plt+0x1cc8>
   13338:	sub	sp, fp, #8
   1333c:	pop	{r4, r5, fp, pc}
   13340:	push	{r4, sl, fp, lr}
   13344:	add	fp, sp, #8
   13348:	sub	sp, sp, #48	; 0x30
   1334c:	mov	ip, r2
   13350:	movw	r2, #29016	; 0x7158
   13354:	mov	lr, #32
   13358:	cmp	r0, #0
   1335c:	mov	r4, sp
   13360:	movt	r2, #2
   13364:	cmpne	r1, #0
   13368:	add	r3, r2, #16
   1336c:	vld1.64	{d16-d17}, [r2], lr
   13370:	vld1.64	{d18-d19}, [r3]
   13374:	add	r3, r4, #16
   13378:	vld1.64	{d20-d21}, [r2]
   1337c:	vst1.64	{d16-d17}, [r4], lr
   13380:	mov	r2, #10
   13384:	vst1.64	{d18-d19}, [r3]
   13388:	vst1.64	{d20-d21}, [r4]
   1338c:	str	r2, [sp]
   13390:	bne	13398 <__assert_fail@plt+0x2390>
   13394:	bl	10ffc <abort@plt>
   13398:	str	r1, [sp, #44]	; 0x2c
   1339c:	str	r0, [sp, #40]	; 0x28
   133a0:	mov	r3, sp
   133a4:	mov	r0, #0
   133a8:	mov	r1, ip
   133ac:	mvn	r2, #0
   133b0:	bl	12cd0 <__assert_fail@plt+0x1cc8>
   133b4:	sub	sp, fp, #8
   133b8:	pop	{r4, sl, fp, pc}
   133bc:	push	{r4, r5, fp, lr}
   133c0:	add	fp, sp, #8
   133c4:	sub	sp, sp, #48	; 0x30
   133c8:	mov	lr, r2
   133cc:	movw	r2, #29016	; 0x7158
   133d0:	mov	ip, r3
   133d4:	mov	r3, #32
   133d8:	cmp	r0, #0
   133dc:	mov	r5, sp
   133e0:	movt	r2, #2
   133e4:	cmpne	r1, #0
   133e8:	add	r4, r2, #16
   133ec:	vld1.64	{d16-d17}, [r2], r3
   133f0:	vld1.64	{d18-d19}, [r4]
   133f4:	add	r4, r5, #16
   133f8:	vld1.64	{d20-d21}, [r2]
   133fc:	vst1.64	{d16-d17}, [r5], r3
   13400:	mov	r2, #10
   13404:	vst1.64	{d18-d19}, [r4]
   13408:	vst1.64	{d20-d21}, [r5]
   1340c:	str	r2, [sp]
   13410:	bne	13418 <__assert_fail@plt+0x2410>
   13414:	bl	10ffc <abort@plt>
   13418:	str	r1, [sp, #44]	; 0x2c
   1341c:	str	r0, [sp, #40]	; 0x28
   13420:	mov	r3, sp
   13424:	mov	r0, #0
   13428:	mov	r1, lr
   1342c:	mov	r2, ip
   13430:	bl	12cd0 <__assert_fail@plt+0x1cc8>
   13434:	sub	sp, fp, #8
   13438:	pop	{r4, r5, fp, pc}
   1343c:	movw	r3, #28920	; 0x70f8
   13440:	movt	r3, #2
   13444:	b	12cd0 <__assert_fail@plt+0x1cc8>
   13448:	movw	r3, #28920	; 0x70f8
   1344c:	mov	r2, r1
   13450:	mov	r1, r0
   13454:	mov	r0, #0
   13458:	movt	r3, #2
   1345c:	b	12cd0 <__assert_fail@plt+0x1cc8>
   13460:	movw	r3, #28920	; 0x70f8
   13464:	mvn	r2, #0
   13468:	movt	r3, #2
   1346c:	b	12cd0 <__assert_fail@plt+0x1cc8>
   13470:	movw	r3, #28920	; 0x70f8
   13474:	mov	r1, r0
   13478:	mov	r0, #0
   1347c:	mvn	r2, #0
   13480:	movt	r3, #2
   13484:	b	12cd0 <__assert_fail@plt+0x1cc8>
   13488:	push	{r4, r5, fp, lr}
   1348c:	add	fp, sp, #8
   13490:	mov	r5, r0
   13494:	mov	r4, r1
   13498:	mov	r0, #0
   1349c:	mov	r2, #5
   134a0:	mov	r1, r5
   134a4:	bl	10e4c <dcgettext@plt>
   134a8:	cmp	r0, r5
   134ac:	popne	{r4, r5, fp, pc}
   134b0:	bl	152c0 <__assert_fail@plt+0x42b8>
   134b4:	ldrb	r1, [r0]
   134b8:	and	r1, r1, #223	; 0xdf
   134bc:	cmp	r1, #71	; 0x47
   134c0:	beq	13528 <__assert_fail@plt+0x2520>
   134c4:	cmp	r1, #85	; 0x55
   134c8:	bne	1354c <__assert_fail@plt+0x2544>
   134cc:	ldrb	r1, [r0, #1]
   134d0:	and	r1, r1, #223	; 0xdf
   134d4:	cmp	r1, #84	; 0x54
   134d8:	bne	1354c <__assert_fail@plt+0x2544>
   134dc:	ldrb	r1, [r0, #2]
   134e0:	and	r1, r1, #223	; 0xdf
   134e4:	cmp	r1, #70	; 0x46
   134e8:	ldrbeq	r1, [r0, #3]
   134ec:	cmpeq	r1, #45	; 0x2d
   134f0:	bne	1354c <__assert_fail@plt+0x2544>
   134f4:	ldrb	r1, [r0, #4]
   134f8:	cmp	r1, #56	; 0x38
   134fc:	ldrbeq	r0, [r0, #5]
   13500:	cmpeq	r0, #0
   13504:	bne	1354c <__assert_fail@plt+0x2544>
   13508:	ldrb	r1, [r5]
   1350c:	movw	r2, #23369	; 0x5b49
   13510:	movw	r0, #23373	; 0x5b4d
   13514:	movt	r2, #1
   13518:	movt	r0, #1
   1351c:	cmp	r1, #96	; 0x60
   13520:	moveq	r0, r2
   13524:	pop	{r4, r5, fp, pc}
   13528:	ldrb	r1, [r0, #1]
   1352c:	and	r1, r1, #223	; 0xdf
   13530:	cmp	r1, #66	; 0x42
   13534:	bne	1354c <__assert_fail@plt+0x2544>
   13538:	ldrb	r1, [r0, #2]
   1353c:	cmp	r1, #49	; 0x31
   13540:	ldrbeq	r1, [r0, #3]
   13544:	cmpeq	r1, #56	; 0x38
   13548:	beq	13568 <__assert_fail@plt+0x2560>
   1354c:	movw	r1, #23363	; 0x5b43
   13550:	movw	r0, #23367	; 0x5b47
   13554:	cmp	r4, #9
   13558:	movt	r1, #1
   1355c:	movt	r0, #1
   13560:	moveq	r0, r1
   13564:	pop	{r4, r5, fp, pc}
   13568:	ldrb	r1, [r0, #4]
   1356c:	cmp	r1, #48	; 0x30
   13570:	ldrbeq	r1, [r0, #5]
   13574:	cmpeq	r1, #51	; 0x33
   13578:	bne	1354c <__assert_fail@plt+0x2544>
   1357c:	ldrb	r1, [r0, #6]
   13580:	cmp	r1, #48	; 0x30
   13584:	ldrbeq	r0, [r0, #7]
   13588:	cmpeq	r0, #0
   1358c:	bne	1354c <__assert_fail@plt+0x2544>
   13590:	ldrb	r1, [r5]
   13594:	movw	r2, #23377	; 0x5b51
   13598:	movw	r0, #23381	; 0x5b55
   1359c:	movt	r2, #1
   135a0:	movt	r0, #1
   135a4:	b	1351c <__assert_fail@plt+0x2514>
   135a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   135ac:	add	fp, sp, #24
   135b0:	sub	sp, sp, #32
   135b4:	ldr	r6, [fp, #12]
   135b8:	ldr	r7, [fp, #8]
   135bc:	mov	r4, r2
   135c0:	mov	r8, r0
   135c4:	cmp	r1, #0
   135c8:	beq	135f0 <__assert_fail@plt+0x25e8>
   135cc:	movw	r2, #23468	; 0x5bac
   135d0:	mov	r5, r1
   135d4:	str	r3, [sp, #4]
   135d8:	str	r4, [sp]
   135dc:	mov	r0, r8
   135e0:	mov	r1, #1
   135e4:	movt	r2, #1
   135e8:	mov	r3, r5
   135ec:	b	13608 <__assert_fail@plt+0x2600>
   135f0:	movw	r2, #23480	; 0x5bb8
   135f4:	str	r3, [sp]
   135f8:	mov	r0, r8
   135fc:	mov	r1, #1
   13600:	mov	r3, r4
   13604:	movt	r2, #1
   13608:	bl	10f90 <__fprintf_chk@plt>
   1360c:	movw	r1, #23487	; 0x5bbf
   13610:	mov	r0, #0
   13614:	mov	r2, #5
   13618:	movt	r1, #1
   1361c:	bl	10e4c <dcgettext@plt>
   13620:	movw	r2, #24205	; 0x5e8d
   13624:	mov	r3, r0
   13628:	movw	r0, #2022	; 0x7e6
   1362c:	mov	r1, #1
   13630:	str	r0, [sp]
   13634:	movt	r2, #1
   13638:	mov	r0, r8
   1363c:	bl	10f90 <__fprintf_chk@plt>
   13640:	movw	r4, #22360	; 0x5758
   13644:	mov	r1, r8
   13648:	movt	r4, #1
   1364c:	mov	r0, r4
   13650:	bl	10dc8 <fputs_unlocked@plt>
   13654:	movw	r1, #23491	; 0x5bc3
   13658:	mov	r0, #0
   1365c:	mov	r2, #5
   13660:	movt	r1, #1
   13664:	bl	10e4c <dcgettext@plt>
   13668:	movw	r3, #23662	; 0x5c6e
   1366c:	mov	r2, r0
   13670:	mov	r0, r8
   13674:	mov	r1, #1
   13678:	movt	r3, #1
   1367c:	bl	10f90 <__fprintf_chk@plt>
   13680:	mov	r0, r4
   13684:	mov	r1, r8
   13688:	bl	10dc8 <fputs_unlocked@plt>
   1368c:	cmp	r6, #9
   13690:	bhi	136cc <__assert_fail@plt+0x26c4>
   13694:	add	r0, pc, #0
   13698:	ldr	pc, [r0, r6, lsl #2]
   1369c:	andeq	r3, r1, r4, asr #13
   136a0:	ldrdeq	r3, [r1], -r8
   136a4:	andeq	r3, r1, r8, lsl #14
   136a8:	andeq	r3, r1, r0, lsr r7
   136ac:	andeq	r3, r1, r8, asr r7
   136b0:	andeq	r3, r1, r0, lsl #15
   136b4:	andeq	r3, r1, r8, lsr #15
   136b8:	andeq	r3, r1, r0, ror #15
   136bc:	andeq	r3, r1, r0, lsl #17
   136c0:	andeq	r3, r1, r8, lsr #16
   136c4:	sub	sp, fp, #24
   136c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   136cc:	movw	r1, #24015	; 0x5dcf
   136d0:	movt	r1, #1
   136d4:	b	13830 <__assert_fail@plt+0x2828>
   136d8:	movw	r1, #23696	; 0x5c90
   136dc:	mov	r0, #0
   136e0:	mov	r2, #5
   136e4:	movt	r1, #1
   136e8:	bl	10e4c <dcgettext@plt>
   136ec:	ldr	r3, [r7]
   136f0:	mov	r2, r0
   136f4:	mov	r0, r8
   136f8:	mov	r1, #1
   136fc:	sub	sp, fp, #24
   13700:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13704:	b	10f90 <__fprintf_chk@plt>
   13708:	movw	r1, #23712	; 0x5ca0
   1370c:	mov	r0, #0
   13710:	mov	r2, #5
   13714:	movt	r1, #1
   13718:	bl	10e4c <dcgettext@plt>
   1371c:	mov	r2, r0
   13720:	ldr	r3, [r7]
   13724:	ldr	r0, [r7, #4]
   13728:	str	r0, [sp]
   1372c:	b	1381c <__assert_fail@plt+0x2814>
   13730:	movw	r1, #23735	; 0x5cb7
   13734:	mov	r0, #0
   13738:	mov	r2, #5
   1373c:	movt	r1, #1
   13740:	bl	10e4c <dcgettext@plt>
   13744:	ldr	r3, [r7]
   13748:	mov	r2, r0
   1374c:	ldmib	r7, {r0, r1}
   13750:	stm	sp, {r0, r1}
   13754:	b	1381c <__assert_fail@plt+0x2814>
   13758:	movw	r1, #23763	; 0x5cd3
   1375c:	mov	r0, #0
   13760:	mov	r2, #5
   13764:	movt	r1, #1
   13768:	bl	10e4c <dcgettext@plt>
   1376c:	ldr	r3, [r7]
   13770:	mov	r2, r0
   13774:	ldmib	r7, {r0, r1, r7}
   13778:	stm	sp, {r0, r1, r7}
   1377c:	b	1381c <__assert_fail@plt+0x2814>
   13780:	movw	r1, #23795	; 0x5cf3
   13784:	mov	r0, #0
   13788:	mov	r2, #5
   1378c:	movt	r1, #1
   13790:	bl	10e4c <dcgettext@plt>
   13794:	ldr	r3, [r7]
   13798:	mov	r2, r0
   1379c:	ldmib	r7, {r0, r1, r6, r7}
   137a0:	stm	sp, {r0, r1, r6, r7}
   137a4:	b	1381c <__assert_fail@plt+0x2814>
   137a8:	movw	r1, #23831	; 0x5d17
   137ac:	mov	r0, #0
   137b0:	mov	r2, #5
   137b4:	movt	r1, #1
   137b8:	bl	10e4c <dcgettext@plt>
   137bc:	ldr	r3, [r7]
   137c0:	mov	r2, r0
   137c4:	ldmib	r7, {r0, r1, r6}
   137c8:	ldr	r5, [r7, #16]
   137cc:	ldr	r7, [r7, #20]
   137d0:	stm	sp, {r0, r1, r6}
   137d4:	str	r5, [sp, #12]
   137d8:	str	r7, [sp, #16]
   137dc:	b	1381c <__assert_fail@plt+0x2814>
   137e0:	movw	r1, #23871	; 0x5d3f
   137e4:	mov	r0, #0
   137e8:	mov	r2, #5
   137ec:	movt	r1, #1
   137f0:	bl	10e4c <dcgettext@plt>
   137f4:	ldr	r3, [r7]
   137f8:	mov	r2, r0
   137fc:	ldmib	r7, {r0, r1, r6}
   13800:	ldr	r5, [r7, #16]
   13804:	ldr	r4, [r7, #20]
   13808:	ldr	r7, [r7, #24]
   1380c:	stm	sp, {r0, r1, r6}
   13810:	str	r5, [sp, #12]
   13814:	str	r4, [sp, #16]
   13818:	str	r7, [sp, #20]
   1381c:	mov	r0, r8
   13820:	mov	r1, #1
   13824:	b	138d0 <__assert_fail@plt+0x28c8>
   13828:	movw	r1, #23963	; 0x5d9b
   1382c:	movt	r1, #1
   13830:	mov	r0, #0
   13834:	mov	r2, #5
   13838:	bl	10e4c <dcgettext@plt>
   1383c:	mov	ip, r0
   13840:	ldr	r3, [r7]
   13844:	ldr	r0, [r7, #4]
   13848:	ldr	r1, [r7, #8]
   1384c:	ldr	r6, [r7, #12]
   13850:	ldr	r5, [r7, #16]
   13854:	ldr	r4, [r7, #20]
   13858:	ldr	r2, [r7, #24]
   1385c:	ldr	lr, [r7, #28]
   13860:	ldr	r7, [r7, #32]
   13864:	stm	sp, {r0, r1, r6}
   13868:	str	r5, [sp, #12]
   1386c:	str	r4, [sp, #16]
   13870:	str	r2, [sp, #20]
   13874:	str	lr, [sp, #24]
   13878:	str	r7, [sp, #28]
   1387c:	b	138c4 <__assert_fail@plt+0x28bc>
   13880:	movw	r1, #23915	; 0x5d6b
   13884:	mov	r0, #0
   13888:	mov	r2, #5
   1388c:	movt	r1, #1
   13890:	bl	10e4c <dcgettext@plt>
   13894:	mov	ip, r0
   13898:	ldr	r3, [r7]
   1389c:	ldmib	r7, {r0, r1, r6}
   138a0:	ldr	r5, [r7, #16]
   138a4:	ldr	r4, [r7, #20]
   138a8:	ldr	r2, [r7, #24]
   138ac:	ldr	r7, [r7, #28]
   138b0:	stm	sp, {r0, r1, r6}
   138b4:	str	r5, [sp, #12]
   138b8:	str	r4, [sp, #16]
   138bc:	str	r2, [sp, #20]
   138c0:	str	r7, [sp, #24]
   138c4:	mov	r0, r8
   138c8:	mov	r1, #1
   138cc:	mov	r2, ip
   138d0:	bl	10f90 <__fprintf_chk@plt>
   138d4:	sub	sp, fp, #24
   138d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   138dc:	push	{r4, sl, fp, lr}
   138e0:	add	fp, sp, #8
   138e4:	sub	sp, sp, #8
   138e8:	ldr	ip, [fp, #8]
   138ec:	mov	lr, #0
   138f0:	ldr	r4, [ip, lr, lsl #2]
   138f4:	add	lr, lr, #1
   138f8:	cmp	r4, #0
   138fc:	bne	138f0 <__assert_fail@plt+0x28e8>
   13900:	sub	r4, lr, #1
   13904:	str	ip, [sp]
   13908:	str	r4, [sp, #4]
   1390c:	bl	135a8 <__assert_fail@plt+0x25a0>
   13910:	sub	sp, fp, #8
   13914:	pop	{r4, sl, fp, pc}
   13918:	push	{fp, lr}
   1391c:	mov	fp, sp
   13920:	sub	sp, sp, #48	; 0x30
   13924:	ldr	ip, [fp, #8]
   13928:	ldr	lr, [ip]
   1392c:	cmp	lr, #0
   13930:	str	lr, [sp, #8]
   13934:	beq	139d0 <__assert_fail@plt+0x29c8>
   13938:	ldr	lr, [ip, #4]
   1393c:	cmp	lr, #0
   13940:	str	lr, [sp, #12]
   13944:	beq	139d8 <__assert_fail@plt+0x29d0>
   13948:	ldr	lr, [ip, #8]
   1394c:	cmp	lr, #0
   13950:	str	lr, [sp, #16]
   13954:	beq	139e0 <__assert_fail@plt+0x29d8>
   13958:	ldr	lr, [ip, #12]
   1395c:	cmp	lr, #0
   13960:	str	lr, [sp, #20]
   13964:	beq	139e8 <__assert_fail@plt+0x29e0>
   13968:	ldr	lr, [ip, #16]
   1396c:	cmp	lr, #0
   13970:	str	lr, [sp, #24]
   13974:	beq	139f0 <__assert_fail@plt+0x29e8>
   13978:	ldr	lr, [ip, #20]
   1397c:	cmp	lr, #0
   13980:	str	lr, [sp, #28]
   13984:	beq	139f8 <__assert_fail@plt+0x29f0>
   13988:	ldr	lr, [ip, #24]
   1398c:	cmp	lr, #0
   13990:	str	lr, [sp, #32]
   13994:	beq	13a00 <__assert_fail@plt+0x29f8>
   13998:	ldr	lr, [ip, #28]
   1399c:	cmp	lr, #0
   139a0:	str	lr, [sp, #36]	; 0x24
   139a4:	beq	13a08 <__assert_fail@plt+0x2a00>
   139a8:	ldr	lr, [ip, #32]
   139ac:	cmp	lr, #0
   139b0:	str	lr, [sp, #40]	; 0x28
   139b4:	beq	13a10 <__assert_fail@plt+0x2a08>
   139b8:	ldr	lr, [ip, #36]	; 0x24
   139bc:	mov	ip, #10
   139c0:	cmp	lr, #0
   139c4:	str	lr, [sp, #44]	; 0x2c
   139c8:	movweq	ip, #9
   139cc:	b	13a14 <__assert_fail@plt+0x2a0c>
   139d0:	mov	ip, #0
   139d4:	b	13a14 <__assert_fail@plt+0x2a0c>
   139d8:	mov	ip, #1
   139dc:	b	13a14 <__assert_fail@plt+0x2a0c>
   139e0:	mov	ip, #2
   139e4:	b	13a14 <__assert_fail@plt+0x2a0c>
   139e8:	mov	ip, #3
   139ec:	b	13a14 <__assert_fail@plt+0x2a0c>
   139f0:	mov	ip, #4
   139f4:	b	13a14 <__assert_fail@plt+0x2a0c>
   139f8:	mov	ip, #5
   139fc:	b	13a14 <__assert_fail@plt+0x2a0c>
   13a00:	mov	ip, #6
   13a04:	b	13a14 <__assert_fail@plt+0x2a0c>
   13a08:	mov	ip, #7
   13a0c:	b	13a14 <__assert_fail@plt+0x2a0c>
   13a10:	mov	ip, #8
   13a14:	add	lr, sp, #8
   13a18:	str	ip, [sp, #4]
   13a1c:	str	lr, [sp]
   13a20:	bl	135a8 <__assert_fail@plt+0x25a0>
   13a24:	mov	sp, fp
   13a28:	pop	{fp, pc}
   13a2c:	push	{fp, lr}
   13a30:	mov	fp, sp
   13a34:	sub	sp, sp, #56	; 0x38
   13a38:	add	ip, fp, #8
   13a3c:	str	ip, [sp, #12]
   13a40:	ldr	lr, [fp, #8]
   13a44:	cmp	lr, #0
   13a48:	str	lr, [sp, #16]
   13a4c:	beq	13ae8 <__assert_fail@plt+0x2ae0>
   13a50:	ldr	lr, [ip, #4]
   13a54:	cmp	lr, #0
   13a58:	str	lr, [sp, #20]
   13a5c:	beq	13af0 <__assert_fail@plt+0x2ae8>
   13a60:	ldr	lr, [ip, #8]
   13a64:	cmp	lr, #0
   13a68:	str	lr, [sp, #24]
   13a6c:	beq	13af8 <__assert_fail@plt+0x2af0>
   13a70:	ldr	lr, [ip, #12]
   13a74:	cmp	lr, #0
   13a78:	str	lr, [sp, #28]
   13a7c:	beq	13b00 <__assert_fail@plt+0x2af8>
   13a80:	ldr	lr, [ip, #16]
   13a84:	cmp	lr, #0
   13a88:	str	lr, [sp, #32]
   13a8c:	beq	13b08 <__assert_fail@plt+0x2b00>
   13a90:	ldr	lr, [ip, #20]
   13a94:	cmp	lr, #0
   13a98:	str	lr, [sp, #36]	; 0x24
   13a9c:	beq	13b10 <__assert_fail@plt+0x2b08>
   13aa0:	ldr	lr, [ip, #24]
   13aa4:	cmp	lr, #0
   13aa8:	str	lr, [sp, #40]	; 0x28
   13aac:	beq	13b18 <__assert_fail@plt+0x2b10>
   13ab0:	ldr	lr, [ip, #28]
   13ab4:	cmp	lr, #0
   13ab8:	str	lr, [sp, #44]	; 0x2c
   13abc:	beq	13b20 <__assert_fail@plt+0x2b18>
   13ac0:	ldr	lr, [ip, #32]
   13ac4:	cmp	lr, #0
   13ac8:	str	lr, [sp, #48]	; 0x30
   13acc:	beq	13b28 <__assert_fail@plt+0x2b20>
   13ad0:	ldr	lr, [ip, #36]	; 0x24
   13ad4:	mov	ip, #10
   13ad8:	cmp	lr, #0
   13adc:	str	lr, [sp, #52]	; 0x34
   13ae0:	movweq	ip, #9
   13ae4:	b	13b2c <__assert_fail@plt+0x2b24>
   13ae8:	mov	ip, #0
   13aec:	b	13b2c <__assert_fail@plt+0x2b24>
   13af0:	mov	ip, #1
   13af4:	b	13b2c <__assert_fail@plt+0x2b24>
   13af8:	mov	ip, #2
   13afc:	b	13b2c <__assert_fail@plt+0x2b24>
   13b00:	mov	ip, #3
   13b04:	b	13b2c <__assert_fail@plt+0x2b24>
   13b08:	mov	ip, #4
   13b0c:	b	13b2c <__assert_fail@plt+0x2b24>
   13b10:	mov	ip, #5
   13b14:	b	13b2c <__assert_fail@plt+0x2b24>
   13b18:	mov	ip, #6
   13b1c:	b	13b2c <__assert_fail@plt+0x2b24>
   13b20:	mov	ip, #7
   13b24:	b	13b2c <__assert_fail@plt+0x2b24>
   13b28:	mov	ip, #8
   13b2c:	add	lr, sp, #16
   13b30:	str	ip, [sp, #4]
   13b34:	str	lr, [sp]
   13b38:	bl	135a8 <__assert_fail@plt+0x25a0>
   13b3c:	mov	sp, fp
   13b40:	pop	{fp, pc}
   13b44:	push	{fp, lr}
   13b48:	mov	fp, sp
   13b4c:	movw	r0, #28988	; 0x713c
   13b50:	movt	r0, #2
   13b54:	ldr	r1, [r0]
   13b58:	movw	r0, #22360	; 0x5758
   13b5c:	movt	r0, #1
   13b60:	bl	10dc8 <fputs_unlocked@plt>
   13b64:	movw	r1, #24075	; 0x5e0b
   13b68:	mov	r0, #0
   13b6c:	mov	r2, #5
   13b70:	movt	r1, #1
   13b74:	bl	10e4c <dcgettext@plt>
   13b78:	movw	r2, #24095	; 0x5e1f
   13b7c:	mov	r1, r0
   13b80:	mov	r0, #1
   13b84:	movt	r2, #1
   13b88:	bl	10f78 <__printf_chk@plt>
   13b8c:	movw	r1, #24117	; 0x5e35
   13b90:	mov	r0, #0
   13b94:	mov	r2, #5
   13b98:	movt	r1, #1
   13b9c:	bl	10e4c <dcgettext@plt>
   13ba0:	movw	r2, #22608	; 0x5850
   13ba4:	movw	r3, #22795	; 0x590b
   13ba8:	mov	r1, r0
   13bac:	mov	r0, #1
   13bb0:	movt	r2, #1
   13bb4:	movt	r3, #1
   13bb8:	bl	10f78 <__printf_chk@plt>
   13bbc:	movw	r1, #24137	; 0x5e49
   13bc0:	mov	r0, #0
   13bc4:	mov	r2, #5
   13bc8:	movt	r1, #1
   13bcc:	bl	10e4c <dcgettext@plt>
   13bd0:	movw	r2, #24176	; 0x5e70
   13bd4:	mov	r1, r0
   13bd8:	mov	r0, #1
   13bdc:	movt	r2, #1
   13be0:	pop	{fp, lr}
   13be4:	b	10f78 <__printf_chk@plt>
   13be8:	push	{r4, r5, r6, sl, fp, lr}
   13bec:	add	fp, sp, #16
   13bf0:	mov	r4, r2
   13bf4:	mov	r5, r1
   13bf8:	mov	r6, r0
   13bfc:	bl	15358 <__assert_fail@plt+0x4350>
   13c00:	cmp	r0, #0
   13c04:	popne	{r4, r5, r6, sl, fp, pc}
   13c08:	cmp	r6, #0
   13c0c:	beq	13c20 <__assert_fail@plt+0x2c18>
   13c10:	cmp	r5, #0
   13c14:	cmpne	r4, #0
   13c18:	bne	13c20 <__assert_fail@plt+0x2c18>
   13c1c:	pop	{r4, r5, r6, sl, fp, pc}
   13c20:	bl	141c0 <__assert_fail@plt+0x31b8>
   13c24:	push	{r4, r5, r6, sl, fp, lr}
   13c28:	add	fp, sp, #16
   13c2c:	mov	r4, r2
   13c30:	mov	r5, r1
   13c34:	mov	r6, r0
   13c38:	bl	15358 <__assert_fail@plt+0x4350>
   13c3c:	cmp	r0, #0
   13c40:	popne	{r4, r5, r6, sl, fp, pc}
   13c44:	cmp	r6, #0
   13c48:	beq	13c5c <__assert_fail@plt+0x2c54>
   13c4c:	cmp	r5, #0
   13c50:	cmpne	r4, #0
   13c54:	bne	13c5c <__assert_fail@plt+0x2c54>
   13c58:	pop	{r4, r5, r6, sl, fp, pc}
   13c5c:	bl	141c0 <__assert_fail@plt+0x31b8>
   13c60:	push	{fp, lr}
   13c64:	mov	fp, sp
   13c68:	bl	14ff4 <__assert_fail@plt+0x3fec>
   13c6c:	cmp	r0, #0
   13c70:	popne	{fp, pc}
   13c74:	bl	141c0 <__assert_fail@plt+0x31b8>
   13c78:	push	{fp, lr}
   13c7c:	mov	fp, sp
   13c80:	bl	14ff4 <__assert_fail@plt+0x3fec>
   13c84:	cmp	r0, #0
   13c88:	popne	{fp, pc}
   13c8c:	bl	141c0 <__assert_fail@plt+0x31b8>
   13c90:	push	{fp, lr}
   13c94:	mov	fp, sp
   13c98:	bl	14ff4 <__assert_fail@plt+0x3fec>
   13c9c:	cmp	r0, #0
   13ca0:	popne	{fp, pc}
   13ca4:	bl	141c0 <__assert_fail@plt+0x31b8>
   13ca8:	push	{r4, r5, fp, lr}
   13cac:	add	fp, sp, #8
   13cb0:	mov	r4, r1
   13cb4:	mov	r5, r0
   13cb8:	bl	15024 <__assert_fail@plt+0x401c>
   13cbc:	cmp	r0, #0
   13cc0:	popne	{r4, r5, fp, pc}
   13cc4:	cmp	r5, #0
   13cc8:	beq	13cd8 <__assert_fail@plt+0x2cd0>
   13ccc:	cmp	r4, #0
   13cd0:	bne	13cd8 <__assert_fail@plt+0x2cd0>
   13cd4:	pop	{r4, r5, fp, pc}
   13cd8:	bl	141c0 <__assert_fail@plt+0x31b8>
   13cdc:	push	{fp, lr}
   13ce0:	mov	fp, sp
   13ce4:	cmp	r1, #0
   13ce8:	orreq	r1, r1, #1
   13cec:	bl	15024 <__assert_fail@plt+0x401c>
   13cf0:	cmp	r0, #0
   13cf4:	popne	{fp, pc}
   13cf8:	bl	141c0 <__assert_fail@plt+0x31b8>
   13cfc:	push	{fp, lr}
   13d00:	mov	fp, sp
   13d04:	clz	r3, r2
   13d08:	lsr	ip, r3, #5
   13d0c:	clz	r3, r1
   13d10:	lsr	r3, r3, #5
   13d14:	orrs	r3, r3, ip
   13d18:	movwne	r1, #1
   13d1c:	movwne	r2, #1
   13d20:	bl	15358 <__assert_fail@plt+0x4350>
   13d24:	cmp	r0, #0
   13d28:	popne	{fp, pc}
   13d2c:	bl	141c0 <__assert_fail@plt+0x31b8>
   13d30:	push	{fp, lr}
   13d34:	mov	fp, sp
   13d38:	mov	r2, r1
   13d3c:	mov	r1, r0
   13d40:	mov	r0, #0
   13d44:	bl	15358 <__assert_fail@plt+0x4350>
   13d48:	cmp	r0, #0
   13d4c:	popne	{fp, pc}
   13d50:	bl	141c0 <__assert_fail@plt+0x31b8>
   13d54:	push	{fp, lr}
   13d58:	mov	fp, sp
   13d5c:	mov	r2, r1
   13d60:	mov	r1, r0
   13d64:	clz	r0, r2
   13d68:	clz	r3, r1
   13d6c:	lsr	r0, r0, #5
   13d70:	lsr	r3, r3, #5
   13d74:	orrs	r0, r3, r0
   13d78:	movwne	r1, #1
   13d7c:	movwne	r2, #1
   13d80:	mov	r0, #0
   13d84:	bl	15358 <__assert_fail@plt+0x4350>
   13d88:	cmp	r0, #0
   13d8c:	popne	{fp, pc}
   13d90:	bl	141c0 <__assert_fail@plt+0x31b8>
   13d94:	push	{r4, r5, r6, sl, fp, lr}
   13d98:	add	fp, sp, #16
   13d9c:	ldr	r5, [r1]
   13da0:	mov	r4, r1
   13da4:	mov	r6, r0
   13da8:	cmp	r0, #0
   13dac:	beq	13dc4 <__assert_fail@plt+0x2dbc>
   13db0:	mov	r0, #1
   13db4:	add	r0, r0, r5, lsr #1
   13db8:	adds	r5, r5, r0
   13dbc:	bcc	13dcc <__assert_fail@plt+0x2dc4>
   13dc0:	b	13e08 <__assert_fail@plt+0x2e00>
   13dc4:	cmp	r5, #0
   13dc8:	movweq	r5, #64	; 0x40
   13dcc:	mov	r0, r6
   13dd0:	mov	r1, r5
   13dd4:	mov	r2, #1
   13dd8:	bl	15358 <__assert_fail@plt+0x4350>
   13ddc:	cmp	r5, #0
   13de0:	mov	r1, r5
   13de4:	movwne	r1, #1
   13de8:	cmp	r0, #0
   13dec:	bne	13e00 <__assert_fail@plt+0x2df8>
   13df0:	clz	r2, r6
   13df4:	lsr	r2, r2, #5
   13df8:	orrs	r1, r2, r1
   13dfc:	bne	13e08 <__assert_fail@plt+0x2e00>
   13e00:	str	r5, [r4]
   13e04:	pop	{r4, r5, r6, sl, fp, pc}
   13e08:	bl	141c0 <__assert_fail@plt+0x31b8>
   13e0c:	push	{r4, r5, r6, r7, fp, lr}
   13e10:	add	fp, sp, #16
   13e14:	ldr	r5, [r1]
   13e18:	mov	r6, r2
   13e1c:	mov	r4, r1
   13e20:	mov	r7, r0
   13e24:	cmp	r0, #0
   13e28:	beq	13e40 <__assert_fail@plt+0x2e38>
   13e2c:	mov	r0, #1
   13e30:	add	r0, r0, r5, lsr #1
   13e34:	adds	r5, r5, r0
   13e38:	bcc	13e58 <__assert_fail@plt+0x2e50>
   13e3c:	b	13e8c <__assert_fail@plt+0x2e84>
   13e40:	cmp	r5, #0
   13e44:	bne	13e58 <__assert_fail@plt+0x2e50>
   13e48:	mov	r0, #64	; 0x40
   13e4c:	cmp	r6, #64	; 0x40
   13e50:	udiv	r5, r0, r6
   13e54:	addhi	r5, r5, #1
   13e58:	mov	r0, r7
   13e5c:	mov	r1, r5
   13e60:	mov	r2, r6
   13e64:	bl	15358 <__assert_fail@plt+0x4350>
   13e68:	cmp	r0, #0
   13e6c:	bne	13e84 <__assert_fail@plt+0x2e7c>
   13e70:	cmp	r7, #0
   13e74:	beq	13e8c <__assert_fail@plt+0x2e84>
   13e78:	cmp	r6, #0
   13e7c:	cmpne	r5, #0
   13e80:	bne	13e8c <__assert_fail@plt+0x2e84>
   13e84:	str	r5, [r4]
   13e88:	pop	{r4, r5, r6, r7, fp, pc}
   13e8c:	bl	141c0 <__assert_fail@plt+0x31b8>
   13e90:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e94:	add	fp, sp, #24
   13e98:	mov	r8, r1
   13e9c:	ldr	r1, [r1]
   13ea0:	mov	r5, r0
   13ea4:	add	r0, r1, r1, asr #1
   13ea8:	cmp	r0, r1
   13eac:	mvnvs	r0, #-2147483648	; 0x80000000
   13eb0:	cmp	r0, r3
   13eb4:	mov	r7, r0
   13eb8:	movgt	r7, r3
   13ebc:	cmn	r3, #1
   13ec0:	movle	r7, r0
   13ec4:	ldr	r0, [fp, #8]
   13ec8:	cmn	r0, #1
   13ecc:	ble	13ef4 <__assert_fail@plt+0x2eec>
   13ed0:	cmp	r0, #0
   13ed4:	beq	13f48 <__assert_fail@plt+0x2f40>
   13ed8:	cmn	r7, #1
   13edc:	ble	13f1c <__assert_fail@plt+0x2f14>
   13ee0:	mvn	r4, #-2147483648	; 0x80000000
   13ee4:	udiv	r6, r4, r0
   13ee8:	cmp	r6, r7
   13eec:	bge	13f48 <__assert_fail@plt+0x2f40>
   13ef0:	b	13f58 <__assert_fail@plt+0x2f50>
   13ef4:	cmn	r7, #1
   13ef8:	ble	13f38 <__assert_fail@plt+0x2f30>
   13efc:	cmn	r0, #1
   13f00:	beq	13f48 <__assert_fail@plt+0x2f40>
   13f04:	mov	r6, #-2147483648	; 0x80000000
   13f08:	mvn	r4, #-2147483648	; 0x80000000
   13f0c:	sdiv	r6, r6, r0
   13f10:	cmp	r6, r7
   13f14:	bge	13f48 <__assert_fail@plt+0x2f40>
   13f18:	b	13f58 <__assert_fail@plt+0x2f50>
   13f1c:	beq	13f48 <__assert_fail@plt+0x2f40>
   13f20:	mov	r6, #-2147483648	; 0x80000000
   13f24:	mvn	r4, #-2147483648	; 0x80000000
   13f28:	sdiv	r6, r6, r7
   13f2c:	cmp	r6, r0
   13f30:	bge	13f48 <__assert_fail@plt+0x2f40>
   13f34:	b	13f58 <__assert_fail@plt+0x2f50>
   13f38:	mvn	r4, #-2147483648	; 0x80000000
   13f3c:	sdiv	r6, r4, r0
   13f40:	cmp	r7, r6
   13f44:	blt	13f58 <__assert_fail@plt+0x2f50>
   13f48:	mul	r6, r7, r0
   13f4c:	mov	r4, #64	; 0x40
   13f50:	cmp	r6, #63	; 0x3f
   13f54:	bgt	13f60 <__assert_fail@plt+0x2f58>
   13f58:	sdiv	r7, r4, r0
   13f5c:	mul	r6, r7, r0
   13f60:	cmp	r5, #0
   13f64:	moveq	r4, #0
   13f68:	streq	r4, [r8]
   13f6c:	sub	r4, r7, r1
   13f70:	cmp	r4, r2
   13f74:	bge	14020 <__assert_fail@plt+0x3018>
   13f78:	add	r7, r1, r2
   13f7c:	mov	r6, #0
   13f80:	mov	r2, #0
   13f84:	cmp	r7, r3
   13f88:	movwgt	r6, #1
   13f8c:	cmn	r3, #1
   13f90:	movwgt	r2, #1
   13f94:	cmp	r7, r1
   13f98:	bvs	14054 <__assert_fail@plt+0x304c>
   13f9c:	ands	r1, r2, r6
   13fa0:	bne	14054 <__assert_fail@plt+0x304c>
   13fa4:	cmn	r0, #1
   13fa8:	ble	13fd0 <__assert_fail@plt+0x2fc8>
   13fac:	cmp	r0, #0
   13fb0:	beq	1401c <__assert_fail@plt+0x3014>
   13fb4:	cmn	r7, #1
   13fb8:	ble	13ff4 <__assert_fail@plt+0x2fec>
   13fbc:	mvn	r1, #-2147483648	; 0x80000000
   13fc0:	udiv	r1, r1, r0
   13fc4:	cmp	r1, r7
   13fc8:	bge	1401c <__assert_fail@plt+0x3014>
   13fcc:	b	14054 <__assert_fail@plt+0x304c>
   13fd0:	cmn	r7, #1
   13fd4:	ble	1400c <__assert_fail@plt+0x3004>
   13fd8:	cmn	r0, #1
   13fdc:	beq	1401c <__assert_fail@plt+0x3014>
   13fe0:	mov	r1, #-2147483648	; 0x80000000
   13fe4:	sdiv	r1, r1, r0
   13fe8:	cmp	r1, r7
   13fec:	bge	1401c <__assert_fail@plt+0x3014>
   13ff0:	b	14054 <__assert_fail@plt+0x304c>
   13ff4:	beq	1401c <__assert_fail@plt+0x3014>
   13ff8:	mov	r1, #-2147483648	; 0x80000000
   13ffc:	sdiv	r1, r1, r7
   14000:	cmp	r1, r0
   14004:	bge	1401c <__assert_fail@plt+0x3014>
   14008:	b	14054 <__assert_fail@plt+0x304c>
   1400c:	mvn	r1, #-2147483648	; 0x80000000
   14010:	sdiv	r1, r1, r0
   14014:	cmp	r7, r1
   14018:	blt	14054 <__assert_fail@plt+0x304c>
   1401c:	mul	r6, r7, r0
   14020:	mov	r0, r5
   14024:	mov	r1, r6
   14028:	bl	15024 <__assert_fail@plt+0x401c>
   1402c:	cmp	r6, #0
   14030:	movwne	r6, #1
   14034:	cmp	r0, #0
   14038:	bne	1404c <__assert_fail@plt+0x3044>
   1403c:	clz	r1, r5
   14040:	lsr	r1, r1, #5
   14044:	orrs	r1, r1, r6
   14048:	bne	14054 <__assert_fail@plt+0x304c>
   1404c:	str	r7, [r8]
   14050:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14054:	bl	141c0 <__assert_fail@plt+0x31b8>
   14058:	push	{fp, lr}
   1405c:	mov	fp, sp
   14060:	mov	r1, #1
   14064:	bl	14fa0 <__assert_fail@plt+0x3f98>
   14068:	cmp	r0, #0
   1406c:	popne	{fp, pc}
   14070:	bl	141c0 <__assert_fail@plt+0x31b8>
   14074:	push	{fp, lr}
   14078:	mov	fp, sp
   1407c:	bl	14fa0 <__assert_fail@plt+0x3f98>
   14080:	cmp	r0, #0
   14084:	popne	{fp, pc}
   14088:	bl	141c0 <__assert_fail@plt+0x31b8>
   1408c:	push	{fp, lr}
   14090:	mov	fp, sp
   14094:	mov	r1, #1
   14098:	bl	14fa0 <__assert_fail@plt+0x3f98>
   1409c:	cmp	r0, #0
   140a0:	popne	{fp, pc}
   140a4:	bl	141c0 <__assert_fail@plt+0x31b8>
   140a8:	push	{fp, lr}
   140ac:	mov	fp, sp
   140b0:	bl	14fa0 <__assert_fail@plt+0x3f98>
   140b4:	cmp	r0, #0
   140b8:	popne	{fp, pc}
   140bc:	bl	141c0 <__assert_fail@plt+0x31b8>
   140c0:	push	{r4, r5, r6, sl, fp, lr}
   140c4:	add	fp, sp, #16
   140c8:	mov	r5, r0
   140cc:	mov	r0, r1
   140d0:	mov	r4, r1
   140d4:	bl	14ff4 <__assert_fail@plt+0x3fec>
   140d8:	cmp	r0, #0
   140dc:	beq	140f8 <__assert_fail@plt+0x30f0>
   140e0:	mov	r1, r5
   140e4:	mov	r2, r4
   140e8:	mov	r6, r0
   140ec:	bl	10e10 <memcpy@plt>
   140f0:	mov	r0, r6
   140f4:	pop	{r4, r5, r6, sl, fp, pc}
   140f8:	bl	141c0 <__assert_fail@plt+0x31b8>
   140fc:	push	{r4, r5, r6, sl, fp, lr}
   14100:	add	fp, sp, #16
   14104:	mov	r5, r0
   14108:	mov	r0, r1
   1410c:	mov	r4, r1
   14110:	bl	14ff4 <__assert_fail@plt+0x3fec>
   14114:	cmp	r0, #0
   14118:	beq	14134 <__assert_fail@plt+0x312c>
   1411c:	mov	r1, r5
   14120:	mov	r2, r4
   14124:	mov	r6, r0
   14128:	bl	10e10 <memcpy@plt>
   1412c:	mov	r0, r6
   14130:	pop	{r4, r5, r6, sl, fp, pc}
   14134:	bl	141c0 <__assert_fail@plt+0x31b8>
   14138:	push	{r4, r5, r6, sl, fp, lr}
   1413c:	add	fp, sp, #16
   14140:	mov	r5, r0
   14144:	add	r0, r1, #1
   14148:	mov	r4, r1
   1414c:	bl	14ff4 <__assert_fail@plt+0x3fec>
   14150:	cmp	r0, #0
   14154:	beq	1417c <__assert_fail@plt+0x3174>
   14158:	mov	r6, r0
   1415c:	mov	r0, #0
   14160:	mov	r1, r5
   14164:	mov	r2, r4
   14168:	strb	r0, [r6, r4]
   1416c:	mov	r0, r6
   14170:	bl	10e10 <memcpy@plt>
   14174:	mov	r0, r6
   14178:	pop	{r4, r5, r6, sl, fp, pc}
   1417c:	bl	141c0 <__assert_fail@plt+0x31b8>
   14180:	push	{r4, r5, r6, sl, fp, lr}
   14184:	add	fp, sp, #16
   14188:	mov	r4, r0
   1418c:	bl	10f3c <strlen@plt>
   14190:	add	r5, r0, #1
   14194:	mov	r0, r5
   14198:	bl	14ff4 <__assert_fail@plt+0x3fec>
   1419c:	cmp	r0, #0
   141a0:	beq	141bc <__assert_fail@plt+0x31b4>
   141a4:	mov	r1, r4
   141a8:	mov	r2, r5
   141ac:	mov	r6, r0
   141b0:	bl	10e10 <memcpy@plt>
   141b4:	mov	r0, r6
   141b8:	pop	{r4, r5, r6, sl, fp, pc}
   141bc:	bl	141c0 <__assert_fail@plt+0x31b8>
   141c0:	push	{fp, lr}
   141c4:	mov	fp, sp
   141c8:	movw	r0, #28900	; 0x70e4
   141cc:	movw	r1, #24252	; 0x5ebc
   141d0:	mov	r2, #5
   141d4:	movt	r0, #2
   141d8:	movt	r1, #1
   141dc:	ldr	r4, [r0]
   141e0:	mov	r0, #0
   141e4:	bl	10e4c <dcgettext@plt>
   141e8:	movw	r2, #23183	; 0x5a8f
   141ec:	mov	r3, r0
   141f0:	mov	r0, r4
   141f4:	mov	r1, #0
   141f8:	movt	r2, #1
   141fc:	bl	10ec4 <error@plt>
   14200:	bl	10ffc <abort@plt>
   14204:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14208:	add	fp, sp, #24
   1420c:	sub	sp, sp, #16
   14210:	mov	r8, r0
   14214:	ldr	r0, [fp, #16]
   14218:	mov	r5, r3
   1421c:	mov	r6, r2
   14220:	mov	r2, r1
   14224:	add	r3, sp, #8
   14228:	mov	r1, #0
   1422c:	str	r0, [sp]
   14230:	mov	r0, r8
   14234:	bl	14300 <__assert_fail@plt+0x32f8>
   14238:	cmp	r0, #0
   1423c:	bne	142c8 <__assert_fail@plt+0x32c0>
   14240:	ldr	r4, [sp, #8]
   14244:	ldr	r7, [sp, #12]
   14248:	subs	r0, r4, r6
   1424c:	sbcs	r0, r7, r5
   14250:	bcc	14274 <__assert_fail@plt+0x326c>
   14254:	ldr	r1, [fp, #8]
   14258:	ldr	r0, [fp, #12]
   1425c:	subs	r1, r1, r4
   14260:	sbcs	r0, r0, r7
   14264:	movcs	r0, r4
   14268:	movcs	r1, r7
   1426c:	subcs	sp, fp, #24
   14270:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   14274:	bl	10f54 <__errno_location@plt>
   14278:	subs	r1, r4, #1073741824	; 0x40000000
   1427c:	sbcs	r1, r7, #0
   14280:	movcc	r1, #34	; 0x22
   14284:	movcs	r1, #75	; 0x4b
   14288:	str	r1, [r0]
   1428c:	ldr	r6, [r0]
   14290:	ldr	r4, [fp, #24]
   14294:	ldr	r5, [fp, #20]
   14298:	mov	r0, r8
   1429c:	bl	13470 <__assert_fail@plt+0x2468>
   142a0:	subs	r1, r6, #22
   142a4:	movw	r2, #23179	; 0x5a8b
   142a8:	str	r0, [sp]
   142ac:	mov	r3, r5
   142b0:	movne	r1, r6
   142b4:	cmp	r4, #0
   142b8:	movt	r2, #1
   142bc:	movweq	r4, #1
   142c0:	mov	r0, r4
   142c4:	bl	10ec4 <error@plt>
   142c8:	cmp	r0, #1
   142cc:	beq	142e4 <__assert_fail@plt+0x32dc>
   142d0:	cmp	r0, #3
   142d4:	bne	142f0 <__assert_fail@plt+0x32e8>
   142d8:	bl	10f54 <__errno_location@plt>
   142dc:	mov	r1, #0
   142e0:	b	14288 <__assert_fail@plt+0x3280>
   142e4:	bl	10f54 <__errno_location@plt>
   142e8:	mov	r1, #75	; 0x4b
   142ec:	b	14288 <__assert_fail@plt+0x3280>
   142f0:	bl	10f54 <__errno_location@plt>
   142f4:	b	1428c <__assert_fail@plt+0x3284>
   142f8:	mov	r1, #10
   142fc:	b	14204 <__assert_fail@plt+0x31fc>
   14300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14304:	add	fp, sp, #28
   14308:	sub	sp, sp, #44	; 0x2c
   1430c:	cmp	r2, #37	; 0x25
   14310:	bcs	14f80 <__assert_fail@plt+0x3f78>
   14314:	ldr	sl, [fp, #8]
   14318:	mov	r6, r2
   1431c:	mov	r7, r1
   14320:	mov	r4, r0
   14324:	str	r3, [sp, #36]	; 0x24
   14328:	bl	10f54 <__errno_location@plt>
   1432c:	mov	r5, r0
   14330:	mov	r0, #0
   14334:	str	r0, [r5]
   14338:	bl	10f18 <__ctype_b_loc@plt>
   1433c:	ldr	r1, [r0]
   14340:	mov	r2, r4
   14344:	ldrb	r0, [r2], #1
   14348:	add	r3, r1, r0, lsl #1
   1434c:	ldrb	r3, [r3, #1]
   14350:	tst	r3, #32
   14354:	bne	14344 <__assert_fail@plt+0x333c>
   14358:	sub	r9, fp, #32
   1435c:	cmp	r7, #0
   14360:	mov	r8, #4
   14364:	movne	r9, r7
   14368:	cmp	r0, #45	; 0x2d
   1436c:	beq	14f74 <__assert_fail@plt+0x3f6c>
   14370:	mov	r0, r4
   14374:	mov	r1, r9
   14378:	mov	r2, r6
   1437c:	mov	r3, #0
   14380:	bl	10e1c <__strtoull_internal@plt>
   14384:	mov	r7, r1
   14388:	ldr	r1, [r9]
   1438c:	cmp	r1, r4
   14390:	beq	143bc <__assert_fail@plt+0x33b4>
   14394:	mov	r6, r0
   14398:	ldr	r0, [r5]
   1439c:	cmp	r0, #0
   143a0:	beq	143f8 <__assert_fail@plt+0x33f0>
   143a4:	cmp	r0, #34	; 0x22
   143a8:	bne	14f74 <__assert_fail@plt+0x3f6c>
   143ac:	mov	r8, #1
   143b0:	cmp	sl, #0
   143b4:	bne	14404 <__assert_fail@plt+0x33fc>
   143b8:	b	14f6c <__assert_fail@plt+0x3f64>
   143bc:	cmp	sl, #0
   143c0:	beq	14f74 <__assert_fail@plt+0x3f6c>
   143c4:	mov	r5, r1
   143c8:	ldrb	r1, [r4]
   143cc:	cmp	r1, #0
   143d0:	beq	14f74 <__assert_fail@plt+0x3f6c>
   143d4:	mov	r0, sl
   143d8:	bl	10f48 <strchr@plt>
   143dc:	cmp	r0, #0
   143e0:	beq	14f74 <__assert_fail@plt+0x3f6c>
   143e4:	mov	r1, r5
   143e8:	mov	r8, #0
   143ec:	mov	r6, #1
   143f0:	mov	r7, #0
   143f4:	b	14404 <__assert_fail@plt+0x33fc>
   143f8:	mov	r8, r0
   143fc:	cmp	sl, #0
   14400:	beq	14f6c <__assert_fail@plt+0x3f64>
   14404:	ldrb	r4, [r1]
   14408:	cmp	r4, #0
   1440c:	beq	14f6c <__assert_fail@plt+0x3f64>
   14410:	str	r1, [sp, #32]
   14414:	mov	r0, sl
   14418:	mov	r1, r4
   1441c:	bl	10f48 <strchr@plt>
   14420:	cmp	r0, #0
   14424:	beq	146ec <__assert_fail@plt+0x36e4>
   14428:	sub	r0, r4, #69	; 0x45
   1442c:	mov	r1, #1
   14430:	mov	r3, #0
   14434:	mov	r5, #1024	; 0x400
   14438:	cmp	r0, #47	; 0x2f
   1443c:	str	r1, [sp, #28]
   14440:	bhi	14544 <__assert_fail@plt+0x353c>
   14444:	add	r1, pc, #0
   14448:	ldr	pc, [r1, r0, lsl #2]
   1444c:	andeq	r4, r1, ip, lsl #10
   14450:	andeq	r4, r1, r4, asr #10
   14454:	andeq	r4, r1, ip, lsl #10
   14458:	andeq	r4, r1, r4, asr #10
   1445c:	andeq	r4, r1, r4, asr #10
   14460:	andeq	r4, r1, r4, asr #10
   14464:	andeq	r4, r1, ip, lsl #10
   14468:	andeq	r4, r1, r4, asr #10
   1446c:	andeq	r4, r1, ip, lsl #10
   14470:	andeq	r4, r1, r4, asr #10
   14474:	andeq	r4, r1, r4, asr #10
   14478:	andeq	r4, r1, ip, lsl #10
   1447c:	andeq	r4, r1, r4, asr #10
   14480:	andeq	r4, r1, r4, asr #10
   14484:	andeq	r4, r1, r4, asr #10
   14488:	andeq	r4, r1, ip, lsl #10
   1448c:	andeq	r4, r1, r4, asr #10
   14490:	andeq	r4, r1, r4, asr #10
   14494:	andeq	r4, r1, r4, asr #10
   14498:	andeq	r4, r1, r4, asr #10
   1449c:	andeq	r4, r1, ip, lsl #10
   144a0:	andeq	r4, r1, ip, lsl #10
   144a4:	andeq	r4, r1, r4, asr #10
   144a8:	andeq	r4, r1, r4, asr #10
   144ac:	andeq	r4, r1, r4, asr #10
   144b0:	andeq	r4, r1, r4, asr #10
   144b4:	andeq	r4, r1, r4, asr #10
   144b8:	andeq	r4, r1, r4, asr #10
   144bc:	andeq	r4, r1, r4, asr #10
   144c0:	andeq	r4, r1, r4, asr #10
   144c4:	andeq	r4, r1, r4, asr #10
   144c8:	andeq	r4, r1, r4, asr #10
   144cc:	andeq	r4, r1, r4, asr #10
   144d0:	andeq	r4, r1, r4, asr #10
   144d4:	andeq	r4, r1, ip, lsl #10
   144d8:	andeq	r4, r1, r4, asr #10
   144dc:	andeq	r4, r1, r4, asr #10
   144e0:	andeq	r4, r1, r4, asr #10
   144e4:	andeq	r4, r1, ip, lsl #10
   144e8:	andeq	r4, r1, r4, asr #10
   144ec:	andeq	r4, r1, ip, lsl #10
   144f0:	andeq	r4, r1, r4, asr #10
   144f4:	andeq	r4, r1, r4, asr #10
   144f8:	andeq	r4, r1, r4, asr #10
   144fc:	andeq	r4, r1, r4, asr #10
   14500:	andeq	r4, r1, r4, asr #10
   14504:	andeq	r4, r1, r4, asr #10
   14508:	andeq	r4, r1, ip, lsl #10
   1450c:	mov	r0, sl
   14510:	mov	r1, #48	; 0x30
   14514:	bl	10f48 <strchr@plt>
   14518:	cmp	r0, #0
   1451c:	beq	14540 <__assert_fail@plt+0x3538>
   14520:	ldr	r1, [sp, #32]
   14524:	ldrb	r0, [r1, #1]
   14528:	cmp	r0, #66	; 0x42
   1452c:	cmpne	r0, #68	; 0x44
   14530:	bne	146f8 <__assert_fail@plt+0x36f0>
   14534:	mov	r5, #1000	; 0x3e8
   14538:	mov	r0, #2
   1453c:	str	r0, [sp, #28]
   14540:	mov	r3, #0
   14544:	sub	r0, r4, #66	; 0x42
   14548:	cmp	r0, #53	; 0x35
   1454c:	bhi	146ec <__assert_fail@plt+0x36e4>
   14550:	add	r1, pc, #0
   14554:	ldr	pc, [r1, r0, lsl #2]
   14558:	andeq	r4, r1, r4, ror sl
   1455c:	andeq	r4, r1, ip, ror #13
   14560:	andeq	r4, r1, ip, ror #13
   14564:	muleq	r1, ip, sl
   14568:	andeq	r4, r1, ip, ror #13
   1456c:	andeq	r4, r1, r0, lsr r6
   14570:	andeq	r4, r1, ip, ror #13
   14574:	andeq	r4, r1, ip, ror #13
   14578:	andeq	r4, r1, ip, ror #13
   1457c:	andeq	r4, r1, ip, lsl r7
   14580:	andeq	r4, r1, ip, ror #13
   14584:	andeq	r4, r1, r4, ror #14
   14588:	andeq	r4, r1, ip, ror #13
   1458c:	andeq	r4, r1, ip, ror #13
   14590:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14594:	andeq	r4, r1, ip, ror #13
   14598:	andeq	r4, r1, ip, ror #13
   1459c:	andeq	r4, r1, ip, ror #13
   145a0:	strdeq	r4, [r1], -r0
   145a4:	andeq	r4, r1, ip, ror #13
   145a8:	andeq	r4, r1, ip, ror #13
   145ac:	andeq	r4, r1, ip, ror #13
   145b0:	andeq	r4, r1, ip, ror #13
   145b4:	andeq	r4, r1, ip, lsl sp
   145b8:	ldrdeq	r4, [r1], -r8
   145bc:	andeq	r4, r1, ip, ror #13
   145c0:	andeq	r4, r1, ip, ror #13
   145c4:	andeq	r4, r1, ip, ror #13
   145c8:	andeq	r4, r1, ip, ror #13
   145cc:	andeq	r4, r1, ip, ror #13
   145d0:	andeq	r4, r1, ip, ror #13
   145d4:	andeq	r4, r1, ip, ror #13
   145d8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   145dc:	andeq	r4, r1, ip, asr #30
   145e0:	andeq	r4, r1, ip, ror #13
   145e4:	andeq	r4, r1, ip, ror #13
   145e8:	andeq	r4, r1, ip, ror #13
   145ec:	andeq	r4, r1, r0, lsr r6
   145f0:	andeq	r4, r1, ip, ror #13
   145f4:	andeq	r4, r1, ip, ror #13
   145f8:	andeq	r4, r1, ip, ror #13
   145fc:	andeq	r4, r1, ip, lsl r7
   14600:	andeq	r4, r1, ip, ror #13
   14604:	andeq	r4, r1, r4, ror #14
   14608:	andeq	r4, r1, ip, ror #13
   1460c:	andeq	r4, r1, ip, ror #13
   14610:	andeq	r4, r1, ip, ror #13
   14614:	andeq	r4, r1, ip, ror #13
   14618:	andeq	r4, r1, ip, ror #13
   1461c:	andeq	r4, r1, ip, ror #13
   14620:	strdeq	r4, [r1], -r0
   14624:	andeq	r4, r1, ip, ror #13
   14628:	andeq	r4, r1, ip, ror #13
   1462c:	andeq	r4, r1, r8, lsr #30
   14630:	mvn	r0, #0
   14634:	mvn	r1, #0
   14638:	mov	r2, r5
   1463c:	mov	sl, r3
   14640:	bl	1549c <__assert_fail@plt+0x4494>
   14644:	subs	r3, r0, r6
   14648:	mov	lr, #0
   1464c:	umull	r4, r2, r6, r5
   14650:	str	r1, [sp, #20]
   14654:	sbcs	r3, r1, r7
   14658:	mla	ip, r6, sl, r2
   1465c:	mov	r2, r1
   14660:	movwcc	lr, #1
   14664:	mla	r7, r7, r5, ip
   14668:	mov	r2, #0
   1466c:	cmp	lr, #0
   14670:	mvnne	r4, #0
   14674:	mvnne	r7, #0
   14678:	subs	r6, r0, r4
   1467c:	sbcs	r6, r1, r7
   14680:	movwcc	r2, #1
   14684:	umull	r3, r6, r4, r5
   14688:	cmp	r2, #0
   1468c:	str	r6, [sp, #16]
   14690:	mvnne	r3, #0
   14694:	cmp	r2, #0
   14698:	umull	r6, ip, r3, r5
   1469c:	mla	r1, r3, sl, ip
   146a0:	ldr	ip, [sp, #16]
   146a4:	str	r1, [sp, #12]
   146a8:	mla	r4, r4, sl, ip
   146ac:	mla	r4, r7, r5, r4
   146b0:	ldr	r7, [sp, #12]
   146b4:	mvnne	r4, #0
   146b8:	subs	r0, r0, r3
   146bc:	ldr	r0, [sp, #20]
   146c0:	mla	r7, r4, r5, r7
   146c4:	sbcs	r0, r0, r4
   146c8:	mov	r0, #0
   146cc:	movwcc	r0, #1
   146d0:	cmp	r0, #0
   146d4:	mov	r1, r0
   146d8:	orr	r0, lr, r2
   146dc:	mvnne	r7, #0
   146e0:	mvnne	r6, #0
   146e4:	orr	r3, r0, r1
   146e8:	b	14f4c <__assert_fail@plt+0x3f44>
   146ec:	ldr	r0, [sp, #36]	; 0x24
   146f0:	orr	r8, r8, #2
   146f4:	b	14f70 <__assert_fail@plt+0x3f68>
   146f8:	cmp	r0, #105	; 0x69
   146fc:	mov	r3, #0
   14700:	bne	14544 <__assert_fail@plt+0x353c>
   14704:	ldrb	r0, [r1, #2]
   14708:	mov	r1, #1
   1470c:	cmp	r0, #66	; 0x42
   14710:	movweq	r1, #3
   14714:	str	r1, [sp, #28]
   14718:	b	14544 <__assert_fail@plt+0x353c>
   1471c:	mvn	r0, #0
   14720:	mvn	r1, #0
   14724:	mov	r2, r5
   14728:	mov	r4, r3
   1472c:	bl	1549c <__assert_fail@plt+0x4494>
   14730:	subs	r0, r0, r6
   14734:	mov	r2, #0
   14738:	sbcs	r0, r1, r7
   1473c:	movwcc	r2, #1
   14740:	umull	r0, r1, r6, r5
   14744:	mla	r1, r6, r4, r1
   14748:	cmp	r2, #0
   1474c:	mov	r3, r2
   14750:	mla	r7, r7, r5, r1
   14754:	mvnne	r0, #0
   14758:	mvnne	r7, #0
   1475c:	mov	r6, r0
   14760:	b	14f4c <__assert_fail@plt+0x3f44>
   14764:	mvn	r0, #0
   14768:	mvn	r1, #0
   1476c:	mov	r2, r5
   14770:	str	r3, [sp, #24]
   14774:	bl	1549c <__assert_fail@plt+0x4494>
   14778:	subs	r3, r0, r6
   1477c:	mov	ip, r0
   14780:	umull	r4, r0, r6, r5
   14784:	mov	sl, #0
   14788:	sbcs	r3, r1, r7
   1478c:	str	r0, [sp, #20]
   14790:	ldr	r0, [sp, #24]
   14794:	mov	r3, #0
   14798:	movwcc	r3, #1
   1479c:	cmp	r3, #0
   147a0:	mvnne	r4, #0
   147a4:	cmp	r3, #0
   147a8:	umull	lr, r2, r4, r5
   147ac:	mla	r2, r4, r0, r2
   147b0:	str	r2, [sp, #16]
   147b4:	ldr	r2, [sp, #20]
   147b8:	mla	r6, r6, r0, r2
   147bc:	ldr	r0, [sp, #16]
   147c0:	mla	r6, r7, r5, r6
   147c4:	mvnne	r6, #0
   147c8:	mla	r7, r6, r5, r0
   147cc:	subs	r0, ip, r4
   147d0:	sbcs	r0, r1, r6
   147d4:	movwcc	sl, #1
   147d8:	cmp	sl, #0
   147dc:	orr	r3, r3, sl
   147e0:	mvnne	lr, #0
   147e4:	mvnne	r7, #0
   147e8:	mov	r6, lr
   147ec:	b	14f4c <__assert_fail@plt+0x3f44>
   147f0:	mvn	r0, #0
   147f4:	mvn	r1, #0
   147f8:	mov	r2, r5
   147fc:	mov	sl, r3
   14800:	bl	1549c <__assert_fail@plt+0x4494>
   14804:	subs	r3, r0, r6
   14808:	mov	ip, r1
   1480c:	umull	r2, lr, r6, r5
   14810:	str	r0, [sp, #20]
   14814:	sbcs	r3, r1, r7
   14818:	mov	r1, #0
   1481c:	mla	r6, r6, sl, lr
   14820:	mov	lr, #0
   14824:	str	ip, [sp, #16]
   14828:	movwcc	r1, #1
   1482c:	mla	r7, r7, r5, r6
   14830:	cmp	r1, #0
   14834:	mvnne	r2, #0
   14838:	cmp	r1, #0
   1483c:	umull	r3, r4, r2, r5
   14840:	mvnne	r7, #0
   14844:	mla	r4, r2, sl, r4
   14848:	subs	r2, r0, r2
   1484c:	sbcs	r2, ip, r7
   14850:	mla	r4, r7, r5, r4
   14854:	movwcc	lr, #1
   14858:	mov	r2, #0
   1485c:	cmp	lr, #0
   14860:	mvnne	r3, #0
   14864:	mvnne	r4, #0
   14868:	subs	r7, r0, r3
   1486c:	mov	r0, r5
   14870:	sbcs	r7, ip, r4
   14874:	movwcc	r2, #1
   14878:	umull	r5, r7, r3, r5
   1487c:	cmp	r2, #0
   14880:	mla	r3, r3, sl, r7
   14884:	mvnne	r5, #0
   14888:	mla	r3, r4, r0, r3
   1488c:	cmp	r2, #0
   14890:	umull	r6, ip, r5, r0
   14894:	mvnne	r3, #0
   14898:	mla	ip, r5, sl, ip
   1489c:	mla	r7, r3, r0, ip
   148a0:	ldr	r0, [sp, #20]
   148a4:	subs	r0, r0, r5
   148a8:	ldr	r0, [sp, #16]
   148ac:	sbcs	r0, r0, r3
   148b0:	mov	r0, #0
   148b4:	movwcc	r0, #1
   148b8:	cmp	r0, #0
   148bc:	mov	r3, r0
   148c0:	orr	r0, r1, lr
   148c4:	orr	r0, r0, r2
   148c8:	mvnne	r7, #0
   148cc:	mvnne	r6, #0
   148d0:	orr	r3, r0, r3
   148d4:	b	14f4c <__assert_fail@plt+0x3f44>
   148d8:	mvn	r0, #0
   148dc:	mvn	r1, #0
   148e0:	mov	r2, r5
   148e4:	mov	r4, r3
   148e8:	str	r3, [sp, #24]
   148ec:	bl	1549c <__assert_fail@plt+0x4494>
   148f0:	umull	r3, r2, r6, r5
   148f4:	mla	r2, r6, r4, r2
   148f8:	subs	r6, r0, r6
   148fc:	sbcs	r6, r1, r7
   14900:	mla	ip, r7, r5, r2
   14904:	ldr	r2, [sp, #24]
   14908:	mov	r6, #0
   1490c:	movwcc	r6, #1
   14910:	cmp	r6, #0
   14914:	str	r6, [sp, #20]
   14918:	mov	r6, #0
   1491c:	mvnne	r3, #0
   14920:	mvnne	ip, #0
   14924:	subs	r4, r0, r3
   14928:	umull	r7, lr, r3, r5
   1492c:	sbcs	r4, r1, ip
   14930:	mla	r3, r3, r2, lr
   14934:	movwcc	r6, #1
   14938:	cmp	r6, #0
   1493c:	str	r6, [sp, #16]
   14940:	mvnne	r7, #0
   14944:	cmp	r6, #0
   14948:	umull	sl, r4, r7, r5
   1494c:	mla	r4, r7, r2, r4
   14950:	mla	r2, ip, r5, r3
   14954:	mov	ip, #0
   14958:	mvnne	r2, #0
   1495c:	subs	r3, r0, r7
   14960:	mla	r6, r2, r5, r4
   14964:	mov	r4, r0
   14968:	sbcs	r2, r1, r2
   1496c:	mov	r0, #0
   14970:	movwcc	r0, #1
   14974:	mov	r3, r4
   14978:	cmp	r0, #0
   1497c:	str	r0, [sp, #12]
   14980:	mov	r0, r1
   14984:	str	r3, [sp, #4]
   14988:	mvnne	sl, #0
   1498c:	mvnne	r6, #0
   14990:	str	r0, [sp, #8]
   14994:	subs	r2, r4, sl
   14998:	ldr	r4, [sp, #24]
   1499c:	sbcs	r2, r1, r6
   149a0:	movwcc	ip, #1
   149a4:	umull	r7, r2, sl, r5
   149a8:	cmp	ip, #0
   149ac:	mla	r2, sl, r4, r2
   149b0:	mvnne	r7, #0
   149b4:	cmp	ip, #0
   149b8:	mov	sl, #0
   149bc:	umull	r1, lr, r7, r5
   149c0:	mla	r2, r6, r5, r2
   149c4:	mvnne	r2, #0
   149c8:	mla	lr, r7, r4, lr
   149cc:	subs	r6, r3, r7
   149d0:	mla	lr, r2, r5, lr
   149d4:	sbcs	r2, r0, r2
   149d8:	movwcc	sl, #1
   149dc:	mov	r2, #0
   149e0:	cmp	sl, #0
   149e4:	mvnne	r1, #0
   149e8:	mvnne	lr, #0
   149ec:	subs	r6, r3, r1
   149f0:	ldr	r3, [sp, #24]
   149f4:	sbcs	r6, r0, lr
   149f8:	umull	r0, r7, r1, r5
   149fc:	movwcc	r2, #1
   14a00:	cmp	r2, #0
   14a04:	mvnne	r0, #0
   14a08:	mla	r1, r1, r3, r7
   14a0c:	cmp	r2, #0
   14a10:	umull	r6, r4, r0, r5
   14a14:	mla	r1, lr, r5, r1
   14a18:	mla	r4, r0, r3, r4
   14a1c:	ldr	r3, [sp, #4]
   14a20:	mvnne	r1, #0
   14a24:	mla	r7, r1, r5, r4
   14a28:	ldr	r5, [sp, #16]
   14a2c:	subs	r0, r3, r0
   14a30:	ldr	r0, [sp, #8]
   14a34:	sbcs	r0, r0, r1
   14a38:	mov	r0, #0
   14a3c:	movwcc	r0, #1
   14a40:	cmp	r0, #0
   14a44:	mov	r1, r0
   14a48:	ldr	r0, [sp, #20]
   14a4c:	mvnne	r7, #0
   14a50:	mvnne	r6, #0
   14a54:	orr	r0, r0, r5
   14a58:	ldr	r5, [sp, #12]
   14a5c:	orr	r0, r0, r5
   14a60:	orr	r0, r0, ip
   14a64:	orr	r0, r0, sl
   14a68:	orr	r0, r0, r2
   14a6c:	orr	r0, r0, r1
   14a70:	b	14eec <__assert_fail@plt+0x3ee4>
   14a74:	mov	r1, #0
   14a78:	lsl	r2, r7, #10
   14a7c:	lsl	r0, r6, #10
   14a80:	lsr	r3, r7, #22
   14a84:	cmp	r1, r7, lsr #22
   14a88:	orr	r2, r2, r6, lsr #22
   14a8c:	mvnne	r0, #0
   14a90:	movwne	r3, #1
   14a94:	cmp	r1, r7, lsr #22
   14a98:	b	14f18 <__assert_fail@plt+0x3f10>
   14a9c:	mvn	r0, #0
   14aa0:	mvn	r1, #0
   14aa4:	mov	r2, r5
   14aa8:	mov	sl, r3
   14aac:	bl	1549c <__assert_fail@plt+0x4494>
   14ab0:	subs	r2, r0, r6
   14ab4:	mov	ip, r0
   14ab8:	mov	r0, #0
   14abc:	sbcs	r2, r1, r7
   14ac0:	movwcc	r0, #1
   14ac4:	umull	r4, r2, r6, r5
   14ac8:	cmp	r0, #0
   14acc:	mla	r2, r6, sl, r2
   14ad0:	str	r0, [sp, #20]
   14ad4:	mvnne	r4, #0
   14ad8:	cmp	r0, #0
   14adc:	mla	r2, r7, r5, r2
   14ae0:	mov	r0, #0
   14ae4:	umull	lr, r3, r4, r5
   14ae8:	mvnne	r2, #0
   14aec:	mla	r3, r4, sl, r3
   14af0:	mla	r6, r2, r5, r3
   14af4:	subs	r3, ip, r4
   14af8:	sbcs	r2, r1, r2
   14afc:	mov	r3, r1
   14b00:	movwcc	r0, #1
   14b04:	str	r3, [sp, #8]
   14b08:	cmp	r0, #0
   14b0c:	str	r0, [sp, #16]
   14b10:	mov	r0, ip
   14b14:	mvnne	lr, #0
   14b18:	mvnne	r6, #0
   14b1c:	str	r0, [sp, #12]
   14b20:	subs	r2, ip, lr
   14b24:	umull	r7, r4, lr, r5
   14b28:	sbcs	r2, r1, r6
   14b2c:	mla	r4, lr, sl, r4
   14b30:	mov	r2, #0
   14b34:	mla	r6, r6, r5, r4
   14b38:	mov	r4, #0
   14b3c:	movwcc	r2, #1
   14b40:	cmp	r2, #0
   14b44:	mvnne	r7, #0
   14b48:	cmp	r2, #0
   14b4c:	umull	r1, ip, r7, r5
   14b50:	mvnne	r6, #0
   14b54:	mla	ip, r7, sl, ip
   14b58:	subs	r7, r0, r7
   14b5c:	mla	lr, r6, r5, ip
   14b60:	sbcs	r7, r3, r6
   14b64:	mov	ip, #0
   14b68:	movwcc	ip, #1
   14b6c:	cmp	ip, #0
   14b70:	mvnne	r1, #0
   14b74:	mvnne	lr, #0
   14b78:	subs	r7, r0, r1
   14b7c:	sbcs	r7, r3, lr
   14b80:	movwcc	r4, #1
   14b84:	umull	r0, r7, r1, r5
   14b88:	cmp	r4, #0
   14b8c:	mla	r1, r1, sl, r7
   14b90:	mvnne	r0, #0
   14b94:	mla	r1, lr, r5, r1
   14b98:	cmp	r4, #0
   14b9c:	umull	r6, r3, r0, r5
   14ba0:	mvnne	r1, #0
   14ba4:	mla	r3, r0, sl, r3
   14ba8:	mla	r7, r1, r5, r3
   14bac:	ldr	r3, [sp, #12]
   14bb0:	subs	r0, r3, r0
   14bb4:	ldr	r3, [sp, #16]
   14bb8:	ldr	r0, [sp, #8]
   14bbc:	sbcs	r0, r0, r1
   14bc0:	mov	r0, #0
   14bc4:	movwcc	r0, #1
   14bc8:	cmp	r0, #0
   14bcc:	mov	r1, r0
   14bd0:	ldr	r0, [sp, #20]
   14bd4:	mvnne	r7, #0
   14bd8:	mvnne	r6, #0
   14bdc:	orr	r0, r0, r3
   14be0:	orr	r0, r0, r2
   14be4:	orr	r0, r0, ip
   14be8:	orr	r0, r0, r4
   14bec:	orr	r3, r0, r1
   14bf0:	b	14f4c <__assert_fail@plt+0x3f44>
   14bf4:	mvn	r0, #0
   14bf8:	mvn	r1, #0
   14bfc:	mov	r2, r5
   14c00:	mov	sl, r3
   14c04:	bl	1549c <__assert_fail@plt+0x4494>
   14c08:	umull	r3, r2, r6, r5
   14c0c:	mov	lr, r1
   14c10:	mov	r1, r0
   14c14:	mla	r2, r6, sl, r2
   14c18:	subs	r6, r0, r6
   14c1c:	mov	r0, #0
   14c20:	sbcs	r6, lr, r7
   14c24:	mla	r2, r7, r5, r2
   14c28:	movwcc	r0, #1
   14c2c:	cmp	r0, #0
   14c30:	str	r0, [sp, #20]
   14c34:	mov	r0, r1
   14c38:	mvnne	r3, #0
   14c3c:	mvnne	r2, #0
   14c40:	str	r0, [sp, #16]
   14c44:	subs	r4, r1, r3
   14c48:	umull	r7, ip, r3, r5
   14c4c:	sbcs	r4, lr, r2
   14c50:	mla	r3, r3, sl, ip
   14c54:	mov	ip, #0
   14c58:	mov	r4, #0
   14c5c:	mla	r2, r2, r5, r3
   14c60:	movwcc	r4, #1
   14c64:	cmp	r4, #0
   14c68:	mvnne	r7, #0
   14c6c:	cmp	r4, #0
   14c70:	umull	r1, r6, r7, r5
   14c74:	mvnne	r2, #0
   14c78:	mla	r6, r7, sl, r6
   14c7c:	mla	r3, r2, r5, r6
   14c80:	subs	r6, r0, r7
   14c84:	sbcs	r2, lr, r2
   14c88:	movwcc	ip, #1
   14c8c:	mov	r2, #0
   14c90:	cmp	ip, #0
   14c94:	mvnne	r1, #0
   14c98:	mvnne	r3, #0
   14c9c:	subs	r6, r0, r1
   14ca0:	sbcs	r6, lr, r3
   14ca4:	movwcc	r2, #1
   14ca8:	umull	r0, r6, r1, r5
   14cac:	cmp	r2, #0
   14cb0:	str	r6, [sp, #12]
   14cb4:	mvnne	r0, #0
   14cb8:	cmp	r2, #0
   14cbc:	umull	r6, r7, r0, r5
   14cc0:	mla	r7, r0, sl, r7
   14cc4:	str	r7, [sp, #8]
   14cc8:	ldr	r7, [sp, #12]
   14ccc:	mla	r1, r1, sl, r7
   14cd0:	mla	r1, r3, r5, r1
   14cd4:	ldr	r3, [sp, #8]
   14cd8:	mvnne	r1, #0
   14cdc:	mla	r7, r1, r5, r3
   14ce0:	ldr	r3, [sp, #16]
   14ce4:	subs	r0, r3, r0
   14ce8:	sbcs	r0, lr, r1
   14cec:	mov	r0, #0
   14cf0:	movwcc	r0, #1
   14cf4:	cmp	r0, #0
   14cf8:	mov	r1, r0
   14cfc:	ldr	r0, [sp, #20]
   14d00:	mvnne	r7, #0
   14d04:	mvnne	r6, #0
   14d08:	orr	r0, r0, r4
   14d0c:	orr	r0, r0, ip
   14d10:	orr	r0, r0, r2
   14d14:	orr	r3, r0, r1
   14d18:	b	14f4c <__assert_fail@plt+0x3f44>
   14d1c:	mvn	r0, #0
   14d20:	mvn	r1, #0
   14d24:	mov	r2, r5
   14d28:	mov	sl, r3
   14d2c:	bl	1549c <__assert_fail@plt+0x4494>
   14d30:	mov	lr, r0
   14d34:	subs	r0, r0, r6
   14d38:	mov	r2, #0
   14d3c:	mov	ip, r1
   14d40:	str	sl, [sp, #24]
   14d44:	sbcs	r0, r1, r7
   14d48:	umull	r3, r1, r6, r5
   14d4c:	str	lr, [sp, #4]
   14d50:	movwcc	r2, #1
   14d54:	mla	r6, r6, sl, r1
   14d58:	mov	r1, #0
   14d5c:	cmp	r2, #0
   14d60:	mla	r7, r7, r5, r6
   14d64:	str	r2, [sp, #20]
   14d68:	mvnne	r3, #0
   14d6c:	cmp	r2, #0
   14d70:	mov	r2, #0
   14d74:	umull	r0, r4, r3, r5
   14d78:	mvnne	r7, #0
   14d7c:	mla	r4, r3, sl, r4
   14d80:	subs	r3, lr, r3
   14d84:	sbcs	r3, ip, r7
   14d88:	mla	r4, r7, r5, r4
   14d8c:	movwcc	r1, #1
   14d90:	cmp	r1, #0
   14d94:	str	r1, [sp, #16]
   14d98:	mvnne	r0, #0
   14d9c:	mvnne	r4, #0
   14da0:	subs	r3, lr, r0
   14da4:	sbcs	r3, ip, r4
   14da8:	movwcc	r2, #1
   14dac:	umull	r6, r3, r0, r5
   14db0:	cmp	r2, #0
   14db4:	mla	r0, r0, sl, r3
   14db8:	str	r2, [sp, #12]
   14dbc:	mvnne	r6, #0
   14dc0:	mla	r0, r4, r5, r0
   14dc4:	cmp	r2, #0
   14dc8:	ldr	r4, [sp, #24]
   14dcc:	umull	r1, r7, r6, r5
   14dd0:	mvnne	r0, #0
   14dd4:	subs	r3, lr, r6
   14dd8:	mla	r7, r6, sl, r7
   14ddc:	mov	r3, ip
   14de0:	mla	r7, r0, r5, r7
   14de4:	sbcs	r0, ip, r0
   14de8:	str	r3, [sp]
   14dec:	mov	r0, #0
   14df0:	movwcc	r0, #1
   14df4:	cmp	r0, #0
   14df8:	str	r0, [sp, #8]
   14dfc:	mvnne	r1, #0
   14e00:	mvnne	r7, #0
   14e04:	subs	r0, lr, r1
   14e08:	sbcs	r0, ip, r7
   14e0c:	mov	ip, #0
   14e10:	movwcc	ip, #1
   14e14:	umull	r6, r0, r1, r5
   14e18:	cmp	ip, #0
   14e1c:	mla	r1, r1, r4, r0
   14e20:	mov	r0, lr
   14e24:	mvnne	r6, #0
   14e28:	mla	r1, r7, r5, r1
   14e2c:	cmp	ip, #0
   14e30:	umull	r2, sl, r6, r5
   14e34:	mvnne	r1, #0
   14e38:	mla	sl, r6, r4, sl
   14e3c:	subs	r6, lr, r6
   14e40:	mov	lr, #0
   14e44:	mla	r7, r1, r5, sl
   14e48:	sbcs	r1, r3, r1
   14e4c:	movwcc	lr, #1
   14e50:	ldr	r1, [sp, #24]
   14e54:	cmp	lr, #0
   14e58:	mvnne	r2, #0
   14e5c:	mvnne	r7, #0
   14e60:	subs	r6, r0, r2
   14e64:	umull	r0, sl, r2, r5
   14e68:	sbcs	r6, r3, r7
   14e6c:	mov	r3, #0
   14e70:	mla	r2, r2, r1, sl
   14e74:	movwcc	r3, #1
   14e78:	mla	r2, r7, r5, r2
   14e7c:	cmp	r3, #0
   14e80:	mvnne	r0, #0
   14e84:	cmp	r3, #0
   14e88:	umull	r6, r4, r0, r5
   14e8c:	mvnne	r2, #0
   14e90:	mla	r4, r0, r1, r4
   14e94:	ldr	r1, [sp, #4]
   14e98:	mla	r7, r2, r5, r4
   14e9c:	ldr	r5, [sp, #16]
   14ea0:	subs	r0, r1, r0
   14ea4:	ldr	r0, [sp]
   14ea8:	sbcs	r0, r0, r2
   14eac:	mov	r0, #0
   14eb0:	movwcc	r0, #1
   14eb4:	cmp	r0, #0
   14eb8:	mov	r2, r0
   14ebc:	ldr	r0, [sp, #20]
   14ec0:	mvnne	r7, #0
   14ec4:	mvnne	r6, #0
   14ec8:	orr	r0, r0, r5
   14ecc:	ldr	r5, [sp, #12]
   14ed0:	orr	r0, r0, r5
   14ed4:	ldr	r5, [sp, #8]
   14ed8:	orr	r0, r0, r5
   14edc:	orr	r0, r0, ip
   14ee0:	orr	r0, r0, lr
   14ee4:	orr	r0, r0, r3
   14ee8:	orr	r0, r0, r2
   14eec:	and	r3, r0, #1
   14ef0:	b	14f4c <__assert_fail@plt+0x3f44>
   14ef4:	mov	r1, #0
   14ef8:	lsl	r2, r7, #9
   14efc:	lsl	r0, r6, #9
   14f00:	lsr	r3, r7, #23
   14f04:	cmp	r1, r7, lsr #23
   14f08:	orr	r2, r2, r6, lsr #23
   14f0c:	mvnne	r0, #0
   14f10:	movwne	r3, #1
   14f14:	cmp	r1, r7, lsr #23
   14f18:	mvnne	r2, #0
   14f1c:	mov	r6, r0
   14f20:	mov	r7, r2
   14f24:	b	14f4c <__assert_fail@plt+0x3f44>
   14f28:	lsl	r1, r7, #1
   14f2c:	lsl	r0, r6, #1
   14f30:	cmp	r7, #0
   14f34:	lsr	r3, r7, #31
   14f38:	orr	r1, r1, r6, lsr #31
   14f3c:	mvnlt	r0, #0
   14f40:	mvnlt	r1, #0
   14f44:	mov	r6, r0
   14f48:	mov	r7, r1
   14f4c:	ldr	r1, [sp, #32]
   14f50:	ldr	r2, [sp, #28]
   14f54:	orr	r8, r3, r8
   14f58:	add	r0, r1, r2
   14f5c:	str	r0, [r9]
   14f60:	ldrb	r0, [r1, r2]
   14f64:	cmp	r0, #0
   14f68:	orrne	r8, r8, #2
   14f6c:	ldr	r0, [sp, #36]	; 0x24
   14f70:	strd	r6, [r0]
   14f74:	mov	r0, r8
   14f78:	sub	sp, fp, #28
   14f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f80:	movw	r0, #24269	; 0x5ecd
   14f84:	movw	r1, #24307	; 0x5ef3
   14f88:	movw	r3, #24323	; 0x5f03
   14f8c:	mov	r2, #85	; 0x55
   14f90:	movt	r0, #1
   14f94:	movt	r1, #1
   14f98:	movt	r3, #1
   14f9c:	bl	11008 <__assert_fail@plt>
   14fa0:	clz	r2, r1
   14fa4:	clz	r3, r0
   14fa8:	lsr	r2, r2, #5
   14fac:	lsr	r3, r3, #5
   14fb0:	orrs	r2, r3, r2
   14fb4:	movwne	r1, #1
   14fb8:	movwne	r0, #1
   14fbc:	cmp	r1, #0
   14fc0:	beq	14ff0 <__assert_fail@plt+0x3fe8>
   14fc4:	mvn	r2, #-2147483648	; 0x80000000
   14fc8:	udiv	r2, r2, r1
   14fcc:	cmp	r2, r0
   14fd0:	bcs	14ff0 <__assert_fail@plt+0x3fe8>
   14fd4:	push	{fp, lr}
   14fd8:	mov	fp, sp
   14fdc:	bl	10f54 <__errno_location@plt>
   14fe0:	mov	r1, #12
   14fe4:	str	r1, [r0]
   14fe8:	mov	r0, #0
   14fec:	pop	{fp, pc}
   14ff0:	b	10dbc <calloc@plt>
   14ff4:	cmp	r0, #0
   14ff8:	movweq	r0, #1
   14ffc:	cmn	r0, #1
   15000:	ble	15008 <__assert_fail@plt+0x4000>
   15004:	b	10edc <malloc@plt>
   15008:	push	{fp, lr}
   1500c:	mov	fp, sp
   15010:	bl	10f54 <__errno_location@plt>
   15014:	mov	r1, #12
   15018:	str	r1, [r0]
   1501c:	mov	r0, #0
   15020:	pop	{fp, pc}
   15024:	push	{fp, lr}
   15028:	mov	fp, sp
   1502c:	cmp	r0, #0
   15030:	beq	1504c <__assert_fail@plt+0x4044>
   15034:	cmp	r1, #0
   15038:	beq	15058 <__assert_fail@plt+0x4050>
   1503c:	cmn	r1, #1
   15040:	ble	15064 <__assert_fail@plt+0x405c>
   15044:	pop	{fp, lr}
   15048:	b	10e64 <realloc@plt>
   1504c:	mov	r0, r1
   15050:	pop	{fp, lr}
   15054:	b	14ff4 <__assert_fail@plt+0x3fec>
   15058:	bl	151f4 <__assert_fail@plt+0x41ec>
   1505c:	mov	r0, #0
   15060:	pop	{fp, pc}
   15064:	bl	10f54 <__errno_location@plt>
   15068:	mov	r1, #12
   1506c:	str	r1, [r0]
   15070:	mov	r0, #0
   15074:	pop	{fp, pc}
   15078:	push	{r4, r5, r6, sl, fp, lr}
   1507c:	add	fp, sp, #16
   15080:	mov	r4, r0
   15084:	bl	10eac <__fpending@plt>
   15088:	ldr	r6, [r4]
   1508c:	mov	r5, r0
   15090:	mov	r0, r4
   15094:	bl	150fc <__assert_fail@plt+0x40f4>
   15098:	tst	r6, #32
   1509c:	bne	150d4 <__assert_fail@plt+0x40cc>
   150a0:	cmp	r0, #0
   150a4:	mov	r4, r0
   150a8:	mvnne	r4, #0
   150ac:	cmp	r5, #0
   150b0:	bne	150e0 <__assert_fail@plt+0x40d8>
   150b4:	cmp	r0, #0
   150b8:	beq	150e0 <__assert_fail@plt+0x40d8>
   150bc:	bl	10f54 <__errno_location@plt>
   150c0:	ldr	r0, [r0]
   150c4:	subs	r4, r0, #9
   150c8:	mvnne	r4, #0
   150cc:	mov	r0, r4
   150d0:	pop	{r4, r5, r6, sl, fp, pc}
   150d4:	mvn	r4, #0
   150d8:	cmp	r0, #0
   150dc:	beq	150e8 <__assert_fail@plt+0x40e0>
   150e0:	mov	r0, r4
   150e4:	pop	{r4, r5, r6, sl, fp, pc}
   150e8:	bl	10f54 <__errno_location@plt>
   150ec:	mov	r1, #0
   150f0:	str	r1, [r0]
   150f4:	mov	r0, r4
   150f8:	pop	{r4, r5, r6, sl, fp, pc}
   150fc:	push	{r4, r5, r6, sl, fp, lr}
   15100:	add	fp, sp, #16
   15104:	sub	sp, sp, #8
   15108:	mov	r4, r0
   1510c:	bl	10f84 <fileno@plt>
   15110:	cmn	r0, #1
   15114:	ble	15188 <__assert_fail@plt+0x4180>
   15118:	mov	r0, r4
   1511c:	bl	10ef4 <__freading@plt>
   15120:	cmp	r0, #0
   15124:	beq	15150 <__assert_fail@plt+0x4148>
   15128:	mov	r0, r4
   1512c:	bl	10f84 <fileno@plt>
   15130:	mov	r1, #1
   15134:	mov	r2, #0
   15138:	mov	r3, #0
   1513c:	str	r1, [sp]
   15140:	bl	10e94 <lseek64@plt>
   15144:	and	r0, r0, r1
   15148:	cmn	r0, #1
   1514c:	beq	15188 <__assert_fail@plt+0x4180>
   15150:	mov	r0, r4
   15154:	bl	15198 <__assert_fail@plt+0x4190>
   15158:	cmp	r0, #0
   1515c:	beq	15188 <__assert_fail@plt+0x4180>
   15160:	bl	10f54 <__errno_location@plt>
   15164:	ldr	r6, [r0]
   15168:	mov	r5, r0
   1516c:	mov	r0, r4
   15170:	bl	10f9c <fclose@plt>
   15174:	cmp	r6, #0
   15178:	strne	r6, [r5]
   1517c:	mvnne	r0, #0
   15180:	sub	sp, fp, #16
   15184:	pop	{r4, r5, r6, sl, fp, pc}
   15188:	mov	r0, r4
   1518c:	sub	sp, fp, #16
   15190:	pop	{r4, r5, r6, sl, fp, lr}
   15194:	b	10f9c <fclose@plt>
   15198:	push	{r4, sl, fp, lr}
   1519c:	add	fp, sp, #8
   151a0:	sub	sp, sp, #8
   151a4:	mov	r4, r0
   151a8:	cmp	r0, #0
   151ac:	beq	151c8 <__assert_fail@plt+0x41c0>
   151b0:	mov	r0, r4
   151b4:	bl	10ef4 <__freading@plt>
   151b8:	cmp	r0, #0
   151bc:	ldrbne	r0, [r4, #1]
   151c0:	tstne	r0, #1
   151c4:	bne	151d8 <__assert_fail@plt+0x41d0>
   151c8:	mov	r0, r4
   151cc:	sub	sp, fp, #8
   151d0:	pop	{r4, sl, fp, lr}
   151d4:	b	10dec <fflush@plt>
   151d8:	mov	r0, #1
   151dc:	mov	r2, #0
   151e0:	mov	r3, #0
   151e4:	str	r0, [sp]
   151e8:	mov	r0, r4
   151ec:	bl	1521c <__assert_fail@plt+0x4214>
   151f0:	b	151c8 <__assert_fail@plt+0x41c0>
   151f4:	push	{r4, r5, r6, sl, fp, lr}
   151f8:	add	fp, sp, #16
   151fc:	mov	r4, r0
   15200:	bl	10f54 <__errno_location@plt>
   15204:	ldr	r6, [r0]
   15208:	mov	r5, r0
   1520c:	mov	r0, r4
   15210:	bl	10df8 <free@plt>
   15214:	str	r6, [r5]
   15218:	pop	{r4, r5, r6, sl, fp, pc}
   1521c:	push	{r4, r5, r6, r7, fp, lr}
   15220:	add	fp, sp, #16
   15224:	sub	sp, sp, #8
   15228:	mov	r4, r0
   1522c:	ldr	r0, [r0, #4]
   15230:	mov	r5, r3
   15234:	mov	r6, r2
   15238:	ldr	r1, [r4, #8]
   1523c:	cmp	r1, r0
   15240:	bne	1525c <__assert_fail@plt+0x4254>
   15244:	ldrd	r0, [r4, #16]
   15248:	cmp	r1, r0
   1524c:	bne	1525c <__assert_fail@plt+0x4254>
   15250:	ldr	r0, [r4, #36]	; 0x24
   15254:	cmp	r0, #0
   15258:	beq	15274 <__assert_fail@plt+0x426c>
   1525c:	mov	r0, r4
   15260:	mov	r2, r6
   15264:	mov	r3, r5
   15268:	sub	sp, fp, #16
   1526c:	pop	{r4, r5, r6, r7, fp, lr}
   15270:	b	10fa8 <fseeko64@plt>
   15274:	ldr	r7, [fp, #8]
   15278:	mov	r0, r4
   1527c:	bl	10f84 <fileno@plt>
   15280:	mov	r2, r6
   15284:	mov	r3, r5
   15288:	str	r7, [sp]
   1528c:	bl	10e94 <lseek64@plt>
   15290:	and	r2, r0, r1
   15294:	cmn	r2, #1
   15298:	mvneq	r0, #0
   1529c:	subeq	sp, fp, #16
   152a0:	popeq	{r4, r5, r6, r7, fp, pc}
   152a4:	strd	r0, [r4, #80]	; 0x50
   152a8:	ldr	r0, [r4]
   152ac:	bic	r0, r0, #16
   152b0:	str	r0, [r4]
   152b4:	mov	r0, #0
   152b8:	sub	sp, fp, #16
   152bc:	pop	{r4, r5, r6, r7, fp, pc}
   152c0:	push	{fp, lr}
   152c4:	mov	fp, sp
   152c8:	mov	r0, #14
   152cc:	bl	10fcc <nl_langinfo@plt>
   152d0:	movw	r1, #22361	; 0x5759
   152d4:	cmp	r0, #0
   152d8:	movt	r1, #1
   152dc:	movne	r1, r0
   152e0:	movw	r0, #24402	; 0x5f52
   152e4:	ldrb	r2, [r1]
   152e8:	movt	r0, #1
   152ec:	cmp	r2, #0
   152f0:	movne	r0, r1
   152f4:	pop	{fp, pc}
   152f8:	push	{r4, r5, r6, r7, fp, lr}
   152fc:	add	fp, sp, #16
   15300:	sub	sp, sp, #8
   15304:	add	r5, sp, #4
   15308:	cmp	r0, #0
   1530c:	mov	r7, r2
   15310:	mov	r4, r1
   15314:	movne	r5, r0
   15318:	mov	r0, r5
   1531c:	bl	10eb8 <mbrtowc@plt>
   15320:	mov	r6, r0
   15324:	cmp	r7, #0
   15328:	beq	1534c <__assert_fail@plt+0x4344>
   1532c:	cmn	r6, #2
   15330:	bcc	1534c <__assert_fail@plt+0x4344>
   15334:	mov	r0, #0
   15338:	bl	15394 <__assert_fail@plt+0x438c>
   1533c:	cmp	r0, #0
   15340:	ldrbeq	r0, [r4]
   15344:	moveq	r6, #1
   15348:	streq	r0, [r5]
   1534c:	mov	r0, r6
   15350:	sub	sp, fp, #16
   15354:	pop	{r4, r5, r6, r7, fp, pc}
   15358:	cmp	r2, #0
   1535c:	beq	1538c <__assert_fail@plt+0x4384>
   15360:	mvn	r3, #0
   15364:	udiv	r3, r3, r2
   15368:	cmp	r3, r1
   1536c:	bcs	1538c <__assert_fail@plt+0x4384>
   15370:	push	{fp, lr}
   15374:	mov	fp, sp
   15378:	bl	10f54 <__errno_location@plt>
   1537c:	mov	r1, #12
   15380:	str	r1, [r0]
   15384:	mov	r0, #0
   15388:	pop	{fp, pc}
   1538c:	mul	r1, r2, r1
   15390:	b	15024 <__assert_fail@plt+0x401c>
   15394:	push	{r4, sl, fp, lr}
   15398:	add	fp, sp, #8
   1539c:	sub	sp, sp, #264	; 0x108
   153a0:	add	r1, sp, #7
   153a4:	movw	r2, #257	; 0x101
   153a8:	bl	153f8 <__assert_fail@plt+0x43f0>
   153ac:	mov	r4, #0
   153b0:	cmp	r0, #0
   153b4:	bne	153ec <__assert_fail@plt+0x43e4>
   153b8:	movw	r1, #24408	; 0x5f58
   153bc:	add	r0, sp, #7
   153c0:	movt	r1, #1
   153c4:	bl	10de0 <strcmp@plt>
   153c8:	cmp	r0, #0
   153cc:	beq	153ec <__assert_fail@plt+0x43e4>
   153d0:	movw	r1, #24410	; 0x5f5a
   153d4:	add	r0, sp, #7
   153d8:	movt	r1, #1
   153dc:	bl	10de0 <strcmp@plt>
   153e0:	mov	r4, r0
   153e4:	cmp	r0, #0
   153e8:	movwne	r4, #1
   153ec:	mov	r0, r4
   153f0:	sub	sp, fp, #8
   153f4:	pop	{r4, sl, fp, pc}
   153f8:	push	{r4, r5, r6, r7, fp, lr}
   153fc:	add	fp, sp, #16
   15400:	mov	r4, r1
   15404:	mov	r1, #0
   15408:	mov	r6, r2
   1540c:	bl	10fb4 <setlocale@plt>
   15410:	cmp	r0, #0
   15414:	beq	15444 <__assert_fail@plt+0x443c>
   15418:	mov	r7, r0
   1541c:	bl	10f3c <strlen@plt>
   15420:	cmp	r0, r6
   15424:	bcs	15464 <__assert_fail@plt+0x445c>
   15428:	add	r2, r0, #1
   1542c:	mov	r0, r4
   15430:	mov	r1, r7
   15434:	bl	10e10 <memcpy@plt>
   15438:	mov	r5, #0
   1543c:	mov	r0, r5
   15440:	pop	{r4, r5, r6, r7, fp, pc}
   15444:	cmp	r6, #0
   15448:	mov	r5, #22
   1544c:	movne	r0, #0
   15450:	strbne	r0, [r4]
   15454:	movne	r0, r5
   15458:	popne	{r4, r5, r6, r7, fp, pc}
   1545c:	mov	r0, r5
   15460:	pop	{r4, r5, r6, r7, fp, pc}
   15464:	mov	r5, #34	; 0x22
   15468:	cmp	r6, #0
   1546c:	beq	1548c <__assert_fail@plt+0x4484>
   15470:	sub	r6, r6, #1
   15474:	mov	r0, r4
   15478:	mov	r1, r7
   1547c:	mov	r2, r6
   15480:	bl	10e10 <memcpy@plt>
   15484:	mov	r0, #0
   15488:	strb	r0, [r4, r6]
   1548c:	mov	r0, r5
   15490:	pop	{r4, r5, r6, r7, fp, pc}
   15494:	mov	r1, #0
   15498:	b	10fb4 <setlocale@plt>
   1549c:	cmp	r3, #0
   154a0:	cmpeq	r2, #0
   154a4:	bne	154bc <__assert_fail@plt+0x44b4>
   154a8:	cmp	r1, #0
   154ac:	cmpeq	r0, #0
   154b0:	mvnne	r1, #0
   154b4:	mvnne	r0, #0
   154b8:	b	154d8 <__assert_fail@plt+0x44d0>
   154bc:	sub	sp, sp, #8
   154c0:	push	{sp, lr}
   154c4:	bl	154e8 <__assert_fail@plt+0x44e0>
   154c8:	ldr	lr, [sp, #4]
   154cc:	add	sp, sp, #8
   154d0:	pop	{r2, r3}
   154d4:	bx	lr
   154d8:	push	{r1, lr}
   154dc:	mov	r0, #8
   154e0:	bl	10dd4 <raise@plt>
   154e4:	pop	{r1, pc}
   154e8:	cmp	r1, r3
   154ec:	cmpeq	r0, r2
   154f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154f4:	mov	r4, r0
   154f8:	movcc	r0, #0
   154fc:	mov	r5, r1
   15500:	ldr	lr, [sp, #36]	; 0x24
   15504:	movcc	r1, r0
   15508:	bcc	15604 <__assert_fail@plt+0x45fc>
   1550c:	cmp	r3, #0
   15510:	clzeq	ip, r2
   15514:	clzne	ip, r3
   15518:	addeq	ip, ip, #32
   1551c:	cmp	r5, #0
   15520:	clzeq	r1, r4
   15524:	addeq	r1, r1, #32
   15528:	clzne	r1, r5
   1552c:	sub	ip, ip, r1
   15530:	sub	sl, ip, #32
   15534:	lsl	r9, r3, ip
   15538:	rsb	fp, ip, #32
   1553c:	orr	r9, r9, r2, lsl sl
   15540:	orr	r9, r9, r2, lsr fp
   15544:	lsl	r8, r2, ip
   15548:	cmp	r5, r9
   1554c:	cmpeq	r4, r8
   15550:	movcc	r0, #0
   15554:	movcc	r1, r0
   15558:	bcc	15574 <__assert_fail@plt+0x456c>
   1555c:	mov	r0, #1
   15560:	subs	r4, r4, r8
   15564:	lsl	r1, r0, sl
   15568:	orr	r1, r1, r0, lsr fp
   1556c:	lsl	r0, r0, ip
   15570:	sbc	r5, r5, r9
   15574:	cmp	ip, #0
   15578:	beq	15604 <__assert_fail@plt+0x45fc>
   1557c:	lsr	r6, r8, #1
   15580:	orr	r6, r6, r9, lsl #31
   15584:	lsr	r7, r9, #1
   15588:	mov	r2, ip
   1558c:	b	155b0 <__assert_fail@plt+0x45a8>
   15590:	subs	r3, r4, r6
   15594:	sbc	r8, r5, r7
   15598:	adds	r3, r3, r3
   1559c:	adc	r8, r8, r8
   155a0:	adds	r4, r3, #1
   155a4:	adc	r5, r8, #0
   155a8:	subs	r2, r2, #1
   155ac:	beq	155cc <__assert_fail@plt+0x45c4>
   155b0:	cmp	r5, r7
   155b4:	cmpeq	r4, r6
   155b8:	bcs	15590 <__assert_fail@plt+0x4588>
   155bc:	adds	r4, r4, r4
   155c0:	adc	r5, r5, r5
   155c4:	subs	r2, r2, #1
   155c8:	bne	155b0 <__assert_fail@plt+0x45a8>
   155cc:	lsr	r3, r4, ip
   155d0:	orr	r3, r3, r5, lsl fp
   155d4:	lsr	r2, r5, ip
   155d8:	orr	r3, r3, r5, lsr sl
   155dc:	adds	r0, r0, r4
   155e0:	mov	r4, r3
   155e4:	lsl	r3, r2, ip
   155e8:	orr	r3, r3, r4, lsl sl
   155ec:	lsl	ip, r4, ip
   155f0:	orr	r3, r3, r4, lsr fp
   155f4:	adc	r1, r1, r5
   155f8:	subs	r0, r0, ip
   155fc:	mov	r5, r2
   15600:	sbc	r1, r1, r3
   15604:	cmp	lr, #0
   15608:	strdne	r4, [lr]
   1560c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15610:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15614:	mov	r7, r0
   15618:	ldr	r6, [pc, #72]	; 15668 <__assert_fail@plt+0x4660>
   1561c:	ldr	r5, [pc, #72]	; 1566c <__assert_fail@plt+0x4664>
   15620:	add	r6, pc, r6
   15624:	add	r5, pc, r5
   15628:	sub	r6, r6, r5
   1562c:	mov	r8, r1
   15630:	mov	r9, r2
   15634:	bl	10d9c <calloc@plt-0x20>
   15638:	asrs	r6, r6, #2
   1563c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15640:	mov	r4, #0
   15644:	add	r4, r4, #1
   15648:	ldr	r3, [r5], #4
   1564c:	mov	r2, r9
   15650:	mov	r1, r8
   15654:	mov	r0, r7
   15658:	blx	r3
   1565c:	cmp	r6, r4
   15660:	bne	15644 <__assert_fail@plt+0x463c>
   15664:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15668:	andeq	r1, r1, r4, ror #17
   1566c:	ldrdeq	r1, [r1], -ip
   15670:	bx	lr
   15674:	ldr	r3, [pc, #12]	; 15688 <__assert_fail@plt+0x4680>
   15678:	mov	r1, #0
   1567c:	add	r3, pc, r3
   15680:	ldr	r2, [r3]
   15684:	b	10f60 <__cxa_atexit@plt>
   15688:	andeq	r1, r1, r8, asr sl

Disassembly of section .fini:

0001568c <.fini>:
   1568c:	push	{r3, lr}
   15690:	pop	{r3, pc}
