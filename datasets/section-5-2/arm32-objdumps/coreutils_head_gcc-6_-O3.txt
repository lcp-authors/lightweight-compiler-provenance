
../repos/coreutils/src/head:     file format elf32-littlearm


Disassembly of section .init:

00010cb0 <.init>:
   10cb0:	push	{r3, lr}
   10cb4:	bl	12338 <__assert_fail@plt+0x13e0>
   10cb8:	pop	{r3, pc}

Disassembly of section .plt:

00010cbc <calloc@plt-0x14>:
   10cbc:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc0:	ldr	lr, [pc, #4]	; 10ccc <calloc@plt-0x4>
   10cc4:	add	lr, pc, lr
   10cc8:	ldr	pc, [lr, #8]!
   10ccc:	andeq	fp, r1, r4, lsr r3

00010cd0 <calloc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #110592	; 0x1b000
   10cd8:	ldr	pc, [ip, #820]!	; 0x334

00010cdc <fputs_unlocked@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #110592	; 0x1b000
   10ce4:	ldr	pc, [ip, #812]!	; 0x32c

00010ce8 <raise@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #110592	; 0x1b000
   10cf0:	ldr	pc, [ip, #804]!	; 0x324

00010cf4 <strcmp@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #110592	; 0x1b000
   10cfc:	ldr	pc, [ip, #796]!	; 0x31c

00010d00 <read@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #110592	; 0x1b000
   10d08:	ldr	pc, [ip, #788]!	; 0x314

00010d0c <fflush@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #110592	; 0x1b000
   10d14:	ldr	pc, [ip, #780]!	; 0x30c

00010d18 <free@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #110592	; 0x1b000
   10d20:	ldr	pc, [ip, #772]!	; 0x304

00010d24 <_exit@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #110592	; 0x1b000
   10d2c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d30 <memcpy@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #110592	; 0x1b000
   10d38:	ldr	pc, [ip, #756]!	; 0x2f4

00010d3c <__strtoull_internal@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #110592	; 0x1b000
   10d44:	ldr	pc, [ip, #748]!	; 0x2ec

00010d48 <mbsinit@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #110592	; 0x1b000
   10d50:	ldr	pc, [ip, #740]!	; 0x2e4

00010d54 <fwrite_unlocked@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #110592	; 0x1b000
   10d5c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d60 <memcmp@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #110592	; 0x1b000
   10d68:	ldr	pc, [ip, #724]!	; 0x2d4

00010d6c <fputc_unlocked@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #110592	; 0x1b000
   10d74:	ldr	pc, [ip, #716]!	; 0x2cc

00010d78 <dcgettext@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #110592	; 0x1b000
   10d80:	ldr	pc, [ip, #708]!	; 0x2c4

00010d84 <realloc@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #110592	; 0x1b000
   10d8c:	ldr	pc, [ip, #700]!	; 0x2bc

00010d90 <textdomain@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #110592	; 0x1b000
   10d98:	ldr	pc, [ip, #692]!	; 0x2b4

00010d9c <rawmemchr@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #110592	; 0x1b000
   10da4:	ldr	pc, [ip, #684]!	; 0x2ac

00010da8 <iswprint@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #110592	; 0x1b000
   10db0:	ldr	pc, [ip, #676]!	; 0x2a4

00010db4 <__fxstat64@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #110592	; 0x1b000
   10dbc:	ldr	pc, [ip, #668]!	; 0x29c

00010dc0 <fwrite@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #110592	; 0x1b000
   10dc8:	ldr	pc, [ip, #660]!	; 0x294

00010dcc <lseek64@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #110592	; 0x1b000
   10dd4:	ldr	pc, [ip, #652]!	; 0x28c

00010dd8 <__ctype_get_mb_cur_max@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #110592	; 0x1b000
   10de0:	ldr	pc, [ip, #644]!	; 0x284

00010de4 <__fpending@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #110592	; 0x1b000
   10dec:	ldr	pc, [ip, #636]!	; 0x27c

00010df0 <mbrtowc@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #110592	; 0x1b000
   10df8:	ldr	pc, [ip, #628]!	; 0x274

00010dfc <error@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #110592	; 0x1b000
   10e04:	ldr	pc, [ip, #620]!	; 0x26c

00010e08 <open64@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #110592	; 0x1b000
   10e10:	ldr	pc, [ip, #612]!	; 0x264

00010e14 <malloc@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #110592	; 0x1b000
   10e1c:	ldr	pc, [ip, #604]!	; 0x25c

00010e20 <__libc_start_main@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #110592	; 0x1b000
   10e28:	ldr	pc, [ip, #596]!	; 0x254

00010e2c <__freading@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #110592	; 0x1b000
   10e34:	ldr	pc, [ip, #588]!	; 0x24c

00010e38 <__gmon_start__@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #110592	; 0x1b000
   10e40:	ldr	pc, [ip, #580]!	; 0x244

00010e44 <getopt_long@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #110592	; 0x1b000
   10e4c:	ldr	pc, [ip, #572]!	; 0x23c

00010e50 <__ctype_b_loc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #110592	; 0x1b000
   10e58:	ldr	pc, [ip, #564]!	; 0x234

00010e5c <exit@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #110592	; 0x1b000
   10e64:	ldr	pc, [ip, #556]!	; 0x22c

00010e68 <strlen@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #110592	; 0x1b000
   10e70:	ldr	pc, [ip, #548]!	; 0x224

00010e74 <strchr@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #110592	; 0x1b000
   10e7c:	ldr	pc, [ip, #540]!	; 0x21c

00010e80 <memrchr@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #110592	; 0x1b000
   10e88:	ldr	pc, [ip, #532]!	; 0x214

00010e8c <__errno_location@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #110592	; 0x1b000
   10e94:	ldr	pc, [ip, #524]!	; 0x20c

00010e98 <__cxa_atexit@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #110592	; 0x1b000
   10ea0:	ldr	pc, [ip, #516]!	; 0x204

00010ea4 <memset@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #110592	; 0x1b000
   10eac:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb0 <__printf_chk@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #110592	; 0x1b000
   10eb8:	ldr	pc, [ip, #500]!	; 0x1f4

00010ebc <fileno@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #110592	; 0x1b000
   10ec4:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec8 <__fprintf_chk@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #110592	; 0x1b000
   10ed0:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed4 <memchr@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #110592	; 0x1b000
   10edc:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee0 <fclose@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #110592	; 0x1b000
   10ee8:	ldr	pc, [ip, #468]!	; 0x1d4

00010eec <fseeko64@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #110592	; 0x1b000
   10ef4:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef8 <setlocale@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #110592	; 0x1b000
   10f00:	ldr	pc, [ip, #452]!	; 0x1c4

00010f04 <strrchr@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #110592	; 0x1b000
   10f0c:	ldr	pc, [ip, #444]!	; 0x1bc

00010f10 <nl_langinfo@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #110592	; 0x1b000
   10f18:	ldr	pc, [ip, #436]!	; 0x1b4

00010f1c <clearerr_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #110592	; 0x1b000
   10f24:	ldr	pc, [ip, #428]!	; 0x1ac

00010f28 <bindtextdomain@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #110592	; 0x1b000
   10f30:	ldr	pc, [ip, #420]!	; 0x1a4

00010f34 <strncmp@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #110592	; 0x1b000
   10f3c:	ldr	pc, [ip, #412]!	; 0x19c

00010f40 <abort@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #110592	; 0x1b000
   10f48:	ldr	pc, [ip, #404]!	; 0x194

00010f4c <close@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #110592	; 0x1b000
   10f54:	ldr	pc, [ip, #396]!	; 0x18c

00010f58 <__assert_fail@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #110592	; 0x1b000
   10f60:	ldr	pc, [ip, #388]!	; 0x184

Disassembly of section .text:

00010f68 <.text>:
   10f68:	ldr	r3, [pc, #68]	; 10fb4 <__assert_fail@plt+0x5c>
   10f6c:	push	{r4, lr}
   10f70:	ldr	r0, [r3]
   10f74:	bl	10f1c <clearerr_unlocked@plt>
   10f78:	bl	10e8c <__errno_location@plt>
   10f7c:	mov	r2, #5
   10f80:	ldr	r1, [pc, #48]	; 10fb8 <__assert_fail@plt+0x60>
   10f84:	ldr	r4, [r0]
   10f88:	mov	r0, #0
   10f8c:	bl	10d78 <dcgettext@plt>
   10f90:	ldr	r1, [pc, #36]	; 10fbc <__assert_fail@plt+0x64>
   10f94:	mov	r5, r0
   10f98:	mov	r0, #4
   10f9c:	bl	15a24 <__assert_fail@plt+0x4acc>
   10fa0:	mov	r2, r5
   10fa4:	mov	r1, r4
   10fa8:	mov	r3, r0
   10fac:	mov	r0, #1
   10fb0:	bl	10dfc <error@plt>
   10fb4:	andeq	ip, r2, r4, asr r1
   10fb8:	andeq	sl, r1, r4, ror r3
   10fbc:	andeq	sl, r1, r8, lsl #7
   10fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fc4:	mov	r5, r0
   10fc8:	sub	sp, sp, #316	; 0x13c
   10fcc:	ldr	r0, [r1]
   10fd0:	mov	r4, r1
   10fd4:	bl	134c8 <__assert_fail@plt+0x2570>
   10fd8:	ldr	r1, [pc, #3828]	; 11ed4 <__assert_fail@plt+0xf7c>
   10fdc:	mov	r0, #6
   10fe0:	bl	10ef8 <setlocale@plt>
   10fe4:	ldr	r1, [pc, #3820]	; 11ed8 <__assert_fail@plt+0xf80>
   10fe8:	ldr	r0, [pc, #3820]	; 11edc <__assert_fail@plt+0xf84>
   10fec:	bl	10f28 <bindtextdomain@plt>
   10ff0:	ldr	sl, [pc, #3816]	; 11ee0 <__assert_fail@plt+0xf88>
   10ff4:	ldr	r0, [pc, #3808]	; 11edc <__assert_fail@plt+0xf84>
   10ff8:	bl	10d90 <textdomain@plt>
   10ffc:	ldr	r0, [pc, #3808]	; 11ee4 <__assert_fail@plt+0xf8c>
   11000:	bl	1a230 <__assert_fail@plt+0x92d8>
   11004:	mov	r3, #0
   11008:	mov	r2, #10
   1100c:	cmp	r5, #1
   11010:	strb	r2, [sl]
   11014:	strb	r3, [sl, #1]
   11018:	strb	r3, [sl, #2]
   1101c:	ble	11030 <__assert_fail@plt+0xd8>
   11020:	ldr	r1, [r4, #4]
   11024:	ldrb	r2, [r1]
   11028:	cmp	r2, #45	; 0x2d
   1102c:	beq	111b4 <__assert_fail@plt+0x25c>
   11030:	str	r3, [sp, #24]
   11034:	mov	r3, #1
   11038:	str	r3, [sp, #32]
   1103c:	mov	r2, #10
   11040:	mov	r3, #0
   11044:	strd	r2, [sp, #16]
   11048:	ldr	r8, [pc, #3736]	; 11ee8 <__assert_fail@plt+0xf90>
   1104c:	ldr	r7, [pc, #3736]	; 11eec <__assert_fail@plt+0xf94>
   11050:	ldr	r9, [pc, #3736]	; 11ef0 <__assert_fail@plt+0xf98>
   11054:	mov	fp, #1
   11058:	mov	r6, #0
   1105c:	str	r6, [sp, #28]
   11060:	str	r6, [sp]
   11064:	mov	r3, r8
   11068:	mov	r2, r7
   1106c:	mov	r1, r4
   11070:	mov	r0, r5
   11074:	bl	10e44 <getopt_long@plt>
   11078:	cmn	r0, #1
   1107c:	beq	1132c <__assert_fail@plt+0x3d4>
   11080:	cmp	r0, #110	; 0x6e
   11084:	beq	1117c <__assert_fail@plt+0x224>
   11088:	ble	110b0 <__assert_fail@plt+0x158>
   1108c:	cmp	r0, #118	; 0x76
   11090:	beq	11174 <__assert_fail@plt+0x21c>
   11094:	ble	11120 <__assert_fail@plt+0x1c8>
   11098:	cmp	r0, #122	; 0x7a
   1109c:	beq	11118 <__assert_fail@plt+0x1c0>
   110a0:	cmp	r0, #256	; 0x100
   110a4:	bne	112f8 <__assert_fail@plt+0x3a0>
   110a8:	strb	fp, [sl, #3]
   110ac:	b	11060 <__assert_fail@plt+0x108>
   110b0:	cmn	r0, #2
   110b4:	beq	11134 <__assert_fail@plt+0x1dc>
   110b8:	cmp	r0, #99	; 0x63
   110bc:	beq	110e0 <__assert_fail@plt+0x188>
   110c0:	cmn	r0, #3
   110c4:	mov	r3, r0
   110c8:	beq	1113c <__assert_fail@plt+0x1e4>
   110cc:	sub	r2, r3, #48	; 0x30
   110d0:	cmp	r2, #9
   110d4:	bls	11300 <__assert_fail@plt+0x3a8>
   110d8:	mov	r0, #1
   110dc:	bl	12e44 <__assert_fail@plt+0x1eec>
   110e0:	ldr	r3, [r9]
   110e4:	mov	r0, r6
   110e8:	ldrb	r2, [r3]
   110ec:	cmp	r2, #45	; 0x2d
   110f0:	addeq	r3, r3, #1
   110f4:	moveq	r2, #1
   110f8:	movne	r2, #0
   110fc:	streq	r3, [r9]
   11100:	ldr	r1, [r9]
   11104:	str	r2, [sp, #28]
   11108:	bl	12424 <__assert_fail@plt+0x14cc>
   1110c:	str	r6, [sp, #32]
   11110:	strd	r0, [sp, #16]
   11114:	b	11060 <__assert_fail@plt+0x108>
   11118:	strb	r6, [sl]
   1111c:	b	11060 <__assert_fail@plt+0x108>
   11120:	cmp	r0, #113	; 0x71
   11124:	bne	112f8 <__assert_fail@plt+0x3a0>
   11128:	mov	r3, #2
   1112c:	str	r3, [sp, #24]
   11130:	b	11060 <__assert_fail@plt+0x108>
   11134:	mov	r0, #0
   11138:	bl	12e44 <__assert_fail@plt+0x1eec>
   1113c:	ldr	r3, [pc, #3504]	; 11ef4 <__assert_fail@plt+0xf9c>
   11140:	ldr	r0, [pc, #3600]	; 11f58 <__assert_fail@plt+0x1000>
   11144:	ldr	r1, [pc, #3500]	; 11ef8 <__assert_fail@plt+0xfa0>
   11148:	ldr	r2, [pc, #3500]	; 11efc <__assert_fail@plt+0xfa4>
   1114c:	str	r6, [sp, #8]
   11150:	ldr	r0, [r0]
   11154:	ldr	r3, [r3]
   11158:	str	r1, [sp, #4]
   1115c:	str	r2, [sp]
   11160:	ldr	r1, [pc, #3480]	; 11f00 <__assert_fail@plt+0xfa8>
   11164:	ldr	r2, [pc, #3480]	; 11f04 <__assert_fail@plt+0xfac>
   11168:	bl	17dd0 <__assert_fail@plt+0x6e78>
   1116c:	mov	r0, #0
   11170:	bl	10e5c <exit@plt>
   11174:	str	fp, [sp, #24]
   11178:	b	11060 <__assert_fail@plt+0x108>
   1117c:	ldr	r3, [r9]
   11180:	mov	r0, fp
   11184:	ldrb	r2, [r3]
   11188:	cmp	r2, #45	; 0x2d
   1118c:	addeq	r3, r3, #1
   11190:	moveq	r2, #1
   11194:	movne	r2, #0
   11198:	streq	r3, [r9]
   1119c:	ldr	r1, [r9]
   111a0:	str	r2, [sp, #28]
   111a4:	bl	12424 <__assert_fail@plt+0x14cc>
   111a8:	str	fp, [sp, #32]
   111ac:	strd	r0, [sp, #16]
   111b0:	b	11060 <__assert_fail@plt+0x108>
   111b4:	ldrb	r2, [r1, #1]
   111b8:	sub	r2, r2, #48	; 0x30
   111bc:	cmp	r2, #9
   111c0:	bhi	11030 <__assert_fail@plt+0xd8>
   111c4:	add	r1, r1, #1
   111c8:	mov	r3, r1
   111cc:	ldrb	r2, [r3, #1]!
   111d0:	sub	r2, r2, #48	; 0x30
   111d4:	cmp	r2, #9
   111d8:	bls	111cc <__assert_fail@plt+0x274>
   111dc:	mov	lr, #0
   111e0:	mov	r9, lr
   111e4:	mov	r7, lr
   111e8:	mov	r2, r3
   111ec:	mov	fp, #10
   111f0:	mov	r8, #1
   111f4:	str	r8, [sp, #32]
   111f8:	str	lr, [sp, #24]
   111fc:	mov	r6, r2
   11200:	ldrb	r0, [r2], #1
   11204:	cmp	r0, #0
   11208:	beq	11b40 <__assert_fail@plt+0xbe8>
   1120c:	sub	ip, r0, #98	; 0x62
   11210:	cmp	ip, #24
   11214:	ldrls	pc, [pc, ip, lsl #2]
   11218:	b	112c4 <__assert_fail@plt+0x36c>
   1121c:	andeq	r1, r1, r0, lsl #5
   11220:			; <UNDEFINED> instruction: 0x000112b4
   11224:	andeq	r1, r1, r4, asr #5
   11228:	andeq	r1, r1, r4, asr #5
   1122c:	andeq	r1, r1, r4, asr #5
   11230:	andeq	r1, r1, r4, asr #5
   11234:	andeq	r1, r1, r4, asr #5
   11238:	andeq	r1, r1, r4, asr #5
   1123c:	andeq	r1, r1, r4, asr #5
   11240:	andeq	r1, r1, r0, lsl #5
   11244:	andeq	r1, r1, ip, lsr #5
   11248:	andeq	r1, r1, r0, lsl #5
   1124c:	andeq	r1, r1, r4, asr #5
   11250:	andeq	r1, r1, r4, asr #5
   11254:	andeq	r1, r1, r4, asr #5
   11258:	andeq	r1, r1, r0, lsr #5
   1125c:	andeq	r1, r1, r4, asr #5
   11260:	andeq	r1, r1, r4, asr #5
   11264:	andeq	r1, r1, r4, asr #5
   11268:	andeq	r1, r1, r4, asr #5
   1126c:	muleq	r1, r8, r2
   11270:	andeq	r1, r1, r4, asr #5
   11274:	andeq	r1, r1, r4, asr #5
   11278:	andeq	r1, r1, r4, asr #5
   1127c:	andeq	r1, r1, ip, lsl #5
   11280:	mov	r9, r0
   11284:	str	r7, [sp, #32]
   11288:	b	111fc <__assert_fail@plt+0x2a4>
   1128c:	mov	lr, r8
   11290:	mov	fp, r7
   11294:	b	111fc <__assert_fail@plt+0x2a4>
   11298:	str	r8, [sp, #24]
   1129c:	b	111fc <__assert_fail@plt+0x2a4>
   112a0:	mov	r0, #2
   112a4:	str	r0, [sp, #24]
   112a8:	b	111fc <__assert_fail@plt+0x2a4>
   112ac:	str	r8, [sp, #32]
   112b0:	b	111fc <__assert_fail@plt+0x2a4>
   112b4:	mov	r0, #0
   112b8:	mov	r9, r7
   112bc:	str	r0, [sp, #32]
   112c0:	b	111fc <__assert_fail@plt+0x2a4>
   112c4:	cmp	lr, #0
   112c8:	mov	r2, #5
   112cc:	ldr	r1, [pc, #3124]	; 11f08 <__assert_fail@plt+0xfb0>
   112d0:	mov	r0, #0
   112d4:	strbne	fp, [sl]
   112d8:	bl	10d78 <dcgettext@plt>
   112dc:	mov	r1, #0
   112e0:	ldrb	r3, [r6]
   112e4:	mov	r2, r0
   112e8:	mov	r0, r1
   112ec:	bl	10dfc <error@plt>
   112f0:	mov	r0, #1
   112f4:	bl	12e44 <__assert_fail@plt+0x1eec>
   112f8:	mov	r3, r0
   112fc:	b	110cc <__assert_fail@plt+0x174>
   11300:	mov	r2, #5
   11304:	ldr	r1, [pc, #3068]	; 11f08 <__assert_fail@plt+0xfb0>
   11308:	mov	r0, #0
   1130c:	str	r3, [sp, #16]
   11310:	bl	10d78 <dcgettext@plt>
   11314:	mov	r1, #0
   11318:	ldr	r3, [sp, #16]
   1131c:	mov	r2, r0
   11320:	mov	r0, r1
   11324:	bl	10dfc <error@plt>
   11328:	b	110d8 <__assert_fail@plt+0x180>
   1132c:	ldr	r3, [sp, #24]
   11330:	cmp	r3, #1
   11334:	beq	11354 <__assert_fail@plt+0x3fc>
   11338:	cmp	r3, #0
   1133c:	bne	1135c <__assert_fail@plt+0x404>
   11340:	ldr	r2, [pc, #3012]	; 11f0c <__assert_fail@plt+0xfb4>
   11344:	sub	r3, r5, #1
   11348:	ldr	r2, [r2]
   1134c:	cmp	r3, r2
   11350:	ble	1135c <__assert_fail@plt+0x404>
   11354:	mov	r3, #1
   11358:	strb	r3, [sl, #2]
   1135c:	ldr	r3, [sp, #32]
   11360:	ldr	r2, [sp, #28]
   11364:	eor	r3, r3, #1
   11368:	tst	r2, r3
   1136c:	beq	11380 <__assert_fail@plt+0x428>
   11370:	ldrd	r2, [sp, #16]
   11374:	cmp	r2, #0
   11378:	sbcs	r3, r3, #0
   1137c:	blt	12214 <__assert_fail@plt+0x12bc>
   11380:	ldr	r3, [pc, #2948]	; 11f0c <__assert_fail@plt+0xfb4>
   11384:	ldrd	r0, [sp, #16]
   11388:	ldr	r2, [pc, #2944]	; 11f10 <__assert_fail@plt+0xfb8>
   1138c:	ldr	r3, [r3]
   11390:	str	r2, [sp, #56]	; 0x38
   11394:	cmp	r3, r5
   11398:	addlt	r4, r4, r3, lsl #2
   1139c:	ldrge	r4, [pc, #2928]	; 11f14 <__assert_fail@plt+0xfbc>
   113a0:	str	r0, [sp, #80]	; 0x50
   113a4:	sub	r3, r4, #4
   113a8:	str	r3, [sp, #40]	; 0x28
   113ac:	and	r3, r2, r0
   113b0:	str	r3, [sp, #108]	; 0x6c
   113b4:	rsb	r3, r3, #8192	; 0x2000
   113b8:	str	r3, [sp, #104]	; 0x68
   113bc:	add	r3, r3, r0
   113c0:	mov	r2, r0
   113c4:	lsr	r3, r3, #13
   113c8:	add	ip, r3, #1
   113cc:	adds	r2, r2, #8192	; 0x2000
   113d0:	mov	r3, r1
   113d4:	adc	r3, r3, #0
   113d8:	lsr	r1, ip, #1
   113dc:	strd	r2, [sp, #88]	; 0x58
   113e0:	mov	r3, #1
   113e4:	str	ip, [sp, #52]	; 0x34
   113e8:	str	r1, [sp, #96]	; 0x60
   113ec:	str	r3, [sp, #44]	; 0x2c
   113f0:	b	11490 <__assert_fail@plt+0x538>
   113f4:	mov	r3, #1
   113f8:	mov	r2, #5
   113fc:	ldr	r1, [pc, #2836]	; 11f18 <__assert_fail@plt+0xfc0>
   11400:	strb	r3, [sl, #1]
   11404:	bl	10d78 <dcgettext@plt>
   11408:	str	r4, [sp, #36]	; 0x24
   1140c:	str	r0, [sp, #24]
   11410:	ldrb	r3, [sl, #2]
   11414:	cmp	r3, #0
   11418:	beq	1144c <__assert_fail@plt+0x4f4>
   1141c:	ldr	r4, [pc, #2808]	; 11f1c <__assert_fail@plt+0xfc4>
   11420:	ldr	r0, [pc, #2732]	; 11ed4 <__assert_fail@plt+0xf7c>
   11424:	ldr	r2, [pc, #2804]	; 11f20 <__assert_fail@plt+0xfc8>
   11428:	ldrb	ip, [r4]
   1142c:	ldr	r3, [sp, #24]
   11430:	ldr	r1, [pc, #2796]	; 11f24 <__assert_fail@plt+0xfcc>
   11434:	cmp	ip, #0
   11438:	movne	r2, r0
   1143c:	mov	r0, #1
   11440:	bl	10eb0 <__printf_chk@plt>
   11444:	mov	r3, #0
   11448:	strb	r3, [r4]
   1144c:	ldr	r3, [sp, #28]
   11450:	cmp	r3, #0
   11454:	bne	1153c <__assert_fail@plt+0x5e4>
   11458:	ldr	r3, [sp, #32]
   1145c:	ldr	r1, [sp, #36]	; 0x24
   11460:	cmp	r3, #0
   11464:	ldr	r0, [sp, #24]
   11468:	ldrd	r2, [sp, #16]
   1146c:	bne	116d4 <__assert_fail@plt+0x77c>
   11470:	bl	1255c <__assert_fail@plt+0x1604>
   11474:	mov	r4, r0
   11478:	ldr	r3, [sp, #48]	; 0x30
   1147c:	cmp	r3, #0
   11480:	bne	1151c <__assert_fail@plt+0x5c4>
   11484:	ldr	r3, [sp, #44]	; 0x2c
   11488:	and	r3, r3, r4
   1148c:	str	r3, [sp, #44]	; 0x2c
   11490:	ldr	r2, [sp, #40]	; 0x28
   11494:	ldr	r3, [r2, #4]!
   11498:	cmp	r3, #0
   1149c:	str	r3, [sp, #24]
   114a0:	str	r2, [sp, #40]	; 0x28
   114a4:	beq	11754 <__assert_fail@plt+0x7fc>
   114a8:	ldr	r1, [pc, #2680]	; 11f28 <__assert_fail@plt+0xfd0>
   114ac:	ldr	r0, [sp, #24]
   114b0:	bl	10cf4 <strcmp@plt>
   114b4:	subs	r4, r0, #0
   114b8:	str	r4, [sp, #48]	; 0x30
   114bc:	beq	113f4 <__assert_fail@plt+0x49c>
   114c0:	mov	r1, #0
   114c4:	ldr	r0, [sp, #24]
   114c8:	bl	10e08 <open64@plt>
   114cc:	subs	r3, r0, #0
   114d0:	str	r3, [sp, #36]	; 0x24
   114d4:	bge	11410 <__assert_fail@plt+0x4b8>
   114d8:	bl	10e8c <__errno_location@plt>
   114dc:	ldr	r1, [pc, #2632]	; 11f2c <__assert_fail@plt+0xfd4>
   114e0:	mov	r2, #5
   114e4:	mov	r4, #0
   114e8:	ldr	r5, [r0]
   114ec:	mov	r0, r4
   114f0:	bl	10d78 <dcgettext@plt>
   114f4:	ldr	r1, [sp, #24]
   114f8:	mov	r6, r0
   114fc:	mov	r0, #4
   11500:	bl	15a24 <__assert_fail@plt+0x4acc>
   11504:	mov	r2, r6
   11508:	mov	r1, r5
   1150c:	mov	r3, r0
   11510:	mov	r0, r4
   11514:	bl	10dfc <error@plt>
   11518:	b	11484 <__assert_fail@plt+0x52c>
   1151c:	ldr	r0, [sp, #36]	; 0x24
   11520:	bl	10f4c <close@plt>
   11524:	cmp	r0, #0
   11528:	beq	11484 <__assert_fail@plt+0x52c>
   1152c:	bl	10e8c <__errno_location@plt>
   11530:	mov	r2, #5
   11534:	ldr	r1, [pc, #2548]	; 11f30 <__assert_fail@plt+0xfd8>
   11538:	b	114e4 <__assert_fail@plt+0x58c>
   1153c:	add	r2, sp, #208	; 0xd0
   11540:	ldr	r1, [sp, #36]	; 0x24
   11544:	mov	r0, #3
   11548:	bl	10db4 <__fxstat64@plt>
   1154c:	cmp	r0, #0
   11550:	bne	11774 <__assert_fail@plt+0x81c>
   11554:	ldrb	r4, [sl, #3]
   11558:	cmp	r4, #0
   1155c:	bne	11570 <__assert_fail@plt+0x618>
   11560:	ldr	r3, [sp, #224]	; 0xe0
   11564:	and	r3, r3, #53248	; 0xd000
   11568:	cmp	r3, #32768	; 0x8000
   1156c:	beq	11b98 <__assert_fail@plt+0xc40>
   11570:	ldr	r3, [sp, #32]
   11574:	mvn	r2, #0
   11578:	cmp	r3, #0
   1157c:	mvn	r3, #0
   11580:	strd	r2, [sp, #72]	; 0x48
   11584:	beq	117b8 <__assert_fail@plt+0x860>
   11588:	ldr	r0, [pc, #2468]	; 11f34 <__assert_fail@plt+0xfdc>
   1158c:	bl	17fb8 <__assert_fail@plt+0x7060>
   11590:	mov	r8, #0
   11594:	add	r3, r0, #8192	; 0x2000
   11598:	str	r0, [sp, #60]	; 0x3c
   1159c:	str	r8, [r3, #8]
   115a0:	str	r8, [r3, #4]
   115a4:	str	r8, [r3, #12]
   115a8:	mov	r7, r0
   115ac:	ldr	r0, [pc, #2432]	; 11f34 <__assert_fail@plt+0xfdc>
   115b0:	bl	17fb8 <__assert_fail@plt+0x7060>
   115b4:	ldrd	r2, [sp, #72]	; 0x48
   115b8:	strd	r2, [sp, #64]	; 0x40
   115bc:	mov	r9, r0
   115c0:	mov	r2, #8192	; 0x2000
   115c4:	mov	r1, r9
   115c8:	ldr	r0, [sp, #36]	; 0x24
   115cc:	bl	17514 <__assert_fail@plt+0x65bc>
   115d0:	sub	r3, r0, #1
   115d4:	cmn	r3, #3
   115d8:	mov	fp, r0
   115dc:	bhi	1192c <__assert_fail@plt+0x9d4>
   115e0:	ldrd	r2, [sp, #16]
   115e4:	orrs	r3, r2, r3
   115e8:	beq	116e0 <__assert_fail@plt+0x788>
   115ec:	ldrb	r5, [sl]
   115f0:	add	r4, r9, #8192	; 0x2000
   115f4:	mov	r3, #0
   115f8:	str	r0, [r4, #4]
   115fc:	str	r3, [r4, #8]
   11600:	add	r6, r9, r0
   11604:	str	r3, [r4, #12]
   11608:	mov	r0, r9
   1160c:	strb	r5, [r9, fp]
   11610:	ldr	fp, [r4, #8]
   11614:	b	11624 <__assert_fail@plt+0x6cc>
   11618:	add	r0, r0, #1
   1161c:	mov	fp, r3
   11620:	str	r3, [r4, #8]
   11624:	mov	r1, r5
   11628:	bl	10d9c <rawmemchr@plt>
   1162c:	add	r3, fp, #1
   11630:	cmp	r6, r0
   11634:	bhi	11618 <__assert_fail@plt+0x6c0>
   11638:	ldr	r3, [sp, #60]	; 0x3c
   1163c:	ldr	r2, [r4, #4]
   11640:	add	r5, r3, #8192	; 0x2000
   11644:	ldr	r1, [sp, #56]	; 0x38
   11648:	ldr	r0, [r5, #4]
   1164c:	add	r8, r8, fp
   11650:	add	r3, r2, r0
   11654:	cmp	r3, r1
   11658:	bls	11728 <__assert_fail@plt+0x7d0>
   1165c:	add	r4, r7, #8192	; 0x2000
   11660:	ldrd	r0, [sp, #16]
   11664:	ldr	r2, [r4, #8]
   11668:	mov	r3, #0
   1166c:	sub	r2, r8, r2
   11670:	cmp	r1, r3
   11674:	cmpeq	r0, r2
   11678:	str	r9, [r5, #12]
   1167c:	bcs	11714 <__assert_fail@plt+0x7bc>
   11680:	ldrd	r2, [sp, #64]	; 0x40
   11684:	ldr	r5, [r4, #4]
   11688:	adds	r2, r2, r5
   1168c:	adc	r3, r3, #0
   11690:	cmp	r5, #0
   11694:	strd	r2, [sp, #64]	; 0x40
   11698:	beq	116bc <__assert_fail@plt+0x764>
   1169c:	ldr	r3, [pc, #2228]	; 11f58 <__assert_fail@plt+0x1000>
   116a0:	mov	r2, r5
   116a4:	mov	r1, #1
   116a8:	ldr	r3, [r3]
   116ac:	mov	r0, r7
   116b0:	bl	10d54 <fwrite_unlocked@plt>
   116b4:	cmp	r5, r0
   116b8:	bhi	11710 <__assert_fail@plt+0x7b8>
   116bc:	ldr	r3, [r4, #8]
   116c0:	str	r9, [sp, #60]	; 0x3c
   116c4:	sub	r8, r8, r3
   116c8:	mov	r9, r7
   116cc:	ldr	r7, [r4, #12]
   116d0:	b	115c0 <__assert_fail@plt+0x668>
   116d4:	bl	12658 <__assert_fail@plt+0x1700>
   116d8:	mov	r4, r0
   116dc:	b	11478 <__assert_fail@plt+0x520>
   116e0:	ldr	r3, [pc, #2160]	; 11f58 <__assert_fail@plt+0x1000>
   116e4:	mov	r2, r0
   116e8:	mov	r1, #1
   116ec:	ldr	r3, [r3]
   116f0:	mov	r0, r9
   116f4:	bl	10d54 <fwrite_unlocked@plt>
   116f8:	ldrd	r2, [sp, #64]	; 0x40
   116fc:	adds	r2, r2, fp
   11700:	adc	r3, r3, #0
   11704:	strd	r2, [sp, #64]	; 0x40
   11708:	cmp	fp, r0
   1170c:	bls	115c0 <__assert_fail@plt+0x668>
   11710:	bl	10f68 <__assert_fail@plt+0x10>
   11714:	ldr	r0, [pc, #2072]	; 11f34 <__assert_fail@plt+0xfdc>
   11718:	bl	17fb8 <__assert_fail@plt+0x7060>
   1171c:	str	r9, [sp, #60]	; 0x3c
   11720:	mov	r9, r0
   11724:	b	115c0 <__assert_fail@plt+0x668>
   11728:	ldr	r3, [sp, #60]	; 0x3c
   1172c:	mov	r1, r9
   11730:	add	r0, r3, r0
   11734:	bl	10d30 <memcpy@plt>
   11738:	ldmib	r4, {r0, r1}
   1173c:	ldr	r2, [r5, #4]
   11740:	ldr	r3, [r5, #8]
   11744:	add	r2, r2, r0
   11748:	add	r3, r3, r1
   1174c:	stmib	r5, {r2, r3}
   11750:	b	115c0 <__assert_fail@plt+0x668>
   11754:	mov	r9, r3
   11758:	ldrb	r3, [sl, #1]
   1175c:	cmp	r3, #0
   11760:	bne	11b74 <__assert_fail@plt+0xc1c>
   11764:	ldr	r3, [sp, #44]	; 0x2c
   11768:	eor	r0, r3, #1
   1176c:	add	sp, sp, #316	; 0x13c
   11770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11774:	bl	10e8c <__errno_location@plt>
   11778:	mov	r4, #0
   1177c:	mov	r2, #5
   11780:	ldr	r1, [pc, #1968]	; 11f38 <__assert_fail@plt+0xfe0>
   11784:	ldr	r5, [r0]
   11788:	mov	r0, r4
   1178c:	bl	10d78 <dcgettext@plt>
   11790:	ldr	r1, [sp, #24]
   11794:	mov	r6, r0
   11798:	mov	r0, #4
   1179c:	bl	15a24 <__assert_fail@plt+0x4acc>
   117a0:	mov	r2, r6
   117a4:	mov	r1, r5
   117a8:	mov	r3, r0
   117ac:	mov	r0, r4
   117b0:	bl	10dfc <error@plt>
   117b4:	b	11478 <__assert_fail@plt+0x520>
   117b8:	ldrd	r0, [sp, #88]	; 0x58
   117bc:	mov	r3, #0
   117c0:	mvn	r2, #0
   117c4:	cmp	r1, r3
   117c8:	cmpeq	r0, r2
   117cc:	ldrd	r2, [sp, #72]	; 0x48
   117d0:	strd	r2, [sp, #64]	; 0x40
   117d4:	bhi	1228c <__assert_fail@plt+0x1334>
   117d8:	ldr	r3, [sp, #80]	; 0x50
   117dc:	cmp	r3, #1048576	; 0x100000
   117e0:	bls	11d68 <__assert_fail@plt+0xe10>
   117e4:	ldr	r3, [sp, #52]	; 0x34
   117e8:	mov	r9, #0
   117ec:	cmp	r3, #16
   117f0:	movcs	r3, #16
   117f4:	str	r9, [sp, #84]	; 0x54
   117f8:	str	r3, [sp, #100]	; 0x64
   117fc:	mov	r4, r9
   11800:	mov	r7, r9
   11804:	str	r9, [sp, #60]	; 0x3c
   11808:	mov	r5, #1
   1180c:	b	1185c <__assert_fail@plt+0x904>
   11810:	bl	10e8c <__errno_location@plt>
   11814:	ldr	r8, [r0]
   11818:	cmp	r8, #0
   1181c:	bne	11fd8 <__assert_fail@plt+0x1080>
   11820:	ldr	r8, [sp, #28]
   11824:	ldr	r2, [sp, #52]	; 0x34
   11828:	add	r3, r9, #1
   1182c:	cmp	r2, r3
   11830:	beq	118b0 <__assert_fail@plt+0x958>
   11834:	cmp	r4, #0
   11838:	bne	118b0 <__assert_fail@plt+0x958>
   1183c:	add	fp, r5, #1
   11840:	mov	r0, fp
   11844:	ldr	r1, [sp, #52]	; 0x34
   11848:	bl	19d24 <__assert_fail@plt+0x8dcc>
   1184c:	cmp	r8, #0
   11850:	mov	r9, r5
   11854:	bne	11c5c <__assert_fail@plt+0xd04>
   11858:	mov	r5, r1
   1185c:	ldr	r3, [sp, #60]	; 0x3c
   11860:	cmp	r9, r3
   11864:	beq	118f0 <__assert_fail@plt+0x998>
   11868:	cmp	r4, #0
   1186c:	beq	11898 <__assert_fail@plt+0x940>
   11870:	mov	r2, #8192	; 0x2000
   11874:	ldr	r1, [r7, r9, lsl #2]
   11878:	ldr	r0, [sp, #36]	; 0x24
   1187c:	bl	13320 <__assert_fail@plt+0x23c8>
   11880:	ldr	r3, [sp, #56]	; 0x38
   11884:	cmp	r0, r3
   11888:	mov	r6, r0
   1188c:	bls	11810 <__assert_fail@plt+0x8b8>
   11890:	mov	r8, #0
   11894:	b	11824 <__assert_fail@plt+0x8cc>
   11898:	mov	r0, #8192	; 0x2000
   1189c:	bl	17fb8 <__assert_fail@plt+0x7060>
   118a0:	add	r3, r9, #1
   118a4:	str	r3, [sp, #84]	; 0x54
   118a8:	str	r0, [r7, r9, lsl #2]
   118ac:	b	11870 <__assert_fail@plt+0x918>
   118b0:	ldrd	r2, [sp, #64]	; 0x40
   118b4:	adds	r2, r2, r6
   118b8:	adc	r3, r3, #0
   118bc:	cmp	r6, #0
   118c0:	strd	r2, [sp, #64]	; 0x40
   118c4:	beq	118e8 <__assert_fail@plt+0x990>
   118c8:	ldr	r3, [pc, #1672]	; 11f58 <__assert_fail@plt+0x1000>
   118cc:	mov	r2, r6
   118d0:	mov	r1, #1
   118d4:	ldr	r3, [r3]
   118d8:	ldr	r0, [r7, r5, lsl #2]
   118dc:	bl	10d54 <fwrite_unlocked@plt>
   118e0:	cmp	r6, r0
   118e4:	bhi	11710 <__assert_fail@plt+0x7b8>
   118e8:	ldr	r4, [sp, #28]
   118ec:	b	1183c <__assert_fail@plt+0x8e4>
   118f0:	cmp	r9, #0
   118f4:	ldreq	r3, [sp, #100]	; 0x64
   118f8:	streq	r3, [sp, #60]	; 0x3c
   118fc:	beq	11914 <__assert_fail@plt+0x9bc>
   11900:	ldr	r3, [sp, #96]	; 0x60
   11904:	cmp	r3, r9
   11908:	lslcs	r3, r9, #1
   1190c:	ldrcc	r3, [sp, #52]	; 0x34
   11910:	str	r3, [sp, #60]	; 0x3c
   11914:	mov	r0, r7
   11918:	mov	r2, #4
   1191c:	ldr	r1, [sp, #60]	; 0x3c
   11920:	bl	18044 <__assert_fail@plt+0x70ec>
   11924:	mov	r7, r0
   11928:	b	11868 <__assert_fail@plt+0x910>
   1192c:	mov	r0, r9
   11930:	bl	132c8 <__assert_fail@plt+0x2370>
   11934:	cmn	fp, #1
   11938:	beq	12094 <__assert_fail@plt+0x113c>
   1193c:	ldr	r1, [sp, #60]	; 0x3c
   11940:	add	r2, r1, #8192	; 0x2000
   11944:	ldr	r3, [r2, #4]
   11948:	cmp	r3, #0
   1194c:	beq	11970 <__assert_fail@plt+0xa18>
   11950:	add	r3, r1, r3
   11954:	ldrb	r1, [sl]
   11958:	ldrb	r3, [r3, #-1]
   1195c:	cmp	r3, r1
   11960:	addne	r8, r8, #1
   11964:	ldrne	r3, [r2, #8]
   11968:	addne	r3, r3, #1
   1196c:	strne	r3, [r2, #8]
   11970:	mov	fp, r8
   11974:	str	r7, [sp, #60]	; 0x3c
   11978:	mov	r0, r7
   1197c:	ldrd	r8, [sp, #64]	; 0x40
   11980:	b	119c0 <__assert_fail@plt+0xa68>
   11984:	ldr	r5, [r4, #4]
   11988:	adds	r8, r8, r5
   1198c:	adc	r9, r9, #0
   11990:	cmp	r5, #0
   11994:	beq	119b4 <__assert_fail@plt+0xa5c>
   11998:	ldr	r3, [pc, #1464]	; 11f58 <__assert_fail@plt+0x1000>
   1199c:	mov	r2, r5
   119a0:	mov	r1, #1
   119a4:	ldr	r3, [r3]
   119a8:	bl	10d54 <fwrite_unlocked@plt>
   119ac:	cmp	r5, r0
   119b0:	bhi	11710 <__assert_fail@plt+0x7b8>
   119b4:	ldr	r3, [r4, #8]
   119b8:	ldr	r0, [r4, #12]
   119bc:	sub	fp, fp, r3
   119c0:	add	r4, r0, #8192	; 0x2000
   119c4:	ldrd	r6, [sp, #16]
   119c8:	ldr	r2, [r4, #8]
   119cc:	mov	r3, #0
   119d0:	sub	r2, fp, r2
   119d4:	cmp	r7, r3
   119d8:	cmpeq	r6, r2
   119dc:	bcc	11984 <__assert_fail@plt+0xa2c>
   119e0:	strd	r8, [sp, #64]	; 0x40
   119e4:	mov	r9, r0
   119e8:	ldrd	r0, [sp, #16]
   119ec:	mov	r3, #0
   119f0:	ldr	r7, [sp, #60]	; 0x3c
   119f4:	cmp	r1, r3
   119f8:	cmpeq	r0, fp
   119fc:	bcs	11a88 <__assert_fail@plt+0xb30>
   11a00:	ldr	r5, [r4, #4]
   11a04:	ldr	r3, [sp, #80]	; 0x50
   11a08:	add	r5, r9, r5
   11a0c:	sub	r8, fp, r3
   11a10:	ldrb	r6, [sl]
   11a14:	mov	r0, r9
   11a18:	b	11a44 <__assert_fail@plt+0xaec>
   11a1c:	sub	r2, r5, r0
   11a20:	mov	r1, r6
   11a24:	bl	10ed4 <memchr@plt>
   11a28:	cmp	r0, #0
   11a2c:	beq	11a4c <__assert_fail@plt+0xaf4>
   11a30:	ldr	r3, [r4, #8]
   11a34:	add	r0, r0, #1
   11a38:	sub	r8, r8, #1
   11a3c:	add	r3, r3, #1
   11a40:	str	r3, [r4, #8]
   11a44:	cmp	r8, #0
   11a48:	bne	11a1c <__assert_fail@plt+0xac4>
   11a4c:	ldrd	r2, [sp, #64]	; 0x40
   11a50:	sub	r4, r0, r9
   11a54:	adds	r2, r2, r4
   11a58:	adc	r3, r3, r4, asr #31
   11a5c:	cmp	r4, #0
   11a60:	strd	r2, [sp, #64]	; 0x40
   11a64:	beq	11a88 <__assert_fail@plt+0xb30>
   11a68:	ldr	r3, [pc, #1256]	; 11f58 <__assert_fail@plt+0x1000>
   11a6c:	mov	r0, r9
   11a70:	mov	r2, r4
   11a74:	ldr	r3, [r3]
   11a78:	mov	r1, #1
   11a7c:	bl	10d54 <fwrite_unlocked@plt>
   11a80:	cmp	r4, r0
   11a84:	bhi	11710 <__assert_fail@plt+0x7b8>
   11a88:	ldr	r4, [sp, #28]
   11a8c:	mov	r0, r7
   11a90:	b	11aa4 <__assert_fail@plt+0xb4c>
   11a94:	add	r3, r0, #8192	; 0x2000
   11a98:	ldr	r5, [r3, #12]
   11a9c:	bl	132c8 <__assert_fail@plt+0x2370>
   11aa0:	mov	r0, r5
   11aa4:	cmp	r0, #0
   11aa8:	bne	11a94 <__assert_fail@plt+0xb3c>
   11aac:	ldrd	r2, [sp, #72]	; 0x48
   11ab0:	mvn	r1, #0
   11ab4:	mov	r7, r0
   11ab8:	cmp	r3, r1
   11abc:	mvn	r0, #0
   11ac0:	cmpeq	r2, r0
   11ac4:	beq	11478 <__assert_fail@plt+0x520>
   11ac8:	ldrd	r2, [sp, #64]	; 0x40
   11acc:	str	r7, [sp]
   11ad0:	ldr	r0, [sp, #36]	; 0x24
   11ad4:	bl	10dcc <lseek64@plt>
   11ad8:	cmp	r0, #0
   11adc:	sbcs	r3, r1, #0
   11ae0:	bge	11478 <__assert_fail@plt+0x520>
   11ae4:	bl	10e8c <__errno_location@plt>
   11ae8:	mov	r2, #5
   11aec:	ldr	r1, [pc, #1096]	; 11f3c <__assert_fail@plt+0xfe4>
   11af0:	mov	r4, r7
   11af4:	ldr	r8, [r0]
   11af8:	mov	r0, r7
   11afc:	bl	10d78 <dcgettext@plt>
   11b00:	ldr	r2, [sp, #24]
   11b04:	mov	r1, #3
   11b08:	mov	r5, r0
   11b0c:	mov	r0, r7
   11b10:	bl	164a0 <__assert_fail@plt+0x5548>
   11b14:	add	r2, sp, #136	; 0x88
   11b18:	mov	r6, r0
   11b1c:	ldrd	r0, [sp, #64]	; 0x40
   11b20:	bl	13390 <__assert_fail@plt+0x2438>
   11b24:	mov	r1, r8
   11b28:	mov	r3, r6
   11b2c:	mov	r2, r5
   11b30:	str	r0, [sp]
   11b34:	mov	r0, r7
   11b38:	bl	10dfc <error@plt>
   11b3c:	b	11478 <__assert_fail@plt+0x520>
   11b40:	cmp	lr, #0
   11b44:	strbne	fp, [sl]
   11b48:	cmp	r9, #0
   11b4c:	movne	r2, #0
   11b50:	strb	r9, [r3]
   11b54:	strbne	r2, [r3, #1]
   11b58:	ldr	r0, [sp, #32]
   11b5c:	bl	12424 <__assert_fail@plt+0x14cc>
   11b60:	ldr	r3, [r4]
   11b64:	sub	r5, r5, #1
   11b68:	str	r3, [r4, #4]!
   11b6c:	strd	r0, [sp, #16]
   11b70:	b	11048 <__assert_fail@plt+0xf0>
   11b74:	mov	r0, r9
   11b78:	bl	10f4c <close@plt>
   11b7c:	cmp	r0, #0
   11b80:	bge	11764 <__assert_fail@plt+0x80c>
   11b84:	bl	10e8c <__errno_location@plt>
   11b88:	ldr	r2, [pc, #920]	; 11f28 <__assert_fail@plt+0xfd0>
   11b8c:	ldr	r1, [r0]
   11b90:	mov	r0, #1
   11b94:	bl	10dfc <error@plt>
   11b98:	mov	r5, #1
   11b9c:	mov	r2, #0
   11ba0:	mov	r3, #0
   11ba4:	str	r5, [sp]
   11ba8:	ldr	r0, [sp, #36]	; 0x24
   11bac:	bl	10dcc <lseek64@plt>
   11bb0:	mov	r3, r1
   11bb4:	mov	r2, r0
   11bb8:	cmp	r0, #0
   11bbc:	strd	r2, [sp, #72]	; 0x48
   11bc0:	sbcs	r3, r3, #0
   11bc4:	blt	12014 <__assert_fail@plt+0x10bc>
   11bc8:	ldr	r3, [sp, #32]
   11bcc:	ldr	r2, [sp, #264]	; 0x108
   11bd0:	cmp	r3, #0
   11bd4:	add	r3, sp, #256	; 0x100
   11bd8:	ldrd	r0, [r3]
   11bdc:	sub	r3, r2, #1
   11be0:	bne	11c2c <__assert_fail@plt+0xcd4>
   11be4:	cmn	r3, #-536870911	; 0xe0000001
   11be8:	movhi	r2, #512	; 0x200
   11bec:	cmp	r2, r0
   11bf0:	asr	r3, r2, #31
   11bf4:	sbcs	r3, r3, r1
   11bf8:	bge	117b8 <__assert_fail@plt+0x860>
   11bfc:	ldrd	r2, [sp, #72]	; 0x48
   11c00:	subs	r2, r0, r2
   11c04:	sbc	r3, r1, r3
   11c08:	cmp	r2, #0
   11c0c:	sbcs	r1, r3, #0
   11c10:	blt	11c24 <__assert_fail@plt+0xccc>
   11c14:	ldrd	r0, [sp, #16]
   11c18:	cmp	r1, r3
   11c1c:	cmpeq	r0, r2
   11c20:	bcc	11f5c <__assert_fail@plt+0x1004>
   11c24:	ldr	r4, [sp, #28]
   11c28:	b	11478 <__assert_fail@plt+0x520>
   11c2c:	cmn	r3, #-536870911	; 0xe0000001
   11c30:	movhi	r2, #512	; 0x200
   11c34:	cmp	r2, r0
   11c38:	asr	r3, r2, #31
   11c3c:	sbcs	r3, r3, r1
   11c40:	bge	11588 <__assert_fail@plt+0x630>
   11c44:	ldrd	r2, [sp, #72]	; 0x48
   11c48:	cmp	r2, r0
   11c4c:	sbcs	r3, r3, r1
   11c50:	blt	12070 <__assert_fail@plt+0x1118>
   11c54:	and	r4, r5, #1
   11c58:	b	11478 <__assert_fail@plt+0x520>
   11c5c:	cmp	r4, #0
   11c60:	mov	r9, r1
   11c64:	beq	120dc <__assert_fail@plt+0x1184>
   11c68:	ldrd	r0, [sp, #64]	; 0x40
   11c6c:	ldr	r2, [sp, #104]	; 0x68
   11c70:	rsb	r8, r6, #8192	; 0x2000
   11c74:	adds	r0, r0, r2
   11c78:	adc	r1, r1, #0
   11c7c:	cmp	r2, r8
   11c80:	strd	r0, [sp, #64]	; 0x40
   11c84:	bcs	1212c <__assert_fail@plt+0x11d4>
   11c88:	ldr	r3, [pc, #712]	; 11f58 <__assert_fail@plt+0x1000>
   11c8c:	ldr	r0, [r7, r5, lsl #2]
   11c90:	mov	r1, #1
   11c94:	ldr	r3, [r3]
   11c98:	add	r0, r0, r6
   11c9c:	mov	r5, r2
   11ca0:	bl	10d54 <fwrite_unlocked@plt>
   11ca4:	cmp	r5, r0
   11ca8:	bhi	11710 <__assert_fail@plt+0x7b8>
   11cac:	mov	r5, #0
   11cb0:	ldr	r6, [sp, #84]	; 0x54
   11cb4:	b	11cc4 <__assert_fail@plt+0xd6c>
   11cb8:	ldr	r0, [r7, r5, lsl #2]
   11cbc:	bl	132c8 <__assert_fail@plt+0x2370>
   11cc0:	add	r5, r5, #1
   11cc4:	cmp	r5, r6
   11cc8:	bne	11cb8 <__assert_fail@plt+0xd60>
   11ccc:	mov	r0, r7
   11cd0:	bl	132c8 <__assert_fail@plt+0x2370>
   11cd4:	ldrd	r2, [sp, #72]	; 0x48
   11cd8:	mvn	r1, #0
   11cdc:	mvn	r0, #0
   11ce0:	cmp	r3, r1
   11ce4:	cmpeq	r2, r0
   11ce8:	beq	11478 <__assert_fail@plt+0x520>
   11cec:	mov	r5, #0
   11cf0:	ldrd	r2, [sp, #64]	; 0x40
   11cf4:	str	r5, [sp]
   11cf8:	ldr	r0, [sp, #36]	; 0x24
   11cfc:	bl	10dcc <lseek64@plt>
   11d00:	cmp	r0, #0
   11d04:	sbcs	r3, r1, #0
   11d08:	bge	11478 <__assert_fail@plt+0x520>
   11d0c:	bl	10e8c <__errno_location@plt>
   11d10:	mov	r2, #5
   11d14:	ldr	r1, [pc, #544]	; 11f3c <__assert_fail@plt+0xfe4>
   11d18:	mov	r4, r5
   11d1c:	ldr	r8, [r0]
   11d20:	mov	r0, r5
   11d24:	bl	10d78 <dcgettext@plt>
   11d28:	ldr	r2, [sp, #24]
   11d2c:	mov	r1, #3
   11d30:	mov	r6, r0
   11d34:	mov	r0, r5
   11d38:	bl	164a0 <__assert_fail@plt+0x5548>
   11d3c:	add	r2, sp, #184	; 0xb8
   11d40:	mov	r7, r0
   11d44:	ldrd	r0, [sp, #64]	; 0x40
   11d48:	bl	13390 <__assert_fail@plt+0x2438>
   11d4c:	mov	r1, r8
   11d50:	mov	r3, r7
   11d54:	mov	r2, r6
   11d58:	str	r0, [sp]
   11d5c:	mov	r0, r5
   11d60:	bl	10dfc <error@plt>
   11d64:	b	11478 <__assert_fail@plt+0x520>
   11d68:	add	r9, r3, #8192	; 0x2000
   11d6c:	mov	r1, r9
   11d70:	mov	r0, #2
   11d74:	bl	1809c <__assert_fail@plt+0x7144>
   11d78:	mov	r5, #0
   11d7c:	ldr	r6, [sp, #28]
   11d80:	mov	fp, r5
   11d84:	add	r3, r0, r9
   11d88:	str	r0, [sp, #60]	; 0x3c
   11d8c:	str	r0, [sp, #160]	; 0xa0
   11d90:	str	r3, [sp, #164]	; 0xa4
   11d94:	add	r3, sp, #312	; 0x138
   11d98:	add	r3, r3, r5, lsl #2
   11d9c:	mov	r2, r9
   11da0:	ldr	r7, [r3, #-152]	; 0xffffff68
   11da4:	ldr	r0, [sp, #36]	; 0x24
   11da8:	mov	r1, r7
   11dac:	bl	13320 <__assert_fail@plt+0x23c8>
   11db0:	cmp	r9, r0
   11db4:	mov	r4, r0
   11db8:	bls	11df0 <__assert_fail@plt+0xe98>
   11dbc:	bl	10e8c <__errno_location@plt>
   11dc0:	ldr	r8, [r0]
   11dc4:	cmp	r8, #0
   11dc8:	bne	120f0 <__assert_fail@plt+0x1198>
   11dcc:	ldr	r3, [sp, #80]	; 0x50
   11dd0:	cmp	r3, r4
   11dd4:	bcc	11e10 <__assert_fail@plt+0xeb8>
   11dd8:	cmp	r6, #0
   11ddc:	beq	11ec8 <__assert_fail@plt+0xf70>
   11de0:	ldr	r4, [sp, #28]
   11de4:	ldr	r0, [sp, #60]	; 0x3c
   11de8:	bl	132c8 <__assert_fail@plt+0x2370>
   11dec:	b	11cd4 <__assert_fail@plt+0xd7c>
   11df0:	cmp	r6, #0
   11df4:	beq	11e58 <__assert_fail@plt+0xf00>
   11df8:	ldr	r3, [sp, #80]	; 0x50
   11dfc:	cmp	r3, r0
   11e00:	bcc	12250 <__assert_fail@plt+0x12f8>
   11e04:	eor	r5, r5, #1
   11e08:	mov	r6, fp
   11e0c:	b	11d94 <__assert_fail@plt+0xe3c>
   11e10:	cmp	r6, #0
   11e14:	beq	11e54 <__assert_fail@plt+0xefc>
   11e18:	ldr	r3, [sp, #80]	; 0x50
   11e1c:	mov	r0, r7
   11e20:	sub	r4, r4, r3
   11e24:	ldr	r3, [pc, #300]	; 11f58 <__assert_fail@plt+0x1000>
   11e28:	mov	r2, r4
   11e2c:	mov	r1, #1
   11e30:	ldr	r3, [r3]
   11e34:	bl	10d54 <fwrite_unlocked@plt>
   11e38:	ldrd	r2, [sp, #64]	; 0x40
   11e3c:	adds	r2, r2, r4
   11e40:	adc	r3, r3, #0
   11e44:	strd	r2, [sp, #64]	; 0x40
   11e48:	cmp	r4, r0
   11e4c:	bhi	11710 <__assert_fail@plt+0x7b8>
   11e50:	b	11de0 <__assert_fail@plt+0xe88>
   11e54:	ldr	r6, [sp, #28]
   11e58:	mov	r8, fp
   11e5c:	ldr	r3, [sp, #80]	; 0x50
   11e60:	sub	r8, r3, r8
   11e64:	ldrd	r2, [sp, #64]	; 0x40
   11e68:	adds	r2, r2, r8
   11e6c:	adc	r3, r3, #0
   11e70:	cmp	r8, #0
   11e74:	strd	r2, [sp, #64]	; 0x40
   11e78:	beq	11eac <__assert_fail@plt+0xf54>
   11e7c:	eor	r1, r5, #1
   11e80:	add	r2, sp, #312	; 0x138
   11e84:	add	r1, r2, r1, lsl #2
   11e88:	ldr	r3, [pc, #200]	; 11f58 <__assert_fail@plt+0x1000>
   11e8c:	ldr	r0, [r1, #-152]	; 0xffffff68
   11e90:	mov	r2, r8
   11e94:	ldr	r3, [r3]
   11e98:	mov	r1, #1
   11e9c:	add	r0, r0, #8192	; 0x2000
   11ea0:	bl	10d54 <fwrite_unlocked@plt>
   11ea4:	cmp	r8, r0
   11ea8:	bhi	11710 <__assert_fail@plt+0x7b8>
   11eac:	ldr	r3, [sp, #80]	; 0x50
   11eb0:	cmp	r3, r4
   11eb4:	bcc	122c0 <__assert_fail@plt+0x1368>
   11eb8:	cmp	r6, #0
   11ebc:	eor	r5, r5, #1
   11ec0:	beq	11e08 <__assert_fail@plt+0xeb0>
   11ec4:	b	11de0 <__assert_fail@plt+0xe88>
   11ec8:	sub	r8, r3, r4
   11ecc:	ldr	r6, [sp, #28]
   11ed0:	b	11e5c <__assert_fail@plt+0xf04>
   11ed4:	andeq	sl, r1, r4, ror #8
   11ed8:	strdeq	sl, [r1], -r0
   11edc:	andeq	sl, r1, r8, asr #18
   11ee0:	andeq	ip, r2, sp, asr r1
   11ee4:	andeq	r3, r1, r4, ror #3
   11ee8:	muleq	r1, r4, r2
   11eec:	andeq	sl, r1, r8, asr #20
   11ef0:	andeq	ip, r2, r8, asr r1
   11ef4:	strdeq	ip, [r2], -r8
   11ef8:	andeq	sl, r1, r8, lsr #20
   11efc:	andeq	sl, r1, r8, lsr sl
   11f00:	andeq	sl, r1, r4, lsl r4
   11f04:	andeq	sl, r1, r4, asr #18
   11f08:	andeq	sl, r1, r8, lsl #20
   11f0c:	andeq	ip, r2, r8, asr #2
   11f10:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   11f14:	andeq	sl, r1, ip, lsl #5
   11f18:	andeq	sl, r1, r8, ror #20
   11f1c:	strdeq	ip, [r2], -r4
   11f20:	andeq	sl, r1, r0, lsr #21
   11f24:	muleq	r1, r4, sl
   11f28:	andeq	sl, r1, r4, ror #20
   11f2c:	andeq	sl, r1, r8, ror sl
   11f30:	ldrdeq	sl, [r1], -r8
   11f34:	andeq	r2, r0, r0, lsl r0
   11f38:	andeq	sl, r1, r4, lsr #21
   11f3c:	ldrdeq	sl, [r1], -r4
   11f40:	strdeq	sl, [r1], -r4
   11f44:	andeq	sl, r1, ip, lsr #7
   11f48:	muleq	r1, r8, r3
   11f4c:	andeq	sl, r1, ip, asr #6
   11f50:	andeq	sl, r1, ip, asr sl
   11f54:			; <UNDEFINED> instruction: 0x0001aab4
   11f58:	andeq	ip, r2, r4, asr r1
   11f5c:	ldrd	r0, [sp, #16]
   11f60:	subs	r0, r2, r0
   11f64:	sbc	r1, r3, r1
   11f68:	mov	r2, r0
   11f6c:	mov	r3, r1
   11f70:	ldr	r0, [sp, #36]	; 0x24
   11f74:	bl	1248c <__assert_fail@plt+0x1534>
   11f78:	cmp	r0, #0
   11f7c:	beq	11c24 <__assert_fail@plt+0xccc>
   11f80:	cmp	r0, #1
   11f84:	beq	1218c <__assert_fail@plt+0x1234>
   11f88:	cmp	r0, #2
   11f8c:	bne	12188 <__assert_fail@plt+0x1230>
   11f90:	bl	10e8c <__errno_location@plt>
   11f94:	mov	r2, #5
   11f98:	ldr	r1, [pc, #-96]	; 11f40 <__assert_fail@plt+0xfe8>
   11f9c:	ldr	r4, [sp, #32]
   11fa0:	ldr	r6, [r0]
   11fa4:	mov	r0, #0
   11fa8:	bl	10d78 <dcgettext@plt>
   11fac:	ldr	r2, [sp, #24]
   11fb0:	mov	r1, #3
   11fb4:	mov	r5, r0
   11fb8:	mov	r0, #0
   11fbc:	bl	164a0 <__assert_fail@plt+0x5548>
   11fc0:	mov	r2, r5
   11fc4:	mov	r1, r6
   11fc8:	mov	r3, r0
   11fcc:	mov	r0, #0
   11fd0:	bl	10dfc <error@plt>
   11fd4:	b	11478 <__assert_fail@plt+0x520>
   11fd8:	mov	r2, #5
   11fdc:	ldr	r1, [pc, #-156]	; 11f48 <__assert_fail@plt+0xff0>
   11fe0:	mov	r0, #0
   11fe4:	bl	10d78 <dcgettext@plt>
   11fe8:	ldr	r1, [sp, #24]
   11fec:	mov	r4, r0
   11ff0:	mov	r0, #4
   11ff4:	bl	15a24 <__assert_fail@plt+0x4acc>
   11ff8:	mov	r2, r4
   11ffc:	mov	r1, r8
   12000:	mov	r4, #0
   12004:	mov	r3, r0
   12008:	mov	r0, #0
   1200c:	bl	10dfc <error@plt>
   12010:	b	11cac <__assert_fail@plt+0xd54>
   12014:	bl	10e8c <__errno_location@plt>
   12018:	mov	r2, #5
   1201c:	ldr	r1, [pc, #-224]	; 11f44 <__assert_fail@plt+0xfec>
   12020:	ldr	r7, [r0]
   12024:	mov	r0, r4
   12028:	bl	10d78 <dcgettext@plt>
   1202c:	ldr	r2, [sp, #24]
   12030:	mov	r1, #3
   12034:	mov	r5, r0
   12038:	mov	r0, r4
   1203c:	bl	164a0 <__assert_fail@plt+0x5548>
   12040:	add	r2, sp, #112	; 0x70
   12044:	mov	r1, #0
   12048:	mov	r6, r0
   1204c:	mov	r0, #0
   12050:	bl	13390 <__assert_fail@plt+0x2438>
   12054:	mov	r1, r7
   12058:	mov	r3, r6
   1205c:	mov	r2, r5
   12060:	str	r0, [sp]
   12064:	mov	r0, r4
   12068:	bl	10dfc <error@plt>
   1206c:	b	11478 <__assert_fail@plt+0x520>
   12070:	ldrd	r2, [sp, #72]	; 0x48
   12074:	strd	r0, [sp, #8]
   12078:	ldr	r1, [sp, #36]	; 0x24
   1207c:	strd	r2, [sp]
   12080:	ldr	r0, [sp, #24]
   12084:	ldrd	r2, [sp, #16]
   12088:	bl	1288c <__assert_fail@plt+0x1934>
   1208c:	mov	r5, r0
   12090:	b	11c54 <__assert_fail@plt+0xcfc>
   12094:	bl	10e8c <__errno_location@plt>
   12098:	mov	r4, #0
   1209c:	mov	r2, #5
   120a0:	ldr	r1, [pc, #-352]	; 11f48 <__assert_fail@plt+0xff0>
   120a4:	ldr	r5, [r0]
   120a8:	mov	r0, r4
   120ac:	bl	10d78 <dcgettext@plt>
   120b0:	ldr	r1, [sp, #24]
   120b4:	mov	r6, r0
   120b8:	mov	r0, #4
   120bc:	bl	15a24 <__assert_fail@plt+0x4acc>
   120c0:	mov	r2, r6
   120c4:	mov	r1, r5
   120c8:	mov	r3, r0
   120cc:	mov	r0, r4
   120d0:	bl	10dfc <error@plt>
   120d4:	mov	r0, r7
   120d8:	b	11aa4 <__assert_fail@plt+0xb4c>
   120dc:	ldr	r3, [sp, #52]	; 0x34
   120e0:	cmp	r3, fp
   120e4:	beq	121d0 <__assert_fail@plt+0x1278>
   120e8:	mov	r4, r8
   120ec:	b	11cac <__assert_fail@plt+0xd54>
   120f0:	mov	r2, #5
   120f4:	ldr	r1, [pc, #-436]	; 11f48 <__assert_fail@plt+0xff0>
   120f8:	mov	r0, #0
   120fc:	bl	10d78 <dcgettext@plt>
   12100:	ldr	r1, [sp, #24]
   12104:	mov	r4, r0
   12108:	mov	r0, #4
   1210c:	bl	15a24 <__assert_fail@plt+0x4acc>
   12110:	mov	r2, r4
   12114:	mov	r1, r8
   12118:	mov	r4, #0
   1211c:	mov	r3, r0
   12120:	mov	r0, #0
   12124:	bl	10dfc <error@plt>
   12128:	b	11de4 <__assert_fail@plt+0xe8c>
   1212c:	cmp	r8, #0
   12130:	beq	12158 <__assert_fail@plt+0x1200>
   12134:	ldr	r3, [pc, #-484]	; 11f58 <__assert_fail@plt+0x1000>
   12138:	ldr	r0, [r7, r5, lsl #2]
   1213c:	mov	r2, r8
   12140:	ldr	r3, [r3]
   12144:	add	r0, r0, r6
   12148:	mov	r1, #1
   1214c:	bl	10d54 <fwrite_unlocked@plt>
   12150:	cmp	r8, r0
   12154:	bhi	11710 <__assert_fail@plt+0x7b8>
   12158:	ldr	r3, [sp, #104]	; 0x68
   1215c:	subs	r8, r3, r8
   12160:	beq	11cac <__assert_fail@plt+0xd54>
   12164:	ldr	r3, [pc, #-532]	; 11f58 <__assert_fail@plt+0x1000>
   12168:	ldr	r0, [r7, r9, lsl #2]
   1216c:	mov	r2, r8
   12170:	ldr	r3, [r3]
   12174:	mov	r1, #1
   12178:	bl	10d54 <fwrite_unlocked@plt>
   1217c:	cmp	r8, r0
   12180:	bls	11cac <__assert_fail@plt+0xd54>
   12184:	b	11710 <__assert_fail@plt+0x7b8>
   12188:	bl	10f40 <abort@plt>
   1218c:	bl	10e8c <__errno_location@plt>
   12190:	mov	r2, #5
   12194:	ldr	r1, [pc, #-596]	; 11f48 <__assert_fail@plt+0xff0>
   12198:	ldr	r4, [sp, #32]
   1219c:	ldr	r5, [r0]
   121a0:	mov	r0, #0
   121a4:	bl	10d78 <dcgettext@plt>
   121a8:	ldr	r1, [sp, #24]
   121ac:	mov	r6, r0
   121b0:	mov	r0, #4
   121b4:	bl	15a24 <__assert_fail@plt+0x4acc>
   121b8:	mov	r2, r6
   121bc:	mov	r1, r5
   121c0:	mov	r3, r0
   121c4:	mov	r0, #0
   121c8:	bl	10dfc <error@plt>
   121cc:	b	11478 <__assert_fail@plt+0x520>
   121d0:	ldr	r3, [sp, #108]	; 0x6c
   121d4:	sub	r6, r6, r3
   121d8:	ldrd	r2, [sp, #64]	; 0x40
   121dc:	adds	r2, r2, r6
   121e0:	adc	r3, r3, #0
   121e4:	cmp	r6, #0
   121e8:	strd	r2, [sp, #64]	; 0x40
   121ec:	beq	120e8 <__assert_fail@plt+0x1190>
   121f0:	ldr	r3, [pc, #-672]	; 11f58 <__assert_fail@plt+0x1000>
   121f4:	ldr	r0, [r7, r1, lsl #2]
   121f8:	mov	r2, r6
   121fc:	ldr	r3, [r3]
   12200:	mov	r1, #1
   12204:	bl	10d54 <fwrite_unlocked@plt>
   12208:	cmp	r6, r0
   1220c:	bls	120e8 <__assert_fail@plt+0x1190>
   12210:	b	11710 <__assert_fail@plt+0x7b8>
   12214:	mov	r2, #5
   12218:	ldr	r1, [pc, #-724]	; 11f4c <__assert_fail@plt+0xff4>
   1221c:	mov	r0, #0
   12220:	bl	10d78 <dcgettext@plt>
   12224:	add	r2, sp, #208	; 0xd0
   12228:	mov	r4, r0
   1222c:	ldrd	r0, [sp, #16]
   12230:	bl	13460 <__assert_fail@plt+0x2508>
   12234:	bl	17394 <__assert_fail@plt+0x643c>
   12238:	mov	r3, r4
   1223c:	ldr	r2, [pc, #-756]	; 11f50 <__assert_fail@plt+0xff8>
   12240:	mov	r1, #75	; 0x4b
   12244:	str	r0, [sp]
   12248:	mov	r0, #1
   1224c:	bl	10dfc <error@plt>
   12250:	ldr	r3, [sp, #80]	; 0x50
   12254:	mov	r1, #1
   12258:	sub	r4, r0, r3
   1225c:	ldr	r3, [pc, #-780]	; 11f58 <__assert_fail@plt+0x1000>
   12260:	mov	r2, r4
   12264:	mov	r0, r7
   12268:	ldr	r3, [r3]
   1226c:	bl	10d54 <fwrite_unlocked@plt>
   12270:	ldrd	r2, [sp, #64]	; 0x40
   12274:	adds	r2, r2, r4
   12278:	adc	r3, r3, #0
   1227c:	strd	r2, [sp, #64]	; 0x40
   12280:	cmp	r0, r4
   12284:	bcs	11e04 <__assert_fail@plt+0xeac>
   12288:	b	11710 <__assert_fail@plt+0x7b8>
   1228c:	mov	r2, #5
   12290:	ldr	r1, [pc, #-836]	; 11f54 <__assert_fail@plt+0xffc>
   12294:	mov	r0, #0
   12298:	bl	10d78 <dcgettext@plt>
   1229c:	add	r2, sp, #160	; 0xa0
   122a0:	mov	r4, r0
   122a4:	ldrd	r0, [sp, #16]
   122a8:	bl	13460 <__assert_fail@plt+0x2508>
   122ac:	mov	r2, r4
   122b0:	mov	r1, #0
   122b4:	mov	r3, r0
   122b8:	mov	r0, #1
   122bc:	bl	10dfc <error@plt>
   122c0:	ldr	r3, [sp, #80]	; 0x50
   122c4:	mov	r0, r7
   122c8:	sub	r4, r4, r3
   122cc:	ldr	r3, [pc, #-892]	; 11f58 <__assert_fail@plt+0x1000>
   122d0:	mov	r2, r4
   122d4:	mov	r1, #1
   122d8:	ldr	r3, [r3]
   122dc:	bl	10d54 <fwrite_unlocked@plt>
   122e0:	ldrd	r2, [sp, #64]	; 0x40
   122e4:	adds	r2, r2, r4
   122e8:	adc	r3, r3, #0
   122ec:	strd	r2, [sp, #64]	; 0x40
   122f0:	cmp	r0, r4
   122f4:	bcs	11eb8 <__assert_fail@plt+0xf60>
   122f8:	b	11710 <__assert_fail@plt+0x7b8>
   122fc:	mov	fp, #0
   12300:	mov	lr, #0
   12304:	pop	{r1}		; (ldr r1, [sp], #4)
   12308:	mov	r2, sp
   1230c:	push	{r2}		; (str r2, [sp, #-4]!)
   12310:	push	{r0}		; (str r0, [sp, #-4]!)
   12314:	ldr	ip, [pc, #16]	; 1232c <__assert_fail@plt+0x13d4>
   12318:	push	{ip}		; (str ip, [sp, #-4]!)
   1231c:	ldr	r0, [pc, #12]	; 12330 <__assert_fail@plt+0x13d8>
   12320:	ldr	r3, [pc, #12]	; 12334 <__assert_fail@plt+0x13dc>
   12324:	bl	10e20 <__libc_start_main@plt>
   12328:	bl	10f40 <abort@plt>
   1232c:	andeq	sl, r1, ip, lsr #4
   12330:	andeq	r0, r1, r0, asr #31
   12334:	andeq	sl, r1, ip, asr #3
   12338:	ldr	r3, [pc, #20]	; 12354 <__assert_fail@plt+0x13fc>
   1233c:	ldr	r2, [pc, #20]	; 12358 <__assert_fail@plt+0x1400>
   12340:	add	r3, pc, r3
   12344:	ldr	r2, [r3, r2]
   12348:	cmp	r2, #0
   1234c:	bxeq	lr
   12350:	b	10e38 <__gmon_start__@plt>
   12354:			; <UNDEFINED> instruction: 0x00019cb8
   12358:	andeq	r0, r0, r8, ror #1
   1235c:	ldr	r3, [pc, #28]	; 12380 <__assert_fail@plt+0x1428>
   12360:	ldr	r0, [pc, #28]	; 12384 <__assert_fail@plt+0x142c>
   12364:	sub	r3, r3, r0
   12368:	cmp	r3, #6
   1236c:	bxls	lr
   12370:	ldr	r3, [pc, #16]	; 12388 <__assert_fail@plt+0x1430>
   12374:	cmp	r3, #0
   12378:	bxeq	lr
   1237c:	bx	r3
   12380:	andeq	ip, r2, r3, asr #2
   12384:	andeq	ip, r2, r0, asr #2
   12388:	andeq	r0, r0, r0
   1238c:	ldr	r1, [pc, #36]	; 123b8 <__assert_fail@plt+0x1460>
   12390:	ldr	r0, [pc, #36]	; 123bc <__assert_fail@plt+0x1464>
   12394:	sub	r1, r1, r0
   12398:	asr	r1, r1, #2
   1239c:	add	r1, r1, r1, lsr #31
   123a0:	asrs	r1, r1, #1
   123a4:	bxeq	lr
   123a8:	ldr	r3, [pc, #16]	; 123c0 <__assert_fail@plt+0x1468>
   123ac:	cmp	r3, #0
   123b0:	bxeq	lr
   123b4:	bx	r3
   123b8:	andeq	ip, r2, r0, asr #2
   123bc:	andeq	ip, r2, r0, asr #2
   123c0:	andeq	r0, r0, r0
   123c4:	push	{r4, lr}
   123c8:	ldr	r4, [pc, #24]	; 123e8 <__assert_fail@plt+0x1490>
   123cc:	ldrb	r3, [r4]
   123d0:	cmp	r3, #0
   123d4:	popne	{r4, pc}
   123d8:	bl	1235c <__assert_fail@plt+0x1404>
   123dc:	mov	r3, #1
   123e0:	strb	r3, [r4]
   123e4:	pop	{r4, pc}
   123e8:	andeq	ip, r2, ip, asr r1
   123ec:	ldr	r0, [pc, #40]	; 1241c <__assert_fail@plt+0x14c4>
   123f0:	ldr	r3, [r0]
   123f4:	cmp	r3, #0
   123f8:	bne	12400 <__assert_fail@plt+0x14a8>
   123fc:	b	1238c <__assert_fail@plt+0x1434>
   12400:	ldr	r3, [pc, #24]	; 12420 <__assert_fail@plt+0x14c8>
   12404:	cmp	r3, #0
   12408:	beq	123fc <__assert_fail@plt+0x14a4>
   1240c:	push	{r4, lr}
   12410:	blx	r3
   12414:	pop	{r4, lr}
   12418:	b	1238c <__assert_fail@plt+0x1434>
   1241c:	andeq	fp, r2, r4, lsl pc
   12420:	andeq	r0, r0, r0
   12424:	cmp	r0, #0
   12428:	push	{r4, r5, r6, lr}
   1242c:	movne	r0, #0
   12430:	sub	sp, sp, #24
   12434:	mov	r6, r1
   12438:	mov	r2, #5
   1243c:	ldrne	r1, [pc, #60]	; 12480 <__assert_fail@plt+0x1528>
   12440:	ldreq	r1, [pc, #60]	; 12484 <__assert_fail@plt+0x152c>
   12444:	bl	10d78 <dcgettext@plt>
   12448:	mvn	r4, #0
   1244c:	ldr	r2, [pc, #52]	; 12488 <__assert_fail@plt+0x1530>
   12450:	mvn	r5, #0
   12454:	mov	r3, #0
   12458:	str	r2, [sp, #8]
   1245c:	str	r3, [sp, #16]
   12460:	strd	r4, [sp]
   12464:	mov	r2, #0
   12468:	mov	r3, #0
   1246c:	str	r0, [sp, #12]
   12470:	mov	r0, r6
   12474:	bl	1877c <__assert_fail@plt+0x7824>
   12478:	add	sp, sp, #24
   1247c:	pop	{r4, r5, r6, pc}
   12480:	andeq	sl, r1, r4, lsr r3
   12484:	andeq	sl, r1, ip, asr #6
   12488:	andeq	sl, r1, r4, ror #6
   1248c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12490:	mov	r4, r2
   12494:	mov	r5, r3
   12498:	orrs	r3, r4, r5
   1249c:	sub	sp, sp, #8192	; 0x2000
   124a0:	beq	1253c <__assert_fail@plt+0x15e4>
   124a4:	mov	r7, r0
   124a8:	ldr	r9, [pc, #168]	; 12558 <__assert_fail@plt+0x1600>
   124ac:	mov	sl, #8192	; 0x2000
   124b0:	mov	r8, #1
   124b4:	b	12508 <__assert_fail@plt+0x15b0>
   124b8:	subs	r4, r4, r0
   124bc:	sbc	r5, r5, #0
   124c0:	orr	r2, r4, r5
   124c4:	cmp	r2, #0
   124c8:	clz	r3, r0
   124cc:	lsr	r3, r3, #5
   124d0:	moveq	r3, #0
   124d4:	cmp	r3, #0
   124d8:	bne	12548 <__assert_fail@plt+0x15f0>
   124dc:	cmp	r0, #0
   124e0:	beq	12500 <__assert_fail@plt+0x15a8>
   124e4:	mov	r2, r0
   124e8:	ldr	r3, [r9]
   124ec:	mov	r1, r8
   124f0:	mov	r0, sp
   124f4:	bl	10d54 <fwrite_unlocked@plt>
   124f8:	cmp	r6, r0
   124fc:	bhi	12554 <__assert_fail@plt+0x15fc>
   12500:	orrs	r3, r4, r5
   12504:	beq	1253c <__assert_fail@plt+0x15e4>
   12508:	cmp	r5, #0
   1250c:	cmpeq	r4, #8192	; 0x2000
   12510:	mov	r2, r4
   12514:	mov	r1, sp
   12518:	movhi	r2, sl
   1251c:	mov	r0, r7
   12520:	bl	17514 <__assert_fail@plt+0x65bc>
   12524:	cmn	r0, #1
   12528:	mov	r6, r0
   1252c:	bne	124b8 <__assert_fail@plt+0x1560>
   12530:	mov	r0, #1
   12534:	add	sp, sp, #8192	; 0x2000
   12538:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1253c:	mov	r0, #0
   12540:	add	sp, sp, #8192	; 0x2000
   12544:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12548:	mov	r0, #2
   1254c:	add	sp, sp, #8192	; 0x2000
   12550:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12554:	bl	10f68 <__assert_fail@plt+0x10>
   12558:	andeq	ip, r2, r4, asr r1
   1255c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12560:	mov	r6, r2
   12564:	mov	r7, r3
   12568:	sub	sp, sp, #8192	; 0x2000
   1256c:	orrs	r3, r6, r7
   12570:	sub	sp, sp, #4
   12574:	beq	1263c <__assert_fail@plt+0x16e4>
   12578:	mov	fp, r0
   1257c:	mov	r8, r1
   12580:	ldr	sl, [pc, #200]	; 12650 <__assert_fail@plt+0x16f8>
   12584:	mov	r5, #8192	; 0x2000
   12588:	mov	r9, #1
   1258c:	b	125c4 <__assert_fail@plt+0x166c>
   12590:	cmp	r0, #0
   12594:	beq	1263c <__assert_fail@plt+0x16e4>
   12598:	mov	r2, r0
   1259c:	ldr	r3, [sl]
   125a0:	mov	r1, r9
   125a4:	mov	r0, sp
   125a8:	bl	10d54 <fwrite_unlocked@plt>
   125ac:	cmp	r4, r0
   125b0:	bhi	1264c <__assert_fail@plt+0x16f4>
   125b4:	subs	r6, r6, r4
   125b8:	sbc	r7, r7, #0
   125bc:	orrs	r3, r6, r7
   125c0:	beq	1263c <__assert_fail@plt+0x16e4>
   125c4:	mov	r3, #0
   125c8:	cmp	r3, r7
   125cc:	cmpeq	r5, r6
   125d0:	movhi	r5, r6
   125d4:	mov	r2, r5
   125d8:	mov	r1, sp
   125dc:	mov	r0, r8
   125e0:	bl	17514 <__assert_fail@plt+0x65bc>
   125e4:	cmn	r0, #1
   125e8:	mov	r4, r0
   125ec:	bne	12590 <__assert_fail@plt+0x1638>
   125f0:	bl	10e8c <__errno_location@plt>
   125f4:	mov	r2, #5
   125f8:	ldr	r1, [pc, #84]	; 12654 <__assert_fail@plt+0x16fc>
   125fc:	ldr	r4, [r0]
   12600:	mov	r0, #0
   12604:	bl	10d78 <dcgettext@plt>
   12608:	mov	r1, fp
   1260c:	mov	r5, r0
   12610:	mov	r0, #4
   12614:	bl	15a24 <__assert_fail@plt+0x4acc>
   12618:	mov	r2, r5
   1261c:	mov	r1, r4
   12620:	mov	r3, r0
   12624:	mov	r0, #0
   12628:	bl	10dfc <error@plt>
   1262c:	mov	r0, #0
   12630:	add	sp, sp, #8192	; 0x2000
   12634:	add	sp, sp, #4
   12638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1263c:	mov	r0, #1
   12640:	add	sp, sp, #8192	; 0x2000
   12644:	add	sp, sp, #4
   12648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1264c:	bl	10f68 <__assert_fail@plt+0x10>
   12650:	andeq	ip, r2, r4, asr r1
   12654:	muleq	r1, r8, r3
   12658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1265c:	sub	sp, sp, #8320	; 0x2080
   12660:	sub	sp, sp, #20
   12664:	mov	r6, r2
   12668:	mov	r7, r3
   1266c:	orrs	r3, r6, r7
   12670:	str	r0, [sp, #12]
   12674:	beq	12734 <__assert_fail@plt+0x17dc>
   12678:	ldr	sl, [pc, #508]	; 1287c <__assert_fail@plt+0x1924>
   1267c:	ldr	fp, [pc, #508]	; 12880 <__assert_fail@plt+0x1928>
   12680:	mov	r8, r1
   12684:	mov	r9, #8192	; 0x2000
   12688:	mov	r2, r9
   1268c:	add	r1, sp, #144	; 0x90
   12690:	mov	r0, r8
   12694:	bl	17514 <__assert_fail@plt+0x65bc>
   12698:	cmn	r0, #1
   1269c:	mov	r5, r0
   126a0:	beq	12764 <__assert_fail@plt+0x180c>
   126a4:	cmp	r0, #0
   126a8:	beq	12734 <__assert_fail@plt+0x17dc>
   126ac:	ldrb	r1, [sl]
   126b0:	add	r3, sp, #143	; 0x8f
   126b4:	mov	r4, #0
   126b8:	b	126c4 <__assert_fail@plt+0x176c>
   126bc:	cmp	r5, r4
   126c0:	beq	12744 <__assert_fail@plt+0x17ec>
   126c4:	ldrb	r2, [r3, #1]!
   126c8:	add	r4, r4, #1
   126cc:	cmp	r2, r1
   126d0:	bne	126bc <__assert_fail@plt+0x1764>
   126d4:	subs	r6, r6, #1
   126d8:	sbc	r7, r7, #0
   126dc:	orrs	r2, r6, r7
   126e0:	bne	126bc <__assert_fail@plt+0x1764>
   126e4:	sub	r5, r5, r4
   126e8:	rsbs	r6, r5, #0
   126ec:	sbc	r7, r7, r7
   126f0:	mov	r5, #1
   126f4:	mov	r3, r7
   126f8:	mov	r2, r6
   126fc:	str	r5, [sp]
   12700:	mov	r0, r8
   12704:	bl	10dcc <lseek64@plt>
   12708:	cmp	r0, #0
   1270c:	sbcs	r3, r1, #0
   12710:	blt	127b0 <__assert_fail@plt+0x1858>
   12714:	ldr	r3, [pc, #356]	; 12880 <__assert_fail@plt+0x1928>
   12718:	mov	r1, r5
   1271c:	add	r0, sp, #144	; 0x90
   12720:	ldr	r3, [r3]
   12724:	mov	r2, r4
   12728:	bl	10d54 <fwrite_unlocked@plt>
   1272c:	cmp	r4, r0
   12730:	bhi	12760 <__assert_fail@plt+0x1808>
   12734:	mov	r0, #1
   12738:	add	sp, sp, #8320	; 0x2080
   1273c:	add	sp, sp, #20
   12740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12744:	ldr	r3, [fp]
   12748:	mov	r2, r5
   1274c:	mov	r1, #1
   12750:	add	r0, sp, #144	; 0x90
   12754:	bl	10d54 <fwrite_unlocked@plt>
   12758:	cmp	r5, r0
   1275c:	bls	12688 <__assert_fail@plt+0x1730>
   12760:	bl	10f68 <__assert_fail@plt+0x10>
   12764:	bl	10e8c <__errno_location@plt>
   12768:	mov	r2, #5
   1276c:	ldr	r1, [pc, #272]	; 12884 <__assert_fail@plt+0x192c>
   12770:	ldr	r4, [r0]
   12774:	mov	r0, #0
   12778:	bl	10d78 <dcgettext@plt>
   1277c:	ldr	r1, [sp, #12]
   12780:	mov	r5, r0
   12784:	mov	r0, #4
   12788:	bl	15a24 <__assert_fail@plt+0x4acc>
   1278c:	mov	r2, r5
   12790:	mov	r1, r4
   12794:	mov	r3, r0
   12798:	mov	r0, #0
   1279c:	bl	10dfc <error@plt>
   127a0:	mov	r0, #0
   127a4:	add	sp, sp, #8320	; 0x2080
   127a8:	add	sp, sp, #20
   127ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127b0:	add	r2, sp, #40	; 0x28
   127b4:	mov	r1, r8
   127b8:	mov	r0, #3
   127bc:	bl	10db4 <__fxstat64@plt>
   127c0:	cmp	r0, #0
   127c4:	bne	127fc <__assert_fail@plt+0x18a4>
   127c8:	ldr	r3, [sp, #56]	; 0x38
   127cc:	and	r3, r3, #61440	; 0xf000
   127d0:	cmp	r3, #32768	; 0x8000
   127d4:	beq	127fc <__assert_fail@plt+0x18a4>
   127d8:	ldr	r3, [pc, #160]	; 12880 <__assert_fail@plt+0x1928>
   127dc:	add	r0, sp, #144	; 0x90
   127e0:	mov	r2, r4
   127e4:	ldr	r3, [r3]
   127e8:	mov	r1, #1
   127ec:	bl	10d54 <fwrite_unlocked@plt>
   127f0:	cmp	r4, r0
   127f4:	bls	12734 <__assert_fail@plt+0x17dc>
   127f8:	b	12760 <__assert_fail@plt+0x1808>
   127fc:	mov	r3, #1
   12800:	str	r3, [sp]
   12804:	mov	r0, r8
   12808:	mov	r3, r7
   1280c:	mov	r2, r6
   12810:	bl	10dcc <lseek64@plt>
   12814:	cmp	r0, #0
   12818:	sbcs	r3, r1, #0
   1281c:	bge	127d8 <__assert_fail@plt+0x1880>
   12820:	bl	10e8c <__errno_location@plt>
   12824:	mov	r2, #5
   12828:	ldr	r1, [pc, #88]	; 12888 <__assert_fail@plt+0x1930>
   1282c:	ldr	r9, [r0]
   12830:	mov	r0, #0
   12834:	bl	10d78 <dcgettext@plt>
   12838:	ldr	r2, [sp, #12]
   1283c:	mov	r1, #3
   12840:	mov	r5, r0
   12844:	mov	r0, #0
   12848:	bl	164a0 <__assert_fail@plt+0x5548>
   1284c:	add	r2, sp, #16
   12850:	mov	r1, r7
   12854:	mov	r8, r0
   12858:	mov	r0, r6
   1285c:	bl	13390 <__assert_fail@plt+0x2438>
   12860:	mov	r1, r9
   12864:	mov	r3, r8
   12868:	mov	r2, r5
   1286c:	str	r0, [sp]
   12870:	mov	r0, #0
   12874:	bl	10dfc <error@plt>
   12878:	b	127d8 <__assert_fail@plt+0x1880>
   1287c:	andeq	ip, r2, sp, asr r1
   12880:	andeq	ip, r2, r4, asr r1
   12884:	muleq	r1, r8, r3
   12888:	andeq	sl, r1, ip, lsr #7
   1288c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12890:	sub	sp, sp, #16384	; 0x4000
   12894:	sub	sp, sp, #84	; 0x54
   12898:	add	ip, sp, #16384	; 0x4000
   1289c:	str	r0, [sp, #28]
   128a0:	add	r0, sp, #16384	; 0x4000
   128a4:	add	ip, ip, #128	; 0x80
   128a8:	add	r0, r0, #120	; 0x78
   128ac:	ldrd	r6, [ip]
   128b0:	ldrd	r4, [r0]
   128b4:	ldr	r8, [pc, #1392]	; 12e2c <__assert_fail@plt+0x1ed4>
   128b8:	mov	fp, r1
   128bc:	subs	r4, r6, r4
   128c0:	sbc	r5, r7, r5
   128c4:	strd	r2, [sp, #16]
   128c8:	asr	r0, r5, #31
   128cc:	eor	r4, r4, r0
   128d0:	subs	r4, r4, r0
   128d4:	and	r4, r4, r8
   128d8:	eor	r4, r4, r0
   128dc:	subs	r0, r4, r0
   128e0:	cmp	r0, #0
   128e4:	moveq	r0, #8192	; 0x2000
   128e8:	movne	r1, #0
   128ec:	moveq	r1, #0
   128f0:	movne	r9, r0
   128f4:	moveq	r9, #8192	; 0x2000
   128f8:	subs	r6, r6, r0
   128fc:	sbc	r7, r7, r1
   12900:	mov	r2, r6
   12904:	mov	r3, r7
   12908:	mov	r6, #0
   1290c:	str	r6, [sp]
   12910:	mov	r0, fp
   12914:	strd	r2, [sp, #8]
   12918:	bl	10dcc <lseek64@plt>
   1291c:	cmp	r0, #0
   12920:	sbcs	r3, r1, #0
   12924:	blt	12d00 <__assert_fail@plt+0x1da8>
   12928:	add	r5, sp, #80	; 0x50
   1292c:	mov	r2, r9
   12930:	mov	r1, r5
   12934:	mov	r0, fp
   12938:	bl	17514 <__assert_fail@plt+0x65bc>
   1293c:	cmn	r0, #1
   12940:	mov	r4, r0
   12944:	beq	12de4 <__assert_fail@plt+0x1e8c>
   12948:	ldrd	r6, [sp, #16]
   1294c:	orr	r3, r6, r7
   12950:	cmp	r4, #0
   12954:	cmpne	r3, #0
   12958:	bne	12c74 <__assert_fail@plt+0x1d1c>
   1295c:	mvn	r8, #0
   12960:	mvn	r9, #0
   12964:	mov	r2, r4
   12968:	mov	sl, fp
   1296c:	cmp	r2, #0
   12970:	beq	12b38 <__assert_fail@plt+0x1be0>
   12974:	ldrd	r0, [sp, #16]
   12978:	orrs	r3, r0, r1
   1297c:	ldr	r3, [pc, #1196]	; 12e30 <__assert_fail@plt+0x1ed8>
   12980:	ldrb	r4, [r3]
   12984:	bne	12b24 <__assert_fail@plt+0x1bcc>
   12988:	subs	r6, r6, #1
   1298c:	sbc	r7, r7, #0
   12990:	b	129ac <__assert_fail@plt+0x1a54>
   12994:	subs	r0, r6, #1
   12998:	sbc	r1, r7, #0
   1299c:	cmp	r2, #0
   129a0:	beq	12b38 <__assert_fail@plt+0x1be0>
   129a4:	mov	r6, r0
   129a8:	mov	r7, r1
   129ac:	cmp	r7, r9
   129b0:	cmpeq	r6, r8
   129b4:	sub	r2, r2, #1
   129b8:	bne	12994 <__assert_fail@plt+0x1a3c>
   129bc:	add	r3, sp, #16384	; 0x4000
   129c0:	add	r3, r3, #120	; 0x78
   129c4:	ldrd	r0, [sp, #8]
   129c8:	mov	r4, r2
   129cc:	ldrd	r2, [r3]
   129d0:	mov	fp, sl
   129d4:	cmp	r2, r0
   129d8:	sbcs	r3, r3, r1
   129dc:	bge	12a30 <__assert_fail@plt+0x1ad8>
   129e0:	add	r3, sp, #16384	; 0x4000
   129e4:	add	r3, r3, #120	; 0x78
   129e8:	mov	r6, #0
   129ec:	str	r6, [sp]
   129f0:	mov	r0, sl
   129f4:	ldrd	r2, [r3]
   129f8:	bl	10dcc <lseek64@plt>
   129fc:	cmp	r0, #0
   12a00:	sbcs	r3, r1, #0
   12a04:	blt	12d64 <__assert_fail@plt+0x1e0c>
   12a08:	add	r3, sp, #16384	; 0x4000
   12a0c:	add	r3, r3, #120	; 0x78
   12a10:	ldrd	r6, [sp, #8]
   12a14:	ldrd	r2, [r3]
   12a18:	subs	r6, r6, r2
   12a1c:	sbc	r7, r7, r3
   12a20:	orrs	r3, r6, r7
   12a24:	movne	r9, #1
   12a28:	ldrne	sl, [pc, #1028]	; 12e34 <__assert_fail@plt+0x1edc>
   12a2c:	bne	12bfc <__assert_fail@plt+0x1ca4>
   12a30:	adds	r6, r4, #1
   12a34:	beq	12a58 <__assert_fail@plt+0x1b00>
   12a38:	ldr	r3, [pc, #1012]	; 12e34 <__assert_fail@plt+0x1edc>
   12a3c:	mov	r2, r6
   12a40:	mov	r1, #1
   12a44:	ldr	r3, [r3]
   12a48:	mov	r0, r5
   12a4c:	bl	10d54 <fwrite_unlocked@plt>
   12a50:	cmp	r6, r0
   12a54:	bhi	12e28 <__assert_fail@plt+0x1ed0>
   12a58:	ldrd	r6, [sp, #8]
   12a5c:	mov	r0, fp
   12a60:	adds	r6, r6, r4
   12a64:	adc	r7, r7, #0
   12a68:	adds	r6, r6, #1
   12a6c:	adc	r7, r7, #0
   12a70:	mov	r4, #0
   12a74:	mov	r3, r7
   12a78:	mov	r2, r6
   12a7c:	str	r4, [sp]
   12a80:	bl	10dcc <lseek64@plt>
   12a84:	cmp	r0, #0
   12a88:	sbcs	r3, r1, #0
   12a8c:	mov	r9, r1
   12a90:	bge	12aec <__assert_fail@plt+0x1b94>
   12a94:	bl	10e8c <__errno_location@plt>
   12a98:	mov	r2, #5
   12a9c:	ldr	r1, [pc, #916]	; 12e38 <__assert_fail@plt+0x1ee0>
   12aa0:	ldr	fp, [r0]
   12aa4:	mov	r0, r4
   12aa8:	bl	10d78 <dcgettext@plt>
   12aac:	ldr	r2, [sp, #28]
   12ab0:	mov	r1, #3
   12ab4:	mov	sl, r0
   12ab8:	mov	r0, r4
   12abc:	bl	164a0 <__assert_fail@plt+0x5548>
   12ac0:	sub	r2, r5, #24
   12ac4:	mov	r1, r7
   12ac8:	str	r0, [sp, #8]
   12acc:	mov	r0, r6
   12ad0:	bl	13390 <__assert_fail@plt+0x2438>
   12ad4:	mov	r1, fp
   12ad8:	ldr	r3, [sp, #8]
   12adc:	mov	r2, sl
   12ae0:	str	r0, [sp]
   12ae4:	mov	r0, r4
   12ae8:	bl	10dfc <error@plt>
   12aec:	mvn	r0, r9
   12af0:	lsr	r0, r0, #31
   12af4:	add	sp, sp, #16384	; 0x4000
   12af8:	add	sp, sp, #84	; 0x54
   12afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b00:	subs	r0, r6, #1
   12b04:	sbc	r1, r7, #0
   12b08:	orrs	r3, r6, r7
   12b0c:	sub	r2, r2, r5
   12b10:	beq	129bc <__assert_fail@plt+0x1a64>
   12b14:	cmp	r2, #0
   12b18:	mov	r6, r0
   12b1c:	mov	r7, r1
   12b20:	beq	12b38 <__assert_fail@plt+0x1be0>
   12b24:	mov	r1, r4
   12b28:	mov	r0, r5
   12b2c:	bl	10e80 <memrchr@plt>
   12b30:	subs	r2, r0, #0
   12b34:	bne	12b00 <__assert_fail@plt+0x1ba8>
   12b38:	add	r1, sp, #16384	; 0x4000
   12b3c:	add	r1, r1, #120	; 0x78
   12b40:	ldrd	r2, [sp, #8]
   12b44:	ldrd	r0, [r1]
   12b48:	cmp	r3, r1
   12b4c:	cmpeq	r2, r0
   12b50:	beq	12ba0 <__assert_fail@plt+0x1c48>
   12b54:	subs	r2, r2, #8192	; 0x2000
   12b58:	sbc	r3, r3, #0
   12b5c:	mov	r1, #0
   12b60:	str	r1, [sp]
   12b64:	mov	r0, sl
   12b68:	strd	r2, [sp, #8]
   12b6c:	bl	10dcc <lseek64@plt>
   12b70:	cmp	r0, #0
   12b74:	sbcs	r3, r1, #0
   12b78:	blt	12c98 <__assert_fail@plt+0x1d40>
   12b7c:	mov	r2, #8192	; 0x2000
   12b80:	mov	r1, r5
   12b84:	mov	r0, sl
   12b88:	bl	17514 <__assert_fail@plt+0x65bc>
   12b8c:	cmn	r0, #1
   12b90:	mov	r2, r0
   12b94:	beq	12c28 <__assert_fail@plt+0x1cd0>
   12b98:	cmp	r2, #0
   12b9c:	bne	1296c <__assert_fail@plt+0x1a14>
   12ba0:	mov	r0, #1
   12ba4:	b	12cf4 <__assert_fail@plt+0x1d9c>
   12ba8:	subs	r6, r6, r0
   12bac:	sbc	r7, r7, #0
   12bb0:	orr	r2, r6, r7
   12bb4:	cmp	r2, #0
   12bb8:	clz	r3, r0
   12bbc:	lsr	r3, r3, #5
   12bc0:	moveq	r3, #0
   12bc4:	cmp	r3, #0
   12bc8:	bne	12db4 <__assert_fail@plt+0x1e5c>
   12bcc:	cmp	r0, #0
   12bd0:	beq	12bf4 <__assert_fail@plt+0x1c9c>
   12bd4:	mov	r2, r0
   12bd8:	add	r0, sp, #8256	; 0x2040
   12bdc:	ldr	r3, [sl]
   12be0:	mov	r1, r9
   12be4:	add	r0, r0, #16
   12be8:	bl	10d54 <fwrite_unlocked@plt>
   12bec:	cmp	r8, r0
   12bf0:	bhi	12e28 <__assert_fail@plt+0x1ed0>
   12bf4:	orrs	r3, r6, r7
   12bf8:	beq	12a30 <__assert_fail@plt+0x1ad8>
   12bfc:	cmp	r7, #0
   12c00:	cmpeq	r6, #8192	; 0x2000
   12c04:	add	r1, sp, #8256	; 0x2040
   12c08:	mov	r2, r6
   12c0c:	add	r1, r1, #16
   12c10:	movhi	r2, #8192	; 0x2000
   12c14:	mov	r0, fp
   12c18:	bl	17514 <__assert_fail@plt+0x65bc>
   12c1c:	cmn	r0, #1
   12c20:	mov	r8, r0
   12c24:	bne	12ba8 <__assert_fail@plt+0x1c50>
   12c28:	bl	10e8c <__errno_location@plt>
   12c2c:	ldr	r1, [pc, #520]	; 12e3c <__assert_fail@plt+0x1ee4>
   12c30:	mov	r2, #5
   12c34:	ldr	r4, [r0]
   12c38:	mov	r0, #0
   12c3c:	bl	10d78 <dcgettext@plt>
   12c40:	ldr	r1, [sp, #28]
   12c44:	mov	r5, r0
   12c48:	mov	r0, #4
   12c4c:	bl	15a24 <__assert_fail@plt+0x4acc>
   12c50:	mov	r3, r0
   12c54:	mov	r2, r5
   12c58:	mov	r1, r4
   12c5c:	mov	r0, #0
   12c60:	bl	10dfc <error@plt>
   12c64:	mov	r0, #0
   12c68:	add	sp, sp, #16384	; 0x4000
   12c6c:	add	sp, sp, #84	; 0x54
   12c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c74:	ldr	r2, [pc, #436]	; 12e30 <__assert_fail@plt+0x1ed8>
   12c78:	add	r3, r5, r4
   12c7c:	ldrb	r2, [r2]
   12c80:	ldrb	r3, [r3, #-1]
   12c84:	cmp	r3, r2
   12c88:	beq	1295c <__assert_fail@plt+0x1a04>
   12c8c:	subs	r6, r6, #1
   12c90:	sbc	r7, r7, #0
   12c94:	b	1295c <__assert_fail@plt+0x1a04>
   12c98:	bl	10e8c <__errno_location@plt>
   12c9c:	mov	r2, #5
   12ca0:	ldr	r1, [pc, #400]	; 12e38 <__assert_fail@plt+0x1ee0>
   12ca4:	ldr	r6, [r0]
   12ca8:	mov	r0, #0
   12cac:	bl	10d78 <dcgettext@plt>
   12cb0:	ldr	r2, [sp, #28]
   12cb4:	mov	r1, #3
   12cb8:	mov	r4, r0
   12cbc:	mov	r0, #0
   12cc0:	bl	164a0 <__assert_fail@plt+0x5548>
   12cc4:	add	r2, sp, #8256	; 0x2040
   12cc8:	add	r2, r2, #16
   12ccc:	mov	r5, r0
   12cd0:	ldrd	r0, [sp, #8]
   12cd4:	bl	13390 <__assert_fail@plt+0x2438>
   12cd8:	mov	r1, r6
   12cdc:	mov	r3, r5
   12ce0:	mov	r2, r4
   12ce4:	str	r0, [sp]
   12ce8:	mov	r0, #0
   12cec:	bl	10dfc <error@plt>
   12cf0:	mov	r0, #0
   12cf4:	add	sp, sp, #16384	; 0x4000
   12cf8:	add	sp, sp, #84	; 0x54
   12cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d00:	bl	10e8c <__errno_location@plt>
   12d04:	mov	r2, #5
   12d08:	ldr	r1, [pc, #296]	; 12e38 <__assert_fail@plt+0x1ee0>
   12d0c:	ldr	r7, [r0]
   12d10:	mov	r0, r6
   12d14:	bl	10d78 <dcgettext@plt>
   12d18:	ldr	r2, [sp, #28]
   12d1c:	mov	r1, #3
   12d20:	mov	r4, r0
   12d24:	mov	r0, r6
   12d28:	bl	164a0 <__assert_fail@plt+0x5548>
   12d2c:	add	r2, sp, #80	; 0x50
   12d30:	mov	r5, r0
   12d34:	ldrd	r0, [sp, #8]
   12d38:	bl	13390 <__assert_fail@plt+0x2438>
   12d3c:	mov	r1, r7
   12d40:	mov	r3, r5
   12d44:	str	r0, [sp]
   12d48:	mov	r2, r4
   12d4c:	mov	r0, r6
   12d50:	bl	10dfc <error@plt>
   12d54:	mov	r0, r6
   12d58:	add	sp, sp, #16384	; 0x4000
   12d5c:	add	sp, sp, #84	; 0x54
   12d60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d64:	bl	10e8c <__errno_location@plt>
   12d68:	mov	r2, #5
   12d6c:	ldr	r1, [pc, #196]	; 12e38 <__assert_fail@plt+0x1ee0>
   12d70:	ldr	r8, [r0]
   12d74:	mov	r0, r6
   12d78:	bl	10d78 <dcgettext@plt>
   12d7c:	ldr	r2, [sp, #28]
   12d80:	mov	r1, #3
   12d84:	mov	r4, r0
   12d88:	mov	r0, r6
   12d8c:	bl	164a0 <__assert_fail@plt+0x5548>
   12d90:	add	r3, sp, #16384	; 0x4000
   12d94:	add	r3, r3, #120	; 0x78
   12d98:	sub	r2, r5, #48	; 0x30
   12d9c:	mov	r7, r0
   12da0:	ldrd	r0, [r3]
   12da4:	bl	13390 <__assert_fail@plt+0x2438>
   12da8:	mov	r1, r8
   12dac:	mov	r3, r7
   12db0:	b	12d44 <__assert_fail@plt+0x1dec>
   12db4:	bl	10e8c <__errno_location@plt>
   12db8:	mov	r2, #5
   12dbc:	ldr	r1, [pc, #124]	; 12e40 <__assert_fail@plt+0x1ee8>
   12dc0:	ldr	r4, [r0]
   12dc4:	mov	r0, #0
   12dc8:	bl	10d78 <dcgettext@plt>
   12dcc:	ldr	r2, [sp, #28]
   12dd0:	mov	r1, #3
   12dd4:	mov	r5, r0
   12dd8:	mov	r0, #0
   12ddc:	bl	164a0 <__assert_fail@plt+0x5548>
   12de0:	b	12c50 <__assert_fail@plt+0x1cf8>
   12de4:	bl	10e8c <__errno_location@plt>
   12de8:	mov	r2, #5
   12dec:	ldr	r1, [pc, #72]	; 12e3c <__assert_fail@plt+0x1ee4>
   12df0:	ldr	r4, [r0]
   12df4:	mov	r0, r6
   12df8:	bl	10d78 <dcgettext@plt>
   12dfc:	ldr	r1, [sp, #28]
   12e00:	mov	r5, r0
   12e04:	mov	r0, #4
   12e08:	bl	15a24 <__assert_fail@plt+0x4acc>
   12e0c:	mov	r2, r5
   12e10:	mov	r1, r4
   12e14:	mov	r3, r0
   12e18:	mov	r0, r6
   12e1c:	bl	10dfc <error@plt>
   12e20:	mov	r0, r6
   12e24:	b	12cf4 <__assert_fail@plt+0x1d9c>
   12e28:	bl	10f68 <__assert_fail@plt+0x10>
   12e2c:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   12e30:	andeq	ip, r2, sp, asr r1
   12e34:	andeq	ip, r2, r4, asr r1
   12e38:	ldrdeq	sl, [r1], -r4
   12e3c:	muleq	r1, r8, r3
   12e40:	strdeq	sl, [r1], -r4
   12e44:	subs	r5, r0, #0
   12e48:	push	{r7, lr}
   12e4c:	sub	sp, sp, #56	; 0x38
   12e50:	beq	12e8c <__assert_fail@plt+0x1f34>
   12e54:	ldr	r3, [pc, #772]	; 13160 <__assert_fail@plt+0x2208>
   12e58:	mov	r2, #5
   12e5c:	ldr	r1, [pc, #768]	; 13164 <__assert_fail@plt+0x220c>
   12e60:	mov	r0, #0
   12e64:	ldr	r4, [r3]
   12e68:	bl	10d78 <dcgettext@plt>
   12e6c:	ldr	r3, [pc, #756]	; 13168 <__assert_fail@plt+0x2210>
   12e70:	mov	r1, #1
   12e74:	ldr	r3, [r3]
   12e78:	mov	r2, r0
   12e7c:	mov	r0, r4
   12e80:	bl	10ec8 <__fprintf_chk@plt>
   12e84:	mov	r0, r5
   12e88:	bl	10e5c <exit@plt>
   12e8c:	mov	r2, #5
   12e90:	ldr	r1, [pc, #724]	; 1316c <__assert_fail@plt+0x2214>
   12e94:	bl	10d78 <dcgettext@plt>
   12e98:	ldr	r3, [pc, #712]	; 13168 <__assert_fail@plt+0x2210>
   12e9c:	ldr	r7, [pc, #716]	; 13170 <__assert_fail@plt+0x2218>
   12ea0:	ldr	r4, [pc, #716]	; 13174 <__assert_fail@plt+0x221c>
   12ea4:	ldr	r2, [r3]
   12ea8:	mov	r1, r0
   12eac:	mov	r0, #1
   12eb0:	bl	10eb0 <__printf_chk@plt>
   12eb4:	mov	r2, #5
   12eb8:	ldr	r1, [pc, #696]	; 13178 <__assert_fail@plt+0x2220>
   12ebc:	mov	r0, r5
   12ec0:	bl	10d78 <dcgettext@plt>
   12ec4:	mov	r2, #10
   12ec8:	mov	r1, r0
   12ecc:	mov	r0, #1
   12ed0:	bl	10eb0 <__printf_chk@plt>
   12ed4:	mov	r2, #5
   12ed8:	ldr	r1, [pc, #668]	; 1317c <__assert_fail@plt+0x2224>
   12edc:	mov	r0, r5
   12ee0:	bl	10d78 <dcgettext@plt>
   12ee4:	ldr	r1, [r7]
   12ee8:	bl	10cdc <fputs_unlocked@plt>
   12eec:	mov	r2, #5
   12ef0:	ldr	r1, [pc, #648]	; 13180 <__assert_fail@plt+0x2228>
   12ef4:	mov	r0, r5
   12ef8:	bl	10d78 <dcgettext@plt>
   12efc:	ldr	r1, [r7]
   12f00:	bl	10cdc <fputs_unlocked@plt>
   12f04:	mov	r2, #5
   12f08:	ldr	r1, [pc, #628]	; 13184 <__assert_fail@plt+0x222c>
   12f0c:	mov	r0, r5
   12f10:	bl	10d78 <dcgettext@plt>
   12f14:	mov	r2, #10
   12f18:	mov	r1, r0
   12f1c:	mov	r0, #1
   12f20:	bl	10eb0 <__printf_chk@plt>
   12f24:	mov	r2, #5
   12f28:	ldr	r1, [pc, #600]	; 13188 <__assert_fail@plt+0x2230>
   12f2c:	mov	r0, r5
   12f30:	bl	10d78 <dcgettext@plt>
   12f34:	ldr	r1, [r7]
   12f38:	bl	10cdc <fputs_unlocked@plt>
   12f3c:	mov	r2, #5
   12f40:	ldr	r1, [pc, #580]	; 1318c <__assert_fail@plt+0x2234>
   12f44:	mov	r0, r5
   12f48:	bl	10d78 <dcgettext@plt>
   12f4c:	ldr	r1, [r7]
   12f50:	bl	10cdc <fputs_unlocked@plt>
   12f54:	mov	r2, #5
   12f58:	ldr	r1, [pc, #560]	; 13190 <__assert_fail@plt+0x2238>
   12f5c:	mov	r0, r5
   12f60:	bl	10d78 <dcgettext@plt>
   12f64:	ldr	r1, [r7]
   12f68:	bl	10cdc <fputs_unlocked@plt>
   12f6c:	mov	r2, #5
   12f70:	ldr	r1, [pc, #540]	; 13194 <__assert_fail@plt+0x223c>
   12f74:	mov	r0, r5
   12f78:	bl	10d78 <dcgettext@plt>
   12f7c:	ldr	r1, [r7]
   12f80:	bl	10cdc <fputs_unlocked@plt>
   12f84:	mov	r2, #5
   12f88:	ldr	r1, [pc, #520]	; 13198 <__assert_fail@plt+0x2240>
   12f8c:	mov	r0, r5
   12f90:	bl	10d78 <dcgettext@plt>
   12f94:	ldr	r1, [r7]
   12f98:	bl	10cdc <fputs_unlocked@plt>
   12f9c:	ldm	r4!, {r0, r1, r2, r3}
   12fa0:	mov	lr, sp
   12fa4:	stmia	lr!, {r0, r1, r2, r3}
   12fa8:	ldm	r4!, {r0, r1, r2, r3}
   12fac:	ldr	ip, [sp]
   12fb0:	stmia	lr!, {r0, r1, r2, r3}
   12fb4:	cmp	ip, #0
   12fb8:	ldm	r4!, {r0, r1, r2, r3}
   12fbc:	stmia	lr!, {r0, r1, r2, r3}
   12fc0:	ldm	r4, {r0, r1}
   12fc4:	moveq	r4, sp
   12fc8:	stm	lr, {r0, r1}
   12fcc:	beq	12ffc <__assert_fail@plt+0x20a4>
   12fd0:	ldr	r6, [pc, #452]	; 1319c <__assert_fail@plt+0x2244>
   12fd4:	mov	r4, sp
   12fd8:	b	12fe8 <__assert_fail@plt+0x2090>
   12fdc:	ldr	ip, [r4, #8]!
   12fe0:	cmp	ip, #0
   12fe4:	beq	12ffc <__assert_fail@plt+0x20a4>
   12fe8:	mov	r1, ip
   12fec:	mov	r0, r6
   12ff0:	bl	10cf4 <strcmp@plt>
   12ff4:	cmp	r0, #0
   12ff8:	bne	12fdc <__assert_fail@plt+0x2084>
   12ffc:	ldr	r4, [r4, #4]
   13000:	mov	r2, #5
   13004:	cmp	r4, #0
   13008:	ldr	r1, [pc, #400]	; 131a0 <__assert_fail@plt+0x2248>
   1300c:	beq	130b4 <__assert_fail@plt+0x215c>
   13010:	mov	r0, #0
   13014:	bl	10d78 <dcgettext@plt>
   13018:	ldr	r3, [pc, #388]	; 131a4 <__assert_fail@plt+0x224c>
   1301c:	ldr	r2, [pc, #388]	; 131a8 <__assert_fail@plt+0x2250>
   13020:	mov	r1, r0
   13024:	mov	r0, #1
   13028:	bl	10eb0 <__printf_chk@plt>
   1302c:	mov	r1, #0
   13030:	mov	r0, #5
   13034:	bl	10ef8 <setlocale@plt>
   13038:	cmp	r0, #0
   1303c:	ldreq	r6, [pc, #344]	; 1319c <__assert_fail@plt+0x2244>
   13040:	beq	1305c <__assert_fail@plt+0x2104>
   13044:	mov	r2, #3
   13048:	ldr	r1, [pc, #348]	; 131ac <__assert_fail@plt+0x2254>
   1304c:	bl	10f34 <strncmp@plt>
   13050:	ldr	r6, [pc, #324]	; 1319c <__assert_fail@plt+0x2244>
   13054:	cmp	r0, #0
   13058:	bne	13144 <__assert_fail@plt+0x21ec>
   1305c:	mov	r2, #5
   13060:	ldr	r1, [pc, #328]	; 131b0 <__assert_fail@plt+0x2258>
   13064:	mov	r0, #0
   13068:	bl	10d78 <dcgettext@plt>
   1306c:	ldr	r3, [pc, #296]	; 1319c <__assert_fail@plt+0x2244>
   13070:	ldr	r2, [pc, #300]	; 131a4 <__assert_fail@plt+0x224c>
   13074:	mov	r1, r0
   13078:	mov	r0, #1
   1307c:	bl	10eb0 <__printf_chk@plt>
   13080:	mov	r2, #5
   13084:	ldr	r1, [pc, #296]	; 131b4 <__assert_fail@plt+0x225c>
   13088:	mov	r0, #0
   1308c:	bl	10d78 <dcgettext@plt>
   13090:	ldr	r2, [pc, #288]	; 131b8 <__assert_fail@plt+0x2260>
   13094:	cmp	r4, r6
   13098:	ldr	r3, [pc, #284]	; 131bc <__assert_fail@plt+0x2264>
   1309c:	movne	r3, r2
   130a0:	mov	r1, r0
   130a4:	mov	r2, r4
   130a8:	mov	r0, #1
   130ac:	bl	10eb0 <__printf_chk@plt>
   130b0:	b	12e84 <__assert_fail@plt+0x1f2c>
   130b4:	mov	r0, r4
   130b8:	bl	10d78 <dcgettext@plt>
   130bc:	ldr	r3, [pc, #224]	; 131a4 <__assert_fail@plt+0x224c>
   130c0:	ldr	r2, [pc, #224]	; 131a8 <__assert_fail@plt+0x2250>
   130c4:	mov	r1, r0
   130c8:	mov	r0, #1
   130cc:	bl	10eb0 <__printf_chk@plt>
   130d0:	mov	r1, r4
   130d4:	mov	r0, #5
   130d8:	bl	10ef8 <setlocale@plt>
   130dc:	cmp	r0, #0
   130e0:	beq	130f8 <__assert_fail@plt+0x21a0>
   130e4:	mov	r2, #3
   130e8:	ldr	r1, [pc, #188]	; 131ac <__assert_fail@plt+0x2254>
   130ec:	bl	10f34 <strncmp@plt>
   130f0:	cmp	r0, #0
   130f4:	bne	1313c <__assert_fail@plt+0x21e4>
   130f8:	mov	r2, #5
   130fc:	ldr	r1, [pc, #172]	; 131b0 <__assert_fail@plt+0x2258>
   13100:	mov	r0, #0
   13104:	bl	10d78 <dcgettext@plt>
   13108:	ldr	r3, [pc, #140]	; 1319c <__assert_fail@plt+0x2244>
   1310c:	ldr	r2, [pc, #144]	; 131a4 <__assert_fail@plt+0x224c>
   13110:	mov	r4, r3
   13114:	mov	r1, r0
   13118:	mov	r0, #1
   1311c:	bl	10eb0 <__printf_chk@plt>
   13120:	ldr	r1, [pc, #140]	; 131b4 <__assert_fail@plt+0x225c>
   13124:	mov	r2, #5
   13128:	mov	r0, #0
   1312c:	bl	10d78 <dcgettext@plt>
   13130:	ldr	r3, [pc, #132]	; 131bc <__assert_fail@plt+0x2264>
   13134:	mov	r1, r0
   13138:	b	130a4 <__assert_fail@plt+0x214c>
   1313c:	ldr	r6, [pc, #88]	; 1319c <__assert_fail@plt+0x2244>
   13140:	mov	r4, r6
   13144:	mov	r2, #5
   13148:	ldr	r1, [pc, #112]	; 131c0 <__assert_fail@plt+0x2268>
   1314c:	mov	r0, #0
   13150:	bl	10d78 <dcgettext@plt>
   13154:	ldr	r1, [r7]
   13158:	bl	10cdc <fputs_unlocked@plt>
   1315c:	b	1305c <__assert_fail@plt+0x2104>
   13160:	andeq	ip, r2, r0, asr r1
   13164:	andeq	sl, r1, ip, lsl r4
   13168:	andeq	ip, r2, ip, ror #2
   1316c:	andeq	sl, r1, r4, asr #8
   13170:	andeq	ip, r2, r4, asr r1
   13174:	andeq	sl, r1, r4, asr r2
   13178:	andeq	sl, r1, r8, ror #8
   1317c:	strdeq	sl, [r1], -r0
   13180:	andeq	sl, r1, r8, lsr #10
   13184:	andeq	sl, r1, r4, ror r5
   13188:	andeq	sl, r1, r4, lsl #14
   1318c:	andeq	sl, r1, r8, lsl #15
   13190:	andeq	sl, r1, r8, asr #15
   13194:	strdeq	sl, [r1], -r8
   13198:	andeq	sl, r1, r0, lsr r8
   1319c:	andeq	sl, r1, r4, lsl r4
   131a0:	andeq	sl, r1, r4, lsl #18
   131a4:	andeq	sl, r1, ip, lsl r9
   131a8:	andeq	sl, r1, r4, asr #18
   131ac:	andeq	sl, r1, r4, asr r9
   131b0:	andeq	sl, r1, r0, lsr #19
   131b4:			; <UNDEFINED> instruction: 0x0001a9bc
   131b8:	andeq	sl, r1, r4, ror #8
   131bc:	strdeq	sl, [r1], -r4
   131c0:	andeq	sl, r1, r8, asr r9
   131c4:	ldr	r3, [pc, #4]	; 131d0 <__assert_fail@plt+0x2278>
   131c8:	str	r0, [r3]
   131cc:	bx	lr
   131d0:	andeq	ip, r2, r4, ror #2
   131d4:	ldr	r3, [pc, #4]	; 131e0 <__assert_fail@plt+0x2288>
   131d8:	strb	r0, [r3, #4]
   131dc:	bx	lr
   131e0:	andeq	ip, r2, r4, ror #2
   131e4:	ldr	r3, [pc, #192]	; 132ac <__assert_fail@plt+0x2354>
   131e8:	push	{r4, r5, r6, lr}
   131ec:	sub	sp, sp, #8
   131f0:	ldr	r0, [r3]
   131f4:	bl	19754 <__assert_fail@plt+0x87fc>
   131f8:	cmp	r0, #0
   131fc:	beq	13220 <__assert_fail@plt+0x22c8>
   13200:	ldr	r4, [pc, #168]	; 132b0 <__assert_fail@plt+0x2358>
   13204:	ldrb	r3, [r4, #4]
   13208:	cmp	r3, #0
   1320c:	beq	1323c <__assert_fail@plt+0x22e4>
   13210:	bl	10e8c <__errno_location@plt>
   13214:	ldr	r3, [r0]
   13218:	cmp	r3, #32
   1321c:	bne	1323c <__assert_fail@plt+0x22e4>
   13220:	ldr	r3, [pc, #140]	; 132b4 <__assert_fail@plt+0x235c>
   13224:	ldr	r0, [r3]
   13228:	bl	19754 <__assert_fail@plt+0x87fc>
   1322c:	cmp	r0, #0
   13230:	bne	13284 <__assert_fail@plt+0x232c>
   13234:	add	sp, sp, #8
   13238:	pop	{r4, r5, r6, pc}
   1323c:	mov	r2, #5
   13240:	ldr	r1, [pc, #112]	; 132b8 <__assert_fail@plt+0x2360>
   13244:	mov	r0, #0
   13248:	bl	10d78 <dcgettext@plt>
   1324c:	ldr	r4, [r4]
   13250:	cmp	r4, #0
   13254:	mov	r5, r0
   13258:	beq	13290 <__assert_fail@plt+0x2338>
   1325c:	bl	10e8c <__errno_location@plt>
   13260:	ldr	r6, [r0]
   13264:	mov	r0, r4
   13268:	bl	16134 <__assert_fail@plt+0x51dc>
   1326c:	mov	r1, r6
   13270:	str	r5, [sp]
   13274:	ldr	r2, [pc, #64]	; 132bc <__assert_fail@plt+0x2364>
   13278:	mov	r3, r0
   1327c:	mov	r0, #0
   13280:	bl	10dfc <error@plt>
   13284:	ldr	r3, [pc, #52]	; 132c0 <__assert_fail@plt+0x2368>
   13288:	ldr	r0, [r3]
   1328c:	bl	10d24 <_exit@plt>
   13290:	bl	10e8c <__errno_location@plt>
   13294:	mov	r3, r5
   13298:	ldr	r2, [pc, #36]	; 132c4 <__assert_fail@plt+0x236c>
   1329c:	ldr	r1, [r0]
   132a0:	mov	r0, r4
   132a4:	bl	10dfc <error@plt>
   132a8:	b	13284 <__assert_fail@plt+0x232c>
   132ac:	andeq	ip, r2, r4, asr r1
   132b0:	andeq	ip, r2, r4, ror #2
   132b4:	andeq	ip, r2, r0, asr r1
   132b8:	andeq	sl, r1, r4, asr #23
   132bc:	andeq	sl, r1, ip, asr sl
   132c0:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   132c4:	andeq	sl, r1, r0, ror #20
   132c8:	push	{r4, r5, lr}
   132cc:	sub	sp, sp, #12
   132d0:	mov	r5, r0
   132d4:	bl	10e8c <__errno_location@plt>
   132d8:	mov	r2, #0
   132dc:	mov	r4, r0
   132e0:	ldr	r3, [r0]
   132e4:	str	r2, [r4]
   132e8:	mov	r0, r5
   132ec:	str	r3, [sp]
   132f0:	str	r3, [sp, #4]
   132f4:	bl	10d18 <free@plt>
   132f8:	ldr	r3, [r4]
   132fc:	add	r2, sp, #8
   13300:	cmp	r3, #0
   13304:	moveq	r3, #4
   13308:	movne	r3, #0
   1330c:	add	r3, r2, r3
   13310:	ldr	r3, [r3, #-8]
   13314:	str	r3, [r4]
   13318:	add	sp, sp, #12
   1331c:	pop	{r4, r5, pc}
   13320:	push	{r4, r5, r6, r7, r8, lr}
   13324:	subs	r5, r2, #0
   13328:	beq	13388 <__assert_fail@plt+0x2430>
   1332c:	mov	r8, r0
   13330:	mov	r6, r1
   13334:	mov	r7, #0
   13338:	b	13354 <__assert_fail@plt+0x23fc>
   1333c:	cmp	r0, #0
   13340:	beq	13378 <__assert_fail@plt+0x2420>
   13344:	subs	r5, r5, r0
   13348:	add	r7, r7, r0
   1334c:	add	r6, r6, r0
   13350:	beq	13370 <__assert_fail@plt+0x2418>
   13354:	mov	r2, r5
   13358:	mov	r1, r6
   1335c:	mov	r0, r8
   13360:	bl	17514 <__assert_fail@plt+0x65bc>
   13364:	cmn	r0, #1
   13368:	mov	r4, r0
   1336c:	bne	1333c <__assert_fail@plt+0x23e4>
   13370:	mov	r0, r7
   13374:	pop	{r4, r5, r6, r7, r8, pc}
   13378:	bl	10e8c <__errno_location@plt>
   1337c:	str	r4, [r0]
   13380:	mov	r0, r7
   13384:	pop	{r4, r5, r6, r7, r8, pc}
   13388:	mov	r7, r5
   1338c:	b	13370 <__assert_fail@plt+0x2418>
   13390:	cmp	r0, #0
   13394:	sbcs	r3, r1, #0
   13398:	mov	r3, #0
   1339c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   133a0:	mov	r4, r0
   133a4:	mov	r5, r1
   133a8:	strb	r3, [r2, #20]
   133ac:	add	r6, r2, #20
   133b0:	mov	r8, #10
   133b4:	mov	r9, #0
   133b8:	blt	13408 <__assert_fail@plt+0x24b0>
   133bc:	mov	r0, r4
   133c0:	mov	r1, r5
   133c4:	mov	r2, r8
   133c8:	mov	r3, r9
   133cc:	bl	19f84 <__assert_fail@plt+0x902c>
   133d0:	mov	r0, r4
   133d4:	mov	r1, r5
   133d8:	mov	r3, r9
   133dc:	add	r2, r2, #48	; 0x30
   133e0:	strb	r2, [r6, #-1]!
   133e4:	mov	r2, r8
   133e8:	bl	19f84 <__assert_fail@plt+0x902c>
   133ec:	mov	r4, r0
   133f0:	mov	r5, r1
   133f4:	orrs	r3, r4, r5
   133f8:	bne	133bc <__assert_fail@plt+0x2464>
   133fc:	mov	r0, r6
   13400:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13404:	mov	r6, r7
   13408:	mov	r0, r4
   1340c:	mov	r1, r5
   13410:	mov	r2, r8
   13414:	mov	r3, r9
   13418:	bl	19f84 <__assert_fail@plt+0x902c>
   1341c:	mov	r0, r4
   13420:	mov	r1, r5
   13424:	mov	r3, r9
   13428:	sub	r7, r6, #1
   1342c:	rsb	r2, r2, #48	; 0x30
   13430:	strb	r2, [r6, #-1]
   13434:	mov	r2, r8
   13438:	bl	19f84 <__assert_fail@plt+0x902c>
   1343c:	mov	r4, r0
   13440:	mov	r5, r1
   13444:	orrs	r3, r4, r5
   13448:	bne	13404 <__assert_fail@plt+0x24ac>
   1344c:	mov	r3, #45	; 0x2d
   13450:	sub	r6, r6, #2
   13454:	strb	r3, [r7, #-1]
   13458:	mov	r0, r6
   1345c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13460:	push	{r4, r5, r6, r8, r9, lr}
   13464:	mov	r4, r0
   13468:	mov	r5, r1
   1346c:	add	r6, r2, #20
   13470:	mov	r8, #10
   13474:	mov	r9, #0
   13478:	mov	r3, #0
   1347c:	strb	r3, [r2, #20]
   13480:	mov	r0, r4
   13484:	mov	r1, r5
   13488:	mov	r2, r8
   1348c:	mov	r3, r9
   13490:	bl	1a058 <__assert_fail@plt+0x9100>
   13494:	mov	r0, r4
   13498:	mov	r1, r5
   1349c:	mov	r3, r9
   134a0:	add	r2, r2, #48	; 0x30
   134a4:	strb	r2, [r6, #-1]!
   134a8:	mov	r2, r8
   134ac:	bl	1a058 <__assert_fail@plt+0x9100>
   134b0:	mov	r4, r0
   134b4:	mov	r5, r1
   134b8:	orrs	r3, r4, r5
   134bc:	bne	13480 <__assert_fail@plt+0x2528>
   134c0:	mov	r0, r6
   134c4:	pop	{r4, r5, r6, r8, r9, pc}
   134c8:	push	{r4, r5, r6, lr}
   134cc:	subs	r4, r0, #0
   134d0:	beq	13544 <__assert_fail@plt+0x25ec>
   134d4:	mov	r1, #47	; 0x2f
   134d8:	bl	10f04 <strrchr@plt>
   134dc:	subs	r5, r0, #0
   134e0:	beq	13530 <__assert_fail@plt+0x25d8>
   134e4:	add	r6, r5, #1
   134e8:	sub	r3, r6, r4
   134ec:	cmp	r3, #6
   134f0:	ble	13530 <__assert_fail@plt+0x25d8>
   134f4:	mov	r2, #7
   134f8:	ldr	r1, [pc, #96]	; 13560 <__assert_fail@plt+0x2608>
   134fc:	sub	r0, r5, #6
   13500:	bl	10f34 <strncmp@plt>
   13504:	cmp	r0, #0
   13508:	bne	13530 <__assert_fail@plt+0x25d8>
   1350c:	mov	r2, #3
   13510:	ldr	r1, [pc, #76]	; 13564 <__assert_fail@plt+0x260c>
   13514:	mov	r0, r6
   13518:	bl	10f34 <strncmp@plt>
   1351c:	cmp	r0, #0
   13520:	movne	r4, r6
   13524:	ldreq	r3, [pc, #60]	; 13568 <__assert_fail@plt+0x2610>
   13528:	addeq	r4, r5, #4
   1352c:	streq	r4, [r3]
   13530:	ldr	r2, [pc, #52]	; 1356c <__assert_fail@plt+0x2614>
   13534:	ldr	r3, [pc, #52]	; 13570 <__assert_fail@plt+0x2618>
   13538:	str	r4, [r2]
   1353c:	str	r4, [r3]
   13540:	pop	{r4, r5, r6, pc}
   13544:	ldr	r3, [pc, #40]	; 13574 <__assert_fail@plt+0x261c>
   13548:	mov	r2, #55	; 0x37
   1354c:	mov	r1, #1
   13550:	ldr	r3, [r3]
   13554:	ldr	r0, [pc, #28]	; 13578 <__assert_fail@plt+0x2620>
   13558:	bl	10dc0 <fwrite@plt>
   1355c:	bl	10f40 <abort@plt>
   13560:	andeq	sl, r1, r8, lsl #24
   13564:	andeq	sl, r1, r0, lsl ip
   13568:	andeq	ip, r2, r0, asr #2
   1356c:	andeq	ip, r2, ip, ror #2
   13570:	andeq	ip, r2, r4, asr #2
   13574:	andeq	ip, r2, r0, asr r1
   13578:	ldrdeq	sl, [r1], -r0
   1357c:	push	{r4, r5, r6, lr}
   13580:	mov	r4, r0
   13584:	mov	r5, r1
   13588:	bl	19970 <__assert_fail@plt+0x8a18>
   1358c:	ldrb	r3, [r0]
   13590:	bic	r3, r3, #32
   13594:	cmp	r3, #85	; 0x55
   13598:	bne	135f8 <__assert_fail@plt+0x26a0>
   1359c:	ldrb	r3, [r0, #1]
   135a0:	bic	r3, r3, #32
   135a4:	cmp	r3, #84	; 0x54
   135a8:	bne	13634 <__assert_fail@plt+0x26dc>
   135ac:	ldrb	r3, [r0, #2]
   135b0:	bic	r3, r3, #32
   135b4:	cmp	r3, #70	; 0x46
   135b8:	bne	13634 <__assert_fail@plt+0x26dc>
   135bc:	ldrb	r3, [r0, #3]
   135c0:	cmp	r3, #45	; 0x2d
   135c4:	bne	13634 <__assert_fail@plt+0x26dc>
   135c8:	ldrb	r3, [r0, #4]
   135cc:	cmp	r3, #56	; 0x38
   135d0:	bne	13634 <__assert_fail@plt+0x26dc>
   135d4:	ldrb	r3, [r0, #5]
   135d8:	cmp	r3, #0
   135dc:	bne	13634 <__assert_fail@plt+0x26dc>
   135e0:	ldrb	r2, [r4]
   135e4:	ldr	r3, [pc, #152]	; 13684 <__assert_fail@plt+0x272c>
   135e8:	ldr	r0, [pc, #152]	; 13688 <__assert_fail@plt+0x2730>
   135ec:	cmp	r2, #96	; 0x60
   135f0:	movne	r0, r3
   135f4:	pop	{r4, r5, r6, pc}
   135f8:	cmp	r3, #71	; 0x47
   135fc:	bne	13634 <__assert_fail@plt+0x26dc>
   13600:	ldrb	r3, [r0, #1]
   13604:	bic	r3, r3, #32
   13608:	cmp	r3, #66	; 0x42
   1360c:	bne	13634 <__assert_fail@plt+0x26dc>
   13610:	ldrb	r3, [r0, #2]
   13614:	cmp	r3, #49	; 0x31
   13618:	bne	13634 <__assert_fail@plt+0x26dc>
   1361c:	ldrb	r3, [r0, #3]
   13620:	cmp	r3, #56	; 0x38
   13624:	bne	13634 <__assert_fail@plt+0x26dc>
   13628:	ldrb	r3, [r0, #4]
   1362c:	cmp	r3, #48	; 0x30
   13630:	beq	13648 <__assert_fail@plt+0x26f0>
   13634:	ldr	r3, [pc, #80]	; 1368c <__assert_fail@plt+0x2734>
   13638:	cmp	r5, #9
   1363c:	ldr	r0, [pc, #76]	; 13690 <__assert_fail@plt+0x2738>
   13640:	movne	r0, r3
   13644:	pop	{r4, r5, r6, pc}
   13648:	ldrb	r3, [r0, #5]
   1364c:	cmp	r3, #51	; 0x33
   13650:	bne	13634 <__assert_fail@plt+0x26dc>
   13654:	ldrb	r3, [r0, #6]
   13658:	cmp	r3, #48	; 0x30
   1365c:	bne	13634 <__assert_fail@plt+0x26dc>
   13660:	ldrb	r3, [r0, #7]
   13664:	cmp	r3, #0
   13668:	bne	13634 <__assert_fail@plt+0x26dc>
   1366c:	ldrb	r2, [r4]
   13670:	ldr	r3, [pc, #28]	; 13694 <__assert_fail@plt+0x273c>
   13674:	ldr	r0, [pc, #28]	; 13698 <__assert_fail@plt+0x2740>
   13678:	cmp	r2, #96	; 0x60
   1367c:	movne	r0, r3
   13680:	pop	{r4, r5, r6, pc}
   13684:	andeq	sl, r1, ip, ror #24
   13688:	andeq	sl, r1, r8, ror #24
   1368c:	andeq	sl, r1, ip, ror ip
   13690:	andeq	sl, r1, r8, ror ip
   13694:	andeq	sl, r1, r4, ror ip
   13698:	andeq	sl, r1, r0, ror ip
   1369c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136a0:	sub	sp, sp, #140	; 0x8c
   136a4:	mov	r9, r1
   136a8:	str	r3, [sp, #24]
   136ac:	mov	r3, #1
   136b0:	mov	sl, r0
   136b4:	str	r2, [sp, #44]	; 0x2c
   136b8:	str	r3, [sp, #28]
   136bc:	bl	10dd8 <__ctype_get_mb_cur_max@plt>
   136c0:	ldr	r3, [sp, #180]	; 0xb4
   136c4:	mov	fp, r9
   136c8:	mov	r9, sl
   136cc:	lsr	r3, r3, #1
   136d0:	and	r3, r3, #1
   136d4:	str	r3, [sp, #40]	; 0x28
   136d8:	ldr	r3, [sp, #180]	; 0xb4
   136dc:	mov	r2, #0
   136e0:	and	r3, r3, #4
   136e4:	str	r3, [sp, #100]	; 0x64
   136e8:	ldr	r3, [sp, #180]	; 0xb4
   136ec:	str	r2, [sp, #76]	; 0x4c
   136f0:	and	r3, r3, #1
   136f4:	str	r3, [sp, #96]	; 0x60
   136f8:	str	r2, [sp, #36]	; 0x24
   136fc:	str	r2, [sp, #56]	; 0x38
   13700:	str	r2, [sp, #68]	; 0x44
   13704:	str	r2, [sp, #72]	; 0x48
   13708:	str	r2, [sp, #84]	; 0x54
   1370c:	str	r0, [sp, #80]	; 0x50
   13710:	ldr	r3, [sp, #176]	; 0xb0
   13714:	cmp	r3, #10
   13718:	ldrls	pc, [pc, r3, lsl #2]
   1371c:	b	148f4 <__assert_fail@plt+0x399c>
   13720:	andeq	r3, r1, ip, asr #14
   13724:	andeq	r3, r1, ip, ror #20
   13728:	andeq	r3, r1, r4, asr #23
   1372c:	andeq	r3, r1, r0, lsr #21
   13730:	andeq	r3, r1, r8, lsl ip
   13734:	strdeq	r3, [r1], -r8
   13738:	andeq	r3, r1, r0, asr #21
   1373c:	andeq	r3, r1, r4, ror #21
   13740:	andeq	r3, r1, ip, lsl #22
   13744:	andeq	r3, r1, ip, lsl #22
   13748:	andeq	r3, r1, ip, lsl #22
   1374c:	mov	r3, #0
   13750:	ldr	r1, [sp, #56]	; 0x38
   13754:	ldr	r2, [sp, #176]	; 0xb0
   13758:	ldr	lr, [sp, #176]	; 0xb0
   1375c:	mov	r8, r3
   13760:	mov	ip, r3
   13764:	str	r3, [sp, #40]	; 0x28
   13768:	mov	r3, r1
   1376c:	cmp	r2, #2
   13770:	moveq	r3, #0
   13774:	andne	r3, r3, #1
   13778:	mov	r0, r3
   1377c:	str	r3, [sp, #92]	; 0x5c
   13780:	ldr	r3, [sp, #68]	; 0x44
   13784:	sub	lr, lr, #2
   13788:	adds	r2, r3, #0
   1378c:	movne	r2, #1
   13790:	and	r3, r1, ip
   13794:	and	r3, r2, r3
   13798:	clz	lr, lr
   1379c:	str	r3, [sp, #88]	; 0x58
   137a0:	lsr	lr, lr, #5
   137a4:	mov	r3, ip
   137a8:	and	r3, r3, lr
   137ac:	mov	sl, #0
   137b0:	and	r0, r2, r0
   137b4:	str	r3, [sp, #64]	; 0x40
   137b8:	eor	r3, r1, #1
   137bc:	str	lr, [sp, #52]	; 0x34
   137c0:	str	r0, [sp, #48]	; 0x30
   137c4:	str	r3, [sp, #60]	; 0x3c
   137c8:	ldr	r3, [sp, #24]
   137cc:	cmn	r3, #1
   137d0:	beq	13d00 <__assert_fail@plt+0x2da8>
   137d4:	subs	r7, r3, sl
   137d8:	movne	r7, #1
   137dc:	cmp	r7, #0
   137e0:	beq	13d18 <__assert_fail@plt+0x2dc0>
   137e4:	ldr	r3, [sp, #48]	; 0x30
   137e8:	cmp	r3, #0
   137ec:	beq	14084 <__assert_fail@plt+0x312c>
   137f0:	ldr	r2, [sp, #68]	; 0x44
   137f4:	ldr	r1, [sp, #24]
   137f8:	cmp	r2, #1
   137fc:	mov	r3, r2
   13800:	movls	r3, #0
   13804:	movhi	r3, #1
   13808:	cmn	r1, #1
   1380c:	movne	r3, #0
   13810:	cmp	r3, #0
   13814:	add	r4, sl, r2
   13818:	beq	13828 <__assert_fail@plt+0x28d0>
   1381c:	ldr	r0, [sp, #44]	; 0x2c
   13820:	bl	10e68 <strlen@plt>
   13824:	str	r0, [sp, #24]
   13828:	ldr	r3, [sp, #24]
   1382c:	cmp	r3, r4
   13830:	ldr	r3, [sp, #44]	; 0x2c
   13834:	add	r5, r3, sl
   13838:	bcc	1408c <__assert_fail@plt+0x3134>
   1383c:	mov	r0, r5
   13840:	ldr	r2, [sp, #68]	; 0x44
   13844:	ldr	r1, [sp, #72]	; 0x48
   13848:	bl	10d60 <memcmp@plt>
   1384c:	cmp	r0, #0
   13850:	bne	1408c <__assert_fail@plt+0x3134>
   13854:	ldr	r3, [sp, #40]	; 0x28
   13858:	cmp	r3, #0
   1385c:	bne	14a48 <__assert_fail@plt+0x3af0>
   13860:	ldrb	r4, [r5]
   13864:	cmp	r4, #126	; 0x7e
   13868:	ldrls	pc, [pc, r4, lsl #2]
   1386c:	b	14984 <__assert_fail@plt+0x3a2c>
   13870:	andeq	r3, r1, r4, asr #30
   13874:	andeq	r4, r1, r4, lsl #19
   13878:	andeq	r4, r1, r4, lsl #19
   1387c:	andeq	r4, r1, r4, lsl #19
   13880:	andeq	r4, r1, r4, lsl #19
   13884:	andeq	r4, r1, r4, lsl #19
   13888:	andeq	r4, r1, r4, lsl #19
   1388c:	andeq	r3, r1, r0, lsr pc
   13890:	andeq	r3, r1, ip, lsl pc
   13894:	strdeq	r3, [r1], -r8
   13898:	ldrdeq	r3, [r1], -r8
   1389c:	andeq	r3, r1, r8, lsl #30
   138a0:	andeq	r3, r1, r0, asr #28
   138a4:	andeq	r4, r1, r4, ror r0
   138a8:	andeq	r4, r1, r4, lsl #19
   138ac:	andeq	r4, r1, r4, lsl #19
   138b0:	andeq	r4, r1, r4, lsl #19
   138b4:	andeq	r4, r1, r4, lsl #19
   138b8:	andeq	r4, r1, r4, lsl #19
   138bc:	andeq	r4, r1, r4, lsl #19
   138c0:	andeq	r4, r1, r4, lsl #19
   138c4:	andeq	r4, r1, r4, lsl #19
   138c8:	andeq	r4, r1, r4, lsl #19
   138cc:	andeq	r4, r1, r4, lsl #19
   138d0:	andeq	r4, r1, r4, lsl #19
   138d4:	andeq	r4, r1, r4, lsl #19
   138d8:	andeq	r4, r1, r4, lsl #19
   138dc:	andeq	r4, r1, r4, lsl #19
   138e0:	andeq	r4, r1, r4, lsl #19
   138e4:	andeq	r4, r1, r4, lsl #19
   138e8:	andeq	r4, r1, r4, lsl #19
   138ec:	andeq	r4, r1, r4, lsl #19
   138f0:	andeq	r4, r1, r4, rrx
   138f4:	andeq	r4, r1, r4, asr #32
   138f8:	andeq	r4, r1, r4, asr #32
   138fc:	andeq	r4, r1, r4, lsr #32
   13900:	andeq	r4, r1, r4, asr #32
   13904:	andeq	r3, r1, r0, lsr lr
   13908:	andeq	r4, r1, r4, asr #32
   1390c:	andeq	r3, r1, ip, lsl #28
   13910:	andeq	r4, r1, r4, asr #32
   13914:	andeq	r4, r1, r4, asr #32
   13918:	andeq	r4, r1, r4, asr #32
   1391c:	andeq	r3, r1, r0, lsr lr
   13920:	andeq	r3, r1, r0, lsr lr
   13924:	andeq	r3, r1, r0, lsr lr
   13928:	andeq	r3, r1, r0, lsr lr
   1392c:	andeq	r3, r1, r0, lsr lr
   13930:	andeq	r3, r1, r0, lsr lr
   13934:	andeq	r3, r1, r0, lsr lr
   13938:	andeq	r3, r1, r0, lsr lr
   1393c:	andeq	r3, r1, r0, lsr lr
   13940:	andeq	r3, r1, r0, lsr lr
   13944:	andeq	r3, r1, r0, lsr lr
   13948:	andeq	r3, r1, r0, lsr lr
   1394c:	andeq	r3, r1, r0, lsr lr
   13950:	andeq	r3, r1, r0, lsr lr
   13954:	andeq	r3, r1, r0, lsr lr
   13958:	andeq	r3, r1, r0, lsr lr
   1395c:	andeq	r4, r1, r4, asr #32
   13960:	andeq	r4, r1, r4, asr #32
   13964:	andeq	r4, r1, r4, asr #32
   13968:	andeq	r4, r1, r4, asr #32
   1396c:			; <UNDEFINED> instruction: 0x00013dbc
   13970:	andeq	r4, r1, r4, lsl #19
   13974:	andeq	r3, r1, r0, lsr lr
   13978:	andeq	r3, r1, r0, lsr lr
   1397c:	andeq	r3, r1, r0, lsr lr
   13980:	andeq	r3, r1, r0, lsr lr
   13984:	andeq	r3, r1, r0, lsr lr
   13988:	andeq	r3, r1, r0, lsr lr
   1398c:	andeq	r3, r1, r0, lsr lr
   13990:	andeq	r3, r1, r0, lsr lr
   13994:	andeq	r3, r1, r0, lsr lr
   13998:	andeq	r3, r1, r0, lsr lr
   1399c:	andeq	r3, r1, r0, lsr lr
   139a0:	andeq	r3, r1, r0, lsr lr
   139a4:	andeq	r3, r1, r0, lsr lr
   139a8:	andeq	r3, r1, r0, lsr lr
   139ac:	andeq	r3, r1, r0, lsr lr
   139b0:	andeq	r3, r1, r0, lsr lr
   139b4:	andeq	r3, r1, r0, lsr lr
   139b8:	andeq	r3, r1, r0, lsr lr
   139bc:	andeq	r3, r1, r0, lsr lr
   139c0:	andeq	r3, r1, r0, lsr lr
   139c4:	andeq	r3, r1, r0, lsr lr
   139c8:	andeq	r3, r1, r0, lsr lr
   139cc:	andeq	r3, r1, r0, lsr lr
   139d0:	andeq	r3, r1, r0, lsr lr
   139d4:	andeq	r3, r1, r0, lsr lr
   139d8:	andeq	r3, r1, r0, lsr lr
   139dc:	andeq	r4, r1, r4, asr #32
   139e0:	andeq	r3, r1, r8, lsl #27
   139e4:	andeq	r3, r1, r0, lsr lr
   139e8:	andeq	r4, r1, r4, asr #32
   139ec:	andeq	r3, r1, r0, lsr lr
   139f0:	andeq	r4, r1, r4, asr #32
   139f4:	andeq	r3, r1, r0, lsr lr
   139f8:	andeq	r3, r1, r0, lsr lr
   139fc:	andeq	r3, r1, r0, lsr lr
   13a00:	andeq	r3, r1, r0, lsr lr
   13a04:	andeq	r3, r1, r0, lsr lr
   13a08:	andeq	r3, r1, r0, lsr lr
   13a0c:	andeq	r3, r1, r0, lsr lr
   13a10:	andeq	r3, r1, r0, lsr lr
   13a14:	andeq	r3, r1, r0, lsr lr
   13a18:	andeq	r3, r1, r0, lsr lr
   13a1c:	andeq	r3, r1, r0, lsr lr
   13a20:	andeq	r3, r1, r0, lsr lr
   13a24:	andeq	r3, r1, r0, lsr lr
   13a28:	andeq	r3, r1, r0, lsr lr
   13a2c:	andeq	r3, r1, r0, lsr lr
   13a30:	andeq	r3, r1, r0, lsr lr
   13a34:	andeq	r3, r1, r0, lsr lr
   13a38:	andeq	r3, r1, r0, lsr lr
   13a3c:	andeq	r3, r1, r0, lsr lr
   13a40:	andeq	r3, r1, r0, lsr lr
   13a44:	andeq	r3, r1, r0, lsr lr
   13a48:	andeq	r3, r1, r0, lsr lr
   13a4c:	andeq	r3, r1, r0, lsr lr
   13a50:	andeq	r3, r1, r0, lsr lr
   13a54:	andeq	r3, r1, r0, lsr lr
   13a58:	andeq	r3, r1, r0, lsr lr
   13a5c:	andeq	r3, r1, r0, asr #24
   13a60:	andeq	r4, r1, r4, asr #32
   13a64:	andeq	r3, r1, r0, asr #24
   13a68:	andeq	r4, r1, r4, lsr #32
   13a6c:	mov	r3, #1
   13a70:	str	r3, [sp, #40]	; 0x28
   13a74:	str	r3, [sp, #68]	; 0x44
   13a78:	mov	r8, #0
   13a7c:	ldr	r3, [pc, #4056]	; 14a5c <__assert_fail@plt+0x3b04>
   13a80:	str	r3, [sp, #72]	; 0x48
   13a84:	mov	r3, #2
   13a88:	str	r3, [sp, #176]	; 0xb0
   13a8c:	ldr	r1, [sp, #56]	; 0x38
   13a90:	mov	r2, r3
   13a94:	ldr	ip, [sp, #40]	; 0x28
   13a98:	mov	lr, r3
   13a9c:	b	13768 <__assert_fail@plt+0x2810>
   13aa0:	mov	r3, #1
   13aa4:	str	r3, [sp, #56]	; 0x38
   13aa8:	str	r3, [sp, #68]	; 0x44
   13aac:	str	r3, [sp, #40]	; 0x28
   13ab0:	ldr	r3, [pc, #4004]	; 14a5c <__assert_fail@plt+0x3b04>
   13ab4:	mov	r8, #0
   13ab8:	str	r3, [sp, #72]	; 0x48
   13abc:	b	13a84 <__assert_fail@plt+0x2b2c>
   13ac0:	mov	r3, #1
   13ac4:	str	r3, [sp, #56]	; 0x38
   13ac8:	str	r3, [sp, #68]	; 0x44
   13acc:	str	r3, [sp, #40]	; 0x28
   13ad0:	ldr	r3, [pc, #3976]	; 14a60 <__assert_fail@plt+0x3b08>
   13ad4:	mov	r8, #0
   13ad8:	str	r3, [sp, #72]	; 0x48
   13adc:	mov	r3, #5
   13ae0:	b	13a88 <__assert_fail@plt+0x2b30>
   13ae4:	mov	r3, #0
   13ae8:	str	r3, [sp, #40]	; 0x28
   13aec:	mov	r3, #1
   13af0:	str	r3, [sp, #56]	; 0x38
   13af4:	mov	r8, #0
   13af8:	mov	r1, r3
   13afc:	ldr	r2, [sp, #176]	; 0xb0
   13b00:	ldr	ip, [sp, #40]	; 0x28
   13b04:	ldr	lr, [sp, #176]	; 0xb0
   13b08:	b	13768 <__assert_fail@plt+0x2810>
   13b0c:	ldr	r3, [sp, #176]	; 0xb0
   13b10:	cmp	r3, #10
   13b14:	beq	13b58 <__assert_fail@plt+0x2c00>
   13b18:	mov	r2, #5
   13b1c:	ldr	r1, [pc, #3904]	; 14a64 <__assert_fail@plt+0x3b0c>
   13b20:	mov	r0, #0
   13b24:	bl	10d78 <dcgettext@plt>
   13b28:	ldr	r2, [pc, #3892]	; 14a64 <__assert_fail@plt+0x3b0c>
   13b2c:	cmp	r0, r2
   13b30:	str	r0, [sp, #188]	; 0xbc
   13b34:	beq	14bf0 <__assert_fail@plt+0x3c98>
   13b38:	mov	r2, #5
   13b3c:	ldr	r1, [pc, #3864]	; 14a5c <__assert_fail@plt+0x3b04>
   13b40:	mov	r0, #0
   13b44:	bl	10d78 <dcgettext@plt>
   13b48:	ldr	r2, [pc, #3852]	; 14a5c <__assert_fail@plt+0x3b04>
   13b4c:	cmp	r0, r2
   13b50:	str	r0, [sp, #192]	; 0xc0
   13b54:	beq	14be0 <__assert_fail@plt+0x3c88>
   13b58:	ldr	r8, [sp, #40]	; 0x28
   13b5c:	cmp	r8, #0
   13b60:	movne	r8, #0
   13b64:	bne	13b94 <__assert_fail@plt+0x2c3c>
   13b68:	ldr	r3, [sp, #188]	; 0xbc
   13b6c:	ldrb	r3, [r3]
   13b70:	cmp	r3, #0
   13b74:	beq	13b94 <__assert_fail@plt+0x2c3c>
   13b78:	ldr	r2, [sp, #188]	; 0xbc
   13b7c:	cmp	fp, r8
   13b80:	strbhi	r3, [r9, r8]
   13b84:	ldrb	r3, [r2, #1]!
   13b88:	add	r8, r8, #1
   13b8c:	cmp	r3, #0
   13b90:	bne	13b7c <__assert_fail@plt+0x2c24>
   13b94:	ldr	r0, [sp, #192]	; 0xc0
   13b98:	bl	10e68 <strlen@plt>
   13b9c:	ldr	r3, [sp, #192]	; 0xc0
   13ba0:	ldr	r2, [sp, #176]	; 0xb0
   13ba4:	str	r3, [sp, #72]	; 0x48
   13ba8:	mov	r3, #1
   13bac:	str	r3, [sp, #56]	; 0x38
   13bb0:	mov	r1, r3
   13bb4:	ldr	ip, [sp, #40]	; 0x28
   13bb8:	ldr	lr, [sp, #176]	; 0xb0
   13bbc:	str	r0, [sp, #68]	; 0x44
   13bc0:	b	13768 <__assert_fail@plt+0x2810>
   13bc4:	ldr	r3, [sp, #40]	; 0x28
   13bc8:	cmp	r3, #0
   13bcc:	beq	14874 <__assert_fail@plt+0x391c>
   13bd0:	mov	r3, #1
   13bd4:	str	r3, [sp, #68]	; 0x44
   13bd8:	ldr	r3, [pc, #3708]	; 14a5c <__assert_fail@plt+0x3b04>
   13bdc:	str	r3, [sp, #72]	; 0x48
   13be0:	mov	r8, #0
   13be4:	ldr	r1, [sp, #56]	; 0x38
   13be8:	ldr	r2, [sp, #176]	; 0xb0
   13bec:	ldr	ip, [sp, #40]	; 0x28
   13bf0:	ldr	lr, [sp, #176]	; 0xb0
   13bf4:	b	13768 <__assert_fail@plt+0x2810>
   13bf8:	ldr	r3, [sp, #40]	; 0x28
   13bfc:	cmp	r3, #0
   13c00:	beq	148f8 <__assert_fail@plt+0x39a0>
   13c04:	str	r3, [sp, #56]	; 0x38
   13c08:	mov	r3, #1
   13c0c:	str	r3, [sp, #68]	; 0x44
   13c10:	ldr	r3, [pc, #3656]	; 14a60 <__assert_fail@plt+0x3b08>
   13c14:	b	13bdc <__assert_fail@plt+0x2c84>
   13c18:	ldr	r3, [sp, #40]	; 0x28
   13c1c:	cmp	r3, #0
   13c20:	mov	r3, #1
   13c24:	streq	r3, [sp, #56]	; 0x38
   13c28:	beq	14874 <__assert_fail@plt+0x391c>
   13c2c:	str	r3, [sp, #68]	; 0x44
   13c30:	ldr	r3, [pc, #3620]	; 14a5c <__assert_fail@plt+0x3b04>
   13c34:	mov	r8, #0
   13c38:	str	r3, [sp, #72]	; 0x48
   13c3c:	b	13a84 <__assert_fail@plt+0x2b2c>
   13c40:	ldr	r3, [sp, #24]
   13c44:	ldr	r6, [sp, #48]	; 0x30
   13c48:	cmn	r3, #1
   13c4c:	beq	142a8 <__assert_fail@plt+0x3350>
   13c50:	subs	r3, r3, #1
   13c54:	movne	r3, #1
   13c58:	cmp	r3, #0
   13c5c:	beq	14028 <__assert_fail@plt+0x30d0>
   13c60:	ldr	r1, [sp, #52]	; 0x34
   13c64:	mov	r7, r3
   13c68:	mov	r3, #0
   13c6c:	str	r3, [sp, #32]
   13c70:	ldr	r3, [sp, #60]	; 0x3c
   13c74:	orr	r2, r1, r3
   13c78:	ldr	r3, [sp, #40]	; 0x28
   13c7c:	eor	r2, r2, #1
   13c80:	orr	r2, r3, r2
   13c84:	tst	r2, #255	; 0xff
   13c88:	bne	145ac <__assert_fail@plt+0x3654>
   13c8c:	cmp	r6, #0
   13c90:	bne	13e6c <__assert_fail@plt+0x2f14>
   13c94:	ldr	r3, [sp, #36]	; 0x24
   13c98:	add	sl, sl, #1
   13c9c:	and	r3, r3, r7
   13ca0:	uxtb	r6, r3
   13ca4:	cmp	r6, #0
   13ca8:	beq	13cd4 <__assert_fail@plt+0x2d7c>
   13cac:	cmp	fp, r8
   13cb0:	movhi	r3, #39	; 0x27
   13cb4:	strbhi	r3, [r9, r8]
   13cb8:	add	r3, r8, #1
   13cbc:	cmp	fp, r3
   13cc0:	movhi	r2, #39	; 0x27
   13cc4:	add	r8, r8, #2
   13cc8:	strbhi	r2, [r9, r3]
   13ccc:	mov	r3, #0
   13cd0:	str	r3, [sp, #36]	; 0x24
   13cd4:	ldr	r2, [sp, #32]
   13cd8:	cmp	r8, fp
   13cdc:	ldr	r3, [sp, #28]
   13ce0:	strbcc	r4, [r9, r8]
   13ce4:	cmp	r2, #0
   13ce8:	moveq	r3, #0
   13cec:	str	r3, [sp, #28]
   13cf0:	ldr	r3, [sp, #24]
   13cf4:	add	r8, r8, #1
   13cf8:	cmn	r3, #1
   13cfc:	bne	137d4 <__assert_fail@plt+0x287c>
   13d00:	ldr	r3, [sp, #44]	; 0x2c
   13d04:	ldrb	r3, [r3, sl]
   13d08:	adds	r7, r3, #0
   13d0c:	movne	r7, #1
   13d10:	cmp	r7, #0
   13d14:	bne	137e4 <__assert_fail@plt+0x288c>
   13d18:	ldr	r3, [sp, #64]	; 0x40
   13d1c:	cmp	r8, #0
   13d20:	movne	r3, #0
   13d24:	andeq	r3, r3, #1
   13d28:	cmp	r3, #0
   13d2c:	str	r3, [sp, #64]	; 0x40
   13d30:	bne	147d4 <__assert_fail@plt+0x387c>
   13d34:	ldr	r3, [sp, #40]	; 0x28
   13d38:	ldr	r2, [sp, #52]	; 0x34
   13d3c:	eor	r3, r3, #1
   13d40:	ands	r2, r2, r3
   13d44:	beq	14c00 <__assert_fail@plt+0x3ca8>
   13d48:	ldr	r3, [sp, #76]	; 0x4c
   13d4c:	cmp	r3, #0
   13d50:	beq	14bd0 <__assert_fail@plt+0x3c78>
   13d54:	ldr	r3, [sp, #28]
   13d58:	cmp	r3, #0
   13d5c:	bne	14b8c <__assert_fail@plt+0x3c34>
   13d60:	ldr	r2, [sp, #84]	; 0x54
   13d64:	clz	r3, fp
   13d68:	cmp	r2, #0
   13d6c:	lsr	r3, r3, #5
   13d70:	moveq	r3, #0
   13d74:	cmp	r3, #0
   13d78:	beq	14b2c <__assert_fail@plt+0x3bd4>
   13d7c:	mov	fp, r2
   13d80:	str	r3, [sp, #76]	; 0x4c
   13d84:	b	13710 <__assert_fail@plt+0x27b8>
   13d88:	ldr	r3, [sp, #176]	; 0xb0
   13d8c:	ldr	r6, [sp, #48]	; 0x30
   13d90:	cmp	r3, #2
   13d94:	beq	142cc <__assert_fail@plt+0x3374>
   13d98:	ldr	r3, [sp, #88]	; 0x58
   13d9c:	cmp	r3, #0
   13da0:	beq	14850 <__assert_fail@plt+0x38f8>
   13da4:	mov	r3, #0
   13da8:	add	sl, sl, #1
   13dac:	ldr	r6, [sp, #36]	; 0x24
   13db0:	str	r3, [sp, #32]
   13db4:	mov	r4, #92	; 0x5c
   13db8:	b	13ca4 <__assert_fail@plt+0x2d4c>
   13dbc:	ldr	r3, [sp, #176]	; 0xb0
   13dc0:	ldr	r6, [sp, #48]	; 0x30
   13dc4:	cmp	r3, #2
   13dc8:	beq	142fc <__assert_fail@plt+0x33a4>
   13dcc:	cmp	r3, #5
   13dd0:	bne	14860 <__assert_fail@plt+0x3908>
   13dd4:	ldr	r3, [sp, #100]	; 0x64
   13dd8:	cmp	r3, #0
   13ddc:	beq	148c4 <__assert_fail@plt+0x396c>
   13de0:	ldr	r2, [sp, #24]
   13de4:	add	r3, sl, #2
   13de8:	cmp	r2, r3
   13dec:	bls	13dfc <__assert_fail@plt+0x2ea4>
   13df0:	ldrb	r4, [r5, #1]
   13df4:	cmp	r4, #63	; 0x3f
   13df8:	beq	14a6c <__assert_fail@plt+0x3b14>
   13dfc:	mov	r1, #0
   13e00:	str	r1, [sp, #32]
   13e04:	mov	r4, #63	; 0x3f
   13e08:	b	13c70 <__assert_fail@plt+0x2d18>
   13e0c:	ldr	r3, [sp, #176]	; 0xb0
   13e10:	ldr	r6, [sp, #48]	; 0x30
   13e14:	cmp	r3, #2
   13e18:	beq	14328 <__assert_fail@plt+0x33d0>
   13e1c:	str	r7, [sp, #32]
   13e20:	str	r7, [sp, #76]	; 0x4c
   13e24:	mov	r1, #0
   13e28:	mov	r4, #39	; 0x27
   13e2c:	b	13c70 <__assert_fail@plt+0x2d18>
   13e30:	ldr	r6, [sp, #48]	; 0x30
   13e34:	ldr	r1, [sp, #52]	; 0x34
   13e38:	str	r7, [sp, #32]
   13e3c:	b	13c70 <__assert_fail@plt+0x2d18>
   13e40:	ldr	r6, [sp, #48]	; 0x30
   13e44:	ldr	r1, [sp, #52]	; 0x34
   13e48:	mov	r4, #12
   13e4c:	mov	r3, #102	; 0x66
   13e50:	ldr	r2, [sp, #56]	; 0x38
   13e54:	cmp	r2, #0
   13e58:	streq	r2, [sp, #32]
   13e5c:	beq	13c70 <__assert_fail@plt+0x2d18>
   13e60:	mov	r4, r3
   13e64:	mov	r3, #0
   13e68:	str	r3, [sp, #32]
   13e6c:	ldr	r3, [sp, #40]	; 0x28
   13e70:	cmp	r3, #0
   13e74:	bne	145e4 <__assert_fail@plt+0x368c>
   13e78:	ldr	r3, [sp, #36]	; 0x24
   13e7c:	eor	r3, r3, #1
   13e80:	and	r3, r3, r1
   13e84:	ands	r3, r3, #255	; 0xff
   13e88:	beq	13ec0 <__assert_fail@plt+0x2f68>
   13e8c:	cmp	fp, r8
   13e90:	movhi	r2, #39	; 0x27
   13e94:	strbhi	r2, [r9, r8]
   13e98:	add	r2, r8, #1
   13e9c:	cmp	fp, r2
   13ea0:	movhi	r1, #36	; 0x24
   13ea4:	strbhi	r1, [r9, r2]
   13ea8:	add	r2, r8, #2
   13eac:	cmp	fp, r2
   13eb0:	add	r8, r8, #3
   13eb4:	movhi	r1, #39	; 0x27
   13eb8:	strbhi	r1, [r9, r2]
   13ebc:	str	r3, [sp, #36]	; 0x24
   13ec0:	cmp	fp, r8
   13ec4:	movhi	r3, #92	; 0x5c
   13ec8:	strbhi	r3, [r9, r8]
   13ecc:	add	sl, sl, #1
   13ed0:	add	r8, r8, #1
   13ed4:	b	13cd4 <__assert_fail@plt+0x2d7c>
   13ed8:	ldr	r6, [sp, #48]	; 0x30
   13edc:	mov	r4, #10
   13ee0:	mov	r3, #110	; 0x6e
   13ee4:	ldr	r2, [sp, #64]	; 0x40
   13ee8:	cmp	r2, #0
   13eec:	bne	1496c <__assert_fail@plt+0x3a14>
   13ef0:	ldr	r1, [sp, #52]	; 0x34
   13ef4:	b	13e50 <__assert_fail@plt+0x2ef8>
   13ef8:	ldr	r6, [sp, #48]	; 0x30
   13efc:	ldr	r1, [sp, #52]	; 0x34
   13f00:	mov	r3, #116	; 0x74
   13f04:	b	13e50 <__assert_fail@plt+0x2ef8>
   13f08:	ldr	r6, [sp, #48]	; 0x30
   13f0c:	ldr	r1, [sp, #52]	; 0x34
   13f10:	mov	r4, #11
   13f14:	mov	r3, #118	; 0x76
   13f18:	b	13e50 <__assert_fail@plt+0x2ef8>
   13f1c:	ldr	r6, [sp, #48]	; 0x30
   13f20:	ldr	r1, [sp, #52]	; 0x34
   13f24:	mov	r4, #8
   13f28:	mov	r3, #98	; 0x62
   13f2c:	b	13e50 <__assert_fail@plt+0x2ef8>
   13f30:	ldr	r6, [sp, #48]	; 0x30
   13f34:	ldr	r1, [sp, #52]	; 0x34
   13f38:	mov	r4, #7
   13f3c:	mov	r3, #97	; 0x61
   13f40:	b	13e50 <__assert_fail@plt+0x2ef8>
   13f44:	ldr	r3, [sp, #56]	; 0x38
   13f48:	ldr	r6, [sp, #48]	; 0x30
   13f4c:	cmp	r3, #0
   13f50:	beq	14414 <__assert_fail@plt+0x34bc>
   13f54:	ldr	r3, [sp, #40]	; 0x28
   13f58:	cmp	r3, #0
   13f5c:	bne	14a48 <__assert_fail@plt+0x3af0>
   13f60:	ldr	r3, [sp, #36]	; 0x24
   13f64:	ldr	r2, [sp, #52]	; 0x34
   13f68:	eor	r3, r3, #1
   13f6c:	ands	r3, r2, r3
   13f70:	moveq	r2, r8
   13f74:	beq	13fac <__assert_fail@plt+0x3054>
   13f78:	cmp	fp, r8
   13f7c:	movhi	r2, #39	; 0x27
   13f80:	strbhi	r2, [r9, r8]
   13f84:	add	r2, r8, #1
   13f88:	cmp	fp, r2
   13f8c:	movhi	r1, #36	; 0x24
   13f90:	strbhi	r1, [r9, r2]
   13f94:	add	r2, r8, #2
   13f98:	cmp	fp, r2
   13f9c:	movhi	r1, #39	; 0x27
   13fa0:	strbhi	r1, [r9, r2]
   13fa4:	add	r2, r8, #3
   13fa8:	str	r3, [sp, #36]	; 0x24
   13fac:	cmp	fp, r2
   13fb0:	movhi	r3, #92	; 0x5c
   13fb4:	strbhi	r3, [r9, r2]
   13fb8:	ldr	r3, [sp, #92]	; 0x5c
   13fbc:	add	r8, r2, #1
   13fc0:	cmp	r3, #0
   13fc4:	beq	14948 <__assert_fail@plt+0x39f0>
   13fc8:	ldr	r1, [sp, #24]
   13fcc:	add	r3, sl, #1
   13fd0:	cmp	r1, r3
   13fd4:	bls	1400c <__assert_fail@plt+0x30b4>
   13fd8:	ldr	r1, [sp, #44]	; 0x2c
   13fdc:	ldrb	r3, [r1, r3]
   13fe0:	sub	r3, r3, #48	; 0x30
   13fe4:	cmp	r3, #9
   13fe8:	bhi	1400c <__assert_fail@plt+0x30b4>
   13fec:	cmp	fp, r8
   13ff0:	movhi	r3, #48	; 0x30
   13ff4:	strbhi	r3, [r9, r8]
   13ff8:	add	r3, r2, #2
   13ffc:	cmp	fp, r3
   14000:	add	r8, r2, #3
   14004:	movhi	r1, #48	; 0x30
   14008:	strbhi	r1, [r9, r3]
   1400c:	ldr	r3, [sp, #40]	; 0x28
   14010:	ldr	r1, [sp, #52]	; 0x34
   14014:	mov	r7, r3
   14018:	str	r3, [sp, #32]
   1401c:	mov	r4, #48	; 0x30
   14020:	b	13c70 <__assert_fail@plt+0x2d18>
   14024:	ldr	r6, [sp, #48]	; 0x30
   14028:	cmp	sl, #0
   1402c:	streq	r7, [sp, #32]
   14030:	beq	14050 <__assert_fail@plt+0x30f8>
   14034:	mov	r3, #0
   14038:	ldr	r1, [sp, #52]	; 0x34
   1403c:	str	r3, [sp, #32]
   14040:	b	13c70 <__assert_fail@plt+0x2d18>
   14044:	ldr	r6, [sp, #48]	; 0x30
   14048:	mov	r3, #0
   1404c:	str	r3, [sp, #32]
   14050:	ldr	r3, [sp, #64]	; 0x40
   14054:	cmp	r3, #0
   14058:	bne	147d4 <__assert_fail@plt+0x387c>
   1405c:	ldr	r1, [sp, #52]	; 0x34
   14060:	b	13c70 <__assert_fail@plt+0x2d18>
   14064:	ldr	r3, [sp, #48]	; 0x30
   14068:	mov	r6, r3
   1406c:	str	r3, [sp, #32]
   14070:	b	14050 <__assert_fail@plt+0x30f8>
   14074:	ldr	r6, [sp, #48]	; 0x30
   14078:	mov	r4, #13
   1407c:	mov	r3, #114	; 0x72
   14080:	b	13ee4 <__assert_fail@plt+0x2f8c>
   14084:	ldr	r3, [sp, #44]	; 0x2c
   14088:	add	r5, r3, sl
   1408c:	ldrb	r4, [r5]
   14090:	cmp	r4, #126	; 0x7e
   14094:	ldrls	pc, [pc, r4, lsl #2]
   14098:	b	14434 <__assert_fail@plt+0x34dc>
   1409c:	andeq	r4, r1, r4, lsl #8
   140a0:	andeq	r4, r1, r4, lsr r4
   140a4:	andeq	r4, r1, r4, lsr r4
   140a8:	andeq	r4, r1, r4, lsr r4
   140ac:	andeq	r4, r1, r4, lsr r4
   140b0:	andeq	r4, r1, r4, lsr r4
   140b4:	andeq	r4, r1, r4, lsr r4
   140b8:	strdeq	r4, [r1], -ip
   140bc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140c0:	andeq	r4, r1, r8, ror #7
   140c4:	andeq	r4, r1, r0, ror #7
   140c8:	ldrdeq	r4, [r1], -r8
   140cc:	ldrdeq	r4, [r1], -r0
   140d0:	andeq	r4, r1, r8, asr #7
   140d4:	andeq	r4, r1, r4, lsr r4
   140d8:	andeq	r4, r1, r4, lsr r4
   140dc:	andeq	r4, r1, r4, lsr r4
   140e0:	andeq	r4, r1, r4, lsr r4
   140e4:	andeq	r4, r1, r4, lsr r4
   140e8:	andeq	r4, r1, r4, lsr r4
   140ec:	andeq	r4, r1, r4, lsr r4
   140f0:	andeq	r4, r1, r4, lsr r4
   140f4:	andeq	r4, r1, r4, lsr r4
   140f8:	andeq	r4, r1, r4, lsr r4
   140fc:	andeq	r4, r1, r4, lsr r4
   14100:	andeq	r4, r1, r4, lsr r4
   14104:	andeq	r4, r1, r4, lsr r4
   14108:	andeq	r4, r1, r4, lsr r4
   1410c:	andeq	r4, r1, r4, lsr r4
   14110:	andeq	r4, r1, r4, lsr r4
   14114:	andeq	r4, r1, r4, lsr r4
   14118:	andeq	r4, r1, r4, lsr r4
   1411c:			; <UNDEFINED> instruction: 0x000143bc
   14120:			; <UNDEFINED> instruction: 0x000143b4
   14124:			; <UNDEFINED> instruction: 0x000143b4
   14128:	andeq	r4, r1, ip, lsr #7
   1412c:			; <UNDEFINED> instruction: 0x000143b4
   14130:	andeq	r4, r1, r4, lsr #7
   14134:			; <UNDEFINED> instruction: 0x000143b4
   14138:	andeq	r4, r1, r8, lsl r3
   1413c:			; <UNDEFINED> instruction: 0x000143b4
   14140:			; <UNDEFINED> instruction: 0x000143b4
   14144:			; <UNDEFINED> instruction: 0x000143b4
   14148:	andeq	r4, r1, r4, lsr #7
   1414c:	andeq	r4, r1, r4, lsr #7
   14150:	andeq	r4, r1, r4, lsr #7
   14154:	andeq	r4, r1, r4, lsr #7
   14158:	andeq	r4, r1, r4, lsr #7
   1415c:	andeq	r4, r1, r4, lsr #7
   14160:	andeq	r4, r1, r4, lsr #7
   14164:	andeq	r4, r1, r4, lsr #7
   14168:	andeq	r4, r1, r4, lsr #7
   1416c:	andeq	r4, r1, r4, lsr #7
   14170:	andeq	r4, r1, r4, lsr #7
   14174:	andeq	r4, r1, r4, lsr #7
   14178:	andeq	r4, r1, r4, lsr #7
   1417c:	andeq	r4, r1, r4, lsr #7
   14180:	andeq	r4, r1, r4, lsr #7
   14184:	andeq	r4, r1, r4, lsr #7
   14188:			; <UNDEFINED> instruction: 0x000143b4
   1418c:			; <UNDEFINED> instruction: 0x000143b4
   14190:			; <UNDEFINED> instruction: 0x000143b4
   14194:			; <UNDEFINED> instruction: 0x000143b4
   14198:	andeq	r4, r1, ip, ror #5
   1419c:	andeq	r4, r1, r4, lsr r4
   141a0:	andeq	r4, r1, r4, lsr #7
   141a4:	andeq	r4, r1, r4, lsr #7
   141a8:	andeq	r4, r1, r4, lsr #7
   141ac:	andeq	r4, r1, r4, lsr #7
   141b0:	andeq	r4, r1, r4, lsr #7
   141b4:	andeq	r4, r1, r4, lsr #7
   141b8:	andeq	r4, r1, r4, lsr #7
   141bc:	andeq	r4, r1, r4, lsr #7
   141c0:	andeq	r4, r1, r4, lsr #7
   141c4:	andeq	r4, r1, r4, lsr #7
   141c8:	andeq	r4, r1, r4, lsr #7
   141cc:	andeq	r4, r1, r4, lsr #7
   141d0:	andeq	r4, r1, r4, lsr #7
   141d4:	andeq	r4, r1, r4, lsr #7
   141d8:	andeq	r4, r1, r4, lsr #7
   141dc:	andeq	r4, r1, r4, lsr #7
   141e0:	andeq	r4, r1, r4, lsr #7
   141e4:	andeq	r4, r1, r4, lsr #7
   141e8:	andeq	r4, r1, r4, lsr #7
   141ec:	andeq	r4, r1, r4, lsr #7
   141f0:	andeq	r4, r1, r4, lsr #7
   141f4:	andeq	r4, r1, r4, lsr #7
   141f8:	andeq	r4, r1, r4, lsr #7
   141fc:	andeq	r4, r1, r4, lsr #7
   14200:	andeq	r4, r1, r4, lsr #7
   14204:	andeq	r4, r1, r4, lsr #7
   14208:			; <UNDEFINED> instruction: 0x000143b4
   1420c:			; <UNDEFINED> instruction: 0x000142bc
   14210:	andeq	r4, r1, r4, lsr #7
   14214:			; <UNDEFINED> instruction: 0x000143b4
   14218:	andeq	r4, r1, r4, lsr #7
   1421c:			; <UNDEFINED> instruction: 0x000143b4
   14220:	andeq	r4, r1, r4, lsr #7
   14224:	andeq	r4, r1, r4, lsr #7
   14228:	andeq	r4, r1, r4, lsr #7
   1422c:	andeq	r4, r1, r4, lsr #7
   14230:	andeq	r4, r1, r4, lsr #7
   14234:	andeq	r4, r1, r4, lsr #7
   14238:	andeq	r4, r1, r4, lsr #7
   1423c:	andeq	r4, r1, r4, lsr #7
   14240:	andeq	r4, r1, r4, lsr #7
   14244:	andeq	r4, r1, r4, lsr #7
   14248:	andeq	r4, r1, r4, lsr #7
   1424c:	andeq	r4, r1, r4, lsr #7
   14250:	andeq	r4, r1, r4, lsr #7
   14254:	andeq	r4, r1, r4, lsr #7
   14258:	andeq	r4, r1, r4, lsr #7
   1425c:	andeq	r4, r1, r4, lsr #7
   14260:	andeq	r4, r1, r4, lsr #7
   14264:	andeq	r4, r1, r4, lsr #7
   14268:	andeq	r4, r1, r4, lsr #7
   1426c:	andeq	r4, r1, r4, lsr #7
   14270:	andeq	r4, r1, r4, lsr #7
   14274:	andeq	r4, r1, r4, lsr #7
   14278:	andeq	r4, r1, r4, lsr #7
   1427c:	andeq	r4, r1, r4, lsr #7
   14280:	andeq	r4, r1, r4, lsr #7
   14284:	andeq	r4, r1, r4, lsr #7
   14288:	muleq	r1, r8, r2
   1428c:			; <UNDEFINED> instruction: 0x000143b4
   14290:	muleq	r1, r8, r2
   14294:	andeq	r4, r1, ip, lsr #7
   14298:	ldr	r3, [sp, #24]
   1429c:	mov	r6, #0
   142a0:	cmn	r3, #1
   142a4:	bne	13c50 <__assert_fail@plt+0x2cf8>
   142a8:	ldr	r3, [sp, #44]	; 0x2c
   142ac:	ldrb	r3, [r3, #1]
   142b0:	adds	r3, r3, #0
   142b4:	movne	r3, #1
   142b8:	b	13c58 <__assert_fail@plt+0x2d00>
   142bc:	ldr	r3, [sp, #176]	; 0xb0
   142c0:	mov	r6, #0
   142c4:	cmp	r3, #2
   142c8:	bne	13d98 <__assert_fail@plt+0x2e40>
   142cc:	ldr	r3, [sp, #64]	; 0x40
   142d0:	cmp	r3, #0
   142d4:	bne	14b0c <__assert_fail@plt+0x3bb4>
   142d8:	add	sl, sl, #1
   142dc:	ldr	r6, [sp, #36]	; 0x24
   142e0:	str	r3, [sp, #32]
   142e4:	mov	r4, #92	; 0x5c
   142e8:	b	13ca4 <__assert_fail@plt+0x2d4c>
   142ec:	ldr	r3, [sp, #176]	; 0xb0
   142f0:	mov	r6, #0
   142f4:	cmp	r3, #2
   142f8:	bne	13dcc <__assert_fail@plt+0x2e74>
   142fc:	ldr	r3, [sp, #40]	; 0x28
   14300:	cmp	r3, #0
   14304:	bne	145e8 <__assert_fail@plt+0x3690>
   14308:	mov	r1, r7
   1430c:	str	r3, [sp, #32]
   14310:	mov	r4, #63	; 0x3f
   14314:	b	13c70 <__assert_fail@plt+0x2d18>
   14318:	ldr	r3, [sp, #176]	; 0xb0
   1431c:	mov	r6, #0
   14320:	cmp	r3, #2
   14324:	bne	13e1c <__assert_fail@plt+0x2ec4>
   14328:	ldr	r3, [sp, #64]	; 0x40
   1432c:	cmp	r3, #0
   14330:	bne	14b0c <__assert_fail@plt+0x3bb4>
   14334:	ldr	r2, [sp, #84]	; 0x54
   14338:	adds	r3, fp, #0
   1433c:	movne	r3, #1
   14340:	cmp	r2, #0
   14344:	movne	r3, #0
   14348:	cmp	r3, #0
   1434c:	strne	fp, [sp, #84]	; 0x54
   14350:	movne	fp, #0
   14354:	bne	14384 <__assert_fail@plt+0x342c>
   14358:	cmp	fp, r8
   1435c:	movhi	r3, #39	; 0x27
   14360:	strbhi	r3, [r9, r8]
   14364:	add	r3, r8, #1
   14368:	cmp	fp, r3
   1436c:	movhi	r2, #92	; 0x5c
   14370:	strbhi	r2, [r9, r3]
   14374:	add	r3, r8, #2
   14378:	cmp	fp, r3
   1437c:	movhi	r2, #39	; 0x27
   14380:	strbhi	r2, [r9, r3]
   14384:	ldr	r3, [sp, #64]	; 0x40
   14388:	add	r8, r8, #3
   1438c:	mov	r1, r7
   14390:	str	r7, [sp, #32]
   14394:	str	r7, [sp, #76]	; 0x4c
   14398:	str	r3, [sp, #36]	; 0x24
   1439c:	mov	r4, #39	; 0x27
   143a0:	b	13c70 <__assert_fail@plt+0x2d18>
   143a4:	mov	r6, #0
   143a8:	b	13e34 <__assert_fail@plt+0x2edc>
   143ac:	mov	r6, #0
   143b0:	b	14028 <__assert_fail@plt+0x30d0>
   143b4:	mov	r6, #0
   143b8:	b	14048 <__assert_fail@plt+0x30f0>
   143bc:	str	r7, [sp, #32]
   143c0:	mov	r6, #0
   143c4:	b	14050 <__assert_fail@plt+0x30f8>
   143c8:	mov	r6, #0
   143cc:	b	14078 <__assert_fail@plt+0x3120>
   143d0:	mov	r6, #0
   143d4:	b	13e44 <__assert_fail@plt+0x2eec>
   143d8:	mov	r6, #0
   143dc:	b	13f0c <__assert_fail@plt+0x2fb4>
   143e0:	mov	r6, #0
   143e4:	b	13edc <__assert_fail@plt+0x2f84>
   143e8:	mov	r6, #0
   143ec:	mov	r3, #116	; 0x74
   143f0:	b	13ee4 <__assert_fail@plt+0x2f8c>
   143f4:	mov	r6, #0
   143f8:	b	13f20 <__assert_fail@plt+0x2fc8>
   143fc:	mov	r6, #0
   14400:	b	13f34 <__assert_fail@plt+0x2fdc>
   14404:	ldr	r3, [sp, #56]	; 0x38
   14408:	mov	r6, #0
   1440c:	cmp	r3, #0
   14410:	bne	13f54 <__assert_fail@plt+0x2ffc>
   14414:	ldr	r3, [sp, #96]	; 0x60
   14418:	cmp	r3, #0
   1441c:	addne	sl, sl, #1
   14420:	bne	137c8 <__assert_fail@plt+0x2870>
   14424:	ldr	r1, [sp, #52]	; 0x34
   14428:	str	r3, [sp, #32]
   1442c:	mov	r4, r3
   14430:	b	13c70 <__assert_fail@plt+0x2d18>
   14434:	mov	r6, #0
   14438:	ldr	r3, [sp, #80]	; 0x50
   1443c:	cmp	r3, #1
   14440:	bne	14630 <__assert_fail@plt+0x36d8>
   14444:	bl	10e50 <__ctype_b_loc@plt>
   14448:	ldr	r2, [sp, #80]	; 0x50
   1444c:	sxth	r3, r4
   14450:	mov	r1, r2
   14454:	lsl	r3, r3, #1
   14458:	ldr	r2, [r0]
   1445c:	ldrh	r3, [r2, r3]
   14460:	and	r3, r3, #16384	; 0x4000
   14464:	cmp	r3, #0
   14468:	movne	r3, #1
   1446c:	moveq	r3, #0
   14470:	str	r3, [sp, #32]
   14474:	moveq	r3, #1
   14478:	movne	r3, #0
   1447c:	ldr	r2, [sp, #56]	; 0x38
   14480:	and	r3, r3, r2
   14484:	ands	r3, r3, #255	; 0xff
   14488:	beq	1405c <__assert_fail@plt+0x3104>
   1448c:	add	r1, sl, r1
   14490:	mov	r0, #0
   14494:	ldr	r7, [sp, #40]	; 0x28
   14498:	ldr	r2, [sp, #36]	; 0x24
   1449c:	ldr	lr, [sp, #52]	; 0x34
   144a0:	b	14550 <__assert_fail@plt+0x35f8>
   144a4:	cmp	r7, #0
   144a8:	bne	148a4 <__assert_fail@plt+0x394c>
   144ac:	eor	r0, r2, #1
   144b0:	ands	r0, lr, r0
   144b4:	beq	144ec <__assert_fail@plt+0x3594>
   144b8:	cmp	fp, r8
   144bc:	movhi	r2, #39	; 0x27
   144c0:	strbhi	r2, [r9, r8]
   144c4:	add	r2, r8, #1
   144c8:	cmp	fp, r2
   144cc:	movhi	ip, #36	; 0x24
   144d0:	strbhi	ip, [r9, r2]
   144d4:	add	r2, r8, #2
   144d8:	cmp	fp, r2
   144dc:	movhi	ip, #39	; 0x27
   144e0:	strbhi	ip, [r9, r2]
   144e4:	add	r8, r8, #3
   144e8:	mov	r2, r0
   144ec:	cmp	fp, r8
   144f0:	movhi	r0, #92	; 0x5c
   144f4:	strbhi	r0, [r9, r8]
   144f8:	add	r0, r8, #1
   144fc:	cmp	fp, r0
   14500:	lsrhi	ip, r4, #6
   14504:	addhi	ip, ip, #48	; 0x30
   14508:	strbhi	ip, [r9, r0]
   1450c:	add	ip, r8, #2
   14510:	cmp	fp, ip
   14514:	lsrhi	r0, r4, #3
   14518:	andhi	r0, r0, #7
   1451c:	addhi	r0, r0, #48	; 0x30
   14520:	add	sl, sl, #1
   14524:	strbhi	r0, [r9, ip]
   14528:	and	r4, r4, #7
   1452c:	cmp	sl, r1
   14530:	add	r4, r4, #48	; 0x30
   14534:	add	r8, r8, #3
   14538:	bcs	148bc <__assert_fail@plt+0x3964>
   1453c:	mov	r0, r3
   14540:	cmp	fp, r8
   14544:	strbhi	r4, [r9, r8]
   14548:	ldrb	r4, [r5, #1]!
   1454c:	add	r8, r8, #1
   14550:	cmp	r3, #0
   14554:	bne	144a4 <__assert_fail@plt+0x354c>
   14558:	cmp	r6, #0
   1455c:	bne	14600 <__assert_fail@plt+0x36a8>
   14560:	eor	r6, r0, #1
   14564:	and	r6, r6, r2
   14568:	add	sl, sl, #1
   1456c:	cmp	r1, sl
   14570:	uxtb	r6, r6
   14574:	bls	14628 <__assert_fail@plt+0x36d0>
   14578:	cmp	r6, #0
   1457c:	beq	14540 <__assert_fail@plt+0x35e8>
   14580:	cmp	fp, r8
   14584:	movhi	r2, #39	; 0x27
   14588:	strbhi	r2, [r9, r8]
   1458c:	add	r2, r8, #1
   14590:	cmp	fp, r2
   14594:	movhi	ip, #39	; 0x27
   14598:	strbhi	ip, [r9, r2]
   1459c:	add	r8, r8, #2
   145a0:	mov	r6, r3
   145a4:	mov	r2, r3
   145a8:	b	14540 <__assert_fail@plt+0x35e8>
   145ac:	ldr	r3, [sp, #184]	; 0xb8
   145b0:	cmp	r3, #0
   145b4:	beq	13c8c <__assert_fail@plt+0x2d34>
   145b8:	lsr	r2, r4, #5
   145bc:	mov	r0, r3
   145c0:	uxtb	r2, r2
   145c4:	and	r3, r4, #31
   145c8:	ldr	r2, [r0, r2, lsl #2]
   145cc:	lsr	r3, r2, r3
   145d0:	tst	r3, #1
   145d4:	beq	13c8c <__assert_fail@plt+0x2d34>
   145d8:	ldr	r3, [sp, #40]	; 0x28
   145dc:	cmp	r3, #0
   145e0:	beq	13e78 <__assert_fail@plt+0x2f20>
   145e4:	mov	r3, r1
   145e8:	str	r3, [sp, #64]	; 0x40
   145ec:	mov	sl, r9
   145f0:	ldr	r3, [sp, #56]	; 0x38
   145f4:	mov	r9, fp
   145f8:	ldr	r2, [sp, #64]	; 0x40
   145fc:	b	147ec <__assert_fail@plt+0x3894>
   14600:	cmp	fp, r8
   14604:	eor	r6, r0, #1
   14608:	movhi	ip, #92	; 0x5c
   1460c:	and	r6, r6, r2
   14610:	add	sl, sl, #1
   14614:	strbhi	ip, [r9, r8]
   14618:	cmp	r1, sl
   1461c:	add	r8, r8, #1
   14620:	uxtb	r6, r6
   14624:	bhi	14578 <__assert_fail@plt+0x3620>
   14628:	str	r2, [sp, #36]	; 0x24
   1462c:	b	13ca4 <__assert_fail@plt+0x2d4c>
   14630:	ldr	r3, [sp, #24]
   14634:	cmn	r3, #1
   14638:	mov	r3, #0
   1463c:	str	r3, [sp, #128]	; 0x80
   14640:	str	r3, [sp, #132]	; 0x84
   14644:	beq	14938 <__assert_fail@plt+0x39e0>
   14648:	mov	r2, r7
   1464c:	mov	r3, #0
   14650:	str	r7, [sp, #104]	; 0x68
   14654:	str	r5, [sp, #116]	; 0x74
   14658:	mov	r7, r3
   1465c:	mov	r5, r2
   14660:	str	r4, [sp, #32]
   14664:	str	r6, [sp, #108]	; 0x6c
   14668:	str	r8, [sp, #112]	; 0x70
   1466c:	ldr	r3, [sp, #44]	; 0x2c
   14670:	add	r6, sl, r7
   14674:	add	r4, r3, r6
   14678:	ldr	r3, [sp, #24]
   1467c:	mov	r1, r4
   14680:	sub	r2, r3, r6
   14684:	add	r0, sp, #124	; 0x7c
   14688:	add	r3, sp, #128	; 0x80
   1468c:	bl	199a4 <__assert_fail@plt+0x8a4c>
   14690:	subs	r8, r0, #0
   14694:	beq	14a1c <__assert_fail@plt+0x3ac4>
   14698:	cmn	r8, #1
   1469c:	beq	149f4 <__assert_fail@plt+0x3a9c>
   146a0:	cmn	r8, #2
   146a4:	beq	1498c <__assert_fail@plt+0x3a34>
   146a8:	ldr	r3, [sp, #64]	; 0x40
   146ac:	cmp	r3, #0
   146b0:	beq	14770 <__assert_fail@plt+0x3818>
   146b4:	cmp	r8, #1
   146b8:	beq	14770 <__assert_fail@plt+0x3818>
   146bc:	sub	r3, r8, #1
   146c0:	add	r6, r3, r6
   146c4:	ldr	r3, [sp, #44]	; 0x2c
   146c8:	add	r6, r3, r6
   146cc:	ldrb	r3, [r4, #1]!
   146d0:	sub	r3, r3, #91	; 0x5b
   146d4:	cmp	r3, #33	; 0x21
   146d8:	ldrls	pc, [pc, r3, lsl #2]
   146dc:	b	14768 <__assert_fail@plt+0x3810>
   146e0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146e4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146e8:	andeq	r4, r1, r8, ror #14
   146ec:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146f0:	andeq	r4, r1, r8, ror #14
   146f4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146f8:	andeq	r4, r1, r8, ror #14
   146fc:	andeq	r4, r1, r8, ror #14
   14700:	andeq	r4, r1, r8, ror #14
   14704:	andeq	r4, r1, r8, ror #14
   14708:	andeq	r4, r1, r8, ror #14
   1470c:	andeq	r4, r1, r8, ror #14
   14710:	andeq	r4, r1, r8, ror #14
   14714:	andeq	r4, r1, r8, ror #14
   14718:	andeq	r4, r1, r8, ror #14
   1471c:	andeq	r4, r1, r8, ror #14
   14720:	andeq	r4, r1, r8, ror #14
   14724:	andeq	r4, r1, r8, ror #14
   14728:	andeq	r4, r1, r8, ror #14
   1472c:	andeq	r4, r1, r8, ror #14
   14730:	andeq	r4, r1, r8, ror #14
   14734:	andeq	r4, r1, r8, ror #14
   14738:	andeq	r4, r1, r8, ror #14
   1473c:	andeq	r4, r1, r8, ror #14
   14740:	andeq	r4, r1, r8, ror #14
   14744:	andeq	r4, r1, r8, ror #14
   14748:	andeq	r4, r1, r8, ror #14
   1474c:	andeq	r4, r1, r8, ror #14
   14750:	andeq	r4, r1, r8, ror #14
   14754:	andeq	r4, r1, r8, ror #14
   14758:	andeq	r4, r1, r8, ror #14
   1475c:	andeq	r4, r1, r8, ror #14
   14760:	andeq	r4, r1, r8, ror #14
   14764:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14768:	cmp	r6, r4
   1476c:	bne	146cc <__assert_fail@plt+0x3774>
   14770:	ldr	r0, [sp, #124]	; 0x7c
   14774:	bl	10da8 <iswprint@plt>
   14778:	add	r7, r7, r8
   1477c:	cmp	r0, #0
   14780:	add	r0, sp, #128	; 0x80
   14784:	moveq	r5, #0
   14788:	bl	10d48 <mbsinit@plt>
   1478c:	cmp	r0, #0
   14790:	beq	1466c <__assert_fail@plt+0x3714>
   14794:	ldr	r4, [sp, #32]
   14798:	str	r5, [sp, #32]
   1479c:	ldr	r3, [sp, #32]
   147a0:	mov	r1, r7
   147a4:	eor	r3, r3, #1
   147a8:	ldr	r7, [sp, #104]	; 0x68
   147ac:	ldr	r6, [sp, #108]	; 0x6c
   147b0:	ldr	r8, [sp, #112]	; 0x70
   147b4:	ldr	r5, [sp, #116]	; 0x74
   147b8:	uxtb	r3, r3
   147bc:	cmp	r1, #1
   147c0:	bls	1447c <__assert_fail@plt+0x3524>
   147c4:	ldr	r2, [sp, #56]	; 0x38
   147c8:	and	r3, r3, r2
   147cc:	uxtb	r3, r3
   147d0:	b	1448c <__assert_fail@plt+0x3534>
   147d4:	mov	r3, #2
   147d8:	str	r3, [sp, #176]	; 0xb0
   147dc:	ldr	r2, [sp, #64]	; 0x40
   147e0:	ldr	r3, [sp, #56]	; 0x38
   147e4:	mov	sl, r9
   147e8:	mov	r9, fp
   147ec:	and	r3, r3, r2
   147f0:	tst	r3, #255	; 0xff
   147f4:	ldr	r3, [sp, #176]	; 0xb0
   147f8:	movne	r3, #4
   147fc:	str	r3, [sp, #176]	; 0xb0
   14800:	ldr	r3, [sp, #180]	; 0xb4
   14804:	mov	ip, #0
   14808:	bic	r3, r3, #2
   1480c:	str	r3, [sp, #4]
   14810:	ldr	r3, [sp, #192]	; 0xc0
   14814:	ldr	r2, [sp, #44]	; 0x2c
   14818:	str	r3, [sp, #16]
   1481c:	ldr	r3, [sp, #188]	; 0xbc
   14820:	mov	r1, r9
   14824:	str	r3, [sp, #12]
   14828:	ldr	r3, [sp, #176]	; 0xb0
   1482c:	mov	r0, sl
   14830:	str	r3, [sp]
   14834:	str	ip, [sp, #8]
   14838:	ldr	r3, [sp, #24]
   1483c:	bl	1369c <__assert_fail@plt+0x2744>
   14840:	mov	fp, r0
   14844:	mov	r0, fp
   14848:	add	sp, sp, #140	; 0x8c
   1484c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14850:	mov	r4, #92	; 0x5c
   14854:	mov	r1, #0
   14858:	mov	r3, r4
   1485c:	b	13e50 <__assert_fail@plt+0x2ef8>
   14860:	mov	r3, #0
   14864:	ldr	r1, [sp, #52]	; 0x34
   14868:	str	r3, [sp, #32]
   1486c:	mov	r4, #63	; 0x3f
   14870:	b	13c70 <__assert_fail@plt+0x2d18>
   14874:	cmp	fp, #0
   14878:	beq	148d4 <__assert_fail@plt+0x397c>
   1487c:	mov	r3, #39	; 0x27
   14880:	strb	r3, [r9]
   14884:	mov	r3, #0
   14888:	str	r3, [sp, #40]	; 0x28
   1488c:	mov	r3, #1
   14890:	str	r3, [sp, #68]	; 0x44
   14894:	ldr	r3, [pc, #448]	; 14a5c <__assert_fail@plt+0x3b04>
   14898:	mov	r8, #1
   1489c:	str	r3, [sp, #72]	; 0x48
   148a0:	b	13a84 <__assert_fail@plt+0x2b2c>
   148a4:	ldr	r3, [sp, #40]	; 0x28
   148a8:	mov	sl, r9
   148ac:	str	r3, [sp, #56]	; 0x38
   148b0:	mov	r9, fp
   148b4:	ldr	r2, [sp, #64]	; 0x40
   148b8:	b	147ec <__assert_fail@plt+0x3894>
   148bc:	str	r2, [sp, #36]	; 0x24
   148c0:	b	13cd4 <__assert_fail@plt+0x2d7c>
   148c4:	mov	r1, #0
   148c8:	str	r3, [sp, #32]
   148cc:	mov	r4, #63	; 0x3f
   148d0:	b	13c70 <__assert_fail@plt+0x2d18>
   148d4:	ldr	r3, [pc, #384]	; 14a5c <__assert_fail@plt+0x3b04>
   148d8:	str	r3, [sp, #72]	; 0x48
   148dc:	mov	r3, #0
   148e0:	str	r3, [sp, #40]	; 0x28
   148e4:	mov	r3, #1
   148e8:	str	r3, [sp, #68]	; 0x44
   148ec:	mov	r8, r3
   148f0:	b	13a84 <__assert_fail@plt+0x2b2c>
   148f4:	bl	10f40 <abort@plt>
   148f8:	cmp	fp, #0
   148fc:	beq	1495c <__assert_fail@plt+0x3a04>
   14900:	mov	r2, #1
   14904:	mov	r3, #34	; 0x22
   14908:	strb	r3, [r9]
   1490c:	mov	r8, r2
   14910:	mov	r3, r2
   14914:	str	r2, [sp, #68]	; 0x44
   14918:	str	r3, [sp, #56]	; 0x38
   1491c:	ldr	r3, [pc, #316]	; 14a60 <__assert_fail@plt+0x3b08>
   14920:	ldr	r1, [sp, #56]	; 0x38
   14924:	str	r3, [sp, #72]	; 0x48
   14928:	ldr	r2, [sp, #176]	; 0xb0
   1492c:	ldr	ip, [sp, #40]	; 0x28
   14930:	ldr	lr, [sp, #176]	; 0xb0
   14934:	b	13768 <__assert_fail@plt+0x2810>
   14938:	ldr	r0, [sp, #44]	; 0x2c
   1493c:	bl	10e68 <strlen@plt>
   14940:	str	r0, [sp, #24]
   14944:	b	14648 <__assert_fail@plt+0x36f0>
   14948:	mov	r7, #0
   1494c:	ldr	r1, [sp, #52]	; 0x34
   14950:	str	r3, [sp, #32]
   14954:	mov	r4, #48	; 0x30
   14958:	b	13c70 <__assert_fail@plt+0x2d18>
   1495c:	mov	r3, #1
   14960:	str	r3, [sp, #68]	; 0x44
   14964:	mov	r8, r3
   14968:	b	14918 <__assert_fail@plt+0x39c0>
   1496c:	mov	r3, #2
   14970:	mov	sl, r9
   14974:	str	r3, [sp, #176]	; 0xb0
   14978:	mov	r9, fp
   1497c:	ldr	r3, [sp, #56]	; 0x38
   14980:	b	147ec <__assert_fail@plt+0x3894>
   14984:	ldr	r6, [sp, #48]	; 0x30
   14988:	b	14438 <__assert_fail@plt+0x34e0>
   1498c:	ldr	r0, [sp, #24]
   14990:	mov	ip, r6
   14994:	cmp	r0, ip
   14998:	mov	r1, r7
   1499c:	mov	r2, r4
   149a0:	ldr	r7, [sp, #104]	; 0x68
   149a4:	ldr	r4, [sp, #32]
   149a8:	ldr	r6, [sp, #108]	; 0x6c
   149ac:	ldr	r8, [sp, #112]	; 0x70
   149b0:	ldr	r5, [sp, #116]	; 0x74
   149b4:	bls	149e4 <__assert_fail@plt+0x3a8c>
   149b8:	ldrb	r3, [r2]
   149bc:	cmp	r3, #0
   149c0:	bne	149d4 <__assert_fail@plt+0x3a7c>
   149c4:	b	14af4 <__assert_fail@plt+0x3b9c>
   149c8:	ldrb	r3, [r2, #1]!
   149cc:	cmp	r3, #0
   149d0:	beq	14af4 <__assert_fail@plt+0x3b9c>
   149d4:	add	r1, r1, #1
   149d8:	add	r3, sl, r1
   149dc:	cmp	r0, r3
   149e0:	bhi	149c8 <__assert_fail@plt+0x3a70>
   149e4:	mov	r2, #0
   149e8:	mov	r3, r7
   149ec:	str	r2, [sp, #32]
   149f0:	b	147bc <__assert_fail@plt+0x3864>
   149f4:	mov	r1, r7
   149f8:	ldr	r7, [sp, #104]	; 0x68
   149fc:	mov	r2, #0
   14a00:	ldr	r4, [sp, #32]
   14a04:	ldr	r6, [sp, #108]	; 0x6c
   14a08:	ldr	r8, [sp, #112]	; 0x70
   14a0c:	ldr	r5, [sp, #116]	; 0x74
   14a10:	mov	r3, r7
   14a14:	str	r2, [sp, #32]
   14a18:	b	147bc <__assert_fail@plt+0x3864>
   14a1c:	mov	r3, r5
   14a20:	eor	r3, r3, #1
   14a24:	ldr	r4, [sp, #32]
   14a28:	mov	r1, r7
   14a2c:	str	r5, [sp, #32]
   14a30:	ldr	r7, [sp, #104]	; 0x68
   14a34:	ldr	r6, [sp, #108]	; 0x6c
   14a38:	ldr	r8, [sp, #112]	; 0x70
   14a3c:	ldr	r5, [sp, #116]	; 0x74
   14a40:	uxtb	r3, r3
   14a44:	b	147bc <__assert_fail@plt+0x3864>
   14a48:	mov	sl, r9
   14a4c:	str	r3, [sp, #56]	; 0x38
   14a50:	mov	r9, fp
   14a54:	ldr	r2, [sp, #64]	; 0x40
   14a58:	b	147ec <__assert_fail@plt+0x3894>
   14a5c:	andeq	sl, r1, ip, ror ip
   14a60:	andeq	sl, r1, r8, ror ip
   14a64:	andeq	sl, r1, r0, lsl #25
   14a68:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   14a6c:	ldr	r2, [sp, #44]	; 0x2c
   14a70:	ldrb	r1, [r2, r3]
   14a74:	sub	r2, r1, #33	; 0x21
   14a78:	uxtb	r2, r2
   14a7c:	cmp	r2, #29
   14a80:	bhi	14b00 <__assert_fail@plt+0x3ba8>
   14a84:	ldr	r0, [pc, #-36]	; 14a68 <__assert_fail@plt+0x3b10>
   14a88:	mov	ip, #1
   14a8c:	ands	r2, r0, ip, lsl r2
   14a90:	beq	14b20 <__assert_fail@plt+0x3bc8>
   14a94:	ldr	r2, [sp, #40]	; 0x28
   14a98:	cmp	r2, #0
   14a9c:	bne	14c14 <__assert_fail@plt+0x3cbc>
   14aa0:	add	r2, r8, #1
   14aa4:	cmp	fp, r8
   14aa8:	strbhi	r4, [r9, r8]
   14aac:	cmp	fp, r2
   14ab0:	movhi	r0, #34	; 0x22
   14ab4:	strbhi	r0, [r9, r2]
   14ab8:	add	r2, r8, #2
   14abc:	cmp	fp, r2
   14ac0:	movhi	r0, #34	; 0x22
   14ac4:	strbhi	r0, [r9, r2]
   14ac8:	add	r2, r8, #3
   14acc:	cmp	fp, r2
   14ad0:	mov	sl, r3
   14ad4:	ldr	r3, [sp, #40]	; 0x28
   14ad8:	movhi	r0, #63	; 0x3f
   14adc:	mov	r4, r1
   14ae0:	strbhi	r0, [r9, r2]
   14ae4:	add	r8, r8, #4
   14ae8:	mov	r1, r3
   14aec:	str	r3, [sp, #32]
   14af0:	b	13c70 <__assert_fail@plt+0x2d18>
   14af4:	str	r3, [sp, #32]
   14af8:	mov	r3, r7
   14afc:	b	147bc <__assert_fail@plt+0x3864>
   14b00:	mov	r1, #0
   14b04:	str	r1, [sp, #32]
   14b08:	b	13c70 <__assert_fail@plt+0x2d18>
   14b0c:	mov	sl, r9
   14b10:	ldr	r3, [sp, #56]	; 0x38
   14b14:	mov	r9, fp
   14b18:	ldr	r2, [sp, #64]	; 0x40
   14b1c:	b	147ec <__assert_fail@plt+0x3894>
   14b20:	str	r2, [sp, #32]
   14b24:	mov	r1, #0
   14b28:	b	13c70 <__assert_fail@plt+0x2d18>
   14b2c:	ldr	r2, [sp, #76]	; 0x4c
   14b30:	mov	sl, r9
   14b34:	mov	r9, fp
   14b38:	mov	fp, r8
   14b3c:	ldr	r1, [sp, #72]	; 0x48
   14b40:	cmp	r1, #0
   14b44:	moveq	r3, #0
   14b48:	andne	r3, r2, #1
   14b4c:	cmp	r3, #0
   14b50:	beq	14b7c <__assert_fail@plt+0x3c24>
   14b54:	ldrb	r3, [r1]
   14b58:	cmp	r3, #0
   14b5c:	beq	14b7c <__assert_fail@plt+0x3c24>
   14b60:	mov	r2, r1
   14b64:	cmp	r9, fp
   14b68:	strbhi	r3, [sl, fp]
   14b6c:	ldrb	r3, [r2, #1]!
   14b70:	add	fp, fp, #1
   14b74:	cmp	r3, #0
   14b78:	bne	14b64 <__assert_fail@plt+0x3c0c>
   14b7c:	cmp	r9, fp
   14b80:	movhi	r3, #0
   14b84:	strbhi	r3, [sl, fp]
   14b88:	b	14844 <__assert_fail@plt+0x38ec>
   14b8c:	ldr	r3, [sp, #192]	; 0xc0
   14b90:	mov	ip, #5
   14b94:	str	r3, [sp, #16]
   14b98:	ldr	r3, [sp, #188]	; 0xbc
   14b9c:	ldr	r2, [sp, #44]	; 0x2c
   14ba0:	str	r3, [sp, #12]
   14ba4:	ldr	r3, [sp, #184]	; 0xb8
   14ba8:	ldr	r1, [sp, #84]	; 0x54
   14bac:	str	r3, [sp, #8]
   14bb0:	ldr	r3, [sp, #180]	; 0xb4
   14bb4:	mov	r0, r9
   14bb8:	str	r3, [sp, #4]
   14bbc:	str	ip, [sp]
   14bc0:	ldr	r3, [sp, #24]
   14bc4:	bl	1369c <__assert_fail@plt+0x2744>
   14bc8:	mov	fp, r0
   14bcc:	b	14844 <__assert_fail@plt+0x38ec>
   14bd0:	mov	sl, r9
   14bd4:	mov	r9, fp
   14bd8:	mov	fp, r8
   14bdc:	b	14b3c <__assert_fail@plt+0x3be4>
   14be0:	ldr	r1, [sp, #176]	; 0xb0
   14be4:	bl	1357c <__assert_fail@plt+0x2624>
   14be8:	str	r0, [sp, #192]	; 0xc0
   14bec:	b	13b58 <__assert_fail@plt+0x2c00>
   14bf0:	ldr	r1, [sp, #176]	; 0xb0
   14bf4:	bl	1357c <__assert_fail@plt+0x2624>
   14bf8:	str	r0, [sp, #188]	; 0xbc
   14bfc:	b	13b38 <__assert_fail@plt+0x2be0>
   14c00:	mov	sl, r9
   14c04:	mov	r2, r3
   14c08:	mov	r9, fp
   14c0c:	mov	fp, r8
   14c10:	b	14b3c <__assert_fail@plt+0x3be4>
   14c14:	mov	sl, r9
   14c18:	mov	r9, fp
   14c1c:	b	14800 <__assert_fail@plt+0x38a8>
   14c20:	push	{r4, r5, r6, lr}
   14c24:	mov	r5, r0
   14c28:	bl	10e8c <__errno_location@plt>
   14c2c:	cmp	r5, #0
   14c30:	mov	r1, #48	; 0x30
   14c34:	mov	r4, r0
   14c38:	ldr	r0, [pc, #16]	; 14c50 <__assert_fail@plt+0x3cf8>
   14c3c:	ldr	r6, [r4]
   14c40:	movne	r0, r5
   14c44:	bl	18524 <__assert_fail@plt+0x75cc>
   14c48:	str	r6, [r4]
   14c4c:	pop	{r4, r5, r6, pc}
   14c50:	andeq	ip, r2, r0, ror r1
   14c54:	ldr	r3, [pc, #12]	; 14c68 <__assert_fail@plt+0x3d10>
   14c58:	cmp	r0, #0
   14c5c:	moveq	r0, r3
   14c60:	ldr	r0, [r0]
   14c64:	bx	lr
   14c68:	andeq	ip, r2, r0, ror r1
   14c6c:	ldr	r3, [pc, #12]	; 14c80 <__assert_fail@plt+0x3d28>
   14c70:	cmp	r0, #0
   14c74:	moveq	r0, r3
   14c78:	str	r1, [r0]
   14c7c:	bx	lr
   14c80:	andeq	ip, r2, r0, ror r1
   14c84:	ldr	r3, [pc, #52]	; 14cc0 <__assert_fail@plt+0x3d68>
   14c88:	cmp	r0, #0
   14c8c:	moveq	r0, r3
   14c90:	add	r3, r0, #8
   14c94:	push	{lr}		; (str lr, [sp, #-4]!)
   14c98:	lsr	lr, r1, #5
   14c9c:	and	r1, r1, #31
   14ca0:	ldr	ip, [r3, lr, lsl #2]
   14ca4:	lsr	r0, ip, r1
   14ca8:	eor	r2, r2, r0
   14cac:	and	r2, r2, #1
   14cb0:	and	r0, r0, #1
   14cb4:	eor	r1, ip, r2, lsl r1
   14cb8:	str	r1, [r3, lr, lsl #2]
   14cbc:	pop	{pc}		; (ldr pc, [sp], #4)
   14cc0:	andeq	ip, r2, r0, ror r1
   14cc4:	ldr	r3, [pc, #16]	; 14cdc <__assert_fail@plt+0x3d84>
   14cc8:	cmp	r0, #0
   14ccc:	movne	r3, r0
   14cd0:	ldr	r0, [r3, #4]
   14cd4:	str	r1, [r3, #4]
   14cd8:	bx	lr
   14cdc:	andeq	ip, r2, r0, ror r1
   14ce0:	ldr	r3, [pc, #44]	; 14d14 <__assert_fail@plt+0x3dbc>
   14ce4:	cmp	r0, #0
   14ce8:	moveq	r0, r3
   14cec:	mov	ip, #10
   14cf0:	cmp	r2, #0
   14cf4:	cmpne	r1, #0
   14cf8:	str	ip, [r0]
   14cfc:	beq	14d0c <__assert_fail@plt+0x3db4>
   14d00:	str	r1, [r0, #40]	; 0x28
   14d04:	str	r2, [r0, #44]	; 0x2c
   14d08:	bx	lr
   14d0c:	push	{r4, lr}
   14d10:	bl	10f40 <abort@plt>
   14d14:	andeq	ip, r2, r0, ror r1
   14d18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14d1c:	sub	sp, sp, #24
   14d20:	ldr	ip, [pc, #108]	; 14d94 <__assert_fail@plt+0x3e3c>
   14d24:	ldr	r4, [sp, #56]	; 0x38
   14d28:	mov	r9, r2
   14d2c:	cmp	r4, #0
   14d30:	moveq	r4, ip
   14d34:	mov	sl, r3
   14d38:	mov	r7, r0
   14d3c:	mov	r8, r1
   14d40:	bl	10e8c <__errno_location@plt>
   14d44:	ldr	r3, [r4, #44]	; 0x2c
   14d48:	mov	r1, r8
   14d4c:	ldr	r6, [r0]
   14d50:	str	r3, [sp, #16]
   14d54:	ldr	r2, [r4, #40]	; 0x28
   14d58:	add	r3, r4, #8
   14d5c:	str	r3, [sp, #8]
   14d60:	str	r2, [sp, #12]
   14d64:	ldr	r2, [r4, #4]
   14d68:	mov	r5, r0
   14d6c:	str	r2, [sp, #4]
   14d70:	ldr	ip, [r4]
   14d74:	mov	r3, sl
   14d78:	mov	r2, r9
   14d7c:	mov	r0, r7
   14d80:	str	ip, [sp]
   14d84:	bl	1369c <__assert_fail@plt+0x2744>
   14d88:	str	r6, [r5]
   14d8c:	add	sp, sp, #24
   14d90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d94:	andeq	ip, r2, r0, ror r1
   14d98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d9c:	cmp	r2, #0
   14da0:	sub	sp, sp, #36	; 0x24
   14da4:	ldr	r4, [pc, #164]	; 14e50 <__assert_fail@plt+0x3ef8>
   14da8:	mov	r8, r1
   14dac:	movne	r4, r2
   14db0:	mov	r7, r0
   14db4:	bl	10e8c <__errno_location@plt>
   14db8:	ldr	r3, [r4, #44]	; 0x2c
   14dbc:	ldr	r5, [r4, #4]
   14dc0:	add	r9, r4, #8
   14dc4:	orr	r5, r5, #1
   14dc8:	mov	r1, #0
   14dcc:	mov	r2, r7
   14dd0:	ldr	fp, [r0]
   14dd4:	str	r3, [sp, #16]
   14dd8:	ldr	r3, [r4, #40]	; 0x28
   14ddc:	stmib	sp, {r5, r9}
   14de0:	str	r3, [sp, #12]
   14de4:	ldr	r3, [r4]
   14de8:	mov	r6, r0
   14dec:	str	r3, [sp]
   14df0:	mov	r0, r1
   14df4:	mov	r3, r8
   14df8:	bl	1369c <__assert_fail@plt+0x2744>
   14dfc:	add	r1, r0, #1
   14e00:	mov	r0, r1
   14e04:	str	r1, [sp, #28]
   14e08:	bl	17fe0 <__assert_fail@plt+0x7088>
   14e0c:	ldr	r3, [r4, #44]	; 0x2c
   14e10:	ldr	r1, [sp, #28]
   14e14:	str	r3, [sp, #16]
   14e18:	ldr	r3, [r4, #40]	; 0x28
   14e1c:	str	r5, [sp, #4]
   14e20:	str	r3, [sp, #12]
   14e24:	str	r9, [sp, #8]
   14e28:	ldr	ip, [r4]
   14e2c:	mov	r3, r8
   14e30:	mov	r2, r7
   14e34:	str	ip, [sp]
   14e38:	mov	sl, r0
   14e3c:	bl	1369c <__assert_fail@plt+0x2744>
   14e40:	mov	r0, sl
   14e44:	str	fp, [r6]
   14e48:	add	sp, sp, #36	; 0x24
   14e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e50:	andeq	ip, r2, r0, ror r1
   14e54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e58:	cmp	r3, #0
   14e5c:	sub	sp, sp, #44	; 0x2c
   14e60:	ldr	r4, [pc, #192]	; 14f28 <__assert_fail@plt+0x3fd0>
   14e64:	mov	r6, r2
   14e68:	movne	r4, r3
   14e6c:	mov	r9, r1
   14e70:	mov	r8, r0
   14e74:	bl	10e8c <__errno_location@plt>
   14e78:	ldr	r3, [r4, #44]	; 0x2c
   14e7c:	ldr	r5, [r4, #4]
   14e80:	add	sl, r4, #8
   14e84:	cmp	r6, #0
   14e88:	orreq	r5, r5, #1
   14e8c:	mov	r1, #0
   14e90:	ldr	r2, [r0]
   14e94:	str	r3, [sp, #16]
   14e98:	ldr	r3, [r4, #40]	; 0x28
   14e9c:	stmib	sp, {r5, sl}
   14ea0:	str	r3, [sp, #12]
   14ea4:	ldr	r3, [r4]
   14ea8:	mov	r7, r0
   14eac:	str	r2, [sp, #28]
   14eb0:	str	r3, [sp]
   14eb4:	mov	r2, r8
   14eb8:	mov	r3, r9
   14ebc:	mov	r0, r1
   14ec0:	bl	1369c <__assert_fail@plt+0x2744>
   14ec4:	add	r1, r0, #1
   14ec8:	mov	fp, r0
   14ecc:	mov	r0, r1
   14ed0:	str	r1, [sp, #36]	; 0x24
   14ed4:	bl	17fe0 <__assert_fail@plt+0x7088>
   14ed8:	ldr	r3, [r4, #44]	; 0x2c
   14edc:	mov	r2, r8
   14ee0:	str	r3, [sp, #16]
   14ee4:	ldr	r3, [r4, #40]	; 0x28
   14ee8:	str	r5, [sp, #4]
   14eec:	str	r3, [sp, #12]
   14ef0:	str	sl, [sp, #8]
   14ef4:	ldr	ip, [r4]
   14ef8:	ldr	r1, [sp, #36]	; 0x24
   14efc:	mov	r3, r9
   14f00:	str	ip, [sp]
   14f04:	str	r0, [sp, #32]
   14f08:	bl	1369c <__assert_fail@plt+0x2744>
   14f0c:	ldr	r2, [sp, #28]
   14f10:	cmp	r6, #0
   14f14:	str	r2, [r7]
   14f18:	ldr	r0, [sp, #32]
   14f1c:	strne	fp, [r6]
   14f20:	add	sp, sp, #44	; 0x2c
   14f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f28:	andeq	ip, r2, r0, ror r1
   14f2c:	push	{r4, r5, r6, r7, r8, lr}
   14f30:	ldr	r6, [pc, #116]	; 14fac <__assert_fail@plt+0x4054>
   14f34:	ldr	r3, [r6, #4]
   14f38:	ldr	r7, [r6]
   14f3c:	cmp	r3, #1
   14f40:	movgt	r5, r7
   14f44:	movgt	r4, #1
   14f48:	ble	14f68 <__assert_fail@plt+0x4010>
   14f4c:	ldr	r0, [r5, #12]
   14f50:	bl	132c8 <__assert_fail@plt+0x2370>
   14f54:	ldr	r3, [r6, #4]
   14f58:	add	r4, r4, #1
   14f5c:	cmp	r3, r4
   14f60:	add	r5, r5, #8
   14f64:	bgt	14f4c <__assert_fail@plt+0x3ff4>
   14f68:	ldr	r0, [r7, #4]
   14f6c:	ldr	r4, [pc, #60]	; 14fb0 <__assert_fail@plt+0x4058>
   14f70:	cmp	r0, r4
   14f74:	beq	14f88 <__assert_fail@plt+0x4030>
   14f78:	bl	132c8 <__assert_fail@plt+0x2370>
   14f7c:	mov	r3, #256	; 0x100
   14f80:	str	r4, [r6, #12]
   14f84:	str	r3, [r6, #8]
   14f88:	ldr	r4, [pc, #36]	; 14fb4 <__assert_fail@plt+0x405c>
   14f8c:	cmp	r7, r4
   14f90:	beq	14fa0 <__assert_fail@plt+0x4048>
   14f94:	mov	r0, r7
   14f98:	bl	132c8 <__assert_fail@plt+0x2370>
   14f9c:	str	r4, [r6]
   14fa0:	mov	r3, #1
   14fa4:	str	r3, [r6, #4]
   14fa8:	pop	{r4, r5, r6, r7, r8, pc}
   14fac:	andeq	ip, r2, r0, lsl #2
   14fb0:	andeq	ip, r2, r0, lsr #3
   14fb4:	andeq	ip, r2, r8, lsl #2
   14fb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fbc:	sub	sp, sp, #44	; 0x2c
   14fc0:	mov	r5, r0
   14fc4:	mov	sl, r1
   14fc8:	bl	10e8c <__errno_location@plt>
   14fcc:	ldr	r4, [pc, #400]	; 15164 <__assert_fail@plt+0x420c>
   14fd0:	cmn	r5, #-2147483647	; 0x80000001
   14fd4:	ldr	r6, [r4]
   14fd8:	mov	r8, r0
   14fdc:	movne	r0, #0
   14fe0:	moveq	r0, #1
   14fe4:	ldr	r3, [r8]
   14fe8:	orrs	r0, r0, r5, lsr #31
   14fec:	str	r3, [sp, #24]
   14ff0:	bne	15160 <__assert_fail@plt+0x4208>
   14ff4:	ldr	r2, [r4, #4]
   14ff8:	cmp	r5, r2
   14ffc:	blt	1505c <__assert_fail@plt+0x4104>
   15000:	add	r7, r4, #8
   15004:	cmp	r6, r7
   15008:	str	r2, [sp, #36]	; 0x24
   1500c:	beq	15130 <__assert_fail@plt+0x41d8>
   15010:	mov	r3, #8
   15014:	sub	r2, r5, r2
   15018:	mov	r0, r6
   1501c:	str	r3, [sp]
   15020:	add	r2, r2, #1
   15024:	mvn	r3, #-2147483648	; 0x80000000
   15028:	add	r1, sp, #36	; 0x24
   1502c:	bl	181fc <__assert_fail@plt+0x72a4>
   15030:	mov	r6, r0
   15034:	str	r0, [r4]
   15038:	ldr	r0, [r4, #4]
   1503c:	ldr	r2, [sp, #36]	; 0x24
   15040:	mov	r1, #0
   15044:	sub	r2, r2, r0
   15048:	add	r0, r6, r0, lsl #3
   1504c:	lsl	r2, r2, #3
   15050:	bl	10ea4 <memset@plt>
   15054:	ldr	r3, [sp, #36]	; 0x24
   15058:	str	r3, [r4, #4]
   1505c:	ldr	r4, [pc, #260]	; 15168 <__assert_fail@plt+0x4210>
   15060:	add	fp, r6, r5, lsl #3
   15064:	ldr	r9, [r6, r5, lsl #3]
   15068:	ldr	r0, [r4, #4]
   1506c:	ldr	r3, [r4]
   15070:	ldr	r7, [fp, #4]
   15074:	ldr	r1, [r4, #44]	; 0x2c
   15078:	ldr	r2, [r4, #40]	; 0x28
   1507c:	orr	r0, r0, #1
   15080:	str	r3, [sp]
   15084:	add	r3, r4, #8
   15088:	str	r0, [sp, #28]
   1508c:	str	r0, [sp, #4]
   15090:	str	r1, [sp, #16]
   15094:	str	r2, [sp, #12]
   15098:	str	r3, [sp, #8]
   1509c:	mov	r0, r7
   150a0:	mov	r1, r9
   150a4:	mvn	r3, #0
   150a8:	mov	r2, sl
   150ac:	bl	1369c <__assert_fail@plt+0x2744>
   150b0:	cmp	r9, r0
   150b4:	bhi	1511c <__assert_fail@plt+0x41c4>
   150b8:	add	r3, r4, #48	; 0x30
   150bc:	add	r9, r0, #1
   150c0:	cmp	r7, r3
   150c4:	str	r9, [r6, r5, lsl #3]
   150c8:	beq	150d4 <__assert_fail@plt+0x417c>
   150cc:	mov	r0, r7
   150d0:	bl	132c8 <__assert_fail@plt+0x2370>
   150d4:	mov	r0, r9
   150d8:	bl	17fe0 <__assert_fail@plt+0x7088>
   150dc:	ldr	ip, [r4, #44]	; 0x2c
   150e0:	ldr	r3, [r4]
   150e4:	ldr	lr, [r4, #40]	; 0x28
   150e8:	ldr	r4, [pc, #124]	; 1516c <__assert_fail@plt+0x4214>
   150ec:	mov	r2, sl
   150f0:	mov	r1, r9
   150f4:	str	r0, [fp, #4]
   150f8:	str	r4, [sp, #8]
   150fc:	ldr	r4, [sp, #28]
   15100:	str	r3, [sp]
   15104:	str	r4, [sp, #4]
   15108:	str	ip, [sp, #16]
   1510c:	str	lr, [sp, #12]
   15110:	mvn	r3, #0
   15114:	mov	r7, r0
   15118:	bl	1369c <__assert_fail@plt+0x2744>
   1511c:	ldr	r3, [sp, #24]
   15120:	mov	r0, r7
   15124:	str	r3, [r8]
   15128:	add	sp, sp, #44	; 0x2c
   1512c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15130:	mov	r3, #8
   15134:	sub	r2, r5, r2
   15138:	str	r3, [sp]
   1513c:	add	r1, sp, #36	; 0x24
   15140:	add	r2, r2, #1
   15144:	mvn	r3, #-2147483648	; 0x80000000
   15148:	bl	181fc <__assert_fail@plt+0x72a4>
   1514c:	mov	r6, r0
   15150:	ldm	r7, {r0, r1}
   15154:	str	r6, [r4]
   15158:	stm	r6, {r0, r1}
   1515c:	b	15038 <__assert_fail@plt+0x40e0>
   15160:	bl	10f40 <abort@plt>
   15164:	andeq	ip, r2, r0, lsl #2
   15168:	andeq	ip, r2, r0, ror r1
   1516c:	andeq	ip, r2, r8, ror r1
   15170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15174:	sub	sp, sp, #52	; 0x34
   15178:	mov	r5, r0
   1517c:	mov	sl, r1
   15180:	mov	fp, r2
   15184:	bl	10e8c <__errno_location@plt>
   15188:	ldr	r4, [pc, #408]	; 15328 <__assert_fail@plt+0x43d0>
   1518c:	cmn	r5, #-2147483647	; 0x80000001
   15190:	ldr	r6, [r4]
   15194:	mov	r8, r0
   15198:	movne	r0, #0
   1519c:	moveq	r0, #1
   151a0:	ldr	r3, [r8]
   151a4:	orrs	r0, r0, r5, lsr #31
   151a8:	str	r3, [sp, #28]
   151ac:	bne	15324 <__assert_fail@plt+0x43cc>
   151b0:	ldr	r2, [r4, #4]
   151b4:	cmp	r5, r2
   151b8:	blt	15218 <__assert_fail@plt+0x42c0>
   151bc:	add	r7, r4, #8
   151c0:	cmp	r6, r7
   151c4:	str	r2, [sp, #44]	; 0x2c
   151c8:	beq	152f4 <__assert_fail@plt+0x439c>
   151cc:	mov	r3, #8
   151d0:	sub	r2, r5, r2
   151d4:	mov	r0, r6
   151d8:	str	r3, [sp]
   151dc:	add	r2, r2, #1
   151e0:	mvn	r3, #-2147483648	; 0x80000000
   151e4:	add	r1, sp, #44	; 0x2c
   151e8:	bl	181fc <__assert_fail@plt+0x72a4>
   151ec:	mov	r6, r0
   151f0:	str	r0, [r4]
   151f4:	ldr	r0, [r4, #4]
   151f8:	ldr	r2, [sp, #44]	; 0x2c
   151fc:	mov	r1, #0
   15200:	sub	r2, r2, r0
   15204:	add	r0, r6, r0, lsl #3
   15208:	lsl	r2, r2, #3
   1520c:	bl	10ea4 <memset@plt>
   15210:	ldr	r3, [sp, #44]	; 0x2c
   15214:	str	r3, [r4, #4]
   15218:	ldr	r4, [pc, #268]	; 1532c <__assert_fail@plt+0x43d4>
   1521c:	add	r3, r6, r5, lsl #3
   15220:	str	r3, [sp, #32]
   15224:	ldr	r7, [r3, #4]
   15228:	ldr	r0, [r4, #4]
   1522c:	ldr	r3, [r4]
   15230:	ldr	r9, [r6, r5, lsl #3]
   15234:	ldr	r1, [r4, #44]	; 0x2c
   15238:	ldr	r2, [r4, #40]	; 0x28
   1523c:	orr	r0, r0, #1
   15240:	str	r3, [sp]
   15244:	add	r3, r4, #8
   15248:	str	r0, [sp, #36]	; 0x24
   1524c:	str	r0, [sp, #4]
   15250:	str	r1, [sp, #16]
   15254:	str	r2, [sp, #12]
   15258:	str	r3, [sp, #8]
   1525c:	mov	r0, r7
   15260:	mov	r1, r9
   15264:	mov	r3, fp
   15268:	mov	r2, sl
   1526c:	bl	1369c <__assert_fail@plt+0x2744>
   15270:	cmp	r9, r0
   15274:	bhi	152e0 <__assert_fail@plt+0x4388>
   15278:	add	r3, r4, #48	; 0x30
   1527c:	add	r9, r0, #1
   15280:	cmp	r7, r3
   15284:	str	r9, [r6, r5, lsl #3]
   15288:	beq	15294 <__assert_fail@plt+0x433c>
   1528c:	mov	r0, r7
   15290:	bl	132c8 <__assert_fail@plt+0x2370>
   15294:	mov	r0, r9
   15298:	bl	17fe0 <__assert_fail@plt+0x7088>
   1529c:	ldr	ip, [sp, #32]
   152a0:	ldr	lr, [r4, #44]	; 0x2c
   152a4:	ldr	r5, [r4, #40]	; 0x28
   152a8:	mov	r3, fp
   152ac:	mov	r2, sl
   152b0:	mov	r1, r9
   152b4:	str	r0, [ip, #4]
   152b8:	ldr	ip, [r4]
   152bc:	ldr	r4, [pc, #108]	; 15330 <__assert_fail@plt+0x43d8>
   152c0:	str	lr, [sp, #16]
   152c4:	str	r4, [sp, #8]
   152c8:	ldr	r4, [sp, #36]	; 0x24
   152cc:	str	r5, [sp, #12]
   152d0:	str	r4, [sp, #4]
   152d4:	str	ip, [sp]
   152d8:	mov	r7, r0
   152dc:	bl	1369c <__assert_fail@plt+0x2744>
   152e0:	ldr	r3, [sp, #28]
   152e4:	mov	r0, r7
   152e8:	str	r3, [r8]
   152ec:	add	sp, sp, #52	; 0x34
   152f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152f4:	mov	r3, #8
   152f8:	sub	r2, r5, r2
   152fc:	str	r3, [sp]
   15300:	add	r1, sp, #44	; 0x2c
   15304:	add	r2, r2, #1
   15308:	mvn	r3, #-2147483648	; 0x80000000
   1530c:	bl	181fc <__assert_fail@plt+0x72a4>
   15310:	mov	r6, r0
   15314:	ldm	r7, {r0, r1}
   15318:	str	r6, [r4]
   1531c:	stm	r6, {r0, r1}
   15320:	b	151f4 <__assert_fail@plt+0x429c>
   15324:	bl	10f40 <abort@plt>
   15328:	andeq	ip, r2, r0, lsl #2
   1532c:	andeq	ip, r2, r0, ror r1
   15330:	andeq	ip, r2, r8, ror r1
   15334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15338:	sub	sp, sp, #44	; 0x2c
   1533c:	mov	sl, r0
   15340:	bl	10e8c <__errno_location@plt>
   15344:	ldr	r4, [pc, #352]	; 154ac <__assert_fail@plt+0x4554>
   15348:	ldr	r2, [r4, #4]
   1534c:	ldr	r5, [r4]
   15350:	cmp	r2, #0
   15354:	ldr	r3, [r0]
   15358:	mov	r8, r0
   1535c:	str	r3, [sp, #28]
   15360:	bgt	153bc <__assert_fail@plt+0x4464>
   15364:	add	r6, r4, #8
   15368:	cmp	r5, r6
   1536c:	str	r2, [sp, #36]	; 0x24
   15370:	beq	1547c <__assert_fail@plt+0x4524>
   15374:	mov	r3, #8
   15378:	mov	r0, r5
   1537c:	str	r3, [sp]
   15380:	rsb	r2, r2, #1
   15384:	mvn	r3, #-2147483648	; 0x80000000
   15388:	add	r1, sp, #36	; 0x24
   1538c:	bl	181fc <__assert_fail@plt+0x72a4>
   15390:	mov	r5, r0
   15394:	str	r0, [r4]
   15398:	ldr	r0, [r4, #4]
   1539c:	ldr	r2, [sp, #36]	; 0x24
   153a0:	mov	r1, #0
   153a4:	sub	r2, r2, r0
   153a8:	add	r0, r5, r0, lsl #3
   153ac:	lsl	r2, r2, #3
   153b0:	bl	10ea4 <memset@plt>
   153b4:	ldr	r3, [sp, #36]	; 0x24
   153b8:	str	r3, [r4, #4]
   153bc:	ldr	r4, [pc, #236]	; 154b0 <__assert_fail@plt+0x4558>
   153c0:	ldr	r9, [r5]
   153c4:	ldr	r6, [r5, #4]
   153c8:	ldr	r7, [r4, #4]
   153cc:	ldr	r1, [r4, #44]	; 0x2c
   153d0:	ldr	r2, [r4, #40]	; 0x28
   153d4:	ldr	r3, [r4]
   153d8:	orr	r7, r7, #1
   153dc:	add	fp, r4, #8
   153e0:	str	r1, [sp, #16]
   153e4:	str	r2, [sp, #12]
   153e8:	str	r3, [sp]
   153ec:	str	r7, [sp, #4]
   153f0:	str	fp, [sp, #8]
   153f4:	mov	r1, r9
   153f8:	mov	r0, r6
   153fc:	mvn	r3, #0
   15400:	mov	r2, sl
   15404:	bl	1369c <__assert_fail@plt+0x2744>
   15408:	cmp	r9, r0
   1540c:	bhi	15468 <__assert_fail@plt+0x4510>
   15410:	add	r3, r4, #48	; 0x30
   15414:	add	r9, r0, #1
   15418:	cmp	r6, r3
   1541c:	str	r9, [r5]
   15420:	beq	1542c <__assert_fail@plt+0x44d4>
   15424:	mov	r0, r6
   15428:	bl	132c8 <__assert_fail@plt+0x2370>
   1542c:	mov	r0, r9
   15430:	bl	17fe0 <__assert_fail@plt+0x7088>
   15434:	ldr	ip, [r4, #44]	; 0x2c
   15438:	ldr	r3, [r4]
   1543c:	ldr	lr, [r4, #40]	; 0x28
   15440:	mov	r2, sl
   15444:	mov	r1, r9
   15448:	str	r0, [r5, #4]
   1544c:	str	r3, [sp]
   15450:	stmib	sp, {r7, fp}
   15454:	str	ip, [sp, #16]
   15458:	str	lr, [sp, #12]
   1545c:	mvn	r3, #0
   15460:	mov	r6, r0
   15464:	bl	1369c <__assert_fail@plt+0x2744>
   15468:	ldr	r3, [sp, #28]
   1546c:	mov	r0, r6
   15470:	str	r3, [r8]
   15474:	add	sp, sp, #44	; 0x2c
   15478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1547c:	mov	r3, #8
   15480:	str	r3, [sp]
   15484:	add	r1, sp, #36	; 0x24
   15488:	rsb	r2, r2, #1
   1548c:	mvn	r3, #-2147483648	; 0x80000000
   15490:	mov	r0, #0
   15494:	bl	181fc <__assert_fail@plt+0x72a4>
   15498:	mov	r5, r0
   1549c:	ldm	r6, {r0, r1}
   154a0:	str	r5, [r4]
   154a4:	stm	r5, {r0, r1}
   154a8:	b	15398 <__assert_fail@plt+0x4440>
   154ac:	andeq	ip, r2, r0, lsl #2
   154b0:	andeq	ip, r2, r0, ror r1
   154b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154b8:	sub	sp, sp, #44	; 0x2c
   154bc:	mov	r9, r0
   154c0:	mov	sl, r1
   154c4:	bl	10e8c <__errno_location@plt>
   154c8:	ldr	r4, [pc, #364]	; 1563c <__assert_fail@plt+0x46e4>
   154cc:	ldr	r2, [r4, #4]
   154d0:	ldr	r5, [r4]
   154d4:	cmp	r2, #0
   154d8:	ldr	r3, [r0]
   154dc:	mov	r7, r0
   154e0:	str	r3, [sp, #24]
   154e4:	bgt	15540 <__assert_fail@plt+0x45e8>
   154e8:	add	r6, r4, #8
   154ec:	cmp	r5, r6
   154f0:	str	r2, [sp, #36]	; 0x24
   154f4:	beq	1560c <__assert_fail@plt+0x46b4>
   154f8:	mov	r3, #8
   154fc:	mov	r0, r5
   15500:	str	r3, [sp]
   15504:	rsb	r2, r2, #1
   15508:	mvn	r3, #-2147483648	; 0x80000000
   1550c:	add	r1, sp, #36	; 0x24
   15510:	bl	181fc <__assert_fail@plt+0x72a4>
   15514:	mov	r5, r0
   15518:	str	r0, [r4]
   1551c:	ldr	r0, [r4, #4]
   15520:	ldr	r2, [sp, #36]	; 0x24
   15524:	mov	r1, #0
   15528:	sub	r2, r2, r0
   1552c:	add	r0, r5, r0, lsl #3
   15530:	lsl	r2, r2, #3
   15534:	bl	10ea4 <memset@plt>
   15538:	ldr	r3, [sp, #36]	; 0x24
   1553c:	str	r3, [r4, #4]
   15540:	ldr	r4, [pc, #248]	; 15640 <__assert_fail@plt+0x46e8>
   15544:	ldr	r8, [r5]
   15548:	ldr	r6, [r5, #4]
   1554c:	ldr	r0, [r4, #4]
   15550:	ldr	r1, [r4, #44]	; 0x2c
   15554:	ldr	r2, [r4, #40]	; 0x28
   15558:	ldr	r3, [r4]
   1555c:	orr	r0, r0, #1
   15560:	add	fp, r4, #8
   15564:	str	r0, [sp, #28]
   15568:	str	r0, [sp, #4]
   1556c:	str	r1, [sp, #16]
   15570:	str	r2, [sp, #12]
   15574:	str	r3, [sp]
   15578:	str	fp, [sp, #8]
   1557c:	mov	r1, r8
   15580:	mov	r0, r6
   15584:	mov	r3, sl
   15588:	mov	r2, r9
   1558c:	bl	1369c <__assert_fail@plt+0x2744>
   15590:	cmp	r8, r0
   15594:	bhi	155f8 <__assert_fail@plt+0x46a0>
   15598:	add	r3, r4, #48	; 0x30
   1559c:	add	r8, r0, #1
   155a0:	cmp	r6, r3
   155a4:	str	r8, [r5]
   155a8:	beq	155b4 <__assert_fail@plt+0x465c>
   155ac:	mov	r0, r6
   155b0:	bl	132c8 <__assert_fail@plt+0x2370>
   155b4:	mov	r0, r8
   155b8:	bl	17fe0 <__assert_fail@plt+0x7088>
   155bc:	ldr	lr, [r4, #44]	; 0x2c
   155c0:	ldr	ip, [r4]
   155c4:	mov	r3, sl
   155c8:	mov	r2, r9
   155cc:	mov	r1, r8
   155d0:	str	r0, [r5, #4]
   155d4:	ldr	r5, [r4, #40]	; 0x28
   155d8:	ldr	r4, [sp, #28]
   155dc:	str	fp, [sp, #8]
   155e0:	str	r4, [sp, #4]
   155e4:	str	lr, [sp, #16]
   155e8:	str	r5, [sp, #12]
   155ec:	str	ip, [sp]
   155f0:	mov	r6, r0
   155f4:	bl	1369c <__assert_fail@plt+0x2744>
   155f8:	ldr	r3, [sp, #24]
   155fc:	mov	r0, r6
   15600:	str	r3, [r7]
   15604:	add	sp, sp, #44	; 0x2c
   15608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1560c:	mov	r3, #8
   15610:	str	r3, [sp]
   15614:	add	r1, sp, #36	; 0x24
   15618:	rsb	r2, r2, #1
   1561c:	mvn	r3, #-2147483648	; 0x80000000
   15620:	mov	r0, #0
   15624:	bl	181fc <__assert_fail@plt+0x72a4>
   15628:	mov	r5, r0
   1562c:	ldm	r6, {r0, r1}
   15630:	str	r5, [r4]
   15634:	stm	r5, {r0, r1}
   15638:	b	1551c <__assert_fail@plt+0x45c4>
   1563c:	andeq	ip, r2, r0, lsl #2
   15640:	andeq	ip, r2, r0, ror r1
   15644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15648:	sub	sp, sp, #132	; 0x84
   1564c:	mov	r5, r1
   15650:	mov	r4, r0
   15654:	mov	r9, r2
   15658:	add	r0, sp, #80	; 0x50
   1565c:	mov	r2, #48	; 0x30
   15660:	mov	r1, #0
   15664:	bl	10ea4 <memset@plt>
   15668:	cmp	r5, #10
   1566c:	beq	15824 <__assert_fail@plt+0x48cc>
   15670:	add	lr, sp, #80	; 0x50
   15674:	str	r5, [sp, #80]	; 0x50
   15678:	ldm	lr!, {r0, r1, r2, r3}
   1567c:	add	ip, sp, #32
   15680:	ldr	r6, [pc, #416]	; 15828 <__assert_fail@plt+0x48d0>
   15684:	stmia	ip!, {r0, r1, r2, r3}
   15688:	ldm	lr!, {r0, r1, r2, r3}
   1568c:	stmia	ip!, {r0, r1, r2, r3}
   15690:	ldm	lr, {r0, r1, r2, r3}
   15694:	stm	ip, {r0, r1, r2, r3}
   15698:	bl	10e8c <__errno_location@plt>
   1569c:	cmn	r4, #-2147483647	; 0x80000001
   156a0:	ldr	r5, [r6]
   156a4:	mov	r7, r0
   156a8:	movne	r0, #0
   156ac:	moveq	r0, #1
   156b0:	ldr	r3, [r7]
   156b4:	orrs	r0, r0, r4, lsr #31
   156b8:	str	r3, [sp, #24]
   156bc:	bne	15824 <__assert_fail@plt+0x48cc>
   156c0:	ldr	r2, [r6, #4]
   156c4:	cmp	r4, r2
   156c8:	blt	15728 <__assert_fail@plt+0x47d0>
   156cc:	add	r8, r6, #8
   156d0:	cmp	r5, r8
   156d4:	str	r2, [sp, #80]	; 0x50
   156d8:	beq	157f4 <__assert_fail@plt+0x489c>
   156dc:	mov	r3, #8
   156e0:	sub	r2, r4, r2
   156e4:	mov	r0, r5
   156e8:	str	r3, [sp]
   156ec:	add	r2, r2, #1
   156f0:	add	r1, sp, #80	; 0x50
   156f4:	mvn	r3, #-2147483648	; 0x80000000
   156f8:	bl	181fc <__assert_fail@plt+0x72a4>
   156fc:	mov	r5, r0
   15700:	str	r0, [r6]
   15704:	ldr	r0, [r6, #4]
   15708:	ldr	r2, [sp, #80]	; 0x50
   1570c:	mov	r1, #0
   15710:	sub	r2, r2, r0
   15714:	add	r0, r5, r0, lsl #3
   15718:	lsl	r2, r2, #3
   1571c:	bl	10ea4 <memset@plt>
   15720:	ldr	r3, [sp, #80]	; 0x50
   15724:	str	r3, [r6, #4]
   15728:	add	fp, r5, r4, lsl #3
   1572c:	ldr	r1, [sp, #36]	; 0x24
   15730:	ldr	r8, [r5, r4, lsl #3]
   15734:	ldr	r6, [fp, #4]
   15738:	ldr	r2, [sp, #72]	; 0x48
   1573c:	ldr	r3, [sp, #32]
   15740:	ldr	ip, [sp, #76]	; 0x4c
   15744:	orr	r1, r1, #1
   15748:	add	sl, sp, #40	; 0x28
   1574c:	str	r1, [sp, #28]
   15750:	str	r1, [sp, #4]
   15754:	str	r2, [sp, #12]
   15758:	str	r3, [sp]
   1575c:	mov	r0, r6
   15760:	mov	r1, r8
   15764:	str	ip, [sp, #16]
   15768:	str	sl, [sp, #8]
   1576c:	mvn	r3, #0
   15770:	mov	r2, r9
   15774:	bl	1369c <__assert_fail@plt+0x2744>
   15778:	cmp	r8, r0
   1577c:	bhi	157e0 <__assert_fail@plt+0x4888>
   15780:	ldr	r3, [pc, #164]	; 1582c <__assert_fail@plt+0x48d4>
   15784:	add	r8, r0, #1
   15788:	cmp	r6, r3
   1578c:	str	r8, [r5, r4, lsl #3]
   15790:	beq	1579c <__assert_fail@plt+0x4844>
   15794:	mov	r0, r6
   15798:	bl	132c8 <__assert_fail@plt+0x2370>
   1579c:	mov	r0, r8
   157a0:	bl	17fe0 <__assert_fail@plt+0x7088>
   157a4:	ldr	lr, [sp, #76]	; 0x4c
   157a8:	ldr	r3, [sp, #32]
   157ac:	ldr	ip, [sp, #72]	; 0x48
   157b0:	ldr	r4, [sp, #28]
   157b4:	mov	r2, r9
   157b8:	mov	r1, r8
   157bc:	str	r0, [fp, #4]
   157c0:	str	r3, [sp]
   157c4:	str	sl, [sp, #8]
   157c8:	str	r4, [sp, #4]
   157cc:	str	lr, [sp, #16]
   157d0:	str	ip, [sp, #12]
   157d4:	mvn	r3, #0
   157d8:	mov	r6, r0
   157dc:	bl	1369c <__assert_fail@plt+0x2744>
   157e0:	ldr	r3, [sp, #24]
   157e4:	mov	r0, r6
   157e8:	str	r3, [r7]
   157ec:	add	sp, sp, #132	; 0x84
   157f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157f4:	mov	r3, #8
   157f8:	sub	r2, r4, r2
   157fc:	add	r1, sp, #80	; 0x50
   15800:	str	r3, [sp]
   15804:	add	r2, r2, #1
   15808:	mvn	r3, #-2147483648	; 0x80000000
   1580c:	bl	181fc <__assert_fail@plt+0x72a4>
   15810:	mov	r5, r0
   15814:	ldm	r8, {r0, r1}
   15818:	str	r5, [r6]
   1581c:	stm	r5, {r0, r1}
   15820:	b	15704 <__assert_fail@plt+0x47ac>
   15824:	bl	10f40 <abort@plt>
   15828:	andeq	ip, r2, r0, lsl #2
   1582c:	andeq	ip, r2, r0, lsr #3
   15830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15834:	sub	sp, sp, #132	; 0x84
   15838:	mov	r5, r1
   1583c:	mov	r4, r0
   15840:	mov	r9, r2
   15844:	add	r0, sp, #80	; 0x50
   15848:	mov	r2, #48	; 0x30
   1584c:	mov	r1, #0
   15850:	mov	sl, r3
   15854:	bl	10ea4 <memset@plt>
   15858:	cmp	r5, #10
   1585c:	beq	15a18 <__assert_fail@plt+0x4ac0>
   15860:	add	lr, sp, #80	; 0x50
   15864:	str	r5, [sp, #80]	; 0x50
   15868:	ldm	lr!, {r0, r1, r2, r3}
   1586c:	add	ip, sp, #32
   15870:	ldr	r6, [pc, #420]	; 15a1c <__assert_fail@plt+0x4ac4>
   15874:	stmia	ip!, {r0, r1, r2, r3}
   15878:	ldm	lr!, {r0, r1, r2, r3}
   1587c:	stmia	ip!, {r0, r1, r2, r3}
   15880:	ldm	lr, {r0, r1, r2, r3}
   15884:	stm	ip, {r0, r1, r2, r3}
   15888:	bl	10e8c <__errno_location@plt>
   1588c:	cmn	r4, #-2147483647	; 0x80000001
   15890:	ldr	r5, [r6]
   15894:	mov	r7, r0
   15898:	movne	r0, #0
   1589c:	moveq	r0, #1
   158a0:	ldr	r3, [r7]
   158a4:	orrs	r0, r0, r4, lsr #31
   158a8:	str	r3, [sp, #24]
   158ac:	bne	15a18 <__assert_fail@plt+0x4ac0>
   158b0:	ldr	r2, [r6, #4]
   158b4:	cmp	r4, r2
   158b8:	blt	15918 <__assert_fail@plt+0x49c0>
   158bc:	add	r8, r6, #8
   158c0:	cmp	r5, r8
   158c4:	str	r2, [sp, #80]	; 0x50
   158c8:	beq	159e8 <__assert_fail@plt+0x4a90>
   158cc:	mov	r3, #8
   158d0:	sub	r2, r4, r2
   158d4:	mov	r0, r5
   158d8:	str	r3, [sp]
   158dc:	add	r2, r2, #1
   158e0:	add	r1, sp, #80	; 0x50
   158e4:	mvn	r3, #-2147483648	; 0x80000000
   158e8:	bl	181fc <__assert_fail@plt+0x72a4>
   158ec:	mov	r5, r0
   158f0:	str	r0, [r6]
   158f4:	ldr	r0, [r6, #4]
   158f8:	ldr	r2, [sp, #80]	; 0x50
   158fc:	mov	r1, #0
   15900:	sub	r2, r2, r0
   15904:	add	r0, r5, r0, lsl #3
   15908:	lsl	r2, r2, #3
   1590c:	bl	10ea4 <memset@plt>
   15910:	ldr	r3, [sp, #80]	; 0x50
   15914:	str	r3, [r6, #4]
   15918:	add	fp, r5, r4, lsl #3
   1591c:	ldr	r3, [sp, #32]
   15920:	ldr	r1, [sp, #36]	; 0x24
   15924:	ldr	r8, [r5, r4, lsl #3]
   15928:	ldr	r6, [fp, #4]
   1592c:	ldr	r2, [sp, #72]	; 0x48
   15930:	ldr	ip, [sp, #76]	; 0x4c
   15934:	orr	r1, r1, #1
   15938:	str	r3, [sp]
   1593c:	add	r3, sp, #40	; 0x28
   15940:	str	r1, [sp, #28]
   15944:	str	r1, [sp, #4]
   15948:	str	r2, [sp, #12]
   1594c:	str	r3, [sp, #8]
   15950:	mov	r0, r6
   15954:	mov	r1, r8
   15958:	str	ip, [sp, #16]
   1595c:	mov	r3, sl
   15960:	mov	r2, r9
   15964:	bl	1369c <__assert_fail@plt+0x2744>
   15968:	cmp	r8, r0
   1596c:	bhi	159d4 <__assert_fail@plt+0x4a7c>
   15970:	ldr	r3, [pc, #168]	; 15a20 <__assert_fail@plt+0x4ac8>
   15974:	add	r8, r0, #1
   15978:	cmp	r6, r3
   1597c:	str	r8, [r5, r4, lsl #3]
   15980:	beq	1598c <__assert_fail@plt+0x4a34>
   15984:	mov	r0, r6
   15988:	bl	132c8 <__assert_fail@plt+0x2370>
   1598c:	mov	r0, r8
   15990:	bl	17fe0 <__assert_fail@plt+0x7088>
   15994:	add	lr, sp, #40	; 0x28
   15998:	ldr	ip, [sp, #76]	; 0x4c
   1599c:	ldr	r4, [sp, #72]	; 0x48
   159a0:	ldr	r5, [sp, #28]
   159a4:	mov	r3, sl
   159a8:	mov	r2, r9
   159ac:	mov	r1, r8
   159b0:	str	r0, [fp, #4]
   159b4:	str	lr, [sp, #8]
   159b8:	ldr	lr, [sp, #32]
   159bc:	str	r5, [sp, #4]
   159c0:	str	ip, [sp, #16]
   159c4:	str	r4, [sp, #12]
   159c8:	str	lr, [sp]
   159cc:	mov	r6, r0
   159d0:	bl	1369c <__assert_fail@plt+0x2744>
   159d4:	ldr	r3, [sp, #24]
   159d8:	mov	r0, r6
   159dc:	str	r3, [r7]
   159e0:	add	sp, sp, #132	; 0x84
   159e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159e8:	mov	r3, #8
   159ec:	sub	r2, r4, r2
   159f0:	add	r1, sp, #80	; 0x50
   159f4:	str	r3, [sp]
   159f8:	add	r2, r2, #1
   159fc:	mvn	r3, #-2147483648	; 0x80000000
   15a00:	bl	181fc <__assert_fail@plt+0x72a4>
   15a04:	mov	r5, r0
   15a08:	ldm	r8, {r0, r1}
   15a0c:	str	r5, [r6]
   15a10:	stm	r5, {r0, r1}
   15a14:	b	158f4 <__assert_fail@plt+0x499c>
   15a18:	bl	10f40 <abort@plt>
   15a1c:	andeq	ip, r2, r0, lsl #2
   15a20:	andeq	ip, r2, r0, lsr #3
   15a24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a28:	sub	sp, sp, #124	; 0x7c
   15a2c:	mov	r4, r0
   15a30:	mov	r9, r1
   15a34:	add	r0, sp, #72	; 0x48
   15a38:	mov	r2, #48	; 0x30
   15a3c:	mov	r1, #0
   15a40:	bl	10ea4 <memset@plt>
   15a44:	cmp	r4, #10
   15a48:	beq	15bd4 <__assert_fail@plt+0x4c7c>
   15a4c:	add	lr, sp, #72	; 0x48
   15a50:	str	r4, [sp, #72]	; 0x48
   15a54:	ldm	lr!, {r0, r1, r2, r3}
   15a58:	add	ip, sp, #24
   15a5c:	ldr	r5, [pc, #372]	; 15bd8 <__assert_fail@plt+0x4c80>
   15a60:	stmia	ip!, {r0, r1, r2, r3}
   15a64:	ldm	lr!, {r0, r1, r2, r3}
   15a68:	stmia	ip!, {r0, r1, r2, r3}
   15a6c:	ldm	lr, {r0, r1, r2, r3}
   15a70:	stm	ip, {r0, r1, r2, r3}
   15a74:	bl	10e8c <__errno_location@plt>
   15a78:	ldr	r2, [r5, #4]
   15a7c:	ldr	r4, [r5]
   15a80:	cmp	r2, #0
   15a84:	mov	r7, r0
   15a88:	ldr	fp, [r0]
   15a8c:	bgt	15ae8 <__assert_fail@plt+0x4b90>
   15a90:	add	r6, r5, #8
   15a94:	cmp	r4, r6
   15a98:	str	r2, [sp, #72]	; 0x48
   15a9c:	beq	15ba4 <__assert_fail@plt+0x4c4c>
   15aa0:	mov	r3, #8
   15aa4:	mov	r0, r4
   15aa8:	str	r3, [sp]
   15aac:	rsb	r2, r2, #1
   15ab0:	add	r1, sp, #72	; 0x48
   15ab4:	mvn	r3, #-2147483648	; 0x80000000
   15ab8:	bl	181fc <__assert_fail@plt+0x72a4>
   15abc:	mov	r4, r0
   15ac0:	str	r0, [r5]
   15ac4:	ldr	r0, [r5, #4]
   15ac8:	ldr	r2, [sp, #72]	; 0x48
   15acc:	mov	r1, #0
   15ad0:	sub	r2, r2, r0
   15ad4:	add	r0, r4, r0, lsl #3
   15ad8:	lsl	r2, r2, #3
   15adc:	bl	10ea4 <memset@plt>
   15ae0:	ldr	r3, [sp, #72]	; 0x48
   15ae4:	str	r3, [r5, #4]
   15ae8:	ldr	r6, [sp, #28]
   15aec:	ldr	r8, [r4]
   15af0:	ldr	r5, [r4, #4]
   15af4:	ldr	r2, [sp, #64]	; 0x40
   15af8:	ldr	r3, [sp, #24]
   15afc:	ldr	ip, [sp, #68]	; 0x44
   15b00:	orr	r6, r6, #1
   15b04:	add	sl, sp, #32
   15b08:	str	r2, [sp, #12]
   15b0c:	str	r3, [sp]
   15b10:	str	r6, [sp, #4]
   15b14:	mov	r1, r8
   15b18:	mov	r0, r5
   15b1c:	str	ip, [sp, #16]
   15b20:	str	sl, [sp, #8]
   15b24:	mvn	r3, #0
   15b28:	mov	r2, r9
   15b2c:	bl	1369c <__assert_fail@plt+0x2744>
   15b30:	cmp	r8, r0
   15b34:	bhi	15b94 <__assert_fail@plt+0x4c3c>
   15b38:	ldr	r3, [pc, #156]	; 15bdc <__assert_fail@plt+0x4c84>
   15b3c:	add	r8, r0, #1
   15b40:	cmp	r5, r3
   15b44:	str	r8, [r4]
   15b48:	beq	15b54 <__assert_fail@plt+0x4bfc>
   15b4c:	mov	r0, r5
   15b50:	bl	132c8 <__assert_fail@plt+0x2370>
   15b54:	mov	r0, r8
   15b58:	bl	17fe0 <__assert_fail@plt+0x7088>
   15b5c:	ldr	lr, [sp, #68]	; 0x44
   15b60:	ldr	r3, [sp, #24]
   15b64:	ldr	ip, [sp, #64]	; 0x40
   15b68:	mov	r2, r9
   15b6c:	mov	r1, r8
   15b70:	str	r0, [r4, #4]
   15b74:	str	r3, [sp]
   15b78:	str	sl, [sp, #8]
   15b7c:	str	r6, [sp, #4]
   15b80:	str	lr, [sp, #16]
   15b84:	str	ip, [sp, #12]
   15b88:	mvn	r3, #0
   15b8c:	mov	r5, r0
   15b90:	bl	1369c <__assert_fail@plt+0x2744>
   15b94:	mov	r0, r5
   15b98:	str	fp, [r7]
   15b9c:	add	sp, sp, #124	; 0x7c
   15ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ba4:	mov	r3, #8
   15ba8:	add	r1, sp, #72	; 0x48
   15bac:	str	r3, [sp]
   15bb0:	rsb	r2, r2, #1
   15bb4:	mvn	r3, #-2147483648	; 0x80000000
   15bb8:	mov	r0, #0
   15bbc:	bl	181fc <__assert_fail@plt+0x72a4>
   15bc0:	mov	r4, r0
   15bc4:	ldm	r6, {r0, r1}
   15bc8:	str	r4, [r5]
   15bcc:	stm	r4, {r0, r1}
   15bd0:	b	15ac4 <__assert_fail@plt+0x4b6c>
   15bd4:	bl	10f40 <abort@plt>
   15bd8:	andeq	ip, r2, r0, lsl #2
   15bdc:	andeq	ip, r2, r0, lsr #3
   15be0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15be4:	sub	sp, sp, #132	; 0x84
   15be8:	mov	r4, r0
   15bec:	mov	r9, r1
   15bf0:	mov	sl, r2
   15bf4:	add	r0, sp, #80	; 0x50
   15bf8:	mov	r2, #48	; 0x30
   15bfc:	mov	r1, #0
   15c00:	bl	10ea4 <memset@plt>
   15c04:	cmp	r4, #10
   15c08:	beq	15d9c <__assert_fail@plt+0x4e44>
   15c0c:	add	lr, sp, #80	; 0x50
   15c10:	str	r4, [sp, #80]	; 0x50
   15c14:	ldm	lr!, {r0, r1, r2, r3}
   15c18:	add	ip, sp, #32
   15c1c:	ldr	r5, [pc, #380]	; 15da0 <__assert_fail@plt+0x4e48>
   15c20:	stmia	ip!, {r0, r1, r2, r3}
   15c24:	ldm	lr!, {r0, r1, r2, r3}
   15c28:	stmia	ip!, {r0, r1, r2, r3}
   15c2c:	ldm	lr, {r0, r1, r2, r3}
   15c30:	stm	ip, {r0, r1, r2, r3}
   15c34:	bl	10e8c <__errno_location@plt>
   15c38:	ldr	r2, [r5, #4]
   15c3c:	ldr	r4, [r5]
   15c40:	cmp	r2, #0
   15c44:	ldr	r3, [r0]
   15c48:	mov	r7, r0
   15c4c:	str	r3, [sp, #28]
   15c50:	bgt	15cac <__assert_fail@plt+0x4d54>
   15c54:	add	r6, r5, #8
   15c58:	cmp	r4, r6
   15c5c:	str	r2, [sp, #80]	; 0x50
   15c60:	beq	15d6c <__assert_fail@plt+0x4e14>
   15c64:	mov	r3, #8
   15c68:	mov	r0, r4
   15c6c:	str	r3, [sp]
   15c70:	rsb	r2, r2, #1
   15c74:	add	r1, sp, #80	; 0x50
   15c78:	mvn	r3, #-2147483648	; 0x80000000
   15c7c:	bl	181fc <__assert_fail@plt+0x72a4>
   15c80:	mov	r4, r0
   15c84:	str	r0, [r5]
   15c88:	ldr	r0, [r5, #4]
   15c8c:	ldr	r2, [sp, #80]	; 0x50
   15c90:	mov	r1, #0
   15c94:	sub	r2, r2, r0
   15c98:	add	r0, r4, r0, lsl #3
   15c9c:	lsl	r2, r2, #3
   15ca0:	bl	10ea4 <memset@plt>
   15ca4:	ldr	r3, [sp, #80]	; 0x50
   15ca8:	str	r3, [r5, #4]
   15cac:	ldr	r6, [sp, #36]	; 0x24
   15cb0:	ldr	r8, [r4]
   15cb4:	ldr	r5, [r4, #4]
   15cb8:	ldr	r2, [sp, #72]	; 0x48
   15cbc:	ldr	r3, [sp, #32]
   15cc0:	ldr	ip, [sp, #76]	; 0x4c
   15cc4:	orr	r6, r6, #1
   15cc8:	add	fp, sp, #40	; 0x28
   15ccc:	str	r2, [sp, #12]
   15cd0:	str	r3, [sp]
   15cd4:	str	r6, [sp, #4]
   15cd8:	mov	r1, r8
   15cdc:	mov	r0, r5
   15ce0:	str	ip, [sp, #16]
   15ce4:	str	fp, [sp, #8]
   15ce8:	mov	r3, sl
   15cec:	mov	r2, r9
   15cf0:	bl	1369c <__assert_fail@plt+0x2744>
   15cf4:	cmp	r8, r0
   15cf8:	bhi	15d58 <__assert_fail@plt+0x4e00>
   15cfc:	ldr	r3, [pc, #160]	; 15da4 <__assert_fail@plt+0x4e4c>
   15d00:	add	r8, r0, #1
   15d04:	cmp	r5, r3
   15d08:	str	r8, [r4]
   15d0c:	beq	15d18 <__assert_fail@plt+0x4dc0>
   15d10:	mov	r0, r5
   15d14:	bl	132c8 <__assert_fail@plt+0x2370>
   15d18:	mov	r0, r8
   15d1c:	bl	17fe0 <__assert_fail@plt+0x7088>
   15d20:	ldr	ip, [sp, #76]	; 0x4c
   15d24:	ldr	lr, [sp, #32]
   15d28:	mov	r3, sl
   15d2c:	mov	r2, r9
   15d30:	mov	r1, r8
   15d34:	str	r0, [r4, #4]
   15d38:	ldr	r4, [sp, #72]	; 0x48
   15d3c:	str	fp, [sp, #8]
   15d40:	str	r6, [sp, #4]
   15d44:	str	ip, [sp, #16]
   15d48:	str	r4, [sp, #12]
   15d4c:	str	lr, [sp]
   15d50:	mov	r5, r0
   15d54:	bl	1369c <__assert_fail@plt+0x2744>
   15d58:	ldr	r3, [sp, #28]
   15d5c:	mov	r0, r5
   15d60:	str	r3, [r7]
   15d64:	add	sp, sp, #132	; 0x84
   15d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d6c:	mov	r3, #8
   15d70:	add	r1, sp, #80	; 0x50
   15d74:	str	r3, [sp]
   15d78:	rsb	r2, r2, #1
   15d7c:	mvn	r3, #-2147483648	; 0x80000000
   15d80:	mov	r0, #0
   15d84:	bl	181fc <__assert_fail@plt+0x72a4>
   15d88:	mov	r4, r0
   15d8c:	ldm	r6, {r0, r1}
   15d90:	str	r4, [r5]
   15d94:	stm	r4, {r0, r1}
   15d98:	b	15c88 <__assert_fail@plt+0x4d30>
   15d9c:	bl	10f40 <abort@plt>
   15da0:	andeq	ip, r2, r0, lsl #2
   15da4:	andeq	ip, r2, r0, lsr #3
   15da8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dac:	mov	r4, r2
   15db0:	ldr	lr, [pc, #432]	; 15f68 <__assert_fail@plt+0x5010>
   15db4:	mov	sl, r0
   15db8:	mov	fp, r1
   15dbc:	ldm	lr!, {r0, r1, r2, r3}
   15dc0:	sub	sp, sp, #92	; 0x5c
   15dc4:	add	ip, sp, #40	; 0x28
   15dc8:	lsr	r7, r4, #5
   15dcc:	stmia	ip!, {r0, r1, r2, r3}
   15dd0:	add	r6, sp, #48	; 0x30
   15dd4:	ldm	lr!, {r0, r1, r2, r3}
   15dd8:	and	r4, r4, #31
   15ddc:	ldr	r5, [pc, #392]	; 15f6c <__assert_fail@plt+0x5014>
   15de0:	stmia	ip!, {r0, r1, r2, r3}
   15de4:	ldm	lr, {r0, r1, r2, r3}
   15de8:	stm	ip, {r0, r1, r2, r3}
   15dec:	ldr	r2, [r6, r7, lsl #2]
   15df0:	lsr	r3, r2, r4
   15df4:	eor	r3, r3, #1
   15df8:	and	r3, r3, #1
   15dfc:	eor	r4, r2, r3, lsl r4
   15e00:	str	r4, [r6, r7, lsl #2]
   15e04:	bl	10e8c <__errno_location@plt>
   15e08:	ldr	r2, [r5, #4]
   15e0c:	ldr	r4, [r5]
   15e10:	cmp	r2, #0
   15e14:	ldr	r3, [r0]
   15e18:	mov	r8, r0
   15e1c:	str	r3, [sp, #28]
   15e20:	bgt	15e7c <__assert_fail@plt+0x4f24>
   15e24:	add	r7, r5, #8
   15e28:	cmp	r4, r7
   15e2c:	str	r2, [sp, #36]	; 0x24
   15e30:	beq	15f38 <__assert_fail@plt+0x4fe0>
   15e34:	mov	r3, #8
   15e38:	mov	r0, r4
   15e3c:	str	r3, [sp]
   15e40:	rsb	r2, r2, #1
   15e44:	mvn	r3, #-2147483648	; 0x80000000
   15e48:	add	r1, sp, #36	; 0x24
   15e4c:	bl	181fc <__assert_fail@plt+0x72a4>
   15e50:	mov	r4, r0
   15e54:	str	r0, [r5]
   15e58:	ldr	r0, [r5, #4]
   15e5c:	ldr	r2, [sp, #36]	; 0x24
   15e60:	mov	r1, #0
   15e64:	sub	r2, r2, r0
   15e68:	add	r0, r4, r0, lsl #3
   15e6c:	lsl	r2, r2, #3
   15e70:	bl	10ea4 <memset@plt>
   15e74:	ldr	r3, [sp, #36]	; 0x24
   15e78:	str	r3, [r5, #4]
   15e7c:	ldr	r7, [sp, #44]	; 0x2c
   15e80:	ldr	r9, [r4]
   15e84:	ldr	r5, [r4, #4]
   15e88:	ldr	r2, [sp, #80]	; 0x50
   15e8c:	ldr	r3, [sp, #40]	; 0x28
   15e90:	ldr	ip, [sp, #84]	; 0x54
   15e94:	orr	r7, r7, #1
   15e98:	str	r2, [sp, #12]
   15e9c:	str	r3, [sp]
   15ea0:	str	r7, [sp, #4]
   15ea4:	str	r6, [sp, #8]
   15ea8:	mov	r1, r9
   15eac:	mov	r0, r5
   15eb0:	str	ip, [sp, #16]
   15eb4:	mov	r3, fp
   15eb8:	mov	r2, sl
   15ebc:	bl	1369c <__assert_fail@plt+0x2744>
   15ec0:	cmp	r9, r0
   15ec4:	bhi	15f24 <__assert_fail@plt+0x4fcc>
   15ec8:	ldr	r3, [pc, #160]	; 15f70 <__assert_fail@plt+0x5018>
   15ecc:	add	r9, r0, #1
   15ed0:	cmp	r5, r3
   15ed4:	str	r9, [r4]
   15ed8:	beq	15ee4 <__assert_fail@plt+0x4f8c>
   15edc:	mov	r0, r5
   15ee0:	bl	132c8 <__assert_fail@plt+0x2370>
   15ee4:	mov	r0, r9
   15ee8:	bl	17fe0 <__assert_fail@plt+0x7088>
   15eec:	ldr	ip, [sp, #84]	; 0x54
   15ef0:	ldr	lr, [sp, #40]	; 0x28
   15ef4:	mov	r3, fp
   15ef8:	mov	r2, sl
   15efc:	mov	r1, r9
   15f00:	str	r0, [r4, #4]
   15f04:	ldr	r4, [sp, #80]	; 0x50
   15f08:	str	r6, [sp, #8]
   15f0c:	str	r7, [sp, #4]
   15f10:	str	ip, [sp, #16]
   15f14:	str	r4, [sp, #12]
   15f18:	str	lr, [sp]
   15f1c:	mov	r5, r0
   15f20:	bl	1369c <__assert_fail@plt+0x2744>
   15f24:	ldr	r3, [sp, #28]
   15f28:	mov	r0, r5
   15f2c:	str	r3, [r8]
   15f30:	add	sp, sp, #92	; 0x5c
   15f34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f38:	mov	r3, #8
   15f3c:	str	r3, [sp]
   15f40:	add	r1, sp, #36	; 0x24
   15f44:	rsb	r2, r2, #1
   15f48:	mvn	r3, #-2147483648	; 0x80000000
   15f4c:	mov	r0, #0
   15f50:	bl	181fc <__assert_fail@plt+0x72a4>
   15f54:	mov	r4, r0
   15f58:	ldm	r7, {r0, r1}
   15f5c:	str	r4, [r5]
   15f60:	stm	r4, {r0, r1}
   15f64:	b	15e58 <__assert_fail@plt+0x4f00>
   15f68:	andeq	ip, r2, r0, ror r1
   15f6c:	andeq	ip, r2, r0, lsl #2
   15f70:	andeq	ip, r2, r0, lsr #3
   15f74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f78:	mov	r4, r1
   15f7c:	ldr	lr, [pc, #420]	; 16128 <__assert_fail@plt+0x51d0>
   15f80:	mov	r6, r0
   15f84:	sub	sp, sp, #84	; 0x54
   15f88:	ldm	lr!, {r0, r1, r2, r3}
   15f8c:	add	ip, sp, #32
   15f90:	lsr	r8, r4, #5
   15f94:	add	r5, sp, #40	; 0x28
   15f98:	stmia	ip!, {r0, r1, r2, r3}
   15f9c:	and	r4, r4, #31
   15fa0:	ldm	lr!, {r0, r1, r2, r3}
   15fa4:	ldr	r7, [pc, #384]	; 1612c <__assert_fail@plt+0x51d4>
   15fa8:	stmia	ip!, {r0, r1, r2, r3}
   15fac:	ldm	lr, {r0, r1, r2, r3}
   15fb0:	stm	ip, {r0, r1, r2, r3}
   15fb4:	ldr	r2, [r5, r8, lsl #2]
   15fb8:	lsr	r3, r2, r4
   15fbc:	eor	r3, r3, #1
   15fc0:	and	r3, r3, #1
   15fc4:	eor	r4, r2, r3, lsl r4
   15fc8:	str	r4, [r5, r8, lsl #2]
   15fcc:	bl	10e8c <__errno_location@plt>
   15fd0:	ldr	r2, [r7, #4]
   15fd4:	ldr	r4, [r7]
   15fd8:	cmp	r2, #0
   15fdc:	mov	r9, r0
   15fe0:	ldr	sl, [r0]
   15fe4:	bgt	16040 <__assert_fail@plt+0x50e8>
   15fe8:	add	r8, r7, #8
   15fec:	cmp	r4, r8
   15ff0:	str	r2, [sp, #28]
   15ff4:	beq	160f8 <__assert_fail@plt+0x51a0>
   15ff8:	mov	r3, #8
   15ffc:	mov	r0, r4
   16000:	str	r3, [sp]
   16004:	rsb	r2, r2, #1
   16008:	mvn	r3, #-2147483648	; 0x80000000
   1600c:	add	r1, sp, #28
   16010:	bl	181fc <__assert_fail@plt+0x72a4>
   16014:	mov	r4, r0
   16018:	str	r0, [r7]
   1601c:	ldr	r0, [r7, #4]
   16020:	ldr	r2, [sp, #28]
   16024:	mov	r1, #0
   16028:	sub	r2, r2, r0
   1602c:	add	r0, r4, r0, lsl #3
   16030:	lsl	r2, r2, #3
   16034:	bl	10ea4 <memset@plt>
   16038:	ldr	r3, [sp, #28]
   1603c:	str	r3, [r7, #4]
   16040:	ldr	r8, [sp, #36]	; 0x24
   16044:	ldr	fp, [r4]
   16048:	ldr	r7, [r4, #4]
   1604c:	ldr	r2, [sp, #72]	; 0x48
   16050:	ldr	r3, [sp, #32]
   16054:	ldr	ip, [sp, #76]	; 0x4c
   16058:	orr	r8, r8, #1
   1605c:	str	r2, [sp, #12]
   16060:	str	r3, [sp]
   16064:	str	r8, [sp, #4]
   16068:	str	r5, [sp, #8]
   1606c:	mov	r1, fp
   16070:	mov	r0, r7
   16074:	str	ip, [sp, #16]
   16078:	mvn	r3, #0
   1607c:	mov	r2, r6
   16080:	bl	1369c <__assert_fail@plt+0x2744>
   16084:	cmp	fp, r0
   16088:	bhi	160e8 <__assert_fail@plt+0x5190>
   1608c:	ldr	r3, [pc, #156]	; 16130 <__assert_fail@plt+0x51d8>
   16090:	add	fp, r0, #1
   16094:	cmp	r7, r3
   16098:	str	fp, [r4]
   1609c:	beq	160a8 <__assert_fail@plt+0x5150>
   160a0:	mov	r0, r7
   160a4:	bl	132c8 <__assert_fail@plt+0x2370>
   160a8:	mov	r0, fp
   160ac:	bl	17fe0 <__assert_fail@plt+0x7088>
   160b0:	ldr	lr, [sp, #76]	; 0x4c
   160b4:	ldr	r3, [sp, #32]
   160b8:	ldr	ip, [sp, #72]	; 0x48
   160bc:	mov	r2, r6
   160c0:	mov	r1, fp
   160c4:	str	r0, [r4, #4]
   160c8:	str	r3, [sp]
   160cc:	str	r5, [sp, #8]
   160d0:	str	r8, [sp, #4]
   160d4:	str	lr, [sp, #16]
   160d8:	str	ip, [sp, #12]
   160dc:	mvn	r3, #0
   160e0:	mov	r7, r0
   160e4:	bl	1369c <__assert_fail@plt+0x2744>
   160e8:	mov	r0, r7
   160ec:	str	sl, [r9]
   160f0:	add	sp, sp, #84	; 0x54
   160f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160f8:	mov	r3, #8
   160fc:	str	r3, [sp]
   16100:	add	r1, sp, #28
   16104:	rsb	r2, r2, #1
   16108:	mvn	r3, #-2147483648	; 0x80000000
   1610c:	mov	r0, #0
   16110:	bl	181fc <__assert_fail@plt+0x72a4>
   16114:	mov	r4, r0
   16118:	ldm	r8, {r0, r1}
   1611c:	str	r4, [r7]
   16120:	stm	r4, {r0, r1}
   16124:	b	1601c <__assert_fail@plt+0x50c4>
   16128:	andeq	ip, r2, r0, ror r1
   1612c:	andeq	ip, r2, r0, lsl #2
   16130:	andeq	ip, r2, r0, lsr #3
   16134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16138:	mov	r6, r0
   1613c:	ldr	lr, [pc, #404]	; 162d8 <__assert_fail@plt+0x5380>
   16140:	sub	sp, sp, #84	; 0x54
   16144:	add	ip, sp, #32
   16148:	ldm	lr!, {r0, r1, r2, r3}
   1614c:	ldr	r5, [pc, #392]	; 162dc <__assert_fail@plt+0x5384>
   16150:	stmia	ip!, {r0, r1, r2, r3}
   16154:	ldm	lr!, {r0, r1, r2, r3}
   16158:	ldr	r4, [sp, #44]	; 0x2c
   1615c:	stmia	ip!, {r0, r1, r2, r3}
   16160:	ldm	lr, {r0, r1, r2, r3}
   16164:	mvn	lr, r4
   16168:	and	lr, lr, #67108864	; 0x4000000
   1616c:	eor	lr, lr, r4
   16170:	stm	ip, {r0, r1, r2, r3}
   16174:	str	lr, [sp, #44]	; 0x2c
   16178:	bl	10e8c <__errno_location@plt>
   1617c:	ldr	r2, [r5, #4]
   16180:	ldr	r4, [r5]
   16184:	cmp	r2, #0
   16188:	mov	r8, r0
   1618c:	ldr	sl, [r0]
   16190:	bgt	161ec <__assert_fail@plt+0x5294>
   16194:	add	r7, r5, #8
   16198:	cmp	r4, r7
   1619c:	str	r2, [sp, #28]
   161a0:	beq	162a8 <__assert_fail@plt+0x5350>
   161a4:	mov	r3, #8
   161a8:	mov	r0, r4
   161ac:	str	r3, [sp]
   161b0:	rsb	r2, r2, #1
   161b4:	mvn	r3, #-2147483648	; 0x80000000
   161b8:	add	r1, sp, #28
   161bc:	bl	181fc <__assert_fail@plt+0x72a4>
   161c0:	mov	r4, r0
   161c4:	str	r0, [r5]
   161c8:	ldr	r0, [r5, #4]
   161cc:	ldr	r2, [sp, #28]
   161d0:	mov	r1, #0
   161d4:	sub	r2, r2, r0
   161d8:	add	r0, r4, r0, lsl #3
   161dc:	lsl	r2, r2, #3
   161e0:	bl	10ea4 <memset@plt>
   161e4:	ldr	r3, [sp, #28]
   161e8:	str	r3, [r5, #4]
   161ec:	ldr	r7, [sp, #36]	; 0x24
   161f0:	ldr	r9, [r4]
   161f4:	ldr	r5, [r4, #4]
   161f8:	ldr	r2, [sp, #72]	; 0x48
   161fc:	ldr	r3, [sp, #32]
   16200:	ldr	ip, [sp, #76]	; 0x4c
   16204:	orr	r7, r7, #1
   16208:	add	fp, sp, #40	; 0x28
   1620c:	str	r2, [sp, #12]
   16210:	str	r3, [sp]
   16214:	str	r7, [sp, #4]
   16218:	mov	r1, r9
   1621c:	mov	r0, r5
   16220:	str	ip, [sp, #16]
   16224:	str	fp, [sp, #8]
   16228:	mvn	r3, #0
   1622c:	mov	r2, r6
   16230:	bl	1369c <__assert_fail@plt+0x2744>
   16234:	cmp	r9, r0
   16238:	bhi	16298 <__assert_fail@plt+0x5340>
   1623c:	ldr	r3, [pc, #156]	; 162e0 <__assert_fail@plt+0x5388>
   16240:	add	r9, r0, #1
   16244:	cmp	r5, r3
   16248:	str	r9, [r4]
   1624c:	beq	16258 <__assert_fail@plt+0x5300>
   16250:	mov	r0, r5
   16254:	bl	132c8 <__assert_fail@plt+0x2370>
   16258:	mov	r0, r9
   1625c:	bl	17fe0 <__assert_fail@plt+0x7088>
   16260:	ldr	lr, [sp, #76]	; 0x4c
   16264:	ldr	r3, [sp, #32]
   16268:	ldr	ip, [sp, #72]	; 0x48
   1626c:	mov	r2, r6
   16270:	mov	r1, r9
   16274:	str	r0, [r4, #4]
   16278:	str	r3, [sp]
   1627c:	str	fp, [sp, #8]
   16280:	str	r7, [sp, #4]
   16284:	str	lr, [sp, #16]
   16288:	str	ip, [sp, #12]
   1628c:	mvn	r3, #0
   16290:	mov	r5, r0
   16294:	bl	1369c <__assert_fail@plt+0x2744>
   16298:	mov	r0, r5
   1629c:	str	sl, [r8]
   162a0:	add	sp, sp, #84	; 0x54
   162a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162a8:	mov	r3, #8
   162ac:	str	r3, [sp]
   162b0:	add	r1, sp, #28
   162b4:	rsb	r2, r2, #1
   162b8:	mvn	r3, #-2147483648	; 0x80000000
   162bc:	mov	r0, #0
   162c0:	bl	181fc <__assert_fail@plt+0x72a4>
   162c4:	mov	r4, r0
   162c8:	ldm	r7, {r0, r1}
   162cc:	str	r4, [r5]
   162d0:	stm	r4, {r0, r1}
   162d4:	b	161c8 <__assert_fail@plt+0x5270>
   162d8:	andeq	ip, r2, r0, ror r1
   162dc:	andeq	ip, r2, r0, lsl #2
   162e0:	andeq	ip, r2, r0, lsr #3
   162e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162e8:	mov	r9, r0
   162ec:	ldr	lr, [pc, #416]	; 16494 <__assert_fail@plt+0x553c>
   162f0:	mov	sl, r1
   162f4:	sub	sp, sp, #92	; 0x5c
   162f8:	ldm	lr!, {r0, r1, r2, r3}
   162fc:	add	ip, sp, #40	; 0x28
   16300:	ldr	r5, [pc, #400]	; 16498 <__assert_fail@plt+0x5540>
   16304:	stmia	ip!, {r0, r1, r2, r3}
   16308:	ldm	lr!, {r0, r1, r2, r3}
   1630c:	ldr	r4, [sp, #52]	; 0x34
   16310:	stmia	ip!, {r0, r1, r2, r3}
   16314:	ldm	lr, {r0, r1, r2, r3}
   16318:	mvn	lr, r4
   1631c:	and	lr, lr, #67108864	; 0x4000000
   16320:	eor	lr, lr, r4
   16324:	stm	ip, {r0, r1, r2, r3}
   16328:	str	lr, [sp, #52]	; 0x34
   1632c:	bl	10e8c <__errno_location@plt>
   16330:	ldr	r2, [r5, #4]
   16334:	ldr	r4, [r5]
   16338:	cmp	r2, #0
   1633c:	ldr	r3, [r0]
   16340:	mov	r7, r0
   16344:	str	r3, [sp, #28]
   16348:	bgt	163a4 <__assert_fail@plt+0x544c>
   1634c:	add	r6, r5, #8
   16350:	cmp	r4, r6
   16354:	str	r2, [sp, #36]	; 0x24
   16358:	beq	16464 <__assert_fail@plt+0x550c>
   1635c:	mov	r3, #8
   16360:	mov	r0, r4
   16364:	str	r3, [sp]
   16368:	rsb	r2, r2, #1
   1636c:	mvn	r3, #-2147483648	; 0x80000000
   16370:	add	r1, sp, #36	; 0x24
   16374:	bl	181fc <__assert_fail@plt+0x72a4>
   16378:	mov	r4, r0
   1637c:	str	r0, [r5]
   16380:	ldr	r0, [r5, #4]
   16384:	ldr	r2, [sp, #36]	; 0x24
   16388:	mov	r1, #0
   1638c:	sub	r2, r2, r0
   16390:	add	r0, r4, r0, lsl #3
   16394:	lsl	r2, r2, #3
   16398:	bl	10ea4 <memset@plt>
   1639c:	ldr	r3, [sp, #36]	; 0x24
   163a0:	str	r3, [r5, #4]
   163a4:	ldr	r6, [sp, #44]	; 0x2c
   163a8:	ldr	r8, [r4]
   163ac:	ldr	r5, [r4, #4]
   163b0:	ldr	r2, [sp, #80]	; 0x50
   163b4:	ldr	r3, [sp, #40]	; 0x28
   163b8:	ldr	ip, [sp, #84]	; 0x54
   163bc:	orr	r6, r6, #1
   163c0:	add	fp, sp, #48	; 0x30
   163c4:	str	r2, [sp, #12]
   163c8:	str	r3, [sp]
   163cc:	str	r6, [sp, #4]
   163d0:	mov	r1, r8
   163d4:	mov	r0, r5
   163d8:	str	ip, [sp, #16]
   163dc:	str	fp, [sp, #8]
   163e0:	mov	r3, sl
   163e4:	mov	r2, r9
   163e8:	bl	1369c <__assert_fail@plt+0x2744>
   163ec:	cmp	r8, r0
   163f0:	bhi	16450 <__assert_fail@plt+0x54f8>
   163f4:	ldr	r3, [pc, #160]	; 1649c <__assert_fail@plt+0x5544>
   163f8:	add	r8, r0, #1
   163fc:	cmp	r5, r3
   16400:	str	r8, [r4]
   16404:	beq	16410 <__assert_fail@plt+0x54b8>
   16408:	mov	r0, r5
   1640c:	bl	132c8 <__assert_fail@plt+0x2370>
   16410:	mov	r0, r8
   16414:	bl	17fe0 <__assert_fail@plt+0x7088>
   16418:	ldr	ip, [sp, #84]	; 0x54
   1641c:	ldr	lr, [sp, #40]	; 0x28
   16420:	mov	r3, sl
   16424:	mov	r2, r9
   16428:	mov	r1, r8
   1642c:	str	r0, [r4, #4]
   16430:	ldr	r4, [sp, #80]	; 0x50
   16434:	str	fp, [sp, #8]
   16438:	str	r6, [sp, #4]
   1643c:	str	ip, [sp, #16]
   16440:	str	r4, [sp, #12]
   16444:	str	lr, [sp]
   16448:	mov	r5, r0
   1644c:	bl	1369c <__assert_fail@plt+0x2744>
   16450:	ldr	r3, [sp, #28]
   16454:	mov	r0, r5
   16458:	str	r3, [r7]
   1645c:	add	sp, sp, #92	; 0x5c
   16460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16464:	mov	r3, #8
   16468:	str	r3, [sp]
   1646c:	add	r1, sp, #36	; 0x24
   16470:	rsb	r2, r2, #1
   16474:	mvn	r3, #-2147483648	; 0x80000000
   16478:	mov	r0, #0
   1647c:	bl	181fc <__assert_fail@plt+0x72a4>
   16480:	mov	r4, r0
   16484:	ldm	r6, {r0, r1}
   16488:	str	r4, [r5]
   1648c:	stm	r4, {r0, r1}
   16490:	b	16380 <__assert_fail@plt+0x5428>
   16494:	andeq	ip, r2, r0, ror r1
   16498:	andeq	ip, r2, r0, lsl #2
   1649c:	andeq	ip, r2, r0, lsr #3
   164a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164a4:	sub	sp, sp, #180	; 0xb4
   164a8:	mov	r6, r1
   164ac:	mov	r4, r0
   164b0:	mov	r9, r2
   164b4:	add	r0, sp, #80	; 0x50
   164b8:	mov	r2, #48	; 0x30
   164bc:	mov	r1, #0
   164c0:	bl	10ea4 <memset@plt>
   164c4:	cmp	r6, #10
   164c8:	beq	166a8 <__assert_fail@plt+0x5750>
   164cc:	add	r5, sp, #80	; 0x50
   164d0:	str	r6, [sp, #80]	; 0x50
   164d4:	ldm	r5!, {r0, r1, r2, r3}
   164d8:	add	ip, sp, #128	; 0x80
   164dc:	mov	r7, ip
   164e0:	add	lr, sp, #32
   164e4:	stmia	ip!, {r0, r1, r2, r3}
   164e8:	mov	r8, #67108864	; 0x4000000
   164ec:	ldm	r5!, {r0, r1, r2, r3}
   164f0:	ldr	r6, [pc, #436]	; 166ac <__assert_fail@plt+0x5754>
   164f4:	stmia	ip!, {r0, r1, r2, r3}
   164f8:	ldm	r5, {r0, r1, r2, r3}
   164fc:	stm	ip, {r0, r1, r2, r3}
   16500:	ldm	r7!, {r0, r1, r2, r3}
   16504:	stmia	lr!, {r0, r1, r2, r3}
   16508:	ldm	r7!, {r0, r1, r2, r3}
   1650c:	str	r8, [sp, #44]	; 0x2c
   16510:	stmia	lr!, {r0, r1, r2, r3}
   16514:	ldm	ip, {r0, r1, r2, r3}
   16518:	stm	lr, {r0, r1, r2, r3}
   1651c:	bl	10e8c <__errno_location@plt>
   16520:	cmn	r4, #-2147483647	; 0x80000001
   16524:	ldr	r5, [r6]
   16528:	mov	r7, r0
   1652c:	movne	r0, #0
   16530:	moveq	r0, #1
   16534:	ldr	r3, [r7]
   16538:	orrs	r0, r0, r4, lsr #31
   1653c:	str	r3, [sp, #24]
   16540:	bne	166a8 <__assert_fail@plt+0x5750>
   16544:	ldr	r2, [r6, #4]
   16548:	cmp	r4, r2
   1654c:	blt	165ac <__assert_fail@plt+0x5654>
   16550:	add	r8, r6, #8
   16554:	cmp	r5, r8
   16558:	str	r2, [sp, #80]	; 0x50
   1655c:	beq	16678 <__assert_fail@plt+0x5720>
   16560:	mov	r3, #8
   16564:	sub	r2, r4, r2
   16568:	mov	r0, r5
   1656c:	str	r3, [sp]
   16570:	add	r2, r2, #1
   16574:	add	r1, sp, #80	; 0x50
   16578:	mvn	r3, #-2147483648	; 0x80000000
   1657c:	bl	181fc <__assert_fail@plt+0x72a4>
   16580:	mov	r5, r0
   16584:	str	r0, [r6]
   16588:	ldr	r0, [r6, #4]
   1658c:	ldr	r2, [sp, #80]	; 0x50
   16590:	mov	r1, #0
   16594:	sub	r2, r2, r0
   16598:	add	r0, r5, r0, lsl #3
   1659c:	lsl	r2, r2, #3
   165a0:	bl	10ea4 <memset@plt>
   165a4:	ldr	r3, [sp, #80]	; 0x50
   165a8:	str	r3, [r6, #4]
   165ac:	add	fp, r5, r4, lsl #3
   165b0:	ldr	r1, [sp, #36]	; 0x24
   165b4:	ldr	r8, [r5, r4, lsl #3]
   165b8:	ldr	r6, [fp, #4]
   165bc:	ldr	r2, [sp, #72]	; 0x48
   165c0:	ldr	r3, [sp, #32]
   165c4:	ldr	ip, [sp, #76]	; 0x4c
   165c8:	orr	r1, r1, #1
   165cc:	add	sl, sp, #40	; 0x28
   165d0:	str	r1, [sp, #28]
   165d4:	str	r1, [sp, #4]
   165d8:	str	r2, [sp, #12]
   165dc:	str	r3, [sp]
   165e0:	mov	r0, r6
   165e4:	mov	r1, r8
   165e8:	str	ip, [sp, #16]
   165ec:	str	sl, [sp, #8]
   165f0:	mvn	r3, #0
   165f4:	mov	r2, r9
   165f8:	bl	1369c <__assert_fail@plt+0x2744>
   165fc:	cmp	r8, r0
   16600:	bhi	16664 <__assert_fail@plt+0x570c>
   16604:	ldr	r3, [pc, #164]	; 166b0 <__assert_fail@plt+0x5758>
   16608:	add	r8, r0, #1
   1660c:	cmp	r6, r3
   16610:	str	r8, [r5, r4, lsl #3]
   16614:	beq	16620 <__assert_fail@plt+0x56c8>
   16618:	mov	r0, r6
   1661c:	bl	132c8 <__assert_fail@plt+0x2370>
   16620:	mov	r0, r8
   16624:	bl	17fe0 <__assert_fail@plt+0x7088>
   16628:	ldr	lr, [sp, #76]	; 0x4c
   1662c:	ldr	r3, [sp, #32]
   16630:	ldr	ip, [sp, #72]	; 0x48
   16634:	ldr	r4, [sp, #28]
   16638:	mov	r2, r9
   1663c:	mov	r1, r8
   16640:	str	r0, [fp, #4]
   16644:	str	r3, [sp]
   16648:	str	sl, [sp, #8]
   1664c:	str	r4, [sp, #4]
   16650:	str	lr, [sp, #16]
   16654:	str	ip, [sp, #12]
   16658:	mvn	r3, #0
   1665c:	mov	r6, r0
   16660:	bl	1369c <__assert_fail@plt+0x2744>
   16664:	ldr	r3, [sp, #24]
   16668:	mov	r0, r6
   1666c:	str	r3, [r7]
   16670:	add	sp, sp, #180	; 0xb4
   16674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16678:	mov	r3, #8
   1667c:	sub	r2, r4, r2
   16680:	add	r1, sp, #80	; 0x50
   16684:	str	r3, [sp]
   16688:	add	r2, r2, #1
   1668c:	mvn	r3, #-2147483648	; 0x80000000
   16690:	bl	181fc <__assert_fail@plt+0x72a4>
   16694:	mov	r5, r0
   16698:	ldm	r8, {r0, r1}
   1669c:	str	r5, [r6]
   166a0:	stm	r5, {r0, r1}
   166a4:	b	16588 <__assert_fail@plt+0x5630>
   166a8:	bl	10f40 <abort@plt>
   166ac:	andeq	ip, r2, r0, lsl #2
   166b0:	andeq	ip, r2, r0, lsr #3
   166b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166b8:	mov	r7, r1
   166bc:	ldr	lr, [pc, #492]	; 168b0 <__assert_fail@plt+0x5958>
   166c0:	mov	r8, r2
   166c4:	mov	r4, r0
   166c8:	mov	fp, r3
   166cc:	ldm	lr!, {r0, r1, r2, r3}
   166d0:	sub	sp, sp, #100	; 0x64
   166d4:	add	ip, sp, #48	; 0x30
   166d8:	mov	sl, #10
   166dc:	stmia	ip!, {r0, r1, r2, r3}
   166e0:	cmp	r8, #0
   166e4:	cmpne	r7, #0
   166e8:	ldm	lr!, {r0, r1, r2, r3}
   166ec:	str	sl, [sp, #48]	; 0x30
   166f0:	stmia	ip!, {r0, r1, r2, r3}
   166f4:	ldm	lr, {r0, r1, r2, r3}
   166f8:	stm	ip, {r0, r1, r2, r3}
   166fc:	beq	168ac <__assert_fail@plt+0x5954>
   16700:	str	r7, [sp, #88]	; 0x58
   16704:	str	r8, [sp, #92]	; 0x5c
   16708:	bl	10e8c <__errno_location@plt>
   1670c:	ldr	r6, [pc, #416]	; 168b4 <__assert_fail@plt+0x595c>
   16710:	cmn	r4, #-2147483647	; 0x80000001
   16714:	ldr	r5, [r6]
   16718:	mov	r9, r0
   1671c:	movne	r0, #0
   16720:	moveq	r0, #1
   16724:	ldr	r3, [r9]
   16728:	orrs	r0, r0, r4, lsr #31
   1672c:	str	r3, [sp, #28]
   16730:	bne	168ac <__assert_fail@plt+0x5954>
   16734:	ldr	r2, [r6, #4]
   16738:	cmp	r4, r2
   1673c:	movlt	r3, sl
   16740:	blt	167ac <__assert_fail@plt+0x5854>
   16744:	add	r7, r6, #8
   16748:	cmp	r5, r7
   1674c:	str	r2, [sp, #44]	; 0x2c
   16750:	beq	1687c <__assert_fail@plt+0x5924>
   16754:	mov	r3, #8
   16758:	sub	r2, r4, r2
   1675c:	mov	r0, r5
   16760:	str	r3, [sp]
   16764:	add	r2, r2, #1
   16768:	mvn	r3, #-2147483648	; 0x80000000
   1676c:	add	r1, sp, #44	; 0x2c
   16770:	bl	181fc <__assert_fail@plt+0x72a4>
   16774:	mov	r5, r0
   16778:	str	r0, [r6]
   1677c:	ldr	r0, [r6, #4]
   16780:	ldr	r2, [sp, #44]	; 0x2c
   16784:	mov	r1, #0
   16788:	sub	r2, r2, r0
   1678c:	add	r0, r5, r0, lsl #3
   16790:	lsl	r2, r2, #3
   16794:	bl	10ea4 <memset@plt>
   16798:	ldr	r3, [sp, #48]	; 0x30
   1679c:	ldr	r7, [sp, #88]	; 0x58
   167a0:	ldr	r8, [sp, #92]	; 0x5c
   167a4:	ldr	r2, [sp, #44]	; 0x2c
   167a8:	str	r2, [r6, #4]
   167ac:	add	r2, r5, r4, lsl #3
   167b0:	mov	r1, r2
   167b4:	str	r2, [sp, #32]
   167b8:	ldr	r2, [sp, #52]	; 0x34
   167bc:	ldr	r6, [r1, #4]
   167c0:	ldr	sl, [r5, r4, lsl #3]
   167c4:	orr	r2, r2, #1
   167c8:	str	r3, [sp]
   167cc:	add	r3, sp, #56	; 0x38
   167d0:	str	r2, [sp, #36]	; 0x24
   167d4:	str	r2, [sp, #4]
   167d8:	str	r3, [sp, #8]
   167dc:	mov	r0, r6
   167e0:	str	r8, [sp, #16]
   167e4:	str	r7, [sp, #12]
   167e8:	mov	r1, sl
   167ec:	mvn	r3, #0
   167f0:	mov	r2, fp
   167f4:	bl	1369c <__assert_fail@plt+0x2744>
   167f8:	cmp	sl, r0
   167fc:	bhi	16868 <__assert_fail@plt+0x5910>
   16800:	ldr	r3, [pc, #176]	; 168b8 <__assert_fail@plt+0x5960>
   16804:	add	r7, r0, #1
   16808:	cmp	r6, r3
   1680c:	str	r7, [r5, r4, lsl #3]
   16810:	beq	1681c <__assert_fail@plt+0x58c4>
   16814:	mov	r0, r6
   16818:	bl	132c8 <__assert_fail@plt+0x2370>
   1681c:	mov	r0, r7
   16820:	bl	17fe0 <__assert_fail@plt+0x7088>
   16824:	ldr	r3, [sp, #32]
   16828:	ldr	lr, [sp, #92]	; 0x5c
   1682c:	ldr	ip, [sp, #88]	; 0x58
   16830:	ldr	r4, [sp, #36]	; 0x24
   16834:	mov	r2, fp
   16838:	mov	r1, r7
   1683c:	str	r0, [r3, #4]
   16840:	add	r3, sp, #56	; 0x38
   16844:	str	r3, [sp, #8]
   16848:	ldr	r3, [sp, #48]	; 0x30
   1684c:	str	r4, [sp, #4]
   16850:	str	r3, [sp]
   16854:	str	lr, [sp, #16]
   16858:	str	ip, [sp, #12]
   1685c:	mvn	r3, #0
   16860:	mov	r6, r0
   16864:	bl	1369c <__assert_fail@plt+0x2744>
   16868:	ldr	r3, [sp, #28]
   1686c:	mov	r0, r6
   16870:	str	r3, [r9]
   16874:	add	sp, sp, #100	; 0x64
   16878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1687c:	mov	r3, #8
   16880:	sub	r2, r4, r2
   16884:	str	r3, [sp]
   16888:	add	r1, sp, #44	; 0x2c
   1688c:	add	r2, r2, #1
   16890:	mvn	r3, #-2147483648	; 0x80000000
   16894:	bl	181fc <__assert_fail@plt+0x72a4>
   16898:	mov	r5, r0
   1689c:	ldm	r7, {r0, r1}
   168a0:	str	r5, [r6]
   168a4:	stm	r5, {r0, r1}
   168a8:	b	1677c <__assert_fail@plt+0x5824>
   168ac:	bl	10f40 <abort@plt>
   168b0:	andeq	ip, r2, r0, ror r1
   168b4:	andeq	ip, r2, r0, lsl #2
   168b8:	andeq	ip, r2, r0, lsr #3
   168bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168c0:	mov	r7, r1
   168c4:	ldr	lr, [pc, #492]	; 16ab8 <__assert_fail@plt+0x5b60>
   168c8:	mov	r8, r2
   168cc:	mov	r4, r0
   168d0:	mov	fp, r3
   168d4:	ldm	lr!, {r0, r1, r2, r3}
   168d8:	sub	sp, sp, #100	; 0x64
   168dc:	add	ip, sp, #48	; 0x30
   168e0:	mov	sl, #10
   168e4:	stmia	ip!, {r0, r1, r2, r3}
   168e8:	cmp	r8, #0
   168ec:	cmpne	r7, #0
   168f0:	ldm	lr!, {r0, r1, r2, r3}
   168f4:	str	sl, [sp, #48]	; 0x30
   168f8:	stmia	ip!, {r0, r1, r2, r3}
   168fc:	ldm	lr, {r0, r1, r2, r3}
   16900:	stm	ip, {r0, r1, r2, r3}
   16904:	beq	16ab4 <__assert_fail@plt+0x5b5c>
   16908:	str	r7, [sp, #88]	; 0x58
   1690c:	str	r8, [sp, #92]	; 0x5c
   16910:	bl	10e8c <__errno_location@plt>
   16914:	ldr	r6, [pc, #416]	; 16abc <__assert_fail@plt+0x5b64>
   16918:	cmn	r4, #-2147483647	; 0x80000001
   1691c:	ldr	r5, [r6]
   16920:	mov	r9, r0
   16924:	movne	r0, #0
   16928:	moveq	r0, #1
   1692c:	ldr	r3, [r9]
   16930:	orrs	r0, r0, r4, lsr #31
   16934:	str	r3, [sp, #28]
   16938:	bne	16ab4 <__assert_fail@plt+0x5b5c>
   1693c:	ldr	r2, [r6, #4]
   16940:	cmp	r4, r2
   16944:	movlt	r3, sl
   16948:	blt	169b4 <__assert_fail@plt+0x5a5c>
   1694c:	add	r7, r6, #8
   16950:	cmp	r5, r7
   16954:	str	r2, [sp, #44]	; 0x2c
   16958:	beq	16a84 <__assert_fail@plt+0x5b2c>
   1695c:	mov	r3, #8
   16960:	sub	r2, r4, r2
   16964:	mov	r0, r5
   16968:	str	r3, [sp]
   1696c:	add	r2, r2, #1
   16970:	mvn	r3, #-2147483648	; 0x80000000
   16974:	add	r1, sp, #44	; 0x2c
   16978:	bl	181fc <__assert_fail@plt+0x72a4>
   1697c:	mov	r5, r0
   16980:	str	r0, [r6]
   16984:	ldr	r0, [r6, #4]
   16988:	ldr	r2, [sp, #44]	; 0x2c
   1698c:	mov	r1, #0
   16990:	sub	r2, r2, r0
   16994:	add	r0, r5, r0, lsl #3
   16998:	lsl	r2, r2, #3
   1699c:	bl	10ea4 <memset@plt>
   169a0:	ldr	r3, [sp, #48]	; 0x30
   169a4:	ldr	r7, [sp, #88]	; 0x58
   169a8:	ldr	r8, [sp, #92]	; 0x5c
   169ac:	ldr	r2, [sp, #44]	; 0x2c
   169b0:	str	r2, [r6, #4]
   169b4:	add	r2, r5, r4, lsl #3
   169b8:	mov	r1, r2
   169bc:	str	r2, [sp, #32]
   169c0:	ldr	r2, [sp, #52]	; 0x34
   169c4:	ldr	r6, [r1, #4]
   169c8:	ldr	sl, [r5, r4, lsl #3]
   169cc:	orr	r2, r2, #1
   169d0:	str	r3, [sp]
   169d4:	add	r3, sp, #56	; 0x38
   169d8:	str	r2, [sp, #36]	; 0x24
   169dc:	str	r2, [sp, #4]
   169e0:	str	r3, [sp, #8]
   169e4:	mov	r0, r6
   169e8:	str	r8, [sp, #16]
   169ec:	str	r7, [sp, #12]
   169f0:	mov	r1, sl
   169f4:	ldr	r3, [sp, #136]	; 0x88
   169f8:	mov	r2, fp
   169fc:	bl	1369c <__assert_fail@plt+0x2744>
   16a00:	cmp	sl, r0
   16a04:	bhi	16a70 <__assert_fail@plt+0x5b18>
   16a08:	ldr	r3, [pc, #176]	; 16ac0 <__assert_fail@plt+0x5b68>
   16a0c:	add	r7, r0, #1
   16a10:	cmp	r6, r3
   16a14:	str	r7, [r5, r4, lsl #3]
   16a18:	beq	16a24 <__assert_fail@plt+0x5acc>
   16a1c:	mov	r0, r6
   16a20:	bl	132c8 <__assert_fail@plt+0x2370>
   16a24:	mov	r0, r7
   16a28:	bl	17fe0 <__assert_fail@plt+0x7088>
   16a2c:	ldr	r3, [sp, #32]
   16a30:	ldr	lr, [sp, #92]	; 0x5c
   16a34:	ldr	ip, [sp, #88]	; 0x58
   16a38:	ldr	r4, [sp, #36]	; 0x24
   16a3c:	mov	r2, fp
   16a40:	mov	r1, r7
   16a44:	str	r0, [r3, #4]
   16a48:	add	r3, sp, #56	; 0x38
   16a4c:	str	r3, [sp, #8]
   16a50:	ldr	r3, [sp, #48]	; 0x30
   16a54:	str	r4, [sp, #4]
   16a58:	str	r3, [sp]
   16a5c:	str	lr, [sp, #16]
   16a60:	str	ip, [sp, #12]
   16a64:	ldr	r3, [sp, #136]	; 0x88
   16a68:	mov	r6, r0
   16a6c:	bl	1369c <__assert_fail@plt+0x2744>
   16a70:	ldr	r3, [sp, #28]
   16a74:	mov	r0, r6
   16a78:	str	r3, [r9]
   16a7c:	add	sp, sp, #100	; 0x64
   16a80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a84:	mov	r3, #8
   16a88:	sub	r2, r4, r2
   16a8c:	str	r3, [sp]
   16a90:	add	r1, sp, #44	; 0x2c
   16a94:	add	r2, r2, #1
   16a98:	mvn	r3, #-2147483648	; 0x80000000
   16a9c:	bl	181fc <__assert_fail@plt+0x72a4>
   16aa0:	mov	r5, r0
   16aa4:	ldm	r7, {r0, r1}
   16aa8:	str	r5, [r6]
   16aac:	stm	r5, {r0, r1}
   16ab0:	b	16984 <__assert_fail@plt+0x5a2c>
   16ab4:	bl	10f40 <abort@plt>
   16ab8:	andeq	ip, r2, r0, ror r1
   16abc:	andeq	ip, r2, r0, lsl #2
   16ac0:	andeq	ip, r2, r0, lsr #3
   16ac4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ac8:	mov	r5, r0
   16acc:	ldr	lr, [pc, #452]	; 16c98 <__assert_fail@plt+0x5d40>
   16ad0:	mov	r6, r1
   16ad4:	mov	sl, r2
   16ad8:	ldm	lr!, {r0, r1, r2, r3}
   16adc:	sub	sp, sp, #92	; 0x5c
   16ae0:	add	ip, sp, #40	; 0x28
   16ae4:	cmp	r6, #0
   16ae8:	cmpne	r5, #0
   16aec:	stmia	ip!, {r0, r1, r2, r3}
   16af0:	mov	r9, #10
   16af4:	ldm	lr!, {r0, r1, r2, r3}
   16af8:	moveq	fp, #1
   16afc:	movne	fp, #0
   16b00:	str	r9, [sp, #40]	; 0x28
   16b04:	stmia	ip!, {r0, r1, r2, r3}
   16b08:	ldm	lr, {r0, r1, r2, r3}
   16b0c:	stm	ip, {r0, r1, r2, r3}
   16b10:	beq	16c94 <__assert_fail@plt+0x5d3c>
   16b14:	str	r5, [sp, #80]	; 0x50
   16b18:	str	r6, [sp, #84]	; 0x54
   16b1c:	bl	10e8c <__errno_location@plt>
   16b20:	ldr	r7, [pc, #372]	; 16c9c <__assert_fail@plt+0x5d44>
   16b24:	ldr	r2, [r7, #4]
   16b28:	ldr	r4, [r7]
   16b2c:	cmp	r2, #0
   16b30:	ldr	r3, [r0]
   16b34:	mov	r8, r0
   16b38:	str	r3, [sp, #24]
   16b3c:	movgt	r3, r9
   16b40:	bgt	16ba8 <__assert_fail@plt+0x5c50>
   16b44:	add	r5, r7, #8
   16b48:	cmp	r4, r5
   16b4c:	str	r2, [sp, #36]	; 0x24
   16b50:	beq	16c64 <__assert_fail@plt+0x5d0c>
   16b54:	mov	r3, #8
   16b58:	mov	r0, r4
   16b5c:	str	r3, [sp]
   16b60:	rsb	r2, r2, #1
   16b64:	mvn	r3, #-2147483648	; 0x80000000
   16b68:	add	r1, sp, #36	; 0x24
   16b6c:	bl	181fc <__assert_fail@plt+0x72a4>
   16b70:	mov	r4, r0
   16b74:	str	r0, [r7]
   16b78:	ldr	r0, [r7, #4]
   16b7c:	ldr	r2, [sp, #36]	; 0x24
   16b80:	mov	r1, #0
   16b84:	sub	r2, r2, r0
   16b88:	add	r0, r4, r0, lsl #3
   16b8c:	lsl	r2, r2, #3
   16b90:	bl	10ea4 <memset@plt>
   16b94:	ldr	r3, [sp, #40]	; 0x28
   16b98:	ldr	r5, [sp, #80]	; 0x50
   16b9c:	ldr	r6, [sp, #84]	; 0x54
   16ba0:	ldr	r2, [sp, #36]	; 0x24
   16ba4:	str	r2, [r7, #4]
   16ba8:	ldr	r2, [sp, #44]	; 0x2c
   16bac:	ldr	r9, [r4]
   16bb0:	ldr	r7, [r4, #4]
   16bb4:	orr	r2, r2, #1
   16bb8:	add	fp, sp, #48	; 0x30
   16bbc:	str	r2, [sp, #28]
   16bc0:	str	r2, [sp, #4]
   16bc4:	str	r3, [sp]
   16bc8:	str	r6, [sp, #16]
   16bcc:	str	r5, [sp, #12]
   16bd0:	mov	r1, r9
   16bd4:	mov	r0, r7
   16bd8:	str	fp, [sp, #8]
   16bdc:	mvn	r3, #0
   16be0:	mov	r2, sl
   16be4:	bl	1369c <__assert_fail@plt+0x2744>
   16be8:	cmp	r9, r0
   16bec:	bhi	16c50 <__assert_fail@plt+0x5cf8>
   16bf0:	ldr	r3, [pc, #168]	; 16ca0 <__assert_fail@plt+0x5d48>
   16bf4:	add	r5, r0, #1
   16bf8:	cmp	r7, r3
   16bfc:	str	r5, [r4]
   16c00:	beq	16c0c <__assert_fail@plt+0x5cb4>
   16c04:	mov	r0, r7
   16c08:	bl	132c8 <__assert_fail@plt+0x2370>
   16c0c:	mov	r0, r5
   16c10:	bl	17fe0 <__assert_fail@plt+0x7088>
   16c14:	ldr	lr, [sp, #84]	; 0x54
   16c18:	ldr	r3, [sp, #40]	; 0x28
   16c1c:	ldr	ip, [sp, #80]	; 0x50
   16c20:	mov	r2, sl
   16c24:	mov	r1, r5
   16c28:	str	r0, [r4, #4]
   16c2c:	ldr	r4, [sp, #28]
   16c30:	str	r3, [sp]
   16c34:	str	fp, [sp, #8]
   16c38:	str	r4, [sp, #4]
   16c3c:	str	lr, [sp, #16]
   16c40:	str	ip, [sp, #12]
   16c44:	mvn	r3, #0
   16c48:	mov	r7, r0
   16c4c:	bl	1369c <__assert_fail@plt+0x2744>
   16c50:	ldr	r3, [sp, #24]
   16c54:	mov	r0, r7
   16c58:	str	r3, [r8]
   16c5c:	add	sp, sp, #92	; 0x5c
   16c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c64:	mov	r3, #8
   16c68:	str	r3, [sp]
   16c6c:	add	r1, sp, #36	; 0x24
   16c70:	rsb	r2, r2, #1
   16c74:	mov	r0, fp
   16c78:	mvn	r3, #-2147483648	; 0x80000000
   16c7c:	bl	181fc <__assert_fail@plt+0x72a4>
   16c80:	mov	r4, r0
   16c84:	ldm	r5, {r0, r1}
   16c88:	str	r4, [r7]
   16c8c:	stm	r4, {r0, r1}
   16c90:	b	16b78 <__assert_fail@plt+0x5c20>
   16c94:	bl	10f40 <abort@plt>
   16c98:	andeq	ip, r2, r0, ror r1
   16c9c:	andeq	ip, r2, r0, lsl #2
   16ca0:	andeq	ip, r2, r0, lsr #3
   16ca4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ca8:	mov	r5, r0
   16cac:	ldr	lr, [pc, #464]	; 16e84 <__assert_fail@plt+0x5f2c>
   16cb0:	mov	r6, r1
   16cb4:	mov	sl, r2
   16cb8:	mov	fp, r3
   16cbc:	ldm	lr!, {r0, r1, r2, r3}
   16cc0:	sub	sp, sp, #92	; 0x5c
   16cc4:	add	ip, sp, #40	; 0x28
   16cc8:	cmp	r6, #0
   16ccc:	cmpne	r5, #0
   16cd0:	stmia	ip!, {r0, r1, r2, r3}
   16cd4:	moveq	r4, #1
   16cd8:	ldm	lr!, {r0, r1, r2, r3}
   16cdc:	movne	r4, #0
   16ce0:	mov	r9, #10
   16ce4:	str	r4, [sp, #28]
   16ce8:	stmia	ip!, {r0, r1, r2, r3}
   16cec:	ldm	lr, {r0, r1, r2, r3}
   16cf0:	str	r9, [sp, #40]	; 0x28
   16cf4:	stm	ip, {r0, r1, r2, r3}
   16cf8:	beq	16e80 <__assert_fail@plt+0x5f28>
   16cfc:	str	r5, [sp, #80]	; 0x50
   16d00:	str	r6, [sp, #84]	; 0x54
   16d04:	bl	10e8c <__errno_location@plt>
   16d08:	ldr	r7, [pc, #376]	; 16e88 <__assert_fail@plt+0x5f30>
   16d0c:	ldr	r2, [r7, #4]
   16d10:	ldr	r4, [r7]
   16d14:	cmp	r2, #0
   16d18:	ldr	r3, [r0]
   16d1c:	mov	r8, r0
   16d20:	str	r3, [sp, #24]
   16d24:	movgt	r3, r9
   16d28:	bgt	16d90 <__assert_fail@plt+0x5e38>
   16d2c:	add	r5, r7, #8
   16d30:	cmp	r4, r5
   16d34:	str	r2, [sp, #36]	; 0x24
   16d38:	beq	16e50 <__assert_fail@plt+0x5ef8>
   16d3c:	mov	r3, #8
   16d40:	mov	r0, r4
   16d44:	str	r3, [sp]
   16d48:	rsb	r2, r2, #1
   16d4c:	mvn	r3, #-2147483648	; 0x80000000
   16d50:	add	r1, sp, #36	; 0x24
   16d54:	bl	181fc <__assert_fail@plt+0x72a4>
   16d58:	mov	r4, r0
   16d5c:	str	r0, [r7]
   16d60:	ldr	r0, [r7, #4]
   16d64:	ldr	r2, [sp, #36]	; 0x24
   16d68:	mov	r1, #0
   16d6c:	sub	r2, r2, r0
   16d70:	add	r0, r4, r0, lsl #3
   16d74:	lsl	r2, r2, #3
   16d78:	bl	10ea4 <memset@plt>
   16d7c:	ldr	r3, [sp, #40]	; 0x28
   16d80:	ldr	r5, [sp, #80]	; 0x50
   16d84:	ldr	r6, [sp, #84]	; 0x54
   16d88:	ldr	r2, [sp, #36]	; 0x24
   16d8c:	str	r2, [r7, #4]
   16d90:	ldr	r2, [sp, #44]	; 0x2c
   16d94:	ldr	r9, [r4]
   16d98:	ldr	r7, [r4, #4]
   16d9c:	orr	r2, r2, #1
   16da0:	str	r3, [sp]
   16da4:	add	r3, sp, #48	; 0x30
   16da8:	str	r2, [sp, #28]
   16dac:	str	r2, [sp, #4]
   16db0:	str	r3, [sp, #8]
   16db4:	str	r6, [sp, #16]
   16db8:	str	r5, [sp, #12]
   16dbc:	mov	r1, r9
   16dc0:	mov	r0, r7
   16dc4:	mov	r3, fp
   16dc8:	mov	r2, sl
   16dcc:	bl	1369c <__assert_fail@plt+0x2744>
   16dd0:	cmp	r9, r0
   16dd4:	bhi	16e3c <__assert_fail@plt+0x5ee4>
   16dd8:	ldr	r3, [pc, #172]	; 16e8c <__assert_fail@plt+0x5f34>
   16ddc:	add	r5, r0, #1
   16de0:	cmp	r7, r3
   16de4:	str	r5, [r4]
   16de8:	beq	16df4 <__assert_fail@plt+0x5e9c>
   16dec:	mov	r0, r7
   16df0:	bl	132c8 <__assert_fail@plt+0x2370>
   16df4:	mov	r0, r5
   16df8:	bl	17fe0 <__assert_fail@plt+0x7088>
   16dfc:	add	lr, sp, #48	; 0x30
   16e00:	ldr	ip, [sp, #84]	; 0x54
   16e04:	mov	r1, r5
   16e08:	ldr	r5, [sp, #28]
   16e0c:	mov	r3, fp
   16e10:	mov	r2, sl
   16e14:	str	r0, [r4, #4]
   16e18:	ldr	r4, [sp, #80]	; 0x50
   16e1c:	str	lr, [sp, #8]
   16e20:	ldr	lr, [sp, #40]	; 0x28
   16e24:	str	r5, [sp, #4]
   16e28:	str	ip, [sp, #16]
   16e2c:	str	r4, [sp, #12]
   16e30:	str	lr, [sp]
   16e34:	mov	r7, r0
   16e38:	bl	1369c <__assert_fail@plt+0x2744>
   16e3c:	ldr	r3, [sp, #24]
   16e40:	mov	r0, r7
   16e44:	str	r3, [r8]
   16e48:	add	sp, sp, #92	; 0x5c
   16e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e50:	mov	r3, #8
   16e54:	str	r3, [sp]
   16e58:	add	r1, sp, #36	; 0x24
   16e5c:	rsb	r2, r2, #1
   16e60:	ldr	r0, [sp, #28]
   16e64:	mvn	r3, #-2147483648	; 0x80000000
   16e68:	bl	181fc <__assert_fail@plt+0x72a4>
   16e6c:	mov	r4, r0
   16e70:	ldm	r5, {r0, r1}
   16e74:	str	r4, [r7]
   16e78:	stm	r4, {r0, r1}
   16e7c:	b	16d60 <__assert_fail@plt+0x5e08>
   16e80:	bl	10f40 <abort@plt>
   16e84:	andeq	ip, r2, r0, ror r1
   16e88:	andeq	ip, r2, r0, lsl #2
   16e8c:	andeq	ip, r2, r0, lsr #3
   16e90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e94:	sub	sp, sp, #52	; 0x34
   16e98:	mov	r5, r0
   16e9c:	mov	sl, r1
   16ea0:	mov	fp, r2
   16ea4:	bl	10e8c <__errno_location@plt>
   16ea8:	ldr	r4, [pc, #404]	; 17044 <__assert_fail@plt+0x60ec>
   16eac:	cmn	r5, #-2147483647	; 0x80000001
   16eb0:	ldr	r6, [r4]
   16eb4:	mov	r8, r0
   16eb8:	movne	r0, #0
   16ebc:	moveq	r0, #1
   16ec0:	ldr	r3, [r8]
   16ec4:	orrs	r0, r0, r5, lsr #31
   16ec8:	str	r3, [sp, #28]
   16ecc:	bne	17040 <__assert_fail@plt+0x60e8>
   16ed0:	ldr	r2, [r4, #4]
   16ed4:	cmp	r5, r2
   16ed8:	blt	16f38 <__assert_fail@plt+0x5fe0>
   16edc:	add	r7, r4, #8
   16ee0:	cmp	r6, r7
   16ee4:	str	r2, [sp, #44]	; 0x2c
   16ee8:	beq	17010 <__assert_fail@plt+0x60b8>
   16eec:	mov	r3, #8
   16ef0:	sub	r2, r5, r2
   16ef4:	mov	r0, r6
   16ef8:	str	r3, [sp]
   16efc:	add	r2, r2, #1
   16f00:	mvn	r3, #-2147483648	; 0x80000000
   16f04:	add	r1, sp, #44	; 0x2c
   16f08:	bl	181fc <__assert_fail@plt+0x72a4>
   16f0c:	mov	r6, r0
   16f10:	str	r0, [r4]
   16f14:	ldr	r0, [r4, #4]
   16f18:	ldr	r2, [sp, #44]	; 0x2c
   16f1c:	mov	r1, #0
   16f20:	sub	r2, r2, r0
   16f24:	add	r0, r6, r0, lsl #3
   16f28:	lsl	r2, r2, #3
   16f2c:	bl	10ea4 <memset@plt>
   16f30:	ldr	r3, [sp, #44]	; 0x2c
   16f34:	str	r3, [r4, #4]
   16f38:	ldr	r2, [r4, #56]	; 0x38
   16f3c:	add	r3, r6, r5, lsl #3
   16f40:	ldr	r1, [r4, #20]
   16f44:	ldr	r7, [r3, #4]
   16f48:	ldr	r9, [r6, r5, lsl #3]
   16f4c:	ldr	ip, [r4, #60]	; 0x3c
   16f50:	str	r3, [sp, #32]
   16f54:	ldr	r3, [r4, #16]
   16f58:	str	r2, [sp, #12]
   16f5c:	ldr	r2, [pc, #228]	; 17048 <__assert_fail@plt+0x60f0>
   16f60:	orr	r1, r1, #1
   16f64:	str	r1, [sp, #36]	; 0x24
   16f68:	str	r1, [sp, #4]
   16f6c:	str	r2, [sp, #8]
   16f70:	str	r3, [sp]
   16f74:	mov	r0, r7
   16f78:	mov	r1, r9
   16f7c:	str	ip, [sp, #16]
   16f80:	mov	r3, fp
   16f84:	mov	r2, sl
   16f88:	bl	1369c <__assert_fail@plt+0x2744>
   16f8c:	cmp	r9, r0
   16f90:	bhi	16ffc <__assert_fail@plt+0x60a4>
   16f94:	ldr	r3, [pc, #176]	; 1704c <__assert_fail@plt+0x60f4>
   16f98:	add	r9, r0, #1
   16f9c:	cmp	r7, r3
   16fa0:	str	r9, [r6, r5, lsl #3]
   16fa4:	beq	16fb0 <__assert_fail@plt+0x6058>
   16fa8:	mov	r0, r7
   16fac:	bl	132c8 <__assert_fail@plt+0x2370>
   16fb0:	mov	r0, r9
   16fb4:	bl	17fe0 <__assert_fail@plt+0x7088>
   16fb8:	ldr	ip, [sp, #32]
   16fbc:	ldr	lr, [r4, #60]	; 0x3c
   16fc0:	ldr	r5, [r4, #56]	; 0x38
   16fc4:	mov	r3, fp
   16fc8:	mov	r2, sl
   16fcc:	mov	r1, r9
   16fd0:	str	r0, [ip, #4]
   16fd4:	ldr	ip, [r4, #16]
   16fd8:	ldr	r4, [pc, #104]	; 17048 <__assert_fail@plt+0x60f0>
   16fdc:	str	lr, [sp, #16]
   16fe0:	str	r4, [sp, #8]
   16fe4:	ldr	r4, [sp, #36]	; 0x24
   16fe8:	str	r5, [sp, #12]
   16fec:	str	r4, [sp, #4]
   16ff0:	str	ip, [sp]
   16ff4:	mov	r7, r0
   16ff8:	bl	1369c <__assert_fail@plt+0x2744>
   16ffc:	ldr	r3, [sp, #28]
   17000:	mov	r0, r7
   17004:	str	r3, [r8]
   17008:	add	sp, sp, #52	; 0x34
   1700c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17010:	mov	r3, #8
   17014:	sub	r2, r5, r2
   17018:	str	r3, [sp]
   1701c:	add	r1, sp, #44	; 0x2c
   17020:	add	r2, r2, #1
   17024:	mvn	r3, #-2147483648	; 0x80000000
   17028:	bl	181fc <__assert_fail@plt+0x72a4>
   1702c:	mov	r6, r0
   17030:	ldm	r7, {r0, r1}
   17034:	str	r6, [r4]
   17038:	stm	r6, {r0, r1}
   1703c:	b	16f14 <__assert_fail@plt+0x5fbc>
   17040:	bl	10f40 <abort@plt>
   17044:	andeq	ip, r2, r0, lsl #2
   17048:	andeq	ip, r2, r8, lsl r1
   1704c:	andeq	ip, r2, r0, lsr #3
   17050:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17054:	sub	sp, sp, #44	; 0x2c
   17058:	mov	r9, r0
   1705c:	mov	sl, r1
   17060:	bl	10e8c <__errno_location@plt>
   17064:	ldr	r4, [pc, #360]	; 171d4 <__assert_fail@plt+0x627c>
   17068:	ldr	r2, [r4, #4]
   1706c:	ldr	r5, [r4]
   17070:	cmp	r2, #0
   17074:	ldr	r3, [r0]
   17078:	mov	r7, r0
   1707c:	str	r3, [sp, #24]
   17080:	bgt	170dc <__assert_fail@plt+0x6184>
   17084:	add	r6, r4, #8
   17088:	cmp	r5, r6
   1708c:	str	r2, [sp, #36]	; 0x24
   17090:	beq	171a4 <__assert_fail@plt+0x624c>
   17094:	mov	r3, #8
   17098:	mov	r0, r5
   1709c:	str	r3, [sp]
   170a0:	rsb	r2, r2, #1
   170a4:	mvn	r3, #-2147483648	; 0x80000000
   170a8:	add	r1, sp, #36	; 0x24
   170ac:	bl	181fc <__assert_fail@plt+0x72a4>
   170b0:	mov	r5, r0
   170b4:	str	r0, [r4]
   170b8:	ldr	r0, [r4, #4]
   170bc:	ldr	r2, [sp, #36]	; 0x24
   170c0:	mov	r1, #0
   170c4:	sub	r2, r2, r0
   170c8:	add	r0, r5, r0, lsl #3
   170cc:	lsl	r2, r2, #3
   170d0:	bl	10ea4 <memset@plt>
   170d4:	ldr	r3, [sp, #36]	; 0x24
   170d8:	str	r3, [r4, #4]
   170dc:	ldr	r1, [r4, #20]
   170e0:	ldr	r8, [r5]
   170e4:	ldr	r6, [r5, #4]
   170e8:	ldr	r2, [r4, #56]	; 0x38
   170ec:	ldr	r3, [r4, #16]
   170f0:	ldr	ip, [r4, #60]	; 0x3c
   170f4:	ldr	fp, [pc, #220]	; 171d8 <__assert_fail@plt+0x6280>
   170f8:	orr	r1, r1, #1
   170fc:	str	r1, [sp, #28]
   17100:	str	r1, [sp, #4]
   17104:	str	r2, [sp, #12]
   17108:	str	r3, [sp]
   1710c:	mov	r1, r8
   17110:	mov	r0, r6
   17114:	str	ip, [sp, #16]
   17118:	str	fp, [sp, #8]
   1711c:	mov	r3, sl
   17120:	mov	r2, r9
   17124:	bl	1369c <__assert_fail@plt+0x2744>
   17128:	cmp	r8, r0
   1712c:	bhi	17190 <__assert_fail@plt+0x6238>
   17130:	ldr	r3, [pc, #164]	; 171dc <__assert_fail@plt+0x6284>
   17134:	add	r8, r0, #1
   17138:	cmp	r6, r3
   1713c:	str	r8, [r5]
   17140:	beq	1714c <__assert_fail@plt+0x61f4>
   17144:	mov	r0, r6
   17148:	bl	132c8 <__assert_fail@plt+0x2370>
   1714c:	mov	r0, r8
   17150:	bl	17fe0 <__assert_fail@plt+0x7088>
   17154:	ldr	lr, [r4, #60]	; 0x3c
   17158:	ldr	ip, [r4, #16]
   1715c:	mov	r3, sl
   17160:	mov	r2, r9
   17164:	mov	r1, r8
   17168:	str	r0, [r5, #4]
   1716c:	ldr	r5, [r4, #56]	; 0x38
   17170:	ldr	r4, [sp, #28]
   17174:	str	fp, [sp, #8]
   17178:	str	r4, [sp, #4]
   1717c:	str	lr, [sp, #16]
   17180:	str	r5, [sp, #12]
   17184:	str	ip, [sp]
   17188:	mov	r6, r0
   1718c:	bl	1369c <__assert_fail@plt+0x2744>
   17190:	ldr	r3, [sp, #24]
   17194:	mov	r0, r6
   17198:	str	r3, [r7]
   1719c:	add	sp, sp, #44	; 0x2c
   171a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171a4:	mov	r3, #8
   171a8:	str	r3, [sp]
   171ac:	add	r1, sp, #36	; 0x24
   171b0:	rsb	r2, r2, #1
   171b4:	mvn	r3, #-2147483648	; 0x80000000
   171b8:	mov	r0, #0
   171bc:	bl	181fc <__assert_fail@plt+0x72a4>
   171c0:	mov	r5, r0
   171c4:	ldm	r6, {r0, r1}
   171c8:	str	r5, [r4]
   171cc:	stm	r5, {r0, r1}
   171d0:	b	170b8 <__assert_fail@plt+0x6160>
   171d4:	andeq	ip, r2, r0, lsl #2
   171d8:	andeq	ip, r2, r8, lsl r1
   171dc:	andeq	ip, r2, r0, lsr #3
   171e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171e4:	sub	sp, sp, #44	; 0x2c
   171e8:	mov	r5, r0
   171ec:	mov	sl, r1
   171f0:	bl	10e8c <__errno_location@plt>
   171f4:	ldr	r4, [pc, #396]	; 17388 <__assert_fail@plt+0x6430>
   171f8:	cmn	r5, #-2147483647	; 0x80000001
   171fc:	ldr	r6, [r4]
   17200:	mov	r8, r0
   17204:	movne	r0, #0
   17208:	moveq	r0, #1
   1720c:	ldr	r3, [r8]
   17210:	orrs	r0, r0, r5, lsr #31
   17214:	str	r3, [sp, #24]
   17218:	bne	17384 <__assert_fail@plt+0x642c>
   1721c:	ldr	r2, [r4, #4]
   17220:	cmp	r5, r2
   17224:	blt	17284 <__assert_fail@plt+0x632c>
   17228:	add	r7, r4, #8
   1722c:	cmp	r6, r7
   17230:	str	r2, [sp, #36]	; 0x24
   17234:	beq	17354 <__assert_fail@plt+0x63fc>
   17238:	mov	r3, #8
   1723c:	sub	r2, r5, r2
   17240:	mov	r0, r6
   17244:	str	r3, [sp]
   17248:	add	r2, r2, #1
   1724c:	mvn	r3, #-2147483648	; 0x80000000
   17250:	add	r1, sp, #36	; 0x24
   17254:	bl	181fc <__assert_fail@plt+0x72a4>
   17258:	mov	r6, r0
   1725c:	str	r0, [r4]
   17260:	ldr	r0, [r4, #4]
   17264:	ldr	r2, [sp, #36]	; 0x24
   17268:	mov	r1, #0
   1726c:	sub	r2, r2, r0
   17270:	add	r0, r6, r0, lsl #3
   17274:	lsl	r2, r2, #3
   17278:	bl	10ea4 <memset@plt>
   1727c:	ldr	r3, [sp, #36]	; 0x24
   17280:	str	r3, [r4, #4]
   17284:	ldr	r2, [r4, #56]	; 0x38
   17288:	add	fp, r6, r5, lsl #3
   1728c:	ldr	r1, [r4, #20]
   17290:	ldr	r9, [r6, r5, lsl #3]
   17294:	ldr	r7, [fp, #4]
   17298:	ldr	r3, [r4, #16]
   1729c:	ldr	ip, [r4, #60]	; 0x3c
   172a0:	str	r2, [sp, #12]
   172a4:	ldr	r2, [pc, #224]	; 1738c <__assert_fail@plt+0x6434>
   172a8:	orr	r1, r1, #1
   172ac:	str	r1, [sp, #28]
   172b0:	str	r1, [sp, #4]
   172b4:	str	r2, [sp, #8]
   172b8:	str	r3, [sp]
   172bc:	mov	r0, r7
   172c0:	mov	r1, r9
   172c4:	str	ip, [sp, #16]
   172c8:	mvn	r3, #0
   172cc:	mov	r2, sl
   172d0:	bl	1369c <__assert_fail@plt+0x2744>
   172d4:	cmp	r9, r0
   172d8:	bhi	17340 <__assert_fail@plt+0x63e8>
   172dc:	ldr	r3, [pc, #172]	; 17390 <__assert_fail@plt+0x6438>
   172e0:	add	r9, r0, #1
   172e4:	cmp	r7, r3
   172e8:	str	r9, [r6, r5, lsl #3]
   172ec:	beq	172f8 <__assert_fail@plt+0x63a0>
   172f0:	mov	r0, r7
   172f4:	bl	132c8 <__assert_fail@plt+0x2370>
   172f8:	mov	r0, r9
   172fc:	bl	17fe0 <__assert_fail@plt+0x7088>
   17300:	ldr	ip, [r4, #60]	; 0x3c
   17304:	ldr	r3, [r4, #16]
   17308:	ldr	lr, [r4, #56]	; 0x38
   1730c:	ldr	r4, [pc, #120]	; 1738c <__assert_fail@plt+0x6434>
   17310:	mov	r2, sl
   17314:	mov	r1, r9
   17318:	str	r0, [fp, #4]
   1731c:	str	r4, [sp, #8]
   17320:	ldr	r4, [sp, #28]
   17324:	str	r3, [sp]
   17328:	str	r4, [sp, #4]
   1732c:	str	ip, [sp, #16]
   17330:	str	lr, [sp, #12]
   17334:	mvn	r3, #0
   17338:	mov	r7, r0
   1733c:	bl	1369c <__assert_fail@plt+0x2744>
   17340:	ldr	r3, [sp, #24]
   17344:	mov	r0, r7
   17348:	str	r3, [r8]
   1734c:	add	sp, sp, #44	; 0x2c
   17350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17354:	mov	r3, #8
   17358:	sub	r2, r5, r2
   1735c:	str	r3, [sp]
   17360:	add	r1, sp, #36	; 0x24
   17364:	add	r2, r2, #1
   17368:	mvn	r3, #-2147483648	; 0x80000000
   1736c:	bl	181fc <__assert_fail@plt+0x72a4>
   17370:	mov	r6, r0
   17374:	ldm	r7, {r0, r1}
   17378:	str	r6, [r4]
   1737c:	stm	r6, {r0, r1}
   17380:	b	17260 <__assert_fail@plt+0x6308>
   17384:	bl	10f40 <abort@plt>
   17388:	andeq	ip, r2, r0, lsl #2
   1738c:	andeq	ip, r2, r8, lsl r1
   17390:	andeq	ip, r2, r0, lsr #3
   17394:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17398:	sub	sp, sp, #44	; 0x2c
   1739c:	mov	sl, r0
   173a0:	bl	10e8c <__errno_location@plt>
   173a4:	ldr	r4, [pc, #348]	; 17508 <__assert_fail@plt+0x65b0>
   173a8:	ldr	r2, [r4, #4]
   173ac:	ldr	r5, [r4]
   173b0:	cmp	r2, #0
   173b4:	ldr	r3, [r0]
   173b8:	mov	r8, r0
   173bc:	str	r3, [sp, #28]
   173c0:	bgt	1741c <__assert_fail@plt+0x64c4>
   173c4:	add	r6, r4, #8
   173c8:	cmp	r5, r6
   173cc:	str	r2, [sp, #36]	; 0x24
   173d0:	beq	174d8 <__assert_fail@plt+0x6580>
   173d4:	mov	r3, #8
   173d8:	mov	r0, r5
   173dc:	str	r3, [sp]
   173e0:	rsb	r2, r2, #1
   173e4:	mvn	r3, #-2147483648	; 0x80000000
   173e8:	add	r1, sp, #36	; 0x24
   173ec:	bl	181fc <__assert_fail@plt+0x72a4>
   173f0:	mov	r5, r0
   173f4:	str	r0, [r4]
   173f8:	ldr	r0, [r4, #4]
   173fc:	ldr	r2, [sp, #36]	; 0x24
   17400:	mov	r1, #0
   17404:	sub	r2, r2, r0
   17408:	add	r0, r5, r0, lsl #3
   1740c:	lsl	r2, r2, #3
   17410:	bl	10ea4 <memset@plt>
   17414:	ldr	r3, [sp, #36]	; 0x24
   17418:	str	r3, [r4, #4]
   1741c:	ldr	r7, [r4, #20]
   17420:	ldr	r9, [r5]
   17424:	ldr	r6, [r5, #4]
   17428:	ldr	r2, [r4, #56]	; 0x38
   1742c:	ldr	r3, [r4, #16]
   17430:	ldr	ip, [r4, #60]	; 0x3c
   17434:	ldr	fp, [pc, #208]	; 1750c <__assert_fail@plt+0x65b4>
   17438:	orr	r7, r7, #1
   1743c:	str	r2, [sp, #12]
   17440:	str	r3, [sp]
   17444:	str	r7, [sp, #4]
   17448:	mov	r1, r9
   1744c:	mov	r0, r6
   17450:	str	ip, [sp, #16]
   17454:	str	fp, [sp, #8]
   17458:	mvn	r3, #0
   1745c:	mov	r2, sl
   17460:	bl	1369c <__assert_fail@plt+0x2744>
   17464:	cmp	r9, r0
   17468:	bhi	174c4 <__assert_fail@plt+0x656c>
   1746c:	ldr	r3, [pc, #156]	; 17510 <__assert_fail@plt+0x65b8>
   17470:	add	r9, r0, #1
   17474:	cmp	r6, r3
   17478:	str	r9, [r5]
   1747c:	beq	17488 <__assert_fail@plt+0x6530>
   17480:	mov	r0, r6
   17484:	bl	132c8 <__assert_fail@plt+0x2370>
   17488:	mov	r0, r9
   1748c:	bl	17fe0 <__assert_fail@plt+0x7088>
   17490:	ldr	ip, [r4, #60]	; 0x3c
   17494:	ldr	r3, [r4, #16]
   17498:	ldr	lr, [r4, #56]	; 0x38
   1749c:	mov	r2, sl
   174a0:	mov	r1, r9
   174a4:	str	r0, [r5, #4]
   174a8:	str	r3, [sp]
   174ac:	stmib	sp, {r7, fp}
   174b0:	str	ip, [sp, #16]
   174b4:	str	lr, [sp, #12]
   174b8:	mvn	r3, #0
   174bc:	mov	r6, r0
   174c0:	bl	1369c <__assert_fail@plt+0x2744>
   174c4:	ldr	r3, [sp, #28]
   174c8:	mov	r0, r6
   174cc:	str	r3, [r8]
   174d0:	add	sp, sp, #44	; 0x2c
   174d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174d8:	mov	r3, #8
   174dc:	str	r3, [sp]
   174e0:	add	r1, sp, #36	; 0x24
   174e4:	rsb	r2, r2, #1
   174e8:	mvn	r3, #-2147483648	; 0x80000000
   174ec:	mov	r0, #0
   174f0:	bl	181fc <__assert_fail@plt+0x72a4>
   174f4:	mov	r5, r0
   174f8:	ldm	r6, {r0, r1}
   174fc:	str	r5, [r4]
   17500:	stm	r5, {r0, r1}
   17504:	b	173f8 <__assert_fail@plt+0x64a0>
   17508:	andeq	ip, r2, r0, lsl #2
   1750c:	andeq	ip, r2, r8, lsl r1
   17510:	andeq	ip, r2, r0, lsr #3
   17514:	push	{r4, r5, r6, r7, r8, lr}
   17518:	mov	r8, r0
   1751c:	ldr	r5, [pc, #84]	; 17578 <__assert_fail@plt+0x6620>
   17520:	mov	r7, r1
   17524:	mov	r4, r2
   17528:	mov	r2, r4
   1752c:	mov	r1, r7
   17530:	mov	r0, r8
   17534:	bl	10d00 <read@plt>
   17538:	subs	r6, r0, #0
   1753c:	bge	17570 <__assert_fail@plt+0x6618>
   17540:	bl	10e8c <__errno_location@plt>
   17544:	ldr	r3, [r0]
   17548:	cmp	r3, #4
   1754c:	beq	17528 <__assert_fail@plt+0x65d0>
   17550:	cmp	r4, r5
   17554:	movls	r2, #0
   17558:	movhi	r2, #1
   1755c:	cmp	r3, #22
   17560:	movne	r2, #0
   17564:	cmp	r2, #0
   17568:	mov	r4, r5
   1756c:	bne	17528 <__assert_fail@plt+0x65d0>
   17570:	mov	r0, r6
   17574:	pop	{r4, r5, r6, r7, r8, pc}
   17578:	svcvc	0x00f00000	; IMB
   1757c:	push	{r4, r5, r6, lr}
   17580:	sub	sp, sp, #32
   17584:	cmp	r1, #0
   17588:	mov	r4, r0
   1758c:	ldr	r5, [sp, #48]	; 0x30
   17590:	ldr	r6, [sp, #52]	; 0x34
   17594:	beq	178ac <__assert_fail@plt+0x6954>
   17598:	stm	sp, {r2, r3}
   1759c:	mov	r3, r1
   175a0:	ldr	r2, [pc, #808]	; 178d0 <__assert_fail@plt+0x6978>
   175a4:	mov	r1, #1
   175a8:	bl	10ec8 <__fprintf_chk@plt>
   175ac:	mov	r2, #5
   175b0:	ldr	r1, [pc, #796]	; 178d4 <__assert_fail@plt+0x697c>
   175b4:	mov	r0, #0
   175b8:	bl	10d78 <dcgettext@plt>
   175bc:	ldr	r3, [pc, #788]	; 178d8 <__assert_fail@plt+0x6980>
   175c0:	ldr	r2, [pc, #788]	; 178dc <__assert_fail@plt+0x6984>
   175c4:	str	r3, [sp]
   175c8:	mov	r1, #1
   175cc:	mov	r3, r0
   175d0:	mov	r0, r4
   175d4:	bl	10ec8 <__fprintf_chk@plt>
   175d8:	mov	r1, r4
   175dc:	mov	r0, #10
   175e0:	bl	10d6c <fputc_unlocked@plt>
   175e4:	mov	r2, #5
   175e8:	ldr	r1, [pc, #752]	; 178e0 <__assert_fail@plt+0x6988>
   175ec:	mov	r0, #0
   175f0:	bl	10d78 <dcgettext@plt>
   175f4:	mov	r1, #1
   175f8:	ldr	r3, [pc, #740]	; 178e4 <__assert_fail@plt+0x698c>
   175fc:	mov	r2, r0
   17600:	mov	r0, r4
   17604:	bl	10ec8 <__fprintf_chk@plt>
   17608:	mov	r1, r4
   1760c:	mov	r0, #10
   17610:	bl	10d6c <fputc_unlocked@plt>
   17614:	cmp	r6, #9
   17618:	ldrls	pc, [pc, r6, lsl #2]
   1761c:	b	178c4 <__assert_fail@plt+0x696c>
   17620:	andeq	r7, r1, r4, lsr #13
   17624:	andeq	r7, r1, ip, lsr #13
   17628:	ldrdeq	r7, [r1], -r8
   1762c:	andeq	r7, r1, ip, lsl #14
   17630:	andeq	r7, r1, r8, asr #14
   17634:	andeq	r7, r1, r4, lsl #15
   17638:	andeq	r7, r1, r0, asr #15
   1763c:	andeq	r7, r1, r4, lsl #16
   17640:	andeq	r7, r1, r4, asr r8
   17644:	andeq	r7, r1, r8, asr #12
   17648:	ldr	r1, [pc, #664]	; 178e8 <__assert_fail@plt+0x6990>
   1764c:	mov	r2, #5
   17650:	mov	r0, #0
   17654:	bl	10d78 <dcgettext@plt>
   17658:	ldr	ip, [r5, #32]
   1765c:	ldr	r1, [r5, #28]
   17660:	ldr	r2, [r5, #24]
   17664:	ldr	r3, [r5]
   17668:	ldr	r6, [r5, #20]
   1766c:	str	ip, [sp, #28]
   17670:	ldr	lr, [r5, #16]
   17674:	str	r1, [sp, #24]
   17678:	ldr	ip, [r5, #12]
   1767c:	str	r2, [sp, #20]
   17680:	ldr	r1, [r5, #8]
   17684:	ldr	r2, [r5, #4]
   17688:	str	r6, [sp, #16]
   1768c:	stmib	sp, {r1, ip, lr}
   17690:	mov	r1, #1
   17694:	str	r2, [sp]
   17698:	mov	r2, r0
   1769c:	mov	r0, r4
   176a0:	bl	10ec8 <__fprintf_chk@plt>
   176a4:	add	sp, sp, #32
   176a8:	pop	{r4, r5, r6, pc}
   176ac:	mov	r2, #5
   176b0:	ldr	r1, [pc, #564]	; 178ec <__assert_fail@plt+0x6994>
   176b4:	mov	r0, #0
   176b8:	bl	10d78 <dcgettext@plt>
   176bc:	ldr	r3, [r5]
   176c0:	mov	r1, #1
   176c4:	mov	r2, r0
   176c8:	mov	r0, r4
   176cc:	add	sp, sp, #32
   176d0:	pop	{r4, r5, r6, lr}
   176d4:	b	10ec8 <__fprintf_chk@plt>
   176d8:	mov	r2, #5
   176dc:	ldr	r1, [pc, #524]	; 178f0 <__assert_fail@plt+0x6998>
   176e0:	mov	r0, #0
   176e4:	bl	10d78 <dcgettext@plt>
   176e8:	ldr	r2, [r5, #4]
   176ec:	ldr	r3, [r5]
   176f0:	mov	r1, #1
   176f4:	str	r2, [sp, #48]	; 0x30
   176f8:	mov	r2, r0
   176fc:	mov	r0, r4
   17700:	add	sp, sp, #32
   17704:	pop	{r4, r5, r6, lr}
   17708:	b	10ec8 <__fprintf_chk@plt>
   1770c:	mov	r2, #5
   17710:	ldr	r1, [pc, #476]	; 178f4 <__assert_fail@plt+0x699c>
   17714:	mov	r0, #0
   17718:	bl	10d78 <dcgettext@plt>
   1771c:	ldr	r1, [r5, #8]
   17720:	ldr	r2, [r5, #4]
   17724:	ldr	r3, [r5]
   17728:	str	r1, [sp, #52]	; 0x34
   1772c:	str	r2, [sp, #48]	; 0x30
   17730:	mov	r1, #1
   17734:	mov	r2, r0
   17738:	mov	r0, r4
   1773c:	add	sp, sp, #32
   17740:	pop	{r4, r5, r6, lr}
   17744:	b	10ec8 <__fprintf_chk@plt>
   17748:	mov	r2, #5
   1774c:	ldr	r1, [pc, #420]	; 178f8 <__assert_fail@plt+0x69a0>
   17750:	mov	r0, #0
   17754:	bl	10d78 <dcgettext@plt>
   17758:	ldr	r1, [r5, #8]
   1775c:	ldr	ip, [r5, #12]
   17760:	ldr	r2, [r5, #4]
   17764:	ldr	r3, [r5]
   17768:	stmib	sp, {r1, ip}
   1776c:	str	r2, [sp]
   17770:	mov	r1, #1
   17774:	mov	r2, r0
   17778:	mov	r0, r4
   1777c:	bl	10ec8 <__fprintf_chk@plt>
   17780:	b	176a4 <__assert_fail@plt+0x674c>
   17784:	mov	r2, #5
   17788:	ldr	r1, [pc, #364]	; 178fc <__assert_fail@plt+0x69a4>
   1778c:	mov	r0, #0
   17790:	bl	10d78 <dcgettext@plt>
   17794:	add	r1, r5, #8
   17798:	ldr	r2, [r5, #4]
   1779c:	ldm	r1, {r1, ip, lr}
   177a0:	ldr	r3, [r5]
   177a4:	str	r2, [sp]
   177a8:	stmib	sp, {r1, ip, lr}
   177ac:	mov	r1, #1
   177b0:	mov	r2, r0
   177b4:	mov	r0, r4
   177b8:	bl	10ec8 <__fprintf_chk@plt>
   177bc:	b	176a4 <__assert_fail@plt+0x674c>
   177c0:	mov	r2, #5
   177c4:	ldr	r1, [pc, #308]	; 17900 <__assert_fail@plt+0x69a8>
   177c8:	mov	r0, #0
   177cc:	bl	10d78 <dcgettext@plt>
   177d0:	add	r1, r5, #8
   177d4:	ldr	r2, [r5, #4]
   177d8:	ldm	r1, {r1, ip, lr}
   177dc:	ldr	r6, [r5, #20]
   177e0:	ldr	r3, [r5]
   177e4:	stmib	sp, {r1, ip, lr}
   177e8:	mov	r1, #1
   177ec:	str	r2, [sp]
   177f0:	str	r6, [sp, #16]
   177f4:	mov	r2, r0
   177f8:	mov	r0, r4
   177fc:	bl	10ec8 <__fprintf_chk@plt>
   17800:	b	176a4 <__assert_fail@plt+0x674c>
   17804:	mov	r2, #5
   17808:	ldr	r1, [pc, #244]	; 17904 <__assert_fail@plt+0x69ac>
   1780c:	mov	r0, #0
   17810:	bl	10d78 <dcgettext@plt>
   17814:	ldr	r2, [r5, #24]
   17818:	ldr	r3, [r5]
   1781c:	ldr	r6, [r5, #20]
   17820:	ldr	lr, [r5, #16]
   17824:	ldr	ip, [r5, #12]
   17828:	str	r2, [sp, #20]
   1782c:	ldr	r1, [r5, #8]
   17830:	ldr	r2, [r5, #4]
   17834:	str	r6, [sp, #16]
   17838:	stmib	sp, {r1, ip, lr}
   1783c:	mov	r1, #1
   17840:	str	r2, [sp]
   17844:	mov	r2, r0
   17848:	mov	r0, r4
   1784c:	bl	10ec8 <__fprintf_chk@plt>
   17850:	b	176a4 <__assert_fail@plt+0x674c>
   17854:	mov	r2, #5
   17858:	ldr	r1, [pc, #168]	; 17908 <__assert_fail@plt+0x69b0>
   1785c:	mov	r0, #0
   17860:	bl	10d78 <dcgettext@plt>
   17864:	ldr	r1, [r5, #28]
   17868:	ldr	r2, [r5, #24]
   1786c:	ldr	r3, [r5]
   17870:	ldr	r6, [r5, #20]
   17874:	ldr	lr, [r5, #16]
   17878:	str	r1, [sp, #24]
   1787c:	ldr	ip, [r5, #12]
   17880:	str	r2, [sp, #20]
   17884:	ldr	r1, [r5, #8]
   17888:	ldr	r2, [r5, #4]
   1788c:	str	r6, [sp, #16]
   17890:	stmib	sp, {r1, ip, lr}
   17894:	mov	r1, #1
   17898:	str	r2, [sp]
   1789c:	mov	r2, r0
   178a0:	mov	r0, r4
   178a4:	bl	10ec8 <__fprintf_chk@plt>
   178a8:	b	176a4 <__assert_fail@plt+0x674c>
   178ac:	str	r3, [sp]
   178b0:	mov	r1, #1
   178b4:	mov	r3, r2
   178b8:	ldr	r2, [pc, #76]	; 1790c <__assert_fail@plt+0x69b4>
   178bc:	bl	10ec8 <__fprintf_chk@plt>
   178c0:	b	175ac <__assert_fail@plt+0x6654>
   178c4:	mov	r2, #5
   178c8:	ldr	r1, [pc, #64]	; 17910 <__assert_fail@plt+0x69b8>
   178cc:	b	17650 <__assert_fail@plt+0x66f8>
   178d0:	andeq	sl, r1, r8, ror #25
   178d4:	strdeq	sl, [r1], -ip
   178d8:	andeq	r0, r0, r6, ror #15
   178dc:	ldrdeq	sl, [r1], -r4
   178e0:	andeq	sl, r1, r0, lsl #26
   178e4:	andeq	sl, r1, ip, lsr #27
   178e8:	ldrdeq	sl, [r1], -ip
   178ec:	ldrdeq	sl, [r1], -r0
   178f0:	andeq	sl, r1, r0, ror #27
   178f4:	strdeq	sl, [r1], -r8
   178f8:	andeq	sl, r1, r4, lsl lr
   178fc:	andeq	sl, r1, r4, lsr lr
   17900:	andeq	sl, r1, r8, asr lr
   17904:	andeq	sl, r1, r0, lsl #29
   17908:	andeq	sl, r1, ip, lsr #29
   1790c:	strdeq	sl, [r1], -r4
   17910:	andeq	sl, r1, r0, lsl pc
   17914:	push	{r4, r5, lr}
   17918:	sub	sp, sp, #12
   1791c:	ldr	r5, [sp, #24]
   17920:	ldr	ip, [r5]
   17924:	cmp	ip, #0
   17928:	beq	17944 <__assert_fail@plt+0x69ec>
   1792c:	mov	lr, r5
   17930:	mov	ip, #0
   17934:	ldr	r4, [lr, #4]!
   17938:	add	ip, ip, #1
   1793c:	cmp	r4, #0
   17940:	bne	17934 <__assert_fail@plt+0x69dc>
   17944:	stm	sp, {r5, ip}
   17948:	bl	1757c <__assert_fail@plt+0x6624>
   1794c:	add	sp, sp, #12
   17950:	pop	{r4, r5, pc}
   17954:	push	{r4, r5, lr}
   17958:	sub	sp, sp, #76	; 0x4c
   1795c:	mov	r5, r0
   17960:	ldr	ip, [sp, #88]	; 0x58
   17964:	ldr	r0, [ip]
   17968:	cmp	r0, #0
   1796c:	str	r0, [sp, #32]
   17970:	beq	17d44 <__assert_fail@plt+0x6dec>
   17974:	ldr	r0, [ip, #4]
   17978:	cmp	r0, #0
   1797c:	str	r0, [sp, #36]	; 0x24
   17980:	beq	17d4c <__assert_fail@plt+0x6df4>
   17984:	ldr	r0, [ip, #8]
   17988:	cmp	r0, #0
   1798c:	str	r0, [sp, #40]	; 0x28
   17990:	beq	17d54 <__assert_fail@plt+0x6dfc>
   17994:	ldr	r0, [ip, #12]
   17998:	cmp	r0, #0
   1799c:	str	r0, [sp, #44]	; 0x2c
   179a0:	beq	17d5c <__assert_fail@plt+0x6e04>
   179a4:	ldr	r0, [ip, #16]
   179a8:	cmp	r0, #0
   179ac:	str	r0, [sp, #48]	; 0x30
   179b0:	beq	17d64 <__assert_fail@plt+0x6e0c>
   179b4:	ldr	r0, [ip, #20]
   179b8:	cmp	r0, #0
   179bc:	str	r0, [sp, #52]	; 0x34
   179c0:	beq	17d6c <__assert_fail@plt+0x6e14>
   179c4:	ldr	r0, [ip, #24]
   179c8:	cmp	r0, #0
   179cc:	str	r0, [sp, #56]	; 0x38
   179d0:	beq	17d74 <__assert_fail@plt+0x6e1c>
   179d4:	ldr	r0, [ip, #28]
   179d8:	cmp	r0, #0
   179dc:	str	r0, [sp, #60]	; 0x3c
   179e0:	beq	17d7c <__assert_fail@plt+0x6e24>
   179e4:	ldr	r0, [ip, #32]
   179e8:	cmp	r0, #0
   179ec:	str	r0, [sp, #64]	; 0x40
   179f0:	beq	17d84 <__assert_fail@plt+0x6e2c>
   179f4:	ldr	r0, [ip, #36]	; 0x24
   179f8:	cmp	r0, #0
   179fc:	movne	r4, #10
   17a00:	moveq	r4, #9
   17a04:	cmp	r1, #0
   17a08:	beq	17d1c <__assert_fail@plt+0x6dc4>
   17a0c:	stm	sp, {r2, r3}
   17a10:	mov	r0, r5
   17a14:	mov	r3, r1
   17a18:	ldr	r2, [pc, #876]	; 17d8c <__assert_fail@plt+0x6e34>
   17a1c:	mov	r1, #1
   17a20:	bl	10ec8 <__fprintf_chk@plt>
   17a24:	mov	r2, #5
   17a28:	ldr	r1, [pc, #864]	; 17d90 <__assert_fail@plt+0x6e38>
   17a2c:	mov	r0, #0
   17a30:	bl	10d78 <dcgettext@plt>
   17a34:	ldr	r3, [pc, #856]	; 17d94 <__assert_fail@plt+0x6e3c>
   17a38:	ldr	r2, [pc, #856]	; 17d98 <__assert_fail@plt+0x6e40>
   17a3c:	str	r3, [sp]
   17a40:	mov	r1, #1
   17a44:	mov	r3, r0
   17a48:	mov	r0, r5
   17a4c:	bl	10ec8 <__fprintf_chk@plt>
   17a50:	mov	r1, r5
   17a54:	mov	r0, #10
   17a58:	bl	10d6c <fputc_unlocked@plt>
   17a5c:	mov	r2, #5
   17a60:	ldr	r1, [pc, #820]	; 17d9c <__assert_fail@plt+0x6e44>
   17a64:	mov	r0, #0
   17a68:	bl	10d78 <dcgettext@plt>
   17a6c:	mov	r1, #1
   17a70:	ldr	r3, [pc, #808]	; 17da0 <__assert_fail@plt+0x6e48>
   17a74:	mov	r2, r0
   17a78:	mov	r0, r5
   17a7c:	bl	10ec8 <__fprintf_chk@plt>
   17a80:	mov	r1, r5
   17a84:	mov	r0, #10
   17a88:	bl	10d6c <fputc_unlocked@plt>
   17a8c:	cmp	r4, #9
   17a90:	ldrls	pc, [pc, r4, lsl #2]
   17a94:	b	17d38 <__assert_fail@plt+0x6de0>
   17a98:	andeq	r7, r1, ip, lsl fp
   17a9c:	andeq	r7, r1, r4, lsr #22
   17aa0:	andeq	r7, r1, r0, asr fp
   17aa4:	andeq	r7, r1, r4, lsl #23
   17aa8:			; <UNDEFINED> instruction: 0x00017bbc
   17aac:	strdeq	r7, [r1], -r8
   17ab0:	andeq	r7, r1, r4, lsr ip
   17ab4:	andeq	r7, r1, r8, ror ip
   17ab8:	andeq	r7, r1, r4, asr #25
   17abc:	andeq	r7, r1, r0, asr #21
   17ac0:	ldr	r1, [pc, #732]	; 17da4 <__assert_fail@plt+0x6e4c>
   17ac4:	mov	r2, #5
   17ac8:	mov	r0, #0
   17acc:	bl	10d78 <dcgettext@plt>
   17ad0:	ldr	ip, [sp, #64]	; 0x40
   17ad4:	ldr	r1, [sp, #60]	; 0x3c
   17ad8:	ldr	r2, [sp, #56]	; 0x38
   17adc:	ldr	lr, [sp, #48]	; 0x30
   17ae0:	str	ip, [sp, #28]
   17ae4:	str	r1, [sp, #24]
   17ae8:	ldr	ip, [sp, #44]	; 0x2c
   17aec:	ldr	r1, [sp, #40]	; 0x28
   17af0:	ldr	r4, [sp, #52]	; 0x34
   17af4:	str	r2, [sp, #20]
   17af8:	ldr	r2, [sp, #36]	; 0x24
   17afc:	stmib	sp, {r1, ip, lr}
   17b00:	mov	r1, #1
   17b04:	str	r2, [sp]
   17b08:	ldr	r3, [sp, #32]
   17b0c:	str	r4, [sp, #16]
   17b10:	mov	r2, r0
   17b14:	mov	r0, r5
   17b18:	bl	10ec8 <__fprintf_chk@plt>
   17b1c:	add	sp, sp, #76	; 0x4c
   17b20:	pop	{r4, r5, pc}
   17b24:	mov	r2, #5
   17b28:	ldr	r1, [pc, #632]	; 17da8 <__assert_fail@plt+0x6e50>
   17b2c:	mov	r0, #0
   17b30:	bl	10d78 <dcgettext@plt>
   17b34:	ldr	r3, [sp, #32]
   17b38:	mov	r1, #1
   17b3c:	mov	r2, r0
   17b40:	mov	r0, r5
   17b44:	add	sp, sp, #76	; 0x4c
   17b48:	pop	{r4, r5, lr}
   17b4c:	b	10ec8 <__fprintf_chk@plt>
   17b50:	mov	r2, #5
   17b54:	ldr	r1, [pc, #592]	; 17dac <__assert_fail@plt+0x6e54>
   17b58:	mov	r0, #0
   17b5c:	bl	10d78 <dcgettext@plt>
   17b60:	ldr	r2, [sp, #36]	; 0x24
   17b64:	ldr	r3, [sp, #32]
   17b68:	str	r2, [sp, #88]	; 0x58
   17b6c:	mov	r1, #1
   17b70:	mov	r2, r0
   17b74:	mov	r0, r5
   17b78:	add	sp, sp, #76	; 0x4c
   17b7c:	pop	{r4, r5, lr}
   17b80:	b	10ec8 <__fprintf_chk@plt>
   17b84:	mov	r2, #5
   17b88:	ldr	r1, [pc, #544]	; 17db0 <__assert_fail@plt+0x6e58>
   17b8c:	mov	r0, #0
   17b90:	bl	10d78 <dcgettext@plt>
   17b94:	ldr	r1, [sp, #40]	; 0x28
   17b98:	ldr	r2, [sp, #36]	; 0x24
   17b9c:	str	r1, [sp, #4]
   17ba0:	str	r2, [sp]
   17ba4:	ldr	r3, [sp, #32]
   17ba8:	mov	r1, #1
   17bac:	mov	r2, r0
   17bb0:	mov	r0, r5
   17bb4:	bl	10ec8 <__fprintf_chk@plt>
   17bb8:	b	17b1c <__assert_fail@plt+0x6bc4>
   17bbc:	mov	r2, #5
   17bc0:	ldr	r1, [pc, #492]	; 17db4 <__assert_fail@plt+0x6e5c>
   17bc4:	mov	r0, #0
   17bc8:	bl	10d78 <dcgettext@plt>
   17bcc:	ldr	r1, [sp, #40]	; 0x28
   17bd0:	ldr	ip, [sp, #44]	; 0x2c
   17bd4:	ldr	r2, [sp, #36]	; 0x24
   17bd8:	ldr	r3, [sp, #32]
   17bdc:	stmib	sp, {r1, ip}
   17be0:	str	r2, [sp]
   17be4:	mov	r1, #1
   17be8:	mov	r2, r0
   17bec:	mov	r0, r5
   17bf0:	bl	10ec8 <__fprintf_chk@plt>
   17bf4:	b	17b1c <__assert_fail@plt+0x6bc4>
   17bf8:	mov	r2, #5
   17bfc:	ldr	r1, [pc, #436]	; 17db8 <__assert_fail@plt+0x6e60>
   17c00:	mov	r0, #0
   17c04:	bl	10d78 <dcgettext@plt>
   17c08:	add	r1, sp, #40	; 0x28
   17c0c:	ldr	r2, [sp, #36]	; 0x24
   17c10:	ldm	r1, {r1, ip, lr}
   17c14:	ldr	r3, [sp, #32]
   17c18:	str	r2, [sp]
   17c1c:	stmib	sp, {r1, ip, lr}
   17c20:	mov	r1, #1
   17c24:	mov	r2, r0
   17c28:	mov	r0, r5
   17c2c:	bl	10ec8 <__fprintf_chk@plt>
   17c30:	b	17b1c <__assert_fail@plt+0x6bc4>
   17c34:	mov	r2, #5
   17c38:	ldr	r1, [pc, #380]	; 17dbc <__assert_fail@plt+0x6e64>
   17c3c:	mov	r0, #0
   17c40:	bl	10d78 <dcgettext@plt>
   17c44:	add	r1, sp, #40	; 0x28
   17c48:	ldr	r2, [sp, #36]	; 0x24
   17c4c:	ldm	r1, {r1, ip, lr}
   17c50:	ldr	r4, [sp, #52]	; 0x34
   17c54:	str	r2, [sp]
   17c58:	stmib	sp, {r1, ip, lr}
   17c5c:	mov	r1, #1
   17c60:	ldr	r3, [sp, #32]
   17c64:	str	r4, [sp, #16]
   17c68:	mov	r2, r0
   17c6c:	mov	r0, r5
   17c70:	bl	10ec8 <__fprintf_chk@plt>
   17c74:	b	17b1c <__assert_fail@plt+0x6bc4>
   17c78:	mov	r2, #5
   17c7c:	ldr	r1, [pc, #316]	; 17dc0 <__assert_fail@plt+0x6e68>
   17c80:	mov	r0, #0
   17c84:	bl	10d78 <dcgettext@plt>
   17c88:	add	r1, sp, #40	; 0x28
   17c8c:	ldr	r2, [sp, #56]	; 0x38
   17c90:	ldm	r1, {r1, ip, lr}
   17c94:	ldr	r4, [sp, #52]	; 0x34
   17c98:	str	r2, [sp, #20]
   17c9c:	ldr	r2, [sp, #36]	; 0x24
   17ca0:	stmib	sp, {r1, ip, lr}
   17ca4:	mov	r1, #1
   17ca8:	str	r2, [sp]
   17cac:	ldr	r3, [sp, #32]
   17cb0:	str	r4, [sp, #16]
   17cb4:	mov	r2, r0
   17cb8:	mov	r0, r5
   17cbc:	bl	10ec8 <__fprintf_chk@plt>
   17cc0:	b	17b1c <__assert_fail@plt+0x6bc4>
   17cc4:	mov	r2, #5
   17cc8:	ldr	r1, [pc, #244]	; 17dc4 <__assert_fail@plt+0x6e6c>
   17ccc:	mov	r0, #0
   17cd0:	bl	10d78 <dcgettext@plt>
   17cd4:	ldr	r1, [sp, #60]	; 0x3c
   17cd8:	ldr	r2, [sp, #56]	; 0x38
   17cdc:	ldr	lr, [sp, #48]	; 0x30
   17ce0:	ldr	ip, [sp, #44]	; 0x2c
   17ce4:	str	r1, [sp, #24]
   17ce8:	ldr	r1, [sp, #40]	; 0x28
   17cec:	ldr	r4, [sp, #52]	; 0x34
   17cf0:	str	r2, [sp, #20]
   17cf4:	ldr	r2, [sp, #36]	; 0x24
   17cf8:	stmib	sp, {r1, ip, lr}
   17cfc:	mov	r1, #1
   17d00:	str	r2, [sp]
   17d04:	ldr	r3, [sp, #32]
   17d08:	str	r4, [sp, #16]
   17d0c:	mov	r2, r0
   17d10:	mov	r0, r5
   17d14:	bl	10ec8 <__fprintf_chk@plt>
   17d18:	b	17b1c <__assert_fail@plt+0x6bc4>
   17d1c:	str	r3, [sp]
   17d20:	mov	r1, #1
   17d24:	mov	r3, r2
   17d28:	mov	r0, r5
   17d2c:	ldr	r2, [pc, #148]	; 17dc8 <__assert_fail@plt+0x6e70>
   17d30:	bl	10ec8 <__fprintf_chk@plt>
   17d34:	b	17a24 <__assert_fail@plt+0x6acc>
   17d38:	mov	r2, #5
   17d3c:	ldr	r1, [pc, #136]	; 17dcc <__assert_fail@plt+0x6e74>
   17d40:	b	17ac8 <__assert_fail@plt+0x6b70>
   17d44:	mov	r4, r0
   17d48:	b	17a04 <__assert_fail@plt+0x6aac>
   17d4c:	mov	r4, #1
   17d50:	b	17a04 <__assert_fail@plt+0x6aac>
   17d54:	mov	r4, #2
   17d58:	b	17a04 <__assert_fail@plt+0x6aac>
   17d5c:	mov	r4, #3
   17d60:	b	17a04 <__assert_fail@plt+0x6aac>
   17d64:	mov	r4, #4
   17d68:	b	17a04 <__assert_fail@plt+0x6aac>
   17d6c:	mov	r4, #5
   17d70:	b	17a04 <__assert_fail@plt+0x6aac>
   17d74:	mov	r4, #6
   17d78:	b	17a04 <__assert_fail@plt+0x6aac>
   17d7c:	mov	r4, #7
   17d80:	b	17a04 <__assert_fail@plt+0x6aac>
   17d84:	mov	r4, #8
   17d88:	b	17a04 <__assert_fail@plt+0x6aac>
   17d8c:	andeq	sl, r1, r8, ror #25
   17d90:	strdeq	sl, [r1], -ip
   17d94:	andeq	r0, r0, r6, ror #15
   17d98:	ldrdeq	sl, [r1], -r4
   17d9c:	andeq	sl, r1, r0, lsl #26
   17da0:	andeq	sl, r1, ip, lsr #27
   17da4:	ldrdeq	sl, [r1], -ip
   17da8:	ldrdeq	sl, [r1], -r0
   17dac:	andeq	sl, r1, r0, ror #27
   17db0:	strdeq	sl, [r1], -r8
   17db4:	andeq	sl, r1, r4, lsl lr
   17db8:	andeq	sl, r1, r4, lsr lr
   17dbc:	andeq	sl, r1, r8, asr lr
   17dc0:	andeq	sl, r1, r0, lsl #29
   17dc4:	andeq	sl, r1, ip, lsr #29
   17dc8:	strdeq	sl, [r1], -r4
   17dcc:	andeq	sl, r1, r0, lsl pc
   17dd0:	push	{r3}		; (str r3, [sp, #-4]!)
   17dd4:	push	{lr}		; (str lr, [sp, #-4]!)
   17dd8:	sub	sp, sp, #56	; 0x38
   17ddc:	add	r3, sp, #64	; 0x40
   17de0:	ldr	ip, [sp, #64]	; 0x40
   17de4:	str	r3, [sp, #12]
   17de8:	cmp	ip, #0
   17dec:	str	ip, [sp, #16]
   17df0:	beq	17e88 <__assert_fail@plt+0x6f30>
   17df4:	ldr	ip, [sp, #68]	; 0x44
   17df8:	cmp	ip, #0
   17dfc:	str	ip, [sp, #20]
   17e00:	beq	17ea8 <__assert_fail@plt+0x6f50>
   17e04:	ldr	ip, [sp, #72]	; 0x48
   17e08:	cmp	ip, #0
   17e0c:	str	ip, [sp, #24]
   17e10:	beq	17eb0 <__assert_fail@plt+0x6f58>
   17e14:	ldr	ip, [sp, #76]	; 0x4c
   17e18:	cmp	ip, #0
   17e1c:	str	ip, [sp, #28]
   17e20:	beq	17eb8 <__assert_fail@plt+0x6f60>
   17e24:	ldr	ip, [sp, #80]	; 0x50
   17e28:	cmp	ip, #0
   17e2c:	str	ip, [sp, #32]
   17e30:	beq	17ec0 <__assert_fail@plt+0x6f68>
   17e34:	ldr	ip, [sp, #84]	; 0x54
   17e38:	cmp	ip, #0
   17e3c:	str	ip, [sp, #36]	; 0x24
   17e40:	beq	17ec8 <__assert_fail@plt+0x6f70>
   17e44:	ldr	ip, [sp, #88]	; 0x58
   17e48:	cmp	ip, #0
   17e4c:	str	ip, [sp, #40]	; 0x28
   17e50:	beq	17ed0 <__assert_fail@plt+0x6f78>
   17e54:	ldr	ip, [sp, #92]	; 0x5c
   17e58:	cmp	ip, #0
   17e5c:	str	ip, [sp, #44]	; 0x2c
   17e60:	beq	17ed8 <__assert_fail@plt+0x6f80>
   17e64:	ldr	ip, [sp, #96]	; 0x60
   17e68:	cmp	ip, #0
   17e6c:	str	ip, [sp, #48]	; 0x30
   17e70:	beq	17ee0 <__assert_fail@plt+0x6f88>
   17e74:	ldr	ip, [sp, #100]	; 0x64
   17e78:	cmp	ip, #0
   17e7c:	str	ip, [sp, #52]	; 0x34
   17e80:	movne	ip, #10
   17e84:	moveq	ip, #9
   17e88:	add	r3, sp, #16
   17e8c:	stm	sp, {r3, ip}
   17e90:	ldr	r3, [sp, #60]	; 0x3c
   17e94:	bl	1757c <__assert_fail@plt+0x6624>
   17e98:	add	sp, sp, #56	; 0x38
   17e9c:	pop	{lr}		; (ldr lr, [sp], #4)
   17ea0:	add	sp, sp, #4
   17ea4:	bx	lr
   17ea8:	mov	ip, #1
   17eac:	b	17e88 <__assert_fail@plt+0x6f30>
   17eb0:	mov	ip, #2
   17eb4:	b	17e88 <__assert_fail@plt+0x6f30>
   17eb8:	mov	ip, #3
   17ebc:	b	17e88 <__assert_fail@plt+0x6f30>
   17ec0:	mov	ip, #4
   17ec4:	b	17e88 <__assert_fail@plt+0x6f30>
   17ec8:	mov	ip, #5
   17ecc:	b	17e88 <__assert_fail@plt+0x6f30>
   17ed0:	mov	ip, #6
   17ed4:	b	17e88 <__assert_fail@plt+0x6f30>
   17ed8:	mov	ip, #7
   17edc:	b	17e88 <__assert_fail@plt+0x6f30>
   17ee0:	mov	ip, #8
   17ee4:	b	17e88 <__assert_fail@plt+0x6f30>
   17ee8:	ldr	r3, [pc, #116]	; 17f64 <__assert_fail@plt+0x700c>
   17eec:	push	{r4, lr}
   17ef0:	mov	r0, #10
   17ef4:	ldr	r1, [r3]
   17ef8:	bl	10d6c <fputc_unlocked@plt>
   17efc:	mov	r2, #5
   17f00:	ldr	r1, [pc, #96]	; 17f68 <__assert_fail@plt+0x7010>
   17f04:	mov	r0, #0
   17f08:	bl	10d78 <dcgettext@plt>
   17f0c:	ldr	r2, [pc, #88]	; 17f6c <__assert_fail@plt+0x7014>
   17f10:	mov	r1, r0
   17f14:	mov	r0, #1
   17f18:	bl	10eb0 <__printf_chk@plt>
   17f1c:	mov	r2, #5
   17f20:	ldr	r1, [pc, #72]	; 17f70 <__assert_fail@plt+0x7018>
   17f24:	mov	r0, #0
   17f28:	bl	10d78 <dcgettext@plt>
   17f2c:	ldr	r3, [pc, #64]	; 17f74 <__assert_fail@plt+0x701c>
   17f30:	ldr	r2, [pc, #64]	; 17f78 <__assert_fail@plt+0x7020>
   17f34:	mov	r1, r0
   17f38:	mov	r0, #1
   17f3c:	bl	10eb0 <__printf_chk@plt>
   17f40:	mov	r2, #5
   17f44:	ldr	r1, [pc, #48]	; 17f7c <__assert_fail@plt+0x7024>
   17f48:	mov	r0, #0
   17f4c:	bl	10d78 <dcgettext@plt>
   17f50:	ldr	r2, [pc, #40]	; 17f80 <__assert_fail@plt+0x7028>
   17f54:	pop	{r4, lr}
   17f58:	mov	r1, r0
   17f5c:	mov	r0, #1
   17f60:	b	10eb0 <__printf_chk@plt>
   17f64:	andeq	ip, r2, r4, asr r1
   17f68:	andeq	sl, r1, ip, asr #30
   17f6c:	andeq	sl, r1, r0, ror #30
   17f70:	andeq	sl, r1, r8, ror pc
   17f74:	andeq	sl, r1, ip, lsl r9
   17f78:	andeq	sl, r1, r4, asr #18
   17f7c:	andeq	sl, r1, ip, lsl #31
   17f80:			; <UNDEFINED> instruction: 0x0001afb4
   17f84:	push	{r4, r5, r6, lr}
   17f88:	mov	r6, r0
   17f8c:	mov	r5, r1
   17f90:	mov	r4, r2
   17f94:	bl	199f8 <__assert_fail@plt+0x8aa0>
   17f98:	cmp	r0, #0
   17f9c:	popne	{r4, r5, r6, pc}
   17fa0:	cmp	r6, #0
   17fa4:	beq	17fb4 <__assert_fail@plt+0x705c>
   17fa8:	cmp	r5, #0
   17fac:	cmpne	r4, #0
   17fb0:	popeq	{r4, r5, r6, pc}
   17fb4:	bl	18600 <__assert_fail@plt+0x76a8>
   17fb8:	push	{r4, lr}
   17fbc:	bl	196cc <__assert_fail@plt+0x8774>
   17fc0:	cmp	r0, #0
   17fc4:	popne	{r4, pc}
   17fc8:	bl	18600 <__assert_fail@plt+0x76a8>
   17fcc:	push	{r4, lr}
   17fd0:	bl	196cc <__assert_fail@plt+0x8774>
   17fd4:	cmp	r0, #0
   17fd8:	popne	{r4, pc}
   17fdc:	bl	18600 <__assert_fail@plt+0x76a8>
   17fe0:	push	{r4, lr}
   17fe4:	bl	196cc <__assert_fail@plt+0x8774>
   17fe8:	cmp	r0, #0
   17fec:	popne	{r4, pc}
   17ff0:	bl	18600 <__assert_fail@plt+0x76a8>
   17ff4:	push	{r4, r5, r6, lr}
   17ff8:	mov	r5, r0
   17ffc:	mov	r4, r1
   18000:	bl	196f8 <__assert_fail@plt+0x87a0>
   18004:	cmp	r0, #0
   18008:	popne	{r4, r5, r6, pc}
   1800c:	adds	r4, r4, #0
   18010:	movne	r4, #1
   18014:	cmp	r5, #0
   18018:	orreq	r4, r4, #1
   1801c:	cmp	r4, #0
   18020:	popeq	{r4, r5, r6, pc}
   18024:	bl	18600 <__assert_fail@plt+0x76a8>
   18028:	push	{r4, lr}
   1802c:	cmp	r1, #0
   18030:	orreq	r1, r1, #1
   18034:	bl	196f8 <__assert_fail@plt+0x87a0>
   18038:	cmp	r0, #0
   1803c:	popne	{r4, pc}
   18040:	bl	18600 <__assert_fail@plt+0x76a8>
   18044:	push	{r4, r5, r6, lr}
   18048:	mov	r6, r0
   1804c:	mov	r5, r1
   18050:	mov	r4, r2
   18054:	bl	199f8 <__assert_fail@plt+0x8aa0>
   18058:	cmp	r0, #0
   1805c:	popne	{r4, r5, r6, pc}
   18060:	cmp	r6, #0
   18064:	beq	18074 <__assert_fail@plt+0x711c>
   18068:	cmp	r5, #0
   1806c:	cmpne	r4, #0
   18070:	popeq	{r4, r5, r6, pc}
   18074:	bl	18600 <__assert_fail@plt+0x76a8>
   18078:	cmp	r2, #0
   1807c:	cmpne	r1, #0
   18080:	moveq	r2, #1
   18084:	moveq	r1, r2
   18088:	push	{r4, lr}
   1808c:	bl	199f8 <__assert_fail@plt+0x8aa0>
   18090:	cmp	r0, #0
   18094:	popne	{r4, pc}
   18098:	bl	18600 <__assert_fail@plt+0x76a8>
   1809c:	push	{r4, lr}
   180a0:	mov	r2, r1
   180a4:	mov	r1, r0
   180a8:	mov	r0, #0
   180ac:	bl	199f8 <__assert_fail@plt+0x8aa0>
   180b0:	cmp	r0, #0
   180b4:	popne	{r4, pc}
   180b8:	bl	18600 <__assert_fail@plt+0x76a8>
   180bc:	cmp	r1, #0
   180c0:	cmpne	r0, #0
   180c4:	moveq	r2, #1
   180c8:	movne	r2, r1
   180cc:	moveq	r1, r2
   180d0:	movne	r1, r0
   180d4:	push	{r4, lr}
   180d8:	mov	r0, #0
   180dc:	bl	199f8 <__assert_fail@plt+0x8aa0>
   180e0:	cmp	r0, #0
   180e4:	popne	{r4, pc}
   180e8:	bl	18600 <__assert_fail@plt+0x76a8>
   180ec:	cmp	r0, #0
   180f0:	push	{r4, r5, r6, lr}
   180f4:	mov	r5, r1
   180f8:	ldr	r4, [r1]
   180fc:	beq	18138 <__assert_fail@plt+0x71e0>
   18100:	lsr	r2, r4, #1
   18104:	add	r3, r2, #1
   18108:	mvn	r3, r3
   1810c:	cmp	r4, r3
   18110:	bhi	18154 <__assert_fail@plt+0x71fc>
   18114:	add	r4, r4, #1
   18118:	add	r4, r4, r2
   1811c:	mov	r1, r4
   18120:	mov	r2, #1
   18124:	bl	199f8 <__assert_fail@plt+0x8aa0>
   18128:	cmp	r0, #0
   1812c:	beq	18158 <__assert_fail@plt+0x7200>
   18130:	str	r4, [r5]
   18134:	pop	{r4, r5, r6, pc}
   18138:	cmp	r4, #0
   1813c:	moveq	r4, #64	; 0x40
   18140:	mov	r1, r4
   18144:	mov	r2, #1
   18148:	bl	199f8 <__assert_fail@plt+0x8aa0>
   1814c:	cmp	r0, #0
   18150:	bne	18130 <__assert_fail@plt+0x71d8>
   18154:	bl	18600 <__assert_fail@plt+0x76a8>
   18158:	cmp	r4, #0
   1815c:	bne	18154 <__assert_fail@plt+0x71fc>
   18160:	str	r4, [r5]
   18164:	pop	{r4, r5, r6, pc}
   18168:	cmp	r0, #0
   1816c:	push	{r4, r5, r6, lr}
   18170:	mov	r5, r1
   18174:	ldr	r4, [r1]
   18178:	mov	r6, r2
   1817c:	beq	181c0 <__assert_fail@plt+0x7268>
   18180:	lsr	r1, r4, #1
   18184:	add	r3, r1, #1
   18188:	mvn	r3, r3
   1818c:	cmp	r4, r3
   18190:	bhi	181f8 <__assert_fail@plt+0x72a0>
   18194:	add	r4, r4, #1
   18198:	add	r4, r4, r1
   1819c:	mov	r1, r4
   181a0:	bl	199f8 <__assert_fail@plt+0x8aa0>
   181a4:	cmp	r0, #0
   181a8:	bne	181b8 <__assert_fail@plt+0x7260>
   181ac:	cmp	r4, #0
   181b0:	cmpne	r6, #0
   181b4:	bne	181f8 <__assert_fail@plt+0x72a0>
   181b8:	str	r4, [r5]
   181bc:	pop	{r4, r5, r6, pc}
   181c0:	cmp	r4, #0
   181c4:	bne	181e0 <__assert_fail@plt+0x7288>
   181c8:	mov	r1, r2
   181cc:	mov	r0, #64	; 0x40
   181d0:	bl	19b38 <__assert_fail@plt+0x8be0>
   181d4:	cmp	r0, #0
   181d8:	movne	r4, r0
   181dc:	addeq	r4, r0, #1
   181e0:	mov	r2, r6
   181e4:	mov	r1, r4
   181e8:	mov	r0, #0
   181ec:	bl	199f8 <__assert_fail@plt+0x8aa0>
   181f0:	cmp	r0, #0
   181f4:	bne	181b8 <__assert_fail@plt+0x7260>
   181f8:	bl	18600 <__assert_fail@plt+0x76a8>
   181fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18200:	sub	sp, sp, #12
   18204:	ldr	r6, [r1]
   18208:	mov	r8, r1
   1820c:	mov	r9, r0
   18210:	asrs	r4, r6, #1
   18214:	mov	sl, r2
   18218:	mov	fp, r3
   1821c:	ldr	r7, [sp, #48]	; 0x30
   18220:	bmi	1839c <__assert_fail@plt+0x7444>
   18224:	mvn	r1, #-2147483648	; 0x80000000
   18228:	sub	r1, r1, r4
   1822c:	cmp	r6, r1
   18230:	movle	r1, #0
   18234:	movgt	r1, #1
   18238:	mvn	r3, fp
   1823c:	cmp	r1, #0
   18240:	addeq	r4, r4, r6
   18244:	mvnne	r4, #-2147483648	; 0x80000000
   18248:	lsr	r3, r3, #31
   1824c:	cmp	fp, r4
   18250:	movge	r2, #0
   18254:	andlt	r2, r3, #1
   18258:	cmp	r2, #0
   1825c:	beq	1834c <__assert_fail@plt+0x73f4>
   18260:	cmp	r7, #0
   18264:	blt	18434 <__assert_fail@plt+0x74dc>
   18268:	bne	1842c <__assert_fail@plt+0x74d4>
   1826c:	mov	r5, #64	; 0x40
   18270:	mov	r1, r7
   18274:	mov	r0, r5
   18278:	str	r3, [sp, #4]
   1827c:	bl	19d44 <__assert_fail@plt+0x8dec>
   18280:	mov	r1, r7
   18284:	mov	r4, r0
   18288:	mov	r0, r5
   1828c:	bl	19f64 <__assert_fail@plt+0x900c>
   18290:	ldr	r3, [sp, #4]
   18294:	sub	r5, r5, r1
   18298:	cmp	r9, #0
   1829c:	sub	r2, r4, r6
   182a0:	streq	r9, [r8]
   182a4:	cmp	r2, sl
   182a8:	bge	1832c <__assert_fail@plt+0x73d4>
   182ac:	cmp	sl, #0
   182b0:	blt	183cc <__assert_fail@plt+0x7474>
   182b4:	cmp	r6, #0
   182b8:	blt	182d8 <__assert_fail@plt+0x7380>
   182bc:	mvn	r2, #-2147483648	; 0x80000000
   182c0:	sub	r2, r2, sl
   182c4:	cmp	r6, r2
   182c8:	movle	r2, #0
   182cc:	movgt	r2, #1
   182d0:	cmp	r2, #0
   182d4:	bne	183c8 <__assert_fail@plt+0x7470>
   182d8:	add	r6, r6, sl
   182dc:	cmp	fp, r6
   182e0:	movge	r3, #0
   182e4:	andlt	r3, r3, #1
   182e8:	cmp	r3, #0
   182ec:	mov	r4, r6
   182f0:	bne	183c8 <__assert_fail@plt+0x7470>
   182f4:	cmp	r7, #0
   182f8:	blt	183e0 <__assert_fail@plt+0x7488>
   182fc:	beq	18328 <__assert_fail@plt+0x73d0>
   18300:	cmp	r6, #0
   18304:	blt	18484 <__assert_fail@plt+0x752c>
   18308:	mov	r1, r7
   1830c:	mvn	r0, #-2147483648	; 0x80000000
   18310:	bl	19d44 <__assert_fail@plt+0x8dec>
   18314:	cmp	r6, r0
   18318:	movle	r0, #0
   1831c:	movgt	r0, #1
   18320:	cmp	r0, #0
   18324:	bne	183c8 <__assert_fail@plt+0x7470>
   18328:	mul	r5, r6, r7
   1832c:	mov	r1, r5
   18330:	mov	r0, r9
   18334:	bl	196f8 <__assert_fail@plt+0x87a0>
   18338:	cmp	r0, #0
   1833c:	beq	183b0 <__assert_fail@plt+0x7458>
   18340:	str	r4, [r8]
   18344:	add	sp, sp, #12
   18348:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1834c:	cmp	r7, #0
   18350:	blt	1840c <__assert_fail@plt+0x74b4>
   18354:	beq	1826c <__assert_fail@plt+0x7314>
   18358:	cmp	r4, #0
   1835c:	blt	1843c <__assert_fail@plt+0x74e4>
   18360:	mov	r1, r7
   18364:	mvn	r0, #-2147483648	; 0x80000000
   18368:	str	r3, [sp, #4]
   1836c:	bl	19d44 <__assert_fail@plt+0x8dec>
   18370:	ldr	r3, [sp, #4]
   18374:	cmp	r0, r4
   18378:	movge	r0, #0
   1837c:	movlt	r0, #1
   18380:	cmp	r0, #0
   18384:	mvnne	r5, #-2147483648	; 0x80000000
   18388:	bne	18270 <__assert_fail@plt+0x7318>
   1838c:	mul	r5, r7, r4
   18390:	cmp	r5, #63	; 0x3f
   18394:	bgt	18298 <__assert_fail@plt+0x7340>
   18398:	b	1826c <__assert_fail@plt+0x7314>
   1839c:	rsb	r1, r4, #-2147483648	; 0x80000000
   183a0:	cmp	r6, r1
   183a4:	movge	r1, #0
   183a8:	movlt	r1, #1
   183ac:	b	18238 <__assert_fail@plt+0x72e0>
   183b0:	adds	r5, r5, #0
   183b4:	movne	r5, #1
   183b8:	cmp	r9, #0
   183bc:	orreq	r5, r5, #1
   183c0:	cmp	r5, #0
   183c4:	beq	18340 <__assert_fail@plt+0x73e8>
   183c8:	bl	18600 <__assert_fail@plt+0x76a8>
   183cc:	rsb	r2, sl, #-2147483648	; 0x80000000
   183d0:	cmp	r6, r2
   183d4:	movge	r2, #0
   183d8:	movlt	r2, #1
   183dc:	b	182d0 <__assert_fail@plt+0x7378>
   183e0:	cmp	r6, #0
   183e4:	blt	18468 <__assert_fail@plt+0x7510>
   183e8:	cmn	r7, #1
   183ec:	beq	18328 <__assert_fail@plt+0x73d0>
   183f0:	mov	r1, r7
   183f4:	mov	r0, #-2147483648	; 0x80000000
   183f8:	bl	19d44 <__assert_fail@plt+0x8dec>
   183fc:	cmp	r6, r0
   18400:	movle	r0, #0
   18404:	movgt	r0, #1
   18408:	b	18320 <__assert_fail@plt+0x73c8>
   1840c:	cmp	r4, #0
   18410:	blt	184a8 <__assert_fail@plt+0x7550>
   18414:	cmn	r7, #1
   18418:	beq	1838c <__assert_fail@plt+0x7434>
   1841c:	str	r3, [sp, #4]
   18420:	mov	r1, r7
   18424:	mov	r0, #-2147483648	; 0x80000000
   18428:	b	1836c <__assert_fail@plt+0x7414>
   1842c:	mov	r4, fp
   18430:	b	18360 <__assert_fail@plt+0x7408>
   18434:	mov	r4, fp
   18438:	b	18414 <__assert_fail@plt+0x74bc>
   1843c:	cmn	r4, #1
   18440:	beq	1838c <__assert_fail@plt+0x7434>
   18444:	mov	r1, r4
   18448:	mov	r0, #-2147483648	; 0x80000000
   1844c:	str	r3, [sp, #4]
   18450:	bl	19d44 <__assert_fail@plt+0x8dec>
   18454:	ldr	r3, [sp, #4]
   18458:	cmp	r7, r0
   1845c:	movle	r0, #0
   18460:	movgt	r0, #1
   18464:	b	18380 <__assert_fail@plt+0x7428>
   18468:	mov	r1, r7
   1846c:	mvn	r0, #-2147483648	; 0x80000000
   18470:	bl	19d44 <__assert_fail@plt+0x8dec>
   18474:	cmp	r6, r0
   18478:	movge	r0, #0
   1847c:	movlt	r0, #1
   18480:	b	18320 <__assert_fail@plt+0x73c8>
   18484:	cmn	r6, #1
   18488:	beq	18328 <__assert_fail@plt+0x73d0>
   1848c:	mov	r1, r6
   18490:	mov	r0, #-2147483648	; 0x80000000
   18494:	bl	19d44 <__assert_fail@plt+0x8dec>
   18498:	cmp	r7, r0
   1849c:	movle	r0, #0
   184a0:	movgt	r0, #1
   184a4:	b	18320 <__assert_fail@plt+0x73c8>
   184a8:	mov	r1, r7
   184ac:	mvn	r0, #-2147483648	; 0x80000000
   184b0:	str	r3, [sp, #4]
   184b4:	bl	19d44 <__assert_fail@plt+0x8dec>
   184b8:	ldr	r3, [sp, #4]
   184bc:	cmp	r0, r4
   184c0:	movle	r0, #0
   184c4:	movgt	r0, #1
   184c8:	b	18380 <__assert_fail@plt+0x7428>
   184cc:	push	{r4, lr}
   184d0:	mov	r1, #1
   184d4:	bl	19684 <__assert_fail@plt+0x872c>
   184d8:	cmp	r0, #0
   184dc:	popne	{r4, pc}
   184e0:	bl	18600 <__assert_fail@plt+0x76a8>
   184e4:	push	{r4, lr}
   184e8:	mov	r1, #1
   184ec:	bl	19684 <__assert_fail@plt+0x872c>
   184f0:	cmp	r0, #0
   184f4:	popne	{r4, pc}
   184f8:	bl	18600 <__assert_fail@plt+0x76a8>
   184fc:	push	{r4, lr}
   18500:	bl	19684 <__assert_fail@plt+0x872c>
   18504:	cmp	r0, #0
   18508:	popne	{r4, pc}
   1850c:	bl	18600 <__assert_fail@plt+0x76a8>
   18510:	push	{r4, lr}
   18514:	bl	19684 <__assert_fail@plt+0x872c>
   18518:	cmp	r0, #0
   1851c:	popne	{r4, pc}
   18520:	bl	18600 <__assert_fail@plt+0x76a8>
   18524:	push	{r4, r5, r6, lr}
   18528:	mov	r6, r0
   1852c:	mov	r0, r1
   18530:	mov	r4, r1
   18534:	bl	196cc <__assert_fail@plt+0x8774>
   18538:	subs	r5, r0, #0
   1853c:	beq	18554 <__assert_fail@plt+0x75fc>
   18540:	mov	r2, r4
   18544:	mov	r1, r6
   18548:	bl	10d30 <memcpy@plt>
   1854c:	mov	r0, r5
   18550:	pop	{r4, r5, r6, pc}
   18554:	bl	18600 <__assert_fail@plt+0x76a8>
   18558:	push	{r4, r5, r6, lr}
   1855c:	mov	r6, r0
   18560:	mov	r0, r1
   18564:	mov	r4, r1
   18568:	bl	196cc <__assert_fail@plt+0x8774>
   1856c:	subs	r5, r0, #0
   18570:	beq	18588 <__assert_fail@plt+0x7630>
   18574:	mov	r2, r4
   18578:	mov	r1, r6
   1857c:	bl	10d30 <memcpy@plt>
   18580:	mov	r0, r5
   18584:	pop	{r4, r5, r6, pc}
   18588:	bl	18600 <__assert_fail@plt+0x76a8>
   1858c:	push	{r4, r5, r6, lr}
   18590:	mov	r6, r0
   18594:	add	r0, r1, #1
   18598:	mov	r4, r1
   1859c:	bl	196cc <__assert_fail@plt+0x8774>
   185a0:	subs	r5, r0, #0
   185a4:	beq	185c4 <__assert_fail@plt+0x766c>
   185a8:	mov	r3, #0
   185ac:	mov	r1, r6
   185b0:	strb	r3, [r5, r4]
   185b4:	mov	r2, r4
   185b8:	bl	10d30 <memcpy@plt>
   185bc:	mov	r0, r5
   185c0:	pop	{r4, r5, r6, pc}
   185c4:	bl	18600 <__assert_fail@plt+0x76a8>
   185c8:	push	{r4, r5, r6, lr}
   185cc:	mov	r6, r0
   185d0:	bl	10e68 <strlen@plt>
   185d4:	add	r4, r0, #1
   185d8:	mov	r0, r4
   185dc:	bl	196cc <__assert_fail@plt+0x8774>
   185e0:	subs	r5, r0, #0
   185e4:	beq	185fc <__assert_fail@plt+0x76a4>
   185e8:	mov	r2, r4
   185ec:	mov	r1, r6
   185f0:	bl	10d30 <memcpy@plt>
   185f4:	mov	r0, r5
   185f8:	pop	{r4, r5, r6, pc}
   185fc:	bl	18600 <__assert_fail@plt+0x76a8>
   18600:	ldr	r3, [pc, #44]	; 18634 <__assert_fail@plt+0x76dc>
   18604:	push	{r4, lr}
   18608:	mov	r2, #5
   1860c:	ldr	r1, [pc, #36]	; 18638 <__assert_fail@plt+0x76e0>
   18610:	mov	r0, #0
   18614:	ldr	r4, [r3]
   18618:	bl	10d78 <dcgettext@plt>
   1861c:	ldr	r2, [pc, #24]	; 1863c <__assert_fail@plt+0x76e4>
   18620:	mov	r1, #0
   18624:	mov	r3, r0
   18628:	mov	r0, r4
   1862c:	bl	10dfc <error@plt>
   18630:	bl	10f40 <abort@plt>
   18634:	strdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   18638:	andeq	fp, r1, r4
   1863c:	andeq	sl, r1, r0, ror #20
   18640:	push	{r4, r5, r6, r7, lr}
   18644:	sub	sp, sp, #20
   18648:	mov	r6, r2
   1864c:	ldr	ip, [sp, #48]	; 0x30
   18650:	mov	r2, r1
   18654:	mov	r7, r3
   18658:	str	ip, [sp]
   1865c:	add	r3, sp, #8
   18660:	mov	r1, #0
   18664:	mov	r5, r0
   18668:	ldr	r4, [sp, #56]	; 0x38
   1866c:	bl	188b8 <__assert_fail@plt+0x7960>
   18670:	cmp	r0, #0
   18674:	bne	186f8 <__assert_fail@plt+0x77a0>
   18678:	ldrd	r0, [sp, #8]
   1867c:	cmp	r1, r7
   18680:	cmpeq	r0, r6
   18684:	ldrd	r6, [sp, #40]	; 0x28
   18688:	movcc	r3, #1
   1868c:	movcs	r3, #0
   18690:	cmp	r1, r7
   18694:	cmpeq	r0, r6
   18698:	orrhi	r3, r3, #1
   1869c:	cmp	r3, #0
   186a0:	beq	186f0 <__assert_fail@plt+0x7798>
   186a4:	mov	r3, #0
   186a8:	mvn	r2, #-1073741824	; 0xc0000000
   186ac:	cmp	r1, r3
   186b0:	cmpeq	r0, r2
   186b4:	bhi	18724 <__assert_fail@plt+0x77cc>
   186b8:	bl	10e8c <__errno_location@plt>
   186bc:	mov	r3, #34	; 0x22
   186c0:	mov	r6, r3
   186c4:	str	r3, [r0]
   186c8:	cmp	r4, #0
   186cc:	moveq	r4, #1
   186d0:	mov	r0, r5
   186d4:	bl	17394 <__assert_fail@plt+0x643c>
   186d8:	mov	r1, r6
   186dc:	ldr	r3, [sp, #52]	; 0x34
   186e0:	ldr	r2, [pc, #144]	; 18778 <__assert_fail@plt+0x7820>
   186e4:	str	r0, [sp]
   186e8:	mov	r0, r4
   186ec:	bl	10dfc <error@plt>
   186f0:	add	sp, sp, #20
   186f4:	pop	{r4, r5, r6, r7, pc}
   186f8:	cmp	r0, #1
   186fc:	beq	18738 <__assert_fail@plt+0x77e0>
   18700:	cmp	r0, #3
   18704:	beq	18768 <__assert_fail@plt+0x7810>
   18708:	cmp	r4, #0
   1870c:	beq	18758 <__assert_fail@plt+0x7800>
   18710:	bl	10e8c <__errno_location@plt>
   18714:	ldr	r6, [r0]
   18718:	cmp	r6, #22
   1871c:	moveq	r6, #0
   18720:	b	186d0 <__assert_fail@plt+0x7778>
   18724:	bl	10e8c <__errno_location@plt>
   18728:	mov	r3, #75	; 0x4b
   1872c:	mov	r6, r3
   18730:	str	r3, [r0]
   18734:	b	186c8 <__assert_fail@plt+0x7770>
   18738:	bl	10e8c <__errno_location@plt>
   1873c:	mov	r3, #75	; 0x4b
   18740:	mov	r6, r3
   18744:	str	r3, [r0]
   18748:	cmp	r4, #0
   1874c:	moveq	r4, #1
   18750:	bne	18718 <__assert_fail@plt+0x77c0>
   18754:	b	186d0 <__assert_fail@plt+0x7778>
   18758:	bl	10e8c <__errno_location@plt>
   1875c:	mov	r4, #1
   18760:	ldr	r6, [r0]
   18764:	b	18718 <__assert_fail@plt+0x77c0>
   18768:	bl	10e8c <__errno_location@plt>
   1876c:	mov	r6, #0
   18770:	str	r6, [r0]
   18774:	b	18748 <__assert_fail@plt+0x77f0>
   18778:	andeq	sl, r1, ip, asr sl
   1877c:	push	{r4, r5, r6, r7, lr}
   18780:	sub	sp, sp, #20
   18784:	mov	r6, r2
   18788:	ldr	r1, [sp, #48]	; 0x30
   1878c:	mov	r7, r3
   18790:	str	r1, [sp]
   18794:	add	r3, sp, #8
   18798:	mov	r2, #10
   1879c:	mov	r1, #0
   187a0:	mov	r5, r0
   187a4:	ldr	r4, [sp, #56]	; 0x38
   187a8:	bl	188b8 <__assert_fail@plt+0x7960>
   187ac:	cmp	r0, #0
   187b0:	bne	18834 <__assert_fail@plt+0x78dc>
   187b4:	ldrd	r0, [sp, #8]
   187b8:	cmp	r7, r1
   187bc:	cmpeq	r6, r0
   187c0:	ldrd	r6, [sp, #40]	; 0x28
   187c4:	movhi	r3, #1
   187c8:	movls	r3, #0
   187cc:	cmp	r7, r1
   187d0:	cmpeq	r6, r0
   187d4:	orrcc	r3, r3, #1
   187d8:	cmp	r3, #0
   187dc:	beq	1882c <__assert_fail@plt+0x78d4>
   187e0:	mov	r3, #0
   187e4:	mvn	r2, #-1073741824	; 0xc0000000
   187e8:	cmp	r1, r3
   187ec:	cmpeq	r0, r2
   187f0:	bhi	18860 <__assert_fail@plt+0x7908>
   187f4:	bl	10e8c <__errno_location@plt>
   187f8:	mov	r3, #34	; 0x22
   187fc:	mov	r6, r3
   18800:	str	r3, [r0]
   18804:	cmp	r4, #0
   18808:	moveq	r4, #1
   1880c:	mov	r0, r5
   18810:	bl	17394 <__assert_fail@plt+0x643c>
   18814:	mov	r1, r6
   18818:	ldr	r3, [sp, #52]	; 0x34
   1881c:	ldr	r2, [pc, #144]	; 188b4 <__assert_fail@plt+0x795c>
   18820:	str	r0, [sp]
   18824:	mov	r0, r4
   18828:	bl	10dfc <error@plt>
   1882c:	add	sp, sp, #20
   18830:	pop	{r4, r5, r6, r7, pc}
   18834:	cmp	r0, #1
   18838:	beq	18874 <__assert_fail@plt+0x791c>
   1883c:	cmp	r0, #3
   18840:	beq	188a4 <__assert_fail@plt+0x794c>
   18844:	cmp	r4, #0
   18848:	beq	18894 <__assert_fail@plt+0x793c>
   1884c:	bl	10e8c <__errno_location@plt>
   18850:	ldr	r6, [r0]
   18854:	cmp	r6, #22
   18858:	moveq	r6, #0
   1885c:	b	1880c <__assert_fail@plt+0x78b4>
   18860:	bl	10e8c <__errno_location@plt>
   18864:	mov	r3, #75	; 0x4b
   18868:	mov	r6, r3
   1886c:	str	r3, [r0]
   18870:	b	18804 <__assert_fail@plt+0x78ac>
   18874:	bl	10e8c <__errno_location@plt>
   18878:	mov	r3, #75	; 0x4b
   1887c:	mov	r6, r3
   18880:	str	r3, [r0]
   18884:	cmp	r4, #0
   18888:	moveq	r4, #1
   1888c:	bne	18854 <__assert_fail@plt+0x78fc>
   18890:	b	1880c <__assert_fail@plt+0x78b4>
   18894:	bl	10e8c <__errno_location@plt>
   18898:	mov	r4, #1
   1889c:	ldr	r6, [r0]
   188a0:	b	18854 <__assert_fail@plt+0x78fc>
   188a4:	bl	10e8c <__errno_location@plt>
   188a8:	mov	r6, #0
   188ac:	str	r6, [r0]
   188b0:	b	18884 <__assert_fail@plt+0x792c>
   188b4:	andeq	sl, r1, ip, asr sl
   188b8:	cmp	r2, #36	; 0x24
   188bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188c0:	sub	sp, sp, #52	; 0x34
   188c4:	bhi	19654 <__assert_fail@plt+0x86fc>
   188c8:	cmp	r1, #0
   188cc:	mov	r6, r2
   188d0:	mov	sl, r0
   188d4:	mov	r5, r1
   188d8:	mov	r8, r3
   188dc:	addeq	r5, sp, #44	; 0x2c
   188e0:	bl	10e8c <__errno_location@plt>
   188e4:	mov	r3, #0
   188e8:	str	r3, [r0]
   188ec:	mov	fp, r0
   188f0:	bl	10e50 <__ctype_b_loc@plt>
   188f4:	ldrb	r3, [sl]
   188f8:	mov	r2, sl
   188fc:	ldr	r0, [r0]
   18900:	b	18908 <__assert_fail@plt+0x79b0>
   18904:	ldrb	r3, [r2, #1]!
   18908:	lsl	r1, r3, #1
   1890c:	ldrh	r4, [r0, r1]
   18910:	ands	r4, r4, #8192	; 0x2000
   18914:	bne	18904 <__assert_fail@plt+0x79ac>
   18918:	cmp	r3, #45	; 0x2d
   1891c:	bne	18930 <__assert_fail@plt+0x79d8>
   18920:	mov	r4, #4
   18924:	mov	r0, r4
   18928:	add	sp, sp, #52	; 0x34
   1892c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18930:	mov	r2, r6
   18934:	mov	r3, r4
   18938:	mov	r1, r5
   1893c:	mov	r0, sl
   18940:	bl	10d3c <__strtoull_internal@plt>
   18944:	ldr	r9, [r5]
   18948:	cmp	sl, r9
   1894c:	mov	r6, r0
   18950:	mov	r7, r1
   18954:	beq	1899c <__assert_fail@plt+0x7a44>
   18958:	ldr	r4, [fp]
   1895c:	cmp	r4, #0
   18960:	bne	1898c <__assert_fail@plt+0x7a34>
   18964:	ldr	r3, [sp, #88]	; 0x58
   18968:	cmp	r3, #0
   1896c:	beq	1897c <__assert_fail@plt+0x7a24>
   18970:	ldrb	sl, [r9]
   18974:	cmp	sl, #0
   18978:	bne	189d0 <__assert_fail@plt+0x7a78>
   1897c:	mov	r0, r4
   18980:	strd	r6, [r8]
   18984:	add	sp, sp, #52	; 0x34
   18988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1898c:	cmp	r4, #34	; 0x22
   18990:	bne	18920 <__assert_fail@plt+0x79c8>
   18994:	mov	r4, #1
   18998:	b	18964 <__assert_fail@plt+0x7a0c>
   1899c:	ldr	r3, [sp, #88]	; 0x58
   189a0:	cmp	r3, #0
   189a4:	beq	18920 <__assert_fail@plt+0x79c8>
   189a8:	ldrb	sl, [r9]
   189ac:	cmp	sl, #0
   189b0:	beq	18920 <__assert_fail@plt+0x79c8>
   189b4:	mov	r1, sl
   189b8:	mov	r0, r3
   189bc:	bl	10e74 <strchr@plt>
   189c0:	cmp	r0, #0
   189c4:	movne	r6, #1
   189c8:	movne	r7, #0
   189cc:	beq	18920 <__assert_fail@plt+0x79c8>
   189d0:	mov	r1, sl
   189d4:	ldr	r0, [sp, #88]	; 0x58
   189d8:	bl	10e74 <strchr@plt>
   189dc:	cmp	r0, #0
   189e0:	beq	19540 <__assert_fail@plt+0x85e8>
   189e4:	sub	r3, sl, #69	; 0x45
   189e8:	cmp	r3, #47	; 0x2f
   189ec:	ldrls	pc, [pc, r3, lsl #2]
   189f0:	b	18ae4 <__assert_fail@plt+0x7b8c>
   189f4:			; <UNDEFINED> instruction: 0x00018ab4
   189f8:	andeq	r8, r1, r4, ror #21
   189fc:			; <UNDEFINED> instruction: 0x00018ab4
   18a00:	andeq	r8, r1, r4, ror #21
   18a04:	andeq	r8, r1, r4, ror #21
   18a08:	andeq	r8, r1, r4, ror #21
   18a0c:			; <UNDEFINED> instruction: 0x00018ab4
   18a10:	andeq	r8, r1, r4, ror #21
   18a14:			; <UNDEFINED> instruction: 0x00018ab4
   18a18:	andeq	r8, r1, r4, ror #21
   18a1c:	andeq	r8, r1, r4, ror #21
   18a20:			; <UNDEFINED> instruction: 0x00018ab4
   18a24:	andeq	r8, r1, r4, ror #21
   18a28:	andeq	r8, r1, r4, ror #21
   18a2c:	andeq	r8, r1, r4, ror #21
   18a30:			; <UNDEFINED> instruction: 0x00018ab4
   18a34:	andeq	r8, r1, r4, ror #21
   18a38:	andeq	r8, r1, r4, ror #21
   18a3c:	andeq	r8, r1, r4, ror #21
   18a40:	andeq	r8, r1, r4, ror #21
   18a44:			; <UNDEFINED> instruction: 0x00018ab4
   18a48:			; <UNDEFINED> instruction: 0x00018ab4
   18a4c:	andeq	r8, r1, r4, ror #21
   18a50:	andeq	r8, r1, r4, ror #21
   18a54:	andeq	r8, r1, r4, ror #21
   18a58:	andeq	r8, r1, r4, ror #21
   18a5c:	andeq	r8, r1, r4, ror #21
   18a60:	andeq	r8, r1, r4, ror #21
   18a64:	andeq	r8, r1, r4, ror #21
   18a68:	andeq	r8, r1, r4, ror #21
   18a6c:	andeq	r8, r1, r4, ror #21
   18a70:	andeq	r8, r1, r4, ror #21
   18a74:	andeq	r8, r1, r4, ror #21
   18a78:	andeq	r8, r1, r4, ror #21
   18a7c:			; <UNDEFINED> instruction: 0x00018ab4
   18a80:	andeq	r8, r1, r4, ror #21
   18a84:	andeq	r8, r1, r4, ror #21
   18a88:	andeq	r8, r1, r4, ror #21
   18a8c:			; <UNDEFINED> instruction: 0x00018ab4
   18a90:	andeq	r8, r1, r4, ror #21
   18a94:			; <UNDEFINED> instruction: 0x00018ab4
   18a98:	andeq	r8, r1, r4, ror #21
   18a9c:	andeq	r8, r1, r4, ror #21
   18aa0:	andeq	r8, r1, r4, ror #21
   18aa4:	andeq	r8, r1, r4, ror #21
   18aa8:	andeq	r8, r1, r4, ror #21
   18aac:	andeq	r8, r1, r4, ror #21
   18ab0:			; <UNDEFINED> instruction: 0x00018ab4
   18ab4:	mov	r1, #48	; 0x30
   18ab8:	ldr	r0, [sp, #88]	; 0x58
   18abc:	bl	10e74 <strchr@plt>
   18ac0:	cmp	r0, #0
   18ac4:	beq	195d4 <__assert_fail@plt+0x867c>
   18ac8:	ldrb	r3, [r9, #1]
   18acc:	cmp	r3, #68	; 0x44
   18ad0:	beq	195b4 <__assert_fail@plt+0x865c>
   18ad4:	cmp	r3, #105	; 0x69
   18ad8:	beq	19584 <__assert_fail@plt+0x862c>
   18adc:	cmp	r3, #66	; 0x42
   18ae0:	beq	195b4 <__assert_fail@plt+0x865c>
   18ae4:	ldr	r3, [pc, #2948]	; 19670 <__assert_fail@plt+0x8718>
   18ae8:	mvn	r2, #0
   18aec:	mov	r1, #1024	; 0x400
   18af0:	mov	lr, #0
   18af4:	strd	r2, [sp]
   18af8:	mov	r3, #1
   18afc:	str	r3, [sp, #12]
   18b00:	sub	sl, sl, #66	; 0x42
   18b04:	cmp	sl, #53	; 0x35
   18b08:	ldrls	pc, [pc, sl, lsl #2]
   18b0c:	b	19540 <__assert_fail@plt+0x85e8>
   18b10:	andeq	r9, r1, r0, lsl r5
   18b14:	andeq	r9, r1, r0, asr #10
   18b18:	andeq	r9, r1, r0, asr #10
   18b1c:	andeq	r9, r1, ip, lsl #7
   18b20:	andeq	r9, r1, r0, asr #10
   18b24:	andeq	r9, r1, r8, asr #5
   18b28:	andeq	r9, r1, r0, asr #10
   18b2c:	andeq	r9, r1, r0, asr #10
   18b30:	andeq	r9, r1, r0, asr #10
   18b34:	andeq	r9, r1, ip, asr #10
   18b38:	andeq	r9, r1, r0, asr #10
   18b3c:	andeq	r8, r1, r8, ror #23
   18b40:	andeq	r9, r1, r0, asr #10
   18b44:	andeq	r9, r1, r0, asr #10
   18b48:	andeq	r8, r1, r4, ror ip
   18b4c:	andeq	r9, r1, r0, asr #10
   18b50:	andeq	r9, r1, r0, asr #10
   18b54:	andeq	r9, r1, r0, asr #10
   18b58:	strdeq	r8, [r1], -r4
   18b5c:	andeq	r9, r1, r0, asr #10
   18b60:	andeq	r9, r1, r0, asr #10
   18b64:	andeq	r9, r1, r0, asr #10
   18b68:	andeq	r9, r1, r0, asr #10
   18b6c:	andeq	r8, r1, ip, asr #27
   18b70:	andeq	r9, r1, r8, lsr #2
   18b74:	andeq	r9, r1, r0, asr #10
   18b78:	andeq	r9, r1, r0, asr #10
   18b7c:	andeq	r9, r1, r0, asr #10
   18b80:	andeq	r9, r1, r0, asr #10
   18b84:	andeq	r9, r1, r0, asr #10
   18b88:	andeq	r9, r1, r0, asr #10
   18b8c:	andeq	r9, r1, r0, asr #10
   18b90:	strdeq	r9, [r1], -r8
   18b94:	strdeq	r9, [r1], -r0
   18b98:	andeq	r9, r1, r0, asr #10
   18b9c:	andeq	r9, r1, r0, asr #10
   18ba0:	andeq	r9, r1, r0, asr #10
   18ba4:	andeq	r9, r1, r8, asr #5
   18ba8:	andeq	r9, r1, r0, asr #10
   18bac:	andeq	r9, r1, r0, asr #10
   18bb0:	andeq	r9, r1, r0, asr #10
   18bb4:	andeq	r9, r1, ip, asr #10
   18bb8:	andeq	r9, r1, r0, asr #10
   18bbc:	andeq	r8, r1, r8, ror #23
   18bc0:	andeq	r9, r1, r0, asr #10
   18bc4:	andeq	r9, r1, r0, asr #10
   18bc8:	andeq	r9, r1, r0, asr #10
   18bcc:	andeq	r9, r1, r0, asr #10
   18bd0:	andeq	r9, r1, r0, asr #10
   18bd4:	andeq	r9, r1, r0, asr #10
   18bd8:	strdeq	r8, [r1], -r4
   18bdc:	andeq	r9, r1, r0, asr #10
   18be0:	andeq	r9, r1, r0, asr #10
   18be4:	ldrdeq	r9, [r1], -r4
   18be8:	mul	r0, r6, lr
   18bec:	ldrd	sl, [sp]
   18bf0:	umull	r2, r3, r6, r1
   18bf4:	mla	r0, r1, r7, r0
   18bf8:	cmp	r7, fp
   18bfc:	cmpeq	r6, sl
   18c00:	add	r3, r0, r3
   18c04:	mvnhi	r3, #0
   18c08:	mvnhi	r2, #0
   18c0c:	mul	r6, r1, r3
   18c10:	umull	r0, r1, r1, r2
   18c14:	mla	lr, lr, r2, r6
   18c18:	ldrd	r6, [sp]
   18c1c:	movhi	ip, #1
   18c20:	movls	ip, #0
   18c24:	cmp	r7, r3
   18c28:	cmpeq	r6, r2
   18c2c:	mvncc	r0, #0
   18c30:	add	r1, lr, r1
   18c34:	mov	sl, r6
   18c38:	movcc	r1, r0
   18c3c:	mov	fp, r7
   18c40:	cmp	fp, r3
   18c44:	cmpeq	sl, r2
   18c48:	mov	r6, r0
   18c4c:	mov	r7, r1
   18c50:	orrcc	ip, ip, #1
   18c54:	ldr	r2, [sp, #12]
   18c58:	orr	r4, r4, ip
   18c5c:	add	r3, r9, r2
   18c60:	str	r3, [r5]
   18c64:	ldrb	r3, [r9, r2]
   18c68:	cmp	r3, #0
   18c6c:	orrne	r4, r4, #2
   18c70:	b	1897c <__assert_fail@plt+0x7a24>
   18c74:	ldrd	sl, [sp]
   18c78:	umull	r2, r3, r6, r1
   18c7c:	mul	r0, r6, lr
   18c80:	cmp	r7, fp
   18c84:	cmpeq	r6, sl
   18c88:	mvnhi	r2, #0
   18c8c:	mla	r0, r1, r7, r0
   18c90:	umull	sl, fp, r2, r1
   18c94:	add	r3, r0, r3
   18c98:	mul	r0, lr, r2
   18c9c:	mvnhi	r3, #0
   18ca0:	strd	sl, [sp, #16]
   18ca4:	ldrd	sl, [sp]
   18ca8:	mla	r0, r1, r3, r0
   18cac:	ldr	ip, [sp, #20]
   18cb0:	cmp	r3, fp
   18cb4:	add	r0, r0, ip
   18cb8:	cmpeq	r2, sl
   18cbc:	str	r0, [sp, #20]
   18cc0:	bls	18cd8 <__assert_fail@plt+0x7d80>
   18cc4:	mvn	sl, #0
   18cc8:	mvn	fp, #0
   18ccc:	strd	sl, [sp, #16]
   18cd0:	ldr	r0, [sp, #20]
   18cd4:	ldrd	sl, [sp]
   18cd8:	cmp	r7, fp
   18cdc:	cmpeq	r6, sl
   18ce0:	mul	r0, r1, r0
   18ce4:	ldrd	r6, [sp, #16]
   18ce8:	mla	ip, lr, r6, r0
   18cec:	mov	r0, r6
   18cf0:	movhi	r0, #1
   18cf4:	movls	r0, #0
   18cf8:	cmp	r3, fp
   18cfc:	cmpeq	r2, sl
   18d00:	ldrd	r2, [sp, #16]
   18d04:	umull	r6, r7, r1, r6
   18d08:	orrhi	r0, r0, #1
   18d0c:	cmp	fp, r3
   18d10:	cmpeq	sl, r2
   18d14:	add	r7, ip, r7
   18d18:	bcc	19624 <__assert_fail@plt+0x86cc>
   18d1c:	mov	sl, r6
   18d20:	mov	fp, r7
   18d24:	strd	r6, [sp, #24]
   18d28:	mul	r3, r1, fp
   18d2c:	umull	r6, r7, r1, sl
   18d30:	mla	ip, lr, sl, r3
   18d34:	ldrd	sl, [sp]
   18d38:	ldrd	r2, [sp, #16]
   18d3c:	add	r7, ip, r7
   18d40:	cmp	fp, r3
   18d44:	cmpeq	sl, r2
   18d48:	mov	r3, fp
   18d4c:	mov	r2, sl
   18d50:	ldrd	sl, [sp, #24]
   18d54:	orrcc	r0, r0, #1
   18d58:	str	r0, [sp, #16]
   18d5c:	cmp	r3, fp
   18d60:	cmpeq	r2, sl
   18d64:	bcs	192bc <__assert_fail@plt+0x8364>
   18d68:	mvn	r2, #0
   18d6c:	mvn	r3, #0
   18d70:	mul	ip, lr, r2
   18d74:	ldrd	sl, [sp]
   18d78:	mla	ip, r1, r3, ip
   18d7c:	umull	r6, r7, r2, r1
   18d80:	ldrd	r0, [sp, #24]
   18d84:	add	r7, ip, r7
   18d88:	cmp	fp, r1
   18d8c:	ldr	r1, [sp, #16]
   18d90:	cmpeq	sl, r0
   18d94:	orrcc	r1, r1, #1
   18d98:	cmp	r3, fp
   18d9c:	cmpeq	r2, sl
   18da0:	mvnhi	r0, #0
   18da4:	movls	ip, r7
   18da8:	movhi	ip, r0
   18dac:	movls	r0, r6
   18db0:	cmp	r3, fp
   18db4:	cmpeq	r2, sl
   18db8:	mov	r7, ip
   18dbc:	mov	r6, r0
   18dc0:	movls	ip, r1
   18dc4:	orrhi	ip, r1, #1
   18dc8:	b	18c54 <__assert_fail@plt+0x7cfc>
   18dcc:	ldrd	sl, [sp]
   18dd0:	umull	r2, r3, r6, r1
   18dd4:	mul	r0, r6, lr
   18dd8:	cmp	r7, fp
   18ddc:	cmpeq	r6, sl
   18de0:	mvnhi	r2, #0
   18de4:	mla	r0, r1, r7, r0
   18de8:	umull	sl, fp, r2, r1
   18dec:	add	r3, r0, r3
   18df0:	mul	r0, lr, r2
   18df4:	mvnhi	r3, #0
   18df8:	strd	sl, [sp, #16]
   18dfc:	ldrd	sl, [sp]
   18e00:	mla	r0, r1, r3, r0
   18e04:	ldr	ip, [sp, #20]
   18e08:	cmp	r3, fp
   18e0c:	add	r0, r0, ip
   18e10:	cmpeq	r2, sl
   18e14:	str	r0, [sp, #20]
   18e18:	mvnhi	sl, #0
   18e1c:	mvnhi	fp, #0
   18e20:	strdhi	sl, [sp, #16]
   18e24:	ldrdhi	sl, [sp]
   18e28:	ldr	r0, [sp, #16]
   18e2c:	cmp	r3, fp
   18e30:	ldr	r3, [sp, #20]
   18e34:	mul	r0, lr, r0
   18e38:	cmpeq	r2, sl
   18e3c:	mla	r0, r1, r3, r0
   18e40:	ldr	r3, [sp, #16]
   18e44:	umull	r2, r3, r3, r1
   18e48:	strd	r2, [sp, #24]
   18e4c:	movhi	r3, #1
   18e50:	movls	r3, #0
   18e54:	cmp	r7, fp
   18e58:	cmpeq	r6, sl
   18e5c:	ldrd	r6, [sp, #16]
   18e60:	ldr	r2, [sp, #28]
   18e64:	movls	ip, r3
   18e68:	orrhi	ip, r3, #1
   18e6c:	cmp	r7, fp
   18e70:	add	r2, r0, r2
   18e74:	cmpeq	r6, sl
   18e78:	str	r2, [sp, #28]
   18e7c:	mvnhi	r2, #0
   18e80:	mvnhi	r3, #0
   18e84:	strdhi	r2, [sp, #24]
   18e88:	ldrd	r6, [sp, #24]
   18e8c:	mul	r2, r1, r7
   18e90:	umull	sl, fp, r1, r6
   18e94:	mla	r3, lr, r6, r2
   18e98:	ldrd	r6, [sp]
   18e9c:	str	r3, [sp, #32]
   18ea0:	ldrd	r2, [sp, #16]
   18ea4:	cmp	r3, r7
   18ea8:	cmpeq	r2, r6
   18eac:	ldrd	r2, [sp, #24]
   18eb0:	orrhi	ip, ip, #1
   18eb4:	cmp	r3, r7
   18eb8:	ldr	r3, [sp, #32]
   18ebc:	cmpeq	r2, r6
   18ec0:	add	r2, r3, fp
   18ec4:	mov	fp, r2
   18ec8:	bhi	1960c <__assert_fail@plt+0x86b4>
   18ecc:	strd	sl, [sp, #16]
   18ed0:	mul	r2, r1, fp
   18ed4:	umull	r6, r7, r1, sl
   18ed8:	mla	r3, lr, sl, r2
   18edc:	ldrd	sl, [sp]
   18ee0:	str	r3, [sp, #32]
   18ee4:	ldrd	r2, [sp, #24]
   18ee8:	cmp	r3, fp
   18eec:	cmpeq	r2, sl
   18ef0:	ldrd	r2, [sp, #16]
   18ef4:	orrhi	ip, ip, #1
   18ef8:	cmp	fp, r3
   18efc:	ldr	r3, [sp, #32]
   18f00:	cmpeq	sl, r2
   18f04:	add	r2, r3, r7
   18f08:	mov	r7, r2
   18f0c:	mvncc	r7, #0
   18f10:	mvncc	r6, #0
   18f14:	mul	r2, r1, r7
   18f18:	mov	sl, r6
   18f1c:	strd	r6, [sp, #24]
   18f20:	mla	r0, lr, sl, r2
   18f24:	ldrd	r2, [sp, #16]
   18f28:	ldrd	sl, [sp]
   18f2c:	umull	r6, r7, r1, r6
   18f30:	cmp	fp, r3
   18f34:	cmpeq	sl, r2
   18f38:	mov	r3, fp
   18f3c:	mov	r2, sl
   18f40:	ldrd	sl, [sp, #24]
   18f44:	orrcc	ip, ip, #1
   18f48:	add	r7, r0, r7
   18f4c:	cmp	r3, fp
   18f50:	cmpeq	r2, sl
   18f54:	mvncc	r6, #0
   18f58:	mvncc	r7, #0
   18f5c:	umull	sl, fp, r1, r6
   18f60:	mul	r3, r1, r7
   18f64:	strd	sl, [sp, #16]
   18f68:	mla	r0, lr, r6, r3
   18f6c:	ldrd	sl, [sp, #24]
   18f70:	ldrd	r2, [sp]
   18f74:	cmp	r3, fp
   18f78:	cmpeq	r2, sl
   18f7c:	orrcc	ip, ip, #1
   18f80:	cmp	r3, r7
   18f84:	ldr	r3, [sp, #20]
   18f88:	cmpeq	r2, r6
   18f8c:	add	r3, r0, r3
   18f90:	str	r3, [sp, #20]
   18f94:	mvncc	r2, #0
   18f98:	mvncc	r3, #0
   18f9c:	ldrdcs	r2, [sp, #16]
   18fa0:	ldrd	sl, [sp]
   18fa4:	mul	r0, r1, r3
   18fa8:	cmp	fp, r7
   18fac:	str	r0, [sp, #16]
   18fb0:	cmpeq	sl, r6
   18fb4:	ldr	r6, [sp, #16]
   18fb8:	umull	r0, r1, r1, r2
   18fbc:	mla	lr, lr, r2, r6
   18fc0:	orrcc	ip, ip, #1
   18fc4:	cmp	r3, fp
   18fc8:	cmpeq	r2, sl
   18fcc:	add	r1, lr, r1
   18fd0:	bls	18fdc <__assert_fail@plt+0x8084>
   18fd4:	mvn	r0, #0
   18fd8:	mov	r1, r0
   18fdc:	cmp	r3, fp
   18fe0:	cmpeq	r2, sl
   18fe4:	mov	r6, r0
   18fe8:	mov	r7, r1
   18fec:	orrhi	ip, ip, #1
   18ff0:	b	18c54 <__assert_fail@plt+0x7cfc>
   18ff4:	ldrd	sl, [sp]
   18ff8:	umull	r2, r3, r6, r1
   18ffc:	mul	r0, r6, lr
   19000:	cmp	r7, fp
   19004:	cmpeq	r6, sl
   19008:	mvnhi	r2, #0
   1900c:	mla	r0, r1, r7, r0
   19010:	umull	sl, fp, r1, r2
   19014:	add	r3, r0, r3
   19018:	mvnhi	r3, #0
   1901c:	strd	sl, [sp, #16]
   19020:	mul	r0, r1, r3
   19024:	ldrd	sl, [sp]
   19028:	mla	r0, lr, r2, r0
   1902c:	ldr	ip, [sp, #20]
   19030:	cmp	fp, r3
   19034:	add	r0, r0, ip
   19038:	cmpeq	sl, r2
   1903c:	str	r0, [sp, #20]
   19040:	mvncc	sl, #0
   19044:	mvncc	fp, #0
   19048:	strdcc	sl, [sp, #16]
   1904c:	ldrdcc	sl, [sp]
   19050:	ldr	r0, [sp, #16]
   19054:	cmp	fp, r3
   19058:	cmpeq	sl, r2
   1905c:	mul	r0, lr, r0
   19060:	ldr	r2, [sp, #20]
   19064:	ldr	r3, [sp, #16]
   19068:	movcc	ip, #1
   1906c:	movcs	ip, #0
   19070:	cmp	r7, fp
   19074:	cmpeq	r6, sl
   19078:	ldrd	r6, [sp, #16]
   1907c:	mla	r0, r1, r2, r0
   19080:	umull	r2, r3, r3, r1
   19084:	orrhi	ip, ip, #1
   19088:	cmp	r7, fp
   1908c:	cmpeq	r6, sl
   19090:	add	r3, r0, r3
   19094:	mvnhi	r3, #0
   19098:	mvnhi	r2, #0
   1909c:	mul	r0, r1, r3
   190a0:	cmp	r7, fp
   190a4:	str	r0, [sp, #24]
   190a8:	cmpeq	r6, sl
   190ac:	ldr	r6, [sp, #24]
   190b0:	umull	r0, r1, r1, r2
   190b4:	mla	lr, lr, r2, r6
   190b8:	orrhi	ip, ip, #1
   190bc:	cmp	fp, r3
   190c0:	cmpeq	sl, r2
   190c4:	mvncc	r0, #0
   190c8:	add	r1, lr, r1
   190cc:	movcc	r1, r0
   190d0:	b	18c40 <__assert_fail@plt+0x7ce8>
   190d4:	cmp	r6, #0
   190d8:	sbcs	r3, r7, #0
   190dc:	blt	19574 <__assert_fail@plt+0x861c>
   190e0:	adds	r6, r6, r6
   190e4:	adc	r7, r7, r7
   190e8:	mov	ip, #0
   190ec:	b	18c54 <__assert_fail@plt+0x7cfc>
   190f0:	mov	ip, #0
   190f4:	b	18c54 <__assert_fail@plt+0x7cfc>
   190f8:	ldr	r3, [pc, #1396]	; 19674 <__assert_fail@plt+0x871c>
   190fc:	mvn	r2, #0
   19100:	cmp	r7, r3
   19104:	cmpeq	r6, r2
   19108:	bhi	19574 <__assert_fail@plt+0x861c>
   1910c:	lsl	r3, r7, #9
   19110:	orr	r3, r3, r6, lsr #23
   19114:	lsl	r2, r6, #9
   19118:	mov	r6, r2
   1911c:	mov	r7, r3
   19120:	mov	ip, #0
   19124:	b	18c54 <__assert_fail@plt+0x7cfc>
   19128:	ldrd	sl, [sp]
   1912c:	umull	r2, r3, r6, r1
   19130:	mul	r0, r6, lr
   19134:	cmp	r7, fp
   19138:	cmpeq	r6, sl
   1913c:	mvnhi	r2, #0
   19140:	mla	r0, r1, r7, r0
   19144:	umull	sl, fp, r2, r1
   19148:	add	r3, r0, r3
   1914c:	mul	r0, lr, r2
   19150:	mvnhi	r3, #0
   19154:	strd	sl, [sp, #16]
   19158:	ldrd	sl, [sp]
   1915c:	mla	r0, r1, r3, r0
   19160:	ldr	ip, [sp, #20]
   19164:	cmp	r3, fp
   19168:	add	r0, r0, ip
   1916c:	cmpeq	r2, sl
   19170:	str	r0, [sp, #20]
   19174:	mvnhi	sl, #0
   19178:	mvnhi	fp, #0
   1917c:	strdhi	sl, [sp, #16]
   19180:	ldrdhi	sl, [sp]
   19184:	ldr	r0, [sp, #16]
   19188:	cmp	r3, fp
   1918c:	ldr	r3, [sp, #20]
   19190:	mul	r0, lr, r0
   19194:	cmpeq	r2, sl
   19198:	mla	r0, r1, r3, r0
   1919c:	ldr	r3, [sp, #16]
   191a0:	umull	r2, r3, r3, r1
   191a4:	strd	r2, [sp, #24]
   191a8:	movhi	r3, #1
   191ac:	movls	r3, #0
   191b0:	cmp	r7, fp
   191b4:	cmpeq	r6, sl
   191b8:	ldrd	r6, [sp, #16]
   191bc:	ldr	r2, [sp, #28]
   191c0:	movls	ip, r3
   191c4:	orrhi	ip, r3, #1
   191c8:	cmp	r7, fp
   191cc:	add	r2, r0, r2
   191d0:	cmpeq	r6, sl
   191d4:	str	r2, [sp, #28]
   191d8:	mvnhi	r2, #0
   191dc:	mvnhi	r3, #0
   191e0:	strdhi	r2, [sp, #24]
   191e4:	ldrd	r6, [sp, #24]
   191e8:	mul	r2, lr, r6
   191ec:	umull	sl, fp, r6, r1
   191f0:	mla	r3, r1, r7, r2
   191f4:	ldrd	r6, [sp]
   191f8:	str	r3, [sp, #32]
   191fc:	ldrd	r2, [sp, #16]
   19200:	cmp	r3, r7
   19204:	cmpeq	r2, r6
   19208:	ldrd	r2, [sp, #24]
   1920c:	orrhi	ip, ip, #1
   19210:	cmp	r3, r7
   19214:	ldr	r3, [sp, #32]
   19218:	cmpeq	r2, r6
   1921c:	add	r2, r3, fp
   19220:	mov	fp, r2
   19224:	bhi	1963c <__assert_fail@plt+0x86e4>
   19228:	strd	sl, [sp, #16]
   1922c:	mul	r2, lr, sl
   19230:	umull	r6, r7, sl, r1
   19234:	mla	r3, r1, fp, r2
   19238:	ldrd	sl, [sp]
   1923c:	str	r3, [sp, #32]
   19240:	ldrd	r2, [sp, #24]
   19244:	cmp	r3, fp
   19248:	cmpeq	r2, sl
   1924c:	ldrd	r2, [sp, #16]
   19250:	orrhi	ip, ip, #1
   19254:	cmp	r3, fp
   19258:	ldr	r3, [sp, #32]
   1925c:	cmpeq	r2, sl
   19260:	add	r2, r3, r7
   19264:	mov	r7, r2
   19268:	mvnhi	r7, #0
   1926c:	mvnhi	r6, #0
   19270:	mul	r2, r1, r7
   19274:	mov	sl, r6
   19278:	strd	r6, [sp, #24]
   1927c:	mla	r0, lr, sl, r2
   19280:	ldrd	sl, [sp]
   19284:	ldrd	r2, [sp, #16]
   19288:	umull	r6, r7, r1, r6
   1928c:	cmp	r3, fp
   19290:	cmpeq	r2, sl
   19294:	mov	r3, ip
   19298:	orrhi	r3, r3, #1
   1929c:	mov	r2, sl
   192a0:	str	r3, [sp, #16]
   192a4:	mov	r3, fp
   192a8:	ldrd	sl, [sp, #24]
   192ac:	add	r7, r0, r7
   192b0:	cmp	r3, fp
   192b4:	cmpeq	r2, sl
   192b8:	bcc	18d68 <__assert_fail@plt+0x7e10>
   192bc:	mov	r2, r6
   192c0:	mov	r3, r7
   192c4:	b	18d70 <__assert_fail@plt+0x7e18>
   192c8:	ldrd	sl, [sp]
   192cc:	umull	r2, r3, r6, r1
   192d0:	mul	r0, r6, lr
   192d4:	cmp	r7, fp
   192d8:	cmpeq	r6, sl
   192dc:	mvnhi	r2, #0
   192e0:	mla	r0, r1, r7, r0
   192e4:	umull	sl, fp, r2, r1
   192e8:	add	r3, r0, r3
   192ec:	mul	r0, lr, r2
   192f0:	mvnhi	r3, #0
   192f4:	strd	sl, [sp, #16]
   192f8:	ldrd	sl, [sp]
   192fc:	mla	r0, r1, r3, r0
   19300:	ldr	ip, [sp, #20]
   19304:	cmp	r3, fp
   19308:	add	r0, r0, ip
   1930c:	cmpeq	r2, sl
   19310:	str	r0, [sp, #20]
   19314:	mvnhi	sl, #0
   19318:	mvnhi	fp, #0
   1931c:	strdhi	sl, [sp, #16]
   19320:	ldrdhi	sl, [sp]
   19324:	ldr	r0, [sp, #16]
   19328:	cmp	r3, fp
   1932c:	ldr	ip, [sp, #20]
   19330:	mul	r0, lr, r0
   19334:	ldr	r3, [sp, #16]
   19338:	cmpeq	r2, sl
   1933c:	mla	r0, r1, ip, r0
   19340:	umull	r2, r3, r3, r1
   19344:	movhi	r1, #1
   19348:	movls	r1, #0
   1934c:	cmp	r7, fp
   19350:	cmpeq	r6, sl
   19354:	ldrd	r6, [sp, #16]
   19358:	movls	ip, r1
   1935c:	orrhi	ip, r1, #1
   19360:	cmp	r7, fp
   19364:	cmpeq	r6, sl
   19368:	mvnhi	r2, #0
   1936c:	add	r3, r0, r3
   19370:	movhi	r3, r2
   19374:	cmp	r7, fp
   19378:	cmpeq	r6, sl
   1937c:	mov	r7, r3
   19380:	mov	r6, r2
   19384:	orrhi	ip, ip, #1
   19388:	b	18c54 <__assert_fail@plt+0x7cfc>
   1938c:	ldrd	sl, [sp]
   19390:	umull	r2, r3, r6, r1
   19394:	mul	r0, r6, lr
   19398:	cmp	r7, fp
   1939c:	cmpeq	r6, sl
   193a0:	mvnhi	r2, #0
   193a4:	mla	r0, r1, r7, r0
   193a8:	umull	sl, fp, r1, r2
   193ac:	add	r3, r0, r3
   193b0:	mvnhi	r3, #0
   193b4:	strd	sl, [sp, #16]
   193b8:	mul	r0, r1, r3
   193bc:	ldrd	sl, [sp]
   193c0:	mla	r0, lr, r2, r0
   193c4:	ldr	ip, [sp, #20]
   193c8:	cmp	fp, r3
   193cc:	add	r0, r0, ip
   193d0:	cmpeq	sl, r2
   193d4:	str	r0, [sp, #20]
   193d8:	mvncc	sl, #0
   193dc:	mvncc	fp, #0
   193e0:	strdcc	sl, [sp, #16]
   193e4:	ldrdcc	sl, [sp]
   193e8:	ldr	r0, [sp, #16]
   193ec:	cmp	fp, r3
   193f0:	ldr	r3, [sp, #20]
   193f4:	mul	r0, lr, r0
   193f8:	cmpeq	sl, r2
   193fc:	mla	r0, r1, r3, r0
   19400:	ldr	r3, [sp, #16]
   19404:	umull	r2, r3, r3, r1
   19408:	strd	r2, [sp, #24]
   1940c:	movcc	r3, #1
   19410:	movcs	r3, #0
   19414:	cmp	r7, fp
   19418:	cmpeq	r6, sl
   1941c:	movls	ip, r3
   19420:	orrhi	ip, r3, #1
   19424:	ldrd	r2, [sp, #16]
   19428:	cmp	r3, fp
   1942c:	ldr	r3, [sp, #28]
   19430:	cmpeq	r2, sl
   19434:	add	r3, r0, r3
   19438:	str	r3, [sp, #28]
   1943c:	bhi	195f4 <__assert_fail@plt+0x869c>
   19440:	ldrd	r2, [sp, #24]
   19444:	mov	sl, r2
   19448:	mov	fp, r3
   1944c:	mul	r2, lr, sl
   19450:	umull	r6, r7, sl, r1
   19454:	mla	r0, r1, fp, r2
   19458:	ldrd	r2, [sp]
   1945c:	add	r7, r0, r7
   19460:	mov	sl, r2
   19464:	mov	fp, r3
   19468:	strd	r2, [sp, #32]
   1946c:	ldrd	r2, [sp, #16]
   19470:	cmp	r3, fp
   19474:	cmpeq	r2, sl
   19478:	ldrd	r2, [sp, #32]
   1947c:	ldrd	sl, [sp, #24]
   19480:	orrhi	ip, ip, #1
   19484:	cmp	fp, r3
   19488:	cmpeq	sl, r2
   1948c:	mvnhi	r6, #0
   19490:	mvnhi	r7, #0
   19494:	umull	sl, fp, r6, r1
   19498:	mul	r3, lr, r6
   1949c:	strd	sl, [sp, #16]
   194a0:	mla	r0, r1, r7, r3
   194a4:	ldrd	sl, [sp, #24]
   194a8:	ldrd	r2, [sp]
   194ac:	cmp	fp, r3
   194b0:	cmpeq	sl, r2
   194b4:	orrhi	ip, ip, #1
   194b8:	cmp	r7, r3
   194bc:	ldr	r3, [sp, #20]
   194c0:	cmpeq	r6, r2
   194c4:	add	r3, r0, r3
   194c8:	str	r3, [sp, #20]
   194cc:	mvnhi	r2, #0
   194d0:	mvnhi	r3, #0
   194d4:	ldrdls	r2, [sp, #16]
   194d8:	ldrd	sl, [sp]
   194dc:	mul	r0, r1, r3
   194e0:	cmp	r7, fp
   194e4:	str	r0, [sp, #16]
   194e8:	cmpeq	r6, sl
   194ec:	ldr	r6, [sp, #16]
   194f0:	umull	r0, r1, r1, r2
   194f4:	mla	lr, lr, r2, r6
   194f8:	orrhi	ip, ip, #1
   194fc:	cmp	r3, fp
   19500:	cmpeq	r2, sl
   19504:	add	r1, lr, r1
   19508:	bls	18fdc <__assert_fail@plt+0x8084>
   1950c:	b	18fd4 <__assert_fail@plt+0x807c>
   19510:	ldr	r3, [pc, #344]	; 19670 <__assert_fail@plt+0x8718>
   19514:	mvn	r2, #0
   19518:	cmp	r7, r3
   1951c:	cmpeq	r6, r2
   19520:	bhi	19574 <__assert_fail@plt+0x861c>
   19524:	lsl	r3, r7, #10
   19528:	orr	r3, r3, r6, lsr #22
   1952c:	lsl	r2, r6, #10
   19530:	mov	r6, r2
   19534:	mov	r7, r3
   19538:	mov	ip, #0
   1953c:	b	18c54 <__assert_fail@plt+0x7cfc>
   19540:	strd	r6, [r8]
   19544:	orr	r4, r4, #2
   19548:	b	18924 <__assert_fail@plt+0x79cc>
   1954c:	ldrd	r2, [sp]
   19550:	cmp	r7, r3
   19554:	cmpeq	r6, r2
   19558:	bhi	19574 <__assert_fail@plt+0x861c>
   1955c:	mul	r3, r6, lr
   19560:	mov	ip, #0
   19564:	mla	r3, r1, r7, r3
   19568:	umull	r6, r7, r6, r1
   1956c:	add	r7, r3, r7
   19570:	b	18c54 <__assert_fail@plt+0x7cfc>
   19574:	mvn	r6, #0
   19578:	mvn	r7, #0
   1957c:	mov	ip, #1
   19580:	b	18c54 <__assert_fail@plt+0x7cfc>
   19584:	ldrb	r3, [r9, #2]
   19588:	mvn	r2, #0
   1958c:	mov	r1, #1024	; 0x400
   19590:	cmp	r3, #66	; 0x42
   19594:	ldr	r3, [pc, #212]	; 19670 <__assert_fail@plt+0x8718>
   19598:	mov	lr, #0
   1959c:	strd	r2, [sp]
   195a0:	moveq	r3, #3
   195a4:	streq	r3, [sp, #12]
   195a8:	movne	r3, #1
   195ac:	strne	r3, [sp, #12]
   195b0:	b	18b00 <__assert_fail@plt+0x7ba8>
   195b4:	add	r3, pc, #172	; 0xac
   195b8:	ldrd	r2, [r3]
   195bc:	mov	r1, #1000	; 0x3e8
   195c0:	mov	lr, #0
   195c4:	strd	r2, [sp]
   195c8:	mov	r3, #2
   195cc:	str	r3, [sp, #12]
   195d0:	b	18b00 <__assert_fail@plt+0x7ba8>
   195d4:	ldr	r3, [pc, #148]	; 19670 <__assert_fail@plt+0x8718>
   195d8:	mvn	r2, #0
   195dc:	mov	lr, r0
   195e0:	strd	r2, [sp]
   195e4:	mov	r3, #1
   195e8:	mov	r1, #1024	; 0x400
   195ec:	str	r3, [sp, #12]
   195f0:	b	18b00 <__assert_fail@plt+0x7ba8>
   195f4:	mvn	r2, #0
   195f8:	mvn	r3, #0
   195fc:	mov	sl, r2
   19600:	strd	r2, [sp, #24]
   19604:	mov	fp, r3
   19608:	b	1944c <__assert_fail@plt+0x84f4>
   1960c:	mvn	r2, #0
   19610:	mvn	r3, #0
   19614:	mov	sl, r2
   19618:	strd	r2, [sp, #16]
   1961c:	mov	fp, r3
   19620:	b	18ed0 <__assert_fail@plt+0x7f78>
   19624:	mvn	r2, #0
   19628:	mvn	r3, #0
   1962c:	mov	sl, r2
   19630:	strd	r2, [sp, #24]
   19634:	mov	fp, r3
   19638:	b	18d28 <__assert_fail@plt+0x7dd0>
   1963c:	mvn	r2, #0
   19640:	mvn	r3, #0
   19644:	mov	sl, r2
   19648:	strd	r2, [sp, #16]
   1964c:	mov	fp, r3
   19650:	b	1922c <__assert_fail@plt+0x82d4>
   19654:	ldr	r3, [pc, #28]	; 19678 <__assert_fail@plt+0x8720>
   19658:	mov	r2, #85	; 0x55
   1965c:	ldr	r1, [pc, #24]	; 1967c <__assert_fail@plt+0x8724>
   19660:	ldr	r0, [pc, #24]	; 19680 <__assert_fail@plt+0x8728>
   19664:	bl	10f58 <__assert_fail@plt>
   19668:	blmi	ff1c362c <optarg@@GLIBC_2.4+0xff1974d4>
   1966c:	subeq	r8, r1, r7, lsr r9
   19670:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   19674:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   19678:	andeq	fp, r1, r8, lsl r0
   1967c:	andeq	fp, r1, r4, lsr #32
   19680:	andeq	fp, r1, r4, lsr r0
   19684:	cmp	r1, #0
   19688:	cmpne	r0, #0
   1968c:	moveq	r1, #1
   19690:	moveq	r0, r1
   19694:	umull	r2, r3, r0, r1
   19698:	adds	r3, r3, #0
   1969c:	movne	r3, #1
   196a0:	cmp	r2, #0
   196a4:	blt	196b4 <__assert_fail@plt+0x875c>
   196a8:	cmp	r3, #0
   196ac:	bne	196b4 <__assert_fail@plt+0x875c>
   196b0:	b	10cd0 <calloc@plt>
   196b4:	push	{r4, lr}
   196b8:	bl	10e8c <__errno_location@plt>
   196bc:	mov	r3, #12
   196c0:	str	r3, [r0]
   196c4:	mov	r0, #0
   196c8:	pop	{r4, pc}
   196cc:	cmp	r0, #0
   196d0:	moveq	r0, #1
   196d4:	cmp	r0, #0
   196d8:	blt	196e0 <__assert_fail@plt+0x8788>
   196dc:	b	10e14 <malloc@plt>
   196e0:	push	{r4, lr}
   196e4:	bl	10e8c <__errno_location@plt>
   196e8:	mov	r3, #12
   196ec:	str	r3, [r0]
   196f0:	mov	r0, #0
   196f4:	pop	{r4, pc}
   196f8:	cmp	r0, #0
   196fc:	beq	19720 <__assert_fail@plt+0x87c8>
   19700:	cmp	r1, #0
   19704:	push	{lr}		; (str lr, [sp, #-4]!)
   19708:	sub	sp, sp, #12
   1970c:	beq	19728 <__assert_fail@plt+0x87d0>
   19710:	blt	19740 <__assert_fail@plt+0x87e8>
   19714:	add	sp, sp, #12
   19718:	pop	{lr}		; (ldr lr, [sp], #4)
   1971c:	b	10d84 <realloc@plt>
   19720:	mov	r0, r1
   19724:	b	196cc <__assert_fail@plt+0x8774>
   19728:	str	r1, [sp, #4]
   1972c:	bl	132c8 <__assert_fail@plt+0x2370>
   19730:	ldr	r3, [sp, #4]
   19734:	mov	r0, r3
   19738:	add	sp, sp, #12
   1973c:	pop	{pc}		; (ldr pc, [sp], #4)
   19740:	bl	10e8c <__errno_location@plt>
   19744:	mov	r2, #12
   19748:	mov	r3, #0
   1974c:	str	r2, [r0]
   19750:	b	19734 <__assert_fail@plt+0x87dc>
   19754:	push	{r4, r5, r6, lr}
   19758:	mov	r4, r0
   1975c:	bl	10de4 <__fpending@plt>
   19760:	ldr	r5, [r4]
   19764:	and	r5, r5, #32
   19768:	mov	r6, r0
   1976c:	mov	r0, r4
   19770:	bl	197d0 <__assert_fail@plt+0x8878>
   19774:	cmp	r5, #0
   19778:	mov	r4, r0
   1977c:	bne	1979c <__assert_fail@plt+0x8844>
   19780:	cmp	r0, #0
   19784:	beq	19794 <__assert_fail@plt+0x883c>
   19788:	cmp	r6, #0
   1978c:	beq	197b8 <__assert_fail@plt+0x8860>
   19790:	mvn	r4, #0
   19794:	mov	r0, r4
   19798:	pop	{r4, r5, r6, pc}
   1979c:	cmp	r0, #0
   197a0:	bne	19790 <__assert_fail@plt+0x8838>
   197a4:	bl	10e8c <__errno_location@plt>
   197a8:	str	r4, [r0]
   197ac:	mvn	r4, #0
   197b0:	mov	r0, r4
   197b4:	pop	{r4, r5, r6, pc}
   197b8:	bl	10e8c <__errno_location@plt>
   197bc:	ldr	r4, [r0]
   197c0:	subs	r4, r4, #9
   197c4:	mvnne	r4, #0
   197c8:	mov	r0, r4
   197cc:	pop	{r4, r5, r6, pc}
   197d0:	push	{r4, r5, lr}
   197d4:	sub	sp, sp, #12
   197d8:	mov	r4, r0
   197dc:	bl	10ebc <fileno@plt>
   197e0:	cmp	r0, #0
   197e4:	mov	r0, r4
   197e8:	blt	19864 <__assert_fail@plt+0x890c>
   197ec:	bl	10e2c <__freading@plt>
   197f0:	cmp	r0, #0
   197f4:	bne	19830 <__assert_fail@plt+0x88d8>
   197f8:	mov	r0, r4
   197fc:	bl	19870 <__assert_fail@plt+0x8918>
   19800:	cmp	r0, #0
   19804:	beq	19860 <__assert_fail@plt+0x8908>
   19808:	bl	10e8c <__errno_location@plt>
   1980c:	mov	r5, r0
   19810:	mov	r0, r4
   19814:	ldr	r4, [r5]
   19818:	bl	10ee0 <fclose@plt>
   1981c:	cmp	r4, #0
   19820:	mvnne	r0, #0
   19824:	strne	r4, [r5]
   19828:	add	sp, sp, #12
   1982c:	pop	{r4, r5, pc}
   19830:	mov	r0, r4
   19834:	bl	10ebc <fileno@plt>
   19838:	mov	r3, #1
   1983c:	str	r3, [sp]
   19840:	mov	r2, #0
   19844:	mov	r3, #0
   19848:	bl	10dcc <lseek64@plt>
   1984c:	mvn	r3, #0
   19850:	mvn	r2, #0
   19854:	cmp	r1, r3
   19858:	cmpeq	r0, r2
   1985c:	bne	197f8 <__assert_fail@plt+0x88a0>
   19860:	mov	r0, r4
   19864:	add	sp, sp, #12
   19868:	pop	{r4, r5, lr}
   1986c:	b	10ee0 <fclose@plt>
   19870:	push	{r4, lr}
   19874:	subs	r4, r0, #0
   19878:	sub	sp, sp, #8
   1987c:	beq	19898 <__assert_fail@plt+0x8940>
   19880:	bl	10e2c <__freading@plt>
   19884:	cmp	r0, #0
   19888:	beq	19898 <__assert_fail@plt+0x8940>
   1988c:	ldr	r3, [r4]
   19890:	tst	r3, #256	; 0x100
   19894:	bne	198a8 <__assert_fail@plt+0x8950>
   19898:	mov	r0, r4
   1989c:	add	sp, sp, #8
   198a0:	pop	{r4, lr}
   198a4:	b	10d0c <fflush@plt>
   198a8:	mov	r3, #1
   198ac:	str	r3, [sp]
   198b0:	mov	r2, #0
   198b4:	mov	r3, #0
   198b8:	mov	r0, r4
   198bc:	bl	198d0 <__assert_fail@plt+0x8978>
   198c0:	mov	r0, r4
   198c4:	add	sp, sp, #8
   198c8:	pop	{r4, lr}
   198cc:	b	10d0c <fflush@plt>
   198d0:	push	{r4, r5, r6, r7, r8, lr}
   198d4:	sub	sp, sp, #8
   198d8:	ldmib	r0, {ip, lr}
   198dc:	mov	r4, r0
   198e0:	ldr	r5, [sp, #32]
   198e4:	cmp	lr, ip
   198e8:	beq	19900 <__assert_fail@plt+0x89a8>
   198ec:	str	r5, [sp, #32]
   198f0:	mov	r0, r4
   198f4:	add	sp, sp, #8
   198f8:	pop	{r4, r5, r6, r7, r8, lr}
   198fc:	b	10eec <fseeko64@plt>
   19900:	ldr	lr, [r0, #20]
   19904:	ldr	ip, [r0, #16]
   19908:	cmp	lr, ip
   1990c:	bne	198ec <__assert_fail@plt+0x8994>
   19910:	ldr	r8, [r0, #36]	; 0x24
   19914:	cmp	r8, #0
   19918:	bne	198ec <__assert_fail@plt+0x8994>
   1991c:	mov	r6, r2
   19920:	mov	r7, r3
   19924:	bl	10ebc <fileno@plt>
   19928:	mov	r2, r6
   1992c:	mov	r3, r7
   19930:	str	r5, [sp]
   19934:	bl	10dcc <lseek64@plt>
   19938:	mvn	r3, #0
   1993c:	mvn	r2, #0
   19940:	cmp	r1, r3
   19944:	cmpeq	r0, r2
   19948:	beq	19968 <__assert_fail@plt+0x8a10>
   1994c:	ldr	r3, [r4]
   19950:	strd	r0, [r4, #80]	; 0x50
   19954:	mov	r0, r8
   19958:	bic	r3, r3, #16
   1995c:	str	r3, [r4]
   19960:	add	sp, sp, #8
   19964:	pop	{r4, r5, r6, r7, r8, pc}
   19968:	mvn	r0, #0
   1996c:	b	19960 <__assert_fail@plt+0x8a08>
   19970:	push	{r4, lr}
   19974:	mov	r0, #14
   19978:	bl	10f10 <nl_langinfo@plt>
   1997c:	cmp	r0, #0
   19980:	beq	19998 <__assert_fail@plt+0x8a40>
   19984:	ldrb	r2, [r0]
   19988:	ldr	r3, [pc, #16]	; 199a0 <__assert_fail@plt+0x8a48>
   1998c:	cmp	r2, #0
   19990:	moveq	r0, r3
   19994:	pop	{r4, pc}
   19998:	ldr	r0, [pc]	; 199a0 <__assert_fail@plt+0x8a48>
   1999c:	pop	{r4, pc}
   199a0:	andeq	fp, r1, ip, asr r0
   199a4:	push	{r4, r5, r6, r7, lr}
   199a8:	subs	r6, r0, #0
   199ac:	sub	sp, sp, #12
   199b0:	addeq	r6, sp, #4
   199b4:	mov	r0, r6
   199b8:	mov	r5, r2
   199bc:	mov	r7, r1
   199c0:	bl	10df0 <mbrtowc@plt>
   199c4:	cmp	r5, #0
   199c8:	cmnne	r0, #3
   199cc:	mov	r4, r0
   199d0:	bls	199ec <__assert_fail@plt+0x8a94>
   199d4:	mov	r0, #0
   199d8:	bl	19a44 <__assert_fail@plt+0x8aec>
   199dc:	cmp	r0, #0
   199e0:	moveq	r4, #1
   199e4:	ldrbeq	r3, [r7]
   199e8:	streq	r3, [r6]
   199ec:	mov	r0, r4
   199f0:	add	sp, sp, #12
   199f4:	pop	{r4, r5, r6, r7, pc}
   199f8:	push	{r4, r5, r6, lr}
   199fc:	subs	r4, r2, #0
   19a00:	mov	r6, r0
   19a04:	mov	r5, r1
   19a08:	beq	19a34 <__assert_fail@plt+0x8adc>
   19a0c:	mov	r1, r4
   19a10:	mvn	r0, #0
   19a14:	bl	19b38 <__assert_fail@plt+0x8be0>
   19a18:	cmp	r0, r5
   19a1c:	bcs	19a34 <__assert_fail@plt+0x8adc>
   19a20:	bl	10e8c <__errno_location@plt>
   19a24:	mov	r3, #12
   19a28:	str	r3, [r0]
   19a2c:	mov	r0, #0
   19a30:	pop	{r4, r5, r6, pc}
   19a34:	mul	r1, r5, r4
   19a38:	mov	r0, r6
   19a3c:	pop	{r4, r5, r6, lr}
   19a40:	b	196f8 <__assert_fail@plt+0x87a0>
   19a44:	push	{lr}		; (str lr, [sp, #-4]!)
   19a48:	sub	sp, sp, #268	; 0x10c
   19a4c:	add	r1, sp, #4
   19a50:	ldr	r2, [pc, #60]	; 19a94 <__assert_fail@plt+0x8b3c>
   19a54:	bl	19aa0 <__assert_fail@plt+0x8b48>
   19a58:	cmp	r0, #0
   19a5c:	movne	r0, #0
   19a60:	bne	19a8c <__assert_fail@plt+0x8b34>
   19a64:	ldr	r1, [pc, #44]	; 19a98 <__assert_fail@plt+0x8b40>
   19a68:	add	r0, sp, #4
   19a6c:	bl	10cf4 <strcmp@plt>
   19a70:	cmp	r0, #0
   19a74:	beq	19a8c <__assert_fail@plt+0x8b34>
   19a78:	add	r0, sp, #4
   19a7c:	ldr	r1, [pc, #24]	; 19a9c <__assert_fail@plt+0x8b44>
   19a80:	bl	10cf4 <strcmp@plt>
   19a84:	adds	r0, r0, #0
   19a88:	movne	r0, #1
   19a8c:	add	sp, sp, #268	; 0x10c
   19a90:	pop	{pc}		; (ldr pc, [sp], #4)
   19a94:	andeq	r0, r0, r1, lsl #2
   19a98:	andeq	fp, r1, r4, rrx
   19a9c:	andeq	fp, r1, r8, rrx
   19aa0:	push	{r4, r5, r6, lr}
   19aa4:	mov	r5, r1
   19aa8:	mov	r1, #0
   19aac:	mov	r4, r2
   19ab0:	bl	10ef8 <setlocale@plt>
   19ab4:	subs	r6, r0, #0
   19ab8:	beq	19b14 <__assert_fail@plt+0x8bbc>
   19abc:	bl	10e68 <strlen@plt>
   19ac0:	cmp	r4, r0
   19ac4:	bhi	19afc <__assert_fail@plt+0x8ba4>
   19ac8:	cmp	r4, #0
   19acc:	bne	19ad8 <__assert_fail@plt+0x8b80>
   19ad0:	mov	r0, #34	; 0x22
   19ad4:	pop	{r4, r5, r6, pc}
   19ad8:	sub	r4, r4, #1
   19adc:	mov	r1, r6
   19ae0:	mov	r2, r4
   19ae4:	mov	r0, r5
   19ae8:	bl	10d30 <memcpy@plt>
   19aec:	mov	r3, #0
   19af0:	strb	r3, [r5, r4]
   19af4:	mov	r0, #34	; 0x22
   19af8:	pop	{r4, r5, r6, pc}
   19afc:	add	r2, r0, #1
   19b00:	mov	r1, r6
   19b04:	mov	r0, r5
   19b08:	bl	10d30 <memcpy@plt>
   19b0c:	mov	r0, #0
   19b10:	pop	{r4, r5, r6, pc}
   19b14:	cmp	r4, #0
   19b18:	beq	19b28 <__assert_fail@plt+0x8bd0>
   19b1c:	strb	r6, [r5]
   19b20:	mov	r0, #22
   19b24:	pop	{r4, r5, r6, pc}
   19b28:	mov	r0, #22
   19b2c:	pop	{r4, r5, r6, pc}
   19b30:	mov	r1, #0
   19b34:	b	10ef8 <setlocale@plt>
   19b38:	subs	r2, r1, #1
   19b3c:	bxeq	lr
   19b40:	bcc	19d18 <__assert_fail@plt+0x8dc0>
   19b44:	cmp	r0, r1
   19b48:	bls	19cfc <__assert_fail@plt+0x8da4>
   19b4c:	tst	r1, r2
   19b50:	beq	19d08 <__assert_fail@plt+0x8db0>
   19b54:	clz	r3, r0
   19b58:	clz	r2, r1
   19b5c:	sub	r3, r2, r3
   19b60:	rsbs	r3, r3, #31
   19b64:	addne	r3, r3, r3, lsl #1
   19b68:	mov	r2, #0
   19b6c:	addne	pc, pc, r3, lsl #2
   19b70:	nop			; (mov r0, r0)
   19b74:	cmp	r0, r1, lsl #31
   19b78:	adc	r2, r2, r2
   19b7c:	subcs	r0, r0, r1, lsl #31
   19b80:	cmp	r0, r1, lsl #30
   19b84:	adc	r2, r2, r2
   19b88:	subcs	r0, r0, r1, lsl #30
   19b8c:	cmp	r0, r1, lsl #29
   19b90:	adc	r2, r2, r2
   19b94:	subcs	r0, r0, r1, lsl #29
   19b98:	cmp	r0, r1, lsl #28
   19b9c:	adc	r2, r2, r2
   19ba0:	subcs	r0, r0, r1, lsl #28
   19ba4:	cmp	r0, r1, lsl #27
   19ba8:	adc	r2, r2, r2
   19bac:	subcs	r0, r0, r1, lsl #27
   19bb0:	cmp	r0, r1, lsl #26
   19bb4:	adc	r2, r2, r2
   19bb8:	subcs	r0, r0, r1, lsl #26
   19bbc:	cmp	r0, r1, lsl #25
   19bc0:	adc	r2, r2, r2
   19bc4:	subcs	r0, r0, r1, lsl #25
   19bc8:	cmp	r0, r1, lsl #24
   19bcc:	adc	r2, r2, r2
   19bd0:	subcs	r0, r0, r1, lsl #24
   19bd4:	cmp	r0, r1, lsl #23
   19bd8:	adc	r2, r2, r2
   19bdc:	subcs	r0, r0, r1, lsl #23
   19be0:	cmp	r0, r1, lsl #22
   19be4:	adc	r2, r2, r2
   19be8:	subcs	r0, r0, r1, lsl #22
   19bec:	cmp	r0, r1, lsl #21
   19bf0:	adc	r2, r2, r2
   19bf4:	subcs	r0, r0, r1, lsl #21
   19bf8:	cmp	r0, r1, lsl #20
   19bfc:	adc	r2, r2, r2
   19c00:	subcs	r0, r0, r1, lsl #20
   19c04:	cmp	r0, r1, lsl #19
   19c08:	adc	r2, r2, r2
   19c0c:	subcs	r0, r0, r1, lsl #19
   19c10:	cmp	r0, r1, lsl #18
   19c14:	adc	r2, r2, r2
   19c18:	subcs	r0, r0, r1, lsl #18
   19c1c:	cmp	r0, r1, lsl #17
   19c20:	adc	r2, r2, r2
   19c24:	subcs	r0, r0, r1, lsl #17
   19c28:	cmp	r0, r1, lsl #16
   19c2c:	adc	r2, r2, r2
   19c30:	subcs	r0, r0, r1, lsl #16
   19c34:	cmp	r0, r1, lsl #15
   19c38:	adc	r2, r2, r2
   19c3c:	subcs	r0, r0, r1, lsl #15
   19c40:	cmp	r0, r1, lsl #14
   19c44:	adc	r2, r2, r2
   19c48:	subcs	r0, r0, r1, lsl #14
   19c4c:	cmp	r0, r1, lsl #13
   19c50:	adc	r2, r2, r2
   19c54:	subcs	r0, r0, r1, lsl #13
   19c58:	cmp	r0, r1, lsl #12
   19c5c:	adc	r2, r2, r2
   19c60:	subcs	r0, r0, r1, lsl #12
   19c64:	cmp	r0, r1, lsl #11
   19c68:	adc	r2, r2, r2
   19c6c:	subcs	r0, r0, r1, lsl #11
   19c70:	cmp	r0, r1, lsl #10
   19c74:	adc	r2, r2, r2
   19c78:	subcs	r0, r0, r1, lsl #10
   19c7c:	cmp	r0, r1, lsl #9
   19c80:	adc	r2, r2, r2
   19c84:	subcs	r0, r0, r1, lsl #9
   19c88:	cmp	r0, r1, lsl #8
   19c8c:	adc	r2, r2, r2
   19c90:	subcs	r0, r0, r1, lsl #8
   19c94:	cmp	r0, r1, lsl #7
   19c98:	adc	r2, r2, r2
   19c9c:	subcs	r0, r0, r1, lsl #7
   19ca0:	cmp	r0, r1, lsl #6
   19ca4:	adc	r2, r2, r2
   19ca8:	subcs	r0, r0, r1, lsl #6
   19cac:	cmp	r0, r1, lsl #5
   19cb0:	adc	r2, r2, r2
   19cb4:	subcs	r0, r0, r1, lsl #5
   19cb8:	cmp	r0, r1, lsl #4
   19cbc:	adc	r2, r2, r2
   19cc0:	subcs	r0, r0, r1, lsl #4
   19cc4:	cmp	r0, r1, lsl #3
   19cc8:	adc	r2, r2, r2
   19ccc:	subcs	r0, r0, r1, lsl #3
   19cd0:	cmp	r0, r1, lsl #2
   19cd4:	adc	r2, r2, r2
   19cd8:	subcs	r0, r0, r1, lsl #2
   19cdc:	cmp	r0, r1, lsl #1
   19ce0:	adc	r2, r2, r2
   19ce4:	subcs	r0, r0, r1, lsl #1
   19ce8:	cmp	r0, r1
   19cec:	adc	r2, r2, r2
   19cf0:	subcs	r0, r0, r1
   19cf4:	mov	r0, r2
   19cf8:	bx	lr
   19cfc:	moveq	r0, #1
   19d00:	movne	r0, #0
   19d04:	bx	lr
   19d08:	clz	r2, r1
   19d0c:	rsb	r2, r2, #31
   19d10:	lsr	r0, r0, r2
   19d14:	bx	lr
   19d18:	cmp	r0, #0
   19d1c:	mvnne	r0, #0
   19d20:	b	1a094 <__assert_fail@plt+0x913c>
   19d24:	cmp	r1, #0
   19d28:	beq	19d18 <__assert_fail@plt+0x8dc0>
   19d2c:	push	{r0, r1, lr}
   19d30:	bl	19b38 <__assert_fail@plt+0x8be0>
   19d34:	pop	{r1, r2, lr}
   19d38:	mul	r3, r2, r0
   19d3c:	sub	r1, r1, r3
   19d40:	bx	lr
   19d44:	cmp	r1, #0
   19d48:	beq	19f54 <__assert_fail@plt+0x8ffc>
   19d4c:	eor	ip, r0, r1
   19d50:	rsbmi	r1, r1, #0
   19d54:	subs	r2, r1, #1
   19d58:	beq	19f20 <__assert_fail@plt+0x8fc8>
   19d5c:	movs	r3, r0
   19d60:	rsbmi	r3, r0, #0
   19d64:	cmp	r3, r1
   19d68:	bls	19f2c <__assert_fail@plt+0x8fd4>
   19d6c:	tst	r1, r2
   19d70:	beq	19f3c <__assert_fail@plt+0x8fe4>
   19d74:	clz	r2, r3
   19d78:	clz	r0, r1
   19d7c:	sub	r2, r0, r2
   19d80:	rsbs	r2, r2, #31
   19d84:	addne	r2, r2, r2, lsl #1
   19d88:	mov	r0, #0
   19d8c:	addne	pc, pc, r2, lsl #2
   19d90:	nop			; (mov r0, r0)
   19d94:	cmp	r3, r1, lsl #31
   19d98:	adc	r0, r0, r0
   19d9c:	subcs	r3, r3, r1, lsl #31
   19da0:	cmp	r3, r1, lsl #30
   19da4:	adc	r0, r0, r0
   19da8:	subcs	r3, r3, r1, lsl #30
   19dac:	cmp	r3, r1, lsl #29
   19db0:	adc	r0, r0, r0
   19db4:	subcs	r3, r3, r1, lsl #29
   19db8:	cmp	r3, r1, lsl #28
   19dbc:	adc	r0, r0, r0
   19dc0:	subcs	r3, r3, r1, lsl #28
   19dc4:	cmp	r3, r1, lsl #27
   19dc8:	adc	r0, r0, r0
   19dcc:	subcs	r3, r3, r1, lsl #27
   19dd0:	cmp	r3, r1, lsl #26
   19dd4:	adc	r0, r0, r0
   19dd8:	subcs	r3, r3, r1, lsl #26
   19ddc:	cmp	r3, r1, lsl #25
   19de0:	adc	r0, r0, r0
   19de4:	subcs	r3, r3, r1, lsl #25
   19de8:	cmp	r3, r1, lsl #24
   19dec:	adc	r0, r0, r0
   19df0:	subcs	r3, r3, r1, lsl #24
   19df4:	cmp	r3, r1, lsl #23
   19df8:	adc	r0, r0, r0
   19dfc:	subcs	r3, r3, r1, lsl #23
   19e00:	cmp	r3, r1, lsl #22
   19e04:	adc	r0, r0, r0
   19e08:	subcs	r3, r3, r1, lsl #22
   19e0c:	cmp	r3, r1, lsl #21
   19e10:	adc	r0, r0, r0
   19e14:	subcs	r3, r3, r1, lsl #21
   19e18:	cmp	r3, r1, lsl #20
   19e1c:	adc	r0, r0, r0
   19e20:	subcs	r3, r3, r1, lsl #20
   19e24:	cmp	r3, r1, lsl #19
   19e28:	adc	r0, r0, r0
   19e2c:	subcs	r3, r3, r1, lsl #19
   19e30:	cmp	r3, r1, lsl #18
   19e34:	adc	r0, r0, r0
   19e38:	subcs	r3, r3, r1, lsl #18
   19e3c:	cmp	r3, r1, lsl #17
   19e40:	adc	r0, r0, r0
   19e44:	subcs	r3, r3, r1, lsl #17
   19e48:	cmp	r3, r1, lsl #16
   19e4c:	adc	r0, r0, r0
   19e50:	subcs	r3, r3, r1, lsl #16
   19e54:	cmp	r3, r1, lsl #15
   19e58:	adc	r0, r0, r0
   19e5c:	subcs	r3, r3, r1, lsl #15
   19e60:	cmp	r3, r1, lsl #14
   19e64:	adc	r0, r0, r0
   19e68:	subcs	r3, r3, r1, lsl #14
   19e6c:	cmp	r3, r1, lsl #13
   19e70:	adc	r0, r0, r0
   19e74:	subcs	r3, r3, r1, lsl #13
   19e78:	cmp	r3, r1, lsl #12
   19e7c:	adc	r0, r0, r0
   19e80:	subcs	r3, r3, r1, lsl #12
   19e84:	cmp	r3, r1, lsl #11
   19e88:	adc	r0, r0, r0
   19e8c:	subcs	r3, r3, r1, lsl #11
   19e90:	cmp	r3, r1, lsl #10
   19e94:	adc	r0, r0, r0
   19e98:	subcs	r3, r3, r1, lsl #10
   19e9c:	cmp	r3, r1, lsl #9
   19ea0:	adc	r0, r0, r0
   19ea4:	subcs	r3, r3, r1, lsl #9
   19ea8:	cmp	r3, r1, lsl #8
   19eac:	adc	r0, r0, r0
   19eb0:	subcs	r3, r3, r1, lsl #8
   19eb4:	cmp	r3, r1, lsl #7
   19eb8:	adc	r0, r0, r0
   19ebc:	subcs	r3, r3, r1, lsl #7
   19ec0:	cmp	r3, r1, lsl #6
   19ec4:	adc	r0, r0, r0
   19ec8:	subcs	r3, r3, r1, lsl #6
   19ecc:	cmp	r3, r1, lsl #5
   19ed0:	adc	r0, r0, r0
   19ed4:	subcs	r3, r3, r1, lsl #5
   19ed8:	cmp	r3, r1, lsl #4
   19edc:	adc	r0, r0, r0
   19ee0:	subcs	r3, r3, r1, lsl #4
   19ee4:	cmp	r3, r1, lsl #3
   19ee8:	adc	r0, r0, r0
   19eec:	subcs	r3, r3, r1, lsl #3
   19ef0:	cmp	r3, r1, lsl #2
   19ef4:	adc	r0, r0, r0
   19ef8:	subcs	r3, r3, r1, lsl #2
   19efc:	cmp	r3, r1, lsl #1
   19f00:	adc	r0, r0, r0
   19f04:	subcs	r3, r3, r1, lsl #1
   19f08:	cmp	r3, r1
   19f0c:	adc	r0, r0, r0
   19f10:	subcs	r3, r3, r1
   19f14:	cmp	ip, #0
   19f18:	rsbmi	r0, r0, #0
   19f1c:	bx	lr
   19f20:	teq	ip, r0
   19f24:	rsbmi	r0, r0, #0
   19f28:	bx	lr
   19f2c:	movcc	r0, #0
   19f30:	asreq	r0, ip, #31
   19f34:	orreq	r0, r0, #1
   19f38:	bx	lr
   19f3c:	clz	r2, r1
   19f40:	rsb	r2, r2, #31
   19f44:	cmp	ip, #0
   19f48:	lsr	r0, r3, r2
   19f4c:	rsbmi	r0, r0, #0
   19f50:	bx	lr
   19f54:	cmp	r0, #0
   19f58:	mvngt	r0, #-2147483648	; 0x80000000
   19f5c:	movlt	r0, #-2147483648	; 0x80000000
   19f60:	b	1a094 <__assert_fail@plt+0x913c>
   19f64:	cmp	r1, #0
   19f68:	beq	19f54 <__assert_fail@plt+0x8ffc>
   19f6c:	push	{r0, r1, lr}
   19f70:	bl	19d4c <__assert_fail@plt+0x8df4>
   19f74:	pop	{r1, r2, lr}
   19f78:	mul	r3, r2, r0
   19f7c:	sub	r1, r1, r3
   19f80:	bx	lr
   19f84:	cmp	r3, #0
   19f88:	cmpeq	r2, #0
   19f8c:	bne	19fb0 <__assert_fail@plt+0x9058>
   19f90:	cmp	r1, #0
   19f94:	movlt	r1, #-2147483648	; 0x80000000
   19f98:	movlt	r0, #0
   19f9c:	blt	19fac <__assert_fail@plt+0x9054>
   19fa0:	cmpeq	r0, #0
   19fa4:	mvnne	r1, #-2147483648	; 0x80000000
   19fa8:	mvnne	r0, #0
   19fac:	b	1a094 <__assert_fail@plt+0x913c>
   19fb0:	sub	sp, sp, #8
   19fb4:	push	{sp, lr}
   19fb8:	cmp	r1, #0
   19fbc:	blt	19fdc <__assert_fail@plt+0x9084>
   19fc0:	cmp	r3, #0
   19fc4:	blt	1a010 <__assert_fail@plt+0x90b8>
   19fc8:	bl	1a0a4 <__assert_fail@plt+0x914c>
   19fcc:	ldr	lr, [sp, #4]
   19fd0:	add	sp, sp, #8
   19fd4:	pop	{r2, r3}
   19fd8:	bx	lr
   19fdc:	rsbs	r0, r0, #0
   19fe0:	sbc	r1, r1, r1, lsl #1
   19fe4:	cmp	r3, #0
   19fe8:	blt	1a034 <__assert_fail@plt+0x90dc>
   19fec:	bl	1a0a4 <__assert_fail@plt+0x914c>
   19ff0:	ldr	lr, [sp, #4]
   19ff4:	add	sp, sp, #8
   19ff8:	pop	{r2, r3}
   19ffc:	rsbs	r0, r0, #0
   1a000:	sbc	r1, r1, r1, lsl #1
   1a004:	rsbs	r2, r2, #0
   1a008:	sbc	r3, r3, r3, lsl #1
   1a00c:	bx	lr
   1a010:	rsbs	r2, r2, #0
   1a014:	sbc	r3, r3, r3, lsl #1
   1a018:	bl	1a0a4 <__assert_fail@plt+0x914c>
   1a01c:	ldr	lr, [sp, #4]
   1a020:	add	sp, sp, #8
   1a024:	pop	{r2, r3}
   1a028:	rsbs	r0, r0, #0
   1a02c:	sbc	r1, r1, r1, lsl #1
   1a030:	bx	lr
   1a034:	rsbs	r2, r2, #0
   1a038:	sbc	r3, r3, r3, lsl #1
   1a03c:	bl	1a0a4 <__assert_fail@plt+0x914c>
   1a040:	ldr	lr, [sp, #4]
   1a044:	add	sp, sp, #8
   1a048:	pop	{r2, r3}
   1a04c:	rsbs	r2, r2, #0
   1a050:	sbc	r3, r3, r3, lsl #1
   1a054:	bx	lr
   1a058:	cmp	r3, #0
   1a05c:	cmpeq	r2, #0
   1a060:	bne	1a078 <__assert_fail@plt+0x9120>
   1a064:	cmp	r1, #0
   1a068:	cmpeq	r0, #0
   1a06c:	mvnne	r1, #0
   1a070:	mvnne	r0, #0
   1a074:	b	1a094 <__assert_fail@plt+0x913c>
   1a078:	sub	sp, sp, #8
   1a07c:	push	{sp, lr}
   1a080:	bl	1a0a4 <__assert_fail@plt+0x914c>
   1a084:	ldr	lr, [sp, #4]
   1a088:	add	sp, sp, #8
   1a08c:	pop	{r2, r3}
   1a090:	bx	lr
   1a094:	push	{r1, lr}
   1a098:	mov	r0, #8
   1a09c:	bl	10ce8 <raise@plt>
   1a0a0:	pop	{r1, pc}
   1a0a4:	cmp	r1, r3
   1a0a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a0ac:	cmpeq	r0, r2
   1a0b0:	mov	r4, r0
   1a0b4:	mov	r5, r1
   1a0b8:	ldr	r9, [sp, #28]
   1a0bc:	movcc	r0, #0
   1a0c0:	movcc	r1, #0
   1a0c4:	bcc	1a1bc <__assert_fail@plt+0x9264>
   1a0c8:	cmp	r3, #0
   1a0cc:	clzeq	ip, r2
   1a0d0:	clzne	ip, r3
   1a0d4:	addeq	ip, ip, #32
   1a0d8:	cmp	r5, #0
   1a0dc:	clzeq	r1, r4
   1a0e0:	addeq	r1, r1, #32
   1a0e4:	clzne	r1, r5
   1a0e8:	sub	ip, ip, r1
   1a0ec:	sub	lr, ip, #32
   1a0f0:	lsl	r7, r3, ip
   1a0f4:	rsb	r8, ip, #32
   1a0f8:	orr	r7, r7, r2, lsl lr
   1a0fc:	orr	r7, r7, r2, lsr r8
   1a100:	lsl	r6, r2, ip
   1a104:	cmp	r5, r7
   1a108:	cmpeq	r4, r6
   1a10c:	movcc	r0, #0
   1a110:	movcc	r1, #0
   1a114:	bcc	1a130 <__assert_fail@plt+0x91d8>
   1a118:	mov	r3, #1
   1a11c:	subs	r4, r4, r6
   1a120:	lsl	r1, r3, lr
   1a124:	lsl	r0, r3, ip
   1a128:	orr	r1, r1, r3, lsr r8
   1a12c:	sbc	r5, r5, r7
   1a130:	cmp	ip, #0
   1a134:	beq	1a1bc <__assert_fail@plt+0x9264>
   1a138:	lsrs	r3, r7, #1
   1a13c:	rrx	r2, r6
   1a140:	mov	r6, ip
   1a144:	b	1a168 <__assert_fail@plt+0x9210>
   1a148:	subs	r4, r4, r2
   1a14c:	sbc	r5, r5, r3
   1a150:	adds	r4, r4, r4
   1a154:	adc	r5, r5, r5
   1a158:	adds	r4, r4, #1
   1a15c:	adc	r5, r5, #0
   1a160:	subs	r6, r6, #1
   1a164:	beq	1a184 <__assert_fail@plt+0x922c>
   1a168:	cmp	r5, r3
   1a16c:	cmpeq	r4, r2
   1a170:	bcs	1a148 <__assert_fail@plt+0x91f0>
   1a174:	adds	r4, r4, r4
   1a178:	adc	r5, r5, r5
   1a17c:	subs	r6, r6, #1
   1a180:	bne	1a168 <__assert_fail@plt+0x9210>
   1a184:	lsr	r6, r4, ip
   1a188:	lsr	r7, r5, ip
   1a18c:	orr	r6, r6, r5, lsl r8
   1a190:	adds	r2, r0, r4
   1a194:	orr	r6, r6, r5, lsr lr
   1a198:	adc	r3, r1, r5
   1a19c:	lsl	r1, r7, ip
   1a1a0:	orr	r1, r1, r6, lsl lr
   1a1a4:	lsl	r0, r6, ip
   1a1a8:	orr	r1, r1, r6, lsr r8
   1a1ac:	subs	r0, r2, r0
   1a1b0:	mov	r4, r6
   1a1b4:	mov	r5, r7
   1a1b8:	sbc	r1, r3, r1
   1a1bc:	cmp	r9, #0
   1a1c0:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1a1c4:	strd	r4, [r9]
   1a1c8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a1cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a1d0:	mov	r7, r0
   1a1d4:	ldr	r6, [pc, #72]	; 1a224 <__assert_fail@plt+0x92cc>
   1a1d8:	ldr	r5, [pc, #72]	; 1a228 <__assert_fail@plt+0x92d0>
   1a1dc:	add	r6, pc, r6
   1a1e0:	add	r5, pc, r5
   1a1e4:	sub	r6, r6, r5
   1a1e8:	mov	r8, r1
   1a1ec:	mov	r9, r2
   1a1f0:	bl	10cb0 <calloc@plt-0x20>
   1a1f4:	asrs	r6, r6, #2
   1a1f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a1fc:	mov	r4, #0
   1a200:	add	r4, r4, #1
   1a204:	ldr	r3, [r5], #4
   1a208:	mov	r2, r9
   1a20c:	mov	r1, r8
   1a210:	mov	r0, r7
   1a214:	blx	r3
   1a218:	cmp	r6, r4
   1a21c:	bne	1a200 <__assert_fail@plt+0x92a8>
   1a220:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a224:	andeq	r1, r1, ip, lsr #26
   1a228:	andeq	r1, r1, r4, lsr #26
   1a22c:	bx	lr
   1a230:	ldr	r3, [pc, #12]	; 1a244 <__assert_fail@plt+0x92ec>
   1a234:	mov	r1, #0
   1a238:	add	r3, pc, r3
   1a23c:	ldr	r2, [r3]
   1a240:	b	10e98 <__cxa_atexit@plt>
   1a244:			; <UNDEFINED> instruction: 0x00011eb0

Disassembly of section .fini:

0001a248 <.fini>:
   1a248:	push	{r3, lr}
   1a24c:	pop	{r3, pc}
