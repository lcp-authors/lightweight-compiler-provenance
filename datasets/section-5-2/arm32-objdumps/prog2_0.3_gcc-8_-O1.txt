
../repos/prog2/0.3:     file format elf32-littlearm


Disassembly of section .init:

000105c8 <.init>:
   105c8:	push	{r3, lr}
   105cc:	bl	1066c <_start@@Base+0x3c>
   105d0:	pop	{r3, pc}

Disassembly of section .plt:

000105d4 <printf@plt-0x14>:
   105d4:	push	{lr}		; (str lr, [sp, #-4]!)
   105d8:	ldr	lr, [pc, #4]	; 105e4 <printf@plt-0x4>
   105dc:	add	lr, pc, lr
   105e0:	ldr	pc, [lr, #8]!
   105e4:	andeq	r0, r1, ip, lsl sl

000105e8 <printf@plt>:
   105e8:	add	ip, pc, #0, 12
   105ec:	add	ip, ip, #16, 20	; 0x10000
   105f0:	ldr	pc, [ip, #2588]!	; 0xa1c

000105f4 <__libc_start_main@plt>:
   105f4:	add	ip, pc, #0, 12
   105f8:	add	ip, ip, #16, 20	; 0x10000
   105fc:	ldr	pc, [ip, #2580]!	; 0xa14

00010600 <__gmon_start__@plt>:
   10600:	add	ip, pc, #0, 12
   10604:	add	ip, ip, #16, 20	; 0x10000
   10608:	ldr	pc, [ip, #2572]!	; 0xa0c

0001060c <putchar@plt>:
   1060c:	add	ip, pc, #0, 12
   10610:	add	ip, ip, #16, 20	; 0x10000
   10614:	ldr	pc, [ip, #2564]!	; 0xa04

00010618 <__isoc99_scanf@plt>:
   10618:	add	ip, pc, #0, 12
   1061c:	add	ip, ip, #16, 20	; 0x10000
   10620:	ldr	pc, [ip, #2556]!	; 0x9fc

00010624 <abort@plt>:
   10624:	add	ip, pc, #0, 12
   10628:	add	ip, ip, #16, 20	; 0x10000
   1062c:	ldr	pc, [ip, #2548]!	; 0x9f4

Disassembly of section .text:

00010630 <_start@@Base>:
   10630:	mov	fp, #0
   10634:	mov	lr, #0
   10638:	pop	{r1}		; (ldr r1, [sp], #4)
   1063c:	mov	r2, sp
   10640:	push	{r2}		; (str r2, [sp, #-4]!)
   10644:	push	{r0}		; (str r0, [sp, #-4]!)
   10648:	ldr	ip, [pc, #16]	; 10660 <_start@@Base+0x30>
   1064c:	push	{ip}		; (str ip, [sp, #-4]!)
   10650:	ldr	r0, [pc, #12]	; 10664 <_start@@Base+0x34>
   10654:	ldr	r3, [pc, #12]	; 10668 <_start@@Base+0x38>
   10658:	bl	105f4 <__libc_start_main@plt>
   1065c:	bl	10624 <abort@plt>
   10660:	andeq	r0, r1, r0, lsl #18
   10664:	muleq	r1, ip, r7
   10668:	andeq	r0, r1, r0, lsr #17
   1066c:	ldr	r3, [pc, #20]	; 10688 <_start@@Base+0x58>
   10670:	ldr	r2, [pc, #20]	; 1068c <_start@@Base+0x5c>
   10674:	add	r3, pc, r3
   10678:	ldr	r2, [r3, r2]
   1067c:	cmp	r2, #0
   10680:	bxeq	lr
   10684:	b	10600 <__gmon_start__@plt>
   10688:	andeq	r0, r1, r4, lsl #19
   1068c:	andeq	r0, r0, r4, lsr #32
   10690:	ldr	r0, [pc, #24]	; 106b0 <_start@@Base+0x80>
   10694:	ldr	r3, [pc, #24]	; 106b4 <_start@@Base+0x84>
   10698:	cmp	r3, r0
   1069c:	bxeq	lr
   106a0:	ldr	r3, [pc, #16]	; 106b8 <_start@@Base+0x88>
   106a4:	cmp	r3, #0
   106a8:	bxeq	lr
   106ac:	bx	r3
   106b0:	andeq	r1, r2, r0, lsr r0
   106b4:	andeq	r1, r2, r0, lsr r0
   106b8:	andeq	r0, r0, r0
   106bc:	ldr	r0, [pc, #36]	; 106e8 <_start@@Base+0xb8>
   106c0:	ldr	r1, [pc, #36]	; 106ec <_start@@Base+0xbc>
   106c4:	sub	r1, r1, r0
   106c8:	asr	r1, r1, #2
   106cc:	add	r1, r1, r1, lsr #31
   106d0:	asrs	r1, r1, #1
   106d4:	bxeq	lr
   106d8:	ldr	r3, [pc, #16]	; 106f0 <_start@@Base+0xc0>
   106dc:	cmp	r3, #0
   106e0:	bxeq	lr
   106e4:	bx	r3
   106e8:	andeq	r1, r2, r0, lsr r0
   106ec:	andeq	r1, r2, r0, lsr r0
   106f0:	andeq	r0, r0, r0
   106f4:	push	{r4, lr}
   106f8:	ldr	r4, [pc, #24]	; 10718 <_start@@Base+0xe8>
   106fc:	ldrb	r3, [r4]
   10700:	cmp	r3, #0
   10704:	popne	{r4, pc}
   10708:	bl	10690 <_start@@Base+0x60>
   1070c:	mov	r3, #1
   10710:	strb	r3, [r4]
   10714:	pop	{r4, pc}
   10718:	andeq	r1, r2, r0, lsr r0
   1071c:	b	106bc <_start@@Base+0x8c>

00010720 <avg@@Base>:
   10720:	add	r3, r0, #40	; 0x28
   10724:	vldr	s15, [pc, #24]	; 10744 <avg@@Base+0x24>
   10728:	vldmia	r0!, {s14}
   1072c:	vadd.f32	s15, s15, s14
   10730:	cmp	r0, r3
   10734:	bne	10728 <avg@@Base+0x8>
   10738:	vldr	s0, [pc, #8]	; 10748 <avg@@Base+0x28>
   1073c:	vdiv.f32	s0, s15, s0
   10740:	bx	lr
   10744:	andeq	r0, r0, r0
   10748:			; <UNDEFINED> instruction: 0x41200000

0001074c <max@@Base>:
   1074c:	mov	r3, r0
   10750:	vldmia	r3!, {s0}
   10754:	add	r0, r0, #40	; 0x28
   10758:	vldmia	r3!, {s15}
   1075c:	vcmp.f32	s15, s0
   10760:	vmrs	APSR_nzcv, fpscr
   10764:	vmovgt.f32	s0, s15
   10768:	cmp	r3, r0
   1076c:	bne	10758 <max@@Base+0xc>
   10770:	bx	lr

00010774 <min@@Base>:
   10774:	mov	r3, r0
   10778:	vldmia	r3!, {s0}
   1077c:	add	r0, r0, #40	; 0x28
   10780:	vldmia	r3!, {s15}
   10784:	vcmp.f32	s15, s0
   10788:	vmrs	APSR_nzcv, fpscr
   1078c:	vmovmi.f32	s0, s15
   10790:	cmp	r3, r0
   10794:	bne	10780 <min@@Base+0xc>
   10798:	bx	lr

0001079c <main@@Base>:
   1079c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   107a0:	strd	r6, [sp, #8]
   107a4:	str	r8, [sp, #16]
   107a8:	str	lr, [sp, #20]
   107ac:	sub	sp, sp, #40	; 0x28
   107b0:	mov	r5, sp
   107b4:	mov	r6, r5
   107b8:	mov	r4, #0
   107bc:	movw	r8, #2320	; 0x910
   107c0:	movt	r8, #1
   107c4:	movw	r7, #2344	; 0x928
   107c8:	movt	r7, #1
   107cc:	add	r4, r4, #1
   107d0:	mov	r1, r4
   107d4:	mov	r0, r8
   107d8:	bl	105e8 <printf@plt>
   107dc:	mov	r1, r6
   107e0:	mov	r0, r7
   107e4:	bl	10618 <__isoc99_scanf@plt>
   107e8:	add	r6, r6, #4
   107ec:	cmp	r4, #10
   107f0:	bne	107cc <main@@Base+0x30>
   107f4:	mov	r0, sp
   107f8:	bl	10720 <avg@@Base>
   107fc:	vcvt.f64.f32	d7, s0
   10800:	vmov	r2, r3, d7
   10804:	movw	r0, #2348	; 0x92c
   10808:	movt	r0, #1
   1080c:	bl	105e8 <printf@plt>
   10810:	mov	r0, sp
   10814:	bl	1074c <max@@Base>
   10818:	vcvt.f64.f32	d7, s0
   1081c:	vmov	r2, r3, d7
   10820:	movw	r0, #2364	; 0x93c
   10824:	movt	r0, #1
   10828:	bl	105e8 <printf@plt>
   1082c:	mov	r0, sp
   10830:	bl	10774 <min@@Base>
   10834:	vcvt.f64.f32	d7, s0
   10838:	vmov	r2, r3, d7
   1083c:	movw	r0, #2380	; 0x94c
   10840:	movt	r0, #1
   10844:	bl	105e8 <printf@plt>
   10848:	movw	r0, #2396	; 0x95c
   1084c:	movt	r0, #1
   10850:	bl	105e8 <printf@plt>
   10854:	add	r6, r5, #40	; 0x28
   10858:	movw	r4, #2404	; 0x964
   1085c:	movt	r4, #1
   10860:	vldmia	r5!, {s15}
   10864:	vcvt.f64.f32	d7, s15
   10868:	vmov	r2, r3, d7
   1086c:	mov	r0, r4
   10870:	bl	105e8 <printf@plt>
   10874:	cmp	r5, r6
   10878:	bne	10860 <main@@Base+0xc4>
   1087c:	mov	r0, #10
   10880:	bl	1060c <putchar@plt>
   10884:	mov	r0, #0
   10888:	add	sp, sp, #40	; 0x28
   1088c:	ldrd	r4, [sp]
   10890:	ldrd	r6, [sp, #8]
   10894:	ldr	r8, [sp, #16]
   10898:	add	sp, sp, #20
   1089c:	pop	{pc}		; (ldr pc, [sp], #4)

000108a0 <__libc_csu_init@@Base>:
   108a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108a4:	mov	r7, r0
   108a8:	ldr	r6, [pc, #72]	; 108f8 <__libc_csu_init@@Base+0x58>
   108ac:	ldr	r5, [pc, #72]	; 108fc <__libc_csu_init@@Base+0x5c>
   108b0:	add	r6, pc, r6
   108b4:	add	r5, pc, r5
   108b8:	sub	r6, r6, r5
   108bc:	mov	r8, r1
   108c0:	mov	r9, r2
   108c4:	bl	105c8 <printf@plt-0x20>
   108c8:	asrs	r6, r6, #2
   108cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108d0:	mov	r4, #0
   108d4:	add	r4, r4, #1
   108d8:	ldr	r3, [r5], #4
   108dc:	mov	r2, r9
   108e0:	mov	r1, r8
   108e4:	mov	r0, r7
   108e8:	blx	r3
   108ec:	cmp	r6, r4
   108f0:	bne	108d4 <__libc_csu_init@@Base+0x34>
   108f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108f8:	andeq	r0, r1, ip, asr r6
   108fc:	andeq	r0, r1, r4, asr r6

00010900 <__libc_csu_fini@@Base>:
   10900:	bx	lr

Disassembly of section .fini:

00010904 <.fini>:
   10904:	push	{r3, lr}
   10908:	pop	{r3, pc}
