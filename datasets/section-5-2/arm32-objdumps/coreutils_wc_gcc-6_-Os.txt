
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

00011078 <.init>:
   11078:	push	{r3, lr}
   1107c:	bl	11df4 <__assert_fail@plt+0xa2c>
   11080:	pop	{r3, pc}

Disassembly of section .plt:

00011084 <calloc@plt-0x14>:
   11084:	push	{lr}		; (str lr, [sp, #-4]!)
   11088:	ldr	lr, [pc, #4]	; 11094 <calloc@plt-0x4>
   1108c:	add	lr, pc, lr
   11090:	ldr	pc, [lr, #8]!
   11094:	andeq	r6, r1, ip, ror #30

00011098 <calloc@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #90112	; 0x16000
   110a0:	ldr	pc, [ip, #3948]!	; 0xf6c

000110a4 <fputs_unlocked@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #3940]!	; 0xf64

000110b0 <raise@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #3932]!	; 0xf5c

000110bc <strcmp@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #3924]!	; 0xf54

000110c8 <posix_fadvise64@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #3916]!	; 0xf4c

000110d4 <read@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #3908]!	; 0xf44

000110e0 <fflush@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #3900]!	; 0xf3c

000110ec <wcwidth@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #3892]!	; 0xf34

000110f8 <__memmove_chk@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #3884]!	; 0xf2c

00011104 <free@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #3876]!	; 0xf24

00011110 <ferror@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #3868]!	; 0xf1c

0001111c <_exit@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #3860]!	; 0xf14

00011128 <memcpy@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #3852]!	; 0xf0c

00011134 <mbsinit@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #3844]!	; 0xf04

00011140 <memcmp@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #3836]!	; 0xefc

0001114c <fputc_unlocked@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3828]!	; 0xef4

00011158 <dcgettext@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #90112	; 0x16000
   11160:	ldr	pc, [ip, #3820]!	; 0xeec

00011164 <sysconf@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #90112	; 0x16000
   1116c:	ldr	pc, [ip, #3812]!	; 0xee4

00011170 <realloc@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #90112	; 0x16000
   11178:	ldr	pc, [ip, #3804]!	; 0xedc

0001117c <textdomain@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #90112	; 0x16000
   11184:	ldr	pc, [ip, #3796]!	; 0xed4

00011188 <iswcntrl@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #90112	; 0x16000
   11190:	ldr	pc, [ip, #3788]!	; 0xecc

00011194 <rawmemchr@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #90112	; 0x16000
   1119c:	ldr	pc, [ip, #3780]!	; 0xec4

000111a0 <iswprint@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #90112	; 0x16000
   111a8:	ldr	pc, [ip, #3772]!	; 0xebc

000111ac <__fxstat64@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #90112	; 0x16000
   111b4:	ldr	pc, [ip, #3764]!	; 0xeb4

000111b8 <lseek64@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #90112	; 0x16000
   111c0:	ldr	pc, [ip, #3756]!	; 0xeac

000111c4 <__ctype_get_mb_cur_max@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #90112	; 0x16000
   111cc:	ldr	pc, [ip, #3748]!	; 0xea4

000111d0 <__fpending@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #90112	; 0x16000
   111d8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111dc <ferror_unlocked@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #90112	; 0x16000
   111e4:	ldr	pc, [ip, #3732]!	; 0xe94

000111e8 <mbrtowc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #90112	; 0x16000
   111f0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111f4 <error@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #90112	; 0x16000
   111fc:	ldr	pc, [ip, #3716]!	; 0xe84

00011200 <open64@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #90112	; 0x16000
   11208:	ldr	pc, [ip, #3708]!	; 0xe7c

0001120c <getenv@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #90112	; 0x16000
   11214:	ldr	pc, [ip, #3700]!	; 0xe74

00011218 <sysinfo@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #90112	; 0x16000
   11220:	ldr	pc, [ip, #3692]!	; 0xe6c

00011224 <malloc@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #90112	; 0x16000
   1122c:	ldr	pc, [ip, #3684]!	; 0xe64

00011230 <__libc_start_main@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #90112	; 0x16000
   11238:	ldr	pc, [ip, #3676]!	; 0xe5c

0001123c <__freading@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #90112	; 0x16000
   11244:	ldr	pc, [ip, #3668]!	; 0xe54

00011248 <__gmon_start__@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #90112	; 0x16000
   11250:	ldr	pc, [ip, #3660]!	; 0xe4c

00011254 <getopt_long@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #90112	; 0x16000
   1125c:	ldr	pc, [ip, #3652]!	; 0xe44

00011260 <__ctype_b_loc@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #90112	; 0x16000
   11268:	ldr	pc, [ip, #3644]!	; 0xe3c

0001126c <exit@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #90112	; 0x16000
   11274:	ldr	pc, [ip, #3636]!	; 0xe34

00011278 <feof@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #90112	; 0x16000
   11280:	ldr	pc, [ip, #3628]!	; 0xe2c

00011284 <iswspace@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #90112	; 0x16000
   1128c:	ldr	pc, [ip, #3620]!	; 0xe24

00011290 <strlen@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #90112	; 0x16000
   11298:	ldr	pc, [ip, #3612]!	; 0xe1c

0001129c <strchr@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #90112	; 0x16000
   112a4:	ldr	pc, [ip, #3604]!	; 0xe14

000112a8 <getpagesize@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #90112	; 0x16000
   112b0:	ldr	pc, [ip, #3596]!	; 0xe0c

000112b4 <__errno_location@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #90112	; 0x16000
   112bc:	ldr	pc, [ip, #3588]!	; 0xe04

000112c0 <__cxa_atexit@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #90112	; 0x16000
   112c8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112cc <setvbuf@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #90112	; 0x16000
   112d4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112d8 <memset@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #90112	; 0x16000
   112e0:	ldr	pc, [ip, #3564]!	; 0xdec

000112e4 <btowc@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #90112	; 0x16000
   112ec:	ldr	pc, [ip, #3556]!	; 0xde4

000112f0 <fgetc@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #90112	; 0x16000
   112f8:	ldr	pc, [ip, #3548]!	; 0xddc

000112fc <__printf_chk@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #90112	; 0x16000
   11304:	ldr	pc, [ip, #3540]!	; 0xdd4

00011308 <fileno@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #90112	; 0x16000
   11310:	ldr	pc, [ip, #3532]!	; 0xdcc

00011314 <__fprintf_chk@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #90112	; 0x16000
   1131c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011320 <fclose@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #90112	; 0x16000
   11328:	ldr	pc, [ip, #3516]!	; 0xdbc

0001132c <fseeko64@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #90112	; 0x16000
   11334:	ldr	pc, [ip, #3508]!	; 0xdb4

00011338 <setlocale@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #90112	; 0x16000
   11340:	ldr	pc, [ip, #3500]!	; 0xdac

00011344 <strrchr@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #90112	; 0x16000
   1134c:	ldr	pc, [ip, #3492]!	; 0xda4

00011350 <nl_langinfo@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #90112	; 0x16000
   11358:	ldr	pc, [ip, #3484]!	; 0xd9c

0001135c <fopen64@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #90112	; 0x16000
   11364:	ldr	pc, [ip, #3476]!	; 0xd94

00011368 <bindtextdomain@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #90112	; 0x16000
   11370:	ldr	pc, [ip, #3468]!	; 0xd8c

00011374 <getdelim@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #90112	; 0x16000
   1137c:	ldr	pc, [ip, #3460]!	; 0xd84

00011380 <__xstat64@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #90112	; 0x16000
   11388:	ldr	pc, [ip, #3452]!	; 0xd7c

0001138c <fputs@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #90112	; 0x16000
   11394:	ldr	pc, [ip, #3444]!	; 0xd74

00011398 <strncmp@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #90112	; 0x16000
   113a0:	ldr	pc, [ip, #3436]!	; 0xd6c

000113a4 <abort@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #90112	; 0x16000
   113ac:	ldr	pc, [ip, #3428]!	; 0xd64

000113b0 <close@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #90112	; 0x16000
   113b8:	ldr	pc, [ip, #3420]!	; 0xd5c

000113bc <putchar_unlocked@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #90112	; 0x16000
   113c4:	ldr	pc, [ip, #3412]!	; 0xd54

000113c8 <__assert_fail@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #90112	; 0x16000
   113d0:	ldr	pc, [ip, #3404]!	; 0xd4c

Disassembly of section .text:

000113d8 <_obstack_begin@@Base-0x46cc>:
   113d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113dc:	vpush	{d8-d9}
   113e0:	mov	sl, r0
   113e4:	ldr	r0, [r1]
   113e8:	mov	r5, r1
   113ec:	sub	sp, sp, #308	; 0x134
   113f0:	bl	13408 <__assert_fail@plt+0x2040>
   113f4:	ldr	r1, [pc, #1716]	; 11ab0 <__assert_fail@plt+0x6e8>
   113f8:	mov	r0, #6
   113fc:	bl	11338 <setlocale@plt>
   11400:	ldr	r1, [pc, #1708]	; 11ab4 <__assert_fail@plt+0x6ec>
   11404:	ldr	r0, [pc, #1708]	; 11ab8 <__assert_fail@plt+0x6f0>
   11408:	bl	11368 <bindtextdomain@plt>
   1140c:	ldr	r0, [pc, #1700]	; 11ab8 <__assert_fail@plt+0x6f0>
   11410:	bl	1117c <textdomain@plt>
   11414:	ldr	r0, [pc, #1696]	; 11abc <__assert_fail@plt+0x6f4>
   11418:	bl	1675c <_obstack_memory_used@@Base+0xad4>
   1141c:	bl	112a8 <getpagesize@plt>
   11420:	ldr	r4, [pc, #1688]	; 11ac0 <__assert_fail@plt+0x6f8>
   11424:	ldr	r6, [pc, #1688]	; 11ac4 <__assert_fail@plt+0x6fc>
   11428:	mov	r3, #0
   1142c:	mov	r2, #1
   11430:	mov	r1, r3
   11434:	mov	r8, #0
   11438:	ldr	r9, [pc, #1672]	; 11ac8 <__assert_fail@plt+0x700>
   1143c:	ldr	fp, [pc, #1672]	; 11acc <__assert_fail@plt+0x704>
   11440:	mov	r7, r8
   11444:	str	r0, [r4, #12]
   11448:	ldr	r0, [r6]
   1144c:	bl	112cc <setvbuf@plt>
   11450:	ldr	r0, [pc, #1656]	; 11ad0 <__assert_fail@plt+0x708>
   11454:	bl	1120c <getenv@plt>
   11458:	mov	r2, #0
   1145c:	mov	r3, #0
   11460:	strb	r8, [r4, #10]
   11464:	strb	r8, [r4, #9]
   11468:	strb	r8, [r4, #8]
   1146c:	strb	r8, [r4, #1]
   11470:	strb	r8, [r4, #11]
   11474:	strd	r2, [r4, #48]	; 0x30
   11478:	strd	r2, [r4, #40]	; 0x28
   1147c:	strd	r2, [r4, #32]
   11480:	strd	r2, [r4, #24]
   11484:	strd	r2, [r4, #16]
   11488:	adds	r0, r0, #0
   1148c:	movne	r0, #1
   11490:	strb	r0, [r4]
   11494:	str	r7, [sp]
   11498:	ldr	r3, [pc, #1588]	; 11ad4 <__assert_fail@plt+0x70c>
   1149c:	ldr	r2, [pc, #1588]	; 11ad8 <__assert_fail@plt+0x710>
   114a0:	mov	r1, r5
   114a4:	mov	r0, sl
   114a8:	bl	11254 <getopt_long@plt>
   114ac:	cmn	r0, #1
   114b0:	bne	1157c <__assert_fail@plt+0x1b4>
   114b4:	ldrb	r3, [r4, #1]
   114b8:	cmp	r3, #0
   114bc:	bne	114fc <__assert_fail@plt+0x134>
   114c0:	ldrb	r3, [r4, #8]
   114c4:	cmp	r3, #0
   114c8:	bne	114fc <__assert_fail@plt+0x134>
   114cc:	ldrb	r3, [r4, #9]
   114d0:	cmp	r3, #0
   114d4:	bne	114fc <__assert_fail@plt+0x134>
   114d8:	ldrb	r3, [r4, #10]
   114dc:	cmp	r3, #0
   114e0:	bne	114fc <__assert_fail@plt+0x134>
   114e4:	ldrb	r3, [r4, #11]
   114e8:	cmp	r3, #0
   114ec:	moveq	r3, #1
   114f0:	strbeq	r3, [r4, #10]
   114f4:	strbeq	r3, [r4, #8]
   114f8:	strbeq	r3, [r4, #1]
   114fc:	ldr	r6, [pc, #1496]	; 11adc <__assert_fail@plt+0x714>
   11500:	cmp	r8, #0
   11504:	ldr	r3, [r6]
   11508:	beq	117c8 <__assert_fail@plt+0x400>
   1150c:	cmp	sl, r3
   11510:	ble	11654 <__assert_fail@plt+0x28c>
   11514:	mov	r2, #5
   11518:	ldr	r1, [pc, #1472]	; 11ae0 <__assert_fail@plt+0x718>
   1151c:	mov	r0, #0
   11520:	bl	11158 <dcgettext@plt>
   11524:	ldr	r3, [r6]
   11528:	ldr	r1, [r5, r3, lsl #2]
   1152c:	mov	r4, r0
   11530:	mov	r0, #4
   11534:	bl	14854 <__assert_fail@plt+0x348c>
   11538:	mov	r1, #0
   1153c:	mov	r2, r4
   11540:	mov	r3, r0
   11544:	mov	r0, r1
   11548:	bl	111f4 <error@plt>
   1154c:	ldr	r3, [pc, #1424]	; 11ae4 <__assert_fail@plt+0x71c>
   11550:	mov	r2, #5
   11554:	ldr	r1, [pc, #1420]	; 11ae8 <__assert_fail@plt+0x720>
   11558:	mov	r0, #0
   1155c:	ldr	r4, [r3]
   11560:	bl	11158 <dcgettext@plt>
   11564:	ldr	r2, [pc, #1408]	; 11aec <__assert_fail@plt+0x724>
   11568:	mov	r1, #1
   1156c:	mov	r3, r0
   11570:	mov	r0, r4
   11574:	bl	11314 <__fprintf_chk@plt>
   11578:	b	1159c <__assert_fail@plt+0x1d4>
   1157c:	cmp	r0, #108	; 0x6c
   11580:	beq	115f8 <__assert_fail@plt+0x230>
   11584:	bgt	115c0 <__assert_fail@plt+0x1f8>
   11588:	cmn	r0, #2
   1158c:	beq	11618 <__assert_fail@plt+0x250>
   11590:	bgt	115a4 <__assert_fail@plt+0x1dc>
   11594:	cmn	r0, #3
   11598:	beq	11620 <__assert_fail@plt+0x258>
   1159c:	mov	r0, #1
   115a0:	b	1161c <__assert_fail@plt+0x254>
   115a4:	cmp	r0, #76	; 0x4c
   115a8:	mov	r3, #1
   115ac:	beq	11610 <__assert_fail@plt+0x248>
   115b0:	cmp	r0, #99	; 0x63
   115b4:	bne	1159c <__assert_fail@plt+0x1d4>
   115b8:	strb	r3, [r4, #10]
   115bc:	b	11494 <__assert_fail@plt+0xcc>
   115c0:	cmp	r0, #119	; 0x77
   115c4:	beq	11604 <__assert_fail@plt+0x23c>
   115c8:	bgt	115e0 <__assert_fail@plt+0x218>
   115cc:	cmp	r0, #109	; 0x6d
   115d0:	bne	1159c <__assert_fail@plt+0x1d4>
   115d4:	mov	r3, #1
   115d8:	strb	r3, [r4, #9]
   115dc:	b	11494 <__assert_fail@plt+0xcc>
   115e0:	cmp	r0, #256	; 0x100
   115e4:	beq	11494 <__assert_fail@plt+0xcc>
   115e8:	cmp	r0, r9
   115ec:	bne	1159c <__assert_fail@plt+0x1d4>
   115f0:	ldr	r8, [fp]
   115f4:	b	11494 <__assert_fail@plt+0xcc>
   115f8:	mov	r3, #1
   115fc:	strb	r3, [r4, #1]
   11600:	b	11494 <__assert_fail@plt+0xcc>
   11604:	mov	r3, #1
   11608:	strb	r3, [r4, #8]
   1160c:	b	11494 <__assert_fail@plt+0xcc>
   11610:	strb	r3, [r4, #11]
   11614:	b	11494 <__assert_fail@plt+0xcc>
   11618:	mov	r0, #0
   1161c:	bl	12aac <__assert_fail@plt+0x16e4>
   11620:	ldr	r3, [pc, #1224]	; 11af0 <__assert_fail@plt+0x728>
   11624:	str	r7, [sp, #8]
   11628:	str	r3, [sp, #4]
   1162c:	ldr	r3, [pc, #1216]	; 11af4 <__assert_fail@plt+0x72c>
   11630:	ldr	r2, [pc, #1216]	; 11af8 <__assert_fail@plt+0x730>
   11634:	str	r3, [sp]
   11638:	ldr	r3, [pc, #1212]	; 11afc <__assert_fail@plt+0x734>
   1163c:	ldr	r0, [r6]
   11640:	ldr	r1, [pc, #1208]	; 11b00 <__assert_fail@plt+0x738>
   11644:	ldr	r3, [r3]
   11648:	bl	151f4 <__assert_fail@plt+0x3e2c>
   1164c:	mov	r0, #0
   11650:	bl	1126c <exit@plt>
   11654:	ldr	r1, [pc, #1248]	; 11b3c <__assert_fail@plt+0x774>
   11658:	mov	r0, r8
   1165c:	bl	110bc <strcmp@plt>
   11660:	cmp	r0, #0
   11664:	ldreq	r3, [pc, #1176]	; 11b04 <__assert_fail@plt+0x73c>
   11668:	ldreq	r5, [r3]
   1166c:	beq	116c0 <__assert_fail@plt+0x2f8>
   11670:	ldr	r1, [pc, #1168]	; 11b08 <__assert_fail@plt+0x740>
   11674:	mov	r0, r8
   11678:	bl	1135c <fopen64@plt>
   1167c:	subs	r5, r0, #0
   11680:	bne	116c0 <__assert_fail@plt+0x2f8>
   11684:	bl	112b4 <__errno_location@plt>
   11688:	mov	r2, #5
   1168c:	ldr	r1, [pc, #1144]	; 11b0c <__assert_fail@plt+0x744>
   11690:	ldr	r4, [r0]
   11694:	mov	r0, r5
   11698:	bl	11158 <dcgettext@plt>
   1169c:	mov	r1, r8
   116a0:	mov	r5, r0
   116a4:	mov	r0, #4
   116a8:	bl	14854 <__assert_fail@plt+0x348c>
   116ac:	mov	r2, r5
   116b0:	mov	r1, r4
   116b4:	mov	r3, r0
   116b8:	mov	r0, #1
   116bc:	bl	111f4 <error@plt>
   116c0:	mov	r0, r5
   116c4:	bl	11308 <fileno@plt>
   116c8:	add	r1, sp, #56	; 0x38
   116cc:	bl	16784 <_obstack_memory_used@@Base+0xafc>
   116d0:	cmp	r0, #0
   116d4:	bne	117a8 <__assert_fail@plt+0x3e0>
   116d8:	ldr	r3, [sp, #72]	; 0x48
   116dc:	and	r3, r3, #61440	; 0xf000
   116e0:	cmp	r3, #32768	; 0x8000
   116e4:	bne	117a8 <__assert_fail@plt+0x3e0>
   116e8:	ldrd	r0, [sp, #104]	; 0x68
   116ec:	bl	16524 <_obstack_memory_used@@Base+0x89c>
   116f0:	vldr	d8, [pc, #936]	; 11aa0 <__assert_fail@plt+0x6d8>
   116f4:	vmov	d9, r0, r1
   116f8:	bl	13360 <__assert_fail@plt+0x1f98>
   116fc:	vmul.f64	d7, d0, d8
   11700:	vldr	d0, [pc, #928]	; 11aa8 <__assert_fail@plt+0x6e0>
   11704:	vcmpe.f64	d7, d0
   11708:	vmrs	APSR_nzcv, fpscr
   1170c:	bgt	11718 <__assert_fail@plt+0x350>
   11710:	bl	13360 <__assert_fail@plt+0x1f98>
   11714:	vmul.f64	d0, d0, d8
   11718:	vcmpe.f64	d0, d9
   1171c:	vmrs	APSR_nzcv, fpscr
   11720:	blt	117a8 <__assert_fail@plt+0x3e0>
   11724:	add	r0, sp, #160	; 0xa0
   11728:	bl	14b14 <__assert_fail@plt+0x374c>
   1172c:	add	r1, sp, #160	; 0xa0
   11730:	mov	r0, r5
   11734:	bl	14bbc <__assert_fail@plt+0x37f4>
   11738:	subs	r3, r0, #0
   1173c:	str	r3, [sp, #40]	; 0x28
   11740:	bne	11774 <__assert_fail@plt+0x3ac>
   11744:	mov	r2, #5
   11748:	ldr	r1, [pc, #960]	; 11b10 <__assert_fail@plt+0x748>
   1174c:	mov	r0, #0
   11750:	bl	11158 <dcgettext@plt>
   11754:	mov	r1, r8
   11758:	mov	r4, r0
   1175c:	mov	r0, #4
   11760:	bl	14854 <__assert_fail@plt+0x348c>
   11764:	mov	r2, r4
   11768:	mov	r1, #0
   1176c:	mov	r3, r0
   11770:	b	116b8 <__assert_fail@plt+0x2f0>
   11774:	mov	r0, r5
   11778:	bl	12f9c <__assert_fail@plt+0x1bd4>
   1177c:	cmp	r0, #0
   11780:	bne	11744 <__assert_fail@plt+0x37c>
   11784:	ldr	r5, [sp, #164]	; 0xa4
   11788:	ldr	sl, [sp, #160]	; 0xa0
   1178c:	mov	r0, r5
   11790:	bl	12d28 <__assert_fail@plt+0x1960>
   11794:	str	r0, [sp, #36]	; 0x24
   11798:	ldr	r3, [sp, #36]	; 0x24
   1179c:	cmp	r3, #0
   117a0:	bne	117f4 <__assert_fail@plt+0x42c>
   117a4:	bl	15750 <__assert_fail@plt+0x4388>
   117a8:	mov	r0, r5
   117ac:	bl	12d50 <__assert_fail@plt+0x1988>
   117b0:	mov	r3, #0
   117b4:	str	r3, [sp, #40]	; 0x28
   117b8:	mov	r5, r3
   117bc:	mov	sl, r3
   117c0:	str	r0, [sp, #36]	; 0x24
   117c4:	b	11798 <__assert_fail@plt+0x3d0>
   117c8:	cmp	sl, r3
   117cc:	addgt	r5, r5, r3, lsl #2
   117d0:	ldrle	r5, [pc, #828]	; 11b14 <__assert_fail@plt+0x74c>
   117d4:	subgt	sl, sl, r3
   117d8:	mov	r0, r5
   117dc:	movle	sl, #1
   117e0:	bl	12d28 <__assert_fail@plt+0x1960>
   117e4:	mov	r3, #0
   117e8:	str	r3, [sp, #40]	; 0x28
   117ec:	str	r0, [sp, #36]	; 0x24
   117f0:	b	11798 <__assert_fail@plt+0x3d0>
   117f4:	cmp	sl, #0
   117f8:	movne	r0, sl
   117fc:	moveq	r0, #1
   11800:	mov	r1, #112	; 0x70
   11804:	bl	15394 <__assert_fail@plt+0x3fcc>
   11808:	cmp	sl, #0
   1180c:	str	r0, [sp, #32]
   11810:	beq	118fc <__assert_fail@plt+0x534>
   11814:	cmp	sl, #1
   11818:	beq	118d0 <__assert_fail@plt+0x508>
   1181c:	ldr	r3, [sp, #32]
   11820:	mov	r6, #0
   11824:	ldr	r9, [pc, #784]	; 11b3c <__assert_fail@plt+0x774>
   11828:	add	fp, r3, #8
   1182c:	mov	r7, r6
   11830:	ldr	r3, [r5, r6, lsl #2]
   11834:	cmp	r3, #0
   11838:	beq	11858 <__assert_fail@plt+0x490>
   1183c:	mov	r0, r3
   11840:	mov	r1, r9
   11844:	str	r3, [sp, #48]	; 0x30
   11848:	bl	110bc <strcmp@plt>
   1184c:	ldr	r3, [sp, #48]	; 0x30
   11850:	cmp	r0, #0
   11854:	bne	11a5c <__assert_fail@plt+0x694>
   11858:	mov	r1, fp
   1185c:	mov	r0, r7
   11860:	bl	16784 <_obstack_memory_used@@Base+0xafc>
   11864:	add	r6, r6, #1
   11868:	cmp	sl, r6
   1186c:	str	r0, [fp, #-8]
   11870:	add	fp, fp, #112	; 0x70
   11874:	bne	11830 <__assert_fail@plt+0x468>
   11878:	ldr	r3, [sp, #32]
   1187c:	ldr	r3, [r3]
   11880:	cmp	r3, #0
   11884:	bgt	11910 <__assert_fail@plt+0x548>
   11888:	ldr	ip, [sp, #32]
   1188c:	mov	lr, #112	; 0x70
   11890:	mov	r0, #0
   11894:	mla	lr, lr, sl, ip
   11898:	mov	r1, #0
   1189c:	mov	r5, #1
   118a0:	mov	r6, #7
   118a4:	cmp	lr, ip
   118a8:	bne	11a6c <__assert_fail@plt+0x6a4>
   118ac:	mov	r9, #1
   118b0:	mov	r6, #10
   118b4:	mov	r7, #0
   118b8:	cmp	r1, #0
   118bc:	cmpeq	r0, #9
   118c0:	bhi	11b44 <__assert_fail@plt+0x77c>
   118c4:	cmp	r9, r5
   118c8:	movge	r5, r9
   118cc:	b	11914 <__assert_fail@plt+0x54c>
   118d0:	ldrb	r2, [r4, #8]
   118d4:	ldrb	r3, [r4, #1]
   118d8:	add	r3, r3, r2
   118dc:	ldrb	r2, [r4, #9]
   118e0:	add	r3, r3, r2
   118e4:	ldrb	r2, [r4, #10]
   118e8:	add	r3, r3, r2
   118ec:	ldrb	r2, [r4, #11]
   118f0:	add	r3, r3, r2
   118f4:	cmp	r3, #1
   118f8:	bne	1181c <__assert_fail@plt+0x454>
   118fc:	ldr	r2, [sp, #32]
   11900:	mov	r3, #1
   11904:	cmp	sl, #0
   11908:	str	r3, [r2]
   1190c:	bne	11878 <__assert_fail@plt+0x4b0>
   11910:	mov	r5, #1
   11914:	mov	r9, #0
   11918:	mov	fp, #1
   1191c:	str	r5, [r4, #4]
   11920:	add	r1, sp, #56	; 0x38
   11924:	ldr	r0, [sp, #36]	; 0x24
   11928:	bl	12d80 <__assert_fail@plt+0x19b8>
   1192c:	subs	r6, r0, #0
   11930:	bne	11bb4 <__assert_fail@plt+0x7ec>
   11934:	ldr	r3, [sp, #56]	; 0x38
   11938:	cmp	r3, #3
   1193c:	beq	117a4 <__assert_fail@plt+0x3dc>
   11940:	cmp	r3, #4
   11944:	beq	11b58 <__assert_fail@plt+0x790>
   11948:	cmp	r3, #2
   1194c:	bne	11ba0 <__assert_fail@plt+0x7d8>
   11950:	cmp	r8, #0
   11954:	movne	r8, #0
   11958:	andeq	r8, fp, #1
   1195c:	cmp	r8, #0
   11960:	beq	11998 <__assert_fail@plt+0x5d0>
   11964:	ldr	r0, [sp, #36]	; 0x24
   11968:	bl	12e14 <__assert_fail@plt+0x1a4c>
   1196c:	subs	r1, r0, #0
   11970:	movne	fp, r8
   11974:	bne	11998 <__assert_fail@plt+0x5d0>
   11978:	mov	r3, #1
   1197c:	strb	r3, [r4, #60]	; 0x3c
   11980:	mvn	r2, #0
   11984:	mvn	r3, #0
   11988:	strd	r2, [sp]
   1198c:	ldr	r2, [sp, #32]
   11990:	bl	120b4 <__assert_fail@plt+0xcec>
   11994:	mov	fp, r0
   11998:	ldr	r3, [sp, #40]	; 0x28
   1199c:	cmp	r3, #0
   119a0:	beq	119ac <__assert_fail@plt+0x5e4>
   119a4:	add	r0, sp, #160	; 0xa0
   119a8:	bl	14b8c <__assert_fail@plt+0x37c4>
   119ac:	ldr	r0, [sp, #36]	; 0x24
   119b0:	bl	12e14 <__assert_fail@plt+0x1a4c>
   119b4:	cmp	r0, #1
   119b8:	bls	11a18 <__assert_fail@plt+0x650>
   119bc:	ldr	r3, [pc, #252]	; 11ac0 <__assert_fail@plt+0x6f8>
   119c0:	mov	r2, #5
   119c4:	ldrd	r0, [r3, #32]
   119c8:	ldrd	r4, [r3, #16]
   119cc:	ldrd	r6, [r3, #24]
   119d0:	strd	r0, [sp, #40]	; 0x28
   119d4:	ldrd	r0, [r3, #40]	; 0x28
   119d8:	ldrd	r8, [r3, #48]	; 0x30
   119dc:	strd	r0, [sp, #48]	; 0x30
   119e0:	ldr	r1, [pc, #304]	; 11b18 <__assert_fail@plt+0x750>
   119e4:	mov	r0, #0
   119e8:	bl	11158 <dcgettext@plt>
   119ec:	ldrd	r2, [sp, #48]	; 0x30
   119f0:	strd	r8, [sp, #16]
   119f4:	mov	r1, r5
   119f8:	strd	r2, [sp, #8]
   119fc:	ldrd	r2, [sp, #40]	; 0x28
   11a00:	strd	r2, [sp]
   11a04:	mov	r2, r6
   11a08:	mov	r3, r7
   11a0c:	str	r0, [sp, #24]
   11a10:	mov	r0, r4
   11a14:	bl	11f38 <__assert_fail@plt+0xb70>
   11a18:	ldr	r0, [sp, #36]	; 0x24
   11a1c:	bl	12e34 <__assert_fail@plt+0x1a6c>
   11a20:	ldr	r0, [sp, #32]
   11a24:	bl	13094 <__assert_fail@plt+0x1ccc>
   11a28:	ldr	r3, [pc, #144]	; 11ac0 <__assert_fail@plt+0x6f8>
   11a2c:	ldrb	r3, [r3, #60]	; 0x3c
   11a30:	cmp	r3, #0
   11a34:	beq	11da4 <__assert_fail@plt+0x9dc>
   11a38:	mov	r0, #0
   11a3c:	bl	113b0 <close@plt>
   11a40:	cmp	r0, #0
   11a44:	beq	11da4 <__assert_fail@plt+0x9dc>
   11a48:	bl	112b4 <__errno_location@plt>
   11a4c:	ldr	r2, [pc, #232]	; 11b3c <__assert_fail@plt+0x774>
   11a50:	ldr	r1, [r0]
   11a54:	mov	r0, #1
   11a58:	bl	111f4 <error@plt>
   11a5c:	mov	r1, fp
   11a60:	mov	r0, r3
   11a64:	bl	16774 <_obstack_memory_used@@Base+0xaec>
   11a68:	b	11864 <__assert_fail@plt+0x49c>
   11a6c:	ldr	r3, [ip]
   11a70:	cmp	r3, #0
   11a74:	bne	11a98 <__assert_fail@plt+0x6d0>
   11a78:	ldr	r3, [ip, #24]
   11a7c:	and	r3, r3, #61440	; 0xf000
   11a80:	cmp	r3, #32768	; 0x8000
   11a84:	movne	r5, r6
   11a88:	bne	11a98 <__assert_fail@plt+0x6d0>
   11a8c:	ldrd	r2, [ip, #56]	; 0x38
   11a90:	adds	r0, r0, r2
   11a94:	adc	r1, r1, r3
   11a98:	add	ip, ip, #112	; 0x70
   11a9c:	b	118a4 <__assert_fail@plt+0x4dc>
   11aa0:	andeq	r0, r0, r0
   11aa4:	svccc	0x00e00000
   11aa8:	andeq	r0, r0, r0
   11aac:	cmnmi	r4, r0
   11ab0:	andeq	r6, r1, r1, lsr #27
   11ab4:	andeq	r6, r1, r2, lsr #27
   11ab8:	strdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   11abc:	andeq	r2, r1, ip, ror lr
   11ac0:	andeq	r8, r2, r0, lsr #3
   11ac4:	muleq	r2, r4, r1
   11ac8:	andeq	r0, r0, r1, lsl #2
   11acc:	muleq	r2, r8, r1
   11ad0:			; <UNDEFINED> instruction: 0x00016dba
   11ad4:	andeq	r6, r1, r0, ror #15
   11ad8:	andeq	r6, r1, r5, ror #27
   11adc:	andeq	r8, r2, r0, lsl #3
   11ae0:	andeq	r6, r1, fp, ror #27
   11ae4:	andeq	r8, r2, r8, lsl #3
   11ae8:	strdeq	r6, [r1], -ip
   11aec:	strdeq	r7, [r1], -r3
   11af0:	andeq	r6, r1, sl, asr #27
   11af4:	ldrdeq	r6, [r1], -sl
   11af8:	strdeq	r6, [r1], -fp
   11afc:	andeq	r8, r2, ip, lsr #2
   11b00:	muleq	r1, r4, r8
   11b04:	muleq	r2, r0, r1
   11b08:	andeq	r6, r1, r7, ror lr
   11b0c:	andeq	r6, r1, r0, lsr lr
   11b10:	andeq	r6, r1, fp, asr #28
   11b14:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   11b18:	andeq	r6, r1, r2, lsl pc
   11b1c:	andeq	r6, r1, sl, ror #28
   11b20:	andeq	r6, r1, r0, lsl #17
   11b24:	andeq	r0, r0, sl, lsr #7
   11b28:	andeq	r6, r1, r9, ror lr
   11b2c:	andeq	r6, r1, r2, lsl #29
   11b30:	andeq	r6, r1, sl, lsr #29
   11b34:	andeq	r6, r1, r9, ror #29
   11b38:	andeq	r6, r1, r7, lsl #30
   11b3c:	andeq	r7, r1, r6, lsr r0
   11b40:	ldrdeq	r6, [r1], -r1
   11b44:	mov	r2, r6
   11b48:	mov	r3, r7
   11b4c:	add	r9, r9, #1
   11b50:	bl	16584 <_obstack_memory_used@@Base+0x8fc>
   11b54:	b	118b8 <__assert_fail@plt+0x4f0>
   11b58:	bl	112b4 <__errno_location@plt>
   11b5c:	mov	r2, #5
   11b60:	ldr	r1, [pc, #-76]	; 11b1c <__assert_fail@plt+0x754>
   11b64:	mov	fp, r6
   11b68:	ldr	r5, [r0]
   11b6c:	mov	r0, r6
   11b70:	bl	11158 <dcgettext@plt>
   11b74:	mov	r2, r8
   11b78:	mov	r1, #3
   11b7c:	mov	r7, r0
   11b80:	mov	r0, r6
   11b84:	bl	148f8 <__assert_fail@plt+0x3530>
   11b88:	mov	r2, r7
   11b8c:	mov	r1, r5
   11b90:	mov	r3, r0
   11b94:	mov	r0, r6
   11b98:	bl	111f4 <error@plt>
   11b9c:	b	11950 <__assert_fail@plt+0x588>
   11ba0:	ldr	r3, [pc, #-136]	; 11b20 <__assert_fail@plt+0x758>
   11ba4:	ldr	r2, [pc, #-136]	; 11b24 <__assert_fail@plt+0x75c>
   11ba8:	ldr	r1, [pc, #-136]	; 11b28 <__assert_fail@plt+0x760>
   11bac:	ldr	r0, [pc, #-136]	; 11b2c <__assert_fail@plt+0x764>
   11bb0:	bl	113c8 <__assert_fail@plt>
   11bb4:	cmp	r8, #0
   11bb8:	beq	11c58 <__assert_fail@plt+0x890>
   11bbc:	ldr	r1, [pc, #-136]	; 11b3c <__assert_fail@plt+0x774>
   11bc0:	mov	r0, r8
   11bc4:	bl	110bc <strcmp@plt>
   11bc8:	subs	r5, r0, #0
   11bcc:	bne	11c58 <__assert_fail@plt+0x890>
   11bd0:	ldr	r1, [pc, #-156]	; 11b3c <__assert_fail@plt+0x774>
   11bd4:	mov	r0, r6
   11bd8:	bl	110bc <strcmp@plt>
   11bdc:	subs	r7, r0, #0
   11be0:	bne	11c18 <__assert_fail@plt+0x850>
   11be4:	mov	r2, #5
   11be8:	ldr	r1, [pc, #-192]	; 11b30 <__assert_fail@plt+0x768>
   11bec:	bl	11158 <dcgettext@plt>
   11bf0:	mov	r1, r6
   11bf4:	mov	r5, r0
   11bf8:	mov	r0, #4
   11bfc:	bl	14854 <__assert_fail@plt+0x348c>
   11c00:	mov	r2, r5
   11c04:	mov	r1, r7
   11c08:	mov	r5, #1
   11c0c:	mov	r3, r0
   11c10:	mov	r0, r7
   11c14:	bl	111f4 <error@plt>
   11c18:	ldrb	r7, [r6]
   11c1c:	cmp	r7, #0
   11c20:	bne	11cb0 <__assert_fail@plt+0x8e8>
   11c24:	cmp	r8, #0
   11c28:	bne	11c60 <__assert_fail@plt+0x898>
   11c2c:	mov	r2, #5
   11c30:	ldr	r1, [pc, #-260]	; 11b34 <__assert_fail@plt+0x76c>
   11c34:	mov	r0, r8
   11c38:	bl	11158 <dcgettext@plt>
   11c3c:	ldr	r2, [pc, #-260]	; 11b40 <__assert_fail@plt+0x778>
   11c40:	mov	r1, r8
   11c44:	mov	r3, r0
   11c48:	mov	r0, r8
   11c4c:	bl	111f4 <error@plt>
   11c50:	mov	fp, #0
   11c54:	b	11d0c <__assert_fail@plt+0x944>
   11c58:	mov	r5, #0
   11c5c:	b	11c18 <__assert_fail@plt+0x850>
   11c60:	ldr	r0, [sp, #36]	; 0x24
   11c64:	bl	12e14 <__assert_fail@plt+0x1a4c>
   11c68:	mov	r2, r8
   11c6c:	mov	r1, #3
   11c70:	mov	r6, r0
   11c74:	mov	r0, r7
   11c78:	bl	148f8 <__assert_fail@plt+0x3530>
   11c7c:	mov	r2, #5
   11c80:	ldr	r1, [pc, #-340]	; 11b34 <__assert_fail@plt+0x76c>
   11c84:	mov	r5, r0
   11c88:	mov	r0, r7
   11c8c:	bl	11158 <dcgettext@plt>
   11c90:	str	r6, [sp]
   11c94:	mov	r3, r5
   11c98:	ldr	r2, [pc, #-360]	; 11b38 <__assert_fail@plt+0x770>
   11c9c:	mov	r1, r7
   11ca0:	str	r0, [sp, #4]
   11ca4:	mov	r0, r7
   11ca8:	bl	111f4 <error@plt>
   11cac:	b	11c50 <__assert_fail@plt+0x888>
   11cb0:	cmp	r5, #0
   11cb4:	bne	11c50 <__assert_fail@plt+0x888>
   11cb8:	cmp	sl, #0
   11cbc:	ldr	r3, [sp, #32]
   11cc0:	movne	r7, r9
   11cc4:	moveq	r7, #0
   11cc8:	ldr	r1, [pc, #-404]	; 11b3c <__assert_fail@plt+0x774>
   11ccc:	mov	r0, r6
   11cd0:	add	r7, r3, r7
   11cd4:	bl	110bc <strcmp@plt>
   11cd8:	cmp	r0, #0
   11cdc:	bne	11d24 <__assert_fail@plt+0x95c>
   11ce0:	mov	r3, #1
   11ce4:	strb	r3, [r4, #60]	; 0x3c
   11ce8:	mvn	r2, #0
   11cec:	mvn	r3, #0
   11cf0:	mov	r1, r6
   11cf4:	strd	r2, [sp]
   11cf8:	mov	r2, r7
   11cfc:	bl	120b4 <__assert_fail@plt+0xcec>
   11d00:	mov	r7, r0
   11d04:	and	r7, r7, fp
   11d08:	uxtb	fp, r7
   11d0c:	cmp	sl, #0
   11d10:	moveq	r3, #1
   11d14:	ldreq	r2, [sp, #32]
   11d18:	add	r9, r9, #112	; 0x70
   11d1c:	streq	r3, [r2]
   11d20:	b	11920 <__assert_fail@plt+0x558>
   11d24:	mov	r1, r5
   11d28:	mov	r0, r6
   11d2c:	bl	11200 <open64@plt>
   11d30:	cmn	r0, #1
   11d34:	bne	11d6c <__assert_fail@plt+0x9a4>
   11d38:	bl	112b4 <__errno_location@plt>
   11d3c:	mov	r2, r6
   11d40:	mov	r1, #3
   11d44:	ldr	r7, [r0]
   11d48:	mov	r0, r5
   11d4c:	bl	148f8 <__assert_fail@plt+0x3530>
   11d50:	mov	r1, r7
   11d54:	ldr	r2, [pc, #-540]	; 11b40 <__assert_fail@plt+0x778>
   11d58:	mov	r7, r5
   11d5c:	mov	r3, r0
   11d60:	mov	r0, r5
   11d64:	bl	111f4 <error@plt>
   11d68:	b	11d04 <__assert_fail@plt+0x93c>
   11d6c:	mov	r3, #0
   11d70:	mov	r2, #0
   11d74:	mov	r1, r6
   11d78:	strd	r2, [sp]
   11d7c:	mov	r2, r7
   11d80:	str	r0, [sp, #48]	; 0x30
   11d84:	bl	120b4 <__assert_fail@plt+0xcec>
   11d88:	ldr	r3, [sp, #48]	; 0x30
   11d8c:	mov	r7, r0
   11d90:	mov	r0, r3
   11d94:	bl	113b0 <close@plt>
   11d98:	cmp	r0, #0
   11d9c:	beq	11d04 <__assert_fail@plt+0x93c>
   11da0:	b	11d38 <__assert_fail@plt+0x970>
   11da4:	eor	r0, fp, #1
   11da8:	uxtb	r0, r0
   11dac:	add	sp, sp, #308	; 0x134
   11db0:	vpop	{d8-d9}
   11db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11db8:	mov	fp, #0
   11dbc:	mov	lr, #0
   11dc0:	pop	{r1}		; (ldr r1, [sp], #4)
   11dc4:	mov	r2, sp
   11dc8:	push	{r2}		; (str r2, [sp, #-4]!)
   11dcc:	push	{r0}		; (str r0, [sp, #-4]!)
   11dd0:	ldr	ip, [pc, #16]	; 11de8 <__assert_fail@plt+0xa20>
   11dd4:	push	{ip}		; (str ip, [sp, #-4]!)
   11dd8:	ldr	r0, [pc, #12]	; 11dec <__assert_fail@plt+0xa24>
   11ddc:	ldr	r3, [pc, #12]	; 11df0 <__assert_fail@plt+0xa28>
   11de0:	bl	11230 <__libc_start_main@plt>
   11de4:	bl	113a4 <abort@plt>
   11de8:	andeq	r6, r1, r8, asr r7
   11dec:	ldrdeq	r1, [r1], -r8
   11df0:	strdeq	r6, [r1], -r8
   11df4:	ldr	r3, [pc, #20]	; 11e10 <__assert_fail@plt+0xa48>
   11df8:	ldr	r2, [pc, #20]	; 11e14 <__assert_fail@plt+0xa4c>
   11dfc:	add	r3, pc, r3
   11e00:	ldr	r2, [r3, r2]
   11e04:	cmp	r2, #0
   11e08:	bxeq	lr
   11e0c:	b	11248 <__gmon_start__@plt>
   11e10:	strdeq	r6, [r1], -ip
   11e14:	andeq	r0, r0, r0, lsr #2
   11e18:	ldr	r3, [pc, #28]	; 11e3c <__assert_fail@plt+0xa74>
   11e1c:	ldr	r0, [pc, #28]	; 11e40 <__assert_fail@plt+0xa78>
   11e20:	sub	r3, r3, r0
   11e24:	cmp	r3, #6
   11e28:	bxls	lr
   11e2c:	ldr	r3, [pc, #16]	; 11e44 <__assert_fail@plt+0xa7c>
   11e30:	cmp	r3, #0
   11e34:	bxeq	lr
   11e38:	bx	r3
   11e3c:	andeq	r8, r2, fp, ror r1
   11e40:	andeq	r8, r2, r8, ror r1
   11e44:	andeq	r0, r0, r0
   11e48:	ldr	r1, [pc, #36]	; 11e74 <__assert_fail@plt+0xaac>
   11e4c:	ldr	r0, [pc, #36]	; 11e78 <__assert_fail@plt+0xab0>
   11e50:	sub	r1, r1, r0
   11e54:	asr	r1, r1, #2
   11e58:	add	r1, r1, r1, lsr #31
   11e5c:	asrs	r1, r1, #1
   11e60:	bxeq	lr
   11e64:	ldr	r3, [pc, #16]	; 11e7c <__assert_fail@plt+0xab4>
   11e68:	cmp	r3, #0
   11e6c:	bxeq	lr
   11e70:	bx	r3
   11e74:	andeq	r8, r2, r8, ror r1
   11e78:	andeq	r8, r2, r8, ror r1
   11e7c:	andeq	r0, r0, r0
   11e80:	push	{r4, lr}
   11e84:	ldr	r4, [pc, #24]	; 11ea4 <__assert_fail@plt+0xadc>
   11e88:	ldrb	r3, [r4]
   11e8c:	cmp	r3, #0
   11e90:	popne	{r4, pc}
   11e94:	bl	11e18 <__assert_fail@plt+0xa50>
   11e98:	mov	r3, #1
   11e9c:	strb	r3, [r4]
   11ea0:	pop	{r4, pc}
   11ea4:	muleq	r2, ip, r1
   11ea8:	ldr	r0, [pc, #40]	; 11ed8 <__assert_fail@plt+0xb10>
   11eac:	ldr	r3, [r0]
   11eb0:	cmp	r3, #0
   11eb4:	bne	11ebc <__assert_fail@plt+0xaf4>
   11eb8:	b	11e48 <__assert_fail@plt+0xa80>
   11ebc:	ldr	r3, [pc, #24]	; 11edc <__assert_fail@plt+0xb14>
   11ec0:	cmp	r3, #0
   11ec4:	beq	11eb8 <__assert_fail@plt+0xaf0>
   11ec8:	push	{r4, lr}
   11ecc:	blx	r3
   11ed0:	pop	{r4, lr}
   11ed4:	b	11e48 <__assert_fail@plt+0xa80>
   11ed8:	andeq	r7, r2, r4, lsl pc
   11edc:	andeq	r0, r0, r0
   11ee0:	ldr	r3, [pc, #68]	; 11f2c <__assert_fail@plt+0xb64>
   11ee4:	ldrb	r3, [r3]
   11ee8:	cmp	r3, #0
   11eec:	bne	11f1c <__assert_fail@plt+0xb54>
   11ef0:	ldr	r3, [pc, #56]	; 11f30 <__assert_fail@plt+0xb68>
   11ef4:	cmp	r0, r3
   11ef8:	cmpne	r0, #160	; 0xa0
   11efc:	beq	11f24 <__assert_fail@plt+0xb5c>
   11f00:	ldr	r2, [pc, #44]	; 11f34 <__assert_fail@plt+0xb6c>
   11f04:	add	r3, r3, #89	; 0x59
   11f08:	cmp	r0, r3
   11f0c:	cmpne	r0, r2
   11f10:	moveq	r0, #1
   11f14:	movne	r0, #0
   11f18:	bx	lr
   11f1c:	mov	r0, #0
   11f20:	bx	lr
   11f24:	mov	r0, #1
   11f28:	bx	lr
   11f2c:	andeq	r8, r2, r0, lsr #3
   11f30:	andeq	r2, r0, r7
   11f34:	andeq	r2, r0, pc, lsr #32
   11f38:	push	{r4, r5, r6, r7, r8, r9, lr}
   11f3c:	mov	r7, r3
   11f40:	ldr	r4, [pc, #348]	; 120a4 <__assert_fail@plt+0xcdc>
   11f44:	sub	sp, sp, #28
   11f48:	mov	r6, r2
   11f4c:	ldrb	r3, [r4, #1]
   11f50:	ldr	r8, [sp, #80]	; 0x50
   11f54:	cmp	r3, #0
   11f58:	ldreq	r5, [pc, #328]	; 120a8 <__assert_fail@plt+0xce0>
   11f5c:	beq	11f84 <__assert_fail@plt+0xbbc>
   11f60:	mov	r2, sp
   11f64:	ldr	r5, [r4, #4]
   11f68:	bl	1317c <__assert_fail@plt+0x1db4>
   11f6c:	mov	r2, r5
   11f70:	ldr	r1, [pc, #304]	; 120a8 <__assert_fail@plt+0xce0>
   11f74:	ldr	r5, [pc, #304]	; 120ac <__assert_fail@plt+0xce4>
   11f78:	mov	r3, r0
   11f7c:	mov	r0, #1
   11f80:	bl	112fc <__printf_chk@plt>
   11f84:	ldrb	r3, [r4, #8]
   11f88:	cmp	r3, #0
   11f8c:	beq	11fbc <__assert_fail@plt+0xbf4>
   11f90:	mov	r2, sp
   11f94:	mov	r1, r7
   11f98:	mov	r0, r6
   11f9c:	ldr	r9, [r4, #4]
   11fa0:	bl	1317c <__assert_fail@plt+0x1db4>
   11fa4:	mov	r1, r5
   11fa8:	mov	r2, r9
   11fac:	ldr	r5, [pc, #248]	; 120ac <__assert_fail@plt+0xce4>
   11fb0:	mov	r3, r0
   11fb4:	mov	r0, #1
   11fb8:	bl	112fc <__printf_chk@plt>
   11fbc:	ldrb	r3, [r4, #9]
   11fc0:	cmp	r3, #0
   11fc4:	beq	11ff0 <__assert_fail@plt+0xc28>
   11fc8:	mov	r2, sp
   11fcc:	ldrd	r0, [sp, #56]	; 0x38
   11fd0:	ldr	r6, [r4, #4]
   11fd4:	bl	1317c <__assert_fail@plt+0x1db4>
   11fd8:	mov	r1, r5
   11fdc:	mov	r2, r6
   11fe0:	ldr	r5, [pc, #196]	; 120ac <__assert_fail@plt+0xce4>
   11fe4:	mov	r3, r0
   11fe8:	mov	r0, #1
   11fec:	bl	112fc <__printf_chk@plt>
   11ff0:	ldrb	r3, [r4, #10]
   11ff4:	cmp	r3, #0
   11ff8:	beq	12024 <__assert_fail@plt+0xc5c>
   11ffc:	mov	r2, sp
   12000:	ldrd	r0, [sp, #64]	; 0x40
   12004:	ldr	r6, [r4, #4]
   12008:	bl	1317c <__assert_fail@plt+0x1db4>
   1200c:	mov	r1, r5
   12010:	mov	r2, r6
   12014:	ldr	r5, [pc, #144]	; 120ac <__assert_fail@plt+0xce4>
   12018:	mov	r3, r0
   1201c:	mov	r0, #1
   12020:	bl	112fc <__printf_chk@plt>
   12024:	ldrb	r3, [r4, #11]
   12028:	cmp	r3, #0
   1202c:	beq	12054 <__assert_fail@plt+0xc8c>
   12030:	mov	r2, sp
   12034:	ldrd	r0, [sp, #72]	; 0x48
   12038:	ldr	r4, [r4, #4]
   1203c:	bl	1317c <__assert_fail@plt+0x1db4>
   12040:	mov	r2, r4
   12044:	mov	r1, r5
   12048:	mov	r3, r0
   1204c:	mov	r0, #1
   12050:	bl	112fc <__printf_chk@plt>
   12054:	cmp	r8, #0
   12058:	beq	12094 <__assert_fail@plt+0xccc>
   1205c:	mov	r1, #10
   12060:	mov	r0, r8
   12064:	bl	1129c <strchr@plt>
   12068:	cmp	r0, #0
   1206c:	beq	12084 <__assert_fail@plt+0xcbc>
   12070:	mov	r2, r8
   12074:	mov	r1, #3
   12078:	mov	r0, #0
   1207c:	bl	148f8 <__assert_fail@plt+0x3530>
   12080:	mov	r8, r0
   12084:	mov	r2, r8
   12088:	ldr	r1, [pc, #32]	; 120b0 <__assert_fail@plt+0xce8>
   1208c:	mov	r0, #1
   12090:	bl	112fc <__printf_chk@plt>
   12094:	mov	r0, #10
   12098:	bl	113bc <putchar_unlocked@plt>
   1209c:	add	sp, sp, #28
   120a0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   120a4:	andeq	r8, r2, r0, lsr #3
   120a8:	andeq	r6, r1, r1, lsr #15
   120ac:	andeq	r6, r1, r0, lsr #15
   120b0:	ldrdeq	r6, [r1], -r0
   120b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120b8:	sub	sp, sp, #16384	; 0x4000
   120bc:	sub	sp, sp, #148	; 0x94
   120c0:	add	r3, sp, #16384	; 0x4000
   120c4:	add	r3, r3, #184	; 0xb8
   120c8:	ldrd	r8, [r3]
   120cc:	subs	r3, r1, #0
   120d0:	str	r3, [sp, #84]	; 0x54
   120d4:	ldrne	r3, [sp, #84]	; 0x54
   120d8:	str	r0, [sp, #40]	; 0x28
   120dc:	mov	fp, r2
   120e0:	strne	r3, [sp, #80]	; 0x50
   120e4:	bne	120fc <__assert_fail@plt+0xd34>
   120e8:	mov	r2, #5
   120ec:	ldr	r1, [pc, #2076]	; 12910 <__assert_fail@plt+0x1548>
   120f0:	mov	r0, r3
   120f4:	bl	11158 <dcgettext@plt>
   120f8:	str	r0, [sp, #80]	; 0x50
   120fc:	mov	r3, #0
   12100:	mov	r2, #0
   12104:	ldr	sl, [pc, #2056]	; 12914 <__assert_fail@plt+0x154c>
   12108:	strd	r2, [sp, #112]	; 0x70
   1210c:	strd	r2, [sp, #104]	; 0x68
   12110:	bl	111c4 <__ctype_get_mb_cur_max@plt>
   12114:	ldrb	r4, [sl, #10]
   12118:	cmp	r0, #1
   1211c:	ldrbhi	r3, [sl, #9]
   12120:	bhi	12130 <__assert_fail@plt+0xd68>
   12124:	cmp	r4, #0
   12128:	mov	r3, #0
   1212c:	ldrbeq	r4, [sl, #9]
   12130:	ldrb	r6, [sl, #8]
   12134:	str	r3, [sp, #52]	; 0x34
   12138:	ldr	r2, [sp, #52]	; 0x34
   1213c:	cmp	r6, #0
   12140:	eor	r3, r4, #1
   12144:	ldrbeq	r6, [sl, #11]
   12148:	orrs	r3, r3, r2
   1214c:	bne	1215c <__assert_fail@plt+0xd94>
   12150:	ldrb	r3, [sl, #1]
   12154:	orrs	r3, r6, r3
   12158:	beq	12178 <__assert_fail@plt+0xdb0>
   1215c:	mov	r3, #2
   12160:	str	r3, [sp, #8]
   12164:	mov	r2, #0
   12168:	mov	r3, #0
   1216c:	ldr	r0, [sp, #40]	; 0x28
   12170:	strd	r2, [sp]
   12174:	bl	12f60 <__assert_fail@plt+0x1b98>
   12178:	ldr	r3, [sp, #52]	; 0x34
   1217c:	eor	r3, r3, #1
   12180:	ands	r4, r4, r3
   12184:	beq	12420 <__assert_fail@plt+0x1058>
   12188:	ldrb	r5, [sl, #1]
   1218c:	orrs	r5, r6, r5
   12190:	bne	12420 <__assert_fail@plt+0x1058>
   12194:	ldr	r3, [fp]
   12198:	cmp	r3, #0
   1219c:	ble	121b0 <__assert_fail@plt+0xde8>
   121a0:	add	r1, fp, #8
   121a4:	ldr	r0, [sp, #40]	; 0x28
   121a8:	bl	16784 <_obstack_memory_used@@Base+0xafc>
   121ac:	str	r0, [fp]
   121b0:	ldr	r3, [fp]
   121b4:	cmp	r3, #0
   121b8:	bne	12390 <__assert_fail@plt+0xfc8>
   121bc:	ldr	r3, [fp, #24]
   121c0:	and	r3, r3, #53248	; 0xd000
   121c4:	cmp	r3, #32768	; 0x8000
   121c8:	bne	12390 <__assert_fail@plt+0xfc8>
   121cc:	ldrd	r6, [fp, #56]	; 0x38
   121d0:	cmp	r6, #0
   121d4:	sbcs	r3, r7, #0
   121d8:	blt	12390 <__assert_fail@plt+0xfc8>
   121dc:	cmp	r8, #0
   121e0:	sbcs	r3, r9, #0
   121e4:	bge	12208 <__assert_fail@plt+0xe40>
   121e8:	mov	r3, #1
   121ec:	str	r3, [sp]
   121f0:	mov	r2, #0
   121f4:	mov	r3, #0
   121f8:	ldr	r0, [sp, #40]	; 0x28
   121fc:	bl	111b8 <lseek64@plt>
   12200:	mov	r8, r0
   12204:	mov	r9, r1
   12208:	ldr	r1, [sl, #12]
   1220c:	mov	r0, r6
   12210:	bl	15f6c <_obstack_memory_used@@Base+0x2e4>
   12214:	cmp	r1, #0
   12218:	beq	12318 <__assert_fail@plt+0xf50>
   1221c:	cmp	r6, r8
   12220:	mov	r7, #0
   12224:	sbcs	r3, r7, r9
   12228:	movlt	r8, #0
   1222c:	movlt	r9, #0
   12230:	blt	1223c <__assert_fail@plt+0xe74>
   12234:	subs	r8, r6, r8
   12238:	sbc	r9, r7, r9
   1223c:	strd	r8, [sp, #112]	; 0x70
   12240:	mov	r8, #0
   12244:	mov	r9, #0
   12248:	mov	r6, r8
   1224c:	mov	r7, r9
   12250:	strd	r8, [sp, #32]
   12254:	ldr	r3, [pc, #1720]	; 12914 <__assert_fail@plt+0x154c>
   12258:	ldr	r2, [sp, #52]	; 0x34
   1225c:	ldrb	r3, [r3, #9]
   12260:	cmp	r2, r3
   12264:	ldrdlt	r2, [sp, #112]	; 0x70
   12268:	strdlt	r2, [sp, #32]
   1226c:	ldrd	r2, [sp, #104]	; 0x68
   12270:	strd	r8, [sp, #16]
   12274:	strd	r2, [sp, #40]	; 0x28
   12278:	ldr	r3, [sp, #84]	; 0x54
   1227c:	ldrd	r0, [sp, #40]	; 0x28
   12280:	str	r3, [sp, #24]
   12284:	ldrd	r2, [sp, #112]	; 0x70
   12288:	strd	r2, [sp, #8]
   1228c:	ldrd	r2, [sp, #32]
   12290:	strd	r2, [sp]
   12294:	mov	r2, r6
   12298:	mov	r3, r7
   1229c:	bl	11f38 <__assert_fail@plt+0xb70>
   122a0:	ldr	ip, [pc, #1644]	; 12914 <__assert_fail@plt+0x154c>
   122a4:	ldrd	r0, [sp, #104]	; 0x68
   122a8:	ldrd	r2, [ip, #16]
   122ac:	adds	r2, r2, r0
   122b0:	adc	r3, r3, r1
   122b4:	ldrd	r0, [sp, #32]
   122b8:	strd	r2, [ip, #16]
   122bc:	ldrd	r2, [ip, #24]
   122c0:	adds	r6, r6, r2
   122c4:	adc	r7, r7, r3
   122c8:	ldrd	r2, [ip, #32]
   122cc:	strd	r6, [ip, #24]
   122d0:	adds	r0, r0, r2
   122d4:	adc	r1, r1, r3
   122d8:	mov	r2, r0
   122dc:	mov	r3, r1
   122e0:	ldrd	r0, [sp, #112]	; 0x70
   122e4:	strd	r2, [ip, #32]
   122e8:	ldrd	r2, [ip, #40]	; 0x28
   122ec:	adds	r2, r2, r0
   122f0:	adc	r3, r3, r1
   122f4:	strd	r2, [ip, #40]	; 0x28
   122f8:	ldrd	r2, [ip, #48]	; 0x30
   122fc:	cmp	r9, r3
   12300:	cmpeq	r8, r2
   12304:	strdhi	r8, [ip, #48]	; 0x30
   12308:	mov	r0, r4
   1230c:	add	sp, sp, #16384	; 0x4000
   12310:	add	sp, sp, #148	; 0x94
   12314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12318:	ldr	r1, [fp, #64]	; 0x40
   1231c:	mov	r0, r6
   12320:	sub	r3, r1, #1
   12324:	cmn	r3, #-536870911	; 0xe0000001
   12328:	addls	r1, r1, #1
   1232c:	ldrhi	r1, [pc, #1508]	; 12918 <__assert_fail@plt+0x1550>
   12330:	bl	15f6c <_obstack_memory_used@@Base+0x2e4>
   12334:	mov	r7, #0
   12338:	sub	r6, r6, r1
   1233c:	cmp	r8, r6
   12340:	sbcs	r3, r9, r7
   12344:	movlt	r3, #1
   12348:	movge	r3, #0
   1234c:	cmp	r9, #0
   12350:	movlt	r3, #0
   12354:	andge	r3, r3, #1
   12358:	cmp	r3, #0
   1235c:	beq	12390 <__assert_fail@plt+0xfc8>
   12360:	mov	r3, #1
   12364:	str	r3, [sp]
   12368:	mov	r2, r6
   1236c:	mov	r3, r7
   12370:	ldr	r0, [sp, #40]	; 0x28
   12374:	bl	111b8 <lseek64@plt>
   12378:	cmp	r0, #0
   1237c:	sbcs	r3, r1, #0
   12380:	blt	12390 <__assert_fail@plt+0xfc8>
   12384:	subs	r6, r6, r8
   12388:	sbc	r7, r7, r9
   1238c:	strd	r6, [sp, #112]	; 0x70
   12390:	mov	r3, #2
   12394:	str	r3, [sp, #8]
   12398:	mov	r2, #0
   1239c:	mov	r3, #0
   123a0:	ldr	r0, [sp, #40]	; 0x28
   123a4:	strd	r2, [sp]
   123a8:	bl	12f60 <__assert_fail@plt+0x1b98>
   123ac:	add	r3, sp, #140	; 0x8c
   123b0:	str	r3, [sp, #32]
   123b4:	mov	r6, #16384	; 0x4000
   123b8:	b	123cc <__assert_fail@plt+0x1004>
   123bc:	ldrd	r2, [sp, #112]	; 0x70
   123c0:	adds	r2, r2, r0
   123c4:	adc	r3, r3, #0
   123c8:	strd	r2, [sp, #112]	; 0x70
   123cc:	mov	r2, r6
   123d0:	ldr	r1, [sp, #32]
   123d4:	ldr	r0, [sp, #40]	; 0x28
   123d8:	bl	14d44 <__assert_fail@plt+0x397c>
   123dc:	cmp	r0, #0
   123e0:	beq	12240 <__assert_fail@plt+0xe78>
   123e4:	cmn	r0, #1
   123e8:	bne	123bc <__assert_fail@plt+0xff4>
   123ec:	bl	112b4 <__errno_location@plt>
   123f0:	ldr	r2, [sp, #80]	; 0x50
   123f4:	mov	r1, #3
   123f8:	ldr	r4, [r0]
   123fc:	mov	r0, #0
   12400:	bl	148f8 <__assert_fail@plt+0x3530>
   12404:	mov	r1, r4
   12408:	ldr	r2, [pc, #1292]	; 1291c <__assert_fail@plt+0x1554>
   1240c:	mov	r4, r5
   12410:	mov	r3, r0
   12414:	mov	r0, #0
   12418:	bl	111f4 <error@plt>
   1241c:	b	12240 <__assert_fail@plt+0xe78>
   12420:	ldr	r3, [sp, #52]	; 0x34
   12424:	orrs	r4, r3, r6
   12428:	bne	12448 <__assert_fail@plt+0x1080>
   1242c:	add	r3, sp, #112	; 0x70
   12430:	add	r2, sp, #104	; 0x68
   12434:	ldr	r1, [sp, #40]	; 0x28
   12438:	ldr	r0, [sp, #80]	; 0x50
   1243c:	bl	12a94 <__assert_fail@plt+0x16cc>
   12440:	mov	r4, r0
   12444:	b	12240 <__assert_fail@plt+0xe78>
   12448:	bl	111c4 <__ctype_get_mb_cur_max@plt>
   1244c:	mov	r5, #0
   12450:	cmp	r0, #1
   12454:	bls	128fc <__assert_fail@plt+0x1534>
   12458:	mov	sl, #0
   1245c:	mov	fp, #0
   12460:	mov	r6, r5
   12464:	add	r3, sp, #132	; 0x84
   12468:	str	r5, [sp, #124]	; 0x7c
   1246c:	str	r5, [sp, #128]	; 0x80
   12470:	str	r5, [sp, #56]	; 0x38
   12474:	strd	sl, [sp, #72]	; 0x48
   12478:	strd	sl, [sp, #32]
   1247c:	strd	sl, [sp, #64]	; 0x40
   12480:	str	r3, [sp, #88]	; 0x58
   12484:	add	r3, sp, #140	; 0x8c
   12488:	rsb	r2, r5, #16384	; 0x4000
   1248c:	add	r1, r3, r5
   12490:	ldr	r0, [sp, #40]	; 0x28
   12494:	bl	14d44 <__assert_fail@plt+0x397c>
   12498:	cmp	r0, #0
   1249c:	beq	124d8 <__assert_fail@plt+0x1110>
   124a0:	cmn	r0, #1
   124a4:	bne	1250c <__assert_fail@plt+0x1144>
   124a8:	bl	112b4 <__errno_location@plt>
   124ac:	ldr	r2, [sp, #80]	; 0x50
   124b0:	mov	r1, #3
   124b4:	ldr	r4, [r0]
   124b8:	mov	r0, #0
   124bc:	bl	148f8 <__assert_fail@plt+0x3530>
   124c0:	mov	r1, r4
   124c4:	ldr	r2, [pc, #1104]	; 1291c <__assert_fail@plt+0x1554>
   124c8:	mov	r4, #0
   124cc:	mov	r3, r0
   124d0:	mov	r0, #0
   124d4:	bl	111f4 <error@plt>
   124d8:	ldrd	r8, [sp, #72]	; 0x48
   124dc:	ldrb	r6, [sp, #56]	; 0x38
   124e0:	ldrd	r2, [sp, #64]	; 0x40
   124e4:	cmp	r9, fp
   124e8:	cmpeq	r8, sl
   124ec:	mov	r7, #0
   124f0:	movcc	r8, sl
   124f4:	movcc	r9, fp
   124f8:	adds	r2, r2, r6
   124fc:	adc	r3, r3, r7
   12500:	mov	r6, r2
   12504:	mov	r7, r3
   12508:	b	12254 <__assert_fail@plt+0xe8c>
   1250c:	ldrd	r8, [sp, #112]	; 0x70
   12510:	add	r5, r5, r0
   12514:	add	r7, sp, #140	; 0x8c
   12518:	adds	r8, r8, r0
   1251c:	adc	r9, r9, #0
   12520:	strd	r8, [sp, #112]	; 0x70
   12524:	cmp	r6, #0
   12528:	bne	12554 <__assert_fail@plt+0x118c>
   1252c:	ldrb	r2, [r7]
   12530:	ldr	r1, [pc, #1000]	; 12920 <__assert_fail@plt+0x1558>
   12534:	and	r0, r2, #31
   12538:	lsr	ip, r2, #5
   1253c:	ldr	r1, [r1, ip, lsl #2]
   12540:	lsr	r1, r1, r0
   12544:	tst	r1, #1
   12548:	strne	r2, [sp, #100]	; 0x64
   1254c:	movne	r9, r6
   12550:	bne	125e4 <__assert_fail@plt+0x121c>
   12554:	add	r9, sp, #124	; 0x7c
   12558:	ldr	r3, [sp, #88]	; 0x58
   1255c:	ldm	r9, {r0, r1}
   12560:	mov	r2, r5
   12564:	stm	r3, {r0, r1}
   12568:	mov	r3, r9
   1256c:	mov	r1, r7
   12570:	add	r0, sp, #100	; 0x64
   12574:	bl	13280 <__assert_fail@plt+0x1eb8>
   12578:	cmn	r0, #2
   1257c:	mov	r8, r0
   12580:	bne	125a0 <__assert_fail@plt+0x11d8>
   12584:	ldr	r3, [sp, #88]	; 0x58
   12588:	cmp	r5, #0
   1258c:	ldm	r3, {r0, r1}
   12590:	stm	r9, {r0, r1}
   12594:	bne	12748 <__assert_fail@plt+0x1380>
   12598:	mov	r6, r4
   1259c:	b	12484 <__assert_fail@plt+0x10bc>
   125a0:	cmn	r0, #1
   125a4:	bne	125c0 <__assert_fail@plt+0x11f8>
   125a8:	add	r7, r7, #1
   125ac:	sub	r5, r5, #1
   125b0:	mov	r6, r4
   125b4:	cmp	r5, #0
   125b8:	bne	12524 <__assert_fail@plt+0x115c>
   125bc:	b	12484 <__assert_fail@plt+0x10bc>
   125c0:	mov	r0, r9
   125c4:	bl	11134 <mbsinit@plt>
   125c8:	cmp	r8, #0
   125cc:	movne	r6, r4
   125d0:	clz	r9, r0
   125d4:	lsr	r9, r9, #5
   125d8:	bne	125e8 <__assert_fail@plt+0x1220>
   125dc:	mov	r6, r4
   125e0:	str	r8, [sp, #100]	; 0x64
   125e4:	mov	r8, #1
   125e8:	ldr	r2, [sp, #100]	; 0x64
   125ec:	cmp	r2, #11
   125f0:	beq	126c4 <__assert_fail@plt+0x12fc>
   125f4:	bhi	12684 <__assert_fail@plt+0x12bc>
   125f8:	cmp	r2, #9
   125fc:	beq	12704 <__assert_fail@plt+0x133c>
   12600:	cmp	r2, #10
   12604:	beq	1269c <__assert_fail@plt+0x12d4>
   12608:	cmp	r6, #0
   1260c:	beq	12714 <__assert_fail@plt+0x134c>
   12610:	mov	r0, r2
   12614:	str	r2, [sp, #92]	; 0x5c
   12618:	bl	111a0 <iswprint@plt>
   1261c:	cmp	r0, #0
   12620:	beq	126e4 <__assert_fail@plt+0x131c>
   12624:	ldr	r3, [pc, #744]	; 12914 <__assert_fail@plt+0x154c>
   12628:	ldr	r2, [sp, #92]	; 0x5c
   1262c:	ldrb	r1, [r3, #11]
   12630:	cmp	r1, #0
   12634:	beq	12650 <__assert_fail@plt+0x1288>
   12638:	mov	r0, r2
   1263c:	bl	110ec <wcwidth@plt>
   12640:	cmp	r0, #0
   12644:	ble	12650 <__assert_fail@plt+0x1288>
   12648:	adds	sl, sl, r0
   1264c:	adc	fp, fp, r0, asr #31
   12650:	ldr	r2, [sp, #100]	; 0x64
   12654:	mov	r0, r2
   12658:	str	r2, [sp, #92]	; 0x5c
   1265c:	bl	11284 <iswspace@plt>
   12660:	cmp	r0, #0
   12664:	bne	126c4 <__assert_fail@plt+0x12fc>
   12668:	ldr	r2, [sp, #92]	; 0x5c
   1266c:	mov	r0, r2
   12670:	bl	11ee0 <__assert_fail@plt+0xb18>
   12674:	cmp	r0, #0
   12678:	streq	r6, [sp, #56]	; 0x38
   1267c:	beq	126e4 <__assert_fail@plt+0x131c>
   12680:	b	126c4 <__assert_fail@plt+0x12fc>
   12684:	cmp	r2, #13
   12688:	bls	126ac <__assert_fail@plt+0x12e4>
   1268c:	cmp	r2, #32
   12690:	bne	12608 <__assert_fail@plt+0x1240>
   12694:	adds	sl, sl, #1
   12698:	b	1270c <__assert_fail@plt+0x1344>
   1269c:	ldrd	r2, [sp, #104]	; 0x68
   126a0:	adds	r2, r2, #1
   126a4:	adc	r3, r3, #0
   126a8:	strd	r2, [sp, #104]	; 0x68
   126ac:	ldrd	r2, [sp, #72]	; 0x48
   126b0:	cmp	r3, fp
   126b4:	cmpeq	r2, sl
   126b8:	strdcc	sl, [sp, #72]	; 0x48
   126bc:	mov	sl, #0
   126c0:	mov	fp, #0
   126c4:	ldrd	r0, [sp, #64]	; 0x40
   126c8:	ldrb	r2, [sp, #56]	; 0x38
   126cc:	mov	r3, #0
   126d0:	adds	r0, r0, r2
   126d4:	adc	r1, r1, r3
   126d8:	mov	r3, #0
   126dc:	strd	r0, [sp, #64]	; 0x40
   126e0:	str	r3, [sp, #56]	; 0x38
   126e4:	ldrd	r2, [sp, #32]
   126e8:	add	r7, r7, r8
   126ec:	sub	r5, r5, r8
   126f0:	adds	r2, r2, #1
   126f4:	adc	r3, r3, #0
   126f8:	mov	r6, r9
   126fc:	strd	r2, [sp, #32]
   12700:	b	125b4 <__assert_fail@plt+0x11ec>
   12704:	bic	sl, sl, #7
   12708:	adds	sl, sl, #8
   1270c:	adc	fp, fp, #0
   12710:	b	126c4 <__assert_fail@plt+0x12fc>
   12714:	bl	11260 <__ctype_b_loc@plt>
   12718:	ldrb	r3, [r7]
   1271c:	lsl	r3, r3, #1
   12720:	ldr	r2, [r0]
   12724:	ldrh	r3, [r2, r3]
   12728:	tst	r3, #16384	; 0x4000
   1272c:	beq	126e4 <__assert_fail@plt+0x131c>
   12730:	adds	sl, sl, #1
   12734:	adc	fp, fp, #0
   12738:	tst	r3, #8192	; 0x2000
   1273c:	bne	126c4 <__assert_fail@plt+0x12fc>
   12740:	str	r4, [sp, #56]	; 0x38
   12744:	b	126e4 <__assert_fail@plt+0x131c>
   12748:	cmp	r5, #16384	; 0x4000
   1274c:	addeq	r7, r7, #1
   12750:	subeq	r5, r5, #1
   12754:	ldr	r3, [pc, #456]	; 12924 <__assert_fail@plt+0x155c>
   12758:	mov	r2, r5
   1275c:	mov	r1, r7
   12760:	add	r0, sp, #140	; 0x8c
   12764:	bl	110f8 <__memmove_chk@plt>
   12768:	b	12598 <__assert_fail@plt+0x11d0>
   1276c:	ldrd	r0, [sp, #112]	; 0x70
   12770:	mov	r3, #0
   12774:	adds	r0, r0, sl
   12778:	adc	r1, r1, #0
   1277c:	strd	r0, [sp, #112]	; 0x70
   12780:	add	r2, sp, #140	; 0x8c
   12784:	ldrb	fp, [r2, r3]
   12788:	cmp	fp, #11
   1278c:	beq	12834 <__assert_fail@plt+0x146c>
   12790:	bhi	127f4 <__assert_fail@plt+0x142c>
   12794:	cmp	fp, #9
   12798:	beq	128ec <__assert_fail@plt+0x1524>
   1279c:	cmp	fp, #10
   127a0:	beq	1280c <__assert_fail@plt+0x1444>
   127a4:	str	r3, [sp, #64]	; 0x40
   127a8:	bl	11260 <__ctype_b_loc@plt>
   127ac:	lsl	r1, fp, #1
   127b0:	ldr	r3, [sp, #64]	; 0x40
   127b4:	ldr	r0, [r0]
   127b8:	ldrh	r1, [r0, r1]
   127bc:	tst	r1, #16384	; 0x4000
   127c0:	beq	12850 <__assert_fail@plt+0x1488>
   127c4:	adds	r6, r6, #1
   127c8:	adc	r7, r7, #0
   127cc:	tst	r1, #8192	; 0x2000
   127d0:	bne	12834 <__assert_fail@plt+0x146c>
   127d4:	mov	r0, fp
   127d8:	bl	112e4 <btowc@plt>
   127dc:	bl	11ee0 <__assert_fail@plt+0xb18>
   127e0:	ldr	r3, [sp, #64]	; 0x40
   127e4:	cmp	r0, #0
   127e8:	bne	12834 <__assert_fail@plt+0x146c>
   127ec:	mov	r5, r4
   127f0:	b	12850 <__assert_fail@plt+0x1488>
   127f4:	cmp	fp, #13
   127f8:	bls	1281c <__assert_fail@plt+0x1454>
   127fc:	cmp	fp, #32
   12800:	bne	127a4 <__assert_fail@plt+0x13dc>
   12804:	adds	r6, r6, #1
   12808:	b	128f4 <__assert_fail@plt+0x152c>
   1280c:	ldrd	r0, [sp, #104]	; 0x68
   12810:	adds	r0, r0, #1
   12814:	adc	r1, r1, #0
   12818:	strd	r0, [sp, #104]	; 0x68
   1281c:	ldrd	r0, [sp, #56]	; 0x38
   12820:	cmp	r1, r7
   12824:	cmpeq	r0, r6
   12828:	strdcc	r6, [sp, #56]	; 0x38
   1282c:	mov	r6, #0
   12830:	mov	r7, #0
   12834:	ldrd	r8, [sp, #32]
   12838:	uxtb	r0, r5
   1283c:	mov	r1, #0
   12840:	adds	r8, r8, r0
   12844:	adc	r9, r9, r1
   12848:	mov	r5, #0
   1284c:	strd	r8, [sp, #32]
   12850:	add	r3, r3, #1
   12854:	cmp	r3, sl
   12858:	bne	12780 <__assert_fail@plt+0x13b8>
   1285c:	mov	r2, #16384	; 0x4000
   12860:	add	r1, sp, #140	; 0x8c
   12864:	ldr	r0, [sp, #40]	; 0x28
   12868:	bl	14d44 <__assert_fail@plt+0x397c>
   1286c:	subs	sl, r0, #0
   12870:	beq	128ac <__assert_fail@plt+0x14e4>
   12874:	cmn	sl, #1
   12878:	bne	1276c <__assert_fail@plt+0x13a4>
   1287c:	bl	112b4 <__errno_location@plt>
   12880:	ldr	r2, [sp, #80]	; 0x50
   12884:	mov	r1, #3
   12888:	ldr	r4, [r0]
   1288c:	mov	r0, #0
   12890:	bl	148f8 <__assert_fail@plt+0x3530>
   12894:	mov	r1, r4
   12898:	ldr	r2, [pc, #124]	; 1291c <__assert_fail@plt+0x1554>
   1289c:	mov	r4, #0
   128a0:	mov	r3, r0
   128a4:	mov	r0, #0
   128a8:	bl	111f4 <error@plt>
   128ac:	ldrd	r8, [sp, #56]	; 0x38
   128b0:	ldrd	r2, [sp, #32]
   128b4:	cmp	r9, r7
   128b8:	cmpeq	r8, r6
   128bc:	movcc	r8, r6
   128c0:	uxtb	r6, r5
   128c4:	movcc	r9, r7
   128c8:	adds	r2, r2, r6
   128cc:	mov	r7, #0
   128d0:	adc	r3, r3, r7
   128d4:	mov	r6, r2
   128d8:	mov	r7, r3
   128dc:	mov	r2, #0
   128e0:	mov	r3, #0
   128e4:	strd	r2, [sp, #32]
   128e8:	b	12254 <__assert_fail@plt+0xe8c>
   128ec:	bic	r6, r6, #7
   128f0:	adds	r6, r6, #8
   128f4:	adc	r7, r7, #0
   128f8:	b	12834 <__assert_fail@plt+0x146c>
   128fc:	mov	r6, #0
   12900:	mov	r7, #0
   12904:	strd	r6, [sp, #56]	; 0x38
   12908:	strd	r6, [sp, #32]
   1290c:	b	1285c <__assert_fail@plt+0x1494>
   12910:	andeq	r6, r1, r5, lsl #17
   12914:	andeq	r8, r2, r0, lsr #3
   12918:	andeq	r0, r0, r1, lsl #4
   1291c:	ldrdeq	r6, [r1], -r1
   12920:	ldrdeq	r6, [r1], -r4
   12924:	andeq	r4, r0, r1
   12928:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1292c:	sub	sp, sp, #16384	; 0x4000
   12930:	sub	sp, sp, #44	; 0x2c
   12934:	mov	r8, #0
   12938:	str	r2, [sp, #20]
   1293c:	str	r3, [sp, #24]
   12940:	mov	r2, #0
   12944:	mov	r3, #0
   12948:	mov	sl, r2
   1294c:	mov	fp, r3
   12950:	add	r7, sp, #36	; 0x24
   12954:	mov	r6, #10
   12958:	str	r0, [sp, #12]
   1295c:	str	r1, [sp, #16]
   12960:	strd	r2, [sp]
   12964:	mov	r2, #16384	; 0x4000
   12968:	mov	r1, r7
   1296c:	ldr	r0, [sp, #16]
   12970:	bl	14d44 <__assert_fail@plt+0x397c>
   12974:	subs	r2, r0, #0
   12978:	bne	12998 <__assert_fail@plt+0x15d0>
   1297c:	ldrd	r2, [sp]
   12980:	ldr	r1, [sp, #24]
   12984:	mov	r0, #1
   12988:	strd	r2, [r1]
   1298c:	ldr	r3, [sp, #20]
   12990:	strd	sl, [r3]
   12994:	b	129d0 <__assert_fail@plt+0x1608>
   12998:	cmn	r2, #1
   1299c:	bne	129dc <__assert_fail@plt+0x1614>
   129a0:	bl	112b4 <__errno_location@plt>
   129a4:	ldr	r2, [sp, #12]
   129a8:	mov	r1, #3
   129ac:	ldr	r4, [r0]
   129b0:	mov	r0, #0
   129b4:	bl	148f8 <__assert_fail@plt+0x3530>
   129b8:	ldr	r2, [pc, #208]	; 12a90 <__assert_fail@plt+0x16c8>
   129bc:	mov	r1, r4
   129c0:	mov	r3, r0
   129c4:	mov	r0, #0
   129c8:	bl	111f4 <error@plt>
   129cc:	mov	r0, #0
   129d0:	add	sp, sp, #16384	; 0x4000
   129d4:	add	sp, sp, #44	; 0x2c
   129d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129dc:	ldrd	r0, [sp]
   129e0:	add	r9, r7, r2
   129e4:	adds	r0, r0, r2
   129e8:	adc	r1, r1, #0
   129ec:	cmp	r8, #0
   129f0:	strd	r0, [sp]
   129f4:	moveq	r4, sl
   129f8:	moveq	r5, fp
   129fc:	moveq	r1, r7
   12a00:	beq	12a54 <__assert_fail@plt+0x168c>
   12a04:	mov	r4, sl
   12a08:	mov	r5, fp
   12a0c:	mov	r0, r7
   12a10:	strb	r6, [r7, r2]
   12a14:	mov	r1, r6
   12a18:	str	r2, [sp, #28]
   12a1c:	bl	11194 <rawmemchr@plt>
   12a20:	ldr	r2, [sp, #28]
   12a24:	cmp	r9, r0
   12a28:	bls	12a5c <__assert_fail@plt+0x1694>
   12a2c:	adds	r4, r4, #1
   12a30:	add	r0, r0, #1
   12a34:	adc	r5, r5, #0
   12a38:	b	12a14 <__assert_fail@plt+0x164c>
   12a3c:	ldrb	r0, [r1], #1
   12a40:	sub	r0, r0, #10
   12a44:	clz	r0, r0
   12a48:	lsr	r0, r0, #5
   12a4c:	adds	r4, r4, r0
   12a50:	adc	r5, r5, #0
   12a54:	cmp	r9, r1
   12a58:	bne	12a3c <__assert_fail@plt+0x1674>
   12a5c:	subs	sl, r4, sl
   12a60:	mov	r1, #15
   12a64:	mov	r0, r2
   12a68:	sbc	fp, r5, fp
   12a6c:	bl	15d80 <_obstack_memory_used@@Base+0xf8>
   12a70:	mov	r1, #0
   12a74:	cmp	fp, r1
   12a78:	mov	fp, r5
   12a7c:	cmpeq	sl, r0
   12a80:	movls	r8, #1
   12a84:	movhi	r8, #0
   12a88:	mov	sl, r4
   12a8c:	b	12964 <__assert_fail@plt+0x159c>
   12a90:	ldrdeq	r6, [r1], -r1
   12a94:	cmp	r3, #0
   12a98:	cmpne	r2, #0
   12a9c:	beq	12aa4 <__assert_fail@plt+0x16dc>
   12aa0:	b	12928 <__assert_fail@plt+0x1560>
   12aa4:	mov	r0, #0
   12aa8:	bx	lr
   12aac:	subs	r5, r0, #0
   12ab0:	push	{r7, lr}
   12ab4:	sub	sp, sp, #56	; 0x38
   12ab8:	ldr	r4, [pc, #528]	; 12cd0 <__assert_fail@plt+0x1908>
   12abc:	beq	12af4 <__assert_fail@plt+0x172c>
   12ac0:	ldr	r3, [pc, #524]	; 12cd4 <__assert_fail@plt+0x190c>
   12ac4:	mov	r2, #5
   12ac8:	ldr	r1, [pc, #520]	; 12cd8 <__assert_fail@plt+0x1910>
   12acc:	mov	r0, #0
   12ad0:	ldr	r6, [r3]
   12ad4:	bl	11158 <dcgettext@plt>
   12ad8:	ldr	r3, [r4]
   12adc:	mov	r1, #1
   12ae0:	mov	r2, r0
   12ae4:	mov	r0, r6
   12ae8:	bl	11314 <__fprintf_chk@plt>
   12aec:	mov	r0, r5
   12af0:	bl	1126c <exit@plt>
   12af4:	mov	r2, #5
   12af8:	ldr	r1, [pc, #476]	; 12cdc <__assert_fail@plt+0x1914>
   12afc:	bl	11158 <dcgettext@plt>
   12b00:	ldr	r3, [r4]
   12b04:	ldr	r4, [pc, #468]	; 12ce0 <__assert_fail@plt+0x1918>
   12b08:	mov	r2, r3
   12b0c:	ldr	r8, [pc, #464]	; 12ce4 <__assert_fail@plt+0x191c>
   12b10:	mov	r6, r5
   12b14:	mov	r1, r0
   12b18:	mov	r0, #1
   12b1c:	bl	112fc <__printf_chk@plt>
   12b20:	mov	r2, #5
   12b24:	ldr	r1, [pc, #444]	; 12ce8 <__assert_fail@plt+0x1920>
   12b28:	mov	r0, r5
   12b2c:	bl	11158 <dcgettext@plt>
   12b30:	ldr	r1, [r4]
   12b34:	bl	110a4 <fputs_unlocked@plt>
   12b38:	mov	r2, #5
   12b3c:	ldr	r1, [pc, #424]	; 12cec <__assert_fail@plt+0x1924>
   12b40:	mov	r0, r5
   12b44:	bl	11158 <dcgettext@plt>
   12b48:	ldr	r1, [r4]
   12b4c:	bl	110a4 <fputs_unlocked@plt>
   12b50:	mov	r2, #5
   12b54:	ldr	r1, [pc, #404]	; 12cf0 <__assert_fail@plt+0x1928>
   12b58:	mov	r0, r5
   12b5c:	bl	11158 <dcgettext@plt>
   12b60:	ldr	r1, [r4]
   12b64:	bl	110a4 <fputs_unlocked@plt>
   12b68:	mov	r2, #5
   12b6c:	ldr	r1, [pc, #384]	; 12cf4 <__assert_fail@plt+0x192c>
   12b70:	mov	r0, r5
   12b74:	bl	11158 <dcgettext@plt>
   12b78:	ldr	r1, [r4]
   12b7c:	bl	110a4 <fputs_unlocked@plt>
   12b80:	mov	r2, #5
   12b84:	ldr	r1, [pc, #364]	; 12cf8 <__assert_fail@plt+0x1930>
   12b88:	mov	r0, r5
   12b8c:	bl	11158 <dcgettext@plt>
   12b90:	ldr	r1, [r4]
   12b94:	bl	110a4 <fputs_unlocked@plt>
   12b98:	mov	r2, #5
   12b9c:	ldr	r1, [pc, #344]	; 12cfc <__assert_fail@plt+0x1934>
   12ba0:	mov	r0, r5
   12ba4:	bl	11158 <dcgettext@plt>
   12ba8:	ldr	r1, [r4]
   12bac:	bl	110a4 <fputs_unlocked@plt>
   12bb0:	ldr	lr, [pc, #328]	; 12d00 <__assert_fail@plt+0x1938>
   12bb4:	mov	ip, sp
   12bb8:	ldm	lr!, {r0, r1, r2, r3}
   12bbc:	stmia	ip!, {r0, r1, r2, r3}
   12bc0:	ldm	lr!, {r0, r1, r2, r3}
   12bc4:	stmia	ip!, {r0, r1, r2, r3}
   12bc8:	ldm	lr!, {r0, r1, r2, r3}
   12bcc:	stmia	ip!, {r0, r1, r2, r3}
   12bd0:	ldm	lr, {r0, r1}
   12bd4:	stm	ip, {r0, r1}
   12bd8:	ldr	r1, [sp, r6]
   12bdc:	add	r7, sp, r6
   12be0:	cmp	r1, #0
   12be4:	bne	12c88 <__assert_fail@plt+0x18c0>
   12be8:	ldr	r6, [r7, #4]
   12bec:	ldr	r7, [pc, #240]	; 12ce4 <__assert_fail@plt+0x191c>
   12bf0:	cmp	r6, #0
   12bf4:	mov	r2, #5
   12bf8:	ldr	r1, [pc, #260]	; 12d04 <__assert_fail@plt+0x193c>
   12bfc:	mov	r0, #0
   12c00:	moveq	r6, r7
   12c04:	bl	11158 <dcgettext@plt>
   12c08:	ldr	r3, [pc, #248]	; 12d08 <__assert_fail@plt+0x1940>
   12c0c:	ldr	r2, [pc, #248]	; 12d0c <__assert_fail@plt+0x1944>
   12c10:	mov	r1, r0
   12c14:	mov	r0, #1
   12c18:	bl	112fc <__printf_chk@plt>
   12c1c:	mov	r1, #0
   12c20:	mov	r0, #5
   12c24:	bl	11338 <setlocale@plt>
   12c28:	cmp	r0, #0
   12c2c:	bne	12ca0 <__assert_fail@plt+0x18d8>
   12c30:	mov	r2, #5
   12c34:	ldr	r1, [pc, #212]	; 12d10 <__assert_fail@plt+0x1948>
   12c38:	mov	r0, #0
   12c3c:	bl	11158 <dcgettext@plt>
   12c40:	ldr	r3, [pc, #156]	; 12ce4 <__assert_fail@plt+0x191c>
   12c44:	ldr	r2, [pc, #188]	; 12d08 <__assert_fail@plt+0x1940>
   12c48:	mov	r1, r0
   12c4c:	mov	r0, #1
   12c50:	bl	112fc <__printf_chk@plt>
   12c54:	mov	r2, #5
   12c58:	ldr	r1, [pc, #180]	; 12d14 <__assert_fail@plt+0x194c>
   12c5c:	mov	r0, #0
   12c60:	bl	11158 <dcgettext@plt>
   12c64:	ldr	r2, [pc, #172]	; 12d18 <__assert_fail@plt+0x1950>
   12c68:	cmp	r6, r7
   12c6c:	ldr	r3, [pc, #168]	; 12d1c <__assert_fail@plt+0x1954>
   12c70:	moveq	r3, r2
   12c74:	mov	r2, r6
   12c78:	mov	r1, r0
   12c7c:	mov	r0, #1
   12c80:	bl	112fc <__printf_chk@plt>
   12c84:	b	12aec <__assert_fail@plt+0x1724>
   12c88:	mov	r0, r8
   12c8c:	bl	110bc <strcmp@plt>
   12c90:	add	r6, r6, #8
   12c94:	cmp	r0, #0
   12c98:	bne	12bd8 <__assert_fail@plt+0x1810>
   12c9c:	b	12be8 <__assert_fail@plt+0x1820>
   12ca0:	mov	r2, #3
   12ca4:	ldr	r1, [pc, #116]	; 12d20 <__assert_fail@plt+0x1958>
   12ca8:	bl	11398 <strncmp@plt>
   12cac:	cmp	r0, #0
   12cb0:	beq	12c30 <__assert_fail@plt+0x1868>
   12cb4:	mov	r2, #5
   12cb8:	ldr	r1, [pc, #100]	; 12d24 <__assert_fail@plt+0x195c>
   12cbc:	mov	r0, #0
   12cc0:	bl	11158 <dcgettext@plt>
   12cc4:	ldr	r1, [r4]
   12cc8:	bl	110a4 <fputs_unlocked@plt>
   12ccc:	b	12c30 <__assert_fail@plt+0x1868>
   12cd0:	andeq	r8, r2, r8, ror #3
   12cd4:	andeq	r8, r2, r8, lsl #3
   12cd8:	muleq	r1, r7, r8
   12cdc:			; <UNDEFINED> instruction: 0x000168be
   12ce0:	muleq	r2, r4, r1
   12ce4:	muleq	r1, r4, r8
   12ce8:	andeq	r6, r1, r5, lsl #18
   12cec:	andeq	r6, r1, r7, asr #19
   12cf0:	strdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   12cf4:	andeq	r6, r1, ip, lsr #22
   12cf8:	andeq	r6, r1, r9, asr ip
   12cfc:	andeq	r6, r1, r6, lsl #25
   12d00:	andeq	r6, r1, r8, lsr #15
   12d04:			; <UNDEFINED> instruction: 0x00016cbc
   12d08:	ldrdeq	r6, [r1], -r3
   12d0c:	strdeq	r6, [r1], -fp
   12d10:	andeq	r6, r1, r4, asr sp
   12d14:	andeq	r6, r1, pc, ror #26
   12d18:	andeq	r6, r1, r4, lsr pc
   12d1c:	andeq	r6, r1, r1, lsr #27
   12d20:	andeq	r6, r1, r9, lsl #26
   12d24:	andeq	r6, r1, sp, lsl #26
   12d28:	push	{r4, lr}
   12d2c:	mov	r4, r0
   12d30:	mov	r0, #24
   12d34:	bl	157d8 <__assert_fail@plt+0x4410>
   12d38:	cmp	r0, #0
   12d3c:	movne	r3, #0
   12d40:	strne	r3, [r0]
   12d44:	strne	r4, [r0, #16]
   12d48:	strne	r4, [r0, #20]
   12d4c:	pop	{r4, pc}
   12d50:	push	{r4, lr}
   12d54:	mov	r4, r0
   12d58:	mov	r0, #24
   12d5c:	bl	157d8 <__assert_fail@plt+0x4410>
   12d60:	cmp	r0, #0
   12d64:	movne	r3, #0
   12d68:	strne	r4, [r0]
   12d6c:	strne	r3, [r0, #8]
   12d70:	strne	r3, [r0, #12]
   12d74:	strne	r3, [r0, #4]
   12d78:	strne	r3, [r0, #16]
   12d7c:	pop	{r4, pc}
   12d80:	ldr	r3, [r0]
   12d84:	push	{r4, r5, r6, lr}
   12d88:	cmp	r3, #0
   12d8c:	mov	r4, r0
   12d90:	beq	12dec <__assert_fail@plt+0x1a24>
   12d94:	mov	r5, r1
   12d98:	mov	r2, #0
   12d9c:	add	r1, r0, #12
   12da0:	add	r0, r0, #8
   12da4:	bl	11374 <getdelim@plt>
   12da8:	cmp	r0, #0
   12dac:	bge	12dd0 <__assert_fail@plt+0x1a08>
   12db0:	ldr	r0, [r4]
   12db4:	bl	11278 <feof@plt>
   12db8:	cmp	r0, #0
   12dbc:	movne	r0, #2
   12dc0:	moveq	r0, #4
   12dc4:	str	r0, [r5]
   12dc8:	mov	r0, #0
   12dcc:	pop	{r4, r5, r6, pc}
   12dd0:	mov	r3, #1
   12dd4:	str	r3, [r5]
   12dd8:	ldr	r3, [r4, #4]
   12ddc:	ldr	r0, [r4, #8]
   12de0:	add	r3, r3, #1
   12de4:	str	r3, [r4, #4]
   12de8:	pop	{r4, r5, r6, pc}
   12dec:	ldr	r3, [r0, #20]
   12df0:	ldr	r0, [r3]
   12df4:	cmp	r0, #0
   12df8:	moveq	r3, #2
   12dfc:	movne	r2, #1
   12e00:	addne	r3, r3, #4
   12e04:	strne	r2, [r1]
   12e08:	streq	r3, [r1]
   12e0c:	strne	r3, [r4, #20]
   12e10:	pop	{r4, r5, r6, pc}
   12e14:	ldr	r3, [r0]
   12e18:	cmp	r3, #0
   12e1c:	ldreq	r3, [r0, #20]
   12e20:	ldrne	r0, [r0, #4]
   12e24:	ldreq	r0, [r0, #16]
   12e28:	subeq	r0, r3, r0
   12e2c:	asreq	r0, r0, #2
   12e30:	bx	lr
   12e34:	ldr	r3, [r0]
   12e38:	push	{r4, lr}
   12e3c:	cmp	r3, #0
   12e40:	mov	r4, r0
   12e44:	beq	12e50 <__assert_fail@plt+0x1a88>
   12e48:	ldr	r0, [r0, #8]
   12e4c:	bl	13094 <__assert_fail@plt+0x1ccc>
   12e50:	mov	r0, r4
   12e54:	pop	{r4, lr}
   12e58:	b	13094 <__assert_fail@plt+0x1ccc>
   12e5c:	ldr	r3, [pc, #4]	; 12e68 <__assert_fail@plt+0x1aa0>
   12e60:	str	r0, [r3]
   12e64:	bx	lr
   12e68:	andeq	r8, r2, r0, ror #3
   12e6c:	ldr	r3, [pc, #4]	; 12e78 <__assert_fail@plt+0x1ab0>
   12e70:	strb	r0, [r3, #4]
   12e74:	bx	lr
   12e78:	andeq	r8, r2, r0, ror #3
   12e7c:	ldr	r3, [pc, #192]	; 12f44 <__assert_fail@plt+0x1b7c>
   12e80:	push	{r0, r1, r4, r5, r6, lr}
   12e84:	ldr	r0, [r3]
   12e88:	bl	15874 <__assert_fail@plt+0x44ac>
   12e8c:	cmp	r0, #0
   12e90:	beq	12f28 <__assert_fail@plt+0x1b60>
   12e94:	ldr	r3, [pc, #172]	; 12f48 <__assert_fail@plt+0x1b80>
   12e98:	mov	r4, r3
   12e9c:	ldrb	r2, [r3, #4]
   12ea0:	cmp	r2, #0
   12ea4:	beq	12eb8 <__assert_fail@plt+0x1af0>
   12ea8:	bl	112b4 <__errno_location@plt>
   12eac:	ldr	r3, [r0]
   12eb0:	cmp	r3, #32
   12eb4:	beq	12f28 <__assert_fail@plt+0x1b60>
   12eb8:	mov	r2, #5
   12ebc:	ldr	r1, [pc, #136]	; 12f4c <__assert_fail@plt+0x1b84>
   12ec0:	mov	r0, #0
   12ec4:	bl	11158 <dcgettext@plt>
   12ec8:	ldr	r4, [r4]
   12ecc:	cmp	r4, #0
   12ed0:	mov	r5, r0
   12ed4:	beq	12f0c <__assert_fail@plt+0x1b44>
   12ed8:	bl	112b4 <__errno_location@plt>
   12edc:	ldr	r6, [r0]
   12ee0:	mov	r0, r4
   12ee4:	bl	148e8 <__assert_fail@plt+0x3520>
   12ee8:	str	r5, [sp]
   12eec:	ldr	r2, [pc, #92]	; 12f50 <__assert_fail@plt+0x1b88>
   12ef0:	mov	r1, r6
   12ef4:	mov	r3, r0
   12ef8:	mov	r0, #0
   12efc:	bl	111f4 <error@plt>
   12f00:	ldr	r3, [pc, #76]	; 12f54 <__assert_fail@plt+0x1b8c>
   12f04:	ldr	r0, [r3]
   12f08:	bl	1111c <_exit@plt>
   12f0c:	bl	112b4 <__errno_location@plt>
   12f10:	mov	r3, r5
   12f14:	ldr	r2, [pc, #60]	; 12f58 <__assert_fail@plt+0x1b90>
   12f18:	ldr	r1, [r0]
   12f1c:	mov	r0, r4
   12f20:	bl	111f4 <error@plt>
   12f24:	b	12f00 <__assert_fail@plt+0x1b38>
   12f28:	ldr	r3, [pc, #44]	; 12f5c <__assert_fail@plt+0x1b94>
   12f2c:	ldr	r0, [r3]
   12f30:	bl	15874 <__assert_fail@plt+0x44ac>
   12f34:	cmp	r0, #0
   12f38:	bne	12f00 <__assert_fail@plt+0x1b38>
   12f3c:	add	sp, sp, #8
   12f40:	pop	{r4, r5, r6, pc}
   12f44:	muleq	r2, r4, r1
   12f48:	andeq	r8, r2, r0, ror #3
   12f4c:	andeq	r6, r1, r1, asr #31
   12f50:	andeq	r6, r1, sp, asr #31
   12f54:	andeq	r8, r2, r0, lsr r1
   12f58:	ldrdeq	r6, [r1], -r1
   12f5c:	andeq	r8, r2, r8, lsl #3
   12f60:	push	{r4, r5}
   12f64:	pop	{r4, r5}
   12f68:	b	110c8 <posix_fadvise64@plt>
   12f6c:	cmp	r0, #0
   12f70:	bxeq	lr
   12f74:	push	{r0, r1, r2, r3, r4, lr}
   12f78:	mov	r4, r1
   12f7c:	bl	11308 <fileno@plt>
   12f80:	mov	r2, #0
   12f84:	mov	r3, #0
   12f88:	str	r4, [sp, #8]
   12f8c:	strd	r2, [sp]
   12f90:	bl	110c8 <posix_fadvise64@plt>
   12f94:	add	sp, sp, #16
   12f98:	pop	{r4, pc}
   12f9c:	push	{r0, r1, r2, r4, r5, lr}
   12fa0:	mov	r4, r0
   12fa4:	bl	11308 <fileno@plt>
   12fa8:	cmp	r0, #0
   12fac:	mov	r0, r4
   12fb0:	bge	12fc0 <__assert_fail@plt+0x1bf8>
   12fb4:	add	sp, sp, #12
   12fb8:	pop	{r4, r5, lr}
   12fbc:	b	11320 <fclose@plt>
   12fc0:	bl	1123c <__freading@plt>
   12fc4:	cmp	r0, #0
   12fc8:	bne	13004 <__assert_fail@plt+0x1c3c>
   12fcc:	mov	r0, r4
   12fd0:	bl	13044 <__assert_fail@plt+0x1c7c>
   12fd4:	cmp	r0, #0
   12fd8:	bne	13038 <__assert_fail@plt+0x1c70>
   12fdc:	mov	r5, #0
   12fe0:	mov	r0, r4
   12fe4:	bl	11320 <fclose@plt>
   12fe8:	cmp	r5, #0
   12fec:	beq	12ffc <__assert_fail@plt+0x1c34>
   12ff0:	bl	112b4 <__errno_location@plt>
   12ff4:	str	r5, [r0]
   12ff8:	mvn	r0, #0
   12ffc:	add	sp, sp, #12
   13000:	pop	{r4, r5, pc}
   13004:	mov	r0, r4
   13008:	bl	11308 <fileno@plt>
   1300c:	mov	r3, #1
   13010:	str	r3, [sp]
   13014:	mov	r2, #0
   13018:	mov	r3, #0
   1301c:	bl	111b8 <lseek64@plt>
   13020:	mvn	r3, #0
   13024:	mvn	r2, #0
   13028:	cmp	r1, r3
   1302c:	cmpeq	r0, r2
   13030:	bne	12fcc <__assert_fail@plt+0x1c04>
   13034:	b	12fdc <__assert_fail@plt+0x1c14>
   13038:	bl	112b4 <__errno_location@plt>
   1303c:	ldr	r5, [r0]
   13040:	b	12fe0 <__assert_fail@plt+0x1c18>
   13044:	push	{r0, r1, r4, lr}
   13048:	subs	r4, r0, #0
   1304c:	bne	13060 <__assert_fail@plt+0x1c98>
   13050:	mov	r0, r4
   13054:	add	sp, sp, #8
   13058:	pop	{r4, lr}
   1305c:	b	110e0 <fflush@plt>
   13060:	bl	1123c <__freading@plt>
   13064:	cmp	r0, #0
   13068:	beq	13050 <__assert_fail@plt+0x1c88>
   1306c:	ldr	r3, [r4]
   13070:	tst	r3, #256	; 0x100
   13074:	beq	13050 <__assert_fail@plt+0x1c88>
   13078:	mov	r3, #1
   1307c:	str	r3, [sp]
   13080:	mov	r2, #0
   13084:	mov	r3, #0
   13088:	mov	r0, r4
   1308c:	bl	130e8 <__assert_fail@plt+0x1d20>
   13090:	b	13050 <__assert_fail@plt+0x1c88>
   13094:	push	{r0, r1, r2, r4, r5, lr}
   13098:	mov	r5, r0
   1309c:	bl	112b4 <__errno_location@plt>
   130a0:	ldr	r3, [r0]
   130a4:	mov	r4, r0
   130a8:	str	r3, [sp]
   130ac:	str	r3, [sp, #4]
   130b0:	mov	r3, #0
   130b4:	str	r3, [r0]
   130b8:	mov	r0, r5
   130bc:	bl	11104 <free@plt>
   130c0:	ldr	r3, [r4]
   130c4:	add	r2, sp, #8
   130c8:	cmp	r3, #0
   130cc:	moveq	r3, #4
   130d0:	movne	r3, #0
   130d4:	add	r3, r2, r3
   130d8:	ldr	r3, [r3, #-8]
   130dc:	str	r3, [r4]
   130e0:	add	sp, sp, #12
   130e4:	pop	{r4, r5, pc}
   130e8:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   130ec:	mov	r4, r0
   130f0:	ldmib	r0, {ip, lr}
   130f4:	ldr	r8, [sp, #32]
   130f8:	cmp	lr, ip
   130fc:	bne	13168 <__assert_fail@plt+0x1da0>
   13100:	ldr	lr, [r0, #20]
   13104:	ldr	ip, [r0, #16]
   13108:	cmp	lr, ip
   1310c:	bne	13168 <__assert_fail@plt+0x1da0>
   13110:	ldr	r5, [r0, #36]	; 0x24
   13114:	cmp	r5, #0
   13118:	bne	13168 <__assert_fail@plt+0x1da0>
   1311c:	mov	r6, r2
   13120:	mov	r7, r3
   13124:	bl	11308 <fileno@plt>
   13128:	mov	r2, r6
   1312c:	mov	r3, r7
   13130:	str	r8, [sp]
   13134:	bl	111b8 <lseek64@plt>
   13138:	mvn	r3, #0
   1313c:	mvn	r2, #0
   13140:	cmp	r1, r3
   13144:	cmpeq	r0, r2
   13148:	mvneq	r0, #0
   1314c:	ldrne	r3, [r4]
   13150:	strdne	r0, [r4, #80]	; 0x50
   13154:	movne	r0, r5
   13158:	bicne	r3, r3, #16
   1315c:	strne	r3, [r4]
   13160:	add	sp, sp, #8
   13164:	pop	{r4, r5, r6, r7, r8, pc}
   13168:	str	r8, [sp, #32]
   1316c:	mov	r0, r4
   13170:	add	sp, sp, #8
   13174:	pop	{r4, r5, r6, r7, r8, lr}
   13178:	b	1132c <fseeko64@plt>
   1317c:	push	{r4, r5, r6, r8, r9, lr}
   13180:	mov	r4, r0
   13184:	mov	r5, r1
   13188:	add	r6, r2, #20
   1318c:	mov	r8, #10
   13190:	mov	r9, #0
   13194:	mov	r3, #0
   13198:	strb	r3, [r2, #20]
   1319c:	mov	r0, r4
   131a0:	mov	r1, r5
   131a4:	mov	r2, r8
   131a8:	mov	r3, r9
   131ac:	bl	16584 <_obstack_memory_used@@Base+0x8fc>
   131b0:	mov	r3, r9
   131b4:	mov	r0, r4
   131b8:	mov	r1, r5
   131bc:	add	r2, r2, #48	; 0x30
   131c0:	strb	r2, [r6, #-1]!
   131c4:	mov	r2, r8
   131c8:	bl	16584 <_obstack_memory_used@@Base+0x8fc>
   131cc:	mov	r4, r0
   131d0:	mov	r5, r1
   131d4:	orrs	r3, r4, r5
   131d8:	bne	1319c <__assert_fail@plt+0x1dd4>
   131dc:	mov	r0, r6
   131e0:	pop	{r4, r5, r6, r8, r9, pc}
   131e4:	push	{r4, lr}
   131e8:	mov	r4, r0
   131ec:	bl	110ec <wcwidth@plt>
   131f0:	cmp	r0, #0
   131f4:	popge	{r4, pc}
   131f8:	mov	r0, r4
   131fc:	bl	11188 <iswcntrl@plt>
   13200:	clz	r0, r0
   13204:	lsr	r0, r0, #5
   13208:	pop	{r4, pc}
   1320c:	mov	r3, r1
   13210:	push	{r4, r5, r6, lr}
   13214:	mov	r5, r1
   13218:	ldr	r1, [r3], #16
   1321c:	mov	r4, r0
   13220:	cmp	r1, r3
   13224:	strne	r1, [r0]
   13228:	bne	13240 <__assert_fail@plt+0x1e78>
   1322c:	add	r3, r0, #16
   13230:	ldr	r2, [r5, #4]
   13234:	mov	r0, r3
   13238:	bl	11128 <memcpy@plt>
   1323c:	str	r0, [r4]
   13240:	ldr	r3, [r5, #4]
   13244:	str	r3, [r4, #4]
   13248:	ldrb	r3, [r5, #8]
   1324c:	cmp	r3, #0
   13250:	strb	r3, [r4, #8]
   13254:	ldrne	r3, [r5, #12]
   13258:	strne	r3, [r4, #12]
   1325c:	pop	{r4, r5, r6, pc}
   13260:	ldr	r3, [pc, #20]	; 1327c <__assert_fail@plt+0x1eb4>
   13264:	lsr	r2, r0, #5
   13268:	and	r0, r0, #31
   1326c:	ldr	r3, [r3, r2, lsl #2]
   13270:	lsr	r0, r3, r0
   13274:	and	r0, r0, #1
   13278:	bx	lr
   1327c:	ldrdeq	r6, [r1], -r4
   13280:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13284:	subs	r5, r0, #0
   13288:	addeq	r5, sp, #4
   1328c:	mov	r0, r5
   13290:	mov	r7, r2
   13294:	mov	r6, r1
   13298:	bl	111e8 <mbrtowc@plt>
   1329c:	cmp	r7, #0
   132a0:	cmnne	r0, #3
   132a4:	mov	r4, r0
   132a8:	bls	132c4 <__assert_fail@plt+0x1efc>
   132ac:	mov	r0, #0
   132b0:	bl	158e4 <__assert_fail@plt+0x451c>
   132b4:	cmp	r0, #0
   132b8:	moveq	r4, #1
   132bc:	ldrbeq	r3, [r6]
   132c0:	streq	r3, [r5]
   132c4:	mov	r0, r4
   132c8:	add	sp, sp, #12
   132cc:	pop	{r4, r5, r6, r7, pc}
   132d0:	push	{lr}		; (str lr, [sp, #-4]!)
   132d4:	vpush	{d8}
   132d8:	mov	r0, #85	; 0x55
   132dc:	sub	sp, sp, #68	; 0x44
   132e0:	bl	11164 <sysconf@plt>
   132e4:	vmov	s15, r0
   132e8:	mov	r0, #30
   132ec:	vcvt.f64.s32	d8, s15
   132f0:	bl	11164 <sysconf@plt>
   132f4:	vmov	s15, r0
   132f8:	vcvt.f64.s32	d0, s15
   132fc:	vldr	d7, [pc, #76]	; 13350 <__assert_fail@plt+0x1f88>
   13300:	vcmpe.f64	d8, d7
   13304:	vmrs	APSR_nzcv, fpscr
   13308:	blt	1331c <__assert_fail@plt+0x1f54>
   1330c:	vcmpe.f64	d0, d7
   13310:	vmrs	APSR_nzcv, fpscr
   13314:	vmulge.f64	d0, d8, d0
   13318:	bge	13340 <__assert_fail@plt+0x1f78>
   1331c:	mov	r0, sp
   13320:	bl	11218 <sysinfo@plt>
   13324:	cmp	r0, #0
   13328:	vldreq	s15, [sp, #16]
   1332c:	vldrne	d0, [pc, #36]	; 13358 <__assert_fail@plt+0x1f90>
   13330:	vcvteq.f64.u32	d0, s15
   13334:	vldreq	s15, [sp, #52]	; 0x34
   13338:	vcvteq.f64.u32	d7, s15
   1333c:	vmuleq.f64	d0, d0, d7
   13340:	add	sp, sp, #68	; 0x44
   13344:	vpop	{d8}
   13348:	pop	{pc}		; (ldr pc, [sp], #4)
   1334c:	nop			; (mov r0, r0)
	...
   1335c:	orrsmi	r0, r0, r0
   13360:	push	{lr}		; (str lr, [sp, #-4]!)
   13364:	vpush	{d8}
   13368:	mov	r0, #86	; 0x56
   1336c:	sub	sp, sp, #68	; 0x44
   13370:	bl	11164 <sysconf@plt>
   13374:	vmov	s15, r0
   13378:	mov	r0, #30
   1337c:	vcvt.f64.s32	d8, s15
   13380:	bl	11164 <sysconf@plt>
   13384:	vmov	s15, r0
   13388:	vcvt.f64.s32	d0, s15
   1338c:	vldr	d7, [pc, #100]	; 133f8 <__assert_fail@plt+0x2030>
   13390:	vcmpe.f64	d8, d7
   13394:	vmrs	APSR_nzcv, fpscr
   13398:	blt	133ac <__assert_fail@plt+0x1fe4>
   1339c:	vcmpe.f64	d0, d7
   133a0:	vmrs	APSR_nzcv, fpscr
   133a4:	vmulge.f64	d0, d8, d0
   133a8:	bge	133dc <__assert_fail@plt+0x2014>
   133ac:	mov	r0, sp
   133b0:	bl	11218 <sysinfo@plt>
   133b4:	cmp	r0, #0
   133b8:	bne	133e8 <__assert_fail@plt+0x2020>
   133bc:	vldr	s15, [sp, #20]
   133c0:	vcvt.f64.u32	d0, s15
   133c4:	vldr	s15, [sp, #28]
   133c8:	vcvt.f64.u32	d7, s15
   133cc:	vadd.f64	d0, d0, d7
   133d0:	vldr	s15, [sp, #52]	; 0x34
   133d4:	vcvt.f64.u32	d7, s15
   133d8:	vmul.f64	d0, d0, d7
   133dc:	add	sp, sp, #68	; 0x44
   133e0:	vpop	{d8}
   133e4:	pop	{pc}		; (ldr pc, [sp], #4)
   133e8:	bl	132d0 <__assert_fail@plt+0x1f08>
   133ec:	vldr	d7, [pc, #12]	; 13400 <__assert_fail@plt+0x2038>
   133f0:	b	133d8 <__assert_fail@plt+0x2010>
   133f4:	nop			; (mov r0, r0)
	...
   13404:	svccc	0x00d00000
   13408:	push	{r4, r5, r6, lr}
   1340c:	subs	r5, r0, #0
   13410:	bne	13428 <__assert_fail@plt+0x2060>
   13414:	ldr	r3, [pc, #124]	; 13498 <__assert_fail@plt+0x20d0>
   13418:	ldr	r0, [pc, #124]	; 1349c <__assert_fail@plt+0x20d4>
   1341c:	ldr	r1, [r3]
   13420:	bl	1138c <fputs@plt>
   13424:	bl	113a4 <abort@plt>
   13428:	mov	r1, #47	; 0x2f
   1342c:	bl	11344 <strrchr@plt>
   13430:	cmp	r0, #0
   13434:	addne	r4, r0, #1
   13438:	moveq	r4, r5
   1343c:	sub	r3, r4, r5
   13440:	cmp	r3, #6
   13444:	ble	13484 <__assert_fail@plt+0x20bc>
   13448:	mov	r2, #7
   1344c:	ldr	r1, [pc, #76]	; 134a0 <__assert_fail@plt+0x20d8>
   13450:	sub	r0, r4, #7
   13454:	bl	11398 <strncmp@plt>
   13458:	cmp	r0, #0
   1345c:	bne	13484 <__assert_fail@plt+0x20bc>
   13460:	mov	r2, #3
   13464:	ldr	r1, [pc, #56]	; 134a4 <__assert_fail@plt+0x20dc>
   13468:	mov	r0, r4
   1346c:	bl	11398 <strncmp@plt>
   13470:	cmp	r0, #0
   13474:	movne	r5, r4
   13478:	ldreq	r3, [pc, #40]	; 134a8 <__assert_fail@plt+0x20e0>
   1347c:	addeq	r5, r4, #3
   13480:	streq	r5, [r3]
   13484:	ldr	r3, [pc, #32]	; 134ac <__assert_fail@plt+0x20e4>
   13488:	str	r5, [r3]
   1348c:	ldr	r3, [pc, #28]	; 134b0 <__assert_fail@plt+0x20e8>
   13490:	str	r5, [r3]
   13494:	pop	{r4, r5, r6, pc}
   13498:	andeq	r8, r2, r8, lsl #3
   1349c:	strdeq	r6, [r1], -r4
   134a0:	andeq	r7, r1, ip, lsr #32
   134a4:	andeq	r7, r1, r4, lsr r0
   134a8:	andeq	r8, r2, r8, ror r1
   134ac:	andeq	r8, r2, r8, ror #3
   134b0:	andeq	r8, r2, ip, ror r1
   134b4:	push	{r4, r5, r6, lr}
   134b8:	mov	r2, #48	; 0x30
   134bc:	mov	r5, r1
   134c0:	mov	r1, #0
   134c4:	mov	r4, r0
   134c8:	bl	112d8 <memset@plt>
   134cc:	cmp	r5, #10
   134d0:	bne	134d8 <__assert_fail@plt+0x2110>
   134d4:	bl	113a4 <abort@plt>
   134d8:	str	r5, [r4]
   134dc:	mov	r0, r4
   134e0:	pop	{r4, r5, r6, pc}
   134e4:	push	{r4, r5, r6, lr}
   134e8:	mov	r4, r0
   134ec:	mov	r5, r1
   134f0:	bl	15940 <__assert_fail@plt+0x4578>
   134f4:	ldrb	r3, [r0]
   134f8:	bic	r3, r3, #32
   134fc:	cmp	r3, #85	; 0x55
   13500:	bne	13570 <__assert_fail@plt+0x21a8>
   13504:	ldrb	r3, [r0, #1]
   13508:	bic	r3, r3, #32
   1350c:	cmp	r3, #84	; 0x54
   13510:	bne	13548 <__assert_fail@plt+0x2180>
   13514:	ldrb	r3, [r0, #2]
   13518:	bic	r3, r3, #32
   1351c:	cmp	r3, #70	; 0x46
   13520:	bne	13548 <__assert_fail@plt+0x2180>
   13524:	ldrb	r3, [r0, #3]
   13528:	cmp	r3, #45	; 0x2d
   1352c:	bne	13548 <__assert_fail@plt+0x2180>
   13530:	ldrb	r3, [r0, #4]
   13534:	cmp	r3, #56	; 0x38
   13538:	bne	13548 <__assert_fail@plt+0x2180>
   1353c:	ldrb	r3, [r0, #5]
   13540:	cmp	r3, #0
   13544:	beq	1355c <__assert_fail@plt+0x2194>
   13548:	ldr	r1, [pc, #144]	; 135e0 <__assert_fail@plt+0x2218>
   1354c:	ldr	r0, [pc, #144]	; 135e4 <__assert_fail@plt+0x221c>
   13550:	cmp	r5, #9
   13554:	movne	r0, r1
   13558:	pop	{r4, r5, r6, pc}
   1355c:	ldrb	r3, [r4]
   13560:	ldr	r1, [pc, #128]	; 135e8 <__assert_fail@plt+0x2220>
   13564:	ldr	r0, [pc, #128]	; 135ec <__assert_fail@plt+0x2224>
   13568:	cmp	r3, #96	; 0x60
   1356c:	b	13554 <__assert_fail@plt+0x218c>
   13570:	cmp	r3, #71	; 0x47
   13574:	bne	13548 <__assert_fail@plt+0x2180>
   13578:	ldrb	r3, [r0, #1]
   1357c:	bic	r3, r3, #32
   13580:	cmp	r3, #66	; 0x42
   13584:	bne	13548 <__assert_fail@plt+0x2180>
   13588:	ldrb	r3, [r0, #2]
   1358c:	cmp	r3, #49	; 0x31
   13590:	bne	13548 <__assert_fail@plt+0x2180>
   13594:	ldrb	r3, [r0, #3]
   13598:	cmp	r3, #56	; 0x38
   1359c:	bne	13548 <__assert_fail@plt+0x2180>
   135a0:	ldrb	r3, [r0, #4]
   135a4:	cmp	r3, #48	; 0x30
   135a8:	bne	13548 <__assert_fail@plt+0x2180>
   135ac:	ldrb	r3, [r0, #5]
   135b0:	cmp	r3, #51	; 0x33
   135b4:	bne	13548 <__assert_fail@plt+0x2180>
   135b8:	ldrb	r3, [r0, #6]
   135bc:	cmp	r3, #48	; 0x30
   135c0:	bne	13548 <__assert_fail@plt+0x2180>
   135c4:	ldrb	r3, [r0, #7]
   135c8:	cmp	r3, #0
   135cc:	bne	13548 <__assert_fail@plt+0x2180>
   135d0:	ldrb	r3, [r4]
   135d4:	ldr	r1, [pc, #20]	; 135f0 <__assert_fail@plt+0x2228>
   135d8:	ldr	r0, [pc, #20]	; 135f4 <__assert_fail@plt+0x222c>
   135dc:	b	13568 <__assert_fail@plt+0x21a0>
   135e0:	muleq	r1, fp, r0
   135e4:	andeq	r6, r1, r8, lsr #29
   135e8:	muleq	r1, r0, r0
   135ec:	andeq	r7, r1, ip, lsl #1
   135f0:	muleq	r1, r8, r0
   135f4:	muleq	r1, r4, r0
   135f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135fc:	sub	sp, sp, #108	; 0x6c
   13600:	mov	r8, r0
   13604:	str	r3, [sp, #36]	; 0x24
   13608:	mov	r5, r1
   1360c:	str	r2, [sp, #44]	; 0x2c
   13610:	ldr	sl, [sp, #144]	; 0x90
   13614:	bl	111c4 <__ctype_get_mb_cur_max@plt>
   13618:	ldr	r3, [sp, #148]	; 0x94
   1361c:	mov	r7, #0
   13620:	str	r7, [sp, #48]	; 0x30
   13624:	lsr	r6, r3, #1
   13628:	and	r6, r6, #1
   1362c:	mov	r3, #1
   13630:	str	r3, [sp, #72]	; 0x48
   13634:	str	r7, [sp, #24]
   13638:	str	r7, [sp, #32]
   1363c:	str	r7, [sp, #40]	; 0x28
   13640:	str	r7, [sp, #60]	; 0x3c
   13644:	str	r0, [sp, #76]	; 0x4c
   13648:	cmp	sl, #10
   1364c:	ldrls	pc, [pc, sl, lsl #2]
   13650:	b	1388c <__assert_fail@plt+0x24c4>
   13654:	andeq	r3, r1, r0, lsl #13
   13658:	andeq	r4, r1, r4, lsl r3
   1365c:	andeq	r3, r1, r8, asr r8
   13660:	andeq	r3, r1, r4, lsr #17
   13664:	andeq	r3, r1, r4, lsr r8
   13668:	andeq	r3, r1, ip, lsl #13
   1366c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13670:	muleq	r1, r0, r8
   13674:	andeq	r3, r1, r4, lsl #15
   13678:	andeq	r3, r1, r4, lsl #15
   1367c:	andeq	r3, r1, r4, lsl #15
   13680:	mov	r6, #0
   13684:	mov	r4, #0
   13688:	b	136b8 <__assert_fail@plt+0x22f0>
   1368c:	cmp	r6, #0
   13690:	bne	138b4 <__assert_fail@plt+0x24ec>
   13694:	cmp	r5, #0
   13698:	movne	r3, #34	; 0x22
   1369c:	strbne	r3, [r8]
   136a0:	mov	r3, #1
   136a4:	str	r3, [sp, #24]
   136a8:	str	r3, [sp, #32]
   136ac:	mov	r4, #1
   136b0:	ldr	r3, [pc, #3172]	; 1431c <__assert_fail@plt+0x2f54>
   136b4:	str	r3, [sp, #40]	; 0x28
   136b8:	mov	r9, r5
   136bc:	mov	r3, #0
   136c0:	str	r7, [sp, #68]	; 0x44
   136c4:	str	r3, [sp, #28]
   136c8:	ldr	r3, [sp, #36]	; 0x24
   136cc:	cmn	r3, #1
   136d0:	bne	14260 <__assert_fail@plt+0x2e98>
   136d4:	ldr	r3, [sp, #44]	; 0x2c
   136d8:	ldr	r2, [sp, #28]
   136dc:	ldrb	r3, [r3, r2]
   136e0:	adds	r3, r3, #0
   136e4:	movne	r3, #1
   136e8:	str	r3, [sp, #52]	; 0x34
   136ec:	ldr	r3, [sp, #52]	; 0x34
   136f0:	cmp	r3, #0
   136f4:	bne	138dc <__assert_fail@plt+0x2514>
   136f8:	sub	r2, sl, #2
   136fc:	clz	r2, r2
   13700:	lsr	r2, r2, #5
   13704:	and	r3, r6, r2
   13708:	cmp	r4, #0
   1370c:	movne	r3, #0
   13710:	andeq	r3, r3, #1
   13714:	cmp	r3, #0
   13718:	bne	13aa4 <__assert_fail@plt+0x26dc>
   1371c:	eor	r3, r6, #1
   13720:	ands	r2, r2, r3
   13724:	beq	14298 <__assert_fail@plt+0x2ed0>
   13728:	ldr	r3, [sp, #68]	; 0x44
   1372c:	cmp	r3, #0
   13730:	beq	142d0 <__assert_fail@plt+0x2f08>
   13734:	ldr	r3, [sp, #72]	; 0x48
   13738:	cmp	r3, #0
   1373c:	beq	14274 <__assert_fail@plt+0x2eac>
   13740:	ldr	r3, [sp, #160]	; 0xa0
   13744:	ldr	r2, [sp, #44]	; 0x2c
   13748:	str	r3, [sp, #16]
   1374c:	ldr	r3, [sp, #156]	; 0x9c
   13750:	ldr	r1, [sp, #60]	; 0x3c
   13754:	str	r3, [sp, #12]
   13758:	ldr	r3, [sp, #152]	; 0x98
   1375c:	str	r3, [sp, #8]
   13760:	ldr	r3, [sp, #148]	; 0x94
   13764:	str	r3, [sp, #4]
   13768:	mov	r3, #5
   1376c:	str	r3, [sp]
   13770:	ldr	r3, [sp, #36]	; 0x24
   13774:	mov	r0, r8
   13778:	bl	135f8 <__assert_fail@plt+0x2230>
   1377c:	mov	r4, r0
   13780:	b	142c4 <__assert_fail@plt+0x2efc>
   13784:	cmp	sl, #10
   13788:	beq	137e4 <__assert_fail@plt+0x241c>
   1378c:	ldr	r4, [pc, #2956]	; 14320 <__assert_fail@plt+0x2f58>
   13790:	mov	r2, #5
   13794:	mov	r1, r4
   13798:	mov	r0, #0
   1379c:	bl	11158 <dcgettext@plt>
   137a0:	cmp	r0, r4
   137a4:	str	r0, [sp, #156]	; 0x9c
   137a8:	bne	137b8 <__assert_fail@plt+0x23f0>
   137ac:	mov	r1, sl
   137b0:	bl	134e4 <__assert_fail@plt+0x211c>
   137b4:	str	r0, [sp, #156]	; 0x9c
   137b8:	ldr	r4, [pc, #2916]	; 14324 <__assert_fail@plt+0x2f5c>
   137bc:	mov	r2, #5
   137c0:	mov	r1, r4
   137c4:	mov	r0, #0
   137c8:	bl	11158 <dcgettext@plt>
   137cc:	cmp	r0, r4
   137d0:	str	r0, [sp, #160]	; 0xa0
   137d4:	bne	137e4 <__assert_fail@plt+0x241c>
   137d8:	mov	r1, sl
   137dc:	bl	134e4 <__assert_fail@plt+0x211c>
   137e0:	str	r0, [sp, #160]	; 0xa0
   137e4:	cmp	r6, #0
   137e8:	moveq	r4, r6
   137ec:	beq	13804 <__assert_fail@plt+0x243c>
   137f0:	mov	r4, #0
   137f4:	b	13814 <__assert_fail@plt+0x244c>
   137f8:	cmp	r5, r4
   137fc:	strbhi	r3, [r8, r4]
   13800:	add	r4, r4, #1
   13804:	ldr	r3, [sp, #156]	; 0x9c
   13808:	ldrb	r3, [r3, r4]
   1380c:	cmp	r3, #0
   13810:	bne	137f8 <__assert_fail@plt+0x2430>
   13814:	ldr	r0, [sp, #160]	; 0xa0
   13818:	bl	11290 <strlen@plt>
   1381c:	ldr	r3, [sp, #160]	; 0xa0
   13820:	str	r3, [sp, #40]	; 0x28
   13824:	mov	r3, #1
   13828:	str	r3, [sp, #24]
   1382c:	str	r0, [sp, #32]
   13830:	b	136b8 <__assert_fail@plt+0x22f0>
   13834:	mov	r3, #1
   13838:	cmp	r6, #0
   1383c:	streq	r3, [sp, #24]
   13840:	beq	13860 <__assert_fail@plt+0x2498>
   13844:	str	r3, [sp, #32]
   13848:	ldr	r3, [pc, #2772]	; 14324 <__assert_fail@plt+0x2f5c>
   1384c:	mov	r4, #0
   13850:	str	r3, [sp, #40]	; 0x28
   13854:	b	13884 <__assert_fail@plt+0x24bc>
   13858:	cmp	r6, #0
   1385c:	bne	138cc <__assert_fail@plt+0x2504>
   13860:	cmp	r5, #0
   13864:	movne	r3, #39	; 0x27
   13868:	strbne	r3, [r8]
   1386c:	mov	r3, #1
   13870:	str	r3, [sp, #32]
   13874:	mov	r6, #0
   13878:	ldr	r3, [pc, #2724]	; 14324 <__assert_fail@plt+0x2f5c>
   1387c:	mov	r4, #1
   13880:	str	r3, [sp, #40]	; 0x28
   13884:	mov	sl, #2
   13888:	b	136b8 <__assert_fail@plt+0x22f0>
   1388c:	bl	113a4 <abort@plt>
   13890:	mov	r6, #0
   13894:	mov	r3, #1
   13898:	str	r3, [sp, #24]
   1389c:	mov	r4, r6
   138a0:	b	136b8 <__assert_fail@plt+0x22f0>
   138a4:	mov	r6, #1
   138a8:	str	r6, [sp, #24]
   138ac:	str	r6, [sp, #32]
   138b0:	b	13848 <__assert_fail@plt+0x2480>
   138b4:	mov	r3, #1
   138b8:	str	r3, [sp, #32]
   138bc:	ldr	r3, [pc, #2648]	; 1431c <__assert_fail@plt+0x2f54>
   138c0:	str	r6, [sp, #24]
   138c4:	str	r3, [sp, #40]	; 0x28
   138c8:	b	13684 <__assert_fail@plt+0x22bc>
   138cc:	mov	r3, #1
   138d0:	str	r3, [sp, #32]
   138d4:	ldr	r3, [pc, #2632]	; 14324 <__assert_fail@plt+0x2f5c>
   138d8:	b	138c4 <__assert_fail@plt+0x24fc>
   138dc:	ldr	r3, [sp, #32]
   138e0:	ldr	fp, [sp, #24]
   138e4:	cmp	sl, #2
   138e8:	moveq	fp, #0
   138ec:	andne	fp, fp, #1
   138f0:	adds	r5, r3, #0
   138f4:	movne	r5, #1
   138f8:	ands	r3, r5, fp
   138fc:	str	r3, [sp, #64]	; 0x40
   13900:	beq	139d0 <__assert_fail@plt+0x2608>
   13904:	ldr	r2, [sp, #32]
   13908:	ldr	r3, [sp, #28]
   1390c:	add	r7, r3, r2
   13910:	mov	r3, r2
   13914:	ldr	r2, [sp, #36]	; 0x24
   13918:	cmp	r3, #1
   1391c:	movls	r3, #0
   13920:	movhi	r3, #1
   13924:	cmn	r2, #1
   13928:	movne	r3, #0
   1392c:	cmp	r3, #0
   13930:	beq	13940 <__assert_fail@plt+0x2578>
   13934:	ldr	r0, [sp, #44]	; 0x2c
   13938:	bl	11290 <strlen@plt>
   1393c:	str	r0, [sp, #36]	; 0x24
   13940:	ldr	r3, [sp, #36]	; 0x24
   13944:	cmp	r3, r7
   13948:	bcc	139c8 <__assert_fail@plt+0x2600>
   1394c:	ldr	r3, [sp, #44]	; 0x2c
   13950:	ldr	r0, [sp, #28]
   13954:	ldr	r2, [sp, #32]
   13958:	ldr	r1, [sp, #40]	; 0x28
   1395c:	add	r0, r3, r0
   13960:	bl	11140 <memcmp@plt>
   13964:	cmp	r0, #0
   13968:	bne	139c8 <__assert_fail@plt+0x2600>
   1396c:	cmp	r6, #0
   13970:	beq	139d0 <__assert_fail@plt+0x2608>
   13974:	str	r6, [sp, #24]
   13978:	ldr	r3, [sp, #24]
   1397c:	ldr	r2, [sp, #44]	; 0x2c
   13980:	cmp	sl, #2
   13984:	movne	r3, #0
   13988:	andeq	r3, r3, #1
   1398c:	cmp	r3, #0
   13990:	ldr	r3, [sp, #160]	; 0xa0
   13994:	movne	sl, #4
   13998:	str	r3, [sp, #16]
   1399c:	ldr	r3, [sp, #156]	; 0x9c
   139a0:	str	sl, [sp]
   139a4:	str	r3, [sp, #12]
   139a8:	mov	r3, #0
   139ac:	str	r3, [sp, #8]
   139b0:	ldr	r3, [sp, #148]	; 0x94
   139b4:	mov	r1, r9
   139b8:	bic	r3, r3, #2
   139bc:	str	r3, [sp, #4]
   139c0:	ldr	r3, [sp, #36]	; 0x24
   139c4:	b	13774 <__assert_fail@plt+0x23ac>
   139c8:	mov	r3, #0
   139cc:	str	r3, [sp, #64]	; 0x40
   139d0:	ldr	r2, [sp, #28]
   139d4:	ldr	r3, [sp, #44]	; 0x2c
   139d8:	add	r3, r3, r2
   139dc:	str	r3, [sp, #80]	; 0x50
   139e0:	ldr	r3, [sp, #44]	; 0x2c
   139e4:	ldrb	r7, [r3, r2]
   139e8:	cmp	r7, #58	; 0x3a
   139ec:	bhi	13b54 <__assert_fail@plt+0x278c>
   139f0:	cmp	r7, #43	; 0x2b
   139f4:	bcs	13ba8 <__assert_fail@plt+0x27e0>
   139f8:	cmp	r7, #32
   139fc:	beq	13c00 <__assert_fail@plt+0x2838>
   13a00:	bhi	13aac <__assert_fail@plt+0x26e4>
   13a04:	cmp	r7, #9
   13a08:	beq	13eb4 <__assert_fail@plt+0x2aec>
   13a0c:	bhi	13a70 <__assert_fail@plt+0x26a8>
   13a10:	cmp	r7, #7
   13a14:	beq	13f60 <__assert_fail@plt+0x2b98>
   13a18:	bhi	13c1c <__assert_fail@plt+0x2854>
   13a1c:	cmp	r7, #0
   13a20:	beq	13c38 <__assert_fail@plt+0x2870>
   13a24:	ldr	r3, [sp, #76]	; 0x4c
   13a28:	cmp	r3, #1
   13a2c:	bne	13fa4 <__assert_fail@plt+0x2bdc>
   13a30:	bl	11260 <__ctype_b_loc@plt>
   13a34:	sxth	r3, r7
   13a38:	lsl	r3, r3, #1
   13a3c:	ldr	r2, [r0]
   13a40:	ldrh	r5, [r2, r3]
   13a44:	ldr	r3, [sp, #76]	; 0x4c
   13a48:	str	r3, [sp, #56]	; 0x38
   13a4c:	lsr	r5, r5, #14
   13a50:	and	r5, r5, #1
   13a54:	ldr	r3, [sp, #24]
   13a58:	eor	fp, r5, #1
   13a5c:	and	fp, fp, r3
   13a60:	ands	fp, fp, #255	; 0xff
   13a64:	beq	13dec <__assert_fail@plt+0x2a24>
   13a68:	mov	r5, #0
   13a6c:	b	14050 <__assert_fail@plt+0x2c88>
   13a70:	cmp	r7, #11
   13a74:	beq	13ebc <__assert_fail@plt+0x2af4>
   13a78:	bcc	13f58 <__assert_fail@plt+0x2b90>
   13a7c:	cmp	r7, #12
   13a80:	beq	13f68 <__assert_fail@plt+0x2ba0>
   13a84:	cmp	r7, #13
   13a88:	moveq	r3, #114	; 0x72
   13a8c:	bne	13a24 <__assert_fail@plt+0x265c>
   13a90:	cmp	sl, #2
   13a94:	movne	r2, #0
   13a98:	andeq	r2, r6, #1
   13a9c:	cmp	r2, #0
   13aa0:	beq	13c20 <__assert_fail@plt+0x2858>
   13aa4:	mov	sl, #2
   13aa8:	b	13978 <__assert_fail@plt+0x25b0>
   13aac:	cmp	r7, #37	; 0x25
   13ab0:	beq	13ba8 <__assert_fail@plt+0x27e0>
   13ab4:	bhi	13ac8 <__assert_fail@plt+0x2700>
   13ab8:	cmp	r7, #35	; 0x23
   13abc:	beq	13bf4 <__assert_fail@plt+0x282c>
   13ac0:	mov	r5, #0
   13ac4:	b	13c04 <__assert_fail@plt+0x283c>
   13ac8:	cmp	r7, #39	; 0x27
   13acc:	bne	13ac0 <__assert_fail@plt+0x26f8>
   13ad0:	cmp	sl, #2
   13ad4:	ldrne	r5, [sp, #52]	; 0x34
   13ad8:	movne	r3, r5
   13adc:	strne	r3, [sp, #68]	; 0x44
   13ae0:	bne	13bac <__assert_fail@plt+0x27e4>
   13ae4:	cmp	r6, #0
   13ae8:	bne	13978 <__assert_fail@plt+0x25b0>
   13aec:	ldr	r2, [sp, #60]	; 0x3c
   13af0:	adds	r3, r9, #0
   13af4:	movne	r3, #1
   13af8:	cmp	r2, #0
   13afc:	movne	r3, #0
   13b00:	cmp	r3, #0
   13b04:	strne	r9, [sp, #60]	; 0x3c
   13b08:	movne	r9, #0
   13b0c:	bne	13b1c <__assert_fail@plt+0x2754>
   13b10:	cmp	r9, r4
   13b14:	movhi	r3, #39	; 0x27
   13b18:	strbhi	r3, [r8, r4]
   13b1c:	add	r3, r4, #1
   13b20:	cmp	r3, r9
   13b24:	movcc	r2, #92	; 0x5c
   13b28:	strbcc	r2, [r8, r3]
   13b2c:	add	r3, r4, #2
   13b30:	cmp	r3, r9
   13b34:	ldr	r5, [sp, #52]	; 0x34
   13b38:	movcc	r2, #39	; 0x27
   13b3c:	strbcc	r2, [r8, r3]
   13b40:	add	r4, r4, #3
   13b44:	mov	fp, r6
   13b48:	str	r5, [sp, #68]	; 0x44
   13b4c:	str	r6, [sp, #48]	; 0x30
   13b50:	b	13dec <__assert_fail@plt+0x2a24>
   13b54:	cmp	r7, #94	; 0x5e
   13b58:	beq	13ac0 <__assert_fail@plt+0x26f8>
   13b5c:	bhi	13bb4 <__assert_fail@plt+0x27ec>
   13b60:	cmp	r7, #90	; 0x5a
   13b64:	bhi	13b9c <__assert_fail@plt+0x27d4>
   13b68:	cmp	r7, #65	; 0x41
   13b6c:	bcs	13ba8 <__assert_fail@plt+0x27e0>
   13b70:	cmp	r7, #62	; 0x3e
   13b74:	bls	13ac0 <__assert_fail@plt+0x26f8>
   13b78:	cmp	r7, #63	; 0x3f
   13b7c:	bne	13a24 <__assert_fail@plt+0x265c>
   13b80:	cmp	sl, #2
   13b84:	beq	13d28 <__assert_fail@plt+0x2960>
   13b88:	cmp	sl, #5
   13b8c:	beq	13d38 <__assert_fail@plt+0x2970>
   13b90:	mov	fp, #0
   13b94:	mov	r5, fp
   13b98:	b	13dec <__assert_fail@plt+0x2a24>
   13b9c:	cmp	r7, #92	; 0x5c
   13ba0:	beq	13ec4 <__assert_fail@plt+0x2afc>
   13ba4:	bls	13ac0 <__assert_fail@plt+0x26f8>
   13ba8:	ldr	r5, [sp, #52]	; 0x34
   13bac:	mov	fp, #0
   13bb0:	b	13dec <__assert_fail@plt+0x2a24>
   13bb4:	cmp	r7, #122	; 0x7a
   13bb8:	bhi	13bd8 <__assert_fail@plt+0x2810>
   13bbc:	cmp	r7, #97	; 0x61
   13bc0:	bcs	13ba8 <__assert_fail@plt+0x27e0>
   13bc4:	cmp	r7, #95	; 0x5f
   13bc8:	beq	13ba8 <__assert_fail@plt+0x27e0>
   13bcc:	cmp	r7, #96	; 0x60
   13bd0:	bne	13a24 <__assert_fail@plt+0x265c>
   13bd4:	b	13ac0 <__assert_fail@plt+0x26f8>
   13bd8:	cmp	r7, #124	; 0x7c
   13bdc:	beq	13ac0 <__assert_fail@plt+0x26f8>
   13be0:	bcc	13f70 <__assert_fail@plt+0x2ba8>
   13be4:	cmp	r7, #125	; 0x7d
   13be8:	beq	13f70 <__assert_fail@plt+0x2ba8>
   13bec:	cmp	r7, #126	; 0x7e
   13bf0:	bne	13a24 <__assert_fail@plt+0x265c>
   13bf4:	ldr	r3, [sp, #28]
   13bf8:	cmp	r3, #0
   13bfc:	bne	13d30 <__assert_fail@plt+0x2968>
   13c00:	ldr	r5, [sp, #52]	; 0x34
   13c04:	cmp	sl, #2
   13c08:	movne	fp, #0
   13c0c:	andeq	fp, r6, #1
   13c10:	cmp	fp, #0
   13c14:	beq	13dec <__assert_fail@plt+0x2a24>
   13c18:	b	13aa4 <__assert_fail@plt+0x26dc>
   13c1c:	mov	r3, #98	; 0x62
   13c20:	ldr	r2, [sp, #24]
   13c24:	cmp	r2, #0
   13c28:	beq	13d30 <__assert_fail@plt+0x2968>
   13c2c:	mov	r7, r3
   13c30:	mov	r5, #0
   13c34:	b	13e44 <__assert_fail@plt+0x2a7c>
   13c38:	ldr	r3, [sp, #24]
   13c3c:	cmp	r3, #0
   13c40:	beq	13d0c <__assert_fail@plt+0x2944>
   13c44:	cmp	r6, #0
   13c48:	bne	13974 <__assert_fail@plt+0x25ac>
   13c4c:	ldr	r3, [sp, #48]	; 0x30
   13c50:	eor	r2, r3, #1
   13c54:	cmp	sl, #2
   13c58:	movne	r2, #0
   13c5c:	andeq	r2, r2, #1
   13c60:	cmp	r2, #0
   13c64:	moveq	r3, r4
   13c68:	beq	13ca0 <__assert_fail@plt+0x28d8>
   13c6c:	cmp	r9, r4
   13c70:	movhi	r3, #39	; 0x27
   13c74:	strbhi	r3, [r8, r4]
   13c78:	add	r3, r4, #1
   13c7c:	cmp	r9, r3
   13c80:	movhi	r1, #36	; 0x24
   13c84:	strbhi	r1, [r8, r3]
   13c88:	add	r3, r4, #2
   13c8c:	cmp	r9, r3
   13c90:	movhi	r1, #39	; 0x27
   13c94:	strbhi	r1, [r8, r3]
   13c98:	add	r3, r4, #3
   13c9c:	str	r2, [sp, #48]	; 0x30
   13ca0:	cmp	r9, r3
   13ca4:	movhi	r2, #92	; 0x5c
   13ca8:	strbhi	r2, [r8, r3]
   13cac:	cmp	fp, #0
   13cb0:	add	r4, r3, #1
   13cb4:	beq	14244 <__assert_fail@plt+0x2e7c>
   13cb8:	ldr	r2, [sp, #28]
   13cbc:	ldr	r1, [sp, #36]	; 0x24
   13cc0:	add	r2, r2, #1
   13cc4:	cmp	r1, r2
   13cc8:	bls	13d04 <__assert_fail@plt+0x293c>
   13ccc:	ldr	r1, [sp, #44]	; 0x2c
   13cd0:	mov	r7, #48	; 0x30
   13cd4:	ldrb	r2, [r1, r2]
   13cd8:	sub	r2, r2, #48	; 0x30
   13cdc:	cmp	r2, #9
   13ce0:	movhi	r5, r6
   13ce4:	bhi	13dec <__assert_fail@plt+0x2a24>
   13ce8:	cmp	r9, r4
   13cec:	add	r2, r3, #2
   13cf0:	strbhi	r7, [r8, r4]
   13cf4:	cmp	r9, r2
   13cf8:	add	r4, r3, #3
   13cfc:	movhi	r1, #48	; 0x30
   13d00:	strbhi	r1, [r8, r2]
   13d04:	mov	r5, r6
   13d08:	b	1424c <__assert_fail@plt+0x2e84>
   13d0c:	ldr	r3, [sp, #148]	; 0x94
   13d10:	tst	r3, #1
   13d14:	ldreq	r5, [sp, #24]
   13d18:	beq	14258 <__assert_fail@plt+0x2e90>
   13d1c:	ldr	r3, [sp, #28]
   13d20:	add	r3, r3, #1
   13d24:	b	136c4 <__assert_fail@plt+0x22fc>
   13d28:	cmp	r6, #0
   13d2c:	bne	13978 <__assert_fail@plt+0x25b0>
   13d30:	mov	r5, #0
   13d34:	b	13bac <__assert_fail@plt+0x27e4>
   13d38:	ldr	r3, [sp, #148]	; 0x94
   13d3c:	tst	r3, #4
   13d40:	beq	13d30 <__assert_fail@plt+0x2968>
   13d44:	ldr	r3, [sp, #28]
   13d48:	add	r2, r3, #2
   13d4c:	ldr	r3, [sp, #36]	; 0x24
   13d50:	cmp	r3, r2
   13d54:	bls	13d30 <__assert_fail@plt+0x2968>
   13d58:	ldr	r3, [sp, #44]	; 0x2c
   13d5c:	ldr	r1, [sp, #28]
   13d60:	add	r3, r3, r1
   13d64:	ldrb	r0, [r3, #1]
   13d68:	cmp	r0, #63	; 0x3f
   13d6c:	bne	13d30 <__assert_fail@plt+0x2968>
   13d70:	ldr	r3, [sp, #44]	; 0x2c
   13d74:	ldrb	r1, [r3, r2]
   13d78:	sub	r3, r1, #33	; 0x21
   13d7c:	uxtb	r3, r3
   13d80:	cmp	r3, #29
   13d84:	bhi	14254 <__assert_fail@plt+0x2e8c>
   13d88:	mov	ip, #1
   13d8c:	ldr	r5, [pc, #1428]	; 14328 <__assert_fail@plt+0x2f60>
   13d90:	ands	r5, r5, ip, lsl r3
   13d94:	beq	13bac <__assert_fail@plt+0x27e4>
   13d98:	cmp	r6, #0
   13d9c:	bne	13978 <__assert_fail@plt+0x25b0>
   13da0:	add	r3, r4, #1
   13da4:	cmp	r9, r4
   13da8:	strbhi	r0, [r8, r4]
   13dac:	cmp	r9, r3
   13db0:	movhi	r0, #34	; 0x22
   13db4:	strbhi	r0, [r8, r3]
   13db8:	add	r3, r4, #2
   13dbc:	cmp	r9, r3
   13dc0:	movhi	r0, #34	; 0x22
   13dc4:	strbhi	r0, [r8, r3]
   13dc8:	add	r3, r4, #3
   13dcc:	cmp	r9, r3
   13dd0:	add	r4, r4, #4
   13dd4:	mov	r5, r6
   13dd8:	mov	fp, r6
   13ddc:	mov	r7, r1
   13de0:	movhi	r0, #63	; 0x3f
   13de4:	strbhi	r0, [r8, r3]
   13de8:	str	r2, [sp, #28]
   13dec:	ldr	r3, [sp, #24]
   13df0:	eor	r3, r3, #1
   13df4:	cmp	sl, #2
   13df8:	orreq	r3, r3, #1
   13dfc:	eor	r3, r3, #1
   13e00:	orr	r3, r6, r3
   13e04:	tst	r3, #255	; 0xff
   13e08:	beq	13e38 <__assert_fail@plt+0x2a70>
   13e0c:	ldr	r3, [sp, #152]	; 0x98
   13e10:	cmp	r3, #0
   13e14:	beq	13e38 <__assert_fail@plt+0x2a70>
   13e18:	lsr	r2, r7, #5
   13e1c:	ldr	r1, [sp, #152]	; 0x98
   13e20:	uxtb	r2, r2
   13e24:	and	r3, r7, #31
   13e28:	ldr	r2, [r1, r2, lsl #2]
   13e2c:	lsr	r3, r2, r3
   13e30:	tst	r3, #1
   13e34:	bne	13e44 <__assert_fail@plt+0x2a7c>
   13e38:	ldr	r3, [sp, #64]	; 0x40
   13e3c:	cmp	r3, #0
   13e40:	beq	13edc <__assert_fail@plt+0x2b14>
   13e44:	cmp	r6, #0
   13e48:	bne	13978 <__assert_fail@plt+0x25b0>
   13e4c:	ldr	r3, [sp, #48]	; 0x30
   13e50:	eor	r3, r3, #1
   13e54:	cmp	sl, #2
   13e58:	movne	r3, #0
   13e5c:	andeq	r3, r3, #1
   13e60:	cmp	r3, #0
   13e64:	beq	13e9c <__assert_fail@plt+0x2ad4>
   13e68:	cmp	r9, r4
   13e6c:	movhi	r2, #39	; 0x27
   13e70:	strbhi	r2, [r8, r4]
   13e74:	add	r2, r4, #1
   13e78:	cmp	r9, r2
   13e7c:	movhi	r1, #36	; 0x24
   13e80:	strbhi	r1, [r8, r2]
   13e84:	add	r2, r4, #2
   13e88:	cmp	r9, r2
   13e8c:	add	r4, r4, #3
   13e90:	movhi	r1, #39	; 0x27
   13e94:	strbhi	r1, [r8, r2]
   13e98:	str	r3, [sp, #48]	; 0x30
   13e9c:	cmp	r9, r4
   13ea0:	movhi	r3, #92	; 0x5c
   13ea4:	strbhi	r3, [r8, r4]
   13ea8:	ldr	fp, [sp, #52]	; 0x34
   13eac:	add	r4, r4, #1
   13eb0:	b	13edc <__assert_fail@plt+0x2b14>
   13eb4:	mov	r3, #116	; 0x74
   13eb8:	b	13a90 <__assert_fail@plt+0x26c8>
   13ebc:	mov	r3, #118	; 0x76
   13ec0:	b	13c20 <__assert_fail@plt+0x2858>
   13ec4:	cmp	sl, #2
   13ec8:	bne	13f38 <__assert_fail@plt+0x2b70>
   13ecc:	cmp	r6, #0
   13ed0:	bne	13978 <__assert_fail@plt+0x25b0>
   13ed4:	mov	r5, r6
   13ed8:	mov	fp, r6
   13edc:	ldr	r3, [sp, #48]	; 0x30
   13ee0:	eor	fp, fp, #1
   13ee4:	and	fp, fp, r3
   13ee8:	tst	fp, #255	; 0xff
   13eec:	beq	13f18 <__assert_fail@plt+0x2b50>
   13ef0:	cmp	r9, r4
   13ef4:	movhi	r3, #39	; 0x27
   13ef8:	strbhi	r3, [r8, r4]
   13efc:	add	r3, r4, #1
   13f00:	cmp	r9, r3
   13f04:	movhi	r2, #39	; 0x27
   13f08:	add	r4, r4, #2
   13f0c:	strbhi	r2, [r8, r3]
   13f10:	mov	r3, #0
   13f14:	str	r3, [sp, #48]	; 0x30
   13f18:	cmp	r9, r4
   13f1c:	strbhi	r7, [r8, r4]
   13f20:	ldr	r3, [sp, #72]	; 0x48
   13f24:	cmp	r5, #0
   13f28:	moveq	r3, #0
   13f2c:	add	r4, r4, #1
   13f30:	str	r3, [sp, #72]	; 0x48
   13f34:	b	13d1c <__assert_fail@plt+0x2954>
   13f38:	ldr	r3, [sp, #24]
   13f3c:	and	r3, r3, r6
   13f40:	tst	r5, r3
   13f44:	moveq	r3, r7
   13f48:	beq	13a90 <__assert_fail@plt+0x26c8>
   13f4c:	mov	fp, #0
   13f50:	mov	r5, fp
   13f54:	b	13edc <__assert_fail@plt+0x2b14>
   13f58:	mov	r3, #110	; 0x6e
   13f5c:	b	13a90 <__assert_fail@plt+0x26c8>
   13f60:	mov	r3, #97	; 0x61
   13f64:	b	13c20 <__assert_fail@plt+0x2858>
   13f68:	mov	r3, #102	; 0x66
   13f6c:	b	13c20 <__assert_fail@plt+0x2858>
   13f70:	ldr	r3, [sp, #36]	; 0x24
   13f74:	cmn	r3, #1
   13f78:	bne	13f98 <__assert_fail@plt+0x2bd0>
   13f7c:	ldr	r3, [sp, #44]	; 0x2c
   13f80:	ldrb	r3, [r3, #1]
   13f84:	adds	r3, r3, #0
   13f88:	movne	r3, #1
   13f8c:	cmp	r3, #0
   13f90:	bne	13d30 <__assert_fail@plt+0x2968>
   13f94:	b	13bf4 <__assert_fail@plt+0x282c>
   13f98:	ldr	r3, [sp, #36]	; 0x24
   13f9c:	subs	r3, r3, #1
   13fa0:	b	13f88 <__assert_fail@plt+0x2bc0>
   13fa4:	mov	r3, #0
   13fa8:	str	r3, [sp, #96]	; 0x60
   13fac:	str	r3, [sp, #100]	; 0x64
   13fb0:	ldr	r3, [sp, #36]	; 0x24
   13fb4:	cmn	r3, #1
   13fb8:	bne	13fc8 <__assert_fail@plt+0x2c00>
   13fbc:	ldr	r0, [sp, #44]	; 0x2c
   13fc0:	bl	11290 <strlen@plt>
   13fc4:	str	r0, [sp, #36]	; 0x24
   13fc8:	ldr	r5, [sp, #52]	; 0x34
   13fcc:	mov	r3, #0
   13fd0:	str	r3, [sp, #56]	; 0x38
   13fd4:	ldr	r3, [sp, #28]
   13fd8:	ldr	r2, [sp, #56]	; 0x38
   13fdc:	ldr	r1, [sp, #36]	; 0x24
   13fe0:	add	r2, r3, r2
   13fe4:	ldr	r3, [sp, #44]	; 0x2c
   13fe8:	add	r0, sp, #92	; 0x5c
   13fec:	add	fp, r3, r2
   13ff0:	sub	r2, r1, r2
   13ff4:	add	r3, sp, #96	; 0x60
   13ff8:	mov	r1, fp
   13ffc:	bl	13280 <__assert_fail@plt+0x1eb8>
   14000:	subs	r2, r0, #0
   14004:	beq	14044 <__assert_fail@plt+0x2c7c>
   14008:	cmn	r2, #1
   1400c:	beq	1421c <__assert_fail@plt+0x2e54>
   14010:	cmn	r2, #2
   14014:	bne	1418c <__assert_fail@plt+0x2dc4>
   14018:	ldr	r2, [sp, #56]	; 0x38
   1401c:	ldr	r3, [sp, #28]
   14020:	add	r3, r3, r2
   14024:	ldr	r2, [sp, #36]	; 0x24
   14028:	cmp	r2, r3
   1402c:	bls	1421c <__assert_fail@plt+0x2e54>
   14030:	ldr	r3, [sp, #80]	; 0x50
   14034:	ldr	r2, [sp, #56]	; 0x38
   14038:	ldrb	r5, [r3, r2]
   1403c:	cmp	r5, #0
   14040:	bne	1417c <__assert_fail@plt+0x2db4>
   14044:	ldr	r3, [sp, #56]	; 0x38
   14048:	cmp	r3, #1
   1404c:	bls	13a54 <__assert_fail@plt+0x268c>
   14050:	ldr	r2, [sp, #56]	; 0x38
   14054:	ldr	r3, [sp, #28]
   14058:	mov	fp, #0
   1405c:	add	r3, r3, r2
   14060:	ldr	r2, [sp, #24]
   14064:	str	r3, [sp, #52]	; 0x34
   14068:	eor	r3, r5, #1
   1406c:	and	r3, r3, r2
   14070:	mov	ip, #92	; 0x5c
   14074:	uxtb	r3, r3
   14078:	mov	r2, #39	; 0x27
   1407c:	cmp	r3, #0
   14080:	beq	14224 <__assert_fail@plt+0x2e5c>
   14084:	cmp	r6, #0
   14088:	bne	13974 <__assert_fail@plt+0x25ac>
   1408c:	ldr	r1, [sp, #48]	; 0x30
   14090:	eor	r1, r1, #1
   14094:	cmp	sl, #2
   14098:	movne	r1, #0
   1409c:	andeq	r1, r1, #1
   140a0:	cmp	r1, #0
   140a4:	beq	140d4 <__assert_fail@plt+0x2d0c>
   140a8:	add	r0, r4, #1
   140ac:	cmp	r9, r4
   140b0:	strbhi	r2, [r8, r4]
   140b4:	cmp	r9, r0
   140b8:	movhi	lr, #36	; 0x24
   140bc:	strbhi	lr, [r8, r0]
   140c0:	add	r0, r4, #2
   140c4:	add	r4, r4, #3
   140c8:	cmp	r9, r0
   140cc:	strbhi	r2, [r8, r0]
   140d0:	str	r1, [sp, #48]	; 0x30
   140d4:	add	r0, r4, #1
   140d8:	cmp	r9, r4
   140dc:	strbhi	ip, [r8, r4]
   140e0:	cmp	r9, r0
   140e4:	lsrhi	r1, r7, #6
   140e8:	addhi	r1, r1, #48	; 0x30
   140ec:	strbhi	r1, [r8, r0]
   140f0:	add	r0, r4, #2
   140f4:	cmp	r9, r0
   140f8:	lsrhi	r1, r7, #3
   140fc:	and	r7, r7, #7
   14100:	andhi	r1, r1, #7
   14104:	add	r4, r4, #3
   14108:	add	r7, r7, #48	; 0x30
   1410c:	mov	fp, r3
   14110:	addhi	r1, r1, #48	; 0x30
   14114:	strbhi	r1, [r8, r0]
   14118:	ldr	r1, [sp, #28]
   1411c:	ldr	r0, [sp, #52]	; 0x34
   14120:	add	r1, r1, #1
   14124:	cmp	r0, r1
   14128:	bls	13edc <__assert_fail@plt+0x2b14>
   1412c:	ldr	lr, [sp, #48]	; 0x30
   14130:	eor	r0, fp, #1
   14134:	and	r0, r0, lr
   14138:	tst	r0, #255	; 0xff
   1413c:	beq	14160 <__assert_fail@plt+0x2d98>
   14140:	add	r0, r4, #1
   14144:	cmp	r9, r4
   14148:	strbhi	r2, [r8, r4]
   1414c:	cmp	r9, r0
   14150:	add	r4, r4, #2
   14154:	strbhi	r2, [r8, r0]
   14158:	mov	r0, #0
   1415c:	str	r0, [sp, #48]	; 0x30
   14160:	ldr	r0, [sp, #44]	; 0x2c
   14164:	cmp	r9, r4
   14168:	strbhi	r7, [r8, r4]
   1416c:	str	r1, [sp, #28]
   14170:	add	r4, r4, #1
   14174:	ldrb	r7, [r0, r1]
   14178:	b	1407c <__assert_fail@plt+0x2cb4>
   1417c:	ldr	r3, [sp, #56]	; 0x38
   14180:	add	r3, r3, #1
   14184:	str	r3, [sp, #56]	; 0x38
   14188:	b	14018 <__assert_fail@plt+0x2c50>
   1418c:	cmp	sl, #2
   14190:	movne	r3, #0
   14194:	andeq	r3, r6, #1
   14198:	cmp	r3, #0
   1419c:	movne	r1, #1
   141a0:	bne	141fc <__assert_fail@plt+0x2e34>
   141a4:	ldr	r0, [sp, #92]	; 0x5c
   141a8:	str	r2, [sp, #84]	; 0x54
   141ac:	bl	111a0 <iswprint@plt>
   141b0:	ldr	r3, [sp, #56]	; 0x38
   141b4:	ldr	r2, [sp, #84]	; 0x54
   141b8:	add	r3, r3, r2
   141bc:	str	r3, [sp, #56]	; 0x38
   141c0:	cmp	r0, #0
   141c4:	add	r0, sp, #96	; 0x60
   141c8:	moveq	r5, #0
   141cc:	bl	11134 <mbsinit@plt>
   141d0:	cmp	r0, #0
   141d4:	beq	13fd4 <__assert_fail@plt+0x2c0c>
   141d8:	b	14044 <__assert_fail@plt+0x2c7c>
   141dc:	ldrb	r3, [fp, r1]
   141e0:	cmp	r3, #94	; 0x5e
   141e4:	beq	13aa4 <__assert_fail@plt+0x26dc>
   141e8:	bhi	14208 <__assert_fail@plt+0x2e40>
   141ec:	sub	r3, r3, #91	; 0x5b
   141f0:	cmp	r3, #1
   141f4:	bls	13aa4 <__assert_fail@plt+0x26dc>
   141f8:	add	r1, r1, #1
   141fc:	cmp	r1, r2
   14200:	bne	141dc <__assert_fail@plt+0x2e14>
   14204:	b	141a4 <__assert_fail@plt+0x2ddc>
   14208:	cmp	r3, #96	; 0x60
   1420c:	beq	13aa4 <__assert_fail@plt+0x26dc>
   14210:	cmp	r3, #124	; 0x7c
   14214:	bne	141f8 <__assert_fail@plt+0x2e30>
   14218:	b	13aa4 <__assert_fail@plt+0x26dc>
   1421c:	mov	r5, #0
   14220:	b	14044 <__assert_fail@plt+0x2c7c>
   14224:	ldr	r1, [sp, #64]	; 0x40
   14228:	cmp	r1, #0
   1422c:	beq	14118 <__assert_fail@plt+0x2d50>
   14230:	cmp	r9, r4
   14234:	strbhi	ip, [r8, r4]
   14238:	str	r3, [sp, #64]	; 0x40
   1423c:	add	r4, r4, #1
   14240:	b	14118 <__assert_fail@plt+0x2d50>
   14244:	mov	r5, fp
   14248:	ldr	fp, [sp, #24]
   1424c:	mov	r7, #48	; 0x30
   14250:	b	13dec <__assert_fail@plt+0x2a24>
   14254:	mov	r5, #0
   14258:	mov	fp, r5
   1425c:	b	13dec <__assert_fail@plt+0x2a24>
   14260:	ldr	r3, [sp, #36]	; 0x24
   14264:	ldr	r2, [sp, #28]
   14268:	subs	r3, r3, r2
   1426c:	movne	r3, #1
   14270:	b	136e8 <__assert_fail@plt+0x2320>
   14274:	ldr	r3, [sp, #60]	; 0x3c
   14278:	clz	r7, r9
   1427c:	cmp	r3, #0
   14280:	lsr	r7, r7, #5
   14284:	moveq	r7, #0
   14288:	cmp	r7, #0
   1428c:	mov	r5, r3
   14290:	bne	13648 <__assert_fail@plt+0x2280>
   14294:	ldr	r3, [sp, #68]	; 0x44
   14298:	ldr	r2, [sp, #40]	; 0x28
   1429c:	cmp	r2, #0
   142a0:	moveq	r3, #0
   142a4:	andne	r3, r3, #1
   142a8:	cmp	r3, #0
   142ac:	movne	r3, r2
   142b0:	subne	r2, r3, #1
   142b4:	bne	142e4 <__assert_fail@plt+0x2f1c>
   142b8:	cmp	r9, r4
   142bc:	movhi	r3, #0
   142c0:	strbhi	r3, [r8, r4]
   142c4:	mov	r0, r4
   142c8:	add	sp, sp, #108	; 0x6c
   142cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142d0:	mov	r3, r2
   142d4:	b	14298 <__assert_fail@plt+0x2ed0>
   142d8:	cmp	r9, r4
   142dc:	strbhi	r3, [r8, r4]
   142e0:	add	r4, r4, #1
   142e4:	ldrb	r3, [r2, #1]!
   142e8:	cmp	r3, #0
   142ec:	bne	142d8 <__assert_fail@plt+0x2f10>
   142f0:	b	142b8 <__assert_fail@plt+0x2ef0>
   142f4:	ldr	r3, [pc, #32]	; 1431c <__assert_fail@plt+0x2f54>
   142f8:	mov	r6, #1
   142fc:	str	r6, [sp, #24]
   14300:	str	r6, [sp, #32]
   14304:	str	r3, [sp, #40]	; 0x28
   14308:	mov	r4, #0
   1430c:	mov	sl, #5
   14310:	b	136b8 <__assert_fail@plt+0x22f0>
   14314:	mov	r6, #1
   14318:	b	138ac <__assert_fail@plt+0x24e4>
   1431c:	andeq	r6, r1, r8, lsr #29
   14320:	muleq	r1, sp, r0
   14324:	muleq	r1, fp, r0
   14328:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1432c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14330:	sub	sp, sp, #52	; 0x34
   14334:	mov	r6, r0
   14338:	mov	r5, r3
   1433c:	mov	r8, r1
   14340:	mov	r9, r2
   14344:	bl	112b4 <__errno_location@plt>
   14348:	ldr	r7, [pc, #380]	; 144cc <__assert_fail@plt+0x3104>
   1434c:	cmn	r6, #-2147483647	; 0x80000001
   14350:	ldr	r4, [r7]
   14354:	ldr	r3, [r0]
   14358:	str	r0, [sp, #24]
   1435c:	str	r3, [sp, #32]
   14360:	movne	r3, #0
   14364:	moveq	r3, #1
   14368:	orrs	r3, r3, r6, lsr #31
   1436c:	beq	14374 <__assert_fail@plt+0x2fac>
   14370:	bl	113a4 <abort@plt>
   14374:	ldr	r2, [r7, #4]
   14378:	cmp	r6, r2
   1437c:	blt	143ec <__assert_fail@plt+0x3024>
   14380:	add	r1, sp, #48	; 0x30
   14384:	add	sl, r7, #8
   14388:	str	r2, [r1, #-4]!
   1438c:	cmp	r4, sl
   14390:	mov	r3, #8
   14394:	sub	r2, r6, r2
   14398:	movne	r0, r4
   1439c:	str	r3, [sp]
   143a0:	add	r2, r2, #1
   143a4:	mvn	r3, #-2147483648	; 0x80000000
   143a8:	moveq	r0, #0
   143ac:	bl	1542c <__assert_fail@plt+0x4064>
   143b0:	cmp	r4, sl
   143b4:	ldr	r2, [sp, #44]	; 0x2c
   143b8:	mov	fp, r0
   143bc:	str	r0, [r7]
   143c0:	ldmeq	r4, {r0, r1}
   143c4:	mov	r4, fp
   143c8:	stmeq	fp, {r0, r1}
   143cc:	ldr	r0, [r7, #4]
   143d0:	mov	r1, #0
   143d4:	sub	r2, r2, r0
   143d8:	add	r0, fp, r0, lsl #3
   143dc:	lsl	r2, r2, #3
   143e0:	bl	112d8 <memset@plt>
   143e4:	ldr	r3, [sp, #44]	; 0x2c
   143e8:	str	r3, [r7, #4]
   143ec:	ldr	r3, [r5, #4]
   143f0:	add	sl, r4, r6, lsl #3
   143f4:	orr	r3, r3, #1
   143f8:	str	r3, [sp, #28]
   143fc:	add	r3, r5, #8
   14400:	str	r3, [sp, #36]	; 0x24
   14404:	ldr	r3, [r5, #44]	; 0x2c
   14408:	ldr	fp, [r4, r6, lsl #3]
   1440c:	ldr	r7, [sl, #4]
   14410:	str	r3, [sp, #16]
   14414:	ldr	r3, [r5, #40]	; 0x28
   14418:	mov	r2, r8
   1441c:	str	r3, [sp, #12]
   14420:	add	r3, r5, #8
   14424:	str	r3, [sp, #8]
   14428:	ldr	r3, [sp, #28]
   1442c:	mov	r1, fp
   14430:	str	r3, [sp, #4]
   14434:	ldr	r3, [r5]
   14438:	mov	r0, r7
   1443c:	str	r3, [sp]
   14440:	mov	r3, r9
   14444:	bl	135f8 <__assert_fail@plt+0x2230>
   14448:	cmp	fp, r0
   1444c:	bhi	144b4 <__assert_fail@plt+0x30ec>
   14450:	ldr	r3, [pc, #120]	; 144d0 <__assert_fail@plt+0x3108>
   14454:	add	fp, r0, #1
   14458:	cmp	r7, r3
   1445c:	str	fp, [r4, r6, lsl #3]
   14460:	beq	1446c <__assert_fail@plt+0x30a4>
   14464:	mov	r0, r7
   14468:	bl	13094 <__assert_fail@plt+0x1ccc>
   1446c:	mov	r0, fp
   14470:	bl	152e4 <__assert_fail@plt+0x3f1c>
   14474:	ldr	r3, [r5, #44]	; 0x2c
   14478:	mov	r2, r8
   1447c:	mov	r1, fp
   14480:	str	r0, [sl, #4]
   14484:	str	r3, [sp, #16]
   14488:	ldr	r3, [r5, #40]	; 0x28
   1448c:	mov	r7, r0
   14490:	str	r3, [sp, #12]
   14494:	add	r3, r5, #8
   14498:	str	r3, [sp, #8]
   1449c:	ldr	r3, [sp, #28]
   144a0:	str	r3, [sp, #4]
   144a4:	ldr	r3, [r5]
   144a8:	str	r3, [sp]
   144ac:	mov	r3, r9
   144b0:	bl	135f8 <__assert_fail@plt+0x2230>
   144b4:	ldr	r3, [sp, #24]
   144b8:	ldr	r2, [sp, #32]
   144bc:	mov	r0, r7
   144c0:	str	r2, [r3]
   144c4:	add	sp, sp, #52	; 0x34
   144c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144cc:	andeq	r8, r2, r4, lsr r1
   144d0:	andeq	r8, r2, ip, ror #3
   144d4:	push	{r4, r5, r6, lr}
   144d8:	mov	r5, r0
   144dc:	bl	112b4 <__errno_location@plt>
   144e0:	cmp	r5, #0
   144e4:	mov	r1, #48	; 0x30
   144e8:	ldr	r6, [r0]
   144ec:	mov	r4, r0
   144f0:	ldr	r0, [pc, #12]	; 14504 <__assert_fail@plt+0x313c>
   144f4:	movne	r0, r5
   144f8:	bl	156c0 <__assert_fail@plt+0x42f8>
   144fc:	str	r6, [r4]
   14500:	pop	{r4, r5, r6, pc}
   14504:	andeq	r8, r2, ip, ror #5
   14508:	ldr	r3, [pc, #12]	; 1451c <__assert_fail@plt+0x3154>
   1450c:	cmp	r0, #0
   14510:	moveq	r0, r3
   14514:	ldr	r0, [r0]
   14518:	bx	lr
   1451c:	andeq	r8, r2, ip, ror #5
   14520:	ldr	r3, [pc, #12]	; 14534 <__assert_fail@plt+0x316c>
   14524:	cmp	r0, #0
   14528:	moveq	r0, r3
   1452c:	str	r1, [r0]
   14530:	bx	lr
   14534:	andeq	r8, r2, ip, ror #5
   14538:	ldr	r3, [pc, #52]	; 14574 <__assert_fail@plt+0x31ac>
   1453c:	cmp	r0, #0
   14540:	moveq	r0, r3
   14544:	add	r3, r0, #8
   14548:	push	{lr}		; (str lr, [sp, #-4]!)
   1454c:	lsr	lr, r1, #5
   14550:	and	r1, r1, #31
   14554:	ldr	ip, [r3, lr, lsl #2]
   14558:	lsr	r0, ip, r1
   1455c:	eor	r2, r2, r0
   14560:	and	r2, r2, #1
   14564:	and	r0, r0, #1
   14568:	eor	r1, ip, r2, lsl r1
   1456c:	str	r1, [r3, lr, lsl #2]
   14570:	pop	{pc}		; (ldr pc, [sp], #4)
   14574:	andeq	r8, r2, ip, ror #5
   14578:	ldr	r3, [pc, #16]	; 14590 <__assert_fail@plt+0x31c8>
   1457c:	cmp	r0, #0
   14580:	movne	r3, r0
   14584:	ldr	r0, [r3, #4]
   14588:	str	r1, [r3, #4]
   1458c:	bx	lr
   14590:	andeq	r8, r2, ip, ror #5
   14594:	ldr	r3, [pc, #44]	; 145c8 <__assert_fail@plt+0x3200>
   14598:	cmp	r0, #0
   1459c:	moveq	r0, r3
   145a0:	mov	r3, #10
   145a4:	cmp	r2, #0
   145a8:	cmpne	r1, #0
   145ac:	str	r3, [r0]
   145b0:	bne	145bc <__assert_fail@plt+0x31f4>
   145b4:	push	{r4, lr}
   145b8:	bl	113a4 <abort@plt>
   145bc:	str	r1, [r0, #40]	; 0x28
   145c0:	str	r2, [r0, #44]	; 0x2c
   145c4:	bx	lr
   145c8:	andeq	r8, r2, ip, ror #5
   145cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   145d0:	sub	sp, sp, #24
   145d4:	mov	sl, r3
   145d8:	ldr	r4, [sp, #56]	; 0x38
   145dc:	ldr	r3, [pc, #100]	; 14648 <__assert_fail@plt+0x3280>
   145e0:	cmp	r4, #0
   145e4:	moveq	r4, r3
   145e8:	mov	r7, r0
   145ec:	mov	r8, r1
   145f0:	mov	r9, r2
   145f4:	bl	112b4 <__errno_location@plt>
   145f8:	ldr	r3, [r4, #44]	; 0x2c
   145fc:	mov	r2, r9
   14600:	mov	r1, r8
   14604:	ldr	r6, [r0]
   14608:	str	r3, [sp, #16]
   1460c:	ldr	r3, [r4, #40]	; 0x28
   14610:	mov	r5, r0
   14614:	str	r3, [sp, #12]
   14618:	add	r3, r4, #8
   1461c:	str	r3, [sp, #8]
   14620:	ldr	r3, [r4, #4]
   14624:	mov	r0, r7
   14628:	str	r3, [sp, #4]
   1462c:	ldr	r3, [r4]
   14630:	str	r3, [sp]
   14634:	mov	r3, sl
   14638:	bl	135f8 <__assert_fail@plt+0x2230>
   1463c:	str	r6, [r5]
   14640:	add	sp, sp, #24
   14644:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14648:	andeq	r8, r2, ip, ror #5
   1464c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14650:	cmp	r3, #0
   14654:	sub	sp, sp, #44	; 0x2c
   14658:	ldr	r4, [pc, #188]	; 1471c <__assert_fail@plt+0x3354>
   1465c:	mov	r6, r2
   14660:	movne	r4, r3
   14664:	mov	sl, r1
   14668:	mov	r9, r0
   1466c:	bl	112b4 <__errno_location@plt>
   14670:	ldr	r5, [r4, #4]
   14674:	add	fp, r4, #8
   14678:	cmp	r6, #0
   1467c:	orreq	r5, r5, #1
   14680:	mov	r1, #0
   14684:	mov	r2, r9
   14688:	ldr	r3, [r0]
   1468c:	mov	r8, r0
   14690:	str	r3, [sp, #28]
   14694:	ldr	r3, [r4, #44]	; 0x2c
   14698:	mov	r0, r1
   1469c:	str	r3, [sp, #16]
   146a0:	ldr	r3, [r4, #40]	; 0x28
   146a4:	stmib	sp, {r5, fp}
   146a8:	str	r3, [sp, #12]
   146ac:	ldr	r3, [r4]
   146b0:	str	r3, [sp]
   146b4:	mov	r3, sl
   146b8:	bl	135f8 <__assert_fail@plt+0x2230>
   146bc:	add	r1, r0, #1
   146c0:	mov	r7, r0
   146c4:	mov	r0, r1
   146c8:	str	r1, [sp, #36]	; 0x24
   146cc:	bl	152e4 <__assert_fail@plt+0x3f1c>
   146d0:	ldr	r3, [r4, #44]	; 0x2c
   146d4:	mov	r2, r9
   146d8:	str	r3, [sp, #16]
   146dc:	ldr	r3, [r4, #40]	; 0x28
   146e0:	stmib	sp, {r5, fp}
   146e4:	str	r3, [sp, #12]
   146e8:	ldr	r3, [r4]
   146ec:	ldr	r1, [sp, #36]	; 0x24
   146f0:	str	r3, [sp]
   146f4:	mov	r3, sl
   146f8:	str	r0, [sp, #32]
   146fc:	bl	135f8 <__assert_fail@plt+0x2230>
   14700:	ldr	r3, [sp, #28]
   14704:	cmp	r6, #0
   14708:	str	r3, [r8]
   1470c:	ldr	r0, [sp, #32]
   14710:	strne	r7, [r6]
   14714:	add	sp, sp, #44	; 0x2c
   14718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1471c:	andeq	r8, r2, ip, ror #5
   14720:	mov	r3, r2
   14724:	mov	r2, #0
   14728:	b	1464c <__assert_fail@plt+0x3284>
   1472c:	push	{r4, r5, r6, r7, r8, lr}
   14730:	mov	r6, #1
   14734:	ldr	r4, [pc, #104]	; 147a4 <__assert_fail@plt+0x33dc>
   14738:	ldr	r5, [r4]
   1473c:	add	r7, r5, #12
   14740:	ldr	r3, [r4, #4]
   14744:	add	r7, r7, #8
   14748:	cmp	r6, r3
   1474c:	blt	14794 <__assert_fail@plt+0x33cc>
   14750:	ldr	r0, [r5, #4]
   14754:	ldr	r6, [pc, #76]	; 147a8 <__assert_fail@plt+0x33e0>
   14758:	cmp	r0, r6
   1475c:	beq	14770 <__assert_fail@plt+0x33a8>
   14760:	bl	13094 <__assert_fail@plt+0x1ccc>
   14764:	mov	r3, #256	; 0x100
   14768:	str	r3, [r4, #8]
   1476c:	str	r6, [r4, #12]
   14770:	ldr	r6, [pc, #52]	; 147ac <__assert_fail@plt+0x33e4>
   14774:	cmp	r5, r6
   14778:	beq	14788 <__assert_fail@plt+0x33c0>
   1477c:	mov	r0, r5
   14780:	bl	13094 <__assert_fail@plt+0x1ccc>
   14784:	str	r6, [r4]
   14788:	mov	r3, #1
   1478c:	str	r3, [r4, #4]
   14790:	pop	{r4, r5, r6, r7, r8, pc}
   14794:	ldr	r0, [r7, #-8]
   14798:	bl	13094 <__assert_fail@plt+0x1ccc>
   1479c:	add	r6, r6, #1
   147a0:	b	14740 <__assert_fail@plt+0x3378>
   147a4:	andeq	r8, r2, r4, lsr r1
   147a8:	andeq	r8, r2, ip, ror #3
   147ac:	andeq	r8, r2, ip, lsr r1
   147b0:	ldr	r3, [pc, #4]	; 147bc <__assert_fail@plt+0x33f4>
   147b4:	mvn	r2, #0
   147b8:	b	1432c <__assert_fail@plt+0x2f64>
   147bc:	andeq	r8, r2, ip, ror #5
   147c0:	ldr	r3, [pc]	; 147c8 <__assert_fail@plt+0x3400>
   147c4:	b	1432c <__assert_fail@plt+0x2f64>
   147c8:	andeq	r8, r2, ip, ror #5
   147cc:	mov	r1, r0
   147d0:	mov	r0, #0
   147d4:	b	147b0 <__assert_fail@plt+0x33e8>
   147d8:	mov	r2, r1
   147dc:	mov	r1, r0
   147e0:	mov	r0, #0
   147e4:	b	147c0 <__assert_fail@plt+0x33f8>
   147e8:	push	{r4, r5, lr}
   147ec:	sub	sp, sp, #52	; 0x34
   147f0:	mov	r5, r2
   147f4:	mov	r4, r0
   147f8:	mov	r0, sp
   147fc:	bl	134b4 <__assert_fail@plt+0x20ec>
   14800:	mov	r3, sp
   14804:	mvn	r2, #0
   14808:	mov	r1, r5
   1480c:	mov	r0, r4
   14810:	bl	1432c <__assert_fail@plt+0x2f64>
   14814:	add	sp, sp, #52	; 0x34
   14818:	pop	{r4, r5, pc}
   1481c:	push	{r4, r5, r6, lr}
   14820:	sub	sp, sp, #48	; 0x30
   14824:	mov	r5, r2
   14828:	mov	r6, r3
   1482c:	mov	r4, r0
   14830:	mov	r0, sp
   14834:	bl	134b4 <__assert_fail@plt+0x20ec>
   14838:	mov	r3, sp
   1483c:	mov	r2, r6
   14840:	mov	r1, r5
   14844:	mov	r0, r4
   14848:	bl	1432c <__assert_fail@plt+0x2f64>
   1484c:	add	sp, sp, #48	; 0x30
   14850:	pop	{r4, r5, r6, pc}
   14854:	mov	r2, r1
   14858:	mov	r1, r0
   1485c:	mov	r0, #0
   14860:	b	147e8 <__assert_fail@plt+0x3420>
   14864:	mov	r3, r2
   14868:	mov	r2, r1
   1486c:	mov	r1, r0
   14870:	mov	r0, #0
   14874:	b	1481c <__assert_fail@plt+0x3454>
   14878:	push	{r4, r5, r6, lr}
   1487c:	mov	r4, r0
   14880:	ldr	lr, [pc, #80]	; 148d8 <__assert_fail@plt+0x3510>
   14884:	mov	r5, r1
   14888:	mov	r6, r2
   1488c:	ldm	lr!, {r0, r1, r2, r3}
   14890:	sub	sp, sp, #48	; 0x30
   14894:	mov	ip, sp
   14898:	stmia	ip!, {r0, r1, r2, r3}
   1489c:	ldm	lr!, {r0, r1, r2, r3}
   148a0:	stmia	ip!, {r0, r1, r2, r3}
   148a4:	ldm	lr, {r0, r1, r2, r3}
   148a8:	stm	ip, {r0, r1, r2, r3}
   148ac:	mov	r1, r6
   148b0:	mov	r2, #1
   148b4:	mov	r0, sp
   148b8:	bl	14538 <__assert_fail@plt+0x3170>
   148bc:	mov	r3, sp
   148c0:	mov	r2, r5
   148c4:	mov	r1, r4
   148c8:	mov	r0, #0
   148cc:	bl	1432c <__assert_fail@plt+0x2f64>
   148d0:	add	sp, sp, #48	; 0x30
   148d4:	pop	{r4, r5, r6, pc}
   148d8:	andeq	r8, r2, ip, ror #5
   148dc:	mov	r2, r1
   148e0:	mvn	r1, #0
   148e4:	b	14878 <__assert_fail@plt+0x34b0>
   148e8:	mov	r1, #58	; 0x3a
   148ec:	b	148dc <__assert_fail@plt+0x3514>
   148f0:	mov	r2, #58	; 0x3a
   148f4:	b	14878 <__assert_fail@plt+0x34b0>
   148f8:	push	{r4, r5, lr}
   148fc:	sub	sp, sp, #100	; 0x64
   14900:	mov	r4, r0
   14904:	mov	r0, sp
   14908:	mov	r5, r2
   1490c:	bl	134b4 <__assert_fail@plt+0x20ec>
   14910:	mov	ip, sp
   14914:	add	lr, sp, #48	; 0x30
   14918:	ldm	ip!, {r0, r1, r2, r3}
   1491c:	stmia	lr!, {r0, r1, r2, r3}
   14920:	ldm	ip!, {r0, r1, r2, r3}
   14924:	stmia	lr!, {r0, r1, r2, r3}
   14928:	ldm	ip, {r0, r1, r2, r3}
   1492c:	stm	lr, {r0, r1, r2, r3}
   14930:	mov	r2, #1
   14934:	mov	r1, #58	; 0x3a
   14938:	add	r0, sp, #48	; 0x30
   1493c:	bl	14538 <__assert_fail@plt+0x3170>
   14940:	add	r3, sp, #48	; 0x30
   14944:	mvn	r2, #0
   14948:	mov	r1, r5
   1494c:	mov	r0, r4
   14950:	bl	1432c <__assert_fail@plt+0x2f64>
   14954:	add	sp, sp, #100	; 0x64
   14958:	pop	{r4, r5, pc}
   1495c:	push	{r4, r5, r6, r7, lr}
   14960:	mov	r4, r0
   14964:	ldr	lr, [pc, #84]	; 149c0 <__assert_fail@plt+0x35f8>
   14968:	mov	r6, r1
   1496c:	mov	r7, r2
   14970:	mov	r5, r3
   14974:	ldm	lr!, {r0, r1, r2, r3}
   14978:	sub	sp, sp, #52	; 0x34
   1497c:	mov	ip, sp
   14980:	stmia	ip!, {r0, r1, r2, r3}
   14984:	ldm	lr!, {r0, r1, r2, r3}
   14988:	stmia	ip!, {r0, r1, r2, r3}
   1498c:	ldm	lr, {r0, r1, r2, r3}
   14990:	stm	ip, {r0, r1, r2, r3}
   14994:	mov	r2, r7
   14998:	mov	r1, r6
   1499c:	mov	r0, sp
   149a0:	bl	14594 <__assert_fail@plt+0x31cc>
   149a4:	mov	r3, sp
   149a8:	ldr	r2, [sp, #72]	; 0x48
   149ac:	mov	r1, r5
   149b0:	mov	r0, r4
   149b4:	bl	1432c <__assert_fail@plt+0x2f64>
   149b8:	add	sp, sp, #52	; 0x34
   149bc:	pop	{r4, r5, r6, r7, pc}
   149c0:	andeq	r8, r2, ip, ror #5
   149c4:	mvn	ip, #0
   149c8:	push	{r0, r1, r2, lr}
   149cc:	str	ip, [sp]
   149d0:	bl	1495c <__assert_fail@plt+0x3594>
   149d4:	add	sp, sp, #12
   149d8:	pop	{pc}		; (ldr pc, [sp], #4)
   149dc:	mov	r3, r2
   149e0:	mov	r2, r1
   149e4:	mov	r1, r0
   149e8:	mov	r0, #0
   149ec:	b	149c4 <__assert_fail@plt+0x35fc>
   149f0:	push	{r0, r1, r2, lr}
   149f4:	str	r3, [sp]
   149f8:	mov	r3, r2
   149fc:	mov	r2, r1
   14a00:	mov	r1, r0
   14a04:	mov	r0, #0
   14a08:	bl	1495c <__assert_fail@plt+0x3594>
   14a0c:	add	sp, sp, #12
   14a10:	pop	{pc}		; (ldr pc, [sp], #4)
   14a14:	ldr	r3, [pc]	; 14a1c <__assert_fail@plt+0x3654>
   14a18:	b	1432c <__assert_fail@plt+0x2f64>
   14a1c:	andeq	r8, r2, r4, asr #2
   14a20:	mov	r2, r1
   14a24:	mov	r1, r0
   14a28:	mov	r0, #0
   14a2c:	b	14a14 <__assert_fail@plt+0x364c>
   14a30:	mvn	r2, #0
   14a34:	b	14a14 <__assert_fail@plt+0x364c>
   14a38:	mov	r1, r0
   14a3c:	mov	r0, #0
   14a40:	b	14a30 <__assert_fail@plt+0x3668>
   14a44:	push	{r4, r5, r6, lr}
   14a48:	mov	r4, r0
   14a4c:	ldr	r3, [r0, #24]
   14a50:	ldr	r6, [r0, #20]
   14a54:	ldr	r1, [r0, #28]
   14a58:	cmp	r3, r6
   14a5c:	sub	r5, r3, r6
   14a60:	ldrbeq	r2, [r0, #52]	; 0x34
   14a64:	sub	r5, r5, #1
   14a68:	orreq	r2, r2, #2
   14a6c:	strbeq	r2, [r0, #52]	; 0x34
   14a70:	ldr	r2, [r0, #36]	; 0x24
   14a74:	add	r3, r3, r2
   14a78:	bic	r3, r3, r2
   14a7c:	ldr	r2, [r0, #16]
   14a80:	str	r3, [r0, #24]
   14a84:	sub	r3, r3, r2
   14a88:	sub	r2, r1, r2
   14a8c:	cmp	r3, r2
   14a90:	strhi	r1, [r0, #24]
   14a94:	ldr	r3, [r0, #24]
   14a98:	ldr	r2, [r0, #68]	; 0x44
   14a9c:	str	r3, [r0, #20]
   14aa0:	ldr	r3, [r0, #72]	; 0x48
   14aa4:	sub	r3, r3, r2
   14aa8:	cmp	r3, #3
   14aac:	bhi	14abc <__assert_fail@plt+0x36f4>
   14ab0:	mov	r1, #4
   14ab4:	add	r0, r0, #56	; 0x38
   14ab8:	bl	15ae4 <_obstack_newchunk@@Base>
   14abc:	ldr	r3, [r4, #68]	; 0x44
   14ac0:	str	r6, [r3]
   14ac4:	ldr	r3, [r4, #68]	; 0x44
   14ac8:	ldr	r2, [r4, #112]	; 0x70
   14acc:	add	r3, r3, #4
   14ad0:	str	r3, [r4, #68]	; 0x44
   14ad4:	ldr	r3, [r4, #116]	; 0x74
   14ad8:	sub	r3, r3, r2
   14adc:	cmp	r3, #3
   14ae0:	bhi	14af0 <__assert_fail@plt+0x3728>
   14ae4:	mov	r1, #4
   14ae8:	add	r0, r4, #100	; 0x64
   14aec:	bl	15ae4 <_obstack_newchunk@@Base>
   14af0:	ldr	r3, [r4, #112]	; 0x70
   14af4:	str	r5, [r3]
   14af8:	ldr	r3, [r4, #112]	; 0x70
   14afc:	add	r3, r3, #4
   14b00:	str	r3, [r4, #112]	; 0x70
   14b04:	ldr	r3, [r4]
   14b08:	add	r3, r3, #1
   14b0c:	str	r3, [r4]
   14b10:	pop	{r4, r5, r6, pc}
   14b14:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14b18:	mov	r4, #0
   14b1c:	ldr	r6, [pc, #96]	; 14b84 <__assert_fail@plt+0x37bc>
   14b20:	ldr	r7, [pc, #96]	; 14b88 <__assert_fail@plt+0x37c0>
   14b24:	mov	r5, r0
   14b28:	str	r4, [r0]
   14b2c:	str	r4, [r0, #4]
   14b30:	str	r4, [r0, #8]
   14b34:	mov	r3, r6
   14b38:	mov	r2, r4
   14b3c:	mov	r1, r4
   14b40:	str	r7, [sp]
   14b44:	add	r0, r0, #12
   14b48:	bl	15aa4 <_obstack_begin@@Base>
   14b4c:	mov	r3, r6
   14b50:	mov	r2, r4
   14b54:	mov	r1, r4
   14b58:	str	r7, [sp]
   14b5c:	add	r0, r5, #56	; 0x38
   14b60:	bl	15aa4 <_obstack_begin@@Base>
   14b64:	str	r7, [sp]
   14b68:	mov	r3, r6
   14b6c:	mov	r2, r4
   14b70:	mov	r1, r4
   14b74:	add	r0, r5, #100	; 0x64
   14b78:	bl	15aa4 <_obstack_begin@@Base>
   14b7c:	add	sp, sp, #12
   14b80:	pop	{r4, r5, r6, r7, pc}
   14b84:	ldrdeq	r5, [r1], -r8
   14b88:	muleq	r1, r4, r0
   14b8c:	push	{r4, lr}
   14b90:	mov	r1, #0
   14b94:	mov	r4, r0
   14b98:	add	r0, r0, #12
   14b9c:	bl	15c18 <_obstack_free@@Base>
   14ba0:	add	r0, r4, #56	; 0x38
   14ba4:	mov	r1, #0
   14ba8:	bl	15c18 <_obstack_free@@Base>
   14bac:	add	r0, r4, #100	; 0x64
   14bb0:	mov	r1, #0
   14bb4:	pop	{r4, lr}
   14bb8:	b	15c18 <_obstack_free@@Base>
   14bbc:	push	{r4, r5, r6, r7, r8, lr}
   14bc0:	mov	r5, r0
   14bc4:	mov	r4, r1
   14bc8:	add	r7, r1, #12
   14bcc:	mov	r8, #1
   14bd0:	mov	r0, r5
   14bd4:	bl	112f0 <fgetc@plt>
   14bd8:	ldr	r3, [r4, #24]
   14bdc:	cmn	r0, #1
   14be0:	mov	r6, r0
   14be4:	bne	14d08 <__assert_fail@plt+0x3940>
   14be8:	ldr	r2, [r4, #20]
   14bec:	cmp	r2, r3
   14bf0:	beq	14c28 <__assert_fail@plt+0x3860>
   14bf4:	ldr	r2, [r4, #28]
   14bf8:	cmp	r2, r3
   14bfc:	bne	14c0c <__assert_fail@plt+0x3844>
   14c00:	mov	r1, #1
   14c04:	add	r0, r4, #12
   14c08:	bl	15ae4 <_obstack_newchunk@@Base>
   14c0c:	ldr	r3, [r4, #24]
   14c10:	mov	r0, r4
   14c14:	add	r2, r3, #1
   14c18:	str	r2, [r4, #24]
   14c1c:	mov	r2, #0
   14c20:	strb	r2, [r3]
   14c24:	bl	14a44 <__assert_fail@plt+0x367c>
   14c28:	ldr	r3, [r4, #72]	; 0x48
   14c2c:	ldr	r2, [r4, #68]	; 0x44
   14c30:	sub	r3, r3, r2
   14c34:	cmp	r3, #3
   14c38:	bhi	14c48 <__assert_fail@plt+0x3880>
   14c3c:	mov	r1, #4
   14c40:	add	r0, r4, #56	; 0x38
   14c44:	bl	15ae4 <_obstack_newchunk@@Base>
   14c48:	ldr	r3, [r4, #68]	; 0x44
   14c4c:	mov	r2, #0
   14c50:	str	r2, [r3]
   14c54:	ldr	r3, [r4, #68]	; 0x44
   14c58:	ldr	r1, [r4, #64]	; 0x40
   14c5c:	add	r3, r3, #4
   14c60:	cmp	r3, r1
   14c64:	str	r3, [r4, #68]	; 0x44
   14c68:	ldrbeq	r2, [r4, #96]	; 0x60
   14c6c:	ldr	r0, [r4, #72]	; 0x48
   14c70:	str	r1, [r4, #4]
   14c74:	orreq	r2, r2, #2
   14c78:	strbeq	r2, [r4, #96]	; 0x60
   14c7c:	ldr	r2, [r4, #80]	; 0x50
   14c80:	ldr	r1, [r4, #108]	; 0x6c
   14c84:	add	r3, r3, r2
   14c88:	bic	r3, r3, r2
   14c8c:	ldr	r2, [r4, #60]	; 0x3c
   14c90:	str	r3, [r4, #68]	; 0x44
   14c94:	sub	r3, r3, r2
   14c98:	sub	r2, r0, r2
   14c9c:	cmp	r3, r2
   14ca0:	strhi	r0, [r4, #68]	; 0x44
   14ca4:	ldr	r3, [r4, #68]	; 0x44
   14ca8:	ldr	r0, [r4, #116]	; 0x74
   14cac:	str	r3, [r4, #64]	; 0x40
   14cb0:	ldr	r3, [r4, #112]	; 0x70
   14cb4:	str	r1, [r4, #8]
   14cb8:	cmp	r1, r3
   14cbc:	ldrbeq	r2, [r4, #140]	; 0x8c
   14cc0:	orreq	r2, r2, #2
   14cc4:	strbeq	r2, [r4, #140]	; 0x8c
   14cc8:	ldr	r2, [r4, #124]	; 0x7c
   14ccc:	add	r3, r3, r2
   14cd0:	bic	r3, r3, r2
   14cd4:	ldr	r2, [r4, #104]	; 0x68
   14cd8:	str	r3, [r4, #112]	; 0x70
   14cdc:	sub	r3, r3, r2
   14ce0:	sub	r2, r0, r2
   14ce4:	cmp	r3, r2
   14ce8:	strhi	r0, [r4, #112]	; 0x70
   14cec:	ldr	r3, [r4, #112]	; 0x70
   14cf0:	mov	r0, r5
   14cf4:	str	r3, [r4, #108]	; 0x6c
   14cf8:	bl	11110 <ferror@plt>
   14cfc:	clz	r0, r0
   14d00:	lsr	r0, r0, #5
   14d04:	pop	{r4, r5, r6, r7, r8, pc}
   14d08:	ldr	r2, [r4, #28]
   14d0c:	cmp	r2, r3
   14d10:	bne	14d20 <__assert_fail@plt+0x3958>
   14d14:	mov	r1, r8
   14d18:	mov	r0, r7
   14d1c:	bl	15ae4 <_obstack_newchunk@@Base>
   14d20:	ldr	r3, [r4, #24]
   14d24:	cmp	r6, #0
   14d28:	add	r2, r3, #1
   14d2c:	str	r2, [r4, #24]
   14d30:	strb	r6, [r3]
   14d34:	bne	14bd0 <__assert_fail@plt+0x3808>
   14d38:	mov	r0, r4
   14d3c:	bl	14a44 <__assert_fail@plt+0x367c>
   14d40:	b	14bd0 <__assert_fail@plt+0x3808>
   14d44:	push	{r4, r5, r6, r7, r8, lr}
   14d48:	mov	r7, r0
   14d4c:	ldr	r5, [pc, #88]	; 14dac <__assert_fail@plt+0x39e4>
   14d50:	mov	r8, r1
   14d54:	mov	r4, r2
   14d58:	mov	r2, r4
   14d5c:	mov	r1, r8
   14d60:	mov	r0, r7
   14d64:	bl	110d4 <read@plt>
   14d68:	subs	r6, r0, #0
   14d6c:	bge	14d9c <__assert_fail@plt+0x39d4>
   14d70:	bl	112b4 <__errno_location@plt>
   14d74:	ldr	r3, [r0]
   14d78:	cmp	r3, #4
   14d7c:	beq	14d58 <__assert_fail@plt+0x3990>
   14d80:	cmp	r4, r5
   14d84:	movls	r4, #0
   14d88:	movhi	r4, #1
   14d8c:	cmp	r3, #22
   14d90:	movne	r4, #0
   14d94:	cmp	r4, #0
   14d98:	bne	14da4 <__assert_fail@plt+0x39dc>
   14d9c:	mov	r0, r6
   14da0:	pop	{r4, r5, r6, r7, r8, pc}
   14da4:	mov	r4, r5
   14da8:	b	14d58 <__assert_fail@plt+0x3990>
   14dac:	svcvc	0x00f00000	; IMB
   14db0:	push	{r4, r5, r6, lr}
   14db4:	sub	sp, sp, #32
   14db8:	cmp	r1, #0
   14dbc:	mov	r5, r0
   14dc0:	ldr	r4, [sp, #48]	; 0x30
   14dc4:	ldr	r6, [sp, #52]	; 0x34
   14dc8:	beq	14e7c <__assert_fail@plt+0x3ab4>
   14dcc:	stm	sp, {r2, r3}
   14dd0:	mov	r3, r1
   14dd4:	ldr	r2, [pc, #860]	; 15138 <__assert_fail@plt+0x3d70>
   14dd8:	mov	r1, #1
   14ddc:	bl	11314 <__fprintf_chk@plt>
   14de0:	mov	r2, #5
   14de4:	ldr	r1, [pc, #848]	; 1513c <__assert_fail@plt+0x3d74>
   14de8:	mov	r0, #0
   14dec:	bl	11158 <dcgettext@plt>
   14df0:	ldr	r3, [pc, #840]	; 15140 <__assert_fail@plt+0x3d78>
   14df4:	ldr	r2, [pc, #840]	; 15144 <__assert_fail@plt+0x3d7c>
   14df8:	str	r3, [sp]
   14dfc:	mov	r1, #1
   14e00:	mov	r3, r0
   14e04:	mov	r0, r5
   14e08:	bl	11314 <__fprintf_chk@plt>
   14e0c:	mov	r1, r5
   14e10:	mov	r0, #10
   14e14:	bl	1114c <fputc_unlocked@plt>
   14e18:	mov	r2, #5
   14e1c:	ldr	r1, [pc, #804]	; 15148 <__assert_fail@plt+0x3d80>
   14e20:	mov	r0, #0
   14e24:	bl	11158 <dcgettext@plt>
   14e28:	mov	r1, #1
   14e2c:	ldr	r3, [pc, #792]	; 1514c <__assert_fail@plt+0x3d84>
   14e30:	mov	r2, r0
   14e34:	mov	r0, r5
   14e38:	bl	11314 <__fprintf_chk@plt>
   14e3c:	mov	r1, r5
   14e40:	mov	r0, #10
   14e44:	bl	1114c <fputc_unlocked@plt>
   14e48:	cmp	r6, #9
   14e4c:	ldrls	pc, [pc, r6, lsl #2]
   14e50:	b	1512c <__assert_fail@plt+0x3d64>
   14e54:	andeq	r4, r1, ip, ror #30
   14e58:	muleq	r1, r4, lr
   14e5c:	andeq	r4, r1, r0, asr #29
   14e60:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14e64:	andeq	r4, r1, r0, lsr pc
   14e68:	andeq	r4, r1, r4, ror pc
   14e6c:			; <UNDEFINED> instruction: 0x00014fbc
   14e70:	andeq	r5, r1, ip
   14e74:	andeq	r5, r1, r4, rrx
   14e78:	andeq	r5, r1, r4, asr #1
   14e7c:	str	r3, [sp]
   14e80:	mov	r1, #1
   14e84:	mov	r3, r2
   14e88:	ldr	r2, [pc, #704]	; 15150 <__assert_fail@plt+0x3d88>
   14e8c:	bl	11314 <__fprintf_chk@plt>
   14e90:	b	14de0 <__assert_fail@plt+0x3a18>
   14e94:	mov	r2, #5
   14e98:	ldr	r1, [pc, #692]	; 15154 <__assert_fail@plt+0x3d8c>
   14e9c:	mov	r0, #0
   14ea0:	bl	11158 <dcgettext@plt>
   14ea4:	ldr	r3, [r4]
   14ea8:	mov	r1, #1
   14eac:	mov	r2, r0
   14eb0:	mov	r0, r5
   14eb4:	add	sp, sp, #32
   14eb8:	pop	{r4, r5, r6, lr}
   14ebc:	b	11314 <__fprintf_chk@plt>
   14ec0:	mov	r2, #5
   14ec4:	ldr	r1, [pc, #652]	; 15158 <__assert_fail@plt+0x3d90>
   14ec8:	mov	r0, #0
   14ecc:	bl	11158 <dcgettext@plt>
   14ed0:	ldr	r3, [r4, #4]
   14ed4:	mov	r1, #1
   14ed8:	str	r3, [sp, #48]	; 0x30
   14edc:	ldr	r3, [r4]
   14ee0:	mov	r2, r0
   14ee4:	mov	r0, r5
   14ee8:	add	sp, sp, #32
   14eec:	pop	{r4, r5, r6, lr}
   14ef0:	b	11314 <__fprintf_chk@plt>
   14ef4:	mov	r2, #5
   14ef8:	ldr	r1, [pc, #604]	; 1515c <__assert_fail@plt+0x3d94>
   14efc:	mov	r0, #0
   14f00:	bl	11158 <dcgettext@plt>
   14f04:	ldr	r3, [r4, #8]
   14f08:	mov	r1, #1
   14f0c:	str	r3, [sp, #52]	; 0x34
   14f10:	ldr	r3, [r4, #4]
   14f14:	str	r3, [sp, #48]	; 0x30
   14f18:	ldr	r3, [r4]
   14f1c:	mov	r2, r0
   14f20:	mov	r0, r5
   14f24:	add	sp, sp, #32
   14f28:	pop	{r4, r5, r6, lr}
   14f2c:	b	11314 <__fprintf_chk@plt>
   14f30:	mov	r2, #5
   14f34:	ldr	r1, [pc, #548]	; 15160 <__assert_fail@plt+0x3d98>
   14f38:	mov	r0, #0
   14f3c:	bl	11158 <dcgettext@plt>
   14f40:	ldr	r3, [r4, #12]
   14f44:	mov	r1, #1
   14f48:	str	r3, [sp, #8]
   14f4c:	ldr	r3, [r4, #8]
   14f50:	str	r3, [sp, #4]
   14f54:	ldr	r3, [r4, #4]
   14f58:	str	r3, [sp]
   14f5c:	ldr	r3, [r4]
   14f60:	mov	r2, r0
   14f64:	mov	r0, r5
   14f68:	bl	11314 <__fprintf_chk@plt>
   14f6c:	add	sp, sp, #32
   14f70:	pop	{r4, r5, r6, pc}
   14f74:	mov	r2, #5
   14f78:	ldr	r1, [pc, #484]	; 15164 <__assert_fail@plt+0x3d9c>
   14f7c:	mov	r0, #0
   14f80:	bl	11158 <dcgettext@plt>
   14f84:	ldr	r3, [r4, #16]
   14f88:	mov	r1, #1
   14f8c:	str	r3, [sp, #12]
   14f90:	ldr	r3, [r4, #12]
   14f94:	str	r3, [sp, #8]
   14f98:	ldr	r3, [r4, #8]
   14f9c:	str	r3, [sp, #4]
   14fa0:	ldr	r3, [r4, #4]
   14fa4:	str	r3, [sp]
   14fa8:	ldr	r3, [r4]
   14fac:	mov	r2, r0
   14fb0:	mov	r0, r5
   14fb4:	bl	11314 <__fprintf_chk@plt>
   14fb8:	b	14f6c <__assert_fail@plt+0x3ba4>
   14fbc:	mov	r2, #5
   14fc0:	ldr	r1, [pc, #416]	; 15168 <__assert_fail@plt+0x3da0>
   14fc4:	mov	r0, #0
   14fc8:	bl	11158 <dcgettext@plt>
   14fcc:	ldr	r3, [r4, #20]
   14fd0:	mov	r1, #1
   14fd4:	str	r3, [sp, #16]
   14fd8:	ldr	r3, [r4, #16]
   14fdc:	str	r3, [sp, #12]
   14fe0:	ldr	r3, [r4, #12]
   14fe4:	str	r3, [sp, #8]
   14fe8:	ldr	r3, [r4, #8]
   14fec:	str	r3, [sp, #4]
   14ff0:	ldr	r3, [r4, #4]
   14ff4:	str	r3, [sp]
   14ff8:	ldr	r3, [r4]
   14ffc:	mov	r2, r0
   15000:	mov	r0, r5
   15004:	bl	11314 <__fprintf_chk@plt>
   15008:	b	14f6c <__assert_fail@plt+0x3ba4>
   1500c:	mov	r2, #5
   15010:	ldr	r1, [pc, #340]	; 1516c <__assert_fail@plt+0x3da4>
   15014:	mov	r0, #0
   15018:	bl	11158 <dcgettext@plt>
   1501c:	ldr	r3, [r4, #24]
   15020:	mov	r1, #1
   15024:	str	r3, [sp, #20]
   15028:	ldr	r3, [r4, #20]
   1502c:	str	r3, [sp, #16]
   15030:	ldr	r3, [r4, #16]
   15034:	str	r3, [sp, #12]
   15038:	ldr	r3, [r4, #12]
   1503c:	str	r3, [sp, #8]
   15040:	ldr	r3, [r4, #8]
   15044:	str	r3, [sp, #4]
   15048:	ldr	r3, [r4, #4]
   1504c:	str	r3, [sp]
   15050:	ldr	r3, [r4]
   15054:	mov	r2, r0
   15058:	mov	r0, r5
   1505c:	bl	11314 <__fprintf_chk@plt>
   15060:	b	14f6c <__assert_fail@plt+0x3ba4>
   15064:	mov	r2, #5
   15068:	ldr	r1, [pc, #256]	; 15170 <__assert_fail@plt+0x3da8>
   1506c:	mov	r0, #0
   15070:	bl	11158 <dcgettext@plt>
   15074:	ldr	r3, [r4, #28]
   15078:	mov	r1, #1
   1507c:	str	r3, [sp, #24]
   15080:	ldr	r3, [r4, #24]
   15084:	str	r3, [sp, #20]
   15088:	ldr	r3, [r4, #20]
   1508c:	str	r3, [sp, #16]
   15090:	ldr	r3, [r4, #16]
   15094:	str	r3, [sp, #12]
   15098:	ldr	r3, [r4, #12]
   1509c:	str	r3, [sp, #8]
   150a0:	ldr	r3, [r4, #8]
   150a4:	str	r3, [sp, #4]
   150a8:	ldr	r3, [r4, #4]
   150ac:	str	r3, [sp]
   150b0:	ldr	r3, [r4]
   150b4:	mov	r2, r0
   150b8:	mov	r0, r5
   150bc:	bl	11314 <__fprintf_chk@plt>
   150c0:	b	14f6c <__assert_fail@plt+0x3ba4>
   150c4:	ldr	r1, [pc, #168]	; 15174 <__assert_fail@plt+0x3dac>
   150c8:	mov	r2, #5
   150cc:	mov	r0, #0
   150d0:	bl	11158 <dcgettext@plt>
   150d4:	ldr	r3, [r4, #32]
   150d8:	mov	r1, #1
   150dc:	str	r3, [sp, #28]
   150e0:	ldr	r3, [r4, #28]
   150e4:	str	r3, [sp, #24]
   150e8:	ldr	r3, [r4, #24]
   150ec:	str	r3, [sp, #20]
   150f0:	ldr	r3, [r4, #20]
   150f4:	str	r3, [sp, #16]
   150f8:	ldr	r3, [r4, #16]
   150fc:	str	r3, [sp, #12]
   15100:	ldr	r3, [r4, #12]
   15104:	str	r3, [sp, #8]
   15108:	ldr	r3, [r4, #8]
   1510c:	str	r3, [sp, #4]
   15110:	ldr	r3, [r4, #4]
   15114:	str	r3, [sp]
   15118:	ldr	r3, [r4]
   1511c:	mov	r2, r0
   15120:	mov	r0, r5
   15124:	bl	11314 <__fprintf_chk@plt>
   15128:	b	14f6c <__assert_fail@plt+0x3ba4>
   1512c:	mov	r2, #5
   15130:	ldr	r1, [pc, #64]	; 15178 <__assert_fail@plt+0x3db0>
   15134:	b	150cc <__assert_fail@plt+0x3d04>
   15138:	andeq	r7, r1, fp, ror #1
   1513c:	strdeq	r7, [r1], -lr
   15140:	andeq	r0, r0, r6, ror #15
   15144:	andeq	r7, r1, ip, asr #7
   15148:	andeq	r7, r1, r2, lsl #2
   1514c:	andeq	r7, r1, sp, lsr #3
   15150:	strdeq	r7, [r1], -r7	; <UNPREDICTABLE>
   15154:	andeq	r7, r1, pc, asr #3
   15158:	ldrdeq	r7, [r1], -pc	; <UNPREDICTABLE>
   1515c:	strdeq	r7, [r1], -r6
   15160:	andeq	r7, r1, r2, lsl r2
   15164:	andeq	r7, r1, r2, lsr r2
   15168:	andeq	r7, r1, r6, asr r2
   1516c:	andeq	r7, r1, lr, ror r2
   15170:	andeq	r7, r1, sl, lsr #5
   15174:	ldrdeq	r7, [r1], -sl
   15178:	andeq	r7, r1, lr, lsl #6
   1517c:	push	{r0, r1, r4, lr}
   15180:	mov	ip, #0
   15184:	ldr	lr, [sp, #16]
   15188:	ldr	r4, [lr, ip, lsl #2]
   1518c:	cmp	r4, #0
   15190:	bne	151a8 <__assert_fail@plt+0x3de0>
   15194:	str	ip, [sp, #4]
   15198:	str	lr, [sp]
   1519c:	bl	14db0 <__assert_fail@plt+0x39e8>
   151a0:	add	sp, sp, #8
   151a4:	pop	{r4, pc}
   151a8:	add	ip, ip, #1
   151ac:	b	15188 <__assert_fail@plt+0x3dc0>
   151b0:	push	{r4, r5, lr}
   151b4:	sub	sp, sp, #52	; 0x34
   151b8:	mov	ip, #0
   151bc:	ldr	r5, [sp, #64]	; 0x40
   151c0:	add	lr, sp, #8
   151c4:	ldr	r4, [r5, ip, lsl #2]
   151c8:	cmp	r4, #0
   151cc:	str	r4, [lr, ip, lsl #2]
   151d0:	beq	151e0 <__assert_fail@plt+0x3e18>
   151d4:	add	ip, ip, #1
   151d8:	cmp	ip, #10
   151dc:	bne	151c4 <__assert_fail@plt+0x3dfc>
   151e0:	str	ip, [sp, #4]
   151e4:	str	lr, [sp]
   151e8:	bl	14db0 <__assert_fail@plt+0x39e8>
   151ec:	add	sp, sp, #52	; 0x34
   151f0:	pop	{r4, r5, pc}
   151f4:	push	{r3}		; (str r3, [sp, #-4]!)
   151f8:	push	{r0, r1, r2, r3, lr}
   151fc:	add	r3, sp, #24
   15200:	str	r3, [sp, #12]
   15204:	str	r3, [sp]
   15208:	ldr	r3, [sp, #20]
   1520c:	bl	151b0 <__assert_fail@plt+0x3de8>
   15210:	add	sp, sp, #16
   15214:	pop	{lr}		; (ldr lr, [sp], #4)
   15218:	add	sp, sp, #4
   1521c:	bx	lr
   15220:	ldr	r3, [pc, #116]	; 1529c <__assert_fail@plt+0x3ed4>
   15224:	push	{r4, lr}
   15228:	mov	r0, #10
   1522c:	ldr	r1, [r3]
   15230:	bl	1114c <fputc_unlocked@plt>
   15234:	mov	r2, #5
   15238:	ldr	r1, [pc, #96]	; 152a0 <__assert_fail@plt+0x3ed8>
   1523c:	mov	r0, #0
   15240:	bl	11158 <dcgettext@plt>
   15244:	ldr	r2, [pc, #88]	; 152a4 <__assert_fail@plt+0x3edc>
   15248:	mov	r1, r0
   1524c:	mov	r0, #1
   15250:	bl	112fc <__printf_chk@plt>
   15254:	mov	r2, #5
   15258:	ldr	r1, [pc, #72]	; 152a8 <__assert_fail@plt+0x3ee0>
   1525c:	mov	r0, #0
   15260:	bl	11158 <dcgettext@plt>
   15264:	ldr	r3, [pc, #64]	; 152ac <__assert_fail@plt+0x3ee4>
   15268:	ldr	r2, [pc, #64]	; 152b0 <__assert_fail@plt+0x3ee8>
   1526c:	mov	r1, r0
   15270:	mov	r0, #1
   15274:	bl	112fc <__printf_chk@plt>
   15278:	mov	r2, #5
   1527c:	ldr	r1, [pc, #48]	; 152b4 <__assert_fail@plt+0x3eec>
   15280:	mov	r0, #0
   15284:	bl	11158 <dcgettext@plt>
   15288:	ldr	r2, [pc, #40]	; 152b8 <__assert_fail@plt+0x3ef0>
   1528c:	pop	{r4, lr}
   15290:	mov	r1, r0
   15294:	mov	r0, #1
   15298:	b	112fc <__printf_chk@plt>
   1529c:	muleq	r2, r4, r1
   152a0:	andeq	r7, r1, sl, asr #6
   152a4:	andeq	r7, r1, lr, asr r3
   152a8:	andeq	r7, r1, r4, ror r3
   152ac:	ldrdeq	r6, [r1], -r3
   152b0:	strdeq	r6, [r1], -fp
   152b4:	andeq	r7, r1, r8, lsl #7
   152b8:	andeq	r7, r1, pc, lsr #7
   152bc:	push	{r4, lr}
   152c0:	bl	157d8 <__assert_fail@plt+0x4410>
   152c4:	cmp	r0, #0
   152c8:	popne	{r4, pc}
   152cc:	bl	15750 <__assert_fail@plt+0x4388>
   152d0:	push	{r4, lr}
   152d4:	bl	157d8 <__assert_fail@plt+0x4410>
   152d8:	cmp	r0, #0
   152dc:	popne	{r4, pc}
   152e0:	bl	15750 <__assert_fail@plt+0x4388>
   152e4:	b	152bc <__assert_fail@plt+0x3ef4>
   152e8:	push	{r4, r5, r6, lr}
   152ec:	mov	r5, r0
   152f0:	mov	r4, r1
   152f4:	bl	15818 <__assert_fail@plt+0x4450>
   152f8:	cmp	r0, #0
   152fc:	popne	{r4, r5, r6, pc}
   15300:	adds	r4, r4, #0
   15304:	movne	r4, #1
   15308:	cmp	r5, #0
   1530c:	orreq	r4, r4, #1
   15310:	cmp	r4, #0
   15314:	popeq	{r4, r5, r6, pc}
   15318:	bl	15750 <__assert_fail@plt+0x4388>
   1531c:	push	{r4, lr}
   15320:	cmp	r1, #0
   15324:	orreq	r1, r1, #1
   15328:	bl	15818 <__assert_fail@plt+0x4450>
   1532c:	cmp	r0, #0
   15330:	popne	{r4, pc}
   15334:	bl	15750 <__assert_fail@plt+0x4388>
   15338:	push	{r4, r5, r6, lr}
   1533c:	mov	r6, r0
   15340:	mov	r5, r1
   15344:	mov	r4, r2
   15348:	bl	15cb0 <_obstack_memory_used@@Base+0x28>
   1534c:	cmp	r0, #0
   15350:	popne	{r4, r5, r6, pc}
   15354:	cmp	r6, #0
   15358:	beq	15368 <__assert_fail@plt+0x3fa0>
   1535c:	cmp	r5, #0
   15360:	cmpne	r4, #0
   15364:	popeq	{r4, r5, r6, pc}
   15368:	bl	15750 <__assert_fail@plt+0x4388>
   1536c:	b	15338 <__assert_fail@plt+0x3f70>
   15370:	cmp	r2, #0
   15374:	cmpne	r1, #0
   15378:	moveq	r2, #1
   1537c:	moveq	r1, r2
   15380:	push	{r4, lr}
   15384:	bl	15cb0 <_obstack_memory_used@@Base+0x28>
   15388:	cmp	r0, #0
   1538c:	popne	{r4, pc}
   15390:	bl	15750 <__assert_fail@plt+0x4388>
   15394:	mov	r2, r1
   15398:	mov	r1, r0
   1539c:	mov	r0, #0
   153a0:	b	15338 <__assert_fail@plt+0x3f70>
   153a4:	mov	r2, r1
   153a8:	mov	r1, r0
   153ac:	mov	r0, #0
   153b0:	b	15370 <__assert_fail@plt+0x3fa8>
   153b4:	push	{r4, r5, r6, r7, r8, lr}
   153b8:	subs	r7, r0, #0
   153bc:	mov	r5, r1
   153c0:	mov	r6, r2
   153c4:	ldr	r4, [r1]
   153c8:	bne	15404 <__assert_fail@plt+0x403c>
   153cc:	cmp	r4, #0
   153d0:	bne	153ec <__assert_fail@plt+0x4024>
   153d4:	mov	r1, r2
   153d8:	mov	r0, #64	; 0x40
   153dc:	bl	15d80 <_obstack_memory_used@@Base+0xf8>
   153e0:	cmp	r0, #0
   153e4:	movne	r4, r0
   153e8:	addeq	r4, r0, #1
   153ec:	mov	r2, r6
   153f0:	mov	r1, r4
   153f4:	mov	r0, r7
   153f8:	bl	15338 <__assert_fail@plt+0x3f70>
   153fc:	str	r4, [r5]
   15400:	pop	{r4, r5, r6, r7, r8, pc}
   15404:	lsr	r2, r4, #1
   15408:	add	r3, r2, #1
   1540c:	mvn	r3, r3
   15410:	cmp	r4, r3
   15414:	addls	r4, r4, #1
   15418:	addls	r4, r4, r2
   1541c:	bls	153ec <__assert_fail@plt+0x4024>
   15420:	bl	15750 <__assert_fail@plt+0x4388>
   15424:	mov	r2, #1
   15428:	b	153b4 <__assert_fail@plt+0x3fec>
   1542c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15430:	mov	sl, r0
   15434:	ldr	r8, [r1]
   15438:	mov	fp, r1
   1543c:	mov	r5, r2
   15440:	asrs	r4, r8, #1
   15444:	mov	r9, r3
   15448:	ldr	r7, [sp, #48]	; 0x30
   1544c:	bpl	154e8 <__assert_fail@plt+0x4120>
   15450:	rsb	r2, r4, #-2147483648	; 0x80000000
   15454:	cmp	r8, r2
   15458:	movge	r2, #0
   1545c:	movlt	r2, #1
   15460:	mvn	r3, r9
   15464:	cmp	r2, #0
   15468:	lsr	r3, r3, #31
   1546c:	addeq	r4, r4, r8
   15470:	mvnne	r4, #-2147483648	; 0x80000000
   15474:	mov	r0, r3
   15478:	cmp	r9, r4
   1547c:	movge	r0, #0
   15480:	andlt	r0, r0, #1
   15484:	cmp	r0, #0
   15488:	str	r3, [sp, #4]
   1548c:	bne	1565c <__assert_fail@plt+0x4294>
   15490:	cmp	r7, #0
   15494:	bge	155a8 <__assert_fail@plt+0x41e0>
   15498:	cmp	r4, #0
   1549c:	bge	15500 <__assert_fail@plt+0x4138>
   154a0:	mov	r1, r7
   154a4:	mvn	r0, #-2147483648	; 0x80000000
   154a8:	bl	15f8c <_obstack_memory_used@@Base+0x304>
   154ac:	cmp	r0, r4
   154b0:	movle	r0, #0
   154b4:	movgt	r0, #1
   154b8:	cmp	r0, #0
   154bc:	mvnne	r6, #-2147483648	; 0x80000000
   154c0:	beq	15510 <__assert_fail@plt+0x4148>
   154c4:	mov	r1, r7
   154c8:	mov	r0, r6
   154cc:	bl	15f8c <_obstack_memory_used@@Base+0x304>
   154d0:	mov	r1, r7
   154d4:	mov	r4, r0
   154d8:	mov	r0, r6
   154dc:	bl	161ac <_obstack_memory_used@@Base+0x524>
   154e0:	sub	r1, r6, r1
   154e4:	b	15520 <__assert_fail@plt+0x4158>
   154e8:	mvn	r2, #-2147483648	; 0x80000000
   154ec:	sub	r2, r2, r4
   154f0:	cmp	r8, r2
   154f4:	movle	r2, #0
   154f8:	movgt	r2, #1
   154fc:	b	15460 <__assert_fail@plt+0x4098>
   15500:	cmn	r7, #1
   15504:	movne	r1, r7
   15508:	movne	r0, #-2147483648	; 0x80000000
   1550c:	bne	15674 <__assert_fail@plt+0x42ac>
   15510:	mul	r1, r7, r4
   15514:	cmp	r1, #63	; 0x3f
   15518:	movle	r6, #64	; 0x40
   1551c:	ble	154c4 <__assert_fail@plt+0x40fc>
   15520:	cmp	sl, #0
   15524:	sub	r2, r4, r8
   15528:	streq	sl, [fp]
   1552c:	cmp	r2, r5
   15530:	bge	15604 <__assert_fail@plt+0x423c>
   15534:	cmp	r5, #0
   15538:	bge	155d0 <__assert_fail@plt+0x4208>
   1553c:	rsb	r2, r5, #-2147483648	; 0x80000000
   15540:	cmp	r8, r2
   15544:	movge	r2, #0
   15548:	movlt	r2, #1
   1554c:	cmp	r2, #0
   15550:	bne	155a4 <__assert_fail@plt+0x41dc>
   15554:	ldr	r0, [sp, #4]
   15558:	add	r5, r8, r5
   1555c:	cmp	r9, r5
   15560:	movge	r0, #0
   15564:	andlt	r0, r0, #1
   15568:	cmp	r0, #0
   1556c:	mov	r4, r5
   15570:	bne	155a4 <__assert_fail@plt+0x41dc>
   15574:	cmp	r7, #0
   15578:	bge	15618 <__assert_fail@plt+0x4250>
   1557c:	cmp	r5, #0
   15580:	bge	155f0 <__assert_fail@plt+0x4228>
   15584:	mov	r1, r7
   15588:	mvn	r0, #-2147483648	; 0x80000000
   1558c:	bl	15f8c <_obstack_memory_used@@Base+0x304>
   15590:	cmp	r5, r0
   15594:	movge	r0, #0
   15598:	movlt	r0, #1
   1559c:	cmp	r0, #0
   155a0:	beq	15600 <__assert_fail@plt+0x4238>
   155a4:	bl	15750 <__assert_fail@plt+0x4388>
   155a8:	beq	15510 <__assert_fail@plt+0x4148>
   155ac:	cmp	r4, #0
   155b0:	bge	1566c <__assert_fail@plt+0x42a4>
   155b4:	cmn	r4, #1
   155b8:	beq	15510 <__assert_fail@plt+0x4148>
   155bc:	mov	r1, r4
   155c0:	mov	r0, #-2147483648	; 0x80000000
   155c4:	bl	15f8c <_obstack_memory_used@@Base+0x304>
   155c8:	cmp	r7, r0
   155cc:	b	154b0 <__assert_fail@plt+0x40e8>
   155d0:	cmp	r8, #0
   155d4:	blt	15554 <__assert_fail@plt+0x418c>
   155d8:	mvn	r2, #-2147483648	; 0x80000000
   155dc:	sub	r2, r2, r5
   155e0:	cmp	r8, r2
   155e4:	movle	r2, #0
   155e8:	movgt	r2, #1
   155ec:	b	1554c <__assert_fail@plt+0x4184>
   155f0:	cmn	r7, #1
   155f4:	movne	r1, r7
   155f8:	movne	r0, #-2147483648	; 0x80000000
   155fc:	bne	15650 <__assert_fail@plt+0x4288>
   15600:	mul	r1, r5, r7
   15604:	mov	r0, sl
   15608:	bl	152e8 <__assert_fail@plt+0x3f20>
   1560c:	str	r4, [fp]
   15610:	add	sp, sp, #12
   15614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15618:	beq	15600 <__assert_fail@plt+0x4238>
   1561c:	cmp	r5, #0
   15620:	movge	r1, r7
   15624:	mvnge	r0, #-2147483648	; 0x80000000
   15628:	bge	15650 <__assert_fail@plt+0x4288>
   1562c:	cmn	r5, #1
   15630:	beq	15600 <__assert_fail@plt+0x4238>
   15634:	mov	r1, r5
   15638:	mov	r0, #-2147483648	; 0x80000000
   1563c:	bl	15f8c <_obstack_memory_used@@Base+0x304>
   15640:	cmp	r7, r0
   15644:	movle	r0, #0
   15648:	movgt	r0, #1
   1564c:	b	1559c <__assert_fail@plt+0x41d4>
   15650:	bl	15f8c <_obstack_memory_used@@Base+0x304>
   15654:	cmp	r5, r0
   15658:	b	15644 <__assert_fail@plt+0x427c>
   1565c:	cmp	r7, #0
   15660:	mov	r4, r9
   15664:	blt	15500 <__assert_fail@plt+0x4138>
   15668:	beq	15510 <__assert_fail@plt+0x4148>
   1566c:	mov	r1, r7
   15670:	mvn	r0, #-2147483648	; 0x80000000
   15674:	bl	15f8c <_obstack_memory_used@@Base+0x304>
   15678:	cmp	r0, r4
   1567c:	movge	r0, #0
   15680:	movlt	r0, #1
   15684:	b	154b8 <__assert_fail@plt+0x40f0>
   15688:	push	{r4, lr}
   1568c:	bl	15790 <__assert_fail@plt+0x43c8>
   15690:	cmp	r0, #0
   15694:	popne	{r4, pc}
   15698:	bl	15750 <__assert_fail@plt+0x4388>
   1569c:	mov	r1, #1
   156a0:	b	15688 <__assert_fail@plt+0x42c0>
   156a4:	push	{r4, lr}
   156a8:	bl	15790 <__assert_fail@plt+0x43c8>
   156ac:	cmp	r0, #0
   156b0:	popne	{r4, pc}
   156b4:	bl	15750 <__assert_fail@plt+0x4388>
   156b8:	mov	r1, #1
   156bc:	b	156a4 <__assert_fail@plt+0x42dc>
   156c0:	push	{r4, r5, r6, lr}
   156c4:	mov	r4, r1
   156c8:	mov	r5, r0
   156cc:	mov	r0, r1
   156d0:	bl	152bc <__assert_fail@plt+0x3ef4>
   156d4:	mov	r2, r4
   156d8:	mov	r1, r5
   156dc:	pop	{r4, r5, r6, lr}
   156e0:	b	11128 <memcpy@plt>
   156e4:	push	{r4, r5, r6, lr}
   156e8:	mov	r4, r1
   156ec:	mov	r5, r0
   156f0:	mov	r0, r1
   156f4:	bl	152d0 <__assert_fail@plt+0x3f08>
   156f8:	mov	r2, r4
   156fc:	mov	r1, r5
   15700:	pop	{r4, r5, r6, lr}
   15704:	b	11128 <memcpy@plt>
   15708:	push	{r4, r5, r6, lr}
   1570c:	mov	r5, r0
   15710:	add	r0, r1, #1
   15714:	mov	r4, r1
   15718:	bl	152d0 <__assert_fail@plt+0x3f08>
   1571c:	mov	r2, #0
   15720:	mov	r1, r5
   15724:	strb	r2, [r0, r4]
   15728:	mov	r2, r4
   1572c:	pop	{r4, r5, r6, lr}
   15730:	b	11128 <memcpy@plt>
   15734:	push	{r4, lr}
   15738:	mov	r4, r0
   1573c:	bl	11290 <strlen@plt>
   15740:	add	r1, r0, #1
   15744:	mov	r0, r4
   15748:	pop	{r4, lr}
   1574c:	b	156c0 <__assert_fail@plt+0x42f8>
   15750:	ldr	r3, [pc, #44]	; 15784 <__assert_fail@plt+0x43bc>
   15754:	push	{r4, lr}
   15758:	mov	r2, #5
   1575c:	ldr	r1, [pc, #36]	; 15788 <__assert_fail@plt+0x43c0>
   15760:	mov	r0, #0
   15764:	ldr	r4, [r3]
   15768:	bl	11158 <dcgettext@plt>
   1576c:	ldr	r2, [pc, #24]	; 1578c <__assert_fail@plt+0x43c4>
   15770:	mov	r1, #0
   15774:	mov	r3, r0
   15778:	mov	r0, r4
   1577c:	bl	111f4 <error@plt>
   15780:	bl	113a4 <abort@plt>
   15784:	andeq	r8, r2, r0, lsr r1
   15788:	strdeq	r7, [r1], -fp
   1578c:	ldrdeq	r6, [r1], -r1
   15790:	cmp	r1, #0
   15794:	cmpne	r0, #0
   15798:	moveq	r1, #1
   1579c:	moveq	r0, r1
   157a0:	umull	r2, r3, r0, r1
   157a4:	adds	r3, r3, #0
   157a8:	movne	r3, #1
   157ac:	cmp	r2, #0
   157b0:	blt	157c0 <__assert_fail@plt+0x43f8>
   157b4:	cmp	r3, #0
   157b8:	bne	157c0 <__assert_fail@plt+0x43f8>
   157bc:	b	11098 <calloc@plt>
   157c0:	push	{r4, lr}
   157c4:	bl	112b4 <__errno_location@plt>
   157c8:	mov	r3, #12
   157cc:	str	r3, [r0]
   157d0:	mov	r0, #0
   157d4:	pop	{r4, pc}
   157d8:	cmp	r0, #0
   157dc:	mov	r3, #0
   157e0:	moveq	r0, #1
   157e4:	adds	r3, r3, #0
   157e8:	movne	r3, #1
   157ec:	cmp	r0, #0
   157f0:	blt	15800 <__assert_fail@plt+0x4438>
   157f4:	cmp	r3, #0
   157f8:	bne	15800 <__assert_fail@plt+0x4438>
   157fc:	b	11224 <malloc@plt>
   15800:	push	{r4, lr}
   15804:	bl	112b4 <__errno_location@plt>
   15808:	mov	r3, #12
   1580c:	str	r3, [r0]
   15810:	mov	r0, #0
   15814:	pop	{r4, pc}
   15818:	cmp	r0, #0
   1581c:	push	{r4, lr}
   15820:	mov	r4, r1
   15824:	bne	15834 <__assert_fail@plt+0x446c>
   15828:	mov	r0, r1
   1582c:	pop	{r4, lr}
   15830:	b	157d8 <__assert_fail@plt+0x4410>
   15834:	cmp	r1, #0
   15838:	bne	15848 <__assert_fail@plt+0x4480>
   1583c:	bl	13094 <__assert_fail@plt+0x1ccc>
   15840:	mov	r0, #0
   15844:	pop	{r4, pc}
   15848:	cmp	r1, #0
   1584c:	blt	1585c <__assert_fail@plt+0x4494>
   15850:	mov	r3, #0
   15854:	cmp	r3, r3
   15858:	beq	1586c <__assert_fail@plt+0x44a4>
   1585c:	bl	112b4 <__errno_location@plt>
   15860:	mov	r3, #12
   15864:	str	r3, [r0]
   15868:	b	15840 <__assert_fail@plt+0x4478>
   1586c:	pop	{r4, lr}
   15870:	b	11170 <realloc@plt>
   15874:	push	{r4, r5, r6, lr}
   15878:	mov	r4, r0
   1587c:	bl	111d0 <__fpending@plt>
   15880:	mov	r5, r0
   15884:	mov	r0, r4
   15888:	bl	111dc <ferror_unlocked@plt>
   1588c:	mov	r6, r0
   15890:	mov	r0, r4
   15894:	bl	12f9c <__assert_fail@plt+0x1bd4>
   15898:	cmp	r6, #0
   1589c:	mov	r4, r0
   158a0:	bne	158cc <__assert_fail@plt+0x4504>
   158a4:	cmp	r0, #0
   158a8:	beq	158c4 <__assert_fail@plt+0x44fc>
   158ac:	cmp	r5, #0
   158b0:	bne	158dc <__assert_fail@plt+0x4514>
   158b4:	bl	112b4 <__errno_location@plt>
   158b8:	ldr	r4, [r0]
   158bc:	subs	r4, r4, #9
   158c0:	mvnne	r4, #0
   158c4:	mov	r0, r4
   158c8:	pop	{r4, r5, r6, pc}
   158cc:	cmp	r0, #0
   158d0:	bne	158dc <__assert_fail@plt+0x4514>
   158d4:	bl	112b4 <__errno_location@plt>
   158d8:	str	r4, [r0]
   158dc:	mvn	r4, #0
   158e0:	b	158c4 <__assert_fail@plt+0x44fc>
   158e4:	push	{lr}		; (str lr, [sp, #-4]!)
   158e8:	sub	sp, sp, #268	; 0x10c
   158ec:	ldr	r2, [pc, #64]	; 15934 <__assert_fail@plt+0x456c>
   158f0:	add	r1, sp, #4
   158f4:	bl	15cfc <_obstack_memory_used@@Base+0x74>
   158f8:	cmp	r0, #0
   158fc:	movne	r0, #0
   15900:	bne	1592c <__assert_fail@plt+0x4564>
   15904:	ldr	r1, [pc, #44]	; 15938 <__assert_fail@plt+0x4570>
   15908:	add	r0, sp, #4
   1590c:	bl	110bc <strcmp@plt>
   15910:	cmp	r0, #0
   15914:	beq	1592c <__assert_fail@plt+0x4564>
   15918:	ldr	r1, [pc, #28]	; 1593c <__assert_fail@plt+0x4574>
   1591c:	add	r0, sp, #4
   15920:	bl	110bc <strcmp@plt>
   15924:	adds	r0, r0, #0
   15928:	movne	r0, #1
   1592c:	add	sp, sp, #268	; 0x10c
   15930:	pop	{pc}		; (ldr pc, [sp], #4)
   15934:	andeq	r0, r0, r1, lsl #2
   15938:	andeq	r7, r1, ip, lsl #8
   1593c:	andeq	r7, r1, lr, lsl #8
   15940:	push	{r4, lr}
   15944:	mov	r0, #14
   15948:	bl	11350 <nl_langinfo@plt>
   1594c:	ldr	r3, [pc, #24]	; 1596c <__assert_fail@plt+0x45a4>
   15950:	cmp	r0, #0
   15954:	moveq	r0, r3
   15958:	ldr	r3, [pc, #16]	; 15970 <__assert_fail@plt+0x45a8>
   1595c:	ldrb	r2, [r0]
   15960:	cmp	r2, #0
   15964:	moveq	r0, r3
   15968:	pop	{r4, pc}
   1596c:	andeq	r6, r1, r1, lsr #27
   15970:	andeq	r7, r1, r4, lsl r4
   15974:	ldr	r3, [pc, #52]	; 159b0 <__assert_fail@plt+0x45e8>
   15978:	push	{r4, lr}
   1597c:	mov	r2, #5
   15980:	ldr	r1, [pc, #44]	; 159b4 <__assert_fail@plt+0x45ec>
   15984:	mov	r0, #0
   15988:	ldr	r4, [r3]
   1598c:	bl	11158 <dcgettext@plt>
   15990:	ldr	r2, [pc, #32]	; 159b8 <__assert_fail@plt+0x45f0>
   15994:	mov	r1, #1
   15998:	mov	r3, r0
   1599c:	mov	r0, r4
   159a0:	bl	11314 <__fprintf_chk@plt>
   159a4:	ldr	r3, [pc, #16]	; 159bc <__assert_fail@plt+0x45f4>
   159a8:	ldr	r0, [r3]
   159ac:	bl	1126c <exit@plt>
   159b0:	andeq	r8, r2, r8, lsl #3
   159b4:	strdeq	r7, [r1], -fp
   159b8:	strdeq	r7, [r1], -r3
   159bc:	andeq	r8, r2, r0, lsr r1
   159c0:	mov	r3, r0
   159c4:	mov	r0, r1
   159c8:	ldrb	r2, [r3, #40]	; 0x28
   159cc:	tst	r2, #1
   159d0:	beq	159e0 <__assert_fail@plt+0x4618>
   159d4:	ldr	r2, [r3, #28]
   159d8:	ldr	r0, [r3, #36]	; 0x24
   159dc:	bx	r2
   159e0:	ldr	r3, [r3, #28]
   159e4:	bx	r3
   159e8:	mov	r3, r0
   159ec:	mov	r0, r1
   159f0:	ldrb	r2, [r3, #40]	; 0x28
   159f4:	tst	r2, #1
   159f8:	beq	15a08 <__assert_fail@plt+0x4640>
   159fc:	ldr	r2, [r3, #32]
   15a00:	ldr	r0, [r3, #36]	; 0x24
   15a04:	bx	r2
   15a08:	ldr	r3, [r3, #32]
   15a0c:	bx	r3
   15a10:	cmp	r2, #0
   15a14:	ldr	r3, [pc, #128]	; 15a9c <__assert_fail@plt+0x46d4>
   15a18:	push	{r4, r5, r6, lr}
   15a1c:	movne	r5, r2
   15a20:	moveq	r5, #8
   15a24:	cmp	r1, #0
   15a28:	moveq	r1, r3
   15a2c:	sub	r6, r5, #1
   15a30:	str	r1, [r0]
   15a34:	str	r6, [r0, #24]
   15a38:	mov	r4, r0
   15a3c:	bl	159c0 <__assert_fail@plt+0x45f8>
   15a40:	cmp	r0, #0
   15a44:	str	r0, [r4, #4]
   15a48:	bne	15a58 <__assert_fail@plt+0x4690>
   15a4c:	ldr	r3, [pc, #76]	; 15aa0 <__assert_fail@plt+0x46d8>
   15a50:	ldr	r3, [r3]
   15a54:	blx	r3
   15a58:	add	r3, r0, #8
   15a5c:	add	r3, r3, r6
   15a60:	rsb	r2, r5, #0
   15a64:	and	r2, r2, r3
   15a68:	ldr	r3, [r4]
   15a6c:	str	r2, [r4, #8]
   15a70:	add	r3, r0, r3
   15a74:	str	r2, [r4, #12]
   15a78:	str	r3, [r0]
   15a7c:	str	r3, [r4, #16]
   15a80:	mov	r3, #0
   15a84:	str	r3, [r0, #4]
   15a88:	ldrb	r3, [r4, #40]	; 0x28
   15a8c:	mov	r0, #1
   15a90:	and	r3, r3, #249	; 0xf9
   15a94:	strb	r3, [r4, #40]	; 0x28
   15a98:	pop	{r4, r5, r6, pc}
   15a9c:	andeq	r0, r0, r8, ror #31
   15aa0:	andeq	r8, r2, r4, ror r1

00015aa4 <_obstack_begin@@Base>:
   15aa4:	str	r3, [r0, #28]
   15aa8:	ldr	r3, [sp]
   15aac:	str	r3, [r0, #32]
   15ab0:	ldrb	r3, [r0, #40]	; 0x28
   15ab4:	bic	r3, r3, #1
   15ab8:	strb	r3, [r0, #40]	; 0x28
   15abc:	b	15a10 <__assert_fail@plt+0x4648>

00015ac0 <_obstack_begin_1@@Base>:
   15ac0:	str	r3, [r0, #28]
   15ac4:	ldr	r3, [sp]
   15ac8:	str	r3, [r0, #32]
   15acc:	ldr	r3, [sp, #4]
   15ad0:	str	r3, [r0, #36]	; 0x24
   15ad4:	ldrb	r3, [r0, #40]	; 0x28
   15ad8:	orr	r3, r3, #1
   15adc:	strb	r3, [r0, #40]	; 0x28
   15ae0:	b	15a10 <__assert_fail@plt+0x4648>

00015ae4 <_obstack_newchunk@@Base>:
   15ae4:	push	{r4, r5, r6, r7, r8, lr}
   15ae8:	ldr	r3, [r0, #8]
   15aec:	ldr	r5, [r0, #12]
   15af0:	sub	r6, r5, r3
   15af4:	ldr	r3, [r0, #24]
   15af8:	add	r1, r6, r1
   15afc:	adds	r3, r1, r3
   15b00:	movcc	r2, #1
   15b04:	movcs	r2, #0
   15b08:	cmp	r6, r1
   15b0c:	movhi	r1, #0
   15b10:	andls	r1, r2, #1
   15b14:	cmp	r1, #0
   15b18:	bne	15b28 <_obstack_newchunk@@Base+0x44>
   15b1c:	ldr	r3, [pc, #196]	; 15be8 <_obstack_newchunk@@Base+0x104>
   15b20:	ldr	r3, [r3]
   15b24:	blx	r3
   15b28:	ldr	r2, [r0]
   15b2c:	add	r5, r3, r6, lsr #3
   15b30:	cmp	r3, r2
   15b34:	add	r5, r5, #100	; 0x64
   15b38:	movcc	r3, r2
   15b3c:	cmp	r3, r5
   15b40:	movcs	r5, r3
   15b44:	mov	r1, r5
   15b48:	mov	r4, r0
   15b4c:	ldr	r8, [r0, #4]
   15b50:	bl	159c0 <__assert_fail@plt+0x45f8>
   15b54:	subs	r7, r0, #0
   15b58:	beq	15b1c <_obstack_newchunk@@Base+0x38>
   15b5c:	mov	r3, r7
   15b60:	add	r5, r7, r5
   15b64:	str	r7, [r4, #4]
   15b68:	str	r8, [r7, #4]
   15b6c:	str	r5, [r4, #16]
   15b70:	str	r5, [r3], #8
   15b74:	ldr	r5, [r4, #24]
   15b78:	mov	r2, r6
   15b7c:	add	r3, r3, r5
   15b80:	bic	r5, r3, r5
   15b84:	ldr	r1, [r4, #8]
   15b88:	mov	r0, r5
   15b8c:	bl	11128 <memcpy@plt>
   15b90:	ldrb	r3, [r4, #40]	; 0x28
   15b94:	tst	r3, #2
   15b98:	bne	15bcc <_obstack_newchunk@@Base+0xe8>
   15b9c:	ldr	r2, [r4, #24]
   15ba0:	add	r3, r8, #8
   15ba4:	add	r3, r3, r2
   15ba8:	bic	r3, r3, r2
   15bac:	ldr	r2, [r4, #8]
   15bb0:	cmp	r2, r3
   15bb4:	bne	15bcc <_obstack_newchunk@@Base+0xe8>
   15bb8:	ldr	r3, [r8, #4]
   15bbc:	mov	r1, r8
   15bc0:	str	r3, [r7, #4]
   15bc4:	mov	r0, r4
   15bc8:	bl	159e8 <__assert_fail@plt+0x4620>
   15bcc:	ldrb	r3, [r4, #40]	; 0x28
   15bd0:	str	r5, [r4, #8]
   15bd4:	add	r5, r5, r6
   15bd8:	bic	r3, r3, #2
   15bdc:	str	r5, [r4, #12]
   15be0:	strb	r3, [r4, #40]	; 0x28
   15be4:	pop	{r4, r5, r6, r7, r8, pc}
   15be8:	andeq	r8, r2, r4, ror r1

00015bec <_obstack_allocated_p@@Base>:
   15bec:	ldr	r0, [r0, #4]
   15bf0:	cmp	r0, #0
   15bf4:	beq	15c0c <_obstack_allocated_p@@Base+0x20>
   15bf8:	cmp	r0, r1
   15bfc:	bcs	15bec <_obstack_allocated_p@@Base>
   15c00:	ldr	r3, [r0]
   15c04:	cmp	r1, r3
   15c08:	bhi	15bec <_obstack_allocated_p@@Base>
   15c0c:	adds	r0, r0, #0
   15c10:	movne	r0, #1
   15c14:	bx	lr

00015c18 <_obstack_free@@Base>:
   15c18:	push	{r4, r5, r6, lr}
   15c1c:	mov	r5, r1
   15c20:	ldr	r1, [r0, #4]
   15c24:	mov	r4, r0
   15c28:	cmp	r1, #0
   15c2c:	beq	15c7c <_obstack_free@@Base+0x64>
   15c30:	cmp	r1, r5
   15c34:	bcs	15c58 <_obstack_free@@Base+0x40>
   15c38:	ldr	r3, [r1]
   15c3c:	cmp	r5, r3
   15c40:	bhi	15c58 <_obstack_free@@Base+0x40>
   15c44:	str	r5, [r4, #12]
   15c48:	str	r5, [r4, #8]
   15c4c:	str	r3, [r4, #16]
   15c50:	str	r1, [r4, #4]
   15c54:	pop	{r4, r5, r6, pc}
   15c58:	mov	r0, r4
   15c5c:	ldr	r6, [r1, #4]
   15c60:	bl	159e8 <__assert_fail@plt+0x4620>
   15c64:	ldrb	r3, [r4, #40]	; 0x28
   15c68:	mov	r1, r6
   15c6c:	orr	r3, r3, #2
   15c70:	strb	r3, [r4, #40]	; 0x28
   15c74:	b	15c28 <_obstack_free@@Base+0x10>
   15c78:	bl	113a4 <abort@plt>
   15c7c:	cmp	r5, #0
   15c80:	bne	15c78 <_obstack_free@@Base+0x60>
   15c84:	pop	{r4, r5, r6, pc}

00015c88 <_obstack_memory_used@@Base>:
   15c88:	ldr	r3, [r0, #4]
   15c8c:	mov	r0, #0
   15c90:	cmp	r3, #0
   15c94:	bne	15c9c <_obstack_memory_used@@Base+0x14>
   15c98:	bx	lr
   15c9c:	ldr	r2, [r3]
   15ca0:	sub	r2, r2, r3
   15ca4:	add	r0, r0, r2
   15ca8:	ldr	r3, [r3, #4]
   15cac:	b	15c90 <_obstack_memory_used@@Base+0x8>
   15cb0:	push	{r4, r5, r6, lr}
   15cb4:	subs	r4, r2, #0
   15cb8:	mov	r6, r0
   15cbc:	mov	r5, r1
   15cc0:	beq	15cd8 <_obstack_memory_used@@Base+0x50>
   15cc4:	mov	r1, r4
   15cc8:	mvn	r0, #0
   15ccc:	bl	15d80 <_obstack_memory_used@@Base+0xf8>
   15cd0:	cmp	r0, r5
   15cd4:	bcc	15ce8 <_obstack_memory_used@@Base+0x60>
   15cd8:	mul	r1, r5, r4
   15cdc:	mov	r0, r6
   15ce0:	pop	{r4, r5, r6, lr}
   15ce4:	b	15818 <__assert_fail@plt+0x4450>
   15ce8:	bl	112b4 <__errno_location@plt>
   15cec:	mov	r3, #12
   15cf0:	str	r3, [r0]
   15cf4:	mov	r0, #0
   15cf8:	pop	{r4, r5, r6, pc}
   15cfc:	push	{r4, r5, r6, lr}
   15d00:	mov	r5, r1
   15d04:	mov	r1, #0
   15d08:	mov	r4, r2
   15d0c:	bl	11338 <setlocale@plt>
   15d10:	subs	r6, r0, #0
   15d14:	bne	15d28 <_obstack_memory_used@@Base+0xa0>
   15d18:	cmp	r4, #0
   15d1c:	strbne	r6, [r5]
   15d20:	mov	r0, #22
   15d24:	pop	{r4, r5, r6, pc}
   15d28:	bl	11290 <strlen@plt>
   15d2c:	cmp	r4, r0
   15d30:	bls	15d4c <_obstack_memory_used@@Base+0xc4>
   15d34:	add	r2, r0, #1
   15d38:	mov	r1, r6
   15d3c:	mov	r0, r5
   15d40:	bl	11128 <memcpy@plt>
   15d44:	mov	r0, #0
   15d48:	pop	{r4, r5, r6, pc}
   15d4c:	cmp	r4, #0
   15d50:	beq	15d70 <_obstack_memory_used@@Base+0xe8>
   15d54:	sub	r4, r4, #1
   15d58:	mov	r2, r4
   15d5c:	mov	r1, r6
   15d60:	mov	r0, r5
   15d64:	bl	11128 <memcpy@plt>
   15d68:	mov	r3, #0
   15d6c:	strb	r3, [r5, r4]
   15d70:	mov	r0, #34	; 0x22
   15d74:	pop	{r4, r5, r6, pc}
   15d78:	mov	r1, #0
   15d7c:	b	11338 <setlocale@plt>
   15d80:	subs	r2, r1, #1
   15d84:	bxeq	lr
   15d88:	bcc	15f60 <_obstack_memory_used@@Base+0x2d8>
   15d8c:	cmp	r0, r1
   15d90:	bls	15f44 <_obstack_memory_used@@Base+0x2bc>
   15d94:	tst	r1, r2
   15d98:	beq	15f50 <_obstack_memory_used@@Base+0x2c8>
   15d9c:	clz	r3, r0
   15da0:	clz	r2, r1
   15da4:	sub	r3, r2, r3
   15da8:	rsbs	r3, r3, #31
   15dac:	addne	r3, r3, r3, lsl #1
   15db0:	mov	r2, #0
   15db4:	addne	pc, pc, r3, lsl #2
   15db8:	nop			; (mov r0, r0)
   15dbc:	cmp	r0, r1, lsl #31
   15dc0:	adc	r2, r2, r2
   15dc4:	subcs	r0, r0, r1, lsl #31
   15dc8:	cmp	r0, r1, lsl #30
   15dcc:	adc	r2, r2, r2
   15dd0:	subcs	r0, r0, r1, lsl #30
   15dd4:	cmp	r0, r1, lsl #29
   15dd8:	adc	r2, r2, r2
   15ddc:	subcs	r0, r0, r1, lsl #29
   15de0:	cmp	r0, r1, lsl #28
   15de4:	adc	r2, r2, r2
   15de8:	subcs	r0, r0, r1, lsl #28
   15dec:	cmp	r0, r1, lsl #27
   15df0:	adc	r2, r2, r2
   15df4:	subcs	r0, r0, r1, lsl #27
   15df8:	cmp	r0, r1, lsl #26
   15dfc:	adc	r2, r2, r2
   15e00:	subcs	r0, r0, r1, lsl #26
   15e04:	cmp	r0, r1, lsl #25
   15e08:	adc	r2, r2, r2
   15e0c:	subcs	r0, r0, r1, lsl #25
   15e10:	cmp	r0, r1, lsl #24
   15e14:	adc	r2, r2, r2
   15e18:	subcs	r0, r0, r1, lsl #24
   15e1c:	cmp	r0, r1, lsl #23
   15e20:	adc	r2, r2, r2
   15e24:	subcs	r0, r0, r1, lsl #23
   15e28:	cmp	r0, r1, lsl #22
   15e2c:	adc	r2, r2, r2
   15e30:	subcs	r0, r0, r1, lsl #22
   15e34:	cmp	r0, r1, lsl #21
   15e38:	adc	r2, r2, r2
   15e3c:	subcs	r0, r0, r1, lsl #21
   15e40:	cmp	r0, r1, lsl #20
   15e44:	adc	r2, r2, r2
   15e48:	subcs	r0, r0, r1, lsl #20
   15e4c:	cmp	r0, r1, lsl #19
   15e50:	adc	r2, r2, r2
   15e54:	subcs	r0, r0, r1, lsl #19
   15e58:	cmp	r0, r1, lsl #18
   15e5c:	adc	r2, r2, r2
   15e60:	subcs	r0, r0, r1, lsl #18
   15e64:	cmp	r0, r1, lsl #17
   15e68:	adc	r2, r2, r2
   15e6c:	subcs	r0, r0, r1, lsl #17
   15e70:	cmp	r0, r1, lsl #16
   15e74:	adc	r2, r2, r2
   15e78:	subcs	r0, r0, r1, lsl #16
   15e7c:	cmp	r0, r1, lsl #15
   15e80:	adc	r2, r2, r2
   15e84:	subcs	r0, r0, r1, lsl #15
   15e88:	cmp	r0, r1, lsl #14
   15e8c:	adc	r2, r2, r2
   15e90:	subcs	r0, r0, r1, lsl #14
   15e94:	cmp	r0, r1, lsl #13
   15e98:	adc	r2, r2, r2
   15e9c:	subcs	r0, r0, r1, lsl #13
   15ea0:	cmp	r0, r1, lsl #12
   15ea4:	adc	r2, r2, r2
   15ea8:	subcs	r0, r0, r1, lsl #12
   15eac:	cmp	r0, r1, lsl #11
   15eb0:	adc	r2, r2, r2
   15eb4:	subcs	r0, r0, r1, lsl #11
   15eb8:	cmp	r0, r1, lsl #10
   15ebc:	adc	r2, r2, r2
   15ec0:	subcs	r0, r0, r1, lsl #10
   15ec4:	cmp	r0, r1, lsl #9
   15ec8:	adc	r2, r2, r2
   15ecc:	subcs	r0, r0, r1, lsl #9
   15ed0:	cmp	r0, r1, lsl #8
   15ed4:	adc	r2, r2, r2
   15ed8:	subcs	r0, r0, r1, lsl #8
   15edc:	cmp	r0, r1, lsl #7
   15ee0:	adc	r2, r2, r2
   15ee4:	subcs	r0, r0, r1, lsl #7
   15ee8:	cmp	r0, r1, lsl #6
   15eec:	adc	r2, r2, r2
   15ef0:	subcs	r0, r0, r1, lsl #6
   15ef4:	cmp	r0, r1, lsl #5
   15ef8:	adc	r2, r2, r2
   15efc:	subcs	r0, r0, r1, lsl #5
   15f00:	cmp	r0, r1, lsl #4
   15f04:	adc	r2, r2, r2
   15f08:	subcs	r0, r0, r1, lsl #4
   15f0c:	cmp	r0, r1, lsl #3
   15f10:	adc	r2, r2, r2
   15f14:	subcs	r0, r0, r1, lsl #3
   15f18:	cmp	r0, r1, lsl #2
   15f1c:	adc	r2, r2, r2
   15f20:	subcs	r0, r0, r1, lsl #2
   15f24:	cmp	r0, r1, lsl #1
   15f28:	adc	r2, r2, r2
   15f2c:	subcs	r0, r0, r1, lsl #1
   15f30:	cmp	r0, r1
   15f34:	adc	r2, r2, r2
   15f38:	subcs	r0, r0, r1
   15f3c:	mov	r0, r2
   15f40:	bx	lr
   15f44:	moveq	r0, #1
   15f48:	movne	r0, #0
   15f4c:	bx	lr
   15f50:	clz	r2, r1
   15f54:	rsb	r2, r2, #31
   15f58:	lsr	r0, r0, r2
   15f5c:	bx	lr
   15f60:	cmp	r0, #0
   15f64:	mvnne	r0, #0
   15f68:	b	165c0 <_obstack_memory_used@@Base+0x938>
   15f6c:	cmp	r1, #0
   15f70:	beq	15f60 <_obstack_memory_used@@Base+0x2d8>
   15f74:	push	{r0, r1, lr}
   15f78:	bl	15d80 <_obstack_memory_used@@Base+0xf8>
   15f7c:	pop	{r1, r2, lr}
   15f80:	mul	r3, r2, r0
   15f84:	sub	r1, r1, r3
   15f88:	bx	lr
   15f8c:	cmp	r1, #0
   15f90:	beq	1619c <_obstack_memory_used@@Base+0x514>
   15f94:	eor	ip, r0, r1
   15f98:	rsbmi	r1, r1, #0
   15f9c:	subs	r2, r1, #1
   15fa0:	beq	16168 <_obstack_memory_used@@Base+0x4e0>
   15fa4:	movs	r3, r0
   15fa8:	rsbmi	r3, r0, #0
   15fac:	cmp	r3, r1
   15fb0:	bls	16174 <_obstack_memory_used@@Base+0x4ec>
   15fb4:	tst	r1, r2
   15fb8:	beq	16184 <_obstack_memory_used@@Base+0x4fc>
   15fbc:	clz	r2, r3
   15fc0:	clz	r0, r1
   15fc4:	sub	r2, r0, r2
   15fc8:	rsbs	r2, r2, #31
   15fcc:	addne	r2, r2, r2, lsl #1
   15fd0:	mov	r0, #0
   15fd4:	addne	pc, pc, r2, lsl #2
   15fd8:	nop			; (mov r0, r0)
   15fdc:	cmp	r3, r1, lsl #31
   15fe0:	adc	r0, r0, r0
   15fe4:	subcs	r3, r3, r1, lsl #31
   15fe8:	cmp	r3, r1, lsl #30
   15fec:	adc	r0, r0, r0
   15ff0:	subcs	r3, r3, r1, lsl #30
   15ff4:	cmp	r3, r1, lsl #29
   15ff8:	adc	r0, r0, r0
   15ffc:	subcs	r3, r3, r1, lsl #29
   16000:	cmp	r3, r1, lsl #28
   16004:	adc	r0, r0, r0
   16008:	subcs	r3, r3, r1, lsl #28
   1600c:	cmp	r3, r1, lsl #27
   16010:	adc	r0, r0, r0
   16014:	subcs	r3, r3, r1, lsl #27
   16018:	cmp	r3, r1, lsl #26
   1601c:	adc	r0, r0, r0
   16020:	subcs	r3, r3, r1, lsl #26
   16024:	cmp	r3, r1, lsl #25
   16028:	adc	r0, r0, r0
   1602c:	subcs	r3, r3, r1, lsl #25
   16030:	cmp	r3, r1, lsl #24
   16034:	adc	r0, r0, r0
   16038:	subcs	r3, r3, r1, lsl #24
   1603c:	cmp	r3, r1, lsl #23
   16040:	adc	r0, r0, r0
   16044:	subcs	r3, r3, r1, lsl #23
   16048:	cmp	r3, r1, lsl #22
   1604c:	adc	r0, r0, r0
   16050:	subcs	r3, r3, r1, lsl #22
   16054:	cmp	r3, r1, lsl #21
   16058:	adc	r0, r0, r0
   1605c:	subcs	r3, r3, r1, lsl #21
   16060:	cmp	r3, r1, lsl #20
   16064:	adc	r0, r0, r0
   16068:	subcs	r3, r3, r1, lsl #20
   1606c:	cmp	r3, r1, lsl #19
   16070:	adc	r0, r0, r0
   16074:	subcs	r3, r3, r1, lsl #19
   16078:	cmp	r3, r1, lsl #18
   1607c:	adc	r0, r0, r0
   16080:	subcs	r3, r3, r1, lsl #18
   16084:	cmp	r3, r1, lsl #17
   16088:	adc	r0, r0, r0
   1608c:	subcs	r3, r3, r1, lsl #17
   16090:	cmp	r3, r1, lsl #16
   16094:	adc	r0, r0, r0
   16098:	subcs	r3, r3, r1, lsl #16
   1609c:	cmp	r3, r1, lsl #15
   160a0:	adc	r0, r0, r0
   160a4:	subcs	r3, r3, r1, lsl #15
   160a8:	cmp	r3, r1, lsl #14
   160ac:	adc	r0, r0, r0
   160b0:	subcs	r3, r3, r1, lsl #14
   160b4:	cmp	r3, r1, lsl #13
   160b8:	adc	r0, r0, r0
   160bc:	subcs	r3, r3, r1, lsl #13
   160c0:	cmp	r3, r1, lsl #12
   160c4:	adc	r0, r0, r0
   160c8:	subcs	r3, r3, r1, lsl #12
   160cc:	cmp	r3, r1, lsl #11
   160d0:	adc	r0, r0, r0
   160d4:	subcs	r3, r3, r1, lsl #11
   160d8:	cmp	r3, r1, lsl #10
   160dc:	adc	r0, r0, r0
   160e0:	subcs	r3, r3, r1, lsl #10
   160e4:	cmp	r3, r1, lsl #9
   160e8:	adc	r0, r0, r0
   160ec:	subcs	r3, r3, r1, lsl #9
   160f0:	cmp	r3, r1, lsl #8
   160f4:	adc	r0, r0, r0
   160f8:	subcs	r3, r3, r1, lsl #8
   160fc:	cmp	r3, r1, lsl #7
   16100:	adc	r0, r0, r0
   16104:	subcs	r3, r3, r1, lsl #7
   16108:	cmp	r3, r1, lsl #6
   1610c:	adc	r0, r0, r0
   16110:	subcs	r3, r3, r1, lsl #6
   16114:	cmp	r3, r1, lsl #5
   16118:	adc	r0, r0, r0
   1611c:	subcs	r3, r3, r1, lsl #5
   16120:	cmp	r3, r1, lsl #4
   16124:	adc	r0, r0, r0
   16128:	subcs	r3, r3, r1, lsl #4
   1612c:	cmp	r3, r1, lsl #3
   16130:	adc	r0, r0, r0
   16134:	subcs	r3, r3, r1, lsl #3
   16138:	cmp	r3, r1, lsl #2
   1613c:	adc	r0, r0, r0
   16140:	subcs	r3, r3, r1, lsl #2
   16144:	cmp	r3, r1, lsl #1
   16148:	adc	r0, r0, r0
   1614c:	subcs	r3, r3, r1, lsl #1
   16150:	cmp	r3, r1
   16154:	adc	r0, r0, r0
   16158:	subcs	r3, r3, r1
   1615c:	cmp	ip, #0
   16160:	rsbmi	r0, r0, #0
   16164:	bx	lr
   16168:	teq	ip, r0
   1616c:	rsbmi	r0, r0, #0
   16170:	bx	lr
   16174:	movcc	r0, #0
   16178:	asreq	r0, ip, #31
   1617c:	orreq	r0, r0, #1
   16180:	bx	lr
   16184:	clz	r2, r1
   16188:	rsb	r2, r2, #31
   1618c:	cmp	ip, #0
   16190:	lsr	r0, r3, r2
   16194:	rsbmi	r0, r0, #0
   16198:	bx	lr
   1619c:	cmp	r0, #0
   161a0:	mvngt	r0, #-2147483648	; 0x80000000
   161a4:	movlt	r0, #-2147483648	; 0x80000000
   161a8:	b	165c0 <_obstack_memory_used@@Base+0x938>
   161ac:	cmp	r1, #0
   161b0:	beq	1619c <_obstack_memory_used@@Base+0x514>
   161b4:	push	{r0, r1, lr}
   161b8:	bl	15f94 <_obstack_memory_used@@Base+0x30c>
   161bc:	pop	{r1, r2, lr}
   161c0:	mul	r3, r2, r0
   161c4:	sub	r1, r1, r3
   161c8:	bx	lr
   161cc:	eor	r1, r1, #-2147483648	; 0x80000000
   161d0:	b	161d8 <_obstack_memory_used@@Base+0x550>
   161d4:	eor	r3, r3, #-2147483648	; 0x80000000
   161d8:	push	{r4, r5, lr}
   161dc:	lsl	r4, r1, #1
   161e0:	lsl	r5, r3, #1
   161e4:	teq	r4, r5
   161e8:	teqeq	r0, r2
   161ec:	orrsne	ip, r4, r0
   161f0:	orrsne	ip, r5, r2
   161f4:	mvnsne	ip, r4, asr #21
   161f8:	mvnsne	ip, r5, asr #21
   161fc:	beq	163e8 <_obstack_memory_used@@Base+0x760>
   16200:	lsr	r4, r4, #21
   16204:	rsbs	r5, r4, r5, lsr #21
   16208:	rsblt	r5, r5, #0
   1620c:	ble	1622c <_obstack_memory_used@@Base+0x5a4>
   16210:	add	r4, r4, r5
   16214:	eor	r2, r0, r2
   16218:	eor	r3, r1, r3
   1621c:	eor	r0, r2, r0
   16220:	eor	r1, r3, r1
   16224:	eor	r2, r0, r2
   16228:	eor	r3, r1, r3
   1622c:	cmp	r5, #54	; 0x36
   16230:	pophi	{r4, r5, pc}
   16234:	tst	r1, #-2147483648	; 0x80000000
   16238:	lsl	r1, r1, #12
   1623c:	mov	ip, #1048576	; 0x100000
   16240:	orr	r1, ip, r1, lsr #12
   16244:	beq	16250 <_obstack_memory_used@@Base+0x5c8>
   16248:	rsbs	r0, r0, #0
   1624c:	rsc	r1, r1, #0
   16250:	tst	r3, #-2147483648	; 0x80000000
   16254:	lsl	r3, r3, #12
   16258:	orr	r3, ip, r3, lsr #12
   1625c:	beq	16268 <_obstack_memory_used@@Base+0x5e0>
   16260:	rsbs	r2, r2, #0
   16264:	rsc	r3, r3, #0
   16268:	teq	r4, r5
   1626c:	beq	163d0 <_obstack_memory_used@@Base+0x748>
   16270:	sub	r4, r4, #1
   16274:	rsbs	lr, r5, #32
   16278:	blt	16294 <_obstack_memory_used@@Base+0x60c>
   1627c:	lsl	ip, r2, lr
   16280:	adds	r0, r0, r2, lsr r5
   16284:	adc	r1, r1, #0
   16288:	adds	r0, r0, r3, lsl lr
   1628c:	adcs	r1, r1, r3, asr r5
   16290:	b	162b0 <_obstack_memory_used@@Base+0x628>
   16294:	sub	r5, r5, #32
   16298:	add	lr, lr, #32
   1629c:	cmp	r2, #1
   162a0:	lsl	ip, r3, lr
   162a4:	orrcs	ip, ip, #2
   162a8:	adds	r0, r0, r3, asr r5
   162ac:	adcs	r1, r1, r3, asr #31
   162b0:	and	r5, r1, #-2147483648	; 0x80000000
   162b4:	bpl	162c4 <_obstack_memory_used@@Base+0x63c>
   162b8:	rsbs	ip, ip, #0
   162bc:	rscs	r0, r0, #0
   162c0:	rsc	r1, r1, #0
   162c4:	cmp	r1, #1048576	; 0x100000
   162c8:	bcc	16308 <_obstack_memory_used@@Base+0x680>
   162cc:	cmp	r1, #2097152	; 0x200000
   162d0:	bcc	162f0 <_obstack_memory_used@@Base+0x668>
   162d4:	lsrs	r1, r1, #1
   162d8:	rrxs	r0, r0
   162dc:	rrx	ip, ip
   162e0:	add	r4, r4, #1
   162e4:	lsl	r2, r4, #21
   162e8:	cmn	r2, #4194304	; 0x400000
   162ec:	bcs	16448 <_obstack_memory_used@@Base+0x7c0>
   162f0:	cmp	ip, #-2147483648	; 0x80000000
   162f4:	lsrseq	ip, r0, #1
   162f8:	adcs	r0, r0, #0
   162fc:	adc	r1, r1, r4, lsl #20
   16300:	orr	r1, r1, r5
   16304:	pop	{r4, r5, pc}
   16308:	lsls	ip, ip, #1
   1630c:	adcs	r0, r0, r0
   16310:	adc	r1, r1, r1
   16314:	tst	r1, #1048576	; 0x100000
   16318:	sub	r4, r4, #1
   1631c:	bne	162f0 <_obstack_memory_used@@Base+0x668>
   16320:	teq	r1, #0
   16324:	moveq	r1, r0
   16328:	moveq	r0, #0
   1632c:	clz	r3, r1
   16330:	addeq	r3, r3, #32
   16334:	sub	r3, r3, #11
   16338:	subs	r2, r3, #32
   1633c:	bge	16360 <_obstack_memory_used@@Base+0x6d8>
   16340:	adds	r2, r2, #12
   16344:	ble	1635c <_obstack_memory_used@@Base+0x6d4>
   16348:	add	ip, r2, #20
   1634c:	rsb	r2, r2, #12
   16350:	lsl	r0, r1, ip
   16354:	lsr	r1, r1, r2
   16358:	b	16370 <_obstack_memory_used@@Base+0x6e8>
   1635c:	add	r2, r2, #20
   16360:	rsble	ip, r2, #32
   16364:	lsl	r1, r1, r2
   16368:	orrle	r1, r1, r0, lsr ip
   1636c:	lslle	r0, r0, r2
   16370:	subs	r4, r4, r3
   16374:	addge	r1, r1, r4, lsl #20
   16378:	orrge	r1, r1, r5
   1637c:	popge	{r4, r5, pc}
   16380:	mvn	r4, r4
   16384:	subs	r4, r4, #31
   16388:	bge	163c4 <_obstack_memory_used@@Base+0x73c>
   1638c:	adds	r4, r4, #12
   16390:	bgt	163ac <_obstack_memory_used@@Base+0x724>
   16394:	add	r4, r4, #20
   16398:	rsb	r2, r4, #32
   1639c:	lsr	r0, r0, r4
   163a0:	orr	r0, r0, r1, lsl r2
   163a4:	orr	r1, r5, r1, lsr r4
   163a8:	pop	{r4, r5, pc}
   163ac:	rsb	r4, r4, #12
   163b0:	rsb	r2, r4, #32
   163b4:	lsr	r0, r0, r2
   163b8:	orr	r0, r0, r1, lsl r4
   163bc:	mov	r1, r5
   163c0:	pop	{r4, r5, pc}
   163c4:	lsr	r0, r1, r4
   163c8:	mov	r1, r5
   163cc:	pop	{r4, r5, pc}
   163d0:	teq	r4, #0
   163d4:	eor	r3, r3, #1048576	; 0x100000
   163d8:	eoreq	r1, r1, #1048576	; 0x100000
   163dc:	addeq	r4, r4, #1
   163e0:	subne	r5, r5, #1
   163e4:	b	16270 <_obstack_memory_used@@Base+0x5e8>
   163e8:	mvns	ip, r4, asr #21
   163ec:	mvnsne	ip, r5, asr #21
   163f0:	beq	16458 <_obstack_memory_used@@Base+0x7d0>
   163f4:	teq	r4, r5
   163f8:	teqeq	r0, r2
   163fc:	beq	16410 <_obstack_memory_used@@Base+0x788>
   16400:	orrs	ip, r4, r0
   16404:	moveq	r1, r3
   16408:	moveq	r0, r2
   1640c:	pop	{r4, r5, pc}
   16410:	teq	r1, r3
   16414:	movne	r1, #0
   16418:	movne	r0, #0
   1641c:	popne	{r4, r5, pc}
   16420:	lsrs	ip, r4, #21
   16424:	bne	16438 <_obstack_memory_used@@Base+0x7b0>
   16428:	lsls	r0, r0, #1
   1642c:	adcs	r1, r1, r1
   16430:	orrcs	r1, r1, #-2147483648	; 0x80000000
   16434:	pop	{r4, r5, pc}
   16438:	adds	r4, r4, #4194304	; 0x400000
   1643c:	addcc	r1, r1, #1048576	; 0x100000
   16440:	popcc	{r4, r5, pc}
   16444:	and	r5, r1, #-2147483648	; 0x80000000
   16448:	orr	r1, r5, #2130706432	; 0x7f000000
   1644c:	orr	r1, r1, #15728640	; 0xf00000
   16450:	mov	r0, #0
   16454:	pop	{r4, r5, pc}
   16458:	mvns	ip, r4, asr #21
   1645c:	movne	r1, r3
   16460:	movne	r0, r2
   16464:	mvnseq	ip, r5, asr #21
   16468:	movne	r3, r1
   1646c:	movne	r2, r0
   16470:	orrs	r4, r0, r1, lsl #12
   16474:	orrseq	r5, r2, r3, lsl #12
   16478:	teqeq	r1, r3
   1647c:	orrne	r1, r1, #524288	; 0x80000
   16480:	pop	{r4, r5, pc}
   16484:	teq	r0, #0
   16488:	moveq	r1, #0
   1648c:	bxeq	lr
   16490:	push	{r4, r5, lr}
   16494:	mov	r4, #1024	; 0x400
   16498:	add	r4, r4, #50	; 0x32
   1649c:	mov	r5, #0
   164a0:	mov	r1, #0
   164a4:	b	16320 <_obstack_memory_used@@Base+0x698>
   164a8:	teq	r0, #0
   164ac:	moveq	r1, #0
   164b0:	bxeq	lr
   164b4:	push	{r4, r5, lr}
   164b8:	mov	r4, #1024	; 0x400
   164bc:	add	r4, r4, #50	; 0x32
   164c0:	ands	r5, r0, #-2147483648	; 0x80000000
   164c4:	rsbmi	r0, r0, #0
   164c8:	mov	r1, #0
   164cc:	b	16320 <_obstack_memory_used@@Base+0x698>
   164d0:	lsls	r2, r0, #1
   164d4:	asr	r1, r2, #3
   164d8:	rrx	r1, r1
   164dc:	lsl	r0, r2, #28
   164e0:	andsne	r3, r2, #-16777216	; 0xff000000
   164e4:	teqne	r3, #-16777216	; 0xff000000
   164e8:	eorne	r1, r1, #939524096	; 0x38000000
   164ec:	bxne	lr
   164f0:	teq	r2, #0
   164f4:	teqne	r3, #-16777216	; 0xff000000
   164f8:	bxeq	lr
   164fc:	push	{r4, r5, lr}
   16500:	mov	r4, #896	; 0x380
   16504:	and	r5, r1, #-2147483648	; 0x80000000
   16508:	bic	r1, r1, #-2147483648	; 0x80000000
   1650c:	b	16320 <_obstack_memory_used@@Base+0x698>
   16510:	orrs	r2, r0, r1
   16514:	bxeq	lr
   16518:	push	{r4, r5, lr}
   1651c:	mov	r5, #0
   16520:	b	16540 <_obstack_memory_used@@Base+0x8b8>
   16524:	orrs	r2, r0, r1
   16528:	bxeq	lr
   1652c:	push	{r4, r5, lr}
   16530:	ands	r5, r1, #-2147483648	; 0x80000000
   16534:	bpl	16540 <_obstack_memory_used@@Base+0x8b8>
   16538:	rsbs	r0, r0, #0
   1653c:	rsc	r1, r1, #0
   16540:	mov	r4, #1024	; 0x400
   16544:	add	r4, r4, #50	; 0x32
   16548:	lsrs	ip, r1, #22
   1654c:	beq	162c4 <_obstack_memory_used@@Base+0x63c>
   16550:	mov	r2, #3
   16554:	lsrs	ip, ip, #3
   16558:	addne	r2, r2, #3
   1655c:	lsrs	ip, ip, #3
   16560:	addne	r2, r2, #3
   16564:	add	r2, r2, ip, lsr #3
   16568:	rsb	r3, r2, #32
   1656c:	lsl	ip, r0, r3
   16570:	lsr	r0, r0, r2
   16574:	orr	r0, r0, r1, lsl r3
   16578:	lsr	r1, r1, r2
   1657c:	add	r4, r4, r2
   16580:	b	162c4 <_obstack_memory_used@@Base+0x63c>
   16584:	cmp	r3, #0
   16588:	cmpeq	r2, #0
   1658c:	bne	165a4 <_obstack_memory_used@@Base+0x91c>
   16590:	cmp	r1, #0
   16594:	cmpeq	r0, #0
   16598:	mvnne	r1, #0
   1659c:	mvnne	r0, #0
   165a0:	b	165c0 <_obstack_memory_used@@Base+0x938>
   165a4:	sub	sp, sp, #8
   165a8:	push	{sp, lr}
   165ac:	bl	165d0 <_obstack_memory_used@@Base+0x948>
   165b0:	ldr	lr, [sp, #4]
   165b4:	add	sp, sp, #8
   165b8:	pop	{r2, r3}
   165bc:	bx	lr
   165c0:	push	{r1, lr}
   165c4:	mov	r0, #8
   165c8:	bl	110b0 <raise@plt>
   165cc:	pop	{r1, pc}
   165d0:	cmp	r1, r3
   165d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   165d8:	cmpeq	r0, r2
   165dc:	mov	r4, r0
   165e0:	mov	r5, r1
   165e4:	ldr	r9, [sp, #28]
   165e8:	movcc	r0, #0
   165ec:	movcc	r1, #0
   165f0:	bcc	166e8 <_obstack_memory_used@@Base+0xa60>
   165f4:	cmp	r3, #0
   165f8:	clzeq	ip, r2
   165fc:	clzne	ip, r3
   16600:	addeq	ip, ip, #32
   16604:	cmp	r5, #0
   16608:	clzeq	r1, r4
   1660c:	addeq	r1, r1, #32
   16610:	clzne	r1, r5
   16614:	sub	ip, ip, r1
   16618:	sub	lr, ip, #32
   1661c:	lsl	r7, r3, ip
   16620:	rsb	r8, ip, #32
   16624:	orr	r7, r7, r2, lsl lr
   16628:	orr	r7, r7, r2, lsr r8
   1662c:	lsl	r6, r2, ip
   16630:	cmp	r5, r7
   16634:	cmpeq	r4, r6
   16638:	movcc	r0, #0
   1663c:	movcc	r1, #0
   16640:	bcc	1665c <_obstack_memory_used@@Base+0x9d4>
   16644:	mov	r3, #1
   16648:	subs	r4, r4, r6
   1664c:	lsl	r1, r3, lr
   16650:	lsl	r0, r3, ip
   16654:	orr	r1, r1, r3, lsr r8
   16658:	sbc	r5, r5, r7
   1665c:	cmp	ip, #0
   16660:	beq	166e8 <_obstack_memory_used@@Base+0xa60>
   16664:	lsrs	r3, r7, #1
   16668:	rrx	r2, r6
   1666c:	mov	r6, ip
   16670:	b	16694 <_obstack_memory_used@@Base+0xa0c>
   16674:	subs	r4, r4, r2
   16678:	sbc	r5, r5, r3
   1667c:	adds	r4, r4, r4
   16680:	adc	r5, r5, r5
   16684:	adds	r4, r4, #1
   16688:	adc	r5, r5, #0
   1668c:	subs	r6, r6, #1
   16690:	beq	166b0 <_obstack_memory_used@@Base+0xa28>
   16694:	cmp	r5, r3
   16698:	cmpeq	r4, r2
   1669c:	bcs	16674 <_obstack_memory_used@@Base+0x9ec>
   166a0:	adds	r4, r4, r4
   166a4:	adc	r5, r5, r5
   166a8:	subs	r6, r6, #1
   166ac:	bne	16694 <_obstack_memory_used@@Base+0xa0c>
   166b0:	lsr	r6, r4, ip
   166b4:	lsr	r7, r5, ip
   166b8:	orr	r6, r6, r5, lsl r8
   166bc:	adds	r2, r0, r4
   166c0:	orr	r6, r6, r5, lsr lr
   166c4:	adc	r3, r1, r5
   166c8:	lsl	r1, r7, ip
   166cc:	orr	r1, r1, r6, lsl lr
   166d0:	lsl	r0, r6, ip
   166d4:	orr	r1, r1, r6, lsr r8
   166d8:	subs	r0, r2, r0
   166dc:	mov	r4, r6
   166e0:	mov	r5, r7
   166e4:	sbc	r1, r3, r1
   166e8:	cmp	r9, #0
   166ec:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   166f0:	strd	r4, [r9]
   166f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   166f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   166fc:	mov	r7, r0
   16700:	ldr	r6, [pc, #72]	; 16750 <_obstack_memory_used@@Base+0xac8>
   16704:	ldr	r5, [pc, #72]	; 16754 <_obstack_memory_used@@Base+0xacc>
   16708:	add	r6, pc, r6
   1670c:	add	r5, pc, r5
   16710:	sub	r6, r6, r5
   16714:	mov	r8, r1
   16718:	mov	r9, r2
   1671c:	bl	11078 <calloc@plt-0x20>
   16720:	asrs	r6, r6, #2
   16724:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16728:	mov	r4, #0
   1672c:	add	r4, r4, #1
   16730:	ldr	r3, [r5], #4
   16734:	mov	r2, r9
   16738:	mov	r1, r8
   1673c:	mov	r0, r7
   16740:	blx	r3
   16744:	cmp	r6, r4
   16748:	bne	1672c <_obstack_memory_used@@Base+0xaa4>
   1674c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16750:	andeq	r1, r1, r0, lsl #16
   16754:	strdeq	r1, [r1], -r8
   16758:	bx	lr
   1675c:	ldr	r3, [pc, #12]	; 16770 <_obstack_memory_used@@Base+0xae8>
   16760:	mov	r1, #0
   16764:	add	r3, pc, r3
   16768:	ldr	r2, [r3]
   1676c:	b	112c0 <__cxa_atexit@plt>
   16770:			; <UNDEFINED> instruction: 0x000119bc
   16774:	mov	r2, r1
   16778:	mov	r1, r0
   1677c:	mov	r0, #3
   16780:	b	11380 <__xstat64@plt>
   16784:	mov	r2, r1
   16788:	mov	r1, r0
   1678c:	mov	r0, #3
   16790:	b	111ac <__fxstat64@plt>

Disassembly of section .fini:

00016794 <.fini>:
   16794:	push	{r3, lr}
   16798:	pop	{r3, pc}
