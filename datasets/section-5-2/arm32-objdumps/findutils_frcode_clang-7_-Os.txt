
../repos/findutils/locate/frcode:     file format elf32-littlearm


Disassembly of section .init:

00010c94 <.init>:
   10c94:	push	{r3, lr}
   10c98:	bl	10f0c <__assert_fail@plt+0x48>
   10c9c:	pop	{r3, pc}

Disassembly of section .plt:

00010ca0 <calloc@plt-0x14>:
   10ca0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ca4:	ldr	lr, [pc, #4]	; 10cb0 <calloc@plt-0x4>
   10ca8:	add	lr, pc, lr
   10cac:	ldr	pc, [lr, #8]!
   10cb0:	andeq	r4, r1, r0, asr r3

00010cb4 <calloc@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #20, 20	; 0x14000
   10cbc:	ldr	pc, [ip, #848]!	; 0x350

00010cc0 <strcmp@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #20, 20	; 0x14000
   10cc8:	ldr	pc, [ip, #840]!	; 0x348

00010ccc <strtol@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #20, 20	; 0x14000
   10cd4:	ldr	pc, [ip, #832]!	; 0x340

00010cd8 <printf@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #20, 20	; 0x14000
   10ce0:	ldr	pc, [ip, #824]!	; 0x338

00010ce4 <fflush@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #20, 20	; 0x14000
   10cec:	ldr	pc, [ip, #816]!	; 0x330

00010cf0 <free@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #20, 20	; 0x14000
   10cf8:	ldr	pc, [ip, #808]!	; 0x328

00010cfc <ferror@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #20, 20	; 0x14000
   10d04:	ldr	pc, [ip, #800]!	; 0x320

00010d08 <_exit@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #20, 20	; 0x14000
   10d10:	ldr	pc, [ip, #792]!	; 0x318

00010d14 <memcpy@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #20, 20	; 0x14000
   10d1c:	ldr	pc, [ip, #784]!	; 0x310

00010d20 <mbsinit@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #20, 20	; 0x14000
   10d28:	ldr	pc, [ip, #776]!	; 0x308

00010d2c <memcmp@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #20, 20	; 0x14000
   10d34:	ldr	pc, [ip, #768]!	; 0x300

00010d38 <dcgettext@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #20, 20	; 0x14000
   10d40:	ldr	pc, [ip, #760]!	; 0x2f8

00010d44 <realloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #20, 20	; 0x14000
   10d4c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d50 <iswprint@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #20, 20	; 0x14000
   10d58:	ldr	pc, [ip, #744]!	; 0x2e8

00010d5c <fwrite@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #20, 20	; 0x14000
   10d64:	ldr	pc, [ip, #736]!	; 0x2e0

00010d68 <lseek64@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #20, 20	; 0x14000
   10d70:	ldr	pc, [ip, #728]!	; 0x2d8

00010d74 <__ctype_get_mb_cur_max@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #20, 20	; 0x14000
   10d7c:	ldr	pc, [ip, #720]!	; 0x2d0

00010d80 <__fpending@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #20, 20	; 0x14000
   10d88:	ldr	pc, [ip, #712]!	; 0x2c8

00010d8c <mbrtowc@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #20, 20	; 0x14000
   10d94:	ldr	pc, [ip, #704]!	; 0x2c0

00010d98 <error@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #20, 20	; 0x14000
   10da0:	ldr	pc, [ip, #696]!	; 0x2b8

00010da4 <malloc@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #20, 20	; 0x14000
   10dac:	ldr	pc, [ip, #688]!	; 0x2b0

00010db0 <__libc_start_main@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #20, 20	; 0x14000
   10db8:	ldr	pc, [ip, #680]!	; 0x2a8

00010dbc <__freading@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #20, 20	; 0x14000
   10dc4:	ldr	pc, [ip, #672]!	; 0x2a0

00010dc8 <__gmon_start__@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #20, 20	; 0x14000
   10dd0:	ldr	pc, [ip, #664]!	; 0x298

00010dd4 <getopt_long@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #20, 20	; 0x14000
   10ddc:	ldr	pc, [ip, #656]!	; 0x290

00010de0 <__ctype_b_loc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #20, 20	; 0x14000
   10de8:	ldr	pc, [ip, #648]!	; 0x288

00010dec <exit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #20, 20	; 0x14000
   10df4:	ldr	pc, [ip, #640]!	; 0x280

00010df8 <strlen@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #20, 20	; 0x14000
   10e00:	ldr	pc, [ip, #632]!	; 0x278

00010e04 <fprintf@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #20, 20	; 0x14000
   10e0c:	ldr	pc, [ip, #624]!	; 0x270

00010e10 <__errno_location@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #20, 20	; 0x14000
   10e18:	ldr	pc, [ip, #616]!	; 0x268

00010e1c <__cxa_atexit@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #20, 20	; 0x14000
   10e24:	ldr	pc, [ip, #608]!	; 0x260

00010e28 <memset@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #20, 20	; 0x14000
   10e30:	ldr	pc, [ip, #600]!	; 0x258

00010e34 <fileno@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #20, 20	; 0x14000
   10e3c:	ldr	pc, [ip, #592]!	; 0x250

00010e40 <fclose@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #20, 20	; 0x14000
   10e48:	ldr	pc, [ip, #584]!	; 0x248

00010e4c <fseeko64@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #20, 20	; 0x14000
   10e54:	ldr	pc, [ip, #576]!	; 0x240

00010e58 <setlocale@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #20, 20	; 0x14000
   10e60:	ldr	pc, [ip, #568]!	; 0x238

00010e64 <strrchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #20, 20	; 0x14000
   10e6c:	ldr	pc, [ip, #560]!	; 0x230

00010e70 <nl_langinfo@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #20, 20	; 0x14000
   10e78:	ldr	pc, [ip, #552]!	; 0x228

00010e7c <fputc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #20, 20	; 0x14000
   10e84:	ldr	pc, [ip, #544]!	; 0x220

00010e88 <putc@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #20, 20	; 0x14000
   10e90:	ldr	pc, [ip, #536]!	; 0x218

00010e94 <getdelim@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #20, 20	; 0x14000
   10e9c:	ldr	pc, [ip, #528]!	; 0x210

00010ea0 <fputs@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #20, 20	; 0x14000
   10ea8:	ldr	pc, [ip, #520]!	; 0x208

00010eac <strncmp@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #20, 20	; 0x14000
   10eb4:	ldr	pc, [ip, #512]!	; 0x200

00010eb8 <abort@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #20, 20	; 0x14000
   10ec0:	ldr	pc, [ip, #504]!	; 0x1f8

00010ec4 <__assert_fail@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #20, 20	; 0x14000
   10ecc:	ldr	pc, [ip, #496]!	; 0x1f0

Disassembly of section .text:

00010ed0 <.text>:
   10ed0:	mov	fp, #0
   10ed4:	mov	lr, #0
   10ed8:	pop	{r1}		; (ldr r1, [sp], #4)
   10edc:	mov	r2, sp
   10ee0:	push	{r2}		; (str r2, [sp, #-4]!)
   10ee4:	push	{r0}		; (str r0, [sp, #-4]!)
   10ee8:	ldr	ip, [pc, #16]	; 10f00 <__assert_fail@plt+0x3c>
   10eec:	push	{ip}		; (str ip, [sp, #-4]!)
   10ef0:	ldr	r0, [pc, #12]	; 10f04 <__assert_fail@plt+0x40>
   10ef4:	ldr	r3, [pc, #12]	; 10f08 <__assert_fail@plt+0x44>
   10ef8:	bl	10db0 <__libc_start_main@plt>
   10efc:	bl	10eb8 <abort@plt>
   10f00:	andeq	r4, r1, r0, asr #2
   10f04:	andeq	r0, r1, r0, asr #31
   10f08:	andeq	r4, r1, r0, ror #1
   10f0c:	ldr	r3, [pc, #20]	; 10f28 <__assert_fail@plt+0x64>
   10f10:	ldr	r2, [pc, #20]	; 10f2c <__assert_fail@plt+0x68>
   10f14:	add	r3, pc, r3
   10f18:	ldr	r2, [r3, r2]
   10f1c:	cmp	r2, #0
   10f20:	bxeq	lr
   10f24:	b	10dc8 <__gmon_start__@plt>
   10f28:	andeq	r4, r1, r4, ror #1
   10f2c:	andeq	r0, r0, r0, asr #1
   10f30:	ldr	r0, [pc, #24]	; 10f50 <__assert_fail@plt+0x8c>
   10f34:	ldr	r3, [pc, #24]	; 10f54 <__assert_fail@plt+0x90>
   10f38:	cmp	r3, r0
   10f3c:	bxeq	lr
   10f40:	ldr	r3, [pc, #16]	; 10f58 <__assert_fail@plt+0x94>
   10f44:	cmp	r3, #0
   10f48:	bxeq	lr
   10f4c:	bx	r3
   10f50:	andeq	r5, r2, r8, lsl r1
   10f54:	andeq	r5, r2, r8, lsl r1
   10f58:	andeq	r0, r0, r0
   10f5c:	ldr	r0, [pc, #36]	; 10f88 <__assert_fail@plt+0xc4>
   10f60:	ldr	r1, [pc, #36]	; 10f8c <__assert_fail@plt+0xc8>
   10f64:	sub	r1, r1, r0
   10f68:	asr	r1, r1, #2
   10f6c:	add	r1, r1, r1, lsr #31
   10f70:	asrs	r1, r1, #1
   10f74:	bxeq	lr
   10f78:	ldr	r3, [pc, #16]	; 10f90 <__assert_fail@plt+0xcc>
   10f7c:	cmp	r3, #0
   10f80:	bxeq	lr
   10f84:	bx	r3
   10f88:	andeq	r5, r2, r8, lsl r1
   10f8c:	andeq	r5, r2, r8, lsl r1
   10f90:	andeq	r0, r0, r0
   10f94:	push	{r4, lr}
   10f98:	ldr	r4, [pc, #24]	; 10fb8 <__assert_fail@plt+0xf4>
   10f9c:	ldrb	r3, [r4]
   10fa0:	cmp	r3, #0
   10fa4:	popne	{r4, pc}
   10fa8:	bl	10f30 <__assert_fail@plt+0x6c>
   10fac:	mov	r3, #1
   10fb0:	strb	r3, [r4]
   10fb4:	pop	{r4, pc}
   10fb8:	andeq	r5, r2, ip, lsr r1
   10fbc:	b	10f5c <__assert_fail@plt+0x98>
   10fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fc4:	add	fp, sp, #28
   10fc8:	sub	sp, sp, #28
   10fcc:	mov	sl, r0
   10fd0:	ldr	r0, [r1]
   10fd4:	mov	r9, r1
   10fd8:	cmp	r0, #0
   10fdc:	movweq	r0, #16744	; 0x4168
   10fe0:	movteq	r0, #1
   10fe4:	bl	1182c <__assert_fail@plt+0x968>
   10fe8:	movw	r0, #5956	; 0x1744
   10fec:	movt	r0, #1
   10ff0:	bl	14144 <__assert_fail@plt+0x3280>
   10ff4:	cmp	r0, #0
   10ff8:	bne	114c8 <__assert_fail@plt+0x604>
   10ffc:	movw	r0, #1026	; 0x402
   11000:	str	r0, [sp, #16]
   11004:	movw	r0, #1026	; 0x402
   11008:	bl	13804 <__assert_fail@plt+0x2940>
   1100c:	str	r0, [sp, #20]
   11010:	movw	r0, #1026	; 0x402
   11014:	bl	13804 <__assert_fail@plt+0x2940>
   11018:	mov	r1, #0
   1101c:	movw	r2, #16786	; 0x4192
   11020:	movw	r3, #17272	; 0x4378
   11024:	mov	r5, r0
   11028:	mov	r4, #10
   1102c:	mov	r8, #0
   11030:	strb	r1, [r0]
   11034:	mov	r0, #0
   11038:	movt	r2, #1
   1103c:	movt	r3, #1
   11040:	str	r0, [sp, #8]
   11044:	str	r1, [sp]
   11048:	mov	r0, sl
   1104c:	mov	r1, r9
   11050:	mov	r7, sl
   11054:	mov	r6, r9
   11058:	mov	sl, r2
   1105c:	bl	10dd4 <getopt_long@plt>
   11060:	cmp	r0, #82	; 0x52
   11064:	ble	110cc <__assert_fail@plt+0x208>
   11068:	movw	r9, #20792	; 0x5138
   1106c:	cmp	r0, #83	; 0x53
   11070:	movt	r9, #2
   11074:	bne	11178 <__assert_fail@plt+0x2b4>
   11078:	str	r6, [sp, #4]
   1107c:	ldr	r6, [r9]
   11080:	bl	10e10 <__errno_location@plt>
   11084:	mov	r1, #0
   11088:	mov	r8, r0
   1108c:	mov	r2, #10
   11090:	str	r1, [r0]
   11094:	mov	r0, r6
   11098:	add	r1, sp, #24
   1109c:	bl	10ccc <strtol@plt>
   110a0:	cmp	r0, #0
   110a4:	beq	110fc <__assert_fail@plt+0x238>
   110a8:	mov	r3, r0
   110ac:	add	r0, r0, #-2147483647	; 0x80000001
   110b0:	mov	r2, r7
   110b4:	cmp	r0, #1
   110b8:	bhi	11114 <__assert_fail@plt+0x250>
   110bc:	ldr	r0, [r8]
   110c0:	cmp	r0, #0
   110c4:	beq	11114 <__assert_fail@plt+0x250>
   110c8:	b	1140c <__assert_fail@plt+0x548>
   110cc:	cmn	r0, #1
   110d0:	beq	11190 <__assert_fail@plt+0x2cc>
   110d4:	cmp	r0, #48	; 0x30
   110d8:	bne	11518 <__assert_fail@plt+0x654>
   110dc:	movw	r3, #17272	; 0x4378
   110e0:	mov	r2, sl
   110e4:	mov	r4, #0
   110e8:	mov	sl, r7
   110ec:	mov	r9, r6
   110f0:	mov	r1, #0
   110f4:	movt	r3, #1
   110f8:	b	11044 <__assert_fail@plt+0x180>
   110fc:	mov	r3, r0
   11100:	ldr	r0, [r9]
   11104:	ldr	r1, [sp, #24]
   11108:	mov	r2, r7
   1110c:	cmp	r1, r0
   11110:	beq	11428 <__assert_fail@plt+0x564>
   11114:	ldr	r7, [sp, #24]
   11118:	ldrb	r0, [r7]
   1111c:	cmp	r0, #0
   11120:	bne	1144c <__assert_fail@plt+0x588>
   11124:	ldr	r9, [sp, #4]
   11128:	mov	r7, r2
   1112c:	str	r3, [sp, #8]
   11130:	cmp	r3, #2
   11134:	movw	r3, #17272	; 0x4378
   11138:	mov	r2, sl
   1113c:	mov	r8, #1
   11140:	mov	r1, #0
   11144:	mov	sl, r7
   11148:	movt	r3, #1
   1114c:	bcc	11044 <__assert_fail@plt+0x180>
   11150:	movw	r1, #16792	; 0x4198
   11154:	mov	r0, #0
   11158:	mov	r2, #5
   1115c:	movt	r1, #1
   11160:	bl	10d38 <dcgettext@plt>
   11164:	ldr	r3, [sp, #8]
   11168:	mov	r2, r0
   1116c:	mov	r0, #1
   11170:	mov	r1, #0
   11174:	bl	10d98 <error@plt>
   11178:	cmp	r0, #118	; 0x76
   1117c:	bne	11478 <__assert_fail@plt+0x5b4>
   11180:	movw	r0, #16744	; 0x4168
   11184:	movt	r0, #1
   11188:	bl	11608 <__assert_fail@plt+0x744>
   1118c:	b	113fc <__assert_fail@plt+0x538>
   11190:	movw	r0, #20768	; 0x5120
   11194:	movt	r0, #2
   11198:	ldr	r0, [r0]
   1119c:	cmp	r0, r7
   111a0:	bne	114f4 <__assert_fail@plt+0x630>
   111a4:	cmp	r8, #0
   111a8:	beq	111dc <__assert_fail@plt+0x318>
   111ac:	ldr	r1, [sp, #8]
   111b0:	movw	r6, #20788	; 0x5134
   111b4:	mov	r0, #49	; 0x31
   111b8:	movt	r6, #2
   111bc:	cmp	r1, #0
   111c0:	ldr	r1, [r6]
   111c4:	movweq	r0, #48	; 0x30
   111c8:	bl	10e7c <fputc@plt>
   111cc:	ldr	r1, [r6]
   111d0:	mov	r0, #0
   111d4:	bl	10e7c <fputc@plt>
   111d8:	b	11204 <__assert_fail@plt+0x340>
   111dc:	movw	r0, #20788	; 0x5134
   111e0:	mov	r1, #1
   111e4:	mov	r2, #10
   111e8:	movt	r0, #2
   111ec:	ldr	r3, [r0]
   111f0:	movw	r0, #17336	; 0x43b8
   111f4:	movt	r0, #1
   111f8:	bl	10d5c <fwrite@plt>
   111fc:	cmp	r0, #10
   11200:	bne	11520 <__assert_fail@plt+0x65c>
   11204:	movw	r0, #20784	; 0x5130
   11208:	add	r1, sp, #16
   1120c:	mov	r2, r4
   11210:	movt	r0, #2
   11214:	ldr	r3, [r0]
   11218:	add	r0, sp, #20
   1121c:	bl	10e94 <getdelim@plt>
   11220:	mov	r1, r0
   11224:	ldr	r0, [sp, #20]
   11228:	cmp	r1, #1
   1122c:	blt	113ec <__assert_fail@plt+0x528>
   11230:	movw	r9, #1026	; 0x402
   11234:	mov	r7, #0
   11238:	str	r4, [sp, #12]
   1123c:	sub	r1, r1, #1
   11240:	ldrb	r2, [r0, r1]
   11244:	cmp	r4, r2
   11248:	bne	11258 <__assert_fail@plt+0x394>
   1124c:	mov	r2, #0
   11250:	strb	r2, [r0, r1]
   11254:	b	1127c <__assert_fail@plt+0x3b8>
   11258:	movw	r1, #16892	; 0x41fc
   1125c:	mov	r0, #0
   11260:	mov	r2, #5
   11264:	movt	r1, #1
   11268:	bl	10d38 <dcgettext@plt>
   1126c:	mov	r2, r0
   11270:	mov	r0, #0
   11274:	mov	r1, #0
   11278:	bl	10d98 <error@plt>
   1127c:	ldrb	r2, [r5]
   11280:	mov	r1, r5
   11284:	cmp	r2, #0
   11288:	beq	112dc <__assert_fail@plt+0x418>
   1128c:	ldr	r0, [sp, #20]
   11290:	ldrb	r1, [r0]
   11294:	cmp	r2, r1
   11298:	mov	r1, r5
   1129c:	bne	112dc <__assert_fail@plt+0x418>
   112a0:	mov	r1, #1
   112a4:	cmn	r1, #-2147483647	; 0x80000001
   112a8:	beq	112d4 <__assert_fail@plt+0x410>
   112ac:	ldrb	r3, [r5, r1]
   112b0:	add	r2, r1, #1
   112b4:	cmp	r3, #0
   112b8:	beq	112cc <__assert_fail@plt+0x408>
   112bc:	ldrb	r1, [r0, r1]
   112c0:	cmp	r3, r1
   112c4:	mov	r1, r2
   112c8:	beq	112a4 <__assert_fail@plt+0x3e0>
   112cc:	add	r0, r5, r2
   112d0:	b	112d8 <__assert_fail@plt+0x414>
   112d4:	add	r0, r5, r1
   112d8:	sub	r1, r0, #1
   112dc:	sub	sl, r1, r5
   112e0:	mov	r1, #0
   112e4:	movw	r4, #20788	; 0x5134
   112e8:	sub	r6, sl, r7
   112ec:	movt	r4, #2
   112f0:	add	r0, r6, #32768	; 0x8000
   112f4:	cmp	r1, r0, lsr #16
   112f8:	rsbne	r6, r7, #0
   112fc:	movwne	sl, #0
   11300:	cmp	r8, #0
   11304:	bne	1136c <__assert_fail@plt+0x4a8>
   11308:	ldr	r1, [r4]
   1130c:	add	r0, r6, #127	; 0x7f
   11310:	cmp	r0, #255	; 0xff
   11314:	bcc	1135c <__assert_fail@plt+0x498>
   11318:	mov	r0, #128	; 0x80
   1131c:	bl	10e88 <putc@plt>
   11320:	cmn	r0, #1
   11324:	beq	11408 <__assert_fail@plt+0x544>
   11328:	cmp	r6, #32768	; 0x8000
   1132c:	bge	11488 <__assert_fail@plt+0x5c4>
   11330:	cmn	r6, #32768	; 0x8000
   11334:	blt	114a8 <__assert_fail@plt+0x5e4>
   11338:	ldr	r7, [r4]
   1133c:	asr	r0, r6, #8
   11340:	mov	r1, r7
   11344:	bl	10e88 <putc@plt>
   11348:	cmn	r0, #1
   1134c:	beq	11408 <__assert_fail@plt+0x544>
   11350:	mov	r0, r6
   11354:	mov	r1, r7
   11358:	b	11360 <__assert_fail@plt+0x49c>
   1135c:	mov	r0, r6
   11360:	bl	10e88 <putc@plt>
   11364:	cmn	r0, #1
   11368:	beq	11408 <__assert_fail@plt+0x544>
   1136c:	ldr	r0, [sp, #20]
   11370:	ldr	r1, [r4]
   11374:	add	r0, r0, sl
   11378:	bl	10ea0 <fputs@plt>
   1137c:	cmn	r0, #1
   11380:	beq	11408 <__assert_fail@plt+0x544>
   11384:	ldr	r1, [r4]
   11388:	mov	r0, #0
   1138c:	bl	10e88 <putc@plt>
   11390:	cmn	r0, #1
   11394:	beq	11408 <__assert_fail@plt+0x544>
   11398:	movw	r0, #20784	; 0x5130
   1139c:	ldr	r4, [sp, #12]
   113a0:	ldr	r6, [sp, #20]
   113a4:	ldr	r7, [sp, #16]
   113a8:	add	r1, sp, #16
   113ac:	str	r5, [sp, #20]
   113b0:	str	r9, [sp, #16]
   113b4:	movt	r0, #2
   113b8:	ldr	r3, [r0]
   113bc:	add	r0, sp, #20
   113c0:	mov	r2, r4
   113c4:	bl	10e94 <getdelim@plt>
   113c8:	mov	r1, r0
   113cc:	ldr	r0, [sp, #20]
   113d0:	mov	r9, r7
   113d4:	mov	r8, #0
   113d8:	mov	r5, r6
   113dc:	mov	r7, sl
   113e0:	cmp	r1, #0
   113e4:	bgt	1123c <__assert_fail@plt+0x378>
   113e8:	b	113f0 <__assert_fail@plt+0x52c>
   113ec:	mov	r6, r5
   113f0:	bl	13d48 <__assert_fail@plt+0x2e84>
   113f4:	mov	r0, r6
   113f8:	bl	13d48 <__assert_fail@plt+0x2e84>
   113fc:	mov	r0, #0
   11400:	sub	sp, fp, #28
   11404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11408:	bl	115d4 <__assert_fail@plt+0x710>
   1140c:	movw	r1, #17014	; 0x4276
   11410:	mov	r0, #0
   11414:	mov	r2, #5
   11418:	movt	r1, #1
   1141c:	bl	10d38 <dcgettext@plt>
   11420:	mov	r2, r0
   11424:	b	11468 <__assert_fail@plt+0x5a4>
   11428:	movw	r1, #16955	; 0x423b
   1142c:	mov	r0, #0
   11430:	mov	r2, #5
   11434:	movt	r1, #1
   11438:	bl	10d38 <dcgettext@plt>
   1143c:	mov	r2, r0
   11440:	mov	r0, #1
   11444:	mov	r1, #0
   11448:	bl	10d98 <error@plt>
   1144c:	movw	r1, #17066	; 0x42aa
   11450:	mov	r0, #0
   11454:	mov	r2, #5
   11458:	movt	r1, #1
   1145c:	bl	10d38 <dcgettext@plt>
   11460:	mov	r2, r0
   11464:	str	r7, [sp]
   11468:	mov	r0, #1
   1146c:	mov	r1, #0
   11470:	mov	r3, r6
   11474:	bl	10d98 <error@plt>
   11478:	cmp	r0, #104	; 0x68
   1147c:	bne	11518 <__assert_fail@plt+0x654>
   11480:	mov	r0, #0
   11484:	bl	11534 <__assert_fail@plt+0x670>
   11488:	movw	r0, #17207	; 0x4337
   1148c:	movw	r1, #17221	; 0x4345
   11490:	movw	r3, #17230	; 0x434e
   11494:	mov	r2, #104	; 0x68
   11498:	movt	r0, #1
   1149c:	movt	r1, #1
   114a0:	movt	r3, #1
   114a4:	bl	10ec4 <__assert_fail@plt>
   114a8:	movw	r0, #17257	; 0x4369
   114ac:	movw	r1, #17221	; 0x4345
   114b0:	movw	r3, #17230	; 0x434e
   114b4:	mov	r2, #105	; 0x69
   114b8:	movt	r0, #1
   114bc:	movt	r1, #1
   114c0:	movt	r3, #1
   114c4:	bl	10ec4 <__assert_fail@plt>
   114c8:	bl	10e10 <__errno_location@plt>
   114cc:	ldr	r4, [r0]
   114d0:	movw	r1, #16751	; 0x416f
   114d4:	movt	r1, #1
   114d8:	mov	r0, #0
   114dc:	mov	r2, #5
   114e0:	bl	10d38 <dcgettext@plt>
   114e4:	mov	r2, r0
   114e8:	mov	r0, #1
   114ec:	mov	r1, r4
   114f0:	bl	10d98 <error@plt>
   114f4:	movw	r1, #16835	; 0x41c3
   114f8:	mov	r0, #0
   114fc:	mov	r2, #5
   11500:	movt	r1, #1
   11504:	bl	10d38 <dcgettext@plt>
   11508:	mov	r2, r0
   1150c:	mov	r0, #0
   11510:	mov	r1, #0
   11514:	bl	10d98 <error@plt>
   11518:	mov	r0, #1
   1151c:	bl	11534 <__assert_fail@plt+0x670>
   11520:	bl	10e10 <__errno_location@plt>
   11524:	ldr	r4, [r0]
   11528:	movw	r1, #16857	; 0x41d9
   1152c:	movt	r1, #1
   11530:	b	114d8 <__assert_fail@plt+0x614>
   11534:	push	{fp, lr}
   11538:	mov	fp, sp
   1153c:	cmp	r0, #0
   11540:	bne	11590 <__assert_fail@plt+0x6cc>
   11544:	movw	r5, #20788	; 0x5134
   11548:	movw	r1, #17149	; 0x42fd
   1154c:	mov	r0, #0
   11550:	mov	r2, #5
   11554:	movt	r5, #2
   11558:	movt	r1, #1
   1155c:	ldr	r4, [r5]
   11560:	bl	10d38 <dcgettext@plt>
   11564:	movw	r6, #20808	; 0x5148
   11568:	mov	r1, r0
   1156c:	mov	r0, r4
   11570:	movt	r6, #2
   11574:	ldr	r2, [r6]
   11578:	bl	10e04 <fprintf@plt>
   1157c:	ldr	r0, [r5]
   11580:	ldr	r1, [r6]
   11584:	bl	116b8 <__assert_fail@plt+0x7f4>
   11588:	mov	r0, #0
   1158c:	bl	10dec <exit@plt>
   11590:	mov	r4, r0
   11594:	movw	r0, #20776	; 0x5128
   11598:	movw	r1, #17110	; 0x42d6
   1159c:	mov	r2, #5
   115a0:	movt	r0, #2
   115a4:	movt	r1, #1
   115a8:	ldr	r5, [r0]
   115ac:	mov	r0, #0
   115b0:	bl	10d38 <dcgettext@plt>
   115b4:	mov	r1, r0
   115b8:	movw	r0, #20808	; 0x5148
   115bc:	movt	r0, #2
   115c0:	ldr	r2, [r0]
   115c4:	mov	r0, r5
   115c8:	bl	10e04 <fprintf@plt>
   115cc:	mov	r0, r4
   115d0:	bl	10dec <exit@plt>
   115d4:	push	{fp, lr}
   115d8:	mov	fp, sp
   115dc:	bl	10e10 <__errno_location@plt>
   115e0:	ldr	r4, [r0]
   115e4:	movw	r1, #17195	; 0x432b
   115e8:	mov	r0, #0
   115ec:	mov	r2, #5
   115f0:	movt	r1, #1
   115f4:	bl	10d38 <dcgettext@plt>
   115f8:	mov	r2, r0
   115fc:	mov	r0, #1
   11600:	mov	r1, r4
   11604:	bl	10d98 <error@plt>
   11608:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1160c:	add	fp, sp, #24
   11610:	sub	sp, sp, #16
   11614:	mov	r8, r0
   11618:	movw	r0, #20776	; 0x5128
   1161c:	movt	r0, #2
   11620:	ldr	r0, [r0]
   11624:	bl	13cec <__assert_fail@plt+0x2e28>
   11628:	movw	r0, #20788	; 0x5134
   1162c:	movw	r1, #17374	; 0x43de
   11630:	mov	r2, #5
   11634:	mov	r9, #0
   11638:	movt	r0, #2
   1163c:	movt	r1, #1
   11640:	ldr	r6, [r0]
   11644:	movw	r0, #20688	; 0x50d0
   11648:	movt	r0, #2
   1164c:	ldr	r5, [r0]
   11650:	mov	r0, #0
   11654:	bl	10d38 <dcgettext@plt>
   11658:	movw	r1, #17389	; 0x43ed
   1165c:	mov	r7, r0
   11660:	mov	r0, #0
   11664:	mov	r2, #5
   11668:	movt	r1, #1
   1166c:	bl	10d38 <dcgettext@plt>
   11670:	movw	r1, #17404	; 0x43fc
   11674:	mov	r4, r0
   11678:	mov	r0, #0
   1167c:	mov	r2, #5
   11680:	movt	r1, #1
   11684:	bl	10d38 <dcgettext@plt>
   11688:	movw	r2, #17360	; 0x43d0
   1168c:	str	r0, [sp, #8]
   11690:	mov	r0, r6
   11694:	mov	r1, r8
   11698:	mov	r3, r5
   1169c:	str	r7, [sp]
   116a0:	str	r4, [sp, #4]
   116a4:	str	r9, [sp, #12]
   116a8:	movt	r2, #1
   116ac:	bl	13714 <__assert_fail@plt+0x2850>
   116b0:	sub	sp, fp, #24
   116b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   116b8:	push	{r4, r5, fp, lr}
   116bc:	add	fp, sp, #8
   116c0:	sub	sp, sp, #16
   116c4:	mov	r4, r1
   116c8:	movw	r1, #17417	; 0x4409
   116cc:	mov	r5, r0
   116d0:	mov	r0, #0
   116d4:	mov	r2, #5
   116d8:	movt	r1, #1
   116dc:	bl	10d38 <dcgettext@plt>
   116e0:	movw	r2, #17662	; 0x44fe
   116e4:	movw	r3, #17360	; 0x43d0
   116e8:	mov	r1, r0
   116ec:	movw	r0, #17709	; 0x452d
   116f0:	movt	r2, #1
   116f4:	movt	r0, #1
   116f8:	movt	r3, #1
   116fc:	str	r2, [sp, #4]
   11700:	movw	r2, #17623	; 0x44d7
   11704:	str	r3, [sp]
   11708:	str	r0, [sp, #8]
   1170c:	mov	r0, r5
   11710:	mov	r3, r4
   11714:	movt	r2, #1
   11718:	bl	10e04 <fprintf@plt>
   1171c:	sub	sp, fp, #8
   11720:	pop	{r4, r5, fp, pc}
   11724:	movw	r1, #20800	; 0x5140
   11728:	movt	r1, #2
   1172c:	str	r0, [r1]
   11730:	bx	lr
   11734:	movw	r1, #20804	; 0x5144
   11738:	movt	r1, #2
   1173c:	strb	r0, [r1]
   11740:	bx	lr
   11744:	push	{r4, r5, r6, sl, fp, lr}
   11748:	add	fp, sp, #16
   1174c:	sub	sp, sp, #8
   11750:	movw	r0, #20788	; 0x5134
   11754:	movt	r0, #2
   11758:	ldr	r0, [r0]
   1175c:	bl	13f30 <__assert_fail@plt+0x306c>
   11760:	cmp	r0, #0
   11764:	beq	1178c <__assert_fail@plt+0x8c8>
   11768:	movw	r0, #20804	; 0x5144
   1176c:	movt	r0, #2
   11770:	ldrb	r0, [r0]
   11774:	cmp	r0, #0
   11778:	beq	117ac <__assert_fail@plt+0x8e8>
   1177c:	bl	10e10 <__errno_location@plt>
   11780:	ldr	r0, [r0]
   11784:	cmp	r0, #32
   11788:	bne	117ac <__assert_fail@plt+0x8e8>
   1178c:	movw	r0, #20776	; 0x5128
   11790:	movt	r0, #2
   11794:	ldr	r0, [r0]
   11798:	bl	13f30 <__assert_fail@plt+0x306c>
   1179c:	cmp	r0, #0
   117a0:	subeq	sp, fp, #16
   117a4:	popeq	{r4, r5, r6, sl, fp, pc}
   117a8:	b	1181c <__assert_fail@plt+0x958>
   117ac:	movw	r1, #17195	; 0x432b
   117b0:	mov	r0, #0
   117b4:	mov	r2, #5
   117b8:	movt	r1, #1
   117bc:	bl	10d38 <dcgettext@plt>
   117c0:	mov	r4, r0
   117c4:	movw	r0, #20800	; 0x5140
   117c8:	movt	r0, #2
   117cc:	ldr	r6, [r0]
   117d0:	bl	10e10 <__errno_location@plt>
   117d4:	ldr	r5, [r0]
   117d8:	cmp	r6, #0
   117dc:	bne	117f8 <__assert_fail@plt+0x934>
   117e0:	movw	r2, #17735	; 0x4547
   117e4:	mov	r0, #0
   117e8:	mov	r1, r5
   117ec:	mov	r3, r4
   117f0:	movt	r2, #1
   117f4:	b	11818 <__assert_fail@plt+0x954>
   117f8:	mov	r0, r6
   117fc:	bl	12ff0 <__assert_fail@plt+0x212c>
   11800:	movw	r2, #17731	; 0x4543
   11804:	mov	r3, r0
   11808:	str	r4, [sp]
   1180c:	mov	r0, #0
   11810:	mov	r1, r5
   11814:	movt	r2, #1
   11818:	bl	10d98 <error@plt>
   1181c:	movw	r0, #20692	; 0x50d4
   11820:	movt	r0, #2
   11824:	ldr	r0, [r0]
   11828:	bl	10d08 <_exit@plt>
   1182c:	push	{r4, r5, fp, lr}
   11830:	add	fp, sp, #8
   11834:	cmp	r0, #0
   11838:	beq	118cc <__assert_fail@plt+0xa08>
   1183c:	mov	r1, #47	; 0x2f
   11840:	mov	r4, r0
   11844:	bl	10e64 <strrchr@plt>
   11848:	cmp	r0, #0
   1184c:	mov	r5, r4
   11850:	addne	r5, r0, #1
   11854:	sub	r0, r5, r4
   11858:	cmp	r0, #7
   1185c:	blt	118b0 <__assert_fail@plt+0x9ec>
   11860:	movw	r1, #17794	; 0x4582
   11864:	sub	r0, r5, #7
   11868:	mov	r2, #7
   1186c:	movt	r1, #1
   11870:	bl	10eac <strncmp@plt>
   11874:	cmp	r0, #0
   11878:	bne	118b0 <__assert_fail@plt+0x9ec>
   1187c:	movw	r1, #17802	; 0x458a
   11880:	mov	r0, r5
   11884:	mov	r2, #3
   11888:	movt	r1, #1
   1188c:	bl	10eac <strncmp@plt>
   11890:	cmp	r0, #0
   11894:	beq	118a0 <__assert_fail@plt+0x9dc>
   11898:	mov	r4, r5
   1189c:	b	118b0 <__assert_fail@plt+0x9ec>
   118a0:	movw	r0, #20760	; 0x5118
   118a4:	add	r4, r5, #3
   118a8:	movt	r0, #2
   118ac:	str	r4, [r0]
   118b0:	movw	r0, #20764	; 0x511c
   118b4:	movt	r0, #2
   118b8:	str	r4, [r0]
   118bc:	movw	r0, #20808	; 0x5148
   118c0:	movt	r0, #2
   118c4:	str	r4, [r0]
   118c8:	pop	{r4, r5, fp, pc}
   118cc:	movw	r0, #20776	; 0x5128
   118d0:	movt	r0, #2
   118d4:	ldr	r1, [r0]
   118d8:	movw	r0, #17738	; 0x454a
   118dc:	movt	r0, #1
   118e0:	bl	10ea0 <fputs@plt>
   118e4:	bl	10eb8 <abort@plt>
   118e8:	push	{r4, r5, r6, sl, fp, lr}
   118ec:	add	fp, sp, #16
   118f0:	mov	r4, r0
   118f4:	movw	r0, #20816	; 0x5150
   118f8:	movt	r0, #2
   118fc:	cmp	r4, #0
   11900:	moveq	r4, r0
   11904:	bl	10e10 <__errno_location@plt>
   11908:	ldr	r6, [r0]
   1190c:	mov	r5, r0
   11910:	mov	r0, r4
   11914:	mov	r1, #48	; 0x30
   11918:	bl	13b54 <__assert_fail@plt+0x2c90>
   1191c:	str	r6, [r5]
   11920:	pop	{r4, r5, r6, sl, fp, pc}
   11924:	movw	r1, #20816	; 0x5150
   11928:	cmp	r0, #0
   1192c:	movt	r1, #2
   11930:	movne	r1, r0
   11934:	ldr	r0, [r1]
   11938:	bx	lr
   1193c:	movw	r2, #20816	; 0x5150
   11940:	cmp	r0, #0
   11944:	movt	r2, #2
   11948:	movne	r2, r0
   1194c:	str	r1, [r2]
   11950:	bx	lr
   11954:	movw	r3, #20816	; 0x5150
   11958:	cmp	r0, #0
   1195c:	movt	r3, #2
   11960:	movne	r3, r0
   11964:	ubfx	r0, r1, #5, #3
   11968:	and	r1, r1, #31
   1196c:	add	r0, r3, r0, lsl #2
   11970:	ldr	r3, [r0, #8]
   11974:	eor	r2, r2, r3, lsr r1
   11978:	and	r2, r2, #1
   1197c:	eor	r2, r3, r2, lsl r1
   11980:	str	r2, [r0, #8]
   11984:	mov	r0, #1
   11988:	and	r0, r0, r3, lsr r1
   1198c:	bx	lr
   11990:	movw	r2, #20816	; 0x5150
   11994:	cmp	r0, #0
   11998:	movt	r2, #2
   1199c:	movne	r2, r0
   119a0:	ldr	r0, [r2, #4]
   119a4:	str	r1, [r2, #4]
   119a8:	bx	lr
   119ac:	movw	r3, #20816	; 0x5150
   119b0:	cmp	r0, #0
   119b4:	movt	r3, #2
   119b8:	movne	r3, r0
   119bc:	cmp	r1, #0
   119c0:	mov	r0, #10
   119c4:	cmpne	r2, #0
   119c8:	str	r0, [r3]
   119cc:	bne	119dc <__assert_fail@plt+0xb18>
   119d0:	push	{fp, lr}
   119d4:	mov	fp, sp
   119d8:	bl	10eb8 <abort@plt>
   119dc:	str	r1, [r3, #40]	; 0x28
   119e0:	str	r2, [r3, #44]	; 0x2c
   119e4:	bx	lr
   119e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119ec:	add	fp, sp, #28
   119f0:	sub	sp, sp, #20
   119f4:	mov	r7, r0
   119f8:	ldr	r0, [fp, #8]
   119fc:	movw	r5, #20816	; 0x5150
   11a00:	mov	r8, r3
   11a04:	mov	r9, r2
   11a08:	mov	sl, r1
   11a0c:	movt	r5, #2
   11a10:	cmp	r0, #0
   11a14:	movne	r5, r0
   11a18:	bl	10e10 <__errno_location@plt>
   11a1c:	mov	r4, r0
   11a20:	ldm	r5, {r0, r1}
   11a24:	ldr	r2, [r5, #40]	; 0x28
   11a28:	ldr	r3, [r5, #44]	; 0x2c
   11a2c:	add	r5, r5, #8
   11a30:	ldr	r6, [r4]
   11a34:	stm	sp, {r0, r1, r5}
   11a38:	str	r2, [sp, #12]
   11a3c:	str	r3, [sp, #16]
   11a40:	mov	r0, r7
   11a44:	mov	r1, sl
   11a48:	mov	r2, r9
   11a4c:	mov	r3, r8
   11a50:	bl	11a60 <__assert_fail@plt+0xb9c>
   11a54:	str	r6, [r4]
   11a58:	sub	sp, fp, #28
   11a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a64:	add	fp, sp, #28
   11a68:	sub	sp, sp, #156	; 0x9c
   11a6c:	str	r0, [fp, #-56]	; 0xffffffc8
   11a70:	ldr	r0, [fp, #12]
   11a74:	mov	r4, r1
   11a78:	str	r3, [sp, #80]	; 0x50
   11a7c:	str	r2, [fp, #-84]	; 0xffffffac
   11a80:	and	r1, r0, #4
   11a84:	str	r1, [sp, #24]
   11a88:	and	r1, r0, #1
   11a8c:	str	r1, [sp, #28]
   11a90:	ubfx	r7, r0, #1, #1
   11a94:	bl	10d74 <__ctype_get_mb_cur_max@plt>
   11a98:	str	r0, [sp, #32]
   11a9c:	ldr	r0, [fp, #24]
   11aa0:	ldr	r9, [fp, #8]
   11aa4:	mov	r2, #0
   11aa8:	mov	r1, #0
   11aac:	mov	r5, #0
   11ab0:	str	r2, [sp, #52]	; 0x34
   11ab4:	mov	r2, #1
   11ab8:	str	r0, [sp, #72]	; 0x48
   11abc:	ldr	r0, [fp, #20]
   11ac0:	str	r0, [sp, #64]	; 0x40
   11ac4:	mov	r0, #0
   11ac8:	str	r0, [sp, #92]	; 0x5c
   11acc:	mov	r0, #0
   11ad0:	str	r0, [fp, #-76]	; 0xffffffb4
   11ad4:	mov	r0, #0
   11ad8:	cmp	r9, #10
   11adc:	str	r1, [sp, #68]	; 0x44
   11ae0:	bhi	12ae0 <__assert_fail@plt+0x1c1c>
   11ae4:	add	r1, pc, #28
   11ae8:	ldr	ip, [fp, #-84]	; 0xffffffac
   11aec:	ldr	lr, [sp, #80]	; 0x50
   11af0:	mov	r6, r4
   11af4:	mov	r8, #0
   11af8:	mov	r3, #1
   11afc:	mov	sl, #0
   11b00:	mov	r4, r2
   11b04:	ldr	pc, [r1, r9, lsl #2]
   11b08:	ldrdeq	r1, [r1], -r8
   11b0c:	andeq	r1, r1, r4, lsl ip
   11b10:	andeq	r1, r1, r8, ror #23
   11b14:	ldrdeq	r1, [r1], -r0
   11b18:	andeq	r1, r1, r8, lsl #24
   11b1c:	andeq	r1, r1, r0, ror #24
   11b20:	strdeq	r1, [r1], -r8
   11b24:	andeq	r1, r1, r0, asr #25
   11b28:	andeq	r1, r1, r4, lsr fp
   11b2c:	andeq	r1, r1, r4, lsr fp
   11b30:	andeq	r1, r1, ip, asr fp
   11b34:	movw	r0, #17884	; 0x45dc
   11b38:	mov	r1, r9
   11b3c:	movt	r0, #1
   11b40:	bl	13248 <__assert_fail@plt+0x2384>
   11b44:	str	r0, [sp, #64]	; 0x40
   11b48:	movw	r0, #17886	; 0x45de
   11b4c:	mov	r1, r9
   11b50:	movt	r0, #1
   11b54:	bl	13248 <__assert_fail@plt+0x2384>
   11b58:	str	r0, [sp, #72]	; 0x48
   11b5c:	mov	r8, #0
   11b60:	mov	sl, r7
   11b64:	tst	r7, #1
   11b68:	str	r5, [fp, #-48]	; 0xffffffd0
   11b6c:	bne	11ba8 <__assert_fail@plt+0xce4>
   11b70:	ldr	r0, [sp, #64]	; 0x40
   11b74:	ldrb	r0, [r0]
   11b78:	cmp	r0, #0
   11b7c:	beq	11ba8 <__assert_fail@plt+0xce4>
   11b80:	ldr	r1, [sp, #64]	; 0x40
   11b84:	mov	r8, #0
   11b88:	add	r1, r1, #1
   11b8c:	cmp	r8, r6
   11b90:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   11b94:	strbcc	r0, [r2, r8]
   11b98:	ldrb	r0, [r1, r8]
   11b9c:	add	r8, r8, #1
   11ba0:	cmp	r0, #0
   11ba4:	bne	11b8c <__assert_fail@plt+0xcc8>
   11ba8:	ldr	r7, [sp, #72]	; 0x48
   11bac:	mov	r0, r7
   11bb0:	bl	10df8 <strlen@plt>
   11bb4:	ldr	ip, [fp, #-84]	; 0xffffffac
   11bb8:	ldr	lr, [sp, #80]	; 0x50
   11bbc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   11bc0:	str	r0, [fp, #-76]	; 0xffffffb4
   11bc4:	str	r7, [sp, #92]	; 0x5c
   11bc8:	mov	r3, #1
   11bcc:	b	11cc0 <__assert_fail@plt+0xdfc>
   11bd0:	mov	r0, #1
   11bd4:	b	11c14 <__assert_fail@plt+0xd50>
   11bd8:	mov	r9, #0
   11bdc:	mov	r8, #0
   11be0:	mov	r3, r0
   11be4:	b	11cbc <__assert_fail@plt+0xdf8>
   11be8:	tst	r7, #1
   11bec:	bne	11c14 <__assert_fail@plt+0xd50>
   11bf0:	mov	r3, r0
   11bf4:	b	11c3c <__assert_fail@plt+0xd78>
   11bf8:	mov	r0, #1
   11bfc:	mov	r8, #0
   11c00:	mov	r9, #5
   11c04:	b	11c74 <__assert_fail@plt+0xdb0>
   11c08:	mov	r3, #1
   11c0c:	tst	r7, #1
   11c10:	beq	11c3c <__assert_fail@plt+0xd78>
   11c14:	mov	r1, #1
   11c18:	mov	r8, #0
   11c1c:	mov	r9, #2
   11c20:	mov	r3, r0
   11c24:	mov	sl, #1
   11c28:	str	r1, [fp, #-76]	; 0xffffffb4
   11c2c:	movw	r1, #17886	; 0x45de
   11c30:	movt	r1, #1
   11c34:	str	r1, [sp, #92]	; 0x5c
   11c38:	b	11cc0 <__assert_fail@plt+0xdfc>
   11c3c:	cmp	r6, #0
   11c40:	mov	r8, #1
   11c44:	mov	r9, #2
   11c48:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   11c4c:	movne	r0, #39	; 0x27
   11c50:	strbne	r0, [r1]
   11c54:	movw	r0, #17886	; 0x45de
   11c58:	movt	r0, #1
   11c5c:	b	11cb0 <__assert_fail@plt+0xdec>
   11c60:	mov	r9, #5
   11c64:	tst	r7, #1
   11c68:	beq	11c90 <__assert_fail@plt+0xdcc>
   11c6c:	mov	r0, #1
   11c70:	mov	r8, #0
   11c74:	str	r0, [fp, #-76]	; 0xffffffb4
   11c78:	movw	r0, #17882	; 0x45da
   11c7c:	mov	r3, #1
   11c80:	mov	sl, #1
   11c84:	movt	r0, #1
   11c88:	str	r0, [sp, #92]	; 0x5c
   11c8c:	b	11cc0 <__assert_fail@plt+0xdfc>
   11c90:	cmp	r6, #0
   11c94:	mov	r8, #1
   11c98:	mov	r3, #1
   11c9c:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   11ca0:	movne	r0, #34	; 0x22
   11ca4:	strbne	r0, [r1]
   11ca8:	movw	r0, #17882	; 0x45da
   11cac:	movt	r0, #1
   11cb0:	str	r0, [sp, #92]	; 0x5c
   11cb4:	mov	r0, #1
   11cb8:	str	r0, [fp, #-76]	; 0xffffffb4
   11cbc:	mov	sl, #0
   11cc0:	ldr	r0, [fp, #16]
   11cc4:	mov	r7, #0
   11cc8:	str	r9, [fp, #-64]	; 0xffffffc0
   11ccc:	str	sl, [fp, #-72]	; 0xffffffb8
   11cd0:	str	r3, [sp, #84]	; 0x54
   11cd4:	cmp	r0, #0
   11cd8:	movwne	r0, #1
   11cdc:	and	r0, r0, sl
   11ce0:	str	r0, [fp, #-88]	; 0xffffffa8
   11ce4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11ce8:	cmp	r0, #0
   11cec:	movwne	r0, #1
   11cf0:	subs	r2, r9, #2
   11cf4:	and	r1, r0, sl
   11cf8:	str	r2, [fp, #-80]	; 0xffffffb0
   11cfc:	and	r1, r3, r1
   11d00:	str	r1, [sp, #44]	; 0x2c
   11d04:	clz	r1, r2
   11d08:	lsr	r1, r1, #5
   11d0c:	and	r1, r1, sl
   11d10:	str	r1, [sp, #56]	; 0x38
   11d14:	mov	r1, r2
   11d18:	eor	r2, sl, #1
   11d1c:	movwne	r1, #1
   11d20:	str	r2, [sp, #88]	; 0x58
   11d24:	orr	r2, r1, r2
   11d28:	and	r1, r1, r3
   11d2c:	and	r0, r0, r1
   11d30:	str	r2, [sp, #60]	; 0x3c
   11d34:	str	r1, [fp, #-68]	; 0xffffffbc
   11d38:	str	r0, [fp, #-60]	; 0xffffffc4
   11d3c:	eor	r0, r3, #1
   11d40:	str	r0, [sp, #48]	; 0x30
   11d44:	cmn	lr, #1
   11d48:	beq	11d58 <__assert_fail@plt+0xe94>
   11d4c:	cmp	r7, lr
   11d50:	bne	11d64 <__assert_fail@plt+0xea0>
   11d54:	b	12910 <__assert_fail@plt+0x1a4c>
   11d58:	ldrb	r0, [ip, r7]
   11d5c:	cmp	r0, #0
   11d60:	beq	12918 <__assert_fail@plt+0x1a54>
   11d64:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11d68:	mov	r9, #0
   11d6c:	str	r5, [fp, #-48]	; 0xffffffd0
   11d70:	str	r6, [fp, #-52]	; 0xffffffcc
   11d74:	cmp	r0, #0
   11d78:	beq	11db8 <__assert_fail@plt+0xef4>
   11d7c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   11d80:	mov	r5, r4
   11d84:	add	r4, r7, r0
   11d88:	cmp	r0, #2
   11d8c:	bcc	11da8 <__assert_fail@plt+0xee4>
   11d90:	cmn	lr, #1
   11d94:	bne	11da8 <__assert_fail@plt+0xee4>
   11d98:	mov	r0, ip
   11d9c:	bl	10df8 <strlen@plt>
   11da0:	ldr	ip, [fp, #-84]	; 0xffffffac
   11da4:	mov	lr, r0
   11da8:	cmp	r4, lr
   11dac:	bls	11dc0 <__assert_fail@plt+0xefc>
   11db0:	mov	r6, #0
   11db4:	b	11e00 <__assert_fail@plt+0xf3c>
   11db8:	mov	r6, #0
   11dbc:	b	11e04 <__assert_fail@plt+0xf40>
   11dc0:	ldr	r1, [sp, #92]	; 0x5c
   11dc4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   11dc8:	add	r0, ip, r7
   11dcc:	mov	r4, lr
   11dd0:	bl	10d2c <memcmp@plt>
   11dd4:	ldr	r2, [sp, #88]	; 0x58
   11dd8:	cmp	r0, #0
   11ddc:	mov	r1, r0
   11de0:	movwne	r1, #1
   11de4:	orr	r1, r1, r2
   11de8:	tst	r1, #1
   11dec:	beq	129ac <__assert_fail@plt+0x1ae8>
   11df0:	ldr	ip, [fp, #-84]	; 0xffffffac
   11df4:	clz	r0, r0
   11df8:	mov	lr, r4
   11dfc:	lsr	r6, r0, #5
   11e00:	mov	r4, r5
   11e04:	ldrb	r5, [ip, r7]
   11e08:	cmp	r5, #126	; 0x7e
   11e0c:	bhi	121d4 <__assert_fail@plt+0x1310>
   11e10:	add	r3, pc, #16
   11e14:	mov	sl, #1
   11e18:	mov	r2, #110	; 0x6e
   11e1c:	mov	r0, #97	; 0x61
   11e20:	mov	r1, #0
   11e24:	ldr	pc, [r3, r5, lsl #2]
   11e28:	strheq	r2, [r1], -r8
   11e2c:	ldrdeq	r2, [r1], -r4
   11e30:	ldrdeq	r2, [r1], -r4
   11e34:	ldrdeq	r2, [r1], -r4
   11e38:	ldrdeq	r2, [r1], -r4
   11e3c:	ldrdeq	r2, [r1], -r4
   11e40:	ldrdeq	r2, [r1], -r4
   11e44:	andeq	r2, r1, r8, ror r2
   11e48:	muleq	r1, r8, r0
   11e4c:	muleq	r1, r0, r0
   11e50:	andeq	r2, r1, r4, lsr #1
   11e54:	andeq	r2, r1, r8, lsr #2
   11e58:	andeq	r2, r1, r8, lsl #1
   11e5c:	andeq	r2, r1, r0, lsr #1
   11e60:	ldrdeq	r2, [r1], -r4
   11e64:	ldrdeq	r2, [r1], -r4
   11e68:	ldrdeq	r2, [r1], -r4
   11e6c:	ldrdeq	r2, [r1], -r4
   11e70:	ldrdeq	r2, [r1], -r4
   11e74:	ldrdeq	r2, [r1], -r4
   11e78:	ldrdeq	r2, [r1], -r4
   11e7c:	ldrdeq	r2, [r1], -r4
   11e80:	ldrdeq	r2, [r1], -r4
   11e84:	ldrdeq	r2, [r1], -r4
   11e88:	ldrdeq	r2, [r1], -r4
   11e8c:	ldrdeq	r2, [r1], -r4
   11e90:	ldrdeq	r2, [r1], -r4
   11e94:	ldrdeq	r2, [r1], -r4
   11e98:	ldrdeq	r2, [r1], -r4
   11e9c:	ldrdeq	r2, [r1], -r4
   11ea0:	ldrdeq	r2, [r1], -r4
   11ea4:	ldrdeq	r2, [r1], -r4
   11ea8:	andeq	r2, r1, r8, lsr r2
   11eac:	andeq	r2, r1, ip, lsr r2
   11eb0:	andeq	r2, r1, ip, lsr r2
   11eb4:	andeq	r2, r1, r8, lsr r0
   11eb8:	andeq	r2, r1, ip, lsr r2
   11ebc:	andeq	r2, r1, r4, lsr #32
   11ec0:	andeq	r2, r1, ip, lsr r2
   11ec4:	andeq	r2, r1, r0, lsr r1
   11ec8:	andeq	r2, r1, ip, lsr r2
   11ecc:	andeq	r2, r1, ip, lsr r2
   11ed0:	andeq	r2, r1, ip, lsr r2
   11ed4:	andeq	r2, r1, r4, lsr #32
   11ed8:	andeq	r2, r1, r4, lsr #32
   11edc:	andeq	r2, r1, r4, lsr #32
   11ee0:	andeq	r2, r1, r4, lsr #32
   11ee4:	andeq	r2, r1, r4, lsr #32
   11ee8:	andeq	r2, r1, r4, lsr #32
   11eec:	andeq	r2, r1, r4, lsr #32
   11ef0:	andeq	r2, r1, r4, lsr #32
   11ef4:	andeq	r2, r1, r4, lsr #32
   11ef8:	andeq	r2, r1, r4, lsr #32
   11efc:	andeq	r2, r1, r4, lsr #32
   11f00:	andeq	r2, r1, r4, lsr #32
   11f04:	andeq	r2, r1, r4, lsr #32
   11f08:	andeq	r2, r1, r4, lsr #32
   11f0c:	andeq	r2, r1, r4, lsr #32
   11f10:	andeq	r2, r1, r4, lsr #32
   11f14:	andeq	r2, r1, ip, lsr r2
   11f18:	andeq	r2, r1, ip, lsr r2
   11f1c:	andeq	r2, r1, ip, lsr r2
   11f20:	andeq	r2, r1, ip, lsr r2
   11f24:	strdeq	r2, [r1], -ip
   11f28:	ldrdeq	r2, [r1], -r4
   11f2c:	andeq	r2, r1, r4, lsr #32
   11f30:	andeq	r2, r1, r4, lsr #32
   11f34:	andeq	r2, r1, r4, lsr #32
   11f38:	andeq	r2, r1, r4, lsr #32
   11f3c:	andeq	r2, r1, r4, lsr #32
   11f40:	andeq	r2, r1, r4, lsr #32
   11f44:	andeq	r2, r1, r4, lsr #32
   11f48:	andeq	r2, r1, r4, lsr #32
   11f4c:	andeq	r2, r1, r4, lsr #32
   11f50:	andeq	r2, r1, r4, lsr #32
   11f54:	andeq	r2, r1, r4, lsr #32
   11f58:	andeq	r2, r1, r4, lsr #32
   11f5c:	andeq	r2, r1, r4, lsr #32
   11f60:	andeq	r2, r1, r4, lsr #32
   11f64:	andeq	r2, r1, r4, lsr #32
   11f68:	andeq	r2, r1, r4, lsr #32
   11f6c:	andeq	r2, r1, r4, lsr #32
   11f70:	andeq	r2, r1, r4, lsr #32
   11f74:	andeq	r2, r1, r4, lsr #32
   11f78:	andeq	r2, r1, r4, lsr #32
   11f7c:	andeq	r2, r1, r4, lsr #32
   11f80:	andeq	r2, r1, r4, lsr #32
   11f84:	andeq	r2, r1, r4, lsr #32
   11f88:	andeq	r2, r1, r4, lsr #32
   11f8c:	andeq	r2, r1, r4, lsr #32
   11f90:	andeq	r2, r1, r4, lsr #32
   11f94:	andeq	r2, r1, ip, lsr r2
   11f98:	andeq	r2, r1, r4, rrx
   11f9c:	andeq	r2, r1, r4, lsr #32
   11fa0:	andeq	r2, r1, ip, lsr r2
   11fa4:	andeq	r2, r1, r4, lsr #32
   11fa8:	andeq	r2, r1, ip, lsr r2
   11fac:	andeq	r2, r1, r4, lsr #32
   11fb0:	andeq	r2, r1, r4, lsr #32
   11fb4:	andeq	r2, r1, r4, lsr #32
   11fb8:	andeq	r2, r1, r4, lsr #32
   11fbc:	andeq	r2, r1, r4, lsr #32
   11fc0:	andeq	r2, r1, r4, lsr #32
   11fc4:	andeq	r2, r1, r4, lsr #32
   11fc8:	andeq	r2, r1, r4, lsr #32
   11fcc:	andeq	r2, r1, r4, lsr #32
   11fd0:	andeq	r2, r1, r4, lsr #32
   11fd4:	andeq	r2, r1, r4, lsr #32
   11fd8:	andeq	r2, r1, r4, lsr #32
   11fdc:	andeq	r2, r1, r4, lsr #32
   11fe0:	andeq	r2, r1, r4, lsr #32
   11fe4:	andeq	r2, r1, r4, lsr #32
   11fe8:	andeq	r2, r1, r4, lsr #32
   11fec:	andeq	r2, r1, r4, lsr #32
   11ff0:	andeq	r2, r1, r4, lsr #32
   11ff4:	andeq	r2, r1, r4, lsr #32
   11ff8:	andeq	r2, r1, r4, lsr #32
   11ffc:	andeq	r2, r1, r4, lsr #32
   12000:	andeq	r2, r1, r4, lsr #32
   12004:	andeq	r2, r1, r4, lsr #32
   12008:	andeq	r2, r1, r4, lsr #32
   1200c:	andeq	r2, r1, r4, lsr #32
   12010:	andeq	r2, r1, r4, lsr #32
   12014:	andeq	r2, r1, r8, asr #32
   12018:	andeq	r2, r1, ip, lsr r2
   1201c:	andeq	r2, r1, r8, asr #32
   12020:	andeq	r2, r1, r8, lsr r0
   12024:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12028:	cmp	r0, #0
   1202c:	beq	1228c <__assert_fail@plt+0x13c8>
   12030:	ldr	r0, [fp, #16]
   12034:	b	12290 <__assert_fail@plt+0x13cc>
   12038:	mov	sl, #0
   1203c:	cmp	r7, #0
   12040:	bne	124a8 <__assert_fail@plt+0x15e4>
   12044:	b	12238 <__assert_fail@plt+0x1374>
   12048:	mov	sl, #0
   1204c:	cmn	lr, #1
   12050:	beq	12224 <__assert_fail@plt+0x1360>
   12054:	cmp	r7, #0
   12058:	cmpeq	lr, #1
   1205c:	bne	124a8 <__assert_fail@plt+0x15e4>
   12060:	b	12238 <__assert_fail@plt+0x1374>
   12064:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12068:	cmp	r0, #2
   1206c:	bne	1225c <__assert_fail@plt+0x1398>
   12070:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12074:	tst	r0, #1
   12078:	bne	129c8 <__assert_fail@plt+0x1b04>
   1207c:	mov	r9, #0
   12080:	mov	r0, #92	; 0x5c
   12084:	b	12270 <__assert_fail@plt+0x13ac>
   12088:	mov	r0, #102	; 0x66
   1208c:	b	12278 <__assert_fail@plt+0x13b4>
   12090:	mov	r2, #116	; 0x74
   12094:	b	120a4 <__assert_fail@plt+0x11e0>
   12098:	mov	r0, #98	; 0x62
   1209c:	b	12278 <__assert_fail@plt+0x13b4>
   120a0:	mov	r2, #114	; 0x72
   120a4:	ldr	r0, [sp, #60]	; 0x3c
   120a8:	tst	r0, #1
   120ac:	mov	r0, r2
   120b0:	bne	12278 <__assert_fail@plt+0x13b4>
   120b4:	b	129c8 <__assert_fail@plt+0x1b04>
   120b8:	ldr	r0, [sp, #84]	; 0x54
   120bc:	tst	r0, #1
   120c0:	beq	12364 <__assert_fail@plt+0x14a0>
   120c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   120c8:	tst	r0, #1
   120cc:	bne	12ad0 <__assert_fail@plt+0x1c0c>
   120d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   120d4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   120d8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   120dc:	cmp	r0, #2
   120e0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   120e4:	movwne	r0, #1
   120e8:	orr	r0, r0, r3
   120ec:	tst	r0, #1
   120f0:	beq	127e4 <__assert_fail@plt+0x1920>
   120f4:	mov	r0, r8
   120f8:	b	12824 <__assert_fail@plt+0x1960>
   120fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12100:	mov	r9, #0
   12104:	mov	r5, #63	; 0x3f
   12108:	cmp	r0, #5
   1210c:	beq	124b0 <__assert_fail@plt+0x15ec>
   12110:	cmp	r0, #2
   12114:	bne	12570 <__assert_fail@plt+0x16ac>
   12118:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1211c:	tst	r0, #1
   12120:	beq	12574 <__assert_fail@plt+0x16b0>
   12124:	b	129c8 <__assert_fail@plt+0x1b04>
   12128:	mov	r0, #118	; 0x76
   1212c:	b	12278 <__assert_fail@plt+0x13b4>
   12130:	mov	r0, #1
   12134:	mov	r5, #39	; 0x27
   12138:	str	r0, [sp, #52]	; 0x34
   1213c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12140:	cmp	r0, #2
   12144:	bne	121cc <__assert_fail@plt+0x1308>
   12148:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1214c:	tst	r0, #1
   12150:	bne	129c8 <__assert_fail@plt+0x1b04>
   12154:	ldr	r3, [sp, #68]	; 0x44
   12158:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1215c:	mov	r9, #0
   12160:	clz	r1, r2
   12164:	cmp	r3, #0
   12168:	mov	r0, r3
   1216c:	movwne	r0, #1
   12170:	lsr	r1, r1, #5
   12174:	orrs	r0, r0, r1
   12178:	moveq	r3, r2
   1217c:	moveq	r2, r0
   12180:	cmp	r8, r2
   12184:	str	r3, [sp, #68]	; 0x44
   12188:	str	r2, [fp, #-52]	; 0xffffffcc
   1218c:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   12190:	movcc	r0, #39	; 0x27
   12194:	strbcc	r0, [r1, r8]
   12198:	add	r0, r8, #1
   1219c:	cmp	r0, r2
   121a0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   121a4:	movcc	r1, #92	; 0x5c
   121a8:	strbcc	r1, [r3, r0]
   121ac:	add	r0, r8, #2
   121b0:	add	r8, r8, #3
   121b4:	cmp	r0, r2
   121b8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   121bc:	movcc	r1, #39	; 0x27
   121c0:	strbcc	r1, [r2, r0]
   121c4:	mov	r0, #0
   121c8:	str	r0, [fp, #-48]	; 0xffffffd0
   121cc:	mov	sl, #1
   121d0:	b	12024 <__assert_fail@plt+0x1160>
   121d4:	ldr	r0, [sp, #32]
   121d8:	cmp	r0, #1
   121dc:	bne	12388 <__assert_fail@plt+0x14c4>
   121e0:	str	lr, [sp, #80]	; 0x50
   121e4:	bl	10de0 <__ctype_b_loc@plt>
   121e8:	ldr	r0, [r0]
   121ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   121f0:	mov	r1, #1
   121f4:	add	r0, r0, r5, lsl #1
   121f8:	ldrb	r0, [r0, #1]
   121fc:	ubfx	sl, r0, #6, #1
   12200:	ldr	r0, [sp, #48]	; 0x30
   12204:	mov	r2, r1
   12208:	cmp	r1, #1
   1220c:	orr	r0, sl, r0
   12210:	bhi	1257c <__assert_fail@plt+0x16b8>
   12214:	tst	r0, #1
   12218:	beq	1257c <__assert_fail@plt+0x16b8>
   1221c:	ldr	lr, [sp, #80]	; 0x50
   12220:	b	12024 <__assert_fail@plt+0x1160>
   12224:	cmp	r7, #0
   12228:	bne	124a4 <__assert_fail@plt+0x15e0>
   1222c:	ldrb	r0, [ip, #1]
   12230:	cmp	r0, #0
   12234:	bne	124a4 <__assert_fail@plt+0x15e0>
   12238:	mov	r1, #1
   1223c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12240:	cmp	r0, #2
   12244:	bne	12254 <__assert_fail@plt+0x1390>
   12248:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1224c:	tst	r0, #1
   12250:	bne	129c8 <__assert_fail@plt+0x1b04>
   12254:	mov	sl, r1
   12258:	b	12024 <__assert_fail@plt+0x1160>
   1225c:	ldr	r1, [sp, #44]	; 0x2c
   12260:	mov	r9, #0
   12264:	mov	r0, #92	; 0x5c
   12268:	cmp	r1, #0
   1226c:	beq	12278 <__assert_fail@plt+0x13b4>
   12270:	mov	sl, #0
   12274:	b	12790 <__assert_fail@plt+0x18cc>
   12278:	ldr	r1, [sp, #84]	; 0x54
   1227c:	mov	sl, #0
   12280:	mov	r9, #0
   12284:	tst	r1, #1
   12288:	bne	122c4 <__assert_fail@plt+0x1400>
   1228c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12290:	cmp	r0, #0
   12294:	mov	r0, r5
   12298:	beq	122bc <__assert_fail@plt+0x13f8>
   1229c:	ldr	r1, [fp, #16]
   122a0:	ubfx	r0, r5, #5, #3
   122a4:	mov	r2, #1
   122a8:	ldr	r0, [r1, r0, lsl #2]
   122ac:	and	r1, r5, #31
   122b0:	tst	r0, r2, lsl r1
   122b4:	mov	r0, r5
   122b8:	bne	122c4 <__assert_fail@plt+0x1400>
   122bc:	cmp	r6, #0
   122c0:	beq	12790 <__assert_fail@plt+0x18cc>
   122c4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   122c8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   122cc:	tst	r1, #1
   122d0:	bne	129a4 <__assert_fail@plt+0x1ae0>
   122d4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   122d8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   122dc:	cmp	r1, #2
   122e0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   122e4:	movwne	r1, #1
   122e8:	orr	r1, r1, r5
   122ec:	tst	r1, #1
   122f0:	bne	12334 <__assert_fail@plt+0x1470>
   122f4:	cmp	r8, r6
   122f8:	mov	r5, #1
   122fc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12300:	movcc	r1, #39	; 0x27
   12304:	strbcc	r1, [r2, r8]
   12308:	add	r1, r8, #1
   1230c:	cmp	r1, r6
   12310:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12314:	movcc	r2, #36	; 0x24
   12318:	strbcc	r2, [r3, r1]
   1231c:	add	r1, r8, #2
   12320:	add	r8, r8, #3
   12324:	cmp	r1, r6
   12328:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1232c:	movcc	r2, #39	; 0x27
   12330:	strbcc	r2, [r3, r1]
   12334:	cmp	r8, r6
   12338:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1233c:	movcc	r1, #92	; 0x5c
   12340:	strbcc	r1, [r2, r8]
   12344:	add	r8, r8, #1
   12348:	cmp	r8, r6
   1234c:	and	r4, r4, sl
   12350:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   12354:	strbcc	r0, [r1, r8]
   12358:	add	r8, r8, #1
   1235c:	add	r7, r7, #1
   12360:	b	11d44 <__assert_fail@plt+0xe80>
   12364:	ldr	r0, [sp, #28]
   12368:	mov	sl, #0
   1236c:	mov	r9, #0
   12370:	mov	r5, #0
   12374:	cmp	r0, #0
   12378:	beq	1228c <__assert_fail@plt+0x13c8>
   1237c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12380:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12384:	b	1235c <__assert_fail@plt+0x1498>
   12388:	mov	r0, #0
   1238c:	cmn	lr, #1
   12390:	str	r6, [sp, #76]	; 0x4c
   12394:	str	r4, [sp, #20]
   12398:	str	r0, [fp, #-36]	; 0xffffffdc
   1239c:	str	r0, [fp, #-40]	; 0xffffffd8
   123a0:	bne	123b4 <__assert_fail@plt+0x14f0>
   123a4:	mov	r0, ip
   123a8:	bl	10df8 <strlen@plt>
   123ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   123b0:	mov	lr, r0
   123b4:	add	r0, ip, r7
   123b8:	mov	sl, #1
   123bc:	mov	r6, #0
   123c0:	sub	r4, fp, #40	; 0x28
   123c4:	str	lr, [sp, #80]	; 0x50
   123c8:	str	r0, [sp, #36]	; 0x24
   123cc:	str	r6, [sp, #40]	; 0x28
   123d0:	add	r6, r6, r7
   123d4:	sub	r0, fp, #44	; 0x2c
   123d8:	mov	r3, r4
   123dc:	add	r1, ip, r6
   123e0:	sub	r2, lr, r6
   123e4:	bl	13e44 <__assert_fail@plt+0x2f80>
   123e8:	cmp	r0, #0
   123ec:	beq	128f8 <__assert_fail@plt+0x1a34>
   123f0:	cmn	r0, #1
   123f4:	beq	128b8 <__assert_fail@plt+0x19f4>
   123f8:	ldr	lr, [sp, #80]	; 0x50
   123fc:	cmn	r0, #2
   12400:	beq	128c0 <__assert_fail@plt+0x19fc>
   12404:	ldr	r2, [sp, #56]	; 0x38
   12408:	cmp	r0, #2
   1240c:	mov	r1, #0
   12410:	movwcc	r1, #1
   12414:	eor	r2, r2, #1
   12418:	orrs	r1, r2, r1
   1241c:	bne	12468 <__assert_fail@plt+0x15a4>
   12420:	ldr	r1, [sp, #40]	; 0x28
   12424:	ldr	r2, [sp, #36]	; 0x24
   12428:	add	ip, r2, r1
   1242c:	mov	r2, #1
   12430:	ldrb	r3, [ip, r2]
   12434:	sub	r6, r3, #94	; 0x5e
   12438:	cmp	r6, #30
   1243c:	bhi	12450 <__assert_fail@plt+0x158c>
   12440:	mov	r4, #1
   12444:	mov	r1, #1073741829	; 0x40000005
   12448:	tst	r1, r4, lsl r6
   1244c:	bne	129c4 <__assert_fail@plt+0x1b00>
   12450:	sub	r3, r3, #91	; 0x5b
   12454:	cmp	r3, #2
   12458:	bcc	129c4 <__assert_fail@plt+0x1b00>
   1245c:	add	r2, r2, #1
   12460:	cmp	r2, r0
   12464:	bcc	12430 <__assert_fail@plt+0x156c>
   12468:	ldr	r6, [sp, #40]	; 0x28
   1246c:	add	r6, r0, r6
   12470:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12474:	bl	10d50 <iswprint@plt>
   12478:	cmp	r0, #0
   1247c:	sub	r4, fp, #40	; 0x28
   12480:	movwne	r0, #1
   12484:	and	sl, sl, r0
   12488:	mov	r0, r4
   1248c:	bl	10d20 <mbsinit@plt>
   12490:	ldr	lr, [sp, #80]	; 0x50
   12494:	ldr	ip, [fp, #-84]	; 0xffffffac
   12498:	cmp	r0, #0
   1249c:	beq	123cc <__assert_fail@plt+0x1508>
   124a0:	b	12900 <__assert_fail@plt+0x1a3c>
   124a4:	mvn	lr, #0
   124a8:	mov	r9, #0
   124ac:	b	12024 <__assert_fail@plt+0x1160>
   124b0:	ldr	r0, [sp, #24]
   124b4:	cmp	r0, #0
   124b8:	beq	12570 <__assert_fail@plt+0x16ac>
   124bc:	add	r0, r7, #2
   124c0:	cmp	r0, lr
   124c4:	bcs	12570 <__assert_fail@plt+0x16ac>
   124c8:	add	r1, ip, r7
   124cc:	ldrb	r1, [r1, #1]
   124d0:	cmp	r1, #63	; 0x3f
   124d4:	bne	12570 <__assert_fail@plt+0x16ac>
   124d8:	ldrb	r5, [ip, r0]
   124dc:	sub	r1, r5, #33	; 0x21
   124e0:	cmp	r1, #29
   124e4:	bhi	12570 <__assert_fail@plt+0x16ac>
   124e8:	movw	r3, #20929	; 0x51c1
   124ec:	mov	r2, #1
   124f0:	movt	r3, #14336	; 0x3800
   124f4:	tst	r3, r2, lsl r1
   124f8:	beq	12570 <__assert_fail@plt+0x16ac>
   124fc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12500:	tst	r1, #1
   12504:	bne	12ad8 <__assert_fail@plt+0x1c14>
   12508:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1250c:	mov	r7, r0
   12510:	cmp	r8, r1
   12514:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12518:	movcc	r1, #63	; 0x3f
   1251c:	strbcc	r1, [r2, r8]
   12520:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12524:	add	r1, r8, #1
   12528:	cmp	r1, r2
   1252c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12530:	movcc	r2, #34	; 0x22
   12534:	strbcc	r2, [r3, r1]
   12538:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1253c:	add	r1, r8, #2
   12540:	cmp	r1, r2
   12544:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12548:	movcc	r2, #34	; 0x22
   1254c:	strbcc	r2, [r3, r1]
   12550:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12554:	add	r1, r8, #3
   12558:	add	r8, r8, #4
   1255c:	cmp	r1, r2
   12560:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12564:	movcc	r2, #63	; 0x3f
   12568:	strbcc	r2, [r3, r1]
   1256c:	b	12574 <__assert_fail@plt+0x16b0>
   12570:	mov	r5, #63	; 0x3f
   12574:	mov	sl, #0
   12578:	b	12024 <__assert_fail@plt+0x1160>
   1257c:	str	r0, [sp, #40]	; 0x28
   12580:	add	r0, r2, r7
   12584:	str	r6, [sp, #76]	; 0x4c
   12588:	add	r1, r7, #1
   1258c:	ldr	lr, [sp, #80]	; 0x50
   12590:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12594:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12598:	mov	r3, #0
   1259c:	str	r0, [sp, #36]	; 0x24
   125a0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   125a4:	b	12638 <__assert_fail@plt+0x1774>
   125a8:	str	r0, [sp, #76]	; 0x4c
   125ac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   125b0:	cmp	r9, #0
   125b4:	movwne	r9, #1
   125b8:	mvn	r7, r0
   125bc:	orr	r7, r7, r9
   125c0:	tst	r7, #1
   125c4:	bne	12614 <__assert_fail@plt+0x1750>
   125c8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   125cc:	cmp	r8, r6
   125d0:	bcs	125e8 <__assert_fail@plt+0x1724>
   125d4:	ldr	r7, [fp, #-56]	; 0xffffffc8
   125d8:	mov	r2, r4
   125dc:	mov	r4, #39	; 0x27
   125e0:	strb	r4, [r7, r8]
   125e4:	mov	r4, r2
   125e8:	add	r7, r8, #1
   125ec:	cmp	r7, r6
   125f0:	bcs	12608 <__assert_fail@plt+0x1744>
   125f4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   125f8:	mov	r2, r4
   125fc:	mov	r4, #39	; 0x27
   12600:	strb	r4, [r0, r7]
   12604:	mov	r4, r2
   12608:	add	r8, r8, #2
   1260c:	mov	r0, #0
   12610:	b	1261c <__assert_fail@plt+0x1758>
   12614:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12618:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1261c:	cmp	r8, r6
   12620:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12624:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12628:	strbcc	r5, [r2, r8]
   1262c:	add	r8, r8, #1
   12630:	ldrb	r5, [ip, r1]
   12634:	add	r1, r1, #1
   12638:	ldr	r2, [sp, #40]	; 0x28
   1263c:	tst	r2, #1
   12640:	beq	1267c <__assert_fail@plt+0x17b8>
   12644:	ldr	r2, [sp, #76]	; 0x4c
   12648:	str	r0, [fp, #-48]	; 0xffffffd0
   1264c:	tst	r2, #1
   12650:	beq	12674 <__assert_fail@plt+0x17b0>
   12654:	cmp	r8, r6
   12658:	bcs	12670 <__assert_fail@plt+0x17ac>
   1265c:	ldr	r6, [fp, #-56]	; 0xffffffc8
   12660:	mov	r2, r4
   12664:	mov	r4, #92	; 0x5c
   12668:	strb	r4, [r6, r8]
   1266c:	mov	r4, r2
   12670:	add	r8, r8, #1
   12674:	mov	r0, #0
   12678:	b	12770 <__assert_fail@plt+0x18ac>
   1267c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12680:	tst	r2, #1
   12684:	bne	129d0 <__assert_fail@plt+0x1b0c>
   12688:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1268c:	cmp	r7, #2
   12690:	movwne	r3, #1
   12694:	orr	r3, r3, r0
   12698:	tst	r3, #1
   1269c:	bne	126f8 <__assert_fail@plt+0x1834>
   126a0:	cmp	r8, r6
   126a4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   126a8:	movcc	r3, #39	; 0x27
   126ac:	strbcc	r3, [r2, r8]
   126b0:	add	r3, r8, #1
   126b4:	cmp	r3, r6
   126b8:	bcs	126d0 <__assert_fail@plt+0x180c>
   126bc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   126c0:	mov	r7, r4
   126c4:	mov	r4, #36	; 0x24
   126c8:	strb	r4, [r2, r3]
   126cc:	mov	r4, r7
   126d0:	add	r3, r8, #2
   126d4:	cmp	r3, r6
   126d8:	bcs	126f0 <__assert_fail@plt+0x182c>
   126dc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   126e0:	mov	r7, r4
   126e4:	mov	r4, #39	; 0x27
   126e8:	strb	r4, [r2, r3]
   126ec:	mov	r4, r7
   126f0:	add	r8, r8, #3
   126f4:	mov	r0, #1
   126f8:	cmp	r8, r6
   126fc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12700:	movcc	r3, #92	; 0x5c
   12704:	strbcc	r3, [r2, r8]
   12708:	add	r3, r8, #1
   1270c:	cmp	r3, r6
   12710:	bcs	12730 <__assert_fail@plt+0x186c>
   12714:	mov	r2, r4
   12718:	and	r7, r5, #192	; 0xc0
   1271c:	mov	r4, #48	; 0x30
   12720:	orr	r7, r4, r7, lsr #6
   12724:	mov	r4, r2
   12728:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1272c:	strb	r7, [r2, r3]
   12730:	add	r3, r8, #2
   12734:	cmp	r3, r6
   12738:	bcs	12758 <__assert_fail@plt+0x1894>
   1273c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12740:	mov	r6, r4
   12744:	lsr	r7, r5, #3
   12748:	mov	r4, #6
   1274c:	bfi	r7, r4, #3, #29
   12750:	mov	r4, r6
   12754:	strb	r7, [r2, r3]
   12758:	str	r0, [fp, #-48]	; 0xffffffd0
   1275c:	ldr	r0, [sp, #76]	; 0x4c
   12760:	mov	r3, #6
   12764:	add	r8, r8, #3
   12768:	bfi	r5, r3, #3, #29
   1276c:	mov	r3, #1
   12770:	ldr	r2, [sp, #36]	; 0x24
   12774:	and	r9, r3, #1
   12778:	cmp	r2, r1
   1277c:	bhi	125a8 <__assert_fail@plt+0x16e4>
   12780:	cmp	r9, #0
   12784:	sub	r7, r1, #1
   12788:	mov	r0, r5
   1278c:	movwne	r9, #1
   12790:	cmp	r9, #0
   12794:	bne	127d8 <__assert_fail@plt+0x1914>
   12798:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1279c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   127a0:	tst	r5, #1
   127a4:	beq	12348 <__assert_fail@plt+0x1484>
   127a8:	cmp	r8, r6
   127ac:	mov	r5, #0
   127b0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   127b4:	movcc	r1, #39	; 0x27
   127b8:	strbcc	r1, [r2, r8]
   127bc:	add	r1, r8, #1
   127c0:	add	r8, r8, #2
   127c4:	cmp	r1, r6
   127c8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   127cc:	movcc	r2, #39	; 0x27
   127d0:	strbcc	r2, [r3, r1]
   127d4:	b	12348 <__assert_fail@plt+0x1484>
   127d8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   127dc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   127e0:	b	12348 <__assert_fail@plt+0x1484>
   127e4:	cmp	r8, r1
   127e8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   127ec:	movcc	r0, #39	; 0x27
   127f0:	strbcc	r0, [r2, r8]
   127f4:	add	r0, r8, #1
   127f8:	cmp	r0, r1
   127fc:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12800:	movcc	r2, #36	; 0x24
   12804:	strbcc	r2, [r3, r0]
   12808:	add	r0, r8, #2
   1280c:	cmp	r0, r1
   12810:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12814:	movcc	r2, #39	; 0x27
   12818:	strbcc	r2, [r3, r0]
   1281c:	add	r0, r8, #3
   12820:	mov	r3, #1
   12824:	cmp	r0, r1
   12828:	add	r8, r0, #1
   1282c:	str	r3, [fp, #-48]	; 0xffffffd0
   12830:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12834:	movcc	r1, #92	; 0x5c
   12838:	strbcc	r1, [r2, r0]
   1283c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12840:	cmp	r1, #2
   12844:	beq	128a8 <__assert_fail@plt+0x19e4>
   12848:	add	r1, r7, #1
   1284c:	mov	sl, #0
   12850:	mov	r9, #1
   12854:	mov	r5, #48	; 0x30
   12858:	cmp	r1, lr
   1285c:	bcs	12024 <__assert_fail@plt+0x1160>
   12860:	ldrb	r1, [ip, r1]
   12864:	sub	r1, r1, #48	; 0x30
   12868:	uxtb	r1, r1
   1286c:	cmp	r1, #9
   12870:	bhi	12024 <__assert_fail@plt+0x1160>
   12874:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12878:	cmp	r8, r1
   1287c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12880:	movcc	r1, #48	; 0x30
   12884:	strbcc	r1, [r2, r8]
   12888:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1288c:	add	r1, r0, #2
   12890:	add	r8, r0, #3
   12894:	cmp	r1, r2
   12898:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1289c:	movcc	r2, #48	; 0x30
   128a0:	strbcc	r2, [r3, r1]
   128a4:	b	12024 <__assert_fail@plt+0x1160>
   128a8:	mov	r0, #48	; 0x30
   128ac:	mov	r9, #1
   128b0:	mov	sl, #0
   128b4:	b	122bc <__assert_fail@plt+0x13f8>
   128b8:	mov	sl, #0
   128bc:	b	128f8 <__assert_fail@plt+0x1a34>
   128c0:	mov	sl, #0
   128c4:	cmp	lr, r6
   128c8:	bls	128f8 <__assert_fail@plt+0x1a34>
   128cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   128d0:	ldr	r6, [sp, #40]	; 0x28
   128d4:	ldr	r0, [sp, #36]	; 0x24
   128d8:	ldrb	r0, [r0, r6]
   128dc:	cmp	r0, #0
   128e0:	beq	12900 <__assert_fail@plt+0x1a3c>
   128e4:	add	r6, r6, #1
   128e8:	add	r0, r7, r6
   128ec:	cmp	r0, lr
   128f0:	bcc	128d4 <__assert_fail@plt+0x1a10>
   128f4:	b	12900 <__assert_fail@plt+0x1a3c>
   128f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   128fc:	ldr	r6, [sp, #40]	; 0x28
   12900:	mov	r1, r6
   12904:	ldr	r4, [sp, #20]
   12908:	ldr	r6, [sp, #76]	; 0x4c
   1290c:	b	12200 <__assert_fail@plt+0x133c>
   12910:	mov	lr, r7
   12914:	b	1291c <__assert_fail@plt+0x1a58>
   12918:	mvn	lr, #0
   1291c:	ldr	r9, [fp, #-64]	; 0xffffffc0
   12920:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12924:	eor	r0, r9, #2
   12928:	orr	r0, r0, r8
   1292c:	clz	r0, r0
   12930:	lsr	r0, r0, #5
   12934:	tst	r1, r0
   12938:	bne	12a34 <__assert_fail@plt+0x1b70>
   1293c:	mov	r0, r1
   12940:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12944:	cmp	r9, #2
   12948:	movwne	r1, #1
   1294c:	orr	r0, r0, r1
   12950:	tst	r0, #1
   12954:	bne	12a74 <__assert_fail@plt+0x1bb0>
   12958:	ldr	r0, [sp, #52]	; 0x34
   1295c:	ldr	r1, [sp, #68]	; 0x44
   12960:	str	lr, [sp, #80]	; 0x50
   12964:	eor	r0, r0, #1
   12968:	tst	r0, #1
   1296c:	bne	12a74 <__assert_fail@plt+0x1bb0>
   12970:	tst	r4, #1
   12974:	bne	12a3c <__assert_fail@plt+0x1b78>
   12978:	mov	r7, #0
   1297c:	cmp	r1, #0
   12980:	beq	12a6c <__assert_fail@plt+0x1ba8>
   12984:	ldr	r0, [sp, #84]	; 0x54
   12988:	mov	r3, #0
   1298c:	cmp	r6, #0
   12990:	mov	r2, #0
   12994:	mov	r4, r1
   12998:	str	r3, [fp, #-72]	; 0xffffffb8
   1299c:	beq	11ad8 <__assert_fail@plt+0xc14>
   129a0:	b	12a74 <__assert_fail@plt+0x1bb0>
   129a4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   129a8:	b	129d0 <__assert_fail@plt+0x1b0c>
   129ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   129b0:	mov	r2, #1
   129b4:	mov	lr, r4
   129b8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   129bc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   129c0:	b	129d4 <__assert_fail@plt+0x1b10>
   129c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   129c8:	mov	r7, #2
   129cc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   129d0:	ldr	r2, [sp, #84]	; 0x54
   129d4:	mov	r0, #0
   129d8:	ldr	r1, [fp, #12]
   129dc:	tst	r2, #1
   129e0:	mov	r2, r7
   129e4:	mov	r3, lr
   129e8:	str	r0, [sp, #8]
   129ec:	ldr	r0, [sp, #64]	; 0x40
   129f0:	movwne	r2, #4
   129f4:	cmp	r7, #2
   129f8:	movne	r2, r7
   129fc:	str	r2, [sp]
   12a00:	mov	r2, ip
   12a04:	bic	r1, r1, #2
   12a08:	str	r0, [sp, #12]
   12a0c:	ldr	r0, [sp, #72]	; 0x48
   12a10:	str	r1, [sp, #4]
   12a14:	mov	r1, r6
   12a18:	str	r0, [sp, #16]
   12a1c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12a20:	bl	11a60 <__assert_fail@plt+0xb9c>
   12a24:	mov	r8, r0
   12a28:	mov	r0, r8
   12a2c:	sub	sp, fp, #28
   12a30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a34:	mov	r7, #2
   12a38:	b	129d0 <__assert_fail@plt+0x1b0c>
   12a3c:	mov	r0, #5
   12a40:	ldr	r2, [fp, #-84]	; 0xffffffac
   12a44:	ldr	r3, [sp, #80]	; 0x50
   12a48:	str	r0, [sp]
   12a4c:	ldr	r0, [fp, #12]
   12a50:	str	r0, [sp, #4]
   12a54:	ldr	r0, [fp, #16]
   12a58:	str	r0, [sp, #8]
   12a5c:	ldr	r0, [sp, #64]	; 0x40
   12a60:	str	r0, [sp, #12]
   12a64:	ldr	r0, [sp, #72]	; 0x48
   12a68:	b	12a18 <__assert_fail@plt+0x1b54>
   12a6c:	mov	r0, #0
   12a70:	str	r0, [fp, #-72]	; 0xffffffb8
   12a74:	ldr	r1, [sp, #92]	; 0x5c
   12a78:	cmp	r1, #0
   12a7c:	beq	12abc <__assert_fail@plt+0x1bf8>
   12a80:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12a84:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12a88:	tst	r0, #1
   12a8c:	bne	12ac0 <__assert_fail@plt+0x1bfc>
   12a90:	ldrb	r0, [r1]
   12a94:	cmp	r0, #0
   12a98:	beq	12ac0 <__assert_fail@plt+0x1bfc>
   12a9c:	add	r1, r1, #1
   12aa0:	cmp	r8, r6
   12aa4:	strbcc	r0, [r2, r8]
   12aa8:	add	r8, r8, #1
   12aac:	ldrb	r0, [r1], #1
   12ab0:	cmp	r0, #0
   12ab4:	bne	12aa0 <__assert_fail@plt+0x1bdc>
   12ab8:	b	12ac0 <__assert_fail@plt+0x1bfc>
   12abc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12ac0:	cmp	r8, r6
   12ac4:	movcc	r0, #0
   12ac8:	strbcc	r0, [r2, r8]
   12acc:	b	12a28 <__assert_fail@plt+0x1b64>
   12ad0:	mov	r2, #1
   12ad4:	b	129b8 <__assert_fail@plt+0x1af4>
   12ad8:	mov	r7, #5
   12adc:	b	129cc <__assert_fail@plt+0x1b08>
   12ae0:	bl	10eb8 <abort@plt>
   12ae4:	mov	r3, r2
   12ae8:	mov	r2, #0
   12aec:	b	12af0 <__assert_fail@plt+0x1c2c>
   12af0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12af4:	add	fp, sp, #28
   12af8:	sub	sp, sp, #36	; 0x24
   12afc:	movw	r8, #20816	; 0x5150
   12b00:	cmp	r3, #0
   12b04:	mov	r4, r2
   12b08:	str	r2, [sp, #24]
   12b0c:	mov	r5, r1
   12b10:	mov	r6, r0
   12b14:	str	r0, [sp, #20]
   12b18:	movt	r8, #2
   12b1c:	movne	r8, r3
   12b20:	bl	10e10 <__errno_location@plt>
   12b24:	str	r0, [sp, #28]
   12b28:	cmp	r4, #0
   12b2c:	add	sl, r8, #8
   12b30:	ldm	r8, {r3, r9}
   12b34:	ldr	r7, [r0]
   12b38:	ldr	r1, [r8, #40]	; 0x28
   12b3c:	ldr	r2, [r8, #44]	; 0x2c
   12b40:	mov	r0, #0
   12b44:	orreq	r9, r9, #1
   12b48:	str	r7, [sp, #32]
   12b4c:	mov	r7, r5
   12b50:	stm	sp, {r3, r9, sl}
   12b54:	str	r1, [sp, #12]
   12b58:	str	r2, [sp, #16]
   12b5c:	mov	r1, #0
   12b60:	mov	r2, r6
   12b64:	mov	r3, r5
   12b68:	bl	11a60 <__assert_fail@plt+0xb9c>
   12b6c:	add	r4, r0, #1
   12b70:	mov	r5, r0
   12b74:	mov	r0, r4
   12b78:	bl	13834 <__assert_fail@plt+0x2970>
   12b7c:	mov	r6, r0
   12b80:	ldr	r0, [r8]
   12b84:	ldr	r2, [r8, #44]	; 0x2c
   12b88:	ldr	r1, [r8, #40]	; 0x28
   12b8c:	mov	r3, r7
   12b90:	stm	sp, {r0, r9, sl}
   12b94:	str	r2, [sp, #16]
   12b98:	str	r1, [sp, #12]
   12b9c:	mov	r0, r6
   12ba0:	mov	r1, r4
   12ba4:	ldr	r2, [sp, #20]
   12ba8:	bl	11a60 <__assert_fail@plt+0xb9c>
   12bac:	ldr	r0, [sp, #24]
   12bb0:	ldr	r1, [sp, #32]
   12bb4:	ldr	r2, [sp, #28]
   12bb8:	cmp	r0, #0
   12bbc:	str	r1, [r2]
   12bc0:	strne	r5, [r0]
   12bc4:	mov	r0, r6
   12bc8:	sub	sp, fp, #28
   12bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bd0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12bd4:	add	fp, sp, #24
   12bd8:	movw	r5, #20700	; 0x50dc
   12bdc:	movw	r8, #20696	; 0x50d8
   12be0:	movt	r5, #2
   12be4:	movt	r8, #2
   12be8:	ldr	r0, [r5]
   12bec:	ldr	r4, [r8]
   12bf0:	cmp	r0, #2
   12bf4:	blt	12c20 <__assert_fail@plt+0x1d5c>
   12bf8:	add	r7, r4, #12
   12bfc:	mov	r6, #0
   12c00:	ldr	r0, [r7, r6, lsl #3]
   12c04:	bl	13d48 <__assert_fail@plt+0x2e84>
   12c08:	ldr	r1, [r5]
   12c0c:	add	r2, r6, #2
   12c10:	add	r0, r6, #1
   12c14:	mov	r6, r0
   12c18:	cmp	r2, r1
   12c1c:	blt	12c00 <__assert_fail@plt+0x1d3c>
   12c20:	ldr	r0, [r4, #4]
   12c24:	movw	r7, #20864	; 0x5180
   12c28:	movt	r7, #2
   12c2c:	cmp	r0, r7
   12c30:	beq	12c48 <__assert_fail@plt+0x1d84>
   12c34:	bl	13d48 <__assert_fail@plt+0x2e84>
   12c38:	movw	r0, #20704	; 0x50e0
   12c3c:	mov	r6, #256	; 0x100
   12c40:	movt	r0, #2
   12c44:	strd	r6, [r0]
   12c48:	movw	r6, #20704	; 0x50e0
   12c4c:	movt	r6, #2
   12c50:	cmp	r4, r6
   12c54:	beq	12c64 <__assert_fail@plt+0x1da0>
   12c58:	mov	r0, r4
   12c5c:	bl	13d48 <__assert_fail@plt+0x2e84>
   12c60:	str	r6, [r8]
   12c64:	mov	r0, #1
   12c68:	str	r0, [r5]
   12c6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12c70:	movw	r3, #20816	; 0x5150
   12c74:	mvn	r2, #0
   12c78:	movt	r3, #2
   12c7c:	b	12c80 <__assert_fail@plt+0x1dbc>
   12c80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c84:	add	fp, sp, #28
   12c88:	sub	sp, sp, #44	; 0x2c
   12c8c:	mov	r7, r3
   12c90:	str	r2, [sp, #36]	; 0x24
   12c94:	str	r1, [sp, #32]
   12c98:	mov	r5, r0
   12c9c:	bl	10e10 <__errno_location@plt>
   12ca0:	cmp	r5, #0
   12ca4:	blt	12e10 <__assert_fail@plt+0x1f4c>
   12ca8:	cmn	r5, #-2147483647	; 0x80000001
   12cac:	beq	12e10 <__assert_fail@plt+0x1f4c>
   12cb0:	movw	r8, #20700	; 0x50dc
   12cb4:	movw	r4, #20696	; 0x50d8
   12cb8:	str	r0, [sp, #28]
   12cbc:	ldr	r0, [r0]
   12cc0:	movt	r8, #2
   12cc4:	movt	r4, #2
   12cc8:	ldr	r1, [r8]
   12ccc:	ldr	r6, [r4]
   12cd0:	str	r0, [sp, #24]
   12cd4:	cmp	r1, r5
   12cd8:	ble	12ce4 <__assert_fail@plt+0x1e20>
   12cdc:	mov	sl, r6
   12ce0:	b	12d4c <__assert_fail@plt+0x1e88>
   12ce4:	movw	r9, #20704	; 0x50e0
   12ce8:	mov	r0, #8
   12cec:	add	r2, r5, #1
   12cf0:	str	r1, [fp, #-32]	; 0xffffffe0
   12cf4:	mvn	r3, #-2147483648	; 0x80000000
   12cf8:	movt	r9, #2
   12cfc:	str	r0, [sp]
   12d00:	sub	r2, r2, r1
   12d04:	sub	r1, fp, #32
   12d08:	subs	r0, r6, r9
   12d0c:	movne	r0, r6
   12d10:	bl	13964 <__assert_fail@plt+0x2aa0>
   12d14:	cmp	r6, r9
   12d18:	mov	sl, r0
   12d1c:	str	r0, [r4]
   12d20:	ldrdeq	r0, [r9]
   12d24:	stmeq	sl, {r0, r1}
   12d28:	ldr	r1, [r8]
   12d2c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12d30:	add	r0, sl, r1, lsl #3
   12d34:	sub	r1, r2, r1
   12d38:	lsl	r2, r1, #3
   12d3c:	mov	r1, #0
   12d40:	bl	10e28 <memset@plt>
   12d44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d48:	str	r0, [r8]
   12d4c:	mov	r9, sl
   12d50:	ldr	r6, [r9, r5, lsl #3]!
   12d54:	ldr	r4, [r9, #4]!
   12d58:	ldm	r7, {r0, r1}
   12d5c:	ldr	r2, [r7, #40]	; 0x28
   12d60:	ldr	r3, [r7, #44]	; 0x2c
   12d64:	orr	r8, r1, #1
   12d68:	add	r1, r7, #8
   12d6c:	stm	sp, {r0, r8}
   12d70:	add	r0, sp, #8
   12d74:	str	r1, [sp, #20]
   12d78:	stm	r0, {r1, r2, r3}
   12d7c:	mov	r0, r4
   12d80:	mov	r1, r6
   12d84:	ldr	r2, [sp, #32]
   12d88:	ldr	r3, [sp, #36]	; 0x24
   12d8c:	bl	11a60 <__assert_fail@plt+0xb9c>
   12d90:	cmp	r6, r0
   12d94:	bhi	12df8 <__assert_fail@plt+0x1f34>
   12d98:	add	r6, r0, #1
   12d9c:	movw	r0, #20864	; 0x5180
   12da0:	movt	r0, #2
   12da4:	str	r6, [sl, r5, lsl #3]
   12da8:	cmp	r4, r0
   12dac:	beq	12db8 <__assert_fail@plt+0x1ef4>
   12db0:	mov	r0, r4
   12db4:	bl	13d48 <__assert_fail@plt+0x2e84>
   12db8:	mov	r0, r6
   12dbc:	bl	13834 <__assert_fail@plt+0x2970>
   12dc0:	str	r0, [r9]
   12dc4:	mov	r4, r0
   12dc8:	add	r3, sp, #8
   12dcc:	ldr	r0, [r7]
   12dd0:	ldr	r1, [r7, #40]	; 0x28
   12dd4:	ldr	r2, [r7, #44]	; 0x2c
   12dd8:	stm	sp, {r0, r8}
   12ddc:	ldr	r0, [sp, #20]
   12de0:	stm	r3, {r0, r1, r2}
   12de4:	mov	r0, r4
   12de8:	mov	r1, r6
   12dec:	ldr	r2, [sp, #32]
   12df0:	ldr	r3, [sp, #36]	; 0x24
   12df4:	bl	11a60 <__assert_fail@plt+0xb9c>
   12df8:	ldr	r0, [sp, #28]
   12dfc:	ldr	r1, [sp, #24]
   12e00:	str	r1, [r0]
   12e04:	mov	r0, r4
   12e08:	sub	sp, fp, #28
   12e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e10:	bl	10eb8 <abort@plt>
   12e14:	movw	r3, #20816	; 0x5150
   12e18:	movt	r3, #2
   12e1c:	b	12c80 <__assert_fail@plt+0x1dbc>
   12e20:	movw	r3, #20816	; 0x5150
   12e24:	mov	r1, r0
   12e28:	mov	r0, #0
   12e2c:	mvn	r2, #0
   12e30:	movt	r3, #2
   12e34:	b	12c80 <__assert_fail@plt+0x1dbc>
   12e38:	movw	r3, #20816	; 0x5150
   12e3c:	mov	r2, r1
   12e40:	mov	r1, r0
   12e44:	mov	r0, #0
   12e48:	movt	r3, #2
   12e4c:	b	12c80 <__assert_fail@plt+0x1dbc>
   12e50:	push	{fp, lr}
   12e54:	mov	fp, sp
   12e58:	sub	sp, sp, #48	; 0x30
   12e5c:	vmov.i32	q8, #0	; 0x00000000
   12e60:	mov	ip, #32
   12e64:	mov	r3, sp
   12e68:	mov	lr, r2
   12e6c:	cmp	r1, #10
   12e70:	add	r2, r3, #16
   12e74:	vst1.64	{d16-d17}, [r3], ip
   12e78:	vst1.64	{d16-d17}, [r3]
   12e7c:	vst1.64	{d16-d17}, [r2]
   12e80:	beq	12ea0 <__assert_fail@plt+0x1fdc>
   12e84:	str	r1, [sp]
   12e88:	mov	r3, sp
   12e8c:	mov	r1, lr
   12e90:	mvn	r2, #0
   12e94:	bl	12c80 <__assert_fail@plt+0x1dbc>
   12e98:	mov	sp, fp
   12e9c:	pop	{fp, pc}
   12ea0:	bl	10eb8 <abort@plt>
   12ea4:	push	{r4, sl, fp, lr}
   12ea8:	add	fp, sp, #8
   12eac:	sub	sp, sp, #48	; 0x30
   12eb0:	mov	ip, r3
   12eb4:	mov	r3, sp
   12eb8:	vmov.i32	q8, #0	; 0x00000000
   12ebc:	mov	lr, #32
   12ec0:	cmp	r1, #10
   12ec4:	add	r4, r3, #16
   12ec8:	vst1.64	{d16-d17}, [r3], lr
   12ecc:	vst1.64	{d16-d17}, [r3]
   12ed0:	vst1.64	{d16-d17}, [r4]
   12ed4:	beq	12ef4 <__assert_fail@plt+0x2030>
   12ed8:	str	r1, [sp]
   12edc:	mov	r1, r2
   12ee0:	mov	r3, sp
   12ee4:	mov	r2, ip
   12ee8:	bl	12c80 <__assert_fail@plt+0x1dbc>
   12eec:	sub	sp, fp, #8
   12ef0:	pop	{r4, sl, fp, pc}
   12ef4:	bl	10eb8 <abort@plt>
   12ef8:	mov	r2, r1
   12efc:	mov	r1, r0
   12f00:	mov	r0, #0
   12f04:	b	12e50 <__assert_fail@plt+0x1f8c>
   12f08:	mov	r3, r2
   12f0c:	mov	r2, r1
   12f10:	mov	r1, r0
   12f14:	mov	r0, #0
   12f18:	b	12ea4 <__assert_fail@plt+0x1fe0>
   12f1c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12f20:	add	fp, sp, #24
   12f24:	sub	sp, sp, #48	; 0x30
   12f28:	movw	r8, #20816	; 0x5150
   12f2c:	mov	lr, r0
   12f30:	mov	r3, sp
   12f34:	mov	ip, r1
   12f38:	movt	r8, #2
   12f3c:	mov	r1, r3
   12f40:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   12f44:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   12f48:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   12f4c:	stm	r1, {r0, r4, r5, r6, r7, r9}
   12f50:	ubfx	r0, r2, #5, #3
   12f54:	and	r2, r2, #31
   12f58:	mov	r4, #1
   12f5c:	add	r0, r3, r0, lsl #2
   12f60:	ldr	r1, [r0, #8]
   12f64:	bic	r4, r4, r1, lsr r2
   12f68:	eor	r1, r1, r4, lsl r2
   12f6c:	mov	r2, ip
   12f70:	str	r1, [r0, #8]
   12f74:	mov	r0, #0
   12f78:	mov	r1, lr
   12f7c:	bl	12c80 <__assert_fail@plt+0x1dbc>
   12f80:	sub	sp, fp, #24
   12f84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12f88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12f8c:	add	fp, sp, #24
   12f90:	sub	sp, sp, #48	; 0x30
   12f94:	movw	lr, #20816	; 0x5150
   12f98:	mov	ip, r0
   12f9c:	mov	r3, sp
   12fa0:	movt	lr, #2
   12fa4:	mov	r2, r3
   12fa8:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   12fac:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   12fb0:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   12fb4:	stm	r2, {r0, r4, r5, r6, r7, r8}
   12fb8:	ubfx	r0, r1, #5, #3
   12fbc:	and	r1, r1, #31
   12fc0:	mov	r7, #1
   12fc4:	add	r0, r3, r0, lsl #2
   12fc8:	ldr	r2, [r0, #8]
   12fcc:	bic	r7, r7, r2, lsr r1
   12fd0:	eor	r1, r2, r7, lsl r1
   12fd4:	mvn	r2, #0
   12fd8:	str	r1, [r0, #8]
   12fdc:	mov	r0, #0
   12fe0:	mov	r1, ip
   12fe4:	bl	12c80 <__assert_fail@plt+0x1dbc>
   12fe8:	sub	sp, fp, #24
   12fec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12ff0:	push	{r4, r5, r6, r7, fp, lr}
   12ff4:	add	fp, sp, #16
   12ff8:	sub	sp, sp, #48	; 0x30
   12ffc:	movw	lr, #20816	; 0x5150
   13000:	mov	ip, r0
   13004:	mov	r3, sp
   13008:	movt	lr, #2
   1300c:	mov	r2, r3
   13010:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13014:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13018:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   1301c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13020:	mov	r1, ip
   13024:	mvn	r2, #0
   13028:	ldr	r0, [sp, #12]
   1302c:	orr	r0, r0, #67108864	; 0x4000000
   13030:	str	r0, [sp, #12]
   13034:	mov	r0, #0
   13038:	bl	12c80 <__assert_fail@plt+0x1dbc>
   1303c:	sub	sp, fp, #16
   13040:	pop	{r4, r5, r6, r7, fp, pc}
   13044:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13048:	add	fp, sp, #24
   1304c:	sub	sp, sp, #48	; 0x30
   13050:	movw	r8, #20816	; 0x5150
   13054:	mov	ip, r1
   13058:	mov	lr, r0
   1305c:	mov	r3, sp
   13060:	movt	r8, #2
   13064:	mov	r2, r3
   13068:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   1306c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13070:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   13074:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13078:	mov	r1, lr
   1307c:	mov	r2, ip
   13080:	ldr	r0, [sp, #12]
   13084:	orr	r0, r0, #67108864	; 0x4000000
   13088:	str	r0, [sp, #12]
   1308c:	mov	r0, #0
   13090:	bl	12c80 <__assert_fail@plt+0x1dbc>
   13094:	sub	sp, fp, #24
   13098:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1309c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   130a0:	add	fp, sp, #24
   130a4:	sub	sp, sp, #96	; 0x60
   130a8:	mov	lr, sp
   130ac:	vmov.i32	q8, #0	; 0x00000000
   130b0:	mov	ip, r2
   130b4:	cmp	r1, #10
   130b8:	add	r3, lr, #16
   130bc:	mov	r2, lr
   130c0:	vst1.64	{d16-d17}, [r3]
   130c4:	mov	r3, #28
   130c8:	vst1.64	{d16-d17}, [r2], r3
   130cc:	vst1.32	{d16-d17}, [r2]
   130d0:	beq	13110 <__assert_fail@plt+0x224c>
   130d4:	str	r1, [sp, #48]	; 0x30
   130d8:	add	r3, sp, #48	; 0x30
   130dc:	ldm	lr!, {r2, r4, r5, r6, r7}
   130e0:	add	r1, r3, #4
   130e4:	stmia	r1!, {r2, r4, r5, r6, r7}
   130e8:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   130ec:	stm	r1, {r2, r4, r5, r6, r7, r8}
   130f0:	mvn	r2, #0
   130f4:	ldr	r1, [sp, #60]	; 0x3c
   130f8:	orr	r1, r1, #67108864	; 0x4000000
   130fc:	str	r1, [sp, #60]	; 0x3c
   13100:	mov	r1, ip
   13104:	bl	12c80 <__assert_fail@plt+0x1dbc>
   13108:	sub	sp, fp, #24
   1310c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13110:	bl	10eb8 <abort@plt>
   13114:	push	{fp, lr}
   13118:	mov	fp, sp
   1311c:	sub	sp, sp, #8
   13120:	mvn	ip, #0
   13124:	str	ip, [sp]
   13128:	bl	13134 <__assert_fail@plt+0x2270>
   1312c:	mov	sp, fp
   13130:	pop	{fp, pc}
   13134:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13138:	add	fp, sp, #24
   1313c:	sub	sp, sp, #48	; 0x30
   13140:	movw	ip, #20816	; 0x5150
   13144:	mov	lr, r3
   13148:	mov	r3, sp
   1314c:	cmp	r1, #0
   13150:	movt	ip, #2
   13154:	cmpne	r2, #0
   13158:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   1315c:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   13160:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   13164:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13168:	mov	r3, #10
   1316c:	str	r3, [sp]
   13170:	bne	13178 <__assert_fail@plt+0x22b4>
   13174:	bl	10eb8 <abort@plt>
   13178:	ldr	ip, [fp, #8]
   1317c:	str	r2, [sp, #44]	; 0x2c
   13180:	str	r1, [sp, #40]	; 0x28
   13184:	mov	r3, sp
   13188:	mov	r1, lr
   1318c:	mov	r2, ip
   13190:	bl	12c80 <__assert_fail@plt+0x1dbc>
   13194:	sub	sp, fp, #24
   13198:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1319c:	push	{fp, lr}
   131a0:	mov	fp, sp
   131a4:	sub	sp, sp, #8
   131a8:	mov	r3, r2
   131ac:	mov	r2, r1
   131b0:	mov	r1, r0
   131b4:	mvn	r0, #0
   131b8:	str	r0, [sp]
   131bc:	mov	r0, #0
   131c0:	bl	13134 <__assert_fail@plt+0x2270>
   131c4:	mov	sp, fp
   131c8:	pop	{fp, pc}
   131cc:	push	{fp, lr}
   131d0:	mov	fp, sp
   131d4:	sub	sp, sp, #8
   131d8:	mov	ip, r2
   131dc:	mov	r2, r1
   131e0:	mov	r1, r0
   131e4:	str	r3, [sp]
   131e8:	mov	r0, #0
   131ec:	mov	r3, ip
   131f0:	bl	13134 <__assert_fail@plt+0x2270>
   131f4:	mov	sp, fp
   131f8:	pop	{fp, pc}
   131fc:	movw	r3, #20712	; 0x50e8
   13200:	movt	r3, #2
   13204:	b	12c80 <__assert_fail@plt+0x1dbc>
   13208:	movw	r3, #20712	; 0x50e8
   1320c:	mov	r2, r1
   13210:	mov	r1, r0
   13214:	mov	r0, #0
   13218:	movt	r3, #2
   1321c:	b	12c80 <__assert_fail@plt+0x1dbc>
   13220:	movw	r3, #20712	; 0x50e8
   13224:	mvn	r2, #0
   13228:	movt	r3, #2
   1322c:	b	12c80 <__assert_fail@plt+0x1dbc>
   13230:	movw	r3, #20712	; 0x50e8
   13234:	mov	r1, r0
   13238:	mov	r0, #0
   1323c:	mvn	r2, #0
   13240:	movt	r3, #2
   13244:	b	12c80 <__assert_fail@plt+0x1dbc>
   13248:	push	{r4, r5, fp, lr}
   1324c:	add	fp, sp, #8
   13250:	mov	r5, r0
   13254:	mov	r4, r1
   13258:	mov	r0, #0
   1325c:	mov	r2, #5
   13260:	mov	r1, r5
   13264:	bl	10d38 <dcgettext@plt>
   13268:	cmp	r0, r5
   1326c:	popne	{r4, r5, fp, pc}
   13270:	bl	14014 <__assert_fail@plt+0x3150>
   13274:	ldrb	r1, [r0]
   13278:	and	r1, r1, #223	; 0xdf
   1327c:	cmp	r1, #71	; 0x47
   13280:	beq	132e8 <__assert_fail@plt+0x2424>
   13284:	cmp	r1, #85	; 0x55
   13288:	bne	1330c <__assert_fail@plt+0x2448>
   1328c:	ldrb	r1, [r0, #1]
   13290:	and	r1, r1, #223	; 0xdf
   13294:	cmp	r1, #84	; 0x54
   13298:	bne	1330c <__assert_fail@plt+0x2448>
   1329c:	ldrb	r1, [r0, #2]
   132a0:	and	r1, r1, #223	; 0xdf
   132a4:	cmp	r1, #70	; 0x46
   132a8:	ldrbeq	r1, [r0, #3]
   132ac:	cmpeq	r1, #45	; 0x2d
   132b0:	bne	1330c <__assert_fail@plt+0x2448>
   132b4:	ldrb	r1, [r0, #4]
   132b8:	cmp	r1, #56	; 0x38
   132bc:	ldrbeq	r0, [r0, #5]
   132c0:	cmpeq	r0, #0
   132c4:	bne	1330c <__assert_fail@plt+0x2448>
   132c8:	ldrb	r1, [r5]
   132cc:	movw	r2, #17888	; 0x45e0
   132d0:	movw	r0, #17892	; 0x45e4
   132d4:	movt	r2, #1
   132d8:	movt	r0, #1
   132dc:	cmp	r1, #96	; 0x60
   132e0:	moveq	r0, r2
   132e4:	pop	{r4, r5, fp, pc}
   132e8:	ldrb	r1, [r0, #1]
   132ec:	and	r1, r1, #223	; 0xdf
   132f0:	cmp	r1, #66	; 0x42
   132f4:	bne	1330c <__assert_fail@plt+0x2448>
   132f8:	ldrb	r1, [r0, #2]
   132fc:	cmp	r1, #49	; 0x31
   13300:	ldrbeq	r1, [r0, #3]
   13304:	cmpeq	r1, #56	; 0x38
   13308:	beq	13328 <__assert_fail@plt+0x2464>
   1330c:	movw	r1, #17882	; 0x45da
   13310:	movw	r0, #17886	; 0x45de
   13314:	cmp	r4, #9
   13318:	movt	r1, #1
   1331c:	movt	r0, #1
   13320:	moveq	r0, r1
   13324:	pop	{r4, r5, fp, pc}
   13328:	ldrb	r1, [r0, #4]
   1332c:	cmp	r1, #48	; 0x30
   13330:	ldrbeq	r1, [r0, #5]
   13334:	cmpeq	r1, #51	; 0x33
   13338:	bne	1330c <__assert_fail@plt+0x2448>
   1333c:	ldrb	r1, [r0, #6]
   13340:	cmp	r1, #48	; 0x30
   13344:	ldrbeq	r0, [r0, #7]
   13348:	cmpeq	r0, #0
   1334c:	bne	1330c <__assert_fail@plt+0x2448>
   13350:	ldrb	r1, [r5]
   13354:	movw	r2, #17896	; 0x45e8
   13358:	movw	r0, #17900	; 0x45ec
   1335c:	movt	r2, #1
   13360:	movt	r0, #1
   13364:	b	132dc <__assert_fail@plt+0x2418>
   13368:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1336c:	add	fp, sp, #24
   13370:	sub	sp, sp, #32
   13374:	ldr	r7, [fp, #12]
   13378:	ldr	r6, [fp, #8]
   1337c:	mov	r4, r2
   13380:	mov	r5, r0
   13384:	cmp	r1, #0
   13388:	beq	133a8 <__assert_fail@plt+0x24e4>
   1338c:	mov	r2, r1
   13390:	movw	r1, #17988	; 0x4644
   13394:	str	r3, [sp]
   13398:	mov	r0, r5
   1339c:	mov	r3, r4
   133a0:	movt	r1, #1
   133a4:	b	133b8 <__assert_fail@plt+0x24f4>
   133a8:	movw	r1, #18000	; 0x4650
   133ac:	mov	r0, r5
   133b0:	mov	r2, r4
   133b4:	movt	r1, #1
   133b8:	bl	10e04 <fprintf@plt>
   133bc:	movw	r1, #18007	; 0x4657
   133c0:	mov	r0, #0
   133c4:	mov	r2, #5
   133c8:	movt	r1, #1
   133cc:	bl	10d38 <dcgettext@plt>
   133d0:	movw	r1, #18703	; 0x490f
   133d4:	mov	r2, r0
   133d8:	mov	r0, r5
   133dc:	movw	r3, #2022	; 0x7e6
   133e0:	movt	r1, #1
   133e4:	bl	10e04 <fprintf@plt>
   133e8:	movw	r4, #17621	; 0x44d5
   133ec:	mov	r1, r5
   133f0:	movt	r4, #1
   133f4:	mov	r0, r4
   133f8:	bl	10ea0 <fputs@plt>
   133fc:	movw	r1, #18011	; 0x465b
   13400:	mov	r0, #0
   13404:	mov	r2, #5
   13408:	movt	r1, #1
   1340c:	bl	10d38 <dcgettext@plt>
   13410:	movw	r2, #18182	; 0x4706
   13414:	mov	r1, r0
   13418:	mov	r0, r5
   1341c:	movt	r2, #1
   13420:	bl	10e04 <fprintf@plt>
   13424:	mov	r0, r4
   13428:	mov	r1, r5
   1342c:	bl	10ea0 <fputs@plt>
   13430:	cmp	r7, #9
   13434:	bhi	13494 <__assert_fail@plt+0x25d0>
   13438:	add	r0, pc, #0
   1343c:	ldr	pc, [r0, r7, lsl #2]
   13440:	andeq	r3, r1, r4, lsl #13
   13444:	andeq	r3, r1, r8, ror #8
   13448:	andeq	r3, r1, r0, lsr #9
   1344c:	andeq	r3, r1, ip, asr #9
   13450:	strdeq	r3, [r1], -r4
   13454:	andeq	r3, r1, r0, lsr #10
   13458:	andeq	r3, r1, r4, asr r5
   1345c:	muleq	r1, r4, r5
   13460:	andeq	r3, r1, r0, lsr r6
   13464:	ldrdeq	r3, [r1], -r8
   13468:	movw	r1, #18216	; 0x4728
   1346c:	mov	r0, #0
   13470:	mov	r2, #5
   13474:	movt	r1, #1
   13478:	bl	10d38 <dcgettext@plt>
   1347c:	ldr	r2, [r6]
   13480:	mov	r1, r0
   13484:	mov	r0, r5
   13488:	sub	sp, fp, #24
   1348c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13490:	b	10e04 <fprintf@plt>
   13494:	movw	r1, #18535	; 0x4867
   13498:	movt	r1, #1
   1349c:	b	135e0 <__assert_fail@plt+0x271c>
   134a0:	movw	r1, #18232	; 0x4738
   134a4:	mov	r0, #0
   134a8:	mov	r2, #5
   134ac:	movt	r1, #1
   134b0:	bl	10d38 <dcgettext@plt>
   134b4:	ldm	r6, {r2, r3}
   134b8:	mov	r1, r0
   134bc:	mov	r0, r5
   134c0:	sub	sp, fp, #24
   134c4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   134c8:	b	10e04 <fprintf@plt>
   134cc:	movw	r1, #18255	; 0x474f
   134d0:	mov	r0, #0
   134d4:	mov	r2, #5
   134d8:	movt	r1, #1
   134dc:	bl	10d38 <dcgettext@plt>
   134e0:	mov	r1, r0
   134e4:	ldm	r6, {r2, r3}
   134e8:	ldr	r0, [r6, #8]
   134ec:	str	r0, [sp]
   134f0:	b	1358c <__assert_fail@plt+0x26c8>
   134f4:	movw	r1, #18283	; 0x476b
   134f8:	mov	r0, #0
   134fc:	mov	r2, #5
   13500:	movt	r1, #1
   13504:	bl	10d38 <dcgettext@plt>
   13508:	ldm	r6, {r2, r3}
   1350c:	mov	r1, r0
   13510:	ldr	r0, [r6, #8]
   13514:	ldr	r7, [r6, #12]
   13518:	stm	sp, {r0, r7}
   1351c:	b	1358c <__assert_fail@plt+0x26c8>
   13520:	movw	r1, #18315	; 0x478b
   13524:	mov	r0, #0
   13528:	mov	r2, #5
   1352c:	movt	r1, #1
   13530:	bl	10d38 <dcgettext@plt>
   13534:	ldm	r6, {r2, r3}
   13538:	mov	r1, r0
   1353c:	ldr	r0, [r6, #8]
   13540:	ldr	r7, [r6, #12]
   13544:	ldr	r6, [r6, #16]
   13548:	stm	sp, {r0, r7}
   1354c:	str	r6, [sp, #8]
   13550:	b	1358c <__assert_fail@plt+0x26c8>
   13554:	movw	r1, #18351	; 0x47af
   13558:	mov	r0, #0
   1355c:	mov	r2, #5
   13560:	movt	r1, #1
   13564:	bl	10d38 <dcgettext@plt>
   13568:	ldm	r6, {r2, r3}
   1356c:	mov	r1, r0
   13570:	ldr	r0, [r6, #8]
   13574:	ldr	r7, [r6, #12]
   13578:	ldr	r4, [r6, #16]
   1357c:	ldr	r6, [r6, #20]
   13580:	stm	sp, {r0, r7}
   13584:	str	r4, [sp, #8]
   13588:	str	r6, [sp, #12]
   1358c:	mov	r0, r5
   13590:	b	13680 <__assert_fail@plt+0x27bc>
   13594:	movw	r1, #18391	; 0x47d7
   13598:	mov	r0, #0
   1359c:	mov	r2, #5
   135a0:	movt	r1, #1
   135a4:	bl	10d38 <dcgettext@plt>
   135a8:	ldm	r6, {r2, r3}
   135ac:	mov	ip, r0
   135b0:	ldr	r0, [r6, #8]
   135b4:	ldr	r7, [r6, #12]
   135b8:	ldr	r4, [r6, #16]
   135bc:	ldr	r1, [r6, #20]
   135c0:	ldr	r6, [r6, #24]
   135c4:	stm	sp, {r0, r7}
   135c8:	str	r4, [sp, #8]
   135cc:	str	r1, [sp, #12]
   135d0:	str	r6, [sp, #16]
   135d4:	b	13678 <__assert_fail@plt+0x27b4>
   135d8:	movw	r1, #18483	; 0x4833
   135dc:	movt	r1, #1
   135e0:	mov	r0, #0
   135e4:	mov	r2, #5
   135e8:	bl	10d38 <dcgettext@plt>
   135ec:	mov	ip, r0
   135f0:	ldr	r2, [r6]
   135f4:	ldr	r3, [r6, #4]
   135f8:	ldr	r0, [r6, #8]
   135fc:	ldr	r7, [r6, #12]
   13600:	ldr	r4, [r6, #16]
   13604:	ldr	r1, [r6, #20]
   13608:	ldr	lr, [r6, #24]
   1360c:	ldr	r8, [r6, #28]
   13610:	ldr	r6, [r6, #32]
   13614:	stm	sp, {r0, r7}
   13618:	str	r4, [sp, #8]
   1361c:	str	r1, [sp, #12]
   13620:	str	lr, [sp, #16]
   13624:	str	r8, [sp, #20]
   13628:	str	r6, [sp, #24]
   1362c:	b	13678 <__assert_fail@plt+0x27b4>
   13630:	movw	r1, #18435	; 0x4803
   13634:	mov	r0, #0
   13638:	mov	r2, #5
   1363c:	movt	r1, #1
   13640:	bl	10d38 <dcgettext@plt>
   13644:	ldm	r6, {r2, r3}
   13648:	mov	ip, r0
   1364c:	ldr	r0, [r6, #8]
   13650:	ldr	r7, [r6, #12]
   13654:	ldr	r4, [r6, #16]
   13658:	ldr	r1, [r6, #20]
   1365c:	ldr	lr, [r6, #24]
   13660:	ldr	r6, [r6, #28]
   13664:	stm	sp, {r0, r7}
   13668:	str	r4, [sp, #8]
   1366c:	str	r1, [sp, #12]
   13670:	str	lr, [sp, #16]
   13674:	str	r6, [sp, #20]
   13678:	mov	r0, r5
   1367c:	mov	r1, ip
   13680:	bl	10e04 <fprintf@plt>
   13684:	sub	sp, fp, #24
   13688:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1368c:	push	{r4, sl, fp, lr}
   13690:	add	fp, sp, #8
   13694:	sub	sp, sp, #8
   13698:	ldr	ip, [fp, #8]
   1369c:	mov	lr, #0
   136a0:	ldr	r4, [ip, lr, lsl #2]
   136a4:	add	lr, lr, #1
   136a8:	cmp	r4, #0
   136ac:	bne	136a0 <__assert_fail@plt+0x27dc>
   136b0:	sub	r4, lr, #1
   136b4:	str	ip, [sp]
   136b8:	str	r4, [sp, #4]
   136bc:	bl	13368 <__assert_fail@plt+0x24a4>
   136c0:	sub	sp, fp, #8
   136c4:	pop	{r4, sl, fp, pc}
   136c8:	push	{r4, r5, fp, lr}
   136cc:	add	fp, sp, #8
   136d0:	sub	sp, sp, #48	; 0x30
   136d4:	ldr	r4, [fp, #8]
   136d8:	mov	ip, #0
   136dc:	add	lr, sp, #8
   136e0:	ldr	r5, [r4]
   136e4:	cmp	r5, #0
   136e8:	str	r5, [lr, ip, lsl #2]
   136ec:	beq	13700 <__assert_fail@plt+0x283c>
   136f0:	add	ip, ip, #1
   136f4:	add	r4, r4, #4
   136f8:	cmp	ip, #10
   136fc:	bcc	136e0 <__assert_fail@plt+0x281c>
   13700:	str	lr, [sp]
   13704:	str	ip, [sp, #4]
   13708:	bl	13368 <__assert_fail@plt+0x24a4>
   1370c:	sub	sp, fp, #8
   13710:	pop	{r4, r5, fp, pc}
   13714:	push	{fp, lr}
   13718:	mov	fp, sp
   1371c:	sub	sp, sp, #8
   13720:	add	ip, fp, #8
   13724:	str	ip, [sp, #4]
   13728:	str	ip, [sp]
   1372c:	bl	136c8 <__assert_fail@plt+0x2804>
   13730:	mov	sp, fp
   13734:	pop	{fp, pc}
   13738:	push	{fp, lr}
   1373c:	mov	fp, sp
   13740:	movw	r0, #20788	; 0x5134
   13744:	movt	r0, #2
   13748:	ldr	r1, [r0]
   1374c:	movw	r0, #17621	; 0x44d5
   13750:	movt	r0, #1
   13754:	bl	10ea0 <fputs@plt>
   13758:	movw	r1, #18595	; 0x48a3
   1375c:	mov	r0, #0
   13760:	mov	r2, #5
   13764:	movt	r1, #1
   13768:	bl	10d38 <dcgettext@plt>
   1376c:	movw	r1, #17709	; 0x452d
   13770:	movt	r1, #1
   13774:	bl	10cd8 <printf@plt>
   13778:	movw	r1, #18615	; 0x48b7
   1377c:	mov	r0, #0
   13780:	mov	r2, #5
   13784:	movt	r1, #1
   13788:	bl	10d38 <dcgettext@plt>
   1378c:	movw	r1, #17360	; 0x43d0
   13790:	movw	r2, #17623	; 0x44d7
   13794:	movt	r1, #1
   13798:	movt	r2, #1
   1379c:	bl	10cd8 <printf@plt>
   137a0:	movw	r1, #18635	; 0x48cb
   137a4:	mov	r0, #0
   137a8:	mov	r2, #5
   137ac:	movt	r1, #1
   137b0:	bl	10d38 <dcgettext@plt>
   137b4:	movw	r1, #18674	; 0x48f2
   137b8:	movt	r1, #1
   137bc:	pop	{fp, lr}
   137c0:	b	10cd8 <printf@plt>
   137c4:	b	137c8 <__assert_fail@plt+0x2904>
   137c8:	push	{r4, r5, r6, sl, fp, lr}
   137cc:	add	fp, sp, #16
   137d0:	mov	r4, r2
   137d4:	mov	r5, r1
   137d8:	mov	r6, r0
   137dc:	bl	13ef4 <__assert_fail@plt+0x3030>
   137e0:	cmp	r0, #0
   137e4:	popne	{r4, r5, r6, sl, fp, pc}
   137e8:	cmp	r6, #0
   137ec:	beq	13800 <__assert_fail@plt+0x293c>
   137f0:	cmp	r5, #0
   137f4:	cmpne	r4, #0
   137f8:	bne	13800 <__assert_fail@plt+0x293c>
   137fc:	pop	{r4, r5, r6, sl, fp, pc}
   13800:	bl	13c54 <__assert_fail@plt+0x2d90>
   13804:	push	{fp, lr}
   13808:	mov	fp, sp
   1380c:	bl	13e14 <__assert_fail@plt+0x2f50>
   13810:	cmp	r0, #0
   13814:	popne	{fp, pc}
   13818:	bl	13c54 <__assert_fail@plt+0x2d90>
   1381c:	push	{fp, lr}
   13820:	mov	fp, sp
   13824:	bl	13e14 <__assert_fail@plt+0x2f50>
   13828:	cmp	r0, #0
   1382c:	popne	{fp, pc}
   13830:	bl	13c54 <__assert_fail@plt+0x2d90>
   13834:	push	{fp, lr}
   13838:	mov	fp, sp
   1383c:	bl	13e14 <__assert_fail@plt+0x2f50>
   13840:	cmp	r0, #0
   13844:	popne	{fp, pc}
   13848:	bl	13c54 <__assert_fail@plt+0x2d90>
   1384c:	push	{r4, r5, fp, lr}
   13850:	add	fp, sp, #8
   13854:	mov	r4, r1
   13858:	mov	r5, r0
   1385c:	bl	13ea4 <__assert_fail@plt+0x2fe0>
   13860:	cmp	r0, #0
   13864:	popne	{r4, r5, fp, pc}
   13868:	cmp	r5, #0
   1386c:	beq	1387c <__assert_fail@plt+0x29b8>
   13870:	cmp	r4, #0
   13874:	bne	1387c <__assert_fail@plt+0x29b8>
   13878:	pop	{r4, r5, fp, pc}
   1387c:	bl	13c54 <__assert_fail@plt+0x2d90>
   13880:	push	{fp, lr}
   13884:	mov	fp, sp
   13888:	cmp	r1, #0
   1388c:	orreq	r1, r1, #1
   13890:	bl	13ea4 <__assert_fail@plt+0x2fe0>
   13894:	cmp	r0, #0
   13898:	popne	{fp, pc}
   1389c:	bl	13c54 <__assert_fail@plt+0x2d90>
   138a0:	push	{fp, lr}
   138a4:	mov	fp, sp
   138a8:	clz	r3, r2
   138ac:	lsr	ip, r3, #5
   138b0:	clz	r3, r1
   138b4:	lsr	r3, r3, #5
   138b8:	orrs	r3, r3, ip
   138bc:	movwne	r1, #1
   138c0:	movwne	r2, #1
   138c4:	bl	13ef4 <__assert_fail@plt+0x3030>
   138c8:	cmp	r0, #0
   138cc:	popne	{fp, pc}
   138d0:	bl	13c54 <__assert_fail@plt+0x2d90>
   138d4:	push	{fp, lr}
   138d8:	mov	fp, sp
   138dc:	mov	r2, r1
   138e0:	mov	r1, r0
   138e4:	mov	r0, #0
   138e8:	bl	13ef4 <__assert_fail@plt+0x3030>
   138ec:	cmp	r0, #0
   138f0:	popne	{fp, pc}
   138f4:	bl	13c54 <__assert_fail@plt+0x2d90>
   138f8:	mov	r2, r1
   138fc:	mov	r1, r0
   13900:	mov	r0, #0
   13904:	b	138a0 <__assert_fail@plt+0x29dc>
   13908:	mov	r2, #1
   1390c:	b	13910 <__assert_fail@plt+0x2a4c>
   13910:	push	{r4, r5, fp, lr}
   13914:	add	fp, sp, #8
   13918:	ldr	r5, [r1]
   1391c:	mov	r4, r1
   13920:	cmp	r0, #0
   13924:	beq	1393c <__assert_fail@plt+0x2a78>
   13928:	mov	r1, #1
   1392c:	add	r1, r1, r5, lsr #1
   13930:	adds	r5, r5, r1
   13934:	bcc	13954 <__assert_fail@plt+0x2a90>
   13938:	bl	13c54 <__assert_fail@plt+0x2d90>
   1393c:	cmp	r5, #0
   13940:	bne	13954 <__assert_fail@plt+0x2a90>
   13944:	mov	r1, #64	; 0x40
   13948:	cmp	r2, #64	; 0x40
   1394c:	udiv	r5, r1, r2
   13950:	addhi	r5, r5, #1
   13954:	mov	r1, r5
   13958:	bl	137c8 <__assert_fail@plt+0x2904>
   1395c:	str	r5, [r4]
   13960:	pop	{r4, r5, fp, pc}
   13964:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13968:	add	fp, sp, #24
   1396c:	ldr	r6, [r1]
   13970:	mov	r8, r1
   13974:	ldr	r4, [fp, #8]
   13978:	add	r1, r6, r6, asr #1
   1397c:	cmp	r1, r6
   13980:	mvnvs	r1, #-2147483648	; 0x80000000
   13984:	cmp	r1, r3
   13988:	mov	r5, r1
   1398c:	movgt	r5, r3
   13990:	cmn	r3, #1
   13994:	movle	r5, r1
   13998:	cmn	r4, #1
   1399c:	ble	139bc <__assert_fail@plt+0x2af8>
   139a0:	cmp	r4, #0
   139a4:	beq	13a10 <__assert_fail@plt+0x2b4c>
   139a8:	cmn	r5, #1
   139ac:	ble	139e4 <__assert_fail@plt+0x2b20>
   139b0:	mvn	r7, #-2147483648	; 0x80000000
   139b4:	udiv	r1, r7, r4
   139b8:	b	139d8 <__assert_fail@plt+0x2b14>
   139bc:	cmn	r5, #1
   139c0:	ble	13a00 <__assert_fail@plt+0x2b3c>
   139c4:	cmn	r4, #1
   139c8:	beq	13a10 <__assert_fail@plt+0x2b4c>
   139cc:	mov	r1, #-2147483648	; 0x80000000
   139d0:	mvn	r7, #-2147483648	; 0x80000000
   139d4:	sdiv	r1, r1, r4
   139d8:	cmp	r1, r5
   139dc:	bge	13a10 <__assert_fail@plt+0x2b4c>
   139e0:	b	13a20 <__assert_fail@plt+0x2b5c>
   139e4:	beq	13a10 <__assert_fail@plt+0x2b4c>
   139e8:	mov	r1, #-2147483648	; 0x80000000
   139ec:	mvn	r7, #-2147483648	; 0x80000000
   139f0:	sdiv	r1, r1, r5
   139f4:	cmp	r1, r4
   139f8:	bge	13a10 <__assert_fail@plt+0x2b4c>
   139fc:	b	13a20 <__assert_fail@plt+0x2b5c>
   13a00:	mvn	r7, #-2147483648	; 0x80000000
   13a04:	sdiv	r1, r7, r4
   13a08:	cmp	r5, r1
   13a0c:	blt	13a20 <__assert_fail@plt+0x2b5c>
   13a10:	mul	r1, r5, r4
   13a14:	mov	r7, #64	; 0x40
   13a18:	cmp	r1, #63	; 0x3f
   13a1c:	bgt	13a28 <__assert_fail@plt+0x2b64>
   13a20:	sdiv	r5, r7, r4
   13a24:	mul	r1, r5, r4
   13a28:	cmp	r0, #0
   13a2c:	moveq	r7, #0
   13a30:	streq	r7, [r8]
   13a34:	sub	r7, r5, r6
   13a38:	cmp	r7, r2
   13a3c:	bge	13ae0 <__assert_fail@plt+0x2c1c>
   13a40:	add	r5, r6, r2
   13a44:	mov	r2, #0
   13a48:	mov	r1, #0
   13a4c:	cmp	r5, r3
   13a50:	movwgt	r2, #1
   13a54:	cmn	r3, #1
   13a58:	movwgt	r1, #1
   13a5c:	cmp	r5, r6
   13a60:	bvs	13ac8 <__assert_fail@plt+0x2c04>
   13a64:	ands	r1, r1, r2
   13a68:	bne	13ac8 <__assert_fail@plt+0x2c04>
   13a6c:	cmn	r4, #1
   13a70:	ble	13a90 <__assert_fail@plt+0x2bcc>
   13a74:	cmp	r4, #0
   13a78:	beq	13adc <__assert_fail@plt+0x2c18>
   13a7c:	cmn	r5, #1
   13a80:	ble	13ab4 <__assert_fail@plt+0x2bf0>
   13a84:	mvn	r1, #-2147483648	; 0x80000000
   13a88:	udiv	r1, r1, r4
   13a8c:	b	13aa8 <__assert_fail@plt+0x2be4>
   13a90:	cmn	r5, #1
   13a94:	ble	13acc <__assert_fail@plt+0x2c08>
   13a98:	cmn	r4, #1
   13a9c:	beq	13adc <__assert_fail@plt+0x2c18>
   13aa0:	mov	r1, #-2147483648	; 0x80000000
   13aa4:	sdiv	r1, r1, r4
   13aa8:	cmp	r1, r5
   13aac:	bge	13adc <__assert_fail@plt+0x2c18>
   13ab0:	b	13ac8 <__assert_fail@plt+0x2c04>
   13ab4:	beq	13adc <__assert_fail@plt+0x2c18>
   13ab8:	mov	r1, #-2147483648	; 0x80000000
   13abc:	sdiv	r1, r1, r5
   13ac0:	cmp	r1, r4
   13ac4:	bge	13adc <__assert_fail@plt+0x2c18>
   13ac8:	bl	13c54 <__assert_fail@plt+0x2d90>
   13acc:	mvn	r1, #-2147483648	; 0x80000000
   13ad0:	sdiv	r1, r1, r4
   13ad4:	cmp	r5, r1
   13ad8:	blt	13ac8 <__assert_fail@plt+0x2c04>
   13adc:	mul	r1, r5, r4
   13ae0:	bl	1384c <__assert_fail@plt+0x2988>
   13ae4:	str	r5, [r8]
   13ae8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13aec:	push	{fp, lr}
   13af0:	mov	fp, sp
   13af4:	mov	r1, #1
   13af8:	bl	13c98 <__assert_fail@plt+0x2dd4>
   13afc:	cmp	r0, #0
   13b00:	popne	{fp, pc}
   13b04:	bl	13c54 <__assert_fail@plt+0x2d90>
   13b08:	push	{fp, lr}
   13b0c:	mov	fp, sp
   13b10:	bl	13c98 <__assert_fail@plt+0x2dd4>
   13b14:	cmp	r0, #0
   13b18:	popne	{fp, pc}
   13b1c:	bl	13c54 <__assert_fail@plt+0x2d90>
   13b20:	push	{fp, lr}
   13b24:	mov	fp, sp
   13b28:	mov	r1, #1
   13b2c:	bl	13c98 <__assert_fail@plt+0x2dd4>
   13b30:	cmp	r0, #0
   13b34:	popne	{fp, pc}
   13b38:	bl	13c54 <__assert_fail@plt+0x2d90>
   13b3c:	push	{fp, lr}
   13b40:	mov	fp, sp
   13b44:	bl	13c98 <__assert_fail@plt+0x2dd4>
   13b48:	cmp	r0, #0
   13b4c:	popne	{fp, pc}
   13b50:	bl	13c54 <__assert_fail@plt+0x2d90>
   13b54:	push	{r4, r5, r6, sl, fp, lr}
   13b58:	add	fp, sp, #16
   13b5c:	mov	r5, r0
   13b60:	mov	r0, r1
   13b64:	mov	r4, r1
   13b68:	bl	13e14 <__assert_fail@plt+0x2f50>
   13b6c:	cmp	r0, #0
   13b70:	beq	13b8c <__assert_fail@plt+0x2cc8>
   13b74:	mov	r1, r5
   13b78:	mov	r2, r4
   13b7c:	mov	r6, r0
   13b80:	bl	10d14 <memcpy@plt>
   13b84:	mov	r0, r6
   13b88:	pop	{r4, r5, r6, sl, fp, pc}
   13b8c:	bl	13c54 <__assert_fail@plt+0x2d90>
   13b90:	push	{r4, r5, r6, sl, fp, lr}
   13b94:	add	fp, sp, #16
   13b98:	mov	r5, r0
   13b9c:	mov	r0, r1
   13ba0:	mov	r4, r1
   13ba4:	bl	13e14 <__assert_fail@plt+0x2f50>
   13ba8:	cmp	r0, #0
   13bac:	beq	13bc8 <__assert_fail@plt+0x2d04>
   13bb0:	mov	r1, r5
   13bb4:	mov	r2, r4
   13bb8:	mov	r6, r0
   13bbc:	bl	10d14 <memcpy@plt>
   13bc0:	mov	r0, r6
   13bc4:	pop	{r4, r5, r6, sl, fp, pc}
   13bc8:	bl	13c54 <__assert_fail@plt+0x2d90>
   13bcc:	push	{r4, r5, r6, sl, fp, lr}
   13bd0:	add	fp, sp, #16
   13bd4:	mov	r5, r0
   13bd8:	add	r0, r1, #1
   13bdc:	mov	r4, r1
   13be0:	bl	13e14 <__assert_fail@plt+0x2f50>
   13be4:	cmp	r0, #0
   13be8:	beq	13c10 <__assert_fail@plt+0x2d4c>
   13bec:	mov	r6, r0
   13bf0:	mov	r0, #0
   13bf4:	mov	r1, r5
   13bf8:	mov	r2, r4
   13bfc:	strb	r0, [r6, r4]
   13c00:	mov	r0, r6
   13c04:	bl	10d14 <memcpy@plt>
   13c08:	mov	r0, r6
   13c0c:	pop	{r4, r5, r6, sl, fp, pc}
   13c10:	bl	13c54 <__assert_fail@plt+0x2d90>
   13c14:	push	{r4, r5, r6, sl, fp, lr}
   13c18:	add	fp, sp, #16
   13c1c:	mov	r4, r0
   13c20:	bl	10df8 <strlen@plt>
   13c24:	add	r5, r0, #1
   13c28:	mov	r0, r5
   13c2c:	bl	13e14 <__assert_fail@plt+0x2f50>
   13c30:	cmp	r0, #0
   13c34:	beq	13c50 <__assert_fail@plt+0x2d8c>
   13c38:	mov	r1, r4
   13c3c:	mov	r2, r5
   13c40:	mov	r6, r0
   13c44:	bl	10d14 <memcpy@plt>
   13c48:	mov	r0, r6
   13c4c:	pop	{r4, r5, r6, sl, fp, pc}
   13c50:	bl	13c54 <__assert_fail@plt+0x2d90>
   13c54:	push	{fp, lr}
   13c58:	mov	fp, sp
   13c5c:	movw	r0, #20692	; 0x50d4
   13c60:	movw	r1, #18750	; 0x493e
   13c64:	mov	r2, #5
   13c68:	movt	r0, #2
   13c6c:	movt	r1, #1
   13c70:	ldr	r4, [r0]
   13c74:	mov	r0, #0
   13c78:	bl	10d38 <dcgettext@plt>
   13c7c:	movw	r2, #17735	; 0x4547
   13c80:	mov	r3, r0
   13c84:	mov	r0, r4
   13c88:	mov	r1, #0
   13c8c:	movt	r2, #1
   13c90:	bl	10d98 <error@plt>
   13c94:	bl	10eb8 <abort@plt>
   13c98:	clz	r2, r1
   13c9c:	clz	r3, r0
   13ca0:	lsr	r2, r2, #5
   13ca4:	lsr	r3, r3, #5
   13ca8:	orrs	r2, r3, r2
   13cac:	movwne	r1, #1
   13cb0:	movwne	r0, #1
   13cb4:	cmp	r1, #0
   13cb8:	beq	13ce8 <__assert_fail@plt+0x2e24>
   13cbc:	mvn	r2, #-2147483648	; 0x80000000
   13cc0:	udiv	r2, r2, r1
   13cc4:	cmp	r2, r0
   13cc8:	bcs	13ce8 <__assert_fail@plt+0x2e24>
   13ccc:	push	{fp, lr}
   13cd0:	mov	fp, sp
   13cd4:	bl	10e10 <__errno_location@plt>
   13cd8:	mov	r1, #12
   13cdc:	str	r1, [r0]
   13ce0:	mov	r0, #0
   13ce4:	pop	{fp, pc}
   13ce8:	b	10cb4 <calloc@plt>
   13cec:	push	{r4, sl, fp, lr}
   13cf0:	add	fp, sp, #8
   13cf4:	sub	sp, sp, #8
   13cf8:	mov	r4, r0
   13cfc:	cmp	r0, #0
   13d00:	beq	13d1c <__assert_fail@plt+0x2e58>
   13d04:	mov	r0, r4
   13d08:	bl	10dbc <__freading@plt>
   13d0c:	cmp	r0, #0
   13d10:	ldrbne	r0, [r4, #1]
   13d14:	tstne	r0, #1
   13d18:	bne	13d2c <__assert_fail@plt+0x2e68>
   13d1c:	mov	r0, r4
   13d20:	sub	sp, fp, #8
   13d24:	pop	{r4, sl, fp, lr}
   13d28:	b	10ce4 <fflush@plt>
   13d2c:	mov	r0, #1
   13d30:	mov	r2, #0
   13d34:	mov	r3, #0
   13d38:	str	r0, [sp]
   13d3c:	mov	r0, r4
   13d40:	bl	13d70 <__assert_fail@plt+0x2eac>
   13d44:	b	13d1c <__assert_fail@plt+0x2e58>
   13d48:	push	{r4, r5, r6, sl, fp, lr}
   13d4c:	add	fp, sp, #16
   13d50:	mov	r4, r0
   13d54:	bl	10e10 <__errno_location@plt>
   13d58:	ldr	r6, [r0]
   13d5c:	mov	r5, r0
   13d60:	mov	r0, r4
   13d64:	bl	10cf0 <free@plt>
   13d68:	str	r6, [r5]
   13d6c:	pop	{r4, r5, r6, sl, fp, pc}
   13d70:	push	{r4, r5, r6, r7, fp, lr}
   13d74:	add	fp, sp, #16
   13d78:	sub	sp, sp, #8
   13d7c:	mov	r4, r0
   13d80:	ldr	r0, [r0, #4]
   13d84:	mov	r5, r3
   13d88:	mov	r6, r2
   13d8c:	ldr	r1, [r4, #8]
   13d90:	cmp	r1, r0
   13d94:	bne	13db0 <__assert_fail@plt+0x2eec>
   13d98:	ldrd	r0, [r4, #16]
   13d9c:	cmp	r1, r0
   13da0:	bne	13db0 <__assert_fail@plt+0x2eec>
   13da4:	ldr	r0, [r4, #36]	; 0x24
   13da8:	cmp	r0, #0
   13dac:	beq	13dc8 <__assert_fail@plt+0x2f04>
   13db0:	mov	r0, r4
   13db4:	mov	r2, r6
   13db8:	mov	r3, r5
   13dbc:	sub	sp, fp, #16
   13dc0:	pop	{r4, r5, r6, r7, fp, lr}
   13dc4:	b	10e4c <fseeko64@plt>
   13dc8:	ldr	r7, [fp, #8]
   13dcc:	mov	r0, r4
   13dd0:	bl	10e34 <fileno@plt>
   13dd4:	mov	r2, r6
   13dd8:	mov	r3, r5
   13ddc:	str	r7, [sp]
   13de0:	bl	10d68 <lseek64@plt>
   13de4:	and	r2, r0, r1
   13de8:	cmn	r2, #1
   13dec:	beq	13e08 <__assert_fail@plt+0x2f44>
   13df0:	strd	r0, [r4, #80]	; 0x50
   13df4:	ldr	r0, [r4]
   13df8:	bic	r0, r0, #16
   13dfc:	str	r0, [r4]
   13e00:	mov	r0, #0
   13e04:	b	13e0c <__assert_fail@plt+0x2f48>
   13e08:	mvn	r0, #0
   13e0c:	sub	sp, fp, #16
   13e10:	pop	{r4, r5, r6, r7, fp, pc}
   13e14:	cmp	r0, #0
   13e18:	movweq	r0, #1
   13e1c:	cmn	r0, #1
   13e20:	ble	13e28 <__assert_fail@plt+0x2f64>
   13e24:	b	10da4 <malloc@plt>
   13e28:	push	{fp, lr}
   13e2c:	mov	fp, sp
   13e30:	bl	10e10 <__errno_location@plt>
   13e34:	mov	r1, #12
   13e38:	str	r1, [r0]
   13e3c:	mov	r0, #0
   13e40:	pop	{fp, pc}
   13e44:	push	{r4, r5, r6, r7, fp, lr}
   13e48:	add	fp, sp, #16
   13e4c:	sub	sp, sp, #8
   13e50:	add	r5, sp, #4
   13e54:	cmp	r0, #0
   13e58:	mov	r7, r2
   13e5c:	mov	r4, r1
   13e60:	movne	r5, r0
   13e64:	mov	r0, r5
   13e68:	bl	10d8c <mbrtowc@plt>
   13e6c:	mov	r6, r0
   13e70:	cmp	r7, #0
   13e74:	beq	13e98 <__assert_fail@plt+0x2fd4>
   13e78:	cmn	r6, #2
   13e7c:	bcc	13e98 <__assert_fail@plt+0x2fd4>
   13e80:	mov	r0, #0
   13e84:	bl	13fb0 <__assert_fail@plt+0x30ec>
   13e88:	cmp	r0, #0
   13e8c:	ldrbeq	r0, [r4]
   13e90:	moveq	r6, #1
   13e94:	streq	r0, [r5]
   13e98:	mov	r0, r6
   13e9c:	sub	sp, fp, #16
   13ea0:	pop	{r4, r5, r6, r7, fp, pc}
   13ea4:	push	{fp, lr}
   13ea8:	mov	fp, sp
   13eac:	cmp	r0, #0
   13eb0:	beq	13ecc <__assert_fail@plt+0x3008>
   13eb4:	cmp	r1, #0
   13eb8:	beq	13ed8 <__assert_fail@plt+0x3014>
   13ebc:	cmn	r1, #1
   13ec0:	ble	13ee0 <__assert_fail@plt+0x301c>
   13ec4:	pop	{fp, lr}
   13ec8:	b	10d44 <realloc@plt>
   13ecc:	mov	r0, r1
   13ed0:	pop	{fp, lr}
   13ed4:	b	13e14 <__assert_fail@plt+0x2f50>
   13ed8:	bl	13d48 <__assert_fail@plt+0x2e84>
   13edc:	b	13eec <__assert_fail@plt+0x3028>
   13ee0:	bl	10e10 <__errno_location@plt>
   13ee4:	mov	r1, #12
   13ee8:	str	r1, [r0]
   13eec:	mov	r0, #0
   13ef0:	pop	{fp, pc}
   13ef4:	cmp	r2, #0
   13ef8:	beq	13f28 <__assert_fail@plt+0x3064>
   13efc:	mvn	r3, #0
   13f00:	udiv	r3, r3, r2
   13f04:	cmp	r3, r1
   13f08:	bcs	13f28 <__assert_fail@plt+0x3064>
   13f0c:	push	{fp, lr}
   13f10:	mov	fp, sp
   13f14:	bl	10e10 <__errno_location@plt>
   13f18:	mov	r1, #12
   13f1c:	str	r1, [r0]
   13f20:	mov	r0, #0
   13f24:	pop	{fp, pc}
   13f28:	mul	r1, r2, r1
   13f2c:	b	13ea4 <__assert_fail@plt+0x2fe0>
   13f30:	push	{r4, r5, r6, sl, fp, lr}
   13f34:	add	fp, sp, #16
   13f38:	mov	r4, r0
   13f3c:	bl	10d80 <__fpending@plt>
   13f40:	mov	r5, r0
   13f44:	mov	r0, r4
   13f48:	bl	10cfc <ferror@plt>
   13f4c:	mov	r6, r0
   13f50:	mov	r0, r4
   13f54:	bl	10e40 <fclose@plt>
   13f58:	cmp	r6, #0
   13f5c:	beq	13f7c <__assert_fail@plt+0x30b8>
   13f60:	mvn	r4, #0
   13f64:	cmp	r0, #0
   13f68:	bne	13fa8 <__assert_fail@plt+0x30e4>
   13f6c:	bl	10e10 <__errno_location@plt>
   13f70:	mov	r1, #0
   13f74:	str	r1, [r0]
   13f78:	b	13fa8 <__assert_fail@plt+0x30e4>
   13f7c:	cmp	r0, #0
   13f80:	mov	r4, r0
   13f84:	mvnne	r4, #0
   13f88:	cmp	r5, #0
   13f8c:	bne	13fa8 <__assert_fail@plt+0x30e4>
   13f90:	cmp	r0, #0
   13f94:	beq	13fa8 <__assert_fail@plt+0x30e4>
   13f98:	bl	10e10 <__errno_location@plt>
   13f9c:	ldr	r0, [r0]
   13fa0:	subs	r4, r0, #9
   13fa4:	mvnne	r4, #0
   13fa8:	mov	r0, r4
   13fac:	pop	{r4, r5, r6, sl, fp, pc}
   13fb0:	push	{r4, sl, fp, lr}
   13fb4:	add	fp, sp, #8
   13fb8:	sub	sp, sp, #264	; 0x108
   13fbc:	add	r1, sp, #7
   13fc0:	movw	r2, #257	; 0x101
   13fc4:	bl	1404c <__assert_fail@plt+0x3188>
   13fc8:	mov	r4, #0
   13fcc:	cmp	r0, #0
   13fd0:	bne	14008 <__assert_fail@plt+0x3144>
   13fd4:	movw	r1, #18767	; 0x494f
   13fd8:	add	r0, sp, #7
   13fdc:	movt	r1, #1
   13fe0:	bl	10cc0 <strcmp@plt>
   13fe4:	cmp	r0, #0
   13fe8:	beq	14008 <__assert_fail@plt+0x3144>
   13fec:	movw	r1, #18769	; 0x4951
   13ff0:	add	r0, sp, #7
   13ff4:	movt	r1, #1
   13ff8:	bl	10cc0 <strcmp@plt>
   13ffc:	mov	r4, r0
   14000:	cmp	r0, #0
   14004:	movwne	r4, #1
   14008:	mov	r0, r4
   1400c:	sub	sp, fp, #8
   14010:	pop	{r4, sl, fp, pc}
   14014:	push	{fp, lr}
   14018:	mov	fp, sp
   1401c:	mov	r0, #14
   14020:	bl	10e70 <nl_langinfo@plt>
   14024:	movw	r1, #17622	; 0x44d6
   14028:	cmp	r0, #0
   1402c:	movt	r1, #1
   14030:	movne	r1, r0
   14034:	movw	r0, #18775	; 0x4957
   14038:	ldrb	r2, [r1]
   1403c:	movt	r0, #1
   14040:	cmp	r2, #0
   14044:	movne	r0, r1
   14048:	pop	{fp, pc}
   1404c:	push	{r4, r5, r6, r7, fp, lr}
   14050:	add	fp, sp, #16
   14054:	mov	r4, r1
   14058:	mov	r1, #0
   1405c:	mov	r6, r2
   14060:	bl	10e58 <setlocale@plt>
   14064:	cmp	r0, #0
   14068:	beq	14094 <__assert_fail@plt+0x31d0>
   1406c:	mov	r7, r0
   14070:	bl	10df8 <strlen@plt>
   14074:	cmp	r0, r6
   14078:	bcs	140a8 <__assert_fail@plt+0x31e4>
   1407c:	add	r2, r0, #1
   14080:	mov	r0, r4
   14084:	mov	r1, r7
   14088:	bl	10d14 <memcpy@plt>
   1408c:	mov	r5, #0
   14090:	b	140d0 <__assert_fail@plt+0x320c>
   14094:	cmp	r6, #0
   14098:	mov	r5, #22
   1409c:	movne	r0, #0
   140a0:	strbne	r0, [r4]
   140a4:	b	140d0 <__assert_fail@plt+0x320c>
   140a8:	mov	r5, #34	; 0x22
   140ac:	cmp	r6, #0
   140b0:	beq	140d0 <__assert_fail@plt+0x320c>
   140b4:	sub	r6, r6, #1
   140b8:	mov	r0, r4
   140bc:	mov	r1, r7
   140c0:	mov	r2, r6
   140c4:	bl	10d14 <memcpy@plt>
   140c8:	mov	r0, #0
   140cc:	strb	r0, [r4, r6]
   140d0:	mov	r0, r5
   140d4:	pop	{r4, r5, r6, r7, fp, pc}
   140d8:	mov	r1, #0
   140dc:	b	10e58 <setlocale@plt>
   140e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   140e4:	mov	r7, r0
   140e8:	ldr	r6, [pc, #72]	; 14138 <__assert_fail@plt+0x3274>
   140ec:	ldr	r5, [pc, #72]	; 1413c <__assert_fail@plt+0x3278>
   140f0:	add	r6, pc, r6
   140f4:	add	r5, pc, r5
   140f8:	sub	r6, r6, r5
   140fc:	mov	r8, r1
   14100:	mov	r9, r2
   14104:	bl	10c94 <calloc@plt-0x20>
   14108:	asrs	r6, r6, #2
   1410c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14110:	mov	r4, #0
   14114:	add	r4, r4, #1
   14118:	ldr	r3, [r5], #4
   1411c:	mov	r2, r9
   14120:	mov	r1, r8
   14124:	mov	r0, r7
   14128:	blx	r3
   1412c:	cmp	r6, r4
   14130:	bne	14114 <__assert_fail@plt+0x3250>
   14134:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14138:	andeq	r0, r1, r4, lsl lr
   1413c:	andeq	r0, r1, ip, lsl #28
   14140:	bx	lr
   14144:	ldr	r3, [pc, #12]	; 14158 <__assert_fail@plt+0x3294>
   14148:	mov	r1, #0
   1414c:	add	r3, pc, r3
   14150:	ldr	r2, [r3]
   14154:	b	10e1c <__cxa_atexit@plt>
   14158:	andeq	r0, r1, r8, ror pc

Disassembly of section .fini:

0001415c <.fini>:
   1415c:	push	{r3, lr}
   14160:	pop	{r3, pc}
