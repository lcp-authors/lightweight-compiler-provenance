
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011e20 <.init>:
   11e20:	push	{r3, lr}
   11e24:	bl	1206c <_start@@Base+0x3c>
   11e28:	pop	{r3, pc}

Disassembly of section .plt:

00011e2c <fdopen@plt-0x14>:
   11e2c:	push	{lr}		; (str lr, [sp, #-4]!)
   11e30:	ldr	lr, [pc, #4]	; 11e3c <fdopen@plt-0x4>
   11e34:	add	lr, pc, lr
   11e38:	ldr	pc, [lr, #8]!
   11e3c:	andeq	sl, r1, r4, asr #3

00011e40 <fdopen@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #106496	; 0x1a000
   11e48:	ldr	pc, [ip, #452]!	; 0x1c4

00011e4c <setbuf@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #106496	; 0x1a000
   11e54:	ldr	pc, [ip, #444]!	; 0x1bc

00011e58 <strtol@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #106496	; 0x1a000
   11e60:	ldr	pc, [ip, #436]!	; 0x1b4

00011e64 <printf@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #106496	; 0x1a000
   11e6c:	ldr	pc, [ip, #428]!	; 0x1ac

00011e70 <fflush@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #106496	; 0x1a000
   11e78:	ldr	pc, [ip, #420]!	; 0x1a4

00011e7c <free@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #106496	; 0x1a000
   11e84:	ldr	pc, [ip, #412]!	; 0x19c

00011e88 <memcpy@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #106496	; 0x1a000
   11e90:	ldr	pc, [ip, #404]!	; 0x194

00011e94 <mmap64@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #106496	; 0x1a000
   11e9c:	ldr	pc, [ip, #396]!	; 0x18c

00011ea0 <ftell@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #106496	; 0x1a000
   11ea8:	ldr	pc, [ip, #388]!	; 0x184

00011eac <uname@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #106496	; 0x1a000
   11eb4:	ldr	pc, [ip, #380]!	; 0x17c

00011eb8 <strdup@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #106496	; 0x1a000
   11ec0:	ldr	pc, [ip, #372]!	; 0x174

00011ec4 <realloc@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #106496	; 0x1a000
   11ecc:	ldr	pc, [ip, #364]!	; 0x16c

00011ed0 <fwrite@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #106496	; 0x1a000
   11ed8:	ldr	pc, [ip, #356]!	; 0x164

00011edc <open64@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #106496	; 0x1a000
   11ee4:	ldr	pc, [ip, #348]!	; 0x15c

00011ee8 <getenv@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #106496	; 0x1a000
   11ef0:	ldr	pc, [ip, #340]!	; 0x154

00011ef4 <puts@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #106496	; 0x1a000
   11efc:	ldr	pc, [ip, #332]!	; 0x14c

00011f00 <malloc@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #106496	; 0x1a000
   11f08:	ldr	pc, [ip, #324]!	; 0x144

00011f0c <__libc_start_main@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #106496	; 0x1a000
   11f14:	ldr	pc, [ip, #316]!	; 0x13c

00011f18 <strerror@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #106496	; 0x1a000
   11f20:	ldr	pc, [ip, #308]!	; 0x134

00011f24 <__gmon_start__@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #106496	; 0x1a000
   11f2c:	ldr	pc, [ip, #300]!	; 0x12c

00011f30 <getpid@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #106496	; 0x1a000
   11f38:	ldr	pc, [ip, #292]!	; 0x124

00011f3c <exit@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #106496	; 0x1a000
   11f44:	ldr	pc, [ip, #284]!	; 0x11c

00011f48 <strlen@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #106496	; 0x1a000
   11f50:	ldr	pc, [ip, #276]!	; 0x114

00011f54 <strchr@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #106496	; 0x1a000
   11f5c:	ldr	pc, [ip, #268]!	; 0x10c

00011f60 <fprintf@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #106496	; 0x1a000
   11f68:	ldr	pc, [ip, #260]!	; 0x104

00011f6c <__errno_location@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #106496	; 0x1a000
   11f74:	ldr	pc, [ip, #252]!	; 0xfc

00011f78 <__cxa_atexit@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #106496	; 0x1a000
   11f80:	ldr	pc, [ip, #244]!	; 0xf4

00011f84 <mkdir@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #106496	; 0x1a000
   11f8c:	ldr	pc, [ip, #236]!	; 0xec

00011f90 <memset@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #106496	; 0x1a000
   11f98:	ldr	pc, [ip, #228]!	; 0xe4

00011f9c <strncpy@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #106496	; 0x1a000
   11fa4:	ldr	pc, [ip, #220]!	; 0xdc

00011fa8 <prctl@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #106496	; 0x1a000
   11fb0:	ldr	pc, [ip, #212]!	; 0xd4

00011fb4 <fclose@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #106496	; 0x1a000
   11fbc:	ldr	pc, [ip, #204]!	; 0xcc

00011fc0 <strnlen@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #106496	; 0x1a000
   11fc8:	ldr	pc, [ip, #196]!	; 0xc4

00011fcc <munmap@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #106496	; 0x1a000
   11fd4:	ldr	pc, [ip, #188]!	; 0xbc

00011fd8 <fcntl64@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #106496	; 0x1a000
   11fe0:	ldr	pc, [ip, #180]!	; 0xb4

00011fe4 <strrchr@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #106496	; 0x1a000
   11fec:	ldr	pc, [ip, #172]!	; 0xac

00011ff0 <msync@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #106496	; 0x1a000
   11ff8:	ldr	pc, [ip, #164]!	; 0xa4

00011ffc <fseek@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #106496	; 0x1a000
   12004:	ldr	pc, [ip, #156]!	; 0x9c

00012008 <strncmp@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #106496	; 0x1a000
   12010:	ldr	pc, [ip, #148]!	; 0x94

00012014 <abort@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #106496	; 0x1a000
   1201c:	ldr	pc, [ip, #140]!	; 0x8c

00012020 <__assert_fail@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #106496	; 0x1a000
   12028:	ldr	pc, [ip, #132]!	; 0x84

Disassembly of section .text:

00012030 <_start@@Base>:
   12030:	mov	fp, #0
   12034:	mov	lr, #0
   12038:	pop	{r1}		; (ldr r1, [sp], #4)
   1203c:	mov	r2, sp
   12040:	push	{r2}		; (str r2, [sp, #-4]!)
   12044:	push	{r0}		; (str r0, [sp, #-4]!)
   12048:	ldr	ip, [pc, #16]	; 12060 <_start@@Base+0x30>
   1204c:	push	{ip}		; (str ip, [sp, #-4]!)
   12050:	ldr	r0, [pc, #12]	; 12064 <_start@@Base+0x34>
   12054:	ldr	r3, [pc, #12]	; 12068 <_start@@Base+0x38>
   12058:	bl	11f0c <__libc_start_main@plt>
   1205c:	bl	12014 <abort@plt>
   12060:	strdeq	r9, [r1], -r4
   12064:	andeq	r4, r1, r0, lsl #1
   12068:	muleq	r1, r4, fp
   1206c:	ldr	r3, [pc, #20]	; 12088 <_start@@Base+0x58>
   12070:	ldr	r2, [pc, #20]	; 1208c <_start@@Base+0x5c>
   12074:	add	r3, pc, r3
   12078:	ldr	r2, [r3, r2]
   1207c:	cmp	r2, #0
   12080:	bxeq	lr
   12084:	b	11f24 <__gmon_start__@plt>
   12088:	andeq	r9, r1, r4, lsl #31
   1208c:	andeq	r0, r0, r0, asr #1
   12090:	ldr	r0, [pc, #24]	; 120b0 <_start@@Base+0x80>
   12094:	ldr	r3, [pc, #24]	; 120b4 <_start@@Base+0x84>
   12098:	cmp	r3, r0
   1209c:	bxeq	lr
   120a0:	ldr	r3, [pc, #16]	; 120b8 <_start@@Base+0x88>
   120a4:	cmp	r3, #0
   120a8:	bxeq	lr
   120ac:	bx	r3
   120b0:	andeq	ip, r2, r4, ror #1
   120b4:	andeq	ip, r2, r4, ror #1
   120b8:	andeq	r0, r0, r0
   120bc:	ldr	r0, [pc, #36]	; 120e8 <_start@@Base+0xb8>
   120c0:	ldr	r1, [pc, #36]	; 120ec <_start@@Base+0xbc>
   120c4:	sub	r1, r1, r0
   120c8:	asr	r1, r1, #2
   120cc:	add	r1, r1, r1, lsr #31
   120d0:	asrs	r1, r1, #1
   120d4:	bxeq	lr
   120d8:	ldr	r3, [pc, #16]	; 120f0 <_start@@Base+0xc0>
   120dc:	cmp	r3, #0
   120e0:	bxeq	lr
   120e4:	bx	r3
   120e8:	andeq	ip, r2, r4, ror #1
   120ec:	andeq	ip, r2, r4, ror #1
   120f0:	andeq	r0, r0, r0
   120f4:	push	{r4, lr}
   120f8:	ldr	r4, [pc, #24]	; 12118 <_start@@Base+0xe8>
   120fc:	ldrb	r3, [r4]
   12100:	cmp	r3, #0
   12104:	popne	{r4, pc}
   12108:	bl	12090 <_start@@Base+0x60>
   1210c:	mov	r3, #1
   12110:	strb	r3, [r4]
   12114:	pop	{r4, pc}
   12118:	strdeq	ip, [r2], -r8
   1211c:	b	120bc <_start@@Base+0x8c>

00012120 <next@@Base>:
   12120:	push	{r4, r5, r6, r7, fp, lr}
   12124:	add	fp, sp, #16
   12128:	movw	r7, #49408	; 0xc100
   1212c:	movw	ip, #53144	; 0xcf98
   12130:	movt	r7, #2
   12134:	movt	ip, #2
   12138:	ldrd	r2, [r7]
   1213c:	str	r0, [ip]
   12140:	mov	r4, r7
   12144:	adds	r2, r2, #1
   12148:	adc	r3, r3, #0
   1214c:	strd	r2, [r7]
   12150:	ldr	r2, [ip, #204]	; 0xcc
   12154:	mov	r3, #16
   12158:	cmp	r2, #50	; 0x32
   1215c:	movwcc	r3, #8
   12160:	ldr	r3, [r4, r3]!
   12164:	adds	r3, r3, #1
   12168:	str	r3, [r4]
   1216c:	ldr	r3, [r4, #4]
   12170:	adc	r3, r3, #0
   12174:	cmp	r2, #49	; 0x31
   12178:	str	r3, [r4, #4]
   1217c:	bhi	121a8 <next@@Base+0x88>
   12180:	ldr	r4, [r7, #24]
   12184:	ldr	r3, [r7, #28]
   12188:	add	r2, ip, r2, lsl #2
   1218c:	adds	r4, r4, #1
   12190:	adc	r3, r3, #0
   12194:	str	r4, [r7, #24]
   12198:	str	r3, [r7, #28]
   1219c:	str	r0, [r2, #4]
   121a0:	ldr	r2, [ip, #204]	; 0xcc
   121a4:	b	121cc <next@@Base+0xac>
   121a8:	ldr	r4, [r7, #32]
   121ac:	ldr	r3, [r7, #36]	; 0x24
   121b0:	ldr	r1, [ip, #212]	; 0xd4
   121b4:	add	r1, r1, #1
   121b8:	adds	r4, r4, #1
   121bc:	str	r1, [ip, #212]	; 0xd4
   121c0:	adc	r1, r3, #0
   121c4:	str	r4, [r7, #32]
   121c8:	str	r1, [r7, #36]	; 0x24
   121cc:	add	r1, r2, #1
   121d0:	movw	r2, #53380	; 0xd084
   121d4:	mov	r5, r7
   121d8:	movt	r2, #2
   121dc:	str	r1, [ip, #204]	; 0xcc
   121e0:	mov	r1, #48	; 0x30
   121e4:	ldr	r3, [r2, #200]	; 0xc8
   121e8:	cmp	r3, #50	; 0x32
   121ec:	movwcc	r1, #40	; 0x28
   121f0:	ldr	r1, [r5, r1]!
   121f4:	adds	r1, r1, #1
   121f8:	str	r1, [r5]
   121fc:	ldr	r1, [r5, #4]
   12200:	adc	r1, r1, #0
   12204:	cmp	r3, #49	; 0x31
   12208:	str	r1, [r5, #4]
   1220c:	bhi	12234 <next@@Base+0x114>
   12210:	ldrd	r4, [r7, #56]	; 0x38
   12214:	add	r1, r3, #1
   12218:	str	r1, [r2, #200]	; 0xc8
   1221c:	movw	r1, #8480	; 0x2120
   12220:	movt	r1, #1
   12224:	str	r1, [r2, r3, lsl #2]
   12228:	adds	r4, r4, #1
   1222c:	adc	r5, r5, #0
   12230:	strd	r4, [r7, #56]	; 0x38
   12234:	ldr	r2, [ip, #232]	; 0xe8
   12238:	mov	r1, #72	; 0x48
   1223c:	mov	r3, r7
   12240:	cmp	r2, #0
   12244:	movwne	r1, #64	; 0x40
   12248:	ldr	r1, [r3, r1]!
   1224c:	adds	r1, r1, #1
   12250:	str	r1, [r3]
   12254:	ldr	r1, [r3, #4]
   12258:	adc	r1, r1, #0
   1225c:	cmp	r2, #0
   12260:	str	r1, [r3, #4]
   12264:	beq	12290 <next@@Base+0x170>
   12268:	ldrd	r4, [r7, #80]	; 0x50
   1226c:	adds	r4, r4, #1
   12270:	adc	r5, r5, #0
   12274:	strd	r4, [r7, #80]	; 0x50
   12278:	blx	r2
   1227c:	ldrd	r2, [r7, #144]	; 0x90
   12280:	adds	r2, r2, #1
   12284:	adc	r3, r3, #0
   12288:	strd	r2, [r7, #144]	; 0x90
   1228c:	pop	{r4, r5, r6, r7, fp, pc}
   12290:	ldr	r0, [ip, #220]	; 0xdc
   12294:	mov	r1, #96	; 0x60
   12298:	mov	r2, r7
   1229c:	cmp	r0, #0
   122a0:	movwne	r1, #88	; 0x58
   122a4:	ldr	r1, [r2, r1]!
   122a8:	adds	r1, r1, #1
   122ac:	str	r1, [r2]
   122b0:	ldr	r1, [r2, #4]
   122b4:	adc	r1, r1, #0
   122b8:	cmp	r0, #0
   122bc:	str	r1, [r2, #4]
   122c0:	beq	1231c <next@@Base+0x1fc>
   122c4:	ldr	r3, [ip, #224]	; 0xe0
   122c8:	mov	r1, #112	; 0x70
   122cc:	mov	r6, r7
   122d0:	ldr	r2, [ip, #228]	; 0xe4
   122d4:	cmp	r3, r0
   122d8:	movwlt	r1, #104	; 0x68
   122dc:	ldr	r1, [r6, r1]!
   122e0:	adds	r1, r1, #1
   122e4:	str	r1, [r6]
   122e8:	ldr	r1, [r6, #4]
   122ec:	adc	r1, r1, #0
   122f0:	cmp	r3, r0
   122f4:	str	r1, [r6, #4]
   122f8:	bge	12334 <next@@Base+0x214>
   122fc:	add	r0, r3, #1
   12300:	str	r0, [ip, #224]	; 0xe0
   12304:	ldrd	r0, [r7, #120]	; 0x78
   12308:	adds	r0, r0, #1
   1230c:	adc	r1, r1, #0
   12310:	strd	r0, [r7, #120]	; 0x78
   12314:	ldr	r0, [r2, r3, lsl #2]
   12318:	b	1227c <next@@Base+0x15c>
   1231c:	ldrd	r0, [r7, #136]	; 0x88
   12320:	adds	r0, r0, #1
   12324:	adc	r1, r1, #0
   12328:	strd	r0, [r7, #136]	; 0x88
   1232c:	ldr	r0, [ip, #216]	; 0xd8
   12330:	b	1227c <next@@Base+0x15c>
   12334:	ldrd	r4, [r7, #128]	; 0x80
   12338:	add	r0, r2, r0, lsl #2
   1233c:	adds	r4, r4, #1
   12340:	adc	r5, r5, #0
   12344:	strd	r4, [r7, #128]	; 0x80
   12348:	ldr	r0, [r0, #-4]
   1234c:	b	1227c <next@@Base+0x15c>

00012350 <next_reset@@Base>:
   12350:	push	{r4, sl, fp, lr}
   12354:	add	fp, sp, #8
   12358:	movw	r0, #49568	; 0xc1a0
   1235c:	add	r1, pc, #52	; 0x34
   12360:	movw	r4, #53144	; 0xcf98
   12364:	mov	r2, #236	; 0xec
   12368:	movt	r0, #2
   1236c:	vld1.64	{d16-d17}, [r1]
   12370:	movt	r4, #2
   12374:	mov	r1, #0
   12378:	vld1.64	{d18-d19}, [r0 :128]
   1237c:	vadd.i64	q8, q9, q8
   12380:	vst1.64	{d16-d17}, [r0 :128]
   12384:	mov	r0, r4
   12388:	bl	11f90 <memset@plt>
   1238c:	mov	r0, #50	; 0x32
   12390:	str	r0, [r4, #208]	; 0xd0
   12394:	pop	{r4, sl, fp, pc}
   12398:	andeq	r0, r0, r1
   1239c:	andeq	r0, r0, r0
   123a0:	andeq	r0, r0, r1
   123a4:	andeq	r0, r0, r0

000123a8 <push_back@@Base>:
   123a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   123ac:	add	fp, sp, #24
   123b0:	movw	r8, #49584	; 0xc1b0
   123b4:	movw	r2, #52720	; 0xcdf0
   123b8:	movt	r8, #2
   123bc:	movt	r2, #2
   123c0:	ldrd	r6, [r8]
   123c4:	str	r0, [r2]
   123c8:	str	r1, [r2, #204]	; 0xcc
   123cc:	mov	r4, r8
   123d0:	ldr	r3, [r2, #408]	; 0x198
   123d4:	adds	r6, r6, #1
   123d8:	adc	r7, r7, #0
   123dc:	cmp	r3, #50	; 0x32
   123e0:	strd	r6, [r8]
   123e4:	mov	r7, #16
   123e8:	movwcc	r7, #8
   123ec:	ldr	r7, [r4, r7]!
   123f0:	adds	r7, r7, #1
   123f4:	str	r7, [r4]
   123f8:	ldr	r7, [r4, #4]
   123fc:	adc	r7, r7, #0
   12400:	cmp	r3, #49	; 0x31
   12404:	str	r7, [r4, #4]
   12408:	bhi	12440 <push_back@@Base+0x98>
   1240c:	ldr	r4, [r8, #24]
   12410:	ldr	r7, [r8, #28]
   12414:	add	r3, r2, r3, lsl #2
   12418:	adds	r4, r4, #1
   1241c:	adc	r7, r7, #0
   12420:	str	r4, [r8, #24]
   12424:	str	r7, [r8, #28]
   12428:	str	r0, [r3, #4]
   1242c:	ldr	r3, [r2, #408]	; 0x198
   12430:	add	r3, r2, r3, lsl #2
   12434:	str	r1, [r3, #208]	; 0xd0
   12438:	ldr	r3, [r2, #408]	; 0x198
   1243c:	b	12464 <push_back@@Base+0xbc>
   12440:	ldr	r4, [r8, #32]
   12444:	ldr	r7, [r8, #36]	; 0x24
   12448:	ldr	r6, [r2, #416]	; 0x1a0
   1244c:	adds	r4, r4, #1
   12450:	add	r6, r6, #1
   12454:	adc	r7, r7, #0
   12458:	str	r6, [r2, #416]	; 0x1a0
   1245c:	str	r4, [r8, #32]
   12460:	str	r7, [r8, #36]	; 0x24
   12464:	movw	ip, #53380	; 0xd084
   12468:	add	r3, r3, #1
   1246c:	mov	r7, #48	; 0x30
   12470:	mov	r5, r8
   12474:	movt	ip, #2
   12478:	str	r3, [r2, #408]	; 0x198
   1247c:	ldr	r3, [ip, #200]	; 0xc8
   12480:	cmp	r3, #50	; 0x32
   12484:	movwcc	r7, #40	; 0x28
   12488:	ldr	r7, [r5, r7]!
   1248c:	adds	r7, r7, #1
   12490:	str	r7, [r5]
   12494:	ldr	r7, [r5, #4]
   12498:	adc	r7, r7, #0
   1249c:	cmp	r3, #49	; 0x31
   124a0:	str	r7, [r5, #4]
   124a4:	bhi	124cc <push_back@@Base+0x124>
   124a8:	ldrd	r4, [r8, #56]	; 0x38
   124ac:	add	r7, r3, #1
   124b0:	str	r7, [ip, #200]	; 0xc8
   124b4:	movw	r7, #9128	; 0x23a8
   124b8:	movt	r7, #1
   124bc:	str	r7, [ip, r3, lsl #2]
   124c0:	adds	r4, r4, #1
   124c4:	adc	r5, r5, #0
   124c8:	strd	r4, [r8, #56]	; 0x38
   124cc:	ldr	r2, [r2, #420]	; 0x1a4
   124d0:	mov	r3, #72	; 0x48
   124d4:	mov	r7, r8
   124d8:	cmp	r2, #0
   124dc:	movwne	r3, #64	; 0x40
   124e0:	ldr	r3, [r7, r3]!
   124e4:	adds	r3, r3, #1
   124e8:	str	r3, [r7]
   124ec:	ldr	r3, [r7, #4]
   124f0:	adc	r3, r3, #0
   124f4:	cmp	r2, #0
   124f8:	str	r3, [r7, #4]
   124fc:	beq	12514 <push_back@@Base+0x16c>
   12500:	ldrd	r4, [r8, #80]	; 0x50
   12504:	adds	r4, r4, #1
   12508:	adc	r5, r5, #0
   1250c:	strd	r4, [r8, #80]	; 0x50
   12510:	blx	r2
   12514:	ldrd	r0, [r8, #88]	; 0x58
   12518:	adds	r0, r0, #1
   1251c:	adc	r1, r1, #0
   12520:	strd	r0, [r8, #88]	; 0x58
   12524:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00012528 <push_back_reset@@Base>:
   12528:	push	{r4, sl, fp, lr}
   1252c:	add	fp, sp, #8
   12530:	movw	r0, #49680	; 0xc210
   12534:	add	r1, pc, #52	; 0x34
   12538:	movw	r4, #52720	; 0xcdf0
   1253c:	mov	r2, #424	; 0x1a8
   12540:	movt	r0, #2
   12544:	vld1.64	{d16-d17}, [r1]
   12548:	movt	r4, #2
   1254c:	mov	r1, #0
   12550:	vld1.64	{d18-d19}, [r0 :128]
   12554:	vadd.i64	q8, q9, q8
   12558:	vst1.64	{d16-d17}, [r0 :128]
   1255c:	mov	r0, r4
   12560:	bl	11f90 <memset@plt>
   12564:	mov	r0, #50	; 0x32
   12568:	str	r0, [r4, #412]	; 0x19c
   1256c:	pop	{r4, sl, fp, pc}
   12570:	andeq	r0, r0, r1
   12574:	andeq	r0, r0, r0
   12578:	andeq	r0, r0, r1
   1257c:	andeq	r0, r0, r0

00012580 <setup@@Base>:
   12580:	push	{r4, r5, fp, lr}
   12584:	add	fp, sp, #8
   12588:	vpush	{d8-d9}
   1258c:	movw	r0, #49568	; 0xc1a0
   12590:	movw	r1, #49696	; 0xc220
   12594:	add	r2, pc, #124	; 0x7c
   12598:	movw	r4, #53144	; 0xcf98
   1259c:	movt	r0, #2
   125a0:	movt	r1, #2
   125a4:	vld1.64	{d8-d9}, [r2]
   125a8:	movt	r4, #2
   125ac:	mov	r2, #236	; 0xec
   125b0:	vld1.64	{d16-d17}, [r1 :128]
   125b4:	vld1.64	{d18-d19}, [r0 :128]
   125b8:	vadd.i64	q8, q8, q4
   125bc:	vadd.i64	q9, q9, q4
   125c0:	vst1.64	{d16-d17}, [r1 :128]
   125c4:	vst1.64	{d18-d19}, [r0 :128]
   125c8:	mov	r0, r4
   125cc:	mov	r1, #0
   125d0:	bl	11f90 <memset@plt>
   125d4:	movw	r0, #49680	; 0xc210
   125d8:	mov	r5, #50	; 0x32
   125dc:	mov	r1, #0
   125e0:	mov	r2, #424	; 0x1a8
   125e4:	movt	r0, #2
   125e8:	str	r5, [r4, #208]	; 0xd0
   125ec:	movw	r4, #52720	; 0xcdf0
   125f0:	vld1.64	{d16-d17}, [r0 :128]
   125f4:	movt	r4, #2
   125f8:	vadd.i64	q8, q8, q4
   125fc:	vst1.64	{d16-d17}, [r0 :128]
   12600:	mov	r0, r4
   12604:	bl	11f90 <memset@plt>
   12608:	str	r5, [r4, #412]	; 0x19c
   1260c:	vpop	{d8-d9}
   12610:	pop	{r4, r5, fp, pc}
   12614:	nop	{0}
   12618:	andeq	r0, r0, r1
   1261c:	andeq	r0, r0, r0
   12620:	andeq	r0, r0, r1
   12624:	andeq	r0, r0, r0

00012628 <no_int_as_first_stuff@@Base>:
   12628:	push	{r4, r5, r6, r7, fp, lr}
   1262c:	add	fp, sp, #16
   12630:	sub	sp, sp, #16
   12634:	movw	r6, #49712	; 0xc230
   12638:	mov	r4, sp
   1263c:	movt	r6, #2
   12640:	ldrd	r0, [r6]
   12644:	adds	r0, r0, #1
   12648:	adc	r1, r1, #0
   1264c:	strd	r0, [r6]
   12650:	add	r1, sp, #4
   12654:	mov	r0, r4
   12658:	bl	15bc8 <init_grammar@@Base>
   1265c:	mov	r0, #4
   12660:	bl	11f00 <malloc@plt>
   12664:	mov	r5, r0
   12668:	bl	14690 <init_token_opar@@Base>
   1266c:	movw	r7, #53144	; 0xcf98
   12670:	mov	r0, r4
   12674:	movt	r7, #2
   12678:	str	r5, [r7, #216]	; 0xd8
   1267c:	bl	15c60 <read_function_ast_node@@Base>
   12680:	ldr	r1, [r7, #204]	; 0xcc
   12684:	mov	r2, #16
   12688:	mov	r3, r6
   1268c:	cmp	r1, #1
   12690:	movweq	r2, #8
   12694:	ldr	r2, [r3, r2]!
   12698:	adds	r2, r2, #1
   1269c:	str	r2, [r3]
   126a0:	ldr	r2, [r3, #4]
   126a4:	adc	r2, r2, #0
   126a8:	cmp	r1, #1
   126ac:	str	r2, [r3, #4]
   126b0:	bne	126fc <no_int_as_first_stuff@@Base+0xd4>
   126b4:	mov	r1, #32
   126b8:	cmp	r0, #0
   126bc:	mov	r2, r6
   126c0:	movweq	r1, #24
   126c4:	ldr	r1, [r2, r1]!
   126c8:	adds	r1, r1, #1
   126cc:	str	r1, [r2]
   126d0:	ldr	r1, [r2, #4]
   126d4:	adc	r1, r1, #0
   126d8:	cmp	r0, #0
   126dc:	str	r1, [r2, #4]
   126e0:	bne	1271c <no_int_as_first_stuff@@Base+0xf4>
   126e4:	ldrd	r0, [r6, #40]	; 0x28
   126e8:	adds	r0, r0, #1
   126ec:	adc	r1, r1, #0
   126f0:	strd	r0, [r6, #40]	; 0x28
   126f4:	sub	sp, fp, #16
   126f8:	pop	{r4, r5, r6, r7, fp, pc}
   126fc:	movw	r0, #39972	; 0x9c24
   12700:	movw	r1, #39998	; 0x9c3e
   12704:	movw	r3, #40066	; 0x9c82
   12708:	mov	r2, #41	; 0x29
   1270c:	movt	r0, #1
   12710:	movt	r1, #1
   12714:	movt	r3, #1
   12718:	bl	12020 <__assert_fail@plt>
   1271c:	movw	r0, #40095	; 0x9c9f
   12720:	movw	r1, #39998	; 0x9c3e
   12724:	movw	r3, #40066	; 0x9c82
   12728:	mov	r2, #42	; 0x2a
   1272c:	movt	r0, #1
   12730:	movt	r1, #1
   12734:	movt	r3, #1
   12738:	bl	12020 <__assert_fail@plt>

0001273c <int_but_not_followed_by_function@@Base>:
   1273c:	push	{r4, r5, r6, r7, fp, lr}
   12740:	add	fp, sp, #16
   12744:	sub	sp, sp, #16
   12748:	movw	r6, #49760	; 0xc260
   1274c:	mov	r4, sp
   12750:	movt	r6, #2
   12754:	ldrd	r0, [r6]
   12758:	adds	r0, r0, #1
   1275c:	adc	r1, r1, #0
   12760:	strd	r0, [r6]
   12764:	add	r1, sp, #4
   12768:	mov	r0, r4
   1276c:	bl	15bc8 <init_grammar@@Base>
   12770:	mov	r0, #8
   12774:	bl	11f00 <malloc@plt>
   12778:	mov	r5, r0
   1277c:	mov	r0, #4
   12780:	bl	11f00 <malloc@plt>
   12784:	str	r0, [r5]
   12788:	bl	145d8 <init_token_int_type@@Base>
   1278c:	mov	r0, #4
   12790:	bl	11f00 <malloc@plt>
   12794:	str	r0, [r5, #4]
   12798:	bl	14690 <init_token_opar@@Base>
   1279c:	movw	r7, #53144	; 0xcf98
   127a0:	mov	r0, #2
   127a4:	movt	r7, #2
   127a8:	str	r0, [r7, #220]	; 0xdc
   127ac:	mov	r0, r4
   127b0:	str	r5, [r7, #228]	; 0xe4
   127b4:	bl	15c60 <read_function_ast_node@@Base>
   127b8:	ldr	r1, [r7, #204]	; 0xcc
   127bc:	mov	r2, #16
   127c0:	mov	r3, r6
   127c4:	cmp	r1, #2
   127c8:	movweq	r2, #8
   127cc:	ldr	r2, [r3, r2]!
   127d0:	adds	r2, r2, #1
   127d4:	str	r2, [r3]
   127d8:	ldr	r2, [r3, #4]
   127dc:	adc	r2, r2, #0
   127e0:	cmp	r1, #2
   127e4:	str	r2, [r3, #4]
   127e8:	bne	12834 <int_but_not_followed_by_function@@Base+0xf8>
   127ec:	mov	r1, #32
   127f0:	cmp	r0, #0
   127f4:	mov	r2, r6
   127f8:	movweq	r1, #24
   127fc:	ldr	r1, [r2, r1]!
   12800:	adds	r1, r1, #1
   12804:	str	r1, [r2]
   12808:	ldr	r1, [r2, #4]
   1280c:	adc	r1, r1, #0
   12810:	cmp	r0, #0
   12814:	str	r1, [r2, #4]
   12818:	bne	12854 <int_but_not_followed_by_function@@Base+0x118>
   1281c:	ldrd	r0, [r6, #40]	; 0x28
   12820:	adds	r0, r0, #1
   12824:	adc	r1, r1, #0
   12828:	strd	r0, [r6, #40]	; 0x28
   1282c:	sub	sp, fp, #16
   12830:	pop	{r4, r5, r6, r7, fp, pc}
   12834:	movw	r0, #40107	; 0x9cab
   12838:	movw	r1, #39998	; 0x9c3e
   1283c:	movw	r3, #40133	; 0x9cc5
   12840:	mov	r2, #67	; 0x43
   12844:	movt	r0, #1
   12848:	movt	r1, #1
   1284c:	movt	r3, #1
   12850:	bl	12020 <__assert_fail@plt>
   12854:	movw	r0, #40095	; 0x9c9f
   12858:	movw	r1, #39998	; 0x9c3e
   1285c:	movw	r3, #40133	; 0x9cc5
   12860:	mov	r2, #68	; 0x44
   12864:	movt	r0, #1
   12868:	movt	r1, #1
   1286c:	movt	r3, #1
   12870:	bl	12020 <__assert_fail@plt>

00012874 <boolean_expression_is_read_properly@@Base>:
   12874:	push	{r4, r5, r6, r7, fp, lr}
   12878:	add	fp, sp, #16
   1287c:	sub	sp, sp, #16
   12880:	movw	r7, #49808	; 0xc290
   12884:	movt	r7, #2
   12888:	ldrd	r0, [r7]
   1288c:	adds	r0, r0, #1
   12890:	adc	r1, r1, #0
   12894:	strd	r0, [r7]
   12898:	mov	r0, #3
   1289c:	bl	11f00 <malloc@plt>
   128a0:	mov	r6, r0
   128a4:	movw	r0, #15649	; 0x3d21
   128a8:	mov	r4, sp
   128ac:	add	r1, sp, #4
   128b0:	strh	r0, [r6]
   128b4:	mov	r0, #0
   128b8:	strb	r0, [r6, #2]
   128bc:	mov	r0, r4
   128c0:	bl	15bc8 <init_grammar@@Base>
   128c4:	mov	r0, #20
   128c8:	bl	11f00 <malloc@plt>
   128cc:	mov	r5, r0
   128d0:	mov	r0, #8
   128d4:	bl	11f00 <malloc@plt>
   128d8:	mov	r1, #2
   128dc:	str	r0, [r5]
   128e0:	bl	14610 <init_token_int_value@@Base>
   128e4:	mov	r0, #8
   128e8:	bl	11f00 <malloc@plt>
   128ec:	mov	r1, #2
   128f0:	str	r0, [r5, #4]
   128f4:	bl	14610 <init_token_int_value@@Base>
   128f8:	mov	r0, #8
   128fc:	bl	11f00 <malloc@plt>
   12900:	mov	r1, r6
   12904:	str	r0, [r5, #8]
   12908:	bl	14888 <init_token_boolean_op@@Base>
   1290c:	mov	r0, #8
   12910:	bl	11f00 <malloc@plt>
   12914:	mov	r1, #1
   12918:	str	r0, [r5, #12]
   1291c:	bl	14610 <init_token_int_value@@Base>
   12920:	mov	r0, #4
   12924:	bl	11f00 <malloc@plt>
   12928:	str	r0, [r5, #16]
   1292c:	bl	146c8 <init_token_cpar@@Base>
   12930:	movw	r6, #53144	; 0xcf98
   12934:	mov	r0, #5
   12938:	movt	r6, #2
   1293c:	str	r0, [r6, #220]	; 0xdc
   12940:	mov	r0, r4
   12944:	str	r5, [r6, #228]	; 0xe4
   12948:	bl	16360 <read_boolean_expression@@Base>
   1294c:	ldr	r1, [r6, #204]	; 0xcc
   12950:	mov	r2, #16
   12954:	mov	r3, r7
   12958:	cmp	r1, #5
   1295c:	movweq	r2, #8
   12960:	ldr	r2, [r3, r2]!
   12964:	adds	r2, r2, #1
   12968:	str	r2, [r3]
   1296c:	ldr	r2, [r3, #4]
   12970:	adc	r2, r2, #0
   12974:	cmp	r1, #5
   12978:	str	r2, [r3, #4]
   1297c:	bne	12a08 <boolean_expression_is_read_properly@@Base+0x194>
   12980:	movw	r1, #52720	; 0xcdf0
   12984:	mov	r2, #32
   12988:	mov	r3, r7
   1298c:	movt	r1, #2
   12990:	ldr	r1, [r1, #408]	; 0x198
   12994:	cmp	r1, #1
   12998:	movweq	r2, #24
   1299c:	ldr	r2, [r3, r2]!
   129a0:	adds	r2, r2, #1
   129a4:	str	r2, [r3]
   129a8:	ldr	r2, [r3, #4]
   129ac:	adc	r2, r2, #0
   129b0:	cmp	r1, #1
   129b4:	str	r2, [r3, #4]
   129b8:	bne	12a28 <boolean_expression_is_read_properly@@Base+0x1b4>
   129bc:	ldr	r0, [r0]
   129c0:	mov	r1, #48	; 0x30
   129c4:	mov	r2, r7
   129c8:	cmp	r0, #5
   129cc:	movweq	r1, #40	; 0x28
   129d0:	ldr	r1, [r2, r1]!
   129d4:	adds	r1, r1, #1
   129d8:	str	r1, [r2]
   129dc:	ldr	r1, [r2, #4]
   129e0:	adc	r1, r1, #0
   129e4:	cmp	r0, #5
   129e8:	str	r1, [r2, #4]
   129ec:	bne	12a48 <boolean_expression_is_read_properly@@Base+0x1d4>
   129f0:	ldrd	r0, [r7, #56]	; 0x38
   129f4:	adds	r0, r0, #1
   129f8:	adc	r1, r1, #0
   129fc:	strd	r0, [r7, #56]	; 0x38
   12a00:	sub	sp, fp, #16
   12a04:	pop	{r4, r5, r6, r7, fp, pc}
   12a08:	movw	r0, #40173	; 0x9ced
   12a0c:	movw	r1, #39998	; 0x9c3e
   12a10:	movw	r3, #40199	; 0x9d07
   12a14:	mov	r2, #105	; 0x69
   12a18:	movt	r0, #1
   12a1c:	movt	r1, #1
   12a20:	movt	r3, #1
   12a24:	bl	12020 <__assert_fail@plt>
   12a28:	movw	r0, #40242	; 0x9d32
   12a2c:	movw	r1, #39998	; 0x9c3e
   12a30:	movw	r3, #40199	; 0x9d07
   12a34:	mov	r2, #106	; 0x6a
   12a38:	movt	r0, #1
   12a3c:	movt	r1, #1
   12a40:	movt	r3, #1
   12a44:	bl	12020 <__assert_fail@plt>
   12a48:	movw	r0, #40273	; 0x9d51
   12a4c:	movw	r1, #39998	; 0x9c3e
   12a50:	movw	r3, #40199	; 0x9d07
   12a54:	mov	r2, #107	; 0x6b
   12a58:	movt	r0, #1
   12a5c:	movt	r1, #1
   12a60:	movt	r3, #1
   12a64:	bl	12020 <__assert_fail@plt>

00012a68 <boolean_expression_complex@@Base>:
   12a68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12a6c:	add	fp, sp, #24
   12a70:	sub	sp, sp, #16
   12a74:	movw	r9, #49872	; 0xc2d0
   12a78:	movt	r9, #2
   12a7c:	ldrd	r0, [r9]
   12a80:	adds	r0, r0, #1
   12a84:	adc	r1, r1, #0
   12a88:	strd	r0, [r9]
   12a8c:	mov	r0, #3
   12a90:	bl	11f00 <malloc@plt>
   12a94:	mov	r4, r0
   12a98:	mov	r0, #3
   12a9c:	bl	11f00 <malloc@plt>
   12aa0:	mov	r7, r0
   12aa4:	mov	r0, #3
   12aa8:	bl	11f00 <malloc@plt>
   12aac:	mov	r6, r0
   12ab0:	movw	r0, #15676	; 0x3d3c
   12ab4:	movw	r1, #9766	; 0x2626
   12ab8:	mov	r8, sp
   12abc:	strh	r0, [r4]
   12ac0:	mov	r0, #0
   12ac4:	strb	r0, [r7, #2]
   12ac8:	strb	r0, [r4, #2]
   12acc:	strb	r0, [r6, #2]
   12ad0:	movw	r0, #15677	; 0x3d3d
   12ad4:	strh	r1, [r7]
   12ad8:	add	r1, sp, #4
   12adc:	strh	r0, [r6]
   12ae0:	mov	r0, r8
   12ae4:	bl	15bc8 <init_grammar@@Base>
   12ae8:	mov	r0, #40	; 0x28
   12aec:	bl	11f00 <malloc@plt>
   12af0:	mov	r5, r0
   12af4:	mov	r0, #8
   12af8:	bl	11f00 <malloc@plt>
   12afc:	mov	r1, #2
   12b00:	str	r0, [r5]
   12b04:	bl	14610 <init_token_int_value@@Base>
   12b08:	mov	r0, #8
   12b0c:	bl	11f00 <malloc@plt>
   12b10:	mov	r1, #2
   12b14:	str	r0, [r5, #4]
   12b18:	bl	14610 <init_token_int_value@@Base>
   12b1c:	mov	r0, #8
   12b20:	bl	11f00 <malloc@plt>
   12b24:	mov	r1, r4
   12b28:	str	r0, [r5, #8]
   12b2c:	bl	14888 <init_token_boolean_op@@Base>
   12b30:	mov	r0, #8
   12b34:	bl	11f00 <malloc@plt>
   12b38:	mov	r1, #1
   12b3c:	str	r0, [r5, #12]
   12b40:	bl	14610 <init_token_int_value@@Base>
   12b44:	mov	r0, #8
   12b48:	bl	11f00 <malloc@plt>
   12b4c:	mov	r1, r7
   12b50:	str	r0, [r5, #16]
   12b54:	bl	14888 <init_token_boolean_op@@Base>
   12b58:	mov	r0, #8
   12b5c:	bl	11f00 <malloc@plt>
   12b60:	mov	r1, #4
   12b64:	str	r0, [r5, #20]
   12b68:	bl	14610 <init_token_int_value@@Base>
   12b6c:	mov	r0, #8
   12b70:	bl	11f00 <malloc@plt>
   12b74:	mov	r1, #4
   12b78:	str	r0, [r5, #24]
   12b7c:	bl	14610 <init_token_int_value@@Base>
   12b80:	mov	r0, #8
   12b84:	bl	11f00 <malloc@plt>
   12b88:	mov	r1, r6
   12b8c:	str	r0, [r5, #28]
   12b90:	bl	14888 <init_token_boolean_op@@Base>
   12b94:	mov	r0, #8
   12b98:	bl	11f00 <malloc@plt>
   12b9c:	mov	r1, #4
   12ba0:	str	r0, [r5, #32]
   12ba4:	bl	14610 <init_token_int_value@@Base>
   12ba8:	mov	r0, #4
   12bac:	bl	11f00 <malloc@plt>
   12bb0:	str	r0, [r5, #36]	; 0x24
   12bb4:	bl	146c8 <init_token_cpar@@Base>
   12bb8:	movw	r4, #53144	; 0xcf98
   12bbc:	mov	r0, #10
   12bc0:	movt	r4, #2
   12bc4:	str	r0, [r4, #220]	; 0xdc
   12bc8:	mov	r0, r8
   12bcc:	str	r5, [r4, #228]	; 0xe4
   12bd0:	bl	16360 <read_boolean_expression@@Base>
   12bd4:	ldr	r1, [r4, #204]	; 0xcc
   12bd8:	mov	r2, #16
   12bdc:	mov	r3, r9
   12be0:	cmp	r1, #10
   12be4:	movweq	r2, #8
   12be8:	ldr	r2, [r3, r2]!
   12bec:	adds	r2, r2, #1
   12bf0:	str	r2, [r3]
   12bf4:	ldr	r2, [r3, #4]
   12bf8:	adc	r2, r2, #0
   12bfc:	cmp	r1, #10
   12c00:	str	r2, [r3, #4]
   12c04:	bne	12c54 <boolean_expression_complex@@Base+0x1ec>
   12c08:	ldr	r0, [r0]
   12c0c:	mov	r1, #32
   12c10:	mov	r2, r9
   12c14:	cmp	r0, #5
   12c18:	movweq	r1, #24
   12c1c:	ldr	r1, [r2, r1]!
   12c20:	adds	r1, r1, #1
   12c24:	str	r1, [r2]
   12c28:	ldr	r1, [r2, #4]
   12c2c:	adc	r1, r1, #0
   12c30:	cmp	r0, #5
   12c34:	str	r1, [r2, #4]
   12c38:	bne	12c74 <boolean_expression_complex@@Base+0x20c>
   12c3c:	ldrd	r0, [r9, #40]	; 0x28
   12c40:	adds	r0, r0, #1
   12c44:	adc	r1, r1, #0
   12c48:	strd	r0, [r9, #40]	; 0x28
   12c4c:	sub	sp, fp, #24
   12c50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12c54:	movw	r0, #40305	; 0x9d71
   12c58:	movw	r1, #39998	; 0x9c3e
   12c5c:	movw	r3, #40332	; 0x9d8c
   12c60:	mov	r2, #166	; 0xa6
   12c64:	movt	r0, #1
   12c68:	movt	r1, #1
   12c6c:	movt	r3, #1
   12c70:	bl	12020 <__assert_fail@plt>
   12c74:	movw	r0, #40273	; 0x9d51
   12c78:	movw	r1, #39998	; 0x9c3e
   12c7c:	movw	r3, #40332	; 0x9d8c
   12c80:	mov	r2, #167	; 0xa7
   12c84:	movt	r0, #1
   12c88:	movt	r1, #1
   12c8c:	movt	r3, #1
   12c90:	bl	12020 <__assert_fail@plt>

00012c94 <boolean_binary_operator_is_read_properly@@Base>:
   12c94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12c98:	add	fp, sp, #24
   12c9c:	sub	sp, sp, #16
   12ca0:	movw	r7, #49920	; 0xc300
   12ca4:	mov	r8, #3
   12ca8:	movt	r7, #2
   12cac:	ldrd	r0, [r7]
   12cb0:	adds	r0, r0, #1
   12cb4:	adc	r1, r1, #0
   12cb8:	strd	r0, [r7]
   12cbc:	mov	r0, #3
   12cc0:	bl	11f00 <malloc@plt>
   12cc4:	mov	r5, r0
   12cc8:	movw	r0, #15649	; 0x3d21
   12ccc:	mov	r4, sp
   12cd0:	add	r1, sp, #4
   12cd4:	strh	r0, [r5]
   12cd8:	mov	r0, #0
   12cdc:	strb	r0, [r5, #2]
   12ce0:	mov	r0, r4
   12ce4:	bl	15bc8 <init_grammar@@Base>
   12ce8:	mov	r0, #12
   12cec:	bl	11f00 <malloc@plt>
   12cf0:	mov	r6, r0
   12cf4:	mov	r0, #8
   12cf8:	bl	11f00 <malloc@plt>
   12cfc:	mov	r1, #2
   12d00:	str	r0, [r6]
   12d04:	bl	14610 <init_token_int_value@@Base>
   12d08:	mov	r0, #8
   12d0c:	bl	11f00 <malloc@plt>
   12d10:	mov	r1, r5
   12d14:	str	r0, [r6, #4]
   12d18:	bl	14888 <init_token_boolean_op@@Base>
   12d1c:	mov	r0, #8
   12d20:	bl	11f00 <malloc@plt>
   12d24:	mov	r1, #1
   12d28:	str	r0, [r6, #8]
   12d2c:	bl	14610 <init_token_int_value@@Base>
   12d30:	movw	r5, #53144	; 0xcf98
   12d34:	mov	r0, r4
   12d38:	movt	r5, #2
   12d3c:	str	r8, [r5, #220]	; 0xdc
   12d40:	str	r6, [r5, #228]	; 0xe4
   12d44:	bl	1669c <read_boolean_binary_expression@@Base>
   12d48:	ldr	r1, [r5, #204]	; 0xcc
   12d4c:	mov	r2, #16
   12d50:	mov	r3, r7
   12d54:	cmp	r1, #3
   12d58:	movweq	r2, #8
   12d5c:	ldr	r2, [r3, r2]!
   12d60:	adds	r2, r2, #1
   12d64:	str	r2, [r3]
   12d68:	ldr	r2, [r3, #4]
   12d6c:	adc	r2, r2, #0
   12d70:	cmp	r1, #3
   12d74:	str	r2, [r3, #4]
   12d78:	bne	12e6c <boolean_binary_operator_is_read_properly@@Base+0x1d8>
   12d7c:	ldr	r1, [r0]
   12d80:	mov	r2, #32
   12d84:	mov	r3, r7
   12d88:	cmp	r1, #5
   12d8c:	movweq	r2, #24
   12d90:	ldr	r2, [r3, r2]!
   12d94:	adds	r2, r2, #1
   12d98:	str	r2, [r3]
   12d9c:	ldr	r2, [r3, #4]
   12da0:	adc	r2, r2, #0
   12da4:	cmp	r1, #5
   12da8:	str	r2, [r3, #4]
   12dac:	bne	12e8c <boolean_binary_operator_is_read_properly@@Base+0x1f8>
   12db0:	ldr	r1, [r0, #8]
   12db4:	mov	r2, #48	; 0x30
   12db8:	mov	r3, r7
   12dbc:	ldr	r1, [r1]
   12dc0:	cmp	r1, #1
   12dc4:	movweq	r2, #40	; 0x28
   12dc8:	ldr	r2, [r3, r2]!
   12dcc:	adds	r2, r2, #1
   12dd0:	str	r2, [r3]
   12dd4:	ldr	r2, [r3, #4]
   12dd8:	adc	r2, r2, #0
   12ddc:	cmp	r1, #1
   12de0:	str	r2, [r3, #4]
   12de4:	bne	12eac <boolean_binary_operator_is_read_properly@@Base+0x218>
   12de8:	ldr	r1, [r0, #16]
   12dec:	mov	r2, #64	; 0x40
   12df0:	mov	r3, r7
   12df4:	cmp	r1, #1
   12df8:	movweq	r2, #56	; 0x38
   12dfc:	ldr	r2, [r3, r2]!
   12e00:	adds	r2, r2, #1
   12e04:	str	r2, [r3]
   12e08:	ldr	r2, [r3, #4]
   12e0c:	adc	r2, r2, #0
   12e10:	cmp	r1, #1
   12e14:	str	r2, [r3, #4]
   12e18:	bne	12ecc <boolean_binary_operator_is_read_properly@@Base+0x238>
   12e1c:	ldr	r0, [r0, #12]
   12e20:	mov	r1, #80	; 0x50
   12e24:	mov	r2, r7
   12e28:	ldr	r0, [r0]
   12e2c:	cmp	r0, #1
   12e30:	movweq	r1, #72	; 0x48
   12e34:	ldr	r1, [r2, r1]!
   12e38:	adds	r1, r1, #1
   12e3c:	str	r1, [r2]
   12e40:	ldr	r1, [r2, #4]
   12e44:	adc	r1, r1, #0
   12e48:	cmp	r0, #1
   12e4c:	str	r1, [r2, #4]
   12e50:	bne	12eec <boolean_binary_operator_is_read_properly@@Base+0x258>
   12e54:	ldrd	r0, [r7, #88]	; 0x58
   12e58:	adds	r0, r0, #1
   12e5c:	adc	r1, r1, #0
   12e60:	strd	r0, [r7, #88]	; 0x58
   12e64:	sub	sp, fp, #24
   12e68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12e6c:	movw	r0, #40366	; 0x9dae
   12e70:	movw	r1, #39998	; 0x9c3e
   12e74:	movw	r3, #40392	; 0x9dc8
   12e78:	mov	r2, #200	; 0xc8
   12e7c:	movt	r0, #1
   12e80:	movt	r1, #1
   12e84:	movt	r3, #1
   12e88:	bl	12020 <__assert_fail@plt>
   12e8c:	movw	r0, #40273	; 0x9d51
   12e90:	movw	r1, #39998	; 0x9c3e
   12e94:	movw	r3, #40392	; 0x9dc8
   12e98:	mov	r2, #201	; 0xc9
   12e9c:	movt	r0, #1
   12ea0:	movt	r1, #1
   12ea4:	movt	r3, #1
   12ea8:	bl	12020 <__assert_fail@plt>
   12eac:	movw	r0, #40440	; 0x9df8
   12eb0:	movw	r1, #39998	; 0x9c3e
   12eb4:	movw	r3, #40392	; 0x9dc8
   12eb8:	mov	r2, #203	; 0xcb
   12ebc:	movt	r0, #1
   12ec0:	movt	r1, #1
   12ec4:	movt	r3, #1
   12ec8:	bl	12020 <__assert_fail@plt>
   12ecc:	movw	r0, #40467	; 0x9e13
   12ed0:	movw	r1, #39998	; 0x9c3e
   12ed4:	movw	r3, #40392	; 0x9dc8
   12ed8:	mov	r2, #204	; 0xcc
   12edc:	movt	r0, #1
   12ee0:	movt	r1, #1
   12ee4:	movt	r3, #1
   12ee8:	bl	12020 <__assert_fail@plt>
   12eec:	movw	r0, #40492	; 0x9e2c
   12ef0:	movw	r1, #39998	; 0x9c3e
   12ef4:	movw	r3, #40392	; 0x9dc8
   12ef8:	mov	r2, #205	; 0xcd
   12efc:	movt	r0, #1
   12f00:	movt	r1, #1
   12f04:	movt	r3, #1
   12f08:	bl	12020 <__assert_fail@plt>

00012f0c <boolean_unary_operator_is_read_properly@@Base>:
   12f0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12f10:	add	fp, sp, #24
   12f14:	sub	sp, sp, #16
   12f18:	movw	r7, #50016	; 0xc360
   12f1c:	mov	r8, #2
   12f20:	movt	r7, #2
   12f24:	ldrd	r0, [r7]
   12f28:	adds	r0, r0, #1
   12f2c:	adc	r1, r1, #0
   12f30:	strd	r0, [r7]
   12f34:	mov	r0, #2
   12f38:	bl	11f00 <malloc@plt>
   12f3c:	mov	r5, r0
   12f40:	mov	r0, #33	; 0x21
   12f44:	mov	r4, sp
   12f48:	add	r1, sp, #4
   12f4c:	strh	r0, [r5]
   12f50:	mov	r0, r4
   12f54:	bl	15bc8 <init_grammar@@Base>
   12f58:	mov	r0, #8
   12f5c:	bl	11f00 <malloc@plt>
   12f60:	mov	r6, r0
   12f64:	mov	r0, #8
   12f68:	bl	11f00 <malloc@plt>
   12f6c:	mov	r1, r5
   12f70:	str	r0, [r6]
   12f74:	bl	14888 <init_token_boolean_op@@Base>
   12f78:	mov	r0, #8
   12f7c:	bl	11f00 <malloc@plt>
   12f80:	mov	r1, #1
   12f84:	str	r0, [r6, #4]
   12f88:	bl	14610 <init_token_int_value@@Base>
   12f8c:	movw	r5, #53144	; 0xcf98
   12f90:	mov	r0, r4
   12f94:	movt	r5, #2
   12f98:	str	r8, [r5, #220]	; 0xdc
   12f9c:	str	r6, [r5, #228]	; 0xe4
   12fa0:	bl	168b8 <read_boolean_unary_expression@@Base>
   12fa4:	ldr	r1, [r5, #204]	; 0xcc
   12fa8:	mov	r2, #16
   12fac:	mov	r3, r7
   12fb0:	cmp	r1, #2
   12fb4:	movweq	r2, #8
   12fb8:	ldr	r2, [r3, r2]!
   12fbc:	adds	r2, r2, #1
   12fc0:	str	r2, [r3]
   12fc4:	ldr	r2, [r3, #4]
   12fc8:	adc	r2, r2, #0
   12fcc:	cmp	r1, #2
   12fd0:	str	r2, [r3, #4]
   12fd4:	bne	130c4 <boolean_unary_operator_is_read_properly@@Base+0x1b8>
   12fd8:	ldr	r1, [r0]
   12fdc:	mov	r2, #32
   12fe0:	mov	r3, r7
   12fe4:	cmp	r1, #5
   12fe8:	movweq	r2, #24
   12fec:	ldr	r2, [r3, r2]!
   12ff0:	adds	r2, r2, #1
   12ff4:	str	r2, [r3]
   12ff8:	ldr	r2, [r3, #4]
   12ffc:	adc	r2, r2, #0
   13000:	cmp	r1, #5
   13004:	str	r2, [r3, #4]
   13008:	bne	130e4 <boolean_unary_operator_is_read_properly@@Base+0x1d8>
   1300c:	ldr	r1, [r0, #8]
   13010:	mov	r2, #48	; 0x30
   13014:	mov	r3, r7
   13018:	ldr	r1, [r1]
   1301c:	cmp	r1, #1
   13020:	movweq	r2, #40	; 0x28
   13024:	ldr	r2, [r3, r2]!
   13028:	adds	r2, r2, #1
   1302c:	str	r2, [r3]
   13030:	ldr	r2, [r3, #4]
   13034:	adc	r2, r2, #0
   13038:	cmp	r1, #1
   1303c:	str	r2, [r3, #4]
   13040:	bne	13104 <boolean_unary_operator_is_read_properly@@Base+0x1f8>
   13044:	ldr	r1, [r0, #16]
   13048:	mov	r2, #64	; 0x40
   1304c:	mov	r3, r7
   13050:	cmp	r1, #8
   13054:	movweq	r2, #56	; 0x38
   13058:	ldr	r2, [r3, r2]!
   1305c:	adds	r2, r2, #1
   13060:	str	r2, [r3]
   13064:	ldr	r2, [r3, #4]
   13068:	adc	r2, r2, #0
   1306c:	cmp	r1, #8
   13070:	str	r2, [r3, #4]
   13074:	bne	13124 <boolean_unary_operator_is_read_properly@@Base+0x218>
   13078:	ldr	r0, [r0, #12]
   1307c:	mov	r1, #80	; 0x50
   13080:	mov	r2, r7
   13084:	cmp	r0, #0
   13088:	movweq	r1, #72	; 0x48
   1308c:	ldr	r1, [r2, r1]!
   13090:	adds	r1, r1, #1
   13094:	str	r1, [r2]
   13098:	ldr	r1, [r2, #4]
   1309c:	adc	r1, r1, #0
   130a0:	cmp	r0, #0
   130a4:	str	r1, [r2, #4]
   130a8:	bne	13144 <boolean_unary_operator_is_read_properly@@Base+0x238>
   130ac:	ldrd	r0, [r7, #88]	; 0x58
   130b0:	adds	r0, r0, #1
   130b4:	adc	r1, r1, #0
   130b8:	strd	r0, [r7, #88]	; 0x58
   130bc:	sub	sp, fp, #24
   130c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   130c4:	movw	r0, #40107	; 0x9cab
   130c8:	movw	r1, #39998	; 0x9c3e
   130cc:	movw	r3, #40520	; 0x9e48
   130d0:	mov	r2, #235	; 0xeb
   130d4:	movt	r0, #1
   130d8:	movt	r1, #1
   130dc:	movt	r3, #1
   130e0:	bl	12020 <__assert_fail@plt>
   130e4:	movw	r0, #40273	; 0x9d51
   130e8:	movw	r1, #39998	; 0x9c3e
   130ec:	movw	r3, #40520	; 0x9e48
   130f0:	mov	r2, #236	; 0xec
   130f4:	movt	r0, #1
   130f8:	movt	r1, #1
   130fc:	movt	r3, #1
   13100:	bl	12020 <__assert_fail@plt>
   13104:	movw	r0, #40440	; 0x9df8
   13108:	movw	r1, #39998	; 0x9c3e
   1310c:	movw	r3, #40520	; 0x9e48
   13110:	mov	r2, #238	; 0xee
   13114:	movt	r0, #1
   13118:	movt	r1, #1
   1311c:	movt	r3, #1
   13120:	bl	12020 <__assert_fail@plt>
   13124:	movw	r0, #40567	; 0x9e77
   13128:	movw	r1, #39998	; 0x9c3e
   1312c:	movw	r3, #40520	; 0x9e48
   13130:	mov	r2, #239	; 0xef
   13134:	movt	r0, #1
   13138:	movt	r1, #1
   1313c:	movt	r3, #1
   13140:	bl	12020 <__assert_fail@plt>
   13144:	movw	r0, #40587	; 0x9e8b
   13148:	movw	r1, #39998	; 0x9c3e
   1314c:	movw	r3, #40520	; 0x9e48
   13150:	mov	r2, #240	; 0xf0
   13154:	movt	r0, #1
   13158:	movt	r1, #1
   1315c:	movt	r3, #1
   13160:	bl	12020 <__assert_fail@plt>

00013164 <if_statement_only@@Base>:
   13164:	push	{r4, r5, r6, r7, fp, lr}
   13168:	add	fp, sp, #16
   1316c:	sub	sp, sp, #16
   13170:	movw	r7, #50112	; 0xc3c0
   13174:	mov	r4, sp
   13178:	movt	r7, #2
   1317c:	ldrd	r0, [r7]
   13180:	adds	r0, r0, #1
   13184:	adc	r1, r1, #0
   13188:	strd	r0, [r7]
   1318c:	add	r1, sp, #4
   13190:	mov	r0, r4
   13194:	bl	15bc8 <init_grammar@@Base>
   13198:	mov	r0, #3
   1319c:	bl	11f00 <malloc@plt>
   131a0:	mov	r6, r0
   131a4:	movw	r0, #15649	; 0x3d21
   131a8:	strh	r0, [r6]
   131ac:	mov	r0, #0
   131b0:	strb	r0, [r6, #2]
   131b4:	mov	r0, #36	; 0x24
   131b8:	bl	11f00 <malloc@plt>
   131bc:	mov	r5, r0
   131c0:	mov	r0, #4
   131c4:	bl	11f00 <malloc@plt>
   131c8:	str	r0, [r5]
   131cc:	bl	14690 <init_token_opar@@Base>
   131d0:	mov	r0, #8
   131d4:	bl	11f00 <malloc@plt>
   131d8:	mov	r1, #1
   131dc:	str	r0, [r5, #4]
   131e0:	bl	14610 <init_token_int_value@@Base>
   131e4:	mov	r0, #8
   131e8:	bl	11f00 <malloc@plt>
   131ec:	mov	r1, #1
   131f0:	str	r0, [r5, #8]
   131f4:	bl	14610 <init_token_int_value@@Base>
   131f8:	mov	r0, #8
   131fc:	bl	11f00 <malloc@plt>
   13200:	mov	r1, r6
   13204:	str	r0, [r5, #12]
   13208:	bl	14888 <init_token_boolean_op@@Base>
   1320c:	mov	r0, #8
   13210:	bl	11f00 <malloc@plt>
   13214:	mov	r1, #1
   13218:	str	r0, [r5, #16]
   1321c:	bl	14610 <init_token_int_value@@Base>
   13220:	mov	r0, #4
   13224:	bl	11f00 <malloc@plt>
   13228:	str	r0, [r5, #20]
   1322c:	bl	146c8 <init_token_cpar@@Base>
   13230:	mov	r0, #4
   13234:	bl	11f00 <malloc@plt>
   13238:	str	r0, [r5, #24]
   1323c:	bl	14700 <init_token_obra@@Base>
   13240:	mov	r0, #4
   13244:	bl	11f00 <malloc@plt>
   13248:	str	r0, [r5, #28]
   1324c:	bl	14738 <init_token_cbra@@Base>
   13250:	mov	r0, #4
   13254:	bl	11f00 <malloc@plt>
   13258:	str	r0, [r5, #32]
   1325c:	bl	147e0 <init_token_eof@@Base>
   13260:	movw	r6, #53144	; 0xcf98
   13264:	mov	r0, #9
   13268:	movt	r6, #2
   1326c:	str	r0, [r6, #220]	; 0xdc
   13270:	mov	r0, r4
   13274:	str	r5, [r6, #228]	; 0xe4
   13278:	bl	161f0 <read_if_statement@@Base>
   1327c:	ldr	r1, [r6, #204]	; 0xcc
   13280:	mov	r2, #16
   13284:	mov	r3, r7
   13288:	cmp	r1, #9
   1328c:	movweq	r2, #8
   13290:	ldr	r2, [r3, r2]!
   13294:	adds	r2, r2, #1
   13298:	str	r2, [r3]
   1329c:	ldr	r2, [r3, #4]
   132a0:	adc	r2, r2, #0
   132a4:	cmp	r1, #9
   132a8:	str	r2, [r3, #4]
   132ac:	bne	1332c <if_statement_only@@Base+0x1c8>
   132b0:	mov	r1, #32
   132b4:	cmp	r0, #0
   132b8:	mov	r2, r7
   132bc:	movwne	r1, #24
   132c0:	ldr	r1, [r2, r1]!
   132c4:	adds	r1, r1, #1
   132c8:	str	r1, [r2]
   132cc:	ldr	r1, [r2, #4]
   132d0:	adc	r1, r1, #0
   132d4:	cmp	r0, #0
   132d8:	str	r1, [r2, #4]
   132dc:	beq	1334c <if_statement_only@@Base+0x1e8>
   132e0:	ldr	r0, [r0]
   132e4:	mov	r1, #48	; 0x30
   132e8:	mov	r2, r7
   132ec:	cmp	r0, #4
   132f0:	movweq	r1, #40	; 0x28
   132f4:	ldr	r1, [r2, r1]!
   132f8:	adds	r1, r1, #1
   132fc:	str	r1, [r2]
   13300:	ldr	r1, [r2, #4]
   13304:	adc	r1, r1, #0
   13308:	cmp	r0, #4
   1330c:	str	r1, [r2, #4]
   13310:	bne	1336c <if_statement_only@@Base+0x208>
   13314:	ldrd	r0, [r7, #56]	; 0x38
   13318:	adds	r0, r0, #1
   1331c:	adc	r1, r1, #0
   13320:	strd	r0, [r7, #56]	; 0x38
   13324:	sub	sp, fp, #16
   13328:	pop	{r4, r5, r6, r7, fp, pc}
   1332c:	movw	r0, #40608	; 0x9ea0
   13330:	movw	r1, #39998	; 0x9c3e
   13334:	movw	r3, #40634	; 0x9eba
   13338:	movw	r2, #283	; 0x11b
   1333c:	movt	r0, #1
   13340:	movt	r1, #1
   13344:	movt	r3, #1
   13348:	bl	12020 <__assert_fail@plt>
   1334c:	movw	r0, #40659	; 0x9ed3
   13350:	movw	r1, #39998	; 0x9c3e
   13354:	movw	r3, #40634	; 0x9eba
   13358:	mov	r2, #284	; 0x11c
   1335c:	movt	r0, #1
   13360:	movt	r1, #1
   13364:	movt	r3, #1
   13368:	bl	12020 <__assert_fail@plt>
   1336c:	movw	r0, #40671	; 0x9edf
   13370:	movw	r1, #39998	; 0x9c3e
   13374:	movw	r3, #40634	; 0x9eba
   13378:	movw	r2, #285	; 0x11d
   1337c:	movt	r0, #1
   13380:	movt	r1, #1
   13384:	movt	r3, #1
   13388:	bl	12020 <__assert_fail@plt>

0001338c <if_else_statements@@Base>:
   1338c:	push	{r4, r5, r6, r7, fp, lr}
   13390:	add	fp, sp, #16
   13394:	sub	sp, sp, #16
   13398:	movw	r7, #50176	; 0xc400
   1339c:	mov	r4, sp
   133a0:	movt	r7, #2
   133a4:	ldrd	r0, [r7]
   133a8:	adds	r0, r0, #1
   133ac:	adc	r1, r1, #0
   133b0:	strd	r0, [r7]
   133b4:	add	r1, sp, #4
   133b8:	mov	r0, r4
   133bc:	bl	15bc8 <init_grammar@@Base>
   133c0:	mov	r0, #3
   133c4:	bl	11f00 <malloc@plt>
   133c8:	mov	r6, r0
   133cc:	movw	r0, #15649	; 0x3d21
   133d0:	strh	r0, [r6]
   133d4:	mov	r0, #0
   133d8:	strb	r0, [r6, #2]
   133dc:	mov	r0, #44	; 0x2c
   133e0:	bl	11f00 <malloc@plt>
   133e4:	mov	r5, r0
   133e8:	mov	r0, #4
   133ec:	bl	11f00 <malloc@plt>
   133f0:	str	r0, [r5]
   133f4:	bl	14690 <init_token_opar@@Base>
   133f8:	mov	r0, #8
   133fc:	bl	11f00 <malloc@plt>
   13400:	mov	r1, #1
   13404:	str	r0, [r5, #4]
   13408:	bl	14610 <init_token_int_value@@Base>
   1340c:	mov	r0, #8
   13410:	bl	11f00 <malloc@plt>
   13414:	mov	r1, #1
   13418:	str	r0, [r5, #8]
   1341c:	bl	14610 <init_token_int_value@@Base>
   13420:	mov	r0, #8
   13424:	bl	11f00 <malloc@plt>
   13428:	mov	r1, r6
   1342c:	str	r0, [r5, #12]
   13430:	bl	14888 <init_token_boolean_op@@Base>
   13434:	mov	r0, #8
   13438:	bl	11f00 <malloc@plt>
   1343c:	mov	r1, #1
   13440:	str	r0, [r5, #16]
   13444:	bl	14610 <init_token_int_value@@Base>
   13448:	mov	r0, #4
   1344c:	bl	11f00 <malloc@plt>
   13450:	str	r0, [r5, #20]
   13454:	bl	146c8 <init_token_cpar@@Base>
   13458:	mov	r0, #4
   1345c:	bl	11f00 <malloc@plt>
   13460:	str	r0, [r5, #24]
   13464:	bl	14700 <init_token_obra@@Base>
   13468:	mov	r0, #4
   1346c:	bl	11f00 <malloc@plt>
   13470:	str	r0, [r5, #28]
   13474:	bl	14738 <init_token_cbra@@Base>
   13478:	mov	r0, #4
   1347c:	bl	11f00 <malloc@plt>
   13480:	str	r0, [r5, #32]
   13484:	bl	14850 <init_token_else@@Base>
   13488:	mov	r0, #4
   1348c:	bl	11f00 <malloc@plt>
   13490:	str	r0, [r5, #36]	; 0x24
   13494:	bl	14700 <init_token_obra@@Base>
   13498:	mov	r0, #4
   1349c:	bl	11f00 <malloc@plt>
   134a0:	str	r0, [r5, #40]	; 0x28
   134a4:	bl	14738 <init_token_cbra@@Base>
   134a8:	movw	r6, #53144	; 0xcf98
   134ac:	mov	r0, #11
   134b0:	movt	r6, #2
   134b4:	str	r0, [r6, #220]	; 0xdc
   134b8:	mov	r0, r4
   134bc:	str	r5, [r6, #228]	; 0xe4
   134c0:	bl	161f0 <read_if_statement@@Base>
   134c4:	ldr	r1, [r6, #204]	; 0xcc
   134c8:	mov	r2, #16
   134cc:	mov	r3, r7
   134d0:	cmp	r1, #11
   134d4:	movweq	r2, #8
   134d8:	ldr	r2, [r3, r2]!
   134dc:	adds	r2, r2, #1
   134e0:	str	r2, [r3]
   134e4:	ldr	r2, [r3, #4]
   134e8:	adc	r2, r2, #0
   134ec:	cmp	r1, #11
   134f0:	str	r2, [r3, #4]
   134f4:	bne	13574 <if_else_statements@@Base+0x1e8>
   134f8:	mov	r1, #32
   134fc:	cmp	r0, #0
   13500:	mov	r2, r7
   13504:	movwne	r1, #24
   13508:	ldr	r1, [r2, r1]!
   1350c:	adds	r1, r1, #1
   13510:	str	r1, [r2]
   13514:	ldr	r1, [r2, #4]
   13518:	adc	r1, r1, #0
   1351c:	cmp	r0, #0
   13520:	str	r1, [r2, #4]
   13524:	beq	13594 <if_else_statements@@Base+0x208>
   13528:	ldr	r0, [r0]
   1352c:	mov	r1, #48	; 0x30
   13530:	mov	r2, r7
   13534:	cmp	r0, #4
   13538:	movweq	r1, #40	; 0x28
   1353c:	ldr	r1, [r2, r1]!
   13540:	adds	r1, r1, #1
   13544:	str	r1, [r2]
   13548:	ldr	r1, [r2, #4]
   1354c:	adc	r1, r1, #0
   13550:	cmp	r0, #4
   13554:	str	r1, [r2, #4]
   13558:	bne	135b4 <if_else_statements@@Base+0x228>
   1355c:	ldrd	r0, [r7, #56]	; 0x38
   13560:	adds	r0, r0, #1
   13564:	adc	r1, r1, #0
   13568:	strd	r0, [r7, #56]	; 0x38
   1356c:	sub	sp, fp, #16
   13570:	pop	{r4, r5, r6, r7, fp, pc}
   13574:	movw	r0, #40689	; 0x9ef1
   13578:	movw	r1, #39998	; 0x9c3e
   1357c:	movw	r3, #40716	; 0x9f0c
   13580:	mov	r2, #332	; 0x14c
   13584:	movt	r0, #1
   13588:	movt	r1, #1
   1358c:	movt	r3, #1
   13590:	bl	12020 <__assert_fail@plt>
   13594:	movw	r0, #40659	; 0x9ed3
   13598:	movw	r1, #39998	; 0x9c3e
   1359c:	movw	r3, #40716	; 0x9f0c
   135a0:	movw	r2, #333	; 0x14d
   135a4:	movt	r0, #1
   135a8:	movt	r1, #1
   135ac:	movt	r3, #1
   135b0:	bl	12020 <__assert_fail@plt>
   135b4:	movw	r0, #40671	; 0x9edf
   135b8:	movw	r1, #39998	; 0x9c3e
   135bc:	movw	r3, #40716	; 0x9f0c
   135c0:	movw	r2, #334	; 0x14e
   135c4:	movt	r0, #1
   135c8:	movt	r1, #1
   135cc:	movt	r3, #1
   135d0:	bl	12020 <__assert_fail@plt>

000135d4 <body_with_two_returns@@Base>:
   135d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   135d8:	add	fp, sp, #24
   135dc:	sub	sp, sp, #16
   135e0:	movw	r6, #50240	; 0xc440
   135e4:	mov	r9, sp
   135e8:	movt	r6, #2
   135ec:	ldrd	r0, [r6]
   135f0:	adds	r0, r0, #1
   135f4:	adc	r1, r1, #0
   135f8:	strd	r0, [r6]
   135fc:	add	r1, sp, #4
   13600:	mov	r0, r9
   13604:	bl	15bc8 <init_grammar@@Base>
   13608:	mov	r0, #32
   1360c:	mov	r7, #32
   13610:	bl	11f00 <malloc@plt>
   13614:	mov	r5, r0
   13618:	mov	r0, #4
   1361c:	bl	11f00 <malloc@plt>
   13620:	str	r0, [r5]
   13624:	bl	14700 <init_token_obra@@Base>
   13628:	mov	r0, #4
   1362c:	bl	11f00 <malloc@plt>
   13630:	str	r0, [r5, #4]
   13634:	bl	14770 <init_token_return@@Base>
   13638:	mov	r0, #8
   1363c:	mov	r8, #8
   13640:	bl	11f00 <malloc@plt>
   13644:	mov	r1, #1
   13648:	str	r0, [r5, #8]
   1364c:	bl	14610 <init_token_int_value@@Base>
   13650:	mov	r0, #4
   13654:	bl	11f00 <malloc@plt>
   13658:	str	r0, [r5, #12]
   1365c:	bl	147a8 <init_token_semicolon@@Base>
   13660:	mov	r0, #4
   13664:	bl	11f00 <malloc@plt>
   13668:	str	r0, [r5, #16]
   1366c:	bl	14770 <init_token_return@@Base>
   13670:	mov	r0, #8
   13674:	bl	11f00 <malloc@plt>
   13678:	mov	r1, #1
   1367c:	str	r0, [r5, #20]
   13680:	bl	14610 <init_token_int_value@@Base>
   13684:	mov	r0, #4
   13688:	bl	11f00 <malloc@plt>
   1368c:	str	r0, [r5, #24]
   13690:	bl	147a8 <init_token_semicolon@@Base>
   13694:	mov	r0, #4
   13698:	bl	11f00 <malloc@plt>
   1369c:	str	r0, [r5, #28]
   136a0:	bl	14738 <init_token_cbra@@Base>
   136a4:	movw	r4, #53144	; 0xcf98
   136a8:	mov	r0, r9
   136ac:	movt	r4, #2
   136b0:	str	r8, [r4, #220]	; 0xdc
   136b4:	str	r5, [r4, #228]	; 0xe4
   136b8:	bl	15e38 <read_body@@Base>
   136bc:	ldr	r1, [r4, #204]	; 0xcc
   136c0:	mov	r3, r6
   136c4:	cmp	r1, #8
   136c8:	mov	r2, r1
   136cc:	movwne	r2, #16
   136d0:	ldr	r2, [r3, r2]!
   136d4:	adds	r2, r2, #1
   136d8:	str	r2, [r3]
   136dc:	ldr	r2, [r3, #4]
   136e0:	adc	r2, r2, #0
   136e4:	cmp	r1, #8
   136e8:	str	r2, [r3, #4]
   136ec:	bne	137d4 <body_with_two_returns@@Base+0x200>
   136f0:	cmp	r0, #0
   136f4:	mov	r1, r6
   136f8:	movwne	r7, #24
   136fc:	ldr	r2, [r1, r7]!
   13700:	adds	r2, r2, #1
   13704:	str	r2, [r1]
   13708:	ldr	r2, [r1, #4]
   1370c:	adc	r2, r2, #0
   13710:	cmp	r0, #0
   13714:	str	r2, [r1, #4]
   13718:	beq	137f4 <body_with_two_returns@@Base+0x220>
   1371c:	ldr	r1, [r0]
   13720:	mov	r2, #48	; 0x30
   13724:	mov	r3, r6
   13728:	cmp	r1, #3
   1372c:	movweq	r2, #40	; 0x28
   13730:	ldr	r2, [r3, r2]!
   13734:	adds	r2, r2, #1
   13738:	str	r2, [r3]
   1373c:	ldr	r2, [r3, #4]
   13740:	adc	r2, r2, #0
   13744:	cmp	r1, #3
   13748:	str	r2, [r3, #4]
   1374c:	bne	13814 <body_with_two_returns@@Base+0x240>
   13750:	ldr	r0, [r0, #4]
   13754:	mov	r2, #64	; 0x40
   13758:	mov	r3, r6
   1375c:	ldr	r1, [r0]
   13760:	cmp	r1, #3
   13764:	movweq	r2, #56	; 0x38
   13768:	ldr	r2, [r3, r2]!
   1376c:	adds	r2, r2, #1
   13770:	str	r2, [r3]
   13774:	ldr	r2, [r3, #4]
   13778:	adc	r2, r2, #0
   1377c:	cmp	r1, #3
   13780:	str	r2, [r3, #4]
   13784:	bne	13834 <body_with_two_returns@@Base+0x260>
   13788:	ldr	r0, [r0, #4]
   1378c:	mov	r1, #80	; 0x50
   13790:	mov	r2, r6
   13794:	cmp	r0, #0
   13798:	movweq	r1, #72	; 0x48
   1379c:	ldr	r1, [r2, r1]!
   137a0:	adds	r1, r1, #1
   137a4:	str	r1, [r2]
   137a8:	ldr	r1, [r2, #4]
   137ac:	adc	r1, r1, #0
   137b0:	cmp	r0, #0
   137b4:	str	r1, [r2, #4]
   137b8:	bne	13854 <body_with_two_returns@@Base+0x280>
   137bc:	ldrd	r0, [r6, #88]	; 0x58
   137c0:	adds	r0, r0, #1
   137c4:	adc	r1, r1, #0
   137c8:	strd	r0, [r6, #88]	; 0x58
   137cc:	sub	sp, fp, #24
   137d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   137d4:	movw	r0, #40742	; 0x9f26
   137d8:	movw	r1, #39998	; 0x9c3e
   137dc:	movw	r3, #40768	; 0x9f40
   137e0:	movw	r2, #371	; 0x173
   137e4:	movt	r0, #1
   137e8:	movt	r1, #1
   137ec:	movt	r3, #1
   137f0:	bl	12020 <__assert_fail@plt>
   137f4:	movw	r0, #40659	; 0x9ed3
   137f8:	movw	r1, #39998	; 0x9c3e
   137fc:	movw	r3, #40768	; 0x9f40
   13800:	mov	r2, #372	; 0x174
   13804:	movt	r0, #1
   13808:	movt	r1, #1
   1380c:	movt	r3, #1
   13810:	bl	12020 <__assert_fail@plt>
   13814:	movw	r0, #40797	; 0x9f5d
   13818:	movw	r1, #39998	; 0x9c3e
   1381c:	movw	r3, #40768	; 0x9f40
   13820:	movw	r2, #373	; 0x175
   13824:	movt	r0, #1
   13828:	movt	r1, #1
   1382c:	movt	r3, #1
   13830:	bl	12020 <__assert_fail@plt>
   13834:	movw	r0, #40819	; 0x9f73
   13838:	movw	r1, #39998	; 0x9c3e
   1383c:	movw	r3, #40768	; 0x9f40
   13840:	movw	r2, #374	; 0x176
   13844:	movt	r0, #1
   13848:	movt	r1, #1
   1384c:	movt	r3, #1
   13850:	bl	12020 <__assert_fail@plt>
   13854:	movw	r0, #40847	; 0x9f8f
   13858:	movw	r1, #39998	; 0x9c3e
   1385c:	movw	r3, #40768	; 0x9f40
   13860:	movw	r2, #375	; 0x177
   13864:	movt	r0, #1
   13868:	movt	r1, #1
   1386c:	movt	r3, #1
   13870:	bl	12020 <__assert_fail@plt>

00013874 <body_with_one_return@@Base>:
   13874:	push	{r4, r5, r6, r7, fp, lr}
   13878:	add	fp, sp, #16
   1387c:	sub	sp, sp, #16
   13880:	movw	r6, #50336	; 0xc4a0
   13884:	mov	r4, sp
   13888:	movt	r6, #2
   1388c:	ldrd	r0, [r6]
   13890:	adds	r0, r0, #1
   13894:	adc	r1, r1, #0
   13898:	strd	r0, [r6]
   1389c:	add	r1, sp, #4
   138a0:	mov	r0, r4
   138a4:	bl	15bc8 <init_grammar@@Base>
   138a8:	mov	r0, #20
   138ac:	bl	11f00 <malloc@plt>
   138b0:	mov	r5, r0
   138b4:	mov	r0, #4
   138b8:	bl	11f00 <malloc@plt>
   138bc:	str	r0, [r5]
   138c0:	bl	14700 <init_token_obra@@Base>
   138c4:	mov	r0, #4
   138c8:	bl	11f00 <malloc@plt>
   138cc:	str	r0, [r5, #4]
   138d0:	bl	14770 <init_token_return@@Base>
   138d4:	mov	r0, #8
   138d8:	bl	11f00 <malloc@plt>
   138dc:	mov	r1, #1
   138e0:	str	r0, [r5, #8]
   138e4:	bl	14610 <init_token_int_value@@Base>
   138e8:	mov	r0, #4
   138ec:	bl	11f00 <malloc@plt>
   138f0:	str	r0, [r5, #12]
   138f4:	bl	147a8 <init_token_semicolon@@Base>
   138f8:	mov	r0, #4
   138fc:	bl	11f00 <malloc@plt>
   13900:	str	r0, [r5, #16]
   13904:	bl	14738 <init_token_cbra@@Base>
   13908:	movw	r7, #53144	; 0xcf98
   1390c:	mov	r0, #5
   13910:	movt	r7, #2
   13914:	str	r0, [r7, #220]	; 0xdc
   13918:	mov	r0, r4
   1391c:	str	r5, [r7, #228]	; 0xe4
   13920:	bl	15e38 <read_body@@Base>
   13924:	ldr	r1, [r7, #204]	; 0xcc
   13928:	mov	r2, #16
   1392c:	mov	r3, r6
   13930:	cmp	r1, #5
   13934:	movweq	r2, #8
   13938:	ldr	r2, [r3, r2]!
   1393c:	adds	r2, r2, #1
   13940:	str	r2, [r3]
   13944:	ldr	r2, [r3, #4]
   13948:	adc	r2, r2, #0
   1394c:	cmp	r1, #5
   13950:	str	r2, [r3, #4]
   13954:	bne	13a08 <body_with_one_return@@Base+0x194>
   13958:	mov	r1, #32
   1395c:	cmp	r0, #0
   13960:	mov	r2, r6
   13964:	movwne	r1, #24
   13968:	ldr	r1, [r2, r1]!
   1396c:	adds	r1, r1, #1
   13970:	str	r1, [r2]
   13974:	ldr	r1, [r2, #4]
   13978:	adc	r1, r1, #0
   1397c:	cmp	r0, #0
   13980:	str	r1, [r2, #4]
   13984:	beq	13a28 <body_with_one_return@@Base+0x1b4>
   13988:	ldr	r1, [r0]
   1398c:	mov	r2, #48	; 0x30
   13990:	mov	r3, r6
   13994:	cmp	r1, #3
   13998:	movweq	r2, #40	; 0x28
   1399c:	ldr	r2, [r3, r2]!
   139a0:	adds	r2, r2, #1
   139a4:	str	r2, [r3]
   139a8:	ldr	r2, [r3, #4]
   139ac:	adc	r2, r2, #0
   139b0:	cmp	r1, #3
   139b4:	str	r2, [r3, #4]
   139b8:	bne	13a48 <body_with_one_return@@Base+0x1d4>
   139bc:	ldr	r0, [r0, #4]
   139c0:	mov	r1, #64	; 0x40
   139c4:	mov	r2, r6
   139c8:	cmp	r0, #0
   139cc:	movweq	r1, #56	; 0x38
   139d0:	ldr	r1, [r2, r1]!
   139d4:	adds	r1, r1, #1
   139d8:	str	r1, [r2]
   139dc:	ldr	r1, [r2, #4]
   139e0:	adc	r1, r1, #0
   139e4:	cmp	r0, #0
   139e8:	str	r1, [r2, #4]
   139ec:	bne	13a68 <body_with_one_return@@Base+0x1f4>
   139f0:	ldrd	r0, [r6, #72]	; 0x48
   139f4:	adds	r0, r0, #1
   139f8:	adc	r1, r1, #0
   139fc:	strd	r0, [r6, #72]	; 0x48
   13a00:	sub	sp, fp, #16
   13a04:	pop	{r4, r5, r6, r7, fp, pc}
   13a08:	movw	r0, #40173	; 0x9ced
   13a0c:	movw	r1, #39998	; 0x9c3e
   13a10:	movw	r3, #40871	; 0x9fa7
   13a14:	movw	r2, #406	; 0x196
   13a18:	movt	r0, #1
   13a1c:	movt	r1, #1
   13a20:	movt	r3, #1
   13a24:	bl	12020 <__assert_fail@plt>
   13a28:	movw	r0, #40659	; 0x9ed3
   13a2c:	movw	r1, #39998	; 0x9c3e
   13a30:	movw	r3, #40871	; 0x9fa7
   13a34:	movw	r2, #407	; 0x197
   13a38:	movt	r0, #1
   13a3c:	movt	r1, #1
   13a40:	movt	r3, #1
   13a44:	bl	12020 <__assert_fail@plt>
   13a48:	movw	r0, #40797	; 0x9f5d
   13a4c:	movw	r1, #39998	; 0x9c3e
   13a50:	movw	r3, #40871	; 0x9fa7
   13a54:	mov	r2, #408	; 0x198
   13a58:	movt	r0, #1
   13a5c:	movt	r1, #1
   13a60:	movt	r3, #1
   13a64:	bl	12020 <__assert_fail@plt>
   13a68:	movw	r0, #40899	; 0x9fc3
   13a6c:	movw	r1, #39998	; 0x9c3e
   13a70:	movw	r3, #40871	; 0x9fa7
   13a74:	movw	r2, #409	; 0x199
   13a78:	movt	r0, #1
   13a7c:	movt	r1, #1
   13a80:	movt	r3, #1
   13a84:	bl	12020 <__assert_fail@plt>

00013a88 <if_statement_inside_if_statement@@Base>:
   13a88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13a8c:	add	fp, sp, #24
   13a90:	sub	sp, sp, #16
   13a94:	movw	r4, #50416	; 0xc4f0
   13a98:	mov	r8, sp
   13a9c:	movt	r4, #2
   13aa0:	ldrd	r0, [r4]
   13aa4:	adds	r0, r0, #1
   13aa8:	adc	r1, r1, #0
   13aac:	strd	r0, [r4]
   13ab0:	add	r1, sp, #4
   13ab4:	mov	r0, r8
   13ab8:	bl	15bc8 <init_grammar@@Base>
   13abc:	mov	r0, #3
   13ac0:	bl	11f00 <malloc@plt>
   13ac4:	mov	r7, r0
   13ac8:	mov	r0, #3
   13acc:	bl	11f00 <malloc@plt>
   13ad0:	mov	r6, r0
   13ad4:	movw	r0, #15649	; 0x3d21
   13ad8:	mov	r1, #0
   13adc:	strh	r0, [r7]
   13ae0:	strb	r1, [r6, #2]
   13ae4:	strh	r0, [r6]
   13ae8:	mov	r0, #76	; 0x4c
   13aec:	strb	r1, [r7, #2]
   13af0:	bl	11f00 <malloc@plt>
   13af4:	mov	r5, r0
   13af8:	mov	r0, #4
   13afc:	bl	11f00 <malloc@plt>
   13b00:	str	r0, [r5]
   13b04:	bl	14690 <init_token_opar@@Base>
   13b08:	mov	r0, #8
   13b0c:	bl	11f00 <malloc@plt>
   13b10:	mov	r1, #1
   13b14:	str	r0, [r5, #4]
   13b18:	bl	14610 <init_token_int_value@@Base>
   13b1c:	mov	r0, #8
   13b20:	bl	11f00 <malloc@plt>
   13b24:	mov	r1, #1
   13b28:	str	r0, [r5, #8]
   13b2c:	bl	14610 <init_token_int_value@@Base>
   13b30:	mov	r0, #8
   13b34:	bl	11f00 <malloc@plt>
   13b38:	mov	r1, r7
   13b3c:	str	r0, [r5, #12]
   13b40:	bl	14888 <init_token_boolean_op@@Base>
   13b44:	mov	r0, #8
   13b48:	bl	11f00 <malloc@plt>
   13b4c:	mov	r1, #1
   13b50:	str	r0, [r5, #16]
   13b54:	bl	14610 <init_token_int_value@@Base>
   13b58:	mov	r0, #4
   13b5c:	bl	11f00 <malloc@plt>
   13b60:	str	r0, [r5, #20]
   13b64:	bl	146c8 <init_token_cpar@@Base>
   13b68:	mov	r0, #4
   13b6c:	bl	11f00 <malloc@plt>
   13b70:	str	r0, [r5, #24]
   13b74:	bl	14700 <init_token_obra@@Base>
   13b78:	mov	r0, #4
   13b7c:	bl	11f00 <malloc@plt>
   13b80:	str	r0, [r5, #28]
   13b84:	bl	14818 <init_token_if@@Base>
   13b88:	mov	r0, #4
   13b8c:	bl	11f00 <malloc@plt>
   13b90:	str	r0, [r5, #32]
   13b94:	bl	14690 <init_token_opar@@Base>
   13b98:	mov	r0, #8
   13b9c:	bl	11f00 <malloc@plt>
   13ba0:	mov	r1, #1
   13ba4:	str	r0, [r5, #36]	; 0x24
   13ba8:	bl	14610 <init_token_int_value@@Base>
   13bac:	mov	r0, #8
   13bb0:	bl	11f00 <malloc@plt>
   13bb4:	mov	r1, #1
   13bb8:	str	r0, [r5, #40]	; 0x28
   13bbc:	bl	14610 <init_token_int_value@@Base>
   13bc0:	mov	r0, #8
   13bc4:	bl	11f00 <malloc@plt>
   13bc8:	mov	r1, r6
   13bcc:	str	r0, [r5, #44]	; 0x2c
   13bd0:	bl	14888 <init_token_boolean_op@@Base>
   13bd4:	mov	r0, #8
   13bd8:	bl	11f00 <malloc@plt>
   13bdc:	mov	r1, #1
   13be0:	str	r0, [r5, #48]	; 0x30
   13be4:	bl	14610 <init_token_int_value@@Base>
   13be8:	mov	r0, #4
   13bec:	bl	11f00 <malloc@plt>
   13bf0:	str	r0, [r5, #52]	; 0x34
   13bf4:	bl	146c8 <init_token_cpar@@Base>
   13bf8:	mov	r0, #4
   13bfc:	bl	11f00 <malloc@plt>
   13c00:	str	r0, [r5, #56]	; 0x38
   13c04:	bl	14700 <init_token_obra@@Base>
   13c08:	mov	r0, #4
   13c0c:	bl	11f00 <malloc@plt>
   13c10:	str	r0, [r5, #60]	; 0x3c
   13c14:	bl	14738 <init_token_cbra@@Base>
   13c18:	mov	r0, #4
   13c1c:	bl	11f00 <malloc@plt>
   13c20:	str	r0, [r5, #64]	; 0x40
   13c24:	bl	14738 <init_token_cbra@@Base>
   13c28:	mov	r0, #4
   13c2c:	bl	11f00 <malloc@plt>
   13c30:	str	r0, [r5, #68]	; 0x44
   13c34:	bl	14738 <init_token_cbra@@Base>
   13c38:	mov	r0, #4
   13c3c:	bl	11f00 <malloc@plt>
   13c40:	str	r0, [r5, #72]	; 0x48
   13c44:	bl	147e0 <init_token_eof@@Base>
   13c48:	movw	r6, #53144	; 0xcf98
   13c4c:	mov	r0, #19
   13c50:	movt	r6, #2
   13c54:	str	r0, [r6, #220]	; 0xdc
   13c58:	mov	r0, r8
   13c5c:	str	r5, [r6, #228]	; 0xe4
   13c60:	bl	161f0 <read_if_statement@@Base>
   13c64:	ldr	r1, [r6, #204]	; 0xcc
   13c68:	mov	r2, #16
   13c6c:	mov	r3, r4
   13c70:	cmp	r1, #19
   13c74:	movweq	r2, #8
   13c78:	ldr	r2, [r3, r2]!
   13c7c:	adds	r2, r2, #1
   13c80:	str	r2, [r3]
   13c84:	ldr	r2, [r3, #4]
   13c88:	adc	r2, r2, #0
   13c8c:	cmp	r1, #19
   13c90:	str	r2, [r3, #4]
   13c94:	bne	13d14 <if_statement_inside_if_statement@@Base+0x28c>
   13c98:	mov	r1, #32
   13c9c:	cmp	r0, #0
   13ca0:	mov	r2, r4
   13ca4:	movwne	r1, #24
   13ca8:	ldr	r1, [r2, r1]!
   13cac:	adds	r1, r1, #1
   13cb0:	str	r1, [r2]
   13cb4:	ldr	r1, [r2, #4]
   13cb8:	adc	r1, r1, #0
   13cbc:	cmp	r0, #0
   13cc0:	str	r1, [r2, #4]
   13cc4:	beq	13d34 <if_statement_inside_if_statement@@Base+0x2ac>
   13cc8:	ldr	r0, [r0]
   13ccc:	mov	r1, #48	; 0x30
   13cd0:	mov	r2, r4
   13cd4:	cmp	r0, #4
   13cd8:	movweq	r1, #40	; 0x28
   13cdc:	ldr	r1, [r2, r1]!
   13ce0:	adds	r1, r1, #1
   13ce4:	str	r1, [r2]
   13ce8:	ldr	r1, [r2, #4]
   13cec:	adc	r1, r1, #0
   13cf0:	cmp	r0, #4
   13cf4:	str	r1, [r2, #4]
   13cf8:	bne	13d54 <if_statement_inside_if_statement@@Base+0x2cc>
   13cfc:	ldrd	r0, [r4, #56]	; 0x38
   13d00:	adds	r0, r0, #1
   13d04:	adc	r1, r1, #0
   13d08:	strd	r0, [r4, #56]	; 0x38
   13d0c:	sub	sp, fp, #24
   13d10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13d14:	movw	r0, #40917	; 0x9fd5
   13d18:	movw	r1, #39998	; 0x9c3e
   13d1c:	movw	r3, #40944	; 0x9ff0
   13d20:	mov	r2, #480	; 0x1e0
   13d24:	movt	r0, #1
   13d28:	movt	r1, #1
   13d2c:	movt	r3, #1
   13d30:	bl	12020 <__assert_fail@plt>
   13d34:	movw	r0, #40659	; 0x9ed3
   13d38:	movw	r1, #39998	; 0x9c3e
   13d3c:	movw	r3, #40944	; 0x9ff0
   13d40:	movw	r2, #481	; 0x1e1
   13d44:	movt	r0, #1
   13d48:	movt	r1, #1
   13d4c:	movt	r3, #1
   13d50:	bl	12020 <__assert_fail@plt>
   13d54:	movw	r0, #40671	; 0x9edf
   13d58:	movw	r1, #39998	; 0x9c3e
   13d5c:	movw	r3, #40944	; 0x9ff0
   13d60:	movw	r2, #482	; 0x1e2
   13d64:	movt	r0, #1
   13d68:	movt	r1, #1
   13d6c:	movt	r3, #1
   13d70:	bl	12020 <__assert_fail@plt>

00013d74 <if_statement_inside_else_statement@@Base>:
   13d74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d78:	add	fp, sp, #24
   13d7c:	sub	sp, sp, #16
   13d80:	movw	r4, #50480	; 0xc530
   13d84:	mov	r8, sp
   13d88:	movt	r4, #2
   13d8c:	ldrd	r0, [r4]
   13d90:	adds	r0, r0, #1
   13d94:	adc	r1, r1, #0
   13d98:	strd	r0, [r4]
   13d9c:	add	r1, sp, #4
   13da0:	mov	r0, r8
   13da4:	bl	15bc8 <init_grammar@@Base>
   13da8:	mov	r0, #3
   13dac:	bl	11f00 <malloc@plt>
   13db0:	mov	r7, r0
   13db4:	mov	r0, #3
   13db8:	bl	11f00 <malloc@plt>
   13dbc:	mov	r6, r0
   13dc0:	movw	r0, #15649	; 0x3d21
   13dc4:	mov	r1, #0
   13dc8:	strh	r0, [r7]
   13dcc:	strb	r1, [r6, #2]
   13dd0:	strh	r0, [r6]
   13dd4:	mov	r0, #84	; 0x54
   13dd8:	strb	r1, [r7, #2]
   13ddc:	bl	11f00 <malloc@plt>
   13de0:	mov	r5, r0
   13de4:	mov	r0, #4
   13de8:	bl	11f00 <malloc@plt>
   13dec:	str	r0, [r5]
   13df0:	bl	14690 <init_token_opar@@Base>
   13df4:	mov	r0, #8
   13df8:	bl	11f00 <malloc@plt>
   13dfc:	mov	r1, #1
   13e00:	str	r0, [r5, #4]
   13e04:	bl	14610 <init_token_int_value@@Base>
   13e08:	mov	r0, #8
   13e0c:	bl	11f00 <malloc@plt>
   13e10:	mov	r1, #1
   13e14:	str	r0, [r5, #8]
   13e18:	bl	14610 <init_token_int_value@@Base>
   13e1c:	mov	r0, #8
   13e20:	bl	11f00 <malloc@plt>
   13e24:	mov	r1, r7
   13e28:	str	r0, [r5, #12]
   13e2c:	bl	14888 <init_token_boolean_op@@Base>
   13e30:	mov	r0, #8
   13e34:	bl	11f00 <malloc@plt>
   13e38:	mov	r1, #1
   13e3c:	str	r0, [r5, #16]
   13e40:	bl	14610 <init_token_int_value@@Base>
   13e44:	mov	r0, #4
   13e48:	bl	11f00 <malloc@plt>
   13e4c:	str	r0, [r5, #20]
   13e50:	bl	146c8 <init_token_cpar@@Base>
   13e54:	mov	r0, #4
   13e58:	bl	11f00 <malloc@plt>
   13e5c:	str	r0, [r5, #24]
   13e60:	bl	14700 <init_token_obra@@Base>
   13e64:	mov	r0, #4
   13e68:	bl	11f00 <malloc@plt>
   13e6c:	str	r0, [r5, #28]
   13e70:	bl	14738 <init_token_cbra@@Base>
   13e74:	mov	r0, #4
   13e78:	bl	11f00 <malloc@plt>
   13e7c:	str	r0, [r5, #32]
   13e80:	bl	14850 <init_token_else@@Base>
   13e84:	mov	r0, #4
   13e88:	bl	11f00 <malloc@plt>
   13e8c:	str	r0, [r5, #36]	; 0x24
   13e90:	bl	14700 <init_token_obra@@Base>
   13e94:	mov	r0, #4
   13e98:	bl	11f00 <malloc@plt>
   13e9c:	str	r0, [r5, #40]	; 0x28
   13ea0:	bl	14818 <init_token_if@@Base>
   13ea4:	mov	r0, #4
   13ea8:	bl	11f00 <malloc@plt>
   13eac:	str	r0, [r5, #44]	; 0x2c
   13eb0:	bl	14690 <init_token_opar@@Base>
   13eb4:	mov	r0, #8
   13eb8:	bl	11f00 <malloc@plt>
   13ebc:	mov	r1, #1
   13ec0:	str	r0, [r5, #48]	; 0x30
   13ec4:	bl	14610 <init_token_int_value@@Base>
   13ec8:	mov	r0, #8
   13ecc:	bl	11f00 <malloc@plt>
   13ed0:	mov	r1, #1
   13ed4:	str	r0, [r5, #52]	; 0x34
   13ed8:	bl	14610 <init_token_int_value@@Base>
   13edc:	mov	r0, #8
   13ee0:	bl	11f00 <malloc@plt>
   13ee4:	mov	r1, r6
   13ee8:	str	r0, [r5, #56]	; 0x38
   13eec:	bl	14888 <init_token_boolean_op@@Base>
   13ef0:	mov	r0, #8
   13ef4:	bl	11f00 <malloc@plt>
   13ef8:	mov	r1, #1
   13efc:	str	r0, [r5, #60]	; 0x3c
   13f00:	bl	14610 <init_token_int_value@@Base>
   13f04:	mov	r0, #4
   13f08:	bl	11f00 <malloc@plt>
   13f0c:	str	r0, [r5, #64]	; 0x40
   13f10:	bl	146c8 <init_token_cpar@@Base>
   13f14:	mov	r0, #4
   13f18:	bl	11f00 <malloc@plt>
   13f1c:	str	r0, [r5, #68]	; 0x44
   13f20:	bl	14700 <init_token_obra@@Base>
   13f24:	mov	r0, #4
   13f28:	bl	11f00 <malloc@plt>
   13f2c:	str	r0, [r5, #72]	; 0x48
   13f30:	bl	14738 <init_token_cbra@@Base>
   13f34:	mov	r0, #4
   13f38:	bl	11f00 <malloc@plt>
   13f3c:	str	r0, [r5, #76]	; 0x4c
   13f40:	bl	14738 <init_token_cbra@@Base>
   13f44:	mov	r0, #4
   13f48:	bl	11f00 <malloc@plt>
   13f4c:	str	r0, [r5, #80]	; 0x50
   13f50:	bl	14738 <init_token_cbra@@Base>
   13f54:	movw	r6, #53144	; 0xcf98
   13f58:	mov	r0, #21
   13f5c:	movt	r6, #2
   13f60:	str	r0, [r6, #220]	; 0xdc
   13f64:	mov	r0, r8
   13f68:	str	r5, [r6, #228]	; 0xe4
   13f6c:	bl	161f0 <read_if_statement@@Base>
   13f70:	ldr	r1, [r6, #204]	; 0xcc
   13f74:	mov	r2, #16
   13f78:	mov	r3, r4
   13f7c:	cmp	r1, #21
   13f80:	movweq	r2, #8
   13f84:	ldr	r2, [r3, r2]!
   13f88:	adds	r2, r2, #1
   13f8c:	str	r2, [r3]
   13f90:	ldr	r2, [r3, #4]
   13f94:	adc	r2, r2, #0
   13f98:	cmp	r1, #21
   13f9c:	str	r2, [r3, #4]
   13fa0:	bne	14020 <if_statement_inside_else_statement@@Base+0x2ac>
   13fa4:	mov	r1, #32
   13fa8:	cmp	r0, #0
   13fac:	mov	r2, r4
   13fb0:	movwne	r1, #24
   13fb4:	ldr	r1, [r2, r1]!
   13fb8:	adds	r1, r1, #1
   13fbc:	str	r1, [r2]
   13fc0:	ldr	r1, [r2, #4]
   13fc4:	adc	r1, r1, #0
   13fc8:	cmp	r0, #0
   13fcc:	str	r1, [r2, #4]
   13fd0:	beq	14040 <if_statement_inside_else_statement@@Base+0x2cc>
   13fd4:	ldr	r0, [r0]
   13fd8:	mov	r1, #48	; 0x30
   13fdc:	mov	r2, r4
   13fe0:	cmp	r0, #4
   13fe4:	movweq	r1, #40	; 0x28
   13fe8:	ldr	r1, [r2, r1]!
   13fec:	adds	r1, r1, #1
   13ff0:	str	r1, [r2]
   13ff4:	ldr	r1, [r2, #4]
   13ff8:	adc	r1, r1, #0
   13ffc:	cmp	r0, #4
   14000:	str	r1, [r2, #4]
   14004:	bne	14060 <if_statement_inside_else_statement@@Base+0x2ec>
   14008:	ldrd	r0, [r4, #56]	; 0x38
   1400c:	adds	r0, r0, #1
   14010:	adc	r1, r1, #0
   14014:	strd	r0, [r4, #56]	; 0x38
   14018:	sub	sp, fp, #24
   1401c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14020:	movw	r0, #40984	; 0xa018
   14024:	movw	r1, #39998	; 0x9c3e
   14028:	movw	r3, #41011	; 0xa033
   1402c:	movw	r2, #558	; 0x22e
   14030:	movt	r0, #1
   14034:	movt	r1, #1
   14038:	movt	r3, #1
   1403c:	bl	12020 <__assert_fail@plt>
   14040:	movw	r0, #40659	; 0x9ed3
   14044:	movw	r1, #39998	; 0x9c3e
   14048:	movw	r3, #41011	; 0xa033
   1404c:	movw	r2, #559	; 0x22f
   14050:	movt	r0, #1
   14054:	movt	r1, #1
   14058:	movt	r3, #1
   1405c:	bl	12020 <__assert_fail@plt>
   14060:	movw	r0, #40671	; 0x9edf
   14064:	movw	r1, #39998	; 0x9c3e
   14068:	movw	r3, #41011	; 0xa033
   1406c:	mov	r2, #560	; 0x230
   14070:	movt	r0, #1
   14074:	movt	r1, #1
   14078:	movt	r3, #1
   1407c:	bl	12020 <__assert_fail@plt>

00014080 <main@@Base>:
   14080:	push	{r4, r5, r6, r7, fp, lr}
   14084:	add	fp, sp, #16
   14088:	movw	r0, #50544	; 0xc570
   1408c:	add	r1, pc, #620	; 0x26c
   14090:	movw	r5, #49396	; 0xc0f4
   14094:	movt	r0, #2
   14098:	vld1.64	{d16-d17}, [r1]
   1409c:	movt	r5, #2
   140a0:	mov	r1, #0
   140a4:	vld1.64	{d18-d19}, [r0 :128]
   140a8:	vadd.i64	q8, q9, q8
   140ac:	vst1.64	{d16-d17}, [r0 :128]
   140b0:	ldr	r0, [r5]
   140b4:	bl	11e4c <setbuf@plt>
   140b8:	ldr	r3, [r5]
   140bc:	movw	r4, #41205	; 0xa0f5
   140c0:	mov	r1, #14
   140c4:	mov	r2, #1
   140c8:	movt	r4, #1
   140cc:	mov	r0, r4
   140d0:	bl	11ed0 <fwrite@plt>
   140d4:	ldr	r3, [r5]
   140d8:	movw	r0, #41053	; 0xa05d
   140dc:	mov	r1, #14
   140e0:	mov	r2, #1
   140e4:	movt	r0, #1
   140e8:	bl	11ed0 <fwrite@plt>
   140ec:	ldr	r3, [r5]
   140f0:	movw	r0, #41068	; 0xa06c
   140f4:	mov	r1, #15
   140f8:	mov	r2, #1
   140fc:	movt	r0, #1
   14100:	bl	11ed0 <fwrite@plt>
   14104:	mov	r0, #0
   14108:	bl	11e70 <fflush@plt>
   1410c:	movw	r5, #41084	; 0xa07c
   14110:	movw	r6, #41102	; 0xa08e
   14114:	movw	r2, #41344	; 0xa180
   14118:	movt	r5, #1
   1411c:	movt	r6, #1
   14120:	movt	r2, #1
   14124:	mov	r0, r5
   14128:	mov	r1, r6
   1412c:	bl	11e64 <printf@plt>
   14130:	bl	12580 <setup@@Base>
   14134:	bl	12628 <no_int_as_first_stuff@@Base>
   14138:	movw	r7, #41172	; 0xa0d4
   1413c:	movt	r7, #1
   14140:	mov	r0, r7
   14144:	bl	11ef4 <puts@plt>
   14148:	movw	r2, #41376	; 0xa1a0
   1414c:	mov	r0, r5
   14150:	mov	r1, r6
   14154:	movt	r2, #1
   14158:	bl	11e64 <printf@plt>
   1415c:	bl	12580 <setup@@Base>
   14160:	bl	1273c <int_but_not_followed_by_function@@Base>
   14164:	mov	r0, r7
   14168:	bl	11ef4 <puts@plt>
   1416c:	movw	r2, #41552	; 0xa250
   14170:	mov	r0, r5
   14174:	mov	r1, r6
   14178:	movt	r2, #1
   1417c:	bl	11e64 <printf@plt>
   14180:	bl	12580 <setup@@Base>
   14184:	bl	12f0c <boolean_unary_operator_is_read_properly@@Base>
   14188:	mov	r0, r7
   1418c:	bl	11ef4 <puts@plt>
   14190:	movw	r2, #41504	; 0xa220
   14194:	mov	r0, r5
   14198:	mov	r1, r6
   1419c:	movt	r2, #1
   141a0:	bl	11e64 <printf@plt>
   141a4:	bl	12580 <setup@@Base>
   141a8:	bl	12c94 <boolean_binary_operator_is_read_properly@@Base>
   141ac:	mov	r0, r7
   141b0:	bl	11ef4 <puts@plt>
   141b4:	movw	r2, #41424	; 0xa1d0
   141b8:	mov	r0, r5
   141bc:	mov	r1, r6
   141c0:	movt	r2, #1
   141c4:	bl	11e64 <printf@plt>
   141c8:	bl	12580 <setup@@Base>
   141cc:	bl	12874 <boolean_expression_is_read_properly@@Base>
   141d0:	mov	r0, r7
   141d4:	bl	11ef4 <puts@plt>
   141d8:	movw	r2, #41472	; 0xa200
   141dc:	mov	r0, r5
   141e0:	mov	r1, r6
   141e4:	movt	r2, #1
   141e8:	bl	11e64 <printf@plt>
   141ec:	bl	12580 <setup@@Base>
   141f0:	bl	12a68 <boolean_expression_complex@@Base>
   141f4:	mov	r0, r7
   141f8:	bl	11ef4 <puts@plt>
   141fc:	movw	r2, #41600	; 0xa280
   14200:	mov	r0, r5
   14204:	mov	r1, r6
   14208:	movt	r2, #1
   1420c:	bl	11e64 <printf@plt>
   14210:	bl	12580 <setup@@Base>
   14214:	bl	13164 <if_statement_only@@Base>
   14218:	mov	r0, r7
   1421c:	bl	11ef4 <puts@plt>
   14220:	movw	r2, #41632	; 0xa2a0
   14224:	mov	r0, r5
   14228:	mov	r1, r6
   1422c:	movt	r2, #1
   14230:	bl	11e64 <printf@plt>
   14234:	bl	12580 <setup@@Base>
   14238:	bl	1338c <if_else_statements@@Base>
   1423c:	mov	r0, r7
   14240:	bl	11ef4 <puts@plt>
   14244:	movw	r2, #41728	; 0xa300
   14248:	mov	r0, r5
   1424c:	mov	r1, r6
   14250:	movt	r2, #1
   14254:	bl	11e64 <printf@plt>
   14258:	bl	12580 <setup@@Base>
   1425c:	bl	13a88 <if_statement_inside_if_statement@@Base>
   14260:	mov	r0, r7
   14264:	bl	11ef4 <puts@plt>
   14268:	movw	r2, #41776	; 0xa330
   1426c:	mov	r0, r5
   14270:	mov	r1, r6
   14274:	movt	r2, #1
   14278:	bl	11e64 <printf@plt>
   1427c:	bl	12580 <setup@@Base>
   14280:	bl	13d74 <if_statement_inside_else_statement@@Base>
   14284:	mov	r0, r7
   14288:	bl	11ef4 <puts@plt>
   1428c:	movw	r2, #41696	; 0xa2e0
   14290:	mov	r0, r5
   14294:	mov	r1, r6
   14298:	movt	r2, #1
   1429c:	bl	11e64 <printf@plt>
   142a0:	bl	12580 <setup@@Base>
   142a4:	bl	13874 <body_with_one_return@@Base>
   142a8:	mov	r0, r7
   142ac:	bl	11ef4 <puts@plt>
   142b0:	movw	r2, #41664	; 0xa2c0
   142b4:	mov	r0, r5
   142b8:	mov	r1, r6
   142bc:	movt	r2, #1
   142c0:	bl	11e64 <printf@plt>
   142c4:	bl	12580 <setup@@Base>
   142c8:	bl	135d4 <body_with_two_returns@@Base>
   142cc:	mov	r0, r7
   142d0:	bl	11ef4 <puts@plt>
   142d4:	movw	r0, #41181	; 0xa0dd
   142d8:	movt	r0, #1
   142dc:	bl	11ef4 <puts@plt>
   142e0:	movw	r0, #41196	; 0xa0ec
   142e4:	movt	r0, #1
   142e8:	bl	11ef4 <puts@plt>
   142ec:	mov	r0, r4
   142f0:	bl	11ef4 <puts@plt>
   142f4:	mov	r0, #0
   142f8:	pop	{r4, r5, r6, r7, fp, pc}
   142fc:	nop	{0}
   14300:	andeq	r0, r0, r1
   14304:	andeq	r0, r0, r0
   14308:	andeq	r0, r0, r1
   1430c:	andeq	r0, r0, r0
   14310:	push	{r4, r5, r6, lr}
   14314:	sub	sp, sp, #8
   14318:	movw	r0, #41232	; 0xa110
   1431c:	movw	r1, #41114	; 0xa09a
   14320:	movw	r2, #18131	; 0x46d3
   14324:	movt	r0, #1
   14328:	movt	r1, #1
   1432c:	movt	r2, #24865	; 0x6121
   14330:	bl	16c94 <read_boolean_unary_expression@@Base+0x3dc>
   14334:	movw	r0, #42192	; 0xa4d0
   14338:	movw	r6, #41824	; 0xa360
   1433c:	mov	r5, #0
   14340:	movt	r0, #1
   14344:	movt	r6, #1
   14348:	add	r4, r0, #4
   1434c:	mov	r3, r6
   14350:	ldr	r0, [r3, r5]!
   14354:	ldr	r1, [r3, #16]
   14358:	str	r1, [sp]
   1435c:	ldmib	r3, {r1, r2}
   14360:	ldrb	r3, [r3, #12]
   14364:	bl	173f8 <read_boolean_unary_expression@@Base+0xb40>
   14368:	ldrd	r0, [r4, #-4]
   1436c:	bl	17cac <read_boolean_unary_expression@@Base+0x13f4>
   14370:	add	r5, r5, #20
   14374:	add	r4, r4, #8
   14378:	cmp	r5, #360	; 0x168
   1437c:	bne	1434c <main@@Base+0x2cc>
   14380:	bl	18428 <read_boolean_unary_expression@@Base+0x1b70>
   14384:	add	sp, sp, #8
   14388:	pop	{r4, r5, r6, lr}
   1438c:	b	19194 <read_boolean_unary_expression@@Base+0x28dc>
   14390:	push	{fp, lr}
   14394:	bl	14310 <main@@Base+0x290>
   14398:	movw	r0, #49408	; 0xc100
   1439c:	mov	r1, #0
   143a0:	mov	r2, #152	; 0x98
   143a4:	movt	r0, #2
   143a8:	bl	11f90 <memset@plt>
   143ac:	movw	r0, #49760	; 0xc260
   143b0:	vmov.i32	q8, #0	; 0x00000000
   143b4:	mov	ip, #80	; 0x50
   143b8:	movt	r0, #2
   143bc:	add	r1, r0, #16
   143c0:	vst1.64	{d16-d17}, [r1 :128]
   143c4:	movw	r1, #49712	; 0xc230
   143c8:	movt	r1, #2
   143cc:	add	r2, r1, #16
   143d0:	vst1.64	{d16-d17}, [r2 :128]
   143d4:	movw	r2, #49584	; 0xc1b0
   143d8:	movt	r2, #2
   143dc:	add	r3, r2, #64	; 0x40
   143e0:	vst1.64	{d16-d17}, [r3 :128]
   143e4:	add	r3, r2, #48	; 0x30
   143e8:	vst1.64	{d16-d17}, [r3 :128]
   143ec:	add	r3, r2, #32
   143f0:	vst1.64	{d16-d17}, [r3 :128]
   143f4:	add	r3, r2, #16
   143f8:	vst1.64	{d16-d17}, [r2 :128], ip
   143fc:	vst1.64	{d16-d17}, [r3 :128]
   14400:	movw	r3, #49568	; 0xc1a0
   14404:	vst1.64	{d16-d17}, [r2 :128]
   14408:	movw	r2, #49808	; 0xc290
   1440c:	movt	r3, #2
   14410:	movt	r2, #2
   14414:	vst1.64	{d16-d17}, [r3 :128]
   14418:	movw	r3, #49680	; 0xc210
   1441c:	movt	r3, #2
   14420:	vst1.64	{d16-d17}, [r3 :128]
   14424:	movw	r3, #49696	; 0xc220
   14428:	movt	r3, #2
   1442c:	vst1.64	{d16-d17}, [r3 :128]
   14430:	mov	r3, #32
   14434:	vst1.64	{d16-d17}, [r0 :128], r3
   14438:	vst1.64	{d16-d17}, [r1 :128], r3
   1443c:	vst1.64	{d16-d17}, [r0 :128]
   14440:	add	r0, r2, #32
   14444:	vst1.64	{d16-d17}, [r1 :128]
   14448:	vst1.64	{d16-d17}, [r0 :128]
   1444c:	add	r0, r2, #16
   14450:	vst1.64	{d16-d17}, [r0 :128]
   14454:	mov	r0, #48	; 0x30
   14458:	vst1.64	{d16-d17}, [r2 :128], r0
   1445c:	vst1.64	{d16-d17}, [r2 :128]
   14460:	movw	r2, #49872	; 0xc2d0
   14464:	movt	r2, #2
   14468:	add	r1, r2, #16
   1446c:	vst1.64	{d16-d17}, [r2 :128], r3
   14470:	vst1.64	{d16-d17}, [r1 :128]
   14474:	movw	r1, #49920	; 0xc300
   14478:	vst1.64	{d16-d17}, [r2 :128]
   1447c:	movt	r1, #2
   14480:	add	r2, r1, #64	; 0x40
   14484:	vst1.64	{d16-d17}, [r2 :128]
   14488:	add	r2, r1, #48	; 0x30
   1448c:	vst1.64	{d16-d17}, [r2 :128]
   14490:	add	r2, r1, #32
   14494:	vst1.64	{d16-d17}, [r2 :128]
   14498:	add	r2, r1, #16
   1449c:	vst1.64	{d16-d17}, [r1 :128], ip
   144a0:	vst1.64	{d16-d17}, [r1 :128]
   144a4:	movw	r1, #50016	; 0xc360
   144a8:	vst1.64	{d16-d17}, [r2 :128]
   144ac:	movt	r1, #2
   144b0:	add	r2, r1, #64	; 0x40
   144b4:	vst1.64	{d16-d17}, [r2 :128]
   144b8:	add	r2, r1, #48	; 0x30
   144bc:	vst1.64	{d16-d17}, [r2 :128]
   144c0:	add	r2, r1, #32
   144c4:	vst1.64	{d16-d17}, [r2 :128]
   144c8:	add	r2, r1, #16
   144cc:	vst1.64	{d16-d17}, [r1 :128], ip
   144d0:	vst1.64	{d16-d17}, [r1 :128]
   144d4:	movw	r1, #50112	; 0xc3c0
   144d8:	vst1.64	{d16-d17}, [r2 :128]
   144dc:	movt	r1, #2
   144e0:	add	r2, r1, #32
   144e4:	vst1.64	{d16-d17}, [r2 :128]
   144e8:	add	r2, r1, #16
   144ec:	vst1.64	{d16-d17}, [r1 :128], r0
   144f0:	vst1.64	{d16-d17}, [r1 :128]
   144f4:	movw	r1, #50176	; 0xc400
   144f8:	vst1.64	{d16-d17}, [r2 :128]
   144fc:	movt	r1, #2
   14500:	add	r2, r1, #32
   14504:	vst1.64	{d16-d17}, [r2 :128]
   14508:	add	r2, r1, #16
   1450c:	vst1.64	{d16-d17}, [r1 :128], r0
   14510:	vst1.64	{d16-d17}, [r1 :128]
   14514:	movw	r1, #50240	; 0xc440
   14518:	vst1.64	{d16-d17}, [r2 :128]
   1451c:	movt	r1, #2
   14520:	add	r2, r1, #64	; 0x40
   14524:	vst1.64	{d16-d17}, [r2 :128]
   14528:	add	r2, r1, #48	; 0x30
   1452c:	vst1.64	{d16-d17}, [r2 :128]
   14530:	add	r2, r1, #32
   14534:	vst1.64	{d16-d17}, [r2 :128]
   14538:	add	r2, r1, #16
   1453c:	vst1.64	{d16-d17}, [r1 :128], ip
   14540:	vst1.64	{d16-d17}, [r1 :128]
   14544:	movw	r1, #50336	; 0xc4a0
   14548:	vst1.64	{d16-d17}, [r2 :128]
   1454c:	movt	r1, #2
   14550:	add	r2, r1, #48	; 0x30
   14554:	vst1.64	{d16-d17}, [r2 :128]
   14558:	add	r2, r1, #32
   1455c:	vst1.64	{d16-d17}, [r2 :128]
   14560:	add	r2, r1, #16
   14564:	vst1.64	{d16-d17}, [r2 :128]
   14568:	mov	r2, #64	; 0x40
   1456c:	vst1.64	{d16-d17}, [r1 :128], r2
   14570:	vst1.64	{d16-d17}, [r1 :128]
   14574:	movw	r1, #50416	; 0xc4f0
   14578:	movt	r1, #2
   1457c:	add	r2, r1, #32
   14580:	vst1.64	{d16-d17}, [r2 :128]
   14584:	add	r2, r1, #16
   14588:	vst1.64	{d16-d17}, [r1 :128], r0
   1458c:	vst1.64	{d16-d17}, [r1 :128]
   14590:	movw	r1, #50480	; 0xc530
   14594:	vst1.64	{d16-d17}, [r2 :128]
   14598:	movt	r1, #2
   1459c:	add	r2, r1, #32
   145a0:	vst1.64	{d16-d17}, [r2 :128]
   145a4:	add	r2, r1, #16
   145a8:	vst1.64	{d16-d17}, [r1 :128], r0
   145ac:	movw	r0, #50544	; 0xc570
   145b0:	movt	r0, #2
   145b4:	vst1.64	{d16-d17}, [r2 :128]
   145b8:	vst1.64	{d16-d17}, [r1 :128]
   145bc:	vst1.64	{d16-d17}, [r0 :128]
   145c0:	pop	{fp, pc}
   145c4:	movw	r0, #17168	; 0x4310
   145c8:	movw	r1, #17296	; 0x4390
   145cc:	movt	r0, #1
   145d0:	movt	r1, #1
   145d4:	b	19644 <__gcov_flush@@Base+0xb4>

000145d8 <init_token_int_type@@Base>:
   145d8:	movw	r1, #50560	; 0xc580
   145dc:	add	r2, pc, #28
   145e0:	movt	r1, #2
   145e4:	vld1.64	{d16-d17}, [r2]
   145e8:	vld1.64	{d18-d19}, [r1 :128]
   145ec:	vadd.i64	q8, q9, q8
   145f0:	vst1.64	{d16-d17}, [r1 :128]
   145f4:	mov	r1, #0
   145f8:	str	r1, [r0]
   145fc:	bx	lr
   14600:	andeq	r0, r0, r1
   14604:	andeq	r0, r0, r0
   14608:	andeq	r0, r0, r1
   1460c:	andeq	r0, r0, r0

00014610 <init_token_int_value@@Base>:
   14610:	movw	r2, #50576	; 0xc590
   14614:	add	r3, pc, #36	; 0x24
   14618:	movt	r2, #2
   1461c:	vld1.64	{d16-d17}, [r3]
   14620:	vld1.64	{d18-d19}, [r2 :128]
   14624:	vadd.i64	q8, q9, q8
   14628:	vst1.64	{d16-d17}, [r2 :128]
   1462c:	mov	r2, #1
   14630:	str	r2, [r0]
   14634:	str	r1, [r0, #4]
   14638:	bx	lr
   1463c:	nop	{0}
   14640:	andeq	r0, r0, r1
   14644:	andeq	r0, r0, r0
   14648:	andeq	r0, r0, r1
   1464c:	andeq	r0, r0, r0

00014650 <init_token_function@@Base>:
   14650:	movw	r2, #50592	; 0xc5a0
   14654:	add	r3, pc, #36	; 0x24
   14658:	movt	r2, #2
   1465c:	vld1.64	{d16-d17}, [r3]
   14660:	vld1.64	{d18-d19}, [r2 :128]
   14664:	vadd.i64	q8, q9, q8
   14668:	vst1.64	{d16-d17}, [r2 :128]
   1466c:	mov	r2, #2
   14670:	str	r2, [r0]
   14674:	str	r1, [r0, #4]
   14678:	bx	lr
   1467c:	nop	{0}
   14680:	andeq	r0, r0, r1
   14684:	andeq	r0, r0, r0
   14688:	andeq	r0, r0, r1
   1468c:	andeq	r0, r0, r0

00014690 <init_token_opar@@Base>:
   14690:	movw	r1, #50608	; 0xc5b0
   14694:	add	r2, pc, #28
   14698:	movt	r1, #2
   1469c:	vld1.64	{d16-d17}, [r2]
   146a0:	vld1.64	{d18-d19}, [r1 :128]
   146a4:	vadd.i64	q8, q9, q8
   146a8:	vst1.64	{d16-d17}, [r1 :128]
   146ac:	mov	r1, #3
   146b0:	str	r1, [r0]
   146b4:	bx	lr
   146b8:	andeq	r0, r0, r1
   146bc:	andeq	r0, r0, r0
   146c0:	andeq	r0, r0, r1
   146c4:	andeq	r0, r0, r0

000146c8 <init_token_cpar@@Base>:
   146c8:	movw	r1, #50624	; 0xc5c0
   146cc:	add	r2, pc, #28
   146d0:	movt	r1, #2
   146d4:	vld1.64	{d16-d17}, [r2]
   146d8:	vld1.64	{d18-d19}, [r1 :128]
   146dc:	vadd.i64	q8, q9, q8
   146e0:	vst1.64	{d16-d17}, [r1 :128]
   146e4:	mov	r1, #4
   146e8:	str	r1, [r0]
   146ec:	bx	lr
   146f0:	andeq	r0, r0, r1
   146f4:	andeq	r0, r0, r0
   146f8:	andeq	r0, r0, r1
   146fc:	andeq	r0, r0, r0

00014700 <init_token_obra@@Base>:
   14700:	movw	r1, #50640	; 0xc5d0
   14704:	add	r2, pc, #28
   14708:	movt	r1, #2
   1470c:	vld1.64	{d16-d17}, [r2]
   14710:	vld1.64	{d18-d19}, [r1 :128]
   14714:	vadd.i64	q8, q9, q8
   14718:	vst1.64	{d16-d17}, [r1 :128]
   1471c:	mov	r1, #5
   14720:	str	r1, [r0]
   14724:	bx	lr
   14728:	andeq	r0, r0, r1
   1472c:	andeq	r0, r0, r0
   14730:	andeq	r0, r0, r1
   14734:	andeq	r0, r0, r0

00014738 <init_token_cbra@@Base>:
   14738:	movw	r1, #50656	; 0xc5e0
   1473c:	add	r2, pc, #28
   14740:	movt	r1, #2
   14744:	vld1.64	{d16-d17}, [r2]
   14748:	vld1.64	{d18-d19}, [r1 :128]
   1474c:	vadd.i64	q8, q9, q8
   14750:	vst1.64	{d16-d17}, [r1 :128]
   14754:	mov	r1, #6
   14758:	str	r1, [r0]
   1475c:	bx	lr
   14760:	andeq	r0, r0, r1
   14764:	andeq	r0, r0, r0
   14768:	andeq	r0, r0, r1
   1476c:	andeq	r0, r0, r0

00014770 <init_token_return@@Base>:
   14770:	movw	r1, #50672	; 0xc5f0
   14774:	add	r2, pc, #28
   14778:	movt	r1, #2
   1477c:	vld1.64	{d16-d17}, [r2]
   14780:	vld1.64	{d18-d19}, [r1 :128]
   14784:	vadd.i64	q8, q9, q8
   14788:	vst1.64	{d16-d17}, [r1 :128]
   1478c:	mov	r1, #7
   14790:	str	r1, [r0]
   14794:	bx	lr
   14798:	andeq	r0, r0, r1
   1479c:	andeq	r0, r0, r0
   147a0:	andeq	r0, r0, r1
   147a4:	andeq	r0, r0, r0

000147a8 <init_token_semicolon@@Base>:
   147a8:	movw	r1, #50688	; 0xc600
   147ac:	add	r2, pc, #28
   147b0:	movt	r1, #2
   147b4:	vld1.64	{d16-d17}, [r2]
   147b8:	vld1.64	{d18-d19}, [r1 :128]
   147bc:	vadd.i64	q8, q9, q8
   147c0:	vst1.64	{d16-d17}, [r1 :128]
   147c4:	mov	r1, #8
   147c8:	str	r1, [r0]
   147cc:	bx	lr
   147d0:	andeq	r0, r0, r1
   147d4:	andeq	r0, r0, r0
   147d8:	andeq	r0, r0, r1
   147dc:	andeq	r0, r0, r0

000147e0 <init_token_eof@@Base>:
   147e0:	movw	r1, #50704	; 0xc610
   147e4:	add	r2, pc, #28
   147e8:	movt	r1, #2
   147ec:	vld1.64	{d16-d17}, [r2]
   147f0:	vld1.64	{d18-d19}, [r1 :128]
   147f4:	vadd.i64	q8, q9, q8
   147f8:	vst1.64	{d16-d17}, [r1 :128]
   147fc:	mov	r1, #9
   14800:	str	r1, [r0]
   14804:	bx	lr
   14808:	andeq	r0, r0, r1
   1480c:	andeq	r0, r0, r0
   14810:	andeq	r0, r0, r1
   14814:	andeq	r0, r0, r0

00014818 <init_token_if@@Base>:
   14818:	movw	r1, #50720	; 0xc620
   1481c:	add	r2, pc, #28
   14820:	movt	r1, #2
   14824:	vld1.64	{d16-d17}, [r2]
   14828:	vld1.64	{d18-d19}, [r1 :128]
   1482c:	vadd.i64	q8, q9, q8
   14830:	vst1.64	{d16-d17}, [r1 :128]
   14834:	mov	r1, #10
   14838:	str	r1, [r0]
   1483c:	bx	lr
   14840:	andeq	r0, r0, r1
   14844:	andeq	r0, r0, r0
   14848:	andeq	r0, r0, r1
   1484c:	andeq	r0, r0, r0

00014850 <init_token_else@@Base>:
   14850:	movw	r1, #50736	; 0xc630
   14854:	add	r2, pc, #28
   14858:	movt	r1, #2
   1485c:	vld1.64	{d16-d17}, [r2]
   14860:	vld1.64	{d18-d19}, [r1 :128]
   14864:	vadd.i64	q8, q9, q8
   14868:	vst1.64	{d16-d17}, [r1 :128]
   1486c:	mov	r1, #11
   14870:	str	r1, [r0]
   14874:	bx	lr
   14878:	andeq	r0, r0, r1
   1487c:	andeq	r0, r0, r0
   14880:	andeq	r0, r0, r1
   14884:	andeq	r0, r0, r0

00014888 <init_token_boolean_op@@Base>:
   14888:	movw	r2, #50752	; 0xc640
   1488c:	add	r3, pc, #36	; 0x24
   14890:	movt	r2, #2
   14894:	vld1.64	{d16-d17}, [r3]
   14898:	vld1.64	{d18-d19}, [r2 :128]
   1489c:	vadd.i64	q8, q9, q8
   148a0:	vst1.64	{d16-d17}, [r2 :128]
   148a4:	mov	r2, #12
   148a8:	str	r2, [r0]
   148ac:	str	r1, [r0, #4]
   148b0:	bx	lr
   148b4:	nop	{0}
   148b8:	andeq	r0, r0, r1
   148bc:	andeq	r0, r0, r0
   148c0:	andeq	r0, r0, r1
   148c4:	andeq	r0, r0, r0

000148c8 <free_token_int_type@@Base>:
   148c8:	movw	r1, #50768	; 0xc650
   148cc:	add	r2, pc, #20
   148d0:	movt	r1, #2
   148d4:	vld1.64	{d16-d17}, [r2]
   148d8:	vld1.64	{d18-d19}, [r1 :128]
   148dc:	vadd.i64	q8, q9, q8
   148e0:	vst1.64	{d16-d17}, [r1 :128]
   148e4:	b	11e7c <free@plt>
   148e8:	andeq	r0, r0, r1
   148ec:	andeq	r0, r0, r0
   148f0:	andeq	r0, r0, r1
   148f4:	andeq	r0, r0, r0

000148f8 <free_token_int_value@@Base>:
   148f8:	movw	r1, #50784	; 0xc660
   148fc:	add	r2, pc, #20
   14900:	movt	r1, #2
   14904:	vld1.64	{d16-d17}, [r2]
   14908:	vld1.64	{d18-d19}, [r1 :128]
   1490c:	vadd.i64	q8, q9, q8
   14910:	vst1.64	{d16-d17}, [r1 :128]
   14914:	b	11e7c <free@plt>
   14918:	andeq	r0, r0, r1
   1491c:	andeq	r0, r0, r0
   14920:	andeq	r0, r0, r1
   14924:	andeq	r0, r0, r0

00014928 <free_token_function@@Base>:
   14928:	movw	r1, #50800	; 0xc670
   1492c:	add	r2, pc, #20
   14930:	movt	r1, #2
   14934:	vld1.64	{d16-d17}, [r2]
   14938:	vld1.64	{d18-d19}, [r1 :128]
   1493c:	vadd.i64	q8, q9, q8
   14940:	vst1.64	{d16-d17}, [r1 :128]
   14944:	b	11e7c <free@plt>
   14948:	andeq	r0, r0, r1
   1494c:	andeq	r0, r0, r0
   14950:	andeq	r0, r0, r1
   14954:	andeq	r0, r0, r0

00014958 <free_token_opar@@Base>:
   14958:	movw	r1, #50816	; 0xc680
   1495c:	add	r2, pc, #20
   14960:	movt	r1, #2
   14964:	vld1.64	{d16-d17}, [r2]
   14968:	vld1.64	{d18-d19}, [r1 :128]
   1496c:	vadd.i64	q8, q9, q8
   14970:	vst1.64	{d16-d17}, [r1 :128]
   14974:	b	11e7c <free@plt>
   14978:	andeq	r0, r0, r1
   1497c:	andeq	r0, r0, r0
   14980:	andeq	r0, r0, r1
   14984:	andeq	r0, r0, r0

00014988 <free_token_cpar@@Base>:
   14988:	movw	r1, #50832	; 0xc690
   1498c:	add	r2, pc, #20
   14990:	movt	r1, #2
   14994:	vld1.64	{d16-d17}, [r2]
   14998:	vld1.64	{d18-d19}, [r1 :128]
   1499c:	vadd.i64	q8, q9, q8
   149a0:	vst1.64	{d16-d17}, [r1 :128]
   149a4:	b	11e7c <free@plt>
   149a8:	andeq	r0, r0, r1
   149ac:	andeq	r0, r0, r0
   149b0:	andeq	r0, r0, r1
   149b4:	andeq	r0, r0, r0

000149b8 <free_token_obra@@Base>:
   149b8:	movw	r1, #50848	; 0xc6a0
   149bc:	add	r2, pc, #20
   149c0:	movt	r1, #2
   149c4:	vld1.64	{d16-d17}, [r2]
   149c8:	vld1.64	{d18-d19}, [r1 :128]
   149cc:	vadd.i64	q8, q9, q8
   149d0:	vst1.64	{d16-d17}, [r1 :128]
   149d4:	b	11e7c <free@plt>
   149d8:	andeq	r0, r0, r1
   149dc:	andeq	r0, r0, r0
   149e0:	andeq	r0, r0, r1
   149e4:	andeq	r0, r0, r0

000149e8 <free_token_cbra@@Base>:
   149e8:	movw	r1, #50864	; 0xc6b0
   149ec:	add	r2, pc, #20
   149f0:	movt	r1, #2
   149f4:	vld1.64	{d16-d17}, [r2]
   149f8:	vld1.64	{d18-d19}, [r1 :128]
   149fc:	vadd.i64	q8, q9, q8
   14a00:	vst1.64	{d16-d17}, [r1 :128]
   14a04:	b	11e7c <free@plt>
   14a08:	andeq	r0, r0, r1
   14a0c:	andeq	r0, r0, r0
   14a10:	andeq	r0, r0, r1
   14a14:	andeq	r0, r0, r0

00014a18 <free_token_return@@Base>:
   14a18:	movw	r1, #50880	; 0xc6c0
   14a1c:	add	r2, pc, #20
   14a20:	movt	r1, #2
   14a24:	vld1.64	{d16-d17}, [r2]
   14a28:	vld1.64	{d18-d19}, [r1 :128]
   14a2c:	vadd.i64	q8, q9, q8
   14a30:	vst1.64	{d16-d17}, [r1 :128]
   14a34:	b	11e7c <free@plt>
   14a38:	andeq	r0, r0, r1
   14a3c:	andeq	r0, r0, r0
   14a40:	andeq	r0, r0, r1
   14a44:	andeq	r0, r0, r0

00014a48 <free_token_semicolon@@Base>:
   14a48:	movw	r1, #50896	; 0xc6d0
   14a4c:	add	r2, pc, #20
   14a50:	movt	r1, #2
   14a54:	vld1.64	{d16-d17}, [r2]
   14a58:	vld1.64	{d18-d19}, [r1 :128]
   14a5c:	vadd.i64	q8, q9, q8
   14a60:	vst1.64	{d16-d17}, [r1 :128]
   14a64:	b	11e7c <free@plt>
   14a68:	andeq	r0, r0, r1
   14a6c:	andeq	r0, r0, r0
   14a70:	andeq	r0, r0, r1
   14a74:	andeq	r0, r0, r0

00014a78 <free_token_eof@@Base>:
   14a78:	movw	r1, #50912	; 0xc6e0
   14a7c:	add	r2, pc, #20
   14a80:	movt	r1, #2
   14a84:	vld1.64	{d16-d17}, [r2]
   14a88:	vld1.64	{d18-d19}, [r1 :128]
   14a8c:	vadd.i64	q8, q9, q8
   14a90:	vst1.64	{d16-d17}, [r1 :128]
   14a94:	b	11e7c <free@plt>
   14a98:	andeq	r0, r0, r1
   14a9c:	andeq	r0, r0, r0
   14aa0:	andeq	r0, r0, r1
   14aa4:	andeq	r0, r0, r0

00014aa8 <free_token_if@@Base>:
   14aa8:	movw	r1, #50928	; 0xc6f0
   14aac:	add	r2, pc, #20
   14ab0:	movt	r1, #2
   14ab4:	vld1.64	{d16-d17}, [r2]
   14ab8:	vld1.64	{d18-d19}, [r1 :128]
   14abc:	vadd.i64	q8, q9, q8
   14ac0:	vst1.64	{d16-d17}, [r1 :128]
   14ac4:	b	11e7c <free@plt>
   14ac8:	andeq	r0, r0, r1
   14acc:	andeq	r0, r0, r0
   14ad0:	andeq	r0, r0, r1
   14ad4:	andeq	r0, r0, r0

00014ad8 <free_token_else@@Base>:
   14ad8:	movw	r1, #50944	; 0xc700
   14adc:	add	r2, pc, #20
   14ae0:	movt	r1, #2
   14ae4:	vld1.64	{d16-d17}, [r2]
   14ae8:	vld1.64	{d18-d19}, [r1 :128]
   14aec:	vadd.i64	q8, q9, q8
   14af0:	vst1.64	{d16-d17}, [r1 :128]
   14af4:	b	11e7c <free@plt>
   14af8:	andeq	r0, r0, r1
   14afc:	andeq	r0, r0, r0
   14b00:	andeq	r0, r0, r1
   14b04:	andeq	r0, r0, r0

00014b08 <free_token_boolean_op@@Base>:
   14b08:	push	{r4, r5, fp, lr}
   14b0c:	add	fp, sp, #8
   14b10:	movw	r5, #50960	; 0xc710
   14b14:	mov	r4, r0
   14b18:	movt	r5, #2
   14b1c:	ldrd	r0, [r5]
   14b20:	mov	r2, r5
   14b24:	adds	r0, r0, #1
   14b28:	adc	r1, r1, #0
   14b2c:	strd	r0, [r5]
   14b30:	mov	r1, #16
   14b34:	ldr	r0, [r4, #4]
   14b38:	cmp	r0, #0
   14b3c:	movwne	r1, #8
   14b40:	ldr	r1, [r2, r1]!
   14b44:	adds	r1, r1, #1
   14b48:	str	r1, [r2]
   14b4c:	ldr	r1, [r2, #4]
   14b50:	adc	r1, r1, #0
   14b54:	cmp	r0, #0
   14b58:	str	r1, [r2, #4]
   14b5c:	beq	14b74 <free_token_boolean_op@@Base+0x6c>
   14b60:	ldrd	r2, [r5, #24]
   14b64:	adds	r2, r2, #1
   14b68:	adc	r3, r3, #0
   14b6c:	strd	r2, [r5, #24]
   14b70:	bl	11e7c <free@plt>
   14b74:	ldrd	r0, [r5, #32]
   14b78:	adds	r0, r0, #1
   14b7c:	adc	r1, r1, #0
   14b80:	strd	r0, [r5, #32]
   14b84:	mov	r0, r4
   14b88:	pop	{r4, r5, fp, lr}
   14b8c:	b	11e7c <free@plt>
   14b90:	push	{r4, r5, r6, lr}
   14b94:	sub	sp, sp, #8
   14b98:	movw	r0, #42336	; 0xa560
   14b9c:	movw	r1, #41114	; 0xa09a
   14ba0:	movw	r2, #10327	; 0x2857
   14ba4:	movt	r0, #1
   14ba8:	movt	r1, #1
   14bac:	movt	r2, #23326	; 0x5b1e
   14bb0:	bl	16c94 <read_boolean_unary_expression@@Base+0x3dc>
   14bb4:	movw	r0, #43552	; 0xaa20
   14bb8:	movw	r6, #43024	; 0xa810
   14bbc:	mov	r5, #0
   14bc0:	movt	r0, #1
   14bc4:	movt	r6, #1
   14bc8:	add	r4, r0, #4
   14bcc:	mov	r3, r6
   14bd0:	ldr	r0, [r3, r5]!
   14bd4:	ldr	r1, [r3, #16]
   14bd8:	str	r1, [sp]
   14bdc:	ldmib	r3, {r1, r2}
   14be0:	ldrb	r3, [r3, #12]
   14be4:	bl	173f8 <read_boolean_unary_expression@@Base+0xb40>
   14be8:	ldrd	r0, [r4, #-4]
   14bec:	bl	17cac <read_boolean_unary_expression@@Base+0x13f4>
   14bf0:	add	r5, r5, #20
   14bf4:	add	r4, r4, #8
   14bf8:	cmp	r5, #520	; 0x208
   14bfc:	bne	14bcc <free_token_boolean_op@@Base+0xc4>
   14c00:	bl	18428 <read_boolean_unary_expression@@Base+0x1b70>
   14c04:	add	sp, sp, #8
   14c08:	pop	{r4, r5, r6, lr}
   14c0c:	b	19194 <read_boolean_unary_expression@@Base+0x28dc>
   14c10:	push	{fp, lr}
   14c14:	bl	14b90 <free_token_boolean_op@@Base+0x88>
   14c18:	movw	r0, #50576	; 0xc590
   14c1c:	vmov.i32	q8, #0	; 0x00000000
   14c20:	mov	r1, #0
   14c24:	movt	r0, #2
   14c28:	vst1.64	{d16-d17}, [r0 :128]
   14c2c:	movw	r0, #50560	; 0xc580
   14c30:	movt	r0, #2
   14c34:	vst1.64	{d16-d17}, [r0 :128]
   14c38:	movw	r0, #50592	; 0xc5a0
   14c3c:	movt	r0, #2
   14c40:	vst1.64	{d16-d17}, [r0 :128]
   14c44:	movw	r0, #50608	; 0xc5b0
   14c48:	movt	r0, #2
   14c4c:	vst1.64	{d16-d17}, [r0 :128]
   14c50:	movw	r0, #50624	; 0xc5c0
   14c54:	movt	r0, #2
   14c58:	vst1.64	{d16-d17}, [r0 :128]
   14c5c:	movw	r0, #50640	; 0xc5d0
   14c60:	movt	r0, #2
   14c64:	vst1.64	{d16-d17}, [r0 :128]
   14c68:	movw	r0, #50656	; 0xc5e0
   14c6c:	movt	r0, #2
   14c70:	vst1.64	{d16-d17}, [r0 :128]
   14c74:	movw	r0, #50672	; 0xc5f0
   14c78:	movt	r0, #2
   14c7c:	vst1.64	{d16-d17}, [r0 :128]
   14c80:	movw	r0, #50688	; 0xc600
   14c84:	movt	r0, #2
   14c88:	vst1.64	{d16-d17}, [r0 :128]
   14c8c:	movw	r0, #50704	; 0xc610
   14c90:	movt	r0, #2
   14c94:	vst1.64	{d16-d17}, [r0 :128]
   14c98:	movw	r0, #50720	; 0xc620
   14c9c:	movt	r0, #2
   14ca0:	vst1.64	{d16-d17}, [r0 :128]
   14ca4:	movw	r0, #50736	; 0xc630
   14ca8:	movt	r0, #2
   14cac:	vst1.64	{d16-d17}, [r0 :128]
   14cb0:	movw	r0, #50752	; 0xc640
   14cb4:	movt	r0, #2
   14cb8:	vst1.64	{d16-d17}, [r0 :128]
   14cbc:	movw	r0, #50768	; 0xc650
   14cc0:	movt	r0, #2
   14cc4:	vst1.64	{d16-d17}, [r0 :128]
   14cc8:	movw	r0, #50784	; 0xc660
   14ccc:	movt	r0, #2
   14cd0:	vst1.64	{d16-d17}, [r0 :128]
   14cd4:	movw	r0, #50800	; 0xc670
   14cd8:	movt	r0, #2
   14cdc:	vst1.64	{d16-d17}, [r0 :128]
   14ce0:	movw	r0, #50816	; 0xc680
   14ce4:	movt	r0, #2
   14ce8:	vst1.64	{d16-d17}, [r0 :128]
   14cec:	movw	r0, #50832	; 0xc690
   14cf0:	movt	r0, #2
   14cf4:	vst1.64	{d16-d17}, [r0 :128]
   14cf8:	movw	r0, #50848	; 0xc6a0
   14cfc:	movt	r0, #2
   14d00:	vst1.64	{d16-d17}, [r0 :128]
   14d04:	movw	r0, #50864	; 0xc6b0
   14d08:	movt	r0, #2
   14d0c:	vst1.64	{d16-d17}, [r0 :128]
   14d10:	movw	r0, #50880	; 0xc6c0
   14d14:	movt	r0, #2
   14d18:	vst1.64	{d16-d17}, [r0 :128]
   14d1c:	movw	r0, #50896	; 0xc6d0
   14d20:	movt	r0, #2
   14d24:	vst1.64	{d16-d17}, [r0 :128]
   14d28:	movw	r0, #50912	; 0xc6e0
   14d2c:	movt	r0, #2
   14d30:	vst1.64	{d16-d17}, [r0 :128]
   14d34:	movw	r0, #50928	; 0xc6f0
   14d38:	movt	r0, #2
   14d3c:	vst1.64	{d16-d17}, [r0 :128]
   14d40:	movw	r0, #50944	; 0xc700
   14d44:	movt	r0, #2
   14d48:	vst1.64	{d16-d17}, [r0 :128]
   14d4c:	movw	r0, #50960	; 0xc710
   14d50:	movt	r0, #2
   14d54:	add	r2, r0, #16
   14d58:	str	r1, [r0, #32]
   14d5c:	vst1.64	{d16-d17}, [r2 :128]
   14d60:	mov	r2, #36	; 0x24
   14d64:	vst1.64	{d16-d17}, [r0 :128], r2
   14d68:	str	r1, [r0]
   14d6c:	pop	{fp, pc}
   14d70:	movw	r0, #19344	; 0x4b90
   14d74:	movw	r1, #19472	; 0x4c10
   14d78:	movt	r0, #1
   14d7c:	movt	r1, #1
   14d80:	b	19644 <__gcov_flush@@Base+0xb4>
   14d84:	andeq	r0, r0, r0

00014d88 <init_ast_base@@Base>:
   14d88:	movw	ip, #51008	; 0xc740
   14d8c:	add	r3, pc, #28
   14d90:	movt	ip, #2
   14d94:	vld1.64	{d16-d17}, [r3]
   14d98:	vld1.64	{d18-d19}, [ip :128]
   14d9c:	vadd.i64	q8, q9, q8
   14da0:	vst1.64	{d16-d17}, [ip :128]
   14da4:	stm	r0, {r1, r2}
   14da8:	bx	lr
   14dac:	nop	{0}
   14db0:	andeq	r0, r0, r1
   14db4:	andeq	r0, r0, r0
   14db8:	andeq	r0, r0, r1
   14dbc:	andeq	r0, r0, r0

00014dc0 <init_ast_base_single@@Base>:
   14dc0:	movw	ip, #51008	; 0xc740
   14dc4:	movw	r3, #51024	; 0xc750
   14dc8:	add	r2, pc, #48	; 0x30
   14dcc:	movt	ip, #2
   14dd0:	movt	r3, #2
   14dd4:	vld1.64	{d16-d17}, [r2]
   14dd8:	mov	r2, #0
   14ddc:	vld1.64	{d18-d19}, [r3 :128]
   14de0:	vld1.64	{d20-d21}, [ip :128]
   14de4:	vadd.i64	q9, q9, q8
   14de8:	vadd.i64	q8, q10, q8
   14dec:	vst1.64	{d18-d19}, [r3 :128]
   14df0:	vst1.64	{d16-d17}, [ip :128]
   14df4:	stm	r0, {r1, r2}
   14df8:	bx	lr
   14dfc:	nop	{0}
   14e00:	andeq	r0, r0, r1
   14e04:	andeq	r0, r0, r0
   14e08:	andeq	r0, r0, r1
   14e0c:	andeq	r0, r0, r0

00014e10 <init_node_id@@Base>:
   14e10:	movw	r2, #51024	; 0xc750
   14e14:	add	r3, pc, #76	; 0x4c
   14e18:	movw	ip, #51040	; 0xc760
   14e1c:	vld1.64	{d16-d17}, [r3]
   14e20:	movw	r3, #51008	; 0xc740
   14e24:	movt	r2, #2
   14e28:	movt	ip, #2
   14e2c:	vld1.64	{d20-d21}, [r2 :128]
   14e30:	movt	r3, #2
   14e34:	vld1.64	{d18-d19}, [ip :128]
   14e38:	vld1.64	{d22-d23}, [r3 :128]
   14e3c:	vadd.i64	q10, q10, q8
   14e40:	vadd.i64	q9, q9, q8
   14e44:	vadd.i64	q8, q11, q8
   14e48:	vst1.64	{d20-d21}, [r2 :128]
   14e4c:	mov	r2, #0
   14e50:	vst1.64	{d18-d19}, [ip :128]
   14e54:	vst1.64	{d16-d17}, [r3 :128]
   14e58:	str	r2, [r0]
   14e5c:	str	r2, [r0, #4]
   14e60:	str	r1, [r0, #8]
   14e64:	bx	lr
   14e68:	andeq	r0, r0, r1
   14e6c:	andeq	r0, r0, r0
   14e70:	andeq	r0, r0, r1
   14e74:	andeq	r0, r0, r0

00014e78 <init_node_int@@Base>:
   14e78:	add	r3, pc, #88	; 0x58
   14e7c:	movw	ip, #51056	; 0xc770
   14e80:	movw	r2, #51024	; 0xc750
   14e84:	vld1.64	{d16-d17}, [r3]
   14e88:	movw	r3, #51008	; 0xc740
   14e8c:	movt	ip, #2
   14e90:	movt	r2, #2
   14e94:	movt	r3, #2
   14e98:	vld1.64	{d18-d19}, [ip :128]
   14e9c:	vld1.64	{d20-d21}, [r2 :128]
   14ea0:	vld1.64	{d22-d23}, [r3 :128]
   14ea4:	vadd.i64	q9, q9, q8
   14ea8:	vadd.i64	q10, q10, q8
   14eac:	vadd.i64	q8, q11, q8
   14eb0:	vst1.64	{d20-d21}, [r2 :128]
   14eb4:	mov	r2, #0
   14eb8:	vst1.64	{d18-d19}, [ip :128]
   14ebc:	vst1.64	{d16-d17}, [r3 :128]
   14ec0:	mov	r3, #1
   14ec4:	str	r3, [r0]
   14ec8:	str	r2, [r0, #4]
   14ecc:	str	r1, [r0, #8]
   14ed0:	bx	lr
   14ed4:	nop	{0}
   14ed8:	andeq	r0, r0, r1
   14edc:	andeq	r0, r0, r0
   14ee0:	andeq	r0, r0, r1
   14ee4:	andeq	r0, r0, r0

00014ee8 <init_node_function@@Base>:
   14ee8:	push	{fp, lr}
   14eec:	mov	fp, sp
   14ef0:	add	r3, pc, #88	; 0x58
   14ef4:	movw	ip, #51072	; 0xc780
   14ef8:	movw	lr, #51008	; 0xc740
   14efc:	vld1.64	{d16-d17}, [r3]
   14f00:	movw	r3, #51024	; 0xc750
   14f04:	movt	ip, #2
   14f08:	movt	lr, #2
   14f0c:	movt	r3, #2
   14f10:	vld1.64	{d18-d19}, [ip :128]
   14f14:	vld1.64	{d22-d23}, [lr :128]
   14f18:	vld1.64	{d20-d21}, [r3 :128]
   14f1c:	vadd.i64	q9, q9, q8
   14f20:	vadd.i64	q10, q10, q8
   14f24:	vadd.i64	q8, q11, q8
   14f28:	vst1.64	{d18-d19}, [ip :128]
   14f2c:	mov	ip, #0
   14f30:	vst1.64	{d20-d21}, [r3 :128]
   14f34:	mov	r3, #2
   14f38:	vst1.64	{d16-d17}, [lr :128]
   14f3c:	stm	r0, {r3, ip}
   14f40:	str	r1, [r0, #8]
   14f44:	str	r2, [r0, #12]
   14f48:	pop	{fp, pc}
   14f4c:	nop	{0}
   14f50:	andeq	r0, r0, r1
   14f54:	andeq	r0, r0, r0
   14f58:	andeq	r0, r0, r1
   14f5c:	andeq	r0, r0, r0

00014f60 <init_node_return@@Base>:
   14f60:	add	r3, pc, #88	; 0x58
   14f64:	movw	ip, #51088	; 0xc790
   14f68:	movw	r2, #51024	; 0xc750
   14f6c:	vld1.64	{d16-d17}, [r3]
   14f70:	movw	r3, #51008	; 0xc740
   14f74:	movt	ip, #2
   14f78:	movt	r2, #2
   14f7c:	movt	r3, #2
   14f80:	vld1.64	{d18-d19}, [ip :128]
   14f84:	vld1.64	{d20-d21}, [r2 :128]
   14f88:	vld1.64	{d22-d23}, [r3 :128]
   14f8c:	vadd.i64	q9, q9, q8
   14f90:	vadd.i64	q10, q10, q8
   14f94:	vadd.i64	q8, q11, q8
   14f98:	vst1.64	{d20-d21}, [r2 :128]
   14f9c:	mov	r2, #0
   14fa0:	vst1.64	{d18-d19}, [ip :128]
   14fa4:	vst1.64	{d16-d17}, [r3 :128]
   14fa8:	mov	r3, #3
   14fac:	str	r3, [r0]
   14fb0:	str	r2, [r0, #4]
   14fb4:	str	r1, [r0, #8]
   14fb8:	bx	lr
   14fbc:	nop	{0}
   14fc0:	andeq	r0, r0, r1
   14fc4:	andeq	r0, r0, r0
   14fc8:	andeq	r0, r0, r1
   14fcc:	andeq	r0, r0, r0

00014fd0 <init_node_if@@Base>:
   14fd0:	push	{r4, sl, fp, lr}
   14fd4:	add	fp, sp, #8
   14fd8:	movw	ip, #51104	; 0xc7a0
   14fdc:	movw	r4, #51024	; 0xc750
   14fe0:	add	lr, pc, #72	; 0x48
   14fe4:	movt	ip, #2
   14fe8:	vld1.64	{d16-d17}, [lr]
   14fec:	movw	lr, #51008	; 0xc740
   14ff0:	movt	r4, #2
   14ff4:	vld1.64	{d18-d19}, [ip :128]
   14ff8:	vld1.64	{d20-d21}, [r4 :128]
   14ffc:	movt	lr, #2
   15000:	vld1.64	{d22-d23}, [lr :128]
   15004:	vadd.i64	q9, q9, q8
   15008:	vadd.i64	q10, q10, q8
   1500c:	vadd.i64	q8, q11, q8
   15010:	vst1.64	{d18-d19}, [ip :128]
   15014:	vst1.64	{d20-d21}, [r4 :128]
   15018:	mov	ip, #0
   1501c:	mov	r4, #4
   15020:	vst1.64	{d16-d17}, [lr :128]
   15024:	stmia	r0!, {r4, ip}
   15028:	stm	r0, {r1, r2, r3}
   1502c:	pop	{r4, sl, fp, pc}
   15030:	andeq	r0, r0, r1
   15034:	andeq	r0, r0, r0
   15038:	andeq	r0, r0, r1
   1503c:	andeq	r0, r0, r0

00015040 <init_node_boolean_operator@@Base>:
   15040:	push	{r4, sl, fp, lr}
   15044:	add	fp, sp, #8
   15048:	movw	ip, #51120	; 0xc7b0
   1504c:	movw	r4, #51024	; 0xc750
   15050:	add	lr, pc, #80	; 0x50
   15054:	movt	ip, #2
   15058:	vld1.64	{d16-d17}, [lr]
   1505c:	movw	lr, #51008	; 0xc740
   15060:	movt	r4, #2
   15064:	vld1.64	{d18-d19}, [ip :128]
   15068:	vld1.64	{d20-d21}, [r4 :128]
   1506c:	movt	lr, #2
   15070:	vld1.64	{d22-d23}, [lr :128]
   15074:	vadd.i64	q9, q9, q8
   15078:	vadd.i64	q10, q10, q8
   1507c:	vadd.i64	q8, q11, q8
   15080:	vst1.64	{d18-d19}, [ip :128]
   15084:	vst1.64	{d20-d21}, [r4 :128]
   15088:	mov	r4, #5
   1508c:	mov	ip, #0
   15090:	vst1.64	{d16-d17}, [lr :128]
   15094:	stm	r0, {r4, ip}
   15098:	str	r2, [r0, #8]
   1509c:	str	r3, [r0, #12]
   150a0:	str	r1, [r0, #16]
   150a4:	pop	{r4, sl, fp, pc}
   150a8:	andeq	r0, r0, r1
   150ac:	andeq	r0, r0, r0
   150b0:	andeq	r0, r0, r1
   150b4:	andeq	r0, r0, r0

000150b8 <free_node@@Base>:
   150b8:	push	{r4, r5, fp, lr}
   150bc:	add	fp, sp, #8
   150c0:	movw	r5, #51136	; 0xc7c0
   150c4:	mov	r4, r0
   150c8:	movw	r0, #49356	; 0xc0cc
   150cc:	mov	r1, #0
   150d0:	movt	r0, #2
   150d4:	movt	r5, #2
   150d8:	str	r1, [r0]
   150dc:	ldrd	r0, [r5]
   150e0:	adds	r0, r0, #1
   150e4:	adc	r1, r1, #0
   150e8:	strd	r0, [r5]
   150ec:	ldr	r0, [r4]
   150f0:	cmp	r0, #5
   150f4:	bhi	15260 <free_node@@Base+0x1a8>
   150f8:	add	r1, pc, #0
   150fc:	ldr	pc, [r1, r0, lsl #2]
   15100:	andeq	r5, r1, r8, lsl r1
   15104:			; <UNDEFINED> instruction: 0x000151b4
   15108:	andeq	r5, r1, r0, lsl #3
   1510c:	andeq	r5, r1, r8, ror #3
   15110:	andeq	r5, r1, ip, asr #2
   15114:	andeq	r5, r1, ip, lsl r2
   15118:	movw	r0, #43968	; 0xabc0
   1511c:	movt	r0, #1
   15120:	add	r1, r0, #4
   15124:	movw	r0, #49356	; 0xc0cc
   15128:	movt	r0, #2
   1512c:	bl	1598c <get_boolean_op_value@@Base+0x390>
   15130:	ldrd	r0, [r5, #64]	; 0x40
   15134:	adds	r0, r0, #1
   15138:	adc	r1, r1, #0
   1513c:	strd	r0, [r5, #64]	; 0x40
   15140:	mov	r0, r4
   15144:	bl	1529c <free_node_id@@Base>
   15148:	b	1524c <free_node@@Base+0x194>
   1514c:	movw	r0, #43968	; 0xabc0
   15150:	movt	r0, #1
   15154:	add	r1, r0, #20
   15158:	movw	r0, #49356	; 0xc0cc
   1515c:	movt	r0, #2
   15160:	bl	1598c <get_boolean_op_value@@Base+0x390>
   15164:	ldrd	r0, [r5, #96]	; 0x60
   15168:	adds	r0, r0, #1
   1516c:	adc	r1, r1, #0
   15170:	strd	r0, [r5, #96]	; 0x60
   15174:	mov	r0, r4
   15178:	bl	154c4 <free_node_if@@Base>
   1517c:	b	1524c <free_node@@Base+0x194>
   15180:	movw	r0, #43968	; 0xabc0
   15184:	movt	r0, #1
   15188:	add	r1, r0, #12
   1518c:	movw	r0, #49356	; 0xc0cc
   15190:	movt	r0, #2
   15194:	bl	1598c <get_boolean_op_value@@Base+0x390>
   15198:	ldrd	r0, [r5, #80]	; 0x50
   1519c:	adds	r0, r0, #1
   151a0:	adc	r1, r1, #0
   151a4:	strd	r0, [r5, #80]	; 0x50
   151a8:	mov	r0, r4
   151ac:	bl	153ac <free_node_function@@Base>
   151b0:	b	1524c <free_node@@Base+0x194>
   151b4:	movw	r0, #43968	; 0xabc0
   151b8:	movt	r0, #1
   151bc:	add	r1, r0, #8
   151c0:	movw	r0, #49356	; 0xc0cc
   151c4:	movt	r0, #2
   151c8:	bl	1598c <get_boolean_op_value@@Base+0x390>
   151cc:	ldrd	r0, [r5, #72]	; 0x48
   151d0:	adds	r0, r0, #1
   151d4:	adc	r1, r1, #0
   151d8:	strd	r0, [r5, #72]	; 0x48
   151dc:	mov	r0, r4
   151e0:	bl	15324 <free_node_int@@Base>
   151e4:	b	1524c <free_node@@Base+0x194>
   151e8:	movw	r0, #43968	; 0xabc0
   151ec:	movt	r0, #1
   151f0:	add	r1, r0, #16
   151f4:	movw	r0, #49356	; 0xc0cc
   151f8:	movt	r0, #2
   151fc:	bl	1598c <get_boolean_op_value@@Base+0x390>
   15200:	ldrd	r0, [r5, #88]	; 0x58
   15204:	adds	r0, r0, #1
   15208:	adc	r1, r1, #0
   1520c:	strd	r0, [r5, #88]	; 0x58
   15210:	mov	r0, r4
   15214:	bl	1543c <free_node_return@@Base>
   15218:	b	1524c <free_node@@Base+0x194>
   1521c:	movw	r0, #43968	; 0xabc0
   15220:	movt	r0, #1
   15224:	add	r1, r0, #24
   15228:	movw	r0, #49356	; 0xc0cc
   1522c:	movt	r0, #2
   15230:	bl	1598c <get_boolean_op_value@@Base+0x390>
   15234:	ldrd	r0, [r5, #104]	; 0x68
   15238:	adds	r0, r0, #1
   1523c:	adc	r1, r1, #0
   15240:	strd	r0, [r5, #104]	; 0x68
   15244:	mov	r0, r4
   15248:	bl	15564 <free_node_boolean_operator@@Base>
   1524c:	ldrd	r0, [r5, #112]	; 0x70
   15250:	adds	r0, r0, #1
   15254:	adc	r1, r1, #0
   15258:	strd	r0, [r5, #112]	; 0x70
   1525c:	pop	{r4, r5, fp, pc}
   15260:	movw	r0, #49356	; 0xc0cc
   15264:	movw	r1, #43968	; 0xabc0
   15268:	movt	r0, #2
   1526c:	movt	r1, #1
   15270:	bl	1598c <get_boolean_op_value@@Base+0x390>
   15274:	movw	r0, #49392	; 0xc0f0
   15278:	mov	r1, #31
   1527c:	mov	r2, #1
   15280:	movt	r0, #2
   15284:	ldr	r3, [r0]
   15288:	movw	r0, #43760	; 0xaaf0
   1528c:	movt	r0, #1
   15290:	bl	11ed0 <fwrite@plt>
   15294:	mov	r0, #1
   15298:	bl	11f3c <exit@plt>

0001529c <free_node_id@@Base>:
   1529c:	push	{r4, r5, fp, lr}
   152a0:	add	fp, sp, #8
   152a4:	movw	r5, #51264	; 0xc840
   152a8:	mov	r4, r0
   152ac:	movt	r5, #2
   152b0:	ldrd	r0, [r5]
   152b4:	mov	r2, r5
   152b8:	adds	r0, r0, #1
   152bc:	adc	r1, r1, #0
   152c0:	strd	r0, [r5]
   152c4:	mov	r1, #16
   152c8:	ldr	r0, [r4, #4]
   152cc:	cmp	r0, #0
   152d0:	movwne	r1, #8
   152d4:	ldr	r1, [r2, r1]!
   152d8:	adds	r1, r1, #1
   152dc:	str	r1, [r2]
   152e0:	ldr	r1, [r2, #4]
   152e4:	adc	r1, r1, #0
   152e8:	cmp	r0, #0
   152ec:	str	r1, [r2, #4]
   152f0:	beq	15308 <free_node_id@@Base+0x6c>
   152f4:	ldrd	r2, [r5, #24]
   152f8:	adds	r2, r2, #1
   152fc:	adc	r3, r3, #0
   15300:	strd	r2, [r5, #24]
   15304:	bl	150b8 <free_node@@Base>
   15308:	ldrd	r0, [r5, #32]
   1530c:	adds	r0, r0, #1
   15310:	adc	r1, r1, #0
   15314:	strd	r0, [r5, #32]
   15318:	mov	r0, r4
   1531c:	pop	{r4, r5, fp, lr}
   15320:	b	11e7c <free@plt>

00015324 <free_node_int@@Base>:
   15324:	push	{r4, r5, fp, lr}
   15328:	add	fp, sp, #8
   1532c:	movw	r5, #51312	; 0xc870
   15330:	mov	r4, r0
   15334:	movt	r5, #2
   15338:	ldrd	r0, [r5]
   1533c:	mov	r2, r5
   15340:	adds	r0, r0, #1
   15344:	adc	r1, r1, #0
   15348:	strd	r0, [r5]
   1534c:	mov	r1, #16
   15350:	ldr	r0, [r4, #4]
   15354:	cmp	r0, #0
   15358:	movwne	r1, #8
   1535c:	ldr	r1, [r2, r1]!
   15360:	adds	r1, r1, #1
   15364:	str	r1, [r2]
   15368:	ldr	r1, [r2, #4]
   1536c:	adc	r1, r1, #0
   15370:	cmp	r0, #0
   15374:	str	r1, [r2, #4]
   15378:	beq	15390 <free_node_int@@Base+0x6c>
   1537c:	ldrd	r2, [r5, #24]
   15380:	adds	r2, r2, #1
   15384:	adc	r3, r3, #0
   15388:	strd	r2, [r5, #24]
   1538c:	bl	150b8 <free_node@@Base>
   15390:	ldrd	r0, [r5, #32]
   15394:	adds	r0, r0, #1
   15398:	adc	r1, r1, #0
   1539c:	strd	r0, [r5, #32]
   153a0:	mov	r0, r4
   153a4:	pop	{r4, r5, fp, lr}
   153a8:	b	11e7c <free@plt>

000153ac <free_node_function@@Base>:
   153ac:	push	{r4, r5, fp, lr}
   153b0:	add	fp, sp, #8
   153b4:	movw	r5, #51360	; 0xc8a0
   153b8:	mov	r4, r0
   153bc:	movt	r5, #2
   153c0:	ldrd	r0, [r5]
   153c4:	mov	r2, r5
   153c8:	adds	r0, r0, #1
   153cc:	adc	r1, r1, #0
   153d0:	strd	r0, [r5]
   153d4:	mov	r1, #16
   153d8:	ldr	r0, [r4, #4]
   153dc:	cmp	r0, #0
   153e0:	movwne	r1, #8
   153e4:	ldr	r1, [r2, r1]!
   153e8:	adds	r1, r1, #1
   153ec:	str	r1, [r2]
   153f0:	ldr	r1, [r2, #4]
   153f4:	adc	r1, r1, #0
   153f8:	cmp	r0, #0
   153fc:	str	r1, [r2, #4]
   15400:	beq	15418 <free_node_function@@Base+0x6c>
   15404:	ldrd	r2, [r5, #24]
   15408:	adds	r2, r2, #1
   1540c:	adc	r3, r3, #0
   15410:	strd	r2, [r5, #24]
   15414:	bl	150b8 <free_node@@Base>
   15418:	ldrd	r0, [r5, #32]
   1541c:	adds	r0, r0, #1
   15420:	adc	r1, r1, #0
   15424:	strd	r0, [r5, #32]
   15428:	ldr	r0, [r4, #8]
   1542c:	bl	11e7c <free@plt>
   15430:	mov	r0, r4
   15434:	pop	{r4, r5, fp, lr}
   15438:	b	11e7c <free@plt>

0001543c <free_node_return@@Base>:
   1543c:	push	{r4, r5, fp, lr}
   15440:	add	fp, sp, #8
   15444:	movw	r5, #51408	; 0xc8d0
   15448:	mov	r4, r0
   1544c:	movt	r5, #2
   15450:	ldrd	r0, [r5]
   15454:	mov	r2, r5
   15458:	adds	r0, r0, #1
   1545c:	adc	r1, r1, #0
   15460:	strd	r0, [r5]
   15464:	mov	r1, #16
   15468:	ldr	r0, [r4, #4]
   1546c:	cmp	r0, #0
   15470:	movwne	r1, #8
   15474:	ldr	r1, [r2, r1]!
   15478:	adds	r1, r1, #1
   1547c:	str	r1, [r2]
   15480:	ldr	r1, [r2, #4]
   15484:	adc	r1, r1, #0
   15488:	cmp	r0, #0
   1548c:	str	r1, [r2, #4]
   15490:	beq	154a8 <free_node_return@@Base+0x6c>
   15494:	ldrd	r2, [r5, #24]
   15498:	adds	r2, r2, #1
   1549c:	adc	r3, r3, #0
   154a0:	strd	r2, [r5, #24]
   154a4:	bl	150b8 <free_node@@Base>
   154a8:	ldrd	r0, [r5, #32]
   154ac:	adds	r0, r0, #1
   154b0:	adc	r1, r1, #0
   154b4:	strd	r0, [r5, #32]
   154b8:	mov	r0, r4
   154bc:	pop	{r4, r5, fp, lr}
   154c0:	b	11e7c <free@plt>

000154c4 <free_node_if@@Base>:
   154c4:	push	{r4, r5, fp, lr}
   154c8:	add	fp, sp, #8
   154cc:	movw	r5, #51456	; 0xc900
   154d0:	mov	r4, r0
   154d4:	movt	r5, #2
   154d8:	ldrd	r0, [r5]
   154dc:	mov	r2, r5
   154e0:	adds	r0, r0, #1
   154e4:	adc	r1, r1, #0
   154e8:	strd	r0, [r5]
   154ec:	mov	r1, #16
   154f0:	ldr	r0, [r4, #4]
   154f4:	cmp	r0, #0
   154f8:	movwne	r1, #8
   154fc:	ldr	r1, [r2, r1]!
   15500:	adds	r1, r1, #1
   15504:	str	r1, [r2]
   15508:	ldr	r1, [r2, #4]
   1550c:	adc	r1, r1, #0
   15510:	cmp	r0, #0
   15514:	str	r1, [r2, #4]
   15518:	beq	15530 <free_node_if@@Base+0x6c>
   1551c:	ldrd	r2, [r5, #24]
   15520:	adds	r2, r2, #1
   15524:	adc	r3, r3, #0
   15528:	strd	r2, [r5, #24]
   1552c:	bl	150b8 <free_node@@Base>
   15530:	ldrd	r0, [r5, #32]
   15534:	adds	r0, r0, #1
   15538:	adc	r1, r1, #0
   1553c:	strd	r0, [r5, #32]
   15540:	ldr	r0, [r4, #8]
   15544:	bl	150b8 <free_node@@Base>
   15548:	ldr	r0, [r4, #12]
   1554c:	bl	150b8 <free_node@@Base>
   15550:	ldr	r0, [r4, #16]
   15554:	bl	150b8 <free_node@@Base>
   15558:	mov	r0, r4
   1555c:	pop	{r4, r5, fp, lr}
   15560:	b	11e7c <free@plt>

00015564 <free_node_boolean_operator@@Base>:
   15564:	push	{r4, r5, fp, lr}
   15568:	add	fp, sp, #8
   1556c:	movw	r5, #51504	; 0xc930
   15570:	mov	r4, r0
   15574:	movt	r5, #2
   15578:	ldrd	r0, [r5]
   1557c:	mov	r2, r5
   15580:	adds	r0, r0, #1
   15584:	adc	r1, r1, #0
   15588:	strd	r0, [r5]
   1558c:	mov	r1, #16
   15590:	ldr	r0, [r4, #4]
   15594:	cmp	r0, #0
   15598:	movwne	r1, #8
   1559c:	ldr	r1, [r2, r1]!
   155a0:	adds	r1, r1, #1
   155a4:	str	r1, [r2]
   155a8:	ldr	r1, [r2, #4]
   155ac:	adc	r1, r1, #0
   155b0:	cmp	r0, #0
   155b4:	str	r1, [r2, #4]
   155b8:	beq	155d0 <free_node_boolean_operator@@Base+0x6c>
   155bc:	ldrd	r2, [r5, #24]
   155c0:	adds	r2, r2, #1
   155c4:	adc	r3, r3, #0
   155c8:	strd	r2, [r5, #24]
   155cc:	bl	150b8 <free_node@@Base>
   155d0:	ldrd	r0, [r5, #32]
   155d4:	adds	r0, r0, #1
   155d8:	adc	r1, r1, #0
   155dc:	strd	r0, [r5, #32]
   155e0:	ldr	r0, [r4, #8]
   155e4:	bl	150b8 <free_node@@Base>
   155e8:	ldr	r0, [r4, #12]
   155ec:	bl	150b8 <free_node@@Base>
   155f0:	mov	r0, r4
   155f4:	pop	{r4, r5, fp, lr}
   155f8:	b	11e7c <free@plt>

000155fc <get_boolean_op_value@@Base>:
   155fc:	push	{r4, r5, r6, sl, fp, lr}
   15600:	add	fp, sp, #16
   15604:	movw	r6, #51552	; 0xc960
   15608:	mov	r1, #2
   1560c:	movt	r6, #2
   15610:	ldrd	r2, [r6]
   15614:	adds	r2, r2, #1
   15618:	adc	r3, r3, #0
   1561c:	strd	r2, [r6]
   15620:	ldr	r4, [r0, #4]
   15624:	mov	r0, r4
   15628:	bl	11fc0 <strnlen@plt>
   1562c:	mov	r1, #16
   15630:	cmp	r0, #2
   15634:	mov	r2, r6
   15638:	movweq	r1, #8
   1563c:	ldr	r1, [r2, r1]!
   15640:	adds	r1, r1, #1
   15644:	str	r1, [r2]
   15648:	ldr	r1, [r2, #4]
   1564c:	adc	r1, r1, #0
   15650:	cmp	r0, #2
   15654:	str	r1, [r2, #4]
   15658:	bne	15810 <get_boolean_op_value@@Base+0x214>
   1565c:	movw	r1, #43792	; 0xab10
   15660:	mov	r0, r4
   15664:	mov	r2, #2
   15668:	movt	r1, #1
   1566c:	bl	12008 <strncmp@plt>
   15670:	mov	r1, #32
   15674:	cmp	r0, #0
   15678:	mov	r2, r6
   1567c:	movweq	r1, #24
   15680:	ldr	r1, [r2, r1]!
   15684:	adds	r1, r1, #1
   15688:	str	r1, [r2]
   1568c:	ldr	r1, [r2, #4]
   15690:	adc	r1, r1, #0
   15694:	cmp	r0, #0
   15698:	str	r1, [r2, #4]
   1569c:	beq	1586c <get_boolean_op_value@@Base+0x270>
   156a0:	movw	r1, #43795	; 0xab13
   156a4:	mov	r0, r4
   156a8:	mov	r2, #2
   156ac:	movt	r1, #1
   156b0:	bl	12008 <strncmp@plt>
   156b4:	mov	r1, #56	; 0x38
   156b8:	cmp	r0, #0
   156bc:	mov	r2, r6
   156c0:	movweq	r1, #48	; 0x30
   156c4:	ldr	r1, [r2, r1]!
   156c8:	adds	r1, r1, #1
   156cc:	str	r1, [r2]
   156d0:	ldr	r1, [r2, #4]
   156d4:	adc	r1, r1, #0
   156d8:	cmp	r0, #0
   156dc:	str	r1, [r2, #4]
   156e0:	beq	158e4 <get_boolean_op_value@@Base+0x2e8>
   156e4:	movw	r1, #43798	; 0xab16
   156e8:	mov	r0, r4
   156ec:	mov	r2, #2
   156f0:	mov	r5, #2
   156f4:	movt	r1, #1
   156f8:	bl	12008 <strncmp@plt>
   156fc:	mov	r1, #80	; 0x50
   15700:	cmp	r0, #0
   15704:	mov	r2, r6
   15708:	movweq	r1, #72	; 0x48
   1570c:	ldr	r1, [r2, r1]!
   15710:	adds	r1, r1, #1
   15714:	str	r1, [r2]
   15718:	ldr	r1, [r2, #4]
   1571c:	adc	r1, r1, #0
   15720:	cmp	r0, #0
   15724:	str	r1, [r2, #4]
   15728:	beq	158fc <get_boolean_op_value@@Base+0x300>
   1572c:	movw	r1, #43801	; 0xab19
   15730:	mov	r0, r4
   15734:	mov	r2, #2
   15738:	movt	r1, #1
   1573c:	bl	12008 <strncmp@plt>
   15740:	mov	r1, #104	; 0x68
   15744:	cmp	r0, #0
   15748:	mov	r2, r6
   1574c:	movweq	r1, #96	; 0x60
   15750:	ldr	r1, [r2, r1]!
   15754:	adds	r1, r1, #1
   15758:	str	r1, [r2]
   1575c:	ldr	r1, [r2, #4]
   15760:	adc	r1, r1, #0
   15764:	cmp	r0, #0
   15768:	str	r1, [r2, #4]
   1576c:	beq	15910 <get_boolean_op_value@@Base+0x314>
   15770:	movw	r1, #43804	; 0xab1c
   15774:	mov	r0, r4
   15778:	mov	r2, #2
   1577c:	movt	r1, #1
   15780:	bl	12008 <strncmp@plt>
   15784:	mov	r1, #128	; 0x80
   15788:	cmp	r0, #0
   1578c:	mov	r2, r6
   15790:	movweq	r1, #120	; 0x78
   15794:	ldr	r1, [r2, r1]!
   15798:	adds	r1, r1, #1
   1579c:	str	r1, [r2]
   157a0:	ldr	r1, [r2, #4]
   157a4:	adc	r1, r1, #0
   157a8:	cmp	r0, #0
   157ac:	str	r1, [r2, #4]
   157b0:	beq	15928 <get_boolean_op_value@@Base+0x32c>
   157b4:	movw	r1, #43807	; 0xab1f
   157b8:	mov	r0, r4
   157bc:	mov	r2, #2
   157c0:	movt	r1, #1
   157c4:	bl	12008 <strncmp@plt>
   157c8:	mov	r1, #152	; 0x98
   157cc:	cmp	r0, #0
   157d0:	mov	r2, r6
   157d4:	movweq	r1, #144	; 0x90
   157d8:	ldr	r1, [r2, r1]!
   157dc:	adds	r1, r1, #1
   157e0:	str	r1, [r2]
   157e4:	ldr	r1, [r2, #4]
   157e8:	adc	r1, r1, #0
   157ec:	cmp	r0, #0
   157f0:	str	r1, [r2, #4]
   157f4:	bne	15968 <get_boolean_op_value@@Base+0x36c>
   157f8:	ldrd	r0, [r6, #160]	; 0xa0
   157fc:	mov	r5, #5
   15800:	adds	r0, r0, #1
   15804:	adc	r1, r1, #0
   15808:	strd	r0, [r6, #160]	; 0xa0
   1580c:	b	1593c <get_boolean_op_value@@Base+0x340>
   15810:	movw	r0, #49360	; 0xc0d0
   15814:	mov	r1, #0
   15818:	movt	r0, #2
   1581c:	str	r1, [r0]
   15820:	ldrb	r0, [r4]
   15824:	cmp	r0, #62	; 0x3e
   15828:	beq	158b4 <get_boolean_op_value@@Base+0x2b8>
   1582c:	cmp	r0, #60	; 0x3c
   15830:	beq	15884 <get_boolean_op_value@@Base+0x288>
   15834:	cmp	r0, #33	; 0x21
   15838:	bne	15954 <get_boolean_op_value@@Base+0x358>
   1583c:	movw	r0, #43996	; 0xabdc
   15840:	movt	r0, #1
   15844:	add	r1, r0, #4
   15848:	movw	r0, #49360	; 0xc0d0
   1584c:	movt	r0, #2
   15850:	bl	1598c <get_boolean_op_value@@Base+0x390>
   15854:	ldrd	r0, [r6, #200]	; 0xc8
   15858:	mov	r5, #8
   1585c:	adds	r0, r0, #1
   15860:	adc	r1, r1, #0
   15864:	strd	r0, [r6, #200]	; 0xc8
   15868:	b	1593c <get_boolean_op_value@@Base+0x340>
   1586c:	ldrd	r0, [r6, #40]	; 0x28
   15870:	mov	r5, #0
   15874:	adds	r0, r0, #1
   15878:	adc	r1, r1, #0
   1587c:	strd	r0, [r6, #40]	; 0x28
   15880:	b	1593c <get_boolean_op_value@@Base+0x340>
   15884:	movw	r0, #43996	; 0xabdc
   15888:	movt	r0, #1
   1588c:	add	r1, r0, #8
   15890:	movw	r0, #49360	; 0xc0d0
   15894:	movt	r0, #2
   15898:	bl	1598c <get_boolean_op_value@@Base+0x390>
   1589c:	ldrd	r0, [r6, #208]	; 0xd0
   158a0:	mov	r5, #6
   158a4:	adds	r0, r0, #1
   158a8:	adc	r1, r1, #0
   158ac:	strd	r0, [r6, #208]	; 0xd0
   158b0:	b	1593c <get_boolean_op_value@@Base+0x340>
   158b4:	movw	r0, #43996	; 0xabdc
   158b8:	movt	r0, #1
   158bc:	add	r1, r0, #12
   158c0:	movw	r0, #49360	; 0xc0d0
   158c4:	movt	r0, #2
   158c8:	bl	1598c <get_boolean_op_value@@Base+0x390>
   158cc:	ldrd	r0, [r6, #216]	; 0xd8
   158d0:	mov	r5, #7
   158d4:	adds	r0, r0, #1
   158d8:	adc	r1, r1, #0
   158dc:	strd	r0, [r6, #216]	; 0xd8
   158e0:	b	1593c <get_boolean_op_value@@Base+0x340>
   158e4:	ldrd	r0, [r6, #64]	; 0x40
   158e8:	mov	r5, #1
   158ec:	adds	r0, r0, #1
   158f0:	adc	r1, r1, #0
   158f4:	strd	r0, [r6, #64]	; 0x40
   158f8:	b	1593c <get_boolean_op_value@@Base+0x340>
   158fc:	ldrd	r0, [r6, #88]	; 0x58
   15900:	adds	r0, r0, #1
   15904:	adc	r1, r1, #0
   15908:	strd	r0, [r6, #88]	; 0x58
   1590c:	b	1593c <get_boolean_op_value@@Base+0x340>
   15910:	ldrd	r0, [r6, #112]	; 0x70
   15914:	mov	r5, #3
   15918:	adds	r0, r0, #1
   1591c:	adc	r1, r1, #0
   15920:	strd	r0, [r6, #112]	; 0x70
   15924:	b	1593c <get_boolean_op_value@@Base+0x340>
   15928:	ldrd	r0, [r6, #136]	; 0x88
   1592c:	mov	r5, #4
   15930:	adds	r0, r0, #1
   15934:	adc	r1, r1, #0
   15938:	strd	r0, [r6, #136]	; 0x88
   1593c:	ldrd	r0, [r6, #224]	; 0xe0
   15940:	adds	r0, r0, #1
   15944:	adc	r1, r1, #0
   15948:	strd	r0, [r6, #224]	; 0xe0
   1594c:	mov	r0, r5
   15950:	pop	{r4, r5, r6, sl, fp, pc}
   15954:	movw	r0, #49360	; 0xc0d0
   15958:	movw	r1, #43996	; 0xabdc
   1595c:	movt	r0, #2
   15960:	movt	r1, #1
   15964:	bl	1598c <get_boolean_op_value@@Base+0x390>
   15968:	movw	r0, #49392	; 0xc0f0
   1596c:	movw	r1, #43810	; 0xab22
   15970:	mov	r2, r4
   15974:	movt	r0, #2
   15978:	movt	r1, #1
   1597c:	ldr	r0, [r0]
   15980:	bl	11f60 <fprintf@plt>
   15984:	mov	r0, #1
   15988:	bl	11f3c <exit@plt>
   1598c:	ldr	r0, [r0]
   15990:	cmn	r0, #1
   15994:	ldrne	r0, [r1, r0, lsl #2]
   15998:	cmpne	r0, #0
   1599c:	bne	159a4 <get_boolean_op_value@@Base+0x3a8>
   159a0:	bx	lr
   159a4:	ldrd	r2, [r0]
   159a8:	adds	r2, r2, #1
   159ac:	adc	r3, r3, #0
   159b0:	strd	r2, [r0]
   159b4:	bx	lr
   159b8:	push	{r4, r5, r6, lr}
   159bc:	sub	sp, sp, #8
   159c0:	movw	r0, #44464	; 0xadb0
   159c4:	movw	r1, #41114	; 0xa09a
   159c8:	movw	r2, #23410	; 0x5b72
   159cc:	movt	r0, #1
   159d0:	movt	r1, #1
   159d4:	movt	r2, #13184	; 0x3380
   159d8:	bl	16c94 <read_boolean_unary_expression@@Base+0x3dc>
   159dc:	movw	r0, #44336	; 0xad30
   159e0:	movw	r6, #44016	; 0xabf0
   159e4:	mov	r5, #0
   159e8:	movt	r0, #1
   159ec:	movt	r6, #1
   159f0:	add	r4, r0, #4
   159f4:	mov	r3, r6
   159f8:	ldr	r0, [r3, r5]!
   159fc:	ldr	r1, [r3, #16]
   15a00:	str	r1, [sp]
   15a04:	ldmib	r3, {r1, r2}
   15a08:	ldrb	r3, [r3, #12]
   15a0c:	bl	173f8 <read_boolean_unary_expression@@Base+0xb40>
   15a10:	ldrd	r0, [r4, #-4]
   15a14:	bl	17cac <read_boolean_unary_expression@@Base+0x13f4>
   15a18:	add	r5, r5, #20
   15a1c:	add	r4, r4, #8
   15a20:	cmp	r5, #320	; 0x140
   15a24:	bne	159f4 <get_boolean_op_value@@Base+0x3f8>
   15a28:	bl	18428 <read_boolean_unary_expression@@Base+0x1b70>
   15a2c:	add	sp, sp, #8
   15a30:	pop	{r4, r5, r6, lr}
   15a34:	b	19194 <read_boolean_unary_expression@@Base+0x28dc>
   15a38:	push	{fp, lr}
   15a3c:	bl	159b8 <get_boolean_op_value@@Base+0x3bc>
   15a40:	movw	r2, #51264	; 0xc840
   15a44:	movw	r3, #51136	; 0xc7c0
   15a48:	vmov.i32	q8, #0	; 0x00000000
   15a4c:	mov	r0, #0
   15a50:	movt	r2, #2
   15a54:	movt	r3, #2
   15a58:	add	r1, r2, #16
   15a5c:	str	r0, [r2, #32]
   15a60:	str	r0, [r3, #112]	; 0x70
   15a64:	vst1.64	{d16-d17}, [r1 :128]
   15a68:	add	r1, r3, #96	; 0x60
   15a6c:	vst1.64	{d16-d17}, [r1 :128]
   15a70:	add	r1, r3, #80	; 0x50
   15a74:	vst1.64	{d16-d17}, [r1 :128]
   15a78:	add	r1, r3, #64	; 0x40
   15a7c:	vst1.64	{d16-d17}, [r1 :128]
   15a80:	add	r1, r3, #48	; 0x30
   15a84:	vst1.64	{d16-d17}, [r1 :128]
   15a88:	add	r1, r3, #32
   15a8c:	vst1.64	{d16-d17}, [r1 :128]
   15a90:	add	r1, r3, #16
   15a94:	vst1.64	{d16-d17}, [r1 :128]
   15a98:	movw	r1, #51024	; 0xc750
   15a9c:	movt	r1, #2
   15aa0:	vst1.64	{d16-d17}, [r1 :128]
   15aa4:	movw	r1, #51008	; 0xc740
   15aa8:	movt	r1, #2
   15aac:	vst1.64	{d16-d17}, [r1 :128]
   15ab0:	movw	r1, #51040	; 0xc760
   15ab4:	movt	r1, #2
   15ab8:	vst1.64	{d16-d17}, [r1 :128]
   15abc:	movw	r1, #51056	; 0xc770
   15ac0:	movt	r1, #2
   15ac4:	vst1.64	{d16-d17}, [r1 :128]
   15ac8:	movw	r1, #51072	; 0xc780
   15acc:	movt	r1, #2
   15ad0:	vst1.64	{d16-d17}, [r1 :128]
   15ad4:	movw	r1, #51088	; 0xc790
   15ad8:	movt	r1, #2
   15adc:	vst1.64	{d16-d17}, [r1 :128]
   15ae0:	movw	r1, #51104	; 0xc7a0
   15ae4:	movt	r1, #2
   15ae8:	vst1.64	{d16-d17}, [r1 :128]
   15aec:	movw	r1, #51120	; 0xc7b0
   15af0:	movt	r1, #2
   15af4:	vst1.64	{d16-d17}, [r1 :128]
   15af8:	mov	r1, #36	; 0x24
   15afc:	vst1.64	{d16-d17}, [r2 :128], r1
   15b00:	str	r0, [r2]
   15b04:	mov	r2, #116	; 0x74
   15b08:	vst1.64	{d16-d17}, [r3 :128], r2
   15b0c:	movw	r2, #51312	; 0xc870
   15b10:	movt	r2, #2
   15b14:	str	r0, [r3]
   15b18:	add	r3, r2, #16
   15b1c:	str	r0, [r2, #32]
   15b20:	vst1.64	{d16-d17}, [r2 :128], r1
   15b24:	str	r0, [r2]
   15b28:	movw	r2, #51360	; 0xc8a0
   15b2c:	vst1.64	{d16-d17}, [r3 :128]
   15b30:	movt	r2, #2
   15b34:	add	r3, r2, #16
   15b38:	str	r0, [r2, #32]
   15b3c:	vst1.64	{d16-d17}, [r2 :128], r1
   15b40:	str	r0, [r2]
   15b44:	movw	r2, #51408	; 0xc8d0
   15b48:	vst1.64	{d16-d17}, [r3 :128]
   15b4c:	movt	r2, #2
   15b50:	add	r3, r2, #16
   15b54:	str	r0, [r2, #32]
   15b58:	vst1.64	{d16-d17}, [r2 :128], r1
   15b5c:	str	r0, [r2]
   15b60:	movw	r2, #51456	; 0xc900
   15b64:	vst1.64	{d16-d17}, [r3 :128]
   15b68:	movt	r2, #2
   15b6c:	add	r3, r2, #16
   15b70:	str	r0, [r2, #32]
   15b74:	vst1.64	{d16-d17}, [r2 :128], r1
   15b78:	str	r0, [r2]
   15b7c:	movw	r2, #51504	; 0xc930
   15b80:	vst1.64	{d16-d17}, [r3 :128]
   15b84:	movt	r2, #2
   15b88:	add	r3, r2, #16
   15b8c:	str	r0, [r2, #32]
   15b90:	vst1.64	{d16-d17}, [r2 :128], r1
   15b94:	mov	r1, #0
   15b98:	str	r0, [r2]
   15b9c:	movw	r0, #51552	; 0xc960
   15ba0:	mov	r2, #232	; 0xe8
   15ba4:	vst1.64	{d16-d17}, [r3 :128]
   15ba8:	movt	r0, #2
   15bac:	bl	11f90 <memset@plt>
   15bb0:	pop	{fp, pc}
   15bb4:	movw	r0, #22968	; 0x59b8
   15bb8:	movw	r1, #23096	; 0x5a38
   15bbc:	movt	r0, #1
   15bc0:	movt	r1, #1
   15bc4:	b	19644 <__gcov_flush@@Base+0xb4>

00015bc8 <init_grammar@@Base>:
   15bc8:	movw	r2, #51792	; 0xca50
   15bcc:	add	r3, pc, #28
   15bd0:	movt	r2, #2
   15bd4:	vld1.64	{d16-d17}, [r3]
   15bd8:	vld1.64	{d18-d19}, [r2 :128]
   15bdc:	vadd.i64	q8, q9, q8
   15be0:	vst1.64	{d16-d17}, [r2 :128]
   15be4:	str	r1, [r0]
   15be8:	bx	lr
   15bec:	nop	{0}
   15bf0:	andeq	r0, r0, r1
   15bf4:	andeq	r0, r0, r0
   15bf8:	andeq	r0, r0, r1
   15bfc:	andeq	r0, r0, r0

00015c00 <destroy_grammar@@Base>:
   15c00:	movw	r0, #51808	; 0xca60
   15c04:	add	r1, pc, #20
   15c08:	movt	r0, #2
   15c0c:	vld1.64	{d16-d17}, [r1]
   15c10:	vld1.64	{d18-d19}, [r0 :128]
   15c14:	vadd.i64	q8, q9, q8
   15c18:	vst1.64	{d16-d17}, [r0 :128]
   15c1c:	bx	lr
   15c20:	andeq	r0, r0, r1
   15c24:	andeq	r0, r0, r0
   15c28:	andeq	r0, r0, r1
   15c2c:	andeq	r0, r0, r0

00015c30 <build_ast@@Base>:
   15c30:	movw	r1, #51824	; 0xca70
   15c34:	add	r2, pc, #20
   15c38:	movt	r1, #2
   15c3c:	vld1.64	{d16-d17}, [r2]
   15c40:	vld1.64	{d18-d19}, [r1 :128]
   15c44:	vadd.i64	q8, q9, q8
   15c48:	vst1.64	{d16-d17}, [r1 :128]
   15c4c:	b	15c60 <read_function_ast_node@@Base>
   15c50:	andeq	r0, r0, r1
   15c54:	andeq	r0, r0, r0
   15c58:	andeq	r0, r0, r1
   15c5c:	andeq	r0, r0, r0

00015c60 <read_function_ast_node@@Base>:
   15c60:	push	{r4, r5, r6, r7, fp, lr}
   15c64:	add	fp, sp, #16
   15c68:	movw	r7, #51840	; 0xca80
   15c6c:	mov	r4, r0
   15c70:	movt	r7, #2
   15c74:	ldrd	r0, [r7]
   15c78:	adds	r0, r0, #1
   15c7c:	adc	r1, r1, #0
   15c80:	strd	r0, [r7]
   15c84:	ldr	r0, [r4]
   15c88:	bl	12120 <next@@Base>
   15c8c:	ldr	r1, [r0]
   15c90:	mov	r2, #16
   15c94:	mov	r3, r7
   15c98:	cmp	r1, #0
   15c9c:	movwne	r2, #8
   15ca0:	ldr	r2, [r3, r2]!
   15ca4:	adds	r2, r2, #1
   15ca8:	str	r2, [r3]
   15cac:	ldr	r2, [r3, #4]
   15cb0:	adc	r2, r2, #0
   15cb4:	cmp	r1, #0
   15cb8:	str	r2, [r3, #4]
   15cbc:	beq	15cd8 <read_function_ast_node@@Base+0x78>
   15cc0:	ldrd	r0, [r7, #24]
   15cc4:	mov	r4, #0
   15cc8:	adds	r0, r0, #1
   15ccc:	adc	r1, r1, #0
   15cd0:	strd	r0, [r7, #24]
   15cd4:	b	15e20 <read_function_ast_node@@Base+0x1c0>
   15cd8:	bl	148c8 <free_token_int_type@@Base>
   15cdc:	ldr	r0, [r4]
   15ce0:	bl	12120 <next@@Base>
   15ce4:	mov	r5, r0
   15ce8:	ldr	r0, [r0]
   15cec:	mov	r1, #40	; 0x28
   15cf0:	mov	r2, r7
   15cf4:	cmp	r0, #2
   15cf8:	movwne	r1, #32
   15cfc:	ldr	r1, [r2, r1]!
   15d00:	adds	r1, r1, #1
   15d04:	str	r1, [r2]
   15d08:	ldr	r1, [r2, #4]
   15d0c:	adc	r1, r1, #0
   15d10:	cmp	r0, #2
   15d14:	str	r1, [r2, #4]
   15d18:	beq	15d34 <read_function_ast_node@@Base+0xd4>
   15d1c:	ldrd	r0, [r7, #48]	; 0x30
   15d20:	mov	r4, #0
   15d24:	adds	r0, r0, #1
   15d28:	adc	r1, r1, #0
   15d2c:	strd	r0, [r7, #48]	; 0x30
   15d30:	b	15e20 <read_function_ast_node@@Base+0x1c0>
   15d34:	ldr	r0, [r4]
   15d38:	bl	12120 <next@@Base>
   15d3c:	ldr	r1, [r0]
   15d40:	mov	r2, #64	; 0x40
   15d44:	mov	r3, r7
   15d48:	cmp	r1, #3
   15d4c:	movwne	r2, #56	; 0x38
   15d50:	ldr	r2, [r3, r2]!
   15d54:	adds	r2, r2, #1
   15d58:	str	r2, [r3]
   15d5c:	ldr	r2, [r3, #4]
   15d60:	adc	r2, r2, #0
   15d64:	cmp	r1, #3
   15d68:	str	r2, [r3, #4]
   15d6c:	beq	15d88 <read_function_ast_node@@Base+0x128>
   15d70:	ldrd	r0, [r7, #72]	; 0x48
   15d74:	mov	r4, #0
   15d78:	adds	r0, r0, #1
   15d7c:	adc	r1, r1, #0
   15d80:	strd	r0, [r7, #72]	; 0x48
   15d84:	b	15e20 <read_function_ast_node@@Base+0x1c0>
   15d88:	bl	14958 <free_token_opar@@Base>
   15d8c:	ldr	r0, [r4]
   15d90:	bl	12120 <next@@Base>
   15d94:	ldr	r1, [r0]
   15d98:	mov	r2, #88	; 0x58
   15d9c:	mov	r3, r7
   15da0:	cmp	r1, #4
   15da4:	movwne	r2, #80	; 0x50
   15da8:	ldr	r2, [r3, r2]!
   15dac:	adds	r2, r2, #1
   15db0:	str	r2, [r3]
   15db4:	ldr	r2, [r3, #4]
   15db8:	adc	r2, r2, #0
   15dbc:	cmp	r1, #4
   15dc0:	str	r2, [r3, #4]
   15dc4:	beq	15de0 <read_function_ast_node@@Base+0x180>
   15dc8:	ldrd	r0, [r7, #96]	; 0x60
   15dcc:	mov	r4, #0
   15dd0:	adds	r0, r0, #1
   15dd4:	adc	r1, r1, #0
   15dd8:	strd	r0, [r7, #96]	; 0x60
   15ddc:	b	15e20 <read_function_ast_node@@Base+0x1c0>
   15de0:	ldrd	r2, [r7, #104]	; 0x68
   15de4:	adds	r2, r2, #1
   15de8:	adc	r3, r3, #0
   15dec:	strd	r2, [r7, #104]	; 0x68
   15df0:	bl	14988 <free_token_cpar@@Base>
   15df4:	mov	r0, r4
   15df8:	bl	15e38 <read_body@@Base>
   15dfc:	mov	r6, r0
   15e00:	mov	r0, #16
   15e04:	bl	11f00 <malloc@plt>
   15e08:	ldr	r1, [r5, #4]
   15e0c:	mov	r2, r6
   15e10:	mov	r4, r0
   15e14:	bl	14ee8 <init_node_function@@Base>
   15e18:	mov	r0, r5
   15e1c:	bl	14928 <free_token_function@@Base>
   15e20:	ldrd	r0, [r7, #112]	; 0x70
   15e24:	adds	r0, r0, #1
   15e28:	adc	r1, r1, #0
   15e2c:	strd	r0, [r7, #112]	; 0x70
   15e30:	mov	r0, r4
   15e34:	pop	{r4, r5, r6, r7, fp, pc}

00015e38 <read_body@@Base>:
   15e38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e3c:	add	fp, sp, #28
   15e40:	sub	sp, sp, #4
   15e44:	movw	r4, #51968	; 0xcb00
   15e48:	mov	sl, r0
   15e4c:	movt	r4, #2
   15e50:	ldrd	r0, [r4]
   15e54:	adds	r0, r0, #1
   15e58:	adc	r1, r1, #0
   15e5c:	strd	r0, [r4]
   15e60:	ldr	r0, [sl]
   15e64:	bl	12120 <next@@Base>
   15e68:	ldr	r1, [r0]
   15e6c:	mov	r2, #16
   15e70:	mov	r3, r4
   15e74:	cmp	r1, #5
   15e78:	movwne	r2, #8
   15e7c:	ldr	r2, [r3, r2]!
   15e80:	adds	r2, r2, #1
   15e84:	str	r2, [r3]
   15e88:	ldr	r2, [r3, #4]
   15e8c:	adc	r2, r2, #0
   15e90:	cmp	r1, #5
   15e94:	str	r2, [r3, #4]
   15e98:	beq	15eb4 <read_body@@Base+0x7c>
   15e9c:	ldrd	r0, [r4, #24]
   15ea0:	mov	r6, #0
   15ea4:	adds	r0, r0, #1
   15ea8:	adc	r1, r1, #0
   15eac:	strd	r0, [r4, #24]
   15eb0:	b	160a8 <read_body@@Base+0x270>
   15eb4:	ldrd	r2, [r4, #32]
   15eb8:	adds	r2, r2, #1
   15ebc:	adc	r3, r3, #0
   15ec0:	strd	r2, [r4, #32]
   15ec4:	bl	149b8 <free_token_obra@@Base>
   15ec8:	ldr	r0, [sl]
   15ecc:	bl	12120 <next@@Base>
   15ed0:	mov	r7, r0
   15ed4:	ldr	r0, [r0]
   15ed8:	mov	r1, #48	; 0x30
   15edc:	mov	r2, r4
   15ee0:	mov	r6, #0
   15ee4:	cmp	r0, #6
   15ee8:	movwne	r1, #40	; 0x28
   15eec:	ldr	r1, [r2, r1]!
   15ef0:	adds	r1, r1, #1
   15ef4:	str	r1, [r2]
   15ef8:	ldr	r1, [r2, #4]
   15efc:	adc	r1, r1, #0
   15f00:	cmp	r0, #6
   15f04:	str	r1, [r2, #4]
   15f08:	beq	1605c <read_body@@Base+0x224>
   15f0c:	movw	r1, #44944	; 0xaf90
   15f10:	movw	r9, #49364	; 0xc0d4
   15f14:	mov	r8, #0
   15f18:	mov	r6, #0
   15f1c:	movt	r1, #1
   15f20:	movt	r9, #2
   15f24:	add	r1, r1, #8
   15f28:	str	r1, [sp]
   15f2c:	mov	r1, #0
   15f30:	cmp	r0, #10
   15f34:	str	r1, [r9]
   15f38:	beq	15f7c <read_body@@Base+0x144>
   15f3c:	cmp	r0, #7
   15f40:	bne	16078 <read_body@@Base+0x240>
   15f44:	movw	r0, #44944	; 0xaf90
   15f48:	movt	r0, #1
   15f4c:	add	r1, r0, #4
   15f50:	mov	r0, r9
   15f54:	bl	16a08 <read_boolean_unary_expression@@Base+0x150>
   15f58:	ldrd	r0, [r4, #80]	; 0x50
   15f5c:	adds	r0, r0, #1
   15f60:	adc	r1, r1, #0
   15f64:	strd	r0, [r4, #80]	; 0x50
   15f68:	mov	r0, r7
   15f6c:	bl	14a18 <free_token_return@@Base>
   15f70:	mov	r0, sl
   15f74:	bl	160c4 <read_return_expression@@Base>
   15f78:	b	15fa8 <read_body@@Base+0x170>
   15f7c:	ldr	r1, [sp]
   15f80:	mov	r0, r9
   15f84:	bl	16a08 <read_boolean_unary_expression@@Base+0x150>
   15f88:	ldrd	r0, [r4, #88]	; 0x58
   15f8c:	adds	r0, r0, #1
   15f90:	adc	r1, r1, #0
   15f94:	strd	r0, [r4, #88]	; 0x58
   15f98:	mov	r0, r7
   15f9c:	bl	14aa8 <free_token_if@@Base>
   15fa0:	mov	r0, sl
   15fa4:	bl	161f0 <read_if_statement@@Base>
   15fa8:	mov	r5, r0
   15fac:	cmp	r6, #0
   15fb0:	mov	r0, #112	; 0x70
   15fb4:	mov	r1, r4
   15fb8:	movwne	r0, #104	; 0x68
   15fbc:	ldr	r0, [r1, r0]!
   15fc0:	adds	r0, r0, #1
   15fc4:	str	r0, [r1]
   15fc8:	ldr	r0, [r1, #4]
   15fcc:	adc	r0, r0, #0
   15fd0:	cmp	r6, #0
   15fd4:	str	r0, [r1, #4]
   15fd8:	beq	15ff4 <read_body@@Base+0x1bc>
   15fdc:	ldrd	r0, [r4, #120]	; 0x78
   15fe0:	adds	r0, r0, #1
   15fe4:	adc	r1, r1, #0
   15fe8:	strd	r0, [r4, #120]	; 0x78
   15fec:	str	r5, [r8, #4]
   15ff0:	b	16008 <read_body@@Base+0x1d0>
   15ff4:	ldrd	r0, [r4, #128]	; 0x80
   15ff8:	mov	r6, r5
   15ffc:	adds	r0, r0, #1
   16000:	adc	r1, r1, #0
   16004:	strd	r0, [r4, #128]	; 0x80
   16008:	ldrd	r0, [r4, #136]	; 0x88
   1600c:	adds	r0, r0, #1
   16010:	adc	r1, r1, #0
   16014:	strd	r0, [r4, #136]	; 0x88
   16018:	ldr	r0, [sl]
   1601c:	bl	12120 <next@@Base>
   16020:	mov	r7, r0
   16024:	ldr	r0, [r0]
   16028:	mov	r1, #48	; 0x30
   1602c:	mov	r2, r4
   16030:	mov	r8, r5
   16034:	cmp	r0, #6
   16038:	movwne	r1, #40	; 0x28
   1603c:	ldr	r1, [r2, r1]!
   16040:	adds	r1, r1, #1
   16044:	str	r1, [r2]
   16048:	ldr	r1, [r2, #4]
   1604c:	adc	r1, r1, #0
   16050:	cmp	r0, #6
   16054:	str	r1, [r2, #4]
   16058:	bne	15f2c <read_body@@Base+0xf4>
   1605c:	ldrd	r0, [r4, #144]	; 0x90
   16060:	adds	r0, r0, #1
   16064:	adc	r1, r1, #0
   16068:	strd	r0, [r4, #144]	; 0x90
   1606c:	mov	r0, r7
   16070:	bl	149e8 <free_token_cbra@@Base>
   16074:	b	160a8 <read_body@@Base+0x270>
   16078:	movw	r0, #49364	; 0xc0d4
   1607c:	movw	r1, #44944	; 0xaf90
   16080:	movt	r0, #2
   16084:	movt	r1, #1
   16088:	bl	16a08 <read_boolean_unary_expression@@Base+0x150>
   1608c:	ldrd	r0, [r4, #96]	; 0x60
   16090:	adds	r0, r0, #1
   16094:	adc	r1, r1, #0
   16098:	strd	r0, [r4, #96]	; 0x60
   1609c:	mov	r1, r7
   160a0:	ldr	r0, [sl]
   160a4:	bl	123a8 <push_back@@Base>
   160a8:	ldrd	r0, [r4, #152]	; 0x98
   160ac:	adds	r0, r0, #1
   160b0:	adc	r1, r1, #0
   160b4:	strd	r0, [r4, #152]	; 0x98
   160b8:	mov	r0, r6
   160bc:	sub	sp, fp, #28
   160c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000160c4 <read_return_expression@@Base>:
   160c4:	push	{r4, r5, r6, r7, fp, lr}
   160c8:	add	fp, sp, #16
   160cc:	movw	r7, #52128	; 0xcba0
   160d0:	mov	r4, r0
   160d4:	movt	r7, #2
   160d8:	ldrd	r0, [r7]
   160dc:	adds	r0, r0, #1
   160e0:	adc	r1, r1, #0
   160e4:	strd	r0, [r7]
   160e8:	ldr	r0, [r4]
   160ec:	bl	12120 <next@@Base>
   160f0:	mov	r5, r0
   160f4:	ldr	r0, [r0]
   160f8:	mov	r1, #16
   160fc:	mov	r2, r7
   16100:	cmp	r0, #1
   16104:	movwne	r1, #8
   16108:	ldr	r1, [r2, r1]!
   1610c:	adds	r1, r1, #1
   16110:	str	r1, [r2]
   16114:	ldr	r1, [r2, #4]
   16118:	adc	r1, r1, #0
   1611c:	cmp	r0, #1
   16120:	str	r1, [r2, #4]
   16124:	beq	16140 <read_return_expression@@Base+0x7c>
   16128:	ldrd	r0, [r7, #24]
   1612c:	mov	r5, #0
   16130:	adds	r0, r0, #1
   16134:	adc	r1, r1, #0
   16138:	strd	r0, [r7, #24]
   1613c:	b	161d8 <read_return_expression@@Base+0x114>
   16140:	mov	r0, #12
   16144:	bl	11f00 <malloc@plt>
   16148:	ldr	r1, [r5, #4]
   1614c:	mov	r6, r0
   16150:	bl	14e78 <init_node_int@@Base>
   16154:	mov	r0, r5
   16158:	bl	148f8 <free_token_int_value@@Base>
   1615c:	mov	r0, #12
   16160:	bl	11f00 <malloc@plt>
   16164:	mov	r1, r6
   16168:	mov	r5, r0
   1616c:	bl	14f60 <init_node_return@@Base>
   16170:	ldr	r0, [r4]
   16174:	bl	12120 <next@@Base>
   16178:	ldr	r1, [r0]
   1617c:	mov	r2, #40	; 0x28
   16180:	mov	r3, r7
   16184:	cmp	r1, #8
   16188:	movwne	r2, #32
   1618c:	ldr	r2, [r3, r2]!
   16190:	adds	r2, r2, #1
   16194:	str	r2, [r3]
   16198:	ldr	r2, [r3, #4]
   1619c:	adc	r2, r2, #0
   161a0:	cmp	r1, #8
   161a4:	str	r2, [r3, #4]
   161a8:	beq	161c4 <read_return_expression@@Base+0x100>
   161ac:	ldrd	r0, [r7, #48]	; 0x30
   161b0:	mov	r5, #0
   161b4:	adds	r0, r0, #1
   161b8:	adc	r1, r1, #0
   161bc:	strd	r0, [r7, #48]	; 0x30
   161c0:	b	161d8 <read_return_expression@@Base+0x114>
   161c4:	ldrd	r2, [r7, #56]	; 0x38
   161c8:	adds	r2, r2, #1
   161cc:	adc	r3, r3, #0
   161d0:	strd	r2, [r7, #56]	; 0x38
   161d4:	bl	14a48 <free_token_semicolon@@Base>
   161d8:	ldrd	r0, [r7, #64]	; 0x40
   161dc:	adds	r0, r0, #1
   161e0:	adc	r1, r1, #0
   161e4:	strd	r0, [r7, #64]	; 0x40
   161e8:	mov	r0, r5
   161ec:	pop	{r4, r5, r6, r7, fp, pc}

000161f0 <read_if_statement@@Base>:
   161f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   161f4:	add	fp, sp, #24
   161f8:	movw	r5, #52208	; 0xcbf0
   161fc:	mov	r4, r0
   16200:	movt	r5, #2
   16204:	ldrd	r0, [r5]
   16208:	adds	r0, r0, #1
   1620c:	adc	r1, r1, #0
   16210:	strd	r0, [r5]
   16214:	ldr	r0, [r4]
   16218:	bl	12120 <next@@Base>
   1621c:	ldr	r1, [r0]
   16220:	mov	r2, #16
   16224:	mov	r3, r5
   16228:	cmp	r1, #3
   1622c:	movwne	r2, #8
   16230:	ldr	r2, [r3, r2]!
   16234:	adds	r2, r2, #1
   16238:	str	r2, [r3]
   1623c:	ldr	r2, [r3, #4]
   16240:	adc	r2, r2, #0
   16244:	cmp	r1, #3
   16248:	str	r2, [r3, #4]
   1624c:	beq	16268 <read_if_statement@@Base+0x78>
   16250:	ldrd	r0, [r5, #24]
   16254:	mov	r7, #0
   16258:	adds	r0, r0, #1
   1625c:	adc	r1, r1, #0
   16260:	strd	r0, [r5, #24]
   16264:	b	16344 <read_if_statement@@Base+0x154>
   16268:	bl	14958 <free_token_opar@@Base>
   1626c:	mov	r0, r4
   16270:	bl	16360 <read_boolean_expression@@Base>
   16274:	mov	r8, r0
   16278:	mov	r0, r4
   1627c:	bl	15e38 <read_body@@Base>
   16280:	mov	r6, r0
   16284:	ldr	r0, [r4]
   16288:	bl	12120 <next@@Base>
   1628c:	mov	r1, r0
   16290:	ldr	r0, [r0]
   16294:	mov	r2, #40	; 0x28
   16298:	mov	r3, r5
   1629c:	cmp	r0, #11
   162a0:	movweq	r2, #32
   162a4:	ldr	r2, [r3, r2]!
   162a8:	adds	r2, r2, #1
   162ac:	str	r2, [r3]
   162b0:	ldr	r2, [r3, #4]
   162b4:	adc	r2, r2, #0
   162b8:	cmp	r0, #11
   162bc:	str	r2, [r3, #4]
   162c0:	bne	162f4 <read_if_statement@@Base+0x104>
   162c4:	ldr	r0, [r5, #48]	; 0x30
   162c8:	ldr	r3, [r5, #52]	; 0x34
   162cc:	adds	r0, r0, #1
   162d0:	str	r0, [r5, #48]	; 0x30
   162d4:	adc	r3, r3, #0
   162d8:	mov	r0, r1
   162dc:	str	r3, [r5, #52]	; 0x34
   162e0:	bl	14ad8 <free_token_else@@Base>
   162e4:	mov	r0, r4
   162e8:	bl	15e38 <read_body@@Base>
   162ec:	mov	r4, r0
   162f0:	b	16318 <read_if_statement@@Base+0x128>
   162f4:	ldr	r0, [r5, #56]	; 0x38
   162f8:	ldr	r3, [r5, #60]	; 0x3c
   162fc:	adds	r0, r0, #1
   16300:	adc	r3, r3, #0
   16304:	str	r0, [r5, #56]	; 0x38
   16308:	str	r3, [r5, #60]	; 0x3c
   1630c:	ldr	r0, [r4]
   16310:	bl	123a8 <push_back@@Base>
   16314:	mov	r4, #0
   16318:	ldrd	r0, [r5, #64]	; 0x40
   1631c:	adds	r0, r0, #1
   16320:	adc	r1, r1, #0
   16324:	strd	r0, [r5, #64]	; 0x40
   16328:	mov	r0, #20
   1632c:	bl	11f00 <malloc@plt>
   16330:	mov	r1, r8
   16334:	mov	r2, r6
   16338:	mov	r3, r4
   1633c:	mov	r7, r0
   16340:	bl	14fd0 <init_node_if@@Base>
   16344:	ldrd	r0, [r5, #72]	; 0x48
   16348:	adds	r0, r0, #1
   1634c:	adc	r1, r1, #0
   16350:	strd	r0, [r5, #72]	; 0x48
   16354:	mov	r0, r7
   16358:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1635c:	nop	{0}

00016360 <read_boolean_expression@@Base>:
   16360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16364:	add	fp, sp, #28
   16368:	sub	sp, sp, #12
   1636c:	movw	r8, #52288	; 0xcc40
   16370:	mov	r4, r0
   16374:	add	r0, pc, #492	; 0x1ec
   16378:	mov	r5, #0
   1637c:	movt	r8, #2
   16380:	vld1.64	{d16-d17}, [r0]
   16384:	str	r5, [sp, #8]
   16388:	vld1.64	{d18-d19}, [r8 :128]
   1638c:	vadd.i64	q8, q9, q8
   16390:	vst1.64	{d16-d17}, [r8 :128]
   16394:	ldr	r0, [r4]
   16398:	bl	12120 <next@@Base>
   1639c:	mov	r6, r0
   163a0:	ldr	r0, [r0]
   163a4:	mov	r1, #24
   163a8:	mov	r2, r8
   163ac:	cmp	r0, #4
   163b0:	movwne	r1, #16
   163b4:	ldr	r1, [r2, r1]!
   163b8:	adds	r1, r1, #1
   163bc:	str	r1, [r2]
   163c0:	ldr	r1, [r2, #4]
   163c4:	adc	r1, r1, #0
   163c8:	cmp	r0, #4
   163cc:	str	r1, [r2, #4]
   163d0:	beq	16504 <read_boolean_expression@@Base+0x1a4>
   163d4:	movw	r1, #44956	; 0xaf9c
   163d8:	movw	sl, #49368	; 0xc0d8
   163dc:	mov	r9, #0
   163e0:	mov	r5, #0
   163e4:	movt	r1, #1
   163e8:	movt	sl, #2
   163ec:	add	r1, r1, #8
   163f0:	str	r1, [sp, #4]
   163f4:	cmp	r0, #12
   163f8:	str	r9, [sl]
   163fc:	beq	16484 <read_boolean_expression@@Base+0x124>
   16400:	cmp	r0, #3
   16404:	beq	16444 <read_boolean_expression@@Base+0xe4>
   16408:	cmp	r0, #1
   1640c:	bne	16528 <read_boolean_expression@@Base+0x1c8>
   16410:	movw	r0, #44956	; 0xaf9c
   16414:	movt	r0, #1
   16418:	add	r1, r0, #4
   1641c:	mov	r0, sl
   16420:	bl	16a08 <read_boolean_unary_expression@@Base+0x150>
   16424:	ldrd	r0, [r8, #64]	; 0x40
   16428:	adds	r0, r0, #1
   1642c:	adc	r1, r1, #0
   16430:	strd	r0, [r8, #64]	; 0x40
   16434:	mov	r1, r6
   16438:	ldr	r0, [r4]
   1643c:	bl	123a8 <push_back@@Base>
   16440:	b	16468 <read_boolean_expression@@Base+0x108>
   16444:	movw	r0, #44956	; 0xaf9c
   16448:	movt	r0, #1
   1644c:	add	r1, r0, #12
   16450:	mov	r0, sl
   16454:	bl	16a08 <read_boolean_unary_expression@@Base+0x150>
   16458:	ldrd	r0, [r8, #80]	; 0x50
   1645c:	adds	r0, r0, #1
   16460:	adc	r1, r1, #0
   16464:	strd	r0, [r8, #80]	; 0x50
   16468:	mov	r0, r4
   1646c:	mov	r1, r5
   16470:	add	r2, sp, #8
   16474:	mov	r3, r7
   16478:	bl	16578 <read_single_boolean_expression@@Base>
   1647c:	mov	r5, r0
   16480:	b	164b4 <read_boolean_expression@@Base+0x154>
   16484:	ldr	r1, [sp, #4]
   16488:	mov	r0, sl
   1648c:	bl	16a08 <read_boolean_unary_expression@@Base+0x150>
   16490:	ldrd	r0, [r8, #72]	; 0x48
   16494:	adds	r0, r0, #1
   16498:	adc	r1, r1, #0
   1649c:	strd	r0, [r8, #72]	; 0x48
   164a0:	mov	r0, r6
   164a4:	bl	155fc <get_boolean_op_value@@Base>
   164a8:	mov	r7, r0
   164ac:	mov	r0, #1
   164b0:	str	r0, [sp, #8]
   164b4:	ldrd	r0, [r8, #88]	; 0x58
   164b8:	adds	r0, r0, #1
   164bc:	adc	r1, r1, #0
   164c0:	strd	r0, [r8, #88]	; 0x58
   164c4:	ldr	r0, [r4]
   164c8:	bl	12120 <next@@Base>
   164cc:	mov	r6, r0
   164d0:	ldr	r0, [r0]
   164d4:	mov	r1, #24
   164d8:	mov	r2, r8
   164dc:	cmp	r0, #4
   164e0:	movwne	r1, #16
   164e4:	ldr	r1, [r2, r1]!
   164e8:	adds	r1, r1, #1
   164ec:	str	r1, [r2]
   164f0:	ldr	r1, [r2, #4]
   164f4:	adc	r1, r1, #0
   164f8:	cmp	r0, #4
   164fc:	str	r1, [r2, #4]
   16500:	bne	163f4 <read_boolean_expression@@Base+0x94>
   16504:	ldrd	r0, [r8, #96]	; 0x60
   16508:	adds	r0, r0, #1
   1650c:	adc	r1, r1, #0
   16510:	strd	r0, [r8, #96]	; 0x60
   16514:	mov	r0, r6
   16518:	bl	14988 <free_token_cpar@@Base>
   1651c:	mov	r0, r5
   16520:	sub	sp, fp, #28
   16524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16528:	movw	r0, #49368	; 0xc0d8
   1652c:	movw	r1, #44956	; 0xaf9c
   16530:	movt	r0, #2
   16534:	movt	r1, #1
   16538:	bl	16a08 <read_boolean_unary_expression@@Base+0x150>
   1653c:	movw	r0, #49392	; 0xc0f0
   16540:	mov	r1, #33	; 0x21
   16544:	mov	r2, #1
   16548:	movt	r0, #2
   1654c:	ldr	r3, [r0]
   16550:	movw	r0, #44805	; 0xaf05
   16554:	movt	r0, #1
   16558:	bl	11ed0 <fwrite@plt>
   1655c:	mov	r0, #1
   16560:	bl	11f3c <exit@plt>
   16564:	nop	{0}
   16568:	andeq	r0, r0, r1
   1656c:	andeq	r0, r0, r0
   16570:	andeq	r0, r0, r1
   16574:	andeq	r0, r0, r0

00016578 <read_single_boolean_expression@@Base>:
   16578:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1657c:	add	fp, sp, #24
   16580:	movw	r5, #52400	; 0xccb0
   16584:	mov	r8, r3
   16588:	mov	r4, r2
   1658c:	movt	r5, #2
   16590:	ldrd	r2, [r5]
   16594:	adds	r2, r2, #1
   16598:	adc	r3, r3, #0
   1659c:	cmp	r1, #0
   165a0:	strd	r2, [r5]
   165a4:	mov	r2, #16
   165a8:	mov	r3, r5
   165ac:	movweq	r2, #8
   165b0:	ldr	r2, [r3, r2]!
   165b4:	adds	r2, r2, #1
   165b8:	str	r2, [r3]
   165bc:	ldr	r2, [r3, #4]
   165c0:	adc	r2, r2, #0
   165c4:	cmp	r1, #0
   165c8:	str	r2, [r3, #4]
   165cc:	beq	16644 <read_single_boolean_expression@@Base+0xcc>
   165d0:	ldr	r1, [r4]
   165d4:	mov	r2, #40	; 0x28
   165d8:	mov	r3, r5
   165dc:	cmp	r1, #0
   165e0:	movwne	r2, #32
   165e4:	ldr	r2, [r3, r2]!
   165e8:	adds	r2, r2, #1
   165ec:	str	r2, [r3]
   165f0:	ldr	r2, [r3, #4]
   165f4:	adc	r2, r2, #0
   165f8:	cmp	r1, #0
   165fc:	str	r2, [r3, #4]
   16600:	beq	16674 <read_single_boolean_expression@@Base+0xfc>
   16604:	ldrd	r2, [r5, #48]	; 0x30
   16608:	adds	r2, r2, #1
   1660c:	adc	r3, r3, #0
   16610:	strd	r2, [r5, #48]	; 0x30
   16614:	bl	1669c <read_boolean_binary_expression@@Base>
   16618:	mov	r7, r0
   1661c:	mov	r0, #20
   16620:	bl	11f00 <malloc@plt>
   16624:	mov	r1, r8
   16628:	mov	r2, #0
   1662c:	mov	r3, r7
   16630:	mov	r6, r0
   16634:	mov	r9, #0
   16638:	bl	15040 <init_node_boolean_operator@@Base>
   1663c:	str	r9, [r4]
   16640:	b	1665c <read_single_boolean_expression@@Base+0xe4>
   16644:	ldrd	r2, [r5, #24]
   16648:	adds	r2, r2, #1
   1664c:	adc	r3, r3, #0
   16650:	strd	r2, [r5, #24]
   16654:	bl	1669c <read_boolean_binary_expression@@Base>
   16658:	mov	r6, r0
   1665c:	ldrd	r0, [r5, #56]	; 0x38
   16660:	adds	r0, r0, #1
   16664:	adc	r1, r1, #0
   16668:	strd	r0, [r5, #56]	; 0x38
   1666c:	mov	r0, r6
   16670:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16674:	mov	r0, #4
   16678:	movw	r1, #44839	; 0xaf27
   1667c:	ldr	r2, [r0]
   16680:	movw	r0, #49392	; 0xc0f0
   16684:	movt	r1, #1
   16688:	movt	r0, #2
   1668c:	ldr	r0, [r0]
   16690:	bl	11f60 <fprintf@plt>
   16694:	mov	r0, #1
   16698:	bl	11f3c <exit@plt>

0001669c <read_boolean_binary_expression@@Base>:
   1669c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   166a0:	add	fp, sp, #24
   166a4:	movw	r4, #52464	; 0xccf0
   166a8:	mov	r5, r0
   166ac:	movt	r4, #2
   166b0:	ldrd	r0, [r4]
   166b4:	adds	r0, r0, #1
   166b8:	adc	r1, r1, #0
   166bc:	strd	r0, [r4]
   166c0:	ldr	r0, [r5]
   166c4:	bl	12120 <next@@Base>
   166c8:	mov	r6, r0
   166cc:	ldr	r0, [r0]
   166d0:	mov	r1, #16
   166d4:	mov	r2, r4
   166d8:	cmp	r0, #1
   166dc:	movwne	r1, #8
   166e0:	ldr	r1, [r2, r1]!
   166e4:	adds	r1, r1, #1
   166e8:	str	r1, [r2]
   166ec:	ldr	r1, [r2, #4]
   166f0:	adc	r1, r1, #0
   166f4:	cmp	r0, #1
   166f8:	str	r1, [r2, #4]
   166fc:	beq	1675c <read_boolean_binary_expression@@Base+0xc0>
   16700:	mov	r1, #32
   16704:	cmp	r0, #12
   16708:	mov	r2, r4
   1670c:	movweq	r1, #24
   16710:	ldr	r1, [r2, r1]!
   16714:	adds	r1, r1, #1
   16718:	str	r1, [r2]
   1671c:	ldr	r1, [r2, #4]
   16720:	adc	r1, r1, #0
   16724:	cmp	r0, #12
   16728:	str	r1, [r2, #4]
   1672c:	bne	167cc <read_boolean_binary_expression@@Base+0x130>
   16730:	ldrd	r0, [r4, #40]	; 0x28
   16734:	adds	r0, r0, #1
   16738:	adc	r1, r1, #0
   1673c:	strd	r0, [r4, #40]	; 0x28
   16740:	mov	r1, r6
   16744:	ldr	r0, [r5]
   16748:	bl	123a8 <push_back@@Base>
   1674c:	mov	r0, r5
   16750:	bl	168b8 <read_boolean_unary_expression@@Base>
   16754:	mov	r5, r0
   16758:	b	168a0 <read_boolean_binary_expression@@Base+0x204>
   1675c:	mov	r0, #12
   16760:	bl	11f00 <malloc@plt>
   16764:	ldr	r1, [r6, #4]
   16768:	mov	r8, r0
   1676c:	bl	14e78 <init_node_int@@Base>
   16770:	mov	r0, r6
   16774:	bl	148f8 <free_token_int_value@@Base>
   16778:	ldr	r0, [r5]
   1677c:	bl	12120 <next@@Base>
   16780:	mov	r7, r0
   16784:	ldr	r0, [r0]
   16788:	mov	r1, #64	; 0x40
   1678c:	mov	r2, r4
   16790:	cmp	r0, #12
   16794:	movwne	r1, #56	; 0x38
   16798:	ldr	r1, [r2, r1]!
   1679c:	adds	r1, r1, #1
   167a0:	str	r1, [r2]
   167a4:	ldr	r1, [r2, #4]
   167a8:	adc	r1, r1, #0
   167ac:	cmp	r0, #12
   167b0:	str	r1, [r2, #4]
   167b4:	beq	167e4 <read_boolean_binary_expression@@Base+0x148>
   167b8:	ldrd	r0, [r4, #72]	; 0x48
   167bc:	adds	r0, r0, #1
   167c0:	adc	r1, r1, #0
   167c4:	strd	r0, [r4, #72]	; 0x48
   167c8:	b	16848 <read_boolean_binary_expression@@Base+0x1ac>
   167cc:	ldrd	r0, [r4, #48]	; 0x30
   167d0:	mov	r5, #0
   167d4:	adds	r0, r0, #1
   167d8:	adc	r1, r1, #0
   167dc:	strd	r0, [r4, #48]	; 0x30
   167e0:	b	168a0 <read_boolean_binary_expression@@Base+0x204>
   167e4:	mov	r0, r7
   167e8:	bl	155fc <get_boolean_op_value@@Base>
   167ec:	mov	r6, r0
   167f0:	mov	r0, r7
   167f4:	bl	14b08 <free_token_boolean_op@@Base>
   167f8:	ldr	r0, [r5]
   167fc:	bl	12120 <next@@Base>
   16800:	mov	r5, r0
   16804:	ldr	r0, [r0]
   16808:	mov	r1, #88	; 0x58
   1680c:	mov	r2, r4
   16810:	cmp	r0, #1
   16814:	movwne	r1, #80	; 0x50
   16818:	ldr	r1, [r2, r1]!
   1681c:	adds	r1, r1, #1
   16820:	str	r1, [r2]
   16824:	ldr	r1, [r2, #4]
   16828:	adc	r1, r1, #0
   1682c:	cmp	r0, #1
   16830:	str	r1, [r2, #4]
   16834:	beq	16858 <read_boolean_binary_expression@@Base+0x1bc>
   16838:	ldrd	r0, [r4, #96]	; 0x60
   1683c:	adds	r0, r0, #1
   16840:	adc	r1, r1, #0
   16844:	strd	r0, [r4, #96]	; 0x60
   16848:	mov	r0, r8
   1684c:	bl	150b8 <free_node@@Base>
   16850:	mov	r5, #0
   16854:	b	168a0 <read_boolean_binary_expression@@Base+0x204>
   16858:	ldrd	r0, [r4, #104]	; 0x68
   1685c:	adds	r0, r0, #1
   16860:	adc	r1, r1, #0
   16864:	strd	r0, [r4, #104]	; 0x68
   16868:	mov	r0, #12
   1686c:	bl	11f00 <malloc@plt>
   16870:	ldr	r1, [r5, #4]
   16874:	mov	r7, r0
   16878:	bl	14e78 <init_node_int@@Base>
   1687c:	mov	r0, r5
   16880:	bl	148f8 <free_token_int_value@@Base>
   16884:	mov	r0, #20
   16888:	bl	11f00 <malloc@plt>
   1688c:	mov	r1, r6
   16890:	mov	r2, r8
   16894:	mov	r3, r7
   16898:	mov	r5, r0
   1689c:	bl	15040 <init_node_boolean_operator@@Base>
   168a0:	ldrd	r0, [r4, #112]	; 0x70
   168a4:	adds	r0, r0, #1
   168a8:	adc	r1, r1, #0
   168ac:	strd	r0, [r4, #112]	; 0x70
   168b0:	mov	r0, r5
   168b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000168b8 <read_boolean_unary_expression@@Base>:
   168b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   168bc:	add	fp, sp, #24
   168c0:	movw	r5, #52592	; 0xcd70
   168c4:	mov	r6, r0
   168c8:	movt	r5, #2
   168cc:	ldrd	r0, [r5]
   168d0:	adds	r0, r0, #1
   168d4:	adc	r1, r1, #0
   168d8:	strd	r0, [r5]
   168dc:	mov	r0, #20
   168e0:	bl	11f00 <malloc@plt>
   168e4:	mov	r4, r0
   168e8:	ldr	r0, [r6]
   168ec:	bl	12120 <next@@Base>
   168f0:	mov	r7, r0
   168f4:	ldr	r0, [r0]
   168f8:	mov	r1, #16
   168fc:	mov	r2, r5
   16900:	cmp	r0, #12
   16904:	movwne	r1, #8
   16908:	ldr	r1, [r2, r1]!
   1690c:	adds	r1, r1, #1
   16910:	str	r1, [r2]
   16914:	ldr	r1, [r2, #4]
   16918:	adc	r1, r1, #0
   1691c:	cmp	r0, #12
   16920:	str	r1, [r2, #4]
   16924:	beq	1693c <read_boolean_unary_expression@@Base+0x84>
   16928:	ldrd	r0, [r5, #24]
   1692c:	adds	r0, r0, #1
   16930:	adc	r1, r1, #0
   16934:	strd	r0, [r5, #24]
   16938:	b	169a0 <read_boolean_unary_expression@@Base+0xe8>
   1693c:	mov	r0, r7
   16940:	bl	155fc <get_boolean_op_value@@Base>
   16944:	mov	r8, r0
   16948:	mov	r0, r7
   1694c:	bl	14b08 <free_token_boolean_op@@Base>
   16950:	ldr	r0, [r6]
   16954:	bl	12120 <next@@Base>
   16958:	mov	r6, r0
   1695c:	ldr	r0, [r0]
   16960:	mov	r1, #40	; 0x28
   16964:	mov	r2, r5
   16968:	cmp	r0, #1
   1696c:	movwne	r1, #32
   16970:	ldr	r1, [r2, r1]!
   16974:	adds	r1, r1, #1
   16978:	str	r1, [r2]
   1697c:	ldr	r1, [r2, #4]
   16980:	adc	r1, r1, #0
   16984:	cmp	r0, #1
   16988:	str	r1, [r2, #4]
   1698c:	beq	169b0 <read_boolean_unary_expression@@Base+0xf8>
   16990:	ldrd	r0, [r5, #48]	; 0x30
   16994:	adds	r0, r0, #1
   16998:	adc	r1, r1, #0
   1699c:	strd	r0, [r5, #48]	; 0x30
   169a0:	mov	r0, r4
   169a4:	bl	15564 <free_node_boolean_operator@@Base>
   169a8:	mov	r4, #0
   169ac:	b	169f0 <read_boolean_unary_expression@@Base+0x138>
   169b0:	ldrd	r0, [r5, #56]	; 0x38
   169b4:	adds	r0, r0, #1
   169b8:	adc	r1, r1, #0
   169bc:	strd	r0, [r5, #56]	; 0x38
   169c0:	mov	r0, #12
   169c4:	bl	11f00 <malloc@plt>
   169c8:	ldr	r1, [r6, #4]
   169cc:	mov	r7, r0
   169d0:	bl	14e78 <init_node_int@@Base>
   169d4:	mov	r0, r6
   169d8:	bl	148f8 <free_token_int_value@@Base>
   169dc:	mov	r0, r4
   169e0:	mov	r1, r8
   169e4:	mov	r2, r7
   169e8:	mov	r3, #0
   169ec:	bl	15040 <init_node_boolean_operator@@Base>
   169f0:	ldrd	r0, [r5, #64]	; 0x40
   169f4:	adds	r0, r0, #1
   169f8:	adc	r1, r1, #0
   169fc:	strd	r0, [r5, #64]	; 0x40
   16a00:	mov	r0, r4
   16a04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16a08:	ldr	r0, [r0]
   16a0c:	cmn	r0, #1
   16a10:	ldrne	r0, [r1, r0, lsl #2]
   16a14:	cmpne	r0, #0
   16a18:	bne	16a20 <read_boolean_unary_expression@@Base+0x168>
   16a1c:	bx	lr
   16a20:	ldrd	r2, [r0]
   16a24:	adds	r2, r2, #1
   16a28:	adc	r3, r3, #0
   16a2c:	strd	r2, [r0]
   16a30:	bx	lr
   16a34:	push	{r4, r5, r6, lr}
   16a38:	sub	sp, sp, #8
   16a3c:	movw	r0, #45296	; 0xb0f0
   16a40:	movw	r1, #41114	; 0xa09a
   16a44:	movw	r2, #27576	; 0x6bb8
   16a48:	movt	r0, #1
   16a4c:	movt	r1, #1
   16a50:	movt	r2, #51930	; 0xcada
   16a54:	bl	16c94 <read_boolean_unary_expression@@Base+0x3dc>
   16a58:	movw	r0, #45200	; 0xb090
   16a5c:	movw	r6, #44976	; 0xafb0
   16a60:	mov	r5, #0
   16a64:	movt	r0, #1
   16a68:	movt	r6, #1
   16a6c:	add	r4, r0, #4
   16a70:	mov	r3, r6
   16a74:	ldr	r0, [r3, r5]!
   16a78:	ldr	r1, [r3, #16]
   16a7c:	str	r1, [sp]
   16a80:	ldmib	r3, {r1, r2}
   16a84:	ldrb	r3, [r3, #12]
   16a88:	bl	173f8 <read_boolean_unary_expression@@Base+0xb40>
   16a8c:	ldrd	r0, [r4, #-4]
   16a90:	bl	17cac <read_boolean_unary_expression@@Base+0x13f4>
   16a94:	add	r5, r5, #20
   16a98:	add	r4, r4, #8
   16a9c:	cmp	r5, #220	; 0xdc
   16aa0:	bne	16a70 <read_boolean_unary_expression@@Base+0x1b8>
   16aa4:	bl	18428 <read_boolean_unary_expression@@Base+0x1b70>
   16aa8:	add	sp, sp, #8
   16aac:	pop	{r4, r5, r6, lr}
   16ab0:	b	19194 <read_boolean_unary_expression@@Base+0x28dc>
   16ab4:	push	{r4, r5, fp, lr}
   16ab8:	vpush	{d8-d9}
   16abc:	bl	16a34 <read_boolean_unary_expression@@Base+0x17c>
   16ac0:	movw	r0, #51808	; 0xca60
   16ac4:	vmov.i32	q4, #0	; 0x00000000
   16ac8:	mov	r4, #0
   16acc:	mov	r5, #116	; 0x74
   16ad0:	mov	r2, #160	; 0xa0
   16ad4:	movt	r0, #2
   16ad8:	vst1.64	{d8-d9}, [r0 :128]
   16adc:	movw	r0, #51792	; 0xca50
   16ae0:	movt	r0, #2
   16ae4:	vst1.64	{d8-d9}, [r0 :128]
   16ae8:	movw	r0, #51824	; 0xca70
   16aec:	movt	r0, #2
   16af0:	vst1.64	{d8-d9}, [r0 :128]
   16af4:	movw	r0, #51840	; 0xca80
   16af8:	movt	r0, #2
   16afc:	add	r1, r0, #96	; 0x60
   16b00:	str	r4, [r0, #112]	; 0x70
   16b04:	vst1.64	{d8-d9}, [r1 :128]
   16b08:	add	r1, r0, #80	; 0x50
   16b0c:	vst1.64	{d8-d9}, [r1 :128]
   16b10:	add	r1, r0, #64	; 0x40
   16b14:	vst1.64	{d8-d9}, [r1 :128]
   16b18:	add	r1, r0, #48	; 0x30
   16b1c:	vst1.64	{d8-d9}, [r1 :128]
   16b20:	add	r1, r0, #32
   16b24:	vst1.64	{d8-d9}, [r1 :128]
   16b28:	add	r1, r0, #16
   16b2c:	vst1.64	{d8-d9}, [r0 :128], r5
   16b30:	str	r4, [r0]
   16b34:	movw	r0, #51968	; 0xcb00
   16b38:	vst1.64	{d8-d9}, [r1 :128]
   16b3c:	mov	r1, #0
   16b40:	movt	r0, #2
   16b44:	bl	11f90 <memset@plt>
   16b48:	movw	r1, #52288	; 0xcc40
   16b4c:	movt	r1, #2
   16b50:	add	r0, r1, #80	; 0x50
   16b54:	str	r4, [r1, #96]	; 0x60
   16b58:	vst1.64	{d8-d9}, [r0 :128]
   16b5c:	add	r0, r1, #64	; 0x40
   16b60:	vst1.64	{d8-d9}, [r0 :128]
   16b64:	add	r0, r1, #48	; 0x30
   16b68:	vst1.64	{d8-d9}, [r0 :128]
   16b6c:	add	r0, r1, #32
   16b70:	vst1.64	{d8-d9}, [r0 :128]
   16b74:	add	r0, r1, #16
   16b78:	vst1.64	{d8-d9}, [r0 :128]
   16b7c:	movw	r0, #52208	; 0xcbf0
   16b80:	movt	r0, #2
   16b84:	add	r2, r0, #48	; 0x30
   16b88:	vst1.64	{d8-d9}, [r2 :128]
   16b8c:	add	r2, r0, #32
   16b90:	vst1.64	{d8-d9}, [r2 :128]
   16b94:	add	r2, r0, #16
   16b98:	vst1.64	{d8-d9}, [r2 :128]
   16b9c:	movw	r2, #52128	; 0xcba0
   16ba0:	movt	r2, #2
   16ba4:	add	r3, r2, #48	; 0x30
   16ba8:	str	r4, [r2, #64]	; 0x40
   16bac:	vst1.64	{d8-d9}, [r3 :128]
   16bb0:	add	r3, r2, #32
   16bb4:	vst1.64	{d8-d9}, [r3 :128]
   16bb8:	add	r3, r2, #16
   16bbc:	vst1.64	{d8-d9}, [r3 :128]
   16bc0:	mov	r3, #64	; 0x40
   16bc4:	vst1.64	{d8-d9}, [r0 :128], r3
   16bc8:	vst1.64	{d8-d9}, [r0 :128]
   16bcc:	mov	r0, #68	; 0x44
   16bd0:	vst1.64	{d8-d9}, [r2 :128], r0
   16bd4:	str	r4, [r2]
   16bd8:	mov	r2, #100	; 0x64
   16bdc:	vst1.64	{d8-d9}, [r1 :128], r2
   16be0:	str	r4, [r1]
   16be4:	movw	r1, #52400	; 0xccb0
   16be8:	movt	r1, #2
   16bec:	add	r2, r1, #32
   16bf0:	vst1.64	{d8-d9}, [r2 :128]
   16bf4:	add	r2, r1, #16
   16bf8:	vst1.64	{d8-d9}, [r2 :128]
   16bfc:	mov	r2, #48	; 0x30
   16c00:	vst1.64	{d8-d9}, [r1 :128], r2
   16c04:	vst1.64	{d8-d9}, [r1 :128]
   16c08:	movw	r1, #52464	; 0xccf0
   16c0c:	movt	r1, #2
   16c10:	add	r2, r1, #96	; 0x60
   16c14:	str	r4, [r1, #112]	; 0x70
   16c18:	vst1.64	{d8-d9}, [r2 :128]
   16c1c:	add	r2, r1, #80	; 0x50
   16c20:	vst1.64	{d8-d9}, [r2 :128]
   16c24:	add	r2, r1, #64	; 0x40
   16c28:	vst1.64	{d8-d9}, [r2 :128]
   16c2c:	add	r2, r1, #48	; 0x30
   16c30:	vst1.64	{d8-d9}, [r2 :128]
   16c34:	add	r2, r1, #32
   16c38:	vst1.64	{d8-d9}, [r2 :128]
   16c3c:	add	r2, r1, #16
   16c40:	vst1.64	{d8-d9}, [r1 :128], r5
   16c44:	str	r4, [r1]
   16c48:	movw	r1, #52592	; 0xcd70
   16c4c:	vst1.64	{d8-d9}, [r2 :128]
   16c50:	movt	r1, #2
   16c54:	add	r2, r1, #48	; 0x30
   16c58:	str	r4, [r1, #64]	; 0x40
   16c5c:	vst1.64	{d8-d9}, [r2 :128]
   16c60:	add	r2, r1, #32
   16c64:	vst1.64	{d8-d9}, [r2 :128]
   16c68:	add	r2, r1, #16
   16c6c:	vst1.64	{d8-d9}, [r1 :128], r0
   16c70:	vst1.64	{d8-d9}, [r2 :128]
   16c74:	str	r4, [r1]
   16c78:	vpop	{d8-d9}
   16c7c:	pop	{r4, r5, fp, pc}
   16c80:	movw	r0, #27188	; 0x6a34
   16c84:	movw	r1, #27316	; 0x6ab4
   16c88:	movt	r0, #1
   16c8c:	movt	r1, #1
   16c90:	b	19644 <__gcov_flush@@Base+0xb4>
   16c94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c98:	add	fp, sp, #28
   16c9c:	sub	sp, sp, #36	; 0x24
   16ca0:	mov	r9, r1
   16ca4:	mov	r6, r0
   16ca8:	add	r0, sp, #28
   16cac:	add	r1, sp, #32
   16cb0:	mov	r8, r2
   16cb4:	bl	199f0 <__gcov_flush@@Base+0x460>
   16cb8:	cmp	r0, #0
   16cbc:	beq	16d00 <read_boolean_unary_expression@@Base+0x448>
   16cc0:	mov	r4, r0
   16cc4:	mov	r0, r6
   16cc8:	ldr	r5, [sp, #32]
   16ccc:	bl	11f48 <strlen@plt>
   16cd0:	add	r0, r5, r0
   16cd4:	add	r0, r0, #2
   16cd8:	bl	11f00 <malloc@plt>
   16cdc:	mov	r7, r0
   16ce0:	ldr	r0, [sp, #28]
   16ce4:	mov	r1, r6
   16ce8:	mov	r2, r4
   16cec:	str	r0, [sp]
   16cf0:	mov	r0, r7
   16cf4:	mov	r3, r5
   16cf8:	bl	19a84 <__gcov_flush@@Base+0x4f4>
   16cfc:	b	16d0c <read_boolean_unary_expression@@Base+0x454>
   16d00:	mov	r0, r6
   16d04:	bl	11eb8 <strdup@plt>
   16d08:	mov	r7, r0
   16d0c:	ldr	r0, [pc, #1548]	; 17320 <read_boolean_unary_expression@@Base+0xa68>
   16d10:	ldr	r6, [pc, #1548]	; 17324 <read_boolean_unary_expression@@Base+0xa6c>
   16d14:	mov	r1, #2
   16d18:	add	r0, pc, r0
   16d1c:	add	r6, pc, r6
   16d20:	str	r7, [r0]
   16d24:	mov	r0, r7
   16d28:	mov	r4, #0
   16d2c:	strb	r4, [r6]
   16d30:	bl	11edc <open64@plt>
   16d34:	ldr	r5, [pc, #1516]	; 17328 <read_boolean_unary_expression@@Base+0xa70>
   16d38:	cmn	r0, #1
   16d3c:	add	r5, pc, r5
   16d40:	str	r0, [r5]
   16d44:	beq	16d54 <read_boolean_unary_expression@@Base+0x49c>
   16d48:	ldr	r6, [pc, #1500]	; 1732c <read_boolean_unary_expression@@Base+0xa74>
   16d4c:	add	r6, pc, r6
   16d50:	b	16db0 <read_boolean_unary_expression@@Base+0x4f8>
   16d54:	mov	r0, #1
   16d58:	strb	r0, [r6]
   16d5c:	ldr	r0, [pc, #1508]	; 17348 <read_boolean_unary_expression@@Base+0xa90>
   16d60:	mov	r1, #66	; 0x42
   16d64:	mov	r2, #420	; 0x1a4
   16d68:	ldr	r0, [pc, r0]
   16d6c:	bl	11edc <open64@plt>
   16d70:	ldr	r6, [pc, #1492]	; 1734c <read_boolean_unary_expression@@Base+0xa94>
   16d74:	cmn	r0, #1
   16d78:	str	r0, [r5]
   16d7c:	add	r6, pc, r6
   16d80:	bne	16db0 <read_boolean_unary_expression@@Base+0x4f8>
   16d84:	ldr	r0, [pc, #1476]	; 17350 <read_boolean_unary_expression@@Base+0xa98>
   16d88:	ldr	r0, [pc, r0]
   16d8c:	bl	19758 <__gcov_flush@@Base+0x1c8>
   16d90:	ldr	r0, [pc, #1468]	; 17354 <read_boolean_unary_expression@@Base+0xa9c>
   16d94:	mov	r1, #66	; 0x42
   16d98:	mov	r2, #420	; 0x1a4
   16d9c:	ldr	r0, [pc, r0]
   16da0:	bl	11edc <open64@plt>
   16da4:	cmn	r0, #1
   16da8:	str	r0, [r5]
   16dac:	beq	172d8 <read_boolean_unary_expression@@Base+0xa20>
   16db0:	str	r9, [sp, #20]
   16db4:	bl	19824 <__gcov_flush@@Base+0x294>
   16db8:	ldr	r0, [pc, #1392]	; 17330 <read_boolean_unary_expression@@Base+0xa78>
   16dbc:	mov	r1, r6
   16dc0:	ldr	r0, [pc, r0]
   16dc4:	bl	11e40 <fdopen@plt>
   16dc8:	ldr	r5, [pc, #1380]	; 17334 <read_boolean_unary_expression@@Base+0xa7c>
   16dcc:	ldr	r9, [pc, #1380]	; 17338 <read_boolean_unary_expression@@Base+0xa80>
   16dd0:	ldr	r1, [pc, #1380]	; 1733c <read_boolean_unary_expression@@Base+0xa84>
   16dd4:	ldr	sl, [pc, #1380]	; 17340 <read_boolean_unary_expression@@Base+0xa88>
   16dd8:	add	r5, pc, r5
   16ddc:	add	r9, pc, r9
   16de0:	add	r1, pc, r1
   16de4:	add	sl, pc, sl
   16de8:	str	r4, [r5]
   16dec:	str	r4, [r5, #4]
   16df0:	str	r4, [r9]
   16df4:	str	r4, [r9, #4]
   16df8:	str	r0, [r1]
   16dfc:	str	r4, [sl]
   16e00:	ldr	r6, [pc, #1340]	; 17344 <read_boolean_unary_expression@@Base+0xa8c>
   16e04:	ldr	r2, [pc, #1292]	; 17318 <read_boolean_unary_expression@@Base+0xa60>
   16e08:	str	r8, [sp, #24]
   16e0c:	add	r6, pc, r6
   16e10:	ldrb	r1, [r6]
   16e14:	mov	r6, r2
   16e18:	cmp	r1, #1
   16e1c:	bne	16e44 <read_boolean_unary_expression@@Base+0x58c>
   16e20:	mov	r0, #131072	; 0x20000
   16e24:	mov	r4, #131072	; 0x20000
   16e28:	bl	11f00 <malloc@plt>
   16e2c:	mov	r1, #0
   16e30:	str	r4, [r5]
   16e34:	str	r1, [r5, #4]
   16e38:	mov	r8, r0
   16e3c:	str	r0, [sl]
   16e40:	b	16fd4 <read_boolean_unary_expression@@Base+0x71c>
   16e44:	mov	r1, #0
   16e48:	mov	r2, #2
   16e4c:	mov	r8, #0
   16e50:	bl	11ffc <fseek@plt>
   16e54:	ldr	r0, [pc, #1288]	; 17364 <read_boolean_unary_expression@@Base+0xaac>
   16e58:	ldr	r0, [pc, r0]
   16e5c:	bl	11ea0 <ftell@plt>
   16e60:	mov	r2, r0
   16e64:	ldr	r0, [pc, #1276]	; 17368 <read_boolean_unary_expression@@Base+0xab0>
   16e68:	asr	r3, r2, #31
   16e6c:	add	r0, pc, r0
   16e70:	cmp	r2, #0
   16e74:	strd	r2, [r0]
   16e78:	beq	16f48 <read_boolean_unary_expression@@Base+0x690>
   16e7c:	ldr	r0, [pc, #1256]	; 1736c <read_boolean_unary_expression@@Base+0xab4>
   16e80:	mov	r1, r2
   16e84:	mov	r2, #3
   16e88:	mov	r3, #1
   16e8c:	ldr	r0, [pc, r0]
   16e90:	str	r8, [sp, #8]
   16e94:	str	r8, [sp, #12]
   16e98:	str	r0, [sp]
   16e9c:	mov	r0, #0
   16ea0:	bl	11e94 <mmap64@plt>
   16ea4:	ldr	r1, [pc, #1220]	; 17370 <read_boolean_unary_expression@@Base+0xab8>
   16ea8:	cmn	r0, #1
   16eac:	add	r1, pc, r1
   16eb0:	str	r0, [r1]
   16eb4:	beq	16f10 <read_boolean_unary_expression@@Base+0x658>
   16eb8:	ldr	r1, [pc, #1232]	; 17390 <read_boolean_unary_expression@@Base+0xad8>
   16ebc:	add	r1, pc, r1
   16ec0:	ldrb	r1, [r1]
   16ec4:	cmp	r1, #0
   16ec8:	beq	16ed4 <read_boolean_unary_expression@@Base+0x61c>
   16ecc:	mov	r8, r0
   16ed0:	b	16fe0 <read_boolean_unary_expression@@Base+0x728>
   16ed4:	ldr	ip, [r9, #4]
   16ed8:	ldr	r5, [pc, #1236]	; 173b4 <read_boolean_unary_expression@@Base+0xafc>
   16edc:	mov	r4, r0
   16ee0:	lsr	r2, r6, #16
   16ee4:	ldr	r5, [pc, r5]
   16ee8:	lsr	r1, r6, #24
   16eec:	lsr	r3, r6, #8
   16ef0:	strb	r6, [r4, r5]!
   16ef4:	strb	r2, [r4, #2]
   16ef8:	adds	r2, r5, #4
   16efc:	adc	ip, ip, #0
   16f00:	strb	r1, [r4, #3]
   16f04:	strb	r3, [r4, #1]
   16f08:	stm	r9, {r2, ip}
   16f0c:	b	170a8 <read_boolean_unary_expression@@Base+0x7f0>
   16f10:	bl	11f6c <__errno_location@plt>
   16f14:	ldr	r1, [pc, #1112]	; 17374 <read_boolean_unary_expression@@Base+0xabc>
   16f18:	ldr	r1, [pc, r1]
   16f1c:	ldr	r0, [r0]
   16f20:	ldr	r4, [r1]
   16f24:	ldr	r7, [pc, #1100]	; 17378 <read_boolean_unary_expression@@Base+0xac0>
   16f28:	ldr	r7, [pc, r7]
   16f2c:	bl	11f18 <strerror@plt>
   16f30:	ldr	r1, [pc, #1092]	; 1737c <read_boolean_unary_expression@@Base+0xac4>
   16f34:	mov	r3, r0
   16f38:	mov	r0, r4
   16f3c:	add	r1, pc, r1
   16f40:	mov	r2, r7
   16f44:	bl	11f60 <fprintf@plt>
   16f48:	str	r8, [r5]
   16f4c:	str	r8, [r5, #4]
   16f50:	ldr	r0, [pc, #1064]	; 17380 <read_boolean_unary_expression@@Base+0xac8>
   16f54:	mov	r2, #16646144	; 0xfe0000
   16f58:	orr	r2, r2, #-16777216	; 0xff000000
   16f5c:	add	r0, pc, r0
   16f60:	mvn	r3, #0
   16f64:	str	r8, [r0]
   16f68:	ldr	r1, [pc, #1044]	; 17384 <read_boolean_unary_expression@@Base+0xacc>
   16f6c:	mov	r0, #1
   16f70:	add	r1, pc, r1
   16f74:	strb	r0, [r1]
   16f78:	ldr	r0, [r9, #4]
   16f7c:	ldr	r1, [pc, #1028]	; 17388 <read_boolean_unary_expression@@Base+0xad0>
   16f80:	eor	r3, r0, r3
   16f84:	ldr	r1, [pc, r1]
   16f88:	eor	r2, r1, r2
   16f8c:	orrs	r2, r2, r3
   16f90:	beq	16fd0 <read_boolean_unary_expression@@Base+0x718>
   16f94:	ldr	r2, [pc, #896]	; 1731c <read_boolean_unary_expression@@Base+0xa64>
   16f98:	adds	r1, r1, r2
   16f9c:	adc	r0, r0, #0
   16fa0:	mvn	r2, #0
   16fa4:	and	r7, r0, r2
   16fa8:	mov	r0, #16646144	; 0xfe0000
   16fac:	orr	r0, r0, #-16777216	; 0xff000000
   16fb0:	and	r4, r1, r0
   16fb4:	mov	r0, r4
   16fb8:	bl	11f00 <malloc@plt>
   16fbc:	stm	r5, {r4, r7}
   16fc0:	mov	r8, r0
   16fc4:	ldr	r0, [pc, #960]	; 1738c <read_boolean_unary_expression@@Base+0xad4>
   16fc8:	add	r0, pc, r0
   16fcc:	str	r8, [r0]
   16fd0:	mov	r0, r8
   16fd4:	mov	r1, #0
   16fd8:	mov	r2, #131072	; 0x20000
   16fdc:	bl	11f90 <memset@plt>
   16fe0:	ldr	r0, [r9, #4]
   16fe4:	ldr	r1, [pc, #936]	; 17394 <read_boolean_unary_expression@@Base+0xadc>
   16fe8:	mov	sl, r5
   16fec:	mov	r7, #7
   16ff0:	orr	r7, r7, #131072	; 0x20000
   16ff4:	ldr	r1, [pc, r1]
   16ff8:	ldr	r4, [r5, #4]
   16ffc:	ldr	r5, [pc, #916]	; 17398 <read_boolean_unary_expression@@Base+0xae0>
   17000:	adds	r2, r1, #4
   17004:	adc	r3, r0, #0
   17008:	ldr	r5, [pc, r5]
   1700c:	subs	r2, r5, r2
   17010:	sbcs	r2, r4, r3
   17014:	bcs	170ec <read_boolean_unary_expression@@Base+0x834>
   17018:	adds	r1, r1, r7
   1701c:	adc	r0, r0, #0
   17020:	subs	r1, r1, #4
   17024:	sbc	r0, r0, #0
   17028:	mvn	r2, #0
   1702c:	and	r5, r0, r2
   17030:	mov	r0, #16646144	; 0xfe0000
   17034:	orr	r0, r0, #-16777216	; 0xff000000
   17038:	and	r4, r1, r0
   1703c:	mov	r0, r8
   17040:	mov	r1, r4
   17044:	bl	11ec4 <realloc@plt>
   17048:	strd	r4, [sl]
   1704c:	ldr	r1, [pc, #844]	; 173a0 <read_boolean_unary_expression@@Base+0xae8>
   17050:	mov	r7, r6
   17054:	lsr	r2, r6, #24
   17058:	add	r1, pc, r1
   1705c:	mov	r3, r0
   17060:	str	r0, [r1]
   17064:	ldr	r6, [pc, #824]	; 173a4 <read_boolean_unary_expression@@Base+0xaec>
   17068:	ldr	r1, [r9, #4]
   1706c:	lsr	r5, r7, #16
   17070:	add	r6, pc, r6
   17074:	ldrb	r6, [r6]
   17078:	ldr	r4, [pc, #808]	; 173a8 <read_boolean_unary_expression@@Base+0xaf0>
   1707c:	ldr	r4, [pc, r4]
   17080:	strb	r7, [r3, r4]!
   17084:	strb	r2, [r3, #3]
   17088:	lsr	r2, r7, #8
   1708c:	strb	r2, [r3, #1]
   17090:	adds	r2, r4, #4
   17094:	adc	ip, r1, #0
   17098:	cmp	r6, #1
   1709c:	strb	r5, [r3, #2]
   170a0:	stm	r9, {r2, ip}
   170a4:	beq	1712c <read_boolean_unary_expression@@Base+0x874>
   170a8:	ldr	r4, [sp, #20]
   170ac:	mov	r5, r0
   170b0:	mov	lr, r9
   170b4:	ldrb	r1, [r4]
   170b8:	ldrb	r3, [r4, #1]
   170bc:	ldrb	r7, [r4, #2]
   170c0:	ldrb	r6, [r4, #3]
   170c4:	strb	r1, [r5, r2]!
   170c8:	adds	r4, r2, #4
   170cc:	adc	r1, ip, #0
   170d0:	strb	r6, [r5, #3]
   170d4:	strb	r7, [r5, #2]
   170d8:	strb	r3, [r5, #1]
   170dc:	str	r4, [lr]
   170e0:	str	r1, [lr, #4]
   170e4:	ldr	r6, [sp, #24]
   170e8:	b	172a8 <read_boolean_unary_expression@@Base+0x9f0>
   170ec:	ldr	r1, [r9, #4]
   170f0:	ldr	r4, [pc, #676]	; 1739c <read_boolean_unary_expression@@Base+0xae4>
   170f4:	mov	r5, r6
   170f8:	lsr	r0, r6, #24
   170fc:	ldr	r4, [pc, r4]
   17100:	lsr	r2, r6, #16
   17104:	lsr	r3, r6, #8
   17108:	mov	r6, r8
   1710c:	strb	r5, [r6, r4]!
   17110:	strb	r2, [r6, #2]
   17114:	adds	r2, r4, #4
   17118:	adc	ip, r1, #0
   1711c:	strb	r0, [r6, #3]
   17120:	strb	r3, [r6, #1]
   17124:	stm	r9, {r2, ip}
   17128:	mov	r0, r8
   1712c:	ldr	r7, [sl, #4]
   17130:	ldr	r3, [pc, #628]	; 173ac <read_boolean_unary_expression@@Base+0xaf4>
   17134:	adds	r6, r4, #8
   17138:	mov	r8, r9
   1713c:	adc	r5, r1, #0
   17140:	ldr	r3, [pc, r3]
   17144:	mov	r9, sl
   17148:	subs	r3, r3, r6
   1714c:	sbcs	r3, r7, r5
   17150:	bcs	171f4 <read_boolean_unary_expression@@Base+0x93c>
   17154:	mov	r2, #7
   17158:	orr	r2, r2, #131072	; 0x20000
   1715c:	adds	r2, r4, r2
   17160:	adc	r4, r1, #0
   17164:	mov	r1, #16646144	; 0xfe0000
   17168:	orr	r1, r1, #-16777216	; 0xff000000
   1716c:	and	r6, r2, r1
   17170:	mov	r1, r6
   17174:	bl	11ec4 <realloc@plt>
   17178:	ldr	sl, [pc, #568]	; 173b8 <read_boolean_unary_expression@@Base+0xb00>
   1717c:	mvn	r1, #0
   17180:	and	r7, r4, r1
   17184:	add	sl, pc, sl
   17188:	strd	r6, [r9]
   1718c:	str	r0, [sl]
   17190:	ldr	r1, [pc, #548]	; 173bc <read_boolean_unary_expression@@Base+0xb04>
   17194:	ldr	r2, [sp, #20]
   17198:	ldr	ip, [r8, #4]
   1719c:	add	r1, pc, r1
   171a0:	mov	lr, r8
   171a4:	ldrb	r3, [r1]
   171a8:	ldrb	r1, [r2]
   171ac:	ldrb	r7, [r2, #1]
   171b0:	ldrb	r6, [r2, #2]
   171b4:	ldrb	r5, [r2, #3]
   171b8:	ldr	r2, [pc, #512]	; 173c0 <read_boolean_unary_expression@@Base+0xb08>
   171bc:	ldr	r2, [pc, r2]
   171c0:	adds	r4, r2, #4
   171c4:	strb	r1, [r0, r2]
   171c8:	add	r1, r0, r2
   171cc:	strb	r5, [r1, #3]
   171d0:	strb	r6, [r1, #2]
   171d4:	strb	r7, [r1, #1]
   171d8:	adc	r1, ip, #0
   171dc:	str	r4, [lr]
   171e0:	str	r1, [lr, #4]
   171e4:	ldr	r6, [sp, #24]
   171e8:	cmp	r3, #1
   171ec:	beq	1723c <read_boolean_unary_expression@@Base+0x984>
   171f0:	b	172a8 <read_boolean_unary_expression@@Base+0x9f0>
   171f4:	ldr	r6, [sp, #20]
   171f8:	mov	r5, r0
   171fc:	adds	r4, r2, #4
   17200:	ldrb	r1, [r6]
   17204:	ldrb	r3, [r6, #1]
   17208:	ldrb	r7, [r6, #2]
   1720c:	ldrb	r6, [r6, #3]
   17210:	strb	r1, [r5, r2]!
   17214:	adc	r1, ip, #0
   17218:	strb	r3, [r5, #1]
   1721c:	mov	r3, r8
   17220:	strb	r6, [r5, #3]
   17224:	strb	r7, [r5, #2]
   17228:	str	r4, [r3]
   1722c:	str	r1, [r3, #4]
   17230:	ldr	r6, [sp, #24]
   17234:	ldr	sl, [pc, #372]	; 173b0 <read_boolean_unary_expression@@Base+0xaf8>
   17238:	add	sl, pc, sl
   1723c:	ldr	r7, [r9, #4]
   17240:	ldr	r5, [pc, #380]	; 173c4 <read_boolean_unary_expression@@Base+0xb0c>
   17244:	adds	r3, r2, #8
   17248:	adc	lr, ip, #0
   1724c:	ldr	r5, [pc, r5]
   17250:	subs	r3, r5, r3
   17254:	sbcs	r3, r7, lr
   17258:	bcs	172a4 <read_boolean_unary_expression@@Base+0x9ec>
   1725c:	mov	r1, #7
   17260:	orr	r1, r1, #131072	; 0x20000
   17264:	adds	r1, r2, r1
   17268:	adc	r2, ip, #0
   1726c:	mvn	r3, #0
   17270:	and	r5, r2, r3
   17274:	mov	r2, #16646144	; 0xfe0000
   17278:	orr	r2, r2, #-16777216	; 0xff000000
   1727c:	and	r4, r1, r2
   17280:	mov	r1, r4
   17284:	bl	11ec4 <realloc@plt>
   17288:	strd	r4, [r9]
   1728c:	str	r0, [sl]
   17290:	ldr	r1, [r8, #4]
   17294:	ldr	r4, [pc, #300]	; 173c8 <read_boolean_unary_expression@@Base+0xb10>
   17298:	mov	lr, r8
   1729c:	ldr	r4, [pc, r4]
   172a0:	b	172a8 <read_boolean_unary_expression@@Base+0x9f0>
   172a4:	mov	lr, r8
   172a8:	lsr	r2, r6, #24
   172ac:	strb	r6, [r0, r4]!
   172b0:	lsr	r3, r6, #16
   172b4:	lsr	r7, r6, #8
   172b8:	strb	r2, [r0, #3]
   172bc:	strb	r3, [r0, #2]
   172c0:	strb	r7, [r0, #1]
   172c4:	adds	r0, r4, #4
   172c8:	adc	r1, r1, #0
   172cc:	strd	r0, [lr]
   172d0:	sub	sp, fp, #28
   172d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172d8:	bl	11f6c <__errno_location@plt>
   172dc:	ldr	r1, [pc, #116]	; 17358 <read_boolean_unary_expression@@Base+0xaa0>
   172e0:	ldr	r1, [pc, r1]
   172e4:	ldr	r0, [r0]
   172e8:	ldr	r4, [r1]
   172ec:	ldr	r5, [pc, #104]	; 1735c <read_boolean_unary_expression@@Base+0xaa4>
   172f0:	ldr	r5, [pc, r5]
   172f4:	bl	11f18 <strerror@plt>
   172f8:	ldr	r1, [pc, #96]	; 17360 <read_boolean_unary_expression@@Base+0xaa8>
   172fc:	mov	r3, r0
   17300:	mov	r0, r4
   17304:	add	r1, pc, r1
   17308:	mov	r2, r5
   1730c:	bl	11f60 <fprintf@plt>
   17310:	sub	sp, fp, #28
   17314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17318:	strbvs	r6, [r3, -r1, ror #8]!
   1731c:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   17320:	muleq	r1, r8, r0
   17324:	muleq	r1, r8, r0
   17328:	muleq	r1, r8, r3
   1732c:	ldrdeq	r4, [r0], -ip
   17330:	andeq	r5, r1, r4, lsl r3
   17334:	andeq	r5, r1, r8, ror #31
   17338:	andeq	r5, r1, ip, ror #31
   1733c:	ldrdeq	r5, [r1], -r8
   17340:	ldrdeq	r5, [r1], -r8
   17344:	andeq	r5, r1, r8, lsr #31
   17348:	andeq	r6, r1, r8, asr #32
   1734c:			; <UNDEFINED> instruction: 0x000044b0
   17350:	andeq	r6, r1, r8, lsr #32
   17354:	andeq	r6, r1, r4, lsl r0
   17358:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1735c:	andeq	r5, r1, r0, asr #21
   17360:	andeq	r3, r0, ip, lsr #30
   17364:	andeq	r5, r1, r0, ror #30
   17368:	andeq	r5, r1, r4, ror pc
   1736c:	andeq	r5, r1, r8, asr #4
   17370:	andeq	r5, r1, r0, lsl pc
   17374:	muleq	r1, ip, r1
   17378:	andeq	r5, r1, r8, lsl #29
   1737c:	andeq	r4, r0, lr, asr #8
   17380:	andeq	r5, r1, r0, ror #28
   17384:	andeq	r5, r1, r4, asr #28
   17388:	andeq	r5, r1, r4, asr #28
   1738c:	strdeq	r5, [r1], -r4
   17390:	strdeq	r5, [r1], -r8
   17394:	ldrdeq	r5, [r1], -r4
   17398:			; <UNDEFINED> instruction: 0x00015db8
   1739c:	andeq	r5, r1, ip, asr #25
   173a0:	andeq	r5, r1, r4, ror #26
   173a4:	andeq	r5, r1, r4, asr #26
   173a8:	andeq	r5, r1, ip, asr #26
   173ac:	andeq	r5, r1, r0, lsl #25
   173b0:	andeq	r5, r1, r4, lsl #23
   173b4:	andeq	r5, r1, r4, ror #29
   173b8:	andeq	r5, r1, r8, lsr ip
   173bc:	andeq	r5, r1, r8, lsl ip
   173c0:	andeq	r5, r1, ip, lsl #24
   173c4:	andeq	r5, r1, r4, ror fp
   173c8:	andeq	r5, r1, ip, lsr #22
   173cc:	ldr	r0, [r0]
   173d0:	cmn	r0, #1
   173d4:	beq	173f4 <read_boolean_unary_expression@@Base+0xb3c>
   173d8:	ldr	r0, [r1, r0, lsl #2]
   173dc:	cmp	r0, #0
   173e0:	bxeq	lr
   173e4:	ldrd	r2, [r0]
   173e8:	adds	r2, r2, #1
   173ec:	adc	r3, r3, #0
   173f0:	strd	r2, [r0]
   173f4:	bx	lr
   173f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173fc:	add	fp, sp, #28
   17400:	sub	sp, sp, #12
   17404:	mov	r9, r0
   17408:	ldr	r0, [pc, #2000]	; 17be0 <read_boolean_unary_expression@@Base+0x1328>
   1740c:	mov	sl, #2
   17410:	cmp	r3, #0
   17414:	movne	sl, #3
   17418:	ldr	r0, [pc, r0]
   1741c:	cmp	r0, #0
   17420:	beq	17bd8 <read_boolean_unary_expression@@Base+0x1320>
   17424:	stm	sp, {r2, r3}
   17428:	ldr	r0, [pc, #1972]	; 17be4 <read_boolean_unary_expression@@Base+0x132c>
   1742c:	str	r1, [sp, #8]
   17430:	add	r0, pc, r0
   17434:	ldrb	r0, [r0]
   17438:	cmp	r0, #1
   1743c:	bne	174cc <read_boolean_unary_expression@@Base+0xc14>
   17440:	ldr	r0, [pc, #1952]	; 17be8 <read_boolean_unary_expression@@Base+0x1330>
   17444:	ldr	r4, [pc, #1952]	; 17bec <read_boolean_unary_expression@@Base+0x1334>
   17448:	add	r0, pc, r0
   1744c:	add	r4, pc, r4
   17450:	ldr	r0, [r0, #4]
   17454:	ldr	r5, [pc, #1940]	; 17bf0 <read_boolean_unary_expression@@Base+0x1338>
   17458:	ldr	r5, [pc, r5]
   1745c:	ldr	r7, [r4, #4]
   17460:	ldr	r6, [pc, #1932]	; 17bf4 <read_boolean_unary_expression@@Base+0x133c>
   17464:	adds	r2, r5, #4
   17468:	adc	r3, r0, #0
   1746c:	ldr	r6, [pc, r6]
   17470:	subs	r2, r6, r2
   17474:	sbcs	r2, r7, r3
   17478:	bcs	174cc <read_boolean_unary_expression@@Base+0xc14>
   1747c:	mov	r2, #7
   17480:	orr	r2, r2, #131072	; 0x20000
   17484:	adds	r1, r5, r2
   17488:	adc	r0, r0, #0
   1748c:	subs	r1, r1, #4
   17490:	sbc	r0, r0, #0
   17494:	mvn	r2, #0
   17498:	and	r7, r0, r2
   1749c:	mov	r0, #16646144	; 0xfe0000
   174a0:	orr	r0, r0, #-16777216	; 0xff000000
   174a4:	ldr	r8, [pc, #1868]	; 17bf8 <read_boolean_unary_expression@@Base+0x1340>
   174a8:	and	r6, r1, r0
   174ac:	ldr	r0, [pc, #1864]	; 17bfc <read_boolean_unary_expression@@Base+0x1344>
   174b0:	mov	r1, r6
   174b4:	add	r8, pc, r8
   174b8:	ldr	r0, [pc, r0]
   174bc:	bl	11ec4 <realloc@plt>
   174c0:	ldr	r1, [sp, #8]
   174c4:	strd	r6, [r4]
   174c8:	str	r0, [r8]
   174cc:	ldr	r3, [pc, #1836]	; 17c00 <read_boolean_unary_expression@@Base+0x1348>
   174d0:	ldr	r7, [pc, #1836]	; 17c04 <read_boolean_unary_expression@@Base+0x134c>
   174d4:	mov	r0, #0
   174d8:	add	r3, pc, r3
   174dc:	mov	r2, #1
   174e0:	ldr	r7, [pc, r7]
   174e4:	ldr	r8, [pc, #1820]	; 17c08 <read_boolean_unary_expression@@Base+0x1350>
   174e8:	adds	r4, r7, #4
   174ec:	ldr	r8, [pc, r8]
   174f0:	ldr	r6, [r3, #4]
   174f4:	mov	r5, r8
   174f8:	strb	r0, [r5, r7]!
   174fc:	strb	r2, [r5, #3]
   17500:	strb	r0, [r5, #2]
   17504:	strb	r0, [r5, #1]
   17508:	adc	r5, r6, #0
   1750c:	cmp	r1, #0
   17510:	strd	r4, [r3]
   17514:	beq	17528 <read_boolean_unary_expression@@Base+0xc70>
   17518:	mov	r0, r1
   1751c:	bl	11f48 <strlen@plt>
   17520:	add	r0, sl, r0, lsr #2
   17524:	add	sl, r0, #2
   17528:	ldr	r0, [pc, #1756]	; 17c0c <read_boolean_unary_expression@@Base+0x1354>
   1752c:	add	r0, pc, r0
   17530:	ldrb	r0, [r0]
   17534:	cmp	r0, #0
   17538:	beq	17618 <read_boolean_unary_expression@@Base+0xd60>
   1753c:	ldr	lr, [pc, #1744]	; 17c14 <read_boolean_unary_expression@@Base+0x135c>
   17540:	adds	r0, r7, #8
   17544:	adc	r1, r6, #0
   17548:	add	lr, pc, lr
   1754c:	ldr	r2, [lr, #4]
   17550:	ldr	r3, [pc, #1728]	; 17c18 <read_boolean_unary_expression@@Base+0x1360>
   17554:	ldr	r3, [pc, r3]
   17558:	subs	r0, r3, r0
   1755c:	sbcs	r0, r2, r1
   17560:	bcs	17868 <read_boolean_unary_expression@@Base+0xfb0>
   17564:	mov	r0, #7
   17568:	orr	r0, r0, #131072	; 0x20000
   1756c:	adds	r0, r7, r0
   17570:	adc	r1, r6, #0
   17574:	mvn	r2, #0
   17578:	and	r5, r1, r2
   1757c:	mov	r1, #16646144	; 0xfe0000
   17580:	orr	r1, r1, #-16777216	; 0xff000000
   17584:	and	r6, r0, r1
   17588:	ldr	r4, [pc, #1680]	; 17c20 <read_boolean_unary_expression@@Base+0x1368>
   1758c:	mov	r0, r8
   17590:	mov	r1, r6
   17594:	add	r4, pc, r4
   17598:	mov	r7, lr
   1759c:	bl	11ec4 <realloc@plt>
   175a0:	mov	lr, r7
   175a4:	mov	r8, r0
   175a8:	str	r6, [lr]
   175ac:	str	r5, [lr, #4]
   175b0:	str	r8, [r4]
   175b4:	ldr	r1, [pc, #1640]	; 17c24 <read_boolean_unary_expression@@Base+0x136c>
   175b8:	lsr	r0, sl, #24
   175bc:	add	r1, pc, r1
   175c0:	lsr	r3, sl, #16
   175c4:	ldrb	r2, [r1]
   175c8:	ldr	r1, [pc, #1624]	; 17c28 <read_boolean_unary_expression@@Base+0x1370>
   175cc:	add	r1, pc, r1
   175d0:	mov	r7, r1
   175d4:	ldr	r5, [r1, #4]
   175d8:	ldr	r4, [pc, #1612]	; 17c2c <read_boolean_unary_expression@@Base+0x1374>
   175dc:	mov	r1, r8
   175e0:	ldr	r4, [pc, r4]
   175e4:	strb	sl, [r1, r4]!
   175e8:	ldr	ip, [sp, #8]
   175ec:	strb	r0, [r1, #3]
   175f0:	lsr	r0, sl, #8
   175f4:	strb	r0, [r1, #1]
   175f8:	adds	r0, r4, #4
   175fc:	strb	r3, [r1, #2]
   17600:	adc	r1, r5, #0
   17604:	mov	sl, r7
   17608:	cmp	r2, #1
   1760c:	strd	r0, [sl]
   17610:	bne	17650 <read_boolean_unary_expression@@Base+0xd98>
   17614:	b	178a0 <read_boolean_unary_expression@@Base+0xfe8>
   17618:	mov	r3, r8
   1761c:	lsr	r0, sl, #24
   17620:	strb	sl, [r3, r4]!
   17624:	lsr	r1, sl, #16
   17628:	lsr	r2, sl, #8
   1762c:	strb	r0, [r3, #3]
   17630:	strb	r1, [r3, #2]
   17634:	strb	r2, [r3, #1]
   17638:	ldr	sl, [pc, #1488]	; 17c10 <read_boolean_unary_expression@@Base+0x1358>
   1763c:	ldr	ip, [sp, #8]
   17640:	adds	r0, r7, #8
   17644:	adc	r1, r6, #0
   17648:	add	sl, pc, sl
   1764c:	strd	r0, [sl]
   17650:	mov	r6, r8
   17654:	lsr	r2, r9, #24
   17658:	strb	r9, [r6, r0]!
   1765c:	lsr	r3, r9, #16
   17660:	strb	r2, [r6, #3]
   17664:	adds	r2, r0, #4
   17668:	lsr	r7, r9, #8
   1766c:	strb	r3, [r6, #2]
   17670:	adc	r3, r1, #0
   17674:	strb	r7, [r6, #1]
   17678:	strd	r2, [sl]
   1767c:	ldr	r5, [sp]
   17680:	mov	r6, r8
   17684:	adds	r4, r2, #4
   17688:	lsr	r7, r5, #8
   1768c:	strb	r5, [r6, r2]!
   17690:	lsr	r0, r5, #24
   17694:	lsr	r1, r5, #16
   17698:	strb	r7, [r6, #1]
   1769c:	adc	r7, r3, #0
   176a0:	strb	r0, [r6, #3]
   176a4:	strb	r1, [r6, #2]
   176a8:	stm	sl, {r4, r7}
   176ac:	ldr	r0, [sp, #4]
   176b0:	cmp	r0, #0
   176b4:	beq	1778c <read_boolean_unary_expression@@Base+0xed4>
   176b8:	ldr	r0, [pc, #1420]	; 17c4c <read_boolean_unary_expression@@Base+0x1394>
   176bc:	ldr	sl, [fp, #8]
   176c0:	add	r0, pc, r0
   176c4:	ldrb	r0, [r0]
   176c8:	cmp	r0, #1
   176cc:	bne	17758 <read_boolean_unary_expression@@Base+0xea0>
   176d0:	ldr	r9, [pc, #1400]	; 17c50 <read_boolean_unary_expression@@Base+0x1398>
   176d4:	adds	r0, r2, #8
   176d8:	adc	r1, r3, #0
   176dc:	add	r9, pc, r9
   176e0:	ldr	r6, [r9, #4]
   176e4:	ldr	r5, [pc, #1384]	; 17c54 <read_boolean_unary_expression@@Base+0x139c>
   176e8:	ldr	r5, [pc, r5]
   176ec:	subs	r0, r5, r0
   176f0:	sbcs	r0, r6, r1
   176f4:	bcs	17758 <read_boolean_unary_expression@@Base+0xea0>
   176f8:	mov	r0, #7
   176fc:	orr	r0, r0, #131072	; 0x20000
   17700:	adds	r0, r2, r0
   17704:	adc	r1, r3, #0
   17708:	mvn	r2, #0
   1770c:	and	r5, r1, r2
   17710:	mov	r1, #16646144	; 0xfe0000
   17714:	orr	r1, r1, #-16777216	; 0xff000000
   17718:	and	r6, r0, r1
   1771c:	ldr	r4, [pc, #1332]	; 17c58 <read_boolean_unary_expression@@Base+0x13a0>
   17720:	mov	r0, r8
   17724:	mov	r1, r6
   17728:	add	r4, pc, r4
   1772c:	bl	11ec4 <realloc@plt>
   17730:	ldr	ip, [sp, #8]
   17734:	str	r6, [r9]
   17738:	str	r5, [r9, #4]
   1773c:	mov	r8, r0
   17740:	ldr	r0, [pc, #1300]	; 17c5c <read_boolean_unary_expression@@Base+0x13a4>
   17744:	str	r8, [r4]
   17748:	add	r0, pc, r0
   1774c:	ldr	r7, [r0, #4]
   17750:	ldr	r4, [pc, #1288]	; 17c60 <read_boolean_unary_expression@@Base+0x13a8>
   17754:	ldr	r4, [pc, r4]
   17758:	mov	r3, r8
   1775c:	lsr	r0, sl, #24
   17760:	strb	sl, [r3, r4]!
   17764:	lsr	r1, sl, #16
   17768:	lsr	r2, sl, #8
   1776c:	strb	r0, [r3, #3]
   17770:	strb	r1, [r3, #2]
   17774:	strb	r2, [r3, #1]
   17778:	ldr	sl, [pc, #1252]	; 17c64 <read_boolean_unary_expression@@Base+0x13ac>
   1777c:	adds	r4, r4, #4
   17780:	adc	r7, r7, #0
   17784:	add	sl, pc, sl
   17788:	stm	sl, {r4, r7}
   1778c:	cmp	ip, #0
   17790:	beq	17bd8 <read_boolean_unary_expression@@Base+0x1320>
   17794:	mov	r0, ip
   17798:	bl	11f48 <strlen@plt>
   1779c:	mov	r9, #1
   177a0:	add	r5, r9, r0, lsr #2
   177a4:	ldr	r0, [pc, #1212]	; 17c68 <read_boolean_unary_expression@@Base+0x13b0>
   177a8:	add	r0, pc, r0
   177ac:	ldrb	r0, [r0]
   177b0:	cmp	r0, #1
   177b4:	bne	17858 <read_boolean_unary_expression@@Base+0xfa0>
   177b8:	ldr	sl, [pc, #1196]	; 17c6c <read_boolean_unary_expression@@Base+0x13b4>
   177bc:	adds	r0, r4, #4
   177c0:	adc	r1, r7, #0
   177c4:	add	sl, pc, sl
   177c8:	ldr	r2, [sl, #4]
   177cc:	ldr	r3, [pc, #1180]	; 17c70 <read_boolean_unary_expression@@Base+0x13b8>
   177d0:	ldr	r3, [pc, r3]
   177d4:	subs	r0, r3, r0
   177d8:	sbcs	r0, r2, r1
   177dc:	bcs	17a0c <read_boolean_unary_expression@@Base+0x1154>
   177e0:	mov	r0, #0
   177e4:	str	r0, [sp, #4]
   177e8:	mov	r0, #7
   177ec:	orr	r0, r0, #131072	; 0x20000
   177f0:	adds	r0, r4, r0
   177f4:	adc	r1, r7, #0
   177f8:	subs	r0, r0, #4
   177fc:	sbc	r1, r1, #0
   17800:	mvn	r2, #0
   17804:	and	r7, r1, r2
   17808:	mov	r1, #16646144	; 0xfe0000
   1780c:	orr	r1, r1, #-16777216	; 0xff000000
   17810:	and	r4, r0, r1
   17814:	ldr	r6, [pc, #1116]	; 17c78 <read_boolean_unary_expression@@Base+0x13c0>
   17818:	mov	r0, r8
   1781c:	mov	r1, r4
   17820:	add	r6, pc, r6
   17824:	bl	11ec4 <realloc@plt>
   17828:	stm	sl, {r4, r7}
   1782c:	str	r0, [r6]
   17830:	ldr	sl, [pc, #1092]	; 17c7c <read_boolean_unary_expression@@Base+0x13c4>
   17834:	mov	r8, r0
   17838:	add	sl, pc, sl
   1783c:	ldr	r7, [sl, #4]
   17840:	ldr	r0, [pc, #1080]	; 17c80 <read_boolean_unary_expression@@Base+0x13c8>
   17844:	add	r0, pc, r0
   17848:	ldrb	r9, [r0]
   1784c:	ldr	r4, [pc, #1072]	; 17c84 <read_boolean_unary_expression@@Base+0x13cc>
   17850:	ldr	r4, [pc, r4]
   17854:	b	17a1c <read_boolean_unary_expression@@Base+0x1164>
   17858:	mov	r0, #0
   1785c:	str	r0, [sp, #4]
   17860:	mov	r9, #0
   17864:	b	17a1c <read_boolean_unary_expression@@Base+0x1164>
   17868:	mov	r3, r8
   1786c:	lsr	r0, sl, #24
   17870:	strb	sl, [r3, r4]!
   17874:	lsr	r1, sl, #16
   17878:	lsr	r2, sl, #8
   1787c:	strb	r0, [r3, #3]
   17880:	strb	r1, [r3, #2]
   17884:	strb	r2, [r3, #1]
   17888:	ldr	sl, [pc, #908]	; 17c1c <read_boolean_unary_expression@@Base+0x1364>
   1788c:	adds	r0, r7, #8
   17890:	adc	r1, r6, #0
   17894:	add	sl, pc, sl
   17898:	ldr	ip, [sp, #8]
   1789c:	strd	r0, [sl]
   178a0:	ldr	r7, [lr, #4]
   178a4:	ldr	r6, [pc, #900]	; 17c30 <read_boolean_unary_expression@@Base+0x1378>
   178a8:	adds	r2, r4, #8
   178ac:	adc	r3, r5, #0
   178b0:	ldr	r6, [pc, r6]
   178b4:	subs	r2, r6, r2
   178b8:	sbcs	r2, r7, r3
   178bc:	bcs	17960 <read_boolean_unary_expression@@Base+0x10a8>
   178c0:	mov	r0, #7
   178c4:	orr	r0, r0, #131072	; 0x20000
   178c8:	adds	r0, r4, r0
   178cc:	adc	r1, r5, #0
   178d0:	mvn	r2, #0
   178d4:	and	r5, r1, r2
   178d8:	mov	r1, #16646144	; 0xfe0000
   178dc:	orr	r1, r1, #-16777216	; 0xff000000
   178e0:	and	r4, r0, r1
   178e4:	ldr	r6, [pc, #840]	; 17c34 <read_boolean_unary_expression@@Base+0x137c>
   178e8:	mov	r0, r8
   178ec:	mov	r1, r4
   178f0:	add	r6, pc, r6
   178f4:	mov	r7, lr
   178f8:	bl	11ec4 <realloc@plt>
   178fc:	mov	lr, r7
   17900:	str	r0, [r6]
   17904:	strd	r4, [lr]
   17908:	mov	r8, r0
   1790c:	ldr	ip, [sp, #8]
   17910:	ldr	r0, [pc, #800]	; 17c38 <read_boolean_unary_expression@@Base+0x1380>
   17914:	ldr	r1, [sl, #4]
   17918:	mov	r3, r8
   1791c:	add	r0, pc, r0
   17920:	lsr	r2, r9, #24
   17924:	ldrb	r7, [r0]
   17928:	ldr	r0, [pc, #780]	; 17c3c <read_boolean_unary_expression@@Base+0x1384>
   1792c:	lsr	r6, r9, #16
   17930:	ldr	r0, [pc, r0]
   17934:	strb	r9, [r3, r0]!
   17938:	strb	r2, [r3, #3]
   1793c:	lsr	r2, r9, #8
   17940:	strb	r2, [r3, #1]
   17944:	adds	r2, r0, #4
   17948:	strb	r6, [r3, #2]
   1794c:	adc	r3, r1, #0
   17950:	cmp	r7, #1
   17954:	strd	r2, [sl]
   17958:	bne	1767c <read_boolean_unary_expression@@Base+0xdc4>
   1795c:	b	1798c <read_boolean_unary_expression@@Base+0x10d4>
   17960:	mov	r6, r8
   17964:	lsr	r2, r9, #24
   17968:	strb	r9, [r6, r0]!
   1796c:	lsr	r3, r9, #16
   17970:	strb	r2, [r6, #3]
   17974:	adds	r2, r0, #4
   17978:	lsr	r7, r9, #8
   1797c:	strb	r3, [r6, #2]
   17980:	adc	r3, r1, #0
   17984:	strb	r7, [r6, #1]
   17988:	strd	r2, [sl]
   1798c:	ldr	r5, [lr, #4]
   17990:	ldr	r4, [pc, #680]	; 17c40 <read_boolean_unary_expression@@Base+0x1388>
   17994:	adds	r7, r0, #8
   17998:	adc	r6, r1, #0
   1799c:	ldr	r4, [pc, r4]
   179a0:	subs	r7, r4, r7
   179a4:	sbcs	r7, r5, r6
   179a8:	bcs	1767c <read_boolean_unary_expression@@Base+0xdc4>
   179ac:	mov	r2, #7
   179b0:	orr	r2, r2, #131072	; 0x20000
   179b4:	adds	r0, r0, r2
   179b8:	adc	r1, r1, #0
   179bc:	mvn	r2, #0
   179c0:	and	r5, r1, r2
   179c4:	mov	r1, #16646144	; 0xfe0000
   179c8:	orr	r1, r1, #-16777216	; 0xff000000
   179cc:	and	r6, r0, r1
   179d0:	ldr	r4, [pc, #620]	; 17c44 <read_boolean_unary_expression@@Base+0x138c>
   179d4:	mov	r0, r8
   179d8:	mov	r1, r6
   179dc:	add	r4, pc, r4
   179e0:	mov	r7, lr
   179e4:	bl	11ec4 <realloc@plt>
   179e8:	ldr	ip, [sp, #8]
   179ec:	str	r6, [r7]
   179f0:	str	r5, [r7, #4]
   179f4:	str	r0, [r4]
   179f8:	ldr	r3, [sl, #4]
   179fc:	ldr	r2, [pc, #580]	; 17c48 <read_boolean_unary_expression@@Base+0x1390>
   17a00:	mov	r8, r0
   17a04:	ldr	r2, [pc, r2]
   17a08:	b	1767c <read_boolean_unary_expression@@Base+0xdc4>
   17a0c:	mov	r0, #0
   17a10:	str	r0, [sp, #4]
   17a14:	ldr	sl, [pc, #600]	; 17c74 <read_boolean_unary_expression@@Base+0x13bc>
   17a18:	add	sl, pc, sl
   17a1c:	mov	r3, r8
   17a20:	ldr	r0, [sp, #8]
   17a24:	strb	r5, [r3, r4]!
   17a28:	adds	r4, r4, #4
   17a2c:	lsr	r6, r5, #24
   17a30:	lsr	r1, r5, #16
   17a34:	lsr	r2, r5, #8
   17a38:	adc	r5, r7, #0
   17a3c:	strb	r6, [r3, #3]
   17a40:	strb	r1, [r3, #2]
   17a44:	strb	r2, [r3, #1]
   17a48:	strd	r4, [sl]
   17a4c:	bl	11f48 <strlen@plt>
   17a50:	mov	r7, r0
   17a54:	cmp	r9, #0
   17a58:	beq	17af8 <read_boolean_unary_expression@@Base+0x1240>
   17a5c:	ldr	r6, [pc, #548]	; 17c88 <read_boolean_unary_expression@@Base+0x13d0>
   17a60:	adds	r0, r4, r7
   17a64:	adc	r1, r5, #0
   17a68:	add	r6, pc, r6
   17a6c:	ldr	r2, [r6, #4]
   17a70:	ldr	r3, [pc, #532]	; 17c8c <read_boolean_unary_expression@@Base+0x13d4>
   17a74:	ldr	r3, [pc, r3]
   17a78:	subs	r3, r3, r0
   17a7c:	sbcs	r2, r2, r1
   17a80:	bcs	17af0 <read_boolean_unary_expression@@Base+0x1238>
   17a84:	mov	r2, #7
   17a88:	orr	r2, r2, #131072	; 0x20000
   17a8c:	adds	r0, r0, r2
   17a90:	adc	r1, r1, #0
   17a94:	subs	r0, r0, #8
   17a98:	sbc	r1, r1, #0
   17a9c:	mvn	r2, #0
   17aa0:	and	r5, r1, r2
   17aa4:	mov	r1, #16646144	; 0xfe0000
   17aa8:	orr	r1, r1, #-16777216	; 0xff000000
   17aac:	and	r4, r0, r1
   17ab0:	ldr	r9, [pc, #472]	; 17c90 <read_boolean_unary_expression@@Base+0x13d8>
   17ab4:	mov	r0, r8
   17ab8:	mov	r1, r4
   17abc:	add	r9, pc, r9
   17ac0:	bl	11ec4 <realloc@plt>
   17ac4:	strd	r4, [r6]
   17ac8:	str	r0, [r9]
   17acc:	mov	r8, r0
   17ad0:	ldr	r5, [sl, #4]
   17ad4:	ldr	r0, [pc, #440]	; 17c94 <read_boolean_unary_expression@@Base+0x13dc>
   17ad8:	add	r0, pc, r0
   17adc:	ldrb	r0, [r0]
   17ae0:	str	r0, [sp, #4]
   17ae4:	ldr	r4, [pc, #428]	; 17c98 <read_boolean_unary_expression@@Base+0x13e0>
   17ae8:	ldr	r4, [pc, r4]
   17aec:	b	17af8 <read_boolean_unary_expression@@Base+0x1240>
   17af0:	mov	r0, #1
   17af4:	str	r0, [sp, #4]
   17af8:	ldr	r9, [sp, #8]
   17afc:	add	r0, r8, r4
   17b00:	mov	r2, r7
   17b04:	mov	r1, r9
   17b08:	bl	11e88 <memcpy@plt>
   17b0c:	adds	r6, r4, r7
   17b10:	mov	r0, r9
   17b14:	adc	r5, r5, #0
   17b18:	str	r6, [sl]
   17b1c:	str	r5, [sl, #4]
   17b20:	bl	11f48 <strlen@plt>
   17b24:	and	r0, r0, #3
   17b28:	rsb	r4, r0, #4
   17b2c:	ldr	r0, [sp, #4]
   17b30:	cmp	r0, #0
   17b34:	beq	17bbc <read_boolean_unary_expression@@Base+0x1304>
   17b38:	ldr	r7, [pc, #348]	; 17c9c <read_boolean_unary_expression@@Base+0x13e4>
   17b3c:	adds	r0, r6, r4
   17b40:	adc	r1, r5, #0
   17b44:	add	r7, pc, r7
   17b48:	ldr	r2, [r7, #4]
   17b4c:	ldr	r3, [pc, #332]	; 17ca0 <read_boolean_unary_expression@@Base+0x13e8>
   17b50:	ldr	r3, [pc, r3]
   17b54:	subs	r3, r3, r0
   17b58:	sbcs	r2, r2, r1
   17b5c:	bcs	17bbc <read_boolean_unary_expression@@Base+0x1304>
   17b60:	mov	r2, #7
   17b64:	orr	r2, r2, #131072	; 0x20000
   17b68:	adds	r0, r0, r2
   17b6c:	adc	r1, r1, #0
   17b70:	subs	r0, r0, #8
   17b74:	sbc	r1, r1, #0
   17b78:	mvn	r2, #0
   17b7c:	and	r5, r1, r2
   17b80:	mov	r1, #16646144	; 0xfe0000
   17b84:	orr	r1, r1, #-16777216	; 0xff000000
   17b88:	and	r6, r0, r1
   17b8c:	ldr	r9, [pc, #272]	; 17ca4 <read_boolean_unary_expression@@Base+0x13ec>
   17b90:	mov	r0, r8
   17b94:	mov	r1, r6
   17b98:	add	r9, pc, r9
   17b9c:	bl	11ec4 <realloc@plt>
   17ba0:	str	r6, [r7]
   17ba4:	str	r5, [r7, #4]
   17ba8:	str	r0, [r9]
   17bac:	ldr	r5, [sl, #4]
   17bb0:	ldr	r6, [pc, #240]	; 17ca8 <read_boolean_unary_expression@@Base+0x13f0>
   17bb4:	mov	r8, r0
   17bb8:	ldr	r6, [pc, r6]
   17bbc:	add	r0, r8, r6
   17bc0:	mov	r1, #0
   17bc4:	mov	r2, r4
   17bc8:	bl	11f90 <memset@plt>
   17bcc:	adds	r0, r6, r4
   17bd0:	adc	r1, r5, #0
   17bd4:	strd	r0, [sl]
   17bd8:	sub	sp, fp, #28
   17bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17be0:	andeq	r5, r1, r0, lsr #19
   17be4:	andeq	r5, r1, r4, lsl #19
   17be8:	andeq	r5, r1, r0, lsl #19
   17bec:	andeq	r5, r1, r4, ror r9
   17bf0:	andeq	r5, r1, r0, ror r9
   17bf4:	andeq	r5, r1, r4, asr r9
   17bf8:	andeq	r5, r1, r8, lsl #18
   17bfc:	andeq	r5, r1, r4, lsl #18
   17c00:	strdeq	r5, [r1], -r0
   17c04:	andeq	r5, r1, r8, ror #17
   17c08:	ldrdeq	r5, [r1], -r0
   17c0c:	andeq	r5, r1, r8, lsl #17
   17c10:	andeq	r5, r1, r0, lsl #15
   17c14:	andeq	r5, r1, r8, ror r8
   17c18:	andeq	r5, r1, ip, ror #16
   17c1c:	andeq	r5, r1, r4, lsr r5
   17c20:	andeq	r5, r1, r8, lsr #16
   17c24:	strdeq	r5, [r1], -r8
   17c28:	strdeq	r5, [r1], -ip
   17c2c:	andeq	r5, r1, r8, ror #15
   17c30:	andeq	r5, r1, r0, lsl r5
   17c34:	andeq	r5, r1, ip, asr #9
   17c38:	muleq	r1, r8, r4
   17c3c:	muleq	r1, r8, r4
   17c40:	andeq	r5, r1, r4, lsr #8
   17c44:	andeq	r5, r1, r0, ror #7
   17c48:	andeq	r5, r1, r4, asr #7
   17c4c:	strdeq	r5, [r1], -r4
   17c50:	andeq	r5, r1, r4, ror #13
   17c54:	ldrdeq	r5, [r1], -r8
   17c58:	muleq	r1, r4, r6
   17c5c:	andeq	r5, r1, r0, lsl #13
   17c60:	andeq	r5, r1, r4, ror r6
   17c64:	andeq	r5, r1, r4, asr #12
   17c68:	andeq	r5, r1, ip, lsl #12
   17c6c:	strdeq	r5, [r1], -ip
   17c70:	strdeq	r5, [r1], -r0
   17c74:			; <UNDEFINED> instruction: 0x000153b0
   17c78:	muleq	r1, ip, r5
   17c7c:	muleq	r1, r0, r5
   17c80:	andeq	r5, r1, r0, ror r5
   17c84:	andeq	r5, r1, r8, ror r5
   17c88:	andeq	r5, r1, r8, asr r3
   17c8c:	andeq	r5, r1, ip, asr #6
   17c90:	andeq	r5, r1, r0, lsl #6
   17c94:	ldrdeq	r5, [r1], -ip
   17c98:	andeq	r5, r1, r0, ror #5
   17c9c:	andeq	r5, r1, ip, ror r2
   17ca0:	andeq	r5, r1, r0, ror r2
   17ca4:	andeq	r5, r1, r4, lsr #4
   17ca8:	andeq	r5, r1, r0, lsl r2
   17cac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cb0:	add	fp, sp, #28
   17cb4:	sub	sp, sp, #28
   17cb8:	mov	ip, r0
   17cbc:	ldr	r0, [pc, #1728]	; 18384 <read_boolean_unary_expression@@Base+0x1acc>
   17cc0:	ldr	r0, [pc, r0]
   17cc4:	cmp	r0, #0
   17cc8:	beq	17de4 <read_boolean_unary_expression@@Base+0x152c>
   17ccc:	ldr	r2, [pc, #1716]	; 18388 <read_boolean_unary_expression@@Base+0x1ad0>
   17cd0:	mov	sl, r1
   17cd4:	add	r2, pc, r2
   17cd8:	ldr	r3, [r2, #4]
   17cdc:	ldr	r4, [pc, #1704]	; 1838c <read_boolean_unary_expression@@Base+0x1ad4>
   17ce0:	ldr	r4, [pc, r4]
   17ce4:	ldr	r6, [pc, #1700]	; 18390 <read_boolean_unary_expression@@Base+0x1ad8>
   17ce8:	add	r6, pc, r6
   17cec:	ldrb	r0, [r6]
   17cf0:	cmp	r0, #0
   17cf4:	beq	17dec <read_boolean_unary_expression@@Base+0x1534>
   17cf8:	ldr	r8, [pc, #1720]	; 183b8 <read_boolean_unary_expression@@Base+0x1b00>
   17cfc:	mov	r5, #10551296	; 0xa10000
   17d00:	adds	r9, r4, #4
   17d04:	add	r8, pc, r8
   17d08:	adc	r2, r3, #0
   17d0c:	ldr	r0, [r8, #4]
   17d10:	ldr	r1, [pc, #1700]	; 183bc <read_boolean_unary_expression@@Base+0x1b04>
   17d14:	orr	r5, r5, #16777216	; 0x1000000
   17d18:	ldr	r1, [pc, r1]
   17d1c:	subs	r1, r1, r9
   17d20:	sbcs	r0, r0, r2
   17d24:	bcs	17efc <read_boolean_unary_expression@@Base+0x1644>
   17d28:	mov	r0, #3
   17d2c:	orr	r0, r0, #131072	; 0x20000
   17d30:	adds	r0, r4, r0
   17d34:	adc	r1, r3, #0
   17d38:	mvn	r2, #0
   17d3c:	and	r9, r1, r2
   17d40:	mov	r1, #16646144	; 0xfe0000
   17d44:	orr	r1, r1, #-16777216	; 0xff000000
   17d48:	and	r4, r0, r1
   17d4c:	ldr	r0, [pc, #1652]	; 183c8 <read_boolean_unary_expression@@Base+0x1b10>
   17d50:	mov	r1, r4
   17d54:	mov	r7, ip
   17d58:	ldr	r0, [pc, r0]
   17d5c:	bl	11ec4 <realloc@plt>
   17d60:	ldr	ip, [pc, #1636]	; 183cc <read_boolean_unary_expression@@Base+0x1b14>
   17d64:	ldr	lr, [pc, #1636]	; 183d0 <read_boolean_unary_expression@@Base+0x1b18>
   17d68:	stm	r8, {r4, r9}
   17d6c:	ldr	r1, [pc, #1632]	; 183d4 <read_boolean_unary_expression@@Base+0x1b1c>
   17d70:	add	ip, pc, ip
   17d74:	add	lr, pc, lr
   17d78:	add	r1, pc, r1
   17d7c:	mov	r2, r0
   17d80:	str	r2, [r1]
   17d84:	mov	r6, ip
   17d88:	ldrb	ip, [ip]
   17d8c:	ldr	r3, [lr, #4]
   17d90:	ldr	r4, [pc, #1600]	; 183d8 <read_boolean_unary_expression@@Base+0x1b20>
   17d94:	lsr	r0, r5, #24
   17d98:	mov	r1, r8
   17d9c:	ldr	r4, [pc, r4]
   17da0:	str	r2, [sp, #20]
   17da4:	lsl	r8, r7, #1
   17da8:	strb	r5, [r2, r4]!
   17dac:	adds	r9, r4, #4
   17db0:	strb	r0, [r2, #3]
   17db4:	lsr	r0, r5, #16
   17db8:	strb	r0, [r2, #2]
   17dbc:	lsr	r0, r5, #8
   17dc0:	strb	r0, [r2, #1]
   17dc4:	adc	r5, r3, #0
   17dc8:	mov	r0, #0
   17dcc:	cmp	ip, #1
   17dd0:	str	r3, [sp, #16]
   17dd4:	str	r9, [lr]
   17dd8:	str	r5, [lr, #4]
   17ddc:	beq	17f50 <read_boolean_unary_expression@@Base+0x1698>
   17de0:	b	180a0 <read_boolean_unary_expression@@Base+0x17e8>
   17de4:	sub	sp, fp, #28
   17de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17dec:	ldr	r0, [pc, #1440]	; 18394 <read_boolean_unary_expression@@Base+0x1adc>
   17df0:	mov	r7, r3
   17df4:	adds	r9, r4, #4
   17df8:	mov	lr, r2
   17dfc:	ldr	r0, [pc, r0]
   17e00:	str	r0, [sp, #20]
   17e04:	ldrb	r1, [r0, r4]!
   17e08:	str	r7, [sp, #16]
   17e0c:	ldrb	r5, [r0, #1]
   17e10:	ldrb	r3, [r0, #2]
   17e14:	ldrb	r0, [r0, #3]
   17e18:	orr	r1, r1, r5, lsl #8
   17e1c:	orr	r1, r1, r3, lsl #16
   17e20:	orr	r3, r1, r0, lsl #24
   17e24:	adc	r5, r7, #0
   17e28:	mov	r7, #0
   17e2c:	cmn	r3, #1
   17e30:	str	r9, [r2]
   17e34:	str	r5, [r2, #4]
   17e38:	beq	17ffc <read_boolean_unary_expression@@Base+0x1744>
   17e3c:	mov	r0, #10551296	; 0xa10000
   17e40:	orr	r0, r0, #16777216	; 0x1000000
   17e44:	cmp	r3, r0
   17e48:	bne	18008 <read_boolean_unary_expression@@Base+0x1750>
   17e4c:	str	r5, [sp, #8]
   17e50:	ldr	r0, [sp, #20]
   17e54:	str	r4, [sp, #4]
   17e58:	adds	r5, r4, #8
   17e5c:	ldr	r3, [r0, r9]
   17e60:	ldr	r0, [sp, #16]
   17e64:	mov	r1, r9
   17e68:	adc	r9, r0, #0
   17e6c:	cmn	r3, #1
   17e70:	stm	lr, {r5, r9}
   17e74:	beq	18014 <read_boolean_unary_expression@@Base+0x175c>
   17e78:	lsr	r0, r3, #1
   17e7c:	mov	r7, ip
   17e80:	cmp	r0, ip
   17e84:	bne	18014 <read_boolean_unary_expression@@Base+0x175c>
   17e88:	lsl	r0, r7, #3
   17e8c:	mov	r4, r1
   17e90:	bl	11f00 <malloc@plt>
   17e94:	mov	r1, r0
   17e98:	cmp	r7, #0
   17e9c:	beq	1803c <read_boolean_unary_expression@@Base+0x1784>
   17ea0:	mov	r0, r7
   17ea4:	str	r7, [sp, #24]
   17ea8:	str	r1, [sp, #12]
   17eac:	ldr	r2, [sp, #20]
   17eb0:	ldr	r3, [r2, r5]!
   17eb4:	adds	r5, r5, #8
   17eb8:	ldr	r2, [r2, #4]
   17ebc:	str	r3, [r1]
   17ec0:	adc	r9, r9, #0
   17ec4:	str	r2, [r1, #4]
   17ec8:	subs	r0, r0, #1
   17ecc:	add	r1, r1, #8
   17ed0:	bne	17eac <read_boolean_unary_expression@@Base+0x15f4>
   17ed4:	ldr	lr, [pc, #1236]	; 183b0 <read_boolean_unary_expression@@Base+0x1af8>
   17ed8:	add	lr, pc, lr
   17edc:	mov	r0, lr
   17ee0:	stm	r0, {r5, r9}
   17ee4:	ldr	ip, [pc, #1224]	; 183b4 <read_boolean_unary_expression@@Base+0x1afc>
   17ee8:	ldr	r0, [sp, #12]
   17eec:	add	ip, pc, ip
   17ef0:	mov	r6, ip
   17ef4:	ldr	ip, [sp, #24]
   17ef8:	b	18058 <read_boolean_unary_expression@@Base+0x17a0>
   17efc:	str	r3, [sp, #16]
   17f00:	ldr	r3, [pc, #1208]	; 183c0 <read_boolean_unary_expression@@Base+0x1b08>
   17f04:	mov	lr, r5
   17f08:	mov	r7, ip
   17f0c:	lsr	ip, r5, #16
   17f10:	ldr	r3, [pc, r3]
   17f14:	lsr	r1, r5, #8
   17f18:	str	r3, [sp, #20]
   17f1c:	strb	lr, [r3, r4]!
   17f20:	lsr	r0, lr, #24
   17f24:	strb	r1, [r3, #1]
   17f28:	strb	r0, [r3, #3]
   17f2c:	strb	ip, [r3, #2]
   17f30:	ldr	lr, [pc, #1164]	; 183c4 <read_boolean_unary_expression@@Base+0x1b0c>
   17f34:	lsl	r5, r7, #1
   17f38:	add	lr, pc, lr
   17f3c:	mov	r1, r8
   17f40:	mov	r8, r5
   17f44:	str	r9, [lr]
   17f48:	str	r2, [lr, #4]
   17f4c:	mov	r5, r2
   17f50:	str	r8, [sp, #24]
   17f54:	mov	r8, r1
   17f58:	ldr	r0, [sp, #16]
   17f5c:	ldr	r2, [r8, #4]
   17f60:	ldr	r3, [pc, #1140]	; 183dc <read_boolean_unary_expression@@Base+0x1b24>
   17f64:	adds	ip, r4, #8
   17f68:	adc	r1, r0, #0
   17f6c:	mov	r0, #0
   17f70:	ldr	r3, [pc, r3]
   17f74:	subs	r3, r3, ip
   17f78:	sbcs	r1, r2, r1
   17f7c:	bcs	17ff4 <read_boolean_unary_expression@@Base+0x173c>
   17f80:	ldr	r5, [pc, #1112]	; 183e0 <read_boolean_unary_expression@@Base+0x1b28>
   17f84:	mov	r0, #3
   17f88:	ldr	r1, [sp, #16]
   17f8c:	orr	r0, r0, #131072	; 0x20000
   17f90:	adds	r0, r4, r0
   17f94:	adc	r1, r1, #0
   17f98:	adds	r0, r0, #4
   17f9c:	adc	r1, r1, #0
   17fa0:	mvn	r2, #0
   17fa4:	and	r9, r1, r2
   17fa8:	mov	r1, #16646144	; 0xfe0000
   17fac:	orr	r1, r1, #-16777216	; 0xff000000
   17fb0:	and	r4, r0, r1
   17fb4:	ldr	r0, [sp, #20]
   17fb8:	mov	r1, r4
   17fbc:	add	r5, pc, r5
   17fc0:	bl	11ec4 <realloc@plt>
   17fc4:	ldr	ip, [pc, #1048]	; 183e4 <read_boolean_unary_expression@@Base+0x1b2c>
   17fc8:	ldr	lr, [pc, #1048]	; 183e8 <read_boolean_unary_expression@@Base+0x1b30>
   17fcc:	stm	r8, {r4, r9}
   17fd0:	add	lr, pc, lr
   17fd4:	str	r0, [r5]
   17fd8:	str	r0, [sp, #20]
   17fdc:	ldr	r5, [lr, #4]
   17fe0:	ldr	r9, [pc, #1028]	; 183ec <read_boolean_unary_expression@@Base+0x1b34>
   17fe4:	add	ip, pc, ip
   17fe8:	mov	r6, ip
   17fec:	mov	r0, #0
   17ff0:	ldr	r9, [pc, r9]
   17ff4:	ldr	r8, [sp, #24]
   17ff8:	b	180a0 <read_boolean_unary_expression@@Base+0x17e8>
   17ffc:	ldr	r1, [sp, #16]
   18000:	mov	r0, #0
   18004:	b	1806c <read_boolean_unary_expression@@Base+0x17b4>
   18008:	ldr	r1, [pc, #904]	; 18398 <read_boolean_unary_expression@@Base+0x1ae0>
   1800c:	add	r1, pc, r1
   18010:	b	1801c <read_boolean_unary_expression@@Base+0x1764>
   18014:	ldr	r1, [pc, #904]	; 183a4 <read_boolean_unary_expression@@Base+0x1aec>
   18018:	add	r1, pc, r1
   1801c:	ldr	r0, [pc, #888]	; 1839c <read_boolean_unary_expression@@Base+0x1ae4>
   18020:	ldr	r0, [pc, r0]
   18024:	ldr	r0, [r0]
   18028:	ldr	r2, [pc, #880]	; 183a0 <read_boolean_unary_expression@@Base+0x1ae8>
   1802c:	ldr	r2, [pc, r2]
   18030:	sub	sp, fp, #28
   18034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18038:	b	11f60 <fprintf@plt>
   1803c:	ldr	lr, [pc, #868]	; 183a8 <read_boolean_unary_expression@@Base+0x1af0>
   18040:	ldr	ip, [pc, #868]	; 183ac <read_boolean_unary_expression@@Base+0x1af4>
   18044:	mov	r0, r1
   18048:	add	lr, pc, lr
   1804c:	add	ip, pc, ip
   18050:	mov	r6, ip
   18054:	mov	ip, r7
   18058:	mov	r9, r4
   1805c:	ldr	r5, [sp, #8]
   18060:	ldr	r4, [sp, #4]
   18064:	ldr	r1, [sp, #16]
   18068:	mov	r7, #0
   1806c:	str	r4, [lr]
   18070:	str	r1, [lr, #4]
   18074:	ldr	r2, [sp, #20]
   18078:	mov	r1, #1
   1807c:	lsl	r8, ip, #1
   18080:	strb	r7, [r2, r4]!
   18084:	strb	r1, [r2, #3]
   18088:	mov	r1, #161	; 0xa1
   1808c:	strb	r7, [r2, #1]
   18090:	strb	r1, [r2, #2]
   18094:	str	r9, [lr]
   18098:	str	r5, [lr, #4]
   1809c:	mov	r7, ip
   180a0:	ldr	r3, [sp, #20]
   180a4:	lsr	r1, r8, #16
   180a8:	mov	ip, r3
   180ac:	strb	r8, [r3, r9]!
   180b0:	lsr	r4, r8, #24
   180b4:	lsr	r2, r8, #8
   180b8:	adds	r8, r9, #4
   180bc:	strb	r1, [r3, #2]
   180c0:	adc	r1, r5, #0
   180c4:	cmp	r7, #0
   180c8:	strb	r4, [r3, #3]
   180cc:	strb	r2, [r3, #1]
   180d0:	str	r8, [lr]
   180d4:	str	r1, [lr, #4]
   180d8:	str	r7, [sp, #24]
   180dc:	beq	18378 <read_boolean_unary_expression@@Base+0x1ac0>
   180e0:	ldr	r7, [pc, #776]	; 183f0 <read_boolean_unary_expression@@Base+0x1b38>
   180e4:	mov	r4, lr
   180e8:	mov	r2, r0
   180ec:	add	r7, pc, r7
   180f0:	str	r0, [sp, #12]
   180f4:	cmp	r0, #0
   180f8:	mov	r0, r4
   180fc:	str	r2, [sp, #16]
   18100:	beq	1810c <read_boolean_unary_expression@@Base+0x1854>
   18104:	ldrd	r2, [r2]
   18108:	b	18114 <read_boolean_unary_expression@@Base+0x185c>
   1810c:	mov	r2, #0
   18110:	mov	r3, #0
   18114:	ldrd	r4, [sl]
   18118:	adds	r4, r4, r2
   1811c:	adc	r5, r5, r3
   18120:	strd	r4, [sl]
   18124:	ldrb	r2, [r6]
   18128:	str	sl, [sp, #20]
   1812c:	cmp	r2, #0
   18130:	beq	181fc <read_boolean_unary_expression@@Base+0x1944>
   18134:	ldr	r3, [r7, #4]
   18138:	ldr	r6, [pc, #692]	; 183f4 <read_boolean_unary_expression@@Base+0x1b3c>
   1813c:	adds	r2, r8, #4
   18140:	adc	r9, r1, #0
   18144:	ldr	r6, [pc, r6]
   18148:	subs	r2, r6, r2
   1814c:	sbcs	r2, r3, r9
   18150:	bcs	18238 <read_boolean_unary_expression@@Base+0x1980>
   18154:	mov	r2, #3
   18158:	orr	r2, r2, #131072	; 0x20000
   1815c:	adds	r0, r8, r2
   18160:	adc	r1, r1, #0
   18164:	mvn	r2, #0
   18168:	and	r8, r1, r2
   1816c:	mov	r1, #16646144	; 0xfe0000
   18170:	orr	r1, r1, #-16777216	; 0xff000000
   18174:	and	r6, r0, r1
   18178:	mov	r0, ip
   1817c:	mov	r1, r6
   18180:	bl	11ec4 <realloc@plt>
   18184:	ldr	ip, [pc, #620]	; 183f8 <read_boolean_unary_expression@@Base+0x1b40>
   18188:	ldr	lr, [pc, #620]	; 183fc <read_boolean_unary_expression@@Base+0x1b44>
   1818c:	stm	r7, {r6, r8}
   18190:	mov	r3, r0
   18194:	ldr	r0, [pc, #612]	; 18400 <read_boolean_unary_expression@@Base+0x1b48>
   18198:	add	lr, pc, lr
   1819c:	mov	r9, lr
   181a0:	add	r0, pc, r0
   181a4:	add	ip, pc, ip
   181a8:	str	r3, [r0]
   181ac:	mov	lr, ip
   181b0:	ldrb	ip, [ip]
   181b4:	ldr	r1, [r9, #4]
   181b8:	ldr	r8, [pc, #580]	; 18404 <read_boolean_unary_expression@@Base+0x1b4c>
   181bc:	mov	r7, r3
   181c0:	lsr	r2, r4, #24
   181c4:	ldr	r8, [pc, r8]
   181c8:	lsr	r6, r4, #16
   181cc:	strb	r4, [r7, r8]!
   181d0:	strb	r2, [r7, #3]
   181d4:	lsr	r2, r4, #8
   181d8:	strb	r2, [r7, #1]
   181dc:	adds	r2, r8, #4
   181e0:	mov	r4, r9
   181e4:	adc	r9, r1, #0
   181e8:	cmp	ip, #1
   181ec:	strb	r6, [r7, #2]
   181f0:	stm	r4, {r2, r9}
   181f4:	beq	1826c <read_boolean_unary_expression@@Base+0x19b4>
   181f8:	b	18318 <read_boolean_unary_expression@@Base+0x1a60>
   181fc:	mov	r7, ip
   18200:	lsr	r2, r4, #24
   18204:	strb	r4, [r7, r8]!
   18208:	lsr	r9, r4, #16
   1820c:	strb	r2, [r7, #3]
   18210:	adds	r2, r8, #4
   18214:	mov	lr, r6
   18218:	lsr	r6, r4, #8
   1821c:	strb	r9, [r7, #2]
   18220:	adc	r9, r1, #0
   18224:	mov	r4, r0
   18228:	strb	r6, [r7, #1]
   1822c:	mov	r3, ip
   18230:	stm	r4, {r2, r9}
   18234:	b	18318 <read_boolean_unary_expression@@Base+0x1a60>
   18238:	mov	r6, ip
   1823c:	lsr	r2, r4, #24
   18240:	strb	r4, [r6, r8]!
   18244:	lsr	r9, r4, #16
   18248:	strb	r2, [r6, #3]
   1824c:	adds	r2, r8, #4
   18250:	lsr	r7, r4, #8
   18254:	strb	r9, [r6, #2]
   18258:	adc	r9, r1, #0
   1825c:	mov	r4, r0
   18260:	strb	r7, [r6, #1]
   18264:	mov	r3, ip
   18268:	stm	r4, {r2, r9}
   1826c:	ldr	lr, [pc, #404]	; 18408 <read_boolean_unary_expression@@Base+0x1b50>
   18270:	mov	r0, r4
   18274:	adds	r7, r8, #8
   18278:	add	lr, pc, lr
   1827c:	adc	ip, r1, #0
   18280:	ldr	r4, [lr, #4]
   18284:	ldr	r6, [pc, #384]	; 1840c <read_boolean_unary_expression@@Base+0x1b54>
   18288:	ldr	r6, [pc, r6]
   1828c:	subs	r7, r6, r7
   18290:	sbcs	r7, r4, ip
   18294:	bcs	1830c <read_boolean_unary_expression@@Base+0x1a54>
   18298:	mov	r2, #3
   1829c:	orr	r2, r2, #131072	; 0x20000
   182a0:	adds	r0, r8, r2
   182a4:	adc	r1, r1, #0
   182a8:	adds	r0, r0, #4
   182ac:	adc	r1, r1, #0
   182b0:	mvn	r2, #0
   182b4:	and	r7, r1, r2
   182b8:	mov	r1, #16646144	; 0xfe0000
   182bc:	orr	r1, r1, #-16777216	; 0xff000000
   182c0:	and	r6, r0, r1
   182c4:	mov	r0, r3
   182c8:	mov	r1, r6
   182cc:	mov	r8, lr
   182d0:	bl	11ec4 <realloc@plt>
   182d4:	ldr	lr, [pc, #312]	; 18414 <read_boolean_unary_expression@@Base+0x1b5c>
   182d8:	strd	r6, [r8]
   182dc:	mov	r3, r0
   182e0:	add	lr, pc, lr
   182e4:	mov	r4, lr
   182e8:	ldr	r9, [lr, #4]
   182ec:	ldr	r0, [pc, #292]	; 18418 <read_boolean_unary_expression@@Base+0x1b60>
   182f0:	add	r0, pc, r0
   182f4:	str	r3, [r0]
   182f8:	ldr	r2, [pc, #284]	; 1841c <read_boolean_unary_expression@@Base+0x1b64>
   182fc:	ldr	r2, [pc, r2]
   18300:	ldr	lr, [pc, #280]	; 18420 <read_boolean_unary_expression@@Base+0x1b68>
   18304:	add	lr, pc, lr
   18308:	b	18318 <read_boolean_unary_expression@@Base+0x1a60>
   1830c:	ldr	lr, [pc, #252]	; 18410 <read_boolean_unary_expression@@Base+0x1b58>
   18310:	mov	r4, r0
   18314:	add	lr, pc, lr
   18318:	mov	ip, r3
   1831c:	lsr	r1, r5, #16
   18320:	strb	r5, [r3, r2]!
   18324:	lsr	r0, r5, #24
   18328:	lsr	r7, r5, #8
   1832c:	adds	r8, r2, #4
   18330:	strb	r1, [r3, #2]
   18334:	adc	r1, r9, #0
   18338:	strb	r0, [r3, #3]
   1833c:	strb	r7, [r3, #1]
   18340:	str	r8, [r4]
   18344:	str	r1, [r4, #4]
   18348:	ldr	r0, [sp, #24]
   1834c:	mov	r6, lr
   18350:	subs	r0, r0, #1
   18354:	str	r0, [sp, #24]
   18358:	ldr	sl, [sp, #20]
   1835c:	ldr	r2, [sp, #16]
   18360:	ldr	r0, [sp, #12]
   18364:	ldr	r7, [pc, #184]	; 18424 <read_boolean_unary_expression@@Base+0x1b6c>
   18368:	add	sl, sl, #8
   1836c:	add	r2, r2, #8
   18370:	add	r7, pc, r7
   18374:	bne	180f4 <read_boolean_unary_expression@@Base+0x183c>
   18378:	sub	sp, fp, #28
   1837c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18380:	b	11e7c <free@plt>
   18384:	strdeq	r5, [r1], -r8
   18388:	strdeq	r5, [r1], -r4
   1838c:	andeq	r5, r1, r8, ror #1
   18390:	andeq	r5, r1, ip, asr #1
   18394:	andeq	r4, r1, r0, asr #31
   18398:	andeq	r3, r0, r4, asr #4
   1839c:	muleq	r1, r4, r0
   183a0:	andeq	r4, r1, r4, lsl #27
   183a4:	andeq	r3, r0, r2, lsl #5
   183a8:	andeq	r4, r1, r0, lsl #27
   183ac:	andeq	r4, r1, r8, ror #26
   183b0:	strdeq	r4, [r1], -r0
   183b4:	andeq	r4, r1, r8, asr #29
   183b8:	strheq	r5, [r1], -ip
   183bc:	andeq	r5, r1, r8, lsr #1
   183c0:	andeq	r4, r1, ip, lsr #29
   183c4:	muleq	r1, r0, lr
   183c8:	andeq	r5, r1, r4, rrx
   183cc:	andeq	r5, r1, r4, asr #32
   183d0:	andeq	r5, r1, r4, asr r0
   183d4:	andeq	r5, r1, r4, asr #32
   183d8:	andeq	r5, r1, ip, lsr #32
   183dc:	andeq	r4, r1, r0, asr lr
   183e0:	andeq	r4, r1, r0, lsl #28
   183e4:	ldrdeq	r4, [r1], -r0
   183e8:	strdeq	r4, [r1], -r8
   183ec:	ldrdeq	r4, [r1], -r8
   183f0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   183f4:	andeq	r4, r1, ip, ror ip
   183f8:	andeq	r4, r1, r0, lsl ip
   183fc:	andeq	r4, r1, r0, lsr ip
   18400:	andeq	r4, r1, ip, lsl ip
   18404:	andeq	r4, r1, r4, lsl #24
   18408:	andeq	r4, r1, r8, asr #22
   1840c:	andeq	r4, r1, r8, lsr fp
   18410:	andeq	r4, r1, r0, lsr #21
   18414:	andeq	r4, r1, r8, ror #21
   18418:	andeq	r4, r1, ip, asr #21
   1841c:	andeq	r4, r1, ip, asr #21
   18420:			; <UNDEFINED> instruction: 0x00014ab0
   18424:	andeq	r4, r1, r0, asr sl
   18428:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1842c:	add	fp, sp, #28
   18430:	sub	sp, sp, #4
   18434:	ldr	r0, [pc, #3180]	; 190a8 <read_boolean_unary_expression@@Base+0x27f0>
   18438:	ldr	r0, [pc, r0]
   1843c:	cmp	r0, #0
   18440:	beq	18a9c <read_boolean_unary_expression@@Base+0x21e4>
   18444:	ldr	sl, [pc, #3168]	; 190ac <read_boolean_unary_expression@@Base+0x27f4>
   18448:	add	sl, pc, sl
   1844c:	ldr	r6, [sl, #4]
   18450:	ldr	r5, [pc, #3160]	; 190b0 <read_boolean_unary_expression@@Base+0x27f8>
   18454:	ldr	r5, [pc, r5]
   18458:	ldr	r8, [pc, #3156]	; 190b4 <read_boolean_unary_expression@@Base+0x27fc>
   1845c:	add	r8, pc, r8
   18460:	ldrb	r0, [r8]
   18464:	cmp	r0, #0
   18468:	beq	1852c <read_boolean_unary_expression@@Base+0x1c74>
   1846c:	ldr	r9, [pc, #3164]	; 190d0 <read_boolean_unary_expression@@Base+0x2818>
   18470:	adds	r2, r5, #4
   18474:	adc	ip, r6, #0
   18478:	add	r9, pc, r9
   1847c:	ldr	r0, [r9, #4]
   18480:	ldr	r3, [pc, #3148]	; 190d4 <read_boolean_unary_expression@@Base+0x281c>
   18484:	ldr	r3, [pc, r3]
   18488:	subs	r3, r3, r2
   1848c:	sbcs	r0, r0, ip
   18490:	bcs	18580 <read_boolean_unary_expression@@Base+0x1cc8>
   18494:	mov	r0, #7
   18498:	orr	r0, r0, #131072	; 0x20000
   1849c:	adds	r0, r5, r0
   184a0:	adc	r1, r6, #0
   184a4:	subs	r0, r0, #4
   184a8:	sbc	r1, r1, #0
   184ac:	mvn	r2, #0
   184b0:	and	r5, r1, r2
   184b4:	mov	r1, #16646144	; 0xfe0000
   184b8:	orr	r1, r1, #-16777216	; 0xff000000
   184bc:	ldr	r4, [pc, #3096]	; 190dc <read_boolean_unary_expression@@Base+0x2824>
   184c0:	and	r6, r0, r1
   184c4:	ldr	r0, [pc, #3092]	; 190e0 <read_boolean_unary_expression@@Base+0x2828>
   184c8:	mov	r1, r6
   184cc:	add	r4, pc, r4
   184d0:	ldr	r0, [pc, r0]
   184d4:	bl	11ec4 <realloc@plt>
   184d8:	str	r6, [r9]
   184dc:	str	r5, [r9, #4]
   184e0:	str	r0, [r4]
   184e4:	ldrb	r3, [r8]
   184e8:	ldr	r6, [sl, #4]
   184ec:	ldr	r5, [pc, #3056]	; 190e4 <read_boolean_unary_expression@@Base+0x282c>
   184f0:	mov	r2, r0
   184f4:	mov	r1, #0
   184f8:	mov	r7, #161	; 0xa1
   184fc:	ldr	r5, [pc, r5]
   18500:	strb	r1, [r2, r5]!
   18504:	strb	r7, [r2, #3]
   18508:	strb	r1, [r2, #2]
   1850c:	strb	r1, [r2, #1]
   18510:	adds	r2, r5, #4
   18514:	adc	ip, r6, #0
   18518:	mov	r7, #1
   1851c:	cmp	r3, #1
   18520:	stm	sl, {r2, ip}
   18524:	beq	185a8 <read_boolean_unary_expression@@Base+0x1cf0>
   18528:	b	18780 <read_boolean_unary_expression@@Base+0x1ec8>
   1852c:	ldr	r0, [pc, #2948]	; 190b8 <read_boolean_unary_expression@@Base+0x2800>
   18530:	ldr	r0, [pc, r0]
   18534:	mov	r1, r0
   18538:	ldrb	r2, [r1, r5]!
   1853c:	ldrb	r3, [r1, #1]
   18540:	ldrb	r7, [r1, #2]
   18544:	ldrb	r1, [r1, #3]
   18548:	orr	r2, r2, r3, lsl #8
   1854c:	orr	r2, r2, r7, lsl #16
   18550:	orr	r3, r2, r1, lsl #24
   18554:	adds	r2, r5, #4
   18558:	adc	ip, r6, #0
   1855c:	cmp	r3, #-1593835520	; 0xa1000000
   18560:	stm	sl, {r2, ip}
   18564:	beq	18720 <read_boolean_unary_expression@@Base+0x1e68>
   18568:	mov	r7, #1
   1856c:	cmn	r3, #1
   18570:	beq	18760 <read_boolean_unary_expression@@Base+0x1ea8>
   18574:	ldr	r1, [pc, #2880]	; 190bc <read_boolean_unary_expression@@Base+0x2804>
   18578:	add	r1, pc, r1
   1857c:	b	18e60 <read_boolean_unary_expression@@Base+0x25a8>
   18580:	ldr	r0, [pc, #2896]	; 190d8 <read_boolean_unary_expression@@Base+0x2820>
   18584:	mov	r3, #0
   18588:	mov	r4, #161	; 0xa1
   1858c:	ldr	r0, [pc, r0]
   18590:	mov	r7, r0
   18594:	strb	r3, [r7, r5]!
   18598:	strb	r4, [r7, #3]
   1859c:	strb	r3, [r7, #2]
   185a0:	strb	r3, [r7, #1]
   185a4:	stm	sl, {r2, ip}
   185a8:	ldr	r4, [r9, #4]
   185ac:	ldr	r1, [pc, #2868]	; 190e8 <read_boolean_unary_expression@@Base+0x2830>
   185b0:	adds	r3, r5, #8
   185b4:	adc	r7, r6, #0
   185b8:	ldr	r1, [pc, r1]
   185bc:	subs	r1, r1, r3
   185c0:	sbcs	r1, r4, r7
   185c4:	bcs	18650 <read_boolean_unary_expression@@Base+0x1d98>
   185c8:	mov	r1, #7
   185cc:	orr	r1, r1, #131072	; 0x20000
   185d0:	adds	r1, r5, r1
   185d4:	adc	r2, r6, #0
   185d8:	mvn	r3, #0
   185dc:	and	r5, r2, r3
   185e0:	mov	r2, #16646144	; 0xfe0000
   185e4:	orr	r2, r2, #-16777216	; 0xff000000
   185e8:	ldr	r4, [pc, #2812]	; 190ec <read_boolean_unary_expression@@Base+0x2834>
   185ec:	and	r6, r1, r2
   185f0:	mov	r1, r6
   185f4:	add	r4, pc, r4
   185f8:	bl	11ec4 <realloc@plt>
   185fc:	str	r6, [r9]
   18600:	str	r5, [r9, #4]
   18604:	str	r0, [r4]
   18608:	ldrb	r1, [r8]
   1860c:	ldr	ip, [sl, #4]
   18610:	ldr	r2, [pc, #2776]	; 190f0 <read_boolean_unary_expression@@Base+0x2838>
   18614:	mov	r7, r0
   18618:	mov	r3, #9
   1861c:	ldr	r2, [pc, r2]
   18620:	strb	r3, [r7, r2]!
   18624:	mov	r3, #0
   18628:	strb	r3, [r7, #3]
   1862c:	strb	r3, [r7, #2]
   18630:	strb	r3, [r7, #1]
   18634:	adds	r3, r2, #4
   18638:	adc	r5, ip, #0
   1863c:	mov	r7, #1
   18640:	cmp	r1, #1
   18644:	stm	sl, {r3, r5}
   18648:	beq	18678 <read_boolean_unary_expression@@Base+0x1dc0>
   1864c:	b	187a8 <read_boolean_unary_expression@@Base+0x1ef0>
   18650:	mov	r3, r0
   18654:	mov	r1, #9
   18658:	strb	r1, [r3, r2]!
   1865c:	mov	r1, #0
   18660:	strb	r1, [r3, #3]
   18664:	strb	r1, [r3, #2]
   18668:	strb	r1, [r3, #1]
   1866c:	adds	r3, r2, #4
   18670:	adc	r5, ip, #0
   18674:	stm	sl, {r3, r5}
   18678:	ldr	r6, [r9, #4]
   1867c:	ldr	r4, [pc, #2672]	; 190f4 <read_boolean_unary_expression@@Base+0x283c>
   18680:	adds	r1, r2, #8
   18684:	adc	r7, ip, #0
   18688:	ldr	r4, [pc, r4]
   1868c:	subs	r1, r4, r1
   18690:	sbcs	r1, r6, r7
   18694:	bcs	18b6c <read_boolean_unary_expression@@Base+0x22b4>
   18698:	mov	r1, #7
   1869c:	orr	r1, r1, #131072	; 0x20000
   186a0:	adds	r1, r2, r1
   186a4:	adc	r2, ip, #0
   186a8:	mvn	r3, #0
   186ac:	and	r5, r2, r3
   186b0:	mov	r2, #16646144	; 0xfe0000
   186b4:	orr	r2, r2, #-16777216	; 0xff000000
   186b8:	ldr	r4, [pc, #2616]	; 190f8 <read_boolean_unary_expression@@Base+0x2840>
   186bc:	and	r6, r1, r2
   186c0:	mov	r1, r6
   186c4:	add	r4, pc, r4
   186c8:	bl	11ec4 <realloc@plt>
   186cc:	str	r6, [r9]
   186d0:	str	r5, [r9, #4]
   186d4:	str	r0, [r4]
   186d8:	ldrb	r2, [r8]
   186dc:	ldr	r5, [sl, #4]
   186e0:	ldr	r3, [pc, #2580]	; 190fc <read_boolean_unary_expression@@Base+0x2844>
   186e4:	mov	r7, r0
   186e8:	mov	r1, #0
   186ec:	ldr	r3, [pc, r3]
   186f0:	adds	r6, r3, #4
   186f4:	strb	r1, [r7, r3]!
   186f8:	strb	r1, [r7, #3]
   186fc:	strb	r1, [r7, #2]
   18700:	strb	r1, [r7, #1]
   18704:	adc	r1, r5, #0
   18708:	mov	r7, #1
   1870c:	cmp	r2, #1
   18710:	str	r6, [sl]
   18714:	str	r1, [sl, #4]
   18718:	bne	187d0 <read_boolean_unary_expression@@Base+0x1f18>
   1871c:	b	18b94 <read_boolean_unary_expression@@Base+0x22dc>
   18720:	ldr	r3, [r0, r2]
   18724:	adds	r4, r5, #8
   18728:	adc	r7, r6, #0
   1872c:	cmp	r3, #9
   18730:	stm	sl, {r4, r7}
   18734:	bne	18e58 <read_boolean_unary_expression@@Base+0x25a0>
   18738:	ldr	r3, [pc, #2444]	; 190cc <read_boolean_unary_expression@@Base+0x2814>
   1873c:	adds	r4, r5, #20
   18740:	adc	r7, r6, #0
   18744:	add	r3, pc, r3
   18748:	add	r6, r0, r5
   1874c:	ldrb	r3, [r3]
   18750:	ldr	r6, [r6, #16]
   18754:	stm	sl, {r4, r7}
   18758:	eor	r3, r3, #1
   1875c:	add	r7, r6, r3
   18760:	mov	r6, r0
   18764:	mov	r3, #0
   18768:	strb	r3, [r6, r5]!
   1876c:	mov	r5, #161	; 0xa1
   18770:	strb	r5, [r6, #3]
   18774:	strb	r3, [r6, #2]
   18778:	strb	r3, [r6, #1]
   1877c:	stm	sl, {r2, ip}
   18780:	mov	r3, r0
   18784:	mov	r1, #9
   18788:	strb	r1, [r3, r2]!
   1878c:	mov	r1, #0
   18790:	strb	r1, [r3, #3]
   18794:	strb	r1, [r3, #2]
   18798:	strb	r1, [r3, #1]
   1879c:	adds	r3, r2, #4
   187a0:	adc	r5, ip, #0
   187a4:	stm	sl, {r3, r5}
   187a8:	mov	r2, r0
   187ac:	mov	r1, #0
   187b0:	strb	r1, [r2, r3]!
   187b4:	adds	r6, r3, #4
   187b8:	strb	r1, [r2, #3]
   187bc:	strb	r1, [r2, #2]
   187c0:	strb	r1, [r2, #1]
   187c4:	adc	r1, r5, #0
   187c8:	str	r6, [sl]
   187cc:	str	r1, [sl, #4]
   187d0:	mov	r3, r0
   187d4:	mov	r2, #0
   187d8:	strb	r2, [r3, r6]!
   187dc:	strb	r2, [r3, #3]
   187e0:	strb	r2, [r3, #2]
   187e4:	strb	r2, [r3, #1]
   187e8:	adds	r2, r6, #4
   187ec:	adc	r3, r1, #0
   187f0:	strd	r2, [sl]
   187f4:	lsr	r1, r7, #24
   187f8:	strb	r7, [r0, r2]!
   187fc:	lsr	r6, r7, #16
   18800:	lsr	r5, r7, #8
   18804:	strb	r1, [r0, #3]
   18808:	strb	r6, [r0, #2]
   1880c:	strb	r5, [r0, #1]
   18810:	ldrb	r0, [r8]
   18814:	adds	r4, r2, #4
   18818:	adc	r5, r3, #0
   1881c:	cmp	r0, #0
   18820:	strd	r4, [sl]
   18824:	beq	188d8 <read_boolean_unary_expression@@Base+0x2020>
   18828:	ldr	r9, [pc, #2284]	; 1911c <read_boolean_unary_expression@@Base+0x2864>
   1882c:	adds	r0, r2, #8
   18830:	adc	r1, r3, #0
   18834:	add	r9, pc, r9
   18838:	ldr	r7, [r9, #4]
   1883c:	ldr	r6, [pc, #2268]	; 19120 <read_boolean_unary_expression@@Base+0x2868>
   18840:	ldr	r6, [pc, r6]
   18844:	subs	r0, r6, r0
   18848:	sbcs	r0, r7, r1
   1884c:	bcs	18aa4 <read_boolean_unary_expression@@Base+0x21ec>
   18850:	mov	r0, #7
   18854:	orr	r0, r0, #131072	; 0x20000
   18858:	adds	r0, r2, r0
   1885c:	adc	r1, r3, #0
   18860:	mvn	r2, #0
   18864:	and	r5, r1, r2
   18868:	mov	r1, #16646144	; 0xfe0000
   1886c:	orr	r1, r1, #-16777216	; 0xff000000
   18870:	ldr	r4, [pc, #2268]	; 19154 <read_boolean_unary_expression@@Base+0x289c>
   18874:	and	r6, r0, r1
   18878:	ldr	r0, [pc, #2264]	; 19158 <read_boolean_unary_expression@@Base+0x28a0>
   1887c:	mov	r1, r6
   18880:	add	r4, pc, r4
   18884:	ldr	r0, [pc, r0]
   18888:	bl	11ec4 <realloc@plt>
   1888c:	str	r6, [r9]
   18890:	str	r5, [r9, #4]
   18894:	str	r0, [r4]
   18898:	ldrb	r1, [r8]
   1889c:	ldr	r5, [sl, #4]
   188a0:	ldr	r4, [pc, #2228]	; 1915c <read_boolean_unary_expression@@Base+0x28a4>
   188a4:	mov	r3, r0
   188a8:	mov	r2, #0
   188ac:	ldr	r4, [pc, r4]
   188b0:	strb	r2, [r3, r4]!
   188b4:	strb	r2, [r3, #3]
   188b8:	strb	r2, [r3, #2]
   188bc:	strb	r2, [r3, #1]
   188c0:	adds	r2, r4, #4
   188c4:	adc	r3, r5, #0
   188c8:	cmp	r1, #0
   188cc:	strd	r2, [sl]
   188d0:	beq	18904 <read_boolean_unary_expression@@Base+0x204c>
   188d4:	b	18ad0 <read_boolean_unary_expression@@Base+0x2218>
   188d8:	ldr	r0, [pc, #2104]	; 19118 <read_boolean_unary_expression@@Base+0x2860>
   188dc:	adds	r2, r2, #8
   188e0:	mov	r1, #0
   188e4:	adc	r3, r3, #0
   188e8:	ldr	r0, [pc, r0]
   188ec:	mov	r7, r0
   188f0:	strb	r1, [r7, r4]!
   188f4:	strb	r1, [r7, #3]
   188f8:	strb	r1, [r7, #2]
   188fc:	strb	r1, [r7, #1]
   18900:	strd	r2, [sl]
   18904:	mov	r7, r0
   18908:	mov	r1, #0
   1890c:	strb	r1, [r7, r2]!
   18910:	strb	r1, [r7, #3]
   18914:	strb	r1, [r7, #2]
   18918:	strb	r1, [r7, #1]
   1891c:	adds	r1, r2, #4
   18920:	adc	r5, r3, #0
   18924:	stm	sl, {r1, r5}
   18928:	mov	r3, r0
   1892c:	mov	r2, #0
   18930:	strb	r2, [r3, r1]!
   18934:	strb	r2, [r3, #3]
   18938:	strb	r2, [r3, #2]
   1893c:	strb	r2, [r3, #1]
   18940:	adds	r2, r1, #4
   18944:	adc	r3, r5, #0
   18948:	strd	r2, [sl]
   1894c:	mov	r7, r0
   18950:	mov	r1, #0
   18954:	strb	r1, [r7, r2]!
   18958:	strb	r1, [r7, #3]
   1895c:	strb	r1, [r7, #2]
   18960:	strb	r1, [r7, #1]
   18964:	adds	r1, r2, #4
   18968:	adc	r5, r3, #0
   1896c:	stm	sl, {r1, r5}
   18970:	mov	r3, r0
   18974:	mov	r2, #0
   18978:	strb	r2, [r3, r1]!
   1897c:	adds	r4, r1, #4
   18980:	strb	r2, [r3, #3]
   18984:	strb	r2, [r3, #2]
   18988:	strb	r2, [r3, #1]
   1898c:	adc	r3, r5, #0
   18990:	str	r4, [sl]
   18994:	str	r3, [sl, #4]
   18998:	mov	r2, r0
   1899c:	mov	r1, #0
   189a0:	strb	r1, [r2, r4]!
   189a4:	strb	r1, [r2, #3]
   189a8:	strb	r1, [r2, #2]
   189ac:	strb	r1, [r2, #1]
   189b0:	adds	r2, r4, #4
   189b4:	adc	r1, r3, #0
   189b8:	str	r2, [sl]
   189bc:	str	r1, [sl, #4]
   189c0:	mov	r3, r0
   189c4:	mov	r4, #0
   189c8:	strb	r4, [r3, r2]!
   189cc:	mov	r7, #163	; 0xa3
   189d0:	strb	r7, [r3, #3]
   189d4:	strb	r4, [r3, #2]
   189d8:	strb	r4, [r3, #1]
   189dc:	ldrb	r7, [r8]
   189e0:	adds	r6, r2, #4
   189e4:	adc	r3, r1, #0
   189e8:	cmp	r7, #1
   189ec:	str	r6, [sl]
   189f0:	str	r3, [sl, #4]
   189f4:	bne	18a68 <read_boolean_unary_expression@@Base+0x21b0>
   189f8:	ldr	r8, [pc, #1852]	; 1913c <read_boolean_unary_expression@@Base+0x2884>
   189fc:	adds	lr, r2, #8
   18a00:	adc	ip, r1, #0
   18a04:	add	r8, pc, r8
   18a08:	ldr	r5, [r8, #4]
   18a0c:	ldr	r7, [pc, #1836]	; 19140 <read_boolean_unary_expression@@Base+0x2888>
   18a10:	ldr	r7, [pc, r7]
   18a14:	subs	r7, r7, lr
   18a18:	sbcs	r7, r5, ip
   18a1c:	bcs	18a68 <read_boolean_unary_expression@@Base+0x21b0>
   18a20:	mov	r3, #7
   18a24:	orr	r3, r3, #131072	; 0x20000
   18a28:	adds	r2, r2, r3
   18a2c:	adc	r1, r1, #0
   18a30:	mvn	r3, #0
   18a34:	and	r7, r1, r3
   18a38:	mov	r1, #16646144	; 0xfe0000
   18a3c:	orr	r1, r1, #-16777216	; 0xff000000
   18a40:	ldr	r5, [pc, #1788]	; 19144 <read_boolean_unary_expression@@Base+0x288c>
   18a44:	and	r6, r2, r1
   18a48:	mov	r1, r6
   18a4c:	add	r5, pc, r5
   18a50:	bl	11ec4 <realloc@plt>
   18a54:	strd	r6, [r8]
   18a58:	str	r0, [r5]
   18a5c:	ldr	r3, [sl, #4]
   18a60:	ldr	r6, [pc, #1760]	; 19148 <read_boolean_unary_expression@@Base+0x2890>
   18a64:	ldr	r6, [pc, r6]
   18a68:	ldr	r0, [pc, #1756]	; 1914c <read_boolean_unary_expression@@Base+0x2894>
   18a6c:	ldr	r1, [pc, #1756]	; 19150 <read_boolean_unary_expression@@Base+0x2898>
   18a70:	adds	r2, r6, #4
   18a74:	add	r0, pc, r0
   18a78:	adc	r3, r3, #0
   18a7c:	ldr	r1, [pc, r1]
   18a80:	strb	r4, [r1, r6]!
   18a84:	strb	r4, [r1, #3]
   18a88:	strb	r4, [r1, #2]
   18a8c:	strb	r4, [r1, #1]
   18a90:	mov	r1, #1
   18a94:	strd	r2, [sl]
   18a98:	strb	r1, [r0]
   18a9c:	sub	sp, fp, #28
   18aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18aa4:	ldr	r0, [pc, #1656]	; 19124 <read_boolean_unary_expression@@Base+0x286c>
   18aa8:	adds	r2, r2, #8
   18aac:	mov	r1, #0
   18ab0:	adc	r3, r3, #0
   18ab4:	ldr	r0, [pc, r0]
   18ab8:	mov	r7, r0
   18abc:	strb	r1, [r7, r4]!
   18ac0:	strb	r1, [r7, #3]
   18ac4:	strb	r1, [r7, #2]
   18ac8:	strb	r1, [r7, #1]
   18acc:	strd	r2, [sl]
   18ad0:	ldr	r6, [r9, #4]
   18ad4:	ldr	r1, [pc, #1668]	; 19160 <read_boolean_unary_expression@@Base+0x28a8>
   18ad8:	adds	ip, r4, #8
   18adc:	adc	r7, r5, #0
   18ae0:	ldr	r1, [pc, r1]
   18ae4:	subs	r1, r1, ip
   18ae8:	sbcs	r1, r6, r7
   18aec:	bcs	18c38 <read_boolean_unary_expression@@Base+0x2380>
   18af0:	mov	r1, #7
   18af4:	orr	r1, r1, #131072	; 0x20000
   18af8:	adds	r1, r4, r1
   18afc:	adc	r2, r5, #0
   18b00:	mvn	r3, #0
   18b04:	and	r5, r2, r3
   18b08:	mov	r2, #16646144	; 0xfe0000
   18b0c:	orr	r2, r2, #-16777216	; 0xff000000
   18b10:	ldr	r6, [pc, #1612]	; 19164 <read_boolean_unary_expression@@Base+0x28ac>
   18b14:	and	r4, r1, r2
   18b18:	mov	r1, r4
   18b1c:	add	r6, pc, r6
   18b20:	bl	11ec4 <realloc@plt>
   18b24:	str	r0, [r6]
   18b28:	strd	r4, [r9]
   18b2c:	ldrb	r7, [r8]
   18b30:	ldr	r3, [sl, #4]
   18b34:	ldr	r2, [pc, #1580]	; 19168 <read_boolean_unary_expression@@Base+0x28b0>
   18b38:	mov	r6, r0
   18b3c:	mov	r1, #0
   18b40:	ldr	r2, [pc, r2]
   18b44:	strb	r1, [r6, r2]!
   18b48:	strb	r1, [r6, #3]
   18b4c:	strb	r1, [r6, #2]
   18b50:	strb	r1, [r6, #1]
   18b54:	adds	r1, r2, #4
   18b58:	adc	r5, r3, #0
   18b5c:	cmp	r7, #1
   18b60:	stm	sl, {r1, r5}
   18b64:	bne	18928 <read_boolean_unary_expression@@Base+0x2070>
   18b68:	b	18c5c <read_boolean_unary_expression@@Base+0x23a4>
   18b6c:	mov	r2, r0
   18b70:	mov	r1, #0
   18b74:	strb	r1, [r2, r3]!
   18b78:	adds	r6, r3, #4
   18b7c:	strb	r1, [r2, #3]
   18b80:	strb	r1, [r2, #2]
   18b84:	strb	r1, [r2, #1]
   18b88:	adc	r1, r5, #0
   18b8c:	str	r6, [sl]
   18b90:	str	r1, [sl, #4]
   18b94:	ldr	r4, [r9, #4]
   18b98:	ldr	r2, [pc, #1376]	; 19100 <read_boolean_unary_expression@@Base+0x2848>
   18b9c:	adds	ip, r3, #8
   18ba0:	adc	r7, r5, #0
   18ba4:	ldr	r2, [pc, r2]
   18ba8:	subs	r2, r2, ip
   18bac:	sbcs	r2, r4, r7
   18bb0:	bcs	18cfc <read_boolean_unary_expression@@Base+0x2444>
   18bb4:	mov	r1, #7
   18bb8:	orr	r1, r1, #131072	; 0x20000
   18bbc:	adds	r1, r3, r1
   18bc0:	adc	r2, r5, #0
   18bc4:	mvn	r3, #0
   18bc8:	and	r5, r2, r3
   18bcc:	mov	r2, #16646144	; 0xfe0000
   18bd0:	orr	r2, r2, #-16777216	; 0xff000000
   18bd4:	ldr	r4, [pc, #1320]	; 19104 <read_boolean_unary_expression@@Base+0x284c>
   18bd8:	and	r6, r1, r2
   18bdc:	mov	r1, r6
   18be0:	add	r4, pc, r4
   18be4:	bl	11ec4 <realloc@plt>
   18be8:	str	r6, [r9]
   18bec:	str	r5, [r9, #4]
   18bf0:	str	r0, [r4]
   18bf4:	ldrb	r5, [r8]
   18bf8:	ldr	r1, [sl, #4]
   18bfc:	ldr	r6, [pc, #1284]	; 19108 <read_boolean_unary_expression@@Base+0x2850>
   18c00:	mov	r3, r0
   18c04:	mov	r2, #0
   18c08:	mov	r7, #1
   18c0c:	ldr	r6, [pc, r6]
   18c10:	strb	r2, [r3, r6]!
   18c14:	strb	r2, [r3, #3]
   18c18:	strb	r2, [r3, #2]
   18c1c:	strb	r2, [r3, #1]
   18c20:	adds	r2, r6, #4
   18c24:	adc	r3, r1, #0
   18c28:	cmp	r5, #1
   18c2c:	strd	r2, [sl]
   18c30:	bne	187f4 <read_boolean_unary_expression@@Base+0x1f3c>
   18c34:	b	18d20 <read_boolean_unary_expression@@Base+0x2468>
   18c38:	mov	r7, r0
   18c3c:	mov	r1, #0
   18c40:	strb	r1, [r7, r2]!
   18c44:	strb	r1, [r7, #3]
   18c48:	strb	r1, [r7, #2]
   18c4c:	strb	r1, [r7, #1]
   18c50:	adds	r1, r2, #4
   18c54:	adc	r5, r3, #0
   18c58:	stm	sl, {r1, r5}
   18c5c:	ldr	r4, [r9, #4]
   18c60:	ldr	r6, [pc, #1284]	; 1916c <read_boolean_unary_expression@@Base+0x28b4>
   18c64:	adds	r7, r2, #8
   18c68:	adc	ip, r3, #0
   18c6c:	ldr	r6, [pc, r6]
   18c70:	subs	r7, r6, r7
   18c74:	sbcs	r7, r4, ip
   18c78:	bcs	18d94 <read_boolean_unary_expression@@Base+0x24dc>
   18c7c:	mov	r1, #7
   18c80:	orr	r1, r1, #131072	; 0x20000
   18c84:	adds	r1, r2, r1
   18c88:	adc	r2, r3, #0
   18c8c:	mvn	r3, #0
   18c90:	and	r5, r2, r3
   18c94:	mov	r2, #16646144	; 0xfe0000
   18c98:	orr	r2, r2, #-16777216	; 0xff000000
   18c9c:	ldr	r4, [pc, #1228]	; 19170 <read_boolean_unary_expression@@Base+0x28b8>
   18ca0:	and	r6, r1, r2
   18ca4:	mov	r1, r6
   18ca8:	add	r4, pc, r4
   18cac:	bl	11ec4 <realloc@plt>
   18cb0:	str	r6, [r9]
   18cb4:	str	r5, [r9, #4]
   18cb8:	str	r0, [r4]
   18cbc:	ldrb	r7, [r8]
   18cc0:	ldr	r5, [sl, #4]
   18cc4:	ldr	r1, [pc, #1192]	; 19174 <read_boolean_unary_expression@@Base+0x28bc>
   18cc8:	mov	r3, r0
   18ccc:	mov	r2, #0
   18cd0:	ldr	r1, [pc, r1]
   18cd4:	strb	r2, [r3, r1]!
   18cd8:	strb	r2, [r3, #3]
   18cdc:	strb	r2, [r3, #2]
   18ce0:	strb	r2, [r3, #1]
   18ce4:	adds	r2, r1, #4
   18ce8:	adc	r3, r5, #0
   18cec:	cmp	r7, #1
   18cf0:	strd	r2, [sl]
   18cf4:	bne	1894c <read_boolean_unary_expression@@Base+0x2094>
   18cf8:	b	18db8 <read_boolean_unary_expression@@Base+0x2500>
   18cfc:	mov	r3, r0
   18d00:	mov	r2, #0
   18d04:	strb	r2, [r3, r6]!
   18d08:	strb	r2, [r3, #3]
   18d0c:	strb	r2, [r3, #2]
   18d10:	strb	r2, [r3, #1]
   18d14:	adds	r2, r6, #4
   18d18:	adc	r3, r1, #0
   18d1c:	strd	r2, [sl]
   18d20:	ldr	r4, [r9, #4]
   18d24:	ldr	r5, [pc, #992]	; 1910c <read_boolean_unary_expression@@Base+0x2854>
   18d28:	adds	lr, r6, #8
   18d2c:	adc	ip, r1, #0
   18d30:	mov	r7, #1
   18d34:	ldr	r5, [pc, r5]
   18d38:	subs	r5, r5, lr
   18d3c:	sbcs	r5, r4, ip
   18d40:	bcs	187f4 <read_boolean_unary_expression@@Base+0x1f3c>
   18d44:	mov	r2, #7
   18d48:	orr	r2, r2, #131072	; 0x20000
   18d4c:	adds	r2, r6, r2
   18d50:	adc	r1, r1, #0
   18d54:	mvn	r3, #0
   18d58:	and	r5, r1, r3
   18d5c:	mov	r1, #16646144	; 0xfe0000
   18d60:	orr	r1, r1, #-16777216	; 0xff000000
   18d64:	ldr	r4, [pc, #932]	; 19110 <read_boolean_unary_expression@@Base+0x2858>
   18d68:	and	r6, r2, r1
   18d6c:	mov	r1, r6
   18d70:	add	r4, pc, r4
   18d74:	bl	11ec4 <realloc@plt>
   18d78:	str	r6, [r9]
   18d7c:	str	r5, [r9, #4]
   18d80:	str	r0, [r4]
   18d84:	ldr	r3, [sl, #4]
   18d88:	ldr	r2, [pc, #900]	; 19114 <read_boolean_unary_expression@@Base+0x285c>
   18d8c:	ldr	r2, [pc, r2]
   18d90:	b	187f4 <read_boolean_unary_expression@@Base+0x1f3c>
   18d94:	mov	r3, r0
   18d98:	mov	r2, #0
   18d9c:	strb	r2, [r3, r1]!
   18da0:	strb	r2, [r3, #3]
   18da4:	strb	r2, [r3, #2]
   18da8:	strb	r2, [r3, #1]
   18dac:	adds	r2, r1, #4
   18db0:	adc	r3, r5, #0
   18db4:	strd	r2, [sl]
   18db8:	ldr	r4, [r9, #4]
   18dbc:	ldr	r6, [pc, #948]	; 19178 <read_boolean_unary_expression@@Base+0x28c0>
   18dc0:	adds	r7, r1, #8
   18dc4:	adc	ip, r5, #0
   18dc8:	ldr	r6, [pc, r6]
   18dcc:	subs	r7, r6, r7
   18dd0:	sbcs	r7, r4, ip
   18dd4:	bcs	18e80 <read_boolean_unary_expression@@Base+0x25c8>
   18dd8:	mov	r2, #7
   18ddc:	orr	r2, r2, #131072	; 0x20000
   18de0:	adds	r1, r1, r2
   18de4:	adc	r2, r5, #0
   18de8:	mvn	r3, #0
   18dec:	and	r5, r2, r3
   18df0:	mov	r2, #16646144	; 0xfe0000
   18df4:	orr	r2, r2, #-16777216	; 0xff000000
   18df8:	ldr	r4, [pc, #892]	; 1917c <read_boolean_unary_expression@@Base+0x28c4>
   18dfc:	and	r6, r1, r2
   18e00:	mov	r1, r6
   18e04:	add	r4, pc, r4
   18e08:	bl	11ec4 <realloc@plt>
   18e0c:	str	r6, [r9]
   18e10:	str	r5, [r9, #4]
   18e14:	str	r0, [r4]
   18e18:	ldrb	r7, [r8]
   18e1c:	ldr	r3, [sl, #4]
   18e20:	ldr	r2, [pc, #856]	; 19180 <read_boolean_unary_expression@@Base+0x28c8>
   18e24:	mov	r6, r0
   18e28:	mov	r1, #0
   18e2c:	ldr	r2, [pc, r2]
   18e30:	strb	r1, [r6, r2]!
   18e34:	strb	r1, [r6, #3]
   18e38:	strb	r1, [r6, #2]
   18e3c:	strb	r1, [r6, #1]
   18e40:	adds	r1, r2, #4
   18e44:	adc	r5, r3, #0
   18e48:	cmp	r7, #1
   18e4c:	stm	sl, {r1, r5}
   18e50:	bne	18970 <read_boolean_unary_expression@@Base+0x20b8>
   18e54:	b	18ea4 <read_boolean_unary_expression@@Base+0x25ec>
   18e58:	ldr	r1, [pc, #616]	; 190c8 <read_boolean_unary_expression@@Base+0x2810>
   18e5c:	add	r1, pc, r1
   18e60:	ldr	r0, [pc, #600]	; 190c0 <read_boolean_unary_expression@@Base+0x2808>
   18e64:	ldr	r0, [pc, r0]
   18e68:	ldr	r0, [r0]
   18e6c:	ldr	r2, [pc, #592]	; 190c4 <read_boolean_unary_expression@@Base+0x280c>
   18e70:	ldr	r2, [pc, r2]
   18e74:	sub	sp, fp, #28
   18e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e7c:	b	11f60 <fprintf@plt>
   18e80:	mov	r7, r0
   18e84:	mov	r1, #0
   18e88:	strb	r1, [r7, r2]!
   18e8c:	strb	r1, [r7, #3]
   18e90:	strb	r1, [r7, #2]
   18e94:	strb	r1, [r7, #1]
   18e98:	adds	r1, r2, #4
   18e9c:	adc	r5, r3, #0
   18ea0:	stm	sl, {r1, r5}
   18ea4:	ldr	r4, [r9, #4]
   18ea8:	ldr	r6, [pc, #724]	; 19184 <read_boolean_unary_expression@@Base+0x28cc>
   18eac:	adds	r7, r2, #8
   18eb0:	adc	ip, r3, #0
   18eb4:	ldr	r6, [pc, r6]
   18eb8:	subs	r7, r6, r7
   18ebc:	sbcs	r7, r4, ip
   18ec0:	bcs	18f48 <read_boolean_unary_expression@@Base+0x2690>
   18ec4:	mov	r1, #7
   18ec8:	orr	r1, r1, #131072	; 0x20000
   18ecc:	adds	r1, r2, r1
   18ed0:	adc	r2, r3, #0
   18ed4:	mvn	r3, #0
   18ed8:	and	r5, r2, r3
   18edc:	mov	r2, #16646144	; 0xfe0000
   18ee0:	orr	r2, r2, #-16777216	; 0xff000000
   18ee4:	ldr	r4, [pc, #668]	; 19188 <read_boolean_unary_expression@@Base+0x28d0>
   18ee8:	and	r6, r1, r2
   18eec:	mov	r1, r6
   18ef0:	add	r4, pc, r4
   18ef4:	bl	11ec4 <realloc@plt>
   18ef8:	str	r6, [r9]
   18efc:	str	r5, [r9, #4]
   18f00:	str	r0, [r4]
   18f04:	ldrb	r2, [r8]
   18f08:	ldr	r5, [sl, #4]
   18f0c:	ldr	r1, [pc, #632]	; 1918c <read_boolean_unary_expression@@Base+0x28d4>
   18f10:	mov	r7, r0
   18f14:	mov	r3, #0
   18f18:	ldr	r1, [pc, r1]
   18f1c:	adds	r4, r1, #4
   18f20:	strb	r3, [r7, r1]!
   18f24:	strb	r3, [r7, #3]
   18f28:	strb	r3, [r7, #2]
   18f2c:	strb	r3, [r7, #1]
   18f30:	adc	r3, r5, #0
   18f34:	cmp	r2, #1
   18f38:	str	r4, [sl]
   18f3c:	str	r3, [sl, #4]
   18f40:	bne	18998 <read_boolean_unary_expression@@Base+0x20e0>
   18f44:	b	18f70 <read_boolean_unary_expression@@Base+0x26b8>
   18f48:	mov	r3, r0
   18f4c:	mov	r2, #0
   18f50:	strb	r2, [r3, r1]!
   18f54:	adds	r4, r1, #4
   18f58:	strb	r2, [r3, #3]
   18f5c:	strb	r2, [r3, #2]
   18f60:	strb	r2, [r3, #1]
   18f64:	adc	r3, r5, #0
   18f68:	str	r4, [sl]
   18f6c:	str	r3, [sl, #4]
   18f70:	ldr	r6, [r9, #4]
   18f74:	ldr	r2, [pc, #532]	; 19190 <read_boolean_unary_expression@@Base+0x28d8>
   18f78:	adds	ip, r1, #8
   18f7c:	adc	r7, r5, #0
   18f80:	ldr	r2, [pc, r2]
   18f84:	subs	r2, r2, ip
   18f88:	sbcs	r2, r6, r7
   18f8c:	bcs	19014 <read_boolean_unary_expression@@Base+0x275c>
   18f90:	mov	r2, #7
   18f94:	orr	r2, r2, #131072	; 0x20000
   18f98:	adds	r1, r1, r2
   18f9c:	adc	r2, r5, #0
   18fa0:	mvn	r3, #0
   18fa4:	and	r5, r2, r3
   18fa8:	mov	r2, #16646144	; 0xfe0000
   18fac:	orr	r2, r2, #-16777216	; 0xff000000
   18fb0:	ldr	r4, [pc, #368]	; 19128 <read_boolean_unary_expression@@Base+0x2870>
   18fb4:	and	r6, r1, r2
   18fb8:	mov	r1, r6
   18fbc:	add	r4, pc, r4
   18fc0:	bl	11ec4 <realloc@plt>
   18fc4:	str	r6, [r9]
   18fc8:	str	r5, [r9, #4]
   18fcc:	str	r0, [r4]
   18fd0:	ldrb	r7, [r8]
   18fd4:	ldr	r3, [sl, #4]
   18fd8:	ldr	r4, [pc, #332]	; 1912c <read_boolean_unary_expression@@Base+0x2874>
   18fdc:	mov	r2, r0
   18fe0:	mov	r1, #0
   18fe4:	ldr	r4, [pc, r4]
   18fe8:	strb	r1, [r2, r4]!
   18fec:	strb	r1, [r2, #3]
   18ff0:	strb	r1, [r2, #2]
   18ff4:	strb	r1, [r2, #1]
   18ff8:	adds	r2, r4, #4
   18ffc:	adc	r1, r3, #0
   19000:	cmp	r7, #0
   19004:	str	r2, [sl]
   19008:	str	r1, [sl, #4]
   1900c:	beq	189c0 <read_boolean_unary_expression@@Base+0x2108>
   19010:	b	1903c <read_boolean_unary_expression@@Base+0x2784>
   19014:	mov	r2, r0
   19018:	mov	r1, #0
   1901c:	strb	r1, [r2, r4]!
   19020:	strb	r1, [r2, #3]
   19024:	strb	r1, [r2, #2]
   19028:	strb	r1, [r2, #1]
   1902c:	adds	r2, r4, #4
   19030:	adc	r1, r3, #0
   19034:	str	r2, [sl]
   19038:	str	r1, [sl, #4]
   1903c:	ldr	r5, [r9, #4]
   19040:	ldr	r6, [pc, #232]	; 19130 <read_boolean_unary_expression@@Base+0x2878>
   19044:	adds	r7, r4, #8
   19048:	adc	ip, r3, #0
   1904c:	ldr	r6, [pc, r6]
   19050:	subs	r7, r6, r7
   19054:	sbcs	r7, r5, ip
   19058:	bcs	189c0 <read_boolean_unary_expression@@Base+0x2108>
   1905c:	mov	r1, #7
   19060:	orr	r1, r1, #131072	; 0x20000
   19064:	adds	r1, r4, r1
   19068:	adc	r2, r3, #0
   1906c:	mvn	r3, #0
   19070:	and	r7, r2, r3
   19074:	mov	r2, #16646144	; 0xfe0000
   19078:	orr	r2, r2, #-16777216	; 0xff000000
   1907c:	ldr	r5, [pc, #176]	; 19134 <read_boolean_unary_expression@@Base+0x287c>
   19080:	and	r6, r1, r2
   19084:	mov	r1, r6
   19088:	add	r5, pc, r5
   1908c:	bl	11ec4 <realloc@plt>
   19090:	strd	r6, [r9]
   19094:	str	r0, [r5]
   19098:	ldr	r1, [sl, #4]
   1909c:	ldr	r2, [pc, #148]	; 19138 <read_boolean_unary_expression@@Base+0x2880>
   190a0:	ldr	r2, [pc, r2]
   190a4:	b	189c0 <read_boolean_unary_expression@@Base+0x2108>
   190a8:	andeq	r4, r1, r0, lsl #19
   190ac:	andeq	r4, r1, r0, lsl #19
   190b0:	andeq	r4, r1, r4, ror r9
   190b4:	andeq	r4, r1, r8, asr r9
   190b8:	andeq	r4, r1, ip, lsl #17
   190bc:	andeq	r2, r0, r6, ror sp
   190c0:	andeq	r3, r1, r0, asr r2
   190c4:	andeq	r3, r1, r0, asr #30
   190c8:	ldrdeq	r2, [r0], -pc	; <UNPREDICTABLE>
   190cc:	andeq	r4, r1, ip, lsl #13
   190d0:	andeq	r4, r1, r8, asr #18
   190d4:	andeq	r4, r1, ip, lsr r9
   190d8:	andeq	r4, r1, r0, lsr r8
   190dc:	strdeq	r4, [r1], -r0
   190e0:	andeq	r4, r1, ip, ror #17
   190e4:	andeq	r4, r1, ip, asr #17
   190e8:	andeq	r4, r1, r8, lsl #16
   190ec:	andeq	r4, r1, r8, asr #15
   190f0:	andeq	r4, r1, ip, lsr #15
   190f4:	andeq	r4, r1, r8, lsr r7
   190f8:	strdeq	r4, [r1], -r8
   190fc:	ldrdeq	r4, [r1], -ip
   19100:	andeq	r4, r1, ip, lsl r2
   19104:	ldrdeq	r4, [r1], -ip
   19108:			; <UNDEFINED> instruction: 0x000141bc
   1910c:	andeq	r4, r1, ip, lsl #1
   19110:	andeq	r4, r1, ip, asr #32
   19114:	andeq	r4, r1, ip, lsr r0
   19118:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1911c:	andeq	r4, r1, ip, lsl #11
   19120:	andeq	r4, r1, r0, lsl #11
   19124:	andeq	r4, r1, r8, lsl #6
   19128:	andeq	r3, r1, r0, lsl #28
   1912c:	andeq	r3, r1, r4, ror #27
   19130:	andeq	r3, r1, r4, ror sp
   19134:	andeq	r3, r1, r4, lsr sp
   19138:	andeq	r3, r1, r8, lsr #26
   1913c:			; <UNDEFINED> instruction: 0x000143bc
   19140:			; <UNDEFINED> instruction: 0x000143b0
   19144:	andeq	r4, r1, r0, ror r3
   19148:	andeq	r4, r1, r4, ror #6
   1914c:	andeq	r4, r1, ip, asr r3
   19150:	andeq	r4, r1, r0, asr #6
   19154:	andeq	r4, r1, ip, lsr r5
   19158:	andeq	r4, r1, r8, lsr r5
   1915c:	andeq	r4, r1, ip, lsl r5
   19160:	andeq	r4, r1, r0, ror #5
   19164:	andeq	r4, r1, r0, lsr #5
   19168:	andeq	r4, r1, r8, lsl #5
   1916c:	andeq	r4, r1, r4, asr r1
   19170:	andeq	r4, r1, r4, lsl r1
   19174:	strdeq	r4, [r1], -r8
   19178:	strdeq	r3, [r1], -r8
   1917c:			; <UNDEFINED> instruction: 0x00013fb8
   19180:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   19184:	andeq	r3, r1, ip, lsl #30
   19188:	andeq	r3, r1, ip, asr #29
   1918c:			; <UNDEFINED> instruction: 0x00013eb0
   19190:	andeq	r3, r1, r0, asr #28
   19194:	ldr	r0, [pc, #508]	; 19398 <read_boolean_unary_expression@@Base+0x2ae0>
   19198:	ldr	r0, [pc, r0]
   1919c:	cmp	r0, #0
   191a0:	beq	19350 <read_boolean_unary_expression@@Base+0x2a98>
   191a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   191a8:	add	fp, sp, #24
   191ac:	ldr	r9, [pc, #488]	; 1939c <read_boolean_unary_expression@@Base+0x2ae4>
   191b0:	mov	r4, #0
   191b4:	mov	r1, #0
   191b8:	add	r9, pc, r9
   191bc:	ldrb	r0, [r9]
   191c0:	cmp	r0, #1
   191c4:	bne	19248 <read_boolean_unary_expression@@Base+0x2990>
   191c8:	ldr	r0, [pc, #464]	; 193a0 <read_boolean_unary_expression@@Base+0x2ae8>
   191cc:	ldr	r8, [pc, #464]	; 193a4 <read_boolean_unary_expression@@Base+0x2aec>
   191d0:	mov	r1, #1
   191d4:	add	r0, pc, r0
   191d8:	add	r8, pc, r8
   191dc:	ldr	r0, [r0, #4]
   191e0:	ldr	r2, [pc, #448]	; 193a8 <read_boolean_unary_expression@@Base+0x2af0>
   191e4:	ldr	r2, [pc, r2]
   191e8:	ldr	r7, [r8, #4]
   191ec:	ldr	r5, [pc, #440]	; 193ac <read_boolean_unary_expression@@Base+0x2af4>
   191f0:	adds	r3, r2, #8
   191f4:	adc	r6, r0, #0
   191f8:	ldr	r5, [pc, r5]
   191fc:	subs	r3, r5, r3
   19200:	sbcs	r3, r7, r6
   19204:	bcs	19248 <read_boolean_unary_expression@@Base+0x2990>
   19208:	mov	r1, #7
   1920c:	orr	r1, r1, #131072	; 0x20000
   19210:	adds	r1, r2, r1
   19214:	adc	r7, r0, #0
   19218:	mov	r0, #16646144	; 0xfe0000
   1921c:	orr	r0, r0, #-16777216	; 0xff000000
   19220:	ldr	r5, [pc, #392]	; 193b0 <read_boolean_unary_expression@@Base+0x2af8>
   19224:	and	r6, r1, r0
   19228:	ldr	r0, [pc, #388]	; 193b4 <read_boolean_unary_expression@@Base+0x2afc>
   1922c:	mov	r1, r6
   19230:	add	r5, pc, r5
   19234:	ldr	r0, [pc, r0]
   19238:	bl	11ec4 <realloc@plt>
   1923c:	ldrb	r1, [r9]
   19240:	strd	r6, [r8]
   19244:	str	r0, [r5]
   19248:	ldr	r3, [pc, #360]	; 193b8 <read_boolean_unary_expression@@Base+0x2b00>
   1924c:	ldr	r2, [pc, #360]	; 193bc <read_boolean_unary_expression@@Base+0x2b04>
   19250:	add	r3, pc, r3
   19254:	ldr	r2, [pc, r2]
   19258:	ldr	r0, [pc, #352]	; 193c0 <read_boolean_unary_expression@@Base+0x2b08>
   1925c:	ldr	r0, [pc, r0]
   19260:	ldr	r7, [r3, #4]
   19264:	mov	r6, r0
   19268:	strb	r4, [r6, r2]!
   1926c:	adds	r2, r2, #8
   19270:	adc	r5, r7, #0
   19274:	strb	r4, [r6, #5]
   19278:	strb	r4, [r6, #3]
   1927c:	strb	r4, [r6, #2]
   19280:	strb	r4, [r6, #1]
   19284:	strb	r4, [r6, #4]!
   19288:	cmp	r1, #0
   1928c:	strb	r4, [r6, #3]
   19290:	strb	r4, [r6, #2]
   19294:	stm	r3, {r2, r5}
   19298:	beq	192c0 <read_boolean_unary_expression@@Base+0x2a08>
   1929c:	ldr	r3, [pc, #288]	; 193c4 <read_boolean_unary_expression@@Base+0x2b0c>
   192a0:	mov	r1, r2
   192a4:	mov	r2, #1
   192a8:	ldr	r3, [pc, r3]
   192ac:	bl	11ed0 <fwrite@plt>
   192b0:	ldr	r0, [pc, #272]	; 193c8 <read_boolean_unary_expression@@Base+0x2b10>
   192b4:	ldr	r0, [pc, r0]
   192b8:	bl	11e7c <free@plt>
   192bc:	b	1930c <read_boolean_unary_expression@@Base+0x2a54>
   192c0:	ldr	r1, [pc, #260]	; 193cc <read_boolean_unary_expression@@Base+0x2b14>
   192c4:	mov	r2, #4
   192c8:	ldr	r1, [pc, r1]
   192cc:	bl	11ff0 <msync@plt>
   192d0:	cmn	r0, #1
   192d4:	beq	1935c <read_boolean_unary_expression@@Base+0x2aa4>
   192d8:	ldr	r1, [pc, #252]	; 193dc <read_boolean_unary_expression@@Base+0x2b24>
   192dc:	ldr	r1, [pc, r1]
   192e0:	ldr	r0, [pc, #248]	; 193e0 <read_boolean_unary_expression@@Base+0x2b28>
   192e4:	ldr	r0, [pc, r0]
   192e8:	bl	11fcc <munmap@plt>
   192ec:	ldr	r0, [pc, #240]	; 193e4 <read_boolean_unary_expression@@Base+0x2b2c>
   192f0:	ldr	r1, [pc, #240]	; 193e8 <read_boolean_unary_expression@@Base+0x2b30>
   192f4:	mov	r2, #0
   192f8:	add	r0, pc, r0
   192fc:	add	r1, pc, r1
   19300:	str	r2, [r0]
   19304:	str	r2, [r0, #4]
   19308:	str	r2, [r1]
   1930c:	ldr	r0, [pc, #216]	; 193ec <read_boolean_unary_expression@@Base+0x2b34>
   19310:	ldr	r0, [pc, r0]
   19314:	bl	11e70 <fflush@plt>
   19318:	ldr	r0, [pc, #208]	; 193f0 <read_boolean_unary_expression@@Base+0x2b38>
   1931c:	ldr	r0, [pc, r0]
   19320:	bl	1989c <__gcov_flush@@Base+0x30c>
   19324:	ldr	r0, [pc, #200]	; 193f4 <read_boolean_unary_expression@@Base+0x2b3c>
   19328:	ldr	r0, [pc, r0]
   1932c:	bl	11fb4 <fclose@plt>
   19330:	ldr	r0, [pc, #192]	; 193f8 <read_boolean_unary_expression@@Base+0x2b40>
   19334:	ldr	r1, [pc, #192]	; 193fc <read_boolean_unary_expression@@Base+0x2b44>
   19338:	mov	r2, #0
   1933c:	add	r0, pc, r0
   19340:	add	r1, pc, r1
   19344:	str	r2, [r0]
   19348:	str	r2, [r1]
   1934c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   19350:	ldr	r0, [pc, #168]	; 19400 <read_boolean_unary_expression@@Base+0x2b48>
   19354:	ldr	r0, [pc, r0]
   19358:	b	11e7c <free@plt>
   1935c:	bl	11f6c <__errno_location@plt>
   19360:	ldr	r1, [pc, #104]	; 193d0 <read_boolean_unary_expression@@Base+0x2b18>
   19364:	ldr	r1, [pc, r1]
   19368:	ldr	r0, [r0]
   1936c:	ldr	r4, [r1]
   19370:	ldr	r5, [pc, #92]	; 193d4 <read_boolean_unary_expression@@Base+0x2b1c>
   19374:	ldr	r5, [pc, r5]
   19378:	bl	11f18 <strerror@plt>
   1937c:	ldr	r1, [pc, #84]	; 193d8 <read_boolean_unary_expression@@Base+0x2b20>
   19380:	mov	r3, r0
   19384:	mov	r0, r4
   19388:	add	r1, pc, r1
   1938c:	mov	r2, r5
   19390:	bl	11f60 <fprintf@plt>
   19394:	b	192d8 <read_boolean_unary_expression@@Base+0x2a20>
   19398:	andeq	r3, r1, r0, lsr #24
   1939c:	strdeq	r3, [r1], -ip
   193a0:	strdeq	r3, [r1], -r4
   193a4:	andeq	r3, r1, r8, ror #23
   193a8:	andeq	r3, r1, r4, ror #23
   193ac:	andeq	r3, r1, r8, asr #23
   193b0:	andeq	r3, r1, ip, lsl #23
   193b4:	andeq	r3, r1, r8, lsl #23
   193b8:	andeq	r3, r1, r8, ror fp
   193bc:	andeq	r3, r1, r4, ror fp
   193c0:	andeq	r3, r1, r0, ror #22
   193c4:	andeq	r3, r1, r0, lsl fp
   193c8:	andeq	r3, r1, r8, lsl #22
   193cc:	andeq	r3, r1, r8, lsl fp
   193d0:	andeq	r2, r1, r0, asr sp
   193d4:	andeq	r3, r1, ip, lsr sl
   193d8:	andeq	r2, r0, r1, lsr #32
   193dc:	andeq	r3, r1, r4, lsl #22
   193e0:	ldrdeq	r3, [r1], -r8
   193e4:	andeq	r3, r1, r8, ror #21
   193e8:	andeq	r3, r1, r0, asr #21
   193ec:	andeq	r3, r1, r8, lsr #21
   193f0:			; <UNDEFINED> instruction: 0x00012db8
   193f4:	muleq	r1, r0, sl
   193f8:	andeq	r3, r1, ip, ror sl
   193fc:	andeq	r3, r1, ip, ror sl
   19400:	andeq	r3, r1, ip, asr sl
   19404:	push	{r4, sl, fp, lr}
   19408:	add	fp, sp, #8
   1940c:	mov	r4, r0
   19410:	mov	r0, #12
   19414:	bl	11f00 <malloc@plt>
   19418:	ldr	r1, [pc, #60]	; 1945c <read_boolean_unary_expression@@Base+0x2ba4>
   1941c:	mov	r2, #0
   19420:	add	r1, pc, r1
   19424:	stm	r0, {r1, r4}
   19428:	str	r2, [r0, #8]
   1942c:	ldr	r1, [pc, #44]	; 19460 <read_boolean_unary_expression@@Base+0x2ba8>
   19430:	ldr	r1, [pc, r1]
   19434:	mov	r2, r1
   19438:	ldr	r3, [r2], #4
   1943c:	ldr	r4, [r2]
   19440:	cmp	r3, #0
   19444:	mov	r3, r2
   19448:	addne	r3, r4, #8
   1944c:	moveq	r2, r1
   19450:	str	r0, [r3]
   19454:	str	r0, [r2]
   19458:	pop	{r4, sl, fp, pc}
   1945c:			; <UNDEFINED> instruction: 0x000139b4
   19460:	andeq	r2, r1, r0, lsl #25
   19464:	push	{r4, r5, fp, lr}
   19468:	add	fp, sp, #8
   1946c:	ldr	r0, [pc, #56]	; 194ac <read_boolean_unary_expression@@Base+0x2bf4>
   19470:	ldr	r0, [pc, r0]
   19474:	ldr	r4, [r0]
   19478:	cmp	r4, #0
   1947c:	beq	194a8 <read_boolean_unary_expression@@Base+0x2bf0>
   19480:	ldr	r5, [pc, #40]	; 194b0 <read_boolean_unary_expression@@Base+0x2bf8>
   19484:	add	r5, pc, r5
   19488:	ldr	r0, [r4]
   1948c:	cmp	r0, r5
   19490:	bne	1949c <read_boolean_unary_expression@@Base+0x2be4>
   19494:	ldr	r0, [r4, #4]
   19498:	blx	r0
   1949c:	ldr	r4, [r4, #8]
   194a0:	cmp	r4, #0
   194a4:	bne	19488 <read_boolean_unary_expression@@Base+0x2bd0>
   194a8:	pop	{r4, r5, fp, pc}
   194ac:	andeq	r2, r1, r0, asr #24
   194b0:	andeq	r3, r1, r0, asr r9
   194b4:	push	{r4, r5, r6, r7, fp, lr}
   194b8:	add	fp, sp, #16
   194bc:	ldr	r4, [pc, #100]	; 19528 <read_boolean_unary_expression@@Base+0x2c70>
   194c0:	ldr	r4, [pc, r4]
   194c4:	ldr	r0, [r4]
   194c8:	cmp	r0, #0
   194cc:	beq	19524 <read_boolean_unary_expression@@Base+0x2c6c>
   194d0:	ldr	r5, [pc, #84]	; 1952c <read_boolean_unary_expression@@Base+0x2c74>
   194d4:	mov	r6, #0
   194d8:	add	r5, pc, r5
   194dc:	ldr	r1, [r0]
   194e0:	ldr	r7, [r0, #8]
   194e4:	cmp	r1, r5
   194e8:	beq	194f4 <read_boolean_unary_expression@@Base+0x2c3c>
   194ec:	mov	r6, r0
   194f0:	b	19518 <read_boolean_unary_expression@@Base+0x2c60>
   194f4:	ldr	r1, [r4]
   194f8:	cmp	r0, r1
   194fc:	streq	r7, [r4]
   19500:	ldr	r1, [r4, #4]
   19504:	cmp	r0, r1
   19508:	streq	r6, [r4, #4]
   1950c:	cmp	r6, #0
   19510:	strne	r7, [r6, #8]
   19514:	bl	11e7c <free@plt>
   19518:	mov	r0, r7
   1951c:	cmp	r7, #0
   19520:	bne	194dc <read_boolean_unary_expression@@Base+0x2c24>
   19524:	pop	{r4, r5, r6, r7, fp, pc}
   19528:	strdeq	r2, [r1], -r0
   1952c:	strdeq	r3, [r1], -ip
   19530:	push	{r4, sl, fp, lr}
   19534:	add	fp, sp, #8
   19538:	mov	r4, r0
   1953c:	mov	r0, #12
   19540:	bl	11f00 <malloc@plt>
   19544:	ldr	r1, [pc, #60]	; 19588 <read_boolean_unary_expression@@Base+0x2cd0>
   19548:	mov	r2, #0
   1954c:	add	r1, pc, r1
   19550:	stm	r0, {r1, r4}
   19554:	str	r2, [r0, #8]
   19558:	ldr	r1, [pc, #44]	; 1958c <read_boolean_unary_expression@@Base+0x2cd4>
   1955c:	ldr	r1, [pc, r1]
   19560:	mov	r2, r1
   19564:	ldr	r3, [r2], #4
   19568:	ldr	r4, [r2]
   1956c:	cmp	r3, #0
   19570:	mov	r3, r2
   19574:	addne	r3, r4, #8
   19578:	moveq	r2, r1
   1957c:	str	r0, [r3]
   19580:	str	r0, [r2]
   19584:	pop	{r4, sl, fp, pc}
   19588:	andeq	r3, r1, r8, lsl #17
   1958c:	andeq	r2, r1, r0, asr fp

00019590 <__gcov_flush@@Base>:
   19590:	push	{r4, sl, fp, lr}
   19594:	add	fp, sp, #8
   19598:	ldr	r0, [pc, #36]	; 195c4 <__gcov_flush@@Base+0x34>
   1959c:	ldr	r0, [pc, r0]
   195a0:	ldr	r4, [r0]
   195a4:	cmp	r4, #0
   195a8:	beq	195c0 <__gcov_flush@@Base+0x30>
   195ac:	ldr	r0, [r4, #4]
   195b0:	blx	r0
   195b4:	ldr	r4, [r4, #8]
   195b8:	cmp	r4, #0
   195bc:	bne	195ac <__gcov_flush@@Base+0x1c>
   195c0:	pop	{r4, sl, fp, pc}
   195c4:	andeq	r2, r1, r0, lsl fp
   195c8:	push	{r4, r5, r6, r7, fp, lr}
   195cc:	add	fp, sp, #16
   195d0:	ldr	r4, [pc, #100]	; 1963c <__gcov_flush@@Base+0xac>
   195d4:	ldr	r4, [pc, r4]
   195d8:	ldr	r0, [r4]
   195dc:	cmp	r0, #0
   195e0:	beq	19638 <__gcov_flush@@Base+0xa8>
   195e4:	ldr	r5, [pc, #84]	; 19640 <__gcov_flush@@Base+0xb0>
   195e8:	mov	r6, #0
   195ec:	add	r5, pc, r5
   195f0:	ldr	r1, [r0]
   195f4:	ldr	r7, [r0, #8]
   195f8:	cmp	r1, r5
   195fc:	beq	19608 <__gcov_flush@@Base+0x78>
   19600:	mov	r6, r0
   19604:	b	1962c <__gcov_flush@@Base+0x9c>
   19608:	ldr	r1, [r4]
   1960c:	cmp	r0, r1
   19610:	streq	r7, [r4]
   19614:	ldr	r1, [r4, #4]
   19618:	cmp	r0, r1
   1961c:	streq	r6, [r4, #4]
   19620:	cmp	r6, #0
   19624:	strne	r7, [r6, #8]
   19628:	bl	11e7c <free@plt>
   1962c:	mov	r0, r7
   19630:	cmp	r7, #0
   19634:	bne	195f0 <__gcov_flush@@Base+0x60>
   19638:	pop	{r4, r5, r6, r7, fp, pc}
   1963c:	ldrdeq	r2, [r1], -r8
   19640:	andeq	r3, r1, r8, ror #15
   19644:	push	{r4, r5, fp, lr}
   19648:	add	fp, sp, #8
   1964c:	mov	r4, r1
   19650:	cmp	r0, #0
   19654:	beq	196a4 <__gcov_flush@@Base+0x114>
   19658:	mov	r5, r0
   1965c:	mov	r0, #12
   19660:	bl	11f00 <malloc@plt>
   19664:	ldr	r1, [pc, #204]	; 19738 <__gcov_flush@@Base+0x1a8>
   19668:	mov	r2, #0
   1966c:	add	r1, pc, r1
   19670:	stm	r0, {r1, r5}
   19674:	str	r2, [r0, #8]
   19678:	ldr	r1, [pc, #188]	; 1973c <__gcov_flush@@Base+0x1ac>
   1967c:	ldr	r1, [pc, r1]
   19680:	mov	r2, r1
   19684:	ldr	r3, [r2], #4
   19688:	ldr	r5, [r2]
   1968c:	cmp	r3, #0
   19690:	mov	r3, r2
   19694:	addne	r3, r5, #8
   19698:	moveq	r2, r1
   1969c:	str	r0, [r3]
   196a0:	str	r0, [r2]
   196a4:	cmp	r4, #0
   196a8:	beq	196f4 <__gcov_flush@@Base+0x164>
   196ac:	mov	r0, #12
   196b0:	bl	11f00 <malloc@plt>
   196b4:	ldr	r1, [pc, #132]	; 19740 <__gcov_flush@@Base+0x1b0>
   196b8:	mov	r2, #0
   196bc:	add	r1, pc, r1
   196c0:	stm	r0, {r1, r4}
   196c4:	str	r2, [r0, #8]
   196c8:	ldr	r1, [pc, #116]	; 19744 <__gcov_flush@@Base+0x1b4>
   196cc:	ldr	r1, [pc, r1]
   196d0:	mov	r2, r1
   196d4:	ldr	r3, [r2], #4
   196d8:	ldr	r5, [r2]
   196dc:	cmp	r3, #0
   196e0:	mov	r3, r2
   196e4:	addne	r3, r5, #8
   196e8:	moveq	r2, r1
   196ec:	str	r0, [r3]
   196f0:	str	r0, [r2]
   196f4:	ldr	r1, [pc, #76]	; 19748 <__gcov_flush@@Base+0x1b8>
   196f8:	add	r1, pc, r1
   196fc:	ldrb	r0, [r1]
   19700:	cmp	r0, #0
   19704:	popne	{r4, r5, fp, pc}
   19708:	ldr	r0, [pc, #60]	; 1974c <__gcov_flush@@Base+0x1bc>
   1970c:	mov	r2, #1
   19710:	strb	r2, [r1]
   19714:	add	r0, pc, r0
   19718:	bl	19bf8 <__libc_csu_fini@@Base+0x4>
   1971c:	ldr	r0, [pc, #44]	; 19750 <__gcov_flush@@Base+0x1c0>
   19720:	add	r0, pc, r0
   19724:	bl	19bf8 <__libc_csu_fini@@Base+0x4>
   19728:	ldr	r0, [pc, #36]	; 19754 <__gcov_flush@@Base+0x1c4>
   1972c:	add	r0, pc, r0
   19730:	pop	{r4, r5, fp, lr}
   19734:	b	19bf8 <__libc_csu_fini@@Base+0x4>
   19738:	andeq	r3, r1, r8, ror #14
   1973c:	andeq	r2, r1, r4, lsr sl
   19740:	andeq	r3, r1, r8, lsl r7
   19744:	andeq	r2, r1, r0, ror #19
   19748:	andeq	r3, r1, r0, ror #13
   1974c:			; <UNDEFINED> instruction: 0xfffffeac
   19750:			; <UNDEFINED> instruction: 0xfffffd8c
   19754:			; <UNDEFINED> instruction: 0xfffffd30
   19758:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1975c:	add	fp, sp, #24
   19760:	ldr	r7, [pc, #76]	; 197b4 <__gcov_flush@@Base+0x224>
   19764:	mov	r4, r0
   19768:	mov	r5, #1
   1976c:	mov	r8, #0
   19770:	ldr	r7, [pc, r7]
   19774:	mov	r6, #47	; 0x2f
   19778:	b	19780 <__gcov_flush@@Base+0x1f0>
   1977c:	add	r5, r5, #1
   19780:	ldrb	r0, [r4, r5]
   19784:	cmp	r0, #47	; 0x2f
   19788:	beq	19798 <__gcov_flush@@Base+0x208>
   1978c:	cmp	r0, #0
   19790:	bne	1977c <__gcov_flush@@Base+0x1ec>
   19794:	b	197b0 <__gcov_flush@@Base+0x220>
   19798:	strb	r8, [r4, r5]
   1979c:	ldr	r1, [r7]
   197a0:	mov	r0, r4
   197a4:	bl	11f84 <mkdir@plt>
   197a8:	strb	r6, [r4, r5]
   197ac:	b	1977c <__gcov_flush@@Base+0x1ec>
   197b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   197b4:	andeq	r2, r1, r8, lsr r9
   197b8:	ldr	r0, [pc, #8]	; 197c8 <__gcov_flush@@Base+0x238>
   197bc:	ldr	r0, [pc, r0]
   197c0:	ldr	r0, [r0]
   197c4:	bx	lr
   197c8:	andeq	r2, r1, ip, ror #17
   197cc:	ldr	r1, [pc, #8]	; 197dc <__gcov_flush@@Base+0x24c>
   197d0:	ldr	r1, [pc, r1]
   197d4:	str	r0, [r1]
   197d8:	bx	lr
   197dc:	ldrdeq	r2, [r1], -r8
   197e0:	push	{r4, r5, r6, sl, fp, lr}
   197e4:	add	fp, sp, #16
   197e8:	sub	sp, sp, #392	; 0x188
   197ec:	mov	r6, sp
   197f0:	mov	r5, r0
   197f4:	mov	r0, r6
   197f8:	mov	r4, r1
   197fc:	bl	11eac <uname@plt>
   19800:	cmp	r0, #0
   19804:	blt	1981c <__gcov_flush@@Base+0x28c>
   19808:	add	r1, r6, #65	; 0x41
   1980c:	mov	r0, r5
   19810:	mov	r2, r4
   19814:	bl	11f9c <strncpy@plt>
   19818:	mov	r0, #0
   1981c:	sub	sp, fp, #16
   19820:	pop	{r4, r5, r6, sl, fp, pc}
   19824:	push	{r4, r5, r6, sl, fp, lr}
   19828:	add	fp, sp, #16
   1982c:	sub	sp, sp, #32
   19830:	mov	r4, #0
   19834:	mov	r5, r0
   19838:	str	r4, [sp, #20]
   1983c:	str	r4, [sp, #16]
   19840:	str	r4, [sp, #12]
   19844:	str	r4, [sp, #8]
   19848:	strh	r4, [sp, #2]
   1984c:	bl	11f30 <getpid@plt>
   19850:	mov	r6, sp
   19854:	str	r0, [sp, #24]
   19858:	mov	r0, #1
   1985c:	strh	r0, [sp]
   19860:	mov	r0, r5
   19864:	mov	r1, #14
   19868:	mov	r2, r6
   1986c:	bl	11fd8 <fcntl64@plt>
   19870:	cmn	r0, #1
   19874:	bne	19890 <__gcov_flush@@Base+0x300>
   19878:	bl	11f6c <__errno_location@plt>
   1987c:	ldr	r0, [r0]
   19880:	cmp	r0, #4
   19884:	beq	19860 <__gcov_flush@@Base+0x2d0>
   19888:	cmp	r0, #37	; 0x25
   1988c:	mvneq	r4, #0
   19890:	mov	r0, r4
   19894:	sub	sp, fp, #16
   19898:	pop	{r4, r5, r6, sl, fp, pc}
   1989c:	push	{r4, r5, r6, sl, fp, lr}
   198a0:	add	fp, sp, #16
   198a4:	sub	sp, sp, #32
   198a8:	mov	r4, #0
   198ac:	mov	r5, r0
   198b0:	str	r4, [sp, #20]
   198b4:	str	r4, [sp, #16]
   198b8:	str	r4, [sp, #12]
   198bc:	str	r4, [sp, #8]
   198c0:	strh	r4, [sp, #2]
   198c4:	bl	11f30 <getpid@plt>
   198c8:	mov	r6, sp
   198cc:	str	r0, [sp, #24]
   198d0:	mov	r0, #2
   198d4:	strh	r0, [sp]
   198d8:	mov	r0, r5
   198dc:	mov	r1, #14
   198e0:	mov	r2, r6
   198e4:	bl	11fd8 <fcntl64@plt>
   198e8:	cmn	r0, #1
   198ec:	bne	19908 <__gcov_flush@@Base+0x378>
   198f0:	bl	11f6c <__errno_location@plt>
   198f4:	ldr	r0, [r0]
   198f8:	cmp	r0, #4
   198fc:	beq	198d8 <__gcov_flush@@Base+0x348>
   19900:	cmp	r0, #37	; 0x25
   19904:	mvneq	r4, #0
   19908:	mov	r0, r4
   1990c:	sub	sp, fp, #16
   19910:	pop	{r4, r5, r6, sl, fp, pc}
   19914:	push	{r4, r5, fp, lr}
   19918:	add	fp, sp, #8
   1991c:	sub	sp, sp, #32
   19920:	mov	r2, #182	; 0xb6
   19924:	orr	r2, r2, #256	; 0x100
   19928:	mov	r1, #66	; 0x42
   1992c:	bl	11edc <open64@plt>
   19930:	cmp	r0, #0
   19934:	blt	199b0 <__gcov_flush@@Base+0x420>
   19938:	mov	r4, r0
   1993c:	mov	r0, #0
   19940:	str	r0, [sp, #20]
   19944:	str	r0, [sp, #16]
   19948:	str	r0, [sp, #12]
   1994c:	str	r0, [sp, #8]
   19950:	strh	r0, [sp, #2]
   19954:	bl	11f30 <getpid@plt>
   19958:	mov	r5, sp
   1995c:	str	r0, [sp, #24]
   19960:	mov	r0, #1
   19964:	strh	r0, [sp]
   19968:	mov	r0, r4
   1996c:	mov	r1, #14
   19970:	mov	r2, r5
   19974:	bl	11fd8 <fcntl64@plt>
   19978:	cmn	r0, #1
   1997c:	bne	19998 <__gcov_flush@@Base+0x408>
   19980:	bl	11f6c <__errno_location@plt>
   19984:	ldr	r0, [r0]
   19988:	cmp	r0, #4
   1998c:	beq	19968 <__gcov_flush@@Base+0x3d8>
   19990:	cmp	r0, #37	; 0x25
   19994:	beq	199bc <__gcov_flush@@Base+0x42c>
   19998:	ldr	r1, [pc, #76]	; 199ec <__gcov_flush@@Base+0x45c>
   1999c:	mov	r0, r4
   199a0:	add	r1, pc, r1
   199a4:	bl	11e40 <fdopen@plt>
   199a8:	sub	sp, fp, #8
   199ac:	pop	{r4, r5, fp, pc}
   199b0:	mov	r0, #0
   199b4:	sub	sp, fp, #8
   199b8:	pop	{r4, r5, fp, pc}
   199bc:	ldr	r1, [pc, #28]	; 199e0 <__gcov_flush@@Base+0x450>
   199c0:	ldr	r2, [pc, #28]	; 199e4 <__gcov_flush@@Base+0x454>
   199c4:	ldr	r0, [pc, #28]	; 199e8 <__gcov_flush@@Base+0x458>
   199c8:	add	r1, pc, r1
   199cc:	add	r2, pc, r2
   199d0:	ldr	r0, [pc, r0]
   199d4:	ldr	r0, [r0]
   199d8:	bl	11f60 <fprintf@plt>
   199dc:	b	19998 <__gcov_flush@@Base+0x408>
   199e0:	andeq	r1, r0, r2, lsl #20
   199e4:	andeq	r1, r0, r7, asr #20
   199e8:	andeq	r2, r1, r4, ror #13
   199ec:	andeq	r1, r0, r8, lsl #17
   199f0:	push	{r4, r5, r6, sl, fp, lr}
   199f4:	add	fp, sp, #16
   199f8:	mov	r6, r0
   199fc:	ldr	r0, [pc, #120]	; 19a7c <__gcov_flush@@Base+0x4ec>
   19a00:	mov	r4, r1
   19a04:	add	r0, pc, r0
   19a08:	bl	11ee8 <getenv@plt>
   19a0c:	mov	r5, r0
   19a10:	ldr	r0, [pc, #104]	; 19a80 <__gcov_flush@@Base+0x4f0>
   19a14:	add	r0, pc, r0
   19a18:	bl	11ee8 <getenv@plt>
   19a1c:	mov	r1, #0
   19a20:	str	r1, [r4]
   19a24:	str	r1, [r6]
   19a28:	cmp	r5, #0
   19a2c:	ldrbne	r2, [r5]
   19a30:	cmpne	r2, #0
   19a34:	bne	19a40 <__gcov_flush@@Base+0x4b0>
   19a38:	mov	r0, r1
   19a3c:	pop	{r4, r5, r6, sl, fp, pc}
   19a40:	cmp	r0, #0
   19a44:	beq	19a5c <__gcov_flush@@Base+0x4cc>
   19a48:	mov	r1, #0
   19a4c:	mov	r2, #10
   19a50:	bl	11e58 <strtol@plt>
   19a54:	bic	r0, r0, r0, asr #31
   19a58:	b	19a60 <__gcov_flush@@Base+0x4d0>
   19a5c:	mov	r0, #0
   19a60:	str	r0, [r6]
   19a64:	mov	r0, r5
   19a68:	bl	11f48 <strlen@plt>
   19a6c:	mov	r1, r5
   19a70:	str	r0, [r4]
   19a74:	mov	r0, r1
   19a78:	pop	{r4, r5, r6, sl, fp, pc}
   19a7c:	andeq	r1, r0, sp, lsr sl
   19a80:	andeq	r1, r0, r9, lsr sl
   19a84:	push	{r4, r5, r6, r7, fp, lr}
   19a88:	add	fp, sp, #16
   19a8c:	mov	r6, r0
   19a90:	ldr	r0, [fp, #8]
   19a94:	mov	r5, r3
   19a98:	mov	r7, r2
   19a9c:	mov	r4, r1
   19aa0:	cmp	r0, #1
   19aa4:	blt	19adc <__gcov_flush@@Base+0x54c>
   19aa8:	add	r1, r4, #1
   19aac:	mov	r2, #0
   19ab0:	ldrb	r3, [r1]
   19ab4:	cmp	r3, #47	; 0x2f
   19ab8:	beq	19ac8 <__gcov_flush@@Base+0x538>
   19abc:	cmp	r3, #0
   19ac0:	bne	19ad0 <__gcov_flush@@Base+0x540>
   19ac4:	b	19adc <__gcov_flush@@Base+0x54c>
   19ac8:	add	r2, r2, #1
   19acc:	mov	r4, r1
   19ad0:	add	r1, r1, #1
   19ad4:	cmp	r2, r0
   19ad8:	blt	19ab0 <__gcov_flush@@Base+0x520>
   19adc:	mov	r0, r6
   19ae0:	mov	r1, r7
   19ae4:	mov	r2, r5
   19ae8:	bl	11e88 <memcpy@plt>
   19aec:	add	r0, r7, r5
   19af0:	ldrb	r0, [r0, #-1]
   19af4:	cmp	r0, #47	; 0x2f
   19af8:	movne	r0, #47	; 0x2f
   19afc:	strbne	r0, [r6, r5]
   19b00:	mov	r0, r4
   19b04:	addne	r5, r5, #1
   19b08:	add	r5, r6, r5
   19b0c:	bl	11f48 <strlen@plt>
   19b10:	add	r2, r0, #1
   19b14:	mov	r0, r5
   19b18:	mov	r1, r4
   19b1c:	pop	{r4, r5, r6, r7, fp, lr}
   19b20:	b	11e88 <memcpy@plt>
   19b24:	mov	r1, #47	; 0x2f
   19b28:	b	11f54 <strchr@plt>
   19b2c:	mov	r1, #47	; 0x2f
   19b30:	b	11fe4 <strrchr@plt>
   19b34:	push	{fp, lr}
   19b38:	mov	fp, sp
   19b3c:	sub	sp, sp, #8
   19b40:	mov	r0, #0
   19b44:	str	r0, [sp, #4]
   19b48:	add	r1, sp, #4
   19b4c:	mov	r0, #2
   19b50:	bl	11fa8 <prctl@plt>
   19b54:	ldr	r1, [sp, #4]
   19b58:	cmp	r0, #0
   19b5c:	cmpeq	r1, #9
   19b60:	bne	19b74 <__gcov_flush@@Base+0x5e4>
   19b64:	mov	r0, #1
   19b68:	mov	r1, #0
   19b6c:	bl	11fa8 <prctl@plt>
   19b70:	ldr	r1, [sp, #4]
   19b74:	sub	r0, r1, #9
   19b78:	clz	r0, r0
   19b7c:	lsr	r0, r0, #5
   19b80:	mov	sp, fp
   19b84:	pop	{fp, pc}
   19b88:	mov	r0, #1
   19b8c:	mov	r1, #9
   19b90:	b	11fa8 <prctl@plt>

00019b94 <__libc_csu_init@@Base>:
   19b94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19b98:	mov	r7, r0
   19b9c:	ldr	r6, [pc, #72]	; 19bec <__libc_csu_init@@Base+0x58>
   19ba0:	ldr	r5, [pc, #72]	; 19bf0 <__libc_csu_init@@Base+0x5c>
   19ba4:	add	r6, pc, r6
   19ba8:	add	r5, pc, r5
   19bac:	sub	r6, r6, r5
   19bb0:	mov	r8, r1
   19bb4:	mov	r9, r2
   19bb8:	bl	11e20 <fdopen@plt-0x20>
   19bbc:	asrs	r6, r6, #2
   19bc0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19bc4:	mov	r4, #0
   19bc8:	add	r4, r4, #1
   19bcc:	ldr	r3, [r5], #4
   19bd0:	mov	r2, r9
   19bd4:	mov	r1, r8
   19bd8:	mov	r0, r7
   19bdc:	blx	r3
   19be0:	cmp	r6, r4
   19be4:	bne	19bc8 <__libc_csu_init@@Base+0x34>
   19be8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19bec:	andeq	r2, r1, r8, asr r3
   19bf0:	andeq	r2, r1, r0, asr #6

00019bf4 <__libc_csu_fini@@Base>:
   19bf4:	bx	lr
   19bf8:	ldr	r3, [pc, #12]	; 19c0c <__libc_csu_fini@@Base+0x18>
   19bfc:	mov	r1, #0
   19c00:	add	r3, pc, r3
   19c04:	ldr	r2, [r3]
   19c08:	b	11f78 <__cxa_atexit@plt>
   19c0c:	andeq	r2, r1, r0, asr #9

Disassembly of section .fini:

00019c10 <.fini>:
   19c10:	push	{r3, lr}
   19c14:	pop	{r3, pc}
