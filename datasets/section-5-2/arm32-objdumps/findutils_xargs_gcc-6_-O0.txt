
../repos/findutils/xargs/xargs:     file format elf32-littlearm


Disassembly of section .init:

00011198 <.init>:
   11198:	push	{r3, lr}
   1119c:	bl	115e4 <__assert_fail@plt+0x48>
   111a0:	pop	{r3, pc}

Disassembly of section .plt:

000111a4 <fdopen@plt-0x14>:
   111a4:	push	{lr}		; (str lr, [sp, #-4]!)
   111a8:	ldr	lr, [pc, #4]	; 111b4 <fdopen@plt-0x4>
   111ac:	add	lr, pc, lr
   111b0:	ldr	pc, [lr, #8]!
   111b4:	andeq	pc, r1, ip, asr #28

000111b8 <fdopen@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #126976	; 0x1f000
   111c0:	ldr	pc, [ip, #3660]!	; 0xe4c

000111c4 <calloc@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #126976	; 0x1f000
   111cc:	ldr	pc, [ip, #3652]!	; 0xe44

000111d0 <raise@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #126976	; 0x1f000
   111d8:	ldr	pc, [ip, #3644]!	; 0xe3c

000111dc <strcmp@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #126976	; 0x1f000
   111e4:	ldr	pc, [ip, #3636]!	; 0xe34

000111e8 <strtol@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #126976	; 0x1f000
   111f0:	ldr	pc, [ip, #3628]!	; 0xe2c

000111f4 <printf@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #126976	; 0x1f000
   111fc:	ldr	pc, [ip, #3620]!	; 0xe24

00011200 <read@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #126976	; 0x1f000
   11208:	ldr	pc, [ip, #3612]!	; 0xe1c

0001120c <fflush@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #126976	; 0x1f000
   11214:	ldr	pc, [ip, #3604]!	; 0xe14

00011218 <wcwidth@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #126976	; 0x1f000
   11220:	ldr	pc, [ip, #3596]!	; 0xe0c

00011224 <free@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #126976	; 0x1f000
   1122c:	ldr	pc, [ip, #3588]!	; 0xe04

00011230 <ferror@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #126976	; 0x1f000
   11238:	ldr	pc, [ip, #3580]!	; 0xdfc

0001123c <_exit@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #126976	; 0x1f000
   11244:	ldr	pc, [ip, #3572]!	; 0xdf4

00011248 <memcpy@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #126976	; 0x1f000
   11250:	ldr	pc, [ip, #3564]!	; 0xdec

00011254 <execvp@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #126976	; 0x1f000
   1125c:	ldr	pc, [ip, #3556]!	; 0xde4

00011260 <mbsinit@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #126976	; 0x1f000
   11268:	ldr	pc, [ip, #3548]!	; 0xddc

0001126c <signal@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #126976	; 0x1f000
   11274:	ldr	pc, [ip, #3540]!	; 0xdd4

00011278 <memcmp@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #126976	; 0x1f000
   11280:	ldr	pc, [ip, #3532]!	; 0xdcc

00011284 <sysconf@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #126976	; 0x1f000
   1128c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011290 <dup2@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #126976	; 0x1f000
   11298:	ldr	pc, [ip, #3516]!	; 0xdbc

0001129c <getrlimit64@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #126976	; 0x1f000
   112a4:	ldr	pc, [ip, #3508]!	; 0xdb4

000112a8 <realloc@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #126976	; 0x1f000
   112b0:	ldr	pc, [ip, #3500]!	; 0xdac

000112b4 <textdomain@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #126976	; 0x1f000
   112bc:	ldr	pc, [ip, #3492]!	; 0xda4

000112c0 <iswcntrl@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #126976	; 0x1f000
   112c8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112cc <iswprint@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #126976	; 0x1f000
   112d4:	ldr	pc, [ip, #3476]!	; 0xd94

000112d8 <poll@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #126976	; 0x1f000
   112e0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112e4 <sigaction@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #126976	; 0x1f000
   112ec:	ldr	pc, [ip, #3460]!	; 0xd84

000112f0 <fwrite@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #126976	; 0x1f000
   112f8:	ldr	pc, [ip, #3452]!	; 0xd7c

000112fc <lseek64@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #126976	; 0x1f000
   11304:	ldr	pc, [ip, #3444]!	; 0xd74

00011308 <waitpid@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #126976	; 0x1f000
   11310:	ldr	pc, [ip, #3436]!	; 0xd6c

00011314 <__ctype_get_mb_cur_max@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #126976	; 0x1f000
   1131c:	ldr	pc, [ip, #3428]!	; 0xd64

00011320 <strcpy@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #126976	; 0x1f000
   11328:	ldr	pc, [ip, #3420]!	; 0xd5c

0001132c <__fpending@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #126976	; 0x1f000
   11334:	ldr	pc, [ip, #3412]!	; 0xd54

00011338 <mbrtowc@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #126976	; 0x1f000
   11340:	ldr	pc, [ip, #3404]!	; 0xd4c

00011344 <error@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #126976	; 0x1f000
   1134c:	ldr	pc, [ip, #3396]!	; 0xd44

00011350 <opendir@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #126976	; 0x1f000
   11358:	ldr	pc, [ip, #3388]!	; 0xd3c

0001135c <open64@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #126976	; 0x1f000
   11364:	ldr	pc, [ip, #3380]!	; 0xd34

00011368 <getenv@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #126976	; 0x1f000
   11370:	ldr	pc, [ip, #3372]!	; 0xd2c

00011374 <malloc@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #126976	; 0x1f000
   1137c:	ldr	pc, [ip, #3364]!	; 0xd24

00011380 <__libc_start_main@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #126976	; 0x1f000
   11388:	ldr	pc, [ip, #3356]!	; 0xd1c

0001138c <__freading@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #126976	; 0x1f000
   11394:	ldr	pc, [ip, #3348]!	; 0xd14

00011398 <__gmon_start__@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #126976	; 0x1f000
   113a0:	ldr	pc, [ip, #3340]!	; 0xd0c

000113a4 <getopt_long@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #126976	; 0x1f000
   113ac:	ldr	pc, [ip, #3332]!	; 0xd04

000113b0 <__ctype_b_loc@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #126976	; 0x1f000
   113b8:	ldr	pc, [ip, #3324]!	; 0xcfc

000113bc <getpid@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #126976	; 0x1f000
   113c4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113c8 <exit@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #126976	; 0x1f000
   113d0:	ldr	pc, [ip, #3308]!	; 0xcec

000113d4 <gettext@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #126976	; 0x1f000
   113dc:	ldr	pc, [ip, #3300]!	; 0xce4

000113e0 <strtoul@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #126976	; 0x1f000
   113e8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113ec <strlen@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #126976	; 0x1f000
   113f4:	ldr	pc, [ip, #3284]!	; 0xcd4

000113f8 <strchr@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #126976	; 0x1f000
   11400:	ldr	pc, [ip, #3276]!	; 0xccc

00011404 <setenv@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #126976	; 0x1f000
   1140c:	ldr	pc, [ip, #3268]!	; 0xcc4

00011410 <fprintf@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #126976	; 0x1f000
   11418:	ldr	pc, [ip, #3260]!	; 0xcbc

0001141c <__errno_location@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #126976	; 0x1f000
   11424:	ldr	pc, [ip, #3252]!	; 0xcb4

00011428 <snprintf@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #126976	; 0x1f000
   11430:	ldr	pc, [ip, #3244]!	; 0xcac

00011434 <__cxa_atexit@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #126976	; 0x1f000
   1143c:	ldr	pc, [ip, #3236]!	; 0xca4

00011440 <memset@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #126976	; 0x1f000
   11448:	ldr	pc, [ip, #3228]!	; 0xc9c

0001144c <strncpy@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #126976	; 0x1f000
   11454:	ldr	pc, [ip, #3220]!	; 0xc94

00011458 <write@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #126976	; 0x1f000
   11460:	ldr	pc, [ip, #3212]!	; 0xc8c

00011464 <fileno@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #126976	; 0x1f000
   1146c:	ldr	pc, [ip, #3204]!	; 0xc84

00011470 <memchr@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #126976	; 0x1f000
   11478:	ldr	pc, [ip, #3196]!	; 0xc7c

0001147c <fclose@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #126976	; 0x1f000
   11484:	ldr	pc, [ip, #3188]!	; 0xc74

00011488 <strnlen@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #126976	; 0x1f000
   11490:	ldr	pc, [ip, #3180]!	; 0xc6c

00011494 <pipe@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #126976	; 0x1f000
   1149c:	ldr	pc, [ip, #3172]!	; 0xc64

000114a0 <fseeko64@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #126976	; 0x1f000
   114a8:	ldr	pc, [ip, #3164]!	; 0xc5c

000114ac <fcntl64@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #126976	; 0x1f000
   114b4:	ldr	pc, [ip, #3156]!	; 0xc54

000114b8 <setlocale@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #126976	; 0x1f000
   114c0:	ldr	pc, [ip, #3148]!	; 0xc4c

000114c4 <sigemptyset@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #126976	; 0x1f000
   114cc:	ldr	pc, [ip, #3140]!	; 0xc44

000114d0 <fork@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #126976	; 0x1f000
   114d8:	ldr	pc, [ip, #3132]!	; 0xc3c

000114dc <strrchr@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #126976	; 0x1f000
   114e4:	ldr	pc, [ip, #3124]!	; 0xc34

000114e8 <nl_langinfo@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #126976	; 0x1f000
   114f0:	ldr	pc, [ip, #3116]!	; 0xc2c

000114f4 <fputc@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #126976	; 0x1f000
   114fc:	ldr	pc, [ip, #3108]!	; 0xc24

00011500 <readdir64@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #126976	; 0x1f000
   11508:	ldr	pc, [ip, #3100]!	; 0xc1c

0001150c <fdopendir@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #126976	; 0x1f000
   11514:	ldr	pc, [ip, #3092]!	; 0xc14

00011518 <putc@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #126976	; 0x1f000
   11520:	ldr	pc, [ip, #3084]!	; 0xc0c

00011524 <dirfd@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #126976	; 0x1f000
   1152c:	ldr	pc, [ip, #3076]!	; 0xc04

00011530 <bindtextdomain@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #126976	; 0x1f000
   11538:	ldr	pc, [ip, #3068]!	; 0xbfc

0001153c <isatty@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #126976	; 0x1f000
   11544:	ldr	pc, [ip, #3060]!	; 0xbf4

00011548 <unsetenv@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #126976	; 0x1f000
   11550:	ldr	pc, [ip, #3052]!	; 0xbec

00011554 <fputs@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #126976	; 0x1f000
   1155c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011560 <strncmp@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #126976	; 0x1f000
   11568:	ldr	pc, [ip, #3036]!	; 0xbdc

0001156c <abort@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #126976	; 0x1f000
   11574:	ldr	pc, [ip, #3028]!	; 0xbd4

00011578 <getc@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #126976	; 0x1f000
   11580:	ldr	pc, [ip, #3020]!	; 0xbcc

00011584 <close@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #126976	; 0x1f000
   1158c:	ldr	pc, [ip, #3012]!	; 0xbc4

00011590 <closedir@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #126976	; 0x1f000
   11598:	ldr	pc, [ip, #3004]!	; 0xbbc

0001159c <__assert_fail@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #126976	; 0x1f000
   115a4:	ldr	pc, [ip, #2996]!	; 0xbb4

Disassembly of section .text:

000115a8 <.text>:
   115a8:	mov	fp, #0
   115ac:	mov	lr, #0
   115b0:	pop	{r1}		; (ldr r1, [sp], #4)
   115b4:	mov	r2, sp
   115b8:	push	{r2}		; (str r2, [sp, #-4]!)
   115bc:	push	{r0}		; (str r0, [sp, #-4]!)
   115c0:	ldr	ip, [pc, #16]	; 115d8 <__assert_fail@plt+0x3c>
   115c4:	push	{ip}		; (str ip, [sp, #-4]!)
   115c8:	ldr	r0, [pc, #12]	; 115dc <__assert_fail@plt+0x40>
   115cc:	ldr	r3, [pc, #12]	; 115e0 <__assert_fail@plt+0x44>
   115d0:	bl	11380 <__libc_start_main@plt>
   115d4:	bl	1156c <abort@plt>
   115d8:	andeq	lr, r1, r0, lsr #14
   115dc:	andeq	r1, r1, r0, ror #22
   115e0:	andeq	lr, r1, r0, asr #13
   115e4:	ldr	r3, [pc, #20]	; 11600 <__assert_fail@plt+0x64>
   115e8:	ldr	r2, [pc, #20]	; 11604 <__assert_fail@plt+0x68>
   115ec:	add	r3, pc, r3
   115f0:	ldr	r2, [r3, r2]
   115f4:	cmp	r2, #0
   115f8:	bxeq	lr
   115fc:	b	11398 <__gmon_start__@plt>
   11600:	andeq	pc, r1, ip, lsl #20
   11604:	andeq	r0, r0, ip, asr r1
   11608:	ldr	r3, [pc, #28]	; 1162c <__assert_fail@plt+0x90>
   1160c:	ldr	r0, [pc, #28]	; 11630 <__assert_fail@plt+0x94>
   11610:	sub	r3, r3, r0
   11614:	cmp	r3, #6
   11618:	bxls	lr
   1161c:	ldr	r3, [pc, #16]	; 11634 <__assert_fail@plt+0x98>
   11620:	cmp	r3, #0
   11624:	bxeq	lr
   11628:	bx	r3
   1162c:			; <UNDEFINED> instruction: 0x000311bf
   11630:			; <UNDEFINED> instruction: 0x000311bc
   11634:	andeq	r0, r0, r0
   11638:	ldr	r1, [pc, #36]	; 11664 <__assert_fail@plt+0xc8>
   1163c:	ldr	r0, [pc, #36]	; 11668 <__assert_fail@plt+0xcc>
   11640:	sub	r1, r1, r0
   11644:	asr	r1, r1, #2
   11648:	add	r1, r1, r1, lsr #31
   1164c:	asrs	r1, r1, #1
   11650:	bxeq	lr
   11654:	ldr	r3, [pc, #16]	; 1166c <__assert_fail@plt+0xd0>
   11658:	cmp	r3, #0
   1165c:	bxeq	lr
   11660:	bx	r3
   11664:			; <UNDEFINED> instruction: 0x000311bc
   11668:			; <UNDEFINED> instruction: 0x000311bc
   1166c:	andeq	r0, r0, r0
   11670:	push	{r4, lr}
   11674:	ldr	r4, [pc, #24]	; 11694 <__assert_fail@plt+0xf8>
   11678:	ldrb	r3, [r4]
   1167c:	cmp	r3, #0
   11680:	popne	{r4, pc}
   11684:	bl	11608 <__assert_fail@plt+0x6c>
   11688:	mov	r3, #1
   1168c:	strb	r3, [r4]
   11690:	pop	{r4, pc}
   11694:	andeq	r1, r3, ip, ror #3
   11698:	ldr	r0, [pc, #40]	; 116c8 <__assert_fail@plt+0x12c>
   1169c:	ldr	r3, [r0]
   116a0:	cmp	r3, #0
   116a4:	bne	116ac <__assert_fail@plt+0x110>
   116a8:	b	11638 <__assert_fail@plt+0x9c>
   116ac:	ldr	r3, [pc, #24]	; 116cc <__assert_fail@plt+0x130>
   116b0:	cmp	r3, #0
   116b4:	beq	116a8 <__assert_fail@plt+0x10c>
   116b8:	push	{r4, lr}
   116bc:	blx	r3
   116c0:	pop	{r4, lr}
   116c4:	b	11638 <__assert_fail@plt+0x9c>
   116c8:	andeq	r0, r3, r4, lsl pc
   116cc:	andeq	r0, r0, r0
   116d0:	push	{fp, lr}
   116d4:	add	fp, sp, #4
   116d8:	sub	sp, sp, #32
   116dc:	str	r0, [fp, #-24]	; 0xffffffe8
   116e0:	mov	r3, #8
   116e4:	str	r3, [fp, #-12]
   116e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   116ec:	ldrb	r3, [r3]
   116f0:	cmp	r3, #92	; 0x5c
   116f4:	beq	1170c <__assert_fail@plt+0x170>
   116f8:	ldr	r3, [pc, #412]	; 1189c <__assert_fail@plt+0x300>
   116fc:	mov	r2, #236	; 0xec
   11700:	ldr	r1, [pc, #408]	; 118a0 <__assert_fail@plt+0x304>
   11704:	ldr	r0, [pc, #408]	; 118a4 <__assert_fail@plt+0x308>
   11708:	bl	1159c <__assert_fail@plt>
   1170c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11710:	add	r3, r3, #1
   11714:	ldrb	r3, [r3]
   11718:	cmp	r3, #120	; 0x78
   1171c:	bne	11738 <__assert_fail@plt+0x19c>
   11720:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11724:	add	r3, r3, #2
   11728:	str	r3, [fp, #-8]
   1172c:	mov	r3, #16
   11730:	str	r3, [fp, #-12]
   11734:	b	117a4 <__assert_fail@plt+0x208>
   11738:	bl	113b0 <__ctype_b_loc@plt>
   1173c:	mov	r3, r0
   11740:	ldr	r2, [r3]
   11744:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11748:	add	r3, r3, #1
   1174c:	ldrb	r3, [r3]
   11750:	lsl	r3, r3, #1
   11754:	add	r3, r2, r3
   11758:	ldrh	r3, [r3]
   1175c:	and	r3, r3, #2048	; 0x800
   11760:	cmp	r3, #0
   11764:	beq	11780 <__assert_fail@plt+0x1e4>
   11768:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1176c:	add	r3, r3, #1
   11770:	str	r3, [fp, #-8]
   11774:	mov	r3, #8
   11778:	str	r3, [fp, #-12]
   1177c:	b	117a4 <__assert_fail@plt+0x208>
   11780:	mov	r3, #0
   11784:	str	r3, [fp, #-8]
   11788:	ldr	r0, [pc, #280]	; 118a8 <__assert_fail@plt+0x30c>
   1178c:	bl	113d4 <gettext@plt>
   11790:	mov	r2, r0
   11794:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11798:	mov	r1, #0
   1179c:	mov	r0, #1
   117a0:	bl	11344 <error@plt>
   117a4:	bl	1141c <__errno_location@plt>
   117a8:	mov	r2, r0
   117ac:	mov	r3, #0
   117b0:	str	r3, [r2]
   117b4:	mov	r3, #0
   117b8:	str	r3, [fp, #-20]	; 0xffffffec
   117bc:	sub	r3, fp, #20
   117c0:	ldr	r2, [fp, #-12]
   117c4:	mov	r1, r3
   117c8:	ldr	r0, [fp, #-8]
   117cc:	bl	113e0 <strtoul@plt>
   117d0:	str	r0, [fp, #-16]
   117d4:	ldr	r3, [fp, #-16]
   117d8:	cmn	r3, #1
   117dc:	bne	117f4 <__assert_fail@plt+0x258>
   117e0:	bl	1141c <__errno_location@plt>
   117e4:	mov	r3, r0
   117e8:	ldr	r3, [r3]
   117ec:	cmp	r3, #34	; 0x22
   117f0:	beq	11800 <__assert_fail@plt+0x264>
   117f4:	ldr	r3, [fp, #-16]
   117f8:	cmp	r3, #255	; 0xff
   117fc:	bls	11854 <__assert_fail@plt+0x2b8>
   11800:	ldr	r3, [fp, #-12]
   11804:	cmp	r3, #16
   11808:	bne	11830 <__assert_fail@plt+0x294>
   1180c:	ldr	r0, [pc, #152]	; 118ac <__assert_fail@plt+0x310>
   11810:	bl	113d4 <gettext@plt>
   11814:	mov	r2, r0
   11818:	mov	r3, #255	; 0xff
   1181c:	str	r3, [sp]
   11820:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11824:	mov	r1, #0
   11828:	mov	r0, #1
   1182c:	bl	11344 <error@plt>
   11830:	ldr	r0, [pc, #120]	; 118b0 <__assert_fail@plt+0x314>
   11834:	bl	113d4 <gettext@plt>
   11838:	mov	r2, r0
   1183c:	mov	r3, #255	; 0xff
   11840:	str	r3, [sp]
   11844:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11848:	mov	r1, #0
   1184c:	mov	r0, #1
   11850:	bl	11344 <error@plt>
   11854:	ldr	r3, [fp, #-20]	; 0xffffffec
   11858:	ldrb	r3, [r3]
   1185c:	cmp	r3, #0
   11860:	beq	11888 <__assert_fail@plt+0x2ec>
   11864:	ldr	r0, [pc, #72]	; 118b4 <__assert_fail@plt+0x318>
   11868:	bl	113d4 <gettext@plt>
   1186c:	mov	r2, r0
   11870:	ldr	r3, [fp, #-20]	; 0xffffffec
   11874:	str	r3, [sp]
   11878:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1187c:	mov	r1, #0
   11880:	mov	r0, #1
   11884:	bl	11344 <error@plt>
   11888:	ldr	r3, [fp, #-16]
   1188c:	uxtb	r3, r3
   11890:	mov	r0, r3
   11894:	sub	sp, fp, #4
   11898:	pop	{fp, pc}
   1189c:	andeq	r0, r2, ip, ror r0
   118a0:	andeq	lr, r1, ip, lsr r9
   118a4:	andeq	lr, r1, r4, asr #18
   118a8:	andeq	lr, r1, r4, asr r9
   118ac:	muleq	r1, r4, r9
   118b0:	strdeq	lr, [r1], -r8
   118b4:	andeq	lr, r1, ip, asr sl
   118b8:	push	{fp, lr}
   118bc:	add	fp, sp, #4
   118c0:	sub	sp, sp, #8
   118c4:	str	r0, [fp, #-8]
   118c8:	ldr	r0, [fp, #-8]
   118cc:	bl	113ec <strlen@plt>
   118d0:	mov	r3, r0
   118d4:	cmp	r3, #1
   118d8:	bne	118e8 <__assert_fail@plt+0x34c>
   118dc:	ldr	r3, [fp, #-8]
   118e0:	ldrb	r3, [r3]
   118e4:	b	119ec <__assert_fail@plt+0x450>
   118e8:	ldr	r3, [fp, #-8]
   118ec:	ldrb	r3, [r3]
   118f0:	cmp	r3, #92	; 0x5c
   118f4:	bne	119d0 <__assert_fail@plt+0x434>
   118f8:	ldr	r3, [fp, #-8]
   118fc:	add	r3, r3, #1
   11900:	ldrb	r3, [r3]
   11904:	sub	r3, r3, #92	; 0x5c
   11908:	cmp	r3, #26
   1190c:	ldrls	pc, [pc, r3, lsl #2]
   11910:	b	119c0 <__assert_fail@plt+0x424>
   11914:			; <UNDEFINED> instruction: 0x000119b8
   11918:	andeq	r1, r1, r0, asr #19
   1191c:	andeq	r1, r1, r0, asr #19
   11920:	andeq	r1, r1, r0, asr #19
   11924:	andeq	r1, r1, r0, asr #19
   11928:	andeq	r1, r1, r0, lsl #19
   1192c:	andeq	r1, r1, r8, lsl #19
   11930:	andeq	r1, r1, r0, asr #19
   11934:	andeq	r1, r1, r0, asr #19
   11938:	andeq	r1, r1, r0, asr #19
   1193c:	muleq	r1, r0, r9
   11940:	andeq	r1, r1, r0, asr #19
   11944:	andeq	r1, r1, r0, asr #19
   11948:	andeq	r1, r1, r0, asr #19
   1194c:	andeq	r1, r1, r0, asr #19
   11950:	andeq	r1, r1, r0, asr #19
   11954:	andeq	r1, r1, r0, asr #19
   11958:	andeq	r1, r1, r0, asr #19
   1195c:	muleq	r1, r8, r9
   11960:	andeq	r1, r1, r0, asr #19
   11964:	andeq	r1, r1, r0, asr #19
   11968:	andeq	r1, r1, r0, asr #19
   1196c:	andeq	r1, r1, r0, lsr #19
   11970:	andeq	r1, r1, r0, asr #19
   11974:	andeq	r1, r1, r8, lsr #19
   11978:	andeq	r1, r1, r0, asr #19
   1197c:			; <UNDEFINED> instruction: 0x000119b0
   11980:	mov	r3, #7
   11984:	b	119ec <__assert_fail@plt+0x450>
   11988:	mov	r3, #8
   1198c:	b	119ec <__assert_fail@plt+0x450>
   11990:	mov	r3, #12
   11994:	b	119ec <__assert_fail@plt+0x450>
   11998:	mov	r3, #10
   1199c:	b	119ec <__assert_fail@plt+0x450>
   119a0:	mov	r3, #13
   119a4:	b	119ec <__assert_fail@plt+0x450>
   119a8:	mov	r3, #9
   119ac:	b	119ec <__assert_fail@plt+0x450>
   119b0:	mov	r3, #11
   119b4:	b	119ec <__assert_fail@plt+0x450>
   119b8:	mov	r3, #92	; 0x5c
   119bc:	b	119ec <__assert_fail@plt+0x450>
   119c0:	ldr	r0, [fp, #-8]
   119c4:	bl	116d0 <__assert_fail@plt+0x134>
   119c8:	mov	r3, r0
   119cc:	b	119ec <__assert_fail@plt+0x450>
   119d0:	ldr	r0, [pc, #32]	; 119f8 <__assert_fail@plt+0x45c>
   119d4:	bl	113d4 <gettext@plt>
   119d8:	mov	r2, r0
   119dc:	ldr	r3, [fp, #-8]
   119e0:	mov	r1, #0
   119e4:	mov	r0, #1
   119e8:	bl	11344 <error@plt>
   119ec:	mov	r0, r3
   119f0:	sub	sp, fp, #4
   119f4:	pop	{fp, pc}
   119f8:	andeq	lr, r1, r0, asr #21
   119fc:	push	{fp}		; (str fp, [sp, #-4]!)
   11a00:	add	fp, sp, #0
   11a04:	nop			; (mov r0, r0)
   11a08:	add	sp, fp, #0
   11a0c:	pop	{fp}		; (ldr fp, [sp], #4)
   11a10:	bx	lr
   11a14:	push	{fp, lr}
   11a18:	add	fp, sp, #4
   11a1c:	ldr	r0, [pc, #20]	; 11a38 <__assert_fail@plt+0x49c>
   11a20:	bl	113d4 <gettext@plt>
   11a24:	mov	r3, r0
   11a28:	mov	r2, r3
   11a2c:	mov	r1, #0
   11a30:	mov	r0, #1
   11a34:	bl	11344 <error@plt>
   11a38:	andeq	lr, r1, r4, asr #22
   11a3c:	push	{fp}		; (str fp, [sp, #-4]!)
   11a40:	add	fp, sp, #0
   11a44:	sub	sp, sp, #12
   11a48:	str	r0, [fp, #-8]
   11a4c:	str	r1, [fp, #-12]
   11a50:	ldr	r2, [fp, #-8]
   11a54:	ldr	r3, [fp, #-12]
   11a58:	cmp	r2, r3
   11a5c:	bcs	11a68 <__assert_fail@plt+0x4cc>
   11a60:	ldr	r3, [fp, #-8]
   11a64:	b	11a6c <__assert_fail@plt+0x4d0>
   11a68:	ldr	r3, [fp, #-12]
   11a6c:	mov	r0, r3
   11a70:	add	sp, fp, #0
   11a74:	pop	{fp}		; (ldr fp, [sp], #4)
   11a78:	bx	lr
   11a7c:	push	{fp, lr}
   11a80:	add	fp, sp, #4
   11a84:	sub	sp, sp, #24
   11a88:	str	r0, [fp, #-24]	; 0xffffffe8
   11a8c:	mov	r1, #0
   11a90:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11a94:	bl	164dc <__assert_fail@plt+0x4f40>
   11a98:	str	r0, [fp, #-8]
   11a9c:	ldr	r3, [fp, #-8]
   11aa0:	cmp	r3, #0
   11aa4:	bge	11ab0 <__assert_fail@plt+0x514>
   11aa8:	mov	r3, #0
   11aac:	b	11b00 <__assert_fail@plt+0x564>
   11ab0:	ldr	r1, [pc, #84]	; 11b0c <__assert_fail@plt+0x570>
   11ab4:	ldr	r0, [fp, #-8]
   11ab8:	bl	111b8 <fdopen@plt>
   11abc:	str	r0, [fp, #-12]
   11ac0:	ldr	r3, [fp, #-12]
   11ac4:	cmp	r3, #0
   11ac8:	bne	11afc <__assert_fail@plt+0x560>
   11acc:	bl	1141c <__errno_location@plt>
   11ad0:	mov	r3, r0
   11ad4:	ldr	r3, [r3]
   11ad8:	str	r3, [fp, #-16]
   11adc:	ldr	r0, [fp, #-8]
   11ae0:	bl	11584 <close@plt>
   11ae4:	bl	1141c <__errno_location@plt>
   11ae8:	mov	r2, r0
   11aec:	ldr	r3, [fp, #-16]
   11af0:	str	r3, [r2]
   11af4:	mov	r3, #0
   11af8:	b	11b00 <__assert_fail@plt+0x564>
   11afc:	ldr	r3, [fp, #-12]
   11b00:	mov	r0, r3
   11b04:	sub	sp, fp, #4
   11b08:	pop	{fp, pc}
   11b0c:	andeq	lr, r1, r8, ror #22
   11b10:	push	{fp, lr}
   11b14:	add	fp, sp, #4
   11b18:	sub	sp, sp, #16
   11b1c:	str	r0, [fp, #-8]
   11b20:	str	r1, [fp, #-12]
   11b24:	ldr	r0, [pc, #48]	; 11b5c <__assert_fail@plt+0x5c0>
   11b28:	bl	113d4 <gettext@plt>
   11b2c:	mov	r2, r0
   11b30:	ldr	r3, [fp, #-12]
   11b34:	str	r3, [sp, #4]
   11b38:	ldr	r3, [fp, #-8]
   11b3c:	str	r3, [sp]
   11b40:	ldr	r3, [fp, #-12]
   11b44:	mov	r1, #0
   11b48:	mov	r0, #0
   11b4c:	bl	11344 <error@plt>
   11b50:	nop			; (mov r0, r0)
   11b54:	sub	sp, fp, #4
   11b58:	pop	{fp, pc}
   11b5c:	andeq	lr, r1, ip, ror #22
   11b60:	push	{r4, r5, r6, fp, lr}
   11b64:	add	fp, sp, #16
   11b68:	sub	sp, sp, #244	; 0xf4
   11b6c:	str	r0, [fp, #-232]	; 0xffffff18
   11b70:	str	r1, [fp, #-236]	; 0xffffff14
   11b74:	mov	r3, #0
   11b78:	str	r3, [fp, #-24]	; 0xffffffe8
   11b7c:	mov	r3, #1
   11b80:	str	r3, [fp, #-28]	; 0xffffffe4
   11b84:	ldr	r3, [pc, #4080]	; 12b7c <__assert_fail@plt+0x15e0>
   11b88:	str	r3, [fp, #-32]	; 0xffffffe0
   11b8c:	ldr	r2, [pc, #4076]	; 12b80 <__assert_fail@plt+0x15e4>
   11b90:	sub	r3, fp, #84	; 0x54
   11b94:	ldm	r2, {r0, r1}
   11b98:	str	r0, [r3]
   11b9c:	add	r3, r3, #4
   11ba0:	strb	r1, [r3]
   11ba4:	ldr	r3, [pc, #4056]	; 12b84 <__assert_fail@plt+0x15e8>
   11ba8:	str	r3, [fp, #-36]	; 0xffffffdc
   11bac:	ldr	r3, [pc, #4052]	; 12b88 <__assert_fail@plt+0x15ec>
   11bb0:	str	r3, [fp, #-40]	; 0xffffffd8
   11bb4:	ldr	r3, [fp, #-236]	; 0xffffff14
   11bb8:	ldr	r3, [r3]
   11bbc:	cmp	r3, #0
   11bc0:	beq	11bd8 <__assert_fail@plt+0x63c>
   11bc4:	ldr	r3, [fp, #-236]	; 0xffffff14
   11bc8:	ldr	r3, [r3]
   11bcc:	mov	r0, r3
   11bd0:	bl	185fc <__assert_fail@plt+0x7060>
   11bd4:	b	11be0 <__assert_fail@plt+0x644>
   11bd8:	ldr	r0, [pc, #4012]	; 12b8c <__assert_fail@plt+0x15f0>
   11bdc:	bl	185fc <__assert_fail@plt+0x7060>
   11be0:	bl	16288 <__assert_fail@plt+0x4cec>
   11be4:	bl	113bc <getpid@plt>
   11be8:	mov	r2, r0
   11bec:	ldr	r3, [pc, #3996]	; 12b90 <__assert_fail@plt+0x15f4>
   11bf0:	str	r2, [r3]
   11bf4:	ldr	r3, [pc, #3992]	; 12b94 <__assert_fail@plt+0x15f8>
   11bf8:	mov	r2, #0
   11bfc:	str	r2, [r3]
   11c00:	ldr	r1, [pc, #3984]	; 12b98 <__assert_fail@plt+0x15fc>
   11c04:	mov	r0, #6
   11c08:	bl	114b8 <setlocale@plt>
   11c0c:	ldr	r1, [pc, #3976]	; 12b9c <__assert_fail@plt+0x1600>
   11c10:	ldr	r0, [pc, #3976]	; 12ba0 <__assert_fail@plt+0x1604>
   11c14:	bl	11530 <bindtextdomain@plt>
   11c18:	ldr	r0, [pc, #3968]	; 12ba0 <__assert_fail@plt+0x1604>
   11c1c:	bl	112b4 <textdomain@plt>
   11c20:	ldr	r0, [pc, #3964]	; 12ba4 <__assert_fail@plt+0x1608>
   11c24:	bl	1e724 <__assert_fail@plt+0xd188>
   11c28:	mov	r3, r0
   11c2c:	cmp	r3, #0
   11c30:	bne	11c48 <__assert_fail@plt+0x6ac>
   11c34:	ldr	r0, [pc, #3948]	; 12ba8 <__assert_fail@plt+0x160c>
   11c38:	bl	1e724 <__assert_fail@plt+0xd188>
   11c3c:	mov	r3, r0
   11c40:	cmp	r3, #0
   11c44:	beq	11c70 <__assert_fail@plt+0x6d4>
   11c48:	bl	1141c <__errno_location@plt>
   11c4c:	mov	r3, r0
   11c50:	ldr	r4, [r3]
   11c54:	ldr	r0, [pc, #3920]	; 12bac <__assert_fail@plt+0x1610>
   11c58:	bl	113d4 <gettext@plt>
   11c5c:	mov	r3, r0
   11c60:	mov	r2, r3
   11c64:	mov	r1, r4
   11c68:	mov	r0, #1
   11c6c:	bl	11344 <error@plt>
   11c70:	mov	r1, #2048	; 0x800
   11c74:	ldr	r0, [pc, #3892]	; 12bb0 <__assert_fail@plt+0x1614>
   11c78:	bl	15918 <__assert_fail@plt+0x437c>
   11c7c:	str	r0, [fp, #-52]	; 0xffffffcc
   11c80:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11c84:	cmp	r3, #1
   11c88:	bne	11c98 <__assert_fail@plt+0x6fc>
   11c8c:	ldr	r3, [pc, #3872]	; 12bb4 <__assert_fail@plt+0x1618>
   11c90:	str	r3, [fp, #-40]	; 0xffffffd8
   11c94:	b	12580 <__assert_fail@plt+0xfe4>
   11c98:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11c9c:	cmp	r3, #2
   11ca0:	bne	11cb0 <__assert_fail@plt+0x714>
   11ca4:	ldr	r3, [pc, #3848]	; 12bb4 <__assert_fail@plt+0x1618>
   11ca8:	str	r3, [fp, #-40]	; 0xffffffd8
   11cac:	b	12580 <__assert_fail@plt+0xfe4>
   11cb0:	mov	r0, #0
   11cb4:	bl	11284 <sysconf@plt>
   11cb8:	str	r0, [fp, #-56]	; 0xffffffc8
   11cbc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11cc0:	cmp	r3, #0
   11cc4:	ble	11d10 <__assert_fail@plt+0x774>
   11cc8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11ccc:	cmp	r3, #2048	; 0x800
   11cd0:	bgt	11ce8 <__assert_fail@plt+0x74c>
   11cd4:	ldr	r3, [pc, #3804]	; 12bb8 <__assert_fail@plt+0x161c>
   11cd8:	ldr	r2, [pc, #3804]	; 12bbc <__assert_fail@plt+0x1620>
   11cdc:	ldr	r1, [pc, #3804]	; 12bc0 <__assert_fail@plt+0x1624>
   11ce0:	ldr	r0, [pc, #3804]	; 12bc4 <__assert_fail@plt+0x1628>
   11ce4:	bl	1159c <__assert_fail@plt>
   11ce8:	ldr	r3, [pc, #3776]	; 12bb0 <__assert_fail@plt+0x1614>
   11cec:	ldr	r2, [r3, #12]
   11cf0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11cf4:	sub	r3, r3, #2048	; 0x800
   11cf8:	mov	r1, r3
   11cfc:	mov	r0, r2
   11d00:	bl	11a3c <__assert_fail@plt+0x4a0>
   11d04:	mov	r2, r0
   11d08:	ldr	r3, [pc, #3744]	; 12bb0 <__assert_fail@plt+0x1614>
   11d0c:	str	r2, [r3, #12]
   11d10:	ldr	r3, [pc, #3736]	; 12bb0 <__assert_fail@plt+0x1614>
   11d14:	ldr	r3, [r3, #12]
   11d18:	cmp	r3, #2048	; 0x800
   11d1c:	bcs	11d34 <__assert_fail@plt+0x798>
   11d20:	ldr	r3, [pc, #3728]	; 12bb8 <__assert_fail@plt+0x161c>
   11d24:	ldr	r2, [pc, #3740]	; 12bc8 <__assert_fail@plt+0x162c>
   11d28:	ldr	r1, [pc, #3728]	; 12bc0 <__assert_fail@plt+0x1624>
   11d2c:	ldr	r0, [pc, #3736]	; 12bcc <__assert_fail@plt+0x1630>
   11d30:	bl	1159c <__assert_fail@plt>
   11d34:	ldr	r3, [pc, #3700]	; 12bb0 <__assert_fail@plt+0x1614>
   11d38:	ldr	r2, [pc, #3728]	; 12bd0 <__assert_fail@plt+0x1634>
   11d3c:	str	r2, [r3, #32]
   11d40:	ldr	r0, [pc, #3688]	; 12bb0 <__assert_fail@plt+0x1614>
   11d44:	bl	15a84 <__assert_fail@plt+0x44e8>
   11d48:	b	12580 <__assert_fail@plt+0xfe4>
   11d4c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11d50:	sub	r3, r3, #48	; 0x30
   11d54:	cmp	r3, #208	; 0xd0
   11d58:	ldrls	pc, [pc, r3, lsl #2]
   11d5c:	b	12578 <__assert_fail@plt+0xfdc>
   11d60:	andeq	r2, r1, r4, lsr #1
   11d64:	andeq	r2, r1, r8, ror r5
   11d68:	andeq	r2, r1, r8, ror r5
   11d6c:	andeq	r2, r1, r8, ror r5
   11d70:	andeq	r2, r1, r8, ror r5
   11d74:	andeq	r2, r1, r8, ror r5
   11d78:	andeq	r2, r1, r8, ror r5
   11d7c:	andeq	r2, r1, r8, ror r5
   11d80:	andeq	r2, r1, r8, ror r5
   11d84:	andeq	r2, r1, r8, ror r5
   11d88:	andeq	r2, r1, r8, ror r5
   11d8c:	andeq	r2, r1, r8, ror r5
   11d90:	andeq	r2, r1, r8, ror r5
   11d94:	andeq	r2, r1, r8, ror r5
   11d98:	andeq	r2, r1, r8, ror r5
   11d9c:	andeq	r2, r1, r8, ror r5
   11da0:	andeq	r2, r1, r8, ror r5
   11da4:	andeq	r2, r1, r8, ror r5
   11da8:	andeq	r2, r1, r8, ror r5
   11dac:	andeq	r2, r1, r8, ror r5
   11db0:	andeq	r2, r1, r8, ror r5
   11db4:	andeq	r2, r1, r8, ror #1
   11db8:	andeq	r2, r1, r8, ror r5
   11dbc:	andeq	r2, r1, r8, ror r5
   11dc0:	andeq	r2, r1, r8, ror r5
   11dc4:	andeq	r2, r1, r8, lsr r1
   11dc8:	andeq	r2, r1, r8, ror r5
   11dcc:	andeq	r2, r1, r8, ror r5
   11dd0:			; <UNDEFINED> instruction: 0x000121bc
   11dd4:	andeq	r2, r1, r8, ror r5
   11dd8:	andeq	r2, r1, r8, ror r5
   11ddc:	andeq	r2, r1, r8, ror r5
   11de0:	andeq	r2, r1, r8, lsl #9
   11de4:	andeq	r2, r1, r8, ror r5
   11de8:	andeq	r2, r1, r8, ror r5
   11dec:	andeq	r2, r1, r4, lsr #8
   11df0:	andeq	r2, r1, r8, ror r5
   11df4:	andeq	r2, r1, r8, ror r5
   11df8:	andeq	r2, r1, r8, ror r5
   11dfc:	andeq	r2, r1, r8, ror r5
   11e00:	andeq	r2, r1, r8, ror r5
   11e04:	andeq	r2, r1, r8, ror r5
   11e08:	andeq	r2, r1, r8, ror r5
   11e0c:	andeq	r2, r1, r8, ror r5
   11e10:	andeq	r2, r1, r8, ror r5
   11e14:	andeq	r2, r1, r8, ror r5
   11e18:	andeq	r2, r1, r8, ror r5
   11e1c:	andeq	r2, r1, r8, ror r5
   11e20:	andeq	r2, r1, r8, ror r5
   11e24:			; <UNDEFINED> instruction: 0x000124b8
   11e28:	andeq	r2, r1, r8, ror r5
   11e2c:	andeq	r2, r1, r8, ror r5
   11e30:	strheq	r2, [r1], -ip
   11e34:	andeq	r2, r1, r8, ror #1
   11e38:	andeq	r2, r1, r8, ror r5
   11e3c:	andeq	r2, r1, r8, ror r5
   11e40:	andeq	r2, r1, r0, lsr r1
   11e44:	andeq	r2, r1, r8, lsr r1
   11e48:	andeq	r2, r1, r8, ror r5
   11e4c:	andeq	r2, r1, r8, ror r5
   11e50:	andeq	r2, r1, r0, asr #4
   11e54:	andeq	r2, r1, r8, ror r5
   11e58:	andeq	r2, r1, r4, ror #5
   11e5c:	andeq	r2, r1, r0, asr r4
   11e60:	andeq	r2, r1, r0, ror #8
   11e64:	andeq	r2, r1, r8, ror r5
   11e68:	andeq	r2, r1, ip, ror r4
   11e6c:	andeq	r2, r1, r8, lsl #7
   11e70:	andeq	r2, r1, r0, lsr r4
   11e74:	andeq	r2, r1, r8, ror r5
   11e78:	andeq	r2, r1, r8, asr #9
   11e7c:	andeq	r2, r1, r8, ror r5
   11e80:	andeq	r2, r1, r0, asr #8
   11e84:	andeq	r2, r1, r8, ror r5
   11e88:	andeq	r2, r1, r8, ror r5
   11e8c:	andeq	r2, r1, r8, ror r5
   11e90:	andeq	r2, r1, r8, ror r5
   11e94:	andeq	r2, r1, r8, ror r5
   11e98:	andeq	r2, r1, r8, ror r5
   11e9c:	andeq	r2, r1, r8, ror r5
   11ea0:	andeq	r2, r1, r8, ror r5
   11ea4:	andeq	r2, r1, r8, ror r5
   11ea8:	andeq	r2, r1, r8, ror r5
   11eac:	andeq	r2, r1, r8, ror r5
   11eb0:	andeq	r2, r1, r8, ror r5
   11eb4:	andeq	r2, r1, r8, ror r5
   11eb8:	andeq	r2, r1, r8, ror r5
   11ebc:	andeq	r2, r1, r8, ror r5
   11ec0:	andeq	r2, r1, r8, ror r5
   11ec4:	andeq	r2, r1, r8, ror r5
   11ec8:	andeq	r2, r1, r8, ror r5
   11ecc:	andeq	r2, r1, r8, ror r5
   11ed0:	andeq	r2, r1, r8, ror r5
   11ed4:	andeq	r2, r1, r8, ror r5
   11ed8:	andeq	r2, r1, r8, ror r5
   11edc:	andeq	r2, r1, r8, ror r5
   11ee0:	andeq	r2, r1, r8, ror r5
   11ee4:	andeq	r2, r1, r8, ror r5
   11ee8:	andeq	r2, r1, r8, ror r5
   11eec:	andeq	r2, r1, r8, ror r5
   11ef0:	andeq	r2, r1, r8, ror r5
   11ef4:	andeq	r2, r1, r8, ror r5
   11ef8:	andeq	r2, r1, r8, ror r5
   11efc:	andeq	r2, r1, r8, ror r5
   11f00:	andeq	r2, r1, r8, ror r5
   11f04:	andeq	r2, r1, r8, ror r5
   11f08:	andeq	r2, r1, r8, ror r5
   11f0c:	andeq	r2, r1, r8, ror r5
   11f10:	andeq	r2, r1, r8, ror r5
   11f14:	andeq	r2, r1, r8, ror r5
   11f18:	andeq	r2, r1, r8, ror r5
   11f1c:	andeq	r2, r1, r8, ror r5
   11f20:	andeq	r2, r1, r8, ror r5
   11f24:	andeq	r2, r1, r8, ror r5
   11f28:	andeq	r2, r1, r8, ror r5
   11f2c:	andeq	r2, r1, r8, ror r5
   11f30:	andeq	r2, r1, r8, ror r5
   11f34:	andeq	r2, r1, r8, ror r5
   11f38:	andeq	r2, r1, r8, ror r5
   11f3c:	andeq	r2, r1, r8, ror r5
   11f40:	andeq	r2, r1, r8, ror r5
   11f44:	andeq	r2, r1, r8, ror r5
   11f48:	andeq	r2, r1, r8, ror r5
   11f4c:	andeq	r2, r1, r8, ror r5
   11f50:	andeq	r2, r1, r8, ror r5
   11f54:	andeq	r2, r1, r8, ror r5
   11f58:	andeq	r2, r1, r8, ror r5
   11f5c:	andeq	r2, r1, r8, ror r5
   11f60:	andeq	r2, r1, r8, ror r5
   11f64:	andeq	r2, r1, r8, ror r5
   11f68:	andeq	r2, r1, r8, ror r5
   11f6c:	andeq	r2, r1, r8, ror r5
   11f70:	andeq	r2, r1, r8, ror r5
   11f74:	andeq	r2, r1, r8, ror r5
   11f78:	andeq	r2, r1, r8, ror r5
   11f7c:	andeq	r2, r1, r8, ror r5
   11f80:	andeq	r2, r1, r8, ror r5
   11f84:	andeq	r2, r1, r8, ror r5
   11f88:	andeq	r2, r1, r8, ror r5
   11f8c:	andeq	r2, r1, r8, ror r5
   11f90:	andeq	r2, r1, r8, ror r5
   11f94:	andeq	r2, r1, r8, ror r5
   11f98:	andeq	r2, r1, r8, ror r5
   11f9c:	andeq	r2, r1, r8, ror r5
   11fa0:	andeq	r2, r1, r8, ror r5
   11fa4:	andeq	r2, r1, r8, ror r5
   11fa8:	andeq	r2, r1, r8, ror r5
   11fac:	andeq	r2, r1, r8, ror r5
   11fb0:	andeq	r2, r1, r8, ror r5
   11fb4:	andeq	r2, r1, r8, ror r5
   11fb8:	andeq	r2, r1, r8, ror r5
   11fbc:	andeq	r2, r1, r8, ror r5
   11fc0:	andeq	r2, r1, r8, ror r5
   11fc4:	andeq	r2, r1, r8, ror r5
   11fc8:	andeq	r2, r1, r8, ror r5
   11fcc:	andeq	r2, r1, r8, ror r5
   11fd0:	andeq	r2, r1, r8, ror r5
   11fd4:	andeq	r2, r1, r8, ror r5
   11fd8:	andeq	r2, r1, r8, ror r5
   11fdc:	andeq	r2, r1, r8, ror r5
   11fe0:	andeq	r2, r1, r8, ror r5
   11fe4:	andeq	r2, r1, r8, ror r5
   11fe8:	andeq	r2, r1, r8, ror r5
   11fec:	andeq	r2, r1, r8, ror r5
   11ff0:	andeq	r2, r1, r8, ror r5
   11ff4:	andeq	r2, r1, r8, ror r5
   11ff8:	andeq	r2, r1, r8, ror r5
   11ffc:	andeq	r2, r1, r8, ror r5
   12000:	andeq	r2, r1, r8, ror r5
   12004:	andeq	r2, r1, r8, ror r5
   12008:	andeq	r2, r1, r8, ror r5
   1200c:	andeq	r2, r1, r8, ror r5
   12010:	andeq	r2, r1, r8, ror r5
   12014:	andeq	r2, r1, r8, ror r5
   12018:	andeq	r2, r1, r8, ror r5
   1201c:	andeq	r2, r1, r8, ror r5
   12020:	andeq	r2, r1, r8, ror r5
   12024:	andeq	r2, r1, r8, ror r5
   12028:	andeq	r2, r1, r8, ror r5
   1202c:	andeq	r2, r1, r8, ror r5
   12030:	andeq	r2, r1, r8, ror r5
   12034:	andeq	r2, r1, r8, ror r5
   12038:	andeq	r2, r1, r8, ror r5
   1203c:	andeq	r2, r1, r8, ror r5
   12040:	andeq	r2, r1, r8, ror r5
   12044:	andeq	r2, r1, r8, ror r5
   12048:	andeq	r2, r1, r8, ror r5
   1204c:	andeq	r2, r1, r8, ror r5
   12050:	andeq	r2, r1, r8, ror r5
   12054:	andeq	r2, r1, r8, ror r5
   12058:	andeq	r2, r1, r8, ror r5
   1205c:	andeq	r2, r1, r8, ror r5
   12060:	andeq	r2, r1, r8, ror r5
   12064:	andeq	r2, r1, r8, ror r5
   12068:	andeq	r2, r1, r8, ror r5
   1206c:	andeq	r2, r1, r8, ror r5
   12070:	andeq	r2, r1, r8, ror r5
   12074:	andeq	r2, r1, r8, ror r5
   12078:	andeq	r2, r1, r8, ror r5
   1207c:	andeq	r2, r1, r8, ror r5
   12080:	andeq	r2, r1, r8, ror r5
   12084:	andeq	r2, r1, r8, ror r5
   12088:	andeq	r2, r1, r8, ror r5
   1208c:	andeq	r2, r1, r8, ror r5
   12090:	andeq	r2, r1, r8, ror r5
   12094:	andeq	r2, r1, r8, ror r5
   12098:	andeq	r2, r1, r8, ror r5
   1209c:	andeq	r2, r1, r8, ror r5
   120a0:	ldrdeq	r2, [r1], -r8
   120a4:	ldr	r3, [pc, #2856]	; 12bd4 <__assert_fail@plt+0x1638>
   120a8:	str	r3, [fp, #-36]	; 0xffffffdc
   120ac:	ldr	r3, [pc, #2852]	; 12bd8 <__assert_fail@plt+0x163c>
   120b0:	mov	r2, #0
   120b4:	strb	r2, [r3]
   120b8:	b	12580 <__assert_fail@plt+0xfe4>
   120bc:	ldr	r3, [pc, #2832]	; 12bd4 <__assert_fail@plt+0x1638>
   120c0:	str	r3, [fp, #-36]	; 0xffffffdc
   120c4:	ldr	r3, [pc, #2832]	; 12bdc <__assert_fail@plt+0x1640>
   120c8:	ldr	r3, [r3]
   120cc:	mov	r0, r3
   120d0:	bl	118b8 <__assert_fail@plt+0x31c>
   120d4:	mov	r3, r0
   120d8:	mov	r2, r3
   120dc:	ldr	r3, [pc, #2804]	; 12bd8 <__assert_fail@plt+0x163c>
   120e0:	strb	r2, [r3]
   120e4:	b	12580 <__assert_fail@plt+0xfe4>
   120e8:	ldr	r3, [pc, #2796]	; 12bdc <__assert_fail@plt+0x1640>
   120ec:	ldr	r3, [r3]
   120f0:	cmp	r3, #0
   120f4:	beq	12120 <__assert_fail@plt+0xb84>
   120f8:	ldr	r3, [pc, #2780]	; 12bdc <__assert_fail@plt+0x1640>
   120fc:	ldr	r3, [r3]
   12100:	ldrb	r3, [r3]
   12104:	cmp	r3, #0
   12108:	beq	12120 <__assert_fail@plt+0xb84>
   1210c:	ldr	r3, [pc, #2760]	; 12bdc <__assert_fail@plt+0x1640>
   12110:	ldr	r3, [r3]
   12114:	ldr	r2, [pc, #2756]	; 12be0 <__assert_fail@plt+0x1644>
   12118:	str	r3, [r2]
   1211c:	b	1212c <__assert_fail@plt+0xb90>
   12120:	ldr	r3, [pc, #2744]	; 12be0 <__assert_fail@plt+0x1644>
   12124:	mov	r2, #0
   12128:	str	r2, [r3]
   1212c:	b	12580 <__assert_fail@plt+0xfe4>
   12130:	mov	r0, #0
   12134:	bl	14888 <__assert_fail@plt+0x32ec>
   12138:	ldr	r3, [pc, #2716]	; 12bdc <__assert_fail@plt+0x1640>
   1213c:	ldr	r3, [r3]
   12140:	cmp	r3, #0
   12144:	beq	1215c <__assert_fail@plt+0xbc0>
   12148:	ldr	r3, [pc, #2700]	; 12bdc <__assert_fail@plt+0x1640>
   1214c:	ldr	r3, [r3]
   12150:	ldr	r2, [pc, #2648]	; 12bb0 <__assert_fail@plt+0x1614>
   12154:	str	r3, [r2, #24]
   12158:	b	12168 <__assert_fail@plt+0xbcc>
   1215c:	ldr	r3, [pc, #2636]	; 12bb0 <__assert_fail@plt+0x1614>
   12160:	ldr	r2, [pc, #2684]	; 12be4 <__assert_fail@plt+0x1648>
   12164:	str	r2, [r3, #24]
   12168:	ldr	r3, [pc, #2624]	; 12bb0 <__assert_fail@plt+0x1614>
   1216c:	ldr	r3, [r3, #40]	; 0x28
   12170:	cmp	r3, #0
   12174:	beq	12190 <__assert_fail@plt+0xbf4>
   12178:	ldr	r1, [pc, #2664]	; 12be8 <__assert_fail@plt+0x164c>
   1217c:	ldr	r0, [pc, #2664]	; 12bec <__assert_fail@plt+0x1650>
   12180:	bl	11b10 <__assert_fail@plt+0x574>
   12184:	ldr	r3, [pc, #2596]	; 12bb0 <__assert_fail@plt+0x1614>
   12188:	mov	r2, #0
   1218c:	str	r2, [r3, #40]	; 0x28
   12190:	ldr	r3, [pc, #2584]	; 12bb0 <__assert_fail@plt+0x1614>
   12194:	ldr	r3, [r3, #36]	; 0x24
   12198:	cmp	r3, #0
   1219c:	beq	12580 <__assert_fail@plt+0xfe4>
   121a0:	ldr	r1, [pc, #2632]	; 12bf0 <__assert_fail@plt+0x1654>
   121a4:	ldr	r0, [pc, #2624]	; 12bec <__assert_fail@plt+0x1650>
   121a8:	bl	11b10 <__assert_fail@plt+0x574>
   121ac:	ldr	r3, [pc, #2556]	; 12bb0 <__assert_fail@plt+0x1614>
   121b0:	mov	r2, #0
   121b4:	str	r2, [r3, #36]	; 0x24
   121b8:	b	12580 <__assert_fail@plt+0xfe4>
   121bc:	ldr	r3, [pc, #2584]	; 12bdc <__assert_fail@plt+0x1640>
   121c0:	ldr	r0, [r3]
   121c4:	mov	r3, #1
   121c8:	str	r3, [sp]
   121cc:	mvn	r3, #0
   121d0:	mov	r2, #1
   121d4:	mov	r1, #76	; 0x4c
   121d8:	bl	14700 <__assert_fail@plt+0x3164>
   121dc:	mov	r3, r0
   121e0:	mov	r2, r3
   121e4:	ldr	r3, [pc, #2500]	; 12bb0 <__assert_fail@plt+0x1614>
   121e8:	str	r2, [r3, #36]	; 0x24
   121ec:	ldr	r3, [pc, #2492]	; 12bb0 <__assert_fail@plt+0x1614>
   121f0:	ldr	r3, [r3, #40]	; 0x28
   121f4:	cmp	r3, #0
   121f8:	beq	12214 <__assert_fail@plt+0xc78>
   121fc:	ldr	r1, [pc, #2532]	; 12be8 <__assert_fail@plt+0x164c>
   12200:	ldr	r0, [pc, #2540]	; 12bf4 <__assert_fail@plt+0x1658>
   12204:	bl	11b10 <__assert_fail@plt+0x574>
   12208:	ldr	r3, [pc, #2464]	; 12bb0 <__assert_fail@plt+0x1614>
   1220c:	mov	r2, #0
   12210:	str	r2, [r3, #40]	; 0x28
   12214:	ldr	r3, [pc, #2452]	; 12bb0 <__assert_fail@plt+0x1614>
   12218:	ldr	r3, [r3, #24]
   1221c:	cmp	r3, #0
   12220:	beq	12580 <__assert_fail@plt+0xfe4>
   12224:	ldr	r1, [pc, #2508]	; 12bf8 <__assert_fail@plt+0x165c>
   12228:	ldr	r0, [pc, #2500]	; 12bf4 <__assert_fail@plt+0x1658>
   1222c:	bl	11b10 <__assert_fail@plt+0x574>
   12230:	ldr	r3, [pc, #2424]	; 12bb0 <__assert_fail@plt+0x1614>
   12234:	mov	r2, #0
   12238:	str	r2, [r3, #24]
   1223c:	b	12580 <__assert_fail@plt+0xfe4>
   12240:	ldr	r3, [pc, #2452]	; 12bdc <__assert_fail@plt+0x1640>
   12244:	ldr	r3, [r3]
   12248:	cmp	r3, #0
   1224c:	beq	12284 <__assert_fail@plt+0xce8>
   12250:	ldr	r3, [pc, #2436]	; 12bdc <__assert_fail@plt+0x1640>
   12254:	ldr	r0, [r3]
   12258:	mov	r3, #1
   1225c:	str	r3, [sp]
   12260:	mvn	r3, #0
   12264:	mov	r2, #1
   12268:	mov	r1, #108	; 0x6c
   1226c:	bl	14700 <__assert_fail@plt+0x3164>
   12270:	mov	r3, r0
   12274:	mov	r2, r3
   12278:	ldr	r3, [pc, #2352]	; 12bb0 <__assert_fail@plt+0x1614>
   1227c:	str	r2, [r3, #36]	; 0x24
   12280:	b	12290 <__assert_fail@plt+0xcf4>
   12284:	ldr	r3, [pc, #2340]	; 12bb0 <__assert_fail@plt+0x1614>
   12288:	mov	r2, #1
   1228c:	str	r2, [r3, #36]	; 0x24
   12290:	ldr	r3, [pc, #2328]	; 12bb0 <__assert_fail@plt+0x1614>
   12294:	ldr	r3, [r3, #40]	; 0x28
   12298:	cmp	r3, #0
   1229c:	beq	122b8 <__assert_fail@plt+0xd1c>
   122a0:	ldr	r1, [pc, #2368]	; 12be8 <__assert_fail@plt+0x164c>
   122a4:	ldr	r0, [pc, #2384]	; 12bfc <__assert_fail@plt+0x1660>
   122a8:	bl	11b10 <__assert_fail@plt+0x574>
   122ac:	ldr	r3, [pc, #2300]	; 12bb0 <__assert_fail@plt+0x1614>
   122b0:	mov	r2, #0
   122b4:	str	r2, [r3, #40]	; 0x28
   122b8:	ldr	r3, [pc, #2288]	; 12bb0 <__assert_fail@plt+0x1614>
   122bc:	ldr	r3, [r3, #24]
   122c0:	cmp	r3, #0
   122c4:	beq	12580 <__assert_fail@plt+0xfe4>
   122c8:	ldr	r1, [pc, #2344]	; 12bf8 <__assert_fail@plt+0x165c>
   122cc:	ldr	r0, [pc, #2344]	; 12bfc <__assert_fail@plt+0x1660>
   122d0:	bl	11b10 <__assert_fail@plt+0x574>
   122d4:	ldr	r3, [pc, #2260]	; 12bb0 <__assert_fail@plt+0x1614>
   122d8:	mov	r2, #0
   122dc:	str	r2, [r3, #24]
   122e0:	b	12580 <__assert_fail@plt+0xfe4>
   122e4:	ldr	r3, [pc, #2288]	; 12bdc <__assert_fail@plt+0x1640>
   122e8:	ldr	r0, [r3]
   122ec:	mov	r3, #1
   122f0:	str	r3, [sp]
   122f4:	mvn	r3, #0
   122f8:	mov	r2, #1
   122fc:	mov	r1, #110	; 0x6e
   12300:	bl	14700 <__assert_fail@plt+0x3164>
   12304:	mov	r3, r0
   12308:	mov	r2, r3
   1230c:	ldr	r3, [pc, #2204]	; 12bb0 <__assert_fail@plt+0x1614>
   12310:	str	r2, [r3, #40]	; 0x28
   12314:	ldr	r3, [pc, #2196]	; 12bb0 <__assert_fail@plt+0x1614>
   12318:	ldr	r3, [r3, #36]	; 0x24
   1231c:	cmp	r3, #0
   12320:	beq	1233c <__assert_fail@plt+0xda0>
   12324:	ldr	r1, [pc, #2244]	; 12bf0 <__assert_fail@plt+0x1654>
   12328:	ldr	r0, [pc, #2256]	; 12c00 <__assert_fail@plt+0x1664>
   1232c:	bl	11b10 <__assert_fail@plt+0x574>
   12330:	ldr	r3, [pc, #2168]	; 12bb0 <__assert_fail@plt+0x1614>
   12334:	mov	r2, #0
   12338:	str	r2, [r3, #36]	; 0x24
   1233c:	ldr	r3, [pc, #2156]	; 12bb0 <__assert_fail@plt+0x1614>
   12340:	ldr	r3, [r3, #24]
   12344:	cmp	r3, #0
   12348:	beq	12580 <__assert_fail@plt+0xfe4>
   1234c:	ldr	r3, [pc, #2140]	; 12bb0 <__assert_fail@plt+0x1614>
   12350:	ldr	r3, [r3, #40]	; 0x28
   12354:	cmp	r3, #1
   12358:	bne	1236c <__assert_fail@plt+0xdd0>
   1235c:	ldr	r3, [pc, #2124]	; 12bb0 <__assert_fail@plt+0x1614>
   12360:	mov	r2, #0
   12364:	str	r2, [r3, #40]	; 0x28
   12368:	b	12580 <__assert_fail@plt+0xfe4>
   1236c:	ldr	r1, [pc, #2180]	; 12bf8 <__assert_fail@plt+0x165c>
   12370:	ldr	r0, [pc, #2184]	; 12c00 <__assert_fail@plt+0x1664>
   12374:	bl	11b10 <__assert_fail@plt+0x574>
   12378:	ldr	r3, [pc, #2096]	; 12bb0 <__assert_fail@plt+0x1614>
   1237c:	mov	r2, #0
   12380:	str	r2, [r3, #24]
   12384:	b	12580 <__assert_fail@plt+0xfe4>
   12388:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1238c:	blx	r3
   12390:	ldr	r3, [pc, #2116]	; 12bdc <__assert_fail@plt+0x1640>
   12394:	ldr	r0, [r3]
   12398:	ldr	r3, [pc, #2064]	; 12bb0 <__assert_fail@plt+0x1614>
   1239c:	ldr	r3, [r3, #4]
   123a0:	mov	r2, r3
   123a4:	mov	r3, #0
   123a8:	str	r3, [sp]
   123ac:	mov	r3, r2
   123b0:	mov	r2, #1
   123b4:	mov	r1, #115	; 0x73
   123b8:	bl	14700 <__assert_fail@plt+0x3164>
   123bc:	mov	r3, r0
   123c0:	str	r3, [fp, #-44]	; 0xffffffd4
   123c4:	ldr	r3, [pc, #2020]	; 12bb0 <__assert_fail@plt+0x1614>
   123c8:	ldr	r2, [r3, #4]
   123cc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   123d0:	cmp	r2, r3
   123d4:	bcs	12414 <__assert_fail@plt+0xe78>
   123d8:	ldr	r0, [pc, #2084]	; 12c04 <__assert_fail@plt+0x1668>
   123dc:	bl	113d4 <gettext@plt>
   123e0:	mov	r1, r0
   123e4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   123e8:	ldr	r3, [pc, #1984]	; 12bb0 <__assert_fail@plt+0x1614>
   123ec:	ldr	r3, [r3, #4]
   123f0:	str	r3, [sp]
   123f4:	mov	r3, r2
   123f8:	mov	r2, r1
   123fc:	mov	r1, #0
   12400:	mov	r0, #0
   12404:	bl	11344 <error@plt>
   12408:	ldr	r3, [pc, #1952]	; 12bb0 <__assert_fail@plt+0x1614>
   1240c:	ldr	r3, [r3, #4]
   12410:	str	r3, [fp, #-44]	; 0xffffffd4
   12414:	ldr	r2, [pc, #1940]	; 12bb0 <__assert_fail@plt+0x1614>
   12418:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1241c:	str	r3, [r2, #12]
   12420:	b	12580 <__assert_fail@plt+0xfe4>
   12424:	mov	r3, #1
   12428:	str	r3, [fp, #-24]	; 0xffffffe8
   1242c:	b	12580 <__assert_fail@plt+0xfe4>
   12430:	ldr	r3, [pc, #2000]	; 12c08 <__assert_fail@plt+0x166c>
   12434:	mov	r2, #1
   12438:	strb	r2, [r3]
   1243c:	b	12580 <__assert_fail@plt+0xfe4>
   12440:	ldr	r3, [pc, #1896]	; 12bb0 <__assert_fail@plt+0x1614>
   12444:	mov	r2, #1
   12448:	str	r2, [r3]
   1244c:	b	12580 <__assert_fail@plt+0xfe4>
   12450:	ldr	r3, [pc, #1972]	; 12c0c <__assert_fail@plt+0x1670>
   12454:	mov	r2, #1
   12458:	strb	r2, [r3]
   1245c:	b	12580 <__assert_fail@plt+0xfe4>
   12460:	ldr	r3, [pc, #1960]	; 12c10 <__assert_fail@plt+0x1674>
   12464:	mov	r2, #1
   12468:	strb	r2, [r3]
   1246c:	ldr	r3, [pc, #1940]	; 12c08 <__assert_fail@plt+0x166c>
   12470:	mov	r2, #1
   12474:	strb	r2, [r3]
   12478:	b	12580 <__assert_fail@plt+0xfe4>
   1247c:	mov	r3, #0
   12480:	str	r3, [fp, #-28]	; 0xffffffe4
   12484:	b	12580 <__assert_fail@plt+0xfe4>
   12488:	ldr	r3, [pc, #1868]	; 12bdc <__assert_fail@plt+0x1640>
   1248c:	ldr	r0, [r3]
   12490:	mov	r3, #1
   12494:	str	r3, [sp]
   12498:	mvn	r3, #-2147483648	; 0x80000000
   1249c:	mov	r2, #0
   124a0:	mov	r1, #80	; 0x50
   124a4:	bl	14700 <__assert_fail@plt+0x3164>
   124a8:	mov	r2, r0
   124ac:	ldr	r3, [pc, #1888]	; 12c14 <__assert_fail@plt+0x1678>
   124b0:	str	r2, [r3]
   124b4:	b	12580 <__assert_fail@plt+0xfe4>
   124b8:	ldr	r3, [pc, #1820]	; 12bdc <__assert_fail@plt+0x1640>
   124bc:	ldr	r3, [r3]
   124c0:	str	r3, [fp, #-32]	; 0xffffffe0
   124c4:	b	12580 <__assert_fail@plt+0xfe4>
   124c8:	ldr	r0, [pc, #1724]	; 12b8c <__assert_fail@plt+0x15f0>
   124cc:	bl	166e4 <__assert_fail@plt+0x5148>
   124d0:	mov	r3, #0
   124d4:	b	12e84 <__assert_fail@plt+0x18e8>
   124d8:	ldr	r3, [pc, #1788]	; 12bdc <__assert_fail@plt+0x1640>
   124dc:	ldr	r3, [r3]
   124e0:	mov	r1, #61	; 0x3d
   124e4:	mov	r0, r3
   124e8:	bl	113f8 <strchr@plt>
   124ec:	mov	r3, r0
   124f0:	cmp	r3, #0
   124f4:	beq	12520 <__assert_fail@plt+0xf84>
   124f8:	ldr	r0, [pc, #1816]	; 12c18 <__assert_fail@plt+0x167c>
   124fc:	bl	113d4 <gettext@plt>
   12500:	mov	r1, r0
   12504:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12508:	ldr	r2, [pc, #1804]	; 12c1c <__assert_fail@plt+0x1680>
   1250c:	ldr	r3, [r2, r3, lsl #4]
   12510:	mov	r2, r1
   12514:	mov	r1, #0
   12518:	mov	r0, #1
   1251c:	bl	11344 <error@plt>
   12520:	ldr	r3, [pc, #1716]	; 12bdc <__assert_fail@plt+0x1640>
   12524:	ldr	r3, [r3]
   12528:	ldr	r2, [pc, #1776]	; 12c20 <__assert_fail@plt+0x1684>
   1252c:	str	r3, [r2]
   12530:	ldr	r3, [pc, #1768]	; 12c20 <__assert_fail@plt+0x1684>
   12534:	ldr	r3, [r3]
   12538:	mov	r0, r3
   1253c:	bl	11548 <unsetenv@plt>
   12540:	mov	r3, r0
   12544:	cmp	r3, #0
   12548:	beq	12580 <__assert_fail@plt+0xfe4>
   1254c:	bl	1141c <__errno_location@plt>
   12550:	mov	r3, r0
   12554:	ldr	r4, [r3]
   12558:	ldr	r0, [pc, #1732]	; 12c24 <__assert_fail@plt+0x1688>
   1255c:	bl	113d4 <gettext@plt>
   12560:	mov	r2, r0
   12564:	ldr	r3, [pc, #1716]	; 12c20 <__assert_fail@plt+0x1684>
   12568:	ldr	r3, [r3]
   1256c:	mov	r1, r4
   12570:	mov	r0, #1
   12574:	bl	11344 <error@plt>
   12578:	mov	r0, #1
   1257c:	bl	14888 <__assert_fail@plt+0x32ec>
   12580:	sub	r3, fp, #76	; 0x4c
   12584:	str	r3, [sp]
   12588:	ldr	r3, [pc, #1676]	; 12c1c <__assert_fail@plt+0x1680>
   1258c:	ldr	r2, [pc, #1684]	; 12c28 <__assert_fail@plt+0x168c>
   12590:	ldr	r1, [fp, #-236]	; 0xffffff14
   12594:	ldr	r0, [fp, #-232]	; 0xffffff18
   12598:	bl	113a4 <getopt_long@plt>
   1259c:	str	r0, [fp, #-60]	; 0xffffffc4
   125a0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   125a4:	cmn	r3, #1
   125a8:	bne	11d4c <__assert_fail@plt+0x7b0>
   125ac:	ldr	r3, [pc, #1580]	; 12be0 <__assert_fail@plt+0x1644>
   125b0:	ldr	r3, [r3]
   125b4:	cmp	r3, #0
   125b8:	beq	125e8 <__assert_fail@plt+0x104c>
   125bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   125c0:	ldr	r2, [pc, #1548]	; 12bd4 <__assert_fail@plt+0x1638>
   125c4:	cmp	r3, r2
   125c8:	bne	125e8 <__assert_fail@plt+0x104c>
   125cc:	ldr	r0, [pc, #1624]	; 12c2c <__assert_fail@plt+0x1690>
   125d0:	bl	113d4 <gettext@plt>
   125d4:	mov	r3, r0
   125d8:	mov	r2, r3
   125dc:	mov	r1, #0
   125e0:	mov	r0, #0
   125e4:	bl	11344 <error@plt>
   125e8:	ldr	r3, [fp, #-40]	; 0xffffffd8
   125ec:	blx	r3
   125f0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   125f4:	cmp	r3, #0
   125f8:	beq	12610 <__assert_fail@plt+0x1074>
   125fc:	ldr	r3, [pc, #1460]	; 12bb8 <__assert_fail@plt+0x161c>
   12600:	ldr	r2, [pc, #1576]	; 12c30 <__assert_fail@plt+0x1694>
   12604:	ldr	r1, [pc, #1460]	; 12bc0 <__assert_fail@plt+0x1624>
   12608:	ldr	r0, [pc, #1572]	; 12c34 <__assert_fail@plt+0x1698>
   1260c:	bl	1159c <__assert_fail@plt>
   12610:	ldr	r3, [pc, #1568]	; 12c38 <__assert_fail@plt+0x169c>
   12614:	str	r3, [fp, #-228]	; 0xffffff1c
   12618:	sub	r3, fp, #228	; 0xe4
   1261c:	add	r3, r3, #4
   12620:	mov	r0, r3
   12624:	bl	114c4 <sigemptyset@plt>
   12628:	mov	r3, #0
   1262c:	str	r3, [fp, #-96]	; 0xffffffa0
   12630:	sub	r3, fp, #228	; 0xe4
   12634:	mov	r2, #0
   12638:	mov	r1, r3
   1263c:	mov	r0, #10
   12640:	bl	112e4 <sigaction@plt>
   12644:	mov	r3, r0
   12648:	cmp	r3, #0
   1264c:	beq	12678 <__assert_fail@plt+0x10dc>
   12650:	bl	1141c <__errno_location@plt>
   12654:	mov	r3, r0
   12658:	ldr	r4, [r3]
   1265c:	ldr	r0, [pc, #1496]	; 12c3c <__assert_fail@plt+0x16a0>
   12660:	bl	113d4 <gettext@plt>
   12664:	mov	r3, r0
   12668:	mov	r2, r3
   1266c:	mov	r1, r4
   12670:	mov	r0, #0
   12674:	bl	11344 <error@plt>
   12678:	ldr	r3, [pc, #1472]	; 12c40 <__assert_fail@plt+0x16a4>
   1267c:	str	r3, [fp, #-228]	; 0xffffff1c
   12680:	sub	r3, fp, #228	; 0xe4
   12684:	add	r3, r3, #4
   12688:	mov	r0, r3
   1268c:	bl	114c4 <sigemptyset@plt>
   12690:	mov	r3, #0
   12694:	str	r3, [fp, #-96]	; 0xffffffa0
   12698:	sub	r3, fp, #228	; 0xe4
   1269c:	mov	r2, #0
   126a0:	mov	r1, r3
   126a4:	mov	r0, #12
   126a8:	bl	112e4 <sigaction@plt>
   126ac:	mov	r3, r0
   126b0:	cmp	r3, #0
   126b4:	beq	126e0 <__assert_fail@plt+0x1144>
   126b8:	bl	1141c <__errno_location@plt>
   126bc:	mov	r3, r0
   126c0:	ldr	r4, [r3]
   126c4:	ldr	r0, [pc, #1400]	; 12c44 <__assert_fail@plt+0x16a8>
   126c8:	bl	113d4 <gettext@plt>
   126cc:	mov	r3, r0
   126d0:	mov	r2, r3
   126d4:	mov	r1, r4
   126d8:	mov	r0, #0
   126dc:	bl	11344 <error@plt>
   126e0:	ldr	r1, [pc, #1172]	; 12b7c <__assert_fail@plt+0x15e0>
   126e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   126e8:	bl	111dc <strcmp@plt>
   126ec:	mov	r3, r0
   126f0:	cmp	r3, #0
   126f4:	bne	1270c <__assert_fail@plt+0x1170>
   126f8:	ldr	r3, [pc, #1352]	; 12c48 <__assert_fail@plt+0x16ac>
   126fc:	ldr	r3, [r3]
   12700:	ldr	r2, [pc, #1348]	; 12c4c <__assert_fail@plt+0x16b0>
   12704:	str	r3, [r2]
   12708:	b	12778 <__assert_fail@plt+0x11dc>
   1270c:	ldr	r3, [pc, #1340]	; 12c50 <__assert_fail@plt+0x16b4>
   12710:	mov	r2, #1
   12714:	str	r2, [r3]
   12718:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1271c:	bl	11a7c <__assert_fail@plt+0x4e0>
   12720:	mov	r2, r0
   12724:	ldr	r3, [pc, #1312]	; 12c4c <__assert_fail@plt+0x16b0>
   12728:	str	r2, [r3]
   1272c:	ldr	r3, [pc, #1304]	; 12c4c <__assert_fail@plt+0x16b0>
   12730:	ldr	r3, [r3]
   12734:	cmp	r3, #0
   12738:	bne	12778 <__assert_fail@plt+0x11dc>
   1273c:	bl	1141c <__errno_location@plt>
   12740:	mov	r3, r0
   12744:	ldr	r4, [r3]
   12748:	ldr	r0, [pc, #1284]	; 12c54 <__assert_fail@plt+0x16b8>
   1274c:	bl	113d4 <gettext@plt>
   12750:	mov	r5, r0
   12754:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12758:	mov	r1, #8
   1275c:	mov	r0, #0
   12760:	bl	1a898 <__assert_fail@plt+0x92fc>
   12764:	mov	r3, r0
   12768:	mov	r2, r5
   1276c:	mov	r1, r4
   12770:	mov	r0, #1
   12774:	bl	11344 <error@plt>
   12778:	ldr	r3, [pc, #1072]	; 12bb0 <__assert_fail@plt+0x1614>
   1277c:	ldr	r3, [r3, #24]
   12780:	cmp	r3, #0
   12784:	bne	12798 <__assert_fail@plt+0x11fc>
   12788:	ldr	r3, [pc, #1056]	; 12bb0 <__assert_fail@plt+0x1614>
   1278c:	ldr	r3, [r3, #36]	; 0x24
   12790:	cmp	r3, #0
   12794:	beq	127a4 <__assert_fail@plt+0x1208>
   12798:	ldr	r3, [pc, #1040]	; 12bb0 <__assert_fail@plt+0x1614>
   1279c:	mov	r2, #1
   127a0:	str	r2, [r3]
   127a4:	ldr	r3, [pc, #1240]	; 12c84 <__assert_fail@plt+0x16e8>
   127a8:	ldr	r2, [r3]
   127ac:	ldr	r3, [fp, #-232]	; 0xffffff18
   127b0:	cmp	r2, r3
   127b4:	bne	127dc <__assert_fail@plt+0x1240>
   127b8:	ldr	r3, [pc, #1220]	; 12c84 <__assert_fail@plt+0x16e8>
   127bc:	mov	r2, #0
   127c0:	str	r2, [r3]
   127c4:	mov	r3, #1
   127c8:	str	r3, [fp, #-232]	; 0xffffff18
   127cc:	sub	r3, fp, #84	; 0x54
   127d0:	str	r3, [fp, #-88]	; 0xffffffa8
   127d4:	sub	r3, fp, #88	; 0x58
   127d8:	str	r3, [fp, #-236]	; 0xffffff14
   127dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   127e0:	cmp	r3, #0
   127e4:	beq	12974 <__assert_fail@plt+0x13d8>
   127e8:	ldr	r3, [pc, #1128]	; 12c58 <__assert_fail@plt+0x16bc>
   127ec:	ldr	r4, [r3]
   127f0:	ldr	r0, [pc, #1124]	; 12c5c <__assert_fail@plt+0x16c0>
   127f4:	bl	113d4 <gettext@plt>
   127f8:	mov	r5, r0
   127fc:	bl	158a4 <__assert_fail@plt+0x4308>
   12800:	mov	r3, r0
   12804:	mov	r2, r3
   12808:	mov	r3, #0
   1280c:	mov	r1, r5
   12810:	mov	r0, r4
   12814:	bl	11410 <fprintf@plt>
   12818:	ldr	r3, [pc, #1080]	; 12c58 <__assert_fail@plt+0x16bc>
   1281c:	ldr	r4, [r3]
   12820:	ldr	r0, [pc, #1080]	; 12c60 <__assert_fail@plt+0x16c4>
   12824:	bl	113d4 <gettext@plt>
   12828:	mov	r1, r0
   1282c:	ldr	r3, [pc, #892]	; 12bb0 <__assert_fail@plt+0x1614>
   12830:	ldr	r3, [r3, #4]
   12834:	mov	r2, r3
   12838:	mov	r3, #0
   1283c:	mov	r0, r4
   12840:	bl	11410 <fprintf@plt>
   12844:	ldr	r3, [pc, #1036]	; 12c58 <__assert_fail@plt+0x16bc>
   12848:	ldr	r4, [r3]
   1284c:	ldr	r0, [pc, #1040]	; 12c64 <__assert_fail@plt+0x16c8>
   12850:	bl	113d4 <gettext@plt>
   12854:	mov	r1, r0
   12858:	ldr	r3, [pc, #848]	; 12bb0 <__assert_fail@plt+0x1614>
   1285c:	ldr	r3, [r3, #8]
   12860:	mov	r2, r3
   12864:	mov	r3, #0
   12868:	mov	r0, r4
   1286c:	bl	11410 <fprintf@plt>
   12870:	ldr	r3, [pc, #992]	; 12c58 <__assert_fail@plt+0x16bc>
   12874:	ldr	r5, [r3]
   12878:	ldr	r0, [pc, #1000]	; 12c68 <__assert_fail@plt+0x16cc>
   1287c:	bl	113d4 <gettext@plt>
   12880:	mov	r6, r0
   12884:	ldr	r3, [pc, #804]	; 12bb0 <__assert_fail@plt+0x1614>
   12888:	ldr	r4, [r3, #4]
   1288c:	bl	158a4 <__assert_fail@plt+0x4308>
   12890:	mov	r3, r0
   12894:	sub	r3, r4, r3
   12898:	mov	r2, r3
   1289c:	mov	r3, #0
   128a0:	mov	r1, r6
   128a4:	mov	r0, r5
   128a8:	bl	11410 <fprintf@plt>
   128ac:	ldr	r3, [pc, #932]	; 12c58 <__assert_fail@plt+0x16bc>
   128b0:	ldr	r4, [r3]
   128b4:	ldr	r0, [pc, #944]	; 12c6c <__assert_fail@plt+0x16d0>
   128b8:	bl	113d4 <gettext@plt>
   128bc:	mov	r1, r0
   128c0:	ldr	r3, [pc, #744]	; 12bb0 <__assert_fail@plt+0x1614>
   128c4:	ldr	r3, [r3, #12]
   128c8:	mov	r2, r3
   128cc:	mov	r3, #0
   128d0:	mov	r0, r4
   128d4:	bl	11410 <fprintf@plt>
   128d8:	ldr	r3, [pc, #888]	; 12c58 <__assert_fail@plt+0x16bc>
   128dc:	ldr	r4, [r3]
   128e0:	ldr	r0, [pc, #904]	; 12c70 <__assert_fail@plt+0x16d4>
   128e4:	bl	113d4 <gettext@plt>
   128e8:	mov	r1, r0
   128ec:	mvn	r2, #-2147483648	; 0x80000000
   128f0:	mov	r3, #0
   128f4:	mov	r0, r4
   128f8:	bl	11410 <fprintf@plt>
   128fc:	mov	r0, #0
   12900:	bl	1153c <isatty@plt>
   12904:	mov	r3, r0
   12908:	cmp	r3, #0
   1290c:	beq	12974 <__assert_fail@plt+0x13d8>
   12910:	ldr	r3, [pc, #832]	; 12c58 <__assert_fail@plt+0x16bc>
   12914:	ldr	r4, [r3]
   12918:	ldr	r0, [pc, #852]	; 12c74 <__assert_fail@plt+0x16d8>
   1291c:	bl	113d4 <gettext@plt>
   12920:	mov	r3, r0
   12924:	mov	r1, r3
   12928:	mov	r0, r4
   1292c:	bl	11410 <fprintf@plt>
   12930:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12934:	cmp	r3, #0
   12938:	beq	12974 <__assert_fail@plt+0x13d8>
   1293c:	ldr	r3, [pc, #788]	; 12c58 <__assert_fail@plt+0x16bc>
   12940:	ldr	r4, [r3]
   12944:	ldr	r0, [pc, #812]	; 12c78 <__assert_fail@plt+0x16dc>
   12948:	bl	113d4 <gettext@plt>
   1294c:	mov	r1, r0
   12950:	ldr	r3, [pc, #812]	; 12c84 <__assert_fail@plt+0x16e8>
   12954:	ldr	r3, [r3]
   12958:	lsl	r3, r3, #2
   1295c:	ldr	r2, [fp, #-236]	; 0xffffff14
   12960:	add	r3, r2, r3
   12964:	ldr	r3, [r3]
   12968:	mov	r2, r3
   1296c:	mov	r0, r4
   12970:	bl	11410 <fprintf@plt>
   12974:	ldr	r3, [pc, #564]	; 12bb0 <__assert_fail@plt+0x1614>
   12978:	ldr	r3, [r3, #12]
   1297c:	add	r3, r3, #1
   12980:	mov	r0, r3
   12984:	bl	1b7ac <__assert_fail@plt+0xa210>
   12988:	mov	r3, r0
   1298c:	mov	r2, r3
   12990:	ldr	r3, [pc, #752]	; 12c88 <__assert_fail@plt+0x16ec>
   12994:	str	r2, [r3]
   12998:	ldr	r3, [pc, #528]	; 12bb0 <__assert_fail@plt+0x1614>
   1299c:	ldr	r3, [r3, #12]
   129a0:	add	r3, r3, #1
   129a4:	mov	r0, r3
   129a8:	bl	1b7ac <__assert_fail@plt+0xa210>
   129ac:	mov	r3, r0
   129b0:	mov	r2, r3
   129b4:	ldr	r3, [pc, #724]	; 12c90 <__assert_fail@plt+0x16f4>
   129b8:	str	r2, [r3, #12]
   129bc:	mov	r1, #0
   129c0:	mov	r0, #17
   129c4:	bl	1126c <signal@plt>
   129c8:	ldr	r3, [pc, #480]	; 12bb0 <__assert_fail@plt+0x1614>
   129cc:	ldr	r3, [r3, #24]
   129d0:	cmp	r3, #0
   129d4:	bne	12b54 <__assert_fail@plt+0x15b8>
   129d8:	b	12a60 <__assert_fail@plt+0x14c4>
   129dc:	ldr	r3, [pc, #672]	; 12c84 <__assert_fail@plt+0x16e8>
   129e0:	ldr	r3, [r3]
   129e4:	lsl	r3, r3, #2
   129e8:	ldr	r2, [fp, #-236]	; 0xffffff14
   129ec:	add	r3, r2, r3
   129f0:	ldr	r4, [r3]
   129f4:	ldr	r3, [pc, #648]	; 12c84 <__assert_fail@plt+0x16e8>
   129f8:	ldr	r3, [r3]
   129fc:	lsl	r3, r3, #2
   12a00:	ldr	r2, [fp, #-236]	; 0xffffff14
   12a04:	add	r3, r2, r3
   12a08:	ldr	r3, [r3]
   12a0c:	mov	r0, r3
   12a10:	bl	113ec <strlen@plt>
   12a14:	mov	r3, r0
   12a18:	add	r2, r3, #1
   12a1c:	ldr	r3, [pc, #616]	; 12c8c <__assert_fail@plt+0x16f0>
   12a20:	ldrb	r3, [r3]
   12a24:	str	r3, [sp, #8]
   12a28:	mov	r3, #0
   12a2c:	str	r3, [sp, #4]
   12a30:	mov	r3, #0
   12a34:	str	r3, [sp]
   12a38:	mov	r3, r2
   12a3c:	mov	r2, r4
   12a40:	ldr	r1, [pc, #584]	; 12c90 <__assert_fail@plt+0x16f4>
   12a44:	ldr	r0, [pc, #356]	; 12bb0 <__assert_fail@plt+0x1614>
   12a48:	bl	154c4 <__assert_fail@plt+0x3f28>
   12a4c:	ldr	r3, [pc, #560]	; 12c84 <__assert_fail@plt+0x16e8>
   12a50:	ldr	r3, [r3]
   12a54:	add	r3, r3, #1
   12a58:	ldr	r2, [pc, #548]	; 12c84 <__assert_fail@plt+0x16e8>
   12a5c:	str	r3, [r2]
   12a60:	ldr	r3, [pc, #540]	; 12c84 <__assert_fail@plt+0x16e8>
   12a64:	ldr	r2, [r3]
   12a68:	ldr	r3, [fp, #-232]	; 0xffffff18
   12a6c:	cmp	r2, r3
   12a70:	blt	129dc <__assert_fail@plt+0x1440>
   12a74:	ldr	r3, [pc, #528]	; 12c8c <__assert_fail@plt+0x16f0>
   12a78:	mov	r2, #0
   12a7c:	strb	r2, [r3]
   12a80:	ldr	r3, [pc, #520]	; 12c90 <__assert_fail@plt+0x16f4>
   12a84:	ldr	r3, [r3]
   12a88:	ldr	r2, [pc, #288]	; 12bb0 <__assert_fail@plt+0x1614>
   12a8c:	str	r3, [r2, #28]
   12a90:	ldr	r3, [pc, #504]	; 12c90 <__assert_fail@plt+0x16f4>
   12a94:	ldr	r3, [r3, #16]
   12a98:	ldr	r2, [pc, #496]	; 12c90 <__assert_fail@plt+0x16f4>
   12a9c:	str	r3, [r2, #20]
   12aa0:	ldr	r3, [pc, #488]	; 12c90 <__assert_fail@plt+0x16f4>
   12aa4:	ldr	r3, [r3]
   12aa8:	ldr	r2, [pc, #256]	; 12bb0 <__assert_fail@plt+0x1614>
   12aac:	str	r3, [r2, #28]
   12ab0:	b	12af4 <__assert_fail@plt+0x1558>
   12ab4:	ldr	r3, [pc, #244]	; 12bb0 <__assert_fail@plt+0x1614>
   12ab8:	ldr	r3, [r3, #36]	; 0x24
   12abc:	cmp	r3, #0
   12ac0:	beq	12af4 <__assert_fail@plt+0x1558>
   12ac4:	ldr	r3, [pc, #228]	; 12bb0 <__assert_fail@plt+0x1614>
   12ac8:	ldr	r2, [r3, #36]	; 0x24
   12acc:	ldr	r3, [pc, #424]	; 12c7c <__assert_fail@plt+0x16e0>
   12ad0:	ldr	r3, [r3]
   12ad4:	cmp	r2, r3
   12ad8:	bhi	12af4 <__assert_fail@plt+0x1558>
   12adc:	ldr	r1, [pc, #428]	; 12c90 <__assert_fail@plt+0x16f4>
   12ae0:	ldr	r0, [pc, #200]	; 12bb0 <__assert_fail@plt+0x1614>
   12ae4:	bl	15250 <__assert_fail@plt+0x3cb4>
   12ae8:	ldr	r3, [pc, #396]	; 12c7c <__assert_fail@plt+0x16e0>
   12aec:	mov	r2, #0
   12af0:	str	r2, [r3]
   12af4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12af8:	blx	r3
   12afc:	mov	r3, r0
   12b00:	cmn	r3, #1
   12b04:	bne	12ab4 <__assert_fail@plt+0x1518>
   12b08:	ldr	r3, [pc, #384]	; 12c90 <__assert_fail@plt+0x16f4>
   12b0c:	ldr	r2, [r3]
   12b10:	ldr	r3, [pc, #152]	; 12bb0 <__assert_fail@plt+0x1614>
   12b14:	ldr	r3, [r3, #28]
   12b18:	cmp	r2, r3
   12b1c:	bne	12b44 <__assert_fail@plt+0x15a8>
   12b20:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12b24:	cmp	r3, #0
   12b28:	beq	12e6c <__assert_fail@plt+0x18d0>
   12b2c:	ldr	r3, [pc, #332]	; 12c80 <__assert_fail@plt+0x16e4>
   12b30:	ldrb	r3, [r3]
   12b34:	eor	r3, r3, #1
   12b38:	uxtb	r3, r3
   12b3c:	cmp	r3, #0
   12b40:	beq	12e6c <__assert_fail@plt+0x18d0>
   12b44:	ldr	r1, [pc, #324]	; 12c90 <__assert_fail@plt+0x16f4>
   12b48:	ldr	r0, [pc, #96]	; 12bb0 <__assert_fail@plt+0x1614>
   12b4c:	bl	15250 <__assert_fail@plt+0x3cb4>
   12b50:	b	12e6c <__assert_fail@plt+0x18d0>
   12b54:	ldr	r3, [fp, #-232]	; 0xffffff18
   12b58:	lsl	r3, r3, #2
   12b5c:	mov	r0, r3
   12b60:	bl	1b7ac <__assert_fail@plt+0xa210>
   12b64:	mov	r3, r0
   12b68:	str	r3, [fp, #-64]	; 0xffffffc0
   12b6c:	ldr	r3, [pc, #272]	; 12c84 <__assert_fail@plt+0x16e8>
   12b70:	ldr	r3, [r3]
   12b74:	str	r3, [fp, #-48]	; 0xffffffd0
   12b78:	b	12ce0 <__assert_fail@plt+0x1744>
   12b7c:			; <UNDEFINED> instruction: 0x0001ebbc
   12b80:	strheq	pc, [r1], -r0	; <UNPREDICTABLE>
   12b84:	muleq	r1, r0, lr
   12b88:	strdeq	r1, [r1], -ip
   12b8c:	andeq	lr, r1, r0, asr #23
   12b90:	andeq	r1, r3, r0, ror r2
   12b94:	andeq	r1, r3, ip, ror r2
   12b98:	andeq	lr, r1, r8, asr #23
   12b9c:	andeq	lr, r1, ip, asr #23
   12ba0:	andeq	lr, r1, r4, ror #23
   12ba4:	andeq	r6, r1, r8, lsl #25
   12ba8:	andeq	r4, r1, r8, lsr #11
   12bac:	strdeq	lr, [r1], -r0
   12bb0:	andeq	r1, r3, ip, lsr #4
   12bb4:	andeq	r1, r1, r4, lsl sl
   12bb8:	muleq	r2, r8, r0
   12bbc:	andeq	r0, r0, r3, ror #3
   12bc0:	andeq	lr, r1, ip, lsr r9
   12bc4:	andeq	lr, r1, r4, lsl ip
   12bc8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12bcc:	andeq	lr, r1, r0, lsr ip
   12bd0:	andeq	r3, r1, r4, lsr #25
   12bd4:	muleq	r1, r8, r5
   12bd8:	andeq	r1, r3, r3, lsl #5
   12bdc:	andeq	r1, r3, r8, ror #3
   12be0:	andeq	r1, r3, ip, asr r2
   12be4:	andeq	lr, r1, ip, asr #24
   12be8:	andeq	lr, r1, r0, asr ip
   12bec:	andeq	lr, r1, ip, asr ip
   12bf0:	andeq	lr, r1, ip, ror #24
   12bf4:	andeq	lr, r1, r8, ror ip
   12bf8:	andeq	lr, r1, ip, ror ip
   12bfc:	andeq	lr, r1, r8, lsl #25
   12c00:	muleq	r1, r8, ip
   12c04:	andeq	lr, r1, r8, lsr #25
   12c08:	andeq	r1, r3, r1, lsl #5
   12c0c:	andeq	r1, r3, r0, lsl #5
   12c10:	andeq	r1, r3, r2, lsl #5
   12c14:	andeq	r1, r3, ip, ror #2
   12c18:	andeq	lr, r1, ip, ror #25
   12c1c:	andeq	lr, r1, ip, lsl #16
   12c20:	andeq	r1, r3, r4, lsl #5
   12c24:	andeq	lr, r1, r8, lsr #26
   12c28:	andeq	lr, r1, r0, asr sp
   12c2c:	andeq	lr, r1, r4, ror sp
   12c30:	ldrdeq	r0, [r0], -r3
   12c34:			; <UNDEFINED> instruction: 0x0001edb0
   12c38:	andeq	r4, r1, r0, ror #12
   12c3c:	andeq	lr, r1, r8, asr #27
   12c40:			; <UNDEFINED> instruction: 0x000146b8
   12c44:	andeq	lr, r1, ip, ror #27
   12c48:	andeq	r1, r3, r0, ror #3
   12c4c:	strdeq	r1, [r3], -r0
   12c50:	strdeq	r1, [r3], -r8
   12c54:	andeq	lr, r1, r0, lsl lr
   12c58:	ldrdeq	r1, [r3], -r8
   12c5c:	andeq	lr, r1, ip, lsr #28
   12c60:	andeq	lr, r1, ip, asr lr
   12c64:	muleq	r1, r8, lr
   12c68:	andeq	lr, r1, r8, ror #29
   12c6c:	andeq	lr, r1, r0, lsr #30
   12c70:	andeq	lr, r1, r4, asr pc
   12c74:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   12c78:	andeq	pc, r1, r0, asr #32
   12c7c:	strdeq	r1, [r3], -ip
   12c80:	andeq	r1, r3, r0, ror #4
   12c84:	ldrdeq	r1, [r3], -r0
   12c88:	strdeq	r1, [r3], -r4
   12c8c:	andeq	r1, r3, r8, ror #2
   12c90:	andeq	r1, r3, r0, lsl #4
   12c94:	andeq	r1, r3, ip, lsr #4
   12c98:	andeq	r1, r3, ip, ror r2
   12c9c:	andeq	r1, r3, r8, ror r2
   12ca0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12ca4:	lsl	r3, r3, #2
   12ca8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12cac:	add	r4, r2, r3
   12cb0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12cb4:	lsl	r3, r3, #2
   12cb8:	ldr	r2, [fp, #-236]	; 0xffffff14
   12cbc:	add	r3, r2, r3
   12cc0:	ldr	r3, [r3]
   12cc4:	mov	r0, r3
   12cc8:	bl	113ec <strlen@plt>
   12ccc:	mov	r3, r0
   12cd0:	str	r3, [r4]
   12cd4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12cd8:	add	r3, r3, #1
   12cdc:	str	r3, [fp, #-48]	; 0xffffffd0
   12ce0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12ce4:	ldr	r3, [fp, #-232]	; 0xffffff18
   12ce8:	cmp	r2, r3
   12cec:	blt	12ca0 <__assert_fail@plt+0x1704>
   12cf0:	ldr	r3, [pc, #-100]	; 12c94 <__assert_fail@plt+0x16f8>
   12cf4:	ldr	r3, [r3, #24]
   12cf8:	mov	r0, r3
   12cfc:	bl	113ec <strlen@plt>
   12d00:	mov	r2, r0
   12d04:	ldr	r3, [pc, #-120]	; 12c94 <__assert_fail@plt+0x16f8>
   12d08:	str	r2, [r3, #20]
   12d0c:	b	12e54 <__assert_fail@plt+0x18b8>
   12d10:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12d14:	str	r3, [fp, #-72]	; 0xffffffb8
   12d18:	ldr	r1, [pc, #-144]	; 12c90 <__assert_fail@plt+0x16f4>
   12d1c:	ldr	r0, [pc, #-144]	; 12c94 <__assert_fail@plt+0x16f8>
   12d20:	bl	15c00 <__assert_fail@plt+0x4664>
   12d24:	ldr	r3, [pc, #-156]	; 12c90 <__assert_fail@plt+0x16f4>
   12d28:	mov	r2, #0
   12d2c:	str	r2, [r3, #16]
   12d30:	ldr	r3, [pc, #-180]	; 12c84 <__assert_fail@plt+0x16e8>
   12d34:	ldr	r3, [r3]
   12d38:	lsl	r3, r3, #2
   12d3c:	ldr	r2, [fp, #-236]	; 0xffffff14
   12d40:	add	r3, r2, r3
   12d44:	ldr	r1, [r3]
   12d48:	ldr	r3, [pc, #-204]	; 12c84 <__assert_fail@plt+0x16e8>
   12d4c:	ldr	r3, [r3]
   12d50:	lsl	r3, r3, #2
   12d54:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12d58:	add	r3, r2, r3
   12d5c:	ldr	r3, [r3]
   12d60:	add	r2, r3, #1
   12d64:	ldr	r3, [pc, #-224]	; 12c8c <__assert_fail@plt+0x16f0>
   12d68:	ldrb	r3, [r3]
   12d6c:	str	r3, [sp, #8]
   12d70:	mov	r3, #0
   12d74:	str	r3, [sp, #4]
   12d78:	mov	r3, #0
   12d7c:	str	r3, [sp]
   12d80:	mov	r3, r2
   12d84:	mov	r2, r1
   12d88:	ldr	r1, [pc, #-256]	; 12c90 <__assert_fail@plt+0x16f4>
   12d8c:	ldr	r0, [pc, #-256]	; 12c94 <__assert_fail@plt+0x16f8>
   12d90:	bl	154c4 <__assert_fail@plt+0x3f28>
   12d94:	ldr	r3, [fp, #-72]	; 0xffffffb8
   12d98:	sub	r3, r3, #1
   12d9c:	str	r3, [fp, #-72]	; 0xffffffb8
   12da0:	ldr	r3, [pc, #-284]	; 12c8c <__assert_fail@plt+0x16f0>
   12da4:	mov	r2, #0
   12da8:	strb	r2, [r3]
   12dac:	ldr	r3, [pc, #-304]	; 12c84 <__assert_fail@plt+0x16e8>
   12db0:	ldr	r3, [r3]
   12db4:	add	r3, r3, #1
   12db8:	str	r3, [fp, #-48]	; 0xffffffd0
   12dbc:	b	12e38 <__assert_fail@plt+0x189c>
   12dc0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12dc4:	lsl	r3, r3, #2
   12dc8:	ldr	r2, [fp, #-236]	; 0xffffff14
   12dcc:	add	r3, r2, r3
   12dd0:	ldr	r1, [r3]
   12dd4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12dd8:	lsl	r3, r3, #2
   12ddc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12de0:	add	r3, r2, r3
   12de4:	ldr	r0, [r3]
   12de8:	ldr	r3, [pc, #-360]	; 12c88 <__assert_fail@plt+0x16ec>
   12dec:	ldr	r3, [r3]
   12df0:	ldr	r2, [pc, #-364]	; 12c8c <__assert_fail@plt+0x16f0>
   12df4:	ldrb	r2, [r2]
   12df8:	str	r2, [sp, #16]
   12dfc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12e00:	str	r2, [sp, #12]
   12e04:	str	r3, [sp, #8]
   12e08:	mov	r3, #0
   12e0c:	str	r3, [sp, #4]
   12e10:	mov	r3, #0
   12e14:	str	r3, [sp]
   12e18:	mov	r3, r0
   12e1c:	mov	r2, r1
   12e20:	ldr	r1, [pc, #-408]	; 12c90 <__assert_fail@plt+0x16f4>
   12e24:	ldr	r0, [pc, #-408]	; 12c94 <__assert_fail@plt+0x16f8>
   12e28:	bl	14cc4 <__assert_fail@plt+0x3728>
   12e2c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e30:	add	r3, r3, #1
   12e34:	str	r3, [fp, #-48]	; 0xffffffd0
   12e38:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12e3c:	ldr	r3, [fp, #-232]	; 0xffffff18
   12e40:	cmp	r2, r3
   12e44:	blt	12dc0 <__assert_fail@plt+0x1824>
   12e48:	ldr	r1, [pc, #-448]	; 12c90 <__assert_fail@plt+0x16f4>
   12e4c:	ldr	r0, [pc, #-448]	; 12c94 <__assert_fail@plt+0x16f8>
   12e50:	bl	15250 <__assert_fail@plt+0x3cb4>
   12e54:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12e58:	blx	r3
   12e5c:	str	r0, [fp, #-68]	; 0xffffffbc
   12e60:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12e64:	cmn	r3, #1
   12e68:	bne	12d10 <__assert_fail@plt+0x1774>
   12e6c:	ldr	r3, [pc, #-472]	; 12c9c <__assert_fail@plt+0x1700>
   12e70:	ldr	r3, [r3]
   12e74:	ldr	r2, [pc, #-484]	; 12c98 <__assert_fail@plt+0x16fc>
   12e78:	str	r3, [r2]
   12e7c:	ldr	r3, [pc, #-488]	; 12c9c <__assert_fail@plt+0x1700>
   12e80:	ldr	r3, [r3]
   12e84:	mov	r0, r3
   12e88:	sub	sp, fp, #16
   12e8c:	pop	{r4, r5, r6, fp, pc}
   12e90:	push	{r4, fp, lr}
   12e94:	add	fp, sp, #8
   12e98:	sub	sp, sp, #52	; 0x34
   12e9c:	mov	r3, #1
   12ea0:	str	r3, [fp, #-16]
   12ea4:	mov	r3, #0
   12ea8:	str	r3, [fp, #-20]	; 0xffffffec
   12eac:	mvn	r3, #0
   12eb0:	str	r3, [fp, #-24]	; 0xffffffe8
   12eb4:	mov	r3, #1
   12eb8:	strb	r3, [fp, #-25]	; 0xffffffe7
   12ebc:	mov	r3, #0
   12ec0:	strb	r3, [fp, #-26]	; 0xffffffe6
   12ec4:	ldr	r3, [pc, #1684]	; 13560 <__assert_fail@plt+0x1fc4>
   12ec8:	ldr	r3, [r3]
   12ecc:	str	r3, [fp, #-32]	; 0xffffffe0
   12ed0:	ldr	r3, [pc, #1672]	; 13560 <__assert_fail@plt+0x1fc4>
   12ed4:	ldr	r2, [r3]
   12ed8:	ldr	r3, [pc, #1668]	; 13564 <__assert_fail@plt+0x1fc8>
   12edc:	ldr	r1, [r3, #12]
   12ee0:	ldr	r3, [pc, #1664]	; 13568 <__assert_fail@plt+0x1fcc>
   12ee4:	ldr	r3, [r3, #20]
   12ee8:	sub	r3, r1, r3
   12eec:	sub	r3, r3, #1
   12ef0:	add	r3, r2, r3
   12ef4:	str	r3, [fp, #-36]	; 0xffffffdc
   12ef8:	ldr	r3, [pc, #1644]	; 1356c <__assert_fail@plt+0x1fd0>
   12efc:	ldrb	r3, [r3]
   12f00:	cmp	r3, #0
   12f04:	beq	12f10 <__assert_fail@plt+0x1974>
   12f08:	mvn	r3, #0
   12f0c:	b	13554 <__assert_fail@plt+0x1fb8>
   12f10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12f14:	str	r3, [fp, #-40]	; 0xffffffd8
   12f18:	ldr	r3, [pc, #1616]	; 13570 <__assert_fail@plt+0x1fd4>
   12f1c:	ldr	r3, [r3]
   12f20:	mov	r0, r3
   12f24:	bl	11578 <getc@plt>
   12f28:	str	r0, [fp, #-24]	; 0xffffffe8
   12f2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12f30:	cmn	r3, #1
   12f34:	bne	13098 <__assert_fail@plt+0x1afc>
   12f38:	ldr	r3, [pc, #1580]	; 1356c <__assert_fail@plt+0x1fd0>
   12f3c:	mov	r2, #1
   12f40:	strb	r2, [r3]
   12f44:	ldr	r3, [pc, #1556]	; 13560 <__assert_fail@plt+0x1fc4>
   12f48:	ldr	r3, [r3]
   12f4c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12f50:	cmp	r2, r3
   12f54:	bne	12f60 <__assert_fail@plt+0x19c4>
   12f58:	mvn	r3, #0
   12f5c:	b	13554 <__assert_fail@plt+0x1fb8>
   12f60:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12f64:	add	r2, r3, #1
   12f68:	str	r2, [fp, #-32]	; 0xffffffe0
   12f6c:	mov	r2, #0
   12f70:	strb	r2, [r3]
   12f74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12f78:	ldr	r2, [pc, #1504]	; 13560 <__assert_fail@plt+0x1fc4>
   12f7c:	ldr	r2, [r2]
   12f80:	sub	r3, r3, r2
   12f84:	str	r3, [fp, #-44]	; 0xffffffd4
   12f88:	ldr	r3, [fp, #-16]
   12f8c:	cmp	r3, #2
   12f90:	bne	12fdc <__assert_fail@plt+0x1a40>
   12f94:	bl	14074 <__assert_fail@plt+0x2ad8>
   12f98:	ldr	r0, [pc, #1492]	; 13574 <__assert_fail@plt+0x1fd8>
   12f9c:	bl	113d4 <gettext@plt>
   12fa0:	mov	r4, r0
   12fa4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fa8:	cmp	r3, #34	; 0x22
   12fac:	bne	12fc0 <__assert_fail@plt+0x1a24>
   12fb0:	ldr	r0, [pc, #1472]	; 13578 <__assert_fail@plt+0x1fdc>
   12fb4:	bl	113d4 <gettext@plt>
   12fb8:	mov	r3, r0
   12fbc:	b	12fcc <__assert_fail@plt+0x1a30>
   12fc0:	ldr	r0, [pc, #1460]	; 1357c <__assert_fail@plt+0x1fe0>
   12fc4:	bl	113d4 <gettext@plt>
   12fc8:	mov	r3, r0
   12fcc:	mov	r2, r4
   12fd0:	mov	r1, #0
   12fd4:	mov	r0, #1
   12fd8:	bl	11344 <error@plt>
   12fdc:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   12fe0:	cmp	r3, #0
   12fe4:	beq	13048 <__assert_fail@plt+0x1aac>
   12fe8:	ldr	r3, [pc, #1424]	; 13580 <__assert_fail@plt+0x1fe4>
   12fec:	ldr	r3, [r3]
   12ff0:	cmp	r3, #0
   12ff4:	beq	13048 <__assert_fail@plt+0x1aac>
   12ff8:	ldr	r3, [pc, #1408]	; 13580 <__assert_fail@plt+0x1fe4>
   12ffc:	ldr	r3, [r3]
   13000:	ldrb	r2, [r3]
   13004:	ldr	r3, [pc, #1364]	; 13560 <__assert_fail@plt+0x1fc4>
   13008:	ldr	r3, [r3]
   1300c:	ldrb	r3, [r3]
   13010:	cmp	r2, r3
   13014:	bne	13048 <__assert_fail@plt+0x1aac>
   13018:	ldr	r3, [pc, #1376]	; 13580 <__assert_fail@plt+0x1fe4>
   1301c:	ldr	r2, [r3]
   13020:	ldr	r3, [pc, #1336]	; 13560 <__assert_fail@plt+0x1fc4>
   13024:	ldr	r3, [r3]
   13028:	mov	r1, r3
   1302c:	mov	r0, r2
   13030:	bl	111dc <strcmp@plt>
   13034:	mov	r3, r0
   13038:	cmp	r3, #0
   1303c:	bne	13048 <__assert_fail@plt+0x1aac>
   13040:	mvn	r3, #0
   13044:	b	13554 <__assert_fail@plt+0x1fb8>
   13048:	ldr	r3, [pc, #1300]	; 13564 <__assert_fail@plt+0x1fc8>
   1304c:	ldr	r3, [r3, #24]
   13050:	cmp	r3, #0
   13054:	bne	13090 <__assert_fail@plt+0x1af4>
   13058:	ldr	r3, [pc, #1280]	; 13560 <__assert_fail@plt+0x1fc4>
   1305c:	ldr	r2, [r3]
   13060:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13064:	ldr	r3, [pc, #1304]	; 13584 <__assert_fail@plt+0x1fe8>
   13068:	ldrb	r3, [r3]
   1306c:	str	r3, [sp, #8]
   13070:	mov	r3, #0
   13074:	str	r3, [sp, #4]
   13078:	mov	r3, #0
   1307c:	str	r3, [sp]
   13080:	mov	r3, r1
   13084:	ldr	r1, [pc, #1244]	; 13568 <__assert_fail@plt+0x1fcc>
   13088:	ldr	r0, [pc, #1236]	; 13564 <__assert_fail@plt+0x1fc8>
   1308c:	bl	154c4 <__assert_fail@plt+0x3f28>
   13090:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13094:	b	13554 <__assert_fail@plt+0x1fb8>
   13098:	ldr	r3, [fp, #-16]
   1309c:	cmp	r3, #3
   130a0:	ldrls	pc, [pc, r3, lsl #2]
   130a4:	b	134bc <__assert_fail@plt+0x1f20>
   130a8:	andeq	r3, r1, r8, lsr #2
   130ac:	strheq	r3, [r1], -r8
   130b0:	andeq	r3, r1, r4, lsr r4
   130b4:	andeq	r3, r1, ip, lsr #9
   130b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130bc:	bic	r3, r3, #127	; 0x7f
   130c0:	cmp	r3, #0
   130c4:	bne	130f0 <__assert_fail@plt+0x1b54>
   130c8:	bl	113b0 <__ctype_b_loc@plt>
   130cc:	mov	r3, r0
   130d0:	ldr	r2, [r3]
   130d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130d8:	lsl	r3, r3, #1
   130dc:	add	r3, r2, r3
   130e0:	ldrh	r3, [r3]
   130e4:	and	r3, r3, #1
   130e8:	cmp	r3, #0
   130ec:	bne	1354c <__assert_fail@plt+0x1fb0>
   130f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   130f4:	cmp	r3, #10
   130f8:	beq	1354c <__assert_fail@plt+0x1fb0>
   130fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13100:	cmp	r3, #13
   13104:	beq	1354c <__assert_fail@plt+0x1fb0>
   13108:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1310c:	cmp	r3, #12
   13110:	beq	1354c <__assert_fail@plt+0x1fb0>
   13114:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13118:	cmp	r3, #11
   1311c:	beq	1354c <__assert_fail@plt+0x1fb0>
   13120:	mov	r3, #0
   13124:	str	r3, [fp, #-16]
   13128:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1312c:	cmp	r3, #10
   13130:	bne	132a4 <__assert_fail@plt+0x1d08>
   13134:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13138:	bic	r3, r3, #127	; 0x7f
   1313c:	cmp	r3, #0
   13140:	bne	1316c <__assert_fail@plt+0x1bd0>
   13144:	bl	113b0 <__ctype_b_loc@plt>
   13148:	mov	r3, r0
   1314c:	ldr	r2, [r3]
   13150:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13154:	lsl	r3, r3, #1
   13158:	add	r3, r2, r3
   1315c:	ldrh	r3, [r3]
   13160:	and	r3, r3, #1
   13164:	cmp	r3, #0
   13168:	bne	13180 <__assert_fail@plt+0x1be4>
   1316c:	ldr	r3, [pc, #1044]	; 13588 <__assert_fail@plt+0x1fec>
   13170:	ldr	r3, [r3]
   13174:	add	r3, r3, #1
   13178:	ldr	r2, [pc, #1032]	; 13588 <__assert_fail@plt+0x1fec>
   1317c:	str	r3, [r2]
   13180:	ldr	r3, [pc, #984]	; 13560 <__assert_fail@plt+0x1fc4>
   13184:	ldr	r3, [r3]
   13188:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1318c:	cmp	r2, r3
   13190:	bne	131ac <__assert_fail@plt+0x1c10>
   13194:	ldrb	r3, [fp, #-26]	; 0xffffffe6
   13198:	cmp	r3, #0
   1319c:	bne	131ac <__assert_fail@plt+0x1c10>
   131a0:	mov	r3, #1
   131a4:	str	r3, [fp, #-16]
   131a8:	b	13550 <__assert_fail@plt+0x1fb4>
   131ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
   131b0:	add	r2, r3, #1
   131b4:	str	r2, [fp, #-32]	; 0xffffffe0
   131b8:	mov	r2, #0
   131bc:	strb	r2, [r3]
   131c0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   131c4:	ldr	r2, [pc, #916]	; 13560 <__assert_fail@plt+0x1fc4>
   131c8:	ldr	r2, [r2]
   131cc:	sub	r3, r3, r2
   131d0:	str	r3, [fp, #-44]	; 0xffffffd4
   131d4:	ldr	r3, [pc, #932]	; 13580 <__assert_fail@plt+0x1fe4>
   131d8:	ldr	r3, [r3]
   131dc:	cmp	r3, #0
   131e0:	beq	13254 <__assert_fail@plt+0x1cb8>
   131e4:	ldr	r3, [pc, #916]	; 13580 <__assert_fail@plt+0x1fe4>
   131e8:	ldr	r3, [r3]
   131ec:	ldrb	r2, [r3]
   131f0:	ldr	r3, [pc, #872]	; 13560 <__assert_fail@plt+0x1fc4>
   131f4:	ldr	r3, [r3]
   131f8:	ldrb	r3, [r3]
   131fc:	cmp	r2, r3
   13200:	bne	13254 <__assert_fail@plt+0x1cb8>
   13204:	ldr	r3, [pc, #884]	; 13580 <__assert_fail@plt+0x1fe4>
   13208:	ldr	r2, [r3]
   1320c:	ldr	r3, [pc, #844]	; 13560 <__assert_fail@plt+0x1fc4>
   13210:	ldr	r3, [r3]
   13214:	mov	r1, r3
   13218:	mov	r0, r2
   1321c:	bl	111dc <strcmp@plt>
   13220:	mov	r3, r0
   13224:	cmp	r3, #0
   13228:	bne	13254 <__assert_fail@plt+0x1cb8>
   1322c:	ldr	r3, [pc, #824]	; 1356c <__assert_fail@plt+0x1fd0>
   13230:	mov	r2, #1
   13234:	strb	r2, [r3]
   13238:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   1323c:	cmp	r3, #0
   13240:	beq	1324c <__assert_fail@plt+0x1cb0>
   13244:	mvn	r3, #0
   13248:	b	13554 <__assert_fail@plt+0x1fb8>
   1324c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13250:	b	13554 <__assert_fail@plt+0x1fb8>
   13254:	ldr	r3, [pc, #776]	; 13564 <__assert_fail@plt+0x1fc8>
   13258:	ldr	r3, [r3, #24]
   1325c:	cmp	r3, #0
   13260:	bne	1329c <__assert_fail@plt+0x1d00>
   13264:	ldr	r3, [pc, #756]	; 13560 <__assert_fail@plt+0x1fc4>
   13268:	ldr	r2, [r3]
   1326c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13270:	ldr	r3, [pc, #780]	; 13584 <__assert_fail@plt+0x1fe8>
   13274:	ldrb	r3, [r3]
   13278:	str	r3, [sp, #8]
   1327c:	mov	r3, #0
   13280:	str	r3, [sp, #4]
   13284:	mov	r3, #0
   13288:	str	r3, [sp]
   1328c:	mov	r3, r1
   13290:	ldr	r1, [pc, #720]	; 13568 <__assert_fail@plt+0x1fcc>
   13294:	ldr	r0, [pc, #712]	; 13564 <__assert_fail@plt+0x1fc8>
   13298:	bl	154c4 <__assert_fail@plt+0x3f28>
   1329c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   132a0:	b	13554 <__assert_fail@plt+0x1fb8>
   132a4:	mov	r3, #1
   132a8:	strb	r3, [fp, #-26]	; 0xffffffe6
   132ac:	ldr	r3, [pc, #688]	; 13564 <__assert_fail@plt+0x1fc8>
   132b0:	ldr	r3, [r3, #24]
   132b4:	cmp	r3, #0
   132b8:	bne	133f4 <__assert_fail@plt+0x1e58>
   132bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   132c0:	bic	r3, r3, #127	; 0x7f
   132c4:	cmp	r3, #0
   132c8:	bne	133f4 <__assert_fail@plt+0x1e58>
   132cc:	bl	113b0 <__ctype_b_loc@plt>
   132d0:	mov	r3, r0
   132d4:	ldr	r2, [r3]
   132d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   132dc:	lsl	r3, r3, #1
   132e0:	add	r3, r2, r3
   132e4:	ldrh	r3, [r3]
   132e8:	and	r3, r3, #1
   132ec:	cmp	r3, #0
   132f0:	beq	133f4 <__assert_fail@plt+0x1e58>
   132f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   132f8:	add	r2, r3, #1
   132fc:	str	r2, [fp, #-32]	; 0xffffffe0
   13300:	mov	r2, #0
   13304:	strb	r2, [r3]
   13308:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1330c:	ldr	r2, [pc, #588]	; 13560 <__assert_fail@plt+0x1fc4>
   13310:	ldr	r2, [r2]
   13314:	sub	r3, r3, r2
   13318:	str	r3, [fp, #-44]	; 0xffffffd4
   1331c:	ldr	r3, [pc, #604]	; 13580 <__assert_fail@plt+0x1fe4>
   13320:	ldr	r3, [r3]
   13324:	cmp	r3, #0
   13328:	beq	1339c <__assert_fail@plt+0x1e00>
   1332c:	ldr	r3, [pc, #588]	; 13580 <__assert_fail@plt+0x1fe4>
   13330:	ldr	r3, [r3]
   13334:	ldrb	r2, [r3]
   13338:	ldr	r3, [pc, #544]	; 13560 <__assert_fail@plt+0x1fc4>
   1333c:	ldr	r3, [r3]
   13340:	ldrb	r3, [r3]
   13344:	cmp	r2, r3
   13348:	bne	1339c <__assert_fail@plt+0x1e00>
   1334c:	ldr	r3, [pc, #556]	; 13580 <__assert_fail@plt+0x1fe4>
   13350:	ldr	r2, [r3]
   13354:	ldr	r3, [pc, #516]	; 13560 <__assert_fail@plt+0x1fc4>
   13358:	ldr	r3, [r3]
   1335c:	mov	r1, r3
   13360:	mov	r0, r2
   13364:	bl	111dc <strcmp@plt>
   13368:	mov	r3, r0
   1336c:	cmp	r3, #0
   13370:	bne	1339c <__assert_fail@plt+0x1e00>
   13374:	ldr	r3, [pc, #496]	; 1356c <__assert_fail@plt+0x1fd0>
   13378:	mov	r2, #1
   1337c:	strb	r2, [r3]
   13380:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   13384:	cmp	r3, #0
   13388:	beq	13394 <__assert_fail@plt+0x1df8>
   1338c:	mvn	r3, #0
   13390:	b	13554 <__assert_fail@plt+0x1fb8>
   13394:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13398:	b	13554 <__assert_fail@plt+0x1fb8>
   1339c:	ldr	r3, [pc, #444]	; 13560 <__assert_fail@plt+0x1fc4>
   133a0:	ldr	r2, [r3]
   133a4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   133a8:	ldr	r3, [pc, #468]	; 13584 <__assert_fail@plt+0x1fe8>
   133ac:	ldrb	r3, [r3]
   133b0:	str	r3, [sp, #8]
   133b4:	mov	r3, #0
   133b8:	str	r3, [sp, #4]
   133bc:	mov	r3, #0
   133c0:	str	r3, [sp]
   133c4:	mov	r3, r1
   133c8:	ldr	r1, [pc, #408]	; 13568 <__assert_fail@plt+0x1fcc>
   133cc:	ldr	r0, [pc, #400]	; 13564 <__assert_fail@plt+0x1fc8>
   133d0:	bl	154c4 <__assert_fail@plt+0x3f28>
   133d4:	ldr	r3, [pc, #388]	; 13560 <__assert_fail@plt+0x1fc4>
   133d8:	ldr	r3, [r3]
   133dc:	str	r3, [fp, #-32]	; 0xffffffe0
   133e0:	mov	r3, #1
   133e4:	str	r3, [fp, #-16]
   133e8:	mov	r3, #0
   133ec:	strb	r3, [fp, #-25]	; 0xffffffe7
   133f0:	b	13550 <__assert_fail@plt+0x1fb4>
   133f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   133f8:	cmp	r3, #39	; 0x27
   133fc:	beq	13420 <__assert_fail@plt+0x1e84>
   13400:	cmp	r3, #92	; 0x5c
   13404:	beq	13414 <__assert_fail@plt+0x1e78>
   13408:	cmp	r3, #34	; 0x22
   1340c:	beq	13420 <__assert_fail@plt+0x1e84>
   13410:	b	134bc <__assert_fail@plt+0x1f20>
   13414:	mov	r3, #3
   13418:	str	r3, [fp, #-16]
   1341c:	b	13550 <__assert_fail@plt+0x1fb4>
   13420:	mov	r3, #2
   13424:	str	r3, [fp, #-16]
   13428:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1342c:	str	r3, [fp, #-20]	; 0xffffffec
   13430:	b	13550 <__assert_fail@plt+0x1fb4>
   13434:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13438:	cmp	r3, #10
   1343c:	bne	13488 <__assert_fail@plt+0x1eec>
   13440:	bl	14074 <__assert_fail@plt+0x2ad8>
   13444:	ldr	r0, [pc, #296]	; 13574 <__assert_fail@plt+0x1fd8>
   13448:	bl	113d4 <gettext@plt>
   1344c:	mov	r4, r0
   13450:	ldr	r3, [fp, #-20]	; 0xffffffec
   13454:	cmp	r3, #34	; 0x22
   13458:	bne	1346c <__assert_fail@plt+0x1ed0>
   1345c:	ldr	r0, [pc, #276]	; 13578 <__assert_fail@plt+0x1fdc>
   13460:	bl	113d4 <gettext@plt>
   13464:	mov	r3, r0
   13468:	b	13478 <__assert_fail@plt+0x1edc>
   1346c:	ldr	r0, [pc, #264]	; 1357c <__assert_fail@plt+0x1fe0>
   13470:	bl	113d4 <gettext@plt>
   13474:	mov	r3, r0
   13478:	mov	r2, r4
   1347c:	mov	r1, #0
   13480:	mov	r0, #1
   13484:	bl	11344 <error@plt>
   13488:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1348c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13490:	cmp	r2, r3
   13494:	bne	134b8 <__assert_fail@plt+0x1f1c>
   13498:	mov	r3, #0
   1349c:	str	r3, [fp, #-16]
   134a0:	mov	r3, #1
   134a4:	strb	r3, [fp, #-26]	; 0xffffffe6
   134a8:	b	13550 <__assert_fail@plt+0x1fb4>
   134ac:	mov	r3, #0
   134b0:	str	r3, [fp, #-16]
   134b4:	b	134bc <__assert_fail@plt+0x1f20>
   134b8:	nop			; (mov r0, r0)
   134bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   134c0:	cmp	r3, #0
   134c4:	bne	13500 <__assert_fail@plt+0x1f64>
   134c8:	ldr	r3, [pc, #188]	; 1358c <__assert_fail@plt+0x1ff0>
   134cc:	ldr	r3, [r3]
   134d0:	cmp	r3, #0
   134d4:	bne	13500 <__assert_fail@plt+0x1f64>
   134d8:	ldr	r0, [pc, #176]	; 13590 <__assert_fail@plt+0x1ff4>
   134dc:	bl	113d4 <gettext@plt>
   134e0:	mov	r3, r0
   134e4:	mov	r2, r3
   134e8:	mov	r1, #0
   134ec:	mov	r0, #0
   134f0:	bl	11344 <error@plt>
   134f4:	ldr	r3, [pc, #144]	; 1358c <__assert_fail@plt+0x1ff0>
   134f8:	mov	r2, #1
   134fc:	str	r2, [r3]
   13500:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13504:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13508:	cmp	r2, r3
   1350c:	bcc	13530 <__assert_fail@plt+0x1f94>
   13510:	bl	14074 <__assert_fail@plt+0x2ad8>
   13514:	ldr	r0, [pc, #120]	; 13594 <__assert_fail@plt+0x1ff8>
   13518:	bl	113d4 <gettext@plt>
   1351c:	mov	r3, r0
   13520:	mov	r2, r3
   13524:	mov	r1, #0
   13528:	mov	r0, #1
   1352c:	bl	11344 <error@plt>
   13530:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13534:	add	r2, r3, #1
   13538:	str	r2, [fp, #-32]	; 0xffffffe0
   1353c:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13540:	uxtb	r2, r2
   13544:	strb	r2, [r3]
   13548:	b	12f10 <__assert_fail@plt+0x1974>
   1354c:	nop			; (mov r0, r0)
   13550:	b	12f10 <__assert_fail@plt+0x1974>
   13554:	mov	r0, r3
   13558:	sub	sp, fp, #8
   1355c:	pop	{r4, fp, pc}
   13560:	strdeq	r1, [r3], -r4
   13564:	andeq	r1, r3, ip, lsr #4
   13568:	andeq	r1, r3, r0, lsl #4
   1356c:	andeq	r1, r3, r8, lsl #5
   13570:	strdeq	r1, [r3], -r0
   13574:	strheq	pc, [r1], -r8	; <UNPREDICTABLE>
   13578:	andeq	pc, r1, r0, lsl r1	; <UNPREDICTABLE>
   1357c:	andeq	pc, r1, r8, lsl r1	; <UNPREDICTABLE>
   13580:	andeq	r1, r3, ip, asr r2
   13584:	andeq	r1, r3, r8, ror #2
   13588:	strdeq	r1, [r3], -ip
   1358c:	andeq	r1, r3, r8, asr r2
   13590:	andeq	pc, r1, r0, lsr #2
   13594:	andeq	pc, r1, ip, lsr #3
   13598:	push	{fp, lr}
   1359c:	add	fp, sp, #4
   135a0:	sub	sp, sp, #32
   135a4:	ldr	r3, [pc, #512]	; 137ac <__assert_fail@plt+0x2210>
   135a8:	ldr	r3, [r3]
   135ac:	str	r3, [fp, #-8]
   135b0:	ldr	r3, [pc, #500]	; 137ac <__assert_fail@plt+0x2210>
   135b4:	ldr	r2, [r3]
   135b8:	ldr	r3, [pc, #496]	; 137b0 <__assert_fail@plt+0x2214>
   135bc:	ldr	r1, [r3, #12]
   135c0:	ldr	r3, [pc, #492]	; 137b4 <__assert_fail@plt+0x2218>
   135c4:	ldr	r3, [r3, #20]
   135c8:	sub	r3, r1, r3
   135cc:	sub	r3, r3, #1
   135d0:	add	r3, r2, r3
   135d4:	str	r3, [fp, #-12]
   135d8:	ldr	r3, [pc, #472]	; 137b8 <__assert_fail@plt+0x221c>
   135dc:	ldrb	r3, [r3]
   135e0:	cmp	r3, #0
   135e4:	beq	135f0 <__assert_fail@plt+0x2054>
   135e8:	mvn	r3, #0
   135ec:	b	137a0 <__assert_fail@plt+0x2204>
   135f0:	ldr	r3, [pc, #452]	; 137bc <__assert_fail@plt+0x2220>
   135f4:	ldr	r3, [r3]
   135f8:	mov	r0, r3
   135fc:	bl	11578 <getc@plt>
   13600:	str	r0, [fp, #-16]
   13604:	ldr	r3, [fp, #-16]
   13608:	cmn	r3, #1
   1360c:	bne	136b0 <__assert_fail@plt+0x2114>
   13610:	ldr	r3, [pc, #416]	; 137b8 <__assert_fail@plt+0x221c>
   13614:	mov	r2, #1
   13618:	strb	r2, [r3]
   1361c:	ldr	r3, [pc, #392]	; 137ac <__assert_fail@plt+0x2210>
   13620:	ldr	r3, [r3]
   13624:	ldr	r2, [fp, #-8]
   13628:	cmp	r2, r3
   1362c:	bne	13638 <__assert_fail@plt+0x209c>
   13630:	mvn	r3, #0
   13634:	b	137a0 <__assert_fail@plt+0x2204>
   13638:	ldr	r3, [fp, #-8]
   1363c:	add	r2, r3, #1
   13640:	str	r2, [fp, #-8]
   13644:	mov	r2, #0
   13648:	strb	r2, [r3]
   1364c:	ldr	r3, [fp, #-8]
   13650:	ldr	r2, [pc, #340]	; 137ac <__assert_fail@plt+0x2210>
   13654:	ldr	r2, [r2]
   13658:	sub	r3, r3, r2
   1365c:	str	r3, [fp, #-20]	; 0xffffffec
   13660:	ldr	r3, [pc, #328]	; 137b0 <__assert_fail@plt+0x2214>
   13664:	ldr	r3, [r3, #24]
   13668:	cmp	r3, #0
   1366c:	bne	136a8 <__assert_fail@plt+0x210c>
   13670:	ldr	r3, [pc, #308]	; 137ac <__assert_fail@plt+0x2210>
   13674:	ldr	r2, [r3]
   13678:	ldr	r1, [fp, #-20]	; 0xffffffec
   1367c:	ldr	r3, [pc, #316]	; 137c0 <__assert_fail@plt+0x2224>
   13680:	ldrb	r3, [r3]
   13684:	str	r3, [sp, #8]
   13688:	mov	r3, #0
   1368c:	str	r3, [sp, #4]
   13690:	mov	r3, #0
   13694:	str	r3, [sp]
   13698:	mov	r3, r1
   1369c:	ldr	r1, [pc, #272]	; 137b4 <__assert_fail@plt+0x2218>
   136a0:	ldr	r0, [pc, #264]	; 137b0 <__assert_fail@plt+0x2214>
   136a4:	bl	154c4 <__assert_fail@plt+0x3f28>
   136a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   136ac:	b	137a0 <__assert_fail@plt+0x2204>
   136b0:	ldr	r3, [pc, #268]	; 137c4 <__assert_fail@plt+0x2228>
   136b4:	ldrb	r3, [r3]
   136b8:	mov	r2, r3
   136bc:	ldr	r3, [fp, #-16]
   136c0:	cmp	r2, r3
   136c4:	bne	13754 <__assert_fail@plt+0x21b8>
   136c8:	ldr	r3, [pc, #248]	; 137c8 <__assert_fail@plt+0x222c>
   136cc:	ldr	r3, [r3]
   136d0:	add	r3, r3, #1
   136d4:	ldr	r2, [pc, #236]	; 137c8 <__assert_fail@plt+0x222c>
   136d8:	str	r3, [r2]
   136dc:	ldr	r3, [fp, #-8]
   136e0:	add	r2, r3, #1
   136e4:	str	r2, [fp, #-8]
   136e8:	mov	r2, #0
   136ec:	strb	r2, [r3]
   136f0:	ldr	r3, [fp, #-8]
   136f4:	ldr	r2, [pc, #176]	; 137ac <__assert_fail@plt+0x2210>
   136f8:	ldr	r2, [r2]
   136fc:	sub	r3, r3, r2
   13700:	str	r3, [fp, #-20]	; 0xffffffec
   13704:	ldr	r3, [pc, #164]	; 137b0 <__assert_fail@plt+0x2214>
   13708:	ldr	r3, [r3, #24]
   1370c:	cmp	r3, #0
   13710:	bne	1374c <__assert_fail@plt+0x21b0>
   13714:	ldr	r3, [pc, #144]	; 137ac <__assert_fail@plt+0x2210>
   13718:	ldr	r2, [r3]
   1371c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13720:	ldr	r3, [pc, #152]	; 137c0 <__assert_fail@plt+0x2224>
   13724:	ldrb	r3, [r3]
   13728:	str	r3, [sp, #8]
   1372c:	mov	r3, #0
   13730:	str	r3, [sp, #4]
   13734:	mov	r3, #0
   13738:	str	r3, [sp]
   1373c:	mov	r3, r1
   13740:	ldr	r1, [pc, #108]	; 137b4 <__assert_fail@plt+0x2218>
   13744:	ldr	r0, [pc, #100]	; 137b0 <__assert_fail@plt+0x2214>
   13748:	bl	154c4 <__assert_fail@plt+0x3f28>
   1374c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13750:	b	137a0 <__assert_fail@plt+0x2204>
   13754:	ldr	r2, [fp, #-8]
   13758:	ldr	r3, [fp, #-12]
   1375c:	cmp	r2, r3
   13760:	bcc	13784 <__assert_fail@plt+0x21e8>
   13764:	bl	14074 <__assert_fail@plt+0x2ad8>
   13768:	ldr	r0, [pc, #92]	; 137cc <__assert_fail@plt+0x2230>
   1376c:	bl	113d4 <gettext@plt>
   13770:	mov	r3, r0
   13774:	mov	r2, r3
   13778:	mov	r1, #0
   1377c:	mov	r0, #1
   13780:	bl	11344 <error@plt>
   13784:	ldr	r3, [fp, #-8]
   13788:	add	r2, r3, #1
   1378c:	str	r2, [fp, #-8]
   13790:	ldr	r2, [fp, #-16]
   13794:	uxtb	r2, r2
   13798:	strb	r2, [r3]
   1379c:	b	135f0 <__assert_fail@plt+0x2054>
   137a0:	mov	r0, r3
   137a4:	sub	sp, fp, #4
   137a8:	pop	{fp, pc}
   137ac:	strdeq	r1, [r3], -r4
   137b0:	andeq	r1, r3, ip, lsr #4
   137b4:	andeq	r1, r3, r0, lsl #4
   137b8:	andeq	r1, r3, r9, lsl #5
   137bc:	strdeq	r1, [r3], -r0
   137c0:	andeq	r1, r3, r8, ror #2
   137c4:	andeq	r1, r3, r3, lsl #5
   137c8:	strdeq	r1, [r3], -ip
   137cc:	andeq	pc, r1, ip, lsr #3
   137d0:	push	{r4, r5, fp, lr}
   137d4:	add	fp, sp, #12
   137d8:	sub	sp, sp, #24
   137dc:	mov	r3, r0
   137e0:	strb	r3, [fp, #-29]	; 0xffffffe3
   137e4:	mov	r3, #0
   137e8:	str	r3, [fp, #-16]
   137ec:	b	1388c <__assert_fail@plt+0x22f0>
   137f0:	ldr	r3, [pc, #564]	; 13a2c <__assert_fail@plt+0x2490>
   137f4:	ldr	r4, [r3]
   137f8:	ldr	r3, [fp, #-16]
   137fc:	cmp	r3, #0
   13800:	bne	1380c <__assert_fail@plt+0x2270>
   13804:	ldr	r5, [pc, #548]	; 13a30 <__assert_fail@plt+0x2494>
   13808:	b	13810 <__assert_fail@plt+0x2274>
   1380c:	ldr	r5, [pc, #544]	; 13a34 <__assert_fail@plt+0x2498>
   13810:	ldr	r3, [pc, #544]	; 13a38 <__assert_fail@plt+0x249c>
   13814:	ldr	r2, [r3, #4]
   13818:	ldr	r3, [fp, #-16]
   1381c:	lsl	r3, r3, #2
   13820:	add	r3, r2, r3
   13824:	ldr	r3, [r3]
   13828:	mov	r2, r3
   1382c:	mov	r1, #3
   13830:	mov	r0, #0
   13834:	bl	1a898 <__assert_fail@plt+0x92fc>
   13838:	mov	r3, r0
   1383c:	mov	r2, r5
   13840:	ldr	r1, [pc, #500]	; 13a3c <__assert_fail@plt+0x24a0>
   13844:	mov	r0, r4
   13848:	bl	11410 <fprintf@plt>
   1384c:	mov	r3, r0
   13850:	cmp	r3, #0
   13854:	bge	13880 <__assert_fail@plt+0x22e4>
   13858:	bl	1141c <__errno_location@plt>
   1385c:	mov	r3, r0
   13860:	ldr	r4, [r3]
   13864:	ldr	r0, [pc, #468]	; 13a40 <__assert_fail@plt+0x24a4>
   13868:	bl	113d4 <gettext@plt>
   1386c:	mov	r3, r0
   13870:	mov	r2, r3
   13874:	mov	r1, r4
   13878:	mov	r0, #1
   1387c:	bl	11344 <error@plt>
   13880:	ldr	r3, [fp, #-16]
   13884:	add	r3, r3, #1
   13888:	str	r3, [fp, #-16]
   1388c:	ldr	r3, [pc, #420]	; 13a38 <__assert_fail@plt+0x249c>
   13890:	ldr	r3, [r3]
   13894:	sub	r2, r3, #1
   13898:	ldr	r3, [fp, #-16]
   1389c:	cmp	r2, r3
   138a0:	bhi	137f0 <__assert_fail@plt+0x2254>
   138a4:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   138a8:	cmp	r3, #0
   138ac:	beq	13a08 <__assert_fail@plt+0x246c>
   138b0:	ldr	r3, [pc, #396]	; 13a44 <__assert_fail@plt+0x24a8>
   138b4:	ldr	r3, [r3]
   138b8:	cmp	r3, #0
   138bc:	bne	1390c <__assert_fail@plt+0x2370>
   138c0:	ldr	r0, [pc, #384]	; 13a48 <__assert_fail@plt+0x24ac>
   138c4:	bl	11a7c <__assert_fail@plt+0x4e0>
   138c8:	mov	r2, r0
   138cc:	ldr	r3, [pc, #368]	; 13a44 <__assert_fail@plt+0x24a8>
   138d0:	str	r2, [r3]
   138d4:	ldr	r3, [pc, #360]	; 13a44 <__assert_fail@plt+0x24a8>
   138d8:	ldr	r3, [r3]
   138dc:	cmp	r3, #0
   138e0:	bne	1390c <__assert_fail@plt+0x2370>
   138e4:	bl	1141c <__errno_location@plt>
   138e8:	mov	r3, r0
   138ec:	ldr	r4, [r3]
   138f0:	ldr	r0, [pc, #340]	; 13a4c <__assert_fail@plt+0x24b0>
   138f4:	bl	113d4 <gettext@plt>
   138f8:	mov	r3, r0
   138fc:	mov	r2, r3
   13900:	mov	r1, r4
   13904:	mov	r0, #1
   13908:	bl	11344 <error@plt>
   1390c:	ldr	r3, [pc, #280]	; 13a2c <__assert_fail@plt+0x2490>
   13910:	ldr	r3, [r3]
   13914:	mov	r2, #4
   13918:	mov	r1, #1
   1391c:	ldr	r0, [pc, #300]	; 13a50 <__assert_fail@plt+0x24b4>
   13920:	bl	112f0 <fwrite@plt>
   13924:	ldr	r3, [pc, #256]	; 13a2c <__assert_fail@plt+0x2490>
   13928:	ldr	r3, [r3]
   1392c:	mov	r0, r3
   13930:	bl	1cea4 <__assert_fail@plt+0xb908>
   13934:	mov	r3, r0
   13938:	cmp	r3, #0
   1393c:	beq	13968 <__assert_fail@plt+0x23cc>
   13940:	bl	1141c <__errno_location@plt>
   13944:	mov	r3, r0
   13948:	ldr	r4, [r3]
   1394c:	ldr	r0, [pc, #236]	; 13a40 <__assert_fail@plt+0x24a4>
   13950:	bl	113d4 <gettext@plt>
   13954:	mov	r3, r0
   13958:	mov	r2, r3
   1395c:	mov	r1, r4
   13960:	mov	r0, #1
   13964:	bl	11344 <error@plt>
   13968:	ldr	r3, [pc, #212]	; 13a44 <__assert_fail@plt+0x24a8>
   1396c:	ldr	r3, [r3]
   13970:	mov	r0, r3
   13974:	bl	11578 <getc@plt>
   13978:	str	r0, [fp, #-24]	; 0xffffffe8
   1397c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13980:	str	r3, [fp, #-20]	; 0xffffffec
   13984:	b	1399c <__assert_fail@plt+0x2400>
   13988:	ldr	r3, [pc, #180]	; 13a44 <__assert_fail@plt+0x24a8>
   1398c:	ldr	r3, [r3]
   13990:	mov	r0, r3
   13994:	bl	11578 <getc@plt>
   13998:	str	r0, [fp, #-20]	; 0xffffffec
   1399c:	ldr	r3, [fp, #-20]	; 0xffffffec
   139a0:	cmn	r3, #1
   139a4:	beq	139b4 <__assert_fail@plt+0x2418>
   139a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   139ac:	cmp	r3, #10
   139b0:	bne	13988 <__assert_fail@plt+0x23ec>
   139b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   139b8:	cmn	r3, #1
   139bc:	bne	139e8 <__assert_fail@plt+0x244c>
   139c0:	bl	1141c <__errno_location@plt>
   139c4:	mov	r3, r0
   139c8:	ldr	r4, [r3]
   139cc:	ldr	r0, [pc, #128]	; 13a54 <__assert_fail@plt+0x24b8>
   139d0:	bl	113d4 <gettext@plt>
   139d4:	mov	r3, r0
   139d8:	mov	r2, r3
   139dc:	mov	r1, r4
   139e0:	mov	r0, #1
   139e4:	bl	11344 <error@plt>
   139e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   139ec:	cmp	r3, #121	; 0x79
   139f0:	beq	13a00 <__assert_fail@plt+0x2464>
   139f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   139f8:	cmp	r3, #89	; 0x59
   139fc:	bne	13a1c <__assert_fail@plt+0x2480>
   13a00:	mov	r3, #1
   13a04:	b	13a20 <__assert_fail@plt+0x2484>
   13a08:	ldr	r3, [pc, #28]	; 13a2c <__assert_fail@plt+0x2490>
   13a0c:	ldr	r3, [r3]
   13a10:	mov	r1, r3
   13a14:	mov	r0, #10
   13a18:	bl	11518 <putc@plt>
   13a1c:	mov	r3, #0
   13a20:	mov	r0, r3
   13a24:	sub	sp, fp, #12
   13a28:	pop	{r4, r5, fp, pc}
   13a2c:	ldrdeq	r1, [r3], -r8
   13a30:	andeq	lr, r1, r8, asr #23
   13a34:	andeq	pc, r1, r4, asr #3
   13a38:	andeq	r1, r3, r0, lsl #4
   13a3c:	andeq	pc, r1, r8, asr #3
   13a40:	ldrdeq	pc, [r1], -r0
   13a44:	andeq	r1, r3, ip, lsl #5
   13a48:	andeq	pc, r1, ip, ror #3
   13a4c:	strdeq	pc, [r1], -r8
   13a50:	andeq	pc, r1, ip, lsl r2	; <UNPREDICTABLE>
   13a54:	andeq	pc, r1, r4, lsr #4
   13a58:	push	{r4, fp, lr}
   13a5c:	add	fp, sp, #8
   13a60:	sub	sp, sp, #36	; 0x24
   13a64:	str	r0, [fp, #-40]	; 0xffffffd8
   13a68:	sub	r0, fp, #32
   13a6c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13a70:	ldr	r2, [pc, #144]	; 13b08 <__assert_fail@plt+0x256c>
   13a74:	mov	r1, #19
   13a78:	bl	11428 <snprintf@plt>
   13a7c:	mov	r3, r0
   13a80:	cmp	r3, #19
   13a84:	bls	13a9c <__assert_fail@plt+0x2500>
   13a88:	ldr	r3, [pc, #124]	; 13b0c <__assert_fail@plt+0x2570>
   13a8c:	ldr	r2, [pc, #124]	; 13b10 <__assert_fail@plt+0x2574>
   13a90:	ldr	r1, [pc, #124]	; 13b14 <__assert_fail@plt+0x2578>
   13a94:	ldr	r0, [pc, #124]	; 13b18 <__assert_fail@plt+0x257c>
   13a98:	bl	1159c <__assert_fail@plt>
   13a9c:	ldr	r3, [pc, #120]	; 13b1c <__assert_fail@plt+0x2580>
   13aa0:	ldr	r3, [r3]
   13aa4:	cmp	r3, #0
   13aa8:	beq	13afc <__assert_fail@plt+0x2560>
   13aac:	ldr	r3, [pc, #104]	; 13b1c <__assert_fail@plt+0x2580>
   13ab0:	ldr	r3, [r3]
   13ab4:	sub	r1, fp, #32
   13ab8:	mov	r2, #1
   13abc:	mov	r0, r3
   13ac0:	bl	11404 <setenv@plt>
   13ac4:	mov	r3, r0
   13ac8:	cmp	r3, #0
   13acc:	bge	13afc <__assert_fail@plt+0x2560>
   13ad0:	bl	1141c <__errno_location@plt>
   13ad4:	mov	r3, r0
   13ad8:	ldr	r4, [r3]
   13adc:	ldr	r0, [pc, #60]	; 13b20 <__assert_fail@plt+0x2584>
   13ae0:	bl	113d4 <gettext@plt>
   13ae4:	mov	r2, r0
   13ae8:	ldr	r3, [pc, #44]	; 13b1c <__assert_fail@plt+0x2580>
   13aec:	ldr	r3, [r3]
   13af0:	mov	r1, r4
   13af4:	mov	r0, #0
   13af8:	bl	11344 <error@plt>
   13afc:	nop			; (mov r0, r0)
   13b00:	sub	sp, fp, #8
   13b04:	pop	{r4, fp, pc}
   13b08:	andeq	pc, r1, r0, asr #4
   13b0c:	andeq	r0, r2, r0, lsr #1
   13b10:	andeq	r0, r0, r6, lsr #9
   13b14:	andeq	lr, r1, ip, lsr r9
   13b18:	andeq	pc, r1, r4, asr #4
   13b1c:	andeq	r1, r3, r4, lsl #5
   13b20:	andeq	pc, r1, r0, lsl #5
   13b24:	push	{r4, fp, lr}
   13b28:	add	fp, sp, #8
   13b2c:	sub	sp, sp, #20
   13b30:	bl	16608 <__assert_fail@plt+0x506c>
   13b34:	mov	r3, r0
   13b38:	cmp	r3, #0
   13b3c:	beq	13b44 <__assert_fail@plt+0x25a8>
   13b40:	bl	1663c <__assert_fail@plt+0x50a0>
   13b44:	mov	r0, #0
   13b48:	bl	140e8 <__assert_fail@plt+0x2b4c>
   13b4c:	str	r0, [fp, #-16]
   13b50:	ldr	r0, [fp, #-16]
   13b54:	bl	13a58 <__assert_fail@plt+0x24bc>
   13b58:	ldr	r3, [pc, #300]	; 13c8c <__assert_fail@plt+0x26f0>
   13b5c:	ldr	r3, [r3]
   13b60:	cmp	r3, #0
   13b64:	beq	13b78 <__assert_fail@plt+0x25dc>
   13b68:	ldr	r3, [pc, #288]	; 13c90 <__assert_fail@plt+0x26f4>
   13b6c:	ldrb	r3, [r3]
   13b70:	cmp	r3, #0
   13b74:	beq	13c80 <__assert_fail@plt+0x26e4>
   13b78:	ldr	r3, [pc, #272]	; 13c90 <__assert_fail@plt+0x26f4>
   13b7c:	ldrb	r3, [r3]
   13b80:	cmp	r3, #0
   13b84:	beq	13b90 <__assert_fail@plt+0x25f4>
   13b88:	ldr	r3, [pc, #260]	; 13c94 <__assert_fail@plt+0x26f8>
   13b8c:	b	13b94 <__assert_fail@plt+0x25f8>
   13b90:	ldr	r3, [pc, #256]	; 13c98 <__assert_fail@plt+0x26fc>
   13b94:	str	r3, [fp, #-20]	; 0xffffffec
   13b98:	mov	r0, #0
   13b9c:	bl	11584 <close@plt>
   13ba0:	mov	r1, #0
   13ba4:	ldr	r0, [fp, #-20]	; 0xffffffec
   13ba8:	bl	17078 <__assert_fail@plt+0x5adc>
   13bac:	str	r0, [fp, #-24]	; 0xffffffe8
   13bb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13bb4:	cmp	r3, #0
   13bb8:	bge	13c2c <__assert_fail@plt+0x2690>
   13bbc:	ldr	r3, [pc, #204]	; 13c90 <__assert_fail@plt+0x26f4>
   13bc0:	ldrb	r3, [r3]
   13bc4:	cmp	r3, #0
   13bc8:	beq	13bfc <__assert_fail@plt+0x2660>
   13bcc:	bl	1141c <__errno_location@plt>
   13bd0:	mov	r3, r0
   13bd4:	ldr	r4, [r3]
   13bd8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bdc:	mov	r1, #8
   13be0:	mov	r0, #0
   13be4:	bl	1a898 <__assert_fail@plt+0x92fc>
   13be8:	mov	r3, r0
   13bec:	ldr	r2, [pc, #168]	; 13c9c <__assert_fail@plt+0x2700>
   13bf0:	mov	r1, r4
   13bf4:	mov	r0, #1
   13bf8:	bl	11344 <error@plt>
   13bfc:	bl	1141c <__errno_location@plt>
   13c00:	mov	r3, r0
   13c04:	ldr	r4, [r3]
   13c08:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c0c:	mov	r1, #8
   13c10:	mov	r0, #0
   13c14:	bl	1a898 <__assert_fail@plt+0x92fc>
   13c18:	mov	r3, r0
   13c1c:	ldr	r2, [pc, #120]	; 13c9c <__assert_fail@plt+0x2700>
   13c20:	mov	r1, r4
   13c24:	mov	r0, #0
   13c28:	bl	11344 <error@plt>
   13c2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c30:	cmp	r3, #0
   13c34:	ble	13c80 <__assert_fail@plt+0x26e4>
   13c38:	mov	r1, #0
   13c3c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13c40:	bl	11290 <dup2@plt>
   13c44:	mov	r3, r0
   13c48:	cmp	r3, #0
   13c4c:	beq	13c78 <__assert_fail@plt+0x26dc>
   13c50:	bl	1141c <__errno_location@plt>
   13c54:	mov	r3, r0
   13c58:	ldr	r4, [r3]
   13c5c:	ldr	r0, [pc, #60]	; 13ca0 <__assert_fail@plt+0x2704>
   13c60:	bl	113d4 <gettext@plt>
   13c64:	mov	r3, r0
   13c68:	mov	r2, r3
   13c6c:	mov	r1, r4
   13c70:	mov	r0, #1
   13c74:	bl	11344 <error@plt>
   13c78:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13c7c:	bl	11584 <close@plt>
   13c80:	nop			; (mov r0, r0)
   13c84:	sub	sp, fp, #8
   13c88:	pop	{r4, fp, pc}
   13c8c:	strdeq	r1, [r3], -r8
   13c90:	andeq	r1, r3, r0, lsl #5
   13c94:	andeq	pc, r1, ip, ror #3
   13c98:	andeq	pc, r1, r8, lsr #5
   13c9c:			; <UNDEFINED> instruction: 0x0001f2b4
   13ca0:			; <UNDEFINED> instruction: 0x0001f2b8
   13ca4:	push	{r4, fp, lr}
   13ca8:	add	fp, sp, #8
   13cac:	sub	sp, sp, #44	; 0x2c
   13cb0:	str	r0, [fp, #-40]	; 0xffffffd8
   13cb4:	str	r1, [fp, #-44]	; 0xffffffd4
   13cb8:	str	r2, [fp, #-48]	; 0xffffffd0
   13cbc:	str	r3, [fp, #-52]	; 0xffffffcc
   13cc0:	ldr	r3, [pc, #900]	; 1404c <__assert_fail@plt+0x2ab0>
   13cc4:	ldr	r3, [r3]
   13cc8:	cmp	r3, #0
   13ccc:	beq	13cf8 <__assert_fail@plt+0x275c>
   13cd0:	b	13ce0 <__assert_fail@plt+0x2744>
   13cd4:	mov	r1, #1
   13cd8:	mov	r0, #0
   13cdc:	bl	14264 <__assert_fail@plt+0x2cc8>
   13ce0:	ldr	r3, [pc, #872]	; 14050 <__assert_fail@plt+0x2ab4>
   13ce4:	ldr	r3, [r3]
   13ce8:	ldr	r2, [pc, #860]	; 1404c <__assert_fail@plt+0x2ab0>
   13cec:	ldr	r2, [r2]
   13cf0:	cmp	r3, r2
   13cf4:	bcs	13cd4 <__assert_fail@plt+0x2738>
   13cf8:	ldr	r3, [pc, #852]	; 14054 <__assert_fail@plt+0x2ab8>
   13cfc:	ldrb	r3, [r3]
   13d00:	eor	r3, r3, #1
   13d04:	uxtb	r3, r3
   13d08:	cmp	r3, #0
   13d0c:	bne	13d24 <__assert_fail@plt+0x2788>
   13d10:	mov	r0, #1
   13d14:	bl	137d0 <__assert_fail@plt+0x2234>
   13d18:	mov	r3, r0
   13d1c:	cmp	r3, #0
   13d20:	beq	1403c <__assert_fail@plt+0x2aa0>
   13d24:	ldr	r3, [pc, #808]	; 14054 <__assert_fail@plt+0x2ab8>
   13d28:	ldrb	r3, [r3]
   13d2c:	eor	r3, r3, #1
   13d30:	uxtb	r3, r3
   13d34:	cmp	r3, #0
   13d38:	beq	13d54 <__assert_fail@plt+0x27b8>
   13d3c:	ldr	r3, [pc, #788]	; 14058 <__assert_fail@plt+0x2abc>
   13d40:	ldrb	r3, [r3]
   13d44:	cmp	r3, #0
   13d48:	beq	13d54 <__assert_fail@plt+0x27b8>
   13d4c:	mov	r0, #0
   13d50:	bl	137d0 <__assert_fail@plt+0x2234>
   13d54:	mov	r1, #0
   13d58:	mov	r0, #0
   13d5c:	bl	14264 <__assert_fail@plt+0x2cc8>
   13d60:	sub	r3, fp, #28
   13d64:	mov	r0, r3
   13d68:	bl	1aec8 <__assert_fail@plt+0x992c>
   13d6c:	mov	r3, r0
   13d70:	cmp	r3, #0
   13d74:	beq	13da0 <__assert_fail@plt+0x2804>
   13d78:	bl	1141c <__errno_location@plt>
   13d7c:	mov	r3, r0
   13d80:	ldr	r4, [r3]
   13d84:	ldr	r0, [pc, #720]	; 1405c <__assert_fail@plt+0x2ac0>
   13d88:	bl	113d4 <gettext@plt>
   13d8c:	mov	r3, r0
   13d90:	mov	r2, r3
   13d94:	mov	r1, r4
   13d98:	mov	r0, #1
   13d9c:	bl	11344 <error@plt>
   13da0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13da4:	mov	r2, #1
   13da8:	mov	r1, #2
   13dac:	mov	r0, r3
   13db0:	bl	1cadc <__assert_fail@plt+0xb540>
   13db4:	b	13dc4 <__assert_fail@plt+0x2828>
   13db8:	mov	r1, #1
   13dbc:	mov	r0, #0
   13dc0:	bl	14264 <__assert_fail@plt+0x2cc8>
   13dc4:	bl	114d0 <fork@plt>
   13dc8:	mov	r3, r0
   13dcc:	str	r3, [fp, #-16]
   13dd0:	ldr	r3, [fp, #-16]
   13dd4:	cmp	r3, #0
   13dd8:	bge	13e00 <__assert_fail@plt+0x2864>
   13ddc:	bl	1141c <__errno_location@plt>
   13de0:	mov	r3, r0
   13de4:	ldr	r3, [r3]
   13de8:	cmp	r3, #11
   13dec:	bne	13e00 <__assert_fail@plt+0x2864>
   13df0:	ldr	r3, [pc, #600]	; 14050 <__assert_fail@plt+0x2ab4>
   13df4:	ldr	r3, [r3]
   13df8:	cmp	r3, #0
   13dfc:	bne	13db8 <__assert_fail@plt+0x281c>
   13e00:	ldr	r3, [fp, #-16]
   13e04:	cmn	r3, #1
   13e08:	beq	13e18 <__assert_fail@plt+0x287c>
   13e0c:	cmp	r3, #0
   13e10:	beq	13e40 <__assert_fail@plt+0x28a4>
   13e14:	b	13f30 <__assert_fail@plt+0x2994>
   13e18:	bl	1141c <__errno_location@plt>
   13e1c:	mov	r3, r0
   13e20:	ldr	r4, [r3]
   13e24:	ldr	r0, [pc, #564]	; 14060 <__assert_fail@plt+0x2ac4>
   13e28:	bl	113d4 <gettext@plt>
   13e2c:	mov	r3, r0
   13e30:	mov	r2, r3
   13e34:	mov	r1, r4
   13e38:	mov	r0, #1
   13e3c:	bl	11344 <error@plt>
   13e40:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13e44:	mov	r0, r3
   13e48:	bl	11584 <close@plt>
   13e4c:	ldr	r3, [pc, #528]	; 14064 <__assert_fail@plt+0x2ac8>
   13e50:	mov	r2, #0
   13e54:	str	r2, [r3]
   13e58:	bl	13b24 <__assert_fail@plt+0x2588>
   13e5c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13e60:	bl	15d08 <__assert_fail@plt+0x476c>
   13e64:	mov	r3, r0
   13e68:	cmp	r3, #0
   13e6c:	beq	13e84 <__assert_fail@plt+0x28e8>
   13e70:	bl	1141c <__errno_location@plt>
   13e74:	mov	r2, r0
   13e78:	mov	r3, #7
   13e7c:	str	r3, [r2]
   13e80:	b	13e98 <__assert_fail@plt+0x28fc>
   13e84:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13e88:	ldr	r3, [r3]
   13e8c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13e90:	mov	r0, r3
   13e94:	bl	11254 <execvp@plt>
   13e98:	bl	1141c <__errno_location@plt>
   13e9c:	mov	r3, r0
   13ea0:	ldr	r3, [r3]
   13ea4:	cmp	r3, #0
   13ea8:	beq	13ec8 <__assert_fail@plt+0x292c>
   13eac:	ldr	r4, [fp, #-24]	; 0xffffffe8
   13eb0:	bl	1141c <__errno_location@plt>
   13eb4:	mov	r3, r0
   13eb8:	mov	r2, #4
   13ebc:	mov	r1, r3
   13ec0:	mov	r0, r4
   13ec4:	bl	11458 <write@plt>
   13ec8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ecc:	mov	r0, r3
   13ed0:	bl	11584 <close@plt>
   13ed4:	bl	1141c <__errno_location@plt>
   13ed8:	mov	r3, r0
   13edc:	ldr	r3, [r3]
   13ee0:	cmp	r3, #7
   13ee4:	beq	13f08 <__assert_fail@plt+0x296c>
   13ee8:	bl	1141c <__errno_location@plt>
   13eec:	mov	r3, r0
   13ef0:	ldr	r1, [r3]
   13ef4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13ef8:	ldr	r3, [r3]
   13efc:	ldr	r2, [pc, #356]	; 14068 <__assert_fail@plt+0x2acc>
   13f00:	mov	r0, #0
   13f04:	bl	11344 <error@plt>
   13f08:	bl	1141c <__errno_location@plt>
   13f0c:	mov	r3, r0
   13f10:	ldr	r3, [r3]
   13f14:	cmp	r3, #2
   13f18:	bne	13f24 <__assert_fail@plt+0x2988>
   13f1c:	mov	r3, #127	; 0x7f
   13f20:	b	13f28 <__assert_fail@plt+0x298c>
   13f24:	mov	r3, #126	; 0x7e
   13f28:	mov	r0, r3
   13f2c:	bl	1123c <_exit@plt>
   13f30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13f34:	mov	r0, r3
   13f38:	bl	11584 <close@plt>
   13f3c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13f40:	sub	r1, fp, #32
   13f44:	mov	r2, #4
   13f48:	mov	r0, r3
   13f4c:	bl	1ad58 <__assert_fail@plt+0x97bc>
   13f50:	str	r0, [fp, #-20]	; 0xffffffec
   13f54:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f58:	cmp	r3, #4
   13f5c:	beq	13fac <__assert_fail@plt+0x2a10>
   13f60:	cmn	r3, #1
   13f64:	beq	13f74 <__assert_fail@plt+0x29d8>
   13f68:	cmp	r3, #0
   13f6c:	beq	13ffc <__assert_fail@plt+0x2a60>
   13f70:	b	14008 <__assert_fail@plt+0x2a6c>
   13f74:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13f78:	mov	r0, r3
   13f7c:	bl	11584 <close@plt>
   13f80:	bl	1141c <__errno_location@plt>
   13f84:	mov	r3, r0
   13f88:	ldr	r4, [r3]
   13f8c:	ldr	r0, [pc, #216]	; 1406c <__assert_fail@plt+0x2ad0>
   13f90:	bl	113d4 <gettext@plt>
   13f94:	mov	r3, r0
   13f98:	mov	r2, r3
   13f9c:	mov	r1, r4
   13fa0:	mov	r0, #0
   13fa4:	bl	11344 <error@plt>
   13fa8:	b	14030 <__assert_fail@plt+0x2a94>
   13fac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13fb0:	mov	r0, r3
   13fb4:	bl	11584 <close@plt>
   13fb8:	sub	r3, fp, #36	; 0x24
   13fbc:	mov	r2, #0
   13fc0:	mov	r1, r3
   13fc4:	ldr	r0, [fp, #-16]
   13fc8:	bl	11308 <waitpid@plt>
   13fcc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13fd0:	cmp	r3, #7
   13fd4:	bne	13fe0 <__assert_fail@plt+0x2a44>
   13fd8:	mov	r3, #0
   13fdc:	b	14040 <__assert_fail@plt+0x2aa4>
   13fe0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   13fe4:	cmp	r3, #2
   13fe8:	bne	13ff4 <__assert_fail@plt+0x2a58>
   13fec:	mov	r0, #127	; 0x7f
   13ff0:	bl	113c8 <exit@plt>
   13ff4:	mov	r0, #126	; 0x7e
   13ff8:	bl	113c8 <exit@plt>
   13ffc:	ldr	r0, [fp, #-16]
   14000:	bl	140e8 <__assert_fail@plt+0x2b4c>
   14004:	b	14030 <__assert_fail@plt+0x2a94>
   14008:	bl	1141c <__errno_location@plt>
   1400c:	mov	r3, r0
   14010:	ldr	r4, [r3]
   14014:	ldr	r0, [pc, #84]	; 14070 <__assert_fail@plt+0x2ad4>
   14018:	bl	113d4 <gettext@plt>
   1401c:	mov	r2, r0
   14020:	ldr	r3, [fp, #-20]	; 0xffffffec
   14024:	mov	r1, r4
   14028:	mov	r0, #1
   1402c:	bl	11344 <error@plt>
   14030:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14034:	mov	r0, r3
   14038:	bl	11584 <close@plt>
   1403c:	mov	r3, #1
   14040:	mov	r0, r3
   14044:	sub	sp, fp, #8
   14048:	pop	{r4, fp, pc}
   1404c:	andeq	r1, r3, ip, ror #2
   14050:	andeq	r1, r3, r4, ror #4
   14054:	andeq	r1, r3, r2, lsl #5
   14058:	andeq	r1, r3, r1, lsl #5
   1405c:	strdeq	pc, [r1], -r0
   14060:	andeq	pc, r1, r4, lsl r3	; <UNPREDICTABLE>
   14064:	andeq	r1, r3, r8, ror r2
   14068:			; <UNDEFINED> instruction: 0x0001f2b4
   1406c:	andeq	pc, r1, r0, lsr #6
   14070:	andeq	pc, r1, ip, ror r3	; <UNPREDICTABLE>
   14074:	push	{fp, lr}
   14078:	add	fp, sp, #4
   1407c:	ldr	r3, [pc, #88]	; 140dc <__assert_fail@plt+0x2b40>
   14080:	ldr	r3, [r3, #24]
   14084:	cmp	r3, #0
   14088:	bne	140d4 <__assert_fail@plt+0x2b38>
   1408c:	ldr	r3, [pc, #76]	; 140e0 <__assert_fail@plt+0x2b44>
   14090:	ldrb	r3, [r3]
   14094:	cmp	r3, #0
   14098:	bne	140d4 <__assert_fail@plt+0x2b38>
   1409c:	ldr	r3, [pc, #64]	; 140e4 <__assert_fail@plt+0x2b48>
   140a0:	ldr	r2, [r3]
   140a4:	ldr	r3, [pc, #48]	; 140dc <__assert_fail@plt+0x2b40>
   140a8:	ldr	r3, [r3, #28]
   140ac:	cmp	r2, r3
   140b0:	beq	140d4 <__assert_fail@plt+0x2b38>
   140b4:	ldr	r3, [pc, #32]	; 140dc <__assert_fail@plt+0x2b40>
   140b8:	ldr	r3, [r3]
   140bc:	cmp	r3, #0
   140c0:	bne	140d4 <__assert_fail@plt+0x2b38>
   140c4:	ldr	r1, [pc, #24]	; 140e4 <__assert_fail@plt+0x2b48>
   140c8:	ldr	r0, [pc, #12]	; 140dc <__assert_fail@plt+0x2b40>
   140cc:	bl	15250 <__assert_fail@plt+0x3cb4>
   140d0:	b	140d8 <__assert_fail@plt+0x2b3c>
   140d4:	nop			; (mov r0, r0)
   140d8:	pop	{fp, pc}
   140dc:	andeq	r1, r3, ip, lsr #4
   140e0:	andeq	r1, r3, r8, ror #2
   140e4:	andeq	r1, r3, r0, lsl #4
   140e8:	push	{fp, lr}
   140ec:	add	fp, sp, #4
   140f0:	sub	sp, sp, #16
   140f4:	str	r0, [fp, #-16]
   140f8:	mov	r3, #0
   140fc:	str	r3, [fp, #-8]
   14100:	b	14110 <__assert_fail@plt+0x2b74>
   14104:	ldr	r3, [fp, #-8]
   14108:	add	r3, r3, #1
   1410c:	str	r3, [fp, #-8]
   14110:	ldr	r3, [pc, #300]	; 14244 <__assert_fail@plt+0x2ca8>
   14114:	ldr	r3, [r3]
   14118:	ldr	r2, [fp, #-8]
   1411c:	cmp	r2, r3
   14120:	bcs	14144 <__assert_fail@plt+0x2ba8>
   14124:	ldr	r3, [pc, #284]	; 14248 <__assert_fail@plt+0x2cac>
   14128:	ldr	r2, [r3]
   1412c:	ldr	r3, [fp, #-8]
   14130:	lsl	r3, r3, #2
   14134:	add	r3, r2, r3
   14138:	ldr	r3, [r3]
   1413c:	cmp	r3, #0
   14140:	bne	14104 <__assert_fail@plt+0x2b68>
   14144:	ldr	r3, [pc, #248]	; 14244 <__assert_fail@plt+0x2ca8>
   14148:	ldr	r3, [r3]
   1414c:	ldr	r2, [fp, #-8]
   14150:	cmp	r2, r3
   14154:	bne	141c4 <__assert_fail@plt+0x2c28>
   14158:	ldr	r3, [pc, #232]	; 14248 <__assert_fail@plt+0x2cac>
   1415c:	ldr	r3, [r3]
   14160:	mov	r2, #4
   14164:	ldr	r1, [pc, #216]	; 14244 <__assert_fail@plt+0x2ca8>
   14168:	mov	r0, r3
   1416c:	bl	1ba24 <__assert_fail@plt+0xa488>
   14170:	mov	r2, r0
   14174:	ldr	r3, [pc, #204]	; 14248 <__assert_fail@plt+0x2cac>
   14178:	str	r2, [r3]
   1417c:	ldr	r3, [fp, #-8]
   14180:	str	r3, [fp, #-12]
   14184:	b	141b0 <__assert_fail@plt+0x2c14>
   14188:	ldr	r3, [pc, #184]	; 14248 <__assert_fail@plt+0x2cac>
   1418c:	ldr	r2, [r3]
   14190:	ldr	r3, [fp, #-12]
   14194:	lsl	r3, r3, #2
   14198:	add	r3, r2, r3
   1419c:	mov	r2, #0
   141a0:	str	r2, [r3]
   141a4:	ldr	r3, [fp, #-12]
   141a8:	add	r3, r3, #1
   141ac:	str	r3, [fp, #-12]
   141b0:	ldr	r3, [pc, #140]	; 14244 <__assert_fail@plt+0x2ca8>
   141b4:	ldr	r3, [r3]
   141b8:	ldr	r2, [fp, #-12]
   141bc:	cmp	r2, r3
   141c0:	bcc	14188 <__assert_fail@plt+0x2bec>
   141c4:	ldr	r3, [pc, #124]	; 14248 <__assert_fail@plt+0x2cac>
   141c8:	ldr	r2, [r3]
   141cc:	ldr	r3, [fp, #-8]
   141d0:	lsl	r3, r3, #2
   141d4:	add	r3, r2, r3
   141d8:	ldr	r3, [r3]
   141dc:	cmp	r3, #0
   141e0:	beq	141f8 <__assert_fail@plt+0x2c5c>
   141e4:	ldr	r3, [pc, #96]	; 1424c <__assert_fail@plt+0x2cb0>
   141e8:	ldr	r2, [pc, #96]	; 14250 <__assert_fail@plt+0x2cb4>
   141ec:	ldr	r1, [pc, #96]	; 14254 <__assert_fail@plt+0x2cb8>
   141f0:	ldr	r0, [pc, #96]	; 14258 <__assert_fail@plt+0x2cbc>
   141f4:	bl	1159c <__assert_fail@plt>
   141f8:	ldr	r3, [pc, #72]	; 14248 <__assert_fail@plt+0x2cac>
   141fc:	ldr	r2, [r3]
   14200:	ldr	r3, [fp, #-8]
   14204:	lsl	r3, r3, #2
   14208:	add	r3, r2, r3
   1420c:	ldr	r2, [fp, #-16]
   14210:	str	r2, [r3]
   14214:	ldr	r3, [pc, #64]	; 1425c <__assert_fail@plt+0x2cc0>
   14218:	ldr	r3, [r3]
   1421c:	add	r3, r3, #1
   14220:	ldr	r2, [pc, #52]	; 1425c <__assert_fail@plt+0x2cc0>
   14224:	str	r3, [r2]
   14228:	ldr	r3, [pc, #48]	; 14260 <__assert_fail@plt+0x2cc4>
   1422c:	mov	r2, #1
   14230:	strb	r2, [r3]
   14234:	ldr	r3, [fp, #-8]
   14238:	mov	r0, r3
   1423c:	sub	sp, fp, #4
   14240:	pop	{fp, pc}
   14244:	andeq	r1, r3, ip, ror #4
   14248:	andeq	r1, r3, r8, ror #4
   1424c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   14250:	andeq	r0, r0, r5, asr #11
   14254:	andeq	lr, r1, ip, lsr r9
   14258:	andeq	pc, r1, ip, asr #7
   1425c:	andeq	r1, r3, r4, ror #4
   14260:	andeq	r1, r3, r0, ror #4
   14264:	push	{r4, fp, lr}
   14268:	add	fp, sp, #8
   1426c:	sub	sp, sp, #44	; 0x2c
   14270:	mov	r3, r0
   14274:	str	r1, [fp, #-44]	; 0xffffffd4
   14278:	strb	r3, [fp, #-37]	; 0xffffffdb
   1427c:	mov	r3, #0
   14280:	str	r3, [fp, #-16]
   14284:	b	14558 <__assert_fail@plt+0x2fbc>
   14288:	mov	r3, #0
   1428c:	str	r3, [fp, #-24]	; 0xffffffe8
   14290:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   14294:	eor	r3, r3, #1
   14298:	uxtb	r3, r3
   1429c:	cmp	r3, #0
   142a0:	beq	142bc <__assert_fail@plt+0x2d20>
   142a4:	ldr	r2, [fp, #-16]
   142a8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   142ac:	cmp	r2, r3
   142b0:	bcc	142bc <__assert_fail@plt+0x2d20>
   142b4:	mov	r3, #1
   142b8:	str	r3, [fp, #-24]	; 0xffffffe8
   142bc:	ldr	r3, [pc, #696]	; 1457c <__assert_fail@plt+0x2fe0>
   142c0:	mov	r2, #0
   142c4:	str	r2, [r3]
   142c8:	b	14334 <__assert_fail@plt+0x2d98>
   142cc:	bl	1141c <__errno_location@plt>
   142d0:	mov	r3, r0
   142d4:	ldr	r3, [r3]
   142d8:	cmp	r3, #4
   142dc:	beq	14308 <__assert_fail@plt+0x2d6c>
   142e0:	bl	1141c <__errno_location@plt>
   142e4:	mov	r3, r0
   142e8:	ldr	r4, [r3]
   142ec:	ldr	r0, [pc, #652]	; 14580 <__assert_fail@plt+0x2fe4>
   142f0:	bl	113d4 <gettext@plt>
   142f4:	mov	r3, r0
   142f8:	mov	r2, r3
   142fc:	mov	r1, r4
   14300:	mov	r0, #1
   14304:	bl	11344 <error@plt>
   14308:	ldr	r3, [pc, #620]	; 1457c <__assert_fail@plt+0x2fe0>
   1430c:	ldr	r3, [r3]
   14310:	cmp	r3, #0
   14314:	beq	14334 <__assert_fail@plt+0x2d98>
   14318:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1431c:	eor	r3, r3, #1
   14320:	uxtb	r3, r3
   14324:	cmp	r3, #0
   14328:	beq	14334 <__assert_fail@plt+0x2d98>
   1432c:	mov	r3, #1
   14330:	str	r3, [fp, #-24]	; 0xffffffe8
   14334:	sub	r3, fp, #32
   14338:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1433c:	mov	r1, r3
   14340:	mvn	r0, #0
   14344:	bl	11308 <waitpid@plt>
   14348:	str	r0, [fp, #-28]	; 0xffffffe4
   1434c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14350:	cmn	r3, #1
   14354:	beq	142cc <__assert_fail@plt+0x2d30>
   14358:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1435c:	cmp	r3, #0
   14360:	beq	143b4 <__assert_fail@plt+0x2e18>
   14364:	mov	r3, #0
   14368:	str	r3, [fp, #-20]	; 0xffffffec
   1436c:	b	1437c <__assert_fail@plt+0x2de0>
   14370:	ldr	r3, [fp, #-20]	; 0xffffffec
   14374:	add	r3, r3, #1
   14378:	str	r3, [fp, #-20]	; 0xffffffec
   1437c:	ldr	r3, [pc, #512]	; 14584 <__assert_fail@plt+0x2fe8>
   14380:	ldr	r3, [r3]
   14384:	ldr	r2, [fp, #-20]	; 0xffffffec
   14388:	cmp	r2, r3
   1438c:	bcs	143b4 <__assert_fail@plt+0x2e18>
   14390:	ldr	r3, [pc, #496]	; 14588 <__assert_fail@plt+0x2fec>
   14394:	ldr	r2, [r3]
   14398:	ldr	r3, [fp, #-20]	; 0xffffffec
   1439c:	lsl	r3, r3, #2
   143a0:	add	r3, r2, r3
   143a4:	ldr	r2, [r3]
   143a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   143ac:	cmp	r2, r3
   143b0:	bne	14370 <__assert_fail@plt+0x2dd4>
   143b4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   143b8:	cmp	r3, #0
   143bc:	beq	143d4 <__assert_fail@plt+0x2e38>
   143c0:	ldr	r3, [pc, #444]	; 14584 <__assert_fail@plt+0x2fe8>
   143c4:	ldr	r3, [r3]
   143c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   143cc:	cmp	r2, r3
   143d0:	beq	14334 <__assert_fail@plt+0x2d98>
   143d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   143d8:	cmp	r3, #0
   143dc:	bne	14414 <__assert_fail@plt+0x2e78>
   143e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   143e4:	and	r3, r3, #1
   143e8:	cmp	r3, #0
   143ec:	bne	1456c <__assert_fail@plt+0x2fd0>
   143f0:	ldr	r0, [pc, #404]	; 1458c <__assert_fail@plt+0x2ff0>
   143f4:	bl	113d4 <gettext@plt>
   143f8:	mov	r2, r0
   143fc:	ldr	r3, [pc, #396]	; 14590 <__assert_fail@plt+0x2ff4>
   14400:	ldr	r3, [r3]
   14404:	mov	r1, #0
   14408:	mov	r0, #0
   1440c:	bl	11344 <error@plt>
   14410:	b	14570 <__assert_fail@plt+0x2fd4>
   14414:	ldr	r3, [pc, #364]	; 14588 <__assert_fail@plt+0x2fec>
   14418:	ldr	r2, [r3]
   1441c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14420:	lsl	r3, r3, #2
   14424:	add	r3, r2, r3
   14428:	mov	r2, #0
   1442c:	str	r2, [r3]
   14430:	ldr	r3, [pc, #344]	; 14590 <__assert_fail@plt+0x2ff4>
   14434:	ldr	r3, [r3]
   14438:	sub	r3, r3, #1
   1443c:	ldr	r2, [pc, #332]	; 14590 <__assert_fail@plt+0x2ff4>
   14440:	str	r3, [r2]
   14444:	ldr	r3, [fp, #-16]
   14448:	add	r3, r3, #1
   1444c:	str	r3, [fp, #-16]
   14450:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14454:	asr	r3, r3, #8
   14458:	uxtb	r3, r3
   1445c:	cmp	r3, #255	; 0xff
   14460:	bne	14488 <__assert_fail@plt+0x2eec>
   14464:	ldr	r0, [pc, #296]	; 14594 <__assert_fail@plt+0x2ff8>
   14468:	bl	113d4 <gettext@plt>
   1446c:	mov	r2, r0
   14470:	ldr	r3, [pc, #288]	; 14598 <__assert_fail@plt+0x2ffc>
   14474:	ldr	r3, [r3, #4]
   14478:	ldr	r3, [r3]
   1447c:	mov	r1, #0
   14480:	mov	r0, #124	; 0x7c
   14484:	bl	11344 <error@plt>
   14488:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1448c:	uxtb	r3, r3
   14490:	cmp	r3, #127	; 0x7f
   14494:	bne	144d4 <__assert_fail@plt+0x2f38>
   14498:	ldr	r0, [pc, #252]	; 1459c <__assert_fail@plt+0x3000>
   1449c:	bl	113d4 <gettext@plt>
   144a0:	mov	r1, r0
   144a4:	ldr	r3, [pc, #236]	; 14598 <__assert_fail@plt+0x2ffc>
   144a8:	ldr	r3, [r3, #4]
   144ac:	ldr	r2, [r3]
   144b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   144b4:	asr	r3, r3, #8
   144b8:	uxtb	r3, r3
   144bc:	str	r3, [sp]
   144c0:	mov	r3, r2
   144c4:	mov	r2, r1
   144c8:	mov	r1, #0
   144cc:	mov	r0, #125	; 0x7d
   144d0:	bl	11344 <error@plt>
   144d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   144d8:	uxtb	r3, r3
   144dc:	and	r3, r3, #127	; 0x7f
   144e0:	uxtb	r3, r3
   144e4:	add	r3, r3, #1
   144e8:	uxtb	r3, r3
   144ec:	sxtb	r3, r3
   144f0:	asr	r3, r3, #1
   144f4:	sxtb	r3, r3
   144f8:	cmp	r3, #0
   144fc:	ble	14538 <__assert_fail@plt+0x2f9c>
   14500:	ldr	r0, [pc, #152]	; 145a0 <__assert_fail@plt+0x3004>
   14504:	bl	113d4 <gettext@plt>
   14508:	mov	r1, r0
   1450c:	ldr	r3, [pc, #132]	; 14598 <__assert_fail@plt+0x2ffc>
   14510:	ldr	r3, [r3, #4]
   14514:	ldr	r2, [r3]
   14518:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1451c:	and	r3, r3, #127	; 0x7f
   14520:	str	r3, [sp]
   14524:	mov	r3, r2
   14528:	mov	r2, r1
   1452c:	mov	r1, #0
   14530:	mov	r0, #125	; 0x7d
   14534:	bl	11344 <error@plt>
   14538:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1453c:	asr	r3, r3, #8
   14540:	uxtb	r3, r3
   14544:	cmp	r3, #0
   14548:	beq	14558 <__assert_fail@plt+0x2fbc>
   1454c:	ldr	r3, [pc, #80]	; 145a4 <__assert_fail@plt+0x3008>
   14550:	mov	r2, #123	; 0x7b
   14554:	str	r2, [r3]
   14558:	ldr	r3, [pc, #48]	; 14590 <__assert_fail@plt+0x2ff4>
   1455c:	ldr	r3, [r3]
   14560:	cmp	r3, #0
   14564:	bne	14288 <__assert_fail@plt+0x2cec>
   14568:	b	14570 <__assert_fail@plt+0x2fd4>
   1456c:	nop			; (mov r0, r0)
   14570:	nop			; (mov r0, r0)
   14574:	sub	sp, fp, #8
   14578:	pop	{r4, fp, pc}
   1457c:	andeq	r1, r3, r4, ror r2
   14580:	ldrdeq	pc, [r1], -ip
   14584:	andeq	r1, r3, ip, ror #4
   14588:	andeq	r1, r3, r8, ror #4
   1458c:	strdeq	pc, [r1], -ip
   14590:	andeq	r1, r3, r4, ror #4
   14594:	andeq	pc, r1, r8, lsr #8
   14598:	andeq	r1, r3, r0, lsl #4
   1459c:	andeq	pc, r1, r0, asr r4	; <UNPREDICTABLE>
   145a0:	andeq	pc, r1, ip, ror #8
   145a4:	andeq	r1, r3, r8, ror r2
   145a8:	push	{fp, lr}
   145ac:	add	fp, sp, #4
   145b0:	bl	113bc <getpid@plt>
   145b4:	mov	r2, r0
   145b8:	ldr	r3, [pc, #128]	; 14640 <__assert_fail@plt+0x30a4>
   145bc:	ldr	r3, [r3]
   145c0:	cmp	r2, r3
   145c4:	beq	145dc <__assert_fail@plt+0x3040>
   145c8:	ldr	r3, [pc, #116]	; 14644 <__assert_fail@plt+0x30a8>
   145cc:	ldr	r2, [pc, #116]	; 14648 <__assert_fail@plt+0x30ac>
   145d0:	ldr	r1, [pc, #116]	; 1464c <__assert_fail@plt+0x30b0>
   145d4:	ldr	r0, [pc, #116]	; 14650 <__assert_fail@plt+0x30b4>
   145d8:	bl	1159c <__assert_fail@plt>
   145dc:	ldr	r3, [pc, #112]	; 14654 <__assert_fail@plt+0x30b8>
   145e0:	ldrb	r3, [r3]
   145e4:	cmp	r3, #0
   145e8:	bne	14638 <__assert_fail@plt+0x309c>
   145ec:	ldr	r3, [pc, #96]	; 14654 <__assert_fail@plt+0x30b8>
   145f0:	mov	r2, #1
   145f4:	strb	r2, [r3]
   145f8:	mov	r1, #0
   145fc:	mov	r0, #1
   14600:	bl	14264 <__assert_fail@plt+0x2cc8>
   14604:	ldr	r3, [pc, #72]	; 14654 <__assert_fail@plt+0x30b8>
   14608:	mov	r2, #0
   1460c:	strb	r2, [r3]
   14610:	ldr	r3, [pc, #64]	; 14658 <__assert_fail@plt+0x30bc>
   14614:	ldr	r2, [r3]
   14618:	ldr	r3, [pc, #60]	; 1465c <__assert_fail@plt+0x30c0>
   1461c:	ldr	r3, [r3]
   14620:	cmp	r2, r3
   14624:	beq	1463c <__assert_fail@plt+0x30a0>
   14628:	ldr	r3, [pc, #44]	; 1465c <__assert_fail@plt+0x30c0>
   1462c:	ldr	r3, [r3]
   14630:	mov	r0, r3
   14634:	bl	1123c <_exit@plt>
   14638:	nop			; (mov r0, r0)
   1463c:	pop	{fp, pc}
   14640:	andeq	r1, r3, r0, ror r2
   14644:	strheq	r0, [r2], -ip
   14648:	andeq	r0, r0, r5, asr #12
   1464c:	andeq	lr, r1, ip, lsr r9
   14650:	andeq	pc, r1, r8, lsl #9
   14654:	muleq	r3, r0, r2
   14658:	andeq	r1, r3, ip, ror r2
   1465c:	andeq	r1, r3, r8, ror r2
   14660:	push	{fp}		; (str fp, [sp, #-4]!)
   14664:	add	fp, sp, #0
   14668:	sub	sp, sp, #12
   1466c:	str	r0, [fp, #-8]
   14670:	ldr	r3, [pc, #56]	; 146b0 <__assert_fail@plt+0x3114>
   14674:	ldr	r3, [r3]
   14678:	cmn	r3, #-2147483647	; 0x80000001
   1467c:	beq	14694 <__assert_fail@plt+0x30f8>
   14680:	ldr	r3, [pc, #40]	; 146b0 <__assert_fail@plt+0x3114>
   14684:	ldr	r3, [r3]
   14688:	add	r3, r3, #1
   1468c:	ldr	r2, [pc, #28]	; 146b0 <__assert_fail@plt+0x3114>
   14690:	str	r3, [r2]
   14694:	ldr	r3, [pc, #24]	; 146b4 <__assert_fail@plt+0x3118>
   14698:	mov	r2, #1
   1469c:	str	r2, [r3]
   146a0:	nop			; (mov r0, r0)
   146a4:	add	sp, fp, #0
   146a8:	pop	{fp}		; (ldr fp, [sp], #4)
   146ac:	bx	lr
   146b0:	andeq	r1, r3, ip, ror #2
   146b4:	andeq	r1, r3, r4, ror r2
   146b8:	push	{fp}		; (str fp, [sp, #-4]!)
   146bc:	add	fp, sp, #0
   146c0:	sub	sp, sp, #12
   146c4:	str	r0, [fp, #-8]
   146c8:	ldr	r3, [pc, #44]	; 146fc <__assert_fail@plt+0x3160>
   146cc:	ldr	r3, [r3]
   146d0:	cmp	r3, #1
   146d4:	ble	146ec <__assert_fail@plt+0x3150>
   146d8:	ldr	r3, [pc, #28]	; 146fc <__assert_fail@plt+0x3160>
   146dc:	ldr	r3, [r3]
   146e0:	sub	r3, r3, #1
   146e4:	ldr	r2, [pc, #16]	; 146fc <__assert_fail@plt+0x3160>
   146e8:	str	r3, [r2]
   146ec:	nop			; (mov r0, r0)
   146f0:	add	sp, fp, #0
   146f4:	pop	{fp}		; (ldr fp, [sp], #4)
   146f8:	bx	lr
   146fc:	andeq	r1, r3, ip, ror #2
   14700:	push	{r4, fp, lr}
   14704:	add	fp, sp, #8
   14708:	sub	sp, sp, #36	; 0x24
   1470c:	str	r0, [fp, #-24]	; 0xffffffe8
   14710:	str	r1, [fp, #-28]	; 0xffffffe4
   14714:	str	r2, [fp, #-32]	; 0xffffffe0
   14718:	str	r3, [fp, #-36]	; 0xffffffdc
   1471c:	sub	r3, fp, #20
   14720:	mov	r2, #10
   14724:	mov	r1, r3
   14728:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1472c:	bl	111e8 <strtol@plt>
   14730:	str	r0, [fp, #-16]
   14734:	ldr	r2, [fp, #-20]	; 0xffffffec
   14738:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1473c:	cmp	r2, r3
   14740:	beq	14754 <__assert_fail@plt+0x31b8>
   14744:	ldr	r3, [fp, #-20]	; 0xffffffec
   14748:	ldrb	r3, [r3]
   1474c:	cmp	r3, #0
   14750:	beq	1478c <__assert_fail@plt+0x31f0>
   14754:	ldr	r3, [pc, #280]	; 14874 <__assert_fail@plt+0x32d8>
   14758:	ldr	r4, [r3]
   1475c:	ldr	r0, [pc, #276]	; 14878 <__assert_fail@plt+0x32dc>
   14760:	bl	113d4 <gettext@plt>
   14764:	mov	r1, r0
   14768:	ldr	r3, [pc, #268]	; 1487c <__assert_fail@plt+0x32e0>
   1476c:	ldr	r2, [r3]
   14770:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14774:	str	r3, [sp]
   14778:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1477c:	mov	r0, r4
   14780:	bl	11410 <fprintf@plt>
   14784:	mov	r0, #1
   14788:	bl	14888 <__assert_fail@plt+0x32ec>
   1478c:	ldr	r2, [fp, #-16]
   14790:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14794:	cmp	r2, r3
   14798:	bge	147f4 <__assert_fail@plt+0x3258>
   1479c:	ldr	r3, [pc, #208]	; 14874 <__assert_fail@plt+0x32d8>
   147a0:	ldr	r4, [r3]
   147a4:	ldr	r0, [pc, #212]	; 14880 <__assert_fail@plt+0x32e4>
   147a8:	bl	113d4 <gettext@plt>
   147ac:	mov	r1, r0
   147b0:	ldr	r3, [pc, #196]	; 1487c <__assert_fail@plt+0x32e0>
   147b4:	ldr	r2, [r3]
   147b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   147bc:	str	r3, [sp, #4]
   147c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   147c4:	str	r3, [sp]
   147c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147cc:	mov	r0, r4
   147d0:	bl	11410 <fprintf@plt>
   147d4:	ldr	r3, [fp, #4]
   147d8:	cmp	r3, #0
   147dc:	beq	147e8 <__assert_fail@plt+0x324c>
   147e0:	mov	r0, #1
   147e4:	bl	14888 <__assert_fail@plt+0x32ec>
   147e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   147ec:	str	r3, [fp, #-16]
   147f0:	b	14864 <__assert_fail@plt+0x32c8>
   147f4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   147f8:	cmp	r3, #0
   147fc:	blt	14864 <__assert_fail@plt+0x32c8>
   14800:	ldr	r2, [fp, #-16]
   14804:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14808:	cmp	r2, r3
   1480c:	ble	14864 <__assert_fail@plt+0x32c8>
   14810:	ldr	r3, [pc, #92]	; 14874 <__assert_fail@plt+0x32d8>
   14814:	ldr	r4, [r3]
   14818:	ldr	r0, [pc, #100]	; 14884 <__assert_fail@plt+0x32e8>
   1481c:	bl	113d4 <gettext@plt>
   14820:	mov	r1, r0
   14824:	ldr	r3, [pc, #80]	; 1487c <__assert_fail@plt+0x32e0>
   14828:	ldr	r2, [r3]
   1482c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14830:	str	r3, [sp, #4]
   14834:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14838:	str	r3, [sp]
   1483c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14840:	mov	r0, r4
   14844:	bl	11410 <fprintf@plt>
   14848:	ldr	r3, [fp, #4]
   1484c:	cmp	r3, #0
   14850:	beq	1485c <__assert_fail@plt+0x32c0>
   14854:	mov	r0, #1
   14858:	bl	14888 <__assert_fail@plt+0x32ec>
   1485c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14860:	str	r3, [fp, #-16]
   14864:	ldr	r3, [fp, #-16]
   14868:	mov	r0, r3
   1486c:	sub	sp, fp, #8
   14870:	pop	{r4, fp, pc}
   14874:	ldrdeq	r1, [r3], -r8
   14878:	muleq	r1, ip, r4
   1487c:			; <UNDEFINED> instruction: 0x000312b0
   14880:	andeq	pc, r1, r4, asr #9
   14884:	strdeq	pc, [r1], -r4
   14888:	push	{r4, fp, lr}
   1488c:	add	fp, sp, #8
   14890:	sub	sp, sp, #12
   14894:	str	r0, [fp, #-16]
   14898:	ldr	r3, [fp, #-16]
   1489c:	cmp	r3, #0
   148a0:	beq	148d4 <__assert_fail@plt+0x3338>
   148a4:	ldr	r3, [pc, #852]	; 14c00 <__assert_fail@plt+0x3664>
   148a8:	ldr	r4, [r3]
   148ac:	ldr	r0, [pc, #848]	; 14c04 <__assert_fail@plt+0x3668>
   148b0:	bl	113d4 <gettext@plt>
   148b4:	mov	r1, r0
   148b8:	ldr	r3, [pc, #840]	; 14c08 <__assert_fail@plt+0x366c>
   148bc:	ldr	r3, [r3]
   148c0:	mov	r2, r3
   148c4:	mov	r0, r4
   148c8:	bl	11410 <fprintf@plt>
   148cc:	ldr	r0, [fp, #-16]
   148d0:	bl	113c8 <exit@plt>
   148d4:	ldr	r3, [pc, #816]	; 14c0c <__assert_fail@plt+0x3670>
   148d8:	ldr	r4, [r3]
   148dc:	ldr	r0, [pc, #812]	; 14c10 <__assert_fail@plt+0x3674>
   148e0:	bl	113d4 <gettext@plt>
   148e4:	mov	r1, r0
   148e8:	ldr	r3, [pc, #792]	; 14c08 <__assert_fail@plt+0x366c>
   148ec:	ldr	r3, [r3]
   148f0:	mov	r2, r3
   148f4:	mov	r0, r4
   148f8:	bl	11410 <fprintf@plt>
   148fc:	ldr	r0, [pc, #784]	; 14c14 <__assert_fail@plt+0x3678>
   14900:	bl	113d4 <gettext@plt>
   14904:	mov	r2, r0
   14908:	ldr	r3, [pc, #764]	; 14c0c <__assert_fail@plt+0x3670>
   1490c:	ldr	r3, [r3]
   14910:	mov	r1, r3
   14914:	mov	r0, r2
   14918:	bl	11554 <fputs@plt>
   1491c:	ldr	r0, [pc, #756]	; 14c18 <__assert_fail@plt+0x367c>
   14920:	bl	113d4 <gettext@plt>
   14924:	mov	r2, r0
   14928:	ldr	r3, [pc, #732]	; 14c0c <__assert_fail@plt+0x3670>
   1492c:	ldr	r3, [r3]
   14930:	mov	r1, r3
   14934:	mov	r0, r2
   14938:	bl	11554 <fputs@plt>
   1493c:	ldr	r0, [pc, #728]	; 14c1c <__assert_fail@plt+0x3680>
   14940:	bl	113d4 <gettext@plt>
   14944:	mov	r2, r0
   14948:	ldr	r3, [pc, #700]	; 14c0c <__assert_fail@plt+0x3670>
   1494c:	ldr	r3, [r3]
   14950:	mov	r1, r3
   14954:	mov	r0, r2
   14958:	bl	11554 <fputs@plt>
   1495c:	ldr	r0, [pc, #700]	; 14c20 <__assert_fail@plt+0x3684>
   14960:	bl	113d4 <gettext@plt>
   14964:	mov	r2, r0
   14968:	ldr	r3, [pc, #668]	; 14c0c <__assert_fail@plt+0x3670>
   1496c:	ldr	r3, [r3]
   14970:	mov	r1, r3
   14974:	mov	r0, r2
   14978:	bl	11554 <fputs@plt>
   1497c:	ldr	r0, [pc, #672]	; 14c24 <__assert_fail@plt+0x3688>
   14980:	bl	113d4 <gettext@plt>
   14984:	mov	r2, r0
   14988:	ldr	r3, [pc, #636]	; 14c0c <__assert_fail@plt+0x3670>
   1498c:	ldr	r3, [r3]
   14990:	mov	r1, r3
   14994:	mov	r0, r2
   14998:	bl	11554 <fputs@plt>
   1499c:	ldr	r0, [pc, #644]	; 14c28 <__assert_fail@plt+0x368c>
   149a0:	bl	113d4 <gettext@plt>
   149a4:	mov	r2, r0
   149a8:	ldr	r3, [pc, #604]	; 14c0c <__assert_fail@plt+0x3670>
   149ac:	ldr	r3, [r3]
   149b0:	mov	r1, r3
   149b4:	mov	r0, r2
   149b8:	bl	11554 <fputs@plt>
   149bc:	ldr	r0, [pc, #616]	; 14c2c <__assert_fail@plt+0x3690>
   149c0:	bl	113d4 <gettext@plt>
   149c4:	mov	r2, r0
   149c8:	ldr	r3, [pc, #572]	; 14c0c <__assert_fail@plt+0x3670>
   149cc:	ldr	r3, [r3]
   149d0:	mov	r1, r3
   149d4:	mov	r0, r2
   149d8:	bl	11554 <fputs@plt>
   149dc:	ldr	r0, [pc, #588]	; 14c30 <__assert_fail@plt+0x3694>
   149e0:	bl	113d4 <gettext@plt>
   149e4:	mov	r2, r0
   149e8:	ldr	r3, [pc, #540]	; 14c0c <__assert_fail@plt+0x3670>
   149ec:	ldr	r3, [r3]
   149f0:	mov	r1, r3
   149f4:	mov	r0, r2
   149f8:	bl	11554 <fputs@plt>
   149fc:	ldr	r0, [pc, #560]	; 14c34 <__assert_fail@plt+0x3698>
   14a00:	bl	113d4 <gettext@plt>
   14a04:	mov	r2, r0
   14a08:	ldr	r3, [pc, #508]	; 14c0c <__assert_fail@plt+0x3670>
   14a0c:	ldr	r3, [r3]
   14a10:	mov	r1, r3
   14a14:	mov	r0, r2
   14a18:	bl	11554 <fputs@plt>
   14a1c:	ldr	r0, [pc, #532]	; 14c38 <__assert_fail@plt+0x369c>
   14a20:	bl	113d4 <gettext@plt>
   14a24:	mov	r2, r0
   14a28:	ldr	r3, [pc, #476]	; 14c0c <__assert_fail@plt+0x3670>
   14a2c:	ldr	r3, [r3]
   14a30:	mov	r1, r3
   14a34:	mov	r0, r2
   14a38:	bl	11554 <fputs@plt>
   14a3c:	ldr	r0, [pc, #504]	; 14c3c <__assert_fail@plt+0x36a0>
   14a40:	bl	113d4 <gettext@plt>
   14a44:	mov	r2, r0
   14a48:	ldr	r3, [pc, #444]	; 14c0c <__assert_fail@plt+0x3670>
   14a4c:	ldr	r3, [r3]
   14a50:	mov	r1, r3
   14a54:	mov	r0, r2
   14a58:	bl	11554 <fputs@plt>
   14a5c:	ldr	r0, [pc, #476]	; 14c40 <__assert_fail@plt+0x36a4>
   14a60:	bl	113d4 <gettext@plt>
   14a64:	mov	r2, r0
   14a68:	ldr	r3, [pc, #412]	; 14c0c <__assert_fail@plt+0x3670>
   14a6c:	ldr	r3, [r3]
   14a70:	mov	r1, r3
   14a74:	mov	r0, r2
   14a78:	bl	11554 <fputs@plt>
   14a7c:	ldr	r0, [pc, #448]	; 14c44 <__assert_fail@plt+0x36a8>
   14a80:	bl	113d4 <gettext@plt>
   14a84:	mov	r2, r0
   14a88:	ldr	r3, [pc, #380]	; 14c0c <__assert_fail@plt+0x3670>
   14a8c:	ldr	r3, [r3]
   14a90:	mov	r1, r3
   14a94:	mov	r0, r2
   14a98:	bl	11554 <fputs@plt>
   14a9c:	ldr	r0, [pc, #420]	; 14c48 <__assert_fail@plt+0x36ac>
   14aa0:	bl	113d4 <gettext@plt>
   14aa4:	mov	r2, r0
   14aa8:	ldr	r3, [pc, #348]	; 14c0c <__assert_fail@plt+0x3670>
   14aac:	ldr	r3, [r3]
   14ab0:	mov	r1, r3
   14ab4:	mov	r0, r2
   14ab8:	bl	11554 <fputs@plt>
   14abc:	ldr	r0, [pc, #392]	; 14c4c <__assert_fail@plt+0x36b0>
   14ac0:	bl	113d4 <gettext@plt>
   14ac4:	mov	r2, r0
   14ac8:	ldr	r3, [pc, #316]	; 14c0c <__assert_fail@plt+0x3670>
   14acc:	ldr	r3, [r3]
   14ad0:	mov	r1, r3
   14ad4:	mov	r0, r2
   14ad8:	bl	11554 <fputs@plt>
   14adc:	ldr	r0, [pc, #364]	; 14c50 <__assert_fail@plt+0x36b4>
   14ae0:	bl	113d4 <gettext@plt>
   14ae4:	mov	r2, r0
   14ae8:	ldr	r3, [pc, #284]	; 14c0c <__assert_fail@plt+0x3670>
   14aec:	ldr	r3, [r3]
   14af0:	mov	r1, r3
   14af4:	mov	r0, r2
   14af8:	bl	11554 <fputs@plt>
   14afc:	ldr	r0, [pc, #336]	; 14c54 <__assert_fail@plt+0x36b8>
   14b00:	bl	113d4 <gettext@plt>
   14b04:	mov	r2, r0
   14b08:	ldr	r3, [pc, #252]	; 14c0c <__assert_fail@plt+0x3670>
   14b0c:	ldr	r3, [r3]
   14b10:	mov	r1, r3
   14b14:	mov	r0, r2
   14b18:	bl	11554 <fputs@plt>
   14b1c:	ldr	r0, [pc, #308]	; 14c58 <__assert_fail@plt+0x36bc>
   14b20:	bl	113d4 <gettext@plt>
   14b24:	mov	r2, r0
   14b28:	ldr	r3, [pc, #220]	; 14c0c <__assert_fail@plt+0x3670>
   14b2c:	ldr	r3, [r3]
   14b30:	mov	r1, r3
   14b34:	mov	r0, r2
   14b38:	bl	11554 <fputs@plt>
   14b3c:	ldr	r0, [pc, #280]	; 14c5c <__assert_fail@plt+0x36c0>
   14b40:	bl	113d4 <gettext@plt>
   14b44:	mov	r2, r0
   14b48:	ldr	r3, [pc, #188]	; 14c0c <__assert_fail@plt+0x3670>
   14b4c:	ldr	r3, [r3]
   14b50:	mov	r1, r3
   14b54:	mov	r0, r2
   14b58:	bl	11554 <fputs@plt>
   14b5c:	ldr	r0, [pc, #252]	; 14c60 <__assert_fail@plt+0x36c4>
   14b60:	bl	113d4 <gettext@plt>
   14b64:	mov	r2, r0
   14b68:	ldr	r3, [pc, #156]	; 14c0c <__assert_fail@plt+0x3670>
   14b6c:	ldr	r3, [r3]
   14b70:	mov	r1, r3
   14b74:	mov	r0, r2
   14b78:	bl	11554 <fputs@plt>
   14b7c:	ldr	r0, [pc, #224]	; 14c64 <__assert_fail@plt+0x36c8>
   14b80:	bl	113d4 <gettext@plt>
   14b84:	mov	r2, r0
   14b88:	ldr	r3, [pc, #124]	; 14c0c <__assert_fail@plt+0x3670>
   14b8c:	ldr	r3, [r3]
   14b90:	mov	r1, r3
   14b94:	mov	r0, r2
   14b98:	bl	11554 <fputs@plt>
   14b9c:	ldr	r0, [pc, #196]	; 14c68 <__assert_fail@plt+0x36cc>
   14ba0:	bl	113d4 <gettext@plt>
   14ba4:	mov	r2, r0
   14ba8:	ldr	r3, [pc, #92]	; 14c0c <__assert_fail@plt+0x3670>
   14bac:	ldr	r3, [r3]
   14bb0:	mov	r1, r3
   14bb4:	mov	r0, r2
   14bb8:	bl	11554 <fputs@plt>
   14bbc:	ldr	r0, [pc, #168]	; 14c6c <__assert_fail@plt+0x36d0>
   14bc0:	bl	113d4 <gettext@plt>
   14bc4:	mov	r2, r0
   14bc8:	ldr	r3, [pc, #60]	; 14c0c <__assert_fail@plt+0x3670>
   14bcc:	ldr	r3, [r3]
   14bd0:	mov	r1, r3
   14bd4:	mov	r0, r2
   14bd8:	bl	11554 <fputs@plt>
   14bdc:	ldr	r3, [pc, #40]	; 14c0c <__assert_fail@plt+0x3670>
   14be0:	ldr	r2, [r3]
   14be4:	ldr	r3, [pc, #28]	; 14c08 <__assert_fail@plt+0x366c>
   14be8:	ldr	r3, [r3]
   14bec:	mov	r1, r3
   14bf0:	mov	r0, r2
   14bf4:	bl	168fc <__assert_fail@plt+0x5360>
   14bf8:	ldr	r0, [fp, #-16]
   14bfc:	bl	113c8 <exit@plt>
   14c00:	ldrdeq	r1, [r3], -r8
   14c04:	andeq	pc, r1, r4, lsr #10
   14c08:			; <UNDEFINED> instruction: 0x000312b0
   14c0c:	andeq	r1, r3, r4, ror #3
   14c10:	andeq	pc, r1, ip, asr #10
   14c14:	andeq	pc, r1, r0, lsl #11
   14c18:	ldrdeq	pc, [r1], -r0
   14c1c:	andeq	pc, r1, r8, asr #12
   14c20:	andeq	pc, r1, ip, lsl r7	; <UNPREDICTABLE>
   14c24:	andeq	pc, r1, ip, ror #14
   14c28:	andeq	pc, r1, r8, asr r8	; <UNPREDICTABLE>
   14c2c:	andeq	pc, r1, ip, lsr r9	; <UNPREDICTABLE>
   14c30:	ldrdeq	pc, [r1], -r4
   14c34:	andeq	pc, r1, r8, lsl #20
   14c38:	ldrdeq	pc, [r1], -ip
   14c3c:	andeq	pc, r1, ip, asr fp	; <UNPREDICTABLE>
   14c40:	strdeq	pc, [r1], -ip
   14c44:	andeq	pc, r1, ip, asr #24
   14c48:	andeq	pc, r1, r4, lsr #26
   14c4c:	andeq	pc, r1, r0, ror sp	; <UNPREDICTABLE>
   14c50:			; <UNDEFINED> instruction: 0x0001fdb0
   14c54:	andeq	pc, r1, r0, lsl #28
   14c58:	ldrdeq	pc, [r1], -r8
   14c5c:	andeq	pc, r1, r4, lsr #30
   14c60:	andeq	pc, r1, r8, ror #30
   14c64:			; <UNDEFINED> instruction: 0x0001ffb0
   14c68:	strdeq	pc, [r1], -r8
   14c6c:	andeq	r0, r2, r4, lsr r0
   14c70:	push	{fp, lr}
   14c74:	add	fp, sp, #4
   14c78:	sub	sp, sp, #24
   14c7c:	str	r0, [fp, #-8]
   14c80:	str	r1, [fp, #-12]
   14c84:	ldr	r3, [pc, #52]	; 14cc0 <__assert_fail@plt+0x3724>
   14c88:	ldr	r2, [r3]
   14c8c:	mov	r3, #0
   14c90:	str	r3, [sp, #8]
   14c94:	mov	r3, #0
   14c98:	str	r3, [sp, #4]
   14c9c:	mov	r3, #0
   14ca0:	str	r3, [sp]
   14ca4:	mov	r3, #0
   14ca8:	ldr	r1, [fp, #-12]
   14cac:	ldr	r0, [fp, #-8]
   14cb0:	bl	154c4 <__assert_fail@plt+0x3f28>
   14cb4:	nop			; (mov r0, r0)
   14cb8:	sub	sp, fp, #4
   14cbc:	pop	{fp, pc}
   14cc0:	andeq	r1, r3, r0, ror r1
   14cc4:	push	{fp, lr}
   14cc8:	add	fp, sp, #4
   14ccc:	sub	sp, sp, #48	; 0x30
   14cd0:	str	r0, [fp, #-24]	; 0xffffffe8
   14cd4:	str	r1, [fp, #-28]	; 0xffffffe4
   14cd8:	str	r2, [fp, #-32]	; 0xffffffe0
   14cdc:	str	r3, [fp, #-36]	; 0xffffffdc
   14ce0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ce4:	ldr	r3, [r3, #12]
   14ce8:	sub	r3, r3, #1
   14cec:	str	r3, [fp, #-12]
   14cf0:	ldr	r3, [pc, #564]	; 14f2c <__assert_fail@plt+0x3990>
   14cf4:	ldr	r3, [r3]
   14cf8:	cmp	r3, #0
   14cfc:	bne	14d24 <__assert_fail@plt+0x3788>
   14d00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d04:	ldr	r3, [r3, #12]
   14d08:	add	r3, r3, #1
   14d0c:	mov	r0, r3
   14d10:	bl	1b7ac <__assert_fail@plt+0xa210>
   14d14:	mov	r3, r0
   14d18:	mov	r2, r3
   14d1c:	ldr	r3, [pc, #520]	; 14f2c <__assert_fail@plt+0x3990>
   14d20:	str	r2, [r3]
   14d24:	ldr	r3, [pc, #512]	; 14f2c <__assert_fail@plt+0x3990>
   14d28:	ldr	r3, [r3]
   14d2c:	str	r3, [fp, #-8]
   14d30:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14d34:	ldr	r3, [r3, #24]
   14d38:	mov	r1, r3
   14d3c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14d40:	bl	17b44 <__assert_fail@plt+0x65a8>
   14d44:	str	r0, [fp, #-20]	; 0xffffffec
   14d48:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d4c:	cmp	r3, #0
   14d50:	beq	14d68 <__assert_fail@plt+0x37cc>
   14d54:	ldr	r2, [fp, #-20]	; 0xffffffec
   14d58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14d5c:	sub	r3, r2, r3
   14d60:	str	r3, [fp, #-16]
   14d64:	b	14d70 <__assert_fail@plt+0x37d4>
   14d68:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14d6c:	str	r3, [fp, #-16]
   14d70:	ldr	r2, [fp, #-12]
   14d74:	ldr	r3, [fp, #-16]
   14d78:	cmp	r2, r3
   14d7c:	bls	14e8c <__assert_fail@plt+0x38f0>
   14d80:	ldr	r2, [fp, #-12]
   14d84:	ldr	r3, [fp, #-16]
   14d88:	sub	r3, r2, r3
   14d8c:	str	r3, [fp, #-12]
   14d90:	ldr	r2, [fp, #-16]
   14d94:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14d98:	ldr	r0, [fp, #-8]
   14d9c:	bl	1144c <strncpy@plt>
   14da0:	ldr	r2, [fp, #-8]
   14da4:	ldr	r3, [fp, #-16]
   14da8:	add	r3, r2, r3
   14dac:	str	r3, [fp, #-8]
   14db0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14db4:	ldr	r3, [fp, #-16]
   14db8:	add	r3, r2, r3
   14dbc:	str	r3, [fp, #-32]	; 0xffffffe0
   14dc0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14dc4:	ldr	r3, [fp, #-16]
   14dc8:	sub	r3, r2, r3
   14dcc:	str	r3, [fp, #-36]	; 0xffffffdc
   14dd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14dd4:	cmp	r3, #0
   14dd8:	beq	14e78 <__assert_fail@plt+0x38dc>
   14ddc:	ldr	r2, [fp, #16]
   14de0:	ldr	r3, [fp, #8]
   14de4:	add	r2, r2, r3
   14de8:	ldr	r3, [fp, #-12]
   14dec:	cmp	r2, r3
   14df0:	bcs	14e94 <__assert_fail@plt+0x38f8>
   14df4:	ldr	r2, [fp, #16]
   14df8:	ldr	r3, [fp, #8]
   14dfc:	add	r3, r2, r3
   14e00:	ldr	r2, [fp, #-12]
   14e04:	sub	r3, r2, r3
   14e08:	str	r3, [fp, #-12]
   14e0c:	ldr	r3, [fp, #4]
   14e10:	cmp	r3, #0
   14e14:	beq	14e34 <__assert_fail@plt+0x3898>
   14e18:	ldr	r1, [fp, #4]
   14e1c:	ldr	r0, [fp, #-8]
   14e20:	bl	11320 <strcpy@plt>
   14e24:	ldr	r2, [fp, #-8]
   14e28:	ldr	r3, [fp, #8]
   14e2c:	add	r3, r2, r3
   14e30:	str	r3, [fp, #-8]
   14e34:	ldr	r1, [fp, #12]
   14e38:	ldr	r0, [fp, #-8]
   14e3c:	bl	11320 <strcpy@plt>
   14e40:	ldr	r2, [fp, #-8]
   14e44:	ldr	r3, [fp, #16]
   14e48:	add	r3, r2, r3
   14e4c:	str	r3, [fp, #-8]
   14e50:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e54:	ldr	r3, [r3, #20]
   14e58:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14e5c:	add	r3, r2, r3
   14e60:	str	r3, [fp, #-32]	; 0xffffffe0
   14e64:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e68:	ldr	r3, [r3, #20]
   14e6c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14e70:	sub	r3, r2, r3
   14e74:	str	r3, [fp, #-36]	; 0xffffffdc
   14e78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14e7c:	ldrb	r3, [r3]
   14e80:	cmp	r3, #0
   14e84:	bne	14d30 <__assert_fail@plt+0x3794>
   14e88:	b	14e98 <__assert_fail@plt+0x38fc>
   14e8c:	nop			; (mov r0, r0)
   14e90:	b	14e98 <__assert_fail@plt+0x38fc>
   14e94:	nop			; (mov r0, r0)
   14e98:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14e9c:	ldrb	r3, [r3]
   14ea0:	cmp	r3, #0
   14ea4:	beq	14ec4 <__assert_fail@plt+0x3928>
   14ea8:	ldr	r0, [pc, #128]	; 14f30 <__assert_fail@plt+0x3994>
   14eac:	bl	113d4 <gettext@plt>
   14eb0:	mov	r3, r0
   14eb4:	mov	r2, r3
   14eb8:	mov	r1, #0
   14ebc:	mov	r0, #1
   14ec0:	bl	11344 <error@plt>
   14ec4:	ldr	r3, [fp, #-8]
   14ec8:	add	r2, r3, #1
   14ecc:	str	r2, [fp, #-8]
   14ed0:	mov	r2, #0
   14ed4:	strb	r2, [r3]
   14ed8:	ldr	r3, [pc, #76]	; 14f2c <__assert_fail@plt+0x3990>
   14edc:	ldr	r1, [r3]
   14ee0:	ldr	r3, [fp, #-8]
   14ee4:	ldr	r2, [pc, #64]	; 14f2c <__assert_fail@plt+0x3990>
   14ee8:	ldr	r2, [r2]
   14eec:	sub	r3, r3, r2
   14ef0:	mov	r2, r3
   14ef4:	ldr	r3, [fp, #20]
   14ef8:	str	r3, [sp, #8]
   14efc:	mov	r3, #0
   14f00:	str	r3, [sp, #4]
   14f04:	mov	r3, #0
   14f08:	str	r3, [sp]
   14f0c:	mov	r3, r2
   14f10:	mov	r2, r1
   14f14:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14f18:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14f1c:	bl	154c4 <__assert_fail@plt+0x3f28>
   14f20:	nop			; (mov r0, r0)
   14f24:	sub	sp, fp, #4
   14f28:	pop	{fp, pc}
   14f2c:	muleq	r3, r4, r2
   14f30:	ldrdeq	r0, [r2], -ip
   14f34:	push	{fp}		; (str fp, [sp, #-4]!)
   14f38:	add	fp, sp, #0
   14f3c:	sub	sp, sp, #28
   14f40:	str	r0, [fp, #-16]
   14f44:	str	r1, [fp, #-20]	; 0xffffffec
   14f48:	str	r3, [fp, #-28]	; 0xffffffe4
   14f4c:	mov	r3, r2
   14f50:	strb	r3, [fp, #-21]	; 0xffffffeb
   14f54:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   14f58:	cmp	r3, #0
   14f5c:	beq	14f84 <__assert_fail@plt+0x39e8>
   14f60:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f64:	ldr	r2, [r3, #36]	; 0x24
   14f68:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f6c:	cmp	r2, r3
   14f70:	bcs	14fb4 <__assert_fail@plt+0x3a18>
   14f74:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f78:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14f7c:	str	r2, [r3, #36]	; 0x24
   14f80:	b	14fb4 <__assert_fail@plt+0x3a18>
   14f84:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f88:	ldr	r2, [r3, #40]	; 0x28
   14f8c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14f90:	cmp	r2, r3
   14f94:	bhi	14fa8 <__assert_fail@plt+0x3a0c>
   14f98:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f9c:	ldr	r3, [r3, #40]	; 0x28
   14fa0:	cmp	r3, #0
   14fa4:	bne	14fb4 <__assert_fail@plt+0x3a18>
   14fa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fac:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14fb0:	str	r2, [r3, #40]	; 0x28
   14fb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fb8:	ldr	r3, [r3, #36]	; 0x24
   14fbc:	cmp	r3, #0
   14fc0:	beq	14fdc <__assert_fail@plt+0x3a40>
   14fc4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fc8:	ldr	r2, [r3, #40]	; 0x28
   14fcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fd0:	ldr	r3, [r3, #36]	; 0x24
   14fd4:	cmp	r2, r3
   14fd8:	bhi	15014 <__assert_fail@plt+0x3a78>
   14fdc:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   14fe0:	cmp	r3, #0
   14fe4:	beq	15004 <__assert_fail@plt+0x3a68>
   14fe8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14fec:	cmn	r3, #1
   14ff0:	beq	1509c <__assert_fail@plt+0x3b00>
   14ff4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14ff8:	add	r3, r3, #1
   14ffc:	str	r3, [fp, #-28]	; 0xffffffe4
   15000:	b	1509c <__assert_fail@plt+0x3b00>
   15004:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15008:	lsr	r3, r3, #1
   1500c:	str	r3, [fp, #-28]	; 0xffffffe4
   15010:	b	1509c <__assert_fail@plt+0x3b00>
   15014:	ldr	r3, [fp, #-20]	; 0xffffffec
   15018:	ldr	r2, [r3, #40]	; 0x28
   1501c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15020:	ldr	r3, [r3, #36]	; 0x24
   15024:	sub	r3, r2, r3
   15028:	lsr	r3, r3, #1
   1502c:	str	r3, [fp, #-8]
   15030:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   15034:	cmp	r3, #0
   15038:	beq	1506c <__assert_fail@plt+0x3ad0>
   1503c:	ldr	r3, [fp, #-8]
   15040:	cmp	r3, #0
   15044:	beq	1505c <__assert_fail@plt+0x3ac0>
   15048:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1504c:	ldr	r3, [fp, #-8]
   15050:	add	r3, r2, r3
   15054:	str	r3, [fp, #-28]	; 0xffffffe4
   15058:	b	150a0 <__assert_fail@plt+0x3b04>
   1505c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15060:	add	r3, r3, #1
   15064:	str	r3, [fp, #-28]	; 0xffffffe4
   15068:	b	150a0 <__assert_fail@plt+0x3b04>
   1506c:	ldr	r3, [fp, #-8]
   15070:	cmp	r3, #0
   15074:	beq	1508c <__assert_fail@plt+0x3af0>
   15078:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1507c:	ldr	r3, [fp, #-8]
   15080:	sub	r3, r2, r3
   15084:	str	r3, [fp, #-28]	; 0xffffffe4
   15088:	b	150a0 <__assert_fail@plt+0x3b04>
   1508c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15090:	sub	r3, r3, #1
   15094:	str	r3, [fp, #-28]	; 0xffffffe4
   15098:	b	150a0 <__assert_fail@plt+0x3b04>
   1509c:	nop			; (mov r0, r0)
   150a0:	ldr	r3, [fp, #-16]
   150a4:	ldr	r3, [r3, #28]
   150a8:	cmp	r3, #0
   150ac:	beq	150d8 <__assert_fail@plt+0x3b3c>
   150b0:	ldr	r3, [fp, #-16]
   150b4:	ldr	r3, [r3, #28]
   150b8:	add	r2, r3, #1
   150bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   150c0:	cmp	r2, r3
   150c4:	bcc	150d8 <__assert_fail@plt+0x3b3c>
   150c8:	ldr	r3, [fp, #-16]
   150cc:	ldr	r3, [r3, #28]
   150d0:	add	r3, r3, #1
   150d4:	str	r3, [fp, #-28]	; 0xffffffe4
   150d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   150dc:	cmp	r3, #0
   150e0:	bne	150ec <__assert_fail@plt+0x3b50>
   150e4:	mov	r3, #1
   150e8:	str	r3, [fp, #-28]	; 0xffffffe4
   150ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   150f0:	mov	r0, r3
   150f4:	add	sp, fp, #0
   150f8:	pop	{fp}		; (ldr fp, [sp], #4)
   150fc:	bx	lr
   15100:	push	{fp, lr}
   15104:	add	fp, sp, #4
   15108:	sub	sp, sp, #24
   1510c:	str	r0, [fp, #-16]
   15110:	str	r1, [fp, #-20]	; 0xffffffec
   15114:	str	r2, [fp, #-24]	; 0xffffffe8
   15118:	str	r3, [fp, #-28]	; 0xffffffe4
   1511c:	mov	r3, #0
   15120:	str	r3, [fp, #-8]
   15124:	mov	r3, #0
   15128:	str	r3, [fp, #-12]
   1512c:	b	1516c <__assert_fail@plt+0x3bd0>
   15130:	ldr	r3, [fp, #-8]
   15134:	add	r2, r3, #1
   15138:	str	r2, [fp, #-8]
   1513c:	lsl	r3, r3, #2
   15140:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15144:	add	r2, r2, r3
   15148:	ldr	r3, [fp, #-20]	; 0xffffffec
   1514c:	ldr	r1, [r3, #4]
   15150:	ldr	r3, [fp, #-12]
   15154:	add	r0, r3, #1
   15158:	str	r0, [fp, #-12]
   1515c:	lsl	r3, r3, #2
   15160:	add	r3, r1, r3
   15164:	ldr	r3, [r3]
   15168:	str	r3, [r2]
   1516c:	ldr	r3, [fp, #-16]
   15170:	ldr	r2, [r3, #28]
   15174:	ldr	r3, [fp, #-12]
   15178:	cmp	r2, r3
   1517c:	bhi	15130 <__assert_fail@plt+0x3b94>
   15180:	ldr	r2, [fp, #-12]
   15184:	ldr	r3, [fp, #4]
   15188:	add	r3, r2, r3
   1518c:	str	r3, [fp, #-12]
   15190:	b	151d0 <__assert_fail@plt+0x3c34>
   15194:	ldr	r3, [fp, #-8]
   15198:	add	r2, r3, #1
   1519c:	str	r2, [fp, #-8]
   151a0:	lsl	r3, r3, #2
   151a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   151a8:	add	r2, r2, r3
   151ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   151b0:	ldr	r1, [r3, #4]
   151b4:	ldr	r3, [fp, #-12]
   151b8:	add	r0, r3, #1
   151bc:	str	r0, [fp, #-12]
   151c0:	lsl	r3, r3, #2
   151c4:	add	r3, r1, r3
   151c8:	ldr	r3, [r3]
   151cc:	str	r3, [r2]
   151d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   151d4:	ldr	r2, [r3]
   151d8:	ldr	r3, [fp, #-12]
   151dc:	cmp	r2, r3
   151e0:	bls	151f4 <__assert_fail@plt+0x3c58>
   151e4:	ldr	r2, [fp, #-8]
   151e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151ec:	cmp	r2, r3
   151f0:	bcc	15194 <__assert_fail@plt+0x3bf8>
   151f4:	ldr	r3, [fp, #-16]
   151f8:	ldr	r2, [r3, #28]
   151fc:	ldr	r3, [fp, #-8]
   15200:	cmp	r2, r3
   15204:	bls	1521c <__assert_fail@plt+0x3c80>
   15208:	ldr	r3, [pc, #52]	; 15244 <__assert_fail@plt+0x3ca8>
   1520c:	mov	r2, #242	; 0xf2
   15210:	ldr	r1, [pc, #48]	; 15248 <__assert_fail@plt+0x3cac>
   15214:	ldr	r0, [pc, #48]	; 1524c <__assert_fail@plt+0x3cb0>
   15218:	bl	1159c <__assert_fail@plt>
   1521c:	ldr	r3, [fp, #-8]
   15220:	lsl	r3, r3, #2
   15224:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15228:	add	r3, r2, r3
   1522c:	mov	r2, #0
   15230:	str	r2, [r3]
   15234:	ldr	r3, [fp, #-8]
   15238:	mov	r0, r3
   1523c:	sub	sp, fp, #4
   15240:	pop	{fp, pc}
   15244:			; <UNDEFINED> instruction: 0x000202bc
   15248:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1524c:	strdeq	r0, [r2], -ip
   15250:	push	{r4, fp, lr}
   15254:	add	fp, sp, #8
   15258:	sub	sp, sp, #36	; 0x24
   1525c:	str	r0, [fp, #-32]	; 0xffffffe0
   15260:	str	r1, [fp, #-36]	; 0xffffffdc
   15264:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15268:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1526c:	bl	14c70 <__assert_fail@plt+0x36d4>
   15270:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15274:	ldr	r3, [r3]
   15278:	cmp	r3, #0
   1527c:	bne	15294 <__assert_fail@plt+0x3cf8>
   15280:	ldr	r3, [pc, #400]	; 15418 <__assert_fail@plt+0x3e7c>
   15284:	ldr	r2, [pc, #400]	; 1541c <__assert_fail@plt+0x3e80>
   15288:	ldr	r1, [pc, #400]	; 15420 <__assert_fail@plt+0x3e84>
   1528c:	ldr	r0, [pc, #400]	; 15424 <__assert_fail@plt+0x3e88>
   15290:	bl	1159c <__assert_fail@plt>
   15294:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15298:	ldr	r2, [r3, #4]
   1529c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   152a0:	ldr	r3, [r3]
   152a4:	sub	r3, r3, #-1073741823	; 0xc0000001
   152a8:	lsl	r3, r3, #2
   152ac:	add	r3, r2, r3
   152b0:	ldr	r3, [r3]
   152b4:	cmp	r3, #0
   152b8:	beq	152d0 <__assert_fail@plt+0x3d34>
   152bc:	ldr	r3, [pc, #340]	; 15418 <__assert_fail@plt+0x3e7c>
   152c0:	ldr	r2, [pc, #352]	; 15428 <__assert_fail@plt+0x3e8c>
   152c4:	ldr	r1, [pc, #340]	; 15420 <__assert_fail@plt+0x3e84>
   152c8:	ldr	r0, [pc, #348]	; 1542c <__assert_fail@plt+0x3e90>
   152cc:	bl	1159c <__assert_fail@plt>
   152d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   152d4:	ldr	r3, [r3]
   152d8:	add	r3, r3, #1
   152dc:	lsl	r3, r3, #2
   152e0:	mov	r0, r3
   152e4:	bl	1b7ac <__assert_fail@plt+0xa210>
   152e8:	mov	r3, r0
   152ec:	str	r3, [fp, #-24]	; 0xffffffe8
   152f0:	mov	r3, #0
   152f4:	str	r3, [fp, #-20]	; 0xffffffec
   152f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   152fc:	ldr	r3, [r3]
   15300:	str	r3, [fp, #-16]
   15304:	ldr	r3, [fp, #-20]	; 0xffffffec
   15308:	str	r3, [sp]
   1530c:	ldr	r3, [fp, #-16]
   15310:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15314:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15318:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1531c:	bl	15100 <__assert_fail@plt+0x3b64>
   15320:	str	r0, [fp, #-28]	; 0xffffffe4
   15324:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15328:	ldr	r4, [r3, #32]
   1532c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15330:	ldr	r1, [r3, #24]
   15334:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15338:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1533c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15340:	blx	r4
   15344:	mov	r3, r0
   15348:	cmp	r3, #0
   1534c:	beq	15388 <__assert_fail@plt+0x3dec>
   15350:	ldr	r3, [fp, #-16]
   15354:	mov	r2, #1
   15358:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1535c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15360:	bl	14f34 <__assert_fail@plt+0x3998>
   15364:	str	r0, [fp, #-16]
   15368:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1536c:	ldr	r3, [r3, #28]
   15370:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15374:	sub	r3, r2, r3
   15378:	ldr	r2, [fp, #-20]	; 0xffffffec
   1537c:	add	r3, r2, r3
   15380:	str	r3, [fp, #-20]	; 0xffffffec
   15384:	b	153d4 <__assert_fail@plt+0x3e38>
   15388:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1538c:	ldr	r3, [r3, #28]
   15390:	add	r2, r3, #1
   15394:	ldr	r3, [fp, #-16]
   15398:	cmp	r2, r3
   1539c:	bcc	153bc <__assert_fail@plt+0x3e20>
   153a0:	ldr	r0, [pc, #136]	; 15430 <__assert_fail@plt+0x3e94>
   153a4:	bl	113d4 <gettext@plt>
   153a8:	mov	r3, r0
   153ac:	mov	r2, r3
   153b0:	mov	r1, #0
   153b4:	mov	r0, #1
   153b8:	bl	11344 <error@plt>
   153bc:	ldr	r3, [fp, #-16]
   153c0:	mov	r2, #0
   153c4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   153c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   153cc:	bl	14f34 <__assert_fail@plt+0x3998>
   153d0:	str	r0, [fp, #-16]
   153d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   153d8:	add	r2, r3, #1
   153dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   153e0:	ldr	r1, [r3]
   153e4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   153e8:	ldr	r3, [r3, #28]
   153ec:	sub	r3, r1, r3
   153f0:	cmp	r2, r3
   153f4:	bcc	15304 <__assert_fail@plt+0x3d68>
   153f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   153fc:	bl	1cf94 <__assert_fail@plt+0xb9f8>
   15400:	ldr	r1, [fp, #-36]	; 0xffffffdc
   15404:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15408:	bl	15c00 <__assert_fail@plt+0x4664>
   1540c:	nop			; (mov r0, r0)
   15410:	sub	sp, fp, #8
   15414:	pop	{r4, fp, pc}
   15418:	andeq	r0, r2, r8, asr #5
   1541c:	andeq	r0, r0, r5, lsl #2
   15420:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   15424:	andeq	r0, r2, ip, lsl r1
   15428:	andeq	r0, r0, r6, lsl #2
   1542c:	andeq	r0, r2, r0, lsr r1
   15430:	andeq	r0, r2, ip, asr r1
   15434:	push	{fp}		; (str fp, [sp, #-4]!)
   15438:	add	fp, sp, #0
   1543c:	sub	sp, sp, #20
   15440:	str	r0, [fp, #-8]
   15444:	str	r1, [fp, #-12]
   15448:	str	r2, [fp, #-16]
   1544c:	ldr	r3, [fp, #-8]
   15450:	cmp	r3, #0
   15454:	bne	15494 <__assert_fail@plt+0x3ef8>
   15458:	ldr	r3, [fp, #-12]
   1545c:	ldr	r3, [r3, #40]	; 0x28
   15460:	cmp	r3, #0
   15464:	beq	15494 <__assert_fail@plt+0x3ef8>
   15468:	ldr	r3, [fp, #-16]
   1546c:	ldr	r2, [r3]
   15470:	ldr	r3, [fp, #-12]
   15474:	ldr	r3, [r3, #28]
   15478:	sub	r2, r2, r3
   1547c:	ldr	r3, [fp, #-12]
   15480:	ldr	r3, [r3, #40]	; 0x28
   15484:	cmp	r2, r3
   15488:	bne	15494 <__assert_fail@plt+0x3ef8>
   1548c:	mov	r3, #1
   15490:	b	154b4 <__assert_fail@plt+0x3f18>
   15494:	ldr	r3, [fp, #-16]
   15498:	ldr	r2, [r3]
   1549c:	ldr	r3, [fp, #-12]
   154a0:	ldr	r3, [r3, #16]
   154a4:	cmp	r2, r3
   154a8:	moveq	r3, #1
   154ac:	movne	r3, #0
   154b0:	uxtb	r3, r3
   154b4:	mov	r0, r3
   154b8:	add	sp, fp, #0
   154bc:	pop	{fp}		; (ldr fp, [sp], #4)
   154c0:	bx	lr
   154c4:	push	{fp, lr}
   154c8:	add	fp, sp, #4
   154cc:	sub	sp, sp, #24
   154d0:	str	r0, [fp, #-16]
   154d4:	str	r1, [fp, #-20]	; 0xffffffec
   154d8:	str	r2, [fp, #-24]	; 0xffffffe8
   154dc:	str	r3, [fp, #-28]	; 0xffffffe4
   154e0:	ldr	r3, [pc, #820]	; 1581c <__assert_fail@plt+0x4280>
   154e4:	ldr	r3, [r3]
   154e8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   154ec:	cmp	r2, r3
   154f0:	moveq	r3, #1
   154f4:	movne	r3, #0
   154f8:	uxtb	r3, r3
   154fc:	str	r3, [fp, #-8]
   15500:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15504:	cmp	r3, #0
   15508:	bne	15520 <__assert_fail@plt+0x3f84>
   1550c:	ldr	r3, [pc, #780]	; 15820 <__assert_fail@plt+0x4284>
   15510:	ldr	r2, [pc, #780]	; 15824 <__assert_fail@plt+0x4288>
   15514:	ldr	r1, [pc, #780]	; 15828 <__assert_fail@plt+0x428c>
   15518:	ldr	r0, [pc, #780]	; 1582c <__assert_fail@plt+0x4290>
   1551c:	bl	1159c <__assert_fail@plt>
   15520:	ldr	r3, [fp, #-8]
   15524:	cmp	r3, #0
   15528:	bne	15624 <__assert_fail@plt+0x4088>
   1552c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15530:	ldr	r2, [r3, #16]
   15534:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15538:	add	r2, r2, r3
   1553c:	ldr	r3, [fp, #8]
   15540:	add	r2, r2, r3
   15544:	ldr	r3, [fp, #-16]
   15548:	ldr	r3, [r3, #12]
   1554c:	cmp	r2, r3
   15550:	bls	155fc <__assert_fail@plt+0x4060>
   15554:	ldr	r3, [fp, #12]
   15558:	cmp	r3, #0
   1555c:	bne	15578 <__assert_fail@plt+0x3fdc>
   15560:	ldr	r3, [fp, #-20]	; 0xffffffec
   15564:	ldr	r2, [r3]
   15568:	ldr	r3, [fp, #-16]
   1556c:	ldr	r3, [r3, #28]
   15570:	cmp	r2, r3
   15574:	bne	15594 <__assert_fail@plt+0x3ff8>
   15578:	ldr	r0, [pc, #688]	; 15830 <__assert_fail@plt+0x4294>
   1557c:	bl	113d4 <gettext@plt>
   15580:	mov	r3, r0
   15584:	mov	r2, r3
   15588:	mov	r1, #0
   1558c:	mov	r0, #1
   15590:	bl	11344 <error@plt>
   15594:	ldr	r3, [fp, #-16]
   15598:	ldr	r3, [r3, #24]
   1559c:	cmp	r3, #0
   155a0:	bne	155d4 <__assert_fail@plt+0x4038>
   155a4:	ldr	r3, [fp, #-16]
   155a8:	ldr	r3, [r3]
   155ac:	cmp	r3, #0
   155b0:	beq	155f0 <__assert_fail@plt+0x4054>
   155b4:	ldr	r3, [fp, #-16]
   155b8:	ldr	r3, [r3, #36]	; 0x24
   155bc:	cmp	r3, #0
   155c0:	bne	155d4 <__assert_fail@plt+0x4038>
   155c4:	ldr	r3, [fp, #-16]
   155c8:	ldr	r3, [r3, #40]	; 0x28
   155cc:	cmp	r3, #0
   155d0:	beq	155f0 <__assert_fail@plt+0x4054>
   155d4:	ldr	r0, [pc, #600]	; 15834 <__assert_fail@plt+0x4298>
   155d8:	bl	113d4 <gettext@plt>
   155dc:	mov	r3, r0
   155e0:	mov	r2, r3
   155e4:	mov	r1, #0
   155e8:	mov	r0, #1
   155ec:	bl	11344 <error@plt>
   155f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   155f4:	ldr	r0, [fp, #-16]
   155f8:	bl	15250 <__assert_fail@plt+0x3cb4>
   155fc:	ldr	r2, [fp, #-20]	; 0xffffffec
   15600:	ldr	r1, [fp, #-16]
   15604:	ldr	r0, [fp, #12]
   15608:	bl	15434 <__assert_fail@plt+0x3e98>
   1560c:	mov	r3, r0
   15610:	cmp	r3, #0
   15614:	beq	15624 <__assert_fail@plt+0x4088>
   15618:	ldr	r1, [fp, #-20]	; 0xffffffec
   1561c:	ldr	r0, [fp, #-16]
   15620:	bl	15250 <__assert_fail@plt+0x3cb4>
   15624:	ldr	r3, [fp, #12]
   15628:	cmp	r3, #0
   1562c:	bne	1563c <__assert_fail@plt+0x40a0>
   15630:	ldr	r3, [fp, #-20]	; 0xffffffec
   15634:	mov	r2, #1
   15638:	str	r2, [r3, #28]
   1563c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15640:	ldr	r2, [r3]
   15644:	ldr	r3, [fp, #-20]	; 0xffffffec
   15648:	ldr	r3, [r3, #8]
   1564c:	cmp	r2, r3
   15650:	bcc	156d8 <__assert_fail@plt+0x413c>
   15654:	ldr	r3, [fp, #-20]	; 0xffffffec
   15658:	ldr	r3, [r3, #4]
   1565c:	cmp	r3, #0
   15660:	bne	15698 <__assert_fail@plt+0x40fc>
   15664:	ldr	r3, [fp, #-20]	; 0xffffffec
   15668:	mov	r2, #64	; 0x40
   1566c:	str	r2, [r3, #8]
   15670:	ldr	r3, [fp, #-20]	; 0xffffffec
   15674:	ldr	r3, [r3, #8]
   15678:	lsl	r3, r3, #2
   1567c:	mov	r0, r3
   15680:	bl	1b7ac <__assert_fail@plt+0xa210>
   15684:	mov	r3, r0
   15688:	mov	r2, r3
   1568c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15690:	str	r2, [r3, #4]
   15694:	b	156d8 <__assert_fail@plt+0x413c>
   15698:	ldr	r3, [fp, #-20]	; 0xffffffec
   1569c:	ldr	r3, [r3, #8]
   156a0:	lsl	r2, r3, #1
   156a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   156a8:	str	r2, [r3, #8]
   156ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   156b0:	ldr	r2, [r3, #4]
   156b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   156b8:	ldr	r3, [r3, #8]
   156bc:	lsl	r3, r3, #2
   156c0:	mov	r1, r3
   156c4:	mov	r0, r2
   156c8:	bl	1b83c <__assert_fail@plt+0xa2a0>
   156cc:	mov	r2, r0
   156d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   156d4:	str	r2, [r3, #4]
   156d8:	ldr	r3, [fp, #-8]
   156dc:	cmp	r3, #0
   156e0:	beq	15714 <__assert_fail@plt+0x4178>
   156e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   156e8:	ldr	r2, [r3, #4]
   156ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   156f0:	ldr	r3, [r3]
   156f4:	add	r0, r3, #1
   156f8:	ldr	r1, [fp, #-20]	; 0xffffffec
   156fc:	str	r0, [r1]
   15700:	lsl	r3, r3, #2
   15704:	add	r3, r2, r3
   15708:	mov	r2, #0
   1570c:	str	r2, [r3]
   15710:	b	157f4 <__assert_fail@plt+0x4258>
   15714:	ldr	r3, [fp, #-20]	; 0xffffffec
   15718:	ldr	r2, [r3, #4]
   1571c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15720:	ldr	r3, [r3]
   15724:	add	r0, r3, #1
   15728:	ldr	r1, [fp, #-20]	; 0xffffffec
   1572c:	str	r0, [r1]
   15730:	lsl	r3, r3, #2
   15734:	add	r3, r2, r3
   15738:	ldr	r2, [fp, #-20]	; 0xffffffec
   1573c:	ldr	r1, [r2, #12]
   15740:	ldr	r2, [fp, #-20]	; 0xffffffec
   15744:	ldr	r2, [r2, #16]
   15748:	add	r2, r1, r2
   1574c:	str	r2, [r3]
   15750:	ldr	r3, [fp, #4]
   15754:	cmp	r3, #0
   15758:	beq	15794 <__assert_fail@plt+0x41f8>
   1575c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15760:	ldr	r2, [r3, #12]
   15764:	ldr	r3, [fp, #-20]	; 0xffffffec
   15768:	ldr	r3, [r3, #16]
   1576c:	add	r3, r2, r3
   15770:	ldr	r1, [fp, #4]
   15774:	mov	r0, r3
   15778:	bl	11320 <strcpy@plt>
   1577c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15780:	ldr	r2, [r3, #16]
   15784:	ldr	r3, [fp, #8]
   15788:	add	r2, r2, r3
   1578c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15790:	str	r2, [r3, #16]
   15794:	ldr	r3, [fp, #-20]	; 0xffffffec
   15798:	ldr	r2, [r3, #12]
   1579c:	ldr	r3, [fp, #-20]	; 0xffffffec
   157a0:	ldr	r3, [r3, #16]
   157a4:	add	r3, r2, r3
   157a8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   157ac:	mov	r0, r3
   157b0:	bl	11320 <strcpy@plt>
   157b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   157b8:	ldr	r2, [r3, #16]
   157bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   157c0:	add	r2, r2, r3
   157c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   157c8:	str	r2, [r3, #16]
   157cc:	ldr	r2, [fp, #-20]	; 0xffffffec
   157d0:	ldr	r1, [fp, #-16]
   157d4:	ldr	r0, [fp, #12]
   157d8:	bl	15434 <__assert_fail@plt+0x3e98>
   157dc:	mov	r3, r0
   157e0:	cmp	r3, #0
   157e4:	beq	157f4 <__assert_fail@plt+0x4258>
   157e8:	ldr	r1, [fp, #-20]	; 0xffffffec
   157ec:	ldr	r0, [fp, #-16]
   157f0:	bl	15250 <__assert_fail@plt+0x3cb4>
   157f4:	ldr	r3, [fp, #12]
   157f8:	cmp	r3, #0
   157fc:	beq	15810 <__assert_fail@plt+0x4274>
   15800:	ldr	r3, [fp, #-20]	; 0xffffffec
   15804:	ldr	r2, [r3, #16]
   15808:	ldr	r3, [fp, #-20]	; 0xffffffec
   1580c:	str	r2, [r3, #20]
   15810:	nop			; (mov r0, r0)
   15814:	sub	sp, fp, #4
   15818:	pop	{fp, pc}
   1581c:	andeq	r1, r3, r0, ror r1
   15820:	ldrdeq	r0, [r2], -r4
   15824:	andeq	r0, r0, r5, asr r1
   15828:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1582c:	muleq	r2, r0, r1
   15830:	muleq	r2, ip, r1
   15834:	ldrdeq	r0, [r2], -r8
   15838:	push	{fp, lr}
   1583c:	add	fp, sp, #4
   15840:	sub	sp, sp, #8
   15844:	mov	r0, #0
   15848:	bl	11284 <sysconf@plt>
   1584c:	str	r0, [fp, #-8]
   15850:	ldr	r3, [fp, #-8]
   15854:	cmp	r3, #0
   15858:	ble	15864 <__assert_fail@plt+0x42c8>
   1585c:	ldr	r3, [fp, #-8]
   15860:	b	15868 <__assert_fail@plt+0x42cc>
   15864:	mvn	r3, #-2147483648	; 0x80000000
   15868:	mov	r0, r3
   1586c:	sub	sp, fp, #4
   15870:	pop	{fp, pc}
   15874:	push	{fp}		; (str fp, [sp, #-4]!)
   15878:	add	fp, sp, #0
   1587c:	sub	sp, sp, #20
   15880:	str	r0, [fp, #-8]
   15884:	str	r1, [fp, #-12]
   15888:	str	r2, [fp, #-16]
   1588c:	str	r3, [fp, #-20]	; 0xffffffec
   15890:	mov	r3, #0
   15894:	mov	r0, r3
   15898:	add	sp, fp, #0
   1589c:	pop	{fp}		; (ldr fp, [sp], #4)
   158a0:	bx	lr
   158a4:	push	{fp, lr}
   158a8:	add	fp, sp, #4
   158ac:	sub	sp, sp, #8
   158b0:	mov	r3, #0
   158b4:	str	r3, [fp, #-8]
   158b8:	ldr	r3, [pc, #84]	; 15914 <__assert_fail@plt+0x4378>
   158bc:	ldr	r3, [r3]
   158c0:	str	r3, [fp, #-12]
   158c4:	b	158f4 <__assert_fail@plt+0x4358>
   158c8:	ldr	r3, [fp, #-12]
   158cc:	add	r2, r3, #4
   158d0:	str	r2, [fp, #-12]
   158d4:	ldr	r3, [r3]
   158d8:	mov	r0, r3
   158dc:	bl	113ec <strlen@plt>
   158e0:	mov	r3, r0
   158e4:	add	r3, r3, #1
   158e8:	ldr	r2, [fp, #-8]
   158ec:	add	r3, r2, r3
   158f0:	str	r3, [fp, #-8]
   158f4:	ldr	r3, [fp, #-12]
   158f8:	ldr	r3, [r3]
   158fc:	cmp	r3, #0
   15900:	bne	158c8 <__assert_fail@plt+0x432c>
   15904:	ldr	r3, [fp, #-8]
   15908:	mov	r0, r3
   1590c:	sub	sp, fp, #4
   15910:	pop	{fp, pc}
   15914:	andeq	r1, r3, r4, asr #3
   15918:	push	{fp, lr}
   1591c:	add	fp, sp, #4
   15920:	sub	sp, sp, #16
   15924:	str	r0, [fp, #-16]
   15928:	str	r1, [fp, #-20]	; 0xffffffec
   1592c:	bl	158a4 <__assert_fail@plt+0x4308>
   15930:	str	r0, [fp, #-8]
   15934:	ldr	r3, [fp, #-16]
   15938:	mov	r2, #4096	; 0x1000
   1593c:	str	r2, [r3, #8]
   15940:	bl	15838 <__assert_fail@plt+0x429c>
   15944:	mov	r2, r0
   15948:	ldr	r3, [fp, #-16]
   1594c:	str	r2, [r3, #4]
   15950:	ldr	r3, [fp, #-16]
   15954:	mov	r2, #0
   15958:	str	r2, [r3]
   1595c:	ldr	r3, [fp, #-16]
   15960:	ldr	r2, [r3, #4]
   15964:	ldr	r3, [fp, #-8]
   15968:	cmp	r2, r3
   1596c:	bcs	15978 <__assert_fail@plt+0x43dc>
   15970:	mov	r3, #1
   15974:	b	15a64 <__assert_fail@plt+0x44c8>
   15978:	ldr	r2, [fp, #-20]	; 0xffffffec
   1597c:	ldr	r3, [fp, #-8]
   15980:	add	r2, r2, r3
   15984:	ldr	r3, [fp, #-16]
   15988:	ldr	r3, [r3, #4]
   1598c:	cmp	r2, r3
   15990:	bcc	1599c <__assert_fail@plt+0x4400>
   15994:	mov	r3, #2
   15998:	b	15a64 <__assert_fail@plt+0x44c8>
   1599c:	ldr	r3, [fp, #-16]
   159a0:	ldr	r2, [r3, #4]
   159a4:	ldr	r3, [fp, #-8]
   159a8:	sub	r2, r2, r3
   159ac:	ldr	r3, [fp, #-16]
   159b0:	str	r2, [r3, #4]
   159b4:	ldr	r3, [fp, #-16]
   159b8:	ldr	r2, [r3, #4]
   159bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   159c0:	sub	r2, r2, r3
   159c4:	ldr	r3, [fp, #-16]
   159c8:	str	r2, [r3, #4]
   159cc:	ldr	r3, [fp, #-16]
   159d0:	ldr	r3, [r3, #4]
   159d4:	lsr	r3, r3, #2
   159d8:	sub	r2, r3, #2
   159dc:	ldr	r3, [fp, #-16]
   159e0:	str	r2, [r3, #16]
   159e4:	ldr	r3, [fp, #-16]
   159e8:	ldr	r3, [r3, #16]
   159ec:	cmp	r3, #0
   159f0:	bne	15a08 <__assert_fail@plt+0x446c>
   159f4:	ldr	r3, [pc, #116]	; 15a70 <__assert_fail@plt+0x44d4>
   159f8:	ldr	r2, [pc, #116]	; 15a74 <__assert_fail@plt+0x44d8>
   159fc:	ldr	r1, [pc, #116]	; 15a78 <__assert_fail@plt+0x44dc>
   15a00:	ldr	r0, [pc, #116]	; 15a7c <__assert_fail@plt+0x44e0>
   15a04:	bl	1159c <__assert_fail@plt>
   15a08:	ldr	r3, [fp, #-16]
   15a0c:	mov	r2, #0
   15a10:	str	r2, [r3, #20]
   15a14:	ldr	r3, [fp, #-16]
   15a18:	mov	r2, #0
   15a1c:	str	r2, [r3, #24]
   15a20:	ldr	r3, [fp, #-16]
   15a24:	mov	r2, #0
   15a28:	str	r2, [r3, #28]
   15a2c:	ldr	r3, [fp, #-16]
   15a30:	ldr	r2, [pc, #72]	; 15a80 <__assert_fail@plt+0x44e4>
   15a34:	str	r2, [r3, #32]
   15a38:	ldr	r3, [fp, #-16]
   15a3c:	mov	r2, #0
   15a40:	str	r2, [r3, #36]	; 0x24
   15a44:	ldr	r3, [fp, #-16]
   15a48:	mov	r2, #0
   15a4c:	str	r2, [r3, #40]	; 0x28
   15a50:	ldr	r3, [fp, #-16]
   15a54:	ldr	r2, [r3, #4]
   15a58:	ldr	r3, [fp, #-16]
   15a5c:	str	r2, [r3, #12]
   15a60:	mov	r3, #0
   15a64:	mov	r0, r3
   15a68:	sub	sp, fp, #4
   15a6c:	pop	{fp, pc}
   15a70:	andeq	r0, r2, r0, ror #5
   15a74:	andeq	r0, r0, r6, lsl #4
   15a78:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   15a7c:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   15a80:	andeq	r5, r1, r4, ror r8
   15a84:	push	{fp}		; (str fp, [sp, #-4]!)
   15a88:	add	fp, sp, #0
   15a8c:	sub	sp, sp, #12
   15a90:	str	r0, [fp, #-8]
   15a94:	ldr	r3, [fp, #-8]
   15a98:	ldr	r3, [r3, #4]
   15a9c:	cmp	r3, #131072	; 0x20000
   15aa0:	bcs	15ab8 <__assert_fail@plt+0x451c>
   15aa4:	ldr	r3, [fp, #-8]
   15aa8:	ldr	r2, [r3, #4]
   15aac:	ldr	r3, [fp, #-8]
   15ab0:	str	r2, [r3, #12]
   15ab4:	b	15ae8 <__assert_fail@plt+0x454c>
   15ab8:	ldr	r3, [fp, #-8]
   15abc:	ldr	r3, [r3, #8]
   15ac0:	cmp	r3, #131072	; 0x20000
   15ac4:	bls	15adc <__assert_fail@plt+0x4540>
   15ac8:	ldr	r3, [fp, #-8]
   15acc:	ldr	r2, [r3, #8]
   15ad0:	ldr	r3, [fp, #-8]
   15ad4:	str	r2, [r3, #12]
   15ad8:	b	15ae8 <__assert_fail@plt+0x454c>
   15adc:	ldr	r3, [fp, #-8]
   15ae0:	mov	r2, #131072	; 0x20000
   15ae4:	str	r2, [r3, #12]
   15ae8:	nop			; (mov r0, r0)
   15aec:	add	sp, fp, #0
   15af0:	pop	{fp}		; (ldr fp, [sp], #4)
   15af4:	bx	lr
   15af8:	push	{fp, lr}
   15afc:	add	fp, sp, #4
   15b00:	sub	sp, sp, #16
   15b04:	str	r0, [fp, #-8]
   15b08:	str	r1, [fp, #-12]
   15b0c:	str	r2, [fp, #-16]
   15b10:	ldr	r3, [fp, #-12]
   15b14:	mov	r2, #0
   15b18:	str	r2, [r3]
   15b1c:	ldr	r3, [fp, #-12]
   15b20:	mov	r2, #0
   15b24:	str	r2, [r3, #16]
   15b28:	ldr	r3, [fp, #-12]
   15b2c:	mov	r2, #0
   15b30:	str	r2, [r3, #4]
   15b34:	ldr	r3, [fp, #-12]
   15b38:	mov	r2, #0
   15b3c:	str	r2, [r3, #8]
   15b40:	ldr	r3, [fp, #-12]
   15b44:	mov	r2, #0
   15b48:	str	r2, [r3, #36]	; 0x24
   15b4c:	ldr	r3, [fp, #-12]
   15b50:	mov	r2, #0
   15b54:	str	r2, [r3, #40]	; 0x28
   15b58:	ldr	r3, [fp, #-8]
   15b5c:	ldr	r3, [r3, #12]
   15b60:	ldr	r2, [pc, #136]	; 15bf0 <__assert_fail@plt+0x4654>
   15b64:	cmp	r3, r2
   15b68:	bls	15b80 <__assert_fail@plt+0x45e4>
   15b6c:	ldr	r3, [pc, #128]	; 15bf4 <__assert_fail@plt+0x4658>
   15b70:	mov	r2, #572	; 0x23c
   15b74:	ldr	r1, [pc, #124]	; 15bf8 <__assert_fail@plt+0x465c>
   15b78:	ldr	r0, [pc, #124]	; 15bfc <__assert_fail@plt+0x4660>
   15b7c:	bl	1159c <__assert_fail@plt>
   15b80:	ldr	r3, [fp, #-8]
   15b84:	ldr	r3, [r3, #12]
   15b88:	add	r3, r3, #1
   15b8c:	mov	r0, r3
   15b90:	bl	1b7ac <__assert_fail@plt+0xa210>
   15b94:	mov	r3, r0
   15b98:	mov	r2, r3
   15b9c:	ldr	r3, [fp, #-12]
   15ba0:	str	r2, [r3, #12]
   15ba4:	ldr	r3, [fp, #-12]
   15ba8:	mov	r2, #0
   15bac:	str	r2, [r3, #20]
   15bb0:	ldr	r3, [fp, #-12]
   15bb4:	ldr	r2, [r3, #20]
   15bb8:	ldr	r3, [fp, #-12]
   15bbc:	str	r2, [r3, #16]
   15bc0:	ldr	r3, [fp, #-12]
   15bc4:	mov	r2, #0
   15bc8:	str	r2, [r3, #28]
   15bcc:	ldr	r3, [fp, #-12]
   15bd0:	mvn	r2, #0
   15bd4:	str	r2, [r3, #32]
   15bd8:	ldr	r3, [fp, #-12]
   15bdc:	ldr	r2, [fp, #-16]
   15be0:	str	r2, [r3, #24]
   15be4:	nop			; (mov r0, r0)
   15be8:	sub	sp, fp, #4
   15bec:	pop	{fp, pc}
   15bf0:	svcvc	0x00fff7ff
   15bf4:	strdeq	r0, [r2], -r4
   15bf8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   15bfc:	andeq	r0, r2, r8, lsl #4
   15c00:	push	{fp}		; (str fp, [sp, #-4]!)
   15c04:	add	fp, sp, #0
   15c08:	sub	sp, sp, #12
   15c0c:	str	r0, [fp, #-8]
   15c10:	str	r1, [fp, #-12]
   15c14:	ldr	r3, [fp, #-8]
   15c18:	ldr	r2, [r3, #28]
   15c1c:	ldr	r3, [fp, #-12]
   15c20:	str	r2, [r3]
   15c24:	ldr	r3, [fp, #-12]
   15c28:	ldr	r2, [r3, #20]
   15c2c:	ldr	r3, [fp, #-12]
   15c30:	str	r2, [r3, #16]
   15c34:	ldr	r3, [fp, #-12]
   15c38:	mov	r2, #0
   15c3c:	str	r2, [r3, #28]
   15c40:	ldr	r3, [fp, #-12]
   15c44:	mvn	r2, #0
   15c48:	str	r2, [r3, #32]
   15c4c:	nop			; (mov r0, r0)
   15c50:	add	sp, fp, #0
   15c54:	pop	{fp}		; (ldr fp, [sp], #4)
   15c58:	bx	lr
   15c5c:	push	{r4, fp, lr}
   15c60:	add	fp, sp, #8
   15c64:	sub	sp, sp, #36	; 0x24
   15c68:	str	r0, [fp, #-32]	; 0xffffffe0
   15c6c:	str	r1, [fp, #-36]	; 0xffffffdc
   15c70:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15c74:	bl	11368 <getenv@plt>
   15c78:	str	r0, [fp, #-16]
   15c7c:	ldr	r3, [fp, #-16]
   15c80:	cmp	r3, #0
   15c84:	beq	15cf4 <__assert_fail@plt+0x4758>
   15c88:	sub	r2, fp, #24
   15c8c:	sub	r1, fp, #20
   15c90:	mov	r3, #0
   15c94:	str	r3, [sp]
   15c98:	mov	r3, r2
   15c9c:	mov	r2, #10
   15ca0:	ldr	r0, [fp, #-16]
   15ca4:	bl	1c3e0 <__assert_fail@plt+0xae44>
   15ca8:	mov	r3, r0
   15cac:	cmp	r3, #0
   15cb0:	bne	15ccc <__assert_fail@plt+0x4730>
   15cb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15cb8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15cbc:	cmp	r2, r3
   15cc0:	bls	15cf4 <__assert_fail@plt+0x4758>
   15cc4:	mov	r3, #1
   15cc8:	b	15cf8 <__assert_fail@plt+0x475c>
   15ccc:	bl	1141c <__errno_location@plt>
   15cd0:	mov	r3, r0
   15cd4:	ldr	r4, [r3]
   15cd8:	ldr	r0, [pc, #36]	; 15d04 <__assert_fail@plt+0x4768>
   15cdc:	bl	113d4 <gettext@plt>
   15ce0:	mov	r2, r0
   15ce4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15ce8:	mov	r1, r4
   15cec:	mov	r0, #1
   15cf0:	bl	11344 <error@plt>
   15cf4:	mov	r3, #0
   15cf8:	mov	r0, r3
   15cfc:	sub	sp, fp, #8
   15d00:	pop	{r4, fp, pc}
   15d04:	andeq	r0, r2, ip, lsr #4
   15d08:	push	{fp, lr}
   15d0c:	add	fp, sp, #4
   15d10:	sub	sp, sp, #16
   15d14:	str	r0, [fp, #-16]
   15d18:	mov	r3, #0
   15d1c:	str	r3, [fp, #-12]
   15d20:	ldr	r3, [fp, #-12]
   15d24:	str	r3, [fp, #-8]
   15d28:	b	15d64 <__assert_fail@plt+0x47c8>
   15d2c:	ldr	r3, [fp, #-12]
   15d30:	add	r3, r3, #1
   15d34:	str	r3, [fp, #-12]
   15d38:	ldr	r3, [fp, #-16]
   15d3c:	ldr	r3, [r3]
   15d40:	mov	r0, r3
   15d44:	bl	113ec <strlen@plt>
   15d48:	mov	r2, r0
   15d4c:	ldr	r3, [fp, #-8]
   15d50:	add	r3, r3, r2
   15d54:	str	r3, [fp, #-8]
   15d58:	ldr	r3, [fp, #-16]
   15d5c:	add	r3, r3, #4
   15d60:	str	r3, [fp, #-16]
   15d64:	ldr	r3, [fp, #-16]
   15d68:	ldr	r3, [r3]
   15d6c:	cmp	r3, #0
   15d70:	bne	15d2c <__assert_fail@plt+0x4790>
   15d74:	ldr	r1, [fp, #-12]
   15d78:	ldr	r0, [pc, #68]	; 15dc4 <__assert_fail@plt+0x4828>
   15d7c:	bl	15c5c <__assert_fail@plt+0x46c0>
   15d80:	mov	r3, r0
   15d84:	cmp	r3, #0
   15d88:	bne	15da4 <__assert_fail@plt+0x4808>
   15d8c:	ldr	r1, [fp, #-8]
   15d90:	ldr	r0, [pc, #48]	; 15dc8 <__assert_fail@plt+0x482c>
   15d94:	bl	15c5c <__assert_fail@plt+0x46c0>
   15d98:	mov	r3, r0
   15d9c:	cmp	r3, #0
   15da0:	beq	15dac <__assert_fail@plt+0x4810>
   15da4:	mov	r3, #1
   15da8:	b	15db0 <__assert_fail@plt+0x4814>
   15dac:	mov	r3, #0
   15db0:	and	r3, r3, #1
   15db4:	uxtb	r3, r3
   15db8:	mov	r0, r3
   15dbc:	sub	sp, fp, #4
   15dc0:	pop	{fp, pc}
   15dc4:	andeq	r0, r2, ip, ror #4
   15dc8:	muleq	r2, r4, r2
   15dcc:	push	{r4, fp, lr}
   15dd0:	add	fp, sp, #8
   15dd4:	sub	sp, sp, #28
   15dd8:	ldr	r3, [pc, #332]	; 15f2c <__assert_fail@plt+0x4990>
   15ddc:	str	r3, [fp, #-24]	; 0xffffffe8
   15de0:	mvn	r3, #0
   15de4:	str	r3, [fp, #-16]
   15de8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15dec:	bl	16f8c <__assert_fail@plt+0x59f0>
   15df0:	str	r0, [fp, #-28]	; 0xffffffe4
   15df4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15df8:	cmp	r3, #0
   15dfc:	beq	15f1c <__assert_fail@plt+0x4980>
   15e00:	mov	r3, #0
   15e04:	str	r3, [fp, #-20]	; 0xffffffec
   15e08:	bl	1141c <__errno_location@plt>
   15e0c:	mov	r2, r0
   15e10:	mov	r3, #0
   15e14:	str	r3, [r2]
   15e18:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15e1c:	bl	11500 <readdir64@plt>
   15e20:	str	r0, [fp, #-32]	; 0xffffffe0
   15e24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15e28:	cmp	r3, #0
   15e2c:	bne	15e80 <__assert_fail@plt+0x48e4>
   15e30:	bl	1141c <__errno_location@plt>
   15e34:	mov	r3, r0
   15e38:	ldr	r3, [r3]
   15e3c:	cmp	r3, #0
   15e40:	beq	15efc <__assert_fail@plt+0x4960>
   15e44:	bl	1141c <__errno_location@plt>
   15e48:	mov	r3, r0
   15e4c:	ldr	r4, [r3]
   15e50:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15e54:	mov	r1, #8
   15e58:	mov	r0, #0
   15e5c:	bl	1a898 <__assert_fail@plt+0x92fc>
   15e60:	mov	r3, r0
   15e64:	ldr	r2, [pc, #196]	; 15f30 <__assert_fail@plt+0x4994>
   15e68:	mov	r1, r4
   15e6c:	mov	r0, #0
   15e70:	bl	11344 <error@plt>
   15e74:	mov	r3, #0
   15e78:	str	r3, [fp, #-20]	; 0xffffffec
   15e7c:	b	15efc <__assert_fail@plt+0x4960>
   15e80:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15e84:	ldrb	r3, [r3, #19]
   15e88:	cmp	r3, #46	; 0x2e
   15e8c:	bne	15ec0 <__assert_fail@plt+0x4924>
   15e90:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15e94:	ldrb	r3, [r3, #20]
   15e98:	cmp	r3, #0
   15e9c:	beq	15e08 <__assert_fail@plt+0x486c>
   15ea0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15ea4:	ldrb	r3, [r3, #20]
   15ea8:	cmp	r3, #46	; 0x2e
   15eac:	bne	15ec0 <__assert_fail@plt+0x4924>
   15eb0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15eb4:	ldrb	r3, [r3, #21]
   15eb8:	cmp	r3, #0
   15ebc:	beq	15e08 <__assert_fail@plt+0x486c>
   15ec0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15ec4:	add	r3, r3, #19
   15ec8:	mov	r1, #0
   15ecc:	mov	r0, r3
   15ed0:	bl	16788 <__assert_fail@plt+0x51ec>
   15ed4:	str	r0, [fp, #-36]	; 0xffffffdc
   15ed8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15edc:	ldr	r3, [fp, #-16]
   15ee0:	cmp	r2, r3
   15ee4:	ble	15ef0 <__assert_fail@plt+0x4954>
   15ee8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15eec:	str	r3, [fp, #-16]
   15ef0:	mov	r3, #1
   15ef4:	str	r3, [fp, #-20]	; 0xffffffec
   15ef8:	b	15e08 <__assert_fail@plt+0x486c>
   15efc:	nop			; (mov r0, r0)
   15f00:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15f04:	bl	11590 <closedir@plt>
   15f08:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f0c:	cmp	r3, #0
   15f10:	beq	15f1c <__assert_fail@plt+0x4980>
   15f14:	ldr	r3, [fp, #-16]
   15f18:	b	15f20 <__assert_fail@plt+0x4984>
   15f1c:	mvn	r3, #0
   15f20:	mov	r0, r3
   15f24:	sub	sp, fp, #8
   15f28:	pop	{r4, fp, pc}
   15f2c:	andeq	r0, r2, r4, lsl #6
   15f30:	andeq	r0, r2, r4, lsl r3
   15f34:	push	{fp, lr}
   15f38:	add	fp, sp, #4
   15f3c:	sub	sp, sp, #24
   15f40:	bl	15dcc <__assert_fail@plt+0x4830>
   15f44:	str	r0, [fp, #-8]
   15f48:	ldr	r3, [fp, #-8]
   15f4c:	cmp	r3, #0
   15f50:	blt	15f5c <__assert_fail@plt+0x49c0>
   15f54:	ldr	r3, [fp, #-8]
   15f58:	b	15fc8 <__assert_fail@plt+0x4a2c>
   15f5c:	mov	r0, #4
   15f60:	bl	11284 <sysconf@plt>
   15f64:	str	r0, [fp, #-8]
   15f68:	ldr	r3, [fp, #-8]
   15f6c:	cmn	r3, #1
   15f70:	bne	15f7c <__assert_fail@plt+0x49e0>
   15f74:	mov	r3, #20
   15f78:	str	r3, [fp, #-8]
   15f7c:	sub	r3, fp, #28
   15f80:	mov	r1, r3
   15f84:	mov	r0, #7
   15f88:	bl	1129c <getrlimit64@plt>
   15f8c:	mov	r3, r0
   15f90:	cmp	r3, #0
   15f94:	bne	15fc4 <__assert_fail@plt+0x4a28>
   15f98:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15f9c:	mvn	r0, #0
   15fa0:	mvn	r1, #0
   15fa4:	cmp	r3, r1
   15fa8:	cmpeq	r2, r0
   15fac:	bne	15fb8 <__assert_fail@plt+0x4a1c>
   15fb0:	ldr	r3, [fp, #-8]
   15fb4:	b	15fc8 <__assert_fail@plt+0x4a2c>
   15fb8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15fbc:	mov	r3, r2
   15fc0:	b	15fc8 <__assert_fail@plt+0x4a2c>
   15fc4:	ldr	r3, [fp, #-8]
   15fc8:	mov	r0, r3
   15fcc:	sub	sp, fp, #4
   15fd0:	pop	{fp, pc}
   15fd4:	push	{fp, lr}
   15fd8:	add	fp, sp, #4
   15fdc:	sub	sp, sp, #544	; 0x220
   15fe0:	str	r0, [fp, #-536]	; 0xfffffde8
   15fe4:	str	r1, [fp, #-540]	; 0xfffffde4
   15fe8:	str	r2, [fp, #-544]	; 0xfffffde0
   15fec:	str	r3, [fp, #-548]	; 0xfffffddc
   15ff0:	mov	r3, #0
   15ff4:	str	r3, [fp, #-20]	; 0xffffffec
   15ff8:	b	1616c <__assert_fail@plt+0x4bd0>
   15ffc:	ldr	r2, [fp, #-540]	; 0xfffffde4
   16000:	ldr	r3, [fp, #-536]	; 0xfffffde8
   16004:	sub	r3, r2, r3
   16008:	str	r3, [fp, #-12]
   1600c:	ldr	r3, [fp, #-12]
   16010:	cmp	r3, #64	; 0x40
   16014:	ble	16020 <__assert_fail@plt+0x4a84>
   16018:	mov	r3, #64	; 0x40
   1601c:	str	r3, [fp, #-12]
   16020:	mov	r3, #0
   16024:	str	r3, [fp, #-8]
   16028:	b	16098 <__assert_fail@plt+0x4afc>
   1602c:	sub	r3, fp, #4
   16030:	sub	r2, r3, #528	; 0x210
   16034:	ldr	r3, [fp, #-8]
   16038:	lsl	r3, r3, #3
   1603c:	add	r3, r2, r3
   16040:	add	r3, r3, #4
   16044:	mov	r2, #5
   16048:	strh	r2, [r3]
   1604c:	sub	r3, fp, #4
   16050:	sub	r2, r3, #528	; 0x210
   16054:	ldr	r3, [fp, #-8]
   16058:	lsl	r3, r3, #3
   1605c:	add	r3, r2, r3
   16060:	add	r3, r3, #6
   16064:	mov	r2, #0
   16068:	strh	r2, [r3]
   1606c:	ldr	r2, [fp, #-536]	; 0xfffffde8
   16070:	ldr	r3, [fp, #-8]
   16074:	add	r2, r2, r3
   16078:	ldr	r3, [fp, #-8]
   1607c:	lsl	r3, r3, #3
   16080:	sub	r1, fp, #4
   16084:	add	r3, r1, r3
   16088:	str	r2, [r3, #-528]	; 0xfffffdf0
   1608c:	ldr	r3, [fp, #-8]
   16090:	add	r3, r3, #1
   16094:	str	r3, [fp, #-8]
   16098:	ldr	r2, [fp, #-8]
   1609c:	ldr	r3, [fp, #-12]
   160a0:	cmp	r2, r3
   160a4:	blt	1602c <__assert_fail@plt+0x4a90>
   160a8:	ldr	r1, [fp, #-12]
   160ac:	sub	r3, fp, #532	; 0x214
   160b0:	mov	r2, #0
   160b4:	mov	r0, r3
   160b8:	bl	112d8 <poll@plt>
   160bc:	str	r0, [fp, #-20]	; 0xffffffec
   160c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   160c4:	cmn	r3, #1
   160c8:	bne	160d4 <__assert_fail@plt+0x4b38>
   160cc:	mvn	r3, #0
   160d0:	b	16180 <__assert_fail@plt+0x4be4>
   160d4:	mov	r3, #0
   160d8:	str	r3, [fp, #-16]
   160dc:	b	1614c <__assert_fail@plt+0x4bb0>
   160e0:	sub	r3, fp, #4
   160e4:	sub	r2, r3, #528	; 0x210
   160e8:	ldr	r3, [fp, #-16]
   160ec:	lsl	r3, r3, #3
   160f0:	add	r3, r2, r3
   160f4:	add	r3, r3, #6
   160f8:	ldrsh	r3, [r3]
   160fc:	cmp	r3, #32
   16100:	beq	16140 <__assert_fail@plt+0x4ba4>
   16104:	ldr	r3, [fp, #-16]
   16108:	lsl	r3, r3, #3
   1610c:	sub	r2, fp, #4
   16110:	add	r3, r2, r3
   16114:	ldr	r2, [r3, #-528]	; 0xfffffdf0
   16118:	ldr	r3, [fp, #-544]	; 0xfffffde0
   1611c:	ldr	r1, [fp, #-548]	; 0xfffffddc
   16120:	mov	r0, r2
   16124:	blx	r3
   16128:	str	r0, [fp, #-20]	; 0xffffffec
   1612c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16130:	cmp	r3, #0
   16134:	beq	16140 <__assert_fail@plt+0x4ba4>
   16138:	ldr	r3, [fp, #-20]	; 0xffffffec
   1613c:	b	16180 <__assert_fail@plt+0x4be4>
   16140:	ldr	r3, [fp, #-16]
   16144:	add	r3, r3, #1
   16148:	str	r3, [fp, #-16]
   1614c:	ldr	r2, [fp, #-16]
   16150:	ldr	r3, [fp, #-12]
   16154:	cmp	r2, r3
   16158:	blt	160e0 <__assert_fail@plt+0x4b44>
   1615c:	ldr	r2, [fp, #-536]	; 0xfffffde8
   16160:	ldr	r3, [fp, #-12]
   16164:	add	r3, r2, r3
   16168:	str	r3, [fp, #-536]	; 0xfffffde8
   1616c:	ldr	r2, [fp, #-536]	; 0xfffffde8
   16170:	ldr	r3, [fp, #-540]	; 0xfffffde4
   16174:	cmp	r2, r3
   16178:	blt	15ffc <__assert_fail@plt+0x4a60>
   1617c:	mov	r3, #0
   16180:	mov	r0, r3
   16184:	sub	sp, fp, #4
   16188:	pop	{fp, pc}
   1618c:	push	{fp, lr}
   16190:	add	fp, sp, #4
   16194:	sub	sp, sp, #16
   16198:	str	r0, [fp, #-16]
   1619c:	mov	r1, #1
   161a0:	ldr	r0, [fp, #-16]
   161a4:	bl	1cadc <__assert_fail@plt+0xb540>
   161a8:	str	r0, [fp, #-8]
   161ac:	ldr	r3, [fp, #-8]
   161b0:	and	r3, r3, #1
   161b4:	mov	r0, r3
   161b8:	sub	sp, fp, #4
   161bc:	pop	{fp, pc}
   161c0:	push	{fp, lr}
   161c4:	add	fp, sp, #4
   161c8:	sub	sp, sp, #16
   161cc:	str	r0, [fp, #-16]
   161d0:	str	r1, [fp, #-20]	; 0xffffffec
   161d4:	ldr	r0, [fp, #-16]
   161d8:	bl	1618c <__assert_fail@plt+0x4bf0>
   161dc:	mov	r3, r0
   161e0:	cmp	r3, #0
   161e4:	beq	161f0 <__assert_fail@plt+0x4c54>
   161e8:	mov	r3, #0
   161ec:	b	1627c <__assert_fail@plt+0x4ce0>
   161f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   161f4:	str	r3, [fp, #-8]
   161f8:	ldr	r3, [fp, #-8]
   161fc:	ldr	r0, [r3]
   16200:	ldr	r3, [fp, #-8]
   16204:	ldr	r3, [r3, #4]
   16208:	add	r3, r3, #1
   1620c:	lsl	r1, r3, #2
   16210:	ldr	r3, [fp, #-8]
   16214:	add	r3, r3, #8
   16218:	mov	r2, r3
   1621c:	bl	169ec <__assert_fail@plt+0x5450>
   16220:	str	r0, [fp, #-12]
   16224:	ldr	r3, [fp, #-12]
   16228:	cmp	r3, #0
   1622c:	beq	16278 <__assert_fail@plt+0x4cdc>
   16230:	ldr	r3, [fp, #-8]
   16234:	ldr	r2, [fp, #-12]
   16238:	str	r2, [r3]
   1623c:	ldr	r3, [fp, #-8]
   16240:	ldr	r2, [r3]
   16244:	ldr	r3, [fp, #-8]
   16248:	ldr	r3, [r3, #4]
   1624c:	lsl	r3, r3, #2
   16250:	add	r3, r2, r3
   16254:	ldr	r2, [fp, #-16]
   16258:	str	r2, [r3]
   1625c:	ldr	r3, [fp, #-8]
   16260:	ldr	r3, [r3, #4]
   16264:	add	r2, r3, #1
   16268:	ldr	r3, [fp, #-8]
   1626c:	str	r2, [r3, #4]
   16270:	mov	r3, #0
   16274:	b	1627c <__assert_fail@plt+0x4ce0>
   16278:	mvn	r3, #0
   1627c:	mov	r0, r3
   16280:	sub	sp, fp, #4
   16284:	pop	{fp, pc}
   16288:	push	{fp, lr}
   1628c:	add	fp, sp, #4
   16290:	sub	sp, sp, #16
   16294:	bl	15f34 <__assert_fail@plt+0x4998>
   16298:	str	r0, [fp, #-8]
   1629c:	mov	r3, #0
   162a0:	str	r3, [fp, #-20]	; 0xffffffec
   162a4:	mov	r3, #0
   162a8:	str	r3, [fp, #-12]
   162ac:	ldr	r3, [fp, #-12]
   162b0:	str	r3, [fp, #-16]
   162b4:	ldr	r3, [fp, #-8]
   162b8:	cmn	r3, #-2147483647	; 0x80000001
   162bc:	beq	162cc <__assert_fail@plt+0x4d30>
   162c0:	ldr	r3, [fp, #-8]
   162c4:	add	r3, r3, #1
   162c8:	str	r3, [fp, #-8]
   162cc:	sub	r3, fp, #20
   162d0:	ldr	r2, [pc, #44]	; 16304 <__assert_fail@plt+0x4d68>
   162d4:	ldr	r1, [fp, #-8]
   162d8:	mov	r0, #0
   162dc:	bl	15fd4 <__assert_fail@plt+0x4a38>
   162e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   162e4:	ldr	r2, [pc, #28]	; 16308 <__assert_fail@plt+0x4d6c>
   162e8:	str	r3, [r2]
   162ec:	ldr	r3, [fp, #-16]
   162f0:	ldr	r2, [pc, #20]	; 1630c <__assert_fail@plt+0x4d70>
   162f4:	str	r3, [r2]
   162f8:	nop			; (mov r0, r0)
   162fc:	sub	sp, fp, #4
   16300:	pop	{fp, pc}
   16304:	andeq	r6, r1, r0, asr #3
   16308:	muleq	r3, r8, r2
   1630c:	muleq	r3, ip, r2
   16310:	push	{fp, lr}
   16314:	add	fp, sp, #4
   16318:	sub	sp, sp, #16
   1631c:	str	r0, [fp, #-16]
   16320:	str	r1, [fp, #-20]	; 0xffffffec
   16324:	ldr	r0, [fp, #-16]
   16328:	bl	1618c <__assert_fail@plt+0x4bf0>
   1632c:	mov	r3, r0
   16330:	cmp	r3, #0
   16334:	bne	163e8 <__assert_fail@plt+0x4e4c>
   16338:	ldr	r3, [fp, #-20]	; 0xffffffec
   1633c:	str	r3, [fp, #-8]
   16340:	b	163b4 <__assert_fail@plt+0x4e18>
   16344:	ldr	r3, [fp, #-8]
   16348:	ldr	r2, [r3]
   1634c:	ldr	r3, [fp, #-8]
   16350:	ldr	r3, [r3, #8]
   16354:	lsl	r3, r3, #2
   16358:	add	r3, r2, r3
   1635c:	ldr	r2, [r3]
   16360:	ldr	r3, [fp, #-16]
   16364:	cmp	r2, r3
   16368:	bge	16384 <__assert_fail@plt+0x4de8>
   1636c:	ldr	r3, [fp, #-8]
   16370:	ldr	r3, [r3, #8]
   16374:	add	r2, r3, #1
   16378:	ldr	r3, [fp, #-8]
   1637c:	str	r2, [r3, #8]
   16380:	b	163b4 <__assert_fail@plt+0x4e18>
   16384:	ldr	r3, [fp, #-8]
   16388:	ldr	r2, [r3]
   1638c:	ldr	r3, [fp, #-8]
   16390:	ldr	r3, [r3, #8]
   16394:	lsl	r3, r3, #2
   16398:	add	r3, r2, r3
   1639c:	ldr	r2, [r3]
   163a0:	ldr	r3, [fp, #-16]
   163a4:	cmp	r2, r3
   163a8:	bne	163d0 <__assert_fail@plt+0x4e34>
   163ac:	mov	r3, #0
   163b0:	b	163ec <__assert_fail@plt+0x4e50>
   163b4:	ldr	r3, [fp, #-8]
   163b8:	ldr	r2, [r3, #8]
   163bc:	ldr	r3, [fp, #-8]
   163c0:	ldr	r3, [r3, #4]
   163c4:	cmp	r2, r3
   163c8:	bcc	16344 <__assert_fail@plt+0x4da8>
   163cc:	b	163d4 <__assert_fail@plt+0x4e38>
   163d0:	nop			; (mov r0, r0)
   163d4:	ldr	r3, [fp, #-8]
   163d8:	ldr	r2, [fp, #-16]
   163dc:	str	r2, [r3, #12]
   163e0:	mvn	r3, #0
   163e4:	b	163ec <__assert_fail@plt+0x4e50>
   163e8:	mov	r3, #0
   163ec:	mov	r0, r3
   163f0:	sub	sp, fp, #4
   163f4:	pop	{fp, pc}
   163f8:	push	{fp, lr}
   163fc:	add	fp, sp, #4
   16400:	sub	sp, sp, #32
   16404:	str	r0, [fp, #-32]	; 0xffffffe0
   16408:	str	r1, [fp, #-36]	; 0xffffffdc
   1640c:	bl	15f34 <__assert_fail@plt+0x4998>
   16410:	str	r0, [fp, #-8]
   16414:	ldr	r3, [fp, #-8]
   16418:	cmn	r3, #-2147483647	; 0x80000001
   1641c:	beq	1642c <__assert_fail@plt+0x4e90>
   16420:	ldr	r3, [fp, #-8]
   16424:	add	r3, r3, #1
   16428:	str	r3, [fp, #-8]
   1642c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16430:	str	r3, [fp, #-24]	; 0xffffffe8
   16434:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16438:	str	r3, [fp, #-20]	; 0xffffffec
   1643c:	mov	r3, #0
   16440:	str	r3, [fp, #-16]
   16444:	mvn	r3, #0
   16448:	str	r3, [fp, #-12]
   1644c:	sub	r3, fp, #24
   16450:	ldr	r2, [pc, #24]	; 16470 <__assert_fail@plt+0x4ed4>
   16454:	ldr	r1, [fp, #-8]
   16458:	mov	r0, #0
   1645c:	bl	15fd4 <__assert_fail@plt+0x4a38>
   16460:	ldr	r3, [fp, #-12]
   16464:	mov	r0, r3
   16468:	sub	sp, fp, #4
   1646c:	pop	{fp, pc}
   16470:	andeq	r6, r1, r0, lsl r3
   16474:	push	{fp, lr}
   16478:	add	fp, sp, #4
   1647c:	sub	sp, sp, #8
   16480:	mov	r3, #0
   16484:	strb	r3, [fp, #-5]
   16488:	mov	r1, #524288	; 0x80000
   1648c:	ldr	r0, [pc, #68]	; 164d8 <__assert_fail@plt+0x4f3c>
   16490:	bl	17078 <__assert_fail@plt+0x5adc>
   16494:	str	r0, [fp, #-12]
   16498:	ldr	r3, [fp, #-12]
   1649c:	cmp	r3, #0
   164a0:	blt	164c8 <__assert_fail@plt+0x4f2c>
   164a4:	ldr	r0, [fp, #-12]
   164a8:	bl	1618c <__assert_fail@plt+0x4bf0>
   164ac:	mov	r3, r0
   164b0:	cmp	r3, #0
   164b4:	movne	r3, #1
   164b8:	moveq	r3, #0
   164bc:	strb	r3, [fp, #-5]
   164c0:	ldr	r0, [fp, #-12]
   164c4:	bl	11584 <close@plt>
   164c8:	ldrb	r3, [fp, #-5]
   164cc:	mov	r0, r3
   164d0:	sub	sp, fp, #4
   164d4:	pop	{fp, pc}
   164d8:	andeq	r0, r2, r8, lsl r3
   164dc:	push	{r1, r2, r3}
   164e0:	push	{fp, lr}
   164e4:	add	fp, sp, #4
   164e8:	sub	sp, sp, #28
   164ec:	str	r0, [fp, #-28]	; 0xffffffe4
   164f0:	mov	r3, #0
   164f4:	str	r3, [fp, #-12]
   164f8:	ldr	r3, [fp, #4]
   164fc:	and	r3, r3, #64	; 0x40
   16500:	cmp	r3, #0
   16504:	beq	16524 <__assert_fail@plt+0x4f88>
   16508:	add	r3, fp, #8
   1650c:	str	r3, [fp, #-20]	; 0xffffffec
   16510:	ldr	r3, [fp, #-20]	; 0xffffffec
   16514:	add	r2, r3, #4
   16518:	str	r2, [fp, #-20]	; 0xffffffec
   1651c:	ldr	r3, [r3]
   16520:	str	r3, [fp, #-12]
   16524:	ldr	r3, [pc, #148]	; 165c0 <__assert_fail@plt+0x5024>
   16528:	ldrb	r3, [r3]
   1652c:	eor	r3, r3, #1
   16530:	uxtb	r3, r3
   16534:	cmp	r3, #0
   16538:	beq	1655c <__assert_fail@plt+0x4fc0>
   1653c:	bl	16474 <__assert_fail@plt+0x4ed8>
   16540:	mov	r3, r0
   16544:	mov	r2, r3
   16548:	ldr	r3, [pc, #116]	; 165c4 <__assert_fail@plt+0x5028>
   1654c:	strb	r2, [r3]
   16550:	ldr	r3, [pc, #104]	; 165c0 <__assert_fail@plt+0x5024>
   16554:	mov	r2, #1
   16558:	strb	r2, [r3]
   1655c:	ldr	r3, [fp, #4]
   16560:	orr	r3, r3, #524288	; 0x80000
   16564:	ldr	r2, [fp, #-12]
   16568:	mov	r1, r3
   1656c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16570:	bl	17078 <__assert_fail@plt+0x5adc>
   16574:	str	r0, [fp, #-16]
   16578:	ldr	r3, [fp, #-16]
   1657c:	cmp	r3, #0
   16580:	blt	165a8 <__assert_fail@plt+0x500c>
   16584:	ldr	r3, [pc, #56]	; 165c4 <__assert_fail@plt+0x5028>
   16588:	ldrb	r3, [r3]
   1658c:	eor	r3, r3, #1
   16590:	uxtb	r3, r3
   16594:	cmp	r3, #0
   16598:	beq	165a8 <__assert_fail@plt+0x500c>
   1659c:	mov	r1, #1
   165a0:	ldr	r0, [fp, #-16]
   165a4:	bl	16b84 <__assert_fail@plt+0x55e8>
   165a8:	ldr	r3, [fp, #-16]
   165ac:	mov	r0, r3
   165b0:	sub	sp, fp, #4
   165b4:	pop	{fp, lr}
   165b8:	add	sp, sp, #12
   165bc:	bx	lr
   165c0:	andeq	r1, r3, r0, lsr #5
   165c4:	andeq	r1, r3, r1, lsr #5
   165c8:	push	{fp, lr}
   165cc:	add	fp, sp, #4
   165d0:	ldr	r3, [pc, #40]	; 16600 <__assert_fail@plt+0x5064>
   165d4:	ldr	r3, [r3]
   165d8:	mov	r0, r3
   165dc:	bl	1cf94 <__assert_fail@plt+0xb9f8>
   165e0:	ldr	r3, [pc, #24]	; 16600 <__assert_fail@plt+0x5064>
   165e4:	mov	r2, #0
   165e8:	str	r2, [r3]
   165ec:	ldr	r3, [pc, #16]	; 16604 <__assert_fail@plt+0x5068>
   165f0:	mov	r2, #0
   165f4:	str	r2, [r3]
   165f8:	nop			; (mov r0, r0)
   165fc:	pop	{fp, pc}
   16600:	muleq	r3, r8, r2
   16604:	muleq	r3, ip, r2
   16608:	push	{fp, lr}
   1660c:	add	fp, sp, #4
   16610:	ldr	r0, [pc, #32]	; 16638 <__assert_fail@plt+0x509c>
   16614:	bl	11368 <getenv@plt>
   16618:	mov	r3, r0
   1661c:	cmp	r3, #0
   16620:	beq	1662c <__assert_fail@plt+0x5090>
   16624:	mov	r3, #1
   16628:	b	16630 <__assert_fail@plt+0x5094>
   1662c:	mov	r3, #0
   16630:	mov	r0, r3
   16634:	pop	{fp, pc}
   16638:	andeq	r0, r2, ip, lsl r3
   1663c:	push	{fp, lr}
   16640:	add	fp, sp, #4
   16644:	sub	sp, sp, #8
   16648:	mov	r3, #1
   1664c:	str	r3, [fp, #-8]
   16650:	ldr	r3, [pc, #116]	; 166cc <__assert_fail@plt+0x5130>
   16654:	ldr	r2, [r3]
   16658:	ldr	r3, [pc, #112]	; 166d0 <__assert_fail@plt+0x5134>
   1665c:	ldr	r3, [r3]
   16660:	mov	r1, r3
   16664:	mov	r0, r2
   16668:	bl	163f8 <__assert_fail@plt+0x4e5c>
   1666c:	str	r0, [fp, #-12]
   16670:	ldr	r3, [fp, #-12]
   16674:	cmp	r3, #0
   16678:	blt	166a0 <__assert_fail@plt+0x5104>
   1667c:	mov	r3, #0
   16680:	str	r3, [fp, #-8]
   16684:	ldr	r0, [pc, #72]	; 166d4 <__assert_fail@plt+0x5138>
   16688:	bl	113d4 <gettext@plt>
   1668c:	mov	r2, r0
   16690:	ldr	r3, [fp, #-12]
   16694:	mov	r1, #0
   16698:	mov	r0, #0
   1669c:	bl	11344 <error@plt>
   166a0:	ldr	r3, [fp, #-8]
   166a4:	cmp	r3, #0
   166a8:	bne	166c0 <__assert_fail@plt+0x5124>
   166ac:	ldr	r3, [pc, #36]	; 166d8 <__assert_fail@plt+0x513c>
   166b0:	mov	r2, #396	; 0x18c
   166b4:	ldr	r1, [pc, #32]	; 166dc <__assert_fail@plt+0x5140>
   166b8:	ldr	r0, [pc, #32]	; 166e0 <__assert_fail@plt+0x5144>
   166bc:	bl	1159c <__assert_fail@plt>
   166c0:	nop			; (mov r0, r0)
   166c4:	sub	sp, fp, #4
   166c8:	pop	{fp, pc}
   166cc:	muleq	r3, r8, r2
   166d0:	muleq	r3, ip, r2
   166d4:	andeq	r0, r2, r8, lsr r3
   166d8:	andeq	r0, r2, r8, ror #7
   166dc:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   166e0:	ldrdeq	r0, [r2], -ip
   166e4:	push	{r4, r5, r6, r7, fp, lr}
   166e8:	add	fp, sp, #20
   166ec:	sub	sp, sp, #24
   166f0:	str	r0, [fp, #-24]	; 0xffffffe8
   166f4:	ldr	r3, [pc, #112]	; 1676c <__assert_fail@plt+0x51d0>
   166f8:	ldr	r3, [r3]
   166fc:	mov	r0, r3
   16700:	bl	1cea4 <__assert_fail@plt+0xb908>
   16704:	ldr	r3, [pc, #100]	; 16770 <__assert_fail@plt+0x51d4>
   16708:	ldr	r4, [r3]
   1670c:	ldr	r3, [pc, #96]	; 16774 <__assert_fail@plt+0x51d8>
   16710:	ldr	r5, [r3]
   16714:	ldr	r0, [pc, #92]	; 16778 <__assert_fail@plt+0x51dc>
   16718:	bl	113d4 <gettext@plt>
   1671c:	mov	r6, r0
   16720:	ldr	r0, [pc, #84]	; 1677c <__assert_fail@plt+0x51e0>
   16724:	bl	113d4 <gettext@plt>
   16728:	mov	r7, r0
   1672c:	ldr	r0, [pc, #76]	; 16780 <__assert_fail@plt+0x51e4>
   16730:	bl	113d4 <gettext@plt>
   16734:	mov	r2, r0
   16738:	mov	r3, #0
   1673c:	str	r3, [sp, #12]
   16740:	str	r2, [sp, #8]
   16744:	str	r7, [sp, #4]
   16748:	str	r6, [sp]
   1674c:	mov	r3, r5
   16750:	ldr	r2, [pc, #44]	; 16784 <__assert_fail@plt+0x51e8>
   16754:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16758:	mov	r0, r4
   1675c:	bl	1b660 <__assert_fail@plt+0xa0c4>
   16760:	nop			; (mov r0, r0)
   16764:	sub	sp, fp, #20
   16768:	pop	{r4, r5, r6, r7, fp, pc}
   1676c:	ldrdeq	r1, [r3], -r8
   16770:	andeq	r1, r3, r4, ror #3
   16774:	andeq	r1, r3, r4, ror r1
   16778:	andeq	r0, r2, r4, lsl r4
   1677c:	andeq	r0, r2, r4, lsr #8
   16780:	andeq	r0, r2, r4, lsr r4
   16784:	andeq	r0, r2, r4, asr #8
   16788:	push	{r4, r5, r6, fp, lr}
   1678c:	add	fp, sp, #16
   16790:	sub	sp, sp, #28
   16794:	str	r0, [fp, #-32]	; 0xffffffe0
   16798:	str	r1, [fp, #-36]	; 0xffffffdc
   1679c:	bl	1141c <__errno_location@plt>
   167a0:	mov	r2, r0
   167a4:	mov	r3, #0
   167a8:	str	r3, [r2]
   167ac:	sub	r3, fp, #28
   167b0:	mov	r2, #10
   167b4:	mov	r1, r3
   167b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   167bc:	bl	111e8 <strtol@plt>
   167c0:	str	r0, [fp, #-24]	; 0xffffffe8
   167c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167c8:	cmn	r3, #-2147483647	; 0x80000001
   167cc:	beq	167dc <__assert_fail@plt+0x5240>
   167d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167d4:	cmp	r3, #-2147483648	; 0x80000000
   167d8:	bne	16828 <__assert_fail@plt+0x528c>
   167dc:	bl	1141c <__errno_location@plt>
   167e0:	mov	r3, r0
   167e4:	ldr	r3, [r3]
   167e8:	cmp	r3, #34	; 0x22
   167ec:	bne	1680c <__assert_fail@plt+0x5270>
   167f0:	bl	1141c <__errno_location@plt>
   167f4:	mov	r3, r0
   167f8:	ldr	r1, [r3]
   167fc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16800:	ldr	r2, [pc, #232]	; 168f0 <__assert_fail@plt+0x5354>
   16804:	mov	r0, #1
   16808:	bl	11344 <error@plt>
   1680c:	bl	1141c <__errno_location@plt>
   16810:	mov	r3, r0
   16814:	ldr	r1, [r3]
   16818:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1681c:	ldr	r2, [pc, #204]	; 168f0 <__assert_fail@plt+0x5354>
   16820:	mov	r0, #1
   16824:	bl	11344 <error@plt>
   16828:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1682c:	ldrb	r3, [r3]
   16830:	cmp	r3, #0
   16834:	beq	16894 <__assert_fail@plt+0x52f8>
   16838:	bl	1141c <__errno_location@plt>
   1683c:	mov	r3, r0
   16840:	ldr	r4, [r3]
   16844:	ldr	r0, [pc, #168]	; 168f4 <__assert_fail@plt+0x5358>
   16848:	bl	113d4 <gettext@plt>
   1684c:	mov	r5, r0
   16850:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16854:	mov	r2, r3
   16858:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1685c:	mov	r0, #0
   16860:	bl	1a898 <__assert_fail@plt+0x92fc>
   16864:	mov	r6, r0
   16868:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1686c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   16870:	mov	r0, #1
   16874:	bl	1a898 <__assert_fail@plt+0x92fc>
   16878:	mov	r3, r0
   1687c:	str	r3, [sp]
   16880:	mov	r3, r6
   16884:	mov	r2, r5
   16888:	mov	r1, r4
   1688c:	mov	r0, #1
   16890:	bl	11344 <error@plt>
   16894:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16898:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1689c:	cmp	r2, r3
   168a0:	bne	168e0 <__assert_fail@plt+0x5344>
   168a4:	bl	1141c <__errno_location@plt>
   168a8:	mov	r3, r0
   168ac:	ldr	r4, [r3]
   168b0:	ldr	r0, [pc, #64]	; 168f8 <__assert_fail@plt+0x535c>
   168b4:	bl	113d4 <gettext@plt>
   168b8:	mov	r5, r0
   168bc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   168c0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   168c4:	mov	r0, #0
   168c8:	bl	1a898 <__assert_fail@plt+0x92fc>
   168cc:	mov	r3, r0
   168d0:	mov	r2, r5
   168d4:	mov	r1, r4
   168d8:	mov	r0, #1
   168dc:	bl	11344 <error@plt>
   168e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168e4:	mov	r0, r3
   168e8:	sub	sp, fp, #16
   168ec:	pop	{r4, r5, r6, fp, pc}
   168f0:	andeq	r0, r2, r4, asr r4
   168f4:	andeq	r0, r2, r8, asr r4
   168f8:	andeq	r0, r2, r4, ror r4
   168fc:	push	{fp, lr}
   16900:	add	fp, sp, #4
   16904:	sub	sp, sp, #24
   16908:	str	r0, [fp, #-8]
   1690c:	str	r1, [fp, #-12]
   16910:	ldr	r0, [pc, #60]	; 16954 <__assert_fail@plt+0x53b8>
   16914:	bl	113d4 <gettext@plt>
   16918:	mov	r1, r0
   1691c:	ldr	r3, [pc, #52]	; 16958 <__assert_fail@plt+0x53bc>
   16920:	str	r3, [sp, #8]
   16924:	ldr	r3, [pc, #48]	; 1695c <__assert_fail@plt+0x53c0>
   16928:	str	r3, [sp, #4]
   1692c:	ldr	r3, [pc, #44]	; 16960 <__assert_fail@plt+0x53c4>
   16930:	str	r3, [sp]
   16934:	ldr	r3, [fp, #-12]
   16938:	ldr	r2, [pc, #36]	; 16964 <__assert_fail@plt+0x53c8>
   1693c:	ldr	r0, [fp, #-8]
   16940:	bl	11410 <fprintf@plt>
   16944:	mov	r3, r0
   16948:	mov	r0, r3
   1694c:	sub	sp, fp, #4
   16950:	pop	{fp, pc}
   16954:	andeq	r0, r2, ip, lsl #9
   16958:	andeq	r0, r2, r4, lsl #11
   1695c:	muleq	r2, ip, r5
   16960:	andeq	r0, r2, ip, asr #11
   16964:	andeq	r0, r2, ip, asr r5
   16968:	push	{fp}		; (str fp, [sp, #-4]!)
   1696c:	add	fp, sp, #0
   16970:	sub	sp, sp, #20
   16974:	str	r0, [fp, #-16]
   16978:	str	r1, [fp, #-20]	; 0xffffffec
   1697c:	ldr	r3, [fp, #-16]
   16980:	cmp	r3, #0
   16984:	bne	16994 <__assert_fail@plt+0x53f8>
   16988:	mov	r3, #16
   1698c:	str	r3, [fp, #-8]
   16990:	b	169c8 <__assert_fail@plt+0x542c>
   16994:	ldr	r3, [fp, #-16]
   16998:	str	r3, [fp, #-8]
   1699c:	b	169c8 <__assert_fail@plt+0x542c>
   169a0:	ldr	r3, [fp, #-8]
   169a4:	lsl	r2, r3, #1
   169a8:	ldr	r3, [fp, #-8]
   169ac:	cmp	r2, r3
   169b0:	bcs	169bc <__assert_fail@plt+0x5420>
   169b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   169b8:	b	169dc <__assert_fail@plt+0x5440>
   169bc:	ldr	r3, [fp, #-8]
   169c0:	lsl	r3, r3, #1
   169c4:	str	r3, [fp, #-8]
   169c8:	ldr	r2, [fp, #-8]
   169cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   169d0:	cmp	r2, r3
   169d4:	bcc	169a0 <__assert_fail@plt+0x5404>
   169d8:	ldr	r3, [fp, #-8]
   169dc:	mov	r0, r3
   169e0:	add	sp, fp, #0
   169e4:	pop	{fp}		; (ldr fp, [sp], #4)
   169e8:	bx	lr
   169ec:	push	{fp, lr}
   169f0:	add	fp, sp, #4
   169f4:	sub	sp, sp, #32
   169f8:	str	r0, [fp, #-24]	; 0xffffffe8
   169fc:	str	r1, [fp, #-28]	; 0xffffffe4
   16a00:	str	r2, [fp, #-32]	; 0xffffffe0
   16a04:	bl	1141c <__errno_location@plt>
   16a08:	mov	r3, r0
   16a0c:	ldr	r3, [r3]
   16a10:	str	r3, [fp, #-8]
   16a14:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16a18:	cmp	r3, #0
   16a1c:	bne	16a34 <__assert_fail@plt+0x5498>
   16a20:	ldr	r3, [pc, #248]	; 16b20 <__assert_fail@plt+0x5584>
   16a24:	mov	r2, #71	; 0x47
   16a28:	ldr	r1, [pc, #244]	; 16b24 <__assert_fail@plt+0x5588>
   16a2c:	ldr	r0, [pc, #244]	; 16b28 <__assert_fail@plt+0x558c>
   16a30:	bl	1159c <__assert_fail@plt>
   16a34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a38:	ldr	r3, [r3]
   16a3c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16a40:	mov	r0, r3
   16a44:	bl	16968 <__assert_fail@plt+0x53cc>
   16a48:	str	r0, [fp, #-16]
   16a4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a50:	ldr	r3, [r3]
   16a54:	cmp	r3, #0
   16a58:	bne	16a9c <__assert_fail@plt+0x5500>
   16a5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16a60:	cmp	r3, #0
   16a64:	beq	16a7c <__assert_fail@plt+0x54e0>
   16a68:	ldr	r3, [pc, #176]	; 16b20 <__assert_fail@plt+0x5584>
   16a6c:	mov	r2, #79	; 0x4f
   16a70:	ldr	r1, [pc, #172]	; 16b24 <__assert_fail@plt+0x5588>
   16a74:	ldr	r0, [pc, #176]	; 16b2c <__assert_fail@plt+0x5590>
   16a78:	bl	1159c <__assert_fail@plt>
   16a7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16a80:	ldr	r2, [fp, #-16]
   16a84:	str	r2, [r3]
   16a88:	ldr	r0, [fp, #-16]
   16a8c:	bl	1d104 <__assert_fail@plt+0xbb68>
   16a90:	mov	r3, r0
   16a94:	str	r3, [fp, #-12]
   16a98:	b	16af4 <__assert_fail@plt+0x5558>
   16a9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16aa0:	ldr	r2, [r3]
   16aa4:	ldr	r3, [fp, #-16]
   16aa8:	cmp	r2, r3
   16aac:	beq	16aec <__assert_fail@plt+0x5550>
   16ab0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16ab4:	ldr	r2, [fp, #-16]
   16ab8:	str	r2, [r3]
   16abc:	ldr	r1, [fp, #-16]
   16ac0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ac4:	bl	1d258 <__assert_fail@plt+0xbcbc>
   16ac8:	str	r0, [fp, #-12]
   16acc:	ldr	r3, [fp, #-12]
   16ad0:	cmp	r3, #0
   16ad4:	bne	16af4 <__assert_fail@plt+0x5558>
   16ad8:	bl	1141c <__errno_location@plt>
   16adc:	mov	r3, r0
   16ae0:	ldr	r3, [r3]
   16ae4:	str	r3, [fp, #-8]
   16ae8:	b	16af4 <__assert_fail@plt+0x5558>
   16aec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16af0:	str	r3, [fp, #-12]
   16af4:	ldr	r3, [fp, #-12]
   16af8:	cmp	r3, #0
   16afc:	beq	16b10 <__assert_fail@plt+0x5574>
   16b00:	bl	1141c <__errno_location@plt>
   16b04:	mov	r2, r0
   16b08:	ldr	r3, [fp, #-8]
   16b0c:	str	r3, [r2]
   16b10:	ldr	r3, [fp, #-12]
   16b14:	mov	r0, r3
   16b18:	sub	sp, fp, #4
   16b1c:	pop	{fp, pc}
   16b20:	andeq	r0, r2, r8, lsl #12
   16b24:	ldrdeq	r0, [r2], -ip
   16b28:	andeq	r0, r2, r8, ror #11
   16b2c:	strdeq	r0, [r2], -r4
   16b30:	push	{fp, lr}
   16b34:	add	fp, sp, #4
   16b38:	sub	sp, sp, #24
   16b3c:	str	r0, [fp, #-16]
   16b40:	str	r1, [fp, #-20]	; 0xffffffec
   16b44:	str	r2, [fp, #-24]	; 0xffffffe8
   16b48:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16b4c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16b50:	ldr	r0, [fp, #-16]
   16b54:	bl	169ec <__assert_fail@plt+0x5450>
   16b58:	str	r0, [fp, #-8]
   16b5c:	ldr	r3, [fp, #-8]
   16b60:	cmp	r3, #0
   16b64:	bne	16b74 <__assert_fail@plt+0x55d8>
   16b68:	ldr	r0, [fp, #-16]
   16b6c:	bl	1cf94 <__assert_fail@plt+0xb9f8>
   16b70:	bl	1c2c8 <__assert_fail@plt+0xad2c>
   16b74:	ldr	r3, [fp, #-8]
   16b78:	mov	r0, r3
   16b7c:	sub	sp, fp, #4
   16b80:	pop	{fp, pc}
   16b84:	push	{fp, lr}
   16b88:	add	fp, sp, #4
   16b8c:	sub	sp, sp, #16
   16b90:	str	r0, [fp, #-16]
   16b94:	mov	r3, r1
   16b98:	strb	r3, [fp, #-17]	; 0xffffffef
   16b9c:	mov	r2, #0
   16ba0:	mov	r1, #1
   16ba4:	ldr	r0, [fp, #-16]
   16ba8:	bl	1cadc <__assert_fail@plt+0xb540>
   16bac:	str	r0, [fp, #-8]
   16bb0:	ldr	r3, [fp, #-8]
   16bb4:	cmp	r3, #0
   16bb8:	blt	16c14 <__assert_fail@plt+0x5678>
   16bbc:	ldrb	r3, [fp, #-17]	; 0xffffffef
   16bc0:	cmp	r3, #0
   16bc4:	beq	16bd4 <__assert_fail@plt+0x5638>
   16bc8:	ldr	r3, [fp, #-8]
   16bcc:	orr	r3, r3, #1
   16bd0:	b	16bdc <__assert_fail@plt+0x5640>
   16bd4:	ldr	r3, [fp, #-8]
   16bd8:	bic	r3, r3, #1
   16bdc:	str	r3, [fp, #-12]
   16be0:	ldr	r2, [fp, #-8]
   16be4:	ldr	r3, [fp, #-12]
   16be8:	cmp	r2, r3
   16bec:	beq	16c0c <__assert_fail@plt+0x5670>
   16bf0:	ldr	r2, [fp, #-12]
   16bf4:	mov	r1, #2
   16bf8:	ldr	r0, [fp, #-16]
   16bfc:	bl	1cadc <__assert_fail@plt+0xb540>
   16c00:	mov	r3, r0
   16c04:	cmn	r3, #1
   16c08:	beq	16c14 <__assert_fail@plt+0x5678>
   16c0c:	mov	r3, #0
   16c10:	b	16c18 <__assert_fail@plt+0x567c>
   16c14:	mvn	r3, #0
   16c18:	mov	r0, r3
   16c1c:	sub	sp, fp, #4
   16c20:	pop	{fp, pc}
   16c24:	push	{fp, lr}
   16c28:	add	fp, sp, #4
   16c2c:	sub	sp, sp, #8
   16c30:	str	r0, [fp, #-8]
   16c34:	mov	r2, #0
   16c38:	ldr	r1, [pc, #20]	; 16c54 <__assert_fail@plt+0x56b8>
   16c3c:	ldr	r0, [fp, #-8]
   16c40:	bl	1cadc <__assert_fail@plt+0xb540>
   16c44:	mov	r3, r0
   16c48:	mov	r0, r3
   16c4c:	sub	sp, fp, #4
   16c50:	pop	{fp, pc}
   16c54:	andeq	r0, r0, r6, lsl #8
   16c58:	push	{fp}		; (str fp, [sp, #-4]!)
   16c5c:	add	fp, sp, #0
   16c60:	sub	sp, sp, #12
   16c64:	str	r0, [fp, #-8]
   16c68:	ldr	r2, [pc, #20]	; 16c84 <__assert_fail@plt+0x56e8>
   16c6c:	ldr	r3, [fp, #-8]
   16c70:	str	r3, [r2]
   16c74:	nop			; (mov r0, r0)
   16c78:	add	sp, fp, #0
   16c7c:	pop	{fp}		; (ldr fp, [sp], #4)
   16c80:	bx	lr
   16c84:	andeq	r1, r3, r4, lsr #5
   16c88:	push	{r4, fp, lr}
   16c8c:	add	fp, sp, #8
   16c90:	sub	sp, sp, #20
   16c94:	mov	r3, #0
   16c98:	strb	r3, [fp, #-13]
   16c9c:	ldr	r3, [pc, #312]	; 16ddc <__assert_fail@plt+0x5840>
   16ca0:	ldr	r3, [r3]
   16ca4:	mov	r0, r3
   16ca8:	bl	1cf04 <__assert_fail@plt+0xb968>
   16cac:	mov	r3, r0
   16cb0:	cmp	r3, #0
   16cb4:	beq	16d08 <__assert_fail@plt+0x576c>
   16cb8:	ldr	r3, [pc, #284]	; 16ddc <__assert_fail@plt+0x5840>
   16cbc:	ldr	r1, [r3]
   16cc0:	mov	r3, #1
   16cc4:	str	r3, [sp]
   16cc8:	mov	r2, #0
   16ccc:	mov	r3, #0
   16cd0:	mov	r0, r1
   16cd4:	bl	1d020 <__assert_fail@plt+0xba84>
   16cd8:	mov	r3, r0
   16cdc:	cmp	r3, #0
   16ce0:	bne	16d08 <__assert_fail@plt+0x576c>
   16ce4:	ldr	r3, [pc, #240]	; 16ddc <__assert_fail@plt+0x5840>
   16ce8:	ldr	r3, [r3]
   16cec:	mov	r0, r3
   16cf0:	bl	1cea4 <__assert_fail@plt+0xb908>
   16cf4:	mov	r3, r0
   16cf8:	cmp	r3, #0
   16cfc:	beq	16d08 <__assert_fail@plt+0x576c>
   16d00:	mov	r3, #1
   16d04:	strb	r3, [fp, #-13]
   16d08:	ldr	r3, [pc, #204]	; 16ddc <__assert_fail@plt+0x5840>
   16d0c:	ldr	r3, [r3]
   16d10:	mov	r0, r3
   16d14:	bl	1d470 <__assert_fail@plt+0xbed4>
   16d18:	mov	r3, r0
   16d1c:	cmp	r3, #0
   16d20:	beq	16d2c <__assert_fail@plt+0x5790>
   16d24:	mov	r3, #1
   16d28:	strb	r3, [fp, #-13]
   16d2c:	ldrb	r3, [fp, #-13]
   16d30:	cmp	r3, #0
   16d34:	beq	16db0 <__assert_fail@plt+0x5814>
   16d38:	ldr	r0, [pc, #160]	; 16de0 <__assert_fail@plt+0x5844>
   16d3c:	bl	113d4 <gettext@plt>
   16d40:	str	r0, [fp, #-20]	; 0xffffffec
   16d44:	ldr	r3, [pc, #152]	; 16de4 <__assert_fail@plt+0x5848>
   16d48:	ldr	r3, [r3]
   16d4c:	cmp	r3, #0
   16d50:	beq	16d94 <__assert_fail@plt+0x57f8>
   16d54:	bl	1141c <__errno_location@plt>
   16d58:	mov	r3, r0
   16d5c:	ldr	r4, [r3]
   16d60:	ldr	r3, [pc, #124]	; 16de4 <__assert_fail@plt+0x5848>
   16d64:	ldr	r3, [r3]
   16d68:	mov	r0, r3
   16d6c:	bl	1aa5c <__assert_fail@plt+0x94c0>
   16d70:	mov	r2, r0
   16d74:	ldr	r3, [fp, #-20]	; 0xffffffec
   16d78:	str	r3, [sp]
   16d7c:	mov	r3, r2
   16d80:	ldr	r2, [pc, #96]	; 16de8 <__assert_fail@plt+0x584c>
   16d84:	mov	r1, r4
   16d88:	mov	r0, #0
   16d8c:	bl	11344 <error@plt>
   16d90:	b	16db0 <__assert_fail@plt+0x5814>
   16d94:	bl	1141c <__errno_location@plt>
   16d98:	mov	r3, r0
   16d9c:	ldr	r1, [r3]
   16da0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16da4:	ldr	r2, [pc, #64]	; 16dec <__assert_fail@plt+0x5850>
   16da8:	mov	r0, #0
   16dac:	bl	11344 <error@plt>
   16db0:	bl	16e58 <__assert_fail@plt+0x58bc>
   16db4:	ldrb	r3, [fp, #-13]
   16db8:	cmp	r3, #0
   16dbc:	beq	16dd0 <__assert_fail@plt+0x5834>
   16dc0:	ldr	r3, [pc, #40]	; 16df0 <__assert_fail@plt+0x5854>
   16dc4:	ldr	r3, [r3]
   16dc8:	mov	r0, r3
   16dcc:	bl	1123c <_exit@plt>
   16dd0:	nop			; (mov r0, r0)
   16dd4:	sub	sp, fp, #8
   16dd8:	pop	{r4, fp, pc}
   16ddc:	andeq	r1, r3, r0, ror #3
   16de0:	andeq	r0, r2, r4, lsl r6
   16de4:	andeq	r1, r3, r4, lsr #5
   16de8:	andeq	r0, r2, r8, lsr #12
   16dec:	andeq	r0, r2, r0, lsr r6
   16df0:	andeq	r1, r3, r8, ror r1
   16df4:	push	{fp}		; (str fp, [sp, #-4]!)
   16df8:	add	fp, sp, #0
   16dfc:	sub	sp, sp, #12
   16e00:	str	r0, [fp, #-8]
   16e04:	ldr	r2, [pc, #20]	; 16e20 <__assert_fail@plt+0x5884>
   16e08:	ldr	r3, [fp, #-8]
   16e0c:	str	r3, [r2]
   16e10:	nop			; (mov r0, r0)
   16e14:	add	sp, fp, #0
   16e18:	pop	{fp}		; (ldr fp, [sp], #4)
   16e1c:	bx	lr
   16e20:	andeq	r1, r3, r8, lsr #5
   16e24:	push	{fp}		; (str fp, [sp, #-4]!)
   16e28:	add	fp, sp, #0
   16e2c:	sub	sp, sp, #12
   16e30:	mov	r3, r0
   16e34:	strb	r3, [fp, #-5]
   16e38:	ldr	r2, [pc, #20]	; 16e54 <__assert_fail@plt+0x58b8>
   16e3c:	ldrb	r3, [fp, #-5]
   16e40:	strb	r3, [r2]
   16e44:	nop			; (mov r0, r0)
   16e48:	add	sp, fp, #0
   16e4c:	pop	{fp}		; (ldr fp, [sp], #4)
   16e50:	bx	lr
   16e54:	andeq	r1, r3, ip, lsr #5
   16e58:	push	{r4, fp, lr}
   16e5c:	add	fp, sp, #8
   16e60:	sub	sp, sp, #20
   16e64:	ldr	r3, [pc, #256]	; 16f6c <__assert_fail@plt+0x59d0>
   16e68:	ldr	r3, [r3]
   16e6c:	mov	r0, r3
   16e70:	bl	1d470 <__assert_fail@plt+0xbed4>
   16e74:	mov	r3, r0
   16e78:	cmp	r3, #0
   16e7c:	beq	16f34 <__assert_fail@plt+0x5998>
   16e80:	ldr	r3, [pc, #232]	; 16f70 <__assert_fail@plt+0x59d4>
   16e84:	ldrb	r3, [r3]
   16e88:	eor	r3, r3, #1
   16e8c:	uxtb	r3, r3
   16e90:	cmp	r3, #0
   16e94:	bne	16eac <__assert_fail@plt+0x5910>
   16e98:	bl	1141c <__errno_location@plt>
   16e9c:	mov	r3, r0
   16ea0:	ldr	r3, [r3]
   16ea4:	cmp	r3, #32
   16ea8:	beq	16f34 <__assert_fail@plt+0x5998>
   16eac:	ldr	r0, [pc, #192]	; 16f74 <__assert_fail@plt+0x59d8>
   16eb0:	bl	113d4 <gettext@plt>
   16eb4:	str	r0, [fp, #-16]
   16eb8:	ldr	r3, [pc, #184]	; 16f78 <__assert_fail@plt+0x59dc>
   16ebc:	ldr	r3, [r3]
   16ec0:	cmp	r3, #0
   16ec4:	beq	16f08 <__assert_fail@plt+0x596c>
   16ec8:	bl	1141c <__errno_location@plt>
   16ecc:	mov	r3, r0
   16ed0:	ldr	r4, [r3]
   16ed4:	ldr	r3, [pc, #156]	; 16f78 <__assert_fail@plt+0x59dc>
   16ed8:	ldr	r3, [r3]
   16edc:	mov	r0, r3
   16ee0:	bl	1aa5c <__assert_fail@plt+0x94c0>
   16ee4:	mov	r2, r0
   16ee8:	ldr	r3, [fp, #-16]
   16eec:	str	r3, [sp]
   16ef0:	mov	r3, r2
   16ef4:	ldr	r2, [pc, #128]	; 16f7c <__assert_fail@plt+0x59e0>
   16ef8:	mov	r1, r4
   16efc:	mov	r0, #0
   16f00:	bl	11344 <error@plt>
   16f04:	b	16f24 <__assert_fail@plt+0x5988>
   16f08:	bl	1141c <__errno_location@plt>
   16f0c:	mov	r3, r0
   16f10:	ldr	r1, [r3]
   16f14:	ldr	r3, [fp, #-16]
   16f18:	ldr	r2, [pc, #96]	; 16f80 <__assert_fail@plt+0x59e4>
   16f1c:	mov	r0, #0
   16f20:	bl	11344 <error@plt>
   16f24:	ldr	r3, [pc, #88]	; 16f84 <__assert_fail@plt+0x59e8>
   16f28:	ldr	r3, [r3]
   16f2c:	mov	r0, r3
   16f30:	bl	1123c <_exit@plt>
   16f34:	ldr	r3, [pc, #76]	; 16f88 <__assert_fail@plt+0x59ec>
   16f38:	ldr	r3, [r3]
   16f3c:	mov	r0, r3
   16f40:	bl	1d470 <__assert_fail@plt+0xbed4>
   16f44:	mov	r3, r0
   16f48:	cmp	r3, #0
   16f4c:	beq	16f60 <__assert_fail@plt+0x59c4>
   16f50:	ldr	r3, [pc, #44]	; 16f84 <__assert_fail@plt+0x59e8>
   16f54:	ldr	r3, [r3]
   16f58:	mov	r0, r3
   16f5c:	bl	1123c <_exit@plt>
   16f60:	nop			; (mov r0, r0)
   16f64:	sub	sp, fp, #8
   16f68:	pop	{r4, fp, pc}
   16f6c:	andeq	r1, r3, r4, ror #3
   16f70:	andeq	r1, r3, ip, lsr #5
   16f74:	andeq	r0, r2, r4, lsr r6
   16f78:	andeq	r1, r3, r8, lsr #5
   16f7c:	andeq	r0, r2, r0, asr #12
   16f80:	andeq	r0, r2, r8, asr #12
   16f84:	andeq	r1, r3, r8, ror r1
   16f88:	ldrdeq	r1, [r3], -r8
   16f8c:	push	{fp, lr}
   16f90:	add	fp, sp, #4
   16f94:	sub	sp, sp, #32
   16f98:	str	r0, [fp, #-32]	; 0xffffffe0
   16f9c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16fa0:	bl	11350 <opendir@plt>
   16fa4:	str	r0, [fp, #-8]
   16fa8:	ldr	r3, [fp, #-8]
   16fac:	cmp	r3, #0
   16fb0:	beq	17064 <__assert_fail@plt+0x5ac8>
   16fb4:	ldr	r0, [fp, #-8]
   16fb8:	bl	11524 <dirfd@plt>
   16fbc:	str	r0, [fp, #-20]	; 0xffffffec
   16fc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   16fc4:	cmp	r3, #0
   16fc8:	blt	17064 <__assert_fail@plt+0x5ac8>
   16fcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   16fd0:	cmp	r3, #2
   16fd4:	bgt	17064 <__assert_fail@plt+0x5ac8>
   16fd8:	mov	r2, #3
   16fdc:	ldr	r1, [pc, #144]	; 17074 <__assert_fail@plt+0x5ad8>
   16fe0:	ldr	r0, [fp, #-20]	; 0xffffffec
   16fe4:	bl	1cadc <__assert_fail@plt+0xb540>
   16fe8:	str	r0, [fp, #-24]	; 0xffffffe8
   16fec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ff0:	cmp	r3, #0
   16ff4:	bge	17014 <__assert_fail@plt+0x5a78>
   16ff8:	bl	1141c <__errno_location@plt>
   16ffc:	mov	r3, r0
   17000:	ldr	r3, [r3]
   17004:	str	r3, [fp, #-16]
   17008:	mov	r3, #0
   1700c:	str	r3, [fp, #-12]
   17010:	b	17044 <__assert_fail@plt+0x5aa8>
   17014:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17018:	bl	1150c <fdopendir@plt>
   1701c:	str	r0, [fp, #-12]
   17020:	bl	1141c <__errno_location@plt>
   17024:	mov	r3, r0
   17028:	ldr	r3, [r3]
   1702c:	str	r3, [fp, #-16]
   17030:	ldr	r3, [fp, #-12]
   17034:	cmp	r3, #0
   17038:	bne	17044 <__assert_fail@plt+0x5aa8>
   1703c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17040:	bl	11584 <close@plt>
   17044:	ldr	r0, [fp, #-8]
   17048:	bl	11590 <closedir@plt>
   1704c:	bl	1141c <__errno_location@plt>
   17050:	mov	r2, r0
   17054:	ldr	r3, [fp, #-16]
   17058:	str	r3, [r2]
   1705c:	ldr	r3, [fp, #-12]
   17060:	str	r3, [fp, #-8]
   17064:	ldr	r3, [fp, #-8]
   17068:	mov	r0, r3
   1706c:	sub	sp, fp, #4
   17070:	pop	{fp, pc}
   17074:	andeq	r0, r0, r6, lsl #8
   17078:	push	{r1, r2, r3}
   1707c:	push	{fp, lr}
   17080:	add	fp, sp, #4
   17084:	sub	sp, sp, #20
   17088:	str	r0, [fp, #-20]	; 0xffffffec
   1708c:	mov	r3, #0
   17090:	str	r3, [fp, #-12]
   17094:	ldr	r3, [fp, #4]
   17098:	and	r3, r3, #64	; 0x40
   1709c:	cmp	r3, #0
   170a0:	beq	170c0 <__assert_fail@plt+0x5b24>
   170a4:	add	r3, fp, #8
   170a8:	str	r3, [fp, #-16]
   170ac:	ldr	r3, [fp, #-16]
   170b0:	add	r2, r3, #4
   170b4:	str	r2, [fp, #-16]
   170b8:	ldr	r3, [r3]
   170bc:	str	r3, [fp, #-12]
   170c0:	ldr	r2, [fp, #-12]
   170c4:	ldr	r1, [fp, #4]
   170c8:	ldr	r0, [fp, #-20]	; 0xffffffec
   170cc:	bl	1135c <open64@plt>
   170d0:	mov	r3, r0
   170d4:	mov	r0, r3
   170d8:	bl	1ae54 <__assert_fail@plt+0x98b8>
   170dc:	mov	r3, r0
   170e0:	mov	r0, r3
   170e4:	sub	sp, fp, #4
   170e8:	pop	{fp, lr}
   170ec:	add	sp, sp, #12
   170f0:	bx	lr
   170f4:	push	{r4, r5, r6, r7, fp, lr}
   170f8:	add	fp, sp, #20
   170fc:	sub	sp, sp, #56	; 0x38
   17100:	str	r0, [fp, #-64]	; 0xffffffc0
   17104:	str	r1, [fp, #-68]	; 0xffffffbc
   17108:	str	r2, [fp, #-72]	; 0xffffffb8
   1710c:	str	r3, [fp, #-76]	; 0xffffffb4
   17110:	ldr	r3, [fp, #-72]	; 0xffffffb8
   17114:	str	r3, [fp, #-44]	; 0xffffffd4
   17118:	mov	r1, #0
   1711c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17120:	mov	r2, r3
   17124:	mov	r3, #0
   17128:	lsl	r5, r3, #2
   1712c:	orr	r5, r5, r2, lsr #30
   17130:	lsl	r4, r2, #2
   17134:	mov	r6, r5
   17138:	mov	r7, #0
   1713c:	cmp	r6, #0
   17140:	beq	17148 <__assert_fail@plt+0x5bac>
   17144:	mov	r1, #1
   17148:	cmp	r4, #0
   1714c:	bge	17154 <__assert_fail@plt+0x5bb8>
   17150:	mov	r1, #1
   17154:	mov	r3, r4
   17158:	str	r3, [fp, #-56]	; 0xffffffc8
   1715c:	mov	r3, r1
   17160:	and	r3, r3, #1
   17164:	uxtb	r3, r3
   17168:	cmp	r3, #0
   1716c:	bne	171d8 <__assert_fail@plt+0x5c3c>
   17170:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17174:	lsl	r3, r3, #2
   17178:	cmp	r3, #4016	; 0xfb0
   1717c:	bhi	171c0 <__assert_fail@plt+0x5c24>
   17180:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17184:	add	r3, r3, #4
   17188:	lsl	r3, r3, #2
   1718c:	sub	r3, r3, #1
   17190:	add	r3, r3, #7
   17194:	add	r3, r3, #7
   17198:	lsr	r3, r3, #3
   1719c:	lsl	r3, r3, #3
   171a0:	sub	sp, sp, r3
   171a4:	mov	r3, sp
   171a8:	add	r3, r3, #7
   171ac:	lsr	r3, r3, #3
   171b0:	lsl	r3, r3, #3
   171b4:	add	r3, r3, #15
   171b8:	bic	r3, r3, #15
   171bc:	b	171dc <__assert_fail@plt+0x5c40>
   171c0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   171c4:	lsl	r3, r3, #2
   171c8:	mov	r0, r3
   171cc:	bl	1d77c <__assert_fail@plt+0xc1e0>
   171d0:	mov	r3, r0
   171d4:	b	171dc <__assert_fail@plt+0x5c40>
   171d8:	mov	r3, #0
   171dc:	str	r3, [fp, #-48]	; 0xffffffd0
   171e0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   171e4:	cmp	r3, #0
   171e8:	bne	171f4 <__assert_fail@plt+0x5c58>
   171ec:	mov	r3, #0
   171f0:	b	173e8 <__assert_fail@plt+0x5e4c>
   171f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   171f8:	add	r3, r3, #4
   171fc:	mov	r2, #1
   17200:	str	r2, [r3]
   17204:	mov	r3, #0
   17208:	str	r3, [fp, #-28]	; 0xffffffe4
   1720c:	mov	r3, #2
   17210:	str	r3, [fp, #-24]	; 0xffffffe8
   17214:	b	172d4 <__assert_fail@plt+0x5d38>
   17218:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1721c:	sub	r3, r3, #1
   17220:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17224:	add	r3, r2, r3
   17228:	ldrb	r3, [r3]
   1722c:	strb	r3, [fp, #-49]	; 0xffffffcf
   17230:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17234:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17238:	add	r3, r2, r3
   1723c:	ldrb	r3, [r3]
   17240:	ldrb	r2, [fp, #-49]	; 0xffffffcf
   17244:	cmp	r2, r3
   17248:	bne	1727c <__assert_fail@plt+0x5ce0>
   1724c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17250:	lsl	r3, r3, #2
   17254:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17258:	add	r3, r2, r3
   1725c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17260:	add	r2, r2, #1
   17264:	str	r2, [fp, #-28]	; 0xffffffe4
   17268:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1726c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17270:	sub	r2, r1, r2
   17274:	str	r2, [r3]
   17278:	b	172c8 <__assert_fail@plt+0x5d2c>
   1727c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17280:	cmp	r3, #0
   17284:	bne	172a4 <__assert_fail@plt+0x5d08>
   17288:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1728c:	lsl	r3, r3, #2
   17290:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17294:	add	r3, r2, r3
   17298:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1729c:	str	r2, [r3]
   172a0:	b	172c8 <__assert_fail@plt+0x5d2c>
   172a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   172a8:	lsl	r3, r3, #2
   172ac:	ldr	r2, [fp, #-48]	; 0xffffffd0
   172b0:	add	r3, r2, r3
   172b4:	ldr	r3, [r3]
   172b8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   172bc:	sub	r3, r2, r3
   172c0:	str	r3, [fp, #-28]	; 0xffffffe4
   172c4:	b	17230 <__assert_fail@plt+0x5c94>
   172c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172cc:	add	r3, r3, #1
   172d0:	str	r3, [fp, #-24]	; 0xffffffe8
   172d4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   172d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   172dc:	cmp	r2, r3
   172e0:	bcc	17218 <__assert_fail@plt+0x5c7c>
   172e4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   172e8:	mov	r2, #0
   172ec:	str	r2, [r3]
   172f0:	mov	r3, #0
   172f4:	str	r3, [fp, #-32]	; 0xffffffe0
   172f8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   172fc:	str	r3, [fp, #-36]	; 0xffffffdc
   17300:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17304:	str	r3, [fp, #-40]	; 0xffffffd8
   17308:	b	173cc <__assert_fail@plt+0x5e30>
   1730c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17310:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17314:	add	r3, r2, r3
   17318:	ldrb	r2, [r3]
   1731c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17320:	ldrb	r3, [r3]
   17324:	cmp	r2, r3
   17328:	bne	17364 <__assert_fail@plt+0x5dc8>
   1732c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17330:	add	r3, r3, #1
   17334:	str	r3, [fp, #-32]	; 0xffffffe0
   17338:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1733c:	add	r3, r3, #1
   17340:	str	r3, [fp, #-40]	; 0xffffffd8
   17344:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17348:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1734c:	cmp	r2, r3
   17350:	bne	173cc <__assert_fail@plt+0x5e30>
   17354:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17358:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1735c:	str	r2, [r3]
   17360:	b	173dc <__assert_fail@plt+0x5e40>
   17364:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17368:	cmp	r3, #0
   1736c:	beq	173b4 <__assert_fail@plt+0x5e18>
   17370:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17374:	lsl	r3, r3, #2
   17378:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1737c:	add	r3, r2, r3
   17380:	ldr	r3, [r3]
   17384:	ldr	r2, [fp, #-36]	; 0xffffffdc
   17388:	add	r3, r2, r3
   1738c:	str	r3, [fp, #-36]	; 0xffffffdc
   17390:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17394:	lsl	r3, r3, #2
   17398:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1739c:	add	r3, r2, r3
   173a0:	ldr	r3, [r3]
   173a4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   173a8:	sub	r3, r2, r3
   173ac:	str	r3, [fp, #-32]	; 0xffffffe0
   173b0:	b	173cc <__assert_fail@plt+0x5e30>
   173b4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   173b8:	add	r3, r3, #1
   173bc:	str	r3, [fp, #-36]	; 0xffffffdc
   173c0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   173c4:	add	r3, r3, #1
   173c8:	str	r3, [fp, #-40]	; 0xffffffd8
   173cc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   173d0:	ldrb	r3, [r3]
   173d4:	cmp	r3, #0
   173d8:	bne	1730c <__assert_fail@plt+0x5d70>
   173dc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   173e0:	bl	1d920 <__assert_fail@plt+0xc384>
   173e4:	mov	r3, #1
   173e8:	mov	r0, r3
   173ec:	sub	sp, fp, #20
   173f0:	pop	{r4, r5, r6, r7, fp, pc}
   173f4:	push	{r4, r5, fp, lr}
   173f8:	add	fp, sp, #12
   173fc:	sub	sp, sp, #176	; 0xb0
   17400:	str	r0, [fp, #-176]	; 0xffffff50
   17404:	str	r1, [fp, #-180]	; 0xffffff4c
   17408:	str	r2, [fp, #-184]	; 0xffffff48
   1740c:	ldr	r0, [fp, #-180]	; 0xffffff4c
   17410:	bl	1daf8 <__assert_fail@plt+0xc55c>
   17414:	str	r0, [fp, #-36]	; 0xffffffdc
   17418:	mov	r1, #0
   1741c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17420:	mov	r2, #44	; 0x2c
   17424:	umull	r2, r3, r3, r2
   17428:	mov	r4, r3
   1742c:	mov	r5, #0
   17430:	cmp	r4, #0
   17434:	beq	1743c <__assert_fail@plt+0x5ea0>
   17438:	mov	r1, #1
   1743c:	cmp	r2, #0
   17440:	bge	17448 <__assert_fail@plt+0x5eac>
   17444:	mov	r1, #1
   17448:	mov	r3, r2
   1744c:	str	r3, [fp, #-60]	; 0xffffffc4
   17450:	mov	r3, r1
   17454:	and	r3, r3, #1
   17458:	uxtb	r3, r3
   1745c:	cmp	r3, #0
   17460:	bne	174d4 <__assert_fail@plt+0x5f38>
   17464:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17468:	mov	r2, #44	; 0x2c
   1746c:	mul	r3, r2, r3
   17470:	cmp	r3, #4016	; 0xfb0
   17474:	bhi	174b8 <__assert_fail@plt+0x5f1c>
   17478:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1747c:	mov	r2, #44	; 0x2c
   17480:	mul	r3, r2, r3
   17484:	add	r3, r3, #15
   17488:	add	r3, r3, #7
   1748c:	add	r3, r3, #7
   17490:	lsr	r3, r3, #3
   17494:	lsl	r3, r3, #3
   17498:	sub	sp, sp, r3
   1749c:	mov	r3, sp
   174a0:	add	r3, r3, #7
   174a4:	lsr	r3, r3, #3
   174a8:	lsl	r3, r3, #3
   174ac:	add	r3, r3, #15
   174b0:	bic	r3, r3, #15
   174b4:	b	174d8 <__assert_fail@plt+0x5f3c>
   174b8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   174bc:	mov	r2, #44	; 0x2c
   174c0:	mul	r3, r2, r3
   174c4:	mov	r0, r3
   174c8:	bl	1d77c <__assert_fail@plt+0xc1e0>
   174cc:	mov	r3, r0
   174d0:	b	174d8 <__assert_fail@plt+0x5f3c>
   174d4:	mov	r3, #0
   174d8:	str	r3, [fp, #-40]	; 0xffffffd8
   174dc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   174e0:	cmp	r3, #0
   174e4:	bne	174f0 <__assert_fail@plt+0x5f54>
   174e8:	mov	r3, #0
   174ec:	b	17b38 <__assert_fail@plt+0x659c>
   174f0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   174f4:	str	r3, [fp, #-44]	; 0xffffffd4
   174f8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   174fc:	mov	r3, r2
   17500:	lsl	r3, r3, #2
   17504:	add	r3, r3, r2
   17508:	lsl	r3, r3, #3
   1750c:	mov	r2, r3
   17510:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17514:	add	r3, r3, r2
   17518:	str	r3, [fp, #-48]	; 0xffffffd0
   1751c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17520:	str	r3, [fp, #-52]	; 0xffffffcc
   17524:	mov	r3, #0
   17528:	str	r3, [fp, #-16]
   1752c:	ldr	r3, [fp, #-180]	; 0xffffff4c
   17530:	str	r3, [fp, #-100]	; 0xffffff9c
   17534:	mov	r3, #0
   17538:	strb	r3, [fp, #-116]	; 0xffffff8c
   1753c:	sub	r3, fp, #116	; 0x74
   17540:	add	r3, r3, #4
   17544:	mov	r2, #8
   17548:	mov	r1, #0
   1754c:	mov	r0, r3
   17550:	bl	11440 <memset@plt>
   17554:	mov	r3, #0
   17558:	strb	r3, [fp, #-104]	; 0xffffff98
   1755c:	b	175b8 <__assert_fail@plt+0x601c>
   17560:	ldr	r2, [fp, #-16]
   17564:	mov	r3, r2
   17568:	lsl	r3, r3, #2
   1756c:	add	r3, r3, r2
   17570:	lsl	r3, r3, #3
   17574:	mov	r2, r3
   17578:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1757c:	add	r2, r3, r2
   17580:	sub	r3, fp, #116	; 0x74
   17584:	add	r3, r3, #16
   17588:	mov	r1, r3
   1758c:	mov	r0, r2
   17590:	bl	1d9dc <__assert_fail@plt+0xc440>
   17594:	ldr	r2, [fp, #-100]	; 0xffffff9c
   17598:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1759c:	add	r3, r2, r3
   175a0:	str	r3, [fp, #-100]	; 0xffffff9c
   175a4:	mov	r3, #0
   175a8:	strb	r3, [fp, #-104]	; 0xffffff98
   175ac:	ldr	r3, [fp, #-16]
   175b0:	add	r3, r3, #1
   175b4:	str	r3, [fp, #-16]
   175b8:	sub	r3, fp, #116	; 0x74
   175bc:	mov	r0, r3
   175c0:	bl	182d0 <__assert_fail@plt+0x6d34>
   175c4:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   175c8:	eor	r3, r3, #1
   175cc:	uxtb	r3, r3
   175d0:	cmp	r3, #0
   175d4:	bne	175e4 <__assert_fail@plt+0x6048>
   175d8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   175dc:	cmp	r3, #0
   175e0:	beq	175ec <__assert_fail@plt+0x6050>
   175e4:	mov	r3, #1
   175e8:	b	175f0 <__assert_fail@plt+0x6054>
   175ec:	mov	r3, #0
   175f0:	cmp	r3, #0
   175f4:	bne	17560 <__assert_fail@plt+0x5fc4>
   175f8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   175fc:	add	r3, r3, #4
   17600:	mov	r2, #1
   17604:	str	r2, [r3]
   17608:	mov	r3, #0
   1760c:	str	r3, [fp, #-24]	; 0xffffffe8
   17610:	mov	r3, #2
   17614:	str	r3, [fp, #-20]	; 0xffffffec
   17618:	b	177dc <__assert_fail@plt+0x6240>
   1761c:	ldr	r2, [fp, #-20]	; 0xffffffec
   17620:	mov	r3, r2
   17624:	lsl	r3, r3, #2
   17628:	add	r3, r3, r2
   1762c:	lsl	r3, r3, #3
   17630:	sub	r3, r3, #40	; 0x28
   17634:	ldr	r2, [fp, #-44]	; 0xffffffd4
   17638:	add	r3, r2, r3
   1763c:	str	r3, [fp, #-56]	; 0xffffffc8
   17640:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17644:	ldrb	r3, [r3, #8]
   17648:	cmp	r3, #0
   1764c:	beq	176bc <__assert_fail@plt+0x6120>
   17650:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17654:	mov	r3, r2
   17658:	lsl	r3, r3, #2
   1765c:	add	r3, r3, r2
   17660:	lsl	r3, r3, #3
   17664:	mov	r2, r3
   17668:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1766c:	add	r3, r3, r2
   17670:	ldrb	r3, [r3, #8]
   17674:	cmp	r3, #0
   17678:	beq	176bc <__assert_fail@plt+0x6120>
   1767c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17680:	ldr	r1, [r3, #12]
   17684:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17688:	mov	r3, r2
   1768c:	lsl	r3, r3, #2
   17690:	add	r3, r3, r2
   17694:	lsl	r3, r3, #3
   17698:	mov	r2, r3
   1769c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   176a0:	add	r3, r3, r2
   176a4:	ldr	r3, [r3, #12]
   176a8:	cmp	r1, r3
   176ac:	moveq	r3, #1
   176b0:	movne	r3, #0
   176b4:	uxtb	r3, r3
   176b8:	b	1774c <__assert_fail@plt+0x61b0>
   176bc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   176c0:	ldr	r1, [r3, #4]
   176c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   176c8:	mov	r3, r2
   176cc:	lsl	r3, r3, #2
   176d0:	add	r3, r3, r2
   176d4:	lsl	r3, r3, #3
   176d8:	mov	r2, r3
   176dc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   176e0:	add	r3, r3, r2
   176e4:	ldr	r3, [r3, #4]
   176e8:	cmp	r1, r3
   176ec:	bne	17740 <__assert_fail@plt+0x61a4>
   176f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   176f4:	ldr	r0, [r3]
   176f8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   176fc:	mov	r3, r2
   17700:	lsl	r3, r3, #2
   17704:	add	r3, r3, r2
   17708:	lsl	r3, r3, #3
   1770c:	mov	r2, r3
   17710:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17714:	add	r3, r3, r2
   17718:	ldr	r1, [r3]
   1771c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17720:	ldr	r3, [r3, #4]
   17724:	mov	r2, r3
   17728:	bl	11278 <memcmp@plt>
   1772c:	mov	r3, r0
   17730:	cmp	r3, #0
   17734:	bne	17740 <__assert_fail@plt+0x61a4>
   17738:	mov	r3, #1
   1773c:	b	17744 <__assert_fail@plt+0x61a8>
   17740:	mov	r3, #0
   17744:	and	r3, r3, #1
   17748:	uxtb	r3, r3
   1774c:	cmp	r3, #0
   17750:	beq	17784 <__assert_fail@plt+0x61e8>
   17754:	ldr	r3, [fp, #-20]	; 0xffffffec
   17758:	lsl	r3, r3, #2
   1775c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17760:	add	r3, r2, r3
   17764:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17768:	add	r2, r2, #1
   1776c:	str	r2, [fp, #-24]	; 0xffffffe8
   17770:	ldr	r1, [fp, #-20]	; 0xffffffec
   17774:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17778:	sub	r2, r1, r2
   1777c:	str	r2, [r3]
   17780:	b	177d0 <__assert_fail@plt+0x6234>
   17784:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17788:	cmp	r3, #0
   1778c:	bne	177ac <__assert_fail@plt+0x6210>
   17790:	ldr	r3, [fp, #-20]	; 0xffffffec
   17794:	lsl	r3, r3, #2
   17798:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1779c:	add	r3, r2, r3
   177a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   177a4:	str	r2, [r3]
   177a8:	b	177d0 <__assert_fail@plt+0x6234>
   177ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   177b0:	lsl	r3, r3, #2
   177b4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   177b8:	add	r3, r2, r3
   177bc:	ldr	r3, [r3]
   177c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   177c4:	sub	r3, r2, r3
   177c8:	str	r3, [fp, #-24]	; 0xffffffe8
   177cc:	b	17640 <__assert_fail@plt+0x60a4>
   177d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   177d4:	add	r3, r3, #1
   177d8:	str	r3, [fp, #-20]	; 0xffffffec
   177dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   177e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   177e4:	cmp	r2, r3
   177e8:	bcc	1761c <__assert_fail@plt+0x6080>
   177ec:	ldr	r3, [fp, #-184]	; 0xffffff48
   177f0:	mov	r2, #0
   177f4:	str	r2, [r3]
   177f8:	mov	r3, #0
   177fc:	str	r3, [fp, #-28]	; 0xffffffe4
   17800:	ldr	r3, [fp, #-176]	; 0xffffff50
   17804:	str	r3, [fp, #-156]	; 0xffffff64
   17808:	mov	r3, #0
   1780c:	strb	r3, [fp, #-172]	; 0xffffff54
   17810:	sub	r3, fp, #172	; 0xac
   17814:	add	r3, r3, #4
   17818:	mov	r2, #8
   1781c:	mov	r1, #0
   17820:	mov	r0, r3
   17824:	bl	11440 <memset@plt>
   17828:	mov	r3, #0
   1782c:	strb	r3, [fp, #-160]	; 0xffffff60
   17830:	ldr	r3, [fp, #-176]	; 0xffffff50
   17834:	str	r3, [fp, #-100]	; 0xffffff9c
   17838:	mov	r3, #0
   1783c:	strb	r3, [fp, #-116]	; 0xffffff8c
   17840:	sub	r3, fp, #116	; 0x74
   17844:	add	r3, r3, #4
   17848:	mov	r2, #8
   1784c:	mov	r1, #0
   17850:	mov	r0, r3
   17854:	bl	11440 <memset@plt>
   17858:	mov	r3, #0
   1785c:	strb	r3, [fp, #-104]	; 0xffffff98
   17860:	b	17aec <__assert_fail@plt+0x6550>
   17864:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17868:	mov	r3, r2
   1786c:	lsl	r3, r3, #2
   17870:	add	r3, r3, r2
   17874:	lsl	r3, r3, #3
   17878:	mov	r2, r3
   1787c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17880:	add	r3, r3, r2
   17884:	ldrb	r3, [r3, #8]
   17888:	cmp	r3, #0
   1788c:	beq	178d8 <__assert_fail@plt+0x633c>
   17890:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   17894:	cmp	r3, #0
   17898:	beq	178d8 <__assert_fail@plt+0x633c>
   1789c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   178a0:	mov	r3, r2
   178a4:	lsl	r3, r3, #2
   178a8:	add	r3, r3, r2
   178ac:	lsl	r3, r3, #3
   178b0:	mov	r2, r3
   178b4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   178b8:	add	r3, r3, r2
   178bc:	ldr	r2, [r3, #12]
   178c0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   178c4:	cmp	r2, r3
   178c8:	moveq	r3, #1
   178cc:	movne	r3, #0
   178d0:	uxtb	r3, r3
   178d4:	b	1797c <__assert_fail@plt+0x63e0>
   178d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   178dc:	mov	r3, r2
   178e0:	lsl	r3, r3, #2
   178e4:	add	r3, r3, r2
   178e8:	lsl	r3, r3, #3
   178ec:	mov	r2, r3
   178f0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   178f4:	add	r3, r3, r2
   178f8:	ldr	r2, [r3, #4]
   178fc:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17900:	cmp	r2, r3
   17904:	bne	17970 <__assert_fail@plt+0x63d4>
   17908:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1790c:	mov	r3, r2
   17910:	lsl	r3, r3, #2
   17914:	add	r3, r3, r2
   17918:	lsl	r3, r3, #3
   1791c:	mov	r2, r3
   17920:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17924:	add	r3, r3, r2
   17928:	ldr	r0, [r3]
   1792c:	ldr	r1, [fp, #-100]	; 0xffffff9c
   17930:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17934:	mov	r3, r2
   17938:	lsl	r3, r3, #2
   1793c:	add	r3, r3, r2
   17940:	lsl	r3, r3, #3
   17944:	mov	r2, r3
   17948:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1794c:	add	r3, r3, r2
   17950:	ldr	r3, [r3, #4]
   17954:	mov	r2, r3
   17958:	bl	11278 <memcmp@plt>
   1795c:	mov	r3, r0
   17960:	cmp	r3, #0
   17964:	bne	17970 <__assert_fail@plt+0x63d4>
   17968:	mov	r3, #1
   1796c:	b	17974 <__assert_fail@plt+0x63d8>
   17970:	mov	r3, #0
   17974:	and	r3, r3, #1
   17978:	uxtb	r3, r3
   1797c:	cmp	r3, #0
   17980:	beq	179c8 <__assert_fail@plt+0x642c>
   17984:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17988:	add	r3, r3, #1
   1798c:	str	r3, [fp, #-28]	; 0xffffffe4
   17990:	ldr	r2, [fp, #-100]	; 0xffffff9c
   17994:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17998:	add	r3, r2, r3
   1799c:	str	r3, [fp, #-100]	; 0xffffff9c
   179a0:	mov	r3, #0
   179a4:	strb	r3, [fp, #-104]	; 0xffffff98
   179a8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   179ac:	ldr	r3, [fp, #-36]	; 0xffffffdc
   179b0:	cmp	r2, r3
   179b4:	bne	17aec <__assert_fail@plt+0x6550>
   179b8:	ldr	r2, [fp, #-156]	; 0xffffff64
   179bc:	ldr	r3, [fp, #-184]	; 0xffffff48
   179c0:	str	r2, [r3]
   179c4:	b	17b2c <__assert_fail@plt+0x6590>
   179c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   179cc:	cmp	r3, #0
   179d0:	beq	17a78 <__assert_fail@plt+0x64dc>
   179d4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   179d8:	lsl	r3, r3, #2
   179dc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   179e0:	add	r3, r2, r3
   179e4:	ldr	r3, [r3]
   179e8:	str	r3, [fp, #-32]	; 0xffffffe0
   179ec:	ldr	r2, [fp, #-28]	; 0xffffffe4
   179f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   179f4:	sub	r3, r2, r3
   179f8:	str	r3, [fp, #-28]	; 0xffffffe4
   179fc:	b	17a68 <__assert_fail@plt+0x64cc>
   17a00:	sub	r3, fp, #172	; 0xac
   17a04:	mov	r0, r3
   17a08:	bl	182d0 <__assert_fail@plt+0x6d34>
   17a0c:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   17a10:	eor	r3, r3, #1
   17a14:	uxtb	r3, r3
   17a18:	cmp	r3, #0
   17a1c:	bne	17a2c <__assert_fail@plt+0x6490>
   17a20:	ldr	r3, [fp, #-144]	; 0xffffff70
   17a24:	cmp	r3, #0
   17a28:	beq	17a34 <__assert_fail@plt+0x6498>
   17a2c:	mov	r3, #1
   17a30:	b	17a38 <__assert_fail@plt+0x649c>
   17a34:	mov	r3, #0
   17a38:	cmp	r3, #0
   17a3c:	bne	17a44 <__assert_fail@plt+0x64a8>
   17a40:	bl	1156c <abort@plt>
   17a44:	ldr	r2, [fp, #-156]	; 0xffffff64
   17a48:	ldr	r3, [fp, #-152]	; 0xffffff68
   17a4c:	add	r3, r2, r3
   17a50:	str	r3, [fp, #-156]	; 0xffffff64
   17a54:	mov	r3, #0
   17a58:	strb	r3, [fp, #-160]	; 0xffffff60
   17a5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a60:	sub	r3, r3, #1
   17a64:	str	r3, [fp, #-32]	; 0xffffffe0
   17a68:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a6c:	cmp	r3, #0
   17a70:	bne	17a00 <__assert_fail@plt+0x6464>
   17a74:	b	17aec <__assert_fail@plt+0x6550>
   17a78:	sub	r3, fp, #172	; 0xac
   17a7c:	mov	r0, r3
   17a80:	bl	182d0 <__assert_fail@plt+0x6d34>
   17a84:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   17a88:	eor	r3, r3, #1
   17a8c:	uxtb	r3, r3
   17a90:	cmp	r3, #0
   17a94:	bne	17aa4 <__assert_fail@plt+0x6508>
   17a98:	ldr	r3, [fp, #-144]	; 0xffffff70
   17a9c:	cmp	r3, #0
   17aa0:	beq	17aac <__assert_fail@plt+0x6510>
   17aa4:	mov	r3, #1
   17aa8:	b	17ab0 <__assert_fail@plt+0x6514>
   17aac:	mov	r3, #0
   17ab0:	cmp	r3, #0
   17ab4:	bne	17abc <__assert_fail@plt+0x6520>
   17ab8:	bl	1156c <abort@plt>
   17abc:	ldr	r2, [fp, #-156]	; 0xffffff64
   17ac0:	ldr	r3, [fp, #-152]	; 0xffffff68
   17ac4:	add	r3, r2, r3
   17ac8:	str	r3, [fp, #-156]	; 0xffffff64
   17acc:	mov	r3, #0
   17ad0:	strb	r3, [fp, #-160]	; 0xffffff60
   17ad4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   17ad8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17adc:	add	r3, r2, r3
   17ae0:	str	r3, [fp, #-100]	; 0xffffff9c
   17ae4:	mov	r3, #0
   17ae8:	strb	r3, [fp, #-104]	; 0xffffff98
   17aec:	sub	r3, fp, #116	; 0x74
   17af0:	mov	r0, r3
   17af4:	bl	182d0 <__assert_fail@plt+0x6d34>
   17af8:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   17afc:	eor	r3, r3, #1
   17b00:	uxtb	r3, r3
   17b04:	cmp	r3, #0
   17b08:	bne	17b18 <__assert_fail@plt+0x657c>
   17b0c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   17b10:	cmp	r3, #0
   17b14:	beq	17b20 <__assert_fail@plt+0x6584>
   17b18:	mov	r3, #1
   17b1c:	b	17b24 <__assert_fail@plt+0x6588>
   17b20:	mov	r3, #0
   17b24:	cmp	r3, #0
   17b28:	bne	17864 <__assert_fail@plt+0x62c8>
   17b2c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17b30:	bl	1d920 <__assert_fail@plt+0xc384>
   17b34:	mov	r3, #1
   17b38:	mov	r0, r3
   17b3c:	sub	sp, fp, #12
   17b40:	pop	{r4, r5, fp, pc}
   17b44:	push	{r4, fp, lr}
   17b48:	add	fp, sp, #8
   17b4c:	sub	sp, sp, #356	; 0x164
   17b50:	str	r0, [fp, #-360]	; 0xfffffe98
   17b54:	str	r1, [fp, #-364]	; 0xfffffe94
   17b58:	bl	11314 <__ctype_get_mb_cur_max@plt>
   17b5c:	mov	r3, r0
   17b60:	cmp	r3, #1
   17b64:	bls	180b4 <__assert_fail@plt+0x6b18>
   17b68:	ldr	r3, [fp, #-364]	; 0xfffffe94
   17b6c:	str	r3, [fp, #-336]	; 0xfffffeb0
   17b70:	mov	r3, #0
   17b74:	strb	r3, [fp, #-352]	; 0xfffffea0
   17b78:	sub	r3, fp, #352	; 0x160
   17b7c:	add	r3, r3, #4
   17b80:	mov	r2, #8
   17b84:	mov	r1, #0
   17b88:	mov	r0, r3
   17b8c:	bl	11440 <memset@plt>
   17b90:	mov	r3, #0
   17b94:	strb	r3, [fp, #-340]	; 0xfffffeac
   17b98:	sub	r3, fp, #352	; 0x160
   17b9c:	mov	r0, r3
   17ba0:	bl	182d0 <__assert_fail@plt+0x6d34>
   17ba4:	ldrb	r3, [fp, #-328]	; 0xfffffeb8
   17ba8:	eor	r3, r3, #1
   17bac:	uxtb	r3, r3
   17bb0:	cmp	r3, #0
   17bb4:	bne	17bc4 <__assert_fail@plt+0x6628>
   17bb8:	ldr	r3, [fp, #-324]	; 0xfffffebc
   17bbc:	cmp	r3, #0
   17bc0:	beq	17bcc <__assert_fail@plt+0x6630>
   17bc4:	mov	r3, #1
   17bc8:	b	17bd0 <__assert_fail@plt+0x6634>
   17bcc:	mov	r3, #0
   17bd0:	cmp	r3, #0
   17bd4:	beq	180ac <__assert_fail@plt+0x6b10>
   17bd8:	mov	r3, #1
   17bdc:	strb	r3, [fp, #-13]
   17be0:	mov	r3, #0
   17be4:	str	r3, [fp, #-20]	; 0xffffffec
   17be8:	mov	r3, #0
   17bec:	str	r3, [fp, #-24]	; 0xffffffe8
   17bf0:	mov	r3, #0
   17bf4:	str	r3, [fp, #-28]	; 0xffffffe4
   17bf8:	ldr	r3, [fp, #-364]	; 0xfffffe94
   17bfc:	str	r3, [fp, #-280]	; 0xfffffee8
   17c00:	mov	r3, #0
   17c04:	strb	r3, [fp, #-296]	; 0xfffffed8
   17c08:	sub	r3, fp, #296	; 0x128
   17c0c:	add	r3, r3, #4
   17c10:	mov	r2, #8
   17c14:	mov	r1, #0
   17c18:	mov	r0, r3
   17c1c:	bl	11440 <memset@plt>
   17c20:	mov	r3, #0
   17c24:	strb	r3, [fp, #-284]	; 0xfffffee4
   17c28:	ldr	r3, [fp, #-360]	; 0xfffffe98
   17c2c:	str	r3, [fp, #-224]	; 0xffffff20
   17c30:	mov	r3, #0
   17c34:	strb	r3, [fp, #-240]	; 0xffffff10
   17c38:	sub	r3, fp, #240	; 0xf0
   17c3c:	add	r3, r3, #4
   17c40:	mov	r2, #8
   17c44:	mov	r1, #0
   17c48:	mov	r0, r3
   17c4c:	bl	11440 <memset@plt>
   17c50:	mov	r3, #0
   17c54:	strb	r3, [fp, #-228]	; 0xffffff1c
   17c58:	sub	r3, fp, #240	; 0xf0
   17c5c:	mov	r0, r3
   17c60:	bl	182d0 <__assert_fail@plt+0x6d34>
   17c64:	ldrb	r3, [fp, #-216]	; 0xffffff28
   17c68:	eor	r3, r3, #1
   17c6c:	uxtb	r3, r3
   17c70:	cmp	r3, #0
   17c74:	bne	17c84 <__assert_fail@plt+0x66e8>
   17c78:	ldr	r3, [fp, #-212]	; 0xffffff2c
   17c7c:	cmp	r3, #0
   17c80:	beq	17c8c <__assert_fail@plt+0x66f0>
   17c84:	mov	r3, #1
   17c88:	b	17c90 <__assert_fail@plt+0x66f4>
   17c8c:	mov	r3, #0
   17c90:	cmp	r3, #0
   17c94:	bne	17ca0 <__assert_fail@plt+0x6704>
   17c98:	mov	r3, #0
   17c9c:	b	182c4 <__assert_fail@plt+0x6d28>
   17ca0:	ldrb	r3, [fp, #-13]
   17ca4:	cmp	r3, #0
   17ca8:	beq	17dd8 <__assert_fail@plt+0x683c>
   17cac:	ldr	r3, [fp, #-20]	; 0xffffffec
   17cb0:	cmp	r3, #9
   17cb4:	bls	17dd8 <__assert_fail@plt+0x683c>
   17cb8:	ldr	r2, [fp, #-20]	; 0xffffffec
   17cbc:	mov	r3, r2
   17cc0:	lsl	r3, r3, #2
   17cc4:	add	r2, r3, r2
   17cc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17ccc:	cmp	r2, r3
   17cd0:	bhi	17dd8 <__assert_fail@plt+0x683c>
   17cd4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17cd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17cdc:	sub	r3, r2, r3
   17ce0:	str	r3, [fp, #-32]	; 0xffffffe0
   17ce4:	b	17d0c <__assert_fail@plt+0x6770>
   17ce8:	ldr	r2, [fp, #-280]	; 0xfffffee8
   17cec:	ldr	r3, [fp, #-276]	; 0xfffffeec
   17cf0:	add	r3, r2, r3
   17cf4:	str	r3, [fp, #-280]	; 0xfffffee8
   17cf8:	mov	r3, #0
   17cfc:	strb	r3, [fp, #-284]	; 0xfffffee4
   17d00:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d04:	sub	r3, r3, #1
   17d08:	str	r3, [fp, #-32]	; 0xffffffe0
   17d0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d10:	cmp	r3, #0
   17d14:	beq	17d58 <__assert_fail@plt+0x67bc>
   17d18:	sub	r3, fp, #296	; 0x128
   17d1c:	mov	r0, r3
   17d20:	bl	182d0 <__assert_fail@plt+0x6d34>
   17d24:	ldrb	r3, [fp, #-272]	; 0xfffffef0
   17d28:	eor	r3, r3, #1
   17d2c:	uxtb	r3, r3
   17d30:	cmp	r3, #0
   17d34:	bne	17d44 <__assert_fail@plt+0x67a8>
   17d38:	ldr	r3, [fp, #-268]	; 0xfffffef4
   17d3c:	cmp	r3, #0
   17d40:	beq	17d4c <__assert_fail@plt+0x67b0>
   17d44:	mov	r3, #1
   17d48:	b	17d50 <__assert_fail@plt+0x67b4>
   17d4c:	mov	r3, #0
   17d50:	cmp	r3, #0
   17d54:	bne	17ce8 <__assert_fail@plt+0x674c>
   17d58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d5c:	str	r3, [fp, #-28]	; 0xffffffe4
   17d60:	sub	r3, fp, #296	; 0x128
   17d64:	mov	r0, r3
   17d68:	bl	182d0 <__assert_fail@plt+0x6d34>
   17d6c:	ldrb	r3, [fp, #-272]	; 0xfffffef0
   17d70:	eor	r3, r3, #1
   17d74:	uxtb	r3, r3
   17d78:	cmp	r3, #0
   17d7c:	bne	17d8c <__assert_fail@plt+0x67f0>
   17d80:	ldr	r3, [fp, #-268]	; 0xfffffef4
   17d84:	cmp	r3, #0
   17d88:	beq	17d94 <__assert_fail@plt+0x67f8>
   17d8c:	mov	r3, #1
   17d90:	b	17d98 <__assert_fail@plt+0x67fc>
   17d94:	mov	r3, #0
   17d98:	cmp	r3, #0
   17d9c:	bne	17dd8 <__assert_fail@plt+0x683c>
   17da0:	sub	r3, fp, #68	; 0x44
   17da4:	mov	r2, r3
   17da8:	ldr	r1, [fp, #-364]	; 0xfffffe94
   17dac:	ldr	r0, [fp, #-360]	; 0xfffffe98
   17db0:	bl	173f4 <__assert_fail@plt+0x5e58>
   17db4:	mov	r3, r0
   17db8:	strb	r3, [fp, #-61]	; 0xffffffc3
   17dbc:	ldrb	r3, [fp, #-61]	; 0xffffffc3
   17dc0:	cmp	r3, #0
   17dc4:	beq	17dd0 <__assert_fail@plt+0x6834>
   17dc8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   17dcc:	b	182c4 <__assert_fail@plt+0x6d28>
   17dd0:	mov	r3, #0
   17dd4:	strb	r3, [fp, #-13]
   17dd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ddc:	add	r3, r3, #1
   17de0:	str	r3, [fp, #-20]	; 0xffffffec
   17de4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17de8:	add	r3, r3, #1
   17dec:	str	r3, [fp, #-24]	; 0xffffffe8
   17df0:	ldrb	r3, [fp, #-216]	; 0xffffff28
   17df4:	cmp	r3, #0
   17df8:	beq	17e24 <__assert_fail@plt+0x6888>
   17dfc:	ldrb	r3, [fp, #-328]	; 0xfffffeb8
   17e00:	cmp	r3, #0
   17e04:	beq	17e24 <__assert_fail@plt+0x6888>
   17e08:	ldr	r2, [fp, #-212]	; 0xffffff2c
   17e0c:	ldr	r3, [fp, #-324]	; 0xfffffebc
   17e10:	cmp	r2, r3
   17e14:	moveq	r3, #1
   17e18:	movne	r3, #0
   17e1c:	uxtb	r3, r3
   17e20:	b	17e68 <__assert_fail@plt+0x68cc>
   17e24:	ldr	r2, [fp, #-220]	; 0xffffff24
   17e28:	ldr	r3, [fp, #-332]	; 0xfffffeb4
   17e2c:	cmp	r2, r3
   17e30:	bne	17e5c <__assert_fail@plt+0x68c0>
   17e34:	ldr	r3, [fp, #-224]	; 0xffffff20
   17e38:	ldr	r1, [fp, #-336]	; 0xfffffeb0
   17e3c:	ldr	r2, [fp, #-220]	; 0xffffff24
   17e40:	mov	r0, r3
   17e44:	bl	11278 <memcmp@plt>
   17e48:	mov	r3, r0
   17e4c:	cmp	r3, #0
   17e50:	bne	17e5c <__assert_fail@plt+0x68c0>
   17e54:	mov	r3, #1
   17e58:	b	17e60 <__assert_fail@plt+0x68c4>
   17e5c:	mov	r3, #0
   17e60:	and	r3, r3, #1
   17e64:	uxtb	r3, r3
   17e68:	cmp	r3, #0
   17e6c:	beq	18090 <__assert_fail@plt+0x6af4>
   17e70:	sub	ip, fp, #184	; 0xb8
   17e74:	sub	lr, fp, #240	; 0xf0
   17e78:	ldm	lr!, {r0, r1, r2, r3}
   17e7c:	stmia	ip!, {r0, r1, r2, r3}
   17e80:	ldm	lr!, {r0, r1, r2, r3}
   17e84:	stmia	ip!, {r0, r1, r2, r3}
   17e88:	ldm	lr!, {r0, r1, r2, r3}
   17e8c:	stmia	ip!, {r0, r1, r2, r3}
   17e90:	ldm	lr, {r0, r1}
   17e94:	stm	ip, {r0, r1}
   17e98:	ldr	r2, [fp, #-168]	; 0xffffff58
   17e9c:	ldr	r3, [fp, #-164]	; 0xffffff5c
   17ea0:	add	r3, r2, r3
   17ea4:	str	r3, [fp, #-168]	; 0xffffff58
   17ea8:	mov	r3, #0
   17eac:	strb	r3, [fp, #-172]	; 0xffffff54
   17eb0:	ldr	r3, [fp, #-364]	; 0xfffffe94
   17eb4:	str	r3, [fp, #-112]	; 0xffffff90
   17eb8:	mov	r3, #0
   17ebc:	strb	r3, [fp, #-128]	; 0xffffff80
   17ec0:	sub	r3, fp, #128	; 0x80
   17ec4:	add	r3, r3, #4
   17ec8:	mov	r2, #8
   17ecc:	mov	r1, #0
   17ed0:	mov	r0, r3
   17ed4:	bl	11440 <memset@plt>
   17ed8:	mov	r3, #0
   17edc:	strb	r3, [fp, #-116]	; 0xffffff8c
   17ee0:	sub	r3, fp, #128	; 0x80
   17ee4:	mov	r0, r3
   17ee8:	bl	182d0 <__assert_fail@plt+0x6d34>
   17eec:	ldrb	r3, [fp, #-104]	; 0xffffff98
   17ef0:	eor	r3, r3, #1
   17ef4:	uxtb	r3, r3
   17ef8:	cmp	r3, #0
   17efc:	bne	17f0c <__assert_fail@plt+0x6970>
   17f00:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17f04:	cmp	r3, #0
   17f08:	beq	17f14 <__assert_fail@plt+0x6978>
   17f0c:	mov	r3, #1
   17f10:	b	17f18 <__assert_fail@plt+0x697c>
   17f14:	mov	r3, #0
   17f18:	cmp	r3, #0
   17f1c:	bne	17f24 <__assert_fail@plt+0x6988>
   17f20:	bl	1156c <abort@plt>
   17f24:	ldr	r2, [fp, #-112]	; 0xffffff90
   17f28:	ldr	r3, [fp, #-108]	; 0xffffff94
   17f2c:	add	r3, r2, r3
   17f30:	str	r3, [fp, #-112]	; 0xffffff90
   17f34:	mov	r3, #0
   17f38:	strb	r3, [fp, #-116]	; 0xffffff8c
   17f3c:	sub	r3, fp, #128	; 0x80
   17f40:	mov	r0, r3
   17f44:	bl	182d0 <__assert_fail@plt+0x6d34>
   17f48:	ldrb	r3, [fp, #-104]	; 0xffffff98
   17f4c:	eor	r3, r3, #1
   17f50:	uxtb	r3, r3
   17f54:	cmp	r3, #0
   17f58:	bne	17f68 <__assert_fail@plt+0x69cc>
   17f5c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17f60:	cmp	r3, #0
   17f64:	beq	17f70 <__assert_fail@plt+0x69d4>
   17f68:	mov	r3, #1
   17f6c:	b	17f74 <__assert_fail@plt+0x69d8>
   17f70:	mov	r3, #0
   17f74:	cmp	r3, #0
   17f78:	bne	17f84 <__assert_fail@plt+0x69e8>
   17f7c:	ldr	r3, [fp, #-224]	; 0xffffff20
   17f80:	b	182c4 <__assert_fail@plt+0x6d28>
   17f84:	sub	r3, fp, #184	; 0xb8
   17f88:	mov	r0, r3
   17f8c:	bl	182d0 <__assert_fail@plt+0x6d34>
   17f90:	ldrb	r3, [fp, #-160]	; 0xffffff60
   17f94:	eor	r3, r3, #1
   17f98:	uxtb	r3, r3
   17f9c:	cmp	r3, #0
   17fa0:	bne	17fb0 <__assert_fail@plt+0x6a14>
   17fa4:	ldr	r3, [fp, #-156]	; 0xffffff64
   17fa8:	cmp	r3, #0
   17fac:	beq	17fb8 <__assert_fail@plt+0x6a1c>
   17fb0:	mov	r3, #1
   17fb4:	b	17fbc <__assert_fail@plt+0x6a20>
   17fb8:	mov	r3, #0
   17fbc:	cmp	r3, #0
   17fc0:	bne	17fcc <__assert_fail@plt+0x6a30>
   17fc4:	mov	r3, #0
   17fc8:	b	182c4 <__assert_fail@plt+0x6d28>
   17fcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17fd0:	add	r3, r3, #1
   17fd4:	str	r3, [fp, #-24]	; 0xffffffe8
   17fd8:	ldrb	r3, [fp, #-160]	; 0xffffff60
   17fdc:	cmp	r3, #0
   17fe0:	beq	1800c <__assert_fail@plt+0x6a70>
   17fe4:	ldrb	r3, [fp, #-104]	; 0xffffff98
   17fe8:	cmp	r3, #0
   17fec:	beq	1800c <__assert_fail@plt+0x6a70>
   17ff0:	ldr	r2, [fp, #-156]	; 0xffffff64
   17ff4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17ff8:	cmp	r2, r3
   17ffc:	movne	r3, #1
   18000:	moveq	r3, #0
   18004:	uxtb	r3, r3
   18008:	b	18050 <__assert_fail@plt+0x6ab4>
   1800c:	ldr	r2, [fp, #-164]	; 0xffffff5c
   18010:	ldr	r3, [fp, #-108]	; 0xffffff94
   18014:	cmp	r2, r3
   18018:	bne	1803c <__assert_fail@plt+0x6aa0>
   1801c:	ldr	r3, [fp, #-168]	; 0xffffff58
   18020:	ldr	r1, [fp, #-112]	; 0xffffff90
   18024:	ldr	r2, [fp, #-164]	; 0xffffff5c
   18028:	mov	r0, r3
   1802c:	bl	11278 <memcmp@plt>
   18030:	mov	r3, r0
   18034:	cmp	r3, #0
   18038:	beq	18044 <__assert_fail@plt+0x6aa8>
   1803c:	mov	r3, #1
   18040:	b	18048 <__assert_fail@plt+0x6aac>
   18044:	mov	r3, #0
   18048:	and	r3, r3, #1
   1804c:	uxtb	r3, r3
   18050:	cmp	r3, #0
   18054:	bne	1808c <__assert_fail@plt+0x6af0>
   18058:	ldr	r2, [fp, #-168]	; 0xffffff58
   1805c:	ldr	r3, [fp, #-164]	; 0xffffff5c
   18060:	add	r3, r2, r3
   18064:	str	r3, [fp, #-168]	; 0xffffff58
   18068:	mov	r3, #0
   1806c:	strb	r3, [fp, #-172]	; 0xffffff54
   18070:	ldr	r2, [fp, #-112]	; 0xffffff90
   18074:	ldr	r3, [fp, #-108]	; 0xffffff94
   18078:	add	r3, r2, r3
   1807c:	str	r3, [fp, #-112]	; 0xffffff90
   18080:	mov	r3, #0
   18084:	strb	r3, [fp, #-116]	; 0xffffff8c
   18088:	b	17f3c <__assert_fail@plt+0x69a0>
   1808c:	nop			; (mov r0, r0)
   18090:	ldr	r2, [fp, #-224]	; 0xffffff20
   18094:	ldr	r3, [fp, #-220]	; 0xffffff24
   18098:	add	r3, r2, r3
   1809c:	str	r3, [fp, #-224]	; 0xffffff20
   180a0:	mov	r3, #0
   180a4:	strb	r3, [fp, #-228]	; 0xffffff1c
   180a8:	b	17c58 <__assert_fail@plt+0x66bc>
   180ac:	ldr	r3, [fp, #-360]	; 0xfffffe98
   180b0:	b	182c4 <__assert_fail@plt+0x6d28>
   180b4:	ldr	r3, [fp, #-364]	; 0xfffffe94
   180b8:	ldrb	r3, [r3]
   180bc:	cmp	r3, #0
   180c0:	beq	182c0 <__assert_fail@plt+0x6d24>
   180c4:	mov	r3, #1
   180c8:	strb	r3, [fp, #-33]	; 0xffffffdf
   180cc:	mov	r3, #0
   180d0:	str	r3, [fp, #-40]	; 0xffffffd8
   180d4:	mov	r3, #0
   180d8:	str	r3, [fp, #-44]	; 0xffffffd4
   180dc:	mov	r3, #0
   180e0:	str	r3, [fp, #-48]	; 0xffffffd0
   180e4:	ldr	r3, [fp, #-364]	; 0xfffffe94
   180e8:	str	r3, [fp, #-52]	; 0xffffffcc
   180ec:	ldr	r3, [fp, #-364]	; 0xfffffe94
   180f0:	add	r2, r3, #1
   180f4:	str	r2, [fp, #-364]	; 0xfffffe94
   180f8:	ldrb	r3, [r3]
   180fc:	strb	r3, [fp, #-62]	; 0xffffffc2
   18100:	ldr	r3, [fp, #-360]	; 0xfffffe98
   18104:	ldrb	r3, [r3]
   18108:	cmp	r3, #0
   1810c:	bne	18118 <__assert_fail@plt+0x6b7c>
   18110:	mov	r3, #0
   18114:	b	182c4 <__assert_fail@plt+0x6d28>
   18118:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1811c:	cmp	r3, #0
   18120:	beq	181fc <__assert_fail@plt+0x6c60>
   18124:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18128:	cmp	r3, #9
   1812c:	bls	181fc <__assert_fail@plt+0x6c60>
   18130:	ldr	r2, [fp, #-40]	; 0xffffffd8
   18134:	mov	r3, r2
   18138:	lsl	r3, r3, #2
   1813c:	add	r2, r3, r2
   18140:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18144:	cmp	r2, r3
   18148:	bhi	181fc <__assert_fail@plt+0x6c60>
   1814c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   18150:	cmp	r3, #0
   18154:	beq	181a0 <__assert_fail@plt+0x6c04>
   18158:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1815c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   18160:	sub	r3, r2, r3
   18164:	mov	r1, r3
   18168:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1816c:	bl	11488 <strnlen@plt>
   18170:	mov	r2, r0
   18174:	ldr	r3, [fp, #-52]	; 0xffffffcc
   18178:	add	r3, r3, r2
   1817c:	str	r3, [fp, #-52]	; 0xffffffcc
   18180:	ldr	r3, [fp, #-52]	; 0xffffffcc
   18184:	ldrb	r3, [r3]
   18188:	cmp	r3, #0
   1818c:	bne	18198 <__assert_fail@plt+0x6bfc>
   18190:	mov	r3, #0
   18194:	str	r3, [fp, #-52]	; 0xffffffcc
   18198:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1819c:	str	r3, [fp, #-48]	; 0xffffffd0
   181a0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   181a4:	cmp	r3, #0
   181a8:	bne	181fc <__assert_fail@plt+0x6c60>
   181ac:	ldr	r3, [fp, #-364]	; 0xfffffe94
   181b0:	sub	r4, r3, #1
   181b4:	ldr	r3, [fp, #-364]	; 0xfffffe94
   181b8:	sub	r3, r3, #1
   181bc:	mov	r0, r3
   181c0:	bl	113ec <strlen@plt>
   181c4:	mov	r2, r0
   181c8:	sub	r3, fp, #72	; 0x48
   181cc:	mov	r1, r4
   181d0:	ldr	r0, [fp, #-360]	; 0xfffffe98
   181d4:	bl	170f4 <__assert_fail@plt+0x5b58>
   181d8:	mov	r3, r0
   181dc:	strb	r3, [fp, #-63]	; 0xffffffc1
   181e0:	ldrb	r3, [fp, #-63]	; 0xffffffc1
   181e4:	cmp	r3, #0
   181e8:	beq	181f4 <__assert_fail@plt+0x6c58>
   181ec:	ldr	r3, [fp, #-72]	; 0xffffffb8
   181f0:	b	182c4 <__assert_fail@plt+0x6d28>
   181f4:	mov	r3, #0
   181f8:	strb	r3, [fp, #-33]	; 0xffffffdf
   181fc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18200:	add	r3, r3, #1
   18204:	str	r3, [fp, #-40]	; 0xffffffd8
   18208:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1820c:	add	r3, r3, #1
   18210:	str	r3, [fp, #-44]	; 0xffffffd4
   18214:	ldr	r3, [fp, #-360]	; 0xfffffe98
   18218:	ldrb	r3, [r3]
   1821c:	ldrb	r2, [fp, #-62]	; 0xffffffc2
   18220:	cmp	r2, r3
   18224:	bne	182b0 <__assert_fail@plt+0x6d14>
   18228:	ldr	r3, [fp, #-360]	; 0xfffffe98
   1822c:	add	r3, r3, #1
   18230:	str	r3, [fp, #-56]	; 0xffffffc8
   18234:	ldr	r3, [fp, #-364]	; 0xfffffe94
   18238:	str	r3, [fp, #-60]	; 0xffffffc4
   1823c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18240:	ldrb	r3, [r3]
   18244:	cmp	r3, #0
   18248:	bne	18254 <__assert_fail@plt+0x6cb8>
   1824c:	ldr	r3, [fp, #-360]	; 0xfffffe98
   18250:	b	182c4 <__assert_fail@plt+0x6d28>
   18254:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18258:	ldrb	r3, [r3]
   1825c:	cmp	r3, #0
   18260:	bne	1826c <__assert_fail@plt+0x6cd0>
   18264:	mov	r3, #0
   18268:	b	182c4 <__assert_fail@plt+0x6d28>
   1826c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18270:	add	r3, r3, #1
   18274:	str	r3, [fp, #-44]	; 0xffffffd4
   18278:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1827c:	ldrb	r2, [r3]
   18280:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18284:	ldrb	r3, [r3]
   18288:	cmp	r2, r3
   1828c:	bne	182ac <__assert_fail@plt+0x6d10>
   18290:	ldr	r3, [fp, #-56]	; 0xffffffc8
   18294:	add	r3, r3, #1
   18298:	str	r3, [fp, #-56]	; 0xffffffc8
   1829c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   182a0:	add	r3, r3, #1
   182a4:	str	r3, [fp, #-60]	; 0xffffffc4
   182a8:	b	1823c <__assert_fail@plt+0x6ca0>
   182ac:	nop			; (mov r0, r0)
   182b0:	ldr	r3, [fp, #-360]	; 0xfffffe98
   182b4:	add	r3, r3, #1
   182b8:	str	r3, [fp, #-360]	; 0xfffffe98
   182bc:	b	18100 <__assert_fail@plt+0x6b64>
   182c0:	ldr	r3, [fp, #-360]	; 0xfffffe98
   182c4:	mov	r0, r3
   182c8:	sub	sp, fp, #8
   182cc:	pop	{r4, fp, pc}
   182d0:	push	{r4, r5, r6, fp, lr}
   182d4:	add	fp, sp, #16
   182d8:	sub	sp, sp, #12
   182dc:	str	r0, [fp, #-24]	; 0xffffffe8
   182e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   182e4:	ldrb	r3, [r3, #12]
   182e8:	cmp	r3, #0
   182ec:	bne	184fc <__assert_fail@plt+0x6f60>
   182f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   182f4:	ldrb	r3, [r3]
   182f8:	cmp	r3, #0
   182fc:	bne	18394 <__assert_fail@plt+0x6df8>
   18300:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18304:	ldr	r3, [r3, #16]
   18308:	ldrb	r3, [r3]
   1830c:	mov	r0, r3
   18310:	bl	1da98 <__assert_fail@plt+0xc4fc>
   18314:	mov	r3, r0
   18318:	cmp	r3, #0
   1831c:	beq	18354 <__assert_fail@plt+0x6db8>
   18320:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18324:	mov	r2, #1
   18328:	str	r2, [r3, #20]
   1832c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18330:	ldr	r3, [r3, #16]
   18334:	ldrb	r3, [r3]
   18338:	mov	r2, r3
   1833c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18340:	str	r2, [r3, #28]
   18344:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18348:	mov	r2, #1
   1834c:	strb	r2, [r3, #24]
   18350:	b	184ec <__assert_fail@plt+0x6f50>
   18354:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18358:	add	r3, r3, #4
   1835c:	mov	r0, r3
   18360:	bl	11260 <mbsinit@plt>
   18364:	mov	r3, r0
   18368:	cmp	r3, #0
   1836c:	bne	18384 <__assert_fail@plt+0x6de8>
   18370:	ldr	r3, [pc, #400]	; 18508 <__assert_fail@plt+0x6f6c>
   18374:	mov	r2, #143	; 0x8f
   18378:	ldr	r1, [pc, #396]	; 1850c <__assert_fail@plt+0x6f70>
   1837c:	ldr	r0, [pc, #396]	; 18510 <__assert_fail@plt+0x6f74>
   18380:	bl	1159c <__assert_fail@plt>
   18384:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18388:	mov	r2, #1
   1838c:	strb	r2, [r3]
   18390:	b	18398 <__assert_fail@plt+0x6dfc>
   18394:	nop			; (mov r0, r0)
   18398:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1839c:	add	r4, r3, #28
   183a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   183a4:	ldr	r5, [r3, #16]
   183a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   183ac:	ldr	r6, [r3, #16]
   183b0:	bl	11314 <__ctype_get_mb_cur_max@plt>
   183b4:	mov	r3, r0
   183b8:	mov	r1, r3
   183bc:	mov	r0, r6
   183c0:	bl	1adfc <__assert_fail@plt+0x9860>
   183c4:	mov	r2, r0
   183c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   183cc:	add	r3, r3, #4
   183d0:	mov	r1, r5
   183d4:	mov	r0, r4
   183d8:	bl	1d1ac <__assert_fail@plt+0xbc10>
   183dc:	mov	r2, r0
   183e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   183e4:	str	r2, [r3, #20]
   183e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   183ec:	ldr	r3, [r3, #20]
   183f0:	cmn	r3, #1
   183f4:	bne	18414 <__assert_fail@plt+0x6e78>
   183f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   183fc:	mov	r2, #1
   18400:	str	r2, [r3, #20]
   18404:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18408:	mov	r2, #0
   1840c:	strb	r2, [r3, #24]
   18410:	b	184ec <__assert_fail@plt+0x6f50>
   18414:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18418:	ldr	r3, [r3, #20]
   1841c:	cmn	r3, #2
   18420:	bne	18450 <__assert_fail@plt+0x6eb4>
   18424:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18428:	ldr	r3, [r3, #16]
   1842c:	mov	r0, r3
   18430:	bl	113ec <strlen@plt>
   18434:	mov	r2, r0
   18438:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1843c:	str	r2, [r3, #20]
   18440:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18444:	mov	r2, #0
   18448:	strb	r2, [r3, #24]
   1844c:	b	184ec <__assert_fail@plt+0x6f50>
   18450:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18454:	ldr	r3, [r3, #20]
   18458:	cmp	r3, #0
   1845c:	bne	184b8 <__assert_fail@plt+0x6f1c>
   18460:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18464:	mov	r2, #1
   18468:	str	r2, [r3, #20]
   1846c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18470:	ldr	r3, [r3, #16]
   18474:	ldrb	r3, [r3]
   18478:	cmp	r3, #0
   1847c:	beq	18494 <__assert_fail@plt+0x6ef8>
   18480:	ldr	r3, [pc, #128]	; 18508 <__assert_fail@plt+0x6f6c>
   18484:	mov	r2, #171	; 0xab
   18488:	ldr	r1, [pc, #124]	; 1850c <__assert_fail@plt+0x6f70>
   1848c:	ldr	r0, [pc, #128]	; 18514 <__assert_fail@plt+0x6f78>
   18490:	bl	1159c <__assert_fail@plt>
   18494:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18498:	ldr	r3, [r3, #28]
   1849c:	cmp	r3, #0
   184a0:	beq	184b8 <__assert_fail@plt+0x6f1c>
   184a4:	ldr	r3, [pc, #92]	; 18508 <__assert_fail@plt+0x6f6c>
   184a8:	mov	r2, #172	; 0xac
   184ac:	ldr	r1, [pc, #88]	; 1850c <__assert_fail@plt+0x6f70>
   184b0:	ldr	r0, [pc, #96]	; 18518 <__assert_fail@plt+0x6f7c>
   184b4:	bl	1159c <__assert_fail@plt>
   184b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   184bc:	mov	r2, #1
   184c0:	strb	r2, [r3, #24]
   184c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   184c8:	add	r3, r3, #4
   184cc:	mov	r0, r3
   184d0:	bl	11260 <mbsinit@plt>
   184d4:	mov	r3, r0
   184d8:	cmp	r3, #0
   184dc:	beq	184ec <__assert_fail@plt+0x6f50>
   184e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   184e4:	mov	r2, #0
   184e8:	strb	r2, [r3]
   184ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   184f0:	mov	r2, #1
   184f4:	strb	r2, [r3, #12]
   184f8:	b	18500 <__assert_fail@plt+0x6f64>
   184fc:	nop			; (mov r0, r0)
   18500:	sub	sp, fp, #16
   18504:	pop	{r4, r5, r6, fp, pc}
   18508:	muleq	r2, ip, r6
   1850c:	andeq	r0, r2, ip, asr #12
   18510:	andeq	r0, r2, r8, asr r6
   18514:	andeq	r0, r2, r0, ror r6
   18518:	andeq	r0, r2, r8, lsl #13
   1851c:	push	{fp}		; (str fp, [sp, #-4]!)
   18520:	add	fp, sp, #0
   18524:	sub	sp, sp, #12
   18528:	str	r0, [fp, #-8]
   1852c:	str	r1, [fp, #-12]
   18530:	ldr	r3, [fp, #-8]
   18534:	ldr	r2, [r3, #16]
   18538:	ldr	r3, [fp, #-12]
   1853c:	add	r2, r2, r3
   18540:	ldr	r3, [fp, #-8]
   18544:	str	r2, [r3, #16]
   18548:	nop			; (mov r0, r0)
   1854c:	add	sp, fp, #0
   18550:	pop	{fp}		; (ldr fp, [sp], #4)
   18554:	bx	lr
   18558:	push	{fp, lr}
   1855c:	add	fp, sp, #4
   18560:	sub	sp, sp, #8
   18564:	str	r0, [fp, #-8]
   18568:	str	r1, [fp, #-12]
   1856c:	ldr	r3, [fp, #-12]
   18570:	ldrb	r2, [r3]
   18574:	ldr	r3, [fp, #-8]
   18578:	strb	r2, [r3]
   1857c:	ldr	r3, [fp, #-8]
   18580:	ldrb	r3, [r3]
   18584:	cmp	r3, #0
   18588:	beq	185ac <__assert_fail@plt+0x7010>
   1858c:	ldr	r3, [fp, #-8]
   18590:	add	r0, r3, #4
   18594:	ldr	r3, [fp, #-12]
   18598:	add	r3, r3, #4
   1859c:	mov	r2, #8
   185a0:	mov	r1, r3
   185a4:	bl	11248 <memcpy@plt>
   185a8:	b	185c4 <__assert_fail@plt+0x7028>
   185ac:	ldr	r3, [fp, #-8]
   185b0:	add	r3, r3, #4
   185b4:	mov	r2, #8
   185b8:	mov	r1, #0
   185bc:	mov	r0, r3
   185c0:	bl	11440 <memset@plt>
   185c4:	ldr	r3, [fp, #-12]
   185c8:	ldrb	r2, [r3, #12]
   185cc:	ldr	r3, [fp, #-8]
   185d0:	strb	r2, [r3, #12]
   185d4:	ldr	r3, [fp, #-8]
   185d8:	add	r2, r3, #16
   185dc:	ldr	r3, [fp, #-12]
   185e0:	add	r3, r3, #16
   185e4:	mov	r1, r3
   185e8:	mov	r0, r2
   185ec:	bl	1d9dc <__assert_fail@plt+0xc440>
   185f0:	nop			; (mov r0, r0)
   185f4:	sub	sp, fp, #4
   185f8:	pop	{fp, pc}
   185fc:	push	{fp, lr}
   18600:	add	fp, sp, #4
   18604:	sub	sp, sp, #16
   18608:	str	r0, [fp, #-16]
   1860c:	ldr	r3, [fp, #-16]
   18610:	cmp	r3, #0
   18614:	bne	18634 <__assert_fail@plt+0x7098>
   18618:	ldr	r3, [pc, #220]	; 186fc <__assert_fail@plt+0x7160>
   1861c:	ldr	r3, [r3]
   18620:	mov	r2, #55	; 0x37
   18624:	mov	r1, #1
   18628:	ldr	r0, [pc, #208]	; 18700 <__assert_fail@plt+0x7164>
   1862c:	bl	112f0 <fwrite@plt>
   18630:	bl	1156c <abort@plt>
   18634:	mov	r1, #47	; 0x2f
   18638:	ldr	r0, [fp, #-16]
   1863c:	bl	114dc <strrchr@plt>
   18640:	str	r0, [fp, #-8]
   18644:	ldr	r3, [fp, #-8]
   18648:	cmp	r3, #0
   1864c:	beq	1865c <__assert_fail@plt+0x70c0>
   18650:	ldr	r3, [fp, #-8]
   18654:	add	r3, r3, #1
   18658:	b	18660 <__assert_fail@plt+0x70c4>
   1865c:	ldr	r3, [fp, #-16]
   18660:	str	r3, [fp, #-12]
   18664:	ldr	r2, [fp, #-12]
   18668:	ldr	r3, [fp, #-16]
   1866c:	sub	r3, r2, r3
   18670:	cmp	r3, #6
   18674:	ble	186d8 <__assert_fail@plt+0x713c>
   18678:	ldr	r3, [fp, #-12]
   1867c:	sub	r3, r3, #7
   18680:	mov	r2, #7
   18684:	ldr	r1, [pc, #120]	; 18704 <__assert_fail@plt+0x7168>
   18688:	mov	r0, r3
   1868c:	bl	11560 <strncmp@plt>
   18690:	mov	r3, r0
   18694:	cmp	r3, #0
   18698:	bne	186d8 <__assert_fail@plt+0x713c>
   1869c:	ldr	r3, [fp, #-12]
   186a0:	str	r3, [fp, #-16]
   186a4:	mov	r2, #3
   186a8:	ldr	r1, [pc, #88]	; 18708 <__assert_fail@plt+0x716c>
   186ac:	ldr	r0, [fp, #-12]
   186b0:	bl	11560 <strncmp@plt>
   186b4:	mov	r3, r0
   186b8:	cmp	r3, #0
   186bc:	bne	186d8 <__assert_fail@plt+0x713c>
   186c0:	ldr	r3, [fp, #-12]
   186c4:	add	r3, r3, #3
   186c8:	str	r3, [fp, #-16]
   186cc:	ldr	r2, [pc, #56]	; 1870c <__assert_fail@plt+0x7170>
   186d0:	ldr	r3, [fp, #-16]
   186d4:	str	r3, [r2]
   186d8:	ldr	r2, [pc, #48]	; 18710 <__assert_fail@plt+0x7174>
   186dc:	ldr	r3, [fp, #-16]
   186e0:	str	r3, [r2]
   186e4:	ldr	r2, [pc, #40]	; 18714 <__assert_fail@plt+0x7178>
   186e8:	ldr	r3, [fp, #-16]
   186ec:	str	r3, [r2]
   186f0:	nop			; (mov r0, r0)
   186f4:	sub	sp, fp, #4
   186f8:	pop	{fp, pc}
   186fc:	ldrdeq	r1, [r3], -r8
   18700:			; <UNDEFINED> instruction: 0x000206b0
   18704:	andeq	r0, r2, r8, ror #13
   18708:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1870c:	andeq	r1, r3, r0, asr #3
   18710:			; <UNDEFINED> instruction: 0x000312b0
   18714:	andeq	r1, r3, r8, asr #3
   18718:	push	{fp, lr}
   1871c:	add	fp, sp, #4
   18720:	sub	sp, sp, #16
   18724:	str	r0, [fp, #-16]
   18728:	bl	1141c <__errno_location@plt>
   1872c:	mov	r3, r0
   18730:	ldr	r3, [r3]
   18734:	str	r3, [fp, #-8]
   18738:	ldr	r3, [fp, #-16]
   1873c:	cmp	r3, #0
   18740:	beq	1874c <__assert_fail@plt+0x71b0>
   18744:	ldr	r3, [fp, #-16]
   18748:	b	18750 <__assert_fail@plt+0x71b4>
   1874c:	ldr	r3, [pc, #48]	; 18784 <__assert_fail@plt+0x71e8>
   18750:	mov	r1, #48	; 0x30
   18754:	mov	r0, r3
   18758:	bl	1c1a4 <__assert_fail@plt+0xac08>
   1875c:	mov	r3, r0
   18760:	str	r3, [fp, #-12]
   18764:	bl	1141c <__errno_location@plt>
   18768:	mov	r2, r0
   1876c:	ldr	r3, [fp, #-8]
   18770:	str	r3, [r2]
   18774:	ldr	r3, [fp, #-12]
   18778:	mov	r0, r3
   1877c:	sub	sp, fp, #4
   18780:	pop	{fp, pc}
   18784:			; <UNDEFINED> instruction: 0x000312b4
   18788:	push	{fp}		; (str fp, [sp, #-4]!)
   1878c:	add	fp, sp, #0
   18790:	sub	sp, sp, #12
   18794:	str	r0, [fp, #-8]
   18798:	ldr	r3, [fp, #-8]
   1879c:	cmp	r3, #0
   187a0:	beq	187ac <__assert_fail@plt+0x7210>
   187a4:	ldr	r3, [fp, #-8]
   187a8:	b	187b0 <__assert_fail@plt+0x7214>
   187ac:	ldr	r3, [pc, #16]	; 187c4 <__assert_fail@plt+0x7228>
   187b0:	ldr	r3, [r3]
   187b4:	mov	r0, r3
   187b8:	add	sp, fp, #0
   187bc:	pop	{fp}		; (ldr fp, [sp], #4)
   187c0:	bx	lr
   187c4:			; <UNDEFINED> instruction: 0x000312b4
   187c8:	push	{fp}		; (str fp, [sp, #-4]!)
   187cc:	add	fp, sp, #0
   187d0:	sub	sp, sp, #12
   187d4:	str	r0, [fp, #-8]
   187d8:	str	r1, [fp, #-12]
   187dc:	ldr	r3, [fp, #-8]
   187e0:	cmp	r3, #0
   187e4:	beq	187f0 <__assert_fail@plt+0x7254>
   187e8:	ldr	r3, [fp, #-8]
   187ec:	b	187f4 <__assert_fail@plt+0x7258>
   187f0:	ldr	r3, [pc, #20]	; 1880c <__assert_fail@plt+0x7270>
   187f4:	ldr	r2, [fp, #-12]
   187f8:	str	r2, [r3]
   187fc:	nop			; (mov r0, r0)
   18800:	add	sp, fp, #0
   18804:	pop	{fp}		; (ldr fp, [sp], #4)
   18808:	bx	lr
   1880c:			; <UNDEFINED> instruction: 0x000312b4
   18810:	push	{fp}		; (str fp, [sp, #-4]!)
   18814:	add	fp, sp, #0
   18818:	sub	sp, sp, #36	; 0x24
   1881c:	str	r0, [fp, #-24]	; 0xffffffe8
   18820:	mov	r3, r1
   18824:	str	r2, [fp, #-32]	; 0xffffffe0
   18828:	strb	r3, [fp, #-25]	; 0xffffffe7
   1882c:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   18830:	strb	r3, [fp, #-5]
   18834:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18838:	cmp	r3, #0
   1883c:	beq	18848 <__assert_fail@plt+0x72ac>
   18840:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18844:	b	1884c <__assert_fail@plt+0x72b0>
   18848:	ldr	r3, [pc, #124]	; 188cc <__assert_fail@plt+0x7330>
   1884c:	add	r2, r3, #8
   18850:	ldrb	r3, [fp, #-5]
   18854:	lsr	r3, r3, #5
   18858:	uxtb	r3, r3
   1885c:	lsl	r3, r3, #2
   18860:	add	r3, r2, r3
   18864:	str	r3, [fp, #-12]
   18868:	ldrb	r3, [fp, #-5]
   1886c:	and	r3, r3, #31
   18870:	str	r3, [fp, #-16]
   18874:	ldr	r3, [fp, #-12]
   18878:	ldr	r2, [r3]
   1887c:	ldr	r3, [fp, #-16]
   18880:	lsr	r3, r2, r3
   18884:	and	r3, r3, #1
   18888:	str	r3, [fp, #-20]	; 0xffffffec
   1888c:	ldr	r3, [fp, #-12]
   18890:	ldr	r3, [r3]
   18894:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18898:	and	r1, r2, #1
   1889c:	ldr	r2, [fp, #-20]	; 0xffffffec
   188a0:	eor	r1, r1, r2
   188a4:	ldr	r2, [fp, #-16]
   188a8:	lsl	r2, r1, r2
   188ac:	eor	r2, r2, r3
   188b0:	ldr	r3, [fp, #-12]
   188b4:	str	r2, [r3]
   188b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   188bc:	mov	r0, r3
   188c0:	add	sp, fp, #0
   188c4:	pop	{fp}		; (ldr fp, [sp], #4)
   188c8:	bx	lr
   188cc:			; <UNDEFINED> instruction: 0x000312b4
   188d0:	push	{fp}		; (str fp, [sp, #-4]!)
   188d4:	add	fp, sp, #0
   188d8:	sub	sp, sp, #20
   188dc:	str	r0, [fp, #-16]
   188e0:	str	r1, [fp, #-20]	; 0xffffffec
   188e4:	ldr	r3, [fp, #-16]
   188e8:	cmp	r3, #0
   188ec:	bne	188f8 <__assert_fail@plt+0x735c>
   188f0:	ldr	r3, [pc, #44]	; 18924 <__assert_fail@plt+0x7388>
   188f4:	str	r3, [fp, #-16]
   188f8:	ldr	r3, [fp, #-16]
   188fc:	ldr	r3, [r3, #4]
   18900:	str	r3, [fp, #-8]
   18904:	ldr	r3, [fp, #-16]
   18908:	ldr	r2, [fp, #-20]	; 0xffffffec
   1890c:	str	r2, [r3, #4]
   18910:	ldr	r3, [fp, #-8]
   18914:	mov	r0, r3
   18918:	add	sp, fp, #0
   1891c:	pop	{fp}		; (ldr fp, [sp], #4)
   18920:	bx	lr
   18924:			; <UNDEFINED> instruction: 0x000312b4
   18928:	push	{fp, lr}
   1892c:	add	fp, sp, #4
   18930:	sub	sp, sp, #16
   18934:	str	r0, [fp, #-8]
   18938:	str	r1, [fp, #-12]
   1893c:	str	r2, [fp, #-16]
   18940:	ldr	r3, [fp, #-8]
   18944:	cmp	r3, #0
   18948:	bne	18954 <__assert_fail@plt+0x73b8>
   1894c:	ldr	r3, [pc, #76]	; 189a0 <__assert_fail@plt+0x7404>
   18950:	str	r3, [fp, #-8]
   18954:	ldr	r3, [fp, #-8]
   18958:	mov	r2, #10
   1895c:	str	r2, [r3]
   18960:	ldr	r3, [fp, #-12]
   18964:	cmp	r3, #0
   18968:	beq	18978 <__assert_fail@plt+0x73dc>
   1896c:	ldr	r3, [fp, #-16]
   18970:	cmp	r3, #0
   18974:	bne	1897c <__assert_fail@plt+0x73e0>
   18978:	bl	1156c <abort@plt>
   1897c:	ldr	r3, [fp, #-8]
   18980:	ldr	r2, [fp, #-12]
   18984:	str	r2, [r3, #40]	; 0x28
   18988:	ldr	r3, [fp, #-8]
   1898c:	ldr	r2, [fp, #-16]
   18990:	str	r2, [r3, #44]	; 0x2c
   18994:	nop			; (mov r0, r0)
   18998:	sub	sp, fp, #4
   1899c:	pop	{fp, pc}
   189a0:			; <UNDEFINED> instruction: 0x000312b4
   189a4:	push	{fp, lr}
   189a8:	add	fp, sp, #4
   189ac:	sub	sp, sp, #56	; 0x38
   189b0:	str	r0, [fp, #-56]	; 0xffffffc8
   189b4:	str	r1, [fp, #-60]	; 0xffffffc4
   189b8:	sub	r3, fp, #52	; 0x34
   189bc:	mov	r2, #48	; 0x30
   189c0:	mov	r1, #0
   189c4:	mov	r0, r3
   189c8:	bl	11440 <memset@plt>
   189cc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   189d0:	cmp	r3, #10
   189d4:	bne	189dc <__assert_fail@plt+0x7440>
   189d8:	bl	1156c <abort@plt>
   189dc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   189e0:	str	r3, [fp, #-52]	; 0xffffffcc
   189e4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   189e8:	mov	lr, r3
   189ec:	sub	ip, fp, #52	; 0x34
   189f0:	ldm	ip!, {r0, r1, r2, r3}
   189f4:	stmia	lr!, {r0, r1, r2, r3}
   189f8:	ldm	ip!, {r0, r1, r2, r3}
   189fc:	stmia	lr!, {r0, r1, r2, r3}
   18a00:	ldm	ip, {r0, r1, r2, r3}
   18a04:	stm	lr, {r0, r1, r2, r3}
   18a08:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18a0c:	sub	sp, fp, #4
   18a10:	pop	{fp, pc}
   18a14:	push	{fp, lr}
   18a18:	add	fp, sp, #4
   18a1c:	sub	sp, sp, #16
   18a20:	str	r0, [fp, #-16]
   18a24:	str	r1, [fp, #-20]	; 0xffffffec
   18a28:	ldr	r0, [fp, #-16]
   18a2c:	bl	113d4 <gettext@plt>
   18a30:	str	r0, [fp, #-8]
   18a34:	ldr	r2, [fp, #-8]
   18a38:	ldr	r3, [fp, #-16]
   18a3c:	cmp	r2, r3
   18a40:	beq	18a4c <__assert_fail@plt+0x74b0>
   18a44:	ldr	r3, [fp, #-8]
   18a48:	b	18adc <__assert_fail@plt+0x7540>
   18a4c:	bl	1d720 <__assert_fail@plt+0xc184>
   18a50:	str	r0, [fp, #-12]
   18a54:	ldr	r1, [pc, #140]	; 18ae8 <__assert_fail@plt+0x754c>
   18a58:	ldr	r0, [fp, #-12]
   18a5c:	bl	1d3d8 <__assert_fail@plt+0xbe3c>
   18a60:	mov	r3, r0
   18a64:	cmp	r3, #0
   18a68:	bne	18a8c <__assert_fail@plt+0x74f0>
   18a6c:	ldr	r3, [fp, #-16]
   18a70:	ldrb	r3, [r3]
   18a74:	cmp	r3, #96	; 0x60
   18a78:	bne	18a84 <__assert_fail@plt+0x74e8>
   18a7c:	ldr	r3, [pc, #104]	; 18aec <__assert_fail@plt+0x7550>
   18a80:	b	18adc <__assert_fail@plt+0x7540>
   18a84:	ldr	r3, [pc, #100]	; 18af0 <__assert_fail@plt+0x7554>
   18a88:	b	18adc <__assert_fail@plt+0x7540>
   18a8c:	ldr	r1, [pc, #96]	; 18af4 <__assert_fail@plt+0x7558>
   18a90:	ldr	r0, [fp, #-12]
   18a94:	bl	1d3d8 <__assert_fail@plt+0xbe3c>
   18a98:	mov	r3, r0
   18a9c:	cmp	r3, #0
   18aa0:	bne	18ac4 <__assert_fail@plt+0x7528>
   18aa4:	ldr	r3, [fp, #-16]
   18aa8:	ldrb	r3, [r3]
   18aac:	cmp	r3, #96	; 0x60
   18ab0:	bne	18abc <__assert_fail@plt+0x7520>
   18ab4:	ldr	r3, [pc, #60]	; 18af8 <__assert_fail@plt+0x755c>
   18ab8:	b	18adc <__assert_fail@plt+0x7540>
   18abc:	ldr	r3, [pc, #56]	; 18afc <__assert_fail@plt+0x7560>
   18ac0:	b	18adc <__assert_fail@plt+0x7540>
   18ac4:	ldr	r3, [fp, #-20]	; 0xffffffec
   18ac8:	cmp	r3, #9
   18acc:	bne	18ad8 <__assert_fail@plt+0x753c>
   18ad0:	ldr	r3, [pc, #40]	; 18b00 <__assert_fail@plt+0x7564>
   18ad4:	b	18adc <__assert_fail@plt+0x7540>
   18ad8:	ldr	r3, [pc, #36]	; 18b04 <__assert_fail@plt+0x7568>
   18adc:	mov	r0, r3
   18ae0:	sub	sp, fp, #4
   18ae4:	pop	{fp, pc}
   18ae8:			; <UNDEFINED> instruction: 0x000207b0
   18aec:			; <UNDEFINED> instruction: 0x000207b8
   18af0:			; <UNDEFINED> instruction: 0x000207bc
   18af4:	andeq	r0, r2, r0, asr #15
   18af8:	andeq	r0, r2, r8, asr #15
   18afc:	andeq	r0, r2, ip, asr #15
   18b00:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   18b04:	ldrdeq	r0, [r2], -r4
   18b08:	push	{r4, fp, lr}
   18b0c:	add	fp, sp, #8
   18b10:	sub	sp, sp, #116	; 0x74
   18b14:	str	r0, [fp, #-88]	; 0xffffffa8
   18b18:	str	r1, [fp, #-92]	; 0xffffffa4
   18b1c:	str	r2, [fp, #-96]	; 0xffffffa0
   18b20:	str	r3, [fp, #-100]	; 0xffffff9c
   18b24:	mov	r3, #0
   18b28:	str	r3, [fp, #-20]	; 0xffffffec
   18b2c:	mov	r3, #0
   18b30:	str	r3, [fp, #-24]	; 0xffffffe8
   18b34:	mov	r3, #0
   18b38:	str	r3, [fp, #-28]	; 0xffffffe4
   18b3c:	mov	r3, #0
   18b40:	str	r3, [fp, #-32]	; 0xffffffe0
   18b44:	mov	r3, #0
   18b48:	strb	r3, [fp, #-33]	; 0xffffffdf
   18b4c:	bl	11314 <__ctype_get_mb_cur_max@plt>
   18b50:	mov	r3, r0
   18b54:	cmp	r3, #1
   18b58:	moveq	r3, #1
   18b5c:	movne	r3, #0
   18b60:	strb	r3, [fp, #-57]	; 0xffffffc7
   18b64:	ldr	r3, [fp, #8]
   18b68:	and	r3, r3, #2
   18b6c:	cmp	r3, #0
   18b70:	movne	r3, #1
   18b74:	moveq	r3, #0
   18b78:	strb	r3, [fp, #-34]	; 0xffffffde
   18b7c:	mov	r3, #0
   18b80:	strb	r3, [fp, #-35]	; 0xffffffdd
   18b84:	mov	r3, #0
   18b88:	strb	r3, [fp, #-36]	; 0xffffffdc
   18b8c:	mov	r3, #1
   18b90:	strb	r3, [fp, #-37]	; 0xffffffdb
   18b94:	ldr	r3, [fp, #4]
   18b98:	cmp	r3, #10
   18b9c:	ldrls	pc, [pc, r3, lsl #2]
   18ba0:	b	18da8 <__assert_fail@plt+0x780c>
   18ba4:	muleq	r1, ip, sp
   18ba8:	andeq	r8, r1, r8, lsl sp
   18bac:	andeq	r8, r1, ip, lsr sp
   18bb0:	andeq	r8, r1, r0, lsl sp
   18bb4:	andeq	r8, r1, r0, lsr #26
   18bb8:	andeq	r8, r1, r0, ror #23
   18bbc:	ldrdeq	r8, [r1], -r0
   18bc0:	andeq	r8, r1, r0, asr #24
   18bc4:	andeq	r8, r1, r4, asr ip
   18bc8:	andeq	r8, r1, r4, asr ip
   18bcc:	andeq	r8, r1, r4, asr ip
   18bd0:	mov	r3, #5
   18bd4:	str	r3, [fp, #4]
   18bd8:	mov	r3, #1
   18bdc:	strb	r3, [fp, #-34]	; 0xffffffde
   18be0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18be4:	eor	r3, r3, #1
   18be8:	uxtb	r3, r3
   18bec:	cmp	r3, #0
   18bf0:	beq	18c24 <__assert_fail@plt+0x7688>
   18bf4:	ldr	r2, [fp, #-20]	; 0xffffffec
   18bf8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18bfc:	cmp	r2, r3
   18c00:	bcs	18c18 <__assert_fail@plt+0x767c>
   18c04:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18c08:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c0c:	add	r3, r2, r3
   18c10:	mov	r2, #34	; 0x22
   18c14:	strb	r2, [r3]
   18c18:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c1c:	add	r3, r3, #1
   18c20:	str	r3, [fp, #-20]	; 0xffffffec
   18c24:	mov	r3, #1
   18c28:	strb	r3, [fp, #-33]	; 0xffffffdf
   18c2c:	ldr	r3, [pc, #3872]	; 19b54 <__assert_fail@plt+0x85b8>
   18c30:	str	r3, [fp, #-28]	; 0xffffffe4
   18c34:	mov	r3, #1
   18c38:	str	r3, [fp, #-32]	; 0xffffffe0
   18c3c:	b	18dac <__assert_fail@plt+0x7810>
   18c40:	mov	r3, #1
   18c44:	strb	r3, [fp, #-33]	; 0xffffffdf
   18c48:	mov	r3, #0
   18c4c:	strb	r3, [fp, #-34]	; 0xffffffde
   18c50:	b	18dac <__assert_fail@plt+0x7810>
   18c54:	ldr	r3, [fp, #4]
   18c58:	cmp	r3, #10
   18c5c:	beq	18c80 <__assert_fail@plt+0x76e4>
   18c60:	ldr	r1, [fp, #4]
   18c64:	ldr	r0, [pc, #3820]	; 19b58 <__assert_fail@plt+0x85bc>
   18c68:	bl	18a14 <__assert_fail@plt+0x7478>
   18c6c:	str	r0, [fp, #16]
   18c70:	ldr	r1, [fp, #4]
   18c74:	ldr	r0, [pc, #3808]	; 19b5c <__assert_fail@plt+0x85c0>
   18c78:	bl	18a14 <__assert_fail@plt+0x7478>
   18c7c:	str	r0, [fp, #20]
   18c80:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18c84:	eor	r3, r3, #1
   18c88:	uxtb	r3, r3
   18c8c:	cmp	r3, #0
   18c90:	beq	18cf0 <__assert_fail@plt+0x7754>
   18c94:	ldr	r3, [fp, #16]
   18c98:	str	r3, [fp, #-28]	; 0xffffffe4
   18c9c:	b	18ce0 <__assert_fail@plt+0x7744>
   18ca0:	ldr	r2, [fp, #-20]	; 0xffffffec
   18ca4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18ca8:	cmp	r2, r3
   18cac:	bcs	18cc8 <__assert_fail@plt+0x772c>
   18cb0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18cb4:	ldr	r3, [fp, #-20]	; 0xffffffec
   18cb8:	add	r3, r2, r3
   18cbc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18cc0:	ldrb	r2, [r2]
   18cc4:	strb	r2, [r3]
   18cc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   18ccc:	add	r3, r3, #1
   18cd0:	str	r3, [fp, #-20]	; 0xffffffec
   18cd4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18cd8:	add	r3, r3, #1
   18cdc:	str	r3, [fp, #-28]	; 0xffffffe4
   18ce0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18ce4:	ldrb	r3, [r3]
   18ce8:	cmp	r3, #0
   18cec:	bne	18ca0 <__assert_fail@plt+0x7704>
   18cf0:	mov	r3, #1
   18cf4:	strb	r3, [fp, #-33]	; 0xffffffdf
   18cf8:	ldr	r3, [fp, #20]
   18cfc:	str	r3, [fp, #-28]	; 0xffffffe4
   18d00:	ldr	r0, [fp, #-28]	; 0xffffffe4
   18d04:	bl	113ec <strlen@plt>
   18d08:	str	r0, [fp, #-32]	; 0xffffffe0
   18d0c:	b	18dac <__assert_fail@plt+0x7810>
   18d10:	mov	r3, #1
   18d14:	strb	r3, [fp, #-33]	; 0xffffffdf
   18d18:	mov	r3, #1
   18d1c:	strb	r3, [fp, #-34]	; 0xffffffde
   18d20:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18d24:	eor	r3, r3, #1
   18d28:	uxtb	r3, r3
   18d2c:	cmp	r3, #0
   18d30:	beq	18d3c <__assert_fail@plt+0x77a0>
   18d34:	mov	r3, #1
   18d38:	strb	r3, [fp, #-33]	; 0xffffffdf
   18d3c:	mov	r3, #2
   18d40:	str	r3, [fp, #4]
   18d44:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18d48:	eor	r3, r3, #1
   18d4c:	uxtb	r3, r3
   18d50:	cmp	r3, #0
   18d54:	beq	18d88 <__assert_fail@plt+0x77ec>
   18d58:	ldr	r2, [fp, #-20]	; 0xffffffec
   18d5c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   18d60:	cmp	r2, r3
   18d64:	bcs	18d7c <__assert_fail@plt+0x77e0>
   18d68:	ldr	r2, [fp, #-88]	; 0xffffffa8
   18d6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18d70:	add	r3, r2, r3
   18d74:	mov	r2, #39	; 0x27
   18d78:	strb	r2, [r3]
   18d7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18d80:	add	r3, r3, #1
   18d84:	str	r3, [fp, #-20]	; 0xffffffec
   18d88:	ldr	r3, [pc, #3532]	; 19b5c <__assert_fail@plt+0x85c0>
   18d8c:	str	r3, [fp, #-28]	; 0xffffffe4
   18d90:	mov	r3, #1
   18d94:	str	r3, [fp, #-32]	; 0xffffffe0
   18d98:	b	18dac <__assert_fail@plt+0x7810>
   18d9c:	mov	r3, #0
   18da0:	strb	r3, [fp, #-34]	; 0xffffffde
   18da4:	b	18dac <__assert_fail@plt+0x7810>
   18da8:	bl	1156c <abort@plt>
   18dac:	mov	r3, #0
   18db0:	str	r3, [fp, #-16]
   18db4:	b	19f44 <__assert_fail@plt+0x89a8>
   18db8:	mov	r3, #0
   18dbc:	strb	r3, [fp, #-40]	; 0xffffffd8
   18dc0:	mov	r3, #0
   18dc4:	strb	r3, [fp, #-41]	; 0xffffffd7
   18dc8:	mov	r3, #0
   18dcc:	strb	r3, [fp, #-42]	; 0xffffffd6
   18dd0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   18dd4:	cmp	r3, #0
   18dd8:	beq	18e74 <__assert_fail@plt+0x78d8>
   18ddc:	ldr	r3, [fp, #4]
   18de0:	cmp	r3, #2
   18de4:	beq	18e74 <__assert_fail@plt+0x78d8>
   18de8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18dec:	cmp	r3, #0
   18df0:	beq	18e74 <__assert_fail@plt+0x78d8>
   18df4:	ldr	r2, [fp, #-16]
   18df8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18dfc:	add	r4, r2, r3
   18e00:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18e04:	cmn	r3, #1
   18e08:	bne	18e2c <__assert_fail@plt+0x7890>
   18e0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18e10:	cmp	r3, #1
   18e14:	bls	18e2c <__assert_fail@plt+0x7890>
   18e18:	ldr	r0, [fp, #-96]	; 0xffffffa0
   18e1c:	bl	113ec <strlen@plt>
   18e20:	str	r0, [fp, #-100]	; 0xffffff9c
   18e24:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18e28:	b	18e30 <__assert_fail@plt+0x7894>
   18e2c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   18e30:	cmp	r4, r3
   18e34:	bhi	18e74 <__assert_fail@plt+0x78d8>
   18e38:	ldr	r2, [fp, #-96]	; 0xffffffa0
   18e3c:	ldr	r3, [fp, #-16]
   18e40:	add	r3, r2, r3
   18e44:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18e48:	ldr	r1, [fp, #-28]	; 0xffffffe4
   18e4c:	mov	r0, r3
   18e50:	bl	11278 <memcmp@plt>
   18e54:	mov	r3, r0
   18e58:	cmp	r3, #0
   18e5c:	bne	18e74 <__assert_fail@plt+0x78d8>
   18e60:	ldrb	r3, [fp, #-34]	; 0xffffffde
   18e64:	cmp	r3, #0
   18e68:	bne	1a100 <__assert_fail@plt+0x8b64>
   18e6c:	mov	r3, #1
   18e70:	strb	r3, [fp, #-40]	; 0xffffffd8
   18e74:	ldr	r2, [fp, #-96]	; 0xffffffa0
   18e78:	ldr	r3, [fp, #-16]
   18e7c:	add	r3, r2, r3
   18e80:	ldrb	r3, [r3]
   18e84:	strb	r3, [fp, #-38]	; 0xffffffda
   18e88:	ldrb	r3, [fp, #-38]	; 0xffffffda
   18e8c:	cmp	r3, #126	; 0x7e
   18e90:	ldrls	pc, [pc, r3, lsl #2]
   18e94:	b	196c0 <__assert_fail@plt+0x8124>
   18e98:	muleq	r1, r4, r0
   18e9c:	andeq	r9, r1, r0, asr #13
   18ea0:	andeq	r9, r1, r0, asr #13
   18ea4:	andeq	r9, r1, r0, asr #13
   18ea8:	andeq	r9, r1, r0, asr #13
   18eac:	andeq	r9, r1, r0, asr #13
   18eb0:	andeq	r9, r1, r0, asr #13
   18eb4:	andeq	r9, r1, r4, lsl #9
   18eb8:	muleq	r1, r0, r4
   18ebc:	andeq	r9, r1, r0, asr #9
   18ec0:	andeq	r9, r1, r8, lsr #9
   18ec4:	andeq	r9, r1, ip, asr #9
   18ec8:	muleq	r1, ip, r4
   18ecc:			; <UNDEFINED> instruction: 0x000194b4
   18ed0:	andeq	r9, r1, r0, asr #13
   18ed4:	andeq	r9, r1, r0, asr #13
   18ed8:	andeq	r9, r1, r0, asr #13
   18edc:	andeq	r9, r1, r0, asr #13
   18ee0:	andeq	r9, r1, r0, asr #13
   18ee4:	andeq	r9, r1, r0, asr #13
   18ee8:	andeq	r9, r1, r0, asr #13
   18eec:	andeq	r9, r1, r0, asr #13
   18ef0:	andeq	r9, r1, r0, asr #13
   18ef4:	andeq	r9, r1, r0, asr #13
   18ef8:	andeq	r9, r1, r0, asr #13
   18efc:	andeq	r9, r1, r0, asr #13
   18f00:	andeq	r9, r1, r0, asr #13
   18f04:	andeq	r9, r1, r0, asr #13
   18f08:	andeq	r9, r1, r0, asr #13
   18f0c:	andeq	r9, r1, r0, asr #13
   18f10:	andeq	r9, r1, r0, asr #13
   18f14:	andeq	r9, r1, r0, asr #13
   18f18:	andeq	r9, r1, r4, lsr #11
   18f1c:	andeq	r9, r1, ip, lsr #11
   18f20:	andeq	r9, r1, ip, lsr #11
   18f24:	muleq	r1, r8, r5
   18f28:	andeq	r9, r1, ip, lsr #11
   18f2c:			; <UNDEFINED> instruction: 0x000196b4
   18f30:	andeq	r9, r1, ip, lsr #11
   18f34:	andeq	r9, r1, r8, asr #11
   18f38:	andeq	r9, r1, ip, lsr #11
   18f3c:	andeq	r9, r1, ip, lsr #11
   18f40:	andeq	r9, r1, ip, lsr #11
   18f44:			; <UNDEFINED> instruction: 0x000196b4
   18f48:			; <UNDEFINED> instruction: 0x000196b4
   18f4c:			; <UNDEFINED> instruction: 0x000196b4
   18f50:			; <UNDEFINED> instruction: 0x000196b4
   18f54:			; <UNDEFINED> instruction: 0x000196b4
   18f58:			; <UNDEFINED> instruction: 0x000196b4
   18f5c:			; <UNDEFINED> instruction: 0x000196b4
   18f60:			; <UNDEFINED> instruction: 0x000196b4
   18f64:			; <UNDEFINED> instruction: 0x000196b4
   18f68:			; <UNDEFINED> instruction: 0x000196b4
   18f6c:			; <UNDEFINED> instruction: 0x000196b4
   18f70:			; <UNDEFINED> instruction: 0x000196b4
   18f74:			; <UNDEFINED> instruction: 0x000196b4
   18f78:			; <UNDEFINED> instruction: 0x000196b4
   18f7c:			; <UNDEFINED> instruction: 0x000196b4
   18f80:			; <UNDEFINED> instruction: 0x000196b4
   18f84:	andeq	r9, r1, ip, lsr #11
   18f88:	andeq	r9, r1, ip, lsr #11
   18f8c:	andeq	r9, r1, ip, lsr #11
   18f90:	andeq	r9, r1, ip, lsr #11
   18f94:	andeq	r9, r1, r4, ror r2
   18f98:	andeq	r9, r1, r0, asr #13
   18f9c:			; <UNDEFINED> instruction: 0x000196b4
   18fa0:			; <UNDEFINED> instruction: 0x000196b4
   18fa4:			; <UNDEFINED> instruction: 0x000196b4
   18fa8:			; <UNDEFINED> instruction: 0x000196b4
   18fac:			; <UNDEFINED> instruction: 0x000196b4
   18fb0:			; <UNDEFINED> instruction: 0x000196b4
   18fb4:			; <UNDEFINED> instruction: 0x000196b4
   18fb8:			; <UNDEFINED> instruction: 0x000196b4
   18fbc:			; <UNDEFINED> instruction: 0x000196b4
   18fc0:			; <UNDEFINED> instruction: 0x000196b4
   18fc4:			; <UNDEFINED> instruction: 0x000196b4
   18fc8:			; <UNDEFINED> instruction: 0x000196b4
   18fcc:			; <UNDEFINED> instruction: 0x000196b4
   18fd0:			; <UNDEFINED> instruction: 0x000196b4
   18fd4:			; <UNDEFINED> instruction: 0x000196b4
   18fd8:			; <UNDEFINED> instruction: 0x000196b4
   18fdc:			; <UNDEFINED> instruction: 0x000196b4
   18fe0:			; <UNDEFINED> instruction: 0x000196b4
   18fe4:			; <UNDEFINED> instruction: 0x000196b4
   18fe8:			; <UNDEFINED> instruction: 0x000196b4
   18fec:			; <UNDEFINED> instruction: 0x000196b4
   18ff0:			; <UNDEFINED> instruction: 0x000196b4
   18ff4:			; <UNDEFINED> instruction: 0x000196b4
   18ff8:			; <UNDEFINED> instruction: 0x000196b4
   18ffc:			; <UNDEFINED> instruction: 0x000196b4
   19000:			; <UNDEFINED> instruction: 0x000196b4
   19004:	andeq	r9, r1, ip, lsr #11
   19008:	ldrdeq	r9, [r1], -r8
   1900c:			; <UNDEFINED> instruction: 0x000196b4
   19010:	andeq	r9, r1, ip, lsr #11
   19014:			; <UNDEFINED> instruction: 0x000196b4
   19018:	andeq	r9, r1, ip, lsr #11
   1901c:			; <UNDEFINED> instruction: 0x000196b4
   19020:			; <UNDEFINED> instruction: 0x000196b4
   19024:			; <UNDEFINED> instruction: 0x000196b4
   19028:			; <UNDEFINED> instruction: 0x000196b4
   1902c:			; <UNDEFINED> instruction: 0x000196b4
   19030:			; <UNDEFINED> instruction: 0x000196b4
   19034:			; <UNDEFINED> instruction: 0x000196b4
   19038:			; <UNDEFINED> instruction: 0x000196b4
   1903c:			; <UNDEFINED> instruction: 0x000196b4
   19040:			; <UNDEFINED> instruction: 0x000196b4
   19044:			; <UNDEFINED> instruction: 0x000196b4
   19048:			; <UNDEFINED> instruction: 0x000196b4
   1904c:			; <UNDEFINED> instruction: 0x000196b4
   19050:			; <UNDEFINED> instruction: 0x000196b4
   19054:			; <UNDEFINED> instruction: 0x000196b4
   19058:			; <UNDEFINED> instruction: 0x000196b4
   1905c:			; <UNDEFINED> instruction: 0x000196b4
   19060:			; <UNDEFINED> instruction: 0x000196b4
   19064:			; <UNDEFINED> instruction: 0x000196b4
   19068:			; <UNDEFINED> instruction: 0x000196b4
   1906c:			; <UNDEFINED> instruction: 0x000196b4
   19070:			; <UNDEFINED> instruction: 0x000196b4
   19074:			; <UNDEFINED> instruction: 0x000196b4
   19078:			; <UNDEFINED> instruction: 0x000196b4
   1907c:			; <UNDEFINED> instruction: 0x000196b4
   19080:			; <UNDEFINED> instruction: 0x000196b4
   19084:	andeq	r9, r1, r0, asr r5
   19088:	andeq	r9, r1, ip, lsr #11
   1908c:	andeq	r9, r1, r0, asr r5
   19090:	muleq	r1, r8, r5
   19094:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19098:	cmp	r3, #0
   1909c:	beq	19260 <__assert_fail@plt+0x7cc4>
   190a0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   190a4:	cmp	r3, #0
   190a8:	bne	1a108 <__assert_fail@plt+0x8b6c>
   190ac:	mov	r3, #1
   190b0:	strb	r3, [fp, #-41]	; 0xffffffd7
   190b4:	ldr	r3, [fp, #4]
   190b8:	cmp	r3, #2
   190bc:	bne	1916c <__assert_fail@plt+0x7bd0>
   190c0:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   190c4:	eor	r3, r3, #1
   190c8:	uxtb	r3, r3
   190cc:	cmp	r3, #0
   190d0:	beq	1916c <__assert_fail@plt+0x7bd0>
   190d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   190d8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   190dc:	cmp	r2, r3
   190e0:	bcs	190f8 <__assert_fail@plt+0x7b5c>
   190e4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   190e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   190ec:	add	r3, r2, r3
   190f0:	mov	r2, #39	; 0x27
   190f4:	strb	r2, [r3]
   190f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   190fc:	add	r3, r3, #1
   19100:	str	r3, [fp, #-20]	; 0xffffffec
   19104:	ldr	r2, [fp, #-20]	; 0xffffffec
   19108:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1910c:	cmp	r2, r3
   19110:	bcs	19128 <__assert_fail@plt+0x7b8c>
   19114:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19118:	ldr	r3, [fp, #-20]	; 0xffffffec
   1911c:	add	r3, r2, r3
   19120:	mov	r2, #36	; 0x24
   19124:	strb	r2, [r3]
   19128:	ldr	r3, [fp, #-20]	; 0xffffffec
   1912c:	add	r3, r3, #1
   19130:	str	r3, [fp, #-20]	; 0xffffffec
   19134:	ldr	r2, [fp, #-20]	; 0xffffffec
   19138:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1913c:	cmp	r2, r3
   19140:	bcs	19158 <__assert_fail@plt+0x7bbc>
   19144:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19148:	ldr	r3, [fp, #-20]	; 0xffffffec
   1914c:	add	r3, r2, r3
   19150:	mov	r2, #39	; 0x27
   19154:	strb	r2, [r3]
   19158:	ldr	r3, [fp, #-20]	; 0xffffffec
   1915c:	add	r3, r3, #1
   19160:	str	r3, [fp, #-20]	; 0xffffffec
   19164:	mov	r3, #1
   19168:	strb	r3, [fp, #-35]	; 0xffffffdd
   1916c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19170:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19174:	cmp	r2, r3
   19178:	bcs	19190 <__assert_fail@plt+0x7bf4>
   1917c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19180:	ldr	r3, [fp, #-20]	; 0xffffffec
   19184:	add	r3, r2, r3
   19188:	mov	r2, #92	; 0x5c
   1918c:	strb	r2, [r3]
   19190:	ldr	r3, [fp, #-20]	; 0xffffffec
   19194:	add	r3, r3, #1
   19198:	str	r3, [fp, #-20]	; 0xffffffec
   1919c:	ldr	r3, [fp, #4]
   191a0:	cmp	r3, #2
   191a4:	beq	19254 <__assert_fail@plt+0x7cb8>
   191a8:	ldr	r3, [fp, #-16]
   191ac:	add	r2, r3, #1
   191b0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   191b4:	cmp	r2, r3
   191b8:	bcs	19254 <__assert_fail@plt+0x7cb8>
   191bc:	ldr	r3, [fp, #-16]
   191c0:	add	r3, r3, #1
   191c4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   191c8:	add	r3, r2, r3
   191cc:	ldrb	r3, [r3]
   191d0:	cmp	r3, #47	; 0x2f
   191d4:	bls	19254 <__assert_fail@plt+0x7cb8>
   191d8:	ldr	r3, [fp, #-16]
   191dc:	add	r3, r3, #1
   191e0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   191e4:	add	r3, r2, r3
   191e8:	ldrb	r3, [r3]
   191ec:	cmp	r3, #57	; 0x39
   191f0:	bhi	19254 <__assert_fail@plt+0x7cb8>
   191f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   191f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   191fc:	cmp	r2, r3
   19200:	bcs	19218 <__assert_fail@plt+0x7c7c>
   19204:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19208:	ldr	r3, [fp, #-20]	; 0xffffffec
   1920c:	add	r3, r2, r3
   19210:	mov	r2, #48	; 0x30
   19214:	strb	r2, [r3]
   19218:	ldr	r3, [fp, #-20]	; 0xffffffec
   1921c:	add	r3, r3, #1
   19220:	str	r3, [fp, #-20]	; 0xffffffec
   19224:	ldr	r2, [fp, #-20]	; 0xffffffec
   19228:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1922c:	cmp	r2, r3
   19230:	bcs	19248 <__assert_fail@plt+0x7cac>
   19234:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19238:	ldr	r3, [fp, #-20]	; 0xffffffec
   1923c:	add	r3, r2, r3
   19240:	mov	r2, #48	; 0x30
   19244:	strb	r2, [r3]
   19248:	ldr	r3, [fp, #-20]	; 0xffffffec
   1924c:	add	r3, r3, #1
   19250:	str	r3, [fp, #-20]	; 0xffffffec
   19254:	mov	r3, #48	; 0x30
   19258:	strb	r3, [fp, #-38]	; 0xffffffda
   1925c:	b	19c9c <__assert_fail@plt+0x8700>
   19260:	ldr	r3, [fp, #8]
   19264:	and	r3, r3, #1
   19268:	cmp	r3, #0
   1926c:	beq	19c9c <__assert_fail@plt+0x8700>
   19270:	b	19f38 <__assert_fail@plt+0x899c>
   19274:	ldr	r3, [fp, #4]
   19278:	cmp	r3, #2
   1927c:	beq	1928c <__assert_fail@plt+0x7cf0>
   19280:	cmp	r3, #5
   19284:	beq	1929c <__assert_fail@plt+0x7d00>
   19288:	b	19480 <__assert_fail@plt+0x7ee4>
   1928c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19290:	cmp	r3, #0
   19294:	beq	19474 <__assert_fail@plt+0x7ed8>
   19298:	b	1a144 <__assert_fail@plt+0x8ba8>
   1929c:	ldr	r3, [fp, #8]
   192a0:	and	r3, r3, #4
   192a4:	cmp	r3, #0
   192a8:	beq	1947c <__assert_fail@plt+0x7ee0>
   192ac:	ldr	r3, [fp, #-16]
   192b0:	add	r2, r3, #2
   192b4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   192b8:	cmp	r2, r3
   192bc:	bcs	1947c <__assert_fail@plt+0x7ee0>
   192c0:	ldr	r3, [fp, #-16]
   192c4:	add	r3, r3, #1
   192c8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   192cc:	add	r3, r2, r3
   192d0:	ldrb	r3, [r3]
   192d4:	cmp	r3, #63	; 0x3f
   192d8:	bne	1947c <__assert_fail@plt+0x7ee0>
   192dc:	ldr	r3, [fp, #-16]
   192e0:	add	r3, r3, #2
   192e4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   192e8:	add	r3, r2, r3
   192ec:	ldrb	r3, [r3]
   192f0:	sub	r3, r3, #33	; 0x21
   192f4:	cmp	r3, #29
   192f8:	ldrls	pc, [pc, r3, lsl #2]
   192fc:	b	1946c <__assert_fail@plt+0x7ed0>
   19300:	andeq	r9, r1, r8, ror r3
   19304:	andeq	r9, r1, ip, ror #8
   19308:	andeq	r9, r1, ip, ror #8
   1930c:	andeq	r9, r1, ip, ror #8
   19310:	andeq	r9, r1, ip, ror #8
   19314:	andeq	r9, r1, ip, ror #8
   19318:	andeq	r9, r1, r8, ror r3
   1931c:	andeq	r9, r1, r8, ror r3
   19320:	andeq	r9, r1, r8, ror r3
   19324:	andeq	r9, r1, ip, ror #8
   19328:	andeq	r9, r1, ip, ror #8
   1932c:	andeq	r9, r1, ip, ror #8
   19330:	andeq	r9, r1, r8, ror r3
   19334:	andeq	r9, r1, ip, ror #8
   19338:	andeq	r9, r1, r8, ror r3
   1933c:	andeq	r9, r1, ip, ror #8
   19340:	andeq	r9, r1, ip, ror #8
   19344:	andeq	r9, r1, ip, ror #8
   19348:	andeq	r9, r1, ip, ror #8
   1934c:	andeq	r9, r1, ip, ror #8
   19350:	andeq	r9, r1, ip, ror #8
   19354:	andeq	r9, r1, ip, ror #8
   19358:	andeq	r9, r1, ip, ror #8
   1935c:	andeq	r9, r1, ip, ror #8
   19360:	andeq	r9, r1, ip, ror #8
   19364:	andeq	r9, r1, ip, ror #8
   19368:	andeq	r9, r1, ip, ror #8
   1936c:	andeq	r9, r1, r8, ror r3
   19370:	andeq	r9, r1, r8, ror r3
   19374:	andeq	r9, r1, r8, ror r3
   19378:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1937c:	cmp	r3, #0
   19380:	bne	1a110 <__assert_fail@plt+0x8b74>
   19384:	ldr	r3, [fp, #-16]
   19388:	add	r3, r3, #2
   1938c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19390:	add	r3, r2, r3
   19394:	ldrb	r3, [r3]
   19398:	strb	r3, [fp, #-38]	; 0xffffffda
   1939c:	ldr	r3, [fp, #-16]
   193a0:	add	r3, r3, #2
   193a4:	str	r3, [fp, #-16]
   193a8:	ldr	r2, [fp, #-20]	; 0xffffffec
   193ac:	ldr	r3, [fp, #-92]	; 0xffffffa4
   193b0:	cmp	r2, r3
   193b4:	bcs	193cc <__assert_fail@plt+0x7e30>
   193b8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   193bc:	ldr	r3, [fp, #-20]	; 0xffffffec
   193c0:	add	r3, r2, r3
   193c4:	mov	r2, #63	; 0x3f
   193c8:	strb	r2, [r3]
   193cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   193d0:	add	r3, r3, #1
   193d4:	str	r3, [fp, #-20]	; 0xffffffec
   193d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   193dc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   193e0:	cmp	r2, r3
   193e4:	bcs	193fc <__assert_fail@plt+0x7e60>
   193e8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   193ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   193f0:	add	r3, r2, r3
   193f4:	mov	r2, #34	; 0x22
   193f8:	strb	r2, [r3]
   193fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   19400:	add	r3, r3, #1
   19404:	str	r3, [fp, #-20]	; 0xffffffec
   19408:	ldr	r2, [fp, #-20]	; 0xffffffec
   1940c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19410:	cmp	r2, r3
   19414:	bcs	1942c <__assert_fail@plt+0x7e90>
   19418:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1941c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19420:	add	r3, r2, r3
   19424:	mov	r2, #34	; 0x22
   19428:	strb	r2, [r3]
   1942c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19430:	add	r3, r3, #1
   19434:	str	r3, [fp, #-20]	; 0xffffffec
   19438:	ldr	r2, [fp, #-20]	; 0xffffffec
   1943c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19440:	cmp	r2, r3
   19444:	bcs	1945c <__assert_fail@plt+0x7ec0>
   19448:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1944c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19450:	add	r3, r2, r3
   19454:	mov	r2, #63	; 0x3f
   19458:	strb	r2, [r3]
   1945c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19460:	add	r3, r3, #1
   19464:	str	r3, [fp, #-20]	; 0xffffffec
   19468:	b	19470 <__assert_fail@plt+0x7ed4>
   1946c:	nop			; (mov r0, r0)
   19470:	b	1947c <__assert_fail@plt+0x7ee0>
   19474:	nop			; (mov r0, r0)
   19478:	b	19cc8 <__assert_fail@plt+0x872c>
   1947c:	nop			; (mov r0, r0)
   19480:	b	19cc8 <__assert_fail@plt+0x872c>
   19484:	mov	r3, #97	; 0x61
   19488:	strb	r3, [fp, #-39]	; 0xffffffd9
   1948c:	b	19538 <__assert_fail@plt+0x7f9c>
   19490:	mov	r3, #98	; 0x62
   19494:	strb	r3, [fp, #-39]	; 0xffffffd9
   19498:	b	19538 <__assert_fail@plt+0x7f9c>
   1949c:	mov	r3, #102	; 0x66
   194a0:	strb	r3, [fp, #-39]	; 0xffffffd9
   194a4:	b	19538 <__assert_fail@plt+0x7f9c>
   194a8:	mov	r3, #110	; 0x6e
   194ac:	strb	r3, [fp, #-39]	; 0xffffffd9
   194b0:	b	19520 <__assert_fail@plt+0x7f84>
   194b4:	mov	r3, #114	; 0x72
   194b8:	strb	r3, [fp, #-39]	; 0xffffffd9
   194bc:	b	19520 <__assert_fail@plt+0x7f84>
   194c0:	mov	r3, #116	; 0x74
   194c4:	strb	r3, [fp, #-39]	; 0xffffffd9
   194c8:	b	19520 <__assert_fail@plt+0x7f84>
   194cc:	mov	r3, #118	; 0x76
   194d0:	strb	r3, [fp, #-39]	; 0xffffffd9
   194d4:	b	19538 <__assert_fail@plt+0x7f9c>
   194d8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   194dc:	strb	r3, [fp, #-39]	; 0xffffffd9
   194e0:	ldr	r3, [fp, #4]
   194e4:	cmp	r3, #2
   194e8:	bne	194fc <__assert_fail@plt+0x7f60>
   194ec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   194f0:	cmp	r3, #0
   194f4:	beq	19e50 <__assert_fail@plt+0x88b4>
   194f8:	b	1a144 <__assert_fail@plt+0x8ba8>
   194fc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19500:	cmp	r3, #0
   19504:	beq	19520 <__assert_fail@plt+0x7f84>
   19508:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1950c:	cmp	r3, #0
   19510:	beq	19520 <__assert_fail@plt+0x7f84>
   19514:	ldr	r3, [fp, #-32]	; 0xffffffe0
   19518:	cmp	r3, #0
   1951c:	bne	19e58 <__assert_fail@plt+0x88bc>
   19520:	ldr	r3, [fp, #4]
   19524:	cmp	r3, #2
   19528:	bne	19538 <__assert_fail@plt+0x7f9c>
   1952c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19530:	cmp	r3, #0
   19534:	bne	1a118 <__assert_fail@plt+0x8b7c>
   19538:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1953c:	cmp	r3, #0
   19540:	beq	19ca4 <__assert_fail@plt+0x8708>
   19544:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   19548:	strb	r3, [fp, #-38]	; 0xffffffda
   1954c:	b	19d50 <__assert_fail@plt+0x87b4>
   19550:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19554:	cmn	r3, #1
   19558:	bne	1957c <__assert_fail@plt+0x7fe0>
   1955c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   19560:	add	r3, r3, #1
   19564:	ldrb	r3, [r3]
   19568:	cmp	r3, #0
   1956c:	movne	r3, #1
   19570:	moveq	r3, #0
   19574:	uxtb	r3, r3
   19578:	b	19590 <__assert_fail@plt+0x7ff4>
   1957c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19580:	cmp	r3, #1
   19584:	movne	r3, #1
   19588:	moveq	r3, #0
   1958c:	uxtb	r3, r3
   19590:	cmp	r3, #0
   19594:	bne	19cac <__assert_fail@plt+0x8710>
   19598:	ldr	r3, [fp, #-16]
   1959c:	cmp	r3, #0
   195a0:	bne	19cb4 <__assert_fail@plt+0x8718>
   195a4:	mov	r3, #1
   195a8:	strb	r3, [fp, #-42]	; 0xffffffd6
   195ac:	ldr	r3, [fp, #4]
   195b0:	cmp	r3, #2
   195b4:	bne	19cbc <__assert_fail@plt+0x8720>
   195b8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   195bc:	cmp	r3, #0
   195c0:	beq	19cbc <__assert_fail@plt+0x8720>
   195c4:	b	1a144 <__assert_fail@plt+0x8ba8>
   195c8:	mov	r3, #1
   195cc:	strb	r3, [fp, #-36]	; 0xffffffdc
   195d0:	mov	r3, #1
   195d4:	strb	r3, [fp, #-42]	; 0xffffffd6
   195d8:	ldr	r3, [fp, #4]
   195dc:	cmp	r3, #2
   195e0:	bne	19cc4 <__assert_fail@plt+0x8728>
   195e4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   195e8:	cmp	r3, #0
   195ec:	bne	1a120 <__assert_fail@plt+0x8b84>
   195f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   195f4:	cmp	r3, #0
   195f8:	beq	19618 <__assert_fail@plt+0x807c>
   195fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19600:	cmp	r3, #0
   19604:	bne	19618 <__assert_fail@plt+0x807c>
   19608:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1960c:	str	r3, [fp, #-24]	; 0xffffffe8
   19610:	mov	r3, #0
   19614:	str	r3, [fp, #-92]	; 0xffffffa4
   19618:	ldr	r2, [fp, #-20]	; 0xffffffec
   1961c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19620:	cmp	r2, r3
   19624:	bcs	1963c <__assert_fail@plt+0x80a0>
   19628:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1962c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19630:	add	r3, r2, r3
   19634:	mov	r2, #39	; 0x27
   19638:	strb	r2, [r3]
   1963c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19640:	add	r3, r3, #1
   19644:	str	r3, [fp, #-20]	; 0xffffffec
   19648:	ldr	r2, [fp, #-20]	; 0xffffffec
   1964c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19650:	cmp	r2, r3
   19654:	bcs	1966c <__assert_fail@plt+0x80d0>
   19658:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1965c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19660:	add	r3, r2, r3
   19664:	mov	r2, #92	; 0x5c
   19668:	strb	r2, [r3]
   1966c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19670:	add	r3, r3, #1
   19674:	str	r3, [fp, #-20]	; 0xffffffec
   19678:	ldr	r2, [fp, #-20]	; 0xffffffec
   1967c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19680:	cmp	r2, r3
   19684:	bcs	1969c <__assert_fail@plt+0x8100>
   19688:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1968c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19690:	add	r3, r2, r3
   19694:	mov	r2, #39	; 0x27
   19698:	strb	r2, [r3]
   1969c:	ldr	r3, [fp, #-20]	; 0xffffffec
   196a0:	add	r3, r3, #1
   196a4:	str	r3, [fp, #-20]	; 0xffffffec
   196a8:	mov	r3, #0
   196ac:	strb	r3, [fp, #-35]	; 0xffffffdd
   196b0:	b	19cc4 <__assert_fail@plt+0x8728>
   196b4:	mov	r3, #1
   196b8:	strb	r3, [fp, #-42]	; 0xffffffd6
   196bc:	b	19cc8 <__assert_fail@plt+0x872c>
   196c0:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   196c4:	cmp	r3, #0
   196c8:	beq	19708 <__assert_fail@plt+0x816c>
   196cc:	mov	r3, #1
   196d0:	str	r3, [fp, #-48]	; 0xffffffd0
   196d4:	bl	113b0 <__ctype_b_loc@plt>
   196d8:	mov	r3, r0
   196dc:	ldr	r2, [r3]
   196e0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   196e4:	lsl	r3, r3, #1
   196e8:	add	r3, r2, r3
   196ec:	ldrh	r3, [r3]
   196f0:	and	r3, r3, #16384	; 0x4000
   196f4:	cmp	r3, #0
   196f8:	movne	r3, #1
   196fc:	moveq	r3, #0
   19700:	strb	r3, [fp, #-49]	; 0xffffffcf
   19704:	b	19954 <__assert_fail@plt+0x83b8>
   19708:	sub	r3, fp, #76	; 0x4c
   1970c:	mov	r2, #8
   19710:	mov	r1, #0
   19714:	mov	r0, r3
   19718:	bl	11440 <memset@plt>
   1971c:	mov	r3, #0
   19720:	str	r3, [fp, #-48]	; 0xffffffd0
   19724:	mov	r3, #1
   19728:	strb	r3, [fp, #-49]	; 0xffffffcf
   1972c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19730:	cmn	r3, #1
   19734:	bne	19744 <__assert_fail@plt+0x81a8>
   19738:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1973c:	bl	113ec <strlen@plt>
   19740:	str	r0, [fp, #-100]	; 0xffffff9c
   19744:	ldr	r2, [fp, #-16]
   19748:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1974c:	add	r3, r2, r3
   19750:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19754:	add	r1, r2, r3
   19758:	ldr	r2, [fp, #-16]
   1975c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19760:	add	r3, r2, r3
   19764:	ldr	r2, [fp, #-100]	; 0xffffff9c
   19768:	sub	r2, r2, r3
   1976c:	sub	r3, fp, #76	; 0x4c
   19770:	sub	r0, fp, #80	; 0x50
   19774:	bl	1d1ac <__assert_fail@plt+0xbc10>
   19778:	str	r0, [fp, #-64]	; 0xffffffc0
   1977c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19780:	cmp	r3, #0
   19784:	beq	19948 <__assert_fail@plt+0x83ac>
   19788:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1978c:	cmn	r3, #1
   19790:	bne	197a0 <__assert_fail@plt+0x8204>
   19794:	mov	r3, #0
   19798:	strb	r3, [fp, #-49]	; 0xffffffcf
   1979c:	b	19954 <__assert_fail@plt+0x83b8>
   197a0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   197a4:	cmn	r3, #2
   197a8:	bne	19800 <__assert_fail@plt+0x8264>
   197ac:	mov	r3, #0
   197b0:	strb	r3, [fp, #-49]	; 0xffffffcf
   197b4:	b	197c4 <__assert_fail@plt+0x8228>
   197b8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   197bc:	add	r3, r3, #1
   197c0:	str	r3, [fp, #-48]	; 0xffffffd0
   197c4:	ldr	r2, [fp, #-16]
   197c8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   197cc:	add	r2, r2, r3
   197d0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   197d4:	cmp	r2, r3
   197d8:	bcs	19950 <__assert_fail@plt+0x83b4>
   197dc:	ldr	r2, [fp, #-16]
   197e0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   197e4:	add	r3, r2, r3
   197e8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   197ec:	add	r3, r2, r3
   197f0:	ldrb	r3, [r3]
   197f4:	cmp	r3, #0
   197f8:	bne	197b8 <__assert_fail@plt+0x821c>
   197fc:	b	19950 <__assert_fail@plt+0x83b4>
   19800:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19804:	cmp	r3, #0
   19808:	beq	198fc <__assert_fail@plt+0x8360>
   1980c:	ldr	r3, [fp, #4]
   19810:	cmp	r3, #2
   19814:	bne	198fc <__assert_fail@plt+0x8360>
   19818:	mov	r3, #1
   1981c:	str	r3, [fp, #-56]	; 0xffffffc8
   19820:	b	198ec <__assert_fail@plt+0x8350>
   19824:	ldr	r2, [fp, #-16]
   19828:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1982c:	add	r2, r2, r3
   19830:	ldr	r3, [fp, #-56]	; 0xffffffc8
   19834:	add	r3, r2, r3
   19838:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1983c:	add	r3, r2, r3
   19840:	ldrb	r3, [r3]
   19844:	sub	r3, r3, #91	; 0x5b
   19848:	cmp	r3, #33	; 0x21
   1984c:	ldrls	pc, [pc, r3, lsl #2]
   19850:	b	198dc <__assert_fail@plt+0x8340>
   19854:	andeq	sl, r1, r8, lsr #2
   19858:	andeq	sl, r1, r8, lsr #2
   1985c:	ldrdeq	r9, [r1], -ip
   19860:	andeq	sl, r1, r8, lsr #2
   19864:	ldrdeq	r9, [r1], -ip
   19868:	andeq	sl, r1, r8, lsr #2
   1986c:	ldrdeq	r9, [r1], -ip
   19870:	ldrdeq	r9, [r1], -ip
   19874:	ldrdeq	r9, [r1], -ip
   19878:	ldrdeq	r9, [r1], -ip
   1987c:	ldrdeq	r9, [r1], -ip
   19880:	ldrdeq	r9, [r1], -ip
   19884:	ldrdeq	r9, [r1], -ip
   19888:	ldrdeq	r9, [r1], -ip
   1988c:	ldrdeq	r9, [r1], -ip
   19890:	ldrdeq	r9, [r1], -ip
   19894:	ldrdeq	r9, [r1], -ip
   19898:	ldrdeq	r9, [r1], -ip
   1989c:	ldrdeq	r9, [r1], -ip
   198a0:	ldrdeq	r9, [r1], -ip
   198a4:	ldrdeq	r9, [r1], -ip
   198a8:	ldrdeq	r9, [r1], -ip
   198ac:	ldrdeq	r9, [r1], -ip
   198b0:	ldrdeq	r9, [r1], -ip
   198b4:	ldrdeq	r9, [r1], -ip
   198b8:	ldrdeq	r9, [r1], -ip
   198bc:	ldrdeq	r9, [r1], -ip
   198c0:	ldrdeq	r9, [r1], -ip
   198c4:	ldrdeq	r9, [r1], -ip
   198c8:	ldrdeq	r9, [r1], -ip
   198cc:	ldrdeq	r9, [r1], -ip
   198d0:	ldrdeq	r9, [r1], -ip
   198d4:	ldrdeq	r9, [r1], -ip
   198d8:	andeq	sl, r1, r8, lsr #2
   198dc:	nop			; (mov r0, r0)
   198e0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   198e4:	add	r3, r3, #1
   198e8:	str	r3, [fp, #-56]	; 0xffffffc8
   198ec:	ldr	r2, [fp, #-56]	; 0xffffffc8
   198f0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   198f4:	cmp	r2, r3
   198f8:	bcc	19824 <__assert_fail@plt+0x8288>
   198fc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   19900:	mov	r0, r3
   19904:	bl	112cc <iswprint@plt>
   19908:	mov	r3, r0
   1990c:	cmp	r3, #0
   19910:	bne	1991c <__assert_fail@plt+0x8380>
   19914:	mov	r3, #0
   19918:	strb	r3, [fp, #-49]	; 0xffffffcf
   1991c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   19920:	ldr	r3, [fp, #-64]	; 0xffffffc0
   19924:	add	r3, r2, r3
   19928:	str	r3, [fp, #-48]	; 0xffffffd0
   1992c:	sub	r3, fp, #76	; 0x4c
   19930:	mov	r0, r3
   19934:	bl	11260 <mbsinit@plt>
   19938:	mov	r3, r0
   1993c:	cmp	r3, #0
   19940:	beq	19744 <__assert_fail@plt+0x81a8>
   19944:	b	19954 <__assert_fail@plt+0x83b8>
   19948:	nop			; (mov r0, r0)
   1994c:	b	19954 <__assert_fail@plt+0x83b8>
   19950:	nop			; (mov r0, r0)
   19954:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   19958:	strb	r3, [fp, #-42]	; 0xffffffd6
   1995c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19960:	cmp	r3, #1
   19964:	bhi	19988 <__assert_fail@plt+0x83ec>
   19968:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1996c:	cmp	r3, #0
   19970:	beq	19cc8 <__assert_fail@plt+0x872c>
   19974:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   19978:	eor	r3, r3, #1
   1997c:	uxtb	r3, r3
   19980:	cmp	r3, #0
   19984:	beq	19cc8 <__assert_fail@plt+0x872c>
   19988:	ldr	r2, [fp, #-16]
   1998c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   19990:	add	r3, r2, r3
   19994:	str	r3, [fp, #-68]	; 0xffffffbc
   19998:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1999c:	cmp	r3, #0
   199a0:	beq	19b60 <__assert_fail@plt+0x85c4>
   199a4:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   199a8:	eor	r3, r3, #1
   199ac:	uxtb	r3, r3
   199b0:	cmp	r3, #0
   199b4:	beq	19b60 <__assert_fail@plt+0x85c4>
   199b8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   199bc:	cmp	r3, #0
   199c0:	bne	1a130 <__assert_fail@plt+0x8b94>
   199c4:	mov	r3, #1
   199c8:	strb	r3, [fp, #-41]	; 0xffffffd7
   199cc:	ldr	r3, [fp, #4]
   199d0:	cmp	r3, #2
   199d4:	bne	19a84 <__assert_fail@plt+0x84e8>
   199d8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   199dc:	eor	r3, r3, #1
   199e0:	uxtb	r3, r3
   199e4:	cmp	r3, #0
   199e8:	beq	19a84 <__assert_fail@plt+0x84e8>
   199ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   199f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   199f4:	cmp	r2, r3
   199f8:	bcs	19a10 <__assert_fail@plt+0x8474>
   199fc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19a00:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a04:	add	r3, r2, r3
   19a08:	mov	r2, #39	; 0x27
   19a0c:	strb	r2, [r3]
   19a10:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a14:	add	r3, r3, #1
   19a18:	str	r3, [fp, #-20]	; 0xffffffec
   19a1c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19a20:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19a24:	cmp	r2, r3
   19a28:	bcs	19a40 <__assert_fail@plt+0x84a4>
   19a2c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19a30:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a34:	add	r3, r2, r3
   19a38:	mov	r2, #36	; 0x24
   19a3c:	strb	r2, [r3]
   19a40:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a44:	add	r3, r3, #1
   19a48:	str	r3, [fp, #-20]	; 0xffffffec
   19a4c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19a50:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19a54:	cmp	r2, r3
   19a58:	bcs	19a70 <__assert_fail@plt+0x84d4>
   19a5c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19a60:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a64:	add	r3, r2, r3
   19a68:	mov	r2, #39	; 0x27
   19a6c:	strb	r2, [r3]
   19a70:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a74:	add	r3, r3, #1
   19a78:	str	r3, [fp, #-20]	; 0xffffffec
   19a7c:	mov	r3, #1
   19a80:	strb	r3, [fp, #-35]	; 0xffffffdd
   19a84:	ldr	r2, [fp, #-20]	; 0xffffffec
   19a88:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19a8c:	cmp	r2, r3
   19a90:	bcs	19aa8 <__assert_fail@plt+0x850c>
   19a94:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19a98:	ldr	r3, [fp, #-20]	; 0xffffffec
   19a9c:	add	r3, r2, r3
   19aa0:	mov	r2, #92	; 0x5c
   19aa4:	strb	r2, [r3]
   19aa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19aac:	add	r3, r3, #1
   19ab0:	str	r3, [fp, #-20]	; 0xffffffec
   19ab4:	ldr	r2, [fp, #-20]	; 0xffffffec
   19ab8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19abc:	cmp	r2, r3
   19ac0:	bcs	19ae8 <__assert_fail@plt+0x854c>
   19ac4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19ac8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19acc:	add	r3, r2, r3
   19ad0:	ldrb	r2, [fp, #-38]	; 0xffffffda
   19ad4:	lsr	r2, r2, #6
   19ad8:	uxtb	r2, r2
   19adc:	add	r2, r2, #48	; 0x30
   19ae0:	uxtb	r2, r2
   19ae4:	strb	r2, [r3]
   19ae8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19aec:	add	r3, r3, #1
   19af0:	str	r3, [fp, #-20]	; 0xffffffec
   19af4:	ldr	r2, [fp, #-20]	; 0xffffffec
   19af8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19afc:	cmp	r2, r3
   19b00:	bcs	19b30 <__assert_fail@plt+0x8594>
   19b04:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19b08:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b0c:	add	r3, r2, r3
   19b10:	ldrb	r2, [fp, #-38]	; 0xffffffda
   19b14:	lsr	r2, r2, #3
   19b18:	uxtb	r2, r2
   19b1c:	and	r2, r2, #7
   19b20:	uxtb	r2, r2
   19b24:	add	r2, r2, #48	; 0x30
   19b28:	uxtb	r2, r2
   19b2c:	strb	r2, [r3]
   19b30:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b34:	add	r3, r3, #1
   19b38:	str	r3, [fp, #-20]	; 0xffffffec
   19b3c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19b40:	and	r3, r3, #7
   19b44:	uxtb	r3, r3
   19b48:	add	r3, r3, #48	; 0x30
   19b4c:	strb	r3, [fp, #-38]	; 0xffffffda
   19b50:	b	19ba4 <__assert_fail@plt+0x8608>
   19b54:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   19b58:	ldrdeq	r0, [r2], -r8
   19b5c:	ldrdeq	r0, [r2], -r4
   19b60:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   19b64:	cmp	r3, #0
   19b68:	beq	19ba4 <__assert_fail@plt+0x8608>
   19b6c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19b70:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19b74:	cmp	r2, r3
   19b78:	bcs	19b90 <__assert_fail@plt+0x85f4>
   19b7c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19b80:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b84:	add	r3, r2, r3
   19b88:	mov	r2, #92	; 0x5c
   19b8c:	strb	r2, [r3]
   19b90:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b94:	add	r3, r3, #1
   19b98:	str	r3, [fp, #-20]	; 0xffffffec
   19b9c:	mov	r3, #0
   19ba0:	strb	r3, [fp, #-40]	; 0xffffffd8
   19ba4:	ldr	r3, [fp, #-16]
   19ba8:	add	r2, r3, #1
   19bac:	ldr	r3, [fp, #-68]	; 0xffffffbc
   19bb0:	cmp	r2, r3
   19bb4:	bcs	19c94 <__assert_fail@plt+0x86f8>
   19bb8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   19bbc:	cmp	r3, #0
   19bc0:	beq	19c40 <__assert_fail@plt+0x86a4>
   19bc4:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   19bc8:	eor	r3, r3, #1
   19bcc:	uxtb	r3, r3
   19bd0:	cmp	r3, #0
   19bd4:	beq	19c40 <__assert_fail@plt+0x86a4>
   19bd8:	ldr	r2, [fp, #-20]	; 0xffffffec
   19bdc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19be0:	cmp	r2, r3
   19be4:	bcs	19bfc <__assert_fail@plt+0x8660>
   19be8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19bec:	ldr	r3, [fp, #-20]	; 0xffffffec
   19bf0:	add	r3, r2, r3
   19bf4:	mov	r2, #39	; 0x27
   19bf8:	strb	r2, [r3]
   19bfc:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c00:	add	r3, r3, #1
   19c04:	str	r3, [fp, #-20]	; 0xffffffec
   19c08:	ldr	r2, [fp, #-20]	; 0xffffffec
   19c0c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19c10:	cmp	r2, r3
   19c14:	bcs	19c2c <__assert_fail@plt+0x8690>
   19c18:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19c1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c20:	add	r3, r2, r3
   19c24:	mov	r2, #39	; 0x27
   19c28:	strb	r2, [r3]
   19c2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c30:	add	r3, r3, #1
   19c34:	str	r3, [fp, #-20]	; 0xffffffec
   19c38:	mov	r3, #0
   19c3c:	strb	r3, [fp, #-35]	; 0xffffffdd
   19c40:	ldr	r2, [fp, #-20]	; 0xffffffec
   19c44:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19c48:	cmp	r2, r3
   19c4c:	bcs	19c64 <__assert_fail@plt+0x86c8>
   19c50:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19c54:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c58:	add	r3, r2, r3
   19c5c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   19c60:	strb	r2, [r3]
   19c64:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c68:	add	r3, r3, #1
   19c6c:	str	r3, [fp, #-20]	; 0xffffffec
   19c70:	ldr	r3, [fp, #-16]
   19c74:	add	r3, r3, #1
   19c78:	str	r3, [fp, #-16]
   19c7c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19c80:	ldr	r3, [fp, #-16]
   19c84:	add	r3, r2, r3
   19c88:	ldrb	r3, [r3]
   19c8c:	strb	r3, [fp, #-38]	; 0xffffffda
   19c90:	b	19998 <__assert_fail@plt+0x83fc>
   19c94:	nop			; (mov r0, r0)
   19c98:	b	19e64 <__assert_fail@plt+0x88c8>
   19c9c:	nop			; (mov r0, r0)
   19ca0:	b	19cc8 <__assert_fail@plt+0x872c>
   19ca4:	nop			; (mov r0, r0)
   19ca8:	b	19cc8 <__assert_fail@plt+0x872c>
   19cac:	nop			; (mov r0, r0)
   19cb0:	b	19cc8 <__assert_fail@plt+0x872c>
   19cb4:	nop			; (mov r0, r0)
   19cb8:	b	19cc8 <__assert_fail@plt+0x872c>
   19cbc:	nop			; (mov r0, r0)
   19cc0:	b	19cc8 <__assert_fail@plt+0x872c>
   19cc4:	nop			; (mov r0, r0)
   19cc8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   19ccc:	eor	r3, r3, #1
   19cd0:	uxtb	r3, r3
   19cd4:	cmp	r3, #0
   19cd8:	bne	19ce8 <__assert_fail@plt+0x874c>
   19cdc:	ldr	r3, [fp, #4]
   19ce0:	cmp	r3, #2
   19ce4:	bne	19cfc <__assert_fail@plt+0x8760>
   19ce8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19cec:	eor	r3, r3, #1
   19cf0:	uxtb	r3, r3
   19cf4:	cmp	r3, #0
   19cf8:	bne	19d3c <__assert_fail@plt+0x87a0>
   19cfc:	ldr	r3, [fp, #12]
   19d00:	cmp	r3, #0
   19d04:	beq	19d3c <__assert_fail@plt+0x87a0>
   19d08:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19d0c:	lsr	r3, r3, #5
   19d10:	uxtb	r3, r3
   19d14:	lsl	r3, r3, #2
   19d18:	ldr	r2, [fp, #12]
   19d1c:	add	r3, r2, r3
   19d20:	ldr	r2, [r3]
   19d24:	ldrb	r3, [fp, #-38]	; 0xffffffda
   19d28:	and	r3, r3, #31
   19d2c:	lsr	r3, r2, r3
   19d30:	and	r3, r3, #1
   19d34:	cmp	r3, #0
   19d38:	bne	19d50 <__assert_fail@plt+0x87b4>
   19d3c:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   19d40:	eor	r3, r3, #1
   19d44:	uxtb	r3, r3
   19d48:	cmp	r3, #0
   19d4c:	bne	19e60 <__assert_fail@plt+0x88c4>
   19d50:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19d54:	cmp	r3, #0
   19d58:	bne	1a138 <__assert_fail@plt+0x8b9c>
   19d5c:	mov	r3, #1
   19d60:	strb	r3, [fp, #-41]	; 0xffffffd7
   19d64:	ldr	r3, [fp, #4]
   19d68:	cmp	r3, #2
   19d6c:	bne	19e1c <__assert_fail@plt+0x8880>
   19d70:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   19d74:	eor	r3, r3, #1
   19d78:	uxtb	r3, r3
   19d7c:	cmp	r3, #0
   19d80:	beq	19e1c <__assert_fail@plt+0x8880>
   19d84:	ldr	r2, [fp, #-20]	; 0xffffffec
   19d88:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19d8c:	cmp	r2, r3
   19d90:	bcs	19da8 <__assert_fail@plt+0x880c>
   19d94:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19d98:	ldr	r3, [fp, #-20]	; 0xffffffec
   19d9c:	add	r3, r2, r3
   19da0:	mov	r2, #39	; 0x27
   19da4:	strb	r2, [r3]
   19da8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19dac:	add	r3, r3, #1
   19db0:	str	r3, [fp, #-20]	; 0xffffffec
   19db4:	ldr	r2, [fp, #-20]	; 0xffffffec
   19db8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19dbc:	cmp	r2, r3
   19dc0:	bcs	19dd8 <__assert_fail@plt+0x883c>
   19dc4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19dc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19dcc:	add	r3, r2, r3
   19dd0:	mov	r2, #36	; 0x24
   19dd4:	strb	r2, [r3]
   19dd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ddc:	add	r3, r3, #1
   19de0:	str	r3, [fp, #-20]	; 0xffffffec
   19de4:	ldr	r2, [fp, #-20]	; 0xffffffec
   19de8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19dec:	cmp	r2, r3
   19df0:	bcs	19e08 <__assert_fail@plt+0x886c>
   19df4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19df8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19dfc:	add	r3, r2, r3
   19e00:	mov	r2, #39	; 0x27
   19e04:	strb	r2, [r3]
   19e08:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e0c:	add	r3, r3, #1
   19e10:	str	r3, [fp, #-20]	; 0xffffffec
   19e14:	mov	r3, #1
   19e18:	strb	r3, [fp, #-35]	; 0xffffffdd
   19e1c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19e20:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19e24:	cmp	r2, r3
   19e28:	bcs	19e40 <__assert_fail@plt+0x88a4>
   19e2c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19e30:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e34:	add	r3, r2, r3
   19e38:	mov	r2, #92	; 0x5c
   19e3c:	strb	r2, [r3]
   19e40:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e44:	add	r3, r3, #1
   19e48:	str	r3, [fp, #-20]	; 0xffffffec
   19e4c:	b	19e64 <__assert_fail@plt+0x88c8>
   19e50:	nop			; (mov r0, r0)
   19e54:	b	19e64 <__assert_fail@plt+0x88c8>
   19e58:	nop			; (mov r0, r0)
   19e5c:	b	19e64 <__assert_fail@plt+0x88c8>
   19e60:	nop			; (mov r0, r0)
   19e64:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   19e68:	cmp	r3, #0
   19e6c:	beq	19eec <__assert_fail@plt+0x8950>
   19e70:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   19e74:	eor	r3, r3, #1
   19e78:	uxtb	r3, r3
   19e7c:	cmp	r3, #0
   19e80:	beq	19eec <__assert_fail@plt+0x8950>
   19e84:	ldr	r2, [fp, #-20]	; 0xffffffec
   19e88:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19e8c:	cmp	r2, r3
   19e90:	bcs	19ea8 <__assert_fail@plt+0x890c>
   19e94:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19e98:	ldr	r3, [fp, #-20]	; 0xffffffec
   19e9c:	add	r3, r2, r3
   19ea0:	mov	r2, #39	; 0x27
   19ea4:	strb	r2, [r3]
   19ea8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19eac:	add	r3, r3, #1
   19eb0:	str	r3, [fp, #-20]	; 0xffffffec
   19eb4:	ldr	r2, [fp, #-20]	; 0xffffffec
   19eb8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19ebc:	cmp	r2, r3
   19ec0:	bcs	19ed8 <__assert_fail@plt+0x893c>
   19ec4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19ec8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19ecc:	add	r3, r2, r3
   19ed0:	mov	r2, #39	; 0x27
   19ed4:	strb	r2, [r3]
   19ed8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19edc:	add	r3, r3, #1
   19ee0:	str	r3, [fp, #-20]	; 0xffffffec
   19ee4:	mov	r3, #0
   19ee8:	strb	r3, [fp, #-35]	; 0xffffffdd
   19eec:	ldr	r2, [fp, #-20]	; 0xffffffec
   19ef0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   19ef4:	cmp	r2, r3
   19ef8:	bcs	19f10 <__assert_fail@plt+0x8974>
   19efc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   19f00:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f04:	add	r3, r2, r3
   19f08:	ldrb	r2, [fp, #-38]	; 0xffffffda
   19f0c:	strb	r2, [r3]
   19f10:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f14:	add	r3, r3, #1
   19f18:	str	r3, [fp, #-20]	; 0xffffffec
   19f1c:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   19f20:	eor	r3, r3, #1
   19f24:	uxtb	r3, r3
   19f28:	cmp	r3, #0
   19f2c:	beq	19f38 <__assert_fail@plt+0x899c>
   19f30:	mov	r3, #0
   19f34:	strb	r3, [fp, #-37]	; 0xffffffdb
   19f38:	ldr	r3, [fp, #-16]
   19f3c:	add	r3, r3, #1
   19f40:	str	r3, [fp, #-16]
   19f44:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19f48:	cmn	r3, #1
   19f4c:	bne	19f74 <__assert_fail@plt+0x89d8>
   19f50:	ldr	r2, [fp, #-96]	; 0xffffffa0
   19f54:	ldr	r3, [fp, #-16]
   19f58:	add	r3, r2, r3
   19f5c:	ldrb	r3, [r3]
   19f60:	cmp	r3, #0
   19f64:	movne	r3, #1
   19f68:	moveq	r3, #0
   19f6c:	uxtb	r3, r3
   19f70:	b	19f8c <__assert_fail@plt+0x89f0>
   19f74:	ldr	r2, [fp, #-16]
   19f78:	ldr	r3, [fp, #-100]	; 0xffffff9c
   19f7c:	cmp	r2, r3
   19f80:	movne	r3, #1
   19f84:	moveq	r3, #0
   19f88:	uxtb	r3, r3
   19f8c:	cmp	r3, #0
   19f90:	bne	18db8 <__assert_fail@plt+0x781c>
   19f94:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f98:	cmp	r3, #0
   19f9c:	bne	19fb8 <__assert_fail@plt+0x8a1c>
   19fa0:	ldr	r3, [fp, #4]
   19fa4:	cmp	r3, #2
   19fa8:	bne	19fb8 <__assert_fail@plt+0x8a1c>
   19fac:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19fb0:	cmp	r3, #0
   19fb4:	bne	1a140 <__assert_fail@plt+0x8ba4>
   19fb8:	ldr	r3, [fp, #4]
   19fbc:	cmp	r3, #2
   19fc0:	bne	1a060 <__assert_fail@plt+0x8ac4>
   19fc4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   19fc8:	eor	r3, r3, #1
   19fcc:	uxtb	r3, r3
   19fd0:	cmp	r3, #0
   19fd4:	beq	1a060 <__assert_fail@plt+0x8ac4>
   19fd8:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   19fdc:	cmp	r3, #0
   19fe0:	beq	1a060 <__assert_fail@plt+0x8ac4>
   19fe4:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   19fe8:	cmp	r3, #0
   19fec:	beq	1a034 <__assert_fail@plt+0x8a98>
   19ff0:	ldr	r3, [fp, #20]
   19ff4:	str	r3, [sp, #16]
   19ff8:	ldr	r3, [fp, #16]
   19ffc:	str	r3, [sp, #12]
   1a000:	ldr	r3, [fp, #12]
   1a004:	str	r3, [sp, #8]
   1a008:	ldr	r3, [fp, #8]
   1a00c:	str	r3, [sp, #4]
   1a010:	mov	r3, #5
   1a014:	str	r3, [sp]
   1a018:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a01c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a020:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1a024:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1a028:	bl	18b08 <__assert_fail@plt+0x756c>
   1a02c:	mov	r3, r0
   1a030:	b	1a1a8 <__assert_fail@plt+0x8c0c>
   1a034:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a038:	cmp	r3, #0
   1a03c:	bne	1a060 <__assert_fail@plt+0x8ac4>
   1a040:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a044:	cmp	r3, #0
   1a048:	beq	1a060 <__assert_fail@plt+0x8ac4>
   1a04c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a050:	str	r3, [fp, #-92]	; 0xffffffa4
   1a054:	mov	r3, #0
   1a058:	str	r3, [fp, #-20]	; 0xffffffec
   1a05c:	b	18b94 <__assert_fail@plt+0x75f8>
   1a060:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a064:	cmp	r3, #0
   1a068:	beq	1a0d4 <__assert_fail@plt+0x8b38>
   1a06c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1a070:	eor	r3, r3, #1
   1a074:	uxtb	r3, r3
   1a078:	cmp	r3, #0
   1a07c:	beq	1a0d4 <__assert_fail@plt+0x8b38>
   1a080:	b	1a0c4 <__assert_fail@plt+0x8b28>
   1a084:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a088:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a08c:	cmp	r2, r3
   1a090:	bcs	1a0ac <__assert_fail@plt+0x8b10>
   1a094:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a098:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a09c:	add	r3, r2, r3
   1a0a0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1a0a4:	ldrb	r2, [r2]
   1a0a8:	strb	r2, [r3]
   1a0ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a0b0:	add	r3, r3, #1
   1a0b4:	str	r3, [fp, #-20]	; 0xffffffec
   1a0b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a0bc:	add	r3, r3, #1
   1a0c0:	str	r3, [fp, #-28]	; 0xffffffe4
   1a0c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a0c8:	ldrb	r3, [r3]
   1a0cc:	cmp	r3, #0
   1a0d0:	bne	1a084 <__assert_fail@plt+0x8ae8>
   1a0d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a0d8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1a0dc:	cmp	r2, r3
   1a0e0:	bcs	1a0f8 <__assert_fail@plt+0x8b5c>
   1a0e4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1a0e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a0ec:	add	r3, r2, r3
   1a0f0:	mov	r2, #0
   1a0f4:	strb	r2, [r3]
   1a0f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a0fc:	b	1a1a8 <__assert_fail@plt+0x8c0c>
   1a100:	nop			; (mov r0, r0)
   1a104:	b	1a144 <__assert_fail@plt+0x8ba8>
   1a108:	nop			; (mov r0, r0)
   1a10c:	b	1a144 <__assert_fail@plt+0x8ba8>
   1a110:	nop			; (mov r0, r0)
   1a114:	b	1a144 <__assert_fail@plt+0x8ba8>
   1a118:	nop			; (mov r0, r0)
   1a11c:	b	1a144 <__assert_fail@plt+0x8ba8>
   1a120:	nop			; (mov r0, r0)
   1a124:	b	1a144 <__assert_fail@plt+0x8ba8>
   1a128:	nop			; (mov r0, r0)
   1a12c:	b	1a144 <__assert_fail@plt+0x8ba8>
   1a130:	nop			; (mov r0, r0)
   1a134:	b	1a144 <__assert_fail@plt+0x8ba8>
   1a138:	nop			; (mov r0, r0)
   1a13c:	b	1a144 <__assert_fail@plt+0x8ba8>
   1a140:	nop			; (mov r0, r0)
   1a144:	ldr	r3, [fp, #4]
   1a148:	cmp	r3, #2
   1a14c:	bne	1a164 <__assert_fail@plt+0x8bc8>
   1a150:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1a154:	cmp	r3, #0
   1a158:	beq	1a164 <__assert_fail@plt+0x8bc8>
   1a15c:	mov	r3, #4
   1a160:	str	r3, [fp, #4]
   1a164:	ldr	r3, [fp, #8]
   1a168:	bic	r3, r3, #2
   1a16c:	ldr	r2, [fp, #20]
   1a170:	str	r2, [sp, #16]
   1a174:	ldr	r2, [fp, #16]
   1a178:	str	r2, [sp, #12]
   1a17c:	mov	r2, #0
   1a180:	str	r2, [sp, #8]
   1a184:	str	r3, [sp, #4]
   1a188:	ldr	r3, [fp, #4]
   1a18c:	str	r3, [sp]
   1a190:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1a194:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1a198:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1a19c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1a1a0:	bl	18b08 <__assert_fail@plt+0x756c>
   1a1a4:	mov	r3, r0
   1a1a8:	mov	r0, r3
   1a1ac:	sub	sp, fp, #8
   1a1b0:	pop	{r4, fp, pc}
   1a1b4:	push	{fp, lr}
   1a1b8:	add	fp, sp, #4
   1a1bc:	sub	sp, sp, #56	; 0x38
   1a1c0:	str	r0, [fp, #-24]	; 0xffffffe8
   1a1c4:	str	r1, [fp, #-28]	; 0xffffffe4
   1a1c8:	str	r2, [fp, #-32]	; 0xffffffe0
   1a1cc:	str	r3, [fp, #-36]	; 0xffffffdc
   1a1d0:	ldr	r3, [fp, #4]
   1a1d4:	cmp	r3, #0
   1a1d8:	beq	1a1e4 <__assert_fail@plt+0x8c48>
   1a1dc:	ldr	r3, [fp, #4]
   1a1e0:	b	1a1e8 <__assert_fail@plt+0x8c4c>
   1a1e4:	ldr	r3, [pc, #132]	; 1a270 <__assert_fail@plt+0x8cd4>
   1a1e8:	str	r3, [fp, #-8]
   1a1ec:	bl	1141c <__errno_location@plt>
   1a1f0:	mov	r3, r0
   1a1f4:	ldr	r3, [r3]
   1a1f8:	str	r3, [fp, #-12]
   1a1fc:	ldr	r3, [fp, #-8]
   1a200:	ldr	r3, [r3]
   1a204:	ldr	r2, [fp, #-8]
   1a208:	ldr	r2, [r2, #4]
   1a20c:	ldr	r1, [fp, #-8]
   1a210:	add	r1, r1, #8
   1a214:	ldr	r0, [fp, #-8]
   1a218:	ldr	r0, [r0, #40]	; 0x28
   1a21c:	ldr	ip, [fp, #-8]
   1a220:	ldr	ip, [ip, #44]	; 0x2c
   1a224:	str	ip, [sp, #16]
   1a228:	str	r0, [sp, #12]
   1a22c:	str	r1, [sp, #8]
   1a230:	str	r2, [sp, #4]
   1a234:	str	r3, [sp]
   1a238:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a23c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a240:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1a244:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a248:	bl	18b08 <__assert_fail@plt+0x756c>
   1a24c:	str	r0, [fp, #-16]
   1a250:	bl	1141c <__errno_location@plt>
   1a254:	mov	r2, r0
   1a258:	ldr	r3, [fp, #-12]
   1a25c:	str	r3, [r2]
   1a260:	ldr	r3, [fp, #-16]
   1a264:	mov	r0, r3
   1a268:	sub	sp, fp, #4
   1a26c:	pop	{fp, pc}
   1a270:			; <UNDEFINED> instruction: 0x000312b4
   1a274:	push	{fp, lr}
   1a278:	add	fp, sp, #4
   1a27c:	sub	sp, sp, #16
   1a280:	str	r0, [fp, #-8]
   1a284:	str	r1, [fp, #-12]
   1a288:	str	r2, [fp, #-16]
   1a28c:	ldr	r3, [fp, #-16]
   1a290:	mov	r2, #0
   1a294:	ldr	r1, [fp, #-12]
   1a298:	ldr	r0, [fp, #-8]
   1a29c:	bl	1a2b0 <__assert_fail@plt+0x8d14>
   1a2a0:	mov	r3, r0
   1a2a4:	mov	r0, r3
   1a2a8:	sub	sp, fp, #4
   1a2ac:	pop	{fp, pc}
   1a2b0:	push	{fp, lr}
   1a2b4:	add	fp, sp, #4
   1a2b8:	sub	sp, sp, #64	; 0x40
   1a2bc:	str	r0, [fp, #-32]	; 0xffffffe0
   1a2c0:	str	r1, [fp, #-36]	; 0xffffffdc
   1a2c4:	str	r2, [fp, #-40]	; 0xffffffd8
   1a2c8:	str	r3, [fp, #-44]	; 0xffffffd4
   1a2cc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a2d0:	cmp	r3, #0
   1a2d4:	beq	1a2e0 <__assert_fail@plt+0x8d44>
   1a2d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a2dc:	b	1a2e4 <__assert_fail@plt+0x8d48>
   1a2e0:	ldr	r3, [pc, #292]	; 1a40c <__assert_fail@plt+0x8e70>
   1a2e4:	str	r3, [fp, #-8]
   1a2e8:	bl	1141c <__errno_location@plt>
   1a2ec:	mov	r3, r0
   1a2f0:	ldr	r3, [r3]
   1a2f4:	str	r3, [fp, #-12]
   1a2f8:	ldr	r3, [fp, #-8]
   1a2fc:	ldr	r3, [r3, #4]
   1a300:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a304:	cmp	r2, #0
   1a308:	moveq	r2, #1
   1a30c:	movne	r2, #0
   1a310:	uxtb	r2, r2
   1a314:	orr	r3, r3, r2
   1a318:	str	r3, [fp, #-16]
   1a31c:	ldr	r3, [fp, #-8]
   1a320:	ldr	r3, [r3]
   1a324:	ldr	r2, [fp, #-8]
   1a328:	add	r2, r2, #8
   1a32c:	ldr	r1, [fp, #-8]
   1a330:	ldr	r1, [r1, #40]	; 0x28
   1a334:	ldr	r0, [fp, #-8]
   1a338:	ldr	r0, [r0, #44]	; 0x2c
   1a33c:	str	r0, [sp, #16]
   1a340:	str	r1, [sp, #12]
   1a344:	str	r2, [sp, #8]
   1a348:	ldr	r2, [fp, #-16]
   1a34c:	str	r2, [sp, #4]
   1a350:	str	r3, [sp]
   1a354:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a358:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a35c:	mov	r1, #0
   1a360:	mov	r0, #0
   1a364:	bl	18b08 <__assert_fail@plt+0x756c>
   1a368:	mov	r3, r0
   1a36c:	add	r3, r3, #1
   1a370:	str	r3, [fp, #-20]	; 0xffffffec
   1a374:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a378:	bl	1b814 <__assert_fail@plt+0xa278>
   1a37c:	mov	r3, r0
   1a380:	str	r3, [fp, #-24]	; 0xffffffe8
   1a384:	ldr	r3, [fp, #-8]
   1a388:	ldr	r3, [r3]
   1a38c:	ldr	r2, [fp, #-8]
   1a390:	add	r2, r2, #8
   1a394:	ldr	r1, [fp, #-8]
   1a398:	ldr	r1, [r1, #40]	; 0x28
   1a39c:	ldr	r0, [fp, #-8]
   1a3a0:	ldr	r0, [r0, #44]	; 0x2c
   1a3a4:	str	r0, [sp, #16]
   1a3a8:	str	r1, [sp, #12]
   1a3ac:	str	r2, [sp, #8]
   1a3b0:	ldr	r2, [fp, #-16]
   1a3b4:	str	r2, [sp, #4]
   1a3b8:	str	r3, [sp]
   1a3bc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1a3c0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a3c4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a3c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a3cc:	bl	18b08 <__assert_fail@plt+0x756c>
   1a3d0:	bl	1141c <__errno_location@plt>
   1a3d4:	mov	r2, r0
   1a3d8:	ldr	r3, [fp, #-12]
   1a3dc:	str	r3, [r2]
   1a3e0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a3e4:	cmp	r3, #0
   1a3e8:	beq	1a3fc <__assert_fail@plt+0x8e60>
   1a3ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a3f0:	sub	r2, r3, #1
   1a3f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1a3f8:	str	r2, [r3]
   1a3fc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a400:	mov	r0, r3
   1a404:	sub	sp, fp, #4
   1a408:	pop	{fp, pc}
   1a40c:			; <UNDEFINED> instruction: 0x000312b4
   1a410:	push	{fp, lr}
   1a414:	add	fp, sp, #4
   1a418:	sub	sp, sp, #8
   1a41c:	ldr	r3, [pc, #196]	; 1a4e8 <__assert_fail@plt+0x8f4c>
   1a420:	ldr	r3, [r3]
   1a424:	str	r3, [fp, #-12]
   1a428:	mov	r3, #1
   1a42c:	str	r3, [fp, #-8]
   1a430:	b	1a45c <__assert_fail@plt+0x8ec0>
   1a434:	ldr	r3, [fp, #-8]
   1a438:	lsl	r3, r3, #3
   1a43c:	ldr	r2, [fp, #-12]
   1a440:	add	r3, r2, r3
   1a444:	ldr	r3, [r3, #4]
   1a448:	mov	r0, r3
   1a44c:	bl	1cf94 <__assert_fail@plt+0xb9f8>
   1a450:	ldr	r3, [fp, #-8]
   1a454:	add	r3, r3, #1
   1a458:	str	r3, [fp, #-8]
   1a45c:	ldr	r3, [pc, #136]	; 1a4ec <__assert_fail@plt+0x8f50>
   1a460:	ldr	r3, [r3]
   1a464:	ldr	r2, [fp, #-8]
   1a468:	cmp	r2, r3
   1a46c:	blt	1a434 <__assert_fail@plt+0x8e98>
   1a470:	ldr	r3, [fp, #-12]
   1a474:	ldr	r3, [r3, #4]
   1a478:	ldr	r2, [pc, #112]	; 1a4f0 <__assert_fail@plt+0x8f54>
   1a47c:	cmp	r3, r2
   1a480:	beq	1a4ac <__assert_fail@plt+0x8f10>
   1a484:	ldr	r3, [fp, #-12]
   1a488:	ldr	r3, [r3, #4]
   1a48c:	mov	r0, r3
   1a490:	bl	1cf94 <__assert_fail@plt+0xb9f8>
   1a494:	ldr	r3, [pc, #88]	; 1a4f4 <__assert_fail@plt+0x8f58>
   1a498:	mov	r2, #256	; 0x100
   1a49c:	str	r2, [r3]
   1a4a0:	ldr	r3, [pc, #76]	; 1a4f4 <__assert_fail@plt+0x8f58>
   1a4a4:	ldr	r2, [pc, #68]	; 1a4f0 <__assert_fail@plt+0x8f54>
   1a4a8:	str	r2, [r3, #4]
   1a4ac:	ldr	r3, [fp, #-12]
   1a4b0:	ldr	r2, [pc, #60]	; 1a4f4 <__assert_fail@plt+0x8f58>
   1a4b4:	cmp	r3, r2
   1a4b8:	beq	1a4d0 <__assert_fail@plt+0x8f34>
   1a4bc:	ldr	r0, [fp, #-12]
   1a4c0:	bl	1cf94 <__assert_fail@plt+0xb9f8>
   1a4c4:	ldr	r3, [pc, #28]	; 1a4e8 <__assert_fail@plt+0x8f4c>
   1a4c8:	ldr	r2, [pc, #36]	; 1a4f4 <__assert_fail@plt+0x8f58>
   1a4cc:	str	r2, [r3]
   1a4d0:	ldr	r3, [pc, #20]	; 1a4ec <__assert_fail@plt+0x8f50>
   1a4d4:	mov	r2, #1
   1a4d8:	str	r2, [r3]
   1a4dc:	nop			; (mov r0, r0)
   1a4e0:	sub	sp, fp, #4
   1a4e4:	pop	{fp, pc}
   1a4e8:	andeq	r1, r3, r8, lsl #3
   1a4ec:	andeq	r1, r3, ip, ror r1
   1a4f0:	andeq	r1, r3, r4, ror #5
   1a4f4:	andeq	r1, r3, r0, lsl #3
   1a4f8:	push	{r4, fp, lr}
   1a4fc:	add	fp, sp, #8
   1a500:	sub	sp, sp, #84	; 0x54
   1a504:	str	r0, [fp, #-56]	; 0xffffffc8
   1a508:	str	r1, [fp, #-60]	; 0xffffffc4
   1a50c:	str	r2, [fp, #-64]	; 0xffffffc0
   1a510:	str	r3, [fp, #-68]	; 0xffffffbc
   1a514:	bl	1141c <__errno_location@plt>
   1a518:	mov	r3, r0
   1a51c:	ldr	r3, [r3]
   1a520:	str	r3, [fp, #-24]	; 0xffffffe8
   1a524:	ldr	r3, [pc, #640]	; 1a7ac <__assert_fail@plt+0x9210>
   1a528:	ldr	r3, [r3]
   1a52c:	str	r3, [fp, #-16]
   1a530:	mvn	r3, #-2147483648	; 0x80000000
   1a534:	str	r3, [fp, #-28]	; 0xffffffe4
   1a538:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a53c:	cmp	r3, #0
   1a540:	blt	1a554 <__assert_fail@plt+0x8fb8>
   1a544:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1a548:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a54c:	cmp	r2, r3
   1a550:	blt	1a558 <__assert_fail@plt+0x8fbc>
   1a554:	bl	1156c <abort@plt>
   1a558:	ldr	r3, [pc, #592]	; 1a7b0 <__assert_fail@plt+0x9214>
   1a55c:	ldr	r2, [r3]
   1a560:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a564:	cmp	r2, r3
   1a568:	bgt	1a63c <__assert_fail@plt+0x90a0>
   1a56c:	ldr	r3, [fp, #-16]
   1a570:	ldr	r2, [pc, #572]	; 1a7b4 <__assert_fail@plt+0x9218>
   1a574:	cmp	r3, r2
   1a578:	moveq	r3, #1
   1a57c:	movne	r3, #0
   1a580:	strb	r3, [fp, #-29]	; 0xffffffe3
   1a584:	ldr	r3, [pc, #548]	; 1a7b0 <__assert_fail@plt+0x9214>
   1a588:	ldr	r3, [r3]
   1a58c:	str	r3, [fp, #-48]	; 0xffffffd0
   1a590:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1a594:	cmp	r3, #0
   1a598:	beq	1a5a4 <__assert_fail@plt+0x9008>
   1a59c:	mov	r0, #0
   1a5a0:	b	1a5a8 <__assert_fail@plt+0x900c>
   1a5a4:	ldr	r0, [fp, #-16]
   1a5a8:	ldr	r3, [pc, #512]	; 1a7b0 <__assert_fail@plt+0x9214>
   1a5ac:	ldr	r3, [r3]
   1a5b0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1a5b4:	sub	r3, r2, r3
   1a5b8:	add	r2, r3, #1
   1a5bc:	sub	r1, fp, #48	; 0x30
   1a5c0:	mov	r3, #8
   1a5c4:	str	r3, [sp]
   1a5c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a5cc:	bl	1bb34 <__assert_fail@plt+0xa598>
   1a5d0:	str	r0, [fp, #-16]
   1a5d4:	ldr	r2, [pc, #464]	; 1a7ac <__assert_fail@plt+0x9210>
   1a5d8:	ldr	r3, [fp, #-16]
   1a5dc:	str	r3, [r2]
   1a5e0:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   1a5e4:	cmp	r3, #0
   1a5e8:	beq	1a5fc <__assert_fail@plt+0x9060>
   1a5ec:	ldr	r3, [fp, #-16]
   1a5f0:	ldr	r2, [pc, #444]	; 1a7b4 <__assert_fail@plt+0x9218>
   1a5f4:	ldm	r2, {r0, r1}
   1a5f8:	stm	r3, {r0, r1}
   1a5fc:	ldr	r3, [pc, #428]	; 1a7b0 <__assert_fail@plt+0x9214>
   1a600:	ldr	r3, [r3]
   1a604:	lsl	r3, r3, #3
   1a608:	ldr	r2, [fp, #-16]
   1a60c:	add	r0, r2, r3
   1a610:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1a614:	ldr	r3, [pc, #404]	; 1a7b0 <__assert_fail@plt+0x9214>
   1a618:	ldr	r3, [r3]
   1a61c:	sub	r3, r2, r3
   1a620:	lsl	r3, r3, #3
   1a624:	mov	r2, r3
   1a628:	mov	r1, #0
   1a62c:	bl	11440 <memset@plt>
   1a630:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1a634:	ldr	r2, [pc, #372]	; 1a7b0 <__assert_fail@plt+0x9214>
   1a638:	str	r3, [r2]
   1a63c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a640:	lsl	r3, r3, #3
   1a644:	ldr	r2, [fp, #-16]
   1a648:	add	r3, r2, r3
   1a64c:	ldr	r3, [r3]
   1a650:	str	r3, [fp, #-36]	; 0xffffffdc
   1a654:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a658:	lsl	r3, r3, #3
   1a65c:	ldr	r2, [fp, #-16]
   1a660:	add	r3, r2, r3
   1a664:	ldr	r3, [r3, #4]
   1a668:	str	r3, [fp, #-20]	; 0xffffffec
   1a66c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1a670:	ldr	r3, [r3, #4]
   1a674:	orr	r3, r3, #1
   1a678:	str	r3, [fp, #-40]	; 0xffffffd8
   1a67c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1a680:	ldr	r3, [r3]
   1a684:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a688:	add	r2, r2, #8
   1a68c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1a690:	ldr	r1, [r1, #40]	; 0x28
   1a694:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a698:	ldr	r0, [r0, #44]	; 0x2c
   1a69c:	str	r0, [sp, #16]
   1a6a0:	str	r1, [sp, #12]
   1a6a4:	str	r2, [sp, #8]
   1a6a8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a6ac:	str	r2, [sp, #4]
   1a6b0:	str	r3, [sp]
   1a6b4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1a6b8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1a6bc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a6c0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a6c4:	bl	18b08 <__assert_fail@plt+0x756c>
   1a6c8:	str	r0, [fp, #-44]	; 0xffffffd4
   1a6cc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1a6d0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1a6d4:	cmp	r2, r3
   1a6d8:	bhi	1a78c <__assert_fail@plt+0x91f0>
   1a6dc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a6e0:	lsl	r3, r3, #3
   1a6e4:	ldr	r2, [fp, #-16]
   1a6e8:	add	r3, r2, r3
   1a6ec:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1a6f0:	add	r2, r2, #1
   1a6f4:	str	r2, [fp, #-36]	; 0xffffffdc
   1a6f8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1a6fc:	str	r2, [r3]
   1a700:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a704:	ldr	r2, [pc, #172]	; 1a7b8 <__assert_fail@plt+0x921c>
   1a708:	cmp	r3, r2
   1a70c:	beq	1a718 <__assert_fail@plt+0x917c>
   1a710:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a714:	bl	1cf94 <__assert_fail@plt+0xb9f8>
   1a718:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1a71c:	lsl	r3, r3, #3
   1a720:	ldr	r2, [fp, #-16]
   1a724:	add	r4, r2, r3
   1a728:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1a72c:	bl	1b814 <__assert_fail@plt+0xa278>
   1a730:	mov	r3, r0
   1a734:	str	r3, [fp, #-20]	; 0xffffffec
   1a738:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a73c:	str	r3, [r4, #4]
   1a740:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1a744:	ldr	r3, [r3]
   1a748:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a74c:	add	r2, r2, #8
   1a750:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1a754:	ldr	r1, [r1, #40]	; 0x28
   1a758:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1a75c:	ldr	r0, [r0, #44]	; 0x2c
   1a760:	str	r0, [sp, #16]
   1a764:	str	r1, [sp, #12]
   1a768:	str	r2, [sp, #8]
   1a76c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a770:	str	r2, [sp, #4]
   1a774:	str	r3, [sp]
   1a778:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1a77c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1a780:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1a784:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a788:	bl	18b08 <__assert_fail@plt+0x756c>
   1a78c:	bl	1141c <__errno_location@plt>
   1a790:	mov	r2, r0
   1a794:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a798:	str	r3, [r2]
   1a79c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a7a0:	mov	r0, r3
   1a7a4:	sub	sp, fp, #8
   1a7a8:	pop	{r4, fp, pc}
   1a7ac:	andeq	r1, r3, r8, lsl #3
   1a7b0:	andeq	r1, r3, ip, ror r1
   1a7b4:	andeq	r1, r3, r0, lsl #3
   1a7b8:	andeq	r1, r3, r4, ror #5
   1a7bc:	push	{fp, lr}
   1a7c0:	add	fp, sp, #4
   1a7c4:	sub	sp, sp, #8
   1a7c8:	str	r0, [fp, #-8]
   1a7cc:	str	r1, [fp, #-12]
   1a7d0:	ldr	r3, [pc, #28]	; 1a7f4 <__assert_fail@plt+0x9258>
   1a7d4:	mvn	r2, #0
   1a7d8:	ldr	r1, [fp, #-12]
   1a7dc:	ldr	r0, [fp, #-8]
   1a7e0:	bl	1a4f8 <__assert_fail@plt+0x8f5c>
   1a7e4:	mov	r3, r0
   1a7e8:	mov	r0, r3
   1a7ec:	sub	sp, fp, #4
   1a7f0:	pop	{fp, pc}
   1a7f4:			; <UNDEFINED> instruction: 0x000312b4
   1a7f8:	push	{fp, lr}
   1a7fc:	add	fp, sp, #4
   1a800:	sub	sp, sp, #16
   1a804:	str	r0, [fp, #-8]
   1a808:	str	r1, [fp, #-12]
   1a80c:	str	r2, [fp, #-16]
   1a810:	ldr	r3, [pc, #28]	; 1a834 <__assert_fail@plt+0x9298>
   1a814:	ldr	r2, [fp, #-16]
   1a818:	ldr	r1, [fp, #-12]
   1a81c:	ldr	r0, [fp, #-8]
   1a820:	bl	1a4f8 <__assert_fail@plt+0x8f5c>
   1a824:	mov	r3, r0
   1a828:	mov	r0, r3
   1a82c:	sub	sp, fp, #4
   1a830:	pop	{fp, pc}
   1a834:			; <UNDEFINED> instruction: 0x000312b4
   1a838:	push	{fp, lr}
   1a83c:	add	fp, sp, #4
   1a840:	sub	sp, sp, #8
   1a844:	str	r0, [fp, #-8]
   1a848:	ldr	r1, [fp, #-8]
   1a84c:	mov	r0, #0
   1a850:	bl	1a7bc <__assert_fail@plt+0x9220>
   1a854:	mov	r3, r0
   1a858:	mov	r0, r3
   1a85c:	sub	sp, fp, #4
   1a860:	pop	{fp, pc}
   1a864:	push	{fp, lr}
   1a868:	add	fp, sp, #4
   1a86c:	sub	sp, sp, #8
   1a870:	str	r0, [fp, #-8]
   1a874:	str	r1, [fp, #-12]
   1a878:	ldr	r2, [fp, #-12]
   1a87c:	ldr	r1, [fp, #-8]
   1a880:	mov	r0, #0
   1a884:	bl	1a7f8 <__assert_fail@plt+0x925c>
   1a888:	mov	r3, r0
   1a88c:	mov	r0, r3
   1a890:	sub	sp, fp, #4
   1a894:	pop	{fp, pc}
   1a898:	push	{fp, lr}
   1a89c:	add	fp, sp, #4
   1a8a0:	sub	sp, sp, #64	; 0x40
   1a8a4:	str	r0, [fp, #-56]	; 0xffffffc8
   1a8a8:	str	r1, [fp, #-60]	; 0xffffffc4
   1a8ac:	str	r2, [fp, #-64]	; 0xffffffc0
   1a8b0:	sub	r3, fp, #52	; 0x34
   1a8b4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1a8b8:	mov	r0, r3
   1a8bc:	bl	189a4 <__assert_fail@plt+0x7408>
   1a8c0:	sub	r3, fp, #52	; 0x34
   1a8c4:	mvn	r2, #0
   1a8c8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1a8cc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1a8d0:	bl	1a4f8 <__assert_fail@plt+0x8f5c>
   1a8d4:	mov	r3, r0
   1a8d8:	mov	r0, r3
   1a8dc:	sub	sp, fp, #4
   1a8e0:	pop	{fp, pc}
   1a8e4:	push	{fp, lr}
   1a8e8:	add	fp, sp, #4
   1a8ec:	sub	sp, sp, #64	; 0x40
   1a8f0:	str	r0, [fp, #-56]	; 0xffffffc8
   1a8f4:	str	r1, [fp, #-60]	; 0xffffffc4
   1a8f8:	str	r2, [fp, #-64]	; 0xffffffc0
   1a8fc:	str	r3, [fp, #-68]	; 0xffffffbc
   1a900:	sub	r3, fp, #52	; 0x34
   1a904:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1a908:	mov	r0, r3
   1a90c:	bl	189a4 <__assert_fail@plt+0x7408>
   1a910:	sub	r3, fp, #52	; 0x34
   1a914:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a918:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1a91c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1a920:	bl	1a4f8 <__assert_fail@plt+0x8f5c>
   1a924:	mov	r3, r0
   1a928:	mov	r0, r3
   1a92c:	sub	sp, fp, #4
   1a930:	pop	{fp, pc}
   1a934:	push	{fp, lr}
   1a938:	add	fp, sp, #4
   1a93c:	sub	sp, sp, #8
   1a940:	str	r0, [fp, #-8]
   1a944:	str	r1, [fp, #-12]
   1a948:	ldr	r2, [fp, #-12]
   1a94c:	ldr	r1, [fp, #-8]
   1a950:	mov	r0, #0
   1a954:	bl	1a898 <__assert_fail@plt+0x92fc>
   1a958:	mov	r3, r0
   1a95c:	mov	r0, r3
   1a960:	sub	sp, fp, #4
   1a964:	pop	{fp, pc}
   1a968:	push	{fp, lr}
   1a96c:	add	fp, sp, #4
   1a970:	sub	sp, sp, #16
   1a974:	str	r0, [fp, #-8]
   1a978:	str	r1, [fp, #-12]
   1a97c:	str	r2, [fp, #-16]
   1a980:	ldr	r3, [fp, #-16]
   1a984:	ldr	r2, [fp, #-12]
   1a988:	ldr	r1, [fp, #-8]
   1a98c:	mov	r0, #0
   1a990:	bl	1a8e4 <__assert_fail@plt+0x9348>
   1a994:	mov	r3, r0
   1a998:	mov	r0, r3
   1a99c:	sub	sp, fp, #4
   1a9a0:	pop	{fp, pc}
   1a9a4:	push	{fp, lr}
   1a9a8:	add	fp, sp, #4
   1a9ac:	sub	sp, sp, #64	; 0x40
   1a9b0:	str	r0, [fp, #-56]	; 0xffffffc8
   1a9b4:	str	r1, [fp, #-60]	; 0xffffffc4
   1a9b8:	mov	r3, r2
   1a9bc:	strb	r3, [fp, #-61]	; 0xffffffc3
   1a9c0:	ldr	r3, [pc, #84]	; 1aa1c <__assert_fail@plt+0x9480>
   1a9c4:	sub	ip, fp, #52	; 0x34
   1a9c8:	mov	lr, r3
   1a9cc:	ldm	lr!, {r0, r1, r2, r3}
   1a9d0:	stmia	ip!, {r0, r1, r2, r3}
   1a9d4:	ldm	lr!, {r0, r1, r2, r3}
   1a9d8:	stmia	ip!, {r0, r1, r2, r3}
   1a9dc:	ldm	lr, {r0, r1, r2, r3}
   1a9e0:	stm	ip, {r0, r1, r2, r3}
   1a9e4:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   1a9e8:	sub	r3, fp, #52	; 0x34
   1a9ec:	mov	r2, #1
   1a9f0:	mov	r0, r3
   1a9f4:	bl	18810 <__assert_fail@plt+0x7274>
   1a9f8:	sub	r3, fp, #52	; 0x34
   1a9fc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   1aa00:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1aa04:	mov	r0, #0
   1aa08:	bl	1a4f8 <__assert_fail@plt+0x8f5c>
   1aa0c:	mov	r3, r0
   1aa10:	mov	r0, r3
   1aa14:	sub	sp, fp, #4
   1aa18:	pop	{fp, pc}
   1aa1c:			; <UNDEFINED> instruction: 0x000312b4
   1aa20:	push	{fp, lr}
   1aa24:	add	fp, sp, #4
   1aa28:	sub	sp, sp, #8
   1aa2c:	str	r0, [fp, #-8]
   1aa30:	mov	r3, r1
   1aa34:	strb	r3, [fp, #-9]
   1aa38:	ldrb	r3, [fp, #-9]
   1aa3c:	mov	r2, r3
   1aa40:	mvn	r1, #0
   1aa44:	ldr	r0, [fp, #-8]
   1aa48:	bl	1a9a4 <__assert_fail@plt+0x9408>
   1aa4c:	mov	r3, r0
   1aa50:	mov	r0, r3
   1aa54:	sub	sp, fp, #4
   1aa58:	pop	{fp, pc}
   1aa5c:	push	{fp, lr}
   1aa60:	add	fp, sp, #4
   1aa64:	sub	sp, sp, #8
   1aa68:	str	r0, [fp, #-8]
   1aa6c:	mov	r1, #58	; 0x3a
   1aa70:	ldr	r0, [fp, #-8]
   1aa74:	bl	1aa20 <__assert_fail@plt+0x9484>
   1aa78:	mov	r3, r0
   1aa7c:	mov	r0, r3
   1aa80:	sub	sp, fp, #4
   1aa84:	pop	{fp, pc}
   1aa88:	push	{fp, lr}
   1aa8c:	add	fp, sp, #4
   1aa90:	sub	sp, sp, #8
   1aa94:	str	r0, [fp, #-8]
   1aa98:	str	r1, [fp, #-12]
   1aa9c:	mov	r2, #58	; 0x3a
   1aaa0:	ldr	r1, [fp, #-12]
   1aaa4:	ldr	r0, [fp, #-8]
   1aaa8:	bl	1a9a4 <__assert_fail@plt+0x9408>
   1aaac:	mov	r3, r0
   1aab0:	mov	r0, r3
   1aab4:	sub	sp, fp, #4
   1aab8:	pop	{fp, pc}
   1aabc:	push	{fp, lr}
   1aac0:	add	fp, sp, #4
   1aac4:	sub	sp, sp, #112	; 0x70
   1aac8:	str	r0, [fp, #-56]	; 0xffffffc8
   1aacc:	str	r1, [fp, #-60]	; 0xffffffc4
   1aad0:	str	r2, [fp, #-64]	; 0xffffffc0
   1aad4:	sub	r3, fp, #116	; 0x74
   1aad8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1aadc:	mov	r0, r3
   1aae0:	bl	189a4 <__assert_fail@plt+0x7408>
   1aae4:	sub	ip, fp, #52	; 0x34
   1aae8:	sub	lr, fp, #116	; 0x74
   1aaec:	ldm	lr!, {r0, r1, r2, r3}
   1aaf0:	stmia	ip!, {r0, r1, r2, r3}
   1aaf4:	ldm	lr!, {r0, r1, r2, r3}
   1aaf8:	stmia	ip!, {r0, r1, r2, r3}
   1aafc:	ldm	lr, {r0, r1, r2, r3}
   1ab00:	stm	ip, {r0, r1, r2, r3}
   1ab04:	sub	r3, fp, #52	; 0x34
   1ab08:	mov	r2, #1
   1ab0c:	mov	r1, #58	; 0x3a
   1ab10:	mov	r0, r3
   1ab14:	bl	18810 <__assert_fail@plt+0x7274>
   1ab18:	sub	r3, fp, #52	; 0x34
   1ab1c:	mvn	r2, #0
   1ab20:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1ab24:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ab28:	bl	1a4f8 <__assert_fail@plt+0x8f5c>
   1ab2c:	mov	r3, r0
   1ab30:	mov	r0, r3
   1ab34:	sub	sp, fp, #4
   1ab38:	pop	{fp, pc}
   1ab3c:	push	{fp, lr}
   1ab40:	add	fp, sp, #4
   1ab44:	sub	sp, sp, #24
   1ab48:	str	r0, [fp, #-8]
   1ab4c:	str	r1, [fp, #-12]
   1ab50:	str	r2, [fp, #-16]
   1ab54:	str	r3, [fp, #-20]	; 0xffffffec
   1ab58:	mvn	r3, #0
   1ab5c:	str	r3, [sp]
   1ab60:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ab64:	ldr	r2, [fp, #-16]
   1ab68:	ldr	r1, [fp, #-12]
   1ab6c:	ldr	r0, [fp, #-8]
   1ab70:	bl	1ab84 <__assert_fail@plt+0x95e8>
   1ab74:	mov	r3, r0
   1ab78:	mov	r0, r3
   1ab7c:	sub	sp, fp, #4
   1ab80:	pop	{fp, pc}
   1ab84:	push	{fp, lr}
   1ab88:	add	fp, sp, #4
   1ab8c:	sub	sp, sp, #64	; 0x40
   1ab90:	str	r0, [fp, #-56]	; 0xffffffc8
   1ab94:	str	r1, [fp, #-60]	; 0xffffffc4
   1ab98:	str	r2, [fp, #-64]	; 0xffffffc0
   1ab9c:	str	r3, [fp, #-68]	; 0xffffffbc
   1aba0:	ldr	r3, [pc, #84]	; 1abfc <__assert_fail@plt+0x9660>
   1aba4:	sub	ip, fp, #52	; 0x34
   1aba8:	mov	lr, r3
   1abac:	ldm	lr!, {r0, r1, r2, r3}
   1abb0:	stmia	ip!, {r0, r1, r2, r3}
   1abb4:	ldm	lr!, {r0, r1, r2, r3}
   1abb8:	stmia	ip!, {r0, r1, r2, r3}
   1abbc:	ldm	lr, {r0, r1, r2, r3}
   1abc0:	stm	ip, {r0, r1, r2, r3}
   1abc4:	sub	r3, fp, #52	; 0x34
   1abc8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1abcc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1abd0:	mov	r0, r3
   1abd4:	bl	18928 <__assert_fail@plt+0x738c>
   1abd8:	sub	r3, fp, #52	; 0x34
   1abdc:	ldr	r2, [fp, #4]
   1abe0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1abe4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1abe8:	bl	1a4f8 <__assert_fail@plt+0x8f5c>
   1abec:	mov	r3, r0
   1abf0:	mov	r0, r3
   1abf4:	sub	sp, fp, #4
   1abf8:	pop	{fp, pc}
   1abfc:			; <UNDEFINED> instruction: 0x000312b4
   1ac00:	push	{fp, lr}
   1ac04:	add	fp, sp, #4
   1ac08:	sub	sp, sp, #16
   1ac0c:	str	r0, [fp, #-8]
   1ac10:	str	r1, [fp, #-12]
   1ac14:	str	r2, [fp, #-16]
   1ac18:	ldr	r3, [fp, #-16]
   1ac1c:	ldr	r2, [fp, #-12]
   1ac20:	ldr	r1, [fp, #-8]
   1ac24:	mov	r0, #0
   1ac28:	bl	1ab3c <__assert_fail@plt+0x95a0>
   1ac2c:	mov	r3, r0
   1ac30:	mov	r0, r3
   1ac34:	sub	sp, fp, #4
   1ac38:	pop	{fp, pc}
   1ac3c:	push	{fp, lr}
   1ac40:	add	fp, sp, #4
   1ac44:	sub	sp, sp, #24
   1ac48:	str	r0, [fp, #-8]
   1ac4c:	str	r1, [fp, #-12]
   1ac50:	str	r2, [fp, #-16]
   1ac54:	str	r3, [fp, #-20]	; 0xffffffec
   1ac58:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ac5c:	str	r3, [sp]
   1ac60:	ldr	r3, [fp, #-16]
   1ac64:	ldr	r2, [fp, #-12]
   1ac68:	ldr	r1, [fp, #-8]
   1ac6c:	mov	r0, #0
   1ac70:	bl	1ab84 <__assert_fail@plt+0x95e8>
   1ac74:	mov	r3, r0
   1ac78:	mov	r0, r3
   1ac7c:	sub	sp, fp, #4
   1ac80:	pop	{fp, pc}
   1ac84:	push	{fp, lr}
   1ac88:	add	fp, sp, #4
   1ac8c:	sub	sp, sp, #16
   1ac90:	str	r0, [fp, #-8]
   1ac94:	str	r1, [fp, #-12]
   1ac98:	str	r2, [fp, #-16]
   1ac9c:	ldr	r3, [pc, #28]	; 1acc0 <__assert_fail@plt+0x9724>
   1aca0:	ldr	r2, [fp, #-16]
   1aca4:	ldr	r1, [fp, #-12]
   1aca8:	ldr	r0, [fp, #-8]
   1acac:	bl	1a4f8 <__assert_fail@plt+0x8f5c>
   1acb0:	mov	r3, r0
   1acb4:	mov	r0, r3
   1acb8:	sub	sp, fp, #4
   1acbc:	pop	{fp, pc}
   1acc0:	andeq	r1, r3, ip, lsl #3
   1acc4:	push	{fp, lr}
   1acc8:	add	fp, sp, #4
   1accc:	sub	sp, sp, #8
   1acd0:	str	r0, [fp, #-8]
   1acd4:	str	r1, [fp, #-12]
   1acd8:	ldr	r2, [fp, #-12]
   1acdc:	ldr	r1, [fp, #-8]
   1ace0:	mov	r0, #0
   1ace4:	bl	1ac84 <__assert_fail@plt+0x96e8>
   1ace8:	mov	r3, r0
   1acec:	mov	r0, r3
   1acf0:	sub	sp, fp, #4
   1acf4:	pop	{fp, pc}
   1acf8:	push	{fp, lr}
   1acfc:	add	fp, sp, #4
   1ad00:	sub	sp, sp, #8
   1ad04:	str	r0, [fp, #-8]
   1ad08:	str	r1, [fp, #-12]
   1ad0c:	mvn	r2, #0
   1ad10:	ldr	r1, [fp, #-12]
   1ad14:	ldr	r0, [fp, #-8]
   1ad18:	bl	1ac84 <__assert_fail@plt+0x96e8>
   1ad1c:	mov	r3, r0
   1ad20:	mov	r0, r3
   1ad24:	sub	sp, fp, #4
   1ad28:	pop	{fp, pc}
   1ad2c:	push	{fp, lr}
   1ad30:	add	fp, sp, #4
   1ad34:	sub	sp, sp, #8
   1ad38:	str	r0, [fp, #-8]
   1ad3c:	ldr	r1, [fp, #-8]
   1ad40:	mov	r0, #0
   1ad44:	bl	1acf8 <__assert_fail@plt+0x975c>
   1ad48:	mov	r3, r0
   1ad4c:	mov	r0, r3
   1ad50:	sub	sp, fp, #4
   1ad54:	pop	{fp, pc}
   1ad58:	push	{fp, lr}
   1ad5c:	add	fp, sp, #4
   1ad60:	sub	sp, sp, #24
   1ad64:	str	r0, [fp, #-16]
   1ad68:	str	r1, [fp, #-20]	; 0xffffffec
   1ad6c:	str	r2, [fp, #-24]	; 0xffffffe8
   1ad70:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ad74:	ldr	r1, [fp, #-20]	; 0xffffffec
   1ad78:	ldr	r0, [fp, #-16]
   1ad7c:	bl	11200 <read@plt>
   1ad80:	str	r0, [fp, #-8]
   1ad84:	ldr	r3, [fp, #-8]
   1ad88:	cmp	r3, #0
   1ad8c:	blt	1ad98 <__assert_fail@plt+0x97fc>
   1ad90:	ldr	r3, [fp, #-8]
   1ad94:	b	1adec <__assert_fail@plt+0x9850>
   1ad98:	bl	1141c <__errno_location@plt>
   1ad9c:	mov	r3, r0
   1ada0:	ldr	r3, [r3]
   1ada4:	cmp	r3, #4
   1ada8:	beq	1ade4 <__assert_fail@plt+0x9848>
   1adac:	bl	1141c <__errno_location@plt>
   1adb0:	mov	r3, r0
   1adb4:	ldr	r3, [r3]
   1adb8:	cmp	r3, #22
   1adbc:	bne	1addc <__assert_fail@plt+0x9840>
   1adc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1adc4:	ldr	r2, [pc, #44]	; 1adf8 <__assert_fail@plt+0x985c>
   1adc8:	cmp	r3, r2
   1adcc:	bls	1addc <__assert_fail@plt+0x9840>
   1add0:	ldr	r3, [pc, #32]	; 1adf8 <__assert_fail@plt+0x985c>
   1add4:	str	r3, [fp, #-24]	; 0xffffffe8
   1add8:	b	1ade8 <__assert_fail@plt+0x984c>
   1addc:	ldr	r3, [fp, #-8]
   1ade0:	b	1adec <__assert_fail@plt+0x9850>
   1ade4:	nop			; (mov r0, r0)
   1ade8:	b	1ad70 <__assert_fail@plt+0x97d4>
   1adec:	mov	r0, r3
   1adf0:	sub	sp, fp, #4
   1adf4:	pop	{fp, pc}
   1adf8:	svcvc	0x00f00000	; IMB
   1adfc:	push	{fp, lr}
   1ae00:	add	fp, sp, #4
   1ae04:	sub	sp, sp, #16
   1ae08:	str	r0, [fp, #-16]
   1ae0c:	str	r1, [fp, #-20]	; 0xffffffec
   1ae10:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ae14:	mov	r1, #0
   1ae18:	ldr	r0, [fp, #-16]
   1ae1c:	bl	11470 <memchr@plt>
   1ae20:	str	r0, [fp, #-8]
   1ae24:	ldr	r3, [fp, #-8]
   1ae28:	cmp	r3, #0
   1ae2c:	beq	1ae44 <__assert_fail@plt+0x98a8>
   1ae30:	ldr	r2, [fp, #-8]
   1ae34:	ldr	r3, [fp, #-16]
   1ae38:	sub	r3, r2, r3
   1ae3c:	add	r3, r3, #1
   1ae40:	b	1ae48 <__assert_fail@plt+0x98ac>
   1ae44:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ae48:	mov	r0, r3
   1ae4c:	sub	sp, fp, #4
   1ae50:	pop	{fp, pc}
   1ae54:	push	{fp, lr}
   1ae58:	add	fp, sp, #4
   1ae5c:	sub	sp, sp, #16
   1ae60:	str	r0, [fp, #-16]
   1ae64:	ldr	r3, [fp, #-16]
   1ae68:	cmp	r3, #0
   1ae6c:	blt	1aeb8 <__assert_fail@plt+0x991c>
   1ae70:	ldr	r3, [fp, #-16]
   1ae74:	cmp	r3, #2
   1ae78:	bgt	1aeb8 <__assert_fail@plt+0x991c>
   1ae7c:	ldr	r0, [fp, #-16]
   1ae80:	bl	1dd40 <__assert_fail@plt+0xc7a4>
   1ae84:	str	r0, [fp, #-8]
   1ae88:	bl	1141c <__errno_location@plt>
   1ae8c:	mov	r3, r0
   1ae90:	ldr	r3, [r3]
   1ae94:	str	r3, [fp, #-12]
   1ae98:	ldr	r0, [fp, #-16]
   1ae9c:	bl	11584 <close@plt>
   1aea0:	bl	1141c <__errno_location@plt>
   1aea4:	mov	r2, r0
   1aea8:	ldr	r3, [fp, #-12]
   1aeac:	str	r3, [r2]
   1aeb0:	ldr	r3, [fp, #-8]
   1aeb4:	str	r3, [fp, #-16]
   1aeb8:	ldr	r3, [fp, #-16]
   1aebc:	mov	r0, r3
   1aec0:	sub	sp, fp, #4
   1aec4:	pop	{fp, pc}
   1aec8:	push	{r4, fp, lr}
   1aecc:	add	fp, sp, #8
   1aed0:	sub	sp, sp, #20
   1aed4:	str	r0, [fp, #-24]	; 0xffffffe8
   1aed8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1aedc:	bl	11494 <pipe@plt>
   1aee0:	mov	r3, r0
   1aee4:	cmp	r3, #0
   1aee8:	bne	1afb0 <__assert_fail@plt+0x9a14>
   1aeec:	mov	r3, #0
   1aef0:	str	r3, [fp, #-16]
   1aef4:	b	1af9c <__assert_fail@plt+0x9a00>
   1aef8:	ldr	r3, [fp, #-16]
   1aefc:	lsl	r3, r3, #2
   1af00:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1af04:	add	r4, r2, r3
   1af08:	ldr	r3, [fp, #-16]
   1af0c:	lsl	r3, r3, #2
   1af10:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1af14:	add	r3, r2, r3
   1af18:	ldr	r3, [r3]
   1af1c:	mov	r0, r3
   1af20:	bl	1ae54 <__assert_fail@plt+0x98b8>
   1af24:	mov	r3, r0
   1af28:	str	r3, [r4]
   1af2c:	ldr	r3, [fp, #-16]
   1af30:	lsl	r3, r3, #2
   1af34:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1af38:	add	r3, r2, r3
   1af3c:	ldr	r3, [r3]
   1af40:	cmp	r3, #0
   1af44:	bge	1af90 <__assert_fail@plt+0x99f4>
   1af48:	bl	1141c <__errno_location@plt>
   1af4c:	mov	r3, r0
   1af50:	ldr	r3, [r3]
   1af54:	str	r3, [fp, #-20]	; 0xffffffec
   1af58:	ldr	r3, [fp, #-16]
   1af5c:	rsb	r3, r3, #1
   1af60:	lsl	r3, r3, #2
   1af64:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1af68:	add	r3, r2, r3
   1af6c:	ldr	r3, [r3]
   1af70:	mov	r0, r3
   1af74:	bl	11584 <close@plt>
   1af78:	bl	1141c <__errno_location@plt>
   1af7c:	mov	r2, r0
   1af80:	ldr	r3, [fp, #-20]	; 0xffffffec
   1af84:	str	r3, [r2]
   1af88:	mvn	r3, #0
   1af8c:	b	1afb4 <__assert_fail@plt+0x9a18>
   1af90:	ldr	r3, [fp, #-16]
   1af94:	add	r3, r3, #1
   1af98:	str	r3, [fp, #-16]
   1af9c:	ldr	r3, [fp, #-16]
   1afa0:	cmp	r3, #1
   1afa4:	ble	1aef8 <__assert_fail@plt+0x995c>
   1afa8:	mov	r3, #0
   1afac:	b	1afb4 <__assert_fail@plt+0x9a18>
   1afb0:	mvn	r3, #0
   1afb4:	mov	r0, r3
   1afb8:	sub	sp, fp, #8
   1afbc:	pop	{r4, fp, pc}
   1afc0:	push	{r4, r5, r6, r7, fp, lr}
   1afc4:	add	fp, sp, #20
   1afc8:	sub	sp, sp, #48	; 0x30
   1afcc:	str	r0, [fp, #-24]	; 0xffffffe8
   1afd0:	str	r1, [fp, #-28]	; 0xffffffe4
   1afd4:	str	r2, [fp, #-32]	; 0xffffffe0
   1afd8:	str	r3, [fp, #-36]	; 0xffffffdc
   1afdc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1afe0:	cmp	r3, #0
   1afe4:	beq	1b008 <__assert_fail@plt+0x9a6c>
   1afe8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1afec:	str	r3, [sp]
   1aff0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1aff4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1aff8:	ldr	r1, [pc, #1260]	; 1b4ec <__assert_fail@plt+0x9f50>
   1affc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b000:	bl	11410 <fprintf@plt>
   1b004:	b	1b01c <__assert_fail@plt+0x9a80>
   1b008:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1b00c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b010:	ldr	r1, [pc, #1240]	; 1b4f0 <__assert_fail@plt+0x9f54>
   1b014:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b018:	bl	11410 <fprintf@plt>
   1b01c:	ldr	r0, [pc, #1232]	; 1b4f4 <__assert_fail@plt+0x9f58>
   1b020:	bl	113d4 <gettext@plt>
   1b024:	mov	r2, r0
   1b028:	ldr	r3, [pc, #1224]	; 1b4f8 <__assert_fail@plt+0x9f5c>
   1b02c:	ldr	r1, [pc, #1224]	; 1b4fc <__assert_fail@plt+0x9f60>
   1b030:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b034:	bl	11410 <fprintf@plt>
   1b038:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b03c:	mov	r0, #10
   1b040:	bl	114f4 <fputc@plt>
   1b044:	ldr	r0, [pc, #1204]	; 1b500 <__assert_fail@plt+0x9f64>
   1b048:	bl	113d4 <gettext@plt>
   1b04c:	mov	r3, r0
   1b050:	ldr	r2, [pc, #1196]	; 1b504 <__assert_fail@plt+0x9f68>
   1b054:	mov	r1, r3
   1b058:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b05c:	bl	11410 <fprintf@plt>
   1b060:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b064:	mov	r0, #10
   1b068:	bl	114f4 <fputc@plt>
   1b06c:	ldr	r3, [fp, #8]
   1b070:	cmp	r3, #9
   1b074:	ldrls	pc, [pc, r3, lsl #2]
   1b078:	b	1b434 <__assert_fail@plt+0x9e98>
   1b07c:	ldrdeq	fp, [r1], -ip
   1b080:	andeq	fp, r1, r4, lsr #1
   1b084:	andeq	fp, r1, r8, asr #1
   1b088:	strdeq	fp, [r1], -r4
   1b08c:	andeq	fp, r1, r4, lsr r1
   1b090:	andeq	fp, r1, ip, lsl #3
   1b094:	strdeq	fp, [r1], -r4
   1b098:	andeq	fp, r1, ip, ror #4
   1b09c:	strdeq	fp, [r1], -r4
   1b0a0:	andeq	fp, r1, ip, lsl #7
   1b0a4:	ldr	r0, [pc, #1116]	; 1b508 <__assert_fail@plt+0x9f6c>
   1b0a8:	bl	113d4 <gettext@plt>
   1b0ac:	mov	r1, r0
   1b0b0:	ldr	r3, [fp, #4]
   1b0b4:	ldr	r3, [r3]
   1b0b8:	mov	r2, r3
   1b0bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b0c0:	bl	11410 <fprintf@plt>
   1b0c4:	b	1b4e0 <__assert_fail@plt+0x9f44>
   1b0c8:	ldr	r0, [pc, #1084]	; 1b50c <__assert_fail@plt+0x9f70>
   1b0cc:	bl	113d4 <gettext@plt>
   1b0d0:	mov	r1, r0
   1b0d4:	ldr	r3, [fp, #4]
   1b0d8:	ldr	r2, [r3]
   1b0dc:	ldr	r3, [fp, #4]
   1b0e0:	add	r3, r3, #4
   1b0e4:	ldr	r3, [r3]
   1b0e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b0ec:	bl	11410 <fprintf@plt>
   1b0f0:	b	1b4e0 <__assert_fail@plt+0x9f44>
   1b0f4:	ldr	r0, [pc, #1044]	; 1b510 <__assert_fail@plt+0x9f74>
   1b0f8:	bl	113d4 <gettext@plt>
   1b0fc:	ldr	r3, [fp, #4]
   1b100:	ldr	r2, [r3]
   1b104:	ldr	r3, [fp, #4]
   1b108:	add	r3, r3, #4
   1b10c:	ldr	r1, [r3]
   1b110:	ldr	r3, [fp, #4]
   1b114:	add	r3, r3, #8
   1b118:	ldr	r3, [r3]
   1b11c:	str	r3, [sp]
   1b120:	mov	r3, r1
   1b124:	mov	r1, r0
   1b128:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b12c:	bl	11410 <fprintf@plt>
   1b130:	b	1b4e0 <__assert_fail@plt+0x9f44>
   1b134:	ldr	r0, [pc, #984]	; 1b514 <__assert_fail@plt+0x9f78>
   1b138:	bl	113d4 <gettext@plt>
   1b13c:	mov	ip, r0
   1b140:	ldr	r3, [fp, #4]
   1b144:	ldr	r1, [r3]
   1b148:	ldr	r3, [fp, #4]
   1b14c:	add	r3, r3, #4
   1b150:	ldr	r0, [r3]
   1b154:	ldr	r3, [fp, #4]
   1b158:	add	r3, r3, #8
   1b15c:	ldr	r3, [r3]
   1b160:	ldr	r2, [fp, #4]
   1b164:	add	r2, r2, #12
   1b168:	ldr	r2, [r2]
   1b16c:	str	r2, [sp, #4]
   1b170:	str	r3, [sp]
   1b174:	mov	r3, r0
   1b178:	mov	r2, r1
   1b17c:	mov	r1, ip
   1b180:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b184:	bl	11410 <fprintf@plt>
   1b188:	b	1b4e0 <__assert_fail@plt+0x9f44>
   1b18c:	ldr	r0, [pc, #900]	; 1b518 <__assert_fail@plt+0x9f7c>
   1b190:	bl	113d4 <gettext@plt>
   1b194:	mov	lr, r0
   1b198:	ldr	r3, [fp, #4]
   1b19c:	ldr	r0, [r3]
   1b1a0:	ldr	r3, [fp, #4]
   1b1a4:	add	r3, r3, #4
   1b1a8:	ldr	ip, [r3]
   1b1ac:	ldr	r3, [fp, #4]
   1b1b0:	add	r3, r3, #8
   1b1b4:	ldr	r3, [r3]
   1b1b8:	ldr	r2, [fp, #4]
   1b1bc:	add	r2, r2, #12
   1b1c0:	ldr	r2, [r2]
   1b1c4:	ldr	r1, [fp, #4]
   1b1c8:	add	r1, r1, #16
   1b1cc:	ldr	r1, [r1]
   1b1d0:	str	r1, [sp, #8]
   1b1d4:	str	r2, [sp, #4]
   1b1d8:	str	r3, [sp]
   1b1dc:	mov	r3, ip
   1b1e0:	mov	r2, r0
   1b1e4:	mov	r1, lr
   1b1e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b1ec:	bl	11410 <fprintf@plt>
   1b1f0:	b	1b4e0 <__assert_fail@plt+0x9f44>
   1b1f4:	ldr	r0, [pc, #800]	; 1b51c <__assert_fail@plt+0x9f80>
   1b1f8:	bl	113d4 <gettext@plt>
   1b1fc:	mov	r4, r0
   1b200:	ldr	r3, [fp, #4]
   1b204:	ldr	ip, [r3]
   1b208:	ldr	r3, [fp, #4]
   1b20c:	add	r3, r3, #4
   1b210:	ldr	lr, [r3]
   1b214:	ldr	r3, [fp, #4]
   1b218:	add	r3, r3, #8
   1b21c:	ldr	r3, [r3]
   1b220:	ldr	r2, [fp, #4]
   1b224:	add	r2, r2, #12
   1b228:	ldr	r2, [r2]
   1b22c:	ldr	r1, [fp, #4]
   1b230:	add	r1, r1, #16
   1b234:	ldr	r1, [r1]
   1b238:	ldr	r0, [fp, #4]
   1b23c:	add	r0, r0, #20
   1b240:	ldr	r0, [r0]
   1b244:	str	r0, [sp, #12]
   1b248:	str	r1, [sp, #8]
   1b24c:	str	r2, [sp, #4]
   1b250:	str	r3, [sp]
   1b254:	mov	r3, lr
   1b258:	mov	r2, ip
   1b25c:	mov	r1, r4
   1b260:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b264:	bl	11410 <fprintf@plt>
   1b268:	b	1b4e0 <__assert_fail@plt+0x9f44>
   1b26c:	ldr	r0, [pc, #684]	; 1b520 <__assert_fail@plt+0x9f84>
   1b270:	bl	113d4 <gettext@plt>
   1b274:	mov	r5, r0
   1b278:	ldr	r3, [fp, #4]
   1b27c:	ldr	lr, [r3]
   1b280:	ldr	r3, [fp, #4]
   1b284:	add	r3, r3, #4
   1b288:	ldr	r4, [r3]
   1b28c:	ldr	r3, [fp, #4]
   1b290:	add	r3, r3, #8
   1b294:	ldr	r3, [r3]
   1b298:	ldr	r2, [fp, #4]
   1b29c:	add	r2, r2, #12
   1b2a0:	ldr	r2, [r2]
   1b2a4:	ldr	r1, [fp, #4]
   1b2a8:	add	r1, r1, #16
   1b2ac:	ldr	r1, [r1]
   1b2b0:	ldr	r0, [fp, #4]
   1b2b4:	add	r0, r0, #20
   1b2b8:	ldr	r0, [r0]
   1b2bc:	ldr	ip, [fp, #4]
   1b2c0:	add	ip, ip, #24
   1b2c4:	ldr	ip, [ip]
   1b2c8:	str	ip, [sp, #16]
   1b2cc:	str	r0, [sp, #12]
   1b2d0:	str	r1, [sp, #8]
   1b2d4:	str	r2, [sp, #4]
   1b2d8:	str	r3, [sp]
   1b2dc:	mov	r3, r4
   1b2e0:	mov	r2, lr
   1b2e4:	mov	r1, r5
   1b2e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b2ec:	bl	11410 <fprintf@plt>
   1b2f0:	b	1b4e0 <__assert_fail@plt+0x9f44>
   1b2f4:	ldr	r0, [pc, #552]	; 1b524 <__assert_fail@plt+0x9f88>
   1b2f8:	bl	113d4 <gettext@plt>
   1b2fc:	mov	r6, r0
   1b300:	ldr	r3, [fp, #4]
   1b304:	ldr	r4, [r3]
   1b308:	ldr	r3, [fp, #4]
   1b30c:	add	r3, r3, #4
   1b310:	ldr	r5, [r3]
   1b314:	ldr	r3, [fp, #4]
   1b318:	add	r3, r3, #8
   1b31c:	ldr	r3, [r3]
   1b320:	ldr	r2, [fp, #4]
   1b324:	add	r2, r2, #12
   1b328:	ldr	r2, [r2]
   1b32c:	ldr	r1, [fp, #4]
   1b330:	add	r1, r1, #16
   1b334:	ldr	r1, [r1]
   1b338:	ldr	r0, [fp, #4]
   1b33c:	add	r0, r0, #20
   1b340:	ldr	r0, [r0]
   1b344:	ldr	ip, [fp, #4]
   1b348:	add	ip, ip, #24
   1b34c:	ldr	ip, [ip]
   1b350:	ldr	lr, [fp, #4]
   1b354:	add	lr, lr, #28
   1b358:	ldr	lr, [lr]
   1b35c:	str	lr, [sp, #20]
   1b360:	str	ip, [sp, #16]
   1b364:	str	r0, [sp, #12]
   1b368:	str	r1, [sp, #8]
   1b36c:	str	r2, [sp, #4]
   1b370:	str	r3, [sp]
   1b374:	mov	r3, r5
   1b378:	mov	r2, r4
   1b37c:	mov	r1, r6
   1b380:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b384:	bl	11410 <fprintf@plt>
   1b388:	b	1b4e0 <__assert_fail@plt+0x9f44>
   1b38c:	ldr	r0, [pc, #404]	; 1b528 <__assert_fail@plt+0x9f8c>
   1b390:	bl	113d4 <gettext@plt>
   1b394:	mov	r7, r0
   1b398:	ldr	r3, [fp, #4]
   1b39c:	ldr	r5, [r3]
   1b3a0:	ldr	r3, [fp, #4]
   1b3a4:	add	r3, r3, #4
   1b3a8:	ldr	r6, [r3]
   1b3ac:	ldr	r3, [fp, #4]
   1b3b0:	add	r3, r3, #8
   1b3b4:	ldr	r3, [r3]
   1b3b8:	ldr	r2, [fp, #4]
   1b3bc:	add	r2, r2, #12
   1b3c0:	ldr	r2, [r2]
   1b3c4:	ldr	r1, [fp, #4]
   1b3c8:	add	r1, r1, #16
   1b3cc:	ldr	r1, [r1]
   1b3d0:	ldr	r0, [fp, #4]
   1b3d4:	add	r0, r0, #20
   1b3d8:	ldr	r0, [r0]
   1b3dc:	ldr	ip, [fp, #4]
   1b3e0:	add	ip, ip, #24
   1b3e4:	ldr	ip, [ip]
   1b3e8:	ldr	lr, [fp, #4]
   1b3ec:	add	lr, lr, #28
   1b3f0:	ldr	lr, [lr]
   1b3f4:	ldr	r4, [fp, #4]
   1b3f8:	add	r4, r4, #32
   1b3fc:	ldr	r4, [r4]
   1b400:	str	r4, [sp, #24]
   1b404:	str	lr, [sp, #20]
   1b408:	str	ip, [sp, #16]
   1b40c:	str	r0, [sp, #12]
   1b410:	str	r1, [sp, #8]
   1b414:	str	r2, [sp, #4]
   1b418:	str	r3, [sp]
   1b41c:	mov	r3, r6
   1b420:	mov	r2, r5
   1b424:	mov	r1, r7
   1b428:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b42c:	bl	11410 <fprintf@plt>
   1b430:	b	1b4e0 <__assert_fail@plt+0x9f44>
   1b434:	ldr	r0, [pc, #240]	; 1b52c <__assert_fail@plt+0x9f90>
   1b438:	bl	113d4 <gettext@plt>
   1b43c:	mov	r7, r0
   1b440:	ldr	r3, [fp, #4]
   1b444:	ldr	r5, [r3]
   1b448:	ldr	r3, [fp, #4]
   1b44c:	add	r3, r3, #4
   1b450:	ldr	r6, [r3]
   1b454:	ldr	r3, [fp, #4]
   1b458:	add	r3, r3, #8
   1b45c:	ldr	r3, [r3]
   1b460:	ldr	r2, [fp, #4]
   1b464:	add	r2, r2, #12
   1b468:	ldr	r2, [r2]
   1b46c:	ldr	r1, [fp, #4]
   1b470:	add	r1, r1, #16
   1b474:	ldr	r1, [r1]
   1b478:	ldr	r0, [fp, #4]
   1b47c:	add	r0, r0, #20
   1b480:	ldr	r0, [r0]
   1b484:	ldr	ip, [fp, #4]
   1b488:	add	ip, ip, #24
   1b48c:	ldr	ip, [ip]
   1b490:	ldr	lr, [fp, #4]
   1b494:	add	lr, lr, #28
   1b498:	ldr	lr, [lr]
   1b49c:	ldr	r4, [fp, #4]
   1b4a0:	add	r4, r4, #32
   1b4a4:	ldr	r4, [r4]
   1b4a8:	str	r4, [sp, #24]
   1b4ac:	str	lr, [sp, #20]
   1b4b0:	str	ip, [sp, #16]
   1b4b4:	str	r0, [sp, #12]
   1b4b8:	str	r1, [sp, #8]
   1b4bc:	str	r2, [sp, #4]
   1b4c0:	str	r3, [sp]
   1b4c4:	mov	r3, r6
   1b4c8:	mov	r2, r5
   1b4cc:	mov	r1, r7
   1b4d0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1b4d4:	bl	11410 <fprintf@plt>
   1b4d8:	b	1b4e0 <__assert_fail@plt+0x9f44>
   1b4dc:	nop			; (mov r0, r0)
   1b4e0:	nop			; (mov r0, r0)
   1b4e4:	sub	sp, fp, #20
   1b4e8:	pop	{r4, r5, r6, r7, fp, pc}
   1b4ec:	ldrdeq	r0, [r2], -ip
   1b4f0:	andeq	r0, r2, r8, ror #15
   1b4f4:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1b4f8:	andeq	r0, r0, r6, ror #15
   1b4fc:	andeq	r0, r2, r0, lsl #22
   1b500:	strdeq	r0, [r2], -r4
   1b504:	andeq	r0, r2, r0, lsr #17
   1b508:	andeq	r0, r2, r4, asr #17
   1b50c:	ldrdeq	r0, [r2], -r4
   1b510:	andeq	r0, r2, ip, ror #17
   1b514:	andeq	r0, r2, r8, lsl #18
   1b518:	andeq	r0, r2, r8, lsr #18
   1b51c:	andeq	r0, r2, ip, asr #18
   1b520:	andeq	r0, r2, r4, ror r9
   1b524:	andeq	r0, r2, r0, lsr #19
   1b528:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1b52c:	andeq	r0, r2, r4, lsl #20
   1b530:	push	{fp, lr}
   1b534:	add	fp, sp, #4
   1b538:	sub	sp, sp, #32
   1b53c:	str	r0, [fp, #-16]
   1b540:	str	r1, [fp, #-20]	; 0xffffffec
   1b544:	str	r2, [fp, #-24]	; 0xffffffe8
   1b548:	str	r3, [fp, #-28]	; 0xffffffe4
   1b54c:	mov	r3, #0
   1b550:	str	r3, [fp, #-8]
   1b554:	b	1b564 <__assert_fail@plt+0x9fc8>
   1b558:	ldr	r3, [fp, #-8]
   1b55c:	add	r3, r3, #1
   1b560:	str	r3, [fp, #-8]
   1b564:	ldr	r3, [fp, #-8]
   1b568:	lsl	r3, r3, #2
   1b56c:	ldr	r2, [fp, #4]
   1b570:	add	r3, r2, r3
   1b574:	ldr	r3, [r3]
   1b578:	cmp	r3, #0
   1b57c:	bne	1b558 <__assert_fail@plt+0x9fbc>
   1b580:	ldr	r3, [fp, #-8]
   1b584:	str	r3, [sp, #4]
   1b588:	ldr	r3, [fp, #4]
   1b58c:	str	r3, [sp]
   1b590:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1b594:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b598:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b59c:	ldr	r0, [fp, #-16]
   1b5a0:	bl	1afc0 <__assert_fail@plt+0x9a24>
   1b5a4:	nop			; (mov r0, r0)
   1b5a8:	sub	sp, fp, #4
   1b5ac:	pop	{fp, pc}
   1b5b0:	push	{fp, lr}
   1b5b4:	add	fp, sp, #4
   1b5b8:	sub	sp, sp, #72	; 0x48
   1b5bc:	str	r0, [fp, #-56]	; 0xffffffc8
   1b5c0:	str	r1, [fp, #-60]	; 0xffffffc4
   1b5c4:	str	r2, [fp, #-64]	; 0xffffffc0
   1b5c8:	str	r3, [fp, #-68]	; 0xffffffbc
   1b5cc:	mov	r3, #0
   1b5d0:	str	r3, [fp, #-8]
   1b5d4:	b	1b5e4 <__assert_fail@plt+0xa048>
   1b5d8:	ldr	r3, [fp, #-8]
   1b5dc:	add	r3, r3, #1
   1b5e0:	str	r3, [fp, #-8]
   1b5e4:	ldr	r3, [fp, #-8]
   1b5e8:	cmp	r3, #9
   1b5ec:	bhi	1b630 <__assert_fail@plt+0xa094>
   1b5f0:	ldr	r3, [fp, #4]
   1b5f4:	add	r2, r3, #4
   1b5f8:	str	r2, [fp, #4]
   1b5fc:	ldr	r2, [r3]
   1b600:	ldr	r3, [fp, #-8]
   1b604:	lsl	r3, r3, #2
   1b608:	sub	r1, fp, #4
   1b60c:	add	r3, r1, r3
   1b610:	str	r2, [r3, #-44]	; 0xffffffd4
   1b614:	ldr	r3, [fp, #-8]
   1b618:	lsl	r3, r3, #2
   1b61c:	sub	r2, fp, #4
   1b620:	add	r3, r2, r3
   1b624:	ldr	r3, [r3, #-44]	; 0xffffffd4
   1b628:	cmp	r3, #0
   1b62c:	bne	1b5d8 <__assert_fail@plt+0xa03c>
   1b630:	ldr	r3, [fp, #-8]
   1b634:	str	r3, [sp, #4]
   1b638:	sub	r3, fp, #48	; 0x30
   1b63c:	str	r3, [sp]
   1b640:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1b644:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1b648:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1b64c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1b650:	bl	1afc0 <__assert_fail@plt+0x9a24>
   1b654:	nop			; (mov r0, r0)
   1b658:	sub	sp, fp, #4
   1b65c:	pop	{fp, pc}
   1b660:	push	{r3}		; (str r3, [sp, #-4]!)
   1b664:	push	{fp, lr}
   1b668:	add	fp, sp, #4
   1b66c:	sub	sp, sp, #36	; 0x24
   1b670:	str	r0, [fp, #-20]	; 0xffffffec
   1b674:	str	r1, [fp, #-24]	; 0xffffffe8
   1b678:	str	r2, [fp, #-28]	; 0xffffffe4
   1b67c:	add	r3, fp, #8
   1b680:	str	r3, [fp, #-12]
   1b684:	ldr	r3, [fp, #-12]
   1b688:	str	r3, [sp]
   1b68c:	ldr	r3, [fp, #4]
   1b690:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1b694:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1b698:	ldr	r0, [fp, #-20]	; 0xffffffec
   1b69c:	bl	1b5b0 <__assert_fail@plt+0xa014>
   1b6a0:	nop			; (mov r0, r0)
   1b6a4:	sub	sp, fp, #4
   1b6a8:	pop	{fp, lr}
   1b6ac:	add	sp, sp, #4
   1b6b0:	bx	lr
   1b6b4:	push	{fp, lr}
   1b6b8:	add	fp, sp, #4
   1b6bc:	ldr	r3, [pc, #96]	; 1b724 <__assert_fail@plt+0xa188>
   1b6c0:	ldr	r3, [r3]
   1b6c4:	mov	r1, r3
   1b6c8:	mov	r0, #10
   1b6cc:	bl	114f4 <fputc@plt>
   1b6d0:	ldr	r0, [pc, #80]	; 1b728 <__assert_fail@plt+0xa18c>
   1b6d4:	bl	113d4 <gettext@plt>
   1b6d8:	mov	r3, r0
   1b6dc:	ldr	r1, [pc, #72]	; 1b72c <__assert_fail@plt+0xa190>
   1b6e0:	mov	r0, r3
   1b6e4:	bl	111f4 <printf@plt>
   1b6e8:	ldr	r0, [pc, #64]	; 1b730 <__assert_fail@plt+0xa194>
   1b6ec:	bl	113d4 <gettext@plt>
   1b6f0:	mov	r3, r0
   1b6f4:	ldr	r2, [pc, #56]	; 1b734 <__assert_fail@plt+0xa198>
   1b6f8:	ldr	r1, [pc, #56]	; 1b738 <__assert_fail@plt+0xa19c>
   1b6fc:	mov	r0, r3
   1b700:	bl	111f4 <printf@plt>
   1b704:	ldr	r0, [pc, #48]	; 1b73c <__assert_fail@plt+0xa1a0>
   1b708:	bl	113d4 <gettext@plt>
   1b70c:	mov	r3, r0
   1b710:	ldr	r1, [pc, #40]	; 1b740 <__assert_fail@plt+0xa1a4>
   1b714:	mov	r0, r3
   1b718:	bl	111f4 <printf@plt>
   1b71c:	nop			; (mov r0, r0)
   1b720:	pop	{fp, pc}
   1b724:	andeq	r1, r3, r4, ror #3
   1b728:	andeq	r0, r2, r0, asr #20
   1b72c:	andeq	r0, r2, r4, asr sl
   1b730:	andeq	r0, r2, ip, ror #20
   1b734:	andeq	r0, r2, r0, lsl #21
   1b738:	andeq	r0, r2, r8, lsr #21
   1b73c:			; <UNDEFINED> instruction: 0x00020ab8
   1b740:	andeq	r0, r2, r0, ror #21
   1b744:	push	{fp, lr}
   1b748:	add	fp, sp, #4
   1b74c:	sub	sp, sp, #16
   1b750:	str	r0, [fp, #-8]
   1b754:	str	r1, [fp, #-12]
   1b758:	str	r2, [fp, #-16]
   1b75c:	ldr	r2, [fp, #-16]
   1b760:	ldr	r1, [fp, #-12]
   1b764:	ldr	r0, [fp, #-8]
   1b768:	bl	1b8d4 <__assert_fail@plt+0xa338>
   1b76c:	mov	r3, r0
   1b770:	mov	r0, r3
   1b774:	sub	sp, fp, #4
   1b778:	pop	{fp, pc}
   1b77c:	push	{fp, lr}
   1b780:	add	fp, sp, #4
   1b784:	sub	sp, sp, #8
   1b788:	str	r0, [fp, #-8]
   1b78c:	ldr	r3, [fp, #-8]
   1b790:	cmp	r3, #0
   1b794:	bne	1b79c <__assert_fail@plt+0xa200>
   1b798:	bl	1c2c8 <__assert_fail@plt+0xad2c>
   1b79c:	ldr	r3, [fp, #-8]
   1b7a0:	mov	r0, r3
   1b7a4:	sub	sp, fp, #4
   1b7a8:	pop	{fp, pc}
   1b7ac:	push	{fp, lr}
   1b7b0:	add	fp, sp, #4
   1b7b4:	sub	sp, sp, #8
   1b7b8:	str	r0, [fp, #-8]
   1b7bc:	ldr	r0, [fp, #-8]
   1b7c0:	bl	1d104 <__assert_fail@plt+0xbb68>
   1b7c4:	mov	r3, r0
   1b7c8:	mov	r0, r3
   1b7cc:	bl	1b77c <__assert_fail@plt+0xa1e0>
   1b7d0:	mov	r3, r0
   1b7d4:	mov	r0, r3
   1b7d8:	sub	sp, fp, #4
   1b7dc:	pop	{fp, pc}
   1b7e0:	push	{fp, lr}
   1b7e4:	add	fp, sp, #4
   1b7e8:	sub	sp, sp, #8
   1b7ec:	str	r0, [fp, #-8]
   1b7f0:	ldr	r0, [fp, #-8]
   1b7f4:	bl	1d608 <__assert_fail@plt+0xc06c>
   1b7f8:	mov	r3, r0
   1b7fc:	mov	r0, r3
   1b800:	bl	1b77c <__assert_fail@plt+0xa1e0>
   1b804:	mov	r3, r0
   1b808:	mov	r0, r3
   1b80c:	sub	sp, fp, #4
   1b810:	pop	{fp, pc}
   1b814:	push	{fp, lr}
   1b818:	add	fp, sp, #4
   1b81c:	sub	sp, sp, #8
   1b820:	str	r0, [fp, #-8]
   1b824:	ldr	r0, [fp, #-8]
   1b828:	bl	1b7ac <__assert_fail@plt+0xa210>
   1b82c:	mov	r3, r0
   1b830:	mov	r0, r3
   1b834:	sub	sp, fp, #4
   1b838:	pop	{fp, pc}
   1b83c:	push	{fp, lr}
   1b840:	add	fp, sp, #4
   1b844:	sub	sp, sp, #16
   1b848:	str	r0, [fp, #-16]
   1b84c:	str	r1, [fp, #-20]	; 0xffffffec
   1b850:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b854:	ldr	r0, [fp, #-16]
   1b858:	bl	1d258 <__assert_fail@plt+0xbcbc>
   1b85c:	str	r0, [fp, #-8]
   1b860:	ldr	r3, [fp, #-8]
   1b864:	cmp	r3, #0
   1b868:	bne	1b888 <__assert_fail@plt+0xa2ec>
   1b86c:	ldr	r3, [fp, #-16]
   1b870:	cmp	r3, #0
   1b874:	beq	1b884 <__assert_fail@plt+0xa2e8>
   1b878:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b87c:	cmp	r3, #0
   1b880:	beq	1b888 <__assert_fail@plt+0xa2ec>
   1b884:	bl	1c2c8 <__assert_fail@plt+0xad2c>
   1b888:	ldr	r3, [fp, #-8]
   1b88c:	mov	r0, r3
   1b890:	sub	sp, fp, #4
   1b894:	pop	{fp, pc}
   1b898:	push	{fp, lr}
   1b89c:	add	fp, sp, #4
   1b8a0:	sub	sp, sp, #8
   1b8a4:	str	r0, [fp, #-8]
   1b8a8:	str	r1, [fp, #-12]
   1b8ac:	ldr	r1, [fp, #-12]
   1b8b0:	ldr	r0, [fp, #-8]
   1b8b4:	bl	1d634 <__assert_fail@plt+0xc098>
   1b8b8:	mov	r3, r0
   1b8bc:	mov	r0, r3
   1b8c0:	bl	1b77c <__assert_fail@plt+0xa1e0>
   1b8c4:	mov	r3, r0
   1b8c8:	mov	r0, r3
   1b8cc:	sub	sp, fp, #4
   1b8d0:	pop	{fp, pc}
   1b8d4:	push	{fp, lr}
   1b8d8:	add	fp, sp, #4
   1b8dc:	sub	sp, sp, #24
   1b8e0:	str	r0, [fp, #-16]
   1b8e4:	str	r1, [fp, #-20]	; 0xffffffec
   1b8e8:	str	r2, [fp, #-24]	; 0xffffffe8
   1b8ec:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1b8f0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1b8f4:	ldr	r0, [fp, #-16]
   1b8f8:	bl	1d328 <__assert_fail@plt+0xbd8c>
   1b8fc:	str	r0, [fp, #-8]
   1b900:	ldr	r3, [fp, #-8]
   1b904:	cmp	r3, #0
   1b908:	bne	1b934 <__assert_fail@plt+0xa398>
   1b90c:	ldr	r3, [fp, #-16]
   1b910:	cmp	r3, #0
   1b914:	beq	1b930 <__assert_fail@plt+0xa394>
   1b918:	ldr	r3, [fp, #-20]	; 0xffffffec
   1b91c:	cmp	r3, #0
   1b920:	beq	1b934 <__assert_fail@plt+0xa398>
   1b924:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1b928:	cmp	r3, #0
   1b92c:	beq	1b934 <__assert_fail@plt+0xa398>
   1b930:	bl	1c2c8 <__assert_fail@plt+0xad2c>
   1b934:	ldr	r3, [fp, #-8]
   1b938:	mov	r0, r3
   1b93c:	sub	sp, fp, #4
   1b940:	pop	{fp, pc}
   1b944:	push	{fp, lr}
   1b948:	add	fp, sp, #4
   1b94c:	sub	sp, sp, #16
   1b950:	str	r0, [fp, #-8]
   1b954:	str	r1, [fp, #-12]
   1b958:	str	r2, [fp, #-16]
   1b95c:	ldr	r2, [fp, #-16]
   1b960:	ldr	r1, [fp, #-12]
   1b964:	ldr	r0, [fp, #-8]
   1b968:	bl	1d6bc <__assert_fail@plt+0xc120>
   1b96c:	mov	r3, r0
   1b970:	mov	r0, r3
   1b974:	bl	1b77c <__assert_fail@plt+0xa1e0>
   1b978:	mov	r3, r0
   1b97c:	mov	r0, r3
   1b980:	sub	sp, fp, #4
   1b984:	pop	{fp, pc}
   1b988:	push	{fp, lr}
   1b98c:	add	fp, sp, #4
   1b990:	sub	sp, sp, #8
   1b994:	str	r0, [fp, #-8]
   1b998:	str	r1, [fp, #-12]
   1b99c:	ldr	r2, [fp, #-12]
   1b9a0:	ldr	r1, [fp, #-8]
   1b9a4:	mov	r0, #0
   1b9a8:	bl	1b8d4 <__assert_fail@plt+0xa338>
   1b9ac:	mov	r3, r0
   1b9b0:	mov	r0, r3
   1b9b4:	sub	sp, fp, #4
   1b9b8:	pop	{fp, pc}
   1b9bc:	push	{fp, lr}
   1b9c0:	add	fp, sp, #4
   1b9c4:	sub	sp, sp, #8
   1b9c8:	str	r0, [fp, #-8]
   1b9cc:	str	r1, [fp, #-12]
   1b9d0:	ldr	r2, [fp, #-12]
   1b9d4:	ldr	r1, [fp, #-8]
   1b9d8:	mov	r0, #0
   1b9dc:	bl	1b944 <__assert_fail@plt+0xa3a8>
   1b9e0:	mov	r3, r0
   1b9e4:	mov	r0, r3
   1b9e8:	sub	sp, fp, #4
   1b9ec:	pop	{fp, pc}
   1b9f0:	push	{fp, lr}
   1b9f4:	add	fp, sp, #4
   1b9f8:	sub	sp, sp, #8
   1b9fc:	str	r0, [fp, #-8]
   1ba00:	str	r1, [fp, #-12]
   1ba04:	mov	r2, #1
   1ba08:	ldr	r1, [fp, #-12]
   1ba0c:	ldr	r0, [fp, #-8]
   1ba10:	bl	1ba24 <__assert_fail@plt+0xa488>
   1ba14:	mov	r3, r0
   1ba18:	mov	r0, r3
   1ba1c:	sub	sp, fp, #4
   1ba20:	pop	{fp, pc}
   1ba24:	push	{fp, lr}
   1ba28:	add	fp, sp, #4
   1ba2c:	sub	sp, sp, #24
   1ba30:	str	r0, [fp, #-16]
   1ba34:	str	r1, [fp, #-20]	; 0xffffffec
   1ba38:	str	r2, [fp, #-24]	; 0xffffffe8
   1ba3c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1ba40:	ldr	r3, [r3]
   1ba44:	str	r3, [fp, #-8]
   1ba48:	ldr	r3, [fp, #-16]
   1ba4c:	cmp	r3, #0
   1ba50:	bne	1ba9c <__assert_fail@plt+0xa500>
   1ba54:	ldr	r3, [fp, #-8]
   1ba58:	cmp	r3, #0
   1ba5c:	bne	1bb00 <__assert_fail@plt+0xa564>
   1ba60:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1ba64:	mov	r0, #64	; 0x40
   1ba68:	bl	1e264 <__assert_fail@plt+0xccc8>
   1ba6c:	mov	r3, r0
   1ba70:	str	r3, [fp, #-8]
   1ba74:	ldr	r3, [fp, #-8]
   1ba78:	cmp	r3, #0
   1ba7c:	moveq	r3, #1
   1ba80:	movne	r3, #0
   1ba84:	uxtb	r3, r3
   1ba88:	mov	r2, r3
   1ba8c:	ldr	r3, [fp, #-8]
   1ba90:	add	r3, r2, r3
   1ba94:	str	r3, [fp, #-8]
   1ba98:	b	1bb00 <__assert_fail@plt+0xa564>
   1ba9c:	ldr	r3, [fp, #-8]
   1baa0:	lsr	r3, r3, #1
   1baa4:	add	r3, r3, #1
   1baa8:	mvn	r2, r3
   1baac:	ldr	r3, [fp, #-8]
   1bab0:	cmp	r2, r3
   1bab4:	bcs	1bad8 <__assert_fail@plt+0xa53c>
   1bab8:	ldr	r3, [fp, #-8]
   1babc:	lsr	r2, r3, #1
   1bac0:	ldr	r3, [fp, #-8]
   1bac4:	add	r3, r2, r3
   1bac8:	add	r3, r3, #1
   1bacc:	str	r3, [fp, #-8]
   1bad0:	mov	r3, #1
   1bad4:	b	1baf4 <__assert_fail@plt+0xa558>
   1bad8:	ldr	r3, [fp, #-8]
   1badc:	lsr	r2, r3, #1
   1bae0:	ldr	r3, [fp, #-8]
   1bae4:	add	r3, r2, r3
   1bae8:	add	r3, r3, #1
   1baec:	str	r3, [fp, #-8]
   1baf0:	mov	r3, #0
   1baf4:	cmp	r3, #0
   1baf8:	beq	1bb00 <__assert_fail@plt+0xa564>
   1bafc:	bl	1c2c8 <__assert_fail@plt+0xad2c>
   1bb00:	ldr	r3, [fp, #-8]
   1bb04:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1bb08:	mov	r1, r3
   1bb0c:	ldr	r0, [fp, #-16]
   1bb10:	bl	1b8d4 <__assert_fail@plt+0xa338>
   1bb14:	str	r0, [fp, #-16]
   1bb18:	ldr	r2, [fp, #-8]
   1bb1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bb20:	str	r2, [r3]
   1bb24:	ldr	r3, [fp, #-16]
   1bb28:	mov	r0, r3
   1bb2c:	sub	sp, fp, #4
   1bb30:	pop	{fp, pc}
   1bb34:	push	{fp, lr}
   1bb38:	add	fp, sp, #4
   1bb3c:	sub	sp, sp, #32
   1bb40:	str	r0, [fp, #-24]	; 0xffffffe8
   1bb44:	str	r1, [fp, #-28]	; 0xffffffe4
   1bb48:	str	r2, [fp, #-32]	; 0xffffffe0
   1bb4c:	str	r3, [fp, #-36]	; 0xffffffdc
   1bb50:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1bb54:	ldr	r3, [r3]
   1bb58:	str	r3, [fp, #-8]
   1bb5c:	ldr	r3, [fp, #-8]
   1bb60:	asr	r3, r3, #1
   1bb64:	cmp	r3, #0
   1bb68:	bge	1bb90 <__assert_fail@plt+0xa5f4>
   1bb6c:	ldr	r3, [fp, #-8]
   1bb70:	asr	r3, r3, #1
   1bb74:	rsb	r2, r3, #-2147483648	; 0x80000000
   1bb78:	ldr	r3, [fp, #-8]
   1bb7c:	cmp	r2, r3
   1bb80:	movgt	r3, #1
   1bb84:	movle	r3, #0
   1bb88:	uxtb	r3, r3
   1bb8c:	b	1bbe4 <__assert_fail@plt+0xa648>
   1bb90:	ldr	r3, [fp, #-8]
   1bb94:	cmp	r3, #0
   1bb98:	bge	1bbc0 <__assert_fail@plt+0xa624>
   1bb9c:	ldr	r3, [fp, #-8]
   1bba0:	asr	r2, r3, #1
   1bba4:	ldr	r3, [fp, #-8]
   1bba8:	rsb	r3, r3, #-2147483648	; 0x80000000
   1bbac:	cmp	r2, r3
   1bbb0:	movlt	r3, #1
   1bbb4:	movge	r3, #0
   1bbb8:	uxtb	r3, r3
   1bbbc:	b	1bbe4 <__assert_fail@plt+0xa648>
   1bbc0:	ldr	r3, [fp, #-8]
   1bbc4:	asr	r2, r3, #1
   1bbc8:	mvn	r3, #-2147483648	; 0x80000000
   1bbcc:	sub	r3, r3, r2
   1bbd0:	ldr	r2, [fp, #-8]
   1bbd4:	cmp	r3, r2
   1bbd8:	movlt	r3, #1
   1bbdc:	movge	r3, #0
   1bbe0:	uxtb	r3, r3
   1bbe4:	cmp	r3, #0
   1bbe8:	beq	1bc0c <__assert_fail@plt+0xa670>
   1bbec:	ldr	r3, [fp, #-8]
   1bbf0:	asr	r3, r3, #1
   1bbf4:	mov	r2, r3
   1bbf8:	ldr	r3, [fp, #-8]
   1bbfc:	add	r3, r2, r3
   1bc00:	str	r3, [fp, #-16]
   1bc04:	mov	r3, #1
   1bc08:	b	1bc28 <__assert_fail@plt+0xa68c>
   1bc0c:	ldr	r3, [fp, #-8]
   1bc10:	asr	r3, r3, #1
   1bc14:	mov	r2, r3
   1bc18:	ldr	r3, [fp, #-8]
   1bc1c:	add	r3, r2, r3
   1bc20:	str	r3, [fp, #-16]
   1bc24:	mov	r3, #0
   1bc28:	cmp	r3, #0
   1bc2c:	beq	1bc38 <__assert_fail@plt+0xa69c>
   1bc30:	mvn	r3, #-2147483648	; 0x80000000
   1bc34:	str	r3, [fp, #-16]
   1bc38:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1bc3c:	cmp	r3, #0
   1bc40:	blt	1bc5c <__assert_fail@plt+0xa6c0>
   1bc44:	ldr	r3, [fp, #-16]
   1bc48:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1bc4c:	cmp	r2, r3
   1bc50:	bge	1bc5c <__assert_fail@plt+0xa6c0>
   1bc54:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1bc58:	str	r3, [fp, #-16]
   1bc5c:	ldr	r3, [fp, #4]
   1bc60:	cmp	r3, #0
   1bc64:	bge	1bcf4 <__assert_fail@plt+0xa758>
   1bc68:	ldr	r3, [fp, #-16]
   1bc6c:	cmp	r3, #0
   1bc70:	bge	1bca0 <__assert_fail@plt+0xa704>
   1bc74:	ldr	r1, [fp, #4]
   1bc78:	mvn	r0, #-2147483648	; 0x80000000
   1bc7c:	bl	1e470 <__assert_fail@plt+0xced4>
   1bc80:	mov	r3, r0
   1bc84:	mov	r2, r3
   1bc88:	ldr	r3, [fp, #-16]
   1bc8c:	cmp	r2, r3
   1bc90:	movgt	r3, #1
   1bc94:	movle	r3, #0
   1bc98:	uxtb	r3, r3
   1bc9c:	b	1bd94 <__assert_fail@plt+0xa7f8>
   1bca0:	ldr	r3, [fp, #4]
   1bca4:	cmn	r3, #1
   1bca8:	bne	1bcc8 <__assert_fail@plt+0xa72c>
   1bcac:	ldr	r3, [fp, #-16]
   1bcb0:	add	r3, r3, #-2147483648	; 0x80000000
   1bcb4:	cmp	r3, #0
   1bcb8:	movgt	r3, #1
   1bcbc:	movle	r3, #0
   1bcc0:	uxtb	r3, r3
   1bcc4:	b	1bd94 <__assert_fail@plt+0xa7f8>
   1bcc8:	ldr	r1, [fp, #4]
   1bccc:	mov	r0, #-2147483648	; 0x80000000
   1bcd0:	bl	1e470 <__assert_fail@plt+0xced4>
   1bcd4:	mov	r3, r0
   1bcd8:	mov	r2, r3
   1bcdc:	ldr	r3, [fp, #-16]
   1bce0:	cmp	r2, r3
   1bce4:	movlt	r3, #1
   1bce8:	movge	r3, #0
   1bcec:	uxtb	r3, r3
   1bcf0:	b	1bd94 <__assert_fail@plt+0xa7f8>
   1bcf4:	ldr	r3, [fp, #4]
   1bcf8:	cmp	r3, #0
   1bcfc:	beq	1bd90 <__assert_fail@plt+0xa7f4>
   1bd00:	ldr	r3, [fp, #-16]
   1bd04:	cmp	r3, #0
   1bd08:	bge	1bd64 <__assert_fail@plt+0xa7c8>
   1bd0c:	ldr	r3, [fp, #-16]
   1bd10:	cmn	r3, #1
   1bd14:	bne	1bd34 <__assert_fail@plt+0xa798>
   1bd18:	ldr	r3, [fp, #4]
   1bd1c:	add	r3, r3, #-2147483648	; 0x80000000
   1bd20:	cmp	r3, #0
   1bd24:	movgt	r3, #1
   1bd28:	movle	r3, #0
   1bd2c:	uxtb	r3, r3
   1bd30:	b	1bd94 <__assert_fail@plt+0xa7f8>
   1bd34:	ldr	r3, [fp, #-16]
   1bd38:	mov	r1, r3
   1bd3c:	mov	r0, #-2147483648	; 0x80000000
   1bd40:	bl	1e470 <__assert_fail@plt+0xced4>
   1bd44:	mov	r3, r0
   1bd48:	mov	r2, r3
   1bd4c:	ldr	r3, [fp, #4]
   1bd50:	cmp	r2, r3
   1bd54:	movlt	r3, #1
   1bd58:	movge	r3, #0
   1bd5c:	uxtb	r3, r3
   1bd60:	b	1bd94 <__assert_fail@plt+0xa7f8>
   1bd64:	ldr	r1, [fp, #4]
   1bd68:	mvn	r0, #-2147483648	; 0x80000000
   1bd6c:	bl	1e470 <__assert_fail@plt+0xced4>
   1bd70:	mov	r3, r0
   1bd74:	mov	r2, r3
   1bd78:	ldr	r3, [fp, #-16]
   1bd7c:	cmp	r2, r3
   1bd80:	movlt	r3, #1
   1bd84:	movge	r3, #0
   1bd88:	uxtb	r3, r3
   1bd8c:	b	1bd94 <__assert_fail@plt+0xa7f8>
   1bd90:	mov	r3, #0
   1bd94:	cmp	r3, #0
   1bd98:	beq	1bdb8 <__assert_fail@plt+0xa81c>
   1bd9c:	ldr	r3, [fp, #-16]
   1bda0:	mov	r2, r3
   1bda4:	ldr	r3, [fp, #4]
   1bda8:	mul	r3, r3, r2
   1bdac:	str	r3, [fp, #-20]	; 0xffffffec
   1bdb0:	mov	r3, #1
   1bdb4:	b	1bdd0 <__assert_fail@plt+0xa834>
   1bdb8:	ldr	r3, [fp, #-16]
   1bdbc:	mov	r2, r3
   1bdc0:	ldr	r3, [fp, #4]
   1bdc4:	mul	r3, r3, r2
   1bdc8:	str	r3, [fp, #-20]	; 0xffffffec
   1bdcc:	mov	r3, #0
   1bdd0:	cmp	r3, #0
   1bdd4:	beq	1bde0 <__assert_fail@plt+0xa844>
   1bdd8:	mvn	r3, #-2147483648	; 0x80000000
   1bddc:	b	1bdf8 <__assert_fail@plt+0xa85c>
   1bde0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1bde4:	cmp	r3, #63	; 0x3f
   1bde8:	bgt	1bdf4 <__assert_fail@plt+0xa858>
   1bdec:	mov	r3, #64	; 0x40
   1bdf0:	b	1bdf8 <__assert_fail@plt+0xa85c>
   1bdf4:	mov	r3, #0
   1bdf8:	str	r3, [fp, #-12]
   1bdfc:	ldr	r3, [fp, #-12]
   1be00:	cmp	r3, #0
   1be04:	beq	1be40 <__assert_fail@plt+0xa8a4>
   1be08:	ldr	r1, [fp, #4]
   1be0c:	ldr	r0, [fp, #-12]
   1be10:	bl	1e470 <__assert_fail@plt+0xced4>
   1be14:	mov	r3, r0
   1be18:	str	r3, [fp, #-16]
   1be1c:	ldr	r3, [fp, #-12]
   1be20:	ldr	r1, [fp, #4]
   1be24:	mov	r0, r3
   1be28:	bl	1e690 <__assert_fail@plt+0xd0f4>
   1be2c:	mov	r3, r1
   1be30:	mov	r2, r3
   1be34:	ldr	r3, [fp, #-12]
   1be38:	sub	r3, r3, r2
   1be3c:	str	r3, [fp, #-20]	; 0xffffffec
   1be40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1be44:	cmp	r3, #0
   1be48:	bne	1be58 <__assert_fail@plt+0xa8bc>
   1be4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1be50:	mov	r2, #0
   1be54:	str	r2, [r3]
   1be58:	ldr	r2, [fp, #-16]
   1be5c:	ldr	r3, [fp, #-8]
   1be60:	sub	r2, r2, r3
   1be64:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1be68:	cmp	r2, r3
   1be6c:	bge	1c0a4 <__assert_fail@plt+0xab08>
   1be70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1be74:	cmp	r3, #0
   1be78:	bge	1be9c <__assert_fail@plt+0xa900>
   1be7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1be80:	rsb	r2, r3, #-2147483648	; 0x80000000
   1be84:	ldr	r3, [fp, #-8]
   1be88:	cmp	r2, r3
   1be8c:	movgt	r3, #1
   1be90:	movle	r3, #0
   1be94:	uxtb	r3, r3
   1be98:	b	1bee8 <__assert_fail@plt+0xa94c>
   1be9c:	ldr	r3, [fp, #-8]
   1bea0:	cmp	r3, #0
   1bea4:	bge	1bec8 <__assert_fail@plt+0xa92c>
   1bea8:	ldr	r3, [fp, #-8]
   1beac:	rsb	r2, r3, #-2147483648	; 0x80000000
   1beb0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1beb4:	cmp	r2, r3
   1beb8:	movgt	r3, #1
   1bebc:	movle	r3, #0
   1bec0:	uxtb	r3, r3
   1bec4:	b	1bee8 <__assert_fail@plt+0xa94c>
   1bec8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1becc:	mvn	r3, #-2147483648	; 0x80000000
   1bed0:	sub	r3, r3, r2
   1bed4:	ldr	r2, [fp, #-8]
   1bed8:	cmp	r3, r2
   1bedc:	movlt	r3, #1
   1bee0:	movge	r3, #0
   1bee4:	uxtb	r3, r3
   1bee8:	cmp	r3, #0
   1beec:	beq	1bf04 <__assert_fail@plt+0xa968>
   1bef0:	ldr	r2, [fp, #-8]
   1bef4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bef8:	add	r3, r2, r3
   1befc:	str	r3, [fp, #-16]
   1bf00:	b	1c0a0 <__assert_fail@plt+0xab04>
   1bf04:	ldr	r2, [fp, #-8]
   1bf08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1bf0c:	add	r3, r2, r3
   1bf10:	str	r3, [fp, #-16]
   1bf14:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1bf18:	cmp	r3, #0
   1bf1c:	blt	1bf30 <__assert_fail@plt+0xa994>
   1bf20:	ldr	r3, [fp, #-16]
   1bf24:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1bf28:	cmp	r2, r3
   1bf2c:	blt	1c0a0 <__assert_fail@plt+0xab04>
   1bf30:	ldr	r3, [fp, #4]
   1bf34:	cmp	r3, #0
   1bf38:	bge	1bfc8 <__assert_fail@plt+0xaa2c>
   1bf3c:	ldr	r3, [fp, #-16]
   1bf40:	cmp	r3, #0
   1bf44:	bge	1bf74 <__assert_fail@plt+0xa9d8>
   1bf48:	ldr	r1, [fp, #4]
   1bf4c:	mvn	r0, #-2147483648	; 0x80000000
   1bf50:	bl	1e470 <__assert_fail@plt+0xced4>
   1bf54:	mov	r3, r0
   1bf58:	mov	r2, r3
   1bf5c:	ldr	r3, [fp, #-16]
   1bf60:	cmp	r2, r3
   1bf64:	movgt	r3, #1
   1bf68:	movle	r3, #0
   1bf6c:	uxtb	r3, r3
   1bf70:	b	1c068 <__assert_fail@plt+0xaacc>
   1bf74:	ldr	r3, [fp, #4]
   1bf78:	cmn	r3, #1
   1bf7c:	bne	1bf9c <__assert_fail@plt+0xaa00>
   1bf80:	ldr	r3, [fp, #-16]
   1bf84:	add	r3, r3, #-2147483648	; 0x80000000
   1bf88:	cmp	r3, #0
   1bf8c:	movgt	r3, #1
   1bf90:	movle	r3, #0
   1bf94:	uxtb	r3, r3
   1bf98:	b	1c068 <__assert_fail@plt+0xaacc>
   1bf9c:	ldr	r1, [fp, #4]
   1bfa0:	mov	r0, #-2147483648	; 0x80000000
   1bfa4:	bl	1e470 <__assert_fail@plt+0xced4>
   1bfa8:	mov	r3, r0
   1bfac:	mov	r2, r3
   1bfb0:	ldr	r3, [fp, #-16]
   1bfb4:	cmp	r2, r3
   1bfb8:	movlt	r3, #1
   1bfbc:	movge	r3, #0
   1bfc0:	uxtb	r3, r3
   1bfc4:	b	1c068 <__assert_fail@plt+0xaacc>
   1bfc8:	ldr	r3, [fp, #4]
   1bfcc:	cmp	r3, #0
   1bfd0:	beq	1c064 <__assert_fail@plt+0xaac8>
   1bfd4:	ldr	r3, [fp, #-16]
   1bfd8:	cmp	r3, #0
   1bfdc:	bge	1c038 <__assert_fail@plt+0xaa9c>
   1bfe0:	ldr	r3, [fp, #-16]
   1bfe4:	cmn	r3, #1
   1bfe8:	bne	1c008 <__assert_fail@plt+0xaa6c>
   1bfec:	ldr	r3, [fp, #4]
   1bff0:	add	r3, r3, #-2147483648	; 0x80000000
   1bff4:	cmp	r3, #0
   1bff8:	movgt	r3, #1
   1bffc:	movle	r3, #0
   1c000:	uxtb	r3, r3
   1c004:	b	1c068 <__assert_fail@plt+0xaacc>
   1c008:	ldr	r3, [fp, #-16]
   1c00c:	mov	r1, r3
   1c010:	mov	r0, #-2147483648	; 0x80000000
   1c014:	bl	1e470 <__assert_fail@plt+0xced4>
   1c018:	mov	r3, r0
   1c01c:	mov	r2, r3
   1c020:	ldr	r3, [fp, #4]
   1c024:	cmp	r2, r3
   1c028:	movlt	r3, #1
   1c02c:	movge	r3, #0
   1c030:	uxtb	r3, r3
   1c034:	b	1c068 <__assert_fail@plt+0xaacc>
   1c038:	ldr	r1, [fp, #4]
   1c03c:	mvn	r0, #-2147483648	; 0x80000000
   1c040:	bl	1e470 <__assert_fail@plt+0xced4>
   1c044:	mov	r3, r0
   1c048:	mov	r2, r3
   1c04c:	ldr	r3, [fp, #-16]
   1c050:	cmp	r2, r3
   1c054:	movlt	r3, #1
   1c058:	movge	r3, #0
   1c05c:	uxtb	r3, r3
   1c060:	b	1c068 <__assert_fail@plt+0xaacc>
   1c064:	mov	r3, #0
   1c068:	cmp	r3, #0
   1c06c:	beq	1c088 <__assert_fail@plt+0xaaec>
   1c070:	ldr	r3, [fp, #-16]
   1c074:	mov	r2, r3
   1c078:	ldr	r3, [fp, #4]
   1c07c:	mul	r3, r3, r2
   1c080:	str	r3, [fp, #-20]	; 0xffffffec
   1c084:	b	1c0a0 <__assert_fail@plt+0xab04>
   1c088:	ldr	r3, [fp, #-16]
   1c08c:	mov	r2, r3
   1c090:	ldr	r3, [fp, #4]
   1c094:	mul	r3, r3, r2
   1c098:	str	r3, [fp, #-20]	; 0xffffffec
   1c09c:	b	1c0a4 <__assert_fail@plt+0xab08>
   1c0a0:	bl	1c2c8 <__assert_fail@plt+0xad2c>
   1c0a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c0a8:	mov	r1, r3
   1c0ac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1c0b0:	bl	1b83c <__assert_fail@plt+0xa2a0>
   1c0b4:	str	r0, [fp, #-24]	; 0xffffffe8
   1c0b8:	ldr	r2, [fp, #-16]
   1c0bc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c0c0:	str	r2, [r3]
   1c0c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c0c8:	mov	r0, r3
   1c0cc:	sub	sp, fp, #4
   1c0d0:	pop	{fp, pc}
   1c0d4:	push	{fp, lr}
   1c0d8:	add	fp, sp, #4
   1c0dc:	sub	sp, sp, #8
   1c0e0:	str	r0, [fp, #-8]
   1c0e4:	mov	r1, #1
   1c0e8:	ldr	r0, [fp, #-8]
   1c0ec:	bl	1c12c <__assert_fail@plt+0xab90>
   1c0f0:	mov	r3, r0
   1c0f4:	mov	r0, r3
   1c0f8:	sub	sp, fp, #4
   1c0fc:	pop	{fp, pc}
   1c100:	push	{fp, lr}
   1c104:	add	fp, sp, #4
   1c108:	sub	sp, sp, #8
   1c10c:	str	r0, [fp, #-8]
   1c110:	mov	r1, #1
   1c114:	ldr	r0, [fp, #-8]
   1c118:	bl	1c168 <__assert_fail@plt+0xabcc>
   1c11c:	mov	r3, r0
   1c120:	mov	r0, r3
   1c124:	sub	sp, fp, #4
   1c128:	pop	{fp, pc}
   1c12c:	push	{fp, lr}
   1c130:	add	fp, sp, #4
   1c134:	sub	sp, sp, #8
   1c138:	str	r0, [fp, #-8]
   1c13c:	str	r1, [fp, #-12]
   1c140:	ldr	r1, [fp, #-12]
   1c144:	ldr	r0, [fp, #-8]
   1c148:	bl	1ca18 <__assert_fail@plt+0xb47c>
   1c14c:	mov	r3, r0
   1c150:	mov	r0, r3
   1c154:	bl	1b77c <__assert_fail@plt+0xa1e0>
   1c158:	mov	r3, r0
   1c15c:	mov	r0, r3
   1c160:	sub	sp, fp, #4
   1c164:	pop	{fp, pc}
   1c168:	push	{fp, lr}
   1c16c:	add	fp, sp, #4
   1c170:	sub	sp, sp, #8
   1c174:	str	r0, [fp, #-8]
   1c178:	str	r1, [fp, #-12]
   1c17c:	ldr	r1, [fp, #-12]
   1c180:	ldr	r0, [fp, #-8]
   1c184:	bl	1d684 <__assert_fail@plt+0xc0e8>
   1c188:	mov	r3, r0
   1c18c:	mov	r0, r3
   1c190:	bl	1b77c <__assert_fail@plt+0xa1e0>
   1c194:	mov	r3, r0
   1c198:	mov	r0, r3
   1c19c:	sub	sp, fp, #4
   1c1a0:	pop	{fp, pc}
   1c1a4:	push	{fp, lr}
   1c1a8:	add	fp, sp, #4
   1c1ac:	sub	sp, sp, #8
   1c1b0:	str	r0, [fp, #-8]
   1c1b4:	str	r1, [fp, #-12]
   1c1b8:	ldr	r0, [fp, #-12]
   1c1bc:	bl	1b7ac <__assert_fail@plt+0xa210>
   1c1c0:	mov	r3, r0
   1c1c4:	ldr	r2, [fp, #-12]
   1c1c8:	ldr	r1, [fp, #-8]
   1c1cc:	mov	r0, r3
   1c1d0:	bl	11248 <memcpy@plt>
   1c1d4:	mov	r3, r0
   1c1d8:	mov	r0, r3
   1c1dc:	sub	sp, fp, #4
   1c1e0:	pop	{fp, pc}
   1c1e4:	push	{fp, lr}
   1c1e8:	add	fp, sp, #4
   1c1ec:	sub	sp, sp, #8
   1c1f0:	str	r0, [fp, #-8]
   1c1f4:	str	r1, [fp, #-12]
   1c1f8:	ldr	r0, [fp, #-12]
   1c1fc:	bl	1b7e0 <__assert_fail@plt+0xa244>
   1c200:	mov	r3, r0
   1c204:	mov	r0, r3
   1c208:	ldr	r3, [fp, #-12]
   1c20c:	mov	r2, r3
   1c210:	ldr	r1, [fp, #-8]
   1c214:	bl	11248 <memcpy@plt>
   1c218:	mov	r3, r0
   1c21c:	mov	r0, r3
   1c220:	sub	sp, fp, #4
   1c224:	pop	{fp, pc}
   1c228:	push	{fp, lr}
   1c22c:	add	fp, sp, #4
   1c230:	sub	sp, sp, #16
   1c234:	str	r0, [fp, #-16]
   1c238:	str	r1, [fp, #-20]	; 0xffffffec
   1c23c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c240:	add	r3, r3, #1
   1c244:	mov	r0, r3
   1c248:	bl	1b7e0 <__assert_fail@plt+0xa244>
   1c24c:	mov	r3, r0
   1c250:	str	r3, [fp, #-8]
   1c254:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c258:	ldr	r2, [fp, #-8]
   1c25c:	add	r3, r2, r3
   1c260:	mov	r2, #0
   1c264:	strb	r2, [r3]
   1c268:	ldr	r3, [fp, #-20]	; 0xffffffec
   1c26c:	mov	r2, r3
   1c270:	ldr	r1, [fp, #-16]
   1c274:	ldr	r0, [fp, #-8]
   1c278:	bl	11248 <memcpy@plt>
   1c27c:	mov	r3, r0
   1c280:	mov	r0, r3
   1c284:	sub	sp, fp, #4
   1c288:	pop	{fp, pc}
   1c28c:	push	{fp, lr}
   1c290:	add	fp, sp, #4
   1c294:	sub	sp, sp, #8
   1c298:	str	r0, [fp, #-8]
   1c29c:	ldr	r0, [fp, #-8]
   1c2a0:	bl	113ec <strlen@plt>
   1c2a4:	mov	r3, r0
   1c2a8:	add	r3, r3, #1
   1c2ac:	mov	r1, r3
   1c2b0:	ldr	r0, [fp, #-8]
   1c2b4:	bl	1c1a4 <__assert_fail@plt+0xac08>
   1c2b8:	mov	r3, r0
   1c2bc:	mov	r0, r3
   1c2c0:	sub	sp, fp, #4
   1c2c4:	pop	{fp, pc}
   1c2c8:	push	{r4, r5, fp, lr}
   1c2cc:	add	fp, sp, #12
   1c2d0:	ldr	r3, [pc, #32]	; 1c2f8 <__assert_fail@plt+0xad5c>
   1c2d4:	ldr	r4, [r3]
   1c2d8:	ldr	r0, [pc, #28]	; 1c2fc <__assert_fail@plt+0xad60>
   1c2dc:	bl	113d4 <gettext@plt>
   1c2e0:	mov	r3, r0
   1c2e4:	ldr	r2, [pc, #20]	; 1c300 <__assert_fail@plt+0xad64>
   1c2e8:	mov	r1, #0
   1c2ec:	mov	r0, r4
   1c2f0:	bl	11344 <error@plt>
   1c2f4:	bl	1156c <abort@plt>
   1c2f8:	andeq	r1, r3, r8, ror r1
   1c2fc:	andeq	r0, r2, r0, lsr fp
   1c300:	andeq	r0, r2, r4, asr #22
   1c304:	push	{fp, lr}
   1c308:	add	fp, sp, #4
   1c30c:	sub	sp, sp, #8
   1c310:	str	r0, [fp, #-8]
   1c314:	str	r1, [fp, #-12]
   1c318:	ldr	r3, [fp, #-12]
   1c31c:	mov	r1, r3
   1c320:	mvn	r0, #0
   1c324:	bl	1e264 <__assert_fail@plt+0xccc8>
   1c328:	mov	r3, r0
   1c32c:	mov	r2, r3
   1c330:	ldr	r3, [fp, #-8]
   1c334:	ldr	r3, [r3]
   1c338:	cmp	r2, r3
   1c33c:	bcs	1c354 <__assert_fail@plt+0xadb8>
   1c340:	ldr	r3, [fp, #-8]
   1c344:	mvn	r2, #0
   1c348:	str	r2, [r3]
   1c34c:	mov	r3, #1
   1c350:	b	1c370 <__assert_fail@plt+0xadd4>
   1c354:	ldr	r3, [fp, #-8]
   1c358:	ldr	r3, [r3]
   1c35c:	ldr	r2, [fp, #-12]
   1c360:	mul	r2, r2, r3
   1c364:	ldr	r3, [fp, #-8]
   1c368:	str	r2, [r3]
   1c36c:	mov	r3, #0
   1c370:	mov	r0, r3
   1c374:	sub	sp, fp, #4
   1c378:	pop	{fp, pc}
   1c37c:	push	{fp, lr}
   1c380:	add	fp, sp, #4
   1c384:	sub	sp, sp, #24
   1c388:	str	r0, [fp, #-16]
   1c38c:	str	r1, [fp, #-20]	; 0xffffffec
   1c390:	str	r2, [fp, #-24]	; 0xffffffe8
   1c394:	mov	r3, #0
   1c398:	str	r3, [fp, #-8]
   1c39c:	b	1c3bc <__assert_fail@plt+0xae20>
   1c3a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c3a4:	ldr	r0, [fp, #-16]
   1c3a8:	bl	1c304 <__assert_fail@plt+0xad68>
   1c3ac:	mov	r2, r0
   1c3b0:	ldr	r3, [fp, #-8]
   1c3b4:	orr	r3, r3, r2
   1c3b8:	str	r3, [fp, #-8]
   1c3bc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c3c0:	sub	r2, r3, #1
   1c3c4:	str	r2, [fp, #-24]	; 0xffffffe8
   1c3c8:	cmp	r3, #0
   1c3cc:	bne	1c3a0 <__assert_fail@plt+0xae04>
   1c3d0:	ldr	r3, [fp, #-8]
   1c3d4:	mov	r0, r3
   1c3d8:	sub	sp, fp, #4
   1c3dc:	pop	{fp, pc}
   1c3e0:	push	{fp, lr}
   1c3e4:	add	fp, sp, #4
   1c3e8:	sub	sp, sp, #56	; 0x38
   1c3ec:	str	r0, [fp, #-48]	; 0xffffffd0
   1c3f0:	str	r1, [fp, #-52]	; 0xffffffcc
   1c3f4:	str	r2, [fp, #-56]	; 0xffffffc8
   1c3f8:	str	r3, [fp, #-60]	; 0xffffffc4
   1c3fc:	mov	r3, #0
   1c400:	str	r3, [fp, #-8]
   1c404:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1c408:	cmp	r3, #0
   1c40c:	blt	1c41c <__assert_fail@plt+0xae80>
   1c410:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1c414:	cmp	r3, #36	; 0x24
   1c418:	ble	1c430 <__assert_fail@plt+0xae94>
   1c41c:	ldr	r3, [pc, #1512]	; 1ca0c <__assert_fail@plt+0xb470>
   1c420:	mov	r2, #84	; 0x54
   1c424:	ldr	r1, [pc, #1508]	; 1ca10 <__assert_fail@plt+0xb474>
   1c428:	ldr	r0, [pc, #1508]	; 1ca14 <__assert_fail@plt+0xb478>
   1c42c:	bl	1159c <__assert_fail@plt>
   1c430:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1c434:	cmp	r3, #0
   1c438:	bne	1c444 <__assert_fail@plt+0xaea8>
   1c43c:	sub	r3, fp, #36	; 0x24
   1c440:	b	1c448 <__assert_fail@plt+0xaeac>
   1c444:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1c448:	str	r3, [fp, #-32]	; 0xffffffe0
   1c44c:	bl	1141c <__errno_location@plt>
   1c450:	mov	r2, r0
   1c454:	mov	r3, #0
   1c458:	str	r3, [r2]
   1c45c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1c460:	str	r3, [fp, #-12]
   1c464:	ldr	r3, [fp, #-12]
   1c468:	ldrb	r3, [r3]
   1c46c:	strb	r3, [fp, #-13]
   1c470:	b	1c48c <__assert_fail@plt+0xaef0>
   1c474:	ldr	r3, [fp, #-12]
   1c478:	add	r3, r3, #1
   1c47c:	str	r3, [fp, #-12]
   1c480:	ldr	r3, [fp, #-12]
   1c484:	ldrb	r3, [r3]
   1c488:	strb	r3, [fp, #-13]
   1c48c:	bl	113b0 <__ctype_b_loc@plt>
   1c490:	mov	r3, r0
   1c494:	ldr	r2, [r3]
   1c498:	ldrb	r3, [fp, #-13]
   1c49c:	lsl	r3, r3, #1
   1c4a0:	add	r3, r2, r3
   1c4a4:	ldrh	r3, [r3]
   1c4a8:	and	r3, r3, #8192	; 0x2000
   1c4ac:	cmp	r3, #0
   1c4b0:	bne	1c474 <__assert_fail@plt+0xaed8>
   1c4b4:	ldrb	r3, [fp, #-13]
   1c4b8:	cmp	r3, #45	; 0x2d
   1c4bc:	bne	1c4c8 <__assert_fail@plt+0xaf2c>
   1c4c0:	mov	r3, #4
   1c4c4:	b	1ca00 <__assert_fail@plt+0xb464>
   1c4c8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1c4cc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1c4d0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1c4d4:	bl	113e0 <strtoul@plt>
   1c4d8:	mov	r3, r0
   1c4dc:	str	r3, [fp, #-40]	; 0xffffffd8
   1c4e0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c4e4:	ldr	r2, [r3]
   1c4e8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1c4ec:	cmp	r2, r3
   1c4f0:	bne	1c54c <__assert_fail@plt+0xafb0>
   1c4f4:	ldr	r3, [fp, #4]
   1c4f8:	cmp	r3, #0
   1c4fc:	beq	1c544 <__assert_fail@plt+0xafa8>
   1c500:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c504:	ldr	r3, [r3]
   1c508:	ldrb	r3, [r3]
   1c50c:	cmp	r3, #0
   1c510:	beq	1c544 <__assert_fail@plt+0xafa8>
   1c514:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c518:	ldr	r3, [r3]
   1c51c:	ldrb	r3, [r3]
   1c520:	mov	r1, r3
   1c524:	ldr	r0, [fp, #4]
   1c528:	bl	113f8 <strchr@plt>
   1c52c:	mov	r3, r0
   1c530:	cmp	r3, #0
   1c534:	beq	1c544 <__assert_fail@plt+0xafa8>
   1c538:	mov	r3, #1
   1c53c:	str	r3, [fp, #-40]	; 0xffffffd8
   1c540:	b	1c584 <__assert_fail@plt+0xafe8>
   1c544:	mov	r3, #4
   1c548:	b	1ca00 <__assert_fail@plt+0xb464>
   1c54c:	bl	1141c <__errno_location@plt>
   1c550:	mov	r3, r0
   1c554:	ldr	r3, [r3]
   1c558:	cmp	r3, #0
   1c55c:	beq	1c584 <__assert_fail@plt+0xafe8>
   1c560:	bl	1141c <__errno_location@plt>
   1c564:	mov	r3, r0
   1c568:	ldr	r3, [r3]
   1c56c:	cmp	r3, #34	; 0x22
   1c570:	beq	1c57c <__assert_fail@plt+0xafe0>
   1c574:	mov	r3, #4
   1c578:	b	1ca00 <__assert_fail@plt+0xb464>
   1c57c:	mov	r3, #1
   1c580:	str	r3, [fp, #-8]
   1c584:	ldr	r3, [fp, #4]
   1c588:	cmp	r3, #0
   1c58c:	bne	1c5a4 <__assert_fail@plt+0xb008>
   1c590:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c594:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1c598:	str	r2, [r3]
   1c59c:	ldr	r3, [fp, #-8]
   1c5a0:	b	1ca00 <__assert_fail@plt+0xb464>
   1c5a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c5a8:	ldr	r3, [r3]
   1c5ac:	ldrb	r3, [r3]
   1c5b0:	cmp	r3, #0
   1c5b4:	beq	1c9f0 <__assert_fail@plt+0xb454>
   1c5b8:	mov	r3, #1024	; 0x400
   1c5bc:	str	r3, [fp, #-20]	; 0xffffffec
   1c5c0:	mov	r3, #1
   1c5c4:	str	r3, [fp, #-24]	; 0xffffffe8
   1c5c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c5cc:	ldr	r3, [r3]
   1c5d0:	ldrb	r3, [r3]
   1c5d4:	mov	r1, r3
   1c5d8:	ldr	r0, [fp, #4]
   1c5dc:	bl	113f8 <strchr@plt>
   1c5e0:	mov	r3, r0
   1c5e4:	cmp	r3, #0
   1c5e8:	bne	1c604 <__assert_fail@plt+0xb068>
   1c5ec:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c5f0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1c5f4:	str	r2, [r3]
   1c5f8:	ldr	r3, [fp, #-8]
   1c5fc:	orr	r3, r3, #2
   1c600:	b	1ca00 <__assert_fail@plt+0xb464>
   1c604:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c608:	ldr	r3, [r3]
   1c60c:	ldrb	r3, [r3]
   1c610:	sub	r3, r3, #69	; 0x45
   1c614:	cmp	r3, #47	; 0x2f
   1c618:	ldrls	pc, [pc, r3, lsl #2]
   1c61c:	b	1c768 <__assert_fail@plt+0xb1cc>
   1c620:	andeq	ip, r1, r0, ror #13
   1c624:	andeq	ip, r1, r8, ror #14
   1c628:	andeq	ip, r1, r0, ror #13
   1c62c:	andeq	ip, r1, r8, ror #14
   1c630:	andeq	ip, r1, r8, ror #14
   1c634:	andeq	ip, r1, r8, ror #14
   1c638:	andeq	ip, r1, r0, ror #13
   1c63c:	andeq	ip, r1, r8, ror #14
   1c640:	andeq	ip, r1, r0, ror #13
   1c644:	andeq	ip, r1, r8, ror #14
   1c648:	andeq	ip, r1, r8, ror #14
   1c64c:	andeq	ip, r1, r0, ror #13
   1c650:	andeq	ip, r1, r8, ror #14
   1c654:	andeq	ip, r1, r8, ror #14
   1c658:	andeq	ip, r1, r8, ror #14
   1c65c:	andeq	ip, r1, r0, ror #13
   1c660:	andeq	ip, r1, r8, ror #14
   1c664:	andeq	ip, r1, r8, ror #14
   1c668:	andeq	ip, r1, r8, ror #14
   1c66c:	andeq	ip, r1, r8, ror #14
   1c670:	andeq	ip, r1, r0, ror #13
   1c674:	andeq	ip, r1, r0, ror #13
   1c678:	andeq	ip, r1, r8, ror #14
   1c67c:	andeq	ip, r1, r8, ror #14
   1c680:	andeq	ip, r1, r8, ror #14
   1c684:	andeq	ip, r1, r8, ror #14
   1c688:	andeq	ip, r1, r8, ror #14
   1c68c:	andeq	ip, r1, r8, ror #14
   1c690:	andeq	ip, r1, r8, ror #14
   1c694:	andeq	ip, r1, r8, ror #14
   1c698:	andeq	ip, r1, r8, ror #14
   1c69c:	andeq	ip, r1, r8, ror #14
   1c6a0:	andeq	ip, r1, r8, ror #14
   1c6a4:	andeq	ip, r1, r8, ror #14
   1c6a8:	andeq	ip, r1, r0, ror #13
   1c6ac:	andeq	ip, r1, r8, ror #14
   1c6b0:	andeq	ip, r1, r8, ror #14
   1c6b4:	andeq	ip, r1, r8, ror #14
   1c6b8:	andeq	ip, r1, r0, ror #13
   1c6bc:	andeq	ip, r1, r8, ror #14
   1c6c0:	andeq	ip, r1, r0, ror #13
   1c6c4:	andeq	ip, r1, r8, ror #14
   1c6c8:	andeq	ip, r1, r8, ror #14
   1c6cc:	andeq	ip, r1, r8, ror #14
   1c6d0:	andeq	ip, r1, r8, ror #14
   1c6d4:	andeq	ip, r1, r8, ror #14
   1c6d8:	andeq	ip, r1, r8, ror #14
   1c6dc:	andeq	ip, r1, r0, ror #13
   1c6e0:	mov	r1, #48	; 0x30
   1c6e4:	ldr	r0, [fp, #4]
   1c6e8:	bl	113f8 <strchr@plt>
   1c6ec:	mov	r3, r0
   1c6f0:	cmp	r3, #0
   1c6f4:	beq	1c768 <__assert_fail@plt+0xb1cc>
   1c6f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c6fc:	ldr	r3, [r3]
   1c700:	add	r3, r3, #1
   1c704:	ldrb	r3, [r3]
   1c708:	cmp	r3, #68	; 0x44
   1c70c:	beq	1c74c <__assert_fail@plt+0xb1b0>
   1c710:	cmp	r3, #105	; 0x69
   1c714:	beq	1c724 <__assert_fail@plt+0xb188>
   1c718:	cmp	r3, #66	; 0x42
   1c71c:	beq	1c74c <__assert_fail@plt+0xb1b0>
   1c720:	b	1c768 <__assert_fail@plt+0xb1cc>
   1c724:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c728:	ldr	r3, [r3]
   1c72c:	add	r3, r3, #2
   1c730:	ldrb	r3, [r3]
   1c734:	cmp	r3, #66	; 0x42
   1c738:	bne	1c764 <__assert_fail@plt+0xb1c8>
   1c73c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c740:	add	r3, r3, #2
   1c744:	str	r3, [fp, #-24]	; 0xffffffe8
   1c748:	b	1c764 <__assert_fail@plt+0xb1c8>
   1c74c:	mov	r3, #1000	; 0x3e8
   1c750:	str	r3, [fp, #-20]	; 0xffffffec
   1c754:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c758:	add	r3, r3, #1
   1c75c:	str	r3, [fp, #-24]	; 0xffffffe8
   1c760:	b	1c768 <__assert_fail@plt+0xb1cc>
   1c764:	nop			; (mov r0, r0)
   1c768:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c76c:	ldr	r3, [r3]
   1c770:	ldrb	r3, [r3]
   1c774:	sub	r3, r3, #66	; 0x42
   1c778:	cmp	r3, #53	; 0x35
   1c77c:	ldrls	pc, [pc, r3, lsl #2]
   1c780:	b	1c990 <__assert_fail@plt+0xb3f4>
   1c784:	andeq	ip, r1, r4, ror r8
   1c788:	muleq	r1, r0, r9
   1c78c:	muleq	r1, r0, r9
   1c790:	muleq	r1, r8, r8
   1c794:	muleq	r1, r0, r9
   1c798:			; <UNDEFINED> instruction: 0x0001c8b4
   1c79c:	muleq	r1, r0, r9
   1c7a0:	muleq	r1, r0, r9
   1c7a4:	muleq	r1, r0, r9
   1c7a8:	ldrdeq	ip, [r1], -r0
   1c7ac:	muleq	r1, r0, r9
   1c7b0:	andeq	ip, r1, ip, ror #17
   1c7b4:	muleq	r1, r0, r9
   1c7b8:	muleq	r1, r0, r9
   1c7bc:	andeq	ip, r1, r8, lsl #18
   1c7c0:	muleq	r1, r0, r9
   1c7c4:	muleq	r1, r0, r9
   1c7c8:	muleq	r1, r0, r9
   1c7cc:	andeq	ip, r1, r4, lsr #18
   1c7d0:	muleq	r1, r0, r9
   1c7d4:	muleq	r1, r0, r9
   1c7d8:	muleq	r1, r0, r9
   1c7dc:	muleq	r1, r0, r9
   1c7e0:	andeq	ip, r1, r8, asr r9
   1c7e4:	andeq	ip, r1, r4, ror r9
   1c7e8:	muleq	r1, r0, r9
   1c7ec:	muleq	r1, r0, r9
   1c7f0:	muleq	r1, r0, r9
   1c7f4:	muleq	r1, r0, r9
   1c7f8:	muleq	r1, r0, r9
   1c7fc:	muleq	r1, r0, r9
   1c800:	muleq	r1, r0, r9
   1c804:	andeq	ip, r1, ip, asr r8
   1c808:	andeq	ip, r1, ip, lsl #17
   1c80c:	muleq	r1, r0, r9
   1c810:	muleq	r1, r0, r9
   1c814:	muleq	r1, r0, r9
   1c818:			; <UNDEFINED> instruction: 0x0001c8b4
   1c81c:	muleq	r1, r0, r9
   1c820:	muleq	r1, r0, r9
   1c824:	muleq	r1, r0, r9
   1c828:	ldrdeq	ip, [r1], -r0
   1c82c:	muleq	r1, r0, r9
   1c830:	andeq	ip, r1, ip, ror #17
   1c834:	muleq	r1, r0, r9
   1c838:	muleq	r1, r0, r9
   1c83c:	muleq	r1, r0, r9
   1c840:	muleq	r1, r0, r9
   1c844:	muleq	r1, r0, r9
   1c848:	muleq	r1, r0, r9
   1c84c:	andeq	ip, r1, r4, lsr #18
   1c850:	muleq	r1, r0, r9
   1c854:	muleq	r1, r0, r9
   1c858:	andeq	ip, r1, r0, asr #18
   1c85c:	sub	r3, fp, #40	; 0x28
   1c860:	mov	r1, #512	; 0x200
   1c864:	mov	r0, r3
   1c868:	bl	1c304 <__assert_fail@plt+0xad68>
   1c86c:	str	r0, [fp, #-28]	; 0xffffffe4
   1c870:	b	1c9a8 <__assert_fail@plt+0xb40c>
   1c874:	sub	r3, fp, #40	; 0x28
   1c878:	mov	r1, #1024	; 0x400
   1c87c:	mov	r0, r3
   1c880:	bl	1c304 <__assert_fail@plt+0xad68>
   1c884:	str	r0, [fp, #-28]	; 0xffffffe4
   1c888:	b	1c9a8 <__assert_fail@plt+0xb40c>
   1c88c:	mov	r3, #0
   1c890:	str	r3, [fp, #-28]	; 0xffffffe4
   1c894:	b	1c9a8 <__assert_fail@plt+0xb40c>
   1c898:	sub	r3, fp, #40	; 0x28
   1c89c:	mov	r2, #6
   1c8a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c8a4:	mov	r0, r3
   1c8a8:	bl	1c37c <__assert_fail@plt+0xade0>
   1c8ac:	str	r0, [fp, #-28]	; 0xffffffe4
   1c8b0:	b	1c9a8 <__assert_fail@plt+0xb40c>
   1c8b4:	sub	r3, fp, #40	; 0x28
   1c8b8:	mov	r2, #3
   1c8bc:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c8c0:	mov	r0, r3
   1c8c4:	bl	1c37c <__assert_fail@plt+0xade0>
   1c8c8:	str	r0, [fp, #-28]	; 0xffffffe4
   1c8cc:	b	1c9a8 <__assert_fail@plt+0xb40c>
   1c8d0:	sub	r3, fp, #40	; 0x28
   1c8d4:	mov	r2, #1
   1c8d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c8dc:	mov	r0, r3
   1c8e0:	bl	1c37c <__assert_fail@plt+0xade0>
   1c8e4:	str	r0, [fp, #-28]	; 0xffffffe4
   1c8e8:	b	1c9a8 <__assert_fail@plt+0xb40c>
   1c8ec:	sub	r3, fp, #40	; 0x28
   1c8f0:	mov	r2, #2
   1c8f4:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c8f8:	mov	r0, r3
   1c8fc:	bl	1c37c <__assert_fail@plt+0xade0>
   1c900:	str	r0, [fp, #-28]	; 0xffffffe4
   1c904:	b	1c9a8 <__assert_fail@plt+0xb40c>
   1c908:	sub	r3, fp, #40	; 0x28
   1c90c:	mov	r2, #5
   1c910:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c914:	mov	r0, r3
   1c918:	bl	1c37c <__assert_fail@plt+0xade0>
   1c91c:	str	r0, [fp, #-28]	; 0xffffffe4
   1c920:	b	1c9a8 <__assert_fail@plt+0xb40c>
   1c924:	sub	r3, fp, #40	; 0x28
   1c928:	mov	r2, #4
   1c92c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c930:	mov	r0, r3
   1c934:	bl	1c37c <__assert_fail@plt+0xade0>
   1c938:	str	r0, [fp, #-28]	; 0xffffffe4
   1c93c:	b	1c9a8 <__assert_fail@plt+0xb40c>
   1c940:	sub	r3, fp, #40	; 0x28
   1c944:	mov	r1, #2
   1c948:	mov	r0, r3
   1c94c:	bl	1c304 <__assert_fail@plt+0xad68>
   1c950:	str	r0, [fp, #-28]	; 0xffffffe4
   1c954:	b	1c9a8 <__assert_fail@plt+0xb40c>
   1c958:	sub	r3, fp, #40	; 0x28
   1c95c:	mov	r2, #8
   1c960:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c964:	mov	r0, r3
   1c968:	bl	1c37c <__assert_fail@plt+0xade0>
   1c96c:	str	r0, [fp, #-28]	; 0xffffffe4
   1c970:	b	1c9a8 <__assert_fail@plt+0xb40c>
   1c974:	sub	r3, fp, #40	; 0x28
   1c978:	mov	r2, #7
   1c97c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1c980:	mov	r0, r3
   1c984:	bl	1c37c <__assert_fail@plt+0xade0>
   1c988:	str	r0, [fp, #-28]	; 0xffffffe4
   1c98c:	b	1c9a8 <__assert_fail@plt+0xb40c>
   1c990:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c994:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1c998:	str	r2, [r3]
   1c99c:	ldr	r3, [fp, #-8]
   1c9a0:	orr	r3, r3, #2
   1c9a4:	b	1ca00 <__assert_fail@plt+0xb464>
   1c9a8:	ldr	r2, [fp, #-8]
   1c9ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1c9b0:	orr	r3, r2, r3
   1c9b4:	str	r3, [fp, #-8]
   1c9b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c9bc:	ldr	r2, [r3]
   1c9c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1c9c4:	add	r2, r2, r3
   1c9c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c9cc:	str	r2, [r3]
   1c9d0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1c9d4:	ldr	r3, [r3]
   1c9d8:	ldrb	r3, [r3]
   1c9dc:	cmp	r3, #0
   1c9e0:	beq	1c9f0 <__assert_fail@plt+0xb454>
   1c9e4:	ldr	r3, [fp, #-8]
   1c9e8:	orr	r3, r3, #2
   1c9ec:	str	r3, [fp, #-8]
   1c9f0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c9f4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   1c9f8:	str	r2, [r3]
   1c9fc:	ldr	r3, [fp, #-8]
   1ca00:	mov	r0, r3
   1ca04:	sub	sp, fp, #4
   1ca08:	pop	{fp, pc}
   1ca0c:	andeq	r0, r2, ip, ror fp
   1ca10:	andeq	r0, r2, r8, asr #22
   1ca14:	andeq	r0, r2, r4, asr fp
   1ca18:	push	{r4, r5, fp, lr}
   1ca1c:	add	fp, sp, #12
   1ca20:	sub	sp, sp, #16
   1ca24:	str	r0, [fp, #-24]	; 0xffffffe8
   1ca28:	str	r1, [fp, #-28]	; 0xffffffe4
   1ca2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1ca30:	cmp	r3, #0
   1ca34:	beq	1ca44 <__assert_fail@plt+0xb4a8>
   1ca38:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ca3c:	cmp	r3, #0
   1ca40:	bne	1ca54 <__assert_fail@plt+0xb4b8>
   1ca44:	mov	r3, #1
   1ca48:	str	r3, [fp, #-28]	; 0xffffffe4
   1ca4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ca50:	str	r3, [fp, #-24]	; 0xffffffe8
   1ca54:	mov	r1, #0
   1ca58:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1ca5c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1ca60:	umull	r2, r3, r2, r3
   1ca64:	mov	r4, r3
   1ca68:	mov	r5, #0
   1ca6c:	cmp	r4, #0
   1ca70:	beq	1ca78 <__assert_fail@plt+0xb4dc>
   1ca74:	mov	r1, #1
   1ca78:	cmp	r2, #0
   1ca7c:	bge	1ca84 <__assert_fail@plt+0xb4e8>
   1ca80:	mov	r1, #1
   1ca84:	mov	r3, r2
   1ca88:	str	r3, [fp, #-20]	; 0xffffffec
   1ca8c:	mov	r3, r1
   1ca90:	and	r3, r3, #1
   1ca94:	uxtb	r3, r3
   1ca98:	cmp	r3, #0
   1ca9c:	beq	1cab8 <__assert_fail@plt+0xb51c>
   1caa0:	bl	1141c <__errno_location@plt>
   1caa4:	mov	r2, r0
   1caa8:	mov	r3, #12
   1caac:	str	r3, [r2]
   1cab0:	mov	r3, #0
   1cab4:	b	1cad0 <__assert_fail@plt+0xb534>
   1cab8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1cabc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cac0:	bl	111c4 <calloc@plt>
   1cac4:	mov	r3, r0
   1cac8:	str	r3, [fp, #-16]
   1cacc:	ldr	r3, [fp, #-16]
   1cad0:	mov	r0, r3
   1cad4:	sub	sp, fp, #12
   1cad8:	pop	{r4, r5, fp, pc}
   1cadc:	push	{r1, r2, r3}
   1cae0:	push	{fp, lr}
   1cae4:	add	fp, sp, #4
   1cae8:	sub	sp, sp, #36	; 0x24
   1caec:	str	r0, [fp, #-36]	; 0xffffffdc
   1caf0:	mvn	r3, #0
   1caf4:	str	r3, [fp, #-12]
   1caf8:	add	r3, fp, #8
   1cafc:	str	r3, [fp, #-32]	; 0xffffffe0
   1cb00:	ldr	r3, [fp, #4]
   1cb04:	cmp	r3, #0
   1cb08:	beq	1cb1c <__assert_fail@plt+0xb580>
   1cb0c:	ldr	r2, [pc, #432]	; 1ccc4 <__assert_fail@plt+0xb728>
   1cb10:	cmp	r3, r2
   1cb14:	beq	1cb44 <__assert_fail@plt+0xb5a8>
   1cb18:	b	1cb6c <__assert_fail@plt+0xb5d0>
   1cb1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cb20:	add	r2, r3, #4
   1cb24:	str	r2, [fp, #-32]	; 0xffffffe0
   1cb28:	ldr	r3, [r3]
   1cb2c:	str	r3, [fp, #-16]
   1cb30:	ldr	r1, [fp, #-16]
   1cb34:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1cb38:	bl	1ccdc <__assert_fail@plt+0xb740>
   1cb3c:	str	r0, [fp, #-12]
   1cb40:	b	1ccac <__assert_fail@plt+0xb710>
   1cb44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cb48:	add	r2, r3, #4
   1cb4c:	str	r2, [fp, #-32]	; 0xffffffe0
   1cb50:	ldr	r3, [r3]
   1cb54:	str	r3, [fp, #-20]	; 0xffffffec
   1cb58:	ldr	r1, [fp, #-20]	; 0xffffffec
   1cb5c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1cb60:	bl	1cd14 <__assert_fail@plt+0xb778>
   1cb64:	str	r0, [fp, #-12]
   1cb68:	b	1ccac <__assert_fail@plt+0xb710>
   1cb6c:	ldr	r3, [fp, #4]
   1cb70:	cmp	r3, #11
   1cb74:	beq	1cc3c <__assert_fail@plt+0xb6a0>
   1cb78:	cmp	r3, #11
   1cb7c:	bgt	1cbdc <__assert_fail@plt+0xb640>
   1cb80:	cmp	r3, #3
   1cb84:	beq	1cc3c <__assert_fail@plt+0xb6a0>
   1cb88:	cmp	r3, #3
   1cb8c:	bgt	1cbac <__assert_fail@plt+0xb610>
   1cb90:	cmp	r3, #1
   1cb94:	beq	1cc3c <__assert_fail@plt+0xb6a0>
   1cb98:	cmp	r3, #1
   1cb9c:	bgt	1cc50 <__assert_fail@plt+0xb6b4>
   1cba0:	cmp	r3, #0
   1cba4:	beq	1cc50 <__assert_fail@plt+0xb6b4>
   1cba8:	b	1cc7c <__assert_fail@plt+0xb6e0>
   1cbac:	cmp	r3, #8
   1cbb0:	beq	1cc50 <__assert_fail@plt+0xb6b4>
   1cbb4:	cmp	r3, #8
   1cbb8:	bgt	1cbc8 <__assert_fail@plt+0xb62c>
   1cbbc:	cmp	r3, #4
   1cbc0:	beq	1cc50 <__assert_fail@plt+0xb6b4>
   1cbc4:	b	1cc7c <__assert_fail@plt+0xb6e0>
   1cbc8:	cmp	r3, #9
   1cbcc:	beq	1cc3c <__assert_fail@plt+0xb6a0>
   1cbd0:	cmp	r3, #10
   1cbd4:	beq	1cc50 <__assert_fail@plt+0xb6b4>
   1cbd8:	b	1cc7c <__assert_fail@plt+0xb6e0>
   1cbdc:	ldr	r2, [pc, #228]	; 1ccc8 <__assert_fail@plt+0xb72c>
   1cbe0:	cmp	r3, r2
   1cbe4:	bgt	1cc18 <__assert_fail@plt+0xb67c>
   1cbe8:	ldr	r2, [pc, #212]	; 1ccc4 <__assert_fail@plt+0xb728>
   1cbec:	cmp	r3, r2
   1cbf0:	bge	1cc50 <__assert_fail@plt+0xb6b4>
   1cbf4:	ldr	r2, [pc, #208]	; 1cccc <__assert_fail@plt+0xb730>
   1cbf8:	cmp	r3, r2
   1cbfc:	beq	1cc3c <__assert_fail@plt+0xb6a0>
   1cc00:	ldr	r2, [pc, #200]	; 1ccd0 <__assert_fail@plt+0xb734>
   1cc04:	cmp	r3, r2
   1cc08:	beq	1cc50 <__assert_fail@plt+0xb6b4>
   1cc0c:	cmp	r3, #1024	; 0x400
   1cc10:	beq	1cc50 <__assert_fail@plt+0xb6b4>
   1cc14:	b	1cc7c <__assert_fail@plt+0xb6e0>
   1cc18:	ldr	r2, [pc, #180]	; 1ccd4 <__assert_fail@plt+0xb738>
   1cc1c:	cmp	r3, r2
   1cc20:	beq	1cc50 <__assert_fail@plt+0xb6b4>
   1cc24:	ldr	r2, [pc, #168]	; 1ccd4 <__assert_fail@plt+0xb738>
   1cc28:	cmp	r3, r2
   1cc2c:	blt	1cc3c <__assert_fail@plt+0xb6a0>
   1cc30:	ldr	r2, [pc, #160]	; 1ccd8 <__assert_fail@plt+0xb73c>
   1cc34:	cmp	r3, r2
   1cc38:	bne	1cc7c <__assert_fail@plt+0xb6e0>
   1cc3c:	ldr	r1, [fp, #4]
   1cc40:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1cc44:	bl	114ac <fcntl64@plt>
   1cc48:	str	r0, [fp, #-12]
   1cc4c:	b	1cca8 <__assert_fail@plt+0xb70c>
   1cc50:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cc54:	add	r2, r3, #4
   1cc58:	str	r2, [fp, #-32]	; 0xffffffe0
   1cc5c:	ldr	r3, [r3]
   1cc60:	str	r3, [fp, #-24]	; 0xffffffe8
   1cc64:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1cc68:	ldr	r1, [fp, #4]
   1cc6c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1cc70:	bl	114ac <fcntl64@plt>
   1cc74:	str	r0, [fp, #-12]
   1cc78:	b	1cca8 <__assert_fail@plt+0xb70c>
   1cc7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cc80:	add	r2, r3, #4
   1cc84:	str	r2, [fp, #-32]	; 0xffffffe0
   1cc88:	ldr	r3, [r3]
   1cc8c:	str	r3, [fp, #-28]	; 0xffffffe4
   1cc90:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1cc94:	ldr	r1, [fp, #4]
   1cc98:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1cc9c:	bl	114ac <fcntl64@plt>
   1cca0:	str	r0, [fp, #-12]
   1cca4:	nop			; (mov r0, r0)
   1cca8:	nop			; (mov r0, r0)
   1ccac:	ldr	r3, [fp, #-12]
   1ccb0:	mov	r0, r3
   1ccb4:	sub	sp, fp, #4
   1ccb8:	pop	{fp, lr}
   1ccbc:	add	sp, sp, #12
   1ccc0:	bx	lr
   1ccc4:	andeq	r0, r0, r6, lsl #8
   1ccc8:	andeq	r0, r0, r7, lsl #8
   1cccc:	andeq	r0, r0, r1, lsl #8
   1ccd0:	andeq	r0, r0, r2, lsl #8
   1ccd4:	andeq	r0, r0, r9, lsl #8
   1ccd8:	andeq	r0, r0, sl, lsl #8
   1ccdc:	push	{fp, lr}
   1cce0:	add	fp, sp, #4
   1cce4:	sub	sp, sp, #16
   1cce8:	str	r0, [fp, #-16]
   1ccec:	str	r1, [fp, #-20]	; 0xffffffec
   1ccf0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1ccf4:	mov	r1, #0
   1ccf8:	ldr	r0, [fp, #-16]
   1ccfc:	bl	114ac <fcntl64@plt>
   1cd00:	str	r0, [fp, #-8]
   1cd04:	ldr	r3, [fp, #-8]
   1cd08:	mov	r0, r3
   1cd0c:	sub	sp, fp, #4
   1cd10:	pop	{fp, pc}
   1cd14:	push	{fp, lr}
   1cd18:	add	fp, sp, #4
   1cd1c:	sub	sp, sp, #24
   1cd20:	str	r0, [fp, #-24]	; 0xffffffe8
   1cd24:	str	r1, [fp, #-28]	; 0xffffffe4
   1cd28:	ldr	r3, [pc, #292]	; 1ce54 <__assert_fail@plt+0xb8b8>
   1cd2c:	ldr	r3, [r3]
   1cd30:	cmp	r3, #0
   1cd34:	blt	1cda8 <__assert_fail@plt+0xb80c>
   1cd38:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1cd3c:	ldr	r1, [pc, #276]	; 1ce58 <__assert_fail@plt+0xb8bc>
   1cd40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cd44:	bl	114ac <fcntl64@plt>
   1cd48:	str	r0, [fp, #-8]
   1cd4c:	ldr	r3, [fp, #-8]
   1cd50:	cmp	r3, #0
   1cd54:	bge	1cd6c <__assert_fail@plt+0xb7d0>
   1cd58:	bl	1141c <__errno_location@plt>
   1cd5c:	mov	r3, r0
   1cd60:	ldr	r3, [r3]
   1cd64:	cmp	r3, #22
   1cd68:	beq	1cd7c <__assert_fail@plt+0xb7e0>
   1cd6c:	ldr	r3, [pc, #224]	; 1ce54 <__assert_fail@plt+0xb8b8>
   1cd70:	mov	r2, #1
   1cd74:	str	r2, [r3]
   1cd78:	b	1cdb8 <__assert_fail@plt+0xb81c>
   1cd7c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1cd80:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cd84:	bl	1ccdc <__assert_fail@plt+0xb740>
   1cd88:	str	r0, [fp, #-8]
   1cd8c:	ldr	r3, [fp, #-8]
   1cd90:	cmp	r3, #0
   1cd94:	blt	1cdb8 <__assert_fail@plt+0xb81c>
   1cd98:	ldr	r3, [pc, #180]	; 1ce54 <__assert_fail@plt+0xb8b8>
   1cd9c:	mvn	r2, #0
   1cda0:	str	r2, [r3]
   1cda4:	b	1cdb8 <__assert_fail@plt+0xb81c>
   1cda8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1cdac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cdb0:	bl	1ccdc <__assert_fail@plt+0xb740>
   1cdb4:	str	r0, [fp, #-8]
   1cdb8:	ldr	r3, [fp, #-8]
   1cdbc:	cmp	r3, #0
   1cdc0:	blt	1ce44 <__assert_fail@plt+0xb8a8>
   1cdc4:	ldr	r3, [pc, #136]	; 1ce54 <__assert_fail@plt+0xb8b8>
   1cdc8:	ldr	r3, [r3]
   1cdcc:	cmn	r3, #1
   1cdd0:	bne	1ce44 <__assert_fail@plt+0xb8a8>
   1cdd4:	mov	r1, #1
   1cdd8:	ldr	r0, [fp, #-8]
   1cddc:	bl	114ac <fcntl64@plt>
   1cde0:	str	r0, [fp, #-12]
   1cde4:	ldr	r3, [fp, #-12]
   1cde8:	cmp	r3, #0
   1cdec:	blt	1ce14 <__assert_fail@plt+0xb878>
   1cdf0:	ldr	r3, [fp, #-12]
   1cdf4:	orr	r3, r3, #1
   1cdf8:	mov	r2, r3
   1cdfc:	mov	r1, #2
   1ce00:	ldr	r0, [fp, #-8]
   1ce04:	bl	114ac <fcntl64@plt>
   1ce08:	mov	r3, r0
   1ce0c:	cmn	r3, #1
   1ce10:	bne	1ce44 <__assert_fail@plt+0xb8a8>
   1ce14:	bl	1141c <__errno_location@plt>
   1ce18:	mov	r3, r0
   1ce1c:	ldr	r3, [r3]
   1ce20:	str	r3, [fp, #-16]
   1ce24:	ldr	r0, [fp, #-8]
   1ce28:	bl	11584 <close@plt>
   1ce2c:	bl	1141c <__errno_location@plt>
   1ce30:	mov	r2, r0
   1ce34:	ldr	r3, [fp, #-16]
   1ce38:	str	r3, [r2]
   1ce3c:	mvn	r3, #0
   1ce40:	str	r3, [fp, #-8]
   1ce44:	ldr	r3, [fp, #-8]
   1ce48:	mov	r0, r3
   1ce4c:	sub	sp, fp, #4
   1ce50:	pop	{fp, pc}
   1ce54:	andeq	r1, r3, r4, ror #7
   1ce58:	andeq	r0, r0, r6, lsl #8
   1ce5c:	push	{fp, lr}
   1ce60:	add	fp, sp, #4
   1ce64:	sub	sp, sp, #16
   1ce68:	str	r0, [fp, #-8]
   1ce6c:	ldr	r3, [fp, #-8]
   1ce70:	ldr	r3, [r3]
   1ce74:	and	r3, r3, #256	; 0x100
   1ce78:	cmp	r3, #0
   1ce7c:	beq	1ce98 <__assert_fail@plt+0xb8fc>
   1ce80:	mov	r3, #1
   1ce84:	str	r3, [sp]
   1ce88:	mov	r2, #0
   1ce8c:	mov	r3, #0
   1ce90:	ldr	r0, [fp, #-8]
   1ce94:	bl	1d020 <__assert_fail@plt+0xba84>
   1ce98:	nop			; (mov r0, r0)
   1ce9c:	sub	sp, fp, #4
   1cea0:	pop	{fp, pc}
   1cea4:	push	{fp, lr}
   1cea8:	add	fp, sp, #4
   1ceac:	sub	sp, sp, #8
   1ceb0:	str	r0, [fp, #-8]
   1ceb4:	ldr	r3, [fp, #-8]
   1ceb8:	cmp	r3, #0
   1cebc:	beq	1ced4 <__assert_fail@plt+0xb938>
   1cec0:	ldr	r0, [fp, #-8]
   1cec4:	bl	1138c <__freading@plt>
   1cec8:	mov	r3, r0
   1cecc:	cmp	r3, #0
   1ced0:	bne	1cee4 <__assert_fail@plt+0xb948>
   1ced4:	ldr	r0, [fp, #-8]
   1ced8:	bl	1120c <fflush@plt>
   1cedc:	mov	r3, r0
   1cee0:	b	1cef8 <__assert_fail@plt+0xb95c>
   1cee4:	ldr	r0, [fp, #-8]
   1cee8:	bl	1ce5c <__assert_fail@plt+0xb8c0>
   1ceec:	ldr	r0, [fp, #-8]
   1cef0:	bl	1120c <fflush@plt>
   1cef4:	mov	r3, r0
   1cef8:	mov	r0, r3
   1cefc:	sub	sp, fp, #4
   1cf00:	pop	{fp, pc}
   1cf04:	push	{fp}		; (str fp, [sp, #-4]!)
   1cf08:	add	fp, sp, #0
   1cf0c:	sub	sp, sp, #12
   1cf10:	str	r0, [fp, #-8]
   1cf14:	ldr	r3, [fp, #-8]
   1cf18:	ldr	r2, [r3, #20]
   1cf1c:	ldr	r3, [fp, #-8]
   1cf20:	ldr	r3, [r3, #16]
   1cf24:	cmp	r2, r3
   1cf28:	bls	1cf34 <__assert_fail@plt+0xb998>
   1cf2c:	mov	r3, #0
   1cf30:	b	1cf84 <__assert_fail@plt+0xb9e8>
   1cf34:	ldr	r3, [fp, #-8]
   1cf38:	ldr	r3, [r3, #8]
   1cf3c:	mov	r2, r3
   1cf40:	ldr	r3, [fp, #-8]
   1cf44:	ldr	r3, [r3, #4]
   1cf48:	sub	r2, r2, r3
   1cf4c:	ldr	r3, [fp, #-8]
   1cf50:	ldr	r3, [r3]
   1cf54:	and	r3, r3, #256	; 0x100
   1cf58:	cmp	r3, #0
   1cf5c:	beq	1cf7c <__assert_fail@plt+0xb9e0>
   1cf60:	ldr	r3, [fp, #-8]
   1cf64:	ldr	r3, [r3, #44]	; 0x2c
   1cf68:	mov	r1, r3
   1cf6c:	ldr	r3, [fp, #-8]
   1cf70:	ldr	r3, [r3, #36]	; 0x24
   1cf74:	sub	r3, r1, r3
   1cf78:	b	1cf80 <__assert_fail@plt+0xb9e4>
   1cf7c:	mov	r3, #0
   1cf80:	add	r3, r2, r3
   1cf84:	mov	r0, r3
   1cf88:	add	sp, fp, #0
   1cf8c:	pop	{fp}		; (ldr fp, [sp], #4)
   1cf90:	bx	lr
   1cf94:	push	{r4, fp, lr}
   1cf98:	add	fp, sp, #8
   1cf9c:	sub	sp, sp, #20
   1cfa0:	str	r0, [fp, #-24]	; 0xffffffe8
   1cfa4:	bl	1141c <__errno_location@plt>
   1cfa8:	mov	r3, r0
   1cfac:	ldr	r3, [r3]
   1cfb0:	str	r3, [fp, #-20]	; 0xffffffec
   1cfb4:	bl	1141c <__errno_location@plt>
   1cfb8:	mov	r3, r0
   1cfbc:	ldr	r3, [r3]
   1cfc0:	str	r3, [fp, #-16]
   1cfc4:	bl	1141c <__errno_location@plt>
   1cfc8:	mov	r2, r0
   1cfcc:	mov	r3, #0
   1cfd0:	str	r3, [r2]
   1cfd4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1cfd8:	bl	11224 <free@plt>
   1cfdc:	bl	1141c <__errno_location@plt>
   1cfe0:	mov	r4, r0
   1cfe4:	bl	1141c <__errno_location@plt>
   1cfe8:	mov	r3, r0
   1cfec:	ldr	r3, [r3]
   1cff0:	cmp	r3, #0
   1cff4:	moveq	r3, #1
   1cff8:	movne	r3, #0
   1cffc:	uxtb	r3, r3
   1d000:	lsl	r3, r3, #2
   1d004:	sub	r2, fp, #12
   1d008:	add	r3, r2, r3
   1d00c:	ldr	r3, [r3, #-8]
   1d010:	str	r3, [r4]
   1d014:	nop			; (mov r0, r0)
   1d018:	sub	sp, fp, #8
   1d01c:	pop	{r4, fp, pc}
   1d020:	push	{fp, lr}
   1d024:	add	fp, sp, #4
   1d028:	sub	sp, sp, #32
   1d02c:	str	r0, [fp, #-16]
   1d030:	strd	r2, [fp, #-28]	; 0xffffffe4
   1d034:	ldr	r3, [fp, #-16]
   1d038:	ldr	r2, [r3, #8]
   1d03c:	ldr	r3, [fp, #-16]
   1d040:	ldr	r3, [r3, #4]
   1d044:	cmp	r2, r3
   1d048:	bne	1d0e0 <__assert_fail@plt+0xbb44>
   1d04c:	ldr	r3, [fp, #-16]
   1d050:	ldr	r2, [r3, #20]
   1d054:	ldr	r3, [fp, #-16]
   1d058:	ldr	r3, [r3, #16]
   1d05c:	cmp	r2, r3
   1d060:	bne	1d0e0 <__assert_fail@plt+0xbb44>
   1d064:	ldr	r3, [fp, #-16]
   1d068:	ldr	r3, [r3, #36]	; 0x24
   1d06c:	cmp	r3, #0
   1d070:	bne	1d0e0 <__assert_fail@plt+0xbb44>
   1d074:	ldr	r0, [fp, #-16]
   1d078:	bl	11464 <fileno@plt>
   1d07c:	mov	r1, r0
   1d080:	ldr	r3, [fp, #4]
   1d084:	str	r3, [sp]
   1d088:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1d08c:	mov	r0, r1
   1d090:	bl	112fc <lseek64@plt>
   1d094:	strd	r0, [fp, #-12]
   1d098:	ldrd	r2, [fp, #-12]
   1d09c:	mvn	r0, #0
   1d0a0:	mvn	r1, #0
   1d0a4:	cmp	r3, r1
   1d0a8:	cmpeq	r2, r0
   1d0ac:	bne	1d0b8 <__assert_fail@plt+0xbb1c>
   1d0b0:	mvn	r3, #0
   1d0b4:	b	1d0f8 <__assert_fail@plt+0xbb5c>
   1d0b8:	ldr	r3, [fp, #-16]
   1d0bc:	ldr	r3, [r3]
   1d0c0:	bic	r2, r3, #16
   1d0c4:	ldr	r3, [fp, #-16]
   1d0c8:	str	r2, [r3]
   1d0cc:	ldr	r1, [fp, #-16]
   1d0d0:	ldrd	r2, [fp, #-12]
   1d0d4:	strd	r2, [r1, #80]	; 0x50
   1d0d8:	mov	r3, #0
   1d0dc:	b	1d0f8 <__assert_fail@plt+0xbb5c>
   1d0e0:	ldr	r3, [fp, #4]
   1d0e4:	str	r3, [sp]
   1d0e8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1d0ec:	ldr	r0, [fp, #-16]
   1d0f0:	bl	114a0 <fseeko64@plt>
   1d0f4:	mov	r3, r0
   1d0f8:	mov	r0, r3
   1d0fc:	sub	sp, fp, #4
   1d100:	pop	{fp, pc}
   1d104:	push	{r4, r5, fp, lr}
   1d108:	add	fp, sp, #12
   1d10c:	sub	sp, sp, #16
   1d110:	str	r0, [fp, #-24]	; 0xffffffe8
   1d114:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d118:	cmp	r3, #0
   1d11c:	bne	1d128 <__assert_fail@plt+0xbb8c>
   1d120:	mov	r3, #1
   1d124:	str	r3, [fp, #-24]	; 0xffffffe8
   1d128:	mov	r1, #0
   1d12c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d130:	mov	r2, r3
   1d134:	mov	r3, #0
   1d138:	mov	r4, r3
   1d13c:	mov	r5, #0
   1d140:	cmp	r4, #0
   1d144:	beq	1d14c <__assert_fail@plt+0xbbb0>
   1d148:	mov	r1, #1
   1d14c:	cmp	r2, #0
   1d150:	bge	1d158 <__assert_fail@plt+0xbbbc>
   1d154:	mov	r1, #1
   1d158:	mov	r3, r2
   1d15c:	str	r3, [fp, #-20]	; 0xffffffec
   1d160:	mov	r3, r1
   1d164:	and	r3, r3, #1
   1d168:	uxtb	r3, r3
   1d16c:	cmp	r3, #0
   1d170:	beq	1d18c <__assert_fail@plt+0xbbf0>
   1d174:	bl	1141c <__errno_location@plt>
   1d178:	mov	r2, r0
   1d17c:	mov	r3, #12
   1d180:	str	r3, [r2]
   1d184:	mov	r3, #0
   1d188:	b	1d1a0 <__assert_fail@plt+0xbc04>
   1d18c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d190:	bl	11374 <malloc@plt>
   1d194:	mov	r3, r0
   1d198:	str	r3, [fp, #-16]
   1d19c:	ldr	r3, [fp, #-16]
   1d1a0:	mov	r0, r3
   1d1a4:	sub	sp, fp, #12
   1d1a8:	pop	{r4, r5, fp, pc}
   1d1ac:	push	{fp, lr}
   1d1b0:	add	fp, sp, #4
   1d1b4:	sub	sp, sp, #32
   1d1b8:	str	r0, [fp, #-24]	; 0xffffffe8
   1d1bc:	str	r1, [fp, #-28]	; 0xffffffe4
   1d1c0:	str	r2, [fp, #-32]	; 0xffffffe0
   1d1c4:	str	r3, [fp, #-36]	; 0xffffffdc
   1d1c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d1cc:	cmp	r3, #0
   1d1d0:	bne	1d1dc <__assert_fail@plt+0xbc40>
   1d1d4:	sub	r3, fp, #16
   1d1d8:	str	r3, [fp, #-24]	; 0xffffffe8
   1d1dc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1d1e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1d1e4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1d1e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d1ec:	bl	11338 <mbrtowc@plt>
   1d1f0:	str	r0, [fp, #-8]
   1d1f4:	ldr	r3, [fp, #-8]
   1d1f8:	cmn	r3, #3
   1d1fc:	bls	1d248 <__assert_fail@plt+0xbcac>
   1d200:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d204:	cmp	r3, #0
   1d208:	beq	1d248 <__assert_fail@plt+0xbcac>
   1d20c:	mov	r0, #0
   1d210:	bl	1d548 <__assert_fail@plt+0xbfac>
   1d214:	mov	r3, r0
   1d218:	eor	r3, r3, #1
   1d21c:	uxtb	r3, r3
   1d220:	cmp	r3, #0
   1d224:	beq	1d248 <__assert_fail@plt+0xbcac>
   1d228:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1d22c:	ldrb	r3, [r3]
   1d230:	strb	r3, [fp, #-9]
   1d234:	ldrb	r2, [fp, #-9]
   1d238:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d23c:	str	r2, [r3]
   1d240:	mov	r3, #1
   1d244:	b	1d24c <__assert_fail@plt+0xbcb0>
   1d248:	ldr	r3, [fp, #-8]
   1d24c:	mov	r0, r3
   1d250:	sub	sp, fp, #4
   1d254:	pop	{fp, pc}
   1d258:	push	{r4, r5, fp, lr}
   1d25c:	add	fp, sp, #12
   1d260:	sub	sp, sp, #16
   1d264:	str	r0, [fp, #-24]	; 0xffffffe8
   1d268:	str	r1, [fp, #-28]	; 0xffffffe4
   1d26c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d270:	cmp	r3, #0
   1d274:	bne	1d288 <__assert_fail@plt+0xbcec>
   1d278:	ldr	r0, [fp, #-28]	; 0xffffffe4
   1d27c:	bl	1d104 <__assert_fail@plt+0xbb68>
   1d280:	mov	r3, r0
   1d284:	b	1d31c <__assert_fail@plt+0xbd80>
   1d288:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1d28c:	cmp	r3, #0
   1d290:	bne	1d2a4 <__assert_fail@plt+0xbd08>
   1d294:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d298:	bl	1cf94 <__assert_fail@plt+0xb9f8>
   1d29c:	mov	r3, #0
   1d2a0:	b	1d31c <__assert_fail@plt+0xbd80>
   1d2a4:	mov	r1, #0
   1d2a8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1d2ac:	mov	r2, r3
   1d2b0:	mov	r3, #0
   1d2b4:	mov	r4, r3
   1d2b8:	mov	r5, #0
   1d2bc:	cmp	r4, #0
   1d2c0:	beq	1d2c8 <__assert_fail@plt+0xbd2c>
   1d2c4:	mov	r1, #1
   1d2c8:	cmp	r2, #0
   1d2cc:	bge	1d2d4 <__assert_fail@plt+0xbd38>
   1d2d0:	mov	r1, #1
   1d2d4:	mov	r3, r2
   1d2d8:	str	r3, [fp, #-20]	; 0xffffffec
   1d2dc:	mov	r3, r1
   1d2e0:	and	r3, r3, #1
   1d2e4:	uxtb	r3, r3
   1d2e8:	cmp	r3, #0
   1d2ec:	beq	1d308 <__assert_fail@plt+0xbd6c>
   1d2f0:	bl	1141c <__errno_location@plt>
   1d2f4:	mov	r2, r0
   1d2f8:	mov	r3, #12
   1d2fc:	str	r3, [r2]
   1d300:	mov	r3, #0
   1d304:	b	1d31c <__assert_fail@plt+0xbd80>
   1d308:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1d30c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1d310:	bl	112a8 <realloc@plt>
   1d314:	str	r0, [fp, #-16]
   1d318:	ldr	r3, [fp, #-16]
   1d31c:	mov	r0, r3
   1d320:	sub	sp, fp, #12
   1d324:	pop	{r4, r5, fp, pc}
   1d328:	push	{fp, lr}
   1d32c:	add	fp, sp, #4
   1d330:	sub	sp, sp, #24
   1d334:	str	r0, [fp, #-16]
   1d338:	str	r1, [fp, #-20]	; 0xffffffec
   1d33c:	str	r2, [fp, #-24]	; 0xffffffe8
   1d340:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d344:	cmp	r3, #0
   1d348:	beq	1d384 <__assert_fail@plt+0xbde8>
   1d34c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1d350:	mvn	r0, #0
   1d354:	bl	1e264 <__assert_fail@plt+0xccc8>
   1d358:	mov	r3, r0
   1d35c:	mov	r2, r3
   1d360:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d364:	cmp	r2, r3
   1d368:	bcs	1d384 <__assert_fail@plt+0xbde8>
   1d36c:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d370:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d374:	mul	r3, r2, r3
   1d378:	str	r3, [fp, #-8]
   1d37c:	mov	r3, #1
   1d380:	b	1d398 <__assert_fail@plt+0xbdfc>
   1d384:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d388:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d38c:	mul	r3, r2, r3
   1d390:	str	r3, [fp, #-8]
   1d394:	mov	r3, #0
   1d398:	cmp	r3, #0
   1d39c:	beq	1d3b8 <__assert_fail@plt+0xbe1c>
   1d3a0:	bl	1141c <__errno_location@plt>
   1d3a4:	mov	r2, r0
   1d3a8:	mov	r3, #12
   1d3ac:	str	r3, [r2]
   1d3b0:	mov	r3, #0
   1d3b4:	b	1d3cc <__assert_fail@plt+0xbe30>
   1d3b8:	ldr	r3, [fp, #-8]
   1d3bc:	mov	r1, r3
   1d3c0:	ldr	r0, [fp, #-16]
   1d3c4:	bl	1d258 <__assert_fail@plt+0xbcbc>
   1d3c8:	mov	r3, r0
   1d3cc:	mov	r0, r3
   1d3d0:	sub	sp, fp, #4
   1d3d4:	pop	{fp, pc}
   1d3d8:	push	{r4, r5, fp, lr}
   1d3dc:	add	fp, sp, #12
   1d3e0:	sub	sp, sp, #16
   1d3e4:	str	r0, [fp, #-24]	; 0xffffffe8
   1d3e8:	str	r1, [fp, #-28]	; 0xffffffe4
   1d3ec:	ldr	r5, [fp, #-24]	; 0xffffffe8
   1d3f0:	ldr	r4, [fp, #-28]	; 0xffffffe4
   1d3f4:	cmp	r5, r4
   1d3f8:	bne	1d404 <__assert_fail@plt+0xbe68>
   1d3fc:	mov	r3, #0
   1d400:	b	1d464 <__assert_fail@plt+0xbec8>
   1d404:	ldrb	r3, [r5]
   1d408:	mov	r0, r3
   1d40c:	bl	1e1e4 <__assert_fail@plt+0xcc48>
   1d410:	mov	r3, r0
   1d414:	strb	r3, [fp, #-13]
   1d418:	ldrb	r3, [r4]
   1d41c:	mov	r0, r3
   1d420:	bl	1e1e4 <__assert_fail@plt+0xcc48>
   1d424:	mov	r3, r0
   1d428:	strb	r3, [fp, #-14]
   1d42c:	ldrb	r3, [fp, #-13]
   1d430:	cmp	r3, #0
   1d434:	beq	1d454 <__assert_fail@plt+0xbeb8>
   1d438:	add	r5, r5, #1
   1d43c:	add	r4, r4, #1
   1d440:	ldrb	r2, [fp, #-13]
   1d444:	ldrb	r3, [fp, #-14]
   1d448:	cmp	r2, r3
   1d44c:	beq	1d404 <__assert_fail@plt+0xbe68>
   1d450:	b	1d458 <__assert_fail@plt+0xbebc>
   1d454:	nop			; (mov r0, r0)
   1d458:	ldrb	r2, [fp, #-13]
   1d45c:	ldrb	r3, [fp, #-14]
   1d460:	sub	r3, r2, r3
   1d464:	mov	r0, r3
   1d468:	sub	sp, fp, #12
   1d46c:	pop	{r4, r5, fp, pc}
   1d470:	push	{fp, lr}
   1d474:	add	fp, sp, #4
   1d478:	sub	sp, sp, #16
   1d47c:	str	r0, [fp, #-16]
   1d480:	ldr	r0, [fp, #-16]
   1d484:	bl	1132c <__fpending@plt>
   1d488:	mov	r3, r0
   1d48c:	cmp	r3, #0
   1d490:	movne	r3, #1
   1d494:	moveq	r3, #0
   1d498:	strb	r3, [fp, #-5]
   1d49c:	ldr	r0, [fp, #-16]
   1d4a0:	bl	11230 <ferror@plt>
   1d4a4:	mov	r3, r0
   1d4a8:	cmp	r3, #0
   1d4ac:	movne	r3, #1
   1d4b0:	moveq	r3, #0
   1d4b4:	strb	r3, [fp, #-6]
   1d4b8:	ldr	r0, [fp, #-16]
   1d4bc:	bl	1147c <fclose@plt>
   1d4c0:	mov	r3, r0
   1d4c4:	cmp	r3, #0
   1d4c8:	movne	r3, #1
   1d4cc:	moveq	r3, #0
   1d4d0:	strb	r3, [fp, #-7]
   1d4d4:	ldrb	r3, [fp, #-6]
   1d4d8:	cmp	r3, #0
   1d4dc:	bne	1d50c <__assert_fail@plt+0xbf70>
   1d4e0:	ldrb	r3, [fp, #-7]
   1d4e4:	cmp	r3, #0
   1d4e8:	beq	1d538 <__assert_fail@plt+0xbf9c>
   1d4ec:	ldrb	r3, [fp, #-5]
   1d4f0:	cmp	r3, #0
   1d4f4:	bne	1d50c <__assert_fail@plt+0xbf70>
   1d4f8:	bl	1141c <__errno_location@plt>
   1d4fc:	mov	r3, r0
   1d500:	ldr	r3, [r3]
   1d504:	cmp	r3, #9
   1d508:	beq	1d538 <__assert_fail@plt+0xbf9c>
   1d50c:	ldrb	r3, [fp, #-7]
   1d510:	eor	r3, r3, #1
   1d514:	uxtb	r3, r3
   1d518:	cmp	r3, #0
   1d51c:	beq	1d530 <__assert_fail@plt+0xbf94>
   1d520:	bl	1141c <__errno_location@plt>
   1d524:	mov	r2, r0
   1d528:	mov	r3, #0
   1d52c:	str	r3, [r2]
   1d530:	mvn	r3, #0
   1d534:	b	1d53c <__assert_fail@plt+0xbfa0>
   1d538:	mov	r3, #0
   1d53c:	mov	r0, r3
   1d540:	sub	sp, fp, #4
   1d544:	pop	{fp, pc}
   1d548:	push	{fp, lr}
   1d54c:	add	fp, sp, #4
   1d550:	sub	sp, sp, #272	; 0x110
   1d554:	str	r0, [fp, #-272]	; 0xfffffef0
   1d558:	sub	r3, fp, #264	; 0x108
   1d55c:	ldr	r2, [pc, #116]	; 1d5d8 <__assert_fail@plt+0xc03c>
   1d560:	mov	r1, r3
   1d564:	ldr	r0, [fp, #-272]	; 0xfffffef0
   1d568:	bl	1dce0 <__assert_fail@plt+0xc744>
   1d56c:	mov	r3, r0
   1d570:	cmp	r3, #0
   1d574:	beq	1d580 <__assert_fail@plt+0xbfe4>
   1d578:	mov	r3, #0
   1d57c:	b	1d5cc <__assert_fail@plt+0xc030>
   1d580:	sub	r3, fp, #264	; 0x108
   1d584:	ldr	r1, [pc, #80]	; 1d5dc <__assert_fail@plt+0xc040>
   1d588:	mov	r0, r3
   1d58c:	bl	111dc <strcmp@plt>
   1d590:	mov	r3, r0
   1d594:	cmp	r3, #0
   1d598:	beq	1d5c0 <__assert_fail@plt+0xc024>
   1d59c:	sub	r3, fp, #264	; 0x108
   1d5a0:	ldr	r1, [pc, #56]	; 1d5e0 <__assert_fail@plt+0xc044>
   1d5a4:	mov	r0, r3
   1d5a8:	bl	111dc <strcmp@plt>
   1d5ac:	mov	r3, r0
   1d5b0:	cmp	r3, #0
   1d5b4:	beq	1d5c0 <__assert_fail@plt+0xc024>
   1d5b8:	mov	r3, #1
   1d5bc:	b	1d5c4 <__assert_fail@plt+0xc028>
   1d5c0:	mov	r3, #0
   1d5c4:	and	r3, r3, #1
   1d5c8:	uxtb	r3, r3
   1d5cc:	mov	r0, r3
   1d5d0:	sub	sp, fp, #4
   1d5d4:	pop	{fp, pc}
   1d5d8:	andeq	r0, r0, r1, lsl #2
   1d5dc:	andeq	r0, r2, r8, lsl #23
   1d5e0:	andeq	r0, r2, ip, lsl #23
   1d5e4:	push	{fp, lr}
   1d5e8:	add	fp, sp, #4
   1d5ec:	bl	1141c <__errno_location@plt>
   1d5f0:	mov	r2, r0
   1d5f4:	mov	r3, #12
   1d5f8:	str	r3, [r2]
   1d5fc:	mov	r3, #0
   1d600:	mov	r0, r3
   1d604:	pop	{fp, pc}
   1d608:	push	{fp, lr}
   1d60c:	add	fp, sp, #4
   1d610:	sub	sp, sp, #8
   1d614:	str	r0, [fp, #-8]
   1d618:	ldr	r3, [fp, #-8]
   1d61c:	mov	r0, r3
   1d620:	bl	1d104 <__assert_fail@plt+0xbb68>
   1d624:	mov	r3, r0
   1d628:	mov	r0, r3
   1d62c:	sub	sp, fp, #4
   1d630:	pop	{fp, pc}
   1d634:	push	{fp, lr}
   1d638:	add	fp, sp, #4
   1d63c:	sub	sp, sp, #8
   1d640:	str	r0, [fp, #-8]
   1d644:	str	r1, [fp, #-12]
   1d648:	ldr	r3, [fp, #-12]
   1d64c:	cmp	r3, #0
   1d650:	moveq	r3, #1
   1d654:	movne	r3, #0
   1d658:	uxtb	r3, r3
   1d65c:	mov	r2, r3
   1d660:	ldr	r3, [fp, #-12]
   1d664:	orr	r3, r2, r3
   1d668:	mov	r1, r3
   1d66c:	ldr	r0, [fp, #-8]
   1d670:	bl	1d258 <__assert_fail@plt+0xbcbc>
   1d674:	mov	r3, r0
   1d678:	mov	r0, r3
   1d67c:	sub	sp, fp, #4
   1d680:	pop	{fp, pc}
   1d684:	push	{fp, lr}
   1d688:	add	fp, sp, #4
   1d68c:	sub	sp, sp, #8
   1d690:	str	r0, [fp, #-8]
   1d694:	str	r1, [fp, #-12]
   1d698:	ldr	r3, [fp, #-8]
   1d69c:	ldr	r2, [fp, #-12]
   1d6a0:	mov	r1, r2
   1d6a4:	mov	r0, r3
   1d6a8:	bl	1ca18 <__assert_fail@plt+0xb47c>
   1d6ac:	mov	r3, r0
   1d6b0:	mov	r0, r3
   1d6b4:	sub	sp, fp, #4
   1d6b8:	pop	{fp, pc}
   1d6bc:	push	{fp, lr}
   1d6c0:	add	fp, sp, #4
   1d6c4:	sub	sp, sp, #16
   1d6c8:	str	r0, [fp, #-8]
   1d6cc:	str	r1, [fp, #-12]
   1d6d0:	str	r2, [fp, #-16]
   1d6d4:	ldr	r3, [fp, #-12]
   1d6d8:	cmp	r3, #0
   1d6dc:	beq	1d6ec <__assert_fail@plt+0xc150>
   1d6e0:	ldr	r3, [fp, #-16]
   1d6e4:	cmp	r3, #0
   1d6e8:	bne	1d6fc <__assert_fail@plt+0xc160>
   1d6ec:	mov	r3, #1
   1d6f0:	str	r3, [fp, #-16]
   1d6f4:	ldr	r3, [fp, #-16]
   1d6f8:	str	r3, [fp, #-12]
   1d6fc:	ldr	r3, [fp, #-12]
   1d700:	ldr	r2, [fp, #-16]
   1d704:	mov	r1, r3
   1d708:	ldr	r0, [fp, #-8]
   1d70c:	bl	1d328 <__assert_fail@plt+0xbd8c>
   1d710:	mov	r3, r0
   1d714:	mov	r0, r3
   1d718:	sub	sp, fp, #4
   1d71c:	pop	{fp, pc}
   1d720:	push	{fp, lr}
   1d724:	add	fp, sp, #4
   1d728:	sub	sp, sp, #8
   1d72c:	mov	r0, #14
   1d730:	bl	114e8 <nl_langinfo@plt>
   1d734:	str	r0, [fp, #-8]
   1d738:	ldr	r3, [fp, #-8]
   1d73c:	cmp	r3, #0
   1d740:	bne	1d74c <__assert_fail@plt+0xc1b0>
   1d744:	ldr	r3, [pc, #40]	; 1d774 <__assert_fail@plt+0xc1d8>
   1d748:	str	r3, [fp, #-8]
   1d74c:	ldr	r3, [fp, #-8]
   1d750:	ldrb	r3, [r3]
   1d754:	cmp	r3, #0
   1d758:	bne	1d764 <__assert_fail@plt+0xc1c8>
   1d75c:	ldr	r3, [pc, #20]	; 1d778 <__assert_fail@plt+0xc1dc>
   1d760:	str	r3, [fp, #-8]
   1d764:	ldr	r3, [fp, #-8]
   1d768:	mov	r0, r3
   1d76c:	sub	sp, fp, #4
   1d770:	pop	{fp, pc}
   1d774:	muleq	r2, r4, fp
   1d778:	muleq	r2, r8, fp
   1d77c:	push	{fp, lr}
   1d780:	add	fp, sp, #4
   1d784:	sub	sp, sp, #48	; 0x30
   1d788:	str	r0, [fp, #-48]	; 0xffffffd0
   1d78c:	mov	r3, #15
   1d790:	str	r3, [fp, #-8]
   1d794:	ldr	r3, [fp, #-8]
   1d798:	add	r3, r3, #1
   1d79c:	str	r3, [fp, #-12]
   1d7a0:	ldr	r3, [fp, #-12]
   1d7a4:	cmp	r3, #0
   1d7a8:	bge	1d7e4 <__assert_fail@plt+0xc248>
   1d7ac:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1d7b0:	cmp	r3, #0
   1d7b4:	bge	1d7d4 <__assert_fail@plt+0xc238>
   1d7b8:	ldr	r2, [fp, #-12]
   1d7bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1d7c0:	add	r3, r2, r3
   1d7c4:	cmp	r3, #0
   1d7c8:	bge	1d7d4 <__assert_fail@plt+0xc238>
   1d7cc:	mov	r3, #1
   1d7d0:	b	1d7d8 <__assert_fail@plt+0xc23c>
   1d7d4:	mov	r3, #0
   1d7d8:	and	r3, r3, #1
   1d7dc:	uxtb	r3, r3
   1d7e0:	b	1d808 <__assert_fail@plt+0xc26c>
   1d7e4:	ldr	r2, [fp, #-12]
   1d7e8:	mvn	r3, #-2147483648	; 0x80000000
   1d7ec:	sub	r3, r3, r2
   1d7f0:	mov	r2, r3
   1d7f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1d7f8:	cmp	r2, r3
   1d7fc:	movcc	r3, #1
   1d800:	movcs	r3, #0
   1d804:	uxtb	r3, r3
   1d808:	cmp	r3, #0
   1d80c:	beq	1d828 <__assert_fail@plt+0xc28c>
   1d810:	ldr	r2, [fp, #-12]
   1d814:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1d818:	add	r3, r2, r3
   1d81c:	str	r3, [fp, #-36]	; 0xffffffdc
   1d820:	mov	r3, #0
   1d824:	b	1d83c <__assert_fail@plt+0xc2a0>
   1d828:	ldr	r2, [fp, #-12]
   1d82c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1d830:	add	r3, r2, r3
   1d834:	str	r3, [fp, #-36]	; 0xffffffdc
   1d838:	mov	r3, #1
   1d83c:	cmp	r3, #0
   1d840:	beq	1d910 <__assert_fail@plt+0xc374>
   1d844:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1d848:	mov	r2, #0
   1d84c:	str	r3, [fp, #-40]	; 0xffffffd8
   1d850:	mov	r3, r2
   1d854:	and	r3, r3, #1
   1d858:	uxtb	r3, r3
   1d85c:	eor	r3, r3, #1
   1d860:	uxtb	r3, r3
   1d864:	cmp	r3, #0
   1d868:	beq	1d910 <__assert_fail@plt+0xc374>
   1d86c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1d870:	mov	r0, r3
   1d874:	bl	11374 <malloc@plt>
   1d878:	mov	r3, r0
   1d87c:	str	r3, [fp, #-16]
   1d880:	ldr	r3, [fp, #-16]
   1d884:	cmp	r3, #0
   1d888:	beq	1d910 <__assert_fail@plt+0xc374>
   1d88c:	ldr	r3, [fp, #-16]
   1d890:	str	r3, [fp, #-20]	; 0xffffffec
   1d894:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d898:	cmn	r3, #9
   1d89c:	bls	1d8b0 <__assert_fail@plt+0xc314>
   1d8a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d8a4:	add	r3, r3, #8
   1d8a8:	str	r3, [fp, #-44]	; 0xffffffd4
   1d8ac:	b	1d8bc <__assert_fail@plt+0xc320>
   1d8b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d8b4:	add	r3, r3, #8
   1d8b8:	str	r3, [fp, #-44]	; 0xffffffd4
   1d8bc:	ldr	r3, [fp, #-8]
   1d8c0:	mvn	r2, r3
   1d8c4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1d8c8:	and	r2, r2, r3
   1d8cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1d8d0:	sub	r3, r2, r3
   1d8d4:	add	r3, r3, #8
   1d8d8:	str	r3, [fp, #-24]	; 0xffffffe8
   1d8dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1d8e0:	ldr	r2, [fp, #-16]
   1d8e4:	add	r3, r2, r3
   1d8e8:	str	r3, [fp, #-28]	; 0xffffffe4
   1d8ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1d8f0:	str	r3, [fp, #-32]	; 0xffffffe0
   1d8f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d8f8:	sub	r3, r3, #1
   1d8fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1d900:	uxtb	r2, r2
   1d904:	strb	r2, [r3]
   1d908:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1d90c:	b	1d914 <__assert_fail@plt+0xc378>
   1d910:	mov	r3, #0
   1d914:	mov	r0, r3
   1d918:	sub	sp, fp, #4
   1d91c:	pop	{fp, pc}
   1d920:	push	{fp, lr}
   1d924:	add	fp, sp, #4
   1d928:	sub	sp, sp, #16
   1d92c:	str	r0, [fp, #-16]
   1d930:	ldr	r3, [fp, #-16]
   1d934:	and	r3, r3, #7
   1d938:	cmp	r3, #0
   1d93c:	beq	1d944 <__assert_fail@plt+0xc3a8>
   1d940:	bl	1156c <abort@plt>
   1d944:	ldr	r3, [fp, #-16]
   1d948:	and	r3, r3, #8
   1d94c:	cmp	r3, #0
   1d950:	beq	1d978 <__assert_fail@plt+0xc3dc>
   1d954:	ldr	r3, [fp, #-16]
   1d958:	sub	r3, r3, #1
   1d95c:	ldrb	r3, [r3]
   1d960:	rsb	r3, r3, #0
   1d964:	ldr	r2, [fp, #-16]
   1d968:	add	r3, r2, r3
   1d96c:	str	r3, [fp, #-8]
   1d970:	ldr	r0, [fp, #-8]
   1d974:	bl	1cf94 <__assert_fail@plt+0xb9f8>
   1d978:	nop			; (mov r0, r0)
   1d97c:	sub	sp, fp, #4
   1d980:	pop	{fp, pc}
   1d984:	push	{fp, lr}
   1d988:	add	fp, sp, #4
   1d98c:	sub	sp, sp, #16
   1d990:	str	r0, [fp, #-16]
   1d994:	ldr	r0, [fp, #-16]
   1d998:	bl	11218 <wcwidth@plt>
   1d99c:	str	r0, [fp, #-8]
   1d9a0:	ldr	r3, [fp, #-8]
   1d9a4:	cmp	r3, #0
   1d9a8:	bge	1d9cc <__assert_fail@plt+0xc430>
   1d9ac:	ldr	r0, [fp, #-16]
   1d9b0:	bl	112c0 <iswcntrl@plt>
   1d9b4:	mov	r3, r0
   1d9b8:	cmp	r3, #0
   1d9bc:	moveq	r3, #1
   1d9c0:	movne	r3, #0
   1d9c4:	uxtb	r3, r3
   1d9c8:	b	1d9d0 <__assert_fail@plt+0xc434>
   1d9cc:	ldr	r3, [fp, #-8]
   1d9d0:	mov	r0, r3
   1d9d4:	sub	sp, fp, #4
   1d9d8:	pop	{fp, pc}
   1d9dc:	push	{fp, lr}
   1d9e0:	add	fp, sp, #4
   1d9e4:	sub	sp, sp, #8
   1d9e8:	str	r0, [fp, #-8]
   1d9ec:	str	r1, [fp, #-12]
   1d9f0:	ldr	r3, [fp, #-12]
   1d9f4:	ldr	r2, [r3]
   1d9f8:	ldr	r3, [fp, #-12]
   1d9fc:	add	r3, r3, #16
   1da00:	cmp	r2, r3
   1da04:	bne	1da3c <__assert_fail@plt+0xc4a0>
   1da08:	ldr	r3, [fp, #-8]
   1da0c:	add	r0, r3, #16
   1da10:	ldr	r3, [fp, #-12]
   1da14:	add	r1, r3, #16
   1da18:	ldr	r3, [fp, #-12]
   1da1c:	ldr	r3, [r3, #4]
   1da20:	mov	r2, r3
   1da24:	bl	11248 <memcpy@plt>
   1da28:	ldr	r3, [fp, #-8]
   1da2c:	add	r2, r3, #16
   1da30:	ldr	r3, [fp, #-8]
   1da34:	str	r2, [r3]
   1da38:	b	1da4c <__assert_fail@plt+0xc4b0>
   1da3c:	ldr	r3, [fp, #-12]
   1da40:	ldr	r2, [r3]
   1da44:	ldr	r3, [fp, #-8]
   1da48:	str	r2, [r3]
   1da4c:	ldr	r3, [fp, #-12]
   1da50:	ldr	r2, [r3, #4]
   1da54:	ldr	r3, [fp, #-8]
   1da58:	str	r2, [r3, #4]
   1da5c:	ldr	r3, [fp, #-12]
   1da60:	ldrb	r2, [r3, #8]
   1da64:	ldr	r3, [fp, #-8]
   1da68:	strb	r2, [r3, #8]
   1da6c:	ldr	r3, [fp, #-8]
   1da70:	ldrb	r3, [r3, #8]
   1da74:	cmp	r3, #0
   1da78:	beq	1da8c <__assert_fail@plt+0xc4f0>
   1da7c:	ldr	r3, [fp, #-12]
   1da80:	ldr	r2, [r3, #12]
   1da84:	ldr	r3, [fp, #-8]
   1da88:	str	r2, [r3, #12]
   1da8c:	nop			; (mov r0, r0)
   1da90:	sub	sp, fp, #4
   1da94:	pop	{fp, pc}
   1da98:	push	{fp}		; (str fp, [sp, #-4]!)
   1da9c:	add	fp, sp, #0
   1daa0:	sub	sp, sp, #12
   1daa4:	mov	r3, r0
   1daa8:	strb	r3, [fp, #-5]
   1daac:	ldrb	r3, [fp, #-5]
   1dab0:	lsr	r3, r3, #5
   1dab4:	uxtb	r3, r3
   1dab8:	mov	r2, r3
   1dabc:	ldr	r3, [pc, #48]	; 1daf4 <__assert_fail@plt+0xc558>
   1dac0:	ldr	r2, [r3, r2, lsl #2]
   1dac4:	ldrb	r3, [fp, #-5]
   1dac8:	and	r3, r3, #31
   1dacc:	lsr	r3, r2, r3
   1dad0:	and	r3, r3, #1
   1dad4:	cmp	r3, #0
   1dad8:	movne	r3, #1
   1dadc:	moveq	r3, #0
   1dae0:	uxtb	r3, r3
   1dae4:	mov	r0, r3
   1dae8:	add	sp, fp, #0
   1daec:	pop	{fp}		; (ldr fp, [sp], #4)
   1daf0:	bx	lr
   1daf4:	andeq	r0, r2, r0, lsr #23
   1daf8:	push	{fp, lr}
   1dafc:	add	fp, sp, #4
   1db00:	sub	sp, sp, #72	; 0x48
   1db04:	str	r0, [fp, #-72]	; 0xffffffb8
   1db08:	bl	11314 <__ctype_get_mb_cur_max@plt>
   1db0c:	mov	r3, r0
   1db10:	cmp	r3, #1
   1db14:	bls	1dbc0 <__assert_fail@plt+0xc624>
   1db18:	mov	r3, #0
   1db1c:	str	r3, [fp, #-8]
   1db20:	ldr	r3, [fp, #-72]	; 0xffffffb8
   1db24:	str	r3, [fp, #-48]	; 0xffffffd0
   1db28:	mov	r3, #0
   1db2c:	strb	r3, [fp, #-64]	; 0xffffffc0
   1db30:	sub	r3, fp, #64	; 0x40
   1db34:	add	r3, r3, #4
   1db38:	mov	r2, #8
   1db3c:	mov	r1, #0
   1db40:	mov	r0, r3
   1db44:	bl	11440 <memset@plt>
   1db48:	mov	r3, #0
   1db4c:	strb	r3, [fp, #-52]	; 0xffffffcc
   1db50:	b	1db78 <__assert_fail@plt+0xc5dc>
   1db54:	ldr	r3, [fp, #-8]
   1db58:	add	r3, r3, #1
   1db5c:	str	r3, [fp, #-8]
   1db60:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1db64:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1db68:	add	r3, r2, r3
   1db6c:	str	r3, [fp, #-48]	; 0xffffffd0
   1db70:	mov	r3, #0
   1db74:	strb	r3, [fp, #-52]	; 0xffffffcc
   1db78:	sub	r3, fp, #64	; 0x40
   1db7c:	mov	r0, r3
   1db80:	bl	182d0 <__assert_fail@plt+0x6d34>
   1db84:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   1db88:	eor	r3, r3, #1
   1db8c:	uxtb	r3, r3
   1db90:	cmp	r3, #0
   1db94:	bne	1dba4 <__assert_fail@plt+0xc608>
   1db98:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1db9c:	cmp	r3, #0
   1dba0:	beq	1dbac <__assert_fail@plt+0xc610>
   1dba4:	mov	r3, #1
   1dba8:	b	1dbb0 <__assert_fail@plt+0xc614>
   1dbac:	mov	r3, #0
   1dbb0:	cmp	r3, #0
   1dbb4:	bne	1db54 <__assert_fail@plt+0xc5b8>
   1dbb8:	ldr	r3, [fp, #-8]
   1dbbc:	b	1dbcc <__assert_fail@plt+0xc630>
   1dbc0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1dbc4:	bl	113ec <strlen@plt>
   1dbc8:	mov	r3, r0
   1dbcc:	mov	r0, r3
   1dbd0:	sub	sp, fp, #4
   1dbd4:	pop	{fp, pc}
   1dbd8:	push	{fp, lr}
   1dbdc:	add	fp, sp, #4
   1dbe0:	sub	sp, sp, #16
   1dbe4:	str	r0, [fp, #-16]
   1dbe8:	mov	r1, #0
   1dbec:	ldr	r0, [fp, #-16]
   1dbf0:	bl	114b8 <setlocale@plt>
   1dbf4:	str	r0, [fp, #-8]
   1dbf8:	ldr	r3, [fp, #-8]
   1dbfc:	mov	r0, r3
   1dc00:	sub	sp, fp, #4
   1dc04:	pop	{fp, pc}
   1dc08:	push	{fp, lr}
   1dc0c:	add	fp, sp, #4
   1dc10:	sub	sp, sp, #24
   1dc14:	str	r0, [fp, #-16]
   1dc18:	str	r1, [fp, #-20]	; 0xffffffec
   1dc1c:	str	r2, [fp, #-24]	; 0xffffffe8
   1dc20:	ldr	r0, [fp, #-16]
   1dc24:	bl	1dbd8 <__assert_fail@plt+0xc63c>
   1dc28:	str	r0, [fp, #-8]
   1dc2c:	ldr	r3, [fp, #-8]
   1dc30:	cmp	r3, #0
   1dc34:	bne	1dc58 <__assert_fail@plt+0xc6bc>
   1dc38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1dc3c:	cmp	r3, #0
   1dc40:	beq	1dc50 <__assert_fail@plt+0xc6b4>
   1dc44:	ldr	r3, [fp, #-20]	; 0xffffffec
   1dc48:	mov	r2, #0
   1dc4c:	strb	r2, [r3]
   1dc50:	mov	r3, #22
   1dc54:	b	1dcd4 <__assert_fail@plt+0xc738>
   1dc58:	ldr	r0, [fp, #-8]
   1dc5c:	bl	113ec <strlen@plt>
   1dc60:	str	r0, [fp, #-12]
   1dc64:	ldr	r2, [fp, #-12]
   1dc68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1dc6c:	cmp	r2, r3
   1dc70:	bcs	1dc94 <__assert_fail@plt+0xc6f8>
   1dc74:	ldr	r3, [fp, #-12]
   1dc78:	add	r3, r3, #1
   1dc7c:	mov	r2, r3
   1dc80:	ldr	r1, [fp, #-8]
   1dc84:	ldr	r0, [fp, #-20]	; 0xffffffec
   1dc88:	bl	11248 <memcpy@plt>
   1dc8c:	mov	r3, #0
   1dc90:	b	1dcd4 <__assert_fail@plt+0xc738>
   1dc94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1dc98:	cmp	r3, #0
   1dc9c:	beq	1dcd0 <__assert_fail@plt+0xc734>
   1dca0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1dca4:	sub	r3, r3, #1
   1dca8:	mov	r2, r3
   1dcac:	ldr	r1, [fp, #-8]
   1dcb0:	ldr	r0, [fp, #-20]	; 0xffffffec
   1dcb4:	bl	11248 <memcpy@plt>
   1dcb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1dcbc:	sub	r3, r3, #1
   1dcc0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1dcc4:	add	r3, r2, r3
   1dcc8:	mov	r2, #0
   1dccc:	strb	r2, [r3]
   1dcd0:	mov	r3, #34	; 0x22
   1dcd4:	mov	r0, r3
   1dcd8:	sub	sp, fp, #4
   1dcdc:	pop	{fp, pc}
   1dce0:	push	{fp, lr}
   1dce4:	add	fp, sp, #4
   1dce8:	sub	sp, sp, #16
   1dcec:	str	r0, [fp, #-8]
   1dcf0:	str	r1, [fp, #-12]
   1dcf4:	str	r2, [fp, #-16]
   1dcf8:	ldr	r2, [fp, #-16]
   1dcfc:	ldr	r1, [fp, #-12]
   1dd00:	ldr	r0, [fp, #-8]
   1dd04:	bl	1dc08 <__assert_fail@plt+0xc66c>
   1dd08:	mov	r3, r0
   1dd0c:	mov	r0, r3
   1dd10:	sub	sp, fp, #4
   1dd14:	pop	{fp, pc}
   1dd18:	push	{fp, lr}
   1dd1c:	add	fp, sp, #4
   1dd20:	sub	sp, sp, #8
   1dd24:	str	r0, [fp, #-8]
   1dd28:	ldr	r0, [fp, #-8]
   1dd2c:	bl	1dbd8 <__assert_fail@plt+0xc63c>
   1dd30:	mov	r3, r0
   1dd34:	mov	r0, r3
   1dd38:	sub	sp, fp, #4
   1dd3c:	pop	{fp, pc}
   1dd40:	push	{fp, lr}
   1dd44:	add	fp, sp, #4
   1dd48:	sub	sp, sp, #8
   1dd4c:	str	r0, [fp, #-8]
   1dd50:	mov	r2, #3
   1dd54:	mov	r1, #0
   1dd58:	ldr	r0, [fp, #-8]
   1dd5c:	bl	1cadc <__assert_fail@plt+0xb540>
   1dd60:	mov	r3, r0
   1dd64:	mov	r0, r3
   1dd68:	sub	sp, fp, #4
   1dd6c:	pop	{fp, pc}
   1dd70:	push	{fp}		; (str fp, [sp, #-4]!)
   1dd74:	add	fp, sp, #0
   1dd78:	sub	sp, sp, #12
   1dd7c:	str	r0, [fp, #-8]
   1dd80:	ldr	r3, [fp, #-8]
   1dd84:	cmp	r3, #90	; 0x5a
   1dd88:	bgt	1dda4 <__assert_fail@plt+0xc808>
   1dd8c:	cmp	r3, #65	; 0x41
   1dd90:	bge	1ddb0 <__assert_fail@plt+0xc814>
   1dd94:	sub	r3, r3, #48	; 0x30
   1dd98:	cmp	r3, #9
   1dd9c:	bhi	1ddb8 <__assert_fail@plt+0xc81c>
   1dda0:	b	1ddb0 <__assert_fail@plt+0xc814>
   1dda4:	sub	r3, r3, #97	; 0x61
   1dda8:	cmp	r3, #25
   1ddac:	bhi	1ddb8 <__assert_fail@plt+0xc81c>
   1ddb0:	mov	r3, #1
   1ddb4:	b	1ddbc <__assert_fail@plt+0xc820>
   1ddb8:	mov	r3, #0
   1ddbc:	mov	r0, r3
   1ddc0:	add	sp, fp, #0
   1ddc4:	pop	{fp}		; (ldr fp, [sp], #4)
   1ddc8:	bx	lr
   1ddcc:	push	{fp}		; (str fp, [sp, #-4]!)
   1ddd0:	add	fp, sp, #0
   1ddd4:	sub	sp, sp, #12
   1ddd8:	str	r0, [fp, #-8]
   1dddc:	ldr	r3, [fp, #-8]
   1dde0:	cmp	r3, #65	; 0x41
   1dde4:	blt	1de04 <__assert_fail@plt+0xc868>
   1dde8:	cmp	r3, #90	; 0x5a
   1ddec:	ble	1ddfc <__assert_fail@plt+0xc860>
   1ddf0:	sub	r3, r3, #97	; 0x61
   1ddf4:	cmp	r3, #25
   1ddf8:	bhi	1de04 <__assert_fail@plt+0xc868>
   1ddfc:	mov	r3, #1
   1de00:	b	1de08 <__assert_fail@plt+0xc86c>
   1de04:	mov	r3, #0
   1de08:	mov	r0, r3
   1de0c:	add	sp, fp, #0
   1de10:	pop	{fp}		; (ldr fp, [sp], #4)
   1de14:	bx	lr
   1de18:	push	{fp}		; (str fp, [sp, #-4]!)
   1de1c:	add	fp, sp, #0
   1de20:	sub	sp, sp, #12
   1de24:	str	r0, [fp, #-8]
   1de28:	ldr	r3, [fp, #-8]
   1de2c:	add	r3, r3, #0
   1de30:	cmp	r3, #127	; 0x7f
   1de34:	bhi	1de40 <__assert_fail@plt+0xc8a4>
   1de38:	mov	r3, #1
   1de3c:	b	1de44 <__assert_fail@plt+0xc8a8>
   1de40:	mov	r3, #0
   1de44:	mov	r0, r3
   1de48:	add	sp, fp, #0
   1de4c:	pop	{fp}		; (ldr fp, [sp], #4)
   1de50:	bx	lr
   1de54:	push	{fp}		; (str fp, [sp, #-4]!)
   1de58:	add	fp, sp, #0
   1de5c:	sub	sp, sp, #12
   1de60:	str	r0, [fp, #-8]
   1de64:	ldr	r3, [fp, #-8]
   1de68:	cmp	r3, #32
   1de6c:	beq	1de7c <__assert_fail@plt+0xc8e0>
   1de70:	ldr	r3, [fp, #-8]
   1de74:	cmp	r3, #9
   1de78:	bne	1de84 <__assert_fail@plt+0xc8e8>
   1de7c:	mov	r3, #1
   1de80:	b	1de88 <__assert_fail@plt+0xc8ec>
   1de84:	mov	r3, #0
   1de88:	and	r3, r3, #1
   1de8c:	uxtb	r3, r3
   1de90:	mov	r0, r3
   1de94:	add	sp, fp, #0
   1de98:	pop	{fp}		; (ldr fp, [sp], #4)
   1de9c:	bx	lr
   1dea0:	push	{fp}		; (str fp, [sp, #-4]!)
   1dea4:	add	fp, sp, #0
   1dea8:	sub	sp, sp, #12
   1deac:	str	r0, [fp, #-8]
   1deb0:	ldr	r3, [fp, #-8]
   1deb4:	cmp	r3, #0
   1deb8:	blt	1ded4 <__assert_fail@plt+0xc938>
   1debc:	cmp	r3, #31
   1dec0:	ble	1decc <__assert_fail@plt+0xc930>
   1dec4:	cmp	r3, #127	; 0x7f
   1dec8:	bne	1ded4 <__assert_fail@plt+0xc938>
   1decc:	mov	r3, #1
   1ded0:	b	1ded8 <__assert_fail@plt+0xc93c>
   1ded4:	mov	r3, #0
   1ded8:	mov	r0, r3
   1dedc:	add	sp, fp, #0
   1dee0:	pop	{fp}		; (ldr fp, [sp], #4)
   1dee4:	bx	lr
   1dee8:	push	{fp}		; (str fp, [sp, #-4]!)
   1deec:	add	fp, sp, #0
   1def0:	sub	sp, sp, #12
   1def4:	str	r0, [fp, #-8]
   1def8:	ldr	r3, [fp, #-8]
   1defc:	sub	r3, r3, #48	; 0x30
   1df00:	cmp	r3, #9
   1df04:	bhi	1df10 <__assert_fail@plt+0xc974>
   1df08:	mov	r3, #1
   1df0c:	b	1df14 <__assert_fail@plt+0xc978>
   1df10:	mov	r3, #0
   1df14:	mov	r0, r3
   1df18:	add	sp, fp, #0
   1df1c:	pop	{fp}		; (ldr fp, [sp], #4)
   1df20:	bx	lr
   1df24:	push	{fp}		; (str fp, [sp, #-4]!)
   1df28:	add	fp, sp, #0
   1df2c:	sub	sp, sp, #12
   1df30:	str	r0, [fp, #-8]
   1df34:	ldr	r3, [fp, #-8]
   1df38:	sub	r3, r3, #33	; 0x21
   1df3c:	cmp	r3, #93	; 0x5d
   1df40:	bhi	1df4c <__assert_fail@plt+0xc9b0>
   1df44:	mov	r3, #1
   1df48:	b	1df50 <__assert_fail@plt+0xc9b4>
   1df4c:	mov	r3, #0
   1df50:	mov	r0, r3
   1df54:	add	sp, fp, #0
   1df58:	pop	{fp}		; (ldr fp, [sp], #4)
   1df5c:	bx	lr
   1df60:	push	{fp}		; (str fp, [sp, #-4]!)
   1df64:	add	fp, sp, #0
   1df68:	sub	sp, sp, #12
   1df6c:	str	r0, [fp, #-8]
   1df70:	ldr	r3, [fp, #-8]
   1df74:	sub	r3, r3, #97	; 0x61
   1df78:	cmp	r3, #25
   1df7c:	bhi	1df88 <__assert_fail@plt+0xc9ec>
   1df80:	mov	r3, #1
   1df84:	b	1df8c <__assert_fail@plt+0xc9f0>
   1df88:	mov	r3, #0
   1df8c:	mov	r0, r3
   1df90:	add	sp, fp, #0
   1df94:	pop	{fp}		; (ldr fp, [sp], #4)
   1df98:	bx	lr
   1df9c:	push	{fp}		; (str fp, [sp, #-4]!)
   1dfa0:	add	fp, sp, #0
   1dfa4:	sub	sp, sp, #12
   1dfa8:	str	r0, [fp, #-8]
   1dfac:	ldr	r3, [fp, #-8]
   1dfb0:	sub	r3, r3, #32
   1dfb4:	cmp	r3, #94	; 0x5e
   1dfb8:	bhi	1dfc4 <__assert_fail@plt+0xca28>
   1dfbc:	mov	r3, #1
   1dfc0:	b	1dfc8 <__assert_fail@plt+0xca2c>
   1dfc4:	mov	r3, #0
   1dfc8:	mov	r0, r3
   1dfcc:	add	sp, fp, #0
   1dfd0:	pop	{fp}		; (ldr fp, [sp], #4)
   1dfd4:	bx	lr
   1dfd8:	push	{fp}		; (str fp, [sp, #-4]!)
   1dfdc:	add	fp, sp, #0
   1dfe0:	sub	sp, sp, #12
   1dfe4:	str	r0, [fp, #-8]
   1dfe8:	ldr	r3, [fp, #-8]
   1dfec:	cmp	r3, #64	; 0x40
   1dff0:	bgt	1e00c <__assert_fail@plt+0xca70>
   1dff4:	cmp	r3, #58	; 0x3a
   1dff8:	bge	1e028 <__assert_fail@plt+0xca8c>
   1dffc:	sub	r3, r3, #33	; 0x21
   1e000:	cmp	r3, #14
   1e004:	bhi	1e030 <__assert_fail@plt+0xca94>
   1e008:	b	1e028 <__assert_fail@plt+0xca8c>
   1e00c:	cmp	r3, #91	; 0x5b
   1e010:	blt	1e030 <__assert_fail@plt+0xca94>
   1e014:	cmp	r3, #96	; 0x60
   1e018:	ble	1e028 <__assert_fail@plt+0xca8c>
   1e01c:	sub	r3, r3, #123	; 0x7b
   1e020:	cmp	r3, #3
   1e024:	bhi	1e030 <__assert_fail@plt+0xca94>
   1e028:	mov	r3, #1
   1e02c:	b	1e034 <__assert_fail@plt+0xca98>
   1e030:	mov	r3, #0
   1e034:	mov	r0, r3
   1e038:	add	sp, fp, #0
   1e03c:	pop	{fp}		; (ldr fp, [sp], #4)
   1e040:	bx	lr
   1e044:	push	{fp}		; (str fp, [sp, #-4]!)
   1e048:	add	fp, sp, #0
   1e04c:	sub	sp, sp, #12
   1e050:	str	r0, [fp, #-8]
   1e054:	ldr	r3, [fp, #-8]
   1e058:	cmp	r3, #9
   1e05c:	blt	1e078 <__assert_fail@plt+0xcadc>
   1e060:	cmp	r3, #13
   1e064:	ble	1e070 <__assert_fail@plt+0xcad4>
   1e068:	cmp	r3, #32
   1e06c:	bne	1e078 <__assert_fail@plt+0xcadc>
   1e070:	mov	r3, #1
   1e074:	b	1e07c <__assert_fail@plt+0xcae0>
   1e078:	mov	r3, #0
   1e07c:	mov	r0, r3
   1e080:	add	sp, fp, #0
   1e084:	pop	{fp}		; (ldr fp, [sp], #4)
   1e088:	bx	lr
   1e08c:	push	{fp}		; (str fp, [sp, #-4]!)
   1e090:	add	fp, sp, #0
   1e094:	sub	sp, sp, #12
   1e098:	str	r0, [fp, #-8]
   1e09c:	ldr	r3, [fp, #-8]
   1e0a0:	sub	r3, r3, #65	; 0x41
   1e0a4:	cmp	r3, #25
   1e0a8:	bhi	1e0b4 <__assert_fail@plt+0xcb18>
   1e0ac:	mov	r3, #1
   1e0b0:	b	1e0b8 <__assert_fail@plt+0xcb1c>
   1e0b4:	mov	r3, #0
   1e0b8:	mov	r0, r3
   1e0bc:	add	sp, fp, #0
   1e0c0:	pop	{fp}		; (ldr fp, [sp], #4)
   1e0c4:	bx	lr
   1e0c8:	push	{fp}		; (str fp, [sp, #-4]!)
   1e0cc:	add	fp, sp, #0
   1e0d0:	sub	sp, sp, #12
   1e0d4:	str	r0, [fp, #-8]
   1e0d8:	ldr	r3, [fp, #-8]
   1e0dc:	sub	r3, r3, #48	; 0x30
   1e0e0:	cmp	r3, #54	; 0x36
   1e0e4:	ldrls	pc, [pc, r3, lsl #2]
   1e0e8:	b	1e1d0 <__assert_fail@plt+0xcc34>
   1e0ec:	andeq	lr, r1, r8, asr #3
   1e0f0:	andeq	lr, r1, r8, asr #3
   1e0f4:	andeq	lr, r1, r8, asr #3
   1e0f8:	andeq	lr, r1, r8, asr #3
   1e0fc:	andeq	lr, r1, r8, asr #3
   1e100:	andeq	lr, r1, r8, asr #3
   1e104:	andeq	lr, r1, r8, asr #3
   1e108:	andeq	lr, r1, r8, asr #3
   1e10c:	andeq	lr, r1, r8, asr #3
   1e110:	andeq	lr, r1, r8, asr #3
   1e114:	ldrdeq	lr, [r1], -r0
   1e118:	ldrdeq	lr, [r1], -r0
   1e11c:	ldrdeq	lr, [r1], -r0
   1e120:	ldrdeq	lr, [r1], -r0
   1e124:	ldrdeq	lr, [r1], -r0
   1e128:	ldrdeq	lr, [r1], -r0
   1e12c:	ldrdeq	lr, [r1], -r0
   1e130:	andeq	lr, r1, r8, asr #3
   1e134:	andeq	lr, r1, r8, asr #3
   1e138:	andeq	lr, r1, r8, asr #3
   1e13c:	andeq	lr, r1, r8, asr #3
   1e140:	andeq	lr, r1, r8, asr #3
   1e144:	andeq	lr, r1, r8, asr #3
   1e148:	ldrdeq	lr, [r1], -r0
   1e14c:	ldrdeq	lr, [r1], -r0
   1e150:	ldrdeq	lr, [r1], -r0
   1e154:	ldrdeq	lr, [r1], -r0
   1e158:	ldrdeq	lr, [r1], -r0
   1e15c:	ldrdeq	lr, [r1], -r0
   1e160:	ldrdeq	lr, [r1], -r0
   1e164:	ldrdeq	lr, [r1], -r0
   1e168:	ldrdeq	lr, [r1], -r0
   1e16c:	ldrdeq	lr, [r1], -r0
   1e170:	ldrdeq	lr, [r1], -r0
   1e174:	ldrdeq	lr, [r1], -r0
   1e178:	ldrdeq	lr, [r1], -r0
   1e17c:	ldrdeq	lr, [r1], -r0
   1e180:	ldrdeq	lr, [r1], -r0
   1e184:	ldrdeq	lr, [r1], -r0
   1e188:	ldrdeq	lr, [r1], -r0
   1e18c:	ldrdeq	lr, [r1], -r0
   1e190:	ldrdeq	lr, [r1], -r0
   1e194:	ldrdeq	lr, [r1], -r0
   1e198:	ldrdeq	lr, [r1], -r0
   1e19c:	ldrdeq	lr, [r1], -r0
   1e1a0:	ldrdeq	lr, [r1], -r0
   1e1a4:	ldrdeq	lr, [r1], -r0
   1e1a8:	ldrdeq	lr, [r1], -r0
   1e1ac:	ldrdeq	lr, [r1], -r0
   1e1b0:	andeq	lr, r1, r8, asr #3
   1e1b4:	andeq	lr, r1, r8, asr #3
   1e1b8:	andeq	lr, r1, r8, asr #3
   1e1bc:	andeq	lr, r1, r8, asr #3
   1e1c0:	andeq	lr, r1, r8, asr #3
   1e1c4:	andeq	lr, r1, r8, asr #3
   1e1c8:	mov	r3, #1
   1e1cc:	b	1e1d4 <__assert_fail@plt+0xcc38>
   1e1d0:	mov	r3, #0
   1e1d4:	mov	r0, r3
   1e1d8:	add	sp, fp, #0
   1e1dc:	pop	{fp}		; (ldr fp, [sp], #4)
   1e1e0:	bx	lr
   1e1e4:	push	{fp}		; (str fp, [sp, #-4]!)
   1e1e8:	add	fp, sp, #0
   1e1ec:	sub	sp, sp, #12
   1e1f0:	str	r0, [fp, #-8]
   1e1f4:	ldr	r3, [fp, #-8]
   1e1f8:	sub	r3, r3, #65	; 0x41
   1e1fc:	cmp	r3, #25
   1e200:	bhi	1e210 <__assert_fail@plt+0xcc74>
   1e204:	ldr	r3, [fp, #-8]
   1e208:	add	r3, r3, #32
   1e20c:	b	1e214 <__assert_fail@plt+0xcc78>
   1e210:	ldr	r3, [fp, #-8]
   1e214:	mov	r0, r3
   1e218:	add	sp, fp, #0
   1e21c:	pop	{fp}		; (ldr fp, [sp], #4)
   1e220:	bx	lr
   1e224:	push	{fp}		; (str fp, [sp, #-4]!)
   1e228:	add	fp, sp, #0
   1e22c:	sub	sp, sp, #12
   1e230:	str	r0, [fp, #-8]
   1e234:	ldr	r3, [fp, #-8]
   1e238:	sub	r3, r3, #97	; 0x61
   1e23c:	cmp	r3, #25
   1e240:	bhi	1e250 <__assert_fail@plt+0xccb4>
   1e244:	ldr	r3, [fp, #-8]
   1e248:	sub	r3, r3, #32
   1e24c:	b	1e254 <__assert_fail@plt+0xccb8>
   1e250:	ldr	r3, [fp, #-8]
   1e254:	mov	r0, r3
   1e258:	add	sp, fp, #0
   1e25c:	pop	{fp}		; (ldr fp, [sp], #4)
   1e260:	bx	lr
   1e264:	subs	r2, r1, #1
   1e268:	bxeq	lr
   1e26c:	bcc	1e444 <__assert_fail@plt+0xcea8>
   1e270:	cmp	r0, r1
   1e274:	bls	1e428 <__assert_fail@plt+0xce8c>
   1e278:	tst	r1, r2
   1e27c:	beq	1e434 <__assert_fail@plt+0xce98>
   1e280:	clz	r3, r0
   1e284:	clz	r2, r1
   1e288:	sub	r3, r2, r3
   1e28c:	rsbs	r3, r3, #31
   1e290:	addne	r3, r3, r3, lsl #1
   1e294:	mov	r2, #0
   1e298:	addne	pc, pc, r3, lsl #2
   1e29c:	nop			; (mov r0, r0)
   1e2a0:	cmp	r0, r1, lsl #31
   1e2a4:	adc	r2, r2, r2
   1e2a8:	subcs	r0, r0, r1, lsl #31
   1e2ac:	cmp	r0, r1, lsl #30
   1e2b0:	adc	r2, r2, r2
   1e2b4:	subcs	r0, r0, r1, lsl #30
   1e2b8:	cmp	r0, r1, lsl #29
   1e2bc:	adc	r2, r2, r2
   1e2c0:	subcs	r0, r0, r1, lsl #29
   1e2c4:	cmp	r0, r1, lsl #28
   1e2c8:	adc	r2, r2, r2
   1e2cc:	subcs	r0, r0, r1, lsl #28
   1e2d0:	cmp	r0, r1, lsl #27
   1e2d4:	adc	r2, r2, r2
   1e2d8:	subcs	r0, r0, r1, lsl #27
   1e2dc:	cmp	r0, r1, lsl #26
   1e2e0:	adc	r2, r2, r2
   1e2e4:	subcs	r0, r0, r1, lsl #26
   1e2e8:	cmp	r0, r1, lsl #25
   1e2ec:	adc	r2, r2, r2
   1e2f0:	subcs	r0, r0, r1, lsl #25
   1e2f4:	cmp	r0, r1, lsl #24
   1e2f8:	adc	r2, r2, r2
   1e2fc:	subcs	r0, r0, r1, lsl #24
   1e300:	cmp	r0, r1, lsl #23
   1e304:	adc	r2, r2, r2
   1e308:	subcs	r0, r0, r1, lsl #23
   1e30c:	cmp	r0, r1, lsl #22
   1e310:	adc	r2, r2, r2
   1e314:	subcs	r0, r0, r1, lsl #22
   1e318:	cmp	r0, r1, lsl #21
   1e31c:	adc	r2, r2, r2
   1e320:	subcs	r0, r0, r1, lsl #21
   1e324:	cmp	r0, r1, lsl #20
   1e328:	adc	r2, r2, r2
   1e32c:	subcs	r0, r0, r1, lsl #20
   1e330:	cmp	r0, r1, lsl #19
   1e334:	adc	r2, r2, r2
   1e338:	subcs	r0, r0, r1, lsl #19
   1e33c:	cmp	r0, r1, lsl #18
   1e340:	adc	r2, r2, r2
   1e344:	subcs	r0, r0, r1, lsl #18
   1e348:	cmp	r0, r1, lsl #17
   1e34c:	adc	r2, r2, r2
   1e350:	subcs	r0, r0, r1, lsl #17
   1e354:	cmp	r0, r1, lsl #16
   1e358:	adc	r2, r2, r2
   1e35c:	subcs	r0, r0, r1, lsl #16
   1e360:	cmp	r0, r1, lsl #15
   1e364:	adc	r2, r2, r2
   1e368:	subcs	r0, r0, r1, lsl #15
   1e36c:	cmp	r0, r1, lsl #14
   1e370:	adc	r2, r2, r2
   1e374:	subcs	r0, r0, r1, lsl #14
   1e378:	cmp	r0, r1, lsl #13
   1e37c:	adc	r2, r2, r2
   1e380:	subcs	r0, r0, r1, lsl #13
   1e384:	cmp	r0, r1, lsl #12
   1e388:	adc	r2, r2, r2
   1e38c:	subcs	r0, r0, r1, lsl #12
   1e390:	cmp	r0, r1, lsl #11
   1e394:	adc	r2, r2, r2
   1e398:	subcs	r0, r0, r1, lsl #11
   1e39c:	cmp	r0, r1, lsl #10
   1e3a0:	adc	r2, r2, r2
   1e3a4:	subcs	r0, r0, r1, lsl #10
   1e3a8:	cmp	r0, r1, lsl #9
   1e3ac:	adc	r2, r2, r2
   1e3b0:	subcs	r0, r0, r1, lsl #9
   1e3b4:	cmp	r0, r1, lsl #8
   1e3b8:	adc	r2, r2, r2
   1e3bc:	subcs	r0, r0, r1, lsl #8
   1e3c0:	cmp	r0, r1, lsl #7
   1e3c4:	adc	r2, r2, r2
   1e3c8:	subcs	r0, r0, r1, lsl #7
   1e3cc:	cmp	r0, r1, lsl #6
   1e3d0:	adc	r2, r2, r2
   1e3d4:	subcs	r0, r0, r1, lsl #6
   1e3d8:	cmp	r0, r1, lsl #5
   1e3dc:	adc	r2, r2, r2
   1e3e0:	subcs	r0, r0, r1, lsl #5
   1e3e4:	cmp	r0, r1, lsl #4
   1e3e8:	adc	r2, r2, r2
   1e3ec:	subcs	r0, r0, r1, lsl #4
   1e3f0:	cmp	r0, r1, lsl #3
   1e3f4:	adc	r2, r2, r2
   1e3f8:	subcs	r0, r0, r1, lsl #3
   1e3fc:	cmp	r0, r1, lsl #2
   1e400:	adc	r2, r2, r2
   1e404:	subcs	r0, r0, r1, lsl #2
   1e408:	cmp	r0, r1, lsl #1
   1e40c:	adc	r2, r2, r2
   1e410:	subcs	r0, r0, r1, lsl #1
   1e414:	cmp	r0, r1
   1e418:	adc	r2, r2, r2
   1e41c:	subcs	r0, r0, r1
   1e420:	mov	r0, r2
   1e424:	bx	lr
   1e428:	moveq	r0, #1
   1e42c:	movne	r0, #0
   1e430:	bx	lr
   1e434:	clz	r2, r1
   1e438:	rsb	r2, r2, #31
   1e43c:	lsr	r0, r0, r2
   1e440:	bx	lr
   1e444:	cmp	r0, #0
   1e448:	mvnne	r0, #0
   1e44c:	b	1e6b0 <__assert_fail@plt+0xd114>
   1e450:	cmp	r1, #0
   1e454:	beq	1e444 <__assert_fail@plt+0xcea8>
   1e458:	push	{r0, r1, lr}
   1e45c:	bl	1e264 <__assert_fail@plt+0xccc8>
   1e460:	pop	{r1, r2, lr}
   1e464:	mul	r3, r2, r0
   1e468:	sub	r1, r1, r3
   1e46c:	bx	lr
   1e470:	cmp	r1, #0
   1e474:	beq	1e680 <__assert_fail@plt+0xd0e4>
   1e478:	eor	ip, r0, r1
   1e47c:	rsbmi	r1, r1, #0
   1e480:	subs	r2, r1, #1
   1e484:	beq	1e64c <__assert_fail@plt+0xd0b0>
   1e488:	movs	r3, r0
   1e48c:	rsbmi	r3, r0, #0
   1e490:	cmp	r3, r1
   1e494:	bls	1e658 <__assert_fail@plt+0xd0bc>
   1e498:	tst	r1, r2
   1e49c:	beq	1e668 <__assert_fail@plt+0xd0cc>
   1e4a0:	clz	r2, r3
   1e4a4:	clz	r0, r1
   1e4a8:	sub	r2, r0, r2
   1e4ac:	rsbs	r2, r2, #31
   1e4b0:	addne	r2, r2, r2, lsl #1
   1e4b4:	mov	r0, #0
   1e4b8:	addne	pc, pc, r2, lsl #2
   1e4bc:	nop			; (mov r0, r0)
   1e4c0:	cmp	r3, r1, lsl #31
   1e4c4:	adc	r0, r0, r0
   1e4c8:	subcs	r3, r3, r1, lsl #31
   1e4cc:	cmp	r3, r1, lsl #30
   1e4d0:	adc	r0, r0, r0
   1e4d4:	subcs	r3, r3, r1, lsl #30
   1e4d8:	cmp	r3, r1, lsl #29
   1e4dc:	adc	r0, r0, r0
   1e4e0:	subcs	r3, r3, r1, lsl #29
   1e4e4:	cmp	r3, r1, lsl #28
   1e4e8:	adc	r0, r0, r0
   1e4ec:	subcs	r3, r3, r1, lsl #28
   1e4f0:	cmp	r3, r1, lsl #27
   1e4f4:	adc	r0, r0, r0
   1e4f8:	subcs	r3, r3, r1, lsl #27
   1e4fc:	cmp	r3, r1, lsl #26
   1e500:	adc	r0, r0, r0
   1e504:	subcs	r3, r3, r1, lsl #26
   1e508:	cmp	r3, r1, lsl #25
   1e50c:	adc	r0, r0, r0
   1e510:	subcs	r3, r3, r1, lsl #25
   1e514:	cmp	r3, r1, lsl #24
   1e518:	adc	r0, r0, r0
   1e51c:	subcs	r3, r3, r1, lsl #24
   1e520:	cmp	r3, r1, lsl #23
   1e524:	adc	r0, r0, r0
   1e528:	subcs	r3, r3, r1, lsl #23
   1e52c:	cmp	r3, r1, lsl #22
   1e530:	adc	r0, r0, r0
   1e534:	subcs	r3, r3, r1, lsl #22
   1e538:	cmp	r3, r1, lsl #21
   1e53c:	adc	r0, r0, r0
   1e540:	subcs	r3, r3, r1, lsl #21
   1e544:	cmp	r3, r1, lsl #20
   1e548:	adc	r0, r0, r0
   1e54c:	subcs	r3, r3, r1, lsl #20
   1e550:	cmp	r3, r1, lsl #19
   1e554:	adc	r0, r0, r0
   1e558:	subcs	r3, r3, r1, lsl #19
   1e55c:	cmp	r3, r1, lsl #18
   1e560:	adc	r0, r0, r0
   1e564:	subcs	r3, r3, r1, lsl #18
   1e568:	cmp	r3, r1, lsl #17
   1e56c:	adc	r0, r0, r0
   1e570:	subcs	r3, r3, r1, lsl #17
   1e574:	cmp	r3, r1, lsl #16
   1e578:	adc	r0, r0, r0
   1e57c:	subcs	r3, r3, r1, lsl #16
   1e580:	cmp	r3, r1, lsl #15
   1e584:	adc	r0, r0, r0
   1e588:	subcs	r3, r3, r1, lsl #15
   1e58c:	cmp	r3, r1, lsl #14
   1e590:	adc	r0, r0, r0
   1e594:	subcs	r3, r3, r1, lsl #14
   1e598:	cmp	r3, r1, lsl #13
   1e59c:	adc	r0, r0, r0
   1e5a0:	subcs	r3, r3, r1, lsl #13
   1e5a4:	cmp	r3, r1, lsl #12
   1e5a8:	adc	r0, r0, r0
   1e5ac:	subcs	r3, r3, r1, lsl #12
   1e5b0:	cmp	r3, r1, lsl #11
   1e5b4:	adc	r0, r0, r0
   1e5b8:	subcs	r3, r3, r1, lsl #11
   1e5bc:	cmp	r3, r1, lsl #10
   1e5c0:	adc	r0, r0, r0
   1e5c4:	subcs	r3, r3, r1, lsl #10
   1e5c8:	cmp	r3, r1, lsl #9
   1e5cc:	adc	r0, r0, r0
   1e5d0:	subcs	r3, r3, r1, lsl #9
   1e5d4:	cmp	r3, r1, lsl #8
   1e5d8:	adc	r0, r0, r0
   1e5dc:	subcs	r3, r3, r1, lsl #8
   1e5e0:	cmp	r3, r1, lsl #7
   1e5e4:	adc	r0, r0, r0
   1e5e8:	subcs	r3, r3, r1, lsl #7
   1e5ec:	cmp	r3, r1, lsl #6
   1e5f0:	adc	r0, r0, r0
   1e5f4:	subcs	r3, r3, r1, lsl #6
   1e5f8:	cmp	r3, r1, lsl #5
   1e5fc:	adc	r0, r0, r0
   1e600:	subcs	r3, r3, r1, lsl #5
   1e604:	cmp	r3, r1, lsl #4
   1e608:	adc	r0, r0, r0
   1e60c:	subcs	r3, r3, r1, lsl #4
   1e610:	cmp	r3, r1, lsl #3
   1e614:	adc	r0, r0, r0
   1e618:	subcs	r3, r3, r1, lsl #3
   1e61c:	cmp	r3, r1, lsl #2
   1e620:	adc	r0, r0, r0
   1e624:	subcs	r3, r3, r1, lsl #2
   1e628:	cmp	r3, r1, lsl #1
   1e62c:	adc	r0, r0, r0
   1e630:	subcs	r3, r3, r1, lsl #1
   1e634:	cmp	r3, r1
   1e638:	adc	r0, r0, r0
   1e63c:	subcs	r3, r3, r1
   1e640:	cmp	ip, #0
   1e644:	rsbmi	r0, r0, #0
   1e648:	bx	lr
   1e64c:	teq	ip, r0
   1e650:	rsbmi	r0, r0, #0
   1e654:	bx	lr
   1e658:	movcc	r0, #0
   1e65c:	asreq	r0, ip, #31
   1e660:	orreq	r0, r0, #1
   1e664:	bx	lr
   1e668:	clz	r2, r1
   1e66c:	rsb	r2, r2, #31
   1e670:	cmp	ip, #0
   1e674:	lsr	r0, r3, r2
   1e678:	rsbmi	r0, r0, #0
   1e67c:	bx	lr
   1e680:	cmp	r0, #0
   1e684:	mvngt	r0, #-2147483648	; 0x80000000
   1e688:	movlt	r0, #-2147483648	; 0x80000000
   1e68c:	b	1e6b0 <__assert_fail@plt+0xd114>
   1e690:	cmp	r1, #0
   1e694:	beq	1e680 <__assert_fail@plt+0xd0e4>
   1e698:	push	{r0, r1, lr}
   1e69c:	bl	1e478 <__assert_fail@plt+0xcedc>
   1e6a0:	pop	{r1, r2, lr}
   1e6a4:	mul	r3, r2, r0
   1e6a8:	sub	r1, r1, r3
   1e6ac:	bx	lr
   1e6b0:	push	{r1, lr}
   1e6b4:	mov	r0, #8
   1e6b8:	bl	111d0 <raise@plt>
   1e6bc:	pop	{r1, pc}
   1e6c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e6c4:	mov	r7, r0
   1e6c8:	ldr	r6, [pc, #72]	; 1e718 <__assert_fail@plt+0xd17c>
   1e6cc:	ldr	r5, [pc, #72]	; 1e71c <__assert_fail@plt+0xd180>
   1e6d0:	add	r6, pc, r6
   1e6d4:	add	r5, pc, r5
   1e6d8:	sub	r6, r6, r5
   1e6dc:	mov	r8, r1
   1e6e0:	mov	r9, r2
   1e6e4:	bl	11198 <fdopen@plt-0x20>
   1e6e8:	asrs	r6, r6, #2
   1e6ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e6f0:	mov	r4, #0
   1e6f4:	add	r4, r4, #1
   1e6f8:	ldr	r3, [r5], #4
   1e6fc:	mov	r2, r9
   1e700:	mov	r1, r8
   1e704:	mov	r0, r7
   1e708:	blx	r3
   1e70c:	cmp	r6, r4
   1e710:	bne	1e6f4 <__assert_fail@plt+0xd158>
   1e714:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e718:	andeq	r2, r1, r8, lsr r8
   1e71c:	andeq	r2, r1, r0, lsr r8
   1e720:	bx	lr
   1e724:	ldr	r3, [pc, #12]	; 1e738 <__assert_fail@plt+0xd19c>
   1e728:	mov	r1, #0
   1e72c:	add	r3, pc, r3
   1e730:	ldr	r2, [r3]
   1e734:	b	11434 <__cxa_atexit@plt>
   1e738:	andeq	r2, r1, r0, lsr sl

Disassembly of section .fini:

0001e73c <.fini>:
   1e73c:	push	{r3, lr}
   1e740:	pop	{r3, pc}
