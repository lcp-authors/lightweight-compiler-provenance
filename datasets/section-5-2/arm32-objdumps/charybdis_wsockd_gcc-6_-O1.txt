
../repos/charybdis/wsockd/.libs/wsockd:     file format elf32-littlearm


Disassembly of section .init:

00010c60 <.init>:
   10c60:	push	{r3, lr}
   10c64:	bl	10f38 <rb_base64_encode@plt+0x48>
   10c68:	pop	{r3, pc}

Disassembly of section .plt:

00010c6c <open@plt-0x14>:
   10c6c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c70:	ldr	lr, [pc, #4]	; 10c7c <open@plt-0x4>
   10c74:	add	lr, pc, lr
   10c78:	ldr	pc, [lr, #8]!
   10c7c:	andeq	r4, r1, r4, lsl #7

00010c80 <open@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #20, 20	; 0x14000
   10c88:	ldr	pc, [ip, #900]!	; 0x384

00010c8c <sigemptyset@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #20, 20	; 0x14000
   10c94:	ldr	pc, [ip, #892]!	; 0x37c

00010c98 <strerror@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #20, 20	; 0x14000
   10ca0:	ldr	pc, [ip, #884]!	; 0x374

00010ca4 <rb_get_type@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #20, 20	; 0x14000
   10cac:	ldr	pc, [ip, #876]!	; 0x36c

00010cb0 <abort@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #20, 20	; 0x14000
   10cb8:	ldr	pc, [ip, #868]!	; 0x364

00010cbc <rb_event_addish@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #20, 20	; 0x14000
   10cc4:	ldr	pc, [ip, #860]!	; 0x35c

00010cc8 <rb_ignore_errno@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #20, 20	; 0x14000
   10cd0:	ldr	pc, [ip, #852]!	; 0x354

00010cd4 <__libc_start_main@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #20, 20	; 0x14000
   10cdc:	ldr	pc, [ip, #844]!	; 0x34c

00010ce0 <rb_setselect@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #20, 20	; 0x14000
   10ce8:	ldr	pc, [ip, #836]!	; 0x344

00010cec <__gmon_start__@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #20, 20	; 0x14000
   10cf4:	ldr	pc, [ip, #828]!	; 0x33c

00010cf8 <rb_send_fd_buf@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #20, 20	; 0x14000
   10d00:	ldr	pc, [ip, #820]!	; 0x334

00010d04 <vsnprintf@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #20, 20	; 0x14000
   10d0c:	ldr	pc, [ip, #812]!	; 0x32c

00010d10 <getenv@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #20, 20	; 0x14000
   10d18:	ldr	pc, [ip, #804]!	; 0x324

00010d1c <calloc@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #20, 20	; 0x14000
   10d24:	ldr	pc, [ip, #796]!	; 0x31c

00010d28 <rb_set_nb@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #20, 20	; 0x14000
   10d30:	ldr	pc, [ip, #788]!	; 0x314

00010d34 <memset@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #20, 20	; 0x14000
   10d3c:	ldr	pc, [ip, #780]!	; 0x30c

00010d40 <__assert_fail@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #20, 20	; 0x14000
   10d48:	ldr	pc, [ip, #772]!	; 0x304

00010d4c <rb_linebuf_parse@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #20, 20	; 0x14000
   10d54:	ldr	pc, [ip, #764]!	; 0x2fc

00010d58 <rb_strlcpy@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #20, 20	; 0x14000
   10d60:	ldr	pc, [ip, #756]!	; 0x2f4

00010d64 <rb_init_rawbuffers@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #20, 20	; 0x14000
   10d6c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d70 <free@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #20, 20	; 0x14000
   10d78:	ldr	pc, [ip, #740]!	; 0x2e4

00010d7c <rb_lib_loop@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #20, 20	; 0x14000
   10d84:	ldr	pc, [ip, #732]!	; 0x2dc

00010d88 <rb_read@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #20, 20	; 0x14000
   10d90:	ldr	pc, [ip, #724]!	; 0x2d4

00010d94 <rb_set_type@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #20, 20	; 0x14000
   10d9c:	ldr	pc, [ip, #716]!	; 0x2cc

00010da0 <rb_linebuf_get@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #20, 20	; 0x14000
   10da8:	ldr	pc, [ip, #708]!	; 0x2c4

00010dac <rb_linebuf_flush@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #20, 20	; 0x14000
   10db4:	ldr	pc, [ip, #700]!	; 0x2bc

00010db8 <strlen@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #20, 20	; 0x14000
   10dc0:	ldr	pc, [ip, #692]!	; 0x2b4

00010dc4 <memcpy@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #20, 20	; 0x14000
   10dcc:	ldr	pc, [ip, #684]!	; 0x2ac

00010dd0 <rb_linebuf_donebuf@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #20, 20	; 0x14000
   10dd8:	ldr	pc, [ip, #676]!	; 0x2a4

00010ddc <rb_strcasestr@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #20, 20	; 0x14000
   10de4:	ldr	pc, [ip, #668]!	; 0x29c

00010de8 <rb_close@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #20, 20	; 0x14000
   10df0:	ldr	pc, [ip, #660]!	; 0x294

00010df4 <strtol@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #20, 20	; 0x14000
   10dfc:	ldr	pc, [ip, #652]!	; 0x28c

00010e00 <sigaddset@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #20, 20	; 0x14000
   10e08:	ldr	pc, [ip, #644]!	; 0x284

00010e0c <rb_rawbuf_length@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #20, 20	; 0x14000
   10e14:	ldr	pc, [ip, #636]!	; 0x27c

00010e18 <rb_free_rawbuffer@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #20, 20	; 0x14000
   10e20:	ldr	pc, [ip, #628]!	; 0x274

00010e24 <close@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #20, 20	; 0x14000
   10e2c:	ldr	pc, [ip, #620]!	; 0x26c

00010e30 <fwrite@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #20, 20	; 0x14000
   10e38:	ldr	pc, [ip, #612]!	; 0x264

00010e3c <rb_outofmemory@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #20, 20	; 0x14000
   10e44:	ldr	pc, [ip, #604]!	; 0x25c

00010e48 <rb_rawbuf_get@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #20, 20	; 0x14000
   10e50:	ldr	pc, [ip, #596]!	; 0x254

00010e54 <sigaction@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #20, 20	; 0x14000
   10e5c:	ldr	pc, [ip, #588]!	; 0x24c

00010e60 <rb_lib_init@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #20, 20	; 0x14000
   10e68:	ldr	pc, [ip, #580]!	; 0x244

00010e6c <rb_new_rawbuffer@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #20, 20	; 0x14000
   10e74:	ldr	pc, [ip, #572]!	; 0x23c

00010e78 <rb_open@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #20, 20	; 0x14000
   10e80:	ldr	pc, [ip, #564]!	; 0x234

00010e84 <rb_recv_fd_buf@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #20, 20	; 0x14000
   10e8c:	ldr	pc, [ip, #556]!	; 0x22c

00010e90 <dup2@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #20, 20	; 0x14000
   10e98:	ldr	pc, [ip, #548]!	; 0x224

00010e9c <rb_linebuf_newbuf@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #20, 20	; 0x14000
   10ea4:	ldr	pc, [ip, #540]!	; 0x21c

00010ea8 <rb_linebuf_init@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #20, 20	; 0x14000
   10eb0:	ldr	pc, [ip, #532]!	; 0x214

00010eb4 <getrlimit@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #20, 20	; 0x14000
   10ebc:	ldr	pc, [ip, #524]!	; 0x20c

00010ec0 <rb_rawbuf_append@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #20, 20	; 0x14000
   10ec8:	ldr	pc, [ip, #516]!	; 0x204

00010ecc <rb_rawbuf_flush@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #20, 20	; 0x14000
   10ed4:	ldr	pc, [ip, #508]!	; 0x1fc

00010ed8 <exit@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #20, 20	; 0x14000
   10ee0:	ldr	pc, [ip, #500]!	; 0x1f4

00010ee4 <__errno_location@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #20, 20	; 0x14000
   10eec:	ldr	pc, [ip, #492]!	; 0x1ec

00010ef0 <rb_base64_encode@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #20, 20	; 0x14000
   10ef8:	ldr	pc, [ip, #484]!	; 0x1e4

Disassembly of section .text:

00010efc <.text>:
   10efc:	mov	fp, #0
   10f00:	mov	lr, #0
   10f04:	pop	{r1}		; (ldr r1, [sp], #4)
   10f08:	mov	r2, sp
   10f0c:	push	{r2}		; (str r2, [sp, #-4]!)
   10f10:	push	{r0}		; (str r0, [sp, #-4]!)
   10f14:	ldr	ip, [pc, #16]	; 10f2c <rb_base64_encode@plt+0x3c>
   10f18:	push	{ip}		; (str ip, [sp, #-4]!)
   10f1c:	ldr	r0, [pc, #12]	; 10f30 <rb_base64_encode@plt+0x40>
   10f20:	ldr	r3, [pc, #12]	; 10f34 <rb_base64_encode@plt+0x44>
   10f24:	bl	10cd4 <__libc_start_main@plt>
   10f28:	bl	10cb0 <abort@plt>
   10f2c:	andeq	r3, r1, ip, lsr sp
   10f30:	andeq	r2, r1, r8, lsr #9
   10f34:	ldrdeq	r3, [r1], -ip
   10f38:	ldr	r3, [pc, #20]	; 10f54 <rb_base64_encode@plt+0x64>
   10f3c:	ldr	r2, [pc, #20]	; 10f58 <rb_base64_encode@plt+0x68>
   10f40:	add	r3, pc, r3
   10f44:	ldr	r2, [r3, r2]
   10f48:	cmp	r2, #0
   10f4c:	bxeq	lr
   10f50:	b	10cec <__gmon_start__@plt>
   10f54:	strheq	r4, [r1], -r8
   10f58:	andeq	r0, r0, r0, ror #1
   10f5c:	ldr	r3, [pc, #28]	; 10f80 <rb_base64_encode@plt+0x90>
   10f60:	ldr	r0, [pc, #28]	; 10f84 <rb_base64_encode@plt+0x94>
   10f64:	sub	r3, r3, r0
   10f68:	cmp	r3, #6
   10f6c:	bxls	lr
   10f70:	ldr	r3, [pc, #16]	; 10f88 <rb_base64_encode@plt+0x98>
   10f74:	cmp	r3, #0
   10f78:	bxeq	lr
   10f7c:	bx	r3
   10f80:	andeq	r5, r2, pc, ror #1
   10f84:	andeq	r5, r2, ip, ror #1
   10f88:	andeq	r0, r0, r0
   10f8c:	ldr	r1, [pc, #36]	; 10fb8 <rb_base64_encode@plt+0xc8>
   10f90:	ldr	r0, [pc, #36]	; 10fbc <rb_base64_encode@plt+0xcc>
   10f94:	sub	r1, r1, r0
   10f98:	asr	r1, r1, #2
   10f9c:	add	r1, r1, r1, lsr #31
   10fa0:	asrs	r1, r1, #1
   10fa4:	bxeq	lr
   10fa8:	ldr	r3, [pc, #16]	; 10fc0 <rb_base64_encode@plt+0xd0>
   10fac:	cmp	r3, #0
   10fb0:	bxeq	lr
   10fb4:	bx	r3
   10fb8:	andeq	r5, r2, ip, ror #1
   10fbc:	andeq	r5, r2, ip, ror #1
   10fc0:	andeq	r0, r0, r0
   10fc4:	push	{r4, lr}
   10fc8:	ldr	r4, [pc, #24]	; 10fe8 <rb_base64_encode@plt+0xf8>
   10fcc:	ldrb	r3, [r4]
   10fd0:	cmp	r3, #0
   10fd4:	popne	{r4, pc}
   10fd8:	bl	10f5c <rb_base64_encode@plt+0x6c>
   10fdc:	mov	r3, #1
   10fe0:	strb	r3, [r4]
   10fe4:	pop	{r4, pc}
   10fe8:	strdeq	r5, [r2], -r4
   10fec:	ldr	r0, [pc, #40]	; 1101c <rb_base64_encode@plt+0x12c>
   10ff0:	ldr	r3, [r0]
   10ff4:	cmp	r3, #0
   10ff8:	bne	11000 <rb_base64_encode@plt+0x110>
   10ffc:	b	10f8c <rb_base64_encode@plt+0x9c>
   11000:	ldr	r3, [pc, #24]	; 11020 <rb_base64_encode@plt+0x130>
   11004:	cmp	r3, #0
   11008:	beq	10ffc <rb_base64_encode@plt+0x10c>
   1100c:	push	{r4, lr}
   11010:	blx	r3
   11014:	pop	{r4, lr}
   11018:	b	10f8c <rb_base64_encode@plt+0x9c>
   1101c:	strdeq	r4, [r2], -ip
   11020:	andeq	r0, r0, r0
   11024:	bx	lr
   11028:	ldr	r3, [pc, #124]	; 110ac <rb_base64_encode@plt+0x1bc>
   1102c:	ldr	r3, [r3]
   11030:	cmp	r3, #0
   11034:	beq	11098 <rb_base64_encode@plt+0x1a8>
   11038:	push	{r4, r5, r6, lr}
   1103c:	ldr	r5, [r3, #8]
   11040:	ldr	r4, [r3]
   11044:	add	r0, r4, #52	; 0x34
   11048:	bl	10dd0 <rb_linebuf_donebuf@plt>
   1104c:	add	r0, r4, #24
   11050:	bl	10dd0 <rb_linebuf_donebuf@plt>
   11054:	ldr	r0, [r4, #20]
   11058:	bl	10e18 <rb_free_rawbuffer@plt>
   1105c:	ldr	r0, [r4, #16]
   11060:	bl	10e18 <rb_free_rawbuffer@plt>
   11064:	cmp	r4, #0
   11068:	beq	11074 <rb_base64_encode@plt+0x184>
   1106c:	mov	r0, r4
   11070:	bl	10d70 <free@plt>
   11074:	cmp	r5, #0
   11078:	movne	r3, r5
   1107c:	ldrne	r5, [r5, #8]
   11080:	bne	11040 <rb_base64_encode@plt+0x150>
   11084:	ldr	r3, [pc, #32]	; 110ac <rb_base64_encode@plt+0x1bc>
   11088:	mov	r2, #0
   1108c:	str	r2, [r3]
   11090:	str	r2, [r3, #4]
   11094:	pop	{r4, r5, r6, pc}
   11098:	ldr	r3, [pc, #12]	; 110ac <rb_base64_encode@plt+0x1bc>
   1109c:	mov	r2, #0
   110a0:	str	r2, [r3]
   110a4:	str	r2, [r3, #4]
   110a8:	bx	lr
   110ac:	strdeq	r5, [r2], -r8
   110b0:	push	{r4, r5, lr}
   110b4:	sub	sp, sp, #16384	; 0x4000
   110b8:	sub	sp, sp, #4
   110bc:	mov	r4, r0
   110c0:	mov	r5, #16384	; 0x4000
   110c4:	mov	r2, r5
   110c8:	mov	r1, sp
   110cc:	mov	r0, r4
   110d0:	bl	10d88 <rb_read@plt>
   110d4:	cmp	r0, #0
   110d8:	bgt	110c4 <rb_base64_encode@plt+0x1d4>
   110dc:	beq	11118 <rb_base64_encode@plt+0x228>
   110e0:	blt	11104 <rb_base64_encode@plt+0x214>
   110e4:	mov	r3, #0
   110e8:	ldr	r2, [pc, #48]	; 11120 <rb_base64_encode@plt+0x230>
   110ec:	mov	r1, #1
   110f0:	mov	r0, r4
   110f4:	bl	10ce0 <rb_setselect@plt>
   110f8:	add	sp, sp, #16384	; 0x4000
   110fc:	add	sp, sp, #4
   11100:	pop	{r4, r5, pc}
   11104:	bl	10ee4 <__errno_location@plt>
   11108:	ldr	r0, [r0]
   1110c:	bl	10cc8 <rb_ignore_errno@plt>
   11110:	cmp	r0, #0
   11114:	bne	110e4 <rb_base64_encode@plt+0x1f4>
   11118:	mov	r0, #0
   1111c:	bl	10ed8 <exit@plt>
   11120:	strheq	r1, [r1], -r0
   11124:	ldrb	r3, [r0, #128]	; 0x80
   11128:	tst	r3, #2
   1112c:	bxne	lr
   11130:	push	{r4, lr}
   11134:	ldr	r0, [r0, #16]
   11138:	bl	10ec0 <rb_rawbuf_append@plt>
   1113c:	pop	{r4, pc}
   11140:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11144:	sub	sp, sp, #20
   11148:	mov	r9, r1
   1114c:	ldr	r5, [r1, #36]	; 0x24
   11150:	cmp	r5, #0
   11154:	beq	11290 <rb_base64_encode@plt+0x3a0>
   11158:	ldr	r7, [r5, #8]
   1115c:	ldr	fp, [pc, #344]	; 112bc <rb_base64_encode@plt+0x3cc>
   11160:	add	r3, r1, #36	; 0x24
   11164:	str	r3, [sp, #12]
   11168:	mov	sl, #0
   1116c:	b	111a4 <rb_base64_encode@plt+0x2b4>
   11170:	ldr	r3, [pc, #328]	; 112c0 <rb_base64_encode@plt+0x3d0>
   11174:	mov	r2, #236	; 0xec
   11178:	ldr	r1, [pc, #324]	; 112c4 <rb_base64_encode@plt+0x3d4>
   1117c:	ldr	r0, [pc, #324]	; 112c8 <rb_base64_encode@plt+0x3d8>
   11180:	bl	10d40 <__assert_fail@plt>
   11184:	cmp	r8, #0
   11188:	beq	11288 <rb_base64_encode@plt+0x398>
   1118c:	cmp	r8, #0
   11190:	blt	11274 <rb_base64_encode@plt+0x384>
   11194:	cmp	r7, #0
   11198:	beq	11290 <rb_base64_encode@plt+0x3a0>
   1119c:	mov	r5, r7
   111a0:	ldr	r7, [r7, #8]
   111a4:	ldr	r4, [r5]
   111a8:	ldr	r3, [r4, #12]
   111ac:	ldr	r2, [r4, #36]	; 0x24
   111b0:	ldr	r1, [fp, #12]
   111b4:	str	r1, [sp, #4]
   111b8:	ldr	r1, [r4, #16]
   111bc:	str	r1, [sp]
   111c0:	add	r1, r4, #20
   111c4:	ldr	r0, [r9, #16]
   111c8:	bl	10cf8 <rb_send_fd_buf@plt>
   111cc:	subs	r8, r0, #0
   111d0:	ble	11184 <rb_base64_encode@plt+0x294>
   111d4:	ldr	r3, [sp, #12]
   111d8:	cmp	r3, #0
   111dc:	beq	11170 <rb_base64_encode@plt+0x280>
   111e0:	ldr	r3, [r5, #8]
   111e4:	cmp	r3, #0
   111e8:	ldrne	r2, [r5, #4]
   111ec:	strne	r2, [r3, #4]
   111f0:	ldreq	r3, [r5, #4]
   111f4:	streq	r3, [r9, #40]	; 0x28
   111f8:	ldr	r3, [r5, #4]
   111fc:	cmp	r3, #0
   11200:	ldrne	r2, [r5, #8]
   11204:	strne	r2, [r3, #8]
   11208:	ldreq	r3, [r5, #8]
   1120c:	streq	r3, [r9, #36]	; 0x24
   11210:	str	sl, [r5, #4]
   11214:	str	sl, [r5, #8]
   11218:	ldr	r3, [r9, #44]	; 0x2c
   1121c:	sub	r3, r3, #1
   11220:	str	r3, [r9, #44]	; 0x2c
   11224:	ldr	r3, [r4, #36]	; 0x24
   11228:	cmp	r3, #0
   1122c:	ble	11250 <rb_base64_encode@plt+0x360>
   11230:	add	r6, r4, #20
   11234:	mov	r5, #0
   11238:	ldr	r0, [r6], #4
   1123c:	bl	10de8 <rb_close@plt>
   11240:	add	r5, r5, #1
   11244:	ldr	r3, [r4, #36]	; 0x24
   11248:	cmp	r3, r5
   1124c:	bgt	11238 <rb_base64_encode@plt+0x348>
   11250:	ldr	r0, [r4, #12]
   11254:	cmp	r0, #0
   11258:	beq	11260 <rb_base64_encode@plt+0x370>
   1125c:	bl	10d70 <free@plt>
   11260:	cmp	r4, #0
   11264:	beq	1118c <rb_base64_encode@plt+0x29c>
   11268:	mov	r0, r4
   1126c:	bl	10d70 <free@plt>
   11270:	b	1118c <rb_base64_encode@plt+0x29c>
   11274:	bl	10ee4 <__errno_location@plt>
   11278:	ldr	r0, [r0]
   1127c:	bl	10cc8 <rb_ignore_errno@plt>
   11280:	cmp	r0, #0
   11284:	bne	11194 <rb_base64_encode@plt+0x2a4>
   11288:	mov	r0, #0
   1128c:	bl	10ed8 <exit@plt>
   11290:	ldr	r3, [r9, #44]	; 0x2c
   11294:	cmp	r3, #0
   11298:	bne	112a4 <rb_base64_encode@plt+0x3b4>
   1129c:	add	sp, sp, #20
   112a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112a4:	mov	r3, r9
   112a8:	ldr	r2, [pc, #28]	; 112cc <rb_base64_encode@plt+0x3dc>
   112ac:	mov	r1, #2
   112b0:	ldr	r0, [r9, #16]
   112b4:	bl	10ce0 <rb_setselect@plt>
   112b8:	b	1129c <rb_base64_encode@plt+0x3ac>
   112bc:	strdeq	r5, [r2], -r8
   112c0:	andeq	r3, r1, ip, asr #26
   112c4:	andeq	r3, r1, r8, ror sp
   112c8:	muleq	r1, r4, sp
   112cc:	andeq	r1, r1, r0, asr #2
   112d0:	push	{r4, r5, lr}
   112d4:	sub	sp, sp, #16384	; 0x4000
   112d8:	sub	sp, sp, #4
   112dc:	subs	r4, r1, #0
   112e0:	beq	1132c <rb_base64_encode@plt+0x43c>
   112e4:	mov	r5, #16384	; 0x4000
   112e8:	mov	r2, r5
   112ec:	mov	r1, sp
   112f0:	ldr	r0, [r4, #88]	; 0x58
   112f4:	bl	10d88 <rb_read@plt>
   112f8:	cmp	r0, #0
   112fc:	beq	11338 <rb_base64_encode@plt+0x448>
   11300:	bge	112e8 <rb_base64_encode@plt+0x3f8>
   11304:	bl	10ee4 <__errno_location@plt>
   11308:	ldr	r0, [r0]
   1130c:	bl	10cc8 <rb_ignore_errno@plt>
   11310:	cmp	r0, #0
   11314:	beq	11338 <rb_base64_encode@plt+0x448>
   11318:	mov	r3, r4
   1131c:	ldr	r2, [pc, #140]	; 113b0 <rb_base64_encode@plt+0x4c0>
   11320:	mov	r1, #1
   11324:	ldr	r0, [r4, #88]	; 0x58
   11328:	bl	10ce0 <rb_setselect@plt>
   1132c:	add	sp, sp, #16384	; 0x4000
   11330:	add	sp, sp, #4
   11334:	pop	{r4, r5, pc}
   11338:	ldr	r0, [r4, #88]	; 0x58
   1133c:	bl	10de8 <rb_close@plt>
   11340:	cmp	r4, #0
   11344:	beq	11384 <rb_base64_encode@plt+0x494>
   11348:	str	r4, [r4]
   1134c:	mov	r3, #0
   11350:	str	r3, [r4, #4]
   11354:	ldr	r3, [pc, #88]	; 113b4 <rb_base64_encode@plt+0x4c4>
   11358:	ldr	r3, [r3]
   1135c:	str	r3, [r4, #8]
   11360:	cmp	r3, #0
   11364:	strne	r4, [r3, #4]
   11368:	beq	11398 <rb_base64_encode@plt+0x4a8>
   1136c:	ldr	r3, [pc, #64]	; 113b4 <rb_base64_encode@plt+0x4c4>
   11370:	str	r4, [r3]
   11374:	ldr	r2, [r3, #8]
   11378:	add	r2, r2, #1
   1137c:	str	r2, [r3, #8]
   11380:	b	1132c <rb_base64_encode@plt+0x43c>
   11384:	ldr	r3, [pc, #44]	; 113b8 <rb_base64_encode@plt+0x4c8>
   11388:	mov	r2, #144	; 0x90
   1138c:	ldr	r1, [pc, #40]	; 113bc <rb_base64_encode@plt+0x4cc>
   11390:	ldr	r0, [pc, #40]	; 113c0 <rb_base64_encode@plt+0x4d0>
   11394:	bl	10d40 <__assert_fail@plt>
   11398:	ldr	r3, [pc, #20]	; 113b4 <rb_base64_encode@plt+0x4c4>
   1139c:	ldr	r3, [r3, #4]
   113a0:	cmp	r3, #0
   113a4:	ldreq	r3, [pc, #8]	; 113b4 <rb_base64_encode@plt+0x4c4>
   113a8:	streq	r4, [r3, #4]
   113ac:	b	1136c <rb_base64_encode@plt+0x47c>
   113b0:	ldrdeq	r1, [r1], -r0
   113b4:	strdeq	r5, [r2], -r8
   113b8:	andeq	r3, r1, ip, asr sp
   113bc:	andeq	r3, r1, r8, ror sp
   113c0:	andeq	r3, r1, r4, lsr #27
   113c4:	push	{r2, r3}
   113c8:	push	{r4, r5, r6, lr}
   113cc:	sub	sp, sp, #392	; 0x188
   113d0:	ldrb	r3, [r0, #128]	; 0x80
   113d4:	tst	r3, #2
   113d8:	bne	11504 <rb_base64_encode@plt+0x614>
   113dc:	mov	r5, r1
   113e0:	mov	r4, r0
   113e4:	tst	r3, #8
   113e8:	bne	11514 <rb_base64_encode@plt+0x624>
   113ec:	ldr	r1, [r4, #84]	; 0x54
   113f0:	ldr	r0, [r4, #16]
   113f4:	bl	10ecc <rb_rawbuf_flush@plt>
   113f8:	add	r1, r4, #24
   113fc:	ldr	r0, [r4, #88]	; 0x58
   11400:	bl	10dac <rb_linebuf_flush@plt>
   11404:	ldr	r0, [r4, #84]	; 0x54
   11408:	bl	10de8 <rb_close@plt>
   1140c:	ldrb	r3, [r4, #128]	; 0x80
   11410:	orr	r3, r3, #2
   11414:	strb	r3, [r4, #128]	; 0x80
   11418:	ldr	r1, [r4, #80]	; 0x50
   1141c:	ldr	r3, [pc, #644]	; 116a8 <rb_base64_encode@plt+0x7b8>
   11420:	umull	r2, r3, r3, r1
   11424:	lsr	r3, r3, #7
   11428:	mov	r2, #2000	; 0x7d0
   1142c:	mul	r3, r2, r3
   11430:	sub	r3, r1, r3
   11434:	cmp	r4, #0
   11438:	beq	1151c <rb_base64_encode@plt+0x62c>
   1143c:	ldr	r2, [r4, #8]
   11440:	cmp	r2, #0
   11444:	ldrne	r1, [r4, #4]
   11448:	strne	r1, [r2, #4]
   1144c:	ldreq	r0, [r4, #4]
   11450:	addeq	r2, r3, r3, lsl #1
   11454:	ldreq	r1, [pc, #592]	; 116ac <rb_base64_encode@plt+0x7bc>
   11458:	addeq	r2, r1, r2, lsl #2
   1145c:	streq	r0, [r2, #20]
   11460:	ldr	r2, [r4, #4]
   11464:	cmp	r2, #0
   11468:	ldrne	r1, [r4, #8]
   1146c:	strne	r1, [r2, #8]
   11470:	ldreq	r0, [r4, #8]
   11474:	addeq	r2, r3, r3, lsl #1
   11478:	ldreq	r1, [pc, #556]	; 116ac <rb_base64_encode@plt+0x7bc>
   1147c:	addeq	r2, r1, r2, lsl #2
   11480:	streq	r0, [r2, #16]
   11484:	mov	r2, #0
   11488:	str	r2, [r4, #4]
   1148c:	str	r2, [r4, #8]
   11490:	ldr	r2, [pc, #532]	; 116ac <rb_base64_encode@plt+0x7bc>
   11494:	lsl	r1, r3, #1
   11498:	add	r0, r1, r3
   1149c:	add	r0, r2, r0, lsl #2
   114a0:	ldr	r3, [r0, #24]
   114a4:	sub	r3, r3, #1
   114a8:	str	r3, [r0, #24]
   114ac:	ldr	r3, [sp, #408]	; 0x198
   114b0:	cmp	r3, #0
   114b4:	cmpne	r5, #0
   114b8:	bne	1155c <rb_base64_encode@plt+0x66c>
   114bc:	ldr	r0, [r4, #88]	; 0x58
   114c0:	bl	10de8 <rb_close@plt>
   114c4:	cmp	r4, #0
   114c8:	beq	11530 <rb_base64_encode@plt+0x640>
   114cc:	str	r4, [r4]
   114d0:	mov	r3, #0
   114d4:	str	r3, [r4, #4]
   114d8:	ldr	r3, [pc, #460]	; 116ac <rb_base64_encode@plt+0x7bc>
   114dc:	ldr	r3, [r3]
   114e0:	str	r3, [r4, #8]
   114e4:	cmp	r3, #0
   114e8:	strne	r4, [r3, #4]
   114ec:	beq	11544 <rb_base64_encode@plt+0x654>
   114f0:	ldr	r3, [pc, #436]	; 116ac <rb_base64_encode@plt+0x7bc>
   114f4:	str	r4, [r3]
   114f8:	ldr	r2, [r3, #8]
   114fc:	add	r2, r2, #1
   11500:	str	r2, [r3, #8]
   11504:	add	sp, sp, #392	; 0x188
   11508:	pop	{r4, r5, r6, lr}
   1150c:	add	sp, sp, #8
   11510:	bx	lr
   11514:	bl	117d8 <rb_base64_encode@plt+0x8e8>
   11518:	b	113ec <rb_base64_encode@plt+0x4fc>
   1151c:	ldr	r3, [pc, #396]	; 116b0 <rb_base64_encode@plt+0x7c0>
   11520:	mov	r2, #235	; 0xeb
   11524:	ldr	r1, [pc, #392]	; 116b4 <rb_base64_encode@plt+0x7c4>
   11528:	ldr	r0, [pc, #392]	; 116b8 <rb_base64_encode@plt+0x7c8>
   1152c:	bl	10d40 <__assert_fail@plt>
   11530:	ldr	r3, [pc, #388]	; 116bc <rb_base64_encode@plt+0x7cc>
   11534:	mov	r2, #143	; 0x8f
   11538:	ldr	r1, [pc, #372]	; 116b4 <rb_base64_encode@plt+0x7c4>
   1153c:	ldr	r0, [pc, #380]	; 116c0 <rb_base64_encode@plt+0x7d0>
   11540:	bl	10d40 <__assert_fail@plt>
   11544:	ldr	r3, [pc, #352]	; 116ac <rb_base64_encode@plt+0x7bc>
   11548:	ldr	r3, [r3, #4]
   1154c:	cmp	r3, #0
   11550:	ldreq	r3, [pc, #340]	; 116ac <rb_base64_encode@plt+0x7bc>
   11554:	streq	r4, [r3, #4]
   11558:	b	114f0 <rb_base64_encode@plt+0x600>
   1155c:	mov	r3, r4
   11560:	ldr	r2, [pc, #348]	; 116c4 <rb_base64_encode@plt+0x7d4>
   11564:	mov	r1, #1
   11568:	ldr	r0, [r4, #88]	; 0x58
   1156c:	bl	10ce0 <rb_setselect@plt>
   11570:	mov	r3, #0
   11574:	mov	r2, r3
   11578:	mov	r1, #2
   1157c:	ldr	r0, [r4, #88]	; 0x58
   11580:	bl	10ce0 <rb_setselect@plt>
   11584:	add	r3, sp, #412	; 0x19c
   11588:	str	r3, [sp, #388]	; 0x184
   1158c:	ldr	r2, [sp, #408]	; 0x198
   11590:	mov	r1, #128	; 0x80
   11594:	add	r0, sp, #260	; 0x104
   11598:	bl	10d04 <vsnprintf@plt>
   1159c:	mov	r3, #68	; 0x44
   115a0:	strb	r3, [sp, #4]
   115a4:	ldr	r3, [r4, #80]	; 0x50
   115a8:	str	r3, [sp, #5]
   115ac:	mov	r2, #251	; 0xfb
   115b0:	add	r1, sp, #260	; 0x104
   115b4:	add	r0, sp, #9
   115b8:	bl	10d58 <rb_strlcpy@plt>
   115bc:	add	r0, sp, #260	; 0x104
   115c0:	bl	10db8 <strlen@plt>
   115c4:	add	r6, r0, #6
   115c8:	ldr	r5, [r4, #12]
   115cc:	mov	r1, #40	; 0x28
   115d0:	mov	r0, #1
   115d4:	bl	10d1c <calloc@plt>
   115d8:	subs	r4, r0, #0
   115dc:	beq	11668 <rb_base64_encode@plt+0x778>
   115e0:	mov	r1, r6
   115e4:	mov	r0, #1
   115e8:	bl	10d1c <calloc@plt>
   115ec:	cmp	r0, #0
   115f0:	beq	1166c <rb_base64_encode@plt+0x77c>
   115f4:	str	r0, [r4, #12]
   115f8:	str	r6, [r4, #16]
   115fc:	mov	r2, r6
   11600:	add	r1, sp, #4
   11604:	bl	10dc4 <memcpy@plt>
   11608:	mov	r3, #0
   1160c:	str	r3, [r4, #36]	; 0x24
   11610:	add	r3, r5, #36	; 0x24
   11614:	cmp	r4, #0
   11618:	beq	11670 <rb_base64_encode@plt+0x780>
   1161c:	cmp	r3, #0
   11620:	beq	11684 <rb_base64_encode@plt+0x794>
   11624:	str	r4, [r4]
   11628:	mov	r3, #0
   1162c:	str	r3, [r4, #8]
   11630:	ldr	r3, [r5, #40]	; 0x28
   11634:	str	r3, [r4, #4]
   11638:	ldr	r3, [r5, #40]	; 0x28
   1163c:	cmp	r3, #0
   11640:	strne	r4, [r3, #8]
   11644:	beq	11698 <rb_base64_encode@plt+0x7a8>
   11648:	str	r4, [r5, #40]	; 0x28
   1164c:	ldr	r3, [r5, #44]	; 0x2c
   11650:	add	r3, r3, #1
   11654:	str	r3, [r5, #44]	; 0x2c
   11658:	mov	r1, r5
   1165c:	ldr	r0, [r5, #16]
   11660:	bl	11140 <rb_base64_encode@plt+0x250>
   11664:	b	11504 <rb_base64_encode@plt+0x614>
   11668:	bl	10e3c <rb_outofmemory@plt>
   1166c:	bl	10e3c <rb_outofmemory@plt>
   11670:	ldr	r3, [pc, #80]	; 116c8 <rb_base64_encode@plt+0x7d8>
   11674:	mov	r2, #211	; 0xd3
   11678:	ldr	r1, [pc, #52]	; 116b4 <rb_base64_encode@plt+0x7c4>
   1167c:	ldr	r0, [pc, #52]	; 116b8 <rb_base64_encode@plt+0x7c8>
   11680:	bl	10d40 <__assert_fail@plt>
   11684:	ldr	r3, [pc, #60]	; 116c8 <rb_base64_encode@plt+0x7d8>
   11688:	mov	r2, #212	; 0xd4
   1168c:	ldr	r1, [pc, #32]	; 116b4 <rb_base64_encode@plt+0x7c4>
   11690:	ldr	r0, [pc, #52]	; 116cc <rb_base64_encode@plt+0x7dc>
   11694:	bl	10d40 <__assert_fail@plt>
   11698:	ldr	r3, [r5, #36]	; 0x24
   1169c:	cmp	r3, #0
   116a0:	streq	r4, [r5, #36]	; 0x24
   116a4:	b	11648 <rb_base64_encode@plt+0x758>
   116a8:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   116ac:	strdeq	r5, [r2], -r8
   116b0:	andeq	r3, r1, ip, asr #26
   116b4:	andeq	r3, r1, r8, ror sp
   116b8:	andeq	r3, r1, r4, lsr #27
   116bc:	andeq	r3, r1, ip, asr sp
   116c0:			; <UNDEFINED> instruction: 0x00013db0
   116c4:	ldrdeq	r1, [r1], -r0
   116c8:	andeq	r3, r1, r8, ror #26
   116cc:	muleq	r1, r4, sp
   116d0:	push	{r4, r5, r6, lr}
   116d4:	mov	r5, r0
   116d8:	mov	r4, r1
   116dc:	ldrb	r3, [r1, #128]	; 0x80
   116e0:	tst	r3, #2
   116e4:	beq	116fc <rb_base64_encode@plt+0x80c>
   116e8:	pop	{r4, r5, r6, pc}
   116ec:	ldrd	r2, [r4, #96]	; 0x60
   116f0:	adds	r2, r2, r0
   116f4:	adc	r3, r3, r0, asr #31
   116f8:	strd	r2, [r4, #96]	; 0x60
   116fc:	mov	r1, r5
   11700:	ldr	r0, [r4, #16]
   11704:	bl	10ecc <rb_rawbuf_flush@plt>
   11708:	cmp	r0, #0
   1170c:	bgt	116ec <rb_base64_encode@plt+0x7fc>
   11710:	beq	11790 <rb_base64_encode@plt+0x8a0>
   11714:	blt	11778 <rb_base64_encode@plt+0x888>
   11718:	ldr	r0, [r4, #16]
   1171c:	bl	10e0c <rb_rawbuf_length@plt>
   11720:	cmp	r0, #0
   11724:	movgt	r3, r4
   11728:	ldrgt	r2, [pc, #152]	; 117c8 <rb_base64_encode@plt+0x8d8>
   1172c:	movle	r3, #0
   11730:	movle	r2, r3
   11734:	mov	r1, #2
   11738:	ldr	r0, [r4, #84]	; 0x54
   1173c:	bl	10ce0 <rb_setselect@plt>
   11740:	ldrb	r3, [r4, #128]	; 0x80
   11744:	tst	r3, #1
   11748:	popeq	{r4, r5, r6, pc}
   1174c:	ldr	r0, [r4, #16]
   11750:	bl	10e0c <rb_rawbuf_length@plt>
   11754:	cmp	r0, #0
   11758:	popne	{r4, r5, r6, pc}
   1175c:	ldrb	r3, [r4, #128]	; 0x80
   11760:	bic	r3, r3, #1
   11764:	strb	r3, [r4, #128]	; 0x80
   11768:	mov	r1, r4
   1176c:	ldr	r0, [r4, #88]	; 0x58
   11770:	bl	1196c <rb_base64_encode@plt+0xa7c>
   11774:	pop	{r4, r5, r6, pc}
   11778:	bl	10ee4 <__errno_location@plt>
   1177c:	ldr	r0, [r0]
   11780:	bl	10cc8 <rb_ignore_errno@plt>
   11784:	cmp	r0, #0
   11788:	bne	11718 <rb_base64_encode@plt+0x828>
   1178c:	b	117a4 <rb_base64_encode@plt+0x8b4>
   11790:	ldr	r3, [pc, #52]	; 117cc <rb_base64_encode@plt+0x8dc>
   11794:	ldr	r2, [pc, #52]	; 117d0 <rb_base64_encode@plt+0x8e0>
   11798:	mov	r1, #1
   1179c:	mov	r0, r4
   117a0:	bl	113c4 <rb_base64_encode@plt+0x4d4>
   117a4:	bl	10ee4 <__errno_location@plt>
   117a8:	ldr	r0, [r0]
   117ac:	bl	10c98 <strerror@plt>
   117b0:	mov	r3, r0
   117b4:	ldr	r2, [pc, #24]	; 117d4 <rb_base64_encode@plt+0x8e4>
   117b8:	mov	r1, #1
   117bc:	mov	r0, r4
   117c0:	bl	113c4 <rb_base64_encode@plt+0x4d4>
   117c4:	pop	{r4, r5, r6, pc}
   117c8:	ldrdeq	r1, [r1], -r0
   117cc:	ldrdeq	r3, [r1], -r0
   117d0:	strdeq	r3, [r1], -r4
   117d4:	andeq	r3, r1, r0, asr #27
   117d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   117dc:	sub	sp, sp, #16384	; 0x4000
   117e0:	sub	sp, sp, #16
   117e4:	mov	r4, r0
   117e8:	mov	r2, #16384	; 0x4000
   117ec:	mov	r1, #0
   117f0:	add	r0, sp, #16
   117f4:	bl	10d34 <memset@plt>
   117f8:	add	r8, r4, #52	; 0x34
   117fc:	mov	r6, #0
   11800:	mov	r7, #16384	; 0x4000
   11804:	add	sl, sp, #12
   11808:	ldr	r9, [pc, #240]	; 11900 <rb_base64_encode@plt+0xa10>
   1180c:	b	11854 <rb_base64_encode@plt+0x964>
   11810:	mvn	r3, #126	; 0x7e
   11814:	strb	r3, [sp, #12]
   11818:	add	r3, r5, #2
   1181c:	and	r3, r3, #127	; 0x7f
   11820:	strb	r3, [sp, #13]
   11824:	mov	r2, #2
   11828:	mov	r1, sl
   1182c:	mov	r0, r4
   11830:	bl	11124 <rb_base64_encode@plt+0x234>
   11834:	mov	r2, r5
   11838:	add	r1, sp, #16
   1183c:	mov	r0, r4
   11840:	bl	11124 <rb_base64_encode@plt+0x234>
   11844:	mov	r2, #2
   11848:	mov	r1, r9
   1184c:	mov	r0, r4
   11850:	bl	11124 <rb_base64_encode@plt+0x234>
   11854:	str	r6, [sp]
   11858:	mov	r3, r6
   1185c:	mov	r2, r7
   11860:	add	r1, sp, #16
   11864:	mov	r0, r8
   11868:	bl	10da0 <rb_linebuf_get@plt>
   1186c:	subs	r5, r0, #0
   11870:	beq	118d8 <rb_base64_encode@plt+0x9e8>
   11874:	ldrb	r3, [r4, #128]	; 0x80
   11878:	tst	r3, #2
   1187c:	bne	11854 <rb_base64_encode@plt+0x964>
   11880:	cmp	r5, #122	; 0x7a
   11884:	ble	11810 <rb_base64_encode@plt+0x920>
   11888:	mvn	r3, #126	; 0x7e
   1188c:	strb	r3, [sp, #12]
   11890:	mov	r3, #126	; 0x7e
   11894:	strb	r3, [sp, #13]
   11898:	add	r3, r5, #2
   1189c:	rev16	r3, r3
   118a0:	strh	r3, [sp, #14]
   118a4:	mov	r2, #4
   118a8:	mov	r1, sl
   118ac:	mov	r0, r4
   118b0:	bl	11124 <rb_base64_encode@plt+0x234>
   118b4:	mov	r2, r5
   118b8:	add	r1, sp, #16
   118bc:	mov	r0, r4
   118c0:	bl	11124 <rb_base64_encode@plt+0x234>
   118c4:	mov	r2, #2
   118c8:	mov	r1, r9
   118cc:	mov	r0, r4
   118d0:	bl	11124 <rb_base64_encode@plt+0x234>
   118d4:	b	11854 <rb_base64_encode@plt+0x964>
   118d8:	ldrb	r3, [r4, #128]	; 0x80
   118dc:	tst	r3, #8
   118e0:	bne	118f0 <rb_base64_encode@plt+0xa00>
   118e4:	add	sp, sp, #16384	; 0x4000
   118e8:	add	sp, sp, #16
   118ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   118f0:	mov	r1, r4
   118f4:	ldr	r0, [r4, #84]	; 0x54
   118f8:	bl	116d0 <rb_base64_encode@plt+0x7e0>
   118fc:	b	118e4 <rb_base64_encode@plt+0x9f4>
   11900:	strdeq	r3, [r1], -r8
   11904:	push	{r4, lr}
   11908:	mov	r4, r0
   1190c:	ldr	r0, [r0, #16]
   11910:	bl	10e0c <rb_rawbuf_length@plt>
   11914:	cmp	r0, #4096	; 0x1000
   11918:	bge	11924 <rb_base64_encode@plt+0xa34>
   1191c:	mov	r0, #0
   11920:	pop	{r4, pc}
   11924:	ldrb	r3, [r4, #128]	; 0x80
   11928:	orr	r3, r3, #1
   1192c:	strb	r3, [r4, #128]	; 0x80
   11930:	mov	r3, #0
   11934:	mov	r2, r3
   11938:	mov	r1, #1
   1193c:	ldr	r0, [r4, #88]	; 0x58
   11940:	bl	10ce0 <rb_setselect@plt>
   11944:	ldrb	r3, [r4, #128]	; 0x80
   11948:	tst	r3, #8
   1194c:	bne	11958 <rb_base64_encode@plt+0xa68>
   11950:	mov	r0, #1
   11954:	pop	{r4, pc}
   11958:	mov	r1, r4
   1195c:	ldr	r0, [r4, #84]	; 0x54
   11960:	bl	116d0 <rb_base64_encode@plt+0x7e0>
   11964:	mov	r0, #1
   11968:	pop	{r4, pc}
   1196c:	push	{r4, r5, r6, r7, lr}
   11970:	sub	sp, sp, #16384	; 0x4000
   11974:	sub	sp, sp, #4
   11978:	mov	r4, r1
   1197c:	mov	r2, #16384	; 0x4000
   11980:	mov	r1, #0
   11984:	mov	r0, sp
   11988:	bl	10d34 <memset@plt>
   1198c:	cmp	r4, #0
   11990:	beq	119a0 <rb_base64_encode@plt+0xab0>
   11994:	ldrb	r3, [r4, #128]	; 0x80
   11998:	tst	r3, #2
   1199c:	beq	119ac <rb_base64_encode@plt+0xabc>
   119a0:	add	sp, sp, #16384	; 0x4000
   119a4:	add	sp, sp, #4
   119a8:	pop	{r4, r5, r6, r7, pc}
   119ac:	mov	r0, r4
   119b0:	bl	11904 <rb_base64_encode@plt+0xa14>
   119b4:	cmp	r0, #0
   119b8:	bne	119a0 <rb_base64_encode@plt+0xab0>
   119bc:	mov	r5, #16384	; 0x4000
   119c0:	add	r7, r4, #52	; 0x34
   119c4:	mov	r6, #0
   119c8:	b	11a1c <rb_base64_encode@plt+0xb2c>
   119cc:	mov	r2, #0
   119d0:	mov	r1, r2
   119d4:	mov	r0, r4
   119d8:	bl	113c4 <rb_base64_encode@plt+0x4d4>
   119dc:	b	119a0 <rb_base64_encode@plt+0xab0>
   119e0:	ldrd	r0, [r4, #112]	; 0x70
   119e4:	adds	r0, r0, r2
   119e8:	adc	r1, r1, r2, asr #31
   119ec:	strd	r0, [r4, #112]	; 0x70
   119f0:	mov	r3, r6
   119f4:	mov	r1, sp
   119f8:	mov	r0, r7
   119fc:	bl	10d4c <rb_linebuf_parse@plt>
   11a00:	ldrb	r3, [r4, #128]	; 0x80
   11a04:	tst	r3, #2
   11a08:	bne	119a0 <rb_base64_encode@plt+0xab0>
   11a0c:	mov	r0, r4
   11a10:	bl	11904 <rb_base64_encode@plt+0xa14>
   11a14:	cmp	r0, #0
   11a18:	bne	119a0 <rb_base64_encode@plt+0xab0>
   11a1c:	ldrb	r3, [r4, #128]	; 0x80
   11a20:	tst	r3, #2
   11a24:	bne	119a0 <rb_base64_encode@plt+0xab0>
   11a28:	mov	r2, r5
   11a2c:	mov	r1, sp
   11a30:	ldr	r0, [r4, #88]	; 0x58
   11a34:	bl	10d88 <rb_read@plt>
   11a38:	subs	r2, r0, #0
   11a3c:	beq	119cc <rb_base64_encode@plt+0xadc>
   11a40:	bge	119e0 <rb_base64_encode@plt+0xaf0>
   11a44:	bl	10ee4 <__errno_location@plt>
   11a48:	ldr	r0, [r0]
   11a4c:	bl	10cc8 <rb_ignore_errno@plt>
   11a50:	cmp	r0, #0
   11a54:	beq	119cc <rb_base64_encode@plt+0xadc>
   11a58:	mov	r3, r4
   11a5c:	ldr	r2, [pc, #32]	; 11a84 <rb_base64_encode@plt+0xb94>
   11a60:	mov	r1, #1
   11a64:	ldr	r0, [r4, #88]	; 0x58
   11a68:	bl	10ce0 <rb_setselect@plt>
   11a6c:	ldrb	r3, [r4, #128]	; 0x80
   11a70:	tst	r3, #8
   11a74:	beq	119a0 <rb_base64_encode@plt+0xab0>
   11a78:	mov	r0, r4
   11a7c:	bl	117d8 <rb_base64_encode@plt+0x8e8>
   11a80:	b	119a0 <rb_base64_encode@plt+0xab0>
   11a84:	andeq	r1, r1, ip, ror #18
   11a88:	ldrb	r3, [r1, #128]	; 0x80
   11a8c:	tst	r3, #2
   11a90:	bxne	lr
   11a94:	push	{r4, r5, r6, lr}
   11a98:	mov	r4, r1
   11a9c:	mov	r5, r0
   11aa0:	add	r6, r1, #24
   11aa4:	b	11ab8 <rb_base64_encode@plt+0xbc8>
   11aa8:	ldrd	r2, [r4, #120]	; 0x78
   11aac:	adds	r2, r2, r0
   11ab0:	adc	r3, r3, r0, asr #31
   11ab4:	strd	r2, [r4, #120]	; 0x78
   11ab8:	mov	r1, r6
   11abc:	mov	r0, r5
   11ac0:	bl	10dac <rb_linebuf_flush@plt>
   11ac4:	cmp	r0, #0
   11ac8:	bgt	11aa8 <rb_base64_encode@plt+0xbb8>
   11acc:	beq	11b10 <rb_base64_encode@plt+0xc20>
   11ad0:	blt	11afc <rb_base64_encode@plt+0xc0c>
   11ad4:	ldr	r3, [r4, #40]	; 0x28
   11ad8:	cmp	r3, #0
   11adc:	movgt	r3, r4
   11ae0:	ldrgt	r2, [pc, #60]	; 11b24 <rb_base64_encode@plt+0xc34>
   11ae4:	movle	r3, #0
   11ae8:	movle	r2, r3
   11aec:	mov	r1, #2
   11af0:	ldr	r0, [r4, #88]	; 0x58
   11af4:	bl	10ce0 <rb_setselect@plt>
   11af8:	pop	{r4, r5, r6, pc}
   11afc:	bl	10ee4 <__errno_location@plt>
   11b00:	ldr	r0, [r0]
   11b04:	bl	10cc8 <rb_ignore_errno@plt>
   11b08:	cmp	r0, #0
   11b0c:	bne	11ad4 <rb_base64_encode@plt+0xbe4>
   11b10:	mov	r2, #0
   11b14:	mov	r1, r2
   11b18:	mov	r0, r4
   11b1c:	bl	113c4 <rb_base64_encode@plt+0x4d4>
   11b20:	pop	{r4, r5, r6, pc}
   11b24:	andeq	r1, r1, r8, lsl #21
   11b28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b2c:	sub	sp, sp, #32768	; 0x8000
   11b30:	sub	sp, sp, #132	; 0x84
   11b34:	str	r0, [sp]
   11b38:	mov	r4, r1
   11b3c:	mov	r2, #16384	; 0x4000
   11b40:	mov	r1, #0
   11b44:	add	r0, sp, #16384	; 0x4000
   11b48:	add	r0, r0, #128	; 0x80
   11b4c:	bl	10d34 <memset@plt>
   11b50:	cmp	r4, #0
   11b54:	beq	11bcc <rb_base64_encode@plt+0xcdc>
   11b58:	ldrb	r3, [r4, #128]	; 0x80
   11b5c:	tst	r3, #2
   11b60:	bne	11bcc <rb_base64_encode@plt+0xcdc>
   11b64:	ldr	r9, [pc, #1236]	; 12040 <rb_base64_encode@plt+0x1150>
   11b68:	ldr	r7, [pc, #1236]	; 12044 <rb_base64_encode@plt+0x1154>
   11b6c:	b	11c0c <rb_base64_encode@plt+0xd1c>
   11b70:	bl	10ee4 <__errno_location@plt>
   11b74:	ldr	r0, [r0]
   11b78:	bl	10cc8 <rb_ignore_errno@plt>
   11b7c:	cmp	r0, #0
   11b80:	beq	11ba8 <rb_base64_encode@plt+0xcb8>
   11b84:	mov	r3, r4
   11b88:	ldr	r2, [pc, #1208]	; 12048 <rb_base64_encode@plt+0x1158>
   11b8c:	mov	r1, #1
   11b90:	ldr	r0, [sp]
   11b94:	bl	10ce0 <rb_setselect@plt>
   11b98:	mov	r1, r4
   11b9c:	ldr	r0, [r4, #88]	; 0x58
   11ba0:	bl	11a88 <rb_base64_encode@plt+0xb98>
   11ba4:	b	11bcc <rb_base64_encode@plt+0xcdc>
   11ba8:	ldr	r2, [pc, #1180]	; 1204c <rb_base64_encode@plt+0x115c>
   11bac:	mov	r1, #0
   11bb0:	mov	r0, r4
   11bb4:	bl	113c4 <rb_base64_encode@plt+0x4d4>
   11bb8:	b	11bcc <rb_base64_encode@plt+0xcdc>
   11bbc:	ldr	r2, [pc, #1160]	; 1204c <rb_base64_encode@plt+0x115c>
   11bc0:	mov	r1, #0
   11bc4:	mov	r0, r4
   11bc8:	bl	113c4 <rb_base64_encode@plt+0x4d4>
   11bcc:	add	sp, sp, #32768	; 0x8000
   11bd0:	add	sp, sp, #132	; 0x84
   11bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bd8:	mov	r0, r1
   11bdc:	b	11d2c <rb_base64_encode@plt+0xe3c>
   11be0:	ldrb	r3, [r4, #128]	; 0x80
   11be4:	tst	r3, #8
   11be8:	bne	11d4c <rb_base64_encode@plt+0xe5c>
   11bec:	mov	r1, r4
   11bf0:	ldr	r0, [r4, #84]	; 0x54
   11bf4:	bl	116d0 <rb_base64_encode@plt+0x7e0>
   11bf8:	cmp	r6, #16384	; 0x4000
   11bfc:	bcc	11f24 <rb_base64_encode@plt+0x1034>
   11c00:	ldrb	r3, [r4, #128]	; 0x80
   11c04:	tst	r3, #2
   11c08:	bne	11bcc <rb_base64_encode@plt+0xcdc>
   11c0c:	mov	r2, #16384	; 0x4000
   11c10:	add	r1, sp, #16384	; 0x4000
   11c14:	add	r1, r1, #128	; 0x80
   11c18:	ldr	r0, [sp]
   11c1c:	bl	10d88 <rb_read@plt>
   11c20:	subs	r6, r0, #0
   11c24:	blt	11b70 <rb_base64_encode@plt+0xc80>
   11c28:	cmp	r6, #0
   11c2c:	beq	11bbc <rb_base64_encode@plt+0xccc>
   11c30:	mov	r2, r6
   11c34:	add	r1, sp, #16384	; 0x4000
   11c38:	add	r1, r1, #128	; 0x80
   11c3c:	ldr	r0, [r4, #20]
   11c40:	bl	10ec0 <rb_rawbuf_append@plt>
   11c44:	ldrb	r3, [r4, #128]	; 0x80
   11c48:	tst	r3, #8
   11c4c:	bne	11df0 <rb_base64_encode@plt+0xf00>
   11c50:	mov	r2, #16384	; 0x4000
   11c54:	mov	r1, #0
   11c58:	add	r0, sp, #128	; 0x80
   11c5c:	bl	10d34 <memset@plt>
   11c60:	mov	r5, #16384	; 0x4000
   11c64:	add	r8, sp, #16384	; 0x4000
   11c68:	add	r8, r8, #128	; 0x80
   11c6c:	mov	fp, #0
   11c70:	add	sl, r4, #129	; 0x81
   11c74:	mov	r2, r5
   11c78:	add	r1, sp, #128	; 0x80
   11c7c:	ldr	r0, [r4, #20]
   11c80:	bl	10e48 <rb_rawbuf_get@plt>
   11c84:	cmp	r0, #0
   11c88:	beq	11be0 <rb_base64_encode@plt+0xcf0>
   11c8c:	mov	r1, r7
   11c90:	add	r0, sp, #128	; 0x80
   11c94:	bl	10ddc <rb_strcasestr@plt>
   11c98:	cmp	r0, #0
   11c9c:	beq	11c74 <rb_base64_encode@plt+0xd84>
   11ca0:	add	r1, r0, #18
   11ca4:	cmp	r1, r8
   11ca8:	bcs	11d30 <rb_base64_encode@plt+0xe40>
   11cac:	ldrb	r3, [r0, #18]
   11cb0:	cmp	r3, #0
   11cb4:	beq	11cec <rb_base64_encode@plt+0xdfc>
   11cb8:	cmp	r3, #32
   11cbc:	cmpne	r3, #9
   11cc0:	bne	11cec <rb_base64_encode@plt+0xdfc>
   11cc4:	add	r0, r0, #19
   11cc8:	mov	r1, r0
   11ccc:	cmp	r8, r0
   11cd0:	beq	11d30 <rb_base64_encode@plt+0xe40>
   11cd4:	ldrb	r3, [r0], #1
   11cd8:	cmp	r3, #0
   11cdc:	beq	11cec <rb_base64_encode@plt+0xdfc>
   11ce0:	cmp	r3, #32
   11ce4:	cmpne	r3, #9
   11ce8:	beq	11cc8 <rb_base64_encode@plt+0xdd8>
   11cec:	ldrb	r3, [r1]
   11cf0:	cmp	r3, #0
   11cf4:	beq	11d30 <rb_base64_encode@plt+0xe40>
   11cf8:	cmp	r3, #10
   11cfc:	cmpne	r3, #13
   11d00:	addne	r3, r1, #1
   11d04:	beq	11bd8 <rb_base64_encode@plt+0xce8>
   11d08:	mov	r0, r3
   11d0c:	cmp	r3, r8
   11d10:	bcs	11d30 <rb_base64_encode@plt+0xe40>
   11d14:	ldrb	r2, [r3], #1
   11d18:	cmp	r2, #0
   11d1c:	beq	11d30 <rb_base64_encode@plt+0xe40>
   11d20:	cmp	r2, #10
   11d24:	cmpne	r2, #13
   11d28:	bne	11d08 <rb_base64_encode@plt+0xe18>
   11d2c:	strb	fp, [r0]
   11d30:	mov	r2, #37	; 0x25
   11d34:	mov	r0, sl
   11d38:	bl	10d58 <rb_strlcpy@plt>
   11d3c:	ldrb	r3, [r4, #128]	; 0x80
   11d40:	orr	r3, r3, #8
   11d44:	strb	r3, [r4, #128]	; 0x80
   11d48:	b	11c74 <rb_base64_encode@plt+0xd84>
   11d4c:	add	r0, sp, #32
   11d50:	bl	13ad4 <rb_base64_encode@plt+0x2be4>
   11d54:	add	r5, r4, #129	; 0x81
   11d58:	mov	r0, r5
   11d5c:	bl	10db8 <strlen@plt>
   11d60:	mov	r2, r0
   11d64:	mov	r1, r5
   11d68:	add	r0, sp, #32
   11d6c:	bl	13b20 <rb_base64_encode@plt+0x2c30>
   11d70:	mov	r2, #36	; 0x24
   11d74:	ldr	r1, [pc, #724]	; 12050 <rb_base64_encode@plt+0x1160>
   11d78:	add	r0, sp, #32
   11d7c:	bl	13b20 <rb_base64_encode@plt+0x2c30>
   11d80:	add	r3, sp, #12
   11d84:	str	r3, [sp, #4]
   11d88:	mov	r1, r3
   11d8c:	add	r0, sp, #32
   11d90:	bl	13bd8 <rb_base64_encode@plt+0x2ce8>
   11d94:	mov	r1, #20
   11d98:	ldr	r0, [sp, #4]
   11d9c:	bl	10ef0 <rb_base64_encode@plt>
   11da0:	mov	r5, r0
   11da4:	mov	r2, #129	; 0x81
   11da8:	ldr	r1, [pc, #676]	; 12054 <rb_base64_encode@plt+0x1164>
   11dac:	mov	r0, r4
   11db0:	bl	11124 <rb_base64_encode@plt+0x234>
   11db4:	mov	r0, r5
   11db8:	bl	10db8 <strlen@plt>
   11dbc:	mov	r2, r0
   11dc0:	mov	r1, r5
   11dc4:	mov	r0, r4
   11dc8:	bl	11124 <rb_base64_encode@plt+0x234>
   11dcc:	mov	r2, #4
   11dd0:	ldr	r1, [pc, #640]	; 12058 <rb_base64_encode@plt+0x1168>
   11dd4:	mov	r0, r4
   11dd8:	bl	11124 <rb_base64_encode@plt+0x234>
   11ddc:	cmp	r5, #0
   11de0:	beq	11bec <rb_base64_encode@plt+0xcfc>
   11de4:	mov	r0, r5
   11de8:	bl	10d70 <free@plt>
   11dec:	b	11bec <rb_base64_encode@plt+0xcfc>
   11df0:	mov	r5, #2
   11df4:	b	11f88 <rb_base64_encode@plt+0x1098>
   11df8:	mov	r2, #16384	; 0x4000
   11dfc:	mov	r1, #0
   11e00:	add	r0, sp, #128	; 0x80
   11e04:	bl	10d34 <memset@plt>
   11e08:	mov	r2, r5
   11e0c:	add	r1, sp, #12
   11e10:	ldr	r0, [r4, #20]
   11e14:	bl	10e48 <rb_rawbuf_get@plt>
   11e18:	cmp	r0, #0
   11e1c:	beq	11eb0 <rb_base64_encode@plt+0xfc0>
   11e20:	ldrh	r3, [sp, #12]
   11e24:	rev16	r3, r3
   11e28:	uxth	r2, r3
   11e2c:	strh	r3, [sp, #12]
   11e30:	cmp	r8, #1
   11e34:	bne	11f3c <rb_base64_encode@plt+0x104c>
   11e38:	mov	r2, #4
   11e3c:	add	r1, sp, #32
   11e40:	ldr	r0, [r4, #20]
   11e44:	bl	10e48 <rb_rawbuf_get@plt>
   11e48:	cmp	r0, #0
   11e4c:	beq	11ec4 <rb_base64_encode@plt+0xfd4>
   11e50:	ldrh	r2, [sp, #12]
   11e54:	add	r1, sp, #128	; 0x80
   11e58:	ldr	r0, [r4, #20]
   11e5c:	bl	10e48 <rb_rawbuf_get@plt>
   11e60:	subs	r2, r0, #0
   11e64:	beq	11ed8 <rb_base64_encode@plt+0xfe8>
   11e68:	cmp	r2, #0
   11e6c:	ble	11f50 <rb_base64_encode@plt+0x1060>
   11e70:	add	lr, sp, #128	; 0x80
   11e74:	mov	ip, #0
   11e78:	sub	r0, lr, #96	; 0x60
   11e7c:	asr	r3, ip, #31
   11e80:	lsr	r1, r3, #30
   11e84:	add	r3, ip, r1
   11e88:	and	r3, r3, #3
   11e8c:	sub	r3, r3, r1
   11e90:	ldrb	r3, [r0, r3]
   11e94:	ldrb	r1, [lr]
   11e98:	eor	r3, r3, r1
   11e9c:	strb	r3, [lr], #1
   11ea0:	add	ip, ip, #1
   11ea4:	cmp	ip, r2
   11ea8:	bne	11e7c <rb_base64_encode@plt+0xf8c>
   11eac:	b	11f50 <rb_base64_encode@plt+0x1060>
   11eb0:	ldr	r2, [pc, #420]	; 1205c <rb_base64_encode@plt+0x116c>
   11eb4:	mov	r1, #1
   11eb8:	mov	r0, r4
   11ebc:	bl	113c4 <rb_base64_encode@plt+0x4d4>
   11ec0:	b	11f88 <rb_base64_encode@plt+0x1098>
   11ec4:	ldr	r2, [pc, #404]	; 12060 <rb_base64_encode@plt+0x1170>
   11ec8:	mov	r1, #1
   11ecc:	mov	r0, r4
   11ed0:	bl	113c4 <rb_base64_encode@plt+0x4d4>
   11ed4:	b	11f88 <rb_base64_encode@plt+0x1098>
   11ed8:	mov	r2, r9
   11edc:	mov	r1, #1
   11ee0:	mov	r0, r4
   11ee4:	bl	113c4 <rb_base64_encode@plt+0x4d4>
   11ee8:	b	11f88 <rb_base64_encode@plt+0x1098>
   11eec:	ldr	r2, [pc, #364]	; 12060 <rb_base64_encode@plt+0x1170>
   11ef0:	mov	r1, #1
   11ef4:	mov	r0, r4
   11ef8:	bl	113c4 <rb_base64_encode@plt+0x4d4>
   11efc:	b	11f88 <rb_base64_encode@plt+0x1098>
   11f00:	mov	r2, r9
   11f04:	mov	r1, #1
   11f08:	mov	r0, r4
   11f0c:	bl	113c4 <rb_base64_encode@plt+0x4d4>
   11f10:	b	11f88 <rb_base64_encode@plt+0x1098>
   11f14:	mov	r1, r4
   11f18:	ldr	r0, [r4, #88]	; 0x58
   11f1c:	bl	11a88 <rb_base64_encode@plt+0xb98>
   11f20:	b	11bf8 <rb_base64_encode@plt+0xd08>
   11f24:	mov	r3, r4
   11f28:	ldr	r2, [pc, #280]	; 12048 <rb_base64_encode@plt+0x1158>
   11f2c:	mov	r1, #1
   11f30:	ldr	r0, [sp]
   11f34:	bl	10ce0 <rb_setselect@plt>
   11f38:	b	11bcc <rb_base64_encode@plt+0xcdc>
   11f3c:	add	r1, sp, #128	; 0x80
   11f40:	ldr	r0, [r4, #20]
   11f44:	bl	10e48 <rb_rawbuf_get@plt>
   11f48:	subs	r2, r0, #0
   11f4c:	beq	11ed8 <rb_base64_encode@plt+0xfe8>
   11f50:	mov	r3, #1
   11f54:	add	r1, sp, #128	; 0x80
   11f58:	add	r0, r4, #24
   11f5c:	bl	10d4c <rb_linebuf_parse@plt>
   11f60:	b	11f88 <rb_base64_encode@plt+0x1098>
   11f64:	add	r1, sp, #128	; 0x80
   11f68:	ldr	r0, [r4, #20]
   11f6c:	bl	10e48 <rb_rawbuf_get@plt>
   11f70:	subs	r2, r0, #0
   11f74:	beq	11f00 <rb_base64_encode@plt+0x1010>
   11f78:	mov	r3, #1
   11f7c:	add	r1, sp, #128	; 0x80
   11f80:	add	r0, r4, #24
   11f84:	bl	10d4c <rb_linebuf_parse@plt>
   11f88:	mov	r2, r5
   11f8c:	add	r1, sp, #8
   11f90:	ldr	r0, [r4, #20]
   11f94:	bl	10e48 <rb_rawbuf_get@plt>
   11f98:	cmp	r0, #2
   11f9c:	bne	11f14 <rb_base64_encode@plt+0x1024>
   11fa0:	ldrb	r2, [sp, #9]
   11fa4:	lsr	r8, r2, #7
   11fa8:	and	r2, r2, #127	; 0x7f
   11fac:	strb	r2, [sp, #9]
   11fb0:	cmp	r2, #126	; 0x7e
   11fb4:	beq	11df8 <rb_base64_encode@plt+0xf08>
   11fb8:	cmp	r2, #127	; 0x7f
   11fbc:	beq	11f88 <rb_base64_encode@plt+0x1098>
   11fc0:	cmp	r8, #1
   11fc4:	bne	11f64 <rb_base64_encode@plt+0x1074>
   11fc8:	mov	r2, #4
   11fcc:	add	r1, sp, #32
   11fd0:	ldr	r0, [r4, #20]
   11fd4:	bl	10e48 <rb_rawbuf_get@plt>
   11fd8:	cmp	r0, #0
   11fdc:	beq	11eec <rb_base64_encode@plt+0xffc>
   11fe0:	ldrb	r2, [sp, #9]
   11fe4:	add	r1, sp, #128	; 0x80
   11fe8:	ldr	r0, [r4, #20]
   11fec:	bl	10e48 <rb_rawbuf_get@plt>
   11ff0:	subs	r2, r0, #0
   11ff4:	beq	11f00 <rb_base64_encode@plt+0x1010>
   11ff8:	cmp	r2, #0
   11ffc:	ble	11f78 <rb_base64_encode@plt+0x1088>
   12000:	add	lr, sp, #128	; 0x80
   12004:	mov	ip, #0
   12008:	sub	r0, lr, #96	; 0x60
   1200c:	asr	r3, ip, #31
   12010:	lsr	r1, r3, #30
   12014:	add	r3, ip, r1
   12018:	and	r3, r3, #3
   1201c:	sub	r3, r3, r1
   12020:	ldrb	r3, [r0, r3]
   12024:	ldrb	r1, [lr]
   12028:	eor	r3, r3, r1
   1202c:	strb	r3, [lr], #1
   12030:	add	ip, ip, #1
   12034:	cmp	ip, r2
   12038:	bne	1200c <rb_base64_encode@plt+0x111c>
   1203c:	b	11f78 <rb_base64_encode@plt+0x1088>
   12040:	andeq	r3, r1, r4, lsr pc
   12044:	andeq	r3, r1, r0, lsl lr
   12048:	andeq	r1, r1, r8, lsr #22
   1204c:	strdeq	r3, [r1], -ip
   12050:	andeq	r3, r1, r4, lsr #28
   12054:	andeq	r3, r1, ip, asr #28
   12058:	ldrdeq	r3, [r1], -r0
   1205c:	ldrdeq	r3, [r1], -r8
   12060:	andeq	r3, r1, r8, lsl #30
   12064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12068:	sub	sp, sp, #20
   1206c:	mov	r5, r1
   12070:	mov	r7, #1
   12074:	mov	r6, #16384	; 0x4000
   12078:	mov	r9, #4
   1207c:	add	fp, r1, #24
   12080:	mov	sl, #0
   12084:	b	12128 <rb_base64_encode@plt+0x1238>
   12088:	bl	10e3c <rb_outofmemory@plt>
   1208c:	bl	10e3c <rb_outofmemory@plt>
   12090:	mov	r8, r0
   12094:	ldr	r0, [r4, #12]
   12098:	cmp	r0, #0
   1209c:	beq	120a4 <rb_base64_encode@plt+0x11b4>
   120a0:	bl	10d70 <free@plt>
   120a4:	mov	r0, r4
   120a8:	bl	10d70 <free@plt>
   120ac:	cmp	r8, #0
   120b0:	beq	12200 <rb_base64_encode@plt+0x1310>
   120b4:	cmp	r8, #0
   120b8:	blt	121ec <rb_base64_encode@plt+0x12fc>
   120bc:	ldr	r4, [r5, #24]
   120c0:	cmp	r4, #0
   120c4:	beq	12468 <rb_base64_encode@plt+0x1578>
   120c8:	ldr	r7, [r4, #8]
   120cc:	mov	fp, #2000	; 0x7d0
   120d0:	ldr	r9, [pc, #940]	; 12484 <rb_base64_encode@plt+0x1594>
   120d4:	b	122b4 <rb_base64_encode@plt+0x13c4>
   120d8:	ldr	r3, [pc, #936]	; 12488 <rb_base64_encode@plt+0x1598>
   120dc:	mov	r2, #211	; 0xd3
   120e0:	ldr	r1, [pc, #932]	; 1248c <rb_base64_encode@plt+0x159c>
   120e4:	ldr	r0, [pc, #932]	; 12490 <rb_base64_encode@plt+0x15a0>
   120e8:	bl	10d40 <__assert_fail@plt>
   120ec:	ldr	r3, [pc, #916]	; 12488 <rb_base64_encode@plt+0x1598>
   120f0:	mov	r2, #212	; 0xd4
   120f4:	ldr	r1, [pc, #912]	; 1248c <rb_base64_encode@plt+0x159c>
   120f8:	ldr	r0, [pc, #916]	; 12494 <rb_base64_encode@plt+0x15a4>
   120fc:	bl	10d40 <__assert_fail@plt>
   12100:	ldr	r3, [r5, #24]
   12104:	cmp	r3, #0
   12108:	streq	r4, [r5, #24]
   1210c:	b	121a4 <rb_base64_encode@plt+0x12b4>
   12110:	mov	r3, r7
   12114:	b	12124 <rb_base64_encode@plt+0x1234>
   12118:	mov	r3, #2
   1211c:	b	12124 <rb_base64_encode@plt+0x1234>
   12120:	mov	r3, sl
   12124:	str	r3, [r4, #36]	; 0x24
   12128:	mov	r1, #40	; 0x28
   1212c:	mov	r0, r7
   12130:	bl	10d1c <calloc@plt>
   12134:	subs	r4, r0, #0
   12138:	beq	12088 <rb_base64_encode@plt+0x1198>
   1213c:	mov	r1, r6
   12140:	mov	r0, r7
   12144:	bl	10d1c <calloc@plt>
   12148:	subs	r1, r0, #0
   1214c:	beq	1208c <rb_base64_encode@plt+0x119c>
   12150:	str	r1, [r4, #12]
   12154:	str	r6, [r4, #16]
   12158:	str	r9, [sp]
   1215c:	add	r3, r4, #20
   12160:	mov	r2, r6
   12164:	ldr	r0, [r5, #16]
   12168:	bl	10e84 <rb_recv_fd_buf@plt>
   1216c:	cmp	r0, #0
   12170:	ble	12090 <rb_base64_encode@plt+0x11a0>
   12174:	str	r0, [r4, #16]
   12178:	cmp	r4, #0
   1217c:	beq	120d8 <rb_base64_encode@plt+0x11e8>
   12180:	cmp	fp, #0
   12184:	beq	120ec <rb_base64_encode@plt+0x11fc>
   12188:	str	r4, [r4]
   1218c:	str	sl, [r4, #8]
   12190:	ldr	r3, [r5, #28]
   12194:	str	r3, [r4, #4]
   12198:	cmp	r3, #0
   1219c:	strne	r4, [r3, #8]
   121a0:	beq	12100 <rb_base64_encode@plt+0x1210>
   121a4:	str	r4, [r5, #28]
   121a8:	ldr	r3, [r5, #32]
   121ac:	add	r3, r3, #1
   121b0:	str	r3, [r5, #32]
   121b4:	ldr	r3, [r4, #20]
   121b8:	cmp	r3, #0
   121bc:	beq	12120 <rb_base64_encode@plt+0x1230>
   121c0:	ldr	r3, [r4, #24]
   121c4:	cmp	r3, #0
   121c8:	beq	12110 <rb_base64_encode@plt+0x1220>
   121cc:	ldr	r3, [r4, #28]
   121d0:	cmp	r3, #0
   121d4:	beq	12118 <rb_base64_encode@plt+0x1228>
   121d8:	ldr	r3, [r4, #32]
   121dc:	cmp	r3, #0
   121e0:	movne	r3, #4
   121e4:	moveq	r3, #3
   121e8:	b	12124 <rb_base64_encode@plt+0x1234>
   121ec:	bl	10ee4 <__errno_location@plt>
   121f0:	ldr	r0, [r0]
   121f4:	bl	10cc8 <rb_ignore_errno@plt>
   121f8:	cmp	r0, #0
   121fc:	bne	120bc <rb_base64_encode@plt+0x11cc>
   12200:	mov	r0, #0
   12204:	bl	10ed8 <exit@plt>
   12208:	ldr	r3, [r6, #16]
   1220c:	cmp	r3, #5
   12210:	beq	122e0 <rb_base64_encode@plt+0x13f0>
   12214:	add	sl, r6, #20
   12218:	mov	r8, #0
   1221c:	ldr	r0, [sl], #4
   12220:	bl	10de8 <rb_close@plt>
   12224:	add	r8, r8, #1
   12228:	ldr	r3, [r6, #36]	; 0x24
   1222c:	cmp	r8, r3
   12230:	blt	1221c <rb_base64_encode@plt+0x132c>
   12234:	cmn	r5, #24
   12238:	beq	12454 <rb_base64_encode@plt+0x1564>
   1223c:	ldr	r3, [r4, #8]
   12240:	cmp	r3, #0
   12244:	ldrne	r2, [r4, #4]
   12248:	strne	r2, [r3, #4]
   1224c:	ldreq	r3, [r4, #4]
   12250:	streq	r3, [r5, #28]
   12254:	ldr	r3, [r4, #4]
   12258:	cmp	r3, #0
   1225c:	ldrne	r2, [r4, #8]
   12260:	strne	r2, [r3, #8]
   12264:	ldreq	r3, [r4, #8]
   12268:	streq	r3, [r5, #24]
   1226c:	mov	r3, #0
   12270:	str	r3, [r4, #4]
   12274:	str	r3, [r4, #8]
   12278:	ldr	r3, [r5, #32]
   1227c:	sub	r3, r3, #1
   12280:	str	r3, [r5, #32]
   12284:	ldr	r0, [r6, #12]
   12288:	cmp	r0, #0
   1228c:	beq	12294 <rb_base64_encode@plt+0x13a4>
   12290:	bl	10d70 <free@plt>
   12294:	cmp	r6, #0
   12298:	beq	122a4 <rb_base64_encode@plt+0x13b4>
   1229c:	mov	r0, r6
   122a0:	bl	10d70 <free@plt>
   122a4:	cmp	r7, #0
   122a8:	beq	12468 <rb_base64_encode@plt+0x1578>
   122ac:	mov	r4, r7
   122b0:	ldr	r7, [r7, #8]
   122b4:	ldr	r6, [r4]
   122b8:	ldr	r3, [r6, #12]
   122bc:	ldrb	r3, [r3]
   122c0:	cmp	r3, #65	; 0x41
   122c4:	bne	12234 <rb_base64_encode@plt+0x1344>
   122c8:	ldr	r3, [r6, #36]	; 0x24
   122cc:	cmp	r3, #2
   122d0:	beq	12208 <rb_base64_encode@plt+0x1318>
   122d4:	cmp	r3, #0
   122d8:	bgt	12214 <rb_base64_encode@plt+0x1324>
   122dc:	b	12234 <rb_base64_encode@plt+0x1344>
   122e0:	ldr	sl, [r6, #20]
   122e4:	ldr	r3, [r6, #24]
   122e8:	str	r3, [sp, #12]
   122ec:	mov	r1, #168	; 0xa8
   122f0:	mov	r0, #1
   122f4:	bl	10d1c <calloc@plt>
   122f8:	subs	r8, r0, #0
   122fc:	beq	123fc <rb_base64_encode@plt+0x150c>
   12300:	str	r5, [r8, #12]
   12304:	str	sl, [r8, #84]	; 0x54
   12308:	ldr	r3, [sp, #12]
   1230c:	str	r3, [r8, #88]	; 0x58
   12310:	mvn	r2, #0
   12314:	str	r2, [r8, #80]	; 0x50
   12318:	mov	r0, sl
   1231c:	bl	10d28 <rb_set_nb@plt>
   12320:	ldr	r0, [sp, #12]
   12324:	bl	10d28 <rb_set_nb@plt>
   12328:	add	r0, r8, #52	; 0x34
   1232c:	bl	10e9c <rb_linebuf_newbuf@plt>
   12330:	add	r0, r8, #24
   12334:	bl	10e9c <rb_linebuf_newbuf@plt>
   12338:	bl	10e6c <rb_new_rawbuffer@plt>
   1233c:	str	r0, [r8, #20]
   12340:	bl	10e6c <rb_new_rawbuffer@plt>
   12344:	str	r0, [r8, #16]
   12348:	ldr	r3, [r6, #12]
   1234c:	ldr	r2, [r3, #1]
   12350:	str	r2, [r8, #80]	; 0x50
   12354:	ldr	r3, [pc, #316]	; 12498 <rb_base64_encode@plt+0x15a8>
   12358:	umull	r1, r3, r3, r2
   1235c:	lsr	r3, r3, #7
   12360:	mul	r3, fp, r3
   12364:	sub	r3, r2, r3
   12368:	cmp	r8, #0
   1236c:	beq	12400 <rb_base64_encode@plt+0x1510>
   12370:	str	r8, [r8]
   12374:	mov	r2, #0
   12378:	str	r2, [r8, #4]
   1237c:	add	r2, r3, r3, lsl #1
   12380:	add	r2, r9, r2, lsl #2
   12384:	ldr	r2, [r2, #16]
   12388:	str	r2, [r8, #8]
   1238c:	cmp	r2, #0
   12390:	strne	r8, [r2, #4]
   12394:	beq	12414 <rb_base64_encode@plt+0x1524>
   12398:	lsl	r2, r3, #1
   1239c:	add	r1, r2, r3
   123a0:	add	r1, r9, r1, lsl #2
   123a4:	str	r8, [r1, #16]
   123a8:	ldr	r3, [r1, #24]
   123ac:	add	r3, r3, #1
   123b0:	str	r3, [r1, #24]
   123b4:	ldrb	r3, [r8, #128]	; 0x80
   123b8:	orr	r3, r3, #4
   123bc:	strb	r3, [r8, #128]	; 0x80
   123c0:	ldr	r0, [r8, #84]	; 0x54
   123c4:	bl	10ca4 <rb_get_type@plt>
   123c8:	tst	r0, #64	; 0x40
   123cc:	bne	12434 <rb_base64_encode@plt+0x1544>
   123d0:	ldr	r0, [r8, #88]	; 0x58
   123d4:	bl	10ca4 <rb_get_type@plt>
   123d8:	cmp	r0, #64	; 0x40
   123dc:	beq	12444 <rb_base64_encode@plt+0x1554>
   123e0:	mov	r1, r8
   123e4:	ldr	r0, [r8, #84]	; 0x54
   123e8:	bl	11b28 <rb_base64_encode@plt+0xc38>
   123ec:	mov	r1, r8
   123f0:	ldr	r0, [r8, #88]	; 0x58
   123f4:	bl	1196c <rb_base64_encode@plt+0xa7c>
   123f8:	b	12234 <rb_base64_encode@plt+0x1344>
   123fc:	bl	10e3c <rb_outofmemory@plt>
   12400:	ldr	r3, [pc, #148]	; 1249c <rb_base64_encode@plt+0x15ac>
   12404:	mov	r2, #144	; 0x90
   12408:	ldr	r1, [pc, #124]	; 1248c <rb_base64_encode@plt+0x159c>
   1240c:	ldr	r0, [pc, #124]	; 12490 <rb_base64_encode@plt+0x15a0>
   12410:	bl	10d40 <__assert_fail@plt>
   12414:	add	r2, r3, r3, lsl #1
   12418:	add	r2, r9, r2, lsl #2
   1241c:	ldr	r2, [r2, #20]
   12420:	cmp	r2, #0
   12424:	addeq	r2, r3, r3, lsl #1
   12428:	addeq	r2, r9, r2, lsl #2
   1242c:	streq	r8, [r2, #20]
   12430:	b	12398 <rb_base64_encode@plt+0x14a8>
   12434:	mov	r1, #4
   12438:	ldr	r0, [r8, #84]	; 0x54
   1243c:	bl	10d94 <rb_set_type@plt>
   12440:	b	123d0 <rb_base64_encode@plt+0x14e0>
   12444:	mov	r1, #4
   12448:	ldr	r0, [r8, #88]	; 0x58
   1244c:	bl	10d94 <rb_set_type@plt>
   12450:	b	123e0 <rb_base64_encode@plt+0x14f0>
   12454:	ldr	r3, [pc, #68]	; 124a0 <rb_base64_encode@plt+0x15b0>
   12458:	mov	r2, #236	; 0xec
   1245c:	ldr	r1, [pc, #40]	; 1248c <rb_base64_encode@plt+0x159c>
   12460:	ldr	r0, [pc, #44]	; 12494 <rb_base64_encode@plt+0x15a4>
   12464:	bl	10d40 <__assert_fail@plt>
   12468:	mov	r3, r5
   1246c:	ldr	r2, [pc, #48]	; 124a4 <rb_base64_encode@plt+0x15b4>
   12470:	mov	r1, #1
   12474:	ldr	r0, [r5, #16]
   12478:	bl	10ce0 <rb_setselect@plt>
   1247c:	add	sp, sp, #20
   12480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12484:	strdeq	r5, [r2], -r8
   12488:	andeq	r3, r1, r8, ror #26
   1248c:	andeq	r3, r1, r8, ror sp
   12490:	andeq	r3, r1, r4, lsr #27
   12494:	muleq	r1, r4, sp
   12498:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   1249c:	andeq	r3, r1, ip, asr sp
   124a0:	andeq	r3, r1, ip, asr #26
   124a4:	andeq	r2, r1, r4, rrx
   124a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   124ac:	sub	sp, sp, #160	; 0xa0
   124b0:	add	r1, sp, #20
   124b4:	mov	r0, #7
   124b8:	bl	10eb4 <getrlimit@plt>
   124bc:	cmp	r0, #0
   124c0:	ldreq	r8, [sp, #20]
   124c4:	ldrne	r8, [pc, #752]	; 127bc <rb_base64_encode@plt+0x18cc>
   124c8:	ldr	r0, [pc, #752]	; 127c0 <rb_base64_encode@plt+0x18d0>
   124cc:	bl	10d10 <getenv@plt>
   124d0:	mov	r5, r0
   124d4:	ldr	r0, [pc, #744]	; 127c4 <rb_base64_encode@plt+0x18d4>
   124d8:	bl	10d10 <getenv@plt>
   124dc:	mov	r4, r0
   124e0:	ldr	r0, [pc, #736]	; 127c8 <rb_base64_encode@plt+0x18d8>
   124e4:	bl	10d10 <getenv@plt>
   124e8:	cmp	r4, #0
   124ec:	cmpne	r5, #0
   124f0:	moveq	r3, #1
   124f4:	movne	r3, #0
   124f8:	mov	r9, r0
   124fc:	cmp	r0, #0
   12500:	movne	r0, r3
   12504:	orreq	r0, r3, #1
   12508:	cmp	r0, #0
   1250c:	bne	1259c <rb_base64_encode@plt+0x16ac>
   12510:	mov	r7, r8
   12514:	mov	r2, #10
   12518:	mov	r1, #0
   1251c:	mov	r0, r5
   12520:	bl	10df4 <strtol@plt>
   12524:	mov	r6, r0
   12528:	mov	r2, #10
   1252c:	mov	r1, #0
   12530:	mov	r0, r4
   12534:	bl	10df4 <strtol@plt>
   12538:	mov	r5, r0
   1253c:	mov	r2, #10
   12540:	mov	r1, #0
   12544:	mov	r0, r9
   12548:	bl	10df4 <strtol@plt>
   1254c:	ldr	r3, [pc, #632]	; 127cc <rb_base64_encode@plt+0x18dc>
   12550:	str	r0, [r3, #12]
   12554:	cmp	r8, #0
   12558:	movgt	r4, #0
   1255c:	ble	125d0 <rb_base64_encode@plt+0x16e0>
   12560:	add	r4, r4, #1
   12564:	cmp	r4, r7
   12568:	beq	125d0 <rb_base64_encode@plt+0x16e0>
   1256c:	cmp	r4, r6
   12570:	cmpne	r4, r5
   12574:	movne	r3, #1
   12578:	moveq	r3, #0
   1257c:	cmp	r4, #2
   12580:	movle	r3, #0
   12584:	andgt	r3, r3, #1
   12588:	cmp	r3, #0
   1258c:	beq	12560 <rb_base64_encode@plt+0x1670>
   12590:	mov	r0, r4
   12594:	bl	10e24 <close@plt>
   12598:	b	12560 <rb_base64_encode@plt+0x1670>
   1259c:	ldr	r4, [pc, #556]	; 127d0 <rb_base64_encode@plt+0x18e0>
   125a0:	ldr	r3, [r4]
   125a4:	mov	r2, #52	; 0x34
   125a8:	mov	r1, #1
   125ac:	ldr	r0, [pc, #544]	; 127d4 <rb_base64_encode@plt+0x18e4>
   125b0:	bl	10e30 <fwrite@plt>
   125b4:	ldr	r3, [r4]
   125b8:	mov	r2, #49	; 0x31
   125bc:	mov	r1, #1
   125c0:	ldr	r0, [pc, #528]	; 127d8 <rb_base64_encode@plt+0x18e8>
   125c4:	bl	10e30 <fwrite@plt>
   125c8:	mov	r0, #1
   125cc:	bl	10ed8 <exit@plt>
   125d0:	mov	r1, #2
   125d4:	ldr	r0, [pc, #512]	; 127dc <rb_base64_encode@plt+0x18ec>
   125d8:	bl	10c80 <open@plt>
   125dc:	subs	r4, r0, #0
   125e0:	blt	12610 <rb_base64_encode@plt+0x1720>
   125e4:	cmp	r6, #0
   125e8:	cmpne	r5, #0
   125ec:	bne	1277c <rb_base64_encode@plt+0x188c>
   125f0:	cmp	r6, #1
   125f4:	cmpne	r5, #1
   125f8:	bne	1278c <rb_base64_encode@plt+0x189c>
   125fc:	cmp	r6, #2
   12600:	cmpne	r5, #2
   12604:	bne	1279c <rb_base64_encode@plt+0x18ac>
   12608:	cmp	r4, #2
   1260c:	bgt	127ac <rb_base64_encode@plt+0x18bc>
   12610:	mov	r4, #0
   12614:	str	r4, [sp, #152]	; 0x98
   12618:	mov	sl, #1
   1261c:	add	r8, sp, #160	; 0xa0
   12620:	str	sl, [r8, #-140]!	; 0xffffff74
   12624:	add	r9, r8, #4
   12628:	mov	r0, r9
   1262c:	bl	10c8c <sigemptyset@plt>
   12630:	mov	r1, #13
   12634:	mov	r0, r9
   12638:	bl	10e00 <sigaddset@plt>
   1263c:	mov	r1, #14
   12640:	mov	r0, r9
   12644:	bl	10e00 <sigaddset@plt>
   12648:	mov	r1, #5
   1264c:	mov	r0, r9
   12650:	bl	10e00 <sigaddset@plt>
   12654:	mov	r1, #28
   12658:	mov	r0, r9
   1265c:	bl	10e00 <sigaddset@plt>
   12660:	mov	r2, r4
   12664:	mov	r1, r8
   12668:	mov	r0, #28
   1266c:	bl	10e54 <sigaction@plt>
   12670:	mov	r2, r4
   12674:	mov	r1, r8
   12678:	mov	r0, #13
   1267c:	bl	10e54 <sigaction@plt>
   12680:	mov	r2, r4
   12684:	mov	r1, r8
   12688:	mov	r0, #5
   1268c:	bl	10e54 <sigaction@plt>
   12690:	ldr	r3, [pc, #328]	; 127e0 <rb_base64_encode@plt+0x18f0>
   12694:	str	r3, [sp, #20]
   12698:	mov	r2, r4
   1269c:	mov	r1, r8
   126a0:	mov	r0, #14
   126a4:	bl	10e54 <sigaction@plt>
   126a8:	mov	r8, #4096	; 0x1000
   126ac:	str	r8, [sp, #8]
   126b0:	mov	r3, #1024	; 0x400
   126b4:	str	r3, [sp, #4]
   126b8:	str	r7, [sp]
   126bc:	mov	r3, r4
   126c0:	mov	r2, r4
   126c4:	mov	r1, r4
   126c8:	mov	r0, r4
   126cc:	bl	10e60 <rb_lib_init@plt>
   126d0:	mov	r0, r8
   126d4:	bl	10ea8 <rb_linebuf_init@plt>
   126d8:	mov	r0, r8
   126dc:	bl	10d64 <rb_init_rawbuffers@plt>
   126e0:	mov	r1, #48	; 0x30
   126e4:	mov	r0, sl
   126e8:	bl	10d1c <calloc@plt>
   126ec:	subs	r7, r0, #0
   126f0:	beq	127b8 <rb_base64_encode@plt+0x18c8>
   126f4:	ldr	r4, [pc, #232]	; 127e4 <rb_base64_encode@plt+0x18f4>
   126f8:	str	r7, [r4, #-536]	; 0xfffffde8
   126fc:	ldr	r2, [pc, #228]	; 127e8 <rb_base64_encode@plt+0x18f8>
   12700:	mov	r1, #4
   12704:	mov	r0, r6
   12708:	bl	10e78 <rb_open@plt>
   1270c:	str	r0, [r7, #16]
   12710:	ldr	r6, [r4, #-536]	; 0xfffffde8
   12714:	ldr	r2, [pc, #208]	; 127ec <rb_base64_encode@plt+0x18fc>
   12718:	mov	r1, #8
   1271c:	mov	r0, r5
   12720:	bl	10e78 <rb_open@plt>
   12724:	str	r0, [r6, #20]
   12728:	ldr	r3, [r4, #-536]	; 0xfffffde8
   1272c:	ldr	r0, [r3, #16]
   12730:	bl	10d28 <rb_set_nb@plt>
   12734:	ldr	r3, [r4, #-536]	; 0xfffffde8
   12738:	ldr	r0, [r3, #20]
   1273c:	bl	10d28 <rb_set_nb@plt>
   12740:	mov	r3, #10
   12744:	mov	r2, #0
   12748:	ldr	r1, [pc, #160]	; 127f0 <rb_base64_encode@plt+0x1900>
   1274c:	ldr	r0, [pc, #160]	; 127f4 <rb_base64_encode@plt+0x1904>
   12750:	bl	10cbc <rb_event_addish@plt>
   12754:	ldr	r3, [r4, #-536]	; 0xfffffde8
   12758:	mov	r1, #0
   1275c:	ldr	r0, [r3, #20]
   12760:	bl	110b0 <rb_base64_encode@plt+0x1c0>
   12764:	ldr	r3, [r4, #-536]	; 0xfffffde8
   12768:	mov	r1, r3
   1276c:	ldr	r0, [r3, #16]
   12770:	bl	12064 <rb_base64_encode@plt+0x1174>
   12774:	mov	r0, #0
   12778:	bl	10d7c <rb_lib_loop@plt>
   1277c:	mov	r1, #0
   12780:	mov	r0, r4
   12784:	bl	10e90 <dup2@plt>
   12788:	b	125f0 <rb_base64_encode@plt+0x1700>
   1278c:	mov	r1, #1
   12790:	mov	r0, r4
   12794:	bl	10e90 <dup2@plt>
   12798:	b	125fc <rb_base64_encode@plt+0x170c>
   1279c:	mov	r1, #2
   127a0:	mov	r0, r4
   127a4:	bl	10e90 <dup2@plt>
   127a8:	b	12608 <rb_base64_encode@plt+0x1718>
   127ac:	mov	r0, r4
   127b0:	bl	10e24 <close@plt>
   127b4:	b	12610 <rb_base64_encode@plt+0x1720>
   127b8:	bl	10e3c <rb_outofmemory@plt>
   127bc:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   127c0:	andeq	r3, r1, r0, ror #30
   127c4:	andeq	r3, r1, r8, ror #30
   127c8:	andeq	r3, r1, r4, ror pc
   127cc:	strdeq	r5, [r2], -r8
   127d0:	strdeq	r5, [r2], -r0
   127d4:	andeq	r3, r1, r0, lsl #31
   127d8:			; <UNDEFINED> instruction: 0x00013fb8
   127dc:	andeq	r3, r1, ip, ror #31
   127e0:	andeq	r1, r1, r4, lsr #32
   127e4:	andeq	fp, r2, r0, ror #1
   127e8:	strdeq	r3, [r1], -r8
   127ec:	andeq	r4, r1, ip
   127f0:	andeq	r1, r1, r8, lsr #32
   127f4:	andeq	r4, r1, r8, lsl r0
   127f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127fc:	sub	sp, sp, #164	; 0xa4
   12800:	str	r0, [sp, #4]
   12804:	mov	ip, r1
   12808:	add	r5, sp, #96	; 0x60
   1280c:	add	r4, r1, #64	; 0x40
   12810:	mov	lr, r5
   12814:	ldr	r0, [ip]
   12818:	ldr	r1, [ip, #4]
   1281c:	ldr	r2, [ip, #8]
   12820:	ldr	r3, [ip, #12]
   12824:	stmia	lr!, {r0, r1, r2, r3}
   12828:	add	ip, ip, #16
   1282c:	mov	r5, lr
   12830:	cmp	ip, r4
   12834:	bne	12810 <rb_base64_encode@plt+0x1920>
   12838:	ldr	r3, [sp, #4]
   1283c:	ldr	r2, [r3]
   12840:	mov	r0, r2
   12844:	ldr	r2, [r3, #4]
   12848:	mov	lr, r2
   1284c:	ldr	r2, [r3, #8]
   12850:	ldr	r1, [r3, #12]
   12854:	mov	ip, r1
   12858:	ldr	r1, [r3, #16]
   1285c:	mov	r4, r1
   12860:	ldr	r8, [sp, #96]	; 0x60
   12864:	rev	r1, r8
   12868:	mov	r6, r1
   1286c:	mov	r1, r2
   12870:	eor	r5, r2, ip
   12874:	and	r5, r5, lr
   12878:	eor	r5, r5, ip
   1287c:	ldr	r3, [pc, #4088]	; 1387c <rb_base64_encode@plt+0x298c>
   12880:	str	r4, [sp, #92]	; 0x5c
   12884:	add	r2, r4, r3
   12888:	add	r2, r2, r0, ror #27
   1288c:	add	r5, r5, r2
   12890:	str	r6, [sp, #36]	; 0x24
   12894:	add	r5, r6, r5
   12898:	str	lr, [sp, #80]	; 0x50
   1289c:	ror	r9, lr, #2
   128a0:	ldr	lr, [sp, #100]	; 0x64
   128a4:	rev	lr, lr
   128a8:	mov	r7, lr
   128ac:	eor	lr, r1, r9
   128b0:	and	lr, lr, r0
   128b4:	eor	lr, lr, r1
   128b8:	str	ip, [sp, #88]	; 0x58
   128bc:	add	r2, ip, r3
   128c0:	add	lr, lr, r2
   128c4:	str	r7, [sp, #44]	; 0x2c
   128c8:	add	lr, lr, r7
   128cc:	add	lr, lr, r5, ror #27
   128d0:	str	r0, [sp, #76]	; 0x4c
   128d4:	ror	ip, r0, #2
   128d8:	ldr	r2, [sp, #104]	; 0x68
   128dc:	rev	fp, r2
   128e0:	eor	r6, r9, ip
   128e4:	and	r6, r6, r5
   128e8:	eor	r6, r6, r9
   128ec:	str	r1, [sp, #84]	; 0x54
   128f0:	add	r2, r1, r3
   128f4:	add	r2, r2, fp
   128f8:	add	r6, r6, r2
   128fc:	add	r6, r6, lr, ror #27
   12900:	ror	r5, r5, #2
   12904:	ldr	r4, [sp, #108]	; 0x6c
   12908:	rev	r4, r4
   1290c:	eor	r7, ip, r5
   12910:	and	r7, r7, lr
   12914:	eor	r7, r7, ip
   12918:	add	r9, r9, r3
   1291c:	str	r4, [sp, #8]
   12920:	add	r9, r9, r4
   12924:	add	r7, r7, r9
   12928:	add	r7, r7, r6, ror #27
   1292c:	ror	lr, lr, #2
   12930:	ldr	r2, [sp, #112]	; 0x70
   12934:	rev	r8, r2
   12938:	eor	sl, r5, lr
   1293c:	and	sl, sl, r6
   12940:	eor	sl, sl, r5
   12944:	add	ip, ip, r3
   12948:	str	r8, [sp, #12]
   1294c:	add	ip, ip, r8
   12950:	add	sl, sl, ip
   12954:	add	sl, sl, r7, ror #27
   12958:	ror	r6, r6, #2
   1295c:	ldr	ip, [sp, #116]	; 0x74
   12960:	rev	r9, ip
   12964:	eor	r8, lr, r6
   12968:	and	r8, r8, r7
   1296c:	eor	r8, r8, lr
   12970:	str	r9, [sp, #48]	; 0x30
   12974:	add	r2, r9, r3
   12978:	add	r5, r2, r5
   1297c:	add	r8, r8, r5
   12980:	add	r8, r8, sl, ror #27
   12984:	ror	r7, r7, #2
   12988:	ldr	r0, [sp, #120]	; 0x78
   1298c:	rev	r5, r0
   12990:	eor	r0, r6, r7
   12994:	and	r0, r0, sl
   12998:	eor	r0, r0, r6
   1299c:	str	r5, [sp, #52]	; 0x34
   129a0:	add	r2, r5, r3
   129a4:	add	lr, r2, lr
   129a8:	add	r0, r0, lr
   129ac:	add	r0, r0, r8, ror #27
   129b0:	ror	sl, sl, #2
   129b4:	ldr	r1, [sp, #124]	; 0x7c
   129b8:	rev	lr, r1
   129bc:	eor	r1, r7, sl
   129c0:	and	r1, r1, r8
   129c4:	eor	r1, r1, r7
   129c8:	str	lr, [sp, #56]	; 0x38
   129cc:	add	r2, lr, r3
   129d0:	add	r6, r2, r6
   129d4:	add	r1, r1, r6
   129d8:	add	r1, r1, r0, ror #27
   129dc:	ror	r8, r8, #2
   129e0:	ldr	r2, [sp, #128]	; 0x80
   129e4:	rev	lr, r2
   129e8:	eor	r2, sl, r8
   129ec:	and	r2, r2, r0
   129f0:	eor	r2, r2, sl
   129f4:	str	lr, [sp, #16]
   129f8:	add	ip, lr, r3
   129fc:	add	r7, ip, r7
   12a00:	add	r2, r2, r7
   12a04:	add	r2, r2, r1, ror #27
   12a08:	ror	r0, r0, #2
   12a0c:	ldr	r7, [sp, #132]	; 0x84
   12a10:	rev	r5, r7
   12a14:	eor	r4, r8, r0
   12a18:	and	r4, r4, r1
   12a1c:	eor	r4, r4, r8
   12a20:	str	r5, [sp, #20]
   12a24:	add	ip, r5, r3
   12a28:	add	sl, ip, sl
   12a2c:	add	r4, r4, sl
   12a30:	add	r4, r4, r2, ror #27
   12a34:	ror	r1, r1, #2
   12a38:	ldr	r5, [sp, #136]	; 0x88
   12a3c:	rev	r6, r5
   12a40:	eor	r5, r0, r1
   12a44:	and	r5, r5, r2
   12a48:	eor	r5, r5, r0
   12a4c:	str	r6, [sp, #24]
   12a50:	add	ip, r6, r3
   12a54:	add	ip, ip, r8
   12a58:	add	ip, r5, ip
   12a5c:	add	ip, ip, r4, ror #27
   12a60:	ror	r2, r2, #2
   12a64:	ldr	r5, [sp, #140]	; 0x8c
   12a68:	rev	r7, r5
   12a6c:	eor	lr, r1, r2
   12a70:	and	lr, lr, r4
   12a74:	eor	lr, lr, r1
   12a78:	str	r7, [sp, #28]
   12a7c:	add	r5, r7, r3
   12a80:	add	r0, r5, r0
   12a84:	add	lr, lr, r0
   12a88:	add	lr, lr, ip, ror #27
   12a8c:	ror	r4, r4, #2
   12a90:	ldr	r5, [sp, #144]	; 0x90
   12a94:	rev	r8, r5
   12a98:	eor	r6, r2, r4
   12a9c:	and	r6, r6, ip
   12aa0:	eor	r6, r6, r2
   12aa4:	str	r8, [sp, #32]
   12aa8:	add	r0, r8, r3
   12aac:	add	r1, r0, r1
   12ab0:	add	r6, r6, r1
   12ab4:	add	r6, r6, lr, ror #27
   12ab8:	ror	r5, ip, #2
   12abc:	ldr	sl, [sp, #148]	; 0x94
   12ac0:	rev	sl, sl
   12ac4:	eor	r9, r4, r5
   12ac8:	and	r9, r9, lr
   12acc:	eor	r9, r9, r4
   12ad0:	add	r1, sl, r3
   12ad4:	add	r2, r1, r2
   12ad8:	add	r9, r9, r2
   12adc:	add	r9, r9, r6, ror #27
   12ae0:	ror	lr, lr, #2
   12ae4:	ldr	r8, [sp, #152]	; 0x98
   12ae8:	rev	r0, r8
   12aec:	mov	r1, r0
   12af0:	eor	r7, r5, lr
   12af4:	and	r7, r7, r6
   12af8:	eor	r7, r7, r5
   12afc:	add	r2, r0, r3
   12b00:	add	r4, r2, r4
   12b04:	add	r7, r7, r4
   12b08:	add	r7, r7, r9, ror #27
   12b0c:	ror	r6, r6, #2
   12b10:	ldr	r8, [sp, #156]	; 0x9c
   12b14:	rev	r0, r8
   12b18:	eor	ip, lr, r6
   12b1c:	and	ip, ip, r9
   12b20:	eor	ip, ip, lr
   12b24:	str	r0, [sp, #40]	; 0x28
   12b28:	add	r2, r0, r3
   12b2c:	add	r5, r2, r5
   12b30:	add	ip, ip, r5
   12b34:	add	ip, ip, r7, ror #27
   12b38:	ror	r9, r9, #2
   12b3c:	ldr	r4, [sp, #36]	; 0x24
   12b40:	eor	r8, r4, fp
   12b44:	ldr	r4, [sp, #16]
   12b48:	eor	r8, r8, r4
   12b4c:	eor	r8, r8, sl
   12b50:	ror	r4, r8, #31
   12b54:	mov	r8, r4
   12b58:	eor	r0, r6, r9
   12b5c:	and	r0, r0, r7
   12b60:	eor	r0, r0, r6
   12b64:	add	r2, r4, r3
   12b68:	add	lr, r2, lr
   12b6c:	add	r0, r0, lr
   12b70:	add	r0, r0, ip, ror #27
   12b74:	ror	r7, r7, #2
   12b78:	ldr	lr, [sp, #44]	; 0x2c
   12b7c:	ldr	r4, [sp, #8]
   12b80:	eor	lr, lr, r4
   12b84:	ldr	r5, [sp, #20]
   12b88:	eor	lr, lr, r5
   12b8c:	str	r1, [sp, #36]	; 0x24
   12b90:	eor	lr, lr, r1
   12b94:	ror	lr, lr, #31
   12b98:	eor	r1, r9, r7
   12b9c:	and	r1, r1, ip
   12ba0:	eor	r1, r1, r9
   12ba4:	add	r2, lr, r3
   12ba8:	add	r6, r2, r6
   12bac:	add	r1, r1, r6
   12bb0:	add	r1, r1, r0, ror #27
   12bb4:	ror	ip, ip, #2
   12bb8:	ldr	r5, [sp, #12]
   12bbc:	eor	r2, fp, r5
   12bc0:	ldr	r6, [sp, #24]
   12bc4:	eor	r2, r2, r6
   12bc8:	ldr	fp, [sp, #40]	; 0x28
   12bcc:	eor	r2, r2, fp
   12bd0:	ror	r5, r2, #31
   12bd4:	eor	r2, r7, ip
   12bd8:	and	r2, r2, r0
   12bdc:	eor	r2, r2, r7
   12be0:	str	r5, [sp, #44]	; 0x2c
   12be4:	add	r4, r5, r3
   12be8:	add	r9, r4, r9
   12bec:	add	r2, r2, r9
   12bf0:	add	r2, r2, r1, ror #27
   12bf4:	ror	r0, r0, #2
   12bf8:	ldr	r9, [sp, #8]
   12bfc:	ldr	r4, [sp, #48]	; 0x30
   12c00:	eor	r4, r9, r4
   12c04:	ldr	r9, [sp, #28]
   12c08:	eor	r4, r4, r9
   12c0c:	mov	r9, r8
   12c10:	eor	r4, r4, r8
   12c14:	ror	r8, r4, #31
   12c18:	eor	r4, ip, r0
   12c1c:	and	r4, r4, r1
   12c20:	eor	r4, r4, ip
   12c24:	str	r8, [sp, #8]
   12c28:	add	r3, r8, r3
   12c2c:	add	r3, r3, r7
   12c30:	add	r4, r4, r3
   12c34:	add	r4, r4, r2, ror #27
   12c38:	ror	r1, r1, #2
   12c3c:	ldr	r6, [sp, #12]
   12c40:	ldr	r7, [sp, #52]	; 0x34
   12c44:	eor	r3, r6, r7
   12c48:	ldr	r7, [sp, #32]
   12c4c:	eor	r3, r3, r7
   12c50:	eor	r3, r3, lr
   12c54:	ror	r6, r3, #31
   12c58:	eor	r5, r0, r1
   12c5c:	eor	r5, r5, r2
   12c60:	ldr	r3, [pc, #3096]	; 13880 <rb_base64_encode@plt+0x2990>
   12c64:	str	r6, [sp, #12]
   12c68:	add	r6, r6, r3
   12c6c:	add	ip, r6, ip
   12c70:	add	r5, r5, ip
   12c74:	add	r5, r5, r4, ror #27
   12c78:	ror	r2, r2, #2
   12c7c:	ldr	ip, [sp, #48]	; 0x30
   12c80:	ldr	r8, [sp, #56]	; 0x38
   12c84:	eor	ip, ip, r8
   12c88:	eor	ip, ip, sl
   12c8c:	ldr	r6, [sp, #44]	; 0x2c
   12c90:	eor	ip, ip, r6
   12c94:	ror	ip, ip, #31
   12c98:	eor	r8, r1, r2
   12c9c:	eor	r8, r8, r4
   12ca0:	add	r6, ip, r3
   12ca4:	add	r0, r6, r0
   12ca8:	add	r8, r8, r0
   12cac:	add	r8, r8, r5, ror #27
   12cb0:	ror	r4, r4, #2
   12cb4:	ldr	r0, [sp, #52]	; 0x34
   12cb8:	ldr	r7, [sp, #16]
   12cbc:	eor	r0, r0, r7
   12cc0:	ldr	r6, [sp, #36]	; 0x24
   12cc4:	eor	r0, r0, r6
   12cc8:	ldr	r7, [sp, #8]
   12ccc:	eor	r0, r0, r7
   12cd0:	ror	r0, r0, #31
   12cd4:	eor	r6, r2, r4
   12cd8:	eor	r6, r6, r5
   12cdc:	add	r7, r0, r3
   12ce0:	add	r1, r7, r1
   12ce4:	add	r6, r6, r1
   12ce8:	add	r6, r6, r8, ror #27
   12cec:	ror	r5, r5, #2
   12cf0:	ldr	r7, [sp, #56]	; 0x38
   12cf4:	ldr	r1, [sp, #20]
   12cf8:	eor	r1, r7, r1
   12cfc:	eor	r1, r1, fp
   12d00:	ldr	r7, [sp, #12]
   12d04:	eor	r1, r1, r7
   12d08:	ror	r1, r1, #31
   12d0c:	eor	fp, r4, r5
   12d10:	eor	fp, fp, r8
   12d14:	add	r7, r1, r3
   12d18:	add	r2, r7, r2
   12d1c:	add	fp, fp, r2
   12d20:	add	fp, fp, r6, ror #27
   12d24:	ror	r8, r8, #2
   12d28:	ldr	r7, [sp, #16]
   12d2c:	ldr	r2, [sp, #24]
   12d30:	eor	r2, r7, r2
   12d34:	str	r9, [sp, #48]	; 0x30
   12d38:	eor	r2, r2, r9
   12d3c:	eor	r2, r2, ip
   12d40:	ror	r2, r2, #31
   12d44:	eor	r7, r5, r8
   12d48:	eor	r7, r7, r6
   12d4c:	add	r9, r2, r3
   12d50:	add	r4, r9, r4
   12d54:	add	r4, r7, r4
   12d58:	add	r4, r4, fp, ror #27
   12d5c:	ror	r6, r6, #2
   12d60:	ldr	r9, [sp, #20]
   12d64:	ldr	r7, [sp, #28]
   12d68:	eor	r7, r9, r7
   12d6c:	eor	r7, r7, lr
   12d70:	eor	r7, r7, r0
   12d74:	ror	r9, r7, #31
   12d78:	eor	r7, r8, r6
   12d7c:	eor	r7, r7, fp
   12d80:	str	r9, [sp, #16]
   12d84:	add	r9, r9, r3
   12d88:	add	r5, r9, r5
   12d8c:	add	r7, r7, r5
   12d90:	add	r7, r7, r4, ror #27
   12d94:	ror	fp, fp, #2
   12d98:	ldr	r5, [sp, #24]
   12d9c:	ldr	r9, [sp, #32]
   12da0:	eor	r5, r5, r9
   12da4:	ldr	r9, [sp, #44]	; 0x2c
   12da8:	eor	r5, r5, r9
   12dac:	eor	r5, r5, r1
   12db0:	ror	r5, r5, #31
   12db4:	eor	r9, r6, fp
   12db8:	eor	r9, r9, r4
   12dbc:	str	r5, [sp, #20]
   12dc0:	add	r5, r5, r3
   12dc4:	add	r8, r5, r8
   12dc8:	add	r9, r9, r8
   12dcc:	add	r9, r9, r7, ror #27
   12dd0:	ror	r4, r4, #2
   12dd4:	ldr	r8, [sp, #28]
   12dd8:	eor	r5, r8, sl
   12ddc:	ldr	r8, [sp, #8]
   12de0:	eor	r5, r5, r8
   12de4:	eor	r5, r5, r2
   12de8:	ror	r5, r5, #31
   12dec:	eor	r8, fp, r4
   12df0:	eor	r8, r8, r7
   12df4:	str	r5, [sp, #24]
   12df8:	add	r5, r5, r3
   12dfc:	add	r6, r5, r6
   12e00:	add	r6, r8, r6
   12e04:	add	r6, r6, r9, ror #27
   12e08:	ror	r7, r7, #2
   12e0c:	ldr	r8, [sp, #32]
   12e10:	ldr	r5, [sp, #36]	; 0x24
   12e14:	eor	r5, r8, r5
   12e18:	ldr	r8, [sp, #12]
   12e1c:	eor	r5, r5, r8
   12e20:	ldr	r8, [sp, #16]
   12e24:	eor	r5, r5, r8
   12e28:	ror	r8, r5, #31
   12e2c:	eor	r5, r4, r7
   12e30:	eor	r5, r5, r9
   12e34:	str	r8, [sp, #28]
   12e38:	add	r8, r8, r3
   12e3c:	add	fp, r8, fp
   12e40:	add	r5, r5, fp
   12e44:	add	r5, r5, r6, ror #27
   12e48:	ror	r9, r9, #2
   12e4c:	ldr	fp, [sp, #40]	; 0x28
   12e50:	eor	sl, sl, fp
   12e54:	eor	sl, sl, ip
   12e58:	ldr	r8, [sp, #20]
   12e5c:	eor	sl, sl, r8
   12e60:	ror	sl, sl, #31
   12e64:	eor	r8, r7, r9
   12e68:	eor	r8, r8, r6
   12e6c:	str	sl, [sp, #32]
   12e70:	add	sl, sl, r3
   12e74:	add	r4, sl, r4
   12e78:	add	r4, r8, r4
   12e7c:	add	r4, r4, r5, ror #27
   12e80:	ror	r6, r6, #2
   12e84:	ldr	r8, [sp, #36]	; 0x24
   12e88:	ldr	sl, [sp, #48]	; 0x30
   12e8c:	eor	r8, r8, sl
   12e90:	eor	r8, r8, r0
   12e94:	ldr	sl, [sp, #24]
   12e98:	eor	r8, r8, sl
   12e9c:	ror	sl, r8, #31
   12ea0:	eor	r8, r9, r6
   12ea4:	eor	r8, r8, r5
   12ea8:	str	sl, [sp, #36]	; 0x24
   12eac:	add	sl, sl, r3
   12eb0:	add	r7, sl, r7
   12eb4:	add	r7, r8, r7
   12eb8:	add	r7, r7, r4, ror #27
   12ebc:	ror	r5, r5, #2
   12ec0:	eor	r8, fp, lr
   12ec4:	eor	r8, r8, r1
   12ec8:	ldr	fp, [sp, #28]
   12ecc:	eor	r8, r8, fp
   12ed0:	ror	fp, r8, #31
   12ed4:	eor	r8, r6, r5
   12ed8:	eor	r8, r8, r4
   12edc:	str	fp, [sp, #40]	; 0x28
   12ee0:	add	sl, fp, r3
   12ee4:	add	r9, sl, r9
   12ee8:	add	r9, r8, r9
   12eec:	add	r9, r9, r7, ror #27
   12ef0:	ror	r4, r4, #2
   12ef4:	ldr	sl, [sp, #48]	; 0x30
   12ef8:	ldr	fp, [sp, #44]	; 0x2c
   12efc:	eor	r8, sl, fp
   12f00:	eor	r8, r8, r2
   12f04:	ldr	sl, [sp, #32]
   12f08:	eor	r8, r8, sl
   12f0c:	ror	r8, r8, #31
   12f10:	eor	sl, r5, r4
   12f14:	eor	sl, sl, r7
   12f18:	str	r8, [sp, #44]	; 0x2c
   12f1c:	add	r8, r8, r3
   12f20:	add	r6, r8, r6
   12f24:	add	sl, sl, r6
   12f28:	add	sl, sl, r9, ror #27
   12f2c:	ror	r7, r7, #2
   12f30:	ldr	r8, [sp, #8]
   12f34:	eor	lr, lr, r8
   12f38:	ldr	r6, [sp, #16]
   12f3c:	eor	lr, lr, r6
   12f40:	ldr	r6, [sp, #36]	; 0x24
   12f44:	eor	lr, lr, r6
   12f48:	ror	lr, lr, #31
   12f4c:	mov	r6, lr
   12f50:	eor	lr, r4, r7
   12f54:	eor	lr, lr, r9
   12f58:	str	r6, [sp, #48]	; 0x30
   12f5c:	add	r6, r6, r3
   12f60:	add	r5, r6, r5
   12f64:	add	r5, lr, r5
   12f68:	add	lr, r5, sl, ror #27
   12f6c:	ror	r9, r9, #2
   12f70:	ldr	r5, [sp, #12]
   12f74:	eor	r5, fp, r5
   12f78:	ldr	fp, [sp, #20]
   12f7c:	eor	r5, r5, fp
   12f80:	ldr	fp, [sp, #40]	; 0x28
   12f84:	eor	r5, r5, fp
   12f88:	ror	r6, r5, #31
   12f8c:	eor	r8, r7, r9
   12f90:	eor	r8, r8, sl
   12f94:	add	r5, r6, r3
   12f98:	add	r4, r5, r4
   12f9c:	add	r4, r8, r4
   12fa0:	add	r8, r4, lr, ror #27
   12fa4:	ror	sl, sl, #2
   12fa8:	ldr	r4, [sp, #8]
   12fac:	eor	r4, r4, ip
   12fb0:	ldr	fp, [sp, #24]
   12fb4:	eor	r4, r4, fp
   12fb8:	ldr	r5, [sp, #44]	; 0x2c
   12fbc:	eor	r4, r4, r5
   12fc0:	ror	r4, r4, #31
   12fc4:	eor	fp, r9, sl
   12fc8:	eor	fp, fp, lr
   12fcc:	str	r4, [sp, #52]	; 0x34
   12fd0:	add	r4, r4, r3
   12fd4:	add	r7, r4, r7
   12fd8:	add	r7, fp, r7
   12fdc:	add	fp, r7, r8, ror #27
   12fe0:	ror	lr, lr, #2
   12fe4:	ldr	r5, [sp, #12]
   12fe8:	eor	r4, r5, r0
   12fec:	ldr	r5, [sp, #28]
   12ff0:	eor	r4, r4, r5
   12ff4:	ldr	r7, [sp, #48]	; 0x30
   12ff8:	eor	r4, r4, r7
   12ffc:	ror	r7, r4, #31
   13000:	eor	r4, sl, lr
   13004:	eor	r4, r4, r8
   13008:	str	r7, [sp, #56]	; 0x38
   1300c:	add	r5, r7, r3
   13010:	add	r9, r5, r9
   13014:	add	r9, r4, r9
   13018:	add	r9, r9, fp, ror #27
   1301c:	ror	r8, r8, #2
   13020:	eor	ip, ip, r1
   13024:	ldr	r4, [sp, #32]
   13028:	eor	ip, ip, r4
   1302c:	eor	ip, ip, r6
   13030:	ror	ip, ip, #31
   13034:	mov	r5, ip
   13038:	eor	ip, lr, r8
   1303c:	eor	ip, ip, fp
   13040:	str	r5, [sp, #60]	; 0x3c
   13044:	add	r4, r5, r3
   13048:	add	sl, r4, sl
   1304c:	add	sl, ip, sl
   13050:	add	ip, sl, r9, ror #27
   13054:	ror	fp, fp, #2
   13058:	eor	r0, r0, r2
   1305c:	ldr	r7, [sp, #36]	; 0x24
   13060:	eor	r0, r0, r7
   13064:	ldr	r4, [sp, #52]	; 0x34
   13068:	eor	r0, r0, r4
   1306c:	ror	r0, r0, #31
   13070:	mov	sl, r0
   13074:	eor	r0, r8, fp
   13078:	eor	r0, r0, r9
   1307c:	str	sl, [sp, #64]	; 0x40
   13080:	add	r4, sl, r3
   13084:	add	lr, r4, lr
   13088:	add	lr, r0, lr
   1308c:	add	r0, lr, ip, ror #27
   13090:	ror	r9, r9, #2
   13094:	ldr	lr, [sp, #16]
   13098:	eor	r1, r1, lr
   1309c:	ldr	r5, [sp, #40]	; 0x28
   130a0:	eor	r1, r1, r5
   130a4:	ldr	sl, [sp, #56]	; 0x38
   130a8:	eor	r1, r1, sl
   130ac:	ror	r1, r1, #31
   130b0:	mov	sl, r1
   130b4:	eor	r1, fp, r9
   130b8:	eor	r1, r1, ip
   130bc:	add	r3, sl, r3
   130c0:	add	r8, r3, r8
   130c4:	add	r8, r1, r8
   130c8:	add	r8, r8, r0, ror #27
   130cc:	ror	ip, ip, #2
   130d0:	ldr	r4, [sp, #20]
   130d4:	eor	r2, r2, r4
   130d8:	ldr	r1, [sp, #44]	; 0x2c
   130dc:	eor	r2, r2, r1
   130e0:	ldr	r1, [sp, #60]	; 0x3c
   130e4:	eor	r2, r2, r1
   130e8:	ror	r2, r2, #31
   130ec:	mov	r5, r2
   130f0:	orr	r2, r0, ip
   130f4:	and	r2, r2, r9
   130f8:	and	r3, r0, ip
   130fc:	orr	r2, r2, r3
   13100:	ldr	r1, [pc, #1916]	; 13884 <rb_base64_encode@plt+0x2994>
   13104:	str	r5, [sp, #68]	; 0x44
   13108:	add	r3, r5, r1
   1310c:	add	fp, r3, fp
   13110:	add	fp, r2, fp
   13114:	add	r2, fp, r8, ror #27
   13118:	ror	r0, r0, #2
   1311c:	ldr	fp, [sp, #24]
   13120:	eor	r7, lr, fp
   13124:	ldr	lr, [sp, #48]	; 0x30
   13128:	eor	r7, r7, lr
   1312c:	ldr	lr, [sp, #64]	; 0x40
   13130:	eor	r7, r7, lr
   13134:	ror	lr, r7, #31
   13138:	orr	r5, r8, r0
   1313c:	and	r3, r5, ip
   13140:	and	r5, r8, r0
   13144:	orr	r5, r3, r5
   13148:	str	lr, [sp, #8]
   1314c:	add	r3, lr, r1
   13150:	add	r9, r3, r9
   13154:	add	r9, r5, r9
   13158:	add	r9, r9, r2, ror #27
   1315c:	ror	r8, r8, #2
   13160:	ldr	r7, [sp, #28]
   13164:	eor	r5, r4, r7
   13168:	eor	r5, r5, r6
   1316c:	str	sl, [sp, #72]	; 0x48
   13170:	eor	r5, r5, sl
   13174:	ror	r4, r5, #31
   13178:	orr	lr, r2, r8
   1317c:	and	r3, lr, r0
   13180:	and	lr, r2, r8
   13184:	orr	lr, r3, lr
   13188:	str	r4, [sp, #28]
   1318c:	add	r3, r4, r1
   13190:	add	ip, r3, ip
   13194:	add	ip, lr, ip
   13198:	add	lr, ip, r9, ror #27
   1319c:	ror	r2, r2, #2
   131a0:	ldr	sl, [sp, #32]
   131a4:	eor	r5, fp, sl
   131a8:	ldr	r4, [sp, #52]	; 0x34
   131ac:	eor	r5, r5, r4
   131b0:	ldr	ip, [sp, #68]	; 0x44
   131b4:	eor	r5, r5, ip
   131b8:	ror	ip, r5, #31
   131bc:	orr	r4, r9, r2
   131c0:	and	r3, r4, r8
   131c4:	and	r4, r9, r2
   131c8:	orr	r4, r3, r4
   131cc:	str	ip, [sp, #32]
   131d0:	add	r3, ip, r1
   131d4:	add	r0, r3, r0
   131d8:	add	r0, r4, r0
   131dc:	add	r4, r0, lr, ror #27
   131e0:	ror	r9, r9, #2
   131e4:	mov	r5, r7
   131e8:	ldr	r7, [sp, #36]	; 0x24
   131ec:	eor	r5, r5, r7
   131f0:	ldr	r0, [sp, #56]	; 0x38
   131f4:	eor	r5, r5, r0
   131f8:	ldr	r0, [sp, #8]
   131fc:	eor	r5, r5, r0
   13200:	ror	r0, r5, #31
   13204:	orr	ip, lr, r9
   13208:	and	r3, ip, r2
   1320c:	and	ip, lr, r9
   13210:	orr	ip, r3, ip
   13214:	str	r0, [sp, #12]
   13218:	add	r3, r0, r1
   1321c:	add	r8, r3, r8
   13220:	add	r8, ip, r8
   13224:	add	ip, r8, r4, ror #27
   13228:	ror	lr, lr, #2
   1322c:	ldr	fp, [sp, #40]	; 0x28
   13230:	eor	r3, sl, fp
   13234:	ldr	sl, [sp, #60]	; 0x3c
   13238:	eor	r3, r3, sl
   1323c:	ldr	r8, [sp, #28]
   13240:	eor	r3, r3, r8
   13244:	ror	r5, r3, #31
   13248:	orr	sl, r4, lr
   1324c:	and	r3, sl, r9
   13250:	and	sl, r4, lr
   13254:	orr	sl, r3, sl
   13258:	str	r5, [sp, #36]	; 0x24
   1325c:	add	r3, r5, r1
   13260:	add	r2, r3, r2
   13264:	add	r2, sl, r2
   13268:	add	sl, r2, ip, ror #27
   1326c:	ror	r4, r4, #2
   13270:	ldr	r0, [sp, #44]	; 0x2c
   13274:	eor	r2, r7, r0
   13278:	ldr	r5, [sp, #64]	; 0x40
   1327c:	eor	r2, r2, r5
   13280:	ldr	r8, [sp, #32]
   13284:	eor	r2, r2, r8
   13288:	ror	r7, r2, #31
   1328c:	mov	r8, r7
   13290:	orr	r3, ip, r4
   13294:	and	r2, r3, lr
   13298:	and	r3, ip, r4
   1329c:	orr	r3, r2, r3
   132a0:	add	r2, r7, r1
   132a4:	add	r9, r2, r9
   132a8:	add	r9, r3, r9
   132ac:	add	r9, r9, sl, ror #27
   132b0:	ror	r5, ip, #2
   132b4:	ldr	r7, [sp, #48]	; 0x30
   132b8:	eor	r3, fp, r7
   132bc:	ldr	ip, [sp, #72]	; 0x48
   132c0:	eor	r3, r3, ip
   132c4:	ldr	fp, [sp, #12]
   132c8:	eor	r3, r3, fp
   132cc:	ror	fp, r3, #31
   132d0:	orr	ip, sl, r5
   132d4:	and	r3, ip, r4
   132d8:	and	ip, sl, r5
   132dc:	orr	ip, r3, ip
   132e0:	str	fp, [sp, #16]
   132e4:	add	r3, fp, r1
   132e8:	add	lr, r3, lr
   132ec:	add	ip, ip, lr
   132f0:	add	ip, ip, r9, ror #27
   132f4:	ror	sl, sl, #2
   132f8:	eor	r2, r0, r6
   132fc:	ldr	fp, [sp, #68]	; 0x44
   13300:	eor	r2, r2, fp
   13304:	ldr	fp, [sp, #36]	; 0x24
   13308:	eor	r2, r2, fp
   1330c:	ror	r2, r2, #31
   13310:	orr	r0, r9, sl
   13314:	and	r3, r0, r5
   13318:	and	r0, r9, sl
   1331c:	orr	r0, r3, r0
   13320:	add	r3, r2, r1
   13324:	add	r4, r3, r4
   13328:	add	r0, r0, r4
   1332c:	add	r0, r0, ip, ror #27
   13330:	ror	r9, r9, #2
   13334:	ldr	r4, [sp, #52]	; 0x34
   13338:	eor	r3, r7, r4
   1333c:	ldr	r7, [sp, #8]
   13340:	eor	r3, r3, r7
   13344:	str	r8, [sp, #52]	; 0x34
   13348:	eor	r3, r3, r8
   1334c:	ror	lr, r3, #31
   13350:	orr	r7, ip, r9
   13354:	and	r3, r7, sl
   13358:	and	r7, ip, r9
   1335c:	orr	r7, r3, r7
   13360:	str	lr, [sp, #20]
   13364:	add	r3, lr, r1
   13368:	add	r5, r3, r5
   1336c:	add	r7, r7, r5
   13370:	add	r7, r7, r0, ror #27
   13374:	ror	ip, ip, #2
   13378:	ldr	r8, [sp, #56]	; 0x38
   1337c:	eor	r5, r6, r8
   13380:	ldr	r6, [sp, #28]
   13384:	eor	r5, r5, r6
   13388:	ldr	lr, [sp, #16]
   1338c:	eor	r5, r5, lr
   13390:	ror	r6, r5, #31
   13394:	mov	r5, r6
   13398:	orr	r6, r0, ip
   1339c:	and	r3, r6, r9
   133a0:	and	r6, r0, ip
   133a4:	orr	r6, r3, r6
   133a8:	str	r5, [sp, #40]	; 0x28
   133ac:	add	r3, r5, r1
   133b0:	add	sl, r3, sl
   133b4:	add	r6, r6, sl
   133b8:	add	r6, r6, r7, ror #27
   133bc:	ror	r0, r0, #2
   133c0:	ldr	sl, [sp, #60]	; 0x3c
   133c4:	eor	fp, r4, sl
   133c8:	ldr	r4, [sp, #32]
   133cc:	eor	fp, fp, r4
   133d0:	str	r2, [sp, #56]	; 0x38
   133d4:	eor	fp, fp, r2
   133d8:	ror	fp, fp, #31
   133dc:	orr	r5, r7, r0
   133e0:	and	lr, r5, ip
   133e4:	and	r5, r7, r0
   133e8:	orr	r5, lr, r5
   133ec:	add	lr, fp, r1
   133f0:	add	lr, lr, r9
   133f4:	add	lr, r5, lr
   133f8:	add	lr, lr, r6, ror #27
   133fc:	ror	r7, r7, #2
   13400:	mov	r4, r8
   13404:	ldr	r8, [sp, #64]	; 0x40
   13408:	eor	r5, r4, r8
   1340c:	ldr	r9, [sp, #12]
   13410:	eor	r5, r5, r9
   13414:	ldr	r9, [sp, #20]
   13418:	eor	r5, r5, r9
   1341c:	ror	r9, r5, #31
   13420:	orr	r4, r6, r7
   13424:	and	r3, r4, r0
   13428:	and	r4, r6, r7
   1342c:	orr	r4, r3, r4
   13430:	str	r9, [sp, #24]
   13434:	add	r3, r9, r1
   13438:	add	ip, r3, ip
   1343c:	add	r4, r4, ip
   13440:	add	r4, r4, lr, ror #27
   13444:	ror	r6, r6, #2
   13448:	ldr	ip, [sp, #72]	; 0x48
   1344c:	eor	r9, sl, ip
   13450:	ldr	r5, [sp, #36]	; 0x24
   13454:	eor	r9, r9, r5
   13458:	ldr	sl, [sp, #40]	; 0x28
   1345c:	eor	r9, r9, sl
   13460:	ror	r9, r9, #31
   13464:	orr	sl, lr, r6
   13468:	and	r3, sl, r7
   1346c:	and	sl, lr, r6
   13470:	orr	sl, r3, sl
   13474:	add	r3, r9, r1
   13478:	add	r0, r3, r0
   1347c:	add	sl, sl, r0
   13480:	add	sl, sl, r4, ror #27
   13484:	ror	r5, lr, #2
   13488:	mov	lr, r8
   1348c:	ldr	r8, [sp, #68]	; 0x44
   13490:	eor	r2, lr, r8
   13494:	ldr	lr, [sp, #52]	; 0x34
   13498:	eor	r2, r2, lr
   1349c:	eor	r2, r2, fp
   134a0:	ror	r0, r2, #31
   134a4:	orr	r2, r4, r5
   134a8:	and	r3, r2, r6
   134ac:	and	r2, r4, r5
   134b0:	orr	r2, r3, r2
   134b4:	str	r0, [sp, #44]	; 0x2c
   134b8:	add	r3, r0, r1
   134bc:	add	r7, r3, r7
   134c0:	add	r2, r2, r7
   134c4:	add	r2, r2, sl, ror #27
   134c8:	ror	r4, r4, #2
   134cc:	ldr	r7, [sp, #8]
   134d0:	eor	r3, ip, r7
   134d4:	ldr	ip, [sp, #16]
   134d8:	eor	r3, r3, ip
   134dc:	ldr	r0, [sp, #24]
   134e0:	eor	r3, r3, r0
   134e4:	ror	r7, r3, #31
   134e8:	orr	r3, sl, r4
   134ec:	and	r0, r3, r5
   134f0:	and	r3, sl, r4
   134f4:	orr	r3, r0, r3
   134f8:	add	r0, r7, r1
   134fc:	add	r6, r0, r6
   13500:	add	r3, r3, r6
   13504:	add	r3, r3, r2, ror #27
   13508:	ror	sl, sl, #2
   1350c:	ldr	r6, [sp, #28]
   13510:	eor	lr, r8, r6
   13514:	ldr	r8, [sp, #56]	; 0x38
   13518:	eor	lr, lr, r8
   1351c:	eor	lr, lr, r9
   13520:	ror	ip, lr, #31
   13524:	orr	lr, r2, sl
   13528:	and	r0, lr, r4
   1352c:	and	lr, r2, sl
   13530:	orr	lr, r0, lr
   13534:	str	ip, [sp, #48]	; 0x30
   13538:	add	r0, ip, r1
   1353c:	add	r5, r0, r5
   13540:	add	lr, lr, r5
   13544:	add	lr, lr, r3, ror #27
   13548:	ror	r2, r2, #2
   1354c:	ldr	r0, [sp, #8]
   13550:	ldr	r5, [sp, #32]
   13554:	eor	ip, r0, r5
   13558:	ldr	r0, [sp, #20]
   1355c:	eor	ip, ip, r0
   13560:	ldr	r8, [sp, #44]	; 0x2c
   13564:	eor	ip, ip, r8
   13568:	ror	r8, ip, #31
   1356c:	orr	ip, r3, r2
   13570:	and	r0, ip, sl
   13574:	and	ip, r3, r2
   13578:	orr	ip, r0, ip
   1357c:	str	r8, [sp, #8]
   13580:	add	r0, r8, r1
   13584:	add	r4, r0, r4
   13588:	add	ip, ip, r4
   1358c:	add	ip, ip, lr, ror #27
   13590:	ror	r3, r3, #2
   13594:	ldr	r0, [sp, #12]
   13598:	eor	r4, r6, r0
   1359c:	ldr	r6, [sp, #40]	; 0x28
   135a0:	eor	r4, r4, r6
   135a4:	eor	r4, r4, r7
   135a8:	ror	r4, r4, #31
   135ac:	orr	r8, lr, r3
   135b0:	and	r0, r8, r2
   135b4:	and	r8, lr, r3
   135b8:	orr	r8, r0, r8
   135bc:	str	r4, [sp, #28]
   135c0:	add	r0, r4, r1
   135c4:	add	sl, r0, sl
   135c8:	add	r8, r8, sl
   135cc:	add	r8, r8, ip, ror #27
   135d0:	ror	lr, lr, #2
   135d4:	mov	r4, r5
   135d8:	ldr	r5, [sp, #36]	; 0x24
   135dc:	eor	r0, r4, r5
   135e0:	eor	r0, r0, fp
   135e4:	ldr	sl, [sp, #48]	; 0x30
   135e8:	eor	r0, r0, sl
   135ec:	ror	r6, r0, #31
   135f0:	mov	sl, r6
   135f4:	orr	r0, ip, lr
   135f8:	and	r0, r0, r3
   135fc:	and	r6, ip, lr
   13600:	orr	r6, r0, r6
   13604:	str	sl, [sp, #32]
   13608:	add	r1, sl, r1
   1360c:	add	r1, r1, r2
   13610:	add	r6, r6, r1
   13614:	add	r6, r6, r8, ror #27
   13618:	ror	ip, ip, #2
   1361c:	ldr	r0, [sp, #12]
   13620:	ldr	r4, [sp, #52]	; 0x34
   13624:	eor	r2, r0, r4
   13628:	ldr	sl, [sp, #24]
   1362c:	eor	r2, r2, sl
   13630:	ldr	r1, [sp, #8]
   13634:	eor	r2, r2, r1
   13638:	ror	r1, r2, #31
   1363c:	eor	r0, lr, ip
   13640:	eor	r0, r0, r8
   13644:	ldr	sl, [pc, #572]	; 13888 <rb_base64_encode@plt+0x2998>
   13648:	str	r1, [sp, #12]
   1364c:	add	r2, r1, sl
   13650:	add	r3, r2, r3
   13654:	add	r0, r0, r3
   13658:	add	r0, r0, r6, ror #27
   1365c:	ror	r8, r8, #2
   13660:	ldr	r1, [sp, #16]
   13664:	eor	r3, r5, r1
   13668:	eor	r3, r3, r9
   1366c:	ldr	r5, [sp, #28]
   13670:	eor	r3, r3, r5
   13674:	ror	r5, r3, #31
   13678:	eor	r1, ip, r8
   1367c:	eor	r1, r1, r6
   13680:	str	r5, [sp, #36]	; 0x24
   13684:	add	r3, r5, sl
   13688:	add	lr, r3, lr
   1368c:	add	r1, r1, lr
   13690:	add	r1, r1, r0, ror #27
   13694:	ror	r6, r6, #2
   13698:	ldr	lr, [sp, #56]	; 0x38
   1369c:	eor	r2, r4, lr
   136a0:	ldr	r4, [sp, #44]	; 0x2c
   136a4:	eor	r2, r2, r4
   136a8:	ldr	r5, [sp, #32]
   136ac:	eor	r2, r2, r5
   136b0:	ror	r4, r2, #31
   136b4:	eor	r5, r8, r6
   136b8:	eor	r5, r5, r0
   136bc:	str	r4, [sp, #52]	; 0x34
   136c0:	add	r3, r4, sl
   136c4:	add	ip, r3, ip
   136c8:	add	r5, r5, ip
   136cc:	add	r5, r5, r1, ror #27
   136d0:	ror	r0, r0, #2
   136d4:	ldr	ip, [sp, #16]
   136d8:	ldr	r4, [sp, #20]
   136dc:	eor	r3, ip, r4
   136e0:	eor	r3, r3, r7
   136e4:	ldr	ip, [sp, #12]
   136e8:	eor	r3, r3, ip
   136ec:	ror	r2, r3, #31
   136f0:	eor	r4, r6, r0
   136f4:	eor	r4, r4, r1
   136f8:	str	r2, [sp, #16]
   136fc:	add	r3, r2, sl
   13700:	add	r8, r3, r8
   13704:	add	r4, r4, r8
   13708:	add	r4, r4, r5, ror #27
   1370c:	ror	r1, r1, #2
   13710:	ldr	r8, [sp, #40]	; 0x28
   13714:	eor	r2, lr, r8
   13718:	ldr	lr, [sp, #48]	; 0x30
   1371c:	eor	r2, r2, lr
   13720:	ldr	lr, [sp, #36]	; 0x24
   13724:	eor	r2, r2, lr
   13728:	ror	lr, r2, #31
   1372c:	eor	r2, r0, r1
   13730:	eor	r2, r2, r5
   13734:	str	lr, [sp, #40]	; 0x28
   13738:	add	r3, lr, sl
   1373c:	add	r6, r3, r6
   13740:	add	r2, r2, r6
   13744:	add	r2, r2, r4, ror #27
   13748:	ror	r5, r5, #2
   1374c:	ldr	ip, [sp, #20]
   13750:	eor	r3, ip, fp
   13754:	ldr	ip, [sp, #8]
   13758:	eor	r3, r3, ip
   1375c:	ldr	r6, [sp, #52]	; 0x34
   13760:	eor	r3, r3, r6
   13764:	ror	r6, r3, #31
   13768:	eor	r3, r1, r5
   1376c:	eor	r3, r3, r4
   13770:	str	r6, [sp, #20]
   13774:	add	ip, r6, sl
   13778:	add	r0, ip, r0
   1377c:	add	r3, r3, r0
   13780:	add	r3, r3, r2, ror #27
   13784:	ror	r4, r4, #2
   13788:	ldr	r0, [sp, #24]
   1378c:	eor	r0, r8, r0
   13790:	ldr	r6, [sp, #28]
   13794:	eor	r0, r0, r6
   13798:	ldr	ip, [sp, #16]
   1379c:	eor	r0, r0, ip
   137a0:	ror	r0, r0, #31
   137a4:	eor	lr, r5, r4
   137a8:	eor	lr, lr, r2
   137ac:	add	ip, r0, sl
   137b0:	add	r1, ip, r1
   137b4:	add	lr, lr, r1
   137b8:	add	lr, lr, r3, ror #27
   137bc:	ror	r2, r2, #2
   137c0:	eor	r1, fp, r9
   137c4:	ldr	fp, [sp, #32]
   137c8:	eor	r1, r1, fp
   137cc:	ldr	fp, [sp, #40]	; 0x28
   137d0:	eor	r1, r1, fp
   137d4:	ror	r1, r1, #31
   137d8:	eor	ip, r4, r2
   137dc:	eor	ip, ip, r3
   137e0:	add	r6, r1, sl
   137e4:	add	r5, r6, r5
   137e8:	add	ip, ip, r5
   137ec:	add	ip, ip, lr, ror #27
   137f0:	ror	r3, r3, #2
   137f4:	ldr	r5, [sp, #24]
   137f8:	ldr	r8, [sp, #44]	; 0x2c
   137fc:	eor	r5, r5, r8
   13800:	ldr	r6, [sp, #12]
   13804:	eor	r5, r5, r6
   13808:	ldr	fp, [sp, #20]
   1380c:	eor	r5, r5, fp
   13810:	ror	r5, r5, #31
   13814:	mov	r6, r5
   13818:	eor	fp, r2, r3
   1381c:	eor	fp, fp, lr
   13820:	add	r5, r5, sl
   13824:	add	r4, r5, r4
   13828:	add	fp, fp, r4
   1382c:	add	fp, fp, ip, ror #27
   13830:	ror	lr, lr, #2
   13834:	eor	r4, r9, r7
   13838:	ldr	r9, [sp, #36]	; 0x24
   1383c:	eor	r4, r4, r9
   13840:	eor	r4, r4, r0
   13844:	ror	r4, r4, #31
   13848:	eor	r9, r3, lr
   1384c:	eor	r9, r9, ip
   13850:	str	r4, [sp, #24]
   13854:	add	r4, r4, sl
   13858:	add	r2, r4, r2
   1385c:	add	r9, r9, r2
   13860:	add	r9, r9, fp, ror #27
   13864:	ror	ip, ip, #2
   13868:	ldr	r5, [sp, #48]	; 0x30
   1386c:	eor	r2, r8, r5
   13870:	ldr	r4, [sp, #52]	; 0x34
   13874:	eor	r2, r2, r4
   13878:	b	1388c <rb_base64_encode@plt+0x299c>
   1387c:	bpl	fe0b1ee8 <stderr@@GLIBC_2.4+0xfe08cdf8>
   13880:	vfnmsvs.f64	d30, d25, d17
   13884:	svchi	0x001bbcdc
   13888:	bgt	18c3fe8 <stderr@@GLIBC_2.4+0x189eef8>
   1388c:	eor	r2, r2, r1
   13890:	ror	r2, r2, #31
   13894:	eor	r8, lr, ip
   13898:	eor	r8, r8, fp
   1389c:	add	r4, r2, sl
   138a0:	add	r3, r4, r3
   138a4:	add	r8, r8, r3
   138a8:	add	r8, r8, r9, ror #27
   138ac:	ror	fp, fp, #2
   138b0:	ldr	r4, [sp, #8]
   138b4:	eor	r3, r7, r4
   138b8:	ldr	r7, [sp, #16]
   138bc:	eor	r3, r3, r7
   138c0:	str	r6, [sp, #44]	; 0x2c
   138c4:	eor	r3, r3, r6
   138c8:	ror	r3, r3, #31
   138cc:	eor	r7, ip, fp
   138d0:	eor	r7, r7, r9
   138d4:	add	r4, r3, sl
   138d8:	add	lr, r4, lr
   138dc:	add	r7, r7, lr
   138e0:	add	r7, r7, r8, ror #27
   138e4:	ror	r9, r9, #2
   138e8:	ldr	r6, [sp, #28]
   138ec:	eor	lr, r5, r6
   138f0:	ldr	r5, [sp, #40]	; 0x28
   138f4:	eor	lr, lr, r5
   138f8:	ldr	r5, [sp, #24]
   138fc:	eor	lr, lr, r5
   13900:	ror	lr, lr, #31
   13904:	eor	r6, fp, r9
   13908:	eor	r6, r6, r8
   1390c:	add	r4, lr, sl
   13910:	add	ip, r4, ip
   13914:	add	r6, r6, ip
   13918:	add	r6, r6, r7, ror #27
   1391c:	ror	r8, r8, #2
   13920:	ldr	r4, [sp, #8]
   13924:	ldr	r5, [sp, #32]
   13928:	eor	ip, r4, r5
   1392c:	ldr	r5, [sp, #20]
   13930:	eor	ip, ip, r5
   13934:	eor	ip, ip, r2
   13938:	ror	ip, ip, #31
   1393c:	eor	r5, r9, r8
   13940:	eor	r5, r5, r7
   13944:	add	sl, ip, sl
   13948:	add	sl, sl, fp
   1394c:	add	r5, r5, sl
   13950:	add	r5, r5, r6, ror #27
   13954:	ror	r7, r7, #2
   13958:	ldr	r4, [sp, #28]
   1395c:	ldr	sl, [sp, #12]
   13960:	eor	r4, r4, sl
   13964:	eor	r0, r0, r4
   13968:	eor	r0, r0, r3
   1396c:	ror	r0, r0, #31
   13970:	eor	r4, r8, r7
   13974:	eor	r4, r4, r6
   13978:	ldr	sl, [pc, #-248]	; 13888 <rb_base64_encode@plt+0x2998>
   1397c:	add	fp, r0, sl
   13980:	add	r9, fp, r9
   13984:	add	r4, r4, r9
   13988:	add	r4, r4, r5, ror #27
   1398c:	ror	r6, r6, #2
   13990:	ldr	fp, [sp, #32]
   13994:	ldr	r9, [sp, #36]	; 0x24
   13998:	eor	r9, fp, r9
   1399c:	eor	r1, r1, r9
   139a0:	eor	lr, lr, r1
   139a4:	ror	lr, lr, #31
   139a8:	eor	r1, r7, r6
   139ac:	eor	r1, r1, r5
   139b0:	add	r9, lr, sl
   139b4:	add	r8, r9, r8
   139b8:	add	r1, r1, r8
   139bc:	add	r1, r1, r4, ror #27
   139c0:	ror	r5, r5, #2
   139c4:	ldr	r8, [sp, #12]
   139c8:	ldr	fp, [sp, #52]	; 0x34
   139cc:	eor	r8, r8, fp
   139d0:	ldr	r9, [sp, #44]	; 0x2c
   139d4:	eor	r8, r8, r9
   139d8:	eor	ip, ip, r8
   139dc:	ror	ip, ip, #31
   139e0:	eor	r8, r6, r5
   139e4:	eor	r8, r8, r4
   139e8:	add	r9, ip, sl
   139ec:	add	r7, r9, r7
   139f0:	add	r8, r8, r7
   139f4:	add	r8, r8, r1, ror #27
   139f8:	ror	r4, r4, #2
   139fc:	ldr	r9, [sp, #36]	; 0x24
   13a00:	ldr	r7, [sp, #16]
   13a04:	eor	r7, r9, r7
   13a08:	ldr	r9, [sp, #24]
   13a0c:	eor	r7, r7, r9
   13a10:	eor	r7, r7, r0
   13a14:	add	r7, sl, r7, ror #31
   13a18:	add	r6, r7, r6
   13a1c:	eor	r7, r5, r4
   13a20:	eor	r7, r7, r1
   13a24:	add	r6, r6, r7
   13a28:	add	r6, r6, r8, ror #27
   13a2c:	ror	r1, r1, #2
   13a30:	ldr	r9, [sp, #40]	; 0x28
   13a34:	eor	r0, fp, r9
   13a38:	eor	r2, r2, r0
   13a3c:	eor	r2, r2, lr
   13a40:	add	r2, sl, r2, ror #31
   13a44:	add	r5, r2, r5
   13a48:	eor	r2, r4, r1
   13a4c:	eor	r2, r2, r8
   13a50:	add	r5, r5, r2
   13a54:	add	r5, r5, r6, ror #27
   13a58:	ror	r8, r8, #2
   13a5c:	ldr	r7, [sp, #16]
   13a60:	ldr	fp, [sp, #20]
   13a64:	eor	r2, r7, fp
   13a68:	eor	r3, r3, r2
   13a6c:	eor	ip, ip, r3
   13a70:	ldr	r0, [sp, #76]	; 0x4c
   13a74:	add	sl, r0, sl
   13a78:	add	ip, sl, ip, ror #31
   13a7c:	add	r4, ip, r4
   13a80:	eor	ip, r1, r8
   13a84:	eor	ip, ip, r6
   13a88:	add	r4, r4, ip
   13a8c:	add	r4, r4, r5, ror #27
   13a90:	ldr	r3, [sp, #4]
   13a94:	str	r4, [r3]
   13a98:	ldr	r0, [sp, #80]	; 0x50
   13a9c:	add	r5, r0, r5
   13aa0:	str	r5, [r3, #4]
   13aa4:	ldr	r2, [sp, #84]	; 0x54
   13aa8:	add	r6, r2, r6, ror #2
   13aac:	str	r6, [r3, #8]
   13ab0:	ldr	ip, [sp, #88]	; 0x58
   13ab4:	add	r8, ip, r8
   13ab8:	str	r8, [r3, #12]
   13abc:	ldr	r2, [sp, #92]	; 0x5c
   13ac0:	add	r1, r2, r1
   13ac4:	str	r1, [r3, #16]
   13ac8:	mov	r0, #0
   13acc:	add	sp, sp, #164	; 0xa4
   13ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ad4:	ldr	r3, [pc, #48]	; 13b0c <rb_base64_encode@plt+0x2c1c>
   13ad8:	str	r3, [r0]
   13adc:	ldr	r3, [pc, #44]	; 13b10 <rb_base64_encode@plt+0x2c20>
   13ae0:	str	r3, [r0, #4]
   13ae4:	ldr	r3, [pc, #40]	; 13b14 <rb_base64_encode@plt+0x2c24>
   13ae8:	str	r3, [r0, #8]
   13aec:	ldr	r3, [pc, #36]	; 13b18 <rb_base64_encode@plt+0x2c28>
   13af0:	str	r3, [r0, #12]
   13af4:	ldr	r3, [pc, #32]	; 13b1c <rb_base64_encode@plt+0x2c2c>
   13af8:	str	r3, [r0, #16]
   13afc:	mov	r2, #0
   13b00:	mov	r3, #0
   13b04:	strd	r2, [r0, #24]
   13b08:	bx	lr
   13b0c:	strbvs	r2, [r5, -r1, lsl #6]
   13b10:	svc	0x00cdab89
   13b14:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   13b18:	eorsne	r5, r2, r6, ror r4
   13b1c:	bicsgt	lr, r2, #240, 2	; 0x3c
   13b20:	push	{r4, r5, r6, r7, r8, lr}
   13b24:	mov	r6, r0
   13b28:	mov	r8, r1
   13b2c:	mov	r7, r2
   13b30:	ldrd	r2, [r0, #24]
   13b34:	lsr	r5, r2, #3
   13b38:	and	r5, r5, #63	; 0x3f
   13b3c:	lsl	r1, r7, #3
   13b40:	adds	r2, r2, r1
   13b44:	adc	r3, r3, #0
   13b48:	strd	r2, [r0, #24]
   13b4c:	add	r3, r5, r7
   13b50:	cmp	r3, #63	; 0x3f
   13b54:	movls	r1, #0
   13b58:	bhi	13b74 <rb_base64_encode@plt+0x2c84>
   13b5c:	add	r0, r5, #32
   13b60:	sub	r2, r7, r1
   13b64:	add	r1, r8, r1
   13b68:	add	r0, r6, r0
   13b6c:	bl	10dc4 <memcpy@plt>
   13b70:	pop	{r4, r5, r6, r7, r8, pc}
   13b74:	rsb	r4, r5, #64	; 0x40
   13b78:	add	r0, r5, #32
   13b7c:	mov	r2, r4
   13b80:	mov	r1, r8
   13b84:	add	r0, r6, r0
   13b88:	bl	10dc4 <memcpy@plt>
   13b8c:	add	r1, r6, #32
   13b90:	mov	r0, r6
   13b94:	bl	127f8 <rb_base64_encode@plt+0x1908>
   13b98:	rsb	r5, r5, #127	; 0x7f
   13b9c:	cmp	r7, r5
   13ba0:	bls	13bcc <rb_base64_encode@plt+0x2cdc>
   13ba4:	add	r1, r8, r4
   13ba8:	mov	r0, r6
   13bac:	bl	127f8 <rb_base64_encode@plt+0x1908>
   13bb0:	add	r1, r4, #64	; 0x40
   13bb4:	add	r3, r4, #127	; 0x7f
   13bb8:	mov	r4, r1
   13bbc:	cmp	r7, r3
   13bc0:	bhi	13ba4 <rb_base64_encode@plt+0x2cb4>
   13bc4:	mov	r5, #0
   13bc8:	b	13b5c <rb_base64_encode@plt+0x2c6c>
   13bcc:	mov	r1, r4
   13bd0:	mov	r5, #0
   13bd4:	b	13b5c <rb_base64_encode@plt+0x2c6c>
   13bd8:	push	{r4, r5, r6, r7, lr}
   13bdc:	sub	sp, sp, #12
   13be0:	mov	r4, r0
   13be4:	mov	r5, r1
   13be8:	ldr	r6, [r0, #24]
   13bec:	ldr	r0, [r0, #28]
   13bf0:	mov	r1, sp
   13bf4:	mvn	r2, #0
   13bf8:	and	r3, r2, #7
   13bfc:	lsl	r3, r3, #3
   13c00:	rsb	lr, r3, #32
   13c04:	sub	ip, r3, #32
   13c08:	lsr	r3, r6, r3
   13c0c:	orr	r3, r3, r0, lsl lr
   13c10:	orr	r3, r3, r0, lsr ip
   13c14:	strb	r3, [r1], #1
   13c18:	sub	r2, r2, #1
   13c1c:	cmn	r2, #9
   13c20:	bne	13bf8 <rb_base64_encode@plt+0x2d08>
   13c24:	mov	r2, #1
   13c28:	ldr	r1, [pc, #164]	; 13cd4 <rb_base64_encode@plt+0x2de4>
   13c2c:	mov	r0, r4
   13c30:	bl	13b20 <rb_base64_encode@plt+0x2c30>
   13c34:	ldrd	r2, [r4, #24]
   13c38:	and	r2, r2, #504	; 0x1f8
   13c3c:	mov	r3, #0
   13c40:	cmp	r3, #0
   13c44:	cmpeq	r2, #448	; 0x1c0
   13c48:	beq	13c7c <rb_base64_encode@plt+0x2d8c>
   13c4c:	ldr	r7, [pc, #132]	; 13cd8 <rb_base64_encode@plt+0x2de8>
   13c50:	mov	r6, #1
   13c54:	mov	r2, r6
   13c58:	mov	r1, r7
   13c5c:	mov	r0, r4
   13c60:	bl	13b20 <rb_base64_encode@plt+0x2c30>
   13c64:	ldrd	r2, [r4, #24]
   13c68:	and	r2, r2, #504	; 0x1f8
   13c6c:	mov	r3, #0
   13c70:	cmp	r3, #0
   13c74:	cmpeq	r2, #448	; 0x1c0
   13c78:	bne	13c54 <rb_base64_encode@plt+0x2d64>
   13c7c:	mov	r2, #8
   13c80:	mov	r1, sp
   13c84:	mov	r0, r4
   13c88:	bl	13b20 <rb_base64_encode@plt+0x2c30>
   13c8c:	sub	r1, r5, #1
   13c90:	mov	r2, #0
   13c94:	lsr	r0, r2, #2
   13c98:	mvn	r3, r2
   13c9c:	and	r3, r3, #3
   13ca0:	lsl	r3, r3, #3
   13ca4:	ldr	r0, [r4, r0, lsl #2]
   13ca8:	lsr	r3, r0, r3
   13cac:	strb	r3, [r1, #1]!
   13cb0:	add	r2, r2, #1
   13cb4:	cmp	r2, #20
   13cb8:	bne	13c94 <rb_base64_encode@plt+0x2da4>
   13cbc:	mov	r2, #96	; 0x60
   13cc0:	mov	r1, #0
   13cc4:	mov	r0, r4
   13cc8:	bl	10d34 <memset@plt>
   13ccc:	add	sp, sp, #12
   13cd0:	pop	{r4, r5, r6, r7, pc}
   13cd4:	andeq	r4, r1, r0, lsr r0
   13cd8:	andeq	r4, r1, ip, lsr #32
   13cdc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13ce0:	mov	r7, r0
   13ce4:	ldr	r6, [pc, #72]	; 13d34 <rb_base64_encode@plt+0x2e44>
   13ce8:	ldr	r5, [pc, #72]	; 13d38 <rb_base64_encode@plt+0x2e48>
   13cec:	add	r6, pc, r6
   13cf0:	add	r5, pc, r5
   13cf4:	sub	r6, r6, r5
   13cf8:	mov	r8, r1
   13cfc:	mov	r9, r2
   13d00:	bl	10c60 <open@plt-0x20>
   13d04:	asrs	r6, r6, #2
   13d08:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d0c:	mov	r4, #0
   13d10:	add	r4, r4, #1
   13d14:	ldr	r3, [r5], #4
   13d18:	mov	r2, r9
   13d1c:	mov	r1, r8
   13d20:	mov	r0, r7
   13d24:	blx	r3
   13d28:	cmp	r6, r4
   13d2c:	bne	13d10 <rb_base64_encode@plt+0x2e20>
   13d30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d34:	andeq	r1, r1, r4, lsl #4
   13d38:	strdeq	r1, [r1], -ip
   13d3c:	bx	lr

Disassembly of section .fini:

00013d40 <.fini>:
   13d40:	push	{r3, lr}
   13d44:	pop	{r3, pc}
