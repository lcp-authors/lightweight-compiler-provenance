
../repos/charybdis/tools/.libs/charybdis-mkfingerprint:     file format elf32-littlearm


Disassembly of section .init:

000104a8 <.init>:
   104a8:	push	{r3, lr}
   104ac:	bl	1057c <strcmp@plt+0x48>
   104b0:	pop	{r3, pc}

Disassembly of section .plt:

000104b4 <abort@plt-0x14>:
   104b4:	push	{lr}		; (str lr, [sp, #-4]!)
   104b8:	ldr	lr, [pc, #4]	; 104c4 <abort@plt-0x4>
   104bc:	add	lr, pc, lr
   104c0:	ldr	pc, [lr, #8]!
   104c4:	andeq	r0, r1, ip, lsr fp

000104c8 <abort@plt>:
   104c8:	add	ip, pc, #0, 12
   104cc:	add	ip, ip, #16, 20	; 0x10000
   104d0:	ldr	pc, [ip, #2876]!	; 0xb3c

000104d4 <__libc_start_main@plt>:
   104d4:	add	ip, pc, #0, 12
   104d8:	add	ip, ip, #16, 20	; 0x10000
   104dc:	ldr	pc, [ip, #2868]!	; 0xb34

000104e0 <__gmon_start__@plt>:
   104e0:	add	ip, pc, #0, 12
   104e4:	add	ip, ip, #16, 20	; 0x10000
   104e8:	ldr	pc, [ip, #2860]!	; 0xb2c

000104ec <putchar@plt>:
   104ec:	add	ip, pc, #0, 12
   104f0:	add	ip, ip, #16, 20	; 0x10000
   104f4:	ldr	pc, [ip, #2852]!	; 0xb24

000104f8 <perror@plt>:
   104f8:	add	ip, pc, #0, 12
   104fc:	add	ip, ip, #16, 20	; 0x10000
   10500:	ldr	pc, [ip, #2844]!	; 0xb1c

00010504 <printf@plt>:
   10504:	add	ip, pc, #0, 12
   10508:	add	ip, ip, #16, 20	; 0x10000
   1050c:	ldr	pc, [ip, #2836]!	; 0xb14

00010510 <fwrite@plt>:
   10510:	add	ip, pc, #0, 12
   10514:	add	ip, ip, #16, 20	; 0x10000
   10518:	ldr	pc, [ip, #2828]!	; 0xb0c

0001051c <puts@plt>:
   1051c:	add	ip, pc, #0, 12
   10520:	add	ip, ip, #16, 20	; 0x10000
   10524:	ldr	pc, [ip, #2820]!	; 0xb04

00010528 <rb_get_ssl_certfp_file@plt>:
   10528:	add	ip, pc, #0, 12
   1052c:	add	ip, ip, #16, 20	; 0x10000
   10530:	ldr	pc, [ip, #2812]!	; 0xafc

00010534 <strcmp@plt>:
   10534:	add	ip, pc, #0, 12
   10538:	add	ip, ip, #16, 20	; 0x10000
   1053c:	ldr	pc, [ip, #2804]!	; 0xaf4

Disassembly of section .text:

00010540 <.text>:
   10540:	mov	fp, #0
   10544:	mov	lr, #0
   10548:	pop	{r1}		; (ldr r1, [sp], #4)
   1054c:	mov	r2, sp
   10550:	push	{r2}		; (str r2, [sp, #-4]!)
   10554:	push	{r0}		; (str r0, [sp, #-4]!)
   10558:	ldr	ip, [pc, #16]	; 10570 <strcmp@plt+0x3c>
   1055c:	push	{ip}		; (str ip, [sp, #-4]!)
   10560:	ldr	r0, [pc, #12]	; 10574 <strcmp@plt+0x40>
   10564:	ldr	r3, [pc, #12]	; 10578 <strcmp@plt+0x44>
   10568:	bl	104d4 <__libc_start_main@plt>
   1056c:	bl	104c8 <abort@plt>
   10570:	andeq	r0, r1, r4, lsr #17
   10574:	andeq	r0, r1, r0, lsr r6
   10578:	andeq	r0, r1, r4, asr #16
   1057c:	ldr	r3, [pc, #20]	; 10598 <strcmp@plt+0x64>
   10580:	ldr	r2, [pc, #20]	; 1059c <strcmp@plt+0x68>
   10584:	add	r3, pc, r3
   10588:	ldr	r2, [r3, r2]
   1058c:	cmp	r2, #0
   10590:	bxeq	lr
   10594:	b	104e0 <__gmon_start__@plt>
   10598:	andeq	r0, r1, r4, ror sl
   1059c:	andeq	r0, r0, r4, lsr r0
   105a0:	ldr	r0, [pc, #24]	; 105c0 <strcmp@plt+0x8c>
   105a4:	ldr	r3, [pc, #24]	; 105c4 <strcmp@plt+0x90>
   105a8:	cmp	r3, r0
   105ac:	bxeq	lr
   105b0:	ldr	r3, [pc, #16]	; 105c8 <strcmp@plt+0x94>
   105b4:	cmp	r3, #0
   105b8:	bxeq	lr
   105bc:	bx	r3
   105c0:	andeq	r1, r2, r4, asr #32
   105c4:	andeq	r1, r2, r4, asr #32
   105c8:	andeq	r0, r0, r0
   105cc:	ldr	r0, [pc, #36]	; 105f8 <strcmp@plt+0xc4>
   105d0:	ldr	r1, [pc, #36]	; 105fc <strcmp@plt+0xc8>
   105d4:	sub	r1, r1, r0
   105d8:	asr	r1, r1, #2
   105dc:	add	r1, r1, r1, lsr #31
   105e0:	asrs	r1, r1, #1
   105e4:	bxeq	lr
   105e8:	ldr	r3, [pc, #16]	; 10600 <strcmp@plt+0xcc>
   105ec:	cmp	r3, #0
   105f0:	bxeq	lr
   105f4:	bx	r3
   105f8:	andeq	r1, r2, r4, asr #32
   105fc:	andeq	r1, r2, r4, asr #32
   10600:	andeq	r0, r0, r0
   10604:	push	{r4, lr}
   10608:	ldr	r4, [pc, #24]	; 10628 <strcmp@plt+0xf4>
   1060c:	ldrb	r3, [r4]
   10610:	cmp	r3, #0
   10614:	popne	{r4, pc}
   10618:	bl	105a0 <strcmp@plt+0x6c>
   1061c:	mov	r3, #1
   10620:	strb	r3, [r4]
   10624:	pop	{r4, pc}
   10628:	andeq	r1, r2, r4, asr #32
   1062c:	b	105cc <strcmp@plt+0x98>
   10630:	push	{r4, r5, r6, r7, fp, lr}
   10634:	add	fp, sp, #16
   10638:	sub	sp, sp, #72	; 0x48
   1063c:	mov	r6, sp
   10640:	vmov.i32	q8, #0	; 0x00000000
   10644:	mov	r2, #64	; 0x40
   10648:	mov	r7, #0
   1064c:	cmp	r0, #3
   10650:	mov	r3, r6
   10654:	vst1.64	{d16-d17}, [r3], r2
   10658:	add	r2, r6, #48	; 0x30
   1065c:	vst1.64	{d16-d17}, [r2]
   10660:	add	r2, r6, #32
   10664:	strb	r7, [r3]
   10668:	vst1.64	{d16-d17}, [r2]
   1066c:	add	r2, r6, #16
   10670:	vst1.64	{d16-d17}, [r2]
   10674:	bne	10718 <strcmp@plt+0x1e4>
   10678:	ldr	r6, [r1, #4]
   1067c:	ldr	r4, [r1, #8]
   10680:	ldr	r1, [pc, #392]	; 10810 <strcmp@plt+0x2dc>
   10684:	add	r1, pc, r1
   10688:	mov	r0, r6
   1068c:	bl	10534 <strcmp@plt>
   10690:	ldr	r5, [pc, #380]	; 10814 <strcmp@plt+0x2e0>
   10694:	cmp	r0, #0
   10698:	add	r5, pc, r5
   1069c:	beq	10764 <strcmp@plt+0x230>
   106a0:	ldr	r1, [pc, #368]	; 10818 <strcmp@plt+0x2e4>
   106a4:	mov	r0, r6
   106a8:	add	r1, pc, r1
   106ac:	bl	10534 <strcmp@plt>
   106b0:	cmp	r0, #0
   106b4:	beq	10738 <strcmp@plt+0x204>
   106b8:	ldr	r1, [pc, #348]	; 1081c <strcmp@plt+0x2e8>
   106bc:	mov	r0, r6
   106c0:	add	r1, pc, r1
   106c4:	bl	10534 <strcmp@plt>
   106c8:	cmp	r0, #0
   106cc:	beq	10740 <strcmp@plt+0x20c>
   106d0:	ldr	r1, [pc, #328]	; 10820 <strcmp@plt+0x2ec>
   106d4:	mov	r0, r6
   106d8:	add	r1, pc, r1
   106dc:	bl	10534 <strcmp@plt>
   106e0:	cmp	r0, #0
   106e4:	beq	10748 <strcmp@plt+0x214>
   106e8:	ldr	r1, [pc, #312]	; 10828 <strcmp@plt+0x2f4>
   106ec:	mov	r0, r6
   106f0:	add	r1, pc, r1
   106f4:	bl	10534 <strcmp@plt>
   106f8:	cmp	r0, #0
   106fc:	beq	10758 <strcmp@plt+0x224>
   10700:	ldr	r0, [pc, #312]	; 10840 <strcmp@plt+0x30c>
   10704:	mov	r1, r6
   10708:	add	r0, pc, r0
   1070c:	bl	10504 <printf@plt>
   10710:	mov	r4, #1
   10714:	b	107c4 <strcmp@plt+0x290>
   10718:	ldr	r0, [pc, #232]	; 10808 <strcmp@plt+0x2d4>
   1071c:	add	r0, pc, r0
   10720:	bl	1051c <puts@plt>
   10724:	ldr	r0, [pc, #224]	; 1080c <strcmp@plt+0x2d8>
   10728:	add	r0, pc, r0
   1072c:	bl	1051c <puts@plt>
   10730:	mov	r4, #1
   10734:	b	107c4 <strcmp@plt+0x290>
   10738:	mov	r7, #1
   1073c:	b	10764 <strcmp@plt+0x230>
   10740:	mov	r7, #2
   10744:	b	10764 <strcmp@plt+0x230>
   10748:	ldr	r5, [pc, #212]	; 10824 <strcmp@plt+0x2f0>
   1074c:	movw	r7, #4097	; 0x1001
   10750:	add	r5, pc, r5
   10754:	b	10764 <strcmp@plt+0x230>
   10758:	ldr	r5, [pc, #204]	; 1082c <strcmp@plt+0x2f8>
   1075c:	movw	r7, #4098	; 0x1002
   10760:	add	r5, pc, r5
   10764:	mov	r6, sp
   10768:	mov	r0, r4
   1076c:	mov	r2, r7
   10770:	mov	r1, r6
   10774:	bl	10528 <rb_get_ssl_certfp_file@plt>
   10778:	cmn	r0, #1
   1077c:	ble	107d0 <strcmp@plt+0x29c>
   10780:	mov	r7, r0
   10784:	cmp	r0, #0
   10788:	beq	107e0 <strcmp@plt+0x2ac>
   1078c:	ldr	r0, [pc, #164]	; 10838 <strcmp@plt+0x304>
   10790:	mov	r1, r5
   10794:	add	r0, pc, r0
   10798:	bl	10504 <printf@plt>
   1079c:	ldr	r4, [pc, #152]	; 1083c <strcmp@plt+0x308>
   107a0:	add	r4, pc, r4
   107a4:	ldrb	r1, [r6], #1
   107a8:	mov	r0, r4
   107ac:	bl	10504 <printf@plt>
   107b0:	subs	r7, r7, #1
   107b4:	bne	107a4 <strcmp@plt+0x270>
   107b8:	mov	r0, #10
   107bc:	bl	104ec <putchar@plt>
   107c0:	mov	r4, #0
   107c4:	mov	r0, r4
   107c8:	sub	sp, fp, #16
   107cc:	pop	{r4, r5, r6, r7, fp, pc}
   107d0:	mov	r0, r4
   107d4:	bl	104f8 <perror@plt>
   107d8:	mov	r4, #1
   107dc:	b	107c4 <strcmp@plt+0x290>
   107e0:	ldr	r0, [pc, #72]	; 10830 <strcmp@plt+0x2fc>
   107e4:	mov	r1, #14
   107e8:	mov	r2, #1
   107ec:	mov	r4, #1
   107f0:	ldr	r0, [pc, r0]
   107f4:	ldr	r3, [r0]
   107f8:	ldr	r0, [pc, #52]	; 10834 <strcmp@plt+0x300>
   107fc:	add	r0, pc, r0
   10800:	bl	10510 <fwrite@plt>
   10804:	b	107c4 <strcmp@plt+0x290>
   10808:	strdeq	r0, [r0], -ip
   1080c:	andeq	r0, r0, r0, lsr #4
   10810:	andeq	r0, r0, r8, lsr #4
   10814:	andeq	r0, r0, r1, ror r2
   10818:	andeq	r0, r0, lr, lsl #4
   1081c:	andeq	r0, r0, r1, lsl r2
   10820:	ldrdeq	r0, [r0], -r9
   10824:	andeq	r0, r0, sp, ror #2
   10828:	ldrdeq	r0, [r0], -ip
   1082c:	andeq	r0, r0, r8, ror r1
   10830:	andeq	r0, r1, r0, asr #16
   10834:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   10838:	andeq	r0, r0, r6, ror r1
   1083c:	andeq	r0, r0, sp, ror #2
   10840:	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   10844:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10848:	mov	r7, r0
   1084c:	ldr	r6, [pc, #72]	; 1089c <strcmp@plt+0x368>
   10850:	ldr	r5, [pc, #72]	; 108a0 <strcmp@plt+0x36c>
   10854:	add	r6, pc, r6
   10858:	add	r5, pc, r5
   1085c:	sub	r6, r6, r5
   10860:	mov	r8, r1
   10864:	mov	r9, r2
   10868:	bl	104a8 <abort@plt-0x20>
   1086c:	asrs	r6, r6, #2
   10870:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10874:	mov	r4, #0
   10878:	add	r4, r4, #1
   1087c:	ldr	r3, [r5], #4
   10880:	mov	r2, r9
   10884:	mov	r1, r8
   10888:	mov	r0, r7
   1088c:	blx	r3
   10890:	cmp	r6, r4
   10894:	bne	10878 <strcmp@plt+0x344>
   10898:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1089c:	muleq	r1, r8, r6
   108a0:	muleq	r1, r0, r6
   108a4:	bx	lr

Disassembly of section .fini:

000108a8 <.fini>:
   108a8:	push	{r3, lr}
   108ac:	pop	{r3, pc}
