
../repos/eddieantonio-ocreval-3ab279a/nonstopacc/nonstopacc:     file format elf32-littlearm


Disassembly of section .init:

000109cc <.init>:
   109cc:	push	{r3, lr}
   109d0:	bl	10be4 <__assert_fail@plt+0x48>
   109d4:	pop	{r3, pc}

Disassembly of section .plt:

000109d8 <calloc@plt-0x14>:
   109d8:	push	{lr}		; (str lr, [sp, #-4]!)
   109dc:	ldr	lr, [pc, #4]	; 109e8 <calloc@plt-0x4>
   109e0:	add	lr, pc, lr
   109e4:	ldr	pc, [lr, #8]!
   109e8:	andeq	r6, r1, r8, lsl r6

000109ec <calloc@plt>:
   109ec:	add	ip, pc, #0, 12
   109f0:	add	ip, ip, #90112	; 0x16000
   109f4:	ldr	pc, [ip, #1560]!	; 0x618

000109f8 <strcmp@plt>:
   109f8:	add	ip, pc, #0, 12
   109fc:	add	ip, ip, #90112	; 0x16000
   10a00:	ldr	pc, [ip, #1552]!	; 0x610

00010a04 <strtol@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #90112	; 0x16000
   10a0c:	ldr	pc, [ip, #1544]!	; 0x608

00010a10 <printf@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #90112	; 0x16000
   10a18:	ldr	pc, [ip, #1536]!	; 0x600

00010a1c <fopen@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #90112	; 0x16000
   10a24:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a28 <free@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #90112	; 0x16000
   10a30:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a34 <utf8proc_get_property@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #90112	; 0x16000
   10a3c:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a40 <fgets@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #90112	; 0x16000
   10a48:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a4c <utf8proc_encode_char@plt>:
   10a4c:	add	ip, pc, #0, 12
   10a50:	add	ip, ip, #90112	; 0x16000
   10a54:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a58 <strdup@plt>:
   10a58:	add	ip, pc, #0, 12
   10a5c:	add	ip, ip, #90112	; 0x16000
   10a60:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a64 <rewind@plt>:
   10a64:	add	ip, pc, #0, 12
   10a68:	add	ip, ip, #90112	; 0x16000
   10a6c:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a70 <unlink@plt>:
   10a70:	add	ip, pc, #0, 12
   10a74:	add	ip, ip, #90112	; 0x16000
   10a78:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a7c <utf8proc_tolower@plt>:
   10a7c:	add	ip, pc, #0, 12
   10a80:	add	ip, ip, #90112	; 0x16000
   10a84:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a88 <__xstat@plt>:
   10a88:	add	ip, pc, #0, 12
   10a8c:	add	ip, ip, #90112	; 0x16000
   10a90:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a94 <fwrite@plt>:
   10a94:	add	ip, pc, #0, 12
   10a98:	add	ip, ip, #90112	; 0x16000
   10a9c:	ldr	pc, [ip, #1448]!	; 0x5a8

00010aa0 <fread@plt>:
   10aa0:	add	ip, pc, #0, 12
   10aa4:	add	ip, ip, #90112	; 0x16000
   10aa8:	ldr	pc, [ip, #1440]!	; 0x5a0

00010aac <utf8proc_iterate@plt>:
   10aac:	add	ip, pc, #0, 12
   10ab0:	add	ip, ip, #90112	; 0x16000
   10ab4:	ldr	pc, [ip, #1432]!	; 0x598

00010ab8 <malloc@plt>:
   10ab8:	add	ip, pc, #0, 12
   10abc:	add	ip, ip, #90112	; 0x16000
   10ac0:	ldr	pc, [ip, #1424]!	; 0x590

00010ac4 <__libc_start_main@plt>:
   10ac4:	add	ip, pc, #0, 12
   10ac8:	add	ip, ip, #90112	; 0x16000
   10acc:	ldr	pc, [ip, #1416]!	; 0x588

00010ad0 <__sysv_signal@plt>:
   10ad0:	add	ip, pc, #0, 12
   10ad4:	add	ip, ip, #90112	; 0x16000
   10ad8:	ldr	pc, [ip, #1408]!	; 0x580

00010adc <__gmon_start__@plt>:
   10adc:	add	ip, pc, #0, 12
   10ae0:	add	ip, ip, #90112	; 0x16000
   10ae4:	ldr	pc, [ip, #1400]!	; 0x578

00010ae8 <getpid@plt>:
   10ae8:	add	ip, pc, #0, 12
   10aec:	add	ip, ip, #90112	; 0x16000
   10af0:	ldr	pc, [ip, #1392]!	; 0x570

00010af4 <exit@plt>:
   10af4:	add	ip, pc, #0, 12
   10af8:	add	ip, ip, #90112	; 0x16000
   10afc:	ldr	pc, [ip, #1384]!	; 0x568

00010b00 <utf8proc_category@plt>:
   10b00:	add	ip, pc, #0, 12
   10b04:	add	ip, ip, #90112	; 0x16000
   10b08:	ldr	pc, [ip, #1376]!	; 0x560

00010b0c <strlen@plt>:
   10b0c:	add	ip, pc, #0, 12
   10b10:	add	ip, ip, #90112	; 0x16000
   10b14:	ldr	pc, [ip, #1368]!	; 0x558

00010b18 <fprintf@plt>:
   10b18:	add	ip, pc, #0, 12
   10b1c:	add	ip, ip, #90112	; 0x16000
   10b20:	ldr	pc, [ip, #1360]!	; 0x550

00010b24 <__isoc99_sscanf@plt>:
   10b24:	add	ip, pc, #0, 12
   10b28:	add	ip, ip, #90112	; 0x16000
   10b2c:	ldr	pc, [ip, #1352]!	; 0x548

00010b30 <fclose@plt>:
   10b30:	add	ip, pc, #0, 12
   10b34:	add	ip, ip, #90112	; 0x16000
   10b38:	ldr	pc, [ip, #1344]!	; 0x540

00010b3c <utf8proc_NFC@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #90112	; 0x16000
   10b44:	ldr	pc, [ip, #1336]!	; 0x538

00010b48 <fputc@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #90112	; 0x16000
   10b50:	ldr	pc, [ip, #1328]!	; 0x530

00010b54 <sprintf@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #90112	; 0x16000
   10b5c:	ldr	pc, [ip, #1320]!	; 0x528

00010b60 <utf8proc_errmsg@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #90112	; 0x16000
   10b68:	ldr	pc, [ip, #1312]!	; 0x520

00010b6c <fputs@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #90112	; 0x16000
   10b74:	ldr	pc, [ip, #1304]!	; 0x518

00010b78 <strncmp@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #90112	; 0x16000
   10b80:	ldr	pc, [ip, #1296]!	; 0x510

00010b84 <abort@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #90112	; 0x16000
   10b8c:	ldr	pc, [ip, #1288]!	; 0x508

00010b90 <getc@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #90112	; 0x16000
   10b98:	ldr	pc, [ip, #1280]!	; 0x500

00010b9c <__assert_fail@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #90112	; 0x16000
   10ba4:	ldr	pc, [ip, #1272]!	; 0x4f8

Disassembly of section .text:

00010ba8 <error@@Base-0x154c>:
   10ba8:	mov	fp, #0
   10bac:	mov	lr, #0
   10bb0:	pop	{r1}		; (ldr r1, [sp], #4)
   10bb4:	mov	r2, sp
   10bb8:	push	{r2}		; (str r2, [sp, #-4]!)
   10bbc:	push	{r0}		; (str r0, [sp, #-4]!)
   10bc0:	ldr	ip, [pc, #16]	; 10bd8 <__assert_fail@plt+0x3c>
   10bc4:	push	{ip}		; (str ip, [sp, #-4]!)
   10bc8:	ldr	r0, [pc, #12]	; 10bdc <__assert_fail@plt+0x40>
   10bcc:	ldr	r3, [pc, #12]	; 10be0 <__assert_fail@plt+0x44>
   10bd0:	bl	10ac4 <__libc_start_main@plt>
   10bd4:	bl	10b84 <abort@plt>
   10bd8:	andeq	r2, r1, r8, asr lr
   10bdc:	andeq	r0, r1, r8, lsl lr
   10be0:	strdeq	r2, [r1], -r8
   10be4:	ldr	r3, [pc, #20]	; 10c00 <__assert_fail@plt+0x64>
   10be8:	ldr	r2, [pc, #20]	; 10c04 <__assert_fail@plt+0x68>
   10bec:	add	r3, pc, r3
   10bf0:	ldr	r2, [r3, r2]
   10bf4:	cmp	r2, #0
   10bf8:	bxeq	lr
   10bfc:	b	10adc <__gmon_start__@plt>
   10c00:	andeq	r6, r1, ip, lsl #8
   10c04:	andeq	r0, r0, r0, lsr #1
   10c08:	ldr	r3, [pc, #28]	; 10c2c <__assert_fail@plt+0x90>
   10c0c:	ldr	r0, [pc, #28]	; 10c30 <__assert_fail@plt+0x94>
   10c10:	sub	r3, r3, r0
   10c14:	cmp	r3, #6
   10c18:	bxls	lr
   10c1c:	ldr	r3, [pc, #16]	; 10c34 <__assert_fail@plt+0x98>
   10c20:	cmp	r3, #0
   10c24:	bxeq	lr
   10c28:	bx	r3
   10c2c:	andeq	r7, r2, r3, asr #1
   10c30:	andeq	r7, r2, r0, asr #1
   10c34:	andeq	r0, r0, r0
   10c38:	ldr	r1, [pc, #36]	; 10c64 <__assert_fail@plt+0xc8>
   10c3c:	ldr	r0, [pc, #36]	; 10c68 <__assert_fail@plt+0xcc>
   10c40:	sub	r1, r1, r0
   10c44:	asr	r1, r1, #2
   10c48:	add	r1, r1, r1, lsr #31
   10c4c:	asrs	r1, r1, #1
   10c50:	bxeq	lr
   10c54:	ldr	r3, [pc, #16]	; 10c6c <__assert_fail@plt+0xd0>
   10c58:	cmp	r3, #0
   10c5c:	bxeq	lr
   10c60:	bx	r3
   10c64:	andeq	r7, r2, r0, asr #1
   10c68:	andeq	r7, r2, r0, asr #1
   10c6c:	andeq	r0, r0, r0
   10c70:	push	{r4, lr}
   10c74:	ldr	r4, [pc, #24]	; 10c94 <__assert_fail@plt+0xf8>
   10c78:	ldrb	r3, [r4]
   10c7c:	cmp	r3, #0
   10c80:	popne	{r4, pc}
   10c84:	bl	10c08 <__assert_fail@plt+0x6c>
   10c88:	mov	r3, #1
   10c8c:	strb	r3, [r4]
   10c90:	pop	{r4, pc}
   10c94:	ldrdeq	r7, [r2], -r0
   10c98:	ldr	r0, [pc, #40]	; 10cc8 <__assert_fail@plt+0x12c>
   10c9c:	ldr	r3, [r0]
   10ca0:	cmp	r3, #0
   10ca4:	bne	10cac <__assert_fail@plt+0x110>
   10ca8:	b	10c38 <__assert_fail@plt+0x9c>
   10cac:	ldr	r3, [pc, #24]	; 10ccc <__assert_fail@plt+0x130>
   10cb0:	cmp	r3, #0
   10cb4:	beq	10ca8 <__assert_fail@plt+0x10c>
   10cb8:	push	{r4, lr}
   10cbc:	blx	r3
   10cc0:	pop	{r4, lr}
   10cc4:	b	10c38 <__assert_fail@plt+0x9c>
   10cc8:	andeq	r6, r2, r4, lsl #28
   10ccc:	andeq	r0, r0, r0
   10cd0:	push	{r4, lr}
   10cd4:	bl	11758 <__assert_fail@plt+0xbbc>
   10cd8:	cmp	r0, #0
   10cdc:	popeq	{r4, pc}
   10ce0:	ldr	r2, [pc, #36]	; 10d0c <__assert_fail@plt+0x170>
   10ce4:	ldr	r3, [r2]
   10ce8:	ldr	r1, [r0, #12]
   10cec:	sub	r3, r3, r1
   10cf0:	str	r3, [r2]
   10cf4:	ldr	r2, [pc, #20]	; 10d10 <__assert_fail@plt+0x174>
   10cf8:	ldr	r3, [r2]
   10cfc:	ldr	r1, [r0, #16]
   10d00:	sub	r3, r3, r1
   10d04:	str	r3, [r2]
   10d08:	pop	{r4, pc}
   10d0c:	andeq	r7, r2, r8, asr #2
   10d10:	andeq	fp, r2, ip, lsr r4
   10d14:	push	{r4, lr}
   10d18:	ldr	r3, [pc, #80]	; 10d70 <__assert_fail@plt+0x1d4>
   10d1c:	ldr	r1, [r3]
   10d20:	add	r2, r1, #1
   10d24:	str	r2, [r3]
   10d28:	ldr	r3, [pc, #68]	; 10d74 <__assert_fail@plt+0x1d8>
   10d2c:	ldr	r2, [r3]
   10d30:	ldr	r3, [pc, #64]	; 10d78 <__assert_fail@plt+0x1dc>
   10d34:	ldr	r3, [r3]
   10d38:	sub	r3, r2, r3
   10d3c:	vmov	s14, r3
   10d40:	vcvt.f64.s32	d7, s14
   10d44:	vldr	d6, [pc, #28]	; 10d68 <__assert_fail@plt+0x1cc>
   10d48:	vmul.f64	d7, d7, d6
   10d4c:	vmov	s13, r2
   10d50:	vcvt.f64.s32	d6, s13
   10d54:	vdiv.f64	d5, d7, d6
   10d58:	vmov	r2, r3, d5
   10d5c:	ldr	r0, [pc, #24]	; 10d7c <__assert_fail@plt+0x1e0>
   10d60:	bl	10a10 <printf@plt>
   10d64:	pop	{r4, pc}
   10d68:	andeq	r0, r0, r0
   10d6c:	subsmi	r0, r9, r0
   10d70:	ldrdeq	r7, [r2], -r4
   10d74:	andeq	r7, r2, r8, asr #2
   10d78:	andeq	fp, r2, ip, lsr r4
   10d7c:	andeq	r2, r1, r8, ror #28
   10d80:	ldr	r2, [pc, #120]	; 10e00 <__assert_fail@plt+0x264>
   10d84:	ldr	r3, [r2]
   10d88:	ldr	r1, [pc, #116]	; 10e04 <__assert_fail@plt+0x268>
   10d8c:	str	r3, [r1]
   10d90:	ldr	r1, [r2, #4]
   10d94:	ldr	r2, [pc, #108]	; 10e08 <__assert_fail@plt+0x26c>
   10d98:	str	r1, [r2]
   10d9c:	cmp	r3, #0
   10da0:	bxeq	lr
   10da4:	push	{r4, r5, r6, r7, r8, lr}
   10da8:	bl	10d14 <__assert_fail@plt+0x178>
   10dac:	ldr	r3, [pc, #88]	; 10e0c <__assert_fail@plt+0x270>
   10db0:	ldr	r4, [r3]
   10db4:	cmp	r4, #0
   10db8:	popeq	{r4, r5, r6, r7, r8, pc}
   10dbc:	ldr	r7, [pc, #76]	; 10e10 <__assert_fail@plt+0x274>
   10dc0:	ldr	r6, [pc, #76]	; 10e14 <__assert_fail@plt+0x278>
   10dc4:	ldr	r5, [pc, #56]	; 10e04 <__assert_fail@plt+0x268>
   10dc8:	ldr	r1, [r4, #8]
   10dcc:	mov	r0, r7
   10dd0:	bl	10cd0 <__assert_fail@plt+0x134>
   10dd4:	ldr	r1, [r4, #8]
   10dd8:	mov	r0, r6
   10ddc:	bl	10cd0 <__assert_fail@plt+0x134>
   10de0:	ldr	r3, [r5]
   10de4:	cmp	r3, #0
   10de8:	popeq	{r4, r5, r6, r7, r8, pc}
   10dec:	bl	10d14 <__assert_fail@plt+0x178>
   10df0:	ldr	r4, [r4, #4]
   10df4:	cmp	r4, #0
   10df8:	bne	10dc8 <__assert_fail@plt+0x22c>
   10dfc:	pop	{r4, r5, r6, r7, r8, pc}
   10e00:	andeq	r7, r2, ip, ror #2
   10e04:	andeq	r7, r2, r8, asr #2
   10e08:	andeq	fp, r2, ip, lsr r4
   10e0c:	andeq	r7, r2, ip, asr r1
   10e10:	andeq	r7, r2, ip, asr #10
   10e14:	andeq	r9, r2, r4, asr #9
   10e18:	push	{lr}		; (str lr, [sp, #-4]!)
   10e1c:	sub	sp, sp, #12
   10e20:	add	ip, sp, #8
   10e24:	str	r0, [ip, #-4]!
   10e28:	mov	r4, r1
   10e2c:	mov	r3, #0
   10e30:	ldr	r2, [pc, #76]	; 10e84 <__assert_fail@plt+0x2e8>
   10e34:	mov	r0, ip
   10e38:	bl	12234 <error@@Base+0x140>
   10e3c:	ldr	r3, [sp, #4]
   10e40:	cmp	r3, #2
   10e44:	beq	10e50 <__assert_fail@plt+0x2b4>
   10e48:	ldr	r0, [pc, #56]	; 10e88 <__assert_fail@plt+0x2ec>
   10e4c:	bl	120f4 <error@@Base>
   10e50:	ldr	r5, [pc, #52]	; 10e8c <__assert_fail@plt+0x2f0>
   10e54:	ldr	r2, [pc, #52]	; 10e90 <__assert_fail@plt+0x2f4>
   10e58:	ldr	r1, [r4]
   10e5c:	mov	r0, r5
   10e60:	bl	124c0 <error@@Base+0x3cc>
   10e64:	mov	r1, r5
   10e68:	ldr	r0, [pc, #36]	; 10e94 <__assert_fail@plt+0x2f8>
   10e6c:	bl	11a14 <__assert_fail@plt+0xe78>
   10e70:	ldr	r1, [r4, #4]
   10e74:	ldr	r0, [pc, #28]	; 10e98 <__assert_fail@plt+0x2fc>
   10e78:	bl	113e4 <__assert_fail@plt+0x848>
   10e7c:	bl	10d80 <__assert_fail@plt+0x1e4>
   10e80:	bl	1209c <__assert_fail@plt+0x1500>
   10e84:	andeq	r2, r1, r4, ror lr
   10e88:	muleq	r1, r8, lr
   10e8c:	andeq	r7, r2, ip, asr #2
   10e90:	andeq	r7, r2, ip, lsr #1
   10e94:	andeq	r7, r2, ip, asr r1
   10e98:	andeq	r7, r2, ip, ror #2
   10e9c:	andeq	r0, r0, r0
   10ea0:	push	{r4, lr}
   10ea4:	mov	r2, r0
   10ea8:	mov	r1, #99	; 0x63
   10eac:	ldr	r0, [pc, #12]	; 10ec0 <__assert_fail@plt+0x324>
   10eb0:	bl	10a40 <fgets@plt>
   10eb4:	adds	r0, r0, #0
   10eb8:	movne	r0, #1
   10ebc:	pop	{r4, pc}
   10ec0:	ldrdeq	r7, [r2], -r8
   10ec4:	push	{r4, lr}
   10ec8:	mov	r4, r1
   10ecc:	bl	10ea0 <__assert_fail@plt+0x304>
   10ed0:	cmp	r0, #0
   10ed4:	bne	10ee0 <__assert_fail@plt+0x344>
   10ed8:	mov	r0, #0
   10edc:	pop	{r4, pc}
   10ee0:	mov	r2, r4
   10ee4:	ldr	r1, [pc, #20]	; 10f00 <__assert_fail@plt+0x364>
   10ee8:	ldr	r0, [pc, #20]	; 10f04 <__assert_fail@plt+0x368>
   10eec:	bl	10b24 <__isoc99_sscanf@plt>
   10ef0:	cmp	r0, #1
   10ef4:	movne	r0, #0
   10ef8:	moveq	r0, #1
   10efc:	pop	{r4, pc}
   10f00:	andeq	r2, r1, ip, lsr #30
   10f04:	ldrdeq	r7, [r2], -r8
   10f08:	push	{r4, lr}
   10f0c:	ldr	r2, [r1]
   10f10:	cmp	r2, #0
   10f14:	beq	10f4c <__assert_fail@plt+0x3b0>
   10f18:	ldr	r3, [r1, #4]
   10f1c:	sub	r3, r2, r3
   10f20:	vmov	s14, r3
   10f24:	vcvt.f64.s32	d7, s14
   10f28:	vldr	d6, [pc, #56]	; 10f68 <__assert_fail@plt+0x3cc>
   10f2c:	vmul.f64	d7, d7, d6
   10f30:	vmov	s13, r2
   10f34:	vcvt.f64.s32	d6, s13
   10f38:	vdiv.f64	d5, d7, d6
   10f3c:	vmov	r2, r3, d5
   10f40:	ldr	r1, [pc, #40]	; 10f70 <__assert_fail@plt+0x3d4>
   10f44:	bl	10b18 <fprintf@plt>
   10f48:	pop	{r4, pc}
   10f4c:	mov	r3, r0
   10f50:	mov	r2, #8
   10f54:	mov	r1, #1
   10f58:	ldr	r0, [pc, #20]	; 10f74 <__assert_fail@plt+0x3d8>
   10f5c:	bl	10a94 <fwrite@plt>
   10f60:	pop	{r4, pc}
   10f64:	nop			; (mov r0, r0)
   10f68:	andeq	r0, r0, r0
   10f6c:	subsmi	r0, r9, r0
   10f70:			; <UNDEFINED> instruction: 0x00012ebc
   10f74:			; <UNDEFINED> instruction: 0x00012eb0
   10f78:	push	{r4, r5, r6, lr}
   10f7c:	mov	r4, r0
   10f80:	subs	r5, r1, #0
   10f84:	beq	10fbc <__assert_fail@plt+0x420>
   10f88:	ldr	r3, [r5, #4]
   10f8c:	ldr	r2, [r5]
   10f90:	ldr	r1, [pc, #60]	; 10fd4 <__assert_fail@plt+0x438>
   10f94:	bl	10b18 <fprintf@plt>
   10f98:	mov	r1, r5
   10f9c:	mov	r0, r4
   10fa0:	bl	10f08 <__assert_fail@plt+0x36c>
   10fa4:	mov	r3, r4
   10fa8:	mov	r2, #3
   10fac:	mov	r1, #1
   10fb0:	ldr	r0, [pc, #32]	; 10fd8 <__assert_fail@plt+0x43c>
   10fb4:	bl	10a94 <fwrite@plt>
   10fb8:	pop	{r4, r5, r6, pc}
   10fbc:	mov	r3, r0
   10fc0:	mov	r2, #26
   10fc4:	mov	r1, #1
   10fc8:	ldr	r0, [pc, #12]	; 10fdc <__assert_fail@plt+0x440>
   10fcc:	bl	10a94 <fwrite@plt>
   10fd0:	b	10fa4 <__assert_fail@plt+0x408>
   10fd4:	andeq	r2, r1, r4, asr #29
   10fd8:	andeq	r2, r1, ip, ror #29
   10fdc:	ldrdeq	r2, [r1], -r0
   10fe0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10fe4:	mov	r6, r0
   10fe8:	mov	r5, r1
   10fec:	mov	r7, r2
   10ff0:	ldrb	r9, [sp, #32]
   10ff4:	ldrb	sl, [sp, #36]	; 0x24
   10ff8:	mov	r2, r3
   10ffc:	ldr	r1, [pc, #240]	; 110f4 <__assert_fail@plt+0x558>
   11000:	bl	10b18 <fprintf@plt>
   11004:	mov	r1, #0
   11008:	mov	r0, r6
   1100c:	bl	10f78 <__assert_fail@plt+0x3dc>
   11010:	cmp	r9, #0
   11014:	bne	110d0 <__assert_fail@plt+0x534>
   11018:	ldr	r2, [pc, #216]	; 110f8 <__assert_fail@plt+0x55c>
   1101c:	ldr	r1, [pc, #216]	; 110fc <__assert_fail@plt+0x560>
   11020:	mov	r0, r6
   11024:	bl	10b18 <fprintf@plt>
   11028:	cmp	r7, #0
   1102c:	bgt	110e8 <__assert_fail@plt+0x54c>
   11030:	b	110a4 <__assert_fail@plt+0x508>
   11034:	add	r4, r4, #1
   11038:	sxth	r4, r4
   1103c:	cmp	r7, r4
   11040:	blt	11070 <__assert_fail@plt+0x4d4>
   11044:	add	r1, r5, r4, lsl #3
   11048:	ldr	r3, [r5, r4, lsl #3]
   1104c:	cmp	r3, #0
   11050:	ble	11034 <__assert_fail@plt+0x498>
   11054:	mov	r0, r6
   11058:	bl	10f78 <__assert_fail@plt+0x3dc>
   1105c:	mov	r2, r4
   11060:	mov	r1, r8
   11064:	mov	r0, r6
   11068:	bl	10b18 <fprintf@plt>
   1106c:	b	11034 <__assert_fail@plt+0x498>
   11070:	cmp	r9, #0
   11074:	beq	110a4 <__assert_fail@plt+0x508>
   11078:	add	r3, r7, #1
   1107c:	add	r1, r5, r3, lsl #3
   11080:	ldr	r3, [r5, r3, lsl #3]
   11084:	cmp	r3, #0
   11088:	ble	110a4 <__assert_fail@plt+0x508>
   1108c:	mov	r0, r6
   11090:	bl	10f78 <__assert_fail@plt+0x3dc>
   11094:	mov	r2, r7
   11098:	ldr	r1, [pc, #96]	; 11100 <__assert_fail@plt+0x564>
   1109c:	mov	r0, r6
   110a0:	bl	10b18 <fprintf@plt>
   110a4:	cmp	sl, #0
   110a8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   110ac:	mov	r1, r5
   110b0:	mov	r0, r6
   110b4:	bl	10f78 <__assert_fail@plt+0x3dc>
   110b8:	mov	r3, r6
   110bc:	mov	r2, #7
   110c0:	mov	r1, #1
   110c4:	ldr	r0, [pc, #56]	; 11104 <__assert_fail@plt+0x568>
   110c8:	bl	10a94 <fwrite@plt>
   110cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   110d0:	ldr	r2, [pc, #48]	; 11108 <__assert_fail@plt+0x56c>
   110d4:	ldr	r1, [pc, #32]	; 110fc <__assert_fail@plt+0x560>
   110d8:	mov	r0, r6
   110dc:	bl	10b18 <fprintf@plt>
   110e0:	cmp	r7, #0
   110e4:	ble	11078 <__assert_fail@plt+0x4dc>
   110e8:	mov	r4, #1
   110ec:	ldr	r8, [pc, #24]	; 1110c <__assert_fail@plt+0x570>
   110f0:	b	11044 <__assert_fail@plt+0x4a8>
   110f4:	strdeq	r2, [r1], -r0
   110f8:	andeq	r2, r1, r0, lsr #30
   110fc:			; <UNDEFINED> instruction: 0x000163b4
   11100:	andeq	r2, r1, r4, lsl #30
   11104:	andeq	r2, r1, r0, lsl pc
   11108:	andeq	r2, r1, r8, lsl pc
   1110c:	strdeq	r2, [r1], -r8
   11110:	push	{r4, r5, r6, r7, r8, lr}
   11114:	mov	r6, r0
   11118:	mov	r5, r1
   1111c:	mov	r7, r2
   11120:	mov	r0, r1
   11124:	bl	11848 <__assert_fail@plt+0xcac>
   11128:	add	r4, r5, #4096	; 0x1000
   1112c:	ldr	r2, [pc, #136]	; 111bc <__assert_fail@plt+0x620>
   11130:	ldr	r1, [r4, #3952]	; 0xf70
   11134:	ldr	r0, [r4, #3956]	; 0xf74
   11138:	bl	12dcc <error@@Base+0xcd8>
   1113c:	mov	r2, r7
   11140:	ldr	r1, [pc, #120]	; 111c0 <__assert_fail@plt+0x624>
   11144:	mov	r0, r6
   11148:	bl	10b18 <fprintf@plt>
   1114c:	mov	r1, #0
   11150:	mov	r0, r6
   11154:	bl	10f78 <__assert_fail@plt+0x3dc>
   11158:	mov	r1, r6
   1115c:	mov	r0, #10
   11160:	bl	10b48 <fputc@plt>
   11164:	ldr	r3, [r4, #3956]	; 0xf74
   11168:	cmp	r3, #0
   1116c:	pople	{r4, r5, r6, r7, r8, pc}
   11170:	mov	r4, #0
   11174:	add	r5, r5, #4096	; 0x1000
   11178:	ldr	r7, [pc, #68]	; 111c4 <__assert_fail@plt+0x628>
   1117c:	ldr	r3, [r5, #3952]	; 0xf70
   11180:	ldr	r1, [r3, r4, lsl #2]
   11184:	add	r1, r1, #12
   11188:	mov	r0, r6
   1118c:	bl	10f78 <__assert_fail@plt+0x3dc>
   11190:	ldr	r3, [r5, #3952]	; 0xf70
   11194:	ldr	r3, [r3, r4, lsl #2]
   11198:	ldr	r2, [r3, #8]
   1119c:	mov	r1, r7
   111a0:	mov	r0, r6
   111a4:	bl	10b18 <fprintf@plt>
   111a8:	add	r4, r4, #1
   111ac:	ldr	r3, [r5, #3956]	; 0xf74
   111b0:	cmp	r3, r4
   111b4:	bgt	1117c <__assert_fail@plt+0x5e0>
   111b8:	pop	{r4, r5, r6, r7, r8, pc}
   111bc:	andeq	r1, r1, r8, asr #3
   111c0:	strdeq	r2, [r1], -r0
   111c4:			; <UNDEFINED> instruction: 0x000163b4
   111c8:	push	{r4, lr}
   111cc:	ldr	r1, [r1, #8]
   111d0:	ldr	r0, [r0, #8]
   111d4:	bl	11f44 <__assert_fail@plt+0x13a8>
   111d8:	pop	{r4, pc}
   111dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   111e0:	sub	sp, sp, #8
   111e4:	mov	r5, r0
   111e8:	mov	r4, r1
   111ec:	bl	10ea0 <__assert_fail@plt+0x304>
   111f0:	cmp	r0, #0
   111f4:	moveq	r7, #0
   111f8:	beq	112a8 <__assert_fail@plt+0x70c>
   111fc:	mov	r0, r5
   11200:	bl	10ea0 <__assert_fail@plt+0x304>
   11204:	cmp	r0, #0
   11208:	moveq	r7, #0
   1120c:	beq	112a8 <__assert_fail@plt+0x70c>
   11210:	mov	r7, #0
   11214:	ldr	sl, [pc, #152]	; 112b4 <__assert_fail@plt+0x718>
   11218:	ldr	r8, [pc, #152]	; 112b8 <__assert_fail@plt+0x71c>
   1121c:	add	r6, r8, #29
   11220:	ldr	r9, [pc, #148]	; 112bc <__assert_fail@plt+0x720>
   11224:	b	11298 <__assert_fail@plt+0x6fc>
   11228:	mov	r3, sp
   1122c:	add	r2, sp, #4
   11230:	mov	r1, sl
   11234:	mov	r0, r8
   11238:	bl	10b24 <__isoc99_sscanf@plt>
   1123c:	cmp	r0, #2
   11240:	bne	112a8 <__assert_fail@plt+0x70c>
   11244:	mov	r2, #10
   11248:	mov	r1, #0
   1124c:	mov	r0, r6
   11250:	bl	10a04 <strtol@plt>
   11254:	cmp	r0, #0
   11258:	bne	11274 <__assert_fail@plt+0x6d8>
   1125c:	mov	r1, r9
   11260:	mov	r0, r6
   11264:	bl	109f8 <strcmp@plt>
   11268:	cmp	r0, #0
   1126c:	ldreq	r7, [sp, #4]
   11270:	movne	r0, #11
   11274:	add	r2, r4, r0, lsl #3
   11278:	ldr	r3, [r4, r0, lsl #3]
   1127c:	ldr	r1, [sp, #4]
   11280:	add	r3, r3, r1
   11284:	str	r3, [r4, r0, lsl #3]
   11288:	ldr	r3, [r2, #4]
   1128c:	ldr	r1, [sp]
   11290:	add	r3, r3, r1
   11294:	str	r3, [r2, #4]
   11298:	mov	r0, r5
   1129c:	bl	10ea0 <__assert_fail@plt+0x304>
   112a0:	cmp	r0, #0
   112a4:	bne	11228 <__assert_fail@plt+0x68c>
   112a8:	mov	r0, r7
   112ac:	add	sp, sp, #8
   112b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   112b4:	andeq	r2, r1, r8, lsr #30
   112b8:	ldrdeq	r7, [r2], -r8
   112bc:	andeq	r2, r1, r0, lsl pc
   112c0:	ldr	r3, [r0]
   112c4:	add	r1, r3, r1
   112c8:	str	r1, [r0]
   112cc:	ldr	r3, [r0, #4]
   112d0:	add	r2, r3, r2
   112d4:	str	r2, [r0, #4]
   112d8:	bx	lr
   112dc:	push	{r4, r5, r6, r7, r8, lr}
   112e0:	mov	r7, r0
   112e4:	mov	r8, r1
   112e8:	mov	r6, r2
   112ec:	mov	r5, r3
   112f0:	bl	11758 <__assert_fail@plt+0xbbc>
   112f4:	subs	r4, r0, #0
   112f8:	beq	11318 <__assert_fail@plt+0x77c>
   112fc:	ldr	r2, [r4, #12]
   11300:	add	r2, r2, r6
   11304:	str	r2, [r4, #12]
   11308:	ldr	r3, [r4, #16]
   1130c:	add	r3, r3, r5
   11310:	str	r3, [r4, #16]
   11314:	pop	{r4, r5, r6, r7, r8, pc}
   11318:	mov	r1, #20
   1131c:	mov	r0, #1
   11320:	bl	12130 <error@@Base+0x3c>
   11324:	mov	r4, r0
   11328:	mov	r0, r8
   1132c:	bl	10a58 <strdup@plt>
   11330:	str	r0, [r4, #8]
   11334:	mov	r1, r4
   11338:	mov	r0, r7
   1133c:	bl	117a0 <__assert_fail@plt+0xc04>
   11340:	b	112fc <__assert_fail@plt+0x760>
   11344:	push	{r4, r5, r6, r7, r8, r9, lr}
   11348:	sub	sp, sp, #12
   1134c:	mov	r5, r0
   11350:	mov	r6, r1
   11354:	bl	10ea0 <__assert_fail@plt+0x304>
   11358:	cmp	r0, #0
   1135c:	beq	113d4 <__assert_fail@plt+0x838>
   11360:	mov	r0, r5
   11364:	bl	10ea0 <__assert_fail@plt+0x304>
   11368:	cmp	r0, #0
   1136c:	beq	113d4 <__assert_fail@plt+0x838>
   11370:	ldr	r9, [pc, #100]	; 113dc <__assert_fail@plt+0x840>
   11374:	ldr	r4, [pc, #100]	; 113e0 <__assert_fail@plt+0x844>
   11378:	mov	r8, #0
   1137c:	add	r7, r4, #29
   11380:	b	113c4 <__assert_fail@plt+0x828>
   11384:	mov	r3, sp
   11388:	add	r2, sp, #4
   1138c:	mov	r1, r9
   11390:	mov	r0, r4
   11394:	bl	10b24 <__isoc99_sscanf@plt>
   11398:	cmp	r0, #2
   1139c:	bne	113d4 <__assert_fail@plt+0x838>
   113a0:	mov	r0, r4
   113a4:	bl	10b0c <strlen@plt>
   113a8:	add	r0, r4, r0
   113ac:	strb	r8, [r0, #-1]
   113b0:	ldr	r3, [sp]
   113b4:	ldr	r2, [sp, #4]
   113b8:	mov	r1, r7
   113bc:	mov	r0, r6
   113c0:	bl	112dc <__assert_fail@plt+0x740>
   113c4:	mov	r0, r5
   113c8:	bl	10ea0 <__assert_fail@plt+0x304>
   113cc:	cmp	r0, #0
   113d0:	bne	11384 <__assert_fail@plt+0x7e8>
   113d4:	add	sp, sp, #12
   113d8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   113dc:	andeq	r2, r1, r8, lsr #30
   113e0:	ldrdeq	r7, [r2], -r8
   113e4:	push	{r4, r5, r6, r7, lr}
   113e8:	sub	sp, sp, #12
   113ec:	mov	r5, r0
   113f0:	mov	r6, r1
   113f4:	ldr	r1, [pc, #332]	; 11548 <__assert_fail@plt+0x9ac>
   113f8:	mov	r0, r6
   113fc:	bl	121c8 <error@@Base+0xd4>
   11400:	mov	r4, r0
   11404:	bl	10ea0 <__assert_fail@plt+0x304>
   11408:	cmp	r0, #0
   1140c:	beq	11534 <__assert_fail@plt+0x998>
   11410:	mov	r2, #45	; 0x2d
   11414:	ldr	r1, [pc, #304]	; 1154c <__assert_fail@plt+0x9b0>
   11418:	ldr	r0, [pc, #304]	; 11550 <__assert_fail@plt+0x9b4>
   1141c:	bl	10b78 <strncmp@plt>
   11420:	cmp	r0, #0
   11424:	bne	11534 <__assert_fail@plt+0x998>
   11428:	mov	r0, r4
   1142c:	bl	10ea0 <__assert_fail@plt+0x304>
   11430:	cmp	r0, #0
   11434:	beq	11534 <__assert_fail@plt+0x998>
   11438:	ldr	r1, [pc, #276]	; 11554 <__assert_fail@plt+0x9b8>
   1143c:	ldr	r0, [pc, #268]	; 11550 <__assert_fail@plt+0x9b4>
   11440:	bl	109f8 <strcmp@plt>
   11444:	cmp	r0, #0
   11448:	bne	11534 <__assert_fail@plt+0x998>
   1144c:	add	r1, sp, #4
   11450:	mov	r0, r4
   11454:	bl	10ec4 <__assert_fail@plt+0x328>
   11458:	cmp	r0, #0
   1145c:	beq	11534 <__assert_fail@plt+0x998>
   11460:	mov	r1, sp
   11464:	mov	r0, r4
   11468:	bl	10ec4 <__assert_fail@plt+0x328>
   1146c:	cmp	r0, #0
   11470:	beq	11534 <__assert_fail@plt+0x998>
   11474:	mov	r0, r4
   11478:	bl	10ea0 <__assert_fail@plt+0x304>
   1147c:	cmp	r0, #0
   11480:	beq	11534 <__assert_fail@plt+0x998>
   11484:	mov	r0, r4
   11488:	bl	10ea0 <__assert_fail@plt+0x304>
   1148c:	cmp	r0, #0
   11490:	beq	11534 <__assert_fail@plt+0x998>
   11494:	ldr	r3, [r5]
   11498:	ldr	r2, [sp, #4]
   1149c:	add	r3, r3, r2
   114a0:	str	r3, [r5]
   114a4:	ldr	r3, [r5, #4]
   114a8:	ldr	r2, [sp]
   114ac:	add	r3, r3, r2
   114b0:	str	r3, [r5, #4]
   114b4:	add	r1, r5, #8
   114b8:	mov	r0, r4
   114bc:	bl	111dc <__assert_fail@plt+0x640>
   114c0:	mov	r7, r0
   114c4:	add	r1, r5, #416	; 0x1a0
   114c8:	mov	r0, r4
   114cc:	bl	111dc <__assert_fail@plt+0x640>
   114d0:	mov	r6, r0
   114d4:	add	r1, r5, #824	; 0x338
   114d8:	mov	r0, r4
   114dc:	bl	111dc <__assert_fail@plt+0x640>
   114e0:	ldr	r3, [sp, #4]
   114e4:	cmp	r3, #0
   114e8:	ble	11524 <__assert_fail@plt+0x988>
   114ec:	add	r1, r5, #920	; 0x398
   114f0:	mov	r0, r4
   114f4:	bl	111dc <__assert_fail@plt+0x640>
   114f8:	cmp	r7, #0
   114fc:	ble	1150c <__assert_fail@plt+0x970>
   11500:	add	r1, r5, #992	; 0x3e0
   11504:	mov	r0, r4
   11508:	bl	11344 <__assert_fail@plt+0x7a8>
   1150c:	cmp	r6, #0
   11510:	ble	11524 <__assert_fail@plt+0x988>
   11514:	add	r1, r5, #9024	; 0x2340
   11518:	add	r1, r1, #24
   1151c:	mov	r0, r4
   11520:	bl	11344 <__assert_fail@plt+0x7a8>
   11524:	mov	r0, r4
   11528:	bl	11fc0 <__assert_fail@plt+0x1424>
   1152c:	add	sp, sp, #12
   11530:	pop	{r4, r5, r6, r7, pc}
   11534:	ldr	r1, [pc, #28]	; 11558 <__assert_fail@plt+0x9bc>
   11538:	cmp	r6, #0
   1153c:	movne	r1, r6
   11540:	ldr	r0, [pc, #20]	; 1155c <__assert_fail@plt+0x9c0>
   11544:	bl	12180 <error@@Base+0x8c>
   11548:	andeq	r2, r1, r8, lsr pc
   1154c:	andeq	r2, r1, ip, lsr pc
   11550:	ldrdeq	r7, [r2], -r8
   11554:	andeq	r6, r1, r8, lsr #9
   11558:	andeq	r2, r1, r0, lsr pc
   1155c:	andeq	r2, r1, ip, ror #30
   11560:	push	{r4, r5, r6, r7, lr}
   11564:	sub	sp, sp, #12
   11568:	mov	r4, r0
   1156c:	mov	r0, r1
   11570:	ldr	r1, [pc, #292]	; 1169c <__assert_fail@plt+0xb00>
   11574:	bl	121c8 <error@@Base+0xd4>
   11578:	mov	r5, r0
   1157c:	ldr	r3, [pc, #284]	; 116a0 <__assert_fail@plt+0xb04>
   11580:	ldr	r2, [pc, #284]	; 116a4 <__assert_fail@plt+0xb08>
   11584:	ldr	r1, [pc, #284]	; 116a8 <__assert_fail@plt+0xb0c>
   11588:	bl	10b18 <fprintf@plt>
   1158c:	ldr	r2, [r4]
   11590:	ldr	r1, [pc, #276]	; 116ac <__assert_fail@plt+0xb10>
   11594:	mov	r0, r5
   11598:	bl	10b18 <fprintf@plt>
   1159c:	ldr	r2, [r4, #4]
   115a0:	ldr	r1, [pc, #264]	; 116b0 <__assert_fail@plt+0xb14>
   115a4:	mov	r0, r5
   115a8:	bl	10b18 <fprintf@plt>
   115ac:	mov	r1, r4
   115b0:	mov	r0, r5
   115b4:	bl	10f08 <__assert_fail@plt+0x36c>
   115b8:	mov	r3, r5
   115bc:	mov	r2, #12
   115c0:	mov	r1, #1
   115c4:	ldr	r0, [pc, #232]	; 116b4 <__assert_fail@plt+0xb18>
   115c8:	bl	10a94 <fwrite@plt>
   115cc:	mov	r6, #1
   115d0:	str	r6, [sp, #4]
   115d4:	mov	r7, #0
   115d8:	str	r7, [sp]
   115dc:	ldr	r3, [pc, #212]	; 116b8 <__assert_fail@plt+0xb1c>
   115e0:	mov	r2, #50	; 0x32
   115e4:	add	r1, r4, #8
   115e8:	mov	r0, r5
   115ec:	bl	10fe0 <__assert_fail@plt+0x444>
   115f0:	str	r6, [sp, #4]
   115f4:	str	r7, [sp]
   115f8:	ldr	r3, [pc, #188]	; 116bc <__assert_fail@plt+0xb20>
   115fc:	mov	r2, #50	; 0x32
   11600:	add	r1, r4, #416	; 0x1a0
   11604:	mov	r0, r5
   11608:	bl	10fe0 <__assert_fail@plt+0x444>
   1160c:	str	r6, [sp, #4]
   11610:	str	r6, [sp]
   11614:	ldr	r3, [pc, #164]	; 116c0 <__assert_fail@plt+0xb24>
   11618:	mov	r2, #10
   1161c:	add	r1, r4, #824	; 0x338
   11620:	mov	r0, r5
   11624:	bl	10fe0 <__assert_fail@plt+0x444>
   11628:	ldr	r3, [r4]
   1162c:	cmp	r3, r7
   11630:	ble	1168c <__assert_fail@plt+0xaf0>
   11634:	str	r7, [sp, #4]
   11638:	str	r7, [sp]
   1163c:	ldr	r3, [pc, #128]	; 116c4 <__assert_fail@plt+0xb28>
   11640:	mov	r2, #8
   11644:	add	r1, r4, #920	; 0x398
   11648:	mov	r0, r5
   1164c:	bl	10fe0 <__assert_fail@plt+0x444>
   11650:	ldr	r3, [r4, #8]
   11654:	cmp	r3, r7
   11658:	ble	1166c <__assert_fail@plt+0xad0>
   1165c:	ldr	r2, [pc, #84]	; 116b8 <__assert_fail@plt+0xb1c>
   11660:	add	r1, r4, #992	; 0x3e0
   11664:	mov	r0, r5
   11668:	bl	11110 <__assert_fail@plt+0x574>
   1166c:	ldr	r3, [r4, #416]	; 0x1a0
   11670:	cmp	r3, #0
   11674:	ble	1168c <__assert_fail@plt+0xaf0>
   11678:	add	r1, r4, #9024	; 0x2340
   1167c:	ldr	r2, [pc, #56]	; 116bc <__assert_fail@plt+0xb20>
   11680:	add	r1, r1, #24
   11684:	mov	r0, r5
   11688:	bl	11110 <__assert_fail@plt+0x574>
   1168c:	mov	r0, r5
   11690:	bl	11fc0 <__assert_fail@plt+0x1424>
   11694:	add	sp, sp, #12
   11698:	pop	{r4, r5, r6, r7, pc}
   1169c:	andeq	r2, r1, r0, lsl #31
   116a0:	andeq	r6, r1, r8, lsr #9
   116a4:	andeq	r2, r1, ip, lsr pc
   116a8:	andeq	r2, r1, r4, lsl #31
   116ac:	andeq	r2, r1, ip, lsl #31
   116b0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   116b4:			; <UNDEFINED> instruction: 0x00012fb4
   116b8:	andeq	r2, r1, r4, asr #31
   116bc:	ldrdeq	r2, [r1], -r0
   116c0:	andeq	r2, r1, r0, ror #31
   116c4:	strdeq	r2, [r1], -r8
   116c8:	ldrb	r3, [r0]
   116cc:	cmp	r3, #0
   116d0:	beq	11710 <__assert_fail@plt+0xb74>
   116d4:	mov	r2, #0
   116d8:	add	r2, r2, r3
   116dc:	ldrb	r3, [r0, #1]!
   116e0:	cmp	r3, #0
   116e4:	bne	116d8 <__assert_fail@plt+0xb3c>
   116e8:	ldr	r0, [pc, #40]	; 11718 <__assert_fail@plt+0xb7c>
   116ec:	smull	r3, r0, r0, r2
   116f0:	add	r3, r0, r2
   116f4:	asr	r0, r2, #31
   116f8:	rsb	r0, r0, r3, asr #8
   116fc:	rsb	r3, r0, r0, lsl #6
   11700:	rsb	r0, r0, r3, lsl #3
   11704:	sub	r0, r2, r0
   11708:	sxth	r0, r0
   1170c:	bx	lr
   11710:	mov	r2, #0
   11714:	b	116e8 <__assert_fail@plt+0xb4c>
   11718:	subhi	r4, sl, #1552	; 0x610
   1171c:	push	{r4, r5, r6, lr}
   11720:	mov	r6, r0
   11724:	mov	r4, r0
   11728:	add	r5, r0, #8000	; 0x1f40
   1172c:	add	r5, r5, #48	; 0x30
   11730:	mov	r0, r4
   11734:	bl	12b10 <error@@Base+0xa1c>
   11738:	add	r4, r4, #16
   1173c:	cmp	r4, r5
   11740:	bne	11730 <__assert_fail@plt+0xb94>
   11744:	add	r6, r6, #4096	; 0x1000
   11748:	mov	r3, #0
   1174c:	str	r3, [r6, #3952]	; 0xf70
   11750:	str	r3, [r6, #3956]	; 0xf74
   11754:	pop	{r4, r5, r6, pc}
   11758:	push	{r4, r5, r6, lr}
   1175c:	mov	r4, r0
   11760:	mov	r5, r1
   11764:	mov	r0, r1
   11768:	bl	116c8 <__assert_fail@plt+0xb2c>
   1176c:	ldr	r4, [r4, r0, lsl #4]
   11770:	cmp	r4, #0
   11774:	beq	11798 <__assert_fail@plt+0xbfc>
   11778:	ldr	r1, [r4, #8]
   1177c:	mov	r0, r5
   11780:	bl	109f8 <strcmp@plt>
   11784:	cmp	r0, #0
   11788:	beq	11798 <__assert_fail@plt+0xbfc>
   1178c:	ldr	r4, [r4, #4]
   11790:	cmp	r4, #0
   11794:	bne	11778 <__assert_fail@plt+0xbdc>
   11798:	mov	r0, r4
   1179c:	pop	{r4, r5, r6, pc}
   117a0:	push	{r4, r5, r6, lr}
   117a4:	mov	r4, r0
   117a8:	mov	r5, r1
   117ac:	ldr	r0, [r1, #8]
   117b0:	bl	116c8 <__assert_fail@plt+0xb2c>
   117b4:	mov	r1, r5
   117b8:	add	r0, r4, r0, lsl #4
   117bc:	bl	12b28 <error@@Base+0xa34>
   117c0:	add	r3, r4, #4096	; 0x1000
   117c4:	ldr	r0, [r3, #3952]	; 0xf70
   117c8:	cmp	r0, #0
   117cc:	beq	117e0 <__assert_fail@plt+0xc44>
   117d0:	bl	10a28 <free@plt>
   117d4:	add	r3, r4, #4096	; 0x1000
   117d8:	mov	r2, #0
   117dc:	str	r2, [r3, #3952]	; 0xf70
   117e0:	add	r4, r4, #4096	; 0x1000
   117e4:	ldr	r3, [r4, #3956]	; 0xf74
   117e8:	add	r3, r3, #1
   117ec:	str	r3, [r4, #3956]	; 0xf74
   117f0:	pop	{r4, r5, r6, pc}
   117f4:	push	{r4, r5, r6, lr}
   117f8:	mov	r4, r0
   117fc:	mov	r5, r1
   11800:	ldr	r0, [r1, #8]
   11804:	bl	116c8 <__assert_fail@plt+0xb2c>
   11808:	mov	r1, r5
   1180c:	add	r0, r4, r0, lsl #4
   11810:	bl	12b84 <error@@Base+0xa90>
   11814:	add	r3, r4, #4096	; 0x1000
   11818:	ldr	r0, [r3, #3952]	; 0xf70
   1181c:	cmp	r0, #0
   11820:	beq	11834 <__assert_fail@plt+0xc98>
   11824:	bl	10a28 <free@plt>
   11828:	add	r3, r4, #4096	; 0x1000
   1182c:	mov	r2, #0
   11830:	str	r2, [r3, #3952]	; 0xf70
   11834:	add	r4, r4, #4096	; 0x1000
   11838:	ldr	r3, [r4, #3956]	; 0xf74
   1183c:	sub	r3, r3, #1
   11840:	str	r3, [r4, #3956]	; 0xf74
   11844:	pop	{r4, r5, r6, pc}
   11848:	add	r3, r0, #4096	; 0x1000
   1184c:	ldr	r3, [r3, #3952]	; 0xf70
   11850:	cmp	r3, #0
   11854:	bxne	lr
   11858:	add	r3, r0, #4096	; 0x1000
   1185c:	ldr	r3, [r3, #3956]	; 0xf74
   11860:	cmp	r3, #0
   11864:	bxeq	lr
   11868:	push	{r4, r5, r6, lr}
   1186c:	mov	r4, r0
   11870:	mov	r1, #4
   11874:	mov	r0, r3
   11878:	bl	12130 <error@@Base+0x3c>
   1187c:	add	r3, r4, #4096	; 0x1000
   11880:	str	r0, [r3, #3952]	; 0xf70
   11884:	mov	r1, #0
   11888:	mov	lr, r1
   1188c:	mov	ip, r3
   11890:	ldr	r5, [pc, #64]	; 118d8 <__assert_fail@plt+0xd3c>
   11894:	b	118a4 <__assert_fail@plt+0xd08>
   11898:	add	lr, lr, #1
   1189c:	cmp	lr, r5
   118a0:	beq	118d4 <__assert_fail@plt+0xd38>
   118a4:	ldr	r3, [r4, lr, lsl #4]
   118a8:	cmp	r3, #0
   118ac:	beq	11898 <__assert_fail@plt+0xcfc>
   118b0:	lsl	r2, r1, #2
   118b4:	add	r1, r1, #1
   118b8:	ldr	r0, [ip, #3952]	; 0xf70
   118bc:	str	r3, [r0, r2]
   118c0:	ldr	r3, [r3, #4]
   118c4:	add	r2, r2, #4
   118c8:	cmp	r3, #0
   118cc:	bne	118b4 <__assert_fail@plt+0xd18>
   118d0:	b	11898 <__assert_fail@plt+0xcfc>
   118d4:	pop	{r4, r5, r6, pc}
   118d8:	strdeq	r0, [r0], -r7
   118dc:	push	{r4, r5, r6, r7, r8, lr}
   118e0:	mov	r7, r0
   118e4:	mov	r6, r1
   118e8:	mov	r4, r0
   118ec:	add	r5, r0, #8000	; 0x1f40
   118f0:	add	r5, r5, #48	; 0x30
   118f4:	mov	r1, r6
   118f8:	mov	r0, r4
   118fc:	bl	12c4c <error@@Base+0xb58>
   11900:	add	r4, r4, #16
   11904:	cmp	r4, r5
   11908:	bne	118f4 <__assert_fail@plt+0xd58>
   1190c:	add	r3, r7, #4096	; 0x1000
   11910:	ldr	r0, [r3, #3952]	; 0xf70
   11914:	cmp	r0, #0
   11918:	beq	1192c <__assert_fail@plt+0xd90>
   1191c:	bl	10a28 <free@plt>
   11920:	add	r3, r7, #4096	; 0x1000
   11924:	mov	r2, #0
   11928:	str	r2, [r3, #3952]	; 0xf70
   1192c:	add	r7, r7, #4096	; 0x1000
   11930:	mov	r3, #0
   11934:	str	r3, [r7, #3956]	; 0xf74
   11938:	pop	{r4, r5, r6, r7, r8, pc}
   1193c:	cmp	r2, r1
   11940:	bcc	119a8 <__assert_fail@plt+0xe0c>
   11944:	push	{r4, lr}
   11948:	sub	r3, r2, r1
   1194c:	add	r3, r1, r3, lsr #1
   11950:	add	lr, r3, r3, lsl #1
   11954:	ldr	ip, [pc, #84]	; 119b0 <__assert_fail@plt+0xe14>
   11958:	ldr	ip, [ip, lr, lsl #2]
   1195c:	cmp	ip, r0
   11960:	bhi	11990 <__assert_fail@plt+0xdf4>
   11964:	add	r1, r3, r3, lsl #1
   11968:	ldr	ip, [pc, #64]	; 119b0 <__assert_fail@plt+0xe14>
   1196c:	add	r1, ip, r1, lsl #2
   11970:	ldr	r1, [r1, #4]
   11974:	cmp	r0, r1
   11978:	bhi	1199c <__assert_fail@plt+0xe00>
   1197c:	add	r3, r3, r3, lsl #1
   11980:	ldr	r1, [pc, #40]	; 119b0 <__assert_fail@plt+0xe14>
   11984:	add	r3, r1, r3, lsl #2
   11988:	ldr	r0, [r3, #8]
   1198c:	pop	{r4, pc}
   11990:	sub	r2, r3, #1
   11994:	bl	1193c <__assert_fail@plt+0xda0>
   11998:	pop	{r4, pc}
   1199c:	add	r1, r3, #1
   119a0:	bl	1193c <__assert_fail@plt+0xda0>
   119a4:	pop	{r4, pc}
   119a8:	mov	r0, #0
   119ac:	bx	lr
   119b0:	andeq	r3, r1, r0
   119b4:	cmp	r0, #0
   119b8:	beq	119d4 <__assert_fail@plt+0xe38>
   119bc:	push	{r4, lr}
   119c0:	ldr	r2, [pc, #20]	; 119dc <__assert_fail@plt+0xe40>
   119c4:	mov	r1, #0
   119c8:	ldr	r0, [r0, #12]
   119cc:	bl	1193c <__assert_fail@plt+0xda0>
   119d0:	pop	{r4, pc}
   119d4:	mov	r0, #18
   119d8:	bx	lr
   119dc:	andeq	r0, r0, r4, asr #8
   119e0:	push	{r4, lr}
   119e4:	subs	r4, r0, #0
   119e8:	beq	11a0c <__assert_fail@plt+0xe70>
   119ec:	ldr	r4, [r4, #4]
   119f0:	cmp	r4, #0
   119f4:	beq	11a0c <__assert_fail@plt+0xe70>
   119f8:	mov	r0, r4
   119fc:	bl	119b4 <__assert_fail@plt+0xe18>
   11a00:	bic	r0, r0, #2
   11a04:	cmp	r0, #4
   11a08:	beq	119ec <__assert_fail@plt+0xe50>
   11a0c:	mov	r0, r4
   11a10:	pop	{r4, pc}
   11a14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a18:	sub	sp, sp, #28
   11a1c:	str	r0, [sp, #4]
   11a20:	ldr	r7, [r1]
   11a24:	mov	sl, #17
   11a28:	mov	fp, #0
   11a2c:	b	11d30 <__assert_fail@plt+0x1194>
   11a30:	ldr	r8, [r4, #4]
   11a34:	cmp	r7, r8
   11a38:	movne	r5, r7
   11a3c:	movne	r6, #0
   11a40:	beq	11d90 <__assert_fail@plt+0x11f4>
   11a44:	add	r1, sp, #8
   11a48:	ldr	r0, [r5, #12]
   11a4c:	bl	10a4c <utf8proc_encode_char@plt>
   11a50:	cmp	r0, #0
   11a54:	beq	11a84 <__assert_fail@plt+0xee8>
   11a58:	add	r6, r6, r0
   11a5c:	ldr	r5, [r5, #4]
   11a60:	cmp	r8, r5
   11a64:	beq	11d48 <__assert_fail@plt+0x11ac>
   11a68:	cmp	r5, #0
   11a6c:	bne	11a44 <__assert_fail@plt+0xea8>
   11a70:	ldr	r3, [pc, #992]	; 11e58 <__assert_fail@plt+0x12bc>
   11a74:	mov	r2, #249	; 0xf9
   11a78:	ldr	r1, [pc, #988]	; 11e5c <__assert_fail@plt+0x12c0>
   11a7c:	ldr	r0, [pc, #988]	; 11e60 <__assert_fail@plt+0x12c4>
   11a80:	bl	10b9c <__assert_fail@plt>
   11a84:	ldr	r3, [pc, #972]	; 11e58 <__assert_fail@plt+0x12bc>
   11a88:	mov	r2, #253	; 0xfd
   11a8c:	ldr	r1, [pc, #968]	; 11e5c <__assert_fail@plt+0x12c0>
   11a90:	ldr	r0, [pc, #972]	; 11e64 <__assert_fail@plt+0x12c8>
   11a94:	bl	10b9c <__assert_fail@plt>
   11a98:	sub	r1, r6, #8
   11a9c:	cmp	r1, #1
   11aa0:	bls	11b18 <__assert_fail@plt+0xf7c>
   11aa4:	sub	r1, r6, #12
   11aa8:	cmp	r6, #10
   11aac:	cmpne	r1, #1
   11ab0:	bhi	11ba0 <__assert_fail@plt+0x1004>
   11ab4:	sub	r1, r0, #8
   11ab8:	cmp	r1, #1
   11abc:	bhi	11ba0 <__assert_fail@plt+0x1004>
   11ac0:	b	11b18 <__assert_fail@plt+0xf7c>
   11ac4:	cmp	r5, #13
   11ac8:	beq	11dd8 <__assert_fail@plt+0x123c>
   11acc:	sub	r1, r5, #10
   11ad0:	bics	r1, r1, #2
   11ad4:	bne	11bac <__assert_fail@plt+0x1010>
   11ad8:	sub	r1, r6, #8
   11adc:	cmp	r1, #1
   11ae0:	bhi	11bac <__assert_fail@plt+0x1010>
   11ae4:	b	11b18 <__assert_fail@plt+0xf7c>
   11ae8:	cmp	r5, #15
   11aec:	beq	11c40 <__assert_fail@plt+0x10a4>
   11af0:	cmp	r8, #15
   11af4:	beq	11c8c <__assert_fail@plt+0x10f0>
   11af8:	cmp	r5, #7
   11afc:	movne	r2, #0
   11b00:	moveq	r2, #1
   11b04:	cmp	r6, #7
   11b08:	movne	r0, #0
   11b0c:	moveq	r0, #1
   11b10:	tst	r2, r0
   11b14:	beq	11e14 <__assert_fail@plt+0x1278>
   11b18:	ldr	r3, [r4, #4]
   11b1c:	cmp	r3, #0
   11b20:	beq	11e48 <__assert_fail@plt+0x12ac>
   11b24:	mov	r8, r5
   11b28:	mov	r0, r4
   11b2c:	bl	119e0 <__assert_fail@plt+0xe44>
   11b30:	mov	r4, r0
   11b34:	bl	119b4 <__assert_fail@plt+0xe18>
   11b38:	mov	r5, r0
   11b3c:	mov	r0, r4
   11b40:	bl	119e0 <__assert_fail@plt+0xe44>
   11b44:	mov	r9, r0
   11b48:	bl	119b4 <__assert_fail@plt+0xe18>
   11b4c:	mov	r6, r0
   11b50:	mov	r0, r9
   11b54:	bl	119e0 <__assert_fail@plt+0xe44>
   11b58:	bl	119b4 <__assert_fail@plt+0xe18>
   11b5c:	sub	r2, r5, #1
   11b60:	cmp	r6, #2
   11b64:	movne	r3, #0
   11b68:	moveq	r3, #1
   11b6c:	cmp	r5, #1
   11b70:	cmpeq	r6, #2
   11b74:	beq	11b18 <__assert_fail@plt+0xf7c>
   11b78:	cmp	r2, #2
   11b7c:	bls	11e48 <__assert_fail@plt+0x12ac>
   11b80:	bic	r2, r6, #2
   11b84:	cmp	r2, #1
   11b88:	orreq	r3, r3, #1
   11b8c:	cmp	r3, #0
   11b90:	bne	11e48 <__assert_fail@plt+0x12ac>
   11b94:	sub	r3, r5, #8
   11b98:	cmp	r3, #1
   11b9c:	bls	11a98 <__assert_fail@plt+0xefc>
   11ba0:	sub	r1, r8, #8
   11ba4:	cmp	r1, #1
   11ba8:	bls	11ac4 <__assert_fail@plt+0xf28>
   11bac:	cmp	r5, #8
   11bb0:	movne	r1, #0
   11bb4:	moveq	r1, #1
   11bb8:	cmp	r6, #10
   11bbc:	movne	ip, #0
   11bc0:	moveq	ip, #1
   11bc4:	tst	r1, ip
   11bc8:	bne	11b18 <__assert_fail@plt+0xf7c>
   11bcc:	cmp	r0, #8
   11bd0:	cmpeq	r6, #11
   11bd4:	moveq	lr, #1
   11bd8:	movne	lr, #0
   11bdc:	tst	r1, lr
   11be0:	bne	11b18 <__assert_fail@plt+0xf7c>
   11be4:	cmp	r8, #8
   11be8:	cmpeq	r5, #11
   11bec:	moveq	r1, #1
   11bf0:	movne	r1, #0
   11bf4:	cmp	r6, #8
   11bf8:	movne	r1, #0
   11bfc:	andeq	r1, r1, #1
   11c00:	cmp	r1, #0
   11c04:	bne	11b18 <__assert_fail@plt+0xf7c>
   11c08:	cmp	r5, #15
   11c0c:	movne	lr, #0
   11c10:	moveq	lr, #1
   11c14:	cmp	r6, #15
   11c18:	movne	r1, #0
   11c1c:	moveq	r1, #1
   11c20:	tst	lr, r1
   11c24:	bne	11b18 <__assert_fail@plt+0xf7c>
   11c28:	cmp	r3, #1
   11c2c:	movhi	r3, #0
   11c30:	movls	r3, #1
   11c34:	tst	r1, r3
   11c38:	beq	11ae8 <__assert_fail@plt+0xf4c>
   11c3c:	b	11b18 <__assert_fail@plt+0xf7c>
   11c40:	sub	r9, r6, #8
   11c44:	cmp	r9, #1
   11c48:	bls	11b18 <__assert_fail@plt+0xf7c>
   11c4c:	cmp	r8, #15
   11c50:	beq	11c8c <__assert_fail@plt+0x10f0>
   11c54:	cmp	r2, #12
   11c58:	movne	r2, ip
   11c5c:	orreq	r2, ip, #1
   11c60:	cmp	r2, #0
   11c64:	beq	11c70 <__assert_fail@plt+0x10d4>
   11c68:	cmp	r0, #15
   11c6c:	beq	11b18 <__assert_fail@plt+0xf7c>
   11c70:	cmp	r6, #7
   11c74:	movne	r0, #0
   11c78:	moveq	r0, #1
   11c7c:	cmp	r5, #7
   11c80:	cmpeq	r6, #7
   11c84:	beq	11b18 <__assert_fail@plt+0xf7c>
   11c88:	b	11e2c <__assert_fail@plt+0x1290>
   11c8c:	cmp	r5, #14
   11c90:	beq	11df4 <__assert_fail@plt+0x1258>
   11c94:	sub	r8, r5, #10
   11c98:	bics	r8, r8, #2
   11c9c:	bne	11ca8 <__assert_fail@plt+0x110c>
   11ca0:	cmp	r6, #15
   11ca4:	beq	11b18 <__assert_fail@plt+0xf7c>
   11ca8:	cmp	r5, #15
   11cac:	bne	11af8 <__assert_fail@plt+0xf5c>
   11cb0:	b	11c54 <__assert_fail@plt+0x10b8>
   11cb4:	sub	r3, r6, #8
   11cb8:	cmp	r3, #1
   11cbc:	orrls	r1, r1, #1
   11cc0:	cmp	r1, #0
   11cc4:	bne	11b18 <__assert_fail@plt+0xf7c>
   11cc8:	cmp	r6, #16
   11ccc:	orreq	r0, r0, #1
   11cd0:	cmp	r0, #0
   11cd4:	bne	11b18 <__assert_fail@plt+0xf7c>
   11cd8:	b	11e48 <__assert_fail@plt+0x12ac>
   11cdc:	mov	r4, r5
   11ce0:	ldr	r5, [r4, #4]
   11ce4:	cmp	r5, #0
   11ce8:	beq	11d00 <__assert_fail@plt+0x1164>
   11cec:	mov	r0, r5
   11cf0:	bl	119b4 <__assert_fail@plt+0xe18>
   11cf4:	bic	r0, r0, #2
   11cf8:	cmp	r0, #4
   11cfc:	beq	11cdc <__assert_fail@plt+0x1140>
   11d00:	cmp	r4, #0
   11d04:	beq	11e50 <__assert_fail@plt+0x12b4>
   11d08:	ldr	r0, [r7, #12]
   11d0c:	bl	10a34 <utf8proc_get_property@plt>
   11d10:	ldrsh	r3, [r0]
   11d14:	cmp	r3, #1
   11d18:	blt	11d2c <__assert_fail@plt+0x1190>
   11d1c:	cmp	r3, #12
   11d20:	ble	11a30 <__assert_fail@plt+0xe94>
   11d24:	cmp	r3, #29
   11d28:	beq	11a30 <__assert_fail@plt+0xe94>
   11d2c:	ldr	r7, [r4, #4]
   11d30:	str	r7, [sp, #12]
   11d34:	cmp	r7, #0
   11d38:	beq	11e50 <__assert_fail@plt+0x12b4>
   11d3c:	mov	r8, sl
   11d40:	add	r4, sp, #8
   11d44:	b	11b28 <__assert_fail@plt+0xf8c>
   11d48:	add	r0, r6, #1
   11d4c:	bl	10ab8 <malloc@plt>
   11d50:	mov	r8, r0
   11d54:	mov	r6, #0
   11d58:	add	r1, r8, r6
   11d5c:	ldr	r0, [r7, #12]
   11d60:	bl	10a4c <utf8proc_encode_char@plt>
   11d64:	add	r6, r6, r0
   11d68:	ldr	r7, [r7, #4]
   11d6c:	cmp	r7, r5
   11d70:	beq	11da0 <__assert_fail@plt+0x1204>
   11d74:	cmp	r7, #0
   11d78:	bne	11d58 <__assert_fail@plt+0x11bc>
   11d7c:	ldr	r3, [pc, #228]	; 11e68 <__assert_fail@plt+0x12cc>
   11d80:	ldr	r2, [pc, #228]	; 11e6c <__assert_fail@plt+0x12d0>
   11d84:	ldr	r1, [pc, #208]	; 11e5c <__assert_fail@plt+0x12c0>
   11d88:	ldr	r0, [pc, #208]	; 11e60 <__assert_fail@plt+0x12c4>
   11d8c:	bl	10b9c <__assert_fail@plt>
   11d90:	mov	r0, #1
   11d94:	bl	10ab8 <malloc@plt>
   11d98:	mov	r8, r0
   11d9c:	mov	r6, #0
   11da0:	strb	fp, [r8, r6]
   11da4:	mov	r1, #12
   11da8:	mov	r0, #1
   11dac:	bl	12130 <error@@Base+0x3c>
   11db0:	mov	r5, r0
   11db4:	mov	r0, r8
   11db8:	bl	10b3c <utf8proc_NFC@plt>
   11dbc:	str	r0, [r5, #8]
   11dc0:	mov	r1, r5
   11dc4:	ldr	r0, [sp, #4]
   11dc8:	bl	12b40 <error@@Base+0xa4c>
   11dcc:	mov	r0, r8
   11dd0:	bl	10a28 <free@plt>
   11dd4:	b	11d2c <__assert_fail@plt+0x1190>
   11dd8:	sub	r1, r6, #8
   11ddc:	cmp	r1, #1
   11de0:	bls	11b18 <__assert_fail@plt+0xf7c>
   11de4:	cmp	r6, #10
   11de8:	movne	ip, #0
   11dec:	moveq	ip, #1
   11df0:	b	11be4 <__assert_fail@plt+0x1048>
   11df4:	cmp	r6, #15
   11df8:	beq	11b18 <__assert_fail@plt+0xf7c>
   11dfc:	cmp	r5, #7
   11e00:	movne	r2, #0
   11e04:	moveq	r2, #1
   11e08:	cmp	r6, #7
   11e0c:	movne	r0, #0
   11e10:	moveq	r0, #1
   11e14:	orrs	r3, lr, r3
   11e18:	bne	11e2c <__assert_fail@plt+0x1290>
   11e1c:	cmp	r5, #16
   11e20:	orreq	r2, r2, #1
   11e24:	cmp	r2, #0
   11e28:	beq	11e34 <__assert_fail@plt+0x1298>
   11e2c:	cmp	r6, #16
   11e30:	beq	11b18 <__assert_fail@plt+0xf7c>
   11e34:	cmp	r5, #16
   11e38:	beq	11cb4 <__assert_fail@plt+0x1118>
   11e3c:	cmp	r5, #5
   11e40:	cmpeq	r6, #5
   11e44:	beq	11b18 <__assert_fail@plt+0xf7c>
   11e48:	cmp	r4, #0
   11e4c:	bne	11ce0 <__assert_fail@plt+0x1144>
   11e50:	add	sp, sp, #28
   11e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e58:	andeq	r6, r1, ip, lsr r3
   11e5c:	andeq	r6, r1, r4, ror #6
   11e60:	andeq	r6, r1, ip, ror #6
   11e64:	andeq	r6, r1, ip, ror r3
   11e68:	andeq	r6, r1, r0, asr r3
   11e6c:	andeq	r0, r0, sp, lsl #2
   11e70:	push	{r4, lr}
   11e74:	mov	r4, r0
   11e78:	ldr	r0, [r0, #8]
   11e7c:	bl	10a28 <free@plt>
   11e80:	mov	r0, r4
   11e84:	bl	10a28 <free@plt>
   11e88:	pop	{r4, pc}
   11e8c:	push	{r4, r5, lr}
   11e90:	sub	sp, sp, #116	; 0x74
   11e94:	mov	r5, r0
   11e98:	ldr	r3, [pc, #44]	; 11ecc <__assert_fail@plt+0x1330>
   11e9c:	ldr	r4, [r3]
   11ea0:	bl	10ae8 <getpid@plt>
   11ea4:	str	r5, [sp]
   11ea8:	mov	r3, r0
   11eac:	mov	r2, r4
   11eb0:	ldr	r1, [pc, #24]	; 11ed0 <__assert_fail@plt+0x1334>
   11eb4:	add	r0, sp, #12
   11eb8:	bl	10b54 <sprintf@plt>
   11ebc:	add	r0, sp, #12
   11ec0:	bl	10a58 <strdup@plt>
   11ec4:	add	sp, sp, #116	; 0x74
   11ec8:	pop	{r4, r5, pc}
   11ecc:	andeq	fp, r2, r4, asr #8
   11ed0:	muleq	r1, r0, r3
   11ed4:	push	{r7, lr}
   11ed8:	mov	r7, r0
   11edc:	ldr	r3, [pc, #88]	; 11f3c <__assert_fail@plt+0x13a0>
   11ee0:	ldr	r3, [r3]
   11ee4:	cmp	r3, #0
   11ee8:	beq	11ef0 <__assert_fail@plt+0x1354>
   11eec:	blx	r3
   11ef0:	ldr	r3, [pc, #72]	; 11f40 <__assert_fail@plt+0x13a4>
   11ef4:	ldrsh	r3, [r3]
   11ef8:	cmp	r3, #0
   11efc:	ble	11f34 <__assert_fail@plt+0x1398>
   11f00:	mov	r4, #1
   11f04:	ldr	r6, [pc, #52]	; 11f40 <__assert_fail@plt+0x13a4>
   11f08:	mov	r0, r4
   11f0c:	bl	11e8c <__assert_fail@plt+0x12f0>
   11f10:	mov	r5, r0
   11f14:	bl	10a70 <unlink@plt>
   11f18:	mov	r0, r5
   11f1c:	bl	10a28 <free@plt>
   11f20:	add	r4, r4, #1
   11f24:	sxth	r4, r4
   11f28:	ldrsh	r3, [r6]
   11f2c:	cmp	r3, r4
   11f30:	bge	11f08 <__assert_fail@plt+0x136c>
   11f34:	mov	r0, r7
   11f38:	bl	10af4 <exit@plt>
   11f3c:	andeq	fp, r2, r8, asr #8
   11f40:	andeq	r7, r2, ip, lsr r1
   11f44:	push	{r4, lr}
   11f48:	ldrb	r3, [r0]
   11f4c:	cmp	r3, #0
   11f50:	beq	11f9c <__assert_fail@plt+0x1400>
   11f54:	ldrb	r2, [r1]
   11f58:	cmp	r2, r3
   11f5c:	bne	11fb8 <__assert_fail@plt+0x141c>
   11f60:	mov	ip, r1
   11f64:	mov	r2, #0
   11f68:	add	r2, r2, #1
   11f6c:	mov	r4, r2
   11f70:	ldrb	r3, [r0, #1]!
   11f74:	cmp	r3, #0
   11f78:	beq	11fa0 <__assert_fail@plt+0x1404>
   11f7c:	ldrb	lr, [ip, #1]!
   11f80:	cmp	lr, r3
   11f84:	beq	11f68 <__assert_fail@plt+0x13cc>
   11f88:	ldrb	r2, [r1, r4]
   11f8c:	cmp	r2, r3
   11f90:	mvnhi	r0, #0
   11f94:	movls	r0, #1
   11f98:	pop	{r4, pc}
   11f9c:	mov	r4, #0
   11fa0:	ldrb	r3, [r1, r4]
   11fa4:	cmp	r3, #0
   11fa8:	movne	r3, #0
   11fac:	bne	11f88 <__assert_fail@plt+0x13ec>
   11fb0:	mov	r0, #0
   11fb4:	pop	{r4, pc}
   11fb8:	mov	r4, #0
   11fbc:	b	11f88 <__assert_fail@plt+0x13ec>
   11fc0:	ldr	r3, [pc, #36]	; 11fec <__assert_fail@plt+0x1450>
   11fc4:	ldr	r3, [r3]
   11fc8:	cmp	r3, r0
   11fcc:	bxeq	lr
   11fd0:	ldr	r3, [pc, #24]	; 11ff0 <__assert_fail@plt+0x1454>
   11fd4:	ldr	r3, [r3]
   11fd8:	cmp	r0, r3
   11fdc:	bxeq	lr
   11fe0:	push	{r4, lr}
   11fe4:	bl	10b30 <fclose@plt>
   11fe8:	pop	{r4, pc}
   11fec:	andeq	r7, r2, r8, asr #1
   11ff0:	andeq	r7, r2, ip, asr #1
   11ff4:	push	{lr}		; (str lr, [sp, #-4]!)
   11ff8:	sub	sp, sp, #92	; 0x5c
   11ffc:	mov	r2, sp
   12000:	mov	r1, r0
   12004:	mov	r0, #3
   12008:	bl	10a88 <__xstat@plt>
   1200c:	clz	r0, r0
   12010:	lsr	r0, r0, #5
   12014:	add	sp, sp, #92	; 0x5c
   12018:	pop	{pc}		; (ldr pc, [sp], #4)
   1201c:	push	{r4, lr}
   12020:	ldr	r3, [pc, #32]	; 12048 <__assert_fail@plt+0x14ac>
   12024:	ldrh	r0, [r3]
   12028:	add	r0, r0, #1
   1202c:	sxth	r0, r0
   12030:	strh	r0, [r3]
   12034:	bl	11e8c <__assert_fail@plt+0x12f0>
   12038:	mov	r4, r0
   1203c:	bl	10a70 <unlink@plt>
   12040:	mov	r0, r4
   12044:	pop	{r4, pc}
   12048:	andeq	r7, r2, ip, lsr r1
   1204c:	push	{r4, lr}
   12050:	mov	r4, r0
   12054:	bl	10b0c <strlen@plt>
   12058:	sub	r0, r0, #1
   1205c:	sxth	r0, r0
   12060:	cmp	r0, #0
   12064:	blt	12090 <__assert_fail@plt+0x14f4>
   12068:	ldrb	r3, [r4, r0]
   1206c:	cmp	r3, #47	; 0x2f
   12070:	beq	12090 <__assert_fail@plt+0x14f4>
   12074:	sub	r0, r0, #1
   12078:	sxth	r0, r0
   1207c:	cmp	r0, #0
   12080:	blt	12090 <__assert_fail@plt+0x14f4>
   12084:	ldrb	r3, [r4, r0]
   12088:	cmp	r3, #47	; 0x2f
   1208c:	bne	12074 <__assert_fail@plt+0x14d8>
   12090:	add	r0, r0, #1
   12094:	add	r0, r4, r0
   12098:	pop	{r4, pc}
   1209c:	push	{r4, lr}
   120a0:	mov	r0, #0
   120a4:	bl	11ed4 <__assert_fail@plt+0x1338>
   120a8:	push	{r4, lr}
   120ac:	ldr	r2, [pc, #48]	; 120e4 <__assert_fail@plt+0x1548>
   120b0:	ldr	r2, [r2]
   120b4:	cmp	r2, #0
   120b8:	beq	120c4 <__assert_fail@plt+0x1528>
   120bc:	blx	r2
   120c0:	bl	1209c <__assert_fail@plt+0x1500>
   120c4:	mov	r3, r0
   120c8:	ldr	r2, [pc, #24]	; 120e8 <__assert_fail@plt+0x154c>
   120cc:	ldr	r2, [r2]
   120d0:	ldr	r1, [pc, #20]	; 120ec <__assert_fail@plt+0x1550>
   120d4:	ldr	r0, [pc, #20]	; 120f0 <__assert_fail@plt+0x1554>
   120d8:	ldr	r0, [r0]
   120dc:	bl	10b18 <fprintf@plt>
   120e0:	b	120c0 <__assert_fail@plt+0x1524>
   120e4:	andeq	fp, r2, r0, asr #8
   120e8:	andeq	fp, r2, r4, asr #8
   120ec:	andeq	r6, r1, r0, lsr #7
   120f0:	andeq	r7, r2, r0, asr #1

000120f4 <error@@Base>:
   120f4:	push	{r4, lr}
   120f8:	mov	r3, r0
   120fc:	ldr	r2, [pc, #28]	; 12120 <error@@Base+0x2c>
   12100:	ldr	r2, [r2]
   12104:	ldr	r1, [pc, #24]	; 12124 <error@@Base+0x30>
   12108:	ldr	r0, [pc, #24]	; 12128 <error@@Base+0x34>
   1210c:	ldr	r0, [r0]
   12110:	bl	10b18 <fprintf@plt>
   12114:	ldr	r3, [pc, #16]	; 1212c <error@@Base+0x38>
   12118:	ldr	r0, [r3]
   1211c:	bl	11ed4 <__assert_fail@plt+0x1338>
   12120:	andeq	fp, r2, r4, asr #8
   12124:			; <UNDEFINED> instruction: 0x000163b0
   12128:	andeq	r7, r2, r0, asr #1
   1212c:	strheq	r7, [r2], -r8
   12130:	push	{r4, lr}
   12134:	bl	109ec <calloc@plt>
   12138:	cmp	r0, #0
   1213c:	popne	{r4, pc}
   12140:	ldr	r0, [pc]	; 12148 <error@@Base+0x54>
   12144:	bl	120f4 <error@@Base>
   12148:			; <UNDEFINED> instruction: 0x000163b8
   1214c:	ldr	r3, [pc, #36]	; 12178 <error@@Base+0x84>
   12150:	ldrb	r3, [r3, #2]
   12154:	cmp	r3, #0
   12158:	beq	12160 <error@@Base+0x6c>
   1215c:	bx	lr
   12160:	push	{r4, lr}
   12164:	mov	r2, #1
   12168:	ldr	r3, [pc, #8]	; 12178 <error@@Base+0x84>
   1216c:	strb	r2, [r3, #2]
   12170:	ldr	r0, [pc, #4]	; 1217c <error@@Base+0x88>
   12174:	bl	120f4 <error@@Base>
   12178:	andeq	r7, r2, ip, lsr r1
   1217c:	ldrdeq	r6, [r1], -r4
   12180:	push	{lr}		; (str lr, [sp, #-4]!)
   12184:	sub	sp, sp, #12
   12188:	ldr	r3, [pc, #40]	; 121b8 <error@@Base+0xc4>
   1218c:	ldr	r2, [r3]
   12190:	ldr	r3, [pc, #36]	; 121bc <error@@Base+0xc8>
   12194:	ldr	ip, [r3]
   12198:	str	r1, [sp]
   1219c:	mov	r3, r0
   121a0:	ldr	r1, [pc, #24]	; 121c0 <error@@Base+0xcc>
   121a4:	mov	r0, ip
   121a8:	bl	10b18 <fprintf@plt>
   121ac:	ldr	r3, [pc, #16]	; 121c4 <error@@Base+0xd0>
   121b0:	ldr	r0, [r3]
   121b4:	bl	11ed4 <__assert_fail@plt+0x1338>
   121b8:	andeq	fp, r2, r4, asr #8
   121bc:	andeq	r7, r2, r0, asr #1
   121c0:	andeq	r6, r1, r4, ror #7
   121c4:	strheq	r7, [r2], -r8
   121c8:	push	{r4, r5, r6, lr}
   121cc:	subs	r5, r0, #0
   121d0:	beq	12200 <error@@Base+0x10c>
   121d4:	mov	r4, r1
   121d8:	mov	r0, r5
   121dc:	bl	10a1c <fopen@plt>
   121e0:	cmp	r0, #0
   121e4:	popne	{r4, r5, r6, pc}
   121e8:	ldrb	r3, [r4]
   121ec:	cmp	r3, #119	; 0x77
   121f0:	beq	12218 <error@@Base+0x124>
   121f4:	mov	r1, r5
   121f8:	ldr	r0, [pc, #36]	; 12224 <error@@Base+0x130>
   121fc:	bl	12180 <error@@Base+0x8c>
   12200:	ldrb	r3, [r1]
   12204:	cmp	r3, #114	; 0x72
   12208:	ldreq	r3, [pc, #24]	; 12228 <error@@Base+0x134>
   1220c:	ldrne	r3, [pc, #24]	; 1222c <error@@Base+0x138>
   12210:	ldr	r0, [r3]
   12214:	pop	{r4, r5, r6, pc}
   12218:	mov	r1, r5
   1221c:	ldr	r0, [pc, #12]	; 12230 <error@@Base+0x13c>
   12220:	bl	12180 <error@@Base+0x8c>
   12224:	andeq	r6, r1, ip, lsl #8
   12228:	andeq	r7, r2, r8, asr #1
   1222c:	andeq	r7, r2, ip, asr #1
   12230:	strdeq	r6, [r1], -r4
   12234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12238:	sub	sp, sp, #20
   1223c:	mov	r5, r0
   12240:	str	r0, [sp, #8]
   12244:	mov	sl, r1
   12248:	str	r2, [sp, #12]
   1224c:	mov	r6, r3
   12250:	ldr	r0, [r1]
   12254:	bl	1204c <__assert_fail@plt+0x14b0>
   12258:	ldr	r3, [pc, #468]	; 12434 <error@@Base+0x340>
   1225c:	str	r0, [r3]
   12260:	ldr	r4, [pc, #464]	; 12438 <error@@Base+0x344>
   12264:	mov	r1, r4
   12268:	mov	r0, #2
   1226c:	bl	10ad0 <__sysv_signal@plt>
   12270:	mov	r1, r4
   12274:	mov	r0, #15
   12278:	bl	10ad0 <__sysv_signal@plt>
   1227c:	ldr	r8, [r5]
   12280:	cmp	r8, #1
   12284:	beq	122a4 <error@@Base+0x1b0>
   12288:	movle	r7, #0
   1228c:	ble	122b8 <error@@Base+0x1c4>
   12290:	mov	r7, #0
   12294:	mov	r3, #1
   12298:	str	r3, [sp, #4]
   1229c:	mov	r4, r3
   122a0:	b	12350 <error@@Base+0x25c>
   122a4:	ldr	r3, [pc, #400]	; 1243c <error@@Base+0x348>
   122a8:	ldrb	r3, [r3, #4]
   122ac:	cmp	r3, #0
   122b0:	moveq	r7, #0
   122b4:	bne	122c8 <error@@Base+0x1d4>
   122b8:	ldr	r3, [sp, #8]
   122bc:	str	r7, [r3]
   122c0:	add	sp, sp, #20
   122c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122c8:	ldr	r0, [sp, #12]
   122cc:	bl	120a8 <__assert_fail@plt+0x150c>
   122d0:	ldr	r0, [sp, #12]
   122d4:	bl	120a8 <__assert_fail@plt+0x150c>
   122d8:	mov	r1, r6
   122dc:	b	123e4 <error@@Base+0x2f0>
   122e0:	ldr	r3, [r1, #8]
   122e4:	cmp	r3, #0
   122e8:	beq	12310 <error@@Base+0x21c>
   122ec:	ldrb	r2, [r5, #2]
   122f0:	cmp	r2, #0
   122f4:	bne	12310 <error@@Base+0x21c>
   122f8:	ldrb	r2, [r3]
   122fc:	cmp	r2, #0
   12300:	bne	1231c <error@@Base+0x228>
   12304:	mov	r2, #1
   12308:	strb	r2, [r3]
   1230c:	b	12334 <error@@Base+0x240>
   12310:	mov	r1, r5
   12314:	ldr	r0, [pc, #292]	; 12440 <error@@Base+0x34c>
   12318:	bl	12180 <error@@Base+0x8c>
   1231c:	mov	r1, r5
   12320:	ldr	r0, [pc, #284]	; 12444 <error@@Base+0x350>
   12324:	bl	12180 <error@@Base+0x8c>
   12328:	add	r3, r7, #1
   1232c:	str	r5, [sl, r7, lsl #2]
   12330:	sxth	r7, r3
   12334:	add	r4, r4, #1
   12338:	sxth	r4, r4
   1233c:	str	r4, [sp, #4]
   12340:	ldr	r3, [sp, #8]
   12344:	ldr	r8, [r3]
   12348:	cmp	r4, r8
   1234c:	bge	122b8 <error@@Base+0x1c4>
   12350:	lsl	fp, r4, #2
   12354:	ldr	r5, [sl, r4, lsl #2]
   12358:	ldrb	r3, [r5]
   1235c:	cmp	r3, #45	; 0x2d
   12360:	bne	12328 <error@@Base+0x234>
   12364:	ldrb	r9, [r5, #1]
   12368:	cmp	r9, #0
   1236c:	beq	12328 <error@@Base+0x234>
   12370:	mov	r0, r5
   12374:	bl	10b0c <strlen@plt>
   12378:	mov	r2, r0
   1237c:	mov	r1, r5
   12380:	ldr	r0, [pc, #192]	; 12448 <error@@Base+0x354>
   12384:	bl	10b78 <strncmp@plt>
   12388:	cmp	r0, #0
   1238c:	beq	122d0 <error@@Base+0x1dc>
   12390:	ldr	r3, [sp, #4]
   12394:	add	r3, r3, #1
   12398:	cmp	r3, r8
   1239c:	addlt	r3, sl, fp
   123a0:	ldrlt	r0, [r3, #4]
   123a4:	movge	r0, #0
   123a8:	cmp	r6, #0
   123ac:	beq	12310 <error@@Base+0x21c>
   123b0:	ldrb	r2, [r6]
   123b4:	cmp	r9, r2
   123b8:	cmpne	r2, #0
   123bc:	beq	122d8 <error@@Base+0x1e4>
   123c0:	mov	r3, #0
   123c4:	add	r3, r3, #1
   123c8:	sxth	r3, r3
   123cc:	add	r2, r3, r3, lsl #1
   123d0:	add	r1, r6, r2, lsl #2
   123d4:	ldrb	r2, [r6, r2, lsl #2]
   123d8:	cmp	r9, r2
   123dc:	cmpne	r2, #0
   123e0:	bne	123c4 <error@@Base+0x2d0>
   123e4:	cmp	r2, #0
   123e8:	beq	12310 <error@@Base+0x21c>
   123ec:	ldr	r3, [r1, #4]
   123f0:	cmp	r3, #0
   123f4:	beq	122e0 <error@@Base+0x1ec>
   123f8:	ldrb	r2, [r5, #2]
   123fc:	cmp	r2, #0
   12400:	cmpeq	r0, #0
   12404:	beq	122e0 <error@@Base+0x1ec>
   12408:	ldr	r1, [r3]
   1240c:	cmp	r1, #0
   12410:	bne	1231c <error@@Base+0x228>
   12414:	cmp	r2, #0
   12418:	addne	r0, r5, #2
   1241c:	str	r0, [r3]
   12420:	ldrb	r3, [r5, #2]
   12424:	cmp	r3, #0
   12428:	addeq	r4, r4, #1
   1242c:	sxtheq	r4, r4
   12430:	b	12334 <error@@Base+0x240>
   12434:	andeq	fp, r2, r4, asr #8
   12438:	andeq	r2, r1, ip, asr #2
   1243c:	strheq	r7, [r2], -r8
   12440:	andeq	r6, r1, r8, lsr #8
   12444:	andeq	r6, r1, r8, lsr r4
   12448:	andeq	r6, r1, r0, lsr #8
   1244c:	push	{lr}		; (str lr, [sp, #-4]!)
   12450:	sub	sp, sp, #12
   12454:	ldr	r3, [pc, #36]	; 12480 <error@@Base+0x38c>
   12458:	ldr	r2, [r3]
   1245c:	ldr	r3, [pc, #32]	; 12484 <error@@Base+0x390>
   12460:	ldr	ip, [r3]
   12464:	str	r1, [sp]
   12468:	mov	r3, r0
   1246c:	ldr	r1, [pc, #20]	; 12488 <error@@Base+0x394>
   12470:	mov	r0, ip
   12474:	bl	10b18 <fprintf@plt>
   12478:	add	sp, sp, #12
   1247c:	pop	{pc}		; (ldr pc, [sp], #4)
   12480:	andeq	fp, r2, r4, asr #8
   12484:	andeq	r7, r2, r0, asr #1
   12488:	andeq	r6, r1, r4, ror #7
   1248c:	push	{r4, r5, r6, lr}
   12490:	mov	r4, r0
   12494:	mov	r5, r2
   12498:	uxtb	r6, r1
   1249c:	mov	r1, #16
   124a0:	mov	r0, #1
   124a4:	bl	12130 <error@@Base+0x3c>
   124a8:	mov	r1, r0
   124ac:	strb	r6, [r0, #8]
   124b0:	str	r5, [r0, #12]
   124b4:	mov	r0, r4
   124b8:	bl	12b40 <error@@Base+0xa4c>
   124bc:	pop	{r4, r5, r6, pc}
   124c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124c4:	sub	sp, sp, #116	; 0x74
   124c8:	str	r0, [sp]
   124cc:	mov	sl, r2
   124d0:	ldrb	r3, [r2]
   124d4:	mov	r0, r1
   124d8:	adds	r2, r3, #0
   124dc:	movne	r2, #1
   124e0:	cmp	r1, #0
   124e4:	movne	r2, #0
   124e8:	cmp	r2, #0
   124ec:	bne	12550 <error@@Base+0x45c>
   124f0:	ldr	r3, [sp]
   124f4:	ldr	r3, [r3, #4]
   124f8:	str	r3, [sp, #4]
   124fc:	ldr	r1, [pc, #820]	; 12838 <error@@Base+0x744>
   12500:	bl	121c8 <error@@Base+0xd4>
   12504:	mov	r6, r0
   12508:	ldrb	r3, [sl]
   1250c:	cmp	r3, #0
   12510:	bne	1255c <error@@Base+0x468>
   12514:	ldrb	r8, [sl, #1]
   12518:	ldr	fp, [sl, #4]
   1251c:	cmp	fp, #0
   12520:	moveq	fp, #94	; 0x5e
   12524:	mov	r0, r6
   12528:	bl	10b90 <getc@plt>
   1252c:	cmn	r0, #1
   12530:	beq	1269c <error@@Base+0x5a8>
   12534:	ldr	r3, [pc, #768]	; 1283c <error@@Base+0x748>
   12538:	ldrsb	r4, [r3, r0]
   1253c:	cmp	r4, #0
   12540:	ble	125f4 <error@@Base+0x500>
   12544:	mov	r7, #0
   12548:	mov	r9, r3
   1254c:	b	1263c <error@@Base+0x548>
   12550:	ldr	r1, [pc, #744]	; 12840 <error@@Base+0x74c>
   12554:	ldr	r0, [pc, #744]	; 12844 <error@@Base+0x750>
   12558:	bl	12180 <error@@Base+0x8c>
   1255c:	mov	r2, r0
   12560:	mov	r1, #99	; 0x63
   12564:	add	r0, sp, #12
   12568:	bl	10a40 <fgets@plt>
   1256c:	cmp	r0, #0
   12570:	beq	1258c <error@@Base+0x498>
   12574:	mov	r2, #51	; 0x33
   12578:	ldr	r1, [pc, #712]	; 12848 <error@@Base+0x754>
   1257c:	add	r0, sp, #12
   12580:	bl	10b78 <strncmp@plt>
   12584:	cmp	r0, #0
   12588:	beq	125a0 <error@@Base+0x4ac>
   1258c:	mov	r0, r6
   12590:	bl	10a64 <rewind@plt>
   12594:	mov	r3, #0
   12598:	strb	r3, [sl, #11]
   1259c:	b	12514 <error@@Base+0x420>
   125a0:	mov	r4, #0
   125a4:	mov	r5, #99	; 0x63
   125a8:	ldr	r7, [pc, #668]	; 1284c <error@@Base+0x758>
   125ac:	mov	r2, r6
   125b0:	mov	r1, r5
   125b4:	add	r0, sp, #12
   125b8:	bl	10a40 <fgets@plt>
   125bc:	cmp	r0, #0
   125c0:	beq	125ec <error@@Base+0x4f8>
   125c4:	mov	r1, r7
   125c8:	add	r0, sp, #12
   125cc:	bl	109f8 <strcmp@plt>
   125d0:	cmp	r0, #0
   125d4:	addeq	r4, r4, #1
   125d8:	sxtheq	r4, r4
   125dc:	cmp	r4, #1
   125e0:	ble	125ac <error@@Base+0x4b8>
   125e4:	mov	r3, #1
   125e8:	b	12598 <error@@Base+0x4a4>
   125ec:	mov	r3, #1
   125f0:	b	12598 <error@@Base+0x4a4>
   125f4:	ldr	r0, [pc, #596]	; 12850 <error@@Base+0x75c>
   125f8:	bl	120f4 <error@@Base>
   125fc:	ldr	r0, [pc, #592]	; 12854 <error@@Base+0x760>
   12600:	bl	120f4 <error@@Base>
   12604:	bl	10b60 <utf8proc_errmsg@plt>
   12608:	bl	120f4 <error@@Base>
   1260c:	ldr	r2, [sp, #12]
   12610:	mov	r1, r7
   12614:	ldr	r0, [sp]
   12618:	bl	1248c <error@@Base+0x398>
   1261c:	mov	r7, #0
   12620:	mov	r0, r6
   12624:	bl	10b90 <getc@plt>
   12628:	cmn	r0, #1
   1262c:	beq	1269c <error@@Base+0x5a8>
   12630:	ldrsb	r4, [r9, r0]
   12634:	cmp	r4, #0
   12638:	ble	125f4 <error@@Base+0x500>
   1263c:	strb	r0, [sp, #8]
   12640:	cmp	r4, #1
   12644:	ble	12668 <error@@Base+0x574>
   12648:	sub	r5, r4, #1
   1264c:	mov	r3, r6
   12650:	mov	r2, r5
   12654:	mov	r1, #1
   12658:	add	r0, sp, #9
   1265c:	bl	10aa0 <fread@plt>
   12660:	cmp	r5, r0
   12664:	bne	125fc <error@@Base+0x508>
   12668:	add	r2, sp, #12
   1266c:	mov	r1, #4
   12670:	add	r0, sp, #8
   12674:	bl	10aac <utf8proc_iterate@plt>
   12678:	cmp	r0, r4
   1267c:	bne	12604 <error@@Base+0x510>
   12680:	cmp	r8, #0
   12684:	beq	1260c <error@@Base+0x518>
   12688:	ldr	r3, [sp, #12]
   1268c:	cmp	fp, r3
   12690:	moveq	r7, #1
   12694:	bne	1260c <error@@Base+0x518>
   12698:	b	12620 <error@@Base+0x52c>
   1269c:	mov	r0, r6
   126a0:	bl	11fc0 <__assert_fail@plt+0x1424>
   126a4:	ldrb	r3, [sl, #9]
   126a8:	cmp	r3, #0
   126ac:	beq	127f0 <error@@Base+0x6fc>
   126b0:	ldr	r3, [sp, #4]
   126b4:	cmp	r3, #0
   126b8:	ldrne	r6, [r3, #4]
   126bc:	ldreq	r3, [sp]
   126c0:	ldreq	r6, [r3]
   126c4:	cmp	r6, #0
   126c8:	beq	127f0 <error@@Base+0x6fc>
   126cc:	mov	r5, r6
   126d0:	mov	r7, #32
   126d4:	mov	r9, #1
   126d8:	mov	r8, #0
   126dc:	b	12710 <error@@Base+0x61c>
   126e0:	cmp	r4, #160	; 0xa0
   126e4:	beq	12700 <error@@Base+0x60c>
   126e8:	ldrsh	r3, [r0]
   126ec:	sub	r3, r3, #23
   126f0:	cmp	r3, #2
   126f4:	bhi	12704 <error@@Base+0x610>
   126f8:	mov	r3, r9
   126fc:	b	12740 <error@@Base+0x64c>
   12700:	str	r7, [r5, #12]
   12704:	ldr	r5, [r5, #4]
   12708:	cmp	r5, #0
   1270c:	beq	12784 <error@@Base+0x690>
   12710:	ldr	r4, [r5, #12]
   12714:	mov	r0, r4
   12718:	bl	10a34 <utf8proc_get_property@plt>
   1271c:	cmp	r4, #13
   12720:	bhi	126e0 <error@@Base+0x5ec>
   12724:	cmp	r4, #11
   12728:	bcs	12700 <error@@Base+0x60c>
   1272c:	cmp	r4, #9
   12730:	beq	12700 <error@@Base+0x60c>
   12734:	cmp	r4, #10
   12738:	moveq	r3, r8
   1273c:	bne	126e8 <error@@Base+0x5f4>
   12740:	cmp	r3, #0
   12744:	beq	12704 <error@@Base+0x610>
   12748:	b	12700 <error@@Base+0x60c>
   1274c:	eor	r2, r5, #1
   12750:	cmp	r4, #0
   12754:	orreq	r2, r2, #1
   12758:	cmp	r2, #0
   1275c:	bne	127ac <error@@Base+0x6b8>
   12760:	ldr	r2, [r4, #12]
   12764:	cmp	r2, #32
   12768:	cmpne	r2, #10
   1276c:	beq	127ac <error@@Base+0x6b8>
   12770:	subs	r5, r3, #10
   12774:	movne	r5, #1
   12778:	mov	r6, r4
   1277c:	cmp	r4, #0
   12780:	beq	127f0 <error@@Base+0x6fc>
   12784:	ldr	r4, [r6, #4]
   12788:	ldr	r3, [r6, #12]
   1278c:	cmp	r3, #32
   12790:	beq	1274c <error@@Base+0x658>
   12794:	eor	r2, r5, #1
   12798:	cmp	r3, #10
   1279c:	movne	r2, #0
   127a0:	andeq	r2, r2, #1
   127a4:	cmp	r2, #0
   127a8:	beq	12770 <error@@Base+0x67c>
   127ac:	cmp	r4, #0
   127b0:	moveq	r3, #0
   127b4:	andne	r3, r5, #1
   127b8:	cmp	r3, #0
   127bc:	beq	127d8 <error@@Base+0x6e4>
   127c0:	ldr	r3, [r4, #12]
   127c4:	cmp	r3, #32
   127c8:	ldrbeq	r3, [r4, #8]
   127cc:	ldrbeq	r2, [r6, #8]
   127d0:	orreq	r3, r3, r2
   127d4:	strbeq	r3, [r4, #8]
   127d8:	mov	r1, r6
   127dc:	ldr	r0, [sp]
   127e0:	bl	12b84 <error@@Base+0xa90>
   127e4:	mov	r0, r6
   127e8:	bl	10a28 <free@plt>
   127ec:	b	12778 <error@@Base+0x684>
   127f0:	ldrb	r3, [sl, #10]
   127f4:	cmp	r3, #0
   127f8:	beq	12830 <error@@Base+0x73c>
   127fc:	ldr	r3, [sp, #4]
   12800:	cmp	r3, #0
   12804:	ldrne	r4, [r3, #4]
   12808:	ldreq	r3, [sp]
   1280c:	ldreq	r4, [r3]
   12810:	cmp	r4, #0
   12814:	beq	12830 <error@@Base+0x73c>
   12818:	ldr	r0, [r4, #12]
   1281c:	bl	10a7c <utf8proc_tolower@plt>
   12820:	str	r0, [r4, #12]
   12824:	ldr	r4, [r4, #4]
   12828:	cmp	r4, #0
   1282c:	bne	12818 <error@@Base+0x724>
   12830:	add	sp, sp, #116	; 0x74
   12834:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12838:	andeq	r2, r1, r8, lsr pc
   1283c:	andeq	r6, r2, r8, lsl #28
   12840:	andeq	r6, r1, ip, asr #8
   12844:	andeq	r6, r1, r8, asr r4
   12848:	andeq	r6, r1, r8, ror #8
   1284c:	andeq	r6, r1, r0, lsr #9
   12850:	ldrdeq	r6, [r1], -r8
   12854:	strdeq	r6, [r1], -r0
   12858:	push	{r4, lr}
   1285c:	bl	10a4c <utf8proc_encode_char@plt>
   12860:	cmp	r0, #0
   12864:	ble	12870 <error@@Base+0x77c>
   12868:	sxtb	r0, r0
   1286c:	pop	{r4, pc}
   12870:	ldr	r0, [pc]	; 12878 <error@@Base+0x784>
   12874:	bl	120f4 <error@@Base>
   12878:	andeq	r6, r1, r8, lsl #10
   1287c:	push	{r4, r5, r6, r7, r8, lr}
   12880:	mov	r4, r1
   12884:	mov	r6, r2
   12888:	uxtb	r0, r0
   1288c:	uxtb	r7, r3
   12890:	cmp	r0, #0
   12894:	moveq	r5, #0
   12898:	bne	128ec <error@@Base+0x7f8>
   1289c:	cmp	r4, #10
   128a0:	beq	12900 <error@@Base+0x80c>
   128a4:	mov	r0, r4
   128a8:	bl	10a34 <utf8proc_get_property@plt>
   128ac:	cmp	r4, #32
   128b0:	beq	1291c <error@@Base+0x828>
   128b4:	ldrsh	r3, [r0]
   128b8:	cmp	r3, #1
   128bc:	blt	128d0 <error@@Base+0x7dc>
   128c0:	cmp	r3, #22
   128c4:	ble	1291c <error@@Base+0x828>
   128c8:	cmp	r3, #29
   128cc:	beq	1291c <error@@Base+0x828>
   128d0:	cmp	r4, #255	; 0xff
   128d4:	mov	r2, r4
   128d8:	ldrls	r1, [pc, #136]	; 12968 <error@@Base+0x874>
   128dc:	ldrhi	r1, [pc, #136]	; 1296c <error@@Base+0x878>
   128e0:	add	r0, r6, r5
   128e4:	bl	10b54 <sprintf@plt>
   128e8:	pop	{r4, r5, r6, r7, r8, pc}
   128ec:	mov	r1, r2
   128f0:	mov	r0, #94	; 0x5e
   128f4:	bl	12858 <error@@Base+0x764>
   128f8:	sxth	r5, r0
   128fc:	b	1289c <error@@Base+0x7a8>
   12900:	ldr	r3, [pc, #104]	; 12970 <error@@Base+0x87c>
   12904:	ldr	r1, [pc, #104]	; 12974 <error@@Base+0x880>
   12908:	cmp	r7, #0
   1290c:	moveq	r1, r3
   12910:	add	r0, r6, r5
   12914:	bl	10b54 <sprintf@plt>
   12918:	pop	{r4, r5, r6, r7, r8, pc}
   1291c:	mov	r0, r4
   12920:	bl	10b00 <utf8proc_category@plt>
   12924:	sub	r0, r0, #6
   12928:	cmp	r0, #2
   1292c:	bls	12950 <error@@Base+0x85c>
   12930:	add	r1, r6, r5
   12934:	mov	r0, r4
   12938:	bl	12858 <error@@Base+0x764>
   1293c:	add	r0, r0, r5
   12940:	sxth	r0, r0
   12944:	mov	r3, #0
   12948:	strb	r3, [r6, r0]
   1294c:	pop	{r4, r5, r6, r7, r8, pc}
   12950:	add	r1, r6, r5
   12954:	ldr	r0, [pc, #28]	; 12978 <error@@Base+0x884>
   12958:	bl	12858 <error@@Base+0x764>
   1295c:	add	r5, r0, r5
   12960:	sxth	r5, r5
   12964:	b	12930 <error@@Base+0x83c>
   12968:	andeq	r6, r1, r8, lsr #10
   1296c:	andeq	r6, r1, r0, lsr r5
   12970:			; <UNDEFINED> instruction: 0x00012fb0
   12974:	andeq	r6, r1, r0, lsr #10
   12978:	andeq	r2, r0, ip, asr #11
   1297c:	push	{r4, r5, r6, r7, lr}
   12980:	sub	sp, sp, #20
   12984:	mov	r7, r0
   12988:	mov	r0, r1
   1298c:	mov	r4, r2
   12990:	ldr	r1, [pc, #160]	; 12a38 <error@@Base+0x944>
   12994:	bl	121c8 <error@@Base+0xd4>
   12998:	mov	r5, r0
   1299c:	cmp	r4, #0
   129a0:	beq	129ec <error@@Base+0x8f8>
   129a4:	mov	r3, r0
   129a8:	mov	r2, #55	; 0x37
   129ac:	mov	r1, #1
   129b0:	ldr	r0, [pc, #132]	; 12a3c <error@@Base+0x948>
   129b4:	bl	10a94 <fwrite@plt>
   129b8:	ldr	r6, [pc, #128]	; 12a40 <error@@Base+0x94c>
   129bc:	mov	r3, r5
   129c0:	mov	r2, #55	; 0x37
   129c4:	mov	r1, #1
   129c8:	mov	r0, r6
   129cc:	bl	10a94 <fwrite@plt>
   129d0:	mov	r0, r5
   129d4:	blx	r4
   129d8:	mov	r3, r5
   129dc:	mov	r2, #55	; 0x37
   129e0:	mov	r1, #1
   129e4:	mov	r0, r6
   129e8:	bl	10a94 <fwrite@plt>
   129ec:	ldr	r4, [r7]
   129f0:	cmp	r4, #0
   129f4:	beq	12a28 <error@@Base+0x934>
   129f8:	mov	r6, #0
   129fc:	mov	r3, r6
   12a00:	add	r2, sp, #4
   12a04:	ldr	r1, [r4, #12]
   12a08:	ldrb	r0, [r4, #8]
   12a0c:	bl	1287c <error@@Base+0x788>
   12a10:	mov	r1, r5
   12a14:	add	r0, sp, #4
   12a18:	bl	10b6c <fputs@plt>
   12a1c:	ldr	r4, [r4, #4]
   12a20:	cmp	r4, #0
   12a24:	bne	129fc <error@@Base+0x908>
   12a28:	mov	r0, r5
   12a2c:	bl	11fc0 <__assert_fail@plt+0x1424>
   12a30:	add	sp, sp, #20
   12a34:	pop	{r4, r5, r6, r7, pc}
   12a38:	andeq	r2, r1, r0, lsl #31
   12a3c:	andeq	r6, r1, r8, ror #8
   12a40:	andeq	r6, r1, r0, lsr #9
   12a44:	push	{r4, r5, r6, r7, r8, lr}
   12a48:	sub	sp, sp, #8
   12a4c:	mov	r3, #0
   12a50:	str	r3, [sp, #4]
   12a54:	ldrb	r3, [r1]
   12a58:	cmp	r3, #0
   12a5c:	beq	12aac <error@@Base+0x9b8>
   12a60:	mov	r6, r0
   12a64:	mov	r4, r1
   12a68:	mvn	r5, #0
   12a6c:	mov	r7, #0
   12a70:	add	r2, sp, #4
   12a74:	mov	r1, r5
   12a78:	mov	r0, r4
   12a7c:	bl	10aac <utf8proc_iterate@plt>
   12a80:	subs	r8, r0, #0
   12a84:	ble	12ab4 <error@@Base+0x9c0>
   12a88:	ldr	r2, [sp, #4]
   12a8c:	mov	r1, r7
   12a90:	mov	r0, r6
   12a94:	bl	1248c <error@@Base+0x398>
   12a98:	ldrb	r3, [r4, r8]!
   12a9c:	cmp	r3, #0
   12aa0:	bne	12a70 <error@@Base+0x97c>
   12aa4:	mov	r0, #1
   12aa8:	b	12ab8 <error@@Base+0x9c4>
   12aac:	mov	r0, #1
   12ab0:	b	12ab8 <error@@Base+0x9c4>
   12ab4:	mov	r0, #0
   12ab8:	add	sp, sp, #8
   12abc:	pop	{r4, r5, r6, r7, r8, pc}
   12ac0:	push	{r4, lr}
   12ac4:	mov	r4, r0
   12ac8:	str	r1, [r2]
   12acc:	str	r3, [r2, #4]
   12ad0:	cmp	r1, #0
   12ad4:	strne	r2, [r1, #4]
   12ad8:	streq	r2, [r0]
   12adc:	cmp	r3, #0
   12ae0:	strne	r2, [r3]
   12ae4:	streq	r2, [r0, #4]
   12ae8:	ldr	r0, [r0, #8]
   12aec:	cmp	r0, #0
   12af0:	beq	12b00 <error@@Base+0xa0c>
   12af4:	bl	10a28 <free@plt>
   12af8:	mov	r3, #0
   12afc:	str	r3, [r4, #8]
   12b00:	ldr	r3, [r4, #12]
   12b04:	add	r3, r3, #1
   12b08:	str	r3, [r4, #12]
   12b0c:	pop	{r4, pc}
   12b10:	mov	r3, #0
   12b14:	str	r3, [r0, #4]
   12b18:	str	r3, [r0]
   12b1c:	str	r3, [r0, #8]
   12b20:	str	r3, [r0, #12]
   12b24:	bx	lr
   12b28:	push	{r4, lr}
   12b2c:	ldr	r3, [r0]
   12b30:	mov	r2, r1
   12b34:	mov	r1, #0
   12b38:	bl	12ac0 <error@@Base+0x9cc>
   12b3c:	pop	{r4, pc}
   12b40:	push	{r4, lr}
   12b44:	mov	r3, #0
   12b48:	mov	r2, r1
   12b4c:	ldr	r1, [r0, #4]
   12b50:	bl	12ac0 <error@@Base+0x9cc>
   12b54:	pop	{r4, pc}
   12b58:	push	{r4, lr}
   12b5c:	mov	ip, r2
   12b60:	mov	r3, r2
   12b64:	mov	r2, r1
   12b68:	ldr	r1, [ip]
   12b6c:	bl	12ac0 <error@@Base+0x9cc>
   12b70:	pop	{r4, pc}
   12b74:	push	{r4, lr}
   12b78:	ldr	r3, [r1, #4]
   12b7c:	bl	12ac0 <error@@Base+0x9cc>
   12b80:	pop	{r4, pc}
   12b84:	push	{r4, lr}
   12b88:	mov	r4, r0
   12b8c:	ldr	r3, [r1]
   12b90:	cmp	r3, #0
   12b94:	ldrne	r2, [r1, #4]
   12b98:	strne	r2, [r3, #4]
   12b9c:	ldreq	r3, [r1, #4]
   12ba0:	streq	r3, [r0]
   12ba4:	ldr	r3, [r1, #4]
   12ba8:	cmp	r3, #0
   12bac:	ldrne	r2, [r1]
   12bb0:	strne	r2, [r3]
   12bb4:	ldreq	r3, [r1]
   12bb8:	streq	r3, [r0, #4]
   12bbc:	mov	r3, #0
   12bc0:	str	r3, [r1, #4]
   12bc4:	str	r3, [r1]
   12bc8:	ldr	r0, [r0, #8]
   12bcc:	cmp	r0, r3
   12bd0:	beq	12be0 <error@@Base+0xaec>
   12bd4:	bl	10a28 <free@plt>
   12bd8:	mov	r3, #0
   12bdc:	str	r3, [r4, #8]
   12be0:	ldr	r3, [r4, #12]
   12be4:	sub	r3, r3, #1
   12be8:	str	r3, [r4, #12]
   12bec:	pop	{r4, pc}
   12bf0:	ldr	r3, [r0, #8]
   12bf4:	cmp	r3, #0
   12bf8:	bxne	lr
   12bfc:	ldr	r3, [r0, #12]
   12c00:	cmp	r3, #0
   12c04:	bxeq	lr
   12c08:	push	{r4, lr}
   12c0c:	mov	r4, r0
   12c10:	mov	r1, #4
   12c14:	mov	r0, r3
   12c18:	bl	12130 <error@@Base+0x3c>
   12c1c:	str	r0, [r4, #8]
   12c20:	ldr	r3, [r4]
   12c24:	cmp	r3, #0
   12c28:	popeq	{r4, pc}
   12c2c:	mov	r2, #0
   12c30:	ldr	r1, [r4, #8]
   12c34:	str	r3, [r1, r2]
   12c38:	ldr	r3, [r3, #4]
   12c3c:	add	r2, r2, #4
   12c40:	cmp	r3, #0
   12c44:	bne	12c30 <error@@Base+0xb3c>
   12c48:	pop	{r4, pc}
   12c4c:	push	{r4, r5, r6, lr}
   12c50:	mov	r5, r0
   12c54:	mov	r6, r1
   12c58:	ldr	r4, [r0]
   12c5c:	cmp	r4, #0
   12c60:	popeq	{r4, r5, r6, pc}
   12c64:	mov	r1, r4
   12c68:	mov	r0, r5
   12c6c:	bl	12b84 <error@@Base+0xa90>
   12c70:	mov	r0, r4
   12c74:	blx	r6
   12c78:	ldr	r4, [r5]
   12c7c:	cmp	r4, #0
   12c80:	bne	12c64 <error@@Base+0xb70>
   12c84:	pop	{r4, r5, r6, pc}
   12c88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12c8c:	mov	sl, r0
   12c90:	mov	r9, r1
   12c94:	ldr	r3, [pc, #300]	; 12dc8 <error@@Base+0xcd4>
   12c98:	ldr	r3, [r3]
   12c9c:	ldr	r8, [r3, r0, lsl #2]
   12ca0:	cmp	r0, r1
   12ca4:	movge	r3, r1
   12ca8:	movge	r4, r0
   12cac:	bge	12d8c <error@@Base+0xc98>
   12cb0:	mov	r4, r0
   12cb4:	mov	r3, r1
   12cb8:	ldr	r6, [pc, #264]	; 12dc8 <error@@Base+0xcd4>
   12cbc:	b	12d40 <error@@Base+0xc4c>
   12cc0:	mov	r5, r3
   12cc4:	cmp	r4, r5
   12cc8:	beq	12d84 <error@@Base+0xc90>
   12ccc:	ldr	r2, [r6]
   12cd0:	add	r3, r4, #1
   12cd4:	lsl	r7, r4, #2
   12cd8:	ldr	r1, [r2, r5, lsl #2]
   12cdc:	str	r1, [r2, r4, lsl #2]
   12ce0:	cmp	r3, r5
   12ce4:	movge	r4, r3
   12ce8:	bge	12d20 <error@@Base+0xc2c>
   12cec:	add	r7, r7, #4
   12cf0:	mov	r4, r3
   12cf4:	ldr	r2, [r6]
   12cf8:	ldr	r3, [r6, #4]
   12cfc:	ldr	r1, [r2, r7]
   12d00:	mov	r0, r8
   12d04:	blx	r3
   12d08:	cmp	r0, #0
   12d0c:	ble	12d20 <error@@Base+0xc2c>
   12d10:	add	r4, r4, #1
   12d14:	add	r7, r7, #4
   12d18:	cmp	r4, r5
   12d1c:	blt	12cf4 <error@@Base+0xc00>
   12d20:	cmp	r4, r5
   12d24:	beq	12d88 <error@@Base+0xc94>
   12d28:	ldr	r2, [r6]
   12d2c:	sub	r3, r5, #1
   12d30:	ldr	r1, [r2, r4, lsl #2]
   12d34:	str	r1, [r2, r5, lsl #2]
   12d38:	cmp	r3, r4
   12d3c:	ble	12d8c <error@@Base+0xc98>
   12d40:	cmp	r3, r4
   12d44:	ble	12cc0 <error@@Base+0xbcc>
   12d48:	lsl	r7, r3, #2
   12d4c:	mov	r5, r3
   12d50:	ldr	r2, [r6]
   12d54:	ldr	r3, [r6, #4]
   12d58:	ldr	r1, [r2, r7]
   12d5c:	mov	r0, r8
   12d60:	blx	r3
   12d64:	cmp	r0, #0
   12d68:	bge	12cc4 <error@@Base+0xbd0>
   12d6c:	sub	r5, r5, #1
   12d70:	sub	r7, r7, #4
   12d74:	cmp	r5, r4
   12d78:	bne	12d50 <error@@Base+0xc5c>
   12d7c:	mov	r4, r5
   12d80:	b	12d20 <error@@Base+0xc2c>
   12d84:	mov	r4, r5
   12d88:	mov	r3, r4
   12d8c:	ldr	r2, [pc, #52]	; 12dc8 <error@@Base+0xcd4>
   12d90:	ldr	r2, [r2]
   12d94:	str	r8, [r2, r3, lsl #2]
   12d98:	sub	r1, r3, #1
   12d9c:	cmp	sl, r1
   12da0:	blt	12dbc <error@@Base+0xcc8>
   12da4:	add	r0, r4, #1
   12da8:	cmp	r9, r0
   12dac:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   12db0:	mov	r1, r9
   12db4:	bl	12c88 <error@@Base+0xb94>
   12db8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12dbc:	mov	r0, sl
   12dc0:	bl	12c88 <error@@Base+0xb94>
   12dc4:	b	12da4 <error@@Base+0xcb0>
   12dc8:	andeq	r7, r2, r0, asr #2
   12dcc:	cmp	r0, #1
   12dd0:	bxle	lr
   12dd4:	push	{r4, lr}
   12dd8:	ldr	r3, [pc, #20]	; 12df4 <error@@Base+0xd00>
   12ddc:	str	r1, [r3]
   12de0:	str	r2, [r3, #4]
   12de4:	sub	r1, r0, #1
   12de8:	mov	r0, #0
   12dec:	bl	12c88 <error@@Base+0xb94>
   12df0:	pop	{r4, pc}
   12df4:	andeq	r7, r2, r0, asr #2
   12df8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12dfc:	mov	r7, r0
   12e00:	ldr	r6, [pc, #72]	; 12e50 <error@@Base+0xd5c>
   12e04:	ldr	r5, [pc, #72]	; 12e54 <error@@Base+0xd60>
   12e08:	add	r6, pc, r6
   12e0c:	add	r5, pc, r5
   12e10:	sub	r6, r6, r5
   12e14:	mov	r8, r1
   12e18:	mov	r9, r2
   12e1c:	bl	109cc <calloc@plt-0x20>
   12e20:	asrs	r6, r6, #2
   12e24:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e28:	mov	r4, #0
   12e2c:	add	r4, r4, #1
   12e30:	ldr	r3, [r5], #4
   12e34:	mov	r2, r9
   12e38:	mov	r1, r8
   12e3c:	mov	r0, r7
   12e40:	blx	r3
   12e44:	cmp	r6, r4
   12e48:	bne	12e2c <error@@Base+0xd38>
   12e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e50:	strdeq	r3, [r1], -r0
   12e54:	andeq	r3, r1, r8, ror #31
   12e58:	bx	lr

Disassembly of section .fini:

00012e5c <.fini>:
   12e5c:	push	{r3, lr}
   12e60:	pop	{r3, pc}
