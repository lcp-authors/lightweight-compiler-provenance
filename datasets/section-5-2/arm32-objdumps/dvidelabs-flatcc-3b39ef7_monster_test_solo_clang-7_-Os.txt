
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_solo/monster_test_solo:     file format elf32-littlearm


Disassembly of section .init:

000126ec <.init>:
   126ec:	push	{r3, lr}
   126f0:	bl	127f0 <_start@@Base+0x3c>
   126f4:	pop	{r3, pc}

Disassembly of section .plt:

000126f8 <free@plt-0x14>:
   126f8:	push	{lr}		; (str lr, [sp, #-4]!)
   126fc:	ldr	lr, [pc, #4]	; 12708 <free@plt-0x4>
   12700:	add	lr, pc, lr
   12704:	ldr	pc, [lr, #8]!
   12708:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>

0001270c <free@plt>:
   1270c:	add	ip, pc, #0, 12
   12710:	add	ip, ip, #24, 20	; 0x18000
   12714:	ldr	pc, [ip, #2296]!	; 0x8f8

00012718 <memcpy@plt>:
   12718:	add	ip, pc, #0, 12
   1271c:	add	ip, ip, #24, 20	; 0x18000
   12720:	ldr	pc, [ip, #2288]!	; 0x8f0

00012724 <memcmp@plt>:
   12724:	add	ip, pc, #0, 12
   12728:	add	ip, ip, #24, 20	; 0x18000
   1272c:	ldr	pc, [ip, #2280]!	; 0x8e8

00012730 <realloc@plt>:
   12730:	add	ip, pc, #0, 12
   12734:	add	ip, ip, #24, 20	; 0x18000
   12738:	ldr	pc, [ip, #2272]!	; 0x8e0

0001273c <malloc@plt>:
   1273c:	add	ip, pc, #0, 12
   12740:	add	ip, ip, #24, 20	; 0x18000
   12744:	ldr	pc, [ip, #2264]!	; 0x8d8

00012748 <__libc_start_main@plt>:
   12748:	add	ip, pc, #0, 12
   1274c:	add	ip, ip, #24, 20	; 0x18000
   12750:	ldr	pc, [ip, #2256]!	; 0x8d0

00012754 <__gmon_start__@plt>:
   12754:	add	ip, pc, #0, 12
   12758:	add	ip, ip, #24, 20	; 0x18000
   1275c:	ldr	pc, [ip, #2248]!	; 0x8c8

00012760 <strlen@plt>:
   12760:	add	ip, pc, #0, 12
   12764:	add	ip, ip, #24, 20	; 0x18000
   12768:	ldr	pc, [ip, #2240]!	; 0x8c0

0001276c <posix_memalign@plt>:
   1276c:	add	ip, pc, #0, 12
   12770:	add	ip, ip, #24, 20	; 0x18000
   12774:	ldr	pc, [ip, #2232]!	; 0x8b8

00012778 <memset@plt>:
   12778:	add	ip, pc, #0, 12
   1277c:	add	ip, ip, #24, 20	; 0x18000
   12780:	ldr	pc, [ip, #2224]!	; 0x8b0

00012784 <strncpy@plt>:
   12784:	add	ip, pc, #0, 12
   12788:	add	ip, ip, #24, 20	; 0x18000
   1278c:	ldr	pc, [ip, #2216]!	; 0x8a8

00012790 <memchr@plt>:
   12790:	add	ip, pc, #0, 12
   12794:	add	ip, ip, #24, 20	; 0x18000
   12798:	ldr	pc, [ip, #2208]!	; 0x8a0

0001279c <abort@plt>:
   1279c:	add	ip, pc, #0, 12
   127a0:	add	ip, ip, #24, 20	; 0x18000
   127a4:	ldr	pc, [ip, #2200]!	; 0x898

000127a8 <__assert_fail@plt>:
   127a8:	add	ip, pc, #0, 12
   127ac:	add	ip, ip, #24, 20	; 0x18000
   127b0:	ldr	pc, [ip, #2192]!	; 0x890

Disassembly of section .text:

000127b4 <_start@@Base>:
   127b4:	mov	fp, #0
   127b8:	mov	lr, #0
   127bc:	pop	{r1}		; (ldr r1, [sp], #4)
   127c0:	mov	r2, sp
   127c4:	push	{r2}		; (str r2, [sp, #-4]!)
   127c8:	push	{r0}		; (str r0, [sp, #-4]!)
   127cc:	ldr	ip, [pc, #16]	; 127e4 <_start@@Base+0x30>
   127d0:	push	{ip}		; (str ip, [sp, #-4]!)
   127d4:	ldr	r0, [pc, #12]	; 127e8 <_start@@Base+0x34>
   127d8:	ldr	r3, [pc, #12]	; 127ec <_start@@Base+0x38>
   127dc:	bl	12748 <__libc_start_main@plt>
   127e0:	bl	1279c <abort@plt>
   127e4:	andeq	r8, r1, ip, lsr #19
   127e8:	andeq	r2, r1, r4, lsr #17
   127ec:	andeq	r8, r1, ip, asr #18
   127f0:	ldr	r3, [pc, #20]	; 1280c <_start@@Base+0x58>
   127f4:	ldr	r2, [pc, #20]	; 12810 <_start@@Base+0x5c>
   127f8:	add	r3, pc, r3
   127fc:	ldr	r2, [r3, r2]
   12800:	cmp	r2, #0
   12804:	bxeq	lr
   12808:	b	12754 <__gmon_start__@plt>
   1280c:	andeq	r8, r1, r0, lsl #16
   12810:	andeq	r0, r0, r4, asr #32
   12814:	ldr	r0, [pc, #24]	; 12834 <_start@@Base+0x80>
   12818:	ldr	r3, [pc, #24]	; 12838 <_start@@Base+0x84>
   1281c:	cmp	r3, r0
   12820:	bxeq	lr
   12824:	ldr	r3, [pc, #16]	; 1283c <_start@@Base+0x88>
   12828:	cmp	r3, #0
   1282c:	bxeq	lr
   12830:	bx	r3
   12834:	andeq	fp, r2, r0, asr r0
   12838:	andeq	fp, r2, r0, asr r0
   1283c:	andeq	r0, r0, r0
   12840:	ldr	r0, [pc, #36]	; 1286c <_start@@Base+0xb8>
   12844:	ldr	r1, [pc, #36]	; 12870 <_start@@Base+0xbc>
   12848:	sub	r1, r1, r0
   1284c:	asr	r1, r1, #2
   12850:	add	r1, r1, r1, lsr #31
   12854:	asrs	r1, r1, #1
   12858:	bxeq	lr
   1285c:	ldr	r3, [pc, #16]	; 12874 <_start@@Base+0xc0>
   12860:	cmp	r3, #0
   12864:	bxeq	lr
   12868:	bx	r3
   1286c:	andeq	fp, r2, r0, asr r0
   12870:	andeq	fp, r2, r0, asr r0
   12874:	andeq	r0, r0, r0
   12878:	push	{r4, lr}
   1287c:	ldr	r4, [pc, #24]	; 1289c <_start@@Base+0xe8>
   12880:	ldrb	r3, [r4]
   12884:	cmp	r3, #0
   12888:	popne	{r4, pc}
   1288c:	bl	12814 <_start@@Base+0x60>
   12890:	mov	r3, #1
   12894:	strb	r3, [r4]
   12898:	pop	{r4, pc}
   1289c:	andeq	fp, r2, r0, asr r0
   128a0:	b	12840 <_start@@Base+0x8c>

000128a4 <main@@Base>:
   128a4:	push	{r4, r5, r6, r7, fp, lr}
   128a8:	add	fp, sp, #16
   128ac:	sub	sp, sp, #240	; 0xf0
   128b0:	add	r4, sp, #4
   128b4:	mov	r0, r4
   128b8:	bl	134b8 <flatcc_builder_init@@Base>
   128bc:	movw	r1, #35278	; 0x89ce
   128c0:	mov	r0, r4
   128c4:	mov	r2, #0
   128c8:	mov	r3, #0
   128cc:	movt	r1, #1
   128d0:	bl	13eb4 <flatcc_builder_start_buffer@@Base>
   128d4:	cmp	r0, #0
   128d8:	bne	128e8 <main@@Base+0x44>
   128dc:	add	r0, sp, #4
   128e0:	mov	r1, #36	; 0x24
   128e4:	bl	14f30 <flatcc_builder_start_table@@Base>
   128e8:	movw	r1, #35268	; 0x89c4
   128ec:	add	r0, sp, #4
   128f0:	movt	r1, #1
   128f4:	bl	16ba8 <flatcc_builder_create_string_str@@Base>
   128f8:	cmp	r0, #0
   128fc:	beq	12918 <main@@Base+0x74>
   12900:	mov	r4, r0
   12904:	add	r0, sp, #4
   12908:	mov	r1, #3
   1290c:	bl	160c4 <flatcc_builder_table_add_offset@@Base>
   12910:	cmp	r0, #0
   12914:	strne	r4, [r0]
   12918:	movw	r1, #35624	; 0x8b28
   1291c:	add	r0, sp, #4
   12920:	mov	r2, #1
   12924:	movt	r1, #1
   12928:	bl	15830 <flatcc_builder_check_required@@Base>
   1292c:	cmp	r0, #0
   12930:	beq	12988 <main@@Base+0xe4>
   12934:	add	r4, sp, #4
   12938:	mov	r0, r4
   1293c:	bl	158c0 <flatcc_builder_end_table@@Base>
   12940:	mov	r1, r0
   12944:	mov	r0, r4
   12948:	bl	140a4 <flatcc_builder_end_buffer@@Base>
   1294c:	sub	r1, fp, #20
   12950:	mov	r0, r4
   12954:	bl	16e98 <flatcc_builder_get_direct_buffer@@Base>
   12958:	ldr	r1, [fp, #-20]	; 0xffffffec
   1295c:	movw	r2, #35278	; 0x89ce
   12960:	movw	r3, #10664	; 0x29a8
   12964:	movt	r2, #1
   12968:	movt	r3, #1
   1296c:	bl	18144 <flatcc_verify_table_as_root@@Base>
   12970:	mov	r5, r0
   12974:	mov	r0, r4
   12978:	bl	13654 <flatcc_builder_clear@@Base>
   1297c:	mov	r0, r5
   12980:	sub	sp, fp, #16
   12984:	pop	{r4, r5, r6, r7, fp, pc}
   12988:	movw	r0, #35283	; 0x89d3
   1298c:	movw	r1, #35445	; 0x8a75
   12990:	movw	r3, #35541	; 0x8ad5
   12994:	movw	r2, #2398	; 0x95e
   12998:	movt	r0, #1
   1299c:	movt	r1, #1
   129a0:	movt	r3, #1
   129a4:	bl	127a8 <__assert_fail@plt>
   129a8:	push	{r4, r5, r6, r7, fp, lr}
   129ac:	add	fp, sp, #16
   129b0:	sub	sp, sp, #8
   129b4:	mov	r1, #0
   129b8:	mov	r2, #32
   129bc:	mov	r3, #16
   129c0:	mov	r4, r0
   129c4:	bl	176d4 <flatcc_verify_field@@Base>
   129c8:	cmp	r0, #0
   129cc:	bne	12dd4 <main@@Base+0x530>
   129d0:	mov	r0, r4
   129d4:	mov	r1, #2
   129d8:	mov	r2, #2
   129dc:	mov	r3, #2
   129e0:	bl	176d4 <flatcc_verify_field@@Base>
   129e4:	cmp	r0, #0
   129e8:	bne	12dd4 <main@@Base+0x530>
   129ec:	mov	r0, r4
   129f0:	mov	r1, #1
   129f4:	mov	r2, #2
   129f8:	mov	r3, #2
   129fc:	bl	176d4 <flatcc_verify_field@@Base>
   12a00:	cmp	r0, #0
   12a04:	bne	12dd4 <main@@Base+0x530>
   12a08:	mov	r0, r4
   12a0c:	mov	r1, #3
   12a10:	mov	r2, #1
   12a14:	bl	1774c <flatcc_verify_string_field@@Base>
   12a18:	cmp	r0, #0
   12a1c:	bne	12dd4 <main@@Base+0x530>
   12a20:	mov	r0, r4
   12a24:	mov	r1, #6
   12a28:	mov	r2, #1
   12a2c:	mov	r3, #1
   12a30:	mov	r5, #1
   12a34:	bl	176d4 <flatcc_verify_field@@Base>
   12a38:	cmp	r0, #0
   12a3c:	bne	12dd4 <main@@Base+0x530>
   12a40:	mvn	r0, #0
   12a44:	mov	r1, #5
   12a48:	mov	r2, #0
   12a4c:	mov	r3, #1
   12a50:	str	r5, [sp]
   12a54:	str	r0, [sp, #4]
   12a58:	mov	r0, r4
   12a5c:	bl	17854 <flatcc_verify_vector_field@@Base>
   12a60:	cmp	r0, #0
   12a64:	bne	12dd4 <main@@Base+0x530>
   12a68:	movw	r3, #10664	; 0x29a8
   12a6c:	mov	r0, r4
   12a70:	mov	r1, #11
   12a74:	mov	r2, #0
   12a78:	movt	r3, #1
   12a7c:	bl	17b48 <flatcc_verify_table_vector_field@@Base>
   12a80:	cmp	r0, #0
   12a84:	bne	12dd4 <main@@Base+0x530>
   12a88:	mov	r0, r4
   12a8c:	mov	r1, #10
   12a90:	mov	r2, #0
   12a94:	bl	178fc <flatcc_verify_string_vector_field@@Base>
   12a98:	cmp	r0, #0
   12a9c:	bne	12dd4 <main@@Base+0x530>
   12aa0:	mov	r0, r4
   12aa4:	mov	r1, #28
   12aa8:	mov	r2, #0
   12aac:	bl	178fc <flatcc_verify_string_vector_field@@Base>
   12ab0:	cmp	r0, #0
   12ab4:	bne	12dd4 <main@@Base+0x530>
   12ab8:	mvn	r0, #0
   12abc:	mov	r1, #1
   12ac0:	mov	r2, #0
   12ac4:	mov	r3, #1
   12ac8:	str	r1, [sp]
   12acc:	str	r0, [sp, #4]
   12ad0:	mov	r0, r4
   12ad4:	mov	r1, #24
   12ad8:	bl	17854 <flatcc_verify_vector_field@@Base>
   12adc:	cmp	r0, #0
   12ae0:	bne	12dd4 <main@@Base+0x530>
   12ae4:	mvn	r0, #-536870912	; 0xe0000000
   12ae8:	mov	r1, #4
   12aec:	mov	r2, #0
   12af0:	mov	r3, #8
   12af4:	str	r1, [sp]
   12af8:	str	r0, [sp, #4]
   12afc:	mov	r0, r4
   12b00:	mov	r1, #29
   12b04:	bl	17854 <flatcc_verify_vector_field@@Base>
   12b08:	cmp	r0, #0
   12b0c:	bne	12dd4 <main@@Base+0x530>
   12b10:	movw	r5, #10664	; 0x29a8
   12b14:	mov	r0, r4
   12b18:	mov	r1, #12
   12b1c:	mov	r2, #0
   12b20:	movt	r5, #1
   12b24:	mov	r3, r5
   12b28:	bl	17a44 <flatcc_verify_table_field@@Base>
   12b2c:	cmp	r0, #0
   12b30:	bne	12dd4 <main@@Base+0x530>
   12b34:	movw	r3, #11772	; 0x2dfc
   12b38:	mov	r0, r4
   12b3c:	mov	r1, #8
   12b40:	mov	r2, #0
   12b44:	movt	r3, #1
   12b48:	bl	185c0 <flatcc_verify_union_field@@Base>
   12b4c:	cmp	r0, #0
   12b50:	bne	12dd4 <main@@Base+0x530>
   12b54:	mvn	r6, #-1073741824	; 0xc0000000
   12b58:	mov	r7, #2
   12b5c:	mov	r0, r4
   12b60:	mov	r1, #9
   12b64:	mov	r2, #0
   12b68:	mov	r3, #4
   12b6c:	str	r7, [sp]
   12b70:	str	r6, [sp, #4]
   12b74:	bl	17854 <flatcc_verify_vector_field@@Base>
   12b78:	cmp	r0, #0
   12b7c:	bne	12dd4 <main@@Base+0x530>
   12b80:	mov	r0, r4
   12b84:	mov	r1, #31
   12b88:	mov	r2, #0
   12b8c:	mov	r3, #4
   12b90:	str	r7, [sp]
   12b94:	str	r6, [sp, #4]
   12b98:	bl	17854 <flatcc_verify_vector_field@@Base>
   12b9c:	cmp	r0, #0
   12ba0:	bne	12dd4 <main@@Base+0x530>
   12ba4:	mov	r0, #1
   12ba8:	mov	r1, #13
   12bac:	mov	r2, #0
   12bb0:	mov	r3, #0
   12bb4:	stm	sp, {r0, r5}
   12bb8:	mov	r0, r4
   12bbc:	bl	18410 <flatcc_verify_table_as_nested_root@@Base>
   12bc0:	cmp	r0, #0
   12bc4:	bne	12dd4 <main@@Base+0x530>
   12bc8:	movw	r3, #11816	; 0x2e28
   12bcc:	mov	r0, r4
   12bd0:	mov	r1, #14
   12bd4:	mov	r2, #0
   12bd8:	movt	r3, #1
   12bdc:	bl	17a44 <flatcc_verify_table_field@@Base>
   12be0:	cmp	r0, #0
   12be4:	bne	12dd4 <main@@Base+0x530>
   12be8:	mov	r0, r4
   12bec:	mov	r1, #15
   12bf0:	mov	r2, #1
   12bf4:	mov	r3, #1
   12bf8:	bl	176d4 <flatcc_verify_field@@Base>
   12bfc:	cmp	r0, #0
   12c00:	bne	12dd4 <main@@Base+0x530>
   12c04:	mov	r0, r4
   12c08:	mov	r1, #16
   12c0c:	mov	r2, #4
   12c10:	mov	r3, #4
   12c14:	bl	176d4 <flatcc_verify_field@@Base>
   12c18:	cmp	r0, #0
   12c1c:	bne	12dd4 <main@@Base+0x530>
   12c20:	mov	r0, r4
   12c24:	mov	r1, #17
   12c28:	mov	r2, #4
   12c2c:	mov	r3, #4
   12c30:	bl	176d4 <flatcc_verify_field@@Base>
   12c34:	cmp	r0, #0
   12c38:	bne	12dd4 <main@@Base+0x530>
   12c3c:	mov	r0, r4
   12c40:	mov	r1, #18
   12c44:	mov	r2, #8
   12c48:	mov	r3, #8
   12c4c:	bl	176d4 <flatcc_verify_field@@Base>
   12c50:	cmp	r0, #0
   12c54:	bne	12dd4 <main@@Base+0x530>
   12c58:	mov	r0, r4
   12c5c:	mov	r1, #19
   12c60:	mov	r2, #8
   12c64:	mov	r3, #8
   12c68:	bl	176d4 <flatcc_verify_field@@Base>
   12c6c:	cmp	r0, #0
   12c70:	bne	12dd4 <main@@Base+0x530>
   12c74:	mov	r0, r4
   12c78:	mov	r1, #20
   12c7c:	mov	r2, #4
   12c80:	mov	r3, #4
   12c84:	bl	176d4 <flatcc_verify_field@@Base>
   12c88:	cmp	r0, #0
   12c8c:	bne	12dd4 <main@@Base+0x530>
   12c90:	mov	r0, r4
   12c94:	mov	r1, #21
   12c98:	mov	r2, #4
   12c9c:	mov	r3, #4
   12ca0:	bl	176d4 <flatcc_verify_field@@Base>
   12ca4:	cmp	r0, #0
   12ca8:	bne	12dd4 <main@@Base+0x530>
   12cac:	mov	r0, r4
   12cb0:	mov	r1, #22
   12cb4:	mov	r2, #8
   12cb8:	mov	r3, #8
   12cbc:	bl	176d4 <flatcc_verify_field@@Base>
   12cc0:	cmp	r0, #0
   12cc4:	bne	12dd4 <main@@Base+0x530>
   12cc8:	mov	r0, r4
   12ccc:	mov	r1, #23
   12cd0:	mov	r2, #8
   12cd4:	mov	r3, #8
   12cd8:	bl	176d4 <flatcc_verify_field@@Base>
   12cdc:	cmp	r0, #0
   12ce0:	bne	12dd4 <main@@Base+0x530>
   12ce4:	mov	r0, r4
   12ce8:	mov	r1, #25
   12cec:	mov	r2, #4
   12cf0:	mov	r3, #4
   12cf4:	bl	176d4 <flatcc_verify_field@@Base>
   12cf8:	cmp	r0, #0
   12cfc:	bne	12dd4 <main@@Base+0x530>
   12d00:	mov	r0, r4
   12d04:	mov	r1, #26
   12d08:	mov	r2, #4
   12d0c:	mov	r3, #4
   12d10:	bl	176d4 <flatcc_verify_field@@Base>
   12d14:	cmp	r0, #0
   12d18:	bne	12dd4 <main@@Base+0x530>
   12d1c:	mov	r0, r4
   12d20:	mov	r1, #27
   12d24:	mov	r2, #4
   12d28:	mov	r3, #4
   12d2c:	bl	176d4 <flatcc_verify_field@@Base>
   12d30:	cmp	r0, #0
   12d34:	bne	12dd4 <main@@Base+0x530>
   12d38:	mvn	r0, #0
   12d3c:	mov	r1, #1
   12d40:	mov	r2, #0
   12d44:	mov	r3, #1
   12d48:	str	r1, [sp]
   12d4c:	str	r0, [sp, #4]
   12d50:	mov	r0, r4
   12d54:	mov	r1, #30
   12d58:	bl	17854 <flatcc_verify_vector_field@@Base>
   12d5c:	cmp	r0, #0
   12d60:	bne	12dd4 <main@@Base+0x530>
   12d64:	mvn	r5, #-536870912	; 0xe0000000
   12d68:	mov	r6, #8
   12d6c:	mov	r0, r4
   12d70:	mov	r1, #32
   12d74:	mov	r2, #0
   12d78:	mov	r3, #8
   12d7c:	str	r6, [sp]
   12d80:	str	r5, [sp, #4]
   12d84:	bl	17854 <flatcc_verify_vector_field@@Base>
   12d88:	cmp	r0, #0
   12d8c:	bne	12dd4 <main@@Base+0x530>
   12d90:	mov	r0, r4
   12d94:	mov	r1, #33	; 0x21
   12d98:	mov	r2, #0
   12d9c:	mov	r3, #8
   12da0:	str	r6, [sp]
   12da4:	str	r5, [sp, #4]
   12da8:	bl	17854 <flatcc_verify_vector_field@@Base>
   12dac:	cmp	r0, #0
   12db0:	bne	12dd4 <main@@Base+0x530>
   12db4:	movw	r3, #11904	; 0x2e80
   12db8:	mov	r0, r4
   12dbc:	mov	r1, #34	; 0x22
   12dc0:	mov	r2, #0
   12dc4:	movt	r3, #1
   12dc8:	bl	17a44 <flatcc_verify_table_field@@Base>
   12dcc:	cmp	r0, #0
   12dd0:	beq	12ddc <main@@Base+0x538>
   12dd4:	sub	sp, fp, #16
   12dd8:	pop	{r4, r5, r6, r7, fp, pc}
   12ddc:	movw	r3, #11912	; 0x2e88
   12de0:	mov	r0, r4
   12de4:	mov	r1, #35	; 0x23
   12de8:	mov	r2, #0
   12dec:	movt	r3, #1
   12df0:	sub	sp, fp, #16
   12df4:	pop	{r4, r5, r6, r7, fp, lr}
   12df8:	b	17a44 <flatcc_verify_table_field@@Base>
   12dfc:	ldrb	r1, [r0, #12]
   12e00:	sub	r1, r1, #1
   12e04:	uxtb	r2, r1
   12e08:	cmp	r2, #3
   12e0c:	movhi	r0, #0
   12e10:	bxhi	lr
   12e14:	movw	r2, #35628	; 0x8b2c
   12e18:	sxtb	r1, r1
   12e1c:	movt	r2, #1
   12e20:	ldr	r1, [r2, r1, lsl #2]
   12e24:	b	17dcc <flatcc_verify_union_table@@Base>
   12e28:	push	{r4, sl, fp, lr}
   12e2c:	add	fp, sp, #8
   12e30:	mov	r1, #0
   12e34:	mov	r2, #0
   12e38:	mov	r4, r0
   12e3c:	bl	1774c <flatcc_verify_string_field@@Base>
   12e40:	cmp	r0, #0
   12e44:	popne	{r4, sl, fp, pc}
   12e48:	mov	r0, r4
   12e4c:	mov	r1, #1
   12e50:	mov	r2, #8
   12e54:	mov	r3, #8
   12e58:	bl	176d4 <flatcc_verify_field@@Base>
   12e5c:	cmp	r0, #0
   12e60:	beq	12e68 <main@@Base+0x5c4>
   12e64:	pop	{r4, sl, fp, pc}
   12e68:	mov	r0, r4
   12e6c:	mov	r1, #2
   12e70:	mov	r2, #2
   12e74:	mov	r3, #2
   12e78:	pop	{r4, sl, fp, lr}
   12e7c:	b	176d4 <flatcc_verify_field@@Base>
   12e80:	mov	r0, #0
   12e84:	bx	lr
   12e88:	push	{r4, r5, r6, sl, fp, lr}
   12e8c:	add	fp, sp, #16
   12e90:	sub	sp, sp, #8
   12e94:	mvn	r5, #0
   12e98:	mov	r6, #1
   12e9c:	mov	r1, #0
   12ea0:	mov	r2, #0
   12ea4:	mov	r3, #1
   12ea8:	mov	r4, r0
   12eac:	str	r6, [sp]
   12eb0:	str	r5, [sp, #4]
   12eb4:	bl	17854 <flatcc_verify_vector_field@@Base>
   12eb8:	cmp	r0, #0
   12ebc:	bne	12f0c <main@@Base+0x668>
   12ec0:	mov	r0, r4
   12ec4:	mov	r1, #1
   12ec8:	mov	r2, #0
   12ecc:	mov	r3, #1
   12ed0:	str	r6, [sp]
   12ed4:	str	r5, [sp, #4]
   12ed8:	bl	17854 <flatcc_verify_vector_field@@Base>
   12edc:	cmp	r0, #0
   12ee0:	bne	12f0c <main@@Base+0x668>
   12ee4:	movw	r0, #10664	; 0x29a8
   12ee8:	mov	r1, #1
   12eec:	mov	r2, #0
   12ef0:	mov	r3, #0
   12ef4:	movt	r0, #1
   12ef8:	str	r1, [sp]
   12efc:	mov	r1, #2
   12f00:	str	r0, [sp, #4]
   12f04:	mov	r0, r4
   12f08:	bl	18410 <flatcc_verify_table_as_nested_root@@Base>
   12f0c:	sub	sp, fp, #16
   12f10:	pop	{r4, r5, r6, sl, fp, pc}
   12f14:	push	{r4, sl, fp, lr}
   12f18:	add	fp, sp, #8
   12f1c:	mov	r1, #0
   12f20:	mov	r2, #1
   12f24:	mov	r3, #1
   12f28:	mov	r4, r0
   12f2c:	bl	176d4 <flatcc_verify_field@@Base>
   12f30:	cmp	r0, #0
   12f34:	bne	12f70 <main@@Base+0x6cc>
   12f38:	mov	r0, r4
   12f3c:	mov	r1, #1
   12f40:	mov	r2, #1
   12f44:	mov	r3, #1
   12f48:	bl	176d4 <flatcc_verify_field@@Base>
   12f4c:	cmp	r0, #0
   12f50:	popne	{r4, sl, fp, pc}
   12f54:	mov	r0, r4
   12f58:	mov	r1, #2
   12f5c:	mov	r2, #1
   12f60:	mov	r3, #1
   12f64:	bl	176d4 <flatcc_verify_field@@Base>
   12f68:	cmp	r0, #0
   12f6c:	beq	12f74 <main@@Base+0x6d0>
   12f70:	pop	{r4, sl, fp, pc}
   12f74:	mov	r0, r4
   12f78:	mov	r1, #3
   12f7c:	mov	r2, #1
   12f80:	mov	r3, #1
   12f84:	pop	{r4, sl, fp, lr}
   12f88:	b	176d4 <flatcc_verify_field@@Base>
   12f8c:	mov	r0, #0
   12f90:	bx	lr
   12f94:	push	{r4, sl, fp, lr}
   12f98:	add	fp, sp, #8
   12f9c:	movw	r3, #12284	; 0x2ffc
   12fa0:	mov	r1, #0
   12fa4:	mov	r2, #0
   12fa8:	mov	r4, r0
   12fac:	movt	r3, #1
   12fb0:	bl	17a44 <flatcc_verify_table_field@@Base>
   12fb4:	cmp	r0, #0
   12fb8:	popne	{r4, sl, fp, pc}
   12fbc:	movw	r3, #12388	; 0x3064
   12fc0:	mov	r0, r4
   12fc4:	mov	r1, #1
   12fc8:	mov	r2, #0
   12fcc:	movt	r3, #1
   12fd0:	bl	17a44 <flatcc_verify_table_field@@Base>
   12fd4:	cmp	r0, #0
   12fd8:	beq	12fe0 <main@@Base+0x73c>
   12fdc:	pop	{r4, sl, fp, pc}
   12fe0:	movw	r3, #11772	; 0x2dfc
   12fe4:	mov	r0, r4
   12fe8:	mov	r1, #3
   12fec:	mov	r2, #0
   12ff0:	movt	r3, #1
   12ff4:	pop	{r4, sl, fp, lr}
   12ff8:	b	186e8 <flatcc_verify_union_vector_field@@Base>
   12ffc:	push	{r4, sl, fp, lr}
   13000:	add	fp, sp, #8
   13004:	movw	r3, #12556	; 0x310c
   13008:	mov	r1, #0
   1300c:	mov	r2, #0
   13010:	mov	r4, r0
   13014:	movt	r3, #1
   13018:	bl	17a44 <flatcc_verify_table_field@@Base>
   1301c:	cmp	r0, #0
   13020:	popne	{r4, sl, fp, pc}
   13024:	movw	r3, #12804	; 0x3204
   13028:	mov	r0, r4
   1302c:	mov	r1, #1
   13030:	mov	r2, #0
   13034:	movt	r3, #1
   13038:	bl	17a44 <flatcc_verify_table_field@@Base>
   1303c:	cmp	r0, #0
   13040:	beq	13048 <main@@Base+0x7a4>
   13044:	pop	{r4, sl, fp, pc}
   13048:	movw	r3, #12864	; 0x3240
   1304c:	mov	r0, r4
   13050:	mov	r1, #2
   13054:	mov	r2, #0
   13058:	movt	r3, #1
   1305c:	pop	{r4, sl, fp, lr}
   13060:	b	17a44 <flatcc_verify_table_field@@Base>
   13064:	push	{r4, sl, fp, lr}
   13068:	add	fp, sp, #8
   1306c:	movw	r3, #12924	; 0x327c
   13070:	mov	r1, #1
   13074:	mov	r2, #0
   13078:	mov	r4, r0
   1307c:	movt	r3, #1
   13080:	bl	185c0 <flatcc_verify_union_field@@Base>
   13084:	cmp	r0, #0
   13088:	bne	130ec <main@@Base+0x848>
   1308c:	movw	r3, #12924	; 0x327c
   13090:	mov	r0, r4
   13094:	mov	r1, #3
   13098:	mov	r2, #0
   1309c:	movt	r3, #1
   130a0:	bl	185c0 <flatcc_verify_union_field@@Base>
   130a4:	cmp	r0, #0
   130a8:	bne	130ec <main@@Base+0x848>
   130ac:	movw	r3, #12924	; 0x327c
   130b0:	mov	r0, r4
   130b4:	mov	r1, #5
   130b8:	mov	r2, #0
   130bc:	movt	r3, #1
   130c0:	bl	185c0 <flatcc_verify_union_field@@Base>
   130c4:	cmp	r0, #0
   130c8:	popne	{r4, sl, fp, pc}
   130cc:	movw	r3, #12924	; 0x327c
   130d0:	mov	r0, r4
   130d4:	mov	r1, #7
   130d8:	mov	r2, #0
   130dc:	movt	r3, #1
   130e0:	bl	185c0 <flatcc_verify_union_field@@Base>
   130e4:	cmp	r0, #0
   130e8:	beq	130f0 <main@@Base+0x84c>
   130ec:	pop	{r4, sl, fp, pc}
   130f0:	movw	r3, #12924	; 0x327c
   130f4:	mov	r0, r4
   130f8:	mov	r1, #9
   130fc:	mov	r2, #0
   13100:	movt	r3, #1
   13104:	pop	{r4, sl, fp, lr}
   13108:	b	186e8 <flatcc_verify_union_vector_field@@Base>
   1310c:	push	{r4, sl, fp, lr}
   13110:	add	fp, sp, #8
   13114:	mov	r1, #0
   13118:	mov	r2, #0
   1311c:	mov	r4, r0
   13120:	bl	1774c <flatcc_verify_string_field@@Base>
   13124:	cmp	r0, #0
   13128:	bne	131e8 <main@@Base+0x944>
   1312c:	mov	r0, r4
   13130:	mov	r1, #1
   13134:	mov	r2, #4
   13138:	mov	r3, #4
   1313c:	bl	176d4 <flatcc_verify_field@@Base>
   13140:	cmp	r0, #0
   13144:	bne	131e8 <main@@Base+0x944>
   13148:	mov	r0, r4
   1314c:	mov	r1, #2
   13150:	mov	r2, #0
   13154:	bl	1774c <flatcc_verify_string_field@@Base>
   13158:	cmp	r0, #0
   1315c:	bne	131e8 <main@@Base+0x944>
   13160:	mov	r0, r4
   13164:	mov	r1, #3
   13168:	mov	r2, #8
   1316c:	mov	r3, #8
   13170:	bl	176d4 <flatcc_verify_field@@Base>
   13174:	cmp	r0, #0
   13178:	bne	131e8 <main@@Base+0x944>
   1317c:	mov	r0, r4
   13180:	mov	r1, #4
   13184:	mov	r2, #0
   13188:	bl	1774c <flatcc_verify_string_field@@Base>
   1318c:	cmp	r0, #0
   13190:	bne	131e8 <main@@Base+0x944>
   13194:	mov	r0, r4
   13198:	mov	r1, #5
   1319c:	mov	r2, #8
   131a0:	mov	r3, #8
   131a4:	bl	176d4 <flatcc_verify_field@@Base>
   131a8:	cmp	r0, #0
   131ac:	bne	131e8 <main@@Base+0x944>
   131b0:	mov	r0, r4
   131b4:	mov	r1, #6
   131b8:	mov	r2, #4
   131bc:	mov	r3, #4
   131c0:	bl	176d4 <flatcc_verify_field@@Base>
   131c4:	cmp	r0, #0
   131c8:	popne	{r4, sl, fp, pc}
   131cc:	mov	r0, r4
   131d0:	mov	r1, #7
   131d4:	mov	r2, #8
   131d8:	mov	r3, #8
   131dc:	bl	176d4 <flatcc_verify_field@@Base>
   131e0:	cmp	r0, #0
   131e4:	beq	131ec <main@@Base+0x948>
   131e8:	pop	{r4, sl, fp, pc}
   131ec:	mov	r0, r4
   131f0:	mov	r1, #8
   131f4:	mov	r2, #4
   131f8:	mov	r3, #4
   131fc:	pop	{r4, sl, fp, lr}
   13200:	b	176d4 <flatcc_verify_field@@Base>
   13204:	push	{r4, sl, fp, lr}
   13208:	add	fp, sp, #8
   1320c:	mov	r1, #0
   13210:	mov	r2, #8
   13214:	mov	r3, #8
   13218:	mov	r4, r0
   1321c:	bl	176d4 <flatcc_verify_field@@Base>
   13220:	cmp	r0, #0
   13224:	popne	{r4, sl, fp, pc}
   13228:	mov	r0, r4
   1322c:	mov	r1, #1
   13230:	mov	r2, #4
   13234:	mov	r3, #4
   13238:	pop	{r4, sl, fp, lr}
   1323c:	b	176d4 <flatcc_verify_field@@Base>
   13240:	push	{r4, sl, fp, lr}
   13244:	add	fp, sp, #8
   13248:	mov	r1, #0
   1324c:	mov	r2, #8
   13250:	mov	r3, #8
   13254:	mov	r4, r0
   13258:	bl	176d4 <flatcc_verify_field@@Base>
   1325c:	cmp	r0, #0
   13260:	popne	{r4, sl, fp, pc}
   13264:	mov	r0, r4
   13268:	mov	r1, #1
   1326c:	mov	r2, #4
   13270:	mov	r3, #4
   13274:	pop	{r4, sl, fp, lr}
   13278:	b	176d4 <flatcc_verify_field@@Base>
   1327c:	ldrb	r2, [r0, #12]
   13280:	sub	r1, r2, #2
   13284:	cmp	r1, #9
   13288:	bhi	132c8 <main@@Base+0xa24>
   1328c:	add	r2, pc, #0
   13290:	ldr	pc, [r2, r1, lsl #2]
   13294:	ldrdeq	r3, [r1], -ip
   13298:	ldrdeq	r3, [r1], -r4
   1329c:	ldrdeq	r3, [r1], -r4
   132a0:	ldrdeq	r3, [r1], -r4
   132a4:	ldrdeq	r3, [r1], -r4
   132a8:	ldrdeq	r3, [r1], -r4
   132ac:	andeq	r3, r1, r8, ror #5
   132b0:			; <UNDEFINED> instruction: 0x000132bc
   132b4:			; <UNDEFINED> instruction: 0x000132bc
   132b8:	ldrdeq	r3, [r1], -r0
   132bc:	mov	r1, #4
   132c0:	mov	r2, #4
   132c4:	b	17eb4 <flatcc_verify_union_struct@@Base>
   132c8:	cmp	r2, #255	; 0xff
   132cc:	bne	132d4 <main@@Base+0xa30>
   132d0:	b	17f0c <flatcc_verify_union_string@@Base>
   132d4:	mov	r0, #0
   132d8:	bx	lr
   132dc:	movw	r1, #13044	; 0x32f4
   132e0:	movt	r1, #1
   132e4:	b	17dcc <flatcc_verify_union_table@@Base>
   132e8:	mov	r1, #2
   132ec:	mov	r2, #2
   132f0:	b	17eb4 <flatcc_verify_union_struct@@Base>
   132f4:	mov	r1, #0
   132f8:	mov	r2, #4
   132fc:	mov	r3, #4
   13300:	b	176d4 <flatcc_verify_field@@Base>

00013304 <flatcc_builder_default_alloc@@Base>:
   13304:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13308:	add	fp, sp, #24
   1330c:	mov	r4, r1
   13310:	cmp	r2, #0
   13314:	beq	1335c <flatcc_builder_default_alloc@@Base+0x58>
   13318:	ldr	r0, [fp, #8]
   1331c:	mov	r8, r3
   13320:	sub	r1, r0, #1
   13324:	cmp	r1, #6
   13328:	bhi	13384 <flatcc_builder_default_alloc@@Base+0x80>
   1332c:	add	r3, pc, #4
   13330:	mov	r0, #256	; 0x100
   13334:	ldr	pc, [r3, r1, lsl #2]
   13338:	muleq	r1, r8, r3
   1333c:	andeq	r3, r1, r4, lsl #7
   13340:	andeq	r3, r1, r4, lsl #7
   13344:	andeq	r3, r1, r4, asr r3
   13348:	andeq	r3, r1, ip, lsl #7
   1334c:	andeq	r3, r1, r4, lsl #7
   13350:	muleq	r1, r4, r3
   13354:	mov	r0, #288	; 0x120
   13358:	b	13398 <flatcc_builder_default_alloc@@Base+0x94>
   1335c:	ldr	r0, [r4]
   13360:	cmp	r0, #0
   13364:	beq	1337c <flatcc_builder_default_alloc@@Base+0x78>
   13368:	bl	1270c <free@plt>
   1336c:	mov	r6, #0
   13370:	str	r6, [r4]
   13374:	str	r6, [r4, #4]
   13378:	b	133f4 <flatcc_builder_default_alloc@@Base+0xf0>
   1337c:	mov	r6, #0
   13380:	b	133f4 <flatcc_builder_default_alloc@@Base+0xf0>
   13384:	mov	r0, #32
   13388:	b	13398 <flatcc_builder_default_alloc@@Base+0x94>
   1338c:	mov	r0, r2
   13390:	b	13398 <flatcc_builder_default_alloc@@Base+0x94>
   13394:	mov	r0, #64	; 0x40
   13398:	mov	r7, r0
   1339c:	lsl	r0, r0, #1
   133a0:	cmp	r7, r2
   133a4:	bcc	13398 <flatcc_builder_default_alloc@@Base+0x94>
   133a8:	ldr	r0, [r4, #4]
   133ac:	mov	r6, #0
   133b0:	cmp	r0, r2
   133b4:	lsrcs	r0, r0, #1
   133b8:	cmpcs	r0, r7
   133bc:	bcs	133f4 <flatcc_builder_default_alloc@@Base+0xf0>
   133c0:	ldr	r0, [r4]
   133c4:	mov	r1, r7
   133c8:	bl	12730 <realloc@plt>
   133cc:	cmp	r0, #0
   133d0:	beq	133f0 <flatcc_builder_default_alloc@@Base+0xec>
   133d4:	cmp	r8, #0
   133d8:	mov	r5, r0
   133dc:	ldrne	r1, [r4, #4]
   133e0:	cmpne	r7, r1
   133e4:	bhi	133fc <flatcc_builder_default_alloc@@Base+0xf8>
   133e8:	stm	r4, {r5, r7}
   133ec:	b	133f4 <flatcc_builder_default_alloc@@Base+0xf0>
   133f0:	mvn	r6, #0
   133f4:	mov	r0, r6
   133f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   133fc:	add	r0, r5, r1
   13400:	sub	r2, r7, r1
   13404:	mov	r1, #0
   13408:	bl	12778 <memset@plt>
   1340c:	b	133e8 <flatcc_builder_default_alloc@@Base+0xe4>

00013410 <flatcc_builder_flush_vtable_cache@@Base>:
   13410:	push	{r4, r5, fp, lr}
   13414:	add	fp, sp, #8
   13418:	mov	r4, r0
   1341c:	ldr	r0, [r0, #116]	; 0x74
   13420:	cmp	r0, #0
   13424:	popeq	{r4, r5, fp, pc}
   13428:	ldr	r0, [r4, #92]	; 0x5c
   1342c:	ldr	r2, [r4, #96]	; 0x60
   13430:	mov	r1, #0
   13434:	mov	r5, #0
   13438:	bl	12778 <memset@plt>
   1343c:	mov	r0, #16
   13440:	str	r5, [r4, #120]	; 0x78
   13444:	str	r0, [r4, #124]	; 0x7c
   13448:	pop	{r4, r5, fp, pc}

0001344c <flatcc_builder_custom_init@@Base>:
   1344c:	push	{r4, r5, r6, r7, fp, lr}
   13450:	add	fp, sp, #16
   13454:	mov	r6, r2
   13458:	mov	r7, r1
   1345c:	mov	r1, #0
   13460:	mov	r2, #232	; 0xe8
   13464:	mov	r5, r3
   13468:	mov	r4, r0
   1346c:	bl	12778 <memset@plt>
   13470:	ldr	r0, [fp, #8]
   13474:	cmp	r7, #0
   13478:	bne	13490 <flatcc_builder_custom_init@@Base+0x44>
   1347c:	movw	r7, #29380	; 0x72c4
   13480:	mov	r1, #1
   13484:	add	r6, r4, #188	; 0xbc
   13488:	movt	r7, #1
   1348c:	str	r1, [r4, #184]	; 0xb8
   13490:	movw	r1, #13060	; 0x3304
   13494:	cmp	r5, #0
   13498:	str	r6, [r4, #36]	; 0x24
   1349c:	str	r0, [r4, #40]	; 0x28
   134a0:	mov	r0, #0
   134a4:	str	r7, [r4, #44]	; 0x2c
   134a8:	movt	r1, #1
   134ac:	movne	r1, r5
   134b0:	str	r1, [r4, #48]	; 0x30
   134b4:	pop	{r4, r5, r6, r7, fp, pc}

000134b8 <flatcc_builder_init@@Base>:
   134b8:	push	{r4, r5, fp, lr}
   134bc:	add	fp, sp, #8
   134c0:	mov	r1, #0
   134c4:	mov	r2, #232	; 0xe8
   134c8:	mov	r4, r0
   134cc:	mov	r5, #0
   134d0:	bl	12778 <memset@plt>
   134d4:	mov	r0, #1
   134d8:	movw	r2, #29380	; 0x72c4
   134dc:	add	r1, r4, #188	; 0xbc
   134e0:	str	r0, [r4, #184]	; 0xb8
   134e4:	movw	r0, #13060	; 0x3304
   134e8:	movt	r2, #1
   134ec:	str	r1, [r4, #36]	; 0x24
   134f0:	str	r5, [r4, #40]	; 0x28
   134f4:	movt	r0, #1
   134f8:	str	r2, [r4, #44]	; 0x2c
   134fc:	str	r0, [r4, #48]	; 0x30
   13500:	mov	r0, #0
   13504:	pop	{r4, r5, fp, pc}

00013508 <flatcc_builder_custom_reset@@Base>:
   13508:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1350c:	add	fp, sp, #24
   13510:	sub	sp, sp, #8
   13514:	mov	r9, r2
   13518:	mov	r8, r1
   1351c:	mov	r4, r0
   13520:	add	r7, r0, #52	; 0x34
   13524:	mov	r5, #0
   13528:	ldr	r0, [r7]
   1352c:	cmp	r0, #0
   13530:	beq	13578 <flatcc_builder_custom_reset@@Base+0x70>
   13534:	cmp	r9, #0
   13538:	cmpne	r5, #5
   1353c:	beq	13568 <flatcc_builder_custom_reset@@Base+0x60>
   13540:	ldr	r0, [r4, #40]	; 0x28
   13544:	ldr	r6, [r4, #48]	; 0x30
   13548:	mov	r1, r7
   1354c:	mov	r2, #1
   13550:	mov	r3, #1
   13554:	str	r5, [sp]
   13558:	blx	r6
   1355c:	cmp	r0, #0
   13560:	bne	13618 <flatcc_builder_custom_reset@@Base+0x110>
   13564:	ldr	r0, [r7]
   13568:	ldr	r2, [r7, #4]
   1356c:	mov	r1, #0
   13570:	bl	12778 <memset@plt>
   13574:	b	13584 <flatcc_builder_custom_reset@@Base+0x7c>
   13578:	ldr	r0, [r7, #4]
   1357c:	cmp	r0, #0
   13580:	bne	13628 <flatcc_builder_custom_reset@@Base+0x120>
   13584:	add	r5, r5, #1
   13588:	add	r7, r7, #8
   1358c:	cmp	r5, #8
   13590:	bcc	13528 <flatcc_builder_custom_reset@@Base+0x20>
   13594:	mov	r0, #0
   13598:	vmov.i32	q8, #0	; 0x00000000
   1359c:	mov	r5, #0
   135a0:	str	r0, [r4, #120]	; 0x78
   135a4:	ldr	r1, [r4, #124]	; 0x7c
   135a8:	cmp	r1, #0
   135ac:	movne	r1, #16
   135b0:	strne	r1, [r4, #124]	; 0x7c
   135b4:	add	r1, r4, #148	; 0x94
   135b8:	strh	r0, [r4, #128]	; 0x80
   135bc:	str	r0, [r4, #136]	; 0x88
   135c0:	str	r0, [r4, #140]	; 0x8c
   135c4:	str	r0, [r4, #32]
   135c8:	cmp	r8, #0
   135cc:	vst1.32	{d16-d17}, [r1]
   135d0:	ldr	r2, [r4, #60]	; 0x3c
   135d4:	ldr	r1, [r4, #52]	; 0x34
   135d8:	ldr	r3, [r4, #76]	; 0x4c
   135dc:	str	r2, [r4, #16]
   135e0:	str	r0, [r4, #20]
   135e4:	str	r0, [r4, #24]
   135e8:	movne	r0, #0
   135ec:	str	r3, [r4]
   135f0:	str	r1, [r4, #4]
   135f4:	strne	r0, [r4, #172]	; 0xac
   135f8:	strne	r0, [r4, #176]	; 0xb0
   135fc:	strne	r0, [r4, #180]	; 0xb4
   13600:	ldr	r0, [r4, #184]	; 0xb8
   13604:	cmp	r0, #0
   13608:	beq	1361c <flatcc_builder_custom_reset@@Base+0x114>
   1360c:	add	r0, r4, #188	; 0xbc
   13610:	bl	17194 <flatcc_emitter_reset@@Base>
   13614:	b	1361c <flatcc_builder_custom_reset@@Base+0x114>
   13618:	mvn	r5, #0
   1361c:	mov	r0, r5
   13620:	sub	sp, fp, #24
   13624:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13628:	movw	r0, #36156	; 0x8d3c
   1362c:	movw	r1, #36174	; 0x8d4e
   13630:	movw	r3, #36244	; 0x8d94
   13634:	movw	r2, #434	; 0x1b2
   13638:	movt	r0, #1
   1363c:	movt	r1, #1
   13640:	movt	r3, #1
   13644:	bl	127a8 <__assert_fail@plt>

00013648 <flatcc_builder_reset@@Base>:
   13648:	mov	r1, #0
   1364c:	mov	r2, #0
   13650:	b	13508 <flatcc_builder_custom_reset@@Base>

00013654 <flatcc_builder_clear@@Base>:
   13654:	push	{r4, r5, r6, r7, fp, lr}
   13658:	add	fp, sp, #16
   1365c:	sub	sp, sp, #8
   13660:	mov	r7, r0
   13664:	add	r5, r0, #52	; 0x34
   13668:	mov	r6, #0
   1366c:	ldr	r0, [r7, #40]	; 0x28
   13670:	ldr	r4, [r7, #48]	; 0x30
   13674:	mov	r1, r5
   13678:	mov	r2, #0
   1367c:	mov	r3, #0
   13680:	str	r6, [sp]
   13684:	blx	r4
   13688:	add	r6, r6, #1
   1368c:	add	r5, r5, #8
   13690:	cmp	r6, #8
   13694:	bne	1366c <flatcc_builder_clear@@Base+0x18>
   13698:	ldr	r0, [r7, #184]	; 0xb8
   1369c:	cmp	r0, #0
   136a0:	beq	136ac <flatcc_builder_clear@@Base+0x58>
   136a4:	add	r0, r7, #188	; 0xbc
   136a8:	bl	17260 <flatcc_emitter_clear@@Base>
   136ac:	mov	r0, r7
   136b0:	mov	r1, #0
   136b4:	mov	r2, #232	; 0xe8
   136b8:	sub	sp, fp, #16
   136bc:	pop	{r4, r5, r6, r7, fp, lr}
   136c0:	b	12778 <memset@plt>

000136c4 <flatcc_builder_enter_user_frame_ptr@@Base>:
   136c4:	push	{r4, r5, r6, r7, fp, lr}
   136c8:	add	fp, sp, #16
   136cc:	sub	sp, sp, #8
   136d0:	mov	r4, r0
   136d4:	ldr	r0, [r0, #112]	; 0x70
   136d8:	add	r1, r1, #7
   136dc:	ldr	r7, [r4, #228]	; 0xe4
   136e0:	bic	r5, r1, #3
   136e4:	add	r6, r4, #108	; 0x6c
   136e8:	add	r2, r7, r5
   136ec:	cmp	r2, r0
   136f0:	bls	13718 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   136f4:	ldr	r0, [r4, #40]	; 0x28
   136f8:	ldr	ip, [r4, #48]	; 0x30
   136fc:	mov	r1, #7
   13700:	mov	r3, #0
   13704:	str	r1, [sp]
   13708:	mov	r1, r6
   1370c:	blx	ip
   13710:	cmp	r0, #0
   13714:	bne	13764 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
   13718:	ldr	r0, [r6]
   1371c:	adds	r6, r0, r7
   13720:	beq	13754 <flatcc_builder_enter_user_frame_ptr@@Base+0x90>
   13724:	mov	r0, r6
   13728:	mov	r1, #0
   1372c:	mov	r2, r5
   13730:	bl	12778 <memset@plt>
   13734:	ldr	r0, [r4, #224]	; 0xe0
   13738:	str	r0, [r6], #4
   1373c:	ldr	r0, [r4, #228]	; 0xe4
   13740:	add	r1, r0, #4
   13744:	add	r0, r0, r5
   13748:	str	r1, [r4, #224]	; 0xe0
   1374c:	str	r0, [r4, #228]	; 0xe4
   13750:	b	13758 <flatcc_builder_enter_user_frame_ptr@@Base+0x94>
   13754:	mov	r6, #0
   13758:	mov	r0, r6
   1375c:	sub	sp, fp, #16
   13760:	pop	{r4, r5, r6, r7, fp, pc}
   13764:	movw	r0, #40692	; 0x9ef4
   13768:	movw	r1, #36174	; 0x8d4e
   1376c:	movw	r3, #40238	; 0x9d2e
   13770:	mov	r2, #308	; 0x134
   13774:	movt	r0, #1
   13778:	movt	r1, #1
   1377c:	movt	r3, #1
   13780:	bl	127a8 <__assert_fail@plt>

00013784 <flatcc_builder_enter_user_frame@@Base>:
   13784:	push	{r4, r5, r6, r7, fp, lr}
   13788:	add	fp, sp, #16
   1378c:	sub	sp, sp, #8
   13790:	mov	r4, r0
   13794:	ldr	r0, [r0, #112]	; 0x70
   13798:	add	r1, r1, #7
   1379c:	ldr	r7, [r4, #228]	; 0xe4
   137a0:	bic	r5, r1, #3
   137a4:	add	r6, r4, #108	; 0x6c
   137a8:	add	r2, r7, r5
   137ac:	cmp	r2, r0
   137b0:	bls	137d8 <flatcc_builder_enter_user_frame@@Base+0x54>
   137b4:	ldr	r0, [r4, #40]	; 0x28
   137b8:	ldr	ip, [r4, #48]	; 0x30
   137bc:	mov	r1, #7
   137c0:	mov	r3, #0
   137c4:	str	r1, [sp]
   137c8:	mov	r1, r6
   137cc:	blx	ip
   137d0:	cmp	r0, #0
   137d4:	bne	13820 <flatcc_builder_enter_user_frame@@Base+0x9c>
   137d8:	ldr	r0, [r6]
   137dc:	adds	r6, r0, r7
   137e0:	beq	13814 <flatcc_builder_enter_user_frame@@Base+0x90>
   137e4:	mov	r0, r6
   137e8:	mov	r1, #0
   137ec:	mov	r2, r5
   137f0:	bl	12778 <memset@plt>
   137f4:	ldr	r0, [r4, #224]	; 0xe0
   137f8:	str	r0, [r6]
   137fc:	ldr	r1, [r4, #228]	; 0xe4
   13800:	add	r0, r1, #4
   13804:	add	r1, r1, r5
   13808:	str	r0, [r4, #224]	; 0xe0
   1380c:	str	r1, [r4, #228]	; 0xe4
   13810:	b	13818 <flatcc_builder_enter_user_frame@@Base+0x94>
   13814:	mov	r0, #0
   13818:	sub	sp, fp, #16
   1381c:	pop	{r4, r5, r6, r7, fp, pc}
   13820:	movw	r0, #40692	; 0x9ef4
   13824:	movw	r1, #36174	; 0x8d4e
   13828:	movw	r3, #40238	; 0x9d2e
   1382c:	mov	r2, #308	; 0x134
   13830:	movt	r0, #1
   13834:	movt	r1, #1
   13838:	movt	r3, #1
   1383c:	bl	127a8 <__assert_fail@plt>

00013840 <flatcc_builder_exit_user_frame@@Base>:
   13840:	ldr	r1, [r0, #224]	; 0xe0
   13844:	cmp	r1, #0
   13848:	subne	r2, r1, #4
   1384c:	strne	r2, [r0, #228]	; 0xe4
   13850:	ldrne	r2, [r0, #108]	; 0x6c
   13854:	addne	r1, r2, r1
   13858:	ldrne	r1, [r1, #-4]
   1385c:	strne	r1, [r0, #224]	; 0xe0
   13860:	movne	r0, r1
   13864:	bxne	lr
   13868:	push	{fp, lr}
   1386c:	mov	fp, sp
   13870:	movw	r0, #36306	; 0x8dd2
   13874:	movw	r1, #36174	; 0x8d4e
   13878:	movw	r3, #36331	; 0x8deb
   1387c:	movw	r2, #542	; 0x21e
   13880:	movt	r0, #1
   13884:	movt	r1, #1
   13888:	movt	r3, #1
   1388c:	bl	127a8 <__assert_fail@plt>

00013890 <flatcc_builder_exit_user_frame_at@@Base>:
   13890:	ldr	r2, [r0, #224]	; 0xe0
   13894:	cmp	r2, r1
   13898:	bcc	138a4 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   1389c:	str	r1, [r0, #224]	; 0xe0
   138a0:	b	13840 <flatcc_builder_exit_user_frame@@Base>
   138a4:	push	{fp, lr}
   138a8:	mov	fp, sp
   138ac:	movw	r0, #36389	; 0x8e25
   138b0:	movw	r1, #36174	; 0x8d4e
   138b4:	movw	r3, #36420	; 0x8e44
   138b8:	movw	r2, #551	; 0x227
   138bc:	movt	r0, #1
   138c0:	movt	r1, #1
   138c4:	movt	r3, #1
   138c8:	bl	127a8 <__assert_fail@plt>

000138cc <flatcc_builder_get_current_user_frame@@Base>:
   138cc:	ldr	r0, [r0, #224]	; 0xe0
   138d0:	bx	lr

000138d4 <flatcc_builder_get_user_frame_ptr@@Base>:
   138d4:	ldr	r0, [r0, #108]	; 0x6c
   138d8:	add	r0, r0, r1
   138dc:	bx	lr

000138e0 <flatcc_builder_embed_buffer@@Base>:
   138e0:	push	{r4, r5, r6, r7, fp, lr}
   138e4:	add	fp, sp, #16
   138e8:	sub	sp, sp, #88	; 0x58
   138ec:	mov	r4, r0
   138f0:	ldr	r0, [fp, #8]
   138f4:	mov	r5, r3
   138f8:	mov	r7, r2
   138fc:	mov	r2, r1
   13900:	sub	r1, fp, #18
   13904:	strh	r0, [fp, #-18]	; 0xffffffee
   13908:	mov	r0, r4
   1390c:	ldr	r3, [r4, #152]	; 0x98
   13910:	cmp	r3, #0
   13914:	movwne	r3, #1
   13918:	bl	13a50 <flatcc_builder_embed_buffer@@Base+0x170>
   1391c:	ldr	r1, [fp, #12]
   13920:	ldrh	r3, [fp, #-18]	; 0xffffffee
   13924:	ldr	r0, [r4, #136]	; 0x88
   13928:	mov	r2, #0
   1392c:	str	r2, [sp, #8]
   13930:	str	r2, [sp, #12]
   13934:	and	r1, r1, #2
   13938:	sub	r3, r3, #1
   1393c:	add	r1, r5, r1, lsl #1
   13940:	sub	r1, r0, r1
   13944:	and	r3, r1, r3
   13948:	add	r1, r3, r5
   1394c:	str	r1, [fp, #-24]	; 0xffffffe8
   13950:	ldr	r1, [r4, #152]	; 0x98
   13954:	cmp	r1, #0
   13958:	mov	r1, #0
   1395c:	beq	1397c <flatcc_builder_embed_buffer@@Base+0x9c>
   13960:	sub	r1, fp, #24
   13964:	mov	r2, #1
   13968:	str	r1, [sp, #16]
   1396c:	mov	r1, #4
   13970:	str	r1, [sp, #8]
   13974:	str	r1, [sp, #20]
   13978:	str	r2, [sp, #12]
   1397c:	cmp	r5, #0
   13980:	beq	139a4 <flatcc_builder_embed_buffer@@Base+0xc4>
   13984:	add	r6, sp, #8
   13988:	add	r1, r1, r5
   1398c:	add	r6, r6, r2, lsl #3
   13990:	add	r2, r2, #1
   13994:	str	r1, [sp, #8]
   13998:	str	r7, [r6, #8]
   1399c:	str	r5, [r6, #12]
   139a0:	str	r2, [sp, #12]
   139a4:	cmp	r3, #0
   139a8:	beq	139d4 <flatcc_builder_embed_buffer@@Base+0xf4>
   139ac:	add	r7, sp, #8
   139b0:	movw	r6, #35644	; 0x8b3c
   139b4:	add	r1, r1, r3
   139b8:	add	r7, r7, r2, lsl #3
   139bc:	add	r2, r2, #1
   139c0:	movt	r6, #1
   139c4:	str	r1, [sp, #8]
   139c8:	str	r6, [r7, #8]
   139cc:	str	r3, [r7, #12]
   139d0:	str	r2, [sp, #12]
   139d4:	cmp	r1, #0
   139d8:	ble	13a30 <flatcc_builder_embed_buffer@@Base+0x150>
   139dc:	sub	r5, r0, r1
   139e0:	ldr	r0, [r4, #36]	; 0x24
   139e4:	ldr	r7, [r4, #44]	; 0x2c
   139e8:	str	r1, [sp]
   139ec:	add	r1, sp, #8
   139f0:	add	r1, r1, #8
   139f4:	mov	r3, r5
   139f8:	blx	r7
   139fc:	cmp	r0, #0
   13a00:	streq	r5, [r4, #136]	; 0x88
   13a04:	moveq	r0, r5
   13a08:	subeq	sp, fp, #16
   13a0c:	popeq	{r4, r5, r6, r7, fp, pc}
   13a10:	movw	r0, #40692	; 0x9ef4
   13a14:	movw	r1, #36174	; 0x8d4e
   13a18:	movw	r3, #40371	; 0x9db3
   13a1c:	movw	r2, #651	; 0x28b
   13a20:	movt	r0, #1
   13a24:	movt	r1, #1
   13a28:	movt	r3, #1
   13a2c:	bl	127a8 <__assert_fail@plt>
   13a30:	movw	r0, #40692	; 0x9ef4
   13a34:	movw	r1, #36174	; 0x8d4e
   13a38:	movw	r3, #40371	; 0x9db3
   13a3c:	movw	r2, #647	; 0x287
   13a40:	movt	r0, #1
   13a44:	movt	r1, #1
   13a48:	movt	r3, #1
   13a4c:	bl	127a8 <__assert_fail@plt>
   13a50:	push	{r4, sl, fp, lr}
   13a54:	add	fp, sp, #8
   13a58:	sub	sp, sp, #80	; 0x50
   13a5c:	cmp	r2, #0
   13a60:	bne	13a70 <flatcc_builder_embed_buffer@@Base+0x190>
   13a64:	ldrh	r2, [r0, #132]	; 0x84
   13a68:	cmp	r2, #0
   13a6c:	movweq	r2, #1
   13a70:	ldrh	r4, [r1]
   13a74:	cmp	r4, #4
   13a78:	movwcc	r4, #4
   13a7c:	cmpcs	r4, r2
   13a80:	bcs	13a90 <flatcc_builder_embed_buffer@@Base+0x1b0>
   13a84:	cmp	r4, r2
   13a88:	movcc	r4, r2
   13a8c:	strh	r4, [r1]
   13a90:	cmp	r3, #0
   13a94:	bne	13b08 <flatcc_builder_embed_buffer@@Base+0x228>
   13a98:	ldr	r4, [r0, #140]	; 0x8c
   13a9c:	sub	r1, r2, #1
   13aa0:	ands	r1, r4, r1
   13aa4:	beq	13b08 <flatcc_builder_embed_buffer@@Base+0x228>
   13aa8:	movw	r2, #35644	; 0x8b3c
   13aac:	cmn	r1, #1
   13ab0:	movt	r2, #1
   13ab4:	str	r2, [sp, #16]
   13ab8:	mov	r2, #1
   13abc:	str	r1, [sp, #8]
   13ac0:	str	r1, [sp, #20]
   13ac4:	str	r2, [sp, #12]
   13ac8:	add	r2, r1, r4
   13acc:	str	r2, [r0, #140]	; 0x8c
   13ad0:	ble	13b10 <flatcc_builder_embed_buffer@@Base+0x230>
   13ad4:	ldr	r2, [r0, #36]	; 0x24
   13ad8:	ldr	ip, [r0, #44]	; 0x2c
   13adc:	add	r0, sp, #8
   13ae0:	str	r1, [sp]
   13ae4:	mov	r3, r4
   13ae8:	add	r1, r0, #8
   13aec:	mov	r0, r2
   13af0:	mov	r2, #1
   13af4:	blx	ip
   13af8:	cmp	r0, #0
   13afc:	bne	13b30 <flatcc_builder_embed_buffer@@Base+0x250>
   13b00:	cmn	r4, #1
   13b04:	beq	13b50 <flatcc_builder_embed_buffer@@Base+0x270>
   13b08:	sub	sp, fp, #8
   13b0c:	pop	{r4, sl, fp, pc}
   13b10:	movw	r0, #40692	; 0x9ef4
   13b14:	movw	r1, #36174	; 0x8d4e
   13b18:	movw	r3, #40559	; 0x9e6f
   13b1c:	movw	r2, #673	; 0x2a1
   13b20:	movt	r0, #1
   13b24:	movt	r1, #1
   13b28:	movt	r3, #1
   13b2c:	bl	127a8 <__assert_fail@plt>
   13b30:	movw	r0, #40692	; 0x9ef4
   13b34:	movw	r1, #36174	; 0x8d4e
   13b38:	movw	r3, #40559	; 0x9e6f
   13b3c:	movw	r2, #677	; 0x2a5
   13b40:	movt	r0, #1
   13b44:	movt	r1, #1
   13b48:	movt	r3, #1
   13b4c:	bl	127a8 <__assert_fail@plt>
   13b50:	movw	r0, #40692	; 0x9ef4
   13b54:	movw	r1, #36174	; 0x8d4e
   13b58:	movw	r3, #40305	; 0x9d71
   13b5c:	movw	r2, #702	; 0x2be
   13b60:	movt	r0, #1
   13b64:	movt	r1, #1
   13b68:	movt	r3, #1
   13b6c:	bl	127a8 <__assert_fail@plt>

00013b70 <flatcc_builder_create_buffer@@Base>:
   13b70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b74:	add	fp, sp, #28
   13b78:	sub	sp, sp, #100	; 0x64
   13b7c:	ldr	r8, [fp, #12]
   13b80:	mov	r4, r0
   13b84:	ldr	r0, [fp, #8]
   13b88:	mov	r7, r1
   13b8c:	mov	r5, #0
   13b90:	mov	r9, r3
   13b94:	sub	r1, fp, #30
   13b98:	str	r5, [sp, #12]
   13b9c:	and	r6, r8, #1
   13ba0:	strh	r0, [fp, #-30]	; 0xffffffe2
   13ba4:	mov	r0, r4
   13ba8:	mov	r3, r6
   13bac:	bl	13a50 <flatcc_builder_embed_buffer@@Base+0x170>
   13bb0:	ldrh	r0, [r4, #128]	; 0x80
   13bb4:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   13bb8:	cmp	r0, r1
   13bbc:	strhcc	r1, [r4, #128]	; 0x80
   13bc0:	cmp	r7, #0
   13bc4:	stmib	sp, {r6, r9}
   13bc8:	beq	13be4 <flatcc_builder_create_buffer@@Base+0x74>
   13bcc:	ldr	r5, [r7]
   13bd0:	cmp	r5, #0
   13bd4:	str	r5, [sp, #12]
   13bd8:	movwne	r5, #1
   13bdc:	lsl	r7, r5, #2
   13be0:	b	13be8 <flatcc_builder_create_buffer@@Base+0x78>
   13be4:	mov	r7, #0
   13be8:	ldr	r9, [r4, #136]	; 0x88
   13bec:	mov	sl, #4
   13bf0:	mvn	r6, #3
   13bf4:	mov	r3, #0
   13bf8:	ands	ip, r8, #3
   13bfc:	and	r2, sl, r8, lsl #1
   13c00:	str	r3, [sp, #20]
   13c04:	str	r3, [sp, #16]
   13c08:	sub	r2, r6, r2
   13c0c:	sub	r6, r1, #1
   13c10:	mov	r1, #4
   13c14:	add	r2, r2, r9
   13c18:	sub	r2, r2, r7
   13c1c:	beq	13c40 <flatcc_builder_create_buffer@@Base+0xd0>
   13c20:	sub	r1, fp, #40	; 0x28
   13c24:	mov	r3, #1
   13c28:	str	r1, [sp, #24]
   13c2c:	mov	r1, #4
   13c30:	str	r1, [sp, #16]
   13c34:	str	r1, [sp, #28]
   13c38:	mov	r1, #8
   13c3c:	str	r3, [sp, #20]
   13c40:	add	lr, sp, #16
   13c44:	and	r6, r2, r6
   13c48:	sub	r0, fp, #36	; 0x24
   13c4c:	str	r1, [sp, #16]
   13c50:	cmp	r5, #0
   13c54:	add	r2, lr, r3, lsl #3
   13c58:	str	r0, [r2, #8]
   13c5c:	str	sl, [r2, #12]
   13c60:	add	r2, r3, #1
   13c64:	str	r2, [sp, #20]
   13c68:	beq	13c8c <flatcc_builder_create_buffer@@Base+0x11c>
   13c6c:	add	r1, r1, r7
   13c70:	add	r0, lr, r2, lsl #3
   13c74:	add	r2, sp, #12
   13c78:	str	r1, [sp, #16]
   13c7c:	str	r2, [r0, #8]
   13c80:	orr	r2, r3, #2
   13c84:	str	r7, [r0, #12]
   13c88:	str	r2, [sp, #20]
   13c8c:	cmp	r6, #0
   13c90:	beq	13cb8 <flatcc_builder_create_buffer@@Base+0x148>
   13c94:	movw	r3, #35644	; 0x8b3c
   13c98:	add	r1, r1, r6
   13c9c:	add	r0, lr, r2, lsl #3
   13ca0:	add	r2, r2, #1
   13ca4:	movt	r3, #1
   13ca8:	str	r1, [sp, #16]
   13cac:	str	r3, [r0, #8]
   13cb0:	str	r6, [r0, #12]
   13cb4:	str	r2, [sp, #20]
   13cb8:	ldr	r5, [sp, #4]
   13cbc:	sub	r7, r9, r1
   13cc0:	cmp	ip, #0
   13cc4:	mov	r6, #144	; 0x90
   13cc8:	ldr	r3, [sp, #8]
   13ccc:	mov	r0, r7
   13cd0:	addne	r0, r0, #4
   13cd4:	cmp	r5, #0
   13cd8:	sub	r3, r3, r0
   13cdc:	movweq	r6, #140	; 0x8c
   13ce0:	cmp	r1, #0
   13ce4:	ldr	r6, [r4, r6]
   13ce8:	str	r3, [fp, #-36]	; 0xffffffdc
   13cec:	sub	r0, r6, r0
   13cf0:	str	r0, [fp, #-40]	; 0xffffffd8
   13cf4:	ble	13d4c <flatcc_builder_create_buffer@@Base+0x1dc>
   13cf8:	ldr	r0, [r4, #36]	; 0x24
   13cfc:	ldr	r6, [r4, #44]	; 0x2c
   13d00:	str	r1, [sp]
   13d04:	add	r1, lr, #8
   13d08:	mov	r3, r7
   13d0c:	blx	r6
   13d10:	cmp	r0, #0
   13d14:	bne	13d6c <flatcc_builder_create_buffer@@Base+0x1fc>
   13d18:	cmp	r7, #0
   13d1c:	str	r7, [r4, #136]	; 0x88
   13d20:	movne	r0, r7
   13d24:	subne	sp, fp, #28
   13d28:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d2c:	movw	r0, #40692	; 0x9ef4
   13d30:	movw	r1, #36174	; 0x8d4e
   13d34:	movw	r3, #36489	; 0x8e89
   13d38:	mov	r2, #772	; 0x304
   13d3c:	movt	r0, #1
   13d40:	movt	r1, #1
   13d44:	movt	r3, #1
   13d48:	bl	127a8 <__assert_fail@plt>
   13d4c:	movw	r0, #40692	; 0x9ef4
   13d50:	movw	r1, #36174	; 0x8d4e
   13d54:	movw	r3, #40371	; 0x9db3
   13d58:	movw	r2, #647	; 0x287
   13d5c:	movt	r0, #1
   13d60:	movt	r1, #1
   13d64:	movt	r3, #1
   13d68:	bl	127a8 <__assert_fail@plt>
   13d6c:	movw	r0, #40692	; 0x9ef4
   13d70:	movw	r1, #36174	; 0x8d4e
   13d74:	movw	r3, #40371	; 0x9db3
   13d78:	movw	r2, #651	; 0x28b
   13d7c:	movt	r0, #1
   13d80:	movt	r1, #1
   13d84:	movt	r3, #1
   13d88:	bl	127a8 <__assert_fail@plt>

00013d8c <flatcc_builder_create_struct@@Base>:
   13d8c:	push	{r4, r5, r6, sl, fp, lr}
   13d90:	add	fp, sp, #16
   13d94:	sub	sp, sp, #80	; 0x50
   13d98:	cmp	r3, #0
   13d9c:	beq	13e74 <flatcc_builder_create_struct@@Base+0xe8>
   13da0:	mov	r5, r0
   13da4:	ldrh	r0, [r0, #128]	; 0x80
   13da8:	mov	r4, #0
   13dac:	cmp	r0, r3
   13db0:	strhcc	r3, [r5, #128]	; 0x80
   13db4:	sub	r3, r3, #1
   13db8:	cmp	r2, #0
   13dbc:	ldr	r0, [r5, #136]	; 0x88
   13dc0:	str	r4, [sp, #12]
   13dc4:	str	r4, [sp, #8]
   13dc8:	movne	r4, #1
   13dcc:	strne	r1, [sp, #16]
   13dd0:	strne	r2, [sp, #8]
   13dd4:	strne	r2, [sp, #20]
   13dd8:	strne	r4, [sp, #12]
   13ddc:	sub	r6, r0, r2
   13de0:	and	r3, r6, r3
   13de4:	cmp	r3, #0
   13de8:	beq	13e14 <flatcc_builder_create_struct@@Base+0x88>
   13dec:	add	r1, sp, #8
   13df0:	movw	r6, #35644	; 0x8b3c
   13df4:	add	r2, r3, r2
   13df8:	add	r1, r1, r4, lsl #3
   13dfc:	add	r4, r4, #1
   13e00:	movt	r6, #1
   13e04:	str	r2, [sp, #8]
   13e08:	str	r6, [r1, #8]
   13e0c:	str	r3, [r1, #12]
   13e10:	str	r4, [sp, #12]
   13e14:	cmp	r2, #0
   13e18:	ble	13e94 <flatcc_builder_create_struct@@Base+0x108>
   13e1c:	sub	r6, r0, r2
   13e20:	ldr	r0, [r5, #36]	; 0x24
   13e24:	ldr	ip, [r5, #44]	; 0x2c
   13e28:	add	r1, sp, #8
   13e2c:	str	r2, [sp]
   13e30:	mov	r2, r4
   13e34:	add	r1, r1, #8
   13e38:	mov	r3, r6
   13e3c:	blx	ip
   13e40:	cmp	r0, #0
   13e44:	streq	r6, [r5, #136]	; 0x88
   13e48:	moveq	r0, r6
   13e4c:	subeq	sp, fp, #16
   13e50:	popeq	{r4, r5, r6, sl, fp, pc}
   13e54:	movw	r0, #40692	; 0x9ef4
   13e58:	movw	r1, #36174	; 0x8d4e
   13e5c:	movw	r3, #40371	; 0x9db3
   13e60:	movw	r2, #651	; 0x28b
   13e64:	movt	r0, #1
   13e68:	movt	r1, #1
   13e6c:	movt	r3, #1
   13e70:	bl	127a8 <__assert_fail@plt>
   13e74:	movw	r0, #36620	; 0x8f0c
   13e78:	movw	r1, #36174	; 0x8d4e
   13e7c:	movw	r3, #36631	; 0x8f17
   13e80:	movw	r2, #783	; 0x30f
   13e84:	movt	r0, #1
   13e88:	movt	r1, #1
   13e8c:	movt	r3, #1
   13e90:	bl	127a8 <__assert_fail@plt>
   13e94:	movw	r0, #40692	; 0x9ef4
   13e98:	movw	r1, #36174	; 0x8d4e
   13e9c:	movw	r3, #40371	; 0x9db3
   13ea0:	movw	r2, #647	; 0x287
   13ea4:	movt	r0, #1
   13ea8:	movt	r1, #1
   13eac:	movt	r3, #1
   13eb0:	bl	127a8 <__assert_fail@plt>

00013eb4 <flatcc_builder_start_buffer@@Base>:
   13eb4:	push	{r4, r5, r6, r7, fp, lr}
   13eb8:	add	fp, sp, #16
   13ebc:	mov	r5, r1
   13ec0:	ldrh	r1, [r0, #128]	; 0x80
   13ec4:	mov	r6, r3
   13ec8:	mov	r7, r2
   13ecc:	mov	r4, r0
   13ed0:	bl	13f70 <flatcc_builder_start_buffer@@Base+0xbc>
   13ed4:	mov	r1, r0
   13ed8:	mvn	r0, #0
   13edc:	cmp	r1, #0
   13ee0:	popne	{r4, r5, r6, r7, fp, pc}
   13ee4:	mov	r0, #1
   13ee8:	cmp	r5, #0
   13eec:	strh	r0, [r4, #128]	; 0x80
   13ef0:	ldrh	r1, [r4, #132]	; 0x84
   13ef4:	ldr	r2, [r4, #32]
   13ef8:	strh	r1, [r2, #34]	; 0x22
   13efc:	strh	r7, [r4, #132]	; 0x84
   13f00:	ldrh	r1, [r4, #164]	; 0xa4
   13f04:	ldr	r2, [r4, #32]
   13f08:	strh	r1, [r2, #32]
   13f0c:	strh	r6, [r4, #164]	; 0xa4
   13f10:	ldr	r1, [r4, #32]
   13f14:	ldr	r2, [r4, #144]	; 0x90
   13f18:	str	r2, [r1, #20]
   13f1c:	ldr	r1, [r4, #32]
   13f20:	ldr	r2, [r4, #152]	; 0x98
   13f24:	str	r2, [r1, #28]
   13f28:	ldr	r3, [r4, #148]	; 0x94
   13f2c:	ldr	r1, [r4, #32]
   13f30:	ldr	r2, [r4, #136]	; 0x88
   13f34:	ldr	r7, [r4, #168]	; 0xa8
   13f38:	add	r6, r3, #1
   13f3c:	str	r2, [r4, #144]	; 0x90
   13f40:	str	r6, [r4, #148]	; 0x94
   13f44:	str	r3, [r4, #152]	; 0x98
   13f48:	str	r7, [r1, #16]
   13f4c:	movw	r1, #35644	; 0x8b3c
   13f50:	movt	r1, #1
   13f54:	movne	r1, r5
   13f58:	ldr	r1, [r1]
   13f5c:	str	r1, [r4, #168]	; 0xa8
   13f60:	ldr	r1, [r4, #32]
   13f64:	strh	r0, [r1, #14]
   13f68:	mov	r0, #0
   13f6c:	pop	{r4, r5, r6, r7, fp, pc}
   13f70:	push	{r4, r5, r6, r7, fp, lr}
   13f74:	add	fp, sp, #16
   13f78:	sub	sp, sp, #8
   13f7c:	mov	r5, r1
   13f80:	ldr	r1, [r0, #156]	; 0x9c
   13f84:	ldr	r2, [r0, #160]	; 0xa0
   13f88:	mov	r4, r0
   13f8c:	add	r0, r1, #1
   13f90:	cmp	r1, r2
   13f94:	str	r0, [r4, #156]	; 0x9c
   13f98:	bge	13fac <flatcc_builder_start_buffer@@Base+0xf8>
   13f9c:	ldr	r0, [r4, #32]
   13fa0:	add	r0, r0, #36	; 0x24
   13fa4:	str	r0, [r4, #32]
   13fa8:	b	14040 <flatcc_builder_start_buffer@@Base+0x18c>
   13fac:	ldr	r2, [r4, #176]	; 0xb0
   13fb0:	mvn	r6, #0
   13fb4:	cmp	r2, #1
   13fb8:	cmpge	r1, r2
   13fbc:	bge	14078 <flatcc_builder_start_buffer@@Base+0x1c4>
   13fc0:	add	r7, r0, r0, lsl #3
   13fc4:	ldr	r0, [r4, #88]	; 0x58
   13fc8:	lsl	r2, r7, #2
   13fcc:	cmp	r2, r0
   13fd0:	bls	13ff8 <flatcc_builder_start_buffer@@Base+0x144>
   13fd4:	ldr	r0, [r4, #40]	; 0x28
   13fd8:	ldr	ip, [r4, #48]	; 0x30
   13fdc:	mov	r3, #4
   13fe0:	add	r1, r4, #84	; 0x54
   13fe4:	str	r3, [sp]
   13fe8:	mov	r3, #0
   13fec:	blx	ip
   13ff0:	cmp	r0, #0
   13ff4:	bne	14084 <flatcc_builder_start_buffer@@Base+0x1d0>
   13ff8:	ldr	r1, [r4, #84]	; 0x54
   13ffc:	mvn	r0, #35	; 0x23
   14000:	add	r0, r0, r7, lsl #2
   14004:	adds	r0, r0, r1
   14008:	str	r0, [r4, #32]
   1400c:	beq	14078 <flatcc_builder_start_buffer@@Base+0x1c4>
   14010:	ldr	r1, [r4, #88]	; 0x58
   14014:	movw	r3, #36409	; 0x8e39
   14018:	ldr	r2, [r4, #176]	; 0xb0
   1401c:	movt	r3, #14563	; 0x38e3
   14020:	umull	r1, r3, r1, r3
   14024:	lsr	r1, r3, #3
   14028:	cmp	r2, r3, lsr #3
   1402c:	mov	r3, r1
   14030:	movlt	r3, r2
   14034:	cmp	r2, #0
   14038:	movle	r3, r1
   1403c:	str	r3, [r4, #160]	; 0xa0
   14040:	ldr	r1, [r4, #20]
   14044:	mvn	r3, #3
   14048:	mov	r6, #0
   1404c:	str	r1, [r0, #8]
   14050:	ldrh	r2, [r4, #130]	; 0x82
   14054:	strh	r2, [r0, #12]
   14058:	strh	r5, [r4, #130]	; 0x82
   1405c:	ldr	r2, [r4, #28]
   14060:	stm	r0, {r2, r3}
   14064:	add	r0, r1, r2
   14068:	str	r6, [r4, #20]
   1406c:	add	r0, r0, #7
   14070:	bic	r0, r0, #7
   14074:	str	r0, [r4, #28]
   14078:	mov	r0, r6
   1407c:	sub	sp, fp, #16
   14080:	pop	{r4, r5, r6, r7, fp, pc}
   14084:	movw	r0, #40692	; 0x9ef4
   14088:	movw	r1, #36174	; 0x8d4e
   1408c:	movw	r3, #40238	; 0x9d2e
   14090:	mov	r2, #308	; 0x134
   14094:	movt	r0, #1
   14098:	movt	r1, #1
   1409c:	movt	r3, #1
   140a0:	bl	127a8 <__assert_fail@plt>

000140a4 <flatcc_builder_end_buffer@@Base>:
   140a4:	push	{r4, r5, r6, sl, fp, lr}
   140a8:	add	fp, sp, #16
   140ac:	sub	sp, sp, #8
   140b0:	mov	r4, r0
   140b4:	ldr	r0, [r0, #32]
   140b8:	ldrh	r0, [r0, #14]
   140bc:	cmp	r0, #1
   140c0:	bne	141b4 <flatcc_builder_end_buffer@@Base+0x110>
   140c4:	mov	r3, r1
   140c8:	ldr	r1, [r4, #152]	; 0x98
   140cc:	ldrh	r0, [r4, #164]	; 0xa4
   140d0:	ldrh	r2, [r4, #132]	; 0x84
   140d4:	cmp	r1, #0
   140d8:	ldrh	r1, [r4, #128]	; 0x80
   140dc:	and	r0, r0, #2
   140e0:	orrne	r0, r0, #1
   140e4:	cmp	r1, r2
   140e8:	movcc	r1, r2
   140ec:	strhcc	r2, [r4, #128]	; 0x80
   140f0:	str	r0, [sp, #4]
   140f4:	mov	r0, r4
   140f8:	str	r1, [sp]
   140fc:	add	r1, r4, #168	; 0xa8
   14100:	bl	13b70 <flatcc_builder_create_buffer@@Base>
   14104:	mov	r6, r0
   14108:	cmp	r0, #0
   1410c:	beq	141a8 <flatcc_builder_end_buffer@@Base+0x104>
   14110:	ldr	r1, [r4, #32]
   14114:	ldr	r0, [r4, #16]
   14118:	ldr	r2, [r4, #20]
   1411c:	ldr	r3, [r1, #20]
   14120:	str	r3, [r4, #144]	; 0x90
   14124:	ldr	r3, [r1, #28]
   14128:	str	r3, [r4, #152]	; 0x98
   1412c:	ldr	r3, [r1, #16]
   14130:	str	r3, [r4, #168]	; 0xa8
   14134:	ldrh	r1, [r1, #32]
   14138:	strh	r1, [r4, #164]	; 0xa4
   1413c:	mov	r1, #0
   14140:	bl	12778 <memset@plt>
   14144:	ldr	r0, [r4, #32]
   14148:	ldr	r1, [r4, #60]	; 0x3c
   1414c:	ldr	r2, [r4, #64]	; 0x40
   14150:	ldr	r3, [r0, #8]
   14154:	str	r3, [r4, #20]
   14158:	ldr	r3, [r0]
   1415c:	str	r3, [r4, #28]
   14160:	add	r1, r1, r3
   14164:	ldr	r5, [r0, #4]
   14168:	str	r1, [r4, #16]
   1416c:	sub	r1, r2, r3
   14170:	cmp	r1, r5
   14174:	movhi	r1, r5
   14178:	str	r1, [r4, #24]
   1417c:	ldrh	r1, [r4, #130]	; 0x82
   14180:	ldrh	r2, [r4, #128]	; 0x80
   14184:	cmp	r2, r1
   14188:	strhcc	r1, [r4, #128]	; 0x80
   1418c:	ldrh	r1, [r0, #12]
   14190:	sub	r0, r0, #36	; 0x24
   14194:	str	r0, [r4, #32]
   14198:	strh	r1, [r4, #130]	; 0x82
   1419c:	ldr	r0, [r4, #156]	; 0x9c
   141a0:	sub	r0, r0, #1
   141a4:	str	r0, [r4, #156]	; 0x9c
   141a8:	mov	r0, r6
   141ac:	sub	sp, fp, #16
   141b0:	pop	{r4, r5, r6, sl, fp, pc}
   141b4:	movw	r0, #36733	; 0x8f7d
   141b8:	movw	r1, #36174	; 0x8d4e
   141bc:	movw	r3, #36777	; 0x8fa9
   141c0:	movw	r2, #838	; 0x346
   141c4:	movt	r0, #1
   141c8:	movt	r1, #1
   141cc:	movt	r3, #1
   141d0:	bl	127a8 <__assert_fail@plt>

000141d4 <flatcc_builder_start_struct@@Base>:
   141d4:	push	{r4, r5, r6, r7, fp, lr}
   141d8:	add	fp, sp, #16
   141dc:	mov	r6, r1
   141e0:	mov	r1, r2
   141e4:	mov	r4, r0
   141e8:	bl	13f70 <flatcc_builder_start_buffer@@Base+0xbc>
   141ec:	mov	r5, #0
   141f0:	cmp	r0, #0
   141f4:	bne	14264 <flatcc_builder_start_struct@@Base+0x90>
   141f8:	ldr	r1, [r4, #32]
   141fc:	mov	r0, #2
   14200:	strh	r0, [r1, #14]
   14204:	ldr	r2, [r4, #28]
   14208:	ldr	r0, [r4, #60]	; 0x3c
   1420c:	ldr	r3, [r4, #64]	; 0x40
   14210:	add	r0, r0, r2
   14214:	sub	r2, r3, r2
   14218:	mvn	r3, #3
   1421c:	cmn	r2, #4
   14220:	str	r0, [r4, #16]
   14224:	movcs	r2, r3
   14228:	str	r2, [r4, #24]
   1422c:	str	r3, [r1, #4]
   14230:	ldr	r7, [r4, #20]
   14234:	add	r1, r7, r6
   14238:	cmp	r1, r2
   1423c:	str	r1, [r4, #20]
   14240:	bcc	14260 <flatcc_builder_start_struct@@Base+0x8c>
   14244:	add	r1, r1, #1
   14248:	mov	r0, r4
   1424c:	mvn	r2, #3
   14250:	bl	170c0 <flatcc_builder_get_emit_context@@Base+0x8>
   14254:	cmp	r0, #0
   14258:	bne	14264 <flatcc_builder_start_struct@@Base+0x90>
   1425c:	ldr	r0, [r4, #16]
   14260:	add	r5, r0, r7
   14264:	mov	r0, r5
   14268:	pop	{r4, r5, r6, r7, fp, pc}

0001426c <flatcc_builder_struct_edit@@Base>:
   1426c:	ldr	r0, [r0, #16]
   14270:	bx	lr

00014274 <flatcc_builder_end_struct@@Base>:
   14274:	push	{r4, r5, fp, lr}
   14278:	add	fp, sp, #8
   1427c:	mov	r4, r0
   14280:	ldr	r0, [r0, #32]
   14284:	ldrh	r0, [r0, #14]
   14288:	cmp	r0, #2
   1428c:	bne	1432c <flatcc_builder_end_struct@@Base+0xb8>
   14290:	ldrh	r3, [r4, #130]	; 0x82
   14294:	ldr	r1, [r4, #16]
   14298:	ldr	r2, [r4, #20]
   1429c:	mov	r0, r4
   142a0:	bl	13d8c <flatcc_builder_create_struct@@Base>
   142a4:	mov	r5, r0
   142a8:	cmp	r0, #0
   142ac:	beq	14324 <flatcc_builder_end_struct@@Base+0xb0>
   142b0:	ldr	r0, [r4, #16]
   142b4:	ldr	r2, [r4, #20]
   142b8:	mov	r1, #0
   142bc:	bl	12778 <memset@plt>
   142c0:	ldr	r0, [r4, #32]
   142c4:	ldr	r1, [r4, #60]	; 0x3c
   142c8:	ldr	ip, [r4, #64]	; 0x40
   142cc:	ldr	r3, [r0, #8]
   142d0:	str	r3, [r4, #20]
   142d4:	ldr	r3, [r0]
   142d8:	str	r3, [r4, #28]
   142dc:	add	r1, r1, r3
   142e0:	ldr	r2, [r0, #4]
   142e4:	str	r1, [r4, #16]
   142e8:	sub	r1, ip, r3
   142ec:	cmp	r1, r2
   142f0:	movhi	r1, r2
   142f4:	str	r1, [r4, #24]
   142f8:	ldrh	r1, [r4, #130]	; 0x82
   142fc:	ldrh	r2, [r4, #128]	; 0x80
   14300:	cmp	r2, r1
   14304:	strhcc	r1, [r4, #128]	; 0x80
   14308:	ldrh	r1, [r0, #12]
   1430c:	sub	r0, r0, #36	; 0x24
   14310:	str	r0, [r4, #32]
   14314:	strh	r1, [r4, #130]	; 0x82
   14318:	ldr	r0, [r4, #156]	; 0x9c
   1431c:	sub	r0, r0, #1
   14320:	str	r0, [r4, #156]	; 0x9c
   14324:	mov	r0, r5
   14328:	pop	{r4, r5, fp, pc}
   1432c:	movw	r0, #36866	; 0x9002
   14330:	movw	r1, #36174	; 0x8d4e
   14334:	movw	r3, #36910	; 0x902e
   14338:	mov	r2, #872	; 0x368
   1433c:	movt	r0, #1
   14340:	movt	r1, #1
   14344:	movt	r3, #1
   14348:	bl	127a8 <__assert_fail@plt>

0001434c <flatcc_builder_extend_vector@@Base>:
   1434c:	push	{r4, r5, fp, lr}
   14350:	add	fp, sp, #8
   14354:	mov	r4, r0
   14358:	ldr	r0, [r0, #32]
   1435c:	ldr	r2, [r0, #20]
   14360:	adds	r2, r2, r1
   14364:	bcs	143c4 <flatcc_builder_extend_vector@@Base+0x78>
   14368:	ldr	r3, [r0, #24]
   1436c:	cmp	r2, r3
   14370:	bhi	143c4 <flatcc_builder_extend_vector@@Base+0x78>
   14374:	str	r2, [r0, #20]
   14378:	ldr	r0, [r4, #32]
   1437c:	ldr	r5, [r4, #20]
   14380:	ldr	r2, [r4, #24]
   14384:	ldr	r0, [r0, #16]
   14388:	mla	r0, r0, r1, r5
   1438c:	cmp	r0, r2
   14390:	str	r0, [r4, #20]
   14394:	bcc	143b8 <flatcc_builder_extend_vector@@Base+0x6c>
   14398:	add	r1, r0, #1
   1439c:	mov	r0, r4
   143a0:	mvn	r2, #3
   143a4:	bl	170c0 <flatcc_builder_get_emit_context@@Base+0x8>
   143a8:	mov	r1, r0
   143ac:	mov	r0, #0
   143b0:	cmp	r1, #0
   143b4:	popne	{r4, r5, fp, pc}
   143b8:	ldr	r0, [r4, #16]
   143bc:	add	r0, r0, r5
   143c0:	pop	{r4, r5, fp, pc}
   143c4:	movw	r0, #40445	; 0x9dfd
   143c8:	movw	r1, #36174	; 0x8d4e
   143cc:	movw	r3, #40472	; 0x9e18
   143d0:	mov	r2, #892	; 0x37c
   143d4:	movt	r0, #1
   143d8:	movt	r1, #1
   143dc:	movt	r3, #1
   143e0:	bl	127a8 <__assert_fail@plt>

000143e4 <flatcc_builder_vector_push@@Base>:
   143e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   143e8:	add	fp, sp, #24
   143ec:	mov	r5, r0
   143f0:	ldr	r0, [r0, #32]
   143f4:	mov	r8, r1
   143f8:	ldrh	r1, [r0, #14]
   143fc:	cmp	r1, #4
   14400:	bne	14484 <flatcc_builder_vector_push@@Base+0xa0>
   14404:	ldr	r1, [r0, #20]
   14408:	ldr	r2, [r0, #24]
   1440c:	cmp	r1, r2
   14410:	bhi	144a4 <flatcc_builder_vector_push@@Base+0xc0>
   14414:	add	r1, r1, #1
   14418:	str	r1, [r0, #20]
   1441c:	ldr	r0, [r5, #32]
   14420:	ldr	r4, [r5, #20]
   14424:	ldr	r1, [r5, #24]
   14428:	ldr	r6, [r0, #16]
   1442c:	add	r0, r4, r6
   14430:	cmp	r0, r1
   14434:	str	r0, [r5, #20]
   14438:	bcc	14458 <flatcc_builder_vector_push@@Base+0x74>
   1443c:	add	r1, r0, #1
   14440:	mov	r0, r5
   14444:	mvn	r2, #3
   14448:	bl	170c0 <flatcc_builder_get_emit_context@@Base+0x8>
   1444c:	mov	r7, #0
   14450:	cmp	r0, #0
   14454:	bne	1447c <flatcc_builder_vector_push@@Base+0x98>
   14458:	ldr	r0, [r5, #16]
   1445c:	adds	r7, r0, r4
   14460:	beq	14478 <flatcc_builder_vector_push@@Base+0x94>
   14464:	mov	r0, r7
   14468:	mov	r1, r8
   1446c:	mov	r2, r6
   14470:	bl	12718 <memcpy@plt>
   14474:	b	1447c <flatcc_builder_vector_push@@Base+0x98>
   14478:	mov	r7, #0
   1447c:	mov	r0, r7
   14480:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14484:	movw	r0, #36977	; 0x9071
   14488:	movw	r1, #36174	; 0x8d4e
   1448c:	movw	r3, #37021	; 0x909d
   14490:	movw	r2, #907	; 0x38b
   14494:	movt	r0, #1
   14498:	movt	r1, #1
   1449c:	movt	r3, #1
   144a0:	bl	127a8 <__assert_fail@plt>
   144a4:	movw	r0, #37088	; 0x90e0
   144a8:	movw	r1, #36174	; 0x8d4e
   144ac:	movw	r3, #37021	; 0x909d
   144b0:	mov	r2, #908	; 0x38c
   144b4:	movt	r0, #1
   144b8:	movt	r1, #1
   144bc:	movt	r3, #1
   144c0:	bl	127a8 <__assert_fail@plt>

000144c4 <flatcc_builder_append_vector@@Base>:
   144c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   144c8:	add	fp, sp, #24
   144cc:	mov	r6, r0
   144d0:	ldr	r0, [r0, #32]
   144d4:	mov	r8, r1
   144d8:	ldrh	r1, [r0, #14]
   144dc:	cmp	r1, #4
   144e0:	bne	1458c <flatcc_builder_append_vector@@Base+0xc8>
   144e4:	ldr	r1, [r0, #20]
   144e8:	mov	r9, r2
   144ec:	adds	r1, r1, r2
   144f0:	bcs	1456c <flatcc_builder_append_vector@@Base+0xa8>
   144f4:	ldr	r2, [r0, #24]
   144f8:	cmp	r1, r2
   144fc:	bhi	1456c <flatcc_builder_append_vector@@Base+0xa8>
   14500:	str	r1, [r0, #20]
   14504:	ldr	r0, [r6, #32]
   14508:	ldr	r4, [r6, #20]
   1450c:	ldr	r1, [r6, #24]
   14510:	ldr	r5, [r0, #16]
   14514:	mla	r0, r5, r9, r4
   14518:	cmp	r0, r1
   1451c:	str	r0, [r6, #20]
   14520:	bcc	14540 <flatcc_builder_append_vector@@Base+0x7c>
   14524:	add	r1, r0, #1
   14528:	mov	r0, r6
   1452c:	mvn	r2, #3
   14530:	bl	170c0 <flatcc_builder_get_emit_context@@Base+0x8>
   14534:	mov	r7, #0
   14538:	cmp	r0, #0
   1453c:	bne	14564 <flatcc_builder_append_vector@@Base+0xa0>
   14540:	ldr	r0, [r6, #16]
   14544:	adds	r7, r0, r4
   14548:	beq	14560 <flatcc_builder_append_vector@@Base+0x9c>
   1454c:	mul	r2, r5, r9
   14550:	mov	r0, r7
   14554:	mov	r1, r8
   14558:	bl	12718 <memcpy@plt>
   1455c:	b	14564 <flatcc_builder_append_vector@@Base+0xa0>
   14560:	mov	r7, #0
   14564:	mov	r0, r7
   14568:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1456c:	movw	r0, #40445	; 0x9dfd
   14570:	movw	r1, #36174	; 0x8d4e
   14574:	movw	r3, #40472	; 0x9e18
   14578:	mov	r2, #892	; 0x37c
   1457c:	movt	r0, #1
   14580:	movt	r1, #1
   14584:	movt	r3, #1
   14588:	bl	127a8 <__assert_fail@plt>
   1458c:	movw	r0, #36977	; 0x9071
   14590:	movw	r1, #36174	; 0x8d4e
   14594:	movw	r3, #37149	; 0x911d
   14598:	movw	r2, #915	; 0x393
   1459c:	movt	r0, #1
   145a0:	movt	r1, #1
   145a4:	movt	r3, #1
   145a8:	bl	127a8 <__assert_fail@plt>

000145ac <flatcc_builder_extend_offset_vector@@Base>:
   145ac:	push	{r4, r5, fp, lr}
   145b0:	add	fp, sp, #8
   145b4:	mov	r4, r0
   145b8:	ldr	r0, [r0, #32]
   145bc:	ldr	r2, [r0, #20]
   145c0:	adds	r2, r2, r1
   145c4:	cmpcc	r2, #1073741824	; 0x40000000
   145c8:	bcc	145ec <flatcc_builder_extend_offset_vector@@Base+0x40>
   145cc:	movw	r0, #40445	; 0x9dfd
   145d0:	movw	r1, #36174	; 0x8d4e
   145d4:	movw	r3, #40472	; 0x9e18
   145d8:	mov	r2, #892	; 0x37c
   145dc:	movt	r0, #1
   145e0:	movt	r1, #1
   145e4:	movt	r3, #1
   145e8:	bl	127a8 <__assert_fail@plt>
   145ec:	str	r2, [r0, #20]
   145f0:	ldr	r5, [r4, #20]
   145f4:	ldr	r2, [r4, #24]
   145f8:	add	r0, r5, r1, lsl #2
   145fc:	cmp	r0, r2
   14600:	str	r0, [r4, #20]
   14604:	bcc	14628 <flatcc_builder_extend_offset_vector@@Base+0x7c>
   14608:	add	r1, r0, #1
   1460c:	mov	r0, r4
   14610:	mvn	r2, #3
   14614:	bl	170c0 <flatcc_builder_get_emit_context@@Base+0x8>
   14618:	mov	r1, r0
   1461c:	mov	r0, #0
   14620:	cmp	r1, #0
   14624:	popne	{r4, r5, fp, pc}
   14628:	ldr	r0, [r4, #16]
   1462c:	add	r0, r0, r5
   14630:	pop	{r4, r5, fp, pc}

00014634 <flatcc_builder_offset_vector_push@@Base>:
   14634:	push	{r4, r5, r6, r7, fp, lr}
   14638:	add	fp, sp, #16
   1463c:	mov	r6, r0
   14640:	ldr	r0, [r0, #32]
   14644:	mov	r4, r1
   14648:	ldrh	r1, [r0, #14]
   1464c:	cmp	r1, #5
   14650:	bne	146b4 <flatcc_builder_offset_vector_push@@Base+0x80>
   14654:	ldr	r1, [r0, #20]
   14658:	mov	r5, #0
   1465c:	cmn	r1, #-1073741823	; 0xc0000001
   14660:	beq	146ac <flatcc_builder_offset_vector_push@@Base+0x78>
   14664:	add	r1, r1, #1
   14668:	str	r1, [r0, #20]
   1466c:	ldr	r7, [r6, #20]
   14670:	ldr	r0, [r6, #24]
   14674:	add	r1, r7, #4
   14678:	cmp	r1, r0
   1467c:	str	r1, [r6, #20]
   14680:	bcc	1469c <flatcc_builder_offset_vector_push@@Base+0x68>
   14684:	add	r1, r7, #5
   14688:	mov	r0, r6
   1468c:	mvn	r2, #3
   14690:	bl	170c0 <flatcc_builder_get_emit_context@@Base+0x8>
   14694:	cmp	r0, #0
   14698:	bne	146ac <flatcc_builder_offset_vector_push@@Base+0x78>
   1469c:	ldr	r0, [r6, #16]
   146a0:	adds	r0, r0, r7
   146a4:	movne	r5, r0
   146a8:	strne	r4, [r0]
   146ac:	mov	r0, r5
   146b0:	pop	{r4, r5, r6, r7, fp, pc}
   146b4:	movw	r0, #37226	; 0x916a
   146b8:	movw	r1, #36174	; 0x8d4e
   146bc:	movw	r3, #37277	; 0x919d
   146c0:	movw	r2, #934	; 0x3a6
   146c4:	movt	r0, #1
   146c8:	movt	r1, #1
   146cc:	movt	r3, #1
   146d0:	bl	127a8 <__assert_fail@plt>

000146d4 <flatcc_builder_append_offset_vector@@Base>:
   146d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   146d8:	add	fp, sp, #24
   146dc:	mov	r6, r0
   146e0:	ldr	r0, [r0, #32]
   146e4:	mov	r8, r1
   146e8:	ldrh	r1, [r0, #14]
   146ec:	cmp	r1, #5
   146f0:	bne	1478c <flatcc_builder_append_offset_vector@@Base+0xb8>
   146f4:	ldr	r1, [r0, #20]
   146f8:	mov	r5, r2
   146fc:	adds	r1, r1, r2
   14700:	cmpcc	r1, #1073741824	; 0x40000000
   14704:	bcc	14728 <flatcc_builder_append_offset_vector@@Base+0x54>
   14708:	movw	r0, #40445	; 0x9dfd
   1470c:	movw	r1, #36174	; 0x8d4e
   14710:	movw	r3, #40472	; 0x9e18
   14714:	mov	r2, #892	; 0x37c
   14718:	movt	r0, #1
   1471c:	movt	r1, #1
   14720:	movt	r3, #1
   14724:	bl	127a8 <__assert_fail@plt>
   14728:	str	r1, [r0, #20]
   1472c:	ldr	r4, [r6, #20]
   14730:	ldr	r1, [r6, #24]
   14734:	add	r0, r4, r5, lsl #2
   14738:	cmp	r0, r1
   1473c:	str	r0, [r6, #20]
   14740:	bcc	14760 <flatcc_builder_append_offset_vector@@Base+0x8c>
   14744:	add	r1, r0, #1
   14748:	mov	r0, r6
   1474c:	mvn	r2, #3
   14750:	bl	170c0 <flatcc_builder_get_emit_context@@Base+0x8>
   14754:	mov	r7, #0
   14758:	cmp	r0, #0
   1475c:	bne	14784 <flatcc_builder_append_offset_vector@@Base+0xb0>
   14760:	ldr	r0, [r6, #16]
   14764:	adds	r7, r0, r4
   14768:	beq	14780 <flatcc_builder_append_offset_vector@@Base+0xac>
   1476c:	lsl	r2, r5, #2
   14770:	mov	r0, r7
   14774:	mov	r1, r8
   14778:	bl	12718 <memcpy@plt>
   1477c:	b	14784 <flatcc_builder_append_offset_vector@@Base+0xb0>
   14780:	mov	r7, #0
   14784:	mov	r0, r7
   14788:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1478c:	movw	r0, #37226	; 0x916a
   14790:	movw	r1, #36174	; 0x8d4e
   14794:	movw	r3, #37375	; 0x91ff
   14798:	mov	r2, #948	; 0x3b4
   1479c:	movt	r0, #1
   147a0:	movt	r1, #1
   147a4:	movt	r3, #1
   147a8:	bl	127a8 <__assert_fail@plt>

000147ac <flatcc_builder_extend_string@@Base>:
   147ac:	push	{r4, r5, fp, lr}
   147b0:	add	fp, sp, #8
   147b4:	mov	r4, r0
   147b8:	ldr	r0, [r0, #32]
   147bc:	ldrh	r2, [r0, #14]
   147c0:	cmp	r2, #6
   147c4:	bne	1481c <flatcc_builder_extend_string@@Base+0x70>
   147c8:	ldr	r2, [r0, #20]
   147cc:	adds	r2, r2, r1
   147d0:	bcs	1483c <flatcc_builder_extend_string@@Base+0x90>
   147d4:	str	r2, [r0, #20]
   147d8:	ldr	r5, [r4, #20]
   147dc:	ldr	r2, [r4, #24]
   147e0:	add	r0, r5, r1
   147e4:	cmp	r0, r2
   147e8:	str	r0, [r4, #20]
   147ec:	bcc	14810 <flatcc_builder_extend_string@@Base+0x64>
   147f0:	add	r1, r0, #1
   147f4:	mov	r0, r4
   147f8:	mvn	r2, #3
   147fc:	bl	170c0 <flatcc_builder_get_emit_context@@Base+0x8>
   14800:	mov	r1, r0
   14804:	mov	r0, #0
   14808:	cmp	r1, #0
   1480c:	popne	{r4, r5, fp, pc}
   14810:	ldr	r0, [r4, #16]
   14814:	add	r0, r0, r5
   14818:	pop	{r4, r5, fp, pc}
   1481c:	movw	r0, #37491	; 0x9273
   14820:	movw	r1, #36174	; 0x8d4e
   14824:	movw	r3, #37535	; 0x929f
   14828:	movw	r2, #957	; 0x3bd
   1482c:	movt	r0, #1
   14830:	movt	r1, #1
   14834:	movt	r3, #1
   14838:	bl	127a8 <__assert_fail@plt>
   1483c:	movw	r0, #40445	; 0x9dfd
   14840:	movw	r1, #36174	; 0x8d4e
   14844:	movw	r3, #40472	; 0x9e18
   14848:	mov	r2, #892	; 0x37c
   1484c:	movt	r0, #1
   14850:	movt	r1, #1
   14854:	movt	r3, #1
   14858:	bl	127a8 <__assert_fail@plt>

0001485c <flatcc_builder_append_string@@Base>:
   1485c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14860:	add	fp, sp, #24
   14864:	mov	r6, r0
   14868:	ldr	r0, [r0, #32]
   1486c:	mov	r8, r1
   14870:	ldrh	r1, [r0, #14]
   14874:	cmp	r1, #6
   14878:	bne	148f0 <flatcc_builder_append_string@@Base+0x94>
   1487c:	ldr	r1, [r0, #20]
   14880:	mov	r4, r2
   14884:	adds	r1, r1, r2
   14888:	bcs	14910 <flatcc_builder_append_string@@Base+0xb4>
   1488c:	str	r1, [r0, #20]
   14890:	ldr	r5, [r6, #20]
   14894:	ldr	r1, [r6, #24]
   14898:	add	r0, r5, r4
   1489c:	cmp	r0, r1
   148a0:	str	r0, [r6, #20]
   148a4:	bcc	148c4 <flatcc_builder_append_string@@Base+0x68>
   148a8:	add	r1, r0, #1
   148ac:	mov	r0, r6
   148b0:	mvn	r2, #3
   148b4:	bl	170c0 <flatcc_builder_get_emit_context@@Base+0x8>
   148b8:	mov	r7, #0
   148bc:	cmp	r0, #0
   148c0:	bne	148e8 <flatcc_builder_append_string@@Base+0x8c>
   148c4:	ldr	r0, [r6, #16]
   148c8:	adds	r7, r0, r5
   148cc:	beq	148e4 <flatcc_builder_append_string@@Base+0x88>
   148d0:	mov	r0, r7
   148d4:	mov	r1, r8
   148d8:	mov	r2, r4
   148dc:	bl	12718 <memcpy@plt>
   148e0:	b	148e8 <flatcc_builder_append_string@@Base+0x8c>
   148e4:	mov	r7, #0
   148e8:	mov	r0, r7
   148ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148f0:	movw	r0, #37491	; 0x9273
   148f4:	movw	r1, #36174	; 0x8d4e
   148f8:	movw	r3, #37598	; 0x92de
   148fc:	movw	r2, #966	; 0x3c6
   14900:	movt	r0, #1
   14904:	movt	r1, #1
   14908:	movt	r3, #1
   1490c:	bl	127a8 <__assert_fail@plt>
   14910:	movw	r0, #40445	; 0x9dfd
   14914:	movw	r1, #36174	; 0x8d4e
   14918:	movw	r3, #40472	; 0x9e18
   1491c:	mov	r2, #892	; 0x37c
   14920:	movt	r0, #1
   14924:	movt	r1, #1
   14928:	movt	r3, #1
   1492c:	bl	127a8 <__assert_fail@plt>

00014930 <flatcc_builder_append_string_str@@Base>:
   14930:	push	{r4, r5, fp, lr}
   14934:	add	fp, sp, #8
   14938:	mov	r5, r0
   1493c:	mov	r0, r1
   14940:	mov	r4, r1
   14944:	bl	12760 <strlen@plt>
   14948:	mov	r2, r0
   1494c:	mov	r0, r5
   14950:	mov	r1, r4
   14954:	pop	{r4, r5, fp, lr}
   14958:	b	1485c <flatcc_builder_append_string@@Base>

0001495c <flatcc_builder_append_string_strn@@Base>:
   1495c:	push	{r4, r5, r6, sl, fp, lr}
   14960:	add	fp, sp, #16
   14964:	mov	r6, r0
   14968:	mov	r5, r1
   1496c:	mov	r0, r1
   14970:	mov	r1, #0
   14974:	mov	r4, r2
   14978:	bl	12790 <memchr@plt>
   1497c:	cmp	r0, #0
   14980:	mov	r1, r5
   14984:	subne	r4, r0, r5
   14988:	mov	r0, r6
   1498c:	mov	r2, r4
   14990:	pop	{r4, r5, r6, sl, fp, lr}
   14994:	b	1485c <flatcc_builder_append_string@@Base>

00014998 <flatcc_builder_truncate_vector@@Base>:
   14998:	push	{fp, lr}
   1499c:	mov	fp, sp
   149a0:	ldr	r2, [r0, #32]
   149a4:	ldrh	r3, [r2, #14]
   149a8:	cmp	r3, #4
   149ac:	bne	149f4 <flatcc_builder_truncate_vector@@Base+0x5c>
   149b0:	ldr	r3, [r2, #20]
   149b4:	cmp	r3, r1
   149b8:	bcc	14a14 <flatcc_builder_truncate_vector@@Base+0x7c>
   149bc:	sub	r3, r3, r1
   149c0:	str	r3, [r2, #20]
   149c4:	ldr	r2, [r0, #32]
   149c8:	ldr	r3, [r0, #20]
   149cc:	ldr	ip, [r0, #16]
   149d0:	ldr	r2, [r2, #16]
   149d4:	mls	r3, r2, r1, r3
   149d8:	mul	r2, r2, r1
   149dc:	mov	r1, #0
   149e0:	str	r3, [r0, #20]
   149e4:	add	r0, ip, r3
   149e8:	bl	12778 <memset@plt>
   149ec:	mov	r0, #0
   149f0:	pop	{fp, pc}
   149f4:	movw	r0, #36977	; 0x9071
   149f8:	movw	r1, #36174	; 0x8d4e
   149fc:	movw	r3, #37675	; 0x932b
   14a00:	movw	r2, #985	; 0x3d9
   14a04:	movt	r0, #1
   14a08:	movt	r1, #1
   14a0c:	movt	r3, #1
   14a10:	bl	127a8 <__assert_fail@plt>
   14a14:	movw	r0, #37738	; 0x936a
   14a18:	movw	r1, #36174	; 0x8d4e
   14a1c:	movw	r3, #37675	; 0x932b
   14a20:	movw	r2, #986	; 0x3da
   14a24:	movt	r0, #1
   14a28:	movt	r1, #1
   14a2c:	movt	r3, #1
   14a30:	bl	127a8 <__assert_fail@plt>

00014a34 <flatcc_builder_truncate_offset_vector@@Base>:
   14a34:	push	{fp, lr}
   14a38:	mov	fp, sp
   14a3c:	ldr	r2, [r0, #32]
   14a40:	ldrh	r3, [r2, #14]
   14a44:	cmp	r3, #5
   14a48:	bne	14a90 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   14a4c:	ldr	r3, [r2, #20]
   14a50:	cmp	r3, r1
   14a54:	bcc	14ab0 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   14a58:	sub	r3, r3, r1
   14a5c:	str	r3, [r2, #20]
   14a60:	ldr	r2, [r0, #32]
   14a64:	ldr	r3, [r0, #20]
   14a68:	ldr	ip, [r0, #16]
   14a6c:	ldr	r2, [r2, #16]
   14a70:	mls	r3, r2, r1, r3
   14a74:	mul	r2, r2, r1
   14a78:	mov	r1, #0
   14a7c:	str	r3, [r0, #20]
   14a80:	add	r0, ip, r3
   14a84:	bl	12778 <memset@plt>
   14a88:	mov	r0, #0
   14a8c:	pop	{fp, pc}
   14a90:	movw	r0, #37226	; 0x916a
   14a94:	movw	r1, #36174	; 0x8d4e
   14a98:	movw	r3, #37774	; 0x938e
   14a9c:	movw	r2, #994	; 0x3e2
   14aa0:	movt	r0, #1
   14aa4:	movt	r1, #1
   14aa8:	movt	r3, #1
   14aac:	bl	127a8 <__assert_fail@plt>
   14ab0:	movw	r0, #37844	; 0x93d4
   14ab4:	movw	r1, #36174	; 0x8d4e
   14ab8:	movw	r3, #37774	; 0x938e
   14abc:	movw	r2, #995	; 0x3e3
   14ac0:	movt	r0, #1
   14ac4:	movt	r1, #1
   14ac8:	movt	r3, #1
   14acc:	bl	127a8 <__assert_fail@plt>

00014ad0 <flatcc_builder_truncate_string@@Base>:
   14ad0:	push	{fp, lr}
   14ad4:	mov	fp, sp
   14ad8:	mov	r2, r1
   14adc:	ldr	r1, [r0, #32]
   14ae0:	ldrh	r3, [r1, #14]
   14ae4:	cmp	r3, #6
   14ae8:	bne	14b24 <flatcc_builder_truncate_string@@Base+0x54>
   14aec:	ldr	r3, [r1, #20]
   14af0:	cmp	r3, r2
   14af4:	bcc	14b44 <flatcc_builder_truncate_string@@Base+0x74>
   14af8:	sub	r3, r3, r2
   14afc:	str	r3, [r1, #20]
   14b00:	ldr	r3, [r0, #20]
   14b04:	ldr	r1, [r0, #16]
   14b08:	sub	r3, r3, r2
   14b0c:	str	r3, [r0, #20]
   14b10:	add	r0, r1, r3
   14b14:	mov	r1, #0
   14b18:	bl	12778 <memset@plt>
   14b1c:	mov	r0, #0
   14b20:	pop	{fp, pc}
   14b24:	movw	r0, #37491	; 0x9273
   14b28:	movw	r1, #36174	; 0x8d4e
   14b2c:	movw	r3, #37903	; 0x940f
   14b30:	movw	r2, #1003	; 0x3eb
   14b34:	movt	r0, #1
   14b38:	movt	r1, #1
   14b3c:	movt	r3, #1
   14b40:	bl	127a8 <__assert_fail@plt>
   14b44:	movw	r0, #37966	; 0x944e
   14b48:	movw	r1, #36174	; 0x8d4e
   14b4c:	movw	r3, #37903	; 0x940f
   14b50:	mov	r2, #1004	; 0x3ec
   14b54:	movt	r0, #1
   14b58:	movt	r1, #1
   14b5c:	movt	r3, #1
   14b60:	bl	127a8 <__assert_fail@plt>

00014b64 <flatcc_builder_start_vector@@Base>:
   14b64:	push	{r4, r5, r6, r7, fp, lr}
   14b68:	add	fp, sp, #16
   14b6c:	mov	r7, #4
   14b70:	cmp	r2, #4
   14b74:	mov	r6, r1
   14b78:	mov	r5, r3
   14b7c:	mov	r4, r0
   14b80:	movls	r2, r7
   14b84:	mov	r1, r2
   14b88:	bl	13f70 <flatcc_builder_start_buffer@@Base+0xbc>
   14b8c:	mov	r1, r0
   14b90:	mvn	r0, #0
   14b94:	cmp	r1, #0
   14b98:	popne	{r4, r5, r6, r7, fp, pc}
   14b9c:	ldr	r0, [r4, #32]
   14ba0:	str	r6, [r0, #16]
   14ba4:	mov	r0, #0
   14ba8:	ldr	r1, [r4, #32]
   14bac:	str	r0, [r1, #20]
   14bb0:	ldr	r1, [r4, #32]
   14bb4:	str	r5, [r1, #24]
   14bb8:	ldr	r1, [r4, #32]
   14bbc:	strh	r7, [r1, #14]
   14bc0:	ldr	r2, [r4, #28]
   14bc4:	ldr	r3, [r4, #60]	; 0x3c
   14bc8:	ldr	r7, [r4, #64]	; 0x40
   14bcc:	add	r3, r3, r2
   14bd0:	sub	r2, r7, r2
   14bd4:	str	r3, [r4, #16]
   14bd8:	mvn	r3, #3
   14bdc:	cmn	r2, #4
   14be0:	movcs	r2, r3
   14be4:	str	r2, [r4, #24]
   14be8:	str	r3, [r1, #4]
   14bec:	pop	{r4, r5, r6, r7, fp, pc}

00014bf0 <flatcc_builder_start_offset_vector@@Base>:
   14bf0:	push	{r4, r5, fp, lr}
   14bf4:	add	fp, sp, #8
   14bf8:	mov	r1, #4
   14bfc:	mov	r4, r0
   14c00:	mov	r5, #4
   14c04:	bl	13f70 <flatcc_builder_start_buffer@@Base+0xbc>
   14c08:	mov	r1, r0
   14c0c:	mvn	r0, #0
   14c10:	cmp	r1, #0
   14c14:	popne	{r4, r5, fp, pc}
   14c18:	ldr	r0, [r4, #32]
   14c1c:	mov	r2, #5
   14c20:	str	r5, [r0, #16]
   14c24:	mov	r0, #0
   14c28:	ldr	r1, [r4, #32]
   14c2c:	str	r0, [r1, #20]
   14c30:	ldr	r1, [r4, #32]
   14c34:	strh	r2, [r1, #14]
   14c38:	ldr	r2, [r4, #28]
   14c3c:	ldr	r3, [r4, #60]	; 0x3c
   14c40:	ldr	r5, [r4, #64]	; 0x40
   14c44:	add	r3, r3, r2
   14c48:	sub	r2, r5, r2
   14c4c:	str	r3, [r4, #16]
   14c50:	mvn	r3, #3
   14c54:	cmn	r2, #4
   14c58:	movcs	r2, r3
   14c5c:	str	r2, [r4, #24]
   14c60:	str	r3, [r1, #4]
   14c64:	pop	{r4, r5, fp, pc}

00014c68 <flatcc_builder_create_offset_vector@@Base>:
   14c68:	push	{r4, r5, r6, sl, fp, lr}
   14c6c:	add	fp, sp, #16
   14c70:	mov	r6, r2
   14c74:	mov	r5, r1
   14c78:	mov	r4, r0
   14c7c:	bl	14bf0 <flatcc_builder_start_offset_vector@@Base>
   14c80:	cmp	r0, #0
   14c84:	beq	14c90 <flatcc_builder_create_offset_vector@@Base+0x28>
   14c88:	mov	r0, #0
   14c8c:	pop	{r4, r5, r6, sl, fp, pc}
   14c90:	mov	r0, r4
   14c94:	mov	r1, r6
   14c98:	bl	145ac <flatcc_builder_extend_offset_vector@@Base>
   14c9c:	cmp	r0, #0
   14ca0:	beq	14c88 <flatcc_builder_create_offset_vector@@Base+0x20>
   14ca4:	lsl	r2, r6, #2
   14ca8:	mov	r1, r5
   14cac:	bl	12718 <memcpy@plt>
   14cb0:	mov	r0, r4
   14cb4:	pop	{r4, r5, r6, sl, fp, lr}
   14cb8:	b	14cbc <flatcc_builder_end_offset_vector@@Base>

00014cbc <flatcc_builder_end_offset_vector@@Base>:
   14cbc:	push	{r4, r5, fp, lr}
   14cc0:	add	fp, sp, #8
   14cc4:	mov	r4, r0
   14cc8:	ldr	r0, [r0, #32]
   14ccc:	ldrh	r1, [r0, #14]
   14cd0:	cmp	r1, #5
   14cd4:	bne	14d74 <flatcc_builder_end_offset_vector@@Base+0xb8>
   14cd8:	ldr	r2, [r0, #20]
   14cdc:	ldr	r1, [r4, #16]
   14ce0:	mov	r0, r4
   14ce4:	mov	r3, #0
   14ce8:	bl	15cdc <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   14cec:	mov	r5, r0
   14cf0:	cmp	r0, #0
   14cf4:	beq	14d6c <flatcc_builder_end_offset_vector@@Base+0xb0>
   14cf8:	ldr	r0, [r4, #16]
   14cfc:	ldr	r2, [r4, #20]
   14d00:	mov	r1, #0
   14d04:	bl	12778 <memset@plt>
   14d08:	ldr	r0, [r4, #32]
   14d0c:	ldr	r1, [r4, #60]	; 0x3c
   14d10:	ldr	ip, [r4, #64]	; 0x40
   14d14:	ldr	r3, [r0, #8]
   14d18:	str	r3, [r4, #20]
   14d1c:	ldr	r3, [r0]
   14d20:	str	r3, [r4, #28]
   14d24:	add	r1, r1, r3
   14d28:	ldr	r2, [r0, #4]
   14d2c:	str	r1, [r4, #16]
   14d30:	sub	r1, ip, r3
   14d34:	cmp	r1, r2
   14d38:	movhi	r1, r2
   14d3c:	str	r1, [r4, #24]
   14d40:	ldrh	r1, [r4, #130]	; 0x82
   14d44:	ldrh	r2, [r4, #128]	; 0x80
   14d48:	cmp	r2, r1
   14d4c:	strhcc	r1, [r4, #128]	; 0x80
   14d50:	ldrh	r1, [r0, #12]
   14d54:	sub	r0, r0, #36	; 0x24
   14d58:	str	r0, [r4, #32]
   14d5c:	strh	r1, [r4, #130]	; 0x82
   14d60:	ldr	r0, [r4, #156]	; 0x9c
   14d64:	sub	r0, r0, #1
   14d68:	str	r0, [r4, #156]	; 0x9c
   14d6c:	mov	r0, r5
   14d70:	pop	{r4, r5, fp, pc}
   14d74:	movw	r0, #37226	; 0x916a
   14d78:	movw	r1, #36174	; 0x8d4e
   14d7c:	movw	r3, #38809	; 0x9799
   14d80:	movw	r2, #1480	; 0x5c8
   14d84:	movt	r0, #1
   14d88:	movt	r1, #1
   14d8c:	movt	r3, #1
   14d90:	bl	127a8 <__assert_fail@plt>

00014d94 <flatcc_builder_start_string@@Base>:
   14d94:	push	{r4, r5, fp, lr}
   14d98:	add	fp, sp, #8
   14d9c:	mov	r1, #1
   14da0:	mov	r4, r0
   14da4:	mov	r5, #1
   14da8:	bl	13f70 <flatcc_builder_start_buffer@@Base+0xbc>
   14dac:	mov	r1, r0
   14db0:	mvn	r0, #0
   14db4:	cmp	r1, #0
   14db8:	popne	{r4, r5, fp, pc}
   14dbc:	ldr	r0, [r4, #32]
   14dc0:	mov	r2, #6
   14dc4:	str	r5, [r0, #16]
   14dc8:	mov	r0, #0
   14dcc:	ldr	r1, [r4, #32]
   14dd0:	str	r0, [r1, #20]
   14dd4:	ldr	r1, [r4, #32]
   14dd8:	strh	r2, [r1, #14]
   14ddc:	ldr	r2, [r4, #28]
   14de0:	ldr	r3, [r4, #60]	; 0x3c
   14de4:	ldr	r5, [r4, #64]	; 0x40
   14de8:	add	r3, r3, r2
   14dec:	sub	r2, r5, r2
   14df0:	str	r3, [r4, #16]
   14df4:	mvn	r3, #3
   14df8:	cmn	r2, #4
   14dfc:	movcs	r2, r3
   14e00:	str	r2, [r4, #24]
   14e04:	str	r3, [r1, #4]
   14e08:	pop	{r4, r5, fp, pc}

00014e0c <flatcc_builder_reserve_table@@Base>:
   14e0c:	push	{r4, r5, r6, sl, fp, lr}
   14e10:	add	fp, sp, #16
   14e14:	sub	sp, sp, #8
   14e18:	cmn	r1, #1
   14e1c:	ble	14ef0 <flatcc_builder_reserve_table@@Base+0xe4>
   14e20:	mov	r4, r0
   14e24:	ldr	r0, [r0, #32]
   14e28:	mov	r5, r1
   14e2c:	ldr	r1, [r4, #56]	; 0x38
   14e30:	ldrh	r2, [r0, #28]
   14e34:	ldr	r0, [r0, #16]
   14e38:	add	r6, r0, r2, lsl #1
   14e3c:	add	r0, r6, r5, lsl #1
   14e40:	add	r2, r0, #4
   14e44:	cmp	r2, r1
   14e48:	bls	14e70 <flatcc_builder_reserve_table@@Base+0x64>
   14e4c:	ldr	r0, [r4, #40]	; 0x28
   14e50:	ldr	ip, [r4, #48]	; 0x30
   14e54:	mov	r3, #0
   14e58:	add	r1, r4, #52	; 0x34
   14e5c:	str	r3, [sp]
   14e60:	mov	r3, #1
   14e64:	blx	ip
   14e68:	cmp	r0, #0
   14e6c:	bne	14f10 <flatcc_builder_reserve_table@@Base+0x104>
   14e70:	ldr	r0, [r4, #52]	; 0x34
   14e74:	adds	r0, r0, r6
   14e78:	str	r0, [r4, #4]
   14e7c:	beq	14ee4 <flatcc_builder_reserve_table@@Base+0xd8>
   14e80:	add	r0, r0, #4
   14e84:	lsl	r1, r5, #1
   14e88:	str	r0, [r4, #4]
   14e8c:	ldr	r0, [r4, #32]
   14e90:	ldr	r3, [r4, #80]	; 0x50
   14e94:	ldr	r5, [r0, #20]
   14e98:	orr	r0, r1, #1
   14e9c:	add	r2, r5, r0
   14ea0:	cmp	r2, r3
   14ea4:	bls	14ecc <flatcc_builder_reserve_table@@Base+0xc0>
   14ea8:	ldr	r0, [r4, #40]	; 0x28
   14eac:	ldr	r6, [r4, #48]	; 0x30
   14eb0:	mov	r3, #3
   14eb4:	add	r1, r4, #76	; 0x4c
   14eb8:	str	r3, [sp]
   14ebc:	mov	r3, #0
   14ec0:	blx	r6
   14ec4:	cmp	r0, #0
   14ec8:	bne	14f10 <flatcc_builder_reserve_table@@Base+0x104>
   14ecc:	ldr	r0, [r4, #76]	; 0x4c
   14ed0:	adds	r0, r0, r5
   14ed4:	str	r0, [r4]
   14ed8:	mov	r0, #0
   14edc:	mvneq	r0, #0
   14ee0:	b	14ee8 <flatcc_builder_reserve_table@@Base+0xdc>
   14ee4:	mvn	r0, #0
   14ee8:	sub	sp, fp, #16
   14eec:	pop	{r4, r5, r6, sl, fp, pc}
   14ef0:	movw	r0, #38065	; 0x94b1
   14ef4:	movw	r1, #36174	; 0x8d4e
   14ef8:	movw	r3, #38000	; 0x9470
   14efc:	movw	r2, #1065	; 0x429
   14f00:	movt	r0, #1
   14f04:	movt	r1, #1
   14f08:	movt	r3, #1
   14f0c:	bl	127a8 <__assert_fail@plt>
   14f10:	movw	r0, #40692	; 0x9ef4
   14f14:	movw	r1, #36174	; 0x8d4e
   14f18:	movw	r3, #40238	; 0x9d2e
   14f1c:	mov	r2, #308	; 0x134
   14f20:	movt	r0, #1
   14f24:	movt	r1, #1
   14f28:	movt	r3, #1
   14f2c:	bl	127a8 <__assert_fail@plt>

00014f30 <flatcc_builder_start_table@@Base>:
   14f30:	push	{r4, r5, r6, r7, fp, lr}
   14f34:	add	fp, sp, #16
   14f38:	sub	sp, sp, #8
   14f3c:	mov	r6, r1
   14f40:	mov	r1, #4
   14f44:	mov	r4, r0
   14f48:	bl	13f70 <flatcc_builder_start_buffer@@Base+0xbc>
   14f4c:	mvn	r5, #0
   14f50:	cmp	r0, #0
   14f54:	beq	14f64 <flatcc_builder_start_table@@Base+0x34>
   14f58:	mov	r0, r5
   14f5c:	sub	sp, fp, #16
   14f60:	pop	{r4, r5, r6, r7, fp, pc}
   14f64:	mov	r1, r4
   14f68:	ldr	r2, [r4, #4]
   14f6c:	ldr	r3, [r4, #32]
   14f70:	ldr	r0, [r1, #52]!	; 0x34
   14f74:	sub	r0, r2, r0
   14f78:	str	r0, [r3, #16]
   14f7c:	ldr	r0, [r4]
   14f80:	ldr	r3, [r4, #76]	; 0x4c
   14f84:	ldr	r2, [r4, #32]
   14f88:	sub	r0, r0, r3
   14f8c:	mov	r3, #0
   14f90:	str	r0, [r2, #20]
   14f94:	ldr	r0, [r4, #12]
   14f98:	ldr	r2, [r4, #32]
   14f9c:	str	r0, [r2, #24]
   14fa0:	ldr	r0, [r4, #32]
   14fa4:	ldrh	r2, [r4, #8]
   14fa8:	strh	r2, [r0, #28]
   14fac:	movw	r0, #15186	; 0x3b52
   14fb0:	strh	r3, [r4, #8]
   14fb4:	mov	r2, #3
   14fb8:	movt	r0, #12137	; 0x2f69
   14fbc:	str	r0, [r4, #12]
   14fc0:	ldr	r0, [r4, #32]
   14fc4:	strh	r2, [r0, #14]
   14fc8:	ldrh	r2, [r0, #28]
   14fcc:	ldr	r0, [r0, #16]
   14fd0:	add	r7, r0, r2, lsl #1
   14fd4:	add	r0, r7, r6, lsl #1
   14fd8:	add	r2, r0, #4
   14fdc:	ldr	r0, [r4, #56]	; 0x38
   14fe0:	cmp	r2, r0
   14fe4:	bls	15004 <flatcc_builder_start_table@@Base+0xd4>
   14fe8:	ldr	r0, [r4, #40]	; 0x28
   14fec:	ldr	ip, [r4, #48]	; 0x30
   14ff0:	str	r3, [sp]
   14ff4:	mov	r3, #1
   14ff8:	blx	ip
   14ffc:	cmp	r0, #0
   15000:	bne	150a8 <flatcc_builder_start_table@@Base+0x178>
   15004:	ldr	r0, [r4, #52]	; 0x34
   15008:	adds	r0, r0, r7
   1500c:	str	r0, [r4, #4]
   15010:	beq	14f58 <flatcc_builder_start_table@@Base+0x28>
   15014:	add	r0, r0, #4
   15018:	lsl	r1, r6, #1
   1501c:	str	r0, [r4, #4]
   15020:	ldr	r0, [r4, #32]
   15024:	ldr	r3, [r4, #80]	; 0x50
   15028:	ldr	r6, [r0, #20]
   1502c:	orr	r0, r1, #1
   15030:	add	r2, r6, r0
   15034:	cmp	r2, r3
   15038:	bls	15060 <flatcc_builder_start_table@@Base+0x130>
   1503c:	ldr	r0, [r4, #40]	; 0x28
   15040:	ldr	r7, [r4, #48]	; 0x30
   15044:	mov	r3, #3
   15048:	add	r1, r4, #76	; 0x4c
   1504c:	str	r3, [sp]
   15050:	mov	r3, #0
   15054:	blx	r7
   15058:	cmp	r0, #0
   1505c:	bne	150a8 <flatcc_builder_start_table@@Base+0x178>
   15060:	ldr	r0, [r4, #76]	; 0x4c
   15064:	adds	r0, r0, r6
   15068:	str	r0, [r4]
   1506c:	beq	14f58 <flatcc_builder_start_table@@Base+0x28>
   15070:	ldr	r0, [r4, #28]
   15074:	ldr	r2, [r4, #60]	; 0x3c
   15078:	ldr	r3, [r4, #64]	; 0x40
   1507c:	ldr	r1, [r4, #32]
   15080:	mov	r5, #0
   15084:	add	r2, r2, r0
   15088:	sub	r0, r3, r0
   1508c:	str	r2, [r4, #16]
   15090:	movw	r2, #65532	; 0xfffc
   15094:	cmp	r0, r2
   15098:	movcs	r0, r2
   1509c:	str	r0, [r4, #24]
   150a0:	str	r2, [r1, #4]
   150a4:	b	14f58 <flatcc_builder_start_table@@Base+0x28>
   150a8:	movw	r0, #40692	; 0x9ef4
   150ac:	movw	r1, #36174	; 0x8d4e
   150b0:	movw	r3, #40238	; 0x9d2e
   150b4:	mov	r2, #308	; 0x134
   150b8:	movt	r0, #1
   150bc:	movt	r1, #1
   150c0:	movt	r3, #1
   150c4:	bl	127a8 <__assert_fail@plt>

000150c8 <flatcc_builder_create_vtable@@Base>:
   150c8:	push	{r4, r5, fp, lr}
   150cc:	add	fp, sp, #8
   150d0:	sub	sp, sp, #80	; 0x50
   150d4:	mov	r3, r2
   150d8:	mov	r2, #0
   150dc:	mov	r4, r0
   150e0:	cmp	r3, #0
   150e4:	str	r2, [sp, #12]
   150e8:	str	r2, [sp, #8]
   150ec:	movne	r2, #1
   150f0:	strne	r1, [sp, #16]
   150f4:	strne	r3, [sp, #8]
   150f8:	strne	r3, [sp, #20]
   150fc:	strne	r2, [sp, #12]
   15100:	ldr	r0, [r4, #152]	; 0x98
   15104:	cmp	r0, #0
   15108:	bne	15118 <flatcc_builder_create_vtable@@Base+0x50>
   1510c:	ldr	r0, [r4, #180]	; 0xb4
   15110:	cmp	r0, #0
   15114:	beq	15168 <flatcc_builder_create_vtable@@Base+0xa0>
   15118:	cmp	r3, #0
   1511c:	beq	151a8 <flatcc_builder_create_vtable@@Base+0xe0>
   15120:	ldr	r0, [r4, #136]	; 0x88
   15124:	ldr	ip, [r4, #44]	; 0x2c
   15128:	add	r1, sp, #8
   1512c:	add	r1, r1, #8
   15130:	sub	r5, r0, r3
   15134:	ldr	r0, [r4, #36]	; 0x24
   15138:	str	r3, [sp]
   1513c:	mov	r3, r5
   15140:	blx	ip
   15144:	cmp	r0, #0
   15148:	bne	151c8 <flatcc_builder_create_vtable@@Base+0x100>
   1514c:	cmp	r5, #0
   15150:	str	r5, [r4, #136]	; 0x88
   15154:	beq	15160 <flatcc_builder_create_vtable@@Base+0x98>
   15158:	add	r0, r5, #1
   1515c:	b	151a0 <flatcc_builder_create_vtable@@Base+0xd8>
   15160:	mov	r0, #0
   15164:	b	151a0 <flatcc_builder_create_vtable@@Base+0xd8>
   15168:	ldr	r5, [r4, #140]	; 0x8c
   1516c:	ldr	r0, [r4, #36]	; 0x24
   15170:	ldr	ip, [r4, #44]	; 0x2c
   15174:	add	r1, r5, r3
   15178:	str	r1, [r4, #140]	; 0x8c
   1517c:	add	r1, sp, #8
   15180:	str	r3, [sp]
   15184:	mov	r3, r5
   15188:	add	r1, r1, #8
   1518c:	blx	ip
   15190:	cmp	r0, #0
   15194:	bne	151e8 <flatcc_builder_create_vtable@@Base+0x120>
   15198:	adds	r0, r5, #1
   1519c:	moveq	r0, #0
   151a0:	sub	sp, fp, #8
   151a4:	pop	{r4, r5, fp, pc}
   151a8:	movw	r0, #40692	; 0x9ef4
   151ac:	movw	r1, #36174	; 0x8d4e
   151b0:	movw	r3, #40371	; 0x9db3
   151b4:	movw	r2, #647	; 0x287
   151b8:	movt	r0, #1
   151bc:	movt	r1, #1
   151c0:	movt	r3, #1
   151c4:	bl	127a8 <__assert_fail@plt>
   151c8:	movw	r0, #40692	; 0x9ef4
   151cc:	movw	r1, #36174	; 0x8d4e
   151d0:	movw	r3, #40371	; 0x9db3
   151d4:	movw	r2, #651	; 0x28b
   151d8:	movt	r0, #1
   151dc:	movt	r1, #1
   151e0:	movt	r3, #1
   151e4:	bl	127a8 <__assert_fail@plt>
   151e8:	movw	r0, #40692	; 0x9ef4
   151ec:	movw	r1, #36174	; 0x8d4e
   151f0:	movw	r3, #40559	; 0x9e6f
   151f4:	movw	r2, #677	; 0x2a5
   151f8:	movt	r0, #1
   151fc:	movt	r1, #1
   15200:	movt	r3, #1
   15204:	bl	127a8 <__assert_fail@plt>

00015208 <flatcc_builder_create_cached_vtable@@Base>:
   15208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1520c:	add	fp, sp, #28
   15210:	sub	sp, sp, #20
   15214:	mov	sl, r0
   15218:	ldr	r0, [r0, #116]	; 0x74
   1521c:	mov	r8, r3
   15220:	mov	r5, r2
   15224:	str	r1, [sp, #16]
   15228:	cmp	r0, #0
   1522c:	beq	152d0 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   15230:	ldr	r1, [sl, #92]	; 0x5c
   15234:	rsb	r0, r0, #32
   15238:	lsr	r0, r8, r0
   1523c:	add	r6, r1, r0, lsl #2
   15240:	cmp	r6, #0
   15244:	beq	15394 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   15248:	ldr	r7, [r6]
   1524c:	str	r6, [sp, #12]
   15250:	cmp	r7, #0
   15254:	beq	1539c <flatcc_builder_create_cached_vtable@@Base+0x194>
   15258:	ldr	r4, [sl, #68]	; 0x44
   1525c:	ldr	r8, [sl, #100]	; 0x64
   15260:	mov	r0, #0
   15264:	str	r0, [sp, #8]
   15268:	add	r9, r8, r7
   1526c:	mov	r1, r4
   15270:	ldr	r0, [r9, #8]
   15274:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   15278:	cmp	r0, r5
   1527c:	bne	15294 <flatcc_builder_create_cached_vtable@@Base+0x8c>
   15280:	ldr	r0, [sp, #16]
   15284:	mov	r2, r5
   15288:	bl	12724 <memcmp@plt>
   1528c:	cmp	r0, #0
   15290:	beq	152a8 <flatcc_builder_create_cached_vtable@@Base+0xa0>
   15294:	ldr	r7, [r9, #12]!
   15298:	cmp	r7, #0
   1529c:	mov	r6, r9
   152a0:	bne	15268 <flatcc_builder_create_cached_vtable@@Base+0x60>
   152a4:	b	1538c <flatcc_builder_create_cached_vtable@@Base+0x184>
   152a8:	ldr	r0, [sl, #152]	; 0x98
   152ac:	ldr	r1, [r9, #4]
   152b0:	cmp	r1, r0
   152b4:	beq	15500 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   152b8:	mov	r6, r9
   152bc:	mov	r0, r9
   152c0:	ldr	r7, [r6, #12]!
   152c4:	cmp	r7, #0
   152c8:	bne	15264 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   152cc:	b	153a0 <flatcc_builder_create_cached_vtable@@Base+0x198>
   152d0:	ldr	r0, [sl, #124]	; 0x7c
   152d4:	cmp	r0, #0
   152d8:	bne	1554c <flatcc_builder_create_cached_vtable@@Base+0x344>
   152dc:	ldr	r0, [sl, #104]	; 0x68
   152e0:	add	r7, sl, #100	; 0x64
   152e4:	cmp	r0, #15
   152e8:	bhi	15314 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   152ec:	ldr	r0, [sl, #40]	; 0x28
   152f0:	ldr	r6, [sl, #48]	; 0x30
   152f4:	mov	r1, #6
   152f8:	mov	r2, #16
   152fc:	mov	r3, #0
   15300:	str	r1, [sp]
   15304:	mov	r1, r7
   15308:	blx	r6
   1530c:	cmp	r0, #0
   15310:	bne	1552c <flatcc_builder_create_cached_vtable@@Base+0x324>
   15314:	ldr	r0, [r7]
   15318:	mov	r7, #0
   1531c:	cmp	r0, #0
   15320:	beq	15440 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15324:	mov	r0, #16
   15328:	mov	r2, #5
   1532c:	add	r1, sl, #92	; 0x5c
   15330:	mov	r3, #1
   15334:	mov	r4, #256	; 0x100
   15338:	str	r0, [sl, #124]	; 0x7c
   1533c:	ldr	r0, [sl, #40]	; 0x28
   15340:	ldr	r6, [sl, #48]	; 0x30
   15344:	str	r2, [sp]
   15348:	mov	r2, #256	; 0x100
   1534c:	blx	r6
   15350:	cmp	r0, #0
   15354:	bne	15440 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15358:	ldr	r0, [sl, #96]	; 0x60
   1535c:	mov	r1, r4
   15360:	lsl	r4, r4, #1
   15364:	cmp	r0, r1, lsl #1
   15368:	bcs	1535c <flatcc_builder_create_cached_vtable@@Base+0x154>
   1536c:	lsr	r1, r1, #2
   15370:	mvn	r0, #0
   15374:	mov	r2, #1
   15378:	add	r0, r0, #1
   1537c:	cmp	r1, r2, lsl r0
   15380:	bhi	15378 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15384:	str	r0, [sl, #116]	; 0x74
   15388:	b	15230 <flatcc_builder_create_cached_vtable@@Base+0x28>
   1538c:	ldr	r9, [sp, #8]
   15390:	b	153a0 <flatcc_builder_create_cached_vtable@@Base+0x198>
   15394:	mov	r7, #0
   15398:	b	15440 <flatcc_builder_create_cached_vtable@@Base+0x238>
   1539c:	mov	r9, #0
   153a0:	ldr	r4, [sl, #124]	; 0x7c
   153a4:	ldr	r0, [sl, #104]	; 0x68
   153a8:	add	r7, sl, #100	; 0x64
   153ac:	add	r2, r4, #16
   153b0:	cmp	r2, r0
   153b4:	bls	153dc <flatcc_builder_create_cached_vtable@@Base+0x1d4>
   153b8:	ldr	r0, [sl, #40]	; 0x28
   153bc:	ldr	r6, [sl, #48]	; 0x30
   153c0:	mov	r1, #6
   153c4:	mov	r3, #0
   153c8:	str	r1, [sp]
   153cc:	mov	r1, r7
   153d0:	blx	r6
   153d4:	cmp	r0, #0
   153d8:	bne	1552c <flatcc_builder_create_cached_vtable@@Base+0x324>
   153dc:	ldr	r0, [r7]
   153e0:	mov	r7, #0
   153e4:	adds	r4, r0, r4
   153e8:	beq	15440 <flatcc_builder_create_cached_vtable@@Base+0x238>
   153ec:	ldr	r0, [sl, #124]	; 0x7c
   153f0:	ldr	r1, [sl, #152]	; 0x98
   153f4:	add	r2, r0, #16
   153f8:	str	r2, [sl, #124]	; 0x7c
   153fc:	ldr	r2, [sp, #12]
   15400:	str	r1, [r4, #4]
   15404:	ldr	r1, [r2]
   15408:	str	r1, [r4, #12]
   1540c:	ldr	r1, [sp, #16]
   15410:	str	r0, [r2]
   15414:	mov	r0, sl
   15418:	mov	r2, r5
   1541c:	bl	150c8 <flatcc_builder_create_vtable@@Base>
   15420:	cmp	r0, #0
   15424:	str	r0, [r4]
   15428:	beq	15440 <flatcc_builder_create_cached_vtable@@Base+0x238>
   1542c:	cmp	r9, #0
   15430:	beq	1544c <flatcc_builder_create_cached_vtable@@Base+0x244>
   15434:	ldr	r0, [r9, #8]
   15438:	str	r0, [r4, #8]
   1543c:	ldr	r7, [r4]
   15440:	mov	r0, r7
   15444:	sub	sp, fp, #28
   15448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1544c:	ldr	r6, [sl, #120]	; 0x78
   15450:	ldr	r0, [sl, #172]	; 0xac
   15454:	add	r2, r6, r5
   15458:	cmp	r0, #0
   1545c:	beq	15498 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15460:	cmp	r0, r2
   15464:	bcs	15498 <flatcc_builder_create_cached_vtable@@Base+0x290>
   15468:	ldr	r0, [sl, #116]	; 0x74
   1546c:	cmp	r0, #0
   15470:	beq	1543c <flatcc_builder_create_cached_vtable@@Base+0x234>
   15474:	ldr	r0, [sl, #92]	; 0x5c
   15478:	ldr	r2, [sl, #96]	; 0x60
   1547c:	mov	r1, #0
   15480:	mov	r5, #0
   15484:	bl	12778 <memset@plt>
   15488:	mov	r0, #16
   1548c:	str	r5, [sl, #120]	; 0x78
   15490:	str	r0, [sl, #124]	; 0x7c
   15494:	b	1543c <flatcc_builder_create_cached_vtable@@Base+0x234>
   15498:	ldr	r0, [sl, #72]	; 0x48
   1549c:	add	r7, sl, #68	; 0x44
   154a0:	cmp	r2, r0
   154a4:	bls	154cc <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   154a8:	ldr	r0, [sl, #40]	; 0x28
   154ac:	ldr	ip, [sl, #48]	; 0x30
   154b0:	mov	r1, #2
   154b4:	mov	r3, #0
   154b8:	str	r1, [sp]
   154bc:	mov	r1, r7
   154c0:	blx	ip
   154c4:	cmp	r0, #0
   154c8:	bne	1552c <flatcc_builder_create_cached_vtable@@Base+0x324>
   154cc:	ldr	r0, [r7]
   154d0:	adds	r0, r0, r6
   154d4:	beq	154f8 <flatcc_builder_create_cached_vtable@@Base+0x2f0>
   154d8:	ldr	r1, [sl, #120]	; 0x78
   154dc:	mov	r2, r5
   154e0:	str	r1, [r4, #8]
   154e4:	add	r1, r1, r5
   154e8:	str	r1, [sl, #120]	; 0x78
   154ec:	ldr	r1, [sp, #16]
   154f0:	bl	12718 <memcpy@plt>
   154f4:	b	1543c <flatcc_builder_create_cached_vtable@@Base+0x234>
   154f8:	mvn	r7, #0
   154fc:	b	15440 <flatcc_builder_create_cached_vtable@@Base+0x238>
   15500:	ldr	r0, [sp, #12]
   15504:	cmp	r6, r0
   15508:	beq	15524 <flatcc_builder_create_cached_vtable@@Base+0x31c>
   1550c:	mov	r1, r0
   15510:	ldr	r0, [r9, #12]
   15514:	str	r0, [r6]
   15518:	ldr	r0, [r1]
   1551c:	str	r0, [r9, #12]
   15520:	str	r7, [r1]
   15524:	ldr	r7, [r9]
   15528:	b	15440 <flatcc_builder_create_cached_vtable@@Base+0x238>
   1552c:	movw	r0, #40692	; 0x9ef4
   15530:	movw	r1, #36174	; 0x8d4e
   15534:	movw	r3, #40238	; 0x9d2e
   15538:	mov	r2, #308	; 0x134
   1553c:	movt	r0, #1
   15540:	movt	r1, #1
   15544:	movt	r3, #1
   15548:	bl	127a8 <__assert_fail@plt>
   1554c:	movw	r0, #40632	; 0x9eb8
   15550:	movw	r1, #36174	; 0x8d4e
   15554:	movw	r3, #40647	; 0x9ec7
   15558:	movw	r2, #342	; 0x156
   1555c:	movt	r0, #1
   15560:	movt	r1, #1
   15564:	movt	r3, #1
   15568:	bl	127a8 <__assert_fail@plt>

0001556c <flatcc_builder_create_table@@Base>:
   1556c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15570:	add	fp, sp, #24
   15574:	sub	sp, sp, #80	; 0x50
   15578:	ldr	r5, [fp, #12]
   1557c:	cmn	r5, #1
   15580:	ble	156d4 <flatcc_builder_create_table@@Base+0x168>
   15584:	ldr	ip, [fp, #16]
   15588:	tst	ip, #1
   1558c:	beq	156f4 <flatcc_builder_create_table@@Base+0x188>
   15590:	mov	r8, r0
   15594:	ldrh	r0, [r0, #128]	; 0x80
   15598:	cmp	r3, #4
   1559c:	movls	r3, #4
   155a0:	cmp	r0, r3
   155a4:	strhcc	r3, [r8, #128]	; 0x80
   155a8:	sub	r3, r3, #1
   155ac:	cmp	r5, #1
   155b0:	ldr	r4, [r8, #136]	; 0x88
   155b4:	sub	r0, r4, r2
   155b8:	and	r0, r0, r3
   155bc:	add	r3, ip, r0
   155c0:	mvn	ip, #3
   155c4:	sub	r6, ip, r2
   155c8:	add	r4, r6, r4
   155cc:	add	r6, r4, #1
   155d0:	sub	r3, r6, r3
   155d4:	str	r3, [fp, #-28]	; 0xffffffe4
   155d8:	blt	15604 <flatcc_builder_create_table@@Base+0x98>
   155dc:	ldr	r3, [fp, #8]
   155e0:	sub	r6, r4, r0
   155e4:	sub	r4, ip, r6
   155e8:	ldrh	r6, [r3], #2
   155ec:	subs	r5, r5, #1
   155f0:	ldr	r7, [r6, r1]
   155f4:	add	r7, r4, r7
   155f8:	sub	r7, r7, r6
   155fc:	str	r7, [r6, r1]
   15600:	bne	155e8 <flatcc_builder_create_table@@Base+0x7c>
   15604:	sub	r3, fp, #28
   15608:	mov	r4, #4
   1560c:	cmp	r2, #0
   15610:	str	r3, [sp, #12]
   15614:	mov	r3, #1
   15618:	str	r4, [sp, #4]
   1561c:	str	r4, [sp, #16]
   15620:	str	r3, [sp, #8]
   15624:	beq	15640 <flatcc_builder_create_table@@Base+0xd4>
   15628:	mov	r3, #2
   1562c:	add	r4, r2, #4
   15630:	str	r1, [sp, #20]
   15634:	str	r2, [sp, #24]
   15638:	str	r3, [sp, #8]
   1563c:	str	r4, [sp, #4]
   15640:	cmp	r0, #0
   15644:	beq	15670 <flatcc_builder_create_table@@Base+0x104>
   15648:	add	r1, sp, #4
   1564c:	movw	r2, #35644	; 0x8b3c
   15650:	add	r4, r4, r0
   15654:	add	r1, r1, r3, lsl #3
   15658:	add	r3, r3, #1
   1565c:	movt	r2, #1
   15660:	str	r4, [sp, #4]
   15664:	str	r2, [r1, #8]
   15668:	str	r0, [r1, #12]
   1566c:	str	r3, [sp, #8]
   15670:	cmp	r4, #0
   15674:	ble	15714 <flatcc_builder_create_table@@Base+0x1a8>
   15678:	ldr	r0, [r8, #136]	; 0x88
   1567c:	ldr	r7, [r8, #44]	; 0x2c
   15680:	add	r1, sp, #4
   15684:	mov	r2, r3
   15688:	add	r1, r1, #8
   1568c:	sub	r5, r0, r4
   15690:	ldr	r0, [r8, #36]	; 0x24
   15694:	str	r4, [sp]
   15698:	mov	r3, r5
   1569c:	blx	r7
   156a0:	cmp	r0, #0
   156a4:	streq	r5, [r8, #136]	; 0x88
   156a8:	moveq	r0, r5
   156ac:	subeq	sp, fp, #24
   156b0:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   156b4:	movw	r0, #40692	; 0x9ef4
   156b8:	movw	r1, #36174	; 0x8d4e
   156bc:	movw	r3, #40371	; 0x9db3
   156c0:	movw	r2, #651	; 0x28b
   156c4:	movt	r0, #1
   156c8:	movt	r1, #1
   156cc:	movt	r3, #1
   156d0:	bl	127a8 <__assert_fail@plt>
   156d4:	movw	r0, #38058	; 0x94aa
   156d8:	movw	r1, #36174	; 0x8d4e
   156dc:	movw	r3, #38076	; 0x94bc
   156e0:	movw	r2, #1237	; 0x4d5
   156e4:	movt	r0, #1
   156e8:	movt	r1, #1
   156ec:	movt	r3, #1
   156f0:	bl	127a8 <__assert_fail@plt>
   156f4:	movw	r0, #38232	; 0x9558
   156f8:	movw	r1, #36174	; 0x8d4e
   156fc:	movw	r3, #38076	; 0x94bc
   15700:	movw	r2, #1243	; 0x4db
   15704:	movt	r0, #1
   15708:	movt	r1, #1
   1570c:	movt	r3, #1
   15710:	bl	127a8 <__assert_fail@plt>
   15714:	movw	r0, #40692	; 0x9ef4
   15718:	movw	r1, #36174	; 0x8d4e
   1571c:	movw	r3, #40371	; 0x9db3
   15720:	movw	r2, #647	; 0x287
   15724:	movt	r0, #1
   15728:	movt	r1, #1
   1572c:	movt	r3, #1
   15730:	bl	127a8 <__assert_fail@plt>

00015734 <flatcc_builder_check_required_field@@Base>:
   15734:	ldr	r2, [r0, #32]
   15738:	ldrh	r2, [r2, #14]
   1573c:	cmp	r2, #3
   15740:	bne	15770 <flatcc_builder_check_required_field@@Base+0x3c>
   15744:	ldrh	r3, [r0, #8]
   15748:	mov	r2, #0
   1574c:	cmp	r3, r1
   15750:	bls	15768 <flatcc_builder_check_required_field@@Base+0x34>
   15754:	ldr	r0, [r0, #4]
   15758:	add	r0, r0, r1, lsl #1
   1575c:	ldrh	r2, [r0]
   15760:	cmp	r2, #0
   15764:	movwne	r2, #1
   15768:	mov	r0, r2
   1576c:	bx	lr
   15770:	push	{fp, lr}
   15774:	mov	fp, sp
   15778:	movw	r0, #38243	; 0x9563
   1577c:	movw	r1, #36174	; 0x8d4e
   15780:	movw	r3, #38286	; 0x958e
   15784:	movw	r2, #1272	; 0x4f8
   15788:	movt	r0, #1
   1578c:	movt	r1, #1
   15790:	movt	r3, #1
   15794:	bl	127a8 <__assert_fail@plt>

00015798 <flatcc_builder_check_union_field@@Base>:
   15798:	mov	r2, r0
   1579c:	ldr	r0, [r0, #32]
   157a0:	ldrh	r0, [r0, #14]
   157a4:	cmp	r0, #3
   157a8:	bne	15808 <flatcc_builder_check_union_field@@Base+0x70>
   157ac:	cmp	r1, #0
   157b0:	mov	r0, #0
   157b4:	ldrhne	r3, [r2, #8]
   157b8:	cmpne	r3, r1
   157bc:	bhi	157c4 <flatcc_builder_check_union_field@@Base+0x2c>
   157c0:	bx	lr
   157c4:	ldr	r0, [r2, #4]
   157c8:	add	r0, r0, r1, lsl #1
   157cc:	ldrh	r1, [r0, #-2]
   157d0:	cmp	r1, #0
   157d4:	beq	157f8 <flatcc_builder_check_union_field@@Base+0x60>
   157d8:	ldr	r2, [r2, #16]
   157dc:	ldrh	r0, [r0]
   157e0:	ldrb	r1, [r2, r1]
   157e4:	cmp	r1, #0
   157e8:	beq	157fc <flatcc_builder_check_union_field@@Base+0x64>
   157ec:	cmp	r0, #0
   157f0:	movwne	r0, #1
   157f4:	bx	lr
   157f8:	ldrh	r0, [r0]
   157fc:	clz	r0, r0
   15800:	lsr	r0, r0, #5
   15804:	bx	lr
   15808:	push	{fp, lr}
   1580c:	mov	fp, sp
   15810:	movw	r0, #38243	; 0x9563
   15814:	movw	r1, #36174	; 0x8d4e
   15818:	movw	r3, #38369	; 0x95e1
   1581c:	movw	r2, #1279	; 0x4ff
   15820:	movt	r0, #1
   15824:	movt	r1, #1
   15828:	movt	r3, #1
   1582c:	bl	127a8 <__assert_fail@plt>

00015830 <flatcc_builder_check_required@@Base>:
   15830:	push	{fp, lr}
   15834:	mov	fp, sp
   15838:	mov	r3, r0
   1583c:	ldr	r0, [r0, #32]
   15840:	ldrh	r0, [r0, #14]
   15844:	cmp	r0, #3
   15848:	bne	158a0 <flatcc_builder_check_required@@Base+0x70>
   1584c:	ldrh	ip, [r3, #8]
   15850:	mov	r0, #0
   15854:	cmp	ip, r2
   15858:	movge	r0, #1
   1585c:	cmpge	r2, #1
   15860:	bge	15868 <flatcc_builder_check_required@@Base+0x38>
   15864:	pop	{fp, pc}
   15868:	ldr	ip, [r3, #4]
   1586c:	mov	lr, #0
   15870:	b	15884 <flatcc_builder_check_required@@Base+0x54>
   15874:	add	lr, lr, #1
   15878:	add	r1, r1, #2
   1587c:	cmp	lr, r2
   15880:	popge	{fp, pc}
   15884:	ldrh	r3, [r1]
   15888:	add	r3, ip, r3, lsl #1
   1588c:	ldrh	r3, [r3]
   15890:	cmp	r3, #0
   15894:	bne	15874 <flatcc_builder_check_required@@Base+0x44>
   15898:	mov	r0, #0
   1589c:	pop	{fp, pc}
   158a0:	movw	r0, #38243	; 0x9563
   158a4:	movw	r1, #36174	; 0x8d4e
   158a8:	movw	r3, #38449	; 0x9631
   158ac:	movw	r2, #1297	; 0x511
   158b0:	movt	r0, #1
   158b4:	movt	r1, #1
   158b8:	movt	r3, #1
   158bc:	bl	127a8 <__assert_fail@plt>

000158c0 <flatcc_builder_end_table@@Base>:
   158c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   158c4:	add	fp, sp, #24
   158c8:	sub	sp, sp, #16
   158cc:	mov	r4, r0
   158d0:	ldr	r0, [r0, #32]
   158d4:	ldrh	r0, [r0, #14]
   158d8:	cmp	r0, #3
   158dc:	bne	15a58 <flatcc_builder_end_table@@Base+0x198>
   158e0:	ldrh	r0, [r4, #8]
   158e4:	ldr	r5, [r4, #4]
   158e8:	mov	r1, #4
   158ec:	movw	r2, #31153	; 0x79b1
   158f0:	movt	r2, #40503	; 0x9e37
   158f4:	add	r0, r1, r0, lsl #1
   158f8:	strh	r0, [r5, #-4]!
   158fc:	ldrh	r1, [r4, #20]
   15900:	uxth	r6, r0
   15904:	add	r1, r1, #4
   15908:	strh	r1, [r5, #2]
   1590c:	uxth	r1, r1
   15910:	ldr	r0, [r4, #12]
   15914:	eor	r0, r0, r6
   15918:	mul	r0, r0, r2
   1591c:	eor	r0, r0, r1
   15920:	mov	r1, r5
   15924:	mul	r3, r0, r2
   15928:	mov	r0, r4
   1592c:	mov	r2, r6
   15930:	str	r3, [r4, #12]
   15934:	bl	15208 <flatcc_builder_create_cached_vtable@@Base>
   15938:	cmp	r0, #0
   1593c:	beq	15a48 <flatcc_builder_end_table@@Base+0x188>
   15940:	mov	r7, r0
   15944:	mov	r0, r5
   15948:	mov	r1, #0
   1594c:	mov	r2, r6
   15950:	mov	r8, #0
   15954:	bl	12778 <memset@plt>
   15958:	ldr	r5, [r4, #32]
   1595c:	ldr	r0, [r4, #76]	; 0x4c
   15960:	ldr	r6, [r4]
   15964:	ldrh	r3, [r4, #130]	; 0x82
   15968:	ldr	r1, [r4, #16]
   1596c:	ldr	r2, [r4, #20]
   15970:	ldr	r5, [r5, #20]
   15974:	add	r0, r0, r5
   15978:	sub	r6, r6, r0
   1597c:	asr	r6, r6, #1
   15980:	stm	sp, {r0, r6, r7}
   15984:	mov	r0, r4
   15988:	bl	1556c <flatcc_builder_create_table@@Base>
   1598c:	cmp	r0, #0
   15990:	beq	15a4c <flatcc_builder_end_table@@Base+0x18c>
   15994:	ldr	r1, [r4, #32]
   15998:	mov	r5, r0
   1599c:	ldr	r0, [r4, #16]
   159a0:	ldr	r2, [r4, #20]
   159a4:	ldr	r3, [r4, #52]	; 0x34
   159a8:	ldr	r7, [r1, #24]
   159ac:	str	r7, [r4, #12]
   159b0:	ldrh	r7, [r1, #28]
   159b4:	strh	r7, [r4, #8]
   159b8:	ldr	r7, [r1, #16]
   159bc:	add	r3, r3, r7
   159c0:	str	r3, [r4, #4]
   159c4:	ldr	r3, [r4, #76]	; 0x4c
   159c8:	ldr	r1, [r1, #20]
   159cc:	add	r1, r3, r1
   159d0:	str	r1, [r4]
   159d4:	mov	r1, #0
   159d8:	bl	12778 <memset@plt>
   159dc:	ldr	r0, [r4, #32]
   159e0:	ldr	r1, [r4, #60]	; 0x3c
   159e4:	ldr	r2, [r4, #64]	; 0x40
   159e8:	mov	r8, r5
   159ec:	ldr	r3, [r0, #8]
   159f0:	str	r3, [r4, #20]
   159f4:	ldr	r3, [r0]
   159f8:	str	r3, [r4, #28]
   159fc:	add	r1, r1, r3
   15a00:	ldr	r7, [r0, #4]
   15a04:	str	r1, [r4, #16]
   15a08:	sub	r1, r2, r3
   15a0c:	cmp	r1, r7
   15a10:	movhi	r1, r7
   15a14:	str	r1, [r4, #24]
   15a18:	ldrh	r1, [r4, #130]	; 0x82
   15a1c:	ldrh	r2, [r4, #128]	; 0x80
   15a20:	cmp	r2, r1
   15a24:	strhcc	r1, [r4, #128]	; 0x80
   15a28:	ldrh	r1, [r0, #12]
   15a2c:	sub	r0, r0, #36	; 0x24
   15a30:	str	r0, [r4, #32]
   15a34:	strh	r1, [r4, #130]	; 0x82
   15a38:	ldr	r0, [r4, #156]	; 0x9c
   15a3c:	sub	r0, r0, #1
   15a40:	str	r0, [r4, #156]	; 0x9c
   15a44:	b	15a4c <flatcc_builder_end_table@@Base+0x18c>
   15a48:	mov	r8, #0
   15a4c:	mov	r0, r8
   15a50:	sub	sp, fp, #24
   15a54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a58:	movw	r0, #38243	; 0x9563
   15a5c:	movw	r1, #36174	; 0x8d4e
   15a60:	movw	r3, #38539	; 0x968b
   15a64:	movw	r2, #1317	; 0x525
   15a68:	movt	r0, #1
   15a6c:	movt	r1, #1
   15a70:	movt	r3, #1
   15a74:	bl	127a8 <__assert_fail@plt>

00015a78 <flatcc_builder_create_vector@@Base>:
   15a78:	push	{r4, r5, r6, r7, fp, lr}
   15a7c:	add	fp, sp, #16
   15a80:	sub	sp, sp, #80	; 0x50
   15a84:	mov	r7, r0
   15a88:	ldr	r0, [fp, #12]
   15a8c:	cmp	r2, r0
   15a90:	bhi	15b90 <flatcc_builder_create_vector@@Base+0x118>
   15a94:	ldr	r0, [fp, #8]
   15a98:	mov	r4, r2
   15a9c:	ldrh	r2, [r7, #128]	; 0x80
   15aa0:	mov	r5, #4
   15aa4:	cmp	r0, #4
   15aa8:	movls	r0, r5
   15aac:	cmp	r2, r0
   15ab0:	sub	r2, fp, #20
   15ab4:	strhcc	r0, [r7, #128]	; 0x80
   15ab8:	str	r4, [fp, #-20]	; 0xffffffec
   15abc:	sub	r0, r0, #1
   15ac0:	ldr	ip, [r7, #136]	; 0x88
   15ac4:	str	r2, [sp, #12]
   15ac8:	mov	r2, #1
   15acc:	str	r5, [sp, #4]
   15ad0:	str	r5, [sp, #16]
   15ad4:	str	r2, [sp, #8]
   15ad8:	mls	r6, r3, r4, ip
   15adc:	mul	r3, r3, r4
   15ae0:	and	r0, r6, r0
   15ae4:	cmp	r3, #0
   15ae8:	beq	15b04 <flatcc_builder_create_vector@@Base+0x8c>
   15aec:	mov	r2, #2
   15af0:	add	r5, r3, #4
   15af4:	str	r1, [sp, #20]
   15af8:	str	r3, [sp, #24]
   15afc:	str	r2, [sp, #8]
   15b00:	str	r5, [sp, #4]
   15b04:	cmp	r0, #0
   15b08:	beq	15b34 <flatcc_builder_create_vector@@Base+0xbc>
   15b0c:	add	r1, sp, #4
   15b10:	movw	r3, #35644	; 0x8b3c
   15b14:	add	r5, r5, r0
   15b18:	add	r1, r1, r2, lsl #3
   15b1c:	add	r2, r2, #1
   15b20:	movt	r3, #1
   15b24:	str	r5, [sp, #4]
   15b28:	str	r3, [r1, #8]
   15b2c:	str	r0, [r1, #12]
   15b30:	str	r2, [sp, #8]
   15b34:	cmp	r5, #0
   15b38:	ble	15bb0 <flatcc_builder_create_vector@@Base+0x138>
   15b3c:	ldr	r0, [r7, #36]	; 0x24
   15b40:	ldr	r6, [r7, #44]	; 0x2c
   15b44:	add	r1, sp, #4
   15b48:	sub	r4, ip, r5
   15b4c:	str	r5, [sp]
   15b50:	add	r1, r1, #8
   15b54:	mov	r3, r4
   15b58:	blx	r6
   15b5c:	cmp	r0, #0
   15b60:	streq	r4, [r7, #136]	; 0x88
   15b64:	moveq	r0, r4
   15b68:	subeq	sp, fp, #16
   15b6c:	popeq	{r4, r5, r6, r7, fp, pc}
   15b70:	movw	r0, #40692	; 0x9ef4
   15b74:	movw	r1, #36174	; 0x8d4e
   15b78:	movw	r3, #40371	; 0x9db3
   15b7c:	movw	r2, #651	; 0x28b
   15b80:	movt	r0, #1
   15b84:	movt	r1, #1
   15b88:	movt	r3, #1
   15b8c:	bl	127a8 <__assert_fail@plt>
   15b90:	movw	r0, #38605	; 0x96cd
   15b94:	movw	r1, #36174	; 0x8d4e
   15b98:	movw	r3, #38624	; 0x96e0
   15b9c:	movw	r2, #1365	; 0x555
   15ba0:	movt	r0, #1
   15ba4:	movt	r1, #1
   15ba8:	movt	r3, #1
   15bac:	bl	127a8 <__assert_fail@plt>
   15bb0:	movw	r0, #40692	; 0x9ef4
   15bb4:	movw	r1, #36174	; 0x8d4e
   15bb8:	movw	r3, #40371	; 0x9db3
   15bbc:	movw	r2, #647	; 0x287
   15bc0:	movt	r0, #1
   15bc4:	movt	r1, #1
   15bc8:	movt	r3, #1
   15bcc:	bl	127a8 <__assert_fail@plt>

00015bd0 <flatcc_builder_end_vector@@Base>:
   15bd0:	push	{r4, r5, fp, lr}
   15bd4:	add	fp, sp, #8
   15bd8:	sub	sp, sp, #8
   15bdc:	mov	r4, r0
   15be0:	ldr	r0, [r0, #32]
   15be4:	ldrh	r1, [r0, #14]
   15be8:	cmp	r1, #4
   15bec:	bne	15ca0 <flatcc_builder_end_vector@@Base+0xd0>
   15bf0:	ldr	r3, [r0, #16]
   15bf4:	ldr	r2, [r0, #20]
   15bf8:	ldr	r0, [r0, #24]
   15bfc:	ldr	r1, [r4, #16]
   15c00:	ldrh	r5, [r4, #130]	; 0x82
   15c04:	str	r0, [sp, #4]
   15c08:	mov	r0, r4
   15c0c:	str	r5, [sp]
   15c10:	bl	15a78 <flatcc_builder_create_vector@@Base>
   15c14:	mov	r5, r0
   15c18:	cmp	r0, #0
   15c1c:	beq	15c94 <flatcc_builder_end_vector@@Base+0xc4>
   15c20:	ldr	r0, [r4, #16]
   15c24:	ldr	r2, [r4, #20]
   15c28:	mov	r1, #0
   15c2c:	bl	12778 <memset@plt>
   15c30:	ldr	r0, [r4, #32]
   15c34:	ldr	r1, [r4, #60]	; 0x3c
   15c38:	ldr	ip, [r4, #64]	; 0x40
   15c3c:	ldr	r3, [r0, #8]
   15c40:	str	r3, [r4, #20]
   15c44:	ldr	r3, [r0]
   15c48:	str	r3, [r4, #28]
   15c4c:	add	r1, r1, r3
   15c50:	ldr	r2, [r0, #4]
   15c54:	str	r1, [r4, #16]
   15c58:	sub	r1, ip, r3
   15c5c:	cmp	r1, r2
   15c60:	movhi	r1, r2
   15c64:	str	r1, [r4, #24]
   15c68:	ldrh	r1, [r4, #130]	; 0x82
   15c6c:	ldrh	r2, [r4, #128]	; 0x80
   15c70:	cmp	r2, r1
   15c74:	strhcc	r1, [r4, #128]	; 0x80
   15c78:	ldrh	r1, [r0, #12]
   15c7c:	sub	r0, r0, #36	; 0x24
   15c80:	str	r0, [r4, #32]
   15c84:	strh	r1, [r4, #130]	; 0x82
   15c88:	ldr	r0, [r4, #156]	; 0x9c
   15c8c:	sub	r0, r0, #1
   15c90:	str	r0, [r4, #156]	; 0x9c
   15c94:	mov	r0, r5
   15c98:	sub	sp, fp, #8
   15c9c:	pop	{r4, r5, fp, pc}
   15ca0:	movw	r0, #36977	; 0x9071
   15ca4:	movw	r1, #36174	; 0x8d4e
   15ca8:	movw	r3, #38742	; 0x9756
   15cac:	movw	r2, #1400	; 0x578
   15cb0:	movt	r0, #1
   15cb4:	movt	r1, #1
   15cb8:	movt	r3, #1
   15cbc:	bl	127a8 <__assert_fail@plt>

00015cc0 <flatcc_builder_vector_count@@Base>:
   15cc0:	ldr	r0, [r0, #32]
   15cc4:	ldr	r0, [r0, #20]
   15cc8:	bx	lr

00015ccc <flatcc_builder_vector_edit@@Base>:
   15ccc:	ldr	r0, [r0, #16]
   15cd0:	bx	lr

00015cd4 <flatcc_builder_create_offset_vector_direct@@Base>:
   15cd4:	mov	r3, #0
   15cd8:	b	15cdc <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15cdc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ce0:	add	fp, sp, #24
   15ce4:	sub	sp, sp, #80	; 0x50
   15ce8:	mov	r6, #0
   15cec:	cmn	r2, #-1073741823	; 0xc0000001
   15cf0:	bhi	15e2c <flatcc_builder_create_offset_vector_direct@@Base+0x158>
   15cf4:	mov	r8, r0
   15cf8:	ldrh	r0, [r0, #128]	; 0x80
   15cfc:	sub	r7, fp, #28
   15d00:	mov	r5, #4
   15d04:	mov	r4, #1
   15d08:	cmp	r0, #3
   15d0c:	movls	r0, #4
   15d10:	strhls	r0, [r8, #128]	; 0x80
   15d14:	str	r2, [fp, #-28]	; 0xffffffe4
   15d18:	ldr	ip, [r8, #136]	; 0x88
   15d1c:	str	r7, [sp, #12]
   15d20:	mov	r7, #0
   15d24:	str	r5, [sp, #4]
   15d28:	str	r5, [sp, #16]
   15d2c:	str	r4, [sp, #8]
   15d30:	cmp	r7, r2, lsl #2
   15d34:	and	r6, ip, #3
   15d38:	beq	15d58 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   15d3c:	lsl	r7, r2, #2
   15d40:	mov	r4, #2
   15d44:	str	r1, [sp, #20]
   15d48:	add	r5, r7, #4
   15d4c:	str	r7, [sp, #24]
   15d50:	str	r4, [sp, #8]
   15d54:	str	r5, [sp, #4]
   15d58:	cmp	r6, #0
   15d5c:	beq	15d88 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   15d60:	add	r7, sp, #4
   15d64:	movw	r0, #35644	; 0x8b3c
   15d68:	add	r5, r5, r6
   15d6c:	add	r7, r7, r4, lsl #3
   15d70:	add	r4, r4, #1
   15d74:	movt	r0, #1
   15d78:	str	r5, [sp, #4]
   15d7c:	str	r0, [r7, #8]
   15d80:	str	r6, [r7, #12]
   15d84:	str	r4, [sp, #8]
   15d88:	cmp	r2, #0
   15d8c:	beq	15df4 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
   15d90:	mvn	r0, #3
   15d94:	mov	r6, #0
   15d98:	sub	r0, r0, ip
   15d9c:	add	r0, r0, r5
   15da0:	ldr	r7, [r1, r6, lsl #2]
   15da4:	cmp	r7, #0
   15da8:	beq	15dcc <flatcc_builder_create_offset_vector_direct@@Base+0xf8>
   15dac:	add	r7, r0, r7
   15db0:	cmp	r3, #0
   15db4:	str	r7, [r1, r6, lsl #2]
   15db8:	beq	15de0 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   15dbc:	ldrb	r7, [r3, r6]
   15dc0:	cmp	r7, #0
   15dc4:	bne	15de0 <flatcc_builder_create_offset_vector_direct@@Base+0x10c>
   15dc8:	b	15e38 <flatcc_builder_create_offset_vector_direct@@Base+0x164>
   15dcc:	cmp	r3, #0
   15dd0:	beq	15e78 <flatcc_builder_create_offset_vector_direct@@Base+0x1a4>
   15dd4:	ldrb	r7, [r3, r6]
   15dd8:	cmp	r7, #0
   15ddc:	bne	15e58 <flatcc_builder_create_offset_vector_direct@@Base+0x184>
   15de0:	add	r6, r6, #1
   15de4:	sub	r0, r0, #4
   15de8:	cmp	r6, r2
   15dec:	bcc	15da0 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   15df0:	ldr	ip, [r8, #136]	; 0x88
   15df4:	cmp	r5, #0
   15df8:	ble	15e98 <flatcc_builder_create_offset_vector_direct@@Base+0x1c4>
   15dfc:	ldr	r0, [r8, #36]	; 0x24
   15e00:	ldr	r7, [r8, #44]	; 0x2c
   15e04:	add	r1, sp, #4
   15e08:	sub	r6, ip, r5
   15e0c:	mov	r2, r4
   15e10:	str	r5, [sp]
   15e14:	add	r1, r1, #8
   15e18:	mov	r3, r6
   15e1c:	blx	r7
   15e20:	cmp	r0, #0
   15e24:	bne	15eb8 <flatcc_builder_create_offset_vector_direct@@Base+0x1e4>
   15e28:	str	r6, [r8, #136]	; 0x88
   15e2c:	mov	r0, r6
   15e30:	sub	sp, fp, #24
   15e34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e38:	movw	r0, #40680	; 0x9ee8
   15e3c:	movw	r1, #36174	; 0x8d4e
   15e40:	movw	r3, #40694	; 0x9ef6
   15e44:	movw	r2, #1457	; 0x5b1
   15e48:	movt	r0, #1
   15e4c:	movt	r1, #1
   15e50:	movt	r3, #1
   15e54:	bl	127a8 <__assert_fail@plt>
   15e58:	movw	r0, #40825	; 0x9f79
   15e5c:	movw	r1, #36174	; 0x8d4e
   15e60:	movw	r3, #40694	; 0x9ef6
   15e64:	movw	r2, #1461	; 0x5b5
   15e68:	movt	r0, #1
   15e6c:	movt	r1, #1
   15e70:	movt	r3, #1
   15e74:	bl	127a8 <__assert_fail@plt>
   15e78:	movw	r0, #40692	; 0x9ef4
   15e7c:	movw	r1, #36174	; 0x8d4e
   15e80:	movw	r3, #40694	; 0x9ef6
   15e84:	movw	r2, #1463	; 0x5b7
   15e88:	movt	r0, #1
   15e8c:	movt	r1, #1
   15e90:	movt	r3, #1
   15e94:	bl	127a8 <__assert_fail@plt>
   15e98:	movw	r0, #40692	; 0x9ef4
   15e9c:	movw	r1, #36174	; 0x8d4e
   15ea0:	movw	r3, #40371	; 0x9db3
   15ea4:	movw	r2, #647	; 0x287
   15ea8:	movt	r0, #1
   15eac:	movt	r1, #1
   15eb0:	movt	r3, #1
   15eb4:	bl	127a8 <__assert_fail@plt>
   15eb8:	movw	r0, #40692	; 0x9ef4
   15ebc:	movw	r1, #36174	; 0x8d4e
   15ec0:	movw	r3, #40371	; 0x9db3
   15ec4:	movw	r2, #651	; 0x28b
   15ec8:	movt	r0, #1
   15ecc:	movt	r1, #1
   15ed0:	movt	r3, #1
   15ed4:	bl	127a8 <__assert_fail@plt>

00015ed8 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15ed8:	push	{r4, r5, fp, lr}
   15edc:	add	fp, sp, #8
   15ee0:	mov	r4, r0
   15ee4:	ldr	r0, [r0, #32]
   15ee8:	mov	r3, r1
   15eec:	ldrh	r1, [r0, #14]
   15ef0:	cmp	r1, #5
   15ef4:	bne	15f90 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   15ef8:	ldr	r2, [r0, #20]
   15efc:	ldr	r1, [r4, #16]
   15f00:	mov	r0, r4
   15f04:	bl	15cdc <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15f08:	mov	r5, r0
   15f0c:	cmp	r0, #0
   15f10:	beq	15f88 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   15f14:	ldr	r0, [r4, #16]
   15f18:	ldr	r2, [r4, #20]
   15f1c:	mov	r1, #0
   15f20:	bl	12778 <memset@plt>
   15f24:	ldr	r0, [r4, #32]
   15f28:	ldr	r1, [r4, #60]	; 0x3c
   15f2c:	ldr	ip, [r4, #64]	; 0x40
   15f30:	ldr	r3, [r0, #8]
   15f34:	str	r3, [r4, #20]
   15f38:	ldr	r3, [r0]
   15f3c:	str	r3, [r4, #28]
   15f40:	add	r1, r1, r3
   15f44:	ldr	r2, [r0, #4]
   15f48:	str	r1, [r4, #16]
   15f4c:	sub	r1, ip, r3
   15f50:	cmp	r1, r2
   15f54:	movhi	r1, r2
   15f58:	str	r1, [r4, #24]
   15f5c:	ldrh	r1, [r4, #130]	; 0x82
   15f60:	ldrh	r2, [r4, #128]	; 0x80
   15f64:	cmp	r2, r1
   15f68:	strhcc	r1, [r4, #128]	; 0x80
   15f6c:	ldrh	r1, [r0, #12]
   15f70:	sub	r0, r0, #36	; 0x24
   15f74:	str	r0, [r4, #32]
   15f78:	strh	r1, [r4, #130]	; 0x82
   15f7c:	ldr	r0, [r4, #156]	; 0x9c
   15f80:	sub	r0, r0, #1
   15f84:	str	r0, [r4, #156]	; 0x9c
   15f88:	mov	r0, r5
   15f8c:	pop	{r4, r5, fp, pc}
   15f90:	movw	r0, #37226	; 0x916a
   15f94:	movw	r1, #36174	; 0x8d4e
   15f98:	movw	r3, #38883	; 0x97e3
   15f9c:	movw	r2, #1493	; 0x5d5
   15fa0:	movt	r0, #1
   15fa4:	movt	r1, #1
   15fa8:	movt	r3, #1
   15fac:	bl	127a8 <__assert_fail@plt>

00015fb0 <flatcc_builder_offset_vector_edit@@Base>:
   15fb0:	ldr	r0, [r0, #16]
   15fb4:	bx	lr

00015fb8 <flatcc_builder_offset_vector_count@@Base>:
   15fb8:	ldr	r0, [r0, #32]
   15fbc:	ldr	r0, [r0, #20]
   15fc0:	bx	lr

00015fc4 <flatcc_builder_table_add_union@@Base>:
   15fc4:	push	{r4, r5, r6, r7, fp, lr}
   15fc8:	add	fp, sp, #16
   15fcc:	mov	r5, r0
   15fd0:	ldr	r0, [r0, #32]
   15fd4:	ldrh	r0, [r0, #14]
   15fd8:	cmp	r0, #3
   15fdc:	bne	16064 <flatcc_builder_table_add_union@@Base+0xa0>
   15fe0:	mov	r7, r3
   15fe4:	mov	r4, r2
   15fe8:	mov	r6, r1
   15fec:	cmp	r3, #0
   15ff0:	beq	16000 <flatcc_builder_table_add_union@@Base+0x3c>
   15ff4:	uxtb	r0, r4
   15ff8:	cmp	r0, #0
   15ffc:	beq	16084 <flatcc_builder_table_add_union@@Base+0xc0>
   16000:	cmp	r7, #0
   16004:	beq	16020 <flatcc_builder_table_add_union@@Base+0x5c>
   16008:	mov	r0, r5
   1600c:	mov	r1, r6
   16010:	bl	160c4 <flatcc_builder_table_add_offset@@Base>
   16014:	cmp	r0, #0
   16018:	beq	160a4 <flatcc_builder_table_add_union@@Base+0xe0>
   1601c:	str	r7, [r0]
   16020:	sub	r1, r6, #1
   16024:	mov	r0, r5
   16028:	mov	r2, #1
   1602c:	mov	r3, #1
   16030:	bl	16200 <flatcc_builder_table_add@@Base>
   16034:	cmp	r0, #0
   16038:	strbne	r4, [r0]
   1603c:	movne	r0, #0
   16040:	popne	{r4, r5, r6, r7, fp, pc}
   16044:	movw	r0, #39129	; 0x98d9
   16048:	movw	r1, #36174	; 0x8d4e
   1604c:	movw	r3, #38997	; 0x9855
   16050:	movw	r2, #1526	; 0x5f6
   16054:	movt	r0, #1
   16058:	movt	r1, #1
   1605c:	movt	r3, #1
   16060:	bl	127a8 <__assert_fail@plt>
   16064:	movw	r0, #38243	; 0x9563
   16068:	movw	r1, #36174	; 0x8d4e
   1606c:	movw	r3, #38997	; 0x9855
   16070:	movw	r2, #1518	; 0x5ee
   16074:	movt	r0, #1
   16078:	movt	r1, #1
   1607c:	movt	r3, #1
   16080:	bl	127a8 <__assert_fail@plt>
   16084:	movw	r0, #39085	; 0x98ad
   16088:	movw	r1, #36174	; 0x8d4e
   1608c:	movw	r3, #38997	; 0x9855
   16090:	movw	r2, #1519	; 0x5ef
   16094:	movt	r0, #1
   16098:	movt	r1, #1
   1609c:	movt	r3, #1
   160a0:	bl	127a8 <__assert_fail@plt>
   160a4:	movw	r0, #39119	; 0x98cf
   160a8:	movw	r1, #36174	; 0x8d4e
   160ac:	movw	r3, #38997	; 0x9855
   160b0:	movw	r2, #1522	; 0x5f2
   160b4:	movt	r0, #1
   160b8:	movt	r1, #1
   160bc:	movt	r3, #1
   160c0:	bl	127a8 <__assert_fail@plt>

000160c4 <flatcc_builder_table_add_offset@@Base>:
   160c4:	push	{r4, r5, r6, r7, fp, lr}
   160c8:	add	fp, sp, #16
   160cc:	mov	r4, r0
   160d0:	ldr	r0, [r0, #32]
   160d4:	ldrh	r0, [r0, #14]
   160d8:	cmp	r0, #3
   160dc:	bne	161a0 <flatcc_builder_table_add_offset@@Base+0xdc>
   160e0:	movw	r0, #32765	; 0x7ffd
   160e4:	mov	r5, r1
   160e8:	cmp	r1, r0
   160ec:	bcs	161c0 <flatcc_builder_table_add_offset@@Base+0xfc>
   160f0:	ldr	r0, [r4, #4]
   160f4:	add	r1, r0, r5, lsl #1
   160f8:	ldrh	r1, [r1]
   160fc:	cmp	r1, #0
   16100:	bne	161e0 <flatcc_builder_table_add_offset@@Base+0x11c>
   16104:	ldr	r2, [r4, #20]
   16108:	ldr	r1, [r4, #12]
   1610c:	ldr	r3, [r4, #24]
   16110:	add	r2, r2, #3
   16114:	eor	r1, r1, r5
   16118:	bic	r7, r2, #3
   1611c:	movw	r2, #31153	; 0x79b1
   16120:	movt	r2, #40503	; 0x9e37
   16124:	add	r6, r7, #4
   16128:	mul	r1, r1, r2
   1612c:	cmp	r6, r3
   16130:	str	r6, [r4, #20]
   16134:	eor	r1, r1, #4
   16138:	mul	r1, r1, r2
   1613c:	str	r1, [r4, #12]
   16140:	bls	16168 <flatcc_builder_table_add_offset@@Base+0xa4>
   16144:	mov	r0, r4
   16148:	mov	r1, r6
   1614c:	movw	r2, #65532	; 0xfffc
   16150:	bl	170c0 <flatcc_builder_get_emit_context@@Base+0x8>
   16154:	mov	r1, r0
   16158:	mov	r0, #0
   1615c:	cmp	r1, #0
   16160:	popne	{r4, r5, r6, r7, fp, pc}
   16164:	ldr	r0, [r4, #4]
   16168:	uxth	r1, r5
   1616c:	add	r0, r0, r1, lsl #1
   16170:	strh	r6, [r0]
   16174:	ldrh	r0, [r4, #8]
   16178:	cmp	r0, r1
   1617c:	addls	r0, r5, #1
   16180:	strhls	r0, [r4, #8]
   16184:	ldr	r0, [r4]
   16188:	add	r1, r0, #2
   1618c:	str	r1, [r4]
   16190:	strh	r7, [r0]
   16194:	ldr	r0, [r4, #16]
   16198:	add	r0, r0, r7
   1619c:	pop	{r4, r5, r6, r7, fp, pc}
   161a0:	movw	r0, #38243	; 0x9563
   161a4:	movw	r1, #36174	; 0x8d4e
   161a8:	movw	r3, #40023	; 0x9c57
   161ac:	movw	r2, #1811	; 0x713
   161b0:	movt	r0, #1
   161b4:	movt	r1, #1
   161b8:	movt	r3, #1
   161bc:	bl	127a8 <__assert_fail@plt>
   161c0:	movw	r0, #39895	; 0x9bd7
   161c4:	movw	r1, #36174	; 0x8d4e
   161c8:	movw	r3, #40023	; 0x9c57
   161cc:	movw	r2, #1812	; 0x714
   161d0:	movt	r0, #1
   161d4:	movt	r1, #1
   161d8:	movt	r3, #1
   161dc:	bl	127a8 <__assert_fail@plt>
   161e0:	movw	r0, #40692	; 0x9ef4
   161e4:	movw	r1, #36174	; 0x8d4e
   161e8:	movw	r3, #40023	; 0x9c57
   161ec:	movw	r2, #1819	; 0x71b
   161f0:	movt	r0, #1
   161f4:	movt	r1, #1
   161f8:	movt	r3, #1
   161fc:	bl	127a8 <__assert_fail@plt>

00016200 <flatcc_builder_table_add@@Base>:
   16200:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16204:	add	fp, sp, #24
   16208:	mov	r4, r0
   1620c:	ldr	r0, [r0, #32]
   16210:	ldrh	r0, [r0, #14]
   16214:	cmp	r0, #3
   16218:	bne	162e4 <flatcc_builder_table_add@@Base+0xe4>
   1621c:	movw	r0, #32765	; 0x7ffd
   16220:	mov	r8, r1
   16224:	cmp	r1, r0
   16228:	bcs	16304 <flatcc_builder_table_add@@Base+0x104>
   1622c:	ldrh	r0, [r4, #130]	; 0x82
   16230:	cmp	r0, r3
   16234:	strhcc	r3, [r4, #130]	; 0x82
   16238:	ldr	r0, [r4, #4]
   1623c:	add	r1, r0, r8, lsl #1
   16240:	ldrh	r1, [r1]
   16244:	cmp	r1, #0
   16248:	bne	16324 <flatcc_builder_table_add@@Base+0x124>
   1624c:	ldr	r1, [r4, #12]
   16250:	movw	r7, #31153	; 0x79b1
   16254:	ldr	r6, [r4, #20]
   16258:	ldr	r5, [r4, #24]
   1625c:	movt	r7, #40503	; 0x9e37
   16260:	eor	r1, r1, r8
   16264:	mul	r1, r1, r7
   16268:	eor	r1, r1, r2
   1626c:	mul	r1, r1, r7
   16270:	str	r1, [r4, #12]
   16274:	add	r1, r3, r6
   16278:	rsb	r3, r3, #0
   1627c:	sub	r1, r1, #1
   16280:	and	r6, r1, r3
   16284:	add	r1, r6, r2
   16288:	cmp	r1, r5
   1628c:	str	r1, [r4, #20]
   16290:	bcc	162b8 <flatcc_builder_table_add@@Base+0xb8>
   16294:	add	r1, r1, #1
   16298:	mov	r0, r4
   1629c:	movw	r2, #65532	; 0xfffc
   162a0:	bl	170c0 <flatcc_builder_get_emit_context@@Base+0x8>
   162a4:	mov	r1, r0
   162a8:	mov	r0, #0
   162ac:	cmp	r1, #0
   162b0:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   162b4:	ldr	r0, [r4, #4]
   162b8:	uxth	r1, r8
   162bc:	add	r2, r6, #4
   162c0:	add	r0, r0, r1, lsl #1
   162c4:	strh	r2, [r0]
   162c8:	ldrh	r0, [r4, #8]
   162cc:	cmp	r0, r1
   162d0:	addls	r0, r8, #1
   162d4:	strhls	r0, [r4, #8]
   162d8:	ldr	r0, [r4, #16]
   162dc:	add	r0, r0, r6
   162e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   162e4:	movw	r0, #38243	; 0x9563
   162e8:	movw	r1, #36174	; 0x8d4e
   162ec:	movw	r3, #39821	; 0x9b8d
   162f0:	movw	r2, #1773	; 0x6ed
   162f4:	movt	r0, #1
   162f8:	movt	r1, #1
   162fc:	movt	r3, #1
   16300:	bl	127a8 <__assert_fail@plt>
   16304:	movw	r0, #39895	; 0x9bd7
   16308:	movw	r1, #36174	; 0x8d4e
   1630c:	movw	r3, #39821	; 0x9b8d
   16310:	movw	r2, #1774	; 0x6ee
   16314:	movt	r0, #1
   16318:	movt	r1, #1
   1631c:	movt	r3, #1
   16320:	bl	127a8 <__assert_fail@plt>
   16324:	movw	r0, #40692	; 0x9ef4
   16328:	movw	r1, #36174	; 0x8d4e
   1632c:	movw	r3, #39821	; 0x9b8d
   16330:	movw	r2, #1784	; 0x6f8
   16334:	movt	r0, #1
   16338:	movt	r1, #1
   1633c:	movt	r3, #1
   16340:	bl	127a8 <__assert_fail@plt>

00016344 <flatcc_builder_table_add_union_vector@@Base>:
   16344:	push	{r4, r5, r6, r7, fp, lr}
   16348:	add	fp, sp, #16
   1634c:	mov	r6, r0
   16350:	ldr	r0, [r0, #32]
   16354:	ldrh	r0, [r0, #14]
   16358:	cmp	r0, #3
   1635c:	bne	163c4 <flatcc_builder_table_add_union_vector@@Base+0x80>
   16360:	clz	r0, r3
   16364:	mov	r5, r1
   16368:	clz	r1, r2
   1636c:	mov	r4, r3
   16370:	mov	r7, r2
   16374:	lsr	r0, r0, #5
   16378:	lsr	r1, r1, #5
   1637c:	cmp	r1, r0
   16380:	bne	163e4 <flatcc_builder_table_add_union_vector@@Base+0xa0>
   16384:	cmp	r7, #0
   16388:	beq	163bc <flatcc_builder_table_add_union_vector@@Base+0x78>
   1638c:	sub	r1, r5, #1
   16390:	mov	r0, r6
   16394:	bl	160c4 <flatcc_builder_table_add_offset@@Base>
   16398:	cmp	r0, #0
   1639c:	beq	16404 <flatcc_builder_table_add_union_vector@@Base+0xc0>
   163a0:	str	r7, [r0]
   163a4:	mov	r0, r6
   163a8:	mov	r1, r5
   163ac:	bl	160c4 <flatcc_builder_table_add_offset@@Base>
   163b0:	cmp	r0, #0
   163b4:	beq	16424 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   163b8:	str	r4, [r0]
   163bc:	mov	r0, #0
   163c0:	pop	{r4, r5, r6, r7, fp, pc}
   163c4:	movw	r0, #38243	; 0x9563
   163c8:	movw	r1, #36174	; 0x8d4e
   163cc:	movw	r3, #39141	; 0x98e5
   163d0:	mov	r2, #1536	; 0x600
   163d4:	movt	r0, #1
   163d8:	movt	r1, #1
   163dc:	movt	r3, #1
   163e0:	bl	127a8 <__assert_fail@plt>
   163e4:	movw	r0, #39240	; 0x9948
   163e8:	movw	r1, #36174	; 0x8d4e
   163ec:	movw	r3, #39141	; 0x98e5
   163f0:	movw	r2, #1537	; 0x601
   163f4:	movt	r0, #1
   163f8:	movt	r1, #1
   163fc:	movt	r3, #1
   16400:	bl	127a8 <__assert_fail@plt>
   16404:	movw	r0, #39119	; 0x98cf
   16408:	movw	r1, #36174	; 0x8d4e
   1640c:	movw	r3, #39141	; 0x98e5
   16410:	movw	r2, #1540	; 0x604
   16414:	movt	r0, #1
   16418:	movt	r1, #1
   1641c:	movt	r3, #1
   16420:	bl	127a8 <__assert_fail@plt>
   16424:	movw	r0, #39119	; 0x98cf
   16428:	movw	r1, #36174	; 0x8d4e
   1642c:	movw	r3, #39141	; 0x98e5
   16430:	movw	r2, #1544	; 0x608
   16434:	movt	r0, #1
   16438:	movt	r1, #1
   1643c:	movt	r3, #1
   16440:	bl	127a8 <__assert_fail@plt>

00016444 <flatcc_builder_create_union_vector@@Base>:
   16444:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16448:	add	fp, sp, #28
   1644c:	sub	sp, sp, #20
   16450:	mov	sl, r0
   16454:	mov	r0, #0
   16458:	mov	r9, r3
   1645c:	mov	r7, r2
   16460:	mov	r4, r1
   16464:	str	r0, [sl]
   16468:	str	r0, [sl, #4]
   1646c:	mov	r0, r1
   16470:	bl	14bf0 <flatcc_builder_start_offset_vector@@Base>
   16474:	cmp	r0, #0
   16478:	beq	16484 <flatcc_builder_create_union_vector@@Base+0x40>
   1647c:	sub	sp, fp, #28
   16480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16484:	mov	r0, r4
   16488:	mov	r1, r9
   1648c:	bl	145ac <flatcc_builder_extend_offset_vector@@Base>
   16490:	cmp	r0, #0
   16494:	beq	1647c <flatcc_builder_create_union_vector@@Base+0x38>
   16498:	ldr	r8, [r4, #20]
   1649c:	ldr	r1, [r4, #24]
   164a0:	add	r0, r8, r9
   164a4:	cmp	r0, r1
   164a8:	str	r0, [r4, #20]
   164ac:	bcc	164c8 <flatcc_builder_create_union_vector@@Base+0x84>
   164b0:	add	r1, r0, #1
   164b4:	mov	r0, r4
   164b8:	mvn	r2, #3
   164bc:	bl	170c0 <flatcc_builder_get_emit_context@@Base+0x8>
   164c0:	cmp	r0, #0
   164c4:	bne	1647c <flatcc_builder_create_union_vector@@Base+0x38>
   164c8:	ldr	r3, [r4, #16]
   164cc:	adds	r2, r3, r8
   164d0:	beq	1647c <flatcc_builder_create_union_vector@@Base+0x38>
   164d4:	cmp	r9, #0
   164d8:	beq	16508 <flatcc_builder_create_union_vector@@Base+0xc4>
   164dc:	add	r0, r7, #4
   164e0:	mov	r1, r9
   164e4:	mov	r7, r3
   164e8:	mov	r6, r2
   164ec:	ldrb	r5, [r0, #-4]
   164f0:	subs	r1, r1, #1
   164f4:	strb	r5, [r6], #1
   164f8:	ldr	r5, [r0]
   164fc:	add	r0, r0, #8
   16500:	str	r5, [r7], #4
   16504:	bne	164ec <flatcc_builder_create_union_vector@@Base+0xa8>
   16508:	add	r0, sp, #8
   1650c:	mov	r1, r4
   16510:	str	r9, [sp]
   16514:	bl	1659c <flatcc_builder_create_union_vector_direct@@Base>
   16518:	ldr	r0, [sp, #8]
   1651c:	ldr	r1, [sp, #12]
   16520:	stm	sl, {r0, r1}
   16524:	mov	r1, #0
   16528:	ldr	r0, [r4, #16]
   1652c:	ldr	r2, [r4, #20]
   16530:	bl	12778 <memset@plt>
   16534:	ldr	r0, [r4, #32]
   16538:	ldr	r1, [r4, #60]	; 0x3c
   1653c:	ldr	r2, [r4, #64]	; 0x40
   16540:	ldr	r3, [r0, #8]
   16544:	str	r3, [r4, #20]
   16548:	ldr	r3, [r0]
   1654c:	str	r3, [r4, #28]
   16550:	add	r1, r1, r3
   16554:	ldr	r7, [r0, #4]
   16558:	str	r1, [r4, #16]
   1655c:	sub	r1, r2, r3
   16560:	cmp	r1, r7
   16564:	movhi	r1, r7
   16568:	str	r1, [r4, #24]
   1656c:	ldrh	r1, [r4, #130]	; 0x82
   16570:	ldrh	r2, [r4, #128]	; 0x80
   16574:	cmp	r2, r1
   16578:	strhcc	r1, [r4, #128]	; 0x80
   1657c:	ldrh	r1, [r0, #12]
   16580:	sub	r0, r0, #36	; 0x24
   16584:	str	r0, [r4, #32]
   16588:	strh	r1, [r4, #130]	; 0x82
   1658c:	ldr	r0, [r4, #156]	; 0x9c
   16590:	sub	r0, r0, #1
   16594:	str	r0, [r4, #156]	; 0x9c
   16598:	b	1647c <flatcc_builder_create_union_vector@@Base+0x38>

0001659c <flatcc_builder_create_union_vector_direct@@Base>:
   1659c:	push	{r4, r5, r6, r7, fp, lr}
   165a0:	add	fp, sp, #16
   165a4:	sub	sp, sp, #8
   165a8:	ldr	r7, [fp, #8]
   165ac:	mov	r5, r2
   165b0:	mov	r4, r0
   165b4:	mov	r0, #0
   165b8:	mov	r6, r1
   165bc:	str	r0, [r4]
   165c0:	str	r0, [r4, #4]
   165c4:	mov	r0, r1
   165c8:	mov	r1, r3
   165cc:	mov	r3, r5
   165d0:	mov	r2, r7
   165d4:	bl	15cdc <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   165d8:	cmp	r0, #0
   165dc:	str	r0, [r4, #4]
   165e0:	beq	1660c <flatcc_builder_create_union_vector_direct@@Base+0x70>
   165e4:	mvn	r0, #0
   165e8:	mov	r1, #1
   165ec:	mov	r2, r7
   165f0:	mov	r3, #1
   165f4:	str	r1, [sp]
   165f8:	str	r0, [sp, #4]
   165fc:	mov	r0, r6
   16600:	mov	r1, r5
   16604:	bl	15a78 <flatcc_builder_create_vector@@Base>
   16608:	str	r0, [r4]
   1660c:	sub	sp, fp, #16
   16610:	pop	{r4, r5, r6, r7, fp, pc}

00016614 <flatcc_builder_start_union_vector@@Base>:
   16614:	push	{r4, sl, fp, lr}
   16618:	add	fp, sp, #8
   1661c:	mov	r1, #4
   16620:	mov	r4, r0
   16624:	bl	13f70 <flatcc_builder_start_buffer@@Base+0xbc>
   16628:	mov	r1, r0
   1662c:	mvn	r0, #0
   16630:	cmp	r1, #0
   16634:	popne	{r4, sl, fp, pc}
   16638:	ldr	r0, [r4, #32]
   1663c:	mov	r1, #8
   16640:	mov	r2, #7
   16644:	str	r1, [r0, #16]
   16648:	mov	r0, #0
   1664c:	ldr	r1, [r4, #32]
   16650:	str	r0, [r1, #20]
   16654:	ldr	r1, [r4, #32]
   16658:	strh	r2, [r1, #14]
   1665c:	ldr	r2, [r4, #28]
   16660:	ldr	r3, [r4, #60]	; 0x3c
   16664:	ldr	ip, [r4, #64]	; 0x40
   16668:	add	r3, r3, r2
   1666c:	sub	r2, ip, r2
   16670:	str	r3, [r4, #16]
   16674:	mvn	r3, #3
   16678:	cmn	r2, #4
   1667c:	movcs	r2, r3
   16680:	str	r2, [r4, #24]
   16684:	str	r3, [r1, #4]
   16688:	pop	{r4, sl, fp, pc}

0001668c <flatcc_builder_end_union_vector@@Base>:
   1668c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16690:	add	fp, sp, #24
   16694:	sub	sp, sp, #16
   16698:	mov	r8, r0
   1669c:	mov	r0, #0
   166a0:	mov	r4, r1
   166a4:	str	r0, [r8]
   166a8:	str	r0, [r8, #4]
   166ac:	ldr	r0, [r1, #32]
   166b0:	ldrh	r1, [r0, #14]
   166b4:	cmp	r1, #7
   166b8:	bne	167d0 <flatcc_builder_end_union_vector@@Base+0x144>
   166bc:	ldr	r9, [r0, #20]
   166c0:	ldr	r7, [r4, #20]
   166c4:	ldr	r1, [r4, #24]
   166c8:	add	r0, r9, r9, lsl #2
   166cc:	add	r0, r7, r0
   166d0:	cmp	r0, r1
   166d4:	str	r0, [r4, #20]
   166d8:	bcc	166f4 <flatcc_builder_end_union_vector@@Base+0x68>
   166dc:	add	r1, r0, #1
   166e0:	mov	r0, r4
   166e4:	mvn	r2, #3
   166e8:	bl	170c0 <flatcc_builder_get_emit_context@@Base+0x8>
   166ec:	cmp	r0, #0
   166f0:	bne	167c8 <flatcc_builder_end_union_vector@@Base+0x13c>
   166f4:	ldr	r0, [r4, #16]
   166f8:	adds	r3, r0, r7
   166fc:	beq	167c8 <flatcc_builder_end_union_vector@@Base+0x13c>
   16700:	add	r2, r3, r9, lsl #2
   16704:	cmp	r9, #0
   16708:	beq	16738 <flatcc_builder_end_union_vector@@Base+0xac>
   1670c:	add	r0, r0, #4
   16710:	mov	r1, r9
   16714:	mov	r7, r3
   16718:	mov	r5, r2
   1671c:	ldrb	r6, [r0, #-4]
   16720:	subs	r1, r1, #1
   16724:	strb	r6, [r5], #1
   16728:	ldr	r6, [r0]
   1672c:	add	r0, r0, #8
   16730:	str	r6, [r7], #4
   16734:	bne	1671c <flatcc_builder_end_union_vector@@Base+0x90>
   16738:	add	r0, sp, #8
   1673c:	mov	r1, r4
   16740:	str	r9, [sp]
   16744:	bl	1659c <flatcc_builder_create_union_vector_direct@@Base>
   16748:	ldr	r0, [sp, #8]
   1674c:	ldr	r1, [sp, #12]
   16750:	stm	r8, {r0, r1}
   16754:	mov	r1, #0
   16758:	ldr	r0, [r4, #16]
   1675c:	ldr	r2, [r4, #20]
   16760:	bl	12778 <memset@plt>
   16764:	ldr	r0, [r4, #32]
   16768:	ldr	r1, [r4, #60]	; 0x3c
   1676c:	ldr	r2, [r4, #64]	; 0x40
   16770:	ldr	r3, [r0, #8]
   16774:	str	r3, [r4, #20]
   16778:	ldr	r3, [r0]
   1677c:	str	r3, [r4, #28]
   16780:	add	r1, r1, r3
   16784:	ldr	r7, [r0, #4]
   16788:	str	r1, [r4, #16]
   1678c:	sub	r1, r2, r3
   16790:	cmp	r1, r7
   16794:	movhi	r1, r7
   16798:	str	r1, [r4, #24]
   1679c:	ldrh	r1, [r4, #130]	; 0x82
   167a0:	ldrh	r2, [r4, #128]	; 0x80
   167a4:	cmp	r2, r1
   167a8:	strhcc	r1, [r4, #128]	; 0x80
   167ac:	ldrh	r1, [r0, #12]
   167b0:	sub	r0, r0, #36	; 0x24
   167b4:	str	r0, [r4, #32]
   167b8:	strh	r1, [r4, #130]	; 0x82
   167bc:	ldr	r0, [r4, #156]	; 0x9c
   167c0:	sub	r0, r0, #1
   167c4:	str	r0, [r4, #156]	; 0x9c
   167c8:	sub	sp, fp, #24
   167cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   167d0:	movw	r0, #39280	; 0x9970
   167d4:	movw	r1, #36174	; 0x8d4e
   167d8:	movw	r3, #39330	; 0x99a2
   167dc:	movw	r2, #1617	; 0x651
   167e0:	movt	r0, #1
   167e4:	movt	r1, #1
   167e8:	movt	r3, #1
   167ec:	bl	127a8 <__assert_fail@plt>

000167f0 <flatcc_builder_union_vector_count@@Base>:
   167f0:	ldr	r0, [r0, #32]
   167f4:	ldr	r0, [r0, #20]
   167f8:	bx	lr

000167fc <flatcc_builder_union_vector_edit@@Base>:
   167fc:	ldr	r0, [r0, #16]
   16800:	bx	lr

00016804 <flatcc_builder_extend_union_vector@@Base>:
   16804:	push	{r4, r5, fp, lr}
   16808:	add	fp, sp, #8
   1680c:	mov	r4, r0
   16810:	ldr	r0, [r0, #32]
   16814:	ldr	r2, [r0, #20]
   16818:	adds	r2, r2, r1
   1681c:	cmpcc	r2, #536870912	; 0x20000000
   16820:	bcc	16844 <flatcc_builder_extend_union_vector@@Base+0x40>
   16824:	movw	r0, #40445	; 0x9dfd
   16828:	movw	r1, #36174	; 0x8d4e
   1682c:	movw	r3, #40472	; 0x9e18
   16830:	mov	r2, #892	; 0x37c
   16834:	movt	r0, #1
   16838:	movt	r1, #1
   1683c:	movt	r3, #1
   16840:	bl	127a8 <__assert_fail@plt>
   16844:	str	r2, [r0, #20]
   16848:	ldr	r5, [r4, #20]
   1684c:	ldr	r2, [r4, #24]
   16850:	add	r0, r5, r1, lsl #3
   16854:	cmp	r0, r2
   16858:	str	r0, [r4, #20]
   1685c:	bcc	16880 <flatcc_builder_extend_union_vector@@Base+0x7c>
   16860:	add	r1, r0, #1
   16864:	mov	r0, r4
   16868:	mvn	r2, #3
   1686c:	bl	170c0 <flatcc_builder_get_emit_context@@Base+0x8>
   16870:	mov	r1, r0
   16874:	mov	r0, #0
   16878:	cmp	r1, #0
   1687c:	popne	{r4, r5, fp, pc}
   16880:	ldr	r0, [r4, #16]
   16884:	add	r0, r0, r5
   16888:	pop	{r4, r5, fp, pc}

0001688c <flatcc_builder_truncate_union_vector@@Base>:
   1688c:	push	{fp, lr}
   16890:	mov	fp, sp
   16894:	ldr	r2, [r0, #32]
   16898:	ldrh	r3, [r2, #14]
   1689c:	cmp	r3, #7
   168a0:	bne	168e8 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   168a4:	ldr	r3, [r2, #20]
   168a8:	cmp	r3, r1
   168ac:	bcc	16908 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   168b0:	sub	r3, r3, r1
   168b4:	str	r3, [r2, #20]
   168b8:	ldr	r2, [r0, #32]
   168bc:	ldr	r3, [r0, #20]
   168c0:	ldr	ip, [r0, #16]
   168c4:	ldr	r2, [r2, #16]
   168c8:	mls	r3, r2, r1, r3
   168cc:	mul	r2, r2, r1
   168d0:	mov	r1, #0
   168d4:	str	r3, [r0, #20]
   168d8:	add	r0, ip, r3
   168dc:	bl	12778 <memset@plt>
   168e0:	mov	r0, #0
   168e4:	pop	{fp, pc}
   168e8:	movw	r0, #39280	; 0x9970
   168ec:	movw	r1, #36174	; 0x8d4e
   168f0:	movw	r3, #39413	; 0x99f5
   168f4:	movw	r2, #1665	; 0x681
   168f8:	movt	r0, #1
   168fc:	movt	r1, #1
   16900:	movt	r3, #1
   16904:	bl	127a8 <__assert_fail@plt>
   16908:	movw	r0, #37844	; 0x93d4
   1690c:	movw	r1, #36174	; 0x8d4e
   16910:	movw	r3, #39413	; 0x99f5
   16914:	movw	r2, #1666	; 0x682
   16918:	movt	r0, #1
   1691c:	movt	r1, #1
   16920:	movt	r3, #1
   16924:	bl	127a8 <__assert_fail@plt>

00016928 <flatcc_builder_union_vector_push@@Base>:
   16928:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1692c:	add	fp, sp, #24
   16930:	mov	r7, r0
   16934:	ldr	r0, [r0, #32]
   16938:	mov	r5, r1
   1693c:	ldrh	r1, [r0, #14]
   16940:	cmp	r1, #7
   16944:	bne	169ac <flatcc_builder_union_vector_push@@Base+0x84>
   16948:	ldr	r1, [r0, #20]
   1694c:	mov	r6, #0
   16950:	cmn	r1, #-536870911	; 0xe0000001
   16954:	beq	169a4 <flatcc_builder_union_vector_push@@Base+0x7c>
   16958:	add	r1, r1, #1
   1695c:	mov	r8, r2
   16960:	str	r1, [r0, #20]
   16964:	ldr	r4, [r7, #20]
   16968:	ldr	r0, [r7, #24]
   1696c:	add	r1, r4, #8
   16970:	cmp	r1, r0
   16974:	str	r1, [r7, #20]
   16978:	bcc	16994 <flatcc_builder_union_vector_push@@Base+0x6c>
   1697c:	add	r1, r4, #9
   16980:	mov	r0, r7
   16984:	mvn	r2, #3
   16988:	bl	170c0 <flatcc_builder_get_emit_context@@Base+0x8>
   1698c:	cmp	r0, #0
   16990:	bne	169a4 <flatcc_builder_union_vector_push@@Base+0x7c>
   16994:	ldr	r0, [r7, #16]
   16998:	adds	r0, r0, r4
   1699c:	movne	r6, r0
   169a0:	stmne	r0, {r5, r8}
   169a4:	mov	r0, r6
   169a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   169ac:	movw	r0, #39280	; 0x9970
   169b0:	movw	r1, #36174	; 0x8d4e
   169b4:	movw	r3, #39482	; 0x9a3a
   169b8:	movw	r2, #1677	; 0x68d
   169bc:	movt	r0, #1
   169c0:	movt	r1, #1
   169c4:	movt	r3, #1
   169c8:	bl	127a8 <__assert_fail@plt>

000169cc <flatcc_builder_append_union_vector@@Base>:
   169cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   169d0:	add	fp, sp, #24
   169d4:	mov	r6, r0
   169d8:	ldr	r0, [r0, #32]
   169dc:	mov	r8, r1
   169e0:	ldrh	r1, [r0, #14]
   169e4:	cmp	r1, #7
   169e8:	bne	16a84 <flatcc_builder_append_union_vector@@Base+0xb8>
   169ec:	ldr	r1, [r0, #20]
   169f0:	mov	r5, r2
   169f4:	adds	r1, r1, r2
   169f8:	cmpcc	r1, #536870912	; 0x20000000
   169fc:	bcc	16a20 <flatcc_builder_append_union_vector@@Base+0x54>
   16a00:	movw	r0, #40445	; 0x9dfd
   16a04:	movw	r1, #36174	; 0x8d4e
   16a08:	movw	r3, #40472	; 0x9e18
   16a0c:	mov	r2, #892	; 0x37c
   16a10:	movt	r0, #1
   16a14:	movt	r1, #1
   16a18:	movt	r3, #1
   16a1c:	bl	127a8 <__assert_fail@plt>
   16a20:	str	r1, [r0, #20]
   16a24:	ldr	r4, [r6, #20]
   16a28:	ldr	r1, [r6, #24]
   16a2c:	add	r0, r4, r5, lsl #3
   16a30:	cmp	r0, r1
   16a34:	str	r0, [r6, #20]
   16a38:	bcc	16a58 <flatcc_builder_append_union_vector@@Base+0x8c>
   16a3c:	add	r1, r0, #1
   16a40:	mov	r0, r6
   16a44:	mvn	r2, #3
   16a48:	bl	170c0 <flatcc_builder_get_emit_context@@Base+0x8>
   16a4c:	mov	r7, #0
   16a50:	cmp	r0, #0
   16a54:	bne	16a7c <flatcc_builder_append_union_vector@@Base+0xb0>
   16a58:	ldr	r0, [r6, #16]
   16a5c:	adds	r7, r0, r4
   16a60:	beq	16a78 <flatcc_builder_append_union_vector@@Base+0xac>
   16a64:	lsl	r2, r5, #3
   16a68:	mov	r0, r7
   16a6c:	mov	r1, r8
   16a70:	bl	12718 <memcpy@plt>
   16a74:	b	16a7c <flatcc_builder_append_union_vector@@Base+0xb0>
   16a78:	mov	r7, #0
   16a7c:	mov	r0, r7
   16a80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16a84:	movw	r0, #39280	; 0x9970
   16a88:	movw	r1, #36174	; 0x8d4e
   16a8c:	movw	r3, #39591	; 0x9aa7
   16a90:	movw	r2, #1692	; 0x69c
   16a94:	movt	r0, #1
   16a98:	movt	r1, #1
   16a9c:	movt	r3, #1
   16aa0:	bl	127a8 <__assert_fail@plt>

00016aa4 <flatcc_builder_create_string@@Base>:
   16aa4:	push	{r4, r5, r6, sl, fp, lr}
   16aa8:	add	fp, sp, #16
   16aac:	sub	sp, sp, #80	; 0x50
   16ab0:	str	r2, [fp, #-20]	; 0xffffffec
   16ab4:	mvn	r5, r2
   16ab8:	mov	r6, r0
   16abc:	mov	r3, #1
   16ac0:	cmp	r2, #0
   16ac4:	ldr	ip, [r0, #136]	; 0x88
   16ac8:	sub	r0, fp, #20
   16acc:	str	r0, [sp, #12]
   16ad0:	mov	r0, #4
   16ad4:	str	r0, [sp, #4]
   16ad8:	str	r0, [sp, #16]
   16adc:	str	r3, [sp, #8]
   16ae0:	add	r5, ip, r5
   16ae4:	and	r5, r5, #3
   16ae8:	add	r5, r5, #1
   16aec:	beq	16b08 <flatcc_builder_create_string@@Base+0x64>
   16af0:	mov	r3, #2
   16af4:	add	r0, r2, #4
   16af8:	str	r1, [sp, #20]
   16afc:	str	r2, [sp, #24]
   16b00:	str	r3, [sp, #8]
   16b04:	str	r0, [sp, #4]
   16b08:	movw	r2, #35644	; 0x8b3c
   16b0c:	add	lr, sp, #4
   16b10:	add	r1, r0, r5
   16b14:	add	r0, lr, r3, lsl #3
   16b18:	movt	r2, #1
   16b1c:	str	r1, [sp, #4]
   16b20:	cmp	r1, #0
   16b24:	str	r2, [r0, #8]
   16b28:	add	r2, r3, #1
   16b2c:	str	r5, [r0, #12]
   16b30:	str	r2, [sp, #8]
   16b34:	ble	16b88 <flatcc_builder_create_string@@Base+0xe4>
   16b38:	ldr	r0, [r6, #36]	; 0x24
   16b3c:	ldr	r4, [r6, #44]	; 0x2c
   16b40:	sub	r5, ip, r1
   16b44:	str	r1, [sp]
   16b48:	add	r1, lr, #8
   16b4c:	mov	r3, r5
   16b50:	blx	r4
   16b54:	cmp	r0, #0
   16b58:	streq	r5, [r6, #136]	; 0x88
   16b5c:	moveq	r0, r5
   16b60:	subeq	sp, fp, #16
   16b64:	popeq	{r4, r5, r6, sl, fp, pc}
   16b68:	movw	r0, #40692	; 0x9ef4
   16b6c:	movw	r1, #36174	; 0x8d4e
   16b70:	movw	r3, #40371	; 0x9db3
   16b74:	movw	r2, #651	; 0x28b
   16b78:	movt	r0, #1
   16b7c:	movt	r1, #1
   16b80:	movt	r3, #1
   16b84:	bl	127a8 <__assert_fail@plt>
   16b88:	movw	r0, #40692	; 0x9ef4
   16b8c:	movw	r1, #36174	; 0x8d4e
   16b90:	movw	r3, #40371	; 0x9db3
   16b94:	movw	r2, #647	; 0x287
   16b98:	movt	r0, #1
   16b9c:	movt	r1, #1
   16ba0:	movt	r3, #1
   16ba4:	bl	127a8 <__assert_fail@plt>

00016ba8 <flatcc_builder_create_string_str@@Base>:
   16ba8:	push	{r4, r5, fp, lr}
   16bac:	add	fp, sp, #8
   16bb0:	mov	r5, r0
   16bb4:	mov	r0, r1
   16bb8:	mov	r4, r1
   16bbc:	bl	12760 <strlen@plt>
   16bc0:	mov	r2, r0
   16bc4:	mov	r0, r5
   16bc8:	mov	r1, r4
   16bcc:	pop	{r4, r5, fp, lr}
   16bd0:	b	16aa4 <flatcc_builder_create_string@@Base>

00016bd4 <flatcc_builder_create_string_strn@@Base>:
   16bd4:	push	{r4, r5, r6, sl, fp, lr}
   16bd8:	add	fp, sp, #16
   16bdc:	mov	r6, r0
   16be0:	mov	r5, r1
   16be4:	mov	r0, r1
   16be8:	mov	r1, #0
   16bec:	mov	r4, r2
   16bf0:	bl	12790 <memchr@plt>
   16bf4:	cmp	r0, #0
   16bf8:	mov	r1, r5
   16bfc:	subne	r4, r0, r5
   16c00:	mov	r0, r6
   16c04:	mov	r2, r4
   16c08:	pop	{r4, r5, r6, sl, fp, lr}
   16c0c:	b	16aa4 <flatcc_builder_create_string@@Base>

00016c10 <flatcc_builder_end_string@@Base>:
   16c10:	push	{r4, r5, fp, lr}
   16c14:	add	fp, sp, #8
   16c18:	mov	r4, r0
   16c1c:	ldr	r0, [r0, #32]
   16c20:	ldrh	r1, [r0, #14]
   16c24:	cmp	r1, #6
   16c28:	bne	16cd0 <flatcc_builder_end_string@@Base+0xc0>
   16c2c:	ldr	r2, [r0, #20]
   16c30:	ldr	r0, [r4, #20]
   16c34:	cmp	r2, r0
   16c38:	bne	16cf0 <flatcc_builder_end_string@@Base+0xe0>
   16c3c:	ldr	r1, [r4, #16]
   16c40:	mov	r0, r4
   16c44:	bl	16aa4 <flatcc_builder_create_string@@Base>
   16c48:	mov	r5, r0
   16c4c:	cmp	r0, #0
   16c50:	beq	16cc8 <flatcc_builder_end_string@@Base+0xb8>
   16c54:	ldr	r0, [r4, #16]
   16c58:	ldr	r2, [r4, #20]
   16c5c:	mov	r1, #0
   16c60:	bl	12778 <memset@plt>
   16c64:	ldr	r0, [r4, #32]
   16c68:	ldr	r1, [r4, #60]	; 0x3c
   16c6c:	ldr	ip, [r4, #64]	; 0x40
   16c70:	ldr	r3, [r0, #8]
   16c74:	str	r3, [r4, #20]
   16c78:	ldr	r3, [r0]
   16c7c:	str	r3, [r4, #28]
   16c80:	add	r1, r1, r3
   16c84:	ldr	r2, [r0, #4]
   16c88:	str	r1, [r4, #16]
   16c8c:	sub	r1, ip, r3
   16c90:	cmp	r1, r2
   16c94:	movhi	r1, r2
   16c98:	str	r1, [r4, #24]
   16c9c:	ldrh	r1, [r4, #130]	; 0x82
   16ca0:	ldrh	r2, [r4, #128]	; 0x80
   16ca4:	cmp	r2, r1
   16ca8:	strhcc	r1, [r4, #128]	; 0x80
   16cac:	ldrh	r1, [r0, #12]
   16cb0:	sub	r0, r0, #36	; 0x24
   16cb4:	str	r0, [r4, #32]
   16cb8:	strh	r1, [r4, #130]	; 0x82
   16cbc:	ldr	r0, [r4, #156]	; 0x9c
   16cc0:	sub	r0, r0, #1
   16cc4:	str	r0, [r4, #156]	; 0x9c
   16cc8:	mov	r0, r5
   16ccc:	pop	{r4, r5, fp, pc}
   16cd0:	movw	r0, #37491	; 0x9273
   16cd4:	movw	r1, #36174	; 0x8d4e
   16cd8:	movw	r3, #39718	; 0x9b26
   16cdc:	movw	r2, #1732	; 0x6c4
   16ce0:	movt	r0, #1
   16ce4:	movt	r1, #1
   16ce8:	movt	r3, #1
   16cec:	bl	127a8 <__assert_fail@plt>
   16cf0:	movw	r0, #39785	; 0x9b69
   16cf4:	movw	r1, #36174	; 0x8d4e
   16cf8:	movw	r3, #39718	; 0x9b26
   16cfc:	movw	r2, #1733	; 0x6c5
   16d00:	movt	r0, #1
   16d04:	movt	r1, #1
   16d08:	movt	r3, #1
   16d0c:	bl	127a8 <__assert_fail@plt>

00016d10 <flatcc_builder_string_edit@@Base>:
   16d10:	ldr	r0, [r0, #16]
   16d14:	bx	lr

00016d18 <flatcc_builder_string_len@@Base>:
   16d18:	ldr	r0, [r0, #32]
   16d1c:	ldr	r0, [r0, #20]
   16d20:	bx	lr

00016d24 <flatcc_builder_table_edit@@Base>:
   16d24:	ldr	r2, [r0, #32]
   16d28:	ldrh	r2, [r2, #14]
   16d2c:	cmp	r2, #3
   16d30:	ldreq	r2, [r0, #16]
   16d34:	ldreq	r0, [r0, #20]
   16d38:	addeq	r0, r2, r0
   16d3c:	subeq	r0, r0, r1
   16d40:	bxeq	lr
   16d44:	push	{fp, lr}
   16d48:	mov	fp, sp
   16d4c:	movw	r0, #38243	; 0x9563
   16d50:	movw	r1, #36174	; 0x8d4e
   16d54:	movw	r3, #39963	; 0x9c1b
   16d58:	movw	r2, #1794	; 0x702
   16d5c:	movt	r0, #1
   16d60:	movt	r1, #1
   16d64:	movt	r3, #1
   16d68:	bl	127a8 <__assert_fail@plt>

00016d6c <flatcc_builder_table_add_copy@@Base>:
   16d6c:	push	{r4, r5, r6, sl, fp, lr}
   16d70:	add	fp, sp, #16
   16d74:	mov	r4, r3
   16d78:	ldr	r3, [fp, #8]
   16d7c:	mov	r5, r2
   16d80:	mov	r2, r4
   16d84:	bl	16200 <flatcc_builder_table_add@@Base>
   16d88:	mov	r6, r0
   16d8c:	cmp	r0, #0
   16d90:	beq	16da4 <flatcc_builder_table_add_copy@@Base+0x38>
   16d94:	mov	r0, r6
   16d98:	mov	r1, r5
   16d9c:	mov	r2, r4
   16da0:	bl	12718 <memcpy@plt>
   16da4:	mov	r0, r6
   16da8:	pop	{r4, r5, r6, sl, fp, pc}

00016dac <flatcc_builder_push_buffer_alignment@@Base>:
   16dac:	ldrh	r1, [r0, #128]	; 0x80
   16db0:	mov	r2, #4
   16db4:	strh	r2, [r0, #128]	; 0x80
   16db8:	mov	r0, r1
   16dbc:	bx	lr

00016dc0 <flatcc_builder_pop_buffer_alignment@@Base>:
   16dc0:	ldrh	r2, [r0, #128]	; 0x80
   16dc4:	cmp	r2, r1
   16dc8:	strhcc	r1, [r0, #128]	; 0x80
   16dcc:	bx	lr

00016dd0 <flatcc_builder_get_buffer_alignment@@Base>:
   16dd0:	ldrh	r0, [r0, #128]	; 0x80
   16dd4:	bx	lr

00016dd8 <flatcc_builder_set_vtable_clustering@@Base>:
   16dd8:	clz	r1, r1
   16ddc:	lsr	r1, r1, #5
   16de0:	str	r1, [r0, #180]	; 0xb4
   16de4:	bx	lr

00016de8 <flatcc_builder_set_block_align@@Base>:
   16de8:	strh	r1, [r0, #132]	; 0x84
   16dec:	bx	lr

00016df0 <flatcc_builder_get_level@@Base>:
   16df0:	ldr	r0, [r0, #156]	; 0x9c
   16df4:	bx	lr

00016df8 <flatcc_builder_set_max_level@@Base>:
   16df8:	str	r1, [r0, #176]	; 0xb0
   16dfc:	ldr	r2, [r0, #160]	; 0xa0
   16e00:	cmp	r2, r1
   16e04:	strlt	r1, [r0, #160]	; 0xa0
   16e08:	bx	lr

00016e0c <flatcc_builder_get_buffer_size@@Base>:
   16e0c:	ldr	r1, [r0, #136]	; 0x88
   16e10:	ldr	r0, [r0, #140]	; 0x8c
   16e14:	sub	r0, r0, r1
   16e18:	bx	lr

00016e1c <flatcc_builder_get_buffer_start@@Base>:
   16e1c:	ldr	r0, [r0, #136]	; 0x88
   16e20:	bx	lr

00016e24 <flatcc_builder_get_buffer_end@@Base>:
   16e24:	ldr	r0, [r0, #140]	; 0x8c
   16e28:	bx	lr

00016e2c <flatcc_builder_set_vtable_cache_limit@@Base>:
   16e2c:	str	r1, [r0, #172]	; 0xac
   16e30:	bx	lr

00016e34 <flatcc_builder_set_identifier@@Base>:
   16e34:	movw	r2, #35644	; 0x8b3c
   16e38:	cmp	r1, #0
   16e3c:	movt	r2, #1
   16e40:	movne	r2, r1
   16e44:	ldr	r1, [r2]
   16e48:	str	r1, [r0, #168]	; 0xa8
   16e4c:	bx	lr

00016e50 <flatcc_builder_get_type@@Base>:
   16e50:	ldr	r0, [r0, #32]
   16e54:	cmp	r0, #0
   16e58:	ldrhne	r0, [r0, #14]
   16e5c:	moveq	r0, #0
   16e60:	bx	lr

00016e64 <flatcc_builder_get_type_at@@Base>:
   16e64:	mov	r2, r0
   16e68:	cmp	r1, #1
   16e6c:	mov	r0, #0
   16e70:	ldrge	r3, [r2, #156]	; 0x9c
   16e74:	cmpge	r3, r1
   16e78:	bge	16e80 <flatcc_builder_get_type_at@@Base+0x1c>
   16e7c:	bx	lr
   16e80:	sub	r0, r1, r3
   16e84:	ldr	r1, [r2, #32]
   16e88:	add	r0, r0, r0, lsl #3
   16e8c:	add	r0, r1, r0, lsl #2
   16e90:	ldrh	r0, [r0, #14]
   16e94:	bx	lr

00016e98 <flatcc_builder_get_direct_buffer@@Base>:
   16e98:	ldr	r2, [r0, #184]	; 0xb8
   16e9c:	cmp	r2, #0
   16ea0:	beq	16eb4 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   16ea4:	ldr	r2, [r0, #188]	; 0xbc
   16ea8:	ldr	r3, [r0, #192]	; 0xc0
   16eac:	cmp	r2, r3
   16eb0:	beq	16ec4 <flatcc_builder_get_direct_buffer@@Base+0x2c>
   16eb4:	mov	r0, #0
   16eb8:	cmp	r1, #0
   16ebc:	strne	r0, [r1]
   16ec0:	bx	lr
   16ec4:	cmp	r1, #0
   16ec8:	ldrne	r2, [r0, #212]	; 0xd4
   16ecc:	strne	r2, [r1]
   16ed0:	ldr	r0, [r0, #196]	; 0xc4
   16ed4:	bx	lr

00016ed8 <flatcc_builder_copy_buffer@@Base>:
   16ed8:	push	{fp, lr}
   16edc:	mov	fp, sp
   16ee0:	ldr	r3, [r0, #184]	; 0xb8
   16ee4:	cmp	r3, #0
   16ee8:	beq	16f1c <flatcc_builder_copy_buffer@@Base+0x44>
   16eec:	add	r0, r0, #188	; 0xbc
   16ef0:	bl	175f8 <flatcc_emitter_copy_buffer@@Base>
   16ef4:	cmp	r0, #0
   16ef8:	popne	{fp, pc}
   16efc:	movw	r0, #36770	; 0x8fa2
   16f00:	movw	r1, #36174	; 0x8d4e
   16f04:	movw	r3, #40102	; 0x9ca6
   16f08:	movw	r2, #1926	; 0x786
   16f0c:	movt	r0, #1
   16f10:	movt	r1, #1
   16f14:	movt	r3, #1
   16f18:	bl	127a8 <__assert_fail@plt>
   16f1c:	mov	r0, #0
   16f20:	pop	{fp, pc}

00016f24 <flatcc_builder_finalize_buffer@@Base>:
   16f24:	push	{r4, r5, r6, sl, fp, lr}
   16f28:	add	fp, sp, #16
   16f2c:	mov	r4, r0
   16f30:	ldr	r0, [r0, #136]	; 0x88
   16f34:	cmp	r1, #0
   16f38:	ldr	r2, [r4, #140]	; 0x8c
   16f3c:	sub	r5, r2, r0
   16f40:	mov	r0, r5
   16f44:	strne	r5, [r1]
   16f48:	bl	1273c <malloc@plt>
   16f4c:	cmp	r0, #0
   16f50:	beq	16f94 <flatcc_builder_finalize_buffer@@Base+0x70>
   16f54:	mov	r6, r0
   16f58:	mov	r0, r4
   16f5c:	mov	r2, r5
   16f60:	mov	r1, r6
   16f64:	bl	16ed8 <flatcc_builder_copy_buffer@@Base>
   16f68:	cmp	r0, #0
   16f6c:	movne	r0, r6
   16f70:	popne	{r4, r5, r6, sl, fp, pc}
   16f74:	movw	r0, #40692	; 0x9ef4
   16f78:	movw	r1, #36174	; 0x8d4e
   16f7c:	movw	r3, #40171	; 0x9ceb
   16f80:	movw	r2, #1948	; 0x79c
   16f84:	movt	r0, #1
   16f88:	movt	r1, #1
   16f8c:	movt	r3, #1
   16f90:	bl	127a8 <__assert_fail@plt>
   16f94:	movw	r0, #40692	; 0x9ef4
   16f98:	movw	r1, #36174	; 0x8d4e
   16f9c:	movw	r3, #40171	; 0x9ceb
   16fa0:	movw	r2, #1944	; 0x798
   16fa4:	movt	r0, #1
   16fa8:	movt	r1, #1
   16fac:	movt	r3, #1
   16fb0:	bl	127a8 <__assert_fail@plt>

00016fb4 <flatcc_builder_finalize_aligned_buffer@@Base>:
   16fb4:	push	{r4, r5, r6, r7, fp, lr}
   16fb8:	add	fp, sp, #16
   16fbc:	sub	sp, sp, #8
   16fc0:	mov	r5, r0
   16fc4:	mov	r4, r1
   16fc8:	ldr	r0, [r0, #136]	; 0x88
   16fcc:	ldr	r1, [r5, #140]	; 0x8c
   16fd0:	cmp	r4, #0
   16fd4:	sub	r0, r1, r0
   16fd8:	mov	r1, #0
   16fdc:	strne	r0, [r4]
   16fe0:	ldrh	r2, [r5, #128]	; 0x80
   16fe4:	str	r1, [sp, #4]
   16fe8:	add	r0, r0, r2
   16fec:	cmp	r2, #4
   16ff0:	mov	r1, r2
   16ff4:	rsb	r2, r2, #0
   16ff8:	sub	r0, r0, #1
   16ffc:	movls	r1, #4
   17000:	and	r7, r0, r2
   17004:	add	r0, sp, #4
   17008:	mov	r2, r7
   1700c:	bl	1276c <posix_memalign@plt>
   17010:	ldr	r6, [sp, #4]
   17014:	cmp	r0, #0
   17018:	cmpne	r6, #0
   1701c:	bne	17040 <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
   17020:	cmp	r6, #0
   17024:	beq	17048 <flatcc_builder_finalize_aligned_buffer@@Base+0x94>
   17028:	mov	r0, r5
   1702c:	mov	r1, r6
   17030:	mov	r2, r7
   17034:	bl	16ed8 <flatcc_builder_copy_buffer@@Base>
   17038:	cmp	r0, #0
   1703c:	bne	17054 <flatcc_builder_finalize_aligned_buffer@@Base+0xa0>
   17040:	mov	r0, r6
   17044:	bl	1270c <free@plt>
   17048:	mov	r6, #0
   1704c:	cmp	r4, #0
   17050:	strne	r6, [r4]
   17054:	mov	r0, r6
   17058:	sub	sp, fp, #16
   1705c:	pop	{r4, r5, r6, r7, fp, pc}

00017060 <flatcc_builder_aligned_alloc@@Base>:
   17060:	push	{fp, lr}
   17064:	mov	fp, sp
   17068:	sub	sp, sp, #8
   1706c:	mov	r2, r1
   17070:	mov	r1, r0
   17074:	mov	r0, #0
   17078:	cmp	r1, #4
   1707c:	str	r0, [sp, #4]
   17080:	add	r0, sp, #4
   17084:	movls	r1, #4
   17088:	bl	1276c <posix_memalign@plt>
   1708c:	mov	r1, r0
   17090:	ldr	r0, [sp, #4]
   17094:	cmp	r1, #0
   17098:	cmpne	r0, #0
   1709c:	beq	170ac <flatcc_builder_aligned_alloc@@Base+0x4c>
   170a0:	bl	1270c <free@plt>
   170a4:	mov	r0, #0
   170a8:	str	r0, [sp, #4]
   170ac:	mov	sp, fp
   170b0:	pop	{fp, pc}

000170b4 <flatcc_builder_aligned_free@@Base>:
   170b4:	b	1270c <free@plt>

000170b8 <flatcc_builder_get_emit_context@@Base>:
   170b8:	ldr	r0, [r0, #36]	; 0x24
   170bc:	bx	lr
   170c0:	push	{r4, r5, r6, sl, fp, lr}
   170c4:	add	fp, sp, #16
   170c8:	sub	sp, sp, #8
   170cc:	mov	r6, r2
   170d0:	ldr	r2, [r0, #28]
   170d4:	mov	r5, r0
   170d8:	ldr	r0, [r0, #40]	; 0x28
   170dc:	mov	r3, #1
   170e0:	ldr	r4, [r5, #48]	; 0x30
   170e4:	str	r3, [sp]
   170e8:	mov	r3, #1
   170ec:	add	r2, r2, r1
   170f0:	add	r1, r5, #60	; 0x3c
   170f4:	blx	r4
   170f8:	mov	r1, r0
   170fc:	mvn	r0, #0
   17100:	cmp	r1, #0
   17104:	bne	17138 <flatcc_builder_get_emit_context@@Base+0x80>
   17108:	ldr	r0, [r5, #28]
   1710c:	ldr	r2, [r5, #60]	; 0x3c
   17110:	ldr	r3, [r5, #64]	; 0x40
   17114:	ldr	r1, [r5, #32]
   17118:	add	r2, r2, r0
   1711c:	sub	r0, r3, r0
   17120:	cmp	r0, r6
   17124:	str	r2, [r5, #16]
   17128:	movhi	r0, r6
   1712c:	str	r0, [r5, #24]
   17130:	mov	r0, #0
   17134:	str	r6, [r1, #4]
   17138:	sub	sp, fp, #16
   1713c:	pop	{r4, r5, r6, sl, fp, pc}

00017140 <flatcc_emitter_recycle_page@@Base>:
   17140:	ldr	r3, [r0]
   17144:	mov	r2, r0
   17148:	mvn	r0, #0
   1714c:	cmp	r3, r1
   17150:	ldrne	r2, [r2, #4]
   17154:	cmpne	r2, r1
   17158:	bne	17160 <flatcc_emitter_recycle_page@@Base+0x20>
   1715c:	bx	lr
   17160:	ldr	r0, [r1, #2944]	; 0xb80
   17164:	ldr	r2, [r1, #2948]	; 0xb84
   17168:	str	r2, [r0, #2948]	; 0xb84
   1716c:	ldr	r2, [r1, #2948]	; 0xb84
   17170:	str	r0, [r2, #2944]	; 0xb80
   17174:	ldr	r0, [r3, #2948]	; 0xb84
   17178:	str	r3, [r1, #2944]	; 0xb80
   1717c:	str	r0, [r1, #2948]	; 0xb84
   17180:	str	r1, [r0, #2944]	; 0xb80
   17184:	ldr	r0, [r1, #2944]	; 0xb80
   17188:	str	r1, [r0, #2948]	; 0xb84
   1718c:	mov	r0, #0
   17190:	bx	lr

00017194 <flatcc_emitter_reset@@Base>:
   17194:	push	{r4, sl, fp, lr}
   17198:	add	fp, sp, #8
   1719c:	ldr	r1, [r0]
   171a0:	cmp	r1, #0
   171a4:	beq	1725c <flatcc_emitter_reset@@Base+0xc8>
   171a8:	mov	r4, r0
   171ac:	add	r2, r1, #1472	; 0x5c0
   171b0:	mov	r0, #1472	; 0x5c0
   171b4:	mov	r3, #0
   171b8:	stmib	r4, {r1, r2}
   171bc:	str	r0, [r4, #12]
   171c0:	str	r2, [r4, #16]
   171c4:	str	r0, [r4, #20]
   171c8:	movw	r0, #64064	; 0xfa40
   171cc:	movt	r0, #65535	; 0xffff
   171d0:	str	r0, [r1, #2952]	; 0xb88
   171d4:	ldr	r2, [r4, #32]
   171d8:	ldr	r0, [r4, #24]
   171dc:	cmp	r2, #0
   171e0:	moveq	r2, r0
   171e4:	streq	r0, [r4, #32]
   171e8:	str	r3, [r4, #24]
   171ec:	add	r2, r2, r2, lsl #1
   171f0:	lsr	r2, r2, #2
   171f4:	add	r0, r2, r0, lsr #2
   171f8:	str	r0, [r4, #32]
   171fc:	ldr	r2, [r4, #28]
   17200:	cmp	r2, r0, lsl #1
   17204:	bls	1725c <flatcc_emitter_reset@@Base+0xc8>
   17208:	mov	r2, r1
   1720c:	ldr	r0, [r2, #2944]!	; 0xb80
   17210:	cmp	r0, r1
   17214:	beq	1725c <flatcc_emitter_reset@@Base+0xc8>
   17218:	ldr	r3, [r0, #2944]	; 0xb80
   1721c:	str	r3, [r2]
   17220:	ldr	r2, [r0, #2944]	; 0xb80
   17224:	str	r1, [r2, #2948]	; 0xb84
   17228:	bl	1270c <free@plt>
   1722c:	ldr	r0, [r4, #28]
   17230:	ldr	r1, [r4, #32]
   17234:	sub	r0, r0, #2944	; 0xb80
   17238:	cmp	r0, r1, lsl #1
   1723c:	str	r0, [r4, #28]
   17240:	popls	{r4, sl, fp, pc}
   17244:	ldr	r1, [r4, #4]
   17248:	ldr	r3, [r4]
   1724c:	mov	r2, r1
   17250:	ldr	r0, [r2, #2944]!	; 0xb80
   17254:	cmp	r0, r3
   17258:	bne	17218 <flatcc_emitter_reset@@Base+0x84>
   1725c:	pop	{r4, sl, fp, pc}

00017260 <flatcc_emitter_clear@@Base>:
   17260:	push	{r4, r5, r6, sl, fp, lr}
   17264:	add	fp, sp, #16
   17268:	ldr	r5, [r0]
   1726c:	cmp	r5, #0
   17270:	popeq	{r4, r5, r6, sl, fp, pc}
   17274:	mov	r4, r0
   17278:	ldr	r0, [r5, #2948]	; 0xb84
   1727c:	mov	r6, #0
   17280:	str	r6, [r0, #2944]	; 0xb80
   17284:	b	17294 <flatcc_emitter_clear@@Base+0x34>
   17288:	mov	r5, r0
   1728c:	ldr	r0, [r0, #2948]	; 0xb84
   17290:	bl	1270c <free@plt>
   17294:	ldr	r0, [r5, #2944]	; 0xb80
   17298:	cmp	r0, #0
   1729c:	bne	17288 <flatcc_emitter_clear@@Base+0x28>
   172a0:	mov	r0, r5
   172a4:	bl	1270c <free@plt>
   172a8:	vmov.i32	q8, #0	; 0x00000000
   172ac:	add	r0, r4, #16
   172b0:	vst1.32	{d16-d17}, [r0]
   172b4:	mov	r0, #32
   172b8:	vst1.32	{d16-d17}, [r4], r0
   172bc:	str	r6, [r4]
   172c0:	pop	{r4, r5, r6, sl, fp, pc}

000172c4 <flatcc_emitter@@Base>:
   172c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172c8:	add	fp, sp, #28
   172cc:	sub	sp, sp, #4
   172d0:	mov	r6, r0
   172d4:	mov	r7, r1
   172d8:	ldr	r0, [r0, #24]
   172dc:	ldr	r1, [fp, #8]
   172e0:	mov	r4, r2
   172e4:	cmn	r3, #1
   172e8:	mov	r9, r6
   172ec:	add	r0, r0, r1
   172f0:	str	r0, [r6, #24]
   172f4:	ble	1742c <flatcc_emitter@@Base+0x168>
   172f8:	ldr	r0, [r9, #20]!
   172fc:	cmp	r0, r1
   17300:	bcs	17594 <flatcc_emitter@@Base+0x2d0>
   17304:	mov	r8, #0
   17308:	cmp	r4, #0
   1730c:	beq	175ec <flatcc_emitter@@Base+0x328>
   17310:	movw	sl, #64064	; 0xfa40
   17314:	movt	sl, #65535	; 0xffff
   17318:	ldr	r8, [r7, #4]
   1731c:	cmp	r8, #0
   17320:	beq	1741c <flatcc_emitter@@Base+0x158>
   17324:	ldr	r9, [r7]
   17328:	cmp	r8, r0
   1732c:	mov	r5, r8
   17330:	bls	173e8 <flatcc_emitter@@Base+0x124>
   17334:	mov	r5, r0
   17338:	cmp	r5, #0
   1733c:	bne	173e8 <flatcc_emitter@@Base+0x124>
   17340:	ldr	r5, [r6, #4]
   17344:	cmp	r5, #0
   17348:	beq	1735c <flatcc_emitter@@Base+0x98>
   1734c:	ldr	r0, [r5, #2944]	; 0xb80
   17350:	ldr	r1, [r6]
   17354:	cmp	r0, r1
   17358:	bne	17394 <flatcc_emitter@@Base+0xd0>
   1735c:	movw	r0, #2956	; 0xb8c
   17360:	bl	1273c <malloc@plt>
   17364:	cmp	r0, #0
   17368:	beq	175a4 <flatcc_emitter@@Base+0x2e0>
   1736c:	ldr	r1, [r6, #28]
   17370:	cmp	r5, #0
   17374:	add	r1, r1, #2944	; 0xb80
   17378:	str	r1, [r6, #28]
   1737c:	beq	173b8 <flatcc_emitter@@Base+0xf4>
   17380:	ldr	r1, [r6]
   17384:	str	r1, [r0, #2944]	; 0xb80
   17388:	str	r5, [r0, #2948]	; 0xb84
   1738c:	str	r0, [r1, #2948]	; 0xb84
   17390:	str	r0, [r5, #2944]	; 0xb80
   17394:	mov	r5, #2944	; 0xb80
   17398:	str	r0, [r6, #4]
   1739c:	str	r0, [r6, #16]
   173a0:	str	r5, [r6, #20]
   173a4:	ldr	r1, [r0, #2948]	; 0xb84
   173a8:	ldr	r1, [r1, #2952]	; 0xb88
   173ac:	add	r1, r1, #2944	; 0xb80
   173b0:	str	r1, [r0, #2952]	; 0xb88
   173b4:	b	173dc <flatcc_emitter@@Base+0x118>
   173b8:	mov	r5, #1472	; 0x5c0
   173bc:	add	r1, r0, #1472	; 0x5c0
   173c0:	str	r0, [r6]
   173c4:	stmib	r6, {r0, r1, r5}
   173c8:	str	r1, [r6, #16]
   173cc:	str	r5, [r6, #20]
   173d0:	str	r0, [r0, #2944]	; 0xb80
   173d4:	str	r0, [r0, #2948]	; 0xb84
   173d8:	str	sl, [r0, #2952]	; 0xb88
   173dc:	cmp	r8, r5
   173e0:	bhi	17338 <flatcc_emitter@@Base+0x74>
   173e4:	mov	r5, r8
   173e8:	ldr	r0, [r6, #16]
   173ec:	mov	r1, r9
   173f0:	mov	r2, r5
   173f4:	bl	12718 <memcpy@plt>
   173f8:	ldr	r0, [r6, #16]
   173fc:	ldr	r1, [r6, #20]
   17400:	add	r9, r9, r5
   17404:	subs	r8, r8, r5
   17408:	add	r2, r0, r5
   1740c:	sub	r0, r1, r5
   17410:	str	r2, [r6, #16]
   17414:	str	r0, [r6, #20]
   17418:	bne	17328 <flatcc_emitter@@Base+0x64>
   1741c:	subs	r4, r4, #1
   17420:	add	r7, r7, #8
   17424:	bne	17318 <flatcc_emitter@@Base+0x54>
   17428:	b	1758c <flatcc_emitter@@Base+0x2c8>
   1742c:	ldr	r0, [r9, #12]!
   17430:	cmp	r0, r1
   17434:	bcs	175ac <flatcc_emitter@@Base+0x2e8>
   17438:	mov	r8, #0
   1743c:	cmp	r4, #0
   17440:	beq	175ec <flatcc_emitter@@Base+0x328>
   17444:	add	r0, r7, r4, lsl #3
   17448:	movw	sl, #2952	; 0xb88
   1744c:	ldr	r8, [r0, #-4]
   17450:	sub	r1, r0, #8
   17454:	str	r1, [sp]
   17458:	cmp	r8, #0
   1745c:	beq	17580 <flatcc_emitter@@Base+0x2bc>
   17460:	ldr	r0, [sp]
   17464:	ldr	r0, [r0]
   17468:	add	r7, r0, r8
   1746c:	ldr	r1, [r9]
   17470:	b	17538 <flatcc_emitter@@Base+0x274>
   17474:	ldr	r5, [r6]
   17478:	cmp	r5, #0
   1747c:	beq	174a4 <flatcc_emitter@@Base+0x1e0>
   17480:	ldr	r0, [r5, #2948]	; 0xb84
   17484:	ldr	r1, [r6, #4]
   17488:	cmp	r0, r1
   1748c:	beq	174a4 <flatcc_emitter@@Base+0x1e0>
   17490:	ldr	r1, [r5, #2952]	; 0xb88
   17494:	mov	r2, r0
   17498:	sub	r1, r1, #2944	; 0xb80
   1749c:	str	r1, [r2, #2952]!	; 0xb88
   174a0:	b	174e0 <flatcc_emitter@@Base+0x21c>
   174a4:	movw	r0, #2956	; 0xb8c
   174a8:	bl	1273c <malloc@plt>
   174ac:	cmp	r0, #0
   174b0:	beq	175a4 <flatcc_emitter@@Base+0x2e0>
   174b4:	ldr	r1, [r6, #28]
   174b8:	cmp	r5, #0
   174bc:	add	r1, r1, #2944	; 0xb80
   174c0:	str	r1, [r6, #28]
   174c4:	beq	17508 <flatcc_emitter@@Base+0x244>
   174c8:	ldr	r1, [r6, #4]
   174cc:	add	r2, r0, sl
   174d0:	str	r5, [r0, #2944]	; 0xb80
   174d4:	str	r1, [r0, #2948]	; 0xb84
   174d8:	str	r0, [r5, #2948]	; 0xb84
   174dc:	str	r0, [r1, #2944]	; 0xb80
   174e0:	str	r0, [r6]
   174e4:	add	r3, r0, #2944	; 0xb80
   174e8:	mov	r1, #2944	; 0xb80
   174ec:	str	r3, [r6, #8]
   174f0:	str	r1, [r6, #12]
   174f4:	ldr	r0, [r0, #2944]	; 0xb80
   174f8:	ldr	r0, [r0, #2952]	; 0xb88
   174fc:	sub	r0, r0, #2944	; 0xb80
   17500:	str	r0, [r2]
   17504:	b	17538 <flatcc_emitter@@Base+0x274>
   17508:	add	r2, r0, #1472	; 0x5c0
   1750c:	mov	r1, #1472	; 0x5c0
   17510:	str	r0, [r6]
   17514:	stmib	r6, {r0, r2}
   17518:	str	r1, [r6, #12]
   1751c:	str	r2, [r6, #16]
   17520:	movw	r2, #64064	; 0xfa40
   17524:	str	r1, [r6, #20]
   17528:	str	r0, [r0, #2944]	; 0xb80
   1752c:	str	r0, [r0, #2948]	; 0xb84
   17530:	movt	r2, #65535	; 0xffff
   17534:	str	r2, [r0, #2952]	; 0xb88
   17538:	cmp	r8, r1
   1753c:	bls	17550 <flatcc_emitter@@Base+0x28c>
   17540:	cmp	r1, #0
   17544:	mov	r5, r1
   17548:	beq	17474 <flatcc_emitter@@Base+0x1b0>
   1754c:	b	17554 <flatcc_emitter@@Base+0x290>
   17550:	mov	r5, r8
   17554:	sub	r0, r1, r5
   17558:	sub	r7, r7, r5
   1755c:	mov	r2, r5
   17560:	str	r0, [r6, #12]
   17564:	mov	r1, r7
   17568:	ldr	r0, [r6, #8]
   1756c:	sub	r0, r0, r5
   17570:	str	r0, [r6, #8]
   17574:	bl	12718 <memcpy@plt>
   17578:	subs	r8, r8, r5
   1757c:	bne	1746c <flatcc_emitter@@Base+0x1a8>
   17580:	ldr	r0, [sp]
   17584:	subs	r4, r4, #1
   17588:	bne	1744c <flatcc_emitter@@Base+0x188>
   1758c:	mov	r8, #0
   17590:	b	175ec <flatcc_emitter@@Base+0x328>
   17594:	ldr	r5, [r6, #16]
   17598:	add	r2, r5, r1
   1759c:	str	r2, [r6, #16]
   175a0:	b	175b8 <flatcc_emitter@@Base+0x2f4>
   175a4:	mvn	r8, #0
   175a8:	b	175ec <flatcc_emitter@@Base+0x328>
   175ac:	ldr	r2, [r6, #8]
   175b0:	sub	r5, r2, r1
   175b4:	str	r5, [r6, #8]
   175b8:	sub	r0, r0, r1
   175bc:	mov	r8, #0
   175c0:	cmp	r4, #0
   175c4:	str	r0, [r9]
   175c8:	beq	175ec <flatcc_emitter@@Base+0x328>
   175cc:	ldm	r7, {r1, r2}
   175d0:	mov	r0, r5
   175d4:	bl	12718 <memcpy@plt>
   175d8:	ldr	r0, [r7, #4]
   175dc:	add	r7, r7, #8
   175e0:	subs	r4, r4, #1
   175e4:	add	r5, r5, r0
   175e8:	bne	175cc <flatcc_emitter@@Base+0x308>
   175ec:	mov	r0, r8
   175f0:	sub	sp, fp, #28
   175f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000175f8 <flatcc_emitter_copy_buffer@@Base>:
   175f8:	push	{r4, r5, r6, sl, fp, lr}
   175fc:	add	fp, sp, #16
   17600:	mov	r3, r2
   17604:	ldr	r2, [r0, #24]
   17608:	mov	r5, #0
   1760c:	cmp	r2, r3
   17610:	bhi	176ac <flatcc_emitter_copy_buffer@@Base+0xb4>
   17614:	mov	r4, r0
   17618:	ldr	r0, [r0]
   1761c:	cmp	r0, #0
   17620:	beq	176ac <flatcc_emitter_copy_buffer@@Base+0xb4>
   17624:	mov	r6, r1
   17628:	ldr	r1, [r4, #4]
   1762c:	cmp	r0, r1
   17630:	beq	1769c <flatcc_emitter_copy_buffer@@Base+0xa4>
   17634:	ldr	r0, [r4, #12]
   17638:	ldr	r1, [r4, #8]
   1763c:	rsb	r5, r0, #2944	; 0xb80
   17640:	mov	r0, r6
   17644:	mov	r2, r5
   17648:	bl	12718 <memcpy@plt>
   1764c:	ldm	r4, {r0, r1}
   17650:	add	r5, r6, r5
   17654:	ldr	r6, [r0, #2944]	; 0xb80
   17658:	cmp	r6, r1
   1765c:	beq	17684 <flatcc_emitter_copy_buffer@@Base+0x8c>
   17660:	mov	r0, r5
   17664:	mov	r1, r6
   17668:	mov	r2, #2944	; 0xb80
   1766c:	bl	12718 <memcpy@plt>
   17670:	ldr	r6, [r6, #2944]	; 0xb80
   17674:	ldr	r0, [r4, #4]
   17678:	add	r5, r5, #2944	; 0xb80
   1767c:	cmp	r6, r0
   17680:	bne	17660 <flatcc_emitter_copy_buffer@@Base+0x68>
   17684:	ldr	r0, [r4, #20]
   17688:	mov	r1, r6
   1768c:	rsb	r2, r0, #2944	; 0xb80
   17690:	mov	r0, r5
   17694:	bl	12718 <memcpy@plt>
   17698:	b	176ac <flatcc_emitter_copy_buffer@@Base+0xb4>
   1769c:	ldr	r1, [r4, #8]
   176a0:	mov	r0, r6
   176a4:	bl	12718 <memcpy@plt>
   176a8:	mov	r5, r6
   176ac:	mov	r0, r5
   176b0:	pop	{r4, r5, r6, sl, fp, pc}

000176b4 <flatcc_verify_error_string@@Base>:
   176b4:	cmp	r0, #36	; 0x24
   176b8:	movwhi	r0, #41906	; 0xa3b2
   176bc:	movthi	r0, #1
   176c0:	bxhi	lr
   176c4:	movw	r1, #41920	; 0xa3c0
   176c8:	movt	r1, #1
   176cc:	ldr	r0, [r1, r0, lsl #2]
   176d0:	bx	lr

000176d4 <flatcc_verify_field@@Base>:
   176d4:	b	176d8 <flatcc_verify_field@@Base+0x4>
   176d8:	push	{r4, sl, fp, lr}
   176dc:	add	fp, sp, #8
   176e0:	ldrh	r4, [r0, #22]
   176e4:	mov	ip, #4
   176e8:	mov	lr, #0
   176ec:	add	r1, ip, r1, lsl #1
   176f0:	uxth	ip, r1
   176f4:	cmp	ip, r4
   176f8:	bcs	17724 <flatcc_verify_field@@Base+0x50>
   176fc:	ldr	r4, [r0, #12]
   17700:	uxtah	r1, r4, r1
   17704:	ldrh	ip, [r1]
   17708:	cmp	ip, #0
   1770c:	beq	17724 <flatcc_verify_field@@Base+0x50>
   17710:	add	r1, ip, r2
   17714:	ldrh	r2, [r0, #20]
   17718:	mov	lr, #13
   1771c:	cmp	r1, r2
   17720:	bls	1772c <flatcc_verify_field@@Base+0x58>
   17724:	mov	r0, lr
   17728:	pop	{r4, sl, fp, pc}
   1772c:	ldr	r1, [r0]
   17730:	ldr	r0, [r0, #16]
   17734:	add	r1, r1, ip
   17738:	add	r0, r1, r0
   1773c:	sub	r1, r3, #1
   17740:	ands	r0, r0, r1
   17744:	movwne	r0, #12
   17748:	pop	{r4, sl, fp, pc}

0001774c <flatcc_verify_string_field@@Base>:
   1774c:	push	{r4, sl, fp, lr}
   17750:	add	fp, sp, #8
   17754:	sub	sp, sp, #8
   17758:	add	r3, sp, #4
   1775c:	mov	r4, r0
   17760:	bl	177d4 <flatcc_verify_string_field@@Base+0x88>
   17764:	cmp	r0, #0
   17768:	bne	177cc <flatcc_verify_string_field@@Base+0x80>
   1776c:	ldr	r3, [sp, #4]
   17770:	cmp	r3, #0
   17774:	beq	177cc <flatcc_verify_string_field@@Base+0x80>
   17778:	ldr	r1, [r4]
   1777c:	ldr	r0, [r1, r3]
   17780:	add	r2, r0, r3
   17784:	mov	r0, #17
   17788:	tst	r2, #3
   1778c:	bne	177cc <flatcc_verify_string_field@@Base+0x80>
   17790:	cmp	r2, r3
   17794:	bls	177cc <flatcc_verify_string_field@@Base+0x80>
   17798:	ldr	r4, [r4, #4]
   1779c:	add	r3, r2, #4
   177a0:	cmp	r4, r3
   177a4:	ldrcs	r2, [r1, r2]
   177a8:	subcs	ip, r4, r3
   177ac:	movcs	r0, #8
   177b0:	addcs	r4, r2, #1
   177b4:	cmpcs	ip, r4
   177b8:	bcc	177cc <flatcc_verify_string_field@@Base+0x80>
   177bc:	add	r0, r1, r3
   177c0:	ldrb	r0, [r0, r2]
   177c4:	cmp	r0, #0
   177c8:	movwne	r0, #7
   177cc:	sub	sp, fp, #8
   177d0:	pop	{r4, sl, fp, pc}
   177d4:	push	{fp, lr}
   177d8:	mov	fp, sp
   177dc:	mov	ip, r2
   177e0:	mov	r2, #4
   177e4:	add	r1, r2, r1, lsl #1
   177e8:	ldrh	r2, [r0, #22]
   177ec:	uxth	lr, r1
   177f0:	cmp	lr, r2
   177f4:	bcs	1783c <flatcc_verify_string_field@@Base+0xf0>
   177f8:	ldr	r2, [r0, #12]
   177fc:	uxtah	r1, r2, r1
   17800:	ldrh	r1, [r1]
   17804:	cmp	r1, #0
   17808:	beq	1783c <flatcc_verify_string_field@@Base+0xf0>
   1780c:	ldrh	lr, [r0, #20]
   17810:	add	r2, r1, #4
   17814:	mov	ip, #13
   17818:	cmp	r2, lr
   1781c:	bhi	1784c <flatcc_verify_string_field@@Base+0x100>
   17820:	ldr	r0, [r0, #16]
   17824:	mov	ip, #12
   17828:	add	r0, r0, r1
   1782c:	tst	r0, #3
   17830:	moveq	ip, #0
   17834:	streq	r0, [r3]
   17838:	b	1784c <flatcc_verify_string_field@@Base+0x100>
   1783c:	cmp	ip, #0
   17840:	mov	r0, #0
   17844:	str	r0, [r3]
   17848:	movwne	ip, #4
   1784c:	mov	r0, ip
   17850:	pop	{fp, pc}

00017854 <flatcc_verify_vector_field@@Base>:
   17854:	push	{r4, r5, r6, sl, fp, lr}
   17858:	add	fp, sp, #16
   1785c:	sub	sp, sp, #8
   17860:	mov	r6, r3
   17864:	add	r3, sp, #4
   17868:	mov	r5, r0
   1786c:	bl	177d4 <flatcc_verify_string_field@@Base+0x88>
   17870:	cmp	r0, #0
   17874:	bne	178f4 <flatcc_verify_vector_field@@Base+0xa0>
   17878:	ldr	r4, [sp, #4]
   1787c:	cmp	r4, #0
   17880:	beq	178f4 <flatcc_verify_vector_field@@Base+0xa0>
   17884:	ldr	r3, [r5]
   17888:	ldr	r2, [fp, #8]
   1788c:	ldr	r0, [r3, r4]
   17890:	cmp	r2, #4
   17894:	movls	r2, #4
   17898:	add	r1, r0, r4
   1789c:	mov	r0, #16
   178a0:	cmp	r1, r4
   178a4:	bls	178f4 <flatcc_verify_vector_field@@Base+0xa0>
   178a8:	ldr	r5, [r5, #4]
   178ac:	add	r4, r1, #4
   178b0:	cmp	r4, r5
   178b4:	bhi	178f4 <flatcc_verify_vector_field@@Base+0xa0>
   178b8:	sub	r2, r2, #1
   178bc:	orr	r2, r2, #3
   178c0:	tst	r4, r2
   178c4:	bne	178f4 <flatcc_verify_vector_field@@Base+0xa0>
   178c8:	ldr	r4, [fp, #12]
   178cc:	ldr	r2, [r3, r1]
   178d0:	mov	r0, #25
   178d4:	cmp	r2, r4
   178d8:	bhi	178f4 <flatcc_verify_vector_field@@Base+0xa0>
   178dc:	sub	r0, r5, #4
   178e0:	mul	r2, r2, r6
   178e4:	sub	r1, r0, r1
   178e8:	mov	r0, #0
   178ec:	cmp	r1, r2
   178f0:	movwcc	r0, #26
   178f4:	sub	sp, fp, #16
   178f8:	pop	{r4, r5, r6, sl, fp, pc}

000178fc <flatcc_verify_string_vector_field@@Base>:
   178fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17900:	add	fp, sp, #24
   17904:	sub	sp, sp, #8
   17908:	add	r3, sp, #4
   1790c:	mov	r4, r0
   17910:	bl	177d4 <flatcc_verify_string_field@@Base+0x88>
   17914:	cmp	r0, #0
   17918:	bne	17a3c <flatcc_verify_string_vector_field@@Base+0x140>
   1791c:	ldr	r1, [sp, #4]
   17920:	cmp	r1, #0
   17924:	beq	17a3c <flatcc_verify_string_vector_field@@Base+0x140>
   17928:	ldr	r3, [r4]
   1792c:	mov	r0, #16
   17930:	ldr	r2, [r3, r1]
   17934:	add	r5, r2, r1
   17938:	cmp	r5, r1
   1793c:	bls	17a3c <flatcc_verify_string_vector_field@@Base+0x140>
   17940:	ldr	lr, [r4, #4]
   17944:	add	r7, r5, #4
   17948:	cmp	r7, lr
   1794c:	bhi	17a3c <flatcc_verify_string_vector_field@@Base+0x140>
   17950:	ands	r7, r7, #3
   17954:	bne	17a3c <flatcc_verify_string_vector_field@@Base+0x140>
   17958:	ldr	ip, [r3, r5]
   1795c:	mov	r0, #25
   17960:	cmn	ip, #-1073741823	; 0xc0000001
   17964:	bhi	17a3c <flatcc_verify_string_vector_field@@Base+0x140>
   17968:	sub	r0, lr, #4
   1796c:	sub	r4, r0, r5
   17970:	mov	r0, #26
   17974:	cmp	r4, ip, lsl #2
   17978:	bcc	17a3c <flatcc_verify_string_vector_field@@Base+0x140>
   1797c:	cmp	ip, #0
   17980:	beq	17a28 <flatcc_verify_string_vector_field@@Base+0x12c>
   17984:	sub	r0, lr, #8
   17988:	mov	r9, #0
   1798c:	sub	r0, r0, r2
   17990:	sub	r8, r0, r1
   17994:	add	r0, r3, r2
   17998:	rsb	r3, r0, #0
   1799c:	sub	r0, r1, r3
   179a0:	add	r4, r1, r2
   179a4:	ldr	r6, [r0, #4]
   179a8:	mov	r0, #17
   179ac:	add	r7, r4, r6
   179b0:	add	r5, r7, #4
   179b4:	tst	r5, #3
   179b8:	bne	17a3c <flatcc_verify_string_vector_field@@Base+0x140>
   179bc:	add	r4, r4, #4
   179c0:	cmp	r5, r4
   179c4:	bls	17a3c <flatcc_verify_string_vector_field@@Base+0x140>
   179c8:	add	r4, r7, #8
   179cc:	cmp	lr, r4
   179d0:	bcc	17a3c <flatcc_verify_string_vector_field@@Base+0x140>
   179d4:	add	r0, r1, r6
   179d8:	sub	r4, r8, r6
   179dc:	sub	r0, r0, r3
   179e0:	ldr	r0, [r0, #4]
   179e4:	add	r5, r0, #1
   179e8:	cmp	r4, r5
   179ec:	bcc	17a30 <flatcc_verify_string_vector_field@@Base+0x134>
   179f0:	add	r0, r6, r0
   179f4:	add	r0, r1, r0
   179f8:	sub	r0, r0, r3
   179fc:	ldrb	r0, [r0, #8]
   17a00:	cmp	r0, #0
   17a04:	bne	17a38 <flatcc_verify_string_vector_field@@Base+0x13c>
   17a08:	add	r9, r9, #1
   17a0c:	sub	r8, r8, #4
   17a10:	add	r2, r2, #4
   17a14:	sub	r3, r3, #4
   17a18:	mov	r0, #0
   17a1c:	cmp	r9, ip
   17a20:	bcc	1799c <flatcc_verify_string_vector_field@@Base+0xa0>
   17a24:	b	17a3c <flatcc_verify_string_vector_field@@Base+0x140>
   17a28:	mov	r0, #0
   17a2c:	b	17a3c <flatcc_verify_string_vector_field@@Base+0x140>
   17a30:	mov	r0, #8
   17a34:	b	17a3c <flatcc_verify_string_vector_field@@Base+0x140>
   17a38:	mov	r0, #7
   17a3c:	sub	sp, fp, #24
   17a40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00017a44 <flatcc_verify_table_field@@Base>:
   17a44:	push	{r4, r5, r6, sl, fp, lr}
   17a48:	add	fp, sp, #16
   17a4c:	sub	sp, sp, #32
   17a50:	mov	r6, r3
   17a54:	add	r3, sp, #4
   17a58:	mov	r5, r0
   17a5c:	bl	177d4 <flatcc_verify_string_field@@Base+0x88>
   17a60:	cmp	r0, #0
   17a64:	bne	17b40 <flatcc_verify_table_field@@Base+0xfc>
   17a68:	ldr	r4, [sp, #4]
   17a6c:	cmp	r4, #0
   17a70:	beq	17b40 <flatcc_verify_table_field@@Base+0xfc>
   17a74:	ldr	r2, [r5]
   17a78:	ldmib	r5, {r1, r3}
   17a7c:	ldr	r0, [r2, r4]
   17a80:	subs	r3, r3, #1
   17a84:	str	r3, [sp, #16]
   17a88:	beq	17b3c <flatcc_verify_table_field@@Base+0xf8>
   17a8c:	add	r3, r0, r4
   17a90:	mov	r0, #15
   17a94:	tst	r3, #3
   17a98:	bne	17b40 <flatcc_verify_table_field@@Base+0xfc>
   17a9c:	cmp	r3, r4
   17aa0:	bls	17b40 <flatcc_verify_table_field@@Base+0xfc>
   17aa4:	add	r5, r3, #4
   17aa8:	cmp	r5, r1
   17aac:	bhi	17b40 <flatcc_verify_table_field@@Base+0xfc>
   17ab0:	str	r3, [sp, #24]
   17ab4:	ldr	r0, [r2, r3]
   17ab8:	sub	r5, r3, r0
   17abc:	mov	r0, #29
   17ac0:	tst	r5, #-2147483647	; 0x80000001
   17ac4:	bne	17b40 <flatcc_verify_table_field@@Base+0xfc>
   17ac8:	add	lr, r5, #2
   17acc:	mov	r0, #27
   17ad0:	cmp	lr, r1
   17ad4:	bhi	17b40 <flatcc_verify_table_field@@Base+0xfc>
   17ad8:	mov	ip, r2
   17adc:	mov	r0, #30
   17ae0:	ldrh	r4, [ip, r5]!
   17ae4:	tst	r4, #1
   17ae8:	strh	r4, [sp, #30]
   17aec:	bne	17b40 <flatcc_verify_table_field@@Base+0xfc>
   17af0:	add	r5, r5, r4
   17af4:	cmp	r5, r1
   17af8:	bhi	17b40 <flatcc_verify_table_field@@Base+0xfc>
   17afc:	mov	r0, #28
   17b00:	cmp	r4, #4
   17b04:	bcc	17b40 <flatcc_verify_table_field@@Base+0xfc>
   17b08:	add	r0, r2, lr
   17b0c:	sub	r3, r1, r3
   17b10:	ldrh	r5, [r0]
   17b14:	mov	r0, #20
   17b18:	cmp	r3, r5
   17b1c:	strh	r5, [sp, #28]
   17b20:	bcc	17b40 <flatcc_verify_table_field@@Base+0xfc>
   17b24:	add	r0, sp, #8
   17b28:	str	r2, [sp, #8]
   17b2c:	str	ip, [sp, #20]
   17b30:	str	r1, [sp, #12]
   17b34:	blx	r6
   17b38:	b	17b40 <flatcc_verify_table_field@@Base+0xfc>
   17b3c:	mov	r0, #3
   17b40:	sub	sp, fp, #16
   17b44:	pop	{r4, r5, r6, sl, fp, pc}

00017b48 <flatcc_verify_table_vector_field@@Base>:
   17b48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b4c:	add	fp, sp, #28
   17b50:	sub	sp, sp, #36	; 0x24
   17b54:	mov	r9, r3
   17b58:	add	r3, sp, #8
   17b5c:	mov	r5, r0
   17b60:	bl	177d4 <flatcc_verify_string_field@@Base+0x88>
   17b64:	cmp	r0, #0
   17b68:	bne	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17b6c:	ldr	r1, [sp, #8]
   17b70:	cmp	r1, #0
   17b74:	beq	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17b78:	ldr	r2, [r5, #8]
   17b7c:	cmp	r2, #1
   17b80:	blt	17da4 <flatcc_verify_table_vector_field@@Base+0x25c>
   17b84:	ldr	r6, [r5]
   17b88:	mov	r0, #16
   17b8c:	ldr	r3, [r6, r1]
   17b90:	add	r7, r3, r1
   17b94:	cmp	r7, r1
   17b98:	bls	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17b9c:	ldr	lr, [r5, #4]
   17ba0:	add	r5, r7, #4
   17ba4:	cmp	r5, lr
   17ba8:	bhi	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17bac:	ands	r4, r5, #3
   17bb0:	bne	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17bb4:	ldr	r4, [r6, r7]
   17bb8:	mov	r0, #25
   17bbc:	cmn	r4, #-1073741823	; 0xc0000001
   17bc0:	bhi	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17bc4:	sub	ip, lr, #4
   17bc8:	mov	r0, #26
   17bcc:	sub	r7, ip, r7
   17bd0:	cmp	r7, r4, lsl #2
   17bd4:	bcc	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17bd8:	cmp	r4, #0
   17bdc:	beq	17d94 <flatcc_verify_table_vector_field@@Base+0x24c>
   17be0:	sub	r0, ip, r3
   17be4:	mov	sl, #0
   17be8:	str	r4, [sp]
   17bec:	sub	r8, r0, r1
   17bf0:	sub	r0, r2, #2
   17bf4:	str	r0, [sp, #4]
   17bf8:	ldr	r1, [sp, #4]
   17bfc:	ldr	r0, [r6, r5]
   17c00:	cmp	r1, #0
   17c04:	str	r1, [sp, #20]
   17c08:	beq	17d9c <flatcc_verify_table_vector_field@@Base+0x254>
   17c0c:	add	r1, r5, r0
   17c10:	add	ip, r1, #4
   17c14:	tst	r1, #3
   17c18:	bne	17ce4 <flatcc_verify_table_vector_field@@Base+0x19c>
   17c1c:	cmp	r1, r5
   17c20:	bls	17ce4 <flatcc_verify_table_vector_field@@Base+0x19c>
   17c24:	cmp	ip, lr
   17c28:	bhi	17ce4 <flatcc_verify_table_vector_field@@Base+0x19c>
   17c2c:	str	r1, [sp, #28]
   17c30:	add	r2, r6, r0
   17c34:	ldr	r2, [r2, r5]
   17c38:	sub	r7, r0, r2
   17c3c:	add	r3, r5, r7
   17c40:	tst	r3, #-2147483647	; 0x80000001
   17c44:	bne	17ce4 <flatcc_verify_table_vector_field@@Base+0x19c>
   17c48:	add	r4, r3, #2
   17c4c:	cmp	r4, lr
   17c50:	bhi	17ce4 <flatcc_verify_table_vector_field@@Base+0x19c>
   17c54:	add	r7, r6, r7
   17c58:	add	r7, r7, r5
   17c5c:	ldrh	r7, [r7]
   17c60:	cmp	r7, #4
   17c64:	strh	r7, [sp, #34]	; 0x22
   17c68:	bcc	17ce4 <flatcc_verify_table_vector_field@@Base+0x19c>
   17c6c:	ands	r4, r7, #1
   17c70:	bne	17ce4 <flatcc_verify_table_vector_field@@Base+0x19c>
   17c74:	add	r7, r0, r7
   17c78:	sub	r2, r7, r2
   17c7c:	add	r2, r5, r2
   17c80:	cmp	r2, lr
   17c84:	bhi	17ce4 <flatcc_verify_table_vector_field@@Base+0x19c>
   17c88:	add	r2, r6, r3
   17c8c:	sub	r0, r8, r0
   17c90:	ldrh	r3, [r2, #2]
   17c94:	cmp	r0, r3
   17c98:	strh	r3, [sp, #32]
   17c9c:	bcc	17ce4 <flatcc_verify_table_vector_field@@Base+0x19c>
   17ca0:	add	r0, sp, #12
   17ca4:	str	r6, [sp, #12]
   17ca8:	str	r2, [sp, #24]
   17cac:	mov	r4, lr
   17cb0:	str	lr, [sp, #16]
   17cb4:	blx	r9
   17cb8:	cmp	r0, #0
   17cbc:	bne	17db0 <flatcc_verify_table_vector_field@@Base+0x268>
   17cc0:	ldr	r1, [sp]
   17cc4:	add	sl, sl, #1
   17cc8:	sub	r8, r8, #4
   17ccc:	add	r5, r5, #4
   17cd0:	mov	r0, #0
   17cd4:	mov	lr, r4
   17cd8:	cmp	sl, r1
   17cdc:	bcc	17bf8 <flatcc_verify_table_vector_field@@Base+0xb0>
   17ce0:	b	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17ce4:	ldr	r0, [sp, #4]
   17ce8:	str	r0, [sp, #20]
   17cec:	mov	r0, #15
   17cf0:	tst	r1, #3
   17cf4:	bne	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17cf8:	cmp	r1, r5
   17cfc:	bls	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17d00:	cmp	ip, lr
   17d04:	bhi	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17d08:	str	r1, [sp, #28]
   17d0c:	ldr	r0, [r6, r1]
   17d10:	sub	r7, r1, r0
   17d14:	mov	r0, #29
   17d18:	tst	r7, #-2147483647	; 0x80000001
   17d1c:	bne	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17d20:	add	r3, r7, #2
   17d24:	mov	r0, #27
   17d28:	cmp	r3, lr
   17d2c:	bhi	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17d30:	mov	r2, r6
   17d34:	mov	r0, #30
   17d38:	ldrh	r5, [r2, r7]!
   17d3c:	tst	r5, #1
   17d40:	strh	r5, [sp, #34]	; 0x22
   17d44:	bne	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17d48:	add	r7, r7, r5
   17d4c:	cmp	r7, lr
   17d50:	bhi	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17d54:	mov	r0, #28
   17d58:	cmp	r5, #4
   17d5c:	bcc	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17d60:	add	r0, r6, r3
   17d64:	sub	r1, lr, r1
   17d68:	ldrh	r3, [r0]
   17d6c:	mov	r0, #20
   17d70:	cmp	r1, r3
   17d74:	strh	r3, [sp, #32]
   17d78:	bcc	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17d7c:	add	r0, sp, #12
   17d80:	str	r6, [sp, #12]
   17d84:	str	r2, [sp, #24]
   17d88:	str	lr, [sp, #16]
   17d8c:	blx	r9
   17d90:	b	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17d94:	mov	r0, #0
   17d98:	b	17da8 <flatcc_verify_table_vector_field@@Base+0x260>
   17d9c:	mov	r0, #0
   17da0:	str	r0, [sp, #20]
   17da4:	mov	r0, #3
   17da8:	sub	sp, fp, #28
   17dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17db0:	ldr	r0, [r6, r5]
   17db4:	ldr	r1, [sp, #4]
   17db8:	mov	lr, r4
   17dbc:	str	r1, [sp, #20]
   17dc0:	add	r1, r0, r5
   17dc4:	add	ip, r1, #4
   17dc8:	b	17cec <flatcc_verify_table_vector_field@@Base+0x1a4>

00017dcc <flatcc_verify_union_table@@Base>:
   17dcc:	push	{r4, r5, r6, sl, fp, lr}
   17dd0:	add	fp, sp, #16
   17dd4:	sub	sp, sp, #24
   17dd8:	ldr	r5, [r0, #16]
   17ddc:	ldr	r3, [r0, #20]
   17de0:	ldr	ip, [r0]
   17de4:	ldr	r2, [r0, #4]
   17de8:	ldr	r0, [r0, #8]
   17dec:	subs	r0, r0, #1
   17df0:	str	r0, [sp, #8]
   17df4:	beq	17ea8 <flatcc_verify_union_table@@Base+0xdc>
   17df8:	add	r3, r3, r5
   17dfc:	mov	r0, #15
   17e00:	tst	r3, #3
   17e04:	bne	17eac <flatcc_verify_union_table@@Base+0xe0>
   17e08:	cmp	r3, r5
   17e0c:	bls	17eac <flatcc_verify_union_table@@Base+0xe0>
   17e10:	add	r6, r3, #4
   17e14:	cmp	r6, r2
   17e18:	bhi	17eac <flatcc_verify_union_table@@Base+0xe0>
   17e1c:	str	r3, [sp, #16]
   17e20:	ldr	r0, [ip, r3]
   17e24:	sub	r5, r3, r0
   17e28:	mov	r0, #29
   17e2c:	tst	r5, #-2147483647	; 0x80000001
   17e30:	bne	17eac <flatcc_verify_union_table@@Base+0xe0>
   17e34:	add	r4, r5, #2
   17e38:	mov	r0, #27
   17e3c:	cmp	r4, r2
   17e40:	bhi	17eac <flatcc_verify_union_table@@Base+0xe0>
   17e44:	mov	lr, ip
   17e48:	mov	r0, #30
   17e4c:	ldrh	r6, [lr, r5]!
   17e50:	tst	r6, #1
   17e54:	strh	r6, [sp, #22]
   17e58:	bne	17eac <flatcc_verify_union_table@@Base+0xe0>
   17e5c:	add	r5, r5, r6
   17e60:	cmp	r5, r2
   17e64:	bhi	17eac <flatcc_verify_union_table@@Base+0xe0>
   17e68:	mov	r0, #28
   17e6c:	cmp	r6, #4
   17e70:	bcc	17eac <flatcc_verify_union_table@@Base+0xe0>
   17e74:	add	r0, ip, r4
   17e78:	sub	r3, r2, r3
   17e7c:	ldrh	r4, [r0]
   17e80:	mov	r0, #20
   17e84:	cmp	r3, r4
   17e88:	strh	r4, [sp, #20]
   17e8c:	bcc	17eac <flatcc_verify_union_table@@Base+0xe0>
   17e90:	mov	r0, sp
   17e94:	str	ip, [sp]
   17e98:	str	lr, [sp, #12]
   17e9c:	str	r2, [sp, #4]
   17ea0:	blx	r1
   17ea4:	b	17eac <flatcc_verify_union_table@@Base+0xe0>
   17ea8:	mov	r0, #3
   17eac:	sub	sp, fp, #16
   17eb0:	pop	{r4, r5, r6, sl, fp, pc}

00017eb4 <flatcc_verify_union_struct@@Base>:
   17eb4:	push	{fp, lr}
   17eb8:	mov	fp, sp
   17ebc:	ldr	lr, [r0, #20]
   17ec0:	mov	r3, r0
   17ec4:	mov	r0, #18
   17ec8:	cmp	lr, #0
   17ecc:	beq	17f08 <flatcc_verify_union_struct@@Base+0x54>
   17ed0:	ldr	ip, [r3, #4]
   17ed4:	ldr	r3, [r3, #16]
   17ed8:	add	r3, r3, lr
   17edc:	cmp	r3, ip
   17ee0:	bhi	17f08 <flatcc_verify_union_struct@@Base+0x54>
   17ee4:	adds	r1, r3, r1
   17ee8:	mov	r0, #10
   17eec:	bcs	17f08 <flatcc_verify_union_struct@@Base+0x54>
   17ef0:	mov	r0, #9
   17ef4:	cmp	r1, ip
   17ef8:	pophi	{fp, pc}
   17efc:	sub	r0, r2, #1
   17f00:	ands	r0, r3, r0
   17f04:	movwne	r0, #11
   17f08:	pop	{fp, pc}

00017f0c <flatcc_verify_union_string@@Base>:
   17f0c:	mov	r1, r0
   17f10:	ldr	r3, [r0, #16]
   17f14:	ldr	r0, [r0, #20]
   17f18:	add	r2, r0, r3
   17f1c:	mov	r0, #17
   17f20:	tst	r2, #3
   17f24:	bne	17f78 <flatcc_verify_union_string@@Base+0x6c>
   17f28:	cmp	r2, r3
   17f2c:	bls	17f78 <flatcc_verify_union_string@@Base+0x6c>
   17f30:	ldr	r3, [r1, #4]
   17f34:	add	ip, r2, #4
   17f38:	cmp	r3, ip
   17f3c:	bcc	17f78 <flatcc_verify_union_string@@Base+0x6c>
   17f40:	push	{fp, lr}
   17f44:	mov	fp, sp
   17f48:	ldr	r1, [r1]
   17f4c:	sub	lr, r3, ip
   17f50:	mov	r0, #8
   17f54:	ldr	r2, [r1, r2]
   17f58:	add	r3, r2, #1
   17f5c:	cmp	lr, r3
   17f60:	pop	{fp, lr}
   17f64:	bxcc	lr
   17f68:	add	r0, r1, ip
   17f6c:	ldrb	r0, [r0, r2]
   17f70:	cmp	r0, #0
   17f74:	movwne	r0, #7
   17f78:	bx	lr

00017f7c <flatcc_verify_buffer_header@@Base>:
   17f7c:	push	{r4, sl, fp, lr}
   17f80:	add	fp, sp, #8
   17f84:	sub	sp, sp, #8
   17f88:	mov	r4, r0
   17f8c:	mov	r0, #5
   17f90:	tst	r4, #3
   17f94:	bne	17ff0 <flatcc_verify_buffer_header@@Base+0x74>
   17f98:	mov	r0, #6
   17f9c:	cmn	r1, #9
   17fa0:	bhi	17ff0 <flatcc_verify_buffer_header@@Base+0x74>
   17fa4:	mov	r0, #1
   17fa8:	cmp	r1, #8
   17fac:	bcc	17ff0 <flatcc_verify_buffer_header@@Base+0x74>
   17fb0:	cmp	r2, #0
   17fb4:	beq	17fec <flatcc_verify_buffer_header@@Base+0x70>
   17fb8:	mov	r0, #0
   17fbc:	mov	r1, r2
   17fc0:	mov	r2, #4
   17fc4:	str	r0, [sp, #4]
   17fc8:	add	r0, sp, #4
   17fcc:	bl	12784 <strncpy@plt>
   17fd0:	ldr	r1, [sp, #4]
   17fd4:	cmp	r1, #0
   17fd8:	ldrne	r2, [r4, #4]
   17fdc:	movne	r0, #2
   17fe0:	cmpne	r2, r1
   17fe4:	moveq	r0, #0
   17fe8:	b	17ff0 <flatcc_verify_buffer_header@@Base+0x74>
   17fec:	mov	r0, #0
   17ff0:	sub	sp, fp, #8
   17ff4:	pop	{r4, sl, fp, pc}

00017ff8 <flatcc_verify_typed_buffer_header@@Base>:
   17ff8:	mov	r3, r0
   17ffc:	mov	r0, #5
   18000:	tst	r3, #3
   18004:	bne	18038 <flatcc_verify_typed_buffer_header@@Base+0x40>
   18008:	mov	r0, #6
   1800c:	cmn	r1, #9
   18010:	bhi	18038 <flatcc_verify_typed_buffer_header@@Base+0x40>
   18014:	mov	r0, #1
   18018:	cmp	r1, #8
   1801c:	bxcc	lr
   18020:	cmp	r2, #0
   18024:	beq	1803c <flatcc_verify_typed_buffer_header@@Base+0x44>
   18028:	ldr	r1, [r3, #4]
   1802c:	mov	r0, #2
   18030:	cmp	r1, r2
   18034:	moveq	r0, #0
   18038:	bx	lr
   1803c:	mov	r0, #0
   18040:	bx	lr

00018044 <flatcc_verify_struct_as_root@@Base>:
   18044:	push	{r4, r5, r6, r7, fp, lr}
   18048:	add	fp, sp, #16
   1804c:	mov	r5, r3
   18050:	mov	r6, r2
   18054:	mov	r4, r1
   18058:	mov	r7, r0
   1805c:	bl	17f7c <flatcc_verify_buffer_header@@Base>
   18060:	cmp	r0, #0
   18064:	beq	1807c <flatcc_verify_struct_as_root@@Base+0x38>
   18068:	mov	r0, r7
   1806c:	mov	r1, r4
   18070:	mov	r2, r6
   18074:	pop	{r4, r5, r6, r7, fp, lr}
   18078:	b	17f7c <flatcc_verify_buffer_header@@Base>
   1807c:	ldr	r1, [r7]
   18080:	mov	r0, #18
   18084:	sub	r2, r1, #1
   18088:	cmp	r2, r4
   1808c:	bcs	180b8 <flatcc_verify_struct_as_root@@Base+0x74>
   18090:	adds	r2, r1, r5
   18094:	mov	r0, #10
   18098:	bcs	180b8 <flatcc_verify_struct_as_root@@Base+0x74>
   1809c:	mov	r0, #9
   180a0:	cmp	r2, r4
   180a4:	pophi	{r4, r5, r6, r7, fp, pc}
   180a8:	ldr	r0, [fp, #8]
   180ac:	sub	r0, r0, #1
   180b0:	ands	r0, r1, r0
   180b4:	movwne	r0, #11
   180b8:	pop	{r4, r5, r6, r7, fp, pc}

000180bc <flatcc_verify_struct_as_typed_root@@Base>:
   180bc:	push	{fp, lr}
   180c0:	mov	fp, sp
   180c4:	mov	ip, r0
   180c8:	mov	r0, #5
   180cc:	tst	ip, #3
   180d0:	bne	18140 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   180d4:	mov	r0, #6
   180d8:	cmn	r1, #9
   180dc:	bhi	18140 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   180e0:	mov	r0, #1
   180e4:	cmp	r1, #8
   180e8:	bcc	18140 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   180ec:	cmp	r2, #0
   180f0:	beq	18104 <flatcc_verify_struct_as_typed_root@@Base+0x48>
   180f4:	ldr	lr, [ip, #4]
   180f8:	mov	r0, #2
   180fc:	cmp	lr, r2
   18100:	bne	18140 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   18104:	ldr	ip, [ip]
   18108:	mov	r0, #18
   1810c:	sub	r2, ip, #1
   18110:	cmp	r2, r1
   18114:	bcs	18140 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   18118:	adds	r3, ip, r3
   1811c:	mov	r0, #10
   18120:	bcs	18140 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   18124:	mov	r0, #9
   18128:	cmp	r3, r1
   1812c:	pophi	{fp, pc}
   18130:	ldr	r0, [fp, #8]
   18134:	sub	r0, r0, #1
   18138:	ands	r0, ip, r0
   1813c:	movwne	r0, #11
   18140:	pop	{fp, pc}

00018144 <flatcc_verify_table_as_root@@Base>:
   18144:	push	{r4, r5, r6, r7, fp, lr}
   18148:	add	fp, sp, #16
   1814c:	sub	sp, sp, #24
   18150:	mov	r4, r3
   18154:	mov	r7, r2
   18158:	mov	r5, r1
   1815c:	mov	r6, r0
   18160:	bl	17f7c <flatcc_verify_buffer_header@@Base>
   18164:	cmp	r0, #0
   18168:	beq	18184 <flatcc_verify_table_as_root@@Base+0x40>
   1816c:	mov	r0, r6
   18170:	mov	r1, r5
   18174:	mov	r2, r7
   18178:	sub	sp, fp, #16
   1817c:	pop	{r4, r5, r6, r7, fp, lr}
   18180:	b	17f7c <flatcc_verify_buffer_header@@Base>
   18184:	ldr	r1, [r6]
   18188:	mov	r0, #99	; 0x63
   1818c:	str	r0, [sp, #8]
   18190:	mov	r0, #15
   18194:	tst	r1, #3
   18198:	bne	18238 <flatcc_verify_table_as_root@@Base+0xf4>
   1819c:	cmp	r1, #0
   181a0:	beq	18238 <flatcc_verify_table_as_root@@Base+0xf4>
   181a4:	add	r2, r1, #4
   181a8:	cmp	r2, r5
   181ac:	bhi	18238 <flatcc_verify_table_as_root@@Base+0xf4>
   181b0:	str	r1, [sp, #16]
   181b4:	ldr	r0, [r6, r1]
   181b8:	sub	r7, r1, r0
   181bc:	mov	r0, #29
   181c0:	tst	r7, #-2147483647	; 0x80000001
   181c4:	bne	18238 <flatcc_verify_table_as_root@@Base+0xf4>
   181c8:	add	r3, r7, #2
   181cc:	mov	r0, #27
   181d0:	cmp	r3, r5
   181d4:	bhi	18238 <flatcc_verify_table_as_root@@Base+0xf4>
   181d8:	mov	ip, r6
   181dc:	mov	r0, #30
   181e0:	ldrh	r2, [ip, r7]!
   181e4:	tst	r2, #1
   181e8:	strh	r2, [sp, #22]
   181ec:	bne	18238 <flatcc_verify_table_as_root@@Base+0xf4>
   181f0:	add	r7, r7, r2
   181f4:	cmp	r7, r5
   181f8:	bhi	18238 <flatcc_verify_table_as_root@@Base+0xf4>
   181fc:	mov	r0, #28
   18200:	cmp	r2, #4
   18204:	bcc	18238 <flatcc_verify_table_as_root@@Base+0xf4>
   18208:	add	r0, r6, r3
   1820c:	sub	r1, r5, r1
   18210:	ldrh	r2, [r0]
   18214:	mov	r0, #20
   18218:	cmp	r1, r2
   1821c:	strh	r2, [sp, #20]
   18220:	bcc	18238 <flatcc_verify_table_as_root@@Base+0xf4>
   18224:	mov	r0, sp
   18228:	str	r6, [sp]
   1822c:	str	ip, [sp, #12]
   18230:	str	r5, [sp, #4]
   18234:	blx	r4
   18238:	sub	sp, fp, #16
   1823c:	pop	{r4, r5, r6, r7, fp, pc}

00018240 <flatcc_verify_table_as_typed_root@@Base>:
   18240:	push	{r4, r5, r6, sl, fp, lr}
   18244:	add	fp, sp, #16
   18248:	sub	sp, sp, #24
   1824c:	mov	ip, #5
   18250:	tst	r0, #3
   18254:	bne	1833c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   18258:	mov	ip, #6
   1825c:	cmn	r1, #9
   18260:	bhi	1833c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   18264:	mov	ip, #1
   18268:	cmp	r1, #8
   1826c:	bcc	1833c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   18270:	cmp	r2, #0
   18274:	beq	18288 <flatcc_verify_table_as_typed_root@@Base+0x48>
   18278:	ldr	r6, [r0, #4]
   1827c:	mov	ip, #2
   18280:	cmp	r6, r2
   18284:	bne	1833c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   18288:	ldr	r2, [r0]
   1828c:	mov	r6, #99	; 0x63
   18290:	mov	ip, #15
   18294:	str	r6, [sp, #8]
   18298:	tst	r2, #3
   1829c:	bne	1833c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   182a0:	cmp	r2, #0
   182a4:	beq	1833c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   182a8:	add	r6, r2, #4
   182ac:	cmp	r6, r1
   182b0:	bhi	1833c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   182b4:	str	r2, [sp, #16]
   182b8:	mov	ip, #29
   182bc:	ldr	r6, [r0, r2]
   182c0:	sub	r5, r2, r6
   182c4:	tst	r5, #-2147483647	; 0x80000001
   182c8:	bne	1833c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   182cc:	add	r4, r5, #2
   182d0:	mov	ip, #27
   182d4:	cmp	r4, r1
   182d8:	bhi	1833c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   182dc:	mov	lr, r0
   182e0:	mov	ip, #30
   182e4:	ldrh	r6, [lr, r5]!
   182e8:	tst	r6, #1
   182ec:	strh	r6, [sp, #22]
   182f0:	bne	1833c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   182f4:	add	r5, r5, r6
   182f8:	cmp	r5, r1
   182fc:	bhi	1833c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   18300:	mov	ip, #28
   18304:	cmp	r6, #4
   18308:	bcc	1833c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   1830c:	add	r6, r0, r4
   18310:	sub	r2, r1, r2
   18314:	mov	ip, #20
   18318:	ldrh	r4, [r6]
   1831c:	cmp	r2, r4
   18320:	strh	r4, [sp, #20]
   18324:	bcc	1833c <flatcc_verify_table_as_typed_root@@Base+0xfc>
   18328:	str	lr, [sp, #12]
   1832c:	stm	sp, {r0, r1}
   18330:	mov	r0, sp
   18334:	blx	r3
   18338:	mov	ip, r0
   1833c:	mov	r0, ip
   18340:	sub	sp, fp, #16
   18344:	pop	{r4, r5, r6, sl, fp, pc}

00018348 <flatcc_verify_struct_as_nested_root@@Base>:
   18348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1834c:	add	fp, sp, #28
   18350:	sub	sp, sp, #12
   18354:	ldr	r9, [fp, #12]
   18358:	mov	r8, r3
   1835c:	mvn	sl, #0
   18360:	mov	r5, #1
   18364:	mov	r4, r2
   18368:	mov	r7, r1
   1836c:	mov	r6, r0
   18370:	stm	sp, {r5, sl}
   18374:	mov	r3, r9
   18378:	bl	17854 <flatcc_verify_vector_field@@Base>
   1837c:	cmp	r0, #0
   18380:	beq	183a4 <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   18384:	mov	r0, r6
   18388:	mov	r1, r7
   1838c:	mov	r2, r4
   18390:	mov	r3, r9
   18394:	stm	sp, {r5, sl}
   18398:	bl	17854 <flatcc_verify_vector_field@@Base>
   1839c:	sub	sp, fp, #28
   183a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183a4:	ldrh	r2, [r6, #22]
   183a8:	mov	r0, #4
   183ac:	add	r0, r0, r7, lsl #1
   183b0:	uxth	r1, r0
   183b4:	cmp	r1, r2
   183b8:	bcs	183e0 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   183bc:	ldr	r1, [r6, #12]
   183c0:	uxtah	r0, r1, r0
   183c4:	ldrh	r0, [r0]
   183c8:	cmp	r0, #0
   183cc:	ldrne	r1, [r6]
   183d0:	ldrne	r2, [r6, #16]
   183d4:	addne	r1, r1, r2
   183d8:	addsne	r0, r1, r0
   183dc:	bne	183ec <flatcc_verify_struct_as_nested_root@@Base+0xa4>
   183e0:	mov	r0, #0
   183e4:	sub	sp, fp, #28
   183e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183ec:	ldr	r2, [r0]
   183f0:	ldr	r3, [fp, #8]
   183f4:	ldr	r1, [r2, r0]!
   183f8:	str	r9, [sp]
   183fc:	add	r0, r2, #4
   18400:	mov	r2, r8
   18404:	bl	18044 <flatcc_verify_struct_as_root@@Base>
   18408:	sub	sp, fp, #28
   1840c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018410 <flatcc_verify_table_as_nested_root@@Base>:
   18410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18414:	add	fp, sp, #28
   18418:	sub	sp, sp, #36	; 0x24
   1841c:	mvn	r9, #0
   18420:	mov	sl, #1
   18424:	mov	r8, r3
   18428:	mov	r5, r2
   1842c:	mov	r4, r1
   18430:	mov	r6, r0
   18434:	str	sl, [sp]
   18438:	str	r9, [sp, #4]
   1843c:	ldr	r7, [fp, #8]
   18440:	mov	r3, r7
   18444:	bl	17854 <flatcc_verify_vector_field@@Base>
   18448:	cmp	r0, #0
   1844c:	beq	18470 <flatcc_verify_table_as_nested_root@@Base+0x60>
   18450:	mov	r0, r6
   18454:	mov	r1, r4
   18458:	mov	r2, r5
   1845c:	mov	r3, r7
   18460:	str	sl, [sp]
   18464:	str	r9, [sp, #4]
   18468:	bl	17854 <flatcc_verify_vector_field@@Base>
   1846c:	b	184b0 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   18470:	ldrh	r3, [r6, #22]
   18474:	mov	r0, #4
   18478:	add	r1, r0, r4, lsl #1
   1847c:	mov	r0, #0
   18480:	uxth	r2, r1
   18484:	cmp	r2, r3
   18488:	bcs	184b0 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   1848c:	ldr	r2, [r6, #12]
   18490:	uxtah	r1, r2, r1
   18494:	ldrh	r1, [r1]
   18498:	cmp	r1, #0
   1849c:	ldrne	r2, [r6]
   184a0:	ldrne	r3, [r6, #16]
   184a4:	addne	r2, r2, r3
   184a8:	addsne	r1, r2, r1
   184ac:	bne	184b8 <flatcc_verify_table_as_nested_root@@Base+0xa8>
   184b0:	sub	sp, fp, #28
   184b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184b8:	ldr	r0, [r1]
   184bc:	ldr	r7, [fp, #12]
   184c0:	mov	r2, r8
   184c4:	ldr	r4, [r0, r1]!
   184c8:	add	r5, r0, #4
   184cc:	mov	r1, r4
   184d0:	mov	r0, r5
   184d4:	bl	17f7c <flatcc_verify_buffer_header@@Base>
   184d8:	cmp	r0, #0
   184dc:	beq	184f8 <flatcc_verify_table_as_nested_root@@Base+0xe8>
   184e0:	mov	r0, r5
   184e4:	mov	r1, r4
   184e8:	mov	r2, r8
   184ec:	sub	sp, fp, #28
   184f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184f4:	b	17f7c <flatcc_verify_buffer_header@@Base>
   184f8:	ldr	r0, [r6, #8]
   184fc:	ldr	r1, [r5]
   18500:	subs	r0, r0, #1
   18504:	str	r0, [sp, #20]
   18508:	beq	185b8 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   1850c:	mov	r0, #15
   18510:	tst	r1, #3
   18514:	bne	184b0 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   18518:	cmp	r1, #0
   1851c:	beq	184b0 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   18520:	add	r2, r1, #4
   18524:	cmp	r2, r4
   18528:	bhi	184b0 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   1852c:	str	r1, [sp, #28]
   18530:	ldr	r0, [r5, r1]
   18534:	sub	r6, r1, r0
   18538:	mov	r0, #29
   1853c:	tst	r6, #-2147483647	; 0x80000001
   18540:	bne	184b0 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   18544:	add	r3, r6, #2
   18548:	mov	r0, #27
   1854c:	cmp	r3, r4
   18550:	bhi	184b0 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   18554:	mov	ip, r5
   18558:	mov	r0, #30
   1855c:	ldrh	r2, [ip, r6]!
   18560:	tst	r2, #1
   18564:	strh	r2, [sp, #34]	; 0x22
   18568:	bne	184b0 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   1856c:	add	r6, r6, r2
   18570:	cmp	r6, r4
   18574:	bhi	184b0 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   18578:	mov	r0, #28
   1857c:	cmp	r2, #4
   18580:	bcc	184b0 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   18584:	add	r0, r5, r3
   18588:	sub	r1, r4, r1
   1858c:	ldrh	r2, [r0]
   18590:	mov	r0, #20
   18594:	cmp	r1, r2
   18598:	strh	r2, [sp, #32]
   1859c:	bcc	184b0 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   185a0:	add	r0, sp, #12
   185a4:	str	r5, [sp, #12]
   185a8:	str	ip, [sp, #24]
   185ac:	str	r4, [sp, #16]
   185b0:	blx	r7
   185b4:	b	184b0 <flatcc_verify_table_as_nested_root@@Base+0xa0>
   185b8:	mov	r0, #3
   185bc:	b	184b0 <flatcc_verify_table_as_nested_root@@Base+0xa0>

000185c0 <flatcc_verify_union_field@@Base>:
   185c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   185c4:	add	fp, sp, #24
   185c8:	sub	sp, sp, #32
   185cc:	mov	r5, r0
   185d0:	mov	r8, r3
   185d4:	mov	r0, #2
   185d8:	lsl	r4, r1, #1
   185dc:	ldrh	r3, [r5, #22]
   185e0:	add	r0, r0, r1, lsl #1
   185e4:	uxth	r7, r0
   185e8:	cmp	r7, r3
   185ec:	bcs	186a4 <flatcc_verify_union_field@@Base+0xe4>
   185f0:	ldr	r7, [r5, #12]
   185f4:	uxtah	r0, r7, r0
   185f8:	ldrh	r9, [r0]
   185fc:	cmp	r9, #0
   18600:	beq	186a4 <flatcc_verify_union_field@@Base+0xe4>
   18604:	ldrh	r6, [r5, #20]
   18608:	mov	r0, #13
   1860c:	cmp	r9, r6
   18610:	bcs	186d8 <flatcc_verify_union_field@@Base+0x118>
   18614:	add	r4, r4, #4
   18618:	mov	r0, #1
   1861c:	uxth	r6, r4
   18620:	cmp	r6, r3
   18624:	ldr	r3, [r5]
   18628:	uxtahcc	r0, r7, r4
   1862c:	ldr	r7, [r5, #16]
   18630:	ldrhcc	r0, [r0]
   18634:	add	r7, r3, r7
   18638:	ldrb	r3, [r7, r9]
   1863c:	clzcc	r0, r0
   18640:	lsrcc	r0, r0, #5
   18644:	cmp	r0, #0
   18648:	moveq	r0, #24
   1864c:	cmpeq	r3, #0
   18650:	beq	186d8 <flatcc_verify_union_field@@Base+0x118>
   18654:	cmp	r3, #0
   18658:	beq	186e0 <flatcc_verify_union_field@@Base+0x120>
   1865c:	add	r3, sp, #28
   18660:	mov	r0, r5
   18664:	bl	177d4 <flatcc_verify_string_field@@Base+0x88>
   18668:	cmp	r0, #0
   1866c:	bne	186d8 <flatcc_verify_union_field@@Base+0x118>
   18670:	ldr	r1, [sp, #28]
   18674:	cmp	r1, #0
   18678:	beq	186d8 <flatcc_verify_union_field@@Base+0x118>
   1867c:	ldm	r5, {r0, r2, r3}
   18680:	str	r1, [sp, #20]
   18684:	stmib	sp, {r0, r2, r3}
   18688:	ldr	r0, [r0, r1]
   1868c:	str	r0, [sp, #24]
   18690:	ldrb	r0, [r7, r9]
   18694:	strb	r0, [sp, #16]
   18698:	add	r0, sp, #4
   1869c:	blx	r8
   186a0:	b	186d8 <flatcc_verify_union_field@@Base+0x118>
   186a4:	add	r0, r4, #4
   186a8:	uxth	r1, r0
   186ac:	cmp	r1, r3
   186b0:	bcs	186cc <flatcc_verify_union_field@@Base+0x10c>
   186b4:	ldr	r1, [r5, #12]
   186b8:	uxtah	r0, r1, r0
   186bc:	ldrh	r1, [r0]
   186c0:	mov	r0, #23
   186c4:	cmp	r1, #0
   186c8:	bne	186d8 <flatcc_verify_union_field@@Base+0x118>
   186cc:	cmp	r2, #0
   186d0:	movwne	r2, #21
   186d4:	mov	r0, r2
   186d8:	sub	sp, fp, #24
   186dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   186e0:	mov	r0, #0
   186e4:	b	186d8 <flatcc_verify_union_field@@Base+0x118>

000186e8 <flatcc_verify_union_vector_field@@Base>:
   186e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186ec:	add	fp, sp, #28
   186f0:	sub	sp, sp, #44	; 0x2c
   186f4:	mov	r5, r0
   186f8:	mov	sl, r2
   186fc:	mov	r9, r1
   18700:	sub	r1, r1, #1
   18704:	mov	r0, #4
   18708:	ldrh	r2, [r5, #22]
   1870c:	add	r6, r0, r1, lsl #1
   18710:	uxth	r7, r6
   18714:	cmp	r7, r2
   18718:	bcs	18730 <flatcc_verify_union_vector_field@@Base+0x48>
   1871c:	ldr	r4, [r5, #12]
   18720:	uxtah	r4, r4, r6
   18724:	ldrh	r4, [r4]
   18728:	cmp	r4, #0
   1872c:	bne	18770 <flatcc_verify_union_vector_field@@Base+0x88>
   18730:	add	r0, r0, r9, lsl #1
   18734:	uxth	r4, r0
   18738:	cmp	r4, r2
   1873c:	bcs	18764 <flatcc_verify_union_vector_field@@Base+0x7c>
   18740:	cmp	sl, #0
   18744:	beq	18770 <flatcc_verify_union_vector_field@@Base+0x88>
   18748:	ldr	r2, [r5, #12]
   1874c:	uxtah	r0, r2, r0
   18750:	ldrh	r2, [r0]
   18754:	mov	r0, #22
   18758:	cmp	r2, #0
   1875c:	beq	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   18760:	b	18770 <flatcc_verify_union_vector_field@@Base+0x88>
   18764:	mov	r0, #22
   18768:	cmp	sl, #0
   1876c:	bne	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   18770:	uxth	r4, r1
   18774:	mvn	r0, #0
   18778:	str	r3, [sp, #12]
   1877c:	mov	r8, #1
   18780:	mov	r2, sl
   18784:	mov	r3, #1
   18788:	str	r0, [sp, #4]
   1878c:	mov	r0, r5
   18790:	mov	r1, r4
   18794:	str	r8, [sp]
   18798:	bl	17854 <flatcc_verify_vector_field@@Base>
   1879c:	cmp	r0, #0
   187a0:	beq	187c8 <flatcc_verify_union_vector_field@@Base+0xe0>
   187a4:	mvn	r0, #0
   187a8:	mov	r1, r4
   187ac:	mov	r2, sl
   187b0:	mov	r3, #1
   187b4:	str	r8, [sp]
   187b8:	str	r0, [sp, #4]
   187bc:	mov	r0, r5
   187c0:	bl	17854 <flatcc_verify_vector_field@@Base>
   187c4:	b	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   187c8:	ldrh	r1, [r5, #22]
   187cc:	mov	r0, #0
   187d0:	cmp	r7, r1
   187d4:	bcs	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   187d8:	ldr	r1, [r5, #12]
   187dc:	uxtah	r1, r1, r6
   187e0:	ldrh	r1, [r1]
   187e4:	cmp	r1, #0
   187e8:	beq	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   187ec:	ldr	r2, [r5]
   187f0:	ldr	r3, [r5, #16]
   187f4:	ldr	r6, [sp, #12]
   187f8:	add	r2, r2, r3
   187fc:	adds	r1, r2, r1
   18800:	beq	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   18804:	ldr	r4, [r1]
   18808:	add	r3, sp, #16
   1880c:	mov	r0, r5
   18810:	mov	r2, sl
   18814:	ldr	r8, [r4, r1]!
   18818:	mov	r1, r9
   1881c:	bl	177d4 <flatcc_verify_string_field@@Base+0x88>
   18820:	cmp	r0, #0
   18824:	bne	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   18828:	ldr	r2, [sp, #16]
   1882c:	cmp	r2, #0
   18830:	beq	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   18834:	ldr	r1, [r5, #8]
   18838:	cmp	r1, #1
   1883c:	blt	1891c <flatcc_verify_union_vector_field@@Base+0x234>
   18840:	ldr	r9, [r5]
   18844:	ldr	r0, [r9, r2]
   18848:	add	r3, r0, r2
   1884c:	mov	r0, #16
   18850:	cmp	r3, r2
   18854:	bls	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   18858:	ldr	r2, [r5, #4]
   1885c:	add	r7, r3, #4
   18860:	cmp	r7, r2
   18864:	bhi	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   18868:	ands	r5, r7, #3
   1886c:	bne	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   18870:	ldr	r5, [r9, r3]
   18874:	mov	r0, #25
   18878:	cmn	r5, #-1073741823	; 0xc0000001
   1887c:	bhi	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   18880:	sub	r0, r2, #4
   18884:	sub	r3, r0, r3
   18888:	mov	r0, #26
   1888c:	cmp	r3, r5, lsl #2
   18890:	bcc	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   18894:	mov	r0, #34	; 0x22
   18898:	cmp	r5, r8
   1889c:	bne	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   188a0:	cmp	r8, #0
   188a4:	sub	r0, r1, #1
   188a8:	str	r2, [sp, #24]
   188ac:	str	r9, [sp, #20]
   188b0:	str	r0, [sp, #28]
   188b4:	beq	18928 <flatcc_verify_union_vector_field@@Base+0x240>
   188b8:	add	r4, r4, #4
   188bc:	mov	r5, #0
   188c0:	add	sl, sp, #20
   188c4:	ldr	r1, [r9, r7]
   188c8:	ldrb	r0, [r4, r5]
   188cc:	cmp	r1, #0
   188d0:	beq	188fc <flatcc_verify_union_vector_field@@Base+0x214>
   188d4:	cmp	r0, #0
   188d8:	beq	18930 <flatcc_verify_union_vector_field@@Base+0x248>
   188dc:	str	r7, [sp, #36]	; 0x24
   188e0:	strb	r0, [sp, #32]
   188e4:	mov	r0, sl
   188e8:	str	r1, [sp, #40]	; 0x28
   188ec:	blx	r6
   188f0:	cmp	r0, #0
   188f4:	beq	18904 <flatcc_verify_union_vector_field@@Base+0x21c>
   188f8:	b	18938 <flatcc_verify_union_vector_field@@Base+0x250>
   188fc:	cmp	r0, #0
   18900:	bne	18944 <flatcc_verify_union_vector_field@@Base+0x25c>
   18904:	add	r5, r5, #1
   18908:	add	r7, r7, #4
   1890c:	mov	r0, #0
   18910:	cmp	r5, r8
   18914:	bcc	188c4 <flatcc_verify_union_vector_field@@Base+0x1dc>
   18918:	b	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   1891c:	mov	r0, #3
   18920:	sub	sp, fp, #28
   18924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18928:	mov	r0, #0
   1892c:	b	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   18930:	mov	r0, #33	; 0x21
   18934:	b	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   18938:	add	r0, sp, #20
   1893c:	blx	r6
   18940:	b	18920 <flatcc_verify_union_vector_field@@Base+0x238>
   18944:	mov	r0, #32
   18948:	b	18920 <flatcc_verify_union_vector_field@@Base+0x238>

0001894c <__libc_csu_init@@Base>:
   1894c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18950:	mov	r7, r0
   18954:	ldr	r6, [pc, #72]	; 189a4 <__libc_csu_init@@Base+0x58>
   18958:	ldr	r5, [pc, #72]	; 189a8 <__libc_csu_init@@Base+0x5c>
   1895c:	add	r6, pc, r6
   18960:	add	r5, pc, r5
   18964:	sub	r6, r6, r5
   18968:	mov	r8, r1
   1896c:	mov	r9, r2
   18970:	bl	126ec <free@plt-0x20>
   18974:	asrs	r6, r6, #2
   18978:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1897c:	mov	r4, #0
   18980:	add	r4, r4, #1
   18984:	ldr	r3, [r5], #4
   18988:	mov	r2, r9
   1898c:	mov	r1, r8
   18990:	mov	r0, r7
   18994:	blx	r3
   18998:	cmp	r6, r4
   1899c:	bne	18980 <__libc_csu_init@@Base+0x34>
   189a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   189a4:	andeq	r2, r1, r8, lsr #11
   189a8:	andeq	r2, r1, r0, lsr #11

000189ac <__libc_csu_fini@@Base>:
   189ac:	bx	lr

Disassembly of section .fini:

000189b0 <.fini>:
   189b0:	push	{r3, lr}
   189b4:	pop	{r3, pc}
