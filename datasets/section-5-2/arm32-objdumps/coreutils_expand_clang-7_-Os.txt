
../repos/coreutils/src/expand:     file format elf32-littlearm


Disassembly of section .init:

00010db4 <.init>:
   10db4:	push	{r3, lr}
   10db8:	bl	11068 <__assert_fail@plt+0x48>
   10dbc:	pop	{r3, pc}

Disassembly of section .plt:

00010dc0 <calloc@plt-0x14>:
   10dc0:	push	{lr}		; (str lr, [sp, #-4]!)
   10dc4:	ldr	lr, [pc, #4]	; 10dd0 <calloc@plt-0x4>
   10dc8:	add	lr, pc, lr
   10dcc:	ldr	pc, [lr, #8]!
   10dd0:	andeq	r5, r1, r0, lsr r2

00010dd4 <calloc@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #560]!	; 0x230

00010de0 <fputs_unlocked@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #552]!	; 0x228

00010dec <raise@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #544]!	; 0x220

00010df8 <strcmp@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #536]!	; 0x218

00010e04 <posix_fadvise64@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #528]!	; 0x210

00010e10 <fflush@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #520]!	; 0x208

00010e1c <free@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #512]!	; 0x200

00010e28 <_exit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #504]!	; 0x1f8

00010e34 <memcpy@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #496]!	; 0x1f0

00010e40 <mbsinit@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #488]!	; 0x1e8

00010e4c <memcmp@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #480]!	; 0x1e0

00010e58 <getc_unlocked@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #472]!	; 0x1d8

00010e64 <dcgettext@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #464]!	; 0x1d0

00010e70 <realloc@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #456]!	; 0x1c8

00010e7c <textdomain@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #448]!	; 0x1c0

00010e88 <iswprint@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #440]!	; 0x1b8

00010e94 <lseek64@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #432]!	; 0x1b0

00010ea0 <__ctype_get_mb_cur_max@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #424]!	; 0x1a8

00010eac <__fpending@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #416]!	; 0x1a0

00010eb8 <ferror_unlocked@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #408]!	; 0x198

00010ec4 <mbrtowc@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #400]!	; 0x190

00010ed0 <error@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #392]!	; 0x188

00010edc <malloc@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #384]!	; 0x180

00010ee8 <__libc_start_main@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #376]!	; 0x178

00010ef4 <__freading@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #86016	; 0x15000
   10efc:	ldr	pc, [ip, #368]!	; 0x170

00010f00 <__gmon_start__@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #86016	; 0x15000
   10f08:	ldr	pc, [ip, #360]!	; 0x168

00010f0c <getopt_long@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #86016	; 0x15000
   10f14:	ldr	pc, [ip, #352]!	; 0x160

00010f18 <__ctype_b_loc@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #86016	; 0x15000
   10f20:	ldr	pc, [ip, #344]!	; 0x158

00010f24 <exit@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #86016	; 0x15000
   10f2c:	ldr	pc, [ip, #336]!	; 0x150

00010f30 <strlen@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #86016	; 0x15000
   10f38:	ldr	pc, [ip, #328]!	; 0x148

00010f3c <__errno_location@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #86016	; 0x15000
   10f44:	ldr	pc, [ip, #320]!	; 0x140

00010f48 <__cxa_atexit@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #86016	; 0x15000
   10f50:	ldr	pc, [ip, #312]!	; 0x138

00010f54 <memset@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #86016	; 0x15000
   10f5c:	ldr	pc, [ip, #304]!	; 0x130

00010f60 <__printf_chk@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #86016	; 0x15000
   10f68:	ldr	pc, [ip, #296]!	; 0x128

00010f6c <fileno@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #86016	; 0x15000
   10f74:	ldr	pc, [ip, #288]!	; 0x120

00010f78 <__fprintf_chk@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #86016	; 0x15000
   10f80:	ldr	pc, [ip, #280]!	; 0x118

00010f84 <fclose@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #86016	; 0x15000
   10f8c:	ldr	pc, [ip, #272]!	; 0x110

00010f90 <fseeko64@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #86016	; 0x15000
   10f98:	ldr	pc, [ip, #264]!	; 0x108

00010f9c <setlocale@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #86016	; 0x15000
   10fa4:	ldr	pc, [ip, #256]!	; 0x100

00010fa8 <strrchr@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #86016	; 0x15000
   10fb0:	ldr	pc, [ip, #248]!	; 0xf8

00010fb4 <nl_langinfo@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #86016	; 0x15000
   10fbc:	ldr	pc, [ip, #240]!	; 0xf0

00010fc0 <clearerr_unlocked@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #86016	; 0x15000
   10fc8:	ldr	pc, [ip, #232]!	; 0xe8

00010fcc <fopen64@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #86016	; 0x15000
   10fd4:	ldr	pc, [ip, #224]!	; 0xe0

00010fd8 <bindtextdomain@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #86016	; 0x15000
   10fe0:	ldr	pc, [ip, #216]!	; 0xd8

00010fe4 <fputs@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #86016	; 0x15000
   10fec:	ldr	pc, [ip, #208]!	; 0xd0

00010ff0 <strncmp@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #86016	; 0x15000
   10ff8:	ldr	pc, [ip, #200]!	; 0xc8

00010ffc <abort@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #86016	; 0x15000
   11004:	ldr	pc, [ip, #192]!	; 0xc0

00011008 <putchar_unlocked@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #86016	; 0x15000
   11010:	ldr	pc, [ip, #184]!	; 0xb8

00011014 <strspn@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #86016	; 0x15000
   1101c:	ldr	pc, [ip, #176]!	; 0xb0

00011020 <__assert_fail@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #86016	; 0x15000
   11028:	ldr	pc, [ip, #168]!	; 0xa8

Disassembly of section .text:

0001102c <.text>:
   1102c:	mov	fp, #0
   11030:	mov	lr, #0
   11034:	pop	{r1}		; (ldr r1, [sp], #4)
   11038:	mov	r2, sp
   1103c:	push	{r2}		; (str r2, [sp, #-4]!)
   11040:	push	{r0}		; (str r0, [sp, #-4]!)
   11044:	ldr	ip, [pc, #16]	; 1105c <__assert_fail@plt+0x3c>
   11048:	push	{ip}		; (str ip, [sp, #-4]!)
   1104c:	ldr	r0, [pc, #12]	; 11060 <__assert_fail@plt+0x40>
   11050:	ldr	r3, [pc, #12]	; 11064 <__assert_fail@plt+0x44>
   11054:	bl	10ee8 <__libc_start_main@plt>
   11058:	bl	10ffc <abort@plt>
   1105c:	andeq	r4, r1, r4, ror sp
   11060:	muleq	r1, r8, r3
   11064:	andeq	r4, r1, r4, lsl sp
   11068:	ldr	r3, [pc, #20]	; 11084 <__assert_fail@plt+0x64>
   1106c:	ldr	r2, [pc, #20]	; 11088 <__assert_fail@plt+0x68>
   11070:	add	r3, pc, r3
   11074:	ldr	r2, [r3, r2]
   11078:	cmp	r2, #0
   1107c:	bxeq	lr
   11080:	b	10f00 <__gmon_start__@plt>
   11084:	andeq	r4, r1, r8, lsl #31
   11088:	ldrdeq	r0, [r0], -r4
   1108c:	ldr	r0, [pc, #24]	; 110ac <__assert_fail@plt+0x8c>
   11090:	ldr	r3, [pc, #24]	; 110b0 <__assert_fail@plt+0x90>
   11094:	cmp	r3, r0
   11098:	bxeq	lr
   1109c:	ldr	r3, [pc, #16]	; 110b4 <__assert_fail@plt+0x94>
   110a0:	cmp	r3, #0
   110a4:	bxeq	lr
   110a8:	bx	r3
   110ac:	andeq	r6, r2, r0, lsr r1
   110b0:	andeq	r6, r2, r0, lsr r1
   110b4:	andeq	r0, r0, r0
   110b8:	ldr	r0, [pc, #36]	; 110e4 <__assert_fail@plt+0xc4>
   110bc:	ldr	r1, [pc, #36]	; 110e8 <__assert_fail@plt+0xc8>
   110c0:	sub	r1, r1, r0
   110c4:	asr	r1, r1, #2
   110c8:	add	r1, r1, r1, lsr #31
   110cc:	asrs	r1, r1, #1
   110d0:	bxeq	lr
   110d4:	ldr	r3, [pc, #16]	; 110ec <__assert_fail@plt+0xcc>
   110d8:	cmp	r3, #0
   110dc:	bxeq	lr
   110e0:	bx	r3
   110e4:	andeq	r6, r2, r0, lsr r1
   110e8:	andeq	r6, r2, r0, lsr r1
   110ec:	andeq	r0, r0, r0
   110f0:	push	{r4, lr}
   110f4:	ldr	r4, [pc, #24]	; 11114 <__assert_fail@plt+0xf4>
   110f8:	ldrb	r3, [r4]
   110fc:	cmp	r3, #0
   11100:	popne	{r4, pc}
   11104:	bl	1108c <__assert_fail@plt+0x6c>
   11108:	mov	r3, #1
   1110c:	strb	r3, [r4]
   11110:	pop	{r4, pc}
   11114:	andeq	r6, r2, r4, asr r1
   11118:	b	110b8 <__assert_fail@plt+0x98>
   1111c:	push	{fp, lr}
   11120:	mov	fp, sp
   11124:	sub	sp, sp, #56	; 0x38
   11128:	mov	r8, r0
   1112c:	cmp	r0, #0
   11130:	bne	11358 <__assert_fail@plt+0x338>
   11134:	movw	r1, #19907	; 0x4dc3
   11138:	mov	r0, #0
   1113c:	mov	r2, #5
   11140:	movt	r1, #1
   11144:	bl	10e64 <dcgettext@plt>
   11148:	mov	r1, r0
   1114c:	movw	r0, #24988	; 0x619c
   11150:	movt	r0, #2
   11154:	ldr	r2, [r0]
   11158:	mov	r0, #1
   1115c:	bl	10f60 <__printf_chk@plt>
   11160:	movw	r1, #19940	; 0x4de4
   11164:	mov	r0, #0
   11168:	mov	r2, #5
   1116c:	movt	r1, #1
   11170:	bl	10e64 <dcgettext@plt>
   11174:	movw	r9, #24908	; 0x614c
   11178:	movt	r9, #2
   1117c:	ldr	r1, [r9]
   11180:	bl	10de0 <fputs_unlocked@plt>
   11184:	movw	r1, #20278	; 0x4f36
   11188:	mov	r0, #0
   1118c:	mov	r2, #5
   11190:	movt	r1, #1
   11194:	bl	10e64 <dcgettext@plt>
   11198:	ldr	r1, [r9]
   1119c:	bl	10de0 <fputs_unlocked@plt>
   111a0:	movw	r1, #20334	; 0x4f6e
   111a4:	mov	r0, #0
   111a8:	mov	r2, #5
   111ac:	movt	r1, #1
   111b0:	bl	10e64 <dcgettext@plt>
   111b4:	ldr	r1, [r9]
   111b8:	bl	10de0 <fputs_unlocked@plt>
   111bc:	movw	r1, #20006	; 0x4e26
   111c0:	mov	r0, #0
   111c4:	mov	r2, #5
   111c8:	movt	r1, #1
   111cc:	bl	10e64 <dcgettext@plt>
   111d0:	ldr	r1, [r9]
   111d4:	bl	10de0 <fputs_unlocked@plt>
   111d8:	bl	1209c <__assert_fail@plt+0x107c>
   111dc:	movw	r1, #20118	; 0x4e96
   111e0:	mov	r0, #0
   111e4:	mov	r2, #5
   111e8:	movt	r1, #1
   111ec:	bl	10e64 <dcgettext@plt>
   111f0:	ldr	r1, [r9]
   111f4:	bl	10de0 <fputs_unlocked@plt>
   111f8:	movw	r1, #20163	; 0x4ec3
   111fc:	mov	r0, #0
   11200:	mov	r2, #5
   11204:	movt	r1, #1
   11208:	bl	10e64 <dcgettext@plt>
   1120c:	ldr	r1, [r9]
   11210:	bl	10de0 <fputs_unlocked@plt>
   11214:	movw	r0, #20904	; 0x51a8
   11218:	mov	r6, sp
   1121c:	movt	r0, #1
   11220:	mov	r1, r6
   11224:	ldm	r0!, {r2, r3, r4, r5}
   11228:	stmia	r1!, {r2, r3, r4, r5}
   1122c:	ldm	r0!, {r2, r3, r4, r5, r7}
   11230:	stmia	r1!, {r2, r3, r4, r5, r7}
   11234:	ldm	r0, {r2, r3, r4, r5, r7}
   11238:	stm	r1, {r2, r3, r4, r5, r7}
   1123c:	movw	r1, #20409	; 0x4fb9
   11240:	movw	r5, #20217	; 0x4ef9
   11244:	movt	r1, #1
   11248:	movt	r5, #1
   1124c:	mov	r0, r5
   11250:	bl	10df8 <strcmp@plt>
   11254:	cmp	r0, #0
   11258:	ldrne	r1, [r6, #8]!
   1125c:	cmpne	r1, #0
   11260:	bne	1124c <__assert_fail@plt+0x22c>
   11264:	ldr	r6, [r6, #4]
   11268:	movw	r1, #20504	; 0x5018
   1126c:	mov	r0, #0
   11270:	mov	r2, #5
   11274:	movt	r1, #1
   11278:	bl	10e64 <dcgettext@plt>
   1127c:	movw	r2, #20248	; 0x4f18
   11280:	movw	r3, #20527	; 0x502f
   11284:	mov	r1, r0
   11288:	mov	r0, #1
   1128c:	movt	r2, #1
   11290:	movt	r3, #1
   11294:	bl	10f60 <__printf_chk@plt>
   11298:	cmp	r6, #0
   1129c:	mov	r0, #5
   112a0:	mov	r1, #0
   112a4:	moveq	r6, r5
   112a8:	bl	10f9c <setlocale@plt>
   112ac:	cmp	r0, #0
   112b0:	beq	112e8 <__assert_fail@plt+0x2c8>
   112b4:	movw	r1, #20567	; 0x5057
   112b8:	mov	r2, #3
   112bc:	movt	r1, #1
   112c0:	bl	10ff0 <strncmp@plt>
   112c4:	cmp	r0, #0
   112c8:	beq	112e8 <__assert_fail@plt+0x2c8>
   112cc:	movw	r1, #20571	; 0x505b
   112d0:	mov	r0, #0
   112d4:	mov	r2, #5
   112d8:	movt	r1, #1
   112dc:	bl	10e64 <dcgettext@plt>
   112e0:	ldr	r1, [r9]
   112e4:	bl	10de0 <fputs_unlocked@plt>
   112e8:	movw	r1, #20642	; 0x50a2
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	movt	r1, #1
   112f8:	bl	10e64 <dcgettext@plt>
   112fc:	movw	r2, #20527	; 0x502f
   11300:	mov	r1, r0
   11304:	mov	r0, #1
   11308:	mov	r3, r5
   1130c:	movt	r2, #1
   11310:	bl	10f60 <__printf_chk@plt>
   11314:	movw	r1, #20669	; 0x50bd
   11318:	mov	r0, #0
   1131c:	mov	r2, #5
   11320:	movt	r1, #1
   11324:	bl	10e64 <dcgettext@plt>
   11328:	movw	r3, #20719	; 0x50ef
   1132c:	mov	r1, r0
   11330:	movw	r0, #20437	; 0x4fd5
   11334:	cmp	r6, r5
   11338:	mov	r2, r6
   1133c:	movt	r0, #1
   11340:	movt	r3, #1
   11344:	moveq	r3, r0
   11348:	mov	r0, #1
   1134c:	bl	10f60 <__printf_chk@plt>
   11350:	mov	r0, r8
   11354:	bl	10f24 <exit@plt>
   11358:	movw	r0, #24896	; 0x6140
   1135c:	movw	r1, #19868	; 0x4d9c
   11360:	mov	r2, #5
   11364:	movt	r0, #2
   11368:	movt	r1, #1
   1136c:	ldr	r5, [r0]
   11370:	mov	r0, #0
   11374:	bl	10e64 <dcgettext@plt>
   11378:	mov	r2, r0
   1137c:	movw	r0, #24988	; 0x619c
   11380:	mov	r1, #1
   11384:	movt	r0, #2
   11388:	ldr	r3, [r0]
   1138c:	mov	r0, r5
   11390:	bl	10f78 <__fprintf_chk@plt>
   11394:	b	11350 <__assert_fail@plt+0x330>
   11398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1139c:	add	fp, sp, #28
   113a0:	sub	sp, sp, #20
   113a4:	mov	r5, r0
   113a8:	ldr	r0, [r1]
   113ac:	mov	r4, r1
   113b0:	bl	123f4 <__assert_fail@plt+0x13d4>
   113b4:	movw	r1, #20719	; 0x50ef
   113b8:	mov	r0, #6
   113bc:	movt	r1, #1
   113c0:	bl	10f9c <setlocale@plt>
   113c4:	movw	r6, #20252	; 0x4f1c
   113c8:	movw	r1, #20224	; 0x4f00
   113cc:	movt	r6, #1
   113d0:	movt	r1, #1
   113d4:	mov	r0, r6
   113d8:	bl	10fd8 <bindtextdomain@plt>
   113dc:	mov	r0, r6
   113e0:	bl	10e7c <textdomain@plt>
   113e4:	movw	r0, #8456	; 0x2108
   113e8:	movt	r0, #1
   113ec:	bl	14d78 <__assert_fail@plt+0x3d58>
   113f0:	movw	r1, #24920	; 0x6158
   113f4:	movw	r9, #20784	; 0x5130
   113f8:	movw	r7, #20820	; 0x5154
   113fc:	movw	sl, #24912	; 0x6150
   11400:	mov	r0, #1
   11404:	mov	r6, #0
   11408:	add	r8, sp, #13
   1140c:	movt	r1, #2
   11410:	movt	r9, #1
   11414:	movt	r7, #1
   11418:	movt	sl, #2
   1141c:	strb	r0, [r1]
   11420:	b	1144c <__assert_fail@plt+0x42c>
   11424:	cmp	r0, #116	; 0x74
   11428:	beq	11444 <__assert_fail@plt+0x424>
   1142c:	cmp	r0, #105	; 0x69
   11430:	bne	116d8 <__assert_fail@plt+0x6b8>
   11434:	movw	r0, #24920	; 0x6158
   11438:	movt	r0, #2
   1143c:	strb	r6, [r0]
   11440:	b	1144c <__assert_fail@plt+0x42c>
   11444:	ldr	r0, [sl]
   11448:	bl	11818 <__assert_fail@plt+0x7f8>
   1144c:	mov	r0, r5
   11450:	mov	r1, r4
   11454:	mov	r2, r9
   11458:	mov	r3, r7
   1145c:	str	r6, [sp]
   11460:	bl	10f0c <getopt_long@plt>
   11464:	sub	r1, r0, #48	; 0x30
   11468:	cmp	r1, #10
   1146c:	bcs	1149c <__assert_fail@plt+0x47c>
   11470:	ldr	r1, [sl]
   11474:	cmp	r1, #0
   11478:	beq	11488 <__assert_fail@plt+0x468>
   1147c:	sub	r0, r1, #1
   11480:	bl	11818 <__assert_fail@plt+0x7f8>
   11484:	b	1144c <__assert_fail@plt+0x42c>
   11488:	strb	r6, [sp, #14]
   1148c:	strb	r0, [sp, #13]
   11490:	mov	r0, r8
   11494:	bl	11818 <__assert_fail@plt+0x7f8>
   11498:	b	1144c <__assert_fail@plt+0x42c>
   1149c:	cmp	r0, #104	; 0x68
   114a0:	bgt	11424 <__assert_fail@plt+0x404>
   114a4:	cmn	r0, #1
   114a8:	bne	11678 <__assert_fail@plt+0x658>
   114ac:	bl	11c04 <__assert_fail@plt+0xbe4>
   114b0:	movw	r0, #24888	; 0x6138
   114b4:	movt	r0, #2
   114b8:	ldr	r1, [r0]
   114bc:	mov	r0, #0
   114c0:	cmp	r1, r5
   114c4:	addlt	r0, r4, r1, lsl #2
   114c8:	bl	11e40 <__assert_fail@plt+0xe20>
   114cc:	mov	r0, #0
   114d0:	bl	11e70 <__assert_fail@plt+0xe50>
   114d4:	movw	sl, #24920	; 0x6158
   114d8:	cmp	r0, #0
   114dc:	movt	sl, #2
   114e0:	beq	11634 <__assert_fail@plt+0x614>
   114e4:	mov	r4, r0
   114e8:	add	r9, sp, #15
   114ec:	mov	r7, #0
   114f0:	mov	r8, #1
   114f4:	mov	r5, #0
   114f8:	str	r7, [sp, #16]
   114fc:	mov	r0, r4
   11500:	bl	10e58 <getc_unlocked@plt>
   11504:	mov	r6, r0
   11508:	cmn	r0, #1
   1150c:	bgt	11528 <__assert_fail@plt+0x508>
   11510:	mov	r0, r4
   11514:	bl	11e70 <__assert_fail@plt+0xe50>
   11518:	mov	r4, r0
   1151c:	cmp	r0, #0
   11520:	bne	114fc <__assert_fail@plt+0x4dc>
   11524:	mov	r4, #0
   11528:	tst	r8, #1
   1152c:	beq	115a0 <__assert_fail@plt+0x580>
   11530:	cmp	r6, #8
   11534:	beq	115a8 <__assert_fail@plt+0x588>
   11538:	cmp	r6, #9
   1153c:	bne	115d8 <__assert_fail@plt+0x5b8>
   11540:	mov	r0, r7
   11544:	mov	r1, r5
   11548:	add	r2, sp, #16
   1154c:	mov	r3, r9
   11550:	bl	11d3c <__assert_fail@plt+0xd1c>
   11554:	ldrb	r2, [sp, #15]
   11558:	adds	r8, r7, #1
   1155c:	adc	r6, r5, #0
   11560:	cmp	r2, #0
   11564:	moveq	r8, r0
   11568:	moveq	r6, r1
   1156c:	subs	r0, r8, r7
   11570:	sbcs	r0, r6, r5
   11574:	bcc	116e0 <__assert_fail@plt+0x6c0>
   11578:	adds	r7, r7, #1
   1157c:	adc	r5, r5, #0
   11580:	subs	r0, r7, r8
   11584:	sbcs	r0, r5, r6
   11588:	bcs	115ec <__assert_fail@plt+0x5cc>
   1158c:	mov	r0, #32
   11590:	bl	11008 <putchar_unlocked@plt>
   11594:	cmn	r0, #1
   11598:	bgt	11578 <__assert_fail@plt+0x558>
   1159c:	b	1164c <__assert_fail@plt+0x62c>
   115a0:	mov	r8, #0
   115a4:	b	11610 <__assert_fail@plt+0x5f0>
   115a8:	ldr	r0, [sp, #16]
   115ac:	mov	r6, #8
   115b0:	cmp	r0, #0
   115b4:	subne	r0, r0, #1
   115b8:	subs	r1, r7, #1
   115bc:	str	r0, [sp, #16]
   115c0:	orr	r0, r7, r5
   115c4:	sbc	r2, r5, #0
   115c8:	cmp	r0, #0
   115cc:	movne	r5, r2
   115d0:	movne	r7, r1
   115d4:	b	115f0 <__assert_fail@plt+0x5d0>
   115d8:	adds	r7, r7, #1
   115dc:	adc	r5, r5, #0
   115e0:	orrs	r0, r7, r5
   115e4:	bne	115f0 <__assert_fail@plt+0x5d0>
   115e8:	b	116e0 <__assert_fail@plt+0x6c0>
   115ec:	mov	r6, #32
   115f0:	ldrb	r0, [sl]
   115f4:	mov	r8, #1
   115f8:	cmp	r0, #0
   115fc:	bne	11610 <__assert_fail@plt+0x5f0>
   11600:	bl	10f18 <__ctype_b_loc@plt>
   11604:	ldr	r0, [r0]
   11608:	ldrb	r0, [r0, r6, lsl #1]
   1160c:	and	r8, r0, #1
   11610:	cmp	r6, #0
   11614:	blt	11634 <__assert_fail@plt+0x614>
   11618:	mov	r0, r6
   1161c:	bl	11008 <putchar_unlocked@plt>
   11620:	cmn	r0, #1
   11624:	ble	1164c <__assert_fail@plt+0x62c>
   11628:	cmp	r6, #10
   1162c:	bne	114fc <__assert_fail@plt+0x4dc>
   11630:	b	114ec <__assert_fail@plt+0x4cc>
   11634:	bl	1204c <__assert_fail@plt+0x102c>
   11638:	movw	r0, #24924	; 0x615c
   1163c:	movt	r0, #2
   11640:	ldr	r0, [r0]
   11644:	sub	sp, fp, #28
   11648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1164c:	bl	10f3c <__errno_location@plt>
   11650:	ldr	r4, [r0]
   11654:	movw	r1, #20769	; 0x5121
   11658:	mov	r0, #0
   1165c:	mov	r2, #5
   11660:	movt	r1, #1
   11664:	bl	10e64 <dcgettext@plt>
   11668:	mov	r2, r0
   1166c:	mov	r0, #1
   11670:	mov	r1, r4
   11674:	bl	10ed0 <error@plt>
   11678:	cmn	r0, #3
   1167c:	beq	11690 <__assert_fail@plt+0x670>
   11680:	cmn	r0, #2
   11684:	bne	116d8 <__assert_fail@plt+0x6b8>
   11688:	mov	r0, #0
   1168c:	bl	1111c <__assert_fail@plt+0xfc>
   11690:	movw	r0, #24808	; 0x60e8
   11694:	movw	r2, #20262	; 0x4f26
   11698:	mov	r1, #0
   1169c:	movt	r0, #2
   116a0:	movt	r2, #1
   116a4:	str	r1, [sp, #4]
   116a8:	movw	r1, #20217	; 0x4ef9
   116ac:	ldr	r3, [r0]
   116b0:	movw	r0, #24908	; 0x614c
   116b4:	str	r2, [sp]
   116b8:	movw	r2, #20248	; 0x4f18
   116bc:	movt	r1, #1
   116c0:	movt	r0, #2
   116c4:	movt	r2, #1
   116c8:	ldr	r0, [r0]
   116cc:	bl	142e4 <__assert_fail@plt+0x32c4>
   116d0:	mov	r0, #0
   116d4:	bl	10f24 <exit@plt>
   116d8:	mov	r0, #1
   116dc:	bl	1111c <__assert_fail@plt+0xfc>
   116e0:	movw	r1, #20746	; 0x510a
   116e4:	mov	r0, #0
   116e8:	mov	r2, #5
   116ec:	movt	r1, #1
   116f0:	bl	10e64 <dcgettext@plt>
   116f4:	mov	r2, r0
   116f8:	mov	r0, #1
   116fc:	mov	r1, #0
   11700:	bl	10ed0 <error@plt>
   11704:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11708:	add	fp, sp, #24
   1170c:	movw	r8, #24928	; 0x6160
   11710:	mov	r4, r1
   11714:	mov	r6, r0
   11718:	mov	r0, #0
   1171c:	movt	r8, #2
   11720:	ldr	r1, [r8]
   11724:	cmp	r1, #0
   11728:	beq	11744 <__assert_fail@plt+0x724>
   1172c:	movw	r2, #24932	; 0x6164
   11730:	movt	r2, #2
   11734:	ldr	r2, [r2]
   11738:	add	r2, r2, r1, lsl #3
   1173c:	ldrd	r2, [r2, #-8]
   11740:	b	1174c <__assert_fail@plt+0x72c>
   11744:	mov	r2, #0
   11748:	mov	r3, #0
   1174c:	subs	r7, r6, r2
   11750:	mov	r5, r6
   11754:	sbcs	r7, r4, r3
   11758:	movwcc	r0, #1
   1175c:	cmp	r0, #0
   11760:	mov	r0, r4
   11764:	movne	r5, r2
   11768:	movne	r0, r3
   1176c:	subs	r7, r5, r2
   11770:	sbc	r5, r0, r3
   11774:	movw	r0, #24936	; 0x6168
   11778:	movt	r0, #2
   1177c:	ldr	r0, [r0]
   11780:	cmp	r1, r0
   11784:	bne	117b0 <__assert_fail@plt+0x790>
   11788:	movw	r9, #24932	; 0x6164
   1178c:	movw	r1, #24936	; 0x6168
   11790:	mov	r2, #8
   11794:	movt	r9, #2
   11798:	movt	r1, #2
   1179c:	ldr	r0, [r9]
   117a0:	bl	144f8 <__assert_fail@plt+0x34d8>
   117a4:	ldr	r1, [r8]
   117a8:	str	r0, [r9]
   117ac:	b	117bc <__assert_fail@plt+0x79c>
   117b0:	movw	r0, #24932	; 0x6164
   117b4:	movt	r0, #2
   117b8:	ldr	r0, [r0]
   117bc:	add	r2, r1, #1
   117c0:	str	r2, [r8]
   117c4:	str	r6, [r0, r1, lsl #3]!
   117c8:	str	r4, [r0, #4]
   117cc:	movw	r0, #25296	; 0x62d0
   117d0:	movt	r0, #2
   117d4:	ldr	r1, [r0]
   117d8:	subs	r1, r1, r7
   117dc:	rscs	r1, r5, #0
   117e0:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   117e4:	cmp	r5, #0
   117e8:	bne	117f4 <__assert_fail@plt+0x7d4>
   117ec:	str	r7, [r0]
   117f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   117f4:	movw	r1, #20960	; 0x51e0
   117f8:	mov	r0, #0
   117fc:	mov	r2, #5
   11800:	movt	r1, #1
   11804:	bl	10e64 <dcgettext@plt>
   11808:	mov	r2, r0
   1180c:	mov	r0, #1
   11810:	mov	r1, #0
   11814:	bl	10ed0 <error@plt>
   11818:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1181c:	add	fp, sp, #28
   11820:	sub	sp, sp, #12
   11824:	mov	r8, r0
   11828:	mov	r0, #0
   1182c:	mov	r7, #0
   11830:	mov	sl, #1
   11834:	mov	r9, #0
   11838:	mov	r5, #0
   1183c:	mov	r4, #0
   11840:	str	r0, [sp, #8]
   11844:	mov	r0, #0
   11848:	str	r0, [sp, #4]
   1184c:	ldrb	r6, [r8]
   11850:	cmp	r6, #44	; 0x2c
   11854:	beq	118cc <__assert_fail@plt+0x8ac>
   11858:	cmp	r6, #0
   1185c:	beq	11aa0 <__assert_fail@plt+0xa80>
   11860:	bl	10f18 <__ctype_b_loc@plt>
   11864:	ldr	r0, [r0]
   11868:	ldrb	r0, [r0, r6, lsl #1]
   1186c:	tst	r0, #1
   11870:	bne	118cc <__assert_fail@plt+0x8ac>
   11874:	cmp	r6, #43	; 0x2b
   11878:	beq	1192c <__assert_fail@plt+0x90c>
   1187c:	cmp	r6, #47	; 0x2f
   11880:	bne	1198c <__assert_fail@plt+0x96c>
   11884:	mov	r5, #0
   11888:	tst	r4, #1
   1188c:	beq	11a84 <__assert_fail@plt+0xa64>
   11890:	movw	r1, #20983	; 0x51f7
   11894:	mov	r0, #0
   11898:	mov	r2, #5
   1189c:	movt	r1, #1
   118a0:	bl	10e64 <dcgettext@plt>
   118a4:	mov	r9, r0
   118a8:	mov	r0, r8
   118ac:	bl	13df8 <__assert_fail@plt+0x2dd8>
   118b0:	mov	r3, r0
   118b4:	mov	r0, #0
   118b8:	mov	r1, #0
   118bc:	mov	r2, r9
   118c0:	bl	10ed0 <error@plt>
   118c4:	mov	r9, #1
   118c8:	b	11978 <__assert_fail@plt+0x958>
   118cc:	tst	r4, #1
   118d0:	beq	11a88 <__assert_fail@plt+0xa68>
   118d4:	mov	r0, r7
   118d8:	tst	r9, #1
   118dc:	beq	118fc <__assert_fail@plt+0x8dc>
   118e0:	ldr	r1, [sp, #8]
   118e4:	bl	11b3c <__assert_fail@plt+0xb1c>
   118e8:	mov	r9, #1
   118ec:	cmp	r0, #0
   118f0:	mov	r4, #0
   118f4:	bne	11a8c <__assert_fail@plt+0xa6c>
   118f8:	b	11b34 <__assert_fail@plt+0xb14>
   118fc:	tst	r5, #1
   11900:	beq	11918 <__assert_fail@plt+0x8f8>
   11904:	ldr	r1, [sp, #8]
   11908:	bl	11ba0 <__assert_fail@plt+0xb80>
   1190c:	cmp	r0, #0
   11910:	bne	11980 <__assert_fail@plt+0x960>
   11914:	b	11b34 <__assert_fail@plt+0xb14>
   11918:	ldr	r1, [sp, #8]
   1191c:	bl	11704 <__assert_fail@plt+0x6e4>
   11920:	mov	r9, #0
   11924:	mov	r5, #0
   11928:	b	11a88 <__assert_fail@plt+0xa68>
   1192c:	tst	r4, #1
   11930:	beq	11980 <__assert_fail@plt+0x960>
   11934:	movw	r1, #21024	; 0x5220
   11938:	mov	r0, #0
   1193c:	mov	r2, #5
   11940:	mov	r9, #0
   11944:	movt	r1, #1
   11948:	bl	10e64 <dcgettext@plt>
   1194c:	mov	r4, r7
   11950:	mov	r7, r0
   11954:	mov	r0, r8
   11958:	bl	13df8 <__assert_fail@plt+0x2dd8>
   1195c:	mov	r3, r0
   11960:	mov	r2, r7
   11964:	mov	r0, #0
   11968:	mov	r1, #0
   1196c:	mov	r7, r4
   11970:	bl	10ed0 <error@plt>
   11974:	mov	r5, #1
   11978:	mov	sl, #0
   1197c:	b	11a7c <__assert_fail@plt+0xa5c>
   11980:	mov	r5, #1
   11984:	mov	r9, #0
   11988:	b	11a88 <__assert_fail@plt+0xa68>
   1198c:	sub	r0, r6, #48	; 0x30
   11990:	cmp	r0, #9
   11994:	bhi	11b00 <__assert_fail@plt+0xae0>
   11998:	ldr	r2, [sp, #4]
   1199c:	ands	r1, r4, #1
   119a0:	moveq	r2, r8
   119a4:	str	r2, [sp, #4]
   119a8:	mov	r2, r1
   119ac:	movne	r1, r7
   119b0:	ldr	r3, [sp, #8]
   119b4:	movne	r2, r3
   119b8:	movw	r3, #39321	; 0x9999
   119bc:	movt	r3, #39321	; 0x9999
   119c0:	subs	r3, r3, r1
   119c4:	movw	r3, #39321	; 0x9999
   119c8:	movt	r3, #6553	; 0x1999
   119cc:	sbcs	r3, r3, r2
   119d0:	bcc	11a04 <__assert_fail@plt+0x9e4>
   119d4:	mov	r3, #10
   119d8:	add	r6, r2, r2, lsl #2
   119dc:	mov	r4, #1
   119e0:	str	r2, [sp, #8]
   119e4:	umull	r3, r7, r1, r3
   119e8:	add	r7, r7, r6, lsl #1
   119ec:	adds	r3, r3, r0
   119f0:	adc	r0, r7, r0, asr #31
   119f4:	subs	r7, r3, r1
   119f8:	sbcs	r7, r0, r2
   119fc:	mov	r7, r1
   11a00:	bcs	11a94 <__assert_fail@plt+0xa74>
   11a04:	ldr	sl, [sp, #4]
   11a08:	movw	r1, #21065	; 0x5249
   11a0c:	movt	r1, #1
   11a10:	mov	r0, sl
   11a14:	bl	11014 <strspn@plt>
   11a18:	mov	r8, r7
   11a1c:	mov	r7, r0
   11a20:	mov	r0, sl
   11a24:	mov	r1, r7
   11a28:	bl	147b4 <__assert_fail@plt+0x3794>
   11a2c:	movw	r1, #21076	; 0x5254
   11a30:	mov	r6, r0
   11a34:	mov	r0, #0
   11a38:	mov	r2, #5
   11a3c:	movt	r1, #1
   11a40:	bl	10e64 <dcgettext@plt>
   11a44:	mov	r4, r0
   11a48:	mov	r0, r6
   11a4c:	bl	13df8 <__assert_fail@plt+0x2dd8>
   11a50:	mov	r3, r0
   11a54:	mov	r0, #0
   11a58:	mov	r1, #0
   11a5c:	mov	r2, r4
   11a60:	bl	10ed0 <error@plt>
   11a64:	mov	r0, r6
   11a68:	bl	12328 <__assert_fail@plt+0x1308>
   11a6c:	add	r0, sl, r7
   11a70:	mov	r7, r8
   11a74:	mov	sl, #0
   11a78:	sub	r8, r0, #1
   11a7c:	mov	r4, #1
   11a80:	b	11a8c <__assert_fail@plt+0xa6c>
   11a84:	mov	r9, #1
   11a88:	mov	r4, #0
   11a8c:	add	r8, r8, #1
   11a90:	b	1184c <__assert_fail@plt+0x82c>
   11a94:	mov	r7, r3
   11a98:	str	r0, [sp, #8]
   11a9c:	b	11a8c <__assert_fail@plt+0xa6c>
   11aa0:	and	r0, sl, r4
   11aa4:	tst	r0, #1
   11aa8:	beq	11ac4 <__assert_fail@plt+0xaa4>
   11aac:	mov	r0, r7
   11ab0:	tst	r9, #1
   11ab4:	beq	11ad0 <__assert_fail@plt+0xab0>
   11ab8:	ldr	r1, [sp, #8]
   11abc:	bl	11b3c <__assert_fail@plt+0xb1c>
   11ac0:	b	11ae0 <__assert_fail@plt+0xac0>
   11ac4:	tst	sl, #1
   11ac8:	bne	11ae8 <__assert_fail@plt+0xac8>
   11acc:	b	11b34 <__assert_fail@plt+0xb14>
   11ad0:	tst	r5, #1
   11ad4:	beq	11af0 <__assert_fail@plt+0xad0>
   11ad8:	ldr	r1, [sp, #8]
   11adc:	bl	11ba0 <__assert_fail@plt+0xb80>
   11ae0:	cmp	r0, #0
   11ae4:	beq	11b34 <__assert_fail@plt+0xb14>
   11ae8:	sub	sp, fp, #28
   11aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11af0:	ldr	r1, [sp, #8]
   11af4:	sub	sp, fp, #28
   11af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11afc:	b	11704 <__assert_fail@plt+0x6e4>
   11b00:	movw	r1, #21101	; 0x526d
   11b04:	mov	r0, #0
   11b08:	mov	r2, #5
   11b0c:	movt	r1, #1
   11b10:	bl	10e64 <dcgettext@plt>
   11b14:	mov	r4, r0
   11b18:	mov	r0, r8
   11b1c:	bl	13df8 <__assert_fail@plt+0x2dd8>
   11b20:	mov	r3, r0
   11b24:	mov	r0, #0
   11b28:	mov	r1, #0
   11b2c:	mov	r2, r4
   11b30:	bl	10ed0 <error@plt>
   11b34:	mov	r0, #1
   11b38:	bl	10f24 <exit@plt>
   11b3c:	push	{r4, r5, r6, r7, fp, lr}
   11b40:	add	fp, sp, #16
   11b44:	movw	r7, #24944	; 0x6170
   11b48:	mov	r5, r1
   11b4c:	mov	r6, r0
   11b50:	movt	r7, #2
   11b54:	ldrd	r0, [r7]
   11b58:	orrs	r0, r0, r1
   11b5c:	beq	11b8c <__assert_fail@plt+0xb6c>
   11b60:	movw	r1, #21626	; 0x547a
   11b64:	mov	r0, #0
   11b68:	mov	r2, #5
   11b6c:	mov	r4, #0
   11b70:	movt	r1, #1
   11b74:	bl	10e64 <dcgettext@plt>
   11b78:	mov	r2, r0
   11b7c:	mov	r0, #0
   11b80:	mov	r1, #0
   11b84:	bl	10ed0 <error@plt>
   11b88:	b	11b90 <__assert_fail@plt+0xb70>
   11b8c:	mov	r4, #1
   11b90:	mov	r0, r4
   11b94:	str	r6, [r7]
   11b98:	str	r5, [r7, #4]
   11b9c:	pop	{r4, r5, r6, r7, fp, pc}
   11ba0:	push	{r4, r5, r6, r7, fp, lr}
   11ba4:	add	fp, sp, #16
   11ba8:	movw	r7, #24952	; 0x6178
   11bac:	mov	r5, r1
   11bb0:	mov	r6, r0
   11bb4:	movt	r7, #2
   11bb8:	ldrd	r0, [r7]
   11bbc:	orrs	r0, r0, r1
   11bc0:	beq	11bf0 <__assert_fail@plt+0xbd0>
   11bc4:	movw	r1, #21673	; 0x54a9
   11bc8:	mov	r0, #0
   11bcc:	mov	r2, #5
   11bd0:	mov	r4, #0
   11bd4:	movt	r1, #1
   11bd8:	bl	10e64 <dcgettext@plt>
   11bdc:	mov	r2, r0
   11be0:	mov	r0, #0
   11be4:	mov	r1, #0
   11be8:	bl	10ed0 <error@plt>
   11bec:	b	11bf4 <__assert_fail@plt+0xbd4>
   11bf0:	mov	r4, #1
   11bf4:	mov	r0, r4
   11bf8:	str	r6, [r7]
   11bfc:	str	r5, [r7, #4]
   11c00:	pop	{r4, r5, r6, r7, fp, pc}
   11c04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11c08:	add	fp, sp, #24
   11c0c:	movw	r0, #24928	; 0x6160
   11c10:	movt	r0, #2
   11c14:	ldr	r1, [r0]
   11c18:	movw	r0, #24932	; 0x6164
   11c1c:	movt	r0, #2
   11c20:	ldr	r0, [r0]
   11c24:	cmp	r1, #0
   11c28:	beq	11c70 <__assert_fail@plt+0xc50>
   11c2c:	mov	r2, #0
   11c30:	mov	r3, r0
   11c34:	mov	r6, #0
   11c38:	mov	r4, #0
   11c3c:	ldr	r8, [r3]
   11c40:	ldr	r5, [r3, #4]
   11c44:	orrs	r7, r8, r5
   11c48:	beq	11d00 <__assert_fail@plt+0xce0>
   11c4c:	subs	r7, r6, r8
   11c50:	sbcs	r7, r4, r5
   11c54:	bcs	11d0c <__assert_fail@plt+0xcec>
   11c58:	add	r2, r2, #1
   11c5c:	add	r3, r3, #8
   11c60:	mov	r6, r8
   11c64:	mov	r4, r5
   11c68:	cmp	r2, r1
   11c6c:	bcc	11c3c <__assert_fail@plt+0xc1c>
   11c70:	movw	r2, #24944	; 0x6170
   11c74:	movt	r2, #2
   11c78:	ldrd	r4, [r2]
   11c7c:	movw	r2, #24952	; 0x6178
   11c80:	movt	r2, #2
   11c84:	ldrd	r2, [r2]
   11c88:	orrs	r7, r2, r3
   11c8c:	orrsne	r6, r4, r5
   11c90:	bne	11d30 <__assert_fail@plt+0xd10>
   11c94:	cmp	r1, #0
   11c98:	beq	11cc0 <__assert_fail@plt+0xca0>
   11c9c:	mov	r6, #0
   11ca0:	cmp	r1, #1
   11ca4:	bne	11cec <__assert_fail@plt+0xccc>
   11ca8:	orr	r1, r4, r2
   11cac:	orr	r2, r5, r3
   11cb0:	mov	r7, #0
   11cb4:	orrs	r1, r1, r2
   11cb8:	ldrdeq	r6, [r0]
   11cbc:	b	11cf0 <__assert_fail@plt+0xcd0>
   11cc0:	cmp	r7, #0
   11cc4:	orr	r0, r4, r5
   11cc8:	mov	r7, #0
   11ccc:	movweq	r2, #8
   11cd0:	cmp	r0, #0
   11cd4:	movw	r0, #25296	; 0x62d0
   11cd8:	movne	r2, r4
   11cdc:	movt	r0, #2
   11ce0:	str	r2, [r0]
   11ce4:	mov	r6, r2
   11ce8:	b	11cf0 <__assert_fail@plt+0xcd0>
   11cec:	mov	r7, #0
   11cf0:	movw	r0, #24960	; 0x6180
   11cf4:	movt	r0, #2
   11cf8:	strd	r6, [r0]
   11cfc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11d00:	movw	r1, #21720	; 0x54d8
   11d04:	movt	r1, #1
   11d08:	b	11d14 <__assert_fail@plt+0xcf4>
   11d0c:	movw	r1, #21741	; 0x54ed
   11d10:	movt	r1, #1
   11d14:	mov	r0, #0
   11d18:	mov	r2, #5
   11d1c:	bl	10e64 <dcgettext@plt>
   11d20:	mov	r2, r0
   11d24:	mov	r0, #1
   11d28:	mov	r1, #0
   11d2c:	bl	10ed0 <error@plt>
   11d30:	movw	r1, #21769	; 0x5509
   11d34:	movt	r1, #1
   11d38:	b	11d14 <__assert_fail@plt+0xcf4>
   11d3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11d40:	add	fp, sp, #24
   11d44:	mov	r9, r0
   11d48:	mov	r0, #0
   11d4c:	mov	r8, r1
   11d50:	strb	r0, [r3]
   11d54:	movw	r0, #24960	; 0x6180
   11d58:	movt	r0, #2
   11d5c:	ldrd	r6, [r0]
   11d60:	orrs	r0, r6, r7
   11d64:	bne	11dc8 <__assert_fail@plt+0xda8>
   11d68:	movw	r0, #24928	; 0x6160
   11d6c:	ldr	r1, [r2]
   11d70:	movt	r0, #2
   11d74:	ldr	r0, [r0]
   11d78:	cmp	r1, r0
   11d7c:	bcs	11db4 <__assert_fail@plt+0xd94>
   11d80:	movw	r7, #24932	; 0x6164
   11d84:	movt	r7, #2
   11d88:	ldr	r7, [r7]
   11d8c:	add	r4, r7, r1, lsl #3
   11d90:	ldrd	r6, [r4]
   11d94:	subs	r5, r9, r6
   11d98:	sbcs	r5, r8, r7
   11d9c:	bcc	11dec <__assert_fail@plt+0xdcc>
   11da0:	add	r1, r1, #1
   11da4:	add	r4, r4, #8
   11da8:	cmp	r1, r0
   11dac:	str	r1, [r2]
   11db0:	bcc	11d90 <__assert_fail@plt+0xd70>
   11db4:	movw	r1, #24944	; 0x6170
   11db8:	movt	r1, #2
   11dbc:	ldrd	r6, [r1]
   11dc0:	orrs	r1, r6, r7
   11dc4:	beq	11df8 <__assert_fail@plt+0xdd8>
   11dc8:	mov	r0, r9
   11dcc:	mov	r1, r8
   11dd0:	mov	r2, r6
   11dd4:	mov	r3, r7
   11dd8:	bl	14ba0 <__assert_fail@plt+0x3b80>
   11ddc:	adds	r0, r6, r9
   11de0:	adc	r1, r7, r8
   11de4:	subs	r6, r0, r2
   11de8:	sbc	r7, r1, r3
   11dec:	mov	r0, r6
   11df0:	mov	r1, r7
   11df4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11df8:	movw	r1, #24952	; 0x6178
   11dfc:	movt	r1, #2
   11e00:	ldrd	r6, [r1]
   11e04:	orrs	r1, r6, r7
   11e08:	beq	11e2c <__assert_fail@plt+0xe0c>
   11e0c:	movw	r1, #24932	; 0x6164
   11e10:	movt	r1, #2
   11e14:	ldr	r1, [r1]
   11e18:	add	r0, r1, r0, lsl #3
   11e1c:	ldrd	r0, [r0, #-8]
   11e20:	subs	r0, r9, r0
   11e24:	sbc	r1, r8, r1
   11e28:	b	11dd0 <__assert_fail@plt+0xdb0>
   11e2c:	mov	r0, #1
   11e30:	mov	r6, #0
   11e34:	mov	r7, #0
   11e38:	strb	r0, [r3]
   11e3c:	b	11dec <__assert_fail@plt+0xdcc>
   11e40:	movw	r1, #24968	; 0x6188
   11e44:	mov	r2, #0
   11e48:	cmp	r0, #0
   11e4c:	movt	r1, #2
   11e50:	strb	r2, [r1]
   11e54:	movw	r1, #24800	; 0x60e0
   11e58:	movt	r1, #2
   11e5c:	movne	r1, r0
   11e60:	movw	r0, #24972	; 0x618c
   11e64:	movt	r0, #2
   11e68:	str	r1, [r0]
   11e6c:	bx	lr
   11e70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e74:	add	fp, sp, #28
   11e78:	sub	sp, sp, #4
   11e7c:	cmp	r0, #0
   11e80:	beq	11f2c <__assert_fail@plt+0xf0c>
   11e84:	movw	r7, #24976	; 0x6190
   11e88:	mov	r5, r0
   11e8c:	movt	r7, #2
   11e90:	ldr	r0, [r7]
   11e94:	cmp	r0, #0
   11e98:	beq	1202c <__assert_fail@plt+0x100c>
   11e9c:	bl	10f3c <__errno_location@plt>
   11ea0:	ldr	r4, [r0]
   11ea4:	mov	r6, r0
   11ea8:	mov	r0, r5
   11eac:	bl	10eb8 <ferror_unlocked@plt>
   11eb0:	cmp	r0, #0
   11eb4:	movw	r1, #21902	; 0x558e
   11eb8:	moveq	r4, r0
   11ebc:	ldr	r0, [r7]
   11ec0:	movt	r1, #1
   11ec4:	bl	10df8 <strcmp@plt>
   11ec8:	cmp	r0, #0
   11ecc:	beq	11ee4 <__assert_fail@plt+0xec4>
   11ed0:	mov	r0, r5
   11ed4:	bl	12230 <__assert_fail@plt+0x1210>
   11ed8:	cmp	r0, #0
   11edc:	ldrne	r4, [r6]
   11ee0:	b	11eec <__assert_fail@plt+0xecc>
   11ee4:	mov	r0, r5
   11ee8:	bl	10fc0 <clearerr_unlocked@plt>
   11eec:	cmp	r4, #0
   11ef0:	beq	11f2c <__assert_fail@plt+0xf0c>
   11ef4:	ldr	r2, [r7]
   11ef8:	mov	r0, #0
   11efc:	mov	r1, #3
   11f00:	bl	13c64 <__assert_fail@plt+0x2c44>
   11f04:	movw	r2, #21141	; 0x5295
   11f08:	mov	r3, r0
   11f0c:	mov	r0, #0
   11f10:	mov	r1, r4
   11f14:	movt	r2, #1
   11f18:	bl	10ed0 <error@plt>
   11f1c:	movw	r0, #24924	; 0x615c
   11f20:	mov	r1, #1
   11f24:	movt	r0, #2
   11f28:	str	r1, [r0]
   11f2c:	movw	r5, #24972	; 0x618c
   11f30:	movt	r5, #2
   11f34:	ldr	r0, [r5]
   11f38:	add	r1, r0, #4
   11f3c:	str	r1, [r5]
   11f40:	ldr	r7, [r0]
   11f44:	cmp	r7, #0
   11f48:	beq	12000 <__assert_fail@plt+0xfe0>
   11f4c:	movw	sl, #21141	; 0x5295
   11f50:	movw	r9, #24924	; 0x615c
   11f54:	mov	r8, #1
   11f58:	movt	sl, #1
   11f5c:	movt	r9, #2
   11f60:	movw	r1, #21902	; 0x558e
   11f64:	mov	r0, r7
   11f68:	movt	r1, #1
   11f6c:	bl	10df8 <strcmp@plt>
   11f70:	cmp	r0, #0
   11f74:	beq	11f90 <__assert_fail@plt+0xf70>
   11f78:	movw	r1, #20779	; 0x512b
   11f7c:	mov	r0, r7
   11f80:	movt	r1, #1
   11f84:	bl	10fcc <fopen64@plt>
   11f88:	mov	r6, r0
   11f8c:	b	11fa8 <__assert_fail@plt+0xf88>
   11f90:	movw	r0, #24968	; 0x6188
   11f94:	movt	r0, #2
   11f98:	strb	r8, [r0]
   11f9c:	movw	r0, #24904	; 0x6148
   11fa0:	movt	r0, #2
   11fa4:	ldr	r6, [r0]
   11fa8:	cmp	r6, #0
   11fac:	bne	12008 <__assert_fail@plt+0xfe8>
   11fb0:	bl	10f3c <__errno_location@plt>
   11fb4:	ldr	r4, [r0]
   11fb8:	mov	r0, #0
   11fbc:	mov	r1, #3
   11fc0:	mov	r2, r7
   11fc4:	mov	r6, #0
   11fc8:	bl	13c64 <__assert_fail@plt+0x2c44>
   11fcc:	mov	r3, r0
   11fd0:	mov	r0, #0
   11fd4:	mov	r1, r4
   11fd8:	mov	r2, sl
   11fdc:	bl	10ed0 <error@plt>
   11fe0:	ldr	r0, [r5]
   11fe4:	str	r8, [r9]
   11fe8:	add	r1, r0, #4
   11fec:	str	r1, [r5]
   11ff0:	ldr	r7, [r0]
   11ff4:	cmp	r7, #0
   11ff8:	bne	11f60 <__assert_fail@plt+0xf40>
   11ffc:	b	12020 <__assert_fail@plt+0x1000>
   12000:	mov	r6, #0
   12004:	b	12020 <__assert_fail@plt+0x1000>
   12008:	movw	r0, #24976	; 0x6190
   1200c:	mov	r1, #2
   12010:	movt	r0, #2
   12014:	str	r7, [r0]
   12018:	mov	r0, r6
   1201c:	bl	121f4 <__assert_fail@plt+0x11d4>
   12020:	mov	r0, r6
   12024:	sub	sp, fp, #28
   12028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1202c:	movw	r0, #21144	; 0x5298
   12030:	movw	r1, #21154	; 0x52a2
   12034:	movw	r3, #21174	; 0x52b6
   12038:	mov	r2, #340	; 0x154
   1203c:	movt	r0, #1
   12040:	movt	r1, #1
   12044:	movt	r3, #1
   12048:	bl	11020 <__assert_fail@plt>
   1204c:	push	{fp, lr}
   12050:	mov	fp, sp
   12054:	movw	r0, #24968	; 0x6188
   12058:	movt	r0, #2
   1205c:	ldrb	r0, [r0]
   12060:	cmp	r0, #1
   12064:	popne	{fp, pc}
   12068:	movw	r0, #24904	; 0x6148
   1206c:	movt	r0, #2
   12070:	ldr	r0, [r0]
   12074:	bl	12230 <__assert_fail@plt+0x1210>
   12078:	cmp	r0, #0
   1207c:	bne	12084 <__assert_fail@plt+0x1064>
   12080:	pop	{fp, pc}
   12084:	bl	10f3c <__errno_location@plt>
   12088:	ldr	r1, [r0]
   1208c:	movw	r2, #21902	; 0x558e
   12090:	mov	r0, #1
   12094:	movt	r2, #1
   12098:	bl	10ed0 <error@plt>
   1209c:	push	{r4, sl, fp, lr}
   120a0:	add	fp, sp, #8
   120a4:	movw	r1, #21198	; 0x52ce
   120a8:	mov	r0, #0
   120ac:	mov	r2, #5
   120b0:	movt	r1, #1
   120b4:	bl	10e64 <dcgettext@plt>
   120b8:	movw	r4, #24908	; 0x614c
   120bc:	movt	r4, #2
   120c0:	ldr	r1, [r4]
   120c4:	bl	10de0 <fputs_unlocked@plt>
   120c8:	movw	r1, #21261	; 0x530d
   120cc:	mov	r0, #0
   120d0:	mov	r2, #5
   120d4:	movt	r1, #1
   120d8:	bl	10e64 <dcgettext@plt>
   120dc:	ldr	r1, [r4]
   120e0:	pop	{r4, sl, fp, lr}
   120e4:	b	10de0 <fputs_unlocked@plt>
   120e8:	movw	r1, #24980	; 0x6194
   120ec:	movt	r1, #2
   120f0:	str	r0, [r1]
   120f4:	bx	lr
   120f8:	movw	r1, #24984	; 0x6198
   120fc:	movt	r1, #2
   12100:	strb	r0, [r1]
   12104:	bx	lr
   12108:	push	{r4, r5, r6, sl, fp, lr}
   1210c:	add	fp, sp, #16
   12110:	sub	sp, sp, #8
   12114:	movw	r0, #24908	; 0x614c
   12118:	movt	r0, #2
   1211c:	ldr	r0, [r0]
   12120:	bl	14954 <__assert_fail@plt+0x3934>
   12124:	cmp	r0, #0
   12128:	beq	12150 <__assert_fail@plt+0x1130>
   1212c:	movw	r0, #24984	; 0x6198
   12130:	movt	r0, #2
   12134:	ldrb	r0, [r0]
   12138:	cmp	r0, #0
   1213c:	beq	12170 <__assert_fail@plt+0x1150>
   12140:	bl	10f3c <__errno_location@plt>
   12144:	ldr	r0, [r0]
   12148:	cmp	r0, #32
   1214c:	bne	12170 <__assert_fail@plt+0x1150>
   12150:	movw	r0, #24896	; 0x6140
   12154:	movt	r0, #2
   12158:	ldr	r0, [r0]
   1215c:	bl	14954 <__assert_fail@plt+0x3934>
   12160:	cmp	r0, #0
   12164:	subeq	sp, fp, #16
   12168:	popeq	{r4, r5, r6, sl, fp, pc}
   1216c:	b	121e0 <__assert_fail@plt+0x11c0>
   12170:	movw	r1, #20769	; 0x5121
   12174:	mov	r0, #0
   12178:	mov	r2, #5
   1217c:	movt	r1, #1
   12180:	bl	10e64 <dcgettext@plt>
   12184:	mov	r4, r0
   12188:	movw	r0, #24980	; 0x6194
   1218c:	movt	r0, #2
   12190:	ldr	r6, [r0]
   12194:	bl	10f3c <__errno_location@plt>
   12198:	ldr	r5, [r0]
   1219c:	cmp	r6, #0
   121a0:	bne	121bc <__assert_fail@plt+0x119c>
   121a4:	movw	r2, #21141	; 0x5295
   121a8:	mov	r0, #0
   121ac:	mov	r1, r5
   121b0:	mov	r3, r4
   121b4:	movt	r2, #1
   121b8:	b	121dc <__assert_fail@plt+0x11bc>
   121bc:	mov	r0, r6
   121c0:	bl	13bb8 <__assert_fail@plt+0x2b98>
   121c4:	movw	r2, #21829	; 0x5545
   121c8:	mov	r3, r0
   121cc:	str	r4, [sp]
   121d0:	mov	r0, #0
   121d4:	mov	r1, r5
   121d8:	movt	r2, #1
   121dc:	bl	10ed0 <error@plt>
   121e0:	movw	r0, #24812	; 0x60ec
   121e4:	movt	r0, #2
   121e8:	ldr	r0, [r0]
   121ec:	bl	10e28 <_exit@plt>
   121f0:	b	10e04 <posix_fadvise64@plt>
   121f4:	cmp	r0, #0
   121f8:	bxeq	lr
   121fc:	push	{r4, sl, fp, lr}
   12200:	add	fp, sp, #8
   12204:	sub	sp, sp, #16
   12208:	mov	r4, r1
   1220c:	bl	10f6c <fileno@plt>
   12210:	mov	r1, #0
   12214:	mov	r2, #0
   12218:	mov	r3, #0
   1221c:	str	r1, [sp]
   12220:	stmib	sp, {r1, r4}
   12224:	bl	10e04 <posix_fadvise64@plt>
   12228:	sub	sp, fp, #8
   1222c:	pop	{r4, sl, fp, pc}
   12230:	push	{r4, r5, r6, sl, fp, lr}
   12234:	add	fp, sp, #16
   12238:	sub	sp, sp, #8
   1223c:	mov	r4, r0
   12240:	bl	10f6c <fileno@plt>
   12244:	cmn	r0, #1
   12248:	ble	122bc <__assert_fail@plt+0x129c>
   1224c:	mov	r0, r4
   12250:	bl	10ef4 <__freading@plt>
   12254:	cmp	r0, #0
   12258:	beq	12284 <__assert_fail@plt+0x1264>
   1225c:	mov	r0, r4
   12260:	bl	10f6c <fileno@plt>
   12264:	mov	r1, #1
   12268:	mov	r2, #0
   1226c:	mov	r3, #0
   12270:	str	r1, [sp]
   12274:	bl	10e94 <lseek64@plt>
   12278:	and	r0, r0, r1
   1227c:	cmn	r0, #1
   12280:	beq	122bc <__assert_fail@plt+0x129c>
   12284:	mov	r0, r4
   12288:	bl	122cc <__assert_fail@plt+0x12ac>
   1228c:	cmp	r0, #0
   12290:	beq	122bc <__assert_fail@plt+0x129c>
   12294:	bl	10f3c <__errno_location@plt>
   12298:	ldr	r6, [r0]
   1229c:	mov	r5, r0
   122a0:	mov	r0, r4
   122a4:	bl	10f84 <fclose@plt>
   122a8:	cmp	r6, #0
   122ac:	strne	r6, [r5]
   122b0:	mvnne	r0, #0
   122b4:	sub	sp, fp, #16
   122b8:	pop	{r4, r5, r6, sl, fp, pc}
   122bc:	mov	r0, r4
   122c0:	sub	sp, fp, #16
   122c4:	pop	{r4, r5, r6, sl, fp, lr}
   122c8:	b	10f84 <fclose@plt>
   122cc:	push	{r4, sl, fp, lr}
   122d0:	add	fp, sp, #8
   122d4:	sub	sp, sp, #8
   122d8:	mov	r4, r0
   122dc:	cmp	r0, #0
   122e0:	beq	122fc <__assert_fail@plt+0x12dc>
   122e4:	mov	r0, r4
   122e8:	bl	10ef4 <__freading@plt>
   122ec:	cmp	r0, #0
   122f0:	ldrbne	r0, [r4, #1]
   122f4:	tstne	r0, #1
   122f8:	bne	1230c <__assert_fail@plt+0x12ec>
   122fc:	mov	r0, r4
   12300:	sub	sp, fp, #8
   12304:	pop	{r4, sl, fp, lr}
   12308:	b	10e10 <fflush@plt>
   1230c:	mov	r0, #1
   12310:	mov	r2, #0
   12314:	mov	r3, #0
   12318:	str	r0, [sp]
   1231c:	mov	r0, r4
   12320:	bl	12350 <__assert_fail@plt+0x1330>
   12324:	b	122fc <__assert_fail@plt+0x12dc>
   12328:	push	{r4, r5, r6, sl, fp, lr}
   1232c:	add	fp, sp, #16
   12330:	mov	r4, r0
   12334:	bl	10f3c <__errno_location@plt>
   12338:	ldr	r6, [r0]
   1233c:	mov	r5, r0
   12340:	mov	r0, r4
   12344:	bl	10e1c <free@plt>
   12348:	str	r6, [r5]
   1234c:	pop	{r4, r5, r6, sl, fp, pc}
   12350:	push	{r4, r5, r6, r7, fp, lr}
   12354:	add	fp, sp, #16
   12358:	sub	sp, sp, #8
   1235c:	mov	r4, r0
   12360:	ldr	r0, [r0, #4]
   12364:	mov	r5, r3
   12368:	mov	r6, r2
   1236c:	ldr	r1, [r4, #8]
   12370:	cmp	r1, r0
   12374:	bne	12390 <__assert_fail@plt+0x1370>
   12378:	ldrd	r0, [r4, #16]
   1237c:	cmp	r1, r0
   12380:	bne	12390 <__assert_fail@plt+0x1370>
   12384:	ldr	r0, [r4, #36]	; 0x24
   12388:	cmp	r0, #0
   1238c:	beq	123a8 <__assert_fail@plt+0x1388>
   12390:	mov	r0, r4
   12394:	mov	r2, r6
   12398:	mov	r3, r5
   1239c:	sub	sp, fp, #16
   123a0:	pop	{r4, r5, r6, r7, fp, lr}
   123a4:	b	10f90 <fseeko64@plt>
   123a8:	ldr	r7, [fp, #8]
   123ac:	mov	r0, r4
   123b0:	bl	10f6c <fileno@plt>
   123b4:	mov	r2, r6
   123b8:	mov	r3, r5
   123bc:	str	r7, [sp]
   123c0:	bl	10e94 <lseek64@plt>
   123c4:	and	r2, r0, r1
   123c8:	cmn	r2, #1
   123cc:	beq	123e8 <__assert_fail@plt+0x13c8>
   123d0:	strd	r0, [r4, #80]	; 0x50
   123d4:	ldr	r0, [r4]
   123d8:	bic	r0, r0, #16
   123dc:	str	r0, [r4]
   123e0:	mov	r0, #0
   123e4:	b	123ec <__assert_fail@plt+0x13cc>
   123e8:	mvn	r0, #0
   123ec:	sub	sp, fp, #16
   123f0:	pop	{r4, r5, r6, r7, fp, pc}
   123f4:	push	{r4, r5, fp, lr}
   123f8:	add	fp, sp, #8
   123fc:	cmp	r0, #0
   12400:	beq	12494 <__assert_fail@plt+0x1474>
   12404:	mov	r1, #47	; 0x2f
   12408:	mov	r4, r0
   1240c:	bl	10fa8 <strrchr@plt>
   12410:	cmp	r0, #0
   12414:	mov	r5, r4
   12418:	addne	r5, r0, #1
   1241c:	sub	r0, r5, r4
   12420:	cmp	r0, #7
   12424:	blt	12478 <__assert_fail@plt+0x1458>
   12428:	movw	r1, #21892	; 0x5584
   1242c:	sub	r0, r5, #7
   12430:	mov	r2, #7
   12434:	movt	r1, #1
   12438:	bl	10ff0 <strncmp@plt>
   1243c:	cmp	r0, #0
   12440:	bne	12478 <__assert_fail@plt+0x1458>
   12444:	movw	r1, #21900	; 0x558c
   12448:	mov	r0, r5
   1244c:	mov	r2, #3
   12450:	movt	r1, #1
   12454:	bl	10ff0 <strncmp@plt>
   12458:	cmp	r0, #0
   1245c:	beq	12468 <__assert_fail@plt+0x1448>
   12460:	mov	r4, r5
   12464:	b	12478 <__assert_fail@plt+0x1458>
   12468:	movw	r0, #24880	; 0x6130
   1246c:	add	r4, r5, #3
   12470:	movt	r0, #2
   12474:	str	r4, [r0]
   12478:	movw	r0, #24884	; 0x6134
   1247c:	movt	r0, #2
   12480:	str	r4, [r0]
   12484:	movw	r0, #24988	; 0x619c
   12488:	movt	r0, #2
   1248c:	str	r4, [r0]
   12490:	pop	{r4, r5, fp, pc}
   12494:	movw	r0, #24896	; 0x6140
   12498:	movt	r0, #2
   1249c:	ldr	r1, [r0]
   124a0:	movw	r0, #21836	; 0x554c
   124a4:	movt	r0, #1
   124a8:	bl	10fe4 <fputs@plt>
   124ac:	bl	10ffc <abort@plt>
   124b0:	push	{r4, r5, r6, sl, fp, lr}
   124b4:	add	fp, sp, #16
   124b8:	mov	r4, r0
   124bc:	movw	r0, #24992	; 0x61a0
   124c0:	movt	r0, #2
   124c4:	cmp	r4, #0
   124c8:	moveq	r4, r0
   124cc:	bl	10f3c <__errno_location@plt>
   124d0:	ldr	r6, [r0]
   124d4:	mov	r5, r0
   124d8:	mov	r0, r4
   124dc:	mov	r1, #48	; 0x30
   124e0:	bl	1473c <__assert_fail@plt+0x371c>
   124e4:	str	r6, [r5]
   124e8:	pop	{r4, r5, r6, sl, fp, pc}
   124ec:	movw	r1, #24992	; 0x61a0
   124f0:	cmp	r0, #0
   124f4:	movt	r1, #2
   124f8:	movne	r1, r0
   124fc:	ldr	r0, [r1]
   12500:	bx	lr
   12504:	movw	r2, #24992	; 0x61a0
   12508:	cmp	r0, #0
   1250c:	movt	r2, #2
   12510:	movne	r2, r0
   12514:	str	r1, [r2]
   12518:	bx	lr
   1251c:	movw	r3, #24992	; 0x61a0
   12520:	cmp	r0, #0
   12524:	movt	r3, #2
   12528:	movne	r3, r0
   1252c:	ubfx	r0, r1, #5, #3
   12530:	and	r1, r1, #31
   12534:	add	r0, r3, r0, lsl #2
   12538:	ldr	r3, [r0, #8]
   1253c:	eor	r2, r2, r3, lsr r1
   12540:	and	r2, r2, #1
   12544:	eor	r2, r3, r2, lsl r1
   12548:	str	r2, [r0, #8]
   1254c:	mov	r0, #1
   12550:	and	r0, r0, r3, lsr r1
   12554:	bx	lr
   12558:	movw	r2, #24992	; 0x61a0
   1255c:	cmp	r0, #0
   12560:	movt	r2, #2
   12564:	movne	r2, r0
   12568:	ldr	r0, [r2, #4]
   1256c:	str	r1, [r2, #4]
   12570:	bx	lr
   12574:	movw	r3, #24992	; 0x61a0
   12578:	cmp	r0, #0
   1257c:	movt	r3, #2
   12580:	movne	r3, r0
   12584:	cmp	r1, #0
   12588:	mov	r0, #10
   1258c:	cmpne	r2, #0
   12590:	str	r0, [r3]
   12594:	bne	125a4 <__assert_fail@plt+0x1584>
   12598:	push	{fp, lr}
   1259c:	mov	fp, sp
   125a0:	bl	10ffc <abort@plt>
   125a4:	str	r1, [r3, #40]	; 0x28
   125a8:	str	r2, [r3, #44]	; 0x2c
   125ac:	bx	lr
   125b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125b4:	add	fp, sp, #28
   125b8:	sub	sp, sp, #20
   125bc:	mov	r7, r0
   125c0:	ldr	r0, [fp, #8]
   125c4:	movw	r5, #24992	; 0x61a0
   125c8:	mov	r8, r3
   125cc:	mov	r9, r2
   125d0:	mov	sl, r1
   125d4:	movt	r5, #2
   125d8:	cmp	r0, #0
   125dc:	movne	r5, r0
   125e0:	bl	10f3c <__errno_location@plt>
   125e4:	mov	r4, r0
   125e8:	ldm	r5, {r0, r1}
   125ec:	ldr	r2, [r5, #40]	; 0x28
   125f0:	ldr	r3, [r5, #44]	; 0x2c
   125f4:	add	r5, r5, #8
   125f8:	ldr	r6, [r4]
   125fc:	stm	sp, {r0, r1, r5}
   12600:	str	r2, [sp, #12]
   12604:	str	r3, [sp, #16]
   12608:	mov	r0, r7
   1260c:	mov	r1, sl
   12610:	mov	r2, r9
   12614:	mov	r3, r8
   12618:	bl	12628 <__assert_fail@plt+0x1608>
   1261c:	str	r6, [r4]
   12620:	sub	sp, fp, #28
   12624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12628:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1262c:	add	fp, sp, #28
   12630:	sub	sp, sp, #156	; 0x9c
   12634:	str	r0, [fp, #-56]	; 0xffffffc8
   12638:	ldr	r0, [fp, #12]
   1263c:	mov	r4, r1
   12640:	str	r3, [sp, #80]	; 0x50
   12644:	str	r2, [fp, #-84]	; 0xffffffac
   12648:	and	r1, r0, #4
   1264c:	str	r1, [sp, #24]
   12650:	and	r1, r0, #1
   12654:	str	r1, [sp, #28]
   12658:	ubfx	r7, r0, #1, #1
   1265c:	bl	10ea0 <__ctype_get_mb_cur_max@plt>
   12660:	str	r0, [sp, #32]
   12664:	ldr	r0, [fp, #24]
   12668:	ldr	r9, [fp, #8]
   1266c:	mov	r2, #0
   12670:	mov	r1, #0
   12674:	mov	r5, #0
   12678:	str	r2, [sp, #52]	; 0x34
   1267c:	mov	r2, #1
   12680:	str	r0, [sp, #72]	; 0x48
   12684:	ldr	r0, [fp, #20]
   12688:	str	r0, [sp, #64]	; 0x40
   1268c:	mov	r0, #0
   12690:	str	r0, [sp, #92]	; 0x5c
   12694:	mov	r0, #0
   12698:	str	r0, [fp, #-76]	; 0xffffffb4
   1269c:	mov	r0, #0
   126a0:	cmp	r9, #10
   126a4:	str	r1, [sp, #68]	; 0x44
   126a8:	bhi	136a8 <__assert_fail@plt+0x2688>
   126ac:	add	r1, pc, #28
   126b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   126b4:	ldr	lr, [sp, #80]	; 0x50
   126b8:	mov	r6, r4
   126bc:	mov	r8, #0
   126c0:	mov	r3, #1
   126c4:	mov	sl, #0
   126c8:	mov	r4, r2
   126cc:	ldr	pc, [r1, r9, lsl #2]
   126d0:	andeq	r2, r1, r0, lsr #15
   126d4:	ldrdeq	r2, [r1], -ip
   126d8:			; <UNDEFINED> instruction: 0x000127b0
   126dc:	muleq	r1, r8, r7
   126e0:	ldrdeq	r2, [r1], -r0
   126e4:	andeq	r2, r1, r8, lsr #16
   126e8:	andeq	r2, r1, r0, asr #15
   126ec:	andeq	r2, r1, r8, lsl #17
   126f0:	strdeq	r2, [r1], -ip
   126f4:	strdeq	r2, [r1], -ip
   126f8:	andeq	r2, r1, r4, lsr #14
   126fc:	movw	r0, #21982	; 0x55de
   12700:	mov	r1, r9
   12704:	movt	r0, #1
   12708:	bl	13e10 <__assert_fail@plt+0x2df0>
   1270c:	str	r0, [sp, #64]	; 0x40
   12710:	movw	r0, #21812	; 0x5534
   12714:	mov	r1, r9
   12718:	movt	r0, #1
   1271c:	bl	13e10 <__assert_fail@plt+0x2df0>
   12720:	str	r0, [sp, #72]	; 0x48
   12724:	mov	r8, #0
   12728:	mov	sl, r7
   1272c:	tst	r7, #1
   12730:	str	r5, [fp, #-48]	; 0xffffffd0
   12734:	bne	12770 <__assert_fail@plt+0x1750>
   12738:	ldr	r0, [sp, #64]	; 0x40
   1273c:	ldrb	r0, [r0]
   12740:	cmp	r0, #0
   12744:	beq	12770 <__assert_fail@plt+0x1750>
   12748:	ldr	r1, [sp, #64]	; 0x40
   1274c:	mov	r8, #0
   12750:	add	r1, r1, #1
   12754:	cmp	r8, r6
   12758:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1275c:	strbcc	r0, [r2, r8]
   12760:	ldrb	r0, [r1, r8]
   12764:	add	r8, r8, #1
   12768:	cmp	r0, #0
   1276c:	bne	12754 <__assert_fail@plt+0x1734>
   12770:	ldr	r7, [sp, #72]	; 0x48
   12774:	mov	r0, r7
   12778:	bl	10f30 <strlen@plt>
   1277c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12780:	ldr	lr, [sp, #80]	; 0x50
   12784:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12788:	str	r0, [fp, #-76]	; 0xffffffb4
   1278c:	str	r7, [sp, #92]	; 0x5c
   12790:	mov	r3, #1
   12794:	b	12888 <__assert_fail@plt+0x1868>
   12798:	mov	r0, #1
   1279c:	b	127dc <__assert_fail@plt+0x17bc>
   127a0:	mov	r9, #0
   127a4:	mov	r8, #0
   127a8:	mov	r3, r0
   127ac:	b	12884 <__assert_fail@plt+0x1864>
   127b0:	tst	r7, #1
   127b4:	bne	127dc <__assert_fail@plt+0x17bc>
   127b8:	mov	r3, r0
   127bc:	b	12804 <__assert_fail@plt+0x17e4>
   127c0:	mov	r0, #1
   127c4:	mov	r8, #0
   127c8:	mov	r9, #5
   127cc:	b	1283c <__assert_fail@plt+0x181c>
   127d0:	mov	r3, #1
   127d4:	tst	r7, #1
   127d8:	beq	12804 <__assert_fail@plt+0x17e4>
   127dc:	mov	r1, #1
   127e0:	mov	r8, #0
   127e4:	mov	r9, #2
   127e8:	mov	r3, r0
   127ec:	mov	sl, #1
   127f0:	str	r1, [fp, #-76]	; 0xffffffb4
   127f4:	movw	r1, #21812	; 0x5534
   127f8:	movt	r1, #1
   127fc:	str	r1, [sp, #92]	; 0x5c
   12800:	b	12888 <__assert_fail@plt+0x1868>
   12804:	cmp	r6, #0
   12808:	mov	r8, #1
   1280c:	mov	r9, #2
   12810:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   12814:	movne	r0, #39	; 0x27
   12818:	strbne	r0, [r1]
   1281c:	movw	r0, #21812	; 0x5534
   12820:	movt	r0, #1
   12824:	b	12878 <__assert_fail@plt+0x1858>
   12828:	mov	r9, #5
   1282c:	tst	r7, #1
   12830:	beq	12858 <__assert_fail@plt+0x1838>
   12834:	mov	r0, #1
   12838:	mov	r8, #0
   1283c:	str	r0, [fp, #-76]	; 0xffffffb4
   12840:	movw	r0, #21980	; 0x55dc
   12844:	mov	r3, #1
   12848:	mov	sl, #1
   1284c:	movt	r0, #1
   12850:	str	r0, [sp, #92]	; 0x5c
   12854:	b	12888 <__assert_fail@plt+0x1868>
   12858:	cmp	r6, #0
   1285c:	mov	r8, #1
   12860:	mov	r3, #1
   12864:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   12868:	movne	r0, #34	; 0x22
   1286c:	strbne	r0, [r1]
   12870:	movw	r0, #21980	; 0x55dc
   12874:	movt	r0, #1
   12878:	str	r0, [sp, #92]	; 0x5c
   1287c:	mov	r0, #1
   12880:	str	r0, [fp, #-76]	; 0xffffffb4
   12884:	mov	sl, #0
   12888:	ldr	r0, [fp, #16]
   1288c:	mov	r7, #0
   12890:	str	r9, [fp, #-64]	; 0xffffffc0
   12894:	str	sl, [fp, #-72]	; 0xffffffb8
   12898:	str	r3, [sp, #84]	; 0x54
   1289c:	cmp	r0, #0
   128a0:	movwne	r0, #1
   128a4:	and	r0, r0, sl
   128a8:	str	r0, [fp, #-88]	; 0xffffffa8
   128ac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   128b0:	cmp	r0, #0
   128b4:	movwne	r0, #1
   128b8:	subs	r2, r9, #2
   128bc:	and	r1, r0, sl
   128c0:	str	r2, [fp, #-80]	; 0xffffffb0
   128c4:	and	r1, r3, r1
   128c8:	str	r1, [sp, #44]	; 0x2c
   128cc:	clz	r1, r2
   128d0:	lsr	r1, r1, #5
   128d4:	and	r1, r1, sl
   128d8:	str	r1, [sp, #56]	; 0x38
   128dc:	mov	r1, r2
   128e0:	eor	r2, sl, #1
   128e4:	movwne	r1, #1
   128e8:	str	r2, [sp, #88]	; 0x58
   128ec:	orr	r2, r1, r2
   128f0:	and	r1, r1, r3
   128f4:	and	r0, r0, r1
   128f8:	str	r2, [sp, #60]	; 0x3c
   128fc:	str	r1, [fp, #-68]	; 0xffffffbc
   12900:	str	r0, [fp, #-60]	; 0xffffffc4
   12904:	eor	r0, r3, #1
   12908:	str	r0, [sp, #48]	; 0x30
   1290c:	cmn	lr, #1
   12910:	beq	12920 <__assert_fail@plt+0x1900>
   12914:	cmp	r7, lr
   12918:	bne	1292c <__assert_fail@plt+0x190c>
   1291c:	b	134d8 <__assert_fail@plt+0x24b8>
   12920:	ldrb	r0, [ip, r7]
   12924:	cmp	r0, #0
   12928:	beq	134e0 <__assert_fail@plt+0x24c0>
   1292c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12930:	mov	r9, #0
   12934:	str	r5, [fp, #-48]	; 0xffffffd0
   12938:	str	r6, [fp, #-52]	; 0xffffffcc
   1293c:	cmp	r0, #0
   12940:	beq	12980 <__assert_fail@plt+0x1960>
   12944:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12948:	mov	r5, r4
   1294c:	add	r4, r7, r0
   12950:	cmp	r0, #2
   12954:	bcc	12970 <__assert_fail@plt+0x1950>
   12958:	cmn	lr, #1
   1295c:	bne	12970 <__assert_fail@plt+0x1950>
   12960:	mov	r0, ip
   12964:	bl	10f30 <strlen@plt>
   12968:	ldr	ip, [fp, #-84]	; 0xffffffac
   1296c:	mov	lr, r0
   12970:	cmp	r4, lr
   12974:	bls	12988 <__assert_fail@plt+0x1968>
   12978:	mov	r6, #0
   1297c:	b	129c8 <__assert_fail@plt+0x19a8>
   12980:	mov	r6, #0
   12984:	b	129cc <__assert_fail@plt+0x19ac>
   12988:	ldr	r1, [sp, #92]	; 0x5c
   1298c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12990:	add	r0, ip, r7
   12994:	mov	r4, lr
   12998:	bl	10e4c <memcmp@plt>
   1299c:	ldr	r2, [sp, #88]	; 0x58
   129a0:	cmp	r0, #0
   129a4:	mov	r1, r0
   129a8:	movwne	r1, #1
   129ac:	orr	r1, r1, r2
   129b0:	tst	r1, #1
   129b4:	beq	13574 <__assert_fail@plt+0x2554>
   129b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   129bc:	clz	r0, r0
   129c0:	mov	lr, r4
   129c4:	lsr	r6, r0, #5
   129c8:	mov	r4, r5
   129cc:	ldrb	r5, [ip, r7]
   129d0:	cmp	r5, #126	; 0x7e
   129d4:	bhi	12d9c <__assert_fail@plt+0x1d7c>
   129d8:	add	r3, pc, #16
   129dc:	mov	sl, #1
   129e0:	mov	r2, #110	; 0x6e
   129e4:	mov	r0, #97	; 0x61
   129e8:	mov	r1, #0
   129ec:	ldr	pc, [r3, r5, lsl #2]
   129f0:	andeq	r2, r1, r0, lsl #25
   129f4:	muleq	r1, ip, sp
   129f8:	muleq	r1, ip, sp
   129fc:	muleq	r1, ip, sp
   12a00:	muleq	r1, ip, sp
   12a04:	muleq	r1, ip, sp
   12a08:	muleq	r1, ip, sp
   12a0c:	andeq	r2, r1, r0, asr #28
   12a10:	andeq	r2, r1, r0, ror #24
   12a14:	andeq	r2, r1, r8, asr ip
   12a18:	andeq	r2, r1, ip, ror #24
   12a1c:	strdeq	r2, [r1], -r0
   12a20:	andeq	r2, r1, r0, asr ip
   12a24:	andeq	r2, r1, r8, ror #24
   12a28:	muleq	r1, ip, sp
   12a2c:	muleq	r1, ip, sp
   12a30:	muleq	r1, ip, sp
   12a34:	muleq	r1, ip, sp
   12a38:	muleq	r1, ip, sp
   12a3c:	muleq	r1, ip, sp
   12a40:	muleq	r1, ip, sp
   12a44:	muleq	r1, ip, sp
   12a48:	muleq	r1, ip, sp
   12a4c:	muleq	r1, ip, sp
   12a50:	muleq	r1, ip, sp
   12a54:	muleq	r1, ip, sp
   12a58:	muleq	r1, ip, sp
   12a5c:	muleq	r1, ip, sp
   12a60:	muleq	r1, ip, sp
   12a64:	muleq	r1, ip, sp
   12a68:	muleq	r1, ip, sp
   12a6c:	muleq	r1, ip, sp
   12a70:	andeq	r2, r1, r0, lsl #28
   12a74:	andeq	r2, r1, r4, lsl #28
   12a78:	andeq	r2, r1, r4, lsl #28
   12a7c:	andeq	r2, r1, r0, lsl #24
   12a80:	andeq	r2, r1, r4, lsl #28
   12a84:	andeq	r2, r1, ip, ror #23
   12a88:	andeq	r2, r1, r4, lsl #28
   12a8c:	strdeq	r2, [r1], -r8
   12a90:	andeq	r2, r1, r4, lsl #28
   12a94:	andeq	r2, r1, r4, lsl #28
   12a98:	andeq	r2, r1, r4, lsl #28
   12a9c:	andeq	r2, r1, ip, ror #23
   12aa0:	andeq	r2, r1, ip, ror #23
   12aa4:	andeq	r2, r1, ip, ror #23
   12aa8:	andeq	r2, r1, ip, ror #23
   12aac:	andeq	r2, r1, ip, ror #23
   12ab0:	andeq	r2, r1, ip, ror #23
   12ab4:	andeq	r2, r1, ip, ror #23
   12ab8:	andeq	r2, r1, ip, ror #23
   12abc:	andeq	r2, r1, ip, ror #23
   12ac0:	andeq	r2, r1, ip, ror #23
   12ac4:	andeq	r2, r1, ip, ror #23
   12ac8:	andeq	r2, r1, ip, ror #23
   12acc:	andeq	r2, r1, ip, ror #23
   12ad0:	andeq	r2, r1, ip, ror #23
   12ad4:	andeq	r2, r1, ip, ror #23
   12ad8:	andeq	r2, r1, ip, ror #23
   12adc:	andeq	r2, r1, r4, lsl #28
   12ae0:	andeq	r2, r1, r4, lsl #28
   12ae4:	andeq	r2, r1, r4, lsl #28
   12ae8:	andeq	r2, r1, r4, lsl #28
   12aec:	andeq	r2, r1, r4, asr #25
   12af0:	muleq	r1, ip, sp
   12af4:	andeq	r2, r1, ip, ror #23
   12af8:	andeq	r2, r1, ip, ror #23
   12afc:	andeq	r2, r1, ip, ror #23
   12b00:	andeq	r2, r1, ip, ror #23
   12b04:	andeq	r2, r1, ip, ror #23
   12b08:	andeq	r2, r1, ip, ror #23
   12b0c:	andeq	r2, r1, ip, ror #23
   12b10:	andeq	r2, r1, ip, ror #23
   12b14:	andeq	r2, r1, ip, ror #23
   12b18:	andeq	r2, r1, ip, ror #23
   12b1c:	andeq	r2, r1, ip, ror #23
   12b20:	andeq	r2, r1, ip, ror #23
   12b24:	andeq	r2, r1, ip, ror #23
   12b28:	andeq	r2, r1, ip, ror #23
   12b2c:	andeq	r2, r1, ip, ror #23
   12b30:	andeq	r2, r1, ip, ror #23
   12b34:	andeq	r2, r1, ip, ror #23
   12b38:	andeq	r2, r1, ip, ror #23
   12b3c:	andeq	r2, r1, ip, ror #23
   12b40:	andeq	r2, r1, ip, ror #23
   12b44:	andeq	r2, r1, ip, ror #23
   12b48:	andeq	r2, r1, ip, ror #23
   12b4c:	andeq	r2, r1, ip, ror #23
   12b50:	andeq	r2, r1, ip, ror #23
   12b54:	andeq	r2, r1, ip, ror #23
   12b58:	andeq	r2, r1, ip, ror #23
   12b5c:	andeq	r2, r1, r4, lsl #28
   12b60:	andeq	r2, r1, ip, lsr #24
   12b64:	andeq	r2, r1, ip, ror #23
   12b68:	andeq	r2, r1, r4, lsl #28
   12b6c:	andeq	r2, r1, ip, ror #23
   12b70:	andeq	r2, r1, r4, lsl #28
   12b74:	andeq	r2, r1, ip, ror #23
   12b78:	andeq	r2, r1, ip, ror #23
   12b7c:	andeq	r2, r1, ip, ror #23
   12b80:	andeq	r2, r1, ip, ror #23
   12b84:	andeq	r2, r1, ip, ror #23
   12b88:	andeq	r2, r1, ip, ror #23
   12b8c:	andeq	r2, r1, ip, ror #23
   12b90:	andeq	r2, r1, ip, ror #23
   12b94:	andeq	r2, r1, ip, ror #23
   12b98:	andeq	r2, r1, ip, ror #23
   12b9c:	andeq	r2, r1, ip, ror #23
   12ba0:	andeq	r2, r1, ip, ror #23
   12ba4:	andeq	r2, r1, ip, ror #23
   12ba8:	andeq	r2, r1, ip, ror #23
   12bac:	andeq	r2, r1, ip, ror #23
   12bb0:	andeq	r2, r1, ip, ror #23
   12bb4:	andeq	r2, r1, ip, ror #23
   12bb8:	andeq	r2, r1, ip, ror #23
   12bbc:	andeq	r2, r1, ip, ror #23
   12bc0:	andeq	r2, r1, ip, ror #23
   12bc4:	andeq	r2, r1, ip, ror #23
   12bc8:	andeq	r2, r1, ip, ror #23
   12bcc:	andeq	r2, r1, ip, ror #23
   12bd0:	andeq	r2, r1, ip, ror #23
   12bd4:	andeq	r2, r1, ip, ror #23
   12bd8:	andeq	r2, r1, ip, ror #23
   12bdc:	andeq	r2, r1, r0, lsl ip
   12be0:	andeq	r2, r1, r4, lsl #28
   12be4:	andeq	r2, r1, r0, lsl ip
   12be8:	andeq	r2, r1, r0, lsl #24
   12bec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12bf0:	cmp	r0, #0
   12bf4:	beq	12e54 <__assert_fail@plt+0x1e34>
   12bf8:	ldr	r0, [fp, #16]
   12bfc:	b	12e58 <__assert_fail@plt+0x1e38>
   12c00:	mov	sl, #0
   12c04:	cmp	r7, #0
   12c08:	bne	13070 <__assert_fail@plt+0x2050>
   12c0c:	b	12e00 <__assert_fail@plt+0x1de0>
   12c10:	mov	sl, #0
   12c14:	cmn	lr, #1
   12c18:	beq	12dec <__assert_fail@plt+0x1dcc>
   12c1c:	cmp	r7, #0
   12c20:	cmpeq	lr, #1
   12c24:	bne	13070 <__assert_fail@plt+0x2050>
   12c28:	b	12e00 <__assert_fail@plt+0x1de0>
   12c2c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12c30:	cmp	r0, #2
   12c34:	bne	12e24 <__assert_fail@plt+0x1e04>
   12c38:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c3c:	tst	r0, #1
   12c40:	bne	13590 <__assert_fail@plt+0x2570>
   12c44:	mov	r9, #0
   12c48:	mov	r0, #92	; 0x5c
   12c4c:	b	12e38 <__assert_fail@plt+0x1e18>
   12c50:	mov	r0, #102	; 0x66
   12c54:	b	12e40 <__assert_fail@plt+0x1e20>
   12c58:	mov	r2, #116	; 0x74
   12c5c:	b	12c6c <__assert_fail@plt+0x1c4c>
   12c60:	mov	r0, #98	; 0x62
   12c64:	b	12e40 <__assert_fail@plt+0x1e20>
   12c68:	mov	r2, #114	; 0x72
   12c6c:	ldr	r0, [sp, #60]	; 0x3c
   12c70:	tst	r0, #1
   12c74:	mov	r0, r2
   12c78:	bne	12e40 <__assert_fail@plt+0x1e20>
   12c7c:	b	13590 <__assert_fail@plt+0x2570>
   12c80:	ldr	r0, [sp, #84]	; 0x54
   12c84:	tst	r0, #1
   12c88:	beq	12f2c <__assert_fail@plt+0x1f0c>
   12c8c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c90:	tst	r0, #1
   12c94:	bne	13698 <__assert_fail@plt+0x2678>
   12c98:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12c9c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12ca0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12ca4:	cmp	r0, #2
   12ca8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12cac:	movwne	r0, #1
   12cb0:	orr	r0, r0, r3
   12cb4:	tst	r0, #1
   12cb8:	beq	133ac <__assert_fail@plt+0x238c>
   12cbc:	mov	r0, r8
   12cc0:	b	133ec <__assert_fail@plt+0x23cc>
   12cc4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12cc8:	mov	r9, #0
   12ccc:	mov	r5, #63	; 0x3f
   12cd0:	cmp	r0, #5
   12cd4:	beq	13078 <__assert_fail@plt+0x2058>
   12cd8:	cmp	r0, #2
   12cdc:	bne	13138 <__assert_fail@plt+0x2118>
   12ce0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ce4:	tst	r0, #1
   12ce8:	beq	1313c <__assert_fail@plt+0x211c>
   12cec:	b	13590 <__assert_fail@plt+0x2570>
   12cf0:	mov	r0, #118	; 0x76
   12cf4:	b	12e40 <__assert_fail@plt+0x1e20>
   12cf8:	mov	r0, #1
   12cfc:	mov	r5, #39	; 0x27
   12d00:	str	r0, [sp, #52]	; 0x34
   12d04:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12d08:	cmp	r0, #2
   12d0c:	bne	12d94 <__assert_fail@plt+0x1d74>
   12d10:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12d14:	tst	r0, #1
   12d18:	bne	13590 <__assert_fail@plt+0x2570>
   12d1c:	ldr	r3, [sp, #68]	; 0x44
   12d20:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12d24:	mov	r9, #0
   12d28:	clz	r1, r2
   12d2c:	cmp	r3, #0
   12d30:	mov	r0, r3
   12d34:	movwne	r0, #1
   12d38:	lsr	r1, r1, #5
   12d3c:	orrs	r0, r0, r1
   12d40:	moveq	r3, r2
   12d44:	moveq	r2, r0
   12d48:	cmp	r8, r2
   12d4c:	str	r3, [sp, #68]	; 0x44
   12d50:	str	r2, [fp, #-52]	; 0xffffffcc
   12d54:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   12d58:	movcc	r0, #39	; 0x27
   12d5c:	strbcc	r0, [r1, r8]
   12d60:	add	r0, r8, #1
   12d64:	cmp	r0, r2
   12d68:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12d6c:	movcc	r1, #92	; 0x5c
   12d70:	strbcc	r1, [r3, r0]
   12d74:	add	r0, r8, #2
   12d78:	add	r8, r8, #3
   12d7c:	cmp	r0, r2
   12d80:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12d84:	movcc	r1, #39	; 0x27
   12d88:	strbcc	r1, [r2, r0]
   12d8c:	mov	r0, #0
   12d90:	str	r0, [fp, #-48]	; 0xffffffd0
   12d94:	mov	sl, #1
   12d98:	b	12bec <__assert_fail@plt+0x1bcc>
   12d9c:	ldr	r0, [sp, #32]
   12da0:	cmp	r0, #1
   12da4:	bne	12f50 <__assert_fail@plt+0x1f30>
   12da8:	str	lr, [sp, #80]	; 0x50
   12dac:	bl	10f18 <__ctype_b_loc@plt>
   12db0:	ldr	r0, [r0]
   12db4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12db8:	mov	r1, #1
   12dbc:	add	r0, r0, r5, lsl #1
   12dc0:	ldrb	r0, [r0, #1]
   12dc4:	ubfx	sl, r0, #6, #1
   12dc8:	ldr	r0, [sp, #48]	; 0x30
   12dcc:	mov	r2, r1
   12dd0:	cmp	r1, #1
   12dd4:	orr	r0, sl, r0
   12dd8:	bhi	13144 <__assert_fail@plt+0x2124>
   12ddc:	tst	r0, #1
   12de0:	beq	13144 <__assert_fail@plt+0x2124>
   12de4:	ldr	lr, [sp, #80]	; 0x50
   12de8:	b	12bec <__assert_fail@plt+0x1bcc>
   12dec:	cmp	r7, #0
   12df0:	bne	1306c <__assert_fail@plt+0x204c>
   12df4:	ldrb	r0, [ip, #1]
   12df8:	cmp	r0, #0
   12dfc:	bne	1306c <__assert_fail@plt+0x204c>
   12e00:	mov	r1, #1
   12e04:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e08:	cmp	r0, #2
   12e0c:	bne	12e1c <__assert_fail@plt+0x1dfc>
   12e10:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12e14:	tst	r0, #1
   12e18:	bne	13590 <__assert_fail@plt+0x2570>
   12e1c:	mov	sl, r1
   12e20:	b	12bec <__assert_fail@plt+0x1bcc>
   12e24:	ldr	r1, [sp, #44]	; 0x2c
   12e28:	mov	r9, #0
   12e2c:	mov	r0, #92	; 0x5c
   12e30:	cmp	r1, #0
   12e34:	beq	12e40 <__assert_fail@plt+0x1e20>
   12e38:	mov	sl, #0
   12e3c:	b	13358 <__assert_fail@plt+0x2338>
   12e40:	ldr	r1, [sp, #84]	; 0x54
   12e44:	mov	sl, #0
   12e48:	mov	r9, #0
   12e4c:	tst	r1, #1
   12e50:	bne	12e8c <__assert_fail@plt+0x1e6c>
   12e54:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12e58:	cmp	r0, #0
   12e5c:	mov	r0, r5
   12e60:	beq	12e84 <__assert_fail@plt+0x1e64>
   12e64:	ldr	r1, [fp, #16]
   12e68:	ubfx	r0, r5, #5, #3
   12e6c:	mov	r2, #1
   12e70:	ldr	r0, [r1, r0, lsl #2]
   12e74:	and	r1, r5, #31
   12e78:	tst	r0, r2, lsl r1
   12e7c:	mov	r0, r5
   12e80:	bne	12e8c <__assert_fail@plt+0x1e6c>
   12e84:	cmp	r6, #0
   12e88:	beq	13358 <__assert_fail@plt+0x2338>
   12e8c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12e90:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12e94:	tst	r1, #1
   12e98:	bne	1356c <__assert_fail@plt+0x254c>
   12e9c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12ea0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12ea4:	cmp	r1, #2
   12ea8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12eac:	movwne	r1, #1
   12eb0:	orr	r1, r1, r5
   12eb4:	tst	r1, #1
   12eb8:	bne	12efc <__assert_fail@plt+0x1edc>
   12ebc:	cmp	r8, r6
   12ec0:	mov	r5, #1
   12ec4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12ec8:	movcc	r1, #39	; 0x27
   12ecc:	strbcc	r1, [r2, r8]
   12ed0:	add	r1, r8, #1
   12ed4:	cmp	r1, r6
   12ed8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12edc:	movcc	r2, #36	; 0x24
   12ee0:	strbcc	r2, [r3, r1]
   12ee4:	add	r1, r8, #2
   12ee8:	add	r8, r8, #3
   12eec:	cmp	r1, r6
   12ef0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12ef4:	movcc	r2, #39	; 0x27
   12ef8:	strbcc	r2, [r3, r1]
   12efc:	cmp	r8, r6
   12f00:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12f04:	movcc	r1, #92	; 0x5c
   12f08:	strbcc	r1, [r2, r8]
   12f0c:	add	r8, r8, #1
   12f10:	cmp	r8, r6
   12f14:	and	r4, r4, sl
   12f18:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   12f1c:	strbcc	r0, [r1, r8]
   12f20:	add	r8, r8, #1
   12f24:	add	r7, r7, #1
   12f28:	b	1290c <__assert_fail@plt+0x18ec>
   12f2c:	ldr	r0, [sp, #28]
   12f30:	mov	sl, #0
   12f34:	mov	r9, #0
   12f38:	mov	r5, #0
   12f3c:	cmp	r0, #0
   12f40:	beq	12e54 <__assert_fail@plt+0x1e34>
   12f44:	ldr	r6, [fp, #-52]	; 0xffffffcc
   12f48:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12f4c:	b	12f24 <__assert_fail@plt+0x1f04>
   12f50:	mov	r0, #0
   12f54:	cmn	lr, #1
   12f58:	str	r6, [sp, #76]	; 0x4c
   12f5c:	str	r4, [sp, #20]
   12f60:	str	r0, [fp, #-36]	; 0xffffffdc
   12f64:	str	r0, [fp, #-40]	; 0xffffffd8
   12f68:	bne	12f7c <__assert_fail@plt+0x1f5c>
   12f6c:	mov	r0, ip
   12f70:	bl	10f30 <strlen@plt>
   12f74:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f78:	mov	lr, r0
   12f7c:	add	r0, ip, r7
   12f80:	mov	sl, #1
   12f84:	mov	r6, #0
   12f88:	sub	r4, fp, #40	; 0x28
   12f8c:	str	lr, [sp, #80]	; 0x50
   12f90:	str	r0, [sp, #36]	; 0x24
   12f94:	str	r6, [sp, #40]	; 0x28
   12f98:	add	r6, r6, r7
   12f9c:	sub	r0, fp, #44	; 0x2c
   12fa0:	mov	r3, r4
   12fa4:	add	r1, ip, r6
   12fa8:	sub	r2, lr, r6
   12fac:	bl	14a0c <__assert_fail@plt+0x39ec>
   12fb0:	cmp	r0, #0
   12fb4:	beq	134c0 <__assert_fail@plt+0x24a0>
   12fb8:	cmn	r0, #1
   12fbc:	beq	13480 <__assert_fail@plt+0x2460>
   12fc0:	ldr	lr, [sp, #80]	; 0x50
   12fc4:	cmn	r0, #2
   12fc8:	beq	13488 <__assert_fail@plt+0x2468>
   12fcc:	ldr	r2, [sp, #56]	; 0x38
   12fd0:	cmp	r0, #2
   12fd4:	mov	r1, #0
   12fd8:	movwcc	r1, #1
   12fdc:	eor	r2, r2, #1
   12fe0:	orrs	r1, r2, r1
   12fe4:	bne	13030 <__assert_fail@plt+0x2010>
   12fe8:	ldr	r1, [sp, #40]	; 0x28
   12fec:	ldr	r2, [sp, #36]	; 0x24
   12ff0:	add	ip, r2, r1
   12ff4:	mov	r2, #1
   12ff8:	ldrb	r3, [ip, r2]
   12ffc:	sub	r6, r3, #94	; 0x5e
   13000:	cmp	r6, #30
   13004:	bhi	13018 <__assert_fail@plt+0x1ff8>
   13008:	mov	r4, #1
   1300c:	mov	r1, #1073741829	; 0x40000005
   13010:	tst	r1, r4, lsl r6
   13014:	bne	1358c <__assert_fail@plt+0x256c>
   13018:	sub	r3, r3, #91	; 0x5b
   1301c:	cmp	r3, #2
   13020:	bcc	1358c <__assert_fail@plt+0x256c>
   13024:	add	r2, r2, #1
   13028:	cmp	r2, r0
   1302c:	bcc	12ff8 <__assert_fail@plt+0x1fd8>
   13030:	ldr	r6, [sp, #40]	; 0x28
   13034:	add	r6, r0, r6
   13038:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1303c:	bl	10e88 <iswprint@plt>
   13040:	cmp	r0, #0
   13044:	sub	r4, fp, #40	; 0x28
   13048:	movwne	r0, #1
   1304c:	and	sl, sl, r0
   13050:	mov	r0, r4
   13054:	bl	10e40 <mbsinit@plt>
   13058:	ldr	lr, [sp, #80]	; 0x50
   1305c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13060:	cmp	r0, #0
   13064:	beq	12f94 <__assert_fail@plt+0x1f74>
   13068:	b	134c8 <__assert_fail@plt+0x24a8>
   1306c:	mvn	lr, #0
   13070:	mov	r9, #0
   13074:	b	12bec <__assert_fail@plt+0x1bcc>
   13078:	ldr	r0, [sp, #24]
   1307c:	cmp	r0, #0
   13080:	beq	13138 <__assert_fail@plt+0x2118>
   13084:	add	r0, r7, #2
   13088:	cmp	r0, lr
   1308c:	bcs	13138 <__assert_fail@plt+0x2118>
   13090:	add	r1, ip, r7
   13094:	ldrb	r1, [r1, #1]
   13098:	cmp	r1, #63	; 0x3f
   1309c:	bne	13138 <__assert_fail@plt+0x2118>
   130a0:	ldrb	r5, [ip, r0]
   130a4:	sub	r1, r5, #33	; 0x21
   130a8:	cmp	r1, #29
   130ac:	bhi	13138 <__assert_fail@plt+0x2118>
   130b0:	movw	r3, #20929	; 0x51c1
   130b4:	mov	r2, #1
   130b8:	movt	r3, #14336	; 0x3800
   130bc:	tst	r3, r2, lsl r1
   130c0:	beq	13138 <__assert_fail@plt+0x2118>
   130c4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   130c8:	tst	r1, #1
   130cc:	bne	136a0 <__assert_fail@plt+0x2680>
   130d0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   130d4:	mov	r7, r0
   130d8:	cmp	r8, r1
   130dc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   130e0:	movcc	r1, #63	; 0x3f
   130e4:	strbcc	r1, [r2, r8]
   130e8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   130ec:	add	r1, r8, #1
   130f0:	cmp	r1, r2
   130f4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   130f8:	movcc	r2, #34	; 0x22
   130fc:	strbcc	r2, [r3, r1]
   13100:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13104:	add	r1, r8, #2
   13108:	cmp	r1, r2
   1310c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13110:	movcc	r2, #34	; 0x22
   13114:	strbcc	r2, [r3, r1]
   13118:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1311c:	add	r1, r8, #3
   13120:	add	r8, r8, #4
   13124:	cmp	r1, r2
   13128:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1312c:	movcc	r2, #63	; 0x3f
   13130:	strbcc	r2, [r3, r1]
   13134:	b	1313c <__assert_fail@plt+0x211c>
   13138:	mov	r5, #63	; 0x3f
   1313c:	mov	sl, #0
   13140:	b	12bec <__assert_fail@plt+0x1bcc>
   13144:	str	r0, [sp, #40]	; 0x28
   13148:	add	r0, r2, r7
   1314c:	str	r6, [sp, #76]	; 0x4c
   13150:	add	r1, r7, #1
   13154:	ldr	lr, [sp, #80]	; 0x50
   13158:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1315c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13160:	mov	r3, #0
   13164:	str	r0, [sp, #36]	; 0x24
   13168:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1316c:	b	13200 <__assert_fail@plt+0x21e0>
   13170:	str	r0, [sp, #76]	; 0x4c
   13174:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13178:	cmp	r9, #0
   1317c:	movwne	r9, #1
   13180:	mvn	r7, r0
   13184:	orr	r7, r7, r9
   13188:	tst	r7, #1
   1318c:	bne	131dc <__assert_fail@plt+0x21bc>
   13190:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13194:	cmp	r8, r6
   13198:	bcs	131b0 <__assert_fail@plt+0x2190>
   1319c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   131a0:	mov	r2, r4
   131a4:	mov	r4, #39	; 0x27
   131a8:	strb	r4, [r7, r8]
   131ac:	mov	r4, r2
   131b0:	add	r7, r8, #1
   131b4:	cmp	r7, r6
   131b8:	bcs	131d0 <__assert_fail@plt+0x21b0>
   131bc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   131c0:	mov	r2, r4
   131c4:	mov	r4, #39	; 0x27
   131c8:	strb	r4, [r0, r7]
   131cc:	mov	r4, r2
   131d0:	add	r8, r8, #2
   131d4:	mov	r0, #0
   131d8:	b	131e4 <__assert_fail@plt+0x21c4>
   131dc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   131e0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   131e4:	cmp	r8, r6
   131e8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   131ec:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   131f0:	strbcc	r5, [r2, r8]
   131f4:	add	r8, r8, #1
   131f8:	ldrb	r5, [ip, r1]
   131fc:	add	r1, r1, #1
   13200:	ldr	r2, [sp, #40]	; 0x28
   13204:	tst	r2, #1
   13208:	beq	13244 <__assert_fail@plt+0x2224>
   1320c:	ldr	r2, [sp, #76]	; 0x4c
   13210:	str	r0, [fp, #-48]	; 0xffffffd0
   13214:	tst	r2, #1
   13218:	beq	1323c <__assert_fail@plt+0x221c>
   1321c:	cmp	r8, r6
   13220:	bcs	13238 <__assert_fail@plt+0x2218>
   13224:	ldr	r6, [fp, #-56]	; 0xffffffc8
   13228:	mov	r2, r4
   1322c:	mov	r4, #92	; 0x5c
   13230:	strb	r4, [r6, r8]
   13234:	mov	r4, r2
   13238:	add	r8, r8, #1
   1323c:	mov	r0, #0
   13240:	b	13338 <__assert_fail@plt+0x2318>
   13244:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13248:	tst	r2, #1
   1324c:	bne	13598 <__assert_fail@plt+0x2578>
   13250:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13254:	cmp	r7, #2
   13258:	movwne	r3, #1
   1325c:	orr	r3, r3, r0
   13260:	tst	r3, #1
   13264:	bne	132c0 <__assert_fail@plt+0x22a0>
   13268:	cmp	r8, r6
   1326c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13270:	movcc	r3, #39	; 0x27
   13274:	strbcc	r3, [r2, r8]
   13278:	add	r3, r8, #1
   1327c:	cmp	r3, r6
   13280:	bcs	13298 <__assert_fail@plt+0x2278>
   13284:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13288:	mov	r7, r4
   1328c:	mov	r4, #36	; 0x24
   13290:	strb	r4, [r2, r3]
   13294:	mov	r4, r7
   13298:	add	r3, r8, #2
   1329c:	cmp	r3, r6
   132a0:	bcs	132b8 <__assert_fail@plt+0x2298>
   132a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   132a8:	mov	r7, r4
   132ac:	mov	r4, #39	; 0x27
   132b0:	strb	r4, [r2, r3]
   132b4:	mov	r4, r7
   132b8:	add	r8, r8, #3
   132bc:	mov	r0, #1
   132c0:	cmp	r8, r6
   132c4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   132c8:	movcc	r3, #92	; 0x5c
   132cc:	strbcc	r3, [r2, r8]
   132d0:	add	r3, r8, #1
   132d4:	cmp	r3, r6
   132d8:	bcs	132f8 <__assert_fail@plt+0x22d8>
   132dc:	mov	r2, r4
   132e0:	and	r7, r5, #192	; 0xc0
   132e4:	mov	r4, #48	; 0x30
   132e8:	orr	r7, r4, r7, lsr #6
   132ec:	mov	r4, r2
   132f0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   132f4:	strb	r7, [r2, r3]
   132f8:	add	r3, r8, #2
   132fc:	cmp	r3, r6
   13300:	bcs	13320 <__assert_fail@plt+0x2300>
   13304:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13308:	mov	r6, r4
   1330c:	lsr	r7, r5, #3
   13310:	mov	r4, #6
   13314:	bfi	r7, r4, #3, #29
   13318:	mov	r4, r6
   1331c:	strb	r7, [r2, r3]
   13320:	str	r0, [fp, #-48]	; 0xffffffd0
   13324:	ldr	r0, [sp, #76]	; 0x4c
   13328:	mov	r3, #6
   1332c:	add	r8, r8, #3
   13330:	bfi	r5, r3, #3, #29
   13334:	mov	r3, #1
   13338:	ldr	r2, [sp, #36]	; 0x24
   1333c:	and	r9, r3, #1
   13340:	cmp	r2, r1
   13344:	bhi	13170 <__assert_fail@plt+0x2150>
   13348:	cmp	r9, #0
   1334c:	sub	r7, r1, #1
   13350:	mov	r0, r5
   13354:	movwne	r9, #1
   13358:	cmp	r9, #0
   1335c:	bne	133a0 <__assert_fail@plt+0x2380>
   13360:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13364:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13368:	tst	r5, #1
   1336c:	beq	12f10 <__assert_fail@plt+0x1ef0>
   13370:	cmp	r8, r6
   13374:	mov	r5, #0
   13378:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1337c:	movcc	r1, #39	; 0x27
   13380:	strbcc	r1, [r2, r8]
   13384:	add	r1, r8, #1
   13388:	add	r8, r8, #2
   1338c:	cmp	r1, r6
   13390:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13394:	movcc	r2, #39	; 0x27
   13398:	strbcc	r2, [r3, r1]
   1339c:	b	12f10 <__assert_fail@plt+0x1ef0>
   133a0:	ldr	r6, [fp, #-52]	; 0xffffffcc
   133a4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   133a8:	b	12f10 <__assert_fail@plt+0x1ef0>
   133ac:	cmp	r8, r1
   133b0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   133b4:	movcc	r0, #39	; 0x27
   133b8:	strbcc	r0, [r2, r8]
   133bc:	add	r0, r8, #1
   133c0:	cmp	r0, r1
   133c4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   133c8:	movcc	r2, #36	; 0x24
   133cc:	strbcc	r2, [r3, r0]
   133d0:	add	r0, r8, #2
   133d4:	cmp	r0, r1
   133d8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   133dc:	movcc	r2, #39	; 0x27
   133e0:	strbcc	r2, [r3, r0]
   133e4:	add	r0, r8, #3
   133e8:	mov	r3, #1
   133ec:	cmp	r0, r1
   133f0:	add	r8, r0, #1
   133f4:	str	r3, [fp, #-48]	; 0xffffffd0
   133f8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   133fc:	movcc	r1, #92	; 0x5c
   13400:	strbcc	r1, [r2, r0]
   13404:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13408:	cmp	r1, #2
   1340c:	beq	13470 <__assert_fail@plt+0x2450>
   13410:	add	r1, r7, #1
   13414:	mov	sl, #0
   13418:	mov	r9, #1
   1341c:	mov	r5, #48	; 0x30
   13420:	cmp	r1, lr
   13424:	bcs	12bec <__assert_fail@plt+0x1bcc>
   13428:	ldrb	r1, [ip, r1]
   1342c:	sub	r1, r1, #48	; 0x30
   13430:	uxtb	r1, r1
   13434:	cmp	r1, #9
   13438:	bhi	12bec <__assert_fail@plt+0x1bcc>
   1343c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13440:	cmp	r8, r1
   13444:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13448:	movcc	r1, #48	; 0x30
   1344c:	strbcc	r1, [r2, r8]
   13450:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13454:	add	r1, r0, #2
   13458:	add	r8, r0, #3
   1345c:	cmp	r1, r2
   13460:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13464:	movcc	r2, #48	; 0x30
   13468:	strbcc	r2, [r3, r1]
   1346c:	b	12bec <__assert_fail@plt+0x1bcc>
   13470:	mov	r0, #48	; 0x30
   13474:	mov	r9, #1
   13478:	mov	sl, #0
   1347c:	b	12e84 <__assert_fail@plt+0x1e64>
   13480:	mov	sl, #0
   13484:	b	134c0 <__assert_fail@plt+0x24a0>
   13488:	mov	sl, #0
   1348c:	cmp	lr, r6
   13490:	bls	134c0 <__assert_fail@plt+0x24a0>
   13494:	ldr	ip, [fp, #-84]	; 0xffffffac
   13498:	ldr	r6, [sp, #40]	; 0x28
   1349c:	ldr	r0, [sp, #36]	; 0x24
   134a0:	ldrb	r0, [r0, r6]
   134a4:	cmp	r0, #0
   134a8:	beq	134c8 <__assert_fail@plt+0x24a8>
   134ac:	add	r6, r6, #1
   134b0:	add	r0, r7, r6
   134b4:	cmp	r0, lr
   134b8:	bcc	1349c <__assert_fail@plt+0x247c>
   134bc:	b	134c8 <__assert_fail@plt+0x24a8>
   134c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   134c4:	ldr	r6, [sp, #40]	; 0x28
   134c8:	mov	r1, r6
   134cc:	ldr	r4, [sp, #20]
   134d0:	ldr	r6, [sp, #76]	; 0x4c
   134d4:	b	12dc8 <__assert_fail@plt+0x1da8>
   134d8:	mov	lr, r7
   134dc:	b	134e4 <__assert_fail@plt+0x24c4>
   134e0:	mvn	lr, #0
   134e4:	ldr	r9, [fp, #-64]	; 0xffffffc0
   134e8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   134ec:	eor	r0, r9, #2
   134f0:	orr	r0, r0, r8
   134f4:	clz	r0, r0
   134f8:	lsr	r0, r0, #5
   134fc:	tst	r1, r0
   13500:	bne	135fc <__assert_fail@plt+0x25dc>
   13504:	mov	r0, r1
   13508:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1350c:	cmp	r9, #2
   13510:	movwne	r1, #1
   13514:	orr	r0, r0, r1
   13518:	tst	r0, #1
   1351c:	bne	1363c <__assert_fail@plt+0x261c>
   13520:	ldr	r0, [sp, #52]	; 0x34
   13524:	ldr	r1, [sp, #68]	; 0x44
   13528:	str	lr, [sp, #80]	; 0x50
   1352c:	eor	r0, r0, #1
   13530:	tst	r0, #1
   13534:	bne	1363c <__assert_fail@plt+0x261c>
   13538:	tst	r4, #1
   1353c:	bne	13604 <__assert_fail@plt+0x25e4>
   13540:	mov	r7, #0
   13544:	cmp	r1, #0
   13548:	beq	13634 <__assert_fail@plt+0x2614>
   1354c:	ldr	r0, [sp, #84]	; 0x54
   13550:	mov	r3, #0
   13554:	cmp	r6, #0
   13558:	mov	r2, #0
   1355c:	mov	r4, r1
   13560:	str	r3, [fp, #-72]	; 0xffffffb8
   13564:	beq	126a0 <__assert_fail@plt+0x1680>
   13568:	b	1363c <__assert_fail@plt+0x261c>
   1356c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13570:	b	13598 <__assert_fail@plt+0x2578>
   13574:	ldr	ip, [fp, #-84]	; 0xffffffac
   13578:	mov	r2, #1
   1357c:	mov	lr, r4
   13580:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13584:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13588:	b	1359c <__assert_fail@plt+0x257c>
   1358c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13590:	mov	r7, #2
   13594:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13598:	ldr	r2, [sp, #84]	; 0x54
   1359c:	mov	r0, #0
   135a0:	ldr	r1, [fp, #12]
   135a4:	tst	r2, #1
   135a8:	mov	r2, r7
   135ac:	mov	r3, lr
   135b0:	str	r0, [sp, #8]
   135b4:	ldr	r0, [sp, #64]	; 0x40
   135b8:	movwne	r2, #4
   135bc:	cmp	r7, #2
   135c0:	movne	r2, r7
   135c4:	str	r2, [sp]
   135c8:	mov	r2, ip
   135cc:	bic	r1, r1, #2
   135d0:	str	r0, [sp, #12]
   135d4:	ldr	r0, [sp, #72]	; 0x48
   135d8:	str	r1, [sp, #4]
   135dc:	mov	r1, r6
   135e0:	str	r0, [sp, #16]
   135e4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   135e8:	bl	12628 <__assert_fail@plt+0x1608>
   135ec:	mov	r8, r0
   135f0:	mov	r0, r8
   135f4:	sub	sp, fp, #28
   135f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135fc:	mov	r7, #2
   13600:	b	13598 <__assert_fail@plt+0x2578>
   13604:	mov	r0, #5
   13608:	ldr	r2, [fp, #-84]	; 0xffffffac
   1360c:	ldr	r3, [sp, #80]	; 0x50
   13610:	str	r0, [sp]
   13614:	ldr	r0, [fp, #12]
   13618:	str	r0, [sp, #4]
   1361c:	ldr	r0, [fp, #16]
   13620:	str	r0, [sp, #8]
   13624:	ldr	r0, [sp, #64]	; 0x40
   13628:	str	r0, [sp, #12]
   1362c:	ldr	r0, [sp, #72]	; 0x48
   13630:	b	135e0 <__assert_fail@plt+0x25c0>
   13634:	mov	r0, #0
   13638:	str	r0, [fp, #-72]	; 0xffffffb8
   1363c:	ldr	r1, [sp, #92]	; 0x5c
   13640:	cmp	r1, #0
   13644:	beq	13684 <__assert_fail@plt+0x2664>
   13648:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1364c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13650:	tst	r0, #1
   13654:	bne	13688 <__assert_fail@plt+0x2668>
   13658:	ldrb	r0, [r1]
   1365c:	cmp	r0, #0
   13660:	beq	13688 <__assert_fail@plt+0x2668>
   13664:	add	r1, r1, #1
   13668:	cmp	r8, r6
   1366c:	strbcc	r0, [r2, r8]
   13670:	add	r8, r8, #1
   13674:	ldrb	r0, [r1], #1
   13678:	cmp	r0, #0
   1367c:	bne	13668 <__assert_fail@plt+0x2648>
   13680:	b	13688 <__assert_fail@plt+0x2668>
   13684:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13688:	cmp	r8, r6
   1368c:	movcc	r0, #0
   13690:	strbcc	r0, [r2, r8]
   13694:	b	135f0 <__assert_fail@plt+0x25d0>
   13698:	mov	r2, #1
   1369c:	b	13580 <__assert_fail@plt+0x2560>
   136a0:	mov	r7, #5
   136a4:	b	13594 <__assert_fail@plt+0x2574>
   136a8:	bl	10ffc <abort@plt>
   136ac:	mov	r3, r2
   136b0:	mov	r2, #0
   136b4:	b	136b8 <__assert_fail@plt+0x2698>
   136b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136bc:	add	fp, sp, #28
   136c0:	sub	sp, sp, #36	; 0x24
   136c4:	movw	r8, #24992	; 0x61a0
   136c8:	cmp	r3, #0
   136cc:	mov	r4, r2
   136d0:	str	r2, [sp, #24]
   136d4:	mov	r5, r1
   136d8:	mov	r6, r0
   136dc:	str	r0, [sp, #20]
   136e0:	movt	r8, #2
   136e4:	movne	r8, r3
   136e8:	bl	10f3c <__errno_location@plt>
   136ec:	str	r0, [sp, #28]
   136f0:	cmp	r4, #0
   136f4:	add	sl, r8, #8
   136f8:	ldm	r8, {r3, r9}
   136fc:	ldr	r7, [r0]
   13700:	ldr	r1, [r8, #40]	; 0x28
   13704:	ldr	r2, [r8, #44]	; 0x2c
   13708:	mov	r0, #0
   1370c:	orreq	r9, r9, #1
   13710:	str	r7, [sp, #32]
   13714:	mov	r7, r5
   13718:	stm	sp, {r3, r9, sl}
   1371c:	str	r1, [sp, #12]
   13720:	str	r2, [sp, #16]
   13724:	mov	r1, #0
   13728:	mov	r2, r6
   1372c:	mov	r3, r5
   13730:	bl	12628 <__assert_fail@plt+0x1608>
   13734:	add	r4, r0, #1
   13738:	mov	r5, r0
   1373c:	mov	r0, r4
   13740:	bl	1441c <__assert_fail@plt+0x33fc>
   13744:	mov	r6, r0
   13748:	ldr	r0, [r8]
   1374c:	ldr	r2, [r8, #44]	; 0x2c
   13750:	ldr	r1, [r8, #40]	; 0x28
   13754:	mov	r3, r7
   13758:	stm	sp, {r0, r9, sl}
   1375c:	str	r2, [sp, #16]
   13760:	str	r1, [sp, #12]
   13764:	mov	r0, r6
   13768:	mov	r1, r4
   1376c:	ldr	r2, [sp, #20]
   13770:	bl	12628 <__assert_fail@plt+0x1608>
   13774:	ldr	r0, [sp, #24]
   13778:	ldr	r1, [sp, #32]
   1377c:	ldr	r2, [sp, #28]
   13780:	cmp	r0, #0
   13784:	str	r1, [r2]
   13788:	strne	r5, [r0]
   1378c:	mov	r0, r6
   13790:	sub	sp, fp, #28
   13794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13798:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1379c:	add	fp, sp, #24
   137a0:	movw	r5, #24820	; 0x60f4
   137a4:	movw	r8, #24816	; 0x60f0
   137a8:	movt	r5, #2
   137ac:	movt	r8, #2
   137b0:	ldr	r0, [r5]
   137b4:	ldr	r4, [r8]
   137b8:	cmp	r0, #2
   137bc:	blt	137e8 <__assert_fail@plt+0x27c8>
   137c0:	add	r7, r4, #12
   137c4:	mov	r6, #0
   137c8:	ldr	r0, [r7, r6, lsl #3]
   137cc:	bl	12328 <__assert_fail@plt+0x1308>
   137d0:	ldr	r1, [r5]
   137d4:	add	r2, r6, #2
   137d8:	add	r0, r6, #1
   137dc:	mov	r6, r0
   137e0:	cmp	r2, r1
   137e4:	blt	137c8 <__assert_fail@plt+0x27a8>
   137e8:	ldr	r0, [r4, #4]
   137ec:	movw	r7, #25040	; 0x61d0
   137f0:	movt	r7, #2
   137f4:	cmp	r0, r7
   137f8:	beq	13810 <__assert_fail@plt+0x27f0>
   137fc:	bl	12328 <__assert_fail@plt+0x1308>
   13800:	movw	r0, #24824	; 0x60f8
   13804:	mov	r6, #256	; 0x100
   13808:	movt	r0, #2
   1380c:	strd	r6, [r0]
   13810:	movw	r6, #24824	; 0x60f8
   13814:	movt	r6, #2
   13818:	cmp	r4, r6
   1381c:	beq	1382c <__assert_fail@plt+0x280c>
   13820:	mov	r0, r4
   13824:	bl	12328 <__assert_fail@plt+0x1308>
   13828:	str	r6, [r8]
   1382c:	mov	r0, #1
   13830:	str	r0, [r5]
   13834:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13838:	movw	r3, #24992	; 0x61a0
   1383c:	mvn	r2, #0
   13840:	movt	r3, #2
   13844:	b	13848 <__assert_fail@plt+0x2828>
   13848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1384c:	add	fp, sp, #28
   13850:	sub	sp, sp, #44	; 0x2c
   13854:	mov	r7, r3
   13858:	str	r2, [sp, #36]	; 0x24
   1385c:	str	r1, [sp, #32]
   13860:	mov	r5, r0
   13864:	bl	10f3c <__errno_location@plt>
   13868:	cmp	r5, #0
   1386c:	blt	139d8 <__assert_fail@plt+0x29b8>
   13870:	cmn	r5, #-2147483647	; 0x80000001
   13874:	beq	139d8 <__assert_fail@plt+0x29b8>
   13878:	movw	r8, #24820	; 0x60f4
   1387c:	movw	r4, #24816	; 0x60f0
   13880:	str	r0, [sp, #28]
   13884:	ldr	r0, [r0]
   13888:	movt	r8, #2
   1388c:	movt	r4, #2
   13890:	ldr	r1, [r8]
   13894:	ldr	r6, [r4]
   13898:	str	r0, [sp, #24]
   1389c:	cmp	r1, r5
   138a0:	ble	138ac <__assert_fail@plt+0x288c>
   138a4:	mov	sl, r6
   138a8:	b	13914 <__assert_fail@plt+0x28f4>
   138ac:	movw	r9, #24824	; 0x60f8
   138b0:	mov	r0, #8
   138b4:	add	r2, r5, #1
   138b8:	str	r1, [fp, #-32]	; 0xffffffe0
   138bc:	mvn	r3, #-2147483648	; 0x80000000
   138c0:	movt	r9, #2
   138c4:	str	r0, [sp]
   138c8:	sub	r2, r2, r1
   138cc:	sub	r1, fp, #32
   138d0:	subs	r0, r6, r9
   138d4:	movne	r0, r6
   138d8:	bl	1454c <__assert_fail@plt+0x352c>
   138dc:	cmp	r6, r9
   138e0:	mov	sl, r0
   138e4:	str	r0, [r4]
   138e8:	ldrdeq	r0, [r9]
   138ec:	stmeq	sl, {r0, r1}
   138f0:	ldr	r1, [r8]
   138f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   138f8:	add	r0, sl, r1, lsl #3
   138fc:	sub	r1, r2, r1
   13900:	lsl	r2, r1, #3
   13904:	mov	r1, #0
   13908:	bl	10f54 <memset@plt>
   1390c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13910:	str	r0, [r8]
   13914:	mov	r9, sl
   13918:	ldr	r6, [r9, r5, lsl #3]!
   1391c:	ldr	r4, [r9, #4]!
   13920:	ldm	r7, {r0, r1}
   13924:	ldr	r2, [r7, #40]	; 0x28
   13928:	ldr	r3, [r7, #44]	; 0x2c
   1392c:	orr	r8, r1, #1
   13930:	add	r1, r7, #8
   13934:	stm	sp, {r0, r8}
   13938:	add	r0, sp, #8
   1393c:	str	r1, [sp, #20]
   13940:	stm	r0, {r1, r2, r3}
   13944:	mov	r0, r4
   13948:	mov	r1, r6
   1394c:	ldr	r2, [sp, #32]
   13950:	ldr	r3, [sp, #36]	; 0x24
   13954:	bl	12628 <__assert_fail@plt+0x1608>
   13958:	cmp	r6, r0
   1395c:	bhi	139c0 <__assert_fail@plt+0x29a0>
   13960:	add	r6, r0, #1
   13964:	movw	r0, #25040	; 0x61d0
   13968:	movt	r0, #2
   1396c:	str	r6, [sl, r5, lsl #3]
   13970:	cmp	r4, r0
   13974:	beq	13980 <__assert_fail@plt+0x2960>
   13978:	mov	r0, r4
   1397c:	bl	12328 <__assert_fail@plt+0x1308>
   13980:	mov	r0, r6
   13984:	bl	1441c <__assert_fail@plt+0x33fc>
   13988:	str	r0, [r9]
   1398c:	mov	r4, r0
   13990:	add	r3, sp, #8
   13994:	ldr	r0, [r7]
   13998:	ldr	r1, [r7, #40]	; 0x28
   1399c:	ldr	r2, [r7, #44]	; 0x2c
   139a0:	stm	sp, {r0, r8}
   139a4:	ldr	r0, [sp, #20]
   139a8:	stm	r3, {r0, r1, r2}
   139ac:	mov	r0, r4
   139b0:	mov	r1, r6
   139b4:	ldr	r2, [sp, #32]
   139b8:	ldr	r3, [sp, #36]	; 0x24
   139bc:	bl	12628 <__assert_fail@plt+0x1608>
   139c0:	ldr	r0, [sp, #28]
   139c4:	ldr	r1, [sp, #24]
   139c8:	str	r1, [r0]
   139cc:	mov	r0, r4
   139d0:	sub	sp, fp, #28
   139d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139d8:	bl	10ffc <abort@plt>
   139dc:	movw	r3, #24992	; 0x61a0
   139e0:	movt	r3, #2
   139e4:	b	13848 <__assert_fail@plt+0x2828>
   139e8:	movw	r3, #24992	; 0x61a0
   139ec:	mov	r1, r0
   139f0:	mov	r0, #0
   139f4:	mvn	r2, #0
   139f8:	movt	r3, #2
   139fc:	b	13848 <__assert_fail@plt+0x2828>
   13a00:	movw	r3, #24992	; 0x61a0
   13a04:	mov	r2, r1
   13a08:	mov	r1, r0
   13a0c:	mov	r0, #0
   13a10:	movt	r3, #2
   13a14:	b	13848 <__assert_fail@plt+0x2828>
   13a18:	push	{fp, lr}
   13a1c:	mov	fp, sp
   13a20:	sub	sp, sp, #48	; 0x30
   13a24:	vmov.i32	q8, #0	; 0x00000000
   13a28:	mov	ip, #32
   13a2c:	mov	r3, sp
   13a30:	mov	lr, r2
   13a34:	cmp	r1, #10
   13a38:	add	r2, r3, #16
   13a3c:	vst1.64	{d16-d17}, [r3], ip
   13a40:	vst1.64	{d16-d17}, [r3]
   13a44:	vst1.64	{d16-d17}, [r2]
   13a48:	beq	13a68 <__assert_fail@plt+0x2a48>
   13a4c:	str	r1, [sp]
   13a50:	mov	r3, sp
   13a54:	mov	r1, lr
   13a58:	mvn	r2, #0
   13a5c:	bl	13848 <__assert_fail@plt+0x2828>
   13a60:	mov	sp, fp
   13a64:	pop	{fp, pc}
   13a68:	bl	10ffc <abort@plt>
   13a6c:	push	{r4, sl, fp, lr}
   13a70:	add	fp, sp, #8
   13a74:	sub	sp, sp, #48	; 0x30
   13a78:	mov	ip, r3
   13a7c:	mov	r3, sp
   13a80:	vmov.i32	q8, #0	; 0x00000000
   13a84:	mov	lr, #32
   13a88:	cmp	r1, #10
   13a8c:	add	r4, r3, #16
   13a90:	vst1.64	{d16-d17}, [r3], lr
   13a94:	vst1.64	{d16-d17}, [r3]
   13a98:	vst1.64	{d16-d17}, [r4]
   13a9c:	beq	13abc <__assert_fail@plt+0x2a9c>
   13aa0:	str	r1, [sp]
   13aa4:	mov	r1, r2
   13aa8:	mov	r3, sp
   13aac:	mov	r2, ip
   13ab0:	bl	13848 <__assert_fail@plt+0x2828>
   13ab4:	sub	sp, fp, #8
   13ab8:	pop	{r4, sl, fp, pc}
   13abc:	bl	10ffc <abort@plt>
   13ac0:	mov	r2, r1
   13ac4:	mov	r1, r0
   13ac8:	mov	r0, #0
   13acc:	b	13a18 <__assert_fail@plt+0x29f8>
   13ad0:	mov	r3, r2
   13ad4:	mov	r2, r1
   13ad8:	mov	r1, r0
   13adc:	mov	r0, #0
   13ae0:	b	13a6c <__assert_fail@plt+0x2a4c>
   13ae4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13ae8:	add	fp, sp, #24
   13aec:	sub	sp, sp, #48	; 0x30
   13af0:	movw	r8, #24992	; 0x61a0
   13af4:	mov	lr, r0
   13af8:	mov	r3, sp
   13afc:	mov	ip, r1
   13b00:	movt	r8, #2
   13b04:	mov	r1, r3
   13b08:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   13b0c:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   13b10:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   13b14:	stm	r1, {r0, r4, r5, r6, r7, r9}
   13b18:	ubfx	r0, r2, #5, #3
   13b1c:	and	r2, r2, #31
   13b20:	mov	r4, #1
   13b24:	add	r0, r3, r0, lsl #2
   13b28:	ldr	r1, [r0, #8]
   13b2c:	bic	r4, r4, r1, lsr r2
   13b30:	eor	r1, r1, r4, lsl r2
   13b34:	mov	r2, ip
   13b38:	str	r1, [r0, #8]
   13b3c:	mov	r0, #0
   13b40:	mov	r1, lr
   13b44:	bl	13848 <__assert_fail@plt+0x2828>
   13b48:	sub	sp, fp, #24
   13b4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13b50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b54:	add	fp, sp, #24
   13b58:	sub	sp, sp, #48	; 0x30
   13b5c:	movw	lr, #24992	; 0x61a0
   13b60:	mov	ip, r0
   13b64:	mov	r3, sp
   13b68:	movt	lr, #2
   13b6c:	mov	r2, r3
   13b70:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   13b74:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   13b78:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13b7c:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13b80:	ubfx	r0, r1, #5, #3
   13b84:	and	r1, r1, #31
   13b88:	mov	r7, #1
   13b8c:	add	r0, r3, r0, lsl #2
   13b90:	ldr	r2, [r0, #8]
   13b94:	bic	r7, r7, r2, lsr r1
   13b98:	eor	r1, r2, r7, lsl r1
   13b9c:	mvn	r2, #0
   13ba0:	str	r1, [r0, #8]
   13ba4:	mov	r0, #0
   13ba8:	mov	r1, ip
   13bac:	bl	13848 <__assert_fail@plt+0x2828>
   13bb0:	sub	sp, fp, #24
   13bb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13bb8:	push	{r4, r5, r6, r7, fp, lr}
   13bbc:	add	fp, sp, #16
   13bc0:	sub	sp, sp, #48	; 0x30
   13bc4:	movw	lr, #24992	; 0x61a0
   13bc8:	mov	ip, r0
   13bcc:	mov	r3, sp
   13bd0:	movt	lr, #2
   13bd4:	mov	r2, r3
   13bd8:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13bdc:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13be0:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13be4:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13be8:	mov	r1, ip
   13bec:	mvn	r2, #0
   13bf0:	ldr	r0, [sp, #12]
   13bf4:	orr	r0, r0, #67108864	; 0x4000000
   13bf8:	str	r0, [sp, #12]
   13bfc:	mov	r0, #0
   13c00:	bl	13848 <__assert_fail@plt+0x2828>
   13c04:	sub	sp, fp, #16
   13c08:	pop	{r4, r5, r6, r7, fp, pc}
   13c0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13c10:	add	fp, sp, #24
   13c14:	sub	sp, sp, #48	; 0x30
   13c18:	movw	r8, #24992	; 0x61a0
   13c1c:	mov	ip, r1
   13c20:	mov	lr, r0
   13c24:	mov	r3, sp
   13c28:	movt	r8, #2
   13c2c:	mov	r2, r3
   13c30:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13c34:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13c38:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   13c3c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13c40:	mov	r1, lr
   13c44:	mov	r2, ip
   13c48:	ldr	r0, [sp, #12]
   13c4c:	orr	r0, r0, #67108864	; 0x4000000
   13c50:	str	r0, [sp, #12]
   13c54:	mov	r0, #0
   13c58:	bl	13848 <__assert_fail@plt+0x2828>
   13c5c:	sub	sp, fp, #24
   13c60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13c68:	add	fp, sp, #24
   13c6c:	sub	sp, sp, #96	; 0x60
   13c70:	mov	lr, sp
   13c74:	vmov.i32	q8, #0	; 0x00000000
   13c78:	mov	ip, r2
   13c7c:	cmp	r1, #10
   13c80:	add	r3, lr, #16
   13c84:	mov	r2, lr
   13c88:	vst1.64	{d16-d17}, [r3]
   13c8c:	mov	r3, #28
   13c90:	vst1.64	{d16-d17}, [r2], r3
   13c94:	vst1.32	{d16-d17}, [r2]
   13c98:	beq	13cd8 <__assert_fail@plt+0x2cb8>
   13c9c:	str	r1, [sp, #48]	; 0x30
   13ca0:	add	r3, sp, #48	; 0x30
   13ca4:	ldm	lr!, {r2, r4, r5, r6, r7}
   13ca8:	add	r1, r3, #4
   13cac:	stmia	r1!, {r2, r4, r5, r6, r7}
   13cb0:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   13cb4:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13cb8:	mvn	r2, #0
   13cbc:	ldr	r1, [sp, #60]	; 0x3c
   13cc0:	orr	r1, r1, #67108864	; 0x4000000
   13cc4:	str	r1, [sp, #60]	; 0x3c
   13cc8:	mov	r1, ip
   13ccc:	bl	13848 <__assert_fail@plt+0x2828>
   13cd0:	sub	sp, fp, #24
   13cd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13cd8:	bl	10ffc <abort@plt>
   13cdc:	push	{fp, lr}
   13ce0:	mov	fp, sp
   13ce4:	sub	sp, sp, #8
   13ce8:	mvn	ip, #0
   13cec:	str	ip, [sp]
   13cf0:	bl	13cfc <__assert_fail@plt+0x2cdc>
   13cf4:	mov	sp, fp
   13cf8:	pop	{fp, pc}
   13cfc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13d00:	add	fp, sp, #24
   13d04:	sub	sp, sp, #48	; 0x30
   13d08:	movw	ip, #24992	; 0x61a0
   13d0c:	mov	lr, r3
   13d10:	mov	r3, sp
   13d14:	cmp	r1, #0
   13d18:	movt	ip, #2
   13d1c:	cmpne	r2, #0
   13d20:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   13d24:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   13d28:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   13d2c:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13d30:	mov	r3, #10
   13d34:	str	r3, [sp]
   13d38:	bne	13d40 <__assert_fail@plt+0x2d20>
   13d3c:	bl	10ffc <abort@plt>
   13d40:	ldr	ip, [fp, #8]
   13d44:	str	r2, [sp, #44]	; 0x2c
   13d48:	str	r1, [sp, #40]	; 0x28
   13d4c:	mov	r3, sp
   13d50:	mov	r1, lr
   13d54:	mov	r2, ip
   13d58:	bl	13848 <__assert_fail@plt+0x2828>
   13d5c:	sub	sp, fp, #24
   13d60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13d64:	push	{fp, lr}
   13d68:	mov	fp, sp
   13d6c:	sub	sp, sp, #8
   13d70:	mov	r3, r2
   13d74:	mov	r2, r1
   13d78:	mov	r1, r0
   13d7c:	mvn	r0, #0
   13d80:	str	r0, [sp]
   13d84:	mov	r0, #0
   13d88:	bl	13cfc <__assert_fail@plt+0x2cdc>
   13d8c:	mov	sp, fp
   13d90:	pop	{fp, pc}
   13d94:	push	{fp, lr}
   13d98:	mov	fp, sp
   13d9c:	sub	sp, sp, #8
   13da0:	mov	ip, r2
   13da4:	mov	r2, r1
   13da8:	mov	r1, r0
   13dac:	str	r3, [sp]
   13db0:	mov	r0, #0
   13db4:	mov	r3, ip
   13db8:	bl	13cfc <__assert_fail@plt+0x2cdc>
   13dbc:	mov	sp, fp
   13dc0:	pop	{fp, pc}
   13dc4:	movw	r3, #24832	; 0x6100
   13dc8:	movt	r3, #2
   13dcc:	b	13848 <__assert_fail@plt+0x2828>
   13dd0:	movw	r3, #24832	; 0x6100
   13dd4:	mov	r2, r1
   13dd8:	mov	r1, r0
   13ddc:	mov	r0, #0
   13de0:	movt	r3, #2
   13de4:	b	13848 <__assert_fail@plt+0x2828>
   13de8:	movw	r3, #24832	; 0x6100
   13dec:	mvn	r2, #0
   13df0:	movt	r3, #2
   13df4:	b	13848 <__assert_fail@plt+0x2828>
   13df8:	movw	r3, #24832	; 0x6100
   13dfc:	mov	r1, r0
   13e00:	mov	r0, #0
   13e04:	mvn	r2, #0
   13e08:	movt	r3, #2
   13e0c:	b	13848 <__assert_fail@plt+0x2828>
   13e10:	push	{r4, r5, fp, lr}
   13e14:	add	fp, sp, #8
   13e18:	mov	r5, r0
   13e1c:	mov	r4, r1
   13e20:	mov	r0, #0
   13e24:	mov	r2, #5
   13e28:	mov	r1, r5
   13e2c:	bl	10e64 <dcgettext@plt>
   13e30:	cmp	r0, r5
   13e34:	popne	{r4, r5, fp, pc}
   13e38:	bl	149d4 <__assert_fail@plt+0x39b4>
   13e3c:	ldrb	r1, [r0]
   13e40:	and	r1, r1, #223	; 0xdf
   13e44:	cmp	r1, #71	; 0x47
   13e48:	beq	13eb0 <__assert_fail@plt+0x2e90>
   13e4c:	cmp	r1, #85	; 0x55
   13e50:	bne	13ed4 <__assert_fail@plt+0x2eb4>
   13e54:	ldrb	r1, [r0, #1]
   13e58:	and	r1, r1, #223	; 0xdf
   13e5c:	cmp	r1, #84	; 0x54
   13e60:	bne	13ed4 <__assert_fail@plt+0x2eb4>
   13e64:	ldrb	r1, [r0, #2]
   13e68:	and	r1, r1, #223	; 0xdf
   13e6c:	cmp	r1, #70	; 0x46
   13e70:	ldrbeq	r1, [r0, #3]
   13e74:	cmpeq	r1, #45	; 0x2d
   13e78:	bne	13ed4 <__assert_fail@plt+0x2eb4>
   13e7c:	ldrb	r1, [r0, #4]
   13e80:	cmp	r1, #56	; 0x38
   13e84:	ldrbeq	r0, [r0, #5]
   13e88:	cmpeq	r0, #0
   13e8c:	bne	13ed4 <__assert_fail@plt+0x2eb4>
   13e90:	ldrb	r1, [r5]
   13e94:	movw	r2, #21984	; 0x55e0
   13e98:	movw	r0, #21988	; 0x55e4
   13e9c:	movt	r2, #1
   13ea0:	movt	r0, #1
   13ea4:	cmp	r1, #96	; 0x60
   13ea8:	moveq	r0, r2
   13eac:	pop	{r4, r5, fp, pc}
   13eb0:	ldrb	r1, [r0, #1]
   13eb4:	and	r1, r1, #223	; 0xdf
   13eb8:	cmp	r1, #66	; 0x42
   13ebc:	bne	13ed4 <__assert_fail@plt+0x2eb4>
   13ec0:	ldrb	r1, [r0, #2]
   13ec4:	cmp	r1, #49	; 0x31
   13ec8:	ldrbeq	r1, [r0, #3]
   13ecc:	cmpeq	r1, #56	; 0x38
   13ed0:	beq	13ef0 <__assert_fail@plt+0x2ed0>
   13ed4:	movw	r1, #21980	; 0x55dc
   13ed8:	movw	r0, #21812	; 0x5534
   13edc:	cmp	r4, #9
   13ee0:	movt	r1, #1
   13ee4:	movt	r0, #1
   13ee8:	moveq	r0, r1
   13eec:	pop	{r4, r5, fp, pc}
   13ef0:	ldrb	r1, [r0, #4]
   13ef4:	cmp	r1, #48	; 0x30
   13ef8:	ldrbeq	r1, [r0, #5]
   13efc:	cmpeq	r1, #51	; 0x33
   13f00:	bne	13ed4 <__assert_fail@plt+0x2eb4>
   13f04:	ldrb	r1, [r0, #6]
   13f08:	cmp	r1, #48	; 0x30
   13f0c:	ldrbeq	r0, [r0, #7]
   13f10:	cmpeq	r0, #0
   13f14:	bne	13ed4 <__assert_fail@plt+0x2eb4>
   13f18:	ldrb	r1, [r5]
   13f1c:	movw	r2, #21992	; 0x55e8
   13f20:	movw	r0, #21996	; 0x55ec
   13f24:	movt	r2, #1
   13f28:	movt	r0, #1
   13f2c:	b	13ea4 <__assert_fail@plt+0x2e84>
   13f30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f34:	add	fp, sp, #24
   13f38:	sub	sp, sp, #32
   13f3c:	ldr	r6, [fp, #12]
   13f40:	ldr	r7, [fp, #8]
   13f44:	mov	r4, r2
   13f48:	mov	r8, r0
   13f4c:	cmp	r1, #0
   13f50:	beq	13f78 <__assert_fail@plt+0x2f58>
   13f54:	movw	r2, #22084	; 0x5644
   13f58:	mov	r5, r1
   13f5c:	str	r3, [sp, #4]
   13f60:	str	r4, [sp]
   13f64:	mov	r0, r8
   13f68:	mov	r1, #1
   13f6c:	movt	r2, #1
   13f70:	mov	r3, r5
   13f74:	b	13f90 <__assert_fail@plt+0x2f70>
   13f78:	movw	r2, #22096	; 0x5650
   13f7c:	str	r3, [sp]
   13f80:	mov	r0, r8
   13f84:	mov	r1, #1
   13f88:	mov	r3, r4
   13f8c:	movt	r2, #1
   13f90:	bl	10f78 <__fprintf_chk@plt>
   13f94:	movw	r1, #22103	; 0x5657
   13f98:	mov	r0, #0
   13f9c:	mov	r2, #5
   13fa0:	movt	r1, #1
   13fa4:	bl	10e64 <dcgettext@plt>
   13fa8:	movw	r2, #22821	; 0x5925
   13fac:	mov	r3, r0
   13fb0:	movw	r0, #2022	; 0x7e6
   13fb4:	mov	r1, #1
   13fb8:	str	r0, [sp]
   13fbc:	movt	r2, #1
   13fc0:	mov	r0, r8
   13fc4:	bl	10f78 <__fprintf_chk@plt>
   13fc8:	movw	r4, #20718	; 0x50ee
   13fcc:	mov	r1, r8
   13fd0:	movt	r4, #1
   13fd4:	mov	r0, r4
   13fd8:	bl	10de0 <fputs_unlocked@plt>
   13fdc:	movw	r1, #22107	; 0x565b
   13fe0:	mov	r0, #0
   13fe4:	mov	r2, #5
   13fe8:	movt	r1, #1
   13fec:	bl	10e64 <dcgettext@plt>
   13ff0:	movw	r3, #22278	; 0x5706
   13ff4:	mov	r2, r0
   13ff8:	mov	r0, r8
   13ffc:	mov	r1, #1
   14000:	movt	r3, #1
   14004:	bl	10f78 <__fprintf_chk@plt>
   14008:	mov	r0, r4
   1400c:	mov	r1, r8
   14010:	bl	10de0 <fputs_unlocked@plt>
   14014:	cmp	r6, #9
   14018:	bhi	1407c <__assert_fail@plt+0x305c>
   1401c:	add	r0, pc, #0
   14020:	ldr	pc, [r0, r6, lsl #2]
   14024:	andeq	r4, r1, r4, asr r2
   14028:	andeq	r4, r1, ip, asr #32
   1402c:	andeq	r4, r1, r8, lsl #1
   14030:	strheq	r4, [r1], -r0
   14034:	ldrdeq	r4, [r1], -r8
   14038:	andeq	r4, r1, r0, lsl #2
   1403c:	andeq	r4, r1, r8, lsr #2
   14040:	andeq	r4, r1, r0, ror #2
   14044:	andeq	r4, r1, r0, lsl #4
   14048:	andeq	r4, r1, r8, lsr #3
   1404c:	movw	r1, #22312	; 0x5728
   14050:	mov	r0, #0
   14054:	mov	r2, #5
   14058:	movt	r1, #1
   1405c:	bl	10e64 <dcgettext@plt>
   14060:	ldr	r3, [r7]
   14064:	mov	r2, r0
   14068:	mov	r0, r8
   1406c:	mov	r1, #1
   14070:	sub	sp, fp, #24
   14074:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14078:	b	10f78 <__fprintf_chk@plt>
   1407c:	movw	r1, #22631	; 0x5867
   14080:	movt	r1, #1
   14084:	b	141b0 <__assert_fail@plt+0x3190>
   14088:	movw	r1, #22328	; 0x5738
   1408c:	mov	r0, #0
   14090:	mov	r2, #5
   14094:	movt	r1, #1
   14098:	bl	10e64 <dcgettext@plt>
   1409c:	mov	r2, r0
   140a0:	ldr	r3, [r7]
   140a4:	ldr	r0, [r7, #4]
   140a8:	str	r0, [sp]
   140ac:	b	1419c <__assert_fail@plt+0x317c>
   140b0:	movw	r1, #22351	; 0x574f
   140b4:	mov	r0, #0
   140b8:	mov	r2, #5
   140bc:	movt	r1, #1
   140c0:	bl	10e64 <dcgettext@plt>
   140c4:	ldr	r3, [r7]
   140c8:	mov	r2, r0
   140cc:	ldmib	r7, {r0, r1}
   140d0:	stm	sp, {r0, r1}
   140d4:	b	1419c <__assert_fail@plt+0x317c>
   140d8:	movw	r1, #22379	; 0x576b
   140dc:	mov	r0, #0
   140e0:	mov	r2, #5
   140e4:	movt	r1, #1
   140e8:	bl	10e64 <dcgettext@plt>
   140ec:	ldr	r3, [r7]
   140f0:	mov	r2, r0
   140f4:	ldmib	r7, {r0, r1, r7}
   140f8:	stm	sp, {r0, r1, r7}
   140fc:	b	1419c <__assert_fail@plt+0x317c>
   14100:	movw	r1, #22411	; 0x578b
   14104:	mov	r0, #0
   14108:	mov	r2, #5
   1410c:	movt	r1, #1
   14110:	bl	10e64 <dcgettext@plt>
   14114:	ldr	r3, [r7]
   14118:	mov	r2, r0
   1411c:	ldmib	r7, {r0, r1, r6, r7}
   14120:	stm	sp, {r0, r1, r6, r7}
   14124:	b	1419c <__assert_fail@plt+0x317c>
   14128:	movw	r1, #22447	; 0x57af
   1412c:	mov	r0, #0
   14130:	mov	r2, #5
   14134:	movt	r1, #1
   14138:	bl	10e64 <dcgettext@plt>
   1413c:	ldr	r3, [r7]
   14140:	mov	r2, r0
   14144:	ldmib	r7, {r0, r1, r6}
   14148:	ldr	r5, [r7, #16]
   1414c:	ldr	r7, [r7, #20]
   14150:	stm	sp, {r0, r1, r6}
   14154:	str	r5, [sp, #12]
   14158:	str	r7, [sp, #16]
   1415c:	b	1419c <__assert_fail@plt+0x317c>
   14160:	movw	r1, #22487	; 0x57d7
   14164:	mov	r0, #0
   14168:	mov	r2, #5
   1416c:	movt	r1, #1
   14170:	bl	10e64 <dcgettext@plt>
   14174:	ldr	r3, [r7]
   14178:	mov	r2, r0
   1417c:	ldmib	r7, {r0, r1, r6}
   14180:	ldr	r5, [r7, #16]
   14184:	ldr	r4, [r7, #20]
   14188:	ldr	r7, [r7, #24]
   1418c:	stm	sp, {r0, r1, r6}
   14190:	str	r5, [sp, #12]
   14194:	str	r4, [sp, #16]
   14198:	str	r7, [sp, #20]
   1419c:	mov	r0, r8
   141a0:	mov	r1, #1
   141a4:	b	14250 <__assert_fail@plt+0x3230>
   141a8:	movw	r1, #22579	; 0x5833
   141ac:	movt	r1, #1
   141b0:	mov	r0, #0
   141b4:	mov	r2, #5
   141b8:	bl	10e64 <dcgettext@plt>
   141bc:	mov	ip, r0
   141c0:	ldr	r3, [r7]
   141c4:	ldr	r0, [r7, #4]
   141c8:	ldr	r1, [r7, #8]
   141cc:	ldr	r6, [r7, #12]
   141d0:	ldr	r5, [r7, #16]
   141d4:	ldr	r4, [r7, #20]
   141d8:	ldr	r2, [r7, #24]
   141dc:	ldr	lr, [r7, #28]
   141e0:	ldr	r7, [r7, #32]
   141e4:	stm	sp, {r0, r1, r6}
   141e8:	str	r5, [sp, #12]
   141ec:	str	r4, [sp, #16]
   141f0:	str	r2, [sp, #20]
   141f4:	str	lr, [sp, #24]
   141f8:	str	r7, [sp, #28]
   141fc:	b	14244 <__assert_fail@plt+0x3224>
   14200:	movw	r1, #22531	; 0x5803
   14204:	mov	r0, #0
   14208:	mov	r2, #5
   1420c:	movt	r1, #1
   14210:	bl	10e64 <dcgettext@plt>
   14214:	mov	ip, r0
   14218:	ldr	r3, [r7]
   1421c:	ldmib	r7, {r0, r1, r6}
   14220:	ldr	r5, [r7, #16]
   14224:	ldr	r4, [r7, #20]
   14228:	ldr	r2, [r7, #24]
   1422c:	ldr	r7, [r7, #28]
   14230:	stm	sp, {r0, r1, r6}
   14234:	str	r5, [sp, #12]
   14238:	str	r4, [sp, #16]
   1423c:	str	r2, [sp, #20]
   14240:	str	r7, [sp, #24]
   14244:	mov	r0, r8
   14248:	mov	r1, #1
   1424c:	mov	r2, ip
   14250:	bl	10f78 <__fprintf_chk@plt>
   14254:	sub	sp, fp, #24
   14258:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1425c:	push	{r4, sl, fp, lr}
   14260:	add	fp, sp, #8
   14264:	sub	sp, sp, #8
   14268:	ldr	ip, [fp, #8]
   1426c:	mov	lr, #0
   14270:	ldr	r4, [ip, lr, lsl #2]
   14274:	add	lr, lr, #1
   14278:	cmp	r4, #0
   1427c:	bne	14270 <__assert_fail@plt+0x3250>
   14280:	sub	r4, lr, #1
   14284:	str	ip, [sp]
   14288:	str	r4, [sp, #4]
   1428c:	bl	13f30 <__assert_fail@plt+0x2f10>
   14290:	sub	sp, fp, #8
   14294:	pop	{r4, sl, fp, pc}
   14298:	push	{r4, r5, fp, lr}
   1429c:	add	fp, sp, #8
   142a0:	sub	sp, sp, #48	; 0x30
   142a4:	ldr	r4, [fp, #8]
   142a8:	mov	ip, #0
   142ac:	add	lr, sp, #8
   142b0:	ldr	r5, [r4]
   142b4:	cmp	r5, #0
   142b8:	str	r5, [lr, ip, lsl #2]
   142bc:	beq	142d0 <__assert_fail@plt+0x32b0>
   142c0:	add	ip, ip, #1
   142c4:	add	r4, r4, #4
   142c8:	cmp	ip, #10
   142cc:	bcc	142b0 <__assert_fail@plt+0x3290>
   142d0:	str	lr, [sp]
   142d4:	str	ip, [sp, #4]
   142d8:	bl	13f30 <__assert_fail@plt+0x2f10>
   142dc:	sub	sp, fp, #8
   142e0:	pop	{r4, r5, fp, pc}
   142e4:	push	{fp, lr}
   142e8:	mov	fp, sp
   142ec:	sub	sp, sp, #8
   142f0:	add	ip, fp, #8
   142f4:	str	ip, [sp, #4]
   142f8:	str	ip, [sp]
   142fc:	bl	14298 <__assert_fail@plt+0x3278>
   14300:	mov	sp, fp
   14304:	pop	{fp, pc}
   14308:	push	{fp, lr}
   1430c:	mov	fp, sp
   14310:	movw	r0, #24908	; 0x614c
   14314:	movt	r0, #2
   14318:	ldr	r1, [r0]
   1431c:	movw	r0, #20718	; 0x50ee
   14320:	movt	r0, #1
   14324:	bl	10de0 <fputs_unlocked@plt>
   14328:	movw	r1, #22691	; 0x58a3
   1432c:	mov	r0, #0
   14330:	mov	r2, #5
   14334:	movt	r1, #1
   14338:	bl	10e64 <dcgettext@plt>
   1433c:	movw	r2, #22711	; 0x58b7
   14340:	mov	r1, r0
   14344:	mov	r0, #1
   14348:	movt	r2, #1
   1434c:	bl	10f60 <__printf_chk@plt>
   14350:	movw	r1, #22733	; 0x58cd
   14354:	mov	r0, #0
   14358:	mov	r2, #5
   1435c:	movt	r1, #1
   14360:	bl	10e64 <dcgettext@plt>
   14364:	movw	r2, #20248	; 0x4f18
   14368:	movw	r3, #20527	; 0x502f
   1436c:	mov	r1, r0
   14370:	mov	r0, #1
   14374:	movt	r2, #1
   14378:	movt	r3, #1
   1437c:	bl	10f60 <__printf_chk@plt>
   14380:	movw	r1, #22753	; 0x58e1
   14384:	mov	r0, #0
   14388:	mov	r2, #5
   1438c:	movt	r1, #1
   14390:	bl	10e64 <dcgettext@plt>
   14394:	movw	r2, #22792	; 0x5908
   14398:	mov	r1, r0
   1439c:	mov	r0, #1
   143a0:	movt	r2, #1
   143a4:	pop	{fp, lr}
   143a8:	b	10f60 <__printf_chk@plt>
   143ac:	b	143b0 <__assert_fail@plt+0x3390>
   143b0:	push	{r4, r5, r6, sl, fp, lr}
   143b4:	add	fp, sp, #16
   143b8:	mov	r4, r2
   143bc:	mov	r5, r1
   143c0:	mov	r6, r0
   143c4:	bl	14a6c <__assert_fail@plt+0x3a4c>
   143c8:	cmp	r0, #0
   143cc:	popne	{r4, r5, r6, sl, fp, pc}
   143d0:	cmp	r6, #0
   143d4:	beq	143e8 <__assert_fail@plt+0x33c8>
   143d8:	cmp	r5, #0
   143dc:	cmpne	r4, #0
   143e0:	bne	143e8 <__assert_fail@plt+0x33c8>
   143e4:	pop	{r4, r5, r6, sl, fp, pc}
   143e8:	bl	1483c <__assert_fail@plt+0x381c>
   143ec:	push	{fp, lr}
   143f0:	mov	fp, sp
   143f4:	bl	148d4 <__assert_fail@plt+0x38b4>
   143f8:	cmp	r0, #0
   143fc:	popne	{fp, pc}
   14400:	bl	1483c <__assert_fail@plt+0x381c>
   14404:	push	{fp, lr}
   14408:	mov	fp, sp
   1440c:	bl	148d4 <__assert_fail@plt+0x38b4>
   14410:	cmp	r0, #0
   14414:	popne	{fp, pc}
   14418:	bl	1483c <__assert_fail@plt+0x381c>
   1441c:	push	{fp, lr}
   14420:	mov	fp, sp
   14424:	bl	148d4 <__assert_fail@plt+0x38b4>
   14428:	cmp	r0, #0
   1442c:	popne	{fp, pc}
   14430:	bl	1483c <__assert_fail@plt+0x381c>
   14434:	push	{r4, r5, fp, lr}
   14438:	add	fp, sp, #8
   1443c:	mov	r4, r1
   14440:	mov	r5, r0
   14444:	bl	14904 <__assert_fail@plt+0x38e4>
   14448:	cmp	r0, #0
   1444c:	popne	{r4, r5, fp, pc}
   14450:	cmp	r5, #0
   14454:	beq	14464 <__assert_fail@plt+0x3444>
   14458:	cmp	r4, #0
   1445c:	bne	14464 <__assert_fail@plt+0x3444>
   14460:	pop	{r4, r5, fp, pc}
   14464:	bl	1483c <__assert_fail@plt+0x381c>
   14468:	push	{fp, lr}
   1446c:	mov	fp, sp
   14470:	cmp	r1, #0
   14474:	orreq	r1, r1, #1
   14478:	bl	14904 <__assert_fail@plt+0x38e4>
   1447c:	cmp	r0, #0
   14480:	popne	{fp, pc}
   14484:	bl	1483c <__assert_fail@plt+0x381c>
   14488:	push	{fp, lr}
   1448c:	mov	fp, sp
   14490:	clz	r3, r2
   14494:	lsr	ip, r3, #5
   14498:	clz	r3, r1
   1449c:	lsr	r3, r3, #5
   144a0:	orrs	r3, r3, ip
   144a4:	movwne	r1, #1
   144a8:	movwne	r2, #1
   144ac:	bl	14a6c <__assert_fail@plt+0x3a4c>
   144b0:	cmp	r0, #0
   144b4:	popne	{fp, pc}
   144b8:	bl	1483c <__assert_fail@plt+0x381c>
   144bc:	push	{fp, lr}
   144c0:	mov	fp, sp
   144c4:	mov	r2, r1
   144c8:	mov	r1, r0
   144cc:	mov	r0, #0
   144d0:	bl	14a6c <__assert_fail@plt+0x3a4c>
   144d4:	cmp	r0, #0
   144d8:	popne	{fp, pc}
   144dc:	bl	1483c <__assert_fail@plt+0x381c>
   144e0:	mov	r2, r1
   144e4:	mov	r1, r0
   144e8:	mov	r0, #0
   144ec:	b	14488 <__assert_fail@plt+0x3468>
   144f0:	mov	r2, #1
   144f4:	b	144f8 <__assert_fail@plt+0x34d8>
   144f8:	push	{r4, r5, fp, lr}
   144fc:	add	fp, sp, #8
   14500:	ldr	r5, [r1]
   14504:	mov	r4, r1
   14508:	cmp	r0, #0
   1450c:	beq	14524 <__assert_fail@plt+0x3504>
   14510:	mov	r1, #1
   14514:	add	r1, r1, r5, lsr #1
   14518:	adds	r5, r5, r1
   1451c:	bcc	1453c <__assert_fail@plt+0x351c>
   14520:	bl	1483c <__assert_fail@plt+0x381c>
   14524:	cmp	r5, #0
   14528:	bne	1453c <__assert_fail@plt+0x351c>
   1452c:	mov	r1, #64	; 0x40
   14530:	cmp	r2, #64	; 0x40
   14534:	udiv	r5, r1, r2
   14538:	addhi	r5, r5, #1
   1453c:	mov	r1, r5
   14540:	bl	143b0 <__assert_fail@plt+0x3390>
   14544:	str	r5, [r4]
   14548:	pop	{r4, r5, fp, pc}
   1454c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14550:	add	fp, sp, #24
   14554:	ldr	r6, [r1]
   14558:	mov	r8, r1
   1455c:	ldr	r4, [fp, #8]
   14560:	add	r1, r6, r6, asr #1
   14564:	cmp	r1, r6
   14568:	mvnvs	r1, #-2147483648	; 0x80000000
   1456c:	cmp	r1, r3
   14570:	mov	r5, r1
   14574:	movgt	r5, r3
   14578:	cmn	r3, #1
   1457c:	movle	r5, r1
   14580:	cmn	r4, #1
   14584:	ble	145a4 <__assert_fail@plt+0x3584>
   14588:	cmp	r4, #0
   1458c:	beq	145f8 <__assert_fail@plt+0x35d8>
   14590:	cmn	r5, #1
   14594:	ble	145cc <__assert_fail@plt+0x35ac>
   14598:	mvn	r7, #-2147483648	; 0x80000000
   1459c:	udiv	r1, r7, r4
   145a0:	b	145c0 <__assert_fail@plt+0x35a0>
   145a4:	cmn	r5, #1
   145a8:	ble	145e8 <__assert_fail@plt+0x35c8>
   145ac:	cmn	r4, #1
   145b0:	beq	145f8 <__assert_fail@plt+0x35d8>
   145b4:	mov	r1, #-2147483648	; 0x80000000
   145b8:	mvn	r7, #-2147483648	; 0x80000000
   145bc:	sdiv	r1, r1, r4
   145c0:	cmp	r1, r5
   145c4:	bge	145f8 <__assert_fail@plt+0x35d8>
   145c8:	b	14608 <__assert_fail@plt+0x35e8>
   145cc:	beq	145f8 <__assert_fail@plt+0x35d8>
   145d0:	mov	r1, #-2147483648	; 0x80000000
   145d4:	mvn	r7, #-2147483648	; 0x80000000
   145d8:	sdiv	r1, r1, r5
   145dc:	cmp	r1, r4
   145e0:	bge	145f8 <__assert_fail@plt+0x35d8>
   145e4:	b	14608 <__assert_fail@plt+0x35e8>
   145e8:	mvn	r7, #-2147483648	; 0x80000000
   145ec:	sdiv	r1, r7, r4
   145f0:	cmp	r5, r1
   145f4:	blt	14608 <__assert_fail@plt+0x35e8>
   145f8:	mul	r1, r5, r4
   145fc:	mov	r7, #64	; 0x40
   14600:	cmp	r1, #63	; 0x3f
   14604:	bgt	14610 <__assert_fail@plt+0x35f0>
   14608:	sdiv	r5, r7, r4
   1460c:	mul	r1, r5, r4
   14610:	cmp	r0, #0
   14614:	moveq	r7, #0
   14618:	streq	r7, [r8]
   1461c:	sub	r7, r5, r6
   14620:	cmp	r7, r2
   14624:	bge	146c8 <__assert_fail@plt+0x36a8>
   14628:	add	r5, r6, r2
   1462c:	mov	r2, #0
   14630:	mov	r1, #0
   14634:	cmp	r5, r3
   14638:	movwgt	r2, #1
   1463c:	cmn	r3, #1
   14640:	movwgt	r1, #1
   14644:	cmp	r5, r6
   14648:	bvs	146b0 <__assert_fail@plt+0x3690>
   1464c:	ands	r1, r1, r2
   14650:	bne	146b0 <__assert_fail@plt+0x3690>
   14654:	cmn	r4, #1
   14658:	ble	14678 <__assert_fail@plt+0x3658>
   1465c:	cmp	r4, #0
   14660:	beq	146c4 <__assert_fail@plt+0x36a4>
   14664:	cmn	r5, #1
   14668:	ble	1469c <__assert_fail@plt+0x367c>
   1466c:	mvn	r1, #-2147483648	; 0x80000000
   14670:	udiv	r1, r1, r4
   14674:	b	14690 <__assert_fail@plt+0x3670>
   14678:	cmn	r5, #1
   1467c:	ble	146b4 <__assert_fail@plt+0x3694>
   14680:	cmn	r4, #1
   14684:	beq	146c4 <__assert_fail@plt+0x36a4>
   14688:	mov	r1, #-2147483648	; 0x80000000
   1468c:	sdiv	r1, r1, r4
   14690:	cmp	r1, r5
   14694:	bge	146c4 <__assert_fail@plt+0x36a4>
   14698:	b	146b0 <__assert_fail@plt+0x3690>
   1469c:	beq	146c4 <__assert_fail@plt+0x36a4>
   146a0:	mov	r1, #-2147483648	; 0x80000000
   146a4:	sdiv	r1, r1, r5
   146a8:	cmp	r1, r4
   146ac:	bge	146c4 <__assert_fail@plt+0x36a4>
   146b0:	bl	1483c <__assert_fail@plt+0x381c>
   146b4:	mvn	r1, #-2147483648	; 0x80000000
   146b8:	sdiv	r1, r1, r4
   146bc:	cmp	r5, r1
   146c0:	blt	146b0 <__assert_fail@plt+0x3690>
   146c4:	mul	r1, r5, r4
   146c8:	bl	14434 <__assert_fail@plt+0x3414>
   146cc:	str	r5, [r8]
   146d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146d4:	push	{fp, lr}
   146d8:	mov	fp, sp
   146dc:	mov	r1, #1
   146e0:	bl	14880 <__assert_fail@plt+0x3860>
   146e4:	cmp	r0, #0
   146e8:	popne	{fp, pc}
   146ec:	bl	1483c <__assert_fail@plt+0x381c>
   146f0:	push	{fp, lr}
   146f4:	mov	fp, sp
   146f8:	bl	14880 <__assert_fail@plt+0x3860>
   146fc:	cmp	r0, #0
   14700:	popne	{fp, pc}
   14704:	bl	1483c <__assert_fail@plt+0x381c>
   14708:	push	{fp, lr}
   1470c:	mov	fp, sp
   14710:	mov	r1, #1
   14714:	bl	14880 <__assert_fail@plt+0x3860>
   14718:	cmp	r0, #0
   1471c:	popne	{fp, pc}
   14720:	bl	1483c <__assert_fail@plt+0x381c>
   14724:	push	{fp, lr}
   14728:	mov	fp, sp
   1472c:	bl	14880 <__assert_fail@plt+0x3860>
   14730:	cmp	r0, #0
   14734:	popne	{fp, pc}
   14738:	bl	1483c <__assert_fail@plt+0x381c>
   1473c:	push	{r4, r5, r6, sl, fp, lr}
   14740:	add	fp, sp, #16
   14744:	mov	r5, r0
   14748:	mov	r0, r1
   1474c:	mov	r4, r1
   14750:	bl	148d4 <__assert_fail@plt+0x38b4>
   14754:	cmp	r0, #0
   14758:	beq	14774 <__assert_fail@plt+0x3754>
   1475c:	mov	r1, r5
   14760:	mov	r2, r4
   14764:	mov	r6, r0
   14768:	bl	10e34 <memcpy@plt>
   1476c:	mov	r0, r6
   14770:	pop	{r4, r5, r6, sl, fp, pc}
   14774:	bl	1483c <__assert_fail@plt+0x381c>
   14778:	push	{r4, r5, r6, sl, fp, lr}
   1477c:	add	fp, sp, #16
   14780:	mov	r5, r0
   14784:	mov	r0, r1
   14788:	mov	r4, r1
   1478c:	bl	148d4 <__assert_fail@plt+0x38b4>
   14790:	cmp	r0, #0
   14794:	beq	147b0 <__assert_fail@plt+0x3790>
   14798:	mov	r1, r5
   1479c:	mov	r2, r4
   147a0:	mov	r6, r0
   147a4:	bl	10e34 <memcpy@plt>
   147a8:	mov	r0, r6
   147ac:	pop	{r4, r5, r6, sl, fp, pc}
   147b0:	bl	1483c <__assert_fail@plt+0x381c>
   147b4:	push	{r4, r5, r6, sl, fp, lr}
   147b8:	add	fp, sp, #16
   147bc:	mov	r5, r0
   147c0:	add	r0, r1, #1
   147c4:	mov	r4, r1
   147c8:	bl	148d4 <__assert_fail@plt+0x38b4>
   147cc:	cmp	r0, #0
   147d0:	beq	147f8 <__assert_fail@plt+0x37d8>
   147d4:	mov	r6, r0
   147d8:	mov	r0, #0
   147dc:	mov	r1, r5
   147e0:	mov	r2, r4
   147e4:	strb	r0, [r6, r4]
   147e8:	mov	r0, r6
   147ec:	bl	10e34 <memcpy@plt>
   147f0:	mov	r0, r6
   147f4:	pop	{r4, r5, r6, sl, fp, pc}
   147f8:	bl	1483c <__assert_fail@plt+0x381c>
   147fc:	push	{r4, r5, r6, sl, fp, lr}
   14800:	add	fp, sp, #16
   14804:	mov	r4, r0
   14808:	bl	10f30 <strlen@plt>
   1480c:	add	r5, r0, #1
   14810:	mov	r0, r5
   14814:	bl	148d4 <__assert_fail@plt+0x38b4>
   14818:	cmp	r0, #0
   1481c:	beq	14838 <__assert_fail@plt+0x3818>
   14820:	mov	r1, r4
   14824:	mov	r2, r5
   14828:	mov	r6, r0
   1482c:	bl	10e34 <memcpy@plt>
   14830:	mov	r0, r6
   14834:	pop	{r4, r5, r6, sl, fp, pc}
   14838:	bl	1483c <__assert_fail@plt+0x381c>
   1483c:	push	{fp, lr}
   14840:	mov	fp, sp
   14844:	movw	r0, #24812	; 0x60ec
   14848:	movw	r1, #22868	; 0x5954
   1484c:	mov	r2, #5
   14850:	movt	r0, #2
   14854:	movt	r1, #1
   14858:	ldr	r4, [r0]
   1485c:	mov	r0, #0
   14860:	bl	10e64 <dcgettext@plt>
   14864:	movw	r2, #21141	; 0x5295
   14868:	mov	r3, r0
   1486c:	mov	r0, r4
   14870:	mov	r1, #0
   14874:	movt	r2, #1
   14878:	bl	10ed0 <error@plt>
   1487c:	bl	10ffc <abort@plt>
   14880:	clz	r2, r1
   14884:	clz	r3, r0
   14888:	lsr	r2, r2, #5
   1488c:	lsr	r3, r3, #5
   14890:	orrs	r2, r3, r2
   14894:	movwne	r1, #1
   14898:	movwne	r0, #1
   1489c:	cmp	r1, #0
   148a0:	beq	148d0 <__assert_fail@plt+0x38b0>
   148a4:	mvn	r2, #-2147483648	; 0x80000000
   148a8:	udiv	r2, r2, r1
   148ac:	cmp	r2, r0
   148b0:	bcs	148d0 <__assert_fail@plt+0x38b0>
   148b4:	push	{fp, lr}
   148b8:	mov	fp, sp
   148bc:	bl	10f3c <__errno_location@plt>
   148c0:	mov	r1, #12
   148c4:	str	r1, [r0]
   148c8:	mov	r0, #0
   148cc:	pop	{fp, pc}
   148d0:	b	10dd4 <calloc@plt>
   148d4:	cmp	r0, #0
   148d8:	movweq	r0, #1
   148dc:	cmn	r0, #1
   148e0:	ble	148e8 <__assert_fail@plt+0x38c8>
   148e4:	b	10edc <malloc@plt>
   148e8:	push	{fp, lr}
   148ec:	mov	fp, sp
   148f0:	bl	10f3c <__errno_location@plt>
   148f4:	mov	r1, #12
   148f8:	str	r1, [r0]
   148fc:	mov	r0, #0
   14900:	pop	{fp, pc}
   14904:	push	{fp, lr}
   14908:	mov	fp, sp
   1490c:	cmp	r0, #0
   14910:	beq	1492c <__assert_fail@plt+0x390c>
   14914:	cmp	r1, #0
   14918:	beq	14938 <__assert_fail@plt+0x3918>
   1491c:	cmn	r1, #1
   14920:	ble	14940 <__assert_fail@plt+0x3920>
   14924:	pop	{fp, lr}
   14928:	b	10e70 <realloc@plt>
   1492c:	mov	r0, r1
   14930:	pop	{fp, lr}
   14934:	b	148d4 <__assert_fail@plt+0x38b4>
   14938:	bl	12328 <__assert_fail@plt+0x1308>
   1493c:	b	1494c <__assert_fail@plt+0x392c>
   14940:	bl	10f3c <__errno_location@plt>
   14944:	mov	r1, #12
   14948:	str	r1, [r0]
   1494c:	mov	r0, #0
   14950:	pop	{fp, pc}
   14954:	push	{r4, r5, r6, sl, fp, lr}
   14958:	add	fp, sp, #16
   1495c:	mov	r4, r0
   14960:	bl	10eac <__fpending@plt>
   14964:	mov	r5, r0
   14968:	mov	r0, r4
   1496c:	bl	10eb8 <ferror_unlocked@plt>
   14970:	mov	r6, r0
   14974:	mov	r0, r4
   14978:	bl	12230 <__assert_fail@plt+0x1210>
   1497c:	cmp	r6, #0
   14980:	beq	149a0 <__assert_fail@plt+0x3980>
   14984:	mvn	r4, #0
   14988:	cmp	r0, #0
   1498c:	bne	149cc <__assert_fail@plt+0x39ac>
   14990:	bl	10f3c <__errno_location@plt>
   14994:	mov	r1, #0
   14998:	str	r1, [r0]
   1499c:	b	149cc <__assert_fail@plt+0x39ac>
   149a0:	cmp	r0, #0
   149a4:	mov	r4, r0
   149a8:	mvnne	r4, #0
   149ac:	cmp	r5, #0
   149b0:	bne	149cc <__assert_fail@plt+0x39ac>
   149b4:	cmp	r0, #0
   149b8:	beq	149cc <__assert_fail@plt+0x39ac>
   149bc:	bl	10f3c <__errno_location@plt>
   149c0:	ldr	r0, [r0]
   149c4:	subs	r4, r0, #9
   149c8:	mvnne	r4, #0
   149cc:	mov	r0, r4
   149d0:	pop	{r4, r5, r6, sl, fp, pc}
   149d4:	push	{fp, lr}
   149d8:	mov	fp, sp
   149dc:	mov	r0, #14
   149e0:	bl	10fb4 <nl_langinfo@plt>
   149e4:	movw	r1, #20719	; 0x50ef
   149e8:	cmp	r0, #0
   149ec:	movt	r1, #1
   149f0:	movne	r1, r0
   149f4:	movw	r0, #22885	; 0x5965
   149f8:	ldrb	r2, [r1]
   149fc:	movt	r0, #1
   14a00:	cmp	r2, #0
   14a04:	movne	r0, r1
   14a08:	pop	{fp, pc}
   14a0c:	push	{r4, r5, r6, r7, fp, lr}
   14a10:	add	fp, sp, #16
   14a14:	sub	sp, sp, #8
   14a18:	add	r5, sp, #4
   14a1c:	cmp	r0, #0
   14a20:	mov	r7, r2
   14a24:	mov	r4, r1
   14a28:	movne	r5, r0
   14a2c:	mov	r0, r5
   14a30:	bl	10ec4 <mbrtowc@plt>
   14a34:	mov	r6, r0
   14a38:	cmp	r7, #0
   14a3c:	beq	14a60 <__assert_fail@plt+0x3a40>
   14a40:	cmn	r6, #2
   14a44:	bcc	14a60 <__assert_fail@plt+0x3a40>
   14a48:	mov	r0, #0
   14a4c:	bl	14aa8 <__assert_fail@plt+0x3a88>
   14a50:	cmp	r0, #0
   14a54:	ldrbeq	r0, [r4]
   14a58:	moveq	r6, #1
   14a5c:	streq	r0, [r5]
   14a60:	mov	r0, r6
   14a64:	sub	sp, fp, #16
   14a68:	pop	{r4, r5, r6, r7, fp, pc}
   14a6c:	cmp	r2, #0
   14a70:	beq	14aa0 <__assert_fail@plt+0x3a80>
   14a74:	mvn	r3, #0
   14a78:	udiv	r3, r3, r2
   14a7c:	cmp	r3, r1
   14a80:	bcs	14aa0 <__assert_fail@plt+0x3a80>
   14a84:	push	{fp, lr}
   14a88:	mov	fp, sp
   14a8c:	bl	10f3c <__errno_location@plt>
   14a90:	mov	r1, #12
   14a94:	str	r1, [r0]
   14a98:	mov	r0, #0
   14a9c:	pop	{fp, pc}
   14aa0:	mul	r1, r2, r1
   14aa4:	b	14904 <__assert_fail@plt+0x38e4>
   14aa8:	push	{r4, sl, fp, lr}
   14aac:	add	fp, sp, #8
   14ab0:	sub	sp, sp, #264	; 0x108
   14ab4:	add	r1, sp, #7
   14ab8:	movw	r2, #257	; 0x101
   14abc:	bl	14b0c <__assert_fail@plt+0x3aec>
   14ac0:	mov	r4, #0
   14ac4:	cmp	r0, #0
   14ac8:	bne	14b00 <__assert_fail@plt+0x3ae0>
   14acc:	movw	r1, #22891	; 0x596b
   14ad0:	add	r0, sp, #7
   14ad4:	movt	r1, #1
   14ad8:	bl	10df8 <strcmp@plt>
   14adc:	cmp	r0, #0
   14ae0:	beq	14b00 <__assert_fail@plt+0x3ae0>
   14ae4:	movw	r1, #22893	; 0x596d
   14ae8:	add	r0, sp, #7
   14aec:	movt	r1, #1
   14af0:	bl	10df8 <strcmp@plt>
   14af4:	mov	r4, r0
   14af8:	cmp	r0, #0
   14afc:	movwne	r4, #1
   14b00:	mov	r0, r4
   14b04:	sub	sp, fp, #8
   14b08:	pop	{r4, sl, fp, pc}
   14b0c:	push	{r4, r5, r6, r7, fp, lr}
   14b10:	add	fp, sp, #16
   14b14:	mov	r4, r1
   14b18:	mov	r1, #0
   14b1c:	mov	r6, r2
   14b20:	bl	10f9c <setlocale@plt>
   14b24:	cmp	r0, #0
   14b28:	beq	14b54 <__assert_fail@plt+0x3b34>
   14b2c:	mov	r7, r0
   14b30:	bl	10f30 <strlen@plt>
   14b34:	cmp	r0, r6
   14b38:	bcs	14b68 <__assert_fail@plt+0x3b48>
   14b3c:	add	r2, r0, #1
   14b40:	mov	r0, r4
   14b44:	mov	r1, r7
   14b48:	bl	10e34 <memcpy@plt>
   14b4c:	mov	r5, #0
   14b50:	b	14b90 <__assert_fail@plt+0x3b70>
   14b54:	cmp	r6, #0
   14b58:	mov	r5, #22
   14b5c:	movne	r0, #0
   14b60:	strbne	r0, [r4]
   14b64:	b	14b90 <__assert_fail@plt+0x3b70>
   14b68:	mov	r5, #34	; 0x22
   14b6c:	cmp	r6, #0
   14b70:	beq	14b90 <__assert_fail@plt+0x3b70>
   14b74:	sub	r6, r6, #1
   14b78:	mov	r0, r4
   14b7c:	mov	r1, r7
   14b80:	mov	r2, r6
   14b84:	bl	10e34 <memcpy@plt>
   14b88:	mov	r0, #0
   14b8c:	strb	r0, [r4, r6]
   14b90:	mov	r0, r5
   14b94:	pop	{r4, r5, r6, r7, fp, pc}
   14b98:	mov	r1, #0
   14b9c:	b	10f9c <setlocale@plt>
   14ba0:	cmp	r3, #0
   14ba4:	cmpeq	r2, #0
   14ba8:	bne	14bc0 <__assert_fail@plt+0x3ba0>
   14bac:	cmp	r1, #0
   14bb0:	cmpeq	r0, #0
   14bb4:	mvnne	r1, #0
   14bb8:	mvnne	r0, #0
   14bbc:	b	14bdc <__assert_fail@plt+0x3bbc>
   14bc0:	sub	sp, sp, #8
   14bc4:	push	{sp, lr}
   14bc8:	bl	14bec <__assert_fail@plt+0x3bcc>
   14bcc:	ldr	lr, [sp, #4]
   14bd0:	add	sp, sp, #8
   14bd4:	pop	{r2, r3}
   14bd8:	bx	lr
   14bdc:	push	{r1, lr}
   14be0:	mov	r0, #8
   14be4:	bl	10dec <raise@plt>
   14be8:	pop	{r1, pc}
   14bec:	cmp	r1, r3
   14bf0:	cmpeq	r0, r2
   14bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bf8:	mov	r4, r0
   14bfc:	movcc	r0, #0
   14c00:	mov	r5, r1
   14c04:	ldr	lr, [sp, #36]	; 0x24
   14c08:	movcc	r1, r0
   14c0c:	bcc	14d08 <__assert_fail@plt+0x3ce8>
   14c10:	cmp	r3, #0
   14c14:	clzeq	ip, r2
   14c18:	clzne	ip, r3
   14c1c:	addeq	ip, ip, #32
   14c20:	cmp	r5, #0
   14c24:	clzeq	r1, r4
   14c28:	addeq	r1, r1, #32
   14c2c:	clzne	r1, r5
   14c30:	sub	ip, ip, r1
   14c34:	sub	sl, ip, #32
   14c38:	lsl	r9, r3, ip
   14c3c:	rsb	fp, ip, #32
   14c40:	orr	r9, r9, r2, lsl sl
   14c44:	orr	r9, r9, r2, lsr fp
   14c48:	lsl	r8, r2, ip
   14c4c:	cmp	r5, r9
   14c50:	cmpeq	r4, r8
   14c54:	movcc	r0, #0
   14c58:	movcc	r1, r0
   14c5c:	bcc	14c78 <__assert_fail@plt+0x3c58>
   14c60:	mov	r0, #1
   14c64:	subs	r4, r4, r8
   14c68:	lsl	r1, r0, sl
   14c6c:	orr	r1, r1, r0, lsr fp
   14c70:	lsl	r0, r0, ip
   14c74:	sbc	r5, r5, r9
   14c78:	cmp	ip, #0
   14c7c:	beq	14d08 <__assert_fail@plt+0x3ce8>
   14c80:	lsr	r6, r8, #1
   14c84:	orr	r6, r6, r9, lsl #31
   14c88:	lsr	r7, r9, #1
   14c8c:	mov	r2, ip
   14c90:	b	14cb4 <__assert_fail@plt+0x3c94>
   14c94:	subs	r3, r4, r6
   14c98:	sbc	r8, r5, r7
   14c9c:	adds	r3, r3, r3
   14ca0:	adc	r8, r8, r8
   14ca4:	adds	r4, r3, #1
   14ca8:	adc	r5, r8, #0
   14cac:	subs	r2, r2, #1
   14cb0:	beq	14cd0 <__assert_fail@plt+0x3cb0>
   14cb4:	cmp	r5, r7
   14cb8:	cmpeq	r4, r6
   14cbc:	bcs	14c94 <__assert_fail@plt+0x3c74>
   14cc0:	adds	r4, r4, r4
   14cc4:	adc	r5, r5, r5
   14cc8:	subs	r2, r2, #1
   14ccc:	bne	14cb4 <__assert_fail@plt+0x3c94>
   14cd0:	lsr	r3, r4, ip
   14cd4:	orr	r3, r3, r5, lsl fp
   14cd8:	lsr	r2, r5, ip
   14cdc:	orr	r3, r3, r5, lsr sl
   14ce0:	adds	r0, r0, r4
   14ce4:	mov	r4, r3
   14ce8:	lsl	r3, r2, ip
   14cec:	orr	r3, r3, r4, lsl sl
   14cf0:	lsl	ip, r4, ip
   14cf4:	orr	r3, r3, r4, lsr fp
   14cf8:	adc	r1, r1, r5
   14cfc:	subs	r0, r0, ip
   14d00:	mov	r5, r2
   14d04:	sbc	r1, r1, r3
   14d08:	cmp	lr, #0
   14d0c:	strdne	r4, [lr]
   14d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14d18:	mov	r7, r0
   14d1c:	ldr	r6, [pc, #72]	; 14d6c <__assert_fail@plt+0x3d4c>
   14d20:	ldr	r5, [pc, #72]	; 14d70 <__assert_fail@plt+0x3d50>
   14d24:	add	r6, pc, r6
   14d28:	add	r5, pc, r5
   14d2c:	sub	r6, r6, r5
   14d30:	mov	r8, r1
   14d34:	mov	r9, r2
   14d38:	bl	10db4 <calloc@plt-0x20>
   14d3c:	asrs	r6, r6, #2
   14d40:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d44:	mov	r4, #0
   14d48:	add	r4, r4, #1
   14d4c:	ldr	r3, [r5], #4
   14d50:	mov	r2, r9
   14d54:	mov	r1, r8
   14d58:	mov	r0, r7
   14d5c:	blx	r3
   14d60:	cmp	r6, r4
   14d64:	bne	14d48 <__assert_fail@plt+0x3d28>
   14d68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d6c:	andeq	r1, r1, r0, ror #3
   14d70:	ldrdeq	r1, [r1], -r8
   14d74:	bx	lr
   14d78:	ldr	r3, [pc, #12]	; 14d8c <__assert_fail@plt+0x3d6c>
   14d7c:	mov	r1, #0
   14d80:	add	r3, pc, r3
   14d84:	ldr	r2, [r3]
   14d88:	b	10f48 <__cxa_atexit@plt>
   14d8c:	andeq	r1, r1, r4, asr r3

Disassembly of section .fini:

00014d90 <.fini>:
   14d90:	push	{r3, lr}
   14d94:	pop	{r3, pc}
