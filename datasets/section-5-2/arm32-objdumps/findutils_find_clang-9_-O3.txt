
../repos/findutils/find/find:     file format elf32-littlearm


Disassembly of section .init:

00012340 <.init>:
   12340:	push	{r3, lr}
   12344:	bl	12afc <__assert_fail@plt+0x4c>
   12348:	pop	{r3, pc}

Disassembly of section .plt:

0001234c <pthread_mutex_unlock@plt-0x14>:
   1234c:	push	{lr}		; (str lr, [sp, #-4]!)
   12350:	ldr	lr, [pc, #4]	; 1235c <pthread_mutex_unlock@plt-0x4>
   12354:	add	lr, pc, lr
   12358:	ldr	pc, [lr, #8]!
   1235c:	andeq	r1, r5, r4, lsr #25

00012360 <pthread_mutex_unlock@plt>:
   12360:	add	ip, pc, #0, 12
   12364:	add	ip, ip, #331776	; 0x51000
   12368:	ldr	pc, [ip, #3236]!	; 0xca4

0001236c <fdopen@plt>:
   1236c:	add	ip, pc, #0, 12
   12370:	add	ip, ip, #331776	; 0x51000
   12374:	ldr	pc, [ip, #3228]!	; 0xc9c

00012378 <fstatfs64@plt>:
   12378:	add	ip, pc, #0, 12
   1237c:	add	ip, ip, #331776	; 0x51000
   12380:	ldr	pc, [ip, #3220]!	; 0xc94

00012384 <calloc@plt>:
   12384:	add	ip, pc, #0, 12
   12388:	add	ip, ip, #331776	; 0x51000
   1238c:	ldr	pc, [ip, #3212]!	; 0xc8c

00012390 <endgrent@plt>:
   12390:	add	ip, pc, #0, 12
   12394:	add	ip, ip, #331776	; 0x51000
   12398:	ldr	pc, [ip, #3204]!	; 0xc84

0001239c <wctype@plt>:
   1239c:	add	ip, pc, #0, 12
   123a0:	add	ip, ip, #331776	; 0x51000
   123a4:	ldr	pc, [ip, #3196]!	; 0xc7c

000123a8 <raise@plt>:
   123a8:	add	ip, pc, #0, 12
   123ac:	add	ip, ip, #331776	; 0x51000
   123b0:	ldr	pc, [ip, #3188]!	; 0xc74

000123b4 <wcrtomb@plt>:
   123b4:	add	ip, pc, #0, 12
   123b8:	add	ip, ip, #331776	; 0x51000
   123bc:	ldr	pc, [ip, #3180]!	; 0xc6c

000123c0 <gmtime_r@plt>:
   123c0:	add	ip, pc, #0, 12
   123c4:	add	ip, ip, #331776	; 0x51000
   123c8:	ldr	pc, [ip, #3172]!	; 0xc64

000123cc <__getdelim@plt>:
   123cc:	add	ip, pc, #0, 12
   123d0:	add	ip, ip, #331776	; 0x51000
   123d4:	ldr	pc, [ip, #3164]!	; 0xc5c

000123d8 <getpwnam@plt>:
   123d8:	add	ip, pc, #0, 12
   123dc:	add	ip, ip, #331776	; 0x51000
   123e0:	ldr	pc, [ip, #3156]!	; 0xc54

000123e4 <is_selinux_enabled@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #331776	; 0x51000
   123ec:	ldr	pc, [ip, #3148]!	; 0xc4c

000123f0 <iswctype@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #331776	; 0x51000
   123f8:	ldr	pc, [ip, #3140]!	; 0xc44

000123fc <strcmp@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #331776	; 0x51000
   12404:	ldr	pc, [ip, #3132]!	; 0xc3c

00012408 <strtol@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #331776	; 0x51000
   12410:	ldr	pc, [ip, #3124]!	; 0xc34

00012414 <getpwuid@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #331776	; 0x51000
   1241c:	ldr	pc, [ip, #3116]!	; 0xc2c

00012420 <printf@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #331776	; 0x51000
   12428:	ldr	pc, [ip, #3108]!	; 0xc24

0001242c <pthread_mutex_destroy@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #331776	; 0x51000
   12434:	ldr	pc, [ip, #3100]!	; 0xc1c

00012438 <mktime@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #331776	; 0x51000
   12440:	ldr	pc, [ip, #3092]!	; 0xc14

00012444 <fflush@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #331776	; 0x51000
   1244c:	ldr	pc, [ip, #3084]!	; 0xc0c

00012450 <unlinkat@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #331776	; 0x51000
   12458:	ldr	pc, [ip, #3076]!	; 0xc04

0001245c <wcwidth@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #331776	; 0x51000
   12464:	ldr	pc, [ip, #3068]!	; 0xbfc

00012468 <lsetfilecon@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #331776	; 0x51000
   12470:	ldr	pc, [ip, #3060]!	; 0xbf4

00012474 <memmove@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #331776	; 0x51000
   1247c:	ldr	pc, [ip, #3052]!	; 0xbec

00012480 <free@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #331776	; 0x51000
   12488:	ldr	pc, [ip, #3044]!	; 0xbe4

0001248c <pthread_mutex_lock@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #331776	; 0x51000
   12494:	ldr	pc, [ip, #3036]!	; 0xbdc

00012498 <faccessat@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #331776	; 0x51000
   124a0:	ldr	pc, [ip, #3028]!	; 0xbd4

000124a4 <ferror@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #331776	; 0x51000
   124ac:	ldr	pc, [ip, #3020]!	; 0xbcc

000124b0 <thrd_exit@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #331776	; 0x51000
   124b8:	ldr	pc, [ip, #3012]!	; 0xbc4

000124bc <strndup@plt>:
   124bc:	add	ip, pc, #0, 12
   124c0:	add	ip, ip, #331776	; 0x51000
   124c4:	ldr	pc, [ip, #3004]!	; 0xbbc

000124c8 <clock_gettime@plt>:
   124c8:	add	ip, pc, #0, 12
   124cc:	add	ip, ip, #331776	; 0x51000
   124d0:	ldr	pc, [ip, #2996]!	; 0xbb4

000124d4 <_exit@plt>:
   124d4:	add	ip, pc, #0, 12
   124d8:	add	ip, ip, #331776	; 0x51000
   124dc:	ldr	pc, [ip, #2988]!	; 0xbac

000124e0 <memcpy@plt>:
   124e0:	add	ip, pc, #0, 12
   124e4:	add	ip, ip, #331776	; 0x51000
   124e8:	ldr	pc, [ip, #2980]!	; 0xba4

000124ec <execvp@plt>:
   124ec:	add	ip, pc, #0, 12
   124f0:	add	ip, ip, #331776	; 0x51000
   124f4:	ldr	pc, [ip, #2972]!	; 0xb9c

000124f8 <pthread_mutex_init@plt>:
   124f8:	add	ip, pc, #0, 12
   124fc:	add	ip, ip, #331776	; 0x51000
   12500:	ldr	pc, [ip, #2964]!	; 0xb94

00012504 <__strtoull_internal@plt>:
   12504:	add	ip, pc, #0, 12
   12508:	add	ip, ip, #331776	; 0x51000
   1250c:	ldr	pc, [ip, #2956]!	; 0xb8c

00012510 <towlower@plt>:
   12510:	add	ip, pc, #0, 12
   12514:	add	ip, ip, #331776	; 0x51000
   12518:	ldr	pc, [ip, #2948]!	; 0xb84

0001251c <mbsinit@plt>:
   1251c:	add	ip, pc, #0, 12
   12520:	add	ip, ip, #331776	; 0x51000
   12524:	ldr	pc, [ip, #2940]!	; 0xb7c

00012528 <signal@plt>:
   12528:	add	ip, pc, #0, 12
   1252c:	add	ip, ip, #331776	; 0x51000
   12530:	ldr	pc, [ip, #2932]!	; 0xb74

00012534 <time@plt>:
   12534:	add	ip, pc, #0, 12
   12538:	add	ip, ip, #331776	; 0x51000
   1253c:	ldr	pc, [ip, #2924]!	; 0xb6c

00012540 <memcmp@plt>:
   12540:	add	ip, pc, #0, 12
   12544:	add	ip, ip, #331776	; 0x51000
   12548:	ldr	pc, [ip, #2916]!	; 0xb64

0001254c <uname@plt>:
   1254c:	add	ip, pc, #0, 12
   12550:	add	ip, ip, #331776	; 0x51000
   12554:	ldr	pc, [ip, #2908]!	; 0xb5c

00012558 <ctime@plt>:
   12558:	add	ip, pc, #0, 12
   1255c:	add	ip, ip, #331776	; 0x51000
   12560:	ldr	pc, [ip, #2900]!	; 0xb54

00012564 <dcgettext@plt>:
   12564:	add	ip, pc, #0, 12
   12568:	add	ip, ip, #331776	; 0x51000
   1256c:	ldr	pc, [ip, #2892]!	; 0xb4c

00012570 <strdup@plt>:
   12570:	add	ip, pc, #0, 12
   12574:	add	ip, ip, #331776	; 0x51000
   12578:	ldr	pc, [ip, #2884]!	; 0xb44

0001257c <sysconf@plt>:
   1257c:	add	ip, pc, #0, 12
   12580:	add	ip, ip, #331776	; 0x51000
   12584:	ldr	pc, [ip, #2876]!	; 0xb3c

00012588 <getrlimit64@plt>:
   12588:	add	ip, pc, #0, 12
   1258c:	add	ip, ip, #331776	; 0x51000
   12590:	ldr	pc, [ip, #2868]!	; 0xb34

00012594 <realloc@plt>:
   12594:	add	ip, pc, #0, 12
   12598:	add	ip, ip, #331776	; 0x51000
   1259c:	ldr	pc, [ip, #2860]!	; 0xb2c

000125a0 <fgetfilecon@plt>:
   125a0:	add	ip, pc, #0, 12
   125a4:	add	ip, ip, #331776	; 0x51000
   125a8:	ldr	pc, [ip, #2852]!	; 0xb24

000125ac <localtime_r@plt>:
   125ac:	add	ip, pc, #0, 12
   125b0:	add	ip, ip, #331776	; 0x51000
   125b4:	ldr	pc, [ip, #2844]!	; 0xb1c

000125b8 <textdomain@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #331776	; 0x51000
   125c0:	ldr	pc, [ip, #2836]!	; 0xb14

000125c4 <iswcntrl@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #331776	; 0x51000
   125cc:	ldr	pc, [ip, #2828]!	; 0xb0c

000125d0 <chdir@plt>:
   125d0:	add	ip, pc, #0, 12
   125d4:	add	ip, ip, #331776	; 0x51000
   125d8:	ldr	pc, [ip, #2820]!	; 0xb04

000125dc <__fxstatat64@plt>:
   125dc:	add	ip, pc, #0, 12
   125e0:	add	ip, ip, #331776	; 0x51000
   125e4:	ldr	pc, [ip, #2812]!	; 0xafc

000125e8 <iswprint@plt>:
   125e8:	add	ip, pc, #0, 12
   125ec:	add	ip, ip, #331776	; 0x51000
   125f0:	ldr	pc, [ip, #2804]!	; 0xaf4

000125f4 <tzset@plt>:
   125f4:	add	ip, pc, #0, 12
   125f8:	add	ip, ip, #331776	; 0x51000
   125fc:	ldr	pc, [ip, #2796]!	; 0xaec

00012600 <poll@plt>:
   12600:	add	ip, pc, #0, 12
   12604:	add	ip, ip, #331776	; 0x51000
   12608:	ldr	pc, [ip, #2788]!	; 0xae4

0001260c <__fxstat64@plt>:
   1260c:	add	ip, pc, #0, 12
   12610:	add	ip, ip, #331776	; 0x51000
   12614:	ldr	pc, [ip, #2780]!	; 0xadc

00012618 <fwrite@plt>:
   12618:	add	ip, pc, #0, 12
   1261c:	add	ip, ip, #331776	; 0x51000
   12620:	ldr	pc, [ip, #2772]!	; 0xad4

00012624 <strcat@plt>:
   12624:	add	ip, pc, #0, 12
   12628:	add	ip, ip, #331776	; 0x51000
   1262c:	ldr	pc, [ip, #2764]!	; 0xacc

00012630 <lseek64@plt>:
   12630:	add	ip, pc, #0, 12
   12634:	add	ip, ip, #331776	; 0x51000
   12638:	ldr	pc, [ip, #2756]!	; 0xac4

0001263c <waitpid@plt>:
   1263c:	add	ip, pc, #0, 12
   12640:	add	ip, ip, #331776	; 0x51000
   12644:	ldr	pc, [ip, #2748]!	; 0xabc

00012648 <__ctype_get_mb_cur_max@plt>:
   12648:	add	ip, pc, #0, 12
   1264c:	add	ip, ip, #331776	; 0x51000
   12650:	ldr	pc, [ip, #2740]!	; 0xab4

00012654 <hasmntopt@plt>:
   12654:	add	ip, pc, #0, 12
   12658:	add	ip, ip, #331776	; 0x51000
   1265c:	ldr	pc, [ip, #2732]!	; 0xaac

00012660 <strcpy@plt>:
   12660:	add	ip, pc, #0, 12
   12664:	add	ip, ip, #331776	; 0x51000
   12668:	ldr	pc, [ip, #2724]!	; 0xaa4

0001266c <gettimeofday@plt>:
   1266c:	add	ip, pc, #0, 12
   12670:	add	ip, ip, #331776	; 0x51000
   12674:	ldr	pc, [ip, #2716]!	; 0xa9c

00012678 <__fpending@plt>:
   12678:	add	ip, pc, #0, 12
   1267c:	add	ip, ip, #331776	; 0x51000
   12680:	ldr	pc, [ip, #2708]!	; 0xa94

00012684 <mbrtowc@plt>:
   12684:	add	ip, pc, #0, 12
   12688:	add	ip, ip, #331776	; 0x51000
   1268c:	ldr	pc, [ip, #2700]!	; 0xa8c

00012690 <strtok_r@plt>:
   12690:	add	ip, pc, #0, 12
   12694:	add	ip, ip, #331776	; 0x51000
   12698:	ldr	pc, [ip, #2692]!	; 0xa84

0001269c <error@plt>:
   1269c:	add	ip, pc, #0, 12
   126a0:	add	ip, ip, #331776	; 0x51000
   126a4:	ldr	pc, [ip, #2684]!	; 0xa7c

000126a8 <getmntent@plt>:
   126a8:	add	ip, pc, #0, 12
   126ac:	add	ip, ip, #331776	; 0x51000
   126b0:	ldr	pc, [ip, #2676]!	; 0xa74

000126b4 <opendir@plt>:
   126b4:	add	ip, pc, #0, 12
   126b8:	add	ip, ip, #331776	; 0x51000
   126bc:	ldr	pc, [ip, #2668]!	; 0xa6c

000126c0 <fnmatch@plt>:
   126c0:	add	ip, pc, #0, 12
   126c4:	add	ip, ip, #331776	; 0x51000
   126c8:	ldr	pc, [ip, #2660]!	; 0xa64

000126cc <open64@plt>:
   126cc:	add	ip, pc, #0, 12
   126d0:	add	ip, ip, #331776	; 0x51000
   126d4:	ldr	pc, [ip, #2652]!	; 0xa5c

000126d8 <getenv@plt>:
   126d8:	add	ip, pc, #0, 12
   126dc:	add	ip, ip, #331776	; 0x51000
   126e0:	ldr	pc, [ip, #2644]!	; 0xa54

000126e4 <lgetfilecon@plt>:
   126e4:	add	ip, pc, #0, 12
   126e8:	add	ip, ip, #331776	; 0x51000
   126ec:	ldr	pc, [ip, #2636]!	; 0xa4c

000126f0 <malloc@plt>:
   126f0:	add	ip, pc, #0, 12
   126f4:	add	ip, ip, #331776	; 0x51000
   126f8:	ldr	pc, [ip, #2628]!	; 0xa44

000126fc <__libc_start_main@plt>:
   126fc:	add	ip, pc, #0, 12
   12700:	add	ip, ip, #331776	; 0x51000
   12704:	ldr	pc, [ip, #2620]!	; 0xa3c

00012708 <readlinkat@plt>:
   12708:	add	ip, pc, #0, 12
   1270c:	add	ip, ip, #331776	; 0x51000
   12710:	ldr	pc, [ip, #2612]!	; 0xa34

00012714 <strftime@plt>:
   12714:	add	ip, pc, #0, 12
   12718:	add	ip, ip, #331776	; 0x51000
   1271c:	ldr	pc, [ip, #2604]!	; 0xa2c

00012720 <__freading@plt>:
   12720:	add	ip, pc, #0, 12
   12724:	add	ip, ip, #331776	; 0x51000
   12728:	ldr	pc, [ip, #2596]!	; 0xa24

0001272c <localtime@plt>:
   1272c:	add	ip, pc, #0, 12
   12730:	add	ip, ip, #331776	; 0x51000
   12734:	ldr	pc, [ip, #2588]!	; 0xa1c

00012738 <__ctype_tolower_loc@plt>:
   12738:	add	ip, pc, #0, 12
   1273c:	add	ip, ip, #331776	; 0x51000
   12740:	ldr	pc, [ip, #2580]!	; 0xa14

00012744 <modf@plt>:
   12744:	add	ip, pc, #0, 12
   12748:	add	ip, ip, #331776	; 0x51000
   1274c:	ldr	pc, [ip, #2572]!	; 0xa0c

00012750 <__ctype_toupper_loc@plt>:
   12750:	add	ip, pc, #0, 12
   12754:	add	ip, ip, #331776	; 0x51000
   12758:	ldr	pc, [ip, #2564]!	; 0xa04

0001275c <__gmon_start__@plt>:
   1275c:	add	ip, pc, #0, 12
   12760:	add	ip, ip, #331776	; 0x51000
   12764:	ldr	pc, [ip, #2556]!	; 0x9fc

00012768 <__ctype_b_loc@plt>:
   12768:	add	ip, pc, #0, 12
   1276c:	add	ip, ip, #331776	; 0x51000
   12770:	ldr	pc, [ip, #2548]!	; 0x9f4

00012774 <getcwd@plt>:
   12774:	add	ip, pc, #0, 12
   12778:	add	ip, ip, #331776	; 0x51000
   1277c:	ldr	pc, [ip, #2540]!	; 0x9ec

00012780 <exit@plt>:
   12780:	add	ip, pc, #0, 12
   12784:	add	ip, ip, #331776	; 0x51000
   12788:	ldr	pc, [ip, #2532]!	; 0x9e4

0001278c <feof@plt>:
   1278c:	add	ip, pc, #0, 12
   12790:	add	ip, ip, #331776	; 0x51000
   12794:	ldr	pc, [ip, #2524]!	; 0x9dc

00012798 <getfilecon@plt>:
   12798:	add	ip, pc, #0, 12
   1279c:	add	ip, ip, #331776	; 0x51000
   127a0:	ldr	pc, [ip, #2516]!	; 0x9d4

000127a4 <bcmp@plt>:
   127a4:	add	ip, pc, #0, 12
   127a8:	add	ip, ip, #331776	; 0x51000
   127ac:	ldr	pc, [ip, #2508]!	; 0x9cc

000127b0 <strtoul@plt>:
   127b0:	add	ip, pc, #0, 12
   127b4:	add	ip, ip, #331776	; 0x51000
   127b8:	ldr	pc, [ip, #2500]!	; 0x9c4

000127bc <strlen@plt>:
   127bc:	add	ip, pc, #0, 12
   127c0:	add	ip, ip, #331776	; 0x51000
   127c4:	ldr	pc, [ip, #2492]!	; 0x9bc

000127c8 <strchr@plt>:
   127c8:	add	ip, pc, #0, 12
   127cc:	add	ip, ip, #331776	; 0x51000
   127d0:	ldr	pc, [ip, #2484]!	; 0x9b4

000127d4 <setenv@plt>:
   127d4:	add	ip, pc, #0, 12
   127d8:	add	ip, ip, #331776	; 0x51000
   127dc:	ldr	pc, [ip, #2476]!	; 0x9ac

000127e0 <openat64@plt>:
   127e0:	add	ip, pc, #0, 12
   127e4:	add	ip, ip, #331776	; 0x51000
   127e8:	ldr	pc, [ip, #2468]!	; 0x9a4

000127ec <memrchr@plt>:
   127ec:	add	ip, pc, #0, 12
   127f0:	add	ip, ip, #331776	; 0x51000
   127f4:	ldr	pc, [ip, #2460]!	; 0x99c

000127f8 <fprintf@plt>:
   127f8:	add	ip, pc, #0, 12
   127fc:	add	ip, ip, #331776	; 0x51000
   12800:	ldr	pc, [ip, #2452]!	; 0x994

00012804 <__errno_location@plt>:
   12804:	add	ip, pc, #0, 12
   12808:	add	ip, ip, #331776	; 0x51000
   1280c:	ldr	pc, [ip, #2444]!	; 0x98c

00012810 <iswalnum@plt>:
   12810:	add	ip, pc, #0, 12
   12814:	add	ip, ip, #331776	; 0x51000
   12818:	ldr	pc, [ip, #2436]!	; 0x984

0001281c <snprintf@plt>:
   1281c:	add	ip, pc, #0, 12
   12820:	add	ip, ip, #331776	; 0x51000
   12824:	ldr	pc, [ip, #2428]!	; 0x97c

00012828 <__cxa_atexit@plt>:
   12828:	add	ip, pc, #0, 12
   1282c:	add	ip, ip, #331776	; 0x51000
   12830:	ldr	pc, [ip, #2420]!	; 0x974

00012834 <memset@plt>:
   12834:	add	ip, pc, #0, 12
   12838:	add	ip, ip, #331776	; 0x51000
   1283c:	ldr	pc, [ip, #2412]!	; 0x96c

00012840 <putchar@plt>:
   12840:	add	ip, pc, #0, 12
   12844:	add	ip, ip, #331776	; 0x51000
   12848:	ldr	pc, [ip, #2404]!	; 0x964

0001284c <strncpy@plt>:
   1284c:	add	ip, pc, #0, 12
   12850:	add	ip, ip, #331776	; 0x51000
   12854:	ldr	pc, [ip, #2396]!	; 0x95c

00012858 <pthread_mutexattr_gettype@plt>:
   12858:	add	ip, pc, #0, 12
   1285c:	add	ip, ip, #331776	; 0x51000
   12860:	ldr	pc, [ip, #2388]!	; 0x954

00012864 <btowc@plt>:
   12864:	add	ip, pc, #0, 12
   12868:	add	ip, ip, #331776	; 0x51000
   1286c:	ldr	pc, [ip, #2380]!	; 0x94c

00012870 <strtod@plt>:
   12870:	add	ip, pc, #0, 12
   12874:	add	ip, ip, #331776	; 0x51000
   12878:	ldr	pc, [ip, #2372]!	; 0x944

0001287c <fileno@plt>:
   1287c:	add	ip, pc, #0, 12
   12880:	add	ip, ip, #331776	; 0x51000
   12884:	ldr	pc, [ip, #2364]!	; 0x93c

00012888 <difftime@plt>:
   12888:	add	ip, pc, #0, 12
   1288c:	add	ip, ip, #331776	; 0x51000
   12890:	ldr	pc, [ip, #2356]!	; 0x934

00012894 <memchr@plt>:
   12894:	add	ip, pc, #0, 12
   12898:	add	ip, ip, #331776	; 0x51000
   1289c:	ldr	pc, [ip, #2348]!	; 0x92c

000128a0 <setfilecon@plt>:
   128a0:	add	ip, pc, #0, 12
   128a4:	add	ip, ip, #331776	; 0x51000
   128a8:	ldr	pc, [ip, #2340]!	; 0x924

000128ac <access@plt>:
   128ac:	add	ip, pc, #0, 12
   128b0:	add	ip, ip, #331776	; 0x51000
   128b4:	ldr	pc, [ip, #2332]!	; 0x91c

000128b8 <fclose@plt>:
   128b8:	add	ip, pc, #0, 12
   128bc:	add	ip, ip, #331776	; 0x51000
   128c0:	ldr	pc, [ip, #2324]!	; 0x914

000128c4 <strnlen@plt>:
   128c4:	add	ip, pc, #0, 12
   128c8:	add	ip, ip, #331776	; 0x51000
   128cc:	ldr	pc, [ip, #2316]!	; 0x90c

000128d0 <fseeko64@plt>:
   128d0:	add	ip, pc, #0, 12
   128d4:	add	ip, ip, #331776	; 0x51000
   128d8:	ldr	pc, [ip, #2308]!	; 0x904

000128dc <endmntent@plt>:
   128dc:	add	ip, pc, #0, 12
   128e0:	add	ip, ip, #331776	; 0x51000
   128e4:	ldr	pc, [ip, #2300]!	; 0x8fc

000128e8 <fcntl64@plt>:
   128e8:	add	ip, pc, #0, 12
   128ec:	add	ip, ip, #331776	; 0x51000
   128f0:	ldr	pc, [ip, #2292]!	; 0x8f4

000128f4 <rpmatch@plt>:
   128f4:	add	ip, pc, #0, 12
   128f8:	add	ip, ip, #331776	; 0x51000
   128fc:	ldr	pc, [ip, #2284]!	; 0x8ec

00012900 <setlocale@plt>:
   12900:	add	ip, pc, #0, 12
   12904:	add	ip, ip, #331776	; 0x51000
   12908:	ldr	pc, [ip, #2276]!	; 0x8e4

0001290c <fork@plt>:
   1290c:	add	ip, pc, #0, 12
   12910:	add	ip, ip, #331776	; 0x51000
   12914:	ldr	pc, [ip, #2268]!	; 0x8dc

00012918 <endpwent@plt>:
   12918:	add	ip, pc, #0, 12
   1291c:	add	ip, ip, #331776	; 0x51000
   12920:	ldr	pc, [ip, #2260]!	; 0x8d4

00012924 <strrchr@plt>:
   12924:	add	ip, pc, #0, 12
   12928:	add	ip, ip, #331776	; 0x51000
   1292c:	ldr	pc, [ip, #2252]!	; 0x8cc

00012930 <vfprintf@plt>:
   12930:	add	ip, pc, #0, 12
   12934:	add	ip, ip, #331776	; 0x51000
   12938:	ldr	pc, [ip, #2244]!	; 0x8c4

0001293c <nl_langinfo@plt>:
   1293c:	add	ip, pc, #0, 12
   12940:	add	ip, ip, #331776	; 0x51000
   12944:	ldr	pc, [ip, #2236]!	; 0x8bc

00012948 <fputc@plt>:
   12948:	add	ip, pc, #0, 12
   1294c:	add	ip, ip, #331776	; 0x51000
   12950:	ldr	pc, [ip, #2228]!	; 0x8b4

00012954 <sscanf@plt>:
   12954:	add	ip, pc, #0, 12
   12958:	add	ip, ip, #331776	; 0x51000
   1295c:	ldr	pc, [ip, #2220]!	; 0x8ac

00012960 <localeconv@plt>:
   12960:	add	ip, pc, #0, 12
   12964:	add	ip, ip, #331776	; 0x51000
   12968:	ldr	pc, [ip, #2212]!	; 0x8a4

0001296c <sprintf@plt>:
   1296c:	add	ip, pc, #0, 12
   12970:	add	ip, ip, #331776	; 0x51000
   12974:	ldr	pc, [ip, #2204]!	; 0x89c

00012978 <readdir64@plt>:
   12978:	add	ip, pc, #0, 12
   1297c:	add	ip, ip, #331776	; 0x51000
   12980:	ldr	pc, [ip, #2196]!	; 0x894

00012984 <fdopendir@plt>:
   12984:	add	ip, pc, #0, 12
   12988:	add	ip, ip, #331776	; 0x51000
   1298c:	ldr	pc, [ip, #2188]!	; 0x88c

00012990 <timegm@plt>:
   12990:	add	ip, pc, #0, 12
   12994:	add	ip, ip, #331776	; 0x51000
   12998:	ldr	pc, [ip, #2180]!	; 0x884

0001299c <putc@plt>:
   1299c:	add	ip, pc, #0, 12
   129a0:	add	ip, ip, #331776	; 0x51000
   129a4:	ldr	pc, [ip, #2172]!	; 0x87c

000129a8 <dirfd@plt>:
   129a8:	add	ip, pc, #0, 12
   129ac:	add	ip, ip, #331776	; 0x51000
   129b0:	ldr	pc, [ip, #2164]!	; 0x874

000129b4 <fchdir@plt>:
   129b4:	add	ip, pc, #0, 12
   129b8:	add	ip, ip, #331776	; 0x51000
   129bc:	ldr	pc, [ip, #2156]!	; 0x86c

000129c0 <fopen64@plt>:
   129c0:	add	ip, pc, #0, 12
   129c4:	add	ip, ip, #331776	; 0x51000
   129c8:	ldr	pc, [ip, #2148]!	; 0x864

000129cc <qsort@plt>:
   129cc:	add	ip, pc, #0, 12
   129d0:	add	ip, ip, #331776	; 0x51000
   129d4:	ldr	pc, [ip, #2140]!	; 0x85c

000129d8 <freecon@plt>:
   129d8:	add	ip, pc, #0, 12
   129dc:	add	ip, ip, #331776	; 0x51000
   129e0:	ldr	pc, [ip, #2132]!	; 0x854

000129e4 <strpbrk@plt>:
   129e4:	add	ip, pc, #0, 12
   129e8:	add	ip, ip, #331776	; 0x51000
   129ec:	ldr	pc, [ip, #2124]!	; 0x84c

000129f0 <setmntent@plt>:
   129f0:	add	ip, pc, #0, 12
   129f4:	add	ip, ip, #331776	; 0x51000
   129f8:	ldr	pc, [ip, #2116]!	; 0x844

000129fc <bindtextdomain@plt>:
   129fc:	add	ip, pc, #0, 12
   12a00:	add	ip, ip, #331776	; 0x51000
   12a04:	ldr	pc, [ip, #2108]!	; 0x83c

00012a08 <getdelim@plt>:
   12a08:	add	ip, pc, #0, 12
   12a0c:	add	ip, ip, #331776	; 0x51000
   12a10:	ldr	pc, [ip, #2100]!	; 0x834

00012a14 <__xstat64@plt>:
   12a14:	add	ip, pc, #0, 12
   12a18:	add	ip, ip, #331776	; 0x51000
   12a1c:	ldr	pc, [ip, #2092]!	; 0x82c

00012a20 <isatty@plt>:
   12a20:	add	ip, pc, #0, 12
   12a24:	add	ip, ip, #331776	; 0x51000
   12a28:	ldr	pc, [ip, #2084]!	; 0x824

00012a2c <unsetenv@plt>:
   12a2c:	add	ip, pc, #0, 12
   12a30:	add	ip, ip, #331776	; 0x51000
   12a34:	ldr	pc, [ip, #2076]!	; 0x81c

00012a38 <towupper@plt>:
   12a38:	add	ip, pc, #0, 12
   12a3c:	add	ip, ip, #331776	; 0x51000
   12a40:	ldr	pc, [ip, #2068]!	; 0x814

00012a44 <fputs@plt>:
   12a44:	add	ip, pc, #0, 12
   12a48:	add	ip, ip, #331776	; 0x51000
   12a4c:	ldr	pc, [ip, #2060]!	; 0x80c

00012a50 <strncmp@plt>:
   12a50:	add	ip, pc, #0, 12
   12a54:	add	ip, ip, #331776	; 0x51000
   12a58:	ldr	pc, [ip, #2052]!	; 0x804

00012a5c <abort@plt>:
   12a5c:	add	ip, pc, #0, 12
   12a60:	add	ip, ip, #331776	; 0x51000
   12a64:	ldr	pc, [ip, #2044]!	; 0x7fc

00012a68 <close@plt>:
   12a68:	add	ip, pc, #0, 12
   12a6c:	add	ip, ip, #331776	; 0x51000
   12a70:	ldr	pc, [ip, #2036]!	; 0x7f4

00012a74 <__lxstat64@plt>:
   12a74:	add	ip, pc, #0, 12
   12a78:	add	ip, ip, #331776	; 0x51000
   12a7c:	ldr	pc, [ip, #2028]!	; 0x7ec

00012a80 <closedir@plt>:
   12a80:	add	ip, pc, #0, 12
   12a84:	add	ip, ip, #331776	; 0x51000
   12a88:	ldr	pc, [ip, #2020]!	; 0x7e4

00012a8c <getgrgid@plt>:
   12a8c:	add	ip, pc, #0, 12
   12a90:	add	ip, ip, #331776	; 0x51000
   12a94:	ldr	pc, [ip, #2012]!	; 0x7dc

00012a98 <getgrnam@plt>:
   12a98:	add	ip, pc, #0, 12
   12a9c:	add	ip, ip, #331776	; 0x51000
   12aa0:	ldr	pc, [ip, #2004]!	; 0x7d4

00012aa4 <strspn@plt>:
   12aa4:	add	ip, pc, #0, 12
   12aa8:	add	ip, ip, #331776	; 0x51000
   12aac:	ldr	pc, [ip, #1996]!	; 0x7cc

00012ab0 <__assert_fail@plt>:
   12ab0:	add	ip, pc, #0, 12
   12ab4:	add	ip, ip, #331776	; 0x51000
   12ab8:	ldr	pc, [ip, #1988]!	; 0x7c4

Disassembly of section .text:

00012ac0 <.text>:
   12ac0:	mov	fp, #0
   12ac4:	mov	lr, #0
   12ac8:	pop	{r1}		; (ldr r1, [sp], #4)
   12acc:	mov	r2, sp
   12ad0:	push	{r2}		; (str r2, [sp, #-4]!)
   12ad4:	push	{r0}		; (str r0, [sp, #-4]!)
   12ad8:	ldr	ip, [pc, #16]	; 12af0 <__assert_fail@plt+0x40>
   12adc:	push	{ip}		; (str ip, [sp, #-4]!)
   12ae0:	ldr	r0, [pc, #12]	; 12af4 <__assert_fail@plt+0x44>
   12ae4:	ldr	r3, [pc, #12]	; 12af8 <__assert_fail@plt+0x48>
   12ae8:	bl	126fc <__libc_start_main@plt>
   12aec:	bl	12a5c <abort@plt>
   12af0:	andeq	ip, r4, r8, lsr #31
   12af4:			; <UNDEFINED> instruction: 0x00012bb0
   12af8:	andeq	ip, r4, r8, asr #30
   12afc:	ldr	r3, [pc, #20]	; 12b18 <__assert_fail@plt+0x68>
   12b00:	ldr	r2, [pc, #20]	; 12b1c <__assert_fail@plt+0x6c>
   12b04:	add	r3, pc, r3
   12b08:	ldr	r2, [r3, r2]
   12b0c:	cmp	r2, #0
   12b10:	bxeq	lr
   12b14:	b	1275c <__gmon_start__@plt>
   12b18:	strdeq	r1, [r5], -r4
   12b1c:	andeq	r0, r0, r0, lsl #5
   12b20:	ldr	r0, [pc, #24]	; 12b40 <__assert_fail@plt+0x90>
   12b24:	ldr	r3, [pc, #24]	; 12b44 <__assert_fail@plt+0x94>
   12b28:	cmp	r3, r0
   12b2c:	bxeq	lr
   12b30:	ldr	r3, [pc, #16]	; 12b48 <__assert_fail@plt+0x98>
   12b34:	cmp	r3, #0
   12b38:	bxeq	lr
   12b3c:	bx	r3
   12b40:	andeq	r4, r6, ip, lsr r5
   12b44:	andeq	r4, r6, ip, lsr r5
   12b48:	andeq	r0, r0, r0
   12b4c:	ldr	r0, [pc, #36]	; 12b78 <__assert_fail@plt+0xc8>
   12b50:	ldr	r1, [pc, #36]	; 12b7c <__assert_fail@plt+0xcc>
   12b54:	sub	r1, r1, r0
   12b58:	asr	r1, r1, #2
   12b5c:	add	r1, r1, r1, lsr #31
   12b60:	asrs	r1, r1, #1
   12b64:	bxeq	lr
   12b68:	ldr	r3, [pc, #16]	; 12b80 <__assert_fail@plt+0xd0>
   12b6c:	cmp	r3, #0
   12b70:	bxeq	lr
   12b74:	bx	r3
   12b78:	andeq	r4, r6, ip, lsr r5
   12b7c:	andeq	r4, r6, ip, lsr r5
   12b80:	andeq	r0, r0, r0
   12b84:	push	{r4, lr}
   12b88:	ldr	r4, [pc, #24]	; 12ba8 <__assert_fail@plt+0xf8>
   12b8c:	ldrb	r3, [r4]
   12b90:	cmp	r3, #0
   12b94:	popne	{r4, pc}
   12b98:	bl	12b20 <__assert_fail@plt+0x70>
   12b9c:	mov	r3, #1
   12ba0:	strb	r3, [r4]
   12ba4:	pop	{r4, pc}
   12ba8:	andeq	r4, r6, r0, ror #10
   12bac:	b	12b4c <__assert_fail@plt+0x9c>
   12bb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bb4:	add	fp, sp, #28
   12bb8:	sub	sp, sp, #236	; 0xec
   12bbc:	mov	r5, r0
   12bc0:	ldr	r0, [r1]
   12bc4:	mov	r6, r1
   12bc8:	cmp	r0, #0
   12bcc:	movweq	r0, #53204	; 0xcfd4
   12bd0:	movteq	r0, #4
   12bd4:	bl	2d5f0 <__assert_fail@plt+0x1ab40>
   12bd8:	bl	18e00 <__assert_fail@plt+0x6350>
   12bdc:	movw	r8, #20040	; 0x4e48
   12be0:	mov	r0, #0
   12be4:	movt	r8, #6
   12be8:	strb	r0, [r8, #32]
   12bec:	str	r0, [r8, #28]
   12bf0:	strb	r0, [r8, #40]	; 0x28
   12bf4:	mvn	r0, #99	; 0x63
   12bf8:	str	r0, [r8, #16]
   12bfc:	bl	21c00 <__assert_fail@plt+0xf150>
   12c00:	cmp	r0, #0
   12c04:	beq	12c0c <__assert_fail@plt+0x15c>
   12c08:	bl	21834 <__assert_fail@plt+0xed84>
   12c0c:	movw	r0, #65386	; 0xff6a
   12c10:	movt	r0, #4
   12c14:	bl	19fd8 <__assert_fail@plt+0x7528>
   12c18:	cmp	r0, #0
   12c1c:	str	r0, [r8, #36]	; 0x24
   12c20:	beq	1308c <__assert_fail@plt+0x5dc>
   12c24:	movw	r4, #20084	; 0x4e74
   12c28:	movt	r4, #6
   12c2c:	mov	r0, r4
   12c30:	bl	19b6c <__assert_fail@plt+0x70bc>
   12c34:	movw	r1, #61103	; 0xeeaf
   12c38:	mov	r0, #6
   12c3c:	movt	r1, #4
   12c40:	bl	12900 <setlocale@plt>
   12c44:	movw	r7, #5849	; 0x16d9
   12c48:	movw	r1, #53253	; 0xd005
   12c4c:	movt	r7, #5
   12c50:	movt	r1, #4
   12c54:	mov	r0, r7
   12c58:	bl	129fc <bindtextdomain@plt>
   12c5c:	mov	r0, r7
   12c60:	bl	125b8 <textdomain@plt>
   12c64:	movw	r0, #14872	; 0x3a18
   12c68:	movt	r0, #2
   12c6c:	bl	4cfac <__assert_fail@plt+0x3a4fc>
   12c70:	cmp	r0, #0
   12c74:	bne	130a0 <__assert_fail@plt+0x5f0>
   12c78:	mov	r0, r5
   12c7c:	mov	r1, r6
   12c80:	bl	196b8 <__assert_fail@plt+0x6c08>
   12c84:	mov	r7, r0
   12c88:	ldr	r0, [r4, #44]	; 0x2c
   12c8c:	tst	r0, #2
   12c90:	movwne	r1, #37780	; 0x9394
   12c94:	movtne	r1, #1
   12c98:	strne	r1, [r4, #52]	; 0x34
   12c9c:	tst	r0, #128	; 0x80
   12ca0:	bne	13054 <__assert_fail@plt+0x5a4>
   12ca4:	mov	r0, r5
   12ca8:	mov	r1, r6
   12cac:	mov	r2, r7
   12cb0:	bl	16330 <__assert_fail@plt+0x3880>
   12cb4:	add	r6, r6, r7, lsl #2
   12cb8:	mov	r9, r0
   12cbc:	mov	r0, #0
   12cc0:	cmp	r7, r5
   12cc4:	bge	12cd8 <__assert_fail@plt+0x228>
   12cc8:	ldr	r0, [r6]
   12ccc:	mov	r1, #1
   12cd0:	bl	1962c <__assert_fail@plt+0x6b7c>
   12cd4:	eor	r0, r0, #1
   12cd8:	ldr	r5, [r4, #76]	; 0x4c
   12cdc:	cmp	r5, #0
   12ce0:	beq	12dcc <__assert_fail@plt+0x31c>
   12ce4:	cmp	r0, #0
   12ce8:	bne	130cc <__assert_fail@plt+0x61c>
   12cec:	movw	r1, #61466	; 0xf01a
   12cf0:	mov	r0, r5
   12cf4:	movt	r1, #4
   12cf8:	bl	123fc <strcmp@plt>
   12cfc:	cmp	r0, #0
   12d00:	beq	12df8 <__assert_fail@plt+0x348>
   12d04:	mov	r0, #0
   12d08:	mov	r1, r5
   12d0c:	bl	19ee0 <__assert_fail@plt+0x7430>
   12d10:	str	r0, [sp, #20]
   12d14:	ldr	r0, [r4, #76]	; 0x4c
   12d18:	movw	r1, #6016	; 0x1780
   12d1c:	movt	r1, #5
   12d20:	bl	129c0 <fopen64@plt>
   12d24:	cmp	r0, #0
   12d28:	beq	13178 <__assert_fail@plt+0x6c8>
   12d2c:	mov	r6, r0
   12d30:	bl	1287c <fileno@plt>
   12d34:	cmn	r0, #1
   12d38:	ble	131a8 <__assert_fail@plt+0x6f8>
   12d3c:	mov	r5, r0
   12d40:	ldrb	r0, [r4, #80]	; 0x50
   12d44:	cmp	r0, #0
   12d48:	beq	12dbc <__assert_fail@plt+0x30c>
   12d4c:	add	r2, sp, #128	; 0x80
   12d50:	mov	r0, #3
   12d54:	mov	r1, r5
   12d58:	bl	1260c <__fxstat64@plt>
   12d5c:	cmp	r0, #0
   12d60:	bne	12dbc <__assert_fail@plt+0x30c>
   12d64:	add	r2, sp, #24
   12d68:	mov	r0, #3
   12d6c:	mov	r1, #0
   12d70:	bl	1260c <__fxstat64@plt>
   12d74:	cmp	r0, #0
   12d78:	bne	12dbc <__assert_fail@plt+0x30c>
   12d7c:	ldr	r0, [sp, #120]	; 0x78
   12d80:	ldr	r2, [sp, #224]	; 0xe0
   12d84:	ldr	r1, [sp, #124]	; 0x7c
   12d88:	ldr	r3, [sp, #228]	; 0xe4
   12d8c:	eor	r1, r3, r1
   12d90:	eor	r0, r2, r0
   12d94:	orrs	r0, r0, r1
   12d98:	bne	12dbc <__assert_fail@plt+0x30c>
   12d9c:	ldr	r0, [sp, #24]
   12da0:	ldr	r2, [sp, #128]	; 0x80
   12da4:	ldr	r1, [sp, #28]
   12da8:	ldr	r3, [sp, #132]	; 0x84
   12dac:	eor	r1, r3, r1
   12db0:	eor	r0, r2, r0
   12db4:	orrs	r0, r0, r1
   12db8:	beq	131f4 <__assert_fail@plt+0x744>
   12dbc:	mov	r0, r5
   12dc0:	mov	r1, #1
   12dc4:	bl	2398c <__assert_fail@plt+0x10edc>
   12dc8:	b	12e34 <__assert_fail@plt+0x384>
   12dcc:	cmp	r0, #0
   12dd0:	beq	12fc0 <__assert_fail@plt+0x510>
   12dd4:	mov	r0, r6
   12dd8:	bl	2364c <__assert_fail@plt+0x10b9c>
   12ddc:	mov	r5, r0
   12de0:	mov	r0, #0
   12de4:	mov	r6, #0
   12de8:	str	r0, [sp, #20]
   12dec:	cmp	r5, #0
   12df0:	bne	12e48 <__assert_fail@plt+0x398>
   12df4:	b	13088 <__assert_fail@plt+0x5d8>
   12df8:	ldrb	r0, [r4, #80]	; 0x50
   12dfc:	cmp	r0, #0
   12e00:	bne	131c8 <__assert_fail@plt+0x718>
   12e04:	movw	r1, #53483	; 0xd0eb
   12e08:	mov	r0, #0
   12e0c:	mov	r2, #5
   12e10:	movt	r1, #4
   12e14:	bl	12564 <dcgettext@plt>
   12e18:	mov	r1, r0
   12e1c:	mov	r0, #0
   12e20:	bl	19ee0 <__assert_fail@plt+0x7430>
   12e24:	str	r0, [sp, #20]
   12e28:	movw	r0, #17752	; 0x4558
   12e2c:	movt	r0, #6
   12e30:	ldr	r6, [r0]
   12e34:	mov	r0, r6
   12e38:	bl	2367c <__assert_fail@plt+0x10bcc>
   12e3c:	mov	r5, r0
   12e40:	cmp	r5, #0
   12e44:	beq	13088 <__assert_fail@plt+0x5d8>
   12e48:	add	r1, sp, #128	; 0x80
   12e4c:	mov	r0, r5
   12e50:	str	r6, [sp, #12]
   12e54:	str	r9, [sp, #16]
   12e58:	bl	236b4 <__assert_fail@plt+0x10c04>
   12e5c:	cmp	r0, #0
   12e60:	beq	12f64 <__assert_fail@plt+0x4b4>
   12e64:	mov	sl, r0
   12e68:	mov	r6, #1
   12e6c:	add	r9, sp, #128	; 0x80
   12e70:	mov	r7, #1
   12e74:	ldrb	r1, [sl]
   12e78:	ldr	r0, [r4, #76]	; 0x4c
   12e7c:	cmp	r1, #0
   12e80:	bne	12ecc <__assert_fail@plt+0x41c>
   12e84:	b	12eec <__assert_fail@plt+0x43c>
   12e88:	mov	r0, sl
   12e8c:	bl	127bc <strlen@plt>
   12e90:	str	r0, [r8, #20]
   12e94:	mov	r0, sl
   12e98:	bl	13240 <__assert_fail@plt+0x790>
   12e9c:	cmp	r0, #0
   12ea0:	beq	12fe4 <__assert_fail@plt+0x534>
   12ea4:	mov	r0, r5
   12ea8:	mov	r1, r9
   12eac:	bl	236b4 <__assert_fail@plt+0x10c04>
   12eb0:	mov	sl, r0
   12eb4:	cmp	r0, #0
   12eb8:	beq	12f68 <__assert_fail@plt+0x4b8>
   12ebc:	ldrb	r1, [sl]
   12ec0:	ldr	r0, [r4, #76]	; 0x4c
   12ec4:	cmp	r1, #0
   12ec8:	beq	12eec <__assert_fail@plt+0x43c>
   12ecc:	cmp	r0, #0
   12ed0:	bne	12e88 <__assert_fail@plt+0x3d8>
   12ed4:	mov	r0, sl
   12ed8:	mov	r1, #1
   12edc:	bl	1962c <__assert_fail@plt+0x6b7c>
   12ee0:	cmp	r0, #0
   12ee4:	beq	12e88 <__assert_fail@plt+0x3d8>
   12ee8:	b	12ff0 <__assert_fail@plt+0x540>
   12eec:	cmp	r0, #0
   12ef0:	beq	12f34 <__assert_fail@plt+0x484>
   12ef4:	mov	r0, r5
   12ef8:	bl	2376c <__assert_fail@plt+0x10cbc>
   12efc:	movw	r1, #53754	; 0xd1fa
   12f00:	mov	r7, r0
   12f04:	mov	r0, #0
   12f08:	mov	r2, #5
   12f0c:	movt	r1, #4
   12f10:	bl	12564 <dcgettext@plt>
   12f14:	ldr	r3, [sp, #20]
   12f18:	movw	r2, #53743	; 0xd1ef
   12f1c:	str	r0, [sp, #4]
   12f20:	mov	r0, #0
   12f24:	mov	r1, #0
   12f28:	str	r7, [sp]
   12f2c:	movt	r2, #4
   12f30:	b	12f54 <__assert_fail@plt+0x4a4>
   12f34:	mov	r0, #0
   12f38:	mov	r1, sl
   12f3c:	bl	19ee0 <__assert_fail@plt+0x7430>
   12f40:	movw	r2, #12871	; 0x3247
   12f44:	mov	r3, r0
   12f48:	mov	r0, #0
   12f4c:	mov	r1, #2
   12f50:	movt	r2, #5
   12f54:	bl	1269c <error@plt>
   12f58:	mov	r7, #0
   12f5c:	str	r6, [r8, #28]
   12f60:	b	12ea4 <__assert_fail@plt+0x3f4>
   12f64:	mov	r7, #1
   12f68:	ldr	r0, [sp, #128]	; 0x80
   12f6c:	ldr	r9, [sp, #16]
   12f70:	cmp	r0, #2
   12f74:	beq	12ff4 <__assert_fail@plt+0x544>
   12f78:	cmp	r0, #4
   12f7c:	bne	13080 <__assert_fail@plt+0x5d0>
   12f80:	bl	12804 <__errno_location@plt>
   12f84:	movw	r1, #53688	; 0xd1b8
   12f88:	ldr	r6, [r0]
   12f8c:	mov	r0, #0
   12f90:	mov	r2, #5
   12f94:	mov	r7, #0
   12f98:	movt	r1, #4
   12f9c:	bl	12564 <dcgettext@plt>
   12fa0:	ldr	r3, [sp, #20]
   12fa4:	mov	r2, r0
   12fa8:	mov	r0, #0
   12fac:	mov	r1, r6
   12fb0:	bl	1269c <error@plt>
   12fb4:	mov	r0, #1
   12fb8:	str	r0, [r8, #28]
   12fbc:	b	12ff4 <__assert_fail@plt+0x544>
   12fc0:	mov	r0, #46	; 0x2e
   12fc4:	strh	r0, [sp, #128]	; 0x80
   12fc8:	add	r0, sp, #128	; 0x80
   12fcc:	bl	13240 <__assert_fail@plt+0x790>
   12fd0:	cmp	r0, #0
   12fd4:	bne	1303c <__assert_fail@plt+0x58c>
   12fd8:	ldr	r0, [r8, #28]
   12fdc:	sub	sp, fp, #28
   12fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fe4:	ldr	r9, [sp, #16]
   12fe8:	mov	r7, #0
   12fec:	b	12ff4 <__assert_fail@plt+0x544>
   12ff0:	ldr	r9, [sp, #16]
   12ff4:	mov	r0, r5
   12ff8:	bl	23790 <__assert_fail@plt+0x10ce0>
   12ffc:	tst	r7, #1
   13000:	ldrne	r0, [r4, #76]	; 0x4c
   13004:	cmpne	r0, #0
   13008:	bne	13018 <__assert_fail@plt+0x568>
   1300c:	tst	r7, #1
   13010:	beq	12fd8 <__assert_fail@plt+0x528>
   13014:	b	1303c <__assert_fail@plt+0x58c>
   13018:	ldr	r4, [sp, #12]
   1301c:	mov	r0, r4
   13020:	bl	124a4 <ferror@plt>
   13024:	cmp	r0, #0
   13028:	bne	13150 <__assert_fail@plt+0x6a0>
   1302c:	mov	r0, r4
   13030:	bl	128b8 <fclose@plt>
   13034:	cmp	r0, #0
   13038:	bne	13150 <__assert_fail@plt+0x6a0>
   1303c:	mov	r0, r9
   13040:	bl	1557c <__assert_fail@plt+0x2acc>
   13044:	bl	18eac <__assert_fail@plt+0x63fc>
   13048:	ldr	r0, [r8, #28]
   1304c:	sub	sp, fp, #28
   13050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13054:	movw	r0, #17744	; 0x4550
   13058:	movt	r0, #6
   1305c:	ldr	r9, [r0]
   13060:	add	r0, r4, #28
   13064:	bl	12558 <ctime@plt>
   13068:	movw	r1, #53312	; 0xd040
   1306c:	mov	r2, r0
   13070:	mov	r0, r9
   13074:	movt	r1, #4
   13078:	bl	127f8 <fprintf@plt>
   1307c:	b	12ca4 <__assert_fail@plt+0x1f4>
   13080:	cmp	r0, #3
   13084:	bne	13130 <__assert_fail@plt+0x680>
   13088:	bl	30c24 <__assert_fail@plt+0x1e174>
   1308c:	bl	12804 <__errno_location@plt>
   13090:	ldr	r4, [r0]
   13094:	movw	r1, #53209	; 0xcfd9
   13098:	movt	r1, #4
   1309c:	b	130b0 <__assert_fail@plt+0x600>
   130a0:	bl	12804 <__errno_location@plt>
   130a4:	ldr	r4, [r0]
   130a8:	movw	r1, #53277	; 0xd01d
   130ac:	movt	r1, #4
   130b0:	mov	r0, #0
   130b4:	mov	r2, #5
   130b8:	bl	12564 <dcgettext@plt>
   130bc:	mov	r2, r0
   130c0:	mov	r0, #1
   130c4:	mov	r1, r4
   130c8:	bl	1269c <error@plt>
   130cc:	movw	r1, #53331	; 0xd053
   130d0:	mov	r0, #0
   130d4:	mov	r2, #5
   130d8:	movt	r1, #4
   130dc:	bl	12564 <dcgettext@plt>
   130e0:	ldr	r1, [r6]
   130e4:	mov	r4, r0
   130e8:	mov	r0, #0
   130ec:	bl	19ee0 <__assert_fail@plt+0x7430>
   130f0:	mov	r3, r0
   130f4:	mov	r0, #0
   130f8:	mov	r1, #0
   130fc:	mov	r2, r4
   13100:	bl	1269c <error@plt>
   13104:	movw	r1, #53348	; 0xd064
   13108:	mov	r0, #0
   1310c:	mov	r2, #5
   13110:	movt	r1, #4
   13114:	bl	12564 <dcgettext@plt>
   13118:	movw	r2, #12871	; 0x3247
   1311c:	mov	r3, r0
   13120:	movt	r2, #5
   13124:	mov	r0, #1
   13128:	mov	r1, #0
   1312c:	bl	1269c <error@plt>
   13130:	movw	r0, #53703	; 0xd1c7
   13134:	movw	r1, #53527	; 0xd117
   13138:	movw	r3, #53537	; 0xd121
   1313c:	movw	r2, #675	; 0x2a3
   13140:	movt	r0, #4
   13144:	movt	r1, #4
   13148:	movt	r3, #4
   1314c:	bl	12ab0 <__assert_fail@plt>
   13150:	movw	r1, #53784	; 0xd218
   13154:	mov	r0, #0
   13158:	mov	r2, #5
   1315c:	movt	r1, #4
   13160:	bl	12564 <dcgettext@plt>
   13164:	ldr	r3, [sp, #20]
   13168:	mov	r2, r0
   1316c:	mov	r0, #1
   13170:	mov	r1, #0
   13174:	bl	1269c <error@plt>
   13178:	bl	12804 <__errno_location@plt>
   1317c:	movw	r1, #53500	; 0xd0fc
   13180:	ldr	r4, [r0]
   13184:	mov	r0, #0
   13188:	mov	r2, #5
   1318c:	movt	r1, #4
   13190:	bl	12564 <dcgettext@plt>
   13194:	ldr	r3, [sp, #20]
   13198:	mov	r2, r0
   1319c:	mov	r0, #1
   131a0:	mov	r1, r4
   131a4:	bl	1269c <error@plt>
   131a8:	movw	r0, #54006	; 0xd2f6
   131ac:	movw	r1, #53527	; 0xd117
   131b0:	movw	r3, #53537	; 0xd121
   131b4:	movw	r2, #610	; 0x262
   131b8:	movt	r0, #4
   131bc:	movt	r1, #4
   131c0:	movt	r3, #4
   131c4:	bl	12ab0 <__assert_fail@plt>
   131c8:	movw	r1, #53399	; 0xd097
   131cc:	mov	r0, #0
   131d0:	mov	r2, #5
   131d4:	movt	r1, #4
   131d8:	bl	12564 <dcgettext@plt>
   131dc:	movw	r2, #10780	; 0x2a1c
   131e0:	mov	r3, r0
   131e4:	movt	r2, #5
   131e8:	mov	r0, #1
   131ec:	mov	r1, #0
   131f0:	bl	1269c <error@plt>
   131f4:	movw	r1, #53589	; 0xd155
   131f8:	mov	r0, #0
   131fc:	mov	r2, #5
   13200:	movt	r1, #4
   13204:	bl	12564 <dcgettext@plt>
   13208:	mov	r3, r0
   1320c:	ldr	r0, [sp, #20]
   13210:	movw	r2, #53581	; 0xd14d
   13214:	movt	r2, #4
   13218:	str	r0, [sp]
   1321c:	mov	r0, #1
   13220:	mov	r1, #0
   13224:	bl	1269c <error@plt>
   13228:	movw	r1, #17040	; 0x4290
   1322c:	movt	r1, #6
   13230:	ldr	r1, [r1]
   13234:	str	r1, [r0]
   13238:	mov	r0, #1
   1323c:	bx	lr
   13240:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13244:	add	fp, sp, #28
   13248:	sub	sp, sp, #268	; 0x10c
   1324c:	mov	r9, r0
   13250:	bl	127bc <strlen@plt>
   13254:	movw	r3, #17040	; 0x4290
   13258:	movw	sl, #20040	; 0x4e48
   1325c:	movt	r3, #6
   13260:	movt	sl, #6
   13264:	ldr	r1, [r3]
   13268:	str	r0, [sl, #20]
   1326c:	tst	r1, #512	; 0x200
   13270:	beq	13288 <__assert_fail@plt+0x7d8>
   13274:	ldr	r2, [r3, #4]
   13278:	mvn	r0, #99	; 0x63
   1327c:	str	r0, [sl, #16]
   13280:	cmn	r2, #1
   13284:	strle	r0, [r3, #4]
   13288:	movw	r5, #20084	; 0x4e74
   1328c:	mov	r0, #0
   13290:	movt	r5, #6
   13294:	str	r0, [sp, #52]	; 0x34
   13298:	str	r9, [sp, #48]	; 0x30
   1329c:	ldr	r0, [r5, #48]	; 0x30
   132a0:	cmp	r0, #0
   132a4:	beq	132c8 <__assert_fail@plt+0x818>
   132a8:	cmp	r0, #1
   132ac:	beq	132c0 <__assert_fail@plt+0x810>
   132b0:	cmp	r0, #2
   132b4:	bne	132d4 <__assert_fail@plt+0x824>
   132b8:	mov	r0, #17
   132bc:	b	132cc <__assert_fail@plt+0x81c>
   132c0:	mov	r0, #3
   132c4:	b	132cc <__assert_fail@plt+0x81c>
   132c8:	mov	r0, #16
   132cc:	orr	r1, r1, r0
   132d0:	str	r1, [r3]
   132d4:	ldrb	r0, [r5, #13]
   132d8:	mov	r2, #0
   132dc:	mov	r8, #0
   132e0:	cmp	r0, #0
   132e4:	add	r0, sp, #48	; 0x30
   132e8:	orrne	r1, r1, #64	; 0x40
   132ec:	strne	r1, [r3]
   132f0:	bl	329e0 <__assert_fail@plt+0x1ff30>
   132f4:	mov	r6, r0
   132f8:	bl	12804 <__errno_location@plt>
   132fc:	mov	r4, r0
   13300:	cmp	r6, #0
   13304:	beq	13ab0 <__assert_fail@plt+0x1000>
   13308:	mov	r0, r6
   1330c:	str	r9, [sp, #20]
   13310:	str	r8, [r4]
   13314:	bl	33520 <__assert_fail@plt+0x20a70>
   13318:	movw	r7, #17040	; 0x4290
   1331c:	cmp	r0, #0
   13320:	str	r4, [sp, #40]	; 0x28
   13324:	movt	r7, #6
   13328:	beq	13a78 <__assert_fail@plt+0xfc8>
   1332c:	mov	r9, r0
   13330:	add	r0, sp, #56	; 0x38
   13334:	mov	r4, #0
   13338:	str	r6, [sp, #36]	; 0x24
   1333c:	add	r8, r0, #96	; 0x60
   13340:	mov	r0, #-2147483648	; 0x80000000
   13344:	str	r0, [sp, #44]	; 0x2c
   13348:	str	r8, [sp, #32]
   1334c:	ldrb	r0, [sl, #32]
   13350:	cmp	r0, #0
   13354:	bne	133a0 <__assert_fail@plt+0x8f0>
   13358:	b	133b4 <__assert_fail@plt+0x904>
   1335c:	ldrh	r0, [r9, #56]	; 0x38
   13360:	ldr	r8, [sp, #32]
   13364:	movw	r7, #17040	; 0x4290
   13368:	mov	r4, #0
   1336c:	movt	r7, #6
   13370:	cmp	r0, #6
   13374:	strbeq	r4, [sl, #24]
   13378:	ldr	r0, [sp, #40]	; 0x28
   1337c:	str	r4, [r0]
   13380:	mov	r0, r6
   13384:	bl	33520 <__assert_fail@plt+0x20a70>
   13388:	mov	r9, r0
   1338c:	cmp	r0, #0
   13390:	beq	13a78 <__assert_fail@plt+0xfc8>
   13394:	ldrb	r0, [sl, #32]
   13398:	cmp	r0, #0
   1339c:	beq	133b4 <__assert_fail@plt+0x904>
   133a0:	ldr	r0, [r9, #48]	; 0x30
   133a4:	ldr	r1, [sp, #44]	; 0x2c
   133a8:	cmp	r0, r1
   133ac:	beq	133b4 <__assert_fail@plt+0x904>
   133b0:	bl	18c68 <__assert_fail@plt+0x61b8>
   133b4:	ldr	r0, [r9, #48]	; 0x30
   133b8:	strb	r4, [sl, #4]
   133bc:	strb	r4, [sl, #40]	; 0x28
   133c0:	str	r0, [sp, #44]	; 0x2c
   133c4:	ldr	r0, [r9, #80]	; 0x50
   133c8:	cmp	r0, #0
   133cc:	str	r0, [sl, #8]
   133d0:	movwne	r0, #1
   133d4:	strb	r0, [sl, #5]
   133d8:	ldrb	r0, [r5, #44]	; 0x2c
   133dc:	tst	r0, #4
   133e0:	bne	13468 <__assert_fail@plt+0x9b8>
   133e4:	ldrh	r0, [r9, #56]	; 0x38
   133e8:	cmp	r0, #6
   133ec:	bne	13550 <__assert_fail@plt+0xaa0>
   133f0:	ldrb	r0, [r7, #1]
   133f4:	tst	r0, #2
   133f8:	beq	13568 <__assert_fail@plt+0xab8>
   133fc:	ldr	r0, [r7, #4]
   13400:	cmp	r0, #0
   13404:	bmi	13568 <__assert_fail@plt+0xab8>
   13408:	bl	12a68 <close@plt>
   1340c:	mvn	r0, #0
   13410:	str	r0, [r7, #4]
   13414:	ldrb	r0, [r7, #1]
   13418:	tst	r0, #2
   1341c:	beq	13574 <__assert_fail@plt+0xac4>
   13420:	ldr	r0, [r6, #32]
   13424:	cmn	r0, #100	; 0x64
   13428:	beq	13434 <__assert_fail@plt+0x984>
   1342c:	cmn	r0, #1
   13430:	ble	13b60 <__assert_fail@plt+0x10b0>
   13434:	ldr	r1, [r7, #4]
   13438:	str	r0, [sl, #16]
   1343c:	cmn	r1, #1
   13440:	bgt	13574 <__assert_fail@plt+0xac4>
   13444:	cmn	r0, #100	; 0x64
   13448:	bne	13454 <__assert_fail@plt+0x9a4>
   1344c:	mvn	r0, #99	; 0x63
   13450:	b	13460 <__assert_fail@plt+0x9b0>
   13454:	cmp	r0, #0
   13458:	bmi	13bc0 <__assert_fail@plt+0x1110>
   1345c:	bl	239ec <__assert_fail@plt+0x10f3c>
   13460:	str	r0, [r7, #4]
   13464:	b	13574 <__assert_fail@plt+0xac4>
   13468:	movw	r0, #17744	; 0x4550
   1346c:	ldr	r2, [r9, #28]
   13470:	ldr	r1, [r5, #72]	; 0x48
   13474:	movt	r0, #6
   13478:	ldr	r6, [r0]
   1347c:	mov	r0, #0
   13480:	bl	2efe4 <__assert_fail@plt+0x1c534>
   13484:	ldrh	r2, [r9, #56]	; 0x38
   13488:	str	r0, [sp, #28]
   1348c:	sub	r0, r2, #1
   13490:	uxth	r1, r0
   13494:	cmp	r1, #14
   13498:	bcs	134b4 <__assert_fail@plt+0xa04>
   1349c:	movw	r1, #54668	; 0xd58c
   134a0:	sxth	r0, r0
   134a4:	movt	r1, #4
   134a8:	ldr	r0, [r1, r0, lsl #2]
   134ac:	str	r0, [sp, #24]
   134b0:	b	134d0 <__assert_fail@plt+0xa20>
   134b4:	movw	r4, #17761	; 0x4561
   134b8:	movw	r1, #54466	; 0xd4c2
   134bc:	movt	r4, #6
   134c0:	movt	r1, #4
   134c4:	mov	r0, r4
   134c8:	bl	1296c <sprintf@plt>
   134cc:	str	r4, [sp, #24]
   134d0:	ldr	r1, [r5, #72]	; 0x48
   134d4:	ldr	r2, [r9, #28]
   134d8:	ldr	r4, [r7, #8]
   134dc:	ldr	r5, [r9, #48]	; 0x30
   134e0:	mov	r0, #1
   134e4:	bl	2efe4 <__assert_fail@plt+0x1c534>
   134e8:	mov	r8, r0
   134ec:	movw	r0, #20084	; 0x4e74
   134f0:	ldr	r2, [r9, #24]
   134f4:	movt	r0, #6
   134f8:	ldr	r1, [r0, #72]	; 0x48
   134fc:	mov	r0, #2
   13500:	bl	2efe4 <__assert_fail@plt+0x1c534>
   13504:	ldr	r2, [sp, #28]
   13508:	ldr	r3, [sp, #24]
   1350c:	movw	r1, #54014	; 0xd2fe
   13510:	str	r5, [sp]
   13514:	movw	r5, #20084	; 0x4e74
   13518:	movw	r7, #17040	; 0x4290
   1351c:	stmib	sp, {r4, r8}
   13520:	str	r0, [sp, #12]
   13524:	mov	r0, r6
   13528:	movt	r1, #4
   1352c:	movt	r5, #6
   13530:	movt	r7, #6
   13534:	bl	127f8 <fprintf@plt>
   13538:	ldr	r6, [sp, #36]	; 0x24
   1353c:	ldr	r8, [sp, #32]
   13540:	mov	r4, #0
   13544:	ldrh	r0, [r9, #56]	; 0x38
   13548:	cmp	r0, #6
   1354c:	beq	133f0 <__assert_fail@plt+0x940>
   13550:	ldr	r0, [r9, #48]	; 0x30
   13554:	cmp	r0, #0
   13558:	beq	133f0 <__assert_fail@plt+0x940>
   1355c:	ldr	r1, [r7, #8]
   13560:	cmp	r0, r1
   13564:	bgt	133f0 <__assert_fail@plt+0x940>
   13568:	ldrb	r0, [r7, #1]
   1356c:	tst	r0, #2
   13570:	bne	13420 <__assert_fail@plt+0x970>
   13574:	ldr	r0, [r9, #48]	; 0x30
   13578:	str	r0, [r7, #8]
   1357c:	ldrd	r2, [r9, #160]	; 0xa0
   13580:	strd	r2, [r8]
   13584:	ldrh	r1, [r9, #56]	; 0x38
   13588:	sub	r1, r1, #2
   1358c:	cmp	r1, #11
   13590:	bhi	136b8 <__assert_fail@plt+0xc08>
   13594:	add	r2, pc, #0
   13598:	ldr	pc, [r2, r1, lsl #2]
   1359c:	andeq	r3, r1, ip, asr #11
   135a0:			; <UNDEFINED> instruction: 0x000136b8
   135a4:	andeq	r3, r1, r8, lsl r6
   135a8:			; <UNDEFINED> instruction: 0x000136b8
   135ac:			; <UNDEFINED> instruction: 0x000136b8
   135b0:	andeq	r3, r1, r4, ror r6
   135b4:			; <UNDEFINED> instruction: 0x000136b8
   135b8:			; <UNDEFINED> instruction: 0x000136b8
   135bc:	andeq	r3, r1, r4, lsr r6
   135c0:			; <UNDEFINED> instruction: 0x000136b8
   135c4:			; <UNDEFINED> instruction: 0x000136b8
   135c8:	andeq	r3, r1, r0, lsl #13
   135cc:	ldr	r0, [r9, #80]	; 0x50
   135d0:	and	r0, r0, #61440	; 0xf000
   135d4:	cmp	r0, #40960	; 0xa000
   135d8:	bne	13734 <__assert_fail@plt+0xc84>
   135dc:	movw	r1, #54471	; 0xd4c7
   135e0:	mov	r0, #0
   135e4:	mov	r2, #5
   135e8:	movt	r1, #4
   135ec:	bl	12564 <dcgettext@plt>
   135f0:	ldr	r1, [r9, #28]
   135f4:	mov	r4, r0
   135f8:	mov	r0, #0
   135fc:	bl	19ee0 <__assert_fail@plt+0x7430>
   13600:	mov	r3, r0
   13604:	mov	r0, #0
   13608:	mov	r1, #0
   1360c:	mov	r2, r4
   13610:	bl	1269c <error@plt>
   13614:	b	139f4 <__assert_fail@plt+0xf44>
   13618:	ldr	r1, [r9, #28]
   1361c:	ldr	r0, [r9, #32]
   13620:	bl	18b28 <__assert_fail@plt+0x6078>
   13624:	ldrb	r0, [r5]
   13628:	cmp	r0, #0
   1362c:	bne	13378 <__assert_fail@plt+0x8c8>
   13630:	b	136b8 <__assert_fail@plt+0xc08>
   13634:	cmp	r0, #0
   13638:	beq	13674 <__assert_fail@plt+0xbc4>
   1363c:	ldr	r0, [r9, #24]
   13640:	ldr	r2, [r5, #52]	; 0x34
   13644:	sub	r1, fp, #136	; 0x88
   13648:	blx	r2
   1364c:	cmp	r0, #0
   13650:	beq	13664 <__assert_fail@plt+0xbb4>
   13654:	ldr	r0, [sp, #40]	; 0x28
   13658:	ldr	r0, [r0]
   1365c:	cmp	r0, #40	; 0x28
   13660:	beq	136a8 <__assert_fail@plt+0xbf8>
   13664:	ldr	r1, [r9, #28]
   13668:	ldr	r0, [r9, #32]
   1366c:	bl	18b28 <__assert_fail@plt+0x6078>
   13670:	b	136b8 <__assert_fail@plt+0xc08>
   13674:	ldr	r1, [r9, #28]
   13678:	ldr	r0, [r9, #32]
   1367c:	b	136b0 <__assert_fail@plt+0xc00>
   13680:	ldr	r0, [r9, #24]
   13684:	ldr	r2, [r5, #52]	; 0x34
   13688:	sub	r1, fp, #136	; 0x88
   1368c:	blx	r2
   13690:	cmp	r0, #0
   13694:	beq	136b8 <__assert_fail@plt+0xc08>
   13698:	ldr	r0, [sp, #40]	; 0x28
   1369c:	ldr	r0, [r0]
   136a0:	cmp	r0, #40	; 0x28
   136a4:	bne	136b8 <__assert_fail@plt+0xc08>
   136a8:	ldr	r1, [r9, #28]
   136ac:	mov	r0, #40	; 0x28
   136b0:	bl	18b28 <__assert_fail@plt+0x6078>
   136b4:	b	13378 <__assert_fail@plt+0x8c8>
   136b8:	ldrh	r1, [r9, #56]	; 0x38
   136bc:	bic	r0, r1, #1
   136c0:	cmp	r0, #10
   136c4:	bne	136fc <__assert_fail@plt+0xc4c>
   136c8:	ldrb	r0, [sl, #4]
   136cc:	cmp	r0, #0
   136d0:	bne	13b80 <__assert_fail@plt+0x10d0>
   136d4:	ldr	r0, [sl, #8]
   136d8:	cmp	r1, #11
   136dc:	cmpne	r0, #0
   136e0:	bne	13ba0 <__assert_fail@plt+0x10f0>
   136e4:	str	r0, [fp, #-136]	; 0xffffff78
   136e8:	ldr	r1, [r9, #48]	; 0x30
   136ec:	cmp	r0, #0
   136f0:	str	r1, [sl]
   136f4:	bne	137f0 <__assert_fail@plt+0xd40>
   136f8:	b	13848 <__assert_fail@plt+0xd98>
   136fc:	movw	r0, #257	; 0x101
   13700:	add	r1, r9, #64	; 0x40
   13704:	mov	r2, #104	; 0x68
   13708:	strh	r0, [sl, #4]
   1370c:	add	r0, sp, #56	; 0x38
   13710:	bl	124e0 <memcpy@plt>
   13714:	ldr	r0, [sp, #72]	; 0x48
   13718:	cmp	r0, #0
   1371c:	str	r0, [sl, #8]
   13720:	str	r0, [fp, #-136]	; 0xffffff78
   13724:	beq	1379c <__assert_fail@plt+0xcec>
   13728:	ldr	r0, [r9, #48]	; 0x30
   1372c:	str	r0, [sl]
   13730:	b	137f0 <__assert_fail@plt+0xd40>
   13734:	movw	r1, #54592	; 0xd540
   13738:	mov	r0, #0
   1373c:	mov	r2, #5
   13740:	movt	r1, #4
   13744:	bl	12564 <dcgettext@plt>
   13748:	ldr	r1, [r9, #28]
   1374c:	mov	r7, r0
   13750:	mov	r0, #0
   13754:	bl	19ee0 <__assert_fail@plt+0x7430>
   13758:	mov	r8, r0
   1375c:	ldr	r0, [r9]
   13760:	ldr	r1, [r5, #72]	; 0x48
   13764:	ldr	r4, [r0, #40]	; 0x28
   13768:	cmp	r4, #0
   1376c:	beq	139bc <__assert_fail@plt+0xf0c>
   13770:	ldr	r5, [r0, #28]
   13774:	mov	r0, #0
   13778:	ldrb	r6, [r5, r4]
   1377c:	strb	r0, [r5, r4]
   13780:	mov	r0, #1
   13784:	mov	r2, r5
   13788:	bl	2efe4 <__assert_fail@plt+0x1c534>
   1378c:	strb	r6, [r5, r4]
   13790:	movw	r5, #20084	; 0x4e74
   13794:	movt	r5, #6
   13798:	b	139cc <__assert_fail@plt+0xf1c>
   1379c:	movw	r1, #54220	; 0xd3cc
   137a0:	mov	r0, #0
   137a4:	mov	r2, #5
   137a8:	movt	r1, #4
   137ac:	bl	12564 <dcgettext@plt>
   137b0:	ldr	r1, [r5, #72]	; 0x48
   137b4:	ldr	r2, [r9, #28]
   137b8:	mov	r4, r0
   137bc:	mov	r0, #0
   137c0:	bl	2efe4 <__assert_fail@plt+0x1c534>
   137c4:	mov	r3, r0
   137c8:	mov	r2, r4
   137cc:	mov	r0, #0
   137d0:	mov	r1, #0
   137d4:	mov	r4, #0
   137d8:	bl	1269c <error@plt>
   137dc:	ldr	r0, [fp, #-136]	; 0xffffff78
   137e0:	ldr	r1, [r9, #48]	; 0x30
   137e4:	cmp	r0, #0
   137e8:	str	r1, [sl]
   137ec:	beq	13848 <__assert_fail@plt+0xd98>
   137f0:	ldr	r1, [r9, #28]
   137f4:	add	r2, r9, #168	; 0xa8
   137f8:	sub	r0, fp, #136	; 0x88
   137fc:	add	r3, sp, #56	; 0x38
   13800:	str	r4, [sp]
   13804:	bl	194e0 <__assert_fail@plt+0x6a30>
   13808:	cmp	r0, #0
   1380c:	beq	13378 <__assert_fail@plt+0x8c8>
   13810:	ldr	r1, [fp, #-136]	; 0xffffff78
   13814:	ldrh	r0, [r9, #56]	; 0x38
   13818:	and	r1, r1, #61440	; 0xf000
   1381c:	cmp	r1, #16384	; 0x4000
   13820:	bne	1384c <__assert_fail@plt+0xd9c>
   13824:	mov	r4, #1
   13828:	cmp	r0, #11
   1382c:	bne	13868 <__assert_fail@plt+0xdb8>
   13830:	mov	r0, r6
   13834:	mov	r1, r9
   13838:	mov	r2, #1
   1383c:	bl	34d80 <__assert_fail@plt+0x222d0>
   13840:	mov	r4, #0
   13844:	b	13378 <__assert_fail@plt+0x8c8>
   13848:	ldrh	r0, [r9, #56]	; 0x38
   1384c:	cmp	r0, #6
   13850:	bhi	13a04 <__assert_fail@plt+0xf54>
   13854:	mov	r1, #1
   13858:	mov	r2, #70	; 0x46
   1385c:	mov	r4, #1
   13860:	tst	r2, r1, lsl r0
   13864:	moveq	r4, #0
   13868:	ldr	r2, [r5, #4]
   1386c:	mov	r1, #0
   13870:	cmp	r2, #0
   13874:	bmi	138ac <__assert_fail@plt+0xdfc>
   13878:	ldr	r3, [r9, #48]	; 0x30
   1387c:	cmp	r3, r2
   13880:	blt	138ac <__assert_fail@plt+0xdfc>
   13884:	mov	r0, r6
   13888:	mov	r1, r9
   1388c:	mov	r2, #4
   13890:	bl	34d80 <__assert_fail@plt+0x222d0>
   13894:	ldr	r0, [r5, #4]
   13898:	ldr	r1, [r9, #48]	; 0x30
   1389c:	cmp	r1, r0
   138a0:	ldrh	r0, [r9, #56]	; 0x38
   138a4:	mov	r1, #0
   138a8:	movwgt	r1, #1
   138ac:	ldrb	r3, [r5]
   138b0:	subs	r2, r0, #6
   138b4:	sub	r0, r0, #1
   138b8:	mov	r8, #1
   138bc:	clz	r0, r0
   138c0:	movwne	r2, #1
   138c4:	lsr	r0, r0, #5
   138c8:	clz	r3, r3
   138cc:	lsr	r3, r3, #5
   138d0:	orr	r2, r2, r3
   138d4:	and	r0, r0, r3
   138d8:	eor	r0, r0, r2
   138dc:	cmp	r0, #1
   138e0:	bne	1394c <__assert_fail@plt+0xe9c>
   138e4:	ldr	r0, [r5, #8]
   138e8:	ldr	r2, [r9, #48]	; 0x30
   138ec:	cmp	r2, r0
   138f0:	movwlt	r1, #1
   138f4:	mov	r8, r1
   138f8:	ldrb	r0, [r5, #44]	; 0x2c
   138fc:	tst	r0, #4
   13900:	beq	13958 <__assert_fail@plt+0xea8>
   13904:	movw	r0, #17744	; 0x4550
   13908:	ldr	r2, [r9, #28]
   1390c:	ldr	r1, [r5, #72]	; 0x48
   13910:	movt	r0, #6
   13914:	ldr	r7, [r0]
   13918:	mov	r0, #0
   1391c:	bl	2efe4 <__assert_fail@plt+0x1c534>
   13920:	ldrh	r2, [r9, #56]	; 0x38
   13924:	mov	r5, r0
   13928:	sub	r0, r2, #1
   1392c:	uxth	r1, r0
   13930:	cmp	r1, #14
   13934:	bcs	13a1c <__assert_fail@plt+0xf6c>
   13938:	movw	r1, #54668	; 0xd58c
   1393c:	sxth	r0, r0
   13940:	movt	r1, #4
   13944:	ldr	r3, [r1, r0, lsl #2]
   13948:	b	13a38 <__assert_fail@plt+0xf88>
   1394c:	ldrb	r0, [r5, #44]	; 0x2c
   13950:	tst	r0, #4
   13954:	bne	13904 <__assert_fail@plt+0xe54>
   13958:	ldr	r6, [sp, #36]	; 0x24
   1395c:	cmp	r8, #0
   13960:	bne	1335c <__assert_fail@plt+0x8ac>
   13964:	ldrh	r0, [r9, #56]	; 0x38
   13968:	orr	r0, r0, #1
   1396c:	subs	r0, r0, #11
   13970:	movwne	r0, #1
   13974:	strb	r0, [sl, #4]
   13978:	ldr	r0, [r9, #24]
   1397c:	ldr	r1, [r6, #32]
   13980:	str	r0, [sl, #12]
   13984:	str	r1, [sl, #16]
   13988:	bl	16050 <__assert_fail@plt+0x35a0>
   1398c:	mov	r2, r0
   13990:	ldr	r0, [r9, #28]
   13994:	add	r1, sp, #56	; 0x38
   13998:	bl	19d80 <__assert_fail@plt+0x72d0>
   1399c:	ldrb	r0, [sl, #24]
   139a0:	cmp	r0, #0
   139a4:	beq	1335c <__assert_fail@plt+0x8ac>
   139a8:	mov	r0, r6
   139ac:	mov	r1, r9
   139b0:	mov	r2, #4
   139b4:	bl	34d80 <__assert_fail@plt+0x222d0>
   139b8:	b	1335c <__assert_fail@plt+0x8ac>
   139bc:	movw	r2, #61103	; 0xeeaf
   139c0:	mov	r0, #1
   139c4:	movt	r2, #4
   139c8:	bl	2efe4 <__assert_fail@plt+0x1c534>
   139cc:	str	r0, [sp]
   139d0:	mov	r0, #0
   139d4:	mov	r1, #0
   139d8:	mov	r2, r7
   139dc:	mov	r3, r8
   139e0:	bl	1269c <error@plt>
   139e4:	ldr	r6, [sp, #36]	; 0x24
   139e8:	ldr	r8, [sp, #32]
   139ec:	movw	r7, #17040	; 0x4290
   139f0:	movt	r7, #6
   139f4:	mov	r0, #1
   139f8:	mov	r4, #0
   139fc:	str	r0, [sl, #28]
   13a00:	b	13378 <__assert_fail@plt+0x8c8>
   13a04:	mov	r4, #0
   13a08:	ldr	r2, [r5, #4]
   13a0c:	mov	r1, #0
   13a10:	cmp	r2, #0
   13a14:	bpl	13878 <__assert_fail@plt+0xdc8>
   13a18:	b	138ac <__assert_fail@plt+0xdfc>
   13a1c:	movw	r6, #17761	; 0x4561
   13a20:	movw	r1, #54466	; 0xd4c2
   13a24:	movt	r6, #6
   13a28:	movt	r1, #4
   13a2c:	mov	r0, r6
   13a30:	bl	1296c <sprintf@plt>
   13a34:	mov	r3, r6
   13a38:	ldrb	r1, [sl, #5]
   13a3c:	ldrb	r0, [sl, #4]
   13a40:	stm	sp, {r4, r8}
   13a44:	mov	r2, r5
   13a48:	str	r1, [sp, #12]
   13a4c:	movw	r1, #54263	; 0xd3f7
   13a50:	str	r0, [sp, #8]
   13a54:	mov	r0, r7
   13a58:	movt	r1, #4
   13a5c:	bl	127f8 <fprintf@plt>
   13a60:	movw	r5, #20084	; 0x4e74
   13a64:	movt	r5, #6
   13a68:	ldr	r6, [sp, #36]	; 0x24
   13a6c:	cmp	r8, #0
   13a70:	bne	1335c <__assert_fail@plt+0x8ac>
   13a74:	b	13964 <__assert_fail@plt+0xeb4>
   13a78:	ldr	r0, [sp, #40]	; 0x28
   13a7c:	ldr	r7, [r0]
   13a80:	cmp	r7, #0
   13a84:	beq	13af4 <__assert_fail@plt+0x1044>
   13a88:	ldr	r1, [sp, #20]
   13a8c:	mov	r0, #0
   13a90:	mov	r4, #0
   13a94:	bl	19ee0 <__assert_fail@plt+0x7430>
   13a98:	movw	r2, #53818	; 0xd23a
   13a9c:	mov	r3, r0
   13aa0:	mov	r0, #0
   13aa4:	mov	r1, r7
   13aa8:	movt	r2, #4
   13aac:	b	13b38 <__assert_fail@plt+0x1088>
   13ab0:	movw	r1, #53801	; 0xd229
   13ab4:	ldr	r4, [r4]
   13ab8:	mov	r0, #0
   13abc:	mov	r2, #5
   13ac0:	movt	r1, #4
   13ac4:	bl	12564 <dcgettext@plt>
   13ac8:	mov	r5, r0
   13acc:	mov	r0, #0
   13ad0:	mov	r1, r9
   13ad4:	bl	19ee0 <__assert_fail@plt+0x7430>
   13ad8:	mov	r3, r0
   13adc:	mov	r0, #0
   13ae0:	mov	r1, r4
   13ae4:	mov	r2, r5
   13ae8:	bl	1269c <error@plt>
   13aec:	mov	r4, #1
   13af0:	b	13b3c <__assert_fail@plt+0x108c>
   13af4:	mov	r0, r6
   13af8:	bl	33358 <__assert_fail@plt+0x208a8>
   13afc:	ldr	r6, [sp, #20]
   13b00:	cmp	r0, #0
   13b04:	beq	13b50 <__assert_fail@plt+0x10a0>
   13b08:	ldr	r0, [sp, #40]	; 0x28
   13b0c:	movw	r1, #53876	; 0xd274
   13b10:	mov	r2, #5
   13b14:	mov	r4, #0
   13b18:	movt	r1, #4
   13b1c:	ldr	r5, [r0]
   13b20:	mov	r0, #0
   13b24:	bl	12564 <dcgettext@plt>
   13b28:	mov	r2, r0
   13b2c:	mov	r0, #0
   13b30:	mov	r1, r5
   13b34:	mov	r3, r6
   13b38:	bl	1269c <error@plt>
   13b3c:	mov	r0, #1
   13b40:	str	r0, [sl, #28]
   13b44:	mov	r0, r4
   13b48:	sub	sp, fp, #28
   13b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b50:	mov	r4, #1
   13b54:	mov	r0, r4
   13b58:	sub	sp, fp, #28
   13b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b60:	movw	r0, #53931	; 0xd2ab
   13b64:	movw	r1, #53527	; 0xd117
   13b68:	movw	r3, #53965	; 0xd2cd
   13b6c:	mov	r2, #107	; 0x6b
   13b70:	movt	r0, #4
   13b74:	movt	r1, #4
   13b78:	movt	r3, #4
   13b7c:	bl	12ab0 <__assert_fail@plt>
   13b80:	movw	r0, #54118	; 0xd366
   13b84:	movw	r1, #53527	; 0xd117
   13b88:	movw	r3, #54135	; 0xd377
   13b8c:	mov	r2, #380	; 0x17c
   13b90:	movt	r0, #4
   13b94:	movt	r1, #4
   13b98:	movt	r3, #4
   13b9c:	bl	12ab0 <__assert_fail@plt>
   13ba0:	movw	r0, #54175	; 0xd39f
   13ba4:	movw	r1, #53527	; 0xd117
   13ba8:	movw	r3, #54135	; 0xd377
   13bac:	movw	r2, #381	; 0x17d
   13bb0:	movt	r0, #4
   13bb4:	movt	r1, #4
   13bb8:	movt	r3, #4
   13bbc:	bl	12ab0 <__assert_fail@plt>
   13bc0:	movw	r0, #53986	; 0xd2e2
   13bc4:	movw	r1, #53527	; 0xd117
   13bc8:	movw	r3, #53965	; 0xd2cd
   13bcc:	mov	r2, #125	; 0x7d
   13bd0:	movt	r0, #4
   13bd4:	movt	r1, #4
   13bd8:	movt	r3, #4
   13bdc:	bl	12ab0 <__assert_fail@plt>
   13be0:	ldrd	r0, [r1, #72]	; 0x48
   13be4:	mov	r3, #60	; 0x3c
   13be8:	b	13bf0 <__assert_fail@plt+0x1140>
   13bec:	nop	{0}
   13bf0:	push	{r4, r5, r7, sl, fp, lr}
   13bf4:	add	fp, sp, #16
   13bf8:	mov	r4, r1
   13bfc:	ldr	r1, [r2, #44]	; 0x2c
   13c00:	cmp	r1, #2
   13c04:	beq	13cb0 <__assert_fail@plt+0x1200>
   13c08:	cmp	r1, #1
   13c0c:	beq	13c64 <__assert_fail@plt+0x11b4>
   13c10:	cmp	r1, #0
   13c14:	bne	13d0c <__assert_fail@plt+0x125c>
   13c18:	ldr	r5, [r2, #52]	; 0x34
   13c1c:	ldr	r2, [r2, #48]	; 0x30
   13c20:	cmp	r0, r2
   13c24:	moveq	r1, #0
   13c28:	cmpeq	r4, r5
   13c2c:	beq	13d04 <__assert_fail@plt+0x1254>
   13c30:	mov	r1, r2
   13c34:	bl	12888 <difftime@plt>
   13c38:	sub	r0, r4, r5
   13c3c:	vldr	d16, [pc, #236]	; 13d30 <__assert_fail@plt+0x1280>
   13c40:	mov	r1, #0
   13c44:	vmov	s2, r0
   13c48:	vcvt.f64.s32	d17, s2
   13c4c:	vmla.f64	d0, d17, d16
   13c50:	vcmpe.f64	d0, #0.0
   13c54:	vmrs	APSR_nzcv, fpscr
   13c58:	movwpl	r1, #1
   13c5c:	mov	r0, r1
   13c60:	pop	{r4, r5, r7, sl, fp, pc}
   13c64:	ldr	r5, [r2, #52]	; 0x34
   13c68:	ldr	r2, [r2, #48]	; 0x30
   13c6c:	cmp	r0, r2
   13c70:	moveq	r1, #0
   13c74:	cmpeq	r4, r5
   13c78:	beq	13d04 <__assert_fail@plt+0x1254>
   13c7c:	mov	r1, r2
   13c80:	bl	12888 <difftime@plt>
   13c84:	sub	r0, r4, r5
   13c88:	vldr	d16, [pc, #160]	; 13d30 <__assert_fail@plt+0x1280>
   13c8c:	mov	r1, #0
   13c90:	vmov	s2, r0
   13c94:	vcvt.f64.s32	d17, s2
   13c98:	vmla.f64	d0, d17, d16
   13c9c:	vcmpe.f64	d0, #0.0
   13ca0:	vmrs	APSR_nzcv, fpscr
   13ca4:	movwmi	r1, #1
   13ca8:	mov	r0, r1
   13cac:	pop	{r4, r5, r7, sl, fp, pc}
   13cb0:	ldr	r7, [r2, #52]	; 0x34
   13cb4:	ldr	r2, [r2, #48]	; 0x30
   13cb8:	mov	r5, r3
   13cbc:	mov	r1, r2
   13cc0:	bl	12888 <difftime@plt>
   13cc4:	sub	r0, r4, r7
   13cc8:	vldr	d16, [pc, #96]	; 13d30 <__assert_fail@plt+0x1280>
   13ccc:	vmov	s4, r5
   13cd0:	mov	r1, #0
   13cd4:	vmov	s2, r0
   13cd8:	mov	r0, #0
   13cdc:	vcvt.f64.s32	d17, s2
   13ce0:	vcvt.f64.s32	d18, s4
   13ce4:	vmla.f64	d0, d17, d16
   13ce8:	vcmpe.f64	d0, d18
   13cec:	vmrs	APSR_nzcv, fpscr
   13cf0:	vcmpe.f64	d0, #0.0
   13cf4:	movwls	r1, #1
   13cf8:	vmrs	APSR_nzcv, fpscr
   13cfc:	movwgt	r0, #1
   13d00:	and	r1, r0, r1
   13d04:	mov	r0, r1
   13d08:	pop	{r4, r5, r7, sl, fp, pc}
   13d0c:	movw	r0, #58329	; 0xe3d9
   13d10:	movw	r1, #54763	; 0xd5eb
   13d14:	movw	r3, #55742	; 0xd9be
   13d18:	mov	r2, #138	; 0x8a
   13d1c:	movt	r0, #4
   13d20:	movt	r1, #4
   13d24:	movt	r3, #4
   13d28:	bl	12ab0 <__assert_fail@plt>
   13d2c:	nop	{0}
   13d30:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13d34:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13d38:	push	{r4, r5, r6, sl, fp, lr}
   13d3c:	add	fp, sp, #16
   13d40:	mov	r5, r2
   13d44:	ldr	r2, [r2, #156]	; 0x9c
   13d48:	mov	r4, r1
   13d4c:	mov	r6, r0
   13d50:	cmp	r2, #0
   13d54:	beq	13d6c <__assert_fail@plt+0x12bc>
   13d58:	mov	r0, r6
   13d5c:	mov	r1, r4
   13d60:	bl	19d80 <__assert_fail@plt+0x72d0>
   13d64:	cmp	r0, #0
   13d68:	beq	13d80 <__assert_fail@plt+0x12d0>
   13d6c:	ldr	r2, [r5, #160]	; 0xa0
   13d70:	mov	r0, r6
   13d74:	mov	r1, r4
   13d78:	pop	{r4, r5, r6, sl, fp, lr}
   13d7c:	b	19d80 <__assert_fail@plt+0x72d0>
   13d80:	mov	r0, #0
   13d84:	pop	{r4, r5, r6, sl, fp, pc}
   13d88:	push	{r4, r5, r6, r7, fp, lr}
   13d8c:	add	fp, sp, #16
   13d90:	ldr	r0, [r2, #44]	; 0x2c
   13d94:	cmp	r0, #0
   13d98:	bne	13de8 <__assert_fail@plt+0x1338>
   13d9c:	ldrd	r4, [r2, #48]	; 0x30
   13da0:	ldrd	r6, [r1, #72]	; 0x48
   13da4:	cmp	r4, r6
   13da8:	moveq	r0, #0
   13dac:	cmpeq	r5, r7
   13db0:	beq	13de4 <__assert_fail@plt+0x1334>
   13db4:	mov	r0, r6
   13db8:	mov	r1, r4
   13dbc:	bl	12888 <difftime@plt>
   13dc0:	sub	r0, r7, r5
   13dc4:	vldr	d16, [pc, #60]	; 13e08 <__assert_fail@plt+0x1358>
   13dc8:	vmov	s2, r0
   13dcc:	mov	r0, #0
   13dd0:	vcvt.f64.s32	d17, s2
   13dd4:	vmla.f64	d0, d17, d16
   13dd8:	vcmpe.f64	d0, #0.0
   13ddc:	vmrs	APSR_nzcv, fpscr
   13de0:	movwpl	r0, #1
   13de4:	pop	{r4, r5, r6, r7, fp, pc}
   13de8:	movw	r0, #54724	; 0xd5c4
   13dec:	movw	r1, #54763	; 0xd5eb
   13df0:	movw	r3, #54770	; 0xd5f2
   13df4:	mov	r2, #166	; 0xa6
   13df8:	movt	r0, #4
   13dfc:	movt	r1, #4
   13e00:	movt	r3, #4
   13e04:	bl	12ab0 <__assert_fail@plt>
   13e08:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13e0c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13e10:	ldrd	r0, [r1, #72]	; 0x48
   13e14:	movw	r3, #20864	; 0x5180
   13e18:	movt	r3, #1
   13e1c:	b	13bf0 <__assert_fail@plt+0x1140>
   13e20:	mov	r0, #1
   13e24:	bx	lr
   13e28:	ldrd	r0, [r1, #88]	; 0x58
   13e2c:	mov	r3, #60	; 0x3c
   13e30:	b	13bf0 <__assert_fail@plt+0x1140>
   13e34:	nop	{0}
   13e38:	push	{r4, r5, r6, r7, fp, lr}
   13e3c:	add	fp, sp, #16
   13e40:	ldr	r0, [r2, #44]	; 0x2c
   13e44:	cmp	r0, #0
   13e48:	bne	13e98 <__assert_fail@plt+0x13e8>
   13e4c:	ldrd	r4, [r2, #48]	; 0x30
   13e50:	ldrd	r6, [r1, #88]	; 0x58
   13e54:	cmp	r4, r6
   13e58:	moveq	r0, #0
   13e5c:	cmpeq	r5, r7
   13e60:	beq	13e94 <__assert_fail@plt+0x13e4>
   13e64:	mov	r0, r6
   13e68:	mov	r1, r4
   13e6c:	bl	12888 <difftime@plt>
   13e70:	sub	r0, r7, r5
   13e74:	vldr	d16, [pc, #60]	; 13eb8 <__assert_fail@plt+0x1408>
   13e78:	vmov	s2, r0
   13e7c:	mov	r0, #0
   13e80:	vcvt.f64.s32	d17, s2
   13e84:	vmla.f64	d0, d17, d16
   13e88:	vcmpe.f64	d0, #0.0
   13e8c:	vmrs	APSR_nzcv, fpscr
   13e90:	movwpl	r0, #1
   13e94:	pop	{r4, r5, r6, r7, fp, pc}
   13e98:	movw	r0, #54724	; 0xd5c4
   13e9c:	movw	r1, #54763	; 0xd5eb
   13ea0:	movw	r3, #54837	; 0xd635
   13ea4:	mov	r2, #199	; 0xc7
   13ea8:	movt	r0, #4
   13eac:	movt	r1, #4
   13eb0:	movt	r3, #4
   13eb4:	bl	12ab0 <__assert_fail@plt>
   13eb8:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   13ebc:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   13ec0:	push	{r4, r5, r6, sl, fp, lr}
   13ec4:	add	fp, sp, #16
   13ec8:	mov	r5, r2
   13ecc:	ldr	r2, [r2, #156]	; 0x9c
   13ed0:	mov	r4, r1
   13ed4:	mov	r6, r0
   13ed8:	cmp	r2, #0
   13edc:	beq	13eec <__assert_fail@plt+0x143c>
   13ee0:	mov	r0, r6
   13ee4:	mov	r1, r4
   13ee8:	bl	19d80 <__assert_fail@plt+0x72d0>
   13eec:	ldr	r2, [r5, #160]	; 0xa0
   13ef0:	mov	r0, r6
   13ef4:	mov	r1, r4
   13ef8:	pop	{r4, r5, r6, sl, fp, lr}
   13efc:	b	19d80 <__assert_fail@plt+0x72d0>
   13f00:	ldrd	r0, [r1, #88]	; 0x58
   13f04:	movw	r3, #20864	; 0x5180
   13f08:	movt	r3, #1
   13f0c:	b	13bf0 <__assert_fail@plt+0x1140>
   13f10:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13f14:	add	fp, sp, #24
   13f18:	movw	r9, #20040	; 0x4e48
   13f1c:	mov	r5, r1
   13f20:	movw	r1, #57732	; 0xe184
   13f24:	mov	r8, r0
   13f28:	movt	r9, #6
   13f2c:	movt	r1, #4
   13f30:	ldr	r6, [r9, #12]
   13f34:	mov	r0, r6
   13f38:	bl	123fc <strcmp@plt>
   13f3c:	mov	r4, #1
   13f40:	cmp	r0, #0
   13f44:	beq	14014 <__assert_fail@plt+0x1564>
   13f48:	ldrb	r0, [r9, #4]
   13f4c:	cmp	r0, #0
   13f50:	beq	13f70 <__assert_fail@plt+0x14c0>
   13f54:	ldr	r0, [r5, #16]
   13f58:	and	r0, r0, #61440	; 0xf000
   13f5c:	sub	r0, r0, #16384	; 0x4000
   13f60:	clz	r0, r0
   13f64:	lsr	r0, r0, #5
   13f68:	lsl	r5, r0, #9
   13f6c:	b	13f74 <__assert_fail@plt+0x14c4>
   13f70:	mov	r5, #0
   13f74:	ldr	r0, [r9, #16]
   13f78:	mov	r1, r6
   13f7c:	mov	r2, r5
   13f80:	bl	12450 <unlinkat@plt>
   13f84:	cmp	r0, #0
   13f88:	beq	14014 <__assert_fail@plt+0x1564>
   13f8c:	bl	12804 <__errno_location@plt>
   13f90:	ldr	r6, [r0]
   13f94:	mov	r7, r0
   13f98:	cmp	r6, #2
   13f9c:	bne	13fc4 <__assert_fail@plt+0x1514>
   13fa0:	movw	r0, #20084	; 0x4e74
   13fa4:	movt	r0, #6
   13fa8:	ldrb	r0, [r0, #14]
   13fac:	cmp	r0, #0
   13fb0:	beq	13fc4 <__assert_fail@plt+0x1514>
   13fb4:	mov	r0, #0
   13fb8:	str	r0, [r7]
   13fbc:	mov	r0, r4
   13fc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13fc4:	cmp	r5, #0
   13fc8:	cmpeq	r6, #21
   13fcc:	beq	1401c <__assert_fail@plt+0x156c>
   13fd0:	movw	r1, #54904	; 0xd678
   13fd4:	mov	r0, #0
   13fd8:	mov	r2, #5
   13fdc:	mov	r4, #0
   13fe0:	movt	r1, #4
   13fe4:	bl	12564 <dcgettext@plt>
   13fe8:	mov	r5, r0
   13fec:	mov	r0, #0
   13ff0:	mov	r1, r8
   13ff4:	bl	19ee0 <__assert_fail@plt+0x7430>
   13ff8:	mov	r3, r0
   13ffc:	mov	r0, #0
   14000:	mov	r1, r6
   14004:	mov	r2, r5
   14008:	bl	1269c <error@plt>
   1400c:	mov	r0, #1
   14010:	str	r0, [r9, #28]
   14014:	mov	r0, r4
   14018:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1401c:	ldr	r1, [r9, #12]
   14020:	ldr	r0, [r9, #16]
   14024:	mov	r2, #512	; 0x200
   14028:	bl	12450 <unlinkat@plt>
   1402c:	cmp	r0, #0
   14030:	beq	14014 <__assert_fail@plt+0x1564>
   14034:	ldr	r6, [r7]
   14038:	b	13fd0 <__assert_fail@plt+0x1520>
   1403c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14040:	add	fp, sp, #24
   14044:	mov	r8, r0
   14048:	ldr	r0, [r1, #16]
   1404c:	and	r0, r0, #61440	; 0xf000
   14050:	cmp	r0, #32768	; 0x8000
   14054:	beq	140d8 <__assert_fail@plt+0x1628>
   14058:	mov	r4, #0
   1405c:	cmp	r0, #16384	; 0x4000
   14060:	bne	140e8 <__assert_fail@plt+0x1638>
   14064:	bl	12804 <__errno_location@plt>
   14068:	movw	r9, #20040	; 0x4e48
   1406c:	mov	r4, #0
   14070:	mov	r6, r0
   14074:	movw	r2, #18688	; 0x4900
   14078:	movt	r9, #6
   1407c:	str	r4, [r0]
   14080:	movt	r2, #10
   14084:	ldr	r1, [r9, #12]
   14088:	ldr	r0, [r9, #16]
   1408c:	bl	2821c <__assert_fail@plt+0x1576c>
   14090:	cmn	r0, #1
   14094:	ble	14174 <__assert_fail@plt+0x16c4>
   14098:	mov	r5, r0
   1409c:	bl	12984 <fdopendir@plt>
   140a0:	cmp	r0, #0
   140a4:	beq	1417c <__assert_fail@plt+0x16cc>
   140a8:	mov	r7, r0
   140ac:	mov	r0, #0
   140b0:	str	r0, [r6]
   140b4:	mov	r0, r7
   140b8:	bl	12978 <readdir64@plt>
   140bc:	cmp	r0, #0
   140c0:	beq	141c0 <__assert_fail@plt+0x1710>
   140c4:	mov	r4, #0
   140c8:	ldrb	r1, [r0, #19]
   140cc:	cmp	r1, #46	; 0x2e
   140d0:	beq	1410c <__assert_fail@plt+0x165c>
   140d4:	b	14128 <__assert_fail@plt+0x1678>
   140d8:	ldrd	r0, [r1, #48]	; 0x30
   140dc:	orr	r0, r0, r1
   140e0:	clz	r0, r0
   140e4:	lsr	r4, r0, #5
   140e8:	mov	r0, r4
   140ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   140f0:	mov	r0, r7
   140f4:	bl	12978 <readdir64@plt>
   140f8:	cmp	r0, #0
   140fc:	beq	141c0 <__assert_fail@plt+0x1710>
   14100:	ldrb	r1, [r0, #19]
   14104:	cmp	r1, #46	; 0x2e
   14108:	bne	14128 <__assert_fail@plt+0x1678>
   1410c:	ldrb	r1, [r0, #20]
   14110:	cmp	r1, #0
   14114:	beq	140f0 <__assert_fail@plt+0x1640>
   14118:	cmp	r1, #46	; 0x2e
   1411c:	ldrbeq	r0, [r0, #21]
   14120:	cmpeq	r0, #0
   14124:	beq	140f0 <__assert_fail@plt+0x1640>
   14128:	ldr	r5, [r6]
   1412c:	cmp	r5, #0
   14130:	beq	141d0 <__assert_fail@plt+0x1720>
   14134:	mov	r0, #0
   14138:	mov	r1, r8
   1413c:	mov	r4, #0
   14140:	bl	19ee0 <__assert_fail@plt+0x7430>
   14144:	movw	r2, #12871	; 0x3247
   14148:	mov	r3, r0
   1414c:	mov	r0, #0
   14150:	mov	r1, r5
   14154:	movt	r2, #5
   14158:	bl	1269c <error@plt>
   1415c:	mov	r0, #1
   14160:	str	r0, [r9, #28]
   14164:	mov	r0, r7
   14168:	bl	12a80 <closedir@plt>
   1416c:	mov	r0, r4
   14170:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14174:	ldr	r5, [r6]
   14178:	b	141e8 <__assert_fail@plt+0x1738>
   1417c:	ldr	r6, [r6]
   14180:	mov	r0, #0
   14184:	mov	r1, r8
   14188:	mov	r4, #0
   1418c:	bl	19ee0 <__assert_fail@plt+0x7430>
   14190:	movw	r2, #12871	; 0x3247
   14194:	mov	r3, r0
   14198:	mov	r0, #0
   1419c:	mov	r1, r6
   141a0:	movt	r2, #5
   141a4:	bl	1269c <error@plt>
   141a8:	mov	r0, #1
   141ac:	str	r0, [r9, #28]
   141b0:	mov	r0, r5
   141b4:	bl	12a68 <close@plt>
   141b8:	mov	r0, r4
   141bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   141c0:	mov	r4, #1
   141c4:	ldr	r5, [r6]
   141c8:	cmp	r5, #0
   141cc:	bne	14134 <__assert_fail@plt+0x1684>
   141d0:	mov	r0, r7
   141d4:	bl	12a80 <closedir@plt>
   141d8:	cmp	r0, #0
   141dc:	beq	140e8 <__assert_fail@plt+0x1638>
   141e0:	ldr	r5, [r6]
   141e4:	mov	r4, #0
   141e8:	mov	r0, #0
   141ec:	mov	r1, r8
   141f0:	bl	19ee0 <__assert_fail@plt+0x7430>
   141f4:	movw	r2, #12871	; 0x3247
   141f8:	mov	r3, r0
   141fc:	mov	r0, #0
   14200:	mov	r1, r5
   14204:	movt	r2, #5
   14208:	bl	1269c <error@plt>
   1420c:	mov	r0, #1
   14210:	str	r0, [r9, #28]
   14214:	mov	r0, r4
   14218:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1421c:	b	157d0 <__assert_fail@plt+0x2d20>
   14220:	movw	r0, #20040	; 0x4e48
   14224:	movt	r0, #6
   14228:	ldr	r0, [r0, #12]
   1422c:	b	157d0 <__assert_fail@plt+0x2d20>
   14230:	mov	r0, #0
   14234:	bx	lr
   14238:	push	{r4, r5, fp, lr}
   1423c:	add	fp, sp, #8
   14240:	sub	sp, sp, #16
   14244:	movw	r3, #20084	; 0x4e74
   14248:	mov	ip, r1
   1424c:	movw	r1, #20040	; 0x4e48
   14250:	ldrb	r5, [r2, #32]
   14254:	ldr	r2, [r2, #44]	; 0x2c
   14258:	movt	r1, #6
   1425c:	movt	r3, #6
   14260:	ldr	r4, [r3, #20]
   14264:	ldr	lr, [r1, #12]
   14268:	ldr	r3, [r3, #40]	; 0x28
   1426c:	ldr	r1, [r1, #16]
   14270:	str	r4, [sp]
   14274:	stmib	sp, {r3, r5}
   14278:	str	r2, [sp, #12]
   1427c:	mov	r2, lr
   14280:	mov	r3, ip
   14284:	bl	21e70 <__assert_fail@plt+0xf3c0>
   14288:	mov	r0, #1
   1428c:	sub	sp, fp, #8
   14290:	pop	{r4, r5, fp, pc}
   14294:	push	{fp, lr}
   14298:	mov	fp, sp
   1429c:	sub	sp, sp, #8
   142a0:	ldrb	ip, [r2, #52]	; 0x34
   142a4:	ldr	r1, [r2, #56]	; 0x38
   142a8:	ldr	r2, [r2, #44]	; 0x2c
   142ac:	movw	r3, #10780	; 0x2a1c
   142b0:	str	r0, [sp]
   142b4:	movt	r3, #5
   142b8:	mov	r0, r2
   142bc:	mov	r2, ip
   142c0:	bl	227fc <__assert_fail@plt+0xfd4c>
   142c4:	mov	r0, #1
   142c8:	mov	sp, fp
   142cc:	pop	{fp, pc}
   142d0:	push	{r4, sl, fp, lr}
   142d4:	add	fp, sp, #8
   142d8:	ldr	r4, [r2, #44]	; 0x2c
   142dc:	mov	r1, r4
   142e0:	bl	12a44 <fputs@plt>
   142e4:	mov	r0, #0
   142e8:	mov	r1, r4
   142ec:	bl	1299c <putc@plt>
   142f0:	mov	r0, #1
   142f4:	pop	{r4, sl, fp, pc}
   142f8:	push	{r4, sl, fp, lr}
   142fc:	add	fp, sp, #8
   14300:	mov	r4, r2
   14304:	mov	r2, r0
   14308:	mov	r0, r1
   1430c:	mov	r1, r2
   14310:	bl	1bfdc <__assert_fail@plt+0x952c>
   14314:	ldr	r1, [r4, #40]	; 0x28
   14318:	bl	123fc <strcmp@plt>
   1431c:	clz	r0, r0
   14320:	lsr	r0, r0, #5
   14324:	pop	{r4, sl, fp, pc}
   14328:	ldr	r0, [r2, #40]	; 0x28
   1432c:	cmp	r0, #2
   14330:	beq	14360 <__assert_fail@plt+0x18b0>
   14334:	cmp	r0, #1
   14338:	beq	14380 <__assert_fail@plt+0x18d0>
   1433c:	cmp	r0, #0
   14340:	bne	14378 <__assert_fail@plt+0x18c8>
   14344:	ldr	r1, [r1, #28]
   14348:	ldrd	r2, [r2, #48]	; 0x30
   1434c:	mov	r0, #1
   14350:	subs	r1, r2, r1
   14354:	sbcs	r1, r3, #0
   14358:	bcs	14378 <__assert_fail@plt+0x18c8>
   1435c:	bx	lr
   14360:	ldr	r0, [r1, #28]
   14364:	ldrd	r2, [r2, #48]	; 0x30
   14368:	eor	r0, r2, r0
   1436c:	orrs	r0, r0, r3
   14370:	mov	r0, #1
   14374:	bxeq	lr
   14378:	mov	r0, #0
   1437c:	bx	lr
   14380:	ldrd	r2, [r2, #48]	; 0x30
   14384:	ldr	r1, [r1, #28]
   14388:	mov	r0, #1
   1438c:	subs	r1, r1, r2
   14390:	rscs	r1, r3, #0
   14394:	movcs	r0, #0
   14398:	bx	lr
   1439c:	ldr	r0, [r1, #28]
   143a0:	ldr	r1, [r2, #40]	; 0x28
   143a4:	sub	r0, r1, r0
   143a8:	clz	r0, r0
   143ac:	lsr	r0, r0, #5
   143b0:	bx	lr
   143b4:	push	{r4, r5, r6, r7, fp, lr}
   143b8:	add	fp, sp, #16
   143bc:	mov	r5, r0
   143c0:	ldr	r0, [r1, #16]
   143c4:	mov	r7, #0
   143c8:	and	r0, r0, #61440	; 0xf000
   143cc:	cmp	r0, #40960	; 0xa000
   143d0:	bne	14438 <__assert_fail@plt+0x1988>
   143d4:	movw	r7, #20040	; 0x4e48
   143d8:	mov	r6, r2
   143dc:	movt	r7, #6
   143e0:	ldr	r1, [r7, #12]
   143e4:	ldr	r0, [r7, #16]
   143e8:	bl	23618 <__assert_fail@plt+0x10b68>
   143ec:	mov	r4, r0
   143f0:	cmp	r0, #0
   143f4:	beq	14414 <__assert_fail@plt+0x1964>
   143f8:	ldr	r0, [r6, #40]	; 0x28
   143fc:	mov	r1, r4
   14400:	mov	r2, #16
   14404:	bl	126c0 <fnmatch@plt>
   14408:	clz	r0, r0
   1440c:	lsr	r7, r0, #5
   14410:	b	14430 <__assert_fail@plt+0x1980>
   14414:	bl	12804 <__errno_location@plt>
   14418:	ldr	r0, [r0]
   1441c:	mov	r1, r5
   14420:	bl	18b28 <__assert_fail@plt+0x6078>
   14424:	mov	r0, #1
   14428:	str	r0, [r7, #28]
   1442c:	mov	r7, #0
   14430:	mov	r0, r4
   14434:	bl	32910 <__assert_fail@plt+0x1fe60>
   14438:	mov	r0, r7
   1443c:	pop	{r4, r5, r6, r7, fp, pc}
   14440:	push	{r4, r5, fp, lr}
   14444:	add	fp, sp, #8
   14448:	ldr	r4, [r2, #40]	; 0x28
   1444c:	bl	23ba0 <__assert_fail@plt+0x110f0>
   14450:	mov	r5, r0
   14454:	bl	23cf0 <__assert_fail@plt+0x11240>
   14458:	mov	r0, r4
   1445c:	mov	r1, r5
   14460:	mov	r2, #16
   14464:	bl	126c0 <fnmatch@plt>
   14468:	mov	r4, r0
   1446c:	mov	r0, r5
   14470:	bl	32910 <__assert_fail@plt+0x1fe60>
   14474:	clz	r0, r4
   14478:	lsr	r0, r0, #5
   1447c:	pop	{r4, r5, fp, pc}
   14480:	push	{r4, r5, fp, lr}
   14484:	add	fp, sp, #8
   14488:	ldr	r0, [r2, #40]	; 0x28
   1448c:	cmp	r0, #2
   14490:	beq	144c0 <__assert_fail@plt+0x1a10>
   14494:	cmp	r0, #1
   14498:	beq	144ec <__assert_fail@plt+0x1a3c>
   1449c:	cmp	r0, #0
   144a0:	bne	144e4 <__assert_fail@plt+0x1a34>
   144a4:	ldrd	r4, [r1, #96]	; 0x60
   144a8:	ldrd	r2, [r2, #48]	; 0x30
   144ac:	mov	r0, #1
   144b0:	subs	r1, r2, r4
   144b4:	sbcs	r1, r3, r5
   144b8:	bcs	144e4 <__assert_fail@plt+0x1a34>
   144bc:	pop	{r4, r5, fp, pc}
   144c0:	ldr	r0, [r2, #48]	; 0x30
   144c4:	ldr	r3, [r2, #52]	; 0x34
   144c8:	ldr	r2, [r1, #96]	; 0x60
   144cc:	ldr	r1, [r1, #100]	; 0x64
   144d0:	eor	r1, r1, r3
   144d4:	eor	r0, r2, r0
   144d8:	orrs	r0, r0, r1
   144dc:	mov	r0, #1
   144e0:	popeq	{r4, r5, fp, pc}
   144e4:	mov	r0, #0
   144e8:	pop	{r4, r5, fp, pc}
   144ec:	ldrd	r2, [r2, #48]	; 0x30
   144f0:	ldrd	r4, [r1, #96]	; 0x60
   144f4:	mov	r0, #1
   144f8:	subs	r1, r4, r2
   144fc:	sbcs	r1, r5, r3
   14500:	movcs	r0, #0
   14504:	pop	{r4, r5, fp, pc}
   14508:	push	{fp, lr}
   1450c:	mov	fp, sp
   14510:	mov	r1, r0
   14514:	ldr	r0, [r2, #40]	; 0x28
   14518:	mov	r2, #16
   1451c:	bl	126c0 <fnmatch@plt>
   14520:	clz	r0, r0
   14524:	lsr	r0, r0, #5
   14528:	pop	{fp, pc}
   1452c:	ldr	r0, [r2, #40]	; 0x28
   14530:	cmp	r0, #2
   14534:	beq	14564 <__assert_fail@plt+0x1ab4>
   14538:	cmp	r0, #1
   1453c:	beq	14584 <__assert_fail@plt+0x1ad4>
   14540:	cmp	r0, #0
   14544:	bne	1457c <__assert_fail@plt+0x1acc>
   14548:	ldr	r1, [r1, #20]
   1454c:	ldrd	r2, [r2, #48]	; 0x30
   14550:	mov	r0, #1
   14554:	subs	r1, r2, r1
   14558:	sbcs	r1, r3, #0
   1455c:	bcs	1457c <__assert_fail@plt+0x1acc>
   14560:	bx	lr
   14564:	ldr	r0, [r1, #20]
   14568:	ldrd	r2, [r2, #48]	; 0x30
   1456c:	eor	r0, r2, r0
   14570:	orrs	r0, r0, r3
   14574:	mov	r0, #1
   14578:	bxeq	lr
   1457c:	mov	r0, #0
   14580:	bx	lr
   14584:	ldrd	r2, [r2, #48]	; 0x30
   14588:	ldr	r1, [r1, #20]
   1458c:	mov	r0, #1
   14590:	subs	r1, r1, r2
   14594:	rscs	r1, r3, #0
   14598:	movcs	r0, #0
   1459c:	bx	lr
   145a0:	push	{r4, r5, r6, r7, fp, lr}
   145a4:	add	fp, sp, #16
   145a8:	mov	r5, r0
   145ac:	ldr	r0, [r1, #16]
   145b0:	mov	r7, #0
   145b4:	and	r0, r0, #61440	; 0xf000
   145b8:	cmp	r0, #40960	; 0xa000
   145bc:	bne	14624 <__assert_fail@plt+0x1b74>
   145c0:	movw	r7, #20040	; 0x4e48
   145c4:	mov	r6, r2
   145c8:	movt	r7, #6
   145cc:	ldr	r1, [r7, #12]
   145d0:	ldr	r0, [r7, #16]
   145d4:	bl	23618 <__assert_fail@plt+0x10b68>
   145d8:	mov	r4, r0
   145dc:	cmp	r0, #0
   145e0:	beq	14600 <__assert_fail@plt+0x1b50>
   145e4:	ldr	r0, [r6, #40]	; 0x28
   145e8:	mov	r1, r4
   145ec:	mov	r2, #0
   145f0:	bl	126c0 <fnmatch@plt>
   145f4:	clz	r0, r0
   145f8:	lsr	r7, r0, #5
   145fc:	b	1461c <__assert_fail@plt+0x1b6c>
   14600:	bl	12804 <__errno_location@plt>
   14604:	ldr	r0, [r0]
   14608:	mov	r1, r5
   1460c:	bl	18b28 <__assert_fail@plt+0x6078>
   14610:	mov	r0, #1
   14614:	str	r0, [r7, #28]
   14618:	mov	r7, #0
   1461c:	mov	r0, r4
   14620:	bl	32910 <__assert_fail@plt+0x1fe60>
   14624:	mov	r0, r7
   14628:	pop	{r4, r5, r6, r7, fp, pc}
   1462c:	push	{r4, r5, fp, lr}
   14630:	add	fp, sp, #8
   14634:	sub	sp, sp, #16
   14638:	movw	r3, #20084	; 0x4e74
   1463c:	mov	ip, r1
   14640:	movw	r1, #20040	; 0x4e48
   14644:	ldrb	r5, [r2, #32]
   14648:	ldr	r2, [r2, #44]	; 0x2c
   1464c:	movt	r1, #6
   14650:	movt	r3, #6
   14654:	ldr	r4, [r3, #20]
   14658:	ldr	lr, [r1, #12]
   1465c:	ldr	r3, [r3, #40]	; 0x28
   14660:	ldr	r1, [r1, #16]
   14664:	str	r4, [sp]
   14668:	stmib	sp, {r3, r5}
   1466c:	str	r2, [sp, #12]
   14670:	mov	r2, lr
   14674:	mov	r3, ip
   14678:	bl	21e70 <__assert_fail@plt+0xf3c0>
   1467c:	mov	r0, #1
   14680:	sub	sp, fp, #8
   14684:	pop	{r4, r5, fp, pc}
   14688:	ldrd	r0, [r1, #80]	; 0x50
   1468c:	mov	r3, #60	; 0x3c
   14690:	b	13bf0 <__assert_fail@plt+0x1140>
   14694:	ldrd	r0, [r1, #80]	; 0x50
   14698:	movw	r3, #20864	; 0x5180
   1469c:	movt	r3, #1
   146a0:	b	13bf0 <__assert_fail@plt+0x1140>
   146a4:	push	{r4, r5, fp, lr}
   146a8:	add	fp, sp, #8
   146ac:	ldr	r4, [r2, #40]	; 0x28
   146b0:	bl	23ba0 <__assert_fail@plt+0x110f0>
   146b4:	mov	r5, r0
   146b8:	bl	23cf0 <__assert_fail@plt+0x11240>
   146bc:	mov	r0, r4
   146c0:	mov	r1, r5
   146c4:	mov	r2, #0
   146c8:	bl	126c0 <fnmatch@plt>
   146cc:	mov	r4, r0
   146d0:	mov	r0, r5
   146d4:	bl	32910 <__assert_fail@plt+0x1fe60>
   146d8:	clz	r0, r4
   146dc:	lsr	r0, r0, #5
   146e0:	pop	{r4, r5, fp, pc}
   146e4:	push	{fp, lr}
   146e8:	mov	fp, sp
   146ec:	ldr	r2, [r2, #160]	; 0xa0
   146f0:	bl	19d80 <__assert_fail@plt+0x72d0>
   146f4:	eor	r0, r0, #1
   146f8:	pop	{fp, pc}
   146fc:	nop	{0}
   14700:	push	{r4, r5, r6, r7, fp, lr}
   14704:	add	fp, sp, #16
   14708:	ldr	r0, [r2, #44]	; 0x2c
   1470c:	cmp	r0, #0
   14710:	bne	14760 <__assert_fail@plt+0x1cb0>
   14714:	ldrd	r4, [r2, #48]	; 0x30
   14718:	ldrd	r6, [r1, #80]	; 0x50
   1471c:	cmp	r4, r6
   14720:	moveq	r0, #0
   14724:	cmpeq	r5, r7
   14728:	beq	1475c <__assert_fail@plt+0x1cac>
   1472c:	mov	r0, r6
   14730:	mov	r1, r4
   14734:	bl	12888 <difftime@plt>
   14738:	sub	r0, r7, r5
   1473c:	vldr	d16, [pc, #60]	; 14780 <__assert_fail@plt+0x1cd0>
   14740:	vmov	s2, r0
   14744:	mov	r0, #0
   14748:	vcvt.f64.s32	d17, s2
   1474c:	vmla.f64	d0, d17, d16
   14750:	vcmpe.f64	d0, #0.0
   14754:	vmrs	APSR_nzcv, fpscr
   14758:	movwpl	r0, #1
   1475c:	pop	{r4, r5, r6, r7, fp, pc}
   14760:	movw	r0, #54724	; 0xd5c4
   14764:	movw	r1, #54763	; 0xd5eb
   14768:	movw	r3, #54921	; 0xd689
   1476c:	movw	r2, #621	; 0x26d
   14770:	movt	r0, #4
   14774:	movt	r1, #4
   14778:	movt	r3, #4
   1477c:	bl	12ab0 <__assert_fail@plt>
   14780:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   14784:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   14788:	push	{r4, r5, r6, r7, fp, lr}
   1478c:	add	fp, sp, #16
   14790:	mov	r5, r0
   14794:	ldr	r0, [r2, #44]	; 0x2c
   14798:	cmp	r0, #0
   1479c:	bne	14874 <__assert_fail@plt+0x1dc4>
   147a0:	ldr	r0, [r2, #40]	; 0x28
   147a4:	cmp	r0, #4
   147a8:	bhi	14894 <__assert_fail@plt+0x1de4>
   147ac:	add	r3, pc, #0
   147b0:	ldr	pc, [r3, r0, lsl #2]
   147b4:	andeq	r4, r1, r8, asr #15
   147b8:	andeq	r4, r1, r0, lsr r8
   147bc:	ldrdeq	r4, [r1], -r0
   147c0:	ldrdeq	r4, [r1], -r8
   147c4:			; <UNDEFINED> instruction: 0x000148b4
   147c8:	add	r0, r1, #72	; 0x48
   147cc:	b	147dc <__assert_fail@plt+0x1d2c>
   147d0:	add	r0, r1, #88	; 0x58
   147d4:	b	147dc <__assert_fail@plt+0x1d2c>
   147d8:	add	r0, r1, #80	; 0x50
   147dc:	ldr	r5, [r2, #52]	; 0x34
   147e0:	ldr	r2, [r2, #48]	; 0x30
   147e4:	ldrd	r6, [r0]
   147e8:	cmp	r2, r6
   147ec:	moveq	r4, #0
   147f0:	cmpeq	r5, r7
   147f4:	beq	14828 <__assert_fail@plt+0x1d78>
   147f8:	mov	r0, r6
   147fc:	mov	r1, r2
   14800:	bl	12888 <difftime@plt>
   14804:	sub	r0, r7, r5
   14808:	vldr	d16, [pc, #200]	; 148d8 <__assert_fail@plt+0x1e28>
   1480c:	mov	r4, #0
   14810:	vmov	s2, r0
   14814:	vcvt.f64.s32	d17, s2
   14818:	vmla.f64	d0, d17, d16
   1481c:	vcmpe.f64	d0, #0.0
   14820:	vmrs	APSR_nzcv, fpscr
   14824:	movwpl	r4, #1
   14828:	mov	r0, r4
   1482c:	pop	{r4, r5, r6, r7, fp, pc}
   14830:	movw	r1, #55096	; 0xd738
   14834:	mov	r0, #0
   14838:	mov	r2, #5
   1483c:	mov	r4, #0
   14840:	movt	r1, #4
   14844:	bl	12564 <dcgettext@plt>
   14848:	mov	r6, r0
   1484c:	mov	r0, #0
   14850:	mov	r1, r5
   14854:	bl	19ee0 <__assert_fail@plt+0x7430>
   14858:	mov	r3, r0
   1485c:	mov	r0, #0
   14860:	mov	r1, #0
   14864:	mov	r2, r6
   14868:	bl	1269c <error@plt>
   1486c:	mov	r0, r4
   14870:	pop	{r4, r5, r6, r7, fp, pc}
   14874:	movw	r0, #54724	; 0xd5c4
   14878:	movw	r1, #54763	; 0xd5eb
   1487c:	movw	r3, #54987	; 0xd6cb
   14880:	movw	r2, #631	; 0x277
   14884:	movt	r0, #4
   14888:	movt	r1, #4
   1488c:	movt	r3, #4
   14890:	bl	12ab0 <__assert_fail@plt>
   14894:	movw	r0, #55144	; 0xd768
   14898:	movw	r1, #54763	; 0xd5eb
   1489c:	movw	r3, #54987	; 0xd6cb
   148a0:	movw	r2, #667	; 0x29b
   148a4:	movt	r0, #4
   148a8:	movt	r1, #4
   148ac:	movt	r3, #4
   148b0:	bl	12ab0 <__assert_fail@plt>
   148b4:	movw	r0, #55055	; 0xd70f
   148b8:	movw	r1, #54763	; 0xd5eb
   148bc:	movw	r3, #54987	; 0xd6cb
   148c0:	mov	r2, #636	; 0x27c
   148c4:	movt	r0, #4
   148c8:	movt	r1, #4
   148cc:	movt	r3, #4
   148d0:	bl	12ab0 <__assert_fail@plt>
   148d4:	nop	{0}
   148d8:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   148dc:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   148e0:	push	{fp, lr}
   148e4:	mov	fp, sp
   148e8:	ldr	r0, [r1, #28]
   148ec:	bl	12a8c <getgrgid@plt>
   148f0:	clz	r0, r0
   148f4:	lsr	r0, r0, #5
   148f8:	pop	{fp, pc}
   148fc:	push	{fp, lr}
   14900:	mov	fp, sp
   14904:	ldr	r0, [r1, #24]
   14908:	bl	12414 <getpwuid@plt>
   1490c:	clz	r0, r0
   14910:	lsr	r0, r0, #5
   14914:	pop	{fp, pc}
   14918:	push	{r4, r5, r6, sl, fp, lr}
   1491c:	add	fp, sp, #16
   14920:	mov	r6, r0
   14924:	ldr	r0, [r2, #132]	; 0x84
   14928:	mov	r5, r1
   1492c:	mov	r4, r2
   14930:	mov	r1, r6
   14934:	ldr	r0, [r0]
   14938:	bl	14960 <__assert_fail@plt+0x1eb0>
   1493c:	cmp	r0, #0
   14940:	beq	14958 <__assert_fail@plt+0x1ea8>
   14944:	mov	r0, r6
   14948:	mov	r1, r5
   1494c:	mov	r2, r4
   14950:	pop	{r4, r5, r6, sl, fp, lr}
   14954:	b	157d0 <__assert_fail@plt+0x2d20>
   14958:	mov	r0, #0
   1495c:	pop	{r4, r5, r6, sl, fp, pc}
   14960:	push	{r4, r5, r6, r7, fp, lr}
   14964:	add	fp, sp, #16
   14968:	mov	r5, r0
   1496c:	movw	r0, #17756	; 0x455c
   14970:	mov	r4, r1
   14974:	movt	r0, #6
   14978:	ldr	r0, [r0]
   1497c:	bl	328b4 <__assert_fail@plt+0x1fe04>
   14980:	movw	r7, #17744	; 0x4550
   14984:	movw	r1, #55812	; 0xda04
   14988:	mov	r0, #0
   1498c:	mov	r2, #5
   14990:	movt	r7, #6
   14994:	movt	r1, #4
   14998:	ldr	r6, [r7]
   1499c:	bl	12564 <dcgettext@plt>
   149a0:	mov	r1, r0
   149a4:	mov	r0, r6
   149a8:	mov	r2, r5
   149ac:	mov	r3, r4
   149b0:	bl	127f8 <fprintf@plt>
   149b4:	cmn	r0, #1
   149b8:	ble	149cc <__assert_fail@plt+0x1f1c>
   149bc:	ldr	r0, [r7]
   149c0:	bl	328b4 <__assert_fail@plt+0x1fe04>
   149c4:	pop	{r4, r5, r6, r7, fp, lr}
   149c8:	b	32240 <__assert_fail@plt+0x1f790>
   149cc:	bl	12804 <__errno_location@plt>
   149d0:	movw	r1, #55829	; 0xda15
   149d4:	ldr	r4, [r0]
   149d8:	mov	r0, #0
   149dc:	mov	r2, #5
   149e0:	movt	r1, #4
   149e4:	bl	12564 <dcgettext@plt>
   149e8:	mov	r2, r0
   149ec:	mov	r0, #1
   149f0:	mov	r1, r4
   149f4:	bl	1269c <error@plt>
   149f8:	push	{r4, r5, fp, lr}
   149fc:	add	fp, sp, #8
   14a00:	mov	r5, r1
   14a04:	mov	r1, r0
   14a08:	ldr	r0, [r2, #132]	; 0x84
   14a0c:	mov	r4, r2
   14a10:	ldr	r0, [r0]
   14a14:	bl	14960 <__assert_fail@plt+0x1eb0>
   14a18:	cmp	r0, #0
   14a1c:	beq	14a3c <__assert_fail@plt+0x1f8c>
   14a20:	movw	r0, #20040	; 0x4e48
   14a24:	mov	r1, r5
   14a28:	mov	r2, r4
   14a2c:	movt	r0, #6
   14a30:	ldr	r0, [r0, #12]
   14a34:	pop	{r4, r5, fp, lr}
   14a38:	b	157d0 <__assert_fail@plt+0x2d20>
   14a3c:	mov	r0, #0
   14a40:	pop	{r4, r5, fp, pc}
   14a44:	mov	r0, #1
   14a48:	bx	lr
   14a4c:	push	{r4, r5, r6, sl, fp, lr}
   14a50:	add	fp, sp, #16
   14a54:	mov	r5, r2
   14a58:	ldr	r2, [r2, #156]	; 0x9c
   14a5c:	mov	r4, r1
   14a60:	mov	r6, r0
   14a64:	cmp	r2, #0
   14a68:	beq	14a88 <__assert_fail@plt+0x1fd8>
   14a6c:	mov	r0, r6
   14a70:	mov	r1, r4
   14a74:	bl	19d80 <__assert_fail@plt+0x72d0>
   14a78:	cmp	r0, #0
   14a7c:	beq	14a88 <__assert_fail@plt+0x1fd8>
   14a80:	mov	r0, #1
   14a84:	pop	{r4, r5, r6, sl, fp, pc}
   14a88:	ldr	r2, [r5, #160]	; 0xa0
   14a8c:	mov	r0, r6
   14a90:	mov	r1, r4
   14a94:	pop	{r4, r5, r6, sl, fp, lr}
   14a98:	b	19d80 <__assert_fail@plt+0x72d0>
   14a9c:	push	{fp, lr}
   14aa0:	mov	fp, sp
   14aa4:	mov	r1, r0
   14aa8:	ldr	r0, [r2, #40]	; 0x28
   14aac:	mov	r2, #0
   14ab0:	bl	126c0 <fnmatch@plt>
   14ab4:	clz	r0, r0
   14ab8:	lsr	r0, r0, #5
   14abc:	pop	{fp, pc}
   14ac0:	push	{fp, lr}
   14ac4:	mov	fp, sp
   14ac8:	ldr	r0, [r1, #16]
   14acc:	ldr	r3, [r2, #40]!	; 0x28
   14ad0:	and	r1, r0, #61440	; 0xf000
   14ad4:	cmp	r3, #2
   14ad8:	sub	r1, r1, #16384	; 0x4000
   14adc:	clz	r1, r1
   14ae0:	lsr	r1, r1, #5
   14ae4:	add	r1, r2, r1, lsl #2
   14ae8:	ldr	r1, [r1, #4]
   14aec:	beq	14b28 <__assert_fail@plt+0x2078>
   14af0:	cmp	r3, #1
   14af4:	beq	14b14 <__assert_fail@plt+0x2064>
   14af8:	cmp	r3, #0
   14afc:	bne	14b44 <__assert_fail@plt+0x2094>
   14b00:	and	r0, r1, r0
   14b04:	sub	r0, r0, r1
   14b08:	clz	r0, r0
   14b0c:	lsr	r0, r0, #5
   14b10:	pop	{fp, pc}
   14b14:	cmp	r1, #0
   14b18:	beq	14b3c <__assert_fail@plt+0x208c>
   14b1c:	ands	r0, r1, r0
   14b20:	movwne	r0, #1
   14b24:	pop	{fp, pc}
   14b28:	bfc	r0, #12, #20
   14b2c:	sub	r0, r0, r1
   14b30:	clz	r0, r0
   14b34:	lsr	r0, r0, #5
   14b38:	pop	{fp, pc}
   14b3c:	mov	r0, #1
   14b40:	pop	{fp, pc}
   14b44:	bl	12a5c <abort@plt>
   14b48:	push	{fp, lr}
   14b4c:	mov	fp, sp
   14b50:	movw	r0, #20040	; 0x4e48
   14b54:	mov	r2, #1
   14b58:	mov	r3, #0
   14b5c:	movt	r0, #6
   14b60:	ldr	r1, [r0, #12]
   14b64:	ldr	r0, [r0, #16]
   14b68:	bl	12498 <faccessat@plt>
   14b6c:	clz	r0, r0
   14b70:	lsr	r0, r0, #5
   14b74:	pop	{fp, pc}
   14b78:	push	{fp, lr}
   14b7c:	mov	fp, sp
   14b80:	movw	r0, #20040	; 0x4e48
   14b84:	mov	r2, #4
   14b88:	mov	r3, #0
   14b8c:	movt	r0, #6
   14b90:	ldr	r1, [r0, #12]
   14b94:	ldr	r0, [r0, #16]
   14b98:	bl	12498 <faccessat@plt>
   14b9c:	clz	r0, r0
   14ba0:	lsr	r0, r0, #5
   14ba4:	pop	{fp, pc}
   14ba8:	push	{fp, lr}
   14bac:	mov	fp, sp
   14bb0:	movw	r0, #20040	; 0x4e48
   14bb4:	mov	r2, #2
   14bb8:	mov	r3, #0
   14bbc:	movt	r0, #6
   14bc0:	ldr	r1, [r0, #12]
   14bc4:	ldr	r0, [r0, #16]
   14bc8:	bl	12498 <faccessat@plt>
   14bcc:	clz	r0, r0
   14bd0:	lsr	r0, r0, #5
   14bd4:	pop	{fp, pc}
   14bd8:	push	{fp, lr}
   14bdc:	mov	fp, sp
   14be0:	sub	sp, sp, #8
   14be4:	ldrb	ip, [r2, #52]	; 0x34
   14be8:	ldr	r1, [r2, #56]	; 0x38
   14bec:	ldr	r2, [r2, #44]	; 0x2c
   14bf0:	movw	r3, #10780	; 0x2a1c
   14bf4:	str	r0, [sp]
   14bf8:	movt	r3, #5
   14bfc:	mov	r0, r2
   14c00:	mov	r2, ip
   14c04:	bl	227fc <__assert_fail@plt+0xfd4c>
   14c08:	mov	r0, #1
   14c0c:	mov	sp, fp
   14c10:	pop	{fp, pc}
   14c14:	push	{r4, sl, fp, lr}
   14c18:	add	fp, sp, #8
   14c1c:	ldr	r4, [r2, #44]	; 0x2c
   14c20:	mov	r1, r4
   14c24:	bl	12a44 <fputs@plt>
   14c28:	mov	r0, #0
   14c2c:	mov	r1, r4
   14c30:	bl	1299c <putc@plt>
   14c34:	mov	r0, #1
   14c38:	pop	{r4, sl, fp, pc}
   14c3c:	push	{fp, lr}
   14c40:	mov	fp, sp
   14c44:	movw	r0, #20084	; 0x4e74
   14c48:	movt	r0, #6
   14c4c:	ldrb	r0, [r0]
   14c50:	cmp	r0, #0
   14c54:	beq	14c88 <__assert_fail@plt+0x21d8>
   14c58:	movw	r0, #20040	; 0x4e48
   14c5c:	movt	r0, #6
   14c60:	ldrb	r2, [r0, #4]
   14c64:	cmp	r2, #0
   14c68:	beq	14c90 <__assert_fail@plt+0x21e0>
   14c6c:	cmp	r1, #0
   14c70:	beq	14c88 <__assert_fail@plt+0x21d8>
   14c74:	ldr	r1, [r1, #16]
   14c78:	and	r1, r1, #61440	; 0xf000
   14c7c:	cmp	r1, #16384	; 0x4000
   14c80:	moveq	r1, #1
   14c84:	strbeq	r1, [r0, #24]
   14c88:	mov	r0, #1
   14c8c:	pop	{fp, pc}
   14c90:	movw	r0, #54119	; 0xd367
   14c94:	movw	r1, #54763	; 0xd5eb
   14c98:	movw	r3, #55154	; 0xd772
   14c9c:	movw	r2, #853	; 0x355
   14ca0:	movt	r0, #4
   14ca4:	movt	r1, #4
   14ca8:	movt	r3, #4
   14cac:	bl	12ab0 <__assert_fail@plt>
   14cb0:	push	{fp, lr}
   14cb4:	mov	fp, sp
   14cb8:	bl	18eac <__assert_fail@plt+0x63fc>
   14cbc:	movw	r0, #20040	; 0x4e48
   14cc0:	movt	r0, #6
   14cc4:	ldr	r0, [r0, #28]
   14cc8:	bl	12780 <exit@plt>
   14ccc:	push	{r4, r5, r6, sl, fp, lr}
   14cd0:	add	fp, sp, #16
   14cd4:	sub	sp, sp, #8
   14cd8:	mov	r4, r2
   14cdc:	mov	r5, r0
   14ce0:	bl	127bc <strlen@plt>
   14ce4:	mov	r6, r0
   14ce8:	ldr	r0, [r4, #40]	; 0x28
   14cec:	mov	r1, #0
   14cf0:	mov	r3, #0
   14cf4:	str	r1, [sp]
   14cf8:	mov	r1, r5
   14cfc:	mov	r2, r6
   14d00:	bl	3b3d0 <__assert_fail@plt+0x28920>
   14d04:	sub	r0, r0, r6
   14d08:	clz	r0, r0
   14d0c:	lsr	r0, r0, #5
   14d10:	sub	sp, fp, #16
   14d14:	pop	{r4, r5, r6, sl, fp, pc}
   14d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d1c:	add	fp, sp, #28
   14d20:	sub	sp, sp, #4
   14d24:	ldrd	r6, [r2, #40]	; 0x28
   14d28:	ldrd	r8, [r1, #48]	; 0x30
   14d2c:	mov	sl, r2
   14d30:	asr	r5, r7, #31
   14d34:	mov	r0, r8
   14d38:	mov	r1, r9
   14d3c:	mov	r2, r7
   14d40:	mov	r3, r5
   14d44:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   14d48:	umull	r4, r2, r0, r7
   14d4c:	mla	r2, r0, r5, r2
   14d50:	mla	r7, r1, r7, r2
   14d54:	adds	r2, r0, #1
   14d58:	adc	r3, r1, #0
   14d5c:	subs	r5, r8, r4
   14d60:	sbc	r7, r9, r7
   14d64:	orrs	r7, r5, r7
   14d68:	moveq	r3, r1
   14d6c:	moveq	r2, r0
   14d70:	cmp	r6, #2
   14d74:	beq	14da4 <__assert_fail@plt+0x22f4>
   14d78:	cmp	r6, #1
   14d7c:	beq	14dc8 <__assert_fail@plt+0x2318>
   14d80:	cmp	r6, #0
   14d84:	bne	14dbc <__assert_fail@plt+0x230c>
   14d88:	ldrd	r4, [sl, #48]	; 0x30
   14d8c:	mov	r0, #1
   14d90:	subs	r1, r4, r2
   14d94:	sbcs	r1, r5, r3
   14d98:	bcs	14dbc <__assert_fail@plt+0x230c>
   14d9c:	sub	sp, fp, #28
   14da0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14da4:	ldrd	r0, [sl, #48]	; 0x30
   14da8:	eor	r1, r3, r1
   14dac:	eor	r0, r2, r0
   14db0:	orrs	r0, r0, r1
   14db4:	mov	r0, #1
   14db8:	beq	14d9c <__assert_fail@plt+0x22ec>
   14dbc:	mov	r0, #0
   14dc0:	sub	sp, fp, #28
   14dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dc8:	ldrd	r4, [sl, #48]	; 0x30
   14dcc:	mov	r0, #1
   14dd0:	subs	r1, r2, r4
   14dd4:	sbcs	r1, r3, r5
   14dd8:	movcs	r0, #0
   14ddc:	sub	sp, fp, #28
   14de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14de4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14de8:	add	fp, sp, #24
   14dec:	mov	r6, r1
   14df0:	mov	r5, r2
   14df4:	mov	r2, r0
   14df8:	mov	r4, r1
   14dfc:	ldr	r0, [r6, #96]!	; 0x60
   14e00:	add	r7, r5, #40	; 0x28
   14e04:	ldr	r1, [r6, #4]
   14e08:	orrs	r3, r0, r1
   14e0c:	beq	14e28 <__assert_fail@plt+0x2378>
   14e10:	ldrd	r8, [r7]
   14e14:	eor	r1, r1, r9
   14e18:	eor	r0, r0, r8
   14e1c:	orrs	r0, r0, r1
   14e20:	mov	r0, #0
   14e24:	bne	14e88 <__assert_fail@plt+0x23d8>
   14e28:	movw	r0, #20040	; 0x4e48
   14e2c:	movt	r0, #6
   14e30:	ldr	r1, [r0, #12]
   14e34:	mov	r0, r2
   14e38:	mov	r2, r4
   14e3c:	bl	18a00 <__assert_fail@plt+0x5f50>
   14e40:	mov	r1, r0
   14e44:	mov	r0, #0
   14e48:	cmp	r1, #0
   14e4c:	bne	14e88 <__assert_fail@plt+0x23d8>
   14e50:	ldrd	r2, [r7]
   14e54:	ldrd	r6, [r6]
   14e58:	eor	r1, r7, r3
   14e5c:	eor	r2, r6, r2
   14e60:	orrs	r1, r2, r1
   14e64:	bne	14e88 <__assert_fail@plt+0x23d8>
   14e68:	add	r0, r5, #48	; 0x30
   14e6c:	ldrd	r2, [r4]
   14e70:	ldrd	r0, [r0]
   14e74:	eor	r1, r3, r1
   14e78:	eor	r0, r2, r0
   14e7c:	orr	r0, r0, r1
   14e80:	clz	r0, r0
   14e84:	lsr	r0, r0, #5
   14e88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14e8c:	mov	r0, #1
   14e90:	bx	lr
   14e94:	push	{fp, lr}
   14e98:	mov	fp, sp
   14e9c:	movw	ip, #20040	; 0x4e48
   14ea0:	movt	ip, #6
   14ea4:	ldrb	r0, [ip, #5]
   14ea8:	cmp	r0, #0
   14eac:	beq	14f20 <__assert_fail@plt+0x2470>
   14eb0:	ldr	r3, [ip, #8]
   14eb4:	mov	r0, #0
   14eb8:	cmp	r3, #0
   14ebc:	popeq	{fp, pc}
   14ec0:	ldrb	r0, [ip, #4]
   14ec4:	cmp	r0, #0
   14ec8:	ldrne	r3, [r1, #16]
   14ecc:	and	r0, r3, #61440	; 0xf000
   14ed0:	sub	r0, r0, #4096	; 0x1000
   14ed4:	lsr	r1, r0, #14
   14ed8:	cmp	r1, #2
   14edc:	bhi	14ef8 <__assert_fail@plt+0x2448>
   14ee0:	lsr	r1, r0, #12
   14ee4:	movw	ip, #2731	; 0xaab
   14ee8:	mov	r0, #1
   14eec:	uxth	r3, r1
   14ef0:	tst	r0, ip, lsr r3
   14ef4:	bne	14f00 <__assert_fail@plt+0x2450>
   14ef8:	mov	r0, #0
   14efc:	pop	{fp, pc}
   14f00:	movw	r3, #55868	; 0xda3c
   14f04:	movt	r3, #4
   14f08:	ldr	r1, [r3, r1, lsl #2]
   14f0c:	add	r1, r2, r1
   14f10:	ldrb	r1, [r1, #40]	; 0x28
   14f14:	cmp	r1, #0
   14f18:	moveq	r0, #0
   14f1c:	pop	{fp, pc}
   14f20:	movw	r0, #55220	; 0xd7b4
   14f24:	movw	r1, #54763	; 0xd5eb
   14f28:	movw	r3, #55236	; 0xd7c4
   14f2c:	movw	r2, #977	; 0x3d1
   14f30:	movt	r0, #4
   14f34:	movt	r1, #4
   14f38:	movt	r3, #4
   14f3c:	bl	12ab0 <__assert_fail@plt>
   14f40:	ldr	r0, [r2, #40]	; 0x28
   14f44:	cmp	r0, #2
   14f48:	beq	14f78 <__assert_fail@plt+0x24c8>
   14f4c:	cmp	r0, #1
   14f50:	beq	14f98 <__assert_fail@plt+0x24e8>
   14f54:	cmp	r0, #0
   14f58:	bne	14f90 <__assert_fail@plt+0x24e0>
   14f5c:	ldr	r1, [r1, #24]
   14f60:	ldrd	r2, [r2, #48]	; 0x30
   14f64:	mov	r0, #1
   14f68:	subs	r1, r2, r1
   14f6c:	sbcs	r1, r3, #0
   14f70:	bcs	14f90 <__assert_fail@plt+0x24e0>
   14f74:	bx	lr
   14f78:	ldr	r0, [r1, #24]
   14f7c:	ldrd	r2, [r2, #48]	; 0x30
   14f80:	eor	r0, r2, r0
   14f84:	orrs	r0, r0, r3
   14f88:	mov	r0, #1
   14f8c:	bxeq	lr
   14f90:	mov	r0, #0
   14f94:	bx	lr
   14f98:	ldrd	r2, [r2, #48]	; 0x30
   14f9c:	ldr	r1, [r1, #24]
   14fa0:	mov	r0, #1
   14fa4:	subs	r1, r1, r2
   14fa8:	rscs	r1, r3, #0
   14fac:	movcs	r0, #0
   14fb0:	bx	lr
   14fb4:	nop	{0}
   14fb8:	push	{r4, r6, r7, r8, r9, sl, fp, lr}
   14fbc:	add	fp, sp, #24
   14fc0:	ldrd	r6, [r1, #72]	; 0x48
   14fc4:	ldrd	r8, [r1, #88]	; 0x58
   14fc8:	mov	r4, r2
   14fcc:	cmp	r8, r6
   14fd0:	cmpeq	r7, r9
   14fd4:	beq	1500c <__assert_fail@plt+0x255c>
   14fd8:	mov	r0, r6
   14fdc:	mov	r1, r8
   14fe0:	bl	12888 <difftime@plt>
   14fe4:	sub	r0, r7, r9
   14fe8:	vldr	d16, [pc, #72]	; 15038 <__assert_fail@plt+0x2588>
   14fec:	vmov	s2, r0
   14ff0:	vcvt.f64.s32	d17, s2
   14ff4:	vmla.f64	d0, d17, d16
   14ff8:	vcmpe.f64	d0, #0.0
   14ffc:	vmrs	APSR_nzcv, fpscr
   15000:	bpl	1500c <__assert_fail@plt+0x255c>
   15004:	mov	r0, #0
   15008:	pop	{r4, r6, r7, r8, r9, sl, fp, pc}
   1500c:	movw	r2, #51712	; 0xca00
   15010:	movw	r3, #20864	; 0x5180
   15014:	subs	r1, r9, r7
   15018:	sub	r0, r8, r6
   1501c:	movt	r2, #15258	; 0x3b9a
   15020:	add	r0, r0, r1, asr #31
   15024:	movt	r3, #1
   15028:	addmi	r1, r1, r2
   1502c:	mov	r2, r4
   15030:	pop	{r4, r6, r7, r8, r9, sl, fp, lr}
   15034:	b	13bf0 <__assert_fail@plt+0x1140>
   15038:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   1503c:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   15040:	ldr	r0, [r1, #24]
   15044:	ldr	r1, [r2, #40]	; 0x28
   15048:	sub	r0, r1, r0
   1504c:	clz	r0, r0
   15050:	lsr	r0, r0, #5
   15054:	bx	lr
   15058:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1505c:	add	fp, sp, #24
   15060:	sub	sp, sp, #104	; 0x68
   15064:	mov	r8, r2
   15068:	mov	r9, r1
   1506c:	mov	r7, r0
   15070:	bl	194a4 <__assert_fail@plt+0x69f4>
   15074:	mov	r4, sp
   15078:	mov	r6, r0
   1507c:	mov	r0, r4
   15080:	bl	189fc <__assert_fail@plt+0x5f4c>
   15084:	movw	r0, #37676	; 0x932c
   15088:	movw	r5, #20040	; 0x4e48
   1508c:	movw	r2, #37432	; 0x9238
   15090:	cmp	r6, #0
   15094:	mov	r1, r4
   15098:	movt	r0, #1
   1509c:	movt	r5, #6
   150a0:	movt	r2, #1
   150a4:	movne	r2, r0
   150a8:	ldr	r0, [r5, #12]
   150ac:	blx	r2
   150b0:	cmp	r0, #0
   150b4:	beq	15158 <__assert_fail@plt+0x26a8>
   150b8:	bl	194a4 <__assert_fail@plt+0x69f4>
   150bc:	mov	r4, r0
   150c0:	bl	12804 <__errno_location@plt>
   150c4:	cmp	r4, #0
   150c8:	beq	15118 <__assert_fail@plt+0x2668>
   150cc:	ldr	r1, [r0]
   150d0:	cmp	r1, #2
   150d4:	bne	15118 <__assert_fail@plt+0x2668>
   150d8:	ldrb	r0, [r5, #5]
   150dc:	cmp	r0, #0
   150e0:	beq	151e8 <__assert_fail@plt+0x2738>
   150e4:	ldr	r0, [r5, #8]
   150e8:	mov	r6, #0
   150ec:	cmp	r0, #0
   150f0:	beq	151b4 <__assert_fail@plt+0x2704>
   150f4:	ldrb	r1, [r5, #4]
   150f8:	cmp	r1, #0
   150fc:	ldrne	r0, [r9, #16]
   15100:	and	r0, r0, #61440	; 0xf000
   15104:	sub	r0, r0, #4096	; 0x1000
   15108:	lsr	r1, r0, #14
   1510c:	cmp	r1, #2
   15110:	bls	15198 <__assert_fail@plt+0x26e8>
   15114:	b	151b0 <__assert_fail@plt+0x2700>
   15118:	ldr	r4, [r0]
   1511c:	mov	r0, #0
   15120:	mov	r1, r7
   15124:	mov	r6, #0
   15128:	bl	19ee0 <__assert_fail@plt+0x7430>
   1512c:	movw	r2, #12871	; 0x3247
   15130:	mov	r3, r0
   15134:	mov	r0, #0
   15138:	mov	r1, r4
   1513c:	movt	r2, #5
   15140:	bl	1269c <error@plt>
   15144:	mov	r0, #1
   15148:	str	r0, [r5, #28]
   1514c:	mov	r0, r6
   15150:	sub	sp, fp, #24
   15154:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15158:	ldrb	r0, [r5, #5]
   1515c:	cmp	r0, #0
   15160:	beq	151e8 <__assert_fail@plt+0x2738>
   15164:	ldr	r0, [r5, #8]
   15168:	mov	r6, #0
   1516c:	cmp	r0, #0
   15170:	beq	151b4 <__assert_fail@plt+0x2704>
   15174:	ldrb	r1, [r5, #4]
   15178:	ldr	r2, [sp, #16]
   1517c:	cmp	r1, #0
   15180:	moveq	r2, r0
   15184:	and	r0, r2, #61440	; 0xf000
   15188:	sub	r0, r0, #4096	; 0x1000
   1518c:	lsr	r1, r0, #14
   15190:	cmp	r1, #2
   15194:	bhi	151b0 <__assert_fail@plt+0x2700>
   15198:	lsr	r0, r0, #12
   1519c:	movw	r2, #2731	; 0xaab
   151a0:	mov	r6, #1
   151a4:	uxth	r1, r0
   151a8:	tst	r6, r2, lsr r1
   151ac:	bne	151c0 <__assert_fail@plt+0x2710>
   151b0:	mov	r6, #0
   151b4:	mov	r0, r6
   151b8:	sub	sp, fp, #24
   151bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   151c0:	movw	r1, #55868	; 0xda3c
   151c4:	movt	r1, #4
   151c8:	ldr	r0, [r1, r0, lsl #2]
   151cc:	add	r0, r8, r0
   151d0:	ldrb	r0, [r0, #40]	; 0x28
   151d4:	cmp	r0, #0
   151d8:	moveq	r6, #0
   151dc:	mov	r0, r6
   151e0:	sub	sp, fp, #24
   151e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   151e8:	movw	r0, #55220	; 0xd7b4
   151ec:	movw	r1, #54763	; 0xd5eb
   151f0:	movw	r3, #55236	; 0xd7c4
   151f4:	movw	r2, #977	; 0x3d1
   151f8:	movt	r0, #4
   151fc:	movt	r1, #4
   15200:	movt	r3, #4
   15204:	bl	12ab0 <__assert_fail@plt>
   15208:	push	{r4, r5, r6, r7, fp, lr}
   1520c:	add	fp, sp, #16
   15210:	sub	sp, sp, #8
   15214:	mov	r4, r0
   15218:	movw	r0, #20084	; 0x4e74
   1521c:	mov	r5, r2
   15220:	add	r2, sp, #4
   15224:	movt	r0, #6
   15228:	ldr	r3, [r0, #64]	; 0x40
   1522c:	movw	r0, #20040	; 0x4e48
   15230:	movt	r0, #6
   15234:	ldr	r1, [r0, #12]
   15238:	ldr	r0, [r0, #16]
   1523c:	blx	r3
   15240:	cmn	r0, #1
   15244:	ble	15278 <__assert_fail@plt+0x27c8>
   15248:	ldr	r0, [r5, #40]	; 0x28
   1524c:	ldr	r1, [sp, #4]
   15250:	mov	r2, #0
   15254:	bl	126c0 <fnmatch@plt>
   15258:	mov	r4, r0
   1525c:	ldr	r0, [sp, #4]
   15260:	bl	129d8 <freecon@plt>
   15264:	clz	r0, r4
   15268:	lsr	r5, r0, #5
   1526c:	mov	r0, r5
   15270:	sub	sp, fp, #16
   15274:	pop	{r4, r5, r6, r7, fp, pc}
   15278:	bl	12804 <__errno_location@plt>
   1527c:	movw	r1, #55301	; 0xd805
   15280:	ldr	r6, [r0]
   15284:	mov	r0, #0
   15288:	mov	r2, #5
   1528c:	mov	r5, #0
   15290:	movt	r1, #4
   15294:	bl	12564 <dcgettext@plt>
   15298:	mov	r7, r0
   1529c:	mov	r0, #0
   152a0:	mov	r1, r4
   152a4:	bl	19ee0 <__assert_fail@plt+0x7430>
   152a8:	mov	r3, r0
   152ac:	mov	r0, #0
   152b0:	mov	r1, r6
   152b4:	mov	r2, r7
   152b8:	bl	1269c <error@plt>
   152bc:	mov	r0, r5
   152c0:	sub	sp, fp, #16
   152c4:	pop	{r4, r5, r6, r7, fp, pc}
   152c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   152cc:	add	fp, sp, #24
   152d0:	sub	sp, sp, #264	; 0x108
   152d4:	mov	r4, r0
   152d8:	cmp	r1, #0
   152dc:	beq	1537c <__assert_fail@plt+0x28cc>
   152e0:	movw	r8, #55323	; 0xd81b
   152e4:	add	r6, sp, #4
   152e8:	mov	r5, r1
   152ec:	mov	r9, #0
   152f0:	movt	r8, #4
   152f4:	sub	r7, r6, #1
   152f8:	ldr	r1, [r5, #4]
   152fc:	mov	r2, #0
   15300:	cmp	r1, #0
   15304:	bne	15340 <__assert_fail@plt+0x2890>
   15308:	b	15318 <__assert_fail@plt+0x2868>
   1530c:	mov	r1, r0
   15310:	mov	r2, r6
   15314:	strb	r9, [r6, r1]
   15318:	mov	r0, r4
   1531c:	mov	r1, r8
   15320:	bl	127f8 <fprintf@plt>
   15324:	ldr	r5, [r5, #152]	; 0x98
   15328:	cmp	r5, #0
   1532c:	beq	1537c <__assert_fail@plt+0x28cc>
   15330:	ldr	r1, [r5, #4]
   15334:	mov	r2, #0
   15338:	cmp	r1, #0
   1533c:	beq	15318 <__assert_fail@plt+0x2868>
   15340:	mov	r0, r6
   15344:	bl	12660 <strcpy@plt>
   15348:	bl	127bc <strlen@plt>
   1534c:	subs	r1, r0, #1
   15350:	bmi	1530c <__assert_fail@plt+0x285c>
   15354:	ldrb	r1, [r7, r0]
   15358:	cmp	r1, #32
   1535c:	cmpne	r1, #9
   15360:	bne	1530c <__assert_fail@plt+0x285c>
   15364:	sub	r1, r0, #1
   15368:	sub	r0, r0, #2
   1536c:	cmn	r0, #1
   15370:	mov	r0, r1
   15374:	bgt	15354 <__assert_fail@plt+0x28a4>
   15378:	b	15310 <__assert_fail@plt+0x2860>
   1537c:	mov	r0, #10
   15380:	mov	r1, r4
   15384:	bl	12948 <fputc@plt>
   15388:	sub	sp, fp, #24
   1538c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15390:	cmp	r1, #0
   15394:	bxeq	lr
   15398:	push	{r4, r5, fp, lr}
   1539c:	add	fp, sp, #8
   153a0:	sub	sp, sp, #8
   153a4:	mov	r5, r1
   153a8:	ldr	r1, [r1, #156]	; 0x9c
   153ac:	mov	r4, r0
   153b0:	bl	154c4 <__assert_fail@plt+0x2a14>
   153b4:	ldrb	r2, [r5, #20]
   153b8:	ldrb	r0, [r5, #18]
   153bc:	movw	ip, #61103	; 0xeeaf
   153c0:	ldrb	r1, [r5, #19]
   153c4:	movw	r3, #55362	; 0xd842
   153c8:	movt	ip, #4
   153cc:	movt	r3, #4
   153d0:	cmp	r2, #0
   153d4:	movw	r2, #55336	; 0xd828
   153d8:	moveq	r3, ip
   153dc:	cmp	r0, #0
   153e0:	movt	r2, #4
   153e4:	mov	r0, r4
   153e8:	moveq	r2, ip
   153ec:	cmp	r1, #0
   153f0:	movw	r1, #55329	; 0xd821
   153f4:	str	r3, [sp]
   153f8:	movw	r3, #55349	; 0xd835
   153fc:	movt	r1, #4
   15400:	movt	r3, #4
   15404:	moveq	r3, ip
   15408:	bl	127f8 <fprintf@plt>
   1540c:	mov	r0, r4
   15410:	mov	r1, r5
   15414:	bl	16020 <__assert_fail@plt+0x3570>
   15418:	vldr	s0, [r5, #28]
   1541c:	movw	r1, #55375	; 0xd84f
   15420:	mov	r0, r4
   15424:	movt	r1, #4
   15428:	vcvt.f64.f32	d16, s0
   1542c:	vmov	r2, r3, d16
   15430:	bl	127f8 <fprintf@plt>
   15434:	movw	r0, #20084	; 0x4e74
   15438:	movt	r0, #6
   1543c:	ldrb	r0, [r0, #44]	; 0x2c
   15440:	tst	r0, #64	; 0x40
   15444:	beq	154b0 <__assert_fail@plt+0x2a00>
   15448:	ldr	r3, [r5, #164]	; 0xa4
   1544c:	ldr	r2, [r5, #168]	; 0xa8
   15450:	movw	r1, #55401	; 0xd869
   15454:	mov	r0, r4
   15458:	movt	r1, #4
   1545c:	bl	127f8 <fprintf@plt>
   15460:	ldr	r0, [r5, #164]	; 0xa4
   15464:	cmp	r0, #0
   15468:	beq	15498 <__assert_fail@plt+0x29e8>
   1546c:	vmov	s2, r0
   15470:	vldr	s0, [r5, #168]	; 0xa8
   15474:	movw	r1, #55428	; 0xd884
   15478:	mov	r0, r4
   1547c:	movt	r1, #4
   15480:	vcvt.f64.u32	d16, s2
   15484:	vcvt.f64.u32	d17, s0
   15488:	vdiv.f64	d16, d17, d16
   1548c:	vmov	r2, r3, d16
   15490:	bl	127f8 <fprintf@plt>
   15494:	b	154b0 <__assert_fail@plt+0x2a00>
   15498:	movw	r0, #55436	; 0xd88c
   1549c:	mov	r1, #4
   154a0:	mov	r2, #1
   154a4:	mov	r3, r4
   154a8:	movt	r0, #4
   154ac:	bl	12618 <fwrite@plt>
   154b0:	ldr	r1, [r5, #160]	; 0xa0
   154b4:	mov	r0, r4
   154b8:	sub	sp, fp, #8
   154bc:	pop	{r4, r5, fp, lr}
   154c0:	b	154c4 <__assert_fail@plt+0x2a14>
   154c4:	push	{r4, r5, fp, lr}
   154c8:	add	fp, sp, #8
   154cc:	cmp	r1, #0
   154d0:	popeq	{r4, r5, fp, pc}
   154d4:	mov	r5, r1
   154d8:	movw	r1, #15672	; 0x3d38
   154dc:	mov	r4, r0
   154e0:	movw	r0, #19020	; 0x4a4c
   154e4:	movt	r0, #1
   154e8:	movt	r1, #1
   154ec:	ldr	r3, [r5]
   154f0:	ldr	r2, [r5, #156]	; 0x9c
   154f4:	cmp	r3, r0
   154f8:	cmpne	r3, r1
   154fc:	bne	15518 <__assert_fail@plt+0x2a68>
   15500:	cmp	r2, #0
   15504:	bne	1552c <__assert_fail@plt+0x2a7c>
   15508:	ldr	r5, [r5, #160]	; 0xa0
   1550c:	cmp	r5, #0
   15510:	bne	154ec <__assert_fail@plt+0x2a3c>
   15514:	pop	{r4, r5, fp, pc}
   15518:	cmp	r2, #0
   1551c:	bne	1552c <__assert_fail@plt+0x2a7c>
   15520:	ldr	r0, [r5, #160]	; 0xa0
   15524:	cmp	r0, #0
   15528:	beq	1556c <__assert_fail@plt+0x2abc>
   1552c:	movw	r0, #55860	; 0xda34
   15530:	mov	r1, #3
   15534:	mov	r2, #1
   15538:	mov	r3, r4
   1553c:	movt	r0, #4
   15540:	bl	12618 <fwrite@plt>
   15544:	mov	r0, r4
   15548:	mov	r1, r5
   1554c:	bl	15390 <__assert_fail@plt+0x28e0>
   15550:	movw	r0, #55864	; 0xda38
   15554:	mov	r1, #3
   15558:	mov	r2, #1
   1555c:	mov	r3, r4
   15560:	movt	r0, #4
   15564:	pop	{r4, r5, fp, lr}
   15568:	b	12618 <fwrite@plt>
   1556c:	mov	r0, r4
   15570:	mov	r1, r5
   15574:	pop	{r4, r5, fp, lr}
   15578:	b	15390 <__assert_fail@plt+0x28e0>
   1557c:	push	{r4, r5, fp, lr}
   15580:	add	fp, sp, #8
   15584:	mov	r4, r0
   15588:	movw	r0, #20084	; 0x4e74
   1558c:	movt	r0, #6
   15590:	ldrb	r0, [r0, #44]	; 0x2c
   15594:	tst	r0, #64	; 0x40
   15598:	popeq	{r4, r5, fp, pc}
   1559c:	movw	r5, #17744	; 0x4550
   155a0:	movw	r0, #55441	; 0xd891
   155a4:	mov	r1, #42	; 0x2a
   155a8:	mov	r2, #1
   155ac:	movt	r5, #6
   155b0:	movt	r0, #4
   155b4:	ldr	r3, [r5]
   155b8:	bl	12618 <fwrite@plt>
   155bc:	ldr	r0, [r5]
   155c0:	mov	r1, r4
   155c4:	bl	15390 <__assert_fail@plt+0x28e0>
   155c8:	ldr	r1, [r5]
   155cc:	mov	r0, #10
   155d0:	pop	{r4, r5, fp, lr}
   155d4:	b	12948 <fputc@plt>
   155d8:	push	{fp, lr}
   155dc:	mov	fp, sp
   155e0:	cmp	r0, #0
   155e4:	popeq	{fp, pc}
   155e8:	movw	lr, #19516	; 0x4c3c
   155ec:	movw	ip, #19632	; 0x4cb0
   155f0:	movt	lr, #1
   155f4:	movt	ip, #1
   155f8:	ldr	r3, [r0]
   155fc:	cmp	r3, #0
   15600:	bne	15620 <__assert_fail@plt+0x2b70>
   15604:	b	156f0 <__assert_fail@plt+0x2c40>
   15608:	ldr	r0, [r0, #152]	; 0x98
   1560c:	cmp	r0, #0
   15610:	beq	156cc <__assert_fail@plt+0x2c1c>
   15614:	ldr	r3, [r0]
   15618:	cmp	r3, #0
   1561c:	beq	156f0 <__assert_fail@plt+0x2c40>
   15620:	ldr	r2, [r0, #172]	; 0xac
   15624:	cmp	r2, #0
   15628:	beq	15710 <__assert_fail@plt+0x2c60>
   1562c:	ldr	r1, [r2, #12]
   15630:	cmp	r1, #0
   15634:	cmpne	r1, r3
   15638:	bne	156d0 <__assert_fail@plt+0x2c20>
   1563c:	ldr	r1, [r2]
   15640:	cmp	r1, #6
   15644:	bhi	15608 <__assert_fail@plt+0x2b58>
   15648:	add	r2, pc, #0
   1564c:	ldr	pc, [r2, r1, lsl #2]
   15650:	andeq	r5, r1, r0, lsr r7
   15654:	andeq	r5, r1, ip, ror #12
   15658:	andeq	r5, r1, r0, asr r7
   1565c:	andeq	r5, r1, ip, ror #12
   15660:	andeq	r5, r1, ip, ror #12
   15664:	andeq	r5, r1, ip, ror #12
   15668:	andeq	r5, r1, r8, lsl #13
   1566c:	ldrb	r1, [r0, #17]
   15670:	cmp	r1, #0
   15674:	bne	15770 <__assert_fail@plt+0x2cc0>
   15678:	ldrb	r1, [r0, #16]
   1567c:	cmp	r1, #0
   15680:	beq	15608 <__assert_fail@plt+0x2b58>
   15684:	b	15790 <__assert_fail@plt+0x2ce0>
   15688:	ldrb	r1, [r0, #16]
   1568c:	cmp	r1, #0
   15690:	beq	157b0 <__assert_fail@plt+0x2d00>
   15694:	cmp	r3, lr
   15698:	cmpne	r3, ip
   1569c:	beq	15608 <__assert_fail@plt+0x2b58>
   156a0:	ldrb	r1, [r0, #17]
   156a4:	cmp	r1, #0
   156a8:	bne	15608 <__assert_fail@plt+0x2b58>
   156ac:	movw	r0, #55705	; 0xd999
   156b0:	movw	r1, #54763	; 0xd5eb
   156b4:	movw	r3, #55505	; 0xd8d1
   156b8:	movw	r2, #1349	; 0x545
   156bc:	movt	r0, #4
   156c0:	movt	r1, #4
   156c4:	movt	r3, #4
   156c8:	bl	12ab0 <__assert_fail@plt>
   156cc:	pop	{fp, pc}
   156d0:	movw	r0, #55578	; 0xd91a
   156d4:	movw	r1, #54763	; 0xd5eb
   156d8:	movw	r3, #55505	; 0xd8d1
   156dc:	movw	r2, #1322	; 0x52a
   156e0:	movt	r0, #4
   156e4:	movt	r1, #4
   156e8:	movt	r3, #4
   156ec:	bl	12ab0 <__assert_fail@plt>
   156f0:	movw	r0, #55484	; 0xd8bc
   156f4:	movw	r1, #54763	; 0xd5eb
   156f8:	movw	r3, #55505	; 0xd8d1
   156fc:	movw	r2, #1310	; 0x51e
   15700:	movt	r0, #4
   15704:	movt	r1, #4
   15708:	movt	r3, #4
   1570c:	bl	12ab0 <__assert_fail@plt>
   15710:	movw	r0, #55554	; 0xd902
   15714:	movw	r1, #54763	; 0xd5eb
   15718:	movw	r3, #55505	; 0xd8d1
   1571c:	movw	r2, #1313	; 0x521
   15720:	movt	r0, #4
   15724:	movt	r1, #4
   15728:	movt	r3, #4
   1572c:	bl	12ab0 <__assert_fail@plt>
   15730:	movw	r0, #55621	; 0xd945
   15734:	movw	r1, #54763	; 0xd5eb
   15738:	movw	r3, #55505	; 0xd8d1
   1573c:	movw	r2, #1338	; 0x53a
   15740:	movt	r0, #4
   15744:	movt	r1, #4
   15748:	movt	r3, #4
   1574c:	bl	12ab0 <__assert_fail@plt>
   15750:	movw	r0, #55657	; 0xd969
   15754:	movw	r1, #54763	; 0xd5eb
   15758:	movw	r3, #55505	; 0xd8d1
   1575c:	movw	r2, #1339	; 0x53b
   15760:	movt	r0, #4
   15764:	movt	r1, #4
   15768:	movt	r3, #4
   1576c:	bl	12ab0 <__assert_fail@plt>
   15770:	movw	r0, #55704	; 0xd998
   15774:	movw	r1, #54763	; 0xd5eb
   15778:	movw	r3, #55505	; 0xd8d1
   1577c:	movw	r2, #1363	; 0x553
   15780:	movt	r0, #4
   15784:	movt	r1, #4
   15788:	movt	r3, #4
   1578c:	bl	12ab0 <__assert_fail@plt>
   15790:	movw	r0, #55725	; 0xd9ad
   15794:	movw	r1, #54763	; 0xd5eb
   15798:	movw	r3, #55505	; 0xd8d1
   1579c:	movw	r2, #1364	; 0x554
   157a0:	movt	r0, #4
   157a4:	movt	r1, #4
   157a8:	movt	r3, #4
   157ac:	bl	12ab0 <__assert_fail@plt>
   157b0:	movw	r0, #55726	; 0xd9ae
   157b4:	movw	r1, #54763	; 0xd5eb
   157b8:	movw	r3, #55505	; 0xd8d1
   157bc:	movw	r2, #1343	; 0x53f
   157c0:	movt	r0, #4
   157c4:	movt	r1, #4
   157c8:	movt	r3, #4
   157cc:	bl	12ab0 <__assert_fail@plt>
   157d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157d4:	add	fp, sp, #28
   157d8:	sub	sp, sp, #36	; 0x24
   157dc:	mov	r8, r2
   157e0:	mov	r9, r0
   157e4:	mov	r4, r2
   157e8:	ldr	r0, [r8], #40	; 0x28
   157ec:	bl	19eb0 <__assert_fail@plt+0x7400>
   157f0:	mov	sl, r0
   157f4:	cmp	r0, #0
   157f8:	beq	15880 <__assert_fail@plt+0x2dd0>
   157fc:	ldr	r0, [r4, #116]	; 0x74
   15800:	cmp	r0, #0
   15804:	bne	15960 <__assert_fail@plt+0x2eb0>
   15808:	movw	r5, #20040	; 0x4e48
   1580c:	mov	r1, #47	; 0x2f
   15810:	movt	r5, #6
   15814:	ldr	r6, [r5, #12]
   15818:	mov	r0, r6
   1581c:	bl	127c8 <strchr@plt>
   15820:	cmp	r0, #0
   15824:	beq	1591c <__assert_fail@plt+0x2e6c>
   15828:	mov	r0, r6
   1582c:	bl	23c5c <__assert_fail@plt+0x111ac>
   15830:	ldr	r5, [r5, #16]
   15834:	mov	r6, r0
   15838:	mov	r0, #8
   1583c:	bl	306e8 <__assert_fail@plt+0x1dc38>
   15840:	mov	r1, #0
   15844:	str	r0, [r4, #144]	; 0x90
   15848:	mov	r2, #0
   1584c:	str	r1, [r0, #4]
   15850:	mov	r0, r5
   15854:	mov	r1, r6
   15858:	bl	2821c <__assert_fail@plt+0x1576c>
   1585c:	ldr	r1, [r4, #144]	; 0x90
   15860:	cmp	r0, #0
   15864:	str	r0, [r1]
   15868:	bmi	15ac4 <__assert_fail@plt+0x3014>
   1586c:	mov	r1, #1
   15870:	bl	2398c <__assert_fail@plt+0x10edc>
   15874:	mov	r0, r6
   15878:	bl	32910 <__assert_fail@plt+0x1fe60>
   1587c:	b	15960 <__assert_fail@plt+0x2eb0>
   15880:	movw	r0, #17776	; 0x4570
   15884:	ldr	r1, [r4, #144]	; 0x90
   15888:	mov	r7, #0
   1588c:	mov	r5, #0
   15890:	mov	r6, #0
   15894:	movt	r0, #6
   15898:	ldr	r0, [r0]
   1589c:	cmp	r1, r0
   158a0:	bne	15aa4 <__assert_fail@plt+0x2ff4>
   158a4:	ldrb	r0, [r8]
   158a8:	cmp	r0, #0
   158ac:	beq	159a0 <__assert_fail@plt+0x2ef0>
   158b0:	mov	r0, r9
   158b4:	bl	127bc <strlen@plt>
   158b8:	mov	r1, #0
   158bc:	add	r2, r8, #4
   158c0:	stm	sp, {r5, r6}
   158c4:	add	r3, r0, #1
   158c8:	str	r1, [sp, #8]
   158cc:	mov	r0, r2
   158d0:	add	r1, r4, #88	; 0x58
   158d4:	mov	r2, r9
   158d8:	bl	209cc <__assert_fail@plt+0xdf1c>
   158dc:	ldr	r0, [r4, #116]	; 0x74
   158e0:	cmp	r0, #0
   158e4:	beq	1590c <__assert_fail@plt+0x2e5c>
   158e8:	movw	r0, #20040	; 0x4e48
   158ec:	mov	r6, #1
   158f0:	movt	r0, #6
   158f4:	strb	r6, [r0, #32]
   158f8:	cmp	r7, #0
   158fc:	bne	15a68 <__assert_fail@plt+0x2fb8>
   15900:	mov	r0, r6
   15904:	sub	sp, fp, #28
   15908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1590c:	mov	r6, #1
   15910:	cmp	r7, #0
   15914:	bne	15a68 <__assert_fail@plt+0x2fb8>
   15918:	b	15900 <__assert_fail@plt+0x2e50>
   1591c:	ldr	r5, [r5, #16]
   15920:	mov	r0, #8
   15924:	bl	306e8 <__assert_fail@plt+0x1dc38>
   15928:	mov	r1, #0
   1592c:	str	r0, [r4, #144]	; 0x90
   15930:	mov	r2, #0
   15934:	str	r1, [r0, #4]
   15938:	movw	r1, #57732	; 0xe184
   1593c:	mov	r0, r5
   15940:	movt	r1, #4
   15944:	bl	2821c <__assert_fail@plt+0x1576c>
   15948:	ldr	r1, [r4, #144]	; 0x90
   1594c:	cmp	r0, #0
   15950:	str	r0, [r1]
   15954:	bmi	15acc <__assert_fail@plt+0x301c>
   15958:	mov	r1, #1
   1595c:	bl	2398c <__assert_fail@plt+0x10edc>
   15960:	movw	r0, #20040	; 0x4e48
   15964:	movt	r0, #6
   15968:	ldr	r0, [r0, #12]
   1596c:	bl	23ba0 <__assert_fail@plt+0x110f0>
   15970:	mov	r9, r0
   15974:	ldrb	r0, [r0]
   15978:	movw	r5, #55981	; 0xdaad
   1597c:	movt	r5, #4
   15980:	mov	r7, r9
   15984:	subs	r0, r0, #47	; 0x2f
   15988:	moveq	r5, r0
   1598c:	movwne	r0, #1
   15990:	lsl	r6, r0, #1
   15994:	ldrb	r0, [r8]
   15998:	cmp	r0, #0
   1599c:	bne	158b0 <__assert_fail@plt+0x2e00>
   159a0:	add	r0, r4, #88	; 0x58
   159a4:	str	r7, [sp, #20]
   159a8:	str	sl, [sp, #24]
   159ac:	str	r0, [sp, #32]
   159b0:	add	r0, r8, #4
   159b4:	str	r0, [sp, #28]
   159b8:	ldr	r0, [r4, #136]	; 0x88
   159bc:	cmp	r0, #1
   159c0:	blt	15a2c <__assert_fail@plt+0x2f7c>
   159c4:	mov	r7, r9
   159c8:	mov	sl, r5
   159cc:	mov	r9, r6
   159d0:	mov	r5, #0
   159d4:	ldr	r0, [r4, #132]	; 0x84
   159d8:	ldr	r6, [r0, r5, lsl #2]
   159dc:	mov	r0, r6
   159e0:	bl	127bc <strlen@plt>
   159e4:	mov	r8, r0
   159e8:	mov	r0, r7
   159ec:	bl	127bc <strlen@plt>
   159f0:	str	r0, [sp, #12]
   159f4:	mov	r0, #0
   159f8:	ldr	r1, [sp, #32]
   159fc:	mov	r2, r6
   15a00:	mov	r3, r8
   15a04:	str	sl, [sp]
   15a08:	str	r9, [sp, #4]
   15a0c:	str	r7, [sp, #8]
   15a10:	str	r0, [sp, #16]
   15a14:	ldr	r0, [sp, #28]
   15a18:	bl	2079c <__assert_fail@plt+0xdcec>
   15a1c:	ldr	r0, [r4, #136]	; 0x88
   15a20:	add	r5, r5, #1
   15a24:	cmp	r5, r0
   15a28:	blt	159d4 <__assert_fail@plt+0x2f24>
   15a2c:	ldr	r0, [sp, #28]
   15a30:	ldr	r1, [sp, #32]
   15a34:	bl	20c48 <__assert_fail@plt+0xe198>
   15a38:	ldrh	r0, [r4, #148]	; 0x94
   15a3c:	ldr	sl, [sp, #24]
   15a40:	bic	r0, r0, #128	; 0x80
   15a44:	cmp	sl, #0
   15a48:	clz	r0, r0
   15a4c:	lsr	r6, r0, #5
   15a50:	beq	15a5c <__assert_fail@plt+0x2fac>
   15a54:	ldr	r0, [r4, #144]	; 0x90
   15a58:	bl	2f644 <__assert_fail@plt+0x1cb94>
   15a5c:	ldr	r7, [sp, #20]
   15a60:	cmp	r7, #0
   15a64:	beq	15900 <__assert_fail@plt+0x2e50>
   15a68:	cmp	sl, #0
   15a6c:	beq	15a84 <__assert_fail@plt+0x2fd4>
   15a70:	mov	r0, r7
   15a74:	bl	32910 <__assert_fail@plt+0x1fe60>
   15a78:	mov	r0, r6
   15a7c:	sub	sp, fp, #28
   15a80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a84:	movw	r0, #56094	; 0xdb1e
   15a88:	movw	r1, #56017	; 0xdad1
   15a8c:	movw	r3, #56024	; 0xdad8
   15a90:	mov	r2, #208	; 0xd0
   15a94:	movt	r0, #4
   15a98:	movt	r1, #4
   15a9c:	movt	r3, #4
   15aa0:	bl	12ab0 <__assert_fail@plt>
   15aa4:	movw	r0, #55984	; 0xdab0
   15aa8:	movw	r1, #56017	; 0xdad1
   15aac:	movw	r3, #56024	; 0xdad8
   15ab0:	mov	r2, #148	; 0x94
   15ab4:	movt	r0, #4
   15ab8:	movt	r1, #4
   15abc:	movt	r3, #4
   15ac0:	bl	12ab0 <__assert_fail@plt>
   15ac4:	mov	r0, r6
   15ac8:	bl	32910 <__assert_fail@plt+0x1fe60>
   15acc:	bl	12804 <__errno_location@plt>
   15ad0:	movw	r1, #55916	; 0xda6c
   15ad4:	ldr	r4, [r0]
   15ad8:	mov	r0, #0
   15adc:	mov	r2, #5
   15ae0:	movt	r1, #4
   15ae4:	bl	12564 <dcgettext@plt>
   15ae8:	mov	r6, r0
   15aec:	mov	r0, #0
   15af0:	mov	r1, r9
   15af4:	bl	19ee0 <__assert_fail@plt+0x7430>
   15af8:	mov	r3, r0
   15afc:	mov	r0, #1
   15b00:	mov	r1, r4
   15b04:	mov	r2, r6
   15b08:	bl	1269c <error@plt>
   15b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b10:	add	fp, sp, #28
   15b14:	sub	sp, sp, #20
   15b18:	movw	r9, #20084	; 0x4e74
   15b1c:	movw	sl, #17744	; 0x4550
   15b20:	mov	r8, r3
   15b24:	mov	r5, r1
   15b28:	movt	r9, #6
   15b2c:	movt	sl, #6
   15b30:	ldrb	r0, [r9, #44]	; 0x2c
   15b34:	tst	r0, #32
   15b38:	bne	15cd8 <__assert_fail@plt+0x3228>
   15b3c:	movw	r0, #17756	; 0x455c
   15b40:	movt	r0, #6
   15b44:	ldr	r0, [r0]
   15b48:	bl	328b4 <__assert_fail@plt+0x1fe04>
   15b4c:	ldr	r0, [sl]
   15b50:	bl	328b4 <__assert_fail@plt+0x1fe04>
   15b54:	movw	r0, #17780	; 0x4574
   15b58:	movt	r0, #6
   15b5c:	ldrb	r1, [r0]
   15b60:	cmp	r1, #0
   15b64:	bne	15b7c <__assert_fail@plt+0x30cc>
   15b68:	mov	r1, #1
   15b6c:	strb	r1, [r0]
   15b70:	mov	r0, #17
   15b74:	mov	r1, #0
   15b78:	bl	12528 <signal@plt>
   15b7c:	bl	1290c <fork@plt>
   15b80:	cmn	r0, #1
   15b84:	beq	15d80 <__assert_fail@plt+0x32d0>
   15b88:	mov	r6, r0
   15b8c:	cmp	r0, #0
   15b90:	beq	15dac <__assert_fail@plt+0x32fc>
   15b94:	add	r7, r5, #108	; 0x6c
   15b98:	mov	r0, r6
   15b9c:	mov	r1, r7
   15ba0:	mov	r2, #0
   15ba4:	bl	1263c <waitpid@plt>
   15ba8:	cmn	r0, #1
   15bac:	bne	15c18 <__assert_fail@plt+0x3168>
   15bb0:	bl	12804 <__errno_location@plt>
   15bb4:	ldr	r4, [r0]
   15bb8:	cmp	r4, #4
   15bbc:	beq	15b98 <__assert_fail@plt+0x30e8>
   15bc0:	movw	r1, #56241	; 0xdbb1
   15bc4:	mov	r0, #0
   15bc8:	mov	r2, #5
   15bcc:	mov	r6, #0
   15bd0:	movt	r1, #4
   15bd4:	bl	12564 <dcgettext@plt>
   15bd8:	ldr	r1, [r8]
   15bdc:	mov	r5, r0
   15be0:	mov	r0, #0
   15be4:	bl	19ee0 <__assert_fail@plt+0x7430>
   15be8:	mov	r3, r0
   15bec:	mov	r0, #0
   15bf0:	mov	r1, r4
   15bf4:	mov	r2, r5
   15bf8:	bl	1269c <error@plt>
   15bfc:	movw	r0, #20040	; 0x4e48
   15c00:	mov	r1, #1
   15c04:	movt	r0, #6
   15c08:	str	r1, [r0, #28]
   15c0c:	mov	r0, r6
   15c10:	sub	sp, fp, #28
   15c14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c18:	ldr	r0, [r7]
   15c1c:	mov	r1, #2130706432	; 0x7f000000
   15c20:	and	r1, r1, r0, lsl #24
   15c24:	add	r1, r1, #16777216	; 0x1000000
   15c28:	cmp	r1, #33554432	; 0x2000000
   15c2c:	blt	15c94 <__assert_fail@plt+0x31e4>
   15c30:	movw	r1, #56262	; 0xdbc6
   15c34:	mov	r0, #0
   15c38:	mov	r2, #5
   15c3c:	movt	r1, #4
   15c40:	bl	12564 <dcgettext@plt>
   15c44:	ldr	r1, [r9, #72]	; 0x48
   15c48:	ldr	r2, [r8]
   15c4c:	mov	r4, r0
   15c50:	mov	r0, #0
   15c54:	bl	2efe4 <__assert_fail@plt+0x1c534>
   15c58:	mov	r3, r0
   15c5c:	ldr	r0, [r5, #108]	; 0x6c
   15c60:	mov	r1, #0
   15c64:	mov	r2, r4
   15c68:	and	r0, r0, #127	; 0x7f
   15c6c:	str	r0, [sp]
   15c70:	mov	r0, #0
   15c74:	bl	1269c <error@plt>
   15c78:	ldrb	r0, [r5]
   15c7c:	cmp	r0, #0
   15c80:	bne	15cbc <__assert_fail@plt+0x320c>
   15c84:	mov	r6, #1
   15c88:	mov	r0, r6
   15c8c:	sub	sp, fp, #28
   15c90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c94:	ldrb	r1, [r9, #44]	; 0x2c
   15c98:	ubfx	r4, r0, #8, #8
   15c9c:	tst	r1, #32
   15ca0:	bne	15d58 <__assert_fail@plt+0x32a8>
   15ca4:	mov	r6, #1
   15ca8:	cmp	r4, #0
   15cac:	beq	15ccc <__assert_fail@plt+0x321c>
   15cb0:	ldrb	r0, [r5]
   15cb4:	cmp	r0, #0
   15cb8:	beq	15ccc <__assert_fail@plt+0x321c>
   15cbc:	movw	r0, #20040	; 0x4e48
   15cc0:	mov	r6, #1
   15cc4:	movt	r0, #6
   15cc8:	str	r6, [r0, #28]
   15ccc:	mov	r0, r6
   15cd0:	sub	sp, fp, #28
   15cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cd8:	ldr	r0, [r5, #48]	; 0x30
   15cdc:	movw	r1, #56100	; 0xdb24
   15ce0:	mov	r4, #0
   15ce4:	movt	r1, #4
   15ce8:	subs	r2, r0, #1
   15cec:	ldr	r0, [sl]
   15cf0:	sbc	r3, r4, #0
   15cf4:	bl	127f8 <fprintf@plt>
   15cf8:	ldr	r0, [r5, #48]	; 0x30
   15cfc:	ldr	r6, [sl]
   15d00:	cmp	r0, #1
   15d04:	beq	15d48 <__assert_fail@plt+0x3298>
   15d08:	movw	r7, #12870	; 0x3246
   15d0c:	movt	r7, #5
   15d10:	ldr	r0, [r5, #52]	; 0x34
   15d14:	ldr	r1, [r0, r4, lsl #2]
   15d18:	mov	r0, #0
   15d1c:	bl	19ee0 <__assert_fail@plt+0x7430>
   15d20:	mov	r2, r0
   15d24:	mov	r0, r6
   15d28:	mov	r1, r7
   15d2c:	bl	127f8 <fprintf@plt>
   15d30:	ldr	r0, [r5, #48]	; 0x30
   15d34:	ldr	r6, [sl]
   15d38:	add	r4, r4, #1
   15d3c:	sub	r0, r0, #1
   15d40:	cmp	r4, r0
   15d44:	bcc	15d10 <__assert_fail@plt+0x3260>
   15d48:	mov	r0, #10
   15d4c:	mov	r1, r6
   15d50:	bl	12948 <fputc@plt>
   15d54:	b	15b3c <__assert_fail@plt+0x308c>
   15d58:	ldr	r0, [sl]
   15d5c:	movw	r1, #56289	; 0xdbe1
   15d60:	mov	r2, r6
   15d64:	mov	r3, r4
   15d68:	movt	r1, #4
   15d6c:	bl	127f8 <fprintf@plt>
   15d70:	mov	r6, #1
   15d74:	cmp	r4, #0
   15d78:	bne	15cb0 <__assert_fail@plt+0x3200>
   15d7c:	b	15ccc <__assert_fail@plt+0x321c>
   15d80:	bl	12804 <__errno_location@plt>
   15d84:	movw	r1, #56142	; 0xdb4e
   15d88:	ldr	r4, [r0]
   15d8c:	mov	r0, #0
   15d90:	mov	r2, #5
   15d94:	movt	r1, #4
   15d98:	bl	12564 <dcgettext@plt>
   15d9c:	mov	r2, r0
   15da0:	mov	r0, #1
   15da4:	mov	r1, r4
   15da8:	bl	1269c <error@plt>
   15dac:	ldr	r6, [r5, #104]	; 0x68
   15db0:	cmp	r6, #0
   15db4:	bne	15dd8 <__assert_fail@plt+0x3328>
   15db8:	movw	r0, #56154	; 0xdb5a
   15dbc:	movw	r1, #56017	; 0xdad1
   15dc0:	movw	r3, #56181	; 0xdb75
   15dc4:	movw	r2, #321	; 0x141
   15dc8:	movt	r0, #4
   15dcc:	movt	r1, #4
   15dd0:	movt	r3, #4
   15dd4:	bl	12ab0 <__assert_fail@plt>
   15dd8:	ldrb	r0, [r5, #100]	; 0x64
   15ddc:	mov	r5, #1
   15de0:	cmp	r0, #0
   15de4:	beq	15e98 <__assert_fail@plt+0x33e8>
   15de8:	movw	r0, #56416	; 0xdc60
   15dec:	mov	r5, #0
   15df0:	movt	r0, #4
   15df4:	vldr	d16, [r0]
   15df8:	mov	r0, #108	; 0x6c
   15dfc:	strh	r0, [sp, #16]
   15e00:	mov	r0, #0
   15e04:	vstr	d16, [sp, #8]
   15e08:	bl	12a68 <close@plt>
   15e0c:	cmn	r0, #1
   15e10:	bgt	15e54 <__assert_fail@plt+0x33a4>
   15e14:	bl	12804 <__errno_location@plt>
   15e18:	movw	r1, #56351	; 0xdc1f
   15e1c:	ldr	r4, [r0]
   15e20:	mov	r0, #0
   15e24:	mov	r2, #5
   15e28:	movt	r1, #4
   15e2c:	bl	12564 <dcgettext@plt>
   15e30:	mov	r2, r0
   15e34:	mov	r0, #0
   15e38:	mov	r1, r4
   15e3c:	bl	1269c <error@plt>
   15e40:	mov	r0, r6
   15e44:	bl	2f628 <__assert_fail@plt+0x1cb78>
   15e48:	cmp	r0, #0
   15e4c:	beq	15ea8 <__assert_fail@plt+0x33f8>
   15e50:	b	15ee0 <__assert_fail@plt+0x3430>
   15e54:	add	r0, sp, #8
   15e58:	mov	r1, #131072	; 0x20000
   15e5c:	bl	23d34 <__assert_fail@plt+0x11284>
   15e60:	mov	r5, #1
   15e64:	cmn	r0, #1
   15e68:	bgt	15e98 <__assert_fail@plt+0x33e8>
   15e6c:	bl	12804 <__errno_location@plt>
   15e70:	ldr	r4, [r0]
   15e74:	add	r1, sp, #8
   15e78:	mov	r0, #0
   15e7c:	bl	19ee0 <__assert_fail@plt+0x7430>
   15e80:	movw	r2, #12871	; 0x3247
   15e84:	mov	r3, r0
   15e88:	mov	r0, #0
   15e8c:	mov	r1, r4
   15e90:	movt	r2, #5
   15e94:	bl	1269c <error@plt>
   15e98:	mov	r0, r6
   15e9c:	bl	2f628 <__assert_fail@plt+0x1cb78>
   15ea0:	cmp	r0, #0
   15ea4:	bne	15ee0 <__assert_fail@plt+0x3430>
   15ea8:	cmp	r5, #0
   15eac:	beq	15f4c <__assert_fail@plt+0x349c>
   15eb0:	bl	21c00 <__assert_fail@plt+0xf150>
   15eb4:	cmp	r0, #0
   15eb8:	beq	15ec0 <__assert_fail@plt+0x3410>
   15ebc:	bl	21c20 <__assert_fail@plt+0xf170>
   15ec0:	mov	r0, r8
   15ec4:	bl	21444 <__assert_fail@plt+0xe994>
   15ec8:	cmp	r0, #0
   15ecc:	beq	15f54 <__assert_fail@plt+0x34a4>
   15ed0:	bl	12804 <__errno_location@plt>
   15ed4:	mov	r1, #7
   15ed8:	str	r1, [r0]
   15edc:	b	15f64 <__assert_fail@plt+0x34b4>
   15ee0:	bl	12804 <__errno_location@plt>
   15ee4:	movw	r1, #56379	; 0xdc3b
   15ee8:	ldr	r4, [r0]
   15eec:	mov	r0, #0
   15ef0:	mov	r2, #5
   15ef4:	movt	r1, #4
   15ef8:	bl	12564 <dcgettext@plt>
   15efc:	mov	r2, r0
   15f00:	ldr	r0, [r6]
   15f04:	cmn	r0, #1
   15f08:	bgt	15f30 <__assert_fail@plt+0x3480>
   15f0c:	ldr	r0, [r6, #4]
   15f10:	movw	r1, #61103	; 0xeeaf
   15f14:	movw	r3, #3076	; 0xc04
   15f18:	movt	r1, #4
   15f1c:	movt	r3, #5
   15f20:	cmp	r0, #0
   15f24:	moveq	r3, r1
   15f28:	moveq	r0, r1
   15f2c:	b	15f3c <__assert_fail@plt+0x348c>
   15f30:	movw	r3, #61103	; 0xeeaf
   15f34:	movt	r3, #4
   15f38:	mov	r0, r3
   15f3c:	str	r0, [sp]
   15f40:	mov	r0, #0
   15f44:	mov	r1, r4
   15f48:	bl	1269c <error@plt>
   15f4c:	mov	r0, #1
   15f50:	bl	124d4 <_exit@plt>
   15f54:	ldr	r0, [r8]
   15f58:	mov	r1, r8
   15f5c:	bl	124ec <execvp@plt>
   15f60:	bl	12804 <__errno_location@plt>
   15f64:	ldr	r1, [r8]
   15f68:	ldr	r4, [r0]
   15f6c:	mov	r0, #0
   15f70:	bl	19ee0 <__assert_fail@plt+0x7430>
   15f74:	movw	r2, #12871	; 0x3247
   15f78:	mov	r3, r0
   15f7c:	mov	r0, #0
   15f80:	mov	r1, r4
   15f84:	movt	r2, #5
   15f88:	bl	1269c <error@plt>
   15f8c:	mov	r0, #1
   15f90:	bl	124d4 <_exit@plt>
   15f94:	push	{r4, r5, r6, r7, fp, lr}
   15f98:	add	fp, sp, #16
   15f9c:	movw	r6, #17788	; 0x457c
   15fa0:	mov	r5, r0
   15fa4:	cmp	r1, #0
   15fa8:	mov	r4, r1
   15fac:	movt	r6, #6
   15fb0:	movwne	r4, #16
   15fb4:	ldr	r0, [r6]
   15fb8:	cmp	r0, #0
   15fbc:	beq	15ff8 <__assert_fail@plt+0x3548>
   15fc0:	mov	r7, #0
   15fc4:	ldr	r0, [r6, #4]
   15fc8:	mov	r2, r4
   15fcc:	ldr	r1, [r0, r7, lsl #2]
   15fd0:	mov	r0, r5
   15fd4:	bl	126c0 <fnmatch@plt>
   15fd8:	cmp	r0, #0
   15fdc:	beq	16018 <__assert_fail@plt+0x3568>
   15fe0:	ldr	r0, [r6]
   15fe4:	add	r7, r7, #1
   15fe8:	cmp	r7, r0
   15fec:	bcc	15fc4 <__assert_fail@plt+0x3514>
   15ff0:	mov	r0, #0
   15ff4:	pop	{r4, r5, r6, r7, fp, pc}
   15ff8:	movw	r1, #57732	; 0xe184
   15ffc:	mov	r0, r5
   16000:	mov	r2, r4
   16004:	movt	r1, #4
   16008:	bl	126c0 <fnmatch@plt>
   1600c:	clz	r0, r0
   16010:	lsr	r0, r0, #5
   16014:	pop	{r4, r5, r6, r7, fp, pc}
   16018:	mov	r0, #1
   1601c:	pop	{r4, r5, r6, r7, fp, pc}
   16020:	ldr	r3, [r1, #36]	; 0x24
   16024:	ldr	r2, [r1, #4]
   16028:	mov	ip, r0
   1602c:	cmp	r3, #0
   16030:	beq	16044 <__assert_fail@plt+0x3594>
   16034:	movw	r1, #56426	; 0xdc6a
   16038:	mov	r0, ip
   1603c:	movt	r1, #4
   16040:	b	127f8 <fprintf@plt>
   16044:	mov	r0, r2
   16048:	mov	r1, ip
   1604c:	b	12a44 <fputs@plt>
   16050:	movw	r0, #17788	; 0x457c
   16054:	movt	r0, #6
   16058:	ldr	r0, [r0, #8]
   1605c:	bx	lr
   16060:	push	{r4, sl, fp, lr}
   16064:	add	fp, sp, #8
   16068:	cmp	r0, #0
   1606c:	beq	1622c <__assert_fail@plt+0x377c>
   16070:	mov	r4, r0
   16074:	ldr	r0, [r0, #160]	; 0xa0
   16078:	cmp	r0, #0
   1607c:	blne	16060 <__assert_fail@plt+0x35b0>
   16080:	ldr	r0, [r4, #156]	; 0x9c
   16084:	cmp	r0, #0
   16088:	blne	16060 <__assert_fail@plt+0x35b0>
   1608c:	ldr	r0, [r4, #8]
   16090:	cmp	r0, #5
   16094:	bhi	1624c <__assert_fail@plt+0x379c>
   16098:	add	r1, pc, #0
   1609c:	ldr	pc, [r1, r0, lsl #2]
   160a0:	strheq	r6, [r1], -r8
   160a4:	andeq	r6, r1, r4, lsr #3
   160a8:	strdeq	r6, [r1], -r4
   160ac:	andeq	r6, r1, r8, asr #2
   160b0:	andeq	r6, r1, ip, ror #4
   160b4:	andeq	r6, r1, ip, lsl #5
   160b8:	ldr	r0, [r4, #160]	; 0xa0
   160bc:	cmp	r0, #0
   160c0:	bne	162ac <__assert_fail@plt+0x37fc>
   160c4:	ldr	r0, [r4, #156]	; 0x9c
   160c8:	cmp	r0, #0
   160cc:	vldreq	s0, [r4, #28]
   160d0:	popeq	{r4, sl, fp, pc}
   160d4:	movw	r0, #56570	; 0xdcfa
   160d8:	movw	r1, #56442	; 0xdc7a
   160dc:	movw	r3, #56449	; 0xdc81
   160e0:	movw	r2, #1170	; 0x492
   160e4:	movt	r0, #4
   160e8:	movt	r1, #4
   160ec:	movt	r3, #4
   160f0:	bl	12ab0 <__assert_fail@plt>
   160f4:	ldr	r0, [r4]
   160f8:	movw	r1, #18148	; 0x46e4
   160fc:	movt	r1, #1
   16100:	cmp	r0, r1
   16104:	bne	162cc <__assert_fail@plt+0x381c>
   16108:	ldr	r0, [r4, #156]	; 0x9c
   1610c:	cmp	r0, #0
   16110:	ldreq	r0, [r4, #160]	; 0xa0
   16114:	vmoveq.f32	s2, #112	; 0x3f800000  1.0
   16118:	vldreq	s0, [r0, #28]
   1611c:	vsubeq.f32	s0, s2, s0
   16120:	vstreq	s0, [r4, #28]
   16124:	popeq	{r4, sl, fp, pc}
   16128:	movw	r0, #56570	; 0xdcfa
   1612c:	movw	r1, #56442	; 0xdc7a
   16130:	movw	r3, #56449	; 0xdc81
   16134:	movw	r2, #1181	; 0x49d
   16138:	movt	r0, #4
   1613c:	movt	r1, #4
   16140:	movt	r3, #4
   16144:	bl	12ab0 <__assert_fail@plt>
   16148:	ldr	r0, [r4]
   1614c:	movw	r1, #15672	; 0x3d38
   16150:	movt	r1, #1
   16154:	cmp	r0, r1
   16158:	beq	161e0 <__assert_fail@plt+0x3730>
   1615c:	movw	r1, #16064	; 0x3ec0
   16160:	movt	r1, #1
   16164:	cmp	r0, r1
   16168:	beq	16208 <__assert_fail@plt+0x3758>
   1616c:	movw	r1, #19020	; 0x4a4c
   16170:	movt	r1, #1
   16174:	cmp	r0, r1
   16178:	bne	1630c <__assert_fail@plt+0x385c>
   1617c:	ldr	r0, [r4, #160]	; 0xa0
   16180:	vmov.f32	s0, #112	; 0x3f800000  1.0
   16184:	vmov.f32	s2, s0
   16188:	cmp	r0, #0
   1618c:	vldrne	s2, [r0, #28]
   16190:	ldr	r0, [r4, #156]	; 0x9c
   16194:	cmp	r0, #0
   16198:	vldrne	s0, [r0, #28]
   1619c:	vadd.f32	s0, s2, s0
   161a0:	b	1620c <__assert_fail@plt+0x375c>
   161a4:	ldr	r0, [r4, #160]	; 0xa0
   161a8:	cmp	r0, #0
   161ac:	bne	162ec <__assert_fail@plt+0x383c>
   161b0:	ldr	r0, [r4, #156]	; 0x9c
   161b4:	cmp	r0, #0
   161b8:	vldreq	s0, [r4, #28]
   161bc:	popeq	{r4, sl, fp, pc}
   161c0:	movw	r0, #56570	; 0xdcfa
   161c4:	movw	r1, #56442	; 0xdc7a
   161c8:	movw	r3, #56449	; 0xdc81
   161cc:	movw	r2, #1175	; 0x497
   161d0:	movt	r0, #4
   161d4:	movt	r1, #4
   161d8:	movt	r3, #4
   161dc:	bl	12ab0 <__assert_fail@plt>
   161e0:	ldr	r0, [r4, #160]	; 0xa0
   161e4:	vmov.f32	s0, #112	; 0x3f800000  1.0
   161e8:	vmov.f32	s2, s0
   161ec:	cmp	r0, #0
   161f0:	vldrne	s2, [r0, #28]
   161f4:	ldr	r0, [r4, #156]	; 0x9c
   161f8:	cmp	r0, #0
   161fc:	vldrne	s0, [r0, #28]
   16200:	vmul.f32	s0, s2, s0
   16204:	b	1620c <__assert_fail@plt+0x375c>
   16208:	vmov.f32	s0, #112	; 0x3f800000  1.0
   1620c:	vldr	s2, [pc, #280]	; 1632c <__assert_fail@plt+0x387c>
   16210:	vmov.f32	s4, #112	; 0x3f800000  1.0
   16214:	vcmpe.f32	s0, s4
   16218:	vmax.f32	d1, d0, d1
   1621c:	vmrs	APSR_nzcv, fpscr
   16220:	vselgt.f32	s0, s4, s2
   16224:	vstr	s0, [r4, #28]
   16228:	pop	{r4, sl, fp, pc}
   1622c:	movw	r0, #56432	; 0xdc70
   16230:	movw	r1, #56442	; 0xdc7a
   16234:	movw	r3, #56449	; 0xdc81
   16238:	movw	r2, #1156	; 0x484
   1623c:	movt	r0, #4
   16240:	movt	r1, #4
   16244:	movt	r3, #4
   16248:	bl	12ab0 <__assert_fail@plt>
   1624c:	movw	r0, #58329	; 0xe3d9
   16250:	movw	r1, #56442	; 0xdc7a
   16254:	movw	r3, #56449	; 0xdc81
   16258:	mov	r2, #1216	; 0x4c0
   1625c:	movt	r0, #4
   16260:	movt	r1, #4
   16264:	movt	r3, #4
   16268:	bl	12ab0 <__assert_fail@plt>
   1626c:	movw	r0, #56524	; 0xdccc
   16270:	movw	r1, #56442	; 0xdc7a
   16274:	movw	r3, #56449	; 0xdc81
   16278:	movw	r2, #1164	; 0x48c
   1627c:	movt	r0, #4
   16280:	movt	r1, #4
   16284:	movt	r3, #4
   16288:	bl	12ab0 <__assert_fail@plt>
   1628c:	movw	r0, #56499	; 0xdcb3
   16290:	movw	r1, #56442	; 0xdc7a
   16294:	movw	r3, #56449	; 0xdc81
   16298:	movw	r2, #1163	; 0x48b
   1629c:	movt	r0, #4
   162a0:	movt	r1, #4
   162a4:	movt	r3, #4
   162a8:	bl	12ab0 <__assert_fail@plt>
   162ac:	movw	r0, #56548	; 0xdce4
   162b0:	movw	r1, #56442	; 0xdc7a
   162b4:	movw	r3, #56449	; 0xdc81
   162b8:	movw	r2, #1169	; 0x491
   162bc:	movt	r0, #4
   162c0:	movt	r1, #4
   162c4:	movt	r3, #4
   162c8:	bl	12ab0 <__assert_fail@plt>
   162cc:	movw	r0, #56591	; 0xdd0f
   162d0:	movw	r1, #56442	; 0xdc7a
   162d4:	movw	r3, #56449	; 0xdc81
   162d8:	movw	r2, #1180	; 0x49c
   162dc:	movt	r0, #4
   162e0:	movt	r1, #4
   162e4:	movt	r3, #4
   162e8:	bl	12ab0 <__assert_fail@plt>
   162ec:	movw	r0, #56548	; 0xdce4
   162f0:	movw	r1, #56442	; 0xdc7a
   162f4:	movw	r3, #56449	; 0xdc81
   162f8:	movw	r2, #1174	; 0x496
   162fc:	movt	r0, #4
   16300:	movt	r1, #4
   16304:	movt	r3, #4
   16308:	bl	12ab0 <__assert_fail@plt>
   1630c:	movw	r0, #58329	; 0xe3d9
   16310:	movw	r1, #56442	; 0xdc7a
   16314:	movw	r3, #56449	; 0xdc81
   16318:	movw	r2, #1204	; 0x4b4
   1631c:	movt	r0, #4
   16320:	movt	r1, #4
   16324:	movt	r3, #4
   16328:	bl	12ab0 <__assert_fail@plt>
   1632c:	andeq	r0, r0, r0
   16330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16334:	add	fp, sp, #28
   16338:	sub	sp, sp, #28
   1633c:	mov	r4, r1
   16340:	movw	r1, #17788	; 0x457c
   16344:	mov	r6, r0
   16348:	mov	r0, #0
   1634c:	str	r2, [sp, #16]
   16350:	movt	r1, #6
   16354:	cmp	r6, r2
   16358:	str	r6, [sp, #24]
   1635c:	str	r0, [r1, #12]
   16360:	add	r0, r4, r2, lsl #2
   16364:	str	r0, [r1, #4]
   16368:	ble	163ac <__assert_fail@plt+0x38fc>
   1636c:	mov	r5, r2
   16370:	ldr	r0, [r4, r5, lsl #2]
   16374:	mov	r1, #1
   16378:	bl	1962c <__assert_fail@plt+0x6b7c>
   1637c:	cmp	r0, #0
   16380:	bne	163ac <__assert_fail@plt+0x38fc>
   16384:	movw	r0, #17788	; 0x457c
   16388:	add	r5, r5, #1
   1638c:	movt	r0, #6
   16390:	cmp	r5, r6
   16394:	str	r5, [sp, #16]
   16398:	mov	r1, r0
   1639c:	ldr	r0, [r0]
   163a0:	add	r0, r0, #1
   163a4:	str	r0, [r1]
   163a8:	blt	16370 <__assert_fail@plt+0x38c0>
   163ac:	movw	r5, #3151	; 0xc4f
   163b0:	movt	r5, #5
   163b4:	mov	r0, r5
   163b8:	bl	1c624 <__assert_fail@plt+0x9b74>
   163bc:	mov	r6, r0
   163c0:	movw	r0, #58409	; 0xe429
   163c4:	movt	r0, #4
   163c8:	bl	1c624 <__assert_fail@plt+0x9b74>
   163cc:	mov	r7, r0
   163d0:	movw	r0, #56920	; 0xde58
   163d4:	movt	r0, #4
   163d8:	bl	1c624 <__assert_fail@plt+0x9b74>
   163dc:	cmp	r6, #0
   163e0:	beq	168ac <__assert_fail@plt+0x3dfc>
   163e4:	cmp	r7, #0
   163e8:	beq	168cc <__assert_fail@plt+0x3e1c>
   163ec:	cmp	r0, #0
   163f0:	str	r7, [sp, #8]
   163f4:	str	r0, [sp, #12]
   163f8:	beq	168ec <__assert_fail@plt+0x3e3c>
   163fc:	add	r2, sp, #24
   16400:	mov	r0, r6
   16404:	mov	r1, r4
   16408:	bl	1c7e0 <__assert_fail@plt+0x9d30>
   1640c:	movw	r0, #17788	; 0x457c
   16410:	movt	r0, #6
   16414:	ldr	r2, [r0, #16]
   16418:	str	r5, [r2, #4]
   1641c:	mov	r5, r0
   16420:	ldr	r3, [r0, #12]
   16424:	mov	r0, #1
   16428:	strb	r0, [r3, #33]	; 0x21
   1642c:	mov	r0, r4
   16430:	ldr	r1, [sp, #24]
   16434:	bl	1c60c <__assert_fail@plt+0x9b5c>
   16438:	ldr	r0, [r5, #16]
   1643c:	bl	155d8 <__assert_fail@plt+0x2b28>
   16440:	ldr	r1, [sp, #24]
   16444:	ldr	r0, [sp, #16]
   16448:	cmp	r0, r1
   1644c:	bge	16510 <__assert_fail@plt+0x3a60>
   16450:	movw	r9, #20040	; 0x4e48
   16454:	mov	sl, #0
   16458:	add	r7, sp, #16
   1645c:	movt	r9, #6
   16460:	b	16484 <__assert_fail@plt+0x39d4>
   16464:	str	sl, [r0, #36]	; 0x24
   16468:	bl	155d8 <__assert_fail@plt+0x2b28>
   1646c:	ldr	r0, [r5, #12]
   16470:	bl	155d8 <__assert_fail@plt+0x2b28>
   16474:	ldr	r1, [sp, #24]
   16478:	ldr	r0, [sp, #16]
   1647c:	cmp	r0, r1
   16480:	bge	16510 <__assert_fail@plt+0x3a60>
   16484:	strb	sl, [r9, #40]	; 0x28
   16488:	mov	r1, #0
   1648c:	ldr	r0, [r4, r0, lsl #2]
   16490:	bl	1962c <__assert_fail@plt+0x6b7c>
   16494:	cmp	r0, #0
   16498:	beq	1679c <__assert_fail@plt+0x3cec>
   1649c:	ldr	r0, [sp, #16]
   164a0:	ldr	r6, [r4, r0, lsl #2]
   164a4:	mov	r0, r6
   164a8:	bl	1c624 <__assert_fail@plt+0x9b74>
   164ac:	cmp	r0, #0
   164b0:	beq	16838 <__assert_fail@plt+0x3d88>
   164b4:	mov	r5, r0
   164b8:	ldr	r0, [r0]
   164bc:	ldr	r8, [sp, #16]
   164c0:	mov	r1, r4
   164c4:	mov	r2, r7
   164c8:	cmp	r0, #4
   164cc:	mov	r0, r5
   164d0:	addne	r8, r8, #1
   164d4:	strne	r8, [sp, #16]
   164d8:	ldr	r3, [r5, #8]
   164dc:	blx	r3
   164e0:	cmp	r0, #0
   164e4:	beq	1681c <__assert_fail@plt+0x3d6c>
   164e8:	movw	r5, #17788	; 0x457c
   164ec:	movt	r5, #6
   164f0:	ldr	r0, [r5, #16]
   164f4:	str	r6, [r0, #4]
   164f8:	ldr	r1, [sp, #16]
   164fc:	cmp	r1, r8
   16500:	beq	16464 <__assert_fail@plt+0x39b4>
   16504:	ldr	r1, [r4, r8, lsl #2]
   16508:	str	r1, [r0, #36]	; 0x24
   1650c:	b	16468 <__assert_fail@plt+0x39b8>
   16510:	ldr	r3, [r5, #12]
   16514:	ldr	r2, [r5, #16]
   16518:	mov	r0, r4
   1651c:	bl	1c620 <__assert_fail@plt+0x9b70>
   16520:	ldr	r0, [r5, #12]
   16524:	ldr	r1, [r0, #152]	; 0x98
   16528:	cmp	r1, #0
   1652c:	beq	165a4 <__assert_fail@plt+0x3af4>
   16530:	mov	r0, r1
   16534:	bl	19600 <__assert_fail@plt+0x6b50>
   16538:	cmp	r0, #0
   1653c:	beq	165e4 <__assert_fail@plt+0x3b34>
   16540:	ldr	r0, [sp, #8]
   16544:	mov	r7, r5
   16548:	add	r5, sp, #24
   1654c:	mov	r1, r4
   16550:	mov	r2, r5
   16554:	bl	1c7ac <__assert_fail@plt+0x9cfc>
   16558:	ldr	r0, [r7, #16]
   1655c:	movw	r1, #58409	; 0xe429
   16560:	mov	r6, #1
   16564:	movt	r1, #4
   16568:	str	r1, [r0, #4]
   1656c:	strb	r6, [r0, #33]	; 0x21
   16570:	bl	155d8 <__assert_fail@plt+0x2b28>
   16574:	ldr	r0, [sp, #12]
   16578:	mov	r1, r4
   1657c:	mov	r2, r5
   16580:	bl	1c814 <__assert_fail@plt+0x9d64>
   16584:	ldr	r0, [r7, #16]
   16588:	movw	r1, #56919	; 0xde57
   1658c:	movt	r1, #4
   16590:	str	r1, [r0, #4]
   16594:	strb	r6, [r0, #33]	; 0x21
   16598:	bl	155d8 <__assert_fail@plt+0x2b28>
   1659c:	ldr	r0, [r7, #12]
   165a0:	b	165dc <__assert_fail@plt+0x3b2c>
   165a4:	str	r1, [r5, #12]
   165a8:	str	r1, [r5, #16]
   165ac:	str	r0, [sp, #20]
   165b0:	bl	32910 <__assert_fail@plt+0x1fe60>
   165b4:	ldr	r0, [sp, #12]
   165b8:	add	r2, sp, #24
   165bc:	mov	r1, r4
   165c0:	bl	1c814 <__assert_fail@plt+0x9d64>
   165c4:	ldr	r0, [r5, #16]
   165c8:	movw	r1, #56919	; 0xde57
   165cc:	movt	r1, #4
   165d0:	str	r1, [r0, #4]
   165d4:	bl	155d8 <__assert_fail@plt+0x2b28>
   165d8:	ldr	r0, [r5, #12]
   165dc:	bl	155d8 <__assert_fail@plt+0x2b28>
   165e0:	b	16600 <__assert_fail@plt+0x3b50>
   165e4:	ldr	r0, [r5, #12]
   165e8:	str	r0, [sp, #20]
   165ec:	ldr	r0, [r0, #152]	; 0x98
   165f0:	str	r0, [r5, #12]
   165f4:	bl	155d8 <__assert_fail@plt+0x2b28>
   165f8:	ldr	r0, [sp, #20]
   165fc:	bl	32910 <__assert_fail@plt+0x1fe60>
   16600:	movw	r5, #20084	; 0x4e74
   16604:	movt	r5, #6
   16608:	ldrb	r0, [r5, #44]	; 0x2c
   1660c:	tst	r0, #9
   16610:	bne	166bc <__assert_fail@plt+0x3c0c>
   16614:	movw	r0, #17788	; 0x457c
   16618:	movt	r0, #6
   1661c:	mov	r4, r0
   16620:	ldr	r0, [r0, #12]
   16624:	bl	1c398 <__assert_fail@plt+0x98e8>
   16628:	ldr	r0, [r4, #12]
   1662c:	bl	155d8 <__assert_fail@plt+0x2b28>
   16630:	ldr	r0, [r4, #12]
   16634:	mov	r1, #0
   16638:	mov	r2, #0
   1663c:	str	r0, [sp, #20]
   16640:	add	r0, sp, #20
   16644:	bl	16988 <__assert_fail@plt+0x3ed8>
   16648:	str	r0, [r4, #8]
   1664c:	bl	16060 <__assert_fail@plt+0x35b0>
   16650:	ldr	r0, [sp, #20]
   16654:	cmp	r0, #0
   16658:	bne	1690c <__assert_fail@plt+0x3e5c>
   1665c:	ldrb	r0, [r5, #44]	; 0x2c
   16660:	tst	r0, #9
   16664:	bne	166f4 <__assert_fail@plt+0x3c44>
   16668:	movw	r6, #17788	; 0x457c
   1666c:	movt	r6, #6
   16670:	mov	r4, r6
   16674:	ldr	r0, [r4, #8]!
   16678:	bl	1704c <__assert_fail@plt+0x459c>
   1667c:	mov	r0, r4
   16680:	bl	17298 <__assert_fail@plt+0x47e8>
   16684:	ldr	r0, [r4]
   16688:	mov	r1, #1
   1668c:	bl	17a7c <__assert_fail@plt+0x4fcc>
   16690:	ldr	r0, [r4]
   16694:	bl	17b20 <__assert_fail@plt+0x5070>
   16698:	ldr	r0, [r4]
   1669c:	mov	r1, #1
   166a0:	bl	17a7c <__assert_fail@plt+0x4fcc>
   166a4:	ldrb	r0, [r5, #44]	; 0x2c
   166a8:	tst	r0, #9
   166ac:	bne	16730 <__assert_fail@plt+0x3c80>
   166b0:	ldr	r0, [r6, #8]
   166b4:	sub	sp, fp, #28
   166b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166bc:	movw	r4, #17744	; 0x4550
   166c0:	movw	r0, #56926	; 0xde5e
   166c4:	mov	r1, #16
   166c8:	mov	r2, #1
   166cc:	movt	r4, #6
   166d0:	movt	r0, #4
   166d4:	ldr	r3, [r4]
   166d8:	bl	12618 <fwrite@plt>
   166dc:	movw	r1, #17788	; 0x457c
   166e0:	ldr	r0, [r4]
   166e4:	movt	r1, #6
   166e8:	ldr	r1, [r1, #12]
   166ec:	bl	152c8 <__assert_fail@plt+0x2818>
   166f0:	b	16614 <__assert_fail@plt+0x3b64>
   166f4:	movw	r4, #17744	; 0x4550
   166f8:	movw	r0, #58422	; 0xe436
   166fc:	mov	r1, #11
   16700:	mov	r2, #1
   16704:	movt	r4, #6
   16708:	movt	r0, #4
   1670c:	ldr	r3, [r4]
   16710:	bl	12618 <fwrite@plt>
   16714:	movw	r1, #17788	; 0x457c
   16718:	ldr	r0, [r4]
   1671c:	mov	r2, #0
   16720:	movt	r1, #6
   16724:	ldr	r1, [r1, #8]
   16728:	bl	16c58 <__assert_fail@plt+0x41a8>
   1672c:	b	16668 <__assert_fail@plt+0x3bb8>
   16730:	movw	r4, #17744	; 0x4550
   16734:	movw	r0, #57002	; 0xdeaa
   16738:	mov	r1, #21
   1673c:	mov	r2, #1
   16740:	movt	r4, #6
   16744:	movt	r0, #4
   16748:	ldr	r3, [r4]
   1674c:	bl	12618 <fwrite@plt>
   16750:	ldr	r0, [r4]
   16754:	ldr	r1, [r6, #8]
   16758:	mov	r2, #0
   1675c:	bl	16c58 <__assert_fail@plt+0x41a8>
   16760:	ldr	r3, [r4]
   16764:	movw	r0, #57024	; 0xdec0
   16768:	mov	r1, #24
   1676c:	mov	r2, #1
   16770:	movt	r0, #4
   16774:	bl	12618 <fwrite@plt>
   16778:	ldr	r0, [r4]
   1677c:	ldr	r1, [r6, #8]
   16780:	bl	15390 <__assert_fail@plt+0x28e0>
   16784:	ldr	r1, [r4]
   16788:	mov	r0, #10
   1678c:	bl	12948 <fputc@plt>
   16790:	ldr	r0, [r6, #8]
   16794:	sub	sp, fp, #28
   16798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1679c:	movw	r1, #56734	; 0xdd9e
   167a0:	mov	r0, #0
   167a4:	mov	r2, #5
   167a8:	movt	r1, #4
   167ac:	bl	12564 <dcgettext@plt>
   167b0:	mov	r2, r0
   167b4:	ldr	r0, [sp, #16]
   167b8:	mov	r1, #0
   167bc:	ldr	r3, [r4, r0, lsl #2]
   167c0:	mov	r0, #0
   167c4:	bl	1269c <error@plt>
   167c8:	ldr	r0, [sp, #16]
   167cc:	mov	r1, #0
   167d0:	ldr	r0, [r4, r0, lsl #2]
   167d4:	bl	128ac <access@plt>
   167d8:	cmp	r0, #0
   167dc:	bne	16814 <__assert_fail@plt+0x3d64>
   167e0:	movw	r1, #56770	; 0xddc2
   167e4:	mov	r0, #0
   167e8:	mov	r2, #5
   167ec:	movt	r1, #4
   167f0:	bl	12564 <dcgettext@plt>
   167f4:	mov	r2, r0
   167f8:	movw	r0, #17788	; 0x457c
   167fc:	mov	r1, #0
   16800:	movt	r0, #6
   16804:	ldr	r0, [r0, #16]
   16808:	ldr	r3, [r0, #4]
   1680c:	mov	r0, #0
   16810:	bl	1269c <error@plt>
   16814:	mov	r0, #1
   16818:	bl	12780 <exit@plt>
   1681c:	ldr	r0, [sp, #16]
   16820:	ldr	r1, [r4, r0, lsl #2]
   16824:	cmp	r1, #0
   16828:	bne	16860 <__assert_fail@plt+0x3db0>
   1682c:	movw	r1, #56894	; 0xde3e
   16830:	movt	r1, #4
   16834:	b	16840 <__assert_fail@plt+0x3d90>
   16838:	movw	r1, #56818	; 0xddf2
   1683c:	movt	r1, #4
   16840:	mov	r0, #0
   16844:	mov	r2, #5
   16848:	bl	12564 <dcgettext@plt>
   1684c:	mov	r2, r0
   16850:	mov	r0, #1
   16854:	mov	r1, #0
   16858:	mov	r3, r6
   1685c:	bl	1269c <error@plt>
   16860:	cmp	r0, r8
   16864:	ldreq	r0, [r5]
   16868:	cmpeq	r0, #4
   1686c:	beq	168a0 <__assert_fail@plt+0x3df0>
   16870:	movw	r1, #56864	; 0xde20
   16874:	mov	r0, #0
   16878:	mov	r2, #5
   1687c:	movt	r1, #4
   16880:	bl	12564 <dcgettext@plt>
   16884:	mov	r2, r0
   16888:	ldr	r0, [sp, #16]
   1688c:	ldr	r3, [r4, r0, lsl #2]
   16890:	str	r6, [sp]
   16894:	mov	r0, #1
   16898:	mov	r1, #0
   1689c:	bl	1269c <error@plt>
   168a0:	movw	r1, #56841	; 0xde09
   168a4:	movt	r1, #4
   168a8:	b	16840 <__assert_fail@plt+0x3d90>
   168ac:	movw	r0, #56616	; 0xdd28
   168b0:	movw	r1, #56442	; 0xdc7a
   168b4:	movw	r3, #56635	; 0xdd3b
   168b8:	movw	r2, #1270	; 0x4f6
   168bc:	movt	r0, #4
   168c0:	movt	r1, #4
   168c4:	movt	r3, #4
   168c8:	bl	12ab0 <__assert_fail@plt>
   168cc:	movw	r0, #56694	; 0xdd76
   168d0:	movw	r1, #56442	; 0xdc7a
   168d4:	movw	r3, #56635	; 0xdd3b
   168d8:	movw	r2, #1271	; 0x4f7
   168dc:	movt	r0, #4
   168e0:	movt	r1, #4
   168e4:	movt	r3, #4
   168e8:	bl	12ab0 <__assert_fail@plt>
   168ec:	movw	r0, #56714	; 0xdd8a
   168f0:	movw	r1, #56442	; 0xdc7a
   168f4:	movw	r3, #56635	; 0xdd3b
   168f8:	movw	r2, #1272	; 0x4f8
   168fc:	movt	r0, #4
   16900:	movt	r1, #4
   16904:	movt	r3, #4
   16908:	bl	12ab0 <__assert_fail@plt>
   1690c:	ldr	r1, [r0]
   16910:	movw	r2, #15904	; 0x3e20
   16914:	movt	r2, #1
   16918:	cmp	r1, r2
   1691c:	bne	1692c <__assert_fail@plt+0x3e7c>
   16920:	movw	r1, #57832	; 0xe1e8
   16924:	movt	r1, #4
   16928:	b	16940 <__assert_fail@plt+0x3e90>
   1692c:	ldr	r0, [r0, #4]
   16930:	cmp	r0, #0
   16934:	bne	1695c <__assert_fail@plt+0x3eac>
   16938:	movw	r1, #56975	; 0xde8f
   1693c:	movt	r1, #4
   16940:	mov	r0, #0
   16944:	mov	r2, #5
   16948:	bl	12564 <dcgettext@plt>
   1694c:	mov	r2, r0
   16950:	mov	r0, #1
   16954:	mov	r1, #0
   16958:	bl	1269c <error@plt>
   1695c:	movw	r1, #56943	; 0xde6f
   16960:	mov	r0, #0
   16964:	mov	r2, #5
   16968:	movt	r1, #4
   1696c:	bl	12564 <dcgettext@plt>
   16970:	mov	r2, r0
   16974:	ldr	r0, [sp, #20]
   16978:	ldr	r3, [r0, #4]
   1697c:	mov	r0, #1
   16980:	mov	r1, #0
   16984:	bl	1269c <error@plt>
   16988:	push	{r4, r5, r6, r7, fp, lr}
   1698c:	add	fp, sp, #16
   16990:	ldr	r4, [r0]
   16994:	cmp	r4, #0
   16998:	beq	16a90 <__assert_fail@plt+0x3fe0>
   1699c:	mov	r5, r0
   169a0:	ldr	r0, [r4, #8]
   169a4:	cmp	r0, #5
   169a8:	bhi	16b20 <__assert_fail@plt+0x4070>
   169ac:	mov	r6, r1
   169b0:	add	r1, pc, #0
   169b4:	ldr	pc, [r1, r0, lsl #2]
   169b8:	muleq	r1, r0, sl
   169bc:	ldrdeq	r6, [r1], -r0
   169c0:	andeq	r6, r1, r4, ror #19
   169c4:	andeq	r6, r1, r4, asr #22
   169c8:			; <UNDEFINED> instruction: 0x00016ab4
   169cc:	andeq	r6, r1, ip, lsr #22
   169d0:	ldr	r2, [r4, #152]	; 0x98
   169d4:	str	r2, [r5]
   169d8:	cmp	r2, #0
   169dc:	bne	16a0c <__assert_fail@plt+0x3f5c>
   169e0:	b	16b18 <__assert_fail@plt+0x4068>
   169e4:	ldr	r0, [r4, #152]	; 0x98
   169e8:	mov	r1, #4
   169ec:	mov	r2, r4
   169f0:	str	r0, [r5]
   169f4:	mov	r0, r5
   169f8:	bl	16988 <__assert_fail@plt+0x3ed8>
   169fc:	str	r0, [r4, #160]	; 0xa0
   16a00:	ldr	r2, [r5]
   16a04:	cmp	r2, #0
   16a08:	beq	16b18 <__assert_fail@plt+0x4068>
   16a0c:	ldr	r0, [r2, #12]
   16a10:	cmp	r0, r6
   16a14:	ble	16b18 <__assert_fail@plt+0x4068>
   16a18:	ldr	r0, [r2, #8]
   16a1c:	cmp	r0, #5
   16a20:	beq	16a90 <__assert_fail@plt+0x3fe0>
   16a24:	ldr	r0, [r2, #12]
   16a28:	cmp	r0, r6
   16a2c:	ble	16a88 <__assert_fail@plt+0x3fd8>
   16a30:	ldr	r0, [r2, #8]
   16a34:	cmp	r0, #5
   16a38:	bhi	16b84 <__assert_fail@plt+0x40d4>
   16a3c:	add	r1, pc, #0
   16a40:	ldr	pc, [r1, r0, lsl #2]
   16a44:	muleq	r1, r0, sl
   16a48:	muleq	r1, r0, sl
   16a4c:	muleq	r1, r0, sl
   16a50:	andeq	r6, r1, ip, asr sl
   16a54:	muleq	r1, r0, sl
   16a58:	andeq	r6, r1, r8, lsl #21
   16a5c:	str	r4, [r2, #156]	; 0x9c
   16a60:	ldr	r4, [r5]
   16a64:	ldr	r0, [r4, #152]	; 0x98
   16a68:	str	r0, [r5]
   16a6c:	mov	r0, r5
   16a70:	ldrsh	r1, [r4, #12]
   16a74:	bl	16988 <__assert_fail@plt+0x3ed8>
   16a78:	str	r0, [r4, #160]	; 0xa0
   16a7c:	ldr	r2, [r5]
   16a80:	cmp	r2, #0
   16a84:	bne	16a24 <__assert_fail@plt+0x3f74>
   16a88:	cmp	r4, #0
   16a8c:	bne	16b18 <__assert_fail@plt+0x4068>
   16a90:	movw	r1, #57561	; 0xe0d9
   16a94:	movt	r1, #4
   16a98:	mov	r0, #0
   16a9c:	mov	r2, #5
   16aa0:	bl	12564 <dcgettext@plt>
   16aa4:	mov	r2, r0
   16aa8:	mov	r0, #1
   16aac:	mov	r1, #0
   16ab0:	bl	1269c <error@plt>
   16ab4:	ldr	r0, [r4, #152]	; 0x98
   16ab8:	cmp	r0, #0
   16abc:	beq	16b50 <__assert_fail@plt+0x40a0>
   16ac0:	ldrb	r1, [r0, #33]	; 0x21
   16ac4:	cmp	r1, #0
   16ac8:	bne	16b50 <__assert_fail@plt+0x40a0>
   16acc:	str	r0, [r5]
   16ad0:	ldr	r0, [r0, #8]
   16ad4:	cmp	r0, #5
   16ad8:	beq	16bd8 <__assert_fail@plt+0x4128>
   16adc:	mov	r0, r5
   16ae0:	mov	r1, #0
   16ae4:	mov	r2, r4
   16ae8:	bl	16988 <__assert_fail@plt+0x3ed8>
   16aec:	mov	r4, r0
   16af0:	ldr	r0, [r5]
   16af4:	cmp	r0, #0
   16af8:	beq	16b78 <__assert_fail@plt+0x40c8>
   16afc:	ldr	r1, [r0, #8]
   16b00:	cmp	r1, #5
   16b04:	bne	16b78 <__assert_fail@plt+0x40c8>
   16b08:	ldr	r2, [r0, #152]	; 0x98
   16b0c:	str	r2, [r5]
   16b10:	cmp	r2, #0
   16b14:	bne	16a0c <__assert_fail@plt+0x3f5c>
   16b18:	mov	r0, r4
   16b1c:	pop	{r4, r5, r6, r7, fp, pc}
   16b20:	movw	r1, #58100	; 0xe2f4
   16b24:	movt	r1, #4
   16b28:	b	16a98 <__assert_fail@plt+0x3fe8>
   16b2c:	mov	r7, r2
   16b30:	cmp	r2, #0
   16b34:	bne	16bb0 <__assert_fail@plt+0x4100>
   16b38:	movw	r1, #57661	; 0xe13d
   16b3c:	movt	r1, #4
   16b40:	b	16b58 <__assert_fail@plt+0x40a8>
   16b44:	movw	r1, #57580	; 0xe0ec
   16b48:	movt	r1, #4
   16b4c:	b	16b58 <__assert_fail@plt+0x40a8>
   16b50:	movw	r1, #57854	; 0xe1fe
   16b54:	movt	r1, #4
   16b58:	mov	r0, #0
   16b5c:	mov	r2, #5
   16b60:	bl	12564 <dcgettext@plt>
   16b64:	ldr	r3, [r4, #4]
   16b68:	mov	r2, r0
   16b6c:	mov	r0, #1
   16b70:	mov	r1, #0
   16b74:	bl	1269c <error@plt>
   16b78:	movw	r1, #58019	; 0xe2a3
   16b7c:	movt	r1, #4
   16b80:	b	16a98 <__assert_fail@plt+0x3fe8>
   16b84:	movw	r1, #58133	; 0xe315
   16b88:	mov	r0, #0
   16b8c:	mov	r2, #5
   16b90:	movt	r1, #4
   16b94:	bl	12564 <dcgettext@plt>
   16b98:	mov	r2, r0
   16b9c:	ldr	r0, [r5]
   16ba0:	ldr	r3, [r0, #8]
   16ba4:	mov	r0, #1
   16ba8:	mov	r1, #0
   16bac:	bl	1269c <error@plt>
   16bb0:	ldr	r1, [r7, #8]
   16bb4:	ldrb	r0, [r4, #33]	; 0x21
   16bb8:	bic	r1, r1, #1
   16bbc:	cmp	r1, #2
   16bc0:	bne	16bf0 <__assert_fail@plt+0x4140>
   16bc4:	cmp	r0, #0
   16bc8:	bne	16c04 <__assert_fail@plt+0x4154>
   16bcc:	movw	r1, #57734	; 0xe186
   16bd0:	movt	r1, #4
   16bd4:	b	16c0c <__assert_fail@plt+0x415c>
   16bd8:	ldrb	r0, [r4, #33]	; 0x21
   16bdc:	cmp	r0, #0
   16be0:	bne	16c2c <__assert_fail@plt+0x417c>
   16be4:	movw	r1, #57964	; 0xe26c
   16be8:	movt	r1, #4
   16bec:	b	16a98 <__assert_fail@plt+0x3fe8>
   16bf0:	cmp	r0, #0
   16bf4:	bne	16c04 <__assert_fail@plt+0x4154>
   16bf8:	movw	r1, #57812	; 0xe1d4
   16bfc:	movt	r1, #4
   16c00:	b	16a98 <__assert_fail@plt+0x3fe8>
   16c04:	movw	r1, #57778	; 0xe1b2
   16c08:	movt	r1, #4
   16c0c:	mov	r0, #0
   16c10:	mov	r2, #5
   16c14:	bl	12564 <dcgettext@plt>
   16c18:	ldr	r3, [r7, #4]
   16c1c:	mov	r2, r0
   16c20:	mov	r0, #1
   16c24:	mov	r1, #0
   16c28:	bl	1269c <error@plt>
   16c2c:	movw	r1, #57661	; 0xe13d
   16c30:	mov	r0, #0
   16c34:	mov	r2, #5
   16c38:	movt	r1, #4
   16c3c:	bl	12564 <dcgettext@plt>
   16c40:	mov	r2, r0
   16c44:	ldr	r0, [r5]
   16c48:	ldr	r3, [r0, #4]
   16c4c:	mov	r0, #1
   16c50:	mov	r1, #0
   16c54:	bl	1269c <error@plt>
   16c58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c5c:	add	fp, sp, #28
   16c60:	sub	sp, sp, #12
   16c64:	cmp	r1, #0
   16c68:	beq	17014 <__assert_fail@plt+0x4564>
   16c6c:	movw	r7, #57405	; 0xe03d
   16c70:	movw	r9, #17052	; 0x429c
   16c74:	mov	sl, r2
   16c78:	mov	r6, r1
   16c7c:	mov	r4, r0
   16c80:	movt	r7, #4
   16c84:	movt	r9, #6
   16c88:	cmp	sl, #1
   16c8c:	blt	16cb0 <__assert_fail@plt+0x4200>
   16c90:	mov	r5, sl
   16c94:	mov	r0, r7
   16c98:	mov	r1, #4
   16c9c:	mov	r2, #1
   16ca0:	mov	r3, r4
   16ca4:	bl	12618 <fwrite@plt>
   16ca8:	subs	r5, r5, #1
   16cac:	bne	16c94 <__assert_fail@plt+0x41e4>
   16cb0:	movw	r0, #57410	; 0xe042
   16cb4:	mov	r1, #6
   16cb8:	mov	r2, #1
   16cbc:	mov	r3, r4
   16cc0:	movt	r0, #4
   16cc4:	bl	12618 <fwrite@plt>
   16cc8:	ldr	r3, [r6, #36]	; 0x24
   16ccc:	ldr	r2, [r6, #4]
   16cd0:	cmp	r3, #0
   16cd4:	beq	16cec <__assert_fail@plt+0x423c>
   16cd8:	movw	r1, #56426	; 0xdc6a
   16cdc:	mov	r0, r4
   16ce0:	movt	r1, #4
   16ce4:	bl	127f8 <fprintf@plt>
   16ce8:	b	16cf8 <__assert_fail@plt+0x4248>
   16cec:	mov	r0, r2
   16cf0:	mov	r1, r4
   16cf4:	bl	12a44 <fputs@plt>
   16cf8:	ldrh	r0, [r6, #8]
   16cfc:	movw	r2, #59120	; 0xe6f0
   16d00:	mov	r1, #6
   16d04:	movw	r5, #61103	; 0xeeaf
   16d08:	movt	r2, #4
   16d0c:	movt	r5, #4
   16d10:	cmp	r0, #6
   16d14:	movcs	r0, r1
   16d18:	add	r0, r2, r0, lsl #3
   16d1c:	ldr	r2, [r0, #4]
   16d20:	ldrh	r0, [r6, #12]
   16d24:	cmp	r0, #6
   16d28:	movcs	r0, r1
   16d2c:	movw	r1, #59176	; 0xe728
   16d30:	movt	r1, #4
   16d34:	add	r0, r1, r0, lsl #3
   16d38:	movw	r1, #57417	; 0xe049
   16d3c:	movt	r1, #4
   16d40:	ldr	r3, [r0, #4]
   16d44:	mov	r0, r4
   16d48:	bl	127f8 <fprintf@plt>
   16d4c:	ldr	r0, [r6, #24]
   16d50:	ldr	r2, [r9]
   16d54:	mov	r1, #0
   16d58:	cmp	r2, r0
   16d5c:	beq	16e08 <__assert_fail@plt+0x4358>
   16d60:	ldr	r2, [r9, #8]
   16d64:	mov	r1, #1
   16d68:	cmp	r2, r0
   16d6c:	beq	16e08 <__assert_fail@plt+0x4358>
   16d70:	ldr	r2, [r9, #16]
   16d74:	mov	r1, #2
   16d78:	cmp	r2, r0
   16d7c:	beq	16e08 <__assert_fail@plt+0x4358>
   16d80:	ldr	r2, [r9, #24]
   16d84:	mov	r1, #3
   16d88:	cmp	r2, r0
   16d8c:	beq	16e08 <__assert_fail@plt+0x4358>
   16d90:	ldr	r2, [r9, #32]
   16d94:	mov	r1, #4
   16d98:	cmp	r2, r0
   16d9c:	beq	16e08 <__assert_fail@plt+0x4358>
   16da0:	ldr	r2, [r9, #40]	; 0x28
   16da4:	mov	r1, #5
   16da8:	cmp	r2, r0
   16dac:	beq	16e08 <__assert_fail@plt+0x4358>
   16db0:	ldr	r2, [r9, #48]	; 0x30
   16db4:	mov	r1, #6
   16db8:	cmp	r2, r0
   16dbc:	beq	16e08 <__assert_fail@plt+0x4358>
   16dc0:	ldr	r2, [r9, #56]	; 0x38
   16dc4:	mov	r1, #7
   16dc8:	cmp	r2, r0
   16dcc:	beq	16e08 <__assert_fail@plt+0x4358>
   16dd0:	ldr	r2, [r9, #64]	; 0x40
   16dd4:	mov	r1, #8
   16dd8:	cmp	r2, r0
   16ddc:	beq	16e08 <__assert_fail@plt+0x4358>
   16de0:	ldr	r2, [r9, #72]	; 0x48
   16de4:	mov	r1, #9
   16de8:	cmp	r2, r0
   16dec:	beq	16e08 <__assert_fail@plt+0x4358>
   16df0:	ldr	r2, [r9, #80]	; 0x50
   16df4:	mov	r1, #10
   16df8:	cmp	r2, r0
   16dfc:	movw	r2, #59084	; 0xe6cc
   16e00:	movt	r2, #4
   16e04:	bne	16e10 <__assert_fail@plt+0x4360>
   16e08:	add	r0, r9, r1, lsl #3
   16e0c:	ldr	r2, [r0, #4]
   16e10:	vldr	s0, [r6, #28]
   16e14:	ldrb	r0, [r6, #16]
   16e18:	movw	r1, #57483	; 0xe08b
   16e1c:	movt	r1, #4
   16e20:	cmp	r0, #0
   16e24:	mov	r0, r5
   16e28:	vcvt.f64.f32	d16, s0
   16e2c:	moveq	r0, r1
   16e30:	movw	r1, #57435	; 0xe05b
   16e34:	movt	r1, #4
   16e38:	str	r0, [sp, #8]
   16e3c:	mov	r0, r4
   16e40:	vstr	d16, [sp]
   16e44:	bl	127f8 <fprintf@plt>
   16e48:	ldrb	r0, [r6, #18]
   16e4c:	cmp	r0, #0
   16e50:	bne	16e6c <__assert_fail@plt+0x43bc>
   16e54:	ldrb	r0, [r6, #19]
   16e58:	cmp	r0, #0
   16e5c:	bne	16e6c <__assert_fail@plt+0x43bc>
   16e60:	ldrb	r0, [r6, #20]
   16e64:	cmp	r0, #0
   16e68:	beq	16f08 <__assert_fail@plt+0x4458>
   16e6c:	movw	r0, #57487	; 0xe08f
   16e70:	mov	r1, #6
   16e74:	mov	r2, #1
   16e78:	mov	r3, r4
   16e7c:	movt	r0, #4
   16e80:	bl	12618 <fwrite@plt>
   16e84:	ldrb	r0, [r6, #18]
   16e88:	cmp	r0, #0
   16e8c:	beq	17000 <__assert_fail@plt+0x4550>
   16e90:	movw	r0, #65232	; 0xfed0
   16e94:	mov	r1, #4
   16e98:	mov	r2, #1
   16e9c:	mov	r3, r4
   16ea0:	mov	r8, #1
   16ea4:	movt	r0, #4
   16ea8:	bl	12618 <fwrite@plt>
   16eac:	ldrb	r0, [r6, #20]
   16eb0:	cmp	r0, #0
   16eb4:	beq	16edc <__assert_fail@plt+0x442c>
   16eb8:	movw	r1, #57494	; 0xe096
   16ebc:	movw	r2, #57502	; 0xe09e
   16ec0:	cmp	r8, #0
   16ec4:	mov	r0, r4
   16ec8:	movt	r1, #4
   16ecc:	movt	r2, #4
   16ed0:	moveq	r2, r5
   16ed4:	bl	127f8 <fprintf@plt>
   16ed8:	mov	r8, #1
   16edc:	ldrb	r0, [r6, #19]
   16ee0:	cmp	r0, #0
   16ee4:	beq	16f08 <__assert_fail@plt+0x4458>
   16ee8:	movw	r1, #57504	; 0xe0a0
   16eec:	movw	r2, #57502	; 0xe09e
   16ef0:	cmp	r8, #0
   16ef4:	mov	r0, r4
   16ef8:	movt	r1, #4
   16efc:	movt	r2, #4
   16f00:	moveq	r2, r5
   16f04:	bl	127f8 <fprintf@plt>
   16f08:	mov	r0, #10
   16f0c:	mov	r1, r4
   16f10:	bl	12948 <fputc@plt>
   16f14:	cmp	sl, #1
   16f18:	blt	16f3c <__assert_fail@plt+0x448c>
   16f1c:	mov	r5, sl
   16f20:	mov	r0, r7
   16f24:	mov	r1, #4
   16f28:	mov	r2, #1
   16f2c:	mov	r3, r4
   16f30:	bl	12618 <fwrite@plt>
   16f34:	subs	r5, r5, #1
   16f38:	bne	16f20 <__assert_fail@plt+0x4470>
   16f3c:	ldr	r0, [r6, #156]	; 0x9c
   16f40:	cmp	r0, #0
   16f44:	beq	16f7c <__assert_fail@plt+0x44cc>
   16f48:	movw	r0, #57525	; 0xe0b5
   16f4c:	mov	r1, #6
   16f50:	mov	r2, #1
   16f54:	mov	r3, r4
   16f58:	movt	r0, #4
   16f5c:	bl	12618 <fwrite@plt>
   16f60:	ldr	r1, [r6, #156]	; 0x9c
   16f64:	add	r2, sl, #1
   16f68:	mov	r0, r4
   16f6c:	bl	16c58 <__assert_fail@plt+0x41a8>
   16f70:	cmp	sl, #1
   16f74:	bge	16fa8 <__assert_fail@plt+0x44f8>
   16f78:	b	16fc8 <__assert_fail@plt+0x4518>
   16f7c:	ldr	r0, [r6, #160]	; 0xa0
   16f80:	cmp	r0, #0
   16f84:	beq	1702c <__assert_fail@plt+0x457c>
   16f88:	movw	r0, #57532	; 0xe0bc
   16f8c:	mov	r1, #9
   16f90:	mov	r2, #1
   16f94:	mov	r3, r4
   16f98:	movt	r0, #4
   16f9c:	bl	12618 <fwrite@plt>
   16fa0:	cmp	sl, #1
   16fa4:	blt	16fc8 <__assert_fail@plt+0x4518>
   16fa8:	mov	r5, sl
   16fac:	mov	r0, r7
   16fb0:	mov	r1, #4
   16fb4:	mov	r2, #1
   16fb8:	mov	r3, r4
   16fbc:	bl	12618 <fwrite@plt>
   16fc0:	subs	r5, r5, #1
   16fc4:	bne	16fac <__assert_fail@plt+0x44fc>
   16fc8:	ldr	r0, [r6, #160]	; 0xa0
   16fcc:	cmp	r0, #0
   16fd0:	beq	1701c <__assert_fail@plt+0x456c>
   16fd4:	movw	r0, #57542	; 0xe0c6
   16fd8:	mov	r1, #7
   16fdc:	mov	r2, #1
   16fe0:	mov	r3, r4
   16fe4:	movt	r0, #4
   16fe8:	bl	12618 <fwrite@plt>
   16fec:	ldr	r6, [r6, #160]	; 0xa0
   16ff0:	add	sl, sl, #1
   16ff4:	cmp	r6, #0
   16ff8:	bne	16c88 <__assert_fail@plt+0x41d8>
   16ffc:	b	17014 <__assert_fail@plt+0x4564>
   17000:	mov	r8, #0
   17004:	ldrb	r0, [r6, #20]
   17008:	cmp	r0, #0
   1700c:	bne	16eb8 <__assert_fail@plt+0x4408>
   17010:	b	16edc <__assert_fail@plt+0x442c>
   17014:	sub	sp, fp, #28
   17018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1701c:	movw	r0, #57550	; 0xe0ce
   17020:	mov	r1, #10
   17024:	movt	r0, #4
   17028:	b	17038 <__assert_fail@plt+0x4588>
   1702c:	movw	r0, #57511	; 0xe0a7
   17030:	mov	r1, #13
   17034:	movt	r0, #4
   17038:	mov	r2, #1
   1703c:	mov	r3, r4
   17040:	sub	sp, fp, #28
   17044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17048:	b	12618 <fwrite@plt>
   1704c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17050:	add	fp, sp, #28
   17054:	sub	sp, sp, #20
   17058:	cmp	r0, #0
   1705c:	beq	1725c <__assert_fail@plt+0x47ac>
   17060:	mov	sl, r0
   17064:	ldr	r0, [r0, #160]	; 0xa0
   17068:	bl	1704c <__assert_fail@plt+0x459c>
   1706c:	ldr	r0, [sl, #156]	; 0x9c
   17070:	bl	1704c <__assert_fail@plt+0x459c>
   17074:	ldrb	r0, [sl, #18]
   17078:	mov	r2, #3
   1707c:	cmp	r0, #0
   17080:	bne	1709c <__assert_fail@plt+0x45ec>
   17084:	ldrb	r0, [sl, #20]
   17088:	mov	r2, #1
   1708c:	cmp	r0, #0
   17090:	bne	1709c <__assert_fail@plt+0x45ec>
   17094:	ldrb	r0, [sl, #19]
   17098:	lsl	r2, r0, #1
   1709c:	ldr	r4, [sl]
   170a0:	movw	r0, #16924	; 0x421c
   170a4:	movt	r0, #1
   170a8:	cmp	r4, r0
   170ac:	movwne	r0, #16928	; 0x4220
   170b0:	movtne	r0, #1
   170b4:	cmpne	r4, r0
   170b8:	bne	170d0 <__assert_fail@plt+0x4620>
   170bc:	ldrb	r1, [sl, #40]	; 0x28
   170c0:	mov	r0, #7
   170c4:	cmp	r1, #0
   170c8:	movweq	r0, #8
   170cc:	b	17250 <__assert_fail@plt+0x47a0>
   170d0:	movw	r0, #44240	; 0xacd0
   170d4:	movt	r0, #1
   170d8:	cmp	r4, r0
   170dc:	beq	171f4 <__assert_fail@plt+0x4744>
   170e0:	movw	r8, #17784	; 0x4578
   170e4:	str	r2, [sp, #4]
   170e8:	movt	r8, #6
   170ec:	ldrb	r0, [r8]
   170f0:	cmp	r0, #0
   170f4:	bne	17188 <__assert_fail@plt+0x46d8>
   170f8:	movw	r3, #33204	; 0x81b4
   170fc:	movw	r0, #17140	; 0x42f4
   17100:	mov	r1, #59	; 0x3b
   17104:	mov	r2, #8
   17108:	movt	r3, #1
   1710c:	movt	r0, #6
   17110:	bl	129cc <qsort@plt>
   17114:	mov	r4, #0
   17118:	add	r9, sp, #16
   1711c:	add	r7, sp, #12
   17120:	movw	r0, #17140	; 0x42f4
   17124:	mov	r1, r7
   17128:	mov	r2, #4
   1712c:	movt	r0, #6
   17130:	ldr	r5, [r0, r4, lsl #3]!
   17134:	ldr	r6, [r0, #8]
   17138:	mov	r0, r9
   1713c:	str	r5, [sp, #12]
   17140:	str	r6, [sp, #16]
   17144:	bl	12540 <memcmp@plt>
   17148:	cmp	r0, #0
   1714c:	bmi	17264 <__assert_fail@plt+0x47b4>
   17150:	mov	r0, r9
   17154:	mov	r1, r7
   17158:	mov	r2, #4
   1715c:	str	r5, [sp, #16]
   17160:	str	r6, [sp, #12]
   17164:	bl	12540 <memcmp@plt>
   17168:	cmp	r0, #1
   1716c:	bge	17278 <__assert_fail@plt+0x47c8>
   17170:	add	r4, r4, #1
   17174:	cmp	r4, #58	; 0x3a
   17178:	bne	17120 <__assert_fail@plt+0x4670>
   1717c:	mov	r0, #1
   17180:	strb	r0, [r8]
   17184:	ldr	r4, [sl]
   17188:	mov	r9, #59	; 0x3b
   1718c:	mov	r8, #0
   17190:	add	r6, sp, #16
   17194:	add	r7, sp, #12
   17198:	str	sl, [sp, #8]
   1719c:	b	171ac <__assert_fail@plt+0x46fc>
   171a0:	mov	r9, r5
   171a4:	cmp	r8, r9
   171a8:	bcs	1721c <__assert_fail@plt+0x476c>
   171ac:	movw	sl, #17140	; 0x42f4
   171b0:	add	r0, r9, r8
   171b4:	mov	r1, r7
   171b8:	mov	r2, #4
   171bc:	str	r4, [sp, #16]
   171c0:	movt	sl, #6
   171c4:	lsr	r5, r0, #1
   171c8:	ldr	r0, [sl, r5, lsl #3]!
   171cc:	str	r0, [sp, #12]
   171d0:	mov	r0, r6
   171d4:	bl	12540 <memcmp@plt>
   171d8:	cmp	r0, #0
   171dc:	bmi	171a0 <__assert_fail@plt+0x46f0>
   171e0:	beq	171fc <__assert_fail@plt+0x474c>
   171e4:	add	r8, r5, #1
   171e8:	cmp	r8, r9
   171ec:	bcc	171ac <__assert_fail@plt+0x46fc>
   171f0:	b	1721c <__assert_fail@plt+0x476c>
   171f4:	ldr	r0, [sl, #24]
   171f8:	b	17250 <__assert_fail@plt+0x47a0>
   171fc:	cmp	sl, #0
   17200:	beq	1721c <__assert_fail@plt+0x476c>
   17204:	movw	r0, #17140	; 0x42f4
   17208:	ldr	sl, [sp, #8]
   1720c:	movt	r0, #6
   17210:	add	r0, r0, r5, lsl #3
   17214:	ldr	r0, [r0, #4]
   17218:	b	1724c <__assert_fail@plt+0x479c>
   1721c:	movw	r1, #58207	; 0xe35f
   17220:	mov	r0, #0
   17224:	mov	r2, #5
   17228:	movt	r1, #4
   1722c:	bl	12564 <dcgettext@plt>
   17230:	ldr	sl, [sp, #8]
   17234:	mov	r2, r0
   17238:	mov	r0, #0
   1723c:	mov	r1, #0
   17240:	ldr	r3, [sl, #4]
   17244:	bl	1269c <error@plt>
   17248:	mov	r0, #10
   1724c:	ldr	r2, [sp, #4]
   17250:	cmp	r0, r2
   17254:	movhi	r2, r0
   17258:	str	r2, [sl, #24]
   1725c:	sub	sp, fp, #28
   17260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17264:	movw	r2, #58171	; 0xe33b
   17268:	mov	r0, #1
   1726c:	mov	r1, #0
   17270:	movt	r2, #4
   17274:	bl	1269c <error@plt>
   17278:	movw	r0, #58319	; 0xe3cf
   1727c:	movw	r1, #56442	; 0xdc7a
   17280:	movw	r3, #58331	; 0xe3db
   17284:	movw	r2, #1013	; 0x3f5
   17288:	movt	r0, #4
   1728c:	movt	r1, #4
   17290:	movt	r3, #4
   17294:	bl	12ab0 <__assert_fail@plt>
   17298:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1729c:	add	fp, sp, #28
   172a0:	sub	sp, sp, #4
   172a4:	vpush	{d8-d9}
   172a8:	sub	sp, sp, #120	; 0x78
   172ac:	mov	r5, #0
   172b0:	cmp	r0, #0
   172b4:	str	r5, [fp, #-52]	; 0xffffffcc
   172b8:	str	r5, [fp, #-56]	; 0xffffffc8
   172bc:	str	r5, [fp, #-60]	; 0xffffffc4
   172c0:	str	r5, [fp, #-64]	; 0xffffffc0
   172c4:	beq	17a44 <__assert_fail@plt+0x4f94>
   172c8:	ldr	r4, [r0]
   172cc:	mov	r9, r0
   172d0:	cmp	r4, #0
   172d4:	beq	17a44 <__assert_fail@plt+0x4f94>
   172d8:	vmov.i32	q8, #0	; 0x00000000
   172dc:	add	r2, sp, #16
   172e0:	mov	r0, #84	; 0x54
   172e4:	mov	r1, r2
   172e8:	vst1.64	{d16-d17}, [r1], r0
   172ec:	mov	r0, #0
   172f0:	str	r0, [r1]
   172f4:	add	r1, r2, #64	; 0x40
   172f8:	str	r0, [sp, #96]	; 0x60
   172fc:	mov	r0, r4
   17300:	vst1.64	{d16-d17}, [r1]
   17304:	add	r1, r2, #48	; 0x30
   17308:	vst1.64	{d16-d17}, [r1]
   1730c:	add	r1, r2, #32
   17310:	vst1.64	{d16-d17}, [r1]
   17314:	add	r1, r2, #16
   17318:	vst1.64	{d16-d17}, [r1]
   1731c:	ldr	r1, [r0, #156]!	; 0x9c
   17320:	cmp	r1, #0
   17324:	beq	17358 <__assert_fail@plt+0x48a8>
   17328:	mov	r5, r0
   1732c:	mov	r0, r1
   17330:	mov	r2, r4
   17334:	mov	r4, r1
   17338:	ldr	r1, [r0, #156]!	; 0x9c
   1733c:	cmp	r1, #0
   17340:	bne	17328 <__assert_fail@plt+0x4878>
   17344:	ldr	r7, [r2, #12]
   17348:	ldr	r0, [r4, #8]
   1734c:	cmp	r0, #3
   17350:	bne	1736c <__assert_fail@plt+0x48bc>
   17354:	b	17414 <__assert_fail@plt+0x4964>
   17358:	mov	r7, #3
   1735c:	mov	r5, r9
   17360:	ldr	r0, [r4, #8]
   17364:	cmp	r0, #3
   17368:	beq	17414 <__assert_fail@plt+0x4964>
   1736c:	mov	r0, #176	; 0xb0
   17370:	bl	30ae0 <__assert_fail@plt+0x1e030>
   17374:	mov	r1, #0
   17378:	cmp	r7, #3
   1737c:	mov	r2, #3
   17380:	str	r1, [r0, #24]
   17384:	str	r2, [r0, #8]
   17388:	str	r7, [r0, #12]
   1738c:	beq	173c0 <__assert_fail@plt+0x4910>
   17390:	cmp	r7, #2
   17394:	beq	173d4 <__assert_fail@plt+0x4924>
   17398:	cmp	r7, #1
   1739c:	bne	1740c <__assert_fail@plt+0x495c>
   173a0:	movw	r1, #57502	; 0xe09e
   173a4:	movw	r2, #16064	; 0x3ec0
   173a8:	vmov.f32	s0, #112	; 0x3f800000  1.0
   173ac:	movt	r2, #1
   173b0:	movt	r1, #4
   173b4:	str	r2, [r0]
   173b8:	str	r1, [r0, #4]
   173bc:	b	17408 <__assert_fail@plt+0x4958>
   173c0:	movw	r1, #57285	; 0xdfc5
   173c4:	movw	r2, #15672	; 0x3d38
   173c8:	movt	r1, #4
   173cc:	movt	r2, #1
   173d0:	b	173e4 <__assert_fail@plt+0x4934>
   173d4:	movw	r1, #58529	; 0xe4a1
   173d8:	movw	r2, #19020	; 0x4a4c
   173dc:	movt	r1, #4
   173e0:	movt	r2, #1
   173e4:	str	r2, [r0]
   173e8:	str	r1, [r0, #4]
   173ec:	vldr	s0, [pc, #1000]	; 177dc <__assert_fail@plt+0x4d2c>
   173f0:	vmov.f32	s4, #112	; 0x3f800000  1.0
   173f4:	vldr	s2, [r4, #28]
   173f8:	vmax.f32	d0, d1, d0
   173fc:	vcmpe.f32	s2, s4
   17400:	vmrs	APSR_nzcv, fpscr
   17404:	vselgt.f32	s0, s4, s0
   17408:	vstr	s0, [r0, #28]
   1740c:	str	r4, [r0, #160]	; 0xa0
   17410:	str	r0, [r5]
   17414:	movw	r0, #20084	; 0x4e74
   17418:	movt	r0, #6
   1741c:	ldrb	r0, [r0, #44]	; 0x2c
   17420:	tst	r0, #9
   17424:	bne	179ec <__assert_fail@plt+0x4f3c>
   17428:	ldr	r4, [r9]
   1742c:	add	r5, sp, #16
   17430:	cmp	r4, #0
   17434:	beq	17a2c <__assert_fail@plt+0x4f7c>
   17438:	ldr	r0, [r4, #8]
   1743c:	vldr	s16, [pc, #920]	; 177dc <__assert_fail@plt+0x4d2c>
   17440:	mov	ip, #0
   17444:	vmov.f32	s18, #112	; 0x3f800000  1.0
   17448:	mov	lr, #0
   1744c:	mov	r7, #0
   17450:	cmp	r0, #3
   17454:	mov	r0, #0
   17458:	ldreq	ip, [r4, #12]
   1745c:	str	r0, [sp, #4]
   17460:	str	ip, [sp, #12]
   17464:	mov	sl, lr
   17468:	mov	r6, r7
   1746c:	ldr	r0, [r4, #8]
   17470:	cmp	r0, #3
   17474:	bne	17484 <__assert_fail@plt+0x49d4>
   17478:	ldr	r0, [r4, #12]
   1747c:	cmp	r0, ip
   17480:	bne	1748c <__assert_fail@plt+0x49dc>
   17484:	mov	r8, r4
   17488:	b	1757c <__assert_fail@plt+0x4acc>
   1748c:	mov	r0, #176	; 0xb0
   17490:	str	sl, [sp, #8]
   17494:	mov	sl, r9
   17498:	mov	r9, r5
   1749c:	mov	r5, r6
   174a0:	mov	r6, r7
   174a4:	mov	r7, lr
   174a8:	bl	30ae0 <__assert_fail@plt+0x1e030>
   174ac:	ldr	ip, [sp, #12]
   174b0:	mov	r8, r0
   174b4:	mov	r0, #0
   174b8:	str	r0, [r8, #24]
   174bc:	mov	r0, #3
   174c0:	str	r0, [r8, #8]
   174c4:	cmp	ip, #3
   174c8:	str	ip, [r8, #12]
   174cc:	beq	1752c <__assert_fail@plt+0x4a7c>
   174d0:	mov	lr, r7
   174d4:	mov	r7, r6
   174d8:	cmp	ip, #2
   174dc:	mov	r6, r5
   174e0:	beq	17518 <__assert_fail@plt+0x4a68>
   174e4:	mov	r5, r9
   174e8:	mov	r9, sl
   174ec:	ldr	sl, [sp, #8]
   174f0:	cmp	ip, #1
   174f4:	bne	17574 <__assert_fail@plt+0x4ac4>
   174f8:	movw	r0, #57502	; 0xe09e
   174fc:	movw	r1, #16064	; 0x3ec0
   17500:	vmov.f32	s0, s18
   17504:	movt	r1, #1
   17508:	movt	r0, #4
   1750c:	str	r1, [r8]
   17510:	str	r0, [r8, #4]
   17514:	b	17570 <__assert_fail@plt+0x4ac0>
   17518:	movw	r0, #58529	; 0xe4a1
   1751c:	movw	r1, #19020	; 0x4a4c
   17520:	movt	r1, #1
   17524:	movt	r0, #4
   17528:	b	17548 <__assert_fail@plt+0x4a98>
   1752c:	movw	r0, #57285	; 0xdfc5
   17530:	movw	r1, #15672	; 0x3d38
   17534:	mov	lr, r7
   17538:	mov	r7, r6
   1753c:	mov	r6, r5
   17540:	movt	r1, #1
   17544:	movt	r0, #4
   17548:	str	r1, [r8]
   1754c:	str	r0, [r8, #4]
   17550:	vldr	s0, [r4, #28]
   17554:	vmax.f32	d1, d0, d8
   17558:	vcmpe.f32	s0, s18
   1755c:	vmrs	APSR_nzcv, fpscr
   17560:	vselgt.f32	s0, s18, s2
   17564:	mov	r5, r9
   17568:	mov	r9, sl
   1756c:	ldr	sl, [sp, #8]
   17570:	vstr	s0, [r8, #28]
   17574:	str	r4, [r8, #160]	; 0xa0
   17578:	str	r8, [r9]
   1757c:	mov	r4, r8
   17580:	ldr	r1, [r4, #160]!	; 0xa0
   17584:	ldr	r0, [r1, #8]
   17588:	cmp	r0, #2
   1758c:	bcs	1793c <__assert_fail@plt+0x4e8c>
   17590:	ldrb	r0, [r1, #16]
   17594:	cmp	ip, #1
   17598:	beq	179bc <__assert_fail@plt+0x4f0c>
   1759c:	cmp	r0, #0
   175a0:	bne	179b0 <__assert_fail@plt+0x4f00>
   175a4:	ldr	r0, [r1]
   175a8:	movw	r2, #17672	; 0x4508
   175ac:	movt	r2, #1
   175b0:	cmp	r0, r2
   175b4:	movwne	r2, #17472	; 0x4440
   175b8:	movtne	r2, #1
   175bc:	cmpne	r0, r2
   175c0:	beq	175e0 <__assert_fail@plt+0x4b30>
   175c4:	movw	r2, #18084	; 0x46a4
   175c8:	movt	r2, #1
   175cc:	cmp	r0, r2
   175d0:	movwne	r2, #19100	; 0x4a9c
   175d4:	movtne	r2, #1
   175d8:	cmpne	r0, r2
   175dc:	bne	17620 <__assert_fail@plt+0x4b70>
   175e0:	movw	r0, #20084	; 0x4e74
   175e4:	movt	r0, #6
   175e8:	ldrb	r0, [r0, #44]	; 0x2c
   175ec:	tst	r0, #8
   175f0:	bne	17744 <__assert_fail@plt+0x4c94>
   175f4:	ldr	r0, [r8, #156]	; 0x9c
   175f8:	cmp	sl, #0
   175fc:	moveq	sl, r8
   17600:	str	r0, [r9]
   17604:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17608:	str	r0, [r8, #156]	; 0x9c
   1760c:	str	r8, [fp, #-64]	; 0xffffffc0
   17610:	ldr	r4, [r9]
   17614:	cmp	r4, #0
   17618:	bne	1746c <__assert_fail@plt+0x49bc>
   1761c:	b	179dc <__assert_fail@plt+0x4f2c>
   17620:	movw	r2, #20084	; 0x4e74
   17624:	movt	r2, #6
   17628:	ldrh	r2, [r2, #68]	; 0x44
   1762c:	cmp	r2, #0
   17630:	beq	17678 <__assert_fail@plt+0x4bc8>
   17634:	movw	r3, #19020	; 0x4a4c
   17638:	movt	r3, #1
   1763c:	cmp	r0, r3
   17640:	movwne	r3, #16064	; 0x3ec0
   17644:	movtne	r3, #1
   17648:	cmpne	r0, r3
   1764c:	beq	17678 <__assert_fail@plt+0x4bc8>
   17650:	movw	r3, #15672	; 0x3d38
   17654:	movt	r3, #1
   17658:	cmp	r0, r3
   1765c:	movwne	r3, #18148	; 0x46e4
   17660:	movtne	r3, #1
   17664:	cmpne	r0, r3
   17668:	beq	17678 <__assert_fail@plt+0x4bc8>
   1766c:	ldr	r3, [r1, #24]
   17670:	cmp	r3, #0
   17674:	beq	175e0 <__assert_fail@plt+0x4b30>
   17678:	movw	r3, #19660	; 0x4ccc
   1767c:	movt	r3, #1
   17680:	cmp	r0, r3
   17684:	beq	176c0 <__assert_fail@plt+0x4c10>
   17688:	mov	r0, #0
   1768c:	cmp	r2, #2
   17690:	bcc	179b4 <__assert_fail@plt+0x4f04>
   17694:	ldr	r3, [r1, #24]
   17698:	sub	r5, r3, #1
   1769c:	cmp	r5, #1
   176a0:	bhi	176ec <__assert_fail@plt+0x4c3c>
   176a4:	cmp	r2, #2
   176a8:	add	r5, sp, #16
   176ac:	bhi	176f8 <__assert_fail@plt+0x4c48>
   176b0:	ldrb	r1, [r1, #18]
   176b4:	cmp	r1, #0
   176b8:	beq	176f8 <__assert_fail@plt+0x4c48>
   176bc:	b	179b4 <__assert_fail@plt+0x4f04>
   176c0:	ldr	r0, [r8, #156]	; 0x9c
   176c4:	cmp	r6, #0
   176c8:	moveq	r6, r8
   176cc:	str	r0, [r9]
   176d0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   176d4:	str	r0, [r8, #156]	; 0x9c
   176d8:	str	r8, [fp, #-56]	; 0xffffffc8
   176dc:	ldr	r4, [r9]
   176e0:	cmp	r4, #0
   176e4:	bne	1746c <__assert_fail@plt+0x49bc>
   176e8:	b	179dc <__assert_fail@plt+0x4f2c>
   176ec:	cmp	r2, #3
   176f0:	add	r5, sp, #16
   176f4:	bcc	179b4 <__assert_fail@plt+0x4f04>
   176f8:	movw	r0, #20084	; 0x4e74
   176fc:	movt	r0, #6
   17700:	ldrb	r0, [r0, #44]	; 0x2c
   17704:	tst	r0, #8
   17708:	bne	177e0 <__assert_fail@plt+0x4d30>
   1770c:	ldr	r0, [r8, #156]	; 0x9c
   17710:	str	r0, [r9]
   17714:	ldr	r0, [r5, r3, lsl #3]
   17718:	str	r0, [r8, #156]	; 0x9c
   1771c:	add	r0, r5, r3, lsl #3
   17720:	str	r8, [r5, r3, lsl #3]
   17724:	ldr	r1, [r0, #4]
   17728:	cmp	r1, #0
   1772c:	orreq	r0, r0, #4
   17730:	streq	r8, [r0]
   17734:	ldr	r4, [r9]
   17738:	cmp	r4, #0
   1773c:	bne	1746c <__assert_fail@plt+0x49bc>
   17740:	b	179dc <__assert_fail@plt+0x4f2c>
   17744:	movw	r0, #20084	; 0x4e74
   17748:	str	r6, [sp, #8]
   1774c:	movw	r6, #17744	; 0x4550
   17750:	movw	r1, #58434	; 0xe442
   17754:	str	r7, [sp]
   17758:	mov	r7, lr
   1775c:	movt	r0, #6
   17760:	movt	r6, #6
   17764:	movt	r1, #4
   17768:	ldrh	r2, [r0, #68]	; 0x44
   1776c:	ldr	r0, [r6]
   17770:	bl	127f8 <fprintf@plt>
   17774:	ldr	r0, [r4]
   17778:	ldr	r1, [r6]
   1777c:	ldr	r3, [r0, #36]	; 0x24
   17780:	ldr	r2, [r0, #4]
   17784:	cmp	r3, #0
   17788:	bne	17798 <__assert_fail@plt+0x4ce8>
   1778c:	mov	r0, r2
   17790:	bl	12a44 <fputs@plt>
   17794:	b	177a8 <__assert_fail@plt+0x4cf8>
   17798:	mov	r0, r1
   1779c:	movw	r1, #56426	; 0xdc6a
   177a0:	movt	r1, #4
   177a4:	bl	127f8 <fprintf@plt>
   177a8:	movw	r0, #17744	; 0x4550
   177ac:	mov	r1, #16
   177b0:	mov	r2, #1
   177b4:	movt	r0, #6
   177b8:	ldr	r3, [r0]
   177bc:	movw	r0, #58467	; 0xe463
   177c0:	movt	r0, #4
   177c4:	bl	12618 <fwrite@plt>
   177c8:	mov	lr, r7
   177cc:	ldr	r7, [sp]
   177d0:	ldr	ip, [sp, #12]
   177d4:	ldr	r6, [sp, #8]
   177d8:	b	175f4 <__assert_fail@plt+0x4b44>
   177dc:	andeq	r0, r0, r0
   177e0:	str	r6, [sp, #8]
   177e4:	movw	r6, #17744	; 0x4550
   177e8:	movw	r1, #58484	; 0xe474
   177ec:	str	r7, [sp]
   177f0:	mov	r7, lr
   177f4:	movt	r6, #6
   177f8:	movt	r1, #4
   177fc:	ldr	r0, [r6]
   17800:	bl	127f8 <fprintf@plt>
   17804:	ldr	r0, [r4]
   17808:	ldr	r1, [r6]
   1780c:	ldr	r3, [r0, #36]	; 0x24
   17810:	ldr	r2, [r0, #4]
   17814:	cmp	r3, #0
   17818:	bne	17828 <__assert_fail@plt+0x4d78>
   1781c:	mov	r0, r2
   17820:	bl	12a44 <fputs@plt>
   17824:	b	17838 <__assert_fail@plt+0x4d88>
   17828:	mov	r0, r1
   1782c:	movw	r1, #56426	; 0xdc6a
   17830:	movt	r1, #4
   17834:	bl	127f8 <fprintf@plt>
   17838:	ldr	r1, [r4]
   1783c:	movw	ip, #17052	; 0x429c
   17840:	movw	r0, #17744	; 0x4550
   17844:	mov	r3, #0
   17848:	movt	ip, #6
   1784c:	movt	r0, #6
   17850:	ldr	r2, [ip]
   17854:	ldr	r0, [r0]
   17858:	ldr	r1, [r1, #24]
   1785c:	cmp	r2, r1
   17860:	beq	1790c <__assert_fail@plt+0x4e5c>
   17864:	ldr	r2, [ip, #8]
   17868:	mov	r3, #1
   1786c:	cmp	r2, r1
   17870:	beq	1790c <__assert_fail@plt+0x4e5c>
   17874:	ldr	r2, [ip, #16]
   17878:	mov	r3, #2
   1787c:	cmp	r2, r1
   17880:	beq	1790c <__assert_fail@plt+0x4e5c>
   17884:	ldr	r2, [ip, #24]
   17888:	mov	r3, #3
   1788c:	cmp	r2, r1
   17890:	beq	1790c <__assert_fail@plt+0x4e5c>
   17894:	ldr	r2, [ip, #32]
   17898:	mov	r3, #4
   1789c:	cmp	r2, r1
   178a0:	beq	1790c <__assert_fail@plt+0x4e5c>
   178a4:	ldr	r2, [ip, #40]	; 0x28
   178a8:	mov	r3, #5
   178ac:	cmp	r2, r1
   178b0:	beq	1790c <__assert_fail@plt+0x4e5c>
   178b4:	ldr	r2, [ip, #48]	; 0x30
   178b8:	mov	r3, #6
   178bc:	cmp	r2, r1
   178c0:	beq	1790c <__assert_fail@plt+0x4e5c>
   178c4:	ldr	r2, [ip, #56]	; 0x38
   178c8:	mov	r3, #7
   178cc:	cmp	r2, r1
   178d0:	beq	1790c <__assert_fail@plt+0x4e5c>
   178d4:	ldr	r2, [ip, #64]	; 0x40
   178d8:	mov	r3, #8
   178dc:	cmp	r2, r1
   178e0:	beq	1790c <__assert_fail@plt+0x4e5c>
   178e4:	ldr	r2, [ip, #72]	; 0x48
   178e8:	mov	r3, #9
   178ec:	cmp	r2, r1
   178f0:	beq	1790c <__assert_fail@plt+0x4e5c>
   178f4:	ldr	r2, [ip, #80]	; 0x50
   178f8:	mov	r3, #10
   178fc:	cmp	r2, r1
   17900:	movw	r2, #59084	; 0xe6cc
   17904:	movt	r2, #4
   17908:	bne	17914 <__assert_fail@plt+0x4e64>
   1790c:	add	r1, ip, r3, lsl #3
   17910:	ldr	r2, [r1, #4]
   17914:	movw	r1, #58514	; 0xe492
   17918:	movt	r1, #4
   1791c:	bl	127f8 <fprintf@plt>
   17920:	ldr	r0, [r4]
   17924:	mov	lr, r7
   17928:	ldr	r7, [sp]
   1792c:	ldr	ip, [sp, #12]
   17930:	ldr	r6, [sp, #8]
   17934:	ldr	r3, [r0, #24]
   17938:	b	1770c <__assert_fail@plt+0x4c5c>
   1793c:	beq	17950 <__assert_fail@plt+0x4ea0>
   17940:	cmp	r0, #3
   17944:	bne	17a58 <__assert_fail@plt+0x4fa8>
   17948:	mov	r0, r4
   1794c:	b	17954 <__assert_fail@plt+0x4ea4>
   17950:	add	r0, r1, #160	; 0xa0
   17954:	str	sl, [fp, #-60]	; 0xffffffc4
   17958:	str	r6, [fp, #-52]	; 0xffffffcc
   1795c:	bl	17298 <__assert_fail@plt+0x47e8>
   17960:	ldr	r1, [r4]
   17964:	ldr	ip, [sp, #12]
   17968:	strb	r0, [r1, #16]
   1796c:	cmp	r0, #0
   17970:	beq	17994 <__assert_fail@plt+0x4ee4>
   17974:	mov	r0, r5
   17978:	sub	r1, fp, #64	; 0x40
   1797c:	sub	r2, fp, #56	; 0x38
   17980:	mov	r3, r9
   17984:	bl	181e8 <__assert_fail@plt+0x5738>
   17988:	ldr	ip, [sp, #12]
   1798c:	mov	r0, #1
   17990:	str	r0, [sp, #4]
   17994:	ldr	r4, [r8, #156]!	; 0x9c
   17998:	cmp	r4, #0
   1799c:	beq	179d0 <__assert_fail@plt+0x4f20>
   179a0:	ldr	lr, [fp, #-60]	; 0xffffffc4
   179a4:	ldr	r7, [fp, #-52]	; 0xffffffcc
   179a8:	mov	r9, r8
   179ac:	b	17464 <__assert_fail@plt+0x49b4>
   179b0:	mov	r0, #1
   179b4:	mov	lr, sl
   179b8:	mov	r7, r6
   179bc:	str	lr, [fp, #-60]	; 0xffffffc4
   179c0:	str	r7, [fp, #-52]	; 0xffffffcc
   179c4:	cmp	r0, #0
   179c8:	bne	17974 <__assert_fail@plt+0x4ec4>
   179cc:	b	17994 <__assert_fail@plt+0x4ee4>
   179d0:	ldr	r5, [sp, #4]
   179d4:	mov	r9, r8
   179d8:	b	17a30 <__assert_fail@plt+0x4f80>
   179dc:	ldr	r5, [sp, #4]
   179e0:	str	sl, [fp, #-60]	; 0xffffffc4
   179e4:	str	r6, [fp, #-52]	; 0xffffffcc
   179e8:	b	17a30 <__assert_fail@plt+0x4f80>
   179ec:	movw	r4, #17744	; 0x4550
   179f0:	movw	r0, #58411	; 0xe42b
   179f4:	mov	r1, #22
   179f8:	mov	r2, #1
   179fc:	movt	r4, #6
   17a00:	movt	r0, #4
   17a04:	ldr	r3, [r4]
   17a08:	bl	12618 <fwrite@plt>
   17a0c:	ldr	r0, [r4]
   17a10:	ldr	r1, [r9]
   17a14:	mov	r2, #0
   17a18:	bl	16c58 <__assert_fail@plt+0x41a8>
   17a1c:	ldr	r4, [r9]
   17a20:	add	r5, sp, #16
   17a24:	cmp	r4, #0
   17a28:	bne	17438 <__assert_fail@plt+0x4988>
   17a2c:	mov	r5, #0
   17a30:	add	r0, sp, #16
   17a34:	sub	r1, fp, #64	; 0x40
   17a38:	sub	r2, fp, #56	; 0x38
   17a3c:	mov	r3, r9
   17a40:	bl	181e8 <__assert_fail@plt+0x5738>
   17a44:	and	r0, r5, #1
   17a48:	sub	sp, fp, #48	; 0x30
   17a4c:	vpop	{d8-d9}
   17a50:	add	sp, sp, #4
   17a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a58:	movw	r1, #58100	; 0xe2f4
   17a5c:	mov	r0, #0
   17a60:	mov	r2, #5
   17a64:	movt	r1, #4
   17a68:	bl	12564 <dcgettext@plt>
   17a6c:	mov	r2, r0
   17a70:	mov	r0, #1
   17a74:	mov	r1, #0
   17a78:	bl	1269c <error@plt>
   17a7c:	push	{r4, sl, fp, lr}
   17a80:	add	fp, sp, #8
   17a84:	mov	r4, r0
   17a88:	tst	r1, #1
   17a8c:	beq	17ab8 <__assert_fail@plt+0x5008>
   17a90:	b	17aac <__assert_fail@plt+0x4ffc>
   17a94:	ldr	r4, [r4, #160]	; 0xa0
   17a98:	mov	r1, #0
   17a9c:	cmp	r4, #0
   17aa0:	beq	17adc <__assert_fail@plt+0x502c>
   17aa4:	tst	r1, #1
   17aa8:	beq	17ab8 <__assert_fail@plt+0x5008>
   17aac:	ldr	r0, [r4, #8]
   17ab0:	cmp	r0, #3
   17ab4:	bne	17b00 <__assert_fail@plt+0x5050>
   17ab8:	ldr	r0, [r4, #156]	; 0x9c
   17abc:	cmp	r0, #0
   17ac0:	beq	17a94 <__assert_fail@plt+0x4fe4>
   17ac4:	ldr	r1, [r0, #8]
   17ac8:	cmp	r1, #3
   17acc:	bne	17ae0 <__assert_fail@plt+0x5030>
   17ad0:	mov	r1, #0
   17ad4:	bl	17a7c <__assert_fail@plt+0x4fcc>
   17ad8:	b	17a94 <__assert_fail@plt+0x4fe4>
   17adc:	pop	{r4, sl, fp, pc}
   17ae0:	movw	r0, #58661	; 0xe525
   17ae4:	movw	r1, #56442	; 0xdc7a
   17ae8:	movw	r3, #58609	; 0xe4f1
   17aec:	movw	r2, #1235	; 0x4d3
   17af0:	movt	r0, #4
   17af4:	movt	r1, #4
   17af8:	movt	r3, #4
   17afc:	bl	12ab0 <__assert_fail@plt>
   17b00:	movw	r0, #58590	; 0xe4de
   17b04:	movw	r1, #56442	; 0xdc7a
   17b08:	movw	r3, #58609	; 0xe4f1
   17b0c:	movw	r2, #1230	; 0x4ce
   17b10:	movt	r0, #4
   17b14:	movt	r1, #4
   17b18:	movt	r3, #4
   17b1c:	bl	12ab0 <__assert_fail@plt>
   17b20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b24:	add	fp, sp, #28
   17b28:	sub	sp, sp, #4
   17b2c:	vpush	{d8-d9}
   17b30:	sub	sp, sp, #8
   17b34:	cmp	r0, #0
   17b38:	beq	17dd4 <__assert_fail@plt+0x5324>
   17b3c:	movw	r8, #58691	; 0xe543
   17b40:	movw	sl, #20084	; 0x4e74
   17b44:	movw	r9, #19020	; 0x4a4c
   17b48:	mov	r4, r0
   17b4c:	movt	r8, #4
   17b50:	movt	sl, #6
   17b54:	movt	r9, #1
   17b58:	ldr	r0, [r4, #8]
   17b5c:	mov	r2, r8
   17b60:	cmp	r0, #3
   17b64:	bne	17b74 <__assert_fail@plt+0x50c4>
   17b68:	b	17ba4 <__assert_fail@plt+0x50f4>
   17b6c:	movw	r2, #58714	; 0xe55a
   17b70:	movt	r2, #4
   17b74:	ldrb	r0, [sl, #44]	; 0x2c
   17b78:	tst	r0, #8
   17b7c:	bne	17da4 <__assert_fail@plt+0x52f4>
   17b80:	ldr	r0, [r4, #156]	; 0x9c
   17b84:	bl	17b20 <__assert_fail@plt+0x5070>
   17b88:	ldr	r4, [r4, #160]	; 0xa0
   17b8c:	cmp	r4, #0
   17b90:	beq	17dd4 <__assert_fail@plt+0x5324>
   17b94:	ldr	r0, [r4, #8]
   17b98:	mov	r2, r8
   17b9c:	cmp	r0, #3
   17ba0:	bne	17b74 <__assert_fail@plt+0x50c4>
   17ba4:	ldr	r0, [r4, #156]	; 0x9c
   17ba8:	cmp	r0, #0
   17bac:	ldrne	r5, [r4, #160]	; 0xa0
   17bb0:	cmpne	r5, #0
   17bb4:	beq	17b6c <__assert_fail@plt+0x50bc>
   17bb8:	ldr	r7, [r0, #160]	; 0xa0
   17bbc:	cmp	r7, #0
   17bc0:	beq	17cec <__assert_fail@plt+0x523c>
   17bc4:	mov	r0, r7
   17bc8:	bl	18488 <__assert_fail@plt+0x59d8>
   17bcc:	cmp	r0, #0
   17bd0:	bne	17d04 <__assert_fail@plt+0x5254>
   17bd4:	mov	r0, r5
   17bd8:	bl	18488 <__assert_fail@plt+0x59d8>
   17bdc:	cmp	r0, #0
   17be0:	bne	17d1c <__assert_fail@plt+0x526c>
   17be4:	mov	r0, r7
   17be8:	bl	184d4 <__assert_fail@plt+0x5a24>
   17bec:	mov	r6, r0
   17bf0:	mov	r0, r5
   17bf4:	bl	184d4 <__assert_fail@plt+0x5a24>
   17bf8:	cmp	r6, r0
   17bfc:	blt	17d34 <__assert_fail@plt+0x5284>
   17c00:	bne	17c84 <__assert_fail@plt+0x51d4>
   17c04:	ldrb	r0, [sl, #44]	; 0x2c
   17c08:	vldr	s16, [r5, #28]
   17c0c:	vldr	s18, [r7, #28]
   17c10:	tst	r0, #8
   17c14:	bne	17c44 <__assert_fail@plt+0x5194>
   17c18:	ldr	r0, [r4]
   17c1c:	cmp	r0, r9
   17c20:	beq	17c78 <__assert_fail@plt+0x51c8>
   17c24:	movw	r1, #15672	; 0x3d38
   17c28:	movt	r1, #1
   17c2c:	cmp	r0, r1
   17c30:	bne	17d60 <__assert_fail@plt+0x52b0>
   17c34:	vcmpe.f32	s16, s18
   17c38:	vmrs	APSR_nzcv, fpscr
   17c3c:	bgt	17c84 <__assert_fail@plt+0x51d4>
   17c40:	b	17d78 <__assert_fail@plt+0x52c8>
   17c44:	vcvt.f64.f32	d17, s18
   17c48:	movw	r0, #17744	; 0x4550
   17c4c:	vcvt.f64.f32	d16, s16
   17c50:	movw	r1, #58842	; 0xe5da
   17c54:	movt	r0, #6
   17c58:	movt	r1, #4
   17c5c:	ldr	r0, [r0]
   17c60:	vmov	r2, r3, d17
   17c64:	vstr	d16, [sp]
   17c68:	bl	127f8 <fprintf@plt>
   17c6c:	ldr	r0, [r4]
   17c70:	cmp	r0, r9
   17c74:	bne	17c24 <__assert_fail@plt+0x5174>
   17c78:	vcmpe.f32	s16, s18
   17c7c:	vmrs	APSR_nzcv, fpscr
   17c80:	bpl	17d90 <__assert_fail@plt+0x52e0>
   17c84:	ldrb	r0, [sl, #44]	; 0x2c
   17c88:	tst	r0, #8
   17c8c:	bne	17cb4 <__assert_fail@plt+0x5204>
   17c90:	ldr	r0, [r4, #156]	; 0x9c
   17c94:	ldr	r1, [r4, #160]	; 0xa0
   17c98:	ldr	r2, [r0, #160]	; 0xa0
   17c9c:	str	r1, [r0, #160]	; 0xa0
   17ca0:	str	r2, [r4, #160]	; 0xa0
   17ca4:	ldr	r1, [r4, #8]
   17ca8:	cmp	r1, #3
   17cac:	beq	17ba8 <__assert_fail@plt+0x50f8>
   17cb0:	b	17d4c <__assert_fail@plt+0x529c>
   17cb4:	movw	r0, #17744	; 0x4550
   17cb8:	mov	r1, #24
   17cbc:	mov	r2, #1
   17cc0:	movt	r0, #6
   17cc4:	ldr	r3, [r0]
   17cc8:	mov	r5, r0
   17ccc:	movw	r0, #58976	; 0xe660
   17cd0:	movt	r0, #4
   17cd4:	bl	12618 <fwrite@plt>
   17cd8:	ldr	r0, [r5]
   17cdc:	mov	r1, r4
   17ce0:	mov	r2, #0
   17ce4:	bl	16c58 <__assert_fail@plt+0x41a8>
   17ce8:	b	17c90 <__assert_fail@plt+0x51e0>
   17cec:	movw	r2, #58736	; 0xe570
   17cf0:	movt	r2, #4
   17cf4:	ldrb	r0, [sl, #44]	; 0x2c
   17cf8:	tst	r0, #8
   17cfc:	beq	17b80 <__assert_fail@plt+0x50d0>
   17d00:	b	17da4 <__assert_fail@plt+0x52f4>
   17d04:	movw	r2, #58765	; 0xe58d
   17d08:	movt	r2, #4
   17d0c:	ldrb	r0, [sl, #44]	; 0x2c
   17d10:	tst	r0, #8
   17d14:	beq	17b80 <__assert_fail@plt+0x50d0>
   17d18:	b	17da4 <__assert_fail@plt+0x52f4>
   17d1c:	movw	r2, #58795	; 0xe5ab
   17d20:	movt	r2, #4
   17d24:	ldrb	r0, [sl, #44]	; 0x2c
   17d28:	tst	r0, #8
   17d2c:	beq	17b80 <__assert_fail@plt+0x50d0>
   17d30:	b	17da4 <__assert_fail@plt+0x52f4>
   17d34:	movw	r2, #58826	; 0xe5ca
   17d38:	movt	r2, #4
   17d3c:	ldrb	r0, [sl, #44]	; 0x2c
   17d40:	tst	r0, #8
   17d44:	beq	17b80 <__assert_fail@plt+0x50d0>
   17d48:	b	17da4 <__assert_fail@plt+0x52f4>
   17d4c:	mov	r2, r8
   17d50:	ldrb	r0, [sl, #44]	; 0x2c
   17d54:	tst	r0, #8
   17d58:	beq	17b80 <__assert_fail@plt+0x50d0>
   17d5c:	b	17da4 <__assert_fail@plt+0x52f4>
   17d60:	movw	r2, #58958	; 0xe64e
   17d64:	movt	r2, #4
   17d68:	ldrb	r0, [sl, #44]	; 0x2c
   17d6c:	tst	r0, #8
   17d70:	beq	17b80 <__assert_fail@plt+0x50d0>
   17d74:	b	17da4 <__assert_fail@plt+0x52f4>
   17d78:	movw	r2, #58913	; 0xe621
   17d7c:	movt	r2, #4
   17d80:	ldrb	r0, [sl, #44]	; 0x2c
   17d84:	tst	r0, #8
   17d88:	beq	17b80 <__assert_fail@plt+0x50d0>
   17d8c:	b	17da4 <__assert_fail@plt+0x52f4>
   17d90:	movw	r2, #58869	; 0xe5f5
   17d94:	movt	r2, #4
   17d98:	ldrb	r0, [sl, #44]	; 0x2c
   17d9c:	tst	r0, #8
   17da0:	beq	17b80 <__assert_fail@plt+0x50d0>
   17da4:	movw	r0, #17744	; 0x4550
   17da8:	movw	r1, #59001	; 0xe679
   17dac:	movt	r0, #6
   17db0:	movt	r1, #4
   17db4:	mov	r5, r0
   17db8:	ldr	r0, [r0]
   17dbc:	bl	127f8 <fprintf@plt>
   17dc0:	ldr	r0, [r5]
   17dc4:	mov	r1, r4
   17dc8:	mov	r2, #0
   17dcc:	bl	16c58 <__assert_fail@plt+0x41a8>
   17dd0:	b	17b80 <__assert_fail@plt+0x50d0>
   17dd4:	sub	sp, fp, #48	; 0x30
   17dd8:	vpop	{d8-d9}
   17ddc:	add	sp, sp, #4
   17de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17de4:	push	{r4, sl, fp, lr}
   17de8:	add	fp, sp, #8
   17dec:	mov	r4, r0
   17df0:	ldr	r0, [r0]
   17df4:	cmp	r0, #2
   17df8:	beq	17e7c <__assert_fail@plt+0x53cc>
   17dfc:	cmp	r0, #0
   17e00:	beq	17e9c <__assert_fail@plt+0x53ec>
   17e04:	mov	r0, #176	; 0xb0
   17e08:	bl	30ae0 <__assert_fail@plt+0x1e030>
   17e0c:	movw	r1, #17788	; 0x457c
   17e10:	movt	r1, #6
   17e14:	ldr	r2, [r1, #12]
   17e18:	cmp	r2, #0
   17e1c:	beq	17e2c <__assert_fail@plt+0x537c>
   17e20:	ldr	r2, [r1, #16]
   17e24:	str	r0, [r2, #152]	; 0x98
   17e28:	b	17e30 <__assert_fail@plt+0x5380>
   17e2c:	str	r0, [r1, #12]
   17e30:	movw	r2, #20084	; 0x4e74
   17e34:	str	r0, [r1, #16]
   17e38:	mov	r1, #10
   17e3c:	mov	r3, #1065353216	; 0x3f800000
   17e40:	movt	r2, #6
   17e44:	str	r1, [r0, #24]
   17e48:	movw	r1, #257	; 0x101
   17e4c:	strh	r1, [r0, #18]
   17e50:	mov	r1, #0
   17e54:	ldrb	r2, [r2, #15]
   17e58:	str	r1, [r0, #8]
   17e5c:	str	r1, [r0, #12]
   17e60:	str	r3, [r0, #28]
   17e64:	str	r1, [r0, #164]	; 0xa4
   17e68:	str	r1, [r0, #168]	; 0xa8
   17e6c:	str	r4, [r0, #172]	; 0xac
   17e70:	str	r1, [r0, #36]	; 0x24
   17e74:	strb	r2, [r0, #32]
   17e78:	pop	{r4, sl, fp, pc}
   17e7c:	movw	r0, #55667	; 0xd973
   17e80:	movw	r1, #56442	; 0xdc7a
   17e84:	movw	r3, #57049	; 0xded9
   17e88:	movw	r2, #1486	; 0x5ce
   17e8c:	movt	r0, #4
   17e90:	movt	r1, #4
   17e94:	movt	r3, #4
   17e98:	bl	12ab0 <__assert_fail@plt>
   17e9c:	movw	r0, #55631	; 0xd94f
   17ea0:	movw	r1, #56442	; 0xdc7a
   17ea4:	movw	r3, #57049	; 0xded9
   17ea8:	movw	r2, #1485	; 0x5cd
   17eac:	movt	r0, #4
   17eb0:	movt	r1, #4
   17eb4:	movt	r3, #4
   17eb8:	bl	12ab0 <__assert_fail@plt>
   17ebc:	push	{r4, sl, fp, lr}
   17ec0:	add	fp, sp, #8
   17ec4:	mov	r4, r0
   17ec8:	ldr	r0, [r0]
   17ecc:	cmp	r0, #2
   17ed0:	beq	17f5c <__assert_fail@plt+0x54ac>
   17ed4:	cmp	r0, #0
   17ed8:	beq	17f7c <__assert_fail@plt+0x54cc>
   17edc:	mov	r0, #176	; 0xb0
   17ee0:	bl	30ae0 <__assert_fail@plt+0x1e030>
   17ee4:	movw	r1, #17788	; 0x457c
   17ee8:	movt	r1, #6
   17eec:	ldr	r2, [r1, #12]
   17ef0:	cmp	r2, #0
   17ef4:	beq	17f04 <__assert_fail@plt+0x5454>
   17ef8:	ldr	r2, [r1, #16]
   17efc:	str	r0, [r2, #152]	; 0x98
   17f00:	b	17f08 <__assert_fail@plt+0x5458>
   17f04:	str	r0, [r1, #12]
   17f08:	movw	r2, #20084	; 0x4e74
   17f0c:	str	r0, [r1, #16]
   17f10:	movw	r1, #57109	; 0xdf15
   17f14:	mov	r3, #1065353216	; 0x3f800000
   17f18:	movt	r2, #6
   17f1c:	movt	r1, #4
   17f20:	ldrb	r2, [r2, #15]
   17f24:	str	r1, [r0, #36]	; 0x24
   17f28:	mov	r1, #10
   17f2c:	str	r1, [r0, #24]
   17f30:	movw	r1, #257	; 0x101
   17f34:	strh	r1, [r0, #18]
   17f38:	mov	r1, #0
   17f3c:	str	r1, [r0, #8]
   17f40:	str	r1, [r0, #12]
   17f44:	str	r3, [r0, #28]
   17f48:	str	r1, [r0, #164]	; 0xa4
   17f4c:	str	r1, [r0, #168]	; 0xa8
   17f50:	str	r4, [r0, #172]	; 0xac
   17f54:	strb	r2, [r0, #32]
   17f58:	pop	{r4, sl, fp, pc}
   17f5c:	movw	r0, #55667	; 0xd973
   17f60:	movw	r1, #56442	; 0xdc7a
   17f64:	movw	r3, #57049	; 0xded9
   17f68:	movw	r2, #1486	; 0x5ce
   17f6c:	movt	r0, #4
   17f70:	movt	r1, #4
   17f74:	movt	r3, #4
   17f78:	bl	12ab0 <__assert_fail@plt>
   17f7c:	movw	r0, #55631	; 0xd94f
   17f80:	movw	r1, #56442	; 0xdc7a
   17f84:	movw	r3, #57049	; 0xded9
   17f88:	movw	r2, #1485	; 0x5cd
   17f8c:	movt	r0, #4
   17f90:	movt	r1, #4
   17f94:	movt	r3, #4
   17f98:	bl	12ab0 <__assert_fail@plt>
   17f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fa0:	add	fp, sp, #28
   17fa4:	sub	sp, sp, #4
   17fa8:	movw	r7, #17788	; 0x457c
   17fac:	mov	sl, r1
   17fb0:	mov	r5, r0
   17fb4:	movt	r7, #6
   17fb8:	ldr	r6, [r7, #20]
   17fbc:	cmp	r6, #0
   17fc0:	bne	17fe0 <__assert_fail@plt+0x5530>
   17fc4:	movw	r0, #57140	; 0xdf34
   17fc8:	movt	r0, #4
   17fcc:	bl	1c624 <__assert_fail@plt+0x9b74>
   17fd0:	mov	r6, r0
   17fd4:	cmp	r0, #0
   17fd8:	str	r0, [r7, #20]
   17fdc:	beq	18194 <__assert_fail@plt+0x56e4>
   17fe0:	ldr	r0, [r7, #16]
   17fe4:	movw	r8, #20084	; 0x4e74
   17fe8:	movt	r8, #6
   17fec:	cmp	r0, #0
   17ff0:	beq	180b0 <__assert_fail@plt+0x5600>
   17ff4:	ldr	r0, [r0, #8]
   17ff8:	cmp	r0, #1
   17ffc:	cmpne	r0, #5
   18000:	bne	180a8 <__assert_fail@plt+0x55f8>
   18004:	ldr	r0, [r6]
   18008:	cmp	r0, #2
   1800c:	beq	18130 <__assert_fail@plt+0x5680>
   18010:	cmp	r0, #0
   18014:	beq	18150 <__assert_fail@plt+0x56a0>
   18018:	mov	r0, #176	; 0xb0
   1801c:	bl	30ae0 <__assert_fail@plt+0x1e030>
   18020:	ldr	r1, [r7, #12]
   18024:	cmp	r1, #0
   18028:	beq	18038 <__assert_fail@plt+0x5588>
   1802c:	ldr	r1, [r7, #16]
   18030:	str	r0, [r1, #152]	; 0x98
   18034:	b	1803c <__assert_fail@plt+0x558c>
   18038:	str	r0, [r7, #12]
   1803c:	ldrb	r1, [r8, #15]
   18040:	movw	r4, #15672	; 0x3d38
   18044:	mov	r2, #10
   18048:	mov	r3, #0
   1804c:	str	r6, [r0, #172]	; 0xac
   18050:	movw	r6, #57285	; 0xdfc5
   18054:	mov	r9, #1065353216	; 0x3f800000
   18058:	str	r0, [r7, #16]
   1805c:	movt	r4, #1
   18060:	str	r3, [r0, #168]	; 0xa8
   18064:	str	r2, [r0, #24]
   18068:	mov	r2, #3
   1806c:	str	r9, [r0, #28]
   18070:	str	r3, [r0, #164]	; 0xa4
   18074:	str	r3, [r0, #36]	; 0x24
   18078:	str	r3, [r0, #40]	; 0x28
   1807c:	movt	r6, #4
   18080:	stm	r0, {r4, r6}
   18084:	str	r2, [r0, #8]
   18088:	str	r2, [r0, #12]
   1808c:	str	r3, [r0, #16]
   18090:	strb	r3, [r0, #20]
   18094:	strb	r1, [r0, #32]
   18098:	ldr	r0, [r5]
   1809c:	cmp	r0, #2
   180a0:	bne	180bc <__assert_fail@plt+0x560c>
   180a4:	b	18130 <__assert_fail@plt+0x5680>
   180a8:	cmp	r0, #0
   180ac:	beq	18170 <__assert_fail@plt+0x56c0>
   180b0:	ldr	r0, [r5]
   180b4:	cmp	r0, #2
   180b8:	beq	18130 <__assert_fail@plt+0x5680>
   180bc:	cmp	r0, #0
   180c0:	beq	18150 <__assert_fail@plt+0x56a0>
   180c4:	mov	r0, #176	; 0xb0
   180c8:	bl	30ae0 <__assert_fail@plt+0x1e030>
   180cc:	ldr	r1, [r7, #12]
   180d0:	cmp	r1, #0
   180d4:	beq	180e4 <__assert_fail@plt+0x5634>
   180d8:	ldr	r1, [r7, #16]
   180dc:	str	r0, [r1, #152]	; 0x98
   180e0:	b	180e8 <__assert_fail@plt+0x5638>
   180e4:	str	r0, [r7, #12]
   180e8:	ldrb	r2, [r8, #15]
   180ec:	mov	r1, #10
   180f0:	mov	r3, #1065353216	; 0x3f800000
   180f4:	str	r0, [r7, #16]
   180f8:	str	r1, [r0, #24]
   180fc:	movw	r1, #257	; 0x101
   18100:	strh	r1, [r0, #18]
   18104:	mov	r1, #0
   18108:	str	r1, [r0, #8]
   1810c:	str	r1, [r0, #12]
   18110:	str	r3, [r0, #28]
   18114:	str	r1, [r0, #164]	; 0xa4
   18118:	str	r1, [r0, #168]	; 0xa8
   1811c:	str	r5, [r0, #172]	; 0xac
   18120:	str	sl, [r0, #36]	; 0x24
   18124:	strb	r2, [r0, #32]
   18128:	sub	sp, fp, #28
   1812c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18130:	movw	r0, #55667	; 0xd973
   18134:	movw	r1, #56442	; 0xdc7a
   18138:	movw	r3, #57049	; 0xded9
   1813c:	movw	r2, #1486	; 0x5ce
   18140:	movt	r0, #4
   18144:	movt	r1, #4
   18148:	movt	r3, #4
   1814c:	bl	12ab0 <__assert_fail@plt>
   18150:	movw	r0, #55631	; 0xd94f
   18154:	movw	r1, #56442	; 0xdc7a
   18158:	movw	r3, #57049	; 0xded9
   1815c:	movw	r2, #1485	; 0x5cd
   18160:	movt	r0, #4
   18164:	movt	r1, #4
   18168:	movt	r3, #4
   1816c:	bl	12ab0 <__assert_fail@plt>
   18170:	movw	r1, #57243	; 0xdf9b
   18174:	mov	r0, #0
   18178:	mov	r2, #5
   1817c:	movt	r1, #4
   18180:	bl	12564 <dcgettext@plt>
   18184:	mov	r2, r0
   18188:	mov	r0, #1
   1818c:	mov	r1, #0
   18190:	bl	1269c <error@plt>
   18194:	movw	r0, #57144	; 0xdf38
   18198:	movw	r1, #56442	; 0xdc7a
   1819c:	movw	r3, #57162	; 0xdf4a
   181a0:	movw	r2, #1528	; 0x5f8
   181a4:	movt	r0, #4
   181a8:	movt	r1, #4
   181ac:	movt	r3, #4
   181b0:	bl	12ab0 <__assert_fail@plt>
   181b4:	push	{fp, lr}
   181b8:	mov	fp, sp
   181bc:	sub	sp, sp, #8
   181c0:	ldr	r0, [r0]
   181c4:	mov	r2, #4
   181c8:	str	r0, [sp, #4]
   181cc:	ldr	r0, [r1]
   181d0:	mov	r1, sp
   181d4:	str	r0, [sp]
   181d8:	add	r0, sp, #4
   181dc:	bl	12540 <memcmp@plt>
   181e0:	mov	sp, fp
   181e4:	pop	{fp, pc}
   181e8:	push	{r4, r5, r6, sl, fp, lr}
   181ec:	add	fp, sp, #16
   181f0:	mov	r5, r0
   181f4:	mov	r0, r1
   181f8:	mov	r1, r3
   181fc:	mov	r4, r3
   18200:	mov	r6, r2
   18204:	bl	1829c <__assert_fail@plt+0x57ec>
   18208:	mov	r0, r6
   1820c:	mov	r1, r4
   18210:	bl	1829c <__assert_fail@plt+0x57ec>
   18214:	mov	r0, r5
   18218:	mov	r1, r4
   1821c:	bl	1829c <__assert_fail@plt+0x57ec>
   18220:	add	r0, r5, #8
   18224:	mov	r1, r4
   18228:	bl	1829c <__assert_fail@plt+0x57ec>
   1822c:	add	r0, r5, #16
   18230:	mov	r1, r4
   18234:	bl	1829c <__assert_fail@plt+0x57ec>
   18238:	add	r0, r5, #24
   1823c:	mov	r1, r4
   18240:	bl	1829c <__assert_fail@plt+0x57ec>
   18244:	add	r0, r5, #32
   18248:	mov	r1, r4
   1824c:	bl	1829c <__assert_fail@plt+0x57ec>
   18250:	add	r0, r5, #40	; 0x28
   18254:	mov	r1, r4
   18258:	bl	1829c <__assert_fail@plt+0x57ec>
   1825c:	add	r0, r5, #48	; 0x30
   18260:	mov	r1, r4
   18264:	bl	1829c <__assert_fail@plt+0x57ec>
   18268:	add	r0, r5, #56	; 0x38
   1826c:	mov	r1, r4
   18270:	bl	1829c <__assert_fail@plt+0x57ec>
   18274:	add	r0, r5, #64	; 0x40
   18278:	mov	r1, r4
   1827c:	bl	1829c <__assert_fail@plt+0x57ec>
   18280:	add	r0, r5, #72	; 0x48
   18284:	mov	r1, r4
   18288:	bl	1829c <__assert_fail@plt+0x57ec>
   1828c:	add	r0, r5, #80	; 0x50
   18290:	mov	r1, r4
   18294:	pop	{r4, r5, r6, sl, fp, lr}
   18298:	b	1829c <__assert_fail@plt+0x57ec>
   1829c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182a0:	add	fp, sp, #28
   182a4:	sub	sp, sp, #4
   182a8:	mov	sl, r0
   182ac:	ldr	r0, [r0]
   182b0:	cmp	r0, #0
   182b4:	beq	183f4 <__assert_fail@plt+0x5944>
   182b8:	movw	r5, #20084	; 0x4e74
   182bc:	mov	r9, r1
   182c0:	movt	r5, #6
   182c4:	ldrb	r1, [r5, #44]	; 0x2c
   182c8:	tst	r1, #8
   182cc:	bne	183fc <__assert_fail@plt+0x594c>
   182d0:	bl	16060 <__assert_fail@plt+0x35b0>
   182d4:	ldr	r1, [sl]
   182d8:	cmp	r1, #0
   182dc:	beq	18440 <__assert_fail@plt+0x5990>
   182e0:	mov	lr, r5
   182e4:	mov	ip, #0
   182e8:	mov	r6, #0
   182ec:	mov	r8, #0
   182f0:	ldr	r2, [r1, #156]	; 0x9c
   182f4:	cmp	r6, #0
   182f8:	str	ip, [r1, #156]	; 0x9c
   182fc:	bne	1832c <__assert_fail@plt+0x587c>
   18300:	cmp	r8, #0
   18304:	str	r6, [r1, #156]	; 0x9c
   18308:	mov	r6, r1
   1830c:	moveq	r8, r1
   18310:	cmp	r2, #0
   18314:	mov	r1, r2
   18318:	beq	183c0 <__assert_fail@plt+0x5910>
   1831c:	ldr	r2, [r1, #156]	; 0x9c
   18320:	cmp	r6, #0
   18324:	str	ip, [r1, #156]	; 0x9c
   18328:	beq	18300 <__assert_fail@plt+0x5850>
   1832c:	ldr	r5, [r1, #160]	; 0xa0
   18330:	mov	r3, r6
   18334:	ldr	r4, [r5, #24]
   18338:	ldr	r0, [r3, #160]	; 0xa0
   1833c:	ldr	r7, [r0, #24]
   18340:	cmp	r7, r4
   18344:	beq	18368 <__assert_fail@plt+0x58b8>
   18348:	bcs	183a0 <__assert_fail@plt+0x58f0>
   1834c:	ldr	r3, [r3, #156]	; 0x9c
   18350:	cmp	r3, #0
   18354:	beq	18300 <__assert_fail@plt+0x5850>
   18358:	ldr	r0, [r3, #160]	; 0xa0
   1835c:	ldr	r7, [r0, #24]
   18360:	cmp	r7, r4
   18364:	bne	18348 <__assert_fail@plt+0x5898>
   18368:	vldr	s0, [r5, #28]
   1836c:	vldr	s2, [r0, #28]
   18370:	vcmp.f32	s2, s0
   18374:	vmrs	APSR_nzcv, fpscr
   18378:	beq	183a0 <__assert_fail@plt+0x58f0>
   1837c:	ldr	r0, [r3, #12]
   18380:	vcmpe.f32	s2, s0
   18384:	cmp	r0, #2
   18388:	bne	18398 <__assert_fail@plt+0x58e8>
   1838c:	vmrs	APSR_nzcv, fpscr
   18390:	bpl	1834c <__assert_fail@plt+0x589c>
   18394:	b	183a0 <__assert_fail@plt+0x58f0>
   18398:	vmrs	APSR_nzcv, fpscr
   1839c:	bmi	1834c <__assert_fail@plt+0x589c>
   183a0:	ldr	r0, [r3, #156]	; 0x9c
   183a4:	cmp	r0, #0
   183a8:	str	r0, [r1, #156]	; 0x9c
   183ac:	str	r1, [r3, #156]	; 0x9c
   183b0:	moveq	r8, r1
   183b4:	cmp	r2, #0
   183b8:	mov	r1, r2
   183bc:	bne	1831c <__assert_fail@plt+0x586c>
   183c0:	mov	r5, lr
   183c4:	str	r2, [sl]
   183c8:	ldrb	r0, [r5, #44]	; 0x2c
   183cc:	tst	r0, #8
   183d0:	bne	18454 <__assert_fail@plt+0x59a4>
   183d4:	mov	r0, r6
   183d8:	bl	16060 <__assert_fail@plt+0x35b0>
   183dc:	ldr	r0, [r9]
   183e0:	str	r0, [r8, #156]	; 0x9c
   183e4:	mov	r0, #0
   183e8:	str	r6, [r9]
   183ec:	str	r0, [sl]
   183f0:	str	r0, [sl, #4]
   183f4:	sub	sp, fp, #28
   183f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183fc:	movw	r4, #17744	; 0x4550
   18400:	movw	r1, #58532	; 0xe4a4
   18404:	movw	r2, #58537	; 0xe4a9
   18408:	movt	r4, #6
   1840c:	movt	r1, #4
   18410:	movt	r2, #4
   18414:	ldr	r0, [r4]
   18418:	bl	127f8 <fprintf@plt>
   1841c:	ldr	r0, [r4]
   18420:	ldr	r1, [sl]
   18424:	mov	r2, #2
   18428:	bl	16c58 <__assert_fail@plt+0x41a8>
   1842c:	ldr	r0, [sl]
   18430:	bl	16060 <__assert_fail@plt+0x35b0>
   18434:	ldr	r1, [sl]
   18438:	cmp	r1, #0
   1843c:	bne	182e0 <__assert_fail@plt+0x5830>
   18440:	mov	r8, #0
   18444:	mov	r6, #0
   18448:	ldrb	r0, [r5, #44]	; 0x2c
   1844c:	tst	r0, #8
   18450:	beq	183d4 <__assert_fail@plt+0x5924>
   18454:	movw	r4, #17744	; 0x4550
   18458:	movw	r1, #58532	; 0xe4a4
   1845c:	movw	r2, #58564	; 0xe4c4
   18460:	movt	r4, #6
   18464:	movt	r1, #4
   18468:	movt	r2, #4
   1846c:	ldr	r0, [r4]
   18470:	bl	127f8 <fprintf@plt>
   18474:	ldr	r0, [r4]
   18478:	mov	r1, r6
   1847c:	mov	r2, #2
   18480:	bl	16c58 <__assert_fail@plt+0x41a8>
   18484:	b	183d4 <__assert_fail@plt+0x5924>
   18488:	push	{r4, r5, fp, lr}
   1848c:	add	fp, sp, #8
   18490:	cmp	r0, #0
   18494:	beq	184c8 <__assert_fail@plt+0x5a18>
   18498:	mov	r4, r0
   1849c:	mov	r5, #1
   184a0:	ldrb	r0, [r4, #16]
   184a4:	cmp	r0, #0
   184a8:	bne	184cc <__assert_fail@plt+0x5a1c>
   184ac:	ldr	r0, [r4, #156]	; 0x9c
   184b0:	bl	18488 <__assert_fail@plt+0x59d8>
   184b4:	cmp	r0, #0
   184b8:	bne	184cc <__assert_fail@plt+0x5a1c>
   184bc:	ldr	r4, [r4, #160]	; 0xa0
   184c0:	cmp	r4, #0
   184c4:	bne	184a0 <__assert_fail@plt+0x59f0>
   184c8:	mov	r5, #0
   184cc:	mov	r0, r5
   184d0:	pop	{r4, r5, fp, pc}
   184d4:	cmp	r0, #0
   184d8:	moveq	r0, #0
   184dc:	bxeq	lr
   184e0:	push	{r4, r5, fp, lr}
   184e4:	add	fp, sp, #8
   184e8:	mov	r4, r0
   184ec:	ldr	r0, [r0, #156]	; 0x9c
   184f0:	bl	184d4 <__assert_fail@plt+0x5a24>
   184f4:	mov	r5, r0
   184f8:	ldr	r0, [r4, #160]	; 0xa0
   184fc:	bl	184d4 <__assert_fail@plt+0x5a24>
   18500:	ldr	r1, [r4, #24]
   18504:	cmp	r5, r0
   18508:	movhi	r0, r5
   1850c:	cmp	r0, r1
   18510:	movcc	r0, r1
   18514:	pop	{r4, r5, fp, pc}
   18518:	push	{r4, r5, fp, lr}
   1851c:	add	fp, sp, #8
   18520:	mov	r4, r1
   18524:	mov	r1, r2
   18528:	mov	r5, r0
   1852c:	bl	17f9c <__assert_fail@plt+0x54ec>
   18530:	str	r4, [r0]
   18534:	mov	r2, #1
   18538:	ldr	r1, [r5, #4]
   1853c:	str	r2, [r0, #8]
   18540:	mov	r2, #0
   18544:	str	r2, [r0, #12]
   18548:	str	r2, [r0, #40]	; 0x28
   1854c:	str	r1, [r0, #4]
   18550:	pop	{r4, r5, fp, pc}
   18554:	push	{r4, r5, fp, lr}
   18558:	add	fp, sp, #8
   1855c:	ldr	r5, [r0, #12]
   18560:	cmp	r5, #0
   18564:	beq	18594 <__assert_fail@plt+0x5ae4>
   18568:	mov	r4, r0
   1856c:	bl	17f9c <__assert_fail@plt+0x54ec>
   18570:	str	r5, [r0]
   18574:	mov	r2, #1
   18578:	ldr	r1, [r4, #4]
   1857c:	str	r2, [r0, #8]
   18580:	mov	r2, #0
   18584:	str	r2, [r0, #12]
   18588:	str	r2, [r0, #40]	; 0x28
   1858c:	str	r1, [r0, #4]
   18590:	pop	{r4, r5, fp, pc}
   18594:	movw	r0, #59232	; 0xe760
   18598:	movw	r1, #59257	; 0xe779
   1859c:	movw	r3, #59264	; 0xe780
   185a0:	mov	r2, #123	; 0x7b
   185a4:	movt	r0, #4
   185a8:	movt	r1, #4
   185ac:	movt	r3, #4
   185b0:	bl	12ab0 <__assert_fail@plt>
   185b4:	push	{r4, r5, r6, sl, fp, lr}
   185b8:	add	fp, sp, #16
   185bc:	ldr	r5, [r0, #12]
   185c0:	cmp	r5, #0
   185c4:	beq	185f0 <__assert_fail@plt+0x5b40>
   185c8:	mov	r1, #0
   185cc:	mov	r4, r0
   185d0:	mov	r6, #0
   185d4:	bl	17f9c <__assert_fail@plt+0x54ec>
   185d8:	str	r5, [r0]
   185dc:	mov	r2, #1
   185e0:	ldr	r1, [r4, #4]
   185e4:	str	r6, [r0, #40]	; 0x28
   185e8:	stmib	r0, {r1, r2, r6}
   185ec:	pop	{r4, r5, r6, sl, fp, pc}
   185f0:	movw	r0, #59232	; 0xe760
   185f4:	movw	r1, #59257	; 0xe779
   185f8:	movw	r3, #59264	; 0xe780
   185fc:	mov	r2, #123	; 0x7b
   18600:	movt	r0, #4
   18604:	movt	r1, #4
   18608:	movt	r3, #4
   1860c:	bl	12ab0 <__assert_fail@plt>
   18610:	push	{fp, lr}
   18614:	mov	fp, sp
   18618:	cmp	r0, #0
   1861c:	bne	1878c <__assert_fail@plt+0x5cdc>
   18620:	movw	r5, #17756	; 0x455c
   18624:	movw	r1, #59379	; 0xe7f3
   18628:	mov	r0, #0
   1862c:	mov	r2, #5
   18630:	movt	r5, #6
   18634:	movt	r1, #4
   18638:	ldr	r4, [r5]
   1863c:	bl	12564 <dcgettext@plt>
   18640:	movw	r6, #19724	; 0x4d0c
   18644:	mov	r1, r0
   18648:	mov	r0, r4
   1864c:	movt	r6, #6
   18650:	ldr	r2, [r6]
   18654:	bl	127f8 <fprintf@plt>
   18658:	movw	r1, #59453	; 0xe83d
   1865c:	mov	r0, #0
   18660:	mov	r2, #5
   18664:	movt	r1, #4
   18668:	bl	12564 <dcgettext@plt>
   1866c:	ldr	r1, [r5]
   18670:	bl	12a44 <fputs@plt>
   18674:	movw	r1, #59591	; 0xe8c7
   18678:	mov	r0, #0
   1867c:	mov	r2, #5
   18680:	movt	r1, #4
   18684:	bl	12564 <dcgettext@plt>
   18688:	ldr	r1, [r5]
   1868c:	bl	12a44 <fputs@plt>
   18690:	movw	r1, #59799	; 0xe997
   18694:	mov	r0, #0
   18698:	mov	r2, #5
   1869c:	movt	r1, #4
   186a0:	bl	12564 <dcgettext@plt>
   186a4:	ldr	r1, [r5]
   186a8:	bl	12a44 <fputs@plt>
   186ac:	movw	r1, #59884	; 0xe9ec
   186b0:	mov	r0, #0
   186b4:	mov	r2, #5
   186b8:	movt	r1, #4
   186bc:	bl	12564 <dcgettext@plt>
   186c0:	ldr	r1, [r5]
   186c4:	bl	12a44 <fputs@plt>
   186c8:	movw	r1, #60089	; 0xeab9
   186cc:	mov	r0, #0
   186d0:	mov	r2, #5
   186d4:	movt	r1, #4
   186d8:	bl	12564 <dcgettext@plt>
   186dc:	ldr	r1, [r5]
   186e0:	bl	12a44 <fputs@plt>
   186e4:	movw	r1, #60630	; 0xecd6
   186e8:	mov	r0, #0
   186ec:	mov	r2, #5
   186f0:	movt	r1, #4
   186f4:	bl	12564 <dcgettext@plt>
   186f8:	ldr	r1, [r5]
   186fc:	bl	12a44 <fputs@plt>
   18700:	movw	r1, #60886	; 0xedd6
   18704:	mov	r0, #0
   18708:	mov	r2, #5
   1870c:	movt	r1, #4
   18710:	bl	12564 <dcgettext@plt>
   18714:	ldr	r1, [r5]
   18718:	bl	12a44 <fputs@plt>
   1871c:	movw	r1, #60910	; 0xedee
   18720:	mov	r0, #0
   18724:	mov	r2, #5
   18728:	movt	r1, #4
   1872c:	bl	12564 <dcgettext@plt>
   18730:	ldr	r1, [r5]
   18734:	bl	12a44 <fputs@plt>
   18738:	movw	r1, #60969	; 0xee29
   1873c:	mov	r0, #0
   18740:	mov	r2, #5
   18744:	movt	r1, #4
   18748:	bl	12564 <dcgettext@plt>
   1874c:	ldr	r1, [r5]
   18750:	bl	12a44 <fputs@plt>
   18754:	mov	r0, #0
   18758:	bl	187d0 <__assert_fail@plt+0x5d20>
   1875c:	movw	r1, #61038	; 0xee6e
   18760:	mov	r0, #0
   18764:	mov	r2, #5
   18768:	movt	r1, #4
   1876c:	bl	12564 <dcgettext@plt>
   18770:	ldr	r1, [r5]
   18774:	bl	12a44 <fputs@plt>
   18778:	ldr	r0, [r5]
   1877c:	ldr	r1, [r6]
   18780:	bl	235ac <__assert_fail@plt+0x10afc>
   18784:	mov	r0, #0
   18788:	bl	12780 <exit@plt>
   1878c:	mov	r4, r0
   18790:	movw	r0, #17744	; 0x4550
   18794:	movw	r1, #59340	; 0xe7cc
   18798:	mov	r2, #5
   1879c:	movt	r0, #6
   187a0:	movt	r1, #4
   187a4:	ldr	r5, [r0]
   187a8:	mov	r0, #0
   187ac:	bl	12564 <dcgettext@plt>
   187b0:	mov	r1, r0
   187b4:	movw	r0, #19724	; 0x4d0c
   187b8:	movt	r0, #6
   187bc:	ldr	r2, [r0]
   187c0:	mov	r0, r5
   187c4:	bl	127f8 <fprintf@plt>
   187c8:	mov	r0, r4
   187cc:	bl	12780 <exit@plt>
   187d0:	push	{r4, r5, r6, sl, fp, lr}
   187d4:	add	fp, sp, #16
   187d8:	movw	r1, #61687	; 0xf0f7
   187dc:	mov	r4, r0
   187e0:	mov	r0, #0
   187e4:	mov	r2, #5
   187e8:	movt	r1, #4
   187ec:	bl	12564 <dcgettext@plt>
   187f0:	movw	r6, #17756	; 0x455c
   187f4:	movt	r6, #6
   187f8:	ldr	r1, [r6]
   187fc:	bl	12a44 <fputs@plt>
   18800:	ldr	r0, [r6]
   18804:	cmp	r4, #0
   18808:	beq	18910 <__assert_fail@plt+0x5e60>
   1880c:	movw	r4, #61712	; 0xf110
   18810:	movw	r2, #603	; 0x25b
   18814:	movw	r3, #61725	; 0xf11d
   18818:	movt	r4, #4
   1881c:	movt	r2, #5
   18820:	movt	r3, #4
   18824:	mov	r1, r4
   18828:	bl	127f8 <fprintf@plt>
   1882c:	ldr	r0, [r6]
   18830:	movw	r2, #61797	; 0xf165
   18834:	movw	r3, #61801	; 0xf169
   18838:	mov	r1, r4
   1883c:	movt	r2, #4
   18840:	movt	r3, #4
   18844:	bl	127f8 <fprintf@plt>
   18848:	ldr	r0, [r6]
   1884c:	movw	r2, #61854	; 0xf19e
   18850:	movw	r3, #61860	; 0xf1a4
   18854:	mov	r1, r4
   18858:	movt	r2, #4
   1885c:	movt	r3, #4
   18860:	bl	127f8 <fprintf@plt>
   18864:	ldr	r0, [r6]
   18868:	movw	r2, #61904	; 0xf1d0
   1886c:	movw	r3, #61911	; 0xf1d7
   18870:	mov	r1, r4
   18874:	movt	r2, #4
   18878:	movt	r3, #4
   1887c:	bl	127f8 <fprintf@plt>
   18880:	ldr	r0, [r6]
   18884:	movw	r2, #65232	; 0xfed0
   18888:	movw	r3, #61949	; 0xf1fd
   1888c:	mov	r1, r4
   18890:	movt	r2, #4
   18894:	movt	r3, #4
   18898:	bl	127f8 <fprintf@plt>
   1889c:	ldr	r0, [r6]
   188a0:	movw	r2, #65148	; 0xfe7c
   188a4:	movw	r3, #61985	; 0xf221
   188a8:	mov	r1, r4
   188ac:	movt	r2, #4
   188b0:	movt	r3, #4
   188b4:	bl	127f8 <fprintf@plt>
   188b8:	ldr	r0, [r6]
   188bc:	movw	r2, #62086	; 0xf286
   188c0:	movw	r3, #62063	; 0xf26f
   188c4:	mov	r1, r4
   188c8:	movt	r2, #4
   188cc:	movt	r3, #4
   188d0:	bl	127f8 <fprintf@plt>
   188d4:	ldr	r0, [r6]
   188d8:	movw	r2, #63151	; 0xf6af
   188dc:	movw	r3, #62091	; 0xf28b
   188e0:	mov	r1, r4
   188e4:	movt	r2, #4
   188e8:	movt	r3, #4
   188ec:	bl	127f8 <fprintf@plt>
   188f0:	ldr	r0, [r6]
   188f4:	movw	r2, #75	; 0x4b
   188f8:	movw	r3, #62129	; 0xf2b1
   188fc:	mov	r1, r4
   18900:	movt	r2, #5
   18904:	movt	r3, #4
   18908:	pop	{r4, r5, r6, sl, fp, lr}
   1890c:	b	127f8 <fprintf@plt>
   18910:	movw	r4, #55331	; 0xd823
   18914:	movw	r2, #61103	; 0xeeaf
   18918:	movw	r3, #603	; 0x25b
   1891c:	movt	r4, #4
   18920:	movt	r2, #4
   18924:	movt	r3, #5
   18928:	mov	r1, r4
   1892c:	bl	127f8 <fprintf@plt>
   18930:	movw	r5, #61722	; 0xf11a
   18934:	ldr	r0, [r6]
   18938:	movw	r3, #61797	; 0xf165
   1893c:	mov	r1, r4
   18940:	movt	r5, #4
   18944:	movt	r3, #4
   18948:	mov	r2, r5
   1894c:	bl	127f8 <fprintf@plt>
   18950:	ldr	r0, [r6]
   18954:	movw	r3, #61854	; 0xf19e
   18958:	mov	r1, r4
   1895c:	mov	r2, r5
   18960:	movt	r3, #4
   18964:	bl	127f8 <fprintf@plt>
   18968:	ldr	r0, [r6]
   1896c:	movw	r3, #61904	; 0xf1d0
   18970:	mov	r1, r4
   18974:	mov	r2, r5
   18978:	movt	r3, #4
   1897c:	bl	127f8 <fprintf@plt>
   18980:	ldr	r0, [r6]
   18984:	movw	r3, #65232	; 0xfed0
   18988:	mov	r1, r4
   1898c:	mov	r2, r5
   18990:	movt	r3, #4
   18994:	bl	127f8 <fprintf@plt>
   18998:	ldr	r0, [r6]
   1899c:	movw	r3, #65148	; 0xfe7c
   189a0:	mov	r1, r4
   189a4:	mov	r2, r5
   189a8:	movt	r3, #4
   189ac:	bl	127f8 <fprintf@plt>
   189b0:	ldr	r0, [r6]
   189b4:	movw	r3, #62086	; 0xf286
   189b8:	mov	r1, r4
   189bc:	mov	r2, r5
   189c0:	movt	r3, #4
   189c4:	bl	127f8 <fprintf@plt>
   189c8:	ldr	r0, [r6]
   189cc:	movw	r3, #63151	; 0xf6af
   189d0:	mov	r1, r4
   189d4:	mov	r2, r5
   189d8:	movt	r3, #4
   189dc:	bl	127f8 <fprintf@plt>
   189e0:	ldr	r0, [r6]
   189e4:	movw	r3, #75	; 0x4b
   189e8:	mov	r1, r4
   189ec:	mov	r2, r5
   189f0:	movt	r3, #5
   189f4:	pop	{r4, r5, r6, sl, fp, lr}
   189f8:	b	127f8 <fprintf@plt>
   189fc:	bx	lr
   18a00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18a04:	add	fp, sp, #24
   18a08:	movw	r7, #20040	; 0x4e48
   18a0c:	mov	r5, r0
   18a10:	mov	r4, r2
   18a14:	movt	r7, #6
   18a18:	ldrb	r0, [r7, #4]
   18a1c:	cmp	r0, #0
   18a20:	beq	18a3c <__assert_fail@plt+0x5f8c>
   18a24:	movw	r0, #257	; 0x101
   18a28:	strh	r0, [r7, #4]
   18a2c:	ldr	r0, [r4, #16]
   18a30:	str	r0, [r7, #8]
   18a34:	mov	r0, #0
   18a38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18a3c:	movw	r8, #20084	; 0x4e74
   18a40:	mov	r6, r1
   18a44:	mov	r0, r1
   18a48:	mov	r1, r4
   18a4c:	movt	r8, #6
   18a50:	ldr	r2, [r8, #52]	; 0x34
   18a54:	blx	r2
   18a58:	cmp	r0, #0
   18a5c:	beq	18ad4 <__assert_fail@plt+0x6024>
   18a60:	ldrb	r0, [r8, #14]
   18a64:	cmp	r0, #0
   18a68:	beq	18a80 <__assert_fail@plt+0x5fd0>
   18a6c:	bl	12804 <__errno_location@plt>
   18a70:	ldr	r1, [r0]
   18a74:	mvn	r0, #0
   18a78:	cmp	r1, #2
   18a7c:	beq	18ad0 <__assert_fail@plt+0x6020>
   18a80:	ldrb	r0, [r7, #40]	; 0x28
   18a84:	cmp	r0, #0
   18a88:	bne	18ac4 <__assert_fail@plt+0x6014>
   18a8c:	bl	12804 <__errno_location@plt>
   18a90:	ldr	r1, [r8, #72]	; 0x48
   18a94:	ldr	r4, [r0]
   18a98:	mov	r0, #0
   18a9c:	mov	r2, r5
   18aa0:	bl	2efe4 <__assert_fail@plt+0x1c534>
   18aa4:	movw	r2, #12871	; 0x3247
   18aa8:	mov	r3, r0
   18aac:	mov	r0, #0
   18ab0:	mov	r1, r4
   18ab4:	movt	r2, #5
   18ab8:	bl	1269c <error@plt>
   18abc:	mov	r0, #1
   18ac0:	str	r0, [r7, #28]
   18ac4:	mov	r0, #1
   18ac8:	strb	r0, [r7, #40]	; 0x28
   18acc:	mvn	r0, #0
   18ad0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18ad4:	ldr	r0, [r4, #16]
   18ad8:	cmp	r0, #0
   18adc:	bne	18a24 <__assert_fail@plt+0x5f74>
   18ae0:	movw	r1, #54220	; 0xd3cc
   18ae4:	mov	r0, #0
   18ae8:	mov	r2, #5
   18aec:	movt	r1, #4
   18af0:	bl	12564 <dcgettext@plt>
   18af4:	ldr	r1, [r8, #72]	; 0x48
   18af8:	mov	r5, r0
   18afc:	mov	r0, #0
   18b00:	mov	r2, r6
   18b04:	bl	2efe4 <__assert_fail@plt+0x1c534>
   18b08:	mov	r3, r0
   18b0c:	mov	r0, #0
   18b10:	mov	r1, #0
   18b14:	mov	r2, r5
   18b18:	bl	1269c <error@plt>
   18b1c:	mov	r0, #1
   18b20:	str	r0, [r7, #28]
   18b24:	b	18a24 <__assert_fail@plt+0x5f74>
   18b28:	push	{r4, r5, fp, lr}
   18b2c:	add	fp, sp, #8
   18b30:	movw	r5, #20040	; 0x4e48
   18b34:	mov	r4, r0
   18b38:	movt	r5, #6
   18b3c:	ldrb	r0, [r5, #40]	; 0x28
   18b40:	cmp	r0, #0
   18b44:	beq	18b54 <__assert_fail@plt+0x60a4>
   18b48:	mov	r0, #1
   18b4c:	strb	r0, [r5, #40]	; 0x28
   18b50:	pop	{r4, r5, fp, pc}
   18b54:	movw	r0, #20084	; 0x4e74
   18b58:	mov	r2, r1
   18b5c:	movt	r0, #6
   18b60:	ldr	r1, [r0, #72]	; 0x48
   18b64:	mov	r0, #0
   18b68:	bl	2efe4 <__assert_fail@plt+0x1c534>
   18b6c:	movw	r2, #12871	; 0x3247
   18b70:	mov	r3, r0
   18b74:	mov	r0, #0
   18b78:	mov	r1, r4
   18b7c:	movt	r2, #5
   18b80:	bl	1269c <error@plt>
   18b84:	mov	r0, #1
   18b88:	str	r0, [r5, #28]
   18b8c:	mov	r0, #1
   18b90:	strb	r0, [r5, #40]	; 0x28
   18b94:	pop	{r4, r5, fp, pc}
   18b98:	push	{r4, r5, r6, r7, fp, lr}
   18b9c:	add	fp, sp, #16
   18ba0:	vpush	{d8}
   18ba4:	sub	sp, sp, #392	; 0x188
   18ba8:	mov	r5, sp
   18bac:	mov	r0, r5
   18bb0:	bl	1254c <uname@plt>
   18bb4:	cmp	r0, #0
   18bb8:	beq	18bd0 <__assert_fail@plt+0x6120>
   18bbc:	mov	r4, #1
   18bc0:	mov	r0, r4
   18bc4:	sub	sp, fp, #24
   18bc8:	vpop	{d8}
   18bcc:	pop	{r4, r5, r6, r7, fp, pc}
   18bd0:	add	r0, r5, #130	; 0x82
   18bd4:	mov	r1, #0
   18bd8:	mov	r4, #0
   18bdc:	bl	12870 <strtod@plt>
   18be0:	movw	r0, #61104	; 0xeeb0
   18be4:	mov	r1, r5
   18be8:	mov	r2, #6
   18bec:	vmov.f64	d8, d0
   18bf0:	movt	r0, #4
   18bf4:	bl	127a4 <bcmp@plt>
   18bf8:	vcvt.f32.f64	s16, d8
   18bfc:	cmp	r0, #0
   18c00:	beq	18c40 <__assert_fail@plt+0x6190>
   18c04:	movw	r0, #61110	; 0xeeb6
   18c08:	mov	r1, sp
   18c0c:	mov	r2, #8
   18c10:	movt	r0, #4
   18c14:	bl	127a4 <bcmp@plt>
   18c18:	vldr	s0, [pc, #64]	; 18c60 <__assert_fail@plt+0x61b0>
   18c1c:	vcmpe.f32	s16, s0
   18c20:	vmrs	APSR_nzcv, fpscr
   18c24:	movwge	r4, #1
   18c28:	cmp	r0, #0
   18c2c:	movne	r4, #1
   18c30:	mov	r0, r4
   18c34:	sub	sp, fp, #24
   18c38:	vpop	{d8}
   18c3c:	pop	{r4, r5, r6, r7, fp, pc}
   18c40:	vldr	s0, [pc, #28]	; 18c64 <__assert_fail@plt+0x61b4>
   18c44:	vcmpe.f32	s16, s0
   18c48:	vmrs	APSR_nzcv, fpscr
   18c4c:	movwge	r4, #1
   18c50:	mov	r0, r4
   18c54:	sub	sp, fp, #24
   18c58:	vpop	{d8}
   18c5c:	pop	{r4, r5, r6, r7, fp, pc}
   18c60:	submi	r6, r6, r6, ror #12
   18c64:	andmi	ip, ip, sp, asr #25
   18c68:	push	{r4, sl, fp, lr}
   18c6c:	add	fp, sp, #8
   18c70:	movw	r4, #20040	; 0x4e48
   18c74:	movt	r4, #6
   18c78:	ldrb	r0, [r4, #32]
   18c7c:	cmp	r0, #0
   18c80:	popeq	{r4, sl, fp, pc}
   18c84:	bl	16050 <__assert_fail@plt+0x35a0>
   18c88:	bl	18c98 <__assert_fail@plt+0x61e8>
   18c8c:	mov	r0, #0
   18c90:	strb	r0, [r4, #32]
   18c94:	pop	{r4, sl, fp, pc}
   18c98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c9c:	add	fp, sp, #28
   18ca0:	sub	sp, sp, #4
   18ca4:	cmp	r0, #0
   18ca8:	beq	18d68 <__assert_fail@plt+0x62b8>
   18cac:	movw	r6, #20040	; 0x4e48
   18cb0:	movw	r7, #16928	; 0x4220
   18cb4:	movw	r8, #40888	; 0x9fb8
   18cb8:	movw	sl, #17776	; 0x4570
   18cbc:	movw	r5, #18936	; 0x49f8
   18cc0:	mov	r4, r0
   18cc4:	mov	r9, #0
   18cc8:	movt	r6, #6
   18ccc:	movt	r7, #1
   18cd0:	movt	r8, #1
   18cd4:	movt	sl, #6
   18cd8:	movt	r5, #1
   18cdc:	ldrb	r0, [r6, #32]
   18ce0:	cmp	r0, #0
   18ce4:	bne	18d04 <__assert_fail@plt+0x6254>
   18ce8:	b	18d70 <__assert_fail@plt+0x62c0>
   18cec:	ldr	r4, [r4, #160]	; 0xa0
   18cf0:	cmp	r4, #0
   18cf4:	beq	18d68 <__assert_fail@plt+0x62b8>
   18cf8:	ldrb	r0, [r6, #32]
   18cfc:	cmp	r0, #0
   18d00:	beq	18d70 <__assert_fail@plt+0x62c0>
   18d04:	ldr	r0, [r4, #156]	; 0x9c
   18d08:	bl	18c98 <__assert_fail@plt+0x61e8>
   18d0c:	ldr	r0, [r4]
   18d10:	cmp	r0, r7
   18d14:	cmpne	r0, r5
   18d18:	bne	18cec <__assert_fail@plt+0x623c>
   18d1c:	mov	r2, r4
   18d20:	ldrb	r0, [r2, #40]!	; 0x28
   18d24:	cmp	r0, #0
   18d28:	beq	18cec <__assert_fail@plt+0x623c>
   18d2c:	ldr	r0, [r4, #116]	; 0x74
   18d30:	cmp	r0, #0
   18d34:	beq	18cec <__assert_fail@plt+0x623c>
   18d38:	ldr	r0, [r4, #144]	; 0x90
   18d3c:	mov	r1, r8
   18d40:	bl	21594 <__assert_fail@plt+0xeae4>
   18d44:	ldr	r0, [r4, #144]	; 0x90
   18d48:	ldr	r1, [sl]
   18d4c:	cmp	r0, r1
   18d50:	beq	18cec <__assert_fail@plt+0x623c>
   18d54:	bl	2f644 <__assert_fail@plt+0x1cb94>
   18d58:	ldr	r0, [r4, #144]	; 0x90
   18d5c:	bl	32910 <__assert_fail@plt+0x1fe60>
   18d60:	str	r9, [r4, #144]	; 0x90
   18d64:	b	18cec <__assert_fail@plt+0x623c>
   18d68:	sub	sp, fp, #28
   18d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d70:	movw	r0, #62160	; 0xf2d0
   18d74:	movw	r1, #59257	; 0xe779
   18d78:	movw	r3, #62187	; 0xf2eb
   18d7c:	mov	r2, #396	; 0x18c
   18d80:	movt	r0, #4
   18d84:	movt	r1, #4
   18d88:	movt	r3, #4
   18d8c:	bl	12ab0 <__assert_fail@plt>
   18d90:	push	{r4, r5, fp, lr}
   18d94:	add	fp, sp, #8
   18d98:	cmp	r0, #0
   18d9c:	popeq	{r4, r5, fp, pc}
   18da0:	movw	r5, #16924	; 0x421c
   18da4:	mov	r4, r0
   18da8:	movt	r5, #1
   18dac:	b	18dbc <__assert_fail@plt+0x630c>
   18db0:	ldr	r4, [r4, #160]	; 0xa0
   18db4:	cmp	r4, #0
   18db8:	beq	18dfc <__assert_fail@plt+0x634c>
   18dbc:	ldr	r0, [r4, #156]	; 0x9c
   18dc0:	bl	18d90 <__assert_fail@plt+0x62e0>
   18dc4:	ldr	r0, [r4]
   18dc8:	cmp	r0, r5
   18dcc:	bne	18db0 <__assert_fail@plt+0x6300>
   18dd0:	mov	r0, r4
   18dd4:	ldrb	r1, [r0, #40]!	; 0x28
   18dd8:	cmp	r1, #0
   18ddc:	beq	18db0 <__assert_fail@plt+0x6300>
   18de0:	ldr	r1, [r4, #116]	; 0x74
   18de4:	cmp	r1, #0
   18de8:	beq	18db0 <__assert_fail@plt+0x6300>
   18dec:	add	r0, r0, #4
   18df0:	add	r1, r4, #88	; 0x58
   18df4:	bl	20c48 <__assert_fail@plt+0xe198>
   18df8:	b	18db0 <__assert_fail@plt+0x6300>
   18dfc:	pop	{r4, r5, fp, pc}
   18e00:	push	{r4, r5, fp, lr}
   18e04:	add	fp, sp, #8
   18e08:	sub	sp, sp, #8
   18e0c:	mov	r0, #8
   18e10:	bl	306e8 <__assert_fail@plt+0x1dc38>
   18e14:	movw	r5, #17776	; 0x4570
   18e18:	movt	r5, #6
   18e1c:	str	r0, [r5]
   18e20:	bl	2f5cc <__assert_fail@plt+0x1cb1c>
   18e24:	cmp	r0, #0
   18e28:	subeq	sp, fp, #8
   18e2c:	popeq	{r4, r5, fp, pc}
   18e30:	bl	12804 <__errno_location@plt>
   18e34:	movw	r1, #61118	; 0xeebe
   18e38:	ldr	r4, [r0]
   18e3c:	mov	r0, #0
   18e40:	mov	r2, #5
   18e44:	movt	r1, #4
   18e48:	bl	12564 <dcgettext@plt>
   18e4c:	mov	r2, r0
   18e50:	ldr	r0, [r5]
   18e54:	ldr	r1, [r0]
   18e58:	cmn	r1, #1
   18e5c:	bgt	18e90 <__assert_fail@plt+0x63e0>
   18e60:	ldr	r0, [r0, #4]
   18e64:	movw	r1, #61103	; 0xeeaf
   18e68:	movw	r3, #3076	; 0xc04
   18e6c:	movt	r1, #4
   18e70:	movt	r3, #5
   18e74:	cmp	r0, #0
   18e78:	moveq	r3, r1
   18e7c:	moveq	r0, r1
   18e80:	str	r0, [sp]
   18e84:	mov	r0, #1
   18e88:	mov	r1, r4
   18e8c:	bl	1269c <error@plt>
   18e90:	movw	r3, #61103	; 0xeeaf
   18e94:	movt	r3, #4
   18e98:	mov	r0, r3
   18e9c:	str	r0, [sp]
   18ea0:	mov	r0, #1
   18ea4:	mov	r1, r4
   18ea8:	bl	1269c <error@plt>
   18eac:	push	{r4, r5, fp, lr}
   18eb0:	add	fp, sp, #8
   18eb4:	sub	sp, sp, #8
   18eb8:	bl	16050 <__assert_fail@plt+0x35a0>
   18ebc:	cmp	r0, #0
   18ec0:	beq	18f14 <__assert_fail@plt+0x6464>
   18ec4:	movw	r1, #36240	; 0x8d90
   18ec8:	mov	r4, r0
   18ecc:	movt	r1, #1
   18ed0:	bl	19054 <__assert_fail@plt+0x65a4>
   18ed4:	movw	r5, #20040	; 0x4e48
   18ed8:	movt	r5, #6
   18edc:	ldrb	r0, [r5, #32]
   18ee0:	cmp	r0, #0
   18ee4:	beq	18ef8 <__assert_fail@plt+0x6448>
   18ee8:	bl	16050 <__assert_fail@plt+0x35a0>
   18eec:	bl	18c98 <__assert_fail@plt+0x61e8>
   18ef0:	mov	r0, #0
   18ef4:	strb	r0, [r5, #32]
   18ef8:	ldr	r0, [r5, #36]	; 0x24
   18efc:	bl	1a140 <__assert_fail@plt+0x7690>
   18f00:	movw	r1, #37004	; 0x908c
   18f04:	mov	r0, r4
   18f08:	movt	r1, #1
   18f0c:	bl	19054 <__assert_fail@plt+0x65a4>
   18f10:	b	18f24 <__assert_fail@plt+0x6474>
   18f14:	movw	r0, #20040	; 0x4e48
   18f18:	movt	r0, #6
   18f1c:	ldr	r0, [r0, #36]	; 0x24
   18f20:	bl	1a140 <__assert_fail@plt+0x7690>
   18f24:	movw	r5, #17776	; 0x4570
   18f28:	movt	r5, #6
   18f2c:	ldr	r0, [r5]
   18f30:	bl	2f628 <__assert_fail@plt+0x1cb78>
   18f34:	cmp	r0, #0
   18f38:	bne	18fdc <__assert_fail@plt+0x652c>
   18f3c:	ldr	r0, [r5]
   18f40:	bl	2f644 <__assert_fail@plt+0x1cb94>
   18f44:	ldr	r0, [r5]
   18f48:	bl	32910 <__assert_fail@plt+0x1fe60>
   18f4c:	mov	r0, #0
   18f50:	str	r0, [r5]
   18f54:	bl	21c00 <__assert_fail@plt+0xf150>
   18f58:	cmp	r0, #0
   18f5c:	beq	18f68 <__assert_fail@plt+0x64b8>
   18f60:	bl	21c20 <__assert_fail@plt+0xf170>
   18f64:	bl	21bd8 <__assert_fail@plt+0xf128>
   18f68:	movw	r0, #17756	; 0x455c
   18f6c:	movt	r0, #6
   18f70:	ldr	r0, [r0]
   18f74:	bl	328b4 <__assert_fail@plt+0x1fe04>
   18f78:	cmn	r0, #1
   18f7c:	beq	18f88 <__assert_fail@plt+0x64d8>
   18f80:	sub	sp, fp, #8
   18f84:	pop	{r4, r5, fp, pc}
   18f88:	bl	12804 <__errno_location@plt>
   18f8c:	ldr	r4, [r0]
   18f90:	movw	r0, #20084	; 0x4e74
   18f94:	movw	r2, #61163	; 0xeeeb
   18f98:	movt	r0, #6
   18f9c:	movt	r2, #4
   18fa0:	ldr	r1, [r0, #72]	; 0x48
   18fa4:	mov	r0, #0
   18fa8:	bl	2efe4 <__assert_fail@plt+0x1c534>
   18fac:	movw	r2, #12871	; 0x3247
   18fb0:	mov	r3, r0
   18fb4:	mov	r0, #0
   18fb8:	mov	r1, r4
   18fbc:	movt	r2, #5
   18fc0:	bl	1269c <error@plt>
   18fc4:	movw	r0, #20040	; 0x4e48
   18fc8:	mov	r1, #1
   18fcc:	movt	r0, #6
   18fd0:	str	r1, [r0, #28]
   18fd4:	sub	sp, fp, #8
   18fd8:	pop	{r4, r5, fp, pc}
   18fdc:	bl	12804 <__errno_location@plt>
   18fe0:	movw	r1, #62241	; 0xf321
   18fe4:	ldr	r4, [r0]
   18fe8:	mov	r0, #0
   18fec:	mov	r2, #5
   18ff0:	movt	r1, #4
   18ff4:	bl	12564 <dcgettext@plt>
   18ff8:	mov	r2, r0
   18ffc:	ldr	r0, [r5]
   19000:	ldr	r1, [r0]
   19004:	cmn	r1, #1
   19008:	bgt	19030 <__assert_fail@plt+0x6580>
   1900c:	ldr	r0, [r0, #4]
   19010:	movw	r1, #61103	; 0xeeaf
   19014:	movw	r3, #3076	; 0xc04
   19018:	movt	r1, #4
   1901c:	movt	r3, #5
   19020:	cmp	r0, #0
   19024:	moveq	r3, r1
   19028:	moveq	r0, r1
   1902c:	b	1903c <__assert_fail@plt+0x658c>
   19030:	movw	r3, #61103	; 0xeeaf
   19034:	movt	r3, #4
   19038:	mov	r0, r3
   1903c:	str	r0, [sp]
   19040:	mov	r0, #0
   19044:	mov	r1, r4
   19048:	bl	1269c <error@plt>
   1904c:	mov	r0, #1
   19050:	bl	124d4 <_exit@plt>
   19054:	push	{r4, r5, fp, lr}
   19058:	add	fp, sp, #8
   1905c:	mov	r4, r1
   19060:	mov	r5, r0
   19064:	ldr	r0, [r5, #156]	; 0x9c
   19068:	cmp	r0, #0
   1906c:	movne	r1, r4
   19070:	blne	19054 <__assert_fail@plt+0x65a4>
   19074:	mov	r0, r5
   19078:	blx	r4
   1907c:	ldr	r5, [r5, #160]	; 0xa0
   19080:	cmp	r5, #0
   19084:	bne	19064 <__assert_fail@plt+0x65b4>
   19088:	pop	{r4, r5, fp, pc}
   1908c:	ldr	r1, [r0]
   19090:	movw	r2, #17104	; 0x42d0
   19094:	movt	r2, #1
   19098:	cmp	r1, r2
   1909c:	beq	190bc <__assert_fail@plt+0x660c>
   190a0:	movw	r2, #16952	; 0x4238
   190a4:	movt	r2, #1
   190a8:	cmp	r1, r2
   190ac:	movwne	r2, #17044	; 0x4294
   190b0:	movtne	r2, #1
   190b4:	cmpne	r1, r2
   190b8:	bne	190c8 <__assert_fail@plt+0x6618>
   190bc:	mov	r1, #0
   190c0:	str	r1, [r0, #44]	; 0x2c
   190c4:	bx	lr
   190c8:	movw	r2, #44240	; 0xacd0
   190cc:	movt	r2, #1
   190d0:	cmp	r1, r2
   190d4:	bxne	lr
   190d8:	mov	r1, #0
   190dc:	str	r1, [r0, #44]	; 0x2c
   190e0:	bx	lr
   190e4:	push	{r4, sl, fp, lr}
   190e8:	add	fp, sp, #8
   190ec:	mov	r4, r0
   190f0:	movw	r0, #20084	; 0x4e74
   190f4:	mov	r2, r1
   190f8:	movt	r0, #6
   190fc:	ldr	r1, [r0, #72]	; 0x48
   19100:	mov	r0, #0
   19104:	bl	2efe4 <__assert_fail@plt+0x1c534>
   19108:	movw	r2, #12871	; 0x3247
   1910c:	mov	r3, r0
   19110:	mov	r0, #0
   19114:	mov	r1, r4
   19118:	movt	r2, #5
   1911c:	bl	1269c <error@plt>
   19120:	movw	r0, #20040	; 0x4e48
   19124:	mov	r1, #1
   19128:	movt	r0, #6
   1912c:	str	r1, [r0, #28]
   19130:	pop	{r4, sl, fp, pc}
   19134:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19138:	add	fp, sp, #24
   1913c:	sub	sp, sp, #8
   19140:	movw	r8, #20040	; 0x4e48
   19144:	mov	r4, r1
   19148:	mov	r5, r0
   1914c:	movt	r8, #6
   19150:	ldr	r1, [r8, #16]
   19154:	cmn	r1, #100	; 0x64
   19158:	beq	19164 <__assert_fail@plt+0x66b4>
   1915c:	cmn	r1, #1
   19160:	ble	19218 <__assert_fail@plt+0x6768>
   19164:	ldr	r0, [r8]
   19168:	cmp	r0, #0
   1916c:	beq	19190 <__assert_fail@plt+0x66e0>
   19170:	mov	r0, #256	; 0x100
   19174:	mov	r2, r5
   19178:	mov	r3, r4
   1917c:	str	r0, [sp]
   19180:	mov	r0, #3
   19184:	bl	125dc <__fxstatat64@plt>
   19188:	sub	sp, fp, #24
   1918c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19190:	mov	r6, #0
   19194:	mov	r0, #3
   19198:	mov	r2, r5
   1919c:	mov	r3, r4
   191a0:	str	r6, [sp]
   191a4:	bl	125dc <__fxstatat64@plt>
   191a8:	cmp	r0, #0
   191ac:	beq	191ec <__assert_fail@plt+0x673c>
   191b0:	mov	r7, r0
   191b4:	bl	12804 <__errno_location@plt>
   191b8:	ldr	r0, [r0]
   191bc:	cmp	r0, #20
   191c0:	beq	191d0 <__assert_fail@plt+0x6720>
   191c4:	cmp	r0, #2
   191c8:	mov	r6, r7
   191cc:	bne	191ec <__assert_fail@plt+0x673c>
   191d0:	movw	r0, #20084	; 0x4e74
   191d4:	movt	r0, #6
   191d8:	ldrb	r0, [r0, #44]	; 0x2c
   191dc:	tst	r0, #2
   191e0:	bne	191f8 <__assert_fail@plt+0x6748>
   191e4:	ldr	r1, [r8, #16]
   191e8:	b	19170 <__assert_fail@plt+0x66c0>
   191ec:	mov	r0, r6
   191f0:	sub	sp, fp, #24
   191f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   191f8:	movw	r0, #17744	; 0x4550
   191fc:	movw	r1, #62289	; 0xf351
   19200:	mov	r2, r5
   19204:	movt	r0, #6
   19208:	movt	r1, #4
   1920c:	ldr	r0, [r0]
   19210:	bl	127f8 <fprintf@plt>
   19214:	b	191e4 <__assert_fail@plt+0x6734>
   19218:	movw	r0, #61179	; 0xeefb
   1921c:	movw	r1, #59257	; 0xe779
   19220:	movw	r3, #61201	; 0xef11
   19224:	movw	r2, #605	; 0x25d
   19228:	movt	r0, #4
   1922c:	movt	r1, #4
   19230:	movt	r3, #4
   19234:	bl	12ab0 <__assert_fail@plt>
   19238:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1923c:	add	fp, sp, #24
   19240:	sub	sp, sp, #8
   19244:	movw	r8, #20040	; 0x4e48
   19248:	mov	r4, r1
   1924c:	mov	r5, r0
   19250:	movt	r8, #6
   19254:	ldr	r1, [r8, #16]
   19258:	cmn	r1, #100	; 0x64
   1925c:	beq	19268 <__assert_fail@plt+0x67b8>
   19260:	cmn	r1, #1
   19264:	ble	1930c <__assert_fail@plt+0x685c>
   19268:	mov	r6, #0
   1926c:	mov	r0, #3
   19270:	mov	r2, r5
   19274:	mov	r3, r4
   19278:	str	r6, [sp]
   1927c:	bl	125dc <__fxstatat64@plt>
   19280:	cmp	r0, #0
   19284:	beq	192e0 <__assert_fail@plt+0x6830>
   19288:	mov	r7, r0
   1928c:	bl	12804 <__errno_location@plt>
   19290:	ldr	r0, [r0]
   19294:	cmp	r0, #20
   19298:	beq	192a8 <__assert_fail@plt+0x67f8>
   1929c:	cmp	r0, #2
   192a0:	mov	r6, r7
   192a4:	bne	192e0 <__assert_fail@plt+0x6830>
   192a8:	movw	r0, #20084	; 0x4e74
   192ac:	movt	r0, #6
   192b0:	ldrb	r0, [r0, #44]	; 0x2c
   192b4:	tst	r0, #2
   192b8:	bne	192ec <__assert_fail@plt+0x683c>
   192bc:	ldr	r1, [r8, #16]
   192c0:	mov	r0, #256	; 0x100
   192c4:	mov	r2, r5
   192c8:	mov	r3, r4
   192cc:	str	r0, [sp]
   192d0:	mov	r0, #3
   192d4:	bl	125dc <__fxstatat64@plt>
   192d8:	sub	sp, fp, #24
   192dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   192e0:	mov	r0, r6
   192e4:	sub	sp, fp, #24
   192e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   192ec:	movw	r0, #17744	; 0x4550
   192f0:	movw	r1, #62289	; 0xf351
   192f4:	mov	r2, r5
   192f8:	movt	r0, #6
   192fc:	movt	r1, #4
   19300:	ldr	r0, [r0]
   19304:	bl	127f8 <fprintf@plt>
   19308:	b	192bc <__assert_fail@plt+0x680c>
   1930c:	movw	r0, #61179	; 0xeefb
   19310:	movw	r1, #59257	; 0xe779
   19314:	movw	r3, #61247	; 0xef3f
   19318:	mov	r2, #636	; 0x27c
   1931c:	movt	r0, #4
   19320:	movt	r1, #4
   19324:	movt	r3, #4
   19328:	bl	12ab0 <__assert_fail@plt>
   1932c:	push	{fp, lr}
   19330:	mov	fp, sp
   19334:	sub	sp, sp, #8
   19338:	mov	r2, r0
   1933c:	movw	r0, #20040	; 0x4e48
   19340:	mov	r3, r1
   19344:	movt	r0, #6
   19348:	ldr	r1, [r0, #16]
   1934c:	cmn	r1, #1
   19350:	bgt	1935c <__assert_fail@plt+0x68ac>
   19354:	cmn	r1, #100	; 0x64
   19358:	bne	19374 <__assert_fail@plt+0x68c4>
   1935c:	mov	r0, #256	; 0x100
   19360:	str	r0, [sp]
   19364:	mov	r0, #3
   19368:	bl	125dc <__fxstatat64@plt>
   1936c:	mov	sp, fp
   19370:	pop	{fp, pc}
   19374:	movw	r0, #61293	; 0xef6d
   19378:	movw	r1, #59257	; 0xe779
   1937c:	movw	r3, #61349	; 0xefa5
   19380:	movw	r2, #653	; 0x28d
   19384:	movt	r0, #4
   19388:	movt	r1, #4
   1938c:	movt	r3, #4
   19390:	bl	12ab0 <__assert_fail@plt>
   19394:	push	{r4, r5, fp, lr}
   19398:	add	fp, sp, #8
   1939c:	sub	sp, sp, #8
   193a0:	mov	r5, r0
   193a4:	movw	r0, #17816	; 0x4598
   193a8:	mov	r4, r1
   193ac:	movw	r1, #61395	; 0xefd3
   193b0:	movt	r0, #6
   193b4:	movt	r1, #4
   193b8:	ldrd	r2, [r0]
   193bc:	adds	r2, r2, #1
   193c0:	adc	r3, r3, #0
   193c4:	strd	r2, [r0]
   193c8:	movw	r0, #17744	; 0x4550
   193cc:	mov	r2, r5
   193d0:	movt	r0, #6
   193d4:	ldr	r0, [r0]
   193d8:	bl	127f8 <fprintf@plt>
   193dc:	movw	r0, #20084	; 0x4e74
   193e0:	movt	r0, #6
   193e4:	ldr	r0, [r0, #48]	; 0x30
   193e8:	cmp	r0, #0
   193ec:	beq	19428 <__assert_fail@plt+0x6978>
   193f0:	cmp	r0, #2
   193f4:	beq	19414 <__assert_fail@plt+0x6964>
   193f8:	cmp	r0, #1
   193fc:	bne	19464 <__assert_fail@plt+0x69b4>
   19400:	mov	r0, r5
   19404:	mov	r1, r4
   19408:	sub	sp, fp, #8
   1940c:	pop	{r4, r5, fp, lr}
   19410:	b	19238 <__assert_fail@plt+0x6788>
   19414:	mov	r0, r5
   19418:	mov	r1, r4
   1941c:	sub	sp, fp, #8
   19420:	pop	{r4, r5, fp, lr}
   19424:	b	19134 <__assert_fail@plt+0x6684>
   19428:	movw	r0, #20040	; 0x4e48
   1942c:	movt	r0, #6
   19430:	ldr	r1, [r0, #16]
   19434:	cmn	r1, #1
   19438:	bgt	19444 <__assert_fail@plt+0x6994>
   1943c:	cmn	r1, #100	; 0x64
   19440:	bne	19484 <__assert_fail@plt+0x69d4>
   19444:	mov	r0, #256	; 0x100
   19448:	mov	r2, r5
   1944c:	mov	r3, r4
   19450:	str	r0, [sp]
   19454:	mov	r0, #3
   19458:	bl	125dc <__fxstatat64@plt>
   1945c:	sub	sp, fp, #8
   19460:	pop	{r4, r5, fp, pc}
   19464:	movw	r0, #58329	; 0xe3d9
   19468:	movw	r1, #59257	; 0xe779
   1946c:	movw	r3, #61412	; 0xefe4
   19470:	movw	r2, #677	; 0x2a5
   19474:	movt	r0, #4
   19478:	movt	r1, #4
   1947c:	movt	r3, #4
   19480:	bl	12ab0 <__assert_fail@plt>
   19484:	movw	r0, #61293	; 0xef6d
   19488:	movw	r1, #59257	; 0xe779
   1948c:	movw	r3, #61349	; 0xefa5
   19490:	movw	r2, #653	; 0x28d
   19494:	movt	r0, #4
   19498:	movt	r1, #4
   1949c:	movt	r3, #4
   194a0:	bl	12ab0 <__assert_fail@plt>
   194a4:	movw	r0, #20084	; 0x4e74
   194a8:	movt	r0, #6
   194ac:	ldr	r0, [r0, #48]	; 0x30
   194b0:	cmp	r0, #1
   194b4:	moveq	r0, #1
   194b8:	bxeq	lr
   194bc:	cmp	r0, #2
   194c0:	movne	r0, #0
   194c4:	bxne	lr
   194c8:	movw	r0, #20040	; 0x4e48
   194cc:	movt	r0, #6
   194d0:	ldr	r0, [r0]
   194d4:	clz	r0, r0
   194d8:	lsr	r0, r0, #5
   194dc:	bx	lr
   194e0:	push	{r4, r5, fp, lr}
   194e4:	add	fp, sp, #8
   194e8:	mov	r4, r3
   194ec:	ldr	r3, [r0]
   194f0:	mov	r5, r0
   194f4:	cmp	r3, #0
   194f8:	beq	19554 <__assert_fail@plt+0x6aa4>
   194fc:	and	r0, r3, #61440	; 0xf000
   19500:	cmp	r0, #40960	; 0xa000
   19504:	bne	19538 <__assert_fail@plt+0x6a88>
   19508:	movw	r0, #20084	; 0x4e74
   1950c:	movt	r0, #6
   19510:	ldr	r0, [r0, #48]	; 0x30
   19514:	cmp	r0, #1
   19518:	beq	195bc <__assert_fail@plt+0x6b0c>
   1951c:	cmp	r0, #2
   19520:	bne	19538 <__assert_fail@plt+0x6a88>
   19524:	movw	r0, #20040	; 0x4e48
   19528:	movt	r0, #6
   1952c:	ldr	r0, [r0]
   19530:	cmp	r0, #0
   19534:	beq	195bc <__assert_fail@plt+0x6b0c>
   19538:	movw	r1, #20040	; 0x4e48
   1953c:	mov	r0, #1
   19540:	movt	r1, #6
   19544:	str	r3, [r1, #8]
   19548:	strb	r0, [r1, #5]
   1954c:	str	r3, [r4, #16]
   19550:	pop	{r4, r5, fp, pc}
   19554:	ldr	r0, [fp, #8]
   19558:	cmp	r0, #0
   1955c:	beq	1957c <__assert_fail@plt+0x6acc>
   19560:	movw	r0, #20040	; 0x4e48
   19564:	mov	r1, #0
   19568:	movt	r0, #6
   1956c:	str	r1, [r0, #8]
   19570:	strh	r1, [r0, #4]
   19574:	mov	r0, #1
   19578:	pop	{r4, r5, fp, pc}
   1957c:	mov	r0, r1
   19580:	mov	r1, r2
   19584:	mov	r2, r4
   19588:	bl	18a00 <__assert_fail@plt+0x5f50>
   1958c:	mov	r1, r0
   19590:	mov	r0, #0
   19594:	cmp	r1, #0
   19598:	popne	{r4, r5, fp, pc}
   1959c:	ldr	r1, [r4, #16]
   195a0:	movw	r2, #20040	; 0x4e48
   195a4:	mov	r0, #1
   195a8:	movt	r2, #6
   195ac:	str	r1, [r5]
   195b0:	strb	r0, [r2, #5]
   195b4:	str	r1, [r2, #8]
   195b8:	pop	{r4, r5, fp, pc}
   195bc:	mov	r0, r1
   195c0:	mov	r1, r2
   195c4:	mov	r2, r4
   195c8:	bl	18a00 <__assert_fail@plt+0x5f50>
   195cc:	mov	r1, r0
   195d0:	mov	r0, #0
   195d4:	cmp	r1, #0
   195d8:	beq	195e0 <__assert_fail@plt+0x6b30>
   195dc:	pop	{r4, r5, fp, pc}
   195e0:	ldr	r0, [r4, #16]
   195e4:	movw	r1, #20040	; 0x4e48
   195e8:	movt	r1, #6
   195ec:	str	r0, [r1, #8]
   195f0:	str	r0, [r5]
   195f4:	mov	r0, #1
   195f8:	strb	r0, [r1, #5]
   195fc:	pop	{r4, r5, fp, pc}
   19600:	mov	r1, r0
   19604:	mov	r0, #1
   19608:	cmp	r1, #0
   1960c:	bxeq	lr
   19610:	ldrb	r2, [r1, #17]
   19614:	cmp	r2, #0
   19618:	bne	19624 <__assert_fail@plt+0x6b74>
   1961c:	ldr	r1, [r1, #152]	; 0x98
   19620:	b	19608 <__assert_fail@plt+0x6b58>
   19624:	mov	r0, #0
   19628:	bx	lr
   1962c:	mov	ip, r0
   19630:	ldrb	r0, [r0]
   19634:	sub	r3, r0, #33	; 0x21
   19638:	mov	r0, #0
   1963c:	cmp	r3, #12
   19640:	bxhi	lr
   19644:	add	r2, pc, #0
   19648:	ldr	pc, [r2, r3, lsl #2]
   1964c:	andeq	r9, r1, r0, lsl #13
   19650:	andeq	r9, r1, ip, lsl #13
   19654:	andeq	r9, r1, ip, lsl #13
   19658:	andeq	r9, r1, ip, lsl #13
   1965c:	andeq	r9, r1, ip, lsl #13
   19660:	andeq	r9, r1, ip, lsl #13
   19664:	andeq	r9, r1, ip, lsl #13
   19668:	andeq	r9, r1, r0, lsl #13
   1966c:	muleq	r1, r0, r6
   19670:	andeq	r9, r1, ip, lsl #13
   19674:	andeq	r9, r1, ip, lsl #13
   19678:	muleq	r1, r0, r6
   1967c:	andeq	r9, r1, r8, lsr #13
   19680:	ldrb	r0, [ip, #1]
   19684:	clz	r0, r0
   19688:	lsr	r0, r0, #5
   1968c:	bx	lr
   19690:	eor	r0, r1, #1
   19694:	ldrb	r1, [ip, #1]
   19698:	clz	r1, r1
   1969c:	lsr	r1, r1, #5
   196a0:	and	r0, r1, r0
   196a4:	bx	lr
   196a8:	ldrb	r0, [ip, #1]
   196ac:	cmp	r0, #0
   196b0:	movwne	r0, #1
   196b4:	bx	lr
   196b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196bc:	add	fp, sp, #28
   196c0:	sub	sp, sp, #20
   196c4:	mov	r4, #1
   196c8:	cmp	r0, #2
   196cc:	blt	19a74 <__assert_fail@plt+0x6fc4>
   196d0:	movw	r5, #61456	; 0xf010
   196d4:	movw	sl, #61459	; 0xf013
   196d8:	movw	r8, #20084	; 0x4e74
   196dc:	mov	r9, r1
   196e0:	mov	r6, r0
   196e4:	mov	r4, #1
   196e8:	movt	r5, #4
   196ec:	movt	sl, #4
   196f0:	movt	r8, #6
   196f4:	b	1970c <__assert_fail@plt+0x6c5c>
   196f8:	mov	r0, #2
   196fc:	bl	1c440 <__assert_fail@plt+0x9990>
   19700:	add	r4, r4, #1
   19704:	cmp	r4, r6
   19708:	bge	19a74 <__assert_fail@plt+0x6fc4>
   1970c:	ldr	r7, [r9, r4, lsl #2]
   19710:	mov	r0, r5
   19714:	mov	r1, r7
   19718:	bl	123fc <strcmp@plt>
   1971c:	cmp	r0, #0
   19720:	beq	196f8 <__assert_fail@plt+0x6c48>
   19724:	mov	r0, sl
   19728:	mov	r1, r7
   1972c:	bl	123fc <strcmp@plt>
   19730:	cmp	r0, #0
   19734:	beq	1984c <__assert_fail@plt+0x6d9c>
   19738:	movw	r0, #61462	; 0xf016
   1973c:	mov	r1, r7
   19740:	movt	r0, #4
   19744:	bl	123fc <strcmp@plt>
   19748:	cmp	r0, #0
   1974c:	beq	19864 <__assert_fail@plt+0x6db4>
   19750:	movw	r0, #61465	; 0xf019
   19754:	mov	r1, r7
   19758:	movt	r0, #4
   1975c:	bl	123fc <strcmp@plt>
   19760:	cmp	r0, #0
   19764:	beq	19a70 <__assert_fail@plt+0x6fc0>
   19768:	movw	r0, #61468	; 0xf01c
   1976c:	mov	r1, r7
   19770:	movt	r0, #4
   19774:	bl	123fc <strcmp@plt>
   19778:	cmp	r0, #0
   1977c:	beq	1987c <__assert_fail@plt+0x6dcc>
   19780:	movw	r0, #62531	; 0xf443
   19784:	mov	r1, r7
   19788:	mov	r2, #2
   1978c:	movt	r0, #4
   19790:	bl	12a50 <strncmp@plt>
   19794:	cmp	r0, #0
   19798:	bne	19a74 <__assert_fail@plt+0x6fc4>
   1979c:	ldrb	r5, [r7, #2]!
   197a0:	cmp	r5, #0
   197a4:	beq	19a8c <__assert_fail@plt+0x6fdc>
   197a8:	mov	sl, r6
   197ac:	bl	12768 <__ctype_b_loc@plt>
   197b0:	ldr	r0, [r0]
   197b4:	add	r0, r0, r5, lsl #1
   197b8:	ldrb	r0, [r0, #1]
   197bc:	tst	r0, #8
   197c0:	beq	19a80 <__assert_fail@plt+0x6fd0>
   197c4:	bl	12804 <__errno_location@plt>
   197c8:	mov	r6, r0
   197cc:	ldr	r0, [r0]
   197d0:	add	r1, sp, #16
   197d4:	mov	r2, #10
   197d8:	str	r0, [sp, #4]
   197dc:	mov	r0, #0
   197e0:	str	r0, [r6]
   197e4:	mov	r0, r7
   197e8:	bl	127b0 <strtoul@plt>
   197ec:	mov	r5, r0
   197f0:	ldr	r0, [sp, #16]
   197f4:	cmp	r5, #0
   197f8:	cmpeq	r0, r7
   197fc:	beq	19a80 <__assert_fail@plt+0x6fd0>
   19800:	ldrb	r0, [r0]
   19804:	cmp	r0, #0
   19808:	bne	19ab0 <__assert_fail@plt+0x7000>
   1980c:	cmn	r5, #1
   19810:	beq	19ad8 <__assert_fail@plt+0x7028>
   19814:	cmp	r5, #65536	; 0x10000
   19818:	bcs	19ae4 <__assert_fail@plt+0x7034>
   1981c:	ldr	r0, [sp, #4]
   19820:	strh	r5, [r8, #68]	; 0x44
   19824:	movw	r5, #61456	; 0xf010
   19828:	movt	r5, #4
   1982c:	str	r0, [r6]
   19830:	mov	r6, sl
   19834:	movw	sl, #61459	; 0xf013
   19838:	movt	sl, #4
   1983c:	add	r4, r4, #1
   19840:	cmp	r4, r6
   19844:	blt	1970c <__assert_fail@plt+0x6c5c>
   19848:	b	19a74 <__assert_fail@plt+0x6fc4>
   1984c:	mov	r0, #1
   19850:	bl	1c440 <__assert_fail@plt+0x9990>
   19854:	add	r4, r4, #1
   19858:	cmp	r4, r6
   1985c:	blt	1970c <__assert_fail@plt+0x6c5c>
   19860:	b	19a74 <__assert_fail@plt+0x6fc4>
   19864:	mov	r0, #0
   19868:	bl	1c440 <__assert_fail@plt+0x9990>
   1986c:	add	r4, r4, #1
   19870:	cmp	r4, r6
   19874:	blt	1970c <__assert_fail@plt+0x6c5c>
   19878:	b	19a74 <__assert_fail@plt+0x6fc4>
   1987c:	add	r4, r4, #1
   19880:	cmp	r4, r6
   19884:	bge	19b34 <__assert_fail@plt+0x7084>
   19888:	ldr	r1, [r9, r4, lsl #2]
   1988c:	mov	r0, #0
   19890:	add	r2, sp, #12
   19894:	str	r0, [sp, #12]
   19898:	mov	r0, #44	; 0x2c
   1989c:	strh	r0, [sp, #10]
   198a0:	str	r1, [sp, #4]
   198a4:	mov	r0, r1
   198a8:	add	r1, sp, #10
   198ac:	bl	12690 <strtok_r@plt>
   198b0:	cmp	r0, #0
   198b4:	beq	19b40 <__assert_fail@plt+0x7090>
   198b8:	mov	r7, r0
   198bc:	movw	r0, #603	; 0x25b
   198c0:	mov	r1, r7
   198c4:	movt	r0, #5
   198c8:	bl	123fc <strcmp@plt>
   198cc:	cmp	r0, #0
   198d0:	beq	199d4 <__assert_fail@plt+0x6f24>
   198d4:	movw	r0, #61797	; 0xf165
   198d8:	mov	r1, r7
   198dc:	movt	r0, #4
   198e0:	bl	123fc <strcmp@plt>
   198e4:	cmp	r0, #0
   198e8:	beq	199dc <__assert_fail@plt+0x6f2c>
   198ec:	movw	r0, #61854	; 0xf19e
   198f0:	mov	r1, r7
   198f4:	movt	r0, #4
   198f8:	bl	123fc <strcmp@plt>
   198fc:	cmp	r0, #0
   19900:	beq	199e4 <__assert_fail@plt+0x6f34>
   19904:	movw	r0, #61904	; 0xf1d0
   19908:	mov	r1, r7
   1990c:	movt	r0, #4
   19910:	bl	123fc <strcmp@plt>
   19914:	cmp	r0, #0
   19918:	beq	199ec <__assert_fail@plt+0x6f3c>
   1991c:	movw	r0, #65232	; 0xfed0
   19920:	mov	r1, r7
   19924:	movt	r0, #4
   19928:	bl	123fc <strcmp@plt>
   1992c:	cmp	r0, #0
   19930:	beq	199f4 <__assert_fail@plt+0x6f44>
   19934:	movw	r0, #65148	; 0xfe7c
   19938:	mov	r1, r7
   1993c:	movt	r0, #4
   19940:	bl	123fc <strcmp@plt>
   19944:	cmp	r0, #0
   19948:	beq	199fc <__assert_fail@plt+0x6f4c>
   1994c:	movw	r0, #62086	; 0xf286
   19950:	mov	r1, r7
   19954:	movt	r0, #4
   19958:	bl	123fc <strcmp@plt>
   1995c:	cmp	r0, #0
   19960:	beq	19a04 <__assert_fail@plt+0x6f54>
   19964:	movw	r0, #63151	; 0xf6af
   19968:	mov	r1, r7
   1996c:	movt	r0, #4
   19970:	bl	123fc <strcmp@plt>
   19974:	cmp	r0, #0
   19978:	beq	19a0c <__assert_fail@plt+0x6f5c>
   1997c:	movw	r0, #75	; 0x4b
   19980:	mov	r1, r7
   19984:	movt	r0, #5
   19988:	bl	123fc <strcmp@plt>
   1998c:	cmp	r0, #0
   19990:	beq	19a14 <__assert_fail@plt+0x6f64>
   19994:	movw	r1, #62348	; 0xf38c
   19998:	mov	r0, #0
   1999c:	mov	r2, #5
   199a0:	movt	r1, #4
   199a4:	bl	12564 <dcgettext@plt>
   199a8:	ldr	r1, [r8, #72]	; 0x48
   199ac:	ldr	r2, [sp, #4]
   199b0:	mov	r7, r0
   199b4:	mov	r0, #0
   199b8:	bl	2efe4 <__assert_fail@plt+0x1c534>
   199bc:	mov	r3, r0
   199c0:	mov	r0, #0
   199c4:	mov	r1, #0
   199c8:	mov	r2, r7
   199cc:	bl	1269c <error@plt>
   199d0:	b	19a38 <__assert_fail@plt+0x6f88>
   199d4:	mov	r0, #0
   199d8:	b	19a18 <__assert_fail@plt+0x6f68>
   199dc:	mov	r0, #1
   199e0:	b	19a18 <__assert_fail@plt+0x6f68>
   199e4:	mov	r0, #2
   199e8:	b	19a18 <__assert_fail@plt+0x6f68>
   199ec:	mov	r0, #3
   199f0:	b	19a18 <__assert_fail@plt+0x6f68>
   199f4:	mov	r0, #4
   199f8:	b	19a18 <__assert_fail@plt+0x6f68>
   199fc:	mov	r0, #5
   19a00:	b	19a18 <__assert_fail@plt+0x6f68>
   19a04:	mov	r0, #6
   19a08:	b	19a18 <__assert_fail@plt+0x6f68>
   19a0c:	mov	r0, #7
   19a10:	b	19a18 <__assert_fail@plt+0x6f68>
   19a14:	mov	r0, #8
   19a18:	movw	r1, #62712	; 0xf4f8
   19a1c:	add	r0, r0, r0, lsl #1
   19a20:	movt	r1, #4
   19a24:	add	r0, r1, r0, lsl #2
   19a28:	ldr	r1, [r8, #44]	; 0x2c
   19a2c:	ldr	r0, [r0, #4]
   19a30:	orr	r0, r1, r0
   19a34:	str	r0, [r8, #44]	; 0x2c
   19a38:	mov	r0, #0
   19a3c:	add	r1, sp, #10
   19a40:	add	r2, sp, #12
   19a44:	bl	12690 <strtok_r@plt>
   19a48:	mov	r7, r0
   19a4c:	cmp	r0, #0
   19a50:	bne	198bc <__assert_fail@plt+0x6e0c>
   19a54:	ldrb	r0, [r8, #44]	; 0x2c
   19a58:	tst	r0, #16
   19a5c:	beq	19700 <__assert_fail@plt+0x6c50>
   19a60:	mov	r0, #1
   19a64:	bl	187d0 <__assert_fail@plt+0x5d20>
   19a68:	mov	r0, #0
   19a6c:	bl	12780 <exit@plt>
   19a70:	add	r4, r4, #1
   19a74:	mov	r0, r4
   19a78:	sub	sp, fp, #28
   19a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a80:	movw	r1, #62481	; 0xf411
   19a84:	movt	r1, #4
   19a88:	b	19a94 <__assert_fail@plt+0x6fe4>
   19a8c:	movw	r1, #62417	; 0xf3d1
   19a90:	movt	r1, #4
   19a94:	mov	r0, #0
   19a98:	mov	r2, #5
   19a9c:	bl	12564 <dcgettext@plt>
   19aa0:	mov	r2, r0
   19aa4:	mov	r0, #1
   19aa8:	mov	r1, #0
   19aac:	bl	1269c <error@plt>
   19ab0:	movw	r1, #62534	; 0xf446
   19ab4:	mov	r0, #0
   19ab8:	mov	r2, #5
   19abc:	movt	r1, #4
   19ac0:	bl	12564 <dcgettext@plt>
   19ac4:	mov	r2, r0
   19ac8:	mov	r0, #1
   19acc:	mov	r1, #0
   19ad0:	mov	r3, r7
   19ad4:	bl	1269c <error@plt>
   19ad8:	ldr	r4, [r6]
   19adc:	cmp	r4, #0
   19ae0:	bne	19b0c <__assert_fail@plt+0x705c>
   19ae4:	movw	r1, #62564	; 0xf464
   19ae8:	mov	r0, #0
   19aec:	mov	r2, #5
   19af0:	movt	r1, #4
   19af4:	bl	12564 <dcgettext@plt>
   19af8:	mov	r2, r0
   19afc:	mov	r0, #1
   19b00:	mov	r1, #0
   19b04:	mov	r3, r5
   19b08:	bl	1269c <error@plt>
   19b0c:	movw	r1, #62534	; 0xf446
   19b10:	mov	r0, #0
   19b14:	mov	r2, #5
   19b18:	movt	r1, #4
   19b1c:	bl	12564 <dcgettext@plt>
   19b20:	mov	r2, r0
   19b24:	mov	r0, #1
   19b28:	mov	r1, r4
   19b2c:	mov	r3, r7
   19b30:	bl	1269c <error@plt>
   19b34:	movw	r1, #61471	; 0xf01f
   19b38:	movt	r1, #4
   19b3c:	b	19b48 <__assert_fail@plt+0x7098>
   19b40:	movw	r1, #62384	; 0xf3b0
   19b44:	movt	r1, #4
   19b48:	mov	r0, #0
   19b4c:	mov	r2, #5
   19b50:	bl	12564 <dcgettext@plt>
   19b54:	mov	r2, r0
   19b58:	mov	r0, #0
   19b5c:	mov	r1, #0
   19b60:	bl	1269c <error@plt>
   19b64:	mov	r0, #1
   19b68:	bl	18610 <__assert_fail@plt+0x5b60>
   19b6c:	push	{r4, r5, r6, sl, fp, lr}
   19b70:	add	fp, sp, #16
   19b74:	vpush	{d8}
   19b78:	sub	sp, sp, #392	; 0x188
   19b7c:	mov	r4, r0
   19b80:	movw	r0, #61509	; 0xf045
   19b84:	movt	r0, #4
   19b88:	bl	126d8 <getenv@plt>
   19b8c:	cmp	r0, #0
   19b90:	mov	r5, sp
   19b94:	movwne	r0, #1
   19b98:	strb	r0, [r4, #17]
   19b9c:	mov	r0, r5
   19ba0:	bl	1254c <uname@plt>
   19ba4:	cmp	r0, #0
   19ba8:	beq	19bb4 <__assert_fail@plt+0x7104>
   19bac:	mov	r6, #1
   19bb0:	b	19c28 <__assert_fail@plt+0x7178>
   19bb4:	add	r0, r5, #130	; 0x82
   19bb8:	mov	r1, #0
   19bbc:	mov	r6, #0
   19bc0:	bl	12870 <strtod@plt>
   19bc4:	movw	r0, #61104	; 0xeeb0
   19bc8:	mov	r1, r5
   19bcc:	mov	r2, #6
   19bd0:	vmov.f64	d8, d0
   19bd4:	movt	r0, #4
   19bd8:	bl	127a4 <bcmp@plt>
   19bdc:	vcvt.f32.f64	s16, d8
   19be0:	cmp	r0, #0
   19be4:	beq	19c18 <__assert_fail@plt+0x7168>
   19be8:	movw	r0, #61110	; 0xeeb6
   19bec:	mov	r1, sp
   19bf0:	mov	r2, #8
   19bf4:	movt	r0, #4
   19bf8:	bl	127a4 <bcmp@plt>
   19bfc:	vldr	s0, [pc, #372]	; 19d78 <__assert_fail@plt+0x72c8>
   19c00:	vcmpe.f32	s16, s0
   19c04:	vmrs	APSR_nzcv, fpscr
   19c08:	movwge	r6, #1
   19c0c:	cmp	r0, #0
   19c10:	movne	r6, #1
   19c14:	b	19c28 <__assert_fail@plt+0x7178>
   19c18:	vldr	s0, [pc, #348]	; 19d7c <__assert_fail@plt+0x72cc>
   19c1c:	vcmpe.f32	s16, s0
   19c20:	vmrs	APSR_nzcv, fpscr
   19c24:	movwge	r6, #1
   19c28:	mov	r5, #0
   19c2c:	mov	r0, #0
   19c30:	str	r5, [r4, #60]	; 0x3c
   19c34:	strb	r6, [r4, #56]	; 0x38
   19c38:	bl	12a20 <isatty@plt>
   19c3c:	cmp	r0, #0
   19c40:	strb	r5, [r4, #15]
   19c44:	mov	r1, #1
   19c48:	movwne	r0, #1
   19c4c:	strb	r0, [r4, #16]
   19c50:	ldrb	r0, [r4, #17]
   19c54:	cmp	r0, #0
   19c58:	mvn	r0, #0
   19c5c:	strbne	r5, [r4, #16]
   19c60:	strh	r1, [r4]
   19c64:	str	r0, [r4, #4]
   19c68:	str	r0, [r4, #8]
   19c6c:	mov	r0, sp
   19c70:	mov	r1, #0
   19c74:	mov	r5, #0
   19c78:	bl	1266c <gettimeofday@plt>
   19c7c:	cmp	r0, #0
   19c80:	beq	19c9c <__assert_fail@plt+0x71ec>
   19c84:	mov	r0, #0
   19c88:	bl	12534 <time@plt>
   19c8c:	cmn	r0, #1
   19c90:	beq	19d58 <__assert_fail@plt+0x72a8>
   19c94:	mov	r1, #0
   19c98:	b	19cac <__assert_fail@plt+0x71fc>
   19c9c:	mov	r2, #1000	; 0x3e8
   19ca0:	ldm	sp, {r0, r1}
   19ca4:	mov	r5, #0
   19ca8:	mul	r1, r1, r2
   19cac:	orr	r3, r5, r0
   19cb0:	sub	r0, r0, #4480	; 0x1180
   19cb4:	add	r2, r4, #20
   19cb8:	mov	r5, #0
   19cbc:	sub	r0, r0, #81920	; 0x14000
   19cc0:	str	r3, [r2]
   19cc4:	str	r1, [r2, #4]
   19cc8:	strb	r5, [r4, #36]	; 0x24
   19ccc:	str	r0, [r4, #28]
   19cd0:	mov	r0, #2
   19cd4:	str	r1, [r4, #32]
   19cd8:	strh	r5, [r4, #13]
   19cdc:	mov	r1, #512	; 0x200
   19ce0:	strh	r0, [r4, #68]	; 0x44
   19ce4:	ldrb	r0, [r4, #17]
   19ce8:	cmp	r0, #0
   19cec:	movw	r0, #61525	; 0xf055
   19cf0:	movt	r0, #4
   19cf4:	movweq	r1, #1024	; 0x400
   19cf8:	str	r1, [r4, #40]	; 0x28
   19cfc:	str	r5, [r4, #44]	; 0x2c
   19d00:	bl	126d8 <getenv@plt>
   19d04:	cmp	r0, #0
   19d08:	bne	19d34 <__assert_fail@plt+0x7284>
   19d0c:	mov	r0, #0
   19d10:	strb	r5, [r4, #12]
   19d14:	bl	1c440 <__assert_fail@plt+0x9990>
   19d18:	mov	r0, #8
   19d1c:	strb	r5, [r4, #80]	; 0x50
   19d20:	str	r0, [r4, #72]	; 0x48
   19d24:	str	r5, [r4, #76]	; 0x4c
   19d28:	sub	sp, fp, #24
   19d2c:	vpop	{d8}
   19d30:	pop	{r4, r5, r6, sl, fp, pc}
   19d34:	movw	r1, #61541	; 0xf065
   19d38:	mov	r0, #0
   19d3c:	mov	r2, #5
   19d40:	movt	r1, #4
   19d44:	bl	12564 <dcgettext@plt>
   19d48:	mov	r2, r0
   19d4c:	mov	r0, #1
   19d50:	mov	r1, #0
   19d54:	bl	1269c <error@plt>
   19d58:	movw	r0, #62668	; 0xf4cc
   19d5c:	movw	r1, #59257	; 0xe779
   19d60:	movw	r3, #62684	; 0xf4dc
   19d64:	movw	r2, #978	; 0x3d2
   19d68:	movt	r0, #4
   19d6c:	movt	r1, #4
   19d70:	movt	r3, #4
   19d74:	bl	12ab0 <__assert_fail@plt>
   19d78:	submi	r6, r6, r6, ror #12
   19d7c:	andmi	ip, ip, sp, asr #25
   19d80:	push	{r4, r5, r6, sl, fp, lr}
   19d84:	add	fp, sp, #16
   19d88:	mov	r6, r0
   19d8c:	ldr	r0, [r2, #164]	; 0xa4
   19d90:	mov	r4, r2
   19d94:	mov	r5, r1
   19d98:	add	r0, r0, #1
   19d9c:	str	r0, [r2, #164]	; 0xa4
   19da0:	ldrb	r0, [r2, #18]
   19da4:	cmp	r0, #0
   19da8:	movw	r0, #20040	; 0x4e48
   19dac:	movt	r0, #6
   19db0:	beq	19dd0 <__assert_fail@plt+0x7320>
   19db4:	ldrb	r1, [r0, #4]
   19db8:	cmp	r1, #0
   19dbc:	beq	19e30 <__assert_fail@plt+0x7380>
   19dc0:	ldrb	r2, [r4, #19]
   19dc4:	cmp	r2, #0
   19dc8:	movwne	r2, #1
   19dcc:	b	19de0 <__assert_fail@plt+0x7330>
   19dd0:	ldrb	r1, [r4, #19]
   19dd4:	mov	r2, #1
   19dd8:	cmp	r1, #0
   19ddc:	beq	19e88 <__assert_fail@plt+0x73d8>
   19de0:	ldrb	r3, [r0, #5]
   19de4:	cmp	r2, #0
   19de8:	clz	r1, r3
   19dec:	lsr	r1, r1, #5
   19df0:	beq	19dfc <__assert_fail@plt+0x734c>
   19df4:	cmp	r3, #0
   19df8:	beq	19e30 <__assert_fail@plt+0x7380>
   19dfc:	ldrb	r2, [r4, #20]
   19e00:	cmp	r2, #0
   19e04:	beq	19e50 <__assert_fail@plt+0x73a0>
   19e08:	ldrd	r2, [r5, #96]	; 0x60
   19e0c:	orr	r2, r2, r3
   19e10:	clz	r2, r2
   19e14:	lsr	r2, r2, #5
   19e18:	orrs	r1, r1, r2
   19e1c:	bne	19e30 <__assert_fail@plt+0x7380>
   19e20:	ldr	r1, [r5, #16]
   19e24:	and	r1, r1, #61440	; 0xf000
   19e28:	cmp	r1, #16384	; 0x4000
   19e2c:	bne	19e50 <__assert_fail@plt+0x73a0>
   19e30:	ldr	r1, [r0, #12]
   19e34:	mov	r0, r6
   19e38:	mov	r2, r5
   19e3c:	bl	18a00 <__assert_fail@plt+0x5f50>
   19e40:	mov	r1, r0
   19e44:	mov	r0, #0
   19e48:	cmp	r1, #0
   19e4c:	popne	{r4, r5, r6, sl, fp, pc}
   19e50:	ldr	r3, [r4]
   19e54:	mov	r0, r6
   19e58:	mov	r1, r5
   19e5c:	mov	r2, r4
   19e60:	blx	r3
   19e64:	mov	r1, r0
   19e68:	mov	r0, #0
   19e6c:	cmp	r1, #0
   19e70:	beq	19e84 <__assert_fail@plt+0x73d4>
   19e74:	ldr	r0, [r4, #168]	; 0xa8
   19e78:	add	r0, r0, #1
   19e7c:	str	r0, [r4, #168]	; 0xa8
   19e80:	mov	r0, #1
   19e84:	pop	{r4, r5, r6, sl, fp, pc}
   19e88:	ldrb	r1, [r4, #20]
   19e8c:	cmp	r1, #0
   19e90:	beq	19e50 <__assert_fail@plt+0x73a0>
   19e94:	ldrb	r1, [r0, #5]
   19e98:	clz	r1, r1
   19e9c:	lsr	r1, r1, #5
   19ea0:	ldrb	r2, [r4, #20]
   19ea4:	cmp	r2, #0
   19ea8:	bne	19e08 <__assert_fail@plt+0x7358>
   19eac:	b	19e50 <__assert_fail@plt+0x73a0>
   19eb0:	movw	r1, #18936	; 0x49f8
   19eb4:	movw	r2, #16928	; 0x4220
   19eb8:	movt	r1, #1
   19ebc:	movt	r2, #1
   19ec0:	sub	r1, r0, r1
   19ec4:	sub	r0, r0, r2
   19ec8:	clz	r1, r1
   19ecc:	clz	r0, r0
   19ed0:	lsr	r1, r1, #5
   19ed4:	lsr	r0, r0, #5
   19ed8:	orr	r0, r0, r1
   19edc:	bx	lr
   19ee0:	mov	r2, r1
   19ee4:	movw	r1, #20084	; 0x4e74
   19ee8:	movt	r1, #6
   19eec:	ldr	r1, [r1, #72]	; 0x48
   19ef0:	b	2efe4 <__assert_fail@plt+0x1c534>
   19ef4:	push	{r4, r5, r6, r7, fp, lr}
   19ef8:	add	fp, sp, #16
   19efc:	movw	r7, #20040	; 0x4e48
   19f00:	mov	r6, r0
   19f04:	mov	r4, r2
   19f08:	mov	r5, r1
   19f0c:	movt	r7, #6
   19f10:	ldrb	r0, [r7, #40]	; 0x28
   19f14:	cmp	r0, #0
   19f18:	cmpne	r4, #0
   19f1c:	bne	19f58 <__assert_fail@plt+0x74a8>
   19f20:	movw	r0, #20084	; 0x4e74
   19f24:	mov	r2, r3
   19f28:	movt	r0, #6
   19f2c:	ldr	r1, [r0, #72]	; 0x48
   19f30:	mov	r0, #0
   19f34:	bl	2efe4 <__assert_fail@plt+0x1c534>
   19f38:	movw	r2, #12871	; 0x3247
   19f3c:	mov	r3, r0
   19f40:	mov	r0, r6
   19f44:	mov	r1, r5
   19f48:	movt	r2, #5
   19f4c:	bl	1269c <error@plt>
   19f50:	mov	r0, #1
   19f54:	str	r0, [r7, #28]
   19f58:	cmp	r4, #0
   19f5c:	movne	r0, #1
   19f60:	strbne	r0, [r7, #40]	; 0x28
   19f64:	pop	{r4, r5, r6, r7, fp, pc}
   19f68:	push	{fp, lr}
   19f6c:	mov	fp, sp
   19f70:	mov	r3, r1
   19f74:	mov	r1, r0
   19f78:	mov	r0, #1
   19f7c:	mov	r2, #1
   19f80:	bl	19ef4 <__assert_fail@plt+0x7444>
   19f84:	bl	12a5c <abort@plt>
   19f88:	push	{fp, lr}
   19f8c:	mov	fp, sp
   19f90:	mov	r3, r1
   19f94:	mov	r1, r0
   19f98:	movw	r0, #20040	; 0x4e48
   19f9c:	mov	r2, #0
   19fa0:	movt	r0, #6
   19fa4:	strb	r2, [r0, #40]	; 0x28
   19fa8:	mov	r0, #1
   19fac:	mov	r2, #0
   19fb0:	bl	19ef4 <__assert_fail@plt+0x7444>
   19fb4:	bl	12a5c <abort@plt>
   19fb8:	push	{fp, lr}
   19fbc:	mov	fp, sp
   19fc0:	add	r2, r0, #4
   19fc4:	add	r1, r0, #48	; 0x30
   19fc8:	mov	r0, r2
   19fcc:	bl	20c48 <__assert_fail@plt+0xe198>
   19fd0:	mov	r0, #0
   19fd4:	pop	{fp, pc}
   19fd8:	push	{r4, r5, r6, sl, fp, lr}
   19fdc:	add	fp, sp, #16
   19fe0:	sub	sp, sp, #8
   19fe4:	mov	r6, r0
   19fe8:	mov	r0, #8
   19fec:	bl	35350 <__assert_fail@plt+0x228a0>
   19ff0:	mov	r4, #0
   19ff4:	cmp	r0, #0
   19ff8:	beq	1a050 <__assert_fail@plt+0x75a0>
   19ffc:	mov	r5, r0
   1a000:	mov	r0, r6
   1a004:	bl	12570 <strdup@plt>
   1a008:	cmp	r0, #0
   1a00c:	str	r0, [r5]
   1a010:	beq	1a064 <__assert_fail@plt+0x75b4>
   1a014:	movw	r0, #41208	; 0xa0f8
   1a018:	movw	r2, #41080	; 0xa078
   1a01c:	movw	r3, #41136	; 0xa0b0
   1a020:	mov	r1, #0
   1a024:	mov	r4, #0
   1a028:	movt	r0, #1
   1a02c:	movt	r2, #1
   1a030:	movt	r3, #1
   1a034:	str	r0, [sp]
   1a038:	mov	r0, #11
   1a03c:	bl	2446c <__assert_fail@plt+0x119bc>
   1a040:	cmp	r0, #0
   1a044:	str	r0, [r5, #4]
   1a048:	beq	1a05c <__assert_fail@plt+0x75ac>
   1a04c:	mov	r4, r5
   1a050:	mov	r0, r4
   1a054:	sub	sp, fp, #16
   1a058:	pop	{r4, r5, r6, sl, fp, pc}
   1a05c:	ldr	r0, [r5]
   1a060:	bl	32910 <__assert_fail@plt+0x1fe60>
   1a064:	mov	r0, r5
   1a068:	bl	32910 <__assert_fail@plt+0x1fe60>
   1a06c:	mov	r0, r4
   1a070:	sub	sp, fp, #16
   1a074:	pop	{r4, r5, r6, sl, fp, pc}
   1a078:	push	{fp, lr}
   1a07c:	mov	fp, sp
   1a080:	mov	ip, r1
   1a084:	ldr	lr, [r0]
   1a088:	ldr	r3, [r0, #4]
   1a08c:	ldr	r1, [r0, #12]
   1a090:	ldr	r2, [r0, #8]
   1a094:	eor	r0, r2, lr
   1a098:	eor	r1, r1, r3
   1a09c:	mov	r2, ip
   1a0a0:	mov	r3, #0
   1a0a4:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   1a0a8:	mov	r0, r2
   1a0ac:	pop	{fp, pc}
   1a0b0:	push	{r4, r5, fp, lr}
   1a0b4:	add	fp, sp, #8
   1a0b8:	ldrd	r2, [r1, #8]
   1a0bc:	ldrd	r4, [r0, #8]
   1a0c0:	eor	r3, r5, r3
   1a0c4:	eor	r2, r4, r2
   1a0c8:	orrs	r2, r2, r3
   1a0cc:	mov	r2, #0
   1a0d0:	bne	1a0f0 <__assert_fail@plt+0x7640>
   1a0d4:	ldrd	r2, [r1]
   1a0d8:	ldrd	r0, [r0]
   1a0dc:	eor	r1, r1, r3
   1a0e0:	eor	r0, r0, r2
   1a0e4:	orr	r0, r0, r1
   1a0e8:	clz	r0, r0
   1a0ec:	lsr	r2, r0, #5
   1a0f0:	mov	r0, r2
   1a0f4:	pop	{r4, r5, fp, pc}
   1a0f8:	push	{r4, sl, fp, lr}
   1a0fc:	add	fp, sp, #8
   1a100:	mov	r4, r0
   1a104:	ldr	r0, [r0, #20]
   1a108:	cmp	r0, #0
   1a10c:	beq	1a11c <__assert_fail@plt+0x766c>
   1a110:	bl	128b8 <fclose@plt>
   1a114:	cmp	r0, #0
   1a118:	bne	1a130 <__assert_fail@plt+0x7680>
   1a11c:	ldr	r0, [r4, #16]
   1a120:	bl	32910 <__assert_fail@plt+0x1fe60>
   1a124:	mov	r0, r4
   1a128:	pop	{r4, sl, fp, lr}
   1a12c:	b	32910 <__assert_fail@plt+0x1fe60>
   1a130:	bl	12804 <__errno_location@plt>
   1a134:	ldr	r0, [r0]
   1a138:	ldr	r1, [r4, #16]
   1a13c:	bl	19f88 <__assert_fail@plt+0x74d8>
   1a140:	push	{r4, sl, fp, lr}
   1a144:	add	fp, sp, #8
   1a148:	mov	r4, r0
   1a14c:	ldr	r0, [r0]
   1a150:	bl	32910 <__assert_fail@plt+0x1fe60>
   1a154:	ldr	r0, [r4, #4]
   1a158:	pop	{r4, sl, fp, lr}
   1a15c:	b	24788 <__assert_fail@plt+0x11cd8>
   1a160:	push	{r4, r5, r6, r7, fp, lr}
   1a164:	add	fp, sp, #16
   1a168:	sub	sp, sp, #104	; 0x68
   1a16c:	mov	r5, r0
   1a170:	mov	r0, #24
   1a174:	mov	r7, r1
   1a178:	bl	35350 <__assert_fail@plt+0x228a0>
   1a17c:	mov	r6, #0
   1a180:	cmp	r0, #0
   1a184:	beq	1a23c <__assert_fail@plt+0x778c>
   1a188:	mov	r4, r0
   1a18c:	mov	r0, r7
   1a190:	bl	12570 <strdup@plt>
   1a194:	cmp	r0, #0
   1a198:	str	r0, [r4, #16]
   1a19c:	beq	1a250 <__assert_fail@plt+0x77a0>
   1a1a0:	ldr	r1, [r5]
   1a1a4:	mov	r0, r7
   1a1a8:	bl	23ed4 <__assert_fail@plt+0x11424>
   1a1ac:	cmp	r0, #0
   1a1b0:	str	r0, [r4, #20]
   1a1b4:	beq	1a248 <__assert_fail@plt+0x7798>
   1a1b8:	bl	1287c <fileno@plt>
   1a1bc:	cmn	r0, #1
   1a1c0:	ble	1a308 <__assert_fail@plt+0x7858>
   1a1c4:	mov	r1, #1
   1a1c8:	mov	r6, r0
   1a1cc:	bl	2398c <__assert_fail@plt+0x10edc>
   1a1d0:	mov	r2, sp
   1a1d4:	mov	r0, #3
   1a1d8:	mov	r1, r6
   1a1dc:	bl	1260c <__fxstat64@plt>
   1a1e0:	cmn	r0, #1
   1a1e4:	ble	1a264 <__assert_fail@plt+0x77b4>
   1a1e8:	ldm	sp, {r0, r1}
   1a1ec:	ldr	r2, [sp, #96]	; 0x60
   1a1f0:	ldr	r3, [sp, #100]	; 0x64
   1a1f4:	stm	r4, {r0, r1, r2, r3}
   1a1f8:	mov	r1, r4
   1a1fc:	ldr	r0, [r5, #4]
   1a200:	bl	24198 <__assert_fail@plt+0x116e8>
   1a204:	cmp	r0, #0
   1a208:	beq	1a29c <__assert_fail@plt+0x77ec>
   1a20c:	mov	r6, r0
   1a210:	ldr	r0, [r4, #20]
   1a214:	cmp	r0, #0
   1a218:	beq	1a228 <__assert_fail@plt+0x7778>
   1a21c:	bl	128b8 <fclose@plt>
   1a220:	cmp	r0, #0
   1a224:	bne	1a328 <__assert_fail@plt+0x7878>
   1a228:	ldr	r0, [r4, #16]
   1a22c:	bl	32910 <__assert_fail@plt+0x1fe60>
   1a230:	mov	r0, r4
   1a234:	bl	32910 <__assert_fail@plt+0x1fe60>
   1a238:	ldr	r6, [r6, #20]
   1a23c:	mov	r0, r6
   1a240:	sub	sp, fp, #16
   1a244:	pop	{r4, r5, r6, r7, fp, pc}
   1a248:	ldr	r0, [r4, #16]
   1a24c:	bl	32910 <__assert_fail@plt+0x1fe60>
   1a250:	mov	r0, r4
   1a254:	bl	32910 <__assert_fail@plt+0x1fe60>
   1a258:	mov	r0, r6
   1a25c:	sub	sp, fp, #16
   1a260:	pop	{r4, r5, r6, r7, fp, pc}
   1a264:	ldr	r0, [r4, #20]
   1a268:	cmp	r0, #0
   1a26c:	beq	1a27c <__assert_fail@plt+0x77cc>
   1a270:	bl	128b8 <fclose@plt>
   1a274:	cmp	r0, #0
   1a278:	bne	1a328 <__assert_fail@plt+0x7878>
   1a27c:	ldr	r0, [r4, #16]
   1a280:	bl	32910 <__assert_fail@plt+0x1fe60>
   1a284:	mov	r0, r4
   1a288:	bl	32910 <__assert_fail@plt+0x1fe60>
   1a28c:	mov	r6, #0
   1a290:	mov	r0, r6
   1a294:	sub	sp, fp, #16
   1a298:	pop	{r4, r5, r6, r7, fp, pc}
   1a29c:	ldr	r0, [r5, #4]
   1a2a0:	mov	r1, r4
   1a2a4:	bl	250c8 <__assert_fail@plt+0x12618>
   1a2a8:	cmp	r0, #0
   1a2ac:	beq	1a2c0 <__assert_fail@plt+0x7810>
   1a2b0:	ldr	r6, [r4, #20]
   1a2b4:	mov	r0, r6
   1a2b8:	sub	sp, fp, #16
   1a2bc:	pop	{r4, r5, r6, r7, fp, pc}
   1a2c0:	bl	12804 <__errno_location@plt>
   1a2c4:	mov	r5, r0
   1a2c8:	ldr	r0, [r4, #20]
   1a2cc:	ldr	r6, [r5]
   1a2d0:	cmp	r0, #0
   1a2d4:	beq	1a2e4 <__assert_fail@plt+0x7834>
   1a2d8:	bl	128b8 <fclose@plt>
   1a2dc:	cmp	r0, #0
   1a2e0:	bne	1a338 <__assert_fail@plt+0x7888>
   1a2e4:	ldr	r0, [r4, #16]
   1a2e8:	bl	32910 <__assert_fail@plt+0x1fe60>
   1a2ec:	mov	r0, r4
   1a2f0:	bl	32910 <__assert_fail@plt+0x1fe60>
   1a2f4:	str	r6, [r5]
   1a2f8:	mov	r6, #0
   1a2fc:	mov	r0, r6
   1a300:	sub	sp, fp, #16
   1a304:	pop	{r4, r5, r6, r7, fp, pc}
   1a308:	movw	r0, #54006	; 0xd2f6
   1a30c:	movw	r1, #62820	; 0xf564
   1a310:	movw	r3, #62832	; 0xf570
   1a314:	mov	r2, #166	; 0xa6
   1a318:	movt	r0, #4
   1a31c:	movt	r1, #4
   1a320:	movt	r3, #4
   1a324:	bl	12ab0 <__assert_fail@plt>
   1a328:	bl	12804 <__errno_location@plt>
   1a32c:	ldr	r0, [r0]
   1a330:	ldr	r1, [r4, #16]
   1a334:	bl	19f88 <__assert_fail@plt+0x74d8>
   1a338:	ldr	r1, [r4, #16]
   1a33c:	ldr	r0, [r5]
   1a340:	bl	19f88 <__assert_fail@plt+0x74d8>
   1a344:	andeq	r0, r0, r0
   1a348:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a34c:	add	fp, sp, #24
   1a350:	ldr	r4, [fp, #8]
   1a354:	cmp	r4, #40	; 0x28
   1a358:	beq	1a628 <__assert_fail@plt+0x7b78>
   1a35c:	cmp	r4, #91	; 0x5b
   1a360:	beq	1a648 <__assert_fail@plt+0x7b98>
   1a364:	cmp	r4, #123	; 0x7b
   1a368:	beq	1a668 <__assert_fail@plt+0x7bb8>
   1a36c:	ldr	r9, [fp, #12]
   1a370:	mov	r8, r0
   1a374:	mov	r0, #20
   1a378:	mov	r5, r3
   1a37c:	mov	r6, r2
   1a380:	mov	r7, r1
   1a384:	bl	306e8 <__assert_fail@plt+0x1dc38>
   1a388:	mov	r1, #0
   1a38c:	str	r0, [r8]
   1a390:	str	r5, [r0]
   1a394:	str	r6, [r0, #12]
   1a398:	str	r1, [r0, #16]
   1a39c:	strb	r9, [r0, #5]
   1a3a0:	strb	r4, [r0, #4]
   1a3a4:	add	r0, r6, #2
   1a3a8:	bl	306e8 <__assert_fail@plt+0x1dc38>
   1a3ac:	ldr	r1, [r8]
   1a3b0:	mov	r2, r6
   1a3b4:	str	r0, [r1, #8]
   1a3b8:	mov	r1, r7
   1a3bc:	bl	1284c <strncpy@plt>
   1a3c0:	add	r0, r0, r6
   1a3c4:	cmp	r5, #1
   1a3c8:	bhi	1a3f0 <__assert_fail@plt+0x7940>
   1a3cc:	cmp	r4, #0
   1a3d0:	bne	1a688 <__assert_fail@plt+0x7bd8>
   1a3d4:	cmp	r9, #0
   1a3d8:	bne	1a6a8 <__assert_fail@plt+0x7bf8>
   1a3dc:	mov	r1, #0
   1a3e0:	strb	r1, [r0]
   1a3e4:	ldr	r0, [r8]
   1a3e8:	add	r0, r0, #16
   1a3ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a3f0:	cmp	r5, #2
   1a3f4:	bne	1a6c8 <__assert_fail@plt+0x7c18>
   1a3f8:	sub	r2, r4, #37	; 0x25
   1a3fc:	cmp	r2, #84	; 0x54
   1a400:	bhi	1a3dc <__assert_fail@plt+0x792c>
   1a404:	ldr	r1, [fp, #16]
   1a408:	add	r3, pc, #0
   1a40c:	ldr	pc, [r3, r2, lsl #2]
   1a410:	muleq	r1, ip, r5
   1a414:	ldrdeq	sl, [r1], -ip
   1a418:	ldrdeq	sl, [r1], -ip
   1a41c:	ldrdeq	sl, [r1], -ip
   1a420:	ldrdeq	sl, [r1], -ip
   1a424:	ldrdeq	sl, [r1], -ip
   1a428:	ldrdeq	sl, [r1], -ip
   1a42c:	ldrdeq	sl, [r1], -ip
   1a430:	ldrdeq	sl, [r1], -ip
   1a434:	ldrdeq	sl, [r1], -ip
   1a438:	ldrdeq	sl, [r1], -ip
   1a43c:	ldrdeq	sl, [r1], -ip
   1a440:	ldrdeq	sl, [r1], -ip
   1a444:	ldrdeq	sl, [r1], -ip
   1a448:	ldrdeq	sl, [r1], -ip
   1a44c:	ldrdeq	sl, [r1], -ip
   1a450:	ldrdeq	sl, [r1], -ip
   1a454:	ldrdeq	sl, [r1], -ip
   1a458:	ldrdeq	sl, [r1], -ip
   1a45c:	ldrdeq	sl, [r1], -ip
   1a460:	ldrdeq	sl, [r1], -ip
   1a464:	ldrdeq	sl, [r1], -ip
   1a468:	ldrdeq	sl, [r1], -ip
   1a46c:	ldrdeq	sl, [r1], -ip
   1a470:	ldrdeq	sl, [r1], -ip
   1a474:	ldrdeq	sl, [r1], -ip
   1a478:	ldrdeq	sl, [r1], -ip
   1a47c:	ldrdeq	sl, [r1], -ip
   1a480:	andeq	sl, r1, r4, ror #10
   1a484:	andeq	sl, r1, r4, ror #10
   1a488:	andeq	sl, r1, r4, ror #10
   1a48c:	andeq	sl, r1, r4, ror #10
   1a490:	ldrdeq	sl, [r1], -ip
   1a494:	andeq	sl, r1, r4, ror #10
   1a498:	andeq	sl, r1, r4, ror #10
   1a49c:	muleq	r1, r8, r5
   1a4a0:	ldrdeq	sl, [r1], -ip
   1a4a4:	ldrdeq	sl, [r1], -ip
   1a4a8:	ldrdeq	sl, [r1], -ip
   1a4ac:	ldrdeq	sl, [r1], -ip
   1a4b0:	andeq	sl, r1, r4, ror #10
   1a4b4:	ldrdeq	sl, [r1], -ip
   1a4b8:	ldrdeq	sl, [r1], -ip
   1a4bc:	muleq	r1, r8, r5
   1a4c0:	ldrdeq	sl, [r1], -ip
   1a4c4:	ldrdeq	sl, [r1], -ip
   1a4c8:			; <UNDEFINED> instruction: 0x0001a5b0
   1a4cc:	andeq	sl, r1, r4, ror #10
   1a4d0:	andeq	sl, r1, r4, ror #10
   1a4d4:	ldrdeq	sl, [r1], -ip
   1a4d8:	ldrdeq	sl, [r1], -ip
   1a4dc:	ldrdeq	sl, [r1], -ip
   1a4e0:	andeq	sl, r1, r4, lsr #11
   1a4e4:	andeq	sl, r1, r8, lsl r6
   1a4e8:	ldrdeq	sl, [r1], -ip
   1a4ec:	ldrdeq	sl, [r1], -ip
   1a4f0:	ldrdeq	sl, [r1], -ip
   1a4f4:	ldrdeq	sl, [r1], -ip
   1a4f8:	ldrdeq	sl, [r1], -ip
   1a4fc:	ldrdeq	sl, [r1], -ip
   1a500:	andeq	sl, r1, r4, ror #10
   1a504:	andeq	sl, r1, r4, ror #10
   1a508:	andeq	sl, r1, r4, ror #10
   1a50c:	muleq	r1, ip, r5
   1a510:	ldrdeq	sl, [r1], -ip
   1a514:	muleq	r1, r8, r5
   1a518:	andeq	sl, r1, r4, ror #10
   1a51c:	muleq	r1, r8, r5
   1a520:	andeq	sl, r1, r0, asr #11
   1a524:	ldrdeq	sl, [r1], -ip
   1a528:	andeq	sl, r1, r4, ror #10
   1a52c:	ldrdeq	sl, [r1], -r4
   1a530:	andeq	sl, r1, r4, lsl #12
   1a534:	andeq	sl, r1, r4, ror #10
   1a538:	ldrdeq	sl, [r1], -ip
   1a53c:	muleq	r1, r8, r5
   1a540:	ldrdeq	sl, [r1], -ip
   1a544:	ldrdeq	sl, [r1], -ip
   1a548:	andeq	sl, r1, r4, ror #10
   1a54c:	andeq	sl, r1, r4, ror #10
   1a550:	andeq	sl, r1, r4, ror #10
   1a554:	ldrdeq	sl, [r1], -ip
   1a558:	ldrdeq	sl, [r1], -ip
   1a55c:	ldrdeq	sl, [r1], -ip
   1a560:	andeq	sl, r1, ip, ror #11
   1a564:	mov	r2, #1
   1a568:	strb	r2, [r1, #18]
   1a56c:	mov	r2, #115	; 0x73
   1a570:	strb	r2, [r0]
   1a574:	mov	r2, #3
   1a578:	mov	r3, #0
   1a57c:	strb	r3, [r0, #1]
   1a580:	ldr	r0, [r1, #24]
   1a584:	cmp	r2, r0
   1a588:	strhi	r2, [r1, #24]
   1a58c:	ldr	r0, [r8]
   1a590:	add	r0, r0, #16
   1a594:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a598:	mov	r4, #115	; 0x73
   1a59c:	strb	r4, [r0], #1
   1a5a0:	b	1a3dc <__assert_fail@plt+0x792c>
   1a5a4:	mov	r2, #1
   1a5a8:	strb	r2, [r1, #18]
   1a5ac:	b	1a5f4 <__assert_fail@plt+0x7b44>
   1a5b0:	mov	r2, #1
   1a5b4:	strb	r2, [r1, #18]
   1a5b8:	mov	r2, #103	; 0x67
   1a5bc:	b	1a570 <__assert_fail@plt+0x7ac0>
   1a5c0:	mov	r2, #1
   1a5c4:	mov	r3, #115	; 0x73
   1a5c8:	strb	r2, [r1, #20]
   1a5cc:	strb	r3, [r0]
   1a5d0:	b	1a578 <__assert_fail@plt+0x7ac8>
   1a5d4:	mov	r2, #1
   1a5d8:	strb	r2, [r1, #18]
   1a5dc:	mov	r2, #115	; 0x73
   1a5e0:	strb	r2, [r0]
   1a5e4:	mov	r2, #4
   1a5e8:	b	1a578 <__assert_fail@plt+0x7ac8>
   1a5ec:	mov	r2, #1
   1a5f0:	strb	r2, [r1, #19]
   1a5f4:	mov	r2, #115	; 0x73
   1a5f8:	strb	r2, [r0]
   1a5fc:	mov	r2, #2
   1a600:	b	1a578 <__assert_fail@plt+0x7ac8>
   1a604:	mov	r2, #111	; 0x6f
   1a608:	strb	r2, [r0]
   1a60c:	mov	r2, #1
   1a610:	strb	r2, [r1, #18]
   1a614:	b	1a574 <__assert_fail@plt+0x7ac4>
   1a618:	mov	r2, #115	; 0x73
   1a61c:	strb	r2, [r0]
   1a620:	mov	r2, #5
   1a624:	b	1a578 <__assert_fail@plt+0x7ac8>
   1a628:	movw	r0, #63031	; 0xf637
   1a62c:	movw	r1, #62905	; 0xf5b9
   1a630:	movw	r3, #62913	; 0xf5c1
   1a634:	mov	r2, #80	; 0x50
   1a638:	movt	r0, #4
   1a63c:	movt	r1, #4
   1a640:	movt	r3, #4
   1a644:	bl	12ab0 <__assert_fail@plt>
   1a648:	movw	r0, #63012	; 0xf624
   1a64c:	movw	r1, #62905	; 0xf5b9
   1a650:	movw	r3, #62913	; 0xf5c1
   1a654:	mov	r2, #79	; 0x4f
   1a658:	movt	r0, #4
   1a65c:	movt	r1, #4
   1a660:	movt	r3, #4
   1a664:	bl	12ab0 <__assert_fail@plt>
   1a668:	movw	r0, #62886	; 0xf5a6
   1a66c:	movw	r1, #62905	; 0xf5b9
   1a670:	movw	r3, #62913	; 0xf5c1
   1a674:	mov	r2, #78	; 0x4e
   1a678:	movt	r0, #4
   1a67c:	movt	r1, #4
   1a680:	movt	r3, #4
   1a684:	bl	12ab0 <__assert_fail@plt>
   1a688:	movw	r0, #63050	; 0xf64a
   1a68c:	movw	r1, #62905	; 0xf5b9
   1a690:	movw	r3, #62913	; 0xf5c1
   1a694:	mov	r2, #97	; 0x61
   1a698:	movt	r0, #4
   1a69c:	movt	r1, #4
   1a6a0:	movt	r3, #4
   1a6a4:	bl	12ab0 <__assert_fail@plt>
   1a6a8:	movw	r0, #63067	; 0xf65b
   1a6ac:	movw	r1, #62905	; 0xf5b9
   1a6b0:	movw	r3, #62913	; 0xf5c1
   1a6b4:	mov	r2, #98	; 0x62
   1a6b8:	movt	r0, #4
   1a6bc:	movt	r1, #4
   1a6c0:	movt	r3, #4
   1a6c4:	bl	12ab0 <__assert_fail@plt>
   1a6c8:	movw	r0, #63088	; 0xf670
   1a6cc:	movw	r1, #62905	; 0xf5b9
   1a6d0:	movw	r3, #62913	; 0xf5c1
   1a6d4:	mov	r2, #105	; 0x69
   1a6d8:	movt	r0, #4
   1a6dc:	movt	r1, #4
   1a6e0:	movt	r3, #4
   1a6e4:	bl	12ab0 <__assert_fail@plt>
   1a6e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6ec:	add	fp, sp, #28
   1a6f0:	sub	sp, sp, #20
   1a6f4:	mov	r6, r2
   1a6f8:	mov	r2, r1
   1a6fc:	movw	r1, #44240	; 0xacd0
   1a700:	mov	r7, r0
   1a704:	movt	r1, #1
   1a708:	mov	r0, r2
   1a70c:	mov	r2, r6
   1a710:	bl	18518 <__assert_fail@plt+0x5a68>
   1a714:	movw	r1, #257	; 0x101
   1a718:	add	r9, r0, #40	; 0x28
   1a71c:	mov	r2, #0
   1a720:	mov	r8, r6
   1a724:	str	r0, [sp, #16]
   1a728:	strh	r1, [r0, #16]
   1a72c:	vld1.32	{d16-d17}, [r7]!
   1a730:	vst1.32	{d16-d17}, [r9]
   1a734:	ldr	r1, [r7]
   1a738:	movw	r7, #63477	; 0xf7f5
   1a73c:	str	r2, [r0, #40]	; 0x28
   1a740:	strh	r2, [r0, #18]
   1a744:	str	r2, [r0, #24]
   1a748:	movt	r7, #4
   1a74c:	str	r1, [r0, #56]	; 0x38
   1a750:	ldrb	r0, [r6]
   1a754:	cmp	r0, #37	; 0x25
   1a758:	bne	1a984 <__assert_fail@plt+0x7ed4>
   1a75c:	b	1a7b0 <__assert_fail@plt+0x7d00>
   1a760:	cmp	r4, #2
   1a764:	mov	r0, #0
   1a768:	add	r1, r4, r6
   1a76c:	sub	r2, r6, r5
   1a770:	mov	r3, #2
   1a774:	ldrbeq	r0, [r6, #1]
   1a778:	sub	r4, r1, #1
   1a77c:	mov	r1, r5
   1a780:	str	r8, [sp]
   1a784:	str	r0, [sp, #4]
   1a788:	ldr	r0, [sp, #16]
   1a78c:	str	r0, [sp, #8]
   1a790:	mov	r0, r9
   1a794:	bl	1a348 <__assert_fail@plt+0x7898>
   1a798:	mov	r9, r0
   1a79c:	add	r8, r4, #1
   1a7a0:	add	r6, r4, #1
   1a7a4:	ldrb	r0, [r6]
   1a7a8:	cmp	r0, #37	; 0x25
   1a7ac:	bne	1a984 <__assert_fail@plt+0x7ed4>
   1a7b0:	mov	r5, r8
   1a7b4:	ldrb	r8, [r6, #1]
   1a7b8:	mov	r4, #1
   1a7bc:	mov	sl, #1
   1a7c0:	cmp	r8, #37	; 0x25
   1a7c4:	beq	1a85c <__assert_fail@plt+0x7dac>
   1a7c8:	cmp	r8, #0
   1a7cc:	beq	1ac7c <__assert_fail@plt+0x81cc>
   1a7d0:	mov	r1, #1
   1a7d4:	ldrb	r8, [r6, r1]
   1a7d8:	mov	sl, r1
   1a7dc:	cmp	r8, #0
   1a7e0:	beq	1a800 <__assert_fail@plt+0x7d50>
   1a7e4:	mov	r0, r7
   1a7e8:	mov	r1, r8
   1a7ec:	mov	r2, #5
   1a7f0:	bl	12894 <memchr@plt>
   1a7f4:	add	r1, sl, #1
   1a7f8:	cmp	r0, #0
   1a7fc:	bne	1a7d4 <__assert_fail@plt+0x7d24>
   1a800:	bl	12768 <__ctype_b_loc@plt>
   1a804:	ldr	r0, [r0]
   1a808:	add	r1, r0, r8, lsl #1
   1a80c:	ldrb	r1, [r1, #1]
   1a810:	tst	r1, #8
   1a814:	beq	1a838 <__assert_fail@plt+0x7d88>
   1a818:	add	r1, sl, #1
   1a81c:	ldrb	r8, [r6, r1]
   1a820:	add	r1, r1, #1
   1a824:	add	r2, r0, r8, lsl #1
   1a828:	ldrb	r2, [r2, #1]
   1a82c:	tst	r2, #8
   1a830:	bne	1a81c <__assert_fail@plt+0x7d6c>
   1a834:	sub	sl, r1, #1
   1a838:	cmp	r8, #46	; 0x2e
   1a83c:	bne	1a85c <__assert_fail@plt+0x7dac>
   1a840:	add	r1, r6, #1
   1a844:	ldrb	r8, [r1, sl]
   1a848:	add	sl, sl, #1
   1a84c:	add	r2, r0, r8, lsl #1
   1a850:	ldrb	r2, [r2, #1]
   1a854:	tst	r2, #8
   1a858:	bne	1a844 <__assert_fail@plt+0x7d94>
   1a85c:	movw	r0, #63482	; 0xf7fa
   1a860:	mov	r1, r8
   1a864:	mov	r2, #29
   1a868:	movt	r0, #4
   1a86c:	bl	12894 <memchr@plt>
   1a870:	cmp	r0, #0
   1a874:	add	r6, r6, sl
   1a878:	mov	r0, r8
   1a87c:	beq	1a88c <__assert_fail@plt+0x7ddc>
   1a880:	cmp	r0, #0
   1a884:	bne	1a760 <__assert_fail@plt+0x7cb0>
   1a888:	b	1a8c0 <__assert_fail@plt+0x7e10>
   1a88c:	movw	r0, #63511	; 0xf817
   1a890:	mov	r1, r8
   1a894:	mov	r2, #5
   1a898:	movt	r0, #4
   1a89c:	bl	12894 <memchr@plt>
   1a8a0:	cmp	r0, #0
   1a8a4:	beq	1a8bc <__assert_fail@plt+0x7e0c>
   1a8a8:	ldrb	r0, [r6, #1]
   1a8ac:	mov	r4, #2
   1a8b0:	cmp	r0, #0
   1a8b4:	bne	1a760 <__assert_fail@plt+0x7cb0>
   1a8b8:	b	1a8c0 <__assert_fail@plt+0x7e10>
   1a8bc:	mov	r4, #0
   1a8c0:	movw	r0, #63224	; 0xf6f8
   1a8c4:	mov	r1, r8
   1a8c8:	mov	r2, #4
   1a8cc:	movt	r0, #4
   1a8d0:	bl	12894 <memchr@plt>
   1a8d4:	cmp	r0, #0
   1a8d8:	bne	1aca4 <__assert_fail@plt+0x81f4>
   1a8dc:	cmp	r4, #2
   1a8e0:	mov	r8, r5
   1a8e4:	bne	1a8fc <__assert_fail@plt+0x7e4c>
   1a8e8:	ldrb	r0, [r6, #1]
   1a8ec:	movw	r1, #63290	; 0xf73a
   1a8f0:	movt	r1, #4
   1a8f4:	cmp	r0, #0
   1a8f8:	beq	1a904 <__assert_fail@plt+0x7e54>
   1a8fc:	movw	r1, #63363	; 0xf783
   1a900:	movt	r1, #4
   1a904:	mov	r0, #0
   1a908:	mov	r2, #5
   1a90c:	bl	12564 <dcgettext@plt>
   1a910:	mov	r7, r6
   1a914:	mov	r2, r0
   1a918:	mov	r0, #0
   1a91c:	mov	r1, #0
   1a920:	ldrb	r3, [r7], -r8
   1a924:	bl	1269c <error@plt>
   1a928:	mov	r0, #20
   1a92c:	bl	306e8 <__assert_fail@plt+0x1dc38>
   1a930:	mov	r5, #0
   1a934:	add	r4, r7, #1
   1a938:	str	r0, [r9]
   1a93c:	strh	r5, [r0, #4]
   1a940:	str	r5, [r0]
   1a944:	str	r4, [r0, #12]
   1a948:	str	r5, [r0, #16]
   1a94c:	add	r0, r7, #3
   1a950:	bl	306e8 <__assert_fail@plt+0x1dc38>
   1a954:	ldr	r1, [r9]
   1a958:	mov	r2, r4
   1a95c:	str	r0, [r1, #8]
   1a960:	mov	r1, r8
   1a964:	bl	1284c <strncpy@plt>
   1a968:	strb	r5, [r0, r4]
   1a96c:	movw	r7, #63477	; 0xf7f5
   1a970:	mov	r4, r6
   1a974:	ldr	r0, [r9]
   1a978:	movt	r7, #4
   1a97c:	add	r9, r0, #16
   1a980:	b	1a79c <__assert_fail@plt+0x7cec>
   1a984:	cmp	r0, #92	; 0x5c
   1a988:	beq	1a9ac <__assert_fail@plt+0x7efc>
   1a98c:	cmp	r0, #0
   1a990:	beq	1abb0 <__assert_fail@plt+0x8100>
   1a994:	mov	r4, r6
   1a998:	add	r6, r6, #1
   1a99c:	ldrb	r0, [r6]
   1a9a0:	cmp	r0, #37	; 0x25
   1a9a4:	bne	1a984 <__assert_fail@plt+0x7ed4>
   1a9a8:	b	1a7b0 <__assert_fail@plt+0x7d00>
   1a9ac:	mov	r4, r6
   1a9b0:	ldrb	r0, [r4, #1]!
   1a9b4:	cmp	r0, #0
   1a9b8:	beq	1aa14 <__assert_fail@plt+0x7f64>
   1a9bc:	cmp	r0, #99	; 0x63
   1a9c0:	beq	1ac08 <__assert_fail@plt+0x8158>
   1a9c4:	and	r1, r0, #248	; 0xf8
   1a9c8:	cmp	r1, #48	; 0x30
   1a9cc:	bne	1aa40 <__assert_fail@plt+0x7f90>
   1a9d0:	ldrb	r1, [r6, #2]
   1a9d4:	sub	r0, r0, #48	; 0x30
   1a9d8:	mov	r7, #1
   1a9dc:	and	r2, r1, #248	; 0xf8
   1a9e0:	cmp	r2, #48	; 0x30
   1a9e4:	bne	1aa0c <__assert_fail@plt+0x7f5c>
   1a9e8:	add	r0, r1, r0, lsl #3
   1a9ec:	ldrb	r1, [r6, #3]
   1a9f0:	mov	r7, #2
   1a9f4:	sub	r0, r0, #48	; 0x30
   1a9f8:	and	r2, r1, #248	; 0xf8
   1a9fc:	cmp	r2, #48	; 0x30
   1aa00:	addeq	r0, r1, r0, lsl #3
   1aa04:	moveq	r7, #3
   1aa08:	subeq	r0, r0, #48	; 0x30
   1aa0c:	strb	r0, [r6]
   1aa10:	b	1ab3c <__assert_fail@plt+0x808c>
   1aa14:	movw	r1, #63108	; 0xf684
   1aa18:	mov	r0, #0
   1aa1c:	mov	r2, #5
   1aa20:	mov	r7, #0
   1aa24:	movt	r1, #4
   1aa28:	bl	12564 <dcgettext@plt>
   1aa2c:	mov	r2, r0
   1aa30:	mov	r0, #0
   1aa34:	mov	r1, #0
   1aa38:	bl	1269c <error@plt>
   1aa3c:	b	1ab3c <__assert_fail@plt+0x808c>
   1aa40:	sub	r1, r0, #92	; 0x5c
   1aa44:	cmp	r1, #26
   1aa48:	bhi	1aacc <__assert_fail@plt+0x801c>
   1aa4c:	add	r2, pc, #4
   1aa50:	mov	r0, #7
   1aa54:	ldr	pc, [r2, r1, lsl #2]
   1aa58:	andeq	sl, r1, r4, asr #21
   1aa5c:	andeq	sl, r1, ip, asr #21
   1aa60:	andeq	sl, r1, ip, asr #21
   1aa64:	andeq	sl, r1, ip, asr #21
   1aa68:	andeq	sl, r1, ip, asr #21
   1aa6c:	andeq	sl, r1, r4, lsr fp
   1aa70:	andeq	sl, r1, r0, lsl fp
   1aa74:	andeq	sl, r1, ip, asr #21
   1aa78:	andeq	sl, r1, ip, asr #21
   1aa7c:	andeq	sl, r1, ip, asr #21
   1aa80:	andeq	sl, r1, r8, lsr #22
   1aa84:	andeq	sl, r1, ip, asr #21
   1aa88:	andeq	sl, r1, ip, asr #21
   1aa8c:	andeq	sl, r1, ip, asr #21
   1aa90:	andeq	sl, r1, ip, asr #21
   1aa94:	andeq	sl, r1, ip, asr #21
   1aa98:	andeq	sl, r1, ip, asr #21
   1aa9c:	andeq	sl, r1, ip, asr #21
   1aaa0:	andeq	sl, r1, r0, lsr fp
   1aaa4:	andeq	sl, r1, ip, asr #21
   1aaa8:	andeq	sl, r1, ip, asr #21
   1aaac:	andeq	sl, r1, ip, asr #21
   1aab0:	andeq	sl, r1, r8, lsl #22
   1aab4:	andeq	sl, r1, ip, asr #21
   1aab8:	andeq	sl, r1, r8, lsl fp
   1aabc:	andeq	sl, r1, ip, asr #21
   1aac0:	andeq	sl, r1, r0, lsr #22
   1aac4:	mov	r0, #92	; 0x5c
   1aac8:	b	1ab34 <__assert_fail@plt+0x8084>
   1aacc:	movw	r1, #63155	; 0xf6b3
   1aad0:	mov	r0, #0
   1aad4:	mov	r2, #5
   1aad8:	movt	r1, #4
   1aadc:	bl	12564 <dcgettext@plt>
   1aae0:	ldrb	r3, [r4]
   1aae4:	mov	r2, r0
   1aae8:	mov	r0, #0
   1aaec:	mov	r1, #0
   1aaf0:	bl	1269c <error@plt>
   1aaf4:	add	r6, r4, #1
   1aaf8:	ldrb	r0, [r6]
   1aafc:	cmp	r0, #37	; 0x25
   1ab00:	bne	1a984 <__assert_fail@plt+0x7ed4>
   1ab04:	b	1a7b0 <__assert_fail@plt+0x7d00>
   1ab08:	mov	r0, #13
   1ab0c:	b	1ab34 <__assert_fail@plt+0x8084>
   1ab10:	mov	r0, #8
   1ab14:	b	1ab34 <__assert_fail@plt+0x8084>
   1ab18:	mov	r0, #9
   1ab1c:	b	1ab34 <__assert_fail@plt+0x8084>
   1ab20:	mov	r0, #11
   1ab24:	b	1ab34 <__assert_fail@plt+0x8084>
   1ab28:	mov	r0, #12
   1ab2c:	b	1ab34 <__assert_fail@plt+0x8084>
   1ab30:	mov	r0, #10
   1ab34:	strb	r0, [r6]
   1ab38:	mov	r7, #1
   1ab3c:	mov	r0, #20
   1ab40:	bl	306e8 <__assert_fail@plt+0x1dc38>
   1ab44:	sub	r1, r6, r8
   1ab48:	mov	r5, #0
   1ab4c:	str	r0, [r9]
   1ab50:	add	r4, r1, #1
   1ab54:	str	r5, [r0]
   1ab58:	str	r4, [r0, #12]
   1ab5c:	str	r5, [r0, #16]
   1ab60:	strh	r5, [r0, #4]
   1ab64:	add	r0, r1, #3
   1ab68:	bl	306e8 <__assert_fail@plt+0x1dc38>
   1ab6c:	ldr	r1, [r9]
   1ab70:	mov	r2, r4
   1ab74:	str	r0, [r1, #8]
   1ab78:	mov	r1, r8
   1ab7c:	bl	1284c <strncpy@plt>
   1ab80:	strb	r5, [r0, r4]
   1ab84:	add	r4, r6, r7
   1ab88:	movw	r7, #63477	; 0xf7f5
   1ab8c:	ldr	r0, [r9]
   1ab90:	add	r8, r4, #1
   1ab94:	movt	r7, #4
   1ab98:	add	r6, r4, #1
   1ab9c:	add	r9, r0, #16
   1aba0:	ldrb	r0, [r6]
   1aba4:	cmp	r0, #37	; 0x25
   1aba8:	bne	1a984 <__assert_fail@plt+0x7ed4>
   1abac:	b	1a7b0 <__assert_fail@plt+0x7d00>
   1abb0:	cmp	r6, r8
   1abb4:	bls	1ac70 <__assert_fail@plt+0x81c0>
   1abb8:	mov	r0, #20
   1abbc:	bl	306e8 <__assert_fail@plt+0x1dc38>
   1abc0:	mov	r7, #0
   1abc4:	sub	r4, r6, r8
   1abc8:	str	r0, [r9]
   1abcc:	str	r7, [r0]
   1abd0:	str	r4, [r0, #12]
   1abd4:	str	r7, [r0, #16]
   1abd8:	strh	r7, [r0, #4]
   1abdc:	add	r0, r4, #2
   1abe0:	bl	306e8 <__assert_fail@plt+0x1dc38>
   1abe4:	ldr	r1, [r9]
   1abe8:	mov	r2, r4
   1abec:	str	r0, [r1, #8]
   1abf0:	mov	r1, r8
   1abf4:	bl	1284c <strncpy@plt>
   1abf8:	strb	r7, [r0, r4]
   1abfc:	mov	r0, #1
   1ac00:	sub	sp, fp, #28
   1ac04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac08:	mov	r0, #20
   1ac0c:	bl	306e8 <__assert_fail@plt+0x1dc38>
   1ac10:	mov	r1, #1
   1ac14:	sub	r6, r6, r8
   1ac18:	mov	r4, #0
   1ac1c:	str	r0, [r9]
   1ac20:	str	r1, [r0]
   1ac24:	str	r6, [r0, #12]
   1ac28:	str	r4, [r0, #16]
   1ac2c:	strh	r4, [r0, #4]
   1ac30:	add	r0, r6, #2
   1ac34:	bl	306e8 <__assert_fail@plt+0x1dc38>
   1ac38:	ldr	r1, [r9]
   1ac3c:	mov	r2, r6
   1ac40:	str	r0, [r1, #8]
   1ac44:	mov	r1, r8
   1ac48:	bl	1284c <strncpy@plt>
   1ac4c:	ldr	r1, [sp, #16]
   1ac50:	strb	r4, [r0, r6]
   1ac54:	ldrb	r0, [r1, #18]
   1ac58:	cmp	r0, #0
   1ac5c:	beq	1ac70 <__assert_fail@plt+0x81c0>
   1ac60:	ldr	r0, [r1, #24]
   1ac64:	cmp	r0, #2
   1ac68:	movls	r0, #3
   1ac6c:	strls	r0, [r1, #24]
   1ac70:	mov	r0, #1
   1ac74:	sub	sp, fp, #28
   1ac78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac7c:	movw	r1, #63190	; 0xf6d6
   1ac80:	mov	r0, #0
   1ac84:	mov	r2, #5
   1ac88:	movt	r1, #4
   1ac8c:	bl	12564 <dcgettext@plt>
   1ac90:	mov	r2, r0
   1ac94:	mov	r0, #1
   1ac98:	mov	r1, #0
   1ac9c:	mov	r3, r6
   1aca0:	bl	1269c <error@plt>
   1aca4:	movw	r1, #63228	; 0xf6fc
   1aca8:	mov	r0, #0
   1acac:	mov	r2, #5
   1acb0:	movt	r1, #4
   1acb4:	bl	12564 <dcgettext@plt>
   1acb8:	ldrb	r3, [r6]
   1acbc:	mov	r2, r0
   1acc0:	mov	r0, #1
   1acc4:	mov	r1, #0
   1acc8:	bl	1269c <error@plt>
   1accc:	nop	{0}
   1acd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acd4:	add	fp, sp, #28
   1acd8:	sub	sp, sp, #4
   1acdc:	vpush	{d8-d9}
   1ace0:	sub	sp, sp, #808	; 0x328
   1ace4:	mov	r7, r2
   1ace8:	ldr	r8, [r7, #40]!	; 0x28
   1acec:	cmp	r8, #0
   1acf0:	beq	1b798 <__assert_fail@plt+0x8ce8>
   1acf4:	mov	r4, r0
   1acf8:	add	r0, r1, #48	; 0x30
   1acfc:	vldr	d8, [pc, #1012]	; 1b0f8 <__assert_fail@plt+0x8648>
   1ad00:	mov	r9, r2
   1ad04:	mov	sl, r1
   1ad08:	str	r0, [sp, #28]
   1ad0c:	add	r0, r1, #64	; 0x40
   1ad10:	str	r0, [sp, #32]
   1ad14:	add	r0, r1, #72	; 0x48
   1ad18:	str	r0, [sp, #44]	; 0x2c
   1ad1c:	add	r0, r1, #80	; 0x50
   1ad20:	str	r0, [sp, #40]	; 0x28
   1ad24:	add	r0, r1, #88	; 0x58
   1ad28:	str	r0, [sp, #36]	; 0x24
   1ad2c:	add	r0, r1, #96	; 0x60
   1ad30:	str	r0, [sp, #24]
   1ad34:	ldr	r0, [r8]
   1ad38:	cmp	r0, #2
   1ad3c:	bne	1adec <__assert_fail@plt+0x833c>
   1ad40:	b	1ad70 <__assert_fail@plt+0x82c0>
   1ad44:	ldr	r1, [r8, #8]
   1ad48:	movw	r2, #61103	; 0xeeaf
   1ad4c:	mov	r0, r7
   1ad50:	movt	r2, #4
   1ad54:	bl	1b808 <__assert_fail@plt+0x8d58>
   1ad58:	ldr	r8, [r8, #16]
   1ad5c:	cmp	r8, #0
   1ad60:	beq	1b798 <__assert_fail@plt+0x8ce8>
   1ad64:	ldr	r0, [r8]
   1ad68:	cmp	r0, #2
   1ad6c:	bne	1adec <__assert_fail@plt+0x833c>
   1ad70:	ldrb	r2, [r8, #5]
   1ad74:	cmp	r2, #0
   1ad78:	beq	1ae20 <__assert_fail@plt+0x8370>
   1ad7c:	ldrb	r0, [r8, #4]
   1ad80:	sub	r0, r0, #65	; 0x41
   1ad84:	cmp	r0, #19
   1ad88:	bhi	1b7ac <__assert_fail@plt+0x8cfc>
   1ad8c:	add	r1, pc, #0
   1ad90:	ldr	pc, [r1, r0, lsl #2]
   1ad94:	andeq	sl, r1, r4, ror #27
   1ad98:	andeq	fp, r1, r8, lsr #1
   1ad9c:	strheq	fp, [r1], -ip
   1ada0:	andeq	fp, r1, ip, lsr #15
   1ada4:	andeq	fp, r1, ip, lsr #15
   1ada8:	andeq	fp, r1, ip, lsr #15
   1adac:	andeq	fp, r1, ip, lsr #15
   1adb0:	andeq	fp, r1, ip, lsr #15
   1adb4:	andeq	fp, r1, ip, lsr #15
   1adb8:	andeq	fp, r1, ip, lsr #15
   1adbc:	andeq	fp, r1, ip, lsr #15
   1adc0:	andeq	fp, r1, ip, lsr #15
   1adc4:	andeq	fp, r1, ip, lsr #15
   1adc8:	andeq	fp, r1, ip, lsr #15
   1adcc:	andeq	fp, r1, ip, lsr #15
   1add0:	andeq	fp, r1, ip, lsr #15
   1add4:	andeq	fp, r1, ip, lsr #15
   1add8:	andeq	fp, r1, ip, lsr #15
   1addc:	andeq	fp, r1, ip, lsr #15
   1ade0:	andeq	fp, r1, r0, lsr #1
   1ade4:	ldr	r0, [sp, #44]	; 0x2c
   1ade8:	b	1b0c0 <__assert_fail@plt+0x8610>
   1adec:	cmp	r0, #1
   1adf0:	beq	1b040 <__assert_fail@plt+0x8590>
   1adf4:	cmp	r0, #0
   1adf8:	bne	1ad58 <__assert_fail@plt+0x82a8>
   1adfc:	ldr	r6, [r8, #12]
   1ae00:	ldr	r3, [r7, #4]
   1ae04:	ldr	r0, [r8, #8]
   1ae08:	mov	r1, #1
   1ae0c:	mov	r2, r6
   1ae10:	bl	12618 <fwrite@plt>
   1ae14:	cmp	r0, r6
   1ae18:	bcs	1ad58 <__assert_fail@plt+0x82a8>
   1ae1c:	b	1b080 <__assert_fail@plt+0x85d0>
   1ae20:	ldrb	r0, [r8, #4]
   1ae24:	cmp	r0, #121	; 0x79
   1ae28:	bhi	1ad58 <__assert_fail@plt+0x82a8>
   1ae2c:	add	r1, pc, #0
   1ae30:	ldr	pc, [r1, r0, lsl #2]
   1ae34:	andeq	fp, r1, ip, asr #15
   1ae38:	andeq	sl, r1, r8, asr sp
   1ae3c:	andeq	sl, r1, r8, asr sp
   1ae40:	andeq	sl, r1, r8, asr sp
   1ae44:	andeq	sl, r1, r8, asr sp
   1ae48:	andeq	sl, r1, r8, asr sp
   1ae4c:	andeq	sl, r1, r8, asr sp
   1ae50:	andeq	sl, r1, r8, asr sp
   1ae54:	andeq	sl, r1, r8, asr sp
   1ae58:	andeq	sl, r1, r8, asr sp
   1ae5c:	andeq	sl, r1, r8, asr sp
   1ae60:	andeq	sl, r1, r8, asr sp
   1ae64:	andeq	sl, r1, r8, asr sp
   1ae68:	andeq	sl, r1, r8, asr sp
   1ae6c:	andeq	sl, r1, r8, asr sp
   1ae70:	andeq	sl, r1, r8, asr sp
   1ae74:	andeq	sl, r1, r8, asr sp
   1ae78:	andeq	sl, r1, r8, asr sp
   1ae7c:	andeq	sl, r1, r8, asr sp
   1ae80:	andeq	sl, r1, r8, asr sp
   1ae84:	andeq	sl, r1, r8, asr sp
   1ae88:	andeq	sl, r1, r8, asr sp
   1ae8c:	andeq	sl, r1, r8, asr sp
   1ae90:	andeq	sl, r1, r8, asr sp
   1ae94:	andeq	sl, r1, r8, asr sp
   1ae98:	andeq	sl, r1, r8, asr sp
   1ae9c:	andeq	sl, r1, r8, asr sp
   1aea0:	andeq	sl, r1, r8, asr sp
   1aea4:	andeq	sl, r1, r8, asr sp
   1aea8:	andeq	sl, r1, r8, asr sp
   1aeac:	andeq	sl, r1, r8, asr sp
   1aeb0:	andeq	sl, r1, r8, asr sp
   1aeb4:	andeq	sl, r1, r8, asr sp
   1aeb8:	andeq	sl, r1, r8, asr sp
   1aebc:	andeq	sl, r1, r8, asr sp
   1aec0:	andeq	sl, r1, r8, asr sp
   1aec4:	andeq	sl, r1, r8, asr sp
   1aec8:	andeq	fp, r1, ip, lsl r0
   1aecc:	andeq	sl, r1, r8, asr sp
   1aed0:	andeq	sl, r1, r8, asr sp
   1aed4:	andeq	sl, r1, r8, asr sp
   1aed8:	andeq	sl, r1, r8, asr sp
   1aedc:	andeq	sl, r1, r8, asr sp
   1aee0:	andeq	sl, r1, r8, asr sp
   1aee4:	andeq	sl, r1, r8, asr sp
   1aee8:	andeq	sl, r1, r8, asr sp
   1aeec:	andeq	sl, r1, r8, asr sp
   1aef0:	andeq	sl, r1, r8, asr sp
   1aef4:	andeq	sl, r1, r8, asr sp
   1aef8:	andeq	sl, r1, r8, asr sp
   1aefc:	andeq	sl, r1, r8, asr sp
   1af00:	andeq	sl, r1, r8, asr sp
   1af04:	andeq	sl, r1, r8, asr sp
   1af08:	andeq	sl, r1, r8, asr sp
   1af0c:	andeq	sl, r1, r8, asr sp
   1af10:	andeq	sl, r1, r8, asr sp
   1af14:	andeq	sl, r1, r8, asr sp
   1af18:	andeq	sl, r1, r8, asr sp
   1af1c:	andeq	sl, r1, r8, asr sp
   1af20:	andeq	sl, r1, r8, asr sp
   1af24:	andeq	sl, r1, r8, asr sp
   1af28:	andeq	sl, r1, r8, asr sp
   1af2c:	andeq	sl, r1, r8, asr sp
   1af30:	andeq	sl, r1, r8, asr sp
   1af34:	andeq	sl, r1, r8, asr sp
   1af38:	andeq	sl, r1, r8, asr sp
   1af3c:	andeq	sl, r1, r8, asr sp
   1af40:	andeq	sl, r1, r8, asr sp
   1af44:	andeq	fp, r1, ip, lsr #3
   1af48:	andeq	sl, r1, r8, asr sp
   1af4c:	ldrdeq	fp, [r1], -r0
   1af50:	andeq	fp, r1, r8, ror r4
   1af54:	andeq	fp, r1, r8, lsl #4
   1af58:	andeq	sl, r1, r8, asr sp
   1af5c:	andeq	sl, r1, r8, asr sp
   1af60:	andeq	sl, r1, r8, asr sp
   1af64:	andeq	sl, r1, r8, asr sp
   1af68:	andeq	fp, r1, ip, asr #2
   1af6c:	andeq	sl, r1, r8, asr sp
   1af70:	andeq	sl, r1, r8, asr sp
   1af74:	andeq	fp, r1, r8, ror #6
   1af78:	andeq	sl, r1, r8, asr sp
   1af7c:	andeq	sl, r1, r8, asr sp
   1af80:			; <UNDEFINED> instruction: 0x0001b3bc
   1af84:	andeq	sl, r1, r8, asr sp
   1af88:	andeq	fp, r1, r8, ror r5
   1af8c:	andeq	sl, r1, r8, asr sp
   1af90:	andeq	sl, r1, r8, asr sp
   1af94:	andeq	sl, r1, r8, asr sp
   1af98:	andeq	fp, r1, ip, asr #4
   1af9c:	andeq	fp, r1, r0, lsl #8
   1afa0:	andeq	sl, r1, r8, asr sp
   1afa4:	andeq	sl, r1, r8, asr sp
   1afa8:	andeq	sl, r1, r8, asr sp
   1afac:	andeq	sl, r1, r8, asr sp
   1afb0:	andeq	sl, r1, r8, asr sp
   1afb4:	andeq	sl, r1, r8, asr sp
   1afb8:	andeq	fp, r1, r4, ror r1
   1afbc:	ldrdeq	fp, [r1], -ip
   1afc0:	andeq	fp, r1, r4, asr r4
   1afc4:			; <UNDEFINED> instruction: 0x0001b2b4
   1afc8:	andeq	sl, r1, r8, asr sp
   1afcc:	andeq	fp, r1, r0, asr #5
   1afd0:	andeq	fp, r1, r8, ror #8
   1afd4:	strdeq	fp, [r1], -r0
   1afd8:	andeq	fp, r1, r0, lsr #10
   1afdc:	andeq	sl, r1, r8, asr sp
   1afe0:	andeq	fp, r1, r0, lsl #3
   1afe4:	andeq	fp, r1, r8, lsr #9
   1afe8:	andeq	fp, r1, r0, lsl #2
   1afec:	andeq	fp, r1, r0, lsr #3
   1aff0:	andeq	sl, r1, r8, asr sp
   1aff4:	andeq	fp, r1, r4, lsl r1
   1aff8:	andeq	sl, r1, r8, asr sp
   1affc:	andeq	sl, r1, r8, asr sp
   1b000:	andeq	fp, r1, ip, asr r3
   1b004:	andeq	fp, r1, r8, lsr r1
   1b008:	andeq	fp, r1, r8, asr #10
   1b00c:	andeq	sl, r1, r8, asr sp
   1b010:	andeq	sl, r1, r8, asr sp
   1b014:	andeq	sl, r1, r8, asr sp
   1b018:			; <UNDEFINED> instruction: 0x0001b5b4
   1b01c:	ldr	r5, [r8, #12]
   1b020:	ldr	r3, [r7, #4]
   1b024:	ldr	r0, [r8, #8]
   1b028:	mov	r1, #1
   1b02c:	mov	r2, r5
   1b030:	bl	12618 <fwrite@plt>
   1b034:	cmp	r0, r5
   1b038:	bcs	1ad58 <__assert_fail@plt+0x82a8>
   1b03c:	b	1b080 <__assert_fail@plt+0x85d0>
   1b040:	ldr	r6, [r8, #12]
   1b044:	ldr	r3, [r7, #4]
   1b048:	ldr	r0, [r8, #8]
   1b04c:	mov	r1, #1
   1b050:	mov	r2, r6
   1b054:	bl	12618 <fwrite@plt>
   1b058:	cmp	r0, r6
   1b05c:	bcs	1b070 <__assert_fail@plt+0x85c0>
   1b060:	bl	12804 <__errno_location@plt>
   1b064:	ldr	r0, [r0]
   1b068:	ldr	r1, [r9, #48]	; 0x30
   1b06c:	bl	190e4 <__assert_fail@plt+0x6634>
   1b070:	ldr	r0, [r7, #4]
   1b074:	bl	328b4 <__assert_fail@plt+0x1fe04>
   1b078:	cmp	r0, #0
   1b07c:	beq	1ad58 <__assert_fail@plt+0x82a8>
   1b080:	bl	12804 <__errno_location@plt>
   1b084:	ldr	r0, [r0]
   1b088:	ldr	r1, [r9, #48]	; 0x30
   1b08c:	bl	190e4 <__assert_fail@plt+0x6634>
   1b090:	ldr	r8, [r8, #16]
   1b094:	cmp	r8, #0
   1b098:	bne	1ad64 <__assert_fail@plt+0x82b4>
   1b09c:	b	1b798 <__assert_fail@plt+0x8ce8>
   1b0a0:	ldr	r0, [sp, #40]	; 0x28
   1b0a4:	b	1b0c0 <__assert_fail@plt+0x8610>
   1b0a8:	mvn	r1, #0
   1b0ac:	cmp	r2, #64	; 0x40
   1b0b0:	mvn	r0, #0
   1b0b4:	bne	1ad44 <__assert_fail@plt+0x8294>
   1b0b8:	b	1b0c4 <__assert_fail@plt+0x8614>
   1b0bc:	ldr	r0, [sp, #36]	; 0x24
   1b0c0:	ldrd	r0, [r0]
   1b0c4:	ldr	r6, [r8, #8]
   1b0c8:	bl	1b86c <__assert_fail@plt+0x8dbc>
   1b0cc:	mov	r2, r0
   1b0d0:	mov	r0, r7
   1b0d4:	mov	r1, r6
   1b0d8:	b	1ad54 <__assert_fail@plt+0x82a4>
   1b0dc:	ldr	r0, [sp, #32]
   1b0e0:	ldr	r6, [r8, #8]
   1b0e4:	mov	r2, #0
   1b0e8:	mov	r3, #512	; 0x200
   1b0ec:	ldrd	r0, [r0]
   1b0f0:	b	1b1bc <__assert_fail@plt+0x870c>
   1b0f4:	nop	{0}
   1b0f8:	andeq	r0, r0, r0
   1b0fc:	addmi	r0, r0, r0
   1b100:	ldr	r2, [sl, #16]
   1b104:	ldr	r1, [r8, #8]
   1b108:	mov	r0, r7
   1b10c:	bfc	r2, #12, #20
   1b110:	b	1ad54 <__assert_fail@plt+0x82a4>
   1b114:	ldrb	r2, [r9, #52]	; 0x34
   1b118:	ldr	r1, [r9, #56]	; 0x38
   1b11c:	ldr	r0, [r9, #44]	; 0x2c
   1b120:	ldr	r3, [r8, #8]
   1b124:	str	r4, [sp]
   1b128:	bl	227fc <__assert_fail@plt+0xfd4c>
   1b12c:	cmn	r0, #1
   1b130:	bgt	1ad58 <__assert_fail@plt+0x82a8>
   1b134:	b	1b080 <__assert_fail@plt+0x85d0>
   1b138:	ldr	r0, [sp, #40]	; 0x28
   1b13c:	ldr	r5, [r8, #8]
   1b140:	ldrd	r0, [r0]
   1b144:	bl	1bdac <__assert_fail@plt+0x92fc>
   1b148:	b	1b5a4 <__assert_fail@plt+0x8af4>
   1b14c:	add	r5, sp, #48	; 0x30
   1b150:	mov	r0, sl
   1b154:	mov	r1, r5
   1b158:	bl	23ecc <__assert_fail@plt+0x1141c>
   1b15c:	mov	r0, #0
   1b160:	mov	r2, r5
   1b164:	strb	r0, [sp, #58]	; 0x3a
   1b168:	mov	r0, r7
   1b16c:	ldr	r1, [r8, #8]
   1b170:	b	1ad54 <__assert_fail@plt+0x82a4>
   1b174:	ldr	r6, [r8, #8]
   1b178:	ldr	r0, [sp, #44]	; 0x2c
   1b17c:	b	1b45c <__assert_fail@plt+0x89ac>
   1b180:	ldr	r0, [sp, #32]
   1b184:	ldr	r5, [r8, #8]
   1b188:	mov	r6, #512	; 0x200
   1b18c:	mov	r2, #0
   1b190:	mov	r3, #1024	; 0x400
   1b194:	ldrd	r0, [r0]
   1b198:	str	r6, [sp]
   1b19c:	b	1b538 <__assert_fail@plt+0x8a88>
   1b1a0:	ldr	r5, [r8, #8]
   1b1a4:	ldr	r0, [sl, #20]
   1b1a8:	b	1b580 <__assert_fail@plt+0x8ad0>
   1b1ac:	ldr	r6, [r8, #8]
   1b1b0:	ldrd	r0, [sl]
   1b1b4:	mov	r2, #0
   1b1b8:	mov	r3, #1
   1b1bc:	str	r3, [sp]
   1b1c0:	stmib	sp, {r2, r3}
   1b1c4:	str	r2, [sp, #12]
   1b1c8:	add	r2, sp, #152	; 0x98
   1b1cc:	b	1b49c <__assert_fail@plt+0x89ec>
   1b1d0:	ldr	r6, [r8, #8]
   1b1d4:	mov	r0, sl
   1b1d8:	mov	r1, r4
   1b1dc:	bl	1bfdc <__assert_fail@plt+0x952c>
   1b1e0:	ldr	r3, [r9, #44]	; 0x2c
   1b1e4:	ldr	r1, [r9, #56]	; 0x38
   1b1e8:	ldrb	r2, [r9, #52]	; 0x34
   1b1ec:	str	r0, [sp]
   1b1f0:	mov	r0, r3
   1b1f4:	mov	r3, r6
   1b1f8:	bl	227fc <__assert_fail@plt+0xfd4c>
   1b1fc:	cmn	r0, #1
   1b200:	bgt	1ad58 <__assert_fail@plt+0x82a8>
   1b204:	b	1b080 <__assert_fail@plt+0x85d0>
   1b208:	movw	r5, #20040	; 0x4e48
   1b20c:	movt	r5, #6
   1b210:	ldr	r0, [r5, #20]
   1b214:	add	r0, r0, #1
   1b218:	bl	306e8 <__assert_fail@plt+0x1dc38>
   1b21c:	ldr	r5, [r5, #20]
   1b220:	mov	r1, r4
   1b224:	mov	r6, r0
   1b228:	mov	r2, r5
   1b22c:	bl	124e0 <memcpy@plt>
   1b230:	mov	r0, #0
   1b234:	mov	r2, r6
   1b238:	strb	r0, [r6, r5]
   1b23c:	mov	r0, r7
   1b240:	ldr	r1, [r8, #8]
   1b244:	bl	1b808 <__assert_fail@plt+0x8d58>
   1b248:	b	1b508 <__assert_fail@plt+0x8a58>
   1b24c:	ldr	r0, [sl, #16]
   1b250:	and	r0, r0, #61440	; 0xf000
   1b254:	cmp	r0, #40960	; 0xa000
   1b258:	bne	1b5e4 <__assert_fail@plt+0x8b34>
   1b25c:	movw	r0, #20040	; 0x4e48
   1b260:	add	r3, sp, #48	; 0x30
   1b264:	movt	r0, #6
   1b268:	ldr	r2, [r0, #12]
   1b26c:	ldr	r1, [r0, #16]
   1b270:	mov	r0, #0
   1b274:	str	r0, [sp]
   1b278:	mov	r0, #3
   1b27c:	bl	125dc <__fxstatat64@plt>
   1b280:	cmp	r0, #0
   1b284:	beq	1b6bc <__assert_fail@plt+0x8c0c>
   1b288:	bl	12804 <__errno_location@plt>
   1b28c:	mov	r6, r0
   1b290:	ldr	r0, [r0]
   1b294:	cmp	r0, #20
   1b298:	cmpne	r0, #2
   1b29c:	bne	1b738 <__assert_fail@plt+0x8c88>
   1b2a0:	ldr	r1, [r8, #8]
   1b2a4:	movw	r2, #64075	; 0xfa4b
   1b2a8:	mov	r0, r7
   1b2ac:	movt	r2, #4
   1b2b0:	b	1ad54 <__assert_fail@plt+0x82a4>
   1b2b4:	movw	r0, #20040	; 0x4e48
   1b2b8:	movt	r0, #6
   1b2bc:	b	1b568 <__assert_fail@plt+0x8ab8>
   1b2c0:	mov	r0, r4
   1b2c4:	bl	23ba0 <__assert_fail@plt+0x110f0>
   1b2c8:	mov	r6, r0
   1b2cc:	ldr	r3, [r8, #8]
   1b2d0:	ldr	r0, [r9, #44]	; 0x2c
   1b2d4:	ldr	r1, [r9, #56]	; 0x38
   1b2d8:	ldrb	r2, [r9, #52]	; 0x34
   1b2dc:	str	r6, [sp]
   1b2e0:	bl	227fc <__assert_fail@plt+0xfd4c>
   1b2e4:	cmn	r0, #1
   1b2e8:	bgt	1b508 <__assert_fail@plt+0x8a58>
   1b2ec:	b	1b4f8 <__assert_fail@plt+0x8a48>
   1b2f0:	mov	r0, r4
   1b2f4:	bl	30bec <__assert_fail@plt+0x1e13c>
   1b2f8:	mov	r6, r0
   1b2fc:	bl	127bc <strlen@plt>
   1b300:	add	r0, r6, r0
   1b304:	sub	r1, r0, #1
   1b308:	mov	r0, r1
   1b30c:	cmp	r6, r1
   1b310:	bhi	1b324 <__assert_fail@plt+0x8874>
   1b314:	mov	r1, r0
   1b318:	ldrb	r2, [r1], #-1
   1b31c:	cmp	r2, #47	; 0x2f
   1b320:	beq	1b308 <__assert_fail@plt+0x8858>
   1b324:	cmp	r6, r0
   1b328:	bcs	1b33c <__assert_fail@plt+0x888c>
   1b32c:	ldrb	r1, [r0, #1]
   1b330:	cmp	r1, #47	; 0x2f
   1b334:	moveq	r1, #0
   1b338:	strbeq	r1, [r0, #1]
   1b33c:	mov	r0, r6
   1b340:	mov	r1, #47	; 0x2f
   1b344:	bl	12924 <strrchr@plt>
   1b348:	cmp	r0, #0
   1b34c:	beq	1b608 <__assert_fail@plt+0x8b58>
   1b350:	mov	r1, #0
   1b354:	strb	r1, [r0]
   1b358:	b	1b4d8 <__assert_fail@plt+0x8a28>
   1b35c:	ldr	r5, [r8, #8]
   1b360:	ldr	r0, [sp, #28]
   1b364:	b	1b528 <__assert_fail@plt+0x8a78>
   1b368:	movw	r0, #20040	; 0x4e48
   1b36c:	movw	r6, #61103	; 0xeeaf
   1b370:	movt	r0, #6
   1b374:	movt	r6, #4
   1b378:	ldr	r1, [r0]
   1b37c:	cmp	r1, #1
   1b380:	blt	1b398 <__assert_fail@plt+0x88e8>
   1b384:	ldr	r0, [r0, #20]
   1b388:	mov	r6, r4
   1b38c:	ldrb	r0, [r6, r0]!
   1b390:	cmp	r0, #47	; 0x2f
   1b394:	addeq	r6, r6, #1
   1b398:	ldrb	r2, [r9, #52]	; 0x34
   1b39c:	ldr	r1, [r9, #56]	; 0x38
   1b3a0:	ldr	r0, [r9, #44]	; 0x2c
   1b3a4:	ldr	r3, [r8, #8]
   1b3a8:	str	r6, [sp]
   1b3ac:	bl	227fc <__assert_fail@plt+0xfd4c>
   1b3b0:	cmn	r0, #1
   1b3b4:	bgt	1ad58 <__assert_fail@plt+0x82a8>
   1b3b8:	b	1b080 <__assert_fail@plt+0x85d0>
   1b3bc:	ldr	r2, [sp, #28]
   1b3c0:	ldr	r0, [sp, #32]
   1b3c4:	str	r4, [sp, #20]
   1b3c8:	ldr	r6, [r8, #8]
   1b3cc:	ldrd	r4, [r2]
   1b3d0:	ldrd	r0, [r0]
   1b3d4:	orrs	r2, r4, r5
   1b3d8:	beq	1b634 <__assert_fail@plt+0x8b84>
   1b3dc:	bl	4cc5c <__assert_fail@plt+0x3a1ac>
   1b3e0:	vmov	d9, r0, r1
   1b3e4:	mov	r0, r4
   1b3e8:	mov	r1, r5
   1b3ec:	bl	4cc5c <__assert_fail@plt+0x3a1ac>
   1b3f0:	vmov	d16, r0, r1
   1b3f4:	vmul.f64	d17, d9, d8
   1b3f8:	vdiv.f64	d16, d17, d16
   1b3fc:	b	1b714 <__assert_fail@plt+0x8c64>
   1b400:	movw	r0, #20084	; 0x4e74
   1b404:	movw	r5, #20040	; 0x4e48
   1b408:	add	r2, sp, #48	; 0x30
   1b40c:	movt	r0, #6
   1b410:	movt	r5, #6
   1b414:	ldr	r3, [r0, #64]	; 0x40
   1b418:	ldr	r1, [r5, #12]
   1b41c:	ldr	r0, [r5, #16]
   1b420:	blx	r3
   1b424:	ldr	r1, [r8, #8]
   1b428:	cmn	r0, #1
   1b42c:	ble	1b650 <__assert_fail@plt+0x8ba0>
   1b430:	ldr	r2, [sp, #48]	; 0x30
   1b434:	mov	r0, r7
   1b438:	bl	1b808 <__assert_fail@plt+0x8d58>
   1b43c:	ldr	r0, [sp, #48]	; 0x30
   1b440:	bl	129d8 <freecon@plt>
   1b444:	ldr	r8, [r8, #16]
   1b448:	cmp	r8, #0
   1b44c:	bne	1ad64 <__assert_fail@plt+0x82b4>
   1b450:	b	1b798 <__assert_fail@plt+0x8ce8>
   1b454:	ldr	r6, [r8, #8]
   1b458:	ldr	r0, [sp, #36]	; 0x24
   1b45c:	ldrd	r0, [r0]
   1b460:	bl	1bdac <__assert_fail@plt+0x92fc>
   1b464:	b	1b0cc <__assert_fail@plt+0x861c>
   1b468:	ldr	r0, [sl, #28]
   1b46c:	bl	12a8c <getgrgid@plt>
   1b470:	cmp	r0, #0
   1b474:	bne	1b558 <__assert_fail@plt+0x8aa8>
   1b478:	ldr	r6, [r8, #8]
   1b47c:	ldr	r0, [sl, #28]
   1b480:	mov	r2, #1
   1b484:	mov	r1, #0
   1b488:	str	r2, [sp]
   1b48c:	stmib	sp, {r1, r2}
   1b490:	str	r1, [sp, #12]
   1b494:	add	r2, sp, #152	; 0x98
   1b498:	mov	r1, #0
   1b49c:	mov	r3, #0
   1b4a0:	bl	253c8 <__assert_fail@plt+0x12918>
   1b4a4:	b	1b0cc <__assert_fail@plt+0x861c>
   1b4a8:	ldr	r0, [sl, #16]
   1b4ac:	and	r0, r0, #61440	; 0xf000
   1b4b0:	cmp	r0, #40960	; 0xa000
   1b4b4:	bne	1b6e0 <__assert_fail@plt+0x8c30>
   1b4b8:	movw	r5, #20040	; 0x4e48
   1b4bc:	movt	r5, #6
   1b4c0:	ldr	r1, [r5, #12]
   1b4c4:	ldr	r0, [r5, #16]
   1b4c8:	bl	23618 <__assert_fail@plt+0x10b68>
   1b4cc:	cmp	r0, #0
   1b4d0:	beq	1b6c8 <__assert_fail@plt+0x8c18>
   1b4d4:	mov	r6, r0
   1b4d8:	ldrb	r2, [r9, #52]	; 0x34
   1b4dc:	ldr	r1, [r9, #56]	; 0x38
   1b4e0:	ldr	r0, [r9, #44]	; 0x2c
   1b4e4:	ldr	r3, [r8, #8]
   1b4e8:	str	r6, [sp]
   1b4ec:	bl	227fc <__assert_fail@plt+0xfd4c>
   1b4f0:	cmn	r0, #1
   1b4f4:	bgt	1b508 <__assert_fail@plt+0x8a58>
   1b4f8:	bl	12804 <__errno_location@plt>
   1b4fc:	ldr	r0, [r0]
   1b500:	ldr	r1, [r9, #48]	; 0x30
   1b504:	bl	190e4 <__assert_fail@plt+0x6634>
   1b508:	mov	r0, r6
   1b50c:	bl	32910 <__assert_fail@plt+0x1fe60>
   1b510:	ldr	r8, [r8, #16]
   1b514:	cmp	r8, #0
   1b518:	bne	1ad64 <__assert_fail@plt+0x82b4>
   1b51c:	b	1b798 <__assert_fail@plt+0x8ce8>
   1b520:	ldr	r5, [r8, #8]
   1b524:	ldr	r0, [sp, #24]
   1b528:	ldrd	r0, [r0]
   1b52c:	mov	r3, #1
   1b530:	mov	r2, #0
   1b534:	str	r3, [sp]
   1b538:	stmib	sp, {r2, r3}
   1b53c:	str	r2, [sp, #12]
   1b540:	add	r2, sp, #152	; 0x98
   1b544:	b	1b59c <__assert_fail@plt+0x8aec>
   1b548:	ldr	r0, [sl, #24]
   1b54c:	bl	12414 <getpwuid@plt>
   1b550:	cmp	r0, #0
   1b554:	beq	1b578 <__assert_fail@plt+0x8ac8>
   1b558:	ldr	r1, [r8, #8]
   1b55c:	ldr	r2, [r8, #12]
   1b560:	mov	r3, #115	; 0x73
   1b564:	strb	r3, [r1, r2]
   1b568:	ldr	r2, [r0]
   1b56c:	ldr	r1, [r8, #8]
   1b570:	mov	r0, r7
   1b574:	b	1ad54 <__assert_fail@plt+0x82a4>
   1b578:	ldr	r5, [r8, #8]
   1b57c:	ldr	r0, [sl, #24]
   1b580:	mov	r2, #1
   1b584:	mov	r1, #0
   1b588:	str	r2, [sp]
   1b58c:	stmib	sp, {r1, r2}
   1b590:	str	r1, [sp, #12]
   1b594:	add	r2, sp, #152	; 0x98
   1b598:	mov	r1, #0
   1b59c:	mov	r3, #0
   1b5a0:	bl	253c8 <__assert_fail@plt+0x12918>
   1b5a4:	mov	r2, r0
   1b5a8:	mov	r0, r7
   1b5ac:	mov	r1, r5
   1b5b0:	b	1ad54 <__assert_fail@plt+0x82a4>
   1b5b4:	ldr	r1, [r8, #8]
   1b5b8:	ldr	r0, [sl, #16]
   1b5bc:	and	r0, r0, #61440	; 0xf000
   1b5c0:	sub	r0, r0, #4096	; 0x1000
   1b5c4:	lsr	r2, r0, #14
   1b5c8:	cmp	r2, #2
   1b5cc:	bhi	1b5f8 <__assert_fail@plt+0x8b48>
   1b5d0:	movw	r2, #64252	; 0xfafc
   1b5d4:	movt	r2, #4
   1b5d8:	ldr	r2, [r2, r0, lsr #10]
   1b5dc:	mov	r0, r7
   1b5e0:	b	1ad54 <__assert_fail@plt+0x82a4>
   1b5e4:	ldr	r1, [r8, #8]
   1b5e8:	sub	r0, r0, #4096	; 0x1000
   1b5ec:	lsr	r2, r0, #14
   1b5f0:	cmp	r2, #2
   1b5f4:	bls	1b5d0 <__assert_fail@plt+0x8b20>
   1b5f8:	movw	r2, #64153	; 0xfa99
   1b5fc:	mov	r0, r7
   1b600:	movt	r2, #4
   1b604:	b	1ad54 <__assert_fail@plt+0x82a4>
   1b608:	movw	r5, #57732	; 0xe184
   1b60c:	ldrb	r2, [r9, #52]	; 0x34
   1b610:	ldr	r1, [r9, #56]	; 0x38
   1b614:	ldr	r0, [r9, #44]	; 0x2c
   1b618:	ldr	r3, [r8, #8]
   1b61c:	movt	r5, #4
   1b620:	str	r5, [sp]
   1b624:	bl	227fc <__assert_fail@plt+0xfd4c>
   1b628:	cmn	r0, #1
   1b62c:	bgt	1b508 <__assert_fail@plt+0x8a58>
   1b630:	b	1b4f8 <__assert_fail@plt+0x8a48>
   1b634:	orrs	r0, r0, r1
   1b638:	beq	1b710 <__assert_fail@plt+0x8c60>
   1b63c:	add	r0, pc, #436	; 0x1b4
   1b640:	cmp	r1, #0
   1b644:	addmi	r0, r0, #8
   1b648:	vldr	d16, [r0]
   1b64c:	b	1b714 <__assert_fail@plt+0x8c64>
   1b650:	movw	r2, #61103	; 0xeeaf
   1b654:	mov	r0, r7
   1b658:	movt	r2, #4
   1b65c:	bl	1b808 <__assert_fail@plt+0x8d58>
   1b660:	bl	12804 <__errno_location@plt>
   1b664:	ldr	r0, [r0]
   1b668:	movw	r1, #55301	; 0xd805
   1b66c:	mov	r2, #5
   1b670:	movt	r1, #4
   1b674:	str	r0, [sp, #20]
   1b678:	mov	r0, #0
   1b67c:	bl	12564 <dcgettext@plt>
   1b680:	mov	r6, r0
   1b684:	mov	r0, #0
   1b688:	mov	r1, r4
   1b68c:	bl	19ee0 <__assert_fail@plt+0x7430>
   1b690:	ldr	r1, [sp, #20]
   1b694:	mov	r3, r0
   1b698:	mov	r0, #0
   1b69c:	mov	r2, r6
   1b6a0:	bl	1269c <error@plt>
   1b6a4:	mov	r0, #1
   1b6a8:	str	r0, [r5, #28]
   1b6ac:	ldr	r8, [r8, #16]
   1b6b0:	cmp	r8, #0
   1b6b4:	bne	1ad64 <__assert_fail@plt+0x82b4>
   1b6b8:	b	1b798 <__assert_fail@plt+0x8ce8>
   1b6bc:	ldr	r1, [r8, #8]
   1b6c0:	ldr	r0, [sp, #64]	; 0x40
   1b6c4:	b	1b5bc <__assert_fail@plt+0x8b0c>
   1b6c8:	bl	12804 <__errno_location@plt>
   1b6cc:	ldr	r0, [r0]
   1b6d0:	mov	r1, r4
   1b6d4:	bl	18b28 <__assert_fail@plt+0x6078>
   1b6d8:	mov	r0, #1
   1b6dc:	str	r0, [r5, #28]
   1b6e0:	ldrb	r2, [r9, #52]	; 0x34
   1b6e4:	ldr	r1, [r9, #56]	; 0x38
   1b6e8:	ldr	r0, [r9, #44]	; 0x2c
   1b6ec:	ldr	r3, [r8, #8]
   1b6f0:	movw	r6, #61103	; 0xeeaf
   1b6f4:	movt	r6, #4
   1b6f8:	str	r6, [sp]
   1b6fc:	bl	227fc <__assert_fail@plt+0xfd4c>
   1b700:	mov	r6, #0
   1b704:	cmn	r0, #1
   1b708:	bgt	1b508 <__assert_fail@plt+0x8a58>
   1b70c:	b	1b4f8 <__assert_fail@plt+0x8a48>
   1b710:	vmov.f64	d16, #112	; 0x3f800000  1.0
   1b714:	vmov	r2, r3, d16
   1b718:	ldr	r4, [sp, #20]
   1b71c:	mov	r0, r7
   1b720:	mov	r1, r6
   1b724:	bl	1b808 <__assert_fail@plt+0x8d58>
   1b728:	ldr	r8, [r8, #16]
   1b72c:	cmp	r8, #0
   1b730:	bne	1ad64 <__assert_fail@plt+0x82b4>
   1b734:	b	1b798 <__assert_fail@plt+0x8ce8>
   1b738:	ldr	r1, [r8, #8]
   1b73c:	cmp	r0, #40	; 0x28
   1b740:	bne	1b754 <__assert_fail@plt+0x8ca4>
   1b744:	movw	r2, #61460	; 0xf014
   1b748:	mov	r0, r7
   1b74c:	movt	r2, #4
   1b750:	b	1ad54 <__assert_fail@plt+0x82a4>
   1b754:	movw	r2, #406	; 0x196
   1b758:	mov	r0, r7
   1b75c:	movt	r2, #5
   1b760:	bl	1b808 <__assert_fail@plt+0x8d58>
   1b764:	ldr	r5, [r6]
   1b768:	mov	r0, #0
   1b76c:	mov	r1, r4
   1b770:	bl	19ee0 <__assert_fail@plt+0x7430>
   1b774:	movw	r2, #12871	; 0x3247
   1b778:	mov	r3, r0
   1b77c:	mov	r0, #0
   1b780:	mov	r1, r5
   1b784:	movt	r2, #5
   1b788:	bl	1269c <error@plt>
   1b78c:	ldr	r8, [r8, #16]
   1b790:	cmp	r8, #0
   1b794:	bne	1ad64 <__assert_fail@plt+0x82b4>
   1b798:	mov	r0, #1
   1b79c:	sub	sp, fp, #48	; 0x30
   1b7a0:	vpop	{d8-d9}
   1b7a4:	add	sp, sp, #4
   1b7a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7ac:	movw	r0, #58329	; 0xe3d9
   1b7b0:	movw	r1, #62905	; 0xf5b9
   1b7b4:	movw	r3, #63409	; 0xf7b1
   1b7b8:	movw	r2, #1304	; 0x518
   1b7bc:	movt	r0, #4
   1b7c0:	movt	r1, #4
   1b7c4:	movt	r3, #4
   1b7c8:	bl	12ab0 <__assert_fail@plt>
   1b7cc:	movw	r1, #63190	; 0xf6d6
   1b7d0:	mov	r0, #0
   1b7d4:	mov	r2, #5
   1b7d8:	movt	r1, #4
   1b7dc:	bl	12564 <dcgettext@plt>
   1b7e0:	movw	r3, #63509	; 0xf815
   1b7e4:	mov	r2, r0
   1b7e8:	mov	r0, #1
   1b7ec:	mov	r1, #0
   1b7f0:	movt	r3, #4
   1b7f4:	bl	1269c <error@plt>
   1b7f8:	andeq	r0, r0, r0
   1b7fc:	svcvc	0x00f00000	; IMB
   1b800:	andeq	r0, r0, r0
   1b804:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1b808:	sub	sp, sp, #8
   1b80c:	push	{r4, sl, fp, lr}
   1b810:	add	fp, sp, #8
   1b814:	sub	sp, sp, #8
   1b818:	str	r2, [fp, #8]
   1b81c:	add	r2, fp, #8
   1b820:	str	r3, [fp, #12]
   1b824:	mov	r4, r0
   1b828:	str	r2, [sp, #4]
   1b82c:	ldr	r0, [r0, #4]
   1b830:	bl	12930 <vfprintf@plt>
   1b834:	cmn	r0, #1
   1b838:	ble	1b84c <__assert_fail@plt+0x8d9c>
   1b83c:	sub	sp, fp, #8
   1b840:	pop	{r4, sl, fp, lr}
   1b844:	add	sp, sp, #8
   1b848:	bx	lr
   1b84c:	bl	12804 <__errno_location@plt>
   1b850:	ldr	r0, [r0]
   1b854:	ldr	r1, [r4, #8]
   1b858:	bl	190e4 <__assert_fail@plt+0x6634>
   1b85c:	sub	sp, fp, #8
   1b860:	pop	{r4, sl, fp, lr}
   1b864:	add	sp, sp, #8
   1b868:	bx	lr
   1b86c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b870:	add	fp, sp, #28
   1b874:	sub	sp, sp, #148	; 0x94
   1b878:	mov	r4, r2
   1b87c:	mov	r3, r1
   1b880:	cmp	r2, #43	; 0x2b
   1b884:	str	r1, [fp, #-76]	; 0xffffffb4
   1b888:	str	r0, [fp, #-80]	; 0xffffffb0
   1b88c:	bne	1b8b0 <__assert_fail@plt+0x8e00>
   1b890:	movw	r0, #64160	; 0xfaa0
   1b894:	movt	r0, #4
   1b898:	vldr	d16, [r0]
   1b89c:	movw	r0, #9515	; 0x252b
   1b8a0:	movt	r0, #84	; 0x54
   1b8a4:	str	r0, [sp, #56]	; 0x38
   1b8a8:	vstr	d16, [sp, #48]	; 0x30
   1b8ac:	b	1b8e4 <__assert_fail@plt+0x8e34>
   1b8b0:	mov	r5, #0
   1b8b4:	mov	r0, #37	; 0x25
   1b8b8:	strb	r5, [sp, #50]	; 0x32
   1b8bc:	strb	r4, [sp, #49]	; 0x31
   1b8c0:	strb	r0, [sp, #48]	; 0x30
   1b8c4:	sub	r0, r4, #64	; 0x40
   1b8c8:	cmp	r0, #24
   1b8cc:	bhi	1b9e0 <__assert_fail@plt+0x8f30>
   1b8d0:	movw	r2, #1
   1b8d4:	mov	r1, #1
   1b8d8:	movt	r2, #280	; 0x118
   1b8dc:	tst	r2, r1, lsl r0
   1b8e0:	beq	1b9e0 <__assert_fail@plt+0x8f30>
   1b8e4:	movw	r2, #63516	; 0xf81c
   1b8e8:	add	r0, sp, #64	; 0x40
   1b8ec:	mov	r1, #32
   1b8f0:	movt	r2, #4
   1b8f4:	bl	1281c <snprintf@plt>
   1b8f8:	cmp	r0, #32
   1b8fc:	bge	1bae8 <__assert_fail@plt+0x9038>
   1b900:	mov	r8, r0
   1b904:	mov	r5, #1
   1b908:	cmp	r4, #64	; 0x40
   1b90c:	beq	1b9f0 <__assert_fail@plt+0x8f40>
   1b910:	sub	r0, fp, #80	; 0x50
   1b914:	bl	1272c <localtime@plt>
   1b918:	cmp	r0, #0
   1b91c:	beq	1b9f0 <__assert_fail@plt+0x8f40>
   1b920:	add	r6, sp, #48	; 0x30
   1b924:	mov	r4, r0
   1b928:	mov	r0, r6
   1b92c:	bl	127bc <strlen@plt>
   1b930:	mov	r7, r0
   1b934:	add	r0, r0, #2
   1b938:	bl	306e8 <__assert_fail@plt+0x1dc38>
   1b93c:	mov	r1, #95	; 0x5f
   1b940:	mov	r9, r0
   1b944:	add	r2, r7, #1
   1b948:	strb	r1, [r0], #1
   1b94c:	mov	r1, r6
   1b950:	bl	124e0 <memcpy@plt>
   1b954:	mov	r1, #28
   1b958:	mov	r2, r4
   1b95c:	add	r0, r4, #16
   1b960:	sub	r3, fp, #72	; 0x48
   1b964:	movw	r5, #19640	; 0x4cb8
   1b968:	vld1.32	{d16-d17}, [r2], r1
   1b96c:	vld1.32	{d18-d19}, [r0]
   1b970:	add	r0, r3, #16
   1b974:	movt	r5, #6
   1b978:	vld1.32	{d20-d21}, [r2]
   1b97c:	vst1.64	{d16-d17}, [r3], r1
   1b980:	vst1.64	{d18-d19}, [r0]
   1b984:	mov	r1, #11
   1b988:	vst1.32	{d20-d21}, [r3]
   1b98c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b990:	cmp	r0, #10
   1b994:	mvngt	r1, #10
   1b998:	add	r0, r1, r0
   1b99c:	str	r0, [fp, #-72]	; 0xffffffb8
   1b9a0:	ldr	r0, [r5]
   1b9a4:	cmp	r0, #0
   1b9a8:	bne	1b9c0 <__assert_fail@plt+0x8f10>
   1b9ac:	mov	r0, #1
   1b9b0:	str	r0, [r5, #4]
   1b9b4:	mov	r0, #1
   1b9b8:	bl	306e8 <__assert_fail@plt+0x1dc38>
   1b9bc:	str	r0, [r5]
   1b9c0:	ldr	r1, [r5, #4]
   1b9c4:	mov	r2, r9
   1b9c8:	mov	r3, r4
   1b9cc:	bl	12714 <strftime@plt>
   1b9d0:	cmp	r0, #0
   1b9d4:	beq	1bb90 <__assert_fail@plt+0x90e0>
   1b9d8:	ldr	r1, [r5, #4]
   1b9dc:	b	1bb88 <__assert_fail@plt+0x90d8>
   1b9e0:	mov	r8, #0
   1b9e4:	strb	r5, [sp, #64]	; 0x40
   1b9e8:	cmp	r4, #64	; 0x40
   1b9ec:	bne	1b910 <__assert_fail@plt+0x8e60>
   1b9f0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1b9f4:	movw	r6, #17824	; 0x45a0
   1b9f8:	mov	r0, #1
   1b9fc:	mov	r1, #0
   1ba00:	stm	sp, {r0, r1}
   1ba04:	str	r0, [sp, #8]
   1ba08:	movt	r6, #6
   1ba0c:	str	r1, [sp, #12]
   1ba10:	rsbs	r0, r2, #0
   1ba14:	asr	r3, r2, #31
   1ba18:	sbc	r1, r1, r2, asr #31
   1ba1c:	cmp	r3, #0
   1ba20:	movpl	r0, r2
   1ba24:	movpl	r1, r3
   1ba28:	add	r2, r6, #1
   1ba2c:	mov	r3, #0
   1ba30:	bl	253c8 <__assert_fail@plt+0x12918>
   1ba34:	cmp	r0, r6
   1ba38:	bls	1bb08 <__assert_fail@plt+0x9058>
   1ba3c:	mov	r4, r0
   1ba40:	movw	r0, #791	; 0x317
   1ba44:	add	r0, r6, r0
   1ba48:	cmp	r4, r0
   1ba4c:	bcs	1bb28 <__assert_fail@plt+0x9078>
   1ba50:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1ba54:	cmn	r0, #1
   1ba58:	movle	r0, #45	; 0x2d
   1ba5c:	strble	r0, [r4, #-1]!
   1ba60:	cmp	r5, #0
   1ba64:	beq	1badc <__assert_fail@plt+0x902c>
   1ba68:	mov	r0, r4
   1ba6c:	sub	r5, r4, r6
   1ba70:	bl	127bc <strlen@plt>
   1ba74:	add	r0, r0, r5
   1ba78:	movw	r1, #791	; 0x317
   1ba7c:	cmp	r0, r1
   1ba80:	bcs	1bb48 <__assert_fail@plt+0x9098>
   1ba84:	movw	r1, #790	; 0x316
   1ba88:	add	r5, sp, #64	; 0x40
   1ba8c:	sub	r6, r1, r0
   1ba90:	mov	r0, r5
   1ba94:	bl	127bc <strlen@plt>
   1ba98:	cmp	r0, r6
   1ba9c:	bcc	1bac0 <__assert_fail@plt+0x9010>
   1baa0:	movw	r2, #63641	; 0xf899
   1baa4:	mov	r0, #0
   1baa8:	mov	r1, #0
   1baac:	mov	r3, r8
   1bab0:	str	r6, [sp]
   1bab4:	str	r5, [sp, #4]
   1bab8:	movt	r2, #4
   1babc:	bl	1269c <error@plt>
   1bac0:	add	r0, sp, #64	; 0x40
   1bac4:	bl	127bc <strlen@plt>
   1bac8:	cmp	r0, r6
   1bacc:	bcs	1bb68 <__assert_fail@plt+0x90b8>
   1bad0:	add	r1, sp, #64	; 0x40
   1bad4:	mov	r0, r4
   1bad8:	bl	12624 <strcat@plt>
   1badc:	mov	r0, r4
   1bae0:	sub	sp, fp, #28
   1bae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bae8:	movw	r0, #63524	; 0xf824
   1baec:	movw	r1, #62905	; 0xf5b9
   1baf0:	movw	r3, #63550	; 0xf83e
   1baf4:	movw	r2, #665	; 0x299
   1baf8:	movt	r0, #4
   1bafc:	movt	r1, #4
   1bb00:	movt	r3, #4
   1bb04:	bl	12ab0 <__assert_fail@plt>
   1bb08:	movw	r0, #63590	; 0xf866
   1bb0c:	movw	r1, #62905	; 0xf5b9
   1bb10:	movw	r3, #63550	; 0xf83e
   1bb14:	movw	r2, #697	; 0x2b9
   1bb18:	movt	r0, #4
   1bb1c:	movt	r1, #4
   1bb20:	movt	r3, #4
   1bb24:	bl	12ab0 <__assert_fail@plt>
   1bb28:	movw	r0, #63598	; 0xf86e
   1bb2c:	movw	r1, #62905	; 0xf5b9
   1bb30:	movw	r3, #63550	; 0xf83e
   1bb34:	movw	r2, #698	; 0x2ba
   1bb38:	movt	r0, #4
   1bb3c:	movt	r1, #4
   1bb40:	movt	r3, #4
   1bb44:	bl	12ab0 <__assert_fail@plt>
   1bb48:	movw	r0, #63623	; 0xf887
   1bb4c:	movw	r1, #62905	; 0xf5b9
   1bb50:	movw	r3, #63550	; 0xf83e
   1bb54:	movw	r2, #711	; 0x2c7
   1bb58:	movt	r0, #4
   1bb5c:	movt	r1, #4
   1bb60:	movt	r3, #4
   1bb64:	bl	12ab0 <__assert_fail@plt>
   1bb68:	movw	r0, #63687	; 0xf8c7
   1bb6c:	movw	r1, #62905	; 0xf5b9
   1bb70:	movw	r3, #63550	; 0xf83e
   1bb74:	mov	r2, #720	; 0x2d0
   1bb78:	movt	r0, #4
   1bb7c:	movt	r1, #4
   1bb80:	movt	r3, #4
   1bb84:	bl	12ab0 <__assert_fail@plt>
   1bb88:	cmp	r0, r1
   1bb8c:	bcc	1bbc8 <__assert_fail@plt+0x9118>
   1bb90:	mov	r7, r5
   1bb94:	mov	r2, #1
   1bb98:	ldr	r0, [r7], #4
   1bb9c:	mov	r1, r7
   1bba0:	bl	30894 <__assert_fail@plt+0x1dde4>
   1bba4:	str	r0, [r5]
   1bba8:	mov	r2, r9
   1bbac:	mov	r3, r4
   1bbb0:	ldr	r1, [r7]
   1bbb4:	bl	12714 <strftime@plt>
   1bbb8:	ldr	r1, [r7]
   1bbbc:	cmp	r0, #0
   1bbc0:	bne	1bb88 <__assert_fail@plt+0x90d8>
   1bbc4:	b	1bb90 <__assert_fail@plt+0x90e0>
   1bbc8:	str	r0, [sp, #20]
   1bbcc:	add	r0, r8, r0
   1bbd0:	str	r8, [sp, #28]
   1bbd4:	add	r4, r0, #1
   1bbd8:	ldr	r0, [r5]
   1bbdc:	mov	r1, r4
   1bbe0:	bl	30730 <__assert_fail@plt+0x1dc80>
   1bbe4:	stm	r5, {r0, r4}
   1bbe8:	mov	r0, r4
   1bbec:	str	r4, [sp, #24]
   1bbf0:	bl	306e8 <__assert_fail@plt+0x1dc38>
   1bbf4:	ldr	r1, [r5, #4]
   1bbf8:	sub	r3, fp, #72	; 0x48
   1bbfc:	mov	r2, r9
   1bc00:	str	r0, [sp, #40]	; 0x28
   1bc04:	str	r9, [sp, #36]	; 0x24
   1bc08:	bl	12714 <strftime@plt>
   1bc0c:	ldr	r0, [r5]
   1bc10:	ldrb	r1, [r0]
   1bc14:	str	r0, [sp, #32]
   1bc18:	cmp	r1, #0
   1bc1c:	beq	1bcec <__assert_fail@plt+0x923c>
   1bc20:	ldr	r2, [sp, #40]	; 0x28
   1bc24:	ldr	r3, [sp, #32]
   1bc28:	mov	r9, #0
   1bc2c:	mov	sl, #0
   1bc30:	mov	r6, #0
   1bc34:	ldrb	r0, [r2]
   1bc38:	add	r8, r2, #1
   1bc3c:	add	r5, r3, #1
   1bc40:	mov	r3, #0
   1bc44:	str	r3, [sp, #44]	; 0x2c
   1bc48:	clz	r2, r0
   1bc4c:	lsr	r2, r2, #5
   1bc50:	tst	r2, #1
   1bc54:	beq	1bc8c <__assert_fail@plt+0x91dc>
   1bc58:	b	1bcec <__assert_fail@plt+0x923c>
   1bc5c:	str	sl, [sp, #44]	; 0x2c
   1bc60:	mov	r9, #1
   1bc64:	mov	r6, #1
   1bc68:	ldrb	r0, [r8, sl]
   1bc6c:	ldrb	r1, [r5, sl]
   1bc70:	add	sl, sl, #1
   1bc74:	clz	r2, r0
   1bc78:	cmp	r1, #0
   1bc7c:	lsr	r2, r2, #5
   1bc80:	beq	1bce0 <__assert_fail@plt+0x9230>
   1bc84:	tst	r2, #1
   1bc88:	bne	1bcec <__assert_fail@plt+0x923c>
   1bc8c:	uxtb	r4, r1
   1bc90:	uxtb	r7, r0
   1bc94:	cmp	r4, r7
   1bc98:	beq	1bc68 <__assert_fail@plt+0x91b8>
   1bc9c:	bl	12768 <__ctype_b_loc@plt>
   1bca0:	ldr	r0, [r0]
   1bca4:	add	r1, r0, r4, lsl #1
   1bca8:	ldrb	r1, [r1, #1]
   1bcac:	tst	r1, #8
   1bcb0:	addne	r0, r0, r7, lsl #1
   1bcb4:	ldrbne	r0, [r0, #1]
   1bcb8:	tstne	r0, #8
   1bcbc:	beq	1bcec <__assert_fail@plt+0x923c>
   1bcc0:	tst	r6, #1
   1bcc4:	beq	1bc5c <__assert_fail@plt+0x91ac>
   1bcc8:	ldr	r0, [sp, #44]	; 0x2c
   1bccc:	sub	r0, sl, r0
   1bcd0:	cmp	r0, r9
   1bcd4:	bne	1bcec <__assert_fail@plt+0x923c>
   1bcd8:	add	r9, r9, #1
   1bcdc:	b	1bc64 <__assert_fail@plt+0x91b4>
   1bce0:	cmp	r9, #2
   1bce4:	cmpeq	r0, #0
   1bce8:	beq	1bd18 <__assert_fail@plt+0x9268>
   1bcec:	ldr	r0, [sp, #36]	; 0x24
   1bcf0:	bl	32910 <__assert_fail@plt+0x1fe60>
   1bcf4:	ldr	r0, [sp, #40]	; 0x28
   1bcf8:	bl	32910 <__assert_fail@plt+0x1fe60>
   1bcfc:	movw	r0, #19640	; 0x4cb8
   1bd00:	movt	r0, #6
   1bd04:	ldr	r0, [r0]
   1bd08:	add	r4, r0, #1
   1bd0c:	mov	r0, r4
   1bd10:	sub	sp, fp, #28
   1bd14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd18:	ldr	r0, [sp, #44]	; 0x2c
   1bd1c:	add	r4, r0, #2
   1bd20:	bl	12768 <__ctype_b_loc@plt>
   1bd24:	ldr	r1, [sp, #32]
   1bd28:	ldr	r0, [r0]
   1bd2c:	ldrb	r2, [r1, r4]!
   1bd30:	add	r0, r0, r2, lsl #1
   1bd34:	ldrb	r0, [r0, #1]
   1bd38:	tst	r0, #8
   1bd3c:	bne	1bcec <__assert_fail@plt+0x923c>
   1bd40:	ldr	r2, [sp, #20]
   1bd44:	ldr	r7, [sp, #28]
   1bd48:	ldr	r3, [sp, #24]
   1bd4c:	sub	r2, r2, r4
   1bd50:	add	r0, r4, r7
   1bd54:	add	r2, r2, #1
   1bd58:	add	r0, r0, r2
   1bd5c:	cmp	r0, r3
   1bd60:	bne	1bd8c <__assert_fail@plt+0x92dc>
   1bd64:	add	r0, r1, r7
   1bd68:	bl	12474 <memmove@plt>
   1bd6c:	ldr	r0, [sp, #32]
   1bd70:	ldr	r1, [sp, #44]	; 0x2c
   1bd74:	mov	r2, r7
   1bd78:	add	r0, r0, r1
   1bd7c:	add	r1, sp, #64	; 0x40
   1bd80:	add	r0, r0, #2
   1bd84:	bl	124e0 <memcpy@plt>
   1bd88:	b	1bcec <__assert_fail@plt+0x923c>
   1bd8c:	movw	r0, #63715	; 0xf8e3
   1bd90:	movw	r1, #62905	; 0xf5b9
   1bd94:	movw	r3, #63766	; 0xf916
   1bd98:	movw	r2, #549	; 0x225
   1bd9c:	movt	r0, #4
   1bda0:	movt	r1, #4
   1bda4:	movt	r3, #4
   1bda8:	bl	12ab0 <__assert_fail@plt>
   1bdac:	push	{r4, r5, fp, lr}
   1bdb0:	add	fp, sp, #8
   1bdb4:	sub	sp, sp, #40	; 0x28
   1bdb8:	str	r1, [fp, #-12]
   1bdbc:	str	r0, [fp, #-16]
   1bdc0:	sub	r0, fp, #16
   1bdc4:	bl	1272c <localtime@plt>
   1bdc8:	cmp	r0, #0
   1bdcc:	beq	1be9c <__assert_fail@plt+0x93ec>
   1bdd0:	ldr	ip, [r0, #24]
   1bdd4:	cmn	ip, #1
   1bdd8:	ble	1bebc <__assert_fail@plt+0x940c>
   1bddc:	cmp	ip, #7
   1bde0:	bge	1bedc <__assert_fail@plt+0x942c>
   1bde4:	ldr	r2, [r0, #16]
   1bde8:	cmn	r2, #1
   1bdec:	ble	1befc <__assert_fail@plt+0x944c>
   1bdf0:	cmp	r2, #12
   1bdf4:	bge	1bf1c <__assert_fail@plt+0x946c>
   1bdf8:	ldr	r3, [r0, #8]
   1bdfc:	cmn	r3, #1
   1be00:	ble	1bf3c <__assert_fail@plt+0x948c>
   1be04:	cmp	r3, #24
   1be08:	bge	1bf5c <__assert_fail@plt+0x94ac>
   1be0c:	ldr	r4, [r0, #4]
   1be10:	cmp	r4, #60	; 0x3c
   1be14:	bge	1bf7c <__assert_fail@plt+0x94cc>
   1be18:	ldr	r1, [r0]
   1be1c:	cmp	r1, #62	; 0x3e
   1be20:	bge	1bf9c <__assert_fail@plt+0x94ec>
   1be24:	ldr	lr, [r0, #12]
   1be28:	ldr	r0, [r0, #20]
   1be2c:	str	r1, [sp, #16]
   1be30:	movw	r1, #64204	; 0xfacc
   1be34:	ldr	r5, [fp, #-12]
   1be38:	str	r4, [sp, #12]
   1be3c:	movw	r4, #18615	; 0x48b7
   1be40:	str	r3, [sp, #8]
   1be44:	movt	r1, #4
   1be48:	movt	r4, #6
   1be4c:	ldr	r1, [r1, r2, lsl #2]
   1be50:	movw	r2, #64018	; 0xfa12
   1be54:	movt	r2, #4
   1be58:	str	r5, [sp, #20]
   1be5c:	str	lr, [sp, #4]
   1be60:	str	r1, [sp]
   1be64:	movw	r1, #1900	; 0x76c
   1be68:	add	r0, r0, r1
   1be6c:	mov	r1, #1024	; 0x400
   1be70:	str	r0, [sp, #24]
   1be74:	movw	r0, #64176	; 0xfab0
   1be78:	movt	r0, #4
   1be7c:	ldr	r3, [r0, ip, lsl #2]
   1be80:	mov	r0, r4
   1be84:	bl	1281c <snprintf@plt>
   1be88:	cmp	r0, #1024	; 0x400
   1be8c:	bge	1bfbc <__assert_fail@plt+0x950c>
   1be90:	mov	r0, r4
   1be94:	sub	sp, fp, #8
   1be98:	pop	{r4, r5, fp, pc}
   1be9c:	ldr	r0, [fp, #-16]
   1bea0:	ldr	r1, [fp, #-12]
   1bea4:	mov	r2, #64	; 0x40
   1bea8:	bl	1b86c <__assert_fail@plt+0x8dbc>
   1beac:	mov	r4, r0
   1beb0:	mov	r0, r4
   1beb4:	sub	sp, fp, #8
   1beb8:	pop	{r4, r5, fp, pc}
   1bebc:	movw	r0, #63842	; 0xf962
   1bec0:	movw	r1, #62905	; 0xf5b9
   1bec4:	movw	r3, #63860	; 0xf974
   1bec8:	movw	r2, #749	; 0x2ed
   1becc:	movt	r0, #4
   1bed0:	movt	r1, #4
   1bed4:	movt	r3, #4
   1bed8:	bl	12ab0 <__assert_fail@plt>
   1bedc:	movw	r0, #63896	; 0xf998
   1bee0:	movw	r1, #62905	; 0xf5b9
   1bee4:	movw	r3, #63860	; 0xf974
   1bee8:	movw	r2, #750	; 0x2ee
   1beec:	movt	r0, #4
   1bef0:	movt	r1, #4
   1bef4:	movt	r3, #4
   1bef8:	bl	12ab0 <__assert_fail@plt>
   1befc:	movw	r0, #63913	; 0xf9a9
   1bf00:	movw	r1, #62905	; 0xf5b9
   1bf04:	movw	r3, #63860	; 0xf974
   1bf08:	movw	r2, #751	; 0x2ef
   1bf0c:	movt	r0, #4
   1bf10:	movt	r1, #4
   1bf14:	movt	r3, #4
   1bf18:	bl	12ab0 <__assert_fail@plt>
   1bf1c:	movw	r0, #63930	; 0xf9ba
   1bf20:	movw	r1, #62905	; 0xf5b9
   1bf24:	movw	r3, #63860	; 0xf974
   1bf28:	mov	r2, #752	; 0x2f0
   1bf2c:	movt	r0, #4
   1bf30:	movt	r1, #4
   1bf34:	movt	r3, #4
   1bf38:	bl	12ab0 <__assert_fail@plt>
   1bf3c:	movw	r0, #63947	; 0xf9cb
   1bf40:	movw	r1, #62905	; 0xf5b9
   1bf44:	movw	r3, #63860	; 0xf974
   1bf48:	movw	r2, #753	; 0x2f1
   1bf4c:	movt	r0, #4
   1bf50:	movt	r1, #4
   1bf54:	movt	r3, #4
   1bf58:	bl	12ab0 <__assert_fail@plt>
   1bf5c:	movw	r0, #63965	; 0xf9dd
   1bf60:	movw	r1, #62905	; 0xf5b9
   1bf64:	movw	r3, #63860	; 0xf974
   1bf68:	movw	r2, #754	; 0x2f2
   1bf6c:	movt	r0, #4
   1bf70:	movt	r1, #4
   1bf74:	movt	r3, #4
   1bf78:	bl	12ab0 <__assert_fail@plt>
   1bf7c:	movw	r0, #63983	; 0xf9ef
   1bf80:	movw	r1, #62905	; 0xf5b9
   1bf84:	movw	r3, #63860	; 0xf974
   1bf88:	movw	r2, #755	; 0x2f3
   1bf8c:	movt	r0, #4
   1bf90:	movt	r1, #4
   1bf94:	movt	r3, #4
   1bf98:	bl	12ab0 <__assert_fail@plt>
   1bf9c:	movw	r0, #64000	; 0xfa00
   1bfa0:	movw	r1, #62905	; 0xf5b9
   1bfa4:	movw	r3, #63860	; 0xf974
   1bfa8:	mov	r2, #756	; 0x2f4
   1bfac:	movt	r0, #4
   1bfb0:	movt	r1, #4
   1bfb4:	movt	r3, #4
   1bfb8:	bl	12ab0 <__assert_fail@plt>
   1bfbc:	movw	r0, #64057	; 0xfa39
   1bfc0:	movw	r1, #62905	; 0xf5b9
   1bfc4:	movw	r3, #63860	; 0xf974
   1bfc8:	movw	r2, #770	; 0x302
   1bfcc:	movt	r0, #4
   1bfd0:	movt	r1, #4
   1bfd4:	movt	r3, #4
   1bfd8:	bl	12ab0 <__assert_fail@plt>
   1bfdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfe0:	add	fp, sp, #28
   1bfe4:	sub	sp, sp, #108	; 0x6c
   1bfe8:	movw	r8, #19648	; 0x4cc0
   1bfec:	mov	r4, r0
   1bff0:	movt	r8, #6
   1bff4:	ldr	r0, [r8, #4]
   1bff8:	cmp	r0, #0
   1bffc:	beq	1c028 <__assert_fail@plt+0x9578>
   1c000:	ldrb	r1, [r8]
   1c004:	cmp	r1, #1
   1c008:	bne	1c024 <__assert_fail@plt+0x9574>
   1c00c:	ldrd	r2, [r8, #16]
   1c010:	ldrd	r6, [r4]
   1c014:	eor	r1, r7, r3
   1c018:	eor	r2, r6, r2
   1c01c:	orrs	r1, r2, r1
   1c020:	beq	1c17c <__assert_fail@plt+0x96cc>
   1c024:	bl	32910 <__assert_fail@plt+0x1fe60>
   1c028:	ldrd	r0, [r4]
   1c02c:	strd	r0, [r8, #16]
   1c030:	ldr	r5, [r8, #8]
   1c034:	cmp	r5, #0
   1c038:	beq	1c06c <__assert_fail@plt+0x95bc>
   1c03c:	ldrb	r0, [r8, #1]
   1c040:	cmp	r0, #0
   1c044:	bne	1c06c <__assert_fail@plt+0x95bc>
   1c048:	ldr	r6, [r5, #28]
   1c04c:	mov	r0, r5
   1c050:	bl	360cc <__assert_fail@plt+0x2361c>
   1c054:	cmp	r6, #0
   1c058:	mov	r5, r6
   1c05c:	bne	1c048 <__assert_fail@plt+0x9598>
   1c060:	mov	r0, #0
   1c064:	str	r0, [r8, #8]
   1c068:	b	1c074 <__assert_fail@plt+0x95c4>
   1c06c:	cmp	r5, #0
   1c070:	bne	1c094 <__assert_fail@plt+0x95e4>
   1c074:	mov	r0, #1
   1c078:	mov	r6, #1
   1c07c:	bl	353e4 <__assert_fail@plt+0x22934>
   1c080:	mov	r5, r0
   1c084:	cmp	r0, #0
   1c088:	str	r0, [r8, #8]
   1c08c:	strb	r6, [r8, #1]
   1c090:	beq	1c184 <__assert_fail@plt+0x96d4>
   1c094:	movw	r6, #64341	; 0xfb55
   1c098:	movw	sl, #20084	; 0x4e74
   1c09c:	mov	r7, #0
   1c0a0:	mov	r9, sp
   1c0a4:	movt	r6, #4
   1c0a8:	movt	sl, #6
   1c0ac:	b	1c0d4 <__assert_fail@plt+0x9624>
   1c0b0:	ldrd	r0, [r4]
   1c0b4:	ldrd	r2, [r8]
   1c0b8:	eor	r1, r3, r1
   1c0bc:	eor	r0, r2, r0
   1c0c0:	orrs	r0, r0, r1
   1c0c4:	moveq	r7, r5
   1c0c8:	ldr	r5, [r5, #28]
   1c0cc:	cmp	r5, #0
   1c0d0:	beq	1c12c <__assert_fail@plt+0x967c>
   1c0d4:	ldr	r0, [r5, #12]
   1c0d8:	mov	r1, r6
   1c0dc:	bl	123fc <strcmp@plt>
   1c0e0:	cmp	r0, #0
   1c0e4:	beq	1c0c8 <__assert_fail@plt+0x9618>
   1c0e8:	mov	r8, r5
   1c0ec:	ldr	r0, [r8, #16]!
   1c0f0:	ldr	r1, [r8, #4]
   1c0f4:	and	r0, r0, r1
   1c0f8:	cmn	r0, #1
   1c0fc:	bne	1c0b0 <__assert_fail@plt+0x9600>
   1c100:	mov	r0, r9
   1c104:	bl	189fc <__assert_fail@plt+0x5f4c>
   1c108:	ldr	r0, [r5, #4]
   1c10c:	ldr	r2, [sl, #52]	; 0x34
   1c110:	mov	r1, r9
   1c114:	blx	r2
   1c118:	cmp	r0, #0
   1c11c:	bne	1c0c8 <__assert_fail@plt+0x9618>
   1c120:	ldm	sp, {r0, r1}
   1c124:	strd	r0, [r8]
   1c128:	b	1c0b0 <__assert_fail@plt+0x9600>
   1c12c:	cmp	r7, #0
   1c130:	beq	1c150 <__assert_fail@plt+0x96a0>
   1c134:	ldr	r0, [r7, #12]
   1c138:	bl	30bec <__assert_fail@plt+0x1e13c>
   1c13c:	movw	r4, #19648	; 0x4cc0
   1c140:	mov	r1, #1
   1c144:	movt	r4, #6
   1c148:	strb	r1, [r4]
   1c14c:	b	1c178 <__assert_fail@plt+0x96c8>
   1c150:	movw	r4, #19648	; 0x4cc0
   1c154:	movw	r1, #59084	; 0xe6cc
   1c158:	mov	r0, #0
   1c15c:	mov	r2, #5
   1c160:	movt	r4, #6
   1c164:	movt	r1, #4
   1c168:	strb	r0, [r4]
   1c16c:	mov	r0, #0
   1c170:	bl	12564 <dcgettext@plt>
   1c174:	bl	30bec <__assert_fail@plt+0x1e13c>
   1c178:	str	r0, [r4, #4]
   1c17c:	sub	sp, fp, #28
   1c180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c184:	movw	r1, #64304	; 0xfb30
   1c188:	mov	r0, #0
   1c18c:	mov	r2, #5
   1c190:	movt	r1, #4
   1c194:	bl	12564 <dcgettext@plt>
   1c198:	mov	r2, r0
   1c19c:	mov	r0, #1
   1c1a0:	mov	r1, #0
   1c1a4:	bl	1269c <error@plt>
   1c1a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c1ac:	add	fp, sp, #24
   1c1b0:	mov	r5, r0
   1c1b4:	movw	r0, #64300	; 0xfb2c
   1c1b8:	movt	r0, #4
   1c1bc:	mov	r1, r5
   1c1c0:	bl	123fc <strcmp@plt>
   1c1c4:	mov	r4, #1
   1c1c8:	cmp	r0, #0
   1c1cc:	beq	1c228 <__assert_fail@plt+0x9778>
   1c1d0:	movw	r7, #19648	; 0x4cc0
   1c1d4:	movt	r7, #6
   1c1d8:	ldr	r6, [r7, #8]
   1c1dc:	cmp	r6, #0
   1c1e0:	bne	1c204 <__assert_fail@plt+0x9754>
   1c1e4:	mov	r0, #0
   1c1e8:	mov	r8, #0
   1c1ec:	bl	353e4 <__assert_fail@plt+0x22934>
   1c1f0:	mov	r6, r0
   1c1f4:	cmp	r0, #0
   1c1f8:	str	r0, [r7, #8]
   1c1fc:	strb	r8, [r7, #1]
   1c200:	beq	1c228 <__assert_fail@plt+0x9778>
   1c204:	ldr	r1, [r6, #12]
   1c208:	mov	r0, r5
   1c20c:	bl	123fc <strcmp@plt>
   1c210:	cmp	r0, #0
   1c214:	beq	1c228 <__assert_fail@plt+0x9778>
   1c218:	ldr	r6, [r6, #28]
   1c21c:	cmp	r6, #0
   1c220:	bne	1c204 <__assert_fail@plt+0x9754>
   1c224:	mov	r4, #0
   1c228:	mov	r0, r4
   1c22c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c230:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c234:	add	fp, sp, #28
   1c238:	sub	sp, sp, #116	; 0x74
   1c23c:	mov	r4, r0
   1c240:	mov	r7, #0
   1c244:	mov	r0, #0
   1c248:	str	r7, [sp, #4]
   1c24c:	bl	353e4 <__assert_fail@plt+0x22934>
   1c250:	cmp	r0, #0
   1c254:	beq	1c378 <__assert_fail@plt+0x98c8>
   1c258:	str	r4, [sp]
   1c25c:	mov	r8, r0
   1c260:	mov	r9, #0
   1c264:	add	sl, sp, #4
   1c268:	mov	r4, #0
   1c26c:	mov	r5, r0
   1c270:	b	1c28c <__assert_fail@plt+0x97dc>
   1c274:	mov	r0, r7
   1c278:	bl	32910 <__assert_fail@plt+0x1fe60>
   1c27c:	mov	r7, #0
   1c280:	ldr	r5, [r5, #28]
   1c284:	cmp	r5, #0
   1c288:	beq	1c348 <__assert_fail@plt+0x9898>
   1c28c:	add	r6, r9, #1
   1c290:	mov	r0, r4
   1c294:	mov	r2, sl
   1c298:	mov	r7, r4
   1c29c:	lsl	r1, r6, #3
   1c2a0:	bl	2171c <__assert_fail@plt+0xec6c>
   1c2a4:	mov	r4, r0
   1c2a8:	cmp	r0, #0
   1c2ac:	beq	1c274 <__assert_fail@plt+0x97c4>
   1c2b0:	mov	r7, r5
   1c2b4:	ldr	r0, [r7, #16]!
   1c2b8:	ldr	r1, [r7, #4]
   1c2bc:	and	r0, r0, r1
   1c2c0:	cmn	r0, #1
   1c2c4:	beq	1c2f0 <__assert_fail@plt+0x9840>
   1c2c8:	ldrd	r0, [r7]
   1c2cc:	mov	r2, r4
   1c2d0:	mov	r7, r4
   1c2d4:	str	r0, [r2, r9, lsl #3]!
   1c2d8:	mov	r9, r6
   1c2dc:	str	r1, [r2, #4]
   1c2e0:	ldr	r5, [r5, #28]
   1c2e4:	cmp	r5, #0
   1c2e8:	bne	1c28c <__assert_fail@plt+0x97dc>
   1c2ec:	b	1c348 <__assert_fail@plt+0x9898>
   1c2f0:	add	sl, sp, #8
   1c2f4:	mov	r0, sl
   1c2f8:	bl	189fc <__assert_fail@plt+0x5f4c>
   1c2fc:	movw	r1, #20084	; 0x4e74
   1c300:	ldr	r0, [r5, #4]
   1c304:	movt	r1, #6
   1c308:	ldr	r2, [r1, #52]	; 0x34
   1c30c:	mov	r1, sl
   1c310:	blx	r2
   1c314:	cmp	r0, #0
   1c318:	beq	1c334 <__assert_fail@plt+0x9884>
   1c31c:	mov	r7, r4
   1c320:	add	sl, sp, #4
   1c324:	ldr	r5, [r5, #28]
   1c328:	cmp	r5, #0
   1c32c:	bne	1c28c <__assert_fail@plt+0x97dc>
   1c330:	b	1c348 <__assert_fail@plt+0x9898>
   1c334:	ldr	r0, [sp, #8]
   1c338:	ldr	r1, [sp, #12]
   1c33c:	add	sl, sp, #4
   1c340:	strd	r0, [r7]
   1c344:	b	1c2c8 <__assert_fail@plt+0x9818>
   1c348:	cmp	r8, #0
   1c34c:	beq	1c368 <__assert_fail@plt+0x98b8>
   1c350:	ldr	r4, [r8, #28]
   1c354:	mov	r0, r8
   1c358:	bl	360cc <__assert_fail@plt+0x2361c>
   1c35c:	cmp	r4, #0
   1c360:	mov	r8, r4
   1c364:	bne	1c350 <__assert_fail@plt+0x98a0>
   1c368:	cmp	r7, #0
   1c36c:	beq	1c384 <__assert_fail@plt+0x98d4>
   1c370:	ldr	r0, [sp]
   1c374:	str	r9, [r0]
   1c378:	mov	r0, r7
   1c37c:	sub	sp, fp, #28
   1c380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c384:	mov	r7, #0
   1c388:	mov	r0, r7
   1c38c:	sub	sp, fp, #28
   1c390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c394:	andeq	r0, r0, r0
   1c398:	push	{fp, lr}
   1c39c:	mov	fp, sp
   1c3a0:	cmp	r0, #0
   1c3a4:	beq	1c418 <__assert_fail@plt+0x9968>
   1c3a8:	movw	r2, #16144	; 0x3f10
   1c3ac:	movw	ip, #19516	; 0x4c3c
   1c3b0:	mov	r1, #0
   1c3b4:	movt	r2, #1
   1c3b8:	movt	ip, #1
   1c3bc:	ldr	r3, [r0]
   1c3c0:	cmp	r3, r2
   1c3c4:	beq	1c3e8 <__assert_fail@plt+0x9938>
   1c3c8:	cmp	r3, ip
   1c3cc:	orreq	r1, r1, #2
   1c3d0:	ldr	r0, [r0, #152]	; 0x98
   1c3d4:	cmp	r0, #0
   1c3d8:	beq	1c3f8 <__assert_fail@plt+0x9948>
   1c3dc:	ldr	r3, [r0]
   1c3e0:	cmp	r3, r2
   1c3e4:	bne	1c3c8 <__assert_fail@plt+0x9918>
   1c3e8:	orr	r1, r1, #1
   1c3ec:	ldr	r0, [r0, #152]	; 0x98
   1c3f0:	cmp	r0, #0
   1c3f4:	bne	1c3dc <__assert_fail@plt+0x992c>
   1c3f8:	and	r0, r1, #3
   1c3fc:	cmp	r0, #3
   1c400:	popne	{fp, pc}
   1c404:	movw	r0, #20084	; 0x4e74
   1c408:	movt	r0, #6
   1c40c:	ldrb	r0, [r0, #1]
   1c410:	cmp	r0, #0
   1c414:	beq	1c41c <__assert_fail@plt+0x996c>
   1c418:	pop	{fp, pc}
   1c41c:	movw	r1, #64348	; 0xfb5c
   1c420:	mov	r0, #0
   1c424:	mov	r2, #5
   1c428:	movt	r1, #4
   1c42c:	bl	12564 <dcgettext@plt>
   1c430:	mov	r2, r0
   1c434:	mov	r0, #1
   1c438:	mov	r1, #0
   1c43c:	bl	1269c <error@plt>
   1c440:	movw	r1, #20084	; 0x4e74
   1c444:	cmp	r0, #0
   1c448:	movt	r1, #6
   1c44c:	beq	1c478 <__assert_fail@plt+0x99c8>
   1c450:	cmp	r0, #2
   1c454:	beq	1c494 <__assert_fail@plt+0x99e4>
   1c458:	cmp	r0, #1
   1c45c:	bne	1c4b4 <__assert_fail@plt+0x9a04>
   1c460:	movw	r2, #50384	; 0xc4d0
   1c464:	movt	r2, #1
   1c468:	str	r2, [r1, #64]	; 0x40
   1c46c:	movw	r2, #37432	; 0x9238
   1c470:	movt	r2, #1
   1c474:	b	1c4a8 <__assert_fail@plt+0x99f8>
   1c478:	movw	r2, #50524	; 0xc55c
   1c47c:	movt	r2, #1
   1c480:	str	r2, [r1, #64]	; 0x40
   1c484:	movw	r2, #37676	; 0x932c
   1c488:	movt	r2, #1
   1c48c:	str	r2, [r1, #52]	; 0x34
   1c490:	b	1c4b4 <__assert_fail@plt+0x9a04>
   1c494:	movw	r2, #50528	; 0xc560
   1c498:	movt	r2, #1
   1c49c:	str	r2, [r1, #64]	; 0x40
   1c4a0:	movw	r2, #37172	; 0x9134
   1c4a4:	movt	r2, #1
   1c4a8:	str	r2, [r1, #52]	; 0x34
   1c4ac:	mov	r2, #1
   1c4b0:	strb	r2, [r1, #12]
   1c4b4:	str	r0, [r1, #48]	; 0x30
   1c4b8:	ldrb	r0, [r1, #44]	; 0x2c
   1c4bc:	tst	r0, #2
   1c4c0:	movwne	r0, #37780	; 0x9394
   1c4c4:	movtne	r0, #1
   1c4c8:	strne	r0, [r1, #52]	; 0x34
   1c4cc:	bx	lr
   1c4d0:	push	{r4, r5, r6, r7, fp, lr}
   1c4d4:	add	fp, sp, #16
   1c4d8:	mov	r4, r2
   1c4dc:	mov	r5, r1
   1c4e0:	mov	r6, r0
   1c4e4:	bl	2f66c <__assert_fail@plt+0x1cbbc>
   1c4e8:	cmp	r0, #0
   1c4ec:	beq	1c530 <__assert_fail@plt+0x9a80>
   1c4f0:	mov	r7, r0
   1c4f4:	bl	12804 <__errno_location@plt>
   1c4f8:	ldr	r0, [r0]
   1c4fc:	cmp	r0, #20
   1c500:	cmpne	r0, #2
   1c504:	bne	1c534 <__assert_fail@plt+0x9a84>
   1c508:	movw	r0, #20084	; 0x4e74
   1c50c:	movt	r0, #6
   1c510:	ldrb	r0, [r0, #44]	; 0x2c
   1c514:	tst	r0, #2
   1c518:	bne	1c53c <__assert_fail@plt+0x9a8c>
   1c51c:	mov	r0, r6
   1c520:	mov	r1, r5
   1c524:	mov	r2, r4
   1c528:	pop	{r4, r5, r6, r7, fp, lr}
   1c52c:	b	2f8bc <__assert_fail@plt+0x1ce0c>
   1c530:	mov	r7, #0
   1c534:	mov	r0, r7
   1c538:	pop	{r4, r5, r6, r7, fp, pc}
   1c53c:	movw	r0, #17744	; 0x4550
   1c540:	movw	r1, #64527	; 0xfc0f
   1c544:	mov	r2, r5
   1c548:	movt	r0, #6
   1c54c:	movt	r1, #4
   1c550:	ldr	r0, [r0]
   1c554:	bl	127f8 <fprintf@plt>
   1c558:	b	1c51c <__assert_fail@plt+0x9a6c>
   1c55c:	b	2f8bc <__assert_fail@plt+0x1ce0c>
   1c560:	push	{r4, r5, r6, r7, fp, lr}
   1c564:	add	fp, sp, #16
   1c568:	mov	r6, r0
   1c56c:	movw	r0, #20040	; 0x4e48
   1c570:	mov	r4, r2
   1c574:	mov	r5, r1
   1c578:	movt	r0, #6
   1c57c:	ldr	r0, [r0]
   1c580:	cmp	r0, #0
   1c584:	beq	1c59c <__assert_fail@plt+0x9aec>
   1c588:	mov	r0, r6
   1c58c:	mov	r1, r5
   1c590:	mov	r2, r4
   1c594:	pop	{r4, r5, r6, r7, fp, lr}
   1c598:	b	2f8bc <__assert_fail@plt+0x1ce0c>
   1c59c:	mov	r0, r6
   1c5a0:	mov	r1, r5
   1c5a4:	mov	r2, r4
   1c5a8:	bl	2f66c <__assert_fail@plt+0x1cbbc>
   1c5ac:	cmp	r0, #0
   1c5b0:	beq	1c600 <__assert_fail@plt+0x9b50>
   1c5b4:	mov	r7, r0
   1c5b8:	bl	12804 <__errno_location@plt>
   1c5bc:	ldr	r0, [r0]
   1c5c0:	cmp	r0, #20
   1c5c4:	cmpne	r0, #2
   1c5c8:	bne	1c604 <__assert_fail@plt+0x9b54>
   1c5cc:	movw	r0, #20084	; 0x4e74
   1c5d0:	movt	r0, #6
   1c5d4:	ldrb	r0, [r0, #44]	; 0x2c
   1c5d8:	tst	r0, #2
   1c5dc:	beq	1c588 <__assert_fail@plt+0x9ad8>
   1c5e0:	movw	r0, #17744	; 0x4550
   1c5e4:	movw	r1, #64527	; 0xfc0f
   1c5e8:	mov	r2, r5
   1c5ec:	movt	r0, #6
   1c5f0:	movt	r1, #4
   1c5f4:	ldr	r0, [r0]
   1c5f8:	bl	127f8 <fprintf@plt>
   1c5fc:	b	1c588 <__assert_fail@plt+0x9ad8>
   1c600:	mov	r7, #0
   1c604:	mov	r0, r7
   1c608:	pop	{r4, r5, r6, r7, fp, pc}
   1c60c:	movw	r0, #19672	; 0x4cd8
   1c610:	mov	r1, #0
   1c614:	movt	r0, #6
   1c618:	str	r1, [r0]
   1c61c:	bx	lr
   1c620:	bx	lr
   1c624:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c628:	add	fp, sp, #24
   1c62c:	sub	sp, sp, #8
   1c630:	mov	r4, r0
   1c634:	movw	r0, #64520	; 0xfc08
   1c638:	mov	r2, #6
   1c63c:	movt	r0, #4
   1c640:	mov	r1, r4
   1c644:	bl	12a50 <strncmp@plt>
   1c648:	cmp	r0, #0
   1c64c:	bne	1c688 <__assert_fail@plt+0x9bd8>
   1c650:	mov	r0, r4
   1c654:	bl	127bc <strlen@plt>
   1c658:	cmp	r0, #8
   1c65c:	bne	1c688 <__assert_fail@plt+0x9bd8>
   1c660:	movw	r0, #19672	; 0x4cd8
   1c664:	movw	r8, #3180	; 0xc6c
   1c668:	movt	r0, #6
   1c66c:	movt	r8, #5
   1c670:	ldr	r1, [r0]
   1c674:	cmp	r1, #0
   1c678:	streq	r4, [r0]
   1c67c:	mov	r0, r8
   1c680:	sub	sp, fp, #24
   1c684:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c688:	mov	r6, r4
   1c68c:	ldrb	r0, [r6], #1
   1c690:	cmp	r0, #45	; 0x2d
   1c694:	movw	r0, #58169	; 0xe339
   1c698:	movne	r6, r4
   1c69c:	movt	r0, #4
   1c6a0:	mov	r1, r6
   1c6a4:	bl	123fc <strcmp@plt>
   1c6a8:	cmp	r0, #0
   1c6ac:	beq	1c704 <__assert_fail@plt+0x9c54>
   1c6b0:	movw	r7, #3196	; 0xc7c
   1c6b4:	mov	r8, #0
   1c6b8:	mov	r5, #0
   1c6bc:	movt	r7, #5
   1c6c0:	cmn	r5, #1360	; 0x550
   1c6c4:	beq	1c73c <__assert_fail@plt+0x9c8c>
   1c6c8:	sub	r0, r7, r5
   1c6cc:	mov	r1, r6
   1c6d0:	ldr	r0, [r0, #20]
   1c6d4:	bl	123fc <strcmp@plt>
   1c6d8:	sub	r5, r5, #16
   1c6dc:	cmp	r0, #0
   1c6e0:	bne	1c6c0 <__assert_fail@plt+0x9c10>
   1c6e4:	sub	r8, r7, r5
   1c6e8:	ldr	r0, [r8]
   1c6ec:	cmp	r0, #1
   1c6f0:	bne	1c718 <__assert_fail@plt+0x9c68>
   1c6f4:	mov	r8, #0
   1c6f8:	mov	r0, r8
   1c6fc:	sub	sp, fp, #24
   1c700:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c704:	movw	r8, #3196	; 0xc7c
   1c708:	movt	r8, #5
   1c70c:	ldr	r0, [r8]
   1c710:	cmp	r0, #1
   1c714:	beq	1c6f4 <__assert_fail@plt+0x9c44>
   1c718:	cmp	r0, #2
   1c71c:	beq	1c73c <__assert_fail@plt+0x9c8c>
   1c720:	movw	r6, #19672	; 0x4cd8
   1c724:	cmp	r0, #0
   1c728:	movt	r6, #6
   1c72c:	ldr	r1, [r6]
   1c730:	beq	1c748 <__assert_fail@plt+0x9c98>
   1c734:	cmp	r1, #0
   1c738:	streq	r4, [r6]
   1c73c:	mov	r0, r8
   1c740:	sub	sp, fp, #24
   1c744:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c748:	cmp	r1, #0
   1c74c:	beq	1c73c <__assert_fail@plt+0x9c8c>
   1c750:	movw	r0, #20084	; 0x4e74
   1c754:	movt	r0, #6
   1c758:	ldrb	r1, [r0, #17]
   1c75c:	cmp	r1, #0
   1c760:	bne	1c73c <__assert_fail@plt+0x9c8c>
   1c764:	ldrb	r0, [r0, #16]
   1c768:	cmp	r0, #0
   1c76c:	beq	1c73c <__assert_fail@plt+0x9c8c>
   1c770:	movw	r1, #64604	; 0xfc5c
   1c774:	mov	r0, #0
   1c778:	mov	r2, #5
   1c77c:	movt	r1, #4
   1c780:	bl	12564 <dcgettext@plt>
   1c784:	mov	r2, r0
   1c788:	ldr	r0, [r6]
   1c78c:	mov	r1, #0
   1c790:	mov	r3, r4
   1c794:	stm	sp, {r0, r4}
   1c798:	mov	r0, #0
   1c79c:	bl	1269c <error@plt>
   1c7a0:	mov	r0, r8
   1c7a4:	sub	sp, fp, #24
   1c7a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c7ac:	push	{fp, lr}
   1c7b0:	mov	fp, sp
   1c7b4:	bl	17de4 <__assert_fail@plt+0x5334>
   1c7b8:	mov	r2, #5
   1c7bc:	mov	r1, #0
   1c7c0:	str	r2, [r0, #8]
   1c7c4:	movw	r2, #15904	; 0x3e20
   1c7c8:	str	r1, [r0, #12]
   1c7cc:	movt	r2, #1
   1c7d0:	str	r2, [r0]
   1c7d4:	strh	r1, [r0, #18]
   1c7d8:	mov	r0, #1
   1c7dc:	pop	{fp, pc}
   1c7e0:	push	{r4, r5, fp, lr}
   1c7e4:	add	fp, sp, #8
   1c7e8:	mov	r1, #0
   1c7ec:	mov	r5, #0
   1c7f0:	bl	17f9c <__assert_fail@plt+0x54ec>
   1c7f4:	movw	r1, #19012	; 0x4a44
   1c7f8:	mov	r4, #4
   1c7fc:	movt	r1, #1
   1c800:	strd	r4, [r0, #8]
   1c804:	str	r1, [r0]
   1c808:	strh	r5, [r0, #18]
   1c80c:	mov	r0, #1
   1c810:	pop	{r4, r5, fp, pc}
   1c814:	push	{fp, lr}
   1c818:	mov	fp, sp
   1c81c:	bl	185b4 <__assert_fail@plt+0x5b04>
   1c820:	movw	r1, #257	; 0x101
   1c824:	str	r1, [r0, #16]
   1c828:	add	r1, r0, #40	; 0x28
   1c82c:	movw	r0, #1492	; 0x5d4
   1c830:	movt	r0, #5
   1c834:	bl	1fd2c <__assert_fail@plt+0xd27c>
   1c838:	mov	r0, #1
   1c83c:	pop	{fp, pc}
   1c840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c844:	add	fp, sp, #28
   1c848:	sub	sp, sp, #116	; 0x74
   1c84c:	mov	r6, #0
   1c850:	cmp	r1, #0
   1c854:	beq	1c8f4 <__assert_fail@plt+0x9e44>
   1c858:	ldr	r8, [r2]
   1c85c:	mov	sl, r2
   1c860:	mov	r5, r1
   1c864:	ldr	r4, [r1, r8, lsl #2]
   1c868:	cmp	r4, #0
   1c86c:	beq	1c8f4 <__assert_fail@plt+0x9e44>
   1c870:	mov	r7, r0
   1c874:	mov	r0, r4
   1c878:	bl	127bc <strlen@plt>
   1c87c:	cmp	r0, #8
   1c880:	bne	1c8f4 <__assert_fail@plt+0x9e44>
   1c884:	mov	r0, #116	; 0x74
   1c888:	mov	r1, r4
   1c88c:	mov	r2, #6
   1c890:	strh	r0, [fp, #-32]	; 0xffffffe0
   1c894:	movw	r0, #16993	; 0x4261
   1c898:	movt	r0, #28003	; 0x6d63
   1c89c:	str	r0, [fp, #-36]	; 0xffffffdc
   1c8a0:	movw	r0, #64520	; 0xfc08
   1c8a4:	movt	r0, #4
   1c8a8:	bl	12a50 <strncmp@plt>
   1c8ac:	cmp	r0, #0
   1c8b0:	bne	1cad4 <__assert_fail@plt+0xa024>
   1c8b4:	ldrb	r9, [r4, #6]
   1c8b8:	cmp	r9, #66	; 0x42
   1c8bc:	beq	1c8cc <__assert_fail@plt+0x9e1c>
   1c8c0:	ldrb	r4, [r4, #7]
   1c8c4:	cmp	r4, #66	; 0x42
   1c8c8:	bne	1c900 <__assert_fail@plt+0x9e50>
   1c8cc:	movw	r1, #64973	; 0xfdcd
   1c8d0:	mov	r0, #0
   1c8d4:	mov	r2, #5
   1c8d8:	mov	r6, #0
   1c8dc:	movt	r1, #4
   1c8e0:	bl	12564 <dcgettext@plt>
   1c8e4:	mov	r2, r0
   1c8e8:	mov	r0, #0
   1c8ec:	mov	r1, #0
   1c8f0:	bl	1269c <error@plt>
   1c8f4:	mov	r0, r6
   1c8f8:	sub	sp, fp, #28
   1c8fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c900:	mov	r6, #0
   1c904:	cmp	r9, #116	; 0x74
   1c908:	beq	1c8f4 <__assert_fail@plt+0x9e44>
   1c90c:	sub	r0, fp, #36	; 0x24
   1c910:	mov	r1, r9
   1c914:	bl	127c8 <strchr@plt>
   1c918:	cmp	r0, #0
   1c91c:	beq	1c8f4 <__assert_fail@plt+0x9e44>
   1c920:	sub	r0, fp, #36	; 0x24
   1c924:	mov	r1, r4
   1c928:	bl	127c8 <strchr@plt>
   1c92c:	cmp	r0, #0
   1c930:	beq	1c8f4 <__assert_fail@plt+0x9e44>
   1c934:	add	r0, r8, #1
   1c938:	ldr	r1, [r5, r0, lsl #2]
   1c93c:	cmp	r1, #0
   1c940:	beq	1caf4 <__assert_fail@plt+0xa044>
   1c944:	str	r0, [sl]
   1c948:	mov	r0, r7
   1c94c:	bl	18554 <__assert_fail@plt+0x5aa4>
   1c950:	mov	r6, r0
   1c954:	cmp	r9, #97	; 0x61
   1c958:	beq	1c97c <__assert_fail@plt+0x9ecc>
   1c95c:	cmp	r9, #109	; 0x6d
   1c960:	beq	1c974 <__assert_fail@plt+0x9ec4>
   1c964:	cmp	r9, #99	; 0x63
   1c968:	bne	1cb3c <__assert_fail@plt+0xa08c>
   1c96c:	mov	r0, #2
   1c970:	b	1c980 <__assert_fail@plt+0x9ed0>
   1c974:	mov	r0, #3
   1c978:	b	1c980 <__assert_fail@plt+0x9ed0>
   1c97c:	mov	r0, #0
   1c980:	movw	r8, #20084	; 0x4e74
   1c984:	cmp	r4, #116	; 0x74
   1c988:	str	r0, [r6, #40]	; 0x28
   1c98c:	movt	r8, #6
   1c990:	bne	1c9d8 <__assert_fail@plt+0x9f28>
   1c994:	ldr	r0, [sl]
   1c998:	add	r2, r8, #20
   1c99c:	ldr	r1, [r5, r0, lsl #2]
   1c9a0:	add	r0, r6, #48	; 0x30
   1c9a4:	bl	2c304 <__assert_fail@plt+0x19854>
   1c9a8:	cmp	r0, #0
   1c9ac:	bne	1ca38 <__assert_fail@plt+0x9f88>
   1c9b0:	movw	r1, #65095	; 0xfe47
   1c9b4:	mov	r0, #0
   1c9b8:	mov	r2, #5
   1c9bc:	movt	r1, #4
   1c9c0:	bl	12564 <dcgettext@plt>
   1c9c4:	mov	r4, r0
   1c9c8:	ldr	r0, [sl]
   1c9cc:	ldr	r1, [r8, #72]	; 0x48
   1c9d0:	ldr	r2, [r5, r0, lsl #2]
   1c9d4:	b	1cb20 <__assert_fail@plt+0xa070>
   1c9d8:	mov	r7, sp
   1c9dc:	mov	r0, r7
   1c9e0:	bl	189fc <__assert_fail@plt+0x5f4c>
   1c9e4:	ldr	r0, [sl]
   1c9e8:	ldr	r2, [r8, #52]	; 0x34
   1c9ec:	mov	r1, r7
   1c9f0:	ldr	r0, [r5, r0, lsl #2]
   1c9f4:	blx	r2
   1c9f8:	cmp	r0, #0
   1c9fc:	bne	1cbb0 <__assert_fail@plt+0xa100>
   1ca00:	cmp	r4, #109	; 0x6d
   1ca04:	beq	1ca28 <__assert_fail@plt+0x9f78>
   1ca08:	cmp	r4, #99	; 0x63
   1ca0c:	beq	1ca20 <__assert_fail@plt+0x9f70>
   1ca10:	cmp	r4, #97	; 0x61
   1ca14:	bne	1cbc4 <__assert_fail@plt+0xa114>
   1ca18:	add	r0, r7, #72	; 0x48
   1ca1c:	b	1ca2c <__assert_fail@plt+0x9f7c>
   1ca20:	add	r0, r7, #88	; 0x58
   1ca24:	b	1ca2c <__assert_fail@plt+0x9f7c>
   1ca28:	add	r0, r7, #80	; 0x50
   1ca2c:	ldm	r0, {r0, r3}
   1ca30:	add	r1, r6, #48	; 0x30
   1ca34:	stm	r1, {r0, r3}
   1ca38:	mov	r0, #0
   1ca3c:	movw	r2, #10111	; 0x277f
   1ca40:	vldr	s0, [pc, #452]	; 1cc0c <__assert_fail@plt+0xa15c>
   1ca44:	str	r0, [r6, #44]	; 0x2c
   1ca48:	movt	r2, #133	; 0x85
   1ca4c:	ldr	r0, [r6, #48]	; 0x30
   1ca50:	ldr	r1, [r8, #28]
   1ca54:	sub	r0, r1, r0
   1ca58:	add	r1, pc, #420	; 0x1a4
   1ca5c:	cmp	r0, r2
   1ca60:	addgt	r1, r1, #4
   1ca64:	vldr	s2, [r1]
   1ca68:	movw	r1, #20864	; 0x5180
   1ca6c:	movt	r1, #1
   1ca70:	cmp	r0, r1
   1ca74:	vselge.f32	s0, s2, s0
   1ca78:	vstr	s0, [r6, #28]
   1ca7c:	ldr	r0, [sl]
   1ca80:	add	r0, r0, #1
   1ca84:	str	r0, [sl]
   1ca88:	ldr	r0, [r6]
   1ca8c:	cmp	r0, #0
   1ca90:	beq	1cb70 <__assert_fail@plt+0xa0c0>
   1ca94:	movw	r1, #18312	; 0x4788
   1ca98:	movt	r1, #1
   1ca9c:	cmp	r0, r1
   1caa0:	bne	1cb90 <__assert_fail@plt+0xa0e0>
   1caa4:	ldrb	r0, [r6, #18]
   1caa8:	mov	r6, #1
   1caac:	cmp	r0, #0
   1cab0:	bne	1c8f4 <__assert_fail@plt+0x9e44>
   1cab4:	movw	r0, #65217	; 0xfec1
   1cab8:	movw	r1, #64899	; 0xfd83
   1cabc:	movw	r3, #64908	; 0xfd8c
   1cac0:	movw	r2, #1649	; 0x671
   1cac4:	movt	r0, #4
   1cac8:	movt	r1, #4
   1cacc:	movt	r3, #4
   1cad0:	bl	12ab0 <__assert_fail@plt>
   1cad4:	movw	r0, #64856	; 0xfd58
   1cad8:	movw	r1, #64899	; 0xfd83
   1cadc:	movw	r3, #64908	; 0xfd8c
   1cae0:	movw	r2, #1555	; 0x613
   1cae4:	movt	r0, #4
   1cae8:	movt	r1, #4
   1caec:	movt	r3, #4
   1caf0:	bl	12ab0 <__assert_fail@plt>
   1caf4:	movw	r1, #65042	; 0xfe12
   1caf8:	mov	r0, #0
   1cafc:	mov	r2, #5
   1cb00:	movt	r1, #4
   1cb04:	bl	12564 <dcgettext@plt>
   1cb08:	mov	r4, r0
   1cb0c:	ldr	r0, [sl]
   1cb10:	ldr	r2, [r5, r0, lsl #2]
   1cb14:	movw	r0, #20084	; 0x4e74
   1cb18:	movt	r0, #6
   1cb1c:	ldr	r1, [r0, #72]	; 0x48
   1cb20:	mov	r0, #0
   1cb24:	bl	2efe4 <__assert_fail@plt+0x1c534>
   1cb28:	mov	r3, r0
   1cb2c:	mov	r0, #1
   1cb30:	mov	r1, #0
   1cb34:	mov	r2, r4
   1cb38:	bl	1269c <error@plt>
   1cb3c:	sub	r0, fp, #36	; 0x24
   1cb40:	mov	r1, r9
   1cb44:	bl	127c8 <strchr@plt>
   1cb48:	cmp	r0, #0
   1cb4c:	bne	1cbe4 <__assert_fail@plt+0xa134>
   1cb50:	movw	r0, #65072	; 0xfe30
   1cb54:	movw	r1, #64899	; 0xfd83
   1cb58:	movw	r3, #64908	; 0xfd8c
   1cb5c:	movw	r2, #1611	; 0x64b
   1cb60:	movt	r0, #4
   1cb64:	movt	r1, #4
   1cb68:	movt	r3, #4
   1cb6c:	bl	12ab0 <__assert_fail@plt>
   1cb70:	movw	r0, #65153	; 0xfe81
   1cb74:	movw	r1, #64899	; 0xfd83
   1cb78:	movw	r3, #64908	; 0xfd8c
   1cb7c:	movw	r2, #1647	; 0x66f
   1cb80:	movt	r0, #4
   1cb84:	movt	r1, #4
   1cb88:	movt	r3, #4
   1cb8c:	bl	12ab0 <__assert_fail@plt>
   1cb90:	movw	r0, #65181	; 0xfe9d
   1cb94:	movw	r1, #64899	; 0xfd83
   1cb98:	movw	r3, #64908	; 0xfd8c
   1cb9c:	mov	r2, #1648	; 0x670
   1cba0:	movt	r0, #4
   1cba4:	movt	r1, #4
   1cba8:	movt	r3, #4
   1cbac:	bl	12ab0 <__assert_fail@plt>
   1cbb0:	bl	12804 <__errno_location@plt>
   1cbb4:	ldr	r1, [sl]
   1cbb8:	ldr	r0, [r0]
   1cbbc:	ldr	r1, [r5, r1, lsl #2]
   1cbc0:	bl	19f68 <__assert_fail@plt+0x74b8>
   1cbc4:	movw	r0, #58329	; 0xe3d9
   1cbc8:	movw	r1, #64899	; 0xfd83
   1cbcc:	movw	r3, #65237	; 0xfed5
   1cbd0:	movw	r2, #498	; 0x1f2
   1cbd4:	movt	r0, #4
   1cbd8:	movt	r1, #4
   1cbdc:	movt	r3, #4
   1cbe0:	bl	12ab0 <__assert_fail@plt>
   1cbe4:	movw	r0, #58329	; 0xe3d9
   1cbe8:	movw	r1, #64899	; 0xfd83
   1cbec:	movw	r3, #64908	; 0xfd8c
   1cbf0:	movw	r2, #1612	; 0x64c
   1cbf4:	movt	r0, #4
   1cbf8:	movt	r1, #4
   1cbfc:	movt	r3, #4
   1cc00:	bl	12ab0 <__assert_fail@plt>
   1cc04:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1cc08:			; <UNDEFINED> instruction: 0x3e99999a
   1cc0c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1cc10:	push	{r4, sl, fp, lr}
   1cc14:	add	fp, sp, #8
   1cc18:	mov	r1, #0
   1cc1c:	mov	r4, #0
   1cc20:	bl	17f9c <__assert_fail@plt+0x54ec>
   1cc24:	mov	r2, #2
   1cc28:	mov	r1, #4
   1cc2c:	str	r2, [r0, #8]
   1cc30:	str	r1, [r0, #12]
   1cc34:	movw	r1, #18148	; 0x46e4
   1cc38:	movt	r1, #1
   1cc3c:	str	r1, [r0]
   1cc40:	strh	r4, [r0, #18]
   1cc44:	mov	r0, #1
   1cc48:	pop	{r4, sl, fp, pc}
   1cc4c:	push	{fp, lr}
   1cc50:	mov	fp, sp
   1cc54:	bl	17de4 <__assert_fail@plt+0x5334>
   1cc58:	mov	r2, #3
   1cc5c:	mov	r1, #1
   1cc60:	str	r2, [r0, #8]
   1cc64:	str	r1, [r0, #12]
   1cc68:	movw	r1, #16064	; 0x3ec0
   1cc6c:	movt	r1, #1
   1cc70:	str	r1, [r0]
   1cc74:	mov	r1, #1065353216	; 0x3f800000
   1cc78:	str	r1, [r0, #28]
   1cc7c:	mov	r1, #0
   1cc80:	strh	r1, [r0, #18]
   1cc84:	mov	r0, #1
   1cc88:	pop	{fp, pc}
   1cc8c:	push	{fp, lr}
   1cc90:	mov	fp, sp
   1cc94:	bl	17de4 <__assert_fail@plt+0x5334>
   1cc98:	mov	r1, #3
   1cc9c:	str	r1, [r0, #8]
   1cca0:	str	r1, [r0, #12]
   1cca4:	movw	r1, #15672	; 0x3d38
   1cca8:	movt	r1, #1
   1ccac:	str	r1, [r0]
   1ccb0:	mov	r1, #0
   1ccb4:	strh	r1, [r0, #18]
   1ccb8:	mov	r0, #1
   1ccbc:	pop	{fp, pc}
   1ccc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ccc4:	add	fp, sp, #28
   1ccc8:	sub	sp, sp, #28
   1cccc:	mov	r4, #0
   1ccd0:	cmp	r1, #0
   1ccd4:	beq	1cda0 <__assert_fail@plt+0xa2f0>
   1ccd8:	ldr	r9, [r2]
   1ccdc:	mov	r5, r2
   1cce0:	ldr	r7, [r1, r9, lsl #2]
   1cce4:	cmp	r7, #0
   1cce8:	beq	1cda0 <__assert_fail@plt+0xa2f0>
   1ccec:	movw	sl, #20084	; 0x4e74
   1ccf0:	movw	r1, #89	; 0x59
   1ccf4:	mov	r8, r0
   1ccf8:	add	r0, r9, #1
   1ccfc:	vldr	d0, [pc, #188]	; 1cdc0 <__assert_fail@plt+0xa310>
   1cd00:	add	r6, sp, #8
   1cd04:	mov	r4, #0
   1cd08:	movt	sl, #6
   1cd0c:	str	r0, [r5]
   1cd10:	movt	r1, #5
   1cd14:	str	r4, [sp, #8]
   1cd18:	ldr	r0, [sl, #28]
   1cd1c:	str	r1, [sp]
   1cd20:	movw	r1, #20864	; 0x5180
   1cd24:	ldr	r3, [sl, #32]
   1cd28:	movt	r1, #1
   1cd2c:	add	r2, r0, r1
   1cd30:	mov	r0, r7
   1cd34:	mov	r1, r6
   1cd38:	bl	1f3e0 <__assert_fail@plt+0xc930>
   1cd3c:	cmp	r0, #0
   1cd40:	beq	1cdac <__assert_fail@plt+0xa2fc>
   1cd44:	mov	r0, r8
   1cd48:	mov	r1, r7
   1cd4c:	bl	18554 <__assert_fail@plt+0x5aa4>
   1cd50:	mov	r1, #8
   1cd54:	movw	r3, #10111	; 0x277f
   1cd58:	vldr	s0, [pc, #112]	; 1cdd0 <__assert_fail@plt+0xa320>
   1cd5c:	mov	r4, #1
   1cd60:	vld1.64	{d16-d17}, [r6], r1
   1cd64:	add	r1, r0, #40	; 0x28
   1cd68:	movt	r3, #133	; 0x85
   1cd6c:	vst1.64	{d16-d17}, [r1]
   1cd70:	ldr	r1, [r6]
   1cd74:	ldr	r2, [sl, #28]
   1cd78:	sub	r1, r2, r1
   1cd7c:	add	r2, pc, #68	; 0x44
   1cd80:	cmp	r1, r3
   1cd84:	addgt	r2, r2, #4
   1cd88:	vldr	s2, [r2]
   1cd8c:	movw	r2, #20864	; 0x5180
   1cd90:	movt	r2, #1
   1cd94:	cmp	r1, r2
   1cd98:	vselge.f32	s0, s2, s0
   1cd9c:	vstr	s0, [r0, #28]
   1cda0:	mov	r0, r4
   1cda4:	sub	sp, fp, #28
   1cda8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cdac:	str	r9, [r5]
   1cdb0:	mov	r0, r4
   1cdb4:	sub	sp, fp, #28
   1cdb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cdbc:	nop	{0}
   1cdc0:	andeq	r0, r0, r0
   1cdc4:	submi	r0, lr, r0
   1cdc8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1cdcc:			; <UNDEFINED> instruction: 0x3e99999a
   1cdd0:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1cdd4:	push	{r4, r5, r6, sl, fp, lr}
   1cdd8:	add	fp, sp, #16
   1cddc:	sub	sp, sp, #104	; 0x68
   1cde0:	mov	r4, r0
   1cde4:	mov	r0, sp
   1cde8:	mov	r6, r2
   1cdec:	mov	r5, r1
   1cdf0:	bl	189fc <__assert_fail@plt+0x5f4c>
   1cdf4:	mov	r0, #0
   1cdf8:	cmp	r5, #0
   1cdfc:	beq	1ce9c <__assert_fail@plt+0xa3ec>
   1ce00:	ldr	r1, [r6]
   1ce04:	ldr	r5, [r5, r1, lsl #2]
   1ce08:	cmp	r5, #0
   1ce0c:	beq	1ce9c <__assert_fail@plt+0xa3ec>
   1ce10:	add	r0, r1, #1
   1ce14:	mov	r1, sp
   1ce18:	str	r0, [r6]
   1ce1c:	movw	r6, #20084	; 0x4e74
   1ce20:	mov	r0, r5
   1ce24:	movt	r6, #6
   1ce28:	ldr	r2, [r6, #52]	; 0x34
   1ce2c:	blx	r2
   1ce30:	cmp	r0, #0
   1ce34:	bne	1cea4 <__assert_fail@plt+0xa3f4>
   1ce38:	mov	r0, r4
   1ce3c:	mov	r1, r5
   1ce40:	bl	18554 <__assert_fail@plt+0x5aa4>
   1ce44:	mov	r1, #0
   1ce48:	add	ip, r0, #44	; 0x2c
   1ce4c:	vldr	s0, [pc, #104]	; 1cebc <__assert_fail@plt+0xa40c>
   1ce50:	str	r1, [r0, #40]	; 0x28
   1ce54:	ldr	r2, [sp, #80]	; 0x50
   1ce58:	ldr	r3, [sp, #84]	; 0x54
   1ce5c:	stm	ip, {r1, r2, r3}
   1ce60:	movw	r3, #10111	; 0x277f
   1ce64:	ldr	r1, [r6, #28]
   1ce68:	ldr	r2, [sp, #80]	; 0x50
   1ce6c:	movt	r3, #133	; 0x85
   1ce70:	sub	r1, r1, r2
   1ce74:	add	r2, pc, #56	; 0x38
   1ce78:	cmp	r1, r3
   1ce7c:	addgt	r2, r2, #4
   1ce80:	vldr	s2, [r2]
   1ce84:	movw	r2, #20864	; 0x5180
   1ce88:	movt	r2, #1
   1ce8c:	cmp	r1, r2
   1ce90:	vselge.f32	s0, s2, s0
   1ce94:	vstr	s0, [r0, #28]
   1ce98:	mov	r0, #1
   1ce9c:	sub	sp, fp, #16
   1cea0:	pop	{r4, r5, r6, sl, fp, pc}
   1cea4:	bl	12804 <__errno_location@plt>
   1cea8:	ldr	r0, [r0]
   1ceac:	mov	r1, r5
   1ceb0:	bl	19f68 <__assert_fail@plt+0x74b8>
   1ceb4:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1ceb8:			; <UNDEFINED> instruction: 0x3e99999a
   1cebc:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1cec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cec4:	add	fp, sp, #28
   1cec8:	sub	sp, sp, #28
   1cecc:	mov	r4, r1
   1ced0:	movw	r1, #287	; 0x11f
   1ced4:	mov	r5, r2
   1ced8:	mov	r6, r0
   1cedc:	mov	r0, #0
   1cee0:	mov	r2, #5
   1cee4:	mov	r8, #0
   1cee8:	movt	r1, #5
   1ceec:	bl	12564 <dcgettext@plt>
   1cef0:	cmp	r4, #0
   1cef4:	beq	1d010 <__assert_fail@plt+0xa560>
   1cef8:	ldr	r9, [r5]
   1cefc:	ldr	r7, [r4, r9, lsl #2]
   1cf00:	cmp	r7, #0
   1cf04:	beq	1d010 <__assert_fail@plt+0xa560>
   1cf08:	movw	sl, #20084	; 0x4e74
   1cf0c:	add	r1, r9, #1
   1cf10:	vldr	d0, [pc, #456]	; 1d0e0 <__assert_fail@plt+0xa630>
   1cf14:	add	r4, sp, #8
   1cf18:	movt	sl, #6
   1cf1c:	str	r1, [r5]
   1cf20:	ldrb	r1, [r7]
   1cf24:	str	r0, [sp]
   1cf28:	movw	r0, #20864	; 0x5180
   1cf2c:	ldr	r2, [sl, #28]
   1cf30:	movt	r0, #1
   1cf34:	ldr	r3, [sl, #32]
   1cf38:	cmp	r1, #45	; 0x2d
   1cf3c:	mov	r1, r4
   1cf40:	add	r0, r2, r0
   1cf44:	subeq	r2, r0, #1
   1cf48:	mov	r0, r7
   1cf4c:	bl	1f3e0 <__assert_fail@plt+0xc930>
   1cf50:	cmp	r0, #0
   1cf54:	beq	1d00c <__assert_fail@plt+0xa55c>
   1cf58:	mov	r0, r6
   1cf5c:	mov	r1, r7
   1cf60:	bl	18554 <__assert_fail@plt+0x5aa4>
   1cf64:	mov	r5, r0
   1cf68:	mov	r0, #8
   1cf6c:	movw	r2, #10111	; 0x277f
   1cf70:	vldr	s0, [pc, #376]	; 1d0f0 <__assert_fail@plt+0xa640>
   1cf74:	movw	r7, #20864	; 0x5180
   1cf78:	mov	r8, #1
   1cf7c:	vld1.64	{d16-d17}, [r4], r0
   1cf80:	add	r0, r5, #40	; 0x28
   1cf84:	movt	r2, #133	; 0x85
   1cf88:	movt	r7, #1
   1cf8c:	vst1.64	{d16-d17}, [r0]
   1cf90:	ldr	r0, [r4]
   1cf94:	ldr	r1, [sl, #28]
   1cf98:	sub	r0, r1, r0
   1cf9c:	add	r1, pc, #324	; 0x144
   1cfa0:	cmp	r0, r2
   1cfa4:	addgt	r1, r1, #4
   1cfa8:	cmp	r0, r7
   1cfac:	vldr	s2, [r1]
   1cfb0:	vselge.f32	s0, s2, s0
   1cfb4:	vstr	s0, [r5, #28]
   1cfb8:	ldrb	r0, [sl, #44]	; 0x2c
   1cfbc:	tst	r0, #1
   1cfc0:	beq	1d010 <__assert_fail@plt+0xa560>
   1cfc4:	movw	sl, #17744	; 0x4550
   1cfc8:	ldr	r2, [r5, #4]
   1cfcc:	movw	r1, #355	; 0x163
   1cfd0:	movt	sl, #6
   1cfd4:	movt	r1, #5
   1cfd8:	ldr	r0, [sl]
   1cfdc:	bl	127f8 <fprintf@plt>
   1cfe0:	ldr	r9, [sp, #12]
   1cfe4:	ldr	r0, [sl]
   1cfe8:	cmp	r9, #0
   1cfec:	beq	1d01c <__assert_fail@plt+0xa56c>
   1cff0:	cmp	r9, #1
   1cff4:	bne	1d030 <__assert_fail@plt+0xa580>
   1cff8:	movw	r3, #399	; 0x18f
   1cffc:	movw	r2, #6263	; 0x1877
   1d000:	movt	r3, #5
   1d004:	movt	r2, #5
   1d008:	b	1d05c <__assert_fail@plt+0xa5ac>
   1d00c:	str	r9, [r5]
   1d010:	mov	r0, r8
   1d014:	sub	sp, fp, #28
   1d018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d01c:	movw	r3, #396	; 0x18c
   1d020:	movw	r2, #390	; 0x186
   1d024:	movt	r3, #5
   1d028:	movt	r2, #5
   1d02c:	b	1d05c <__assert_fail@plt+0xa5ac>
   1d030:	movw	r1, #402	; 0x192
   1d034:	movw	r3, #405	; 0x195
   1d038:	cmp	r9, #2
   1d03c:	movw	r2, #406	; 0x196
   1d040:	movt	r1, #5
   1d044:	movt	r3, #5
   1d048:	movt	r2, #5
   1d04c:	moveq	r3, r1
   1d050:	movw	r1, #393	; 0x189
   1d054:	movt	r1, #5
   1d058:	moveq	r2, r1
   1d05c:	movw	r1, #369	; 0x171
   1d060:	movt	r1, #5
   1d064:	bl	127f8 <fprintf@plt>
   1d068:	ldr	r4, [r5, #48]	; 0x30
   1d06c:	ldr	r6, [sl]
   1d070:	add	r0, sp, #4
   1d074:	str	r4, [sp, #4]
   1d078:	bl	12558 <ctime@plt>
   1d07c:	movw	r1, #428	; 0x1ac
   1d080:	str	r0, [sp]
   1d084:	asr	r3, r4, #31
   1d088:	mov	r0, r6
   1d08c:	mov	r2, r4
   1d090:	movt	r1, #5
   1d094:	bl	127f8 <fprintf@plt>
   1d098:	cmp	r9, #2
   1d09c:	bne	1d010 <__assert_fail@plt+0xa560>
   1d0a0:	ldr	r0, [r5, #48]	; 0x30
   1d0a4:	ldr	r5, [sl]
   1d0a8:	add	r4, r0, r7
   1d0ac:	add	r0, sp, #4
   1d0b0:	str	r4, [sp, #4]
   1d0b4:	bl	12558 <ctime@plt>
   1d0b8:	movw	r1, #408	; 0x198
   1d0bc:	str	r0, [sp]
   1d0c0:	asr	r3, r4, #31
   1d0c4:	mov	r0, r5
   1d0c8:	mov	r2, r4
   1d0cc:	movt	r1, #5
   1d0d0:	bl	127f8 <fprintf@plt>
   1d0d4:	mov	r0, r8
   1d0d8:	sub	sp, fp, #28
   1d0dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0e0:	andeq	r0, r0, r0
   1d0e4:	rscsmi	r1, r5, r0, lsl #16
   1d0e8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1d0ec:			; <UNDEFINED> instruction: 0x3e99999a
   1d0f0:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d0f4:	nop	{0}
   1d0f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d0fc:	add	fp, sp, #28
   1d100:	sub	sp, sp, #28
   1d104:	mov	r4, #0
   1d108:	cmp	r1, #0
   1d10c:	beq	1d1d8 <__assert_fail@plt+0xa728>
   1d110:	ldr	r9, [r2]
   1d114:	mov	r5, r2
   1d118:	ldr	r7, [r1, r9, lsl #2]
   1d11c:	cmp	r7, #0
   1d120:	beq	1d1d8 <__assert_fail@plt+0xa728>
   1d124:	movw	sl, #20084	; 0x4e74
   1d128:	movw	r1, #89	; 0x59
   1d12c:	mov	r8, r0
   1d130:	add	r0, r9, #1
   1d134:	vldr	d0, [pc, #188]	; 1d1f8 <__assert_fail@plt+0xa748>
   1d138:	add	r6, sp, #8
   1d13c:	movt	sl, #6
   1d140:	str	r0, [r5]
   1d144:	mov	r0, #2
   1d148:	movt	r1, #5
   1d14c:	str	r0, [sp, #8]
   1d150:	ldr	r0, [sl, #28]
   1d154:	str	r1, [sp]
   1d158:	movw	r1, #20864	; 0x5180
   1d15c:	ldr	r3, [sl, #32]
   1d160:	movt	r1, #1
   1d164:	add	r2, r0, r1
   1d168:	mov	r0, r7
   1d16c:	mov	r1, r6
   1d170:	bl	1f3e0 <__assert_fail@plt+0xc930>
   1d174:	cmp	r0, #0
   1d178:	beq	1d1e4 <__assert_fail@plt+0xa734>
   1d17c:	mov	r0, r8
   1d180:	mov	r1, r7
   1d184:	bl	18554 <__assert_fail@plt+0x5aa4>
   1d188:	mov	r1, #8
   1d18c:	movw	r3, #10111	; 0x277f
   1d190:	vldr	s0, [pc, #112]	; 1d208 <__assert_fail@plt+0xa758>
   1d194:	mov	r4, #1
   1d198:	vld1.64	{d16-d17}, [r6], r1
   1d19c:	add	r1, r0, #40	; 0x28
   1d1a0:	movt	r3, #133	; 0x85
   1d1a4:	vst1.64	{d16-d17}, [r1]
   1d1a8:	ldr	r1, [r6]
   1d1ac:	ldr	r2, [sl, #28]
   1d1b0:	sub	r1, r2, r1
   1d1b4:	add	r2, pc, #68	; 0x44
   1d1b8:	cmp	r1, r3
   1d1bc:	addgt	r2, r2, #4
   1d1c0:	vldr	s2, [r2]
   1d1c4:	movw	r2, #20864	; 0x5180
   1d1c8:	movt	r2, #1
   1d1cc:	cmp	r1, r2
   1d1d0:	vselge.f32	s0, s2, s0
   1d1d4:	vstr	s0, [r0, #28]
   1d1d8:	mov	r0, r4
   1d1dc:	sub	sp, fp, #28
   1d1e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1e4:	str	r9, [r5]
   1d1e8:	mov	r0, r4
   1d1ec:	sub	sp, fp, #28
   1d1f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1f4:	nop	{0}
   1d1f8:	andeq	r0, r0, r0
   1d1fc:	submi	r0, lr, r0
   1d200:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1d204:			; <UNDEFINED> instruction: 0x3e99999a
   1d208:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d20c:	push	{r4, r5, r6, sl, fp, lr}
   1d210:	add	fp, sp, #16
   1d214:	sub	sp, sp, #104	; 0x68
   1d218:	mov	r4, r0
   1d21c:	mov	r0, sp
   1d220:	mov	r6, r2
   1d224:	mov	r5, r1
   1d228:	bl	189fc <__assert_fail@plt+0x5f4c>
   1d22c:	mov	r0, #0
   1d230:	cmp	r5, #0
   1d234:	beq	1d2dc <__assert_fail@plt+0xa82c>
   1d238:	ldr	r1, [r6]
   1d23c:	ldr	r5, [r5, r1, lsl #2]
   1d240:	cmp	r5, #0
   1d244:	beq	1d2dc <__assert_fail@plt+0xa82c>
   1d248:	add	r0, r1, #1
   1d24c:	mov	r1, sp
   1d250:	str	r0, [r6]
   1d254:	movw	r6, #20084	; 0x4e74
   1d258:	mov	r0, r5
   1d25c:	movt	r6, #6
   1d260:	ldr	r2, [r6, #52]	; 0x34
   1d264:	blx	r2
   1d268:	cmp	r0, #0
   1d26c:	bne	1d2e4 <__assert_fail@plt+0xa834>
   1d270:	mov	r0, r4
   1d274:	mov	r1, r5
   1d278:	bl	18554 <__assert_fail@plt+0x5aa4>
   1d27c:	mov	r1, #2
   1d280:	mov	r3, #0
   1d284:	vldr	s0, [pc, #112]	; 1d2fc <__assert_fail@plt+0xa84c>
   1d288:	str	r1, [r0, #40]	; 0x28
   1d28c:	ldr	r1, [sp, #80]	; 0x50
   1d290:	ldr	r2, [sp, #84]	; 0x54
   1d294:	str	r3, [r0, #44]	; 0x2c
   1d298:	movw	r3, #10111	; 0x277f
   1d29c:	movt	r3, #133	; 0x85
   1d2a0:	str	r1, [r0, #48]	; 0x30
   1d2a4:	str	r2, [r0, #52]	; 0x34
   1d2a8:	ldr	r1, [r6, #28]
   1d2ac:	ldr	r2, [sp, #80]	; 0x50
   1d2b0:	sub	r1, r1, r2
   1d2b4:	add	r2, pc, #56	; 0x38
   1d2b8:	cmp	r1, r3
   1d2bc:	addgt	r2, r2, #4
   1d2c0:	vldr	s2, [r2]
   1d2c4:	movw	r2, #20864	; 0x5180
   1d2c8:	movt	r2, #1
   1d2cc:	cmp	r1, r2
   1d2d0:	vselge.f32	s0, s2, s0
   1d2d4:	vstr	s0, [r0, #28]
   1d2d8:	mov	r0, #1
   1d2dc:	sub	sp, fp, #16
   1d2e0:	pop	{r4, r5, r6, sl, fp, pc}
   1d2e4:	bl	12804 <__errno_location@plt>
   1d2e8:	ldr	r0, [r0]
   1d2ec:	mov	r1, r5
   1d2f0:	bl	19f68 <__assert_fail@plt+0x74b8>
   1d2f4:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1d2f8:			; <UNDEFINED> instruction: 0x3e99999a
   1d2fc:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d300:	push	{r4, r5, r6, r7, fp, lr}
   1d304:	add	fp, sp, #16
   1d308:	mov	r6, r0
   1d30c:	mov	r0, #0
   1d310:	cmp	r1, #0
   1d314:	beq	1d378 <__assert_fail@plt+0xa8c8>
   1d318:	mov	r5, r1
   1d31c:	ldr	r1, [r2]
   1d320:	mov	r4, r2
   1d324:	ldr	r1, [r5, r1, lsl #2]
   1d328:	cmp	r1, #0
   1d32c:	beq	1d378 <__assert_fail@plt+0xa8c8>
   1d330:	bl	123e4 <is_selinux_enabled@plt>
   1d334:	cmp	r0, #0
   1d338:	ble	1d37c <__assert_fail@plt+0xa8cc>
   1d33c:	mov	r0, r6
   1d340:	mov	r1, #0
   1d344:	mov	r7, #0
   1d348:	bl	18554 <__assert_fail@plt+0x5aa4>
   1d34c:	movw	r1, #55050	; 0xd70a
   1d350:	movt	r1, #15395	; 0x3c23
   1d354:	str	r1, [r0, #28]
   1d358:	strb	r7, [r0, #18]
   1d35c:	ldr	r1, [r4]
   1d360:	ldr	r1, [r5, r1, lsl #2]
   1d364:	str	r1, [r0, #40]	; 0x28
   1d368:	ldr	r0, [r4]
   1d36c:	add	r0, r0, #1
   1d370:	str	r0, [r4]
   1d374:	mov	r0, #1
   1d378:	pop	{r4, r5, r6, r7, fp, pc}
   1d37c:	movw	r1, #436	; 0x1b4
   1d380:	mov	r0, #0
   1d384:	mov	r2, #5
   1d388:	movt	r1, #5
   1d38c:	bl	12564 <dcgettext@plt>
   1d390:	mov	r2, r0
   1d394:	mov	r0, #1
   1d398:	mov	r1, #0
   1d39c:	bl	1269c <error@plt>
   1d3a0:	push	{r4, sl, fp, lr}
   1d3a4:	add	fp, sp, #8
   1d3a8:	movw	r4, #20084	; 0x4e74
   1d3ac:	movt	r4, #6
   1d3b0:	ldrb	r0, [r4, #36]	; 0x24
   1d3b4:	cmp	r0, #0
   1d3b8:	beq	1d3c4 <__assert_fail@plt+0xa914>
   1d3bc:	mov	r0, #1
   1d3c0:	pop	{r4, sl, fp, pc}
   1d3c4:	mov	r0, r4
   1d3c8:	mov	r2, #0
   1d3cc:	ldr	r1, [r0, #28]!
   1d3d0:	add	r1, r1, #4480	; 0x1180
   1d3d4:	add	r1, r1, #81920	; 0x14000
   1d3d8:	stm	r0, {r1, r2}
   1d3dc:	bl	1272c <localtime@plt>
   1d3e0:	cmp	r0, #0
   1d3e4:	beq	1d408 <__assert_fail@plt+0xa958>
   1d3e8:	ldm	r0, {r1, r2}
   1d3ec:	rsb	r2, r2, r2, lsl #4
   1d3f0:	ldr	r0, [r0, #8]
   1d3f4:	add	r1, r1, r2, lsl #2
   1d3f8:	mov	r2, #3600	; 0xe10
   1d3fc:	mla	r1, r0, r2, r1
   1d400:	ldr	r0, [r4, #28]
   1d404:	b	1d42c <__assert_fail@plt+0xa97c>
   1d408:	ldr	r0, [r4, #28]
   1d40c:	movw	r1, #17671	; 0x4507
   1d410:	movt	r1, #49710	; 0xc22e
   1d414:	smmla	r1, r0, r1, r0
   1d418:	asr	r2, r1, #16
   1d41c:	add	r1, r2, r1, lsr #31
   1d420:	movw	r2, #675	; 0x2a3
   1d424:	mul	r1, r1, r2
   1d428:	sub	r1, r0, r1, lsl #7
   1d42c:	mov	r2, #1
   1d430:	sub	r0, r0, r1
   1d434:	strb	r2, [r4, #36]	; 0x24
   1d438:	str	r0, [r4, #28]
   1d43c:	mov	r0, #1
   1d440:	pop	{r4, sl, fp, pc}
   1d444:	push	{fp, lr}
   1d448:	mov	fp, sp
   1d44c:	bl	185b4 <__assert_fail@plt+0x5b04>
   1d450:	movw	r1, #257	; 0x101
   1d454:	mov	r2, #0
   1d458:	strh	r1, [r0, #16]
   1d45c:	movw	r1, #20084	; 0x4e74
   1d460:	movt	r1, #6
   1d464:	strb	r2, [r1]
   1d468:	mov	r1, #1065353216	; 0x3f800000
   1d46c:	strh	r2, [r0, #18]
   1d470:	str	r1, [r0, #28]
   1d474:	mov	r0, #1
   1d478:	pop	{fp, pc}
   1d47c:	push	{r4, sl, fp, lr}
   1d480:	add	fp, sp, #8
   1d484:	movw	r4, #20084	; 0x4e74
   1d488:	movt	r4, #6
   1d48c:	ldrb	r0, [r4, #17]
   1d490:	cmp	r0, #0
   1d494:	bne	1d4c8 <__assert_fail@plt+0xaa18>
   1d498:	ldrb	r0, [r4, #16]
   1d49c:	cmp	r0, #0
   1d4a0:	beq	1d4c8 <__assert_fail@plt+0xaa18>
   1d4a4:	movw	r1, #488	; 0x1e8
   1d4a8:	mov	r0, #0
   1d4ac:	mov	r2, #5
   1d4b0:	movt	r1, #5
   1d4b4:	bl	12564 <dcgettext@plt>
   1d4b8:	mov	r2, r0
   1d4bc:	mov	r0, #0
   1d4c0:	mov	r1, #0
   1d4c4:	bl	1269c <error@plt>
   1d4c8:	movw	r1, #19676	; 0x4cdc
   1d4cc:	mov	r0, #256	; 0x100
   1d4d0:	movt	r1, #6
   1d4d4:	strh	r0, [r4]
   1d4d8:	ldr	r0, [r1]
   1d4dc:	cmp	r0, #0
   1d4e0:	bne	1d4f4 <__assert_fail@plt+0xaa44>
   1d4e4:	movw	r0, #3196	; 0xc7c
   1d4e8:	movt	r0, #5
   1d4ec:	add	r0, r0, #1296	; 0x510
   1d4f0:	str	r0, [r1]
   1d4f4:	bl	185b4 <__assert_fail@plt+0x5b04>
   1d4f8:	mov	r1, #1065353216	; 0x3f800000
   1d4fc:	str	r1, [r0, #28]
   1d500:	mov	r1, #0
   1d504:	strh	r1, [r0, #18]
   1d508:	mov	r0, #1
   1d50c:	pop	{r4, sl, fp, pc}
   1d510:	push	{fp, lr}
   1d514:	mov	fp, sp
   1d518:	movw	r0, #20084	; 0x4e74
   1d51c:	mov	r1, #256	; 0x100
   1d520:	movt	r0, #6
   1d524:	strh	r1, [r0]
   1d528:	movw	r1, #19676	; 0x4cdc
   1d52c:	movt	r1, #6
   1d530:	ldr	r0, [r1]
   1d534:	cmp	r0, #0
   1d538:	bne	1d54c <__assert_fail@plt+0xaa9c>
   1d53c:	movw	r0, #3196	; 0xc7c
   1d540:	movt	r0, #5
   1d544:	add	r0, r0, #1296	; 0x510
   1d548:	str	r0, [r1]
   1d54c:	bl	185b4 <__assert_fail@plt+0x5b04>
   1d550:	mov	r1, #1065353216	; 0x3f800000
   1d554:	str	r1, [r0, #28]
   1d558:	mov	r1, #0
   1d55c:	strh	r1, [r0, #18]
   1d560:	mov	r0, #1
   1d564:	pop	{fp, pc}
   1d568:	push	{fp, lr}
   1d56c:	mov	fp, sp
   1d570:	bl	185b4 <__assert_fail@plt+0x5b04>
   1d574:	movw	r1, #55050	; 0xd70a
   1d578:	movt	r1, #15395	; 0x3c23
   1d57c:	str	r1, [r0, #28]
   1d580:	mov	r0, #1
   1d584:	pop	{fp, pc}
   1d588:	mov	r3, r2
   1d58c:	mov	r2, r1
   1d590:	mov	r1, r0
   1d594:	movw	r0, #602	; 0x25a
   1d598:	movt	r0, #5
   1d59c:	b	1f550 <__assert_fail@plt+0xcaa0>
   1d5a0:	push	{fp, lr}
   1d5a4:	mov	fp, sp
   1d5a8:	bl	185b4 <__assert_fail@plt+0x5b04>
   1d5ac:	mov	r1, #0
   1d5b0:	movw	r3, #19272	; 0x4b48
   1d5b4:	str	r1, [r0, #16]
   1d5b8:	movt	r3, #1
   1d5bc:	ldr	r1, [r0]
   1d5c0:	add	r2, pc, #20
   1d5c4:	cmp	r1, r3
   1d5c8:	addeq	r2, r2, #4
   1d5cc:	ldr	r1, [r2]
   1d5d0:	str	r1, [r0, #28]
   1d5d4:	mov	r0, #1
   1d5d8:	pop	{fp, pc}
   1d5dc:	svccc	0x00666666
   1d5e0:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d5e4:	mov	r3, r2
   1d5e8:	mov	r2, r1
   1d5ec:	mov	r1, r0
   1d5f0:	movw	r0, #1456	; 0x5b0
   1d5f4:	movt	r0, #5
   1d5f8:	b	1f550 <__assert_fail@plt+0xcaa0>
   1d5fc:	mov	r0, #0
   1d600:	cmp	r1, #0
   1d604:	beq	1d630 <__assert_fail@plt+0xab80>
   1d608:	ldr	r3, [r2]
   1d60c:	ldr	r1, [r1, r3, lsl #2]
   1d610:	cmp	r1, #0
   1d614:	bxeq	lr
   1d618:	add	r0, r3, #1
   1d61c:	str	r0, [r2]
   1d620:	movw	r0, #20084	; 0x4e74
   1d624:	movt	r0, #6
   1d628:	str	r1, [r0, #76]	; 0x4c
   1d62c:	mov	r0, #1
   1d630:	bx	lr
   1d634:	push	{r4, r5, fp, lr}
   1d638:	add	fp, sp, #8
   1d63c:	mov	r3, r0
   1d640:	mov	r0, #0
   1d644:	cmp	r1, #0
   1d648:	beq	1d690 <__assert_fail@plt+0xabe0>
   1d64c:	ldr	r5, [r2]
   1d650:	ldr	r4, [r1, r5, lsl #2]
   1d654:	cmp	r4, #0
   1d658:	beq	1d690 <__assert_fail@plt+0xabe0>
   1d65c:	add	r0, r5, #1
   1d660:	str	r0, [r2]
   1d664:	mov	r0, r3
   1d668:	bl	185b4 <__assert_fail@plt+0x5b04>
   1d66c:	mov	r5, r0
   1d670:	add	r1, r0, #40	; 0x28
   1d674:	mov	r0, r4
   1d678:	bl	1fd2c <__assert_fail@plt+0xd27c>
   1d67c:	mov	r0, #1065353216	; 0x3f800000
   1d680:	str	r0, [r5, #28]
   1d684:	movw	r0, #257	; 0x101
   1d688:	strh	r0, [r5, #16]
   1d68c:	mov	r0, #1
   1d690:	pop	{r4, r5, fp, pc}
   1d694:	push	{fp, lr}
   1d698:	mov	fp, sp
   1d69c:	movw	r0, #20084	; 0x4e74
   1d6a0:	movw	r1, #50384	; 0xc4d0
   1d6a4:	mov	r2, #1
   1d6a8:	movt	r0, #6
   1d6ac:	movt	r1, #1
   1d6b0:	str	r1, [r0, #64]	; 0x40
   1d6b4:	movw	r1, #37432	; 0x9238
   1d6b8:	str	r2, [r0, #48]	; 0x30
   1d6bc:	movt	r1, #1
   1d6c0:	str	r1, [r0, #52]	; 0x34
   1d6c4:	strb	r2, [r0, #12]
   1d6c8:	ldrb	r1, [r0, #44]	; 0x2c
   1d6cc:	tst	r1, #2
   1d6d0:	movwne	r1, #37780	; 0x9394
   1d6d4:	movtne	r1, #1
   1d6d8:	strne	r1, [r0, #52]	; 0x34
   1d6dc:	movw	r1, #19676	; 0x4cdc
   1d6e0:	movt	r1, #6
   1d6e4:	ldr	r0, [r1]
   1d6e8:	cmp	r0, #0
   1d6ec:	bne	1d700 <__assert_fail@plt+0xac50>
   1d6f0:	movw	r0, #3196	; 0xc7c
   1d6f4:	movt	r0, #5
   1d6f8:	add	r0, r0, #1296	; 0x510
   1d6fc:	str	r0, [r1]
   1d700:	bl	185b4 <__assert_fail@plt+0x5b04>
   1d704:	mov	r1, #1065353216	; 0x3f800000
   1d708:	str	r1, [r0, #28]
   1d70c:	mov	r1, #0
   1d710:	strh	r1, [r0, #18]
   1d714:	mov	r0, #1
   1d718:	pop	{fp, pc}
   1d71c:	push	{r4, r5, fp, lr}
   1d720:	add	fp, sp, #8
   1d724:	mov	r3, r0
   1d728:	mov	r0, #0
   1d72c:	cmp	r1, #0
   1d730:	beq	1d784 <__assert_fail@plt+0xacd4>
   1d734:	ldr	r5, [r2]
   1d738:	ldr	r4, [r1, r5, lsl #2]
   1d73c:	cmp	r4, #0
   1d740:	beq	1d784 <__assert_fail@plt+0xacd4>
   1d744:	add	r0, r5, #1
   1d748:	mov	r1, r4
   1d74c:	str	r0, [r2]
   1d750:	mov	r0, r3
   1d754:	bl	18554 <__assert_fail@plt+0x5aa4>
   1d758:	mov	r5, r0
   1d75c:	add	r1, r0, #40	; 0x28
   1d760:	mov	r0, r4
   1d764:	bl	1fd2c <__assert_fail@plt+0xd27c>
   1d768:	mov	r0, #0
   1d76c:	mov	r1, #1065353216	; 0x3f800000
   1d770:	strb	r0, [r5, #19]
   1d774:	mov	r0, #1
   1d778:	strb	r0, [r5, #16]
   1d77c:	strh	r0, [r5, #17]
   1d780:	str	r1, [r5, #28]
   1d784:	pop	{r4, r5, fp, pc}
   1d788:	push	{r4, r5, fp, lr}
   1d78c:	add	fp, sp, #8
   1d790:	mov	r3, r0
   1d794:	mov	r0, #0
   1d798:	cmp	r1, #0
   1d79c:	beq	1d7f0 <__assert_fail@plt+0xad40>
   1d7a0:	ldr	r5, [r2]
   1d7a4:	ldr	r4, [r1, r5, lsl #2]
   1d7a8:	cmp	r4, #0
   1d7ac:	beq	1d7f0 <__assert_fail@plt+0xad40>
   1d7b0:	add	r0, r5, #1
   1d7b4:	mov	r1, r4
   1d7b8:	str	r0, [r2]
   1d7bc:	mov	r0, r3
   1d7c0:	bl	18554 <__assert_fail@plt+0x5aa4>
   1d7c4:	mov	r5, r0
   1d7c8:	add	r1, r0, #40	; 0x28
   1d7cc:	mov	r0, r4
   1d7d0:	bl	1fd2c <__assert_fail@plt+0xd27c>
   1d7d4:	mov	r0, #0
   1d7d8:	mov	r1, #1065353216	; 0x3f800000
   1d7dc:	strb	r0, [r5, #19]
   1d7e0:	mov	r0, #1
   1d7e4:	strb	r0, [r5, #16]
   1d7e8:	strh	r0, [r5, #17]
   1d7ec:	str	r1, [r5, #28]
   1d7f0:	pop	{r4, r5, fp, pc}
   1d7f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d7f8:	add	fp, sp, #24
   1d7fc:	sub	sp, sp, #24
   1d800:	ldr	r7, [r2]
   1d804:	mov	r4, r2
   1d808:	cmp	r1, #0
   1d80c:	beq	1d86c <__assert_fail@plt+0xadbc>
   1d810:	mov	r5, r0
   1d814:	ldr	r0, [r1, r7, lsl #2]
   1d818:	cmp	r0, #0
   1d81c:	beq	1d86c <__assert_fail@plt+0xadbc>
   1d820:	add	r2, r7, #1
   1d824:	str	r2, [r4]
   1d828:	ldr	r6, [r1, r2, lsl #2]
   1d82c:	cmp	r6, #0
   1d830:	beq	1d86c <__assert_fail@plt+0xadbc>
   1d834:	add	r1, r7, #2
   1d838:	add	r8, sp, #4
   1d83c:	str	r1, [r4]
   1d840:	mov	r1, r8
   1d844:	bl	1fd2c <__assert_fail@plt+0xd27c>
   1d848:	ldr	r7, [r4]
   1d84c:	mov	r0, r8
   1d850:	mov	r1, r5
   1d854:	mov	r2, r6
   1d858:	bl	1a6e8 <__assert_fail@plt+0x7c38>
   1d85c:	mov	r1, r0
   1d860:	mov	r0, #1
   1d864:	cmp	r1, #0
   1d868:	bne	1d874 <__assert_fail@plt+0xadc4>
   1d86c:	mov	r0, #0
   1d870:	str	r7, [r4]
   1d874:	sub	sp, fp, #24
   1d878:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d87c:	push	{r4, r5, r6, sl, fp, lr}
   1d880:	add	fp, sp, #16
   1d884:	sub	sp, sp, #104	; 0x68
   1d888:	mov	r5, r0
   1d88c:	mov	r0, #0
   1d890:	cmp	r1, #0
   1d894:	beq	1d970 <__assert_fail@plt+0xaec0>
   1d898:	ldr	r3, [r2]
   1d89c:	ldr	r4, [r1, r3, lsl #2]
   1d8a0:	cmp	r4, #0
   1d8a4:	beq	1d970 <__assert_fail@plt+0xaec0>
   1d8a8:	movw	r6, #20084	; 0x4e74
   1d8ac:	add	r0, r3, #1
   1d8b0:	movt	r6, #6
   1d8b4:	str	r0, [r2]
   1d8b8:	ldrh	r0, [r6, #68]	; 0x44
   1d8bc:	cmp	r0, #2
   1d8c0:	bcc	1d8d4 <__assert_fail@plt+0xae24>
   1d8c4:	mov	r0, r4
   1d8c8:	bl	1c1a8 <__assert_fail@plt+0x96f8>
   1d8cc:	cmp	r0, #0
   1d8d0:	beq	1d944 <__assert_fail@plt+0xae94>
   1d8d4:	mov	r0, r5
   1d8d8:	mov	r1, r4
   1d8dc:	bl	18554 <__assert_fail@plt+0x5aa4>
   1d8e0:	movw	r1, #55982	; 0xdaae
   1d8e4:	mov	r5, r0
   1d8e8:	str	r4, [r0, #40]	; 0x28
   1d8ec:	mov	r2, sp
   1d8f0:	mov	r0, #3
   1d8f4:	movt	r1, #4
   1d8f8:	bl	12a14 <__xstat64@plt>
   1d8fc:	cmp	r0, #0
   1d900:	beq	1d910 <__assert_fail@plt+0xae60>
   1d904:	vmov.f32	s0, #112	; 0x3f800000  1.0
   1d908:	vstr	s0, [r5, #28]
   1d90c:	b	1d96c <__assert_fail@plt+0xaebc>
   1d910:	movw	r1, #55982	; 0xdaae
   1d914:	mov	r0, sp
   1d918:	movt	r1, #4
   1d91c:	bl	1bfdc <__assert_fail@plt+0x952c>
   1d920:	mov	r1, r0
   1d924:	mov	r0, r4
   1d928:	bl	123fc <strcmp@plt>
   1d92c:	add	r1, pc, #100	; 0x64
   1d930:	cmp	r0, #0
   1d934:	addeq	r1, r1, #4
   1d938:	vldr	s0, [r1]
   1d93c:	vstr	s0, [r5, #28]
   1d940:	b	1d96c <__assert_fail@plt+0xaebc>
   1d944:	ldrb	r0, [r6, #44]	; 0x2c
   1d948:	tst	r0, #8
   1d94c:	bne	1d978 <__assert_fail@plt+0xaec8>
   1d950:	movw	r0, #56	; 0x38
   1d954:	movt	r0, #5
   1d958:	bl	1c624 <__assert_fail@plt+0x9b74>
   1d95c:	bl	185b4 <__assert_fail@plt+0x5b04>
   1d960:	mov	r1, #0
   1d964:	str	r1, [r0, #28]
   1d968:	str	r1, [r0, #16]
   1d96c:	mov	r0, #1
   1d970:	sub	sp, fp, #16
   1d974:	pop	{r4, r5, r6, sl, fp, pc}
   1d978:	movw	r0, #17744	; 0x4550
   1d97c:	movw	r1, #1504	; 0x5e0
   1d980:	mov	r2, r4
   1d984:	movt	r0, #6
   1d988:	movt	r1, #5
   1d98c:	ldr	r0, [r0]
   1d990:	bl	127f8 <fprintf@plt>
   1d994:	b	1d950 <__assert_fail@plt+0xaea0>
   1d998:			; <UNDEFINED> instruction: 0x3e99999a
   1d99c:	svccc	0x00333333
   1d9a0:	push	{r4, sl, fp, lr}
   1d9a4:	add	fp, sp, #8
   1d9a8:	mov	r4, r2
   1d9ac:	mov	r2, r0
   1d9b0:	mov	r0, r1
   1d9b4:	mov	r1, r4
   1d9b8:	bl	1fe2c <__assert_fail@plt+0xd37c>
   1d9bc:	cmp	r0, #0
   1d9c0:	beq	1d9e8 <__assert_fail@plt+0xaf38>
   1d9c4:	add	r1, pc, #48	; 0x30
   1d9c8:	ldrd	r2, [r0, #48]	; 0x30
   1d9cc:	subs	r2, r2, #100	; 0x64
   1d9d0:	sbcs	r2, r3, #0
   1d9d4:	addcc	r1, r1, #4
   1d9d8:	ldr	r1, [r1]
   1d9dc:	str	r1, [r0, #28]
   1d9e0:	mov	r0, #1
   1d9e4:	pop	{r4, sl, fp, pc}
   1d9e8:	ldr	r0, [r4]
   1d9ec:	sub	r0, r0, #1
   1d9f0:	str	r0, [r4]
   1d9f4:	mov	r0, #0
   1d9f8:	pop	{r4, sl, fp, pc}
   1d9fc:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1da00:	svccc	0x007d70a4
   1da04:	push	{r4, r5, r6, r7, fp, lr}
   1da08:	add	fp, sp, #16
   1da0c:	sub	sp, sp, #8
   1da10:	mov	r5, r0
   1da14:	mov	r0, #0
   1da18:	cmp	r1, #0
   1da1c:	beq	1dac8 <__assert_fail@plt+0xb018>
   1da20:	ldr	r3, [r2]
   1da24:	ldr	r4, [r1, r3, lsl #2]
   1da28:	cmp	r4, #0
   1da2c:	beq	1dac8 <__assert_fail@plt+0xb018>
   1da30:	add	r0, r3, #1
   1da34:	str	r0, [r2]
   1da38:	mov	r0, r4
   1da3c:	bl	12a98 <getgrnam@plt>
   1da40:	mov	r6, r0
   1da44:	bl	12390 <endgrent@plt>
   1da48:	cmp	r6, #0
   1da4c:	beq	1da58 <__assert_fail@plt+0xafa8>
   1da50:	ldr	r6, [r6, #8]
   1da54:	b	1da98 <__assert_fail@plt+0xafe8>
   1da58:	movw	r1, #1564	; 0x61c
   1da5c:	mov	r0, r4
   1da60:	movt	r1, #5
   1da64:	bl	12aa4 <strspn@plt>
   1da68:	cmp	r0, #0
   1da6c:	beq	1dad0 <__assert_fail@plt+0xb020>
   1da70:	mov	r6, r4
   1da74:	ldrb	r0, [r6, r0]!
   1da78:	cmp	r0, #0
   1da7c:	bne	1db00 <__assert_fail@plt+0xb050>
   1da80:	movw	r0, #20084	; 0x4e74
   1da84:	movt	r0, #6
   1da88:	ldr	r1, [r0, #72]	; 0x48
   1da8c:	mov	r0, r4
   1da90:	bl	233fc <__assert_fail@plt+0x1094c>
   1da94:	mov	r6, r0
   1da98:	mov	r0, r5
   1da9c:	mov	r1, r4
   1daa0:	bl	18554 <__assert_fail@plt+0x5aa4>
   1daa4:	str	r6, [r0, #40]	; 0x28
   1daa8:	ldrd	r2, [r0, #48]	; 0x30
   1daac:	add	r1, pc, #236	; 0xec
   1dab0:	subs	r2, r2, #100	; 0x64
   1dab4:	sbcs	r2, r3, #0
   1dab8:	addcc	r1, r1, #4
   1dabc:	ldr	r1, [r1]
   1dac0:	str	r1, [r0, #28]
   1dac4:	mov	r0, #1
   1dac8:	sub	sp, fp, #16
   1dacc:	pop	{r4, r5, r6, r7, fp, pc}
   1dad0:	ldrb	r0, [r4]
   1dad4:	cmp	r0, #0
   1dad8:	bne	1db5c <__assert_fail@plt+0xb0ac>
   1dadc:	movw	r1, #1740	; 0x6cc
   1dae0:	mov	r0, #0
   1dae4:	mov	r2, #5
   1dae8:	movt	r1, #5
   1daec:	bl	12564 <dcgettext@plt>
   1daf0:	mov	r2, r0
   1daf4:	mov	r0, #1
   1daf8:	mov	r1, #0
   1dafc:	bl	1269c <error@plt>
   1db00:	movw	r1, #1575	; 0x627
   1db04:	mov	r0, #0
   1db08:	mov	r2, #5
   1db0c:	movt	r1, #5
   1db10:	bl	12564 <dcgettext@plt>
   1db14:	movw	r7, #20084	; 0x4e74
   1db18:	mov	r5, r0
   1db1c:	mov	r0, #0
   1db20:	mov	r2, r4
   1db24:	movt	r7, #6
   1db28:	ldr	r1, [r7, #72]	; 0x48
   1db2c:	bl	2efe4 <__assert_fail@plt+0x1c534>
   1db30:	ldr	r1, [r7, #72]	; 0x48
   1db34:	mov	r4, r0
   1db38:	mov	r0, #1
   1db3c:	mov	r2, r6
   1db40:	bl	2efe4 <__assert_fail@plt+0x1c534>
   1db44:	str	r0, [sp]
   1db48:	mov	r0, #1
   1db4c:	mov	r1, #0
   1db50:	mov	r2, r5
   1db54:	mov	r3, r4
   1db58:	bl	1269c <error@plt>
   1db5c:	movw	r1, #1700	; 0x6a4
   1db60:	mov	r0, #0
   1db64:	mov	r2, #5
   1db68:	movt	r1, #5
   1db6c:	bl	12564 <dcgettext@plt>
   1db70:	mov	r5, r0
   1db74:	movw	r0, #20084	; 0x4e74
   1db78:	mov	r2, r4
   1db7c:	movt	r0, #6
   1db80:	ldr	r1, [r0, #72]	; 0x48
   1db84:	mov	r0, #0
   1db88:	bl	2efe4 <__assert_fail@plt+0x1c534>
   1db8c:	mov	r3, r0
   1db90:	mov	r0, #1
   1db94:	mov	r1, #0
   1db98:	mov	r2, r5
   1db9c:	bl	1269c <error@plt>
   1dba0:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1dba4:	svccc	0x007d70a4
   1dba8:	push	{fp, lr}
   1dbac:	mov	fp, sp
   1dbb0:	movw	r0, #20084	; 0x4e74
   1dbb4:	mov	r1, #1
   1dbb8:	movt	r0, #6
   1dbbc:	strb	r1, [r0, #14]
   1dbc0:	movw	r1, #19676	; 0x4cdc
   1dbc4:	movt	r1, #6
   1dbc8:	ldr	r0, [r1]
   1dbcc:	cmp	r0, #0
   1dbd0:	bne	1dbe4 <__assert_fail@plt+0xb134>
   1dbd4:	movw	r0, #3196	; 0xc7c
   1dbd8:	movt	r0, #5
   1dbdc:	add	r0, r0, #1296	; 0x510
   1dbe0:	str	r0, [r1]
   1dbe4:	bl	185b4 <__assert_fail@plt+0x5b04>
   1dbe8:	mov	r1, #1065353216	; 0x3f800000
   1dbec:	str	r1, [r0, #28]
   1dbf0:	mov	r1, #0
   1dbf4:	strh	r1, [r0, #18]
   1dbf8:	mov	r0, #1
   1dbfc:	pop	{fp, pc}
   1dc00:	push	{r4, r5, fp, lr}
   1dc04:	add	fp, sp, #8
   1dc08:	mov	r3, r0
   1dc0c:	mov	r0, #0
   1dc10:	cmp	r1, #0
   1dc14:	beq	1dc6c <__assert_fail@plt+0xb1bc>
   1dc18:	ldr	r5, [r2]
   1dc1c:	ldr	r4, [r1, r5, lsl #2]
   1dc20:	cmp	r4, #0
   1dc24:	beq	1dc6c <__assert_fail@plt+0xb1bc>
   1dc28:	add	r0, r5, #1
   1dc2c:	mov	r1, r4
   1dc30:	str	r0, [r2]
   1dc34:	mov	r0, r3
   1dc38:	bl	18554 <__assert_fail@plt+0x5aa4>
   1dc3c:	movw	r1, #1796	; 0x704
   1dc40:	mov	r5, r0
   1dc44:	str	r4, [r0, #40]	; 0x28
   1dc48:	mov	r0, r4
   1dc4c:	movt	r1, #5
   1dc50:	bl	129e4 <strpbrk@plt>
   1dc54:	add	r1, pc, #20
   1dc58:	cmp	r0, #0
   1dc5c:	addeq	r1, r1, #4
   1dc60:	ldr	r0, [r1]
   1dc64:	str	r0, [r5, #28]
   1dc68:	mov	r0, #1
   1dc6c:	pop	{r4, r5, fp, pc}
   1dc70:	stccc	7, cr13, [r3, #44]!	; 0x2c
   1dc74:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   1dc78:	push	{r4, r5, r6, r7, fp, lr}
   1dc7c:	add	fp, sp, #16
   1dc80:	movw	r7, #19680	; 0x4ce0
   1dc84:	mov	r4, r0
   1dc88:	mov	r5, r2
   1dc8c:	mov	r6, r1
   1dc90:	movt	r7, #6
   1dc94:	ldrb	r0, [r7]
   1dc98:	cmp	r0, #0
   1dc9c:	bne	1dd04 <__assert_fail@plt+0xb254>
   1dca0:	movw	r0, #1819	; 0x71b
   1dca4:	mov	r2, #0
   1dca8:	movt	r0, #5
   1dcac:	mov	r1, r0
   1dcb0:	bl	126c0 <fnmatch@plt>
   1dcb4:	cmp	r0, #0
   1dcb8:	bne	1dd88 <__assert_fail@plt+0xb2d8>
   1dcbc:	movw	r0, #1823	; 0x71f
   1dcc0:	movw	r1, #1819	; 0x71b
   1dcc4:	mov	r2, #0
   1dcc8:	movt	r0, #5
   1dccc:	movt	r1, #5
   1dcd0:	bl	126c0 <fnmatch@plt>
   1dcd4:	cmp	r0, #0
   1dcd8:	beq	1dd88 <__assert_fail@plt+0xb2d8>
   1dcdc:	movw	r0, #1823	; 0x71f
   1dce0:	movw	r1, #1819	; 0x71b
   1dce4:	mov	r2, #16
   1dce8:	movt	r0, #5
   1dcec:	movt	r1, #5
   1dcf0:	bl	126c0 <fnmatch@plt>
   1dcf4:	cmp	r0, #0
   1dcf8:	bne	1dd88 <__assert_fail@plt+0xb2d8>
   1dcfc:	mov	r0, #1
   1dd00:	strb	r0, [r7]
   1dd04:	mov	r0, #0
   1dd08:	cmp	r6, #0
   1dd0c:	beq	1dd84 <__assert_fail@plt+0xb2d4>
   1dd10:	ldr	r1, [r5]
   1dd14:	ldr	r6, [r6, r1, lsl #2]
   1dd18:	cmp	r6, #0
   1dd1c:	beq	1dd84 <__assert_fail@plt+0xb2d4>
   1dd20:	add	r0, r1, #1
   1dd24:	movw	r1, #1807	; 0x70f
   1dd28:	mov	r2, r6
   1dd2c:	str	r0, [r5]
   1dd30:	movw	r0, #1800	; 0x708
   1dd34:	movt	r1, #5
   1dd38:	movt	r0, #5
   1dd3c:	bl	1ff8c <__assert_fail@plt+0xd4dc>
   1dd40:	mov	r0, r4
   1dd44:	mov	r1, r6
   1dd48:	bl	18554 <__assert_fail@plt+0x5aa4>
   1dd4c:	movw	r1, #1796	; 0x704
   1dd50:	mov	r4, r0
   1dd54:	str	r6, [r0, #40]	; 0x28
   1dd58:	mov	r0, #0
   1dd5c:	movt	r1, #5
   1dd60:	strh	r0, [r4, #18]
   1dd64:	mov	r0, r6
   1dd68:	bl	129e4 <strpbrk@plt>
   1dd6c:	add	r1, pc, #56	; 0x38
   1dd70:	cmp	r0, #0
   1dd74:	addeq	r1, r1, #4
   1dd78:	ldr	r0, [r1]
   1dd7c:	str	r0, [r4, #28]
   1dd80:	mov	r0, #1
   1dd84:	pop	{r4, r5, r6, r7, fp, pc}
   1dd88:	movw	r1, #1827	; 0x723
   1dd8c:	mov	r0, #0
   1dd90:	mov	r2, #5
   1dd94:	movt	r1, #5
   1dd98:	bl	12564 <dcgettext@plt>
   1dd9c:	mov	r2, r0
   1dda0:	mov	r0, #1
   1dda4:	mov	r1, #0
   1dda8:	bl	1269c <error@plt>
   1ddac:	svccc	0x004ccccd
   1ddb0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ddb4:	push	{r4, sl, fp, lr}
   1ddb8:	add	fp, sp, #8
   1ddbc:	mov	r4, r2
   1ddc0:	mov	r2, r0
   1ddc4:	mov	r0, r1
   1ddc8:	mov	r1, r4
   1ddcc:	bl	1fe2c <__assert_fail@plt+0xd37c>
   1ddd0:	cmp	r0, #0
   1ddd4:	beq	1ddfc <__assert_fail@plt+0xb34c>
   1ddd8:	movw	r2, #14269	; 0x37bd
   1dddc:	mov	r1, r0
   1dde0:	mov	r0, #1
   1dde4:	movt	r2, #13702	; 0x3586
   1dde8:	strb	r0, [r1, #20]
   1ddec:	str	r2, [r1, #28]
   1ddf0:	mov	r2, #0
   1ddf4:	strh	r2, [r1, #18]
   1ddf8:	pop	{r4, sl, fp, pc}
   1ddfc:	ldr	r0, [r4]
   1de00:	sub	r0, r0, #1
   1de04:	str	r0, [r4]
   1de08:	mov	r0, #0
   1de0c:	pop	{r4, sl, fp, pc}
   1de10:	push	{fp, lr}
   1de14:	mov	fp, sp
   1de18:	sub	sp, sp, #8
   1de1c:	movw	r3, #17672	; 0x4508
   1de20:	movt	r3, #1
   1de24:	str	r3, [sp]
   1de28:	movw	r3, #65434	; 0xff9a
   1de2c:	movt	r3, #4
   1de30:	bl	20040 <__assert_fail@plt+0xd590>
   1de34:	mov	sp, fp
   1de38:	pop	{fp, pc}
   1de3c:	mov	ip, r2
   1de40:	mov	r2, r0
   1de44:	movw	r0, #20084	; 0x4e74
   1de48:	movt	r0, #6
   1de4c:	ldr	r0, [r0, #60]	; 0x3c
   1de50:	orr	r3, r0, #4194304	; 0x400000
   1de54:	mov	r0, r1
   1de58:	mov	r1, ip
   1de5c:	b	20218 <__assert_fail@plt+0xd768>
   1de60:	push	{fp, lr}
   1de64:	mov	fp, sp
   1de68:	sub	sp, sp, #8
   1de6c:	movw	r3, #17672	; 0x4508
   1de70:	movt	r3, #1
   1de74:	str	r3, [sp]
   1de78:	movw	r3, #1808	; 0x710
   1de7c:	movt	r3, #5
   1de80:	bl	20040 <__assert_fail@plt+0xd590>
   1de84:	mov	sp, fp
   1de88:	pop	{fp, pc}
   1de8c:	push	{r4, sl, fp, lr}
   1de90:	add	fp, sp, #8
   1de94:	mov	r4, r2
   1de98:	mov	r2, r0
   1de9c:	mov	r0, r1
   1dea0:	mov	r1, r4
   1dea4:	bl	1fe2c <__assert_fail@plt+0xd37c>
   1dea8:	cmp	r0, #0
   1deac:	beq	1ded8 <__assert_fail@plt+0xb428>
   1deb0:	ldr	r2, [r0, #48]	; 0x30
   1deb4:	ldr	r1, [r0, #52]	; 0x34
   1deb8:	eor	r3, r2, #1
   1debc:	orrs	r3, r3, r1
   1dec0:	bne	1deec <__assert_fail@plt+0xb43c>
   1dec4:	movw	r1, #28836	; 0x70a4
   1dec8:	movt	r1, #16253	; 0x3f7d
   1decc:	str	r1, [r0, #28]
   1ded0:	mov	r0, #1
   1ded4:	pop	{r4, sl, fp, pc}
   1ded8:	ldr	r0, [r4]
   1dedc:	sub	r0, r0, #1
   1dee0:	str	r0, [r4]
   1dee4:	mov	r0, #0
   1dee8:	pop	{r4, sl, fp, pc}
   1deec:	eor	r2, r2, #2
   1def0:	orrs	r1, r2, r1
   1def4:	bne	1df0c <__assert_fail@plt+0xb45c>
   1def8:	movw	r1, #55050	; 0xd70a
   1defc:	movt	r1, #15395	; 0x3c23
   1df00:	str	r1, [r0, #28]
   1df04:	mov	r0, #1
   1df08:	pop	{r4, sl, fp, pc}
   1df0c:	movw	r1, #4719	; 0x126f
   1df10:	movt	r1, #14979	; 0x3a83
   1df14:	str	r1, [r0, #28]
   1df18:	mov	r0, #1
   1df1c:	pop	{r4, sl, fp, pc}
   1df20:	push	{r4, r5, r6, r7, fp, lr}
   1df24:	add	fp, sp, #16
   1df28:	movw	r7, #19680	; 0x4ce0
   1df2c:	mov	r4, r0
   1df30:	mov	r5, r2
   1df34:	mov	r6, r1
   1df38:	movt	r7, #6
   1df3c:	ldrb	r0, [r7]
   1df40:	cmp	r0, #0
   1df44:	bne	1dfac <__assert_fail@plt+0xb4fc>
   1df48:	movw	r0, #1819	; 0x71b
   1df4c:	mov	r2, #0
   1df50:	movt	r0, #5
   1df54:	mov	r1, r0
   1df58:	bl	126c0 <fnmatch@plt>
   1df5c:	cmp	r0, #0
   1df60:	bne	1e010 <__assert_fail@plt+0xb560>
   1df64:	movw	r0, #1823	; 0x71f
   1df68:	movw	r1, #1819	; 0x71b
   1df6c:	mov	r2, #0
   1df70:	movt	r0, #5
   1df74:	movt	r1, #5
   1df78:	bl	126c0 <fnmatch@plt>
   1df7c:	cmp	r0, #0
   1df80:	beq	1e010 <__assert_fail@plt+0xb560>
   1df84:	movw	r0, #1823	; 0x71f
   1df88:	movw	r1, #1819	; 0x71b
   1df8c:	mov	r2, #16
   1df90:	movt	r0, #5
   1df94:	movt	r1, #5
   1df98:	bl	126c0 <fnmatch@plt>
   1df9c:	cmp	r0, #0
   1dfa0:	bne	1e010 <__assert_fail@plt+0xb560>
   1dfa4:	mov	r0, #1
   1dfa8:	strb	r0, [r7]
   1dfac:	mov	r0, #0
   1dfb0:	cmp	r6, #0
   1dfb4:	beq	1e00c <__assert_fail@plt+0xb55c>
   1dfb8:	ldr	r1, [r5]
   1dfbc:	ldr	r6, [r6, r1, lsl #2]
   1dfc0:	cmp	r6, #0
   1dfc4:	beq	1e00c <__assert_fail@plt+0xb55c>
   1dfc8:	add	r0, r1, #1
   1dfcc:	mov	r1, r6
   1dfd0:	str	r0, [r5]
   1dfd4:	mov	r0, r4
   1dfd8:	bl	18554 <__assert_fail@plt+0x5aa4>
   1dfdc:	movw	r1, #1796	; 0x704
   1dfe0:	mov	r4, r0
   1dfe4:	str	r6, [r0, #40]	; 0x28
   1dfe8:	mov	r0, r6
   1dfec:	movt	r1, #5
   1dff0:	bl	129e4 <strpbrk@plt>
   1dff4:	add	r1, pc, #56	; 0x38
   1dff8:	cmp	r0, #0
   1dffc:	addeq	r1, r1, #4
   1e000:	ldr	r0, [r1]
   1e004:	str	r0, [r4, #28]
   1e008:	mov	r0, #1
   1e00c:	pop	{r4, r5, r6, r7, fp, pc}
   1e010:	movw	r1, #1827	; 0x723
   1e014:	mov	r0, #0
   1e018:	mov	r2, #5
   1e01c:	movt	r1, #5
   1e020:	bl	12564 <dcgettext@plt>
   1e024:	mov	r2, r0
   1e028:	mov	r0, #1
   1e02c:	mov	r1, #0
   1e030:	bl	1269c <error@plt>
   1e034:	stccc	7, cr13, [r3, #44]!	; 0x2c
   1e038:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   1e03c:	push	{r4, sl, fp, lr}
   1e040:	add	fp, sp, #8
   1e044:	bl	185b4 <__assert_fail@plt+0x5b04>
   1e048:	mov	r4, r0
   1e04c:	add	r1, r0, #40	; 0x28
   1e050:	movw	r0, #1492	; 0x5d4
   1e054:	movt	r0, #5
   1e058:	bl	1fd2c <__assert_fail@plt+0xd27c>
   1e05c:	mov	r0, #1065353216	; 0x3f800000
   1e060:	str	r0, [r4, #28]
   1e064:	movw	r0, #257	; 0x101
   1e068:	strh	r0, [r4, #16]
   1e06c:	mov	r0, #1
   1e070:	pop	{r4, sl, fp, pc}
   1e074:	mov	r0, r1
   1e078:	movw	r1, #20084	; 0x4e74
   1e07c:	mov	r3, r2
   1e080:	movt	r1, #6
   1e084:	add	r2, r1, #4
   1e088:	mov	r1, r3
   1e08c:	b	20350 <__assert_fail@plt+0xd8a0>
   1e090:	mov	r0, r1
   1e094:	movw	r1, #20084	; 0x4e74
   1e098:	mov	r3, r2
   1e09c:	movt	r1, #6
   1e0a0:	add	r2, r1, #8
   1e0a4:	mov	r1, r3
   1e0a8:	b	20350 <__assert_fail@plt+0xd8a0>
   1e0ac:	nop	{0}
   1e0b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0b4:	add	fp, sp, #28
   1e0b8:	sub	sp, sp, #28
   1e0bc:	mov	r4, #0
   1e0c0:	cmp	r1, #0
   1e0c4:	beq	1e190 <__assert_fail@plt+0xb6e0>
   1e0c8:	ldr	r9, [r2]
   1e0cc:	mov	r5, r2
   1e0d0:	ldr	r7, [r1, r9, lsl #2]
   1e0d4:	cmp	r7, #0
   1e0d8:	beq	1e190 <__assert_fail@plt+0xb6e0>
   1e0dc:	movw	sl, #20084	; 0x4e74
   1e0e0:	movw	r1, #89	; 0x59
   1e0e4:	mov	r8, r0
   1e0e8:	add	r0, r9, #1
   1e0ec:	vldr	d0, [pc, #188]	; 1e1b0 <__assert_fail@plt+0xb700>
   1e0f0:	add	r6, sp, #8
   1e0f4:	movt	sl, #6
   1e0f8:	str	r0, [r5]
   1e0fc:	mov	r0, #3
   1e100:	movt	r1, #5
   1e104:	str	r0, [sp, #8]
   1e108:	ldr	r0, [sl, #28]
   1e10c:	str	r1, [sp]
   1e110:	movw	r1, #20864	; 0x5180
   1e114:	ldr	r3, [sl, #32]
   1e118:	movt	r1, #1
   1e11c:	add	r2, r0, r1
   1e120:	mov	r0, r7
   1e124:	mov	r1, r6
   1e128:	bl	1f3e0 <__assert_fail@plt+0xc930>
   1e12c:	cmp	r0, #0
   1e130:	beq	1e19c <__assert_fail@plt+0xb6ec>
   1e134:	mov	r0, r8
   1e138:	mov	r1, r7
   1e13c:	bl	18554 <__assert_fail@plt+0x5aa4>
   1e140:	mov	r1, #8
   1e144:	movw	r3, #10111	; 0x277f
   1e148:	vldr	s0, [pc, #112]	; 1e1c0 <__assert_fail@plt+0xb710>
   1e14c:	mov	r4, #1
   1e150:	vld1.64	{d16-d17}, [r6], r1
   1e154:	add	r1, r0, #40	; 0x28
   1e158:	movt	r3, #133	; 0x85
   1e15c:	vst1.64	{d16-d17}, [r1]
   1e160:	ldr	r1, [r6]
   1e164:	ldr	r2, [sl, #28]
   1e168:	sub	r1, r2, r1
   1e16c:	add	r2, pc, #68	; 0x44
   1e170:	cmp	r1, r3
   1e174:	addgt	r2, r2, #4
   1e178:	vldr	s2, [r2]
   1e17c:	movw	r2, #20864	; 0x5180
   1e180:	movt	r2, #1
   1e184:	cmp	r1, r2
   1e188:	vselge.f32	s0, s2, s0
   1e18c:	vstr	s0, [r0, #28]
   1e190:	mov	r0, r4
   1e194:	sub	sp, fp, #28
   1e198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e19c:	str	r9, [r5]
   1e1a0:	mov	r0, r4
   1e1a4:	sub	sp, fp, #28
   1e1a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e1ac:	nop	{0}
   1e1b0:	andeq	r0, r0, r0
   1e1b4:	submi	r0, lr, r0
   1e1b8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e1bc:			; <UNDEFINED> instruction: 0x3e99999a
   1e1c0:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e1c4:	push	{fp, lr}
   1e1c8:	mov	fp, sp
   1e1cc:	movw	r0, #20084	; 0x4e74
   1e1d0:	mov	r1, #1
   1e1d4:	movt	r0, #6
   1e1d8:	strb	r1, [r0, #13]
   1e1dc:	movw	r1, #19676	; 0x4cdc
   1e1e0:	movt	r1, #6
   1e1e4:	ldr	r0, [r1]
   1e1e8:	cmp	r0, #0
   1e1ec:	bne	1e200 <__assert_fail@plt+0xb750>
   1e1f0:	movw	r0, #3196	; 0xc7c
   1e1f4:	movt	r0, #5
   1e1f8:	add	r0, r0, #1296	; 0x510
   1e1fc:	str	r0, [r1]
   1e200:	bl	185b4 <__assert_fail@plt+0x5b04>
   1e204:	mov	r1, #1065353216	; 0x3f800000
   1e208:	str	r1, [r0, #28]
   1e20c:	mov	r1, #0
   1e210:	strh	r1, [r0, #18]
   1e214:	mov	r0, #1
   1e218:	pop	{fp, pc}
   1e21c:	push	{r4, r5, r6, sl, fp, lr}
   1e220:	add	fp, sp, #16
   1e224:	mov	r5, r0
   1e228:	mov	r0, #0
   1e22c:	cmp	r1, #0
   1e230:	beq	1e320 <__assert_fail@plt+0xb870>
   1e234:	ldr	r3, [r2]
   1e238:	ldr	r4, [r1, r3, lsl #2]
   1e23c:	cmp	r4, #0
   1e240:	beq	1e320 <__assert_fail@plt+0xb870>
   1e244:	movw	r6, #19680	; 0x4ce0
   1e248:	add	r0, r3, #1
   1e24c:	movt	r6, #6
   1e250:	str	r0, [r2]
   1e254:	ldrb	r0, [r6]
   1e258:	cmp	r0, #0
   1e25c:	bne	1e2c4 <__assert_fail@plt+0xb814>
   1e260:	movw	r0, #1819	; 0x71b
   1e264:	mov	r2, #0
   1e268:	movt	r0, #5
   1e26c:	mov	r1, r0
   1e270:	bl	126c0 <fnmatch@plt>
   1e274:	cmp	r0, #0
   1e278:	bne	1e324 <__assert_fail@plt+0xb874>
   1e27c:	movw	r0, #1823	; 0x71f
   1e280:	movw	r1, #1819	; 0x71b
   1e284:	mov	r2, #0
   1e288:	movt	r0, #5
   1e28c:	movt	r1, #5
   1e290:	bl	126c0 <fnmatch@plt>
   1e294:	cmp	r0, #0
   1e298:	beq	1e324 <__assert_fail@plt+0xb874>
   1e29c:	movw	r0, #1823	; 0x71f
   1e2a0:	movw	r1, #1819	; 0x71b
   1e2a4:	mov	r2, #16
   1e2a8:	movt	r0, #5
   1e2ac:	movt	r1, #5
   1e2b0:	bl	126c0 <fnmatch@plt>
   1e2b4:	cmp	r0, #0
   1e2b8:	bne	1e324 <__assert_fail@plt+0xb874>
   1e2bc:	mov	r0, #1
   1e2c0:	strb	r0, [r6]
   1e2c4:	movw	r0, #2233	; 0x8b9
   1e2c8:	movw	r1, #2239	; 0x8bf
   1e2cc:	mov	r2, r4
   1e2d0:	movt	r0, #5
   1e2d4:	movt	r1, #5
   1e2d8:	bl	1ff8c <__assert_fail@plt+0xd4dc>
   1e2dc:	mov	r0, r5
   1e2e0:	mov	r1, r4
   1e2e4:	bl	18554 <__assert_fail@plt+0x5aa4>
   1e2e8:	movw	r1, #1796	; 0x704
   1e2ec:	mov	r5, r0
   1e2f0:	str	r4, [r0, #40]	; 0x28
   1e2f4:	mov	r0, #0
   1e2f8:	movt	r1, #5
   1e2fc:	strh	r0, [r5, #18]
   1e300:	mov	r0, r4
   1e304:	bl	129e4 <strpbrk@plt>
   1e308:	add	r1, pc, #56	; 0x38
   1e30c:	cmp	r0, #0
   1e310:	addeq	r1, r1, #4
   1e314:	ldr	r0, [r1]
   1e318:	str	r0, [r5, #28]
   1e31c:	mov	r0, #1
   1e320:	pop	{r4, r5, r6, sl, fp, pc}
   1e324:	movw	r1, #1827	; 0x723
   1e328:	mov	r0, #0
   1e32c:	mov	r2, #5
   1e330:	movt	r1, #5
   1e334:	bl	12564 <dcgettext@plt>
   1e338:	mov	r2, r0
   1e33c:	mov	r0, #1
   1e340:	mov	r1, #0
   1e344:	bl	1269c <error@plt>
   1e348:	svccc	0x004ccccd
   1e34c:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e350:	push	{r4, r5, r6, sl, fp, lr}
   1e354:	add	fp, sp, #16
   1e358:	sub	sp, sp, #104	; 0x68
   1e35c:	mov	r4, r0
   1e360:	mov	r0, sp
   1e364:	mov	r6, r2
   1e368:	mov	r5, r1
   1e36c:	bl	189fc <__assert_fail@plt+0x5f4c>
   1e370:	mov	r0, #0
   1e374:	cmp	r5, #0
   1e378:	beq	1e420 <__assert_fail@plt+0xb970>
   1e37c:	ldr	r1, [r6]
   1e380:	ldr	r5, [r5, r1, lsl #2]
   1e384:	cmp	r5, #0
   1e388:	beq	1e420 <__assert_fail@plt+0xb970>
   1e38c:	add	r0, r1, #1
   1e390:	mov	r1, sp
   1e394:	str	r0, [r6]
   1e398:	movw	r6, #20084	; 0x4e74
   1e39c:	mov	r0, r5
   1e3a0:	movt	r6, #6
   1e3a4:	ldr	r2, [r6, #52]	; 0x34
   1e3a8:	blx	r2
   1e3ac:	cmp	r0, #0
   1e3b0:	bne	1e428 <__assert_fail@plt+0xb978>
   1e3b4:	mov	r0, r4
   1e3b8:	mov	r1, r5
   1e3bc:	bl	18554 <__assert_fail@plt+0x5aa4>
   1e3c0:	ldr	r1, [sp, #80]	; 0x50
   1e3c4:	ldr	r2, [sp, #84]	; 0x54
   1e3c8:	mov	r3, #3
   1e3cc:	mov	r5, #0
   1e3d0:	vldr	s0, [pc, #104]	; 1e440 <__assert_fail@plt+0xb990>
   1e3d4:	str	r3, [r0, #40]	; 0x28
   1e3d8:	str	r5, [r0, #44]	; 0x2c
   1e3dc:	movw	r3, #10111	; 0x277f
   1e3e0:	movt	r3, #133	; 0x85
   1e3e4:	str	r1, [r0, #48]	; 0x30
   1e3e8:	str	r2, [r0, #52]	; 0x34
   1e3ec:	ldr	r1, [r6, #28]
   1e3f0:	ldr	r2, [sp, #80]	; 0x50
   1e3f4:	sub	r1, r1, r2
   1e3f8:	add	r2, pc, #56	; 0x38
   1e3fc:	cmp	r1, r3
   1e400:	addgt	r2, r2, #4
   1e404:	vldr	s2, [r2]
   1e408:	movw	r2, #20864	; 0x5180
   1e40c:	movt	r2, #1
   1e410:	cmp	r1, r2
   1e414:	vselge.f32	s0, s2, s0
   1e418:	vstr	s0, [r0, #28]
   1e41c:	mov	r0, #1
   1e420:	sub	sp, fp, #16
   1e424:	pop	{r4, r5, r6, sl, fp, pc}
   1e428:	bl	12804 <__errno_location@plt>
   1e42c:	ldr	r0, [r0]
   1e430:	mov	r1, r5
   1e434:	bl	19f68 <__assert_fail@plt+0x74b8>
   1e438:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e43c:			; <UNDEFINED> instruction: 0x3e99999a
   1e440:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e444:	push	{fp, lr}
   1e448:	mov	fp, sp
   1e44c:	movw	r0, #20084	; 0x4e74
   1e450:	mov	r1, #1
   1e454:	movt	r0, #6
   1e458:	strb	r1, [r0, #12]
   1e45c:	movw	r1, #19676	; 0x4cdc
   1e460:	movt	r1, #6
   1e464:	ldr	r0, [r1]
   1e468:	cmp	r0, #0
   1e46c:	bne	1e480 <__assert_fail@plt+0xb9d0>
   1e470:	movw	r0, #3196	; 0xc7c
   1e474:	movt	r0, #5
   1e478:	add	r0, r0, #1296	; 0x510
   1e47c:	str	r0, [r1]
   1e480:	bl	185b4 <__assert_fail@plt+0x5b04>
   1e484:	mov	r1, #1065353216	; 0x3f800000
   1e488:	str	r1, [r0, #28]
   1e48c:	mov	r1, #0
   1e490:	strh	r1, [r0, #18]
   1e494:	mov	r0, #1
   1e498:	pop	{fp, pc}
   1e49c:	push	{fp, lr}
   1e4a0:	mov	fp, sp
   1e4a4:	mov	r1, #0
   1e4a8:	bl	18554 <__assert_fail@plt+0x5aa4>
   1e4ac:	movw	r1, #46871	; 0xb717
   1e4b0:	movt	r1, #14545	; 0x38d1
   1e4b4:	str	r1, [r0, #28]
   1e4b8:	mov	r0, #1
   1e4bc:	pop	{fp, pc}
   1e4c0:	push	{fp, lr}
   1e4c4:	mov	fp, sp
   1e4c8:	bl	185b4 <__assert_fail@plt+0x5b04>
   1e4cc:	movw	r1, #4719	; 0x126f
   1e4d0:	movt	r1, #14979	; 0x3a83
   1e4d4:	str	r1, [r0, #28]
   1e4d8:	mov	r0, #1
   1e4dc:	pop	{fp, pc}
   1e4e0:	push	{r4, sl, fp, lr}
   1e4e4:	add	fp, sp, #8
   1e4e8:	movw	r0, #20084	; 0x4e74
   1e4ec:	movw	r1, #19676	; 0x4cdc
   1e4f0:	mov	r4, #0
   1e4f4:	movt	r0, #6
   1e4f8:	movt	r1, #6
   1e4fc:	strb	r4, [r0, #14]
   1e500:	ldr	r0, [r1]
   1e504:	cmp	r0, #0
   1e508:	bne	1e51c <__assert_fail@plt+0xba6c>
   1e50c:	movw	r0, #3196	; 0xc7c
   1e510:	movt	r0, #5
   1e514:	add	r0, r0, #1296	; 0x510
   1e518:	str	r0, [r1]
   1e51c:	bl	185b4 <__assert_fail@plt+0x5b04>
   1e520:	mov	r1, #1065353216	; 0x3f800000
   1e524:	str	r1, [r0, #28]
   1e528:	strh	r4, [r0, #18]
   1e52c:	mov	r0, #1
   1e530:	pop	{r4, sl, fp, pc}
   1e534:	push	{r4, sl, fp, lr}
   1e538:	add	fp, sp, #8
   1e53c:	movw	r0, #20084	; 0x4e74
   1e540:	movw	r1, #19676	; 0x4cdc
   1e544:	mov	r4, #0
   1e548:	movt	r0, #6
   1e54c:	movt	r1, #6
   1e550:	strb	r4, [r0, #16]
   1e554:	ldr	r0, [r1]
   1e558:	cmp	r0, #0
   1e55c:	bne	1e570 <__assert_fail@plt+0xbac0>
   1e560:	movw	r0, #3196	; 0xc7c
   1e564:	movt	r0, #5
   1e568:	add	r0, r0, #1296	; 0x510
   1e56c:	str	r0, [r1]
   1e570:	bl	185b4 <__assert_fail@plt+0x5b04>
   1e574:	mov	r1, #1065353216	; 0x3f800000
   1e578:	str	r1, [r0, #28]
   1e57c:	strh	r4, [r0, #18]
   1e580:	mov	r0, #1
   1e584:	pop	{r4, sl, fp, pc}
   1e588:	push	{fp, lr}
   1e58c:	mov	fp, sp
   1e590:	movw	r0, #20084	; 0x4e74
   1e594:	mov	r1, #1
   1e598:	movt	r0, #6
   1e59c:	strb	r1, [r0, #16]
   1e5a0:	movw	r1, #19676	; 0x4cdc
   1e5a4:	movt	r1, #6
   1e5a8:	ldr	r0, [r1]
   1e5ac:	cmp	r0, #0
   1e5b0:	bne	1e5c4 <__assert_fail@plt+0xbb14>
   1e5b4:	movw	r0, #3196	; 0xc7c
   1e5b8:	movt	r0, #5
   1e5bc:	add	r0, r0, #1296	; 0x510
   1e5c0:	str	r0, [r1]
   1e5c4:	bl	185b4 <__assert_fail@plt+0x5b04>
   1e5c8:	mov	r1, #1065353216	; 0x3f800000
   1e5cc:	str	r1, [r0, #28]
   1e5d0:	mov	r1, #0
   1e5d4:	strh	r1, [r0, #18]
   1e5d8:	mov	r0, #1
   1e5dc:	pop	{fp, pc}
   1e5e0:	push	{fp, lr}
   1e5e4:	mov	fp, sp
   1e5e8:	bl	17de4 <__assert_fail@plt+0x5334>
   1e5ec:	mov	r2, #3
   1e5f0:	mov	r1, #2
   1e5f4:	str	r2, [r0, #8]
   1e5f8:	str	r1, [r0, #12]
   1e5fc:	movw	r1, #19020	; 0x4a4c
   1e600:	movt	r1, #1
   1e604:	str	r1, [r0]
   1e608:	mov	r1, #0
   1e60c:	strh	r1, [r0, #18]
   1e610:	mov	r0, #1
   1e614:	pop	{fp, pc}
   1e618:	mov	r3, r2
   1e61c:	mov	r2, r1
   1e620:	mov	r1, r0
   1e624:	movw	r0, #55856	; 0xda30
   1e628:	movt	r0, #4
   1e62c:	b	1f550 <__assert_fail@plt+0xcaa0>
   1e630:	mov	r3, r2
   1e634:	mov	r2, r1
   1e638:	mov	r1, r0
   1e63c:	movw	r0, #53476	; 0xd0e4
   1e640:	movt	r0, #4
   1e644:	b	1f550 <__assert_fail@plt+0xcaa0>
   1e648:	push	{fp, lr}
   1e64c:	mov	fp, sp
   1e650:	sub	sp, sp, #8
   1e654:	movw	r3, #19100	; 0x4a9c
   1e658:	movt	r3, #1
   1e65c:	str	r3, [sp]
   1e660:	movw	r3, #65435	; 0xff9b
   1e664:	movt	r3, #4
   1e668:	bl	20040 <__assert_fail@plt+0xd590>
   1e66c:	mov	sp, fp
   1e670:	pop	{fp, pc}
   1e674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e678:	add	fp, sp, #28
   1e67c:	sub	sp, sp, #4
   1e680:	vpush	{d8}
   1e684:	sub	sp, sp, #8
   1e688:	mov	r6, #0
   1e68c:	cmp	r1, #0
   1e690:	beq	1e7e4 <__assert_fail@plt+0xbd34>
   1e694:	mov	r8, r0
   1e698:	ldr	r0, [r2]
   1e69c:	ldr	r4, [r1, r0, lsl #2]
   1e6a0:	cmp	r4, #0
   1e6a4:	beq	1e7e4 <__assert_fail@plt+0xbd34>
   1e6a8:	add	r0, r0, #1
   1e6ac:	str	r0, [r2]
   1e6b0:	ldrb	r0, [r4]
   1e6b4:	cmp	r0, #45	; 0x2d
   1e6b8:	beq	1e6e4 <__assert_fail@plt+0xbc34>
   1e6bc:	cmp	r0, #47	; 0x2f
   1e6c0:	bne	1e704 <__assert_fail@plt+0xbc54>
   1e6c4:	vldr	s16, [pc, #372]	; 1e840 <__assert_fail@plt+0xbd90>
   1e6c8:	mov	r0, #1
   1e6cc:	mov	sl, #1
   1e6d0:	add	r0, r4, r0
   1e6d4:	bl	27bd4 <__assert_fail@plt+0x15124>
   1e6d8:	cmp	r0, #0
   1e6dc:	bne	1e720 <__assert_fail@plt+0xbc70>
   1e6e0:	b	1e7f8 <__assert_fail@plt+0xbd48>
   1e6e4:	vldr	s16, [pc, #336]	; 1e83c <__assert_fail@plt+0xbd8c>
   1e6e8:	mov	sl, #0
   1e6ec:	mov	r0, #1
   1e6f0:	add	r0, r4, r0
   1e6f4:	bl	27bd4 <__assert_fail@plt+0x15124>
   1e6f8:	cmp	r0, #0
   1e6fc:	bne	1e720 <__assert_fail@plt+0xbc70>
   1e700:	b	1e7f8 <__assert_fail@plt+0xbd48>
   1e704:	vldr	s16, [pc, #312]	; 1e844 <__assert_fail@plt+0xbd94>
   1e708:	mov	sl, #2
   1e70c:	mov	r0, #0
   1e710:	add	r0, r4, r0
   1e714:	bl	27bd4 <__assert_fail@plt+0x15124>
   1e718:	cmp	r0, #0
   1e71c:	beq	1e7f8 <__assert_fail@plt+0xbd48>
   1e720:	mov	r7, r0
   1e724:	ldrb	r0, [r4]
   1e728:	cmp	r0, #43	; 0x2b
   1e72c:	bne	1e740 <__assert_fail@plt+0xbc90>
   1e730:	ldrb	r0, [r4, #1]
   1e734:	and	r0, r0, #248	; 0xf8
   1e738:	cmp	r0, #48	; 0x30
   1e73c:	beq	1e7f8 <__assert_fail@plt+0xbd48>
   1e740:	mov	r5, #0
   1e744:	mov	r0, #0
   1e748:	mov	r1, #0
   1e74c:	mov	r2, #0
   1e750:	mov	r3, r7
   1e754:	str	r5, [sp]
   1e758:	bl	28094 <__assert_fail@plt+0x155e4>
   1e75c:	mov	r9, r0
   1e760:	mov	r0, #0
   1e764:	mov	r1, #1
   1e768:	mov	r2, #0
   1e76c:	mov	r3, r7
   1e770:	str	r5, [sp]
   1e774:	mov	r6, #1
   1e778:	bl	28094 <__assert_fail@plt+0x155e4>
   1e77c:	mov	r5, r0
   1e780:	mov	r0, r7
   1e784:	bl	32910 <__assert_fail@plt+0x1fe60>
   1e788:	orrs	r0, r5, r9
   1e78c:	ldrbeq	r0, [r4]
   1e790:	cmpeq	r0, #47	; 0x2f
   1e794:	bne	1e7c8 <__assert_fail@plt+0xbd18>
   1e798:	movw	r1, #2266	; 0x8da
   1e79c:	mov	r0, #0
   1e7a0:	mov	r2, #5
   1e7a4:	mov	sl, #0
   1e7a8:	movt	r1, #5
   1e7ac:	bl	12564 <dcgettext@plt>
   1e7b0:	mov	r2, r0
   1e7b4:	mov	r0, #0
   1e7b8:	mov	r1, #0
   1e7bc:	mov	r3, r4
   1e7c0:	bl	1269c <error@plt>
   1e7c4:	vldr	s16, [pc, #124]	; 1e848 <__assert_fail@plt+0xbd98>
   1e7c8:	mov	r0, r8
   1e7cc:	mov	r1, r4
   1e7d0:	bl	18554 <__assert_fail@plt+0x5aa4>
   1e7d4:	str	sl, [r0, #40]	; 0x28
   1e7d8:	str	r9, [r0, #44]	; 0x2c
   1e7dc:	str	r5, [r0, #48]	; 0x30
   1e7e0:	vstr	s16, [r0, #28]
   1e7e4:	mov	r0, r6
   1e7e8:	sub	sp, fp, #40	; 0x28
   1e7ec:	vpop	{d8}
   1e7f0:	add	sp, sp, #4
   1e7f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e7f8:	movw	r1, #2250	; 0x8ca
   1e7fc:	mov	r0, #0
   1e800:	mov	r2, #5
   1e804:	movt	r1, #5
   1e808:	bl	12564 <dcgettext@plt>
   1e80c:	mov	r5, r0
   1e810:	movw	r0, #20084	; 0x4e74
   1e814:	mov	r2, r4
   1e818:	movt	r0, #6
   1e81c:	ldr	r1, [r0, #72]	; 0x48
   1e820:	mov	r0, #0
   1e824:	bl	2efe4 <__assert_fail@plt+0x1c534>
   1e828:	mov	r3, r0
   1e82c:	mov	r0, #1
   1e830:	mov	r1, #0
   1e834:	mov	r2, r5
   1e838:	bl	1269c <error@plt>
   1e83c:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1e840:			; <UNDEFINED> instruction: 0x3e99999a
   1e844:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e848:	svccc	0x007fa440
   1e84c:	push	{r4, r5, fp, lr}
   1e850:	add	fp, sp, #8
   1e854:	mov	r1, #0
   1e858:	mov	r5, #0
   1e85c:	bl	18554 <__assert_fail@plt+0x5aa4>
   1e860:	mov	r4, r0
   1e864:	add	r1, r0, #40	; 0x28
   1e868:	movw	r0, #1492	; 0x5d4
   1e86c:	movt	r0, #5
   1e870:	bl	1fd2c <__assert_fail@plt+0xd27c>
   1e874:	mov	r0, #1
   1e878:	strb	r5, [r4, #19]
   1e87c:	strb	r0, [r4, #16]
   1e880:	strh	r0, [r4, #17]
   1e884:	mov	r0, #1065353216	; 0x3f800000
   1e888:	str	r0, [r4, #28]
   1e88c:	mov	r0, #1
   1e890:	pop	{r4, r5, fp, pc}
   1e894:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e898:	add	fp, sp, #24
   1e89c:	sub	sp, sp, #24
   1e8a0:	mov	r5, r0
   1e8a4:	mov	r0, #0
   1e8a8:	cmp	r1, #0
   1e8ac:	beq	1e904 <__assert_fail@plt+0xbe54>
   1e8b0:	ldr	r7, [r2]
   1e8b4:	mov	r4, r2
   1e8b8:	ldr	r6, [r1, r7, lsl #2]
   1e8bc:	cmp	r6, #0
   1e8c0:	beq	1e904 <__assert_fail@plt+0xbe54>
   1e8c4:	add	r0, r7, #1
   1e8c8:	add	r8, sp, #4
   1e8cc:	str	r0, [r4]
   1e8d0:	movw	r0, #1492	; 0x5d4
   1e8d4:	mov	r1, r8
   1e8d8:	movt	r0, #5
   1e8dc:	bl	1fd2c <__assert_fail@plt+0xd27c>
   1e8e0:	mov	r0, r8
   1e8e4:	mov	r1, r5
   1e8e8:	mov	r2, r6
   1e8ec:	bl	1a6e8 <__assert_fail@plt+0x7c38>
   1e8f0:	mov	r1, r0
   1e8f4:	mov	r0, #1
   1e8f8:	cmp	r1, #0
   1e8fc:	moveq	r0, #0
   1e900:	streq	r7, [r4]
   1e904:	sub	sp, fp, #24
   1e908:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e90c:	push	{fp, lr}
   1e910:	mov	fp, sp
   1e914:	bl	185b4 <__assert_fail@plt+0x5b04>
   1e918:	movw	r1, #20084	; 0x4e74
   1e91c:	movt	r1, #6
   1e920:	ldrb	r1, [r1]
   1e924:	cmp	r1, #0
   1e928:	moveq	r1, #0
   1e92c:	strheq	r1, [r0, #18]
   1e930:	mov	r1, #1
   1e934:	strh	r1, [r0, #16]
   1e938:	mov	r0, #1
   1e93c:	pop	{fp, pc}
   1e940:	push	{fp, lr}
   1e944:	mov	fp, sp
   1e948:	bl	185b4 <__assert_fail@plt+0x5b04>
   1e94c:	mov	r1, #1065353216	; 0x3f800000
   1e950:	str	r1, [r0, #28]
   1e954:	mov	r1, #1
   1e958:	str	r1, [r0, #16]
   1e95c:	mov	r0, #1
   1e960:	pop	{fp, pc}
   1e964:	mov	ip, r2
   1e968:	mov	r2, r0
   1e96c:	movw	r0, #20084	; 0x4e74
   1e970:	movt	r0, #6
   1e974:	ldr	r3, [r0, #60]	; 0x3c
   1e978:	mov	r0, r1
   1e97c:	mov	r1, ip
   1e980:	b	20218 <__assert_fail@plt+0xd768>
   1e984:	push	{fp, lr}
   1e988:	mov	fp, sp
   1e98c:	mov	r0, #0
   1e990:	cmp	r1, #0
   1e994:	beq	1ea00 <__assert_fail@plt+0xbf50>
   1e998:	ldr	r3, [r2]
   1e99c:	ldr	r1, [r1, r3, lsl #2]
   1e9a0:	cmp	r1, #0
   1e9a4:	popeq	{fp, pc}
   1e9a8:	add	r0, r3, #1
   1e9ac:	str	r0, [r2]
   1e9b0:	mov	r0, r1
   1e9b4:	bl	22cf8 <__assert_fail@plt+0x10248>
   1e9b8:	movw	r1, #20084	; 0x4e74
   1e9bc:	movt	r1, #6
   1e9c0:	str	r0, [r1, #60]	; 0x3c
   1e9c4:	movw	r1, #19676	; 0x4cdc
   1e9c8:	movt	r1, #6
   1e9cc:	ldr	r0, [r1]
   1e9d0:	cmp	r0, #0
   1e9d4:	bne	1e9e8 <__assert_fail@plt+0xbf38>
   1e9d8:	movw	r0, #3196	; 0xc7c
   1e9dc:	movt	r0, #5
   1e9e0:	add	r0, r0, #1296	; 0x510
   1e9e4:	str	r0, [r1]
   1e9e8:	bl	185b4 <__assert_fail@plt+0x5b04>
   1e9ec:	mov	r1, #1065353216	; 0x3f800000
   1e9f0:	str	r1, [r0, #28]
   1e9f4:	mov	r1, #0
   1e9f8:	strh	r1, [r0, #18]
   1e9fc:	mov	r0, #1
   1ea00:	pop	{fp, pc}
   1ea04:	push	{r4, r5, r6, r7, fp, lr}
   1ea08:	add	fp, sp, #16
   1ea0c:	sub	sp, sp, #208	; 0xd0
   1ea10:	mov	r5, r0
   1ea14:	add	r0, sp, #104	; 0x68
   1ea18:	mov	r6, r2
   1ea1c:	mov	r4, r1
   1ea20:	bl	189fc <__assert_fail@plt+0x5f4c>
   1ea24:	mov	r0, #0
   1ea28:	cmp	r4, #0
   1ea2c:	beq	1ebb4 <__assert_fail@plt+0xc104>
   1ea30:	ldr	r1, [r6]
   1ea34:	ldr	r4, [r4, r1, lsl #2]
   1ea38:	cmp	r4, #0
   1ea3c:	beq	1ebb4 <__assert_fail@plt+0xc104>
   1ea40:	movw	r7, #20084	; 0x4e74
   1ea44:	add	r0, r1, #1
   1ea48:	add	r1, sp, #104	; 0x68
   1ea4c:	movt	r7, #6
   1ea50:	str	r0, [r6]
   1ea54:	mov	r0, r4
   1ea58:	ldr	r2, [r7, #52]	; 0x34
   1ea5c:	blx	r2
   1ea60:	cmp	r0, #0
   1ea64:	bne	1ebbc <__assert_fail@plt+0xc10c>
   1ea68:	mov	r0, sp
   1ea6c:	bl	189fc <__assert_fail@plt+0x5f4c>
   1ea70:	ldr	r0, [r7, #48]	; 0x30
   1ea74:	mov	r1, #0
   1ea78:	cmp	r0, #0
   1ea7c:	bne	1eaa8 <__assert_fail@plt+0xbff8>
   1ea80:	ldrb	r0, [r7, #56]	; 0x38
   1ea84:	mov	r1, #32768	; 0x8000
   1ea88:	cmp	r0, #0
   1ea8c:	bne	1eaa8 <__assert_fail@plt+0xbff8>
   1ea90:	ldr	r0, [sp, #120]	; 0x78
   1ea94:	mvn	r6, #1
   1ea98:	mov	r1, #0
   1ea9c:	and	r0, r0, #61440	; 0xf000
   1eaa0:	cmp	r0, #40960	; 0xa000
   1eaa4:	beq	1eb6c <__assert_fail@plt+0xc0bc>
   1eaa8:	mov	r0, r4
   1eaac:	bl	21b08 <__assert_fail@plt+0xf058>
   1eab0:	mov	r6, r0
   1eab4:	cmp	r0, #0
   1eab8:	bmi	1eb6c <__assert_fail@plt+0xc0bc>
   1eabc:	mov	r2, sp
   1eac0:	mov	r0, #3
   1eac4:	mov	r1, r6
   1eac8:	bl	1260c <__fxstat64@plt>
   1eacc:	cmp	r0, #0
   1ead0:	bne	1ebbc <__assert_fail@plt+0xc10c>
   1ead4:	ldr	r2, [r7, #52]	; 0x34
   1ead8:	add	r1, sp, #104	; 0x68
   1eadc:	mov	r0, r4
   1eae0:	blx	r2
   1eae4:	cmp	r0, #0
   1eae8:	bne	1ebbc <__assert_fail@plt+0xc10c>
   1eaec:	ldr	r0, [r7, #48]	; 0x30
   1eaf0:	cmp	r0, #0
   1eaf4:	ldrbeq	r0, [r7, #56]	; 0x38
   1eaf8:	cmpeq	r0, #0
   1eafc:	beq	1eb14 <__assert_fail@plt+0xc064>
   1eb00:	add	r0, sp, #104	; 0x68
   1eb04:	mov	r1, sp
   1eb08:	mov	r2, #104	; 0x68
   1eb0c:	bl	124e0 <memcpy@plt>
   1eb10:	b	1eb6c <__assert_fail@plt+0xc0bc>
   1eb14:	ldr	r0, [sp, #120]	; 0x78
   1eb18:	and	r0, r0, #61440	; 0xf000
   1eb1c:	cmp	r0, #40960	; 0xa000
   1eb20:	beq	1eb60 <__assert_fail@plt+0xc0b0>
   1eb24:	ldr	r2, [sp, #104]	; 0x68
   1eb28:	ldr	r3, [sp, #108]	; 0x6c
   1eb2c:	ldm	sp, {r0, r1}
   1eb30:	eor	r1, r3, r1
   1eb34:	eor	r0, r2, r0
   1eb38:	orrs	r0, r0, r1
   1eb3c:	bne	1eb60 <__assert_fail@plt+0xc0b0>
   1eb40:	ldr	r0, [sp, #96]	; 0x60
   1eb44:	ldr	r2, [sp, #200]	; 0xc8
   1eb48:	ldr	r1, [sp, #100]	; 0x64
   1eb4c:	ldr	r3, [sp, #204]	; 0xcc
   1eb50:	eor	r1, r3, r1
   1eb54:	eor	r0, r2, r0
   1eb58:	orrs	r0, r0, r1
   1eb5c:	beq	1eb6c <__assert_fail@plt+0xc0bc>
   1eb60:	mov	r0, r6
   1eb64:	bl	12a68 <close@plt>
   1eb68:	mvn	r6, #0
   1eb6c:	mov	r0, r5
   1eb70:	mov	r1, r4
   1eb74:	bl	18554 <__assert_fail@plt+0x5aa4>
   1eb78:	mov	r1, r0
   1eb7c:	ldr	r0, [sp, #200]	; 0xc8
   1eb80:	ldr	r2, [sp, #204]	; 0xcc
   1eb84:	movw	r7, #55050	; 0xd70a
   1eb88:	movt	r7, #15395	; 0x3c23
   1eb8c:	str	r0, [r1, #40]	; 0x28
   1eb90:	str	r2, [r1, #44]	; 0x2c
   1eb94:	mov	r0, #1
   1eb98:	ldr	r2, [sp, #104]	; 0x68
   1eb9c:	ldr	r3, [sp, #108]	; 0x6c
   1eba0:	str	r6, [r1, #56]	; 0x38
   1eba4:	strh	r0, [r1, #18]
   1eba8:	str	r7, [r1, #28]
   1ebac:	str	r2, [r1, #48]	; 0x30
   1ebb0:	str	r3, [r1, #52]	; 0x34
   1ebb4:	sub	sp, fp, #16
   1ebb8:	pop	{r4, r5, r6, r7, fp, pc}
   1ebbc:	bl	12804 <__errno_location@plt>
   1ebc0:	ldr	r0, [r0]
   1ebc4:	mov	r1, r4
   1ebc8:	bl	19f68 <__assert_fail@plt+0x74b8>
   1ebcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ebd0:	add	fp, sp, #28
   1ebd4:	sub	sp, sp, #20
   1ebd8:	mov	r8, r0
   1ebdc:	mov	r0, #0
   1ebe0:	cmp	r1, #0
   1ebe4:	beq	1ee44 <__assert_fail@plt+0xc394>
   1ebe8:	mov	r7, r1
   1ebec:	ldr	r1, [r2]
   1ebf0:	mov	r4, r2
   1ebf4:	ldr	r5, [r7, r1, lsl #2]
   1ebf8:	cmp	r5, #0
   1ebfc:	beq	1ee44 <__assert_fail@plt+0xc394>
   1ec00:	mov	r0, r5
   1ec04:	bl	127bc <strlen@plt>
   1ec08:	cmp	r0, #0
   1ec0c:	beq	1ef18 <__assert_fail@plt+0xc468>
   1ec10:	sub	r6, r0, #1
   1ec14:	ldrb	r0, [r5, r6]
   1ec18:	sub	r0, r0, #48	; 0x30
   1ec1c:	cmp	r0, #71	; 0x47
   1ec20:	bhi	1eee8 <__assert_fail@plt+0xc438>
   1ec24:	add	r1, pc, #8
   1ec28:	mov	sl, #512	; 0x200
   1ec2c:	mov	r9, #0
   1ec30:	ldr	pc, [r1, r0, lsl #2]
   1ec34:	andeq	lr, r1, r4, asr sp
   1ec38:	andeq	lr, r1, r4, asr sp
   1ec3c:	andeq	lr, r1, r4, asr sp
   1ec40:	andeq	lr, r1, r4, asr sp
   1ec44:	andeq	lr, r1, r4, asr sp
   1ec48:	andeq	lr, r1, r4, asr sp
   1ec4c:	andeq	lr, r1, r4, asr sp
   1ec50:	andeq	lr, r1, r4, asr sp
   1ec54:	andeq	lr, r1, r4, asr sp
   1ec58:	andeq	lr, r1, r4, asr sp
   1ec5c:	andeq	lr, r1, r8, ror #29
   1ec60:	andeq	lr, r1, r8, ror #29
   1ec64:	andeq	lr, r1, r8, ror #29
   1ec68:	andeq	lr, r1, r8, ror #29
   1ec6c:	andeq	lr, r1, r8, ror #29
   1ec70:	andeq	lr, r1, r8, ror #29
   1ec74:	andeq	lr, r1, r8, ror #29
   1ec78:	andeq	lr, r1, r8, ror #29
   1ec7c:	andeq	lr, r1, r8, ror #29
   1ec80:	andeq	lr, r1, r8, ror #29
   1ec84:	andeq	lr, r1, r8, ror #29
   1ec88:	andeq	lr, r1, r8, ror #29
   1ec8c:	andeq	lr, r1, r8, ror #29
   1ec90:	andeq	lr, r1, r8, lsl #29
   1ec94:	andeq	lr, r1, r8, ror #29
   1ec98:	andeq	lr, r1, r8, ror #29
   1ec9c:	andeq	lr, r1, r8, ror #29
   1eca0:	andeq	lr, r1, r8, ror #29
   1eca4:	andeq	lr, r1, r8, ror #29
   1eca8:	andeq	lr, r1, r8, ror sp
   1ecac:	andeq	lr, r1, r8, ror #29
   1ecb0:	andeq	lr, r1, r8, ror #29
   1ecb4:	andeq	lr, r1, r8, ror #29
   1ecb8:	andeq	lr, r1, r8, ror #29
   1ecbc:	andeq	lr, r1, r8, ror #29
   1ecc0:	andeq	lr, r1, r8, ror #29
   1ecc4:	andeq	lr, r1, r8, ror #29
   1ecc8:	andeq	lr, r1, r8, ror #29
   1eccc:	andeq	lr, r1, r8, ror #29
   1ecd0:	andeq	lr, r1, r8, ror #29
   1ecd4:	andeq	lr, r1, r8, ror #29
   1ecd8:	andeq	lr, r1, r8, ror #29
   1ecdc:	andeq	lr, r1, r8, ror #29
   1ece0:	andeq	lr, r1, r8, ror #29
   1ece4:	andeq	lr, r1, r8, ror #29
   1ece8:	andeq	lr, r1, r8, ror #29
   1ecec:	andeq	lr, r1, r8, ror #29
   1ecf0:	andeq	lr, r1, r8, ror #29
   1ecf4:	andeq	lr, r1, r8, ror #29
   1ecf8:	andeq	lr, r1, r8, ror #29
   1ecfc:	andeq	lr, r1, ip, asr #28
   1ed00:	andeq	lr, r1, r8, lsr #29
   1ed04:	andeq	lr, r1, r8, ror #29
   1ed08:	andeq	lr, r1, r8, ror #29
   1ed0c:	andeq	lr, r1, r8, ror #29
   1ed10:	andeq	lr, r1, r8, ror #29
   1ed14:	andeq	lr, r1, r8, ror #29
   1ed18:	andeq	lr, r1, r8, ror #29
   1ed1c:	andeq	lr, r1, r8, ror #29
   1ed20:	andeq	lr, r1, r8, asr #29
   1ed24:	andeq	lr, r1, r8, ror #29
   1ed28:	andeq	lr, r1, r8, ror #29
   1ed2c:	andeq	lr, r1, r8, ror #29
   1ed30:	andeq	lr, r1, r8, ror #29
   1ed34:	andeq	lr, r1, r8, ror #29
   1ed38:	andeq	lr, r1, r8, ror #29
   1ed3c:	andeq	lr, r1, r8, ror #29
   1ed40:	andeq	lr, r1, r8, ror #29
   1ed44:	andeq	lr, r1, r8, ror #29
   1ed48:	andeq	lr, r1, r8, ror #29
   1ed4c:	andeq	lr, r1, r8, ror #29
   1ed50:	andeq	lr, r1, r8, ror #28
   1ed54:	ldrb	r0, [r5]
   1ed58:	cmp	r0, #45	; 0x2d
   1ed5c:	beq	1ed94 <__assert_fail@plt+0xc2e4>
   1ed60:	cmp	r0, #43	; 0x2b
   1ed64:	mov	r7, #2
   1ed68:	mov	r0, r5
   1ed6c:	addeq	r0, r5, #1
   1ed70:	moveq	r7, #0
   1ed74:	b	1ed9c <__assert_fail@plt+0xc2ec>
   1ed78:	mov	r0, #0
   1ed7c:	mov	sl, #1048576	; 0x100000
   1ed80:	mov	r9, #77	; 0x4d
   1ed84:	strb	r0, [r5, r6]
   1ed88:	ldrb	r0, [r5]
   1ed8c:	cmp	r0, #45	; 0x2d
   1ed90:	bne	1ed60 <__assert_fail@plt+0xc2b0>
   1ed94:	add	r0, r5, #1
   1ed98:	mov	r7, #1
   1ed9c:	movw	r1, #61103	; 0xeeaf
   1eda0:	add	r3, sp, #8
   1eda4:	mov	r2, #10
   1eda8:	movt	r1, #4
   1edac:	str	r1, [sp]
   1edb0:	add	r1, sp, #16
   1edb4:	bl	3158c <__assert_fail@plt+0x1eadc>
   1edb8:	cmp	r0, #0
   1edbc:	bne	1ef3c <__assert_fail@plt+0xc48c>
   1edc0:	mov	r0, r8
   1edc4:	mov	r1, r5
   1edc8:	bl	18554 <__assert_fail@plt+0x5aa4>
   1edcc:	ldr	r2, [sp, #8]
   1edd0:	ldr	r1, [sp, #12]
   1edd4:	mov	r3, #1
   1edd8:	cmp	r7, #1
   1eddc:	strh	r3, [r0, #18]
   1ede0:	str	r7, [r0, #40]	; 0x28
   1ede4:	str	sl, [r0, #44]	; 0x2c
   1ede8:	str	r2, [r0, #48]	; 0x30
   1edec:	str	r1, [r0, #52]	; 0x34
   1edf0:	beq	1ee0c <__assert_fail@plt+0xc35c>
   1edf4:	cmp	r7, #0
   1edf8:	bne	1ee2c <__assert_fail@plt+0xc37c>
   1edfc:	umull	r2, r3, r2, sl
   1ee00:	mla	r1, r1, sl, r3
   1ee04:	add	r3, pc, #376	; 0x178
   1ee08:	b	1ee18 <__assert_fail@plt+0xc368>
   1ee0c:	umull	r2, r3, r2, sl
   1ee10:	mla	r1, r1, sl, r3
   1ee14:	add	r3, pc, #352	; 0x160
   1ee18:	rsbs	r2, r2, #20480	; 0x5000
   1ee1c:	rscs	r1, r1, #0
   1ee20:	addcc	r3, r3, #4
   1ee24:	vldr	s0, [r3]
   1ee28:	b	1ee30 <__assert_fail@plt+0xc380>
   1ee2c:	vldr	s0, [pc, #324]	; 1ef78 <__assert_fail@plt+0xc4c8>
   1ee30:	vstr	s0, [r0, #28]
   1ee34:	ldr	r0, [r4]
   1ee38:	add	r0, r0, #1
   1ee3c:	str	r0, [r4]
   1ee40:	mov	r0, #1
   1ee44:	sub	sp, fp, #28
   1ee48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee4c:	mov	r0, #0
   1ee50:	mov	r9, #98	; 0x62
   1ee54:	strb	r0, [r5, r6]
   1ee58:	ldrb	r0, [r5]
   1ee5c:	cmp	r0, #45	; 0x2d
   1ee60:	bne	1ed60 <__assert_fail@plt+0xc2b0>
   1ee64:	b	1ed94 <__assert_fail@plt+0xc2e4>
   1ee68:	mov	r0, #0
   1ee6c:	mov	sl, #2
   1ee70:	mov	r9, #119	; 0x77
   1ee74:	strb	r0, [r5, r6]
   1ee78:	ldrb	r0, [r5]
   1ee7c:	cmp	r0, #45	; 0x2d
   1ee80:	bne	1ed60 <__assert_fail@plt+0xc2b0>
   1ee84:	b	1ed94 <__assert_fail@plt+0xc2e4>
   1ee88:	mov	r0, #0
   1ee8c:	mov	sl, #1073741824	; 0x40000000
   1ee90:	mov	r9, #71	; 0x47
   1ee94:	strb	r0, [r5, r6]
   1ee98:	ldrb	r0, [r5]
   1ee9c:	cmp	r0, #45	; 0x2d
   1eea0:	bne	1ed60 <__assert_fail@plt+0xc2b0>
   1eea4:	b	1ed94 <__assert_fail@plt+0xc2e4>
   1eea8:	mov	r0, #0
   1eeac:	mov	sl, #1
   1eeb0:	mov	r9, #99	; 0x63
   1eeb4:	strb	r0, [r5, r6]
   1eeb8:	ldrb	r0, [r5]
   1eebc:	cmp	r0, #45	; 0x2d
   1eec0:	bne	1ed60 <__assert_fail@plt+0xc2b0>
   1eec4:	b	1ed94 <__assert_fail@plt+0xc2e4>
   1eec8:	mov	r0, #0
   1eecc:	mov	sl, #1024	; 0x400
   1eed0:	mov	r9, #107	; 0x6b
   1eed4:	strb	r0, [r5, r6]
   1eed8:	ldrb	r0, [r5]
   1eedc:	cmp	r0, #45	; 0x2d
   1eee0:	bne	1ed60 <__assert_fail@plt+0xc2b0>
   1eee4:	b	1ed94 <__assert_fail@plt+0xc2e4>
   1eee8:	movw	r1, #2523	; 0x9db
   1eeec:	mov	r0, #0
   1eef0:	mov	r2, #5
   1eef4:	movt	r1, #5
   1eef8:	bl	12564 <dcgettext@plt>
   1eefc:	mov	r2, r0
   1ef00:	ldr	r0, [r4]
   1ef04:	mov	r1, #0
   1ef08:	ldr	r0, [r7, r0, lsl #2]
   1ef0c:	ldrb	r3, [r0, r6]
   1ef10:	mov	r0, #1
   1ef14:	bl	1269c <error@plt>
   1ef18:	movw	r1, #2492	; 0x9bc
   1ef1c:	mov	r0, #0
   1ef20:	mov	r2, #5
   1ef24:	movt	r1, #5
   1ef28:	bl	12564 <dcgettext@plt>
   1ef2c:	mov	r2, r0
   1ef30:	mov	r0, #1
   1ef34:	mov	r1, #0
   1ef38:	bl	1269c <error@plt>
   1ef3c:	movw	r1, #2547	; 0x9f3
   1ef40:	mov	r0, #0
   1ef44:	mov	r2, #5
   1ef48:	movt	r1, #5
   1ef4c:	strb	r0, [sp, #7]
   1ef50:	mov	r0, #0
   1ef54:	strb	r9, [sp, #6]
   1ef58:	bl	12564 <dcgettext@plt>
   1ef5c:	mov	r2, r0
   1ef60:	add	r0, sp, #6
   1ef64:	mov	r1, #0
   1ef68:	mov	r3, r5
   1ef6c:	str	r0, [sp]
   1ef70:	mov	r0, #1
   1ef74:	bl	1269c <error@plt>
   1ef78:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1ef7c:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ef80:	svccc	0x00666666
   1ef84:	svccc	0x00666666
   1ef88:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ef8c:	movw	r3, #20116	; 0x4e94
   1ef90:	mov	ip, r2
   1ef94:	mov	r2, r0
   1ef98:	mov	r0, r1
   1ef9c:	movt	r3, #1
   1efa0:	mov	r1, ip
   1efa4:	b	20458 <__assert_fail@plt+0xd9a8>
   1efa8:	push	{r4, sl, fp, lr}
   1efac:	add	fp, sp, #8
   1efb0:	mov	r4, r2
   1efb4:	mov	r2, r0
   1efb8:	mov	r0, r1
   1efbc:	mov	r1, r4
   1efc0:	bl	1fe2c <__assert_fail@plt+0xd37c>
   1efc4:	cmp	r0, #0
   1efc8:	beq	1eff0 <__assert_fail@plt+0xc540>
   1efcc:	add	r1, pc, #48	; 0x30
   1efd0:	ldrd	r2, [r0, #48]	; 0x30
   1efd4:	subs	r2, r2, #100	; 0x64
   1efd8:	sbcs	r2, r3, #0
   1efdc:	addcc	r1, r1, #4
   1efe0:	ldr	r1, [r1]
   1efe4:	str	r1, [r0, #28]
   1efe8:	mov	r0, #1
   1efec:	pop	{r4, sl, fp, pc}
   1eff0:	ldr	r0, [r4]
   1eff4:	sub	r0, r0, #1
   1eff8:	str	r0, [r4]
   1effc:	mov	r0, #0
   1f000:	pop	{r4, sl, fp, pc}
   1f004:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1f008:	svccc	0x007d70a4
   1f00c:	nop	{0}
   1f010:	push	{r4, r5, r6, sl, fp, lr}
   1f014:	add	fp, sp, #16
   1f018:	sub	sp, sp, #24
   1f01c:	mov	r5, r0
   1f020:	mov	r0, #0
   1f024:	cmp	r1, #0
   1f028:	beq	1f0c8 <__assert_fail@plt+0xc618>
   1f02c:	ldr	r3, [r2]
   1f030:	ldr	r4, [r1, r3, lsl #2]
   1f034:	cmp	r4, #0
   1f038:	beq	1f0c8 <__assert_fail@plt+0xc618>
   1f03c:	add	r0, r3, #1
   1f040:	vldr	d0, [pc, #176]	; 1f0f8 <__assert_fail@plt+0xc648>
   1f044:	add	r6, sp, #8
   1f048:	mov	r3, #0
   1f04c:	str	r0, [r2]
   1f050:	movw	r0, #287	; 0x11f
   1f054:	mov	r1, r6
   1f058:	mov	r2, #0
   1f05c:	movt	r0, #5
   1f060:	str	r0, [sp]
   1f064:	mov	r0, r4
   1f068:	bl	1f3e0 <__assert_fail@plt+0xc930>
   1f06c:	cmp	r0, #0
   1f070:	beq	1f0d0 <__assert_fail@plt+0xc620>
   1f074:	mov	r0, r5
   1f078:	mov	r1, r4
   1f07c:	bl	18554 <__assert_fail@plt+0x5aa4>
   1f080:	mov	r1, #8
   1f084:	movw	r3, #10111	; 0x277f
   1f088:	vldr	s0, [pc, #120]	; 1f108 <__assert_fail@plt+0xc658>
   1f08c:	vld1.64	{d16-d17}, [r6], r1
   1f090:	add	r1, r0, #40	; 0x28
   1f094:	movt	r3, #133	; 0x85
   1f098:	vst1.64	{d16-d17}, [r1]
   1f09c:	ldr	r1, [r6]
   1f0a0:	add	r2, pc, #88	; 0x58
   1f0a4:	cmp	r1, r3
   1f0a8:	addgt	r2, r2, #4
   1f0ac:	vldr	s2, [r2]
   1f0b0:	movw	r2, #20864	; 0x5180
   1f0b4:	movt	r2, #1
   1f0b8:	cmp	r1, r2
   1f0bc:	vselge.f32	s0, s2, s0
   1f0c0:	vstr	s0, [r0, #28]
   1f0c4:	mov	r0, #1
   1f0c8:	sub	sp, fp, #16
   1f0cc:	pop	{r4, r5, r6, sl, fp, pc}
   1f0d0:	movw	r1, #2954	; 0xb8a
   1f0d4:	mov	r0, #0
   1f0d8:	mov	r2, #5
   1f0dc:	movt	r1, #5
   1f0e0:	bl	12564 <dcgettext@plt>
   1f0e4:	mov	r2, r0
   1f0e8:	mov	r0, #1
   1f0ec:	mov	r1, #0
   1f0f0:	mov	r3, r4
   1f0f4:	bl	1269c <error@plt>
   1f0f8:	andeq	r0, r0, r0
   1f0fc:	rscsmi	r1, r5, r0, lsl #16
   1f100:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1f104:			; <UNDEFINED> instruction: 0x3e99999a
   1f108:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1f10c:	push	{r4, r5, r6, sl, fp, lr}
   1f110:	add	fp, sp, #16
   1f114:	mov	r5, r0
   1f118:	mov	r0, #0
   1f11c:	cmp	r1, #0
   1f120:	beq	1f1c0 <__assert_fail@plt+0xc710>
   1f124:	ldr	r3, [r2]
   1f128:	ldr	r4, [r1, r3, lsl #2]
   1f12c:	cmp	r4, #0
   1f130:	beq	1f1c0 <__assert_fail@plt+0xc710>
   1f134:	add	r0, r3, #1
   1f138:	str	r0, [r2]
   1f13c:	mov	r0, r4
   1f140:	bl	123d8 <getpwnam@plt>
   1f144:	mov	r6, r0
   1f148:	bl	12918 <endpwent@plt>
   1f14c:	cmp	r6, #0
   1f150:	beq	1f15c <__assert_fail@plt+0xc6ac>
   1f154:	ldr	r6, [r6, #8]
   1f158:	b	1f198 <__assert_fail@plt+0xc6e8>
   1f15c:	movw	r1, #1564	; 0x61c
   1f160:	mov	r0, r4
   1f164:	movt	r1, #5
   1f168:	bl	12aa4 <strspn@plt>
   1f16c:	cmp	r0, #0
   1f170:	beq	1f1c4 <__assert_fail@plt+0xc714>
   1f174:	ldrb	r0, [r4, r0]
   1f178:	cmp	r0, #0
   1f17c:	bne	1f1c4 <__assert_fail@plt+0xc714>
   1f180:	movw	r0, #20084	; 0x4e74
   1f184:	movt	r0, #6
   1f188:	ldr	r1, [r0, #72]	; 0x48
   1f18c:	mov	r0, r4
   1f190:	bl	233fc <__assert_fail@plt+0x1094c>
   1f194:	mov	r6, r0
   1f198:	mov	r0, r5
   1f19c:	mov	r1, r4
   1f1a0:	bl	18554 <__assert_fail@plt+0x5aa4>
   1f1a4:	str	r6, [r0, #40]	; 0x28
   1f1a8:	add	r1, pc, #136	; 0x88
   1f1ac:	cmp	r6, #100	; 0x64
   1f1b0:	addcc	r1, r1, #4
   1f1b4:	ldr	r1, [r1]
   1f1b8:	str	r1, [r0, #28]
   1f1bc:	mov	r0, #1
   1f1c0:	pop	{r4, r5, r6, sl, fp, pc}
   1f1c4:	ldrb	r0, [r4]
   1f1c8:	cmp	r0, #0
   1f1cc:	bne	1f1f4 <__assert_fail@plt+0xc744>
   1f1d0:	movw	r1, #3018	; 0xbca
   1f1d4:	mov	r0, #0
   1f1d8:	mov	r2, #5
   1f1dc:	movt	r1, #5
   1f1e0:	bl	12564 <dcgettext@plt>
   1f1e4:	mov	r2, r0
   1f1e8:	mov	r0, #1
   1f1ec:	mov	r1, #0
   1f1f0:	bl	1269c <error@plt>
   1f1f4:	movw	r1, #2983	; 0xba7
   1f1f8:	mov	r0, #0
   1f1fc:	mov	r2, #5
   1f200:	movt	r1, #5
   1f204:	bl	12564 <dcgettext@plt>
   1f208:	mov	r5, r0
   1f20c:	movw	r0, #20084	; 0x4e74
   1f210:	mov	r2, r4
   1f214:	movt	r0, #6
   1f218:	ldr	r1, [r0, #72]	; 0x48
   1f21c:	mov	r0, #0
   1f220:	bl	2efe4 <__assert_fail@plt+0x1c534>
   1f224:	mov	r3, r0
   1f228:	mov	r0, #1
   1f22c:	mov	r1, #0
   1f230:	mov	r2, r5
   1f234:	bl	1269c <error@plt>
   1f238:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1f23c:	svccc	0x007d70a4
   1f240:	push	{fp, lr}
   1f244:	mov	fp, sp
   1f248:	sub	sp, sp, #8
   1f24c:	movw	r3, #19100	; 0x4a9c
   1f250:	movt	r3, #1
   1f254:	str	r3, [sp]
   1f258:	movw	r3, #2240	; 0x8c0
   1f25c:	movt	r3, #5
   1f260:	bl	20040 <__assert_fail@plt+0xd590>
   1f264:	mov	sp, fp
   1f268:	pop	{fp, pc}
   1f26c:	movw	r3, #20568	; 0x5058
   1f270:	mov	ip, r2
   1f274:	mov	r2, r0
   1f278:	mov	r0, r1
   1f27c:	movt	r3, #1
   1f280:	mov	r1, ip
   1f284:	b	20458 <__assert_fail@plt+0xd9a8>
   1f288:	push	{fp, lr}
   1f28c:	mov	fp, sp
   1f290:	movw	r0, #56	; 0x38
   1f294:	movt	r0, #5
   1f298:	bl	1c624 <__assert_fail@plt+0x9b74>
   1f29c:	bl	185b4 <__assert_fail@plt+0x5b04>
   1f2a0:	mov	r1, #0
   1f2a4:	str	r1, [r0, #28]
   1f2a8:	str	r1, [r0, #16]
   1f2ac:	mov	r0, #1
   1f2b0:	pop	{fp, pc}
   1f2b4:	push	{fp, lr}
   1f2b8:	mov	fp, sp
   1f2bc:	bl	185b4 <__assert_fail@plt+0x5b04>
   1f2c0:	mov	r1, #1065353216	; 0x3f800000
   1f2c4:	str	r1, [r0, #28]
   1f2c8:	mov	r1, #0
   1f2cc:	strh	r1, [r0, #18]
   1f2d0:	mov	r0, #1
   1f2d4:	pop	{fp, pc}
   1f2d8:	push	{fp, lr}
   1f2dc:	mov	fp, sp
   1f2e0:	mov	r0, #0
   1f2e4:	bl	18610 <__assert_fail@plt+0x5b60>
   1f2e8:	push	{fp, lr}
   1f2ec:	mov	fp, sp
   1f2f0:	sub	sp, sp, #8
   1f2f4:	movw	r0, #53204	; 0xcfd4
   1f2f8:	movt	r0, #4
   1f2fc:	bl	21dc0 <__assert_fail@plt+0xf310>
   1f300:	movw	r1, #3060	; 0xbf4
   1f304:	mov	r0, #0
   1f308:	mov	r2, #5
   1f30c:	mov	r5, #0
   1f310:	movt	r1, #5
   1f314:	bl	12564 <dcgettext@plt>
   1f318:	bl	12420 <printf@plt>
   1f31c:	movw	r0, #3079	; 0xc07
   1f320:	movt	r0, #5
   1f324:	bl	12420 <printf@plt>
   1f328:	movw	r4, #20084	; 0x4e74
   1f32c:	movw	r2, #3111	; 0xc27
   1f330:	movw	r1, #3103	; 0xc1f
   1f334:	movt	r4, #6
   1f338:	movt	r2, #5
   1f33c:	movt	r1, #5
   1f340:	ldrb	r0, [r4, #56]	; 0x38
   1f344:	cmp	r0, #0
   1f348:	movw	r0, #3087	; 0xc0f
   1f34c:	movt	r0, #5
   1f350:	moveq	r1, r2
   1f354:	bl	12420 <printf@plt>
   1f358:	movw	r0, #3120	; 0xc30
   1f35c:	movt	r0, #5
   1f360:	bl	12420 <printf@plt>
   1f364:	bl	123e4 <is_selinux_enabled@plt>
   1f368:	cmp	r0, #1
   1f36c:	blt	1f37c <__assert_fail@plt+0xc8cc>
   1f370:	movw	r0, #3139	; 0xc43
   1f374:	movt	r0, #5
   1f378:	bl	12420 <printf@plt>
   1f37c:	add	r0, sp, #4
   1f380:	str	r5, [sp, #4]
   1f384:	bl	13228 <__assert_fail@plt+0x778>
   1f388:	cmp	r0, #0
   1f38c:	beq	1f3c0 <__assert_fail@plt+0xc910>
   1f390:	movw	r0, #3148	; 0xc4c
   1f394:	movt	r0, #5
   1f398:	bl	12420 <printf@plt>
   1f39c:	ldrb	r0, [sp, #5]
   1f3a0:	tst	r0, #2
   1f3a4:	beq	1f3b4 <__assert_fail@plt+0xc904>
   1f3a8:	movw	r0, #3153	; 0xc51
   1f3ac:	movt	r0, #5
   1f3b0:	bl	12420 <printf@plt>
   1f3b4:	movw	r0, #55865	; 0xda39
   1f3b8:	movt	r0, #4
   1f3bc:	bl	12420 <printf@plt>
   1f3c0:	ldrh	r1, [r4, #68]	; 0x44
   1f3c4:	movw	r0, #3163	; 0xc5b
   1f3c8:	movt	r0, #5
   1f3cc:	bl	12420 <printf@plt>
   1f3d0:	mov	r0, #10
   1f3d4:	bl	12840 <putchar@plt>
   1f3d8:	mov	r0, #0
   1f3dc:	bl	12780 <exit@plt>
   1f3e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f3e4:	add	fp, sp, #24
   1f3e8:	vpush	{d8}
   1f3ec:	sub	sp, sp, #16
   1f3f0:	mov	r4, r1
   1f3f4:	ldrb	r1, [r0]
   1f3f8:	vmov.f64	d8, d0
   1f3fc:	mov	r8, r3
   1f400:	mov	r7, r2
   1f404:	mov	r5, r0
   1f408:	cmp	r1, #43	; 0x2b
   1f40c:	beq	1f424 <__assert_fail@plt+0xc974>
   1f410:	cmp	r1, #45	; 0x2d
   1f414:	mov	r0, #2
   1f418:	addeq	r5, r5, #1
   1f41c:	moveq	r0, #0
   1f420:	b	1f42c <__assert_fail@plt+0xc97c>
   1f424:	add	r5, r5, #1
   1f428:	mov	r0, #1
   1f42c:	movw	r3, #10352	; 0x2870
   1f430:	str	r0, [r4, #4]
   1f434:	add	r2, sp, #8
   1f438:	mov	r0, r5
   1f43c:	mov	r1, #0
   1f440:	mov	r6, #0
   1f444:	movt	r3, #1
   1f448:	bl	30c68 <__assert_fail@plt+0x1e1b8>
   1f44c:	cmp	r0, #0
   1f450:	beq	1f500 <__assert_fail@plt+0xca50>
   1f454:	vldr	d16, [sp, #8]
   1f458:	mov	r0, sp
   1f45c:	vmul.f64	d0, d16, d8
   1f460:	bl	12744 <modf@plt>
   1f464:	vldr	d17, [pc, #220]	; 1f548 <__assert_fail@plt+0xca98>
   1f468:	vmul.f64	d16, d0, d17
   1f46c:	vcmpe.f64	d16, d17
   1f470:	vmrs	APSR_nzcv, fpscr
   1f474:	bpl	1f510 <__assert_fail@plt+0xca60>
   1f478:	vmov	s0, r7
   1f47c:	vldr	d17, [sp]
   1f480:	mov	r1, #0
   1f484:	mov	r2, #0
   1f488:	vcvt.f64.s32	d18, s0
   1f48c:	vcmpe.f64	d17, #0.0
   1f490:	vsub.f64	d18, d18, d17
   1f494:	vcvt.s32.f64	s0, d18
   1f498:	vcvt.s32.f64	s2, d18
   1f49c:	vmov	r0, s2
   1f4a0:	vstr	s0, [r4, #8]
   1f4a4:	cmp	r7, r0
   1f4a8:	movwlt	r2, #1
   1f4ac:	vmrs	APSR_nzcv, fpscr
   1f4b0:	movwmi	r1, #1
   1f4b4:	cmp	r1, r2
   1f4b8:	bne	1f530 <__assert_fail@plt+0xca80>
   1f4bc:	vmov	s0, r8
   1f4c0:	mov	r6, #1
   1f4c4:	vcvt.f64.s32	d17, s0
   1f4c8:	vsub.f64	d18, d17, d16
   1f4cc:	vcmpe.f64	d16, d17
   1f4d0:	vmrs	APSR_nzcv, fpscr
   1f4d4:	vcvt.s32.f64	s2, d18
   1f4d8:	vcvt.s32.f64	s0, d18
   1f4dc:	vstr	s2, [r4, #12]
   1f4e0:	ble	1f500 <__assert_fail@plt+0xca50>
   1f4e4:	vmov	r1, s0
   1f4e8:	movw	r2, #51712	; 0xca00
   1f4ec:	sub	r0, r0, #1
   1f4f0:	movt	r2, #15258	; 0x3b9a
   1f4f4:	str	r0, [r4, #8]
   1f4f8:	add	r1, r1, r2
   1f4fc:	str	r1, [r4, #12]
   1f500:	mov	r0, r6
   1f504:	sub	sp, fp, #32
   1f508:	vpop	{d8}
   1f50c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f510:	movw	r0, #160	; 0xa0
   1f514:	movw	r1, #64899	; 0xfd83
   1f518:	movw	r3, #186	; 0xba
   1f51c:	movw	r2, #3149	; 0xc4d
   1f520:	movt	r0, #5
   1f524:	movt	r1, #4
   1f528:	movt	r3, #5
   1f52c:	bl	12ab0 <__assert_fail@plt>
   1f530:	ldr	r2, [fp, #8]
   1f534:	mov	r0, #1
   1f538:	mov	r1, #0
   1f53c:	mov	r3, r5
   1f540:	bl	1269c <error@plt>
   1f544:	nop	{0}
   1f548:	andeq	r0, r0, r0
   1f54c:	bicmi	ip, sp, r5, ror #26
   1f550:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f554:	add	fp, sp, #28
   1f558:	sub	sp, sp, #60	; 0x3c
   1f55c:	mov	r4, #0
   1f560:	cmp	r2, #0
   1f564:	beq	1fab8 <__assert_fail@plt+0xd008>
   1f568:	mov	sl, r0
   1f56c:	ldr	r0, [r3]
   1f570:	mov	r5, r3
   1f574:	mov	r6, r2
   1f578:	ldr	r0, [r2, r0, lsl #2]
   1f57c:	cmp	r0, #0
   1f580:	beq	1fab8 <__assert_fail@plt+0xd008>
   1f584:	ldr	r4, [r1, #12]
   1f588:	movw	r2, #608	; 0x260
   1f58c:	mov	r0, r1
   1f590:	movt	r2, #5
   1f594:	mov	r1, r4
   1f598:	bl	18518 <__assert_fail@plt+0x5a68>
   1f59c:	mov	r3, #0
   1f5a0:	movw	r1, #257	; 0x101
   1f5a4:	movw	r7, #20084	; 0x4e74
   1f5a8:	str	r3, [r0, #144]	; 0x90
   1f5ac:	str	r1, [r0, #16]
   1f5b0:	movw	r1, #18936	; 0x49f8
   1f5b4:	movt	r7, #6
   1f5b8:	movt	r1, #1
   1f5bc:	cmp	r4, r1
   1f5c0:	movwne	r2, #18712	; 0x4918
   1f5c4:	movne	r9, #1
   1f5c8:	movtne	r2, #1
   1f5cc:	cmpne	r4, r2
   1f5d0:	bne	1f5e0 <__assert_fail@plt+0xcb30>
   1f5d4:	mov	r3, #1
   1f5d8:	mov	r9, #0
   1f5dc:	strb	r3, [r7, #80]	; 0x50
   1f5e0:	sub	r1, r4, r1
   1f5e4:	strb	r3, [r0, #140]	; 0x8c
   1f5e8:	str	r5, [sp, #28]
   1f5ec:	str	r6, [sp, #20]
   1f5f0:	str	r0, [sp, #32]
   1f5f4:	str	r4, [sp, #12]
   1f5f8:	clz	r1, r1
   1f5fc:	lsr	r2, r1, #5
   1f600:	movw	r1, #16928	; 0x4220
   1f604:	movt	r1, #1
   1f608:	sub	r1, r4, r1
   1f60c:	clz	r1, r1
   1f610:	lsr	r1, r1, #5
   1f614:	orr	r8, r1, r2
   1f618:	cmp	r8, #1
   1f61c:	bne	1f6d8 <__assert_fail@plt+0xcc28>
   1f620:	mov	r1, #0
   1f624:	str	r1, [r0, #144]	; 0x90
   1f628:	movw	r0, #1451	; 0x5ab
   1f62c:	strb	r1, [r7, #14]
   1f630:	movt	r0, #5
   1f634:	bl	126d8 <getenv@plt>
   1f638:	cmp	r0, #0
   1f63c:	beq	1f6c8 <__assert_fail@plt+0xcc18>
   1f640:	movw	r5, #56140	; 0xdb4c
   1f644:	add	r7, sp, #36	; 0x24
   1f648:	sub	r6, fp, #32
   1f64c:	mov	r2, #1
   1f650:	mov	r4, r0
   1f654:	movt	r5, #4
   1f658:	mov	r3, r7
   1f65c:	str	r6, [sp]
   1f660:	mov	r1, r5
   1f664:	bl	23508 <__assert_fail@plt+0x10a58>
   1f668:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1f66c:	cmp	r1, #1
   1f670:	beq	1f690 <__assert_fail@plt+0xcbe0>
   1f674:	cmp	r1, #0
   1f678:	beq	1fba0 <__assert_fail@plt+0xd0f0>
   1f67c:	ldr	r0, [sp, #36]	; 0x24
   1f680:	ldrb	r2, [r4, r0]
   1f684:	cmp	r2, #47	; 0x2f
   1f688:	beq	1f6a8 <__assert_fail@plt+0xcbf8>
   1f68c:	b	1fbc8 <__assert_fail@plt+0xd118>
   1f690:	ldr	r0, [sp, #36]	; 0x24
   1f694:	ldrb	r2, [r4, r0]
   1f698:	cmp	r2, #46	; 0x2e
   1f69c:	beq	1fba0 <__assert_fail@plt+0xd0f0>
   1f6a0:	cmp	r2, #47	; 0x2f
   1f6a4:	bne	1fbc8 <__assert_fail@plt+0xd118>
   1f6a8:	mov	r0, r4
   1f6ac:	mov	r1, r5
   1f6b0:	mov	r2, #0
   1f6b4:	mov	r3, r7
   1f6b8:	str	r6, [sp]
   1f6bc:	bl	23508 <__assert_fail@plt+0x10a58>
   1f6c0:	cmp	r0, #0
   1f6c4:	bne	1f668 <__assert_fail@plt+0xcbb8>
   1f6c8:	ldr	r5, [sp, #28]
   1f6cc:	ldr	r6, [sp, #20]
   1f6d0:	ldr	r0, [sp, #32]
   1f6d4:	b	1f6f0 <__assert_fail@plt+0xcc40>
   1f6d8:	movw	r1, #17776	; 0x4570
   1f6dc:	movt	r1, #6
   1f6e0:	ldr	r1, [r1]
   1f6e4:	cmp	r1, #0
   1f6e8:	beq	1fc1c <__assert_fail@plt+0xd16c>
   1f6ec:	str	r1, [r0, #144]	; 0x90
   1f6f0:	add	r0, r0, #40	; 0x28
   1f6f4:	mov	r4, #0
   1f6f8:	mov	sl, r6
   1f6fc:	strb	r4, [r0]
   1f700:	str	r0, [sp, #16]
   1f704:	ldr	r0, [r5]
   1f708:	ldr	r7, [sl, r0, lsl #2]!
   1f70c:	cmp	r7, #0
   1f710:	beq	1faac <__assert_fail@plt+0xcffc>
   1f714:	cmp	r9, #0
   1f718:	str	r0, [sp, #24]
   1f71c:	beq	1f7cc <__assert_fail@plt+0xcd1c>
   1f720:	movw	r5, #731	; 0x2db
   1f724:	mov	r0, #0
   1f728:	cmp	r8, #0
   1f72c:	movt	r5, #5
   1f730:	beq	1f868 <__assert_fail@plt+0xcdb8>
   1f734:	ldr	r9, [sp, #24]
   1f738:	mov	r8, #0
   1f73c:	mov	r6, #0
   1f740:	ldrb	r1, [r7]
   1f744:	cmp	r1, #43	; 0x2b
   1f748:	bne	1f770 <__assert_fail@plt+0xccc0>
   1f74c:	b	1f788 <__assert_fail@plt+0xccd8>
   1f750:	mov	r0, #0
   1f754:	ldr	r7, [sl, #4]!
   1f758:	add	r9, r9, #1
   1f75c:	cmp	r7, #0
   1f760:	beq	1f8f4 <__assert_fail@plt+0xce44>
   1f764:	ldrb	r1, [r7]
   1f768:	cmp	r1, #43	; 0x2b
   1f76c:	beq	1f788 <__assert_fail@plt+0xccd8>
   1f770:	cmp	r1, #59	; 0x3b
   1f774:	bne	1f79c <__assert_fail@plt+0xccec>
   1f778:	ldrb	r0, [r7, #1]
   1f77c:	cmp	r0, #0
   1f780:	bne	1f79c <__assert_fail@plt+0xccec>
   1f784:	b	1fa94 <__assert_fail@plt+0xcfe4>
   1f788:	cmp	r0, #0
   1f78c:	beq	1f79c <__assert_fail@plt+0xccec>
   1f790:	ldrb	r0, [r7, #1]
   1f794:	cmp	r0, #0
   1f798:	beq	1f8e8 <__assert_fail@plt+0xce38>
   1f79c:	mov	r0, r7
   1f7a0:	mov	r1, r5
   1f7a4:	bl	26820 <__assert_fail@plt+0x13d70>
   1f7a8:	mov	r1, #0
   1f7ac:	cmp	r0, #0
   1f7b0:	beq	1f750 <__assert_fail@plt+0xcca0>
   1f7b4:	cmp	r9, #0
   1f7b8:	beq	1f844 <__assert_fail@plt+0xcd94>
   1f7bc:	add	r6, r6, #1
   1f7c0:	mov	r0, #1
   1f7c4:	mov	r8, r7
   1f7c8:	b	1f754 <__assert_fail@plt+0xcca4>
   1f7cc:	cmp	r8, #0
   1f7d0:	beq	1fa30 <__assert_fail@plt+0xcf80>
   1f7d4:	movw	r5, #731	; 0x2db
   1f7d8:	mov	r8, #0
   1f7dc:	mov	r9, r0
   1f7e0:	mov	r6, #0
   1f7e4:	movt	r5, #5
   1f7e8:	ldrb	r0, [r7]
   1f7ec:	cmp	r0, #59	; 0x3b
   1f7f0:	bne	1f828 <__assert_fail@plt+0xcd78>
   1f7f4:	b	1f81c <__assert_fail@plt+0xcd6c>
   1f7f8:	add	r6, r6, #1
   1f7fc:	mov	r8, r7
   1f800:	ldr	r7, [sl, #4]!
   1f804:	add	r9, r9, #1
   1f808:	cmp	r7, #0
   1f80c:	beq	1fa94 <__assert_fail@plt+0xcfe4>
   1f810:	ldrb	r0, [r7]
   1f814:	cmp	r0, #59	; 0x3b
   1f818:	bne	1f828 <__assert_fail@plt+0xcd78>
   1f81c:	ldrb	r0, [r7, #1]
   1f820:	cmp	r0, #0
   1f824:	beq	1fa94 <__assert_fail@plt+0xcfe4>
   1f828:	mov	r0, r7
   1f82c:	mov	r1, r5
   1f830:	bl	26820 <__assert_fail@plt+0x13d70>
   1f834:	cmp	r0, #0
   1f838:	beq	1f800 <__assert_fail@plt+0xcd50>
   1f83c:	cmp	r9, #0
   1f840:	bne	1f7f8 <__assert_fail@plt+0xcd48>
   1f844:	movw	r1, #734	; 0x2de
   1f848:	movt	r1, #5
   1f84c:	mov	r0, #0
   1f850:	mov	r2, #5
   1f854:	bl	12564 <dcgettext@plt>
   1f858:	mov	r2, r0
   1f85c:	mov	r0, #1
   1f860:	mov	r1, #0
   1f864:	bl	1269c <error@plt>
   1f868:	ldr	r9, [sp, #24]
   1f86c:	mov	r8, #0
   1f870:	mov	r6, #0
   1f874:	ldrb	r1, [r7]
   1f878:	cmp	r1, #43	; 0x2b
   1f87c:	bne	1f8bc <__assert_fail@plt+0xce0c>
   1f880:	b	1f8d4 <__assert_fail@plt+0xce24>
   1f884:	mov	r0, r7
   1f888:	mov	r1, r5
   1f88c:	bl	26820 <__assert_fail@plt+0x13d70>
   1f890:	cmp	r0, #0
   1f894:	add	r9, r9, #1
   1f898:	movne	r8, r7
   1f89c:	ldr	r7, [sl, #4]!
   1f8a0:	movwne	r0, #1
   1f8a4:	add	r6, r6, r0
   1f8a8:	cmp	r7, #0
   1f8ac:	beq	1fa94 <__assert_fail@plt+0xcfe4>
   1f8b0:	ldrb	r1, [r7]
   1f8b4:	cmp	r1, #43	; 0x2b
   1f8b8:	beq	1f8d4 <__assert_fail@plt+0xce24>
   1f8bc:	cmp	r1, #59	; 0x3b
   1f8c0:	bne	1f884 <__assert_fail@plt+0xcdd4>
   1f8c4:	ldrb	r0, [r7, #1]
   1f8c8:	cmp	r0, #0
   1f8cc:	bne	1f884 <__assert_fail@plt+0xcdd4>
   1f8d0:	b	1fa94 <__assert_fail@plt+0xcfe4>
   1f8d4:	cmp	r0, #0
   1f8d8:	beq	1f884 <__assert_fail@plt+0xcdd4>
   1f8dc:	ldrb	r0, [r7, #1]
   1f8e0:	cmp	r0, #0
   1f8e4:	bne	1f884 <__assert_fail@plt+0xcdd4>
   1f8e8:	ldr	r0, [sp, #16]
   1f8ec:	mov	r1, #1
   1f8f0:	strb	r1, [r0]
   1f8f4:	ldr	r0, [sp, #24]
   1f8f8:	cmp	r9, r0
   1f8fc:	beq	1faa4 <__assert_fail@plt+0xcff4>
   1f900:	ldr	r0, [sl]
   1f904:	cmp	r0, #0
   1f908:	beq	1faa4 <__assert_fail@plt+0xcff4>
   1f90c:	cmp	r1, #0
   1f910:	beq	1f950 <__assert_fail@plt+0xcea0>
   1f914:	ldr	r1, [sp, #12]
   1f918:	movw	r2, #16928	; 0x4220
   1f91c:	movw	r0, #1461	; 0x5b5
   1f920:	movw	r4, #61103	; 0xeeaf
   1f924:	movt	r2, #1
   1f928:	movt	r0, #5
   1f92c:	movt	r4, #4
   1f930:	cmp	r1, r2
   1f934:	moveq	r4, r0
   1f938:	cmp	r6, #2
   1f93c:	bge	1fc48 <__assert_fail@plt+0xd198>
   1f940:	mov	r0, r8
   1f944:	bl	127bc <strlen@plt>
   1f948:	cmp	r0, #2
   1f94c:	bne	1fc70 <__assert_fail@plt+0xd1c0>
   1f950:	ldr	r0, [sp, #16]
   1f954:	mov	r1, #2048	; 0x800
   1f958:	add	r6, r0, #4
   1f95c:	mov	r0, r6
   1f960:	bl	21294 <__assert_fail@plt+0xe7e4>
   1f964:	sub	r0, r0, #1
   1f968:	cmp	r0, #1
   1f96c:	bls	1fc3c <__assert_fail@plt+0xd18c>
   1f970:	mov	r0, r6
   1f974:	bl	21398 <__assert_fail@plt+0xe8e8>
   1f978:	ldr	r4, [sp, #32]
   1f97c:	movw	r0, #23308	; 0x5b0c
   1f980:	ldr	r8, [sp, #20]
   1f984:	movt	r0, #1
   1f988:	str	r0, [r4, #76]	; 0x4c
   1f98c:	ldrb	r0, [r4, #40]	; 0x28
   1f990:	cmp	r0, #0
   1f994:	beq	1fac4 <__assert_fail@plt+0xd014>
   1f998:	mov	r0, r6
   1f99c:	ldr	r6, [sp, #24]
   1f9a0:	mov	r3, #0
   1f9a4:	mov	r1, r4
   1f9a8:	str	r3, [r4, #132]	; 0x84
   1f9ac:	str	r3, [r4, #80]	; 0x50
   1f9b0:	str	r3, [r4, #84]	; 0x54
   1f9b4:	add	r5, r1, #88	; 0x58
   1f9b8:	str	r3, [r1, #64]	; 0x40
   1f9bc:	str	r3, [r1, #68]	; 0x44
   1f9c0:	mov	r7, r0
   1f9c4:	mvn	r2, r6
   1f9c8:	add	r4, r9, r2
   1f9cc:	ldr	r2, [sp, #16]
   1f9d0:	str	r4, [r1, #72]	; 0x48
   1f9d4:	mov	r1, r5
   1f9d8:	bl	213bc <__assert_fail@plt+0xe90c>
   1f9dc:	sub	r0, r9, #1
   1f9e0:	cmp	r6, r0
   1f9e4:	bge	1fb7c <__assert_fail@plt+0xd0cc>
   1f9e8:	add	r8, r8, r6, lsl #2
   1f9ec:	mov	r0, r6
   1f9f0:	ldr	r6, [r8], #4
   1f9f4:	mov	r0, r6
   1f9f8:	bl	127bc <strlen@plt>
   1f9fc:	mov	r1, #0
   1fa00:	add	r3, r0, #1
   1fa04:	mov	r0, r7
   1fa08:	mov	r2, r6
   1fa0c:	str	r1, [sp]
   1fa10:	str	r1, [sp, #4]
   1fa14:	mov	r1, #1
   1fa18:	str	r1, [sp, #8]
   1fa1c:	mov	r1, r5
   1fa20:	bl	209cc <__assert_fail@plt+0xdf1c>
   1fa24:	subs	r4, r4, #1
   1fa28:	bne	1f9f0 <__assert_fail@plt+0xcf40>
   1fa2c:	b	1fb7c <__assert_fail@plt+0xd0cc>
   1fa30:	movw	r5, #731	; 0x2db
   1fa34:	mov	r8, #0
   1fa38:	mov	r9, r0
   1fa3c:	mov	r6, #0
   1fa40:	movt	r5, #5
   1fa44:	ldrb	r0, [r7]
   1fa48:	cmp	r0, #59	; 0x3b
   1fa4c:	beq	1fa88 <__assert_fail@plt+0xcfd8>
   1fa50:	mov	r0, r7
   1fa54:	mov	r1, r5
   1fa58:	bl	26820 <__assert_fail@plt+0x13d70>
   1fa5c:	cmp	r0, #0
   1fa60:	add	r9, r9, #1
   1fa64:	movne	r8, r7
   1fa68:	ldr	r7, [sl, #4]!
   1fa6c:	movwne	r0, #1
   1fa70:	add	r6, r6, r0
   1fa74:	cmp	r7, #0
   1fa78:	beq	1fa94 <__assert_fail@plt+0xcfe4>
   1fa7c:	ldrb	r0, [r7]
   1fa80:	cmp	r0, #59	; 0x3b
   1fa84:	bne	1fa50 <__assert_fail@plt+0xcfa0>
   1fa88:	ldrb	r0, [r7, #1]
   1fa8c:	cmp	r0, #0
   1fa90:	bne	1fa50 <__assert_fail@plt+0xcfa0>
   1fa94:	mov	r1, #0
   1fa98:	ldr	r0, [sp, #24]
   1fa9c:	cmp	r9, r0
   1faa0:	bne	1f900 <__assert_fail@plt+0xce50>
   1faa4:	ldr	r5, [sp, #28]
   1faa8:	mov	r0, r9
   1faac:	str	r0, [r5]
   1fab0:	ldr	r0, [sp, #32]
   1fab4:	bl	32910 <__assert_fail@plt+0x1fe60>
   1fab8:	mov	r0, r4
   1fabc:	sub	sp, fp, #28
   1fac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fac4:	movw	r0, #731	; 0x2db
   1fac8:	mov	r5, #0
   1facc:	mov	r1, #2
   1fad0:	movt	r0, #5
   1fad4:	str	r5, [r4, #80]	; 0x50
   1fad8:	str	r5, [r4, #84]	; 0x54
   1fadc:	str	r1, [r4, #64]	; 0x40
   1fae0:	str	r0, [r4, #68]	; 0x44
   1fae4:	ldr	r0, [sp, #24]
   1fae8:	sub	r0, r9, r0
   1faec:	str	r0, [r4, #136]	; 0x88
   1faf0:	lsl	r0, r0, #2
   1faf4:	bl	306e8 <__assert_fail@plt+0x1dc38>
   1faf8:	ldr	r2, [sp, #16]
   1fafc:	str	r0, [r4, #132]	; 0x84
   1fb00:	add	r1, r4, #88	; 0x58
   1fb04:	mov	r0, r6
   1fb08:	bl	213bc <__assert_fail@plt+0xe90c>
   1fb0c:	ldr	r1, [r4, #136]	; 0x88
   1fb10:	cmp	r1, #1
   1fb14:	blt	1fb7c <__assert_fail@plt+0xd0cc>
   1fb18:	and	r0, r1, #1
   1fb1c:	beq	1fb60 <__assert_fail@plt+0xd0b0>
   1fb20:	ldr	r2, [sp, #24]
   1fb24:	sub	r1, r1, r0
   1fb28:	mov	r5, #0
   1fb2c:	add	r2, r8, r2, lsl #2
   1fb30:	add	r2, r2, #4
   1fb34:	ldr	r3, [r4, #132]	; 0x84
   1fb38:	ldr	r7, [r2, #-4]
   1fb3c:	str	r7, [r3, r5, lsl #2]
   1fb40:	ldr	r3, [r4, #132]	; 0x84
   1fb44:	ldr	r7, [r2]
   1fb48:	add	r2, r2, #8
   1fb4c:	add	r3, r3, r5, lsl #2
   1fb50:	add	r5, r5, #2
   1fb54:	cmp	r1, r5
   1fb58:	str	r7, [r3, #4]
   1fb5c:	bne	1fb34 <__assert_fail@plt+0xd084>
   1fb60:	cmp	r0, #0
   1fb64:	ldr	r0, [sp, #24]
   1fb68:	beq	1fb7c <__assert_fail@plt+0xd0cc>
   1fb6c:	add	r0, r5, r0
   1fb70:	ldr	r1, [r4, #132]	; 0x84
   1fb74:	ldr	r0, [r8, r0, lsl #2]
   1fb78:	str	r0, [r1, r5, lsl #2]
   1fb7c:	ldr	r0, [sl]
   1fb80:	mov	r4, #1
   1fb84:	cmp	r0, #0
   1fb88:	ldr	r0, [sp, #28]
   1fb8c:	addne	r9, r9, #1
   1fb90:	str	r9, [r0]
   1fb94:	mov	r0, r4
   1fb98:	sub	sp, fp, #28
   1fb9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fba0:	movw	r1, #1040	; 0x410
   1fba4:	mov	r0, #0
   1fba8:	mov	r2, #5
   1fbac:	movt	r1, #5
   1fbb0:	bl	12564 <dcgettext@plt>
   1fbb4:	mov	r2, r0
   1fbb8:	mov	r0, #1
   1fbbc:	mov	r1, #0
   1fbc0:	mov	r3, sl
   1fbc4:	bl	1269c <error@plt>
   1fbc8:	add	r0, r4, r0
   1fbcc:	bl	124bc <strndup@plt>
   1fbd0:	movw	r1, #1291	; 0x50b
   1fbd4:	mov	r5, r0
   1fbd8:	mov	r0, #0
   1fbdc:	mov	r2, #5
   1fbe0:	movt	r1, #5
   1fbe4:	bl	12564 <dcgettext@plt>
   1fbe8:	mov	r6, r0
   1fbec:	ldr	r0, [sp, #36]	; 0x24
   1fbf0:	cmp	r5, #0
   1fbf4:	addeq	r5, r4, r0
   1fbf8:	mov	r0, #0
   1fbfc:	mov	r1, r5
   1fc00:	bl	19ee0 <__assert_fail@plt+0x7430>
   1fc04:	mov	r3, r0
   1fc08:	mov	r0, #1
   1fc0c:	mov	r1, #0
   1fc10:	mov	r2, r6
   1fc14:	str	sl, [sp]
   1fc18:	bl	1269c <error@plt>
   1fc1c:	movw	r0, #632	; 0x278
   1fc20:	movw	r1, #64899	; 0xfd83
   1fc24:	movw	r3, #651	; 0x28b
   1fc28:	movw	r2, #2937	; 0xb79
   1fc2c:	movt	r0, #5
   1fc30:	movt	r1, #4
   1fc34:	movt	r3, #5
   1fc38:	bl	12ab0 <__assert_fail@plt>
   1fc3c:	movw	r1, #999	; 0x3e7
   1fc40:	movt	r1, #5
   1fc44:	b	1f84c <__assert_fail@plt+0xcd9c>
   1fc48:	movw	r1, #848	; 0x350
   1fc4c:	mov	r0, #0
   1fc50:	mov	r2, #5
   1fc54:	movt	r1, #5
   1fc58:	bl	12564 <dcgettext@plt>
   1fc5c:	mov	r2, r0
   1fc60:	mov	r0, #1
   1fc64:	mov	r1, #0
   1fc68:	mov	r3, r4
   1fc6c:	bl	1269c <error@plt>
   1fc70:	movw	r2, #904	; 0x388
   1fc74:	add	r0, sp, #36	; 0x24
   1fc78:	mov	r1, #19
   1fc7c:	mov	r3, r4
   1fc80:	movt	r2, #5
   1fc84:	bl	1281c <snprintf@plt>
   1fc88:	cmp	r0, #20
   1fc8c:	bcs	1fd0c <__assert_fail@plt+0xd25c>
   1fc90:	movw	r1, #942	; 0x3ae
   1fc94:	mov	r0, #0
   1fc98:	mov	r2, #5
   1fc9c:	movt	r1, #5
   1fca0:	bl	12564 <dcgettext@plt>
   1fca4:	mov	r4, r0
   1fca8:	movw	r0, #20084	; 0x4e74
   1fcac:	add	r2, sp, #36	; 0x24
   1fcb0:	movt	r0, #6
   1fcb4:	ldr	r1, [r0, #72]	; 0x48
   1fcb8:	mov	r7, r0
   1fcbc:	mov	r0, #0
   1fcc0:	bl	2efe4 <__assert_fail@plt+0x1c534>
   1fcc4:	ldr	r1, [r7, #72]	; 0x48
   1fcc8:	movw	r2, #731	; 0x2db
   1fccc:	mov	r5, r0
   1fcd0:	mov	r0, #1
   1fcd4:	movt	r2, #5
   1fcd8:	bl	2efe4 <__assert_fail@plt+0x1c534>
   1fcdc:	ldr	r1, [r7, #72]	; 0x48
   1fce0:	mov	r6, r0
   1fce4:	mov	r0, #2
   1fce8:	mov	r2, r8
   1fcec:	bl	2efe4 <__assert_fail@plt+0x1c534>
   1fcf0:	str	r0, [sp, #4]
   1fcf4:	mov	r0, #1
   1fcf8:	mov	r1, #0
   1fcfc:	mov	r2, r4
   1fd00:	mov	r3, r5
   1fd04:	str	r6, [sp]
   1fd08:	bl	1269c <error@plt>
   1fd0c:	movw	r0, #921	; 0x399
   1fd10:	movw	r1, #64899	; 0xfd83
   1fd14:	movw	r3, #651	; 0x28b
   1fd18:	movw	r2, #3014	; 0xbc6
   1fd1c:	movt	r0, #5
   1fd20:	movt	r1, #4
   1fd24:	movt	r3, #5
   1fd28:	bl	12ab0 <__assert_fail@plt>
   1fd2c:	push	{r4, r5, fp, lr}
   1fd30:	add	fp, sp, #8
   1fd34:	mov	r5, r0
   1fd38:	mov	r0, #0
   1fd3c:	mov	r4, r1
   1fd40:	str	r0, [r1]
   1fd44:	mov	r0, #0
   1fd48:	bl	2d6b4 <__assert_fail@plt+0x1ac04>
   1fd4c:	movw	r1, #1465	; 0x5b9
   1fd50:	str	r0, [r4, #16]
   1fd54:	mov	r0, r5
   1fd58:	movt	r1, #5
   1fd5c:	bl	123fc <strcmp@plt>
   1fd60:	cmp	r0, #0
   1fd64:	beq	1fdc4 <__assert_fail@plt+0xd314>
   1fd68:	movw	r1, #1492	; 0x5d4
   1fd6c:	mov	r0, r5
   1fd70:	movt	r1, #5
   1fd74:	bl	123fc <strcmp@plt>
   1fd78:	cmp	r0, #0
   1fd7c:	beq	1fdd8 <__assert_fail@plt+0xd328>
   1fd80:	movw	r0, #20040	; 0x4e48
   1fd84:	mov	r1, r5
   1fd88:	movt	r0, #6
   1fd8c:	ldr	r0, [r0, #36]	; 0x24
   1fd90:	bl	1a160 <__assert_fail@plt+0x76b0>
   1fd94:	cmp	r0, #0
   1fd98:	stmib	r4, {r0, r5}
   1fd9c:	beq	1fe1c <__assert_fail@plt+0xd36c>
   1fda0:	ldr	r0, [r4, #4]
   1fda4:	bl	1287c <fileno@plt>
   1fda8:	cmn	r0, #1
   1fdac:	beq	1fe10 <__assert_fail@plt+0xd360>
   1fdb0:	bl	12a20 <isatty@plt>
   1fdb4:	cmp	r0, #0
   1fdb8:	movwne	r0, #1
   1fdbc:	strb	r0, [r4, #12]
   1fdc0:	pop	{r4, r5, fp, pc}
   1fdc4:	movw	r1, #1477	; 0x5c5
   1fdc8:	movw	r0, #17744	; 0x4550
   1fdcc:	movt	r1, #5
   1fdd0:	movt	r0, #6
   1fdd4:	b	1fde8 <__assert_fail@plt+0xd338>
   1fdd8:	movw	r1, #61163	; 0xeeeb
   1fddc:	movw	r0, #17756	; 0x455c
   1fde0:	movt	r1, #4
   1fde4:	movt	r0, #6
   1fde8:	ldr	r0, [r0]
   1fdec:	mov	r2, #5
   1fdf0:	str	r0, [r4, #4]
   1fdf4:	mov	r0, #0
   1fdf8:	bl	12564 <dcgettext@plt>
   1fdfc:	str	r0, [r4, #8]
   1fe00:	ldr	r0, [r4, #4]
   1fe04:	bl	1287c <fileno@plt>
   1fe08:	cmn	r0, #1
   1fe0c:	bne	1fdb0 <__assert_fail@plt+0xd300>
   1fe10:	mov	r0, #0
   1fe14:	strb	r0, [r4, #12]
   1fe18:	pop	{r4, r5, fp, pc}
   1fe1c:	bl	12804 <__errno_location@plt>
   1fe20:	ldr	r0, [r0]
   1fe24:	mov	r1, r5
   1fe28:	bl	19f88 <__assert_fail@plt+0x74d8>
   1fe2c:	push	{r4, r5, r6, r7, fp, lr}
   1fe30:	add	fp, sp, #16
   1fe34:	sub	sp, sp, #24
   1fe38:	mov	r4, #0
   1fe3c:	cmp	r0, #0
   1fe40:	beq	1feec <__assert_fail@plt+0xd43c>
   1fe44:	mov	r5, r2
   1fe48:	ldr	r2, [r1]
   1fe4c:	ldr	r6, [r0, r2, lsl #2]
   1fe50:	cmp	r6, #0
   1fe54:	beq	1feec <__assert_fail@plt+0xd43c>
   1fe58:	add	r0, r2, #1
   1fe5c:	str	r0, [r1]
   1fe60:	ldrb	r0, [r6]
   1fe64:	cmp	r0, #45	; 0x2d
   1fe68:	beq	1fe84 <__assert_fail@plt+0xd3d4>
   1fe6c:	cmp	r0, #43	; 0x2b
   1fe70:	mov	r7, #2
   1fe74:	mov	r0, r6
   1fe78:	addeq	r0, r6, #1
   1fe7c:	moveq	r7, #0
   1fe80:	b	1fe8c <__assert_fail@plt+0xd3dc>
   1fe84:	add	r0, r6, #1
   1fe88:	mov	r7, #1
   1fe8c:	movw	r1, #61103	; 0xeeaf
   1fe90:	add	r3, sp, #8
   1fe94:	mov	r2, #10
   1fe98:	movt	r1, #4
   1fe9c:	str	r1, [sp]
   1fea0:	add	r1, sp, #20
   1fea4:	bl	3158c <__assert_fail@plt+0x1eadc>
   1fea8:	cmp	r0, #0
   1feac:	bne	1feec <__assert_fail@plt+0xd43c>
   1feb0:	mov	r0, r5
   1feb4:	mov	r1, r6
   1feb8:	bl	18554 <__assert_fail@plt+0x5aa4>
   1febc:	str	r7, [r0, #40]	; 0x28
   1fec0:	mov	r4, r0
   1fec4:	ldr	r0, [sp, #8]
   1fec8:	ldr	r1, [sp, #12]
   1fecc:	mov	r5, r4
   1fed0:	str	r0, [r5, #48]!	; 0x30
   1fed4:	movw	r0, #20084	; 0x4e74
   1fed8:	str	r1, [r4, #52]	; 0x34
   1fedc:	movt	r0, #6
   1fee0:	ldrb	r0, [r0, #44]	; 0x2c
   1fee4:	tst	r0, #1
   1fee8:	bne	1fef8 <__assert_fail@plt+0xd448>
   1feec:	mov	r0, r4
   1fef0:	sub	sp, fp, #16
   1fef4:	pop	{r4, r5, r6, r7, fp, pc}
   1fef8:	movw	r6, #17744	; 0x4550
   1fefc:	ldr	r2, [r4, #4]
   1ff00:	movw	r1, #355	; 0x163
   1ff04:	movt	r6, #6
   1ff08:	movt	r1, #5
   1ff0c:	ldr	r0, [r6]
   1ff10:	bl	127f8 <fprintf@plt>
   1ff14:	ldr	r0, [r6]
   1ff18:	cmp	r7, #1
   1ff1c:	beq	1ff3c <__assert_fail@plt+0xd48c>
   1ff20:	cmp	r7, #0
   1ff24:	bne	1ff50 <__assert_fail@plt+0xd4a0>
   1ff28:	movw	r3, #396	; 0x18c
   1ff2c:	movw	r2, #390	; 0x186
   1ff30:	movt	r3, #5
   1ff34:	movt	r2, #5
   1ff38:	b	1ff60 <__assert_fail@plt+0xd4b0>
   1ff3c:	movw	r3, #399	; 0x18f
   1ff40:	movw	r2, #6263	; 0x1877
   1ff44:	movt	r3, #5
   1ff48:	movt	r2, #5
   1ff4c:	b	1ff60 <__assert_fail@plt+0xd4b0>
   1ff50:	movw	r3, #1555	; 0x613
   1ff54:	movw	r2, #393	; 0x189
   1ff58:	movt	r3, #5
   1ff5c:	movt	r2, #5
   1ff60:	movw	r1, #369	; 0x171
   1ff64:	movt	r1, #5
   1ff68:	bl	127f8 <fprintf@plt>
   1ff6c:	ldrd	r2, [r5]
   1ff70:	ldr	r0, [r6]
   1ff74:	movw	r1, #1558	; 0x616
   1ff78:	movt	r1, #5
   1ff7c:	bl	127f8 <fprintf@plt>
   1ff80:	mov	r0, r4
   1ff84:	sub	sp, fp, #16
   1ff88:	pop	{r4, r5, r6, r7, fp, pc}
   1ff8c:	push	{r4, r5, r6, r7, fp, lr}
   1ff90:	add	fp, sp, #16
   1ff94:	sub	sp, sp, #8
   1ff98:	mov	r5, r0
   1ff9c:	movw	r0, #20084	; 0x4e74
   1ffa0:	mov	r4, r1
   1ffa4:	movt	r0, #6
   1ffa8:	ldrb	r1, [r0, #17]
   1ffac:	cmp	r1, #0
   1ffb0:	bne	20038 <__assert_fail@plt+0xd588>
   1ffb4:	ldrb	r0, [r0, #16]
   1ffb8:	cmp	r0, #0
   1ffbc:	beq	20038 <__assert_fail@plt+0xd588>
   1ffc0:	mov	r0, r2
   1ffc4:	mov	r1, #47	; 0x2f
   1ffc8:	bl	127c8 <strchr@plt>
   1ffcc:	cmp	r0, #0
   1ffd0:	beq	20038 <__assert_fail@plt+0xd588>
   1ffd4:	movw	r1, #1882	; 0x75a
   1ffd8:	mov	r0, #0
   1ffdc:	mov	r2, #5
   1ffe0:	movt	r1, #5
   1ffe4:	bl	12564 <dcgettext@plt>
   1ffe8:	mov	r6, r0
   1ffec:	mov	r0, #0
   1fff0:	mov	r1, r5
   1fff4:	bl	19ee0 <__assert_fail@plt+0x7430>
   1fff8:	movw	r1, #55982	; 0xdaae
   1fffc:	mov	r5, r0
   20000:	mov	r0, #1
   20004:	movt	r1, #4
   20008:	bl	19ee0 <__assert_fail@plt+0x7430>
   2000c:	mov	r7, r0
   20010:	mov	r0, #2
   20014:	mov	r1, r4
   20018:	bl	19ee0 <__assert_fail@plt+0x7430>
   2001c:	str	r0, [sp, #4]
   20020:	mov	r0, #0
   20024:	mov	r1, #0
   20028:	mov	r2, r6
   2002c:	mov	r3, r5
   20030:	str	r7, [sp]
   20034:	bl	1269c <error@plt>
   20038:	sub	sp, fp, #16
   2003c:	pop	{r4, r5, r6, r7, fp, pc}
   20040:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20044:	add	fp, sp, #24
   20048:	sub	sp, sp, #8
   2004c:	movw	r5, #19680	; 0x4ce0
   20050:	mov	r7, r0
   20054:	mov	r8, r3
   20058:	mov	r4, r2
   2005c:	mov	r6, r1
   20060:	movt	r5, #6
   20064:	ldrb	r0, [r5]
   20068:	cmp	r0, #0
   2006c:	bne	200d4 <__assert_fail@plt+0xd624>
   20070:	movw	r0, #1819	; 0x71b
   20074:	mov	r2, #0
   20078:	movt	r0, #5
   2007c:	mov	r1, r0
   20080:	bl	126c0 <fnmatch@plt>
   20084:	cmp	r0, #0
   20088:	bne	201ec <__assert_fail@plt+0xd73c>
   2008c:	movw	r0, #1823	; 0x71f
   20090:	movw	r1, #1819	; 0x71b
   20094:	mov	r2, #0
   20098:	movt	r0, #5
   2009c:	movt	r1, #5
   200a0:	bl	126c0 <fnmatch@plt>
   200a4:	cmp	r0, #0
   200a8:	beq	201ec <__assert_fail@plt+0xd73c>
   200ac:	movw	r0, #1823	; 0x71f
   200b0:	movw	r1, #1819	; 0x71b
   200b4:	mov	r2, #16
   200b8:	movt	r0, #5
   200bc:	movt	r1, #5
   200c0:	bl	126c0 <fnmatch@plt>
   200c4:	cmp	r0, #0
   200c8:	bne	201ec <__assert_fail@plt+0xd73c>
   200cc:	mov	r0, #1
   200d0:	strb	r0, [r5]
   200d4:	mov	r5, #0
   200d8:	cmp	r6, #0
   200dc:	beq	20158 <__assert_fail@plt+0xd6a8>
   200e0:	ldr	r0, [r4]
   200e4:	ldr	r6, [r6, r0, lsl #2]
   200e8:	cmp	r6, #0
   200ec:	beq	20158 <__assert_fail@plt+0xd6a8>
   200f0:	ldr	r9, [fp, #8]
   200f4:	add	r0, r0, #1
   200f8:	mov	r2, r6
   200fc:	str	r0, [r4]
   20100:	mov	r0, r7
   20104:	mov	r1, r9
   20108:	bl	18518 <__assert_fail@plt+0x5a68>
   2010c:	movw	r1, #1796	; 0x704
   20110:	mov	r7, r0
   20114:	str	r6, [r0, #40]	; 0x28
   20118:	mov	r0, #0
   2011c:	movt	r1, #5
   20120:	strh	r0, [r7, #18]
   20124:	mov	r0, r6
   20128:	bl	129e4 <strpbrk@plt>
   2012c:	add	r1, pc, #220	; 0xdc
   20130:	cmp	r0, #0
   20134:	mov	r5, #1
   20138:	addeq	r1, r1, #4
   2013c:	ldr	r0, [r1]
   20140:	str	r0, [r7, #28]
   20144:	movw	r0, #20084	; 0x4e74
   20148:	movt	r0, #6
   2014c:	ldrb	r0, [r0, #17]
   20150:	cmp	r0, #0
   20154:	beq	20164 <__assert_fail@plt+0xd6b4>
   20158:	mov	r0, r5
   2015c:	sub	sp, fp, #24
   20160:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   20164:	mov	r0, r6
   20168:	mov	r1, #47	; 0x2f
   2016c:	bl	12924 <strrchr@plt>
   20170:	cmp	r0, #0
   20174:	beq	20158 <__assert_fail@plt+0xd6a8>
   20178:	ldrb	r0, [r0, #1]
   2017c:	cmp	r0, #0
   20180:	bne	20158 <__assert_fail@plt+0xd6a8>
   20184:	movw	r0, #17672	; 0x4508
   20188:	movt	r0, #1
   2018c:	sub	r0, r9, r0
   20190:	clz	r0, r0
   20194:	lsr	r1, r0, #5
   20198:	mov	r0, r6
   2019c:	bl	15f94 <__assert_fail@plt+0x34e4>
   201a0:	cmp	r0, #0
   201a4:	bne	20158 <__assert_fail@plt+0xd6a8>
   201a8:	movw	r1, #2060	; 0x80c
   201ac:	mov	r0, #0
   201b0:	mov	r2, #5
   201b4:	movt	r1, #5
   201b8:	bl	12564 <dcgettext@plt>
   201bc:	mov	r2, r0
   201c0:	mov	r0, #0
   201c4:	mov	r1, #0
   201c8:	mov	r3, r8
   201cc:	str	r6, [sp]
   201d0:	bl	1269c <error@plt>
   201d4:	movw	r0, #52343	; 0xcc77
   201d8:	movt	r0, #12843	; 0x322b
   201dc:	str	r0, [r7, #28]
   201e0:	mov	r0, r5
   201e4:	sub	sp, fp, #24
   201e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   201ec:	movw	r1, #1827	; 0x723
   201f0:	mov	r0, #0
   201f4:	mov	r2, #5
   201f8:	movt	r1, #5
   201fc:	bl	12564 <dcgettext@plt>
   20200:	mov	r2, r0
   20204:	mov	r0, #1
   20208:	mov	r1, #0
   2020c:	bl	1269c <error@plt>
   20210:	svccc	0x004ccccd
   20214:	stclcc	12, cr12, [ip, #820]	; 0x334
   20218:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2021c:	add	fp, sp, #24
   20220:	sub	sp, sp, #8
   20224:	mov	r6, r3
   20228:	mov	r3, r0
   2022c:	mov	r0, #0
   20230:	cmp	r3, #0
   20234:	beq	2030c <__assert_fail@plt+0xd85c>
   20238:	ldr	r7, [r1]
   2023c:	ldr	r4, [r3, r7, lsl #2]
   20240:	cmp	r4, #0
   20244:	beq	2030c <__assert_fail@plt+0xd85c>
   20248:	add	r0, r7, #1
   2024c:	str	r0, [r1]
   20250:	movw	r1, #19660	; 0x4ccc
   20254:	mov	r0, r2
   20258:	mov	r2, r4
   2025c:	movt	r1, #1
   20260:	bl	18518 <__assert_fail@plt+0x5a68>
   20264:	mov	r5, #0
   20268:	mov	r8, r0
   2026c:	strh	r5, [r0, #18]
   20270:	mov	r0, #32
   20274:	bl	306e8 <__assert_fail@plt+0x1dc38>
   20278:	mov	r7, r0
   2027c:	str	r0, [r8, #40]	; 0x28
   20280:	mov	r0, #100	; 0x64
   20284:	str	r0, [r7, #4]
   20288:	mov	r0, #100	; 0x64
   2028c:	bl	306e8 <__assert_fail@plt+0x1dc38>
   20290:	str	r5, [r7, #16]
   20294:	str	r0, [r7]
   20298:	mov	r0, r6
   2029c:	bl	37a44 <__assert_fail@plt+0x24f94>
   202a0:	mov	r0, r4
   202a4:	str	r5, [r7, #20]
   202a8:	str	r6, [r7, #12]
   202ac:	bl	127bc <strlen@plt>
   202b0:	mov	r1, r0
   202b4:	mov	r0, r4
   202b8:	mov	r2, r7
   202bc:	bl	361a0 <__assert_fail@plt+0x236f0>
   202c0:	cmp	r0, #0
   202c4:	bne	20314 <__assert_fail@plt+0xd864>
   202c8:	movw	r1, #1796	; 0x704
   202cc:	mov	r0, r4
   202d0:	movt	r1, #5
   202d4:	bl	129e4 <strpbrk@plt>
   202d8:	cmp	r0, #0
   202dc:	beq	202e8 <__assert_fail@plt+0xd838>
   202e0:	vldr	s0, [pc, #92]	; 20344 <__assert_fail@plt+0xd894>
   202e4:	b	20304 <__assert_fail@plt+0xd854>
   202e8:	mov	r0, r4
   202ec:	mov	r1, #46	; 0x2e
   202f0:	bl	127c8 <strchr@plt>
   202f4:	add	r1, pc, #76	; 0x4c
   202f8:	cmp	r0, #0
   202fc:	addeq	r1, r1, #4
   20300:	vldr	s0, [r1]
   20304:	mov	r0, #1
   20308:	vstr	s0, [r8, #28]
   2030c:	sub	sp, fp, #24
   20310:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20314:	movw	r1, #2124	; 0x84c
   20318:	mov	r6, r0
   2031c:	mov	r0, #0
   20320:	mov	r2, #5
   20324:	movt	r1, #5
   20328:	bl	12564 <dcgettext@plt>
   2032c:	mov	r2, r0
   20330:	mov	r0, #1
   20334:	mov	r1, #0
   20338:	mov	r3, r4
   2033c:	str	r6, [sp]
   20340:	bl	1269c <error@plt>
   20344:	svccc	0x004ccccd
   20348:	svccc	0x004ccccd
   2034c:	stclcc	12, cr12, [ip, #820]	; 0x334
   20350:	push	{r4, r5, r6, r7, fp, lr}
   20354:	add	fp, sp, #16
   20358:	sub	sp, sp, #8
   2035c:	mov	r6, r2
   20360:	mov	r2, r0
   20364:	mov	r0, #0
   20368:	cmp	r2, #0
   2036c:	beq	20410 <__assert_fail@plt+0xd960>
   20370:	ldr	r3, [r1]
   20374:	ldr	r5, [r2, r3, lsl #2]
   20378:	cmp	r5, #0
   2037c:	beq	20410 <__assert_fail@plt+0xd960>
   20380:	add	r0, r2, r3, lsl #2
   20384:	ldr	r4, [r0, #-4]
   20388:	add	r0, r3, #1
   2038c:	str	r0, [r1]
   20390:	movw	r1, #1564	; 0x61c
   20394:	mov	r0, r5
   20398:	movt	r1, #5
   2039c:	bl	12aa4 <strspn@plt>
   203a0:	movw	r7, #20084	; 0x4e74
   203a4:	cmp	r0, #1
   203a8:	movt	r7, #6
   203ac:	blt	20418 <__assert_fail@plt+0xd968>
   203b0:	ldrb	r0, [r5, r0]
   203b4:	cmp	r0, #0
   203b8:	bne	20418 <__assert_fail@plt+0xd968>
   203bc:	ldr	r1, [r7, #72]	; 0x48
   203c0:	mov	r0, r5
   203c4:	bl	233fc <__assert_fail@plt+0x1094c>
   203c8:	cmp	r0, #0
   203cc:	str	r0, [r6]
   203d0:	bmi	20418 <__assert_fail@plt+0xd968>
   203d4:	movw	r1, #19676	; 0x4cdc
   203d8:	movt	r1, #6
   203dc:	ldr	r0, [r1]
   203e0:	cmp	r0, #0
   203e4:	bne	203f8 <__assert_fail@plt+0xd948>
   203e8:	movw	r0, #3196	; 0xc7c
   203ec:	movt	r0, #5
   203f0:	add	r0, r0, #1296	; 0x510
   203f4:	str	r0, [r1]
   203f8:	bl	185b4 <__assert_fail@plt+0x5b04>
   203fc:	mov	r1, #1065353216	; 0x3f800000
   20400:	str	r1, [r0, #28]
   20404:	mov	r1, #0
   20408:	strh	r1, [r0, #18]
   2040c:	mov	r0, #1
   20410:	sub	sp, fp, #16
   20414:	pop	{r4, r5, r6, r7, fp, pc}
   20418:	movw	r1, #2170	; 0x87a
   2041c:	mov	r0, #0
   20420:	mov	r2, #5
   20424:	movt	r1, #5
   20428:	bl	12564 <dcgettext@plt>
   2042c:	ldr	r1, [r7, #72]	; 0x48
   20430:	mov	r6, r0
   20434:	mov	r0, #0
   20438:	mov	r2, r5
   2043c:	bl	2efe4 <__assert_fail@plt+0x1c534>
   20440:	str	r0, [sp]
   20444:	mov	r0, #1
   20448:	mov	r1, #0
   2044c:	mov	r2, r6
   20450:	mov	r3, r4
   20454:	bl	1269c <error@plt>
   20458:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2045c:	add	fp, sp, #24
   20460:	sub	sp, sp, #8
   20464:	movw	r4, #20568	; 0x5058
   20468:	mov	r6, r3
   2046c:	mov	r3, r0
   20470:	movw	r0, #2580	; 0xa14
   20474:	movw	r8, #2587	; 0xa1b
   20478:	movt	r4, #1
   2047c:	movt	r0, #5
   20480:	movt	r8, #5
   20484:	cmp	r6, r4
   20488:	moveq	r8, r0
   2048c:	mov	r0, #0
   20490:	cmp	r3, #0
   20494:	beq	206dc <__assert_fail@plt+0xdc2c>
   20498:	ldr	r7, [r1]
   2049c:	ldr	r5, [r3, r7, lsl #2]
   204a0:	cmp	r5, #0
   204a4:	beq	206dc <__assert_fail@plt+0xdc2c>
   204a8:	add	r0, r7, #1
   204ac:	str	r0, [r1]
   204b0:	ldrb	r0, [r5]
   204b4:	cmp	r0, #0
   204b8:	beq	20774 <__assert_fail@plt+0xdcc4>
   204bc:	mov	r0, r2
   204c0:	mov	r1, r6
   204c4:	mov	r2, r5
   204c8:	bl	18518 <__assert_fail@plt+0x5a68>
   204cc:	mov	r1, #0
   204d0:	vldr	s0, [pc, #680]	; 20780 <__assert_fail@plt+0xdcd0>
   204d4:	vldr	s2, [pc, #680]	; 20784 <__assert_fail@plt+0xdcd4>
   204d8:	vldr	s4, [pc, #696]	; 20798 <__assert_fail@plt+0xdce8>
   204dc:	vldr	s6, [pc, #688]	; 20794 <__assert_fail@plt+0xdce4>
   204e0:	vldr	s10, [pc, #680]	; 20790 <__assert_fail@plt+0xdce0>
   204e4:	vldr	s12, [pc, #672]	; 2078c <__assert_fail@plt+0xdcdc>
   204e8:	vldr	s14, [pc, #664]	; 20788 <__assert_fail@plt+0xdcd8>
   204ec:	vmov.f32	s8, #108	; 0x3f600000  0.875
   204f0:	mvn	r2, #67	; 0x43
   204f4:	mov	r3, #1
   204f8:	str	r1, [r0, #28]
   204fc:	subs	r1, r6, r4
   20500:	movwne	r1, #1
   20504:	strb	r1, [r0, #19]
   20508:	sub	r1, r6, r4
   2050c:	clz	r1, r1
   20510:	lsr	r1, r1, #5
   20514:	strb	r1, [r0, #18]
   20518:	add	r1, r0, #40	; 0x28
   2051c:	ldrb	r4, [r5]
   20520:	uxtab	r7, r2, r4
   20524:	mov	r6, r5
   20528:	cmp	r7, #47	; 0x2f
   2052c:	bhi	206cc <__assert_fail@plt+0xdc1c>
   20530:	add	r4, pc, #8
   20534:	mov	r5, #0
   20538:	vmov.f32	s1, s2
   2053c:	ldr	pc, [r4, r7, lsl #2]
   20540:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20544:	andeq	r0, r2, r4, ror #13
   20548:	andeq	r0, r2, r4, ror #13
   2054c:	andeq	r0, r2, r4, ror #13
   20550:	andeq	r0, r2, r4, ror #13
   20554:	andeq	r0, r2, r4, ror #13
   20558:	andeq	r0, r2, r4, ror #13
   2055c:	andeq	r0, r2, r4, ror #13
   20560:	andeq	r0, r2, r4, ror #13
   20564:	andeq	r0, r2, r4, ror #13
   20568:	andeq	r0, r2, r4, ror #13
   2056c:	andeq	r0, r2, r4, ror #13
   20570:	andeq	r0, r2, r4, ror #13
   20574:	andeq	r0, r2, r4, ror #13
   20578:	andeq	r0, r2, r4, ror #13
   2057c:	andeq	r0, r2, r4, ror #13
   20580:	andeq	r0, r2, r4, ror #13
   20584:	andeq	r0, r2, r4, ror #13
   20588:	andeq	r0, r2, r4, ror #13
   2058c:	andeq	r0, r2, r4, ror #13
   20590:	andeq	r0, r2, r4, ror #13
   20594:	andeq	r0, r2, r4, ror #13
   20598:	andeq	r0, r2, r4, ror #13
   2059c:	andeq	r0, r2, r4, ror #13
   205a0:	andeq	r0, r2, r4, ror #13
   205a4:	andeq	r0, r2, r4, ror #13
   205a8:	andeq	r0, r2, r4, ror #13
   205ac:	andeq	r0, r2, r4, ror #13
   205b0:	andeq	r0, r2, r4, ror #13
   205b4:	andeq	r0, r2, r4, ror #13
   205b8:	andeq	r0, r2, r0, lsl #13
   205bc:	andeq	r0, r2, r0, lsl #12
   205c0:	andeq	r0, r2, r8, asr #12
   205c4:	andeq	r0, r2, r4, ror #13
   205c8:	andeq	r0, r2, r8, ror r6
   205cc:	andeq	r0, r2, r4, ror #13
   205d0:	andeq	r0, r2, r4, ror #13
   205d4:	andeq	r0, r2, r4, ror #13
   205d8:	andeq	r0, r2, r4, ror #13
   205dc:	andeq	r0, r2, r4, ror #13
   205e0:	andeq	r0, r2, r0, ror #12
   205e4:	andeq	r0, r2, r4, ror #13
   205e8:	andeq	r0, r2, r4, ror #13
   205ec:	andeq	r0, r2, r4, ror #13
   205f0:	andeq	r0, r2, r8, lsl r6
   205f4:	andeq	r0, r2, r4, ror #13
   205f8:	andeq	r0, r2, r4, ror #13
   205fc:	andeq	r0, r2, r0, lsr r6
   20600:	vmov.f32	s1, s4
   20604:	mov	r5, #1
   20608:	ldrb	r7, [r1, r5]
   2060c:	cmp	r7, #0
   20610:	beq	2068c <__assert_fail@plt+0xdbdc>
   20614:	b	20720 <__assert_fail@plt+0xdc70>
   20618:	mov	r5, #5
   2061c:	vmov.f32	s1, s12
   20620:	ldrb	r7, [r1, r5]
   20624:	cmp	r7, #0
   20628:	beq	2068c <__assert_fail@plt+0xdbdc>
   2062c:	b	20720 <__assert_fail@plt+0xdc70>
   20630:	mov	r5, #6
   20634:	vmov.f32	s1, s14
   20638:	ldrb	r7, [r1, r5]
   2063c:	cmp	r7, #0
   20640:	beq	2068c <__assert_fail@plt+0xdbdc>
   20644:	b	20720 <__assert_fail@plt+0xdc70>
   20648:	mov	r5, #2
   2064c:	vmov.f32	s1, s6
   20650:	ldrb	r7, [r1, r5]
   20654:	cmp	r7, #0
   20658:	beq	2068c <__assert_fail@plt+0xdbdc>
   2065c:	b	20720 <__assert_fail@plt+0xdc70>
   20660:	mov	r5, #4
   20664:	vmov.f32	s1, s10
   20668:	ldrb	r7, [r1, r5]
   2066c:	cmp	r7, #0
   20670:	beq	2068c <__assert_fail@plt+0xdbdc>
   20674:	b	20720 <__assert_fail@plt+0xdc70>
   20678:	mov	r5, #3
   2067c:	vmov.f32	s1, s8
   20680:	ldrb	r7, [r1, r5]
   20684:	cmp	r7, #0
   20688:	bne	20720 <__assert_fail@plt+0xdc70>
   2068c:	vadd.f32	s0, s1, s0
   20690:	vstr	s0, [r0, #28]
   20694:	strb	r3, [r1, r5]
   20698:	mov	r5, r6
   2069c:	ldrb	r4, [r5, #1]!
   206a0:	cmp	r4, #0
   206a4:	beq	20520 <__assert_fail@plt+0xda70>
   206a8:	cmp	r4, #44	; 0x2c
   206ac:	bne	2074c <__assert_fail@plt+0xdc9c>
   206b0:	ldrb	r4, [r6, #2]!
   206b4:	mov	r5, r6
   206b8:	cmp	r4, #0
   206bc:	bne	20520 <__assert_fail@plt+0xda70>
   206c0:	movw	r1, #2875	; 0xb3b
   206c4:	movt	r1, #5
   206c8:	b	20754 <__assert_fail@plt+0xdca4>
   206cc:	uxtb	r0, r4
   206d0:	cmp	r0, #0
   206d4:	bne	206e4 <__assert_fail@plt+0xdc34>
   206d8:	mov	r0, #1
   206dc:	sub	sp, fp, #24
   206e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   206e4:	movw	r1, #2745	; 0xab9
   206e8:	movt	r1, #5
   206ec:	b	206f8 <__assert_fail@plt+0xdc48>
   206f0:	movw	r1, #2644	; 0xa54
   206f4:	movt	r1, #5
   206f8:	mov	r0, #0
   206fc:	mov	r2, #5
   20700:	bl	12564 <dcgettext@plt>
   20704:	mov	r2, r0
   20708:	ldrb	r0, [r6]
   2070c:	str	r0, [sp]
   20710:	mov	r0, #1
   20714:	mov	r1, #0
   20718:	mov	r3, r8
   2071c:	bl	1269c <error@plt>
   20720:	movw	r1, #2772	; 0xad4
   20724:	mov	r0, #0
   20728:	mov	r2, #5
   2072c:	movt	r1, #5
   20730:	bl	12564 <dcgettext@plt>
   20734:	ldrb	r3, [r6]
   20738:	mov	r2, r0
   2073c:	mov	r0, #1
   20740:	mov	r1, #0
   20744:	str	r8, [sp]
   20748:	bl	1269c <error@plt>
   2074c:	movw	r1, #2825	; 0xb09
   20750:	movt	r1, #5
   20754:	mov	r0, #0
   20758:	mov	r2, #5
   2075c:	bl	12564 <dcgettext@plt>
   20760:	mov	r2, r0
   20764:	mov	r0, #1
   20768:	mov	r1, #0
   2076c:	mov	r3, r8
   20770:	bl	1269c <error@plt>
   20774:	movw	r1, #2593	; 0xa21
   20778:	movt	r1, #5
   2077c:	b	20754 <__assert_fail@plt+0xdca4>
   20780:	andeq	r0, r0, r0
   20784:	bcc	1a52a3c <stdout@@GLIBC_2.4+0x19ee4e0>
   20788:			; <UNDEFINED> instruction: 0x378560fd
   2078c:	usatcc	r7, #29, lr, asr #16
   20790:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   20794:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   20798:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   2079c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   207a0:	add	fp, sp, #28
   207a4:	sub	sp, sp, #20
   207a8:	movw	r4, #19684	; 0x4ce4
   207ac:	mov	r6, r2
   207b0:	str	r1, [sp, #12]
   207b4:	mov	r8, r0
   207b8:	ldr	r5, [r0, #12]
   207bc:	ldr	r0, [fp, #20]
   207c0:	ldr	r1, [fp, #12]
   207c4:	ldr	r2, [fp, #8]
   207c8:	mov	sl, r3
   207cc:	movt	r4, #6
   207d0:	ldr	r7, [r4]
   207d4:	cmp	r7, #0
   207d8:	bne	20800 <__assert_fail@plt+0xdd50>
   207dc:	add	r0, r5, #1
   207e0:	mov	r7, r1
   207e4:	mov	r9, r2
   207e8:	bl	306e8 <__assert_fail@plt+0x1dc38>
   207ec:	mov	r1, r7
   207f0:	mov	r7, r0
   207f4:	ldr	r0, [fp, #20]
   207f8:	mov	r2, r9
   207fc:	str	r7, [r4]
   20800:	add	r0, r0, r1
   20804:	sub	r9, r5, #1
   20808:	cmp	r2, #0
   2080c:	str	r0, [sp, #16]
   20810:	bne	20828 <__assert_fail@plt+0xdd78>
   20814:	b	208fc <__assert_fail@plt+0xde4c>
   20818:	mov	r8, r4
   2081c:	ldrb	r0, [r6]
   20820:	cmp	r0, #0
   20824:	beq	20968 <__assert_fail@plt+0xdeb8>
   20828:	ldr	r1, [r8, #24]
   2082c:	mov	r0, r6
   20830:	mov	r4, r8
   20834:	bl	26820 <__assert_fail@plt+0x13d70>
   20838:	cmp	r0, #0
   2083c:	mov	r5, sl
   20840:	subne	r5, r0, r6
   20844:	cmp	r9, r5
   20848:	bls	20958 <__assert_fail@plt+0xdea8>
   2084c:	mov	r8, r0
   20850:	mov	r0, r7
   20854:	mov	r1, r6
   20858:	mov	r2, r5
   2085c:	bl	1284c <strncpy@plt>
   20860:	sub	sl, sl, r5
   20864:	add	r6, r6, r5
   20868:	add	r7, r7, r5
   2086c:	sub	r9, r9, r5
   20870:	cmp	r8, #0
   20874:	beq	20818 <__assert_fail@plt+0xdd68>
   20878:	ldr	r5, [sp, #16]
   2087c:	mov	r8, r4
   20880:	cmp	r9, r5
   20884:	bls	2095c <__assert_fail@plt+0xdeac>
   20888:	ldr	r1, [fp, #8]
   2088c:	mov	r0, r7
   20890:	bl	12660 <strcpy@plt>
   20894:	ldr	r0, [fp, #12]
   20898:	ldr	r1, [fp, #16]
   2089c:	add	r0, r7, r0
   208a0:	bl	12660 <strcpy@plt>
   208a4:	ldr	r1, [fp, #20]
   208a8:	sub	r9, r9, r5
   208ac:	add	r7, r0, r1
   208b0:	ldr	r0, [r8, #20]
   208b4:	sub	sl, sl, r0
   208b8:	add	r6, r6, r0
   208bc:	ldrb	r0, [r6]
   208c0:	cmp	r0, #0
   208c4:	bne	20828 <__assert_fail@plt+0xdd78>
   208c8:	b	20968 <__assert_fail@plt+0xdeb8>
   208cc:	ldr	r1, [fp, #16]
   208d0:	mov	r0, r7
   208d4:	bl	12660 <strcpy@plt>
   208d8:	ldr	r0, [fp, #20]
   208dc:	sub	r9, r9, r4
   208e0:	add	r7, r7, r0
   208e4:	ldr	r0, [r8, #20]
   208e8:	sub	sl, sl, r0
   208ec:	add	r6, r6, r0
   208f0:	ldrb	r0, [r6]
   208f4:	cmp	r0, #0
   208f8:	beq	20968 <__assert_fail@plt+0xdeb8>
   208fc:	ldr	r1, [r8, #24]
   20900:	mov	r0, r6
   20904:	bl	26820 <__assert_fail@plt+0x13d70>
   20908:	cmp	r0, #0
   2090c:	mov	r4, sl
   20910:	subne	r4, r0, r6
   20914:	cmp	r9, r4
   20918:	bls	2095c <__assert_fail@plt+0xdeac>
   2091c:	mov	r5, r0
   20920:	mov	r0, r7
   20924:	mov	r1, r6
   20928:	mov	r2, r4
   2092c:	bl	1284c <strncpy@plt>
   20930:	sub	sl, sl, r4
   20934:	add	r6, r6, r4
   20938:	add	r7, r7, r4
   2093c:	sub	r9, r9, r4
   20940:	cmp	r5, #0
   20944:	beq	208f0 <__assert_fail@plt+0xde40>
   20948:	ldr	r4, [sp, #16]
   2094c:	cmp	r9, r4
   20950:	bhi	208cc <__assert_fail@plt+0xde1c>
   20954:	b	2095c <__assert_fail@plt+0xdeac>
   20958:	mov	r8, r4
   2095c:	ldrb	r0, [r6]
   20960:	cmp	r0, #0
   20964:	bne	209a8 <__assert_fail@plt+0xdef8>
   20968:	movw	r2, #19684	; 0x4ce4
   2096c:	mov	r1, #0
   20970:	ldr	r0, [fp, #24]
   20974:	movt	r2, #6
   20978:	strb	r1, [r7]
   2097c:	str	r1, [sp]
   20980:	str	r1, [sp, #4]
   20984:	ldr	r1, [sp, #12]
   20988:	ldr	r2, [r2]
   2098c:	str	r0, [sp, #8]
   20990:	sub	r0, r7, r2
   20994:	add	r3, r0, #1
   20998:	mov	r0, r8
   2099c:	bl	209cc <__assert_fail@plt+0xdf1c>
   209a0:	sub	sp, fp, #28
   209a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   209a8:	movw	r1, #4588	; 0x11ec
   209ac:	mov	r0, #0
   209b0:	mov	r2, #5
   209b4:	movt	r1, #5
   209b8:	bl	12564 <dcgettext@plt>
   209bc:	mov	r2, r0
   209c0:	mov	r0, #1
   209c4:	mov	r1, #0
   209c8:	bl	1269c <error@plt>
   209cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209d0:	add	fp, sp, #28
   209d4:	sub	sp, sp, #4
   209d8:	cmp	r2, #0
   209dc:	beq	20bf8 <__assert_fail@plt+0xe148>
   209e0:	movw	sl, #5427	; 0x1533
   209e4:	mov	r5, r0
   209e8:	ldr	r6, [fp, #16]
   209ec:	ldr	r0, [fp, #12]
   209f0:	mov	r9, r3
   209f4:	mov	r8, r2
   209f8:	mov	r4, r1
   209fc:	movt	sl, #5
   20a00:	cmp	r2, sl
   20a04:	beq	20ac4 <__assert_fail@plt+0xe014>
   20a08:	ldr	r1, [r4, #16]
   20a0c:	add	r0, r0, r9
   20a10:	add	r0, r0, r1
   20a14:	ldr	r1, [r5, #12]
   20a18:	cmp	r0, r1
   20a1c:	bls	20a80 <__assert_fail@plt+0xdfd0>
   20a20:	cmp	r6, #0
   20a24:	bne	20c18 <__assert_fail@plt+0xe168>
   20a28:	ldr	r0, [r5, #28]
   20a2c:	ldr	r1, [r4]
   20a30:	cmp	r1, r0
   20a34:	beq	20c18 <__assert_fail@plt+0xe168>
   20a38:	ldr	r0, [r5, #24]
   20a3c:	cmp	r0, #0
   20a40:	bne	20c24 <__assert_fail@plt+0xe174>
   20a44:	ldr	r0, [r5]
   20a48:	cmp	r0, #0
   20a4c:	beq	20a64 <__assert_fail@plt+0xdfb4>
   20a50:	ldr	r0, [r5, #36]	; 0x24
   20a54:	cmp	r0, #0
   20a58:	ldreq	r0, [r5, #40]	; 0x28
   20a5c:	cmpeq	r0, #0
   20a60:	bne	20c24 <__assert_fail@plt+0xe174>
   20a64:	mov	r0, r5
   20a68:	mov	r1, r4
   20a6c:	bl	20c48 <__assert_fail@plt+0xe198>
   20a70:	ldr	r0, [r5, #40]	; 0x28
   20a74:	cmp	r0, #0
   20a78:	bne	20a94 <__assert_fail@plt+0xdfe4>
   20a7c:	b	20aa8 <__assert_fail@plt+0xdff8>
   20a80:	cmp	r6, #0
   20a84:	bne	20aa8 <__assert_fail@plt+0xdff8>
   20a88:	ldr	r0, [r5, #40]	; 0x28
   20a8c:	cmp	r0, #0
   20a90:	beq	20aa8 <__assert_fail@plt+0xdff8>
   20a94:	ldr	r1, [r5, #28]
   20a98:	ldr	r2, [r4]
   20a9c:	sub	r1, r2, r1
   20aa0:	cmp	r1, r0
   20aa4:	beq	20ab8 <__assert_fail@plt+0xe008>
   20aa8:	ldr	r0, [r5, #16]
   20aac:	ldr	r1, [r4]
   20ab0:	cmp	r1, r0
   20ab4:	bne	20ac4 <__assert_fail@plt+0xe014>
   20ab8:	mov	r0, r5
   20abc:	mov	r1, r4
   20ac0:	bl	20c48 <__assert_fail@plt+0xe198>
   20ac4:	cmp	r6, #0
   20ac8:	moveq	r0, #1
   20acc:	streq	r0, [r4, #28]
   20ad0:	ldr	r0, [r4]
   20ad4:	ldr	r1, [r4, #8]
   20ad8:	cmp	r0, r1
   20adc:	bcc	20b14 <__assert_fail@plt+0xe064>
   20ae0:	ldr	r0, [r4, #4]
   20ae4:	cmp	r0, #0
   20ae8:	beq	20b00 <__assert_fail@plt+0xe050>
   20aec:	lsl	r2, r1, #1
   20af0:	lsl	r1, r1, #3
   20af4:	str	r2, [r4, #8]
   20af8:	bl	30730 <__assert_fail@plt+0x1dc80>
   20afc:	b	20b10 <__assert_fail@plt+0xe060>
   20b00:	mov	r0, #64	; 0x40
   20b04:	str	r0, [r4, #8]
   20b08:	mov	r0, #256	; 0x100
   20b0c:	bl	306e8 <__assert_fail@plt+0x1dc38>
   20b10:	str	r0, [r4, #4]
   20b14:	cmp	r8, sl
   20b18:	beq	20ba0 <__assert_fail@plt+0xe0f0>
   20b1c:	mov	sl, r6
   20b20:	ldr	r1, [fp, #8]
   20b24:	ldm	r4, {r2, r3}
   20b28:	ldr	r6, [r4, #12]
   20b2c:	ldr	r0, [r4, #16]
   20b30:	add	r7, r2, #1
   20b34:	str	r7, [r4]
   20b38:	add	r7, r6, r0
   20b3c:	cmp	r1, #0
   20b40:	str	r7, [r3, r2, lsl #2]
   20b44:	beq	20b64 <__assert_fail@plt+0xe0b4>
   20b48:	ldr	r2, [r4, #12]
   20b4c:	add	r0, r2, r0
   20b50:	bl	12660 <strcpy@plt>
   20b54:	ldr	r0, [r4, #16]
   20b58:	ldr	r1, [fp, #12]
   20b5c:	add	r0, r0, r1
   20b60:	str	r0, [r4, #16]
   20b64:	ldr	r1, [r4, #12]
   20b68:	mov	r6, sl
   20b6c:	add	r0, r1, r0
   20b70:	mov	r1, r8
   20b74:	bl	12660 <strcpy@plt>
   20b78:	ldr	r0, [r4, #16]
   20b7c:	cmp	sl, #0
   20b80:	add	r0, r0, r9
   20b84:	str	r0, [r4, #16]
   20b88:	beq	20bb8 <__assert_fail@plt+0xe108>
   20b8c:	ldr	r0, [r5, #16]
   20b90:	ldr	r1, [r4]
   20b94:	cmp	r1, r0
   20b98:	beq	20bd8 <__assert_fail@plt+0xe128>
   20b9c:	b	20be4 <__assert_fail@plt+0xe134>
   20ba0:	ldm	r4, {r0, r1}
   20ba4:	add	r2, r0, #1
   20ba8:	str	r2, [r4]
   20bac:	mov	r2, #0
   20bb0:	str	r2, [r1, r0, lsl #2]
   20bb4:	b	20be4 <__assert_fail@plt+0xe134>
   20bb8:	ldr	r0, [r5, #40]	; 0x28
   20bbc:	cmp	r0, #0
   20bc0:	beq	20b8c <__assert_fail@plt+0xe0dc>
   20bc4:	ldr	r1, [r5, #28]
   20bc8:	ldr	r2, [r4]
   20bcc:	sub	r1, r2, r1
   20bd0:	cmp	r1, r0
   20bd4:	bne	20b8c <__assert_fail@plt+0xe0dc>
   20bd8:	mov	r0, r5
   20bdc:	mov	r1, r4
   20be0:	bl	20c48 <__assert_fail@plt+0xe198>
   20be4:	cmp	r6, #0
   20be8:	ldrne	r0, [r4, #16]
   20bec:	strne	r0, [r4, #20]
   20bf0:	sub	sp, fp, #28
   20bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20bf8:	movw	r0, #4799	; 0x12bf
   20bfc:	movw	r1, #4625	; 0x1211
   20c00:	movw	r3, #4811	; 0x12cb
   20c04:	movw	r2, #341	; 0x155
   20c08:	movt	r0, #5
   20c0c:	movt	r1, #5
   20c10:	movt	r3, #5
   20c14:	bl	12ab0 <__assert_fail@plt>
   20c18:	movw	r1, #4929	; 0x1341
   20c1c:	movt	r1, #5
   20c20:	b	20c2c <__assert_fail@plt+0xe17c>
   20c24:	movw	r1, #4988	; 0x137c
   20c28:	movt	r1, #5
   20c2c:	mov	r0, #0
   20c30:	mov	r2, #5
   20c34:	bl	12564 <dcgettext@plt>
   20c38:	mov	r2, r0
   20c3c:	mov	r0, #1
   20c40:	mov	r1, #0
   20c44:	bl	1269c <error@plt>
   20c48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c4c:	add	fp, sp, #28
   20c50:	sub	sp, sp, #36	; 0x24
   20c54:	mov	r5, r0
   20c58:	mov	r0, #1
   20c5c:	mov	r8, r1
   20c60:	str	r0, [r1, #28]
   20c64:	ldr	r2, [r1]
   20c68:	ldmib	r1, {r0, r1}
   20c6c:	cmp	r2, r1
   20c70:	bcc	20ca4 <__assert_fail@plt+0xe1f4>
   20c74:	cmp	r0, #0
   20c78:	beq	20c90 <__assert_fail@plt+0xe1e0>
   20c7c:	lsl	r2, r1, #1
   20c80:	lsl	r1, r1, #3
   20c84:	str	r2, [r8, #8]
   20c88:	bl	30730 <__assert_fail@plt+0x1dc80>
   20c8c:	b	20ca0 <__assert_fail@plt+0xe1f0>
   20c90:	mov	r0, #64	; 0x40
   20c94:	str	r0, [r8, #8]
   20c98:	mov	r0, #256	; 0x100
   20c9c:	bl	306e8 <__assert_fail@plt+0x1dc38>
   20ca0:	str	r0, [r8, #4]
   20ca4:	ldr	r2, [r8]
   20ca8:	mov	r3, #0
   20cac:	adds	r1, r2, #1
   20cb0:	str	r1, [r8]
   20cb4:	str	r3, [r0, r2, lsl #2]
   20cb8:	bcs	211c0 <__assert_fail@plt+0xe710>
   20cbc:	ldr	r0, [r8, #4]
   20cc0:	ldr	r0, [r0, r2, lsl #2]
   20cc4:	cmp	r0, #0
   20cc8:	bne	211e0 <__assert_fail@plt+0xe730>
   20ccc:	mov	r0, #4
   20cd0:	add	r0, r0, r1, lsl #2
   20cd4:	bl	306e8 <__assert_fail@plt+0x1dc38>
   20cd8:	ldr	sl, [r8]
   20cdc:	ldr	lr, [r5, #28]
   20ce0:	mov	r9, r0
   20ce4:	add	r0, r0, #4
   20ce8:	mov	ip, #0
   20cec:	str	r5, [sp, #24]
   20cf0:	str	r8, [sp, #4]
   20cf4:	str	r0, [sp, #8]
   20cf8:	mov	r4, sl
   20cfc:	cmp	lr, #0
   20d00:	str	ip, [sp, #28]
   20d04:	str	r4, [sp, #32]
   20d08:	bne	20d54 <__assert_fail@plt+0xe2a4>
   20d0c:	b	20ebc <__assert_fail@plt+0xe40c>
   20d10:	add	r2, lr, #1
   20d14:	cmp	r6, r2
   20d18:	movhi	r2, r6
   20d1c:	add	r0, r7, r3
   20d20:	sub	ip, r0, lr
   20d24:	ldr	sl, [r8]
   20d28:	cmp	r2, #0
   20d2c:	add	r1, ip, #1
   20d30:	movweq	r2, #1
   20d34:	mov	r4, r2
   20d38:	sub	r0, sl, lr
   20d3c:	cmp	r1, r0
   20d40:	bcs	2114c <__assert_fail@plt+0xe69c>
   20d44:	cmp	lr, #0
   20d48:	str	ip, [sp, #28]
   20d4c:	str	r4, [sp, #32]
   20d50:	beq	20ebc <__assert_fail@plt+0xe40c>
   20d54:	ldr	r2, [r8, #4]
   20d58:	mov	r3, #0
   20d5c:	cmp	lr, #4
   20d60:	bcc	20e4c <__assert_fail@plt+0xe39c>
   20d64:	add	r7, r2, lr, lsl #2
   20d68:	cmp	r9, r7
   20d6c:	bcs	20d7c <__assert_fail@plt+0xe2cc>
   20d70:	add	r7, r9, lr, lsl #2
   20d74:	cmp	r7, r2
   20d78:	bhi	20e4c <__assert_fail@plt+0xe39c>
   20d7c:	bic	r3, lr, #3
   20d80:	mov	r0, #1
   20d84:	str	lr, [sp, #20]
   20d88:	mov	lr, #0
   20d8c:	mov	ip, #48	; 0x30
   20d90:	sub	r6, r3, #4
   20d94:	add	r7, r0, r6, lsr #2
   20d98:	cmp	r6, #12
   20d9c:	and	r0, r7, #3
   20da0:	str	r0, [sp, #16]
   20da4:	bcc	20e0c <__assert_fail@plt+0xe35c>
   20da8:	ldr	r0, [sp, #16]
   20dac:	mov	r4, #0
   20db0:	mov	lr, #0
   20db4:	sub	r8, r7, r0
   20db8:	add	r6, r2, r4
   20dbc:	add	r1, r9, r4
   20dc0:	add	r4, r4, #64	; 0x40
   20dc4:	subs	r8, r8, #4
   20dc8:	add	lr, lr, #16
   20dcc:	mov	r0, r6
   20dd0:	mov	r5, r1
   20dd4:	add	r7, r1, #16
   20dd8:	add	r1, r1, #32
   20ddc:	vld1.32	{d16-d17}, [r0], ip
   20de0:	vst1.32	{d16-d17}, [r5], ip
   20de4:	add	ip, r6, #16
   20de8:	vld1.32	{d16-d17}, [ip]
   20dec:	mov	ip, #48	; 0x30
   20df0:	vst1.32	{d16-d17}, [r7]
   20df4:	add	r7, r6, #32
   20df8:	vld1.32	{d16-d17}, [r7]
   20dfc:	vst1.32	{d16-d17}, [r1]
   20e00:	vld1.32	{d16-d17}, [r0]
   20e04:	vst1.32	{d16-d17}, [r5]
   20e08:	bne	20db8 <__assert_fail@plt+0xe308>
   20e0c:	ldr	r0, [sp, #16]
   20e10:	cmp	r0, #0
   20e14:	beq	20e34 <__assert_fail@plt+0xe384>
   20e18:	add	r7, r2, lr, lsl #2
   20e1c:	add	r6, r9, lr, lsl #2
   20e20:	rsb	r5, r0, #0
   20e24:	vld1.32	{d16-d17}, [r7]!
   20e28:	adds	r5, r5, #1
   20e2c:	vst1.32	{d16-d17}, [r6]!
   20e30:	bcc	20e24 <__assert_fail@plt+0xe374>
   20e34:	ldr	lr, [sp, #20]
   20e38:	ldr	r8, [sp, #4]
   20e3c:	ldr	ip, [sp, #28]
   20e40:	ldr	r4, [sp, #32]
   20e44:	cmp	lr, r3
   20e48:	beq	20ebc <__assert_fail@plt+0xe40c>
   20e4c:	mvn	r0, r3
   20e50:	ands	r6, lr, #3
   20e54:	add	r7, lr, r0
   20e58:	beq	20e70 <__assert_fail@plt+0xe3c0>
   20e5c:	ldr	r0, [r2, r3, lsl #2]
   20e60:	subs	r6, r6, #1
   20e64:	str	r0, [r9, r3, lsl #2]
   20e68:	add	r3, r3, #1
   20e6c:	bne	20e5c <__assert_fail@plt+0xe3ac>
   20e70:	cmp	r7, #3
   20e74:	bcc	20ebc <__assert_fail@plt+0xe40c>
   20e78:	sub	r7, lr, r3
   20e7c:	lsl	r3, r3, #2
   20e80:	mov	r6, r9
   20e84:	add	r0, r2, #16
   20e88:	ldr	r1, [r2, r3]!
   20e8c:	add	r5, r6, #16
   20e90:	subs	r7, r7, #4
   20e94:	str	r1, [r6, r3]!
   20e98:	ldr	r1, [r2, #4]
   20e9c:	str	r1, [r6, #4]
   20ea0:	ldr	r1, [r2, #8]
   20ea4:	str	r1, [r6, #8]
   20ea8:	ldr	r1, [r2, #12]
   20eac:	mov	r2, r0
   20eb0:	str	r1, [r6, #12]
   20eb4:	mov	r6, r5
   20eb8:	bne	20e84 <__assert_fail@plt+0xe3d4>
   20ebc:	ldr	r5, [sp, #24]
   20ec0:	cmp	lr, r4
   20ec4:	mov	r7, lr
   20ec8:	bcs	20f68 <__assert_fail@plt+0xe4b8>
   20ecc:	add	r2, lr, ip
   20ed0:	mov	r7, lr
   20ed4:	cmp	r2, sl
   20ed8:	bcs	20f68 <__assert_fail@plt+0xe4b8>
   20edc:	mvn	r0, lr
   20ee0:	ldr	r3, [r8, #4]
   20ee4:	add	r1, r4, r0
   20ee8:	add	r0, sl, r0
   20eec:	sub	r7, r0, ip
   20ef0:	mov	r0, r1
   20ef4:	cmp	r7, r1
   20ef8:	movcc	r0, r7
   20efc:	add	r5, r0, #1
   20f00:	cmp	r5, #4
   20f04:	bcc	20f44 <__assert_fail@plt+0xe494>
   20f08:	cmp	r7, r1
   20f0c:	movcc	r1, r7
   20f10:	add	r7, r9, lr, lsl #2
   20f14:	add	r0, r2, r1
   20f18:	add	r0, r3, r0, lsl #2
   20f1c:	add	r0, r0, #4
   20f20:	cmp	r7, r0
   20f24:	bcs	21090 <__assert_fail@plt+0xe5e0>
   20f28:	lsl	r0, lr, #2
   20f2c:	add	r0, r0, r1, lsl #2
   20f30:	ldr	r1, [sp, #8]
   20f34:	add	r0, r1, r0
   20f38:	add	r1, r3, r2, lsl #2
   20f3c:	cmp	r0, r1
   20f40:	bls	21090 <__assert_fail@plt+0xe5e0>
   20f44:	ldr	r5, [sp, #24]
   20f48:	mov	r7, lr
   20f4c:	ldr	r0, [r3, r2, lsl #2]
   20f50:	add	r2, r2, #1
   20f54:	cmp	r2, sl
   20f58:	str	r0, [r9, r7, lsl #2]
   20f5c:	add	r7, r7, #1
   20f60:	cmpcc	r7, r4
   20f64:	bcc	20f4c <__assert_fail@plt+0xe49c>
   20f68:	cmp	r7, lr
   20f6c:	bcc	2117c <__assert_fail@plt+0xe6cc>
   20f70:	mov	r0, #0
   20f74:	mov	r2, r7
   20f78:	mov	r3, r9
   20f7c:	str	r0, [r9, r7, lsl #2]
   20f80:	mov	r0, r5
   20f84:	ldr	r1, [r8, #24]
   20f88:	ldr	r6, [r5, #32]
   20f8c:	blx	r6
   20f90:	cmp	r0, #0
   20f94:	beq	20fc4 <__assert_fail@plt+0xe514>
   20f98:	ldr	r0, [r8, #36]	; 0x24
   20f9c:	ldr	r6, [sp, #32]
   20fa0:	cmp	r0, r6
   20fa4:	bcs	21008 <__assert_fail@plt+0xe558>
   20fa8:	ldr	r3, [sp, #28]
   20fac:	str	r6, [r8, #36]	; 0x24
   20fb0:	mov	r0, r6
   20fb4:	ldr	r1, [r8, #40]	; 0x28
   20fb8:	cmp	r1, r0
   20fbc:	bhi	21020 <__assert_fail@plt+0xe570>
   20fc0:	b	21048 <__assert_fail@plt+0xe598>
   20fc4:	ldr	lr, [r5, #28]
   20fc8:	ldr	r1, [sp, #32]
   20fcc:	add	r2, lr, #1
   20fd0:	cmp	r1, r2
   20fd4:	bls	2119c <__assert_fail@plt+0xe6ec>
   20fd8:	ldr	r7, [r8, #40]	; 0x28
   20fdc:	ldr	ip, [sp, #28]
   20fe0:	sub	r0, r7, #1
   20fe4:	cmp	r0, r1
   20fe8:	strcs	r1, [r8, #40]	; 0x28
   20fec:	movcs	r7, r1
   20ff0:	ldr	r3, [r8, #36]	; 0x24
   20ff4:	cmp	r3, #0
   20ff8:	cmpne	r7, r3
   20ffc:	bhi	21064 <__assert_fail@plt+0xe5b4>
   21000:	lsr	r1, r1, #1
   21004:	b	2107c <__assert_fail@plt+0xe5cc>
   21008:	ldr	r3, [sp, #28]
   2100c:	cmp	r0, #0
   21010:	beq	21048 <__assert_fail@plt+0xe598>
   21014:	ldr	r1, [r8, #40]	; 0x28
   21018:	cmp	r1, r0
   2101c:	bls	21048 <__assert_fail@plt+0xe598>
   21020:	sub	r0, r1, r0
   21024:	mov	r1, #0
   21028:	cmp	r1, r0, lsr #1
   2102c:	addeq	r6, r6, #1
   21030:	lsrne	r0, r0, #1
   21034:	addne	r6, r0, r6
   21038:	ldr	lr, [r5, #28]
   2103c:	cmp	lr, #0
   21040:	bne	20d10 <__assert_fail@plt+0xe260>
   21044:	b	2105c <__assert_fail@plt+0xe5ac>
   21048:	cmn	r6, #1
   2104c:	addne	r6, r6, #1
   21050:	ldr	lr, [r5, #28]
   21054:	cmp	lr, #0
   21058:	bne	20d10 <__assert_fail@plt+0xe260>
   2105c:	mov	r2, r6
   21060:	b	20d1c <__assert_fail@plt+0xe26c>
   21064:	sub	r3, r7, r3
   21068:	mov	r0, #0
   2106c:	cmp	r0, r3, lsr #1
   21070:	subeq	r1, r1, #1
   21074:	lsrne	r0, r3, #1
   21078:	subne	r1, r1, r0
   2107c:	cmp	r1, r2
   21080:	movhi	r2, r1
   21084:	cmp	lr, #0
   21088:	moveq	r2, r1
   2108c:	b	20d24 <__assert_fail@plt+0xe274>
   21090:	bic	r0, r5, #3
   21094:	mov	r1, #1
   21098:	str	lr, [sp, #20]
   2109c:	str	r0, [sp, #16]
   210a0:	subs	r0, r0, #4
   210a4:	add	r6, r1, r0, lsr #2
   210a8:	and	r0, r6, #1
   210ac:	str	r0, [sp, #12]
   210b0:	beq	21138 <__assert_fail@plt+0xe688>
   210b4:	sub	r4, r0, r6
   210b8:	add	r0, lr, ip
   210bc:	mov	lr, #0
   210c0:	mov	r6, #32
   210c4:	add	ip, r3, r0, lsl #2
   210c8:	add	r0, ip, #16
   210cc:	vld1.32	{d16-d17}, [ip], r6
   210d0:	add	r1, r7, #16
   210d4:	adds	r4, r4, #2
   210d8:	add	lr, lr, #8
   210dc:	vst1.32	{d16-d17}, [r7], r6
   210e0:	vld1.32	{d16-d17}, [r0]
   210e4:	vst1.32	{d16-d17}, [r1]
   210e8:	bne	210c8 <__assert_fail@plt+0xe618>
   210ec:	ldr	r0, [sp, #12]
   210f0:	cmp	r0, #0
   210f4:	beq	21114 <__assert_fail@plt+0xe664>
   210f8:	add	r0, r2, lr
   210fc:	add	r0, r3, r0, lsl #2
   21100:	vld1.32	{d16-d17}, [r0]
   21104:	ldr	r0, [sp, #20]
   21108:	add	r0, r0, lr
   2110c:	add	r0, r9, r0, lsl #2
   21110:	vst1.32	{d16-d17}, [r0]
   21114:	ldr	r0, [sp, #16]
   21118:	ldr	lr, [sp, #20]
   2111c:	cmp	r5, r0
   21120:	ldr	r5, [sp, #24]
   21124:	add	r7, lr, r0
   21128:	beq	20f68 <__assert_fail@plt+0xe4b8>
   2112c:	ldr	r4, [sp, #32]
   21130:	add	r2, r2, r0
   21134:	b	20f4c <__assert_fail@plt+0xe49c>
   21138:	mov	lr, #0
   2113c:	ldr	r0, [sp, #12]
   21140:	cmp	r0, #0
   21144:	bne	210f8 <__assert_fail@plt+0xe648>
   21148:	b	21114 <__assert_fail@plt+0xe664>
   2114c:	mov	r0, r9
   21150:	bl	32910 <__assert_fail@plt+0x1fe60>
   21154:	ldr	r0, [r5, #28]
   21158:	mov	r2, #0
   2115c:	mvn	r1, #0
   21160:	str	r2, [r8, #28]
   21164:	str	r1, [r8, #32]
   21168:	str	r0, [r8]
   2116c:	ldr	r0, [r8, #20]
   21170:	str	r0, [r8, #16]
   21174:	sub	sp, fp, #28
   21178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2117c:	movw	r0, #5304	; 0x14b8
   21180:	movw	r1, #4625	; 0x1211
   21184:	movw	r3, #5333	; 0x14d5
   21188:	mov	r2, #242	; 0xf2
   2118c:	movt	r0, #5
   21190:	movt	r1, #5
   21194:	movt	r3, #5
   21198:	bl	12ab0 <__assert_fail@plt>
   2119c:	movw	r1, #4747	; 0x128b
   211a0:	mov	r0, #0
   211a4:	mov	r2, #5
   211a8:	movt	r1, #5
   211ac:	bl	12564 <dcgettext@plt>
   211b0:	mov	r2, r0
   211b4:	mov	r0, #1
   211b8:	mov	r1, #0
   211bc:	bl	1269c <error@plt>
   211c0:	movw	r0, #4605	; 0x11fd
   211c4:	movw	r1, #4625	; 0x1211
   211c8:	movw	r3, #4636	; 0x121c
   211cc:	movw	r2, #261	; 0x105
   211d0:	movt	r0, #5
   211d4:	movt	r1, #5
   211d8:	movt	r3, #5
   211dc:	bl	12ab0 <__assert_fail@plt>
   211e0:	movw	r0, #4704	; 0x1260
   211e4:	movw	r1, #4625	; 0x1211
   211e8:	movw	r3, #4636	; 0x121c
   211ec:	movw	r2, #262	; 0x106
   211f0:	movt	r0, #5
   211f4:	movt	r1, #5
   211f8:	movt	r3, #5
   211fc:	bl	12ab0 <__assert_fail@plt>
   21200:	ldr	r0, [r0, #28]
   21204:	mov	r3, #0
   21208:	mvn	r2, #0
   2120c:	str	r3, [r1, #28]
   21210:	str	r2, [r1, #32]
   21214:	str	r0, [r1]
   21218:	ldr	r0, [r1, #20]
   2121c:	str	r0, [r1, #16]
   21220:	bx	lr
   21224:	push	{fp, lr}
   21228:	mov	fp, sp
   2122c:	mov	r0, #0
   21230:	bl	1257c <sysconf@plt>
   21234:	cmp	r0, #0
   21238:	mvnle	r0, #-2147483648	; 0x80000000
   2123c:	pop	{fp, pc}
   21240:	push	{r4, r5, fp, lr}
   21244:	add	fp, sp, #8
   21248:	movw	r0, #17732	; 0x4544
   2124c:	movt	r0, #6
   21250:	ldr	r1, [r0]
   21254:	ldr	r0, [r1]
   21258:	cmp	r0, #0
   2125c:	beq	21288 <__assert_fail@plt+0xe7d8>
   21260:	add	r5, r1, #4
   21264:	mov	r4, #0
   21268:	bl	127bc <strlen@plt>
   2126c:	add	r0, r4, r0
   21270:	add	r4, r0, #1
   21274:	ldr	r0, [r5], #4
   21278:	cmp	r0, #0
   2127c:	bne	21268 <__assert_fail@plt+0xe7b8>
   21280:	mov	r0, r4
   21284:	pop	{r4, r5, fp, pc}
   21288:	mov	r4, #0
   2128c:	mov	r0, r4
   21290:	pop	{r4, r5, fp, pc}
   21294:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21298:	add	fp, sp, #24
   2129c:	mov	r4, r0
   212a0:	movw	r0, #17732	; 0x4544
   212a4:	mov	r5, r1
   212a8:	mov	r8, #0
   212ac:	mov	r6, #0
   212b0:	movt	r0, #6
   212b4:	ldr	r1, [r0]
   212b8:	ldr	r0, [r1]
   212bc:	cmp	r0, #0
   212c0:	beq	212e4 <__assert_fail@plt+0xe834>
   212c4:	add	r7, r1, #4
   212c8:	mov	r6, #0
   212cc:	bl	127bc <strlen@plt>
   212d0:	add	r0, r6, r0
   212d4:	add	r6, r0, #1
   212d8:	ldr	r0, [r7], #4
   212dc:	cmp	r0, #0
   212e0:	bne	212cc <__assert_fail@plt+0xe81c>
   212e4:	mov	r0, #4096	; 0x1000
   212e8:	str	r0, [r4, #8]
   212ec:	mov	r0, #0
   212f0:	bl	1257c <sysconf@plt>
   212f4:	cmp	r0, #0
   212f8:	mov	r1, r0
   212fc:	mov	r0, #1
   21300:	str	r8, [r4]
   21304:	mvnle	r1, #-2147483648	; 0x80000000
   21308:	cmp	r1, r6
   2130c:	str	r1, [r4, #4]
   21310:	bcc	2136c <__assert_fail@plt+0xe8bc>
   21314:	add	r2, r6, r5
   21318:	mov	r0, #2
   2131c:	cmp	r2, r1
   21320:	bcs	2136c <__assert_fail@plt+0xe8bc>
   21324:	sub	r0, r1, r6
   21328:	sub	r1, r0, r5
   2132c:	mvn	r0, #1
   21330:	add	r0, r0, r1, lsr #2
   21334:	str	r1, [r4, #4]
   21338:	cmp	r0, #0
   2133c:	str	r0, [r4, #16]
   21340:	beq	21370 <__assert_fail@plt+0xe8c0>
   21344:	movw	r2, #5008	; 0x1390
   21348:	mov	r0, #0
   2134c:	movt	r2, #2
   21350:	str	r0, [r4, #20]
   21354:	str	r0, [r4, #24]
   21358:	str	r0, [r4, #28]
   2135c:	str	r2, [r4, #32]
   21360:	str	r0, [r4, #36]	; 0x24
   21364:	str	r0, [r4, #40]	; 0x28
   21368:	str	r1, [r4, #12]
   2136c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21370:	movw	r0, #5011	; 0x1393
   21374:	movw	r1, #4625	; 0x1211
   21378:	movw	r3, #5034	; 0x13aa
   2137c:	movw	r2, #518	; 0x206
   21380:	movt	r0, #5
   21384:	movt	r1, #5
   21388:	movt	r3, #5
   2138c:	bl	12ab0 <__assert_fail@plt>
   21390:	mov	r0, #0
   21394:	bx	lr
   21398:	ldr	r1, [r0, #4]
   2139c:	mov	r2, #0
   213a0:	cmp	r2, r1, lsr #17
   213a4:	beq	213b4 <__assert_fail@plt+0xe904>
   213a8:	ldr	r1, [r0, #8]
   213ac:	cmp	r1, #131072	; 0x20000
   213b0:	movls	r1, #131072	; 0x20000
   213b4:	str	r1, [r0, #12]
   213b8:	bx	lr
   213bc:	push	{r4, r5, r6, sl, fp, lr}
   213c0:	add	fp, sp, #16
   213c4:	mov	r6, #0
   213c8:	mov	r4, r1
   213cc:	str	r6, [r1, #16]
   213d0:	str	r6, [r1, #36]	; 0x24
   213d4:	str	r6, [r1, #40]	; 0x28
   213d8:	str	r6, [r1]
   213dc:	str	r6, [r1, #4]
   213e0:	str	r6, [r1, #8]
   213e4:	movw	r1, #63488	; 0xf800
   213e8:	ldr	r0, [r0, #12]
   213ec:	movt	r1, #32767	; 0x7fff
   213f0:	cmp	r0, r1
   213f4:	bcs	21424 <__assert_fail@plt+0xe974>
   213f8:	add	r0, r0, #1
   213fc:	mov	r5, r2
   21400:	bl	306e8 <__assert_fail@plt+0x1dc38>
   21404:	mvn	r1, #0
   21408:	str	r0, [r4, #12]
   2140c:	str	r6, [r4, #16]
   21410:	str	r6, [r4, #20]
   21414:	str	r5, [r4, #24]
   21418:	str	r6, [r4, #28]
   2141c:	str	r1, [r4, #32]
   21420:	pop	{r4, r5, r6, sl, fp, pc}
   21424:	movw	r0, #5109	; 0x13f5
   21428:	movw	r1, #4625	; 0x1211
   2142c:	movw	r3, #5144	; 0x1418
   21430:	mov	r2, #572	; 0x23c
   21434:	movt	r0, #5
   21438:	movt	r1, #5
   2143c:	movt	r3, #5
   21440:	bl	12ab0 <__assert_fail@plt>
   21444:	push	{r4, r5, r6, sl, fp, lr}
   21448:	add	fp, sp, #16
   2144c:	sub	sp, sp, #16
   21450:	mov	r1, r0
   21454:	ldr	r0, [r0]
   21458:	cmp	r0, #0
   2145c:	beq	21488 <__assert_fail@plt+0xe9d8>
   21460:	add	r6, r1, #4
   21464:	mov	r5, #0
   21468:	mov	r4, #0
   2146c:	bl	127bc <strlen@plt>
   21470:	add	r4, r0, r4
   21474:	ldr	r0, [r6, r5, lsl #2]
   21478:	add	r5, r5, #1
   2147c:	cmp	r0, #0
   21480:	bne	2146c <__assert_fail@plt+0xe9bc>
   21484:	b	21490 <__assert_fail@plt+0xe9e0>
   21488:	mov	r4, #0
   2148c:	mov	r5, #0
   21490:	movw	r0, #5229	; 0x146d
   21494:	movt	r0, #5
   21498:	bl	126d8 <getenv@plt>
   2149c:	cmp	r0, #0
   214a0:	beq	214d4 <__assert_fail@plt+0xea24>
   214a4:	mov	r1, #0
   214a8:	add	r3, sp, #8
   214ac:	mov	r2, #10
   214b0:	str	r1, [sp]
   214b4:	add	r1, sp, #12
   214b8:	bl	30d0c <__assert_fail@plt+0x1e25c>
   214bc:	cmp	r0, #0
   214c0:	bne	2152c <__assert_fail@plt+0xea7c>
   214c4:	ldr	r1, [sp, #8]
   214c8:	mov	r0, #1
   214cc:	cmp	r1, r5
   214d0:	bcc	21518 <__assert_fail@plt+0xea68>
   214d4:	movw	r0, #5266	; 0x1492
   214d8:	movt	r0, #5
   214dc:	bl	126d8 <getenv@plt>
   214e0:	cmp	r0, #0
   214e4:	beq	21520 <__assert_fail@plt+0xea70>
   214e8:	mov	r1, #0
   214ec:	add	r3, sp, #8
   214f0:	mov	r2, #10
   214f4:	str	r1, [sp]
   214f8:	add	r1, sp, #12
   214fc:	bl	30d0c <__assert_fail@plt+0x1e25c>
   21500:	cmp	r0, #0
   21504:	bne	21560 <__assert_fail@plt+0xeab0>
   21508:	ldr	r1, [sp, #8]
   2150c:	mov	r0, #1
   21510:	cmp	r1, r4
   21514:	movcs	r0, #0
   21518:	sub	sp, fp, #16
   2151c:	pop	{r4, r5, r6, sl, fp, pc}
   21520:	mov	r0, #0
   21524:	sub	sp, fp, #16
   21528:	pop	{r4, r5, r6, sl, fp, pc}
   2152c:	bl	12804 <__errno_location@plt>
   21530:	movw	r1, #5439	; 0x153f
   21534:	ldr	r4, [r0]
   21538:	mov	r0, #0
   2153c:	mov	r2, #5
   21540:	movt	r1, #5
   21544:	bl	12564 <dcgettext@plt>
   21548:	movw	r3, #5229	; 0x146d
   2154c:	mov	r2, r0
   21550:	movt	r3, #5
   21554:	mov	r0, #1
   21558:	mov	r1, r4
   2155c:	bl	1269c <error@plt>
   21560:	bl	12804 <__errno_location@plt>
   21564:	movw	r1, #5439	; 0x153f
   21568:	ldr	r4, [r0]
   2156c:	mov	r0, #0
   21570:	mov	r2, #5
   21574:	movt	r1, #5
   21578:	bl	12564 <dcgettext@plt>
   2157c:	movw	r3, #5266	; 0x1492
   21580:	mov	r2, r0
   21584:	movt	r3, #5
   21588:	mov	r0, #1
   2158c:	mov	r1, r4
   21590:	bl	1269c <error@plt>
   21594:	push	{r4, r5, r6, sl, fp, lr}
   21598:	add	fp, sp, #16
   2159c:	sub	sp, sp, #8
   215a0:	mov	r6, r0
   215a4:	mov	r0, sp
   215a8:	mov	r5, r2
   215ac:	mov	r4, r1
   215b0:	bl	2f5cc <__assert_fail@plt+0x1cb1c>
   215b4:	cmp	r0, #0
   215b8:	bne	2162c <__assert_fail@plt+0xeb7c>
   215bc:	mov	r0, r6
   215c0:	bl	2f628 <__assert_fail@plt+0x1cb78>
   215c4:	cmp	r0, #0
   215c8:	bne	21620 <__assert_fail@plt+0xeb70>
   215cc:	mov	r0, r5
   215d0:	blx	r4
   215d4:	mov	r4, r0
   215d8:	mov	r5, #0
   215dc:	cmn	r0, #1
   215e0:	bgt	215ec <__assert_fail@plt+0xeb3c>
   215e4:	bl	12804 <__errno_location@plt>
   215e8:	ldr	r5, [r0]
   215ec:	mov	r0, sp
   215f0:	bl	2f628 <__assert_fail@plt+0x1cb78>
   215f4:	cmp	r0, #0
   215f8:	bne	21620 <__assert_fail@plt+0xeb70>
   215fc:	mov	r0, sp
   21600:	bl	2f644 <__assert_fail@plt+0x1cb94>
   21604:	cmp	r5, #0
   21608:	beq	21614 <__assert_fail@plt+0xeb64>
   2160c:	bl	12804 <__errno_location@plt>
   21610:	str	r5, [r0]
   21614:	mov	r0, r4
   21618:	sub	sp, fp, #16
   2161c:	pop	{r4, r5, r6, sl, fp, pc}
   21620:	bl	12804 <__errno_location@plt>
   21624:	ldr	r0, [r0]
   21628:	bl	281dc <__assert_fail@plt+0x1572c>
   2162c:	bl	12804 <__errno_location@plt>
   21630:	ldr	r0, [r0]
   21634:	bl	2819c <__assert_fail@plt+0x156ec>
   21638:	push	{r4, r5, r6, sl, fp, lr}
   2163c:	add	fp, sp, #16
   21640:	sub	sp, sp, #8
   21644:	mov	r4, r2
   21648:	cmn	r0, #100	; 0x64
   2164c:	bne	21660 <__assert_fail@plt+0xebb0>
   21650:	mov	r0, r4
   21654:	sub	sp, fp, #16
   21658:	pop	{r4, r5, r6, sl, fp, lr}
   2165c:	bx	r1
   21660:	mov	r5, r0
   21664:	mov	r0, sp
   21668:	mov	r6, r1
   2166c:	bl	2f5cc <__assert_fail@plt+0x1cb1c>
   21670:	cmp	r0, #0
   21674:	bne	21704 <__assert_fail@plt+0xec54>
   21678:	mov	r0, r5
   2167c:	bl	129b4 <fchdir@plt>
   21680:	cmp	r0, #0
   21684:	beq	216b0 <__assert_fail@plt+0xec00>
   21688:	bl	12804 <__errno_location@plt>
   2168c:	ldr	r5, [r0]
   21690:	mov	r4, r0
   21694:	mov	r0, sp
   21698:	bl	2f644 <__assert_fail@plt+0x1cb94>
   2169c:	str	r5, [r4]
   216a0:	mvn	r4, #0
   216a4:	mov	r0, r4
   216a8:	sub	sp, fp, #16
   216ac:	pop	{r4, r5, r6, sl, fp, pc}
   216b0:	mov	r0, r4
   216b4:	blx	r6
   216b8:	mov	r4, r0
   216bc:	mov	r5, #0
   216c0:	cmn	r0, #1
   216c4:	bgt	216d0 <__assert_fail@plt+0xec20>
   216c8:	bl	12804 <__errno_location@plt>
   216cc:	ldr	r5, [r0]
   216d0:	mov	r0, sp
   216d4:	bl	2f628 <__assert_fail@plt+0x1cb78>
   216d8:	cmp	r0, #0
   216dc:	bne	21710 <__assert_fail@plt+0xec60>
   216e0:	mov	r0, sp
   216e4:	bl	2f644 <__assert_fail@plt+0x1cb94>
   216e8:	cmp	r5, #0
   216ec:	beq	216f8 <__assert_fail@plt+0xec48>
   216f0:	bl	12804 <__errno_location@plt>
   216f4:	str	r5, [r0]
   216f8:	mov	r0, r4
   216fc:	sub	sp, fp, #16
   21700:	pop	{r4, r5, r6, sl, fp, pc}
   21704:	bl	12804 <__errno_location@plt>
   21708:	ldr	r0, [r0]
   2170c:	bl	2819c <__assert_fail@plt+0x156ec>
   21710:	bl	12804 <__errno_location@plt>
   21714:	ldr	r0, [r0]
   21718:	bl	281dc <__assert_fail@plt+0x1572c>
   2171c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21720:	add	fp, sp, #24
   21724:	mov	r6, r2
   21728:	mov	r7, r1
   2172c:	mov	r4, r0
   21730:	bl	12804 <__errno_location@plt>
   21734:	cmp	r7, #0
   21738:	beq	217d0 <__assert_fail@plt+0xed20>
   2173c:	mov	r5, r0
   21740:	ldr	r8, [r0]
   21744:	ldr	r0, [r6]
   21748:	cmp	r0, #0
   2174c:	mov	r1, r0
   21750:	movweq	r1, #16
   21754:	cmp	r1, r7
   21758:	bcs	21770 <__assert_fail@plt+0xecc0>
   2175c:	lsl	r2, r1, #1
   21760:	cmp	r1, r1, lsl #1
   21764:	mov	r1, r2
   21768:	bls	21754 <__assert_fail@plt+0xeca4>
   2176c:	mov	r1, r7
   21770:	cmp	r0, #0
   21774:	beq	217a4 <__assert_fail@plt+0xecf4>
   21778:	cmp	r1, r0
   2177c:	beq	217bc <__assert_fail@plt+0xed0c>
   21780:	mov	r0, r4
   21784:	str	r1, [r6]
   21788:	bl	36110 <__assert_fail@plt+0x23660>
   2178c:	mov	r4, r0
   21790:	cmp	r0, #0
   21794:	bne	217c4 <__assert_fail@plt+0xed14>
   21798:	mov	r4, #0
   2179c:	mov	r0, r4
   217a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   217a4:	cmp	r4, #0
   217a8:	bne	217f0 <__assert_fail@plt+0xed40>
   217ac:	mov	r0, r1
   217b0:	str	r1, [r6]
   217b4:	bl	35350 <__assert_fail@plt+0x228a0>
   217b8:	mov	r4, r0
   217bc:	cmp	r4, #0
   217c0:	beq	21798 <__assert_fail@plt+0xece8>
   217c4:	mov	r0, r4
   217c8:	str	r8, [r5]
   217cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   217d0:	movw	r0, #5500	; 0x157c
   217d4:	movw	r1, #5512	; 0x1588
   217d8:	movw	r3, #5524	; 0x1594
   217dc:	mov	r2, #71	; 0x47
   217e0:	movt	r0, #5
   217e4:	movt	r1, #5
   217e8:	movt	r3, #5
   217ec:	bl	12ab0 <__assert_fail@plt>
   217f0:	movw	r0, #5566	; 0x15be
   217f4:	movw	r1, #5512	; 0x1588
   217f8:	movw	r3, #5524	; 0x1594
   217fc:	mov	r2, #79	; 0x4f
   21800:	movt	r0, #5
   21804:	movt	r1, #5
   21808:	movt	r3, #5
   2180c:	bl	12ab0 <__assert_fail@plt>
   21810:	push	{r4, sl, fp, lr}
   21814:	add	fp, sp, #8
   21818:	mov	r4, r0
   2181c:	bl	2171c <__assert_fail@plt+0xec6c>
   21820:	cmp	r0, #0
   21824:	popne	{r4, sl, fp, pc}
   21828:	mov	r0, r4
   2182c:	bl	32910 <__assert_fail@plt+0x1fe60>
   21830:	bl	30c24 <__assert_fail@plt+0x1e174>
   21834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21838:	add	fp, sp, #28
   2183c:	sub	sp, sp, #540	; 0x21c
   21840:	bl	2199c <__assert_fail@plt+0xeeec>
   21844:	cmn	r0, #-2147483647	; 0x80000001
   21848:	mov	r5, #0
   2184c:	addne	r0, r0, #1
   21850:	str	r5, [sp, #20]
   21854:	str	r5, [sp, #12]
   21858:	str	r5, [sp, #16]
   2185c:	cmp	r0, #1
   21860:	str	r0, [sp, #4]
   21864:	blt	21980 <__assert_fail@plt+0xeed0>
   21868:	add	r0, sp, #12
   2186c:	add	r6, sp, #24
   21870:	mov	sl, #5
   21874:	add	r0, r0, #8
   21878:	str	r0, [sp, #8]
   2187c:	b	21890 <__assert_fail@plt+0xede0>
   21880:	ldr	r0, [sp, #4]
   21884:	add	r5, r7, r5
   21888:	cmp	r5, r0
   2188c:	bge	21980 <__assert_fail@plt+0xeed0>
   21890:	ldr	r0, [sp, #4]
   21894:	sub	r4, r0, r5
   21898:	cmp	r4, #64	; 0x40
   2189c:	mov	r7, r4
   218a0:	movge	r7, #64	; 0x40
   218a4:	cmp	r4, #1
   218a8:	blt	218d4 <__assert_fail@plt+0xee24>
   218ac:	mov	r0, #0
   218b0:	mov	r1, #0
   218b4:	add	r2, r6, r0
   218b8:	add	r0, r0, #8
   218bc:	str	sl, [r2, #4]
   218c0:	add	r2, r5, r1
   218c4:	str	r2, [r6, r1, lsl #3]
   218c8:	add	r1, r1, #1
   218cc:	cmp	r1, r7
   218d0:	blt	218b4 <__assert_fail@plt+0xee04>
   218d4:	mov	r0, r6
   218d8:	mov	r1, r7
   218dc:	mov	r2, #0
   218e0:	bl	12600 <poll@plt>
   218e4:	cmn	r0, #1
   218e8:	beq	21980 <__assert_fail@plt+0xeed0>
   218ec:	cmp	r4, #1
   218f0:	blt	21880 <__assert_fail@plt+0xedd0>
   218f4:	mov	r8, #0
   218f8:	mov	r9, #6
   218fc:	add	r0, r6, r9
   21900:	ldrh	r0, [r0]
   21904:	cmp	r0, #32
   21908:	beq	21928 <__assert_fail@plt+0xee78>
   2190c:	b	21948 <__assert_fail@plt+0xee98>
   21910:	str	r0, [sp, #12]
   21914:	ldr	r1, [sp, #16]
   21918:	str	r4, [r0, r1, lsl #2]
   2191c:	ldr	r0, [sp, #16]
   21920:	add	r0, r0, #1
   21924:	str	r0, [sp, #16]
   21928:	add	r8, r8, #1
   2192c:	add	r9, r9, #8
   21930:	cmp	r8, r7
   21934:	bge	21880 <__assert_fail@plt+0xedd0>
   21938:	add	r0, r6, r9
   2193c:	ldrh	r0, [r0]
   21940:	cmp	r0, #32
   21944:	beq	21928 <__assert_fail@plt+0xee78>
   21948:	ldr	r4, [r6, r8, lsl #3]
   2194c:	mov	r1, #1
   21950:	mov	r0, r4
   21954:	bl	326d4 <__assert_fail@plt+0x1fc24>
   21958:	tst	r0, #1
   2195c:	bne	21928 <__assert_fail@plt+0xee78>
   21960:	ldr	r1, [sp, #16]
   21964:	mov	r2, #4
   21968:	ldr	r0, [sp, #12]
   2196c:	add	r1, r2, r1, lsl #2
   21970:	ldr	r2, [sp, #8]
   21974:	bl	2171c <__assert_fail@plt+0xec6c>
   21978:	cmp	r0, #0
   2197c:	bne	21910 <__assert_fail@plt+0xee60>
   21980:	ldr	r0, [sp, #12]
   21984:	movw	r2, #19688	; 0x4ce8
   21988:	ldr	r1, [sp, #16]
   2198c:	movt	r2, #6
   21990:	stmib	r2, {r0, r1}
   21994:	sub	sp, fp, #28
   21998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2199c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   219a0:	add	fp, sp, #24
   219a4:	sub	sp, sp, #16
   219a8:	movw	r0, #5817	; 0x16b9
   219ac:	movt	r0, #5
   219b0:	bl	23b04 <__assert_fail@plt+0x11054>
   219b4:	cmp	r0, #0
   219b8:	beq	21aa0 <__assert_fail@plt+0xeff0>
   219bc:	mov	r4, r0
   219c0:	bl	12804 <__errno_location@plt>
   219c4:	mov	r7, #0
   219c8:	mov	r6, r0
   219cc:	str	r7, [r0]
   219d0:	mov	r0, r4
   219d4:	bl	12978 <readdir64@plt>
   219d8:	cmp	r0, #0
   219dc:	beq	21a5c <__assert_fail@plt+0xefac>
   219e0:	mov	r8, #0
   219e4:	mvn	r5, #0
   219e8:	mov	r7, #0
   219ec:	mov	r1, r0
   219f0:	ldrb	r2, [r1, #19]!
   219f4:	cmp	r2, #46	; 0x2e
   219f8:	beq	21a38 <__assert_fail@plt+0xef88>
   219fc:	mov	r0, r1
   21a00:	mov	r1, #0
   21a04:	bl	233fc <__assert_fail@plt+0x1094c>
   21a08:	cmp	r0, r5
   21a0c:	mov	r7, #1
   21a10:	movgt	r5, r0
   21a14:	mov	r0, r4
   21a18:	str	r8, [r6]
   21a1c:	bl	12978 <readdir64@plt>
   21a20:	cmp	r0, #0
   21a24:	beq	21a60 <__assert_fail@plt+0xefb0>
   21a28:	mov	r1, r0
   21a2c:	ldrb	r2, [r1, #19]!
   21a30:	cmp	r2, #46	; 0x2e
   21a34:	bne	219fc <__assert_fail@plt+0xef4c>
   21a38:	ldrb	r2, [r0, #20]
   21a3c:	cmp	r2, #0
   21a40:	beq	21a14 <__assert_fail@plt+0xef64>
   21a44:	cmp	r2, #46	; 0x2e
   21a48:	bne	219fc <__assert_fail@plt+0xef4c>
   21a4c:	ldrb	r0, [r0, #21]
   21a50:	cmp	r0, #0
   21a54:	bne	219fc <__assert_fail@plt+0xef4c>
   21a58:	b	21a14 <__assert_fail@plt+0xef64>
   21a5c:	mvn	r5, #0
   21a60:	ldr	r6, [r6]
   21a64:	cmp	r6, #0
   21a68:	beq	21ae4 <__assert_fail@plt+0xf034>
   21a6c:	movw	r2, #5817	; 0x16b9
   21a70:	mov	r0, #0
   21a74:	mov	r1, #8
   21a78:	movt	r2, #5
   21a7c:	bl	2efe4 <__assert_fail@plt+0x1c534>
   21a80:	movw	r2, #12871	; 0x3247
   21a84:	mov	r3, r0
   21a88:	mov	r0, #0
   21a8c:	mov	r1, r6
   21a90:	movt	r2, #5
   21a94:	bl	1269c <error@plt>
   21a98:	mov	r0, r4
   21a9c:	bl	12a80 <closedir@plt>
   21aa0:	mov	r0, #4
   21aa4:	bl	1257c <sysconf@plt>
   21aa8:	mov	r5, r0
   21aac:	mov	r1, sp
   21ab0:	mov	r0, #7
   21ab4:	bl	12588 <getrlimit64@plt>
   21ab8:	cmn	r5, #1
   21abc:	movweq	r5, #20
   21ac0:	cmp	r0, #0
   21ac4:	bne	21afc <__assert_fail@plt+0xf04c>
   21ac8:	ldm	sp, {r0, r1}
   21acc:	and	r1, r0, r1
   21ad0:	cmn	r1, #1
   21ad4:	movne	r5, r0
   21ad8:	mov	r0, r5
   21adc:	sub	sp, fp, #24
   21ae0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21ae4:	mov	r0, r4
   21ae8:	bl	12a80 <closedir@plt>
   21aec:	cmp	r7, #0
   21af0:	beq	21aa0 <__assert_fail@plt+0xeff0>
   21af4:	cmn	r5, #1
   21af8:	ble	21aa0 <__assert_fail@plt+0xeff0>
   21afc:	mov	r0, r5
   21b00:	sub	sp, fp, #24
   21b04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21b08:	sub	sp, sp, #8
   21b0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21b10:	add	fp, sp, #24
   21b14:	sub	sp, sp, #8
   21b18:	movw	r9, #19688	; 0x4ce8
   21b1c:	mov	r4, r0
   21b20:	str	r2, [fp, #8]
   21b24:	str	r3, [fp, #12]
   21b28:	tst	r1, #64	; 0x40
   21b2c:	mov	r6, #0
   21b30:	mov	r5, r1
   21b34:	movt	r9, #6
   21b38:	ldrne	r6, [fp, #8]
   21b3c:	ldrb	r0, [r9, #1]
   21b40:	cmp	r0, #0
   21b44:	bne	21b90 <__assert_fail@plt+0xf0e0>
   21b48:	movw	r0, #55982	; 0xdaae
   21b4c:	mov	r1, #524288	; 0x80000
   21b50:	movt	r0, #4
   21b54:	bl	23d34 <__assert_fail@plt+0x11284>
   21b58:	cmp	r0, #0
   21b5c:	bmi	21b80 <__assert_fail@plt+0xf0d0>
   21b60:	mov	r1, #1
   21b64:	mov	r7, r0
   21b68:	bl	326d4 <__assert_fail@plt+0x1fc24>
   21b6c:	mov	r8, r0
   21b70:	mov	r0, r7
   21b74:	bl	12a68 <close@plt>
   21b78:	and	r0, r8, #1
   21b7c:	b	21b84 <__assert_fail@plt+0xf0d4>
   21b80:	mov	r0, #0
   21b84:	mov	r1, #1
   21b88:	strb	r1, [r9, #1]
   21b8c:	strb	r0, [r9]
   21b90:	orr	r1, r5, #524288	; 0x80000
   21b94:	mov	r0, r4
   21b98:	mov	r2, r6
   21b9c:	bl	23d34 <__assert_fail@plt+0x11284>
   21ba0:	mov	r4, r0
   21ba4:	cmp	r0, #0
   21ba8:	bmi	21bc4 <__assert_fail@plt+0xf114>
   21bac:	ldrb	r0, [r9]
   21bb0:	cmp	r0, #0
   21bb4:	bne	21bc4 <__assert_fail@plt+0xf114>
   21bb8:	mov	r0, r4
   21bbc:	mov	r1, #1
   21bc0:	bl	2398c <__assert_fail@plt+0x10edc>
   21bc4:	mov	r0, r4
   21bc8:	sub	sp, fp, #24
   21bcc:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   21bd0:	add	sp, sp, #8
   21bd4:	bx	lr
   21bd8:	push	{r4, sl, fp, lr}
   21bdc:	add	fp, sp, #8
   21be0:	movw	r4, #19688	; 0x4ce8
   21be4:	movt	r4, #6
   21be8:	ldr	r0, [r4, #4]
   21bec:	bl	32910 <__assert_fail@plt+0x1fe60>
   21bf0:	mov	r0, #0
   21bf4:	str	r0, [r4, #4]
   21bf8:	str	r0, [r4, #8]
   21bfc:	pop	{r4, sl, fp, pc}
   21c00:	push	{fp, lr}
   21c04:	mov	fp, sp
   21c08:	movw	r0, #5583	; 0x15cf
   21c0c:	movt	r0, #5
   21c10:	bl	126d8 <getenv@plt>
   21c14:	cmp	r0, #0
   21c18:	movwne	r0, #1
   21c1c:	pop	{fp, pc}
   21c20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c24:	add	fp, sp, #28
   21c28:	sub	sp, sp, #524	; 0x20c
   21c2c:	movw	r0, #19688	; 0x4ce8
   21c30:	movt	r0, #6
   21c34:	ldr	r1, [r0, #4]
   21c38:	ldr	sl, [r0, #8]
   21c3c:	str	r1, [sp, #4]
   21c40:	bl	2199c <__assert_fail@plt+0xeeec>
   21c44:	mov	r7, r0
   21c48:	cmn	r0, #-2147483647	; 0x80000001
   21c4c:	addne	r7, r7, #1
   21c50:	cmp	r7, #1
   21c54:	blt	21d70 <__assert_fail@plt+0xf2c0>
   21c58:	mov	r4, #0
   21c5c:	add	r5, sp, #8
   21c60:	mov	r3, #5
   21c64:	mov	r8, #0
   21c68:	str	r7, [sp]
   21c6c:	sub	r9, r7, r8
   21c70:	cmp	r9, #64	; 0x40
   21c74:	mov	r6, r9
   21c78:	movge	r6, #64	; 0x40
   21c7c:	cmp	r9, #1
   21c80:	blt	21cac <__assert_fail@plt+0xf1fc>
   21c84:	mov	r0, #0
   21c88:	mov	r1, #0
   21c8c:	add	r2, r5, r0
   21c90:	add	r0, r0, #8
   21c94:	str	r3, [r2, #4]
   21c98:	add	r2, r8, r1
   21c9c:	str	r2, [r5, r1, lsl #3]
   21ca0:	add	r1, r1, #1
   21ca4:	cmp	r1, r6
   21ca8:	blt	21c8c <__assert_fail@plt+0xf1dc>
   21cac:	mov	r0, r5
   21cb0:	mov	r1, r6
   21cb4:	mov	r2, #0
   21cb8:	bl	12600 <poll@plt>
   21cbc:	mov	r3, #5
   21cc0:	cmn	r0, #1
   21cc4:	beq	21d70 <__assert_fail@plt+0xf2c0>
   21cc8:	cmp	r9, #1
   21ccc:	blt	21d54 <__assert_fail@plt+0xf2a4>
   21cd0:	mov	r9, #0
   21cd4:	add	r0, r5, r9, lsl #3
   21cd8:	ldrh	r0, [r0, #6]
   21cdc:	cmp	r0, #32
   21ce0:	beq	21cec <__assert_fail@plt+0xf23c>
   21ce4:	b	21d08 <__assert_fail@plt+0xf258>
   21ce8:	mov	r3, #5
   21cec:	add	r9, r9, #1
   21cf0:	cmp	r9, r6
   21cf4:	bge	21d54 <__assert_fail@plt+0xf2a4>
   21cf8:	add	r0, r5, r9, lsl #3
   21cfc:	ldrh	r0, [r0, #6]
   21d00:	cmp	r0, #32
   21d04:	beq	21cec <__assert_fail@plt+0xf23c>
   21d08:	ldr	r7, [r5, r9, lsl #3]
   21d0c:	mov	r1, #1
   21d10:	mov	r0, r7
   21d14:	bl	326d4 <__assert_fail@plt+0x1fc24>
   21d18:	tst	r0, #1
   21d1c:	bne	21ce8 <__assert_fail@plt+0xf238>
   21d20:	ldr	r1, [sp, #4]
   21d24:	cmp	r4, sl
   21d28:	mov	r3, #5
   21d2c:	bcs	21d68 <__assert_fail@plt+0xf2b8>
   21d30:	ldr	r0, [r1, r4, lsl #2]
   21d34:	cmp	r0, r7
   21d38:	bge	21d4c <__assert_fail@plt+0xf29c>
   21d3c:	add	r4, r4, #1
   21d40:	cmp	sl, r4
   21d44:	bne	21d30 <__assert_fail@plt+0xf280>
   21d48:	b	21d68 <__assert_fail@plt+0xf2b8>
   21d4c:	beq	21cec <__assert_fail@plt+0xf23c>
   21d50:	b	21d68 <__assert_fail@plt+0xf2b8>
   21d54:	ldr	r7, [sp]
   21d58:	add	r8, r6, r8
   21d5c:	cmp	r8, r7
   21d60:	blt	21c6c <__assert_fail@plt+0xf1bc>
   21d64:	b	21d70 <__assert_fail@plt+0xf2c0>
   21d68:	cmp	r7, #0
   21d6c:	bpl	21d78 <__assert_fail@plt+0xf2c8>
   21d70:	sub	sp, fp, #28
   21d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d78:	movw	r1, #5611	; 0x15eb
   21d7c:	mov	r0, #0
   21d80:	mov	r2, #5
   21d84:	movt	r1, #5
   21d88:	bl	12564 <dcgettext@plt>
   21d8c:	mov	r2, r0
   21d90:	mov	r0, #0
   21d94:	mov	r1, #0
   21d98:	mov	r3, r7
   21d9c:	bl	1269c <error@plt>
   21da0:	movw	r0, #5763	; 0x1683
   21da4:	movw	r1, #5772	; 0x168c
   21da8:	movw	r3, #5781	; 0x1695
   21dac:	mov	r2, #396	; 0x18c
   21db0:	movt	r0, #5
   21db4:	movt	r1, #5
   21db8:	movt	r3, #5
   21dbc:	bl	12ab0 <__assert_fail@plt>
   21dc0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   21dc4:	add	fp, sp, #24
   21dc8:	sub	sp, sp, #16
   21dcc:	mov	r8, r0
   21dd0:	movw	r0, #17744	; 0x4550
   21dd4:	movt	r0, #6
   21dd8:	ldr	r0, [r0]
   21ddc:	bl	328b4 <__assert_fail@plt+0x1fe04>
   21de0:	movw	r0, #17756	; 0x455c
   21de4:	movw	r1, #5859	; 0x16e3
   21de8:	mov	r2, #5
   21dec:	mov	r9, #0
   21df0:	movt	r0, #6
   21df4:	movt	r1, #5
   21df8:	ldr	r6, [r0]
   21dfc:	movw	r0, #17612	; 0x44cc
   21e00:	movt	r0, #6
   21e04:	ldr	r5, [r0]
   21e08:	mov	r0, #0
   21e0c:	bl	12564 <dcgettext@plt>
   21e10:	movw	r1, #5874	; 0x16f2
   21e14:	mov	r7, r0
   21e18:	mov	r0, #0
   21e1c:	mov	r2, #5
   21e20:	movt	r1, #5
   21e24:	bl	12564 <dcgettext@plt>
   21e28:	movw	r1, #5889	; 0x1701
   21e2c:	mov	r4, r0
   21e30:	mov	r0, #0
   21e34:	mov	r2, #5
   21e38:	movt	r1, #5
   21e3c:	bl	12564 <dcgettext@plt>
   21e40:	movw	r2, #5845	; 0x16d5
   21e44:	str	r0, [sp, #8]
   21e48:	mov	r0, r6
   21e4c:	mov	r1, r8
   21e50:	mov	r3, r5
   21e54:	str	r7, [sp]
   21e58:	str	r4, [sp, #4]
   21e5c:	str	r9, [sp, #12]
   21e60:	movt	r2, #5
   21e64:	bl	304d0 <__assert_fail@plt+0x1da20>
   21e68:	sub	sp, fp, #24
   21e6c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   21e70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e74:	add	fp, sp, #28
   21e78:	sub	sp, sp, #948	; 0x3b4
   21e7c:	mov	sl, r0
   21e80:	ldr	r0, [r3, #16]
   21e84:	str	r1, [fp, #-968]	; 0xfffffc38
   21e88:	sub	r1, fp, #44	; 0x2c
   21e8c:	mov	r6, r3
   21e90:	mov	r5, r2
   21e94:	bl	23d70 <__assert_fail@plt+0x112c0>
   21e98:	movw	r9, #17616	; 0x44d0
   21e9c:	ldrd	r0, [r6, #96]	; 0x60
   21ea0:	movt	r9, #6
   21ea4:	ldr	r4, [r9]
   21ea8:	sub	sp, sp, #16
   21eac:	mov	r3, #1
   21eb0:	mov	r2, #0
   21eb4:	str	r3, [sp]
   21eb8:	stmib	sp, {r2, r3}
   21ebc:	str	r2, [sp, #12]
   21ec0:	sub	r2, fp, #696	; 0x2b8
   21ec4:	mov	r3, #0
   21ec8:	bl	253c8 <__assert_fail@plt+0x12918>
   21ecc:	add	sp, sp, #16
   21ed0:	ldr	r7, [fp, #20]
   21ed4:	movw	r1, #5902	; 0x170e
   21ed8:	mov	r3, r0
   21edc:	mov	r2, r4
   21ee0:	movt	r1, #5
   21ee4:	mov	r0, r7
   21ee8:	bl	127f8 <fprintf@plt>
   21eec:	cmp	r0, #0
   21ef0:	bmi	2253c <__assert_fail@plt+0xfa8c>
   21ef4:	ldr	r1, [r9]
   21ef8:	ldr	r8, [fp, #12]
   21efc:	str	r6, [fp, #-960]	; 0xfffffc40
   21f00:	str	r5, [fp, #-964]	; 0xfffffc3c
   21f04:	add	r6, r6, #64	; 0x40
   21f08:	cmp	r0, r1
   21f0c:	mov	r1, r7
   21f10:	strgt	r0, [r9]
   21f14:	mov	r0, #32
   21f18:	bl	1299c <putc@plt>
   21f1c:	mov	r5, r0
   21f20:	ldrd	r0, [r6]
   21f24:	ldr	r4, [r9, #4]
   21f28:	sub	sp, sp, #16
   21f2c:	asr	r2, r8, #31
   21f30:	mov	r3, #512	; 0x200
   21f34:	mov	r6, #0
   21f38:	stm	sp, {r3, r6, r8}
   21f3c:	str	r2, [sp, #12]
   21f40:	sub	r2, fp, #696	; 0x2b8
   21f44:	mov	r3, #0
   21f48:	bl	253c8 <__assert_fail@plt+0x12918>
   21f4c:	add	sp, sp, #16
   21f50:	movw	r1, #5902	; 0x170e
   21f54:	mov	r3, r0
   21f58:	mov	r0, r7
   21f5c:	mov	r2, r4
   21f60:	movt	r1, #5
   21f64:	bl	127f8 <fprintf@plt>
   21f68:	cmn	r5, #1
   21f6c:	movweq	r6, #150	; 0x96
   21f70:	cmp	r0, #0
   21f74:	bmi	22544 <__assert_fail@plt+0xfa94>
   21f78:	ldr	r1, [r9, #4]
   21f7c:	cmp	r0, r1
   21f80:	ble	21f9c <__assert_fail@plt+0xf4ec>
   21f84:	ldr	r4, [fp, #-960]	; 0xfffffc40
   21f88:	cmn	r5, #1
   21f8c:	str	r0, [r9, #4]
   21f90:	bne	21fa8 <__assert_fail@plt+0xf4f8>
   21f94:	mov	r5, #150	; 0x96
   21f98:	b	22490 <__assert_fail@plt+0xf9e0>
   21f9c:	ldr	r4, [fp, #-960]	; 0xfffffc40
   21fa0:	cmn	r5, #1
   21fa4:	beq	21f94 <__assert_fail@plt+0xf4e4>
   21fa8:	mov	r0, #32
   21fac:	mov	r1, r7
   21fb0:	bl	1299c <putc@plt>
   21fb4:	cmn	r0, #1
   21fb8:	beq	2254c <__assert_fail@plt+0xfa9c>
   21fbc:	sub	r0, fp, #44	; 0x2c
   21fc0:	mov	r1, r7
   21fc4:	bl	12a44 <fputs@plt>
   21fc8:	cmp	r0, #0
   21fcc:	movwmi	r6, #275	; 0x113
   21fd0:	bmi	22554 <__assert_fail@plt+0xfaa4>
   21fd4:	ldr	r3, [r4, #20]
   21fd8:	ldr	r2, [r9, #8]
   21fdc:	movw	r1, #5906	; 0x1712
   21fe0:	mov	r0, r7
   21fe4:	movt	r1, #5
   21fe8:	bl	127f8 <fprintf@plt>
   21fec:	cmp	r0, #0
   21ff0:	bmi	2255c <__assert_fail@plt+0xfaac>
   21ff4:	ldr	r1, [r9, #8]
   21ff8:	cmp	r0, r1
   21ffc:	mov	r1, r7
   22000:	strgt	r0, [r9, #8]
   22004:	mov	r0, #32
   22008:	bl	1299c <putc@plt>
   2200c:	cmn	r0, #1
   22010:	ldr	r0, [r4, #24]
   22014:	movweq	r6, #250	; 0xfa
   22018:	bl	26490 <__assert_fail@plt+0x139e0>
   2201c:	cmp	r0, #0
   22020:	beq	22064 <__assert_fail@plt+0xf5b4>
   22024:	mov	r1, #0
   22028:	mov	r5, r0
   2202c:	bl	27354 <__assert_fail@plt+0x148a4>
   22030:	ldr	r2, [r9, #12]
   22034:	movw	r1, #5911	; 0x1717
   22038:	mov	r3, r5
   2203c:	movt	r1, #5
   22040:	cmp	r0, r2
   22044:	strgt	r0, [r9, #12]
   22048:	movgt	r2, r0
   2204c:	mov	r0, r7
   22050:	bl	127f8 <fprintf@plt>
   22054:	cmn	r0, #1
   22058:	bgt	2208c <__assert_fail@plt+0xf5dc>
   2205c:	mov	r5, #400	; 0x190
   22060:	b	22490 <__assert_fail@plt+0xf9e0>
   22064:	ldr	r2, [r4, #24]
   22068:	movw	r1, #5917	; 0x171d
   2206c:	mov	r0, r7
   22070:	movt	r1, #5
   22074:	bl	127f8 <fprintf@plt>
   22078:	ldr	r1, [r9, #12]
   2207c:	cmp	r0, r1
   22080:	strgt	r0, [r9, #12]
   22084:	cmp	r0, #1
   22088:	blt	2258c <__assert_fail@plt+0xfadc>
   2208c:	ldr	r0, [r4, #28]
   22090:	bl	26658 <__assert_fail@plt+0x13ba8>
   22094:	cmp	r0, #0
   22098:	beq	220dc <__assert_fail@plt+0xf62c>
   2209c:	mov	r1, #0
   220a0:	mov	r5, r0
   220a4:	bl	27354 <__assert_fail@plt+0x148a4>
   220a8:	ldr	r2, [r9, #16]
   220ac:	movw	r1, #5911	; 0x1717
   220b0:	mov	r3, r5
   220b4:	movt	r1, #5
   220b8:	cmp	r0, r2
   220bc:	strgt	r0, [r9, #16]
   220c0:	movgt	r2, r0
   220c4:	mov	r0, r7
   220c8:	bl	127f8 <fprintf@plt>
   220cc:	cmn	r0, #1
   220d0:	bgt	2211c <__assert_fail@plt+0xf66c>
   220d4:	mov	r5, #500	; 0x1f4
   220d8:	b	22490 <__assert_fail@plt+0xf9e0>
   220dc:	ldr	r3, [r4, #28]
   220e0:	ldr	r2, [r9, #16]
   220e4:	movw	r1, #5924	; 0x1724
   220e8:	mov	r0, r7
   220ec:	movt	r1, #5
   220f0:	bl	127f8 <fprintf@plt>
   220f4:	ldr	r1, [r9, #16]
   220f8:	cmp	r0, r1
   220fc:	strgt	r0, [r9, #16]
   22100:	cmp	r0, #0
   22104:	bmi	22594 <__assert_fail@plt+0xfae4>
   22108:	mov	r0, #32
   2210c:	mov	r1, r7
   22110:	bl	1299c <putc@plt>
   22114:	cmn	r0, #1
   22118:	beq	2259c <__assert_fail@plt+0xfaec>
   2211c:	ldr	r0, [r4, #16]
   22120:	str	r6, [fp, #-956]	; 0xfffffc44
   22124:	and	r0, r0, #45056	; 0xb000
   22128:	orr	r0, r0, #16384	; 0x4000
   2212c:	cmp	r0, #24576	; 0x6000
   22130:	bne	221c8 <__assert_fail@plt+0xf718>
   22134:	add	r4, r4, #32
   22138:	ldr	r2, [r9, #20]
   2213c:	ldrd	r0, [r4]
   22140:	lsr	r3, r0, #8
   22144:	lsr	r1, r1, #12
   22148:	mov	r0, r7
   2214c:	bfi	r3, r1, #12, #20
   22150:	movw	r1, #5906	; 0x1712
   22154:	movt	r1, #5
   22158:	bl	127f8 <fprintf@plt>
   2215c:	cmp	r0, #0
   22160:	bmi	22574 <__assert_fail@plt+0xfac4>
   22164:	ldr	r1, [r9, #20]
   22168:	cmp	r1, r0
   2216c:	movw	r1, #61722	; 0xf11a
   22170:	movt	r1, #4
   22174:	strlt	r0, [r9, #20]
   22178:	mov	r0, r7
   2217c:	bl	127f8 <fprintf@plt>
   22180:	cmp	r0, #0
   22184:	bmi	2257c <__assert_fail@plt+0xfacc>
   22188:	ldrd	r0, [r4]
   2218c:	lsr	r2, r0, #12
   22190:	orr	r3, r2, r1, lsl #20
   22194:	ldr	r2, [r9, #24]
   22198:	movw	r1, #5906	; 0x1712
   2219c:	movt	r1, #5
   221a0:	bfi	r3, r0, #0, #8
   221a4:	mov	r0, r7
   221a8:	bl	127f8 <fprintf@plt>
   221ac:	cmp	r0, #0
   221b0:	bmi	22584 <__assert_fail@plt+0xfad4>
   221b4:	ldr	r1, [r9, #24]
   221b8:	ldr	r4, [fp, #-960]	; 0xfffffc40
   221bc:	cmp	r1, r0
   221c0:	strlt	r0, [r9, #24]
   221c4:	b	22238 <__assert_fail@plt+0xf788>
   221c8:	add	r0, r4, #48	; 0x30
   221cc:	ldr	r4, [r9, #28]
   221d0:	mov	r1, #1
   221d4:	cmp	r8, #0
   221d8:	ldm	r0, {r0, r3}
   221dc:	movpl	r8, r1
   221e0:	asr	r2, r8, #31
   221e4:	sub	sp, sp, #16
   221e8:	mov	r5, #0
   221ec:	stm	sp, {r1, r5, r8}
   221f0:	str	r2, [sp, #12]
   221f4:	mov	r1, r3
   221f8:	sub	r2, fp, #696	; 0x2b8
   221fc:	mov	r3, #0
   22200:	bl	253c8 <__assert_fail@plt+0x12918>
   22204:	add	sp, sp, #16
   22208:	movw	r1, #5902	; 0x170e
   2220c:	mov	r3, r0
   22210:	mov	r0, r7
   22214:	mov	r2, r4
   22218:	movt	r1, #5
   2221c:	bl	127f8 <fprintf@plt>
   22220:	cmp	r0, #0
   22224:	bmi	225a4 <__assert_fail@plt+0xfaf4>
   22228:	ldr	r1, [r9, #28]
   2222c:	ldr	r4, [fp, #-960]	; 0xfffffc40
   22230:	cmp	r0, r1
   22234:	strgt	r0, [r9, #28]
   22238:	mov	r0, #32
   2223c:	mov	r1, r7
   22240:	bl	1299c <putc@plt>
   22244:	mvn	r1, #0
   22248:	subs	r6, r0, r1
   2224c:	movwne	r6, #1
   22250:	cmn	r0, #1
   22254:	ldr	r0, [fp, #-956]	; 0xfffffc44
   22258:	movweq	r0, #850	; 0x352
   2225c:	str	r0, [fp, #-956]	; 0xfffffc44
   22260:	beq	22564 <__assert_fail@plt+0xfab4>
   22264:	add	r4, r4, #80	; 0x50
   22268:	mov	r0, r4
   2226c:	bl	1272c <localtime@plt>
   22270:	cmp	r0, #0
   22274:	beq	222a4 <__assert_fail@plt+0xf7f4>
   22278:	mov	r5, r0
   2227c:	ldr	r0, [fp, #8]
   22280:	str	sl, [fp, #-972]	; 0xfffffc34
   22284:	sub	r1, r0, #19968	; 0x4e00
   22288:	sub	r2, r1, #15532032	; 0xed0000
   2228c:	ldr	r1, [r4]
   22290:	cmp	r2, r1
   22294:	ble	22318 <__assert_fail@plt+0xf868>
   22298:	movw	r8, #5942	; 0x1736
   2229c:	movt	r8, #5
   222a0:	b	22334 <__assert_fail@plt+0xf884>
   222a4:	ldr	r0, [r4]
   222a8:	sub	sp, sp, #16
   222ac:	mov	r4, #0
   222b0:	mov	r1, #1
   222b4:	cmn	r0, #1
   222b8:	ble	224c0 <__assert_fail@plt+0xfa10>
   222bc:	stm	sp, {r1, r4}
   222c0:	str	r1, [sp, #8]
   222c4:	asr	r1, r0, #31
   222c8:	sub	r2, fp, #696	; 0x2b8
   222cc:	mov	r3, #0
   222d0:	str	r4, [sp, #12]
   222d4:	bl	253c8 <__assert_fail@plt+0x12918>
   222d8:	add	sp, sp, #16
   222dc:	movw	r1, #5959	; 0x1747
   222e0:	mov	r3, r0
   222e4:	mov	r0, r7
   222e8:	mov	r2, #12
   222ec:	movt	r1, #5
   222f0:	bl	127f8 <fprintf@plt>
   222f4:	cmp	r0, #0
   222f8:	ldr	r5, [fp, #-956]	; 0xfffffc44
   222fc:	movwmi	r5, #1100	; 0x44c
   22300:	cmn	r0, #1
   22304:	movwgt	r4, #1
   22308:	and	r0, r6, r4
   2230c:	cmp	r0, #1
   22310:	beq	223c4 <__assert_fail@plt+0xf914>
   22314:	b	22490 <__assert_fail@plt+0xf9e0>
   22318:	movw	r2, #5942	; 0x1736
   2231c:	add	r0, r0, #3600	; 0xe10
   22320:	movw	r8, #5930	; 0x172a
   22324:	movt	r2, #5
   22328:	cmp	r1, r0
   2232c:	movt	r8, #5
   22330:	movgt	r8, r2
   22334:	sub	sl, fp, #952	; 0x3b8
   22338:	mov	r1, #256	; 0x100
   2233c:	mov	r2, r8
   22340:	mov	r3, r5
   22344:	mov	r9, #256	; 0x100
   22348:	mov	r0, sl
   2234c:	bl	12714 <strftime@plt>
   22350:	cmp	r0, #0
   22354:	bne	2238c <__assert_fail@plt+0xf8dc>
   22358:	mov	r4, #7
   2235c:	add	r0, r4, r9, lsl #1
   22360:	bic	r0, r0, #7
   22364:	sub	sl, sp, r0
   22368:	mov	sp, sl
   2236c:	lsl	r9, r9, #1
   22370:	mov	r0, sl
   22374:	mov	r2, r8
   22378:	mov	r3, r5
   2237c:	mov	r1, r9
   22380:	bl	12714 <strftime@plt>
   22384:	cmp	r0, #0
   22388:	beq	2235c <__assert_fail@plt+0xf8ac>
   2238c:	movw	r1, #5955	; 0x1743
   22390:	mov	r0, r7
   22394:	mov	r2, sl
   22398:	movt	r1, #5
   2239c:	bl	127f8 <fprintf@plt>
   223a0:	cmp	r0, #0
   223a4:	ldr	sl, [fp, #-972]	; 0xfffffc34
   223a8:	ldr	r5, [fp, #-956]	; 0xfffffc44
   223ac:	mov	r1, #0
   223b0:	movwmi	r5, #900	; 0x384
   223b4:	cmn	r0, #1
   223b8:	movwgt	r1, #1
   223bc:	tst	r6, r1
   223c0:	beq	22490 <__assert_fail@plt+0xf9e0>
   223c4:	ldr	r5, [fp, #16]
   223c8:	mov	r0, sl
   223cc:	mov	r1, r7
   223d0:	mov	r2, r5
   223d4:	bl	225bc <__assert_fail@plt+0xfb0c>
   223d8:	cmp	r0, #0
   223dc:	ldr	r0, [fp, #-960]	; 0xfffffc40
   223e0:	beq	2256c <__assert_fail@plt+0xfabc>
   223e4:	ldr	r0, [r0, #16]
   223e8:	and	r0, r0, #61440	; 0xf000
   223ec:	cmp	r0, #40960	; 0xa000
   223f0:	bne	22474 <__assert_fail@plt+0xf9c4>
   223f4:	ldr	r0, [fp, #-968]	; 0xfffffc38
   223f8:	ldr	r1, [fp, #-964]	; 0xfffffc3c
   223fc:	bl	23618 <__assert_fail@plt+0x10b68>
   22400:	cmp	r0, #0
   22404:	beq	22450 <__assert_fail@plt+0xf9a0>
   22408:	mov	r6, r0
   2240c:	movw	r0, #5964	; 0x174c
   22410:	mov	r1, r7
   22414:	movt	r0, #5
   22418:	bl	12a44 <fputs@plt>
   2241c:	cmn	r0, #1
   22420:	ble	225ac <__assert_fail@plt+0xfafc>
   22424:	mov	r0, r6
   22428:	mov	r1, r7
   2242c:	mov	r2, r5
   22430:	bl	225bc <__assert_fail@plt+0xfb0c>
   22434:	mov	r4, r0
   22438:	mov	r0, r6
   2243c:	bl	32910 <__assert_fail@plt+0x1fe60>
   22440:	cmp	r4, #0
   22444:	bne	22474 <__assert_fail@plt+0xf9c4>
   22448:	movw	r5, #1350	; 0x546
   2244c:	b	22490 <__assert_fail@plt+0xf9e0>
   22450:	bl	12804 <__errno_location@plt>
   22454:	ldr	r1, [r0]
   22458:	movw	r2, #12871	; 0x3247
   2245c:	mov	r0, #0
   22460:	mov	r3, sl
   22464:	movt	r2, #5
   22468:	bl	1269c <error@plt>
   2246c:	mov	r0, #0
   22470:	bl	32910 <__assert_fail@plt+0x1fe60>
   22474:	mov	r0, #10
   22478:	mov	r1, r7
   2247c:	bl	1299c <putc@plt>
   22480:	cmn	r0, #1
   22484:	subne	sp, fp, #28
   22488:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2248c:	movw	r5, #1400	; 0x578
   22490:	bl	12804 <__errno_location@plt>
   22494:	movw	r1, #5969	; 0x1751
   22498:	ldr	r4, [r0]
   2249c:	mov	r0, #0
   224a0:	mov	r2, #5
   224a4:	movt	r1, #5
   224a8:	bl	12564 <dcgettext@plt>
   224ac:	mov	r2, r0
   224b0:	mov	r0, #1
   224b4:	mov	r1, r4
   224b8:	mov	r3, r5
   224bc:	bl	1269c <error@plt>
   224c0:	rsbs	r3, r0, #0
   224c4:	stm	sp, {r1, r4}
   224c8:	str	r1, [sp, #8]
   224cc:	sub	r2, fp, #696	; 0x2b8
   224d0:	str	r4, [sp, #12]
   224d4:	sbc	r1, r4, r0, asr #31
   224d8:	mov	r0, r3
   224dc:	mov	r3, #0
   224e0:	bl	253c8 <__assert_fail@plt+0x12918>
   224e4:	add	sp, sp, #16
   224e8:	mov	r5, r0
   224ec:	bl	127bc <strlen@plt>
   224f0:	sub	sp, sp, #8
   224f4:	movw	r1, #5952	; 0x1740
   224f8:	movw	r3, #61466	; 0xf01a
   224fc:	rsb	r0, r0, #12
   22500:	str	r5, [sp]
   22504:	bic	r2, r0, r0, asr #31
   22508:	movt	r1, #5
   2250c:	movt	r3, #4
   22510:	mov	r0, r7
   22514:	bl	127f8 <fprintf@plt>
   22518:	add	sp, sp, #8
   2251c:	cmp	r0, #0
   22520:	ldr	r5, [fp, #-956]	; 0xfffffc44
   22524:	movwmi	r5, #1000	; 0x3e8
   22528:	cmn	r0, #1
   2252c:	movwgt	r4, #1
   22530:	tst	r6, r4
   22534:	bne	223c4 <__assert_fail@plt+0xf914>
   22538:	b	22490 <__assert_fail@plt+0xf9e0>
   2253c:	mov	r5, #100	; 0x64
   22540:	b	22490 <__assert_fail@plt+0xf9e0>
   22544:	mov	r5, #200	; 0xc8
   22548:	b	22490 <__assert_fail@plt+0xf9e0>
   2254c:	mov	r5, #250	; 0xfa
   22550:	b	22490 <__assert_fail@plt+0xf9e0>
   22554:	movw	r5, #275	; 0x113
   22558:	b	22490 <__assert_fail@plt+0xf9e0>
   2255c:	mov	r5, #300	; 0x12c
   22560:	b	22490 <__assert_fail@plt+0xf9e0>
   22564:	movw	r5, #850	; 0x352
   22568:	b	22490 <__assert_fail@plt+0xf9e0>
   2256c:	mov	r5, #1200	; 0x4b0
   22570:	b	22490 <__assert_fail@plt+0xf9e0>
   22574:	mov	r5, #600	; 0x258
   22578:	b	22490 <__assert_fail@plt+0xf9e0>
   2257c:	movw	r5, #625	; 0x271
   22580:	b	22490 <__assert_fail@plt+0xf9e0>
   22584:	movw	r5, #650	; 0x28a
   22588:	b	22490 <__assert_fail@plt+0xf9e0>
   2258c:	movw	r5, #450	; 0x1c2
   22590:	b	22490 <__assert_fail@plt+0xf9e0>
   22594:	movw	r5, #550	; 0x226
   22598:	b	22490 <__assert_fail@plt+0xf9e0>
   2259c:	movw	r5, #525	; 0x20d
   225a0:	b	22490 <__assert_fail@plt+0xf9e0>
   225a4:	mov	r5, #800	; 0x320
   225a8:	b	22490 <__assert_fail@plt+0xf9e0>
   225ac:	mov	r0, r6
   225b0:	bl	32910 <__assert_fail@plt+0x1fe60>
   225b4:	movw	r5, #1300	; 0x514
   225b8:	b	22490 <__assert_fail@plt+0xf9e0>
   225bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   225c0:	add	fp, sp, #28
   225c4:	sub	sp, sp, #4
   225c8:	mov	r5, r1
   225cc:	mov	r4, r0
   225d0:	cmp	r2, #0
   225d4:	beq	22604 <__assert_fail@plt+0xfb54>
   225d8:	movw	r1, #12871	; 0x3247
   225dc:	mov	r0, r5
   225e0:	mov	r2, r4
   225e4:	movt	r1, #5
   225e8:	bl	127f8 <fprintf@plt>
   225ec:	mov	r1, r0
   225f0:	mov	r0, #0
   225f4:	cmn	r1, #1
   225f8:	movwgt	r0, #1
   225fc:	sub	sp, fp, #28
   22600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22604:	movw	r7, #6009	; 0x1779
   22608:	movw	r8, #6021	; 0x1785
   2260c:	movw	r9, #6015	; 0x177f
   22610:	movw	sl, #6024	; 0x1788
   22614:	movw	r6, #6027	; 0x178b
   22618:	movt	r7, #5
   2261c:	movt	r8, #5
   22620:	movt	r9, #5
   22624:	movt	sl, #5
   22628:	movt	r6, #5
   2262c:	ldrb	r2, [r4], #1
   22630:	cmp	r2, #34	; 0x22
   22634:	bls	2265c <__assert_fail@plt+0xfbac>
   22638:	b	22710 <__assert_fail@plt+0xfc60>
   2263c:	mov	r0, r5
   22640:	mov	r1, r6
   22644:	bl	127f8 <fprintf@plt>
   22648:	cmn	r0, #1
   2264c:	ble	227f0 <__assert_fail@plt+0xfd40>
   22650:	ldrb	r2, [r4], #1
   22654:	cmp	r2, #34	; 0x22
   22658:	bhi	22710 <__assert_fail@plt+0xfc60>
   2265c:	add	r1, pc, #4
   22660:	mov	r0, #1
   22664:	ldr	pc, [r1, r2, lsl #2]
   22668:	strdeq	r2, [r2], -r4
   2266c:	andeq	r2, r2, r4, lsr r7
   22670:	andeq	r2, r2, r4, lsr r7
   22674:	andeq	r2, r2, r4, lsr r7
   22678:	andeq	r2, r2, r4, lsr r7
   2267c:	andeq	r2, r2, r4, lsr r7
   22680:	andeq	r2, r2, r4, lsr r7
   22684:	andeq	r2, r2, r4, lsr r7
   22688:	strdeq	r2, [r2], -r4
   2268c:	andeq	r2, r2, ip, asr r7
   22690:	andeq	r2, r2, r8, ror r7
   22694:	andeq	r2, r2, r4, lsr r7
   22698:	muleq	r2, r0, r7
   2269c:	andeq	r2, r2, r8, lsr #15
   226a0:	andeq	r2, r2, r4, lsr r7
   226a4:	andeq	r2, r2, r4, lsr r7
   226a8:	andeq	r2, r2, r4, lsr r7
   226ac:	andeq	r2, r2, r4, lsr r7
   226b0:	andeq	r2, r2, r4, lsr r7
   226b4:	andeq	r2, r2, r4, lsr r7
   226b8:	andeq	r2, r2, r4, lsr r7
   226bc:	andeq	r2, r2, r4, lsr r7
   226c0:	andeq	r2, r2, r4, lsr r7
   226c4:	andeq	r2, r2, r4, lsr r7
   226c8:	andeq	r2, r2, r4, lsr r7
   226cc:	andeq	r2, r2, r4, lsr r7
   226d0:	andeq	r2, r2, r4, lsr r7
   226d4:	andeq	r2, r2, r4, lsr r7
   226d8:	andeq	r2, r2, r4, lsr r7
   226dc:	andeq	r2, r2, r4, lsr r7
   226e0:	andeq	r2, r2, r4, lsr r7
   226e4:	andeq	r2, r2, r4, lsr r7
   226e8:	andeq	r2, r2, r0, asr #15
   226ec:	andeq	r2, r2, r4, lsr r7
   226f0:	andeq	r2, r2, ip, lsr r6
   226f4:	movw	r1, #6012	; 0x177c
   226f8:	mov	r0, r5
   226fc:	movt	r1, #5
   22700:	bl	127f8 <fprintf@plt>
   22704:	cmn	r0, #1
   22708:	bgt	22650 <__assert_fail@plt+0xfba0>
   2270c:	b	227f0 <__assert_fail@plt+0xfd40>
   22710:	cmp	r2, #92	; 0x5c
   22714:	bne	22734 <__assert_fail@plt+0xfc84>
   22718:	movw	r1, #6006	; 0x1776
   2271c:	mov	r0, r5
   22720:	movt	r1, #5
   22724:	bl	127f8 <fprintf@plt>
   22728:	cmn	r0, #1
   2272c:	bgt	22650 <__assert_fail@plt+0xfba0>
   22730:	b	227f0 <__assert_fail@plt+0xfd40>
   22734:	sub	r0, r2, #33	; 0x21
   22738:	uxtb	r0, r0
   2273c:	cmp	r0, #93	; 0x5d
   22740:	bhi	227d8 <__assert_fail@plt+0xfd28>
   22744:	mov	r0, r2
   22748:	mov	r1, r5
   2274c:	bl	1299c <putc@plt>
   22750:	cmn	r0, #1
   22754:	bne	22650 <__assert_fail@plt+0xfba0>
   22758:	b	227f0 <__assert_fail@plt+0xfd40>
   2275c:	movw	r1, #6018	; 0x1782
   22760:	mov	r0, r5
   22764:	movt	r1, #5
   22768:	bl	127f8 <fprintf@plt>
   2276c:	cmn	r0, #1
   22770:	bgt	22650 <__assert_fail@plt+0xfba0>
   22774:	b	227f0 <__assert_fail@plt+0xfd40>
   22778:	mov	r0, r5
   2277c:	mov	r1, r7
   22780:	bl	127f8 <fprintf@plt>
   22784:	cmn	r0, #1
   22788:	bgt	22650 <__assert_fail@plt+0xfba0>
   2278c:	b	227f0 <__assert_fail@plt+0xfd40>
   22790:	mov	r0, r5
   22794:	mov	r1, r8
   22798:	bl	127f8 <fprintf@plt>
   2279c:	cmn	r0, #1
   227a0:	bgt	22650 <__assert_fail@plt+0xfba0>
   227a4:	b	227f0 <__assert_fail@plt+0xfd40>
   227a8:	mov	r0, r5
   227ac:	mov	r1, r9
   227b0:	bl	127f8 <fprintf@plt>
   227b4:	cmn	r0, #1
   227b8:	bgt	22650 <__assert_fail@plt+0xfba0>
   227bc:	b	227f0 <__assert_fail@plt+0xfd40>
   227c0:	mov	r0, r5
   227c4:	mov	r1, sl
   227c8:	bl	127f8 <fprintf@plt>
   227cc:	cmn	r0, #1
   227d0:	bgt	22650 <__assert_fail@plt+0xfba0>
   227d4:	b	227f0 <__assert_fail@plt+0xfd40>
   227d8:	movw	r1, #6030	; 0x178e
   227dc:	mov	r0, r5
   227e0:	movt	r1, #5
   227e4:	bl	127f8 <fprintf@plt>
   227e8:	cmn	r0, #1
   227ec:	bgt	22650 <__assert_fail@plt+0xfba0>
   227f0:	mov	r0, #0
   227f4:	sub	sp, fp, #28
   227f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   227fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22800:	add	fp, sp, #28
   22804:	sub	sp, sp, #12
   22808:	sub	sp, sp, #8192	; 0x2000
   2280c:	ldr	r7, [fp, #8]
   22810:	mov	r9, r3
   22814:	mov	sl, r0
   22818:	cmp	r2, #0
   2281c:	beq	228bc <__assert_fail@plt+0xfe0c>
   22820:	add	r4, sp, #8
   22824:	mov	r8, r1
   22828:	str	r1, [sp]
   2282c:	mov	r1, #8192	; 0x2000
   22830:	mov	r2, r7
   22834:	mvn	r3, #0
   22838:	mov	r0, r4
   2283c:	bl	2d7b4 <__assert_fail@plt+0x1ad04>
   22840:	mov	r5, r0
   22844:	cmp	r0, #8192	; 0x2000
   22848:	mov	r6, r4
   2284c:	bcc	22878 <__assert_fail@plt+0xfdc8>
   22850:	add	r4, r5, #1
   22854:	mov	r0, r4
   22858:	bl	306e8 <__assert_fail@plt+0x1dc38>
   2285c:	mov	r1, r4
   22860:	mov	r2, r7
   22864:	mvn	r3, #0
   22868:	mov	r6, r0
   2286c:	str	r8, [sp]
   22870:	add	r4, sp, #8
   22874:	bl	2d7b4 <__assert_fail@plt+0x1ad04>
   22878:	mov	r0, r6
   2287c:	mov	r1, r5
   22880:	bl	228d4 <__assert_fail@plt+0xfe24>
   22884:	mov	r1, #0
   22888:	mov	r2, r6
   2288c:	strb	r1, [r6, r0]
   22890:	mov	r0, sl
   22894:	mov	r1, r9
   22898:	bl	127f8 <fprintf@plt>
   2289c:	mov	r5, r0
   228a0:	cmp	r6, r4
   228a4:	beq	228b0 <__assert_fail@plt+0xfe00>
   228a8:	mov	r0, r6
   228ac:	bl	32910 <__assert_fail@plt+0x1fe60>
   228b0:	mov	r0, r5
   228b4:	sub	sp, fp, #28
   228b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   228bc:	mov	r0, sl
   228c0:	mov	r1, r9
   228c4:	mov	r2, r7
   228c8:	sub	sp, fp, #28
   228cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   228d0:	b	127f8 <fprintf@plt>
   228d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   228d8:	add	fp, sp, #28
   228dc:	sub	sp, sp, #28
   228e0:	mov	r5, r1
   228e4:	mov	sl, r0
   228e8:	add	r6, r0, r1
   228ec:	bl	12648 <__ctype_get_mb_cur_max@plt>
   228f0:	cmp	r0, #2
   228f4:	bcs	22938 <__assert_fail@plt+0xfe88>
   228f8:	cmp	r5, #1
   228fc:	blt	2292c <__assert_fail@plt+0xfe7c>
   22900:	bl	12768 <__ctype_b_loc@plt>
   22904:	mov	r1, #63	; 0x3f
   22908:	ldrb	r2, [sl]
   2290c:	ldr	r3, [r0]
   22910:	add	r2, r3, r2, lsl #1
   22914:	ldrb	r2, [r2, #1]
   22918:	tst	r2, #64	; 0x40
   2291c:	strbeq	r1, [sl]
   22920:	add	sl, sl, #1
   22924:	cmp	sl, r6
   22928:	bcc	22908 <__assert_fail@plt+0xfe58>
   2292c:	mov	r0, r5
   22930:	sub	sp, fp, #28
   22934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22938:	cmp	r5, #1
   2293c:	mov	r4, sl
   22940:	blt	22ce8 <__assert_fail@plt+0x10238>
   22944:	mov	r3, #0
   22948:	add	r8, sp, #12
   2294c:	add	r9, sp, #16
   22950:	mov	r4, sl
   22954:	mov	r7, sl
   22958:	ldrb	r0, [r7]
   2295c:	sub	r1, r0, #32
   22960:	cmp	r1, #94	; 0x5e
   22964:	bhi	22b00 <__assert_fail@plt+0x10050>
   22968:	add	r2, pc, #0
   2296c:	ldr	pc, [r2, r1, lsl #2]
   22970:	andeq	r2, r2, ip, ror #21
   22974:	andeq	r2, r2, ip, ror #21
   22978:	andeq	r2, r2, ip, ror #21
   2297c:	andeq	r2, r2, ip, ror #21
   22980:	andeq	r2, r2, r0, lsl #22
   22984:	andeq	r2, r2, ip, ror #21
   22988:	andeq	r2, r2, ip, ror #21
   2298c:	andeq	r2, r2, ip, ror #21
   22990:	andeq	r2, r2, ip, ror #21
   22994:	andeq	r2, r2, ip, ror #21
   22998:	andeq	r2, r2, ip, ror #21
   2299c:	andeq	r2, r2, ip, ror #21
   229a0:	andeq	r2, r2, ip, ror #21
   229a4:	andeq	r2, r2, ip, ror #21
   229a8:	andeq	r2, r2, ip, ror #21
   229ac:	andeq	r2, r2, ip, ror #21
   229b0:	andeq	r2, r2, ip, ror #21
   229b4:	andeq	r2, r2, ip, ror #21
   229b8:	andeq	r2, r2, ip, ror #21
   229bc:	andeq	r2, r2, ip, ror #21
   229c0:	andeq	r2, r2, ip, ror #21
   229c4:	andeq	r2, r2, ip, ror #21
   229c8:	andeq	r2, r2, ip, ror #21
   229cc:	andeq	r2, r2, ip, ror #21
   229d0:	andeq	r2, r2, ip, ror #21
   229d4:	andeq	r2, r2, ip, ror #21
   229d8:	andeq	r2, r2, ip, ror #21
   229dc:	andeq	r2, r2, ip, ror #21
   229e0:	andeq	r2, r2, ip, ror #21
   229e4:	andeq	r2, r2, ip, ror #21
   229e8:	andeq	r2, r2, ip, ror #21
   229ec:	andeq	r2, r2, ip, ror #21
   229f0:	andeq	r2, r2, r0, lsl #22
   229f4:	andeq	r2, r2, ip, ror #21
   229f8:	andeq	r2, r2, ip, ror #21
   229fc:	andeq	r2, r2, ip, ror #21
   22a00:	andeq	r2, r2, ip, ror #21
   22a04:	andeq	r2, r2, ip, ror #21
   22a08:	andeq	r2, r2, ip, ror #21
   22a0c:	andeq	r2, r2, ip, ror #21
   22a10:	andeq	r2, r2, ip, ror #21
   22a14:	andeq	r2, r2, ip, ror #21
   22a18:	andeq	r2, r2, ip, ror #21
   22a1c:	andeq	r2, r2, ip, ror #21
   22a20:	andeq	r2, r2, ip, ror #21
   22a24:	andeq	r2, r2, ip, ror #21
   22a28:	andeq	r2, r2, ip, ror #21
   22a2c:	andeq	r2, r2, ip, ror #21
   22a30:	andeq	r2, r2, ip, ror #21
   22a34:	andeq	r2, r2, ip, ror #21
   22a38:	andeq	r2, r2, ip, ror #21
   22a3c:	andeq	r2, r2, ip, ror #21
   22a40:	andeq	r2, r2, ip, ror #21
   22a44:	andeq	r2, r2, ip, ror #21
   22a48:	andeq	r2, r2, ip, ror #21
   22a4c:	andeq	r2, r2, ip, ror #21
   22a50:	andeq	r2, r2, ip, ror #21
   22a54:	andeq	r2, r2, ip, ror #21
   22a58:	andeq	r2, r2, ip, ror #21
   22a5c:	andeq	r2, r2, ip, ror #21
   22a60:	andeq	r2, r2, ip, ror #21
   22a64:	andeq	r2, r2, ip, ror #21
   22a68:	andeq	r2, r2, ip, ror #21
   22a6c:	andeq	r2, r2, ip, ror #21
   22a70:	andeq	r2, r2, r0, lsl #22
   22a74:	andeq	r2, r2, ip, ror #21
   22a78:	andeq	r2, r2, ip, ror #21
   22a7c:	andeq	r2, r2, ip, ror #21
   22a80:	andeq	r2, r2, ip, ror #21
   22a84:	andeq	r2, r2, ip, ror #21
   22a88:	andeq	r2, r2, ip, ror #21
   22a8c:	andeq	r2, r2, ip, ror #21
   22a90:	andeq	r2, r2, ip, ror #21
   22a94:	andeq	r2, r2, ip, ror #21
   22a98:	andeq	r2, r2, ip, ror #21
   22a9c:	andeq	r2, r2, ip, ror #21
   22aa0:	andeq	r2, r2, ip, ror #21
   22aa4:	andeq	r2, r2, ip, ror #21
   22aa8:	andeq	r2, r2, ip, ror #21
   22aac:	andeq	r2, r2, ip, ror #21
   22ab0:	andeq	r2, r2, ip, ror #21
   22ab4:	andeq	r2, r2, ip, ror #21
   22ab8:	andeq	r2, r2, ip, ror #21
   22abc:	andeq	r2, r2, ip, ror #21
   22ac0:	andeq	r2, r2, ip, ror #21
   22ac4:	andeq	r2, r2, ip, ror #21
   22ac8:	andeq	r2, r2, ip, ror #21
   22acc:	andeq	r2, r2, ip, ror #21
   22ad0:	andeq	r2, r2, ip, ror #21
   22ad4:	andeq	r2, r2, ip, ror #21
   22ad8:	andeq	r2, r2, ip, ror #21
   22adc:	andeq	r2, r2, ip, ror #21
   22ae0:	andeq	r2, r2, ip, ror #21
   22ae4:	andeq	r2, r2, ip, ror #21
   22ae8:	andeq	r2, r2, ip, ror #21
   22aec:	strb	r0, [r4], #1
   22af0:	add	r7, r7, #1
   22af4:	cmp	r7, r6
   22af8:	bcc	22958 <__assert_fail@plt+0xfea8>
   22afc:	b	22ce8 <__assert_fail@plt+0x10238>
   22b00:	str	r3, [sp, #20]
   22b04:	str	r3, [sp, #16]
   22b08:	str	r6, [sp]
   22b0c:	b	22b2c <__assert_fail@plt+0x1007c>
   22b10:	mov	r0, #63	; 0x3f
   22b14:	add	r7, r7, r5
   22b18:	strb	r0, [r4], #1
   22b1c:	mov	r0, r9
   22b20:	bl	1251c <mbsinit@plt>
   22b24:	cmp	r0, #0
   22b28:	bne	22cdc <__assert_fail@plt+0x1022c>
   22b2c:	sub	r2, r6, r7
   22b30:	mov	r0, r8
   22b34:	mov	r1, r7
   22b38:	mov	r3, r9
   22b3c:	bl	35380 <__assert_fail@plt+0x228d0>
   22b40:	cmp	r0, #0
   22b44:	beq	22cb0 <__assert_fail@plt+0x10200>
   22b48:	mov	r5, r0
   22b4c:	cmn	r0, #2
   22b50:	beq	22cc8 <__assert_fail@plt+0x10218>
   22b54:	cmn	r5, #1
   22b58:	beq	22cd0 <__assert_fail@plt+0x10220>
   22b5c:	ldr	r0, [sp, #12]
   22b60:	bl	1245c <wcwidth@plt>
   22b64:	cmp	r0, #0
   22b68:	bmi	22b10 <__assert_fail@plt+0x10060>
   22b6c:	cmp	r5, #16
   22b70:	bcc	22c54 <__assert_fail@plt+0x101a4>
   22b74:	add	r0, r7, r5
   22b78:	cmp	r4, r0
   22b7c:	addcc	r0, r4, r5
   22b80:	cmpcc	r7, r0
   22b84:	bcc	22c54 <__assert_fail@plt+0x101a4>
   22b88:	bic	r0, r5, #15
   22b8c:	mov	r2, #0
   22b90:	mov	lr, #48	; 0x30
   22b94:	sub	r1, r0, #16
   22b98:	str	r0, [sp, #4]
   22b9c:	mov	r0, #1
   22ba0:	add	r3, r0, r1, lsr #4
   22ba4:	cmp	r1, #48	; 0x30
   22ba8:	and	r0, r3, #3
   22bac:	str	r0, [sp, #8]
   22bb0:	bcc	22c0c <__assert_fail@plt+0x1015c>
   22bb4:	ldr	r0, [sp, #8]
   22bb8:	mov	r2, #0
   22bbc:	sub	r3, r3, r0
   22bc0:	add	r1, r7, r2
   22bc4:	add	r9, r4, r2
   22bc8:	subs	r3, r3, #4
   22bcc:	add	r2, r2, #64	; 0x40
   22bd0:	mov	r0, r1
   22bd4:	mov	ip, r9
   22bd8:	add	r8, r1, #16
   22bdc:	add	r6, r9, #16
   22be0:	add	r1, r1, #32
   22be4:	vld1.8	{d16-d17}, [r0], lr
   22be8:	vst1.8	{d16-d17}, [ip], lr
   22bec:	vld1.8	{d16-d17}, [r8]
   22bf0:	vst1.8	{d16-d17}, [r6]
   22bf4:	vld1.8	{d16-d17}, [r1]
   22bf8:	add	r1, r9, #32
   22bfc:	vst1.8	{d16-d17}, [r1]
   22c00:	vld1.8	{d16-d17}, [r0]
   22c04:	vst1.8	{d16-d17}, [ip]
   22c08:	bne	22bc0 <__assert_fail@plt+0x10110>
   22c0c:	ldr	r0, [sp, #8]
   22c10:	cmp	r0, #0
   22c14:	beq	22c34 <__assert_fail@plt+0x10184>
   22c18:	add	r3, r4, r2
   22c1c:	add	r2, r7, r2
   22c20:	rsb	r1, r0, #0
   22c24:	vld1.8	{d16-d17}, [r2]!
   22c28:	adds	r1, r1, #1
   22c2c:	vst1.8	{d16-d17}, [r3]!
   22c30:	bcc	22c24 <__assert_fail@plt+0x10174>
   22c34:	ldr	r0, [sp, #4]
   22c38:	ldr	r6, [sp]
   22c3c:	add	r8, sp, #12
   22c40:	add	r9, sp, #16
   22c44:	add	r7, r7, r0
   22c48:	add	r4, r4, r0
   22c4c:	subs	r5, r5, r0
   22c50:	beq	22b1c <__assert_fail@plt+0x1006c>
   22c54:	ands	r1, r5, #3
   22c58:	sub	r0, r5, #1
   22c5c:	beq	22c74 <__assert_fail@plt+0x101c4>
   22c60:	ldrb	r2, [r7], #1
   22c64:	subs	r1, r1, #1
   22c68:	sub	r5, r5, #1
   22c6c:	strb	r2, [r4], #1
   22c70:	bne	22c60 <__assert_fail@plt+0x101b0>
   22c74:	cmp	r0, #3
   22c78:	bcc	22b1c <__assert_fail@plt+0x1006c>
   22c7c:	ldrb	r0, [r7]
   22c80:	subs	r5, r5, #4
   22c84:	strb	r0, [r4]
   22c88:	ldrb	r0, [r7, #1]
   22c8c:	strb	r0, [r4, #1]
   22c90:	ldrb	r0, [r7, #2]
   22c94:	strb	r0, [r4, #2]
   22c98:	ldrb	r0, [r7, #3]
   22c9c:	add	r7, r7, #4
   22ca0:	strb	r0, [r4, #3]
   22ca4:	add	r4, r4, #4
   22ca8:	bne	22c7c <__assert_fail@plt+0x101cc>
   22cac:	b	22b1c <__assert_fail@plt+0x1006c>
   22cb0:	mov	r5, #1
   22cb4:	ldr	r0, [sp, #12]
   22cb8:	bl	1245c <wcwidth@plt>
   22cbc:	cmp	r0, #0
   22cc0:	bpl	22b6c <__assert_fail@plt+0x100bc>
   22cc4:	b	22b10 <__assert_fail@plt+0x10060>
   22cc8:	mov	r7, r6
   22ccc:	b	22cd4 <__assert_fail@plt+0x10224>
   22cd0:	add	r7, r7, #1
   22cd4:	mov	r0, #63	; 0x3f
   22cd8:	strb	r0, [r4], #1
   22cdc:	mov	r3, #0
   22ce0:	cmp	r7, r6
   22ce4:	bcc	22958 <__assert_fail@plt+0xfea8>
   22ce8:	sub	r5, r4, sl
   22cec:	mov	r0, r5
   22cf0:	sub	sp, fp, #28
   22cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22cfc:	add	fp, sp, #28
   22d00:	sub	sp, sp, #28
   22d04:	mov	r4, r0
   22d08:	movw	r0, #6248	; 0x1868
   22d0c:	movt	r0, #5
   22d10:	mov	r1, r4
   22d14:	bl	123fc <strcmp@plt>
   22d18:	cmp	r0, #0
   22d1c:	beq	23298 <__assert_fail@plt+0x107e8>
   22d20:	movw	r0, #6248	; 0x1868
   22d24:	movt	r0, #5
   22d28:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   22d2c:	mov	r5, r0
   22d30:	movw	r0, #64090	; 0xfa5a
   22d34:	mov	r1, r4
   22d38:	movt	r0, #4
   22d3c:	bl	123fc <strcmp@plt>
   22d40:	cmp	r0, #0
   22d44:	beq	232a0 <__assert_fail@plt+0x107f0>
   22d48:	mov	r0, r5
   22d4c:	bl	127bc <strlen@plt>
   22d50:	mov	r5, r0
   22d54:	movw	r0, #64090	; 0xfa5a
   22d58:	movt	r0, #4
   22d5c:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   22d60:	mov	r6, r0
   22d64:	movw	r0, #6266	; 0x187a
   22d68:	mov	r1, r4
   22d6c:	movt	r0, #5
   22d70:	bl	123fc <strcmp@plt>
   22d74:	cmp	r0, #0
   22d78:	beq	232a8 <__assert_fail@plt+0x107f8>
   22d7c:	mov	r0, r6
   22d80:	bl	127bc <strlen@plt>
   22d84:	mov	r6, r0
   22d88:	movw	r0, #6266	; 0x187a
   22d8c:	movt	r0, #5
   22d90:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   22d94:	mov	r7, r0
   22d98:	movw	r0, #6272	; 0x1880
   22d9c:	mov	r1, r4
   22da0:	movt	r0, #5
   22da4:	bl	123fc <strcmp@plt>
   22da8:	cmp	r0, #0
   22dac:	beq	232b0 <__assert_fail@plt+0x10800>
   22db0:	mov	r0, r7
   22db4:	bl	127bc <strlen@plt>
   22db8:	mov	sl, r0
   22dbc:	movw	r0, #6272	; 0x1880
   22dc0:	movt	r0, #5
   22dc4:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   22dc8:	mov	r7, r0
   22dcc:	movw	r0, #6309	; 0x18a5
   22dd0:	mov	r1, r4
   22dd4:	movt	r0, #5
   22dd8:	bl	123fc <strcmp@plt>
   22ddc:	cmp	r0, #0
   22de0:	beq	232b8 <__assert_fail@plt+0x10808>
   22de4:	mov	r0, r7
   22de8:	bl	127bc <strlen@plt>
   22dec:	mov	r8, r0
   22df0:	movw	r0, #6309	; 0x18a5
   22df4:	movt	r0, #5
   22df8:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   22dfc:	mov	r7, r0
   22e00:	movw	r0, #6280	; 0x1888
   22e04:	mov	r1, r4
   22e08:	movt	r0, #5
   22e0c:	bl	123fc <strcmp@plt>
   22e10:	cmp	r0, #0
   22e14:	beq	232c0 <__assert_fail@plt+0x10810>
   22e18:	mov	r0, r7
   22e1c:	bl	127bc <strlen@plt>
   22e20:	mov	r9, r0
   22e24:	movw	r0, #6280	; 0x1888
   22e28:	movt	r0, #5
   22e2c:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   22e30:	mov	r7, r0
   22e34:	movw	r0, #6276	; 0x1884
   22e38:	mov	r1, r4
   22e3c:	movt	r0, #5
   22e40:	bl	123fc <strcmp@plt>
   22e44:	cmp	r0, #0
   22e48:	beq	232c8 <__assert_fail@plt+0x10818>
   22e4c:	mov	r0, r7
   22e50:	bl	127bc <strlen@plt>
   22e54:	str	r0, [sp, #24]
   22e58:	movw	r0, #6276	; 0x1884
   22e5c:	movt	r0, #5
   22e60:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   22e64:	mov	r7, r0
   22e68:	movw	r0, #6290	; 0x1892
   22e6c:	mov	r1, r4
   22e70:	movt	r0, #5
   22e74:	bl	123fc <strcmp@plt>
   22e78:	cmp	r0, #0
   22e7c:	beq	232d0 <__assert_fail@plt+0x10820>
   22e80:	mov	r0, r7
   22e84:	bl	127bc <strlen@plt>
   22e88:	str	r0, [sp, #20]
   22e8c:	movw	r0, #6290	; 0x1892
   22e90:	movt	r0, #5
   22e94:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   22e98:	mov	r7, r0
   22e9c:	movw	r0, #6302	; 0x189e
   22ea0:	mov	r1, r4
   22ea4:	movt	r0, #5
   22ea8:	bl	123fc <strcmp@plt>
   22eac:	cmp	r0, #0
   22eb0:	beq	232d8 <__assert_fail@plt+0x10828>
   22eb4:	mov	r0, r7
   22eb8:	bl	127bc <strlen@plt>
   22ebc:	str	r0, [sp, #16]
   22ec0:	movw	r0, #6302	; 0x189e
   22ec4:	movt	r0, #5
   22ec8:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   22ecc:	mov	r7, r0
   22ed0:	movw	r0, #6308	; 0x18a4
   22ed4:	mov	r1, r4
   22ed8:	movt	r0, #5
   22edc:	bl	123fc <strcmp@plt>
   22ee0:	cmp	r0, #0
   22ee4:	beq	232e0 <__assert_fail@plt+0x10830>
   22ee8:	mov	r0, r7
   22eec:	bl	127bc <strlen@plt>
   22ef0:	str	r0, [sp, #12]
   22ef4:	movw	r0, #6308	; 0x18a4
   22ef8:	movt	r0, #5
   22efc:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   22f00:	mov	r7, r0
   22f04:	movw	r0, #6314	; 0x18aa
   22f08:	mov	r1, r4
   22f0c:	movt	r0, #5
   22f10:	bl	123fc <strcmp@plt>
   22f14:	cmp	r0, #0
   22f18:	beq	232e8 <__assert_fail@plt+0x10838>
   22f1c:	mov	r0, r7
   22f20:	bl	127bc <strlen@plt>
   22f24:	str	r0, [sp, #8]
   22f28:	movw	r0, #6314	; 0x18aa
   22f2c:	movt	r0, #5
   22f30:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   22f34:	mov	r7, r0
   22f38:	movw	r0, #6329	; 0x18b9
   22f3c:	mov	r1, r4
   22f40:	movt	r0, #5
   22f44:	bl	123fc <strcmp@plt>
   22f48:	cmp	r0, #0
   22f4c:	beq	232f0 <__assert_fail@plt+0x10840>
   22f50:	mov	r0, r7
   22f54:	bl	127bc <strlen@plt>
   22f58:	mov	r7, r0
   22f5c:	movw	r0, #6329	; 0x18b9
   22f60:	movt	r0, #5
   22f64:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   22f68:	str	r0, [sp, #4]
   22f6c:	movw	r0, #63637	; 0xf895
   22f70:	mov	r1, r4
   22f74:	movt	r0, #4
   22f78:	bl	123fc <strcmp@plt>
   22f7c:	mov	r1, #12
   22f80:	cmp	r0, #0
   22f84:	beq	232f4 <__assert_fail@plt+0x10844>
   22f88:	add	r0, r5, r6
   22f8c:	ldr	r1, [sp, #24]
   22f90:	add	r0, r0, sl
   22f94:	add	r0, r0, r8
   22f98:	add	r0, r0, r9
   22f9c:	add	r0, r0, r1
   22fa0:	ldr	r1, [sp, #20]
   22fa4:	add	r0, r0, r1
   22fa8:	ldr	r1, [sp, #16]
   22fac:	add	r0, r0, r1
   22fb0:	ldr	r1, [sp, #12]
   22fb4:	add	r0, r0, r1
   22fb8:	ldr	r1, [sp, #8]
   22fbc:	add	r0, r0, r1
   22fc0:	add	r5, r0, r7
   22fc4:	ldr	r0, [sp, #4]
   22fc8:	bl	127bc <strlen@plt>
   22fcc:	add	r5, r5, r0
   22fd0:	movw	r0, #63637	; 0xf895
   22fd4:	movt	r0, #4
   22fd8:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   22fdc:	bl	127bc <strlen@plt>
   22fe0:	add	r0, r5, r0
   22fe4:	add	r0, r0, #27
   22fe8:	bl	306e8 <__assert_fail@plt+0x1dc38>
   22fec:	mov	r9, r0
   22ff0:	movw	r0, #6248	; 0x1868
   22ff4:	movt	r0, #5
   22ff8:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   22ffc:	mov	r7, r0
   23000:	bl	127bc <strlen@plt>
   23004:	mov	r6, r0
   23008:	add	r2, r0, #1
   2300c:	mov	r0, r9
   23010:	mov	r1, r7
   23014:	bl	124e0 <memcpy@plt>
   23018:	movw	r0, #64090	; 0xfa5a
   2301c:	movw	sl, #8236	; 0x202c
   23020:	mov	r7, r9
   23024:	mov	r8, #0
   23028:	movt	r0, #4
   2302c:	strh	sl, [r7, r6]!
   23030:	strb	r8, [r7, #2]!
   23034:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   23038:	mov	r6, r0
   2303c:	bl	127bc <strlen@plt>
   23040:	mov	r5, r0
   23044:	add	r2, r0, #1
   23048:	mov	r0, r7
   2304c:	mov	r1, r6
   23050:	bl	124e0 <memcpy@plt>
   23054:	movw	r0, #6266	; 0x187a
   23058:	strh	sl, [r7, r5]!
   2305c:	movt	r0, #5
   23060:	strb	r8, [r7, #2]!
   23064:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   23068:	mov	r5, r0
   2306c:	bl	127bc <strlen@plt>
   23070:	mov	r6, r0
   23074:	add	r2, r0, #1
   23078:	mov	r0, r7
   2307c:	mov	r1, r5
   23080:	bl	124e0 <memcpy@plt>
   23084:	movw	r0, #6272	; 0x1880
   23088:	strh	sl, [r7, r6]!
   2308c:	movt	r0, #5
   23090:	strb	r8, [r7, #2]!
   23094:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   23098:	mov	r5, r0
   2309c:	bl	127bc <strlen@plt>
   230a0:	mov	r6, r0
   230a4:	add	r2, r0, #1
   230a8:	mov	r0, r7
   230ac:	mov	r1, r5
   230b0:	bl	124e0 <memcpy@plt>
   230b4:	movw	r0, #6309	; 0x18a5
   230b8:	strh	sl, [r7, r6]!
   230bc:	movt	r0, #5
   230c0:	strb	r8, [r7, #2]!
   230c4:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   230c8:	mov	r5, r0
   230cc:	bl	127bc <strlen@plt>
   230d0:	mov	r6, r0
   230d4:	add	r2, r0, #1
   230d8:	mov	r0, r7
   230dc:	mov	r1, r5
   230e0:	bl	124e0 <memcpy@plt>
   230e4:	movw	r0, #6280	; 0x1888
   230e8:	strh	sl, [r7, r6]!
   230ec:	movt	r0, #5
   230f0:	strb	r8, [r7, #2]!
   230f4:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   230f8:	mov	r5, r0
   230fc:	bl	127bc <strlen@plt>
   23100:	mov	r6, r0
   23104:	add	r2, r0, #1
   23108:	mov	r0, r7
   2310c:	mov	r1, r5
   23110:	bl	124e0 <memcpy@plt>
   23114:	movw	r0, #6276	; 0x1884
   23118:	strh	sl, [r7, r6]!
   2311c:	movt	r0, #5
   23120:	strb	r8, [r7, #2]!
   23124:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   23128:	mov	r5, r0
   2312c:	bl	127bc <strlen@plt>
   23130:	mov	r6, r0
   23134:	add	r2, r0, #1
   23138:	mov	r0, r7
   2313c:	mov	r1, r5
   23140:	bl	124e0 <memcpy@plt>
   23144:	movw	r0, #6290	; 0x1892
   23148:	strh	sl, [r7, r6]!
   2314c:	movt	r0, #5
   23150:	strb	r8, [r7, #2]!
   23154:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   23158:	mov	r5, r0
   2315c:	bl	127bc <strlen@plt>
   23160:	mov	r6, r0
   23164:	add	r2, r0, #1
   23168:	mov	r0, r7
   2316c:	mov	r1, r5
   23170:	bl	124e0 <memcpy@plt>
   23174:	movw	r0, #6302	; 0x189e
   23178:	strh	sl, [r7, r6]!
   2317c:	movt	r0, #5
   23180:	strb	r8, [r7, #2]!
   23184:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   23188:	mov	r5, r0
   2318c:	bl	127bc <strlen@plt>
   23190:	mov	r6, r0
   23194:	add	r2, r0, #1
   23198:	mov	r0, r7
   2319c:	mov	r1, r5
   231a0:	bl	124e0 <memcpy@plt>
   231a4:	movw	r0, #6308	; 0x18a4
   231a8:	strh	sl, [r7, r6]!
   231ac:	movt	r0, #5
   231b0:	strb	r8, [r7, #2]!
   231b4:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   231b8:	mov	r5, r0
   231bc:	bl	127bc <strlen@plt>
   231c0:	mov	r6, r0
   231c4:	add	r2, r0, #1
   231c8:	mov	r0, r7
   231cc:	mov	r1, r5
   231d0:	bl	124e0 <memcpy@plt>
   231d4:	movw	r0, #6314	; 0x18aa
   231d8:	strh	sl, [r7, r6]!
   231dc:	movt	r0, #5
   231e0:	strb	r8, [r7, #2]!
   231e4:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   231e8:	mov	r5, r0
   231ec:	bl	127bc <strlen@plt>
   231f0:	mov	r6, r0
   231f4:	add	r2, r0, #1
   231f8:	mov	r0, r7
   231fc:	mov	r1, r5
   23200:	bl	124e0 <memcpy@plt>
   23204:	movw	r0, #6329	; 0x18b9
   23208:	strh	sl, [r7, r6]!
   2320c:	movt	r0, #5
   23210:	strb	r8, [r7, #2]!
   23214:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   23218:	mov	r5, r0
   2321c:	bl	127bc <strlen@plt>
   23220:	mov	r6, r0
   23224:	add	r2, r0, #1
   23228:	mov	r0, r7
   2322c:	mov	r1, r5
   23230:	bl	124e0 <memcpy@plt>
   23234:	movw	r0, #63637	; 0xf895
   23238:	strh	sl, [r7, r6]!
   2323c:	movt	r0, #4
   23240:	strb	r8, [r7, #2]!
   23244:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   23248:	mov	r5, r0
   2324c:	bl	127bc <strlen@plt>
   23250:	add	r2, r0, #1
   23254:	mov	r0, r7
   23258:	mov	r1, r5
   2325c:	bl	124e0 <memcpy@plt>
   23260:	movw	r1, #6192	; 0x1830
   23264:	mov	r0, #0
   23268:	mov	r2, #5
   2326c:	movt	r1, #5
   23270:	bl	12564 <dcgettext@plt>
   23274:	mov	r5, r0
   23278:	mov	r0, r4
   2327c:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   23280:	mov	r3, r0
   23284:	mov	r0, #1
   23288:	mov	r1, #0
   2328c:	mov	r2, r5
   23290:	str	r9, [sp]
   23294:	bl	1269c <error@plt>
   23298:	mov	r1, #0
   2329c:	b	232f4 <__assert_fail@plt+0x10844>
   232a0:	mov	r1, #1
   232a4:	b	232f4 <__assert_fail@plt+0x10844>
   232a8:	mov	r1, #2
   232ac:	b	232f4 <__assert_fail@plt+0x10844>
   232b0:	mov	r1, #3
   232b4:	b	232f4 <__assert_fail@plt+0x10844>
   232b8:	mov	r1, #4
   232bc:	b	232f4 <__assert_fail@plt+0x10844>
   232c0:	mov	r1, #5
   232c4:	b	232f4 <__assert_fail@plt+0x10844>
   232c8:	mov	r1, #6
   232cc:	b	232f4 <__assert_fail@plt+0x10844>
   232d0:	mov	r1, #7
   232d4:	b	232f4 <__assert_fail@plt+0x10844>
   232d8:	mov	r1, #8
   232dc:	b	232f4 <__assert_fail@plt+0x10844>
   232e0:	mov	r1, #9
   232e4:	b	232f4 <__assert_fail@plt+0x10844>
   232e8:	mov	r1, #10
   232ec:	b	232f4 <__assert_fail@plt+0x10844>
   232f0:	mov	r1, #11
   232f4:	add	r0, r1, r1, lsl #1
   232f8:	movw	r1, #6036	; 0x1794
   232fc:	movt	r1, #5
   23300:	add	r0, r1, r0, lsl #2
   23304:	ldr	r0, [r0, #8]
   23308:	sub	sp, fp, #28
   2330c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23310:	mov	r1, r0
   23314:	mov	r0, #0
   23318:	cmp	r1, #12
   2331c:	bxhi	lr
   23320:	add	r0, r1, r1, lsl #1
   23324:	movw	r1, #6036	; 0x1794
   23328:	movt	r1, #5
   2332c:	ldr	r0, [r1, r0, lsl #2]
   23330:	bx	lr
   23334:	mov	r1, r0
   23338:	mvn	r0, #0
   2333c:	cmp	r1, #12
   23340:	bxhi	lr
   23344:	add	r0, r1, r1, lsl #1
   23348:	movw	r1, #6036	; 0x1794
   2334c:	movt	r1, #5
   23350:	add	r0, r1, r0, lsl #2
   23354:	ldr	r0, [r0, #8]
   23358:	bx	lr
   2335c:	mov	r1, r0
   23360:	mov	r0, #0
   23364:	cmp	r1, #12
   23368:	bxhi	lr
   2336c:	add	r0, r1, r1, lsl #1
   23370:	movw	r1, #6036	; 0x1794
   23374:	movt	r1, #5
   23378:	add	r0, r1, r0, lsl #2
   2337c:	ldr	r0, [r0, #4]
   23380:	bx	lr
   23384:	push	{r4, sl, fp, lr}
   23388:	add	fp, sp, #8
   2338c:	mov	lr, r0
   23390:	mvn	r0, #0
   23394:	cmp	lr, #12
   23398:	pophi	{r4, sl, fp, pc}
   2339c:	cmp	lr, #0
   233a0:	beq	233f8 <__assert_fail@plt+0x10948>
   233a4:	movw	r3, #6036	; 0x1794
   233a8:	add	r2, lr, lr, lsl #1
   233ac:	movt	r3, #5
   233b0:	add	r2, r3, r2, lsl #2
   233b4:	ldr	ip, [r2, #8]
   233b8:	add	r2, r3, #4
   233bc:	mov	r3, #0
   233c0:	ldr	r4, [r2]
   233c4:	tst	r4, r1
   233c8:	bne	233e8 <__assert_fail@plt+0x10938>
   233cc:	add	r3, r3, #1
   233d0:	add	r2, r2, #12
   233d4:	cmp	lr, r3
   233d8:	beq	233f8 <__assert_fail@plt+0x10948>
   233dc:	ldr	r4, [r2]
   233e0:	tst	r4, r1
   233e4:	beq	233cc <__assert_fail@plt+0x1091c>
   233e8:	ldr	r4, [r2, #4]
   233ec:	cmp	ip, r4
   233f0:	bne	233cc <__assert_fail@plt+0x1091c>
   233f4:	mov	r0, r3
   233f8:	pop	{r4, sl, fp, pc}
   233fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23400:	add	fp, sp, #24
   23404:	sub	sp, sp, #8
   23408:	mov	r5, r1
   2340c:	mov	r4, r0
   23410:	bl	12804 <__errno_location@plt>
   23414:	mov	r6, r0
   23418:	mov	r0, #0
   2341c:	add	r1, sp, #4
   23420:	mov	r2, #10
   23424:	str	r0, [r6]
   23428:	mov	r0, r4
   2342c:	bl	12408 <strtol@plt>
   23430:	add	r1, r0, #-2147483647	; 0x80000001
   23434:	cmp	r1, #1
   23438:	bls	23498 <__assert_fail@plt+0x109e8>
   2343c:	ldr	r7, [sp, #4]
   23440:	ldrb	r1, [r7]
   23444:	cmp	r1, #0
   23448:	bne	234b0 <__assert_fail@plt+0x10a00>
   2344c:	cmp	r7, r4
   23450:	subne	sp, fp, #24
   23454:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   23458:	movw	r1, #6376	; 0x18e8
   2345c:	ldr	r6, [r6]
   23460:	mov	r0, #0
   23464:	mov	r2, #5
   23468:	movt	r1, #5
   2346c:	bl	12564 <dcgettext@plt>
   23470:	mov	r7, r0
   23474:	mov	r0, #0
   23478:	mov	r1, r5
   2347c:	mov	r2, r4
   23480:	bl	2efe4 <__assert_fail@plt+0x1c534>
   23484:	mov	r3, r0
   23488:	mov	r0, #1
   2348c:	mov	r1, r6
   23490:	mov	r2, r7
   23494:	bl	1269c <error@plt>
   23498:	ldr	r1, [r6]
   2349c:	movw	r2, #12871	; 0x3247
   234a0:	mov	r0, #1
   234a4:	mov	r3, r4
   234a8:	movt	r2, #5
   234ac:	bl	1269c <error@plt>
   234b0:	movw	r1, #6349	; 0x18cd
   234b4:	ldr	r8, [r6]
   234b8:	mov	r0, #0
   234bc:	mov	r2, #5
   234c0:	movt	r1, #5
   234c4:	bl	12564 <dcgettext@plt>
   234c8:	mov	r6, r0
   234cc:	mov	r0, #0
   234d0:	mov	r1, r5
   234d4:	mov	r2, r7
   234d8:	bl	2efe4 <__assert_fail@plt+0x1c534>
   234dc:	mov	r7, r0
   234e0:	mov	r0, #1
   234e4:	mov	r1, r5
   234e8:	mov	r2, r4
   234ec:	bl	2efe4 <__assert_fail@plt+0x1c534>
   234f0:	str	r0, [sp]
   234f4:	mov	r0, #1
   234f8:	mov	r1, r8
   234fc:	mov	r2, r6
   23500:	mov	r3, r7
   23504:	bl	1269c <error@plt>
   23508:	push	{r4, r5, fp, lr}
   2350c:	add	fp, sp, #8
   23510:	ldr	r5, [fp, #8]
   23514:	cmp	r2, #0
   23518:	beq	2355c <__assert_fail@plt+0x10aac>
   2351c:	mov	r2, #0
   23520:	str	r2, [r3]
   23524:	str	r2, [r5]
   23528:	ldr	r2, [r3]
   2352c:	add	r4, r0, r2
   23530:	ldrb	r0, [r1]
   23534:	cmp	r0, #0
   23538:	beq	23590 <__assert_fail@plt+0x10ae0>
   2353c:	mov	r0, r4
   23540:	bl	129e4 <strpbrk@plt>
   23544:	cmp	r0, #0
   23548:	beq	23590 <__assert_fail@plt+0x10ae0>
   2354c:	sub	r0, r0, r4
   23550:	str	r0, [r5]
   23554:	mov	r0, #1
   23558:	pop	{r4, r5, fp, pc}
   2355c:	ldr	r2, [r5]
   23560:	ldr	r4, [r3]
   23564:	add	r2, r4, r2
   23568:	str	r2, [r3]
   2356c:	ldrb	r4, [r0, r2]
   23570:	cmp	r4, #0
   23574:	beq	235a4 <__assert_fail@plt+0x10af4>
   23578:	add	r2, r2, #1
   2357c:	str	r2, [r3]
   23580:	add	r4, r0, r2
   23584:	ldrb	r0, [r1]
   23588:	cmp	r0, #0
   2358c:	bne	2353c <__assert_fail@plt+0x10a8c>
   23590:	mov	r0, r4
   23594:	bl	127bc <strlen@plt>
   23598:	str	r0, [r5]
   2359c:	mov	r0, #1
   235a0:	pop	{r4, r5, fp, pc}
   235a4:	mov	r0, #0
   235a8:	pop	{r4, r5, fp, pc}
   235ac:	push	{r4, r5, fp, lr}
   235b0:	add	fp, sp, #8
   235b4:	sub	sp, sp, #16
   235b8:	mov	r4, r1
   235bc:	movw	r1, #6400	; 0x1900
   235c0:	mov	r5, r0
   235c4:	mov	r0, #0
   235c8:	mov	r2, #5
   235cc:	movt	r1, #5
   235d0:	bl	12564 <dcgettext@plt>
   235d4:	movw	r2, #6645	; 0x19f5
   235d8:	movw	r3, #5845	; 0x16d5
   235dc:	mov	r1, r0
   235e0:	movw	r0, #6692	; 0x1a24
   235e4:	movt	r2, #5
   235e8:	movt	r0, #5
   235ec:	movt	r3, #5
   235f0:	str	r2, [sp, #4]
   235f4:	movw	r2, #6606	; 0x19ce
   235f8:	str	r3, [sp]
   235fc:	str	r0, [sp, #8]
   23600:	mov	r0, r5
   23604:	mov	r3, r4
   23608:	movt	r2, #5
   2360c:	bl	127f8 <fprintf@plt>
   23610:	sub	sp, fp, #8
   23614:	pop	{r4, r5, fp, pc}
   23618:	push	{fp, lr}
   2361c:	mov	fp, sp
   23620:	sub	sp, sp, #8
   23624:	movw	r2, #9992	; 0x2708
   23628:	mov	r3, #0
   2362c:	movt	r2, #1
   23630:	str	r3, [sp]
   23634:	mov	r3, #0
   23638:	str	r2, [sp, #4]
   2363c:	mov	r2, #0
   23640:	bl	237bc <__assert_fail@plt+0x10d0c>
   23644:	mov	sp, fp
   23648:	pop	{fp, pc}
   2364c:	push	{r4, sl, fp, lr}
   23650:	add	fp, sp, #8
   23654:	mov	r4, r0
   23658:	mov	r0, #24
   2365c:	bl	35350 <__assert_fail@plt+0x228a0>
   23660:	cmp	r0, #0
   23664:	moveq	r0, #0
   23668:	movne	r1, #0
   2366c:	strne	r4, [r0, #16]
   23670:	strne	r4, [r0, #20]
   23674:	strne	r1, [r0]
   23678:	pop	{r4, sl, fp, pc}
   2367c:	push	{r4, sl, fp, lr}
   23680:	add	fp, sp, #8
   23684:	mov	r4, r0
   23688:	mov	r0, #24
   2368c:	bl	35350 <__assert_fail@plt+0x228a0>
   23690:	cmp	r0, #0
   23694:	beq	236ac <__assert_fail@plt+0x10bfc>
   23698:	vmov.i32	q8, #0	; 0x00000000
   2369c:	mov	r1, r0
   236a0:	str	r4, [r1], #4
   236a4:	vst1.32	{d16-d17}, [r1]
   236a8:	pop	{r4, sl, fp, pc}
   236ac:	mov	r0, #0
   236b0:	pop	{r4, sl, fp, pc}
   236b4:	push	{r4, r5, r6, sl, fp, lr}
   236b8:	add	fp, sp, #16
   236bc:	ldr	r3, [r0]
   236c0:	mov	r4, r1
   236c4:	mov	r5, r0
   236c8:	cmp	r3, #0
   236cc:	beq	23708 <__assert_fail@plt+0x10c58>
   236d0:	add	r0, r5, #8
   236d4:	add	r1, r5, #12
   236d8:	mov	r2, #0
   236dc:	mov	r6, #0
   236e0:	bl	12a08 <getdelim@plt>
   236e4:	cmn	r0, #1
   236e8:	ble	23738 <__assert_fail@plt+0x10c88>
   236ec:	mov	r0, #1
   236f0:	str	r0, [r4]
   236f4:	ldmib	r5, {r0, r6}
   236f8:	add	r0, r0, #1
   236fc:	str	r0, [r5, #4]
   23700:	mov	r0, r6
   23704:	pop	{r4, r5, r6, sl, fp, pc}
   23708:	ldr	r0, [r5, #20]
   2370c:	ldr	r0, [r0]
   23710:	cmp	r0, #0
   23714:	beq	23758 <__assert_fail@plt+0x10ca8>
   23718:	mov	r0, #1
   2371c:	str	r0, [r4]
   23720:	ldr	r0, [r5, #20]
   23724:	add	r1, r0, #4
   23728:	str	r1, [r5, #20]
   2372c:	ldr	r6, [r0]
   23730:	mov	r0, r6
   23734:	pop	{r4, r5, r6, sl, fp, pc}
   23738:	ldr	r0, [r5]
   2373c:	bl	1278c <feof@plt>
   23740:	cmp	r0, #0
   23744:	mov	r1, #2
   23748:	mov	r0, r6
   2374c:	movweq	r1, #4
   23750:	str	r1, [r4]
   23754:	pop	{r4, r5, r6, sl, fp, pc}
   23758:	mov	r0, #2
   2375c:	mov	r6, #0
   23760:	str	r0, [r4]
   23764:	mov	r0, r6
   23768:	pop	{r4, r5, r6, sl, fp, pc}
   2376c:	ldr	r1, [r0]
   23770:	cmp	r1, #0
   23774:	ldrne	r0, [r0, #4]
   23778:	bxne	lr
   2377c:	ldr	r1, [r0, #16]
   23780:	ldr	r0, [r0, #20]
   23784:	sub	r0, r0, r1
   23788:	asr	r0, r0, #2
   2378c:	bx	lr
   23790:	push	{r4, sl, fp, lr}
   23794:	add	fp, sp, #8
   23798:	mov	r4, r0
   2379c:	ldr	r0, [r0]
   237a0:	cmp	r0, #0
   237a4:	beq	237b0 <__assert_fail@plt+0x10d00>
   237a8:	ldr	r0, [r4, #8]
   237ac:	bl	32910 <__assert_fail@plt+0x1fe60>
   237b0:	mov	r0, r4
   237b4:	pop	{r4, sl, fp, lr}
   237b8:	b	32910 <__assert_fail@plt+0x1fe60>
   237bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   237c0:	add	fp, sp, #28
   237c4:	sub	sp, sp, #4
   237c8:	sub	sp, sp, #1024	; 0x400
   237cc:	mov	r9, r0
   237d0:	mov	r0, sp
   237d4:	cmp	r2, #0
   237d8:	mov	r5, r2
   237dc:	mov	r4, r3
   237e0:	ldr	sl, [fp, #12]
   237e4:	movw	r7, #12768	; 0x31e0
   237e8:	mov	r8, r1
   237ec:	moveq	r5, r0
   237f0:	ldr	r0, [fp, #8]
   237f4:	movweq	r4, #1024	; 0x400
   237f8:	movt	r7, #5
   237fc:	cmn	r4, #-2147483647	; 0x80000001
   23800:	mov	r6, r5
   23804:	mvncs	r4, #-2147483648	; 0x80000000
   23808:	cmp	r0, #0
   2380c:	movne	r7, r0
   23810:	mov	r0, r9
   23814:	mov	r1, r8
   23818:	mov	r2, r6
   2381c:	mov	r3, r4
   23820:	blx	sl
   23824:	cmn	r0, #1
   23828:	ble	23890 <__assert_fail@plt+0x10de0>
   2382c:	cmp	r0, r4
   23830:	blt	238c4 <__assert_fail@plt+0x10e14>
   23834:	cmp	r6, r5
   23838:	beq	23848 <__assert_fail@plt+0x10d98>
   2383c:	ldr	r1, [r7, #8]
   23840:	mov	r0, r6
   23844:	blx	r1
   23848:	cmn	r4, #-1073741823	; 0xc0000001
   2384c:	bge	2391c <__assert_fail@plt+0x10e6c>
   23850:	mov	r0, #1
   23854:	ldr	r1, [r7]
   23858:	orr	r4, r0, r4, lsl #1
   2385c:	mov	r0, r4
   23860:	blx	r1
   23864:	mov	r6, r0
   23868:	cmp	r0, #0
   2386c:	bne	23810 <__assert_fail@plt+0x10d60>
   23870:	ldr	r1, [r7, #12]
   23874:	cmp	r1, #0
   23878:	beq	23884 <__assert_fail@plt+0x10dd4>
   2387c:	mov	r0, r4
   23880:	blx	r1
   23884:	bl	12804 <__errno_location@plt>
   23888:	mov	r1, #12
   2388c:	b	23924 <__assert_fail@plt+0x10e74>
   23890:	mov	r4, #0
   23894:	cmp	r6, r5
   23898:	beq	238b8 <__assert_fail@plt+0x10e08>
   2389c:	bl	12804 <__errno_location@plt>
   238a0:	ldr	r1, [r7, #8]
   238a4:	ldr	r8, [r0]
   238a8:	mov	r5, r0
   238ac:	mov	r0, r6
   238b0:	blx	r1
   238b4:	str	r8, [r5]
   238b8:	mov	r0, r4
   238bc:	sub	sp, fp, #28
   238c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   238c4:	mov	r1, #0
   238c8:	add	r8, r0, #1
   238cc:	strb	r1, [r6, r0]
   238d0:	mov	r0, sp
   238d4:	cmp	r6, r0
   238d8:	beq	23948 <__assert_fail@plt+0x10e98>
   238dc:	cmp	r6, r5
   238e0:	beq	23938 <__assert_fail@plt+0x10e88>
   238e4:	cmp	r8, r4
   238e8:	bge	23938 <__assert_fail@plt+0x10e88>
   238ec:	ldr	r2, [r7, #4]
   238f0:	cmp	r2, #0
   238f4:	beq	23938 <__assert_fail@plt+0x10e88>
   238f8:	mov	r0, r6
   238fc:	mov	r1, r8
   23900:	blx	r2
   23904:	cmp	r0, #0
   23908:	mov	r4, r0
   2390c:	moveq	r4, r6
   23910:	mov	r0, r4
   23914:	sub	sp, fp, #28
   23918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2391c:	bl	12804 <__errno_location@plt>
   23920:	mov	r1, #36	; 0x24
   23924:	mov	r4, #0
   23928:	str	r1, [r0]
   2392c:	mov	r0, r4
   23930:	sub	sp, fp, #28
   23934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23938:	mov	r4, r6
   2393c:	mov	r0, r4
   23940:	sub	sp, fp, #28
   23944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23948:	ldr	r1, [r7]
   2394c:	mov	r0, r8
   23950:	blx	r1
   23954:	cmp	r0, #0
   23958:	beq	23978 <__assert_fail@plt+0x10ec8>
   2395c:	mov	r1, sp
   23960:	mov	r2, r8
   23964:	mov	r4, r0
   23968:	bl	124e0 <memcpy@plt>
   2396c:	mov	r0, r4
   23970:	sub	sp, fp, #28
   23974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23978:	mov	r4, r8
   2397c:	ldr	r1, [r7, #12]
   23980:	cmp	r1, #0
   23984:	bne	2387c <__assert_fail@plt+0x10dcc>
   23988:	b	23884 <__assert_fail@plt+0x10dd4>
   2398c:	push	{r4, r5, r6, sl, fp, lr}
   23990:	add	fp, sp, #16
   23994:	mov	r6, r1
   23998:	mov	r1, #1
   2399c:	mov	r2, #0
   239a0:	mov	r4, r0
   239a4:	mov	r5, #0
   239a8:	bl	326d4 <__assert_fail@plt+0x1fc24>
   239ac:	cmp	r0, #0
   239b0:	bmi	239e0 <__assert_fail@plt+0x10f30>
   239b4:	cmp	r6, #0
   239b8:	bic	r2, r0, #1
   239bc:	orrne	r2, r0, #1
   239c0:	cmp	r0, r2
   239c4:	beq	239e4 <__assert_fail@plt+0x10f34>
   239c8:	mov	r0, r4
   239cc:	mov	r1, #2
   239d0:	bl	326d4 <__assert_fail@plt+0x1fc24>
   239d4:	cmn	r0, #1
   239d8:	movwne	r0, #0
   239dc:	pop	{r4, r5, r6, sl, fp, pc}
   239e0:	mvn	r5, #0
   239e4:	mov	r0, r5
   239e8:	pop	{r4, r5, r6, sl, fp, pc}
   239ec:	movw	r1, #1030	; 0x406
   239f0:	mov	r2, #0
   239f4:	b	326d4 <__assert_fail@plt+0x1fc24>
   239f8:	movw	r1, #19700	; 0x4cf4
   239fc:	movt	r1, #6
   23a00:	str	r0, [r1, #4]
   23a04:	bx	lr
   23a08:	movw	r1, #19700	; 0x4cf4
   23a0c:	movt	r1, #6
   23a10:	strb	r0, [r1]
   23a14:	bx	lr
   23a18:	push	{r4, r5, r6, sl, fp, lr}
   23a1c:	add	fp, sp, #16
   23a20:	sub	sp, sp, #8
   23a24:	movw	r0, #17756	; 0x455c
   23a28:	movt	r0, #6
   23a2c:	ldr	r0, [r0]
   23a30:	bl	4c234 <__assert_fail@plt+0x39784>
   23a34:	cmp	r0, #0
   23a38:	beq	23a60 <__assert_fail@plt+0x10fb0>
   23a3c:	movw	r5, #19700	; 0x4cf4
   23a40:	movt	r5, #6
   23a44:	ldrb	r0, [r5]
   23a48:	cmp	r0, #0
   23a4c:	beq	23a8c <__assert_fail@plt+0x10fdc>
   23a50:	bl	12804 <__errno_location@plt>
   23a54:	ldr	r0, [r0]
   23a58:	cmp	r0, #32
   23a5c:	bne	23a8c <__assert_fail@plt+0x10fdc>
   23a60:	movw	r0, #17744	; 0x4550
   23a64:	movt	r0, #6
   23a68:	ldr	r0, [r0]
   23a6c:	bl	4c234 <__assert_fail@plt+0x39784>
   23a70:	cmp	r0, #0
   23a74:	subeq	sp, fp, #16
   23a78:	popeq	{r4, r5, r6, sl, fp, pc}
   23a7c:	movw	r0, #17648	; 0x44f0
   23a80:	movt	r0, #6
   23a84:	ldr	r0, [r0]
   23a88:	bl	124d4 <_exit@plt>
   23a8c:	movw	r1, #6714	; 0x1a3a
   23a90:	mov	r0, #0
   23a94:	mov	r2, #5
   23a98:	movt	r1, #5
   23a9c:	bl	12564 <dcgettext@plt>
   23aa0:	ldr	r6, [r5, #4]
   23aa4:	mov	r4, r0
   23aa8:	bl	12804 <__errno_location@plt>
   23aac:	ldr	r5, [r0]
   23ab0:	cmp	r6, #0
   23ab4:	bne	23ad0 <__assert_fail@plt+0x11020>
   23ab8:	movw	r2, #12871	; 0x3247
   23abc:	mov	r0, #0
   23ac0:	mov	r1, r5
   23ac4:	mov	r3, r4
   23ac8:	movt	r2, #5
   23acc:	b	23af0 <__assert_fail@plt+0x11040>
   23ad0:	mov	r0, r6
   23ad4:	bl	2f22c <__assert_fail@plt+0x1c77c>
   23ad8:	movw	r2, #6726	; 0x1a46
   23adc:	mov	r3, r0
   23ae0:	str	r4, [sp]
   23ae4:	mov	r0, #0
   23ae8:	mov	r1, r5
   23aec:	movt	r2, #5
   23af0:	bl	1269c <error@plt>
   23af4:	movw	r0, #17648	; 0x44f0
   23af8:	movt	r0, #6
   23afc:	ldr	r0, [r0]
   23b00:	bl	124d4 <_exit@plt>
   23b04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23b08:	add	fp, sp, #24
   23b0c:	bl	126b4 <opendir@plt>
   23b10:	cmp	r0, #0
   23b14:	beq	23b68 <__assert_fail@plt+0x110b8>
   23b18:	mov	r4, r0
   23b1c:	bl	129a8 <dirfd@plt>
   23b20:	cmp	r0, #2
   23b24:	bhi	23b74 <__assert_fail@plt+0x110c4>
   23b28:	movw	r1, #1030	; 0x406
   23b2c:	mov	r2, #3
   23b30:	bl	326d4 <__assert_fail@plt+0x1fc24>
   23b34:	cmn	r0, #1
   23b38:	ble	23b7c <__assert_fail@plt+0x110cc>
   23b3c:	mov	r7, r0
   23b40:	bl	12984 <fdopendir@plt>
   23b44:	mov	r5, r0
   23b48:	bl	12804 <__errno_location@plt>
   23b4c:	ldr	r8, [r0]
   23b50:	mov	r6, r0
   23b54:	cmp	r5, #0
   23b58:	bne	23b8c <__assert_fail@plt+0x110dc>
   23b5c:	mov	r0, r7
   23b60:	bl	12a68 <close@plt>
   23b64:	b	23b88 <__assert_fail@plt+0x110d8>
   23b68:	mov	r5, #0
   23b6c:	mov	r0, r5
   23b70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23b74:	mov	r0, r4
   23b78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23b7c:	bl	12804 <__errno_location@plt>
   23b80:	ldr	r8, [r0]
   23b84:	mov	r6, r0
   23b88:	mov	r5, #0
   23b8c:	mov	r0, r4
   23b90:	bl	12a80 <closedir@plt>
   23b94:	mov	r0, r5
   23b98:	str	r8, [r6]
   23b9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23ba0:	push	{r4, r5, r6, sl, fp, lr}
   23ba4:	add	fp, sp, #16
   23ba8:	mov	r6, r0
   23bac:	bl	4c19c <__assert_fail@plt+0x396ec>
   23bb0:	mov	r4, r0
   23bb4:	ldrb	r0, [r0]
   23bb8:	cmp	r0, #0
   23bbc:	beq	23bdc <__assert_fail@plt+0x1112c>
   23bc0:	mov	r0, r4
   23bc4:	bl	4c1fc <__assert_fail@plt+0x3974c>
   23bc8:	mov	r5, r0
   23bcc:	ldrb	r0, [r4, r0]
   23bd0:	cmp	r0, #47	; 0x2f
   23bd4:	addeq	r5, r5, #1
   23bd8:	b	23bec <__assert_fail@plt+0x1113c>
   23bdc:	mov	r0, r6
   23be0:	bl	4c1fc <__assert_fail@plt+0x3974c>
   23be4:	mov	r5, r0
   23be8:	mov	r4, r6
   23bec:	add	r0, r5, #1
   23bf0:	bl	30700 <__assert_fail@plt+0x1dc50>
   23bf4:	mov	r1, r4
   23bf8:	mov	r2, r5
   23bfc:	mov	r6, r0
   23c00:	bl	124e0 <memcpy@plt>
   23c04:	mov	r0, #0
   23c08:	strb	r0, [r6, r5]
   23c0c:	mov	r0, r6
   23c10:	pop	{r4, r5, r6, sl, fp, pc}
   23c14:	push	{r4, r5, r6, sl, fp, lr}
   23c18:	add	fp, sp, #16
   23c1c:	mov	r5, r0
   23c20:	mov	r4, r0
   23c24:	ldrb	r6, [r5], #-1
   23c28:	bl	4c19c <__assert_fail@plt+0x396ec>
   23c2c:	sub	r2, r0, r4
   23c30:	sub	r0, r6, #47	; 0x2f
   23c34:	clz	r0, r0
   23c38:	lsr	r1, r0, #5
   23c3c:	mov	r0, r2
   23c40:	cmp	r2, r1
   23c44:	bls	23c58 <__assert_fail@plt+0x111a8>
   23c48:	ldrb	r3, [r5, r0]
   23c4c:	sub	r2, r0, #1
   23c50:	cmp	r3, #47	; 0x2f
   23c54:	beq	23c3c <__assert_fail@plt+0x1118c>
   23c58:	pop	{r4, r5, r6, sl, fp, pc}
   23c5c:	push	{r4, r5, r6, sl, fp, lr}
   23c60:	add	fp, sp, #16
   23c64:	mov	r6, r0
   23c68:	mov	r4, r0
   23c6c:	ldrb	r5, [r6], #-1
   23c70:	bl	4c19c <__assert_fail@plt+0x396ec>
   23c74:	sub	r1, r0, r4
   23c78:	sub	r0, r5, #47	; 0x2f
   23c7c:	clz	r0, r0
   23c80:	lsr	r0, r0, #5
   23c84:	mov	r5, r1
   23c88:	cmp	r1, r0
   23c8c:	bls	23ca0 <__assert_fail@plt+0x111f0>
   23c90:	ldrb	r2, [r6, r5]
   23c94:	sub	r1, r5, #1
   23c98:	cmp	r2, #47	; 0x2f
   23c9c:	beq	23c84 <__assert_fail@plt+0x111d4>
   23ca0:	cmp	r5, #0
   23ca4:	mov	r0, r5
   23ca8:	addeq	r0, r0, #1
   23cac:	add	r0, r0, #1
   23cb0:	bl	35350 <__assert_fail@plt+0x228a0>
   23cb4:	mov	r6, r0
   23cb8:	cmp	r0, #0
   23cbc:	beq	23ce8 <__assert_fail@plt+0x11238>
   23cc0:	mov	r0, r6
   23cc4:	mov	r1, r4
   23cc8:	mov	r2, r5
   23ccc:	bl	124e0 <memcpy@plt>
   23cd0:	cmp	r5, #0
   23cd4:	moveq	r0, #46	; 0x2e
   23cd8:	moveq	r5, #1
   23cdc:	strbeq	r0, [r6]
   23ce0:	mov	r0, #0
   23ce4:	strb	r0, [r6, r5]
   23ce8:	mov	r0, r6
   23cec:	pop	{r4, r5, r6, sl, fp, pc}
   23cf0:	push	{r4, r5, fp, lr}
   23cf4:	add	fp, sp, #8
   23cf8:	mov	r4, r0
   23cfc:	bl	4c19c <__assert_fail@plt+0x396ec>
   23d00:	mov	r5, r0
   23d04:	ldrb	r0, [r0]
   23d08:	cmp	r0, #0
   23d0c:	moveq	r5, r4
   23d10:	mov	r0, r5
   23d14:	bl	4c1fc <__assert_fail@plt+0x3974c>
   23d18:	ldrb	r1, [r5, r0]
   23d1c:	mov	r2, #0
   23d20:	strb	r2, [r5, r0]
   23d24:	cmp	r1, #0
   23d28:	movwne	r1, #1
   23d2c:	mov	r0, r1
   23d30:	pop	{r4, r5, fp, pc}
   23d34:	sub	sp, sp, #8
   23d38:	push	{fp, lr}
   23d3c:	mov	fp, sp
   23d40:	sub	sp, sp, #8
   23d44:	str	r2, [fp, #8]
   23d48:	str	r3, [fp, #12]
   23d4c:	tst	r1, #64	; 0x40
   23d50:	mov	r2, #0
   23d54:	ldrne	r2, [fp, #8]
   23d58:	bl	126cc <open64@plt>
   23d5c:	bl	2ffe8 <__assert_fail@plt+0x1d538>
   23d60:	mov	sp, fp
   23d64:	pop	{fp, lr}
   23d68:	add	sp, sp, #8
   23d6c:	bx	lr
   23d70:	push	{fp, lr}
   23d74:	mov	fp, sp
   23d78:	and	r2, r0, #61440	; 0xf000
   23d7c:	sub	r2, r2, #4096	; 0x1000
   23d80:	lsr	r3, r2, #12
   23d84:	cmp	r3, #11
   23d88:	bhi	23dd8 <__assert_fail@plt+0x11328>
   23d8c:	add	r2, pc, #4
   23d90:	mov	ip, #45	; 0x2d
   23d94:	ldr	pc, [r2, r3, lsl #2]
   23d98:	andeq	r3, r2, r8, asr #27
   23d9c:	ldrdeq	r3, [r2], -r0
   23da0:	ldrdeq	r3, [r2], -r8
   23da4:	andeq	r3, r2, r0, ror #27
   23da8:	ldrdeq	r3, [r2], -r8
   23dac:	strdeq	r3, [r2], -r8
   23db0:	ldrdeq	r3, [r2], -r8
   23db4:	strdeq	r3, [r2], -ip
   23db8:	ldrdeq	r3, [r2], -r8
   23dbc:	andeq	r3, r2, r8, ror #27
   23dc0:	ldrdeq	r3, [r2], -r8
   23dc4:	strdeq	r3, [r2], -r0
   23dc8:	mov	ip, #112	; 0x70
   23dcc:	b	23dfc <__assert_fail@plt+0x1134c>
   23dd0:	mov	ip, #99	; 0x63
   23dd4:	b	23dfc <__assert_fail@plt+0x1134c>
   23dd8:	mov	ip, #63	; 0x3f
   23ddc:	b	23dfc <__assert_fail@plt+0x1134c>
   23de0:	mov	ip, #100	; 0x64
   23de4:	b	23dfc <__assert_fail@plt+0x1134c>
   23de8:	mov	ip, #108	; 0x6c
   23dec:	b	23dfc <__assert_fail@plt+0x1134c>
   23df0:	mov	ip, #115	; 0x73
   23df4:	b	23dfc <__assert_fail@plt+0x1134c>
   23df8:	mov	ip, #98	; 0x62
   23dfc:	tst	r0, #2
   23e00:	mov	r3, #119	; 0x77
   23e04:	mov	r2, #32
   23e08:	mov	lr, #45	; 0x2d
   23e0c:	movweq	r3, #45	; 0x2d
   23e10:	tst	r0, #4
   23e14:	strh	r2, [r1, #10]
   23e18:	mov	r2, #114	; 0x72
   23e1c:	strb	ip, [r1]
   23e20:	mov	ip, #119	; 0x77
   23e24:	movweq	r2, #45	; 0x2d
   23e28:	tst	r0, #16
   23e2c:	strb	r3, [r1, #8]
   23e30:	mov	r3, #114	; 0x72
   23e34:	strb	r2, [r1, #7]
   23e38:	mov	r2, #119	; 0x77
   23e3c:	movweq	r2, #45	; 0x2d
   23e40:	tst	r0, #32
   23e44:	strb	r2, [r1, #5]
   23e48:	mov	r2, #114	; 0x72
   23e4c:	movweq	r2, #45	; 0x2d
   23e50:	tst	r0, #128	; 0x80
   23e54:	movweq	ip, #45	; 0x2d
   23e58:	tst	r0, #256	; 0x100
   23e5c:	strb	r2, [r1, #4]
   23e60:	movweq	r3, #45	; 0x2d
   23e64:	ands	r2, r0, #1
   23e68:	strb	ip, [r1, #2]
   23e6c:	mov	r2, #84	; 0x54
   23e70:	mov	ip, #45	; 0x2d
   23e74:	strb	r3, [r1, #1]
   23e78:	mov	r3, #45	; 0x2d
   23e7c:	movwne	r3, #120	; 0x78
   23e80:	movwne	r2, #116	; 0x74
   23e84:	tst	r0, #512	; 0x200
   23e88:	moveq	r2, r3
   23e8c:	mov	r3, #83	; 0x53
   23e90:	strb	r2, [r1, #9]
   23e94:	ands	r2, r0, #8
   23e98:	mov	r2, #83	; 0x53
   23e9c:	movwne	lr, #120	; 0x78
   23ea0:	movwne	r2, #115	; 0x73
   23ea4:	tst	r0, #1024	; 0x400
   23ea8:	moveq	r2, lr
   23eac:	strb	r2, [r1, #6]
   23eb0:	ands	r2, r0, #64	; 0x40
   23eb4:	movwne	ip, #120	; 0x78
   23eb8:	movwne	r3, #115	; 0x73
   23ebc:	tst	r0, #2048	; 0x800
   23ec0:	moveq	r3, ip
   23ec4:	strb	r3, [r1, #3]
   23ec8:	pop	{fp, pc}
   23ecc:	ldr	r0, [r0, #16]
   23ed0:	b	23d70 <__assert_fail@plt+0x112c0>
   23ed4:	push	{r4, r5, r6, r7, fp, lr}
   23ed8:	add	fp, sp, #16
   23edc:	mov	r5, r1
   23ee0:	bl	129c0 <fopen64@plt>
   23ee4:	mov	r4, #0
   23ee8:	cmp	r0, #0
   23eec:	beq	23f54 <__assert_fail@plt+0x114a4>
   23ef0:	mov	r6, r0
   23ef4:	bl	1287c <fileno@plt>
   23ef8:	cmp	r0, #2
   23efc:	bhi	23f5c <__assert_fail@plt+0x114ac>
   23f00:	bl	2ffdc <__assert_fail@plt+0x1d52c>
   23f04:	cmn	r0, #1
   23f08:	ble	23f64 <__assert_fail@plt+0x114b4>
   23f0c:	mov	r7, r0
   23f10:	mov	r0, r6
   23f14:	bl	128b8 <fclose@plt>
   23f18:	cmp	r0, #0
   23f1c:	bne	23f38 <__assert_fail@plt+0x11488>
   23f20:	mov	r0, r7
   23f24:	mov	r1, r5
   23f28:	bl	1236c <fdopen@plt>
   23f2c:	mov	r4, r0
   23f30:	cmp	r0, #0
   23f34:	bne	23f54 <__assert_fail@plt+0x114a4>
   23f38:	bl	12804 <__errno_location@plt>
   23f3c:	ldr	r5, [r0]
   23f40:	mov	r4, r0
   23f44:	mov	r0, r7
   23f48:	bl	12a68 <close@plt>
   23f4c:	str	r5, [r4]
   23f50:	mov	r4, #0
   23f54:	mov	r0, r4
   23f58:	pop	{r4, r5, r6, r7, fp, pc}
   23f5c:	mov	r0, r6
   23f60:	pop	{r4, r5, r6, r7, fp, pc}
   23f64:	bl	12804 <__errno_location@plt>
   23f68:	ldr	r7, [r0]
   23f6c:	mov	r5, r0
   23f70:	mov	r0, r6
   23f74:	bl	128b8 <fclose@plt>
   23f78:	mov	r0, r4
   23f7c:	str	r7, [r5]
   23f80:	pop	{r4, r5, r6, r7, fp, pc}
   23f84:	andeq	r0, r0, r0
   23f88:	ldr	r0, [r0, #8]
   23f8c:	bx	lr
   23f90:	ldr	r0, [r0, #12]
   23f94:	bx	lr
   23f98:	ldr	r0, [r0, #16]
   23f9c:	bx	lr
   23fa0:	ldm	r0, {r2, ip}
   23fa4:	mov	r0, #0
   23fa8:	cmp	r2, ip
   23fac:	bxcs	lr
   23fb0:	mov	r0, #0
   23fb4:	ldr	r1, [r2]
   23fb8:	cmp	r1, #0
   23fbc:	bne	23fd8 <__assert_fail@plt+0x11528>
   23fc0:	add	r2, r2, #8
   23fc4:	cmp	r2, ip
   23fc8:	bcs	24004 <__assert_fail@plt+0x11554>
   23fcc:	ldr	r1, [r2]
   23fd0:	cmp	r1, #0
   23fd4:	beq	23fc0 <__assert_fail@plt+0x11510>
   23fd8:	mov	r3, #0
   23fdc:	mov	r1, r2
   23fe0:	ldr	r1, [r1, #4]
   23fe4:	add	r3, r3, #1
   23fe8:	cmp	r1, #0
   23fec:	bne	23fe0 <__assert_fail@plt+0x11530>
   23ff0:	cmp	r3, r0
   23ff4:	movhi	r0, r3
   23ff8:	add	r2, r2, #8
   23ffc:	cmp	r2, ip
   24000:	bcc	23fcc <__assert_fail@plt+0x1151c>
   24004:	bx	lr
   24008:	push	{fp, lr}
   2400c:	mov	fp, sp
   24010:	ldm	r0, {r3, ip}
   24014:	mov	lr, #0
   24018:	mov	r1, #0
   2401c:	cmp	r3, ip
   24020:	bcs	24074 <__assert_fail@plt+0x115c4>
   24024:	mov	r1, #0
   24028:	mov	lr, #0
   2402c:	ldr	r2, [r3]
   24030:	cmp	r2, #0
   24034:	bne	24050 <__assert_fail@plt+0x115a0>
   24038:	add	r3, r3, #8
   2403c:	cmp	r3, ip
   24040:	bcs	24074 <__assert_fail@plt+0x115c4>
   24044:	ldr	r2, [r3]
   24048:	cmp	r2, #0
   2404c:	beq	24038 <__assert_fail@plt+0x11588>
   24050:	mov	r2, r3
   24054:	ldr	r2, [r2, #4]
   24058:	add	r1, r1, #1
   2405c:	cmp	r2, #0
   24060:	bne	24054 <__assert_fail@plt+0x115a4>
   24064:	add	lr, lr, #1
   24068:	add	r3, r3, #8
   2406c:	cmp	r3, ip
   24070:	bcc	24044 <__assert_fail@plt+0x11594>
   24074:	ldr	r2, [r0, #12]
   24078:	cmp	lr, r2
   2407c:	bne	24094 <__assert_fail@plt+0x115e4>
   24080:	ldr	r2, [r0, #16]
   24084:	mov	r0, #1
   24088:	cmp	r1, r2
   2408c:	movne	r0, #0
   24090:	pop	{fp, pc}
   24094:	mov	r0, #0
   24098:	pop	{fp, pc}
   2409c:	nop	{0}
   240a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   240a4:	add	fp, sp, #24
   240a8:	sub	sp, sp, #8
   240ac:	ldr	r6, [r0]
   240b0:	ldmib	r0, {r3, r7, r8}
   240b4:	ldr	r2, [r0, #16]
   240b8:	mov	r4, r1
   240bc:	mov	r5, #0
   240c0:	cmp	r6, r3
   240c4:	bcs	2411c <__assert_fail@plt+0x1166c>
   240c8:	mov	r5, #0
   240cc:	ldr	r0, [r6]
   240d0:	cmp	r0, #0
   240d4:	bne	240f0 <__assert_fail@plt+0x11640>
   240d8:	add	r6, r6, #8
   240dc:	cmp	r6, r3
   240e0:	bcs	2411c <__assert_fail@plt+0x1166c>
   240e4:	ldr	r0, [r6]
   240e8:	cmp	r0, #0
   240ec:	beq	240d8 <__assert_fail@plt+0x11628>
   240f0:	mov	r0, #0
   240f4:	mov	r1, r6
   240f8:	ldr	r1, [r1, #4]
   240fc:	add	r0, r0, #1
   24100:	cmp	r1, #0
   24104:	bne	240f8 <__assert_fail@plt+0x11648>
   24108:	cmp	r0, r5
   2410c:	movhi	r5, r0
   24110:	add	r6, r6, #8
   24114:	cmp	r6, r3
   24118:	bcc	240e4 <__assert_fail@plt+0x11634>
   2411c:	movw	r1, #6733	; 0x1a4d
   24120:	mov	r0, r4
   24124:	movt	r1, #5
   24128:	bl	127f8 <fprintf@plt>
   2412c:	movw	r1, #6757	; 0x1a65
   24130:	mov	r0, r4
   24134:	mov	r2, r7
   24138:	movt	r1, #5
   2413c:	bl	127f8 <fprintf@plt>
   24140:	vmov	s0, r8
   24144:	vldr	d16, [pc, #68]	; 24190 <__assert_fail@plt+0x116e0>
   24148:	movw	r1, #6781	; 0x1a7d
   2414c:	mov	r0, r4
   24150:	mov	r2, r8
   24154:	movt	r1, #5
   24158:	vcvt.f64.u32	d17, s0
   2415c:	vmov	s0, r7
   24160:	vcvt.f64.u32	d18, s0
   24164:	vmul.f64	d16, d17, d16
   24168:	vdiv.f64	d16, d16, d18
   2416c:	vstr	d16, [sp]
   24170:	bl	127f8 <fprintf@plt>
   24174:	movw	r1, #6814	; 0x1a9e
   24178:	mov	r0, r4
   2417c:	mov	r2, r5
   24180:	movt	r1, #5
   24184:	sub	sp, fp, #24
   24188:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2418c:	b	127f8 <fprintf@plt>
   24190:	andeq	r0, r0, r0
   24194:	subsmi	r0, r9, r0
   24198:	push	{r4, r5, r6, r7, fp, lr}
   2419c:	add	fp, sp, #16
   241a0:	mov	r4, r1
   241a4:	ldr	r1, [r0, #8]
   241a8:	ldr	r2, [r0, #24]
   241ac:	mov	r5, r0
   241b0:	mov	r0, r4
   241b4:	blx	r2
   241b8:	ldr	r1, [r5, #8]
   241bc:	cmp	r0, r1
   241c0:	bcs	24228 <__assert_fail@plt+0x11778>
   241c4:	ldr	r7, [r5]
   241c8:	mov	r6, #0
   241cc:	ldr	r1, [r7, r0, lsl #3]!
   241d0:	cmp	r1, #0
   241d4:	cmpne	r7, #0
   241d8:	bne	24208 <__assert_fail@plt+0x11758>
   241dc:	mov	r0, r6
   241e0:	pop	{r4, r5, r6, r7, fp, pc}
   241e4:	ldr	r2, [r5, #28]
   241e8:	mov	r0, r4
   241ec:	blx	r2
   241f0:	cmp	r0, #0
   241f4:	bne	2421c <__assert_fail@plt+0x1176c>
   241f8:	ldr	r7, [r7, #4]
   241fc:	cmp	r7, #0
   24200:	beq	241dc <__assert_fail@plt+0x1172c>
   24204:	ldr	r1, [r7]
   24208:	cmp	r1, r4
   2420c:	bne	241e4 <__assert_fail@plt+0x11734>
   24210:	mov	r6, r4
   24214:	mov	r0, r6
   24218:	pop	{r4, r5, r6, r7, fp, pc}
   2421c:	ldr	r6, [r7]
   24220:	mov	r0, r6
   24224:	pop	{r4, r5, r6, r7, fp, pc}
   24228:	bl	12a5c <abort@plt>
   2422c:	push	{fp, lr}
   24230:	mov	fp, sp
   24234:	ldr	r1, [r0, #16]
   24238:	cmp	r1, #0
   2423c:	beq	2425c <__assert_fail@plt+0x117ac>
   24240:	ldm	r0, {r1, r2}
   24244:	cmp	r1, r2
   24248:	bcs	24264 <__assert_fail@plt+0x117b4>
   2424c:	ldr	r0, [r1], #8
   24250:	cmp	r0, #0
   24254:	beq	24244 <__assert_fail@plt+0x11794>
   24258:	pop	{fp, pc}
   2425c:	mov	r0, #0
   24260:	pop	{fp, pc}
   24264:	bl	12a5c <abort@plt>
   24268:	push	{r4, r5, fp, lr}
   2426c:	add	fp, sp, #8
   24270:	mov	r5, r1
   24274:	ldr	r1, [r0, #8]
   24278:	ldr	r2, [r0, #24]
   2427c:	mov	r4, r0
   24280:	mov	r0, r5
   24284:	blx	r2
   24288:	ldr	r1, [r4, #8]
   2428c:	cmp	r0, r1
   24290:	bcs	242f4 <__assert_fail@plt+0x11844>
   24294:	ldr	r1, [r4]
   24298:	add	r2, r1, r0, lsl #3
   2429c:	ldr	r3, [r2]
   242a0:	ldr	r2, [r2, #4]
   242a4:	cmp	r3, r5
   242a8:	beq	242b8 <__assert_fail@plt+0x11808>
   242ac:	cmp	r2, #0
   242b0:	bne	2429c <__assert_fail@plt+0x117ec>
   242b4:	b	242c8 <__assert_fail@plt+0x11818>
   242b8:	cmp	r2, #0
   242bc:	beq	242c8 <__assert_fail@plt+0x11818>
   242c0:	ldr	r0, [r2]
   242c4:	pop	{r4, r5, fp, pc}
   242c8:	ldr	r2, [r4, #4]
   242cc:	add	r0, r1, r0, lsl #3
   242d0:	add	r1, r0, #8
   242d4:	cmp	r1, r2
   242d8:	bcs	242ec <__assert_fail@plt+0x1183c>
   242dc:	ldr	r0, [r1], #8
   242e0:	cmp	r0, #0
   242e4:	beq	242d4 <__assert_fail@plt+0x11824>
   242e8:	pop	{r4, r5, fp, pc}
   242ec:	mov	r0, #0
   242f0:	pop	{r4, r5, fp, pc}
   242f4:	bl	12a5c <abort@plt>
   242f8:	push	{r4, r5, fp, lr}
   242fc:	add	fp, sp, #8
   24300:	ldm	r0, {r5, lr}
   24304:	mov	ip, r0
   24308:	mov	r0, #0
   2430c:	cmp	r5, lr
   24310:	popcs	{r4, r5, fp, pc}
   24314:	mov	r0, #0
   24318:	ldr	r3, [r5]
   2431c:	cmp	r3, #0
   24320:	cmpne	r5, #0
   24324:	beq	24330 <__assert_fail@plt+0x11880>
   24328:	b	2434c <__assert_fail@plt+0x1189c>
   2432c:	ldr	lr, [ip, #4]
   24330:	add	r5, r5, #8
   24334:	cmp	r5, lr
   24338:	bcs	24374 <__assert_fail@plt+0x118c4>
   2433c:	ldr	r3, [r5]
   24340:	cmp	r3, #0
   24344:	cmpne	r5, #0
   24348:	beq	24330 <__assert_fail@plt+0x11880>
   2434c:	mov	r3, r5
   24350:	cmp	r0, r2
   24354:	bcs	24374 <__assert_fail@plt+0x118c4>
   24358:	ldr	r4, [r3]
   2435c:	str	r4, [r1, r0, lsl #2]
   24360:	add	r0, r0, #1
   24364:	ldr	r3, [r3, #4]
   24368:	cmp	r3, #0
   2436c:	bne	24350 <__assert_fail@plt+0x118a0>
   24370:	b	2432c <__assert_fail@plt+0x1187c>
   24374:	pop	{r4, r5, fp, pc}
   24378:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2437c:	add	fp, sp, #24
   24380:	mov	r5, r1
   24384:	ldr	r4, [r0]
   24388:	ldr	r1, [r0, #4]
   2438c:	mov	r6, #0
   24390:	cmp	r4, r1
   24394:	bcs	24410 <__assert_fail@plt+0x11960>
   24398:	mov	r9, r2
   2439c:	mov	r8, r0
   243a0:	mov	r6, #0
   243a4:	ldr	r0, [r4]
   243a8:	cmp	r0, #0
   243ac:	cmpne	r4, #0
   243b0:	beq	243bc <__assert_fail@plt+0x1190c>
   243b4:	b	243d8 <__assert_fail@plt+0x11928>
   243b8:	ldr	r1, [r8, #4]
   243bc:	add	r4, r4, #8
   243c0:	cmp	r4, r1
   243c4:	bcs	24410 <__assert_fail@plt+0x11960>
   243c8:	ldr	r0, [r4]
   243cc:	cmp	r0, #0
   243d0:	cmpne	r4, #0
   243d4:	beq	243bc <__assert_fail@plt+0x1190c>
   243d8:	mov	r1, r9
   243dc:	blx	r5
   243e0:	cmp	r0, #0
   243e4:	beq	24410 <__assert_fail@plt+0x11960>
   243e8:	mov	r7, r4
   243ec:	ldr	r7, [r7, #4]
   243f0:	add	r6, r6, #1
   243f4:	cmp	r7, #0
   243f8:	beq	243b8 <__assert_fail@plt+0x11908>
   243fc:	ldr	r0, [r7]
   24400:	mov	r1, r9
   24404:	blx	r5
   24408:	cmp	r0, #0
   2440c:	bne	243ec <__assert_fail@plt+0x1193c>
   24410:	mov	r0, r6
   24414:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24418:	ldrb	r2, [r0]
   2441c:	cmp	r2, #0
   24420:	moveq	r0, #0
   24424:	bxeq	lr
   24428:	add	r3, r0, #1
   2442c:	mov	r0, #0
   24430:	rsb	r0, r0, r0, lsl #5
   24434:	uxtab	r0, r0, r2
   24438:	udiv	r2, r0, r1
   2443c:	mls	r0, r2, r1, r0
   24440:	ldrb	r2, [r3], #1
   24444:	cmp	r2, #0
   24448:	bne	24430 <__assert_fail@plt+0x11980>
   2444c:	bx	lr
   24450:	movw	r1, #6840	; 0x1ab8
   24454:	movt	r1, #5
   24458:	vld1.32	{d16-d17}, [r1]!
   2445c:	ldr	r1, [r1]
   24460:	vst1.32	{d16-d17}, [r0]!
   24464:	str	r1, [r0]
   24468:	bx	lr
   2446c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24470:	add	fp, sp, #24
   24474:	movw	r9, #18080	; 0x46a0
   24478:	cmp	r3, #0
   2447c:	movw	r5, #18060	; 0x468c
   24480:	mov	r6, r0
   24484:	mov	r0, #40	; 0x28
   24488:	mov	r7, r1
   2448c:	movt	r9, #2
   24490:	movne	r9, r3
   24494:	cmp	r2, #0
   24498:	movt	r5, #2
   2449c:	movne	r5, r2
   244a0:	bl	35350 <__assert_fail@plt+0x228a0>
   244a4:	mov	r8, #0
   244a8:	cmp	r0, #0
   244ac:	beq	24674 <__assert_fail@plt+0x11bc4>
   244b0:	mov	r4, r0
   244b4:	movw	r0, #6840	; 0x1ab8
   244b8:	cmp	r7, #0
   244bc:	movt	r0, #5
   244c0:	moveq	r7, r0
   244c4:	cmp	r7, r0
   244c8:	str	r7, [r4, #20]
   244cc:	beq	24548 <__assert_fail@plt+0x11a98>
   244d0:	vldr	s2, [pc, #420]	; 2467c <__assert_fail@plt+0x11bcc>
   244d4:	vldr	s0, [r7, #8]
   244d8:	vcmpe.f32	s0, s2
   244dc:	vmrs	APSR_nzcv, fpscr
   244e0:	ble	245f4 <__assert_fail@plt+0x11b44>
   244e4:	vldr	s4, [pc, #404]	; 24680 <__assert_fail@plt+0x11bd0>
   244e8:	vcmpe.f32	s0, s4
   244ec:	vmrs	APSR_nzcv, fpscr
   244f0:	bpl	245f4 <__assert_fail@plt+0x11b44>
   244f4:	vldr	s4, [pc, #392]	; 24684 <__assert_fail@plt+0x11bd4>
   244f8:	vldr	s6, [r7, #12]
   244fc:	vcmpe.f32	s6, s4
   24500:	vmrs	APSR_nzcv, fpscr
   24504:	ble	245f4 <__assert_fail@plt+0x11b44>
   24508:	vldr	s4, [r7]
   2450c:	vcmpe.f32	s4, #0.0
   24510:	vmrs	APSR_nzcv, fpscr
   24514:	blt	245f4 <__assert_fail@plt+0x11b44>
   24518:	vadd.f32	s2, s4, s2
   2451c:	vcmpe.f32	s2, s0
   24520:	vmrs	APSR_nzcv, fpscr
   24524:	bpl	245f4 <__assert_fail@plt+0x11b44>
   24528:	vldr	s0, [r7, #4]
   2452c:	vmov.f32	s4, #112	; 0x3f800000  1.0
   24530:	vcmpe.f32	s0, s4
   24534:	vmrs	APSR_nzcv, fpscr
   24538:	bhi	245f4 <__assert_fail@plt+0x11b44>
   2453c:	vcmpe.f32	s2, s0
   24540:	vmrs	APSR_nzcv, fpscr
   24544:	bpl	245f4 <__assert_fail@plt+0x11b44>
   24548:	ldrb	r0, [r7, #16]
   2454c:	cmp	r0, #0
   24550:	bne	2457c <__assert_fail@plt+0x11acc>
   24554:	vmov	s2, r6
   24558:	vldr	s0, [r7, #8]
   2455c:	vldr	s4, [pc, #292]	; 24688 <__assert_fail@plt+0x11bd8>
   24560:	vcvt.f32.u32	s2, s2
   24564:	vdiv.f32	s2, s2, s0
   24568:	vcvt.u32.f32	s0, s2
   2456c:	vcmpe.f32	s2, s4
   24570:	vmrs	APSR_nzcv, fpscr
   24574:	bge	24610 <__assert_fail@plt+0x11b60>
   24578:	vmov	r6, s0
   2457c:	cmp	r6, #10
   24580:	movls	r6, #10
   24584:	orr	r0, r6, #1
   24588:	cmn	r0, #1
   2458c:	beq	24610 <__assert_fail@plt+0x11b60>
   24590:	ldr	r6, [fp, #8]
   24594:	mov	r1, #3
   24598:	cmp	r0, #10
   2459c:	bcc	245d4 <__assert_fail@plt+0x11b24>
   245a0:	mov	r1, #3
   245a4:	mov	r3, #9
   245a8:	mov	r2, #12
   245ac:	udiv	r7, r0, r1
   245b0:	mls	r7, r7, r1, r0
   245b4:	cmp	r7, #0
   245b8:	beq	245d4 <__assert_fail@plt+0x11b24>
   245bc:	add	r3, r3, r2
   245c0:	add	r2, r2, #8
   245c4:	add	r1, r1, #2
   245c8:	add	r3, r3, #4
   245cc:	cmp	r3, r0
   245d0:	bcc	245ac <__assert_fail@plt+0x11afc>
   245d4:	udiv	r2, r0, r1
   245d8:	mls	r1, r2, r1, r0
   245dc:	cmp	r1, #0
   245e0:	bne	24608 <__assert_fail@plt+0x11b58>
   245e4:	add	r0, r0, #2
   245e8:	cmn	r0, #1
   245ec:	bne	24594 <__assert_fail@plt+0x11ae4>
   245f0:	b	24610 <__assert_fail@plt+0x11b60>
   245f4:	str	r0, [r4, #20]
   245f8:	mov	r0, r4
   245fc:	bl	32910 <__assert_fail@plt+0x1fe60>
   24600:	mov	r0, r8
   24604:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24608:	cmp	r0, #536870912	; 0x20000000
   2460c:	bcc	24628 <__assert_fail@plt+0x11b78>
   24610:	mov	r0, #0
   24614:	str	r0, [r4, #8]
   24618:	mov	r0, r4
   2461c:	bl	32910 <__assert_fail@plt+0x1fe60>
   24620:	mov	r0, r8
   24624:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24628:	cmp	r0, #0
   2462c:	str	r0, [r4, #8]
   24630:	beq	24618 <__assert_fail@plt+0x11b68>
   24634:	mov	r1, #8
   24638:	bl	322c0 <__assert_fail@plt+0x1f810>
   2463c:	cmp	r0, #0
   24640:	str	r0, [r4]
   24644:	beq	24618 <__assert_fail@plt+0x11b68>
   24648:	mov	r1, #0
   2464c:	str	r5, [r4, #24]
   24650:	str	r9, [r4, #28]
   24654:	str	r6, [r4, #32]
   24658:	mov	r8, r4
   2465c:	str	r1, [r4, #36]	; 0x24
   24660:	str	r1, [r4, #12]
   24664:	str	r1, [r4, #16]
   24668:	ldr	r1, [r4, #8]
   2466c:	add	r0, r0, r1, lsl #3
   24670:	str	r0, [r4, #4]
   24674:	mov	r0, r8
   24678:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2467c:	stclcc	12, cr12, [ip, #820]	; 0x334
   24680:	svccc	0x00666666
   24684:	svccc	0x008ccccd
   24688:	svcmi	0x00800000
   2468c:	ror	r2, r0, #3
   24690:	udiv	r2, r2, r1
   24694:	mul	r1, r2, r1
   24698:	rsb	r0, r1, r0, ror #3
   2469c:	bx	lr
   246a0:	sub	r0, r0, r1
   246a4:	clz	r0, r0
   246a8:	lsr	r0, r0, #5
   246ac:	bx	lr
   246b0:	push	{r4, r5, r6, r7, fp, lr}
   246b4:	add	fp, sp, #16
   246b8:	mov	r4, r0
   246bc:	ldr	r5, [r0]
   246c0:	ldr	r0, [r0, #4]
   246c4:	cmp	r5, r0
   246c8:	bcs	24778 <__assert_fail@plt+0x11cc8>
   246cc:	mov	r6, #0
   246d0:	ldr	r1, [r5]
   246d4:	cmp	r1, #0
   246d8:	bne	24704 <__assert_fail@plt+0x11c54>
   246dc:	b	246ec <__assert_fail@plt+0x11c3c>
   246e0:	str	r6, [r5]
   246e4:	str	r6, [r5, #4]
   246e8:	ldr	r0, [r4, #4]
   246ec:	add	r5, r5, #8
   246f0:	cmp	r5, r0
   246f4:	bcs	24778 <__assert_fail@plt+0x11cc8>
   246f8:	ldr	r1, [r5]
   246fc:	cmp	r1, #0
   24700:	beq	246ec <__assert_fail@plt+0x11c3c>
   24704:	ldr	r1, [r4, #32]
   24708:	ldr	r7, [r5, #4]
   2470c:	cmp	r1, #0
   24710:	mov	r0, r1
   24714:	movwne	r0, #1
   24718:	cmp	r7, #0
   2471c:	bne	24760 <__assert_fail@plt+0x11cb0>
   24720:	cmp	r0, #0
   24724:	beq	246e0 <__assert_fail@plt+0x11c30>
   24728:	ldr	r0, [r5]
   2472c:	blx	r1
   24730:	b	246e0 <__assert_fail@plt+0x11c30>
   24734:	str	r6, [r7]
   24738:	cmp	r1, #0
   2473c:	ldr	r2, [r7, #4]
   24740:	ldr	r0, [r4, #36]	; 0x24
   24744:	str	r0, [r7, #4]
   24748:	mov	r0, r1
   2474c:	str	r7, [r4, #36]	; 0x24
   24750:	movwne	r0, #1
   24754:	cmp	r2, #0
   24758:	mov	r7, r2
   2475c:	beq	24720 <__assert_fail@plt+0x11c70>
   24760:	tst	r0, #1
   24764:	beq	24734 <__assert_fail@plt+0x11c84>
   24768:	ldr	r0, [r7]
   2476c:	blx	r1
   24770:	ldr	r1, [r4, #32]
   24774:	b	24734 <__assert_fail@plt+0x11c84>
   24778:	mov	r0, #0
   2477c:	str	r0, [r4, #12]
   24780:	str	r0, [r4, #16]
   24784:	pop	{r4, r5, r6, r7, fp, pc}
   24788:	push	{r4, r5, r6, sl, fp, lr}
   2478c:	add	fp, sp, #16
   24790:	mov	r4, r0
   24794:	ldr	r0, [r0, #32]
   24798:	cmp	r0, #0
   2479c:	beq	24810 <__assert_fail@plt+0x11d60>
   247a0:	ldr	r0, [r4, #16]
   247a4:	cmp	r0, #0
   247a8:	beq	24810 <__assert_fail@plt+0x11d60>
   247ac:	ldr	r5, [r4]
   247b0:	ldr	r1, [r4, #4]
   247b4:	cmp	r5, r1
   247b8:	bcc	247d0 <__assert_fail@plt+0x11d20>
   247bc:	b	24810 <__assert_fail@plt+0x11d60>
   247c0:	ldr	r1, [r4, #4]
   247c4:	add	r5, r5, #8
   247c8:	cmp	r5, r1
   247cc:	bcs	24810 <__assert_fail@plt+0x11d60>
   247d0:	ldr	r0, [r5]
   247d4:	cmp	r0, #0
   247d8:	cmpne	r5, #0
   247dc:	beq	247c4 <__assert_fail@plt+0x11d14>
   247e0:	ldr	r1, [r4, #32]
   247e4:	blx	r1
   247e8:	ldr	r6, [r5, #4]
   247ec:	cmp	r6, #0
   247f0:	beq	247c0 <__assert_fail@plt+0x11d10>
   247f4:	ldr	r1, [r4, #32]
   247f8:	ldr	r0, [r6]
   247fc:	blx	r1
   24800:	ldr	r6, [r6, #4]
   24804:	cmp	r6, #0
   24808:	bne	247f4 <__assert_fail@plt+0x11d44>
   2480c:	b	247c0 <__assert_fail@plt+0x11d10>
   24810:	ldr	r5, [r4]
   24814:	ldr	r1, [r4, #4]
   24818:	cmp	r5, r1
   2481c:	bcc	24830 <__assert_fail@plt+0x11d80>
   24820:	b	24858 <__assert_fail@plt+0x11da8>
   24824:	add	r5, r5, #8
   24828:	cmp	r5, r1
   2482c:	bcs	24858 <__assert_fail@plt+0x11da8>
   24830:	ldr	r0, [r5, #4]
   24834:	cmp	r0, #0
   24838:	beq	24824 <__assert_fail@plt+0x11d74>
   2483c:	ldr	r6, [r0, #4]
   24840:	bl	32910 <__assert_fail@plt+0x1fe60>
   24844:	cmp	r6, #0
   24848:	mov	r0, r6
   2484c:	bne	2483c <__assert_fail@plt+0x11d8c>
   24850:	ldr	r1, [r4, #4]
   24854:	b	24824 <__assert_fail@plt+0x11d74>
   24858:	ldr	r0, [r4, #36]	; 0x24
   2485c:	cmp	r0, #0
   24860:	beq	24878 <__assert_fail@plt+0x11dc8>
   24864:	ldr	r5, [r0, #4]
   24868:	bl	32910 <__assert_fail@plt+0x1fe60>
   2486c:	cmp	r5, #0
   24870:	mov	r0, r5
   24874:	bne	24864 <__assert_fail@plt+0x11db4>
   24878:	ldr	r0, [r4]
   2487c:	bl	32910 <__assert_fail@plt+0x1fe60>
   24880:	mov	r0, r4
   24884:	pop	{r4, r5, r6, sl, fp, lr}
   24888:	b	32910 <__assert_fail@plt+0x1fe60>
   2488c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24890:	add	fp, sp, #28
   24894:	sub	sp, sp, #44	; 0x2c
   24898:	mov	r7, r0
   2489c:	mov	r4, r0
   248a0:	ldr	r0, [r7, #20]!
   248a4:	ldrb	r2, [r0, #16]
   248a8:	cmp	r2, #0
   248ac:	bne	248dc <__assert_fail@plt+0x11e2c>
   248b0:	vmov	s2, r1
   248b4:	vldr	s0, [r0, #8]
   248b8:	vldr	s4, [pc, #592]	; 24b10 <__assert_fail@plt+0x12060>
   248bc:	mov	r5, #0
   248c0:	vcvt.f32.u32	s2, s2
   248c4:	vdiv.f32	s2, s2, s0
   248c8:	vcvt.u32.f32	s0, s2
   248cc:	vcmpe.f32	s2, s4
   248d0:	vmrs	APSR_nzcv, fpscr
   248d4:	bge	24a00 <__assert_fail@plt+0x11f50>
   248d8:	vmov	r1, s0
   248dc:	cmp	r1, #10
   248e0:	mov	r5, #0
   248e4:	movls	r1, #10
   248e8:	orr	r6, r1, #1
   248ec:	cmn	r6, #1
   248f0:	beq	24a00 <__assert_fail@plt+0x11f50>
   248f4:	mov	r0, #3
   248f8:	cmp	r6, #10
   248fc:	bcc	24934 <__assert_fail@plt+0x11e84>
   24900:	mov	r0, #3
   24904:	mov	r2, #9
   24908:	mov	r1, #12
   2490c:	udiv	r3, r6, r0
   24910:	mls	r3, r3, r0, r6
   24914:	cmp	r3, #0
   24918:	beq	24934 <__assert_fail@plt+0x11e84>
   2491c:	add	r2, r2, r1
   24920:	add	r1, r1, #8
   24924:	add	r0, r0, #2
   24928:	add	r2, r2, #4
   2492c:	cmp	r2, r6
   24930:	bcc	2490c <__assert_fail@plt+0x11e5c>
   24934:	udiv	r1, r6, r0
   24938:	mls	r0, r1, r0, r6
   2493c:	cmp	r0, #0
   24940:	bne	24954 <__assert_fail@plt+0x11ea4>
   24944:	add	r6, r6, #2
   24948:	cmn	r6, #1
   2494c:	bne	248f4 <__assert_fail@plt+0x11e44>
   24950:	b	24a00 <__assert_fail@plt+0x11f50>
   24954:	sub	r0, r6, #1
   24958:	cmn	r0, #-536870910	; 0xe0000002
   2495c:	bhi	24a00 <__assert_fail@plt+0x11f50>
   24960:	ldr	r0, [r4, #8]
   24964:	cmp	r6, r0
   24968:	bne	2497c <__assert_fail@plt+0x11ecc>
   2496c:	mov	r5, #1
   24970:	mov	r0, r5
   24974:	sub	sp, fp, #28
   24978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2497c:	mov	r0, r6
   24980:	mov	r1, #8
   24984:	bl	322c0 <__assert_fail@plt+0x1f810>
   24988:	cmp	r0, #0
   2498c:	str	r0, [sp, #4]
   24990:	beq	24a00 <__assert_fail@plt+0x11f50>
   24994:	add	r0, r0, r6, lsl #3
   24998:	mov	r1, #0
   2499c:	add	r5, sp, #4
   249a0:	mov	sl, r4
   249a4:	mov	r2, #0
   249a8:	str	r1, [sp, #20]
   249ac:	str	r1, [sp, #16]
   249b0:	str	r6, [sp, #12]
   249b4:	mov	r1, r4
   249b8:	str	r0, [sp, #8]
   249bc:	add	r0, r5, #20
   249c0:	vld1.32	{d16-d17}, [r7]
   249c4:	vst1.32	{d16-d17}, [r0]
   249c8:	ldr	r0, [sl, #36]!	; 0x24
   249cc:	str	r0, [sp, #40]	; 0x28
   249d0:	mov	r0, r5
   249d4:	bl	24b14 <__assert_fail@plt+0x12064>
   249d8:	cmp	r0, #0
   249dc:	beq	24a0c <__assert_fail@plt+0x11f5c>
   249e0:	ldr	r0, [r4]
   249e4:	bl	32910 <__assert_fail@plt+0x1fe60>
   249e8:	mov	r0, #36	; 0x24
   249ec:	vld1.32	{d16-d17}, [r5], r0
   249f0:	vst1.32	{d16-d17}, [r4], r0
   249f4:	ldr	r0, [r5]
   249f8:	mov	r5, #1
   249fc:	str	r0, [r4]
   24a00:	mov	r0, r5
   24a04:	sub	sp, fp, #28
   24a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24a0c:	ldr	r0, [sp, #40]	; 0x28
   24a10:	str	r0, [sl]
   24a14:	ldr	r0, [sp, #8]
   24a18:	ldr	r8, [sp, #4]
   24a1c:	cmp	r8, r0
   24a20:	str	r0, [sp]
   24a24:	bcs	24adc <__assert_fail@plt+0x1202c>
   24a28:	mov	r9, #0
   24a2c:	ldr	r0, [r8]
   24a30:	cmp	r0, #0
   24a34:	bne	24a5c <__assert_fail@plt+0x11fac>
   24a38:	b	24a40 <__assert_fail@plt+0x11f90>
   24a3c:	str	r9, [r8, #4]
   24a40:	ldr	r0, [sp]
   24a44:	add	r8, r8, #8
   24a48:	cmp	r8, r0
   24a4c:	bcs	24adc <__assert_fail@plt+0x1202c>
   24a50:	ldr	r0, [r8]
   24a54:	cmp	r0, #0
   24a58:	beq	24a40 <__assert_fail@plt+0x11f90>
   24a5c:	ldr	r6, [r8, #4]
   24a60:	cmp	r6, #0
   24a64:	beq	24a3c <__assert_fail@plt+0x11f8c>
   24a68:	ldr	r1, [r4, #8]
   24a6c:	b	24a90 <__assert_fail@plt+0x11fe0>
   24a70:	add	r0, r3, r0, lsl #3
   24a74:	add	r0, r0, #4
   24a78:	ldr	r3, [r0]
   24a7c:	cmp	r2, #0
   24a80:	str	r3, [r6, #4]
   24a84:	str	r6, [r0]
   24a88:	mov	r6, r2
   24a8c:	beq	24a3c <__assert_fail@plt+0x11f8c>
   24a90:	ldr	r5, [r6]
   24a94:	ldr	r2, [r4, #24]
   24a98:	mov	r0, r5
   24a9c:	blx	r2
   24aa0:	ldr	r1, [r4, #8]
   24aa4:	cmp	r0, r1
   24aa8:	bcs	24b0c <__assert_fail@plt+0x1205c>
   24aac:	ldr	r3, [r4]
   24ab0:	ldr	r2, [r6, #4]
   24ab4:	ldr	r7, [r3, r0, lsl #3]
   24ab8:	cmp	r7, #0
   24abc:	bne	24a70 <__assert_fail@plt+0x11fc0>
   24ac0:	str	r5, [r3, r0, lsl #3]
   24ac4:	ldr	r0, [r4, #12]
   24ac8:	add	r0, r0, #1
   24acc:	str	r0, [r4, #12]
   24ad0:	mov	r0, sl
   24ad4:	str	r9, [r6]
   24ad8:	b	24a78 <__assert_fail@plt+0x11fc8>
   24adc:	add	r1, sp, #4
   24ae0:	mov	r0, r4
   24ae4:	mov	r2, #0
   24ae8:	mov	r5, #0
   24aec:	bl	24b14 <__assert_fail@plt+0x12064>
   24af0:	cmp	r0, #0
   24af4:	beq	24b0c <__assert_fail@plt+0x1205c>
   24af8:	ldr	r0, [sp, #4]
   24afc:	bl	32910 <__assert_fail@plt+0x1fe60>
   24b00:	mov	r0, r5
   24b04:	sub	sp, fp, #28
   24b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b0c:	bl	12a5c <abort@plt>
   24b10:	svcmi	0x00800000
   24b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b18:	add	fp, sp, #28
   24b1c:	sub	sp, sp, #4
   24b20:	ldr	r8, [r1]
   24b24:	ldr	r3, [r1, #4]
   24b28:	mov	r6, r0
   24b2c:	mov	r0, #1
   24b30:	str	r1, [sp]
   24b34:	cmp	r8, r3
   24b38:	bcs	24d4c <__assert_fail@plt+0x1229c>
   24b3c:	add	sl, r6, #36	; 0x24
   24b40:	cmp	r2, #0
   24b44:	beq	24c00 <__assert_fail@plt+0x12150>
   24b48:	mov	r9, #0
   24b4c:	ldr	r1, [r8]
   24b50:	cmp	r1, #0
   24b54:	bne	24b80 <__assert_fail@plt+0x120d0>
   24b58:	b	24b68 <__assert_fail@plt+0x120b8>
   24b5c:	ldr	r0, [sp]
   24b60:	ldr	r3, [r0, #4]
   24b64:	str	r9, [r8, #4]
   24b68:	add	r8, r8, #8
   24b6c:	cmp	r8, r3
   24b70:	bcs	24d48 <__assert_fail@plt+0x12298>
   24b74:	ldr	r1, [r8]
   24b78:	cmp	r1, #0
   24b7c:	beq	24b68 <__assert_fail@plt+0x120b8>
   24b80:	ldr	r7, [r8, #4]
   24b84:	cmp	r7, #0
   24b88:	beq	24b64 <__assert_fail@plt+0x120b4>
   24b8c:	ldr	r1, [r6, #8]
   24b90:	b	24bc4 <__assert_fail@plt+0x12114>
   24b94:	str	r4, [r3, r0, lsl #3]
   24b98:	ldr	r0, [r6, #12]
   24b9c:	add	r0, r0, #1
   24ba0:	str	r0, [r6, #12]
   24ba4:	mov	r0, sl
   24ba8:	str	r9, [r7]
   24bac:	ldr	r3, [r0]
   24bb0:	cmp	r2, #0
   24bb4:	str	r3, [r7, #4]
   24bb8:	str	r7, [r0]
   24bbc:	mov	r7, r2
   24bc0:	beq	24b5c <__assert_fail@plt+0x120ac>
   24bc4:	ldr	r4, [r7]
   24bc8:	ldr	r2, [r6, #24]
   24bcc:	mov	r0, r4
   24bd0:	blx	r2
   24bd4:	ldr	r1, [r6, #8]
   24bd8:	cmp	r0, r1
   24bdc:	bcs	24d60 <__assert_fail@plt+0x122b0>
   24be0:	ldr	r3, [r6]
   24be4:	ldr	r2, [r7, #4]
   24be8:	ldr	r5, [r3, r0, lsl #3]
   24bec:	cmp	r5, #0
   24bf0:	beq	24b94 <__assert_fail@plt+0x120e4>
   24bf4:	add	r0, r3, r0, lsl #3
   24bf8:	add	r0, r0, #4
   24bfc:	b	24bac <__assert_fail@plt+0x120fc>
   24c00:	mov	r5, #0
   24c04:	ldr	r7, [r8]
   24c08:	cmp	r7, #0
   24c0c:	bne	24c54 <__assert_fail@plt+0x121a4>
   24c10:	b	24c3c <__assert_fail@plt+0x1218c>
   24c14:	str	r7, [r9, r4, lsl #3]
   24c18:	ldr	r0, [r6, #12]
   24c1c:	add	r0, r0, #1
   24c20:	str	r0, [r6, #12]
   24c24:	ldr	r0, [sp]
   24c28:	str	r5, [r8]
   24c2c:	ldr	r1, [r0, #12]
   24c30:	ldr	r3, [r0, #4]
   24c34:	sub	r1, r1, #1
   24c38:	str	r1, [r0, #12]
   24c3c:	add	r8, r8, #8
   24c40:	cmp	r8, r3
   24c44:	bcs	24d48 <__assert_fail@plt+0x12298>
   24c48:	ldr	r7, [r8]
   24c4c:	cmp	r7, #0
   24c50:	beq	24c3c <__assert_fail@plt+0x1218c>
   24c54:	ldr	r9, [r8, #4]
   24c58:	ldr	r1, [r6, #8]
   24c5c:	cmp	r9, #0
   24c60:	bne	24c88 <__assert_fail@plt+0x121d8>
   24c64:	b	24cd8 <__assert_fail@plt+0x12228>
   24c68:	add	r0, r3, r0, lsl #3
   24c6c:	add	r0, r0, #4
   24c70:	ldr	r3, [r0]
   24c74:	cmp	r2, #0
   24c78:	str	r3, [r9, #4]
   24c7c:	str	r9, [r0]
   24c80:	mov	r9, r2
   24c84:	beq	24cd4 <__assert_fail@plt+0x12224>
   24c88:	ldr	r4, [r9]
   24c8c:	ldr	r2, [r6, #24]
   24c90:	mov	r0, r4
   24c94:	blx	r2
   24c98:	ldr	r1, [r6, #8]
   24c9c:	cmp	r0, r1
   24ca0:	bcs	24d60 <__assert_fail@plt+0x122b0>
   24ca4:	ldr	r3, [r6]
   24ca8:	ldr	r2, [r9, #4]
   24cac:	ldr	r7, [r3, r0, lsl #3]
   24cb0:	cmp	r7, #0
   24cb4:	bne	24c68 <__assert_fail@plt+0x121b8>
   24cb8:	str	r4, [r3, r0, lsl #3]
   24cbc:	ldr	r0, [r6, #12]
   24cc0:	add	r0, r0, #1
   24cc4:	str	r0, [r6, #12]
   24cc8:	mov	r0, sl
   24ccc:	str	r5, [r9]
   24cd0:	b	24c70 <__assert_fail@plt+0x121c0>
   24cd4:	ldr	r7, [r8]
   24cd8:	str	r5, [r8, #4]
   24cdc:	mov	r0, r7
   24ce0:	ldr	r2, [r6, #24]
   24ce4:	blx	r2
   24ce8:	mov	r4, r0
   24cec:	ldr	r0, [r6, #8]
   24cf0:	cmp	r4, r0
   24cf4:	bcs	24d60 <__assert_fail@plt+0x122b0>
   24cf8:	ldr	r9, [r6]
   24cfc:	ldr	r0, [r9, r4, lsl #3]
   24d00:	cmp	r0, #0
   24d04:	beq	24c14 <__assert_fail@plt+0x12164>
   24d08:	ldr	r0, [sl]
   24d0c:	cmp	r0, #0
   24d10:	beq	24d20 <__assert_fail@plt+0x12270>
   24d14:	ldr	r1, [r0, #4]
   24d18:	str	r1, [sl]
   24d1c:	b	24d30 <__assert_fail@plt+0x12280>
   24d20:	mov	r0, #8
   24d24:	bl	35350 <__assert_fail@plt+0x228a0>
   24d28:	cmp	r0, #0
   24d2c:	beq	24d54 <__assert_fail@plt+0x122a4>
   24d30:	add	r1, r9, r4, lsl #3
   24d34:	str	r7, [r0]
   24d38:	ldr	r2, [r1, #4]
   24d3c:	str	r2, [r0, #4]
   24d40:	str	r0, [r1, #4]
   24d44:	b	24c24 <__assert_fail@plt+0x12174>
   24d48:	mov	r0, #1
   24d4c:	sub	sp, fp, #28
   24d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d54:	mov	r0, #0
   24d58:	sub	sp, fp, #28
   24d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d60:	bl	12a5c <abort@plt>
   24d64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24d68:	add	fp, sp, #28
   24d6c:	sub	sp, sp, #4
   24d70:	cmp	r1, #0
   24d74:	beq	250b0 <__assert_fail@plt+0x12600>
   24d78:	mov	r8, r2
   24d7c:	mov	sl, r1
   24d80:	ldr	r1, [r0, #8]
   24d84:	ldr	r2, [r0, #24]
   24d88:	mov	r4, r0
   24d8c:	mov	r0, sl
   24d90:	blx	r2
   24d94:	mov	r7, r0
   24d98:	ldr	r0, [r4, #8]
   24d9c:	cmp	r7, r0
   24da0:	bcs	250b0 <__assert_fail@plt+0x12600>
   24da4:	ldr	r5, [r4]
   24da8:	mov	r9, r5
   24dac:	ldr	r1, [r9, r7, lsl #3]!
   24db0:	cmp	r1, #0
   24db4:	beq	24e48 <__assert_fail@plt+0x12398>
   24db8:	cmp	r1, sl
   24dbc:	beq	24de8 <__assert_fail@plt+0x12338>
   24dc0:	ldr	r2, [r4, #28]
   24dc4:	mov	r0, sl
   24dc8:	blx	r2
   24dcc:	cmp	r0, #0
   24dd0:	mov	r6, r9
   24dd4:	beq	24e04 <__assert_fail@plt+0x12354>
   24dd8:	ldr	r0, [r6]
   24ddc:	cmp	r0, #0
   24de0:	bne	24dec <__assert_fail@plt+0x1233c>
   24de4:	b	24e48 <__assert_fail@plt+0x12398>
   24de8:	mov	r0, sl
   24dec:	cmp	r8, #0
   24df0:	mov	r7, #0
   24df4:	strne	r0, [r8]
   24df8:	mov	r0, r7
   24dfc:	sub	sp, fp, #28
   24e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e04:	add	r6, r5, r7, lsl #3
   24e08:	ldr	r0, [r6, #4]!
   24e0c:	cmp	r0, #0
   24e10:	beq	24e48 <__assert_fail@plt+0x12398>
   24e14:	ldr	r1, [r0]
   24e18:	cmp	r1, sl
   24e1c:	beq	24e3c <__assert_fail@plt+0x1238c>
   24e20:	ldr	r2, [r4, #28]
   24e24:	mov	r0, sl
   24e28:	blx	r2
   24e2c:	ldr	r6, [r6]
   24e30:	cmp	r0, #0
   24e34:	beq	24e08 <__assert_fail@plt+0x12358>
   24e38:	b	24dd8 <__assert_fail@plt+0x12328>
   24e3c:	mov	r0, sl
   24e40:	cmp	r0, #0
   24e44:	bne	24dec <__assert_fail@plt+0x1233c>
   24e48:	vldr	s0, [r4, #8]
   24e4c:	vldr	s2, [r4, #12]
   24e50:	ldr	r0, [r4, #20]
   24e54:	vcvt.f32.u32	s0, s0
   24e58:	vcvt.f32.u32	s4, s2
   24e5c:	vldr	s2, [r0, #8]
   24e60:	vmul.f32	s6, s2, s0
   24e64:	vcmpe.f32	s6, s4
   24e68:	vmrs	APSR_nzcv, fpscr
   24e6c:	bpl	24fd0 <__assert_fail@plt+0x12520>
   24e70:	movw	r1, #6840	; 0x1ab8
   24e74:	movt	r1, #5
   24e78:	cmp	r0, r1
   24e7c:	beq	24f18 <__assert_fail@plt+0x12468>
   24e80:	vldr	s6, [pc, #556]	; 250b4 <__assert_fail@plt+0x12604>
   24e84:	vcmpe.f32	s2, s6
   24e88:	vmrs	APSR_nzcv, fpscr
   24e8c:	ble	24ef4 <__assert_fail@plt+0x12444>
   24e90:	vldr	s8, [pc, #544]	; 250b8 <__assert_fail@plt+0x12608>
   24e94:	vcmpe.f32	s2, s8
   24e98:	vmrs	APSR_nzcv, fpscr
   24e9c:	bpl	24ef4 <__assert_fail@plt+0x12444>
   24ea0:	vldr	s8, [pc, #532]	; 250bc <__assert_fail@plt+0x1260c>
   24ea4:	vldr	s10, [r0, #12]
   24ea8:	vcmpe.f32	s10, s8
   24eac:	vmrs	APSR_nzcv, fpscr
   24eb0:	ble	24ef4 <__assert_fail@plt+0x12444>
   24eb4:	vldr	s8, [r0]
   24eb8:	vcmpe.f32	s8, #0.0
   24ebc:	vmrs	APSR_nzcv, fpscr
   24ec0:	blt	24ef4 <__assert_fail@plt+0x12444>
   24ec4:	vadd.f32	s6, s8, s6
   24ec8:	vcmpe.f32	s6, s2
   24ecc:	vmrs	APSR_nzcv, fpscr
   24ed0:	bpl	24ef4 <__assert_fail@plt+0x12444>
   24ed4:	vldr	s8, [r0, #4]
   24ed8:	vmov.f32	s10, #112	; 0x3f800000  1.0
   24edc:	vcmpe.f32	s8, s10
   24ee0:	vmrs	APSR_nzcv, fpscr
   24ee4:	bhi	24ef4 <__assert_fail@plt+0x12444>
   24ee8:	vcmpe.f32	s6, s8
   24eec:	vmrs	APSR_nzcv, fpscr
   24ef0:	bmi	24f04 <__assert_fail@plt+0x12454>
   24ef4:	vldr	s2, [pc, #452]	; 250c0 <__assert_fail@plt+0x12610>
   24ef8:	movw	r0, #6840	; 0x1ab8
   24efc:	movt	r0, #5
   24f00:	str	r0, [r4, #20]
   24f04:	vmul.f32	s6, s2, s0
   24f08:	vcmpe.f32	s6, s4
   24f0c:	vmrs	APSR_nzcv, fpscr
   24f10:	bmi	24f2c <__assert_fail@plt+0x1247c>
   24f14:	b	24fd0 <__assert_fail@plt+0x12520>
   24f18:	mov	r0, r1
   24f1c:	vmul.f32	s6, s2, s0
   24f20:	vcmpe.f32	s6, s4
   24f24:	vmrs	APSR_nzcv, fpscr
   24f28:	bpl	24fd0 <__assert_fail@plt+0x12520>
   24f2c:	vldr	s4, [r0, #12]
   24f30:	ldrb	r0, [r0, #16]
   24f34:	mvn	r7, #0
   24f38:	cmp	r0, #0
   24f3c:	vmul.f32	s0, s4, s0
   24f40:	vldr	s4, [pc, #380]	; 250c4 <__assert_fail@plt+0x12614>
   24f44:	vmul.f32	s2, s2, s0
   24f48:	vseleq.f32	s0, s2, s0
   24f4c:	vcmpe.f32	s0, s4
   24f50:	vmrs	APSR_nzcv, fpscr
   24f54:	bge	25044 <__assert_fail@plt+0x12594>
   24f58:	vcvt.u32.f32	s0, s0
   24f5c:	mov	r0, r4
   24f60:	vmov	r1, s0
   24f64:	bl	2488c <__assert_fail@plt+0x11ddc>
   24f68:	cmp	r0, #0
   24f6c:	beq	25044 <__assert_fail@plt+0x12594>
   24f70:	ldr	r1, [r4, #8]
   24f74:	ldr	r2, [r4, #24]
   24f78:	mov	r0, sl
   24f7c:	blx	r2
   24f80:	mov	r7, r0
   24f84:	ldr	r0, [r4, #8]
   24f88:	cmp	r7, r0
   24f8c:	bcs	250b0 <__assert_fail@plt+0x12600>
   24f90:	ldr	r5, [r4]
   24f94:	mov	r9, r5
   24f98:	ldr	r1, [r9, r7, lsl #3]!
   24f9c:	cmp	r1, #0
   24fa0:	beq	24fd0 <__assert_fail@plt+0x12520>
   24fa4:	cmp	r1, sl
   24fa8:	mov	r0, sl
   24fac:	beq	24fc8 <__assert_fail@plt+0x12518>
   24fb0:	ldr	r2, [r4, #28]
   24fb4:	mov	r0, sl
   24fb8:	blx	r2
   24fbc:	cmp	r0, #0
   24fc0:	beq	25060 <__assert_fail@plt+0x125b0>
   24fc4:	ldr	r0, [r9]
   24fc8:	cmp	r0, #0
   24fcc:	bne	250b0 <__assert_fail@plt+0x12600>
   24fd0:	ldr	r0, [r9]
   24fd4:	cmp	r0, #0
   24fd8:	beq	24ff4 <__assert_fail@plt+0x12544>
   24fdc:	ldr	r0, [r4, #36]	; 0x24
   24fe0:	cmp	r0, #0
   24fe4:	beq	25014 <__assert_fail@plt+0x12564>
   24fe8:	ldr	r1, [r0, #4]
   24fec:	str	r1, [r4, #36]	; 0x24
   24ff0:	b	25024 <__assert_fail@plt+0x12574>
   24ff4:	str	sl, [r9]
   24ff8:	ldr	r0, [r4, #12]
   24ffc:	ldr	r1, [r4, #16]
   25000:	add	r0, r0, #1
   25004:	add	r1, r1, #1
   25008:	str	r0, [r4, #12]
   2500c:	str	r1, [r4, #16]
   25010:	b	25040 <__assert_fail@plt+0x12590>
   25014:	mov	r0, #8
   25018:	bl	35350 <__assert_fail@plt+0x228a0>
   2501c:	cmp	r0, #0
   25020:	beq	25050 <__assert_fail@plt+0x125a0>
   25024:	str	sl, [r0]
   25028:	ldr	r1, [r9, #4]
   2502c:	str	r1, [r0, #4]
   25030:	str	r0, [r9, #4]
   25034:	ldr	r0, [r4, #16]
   25038:	add	r0, r0, #1
   2503c:	str	r0, [r4, #16]
   25040:	mov	r7, #1
   25044:	mov	r0, r7
   25048:	sub	sp, fp, #28
   2504c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25050:	mvn	r7, #0
   25054:	mov	r0, r7
   25058:	sub	sp, fp, #28
   2505c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25060:	add	r6, r5, r7, lsl #3
   25064:	ldr	r0, [r6, #4]!
   25068:	cmp	r0, #0
   2506c:	beq	24fd0 <__assert_fail@plt+0x12520>
   25070:	ldr	r1, [r0]
   25074:	cmp	r1, sl
   25078:	beq	250a4 <__assert_fail@plt+0x125f4>
   2507c:	ldr	r2, [r4, #28]
   25080:	mov	r0, sl
   25084:	blx	r2
   25088:	ldr	r6, [r6]
   2508c:	cmp	r0, #0
   25090:	beq	25064 <__assert_fail@plt+0x125b4>
   25094:	ldr	r0, [r6]
   25098:	cmp	r0, #0
   2509c:	beq	24fd0 <__assert_fail@plt+0x12520>
   250a0:	b	250b0 <__assert_fail@plt+0x12600>
   250a4:	mov	r0, sl
   250a8:	cmp	r0, #0
   250ac:	beq	24fd0 <__assert_fail@plt+0x12520>
   250b0:	bl	12a5c <abort@plt>
   250b4:	stclcc	12, cr12, [ip, #820]	; 0x334
   250b8:	svccc	0x00666666
   250bc:	svccc	0x008ccccd
   250c0:	svccc	0x004ccccd
   250c4:	svcmi	0x00800000
   250c8:	push	{r4, sl, fp, lr}
   250cc:	add	fp, sp, #8
   250d0:	sub	sp, sp, #8
   250d4:	add	r2, sp, #4
   250d8:	mov	r4, r1
   250dc:	bl	24d64 <__assert_fail@plt+0x122b4>
   250e0:	cmn	r0, #1
   250e4:	beq	25100 <__assert_fail@plt+0x12650>
   250e8:	ldr	r1, [sp, #4]
   250ec:	cmp	r0, #0
   250f0:	moveq	r4, r1
   250f4:	mov	r0, r4
   250f8:	sub	sp, fp, #8
   250fc:	pop	{r4, sl, fp, pc}
   25100:	mov	r4, #0
   25104:	mov	r0, r4
   25108:	sub	sp, fp, #8
   2510c:	pop	{r4, sl, fp, pc}
   25110:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   25114:	add	fp, sp, #24
   25118:	mov	r9, r1
   2511c:	ldr	r1, [r0, #8]
   25120:	ldr	r2, [r0, #24]
   25124:	mov	r5, r0
   25128:	mov	r0, r9
   2512c:	blx	r2
   25130:	mov	r7, r0
   25134:	ldr	r0, [r5, #8]
   25138:	cmp	r7, r0
   2513c:	bcs	253b0 <__assert_fail@plt+0x12900>
   25140:	ldr	r6, [r5]
   25144:	mov	r8, #0
   25148:	mov	r4, r6
   2514c:	ldr	r1, [r4, r7, lsl #3]!
   25150:	cmp	r1, #0
   25154:	beq	25208 <__assert_fail@plt+0x12758>
   25158:	cmp	r1, r9
   2515c:	beq	25178 <__assert_fail@plt+0x126c8>
   25160:	ldr	r2, [r5, #28]
   25164:	mov	r0, r9
   25168:	blx	r2
   2516c:	cmp	r0, #0
   25170:	beq	251b0 <__assert_fail@plt+0x12700>
   25174:	ldr	r9, [r4]
   25178:	add	r0, r6, r7, lsl #3
   2517c:	ldr	r0, [r0, #4]
   25180:	cmp	r0, #0
   25184:	beq	251f8 <__assert_fail@plt+0x12748>
   25188:	ldm	r0, {r1, r2}
   2518c:	stm	r4, {r1, r2}
   25190:	mov	r1, #0
   25194:	str	r1, [r0]
   25198:	ldr	r1, [r5, #36]	; 0x24
   2519c:	str	r1, [r0, #4]
   251a0:	str	r0, [r5, #36]	; 0x24
   251a4:	cmp	r9, #0
   251a8:	bne	25240 <__assert_fail@plt+0x12790>
   251ac:	b	25208 <__assert_fail@plt+0x12758>
   251b0:	add	r7, r6, r7, lsl #3
   251b4:	ldr	r0, [r7, #4]!
   251b8:	cmp	r0, #0
   251bc:	beq	25208 <__assert_fail@plt+0x12758>
   251c0:	ldr	r1, [r0]
   251c4:	cmp	r1, r9
   251c8:	beq	25210 <__assert_fail@plt+0x12760>
   251cc:	ldr	r2, [r5, #28]
   251d0:	mov	r0, r9
   251d4:	blx	r2
   251d8:	ldr	r1, [r7]
   251dc:	cmp	r0, #0
   251e0:	bne	25218 <__assert_fail@plt+0x12768>
   251e4:	ldr	r0, [r1, #4]!
   251e8:	mov	r7, r1
   251ec:	cmp	r0, #0
   251f0:	bne	251c0 <__assert_fail@plt+0x12710>
   251f4:	b	25208 <__assert_fail@plt+0x12758>
   251f8:	mov	r0, #0
   251fc:	str	r0, [r4]
   25200:	cmp	r9, #0
   25204:	bne	25240 <__assert_fail@plt+0x12790>
   25208:	mov	r0, r8
   2520c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   25210:	mov	r1, r0
   25214:	b	2521c <__assert_fail@plt+0x1276c>
   25218:	ldr	r9, [r1]
   2521c:	ldr	r0, [r1, #4]
   25220:	str	r0, [r7]
   25224:	mov	r0, #0
   25228:	str	r0, [r1]
   2522c:	ldr	r0, [r5, #36]	; 0x24
   25230:	str	r0, [r1, #4]
   25234:	str	r1, [r5, #36]	; 0x24
   25238:	cmp	r9, #0
   2523c:	beq	25208 <__assert_fail@plt+0x12758>
   25240:	ldr	r0, [r5, #16]
   25244:	sub	r0, r0, #1
   25248:	str	r0, [r5, #16]
   2524c:	ldr	r0, [r4]
   25250:	cmp	r0, #0
   25254:	bne	253a4 <__assert_fail@plt+0x128f4>
   25258:	ldr	r0, [r5, #12]
   2525c:	vldr	s0, [r5, #8]
   25260:	sub	r1, r0, #1
   25264:	str	r1, [r5, #12]
   25268:	vmov	s2, r1
   2526c:	ldr	r0, [r5, #20]
   25270:	vcvt.f32.u32	s0, s0
   25274:	vcvt.f32.u32	s2, s2
   25278:	vldr	s4, [r0]
   2527c:	vmul.f32	s6, s4, s0
   25280:	vcmpe.f32	s6, s2
   25284:	vmrs	APSR_nzcv, fpscr
   25288:	ble	253a4 <__assert_fail@plt+0x128f4>
   2528c:	movw	r1, #6840	; 0x1ab8
   25290:	movt	r1, #5
   25294:	cmp	r0, r1
   25298:	beq	25334 <__assert_fail@plt+0x12884>
   2529c:	vldr	s8, [pc, #272]	; 253b4 <__assert_fail@plt+0x12904>
   252a0:	vldr	s6, [r0, #8]
   252a4:	vcmpe.f32	s6, s8
   252a8:	vmrs	APSR_nzcv, fpscr
   252ac:	ble	25310 <__assert_fail@plt+0x12860>
   252b0:	vldr	s10, [pc, #256]	; 253b8 <__assert_fail@plt+0x12908>
   252b4:	vcmpe.f32	s6, s10
   252b8:	vmrs	APSR_nzcv, fpscr
   252bc:	bpl	25310 <__assert_fail@plt+0x12860>
   252c0:	vcmpe.f32	s4, #0.0
   252c4:	vmrs	APSR_nzcv, fpscr
   252c8:	blt	25310 <__assert_fail@plt+0x12860>
   252cc:	vldr	s10, [r0, #12]
   252d0:	vldr	s12, [pc, #228]	; 253bc <__assert_fail@plt+0x1290c>
   252d4:	vcmpe.f32	s10, s12
   252d8:	vmrs	APSR_nzcv, fpscr
   252dc:	ble	25310 <__assert_fail@plt+0x12860>
   252e0:	vadd.f32	s8, s4, s8
   252e4:	vcmpe.f32	s8, s6
   252e8:	vmrs	APSR_nzcv, fpscr
   252ec:	bpl	25310 <__assert_fail@plt+0x12860>
   252f0:	vldr	s6, [r0, #4]
   252f4:	vmov.f32	s10, #112	; 0x3f800000  1.0
   252f8:	vcmpe.f32	s6, s10
   252fc:	vmrs	APSR_nzcv, fpscr
   25300:	bhi	25310 <__assert_fail@plt+0x12860>
   25304:	vcmpe.f32	s8, s6
   25308:	vmrs	APSR_nzcv, fpscr
   2530c:	bmi	25320 <__assert_fail@plt+0x12870>
   25310:	vldr	s4, [pc, #168]	; 253c0 <__assert_fail@plt+0x12910>
   25314:	movw	r0, #6840	; 0x1ab8
   25318:	movt	r0, #5
   2531c:	str	r0, [r5, #20]
   25320:	vmul.f32	s4, s4, s0
   25324:	vcmpe.f32	s4, s2
   25328:	vmrs	APSR_nzcv, fpscr
   2532c:	bgt	25348 <__assert_fail@plt+0x12898>
   25330:	b	253a4 <__assert_fail@plt+0x128f4>
   25334:	mov	r0, r1
   25338:	vmul.f32	s4, s4, s0
   2533c:	vcmpe.f32	s4, s2
   25340:	vmrs	APSR_nzcv, fpscr
   25344:	ble	253a4 <__assert_fail@plt+0x128f4>
   25348:	vldr	s2, [r0, #4]
   2534c:	ldrb	r1, [r0, #16]
   25350:	cmp	r1, #0
   25354:	vmul.f32	s0, s2, s0
   25358:	bne	25364 <__assert_fail@plt+0x128b4>
   2535c:	vldr	s2, [r0, #8]
   25360:	vmul.f32	s0, s0, s2
   25364:	vcvt.u32.f32	s0, s0
   25368:	mov	r0, r5
   2536c:	vmov	r1, s0
   25370:	bl	2488c <__assert_fail@plt+0x11ddc>
   25374:	cmp	r0, #0
   25378:	bne	253a4 <__assert_fail@plt+0x128f4>
   2537c:	ldr	r0, [r5, #36]	; 0x24
   25380:	cmp	r0, #0
   25384:	beq	2539c <__assert_fail@plt+0x128ec>
   25388:	ldr	r4, [r0, #4]
   2538c:	bl	32910 <__assert_fail@plt+0x1fe60>
   25390:	cmp	r4, #0
   25394:	mov	r0, r4
   25398:	bne	25388 <__assert_fail@plt+0x128d8>
   2539c:	mov	r0, #0
   253a0:	str	r0, [r5, #36]	; 0x24
   253a4:	mov	r8, r9
   253a8:	mov	r0, r8
   253ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   253b0:	bl	12a5c <abort@plt>
   253b4:	stclcc	12, cr12, [ip, #820]	; 0x334
   253b8:	svccc	0x00666666
   253bc:	svccc	0x008ccccd
   253c0:	andeq	r0, r0, r0
   253c4:	b	25110 <__assert_fail@plt+0x12660>
   253c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   253cc:	add	fp, sp, #28
   253d0:	sub	sp, sp, #4
   253d4:	vpush	{d8-d9}
   253d8:	sub	sp, sp, #96	; 0x60
   253dc:	mov	r6, r3
   253e0:	mov	r7, r2
   253e4:	str	r1, [sp, #36]	; 0x24
   253e8:	mov	sl, r0
   253ec:	bl	12960 <localeconv@plt>
   253f0:	ldr	r5, [r0]
   253f4:	mov	r4, r0
   253f8:	mov	r0, r5
   253fc:	bl	127bc <strlen@plt>
   25400:	sub	r1, r0, #1
   25404:	movw	r2, #57732	; 0xe184
   25408:	cmp	r1, #16
   2540c:	movt	r2, #4
   25410:	movcs	r0, #1
   25414:	movcc	r2, r5
   25418:	ldr	r5, [r4, #4]
   2541c:	str	r0, [sp, #4]
   25420:	ldr	r0, [r4, #8]
   25424:	str	r2, [sp]
   25428:	str	r0, [sp, #8]
   2542c:	mov	r0, r5
   25430:	bl	127bc <strlen@plt>
   25434:	cmp	r0, #17
   25438:	movw	r0, #647	; 0x287
   2543c:	movw	r1, #61103	; 0xeeaf
   25440:	str	r7, [sp, #24]
   25444:	ldr	r4, [fp, #16]
   25448:	str	r6, [sp, #32]
   2544c:	add	r0, r7, r0
   25450:	movt	r1, #4
   25454:	movcc	r1, r5
   25458:	ldr	r7, [fp, #8]
   2545c:	ldr	r5, [fp, #12]
   25460:	str	r0, [sp, #28]
   25464:	ands	r0, r6, #32
   25468:	str	r1, [sp, #44]	; 0x2c
   2546c:	str	r0, [sp, #16]
   25470:	mov	r0, #1000	; 0x3e8
   25474:	movwne	r0, #1024	; 0x400
   25478:	str	r0, [sp, #12]
   2547c:	and	r0, r6, #3
   25480:	ldr	r6, [fp, #20]
   25484:	str	r0, [sp, #40]	; 0x28
   25488:	subs	r0, r7, r4
   2548c:	sbcs	r0, r5, r6
   25490:	bcs	2557c <__assert_fail@plt+0x12acc>
   25494:	orrs	r0, r7, r5
   25498:	beq	25684 <__assert_fail@plt+0x12bd4>
   2549c:	ldr	r9, [fp, #16]
   254a0:	mov	r1, r6
   254a4:	mov	r2, r7
   254a8:	mov	r3, r5
   254ac:	mov	r0, r9
   254b0:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   254b4:	mov	r4, r0
   254b8:	mov	r8, r1
   254bc:	umull	r0, r1, r0, r7
   254c0:	mla	r1, r4, r5, r1
   254c4:	mla	r1, r8, r7, r1
   254c8:	subs	r0, r9, r0
   254cc:	sbc	r1, r6, r1
   254d0:	orrs	r0, r0, r1
   254d4:	bne	25684 <__assert_fail@plt+0x12bd4>
   254d8:	ldr	r5, [sp, #36]	; 0x24
   254dc:	mov	r0, sl
   254e0:	mov	r2, r4
   254e4:	mov	r3, r8
   254e8:	mov	r1, r5
   254ec:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   254f0:	mov	r9, r1
   254f4:	umull	r2, r1, r0, r4
   254f8:	str	r0, [sp, #20]
   254fc:	mov	r3, r8
   25500:	mla	r1, r0, r8, r1
   25504:	mla	r1, r9, r4, r1
   25508:	subs	r0, sl, r2
   2550c:	mov	r2, #10
   25510:	sbc	r1, r5, r1
   25514:	umull	r5, r0, r0, r2
   25518:	mov	r2, r4
   2551c:	add	r1, r1, r1, lsl #2
   25520:	add	r6, r0, r1, lsl #1
   25524:	mov	r0, r5
   25528:	mov	r1, r6
   2552c:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   25530:	mov	r7, r0
   25534:	umull	r0, r2, r0, r4
   25538:	mla	r2, r7, r8, r2
   2553c:	mla	r1, r1, r4, r2
   25540:	mov	r2, #2
   25544:	subs	r0, r5, r0
   25548:	sbc	r1, r6, r1
   2554c:	subs	r3, r4, r0, lsl #1
   25550:	lsl	r1, r1, #1
   25554:	orr	r1, r1, r0, lsr #31
   25558:	orr	ip, r1, r0, lsl #1
   2555c:	sbcs	r3, r8, r1
   25560:	movwcc	r2, #3
   25564:	cmp	ip, #0
   25568:	movwne	ip, #1
   2556c:	rsbs	r0, r4, r0, lsl #1
   25570:	sbcs	r0, r1, r8
   25574:	movcs	ip, r2
   25578:	b	255e8 <__assert_fail@plt+0x12b38>
   2557c:	mov	r0, r7
   25580:	mov	r1, r5
   25584:	mov	r2, r4
   25588:	mov	r3, r6
   2558c:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   25590:	mov	r2, r0
   25594:	mov	r3, r1
   25598:	umull	r0, r1, r0, r4
   2559c:	mla	r1, r2, r6, r1
   255a0:	mla	r1, r3, r4, r1
   255a4:	subs	r0, r7, r0
   255a8:	sbc	r1, r5, r1
   255ac:	orrs	r0, r0, r1
   255b0:	bne	25684 <__assert_fail@plt+0x12bd4>
   255b4:	ldr	r4, [sp, #36]	; 0x24
   255b8:	umull	r0, r1, r2, sl
   255bc:	mla	r1, r2, r4, r1
   255c0:	str	r0, [sp, #20]
   255c4:	mla	r9, r3, sl, r1
   255c8:	mov	r1, r9
   255cc:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   255d0:	eor	r1, r1, r4
   255d4:	eor	r0, r0, sl
   255d8:	orrs	r0, r0, r1
   255dc:	bne	25684 <__assert_fail@plt+0x12bd4>
   255e0:	mov	ip, #0
   255e4:	mov	r7, #0
   255e8:	ldr	r0, [sp, #32]
   255ec:	ldr	r8, [sp, #12]
   255f0:	ldr	r5, [sp, #40]	; 0x28
   255f4:	mvn	r3, #0
   255f8:	ands	r4, r0, #16
   255fc:	beq	259b0 <__assert_fail@plt+0x12f00>
   25600:	ldr	sl, [sp, #20]
   25604:	mov	r3, #0
   25608:	subs	r0, sl, r8
   2560c:	sbcs	r0, r9, #0
   25610:	bcc	25f6c <__assert_fail@plt+0x134bc>
   25614:	mov	r0, sl
   25618:	mov	r1, r9
   2561c:	mov	r2, r8
   25620:	mov	r3, #0
   25624:	mov	r6, r5
   25628:	mov	r5, ip
   2562c:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   25630:	mov	r3, sl
   25634:	mov	sl, r0
   25638:	mov	r2, r5
   2563c:	mov	r9, r1
   25640:	mls	r0, r0, r8, r3
   25644:	add	r0, r0, r0, lsl #2
   25648:	add	r0, r7, r0, lsl #1
   2564c:	udiv	r7, r0, r8
   25650:	mls	r0, r7, r8, r0
   25654:	lsl	r0, r0, #1
   25658:	orr	r0, r0, r5, lsr #1
   2565c:	cmp	r0, r8
   25660:	bcs	25bb0 <__assert_fail@plt+0x13100>
   25664:	rsb	r1, r2, #0
   25668:	subs	ip, r0, r1
   2566c:	movwne	ip, #1
   25670:	subs	r0, sl, r8
   25674:	mov	r3, #1
   25678:	sbcs	r0, r9, #0
   2567c:	bcs	25bd0 <__assert_fail@plt+0x13120>
   25680:	b	25cf4 <__assert_fail@plt+0x13244>
   25684:	ldr	r9, [fp, #16]
   25688:	mov	r1, r6
   2568c:	mov	r0, r9
   25690:	bl	4cc48 <__assert_fail@plt+0x3a198>
   25694:	vmov	d8, r0, r1
   25698:	ldr	r1, [sp, #36]	; 0x24
   2569c:	mov	r0, sl
   256a0:	bl	4cc48 <__assert_fail@plt+0x3a198>
   256a4:	mov	r4, r0
   256a8:	mov	r6, r1
   256ac:	mov	r0, r7
   256b0:	mov	r1, r5
   256b4:	bl	4cc48 <__assert_fail@plt+0x3a198>
   256b8:	vmov	d16, r0, r1
   256bc:	vmov	d17, r4, r6
   256c0:	ldr	r5, [sp, #32]
   256c4:	tst	r5, #16
   256c8:	vdiv.f64	d16, d16, d8
   256cc:	vmul.f64	d8, d16, d17
   256d0:	bne	25750 <__assert_fail@plt+0x12ca0>
   256d4:	ldr	r6, [sp, #40]	; 0x28
   256d8:	cmp	r6, #1
   256dc:	beq	259f8 <__assert_fail@plt+0x12f48>
   256e0:	vldr	d16, [pc, #776]	; 259f0 <__assert_fail@plt+0x12f40>
   256e4:	ldr	r7, [sp, #28]
   256e8:	ldr	sl, [sp, #24]
   256ec:	vcmpe.f64	d8, d16
   256f0:	vmrs	APSR_nzcv, fpscr
   256f4:	bpl	25a00 <__assert_fail@plt+0x12f50>
   256f8:	vmov	r0, r1, d8
   256fc:	bl	4cde0 <__assert_fail@plt+0x3a330>
   25700:	mov	r4, r0
   25704:	mov	r8, r1
   25708:	mov	r0, #0
   2570c:	cmp	r6, #0
   25710:	mov	r2, #0
   25714:	bne	2573c <__assert_fail@plt+0x12c8c>
   25718:	mov	r0, r4
   2571c:	mov	r1, r8
   25720:	bl	4cc48 <__assert_fail@plt+0x3a198>
   25724:	vmov	d16, r0, r1
   25728:	mov	r2, #0
   2572c:	mov	r0, #0
   25730:	vcmp.f64	d8, d16
   25734:	vmrs	APSR_nzcv, fpscr
   25738:	movwne	r0, #1
   2573c:	adds	r0, r0, r4
   25740:	adc	r1, r2, r8
   25744:	bl	4cc48 <__assert_fail@plt+0x3a198>
   25748:	vmov	d8, r0, r1
   2574c:	b	25a00 <__assert_fail@plt+0x12f50>
   25750:	ldr	r0, [sp, #12]
   25754:	mov	r1, #1
   25758:	vmov	s0, r0
   2575c:	vcvt.f64.u32	d16, s0
   25760:	ldr	r6, [sp, #40]	; 0x28
   25764:	vmul.f64	d17, d16, d16
   25768:	vcmpe.f64	d17, d8
   2576c:	vmrs	APSR_nzcv, fpscr
   25770:	bls	25788 <__assert_fail@plt+0x12cd8>
   25774:	ldr	r7, [sp, #28]
   25778:	ldr	sl, [sp, #24]
   2577c:	ldr	r9, [sp, #4]
   25780:	vmov.f64	d17, d16
   25784:	b	25824 <__assert_fail@plt+0x12d74>
   25788:	vmul.f64	d18, d17, d16
   2578c:	ldr	r7, [sp, #28]
   25790:	ldr	sl, [sp, #24]
   25794:	ldr	r9, [sp, #4]
   25798:	mov	r1, #2
   2579c:	vcmpe.f64	d18, d8
   257a0:	vmrs	APSR_nzcv, fpscr
   257a4:	bhi	25824 <__assert_fail@plt+0x12d74>
   257a8:	vmul.f64	d19, d18, d16
   257ac:	vmov.f64	d17, d18
   257b0:	mov	r1, #3
   257b4:	vcmpe.f64	d19, d8
   257b8:	vmrs	APSR_nzcv, fpscr
   257bc:	bhi	25824 <__assert_fail@plt+0x12d74>
   257c0:	vmul.f64	d18, d19, d16
   257c4:	vmov.f64	d17, d19
   257c8:	mov	r1, #4
   257cc:	vcmpe.f64	d18, d8
   257d0:	vmrs	APSR_nzcv, fpscr
   257d4:	bhi	25824 <__assert_fail@plt+0x12d74>
   257d8:	vmul.f64	d19, d18, d16
   257dc:	vmov.f64	d17, d18
   257e0:	mov	r1, #5
   257e4:	vcmpe.f64	d19, d8
   257e8:	vmrs	APSR_nzcv, fpscr
   257ec:	bhi	25824 <__assert_fail@plt+0x12d74>
   257f0:	vmul.f64	d18, d19, d16
   257f4:	vmov.f64	d17, d19
   257f8:	mov	r1, #6
   257fc:	vcmpe.f64	d18, d8
   25800:	vmrs	APSR_nzcv, fpscr
   25804:	bhi	25824 <__assert_fail@plt+0x12d74>
   25808:	vmul.f64	d16, d18, d16
   2580c:	mov	r1, #7
   25810:	vmov.f64	d17, d18
   25814:	vcmpe.f64	d16, d8
   25818:	vmrs	APSR_nzcv, fpscr
   2581c:	movls	r1, #8
   25820:	vmovls.f64	d17, d16
   25824:	vdiv.f64	d8, d8, d17
   25828:	cmp	r6, #1
   2582c:	str	r1, [sp, #20]
   25830:	vmov.f64	d16, d8
   25834:	beq	258a4 <__assert_fail@plt+0x12df4>
   25838:	vldr	d16, [pc, #432]	; 259f0 <__assert_fail@plt+0x12f40>
   2583c:	vcmpe.f64	d8, d16
   25840:	vmov.f64	d16, d8
   25844:	vmrs	APSR_nzcv, fpscr
   25848:	bpl	258a4 <__assert_fail@plt+0x12df4>
   2584c:	vmov	r0, r1, d8
   25850:	bl	4cde0 <__assert_fail@plt+0x3a330>
   25854:	mov	r4, r0
   25858:	mov	r8, r1
   2585c:	mov	r0, #0
   25860:	cmp	r6, #0
   25864:	mov	r2, #0
   25868:	bne	25890 <__assert_fail@plt+0x12de0>
   2586c:	mov	r0, r4
   25870:	mov	r1, r8
   25874:	bl	4cc48 <__assert_fail@plt+0x3a198>
   25878:	vmov	d16, r0, r1
   2587c:	mov	r2, #0
   25880:	mov	r0, #0
   25884:	vcmp.f64	d8, d16
   25888:	vmrs	APSR_nzcv, fpscr
   2588c:	movwne	r0, #1
   25890:	adds	r0, r0, r4
   25894:	adc	r1, r2, r8
   25898:	bl	4cc48 <__assert_fail@plt+0x3a198>
   2589c:	vmov	d16, r0, r1
   258a0:	ldr	r6, [sp, #40]	; 0x28
   258a4:	vmov	r2, r3, d16
   258a8:	movw	r1, #6866	; 0x1ad2
   258ac:	mov	r0, sl
   258b0:	movt	r1, #5
   258b4:	bl	1296c <sprintf@plt>
   258b8:	ldr	r1, [sp, #16]
   258bc:	mov	r0, #3
   258c0:	cmp	r1, #0
   258c4:	movwne	r0, #2
   258c8:	add	r4, r0, r9
   258cc:	mov	r0, sl
   258d0:	bl	127bc <strlen@plt>
   258d4:	cmp	r4, r0
   258d8:	bcs	25958 <__assert_fail@plt+0x12ea8>
   258dc:	vmov.f64	d9, #36	; 0x41200000  10.0
   258e0:	cmp	r6, #1
   258e4:	vmul.f64	d8, d8, d9
   258e8:	beq	25980 <__assert_fail@plt+0x12ed0>
   258ec:	vldr	d16, [pc, #252]	; 259f0 <__assert_fail@plt+0x12f40>
   258f0:	vcmpe.f64	d8, d16
   258f4:	vmrs	APSR_nzcv, fpscr
   258f8:	bpl	25980 <__assert_fail@plt+0x12ed0>
   258fc:	vmov	r0, r1, d8
   25900:	bl	4cde0 <__assert_fail@plt+0x3a330>
   25904:	ldr	r9, [fp, #16]
   25908:	mov	r4, r0
   2590c:	mov	r8, r1
   25910:	mov	r0, #0
   25914:	cmp	r6, #0
   25918:	mov	r2, #0
   2591c:	bne	25944 <__assert_fail@plt+0x12e94>
   25920:	mov	r0, r4
   25924:	mov	r1, r8
   25928:	bl	4cc48 <__assert_fail@plt+0x3a198>
   2592c:	vmov	d16, r0, r1
   25930:	mov	r2, #0
   25934:	mov	r0, #0
   25938:	vcmp.f64	d8, d16
   2593c:	vmrs	APSR_nzcv, fpscr
   25940:	movwne	r0, #1
   25944:	adds	r0, r0, r4
   25948:	adc	r1, r2, r8
   2594c:	bl	4cc48 <__assert_fail@plt+0x3a198>
   25950:	vmov	d8, r0, r1
   25954:	b	25984 <__assert_fail@plt+0x12ed4>
   25958:	mov	r2, r0
   2595c:	add	r4, r9, #1
   25960:	tst	r5, #8
   25964:	beq	25978 <__assert_fail@plt+0x12ec8>
   25968:	add	r0, r2, sl
   2596c:	ldrb	r0, [r0, #-1]
   25970:	cmp	r0, #48	; 0x30
   25974:	beq	258dc <__assert_fail@plt+0x12e2c>
   25978:	ldr	r9, [fp, #16]
   2597c:	b	25a2c <__assert_fail@plt+0x12f7c>
   25980:	ldr	r9, [fp, #16]
   25984:	vdiv.f64	d16, d8, d9
   25988:	movw	r1, #6860	; 0x1acc
   2598c:	mov	r0, sl
   25990:	movt	r1, #5
   25994:	vmov	r2, r3, d16
   25998:	bl	1296c <sprintf@plt>
   2599c:	mov	r0, sl
   259a0:	bl	127bc <strlen@plt>
   259a4:	mov	r2, r0
   259a8:	mov	r4, #0
   259ac:	b	25a2c <__assert_fail@plt+0x12f7c>
   259b0:	ldr	r6, [sp, #28]
   259b4:	ldr	sl, [sp, #20]
   259b8:	cmp	r5, #0
   259bc:	beq	25f78 <__assert_fail@plt+0x134c8>
   259c0:	cmp	r5, #1
   259c4:	bne	25fe8 <__assert_fail@plt+0x13538>
   259c8:	mov	r0, #0
   259cc:	rsbs	r1, ip, #0
   259d0:	and	r2, sl, #1
   259d4:	sbc	r0, r0, #0
   259d8:	eor	r1, r2, r1
   259dc:	orrs	r0, r1, r0
   259e0:	addne	r7, r7, #1
   259e4:	cmp	r7, #5
   259e8:	bgt	25f84 <__assert_fail@plt+0x134d4>
   259ec:	b	25fe8 <__assert_fail@plt+0x13538>
   259f0:	andeq	r0, r0, r0
   259f4:	mvnsmi	r0, #0
   259f8:	ldr	r7, [sp, #28]
   259fc:	ldr	sl, [sp, #24]
   25a00:	vmov	r2, r3, d8
   25a04:	movw	r1, #6860	; 0x1acc
   25a08:	mov	r0, sl
   25a0c:	movt	r1, #5
   25a10:	bl	1296c <sprintf@plt>
   25a14:	mov	r0, sl
   25a18:	bl	127bc <strlen@plt>
   25a1c:	mov	r2, r0
   25a20:	mvn	r0, #0
   25a24:	mov	r4, #0
   25a28:	str	r0, [sp, #20]
   25a2c:	sub	r0, r7, r2
   25a30:	mov	r1, sl
   25a34:	mov	r8, r0
   25a38:	bl	12474 <memmove@plt>
   25a3c:	sub	r6, r7, r4
   25a40:	tst	r5, #4
   25a44:	bne	26040 <__assert_fail@plt+0x13590>
   25a48:	ldr	r3, [sp, #20]
   25a4c:	tst	r5, #128	; 0x80
   25a50:	beq	26158 <__assert_fail@plt+0x136a8>
   25a54:	cmn	r3, #1
   25a58:	bgt	25b44 <__assert_fail@plt+0x13094>
   25a5c:	subs	r0, r9, #2
   25a60:	ldr	r0, [fp, #20]
   25a64:	mov	r3, #0
   25a68:	sbcs	r0, r0, #0
   25a6c:	bcc	25b44 <__assert_fail@plt+0x13094>
   25a70:	ldr	r0, [sp, #12]
   25a74:	mov	r3, #1
   25a78:	subs	r0, r0, r9
   25a7c:	ldr	r0, [fp, #20]
   25a80:	rscs	r0, r0, #0
   25a84:	bcs	25b44 <__assert_fail@plt+0x13094>
   25a88:	ldr	r0, [sp, #12]
   25a8c:	mov	r3, #2
   25a90:	umull	r1, r0, r0, r0
   25a94:	subs	r2, r1, r9
   25a98:	ldr	r2, [fp, #20]
   25a9c:	sbcs	r2, r0, r2
   25aa0:	bcs	25b44 <__assert_fail@plt+0x13094>
   25aa4:	ldr	r3, [sp, #12]
   25aa8:	umull	r1, r2, r1, r3
   25aac:	mla	r2, r0, r3, r2
   25ab0:	mov	r3, #3
   25ab4:	subs	r0, r1, r9
   25ab8:	ldr	r0, [fp, #20]
   25abc:	sbcs	r0, r2, r0
   25ac0:	bcs	25b44 <__assert_fail@plt+0x13094>
   25ac4:	ldr	r3, [sp, #12]
   25ac8:	umull	r0, r1, r1, r3
   25acc:	mla	r1, r2, r3, r1
   25ad0:	mov	r3, #4
   25ad4:	subs	r2, r0, r9
   25ad8:	ldr	r2, [fp, #20]
   25adc:	sbcs	r2, r1, r2
   25ae0:	bcs	25b44 <__assert_fail@plt+0x13094>
   25ae4:	ldr	r3, [sp, #12]
   25ae8:	umull	r0, r2, r0, r3
   25aec:	mla	r1, r1, r3, r2
   25af0:	mov	r3, #5
   25af4:	subs	r2, r0, r9
   25af8:	ldr	r2, [fp, #20]
   25afc:	sbcs	r2, r1, r2
   25b00:	bcs	25b44 <__assert_fail@plt+0x13094>
   25b04:	ldr	r3, [sp, #12]
   25b08:	umull	r0, r2, r0, r3
   25b0c:	mla	r1, r1, r3, r2
   25b10:	mov	r3, #6
   25b14:	subs	r2, r0, r9
   25b18:	ldr	r2, [fp, #20]
   25b1c:	sbcs	r2, r1, r2
   25b20:	bcs	25b44 <__assert_fail@plt+0x13094>
   25b24:	ldr	r3, [sp, #12]
   25b28:	umull	r0, r2, r0, r3
   25b2c:	mla	r1, r1, r3, r2
   25b30:	mov	r3, #7
   25b34:	subs	r0, r0, r9
   25b38:	ldr	r0, [fp, #20]
   25b3c:	sbcs	r0, r1, r0
   25b40:	movwcc	r3, #8
   25b44:	and	r0, r5, #256	; 0x100
   25b48:	tst	r5, #64	; 0x40
   25b4c:	orrsne	r1, r3, r0
   25b50:	movne	r1, #32
   25b54:	addne	r7, sl, #648	; 0x288
   25b58:	strbne	r1, [sl, #647]	; 0x287
   25b5c:	cmp	r3, #0
   25b60:	beq	25b88 <__assert_fail@plt+0x130d8>
   25b64:	ldr	r1, [sp, #16]
   25b68:	cmp	r1, #0
   25b6c:	moveq	r1, #107	; 0x6b
   25b70:	cmpeq	r3, #1
   25b74:	beq	25b84 <__assert_fail@plt+0x130d4>
   25b78:	movw	r1, #6920	; 0x1b08
   25b7c:	movt	r1, #5
   25b80:	ldrb	r1, [r1, r3]
   25b84:	strb	r1, [r7], #1
   25b88:	cmp	r0, #0
   25b8c:	beq	26158 <__assert_fail@plt+0x136a8>
   25b90:	ldr	r0, [sp, #16]
   25b94:	cmp	r0, #0
   25b98:	cmpne	r3, #0
   25b9c:	movne	r0, #105	; 0x69
   25ba0:	strbne	r0, [r7], #1
   25ba4:	mov	r0, #66	; 0x42
   25ba8:	strb	r0, [r7], #1
   25bac:	b	26158 <__assert_fail@plt+0x136a8>
   25bb0:	add	r0, r0, r2
   25bb4:	mov	ip, #2
   25bb8:	cmp	r8, r0
   25bbc:	movwcc	ip, #3
   25bc0:	subs	r0, sl, r8
   25bc4:	mov	r3, #1
   25bc8:	sbcs	r0, r9, #0
   25bcc:	bcc	25cf4 <__assert_fail@plt+0x13244>
   25bd0:	mov	r0, sl
   25bd4:	mov	r1, r9
   25bd8:	mov	r2, r8
   25bdc:	mov	r3, #0
   25be0:	str	r4, [sp, #36]	; 0x24
   25be4:	mov	r4, ip
   25be8:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   25bec:	mov	r2, r4
   25bf0:	mov	r4, r0
   25bf4:	mls	r0, r0, r8, sl
   25bf8:	mov	r9, r1
   25bfc:	add	r0, r0, r0, lsl #2
   25c00:	add	r0, r7, r0, lsl #1
   25c04:	udiv	r7, r0, r8
   25c08:	mls	r0, r7, r8, r0
   25c0c:	lsl	r0, r0, #1
   25c10:	orr	r0, r0, r2, lsr #1
   25c14:	cmp	r0, r8
   25c18:	bcs	25c3c <__assert_fail@plt+0x1318c>
   25c1c:	rsb	r1, r2, #0
   25c20:	subs	ip, r0, r1
   25c24:	movwne	ip, #1
   25c28:	subs	r0, r4, r8
   25c2c:	mov	r3, #2
   25c30:	sbcs	r0, r9, #0
   25c34:	bcs	25c78 <__assert_fail@plt+0x131c8>
   25c38:	b	25c5c <__assert_fail@plt+0x131ac>
   25c3c:	add	r0, r0, r2
   25c40:	mov	ip, #2
   25c44:	cmp	r8, r0
   25c48:	movwcc	ip, #3
   25c4c:	subs	r0, r4, r8
   25c50:	mov	r3, #2
   25c54:	sbcs	r0, r9, #0
   25c58:	bcs	25c78 <__assert_fail@plt+0x131c8>
   25c5c:	mov	sl, r4
   25c60:	ldr	r4, [sp, #36]	; 0x24
   25c64:	mov	r5, r6
   25c68:	rsbs	r0, sl, #9
   25c6c:	rscs	r0, r9, #0
   25c70:	bcc	25f6c <__assert_fail@plt+0x134bc>
   25c74:	b	25d04 <__assert_fail@plt+0x13254>
   25c78:	mov	r0, r4
   25c7c:	mov	r1, r9
   25c80:	mov	r2, r8
   25c84:	mov	r3, #0
   25c88:	mov	r5, ip
   25c8c:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   25c90:	mov	sl, r0
   25c94:	mls	r0, r0, r8, r4
   25c98:	mov	r2, r5
   25c9c:	mov	r9, r1
   25ca0:	add	r0, r0, r0, lsl #2
   25ca4:	add	r0, r7, r0, lsl #1
   25ca8:	udiv	r7, r0, r8
   25cac:	mls	r0, r7, r8, r0
   25cb0:	lsl	r0, r0, #1
   25cb4:	orr	r0, r0, r5, lsr #1
   25cb8:	cmp	r0, r8
   25cbc:	bcs	25cd0 <__assert_fail@plt+0x13220>
   25cc0:	rsb	r1, r2, #0
   25cc4:	subs	ip, r0, r1
   25cc8:	movwne	ip, #1
   25ccc:	b	25ce0 <__assert_fail@plt+0x13230>
   25cd0:	add	r0, r0, r2
   25cd4:	mov	ip, #2
   25cd8:	cmp	r8, r0
   25cdc:	movwcc	ip, #3
   25ce0:	ldr	r4, [sp, #36]	; 0x24
   25ce4:	subs	r0, sl, r8
   25ce8:	mov	r3, #3
   25cec:	sbcs	r0, r9, #0
   25cf0:	bcs	25dd0 <__assert_fail@plt+0x13320>
   25cf4:	mov	r5, r6
   25cf8:	rsbs	r0, sl, #9
   25cfc:	rscs	r0, r9, #0
   25d00:	bcc	25f6c <__assert_fail@plt+0x134bc>
   25d04:	cmp	r5, #1
   25d08:	bne	25d20 <__assert_fail@plt+0x13270>
   25d0c:	and	r0, r7, #1
   25d10:	add	r0, ip, r0
   25d14:	cmp	r0, #2
   25d18:	bhi	25d30 <__assert_fail@plt+0x13280>
   25d1c:	b	25d64 <__assert_fail@plt+0x132b4>
   25d20:	cmp	r5, #0
   25d24:	bne	25d64 <__assert_fail@plt+0x132b4>
   25d28:	cmp	ip, #0
   25d2c:	beq	25d64 <__assert_fail@plt+0x132b4>
   25d30:	adds	r0, sl, #1
   25d34:	add	r7, r7, #1
   25d38:	mov	ip, #0
   25d3c:	adc	r1, r9, #0
   25d40:	cmp	r7, #10
   25d44:	bne	25d64 <__assert_fail@plt+0x132b4>
   25d48:	rsbs	r2, r0, #9
   25d4c:	mov	r7, #0
   25d50:	mov	sl, r0
   25d54:	mov	r9, r1
   25d58:	mov	ip, #0
   25d5c:	rscs	r2, r1, #0
   25d60:	bcc	25e38 <__assert_fail@plt+0x13388>
   25d64:	ldr	r0, [sp, #32]
   25d68:	tst	r0, #8
   25d6c:	beq	25d8c <__assert_fail@plt+0x132dc>
   25d70:	cmp	r7, #0
   25d74:	bne	25d8c <__assert_fail@plt+0x132dc>
   25d78:	ldr	r6, [sp, #28]
   25d7c:	mov	r7, #0
   25d80:	cmp	r5, #0
   25d84:	bne	259c0 <__assert_fail@plt+0x12f10>
   25d88:	b	25f78 <__assert_fail@plt+0x134c8>
   25d8c:	ldr	r1, [sp, #24]
   25d90:	ldr	r2, [sp, #4]
   25d94:	add	r0, r7, #48	; 0x30
   25d98:	mov	r7, r4
   25d9c:	mov	r4, r3
   25da0:	strb	r0, [r1, #646]!	; 0x286
   25da4:	sub	r0, r1, r2
   25da8:	ldr	r1, [sp]
   25dac:	mov	r6, r0
   25db0:	bl	124e0 <memcpy@plt>
   25db4:	mov	r3, r4
   25db8:	mov	r4, r7
   25dbc:	mov	ip, #0
   25dc0:	mov	r7, #0
   25dc4:	cmp	r5, #0
   25dc8:	bne	259c0 <__assert_fail@plt+0x12f10>
   25dcc:	b	25f78 <__assert_fail@plt+0x134c8>
   25dd0:	mov	r0, sl
   25dd4:	mov	r1, r9
   25dd8:	mov	r2, r8
   25ddc:	mov	r3, #0
   25de0:	mov	r4, ip
   25de4:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   25de8:	mov	r2, r4
   25dec:	mov	r4, r0
   25df0:	mls	r0, r0, r8, sl
   25df4:	mov	r9, r1
   25df8:	add	r0, r0, r0, lsl #2
   25dfc:	add	r0, r7, r0, lsl #1
   25e00:	udiv	r7, r0, r8
   25e04:	mls	r0, r7, r8, r0
   25e08:	lsl	r0, r0, #1
   25e0c:	orr	r0, r0, r2, lsr #1
   25e10:	cmp	r0, r8
   25e14:	bcs	25e54 <__assert_fail@plt+0x133a4>
   25e18:	rsb	r1, r2, #0
   25e1c:	subs	ip, r0, r1
   25e20:	movwne	ip, #1
   25e24:	subs	r0, r4, r8
   25e28:	mov	r3, #4
   25e2c:	sbcs	r0, r9, #0
   25e30:	bcc	25c5c <__assert_fail@plt+0x131ac>
   25e34:	b	25e74 <__assert_fail@plt+0x133c4>
   25e38:	ldr	r6, [sp, #28]
   25e3c:	mov	ip, #0
   25e40:	mov	sl, #10
   25e44:	mov	r9, #0
   25e48:	cmp	r5, #0
   25e4c:	bne	259c0 <__assert_fail@plt+0x12f10>
   25e50:	b	25f78 <__assert_fail@plt+0x134c8>
   25e54:	add	r0, r0, r2
   25e58:	mov	ip, #2
   25e5c:	cmp	r8, r0
   25e60:	movwcc	ip, #3
   25e64:	subs	r0, r4, r8
   25e68:	mov	r3, #4
   25e6c:	sbcs	r0, r9, #0
   25e70:	bcc	25c5c <__assert_fail@plt+0x131ac>
   25e74:	mov	r0, r4
   25e78:	mov	r1, r9
   25e7c:	mov	r2, r8
   25e80:	mov	r3, #0
   25e84:	mov	r5, ip
   25e88:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   25e8c:	mov	sl, r0
   25e90:	mls	r0, r0, r8, r4
   25e94:	mov	r2, r5
   25e98:	mov	r9, r1
   25e9c:	add	r0, r0, r0, lsl #2
   25ea0:	add	r0, r7, r0, lsl #1
   25ea4:	udiv	r7, r0, r8
   25ea8:	mls	r0, r7, r8, r0
   25eac:	lsl	r0, r0, #1
   25eb0:	orr	r0, r0, r5, lsr #1
   25eb4:	cmp	r0, r8
   25eb8:	bcs	25ecc <__assert_fail@plt+0x1341c>
   25ebc:	rsb	r1, r2, #0
   25ec0:	subs	ip, r0, r1
   25ec4:	movwne	ip, #1
   25ec8:	b	25edc <__assert_fail@plt+0x1342c>
   25ecc:	add	r0, r0, r2
   25ed0:	mov	ip, #2
   25ed4:	cmp	r8, r0
   25ed8:	movwcc	ip, #3
   25edc:	ldr	r4, [sp, #36]	; 0x24
   25ee0:	subs	r0, sl, r8
   25ee4:	mov	r3, #5
   25ee8:	sbcs	r0, r9, #0
   25eec:	bcc	25cf4 <__assert_fail@plt+0x13244>
   25ef0:	mov	r0, sl
   25ef4:	mov	r1, r9
   25ef8:	mov	r2, r8
   25efc:	mov	r3, #0
   25f00:	mov	r4, ip
   25f04:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   25f08:	mov	r2, r4
   25f0c:	mov	r4, r0
   25f10:	mls	r0, r0, r8, sl
   25f14:	mov	r9, r1
   25f18:	add	r0, r0, r0, lsl #2
   25f1c:	add	r0, r7, r0, lsl #1
   25f20:	udiv	r7, r0, r8
   25f24:	mls	r0, r7, r8, r0
   25f28:	lsl	r0, r0, #1
   25f2c:	orr	r0, r0, r2, lsr #1
   25f30:	cmp	r0, r8
   25f34:	bcs	26174 <__assert_fail@plt+0x136c4>
   25f38:	rsb	r1, r2, #0
   25f3c:	subs	ip, r0, r1
   25f40:	movwne	ip, #1
   25f44:	subs	r0, r4, r8
   25f48:	mov	r3, #6
   25f4c:	sbcs	r0, r9, #0
   25f50:	bcs	26194 <__assert_fail@plt+0x136e4>
   25f54:	mov	sl, r4
   25f58:	ldr	r4, [sp, #36]	; 0x24
   25f5c:	mov	r5, r6
   25f60:	rsbs	r0, sl, #9
   25f64:	rscs	r0, r9, #0
   25f68:	bcs	25d04 <__assert_fail@plt+0x13254>
   25f6c:	ldr	r6, [sp, #28]
   25f70:	cmp	r5, #0
   25f74:	bne	259c0 <__assert_fail@plt+0x12f10>
   25f78:	add	r0, r7, ip
   25f7c:	cmp	r0, #1
   25f80:	blt	25fe8 <__assert_fail@plt+0x13538>
   25f84:	adds	sl, sl, #1
   25f88:	adc	r9, r9, #0
   25f8c:	cmp	r3, #7
   25f90:	bgt	25fe8 <__assert_fail@plt+0x13538>
   25f94:	cmp	r4, #0
   25f98:	beq	25fe8 <__assert_fail@plt+0x13538>
   25f9c:	ldr	r7, [sp, #28]
   25fa0:	eor	r0, sl, r8
   25fa4:	orrs	r0, r0, r9
   25fa8:	bne	25fec <__assert_fail@plt+0x1353c>
   25fac:	ldr	r0, [sp, #32]
   25fb0:	add	r3, r3, #1
   25fb4:	mov	r9, #0
   25fb8:	mov	sl, #1
   25fbc:	str	r3, [sp, #20]
   25fc0:	tst	r0, #8
   25fc4:	bne	25ff0 <__assert_fail@plt+0x13540>
   25fc8:	ldr	r2, [sp, #4]
   25fcc:	mov	r0, #48	; 0x30
   25fd0:	ldr	r1, [sp]
   25fd4:	strb	r0, [r6, #-1]!
   25fd8:	sub	r6, r6, r2
   25fdc:	mov	r0, r6
   25fe0:	bl	124e0 <memcpy@plt>
   25fe4:	b	25ff0 <__assert_fail@plt+0x13540>
   25fe8:	ldr	r7, [sp, #28]
   25fec:	str	r3, [sp, #20]
   25ff0:	mov	r8, r6
   25ff4:	mov	r0, sl
   25ff8:	mov	r1, r9
   25ffc:	mov	r2, #10
   26000:	mov	r3, #0
   26004:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   26008:	add	r2, r0, r0, lsl #2
   2600c:	sub	r2, sl, r2, lsl #1
   26010:	orr	r2, r2, #48	; 0x30
   26014:	strb	r2, [r8, #-1]!
   26018:	rsbs	r2, sl, #9
   2601c:	mov	sl, r0
   26020:	rscs	r2, r9, #0
   26024:	mov	r9, r1
   26028:	bcc	25ff4 <__assert_fail@plt+0x13544>
   2602c:	ldr	sl, [sp, #24]
   26030:	ldr	r5, [sp, #32]
   26034:	ldr	r9, [fp, #16]
   26038:	tst	r5, #4
   2603c:	beq	25a48 <__assert_fail@plt+0x12f98>
   26040:	ldr	r9, [sp, #44]	; 0x2c
   26044:	mov	r5, r8
   26048:	sub	r4, r6, r8
   2604c:	mov	r0, r9
   26050:	bl	127bc <strlen@plt>
   26054:	add	r8, sp, #48	; 0x30
   26058:	str	r0, [sp, #40]	; 0x28
   2605c:	mov	r1, r5
   26060:	mov	r2, r4
   26064:	mov	r0, r8
   26068:	bl	124e0 <memcpy@plt>
   2606c:	ldr	r5, [sp, #8]
   26070:	ldrb	r7, [r5]
   26074:	cmp	r7, #255	; 0xff
   26078:	mov	sl, r7
   2607c:	moveq	sl, r4
   26080:	cmp	r7, #0
   26084:	mvneq	sl, #0
   26088:	cmp	sl, r4
   2608c:	movhi	sl, r4
   26090:	sub	r0, r6, sl
   26094:	sub	r6, r4, sl
   26098:	mov	r2, sl
   2609c:	add	r1, r8, r6
   260a0:	mov	r8, r0
   260a4:	bl	124e0 <memcpy@plt>
   260a8:	cmp	r6, #0
   260ac:	beq	2613c <__assert_fail@plt+0x1368c>
   260b0:	clz	r0, r7
   260b4:	lsr	r9, r0, #5
   260b8:	ldr	r0, [sp, #40]	; 0x28
   260bc:	rsb	r0, r0, #0
   260c0:	str	r0, [sp, #36]	; 0x24
   260c4:	ldr	r0, [sp, #36]	; 0x24
   260c8:	ldr	r1, [sp, #44]	; 0x2c
   260cc:	ldr	r2, [sp, #40]	; 0x28
   260d0:	add	r4, r8, r0
   260d4:	mov	r0, r4
   260d8:	bl	124e0 <memcpy@plt>
   260dc:	tst	r9, #1
   260e0:	add	r0, sp, #48	; 0x30
   260e4:	addeq	r5, r5, #1
   260e8:	mov	r9, r5
   260ec:	ldrb	r5, [r5]
   260f0:	cmp	r5, #255	; 0xff
   260f4:	mov	r7, r5
   260f8:	moveq	r7, r6
   260fc:	cmp	r5, #0
   26100:	moveq	r7, sl
   26104:	cmp	r6, r7
   26108:	movcc	r7, r6
   2610c:	sub	r6, r6, r7
   26110:	sub	r8, r4, r7
   26114:	mov	r2, r7
   26118:	add	r1, r0, r6
   2611c:	mov	r0, r8
   26120:	bl	124e0 <memcpy@plt>
   26124:	clz	r0, r5
   26128:	mov	r5, r9
   2612c:	cmp	r6, #0
   26130:	mov	sl, r7
   26134:	lsr	r9, r0, #5
   26138:	bne	260c4 <__assert_fail@plt+0x13614>
   2613c:	ldr	r7, [sp, #28]
   26140:	ldr	sl, [sp, #24]
   26144:	ldr	r5, [sp, #32]
   26148:	ldr	r9, [fp, #16]
   2614c:	ldr	r3, [sp, #20]
   26150:	tst	r5, #128	; 0x80
   26154:	bne	25a54 <__assert_fail@plt+0x12fa4>
   26158:	mov	r0, #0
   2615c:	strb	r0, [r7]
   26160:	mov	r0, r8
   26164:	sub	sp, fp, #48	; 0x30
   26168:	vpop	{d8-d9}
   2616c:	add	sp, sp, #4
   26170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26174:	add	r0, r0, r2
   26178:	mov	ip, #2
   2617c:	cmp	r8, r0
   26180:	movwcc	ip, #3
   26184:	subs	r0, r4, r8
   26188:	mov	r3, #6
   2618c:	sbcs	r0, r9, #0
   26190:	bcc	25f54 <__assert_fail@plt+0x134a4>
   26194:	mov	r0, r4
   26198:	mov	r1, r9
   2619c:	mov	r2, r8
   261a0:	mov	r3, #0
   261a4:	mov	r5, ip
   261a8:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   261ac:	mov	r6, r8
   261b0:	mov	r8, r0
   261b4:	mov	r2, r5
   261b8:	mov	r9, r1
   261bc:	mls	r0, r0, r6, r4
   261c0:	add	r0, r0, r0, lsl #2
   261c4:	add	r0, r7, r0, lsl #1
   261c8:	udiv	r4, r0, r6
   261cc:	mls	r0, r4, r6, r0
   261d0:	lsl	r0, r0, #1
   261d4:	orr	r0, r0, r2, lsr #1
   261d8:	cmp	r0, r6
   261dc:	bcs	26220 <__assert_fail@plt+0x13770>
   261e0:	rsb	r1, r2, #0
   261e4:	subs	ip, r0, r1
   261e8:	movwne	ip, #1
   261ec:	subs	r0, r8, r6
   261f0:	mov	r3, #7
   261f4:	sbcs	r0, r9, #0
   261f8:	bcs	26240 <__assert_fail@plt+0x13790>
   261fc:	mov	r7, r4
   26200:	ldr	r5, [sp, #40]	; 0x28
   26204:	ldr	r4, [sp, #36]	; 0x24
   26208:	mov	sl, r8
   2620c:	mov	r8, r6
   26210:	rsbs	r0, sl, #9
   26214:	rscs	r0, r9, #0
   26218:	bcc	25f6c <__assert_fail@plt+0x134bc>
   2621c:	b	25d04 <__assert_fail@plt+0x13254>
   26220:	add	r0, r0, r2
   26224:	mov	ip, #2
   26228:	cmp	r6, r0
   2622c:	movwcc	ip, #3
   26230:	subs	r0, r8, r6
   26234:	mov	r3, #7
   26238:	sbcs	r0, r9, #0
   2623c:	bcc	261fc <__assert_fail@plt+0x1374c>
   26240:	mov	r0, r8
   26244:	mov	r1, r9
   26248:	mov	r2, r6
   2624c:	mov	r3, #0
   26250:	mov	r5, ip
   26254:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   26258:	mov	sl, r0
   2625c:	mls	r0, r0, r6, r8
   26260:	mov	r2, r5
   26264:	mov	r9, r1
   26268:	mov	r8, r6
   2626c:	add	r0, r0, r0, lsl #2
   26270:	add	r0, r4, r0, lsl #1
   26274:	udiv	r7, r0, r6
   26278:	mls	r0, r7, r6, r0
   2627c:	lsl	r0, r0, #1
   26280:	orr	r0, r0, r5, lsr #1
   26284:	cmp	r0, r6
   26288:	bcs	2629c <__assert_fail@plt+0x137ec>
   2628c:	rsb	r1, r2, #0
   26290:	subs	ip, r0, r1
   26294:	movwne	ip, #1
   26298:	b	262ac <__assert_fail@plt+0x137fc>
   2629c:	add	r0, r0, r2
   262a0:	mov	ip, #2
   262a4:	cmp	r8, r0
   262a8:	movwcc	ip, #3
   262ac:	ldr	r5, [sp, #40]	; 0x28
   262b0:	ldr	r4, [sp, #36]	; 0x24
   262b4:	mov	r3, #8
   262b8:	rsbs	r0, sl, #9
   262bc:	rscs	r0, r9, #0
   262c0:	bcc	25f6c <__assert_fail@plt+0x134bc>
   262c4:	b	25d04 <__assert_fail@plt+0x13254>
   262c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   262cc:	add	fp, sp, #24
   262d0:	sub	sp, sp, #8
   262d4:	mov	r4, r2
   262d8:	mov	r8, r1
   262dc:	cmp	r0, #0
   262e0:	bne	2630c <__assert_fail@plt+0x1385c>
   262e4:	movw	r0, #61530	; 0xf05a
   262e8:	movt	r0, #4
   262ec:	bl	126d8 <getenv@plt>
   262f0:	cmp	r0, #0
   262f4:	bne	2630c <__assert_fail@plt+0x1385c>
   262f8:	movw	r0, #6872	; 0x1ad8
   262fc:	movt	r0, #5
   26300:	bl	126d8 <getenv@plt>
   26304:	cmp	r0, #0
   26308:	beq	26438 <__assert_fail@plt+0x13988>
   2630c:	mov	r6, r0
   26310:	movw	r7, #6944	; 0x1b20
   26314:	movw	r1, #6932	; 0x1b14
   26318:	mov	r3, #4
   2631c:	ldrb	r5, [r6], #1
   26320:	movt	r7, #5
   26324:	movt	r1, #5
   26328:	mov	r2, r7
   2632c:	cmp	r5, #39	; 0x27
   26330:	movne	r6, r0
   26334:	mov	r0, r6
   26338:	bl	4bc24 <__assert_fail@plt+0x39174>
   2633c:	sub	r1, r5, #39	; 0x27
   26340:	cmp	r0, #0
   26344:	clz	r1, r1
   26348:	lsr	r1, r1, #5
   2634c:	lsl	r5, r1, #2
   26350:	bmi	26388 <__assert_fail@plt+0x138d8>
   26354:	ldr	r0, [r7, r0, lsl #2]
   26358:	mov	r2, #1
   2635c:	mov	r1, #0
   26360:	str	r2, [r4]
   26364:	str	r1, [r4, #4]
   26368:	orr	r1, r0, r5
   2636c:	mov	r0, #0
   26370:	str	r1, [r8]
   26374:	ldrd	r2, [r4]
   26378:	orrs	r1, r2, r3
   2637c:	beq	263c4 <__assert_fail@plt+0x13914>
   26380:	sub	sp, fp, #24
   26384:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   26388:	movw	r0, #6882	; 0x1ae2
   2638c:	add	r1, sp, #4
   26390:	mov	r2, #0
   26394:	mov	r3, r4
   26398:	mov	r7, #0
   2639c:	movt	r0, #5
   263a0:	str	r0, [sp]
   263a4:	mov	r0, r6
   263a8:	bl	3158c <__assert_fail@plt+0x1eadc>
   263ac:	cmp	r0, #0
   263b0:	beq	263f4 <__assert_fail@plt+0x13944>
   263b4:	str	r7, [r8]
   263b8:	ldrd	r2, [r4]
   263bc:	orrs	r1, r2, r3
   263c0:	bne	26380 <__assert_fail@plt+0x138d0>
   263c4:	movw	r0, #61509	; 0xf045
   263c8:	movt	r0, #4
   263cc:	bl	126d8 <getenv@plt>
   263d0:	cmp	r0, #0
   263d4:	mov	r2, #512	; 0x200
   263d8:	mov	r0, #4
   263dc:	mov	r1, #0
   263e0:	movweq	r2, #1024	; 0x400
   263e4:	str	r2, [r4]
   263e8:	str	r1, [r4, #4]
   263ec:	sub	sp, fp, #24
   263f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   263f4:	ldrb	r0, [r6]
   263f8:	sub	r0, r0, #48	; 0x30
   263fc:	uxtb	r0, r0
   26400:	cmp	r0, #10
   26404:	bcc	26430 <__assert_fail@plt+0x13980>
   26408:	ldr	r0, [sp, #4]
   2640c:	cmp	r0, r6
   26410:	beq	26460 <__assert_fail@plt+0x139b0>
   26414:	ldrb	r2, [r6, #1]
   26418:	add	r1, r6, #1
   2641c:	mov	r6, r1
   26420:	sub	r2, r2, #48	; 0x30
   26424:	uxtb	r2, r2
   26428:	cmp	r2, #10
   2642c:	bcs	2640c <__assert_fail@plt+0x1395c>
   26430:	mov	r1, r5
   26434:	b	2636c <__assert_fail@plt+0x138bc>
   26438:	movw	r0, #61509	; 0xf045
   2643c:	movt	r0, #4
   26440:	bl	126d8 <getenv@plt>
   26444:	cmp	r0, #0
   26448:	mov	r2, #512	; 0x200
   2644c:	mov	r1, #0
   26450:	movweq	r2, #1024	; 0x400
   26454:	str	r2, [r4]
   26458:	str	r1, [r4, #4]
   2645c:	b	2636c <__assert_fail@plt+0x138bc>
   26460:	ldrb	r2, [r0, #-1]
   26464:	orr	r1, r5, #384	; 0x180
   26468:	cmp	r2, #66	; 0x42
   2646c:	mov	r2, r1
   26470:	orrne	r2, r5, #128	; 0x80
   26474:	bne	26488 <__assert_fail@plt+0x139d8>
   26478:	ldrb	r0, [r0, #-2]
   2647c:	cmp	r0, #105	; 0x69
   26480:	orreq	r1, r2, #32
   26484:	b	2636c <__assert_fail@plt+0x138bc>
   26488:	orr	r1, r2, #32
   2648c:	b	2636c <__assert_fail@plt+0x138bc>
   26490:	push	{r4, r5, r6, r7, fp, lr}
   26494:	add	fp, sp, #16
   26498:	movw	r7, #19708	; 0x4cfc
   2649c:	mov	r4, r0
   264a0:	movt	r7, #6
   264a4:	ldr	r5, [r7]
   264a8:	cmp	r5, #0
   264ac:	beq	264c8 <__assert_fail@plt+0x13a18>
   264b0:	ldr	r0, [r5]
   264b4:	cmp	r0, r4
   264b8:	beq	2651c <__assert_fail@plt+0x13a6c>
   264bc:	ldr	r5, [r5, #4]
   264c0:	cmp	r5, #0
   264c4:	bne	264b0 <__assert_fail@plt+0x13a00>
   264c8:	mov	r0, r4
   264cc:	bl	12414 <getpwuid@plt>
   264d0:	cmp	r0, #0
   264d4:	beq	264e0 <__assert_fail@plt+0x13a30>
   264d8:	ldr	r6, [r0]
   264dc:	b	264e8 <__assert_fail@plt+0x13a38>
   264e0:	movw	r6, #61103	; 0xeeaf
   264e4:	movt	r6, #4
   264e8:	mov	r0, r6
   264ec:	bl	127bc <strlen@plt>
   264f0:	add	r0, r0, #12
   264f4:	bic	r0, r0, #3
   264f8:	bl	306e8 <__assert_fail@plt+0x1dc38>
   264fc:	mov	r5, r0
   26500:	str	r4, [r0]
   26504:	add	r0, r0, #8
   26508:	mov	r1, r6
   2650c:	bl	12660 <strcpy@plt>
   26510:	ldr	r0, [r7]
   26514:	str	r5, [r7]
   26518:	str	r0, [r5, #4]
   2651c:	ldrb	r0, [r5, #8]!
   26520:	cmp	r0, #0
   26524:	moveq	r5, r0
   26528:	mov	r0, r5
   2652c:	pop	{r4, r5, r6, r7, fp, pc}
   26530:	push	{r4, r5, r6, r7, fp, lr}
   26534:	add	fp, sp, #16
   26538:	movw	r7, #19708	; 0x4cfc
   2653c:	mov	r4, r0
   26540:	movt	r7, #6
   26544:	ldr	r5, [r7]
   26548:	cmp	r5, #0
   2654c:	beq	26598 <__assert_fail@plt+0x13ae8>
   26550:	ldrb	r6, [r4]
   26554:	mov	r0, r5
   26558:	ldrb	r1, [r0, #8]!
   2655c:	cmp	r1, r6
   26560:	beq	26580 <__assert_fail@plt+0x13ad0>
   26564:	ldr	r5, [r5, #4]
   26568:	cmp	r5, #0
   2656c:	beq	26598 <__assert_fail@plt+0x13ae8>
   26570:	mov	r0, r5
   26574:	ldrb	r1, [r0, #8]!
   26578:	cmp	r1, r6
   2657c:	bne	26564 <__assert_fail@plt+0x13ab4>
   26580:	mov	r1, r4
   26584:	bl	123fc <strcmp@plt>
   26588:	cmp	r0, #0
   2658c:	bne	26564 <__assert_fail@plt+0x13ab4>
   26590:	mov	r0, r5
   26594:	pop	{r4, r5, r6, r7, fp, pc}
   26598:	ldr	r5, [r7, #4]
   2659c:	cmp	r5, #0
   265a0:	beq	265f0 <__assert_fail@plt+0x13b40>
   265a4:	ldrb	r6, [r4]
   265a8:	mov	r0, r5
   265ac:	ldrb	r1, [r0, #8]!
   265b0:	cmp	r1, r6
   265b4:	beq	265d4 <__assert_fail@plt+0x13b24>
   265b8:	ldr	r5, [r5, #4]
   265bc:	cmp	r5, #0
   265c0:	beq	265f0 <__assert_fail@plt+0x13b40>
   265c4:	mov	r0, r5
   265c8:	ldrb	r1, [r0, #8]!
   265cc:	cmp	r1, r6
   265d0:	bne	265b8 <__assert_fail@plt+0x13b08>
   265d4:	mov	r1, r4
   265d8:	bl	123fc <strcmp@plt>
   265dc:	cmp	r0, #0
   265e0:	bne	265b8 <__assert_fail@plt+0x13b08>
   265e4:	mov	r5, #0
   265e8:	mov	r0, r5
   265ec:	pop	{r4, r5, r6, r7, fp, pc}
   265f0:	mov	r0, r4
   265f4:	bl	123d8 <getpwnam@plt>
   265f8:	mov	r6, r0
   265fc:	mov	r0, r4
   26600:	bl	127bc <strlen@plt>
   26604:	add	r0, r0, #12
   26608:	bic	r0, r0, #3
   2660c:	bl	306e8 <__assert_fail@plt+0x1dc38>
   26610:	mov	r5, r0
   26614:	add	r0, r0, #8
   26618:	mov	r1, r4
   2661c:	bl	12660 <strcpy@plt>
   26620:	cmp	r6, #0
   26624:	beq	26640 <__assert_fail@plt+0x13b90>
   26628:	ldr	r0, [r6, #8]
   2662c:	ldr	r1, [r7]
   26630:	str	r5, [r7]
   26634:	stm	r5, {r0, r1}
   26638:	mov	r0, r5
   2663c:	pop	{r4, r5, r6, r7, fp, pc}
   26640:	ldr	r0, [r7, #4]
   26644:	str	r5, [r7, #4]
   26648:	str	r0, [r5, #4]
   2664c:	mov	r5, #0
   26650:	mov	r0, r5
   26654:	pop	{r4, r5, r6, r7, fp, pc}
   26658:	push	{r4, r5, r6, r7, fp, lr}
   2665c:	add	fp, sp, #16
   26660:	movw	r7, #19708	; 0x4cfc
   26664:	mov	r4, r0
   26668:	movt	r7, #6
   2666c:	ldr	r5, [r7, #8]
   26670:	cmp	r5, #0
   26674:	beq	26690 <__assert_fail@plt+0x13be0>
   26678:	ldr	r0, [r5]
   2667c:	cmp	r0, r4
   26680:	beq	266e4 <__assert_fail@plt+0x13c34>
   26684:	ldr	r5, [r5, #4]
   26688:	cmp	r5, #0
   2668c:	bne	26678 <__assert_fail@plt+0x13bc8>
   26690:	mov	r0, r4
   26694:	bl	12a8c <getgrgid@plt>
   26698:	cmp	r0, #0
   2669c:	beq	266a8 <__assert_fail@plt+0x13bf8>
   266a0:	ldr	r6, [r0]
   266a4:	b	266b0 <__assert_fail@plt+0x13c00>
   266a8:	movw	r6, #61103	; 0xeeaf
   266ac:	movt	r6, #4
   266b0:	mov	r0, r6
   266b4:	bl	127bc <strlen@plt>
   266b8:	add	r0, r0, #12
   266bc:	bic	r0, r0, #3
   266c0:	bl	306e8 <__assert_fail@plt+0x1dc38>
   266c4:	mov	r5, r0
   266c8:	str	r4, [r0]
   266cc:	add	r0, r0, #8
   266d0:	mov	r1, r6
   266d4:	bl	12660 <strcpy@plt>
   266d8:	ldr	r0, [r7, #8]
   266dc:	str	r5, [r7, #8]
   266e0:	str	r0, [r5, #4]
   266e4:	ldrb	r0, [r5, #8]!
   266e8:	cmp	r0, #0
   266ec:	moveq	r5, r0
   266f0:	mov	r0, r5
   266f4:	pop	{r4, r5, r6, r7, fp, pc}
   266f8:	push	{r4, r5, r6, r7, fp, lr}
   266fc:	add	fp, sp, #16
   26700:	movw	r7, #19708	; 0x4cfc
   26704:	mov	r4, r0
   26708:	movt	r7, #6
   2670c:	ldr	r5, [r7, #8]
   26710:	cmp	r5, #0
   26714:	beq	26760 <__assert_fail@plt+0x13cb0>
   26718:	ldrb	r6, [r4]
   2671c:	mov	r0, r5
   26720:	ldrb	r1, [r0, #8]!
   26724:	cmp	r1, r6
   26728:	beq	26748 <__assert_fail@plt+0x13c98>
   2672c:	ldr	r5, [r5, #4]
   26730:	cmp	r5, #0
   26734:	beq	26760 <__assert_fail@plt+0x13cb0>
   26738:	mov	r0, r5
   2673c:	ldrb	r1, [r0, #8]!
   26740:	cmp	r1, r6
   26744:	bne	2672c <__assert_fail@plt+0x13c7c>
   26748:	mov	r1, r4
   2674c:	bl	123fc <strcmp@plt>
   26750:	cmp	r0, #0
   26754:	bne	2672c <__assert_fail@plt+0x13c7c>
   26758:	mov	r0, r5
   2675c:	pop	{r4, r5, r6, r7, fp, pc}
   26760:	ldr	r5, [r7, #12]
   26764:	cmp	r5, #0
   26768:	beq	267b8 <__assert_fail@plt+0x13d08>
   2676c:	ldrb	r6, [r4]
   26770:	mov	r0, r5
   26774:	ldrb	r1, [r0, #8]!
   26778:	cmp	r1, r6
   2677c:	beq	2679c <__assert_fail@plt+0x13cec>
   26780:	ldr	r5, [r5, #4]
   26784:	cmp	r5, #0
   26788:	beq	267b8 <__assert_fail@plt+0x13d08>
   2678c:	mov	r0, r5
   26790:	ldrb	r1, [r0, #8]!
   26794:	cmp	r1, r6
   26798:	bne	26780 <__assert_fail@plt+0x13cd0>
   2679c:	mov	r1, r4
   267a0:	bl	123fc <strcmp@plt>
   267a4:	cmp	r0, #0
   267a8:	bne	26780 <__assert_fail@plt+0x13cd0>
   267ac:	mov	r5, #0
   267b0:	mov	r0, r5
   267b4:	pop	{r4, r5, r6, r7, fp, pc}
   267b8:	mov	r0, r4
   267bc:	bl	12a98 <getgrnam@plt>
   267c0:	mov	r6, r0
   267c4:	mov	r0, r4
   267c8:	bl	127bc <strlen@plt>
   267cc:	add	r0, r0, #12
   267d0:	bic	r0, r0, #3
   267d4:	bl	306e8 <__assert_fail@plt+0x1dc38>
   267d8:	mov	r5, r0
   267dc:	add	r0, r0, #8
   267e0:	mov	r1, r4
   267e4:	bl	12660 <strcpy@plt>
   267e8:	cmp	r6, #0
   267ec:	beq	26808 <__assert_fail@plt+0x13d58>
   267f0:	ldr	r0, [r6, #8]
   267f4:	ldr	r1, [r7, #8]
   267f8:	str	r5, [r7, #8]
   267fc:	stm	r5, {r0, r1}
   26800:	mov	r0, r5
   26804:	pop	{r4, r5, r6, r7, fp, pc}
   26808:	ldr	r0, [r7, #12]
   2680c:	str	r5, [r7, #12]
   26810:	str	r0, [r5, #4]
   26814:	mov	r5, #0
   26818:	mov	r0, r5
   2681c:	pop	{r4, r5, r6, r7, fp, pc}
   26820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26824:	add	fp, sp, #28
   26828:	sub	sp, sp, #308	; 0x134
   2682c:	mov	r6, r1
   26830:	mov	sl, r0
   26834:	bl	12648 <__ctype_get_mb_cur_max@plt>
   26838:	cmp	r0, #2
   2683c:	bcc	26bf0 <__assert_fail@plt+0x14140>
   26840:	mov	r4, #0
   26844:	sub	r0, fp, #88	; 0x58
   26848:	str	r4, [fp, #-80]	; 0xffffffb0
   2684c:	str	r4, [fp, #-84]	; 0xffffffac
   26850:	strb	r4, [fp, #-76]	; 0xffffffb4
   26854:	strb	r4, [fp, #-88]	; 0xffffffa8
   26858:	str	r6, [fp, #-72]	; 0xffffffb8
   2685c:	bl	27984 <__assert_fail@plt+0x14ed4>
   26860:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   26864:	cmp	r0, #0
   26868:	beq	26878 <__assert_fail@plt+0x13dc8>
   2686c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   26870:	cmp	r0, #0
   26874:	beq	26d18 <__assert_fail@plt+0x14268>
   26878:	add	r0, sp, #136	; 0x88
   2687c:	str	r4, [fp, #-136]	; 0xffffff78
   26880:	str	r4, [fp, #-140]	; 0xffffff74
   26884:	str	r6, [fp, #-128]	; 0xffffff80
   26888:	strb	r4, [fp, #-132]	; 0xffffff7c
   2688c:	str	r6, [sp, #16]
   26890:	strb	r4, [fp, #-144]	; 0xffffff70
   26894:	str	r4, [sp, #144]	; 0x90
   26898:	str	r4, [sp, #140]	; 0x8c
   2689c:	str	sl, [sp, #152]	; 0x98
   268a0:	strb	r4, [sp, #148]	; 0x94
   268a4:	strb	r4, [sp, #136]	; 0x88
   268a8:	bl	27984 <__assert_fail@plt+0x14ed4>
   268ac:	ldrb	r0, [sp, #160]	; 0xa0
   268b0:	cmp	r0, #0
   268b4:	beq	268c4 <__assert_fail@plt+0x13e14>
   268b8:	ldr	r0, [sp, #164]	; 0xa4
   268bc:	cmp	r0, #0
   268c0:	beq	26d3c <__assert_fail@plt+0x1428c>
   268c4:	add	r0, sp, #24
   268c8:	mov	r8, #1
   268cc:	mov	r6, #0
   268d0:	sub	r5, fp, #144	; 0x90
   268d4:	mov	r1, #0
   268d8:	mov	r7, #0
   268dc:	mov	r9, #0
   268e0:	add	r0, r0, #4
   268e4:	str	r0, [sp, #12]
   268e8:	add	r0, sp, #136	; 0x88
   268ec:	add	r0, r0, #16
   268f0:	str	r0, [sp, #8]
   268f4:	add	r0, r9, r9, lsl #2
   268f8:	mov	r4, r7
   268fc:	cmp	r7, r0
   26900:	bcc	269ac <__assert_fail@plt+0x13efc>
   26904:	tst	r8, #1
   26908:	beq	269ac <__assert_fail@plt+0x13efc>
   2690c:	cmp	r9, #10
   26910:	bcc	269ac <__assert_fail@plt+0x13efc>
   26914:	subs	r0, r4, r1
   26918:	beq	26960 <__assert_fail@plt+0x13eb0>
   2691c:	sub	r7, r1, r4
   26920:	b	26940 <__assert_fail@plt+0x13e90>
   26924:	strb	r6, [fp, #-132]	; 0xffffff7c
   26928:	adds	r7, r7, #1
   2692c:	ldr	r0, [fp, #-128]	; 0xffffff80
   26930:	ldr	r1, [fp, #-124]	; 0xffffff84
   26934:	add	r0, r0, r1
   26938:	str	r0, [fp, #-128]	; 0xffffff80
   2693c:	bcs	26960 <__assert_fail@plt+0x13eb0>
   26940:	mov	r0, r5
   26944:	bl	27984 <__assert_fail@plt+0x14ed4>
   26948:	ldrb	r0, [fp, #-120]	; 0xffffff88
   2694c:	cmp	r0, #0
   26950:	beq	26924 <__assert_fail@plt+0x13e74>
   26954:	ldr	r0, [fp, #-116]	; 0xffffff8c
   26958:	cmp	r0, #0
   2695c:	bne	26924 <__assert_fail@plt+0x13e74>
   26960:	mov	r0, r5
   26964:	bl	27984 <__assert_fail@plt+0x14ed4>
   26968:	ldrb	r0, [fp, #-120]	; 0xffffff88
   2696c:	cmp	r0, #0
   26970:	beq	269a8 <__assert_fail@plt+0x13ef8>
   26974:	ldr	r0, [fp, #-116]	; 0xffffff8c
   26978:	mov	r1, r4
   2697c:	cmp	r0, #0
   26980:	bne	269ac <__assert_fail@plt+0x13efc>
   26984:	ldr	r1, [sp, #16]
   26988:	mov	r0, sl
   2698c:	add	r2, sp, #80	; 0x50
   26990:	bl	26d7c <__assert_fail@plt+0x142cc>
   26994:	mov	r8, #0
   26998:	cmp	r0, #0
   2699c:	mov	r1, r4
   269a0:	beq	269ac <__assert_fail@plt+0x13efc>
   269a4:	b	26d68 <__assert_fail@plt+0x142b8>
   269a8:	mov	r1, r4
   269ac:	ldrb	r0, [sp, #160]	; 0xa0
   269b0:	add	r7, r4, #1
   269b4:	str	r1, [sp, #20]
   269b8:	cmp	r0, #0
   269bc:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   269c0:	cmpne	r0, #0
   269c4:	bne	269f0 <__assert_fail@plt+0x13f40>
   269c8:	ldr	r2, [sp, #156]	; 0x9c
   269cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   269d0:	cmp	r2, r0
   269d4:	bne	26bac <__assert_fail@plt+0x140fc>
   269d8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   269dc:	ldr	r0, [sp, #152]	; 0x98
   269e0:	bl	127a4 <bcmp@plt>
   269e4:	cmp	r0, #0
   269e8:	bne	26bac <__assert_fail@plt+0x140fc>
   269ec:	b	26a00 <__assert_fail@plt+0x13f50>
   269f0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   269f4:	ldr	r1, [sp, #164]	; 0xa4
   269f8:	cmp	r1, r0
   269fc:	bne	26bac <__assert_fail@plt+0x140fc>
   26a00:	add	r2, sp, #136	; 0x88
   26a04:	mov	r1, #48	; 0x30
   26a08:	add	r3, sp, #80	; 0x50
   26a0c:	str	r9, [sp]
   26a10:	str	r8, [sp, #4]
   26a14:	mov	r0, r2
   26a18:	add	r2, r2, #32
   26a1c:	vld1.64	{d16-d17}, [r0], r1
   26a20:	ldr	r1, [sp, #8]
   26a24:	vld1.64	{d20-d21}, [r2]
   26a28:	vldr	d22, [r0]
   26a2c:	add	r0, r3, #32
   26a30:	vld1.64	{d18-d19}, [r1]
   26a34:	add	r1, r3, #16
   26a38:	vst1.64	{d20-d21}, [r0]
   26a3c:	mov	r0, r3
   26a40:	vst1.64	{d18-d19}, [r1]
   26a44:	mov	r1, #12
   26a48:	vst1.64	{d16-d17}, [r0], r1
   26a4c:	strb	r6, [r0]
   26a50:	ldr	r0, [sp, #16]
   26a54:	vstr	d22, [sp, #128]	; 0x80
   26a58:	ldr	r1, [sp, #100]	; 0x64
   26a5c:	str	r0, [sp, #40]	; 0x28
   26a60:	ldr	r0, [sp, #96]	; 0x60
   26a64:	strb	r6, [sp, #24]
   26a68:	add	r0, r0, r1
   26a6c:	str	r0, [sp, #96]	; 0x60
   26a70:	ldr	r0, [sp, #12]
   26a74:	str	r6, [r0]
   26a78:	str	r6, [r0, #4]
   26a7c:	add	r0, sp, #24
   26a80:	strb	r6, [sp, #36]	; 0x24
   26a84:	bl	27984 <__assert_fail@plt+0x14ed4>
   26a88:	ldrb	r0, [sp, #48]	; 0x30
   26a8c:	cmp	r0, #0
   26a90:	beq	26aa0 <__assert_fail@plt+0x13ff0>
   26a94:	ldr	r0, [sp, #52]	; 0x34
   26a98:	cmp	r0, #0
   26a9c:	beq	26d78 <__assert_fail@plt+0x142c8>
   26aa0:	strb	r6, [sp, #36]	; 0x24
   26aa4:	ldr	r0, [sp, #40]	; 0x28
   26aa8:	ldr	r1, [sp, #44]	; 0x2c
   26aac:	add	r0, r0, r1
   26ab0:	str	r0, [sp, #40]	; 0x28
   26ab4:	add	r0, sp, #24
   26ab8:	bl	27984 <__assert_fail@plt+0x14ed4>
   26abc:	ldrb	r0, [sp, #48]	; 0x30
   26ac0:	cmp	r0, #0
   26ac4:	beq	26ad4 <__assert_fail@plt+0x14024>
   26ac8:	ldr	r0, [sp, #52]	; 0x34
   26acc:	cmp	r0, #0
   26ad0:	beq	26d48 <__assert_fail@plt+0x14298>
   26ad4:	add	r7, r4, #2
   26ad8:	add	r0, sp, #80	; 0x50
   26adc:	bl	27984 <__assert_fail@plt+0x14ed4>
   26ae0:	ldr	r0, [sp, #108]	; 0x6c
   26ae4:	ldrb	r1, [sp, #104]	; 0x68
   26ae8:	cmp	r0, #0
   26aec:	bne	26af8 <__assert_fail@plt+0x14048>
   26af0:	cmp	r1, #0
   26af4:	bne	26d28 <__assert_fail@plt+0x14278>
   26af8:	cmp	r1, #0
   26afc:	ldrbne	r1, [sp, #48]	; 0x30
   26b00:	cmpne	r1, #0
   26b04:	bne	26b40 <__assert_fail@plt+0x14090>
   26b08:	ldr	r4, [sp, #100]	; 0x64
   26b0c:	ldr	r0, [sp, #44]	; 0x2c
   26b10:	cmp	r4, r0
   26b14:	bne	26ba0 <__assert_fail@plt+0x140f0>
   26b18:	ldr	r8, [sp, #40]	; 0x28
   26b1c:	ldr	r9, [sp, #96]	; 0x60
   26b20:	mov	r2, r4
   26b24:	mov	r0, r9
   26b28:	mov	r1, r8
   26b2c:	bl	127a4 <bcmp@plt>
   26b30:	cmp	r0, #0
   26b34:	mov	r0, r4
   26b38:	beq	26b5c <__assert_fail@plt+0x140ac>
   26b3c:	b	26ba0 <__assert_fail@plt+0x140f0>
   26b40:	ldr	r1, [sp, #52]	; 0x34
   26b44:	cmp	r0, r1
   26b48:	bne	26ba0 <__assert_fail@plt+0x140f0>
   26b4c:	ldr	r8, [sp, #40]	; 0x28
   26b50:	ldr	r4, [sp, #44]	; 0x2c
   26b54:	ldr	r9, [sp, #96]	; 0x60
   26b58:	ldr	r0, [sp, #100]	; 0x64
   26b5c:	mov	r1, #0
   26b60:	add	r0, r9, r0
   26b64:	strb	r1, [sp, #92]	; 0x5c
   26b68:	str	r0, [sp, #96]	; 0x60
   26b6c:	add	r0, r8, r4
   26b70:	strb	r1, [sp, #36]	; 0x24
   26b74:	str	r0, [sp, #40]	; 0x28
   26b78:	add	r0, sp, #24
   26b7c:	bl	27984 <__assert_fail@plt+0x14ed4>
   26b80:	ldrb	r0, [sp, #48]	; 0x30
   26b84:	add	r7, r7, #1
   26b88:	cmp	r0, #0
   26b8c:	beq	26ad8 <__assert_fail@plt+0x14028>
   26b90:	ldr	r0, [sp, #52]	; 0x34
   26b94:	cmp	r0, #0
   26b98:	bne	26ad8 <__assert_fail@plt+0x14028>
   26b9c:	b	26d48 <__assert_fail@plt+0x14298>
   26ba0:	ldr	r8, [sp, #4]
   26ba4:	ldr	r9, [sp]
   26ba8:	mov	r6, #0
   26bac:	mov	r4, #0
   26bb0:	add	r9, r9, #1
   26bb4:	strb	r4, [sp, #148]	; 0x94
   26bb8:	ldr	r0, [sp, #152]	; 0x98
   26bbc:	ldr	r1, [sp, #156]	; 0x9c
   26bc0:	add	r0, r0, r1
   26bc4:	str	r0, [sp, #152]	; 0x98
   26bc8:	add	r0, sp, #136	; 0x88
   26bcc:	bl	27984 <__assert_fail@plt+0x14ed4>
   26bd0:	ldrb	r0, [sp, #160]	; 0xa0
   26bd4:	ldr	r1, [sp, #20]
   26bd8:	cmp	r0, #0
   26bdc:	beq	268f4 <__assert_fail@plt+0x13e44>
   26be0:	ldr	r0, [sp, #164]	; 0xa4
   26be4:	cmp	r0, #0
   26be8:	bne	268f4 <__assert_fail@plt+0x13e44>
   26bec:	b	26d3c <__assert_fail@plt+0x1428c>
   26bf0:	ldrb	r5, [r6]
   26bf4:	cmp	r5, #0
   26bf8:	beq	26d38 <__assert_fail@plt+0x14288>
   26bfc:	ldrb	r9, [sl]
   26c00:	cmp	r9, #0
   26c04:	beq	26d28 <__assert_fail@plt+0x14278>
   26c08:	mov	lr, #1
   26c0c:	mov	ip, #0
   26c10:	mov	r3, r6
   26c14:	mov	r7, #0
   26c18:	mov	r8, #0
   26c1c:	add	r0, r8, r8, lsl #2
   26c20:	cmp	r7, r0
   26c24:	bcc	26c7c <__assert_fail@plt+0x141cc>
   26c28:	tst	lr, #1
   26c2c:	beq	26c7c <__assert_fail@plt+0x141cc>
   26c30:	cmp	r8, #10
   26c34:	bcc	26c7c <__assert_fail@plt+0x141cc>
   26c38:	cmp	r3, #0
   26c3c:	beq	26cb8 <__assert_fail@plt+0x14208>
   26c40:	sub	r1, r7, ip
   26c44:	mov	r0, r3
   26c48:	str	r7, [sp, #20]
   26c4c:	mov	r7, r5
   26c50:	mov	r4, lr
   26c54:	mov	r5, r3
   26c58:	bl	128c4 <strnlen@plt>
   26c5c:	mov	r3, r5
   26c60:	mov	r5, r7
   26c64:	ldr	r7, [sp, #20]
   26c68:	mov	lr, r4
   26c6c:	ldrb	r0, [r3, r0]!
   26c70:	mov	ip, r7
   26c74:	cmp	r0, #0
   26c78:	beq	26cb8 <__assert_fail@plt+0x14208>
   26c7c:	uxtb	r0, r9
   26c80:	cmp	r0, r5
   26c84:	bne	26cfc <__assert_fail@plt+0x1424c>
   26c88:	mov	r0, #1
   26c8c:	ldrb	r1, [r6, r0]
   26c90:	cmp	r1, #0
   26c94:	beq	26d18 <__assert_fail@plt+0x14268>
   26c98:	ldrb	r2, [sl, r0]
   26c9c:	cmp	r2, #0
   26ca0:	beq	26d28 <__assert_fail@plt+0x14278>
   26ca4:	add	r0, r0, #1
   26ca8:	cmp	r2, r1
   26cac:	beq	26c8c <__assert_fail@plt+0x141dc>
   26cb0:	add	r7, r7, r0
   26cb4:	b	26d00 <__assert_fail@plt+0x14250>
   26cb8:	mov	r0, r6
   26cbc:	mov	r4, ip
   26cc0:	bl	127bc <strlen@plt>
   26cc4:	mov	r2, r0
   26cc8:	mov	r0, sl
   26ccc:	mov	r1, r6
   26cd0:	sub	r3, fp, #88	; 0x58
   26cd4:	bl	271bc <__assert_fail@plt+0x1470c>
   26cd8:	cmp	r0, #0
   26cdc:	bne	26d58 <__assert_fail@plt+0x142a8>
   26ce0:	ldrb	r9, [sl]
   26ce4:	mov	lr, #0
   26ce8:	mov	r3, #0
   26cec:	mov	ip, r4
   26cf0:	uxtb	r0, r9
   26cf4:	cmp	r0, r5
   26cf8:	beq	26c88 <__assert_fail@plt+0x141d8>
   26cfc:	add	r7, r7, #1
   26d00:	ldrb	r9, [sl, #1]!
   26d04:	add	r8, r8, #1
   26d08:	mov	r4, #0
   26d0c:	cmp	r9, #0
   26d10:	bne	26c1c <__assert_fail@plt+0x1416c>
   26d14:	b	26d3c <__assert_fail@plt+0x1428c>
   26d18:	mov	r4, sl
   26d1c:	mov	r0, r4
   26d20:	sub	sp, fp, #28
   26d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d28:	mov	r4, #0
   26d2c:	mov	r0, r4
   26d30:	sub	sp, fp, #28
   26d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d38:	mov	r4, sl
   26d3c:	mov	r0, r4
   26d40:	sub	sp, fp, #28
   26d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d48:	ldr	r4, [sp, #152]	; 0x98
   26d4c:	mov	r0, r4
   26d50:	sub	sp, fp, #28
   26d54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d58:	ldr	r4, [fp, #-88]	; 0xffffffa8
   26d5c:	mov	r0, r4
   26d60:	sub	sp, fp, #28
   26d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d68:	ldr	r4, [sp, #80]	; 0x50
   26d6c:	mov	r0, r4
   26d70:	sub	sp, fp, #28
   26d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d78:	bl	12a5c <abort@plt>
   26d7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d80:	add	fp, sp, #28
   26d84:	sub	sp, sp, #132	; 0x84
   26d88:	mov	r7, r0
   26d8c:	mov	r0, r1
   26d90:	mov	r6, r2
   26d94:	mov	r4, r1
   26d98:	bl	4c748 <__assert_fail@plt+0x39c98>
   26d9c:	mov	sl, r0
   26da0:	movw	r0, #47662	; 0xba2e
   26da4:	mov	r5, #0
   26da8:	movt	r0, #744	; 0x2e8
   26dac:	cmp	sl, r0
   26db0:	bhi	26de4 <__assert_fail@plt+0x14334>
   26db4:	mov	r0, #44	; 0x2c
   26db8:	mul	r0, sl, r0
   26dbc:	cmp	r0, #4016	; 0xfb0
   26dc0:	bhi	26df0 <__assert_fail@plt+0x14340>
   26dc4:	add	r0, r0, #22
   26dc8:	bic	r0, r0, #7
   26dcc:	sub	r0, sp, r0
   26dd0:	add	r1, r0, #15
   26dd4:	bic	r9, r1, #15
   26dd8:	mov	sp, r0
   26ddc:	cmp	r9, #0
   26de0:	bne	26e00 <__assert_fail@plt+0x14350>
   26de4:	mov	r0, r5
   26de8:	sub	sp, fp, #28
   26dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26df0:	bl	4c5fc <__assert_fail@plt+0x39b4c>
   26df4:	mov	r9, r0
   26df8:	cmp	r9, #0
   26dfc:	beq	26de4 <__assert_fail@plt+0x14334>
   26e00:	str	r6, [fp, #-152]	; 0xffffff68
   26e04:	mov	r6, #0
   26e08:	str	r7, [fp, #-156]	; 0xffffff64
   26e0c:	str	r6, [fp, #-80]	; 0xffffffb0
   26e10:	str	r6, [fp, #-84]	; 0xffffffac
   26e14:	strb	r6, [fp, #-76]	; 0xffffffb4
   26e18:	strb	r6, [fp, #-88]	; 0xffffffa8
   26e1c:	str	r4, [fp, #-72]	; 0xffffffb8
   26e20:	sub	r4, fp, #88	; 0x58
   26e24:	mov	r0, r4
   26e28:	bl	27984 <__assert_fail@plt+0x14ed4>
   26e2c:	add	r0, sl, sl, lsl #2
   26e30:	add	r8, r9, r0, lsl #3
   26e34:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   26e38:	cmp	r0, #0
   26e3c:	beq	26e4c <__assert_fail@plt+0x1439c>
   26e40:	ldr	r0, [fp, #-60]	; 0xffffffc4
   26e44:	cmp	r0, #0
   26e48:	beq	26ecc <__assert_fail@plt+0x1441c>
   26e4c:	add	r7, r9, #16
   26e50:	add	r5, r4, #32
   26e54:	ldr	r0, [fp, #-72]	; 0xffffffb8
   26e58:	cmp	r0, r5
   26e5c:	bne	26e74 <__assert_fail@plt+0x143c4>
   26e60:	ldr	r2, [fp, #-68]	; 0xffffffbc
   26e64:	mov	r0, r7
   26e68:	mov	r1, r5
   26e6c:	bl	124e0 <memcpy@plt>
   26e70:	mov	r0, r7
   26e74:	str	r0, [r7, #-16]
   26e78:	ldr	r0, [fp, #-68]	; 0xffffffbc
   26e7c:	str	r0, [r7, #-12]
   26e80:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   26e84:	strb	r0, [r7, #-8]
   26e88:	cmp	r0, #0
   26e8c:	ldrne	r0, [fp, #-60]	; 0xffffffc4
   26e90:	strne	r0, [r7, #-4]
   26e94:	strb	r6, [fp, #-76]	; 0xffffffb4
   26e98:	ldr	r0, [fp, #-72]	; 0xffffffb8
   26e9c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   26ea0:	add	r0, r0, r1
   26ea4:	str	r0, [fp, #-72]	; 0xffffffb8
   26ea8:	mov	r0, r4
   26eac:	bl	27984 <__assert_fail@plt+0x14ed4>
   26eb0:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   26eb4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   26eb8:	add	r7, r7, #40	; 0x28
   26ebc:	cmp	r1, #0
   26ec0:	beq	26e54 <__assert_fail@plt+0x143a4>
   26ec4:	cmp	r0, #0
   26ec8:	bne	26e54 <__assert_fail@plt+0x143a4>
   26ecc:	mov	r0, #1
   26ed0:	cmp	sl, #3
   26ed4:	str	sl, [fp, #-148]	; 0xffffff6c
   26ed8:	str	r0, [r8, #4]
   26edc:	bcc	26fd8 <__assert_fail@plt+0x14528>
   26ee0:	mov	sl, #2
   26ee4:	mov	r7, #0
   26ee8:	b	26f08 <__assert_fail@plt+0x14458>
   26eec:	mov	r7, #0
   26ef0:	mov	r0, sl
   26ef4:	str	r0, [r8, sl, lsl #2]
   26ef8:	ldr	r0, [fp, #-148]	; 0xffffff6c
   26efc:	add	sl, sl, #1
   26f00:	cmp	sl, r0
   26f04:	beq	26fd8 <__assert_fail@plt+0x14528>
   26f08:	add	r0, sl, sl, lsl #2
   26f0c:	add	r0, r9, r0, lsl #3
   26f10:	ldrb	r1, [r0, #-32]	; 0xffffffe0
   26f14:	sub	r6, r0, #40	; 0x28
   26f18:	sub	r4, r0, #36	; 0x24
   26f1c:	cmp	r1, #0
   26f20:	beq	26f88 <__assert_fail@plt+0x144d8>
   26f24:	sub	r5, r0, #28
   26f28:	add	r0, r7, r7, lsl #2
   26f2c:	add	r1, r9, r0, lsl #3
   26f30:	ldrb	r2, [r1, #8]
   26f34:	cmp	r2, #0
   26f38:	beq	26f50 <__assert_fail@plt+0x144a0>
   26f3c:	ldr	r0, [r1, #12]
   26f40:	ldr	r1, [r5]
   26f44:	cmp	r1, r0
   26f48:	bne	26f74 <__assert_fail@plt+0x144c4>
   26f4c:	b	26fcc <__assert_fail@plt+0x1451c>
   26f50:	ldr	r1, [r1, #4]
   26f54:	ldr	r2, [r4]
   26f58:	cmp	r2, r1
   26f5c:	bne	26f74 <__assert_fail@plt+0x144c4>
   26f60:	ldr	r1, [r9, r0, lsl #3]
   26f64:	ldr	r0, [r6]
   26f68:	bl	127a4 <bcmp@plt>
   26f6c:	cmp	r0, #0
   26f70:	beq	26fcc <__assert_fail@plt+0x1451c>
   26f74:	cmp	r7, #0
   26f78:	beq	26eec <__assert_fail@plt+0x1443c>
   26f7c:	ldr	r0, [r8, r7, lsl #2]
   26f80:	sub	r7, r7, r0
   26f84:	b	26f28 <__assert_fail@plt+0x14478>
   26f88:	ldr	r4, [r4]
   26f8c:	add	r0, r7, r7, lsl #2
   26f90:	add	r1, r9, r0, lsl #3
   26f94:	ldr	r1, [r1, #4]
   26f98:	cmp	r4, r1
   26f9c:	bne	26fb8 <__assert_fail@plt+0x14508>
   26fa0:	ldr	r1, [r9, r0, lsl #3]
   26fa4:	ldr	r0, [r6]
   26fa8:	mov	r2, r4
   26fac:	bl	127a4 <bcmp@plt>
   26fb0:	cmp	r0, #0
   26fb4:	beq	26fcc <__assert_fail@plt+0x1451c>
   26fb8:	cmp	r7, #0
   26fbc:	beq	26eec <__assert_fail@plt+0x1443c>
   26fc0:	ldr	r0, [r8, r7, lsl #2]
   26fc4:	sub	r7, r7, r0
   26fc8:	b	26f8c <__assert_fail@plt+0x144dc>
   26fcc:	add	r7, r7, #1
   26fd0:	sub	r0, sl, r7
   26fd4:	b	26ef4 <__assert_fail@plt+0x14444>
   26fd8:	ldr	r0, [fp, #-152]	; 0xffffff68
   26fdc:	mov	r6, #0
   26fe0:	str	r6, [r0]
   26fe4:	ldr	r0, [fp, #-156]	; 0xffffff64
   26fe8:	str	r6, [fp, #-80]	; 0xffffffb0
   26fec:	str	r6, [fp, #-84]	; 0xffffffac
   26ff0:	strb	r6, [fp, #-76]	; 0xffffffb4
   26ff4:	strb	r6, [fp, #-88]	; 0xffffffa8
   26ff8:	str	r6, [fp, #-136]	; 0xffffff78
   26ffc:	str	r6, [fp, #-140]	; 0xffffff74
   27000:	str	r0, [fp, #-128]	; 0xffffff80
   27004:	str	r0, [fp, #-72]	; 0xffffffb8
   27008:	sub	r0, fp, #144	; 0x90
   2700c:	strb	r6, [fp, #-132]	; 0xffffff7c
   27010:	strb	r6, [fp, #-144]	; 0xffffff70
   27014:	bl	27984 <__assert_fail@plt+0x14ed4>
   27018:	ldr	r0, [fp, #-116]	; 0xffffff8c
   2701c:	ldrb	r1, [fp, #-120]	; 0xffffff88
   27020:	cmp	r0, #0
   27024:	bne	27030 <__assert_fail@plt+0x14580>
   27028:	cmp	r1, #0
   2702c:	bne	271a0 <__assert_fail@plt+0x146f0>
   27030:	clz	r1, r1
   27034:	sub	r4, fp, #88	; 0x58
   27038:	mov	sl, #0
   2703c:	lsr	r1, r1, #5
   27040:	add	r2, sl, sl, lsl #2
   27044:	tst	r1, #1
   27048:	add	r3, r9, r2, lsl #3
   2704c:	bne	27074 <__assert_fail@plt+0x145c4>
   27050:	ldrb	r1, [r3, #8]
   27054:	cmp	r1, #0
   27058:	beq	27074 <__assert_fail@plt+0x145c4>
   2705c:	ldr	r1, [r3, #12]
   27060:	cmp	r1, r0
   27064:	bne	270a0 <__assert_fail@plt+0x145f0>
   27068:	ldr	r7, [fp, #-128]	; 0xffffff80
   2706c:	ldr	r5, [fp, #-124]	; 0xffffff84
   27070:	b	270fc <__assert_fail@plt+0x1464c>
   27074:	ldr	r5, [r3, #4]
   27078:	ldr	r0, [fp, #-124]	; 0xffffff84
   2707c:	cmp	r5, r0
   27080:	bne	270a0 <__assert_fail@plt+0x145f0>
   27084:	ldr	r0, [r9, r2, lsl #3]
   27088:	ldr	r7, [fp, #-128]	; 0xffffff80
   2708c:	mov	r2, r5
   27090:	mov	r1, r7
   27094:	bl	127a4 <bcmp@plt>
   27098:	cmp	r0, #0
   2709c:	beq	270fc <__assert_fail@plt+0x1464c>
   270a0:	cmp	sl, #0
   270a4:	beq	2711c <__assert_fail@plt+0x1466c>
   270a8:	ldr	r5, [r8, sl, lsl #2]
   270ac:	sub	sl, sl, r5
   270b0:	cmp	r5, #0
   270b4:	bne	270d8 <__assert_fail@plt+0x14628>
   270b8:	b	27168 <__assert_fail@plt+0x146b8>
   270bc:	strb	r6, [fp, #-76]	; 0xffffffb4
   270c0:	subs	r5, r5, #1
   270c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   270c8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   270cc:	add	r0, r0, r1
   270d0:	str	r0, [fp, #-72]	; 0xffffffb8
   270d4:	beq	27168 <__assert_fail@plt+0x146b8>
   270d8:	mov	r0, r4
   270dc:	bl	27984 <__assert_fail@plt+0x14ed4>
   270e0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   270e4:	cmp	r0, #0
   270e8:	beq	270bc <__assert_fail@plt+0x1460c>
   270ec:	ldr	r0, [fp, #-60]	; 0xffffffc4
   270f0:	cmp	r0, #0
   270f4:	bne	270bc <__assert_fail@plt+0x1460c>
   270f8:	b	271b8 <__assert_fail@plt+0x14708>
   270fc:	add	r0, r7, r5
   27100:	strb	r6, [fp, #-132]	; 0xffffff7c
   27104:	add	sl, sl, #1
   27108:	str	r0, [fp, #-128]	; 0xffffff80
   2710c:	ldr	r0, [fp, #-148]	; 0xffffff6c
   27110:	cmp	sl, r0
   27114:	bne	27168 <__assert_fail@plt+0x146b8>
   27118:	b	27194 <__assert_fail@plt+0x146e4>
   2711c:	mov	r0, r4
   27120:	bl	27984 <__assert_fail@plt+0x14ed4>
   27124:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   27128:	cmp	r0, #0
   2712c:	beq	2713c <__assert_fail@plt+0x1468c>
   27130:	ldr	r0, [fp, #-60]	; 0xffffffc4
   27134:	cmp	r0, #0
   27138:	beq	271b8 <__assert_fail@plt+0x14708>
   2713c:	mov	sl, #0
   27140:	strb	sl, [fp, #-76]	; 0xffffffb4
   27144:	strb	sl, [fp, #-132]	; 0xffffff7c
   27148:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2714c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   27150:	add	r0, r0, r1
   27154:	ldr	r1, [fp, #-124]	; 0xffffff84
   27158:	str	r0, [fp, #-72]	; 0xffffffb8
   2715c:	ldr	r0, [fp, #-128]	; 0xffffff80
   27160:	add	r0, r0, r1
   27164:	str	r0, [fp, #-128]	; 0xffffff80
   27168:	sub	r0, fp, #144	; 0x90
   2716c:	bl	27984 <__assert_fail@plt+0x14ed4>
   27170:	ldrb	r2, [fp, #-120]	; 0xffffff88
   27174:	clz	r0, r2
   27178:	lsr	r1, r0, #5
   2717c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   27180:	cmp	r0, #0
   27184:	bne	27040 <__assert_fail@plt+0x14590>
   27188:	cmp	r2, #0
   2718c:	beq	27040 <__assert_fail@plt+0x14590>
   27190:	b	271a0 <__assert_fail@plt+0x146f0>
   27194:	ldr	r0, [fp, #-72]	; 0xffffffb8
   27198:	ldr	r1, [fp, #-152]	; 0xffffff68
   2719c:	str	r0, [r1]
   271a0:	mov	r0, r9
   271a4:	bl	4c66c <__assert_fail@plt+0x39bbc>
   271a8:	mov	r5, #1
   271ac:	mov	r0, r5
   271b0:	sub	sp, fp, #28
   271b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   271b8:	bl	12a5c <abort@plt>
   271bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   271c0:	add	fp, sp, #24
   271c4:	mov	r4, #0
   271c8:	cmn	r2, #-536870911	; 0xe0000001
   271cc:	bhi	27330 <__assert_fail@plt+0x14880>
   271d0:	mov	r7, r0
   271d4:	lsl	r0, r2, #2
   271d8:	mov	r8, r3
   271dc:	mov	r5, r2
   271e0:	mov	r6, r1
   271e4:	cmp	r0, #4016	; 0xfb0
   271e8:	bhi	27324 <__assert_fail@plt+0x14874>
   271ec:	add	r0, r0, #22
   271f0:	bic	r0, r0, #7
   271f4:	sub	r1, sp, r0
   271f8:	add	r0, r1, #15
   271fc:	bic	r0, r0, #15
   27200:	mov	sp, r1
   27204:	cmp	r0, #0
   27208:	beq	27330 <__assert_fail@plt+0x14880>
   2720c:	mov	r1, #1
   27210:	cmp	r5, #3
   27214:	str	r1, [r0, #4]
   27218:	bcc	2728c <__assert_fail@plt+0x147dc>
   2721c:	mov	r1, #2
   27220:	mov	r2, #0
   27224:	b	27240 <__assert_fail@plt+0x14790>
   27228:	add	r2, r2, #1
   2722c:	sub	r3, r1, r2
   27230:	str	r3, [r0, r1, lsl #2]
   27234:	add	r1, r1, #1
   27238:	cmp	r1, r5
   2723c:	beq	2728c <__assert_fail@plt+0x147dc>
   27240:	add	r3, r1, r6
   27244:	ldrb	r4, [r6, r2]
   27248:	ldrb	r3, [r3, #-1]
   2724c:	cmp	r3, r4
   27250:	beq	27228 <__assert_fail@plt+0x14778>
   27254:	cmp	r2, #0
   27258:	beq	27274 <__assert_fail@plt+0x147c4>
   2725c:	ldr	r4, [r0, r2, lsl #2]
   27260:	sub	r2, r2, r4
   27264:	ldrb	r4, [r6, r2]
   27268:	cmp	r3, r4
   2726c:	bne	27254 <__assert_fail@plt+0x147a4>
   27270:	b	27228 <__assert_fail@plt+0x14778>
   27274:	mov	r2, #0
   27278:	mov	r3, r1
   2727c:	str	r3, [r0, r1, lsl #2]
   27280:	add	r1, r1, #1
   27284:	cmp	r1, r5
   27288:	bne	27240 <__assert_fail@plt+0x14790>
   2728c:	mov	r1, #0
   27290:	str	r1, [r8]
   27294:	ldrb	r3, [r7]
   27298:	cmp	r3, #0
   2729c:	beq	27340 <__assert_fail@plt+0x14890>
   272a0:	mov	r2, r7
   272a4:	ldrb	r4, [r6, r1]
   272a8:	uxtb	r3, r3
   272ac:	cmp	r4, r3
   272b0:	bne	27300 <__assert_fail@plt+0x14850>
   272b4:	b	272e0 <__assert_fail@plt+0x14830>
   272b8:	add	r7, r7, #1
   272bc:	add	r2, r2, #1
   272c0:	mov	r1, #0
   272c4:	ldrb	r3, [r7]
   272c8:	cmp	r3, #0
   272cc:	beq	27340 <__assert_fail@plt+0x14890>
   272d0:	ldrb	r4, [r6, r1]
   272d4:	uxtb	r3, r3
   272d8:	cmp	r4, r3
   272dc:	bne	27300 <__assert_fail@plt+0x14850>
   272e0:	add	r1, r1, #1
   272e4:	cmp	r1, r5
   272e8:	beq	2733c <__assert_fail@plt+0x1488c>
   272ec:	add	r7, r7, #1
   272f0:	ldrb	r3, [r7]
   272f4:	cmp	r3, #0
   272f8:	bne	272d0 <__assert_fail@plt+0x14820>
   272fc:	b	27340 <__assert_fail@plt+0x14890>
   27300:	cmp	r1, #0
   27304:	beq	272b8 <__assert_fail@plt+0x14808>
   27308:	ldr	r3, [r0, r1, lsl #2]
   2730c:	sub	r1, r1, r3
   27310:	add	r2, r2, r3
   27314:	ldrb	r3, [r7]
   27318:	cmp	r3, #0
   2731c:	bne	272d0 <__assert_fail@plt+0x14820>
   27320:	b	27340 <__assert_fail@plt+0x14890>
   27324:	bl	4c5fc <__assert_fail@plt+0x39b4c>
   27328:	cmp	r0, #0
   2732c:	bne	2720c <__assert_fail@plt+0x1475c>
   27330:	mov	r0, r4
   27334:	sub	sp, fp, #24
   27338:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2733c:	str	r2, [r8]
   27340:	bl	4c66c <__assert_fail@plt+0x39bbc>
   27344:	mov	r4, #1
   27348:	mov	r0, r4
   2734c:	sub	sp, fp, #24
   27350:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   27354:	push	{r4, r5, fp, lr}
   27358:	add	fp, sp, #8
   2735c:	mov	r4, r1
   27360:	mov	r5, r0
   27364:	bl	127bc <strlen@plt>
   27368:	mov	r1, r0
   2736c:	mov	r0, r5
   27370:	mov	r2, r4
   27374:	pop	{r4, r5, fp, lr}
   27378:	b	2737c <__assert_fail@plt+0x148cc>
   2737c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27380:	add	fp, sp, #28
   27384:	sub	sp, sp, #20
   27388:	mov	r5, r2
   2738c:	mov	r6, r1
   27390:	mov	r4, r0
   27394:	add	r7, r0, r1
   27398:	bl	12648 <__ctype_get_mb_cur_max@plt>
   2739c:	cmp	r0, #1
   273a0:	bls	27660 <__assert_fail@plt+0x14bb0>
   273a4:	cmp	r6, #1
   273a8:	blt	276b4 <__assert_fail@plt+0x14c04>
   273ac:	and	r2, r5, #1
   273b0:	mov	r3, #0
   273b4:	add	r8, sp, #4
   273b8:	add	r9, sp, #8
   273bc:	mvn	sl, #-2147483648	; 0x80000000
   273c0:	tst	r5, #2
   273c4:	bne	276c4 <__assert_fail@plt+0x14c14>
   273c8:	mov	r5, #0
   273cc:	ldrb	r0, [r4]
   273d0:	sub	r0, r0, #32
   273d4:	cmp	r0, #94	; 0x5e
   273d8:	bhi	27574 <__assert_fail@plt+0x14ac4>
   273dc:	add	r1, pc, #0
   273e0:	ldr	pc, [r1, r0, lsl #2]
   273e4:	andeq	r7, r2, r0, ror #10
   273e8:	andeq	r7, r2, r0, ror #10
   273ec:	andeq	r7, r2, r0, ror #10
   273f0:	andeq	r7, r2, r0, ror #10
   273f4:	andeq	r7, r2, r4, ror r5
   273f8:	andeq	r7, r2, r0, ror #10
   273fc:	andeq	r7, r2, r0, ror #10
   27400:	andeq	r7, r2, r0, ror #10
   27404:	andeq	r7, r2, r0, ror #10
   27408:	andeq	r7, r2, r0, ror #10
   2740c:	andeq	r7, r2, r0, ror #10
   27410:	andeq	r7, r2, r0, ror #10
   27414:	andeq	r7, r2, r0, ror #10
   27418:	andeq	r7, r2, r0, ror #10
   2741c:	andeq	r7, r2, r0, ror #10
   27420:	andeq	r7, r2, r0, ror #10
   27424:	andeq	r7, r2, r0, ror #10
   27428:	andeq	r7, r2, r0, ror #10
   2742c:	andeq	r7, r2, r0, ror #10
   27430:	andeq	r7, r2, r0, ror #10
   27434:	andeq	r7, r2, r0, ror #10
   27438:	andeq	r7, r2, r0, ror #10
   2743c:	andeq	r7, r2, r0, ror #10
   27440:	andeq	r7, r2, r0, ror #10
   27444:	andeq	r7, r2, r0, ror #10
   27448:	andeq	r7, r2, r0, ror #10
   2744c:	andeq	r7, r2, r0, ror #10
   27450:	andeq	r7, r2, r0, ror #10
   27454:	andeq	r7, r2, r0, ror #10
   27458:	andeq	r7, r2, r0, ror #10
   2745c:	andeq	r7, r2, r0, ror #10
   27460:	andeq	r7, r2, r0, ror #10
   27464:	andeq	r7, r2, r4, ror r5
   27468:	andeq	r7, r2, r0, ror #10
   2746c:	andeq	r7, r2, r0, ror #10
   27470:	andeq	r7, r2, r0, ror #10
   27474:	andeq	r7, r2, r0, ror #10
   27478:	andeq	r7, r2, r0, ror #10
   2747c:	andeq	r7, r2, r0, ror #10
   27480:	andeq	r7, r2, r0, ror #10
   27484:	andeq	r7, r2, r0, ror #10
   27488:	andeq	r7, r2, r0, ror #10
   2748c:	andeq	r7, r2, r0, ror #10
   27490:	andeq	r7, r2, r0, ror #10
   27494:	andeq	r7, r2, r0, ror #10
   27498:	andeq	r7, r2, r0, ror #10
   2749c:	andeq	r7, r2, r0, ror #10
   274a0:	andeq	r7, r2, r0, ror #10
   274a4:	andeq	r7, r2, r0, ror #10
   274a8:	andeq	r7, r2, r0, ror #10
   274ac:	andeq	r7, r2, r0, ror #10
   274b0:	andeq	r7, r2, r0, ror #10
   274b4:	andeq	r7, r2, r0, ror #10
   274b8:	andeq	r7, r2, r0, ror #10
   274bc:	andeq	r7, r2, r0, ror #10
   274c0:	andeq	r7, r2, r0, ror #10
   274c4:	andeq	r7, r2, r0, ror #10
   274c8:	andeq	r7, r2, r0, ror #10
   274cc:	andeq	r7, r2, r0, ror #10
   274d0:	andeq	r7, r2, r0, ror #10
   274d4:	andeq	r7, r2, r0, ror #10
   274d8:	andeq	r7, r2, r0, ror #10
   274dc:	andeq	r7, r2, r0, ror #10
   274e0:	andeq	r7, r2, r0, ror #10
   274e4:	andeq	r7, r2, r4, ror r5
   274e8:	andeq	r7, r2, r0, ror #10
   274ec:	andeq	r7, r2, r0, ror #10
   274f0:	andeq	r7, r2, r0, ror #10
   274f4:	andeq	r7, r2, r0, ror #10
   274f8:	andeq	r7, r2, r0, ror #10
   274fc:	andeq	r7, r2, r0, ror #10
   27500:	andeq	r7, r2, r0, ror #10
   27504:	andeq	r7, r2, r0, ror #10
   27508:	andeq	r7, r2, r0, ror #10
   2750c:	andeq	r7, r2, r0, ror #10
   27510:	andeq	r7, r2, r0, ror #10
   27514:	andeq	r7, r2, r0, ror #10
   27518:	andeq	r7, r2, r0, ror #10
   2751c:	andeq	r7, r2, r0, ror #10
   27520:	andeq	r7, r2, r0, ror #10
   27524:	andeq	r7, r2, r0, ror #10
   27528:	andeq	r7, r2, r0, ror #10
   2752c:	andeq	r7, r2, r0, ror #10
   27530:	andeq	r7, r2, r0, ror #10
   27534:	andeq	r7, r2, r0, ror #10
   27538:	andeq	r7, r2, r0, ror #10
   2753c:	andeq	r7, r2, r0, ror #10
   27540:	andeq	r7, r2, r0, ror #10
   27544:	andeq	r7, r2, r0, ror #10
   27548:	andeq	r7, r2, r0, ror #10
   2754c:	andeq	r7, r2, r0, ror #10
   27550:	andeq	r7, r2, r0, ror #10
   27554:	andeq	r7, r2, r0, ror #10
   27558:	andeq	r7, r2, r0, ror #10
   2755c:	andeq	r7, r2, r0, ror #10
   27560:	add	r5, r5, #1
   27564:	add	r4, r4, #1
   27568:	cmp	r4, r7
   2756c:	bcc	273cc <__assert_fail@plt+0x1491c>
   27570:	b	27958 <__assert_fail@plt+0x14ea8>
   27574:	str	r2, [sp]
   27578:	str	r3, [sp, #12]
   2757c:	str	r3, [sp, #8]
   27580:	b	275a8 <__assert_fail@plt+0x14af8>
   27584:	ldr	r0, [sp, #4]
   27588:	bl	125c4 <iswcntrl@plt>
   2758c:	cmp	r0, #0
   27590:	beq	27614 <__assert_fail@plt+0x14b64>
   27594:	mov	r0, r9
   27598:	add	r4, r4, r6
   2759c:	bl	1251c <mbsinit@plt>
   275a0:	cmp	r0, #0
   275a4:	bne	2764c <__assert_fail@plt+0x14b9c>
   275a8:	sub	r2, r7, r4
   275ac:	mov	r0, r8
   275b0:	mov	r1, r4
   275b4:	mov	r3, r9
   275b8:	bl	35380 <__assert_fail@plt+0x228d0>
   275bc:	cmp	r0, #0
   275c0:	beq	275fc <__assert_fail@plt+0x14b4c>
   275c4:	mov	r6, r0
   275c8:	cmn	r0, #2
   275cc:	beq	27624 <__assert_fail@plt+0x14b74>
   275d0:	cmn	r6, #1
   275d4:	beq	27638 <__assert_fail@plt+0x14b88>
   275d8:	ldr	r0, [sp, #4]
   275dc:	bl	1245c <wcwidth@plt>
   275e0:	cmn	r0, #1
   275e4:	ble	27584 <__assert_fail@plt+0x14ad4>
   275e8:	sub	r1, sl, r5
   275ec:	cmp	r0, r1
   275f0:	bgt	27964 <__assert_fail@plt+0x14eb4>
   275f4:	add	r5, r0, r5
   275f8:	b	27594 <__assert_fail@plt+0x14ae4>
   275fc:	mov	r6, #1
   27600:	ldr	r0, [sp, #4]
   27604:	bl	1245c <wcwidth@plt>
   27608:	cmn	r0, #1
   2760c:	bgt	275e8 <__assert_fail@plt+0x14b38>
   27610:	b	27584 <__assert_fail@plt+0x14ad4>
   27614:	cmn	r5, #-2147483647	; 0x80000001
   27618:	beq	27964 <__assert_fail@plt+0x14eb4>
   2761c:	add	r5, r5, #1
   27620:	b	27594 <__assert_fail@plt+0x14ae4>
   27624:	ldr	r0, [sp]
   27628:	mov	r4, r7
   2762c:	cmp	r0, #0
   27630:	beq	27648 <__assert_fail@plt+0x14b98>
   27634:	b	27974 <__assert_fail@plt+0x14ec4>
   27638:	ldr	r0, [sp]
   2763c:	cmp	r0, #0
   27640:	bne	27974 <__assert_fail@plt+0x14ec4>
   27644:	add	r4, r4, #1
   27648:	add	r5, r5, #1
   2764c:	ldr	r2, [sp]
   27650:	mov	r3, #0
   27654:	cmp	r4, r7
   27658:	bcc	273cc <__assert_fail@plt+0x1491c>
   2765c:	b	27958 <__assert_fail@plt+0x14ea8>
   27660:	cmp	r6, #1
   27664:	blt	276b4 <__assert_fail@plt+0x14c04>
   27668:	bl	12768 <__ctype_b_loc@plt>
   2766c:	ldr	r0, [r0]
   27670:	tst	r5, #2
   27674:	bne	27928 <__assert_fail@plt+0x14e78>
   27678:	mov	r5, #0
   2767c:	b	27694 <__assert_fail@plt+0x14be4>
   27680:	cmn	r5, #-2147483647	; 0x80000001
   27684:	beq	27964 <__assert_fail@plt+0x14eb4>
   27688:	add	r5, r5, #1
   2768c:	cmp	r4, r7
   27690:	bcs	27958 <__assert_fail@plt+0x14ea8>
   27694:	ldrb	r1, [r4], #1
   27698:	add	r1, r0, r1, lsl #1
   2769c:	ldrh	r1, [r1]
   276a0:	tst	r1, #16384	; 0x4000
   276a4:	bne	27680 <__assert_fail@plt+0x14bd0>
   276a8:	tst	r1, #2
   276ac:	beq	27680 <__assert_fail@plt+0x14bd0>
   276b0:	b	2768c <__assert_fail@plt+0x14bdc>
   276b4:	mov	r5, #0
   276b8:	mov	r0, r5
   276bc:	sub	sp, fp, #28
   276c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   276c4:	mov	r5, #0
   276c8:	ldrb	r0, [r4]
   276cc:	sub	r0, r0, #32
   276d0:	cmp	r0, #94	; 0x5e
   276d4:	bhi	27870 <__assert_fail@plt+0x14dc0>
   276d8:	add	r1, pc, #0
   276dc:	ldr	pc, [r1, r0, lsl #2]
   276e0:	andeq	r7, r2, ip, asr r8
   276e4:	andeq	r7, r2, ip, asr r8
   276e8:	andeq	r7, r2, ip, asr r8
   276ec:	andeq	r7, r2, ip, asr r8
   276f0:	andeq	r7, r2, r0, ror r8
   276f4:	andeq	r7, r2, ip, asr r8
   276f8:	andeq	r7, r2, ip, asr r8
   276fc:	andeq	r7, r2, ip, asr r8
   27700:	andeq	r7, r2, ip, asr r8
   27704:	andeq	r7, r2, ip, asr r8
   27708:	andeq	r7, r2, ip, asr r8
   2770c:	andeq	r7, r2, ip, asr r8
   27710:	andeq	r7, r2, ip, asr r8
   27714:	andeq	r7, r2, ip, asr r8
   27718:	andeq	r7, r2, ip, asr r8
   2771c:	andeq	r7, r2, ip, asr r8
   27720:	andeq	r7, r2, ip, asr r8
   27724:	andeq	r7, r2, ip, asr r8
   27728:	andeq	r7, r2, ip, asr r8
   2772c:	andeq	r7, r2, ip, asr r8
   27730:	andeq	r7, r2, ip, asr r8
   27734:	andeq	r7, r2, ip, asr r8
   27738:	andeq	r7, r2, ip, asr r8
   2773c:	andeq	r7, r2, ip, asr r8
   27740:	andeq	r7, r2, ip, asr r8
   27744:	andeq	r7, r2, ip, asr r8
   27748:	andeq	r7, r2, ip, asr r8
   2774c:	andeq	r7, r2, ip, asr r8
   27750:	andeq	r7, r2, ip, asr r8
   27754:	andeq	r7, r2, ip, asr r8
   27758:	andeq	r7, r2, ip, asr r8
   2775c:	andeq	r7, r2, ip, asr r8
   27760:	andeq	r7, r2, r0, ror r8
   27764:	andeq	r7, r2, ip, asr r8
   27768:	andeq	r7, r2, ip, asr r8
   2776c:	andeq	r7, r2, ip, asr r8
   27770:	andeq	r7, r2, ip, asr r8
   27774:	andeq	r7, r2, ip, asr r8
   27778:	andeq	r7, r2, ip, asr r8
   2777c:	andeq	r7, r2, ip, asr r8
   27780:	andeq	r7, r2, ip, asr r8
   27784:	andeq	r7, r2, ip, asr r8
   27788:	andeq	r7, r2, ip, asr r8
   2778c:	andeq	r7, r2, ip, asr r8
   27790:	andeq	r7, r2, ip, asr r8
   27794:	andeq	r7, r2, ip, asr r8
   27798:	andeq	r7, r2, ip, asr r8
   2779c:	andeq	r7, r2, ip, asr r8
   277a0:	andeq	r7, r2, ip, asr r8
   277a4:	andeq	r7, r2, ip, asr r8
   277a8:	andeq	r7, r2, ip, asr r8
   277ac:	andeq	r7, r2, ip, asr r8
   277b0:	andeq	r7, r2, ip, asr r8
   277b4:	andeq	r7, r2, ip, asr r8
   277b8:	andeq	r7, r2, ip, asr r8
   277bc:	andeq	r7, r2, ip, asr r8
   277c0:	andeq	r7, r2, ip, asr r8
   277c4:	andeq	r7, r2, ip, asr r8
   277c8:	andeq	r7, r2, ip, asr r8
   277cc:	andeq	r7, r2, ip, asr r8
   277d0:	andeq	r7, r2, ip, asr r8
   277d4:	andeq	r7, r2, ip, asr r8
   277d8:	andeq	r7, r2, ip, asr r8
   277dc:	andeq	r7, r2, ip, asr r8
   277e0:	andeq	r7, r2, r0, ror r8
   277e4:	andeq	r7, r2, ip, asr r8
   277e8:	andeq	r7, r2, ip, asr r8
   277ec:	andeq	r7, r2, ip, asr r8
   277f0:	andeq	r7, r2, ip, asr r8
   277f4:	andeq	r7, r2, ip, asr r8
   277f8:	andeq	r7, r2, ip, asr r8
   277fc:	andeq	r7, r2, ip, asr r8
   27800:	andeq	r7, r2, ip, asr r8
   27804:	andeq	r7, r2, ip, asr r8
   27808:	andeq	r7, r2, ip, asr r8
   2780c:	andeq	r7, r2, ip, asr r8
   27810:	andeq	r7, r2, ip, asr r8
   27814:	andeq	r7, r2, ip, asr r8
   27818:	andeq	r7, r2, ip, asr r8
   2781c:	andeq	r7, r2, ip, asr r8
   27820:	andeq	r7, r2, ip, asr r8
   27824:	andeq	r7, r2, ip, asr r8
   27828:	andeq	r7, r2, ip, asr r8
   2782c:	andeq	r7, r2, ip, asr r8
   27830:	andeq	r7, r2, ip, asr r8
   27834:	andeq	r7, r2, ip, asr r8
   27838:	andeq	r7, r2, ip, asr r8
   2783c:	andeq	r7, r2, ip, asr r8
   27840:	andeq	r7, r2, ip, asr r8
   27844:	andeq	r7, r2, ip, asr r8
   27848:	andeq	r7, r2, ip, asr r8
   2784c:	andeq	r7, r2, ip, asr r8
   27850:	andeq	r7, r2, ip, asr r8
   27854:	andeq	r7, r2, ip, asr r8
   27858:	andeq	r7, r2, ip, asr r8
   2785c:	add	r5, r5, #1
   27860:	add	r4, r4, #1
   27864:	cmp	r4, r7
   27868:	bcc	276c8 <__assert_fail@plt+0x14c18>
   2786c:	b	27958 <__assert_fail@plt+0x14ea8>
   27870:	str	r2, [sp]
   27874:	str	r3, [sp, #12]
   27878:	str	r3, [sp, #8]
   2787c:	sub	r2, r7, r4
   27880:	mov	r0, r8
   27884:	mov	r1, r4
   27888:	mov	r3, r9
   2788c:	bl	35380 <__assert_fail@plt+0x228d0>
   27890:	cmp	r0, #0
   27894:	beq	278b0 <__assert_fail@plt+0x14e00>
   27898:	mov	r6, r0
   2789c:	cmn	r0, #2
   278a0:	beq	278ec <__assert_fail@plt+0x14e3c>
   278a4:	cmn	r6, #1
   278a8:	bne	278b4 <__assert_fail@plt+0x14e04>
   278ac:	b	27900 <__assert_fail@plt+0x14e50>
   278b0:	mov	r6, #1
   278b4:	ldr	r0, [sp, #4]
   278b8:	bl	1245c <wcwidth@plt>
   278bc:	cmp	r0, #0
   278c0:	bmi	27974 <__assert_fail@plt+0x14ec4>
   278c4:	sub	r1, sl, r5
   278c8:	cmp	r0, r1
   278cc:	bgt	27964 <__assert_fail@plt+0x14eb4>
   278d0:	add	r5, r0, r5
   278d4:	mov	r0, r9
   278d8:	add	r4, r4, r6
   278dc:	bl	1251c <mbsinit@plt>
   278e0:	cmp	r0, #0
   278e4:	beq	2787c <__assert_fail@plt+0x14dcc>
   278e8:	b	27914 <__assert_fail@plt+0x14e64>
   278ec:	ldr	r0, [sp]
   278f0:	mov	r4, r7
   278f4:	cmp	r0, #0
   278f8:	beq	27910 <__assert_fail@plt+0x14e60>
   278fc:	b	27974 <__assert_fail@plt+0x14ec4>
   27900:	ldr	r0, [sp]
   27904:	cmp	r0, #0
   27908:	bne	27974 <__assert_fail@plt+0x14ec4>
   2790c:	add	r4, r4, #1
   27910:	add	r5, r5, #1
   27914:	ldr	r2, [sp]
   27918:	mov	r3, #0
   2791c:	cmp	r4, r7
   27920:	bcc	276c8 <__assert_fail@plt+0x14c18>
   27924:	b	27958 <__assert_fail@plt+0x14ea8>
   27928:	mov	r5, #0
   2792c:	ldrb	r1, [r4, r5]
   27930:	add	r1, r0, r1, lsl #1
   27934:	ldrb	r1, [r1, #1]
   27938:	tst	r1, #64	; 0x40
   2793c:	beq	27974 <__assert_fail@plt+0x14ec4>
   27940:	cmn	r5, #-2147483647	; 0x80000001
   27944:	beq	27964 <__assert_fail@plt+0x14eb4>
   27948:	add	r5, r5, #1
   2794c:	add	r1, r4, r5
   27950:	cmp	r1, r7
   27954:	bcc	2792c <__assert_fail@plt+0x14e7c>
   27958:	mov	r0, r5
   2795c:	sub	sp, fp, #28
   27960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27964:	mvn	r5, #-2147483648	; 0x80000000
   27968:	mov	r0, r5
   2796c:	sub	sp, fp, #28
   27970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27974:	mvn	r5, #0
   27978:	mov	r0, r5
   2797c:	sub	sp, fp, #28
   27980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27984:	push	{r4, r5, r6, r7, fp, lr}
   27988:	add	fp, sp, #16
   2798c:	mov	r4, r0
   27990:	ldrb	r0, [r0, #12]
   27994:	cmp	r0, #0
   27998:	popne	{r4, r5, r6, r7, fp, pc}
   2799c:	ldrb	r0, [r4]
   279a0:	ldr	r5, [r4, #16]
   279a4:	cmp	r0, #0
   279a8:	beq	27a10 <__assert_fail@plt+0x14f60>
   279ac:	bl	12648 <__ctype_get_mb_cur_max@plt>
   279b0:	mov	r1, r0
   279b4:	mov	r0, r5
   279b8:	bl	2ffac <__assert_fail@plt+0x1d4fc>
   279bc:	add	r6, r4, #4
   279c0:	add	r7, r4, #28
   279c4:	mov	r2, r0
   279c8:	mov	r1, r5
   279cc:	mov	r0, r7
   279d0:	mov	r3, r6
   279d4:	bl	35380 <__assert_fail@plt+0x228d0>
   279d8:	cmn	r0, #2
   279dc:	str	r0, [r4, #20]
   279e0:	beq	27a9c <__assert_fail@plt+0x14fec>
   279e4:	cmp	r0, #0
   279e8:	beq	27a50 <__assert_fail@plt+0x14fa0>
   279ec:	cmn	r0, #1
   279f0:	bne	27a74 <__assert_fail@plt+0x14fc4>
   279f4:	mov	r0, #0
   279f8:	strb	r0, [r4, #24]
   279fc:	mov	r0, #1
   27a00:	str	r0, [r4, #20]
   27a04:	mov	r0, #1
   27a08:	strb	r0, [r4, #12]
   27a0c:	pop	{r4, r5, r6, r7, fp, pc}
   27a10:	ldrb	r0, [r5]
   27a14:	movw	r2, #13032	; 0x32e8
   27a18:	movt	r2, #5
   27a1c:	ubfx	r1, r0, #5, #3
   27a20:	ldr	r1, [r2, r1, lsl #2]
   27a24:	and	r2, r0, #31
   27a28:	mov	r0, #1
   27a2c:	tst	r1, r0, lsl r2
   27a30:	beq	27abc <__assert_fail@plt+0x1500c>
   27a34:	str	r0, [r4, #20]
   27a38:	ldrb	r1, [r5]
   27a3c:	strb	r0, [r4, #24]
   27a40:	str	r1, [r4, #28]
   27a44:	mov	r0, #1
   27a48:	strb	r0, [r4, #12]
   27a4c:	pop	{r4, r5, r6, r7, fp, pc}
   27a50:	mov	r0, #1
   27a54:	str	r0, [r4, #20]
   27a58:	ldr	r0, [r4, #16]
   27a5c:	ldrb	r0, [r0]
   27a60:	cmp	r0, #0
   27a64:	bne	27ad8 <__assert_fail@plt+0x15028>
   27a68:	ldr	r0, [r7]
   27a6c:	cmp	r0, #0
   27a70:	bne	27af8 <__assert_fail@plt+0x15048>
   27a74:	mov	r0, #1
   27a78:	strb	r0, [r4, #24]
   27a7c:	mov	r0, r6
   27a80:	bl	1251c <mbsinit@plt>
   27a84:	cmp	r0, #0
   27a88:	movne	r0, #0
   27a8c:	strbne	r0, [r4]
   27a90:	mov	r0, #1
   27a94:	strb	r0, [r4, #12]
   27a98:	pop	{r4, r5, r6, r7, fp, pc}
   27a9c:	ldr	r0, [r4, #16]
   27aa0:	bl	127bc <strlen@plt>
   27aa4:	mov	r1, #0
   27aa8:	strb	r1, [r4, #24]
   27aac:	str	r0, [r4, #20]
   27ab0:	mov	r0, #1
   27ab4:	strb	r0, [r4, #12]
   27ab8:	pop	{r4, r5, r6, r7, fp, pc}
   27abc:	add	r0, r4, #4
   27ac0:	bl	1251c <mbsinit@plt>
   27ac4:	cmp	r0, #0
   27ac8:	beq	27b18 <__assert_fail@plt+0x15068>
   27acc:	mov	r0, #1
   27ad0:	strb	r0, [r4]
   27ad4:	b	279ac <__assert_fail@plt+0x14efc>
   27ad8:	movw	r0, #7035	; 0x1b7b
   27adc:	movw	r1, #6975	; 0x1b3f
   27ae0:	movw	r3, #6987	; 0x1b4b
   27ae4:	mov	r2, #171	; 0xab
   27ae8:	movt	r0, #5
   27aec:	movt	r1, #5
   27af0:	movt	r3, #5
   27af4:	bl	12ab0 <__assert_fail@plt>
   27af8:	movw	r0, #7058	; 0x1b92
   27afc:	movw	r1, #6975	; 0x1b3f
   27b00:	movw	r3, #6987	; 0x1b4b
   27b04:	mov	r2, #172	; 0xac
   27b08:	movt	r0, #5
   27b0c:	movt	r1, #5
   27b10:	movt	r3, #5
   27b14:	bl	12ab0 <__assert_fail@plt>
   27b18:	movw	r0, #6952	; 0x1b28
   27b1c:	movw	r1, #6975	; 0x1b3f
   27b20:	movw	r3, #6987	; 0x1b4b
   27b24:	mov	r2, #143	; 0x8f
   27b28:	movt	r0, #5
   27b2c:	movt	r1, #5
   27b30:	movt	r3, #5
   27b34:	bl	12ab0 <__assert_fail@plt>
   27b38:	ldr	r2, [r0, #16]
   27b3c:	add	r1, r2, r1
   27b40:	str	r1, [r0, #16]
   27b44:	bx	lr
   27b48:	push	{r4, r5, r6, sl, fp, lr}
   27b4c:	add	fp, sp, #16
   27b50:	mov	r5, r1
   27b54:	ldrb	r1, [r1]
   27b58:	mov	r4, r0
   27b5c:	strb	r1, [r0], #4
   27b60:	cmp	r1, #0
   27b64:	beq	27b74 <__assert_fail@plt+0x150c4>
   27b68:	ldmib	r5, {r1, r2}
   27b6c:	stm	r0, {r1, r2}
   27b70:	b	27b80 <__assert_fail@plt+0x150d0>
   27b74:	mov	r1, #0
   27b78:	str	r1, [r0]
   27b7c:	str	r1, [r0, #4]
   27b80:	ldrb	r0, [r5, #12]
   27b84:	strb	r0, [r4, #12]
   27b88:	add	r0, r5, #32
   27b8c:	ldr	r1, [r5, #16]
   27b90:	cmp	r1, r0
   27b94:	beq	27ba0 <__assert_fail@plt+0x150f0>
   27b98:	mov	r6, r1
   27b9c:	b	27bb0 <__assert_fail@plt+0x15100>
   27ba0:	ldr	r2, [r5, #20]
   27ba4:	add	r6, r4, #32
   27ba8:	mov	r0, r6
   27bac:	bl	124e0 <memcpy@plt>
   27bb0:	str	r6, [r4, #16]
   27bb4:	ldr	r0, [r5, #20]
   27bb8:	str	r0, [r4, #20]
   27bbc:	ldrb	r0, [r5, #24]
   27bc0:	strb	r0, [r4, #24]
   27bc4:	cmp	r0, #0
   27bc8:	ldrne	r0, [r5, #28]
   27bcc:	strne	r0, [r4, #28]
   27bd0:	pop	{r4, r5, r6, sl, fp, pc}
   27bd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27bd8:	add	fp, sp, #28
   27bdc:	sub	sp, sp, #4
   27be0:	ldrb	r1, [r0]
   27be4:	mov	r4, r0
   27be8:	and	r0, r1, #248	; 0xf8
   27bec:	cmp	r0, #48	; 0x30
   27bf0:	bne	27c3c <__assert_fail@plt+0x1518c>
   27bf4:	mov	r0, #0
   27bf8:	mov	r5, #0
   27bfc:	mov	r2, r4
   27c00:	lsl	r3, r5, #3
   27c04:	uxtab	r1, r3, r1
   27c08:	sub	r5, r1, #48	; 0x30
   27c0c:	cmp	r0, r5, lsr #12
   27c10:	bne	27c34 <__assert_fail@plt+0x15184>
   27c14:	ldrb	r1, [r2, #1]
   27c18:	add	r6, r2, #1
   27c1c:	and	r2, r1, #248	; 0xf8
   27c20:	cmp	r2, #48	; 0x30
   27c24:	mov	r2, r6
   27c28:	beq	27c00 <__assert_fail@plt+0x15150>
   27c2c:	cmp	r1, #0
   27c30:	beq	27fc0 <__assert_fail@plt+0x15510>
   27c34:	sub	sp, fp, #28
   27c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c3c:	movw	sl, #5
   27c40:	mov	r2, #1
   27c44:	mvn	r3, #42	; 0x2a
   27c48:	mov	r7, #1
   27c4c:	mov	r0, #1
   27c50:	movt	sl, #4
   27c54:	uxtab	r6, r3, r1
   27c58:	uxtb	r1, r1
   27c5c:	cmp	r6, #18
   27c60:	bls	27c8c <__assert_fail@plt+0x151dc>
   27c64:	cmp	r1, #0
   27c68:	beq	27c9c <__assert_fail@plt+0x151ec>
   27c6c:	mov	r6, #0
   27c70:	ldrb	r1, [r4, r7]
   27c74:	add	r0, r6, r0
   27c78:	add	r7, r7, #1
   27c7c:	uxtab	r6, r3, r1
   27c80:	uxtb	r1, r1
   27c84:	cmp	r6, #18
   27c88:	bhi	27c64 <__assert_fail@plt+0x151b4>
   27c8c:	tst	sl, r2, lsl r6
   27c90:	mov	r6, #1
   27c94:	bne	27c70 <__assert_fail@plt+0x151c0>
   27c98:	b	27c64 <__assert_fail@plt+0x151b4>
   27c9c:	mov	r1, #16
   27ca0:	bl	307b8 <__assert_fail@plt+0x1dd08>
   27ca4:	mov	r9, #0
   27ca8:	mov	ip, #1
   27cac:	mvn	lr, #87	; 0x57
   27cb0:	mov	r8, #0
   27cb4:	mov	r2, #0
   27cb8:	ldrb	r6, [r4]
   27cbc:	sub	r3, r6, #97	; 0x61
   27cc0:	cmp	r3, #20
   27cc4:	bls	27ce8 <__assert_fail@plt+0x15238>
   27cc8:	b	27d58 <__assert_fail@plt+0x152a8>
   27ccc:	movw	r1, #4095	; 0xfff
   27cd0:	orr	r2, r2, r1
   27cd4:	add	r4, r4, #1
   27cd8:	ldrb	r6, [r4]
   27cdc:	sub	r3, r6, #97	; 0x61
   27ce0:	cmp	r3, #20
   27ce4:	bhi	27d58 <__assert_fail@plt+0x152a8>
   27ce8:	add	r5, pc, #4
   27cec:	mov	r1, #2496	; 0x9c0
   27cf0:	ldr	pc, [r5, r3, lsl #2]
   27cf4:	andeq	r7, r2, ip, asr #25
   27cf8:	andeq	r8, r2, r0, lsr #32
   27cfc:	andeq	r8, r2, r0, lsr #32
   27d00:	andeq	r8, r2, r0, lsr #32
   27d04:	andeq	r8, r2, r0, lsr #32
   27d08:	andeq	r8, r2, r0, lsr #32
   27d0c:	andeq	r7, r2, r8, asr #26
   27d10:	andeq	r8, r2, r0, lsr #32
   27d14:	andeq	r8, r2, r0, lsr #32
   27d18:	andeq	r8, r2, r0, lsr #32
   27d1c:	andeq	r8, r2, r0, lsr #32
   27d20:	andeq	r8, r2, r0, lsr #32
   27d24:	andeq	r8, r2, r0, lsr #32
   27d28:	andeq	r8, r2, r0, lsr #32
   27d2c:	andeq	r7, r2, r0, asr sp
   27d30:	andeq	r8, r2, r0, lsr #32
   27d34:	andeq	r8, r2, r0, lsr #32
   27d38:	andeq	r8, r2, r0, lsr #32
   27d3c:	andeq	r8, r2, r0, lsr #32
   27d40:	andeq	r8, r2, r0, lsr #32
   27d44:	ldrdeq	r7, [r2], -r0
   27d48:	movw	r1, #1080	; 0x438
   27d4c:	b	27cd0 <__assert_fail@plt+0x15220>
   27d50:	movw	r1, #519	; 0x207
   27d54:	b	27cd0 <__assert_fail@plt+0x15220>
   27d58:	sub	r1, r6, #43	; 0x2b
   27d5c:	cmp	r1, #18
   27d60:	bhi	28020 <__assert_fail@plt+0x15570>
   27d64:	tst	sl, ip, lsl r1
   27d68:	beq	28020 <__assert_fail@plt+0x15570>
   27d6c:	ldrb	r1, [r4, #1]
   27d70:	sub	r3, r1, #48	; 0x30
   27d74:	cmp	r3, #8
   27d78:	bcs	27dd4 <__assert_fail@plt+0x15324>
   27d7c:	add	r3, r4, #2
   27d80:	mov	r7, #0
   27d84:	lsl	r4, r7, #3
   27d88:	uxtab	r1, r4, r1
   27d8c:	sub	r7, r1, #48	; 0x30
   27d90:	cmp	r9, r7, lsr #12
   27d94:	bne	28020 <__assert_fail@plt+0x15570>
   27d98:	ldrb	r1, [r3], #1
   27d9c:	and	r4, r1, #248	; 0xf8
   27da0:	cmp	r4, #48	; 0x30
   27da4:	beq	27d84 <__assert_fail@plt+0x152d4>
   27da8:	cmp	r2, #0
   27dac:	bne	28020 <__assert_fail@plt+0x15570>
   27db0:	sub	r4, r3, #1
   27db4:	mov	r5, #1
   27db8:	movw	r2, #4095	; 0xfff
   27dbc:	cmp	r1, #0
   27dc0:	beq	27e00 <__assert_fail@plt+0x15350>
   27dc4:	cmp	r1, #44	; 0x2c
   27dc8:	movw	r1, #4095	; 0xfff
   27dcc:	beq	27f1c <__assert_fail@plt+0x1546c>
   27dd0:	b	28020 <__assert_fail@plt+0x15570>
   27dd4:	add	r4, r4, #2
   27dd8:	cmp	r1, #103	; 0x67
   27ddc:	beq	27e08 <__assert_fail@plt+0x15358>
   27de0:	cmp	r1, #111	; 0x6f
   27de4:	beq	27e18 <__assert_fail@plt+0x15368>
   27de8:	cmp	r1, #117	; 0x75
   27dec:	bne	27e28 <__assert_fail@plt+0x15378>
   27df0:	mov	r5, #3
   27df4:	mov	r1, #0
   27df8:	mov	r7, #448	; 0x1c0
   27dfc:	b	27f1c <__assert_fail@plt+0x1546c>
   27e00:	movw	r1, #4095	; 0xfff
   27e04:	b	27f1c <__assert_fail@plt+0x1546c>
   27e08:	mov	r5, #3
   27e0c:	mov	r1, #0
   27e10:	mov	r7, #56	; 0x38
   27e14:	b	27f1c <__assert_fail@plt+0x1546c>
   27e18:	mov	r5, #3
   27e1c:	mov	r1, #0
   27e20:	mov	r7, #7
   27e24:	b	27f1c <__assert_fail@plt+0x1546c>
   27e28:	mov	r3, #1
   27e2c:	mov	r7, #0
   27e30:	uxtab	r1, lr, r1
   27e34:	mov	r5, r3
   27e38:	cmp	r1, #32
   27e3c:	bls	27e60 <__assert_fail@plt+0x153b0>
   27e40:	b	27f10 <__assert_fail@plt+0x15460>
   27e44:	orr	r7, r7, #512	; 0x200
   27e48:	mov	r3, r5
   27e4c:	ldrb	r1, [r4], #1
   27e50:	uxtab	r1, lr, r1
   27e54:	mov	r5, r3
   27e58:	cmp	r1, #32
   27e5c:	bhi	27f10 <__assert_fail@plt+0x15460>
   27e60:	add	ip, pc, #4
   27e64:	mov	r3, #2
   27e68:	ldr	pc, [ip, r1, lsl #2]
   27e6c:	andeq	r7, r2, ip, asr #28
   27e70:	andeq	r7, r2, r0, lsl pc
   27e74:	andeq	r7, r2, r0, lsl pc
   27e78:	andeq	r7, r2, r0, lsl pc
   27e7c:	andeq	r7, r2, r0, lsl pc
   27e80:	andeq	r7, r2, r0, lsl pc
   27e84:	andeq	r7, r2, r0, lsl pc
   27e88:	andeq	r7, r2, r0, lsl pc
   27e8c:	andeq	r7, r2, r0, lsl pc
   27e90:	andeq	r7, r2, r0, lsl pc
   27e94:	andeq	r7, r2, r0, lsl pc
   27e98:	andeq	r7, r2, r0, lsl pc
   27e9c:	andeq	r7, r2, r0, lsl pc
   27ea0:	andeq	r7, r2, r0, lsl pc
   27ea4:	andeq	r7, r2, r0, lsl pc
   27ea8:	andeq	r7, r2, r0, lsl pc
   27eac:	andeq	r7, r2, r0, lsl pc
   27eb0:	andeq	r7, r2, r0, lsl pc
   27eb4:	andeq	r7, r2, r0, lsl pc
   27eb8:	andeq	r7, r2, r0, lsl pc
   27ebc:	andeq	r7, r2, r0, lsl pc
   27ec0:	andeq	r7, r2, r0, lsl pc
   27ec4:	andeq	r7, r2, r0, lsl pc
   27ec8:	andeq	r7, r2, r0, lsl pc
   27ecc:	andeq	r7, r2, r0, lsl pc
   27ed0:	andeq	r7, r2, r0, lsl pc
   27ed4:	strdeq	r7, [r2], -r0
   27ed8:	strdeq	r7, [r2], -r8
   27edc:	andeq	r7, r2, r4, asr #28
   27ee0:	andeq	r7, r2, r0, lsl pc
   27ee4:	andeq	r7, r2, r0, lsl pc
   27ee8:	andeq	r7, r2, r0, lsl #30
   27eec:	andeq	r7, r2, r8, lsl #30
   27ef0:	orr	r7, r7, #292	; 0x124
   27ef4:	b	27e48 <__assert_fail@plt+0x15398>
   27ef8:	orr	r7, r7, #3072	; 0xc00
   27efc:	b	27e48 <__assert_fail@plt+0x15398>
   27f00:	orr	r7, r7, #146	; 0x92
   27f04:	b	27e48 <__assert_fail@plt+0x15398>
   27f08:	orr	r7, r7, #73	; 0x49
   27f0c:	b	27e48 <__assert_fail@plt+0x15398>
   27f10:	sub	r4, r4, #1
   27f14:	mov	r1, #0
   27f18:	mov	ip, #1
   27f1c:	mov	r3, r0
   27f20:	cmp	r1, #0
   27f24:	strb	r6, [r3, r8, lsl #4]!
   27f28:	stmib	r3, {r2, r7}
   27f2c:	strb	r5, [r3, #1]
   27f30:	bne	27f40 <__assert_fail@plt+0x15490>
   27f34:	cmp	r2, #0
   27f38:	andne	r7, r7, r2
   27f3c:	mov	r1, r7
   27f40:	add	r7, r0, r8, lsl #4
   27f44:	add	r3, r8, #1
   27f48:	str	r1, [r7, #12]
   27f4c:	ldrb	r6, [r4]
   27f50:	sub	r1, r6, #43	; 0x2b
   27f54:	cmp	r1, #18
   27f58:	bhi	28004 <__assert_fail@plt+0x15554>
   27f5c:	add	r7, pc, #4
   27f60:	mov	r8, r3
   27f64:	ldr	pc, [r7, r1, lsl #2]
   27f68:	andeq	r7, r2, ip, ror #26
   27f6c:			; <UNDEFINED> instruction: 0x00027fb4
   27f70:	andeq	r7, r2, ip, ror #26
   27f74:	andeq	r8, r2, r0, lsr #32
   27f78:	andeq	r8, r2, r0, lsr #32
   27f7c:	andeq	r8, r2, r0, lsr #32
   27f80:	andeq	r8, r2, r0, lsr #32
   27f84:	andeq	r8, r2, r0, lsr #32
   27f88:	andeq	r8, r2, r0, lsr #32
   27f8c:	andeq	r8, r2, r0, lsr #32
   27f90:	andeq	r8, r2, r0, lsr #32
   27f94:	andeq	r8, r2, r0, lsr #32
   27f98:	andeq	r8, r2, r0, lsr #32
   27f9c:	andeq	r8, r2, r0, lsr #32
   27fa0:	andeq	r8, r2, r0, lsr #32
   27fa4:	andeq	r8, r2, r0, lsr #32
   27fa8:	andeq	r8, r2, r0, lsr #32
   27fac:	andeq	r8, r2, r0, lsr #32
   27fb0:	andeq	r7, r2, ip, ror #26
   27fb4:	add	r4, r4, #1
   27fb8:	mov	r8, r3
   27fbc:	b	27cb4 <__assert_fail@plt+0x15204>
   27fc0:	mov	r0, #32
   27fc4:	bl	306e8 <__assert_fail@plt+0x1dc38>
   27fc8:	mov	r1, #0
   27fcc:	movw	r2, #317	; 0x13d
   27fd0:	and	r3, r5, #3072	; 0xc00
   27fd4:	movw	r7, #1023	; 0x3ff
   27fd8:	strb	r1, [r0, #17]
   27fdc:	strh	r2, [r0]
   27fe0:	sub	r2, r6, r4
   27fe4:	movw	r1, #4095	; 0xfff
   27fe8:	cmp	r2, #5
   27fec:	str	r1, [r0, #4]
   27ff0:	str	r5, [r0, #8]
   27ff4:	orrlt	r1, r3, r7
   27ff8:	str	r1, [r0, #12]
   27ffc:	sub	sp, fp, #28
   28000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28004:	cmp	r6, #0
   28008:	bne	28020 <__assert_fail@plt+0x15570>
   2800c:	add	r1, r0, r3, lsl #4
   28010:	mov	r2, #0
   28014:	strb	r2, [r1, #1]
   28018:	sub	sp, fp, #28
   2801c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28020:	bl	32910 <__assert_fail@plt+0x1fe60>
   28024:	mov	r0, #0
   28028:	sub	sp, fp, #28
   2802c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28030:	push	{r4, sl, fp, lr}
   28034:	add	fp, sp, #8
   28038:	sub	sp, sp, #104	; 0x68
   2803c:	mov	r1, r0
   28040:	mov	r2, sp
   28044:	mov	r0, #3
   28048:	bl	12a14 <__xstat64@plt>
   2804c:	mov	r1, r0
   28050:	mov	r0, #0
   28054:	cmp	r1, #0
   28058:	beq	28064 <__assert_fail@plt+0x155b4>
   2805c:	sub	sp, fp, #8
   28060:	pop	{r4, sl, fp, pc}
   28064:	ldr	r4, [sp, #16]
   28068:	mov	r0, #32
   2806c:	bl	306e8 <__assert_fail@plt+0x1dc38>
   28070:	mov	r1, #0
   28074:	strb	r1, [r0, #17]
   28078:	movw	r1, #4095	; 0xfff
   2807c:	stmib	r0, {r1, r4}
   28080:	str	r1, [r0, #12]
   28084:	movw	r1, #317	; 0x13d
   28088:	strh	r1, [r0]
   2808c:	sub	sp, fp, #8
   28090:	pop	{r4, sl, fp, pc}
   28094:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   28098:	add	fp, sp, #24
   2809c:	ldrb	r4, [r3, #1]
   280a0:	ldr	ip, [fp, #8]
   280a4:	bfc	r0, #12, #20
   280a8:	cmp	r4, #0
   280ac:	beq	2818c <__assert_fail@plt+0x156dc>
   280b0:	cmp	r1, #0
   280b4:	mov	lr, r1
   280b8:	add	r3, r3, #8
   280bc:	mov	r9, #0
   280c0:	movw	r8, #4095	; 0xfff
   280c4:	movwne	lr, #3072	; 0xc00
   280c8:	b	280e4 <__assert_fail@plt+0x15634>
   280cc:	bic	r0, r0, r3
   280d0:	orr	r9, r3, r9
   280d4:	ldrb	r4, [r5, #9]
   280d8:	add	r3, r5, #16
   280dc:	cmp	r4, #0
   280e0:	beq	28190 <__assert_fail@plt+0x156e0>
   280e4:	mov	r5, r3
   280e8:	ldr	r7, [r3, #-4]
   280ec:	ldr	r3, [r3]
   280f0:	uxtb	r4, r4
   280f4:	ldr	r6, [r5, #4]
   280f8:	cmp	r4, #2
   280fc:	bic	r6, lr, r6
   28100:	beq	2812c <__assert_fail@plt+0x1567c>
   28104:	cmp	r4, #3
   28108:	bne	28138 <__assert_fail@plt+0x15688>
   2810c:	and	r4, r3, r0
   28110:	tst	r4, #146	; 0x92
   28114:	mov	r3, r4
   28118:	orrne	r3, r3, #146	; 0x92
   2811c:	tst	r4, #292	; 0x124
   28120:	orrne	r3, r3, #292	; 0x124
   28124:	tst	r4, #73	; 0x49
   28128:	b	28134 <__assert_fail@plt+0x15684>
   2812c:	and	r4, r0, #73	; 0x49
   28130:	orrs	r4, r4, r1
   28134:	orrne	r3, r3, #73	; 0x49
   28138:	cmp	r7, #0
   2813c:	mov	r4, r7
   28140:	mvneq	r4, r2
   28144:	bic	r4, r4, r6
   28148:	and	r3, r4, r3
   2814c:	ldrb	r4, [r5, #-8]
   28150:	cmp	r4, #43	; 0x2b
   28154:	beq	28184 <__assert_fail@plt+0x156d4>
   28158:	cmp	r4, #45	; 0x2d
   2815c:	beq	280cc <__assert_fail@plt+0x1561c>
   28160:	cmp	r4, #61	; 0x3d
   28164:	bne	280d4 <__assert_fail@plt+0x15624>
   28168:	mvn	r4, r7
   2816c:	cmp	r7, #0
   28170:	orrne	r6, r6, r4
   28174:	and	r0, r6, r0
   28178:	orr	r0, r3, r0
   2817c:	bic	r3, r8, r6
   28180:	b	280d0 <__assert_fail@plt+0x15620>
   28184:	orr	r0, r3, r0
   28188:	b	280d0 <__assert_fail@plt+0x15620>
   2818c:	mov	r9, #0
   28190:	cmp	ip, #0
   28194:	strne	r9, [ip]
   28198:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2819c:	push	{fp, lr}
   281a0:	mov	fp, sp
   281a4:	mov	r4, r0
   281a8:	movw	r0, #17648	; 0x44f0
   281ac:	movw	r1, #7076	; 0x1ba4
   281b0:	mov	r2, #5
   281b4:	movt	r0, #6
   281b8:	movt	r1, #5
   281bc:	ldr	r5, [r0]
   281c0:	mov	r0, #0
   281c4:	bl	12564 <dcgettext@plt>
   281c8:	mov	r2, r0
   281cc:	mov	r0, r5
   281d0:	mov	r1, r4
   281d4:	bl	1269c <error@plt>
   281d8:	bl	12a5c <abort@plt>
   281dc:	push	{fp, lr}
   281e0:	mov	fp, sp
   281e4:	mov	r4, r0
   281e8:	movw	r0, #17648	; 0x44f0
   281ec:	movw	r1, #7119	; 0x1bcf
   281f0:	mov	r2, #5
   281f4:	movt	r0, #6
   281f8:	movt	r1, #5
   281fc:	ldr	r5, [r0]
   28200:	mov	r0, #0
   28204:	bl	12564 <dcgettext@plt>
   28208:	mov	r2, r0
   2820c:	mov	r0, r5
   28210:	mov	r1, r4
   28214:	bl	1269c <error@plt>
   28218:	bl	12a5c <abort@plt>
   2821c:	sub	sp, sp, #4
   28220:	push	{fp, lr}
   28224:	mov	fp, sp
   28228:	sub	sp, sp, #4
   2822c:	str	r3, [fp, #8]
   28230:	tst	r2, #64	; 0x40
   28234:	mov	r3, #0
   28238:	ldrne	r3, [fp, #8]
   2823c:	bl	127e0 <openat64@plt>
   28240:	bl	2ffe8 <__assert_fail@plt+0x1d538>
   28244:	mov	sp, fp
   28248:	pop	{fp, lr}
   2824c:	add	sp, sp, #4
   28250:	bx	lr
   28254:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28258:	add	fp, sp, #28
   2825c:	sub	sp, sp, #4
   28260:	vpush	{d8-d9}
   28264:	sub	sp, sp, #1424	; 0x590
   28268:	mov	r9, r0
   2826c:	add	r0, r0, #48	; 0x30
   28270:	sub	r1, fp, #72	; 0x48
   28274:	movw	lr, #7224	; 0x1c38
   28278:	vmov.i32	q4, #0	; 0x00000000
   2827c:	add	r3, sp, #240	; 0xf0
   28280:	sub	r4, fp, #112	; 0x70
   28284:	mov	r8, #0
   28288:	mov	r7, #0
   2828c:	str	r0, [sp, #84]	; 0x54
   28290:	add	r0, r1, #1
   28294:	movt	lr, #5
   28298:	add	ip, r1, #19
   2829c:	str	r0, [sp, #76]	; 0x4c
   282a0:	add	r0, r9, #8
   282a4:	str	ip, [sp, #168]	; 0xa8
   282a8:	str	r0, [sp, #88]	; 0x58
   282ac:	add	r0, r9, #32
   282b0:	str	r0, [sp, #92]	; 0x5c
   282b4:	add	r0, r9, #40	; 0x28
   282b8:	str	r0, [sp, #80]	; 0x50
   282bc:	add	r0, r9, #56	; 0x38
   282c0:	str	r0, [sp, #160]	; 0xa0
   282c4:	add	r0, r9, #64	; 0x40
   282c8:	str	r0, [sp, #156]	; 0x9c
   282cc:	add	r0, r9, #72	; 0x48
   282d0:	str	r0, [sp, #136]	; 0x88
   282d4:	add	r0, r9, #80	; 0x50
   282d8:	str	r0, [sp, #132]	; 0x84
   282dc:	add	r0, r9, #88	; 0x58
   282e0:	str	r0, [sp, #72]	; 0x48
   282e4:	add	r0, r9, #96	; 0x60
   282e8:	str	r0, [sp, #116]	; 0x74
   282ec:	add	r0, r9, #104	; 0x68
   282f0:	str	r0, [sp, #112]	; 0x70
   282f4:	add	r0, r9, #112	; 0x70
   282f8:	str	r0, [sp, #108]	; 0x6c
   282fc:	add	r0, r9, #120	; 0x78
   28300:	str	r0, [sp, #104]	; 0x68
   28304:	add	r0, r9, #128	; 0x80
   28308:	str	r0, [sp, #100]	; 0x64
   2830c:	add	r0, r9, #136	; 0x88
   28310:	str	r0, [sp, #96]	; 0x60
   28314:	mov	r0, #0
   28318:	strh	r0, [fp, #-112]	; 0xffffff90
   2831c:	mvn	r0, #1
   28320:	str	r0, [sp, #176]	; 0xb0
   28324:	mov	r0, #0
   28328:	str	r0, [sp, #120]	; 0x78
   2832c:	mov	r0, #0
   28330:	str	r0, [sp, #124]	; 0x7c
   28334:	mov	r0, #0
   28338:	str	r0, [sp, #128]	; 0x80
   2833c:	mov	r0, #0
   28340:	str	r0, [sp, #144]	; 0x90
   28344:	mov	r0, #0
   28348:	str	r0, [sp, #152]	; 0x98
   2834c:	mov	r0, #0
   28350:	str	r0, [sp, #140]	; 0x8c
   28354:	cmp	r8, #12
   28358:	bne	2838c <__assert_fail@plt+0x158dc>
   2835c:	b	2c2e4 <__assert_fail@plt+0x19834>
   28360:	movw	r1, #8166	; 0x1fe6
   28364:	movt	r1, #5
   28368:	add	r0, r1, r0
   2836c:	ldrsb	r8, [r0]
   28370:	add	r7, r7, #1
   28374:	add	r0, r4, r7, lsl #1
   28378:	cmp	r7, #18
   2837c:	strh	r8, [r0]
   28380:	bgt	2c2ec <__assert_fail@plt+0x1983c>
   28384:	cmp	r8, #12
   28388:	beq	2c2e4 <__assert_fail@plt+0x19834>
   2838c:	add	r0, lr, r8
   28390:	str	r7, [sp, #184]	; 0xb8
   28394:	ldrsb	sl, [r0]
   28398:	cmn	sl, #93	; 0x5d
   2839c:	beq	299e4 <__assert_fail@plt+0x16f34>
   283a0:	ldr	r6, [sp, #176]	; 0xb0
   283a4:	cmn	r6, #2
   283a8:	bne	29958 <__assert_fail@plt+0x16ea8>
   283ac:	ldr	r5, [r9]
   283b0:	str	r3, [sp, #172]	; 0xac
   283b4:	ldrb	r0, [r5]
   283b8:	sub	r1, r0, #9
   283bc:	cmp	r1, #5
   283c0:	bcs	283dc <__assert_fail@plt+0x1592c>
   283c4:	add	r5, r5, #1
   283c8:	str	r5, [r9]
   283cc:	ldrb	r0, [r5]
   283d0:	sub	r1, r0, #9
   283d4:	cmp	r1, #5
   283d8:	bcc	283c4 <__assert_fail@plt+0x15914>
   283dc:	cmp	r0, #32
   283e0:	beq	283c4 <__assert_fail@plt+0x15914>
   283e4:	sub	r1, r0, #48	; 0x30
   283e8:	cmp	r1, #10
   283ec:	bcs	28400 <__assert_fail@plt+0x15950>
   283f0:	cmp	r0, #45	; 0x2d
   283f4:	cmpne	r0, #43	; 0x2b
   283f8:	beq	28560 <__assert_fail@plt+0x15ab0>
   283fc:	b	28828 <__assert_fail@plt+0x15d78>
   28400:	sub	r1, r0, #40	; 0x28
   28404:	cmp	r1, #82	; 0x52
   28408:	bhi	297d8 <__assert_fail@plt+0x16d28>
   2840c:	add	r2, pc, #0
   28410:	ldr	pc, [r2, r1, lsl #2]
   28414:	andeq	r8, r2, r4, lsr #11
   28418:	ldrdeq	r9, [r2], -r8
   2841c:	ldrdeq	r9, [r2], -r8
   28420:	andeq	r8, r2, r0, ror #10
   28424:	ldrdeq	r9, [r2], -r8
   28428:	andeq	r8, r2, r0, ror #10
   2842c:	ldrdeq	r9, [r2], -r8
   28430:	ldrdeq	r9, [r2], -r8
   28434:	ldrdeq	r9, [r2], -r8
   28438:	ldrdeq	r9, [r2], -r8
   2843c:	ldrdeq	r9, [r2], -r8
   28440:	ldrdeq	r9, [r2], -r8
   28444:	ldrdeq	r9, [r2], -r8
   28448:	ldrdeq	r9, [r2], -r8
   2844c:	ldrdeq	r9, [r2], -r8
   28450:	ldrdeq	r9, [r2], -r8
   28454:	ldrdeq	r9, [r2], -r8
   28458:	ldrdeq	r9, [r2], -r8
   2845c:	ldrdeq	r9, [r2], -r8
   28460:	ldrdeq	r9, [r2], -r8
   28464:	ldrdeq	r9, [r2], -r8
   28468:	ldrdeq	r9, [r2], -r8
   2846c:	ldrdeq	r9, [r2], -r8
   28470:	ldrdeq	r9, [r2], -r8
   28474:	ldrdeq	r9, [r2], -r8
   28478:	andeq	r8, r2, r8, lsr r8
   2847c:	andeq	r8, r2, r8, lsr r8
   28480:	andeq	r8, r2, r8, lsr r8
   28484:	andeq	r8, r2, r8, lsr r8
   28488:	andeq	r8, r2, r8, lsr r8
   2848c:	andeq	r8, r2, r8, lsr r8
   28490:	andeq	r8, r2, r8, lsr r8
   28494:	andeq	r8, r2, r8, lsr r8
   28498:	andeq	r8, r2, r8, lsr r8
   2849c:	andeq	r8, r2, r8, lsr r8
   284a0:	andeq	r8, r2, r8, lsr r8
   284a4:	andeq	r8, r2, r8, lsr r8
   284a8:	andeq	r8, r2, r8, lsr r8
   284ac:	andeq	r8, r2, r8, lsr r8
   284b0:	andeq	r8, r2, r8, lsr r8
   284b4:	andeq	r8, r2, r8, lsr r8
   284b8:	andeq	r8, r2, r8, lsr r8
   284bc:	andeq	r8, r2, r8, lsr r8
   284c0:	andeq	r8, r2, r8, lsr r8
   284c4:	andeq	r8, r2, r8, lsr r8
   284c8:	andeq	r8, r2, r8, lsr r8
   284cc:	andeq	r8, r2, r8, lsr r8
   284d0:	andeq	r8, r2, r8, lsr r8
   284d4:	andeq	r8, r2, r8, lsr r8
   284d8:	andeq	r8, r2, r8, lsr r8
   284dc:	andeq	r8, r2, r8, lsr r8
   284e0:	ldrdeq	r9, [r2], -r8
   284e4:	ldrdeq	r9, [r2], -r8
   284e8:	ldrdeq	r9, [r2], -r8
   284ec:	ldrdeq	r9, [r2], -r8
   284f0:	ldrdeq	r9, [r2], -r8
   284f4:	ldrdeq	r9, [r2], -r8
   284f8:	andeq	r8, r2, r8, lsr r8
   284fc:	andeq	r8, r2, r8, lsr r8
   28500:	andeq	r8, r2, r8, lsr r8
   28504:	andeq	r8, r2, r8, lsr r8
   28508:	andeq	r8, r2, r8, lsr r8
   2850c:	andeq	r8, r2, r8, lsr r8
   28510:	andeq	r8, r2, r8, lsr r8
   28514:	andeq	r8, r2, r8, lsr r8
   28518:	andeq	r8, r2, r8, lsr r8
   2851c:	andeq	r8, r2, r8, lsr r8
   28520:	andeq	r8, r2, r8, lsr r8
   28524:	andeq	r8, r2, r8, lsr r8
   28528:	andeq	r8, r2, r8, lsr r8
   2852c:	andeq	r8, r2, r8, lsr r8
   28530:	andeq	r8, r2, r8, lsr r8
   28534:	andeq	r8, r2, r8, lsr r8
   28538:	andeq	r8, r2, r8, lsr r8
   2853c:	andeq	r8, r2, r8, lsr r8
   28540:	andeq	r8, r2, r8, lsr r8
   28544:	andeq	r8, r2, r8, lsr r8
   28548:	andeq	r8, r2, r8, lsr r8
   2854c:	andeq	r8, r2, r8, lsr r8
   28550:	andeq	r8, r2, r8, lsr r8
   28554:	andeq	r8, r2, r8, lsr r8
   28558:	andeq	r8, r2, r8, lsr r8
   2855c:	andeq	r8, r2, r8, lsr r8
   28560:	add	r2, r5, #1
   28564:	mov	r1, r5
   28568:	b	28574 <__assert_fail@plt+0x15ac4>
   2856c:	add	r1, r1, #1
   28570:	add	r2, r2, #1
   28574:	str	r2, [r9]
   28578:	ldrb	r3, [r2]
   2857c:	sub	r6, r3, #9
   28580:	cmp	r6, #5
   28584:	bcc	2856c <__assert_fail@plt+0x15abc>
   28588:	cmp	r3, #32
   2858c:	beq	2856c <__assert_fail@plt+0x15abc>
   28590:	sub	r6, r3, #48	; 0x30
   28594:	mov	r5, r2
   28598:	cmp	r6, #9
   2859c:	bhi	283cc <__assert_fail@plt+0x1591c>
   285a0:	b	285fc <__assert_fail@plt+0x15b4c>
   285a4:	mov	r0, #0
   285a8:	b	285b8 <__assert_fail@plt+0x15b08>
   285ac:	sub	r0, r0, #1
   285b0:	cmp	r0, #0
   285b4:	beq	283cc <__assert_fail@plt+0x1591c>
   285b8:	mov	r1, r5
   285bc:	add	r5, r5, #1
   285c0:	str	r5, [r9]
   285c4:	ldrb	r1, [r1]
   285c8:	cmp	r1, #40	; 0x28
   285cc:	beq	285e4 <__assert_fail@plt+0x15b34>
   285d0:	cmp	r1, #41	; 0x29
   285d4:	beq	285ac <__assert_fail@plt+0x15afc>
   285d8:	cmp	r1, #0
   285dc:	bne	285b0 <__assert_fail@plt+0x15b00>
   285e0:	b	285f4 <__assert_fail@plt+0x15b44>
   285e4:	add	r0, r0, #1
   285e8:	cmp	r0, #0
   285ec:	bne	285b8 <__assert_fail@plt+0x15b08>
   285f0:	b	283cc <__assert_fail@plt+0x1591c>
   285f4:	ldr	r3, [sp, #172]	; 0xac
   285f8:	b	29994 <__assert_fail@plt+0x16ee4>
   285fc:	cmp	r0, #45	; 0x2d
   28600:	bne	29358 <__assert_fail@plt+0x168a8>
   28604:	mov	r0, #0
   28608:	cmp	r0, #0
   2860c:	bmi	28624 <__assert_fail@plt+0x15b74>
   28610:	movw	r5, #52428	; 0xcccc
   28614:	movt	r5, #3276	; 0xccc
   28618:	cmp	r0, r5
   2861c:	ble	2863c <__assert_fail@plt+0x15b8c>
   28620:	b	29414 <__assert_fail@plt+0x16964>
   28624:	cmn	r0, #1
   28628:	beq	2863c <__assert_fail@plt+0x15b8c>
   2862c:	mov	r5, #-2147483648	; 0x80000000
   28630:	sdiv	r6, r5, r0
   28634:	cmp	r6, #10
   28638:	blt	29414 <__assert_fail@plt+0x16964>
   2863c:	add	r6, r0, r0, lsl #2
   28640:	uxtb	r0, r3
   28644:	rsb	r0, r0, r6, lsl #1
   28648:	add	r0, r0, #48	; 0x30
   2864c:	cmp	r0, r6, lsl #1
   28650:	bvs	29414 <__assert_fail@plt+0x16964>
   28654:	ldrb	r3, [r1, #2]
   28658:	add	r6, r1, #1
   2865c:	sub	r1, r3, #48	; 0x30
   28660:	cmp	r1, #10
   28664:	mov	r1, r6
   28668:	bcc	28608 <__assert_fail@plt+0x15b58>
   2866c:	mvn	r1, #0
   28670:	add	r5, r6, #1
   28674:	str	r1, [sp, #236]	; 0xec
   28678:	mov	r1, #1
   2867c:	str	r1, [sp, #232]	; 0xe8
   28680:	orr	r1, r3, #2
   28684:	cmp	r1, #46	; 0x2e
   28688:	bne	293d8 <__assert_fail@plt+0x16928>
   2868c:	ldrb	r1, [r6, #2]
   28690:	sub	r3, r1, #48	; 0x30
   28694:	cmp	r3, #9
   28698:	bhi	293d8 <__assert_fail@plt+0x16928>
   2869c:	mov	r1, r6
   286a0:	add	r3, r3, r3, lsl #2
   286a4:	ldrb	r2, [r1, #3]!
   286a8:	sub	r2, r2, #48	; 0x30
   286ac:	cmp	r2, #10
   286b0:	str	r2, [sp, #228]	; 0xe4
   286b4:	mov	r2, #3
   286b8:	movwcc	r2, #4
   286bc:	addcc	r1, r6, #4
   286c0:	ldrb	r2, [r6, r2]
   286c4:	sub	r2, r2, #48	; 0x30
   286c8:	cmp	r2, #10
   286cc:	str	r2, [sp, #224]	; 0xe0
   286d0:	addcc	r1, r1, #1
   286d4:	mov	r2, r1
   286d8:	ldrb	r6, [r2], #1
   286dc:	sub	r7, r6, #48	; 0x30
   286e0:	cmp	r7, #10
   286e4:	str	r7, [sp, #220]	; 0xdc
   286e8:	movcs	r2, r1
   286ec:	mov	r1, r2
   286f0:	ldrb	r6, [r1], #1
   286f4:	sub	r7, r6, #48	; 0x30
   286f8:	cmp	r7, #10
   286fc:	movcs	r1, r2
   28700:	mov	r2, r1
   28704:	ldrb	r5, [r2], #1
   28708:	sub	r5, r5, #48	; 0x30
   2870c:	cmp	r5, #10
   28710:	movcs	r2, r1
   28714:	mov	r1, r2
   28718:	ldrb	r6, [r1], #1
   2871c:	sub	r4, r6, #48	; 0x30
   28720:	cmp	r4, #10
   28724:	movcs	r1, r2
   28728:	mov	r6, r1
   2872c:	ldrb	r2, [r6], #1
   28730:	sub	lr, r2, #48	; 0x30
   28734:	cmp	lr, #10
   28738:	movcs	r6, r1
   2873c:	mov	r2, r6
   28740:	ldrb	r1, [r2], #1
   28744:	sub	ip, r1, #48	; 0x30
   28748:	ldr	r1, [sp, #228]	; 0xe4
   2874c:	cmp	ip, #10
   28750:	movcs	r2, r6
   28754:	lsl	r6, r3, #1
   28758:	cmp	r1, #10
   2875c:	addcc	r6, r1, r3, lsl #1
   28760:	ldr	r1, [sp, #224]	; 0xe0
   28764:	add	r3, r6, r6, lsl #2
   28768:	cmp	r1, #10
   2876c:	lsl	r6, r3, #1
   28770:	addcc	r6, r1, r3, lsl #1
   28774:	ldr	r1, [sp, #220]	; 0xdc
   28778:	add	r3, r6, r6, lsl #2
   2877c:	cmp	r1, #10
   28780:	lsl	r6, r3, #1
   28784:	addcc	r6, r1, r3, lsl #1
   28788:	cmp	r7, #10
   2878c:	add	r3, r6, r6, lsl #2
   28790:	lsl	r6, r3, #1
   28794:	addcc	r6, r7, r3, lsl #1
   28798:	cmp	r5, #10
   2879c:	add	r3, r6, r6, lsl #2
   287a0:	lsl	r6, r3, #1
   287a4:	addcc	r6, r5, r3, lsl #1
   287a8:	cmp	r4, #10
   287ac:	add	r3, r6, r6, lsl #2
   287b0:	lsl	r5, r3, #1
   287b4:	addcc	r5, r4, r3, lsl #1
   287b8:	cmp	lr, #10
   287bc:	add	r3, r5, r5, lsl #2
   287c0:	ldr	r5, [sp, #232]	; 0xe8
   287c4:	lsl	r6, r3, #1
   287c8:	addcc	r6, lr, r3, lsl #1
   287cc:	cmp	ip, #10
   287d0:	add	r6, r6, r6, lsl #2
   287d4:	lsl	r3, r6, #1
   287d8:	addcc	r3, ip, r6, lsl #1
   287dc:	cmp	r5, #0
   287e0:	beq	29434 <__assert_fail@plt+0x16984>
   287e4:	ldrb	r1, [r2]
   287e8:	ldr	ip, [sp, #168]	; 0xa8
   287ec:	ldr	r7, [sp, #184]	; 0xb8
   287f0:	movw	lr, #7224	; 0x1c38
   287f4:	sub	r4, fp, #112	; 0x70
   287f8:	movt	lr, #5
   287fc:	sub	r6, r1, #48	; 0x30
   28800:	cmp	r6, #9
   28804:	bhi	29728 <__assert_fail@plt+0x16c78>
   28808:	uxtb	r1, r1
   2880c:	cmp	r1, #48	; 0x30
   28810:	bne	29724 <__assert_fail@plt+0x16c74>
   28814:	ldrb	r1, [r2, #1]!
   28818:	sub	r6, r1, #48	; 0x30
   2881c:	cmp	r6, #10
   28820:	bcc	28808 <__assert_fail@plt+0x15d58>
   28824:	b	29728 <__assert_fail@plt+0x16c78>
   28828:	mov	r6, #0
   2882c:	mov	r2, r5
   28830:	mov	r3, r0
   28834:	b	29360 <__assert_fail@plt+0x168b0>
   28838:	sub	r1, fp, #72	; 0x48
   2883c:	cmp	r1, ip
   28840:	bcs	28850 <__assert_fail@plt+0x15da0>
   28844:	strb	r0, [r1], #1
   28848:	ldr	r0, [r9]
   2884c:	b	28854 <__assert_fail@plt+0x15da4>
   28850:	mov	r0, r5
   28854:	add	r5, r0, #1
   28858:	mov	r2, #1
   2885c:	str	r5, [r9]
   28860:	ldrb	r0, [r0, #1]
   28864:	sub	r3, r0, #65	; 0x41
   28868:	cmp	r3, #26
   2886c:	subcs	r3, r0, #97	; 0x61
   28870:	cmpcs	r3, #26
   28874:	movcs	r2, #0
   28878:	cmp	r0, #46	; 0x2e
   2887c:	beq	2883c <__assert_fail@plt+0x15d8c>
   28880:	cmp	r2, #0
   28884:	bne	2883c <__assert_fail@plt+0x15d8c>
   28888:	mov	r0, #0
   2888c:	mov	r5, r4
   28890:	mvn	r3, #96	; 0x60
   28894:	strb	r0, [r1]
   28898:	ldrb	r0, [fp, #-72]	; 0xffffffb8
   2889c:	cmp	r0, #0
   288a0:	beq	288c8 <__assert_fail@plt+0x15e18>
   288a4:	ldr	r1, [sp, #76]	; 0x4c
   288a8:	uxtab	r2, r3, r0
   288ac:	cmp	r2, #26
   288b0:	subcc	r0, r0, #32
   288b4:	strb	r0, [r1, #-1]
   288b8:	ldrb	r0, [r1]
   288bc:	add	r1, r1, #1
   288c0:	cmp	r0, #0
   288c4:	bne	288a8 <__assert_fail@plt+0x15df8>
   288c8:	movw	r1, #9939	; 0x26d3
   288cc:	sub	r4, fp, #72	; 0x48
   288d0:	mov	r2, #3
   288d4:	movt	r1, #5
   288d8:	mov	r0, r4
   288dc:	bl	127a4 <bcmp@plt>
   288e0:	cmp	r0, #0
   288e4:	movw	r0, #8192	; 0x2000
   288e8:	movt	r0, #5
   288ec:	beq	29924 <__assert_fail@plt+0x16e74>
   288f0:	movw	r1, #9942	; 0x26d6
   288f4:	mov	r0, r4
   288f8:	mov	r2, #5
   288fc:	movt	r1, #5
   28900:	bl	127a4 <bcmp@plt>
   28904:	cmp	r0, #0
   28908:	beq	29424 <__assert_fail@plt+0x16974>
   2890c:	movw	r1, #9947	; 0x26db
   28910:	mov	r0, r4
   28914:	mov	r2, #3
   28918:	movt	r1, #5
   2891c:	bl	127a4 <bcmp@plt>
   28920:	cmp	r0, #0
   28924:	beq	2944c <__assert_fail@plt+0x1699c>
   28928:	movw	r1, #9950	; 0x26de
   2892c:	mov	r0, r4
   28930:	mov	r2, #5
   28934:	movt	r1, #5
   28938:	bl	127a4 <bcmp@plt>
   2893c:	cmp	r0, #0
   28940:	beq	2945c <__assert_fail@plt+0x169ac>
   28944:	mov	r0, r4
   28948:	bl	127bc <strlen@plt>
   2894c:	mov	r6, r0
   28950:	cmp	r0, #3
   28954:	beq	2896c <__assert_fail@plt+0x15ebc>
   28958:	cmp	r6, #4
   2895c:	bne	2946c <__assert_fail@plt+0x169bc>
   28960:	ldrb	r0, [fp, #-69]	; 0xffffffbb
   28964:	cmp	r0, #46	; 0x2e
   28968:	bne	2946c <__assert_fail@plt+0x169bc>
   2896c:	movw	r1, #9955	; 0x26e3
   28970:	mov	r0, r4
   28974:	mov	r2, #3
   28978:	movt	r1, #5
   2897c:	bl	127a4 <bcmp@plt>
   28980:	cmp	r0, #0
   28984:	movw	r0, #8252	; 0x203c
   28988:	movt	r0, #5
   2898c:	beq	29924 <__assert_fail@plt+0x16e74>
   28990:	movw	r1, #9963	; 0x26eb
   28994:	mov	r0, r4
   28998:	mov	r2, #3
   2899c:	movt	r1, #5
   289a0:	bl	127a4 <bcmp@plt>
   289a4:	cmp	r0, #0
   289a8:	beq	297bc <__assert_fail@plt+0x16d0c>
   289ac:	movw	r1, #9972	; 0x26f4
   289b0:	mov	r0, r4
   289b4:	mov	r2, #3
   289b8:	movt	r1, #5
   289bc:	bl	127a4 <bcmp@plt>
   289c0:	cmp	r0, #0
   289c4:	beq	297c8 <__assert_fail@plt+0x16d18>
   289c8:	movw	r1, #9978	; 0x26fa
   289cc:	mov	r0, r4
   289d0:	mov	r2, #3
   289d4:	movt	r1, #5
   289d8:	bl	127a4 <bcmp@plt>
   289dc:	cmp	r0, #0
   289e0:	beq	297e8 <__assert_fail@plt+0x16d38>
   289e4:	movw	r1, #9984	; 0x2700
   289e8:	mov	r0, r4
   289ec:	mov	r2, #3
   289f0:	movt	r1, #5
   289f4:	bl	127a4 <bcmp@plt>
   289f8:	cmp	r0, #0
   289fc:	beq	297f8 <__assert_fail@plt+0x16d48>
   28a00:	movw	r1, #9988	; 0x2704
   28a04:	mov	r0, r4
   28a08:	mov	r2, #3
   28a0c:	movt	r1, #5
   28a10:	bl	127a4 <bcmp@plt>
   28a14:	cmp	r0, #0
   28a18:	beq	29808 <__assert_fail@plt+0x16d58>
   28a1c:	movw	r1, #9993	; 0x2709
   28a20:	mov	r0, r4
   28a24:	mov	r2, #3
   28a28:	movt	r1, #5
   28a2c:	bl	127a4 <bcmp@plt>
   28a30:	cmp	r0, #0
   28a34:	beq	29818 <__assert_fail@plt+0x16d68>
   28a38:	movw	r1, #9998	; 0x270e
   28a3c:	mov	r0, r4
   28a40:	mov	r2, #3
   28a44:	movt	r1, #5
   28a48:	bl	127a4 <bcmp@plt>
   28a4c:	cmp	r0, #0
   28a50:	beq	29828 <__assert_fail@plt+0x16d78>
   28a54:	movw	r1, #10005	; 0x2715
   28a58:	mov	r0, r4
   28a5c:	mov	r2, #3
   28a60:	movt	r1, #5
   28a64:	bl	127a4 <bcmp@plt>
   28a68:	cmp	r0, #0
   28a6c:	beq	29838 <__assert_fail@plt+0x16d88>
   28a70:	movw	r1, #10015	; 0x271f
   28a74:	mov	r0, r4
   28a78:	mov	r2, #3
   28a7c:	movt	r1, #5
   28a80:	bl	127a4 <bcmp@plt>
   28a84:	cmp	r0, #0
   28a88:	beq	29848 <__assert_fail@plt+0x16d98>
   28a8c:	movw	r1, #10020	; 0x2724
   28a90:	mov	r0, r4
   28a94:	mov	r2, #3
   28a98:	movt	r1, #5
   28a9c:	bl	127a4 <bcmp@plt>
   28aa0:	cmp	r0, #0
   28aa4:	beq	29858 <__assert_fail@plt+0x16da8>
   28aa8:	movw	r1, #10028	; 0x272c
   28aac:	mov	r0, r4
   28ab0:	mov	r2, #3
   28ab4:	movt	r1, #5
   28ab8:	bl	127a4 <bcmp@plt>
   28abc:	cmp	r0, #0
   28ac0:	beq	29868 <__assert_fail@plt+0x16db8>
   28ac4:	movw	r1, #10037	; 0x2735
   28ac8:	mov	r0, r4
   28acc:	mov	r2, #3
   28ad0:	movt	r1, #5
   28ad4:	bl	127a4 <bcmp@plt>
   28ad8:	cmp	r0, #0
   28adc:	beq	29878 <__assert_fail@plt+0x16dc8>
   28ae0:	movw	r1, #10046	; 0x273e
   28ae4:	mov	r0, r4
   28ae8:	mov	r2, #3
   28aec:	movt	r1, #5
   28af0:	bl	127a4 <bcmp@plt>
   28af4:	cmp	r0, #0
   28af8:	beq	29888 <__assert_fail@plt+0x16dd8>
   28afc:	movw	r1, #10053	; 0x2745
   28b00:	sub	r0, fp, #72	; 0x48
   28b04:	mov	r2, #3
   28b08:	movt	r1, #5
   28b0c:	bl	127a4 <bcmp@plt>
   28b10:	cmp	r0, #0
   28b14:	beq	29898 <__assert_fail@plt+0x16de8>
   28b18:	movw	r1, #10060	; 0x274c
   28b1c:	sub	r0, fp, #72	; 0x48
   28b20:	mov	r2, #3
   28b24:	movt	r1, #5
   28b28:	bl	127a4 <bcmp@plt>
   28b2c:	cmp	r0, #0
   28b30:	beq	298a8 <__assert_fail@plt+0x16df8>
   28b34:	movw	r1, #10068	; 0x2754
   28b38:	sub	r0, fp, #72	; 0x48
   28b3c:	mov	r2, #3
   28b40:	movt	r1, #5
   28b44:	bl	127a4 <bcmp@plt>
   28b48:	cmp	r0, #0
   28b4c:	beq	298b8 <__assert_fail@plt+0x16e08>
   28b50:	movw	r1, #10073	; 0x2759
   28b54:	sub	r0, fp, #72	; 0x48
   28b58:	mov	r2, #3
   28b5c:	movt	r1, #5
   28b60:	bl	127a4 <bcmp@plt>
   28b64:	cmp	r0, #0
   28b68:	beq	298c8 <__assert_fail@plt+0x16e18>
   28b6c:	movw	r1, #10083	; 0x2763
   28b70:	sub	r0, fp, #72	; 0x48
   28b74:	mov	r2, #3
   28b78:	movt	r1, #5
   28b7c:	bl	127a4 <bcmp@plt>
   28b80:	cmp	r0, #0
   28b84:	beq	298d8 <__assert_fail@plt+0x16e28>
   28b88:	movw	r1, #10090	; 0x276a
   28b8c:	sub	r0, fp, #72	; 0x48
   28b90:	mov	r2, #3
   28b94:	movt	r1, #5
   28b98:	bl	127a4 <bcmp@plt>
   28b9c:	cmp	r0, #0
   28ba0:	beq	298e8 <__assert_fail@plt+0x16e38>
   28ba4:	movw	r1, #10099	; 0x2773
   28ba8:	sub	r0, fp, #72	; 0x48
   28bac:	mov	r2, #3
   28bb0:	movt	r1, #5
   28bb4:	bl	127a4 <bcmp@plt>
   28bb8:	cmp	r0, #0
   28bbc:	beq	298f8 <__assert_fail@plt+0x16e48>
   28bc0:	movw	r1, #10104	; 0x2778
   28bc4:	sub	r0, fp, #72	; 0x48
   28bc8:	mov	r2, #3
   28bcc:	movt	r1, #5
   28bd0:	bl	127a4 <bcmp@plt>
   28bd4:	cmp	r0, #0
   28bd8:	beq	29908 <__assert_fail@plt+0x16e58>
   28bdc:	movw	r1, #10110	; 0x277e
   28be0:	sub	r0, fp, #72	; 0x48
   28be4:	mov	r2, #3
   28be8:	movt	r1, #5
   28bec:	bl	127a4 <bcmp@plt>
   28bf0:	cmp	r0, #0
   28bf4:	beq	29918 <__assert_fail@plt+0x16e68>
   28bf8:	movw	r1, #10117	; 0x2785
   28bfc:	sub	r0, fp, #72	; 0x48
   28c00:	mov	r2, #3
   28c04:	movt	r1, #5
   28c08:	bl	127a4 <bcmp@plt>
   28c0c:	cmp	r0, #0
   28c10:	beq	29714 <__assert_fail@plt+0x16c64>
   28c14:	sub	r4, fp, #72	; 0x48
   28c18:	mov	r0, r9
   28c1c:	mov	r1, r4
   28c20:	bl	2d4f8 <__assert_fail@plt+0x1aa48>
   28c24:	cmp	r0, #0
   28c28:	bne	29924 <__assert_fail@plt+0x16e74>
   28c2c:	movw	r1, #10323	; 0x2853
   28c30:	mov	r0, r4
   28c34:	mov	r2, #4
   28c38:	movt	r1, #5
   28c3c:	bl	127a4 <bcmp@plt>
   28c40:	cmp	r0, #0
   28c44:	movw	r0, #8552	; 0x2168
   28c48:	movt	r0, #5
   28c4c:	beq	29924 <__assert_fail@plt+0x16e74>
   28c50:	movw	r1, #10327	; 0x2857
   28c54:	mov	r0, r4
   28c58:	mov	r2, #5
   28c5c:	movt	r1, #5
   28c60:	bl	127a4 <bcmp@plt>
   28c64:	cmp	r0, #0
   28c68:	movw	r0, #8564	; 0x2174
   28c6c:	movt	r0, #5
   28c70:	beq	29924 <__assert_fail@plt+0x16e74>
   28c74:	movw	r1, #10332	; 0x285c
   28c78:	mov	r0, r4
   28c7c:	mov	r2, #6
   28c80:	movt	r1, #5
   28c84:	bl	127a4 <bcmp@plt>
   28c88:	movw	r1, #8564	; 0x2174
   28c8c:	cmp	r0, #0
   28c90:	movt	r1, #5
   28c94:	add	r1, r1, #12
   28c98:	str	r1, [sp, #236]	; 0xec
   28c9c:	beq	2bf6c <__assert_fail@plt+0x194bc>
   28ca0:	movw	r1, #10338	; 0x2862
   28ca4:	sub	r0, fp, #72	; 0x48
   28ca8:	mov	r2, #10
   28cac:	movt	r1, #5
   28cb0:	bl	127a4 <bcmp@plt>
   28cb4:	movw	r1, #8564	; 0x2174
   28cb8:	cmp	r0, #0
   28cbc:	movt	r1, #5
   28cc0:	add	r1, r1, #24
   28cc4:	str	r1, [sp, #232]	; 0xe8
   28cc8:	beq	2bf74 <__assert_fail@plt+0x194c4>
   28ccc:	movw	r1, #10348	; 0x286c
   28cd0:	sub	r0, fp, #72	; 0x48
   28cd4:	mov	r2, #5
   28cd8:	movt	r1, #5
   28cdc:	bl	127a4 <bcmp@plt>
   28ce0:	movw	r1, #8564	; 0x2174
   28ce4:	cmp	r0, #0
   28ce8:	movt	r1, #5
   28cec:	add	r1, r1, #36	; 0x24
   28cf0:	str	r1, [sp, #228]	; 0xe4
   28cf4:	beq	2bf7c <__assert_fail@plt+0x194cc>
   28cf8:	movw	r1, #10113	; 0x2781
   28cfc:	sub	r0, fp, #72	; 0x48
   28d00:	mov	r2, #4
   28d04:	movt	r1, #5
   28d08:	bl	127a4 <bcmp@plt>
   28d0c:	movw	r1, #8564	; 0x2174
   28d10:	cmp	r0, #0
   28d14:	movt	r1, #5
   28d18:	add	r1, r1, #48	; 0x30
   28d1c:	str	r1, [sp, #224]	; 0xe0
   28d20:	beq	2bf84 <__assert_fail@plt+0x194d4>
   28d24:	movw	r1, #10353	; 0x2871
   28d28:	sub	r0, fp, #72	; 0x48
   28d2c:	mov	r2, #5
   28d30:	movt	r1, #5
   28d34:	bl	127a4 <bcmp@plt>
   28d38:	movw	r1, #8564	; 0x2174
   28d3c:	cmp	r0, #0
   28d40:	movt	r1, #5
   28d44:	add	r1, r1, #60	; 0x3c
   28d48:	str	r1, [sp, #220]	; 0xdc
   28d4c:	beq	2bf8c <__assert_fail@plt+0x194dc>
   28d50:	movw	r1, #10358	; 0x2876
   28d54:	sub	r0, fp, #72	; 0x48
   28d58:	mov	r2, #7
   28d5c:	movt	r1, #5
   28d60:	bl	127a4 <bcmp@plt>
   28d64:	movw	r1, #8564	; 0x2174
   28d68:	cmp	r0, #0
   28d6c:	movt	r1, #5
   28d70:	add	r1, r1, #72	; 0x48
   28d74:	str	r1, [sp, #216]	; 0xd8
   28d78:	beq	2bf94 <__assert_fail@plt+0x194e4>
   28d7c:	movw	r1, #10365	; 0x287d
   28d80:	sub	r0, fp, #72	; 0x48
   28d84:	mov	r2, #4
   28d88:	movt	r1, #5
   28d8c:	bl	127a4 <bcmp@plt>
   28d90:	movw	r1, #8564	; 0x2174
   28d94:	cmp	r0, #0
   28d98:	movt	r1, #5
   28d9c:	add	r1, r1, #84	; 0x54
   28da0:	str	r1, [sp, #212]	; 0xd4
   28da4:	beq	2bf9c <__assert_fail@plt+0x194ec>
   28da8:	movw	r1, #10369	; 0x2881
   28dac:	sub	r0, fp, #72	; 0x48
   28db0:	mov	r2, #7
   28db4:	movt	r1, #5
   28db8:	bl	127a4 <bcmp@plt>
   28dbc:	movw	r1, #8564	; 0x2174
   28dc0:	cmp	r0, #0
   28dc4:	movt	r1, #5
   28dc8:	add	r1, r1, #96	; 0x60
   28dcc:	str	r1, [sp, #208]	; 0xd0
   28dd0:	beq	2bfa4 <__assert_fail@plt+0x194f4>
   28dd4:	movw	r1, #10376	; 0x2888
   28dd8:	sub	r0, fp, #72	; 0x48
   28ddc:	mov	r2, #4
   28de0:	movt	r1, #5
   28de4:	bl	127a4 <bcmp@plt>
   28de8:	movw	r1, #8564	; 0x2174
   28dec:	cmp	r0, #0
   28df0:	movt	r1, #5
   28df4:	add	r1, r1, #108	; 0x6c
   28df8:	str	r1, [sp, #204]	; 0xcc
   28dfc:	beq	2bfac <__assert_fail@plt+0x194fc>
   28e00:	sub	r1, r6, #1
   28e04:	sub	r0, fp, #72	; 0x48
   28e08:	ldrb	r0, [r0, r1]
   28e0c:	str	r1, [sp, #200]	; 0xc8
   28e10:	cmp	r0, #83	; 0x53
   28e14:	bne	28f78 <__assert_fail@plt+0x164c8>
   28e18:	ldr	r1, [sp, #200]	; 0xc8
   28e1c:	sub	r4, fp, #72	; 0x48
   28e20:	mov	r0, #0
   28e24:	mov	r2, #5
   28e28:	strb	r0, [r4, r1]
   28e2c:	movw	r1, #10327	; 0x2857
   28e30:	mov	r0, r4
   28e34:	movt	r1, #5
   28e38:	bl	127a4 <bcmp@plt>
   28e3c:	cmp	r0, #0
   28e40:	movw	r0, #8564	; 0x2174
   28e44:	movt	r0, #5
   28e48:	beq	29924 <__assert_fail@plt+0x16e74>
   28e4c:	movw	r1, #10332	; 0x285c
   28e50:	mov	r0, r4
   28e54:	mov	r2, #6
   28e58:	movt	r1, #5
   28e5c:	bl	127a4 <bcmp@plt>
   28e60:	cmp	r0, #0
   28e64:	ldr	r0, [sp, #236]	; 0xec
   28e68:	beq	29924 <__assert_fail@plt+0x16e74>
   28e6c:	movw	r1, #10338	; 0x2862
   28e70:	mov	r0, r4
   28e74:	mov	r2, #10
   28e78:	movt	r1, #5
   28e7c:	bl	127a4 <bcmp@plt>
   28e80:	cmp	r0, #0
   28e84:	ldr	r0, [sp, #232]	; 0xe8
   28e88:	beq	29924 <__assert_fail@plt+0x16e74>
   28e8c:	movw	r1, #10348	; 0x286c
   28e90:	mov	r0, r4
   28e94:	mov	r2, #5
   28e98:	movt	r1, #5
   28e9c:	bl	127a4 <bcmp@plt>
   28ea0:	cmp	r0, #0
   28ea4:	ldr	r0, [sp, #228]	; 0xe4
   28ea8:	beq	29924 <__assert_fail@plt+0x16e74>
   28eac:	movw	r1, #10113	; 0x2781
   28eb0:	mov	r0, r4
   28eb4:	mov	r2, #4
   28eb8:	movt	r1, #5
   28ebc:	bl	127a4 <bcmp@plt>
   28ec0:	cmp	r0, #0
   28ec4:	ldr	r0, [sp, #224]	; 0xe0
   28ec8:	beq	29924 <__assert_fail@plt+0x16e74>
   28ecc:	movw	r1, #10353	; 0x2871
   28ed0:	mov	r0, r4
   28ed4:	mov	r2, #5
   28ed8:	movt	r1, #5
   28edc:	bl	127a4 <bcmp@plt>
   28ee0:	cmp	r0, #0
   28ee4:	ldr	r0, [sp, #220]	; 0xdc
   28ee8:	beq	29924 <__assert_fail@plt+0x16e74>
   28eec:	movw	r1, #10358	; 0x2876
   28ef0:	mov	r0, r4
   28ef4:	mov	r2, #7
   28ef8:	movt	r1, #5
   28efc:	bl	127a4 <bcmp@plt>
   28f00:	cmp	r0, #0
   28f04:	ldr	r0, [sp, #216]	; 0xd8
   28f08:	beq	29924 <__assert_fail@plt+0x16e74>
   28f0c:	movw	r1, #10365	; 0x287d
   28f10:	mov	r0, r4
   28f14:	mov	r2, #4
   28f18:	movt	r1, #5
   28f1c:	bl	127a4 <bcmp@plt>
   28f20:	cmp	r0, #0
   28f24:	ldr	r0, [sp, #212]	; 0xd4
   28f28:	beq	29924 <__assert_fail@plt+0x16e74>
   28f2c:	movw	r1, #10369	; 0x2881
   28f30:	mov	r0, r4
   28f34:	mov	r2, #7
   28f38:	movt	r1, #5
   28f3c:	bl	127a4 <bcmp@plt>
   28f40:	cmp	r0, #0
   28f44:	ldr	r0, [sp, #208]	; 0xd0
   28f48:	beq	29924 <__assert_fail@plt+0x16e74>
   28f4c:	movw	r1, #10376	; 0x2888
   28f50:	mov	r0, r4
   28f54:	mov	r2, #4
   28f58:	movt	r1, #5
   28f5c:	bl	127a4 <bcmp@plt>
   28f60:	cmp	r0, #0
   28f64:	ldr	r0, [sp, #204]	; 0xcc
   28f68:	beq	29924 <__assert_fail@plt+0x16e74>
   28f6c:	ldr	r1, [sp, #200]	; 0xc8
   28f70:	mov	r0, #83	; 0x53
   28f74:	strb	r0, [r4, r1]
   28f78:	movw	r1, #10380	; 0x288c
   28f7c:	sub	r4, fp, #72	; 0x48
   28f80:	mov	r2, #9
   28f84:	movt	r1, #5
   28f88:	mov	r0, r4
   28f8c:	bl	127a4 <bcmp@plt>
   28f90:	cmp	r0, #0
   28f94:	movw	r0, #8696	; 0x21f8
   28f98:	movt	r0, #5
   28f9c:	beq	29924 <__assert_fail@plt+0x16e74>
   28fa0:	movw	r1, #10389	; 0x2895
   28fa4:	mov	r0, r4
   28fa8:	mov	r2, #10
   28fac:	movt	r1, #5
   28fb0:	bl	127a4 <bcmp@plt>
   28fb4:	cmp	r0, #0
   28fb8:	beq	2bfb4 <__assert_fail@plt+0x19504>
   28fbc:	movw	r1, #10399	; 0x289f
   28fc0:	sub	r0, fp, #72	; 0x48
   28fc4:	mov	r2, #6
   28fc8:	movt	r1, #5
   28fcc:	bl	127a4 <bcmp@plt>
   28fd0:	cmp	r0, #0
   28fd4:	beq	2bfc0 <__assert_fail@plt+0x19510>
   28fd8:	movw	r1, #10405	; 0x28a5
   28fdc:	sub	r0, fp, #72	; 0x48
   28fe0:	mov	r2, #4
   28fe4:	movt	r1, #5
   28fe8:	bl	127a4 <bcmp@plt>
   28fec:	cmp	r0, #0
   28ff0:	beq	2bfd0 <__assert_fail@plt+0x19520>
   28ff4:	movw	r1, #10409	; 0x28a9
   28ff8:	sub	r0, fp, #72	; 0x48
   28ffc:	mov	r2, #5
   29000:	movt	r1, #5
   29004:	bl	127a4 <bcmp@plt>
   29008:	cmp	r0, #0
   2900c:	beq	2bfe0 <__assert_fail@plt+0x19530>
   29010:	movw	r1, #10414	; 0x28ae
   29014:	sub	r0, fp, #72	; 0x48
   29018:	mov	r2, #5
   2901c:	movt	r1, #5
   29020:	bl	127a4 <bcmp@plt>
   29024:	cmp	r0, #0
   29028:	beq	2bff0 <__assert_fail@plt+0x19540>
   2902c:	movw	r1, #10419	; 0x28b3
   29030:	sub	r0, fp, #72	; 0x48
   29034:	mov	r2, #5
   29038:	movt	r1, #5
   2903c:	bl	127a4 <bcmp@plt>
   29040:	cmp	r0, #0
   29044:	beq	2c000 <__assert_fail@plt+0x19550>
   29048:	movw	r1, #10424	; 0x28b8
   2904c:	sub	r0, fp, #72	; 0x48
   29050:	mov	r2, #6
   29054:	movt	r1, #5
   29058:	bl	127a4 <bcmp@plt>
   2905c:	cmp	r0, #0
   29060:	beq	2c010 <__assert_fail@plt+0x19560>
   29064:	movw	r1, #10430	; 0x28be
   29068:	sub	r0, fp, #72	; 0x48
   2906c:	mov	r2, #6
   29070:	movt	r1, #5
   29074:	bl	127a4 <bcmp@plt>
   29078:	cmp	r0, #0
   2907c:	beq	2c020 <__assert_fail@plt+0x19570>
   29080:	movw	r1, #10436	; 0x28c4
   29084:	sub	r0, fp, #72	; 0x48
   29088:	mov	r2, #7
   2908c:	movt	r1, #5
   29090:	bl	127a4 <bcmp@plt>
   29094:	cmp	r0, #0
   29098:	beq	2c030 <__assert_fail@plt+0x19580>
   2909c:	movw	r1, #10443	; 0x28cb
   290a0:	sub	r0, fp, #72	; 0x48
   290a4:	mov	r2, #6
   290a8:	movt	r1, #5
   290ac:	bl	127a4 <bcmp@plt>
   290b0:	cmp	r0, #0
   290b4:	beq	2c040 <__assert_fail@plt+0x19590>
   290b8:	movw	r1, #10449	; 0x28d1
   290bc:	sub	r0, fp, #72	; 0x48
   290c0:	mov	r2, #6
   290c4:	movt	r1, #5
   290c8:	bl	127a4 <bcmp@plt>
   290cc:	cmp	r0, #0
   290d0:	beq	2c050 <__assert_fail@plt+0x195a0>
   290d4:	movw	r1, #10455	; 0x28d7
   290d8:	sub	r0, fp, #72	; 0x48
   290dc:	mov	r2, #8
   290e0:	movt	r1, #5
   290e4:	bl	127a4 <bcmp@plt>
   290e8:	cmp	r0, #0
   290ec:	beq	2c060 <__assert_fail@plt+0x195b0>
   290f0:	movw	r1, #10463	; 0x28df
   290f4:	sub	r0, fp, #72	; 0x48
   290f8:	mov	r2, #7
   290fc:	movt	r1, #5
   29100:	bl	127a4 <bcmp@plt>
   29104:	cmp	r0, #0
   29108:	beq	2c070 <__assert_fail@plt+0x195c0>
   2910c:	movw	r1, #10470	; 0x28e6
   29110:	sub	r0, fp, #72	; 0x48
   29114:	mov	r2, #6
   29118:	movt	r1, #5
   2911c:	bl	127a4 <bcmp@plt>
   29120:	cmp	r0, #0
   29124:	beq	2c080 <__assert_fail@plt+0x195d0>
   29128:	movw	r1, #10476	; 0x28ec
   2912c:	sub	r0, fp, #72	; 0x48
   29130:	mov	r2, #6
   29134:	movt	r1, #5
   29138:	bl	127a4 <bcmp@plt>
   2913c:	cmp	r0, #0
   29140:	beq	2c090 <__assert_fail@plt+0x195e0>
   29144:	movw	r1, #10482	; 0x28f2
   29148:	sub	r0, fp, #72	; 0x48
   2914c:	mov	r2, #9
   29150:	movt	r1, #5
   29154:	bl	127a4 <bcmp@plt>
   29158:	cmp	r0, #0
   2915c:	beq	2c0a0 <__assert_fail@plt+0x195f0>
   29160:	movw	r1, #10491	; 0x28fb
   29164:	sub	r0, fp, #72	; 0x48
   29168:	mov	r2, #8
   2916c:	movt	r1, #5
   29170:	bl	127a4 <bcmp@plt>
   29174:	cmp	r0, #0
   29178:	beq	2c0b0 <__assert_fail@plt+0x19600>
   2917c:	movw	r1, #10499	; 0x2903
   29180:	sub	r0, fp, #72	; 0x48
   29184:	mov	r2, #4
   29188:	movt	r1, #5
   2918c:	bl	127a4 <bcmp@plt>
   29190:	cmp	r0, #0
   29194:	beq	2c0c0 <__assert_fail@plt+0x19610>
   29198:	movw	r1, #10503	; 0x2907
   2919c:	sub	r0, fp, #72	; 0x48
   291a0:	mov	r2, #6
   291a4:	movt	r1, #5
   291a8:	bl	127a4 <bcmp@plt>
   291ac:	cmp	r0, #0
   291b0:	beq	2c0d0 <__assert_fail@plt+0x19620>
   291b4:	ldrb	r2, [fp, #-72]	; 0xffffffb8
   291b8:	cmp	r6, #1
   291bc:	bne	2c0e0 <__assert_fail@plt+0x19630>
   291c0:	cmp	r2, #90	; 0x5a
   291c4:	sub	r4, fp, #72	; 0x48
   291c8:	bhi	2c0ec <__assert_fail@plt+0x1963c>
   291cc:	movw	r0, #8948	; 0x22f4
   291d0:	add	r1, pc, #8
   291d4:	mov	r6, #63	; 0x3f
   291d8:	movt	r0, #5
   291dc:	ldr	pc, [r1, r2, lsl #2]
   291e0:	andeq	r9, r2, r4, asr #18
   291e4:	andeq	ip, r2, ip, ror #1
   291e8:	andeq	ip, r2, ip, ror #1
   291ec:	andeq	ip, r2, ip, ror #1
   291f0:	andeq	ip, r2, ip, ror #1
   291f4:	andeq	ip, r2, ip, ror #1
   291f8:	andeq	ip, r2, ip, ror #1
   291fc:	andeq	ip, r2, ip, ror #1
   29200:	andeq	ip, r2, ip, ror #1
   29204:	andeq	ip, r2, ip, ror #1
   29208:	andeq	ip, r2, ip, ror #1
   2920c:	andeq	ip, r2, ip, ror #1
   29210:	andeq	ip, r2, ip, ror #1
   29214:	andeq	ip, r2, ip, ror #1
   29218:	andeq	ip, r2, ip, ror #1
   2921c:	andeq	ip, r2, ip, ror #1
   29220:	andeq	ip, r2, ip, ror #1
   29224:	andeq	ip, r2, ip, ror #1
   29228:	andeq	ip, r2, ip, ror #1
   2922c:	andeq	ip, r2, ip, ror #1
   29230:	andeq	ip, r2, ip, ror #1
   29234:	andeq	ip, r2, ip, ror #1
   29238:	andeq	ip, r2, ip, ror #1
   2923c:	andeq	ip, r2, ip, ror #1
   29240:	andeq	ip, r2, ip, ror #1
   29244:	andeq	ip, r2, ip, ror #1
   29248:	andeq	ip, r2, ip, ror #1
   2924c:	andeq	ip, r2, ip, ror #1
   29250:	andeq	ip, r2, ip, ror #1
   29254:	andeq	ip, r2, ip, ror #1
   29258:	andeq	ip, r2, ip, ror #1
   2925c:	andeq	ip, r2, ip, ror #1
   29260:	andeq	ip, r2, ip, ror #1
   29264:	andeq	ip, r2, ip, ror #1
   29268:	andeq	ip, r2, ip, ror #1
   2926c:	andeq	ip, r2, ip, ror #1
   29270:	andeq	ip, r2, ip, ror #1
   29274:	andeq	ip, r2, ip, ror #1
   29278:	andeq	ip, r2, ip, ror #1
   2927c:	andeq	ip, r2, ip, ror #1
   29280:	andeq	ip, r2, ip, ror #1
   29284:	andeq	ip, r2, ip, ror #1
   29288:	andeq	ip, r2, ip, ror #1
   2928c:	andeq	ip, r2, ip, ror #1
   29290:	andeq	ip, r2, ip, ror #1
   29294:	andeq	ip, r2, ip, ror #1
   29298:	andeq	ip, r2, ip, ror #1
   2929c:	andeq	ip, r2, ip, ror #1
   292a0:	andeq	ip, r2, ip, ror #1
   292a4:	andeq	ip, r2, ip, ror #1
   292a8:	andeq	ip, r2, ip, ror #1
   292ac:	andeq	ip, r2, ip, ror #1
   292b0:	andeq	ip, r2, ip, ror #1
   292b4:	andeq	ip, r2, ip, ror #1
   292b8:	andeq	ip, r2, ip, ror #1
   292bc:	andeq	ip, r2, ip, ror #1
   292c0:	andeq	ip, r2, ip, ror #1
   292c4:	andeq	ip, r2, ip, ror #1
   292c8:	andeq	ip, r2, ip, ror #1
   292cc:	andeq	ip, r2, ip, ror #1
   292d0:	andeq	ip, r2, ip, ror #1
   292d4:	andeq	ip, r2, ip, ror #1
   292d8:	andeq	ip, r2, ip, ror #1
   292dc:	andeq	ip, r2, ip, ror #1
   292e0:	andeq	ip, r2, ip, ror #1
   292e4:	andeq	r9, r2, r4, lsr #18
   292e8:	andeq	r9, r2, ip, asr #6
   292ec:	andeq	ip, r2, r4, ror r1
   292f0:	andeq	ip, r2, r4, lsl #3
   292f4:	muleq	r2, r4, r1
   292f8:	andeq	ip, r2, r4, lsr #3
   292fc:			; <UNDEFINED> instruction: 0x0002c1b4
   29300:	andeq	ip, r2, r4, asr #3
   29304:	ldrdeq	ip, [r2], -r4
   29308:	andeq	ip, r2, ip, ror #1
   2930c:	andeq	ip, r2, r4, ror #3
   29310:	strdeq	ip, [r2], -r4
   29314:	andeq	ip, r2, r4, lsl #4
   29318:	andeq	ip, r2, r4, lsl r2
   2931c:	andeq	ip, r2, r4, lsr #4
   29320:	andeq	ip, r2, r4, lsr r2
   29324:	andeq	ip, r2, r4, asr #4
   29328:	andeq	ip, r2, r4, asr r2
   2932c:	andeq	ip, r2, r4, ror #4
   29330:	andeq	ip, r2, r4, ror r2
   29334:	andeq	ip, r2, r4, lsl #5
   29338:	muleq	r2, r4, r2
   2933c:	andeq	ip, r2, r4, lsr #5
   29340:			; <UNDEFINED> instruction: 0x0002c2b4
   29344:	andeq	ip, r2, r0, asr #5
   29348:	andeq	ip, r2, ip, asr #5
   2934c:	movw	r0, #8948	; 0x22f4
   29350:	movt	r0, #5
   29354:	b	2942c <__assert_fail@plt+0x1697c>
   29358:	mov	r6, #1
   2935c:	mov	r5, r2
   29360:	mov	r0, #0
   29364:	cmn	r0, #1
   29368:	ble	29380 <__assert_fail@plt+0x168d0>
   2936c:	movw	r1, #52428	; 0xcccc
   29370:	movt	r1, #3276	; 0xccc
   29374:	cmp	r0, r1
   29378:	ble	29394 <__assert_fail@plt+0x168e4>
   2937c:	b	29414 <__assert_fail@plt+0x16964>
   29380:	beq	29394 <__assert_fail@plt+0x168e4>
   29384:	mov	r1, #-2147483648	; 0x80000000
   29388:	sdiv	r1, r1, r0
   2938c:	cmp	r1, #10
   29390:	blt	29414 <__assert_fail@plt+0x16964>
   29394:	add	r1, r0, r0, lsl #2
   29398:	lsl	r0, r1, #1
   2939c:	uxtab	r0, r0, r3
   293a0:	sub	r0, r0, #48	; 0x30
   293a4:	cmp	r0, r1, lsl #1
   293a8:	bvs	29414 <__assert_fail@plt+0x16964>
   293ac:	ldrb	r3, [r5, #1]!
   293b0:	sub	r1, r3, #48	; 0x30
   293b4:	cmp	r1, #10
   293b8:	bcc	29364 <__assert_fail@plt+0x168b4>
   293bc:	str	r6, [sp, #236]	; 0xec
   293c0:	sub	r6, r5, #1
   293c4:	mov	r1, #0
   293c8:	str	r1, [sp, #232]	; 0xe8
   293cc:	orr	r1, r3, #2
   293d0:	cmp	r1, #46	; 0x2e
   293d4:	beq	2868c <__assert_fail@plt+0x15bdc>
   293d8:	ldr	r3, [sp, #236]	; 0xec
   293dc:	movw	r1, #274	; 0x112
   293e0:	str	r5, [r9]
   293e4:	str	r0, [sp, #120]	; 0x78
   293e8:	cmp	r3, #0
   293ec:	movweq	r1, #275	; 0x113
   293f0:	str	r1, [sp, #176]	; 0xb0
   293f4:	sub	r1, r5, r2
   293f8:	str	r1, [sp, #128]	; 0x80
   293fc:	asr	r1, r0, #31
   29400:	str	r1, [sp, #124]	; 0x7c
   29404:	lsr	r1, r3, #31
   29408:	ldr	r3, [sp, #172]	; 0xac
   2940c:	str	r1, [sp, #152]	; 0x98
   29410:	b	29974 <__assert_fail@plt+0x16ec4>
   29414:	ldr	r3, [sp, #172]	; 0xac
   29418:	mov	r0, #63	; 0x3f
   2941c:	str	r0, [sp, #176]	; 0xb0
   29420:	b	29974 <__assert_fail@plt+0x16ec4>
   29424:	movw	r0, #8192	; 0x2000
   29428:	movt	r0, #5
   2942c:	add	r0, r0, #12
   29430:	b	29924 <__assert_fail@plt+0x16e74>
   29434:	ldr	ip, [sp, #168]	; 0xa8
   29438:	ldr	r7, [sp, #184]	; 0xb8
   2943c:	movw	lr, #7224	; 0x1c38
   29440:	sub	r4, fp, #112	; 0x70
   29444:	movt	lr, #5
   29448:	b	29728 <__assert_fail@plt+0x16c78>
   2944c:	movw	r0, #8192	; 0x2000
   29450:	movt	r0, #5
   29454:	add	r0, r0, #24
   29458:	b	29924 <__assert_fail@plt+0x16e74>
   2945c:	movw	r0, #8192	; 0x2000
   29460:	movt	r0, #5
   29464:	add	r0, r0, #36	; 0x24
   29468:	b	29924 <__assert_fail@plt+0x16e74>
   2946c:	movw	r1, #9955	; 0x26e3
   29470:	mov	r0, r4
   29474:	mov	r2, #8
   29478:	movt	r1, #5
   2947c:	bl	127a4 <bcmp@plt>
   29480:	cmp	r0, #0
   29484:	movw	r0, #8252	; 0x203c
   29488:	movt	r0, #5
   2948c:	beq	29924 <__assert_fail@plt+0x16e74>
   29490:	movw	r1, #9963	; 0x26eb
   29494:	mov	r0, r4
   29498:	mov	r2, #9
   2949c:	movt	r1, #5
   294a0:	bl	127a4 <bcmp@plt>
   294a4:	cmp	r0, #0
   294a8:	beq	297bc <__assert_fail@plt+0x16d0c>
   294ac:	movw	r1, #9972	; 0x26f4
   294b0:	mov	r0, r4
   294b4:	mov	r2, #6
   294b8:	movt	r1, #5
   294bc:	bl	127a4 <bcmp@plt>
   294c0:	cmp	r0, #0
   294c4:	beq	297c8 <__assert_fail@plt+0x16d18>
   294c8:	movw	r1, #9978	; 0x26fa
   294cc:	mov	r0, r4
   294d0:	mov	r2, #6
   294d4:	movt	r1, #5
   294d8:	bl	127a4 <bcmp@plt>
   294dc:	cmp	r0, #0
   294e0:	beq	297e8 <__assert_fail@plt+0x16d38>
   294e4:	movw	r1, #9984	; 0x2700
   294e8:	mov	r0, r4
   294ec:	mov	r2, #4
   294f0:	movt	r1, #5
   294f4:	bl	127a4 <bcmp@plt>
   294f8:	cmp	r0, #0
   294fc:	beq	297f8 <__assert_fail@plt+0x16d48>
   29500:	movw	r1, #9988	; 0x2704
   29504:	mov	r0, r4
   29508:	mov	r2, #5
   2950c:	movt	r1, #5
   29510:	bl	127a4 <bcmp@plt>
   29514:	cmp	r0, #0
   29518:	beq	29808 <__assert_fail@plt+0x16d58>
   2951c:	movw	r1, #9993	; 0x2709
   29520:	mov	r0, r4
   29524:	mov	r2, #5
   29528:	movt	r1, #5
   2952c:	bl	127a4 <bcmp@plt>
   29530:	cmp	r0, #0
   29534:	beq	29818 <__assert_fail@plt+0x16d68>
   29538:	movw	r1, #9998	; 0x270e
   2953c:	mov	r0, r4
   29540:	mov	r2, #7
   29544:	movt	r1, #5
   29548:	bl	127a4 <bcmp@plt>
   2954c:	cmp	r0, #0
   29550:	beq	29828 <__assert_fail@plt+0x16d78>
   29554:	movw	r1, #10005	; 0x2715
   29558:	mov	r0, r4
   2955c:	mov	r2, #10
   29560:	movt	r1, #5
   29564:	bl	127a4 <bcmp@plt>
   29568:	cmp	r0, #0
   2956c:	beq	29838 <__assert_fail@plt+0x16d88>
   29570:	movw	r1, #10015	; 0x271f
   29574:	mov	r0, r4
   29578:	mov	r2, #5
   2957c:	movt	r1, #5
   29580:	bl	127a4 <bcmp@plt>
   29584:	cmp	r0, #0
   29588:	beq	29848 <__assert_fail@plt+0x16d98>
   2958c:	movw	r1, #10020	; 0x2724
   29590:	mov	r0, r4
   29594:	mov	r2, #8
   29598:	movt	r1, #5
   2959c:	bl	127a4 <bcmp@plt>
   295a0:	cmp	r0, #0
   295a4:	beq	29858 <__assert_fail@plt+0x16da8>
   295a8:	movw	r1, #10028	; 0x272c
   295ac:	mov	r0, r4
   295b0:	mov	r2, #9
   295b4:	movt	r1, #5
   295b8:	bl	127a4 <bcmp@plt>
   295bc:	cmp	r0, #0
   295c0:	beq	29868 <__assert_fail@plt+0x16db8>
   295c4:	movw	r1, #10037	; 0x2735
   295c8:	mov	r0, r4
   295cc:	mov	r2, #9
   295d0:	movt	r1, #5
   295d4:	bl	127a4 <bcmp@plt>
   295d8:	cmp	r0, #0
   295dc:	beq	29878 <__assert_fail@plt+0x16dc8>
   295e0:	movw	r1, #10046	; 0x273e
   295e4:	mov	r0, r4
   295e8:	mov	r2, #7
   295ec:	movt	r1, #5
   295f0:	bl	127a4 <bcmp@plt>
   295f4:	cmp	r0, #0
   295f8:	beq	29888 <__assert_fail@plt+0x16dd8>
   295fc:	movw	r1, #10053	; 0x2745
   29600:	sub	r0, fp, #72	; 0x48
   29604:	mov	r2, #7
   29608:	movt	r1, #5
   2960c:	bl	127a4 <bcmp@plt>
   29610:	cmp	r0, #0
   29614:	beq	29898 <__assert_fail@plt+0x16de8>
   29618:	movw	r1, #10060	; 0x274c
   2961c:	sub	r0, fp, #72	; 0x48
   29620:	mov	r2, #8
   29624:	movt	r1, #5
   29628:	bl	127a4 <bcmp@plt>
   2962c:	cmp	r0, #0
   29630:	beq	298a8 <__assert_fail@plt+0x16df8>
   29634:	movw	r1, #10068	; 0x2754
   29638:	sub	r0, fp, #72	; 0x48
   2963c:	mov	r2, #5
   29640:	movt	r1, #5
   29644:	bl	127a4 <bcmp@plt>
   29648:	cmp	r0, #0
   2964c:	beq	298b8 <__assert_fail@plt+0x16e08>
   29650:	movw	r1, #10073	; 0x2759
   29654:	sub	r0, fp, #72	; 0x48
   29658:	mov	r2, #10
   2965c:	movt	r1, #5
   29660:	bl	127a4 <bcmp@plt>
   29664:	cmp	r0, #0
   29668:	beq	298c8 <__assert_fail@plt+0x16e18>
   2966c:	movw	r1, #10083	; 0x2763
   29670:	sub	r0, fp, #72	; 0x48
   29674:	mov	r2, #7
   29678:	movt	r1, #5
   2967c:	bl	127a4 <bcmp@plt>
   29680:	cmp	r0, #0
   29684:	beq	298d8 <__assert_fail@plt+0x16e28>
   29688:	movw	r1, #10090	; 0x276a
   2968c:	sub	r0, fp, #72	; 0x48
   29690:	mov	r2, #9
   29694:	movt	r1, #5
   29698:	bl	127a4 <bcmp@plt>
   2969c:	cmp	r0, #0
   296a0:	beq	298e8 <__assert_fail@plt+0x16e38>
   296a4:	movw	r1, #10099	; 0x2773
   296a8:	sub	r0, fp, #72	; 0x48
   296ac:	mov	r2, #5
   296b0:	movt	r1, #5
   296b4:	bl	127a4 <bcmp@plt>
   296b8:	cmp	r0, #0
   296bc:	beq	298f8 <__assert_fail@plt+0x16e48>
   296c0:	movw	r1, #10104	; 0x2778
   296c4:	sub	r0, fp, #72	; 0x48
   296c8:	mov	r2, #6
   296cc:	movt	r1, #5
   296d0:	bl	127a4 <bcmp@plt>
   296d4:	cmp	r0, #0
   296d8:	beq	29908 <__assert_fail@plt+0x16e58>
   296dc:	movw	r1, #10110	; 0x277e
   296e0:	sub	r0, fp, #72	; 0x48
   296e4:	mov	r2, #7
   296e8:	movt	r1, #5
   296ec:	bl	127a4 <bcmp@plt>
   296f0:	cmp	r0, #0
   296f4:	beq	29918 <__assert_fail@plt+0x16e68>
   296f8:	movw	r1, #10117	; 0x2785
   296fc:	sub	r0, fp, #72	; 0x48
   29700:	mov	r2, #9
   29704:	movt	r1, #5
   29708:	bl	127a4 <bcmp@plt>
   2970c:	cmp	r0, #0
   29710:	bne	28c14 <__assert_fail@plt+0x16164>
   29714:	movw	r0, #8252	; 0x203c
   29718:	movt	r0, #5
   2971c:	add	r0, r0, #276	; 0x114
   29720:	b	29924 <__assert_fail@plt+0x16e74>
   29724:	add	r3, r3, #1
   29728:	sub	r1, r2, #1
   2972c:	ldrb	r2, [r1, #1]!
   29730:	sub	r2, r2, #48	; 0x30
   29734:	cmp	r2, #10
   29738:	bcc	2972c <__assert_fail@plt+0x16c7c>
   2973c:	clz	r6, r3
   29740:	eor	r2, r5, #1
   29744:	lsr	r6, r6, #5
   29748:	orrs	r2, r2, r6
   2974c:	bne	29770 <__assert_fail@plt+0x16cc0>
   29750:	mov	r5, #63	; 0x3f
   29754:	sub	r2, r0, #1
   29758:	str	r5, [sp, #176]	; 0xb0
   2975c:	ldr	r5, [sp, #236]	; 0xec
   29760:	cmp	r2, r0
   29764:	bvc	2977c <__assert_fail@plt+0x16ccc>
   29768:	ldr	r3, [sp, #172]	; 0xac
   2976c:	b	29974 <__assert_fail@plt+0x16ec4>
   29770:	ldr	r5, [sp, #236]	; 0xec
   29774:	str	r3, [sp, #144]	; 0x90
   29778:	b	29790 <__assert_fail@plt+0x16ce0>
   2977c:	movw	r0, #51712	; 0xca00
   29780:	movt	r0, #15258	; 0x3b9a
   29784:	sub	r0, r0, r3
   29788:	str	r0, [sp, #144]	; 0x90
   2978c:	mov	r0, r2
   29790:	ldr	r3, [sp, #172]	; 0xac
   29794:	cmp	r5, #0
   29798:	str	r1, [r9]
   2979c:	mov	r1, #276	; 0x114
   297a0:	str	r0, [sp, #152]	; 0x98
   297a4:	movweq	r1, #277	; 0x115
   297a8:	str	r1, [sp, #176]	; 0xb0
   297ac:	mov	r1, r0
   297b0:	lsr	r0, r0, #8
   297b4:	str	r0, [sp, #140]	; 0x8c
   297b8:	b	29974 <__assert_fail@plt+0x16ec4>
   297bc:	movw	r0, #8252	; 0x203c
   297c0:	movt	r0, #5
   297c4:	b	2942c <__assert_fail@plt+0x1697c>
   297c8:	movw	r0, #8252	; 0x203c
   297cc:	movt	r0, #5
   297d0:	add	r0, r0, #24
   297d4:	b	29924 <__assert_fail@plt+0x16e74>
   297d8:	add	r0, r5, #1
   297dc:	str	r0, [r9]
   297e0:	ldrb	r6, [r5]
   297e4:	b	29954 <__assert_fail@plt+0x16ea4>
   297e8:	movw	r0, #8252	; 0x203c
   297ec:	movt	r0, #5
   297f0:	add	r0, r0, #36	; 0x24
   297f4:	b	29924 <__assert_fail@plt+0x16e74>
   297f8:	movw	r0, #8252	; 0x203c
   297fc:	movt	r0, #5
   29800:	add	r0, r0, #48	; 0x30
   29804:	b	29924 <__assert_fail@plt+0x16e74>
   29808:	movw	r0, #8252	; 0x203c
   2980c:	movt	r0, #5
   29810:	add	r0, r0, #60	; 0x3c
   29814:	b	29924 <__assert_fail@plt+0x16e74>
   29818:	movw	r0, #8252	; 0x203c
   2981c:	movt	r0, #5
   29820:	add	r0, r0, #72	; 0x48
   29824:	b	29924 <__assert_fail@plt+0x16e74>
   29828:	movw	r0, #8252	; 0x203c
   2982c:	movt	r0, #5
   29830:	add	r0, r0, #84	; 0x54
   29834:	b	29924 <__assert_fail@plt+0x16e74>
   29838:	movw	r0, #8252	; 0x203c
   2983c:	movt	r0, #5
   29840:	add	r0, r0, #96	; 0x60
   29844:	b	29924 <__assert_fail@plt+0x16e74>
   29848:	movw	r0, #8252	; 0x203c
   2984c:	movt	r0, #5
   29850:	add	r0, r0, #108	; 0x6c
   29854:	b	29924 <__assert_fail@plt+0x16e74>
   29858:	movw	r0, #8252	; 0x203c
   2985c:	movt	r0, #5
   29860:	add	r0, r0, #120	; 0x78
   29864:	b	29924 <__assert_fail@plt+0x16e74>
   29868:	movw	r0, #8252	; 0x203c
   2986c:	movt	r0, #5
   29870:	add	r0, r0, #132	; 0x84
   29874:	b	29924 <__assert_fail@plt+0x16e74>
   29878:	movw	r0, #8252	; 0x203c
   2987c:	movt	r0, #5
   29880:	add	r0, r0, #144	; 0x90
   29884:	b	29924 <__assert_fail@plt+0x16e74>
   29888:	movw	r0, #8252	; 0x203c
   2988c:	movt	r0, #5
   29890:	add	r0, r0, #156	; 0x9c
   29894:	b	29924 <__assert_fail@plt+0x16e74>
   29898:	movw	r0, #8252	; 0x203c
   2989c:	movt	r0, #5
   298a0:	add	r0, r0, #168	; 0xa8
   298a4:	b	29924 <__assert_fail@plt+0x16e74>
   298a8:	movw	r0, #8252	; 0x203c
   298ac:	movt	r0, #5
   298b0:	add	r0, r0, #180	; 0xb4
   298b4:	b	29924 <__assert_fail@plt+0x16e74>
   298b8:	movw	r0, #8252	; 0x203c
   298bc:	movt	r0, #5
   298c0:	add	r0, r0, #192	; 0xc0
   298c4:	b	29924 <__assert_fail@plt+0x16e74>
   298c8:	movw	r0, #8252	; 0x203c
   298cc:	movt	r0, #5
   298d0:	add	r0, r0, #204	; 0xcc
   298d4:	b	29924 <__assert_fail@plt+0x16e74>
   298d8:	movw	r0, #8252	; 0x203c
   298dc:	movt	r0, #5
   298e0:	add	r0, r0, #216	; 0xd8
   298e4:	b	29924 <__assert_fail@plt+0x16e74>
   298e8:	movw	r0, #8252	; 0x203c
   298ec:	movt	r0, #5
   298f0:	add	r0, r0, #228	; 0xe4
   298f4:	b	29924 <__assert_fail@plt+0x16e74>
   298f8:	movw	r0, #8252	; 0x203c
   298fc:	movt	r0, #5
   29900:	add	r0, r0, #240	; 0xf0
   29904:	b	29924 <__assert_fail@plt+0x16e74>
   29908:	movw	r0, #8252	; 0x203c
   2990c:	movt	r0, #5
   29910:	add	r0, r0, #252	; 0xfc
   29914:	b	29924 <__assert_fail@plt+0x16e74>
   29918:	movw	r0, #8252	; 0x203c
   2991c:	movt	r0, #5
   29920:	add	r0, r0, #264	; 0x108
   29924:	ldr	r1, [r0, #8]
   29928:	ldr	r6, [r0, #4]
   2992c:	asr	r0, r1, #31
   29930:	str	r1, [sp, #152]	; 0x98
   29934:	str	r0, [sp, #144]	; 0x90
   29938:	mov	r0, r1
   2993c:	lsr	r0, r1, #8
   29940:	str	r0, [sp, #140]	; 0x8c
   29944:	ldr	ip, [sp, #168]	; 0xa8
   29948:	movw	lr, #7224	; 0x1c38
   2994c:	mov	r4, r5
   29950:	movt	lr, #5
   29954:	ldr	r3, [sp, #172]	; 0xac
   29958:	cmp	r6, #1
   2995c:	blt	29994 <__assert_fail@plt+0x16ee4>
   29960:	lsr	r1, r6, #1
   29964:	mov	r0, #2
   29968:	str	r6, [sp, #176]	; 0xb0
   2996c:	cmp	r1, #138	; 0x8a
   29970:	bhi	29984 <__assert_fail@plt+0x16ed4>
   29974:	ldr	r1, [sp, #176]	; 0xb0
   29978:	movw	r0, #7338	; 0x1caa
   2997c:	movt	r0, #5
   29980:	ldrb	r0, [r0, r1]
   29984:	add	r1, r0, sl
   29988:	cmp	r1, #112	; 0x70
   2998c:	bhi	299e4 <__assert_fail@plt+0x16f34>
   29990:	b	299ac <__assert_fail@plt+0x16efc>
   29994:	mov	r1, #0
   29998:	mov	r0, #0
   2999c:	str	r1, [sp, #176]	; 0xb0
   299a0:	add	r1, r0, sl
   299a4:	cmp	r1, #112	; 0x70
   299a8:	bhi	299e4 <__assert_fail@plt+0x16f34>
   299ac:	movw	r2, #7616	; 0x1dc0
   299b0:	movt	r2, #5
   299b4:	add	r2, r2, r1
   299b8:	ldrsb	r2, [r2]
   299bc:	cmp	r0, r2
   299c0:	bne	299e4 <__assert_fail@plt+0x16f34>
   299c4:	movw	r0, #7729	; 0x1e31
   299c8:	movt	r0, #5
   299cc:	ldrb	r8, [r0, r1]
   299d0:	orr	r0, r1, #4
   299d4:	cmp	r0, #111	; 0x6f
   299d8:	bne	29f10 <__assert_fail@plt+0x17460>
   299dc:	rsb	r2, r8, #0
   299e0:	b	299f8 <__assert_fail@plt+0x16f48>
   299e4:	movw	r0, #7842	; 0x1ea2
   299e8:	movt	r0, #5
   299ec:	ldrb	r2, [r0, r8]
   299f0:	cmp	r2, #0
   299f4:	beq	2c2dc <__assert_fail@plt+0x1982c>
   299f8:	movw	r0, #7956	; 0x1f14
   299fc:	mov	r1, r3
   29a00:	movt	r0, #5
   29a04:	ldrb	r4, [r0, r2]
   29a08:	rsb	r0, r4, #1
   29a0c:	rsb	r0, r0, r0, lsl #3
   29a10:	ldr	r0, [r1, r0, lsl #3]!
   29a14:	ldr	r5, [r1, #52]	; 0x34
   29a18:	str	r0, [sp, #236]	; 0xec
   29a1c:	ldr	r0, [r1, #44]	; 0x2c
   29a20:	str	r5, [sp, #180]	; 0xb4
   29a24:	str	r0, [sp, #192]	; 0xc0
   29a28:	ldr	r0, [r1, #40]	; 0x28
   29a2c:	str	r0, [sp, #200]	; 0xc8
   29a30:	ldr	r0, [r1, #36]	; 0x24
   29a34:	str	r0, [sp, #196]	; 0xc4
   29a38:	ldr	r0, [r1, #4]
   29a3c:	str	r0, [sp, #232]	; 0xe8
   29a40:	ldr	r0, [r1, #8]
   29a44:	str	r0, [sp, #228]	; 0xe4
   29a48:	ldr	r0, [r1, #12]
   29a4c:	str	r0, [sp, #220]	; 0xdc
   29a50:	ldr	r0, [r1, #16]
   29a54:	str	r0, [sp, #224]	; 0xe0
   29a58:	ldr	r0, [r1, #20]
   29a5c:	str	r0, [sp, #216]	; 0xd8
   29a60:	ldr	r0, [r1, #24]
   29a64:	str	r0, [sp, #212]	; 0xd4
   29a68:	ldr	r0, [r1, #28]
   29a6c:	str	r0, [sp, #208]	; 0xd0
   29a70:	ldr	r0, [r1, #32]
   29a74:	ldr	r1, [r1, #48]	; 0x30
   29a78:	str	r0, [sp, #204]	; 0xcc
   29a7c:	sub	r0, r2, #4
   29a80:	str	r1, [sp, #188]	; 0xbc
   29a84:	cmp	r0, #87	; 0x57
   29a88:	bhi	2be48 <__assert_fail@plt+0x19398>
   29a8c:	add	r1, pc, #20
   29a90:	add	r7, r3, #8
   29a94:	add	sl, r3, #16
   29a98:	add	r5, r3, #24
   29a9c:	add	r8, r3, #32
   29aa0:	add	r6, r3, #40	; 0x28
   29aa4:	ldr	pc, [r1, r0, lsl #2]
   29aa8:	andeq	sl, r2, ip, ror fp
   29aac:	andeq	fp, r2, r8, asr #28
   29ab0:	andeq	fp, r2, r8, asr #28
   29ab4:	andeq	sl, r2, r4, lsr #23
   29ab8:	muleq	r2, r0, sl
   29abc:	andeq	sl, r2, r8, ror #25
   29ac0:	andeq	sl, r2, r0, lsl sp
   29ac4:	andeq	sl, r2, ip, lsl #22
   29ac8:	andeq	sl, r2, r8, asr #23
   29acc:	andeq	sl, r2, r0, ror #23
   29ad0:	andeq	sl, r2, r4, ror sp
   29ad4:	andeq	sl, r2, r8, ror #26
   29ad8:	andeq	fp, r2, r8, asr #28
   29adc:	andeq	fp, r2, r8, asr #28
   29ae0:	andeq	sl, r2, r4, asr #12
   29ae4:	andeq	sl, r2, r4, lsr #22
   29ae8:	andeq	sl, r2, ip, lsr sl
   29aec:	andeq	fp, r2, r8, asr #28
   29af0:	andeq	sl, r2, r8, lsl #11
   29af4:	andeq	sl, r2, ip, ror #23
   29af8:	muleq	r2, r0, ip
   29afc:	andeq	fp, r2, r8, asr #28
   29b00:	andeq	fp, r2, r8, asr #28
   29b04:	andeq	sl, r2, r8, ror #27
   29b08:			; <UNDEFINED> instruction: 0x0002adb0
   29b0c:	andeq	sl, r2, r0, ror #10
   29b10:	andeq	sl, r2, r4, lsl #21
   29b14:	andeq	sl, r2, r0, lsr #31
   29b18:	andeq	sl, r2, r8, ror r5
   29b1c:	andeq	sl, r2, r8, ror #13
   29b20:			; <UNDEFINED> instruction: 0x0002a5bc
   29b24:	andeq	sl, r2, ip, ror #22
   29b28:			; <UNDEFINED> instruction: 0x0002a5b4
   29b2c:	strdeq	fp, [r2], -r0
   29b30:	ldrdeq	fp, [r2], -r4
   29b34:	andeq	sl, r2, r0, ror #13
   29b38:	andeq	sl, r2, r8, lsr #21
   29b3c:	andeq	sl, r2, r0, ror #25
   29b40:	ldrdeq	sl, [r2], -r8
   29b44:	andeq	fp, r2, r0, asr r1
   29b48:	andeq	sl, r2, r0, ror r6
   29b4c:			; <UNDEFINED> instruction: 0x0002adbc
   29b50:	andeq	fp, r2, ip, lsl #2
   29b54:	andeq	sl, r2, r0, lsr r5
   29b58:	andeq	sl, r2, r8, lsr #26
   29b5c:	andeq	fp, r2, r8, asr #28
   29b60:	andeq	sl, r2, r0, asr #9
   29b64:	andeq	sl, r2, ip, lsl #3
   29b68:	andeq	r9, r2, r8, lsl #24
   29b6c:	andeq	r9, r2, r8, lsl #24
   29b70:	andeq	sl, r2, r8, lsr pc
   29b74:	ldrdeq	r9, [r2], -r4
   29b78:	andeq	sl, r2, ip, lsr #24
   29b7c:	andeq	sl, r2, r8, asr #26
   29b80:	andeq	r9, r2, r4, ror #31
   29b84:	andeq	sl, r2, ip, ror r1
   29b88:	andeq	sl, r2, ip, asr r1
   29b8c:	andeq	r9, r2, r0, ror pc
   29b90:	andeq	r9, r2, ip, ror #31
   29b94:	andeq	sl, r2, ip, ror lr
   29b98:	strdeq	r9, [r2], -ip
   29b9c:			; <UNDEFINED> instruction: 0x0002afb0
   29ba0:	strdeq	fp, [r2], -r8
   29ba4:	ldrdeq	r9, [r2], -ip
   29ba8:	andeq	sl, r2, ip, lsr #29
   29bac:	andeq	sl, r2, r8, ror #29
   29bb0:	andeq	sl, r2, r4
   29bb4:	andeq	sl, r2, ip
   29bb8:	andeq	sl, r2, ip
   29bbc:	andeq	fp, r2, ip, lsr #3
   29bc0:	andeq	fp, r2, r8, asr #28
   29bc4:	ldrdeq	r9, [r2], -r4
   29bc8:	andeq	r9, r2, r4, ror #31
   29bcc:	andeq	r9, r2, r0, ror pc
   29bd0:	strdeq	r9, [r2], -ip
   29bd4:	ldrdeq	r9, [r2], -ip
   29bd8:	andeq	sl, r2, r4
   29bdc:	andeq	r9, r2, ip, ror #31
   29be0:	andeq	fp, r2, r8, asr #28
   29be4:	andeq	fp, r2, r8, asr #28
   29be8:	andeq	fp, r2, r8, asr #28
   29bec:			; <UNDEFINED> instruction: 0x00029fb8
   29bf0:	andeq	fp, r2, r8, asr #28
   29bf4:			; <UNDEFINED> instruction: 0x00029fb8
   29bf8:	ldrdeq	sl, [r2], -ip
   29bfc:	andeq	sl, r2, r4, rrx
   29c00:	andeq	sl, r2, r0, asr r5
   29c04:	andeq	sl, r2, r0, lsl #26
   29c08:	ldr	r0, [r3, #4]
   29c0c:	ldr	r1, [r3]
   29c10:	str	r4, [sp, #164]	; 0xa4
   29c14:	str	r3, [sp, #172]	; 0xac
   29c18:	str	r2, [sp, #148]	; 0x94
   29c1c:	ldr	r3, [r6, #8]
   29c20:	ldr	r4, [r6]
   29c24:	str	r0, [sp, #68]	; 0x44
   29c28:	ldm	r7, {r0, lr}
   29c2c:	str	r1, [sp, #20]
   29c30:	ldr	r1, [r5, #4]
   29c34:	str	lr, [sp, #56]	; 0x38
   29c38:	ldr	r5, [r5]
   29c3c:	str	r0, [sp, #52]	; 0x34
   29c40:	ldm	sl, {r0, ip}
   29c44:	str	ip, [sp, #44]	; 0x2c
   29c48:	ldr	sl, [r6, #4]
   29c4c:	str	r1, [sp, #32]
   29c50:	str	r0, [sp, #48]	; 0x30
   29c54:	ldm	r8, {r0, r7}
   29c58:	str	r7, [sp, #28]
   29c5c:	ldr	r2, [r9, #144]	; 0x90
   29c60:	str	r2, [sp, #64]	; 0x40
   29c64:	add	r2, r2, r3
   29c68:	str	r2, [sp, #60]	; 0x3c
   29c6c:	str	r2, [r9, #144]	; 0x90
   29c70:	ldr	r2, [sp, #96]	; 0x60
   29c74:	ldr	r6, [r2]
   29c78:	ldr	r3, [r2, #4]
   29c7c:	adds	r6, r6, r4
   29c80:	adc	r8, r3, sl
   29c84:	stm	r2, {r6, r8}
   29c88:	ldr	r4, [sp, #100]	; 0x64
   29c8c:	ldr	r6, [r4]
   29c90:	ldr	r2, [r4, #4]
   29c94:	adds	r0, r6, r0
   29c98:	adc	r6, r2, r7
   29c9c:	stm	r4, {r0, r6}
   29ca0:	ldr	r0, [sp, #104]	; 0x68
   29ca4:	ldr	r7, [r0]
   29ca8:	ldr	r4, [r0, #4]
   29cac:	adds	r5, r7, r5
   29cb0:	str	r4, [sp, #24]
   29cb4:	adc	r7, r4, r1
   29cb8:	stm	r0, {r5, r7}
   29cbc:	ldr	r0, [sp, #108]	; 0x6c
   29cc0:	ldr	r1, [sp, #48]	; 0x30
   29cc4:	ldrd	r4, [r0]
   29cc8:	adds	r4, r4, r1
   29ccc:	adc	r1, r5, ip
   29cd0:	str	r1, [sp, #36]	; 0x24
   29cd4:	str	r4, [r0]
   29cd8:	str	r1, [r0, #4]
   29cdc:	ldr	ip, [sp, #112]	; 0x70
   29ce0:	ldr	r1, [sp, #52]	; 0x34
   29ce4:	ldr	r4, [ip]
   29ce8:	ldr	r0, [ip, #4]
   29cec:	adds	r4, r4, r1
   29cf0:	str	r0, [sp, #40]	; 0x28
   29cf4:	adc	r1, r0, lr
   29cf8:	str	r1, [sp, #48]	; 0x30
   29cfc:	str	r4, [ip]
   29d00:	str	r1, [ip, #4]
   29d04:	ldr	lr, [sp, #116]	; 0x74
   29d08:	ldr	r0, [sp, #20]
   29d0c:	ldr	r4, [lr]
   29d10:	ldr	r1, [lr, #4]
   29d14:	adds	r4, r4, r0
   29d18:	ldr	r0, [sp, #68]	; 0x44
   29d1c:	str	r1, [sp, #52]	; 0x34
   29d20:	adc	ip, r1, r0
   29d24:	cmn	r3, #1
   29d28:	mov	r0, #0
   29d2c:	mov	r1, #0
   29d30:	stm	lr, {r4, ip}
   29d34:	mov	r3, #0
   29d38:	mov	lr, #0
   29d3c:	mov	r4, #0
   29d40:	movwgt	r0, #1
   29d44:	cmn	r8, #1
   29d48:	mov	r8, #0
   29d4c:	movwgt	r1, #1
   29d50:	str	r0, [sp, #20]
   29d54:	subs	r0, r0, r1
   29d58:	mov	r1, #0
   29d5c:	movwne	r0, #1
   29d60:	cmn	sl, #1
   29d64:	str	r0, [sp, #16]
   29d68:	mov	r0, #0
   29d6c:	movwgt	r0, #1
   29d70:	cmn	r2, #1
   29d74:	mov	r2, #0
   29d78:	str	r0, [sp, #12]
   29d7c:	mov	r0, #0
   29d80:	movwgt	r0, #1
   29d84:	cmn	r6, #1
   29d88:	mov	r6, #0
   29d8c:	movwgt	r1, #1
   29d90:	str	r0, [sp, #8]
   29d94:	subs	r0, r0, r1
   29d98:	ldr	r1, [sp, #36]	; 0x24
   29d9c:	movwne	r0, #1
   29da0:	str	r0, [sp, #4]
   29da4:	ldr	r0, [sp, #28]
   29da8:	cmn	r0, #1
   29dac:	mov	r0, #0
   29db0:	movwgt	r0, #1
   29db4:	str	r0, [sp, #28]
   29db8:	ldr	r0, [sp, #24]
   29dbc:	cmn	r0, #1
   29dc0:	mov	r0, #0
   29dc4:	movwgt	r8, #1
   29dc8:	cmn	r7, #1
   29dcc:	movwgt	r0, #1
   29dd0:	subs	r0, r8, r0
   29dd4:	movwne	r0, #1
   29dd8:	str	r0, [sp, #24]
   29ddc:	ldr	r0, [sp, #32]
   29de0:	cmn	r0, #1
   29de4:	mov	r0, #0
   29de8:	movwgt	r0, #1
   29dec:	cmn	r5, #1
   29df0:	mov	r5, #0
   29df4:	movwgt	r3, #1
   29df8:	cmn	r1, #1
   29dfc:	mov	r1, #0
   29e00:	movwgt	r1, #1
   29e04:	subs	r1, r3, r1
   29e08:	movwne	r1, #1
   29e0c:	str	r1, [sp, #36]	; 0x24
   29e10:	ldr	r1, [sp, #44]	; 0x2c
   29e14:	cmn	r1, #1
   29e18:	ldr	r1, [sp, #40]	; 0x28
   29e1c:	movwgt	lr, #1
   29e20:	cmn	r1, #1
   29e24:	ldr	r1, [sp, #48]	; 0x30
   29e28:	movwgt	r5, #1
   29e2c:	cmn	r1, #1
   29e30:	ldr	r1, [sp, #56]	; 0x38
   29e34:	movwgt	r2, #1
   29e38:	subs	r7, r5, r2
   29e3c:	mov	r2, #0
   29e40:	movwne	r7, #1
   29e44:	cmn	r1, #1
   29e48:	ldr	r1, [sp, #52]	; 0x34
   29e4c:	movwgt	r2, #1
   29e50:	cmn	r1, #1
   29e54:	mov	r1, #0
   29e58:	movwgt	r6, #1
   29e5c:	cmn	ip, #1
   29e60:	ldr	ip, [sp, #60]	; 0x3c
   29e64:	movwgt	r4, #1
   29e68:	subs	sl, r6, r4
   29e6c:	ldr	r4, [sp, #68]	; 0x44
   29e70:	movwne	sl, #1
   29e74:	cmn	r4, #1
   29e78:	ldr	r4, [sp, #64]	; 0x40
   29e7c:	movwgt	r1, #1
   29e80:	str	r1, [sp, #68]	; 0x44
   29e84:	cmp	ip, r4
   29e88:	bvs	2c2dc <__assert_fail@plt+0x1982c>
   29e8c:	ldr	r4, [sp, #20]
   29e90:	ldr	r1, [sp, #12]
   29e94:	sub	r4, r4, r1
   29e98:	ldr	r1, [sp, #16]
   29e9c:	clz	r4, r4
   29ea0:	lsr	r4, r4, #5
   29ea4:	ands	r4, r4, r1
   29ea8:	ldreq	r1, [sp, #8]
   29eac:	ldreq	r4, [sp, #28]
   29eb0:	subeq	r4, r1, r4
   29eb4:	ldreq	r1, [sp, #4]
   29eb8:	clzeq	r4, r4
   29ebc:	lsreq	r4, r4, #5
   29ec0:	andseq	r4, r4, r1
   29ec4:	bne	2c2dc <__assert_fail@plt+0x1982c>
   29ec8:	ldr	r1, [sp, #24]
   29ecc:	sub	r0, r8, r0
   29ed0:	ldr	r4, [sp, #164]	; 0xa4
   29ed4:	clz	r0, r0
   29ed8:	lsr	r0, r0, #5
   29edc:	ands	r0, r0, r1
   29ee0:	ldreq	r1, [sp, #36]	; 0x24
   29ee4:	subeq	r0, r3, lr
   29ee8:	clzeq	r0, r0
   29eec:	lsreq	r0, r0, #5
   29ef0:	andseq	r0, r0, r1
   29ef4:	bne	2c2dc <__assert_fail@plt+0x1982c>
   29ef8:	sub	r0, r5, r2
   29efc:	clz	r0, r0
   29f00:	lsr	r0, r0, #5
   29f04:	ands	r0, r0, r7
   29f08:	beq	2ba84 <__assert_fail@plt+0x18fd4>
   29f0c:	b	2c2dc <__assert_fail@plt+0x1982c>
   29f10:	ldr	r2, [sp, #152]	; 0x98
   29f14:	ldr	r5, [sp, #140]	; 0x8c
   29f18:	add	r0, r3, #56	; 0x38
   29f1c:	add	r1, r3, #64	; 0x40
   29f20:	uxtb	r2, r2
   29f24:	orr	r2, r2, r5, lsl #8
   29f28:	ldr	r5, [sp, #144]	; 0x90
   29f2c:	stm	r0, {r2, r5}
   29f30:	ldr	r5, [sp, #120]	; 0x78
   29f34:	ldr	r2, [sp, #124]	; 0x7c
   29f38:	str	r5, [r1]
   29f3c:	str	r2, [r1, #4]
   29f40:	add	r1, r3, #76	; 0x4c
   29f44:	vst1.32	{d8-d9}, [r1]
   29f48:	ldr	r1, [sp, #128]	; 0x80
   29f4c:	str	r1, [r3, #72]	; 0x48
   29f50:	add	r1, r3, #92	; 0x5c
   29f54:	vst1.32	{d8-d9}, [r1]
   29f58:	mov	r1, #0
   29f5c:	str	r1, [r3, #108]	; 0x6c
   29f60:	mvn	r1, #1
   29f64:	mov	r3, r0
   29f68:	str	r1, [sp, #176]	; 0xb0
   29f6c:	b	28370 <__assert_fail@plt+0x158c0>
   29f70:	ldrd	r6, [r3]
   29f74:	cmn	r7, #1
   29f78:	ble	2b238 <__assert_fail@plt+0x18788>
   29f7c:	ldr	r8, [r3, #-48]	; 0xffffffd0
   29f80:	ldr	r5, [r3, #-44]	; 0xffffffd4
   29f84:	orrs	r0, r6, r7
   29f88:	beq	2bddc <__assert_fail@plt+0x1932c>
   29f8c:	cmn	r5, #1
   29f90:	ble	2b33c <__assert_fail@plt+0x1888c>
   29f94:	mov	sl, r2
   29f98:	str	r4, [sp, #164]	; 0xa4
   29f9c:	mov	r4, r3
   29fa0:	mvn	r0, #0
   29fa4:	mvn	r1, #-2147483648	; 0x80000000
   29fa8:	mov	r2, r6
   29fac:	mov	r3, r7
   29fb0:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   29fb4:	b	2b274 <__assert_fail@plt+0x187c4>
   29fb8:	ldr	r5, [r7]
   29fbc:	ldr	r1, [r7, #4]
   29fc0:	adds	r0, r5, #-2147483648	; 0x80000000
   29fc4:	adcs	r0, r1, #0
   29fc8:	bne	2c2dc <__assert_fail@plt+0x1982c>
   29fcc:	str	r5, [sp, #236]	; 0xec
   29fd0:	b	2be40 <__assert_fail@plt+0x19390>
   29fd4:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   29fd8:	b	2af3c <__assert_fail@plt+0x1848c>
   29fdc:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   29fe0:	b	2b1fc <__assert_fail@plt+0x1874c>
   29fe4:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   29fe8:	b	2ad4c <__assert_fail@plt+0x1829c>
   29fec:	ldrd	r0, [r3]
   29ff0:	str	r1, [sp, #216]	; 0xd8
   29ff4:	str	r0, [sp, #224]	; 0xe0
   29ff8:	b	2bdf0 <__assert_fail@plt+0x19340>
   29ffc:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   2a000:	b	2ae80 <__assert_fail@plt+0x183d0>
   2a004:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   2a008:	b	2aeec <__assert_fail@plt+0x1843c>
   2a00c:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   2a010:	str	r0, [sp, #200]	; 0xc8
   2a014:	asr	r0, r0, #31
   2a018:	str	r1, [sp, #188]	; 0xbc
   2a01c:	str	r0, [sp, #192]	; 0xc0
   2a020:	mov	r0, #0
   2a024:	str	r0, [sp, #228]	; 0xe4
   2a028:	mov	r0, #0
   2a02c:	str	r0, [sp, #220]	; 0xdc
   2a030:	mov	r0, #0
   2a034:	str	r0, [sp, #224]	; 0xe0
   2a038:	mov	r0, #0
   2a03c:	str	r0, [sp, #216]	; 0xd8
   2a040:	mov	r0, #0
   2a044:	str	r0, [sp, #212]	; 0xd4
   2a048:	mov	r0, #0
   2a04c:	str	r0, [sp, #208]	; 0xd0
   2a050:	mov	r0, #0
   2a054:	str	r0, [sp, #204]	; 0xcc
   2a058:	mov	r0, #0
   2a05c:	str	r0, [sp, #196]	; 0xc4
   2a060:	b	2be38 <__assert_fail@plt+0x19388>
   2a064:	sub	r1, r3, #56	; 0x38
   2a068:	ldr	r0, [r9, #156]	; 0x9c
   2a06c:	ldr	lr, [r3, #-40]	; 0xffffffd8
   2a070:	str	r3, [sp, #172]	; 0xac
   2a074:	str	r2, [sp, #148]	; 0x94
   2a078:	str	r4, [sp, #164]	; 0xa4
   2a07c:	vld1.64	{d16-d17}, [r1]
   2a080:	cmp	r0, #0
   2a084:	beq	2a0bc <__assert_fail@plt+0x1760c>
   2a088:	ldr	r1, [sp, #84]	; 0x54
   2a08c:	ldr	r1, [r1]
   2a090:	cmp	r1, #0
   2a094:	bne	2a0bc <__assert_fail@plt+0x1760c>
   2a098:	ldrb	r1, [r9, #153]	; 0x99
   2a09c:	cmp	r1, #0
   2a0a0:	bne	2a0bc <__assert_fail@plt+0x1760c>
   2a0a4:	ldr	ip, [r3, #-36]	; 0xffffffdc
   2a0a8:	cmp	lr, #2
   2a0ac:	bgt	2bf30 <__assert_fail@plt+0x19480>
   2a0b0:	ldr	r2, [r9, #172]	; 0xac
   2a0b4:	cmp	r2, #0
   2a0b8:	bne	2bf30 <__assert_fail@plt+0x19480>
   2a0bc:	cmp	lr, #5
   2a0c0:	blt	2b2d0 <__assert_fail@plt+0x18820>
   2a0c4:	vmov.32	r4, d17[0]
   2a0c8:	vmov.32	r1, d17[1]
   2a0cc:	add	r0, r0, #1
   2a0d0:	mov	r2, #100	; 0x64
   2a0d4:	mov	r3, #0
   2a0d8:	str	lr, [sp, #64]	; 0x40
   2a0dc:	str	r0, [r9, #156]	; 0x9c
   2a0e0:	mov	r0, r4
   2a0e4:	str	r1, [sp, #68]	; 0x44
   2a0e8:	str	r4, [sp, #60]	; 0x3c
   2a0ec:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2a0f0:	mov	ip, #100	; 0x64
   2a0f4:	umull	r2, r3, r0, ip
   2a0f8:	mla	r3, r1, ip, r3
   2a0fc:	subs	r2, r4, r2
   2a100:	ldr	r4, [sp, #68]	; 0x44
   2a104:	sbc	r3, r4, r3
   2a108:	ldr	r4, [sp, #156]	; 0x9c
   2a10c:	strd	r2, [r4]
   2a110:	mov	r2, #100	; 0x64
   2a114:	mov	r3, #0
   2a118:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2a11c:	mov	r0, r2
   2a120:	ldr	r2, [sp, #160]	; 0xa0
   2a124:	mov	r1, r3
   2a128:	mov	r3, #0
   2a12c:	strd	r0, [r2]
   2a130:	movw	r2, #10000	; 0x2710
   2a134:	ldr	r0, [sp, #60]	; 0x3c
   2a138:	ldr	r1, [sp, #68]	; 0x44
   2a13c:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2a140:	ldr	r2, [sp, #80]	; 0x50
   2a144:	ldr	r3, [sp, #172]	; 0xac
   2a148:	strd	r0, [r2]
   2a14c:	ldr	r0, [sp, #64]	; 0x40
   2a150:	sub	r0, r0, #4
   2a154:	str	r0, [r9, #48]	; 0x30
   2a158:	b	2b784 <__assert_fail@plt+0x18cd4>
   2a15c:	ldrd	r6, [r3]
   2a160:	cmn	r7, #1
   2a164:	ble	2b390 <__assert_fail@plt+0x188e0>
   2a168:	ldr	r8, [r3, #-56]	; 0xffffffc8
   2a16c:	ldr	r5, [r3, #-52]	; 0xffffffcc
   2a170:	orrs	r0, r6, r7
   2a174:	bne	29f8c <__assert_fail@plt+0x174dc>
   2a178:	b	2bddc <__assert_fail@plt+0x1932c>
   2a17c:	mov	r0, #0
   2a180:	str	r0, [sp, #220]	; 0xdc
   2a184:	mov	r0, #1
   2a188:	b	2ad50 <__assert_fail@plt+0x182a0>
   2a18c:	mov	r0, r3
   2a190:	str	r2, [sp, #148]	; 0x94
   2a194:	str	r4, [sp, #164]	; 0xa4
   2a198:	ldr	r7, [r3, #-12]
   2a19c:	ldr	r1, [r3, #-16]
   2a1a0:	ldr	r6, [r3, #-20]	; 0xffffffec
   2a1a4:	ldr	r3, [r3, #-24]	; 0xffffffe8
   2a1a8:	ldr	r2, [r0, #-56]	; 0xffffffc8
   2a1ac:	ldr	r5, [r0]
   2a1b0:	ldr	lr, [r0, #-40]	; 0xffffffd8
   2a1b4:	ldr	ip, [r0, #-32]	; 0xffffffe0
   2a1b8:	ldr	sl, [r0, #-28]	; 0xffffffe4
   2a1bc:	ldr	r4, [r0, #-8]
   2a1c0:	str	r0, [sp, #172]	; 0xac
   2a1c4:	str	r2, [sp, #52]	; 0x34
   2a1c8:	ldr	r2, [r0, #-52]	; 0xffffffcc
   2a1cc:	cmn	r5, #1
   2a1d0:	str	r2, [sp, #60]	; 0x3c
   2a1d4:	ldr	r2, [r0, #-48]	; 0xffffffd0
   2a1d8:	str	r2, [sp, #48]	; 0x30
   2a1dc:	ldr	r2, [r0, #-44]	; 0xffffffd4
   2a1e0:	str	r2, [sp, #68]	; 0x44
   2a1e4:	ldr	r2, [r0, #-36]	; 0xffffffdc
   2a1e8:	str	r2, [sp, #64]	; 0x40
   2a1ec:	ldr	r2, [r9, #144]	; 0x90
   2a1f0:	str	r2, [sp, #56]	; 0x38
   2a1f4:	ble	2b3e8 <__assert_fail@plt+0x18938>
   2a1f8:	add	r0, r2, r4
   2a1fc:	str	r0, [sp, #44]	; 0x2c
   2a200:	str	r0, [r9, #144]	; 0x90
   2a204:	ldr	r0, [sp, #96]	; 0x60
   2a208:	ldrd	r4, [r0]
   2a20c:	adds	r4, r4, r1
   2a210:	adc	r1, r5, r7
   2a214:	str	r4, [r0]
   2a218:	str	r1, [r0, #4]
   2a21c:	ldr	r0, [sp, #100]	; 0x64
   2a220:	ldr	r4, [r0]
   2a224:	ldr	r2, [r0, #4]
   2a228:	adds	r4, r4, r3
   2a22c:	adc	r3, r2, r6
   2a230:	str	r4, [r0]
   2a234:	str	r3, [r0, #4]
   2a238:	str	r6, [sp, #24]
   2a23c:	str	r7, [sp, #20]
   2a240:	ldr	r0, [sp, #104]	; 0x68
   2a244:	ldr	r8, [r0]
   2a248:	ldr	r4, [r0, #4]
   2a24c:	str	sl, [sp, #32]
   2a250:	adds	r8, r8, ip
   2a254:	adc	r7, r4, sl
   2a258:	str	r8, [r0]
   2a25c:	str	r7, [r0, #4]
   2a260:	ldr	ip, [sp, #108]	; 0x6c
   2a264:	ldr	r6, [sp, #64]	; 0x40
   2a268:	ldr	r8, [ip]
   2a26c:	ldr	r0, [ip, #4]
   2a270:	adds	r8, r8, lr
   2a274:	str	r0, [sp, #28]
   2a278:	adc	sl, r0, r6
   2a27c:	stm	ip, {r8, sl}
   2a280:	ldr	ip, [sp, #112]	; 0x70
   2a284:	ldr	r0, [sp, #48]	; 0x30
   2a288:	ldr	r8, [ip]
   2a28c:	ldr	r6, [ip, #4]
   2a290:	adds	r8, r8, r0
   2a294:	ldr	r0, [sp, #68]	; 0x44
   2a298:	str	r6, [sp, #36]	; 0x24
   2a29c:	adc	r0, r6, r0
   2a2a0:	str	r0, [sp, #40]	; 0x28
   2a2a4:	str	r8, [ip]
   2a2a8:	str	r0, [ip, #4]
   2a2ac:	ldr	lr, [sp, #116]	; 0x74
   2a2b0:	ldr	r6, [sp, #52]	; 0x34
   2a2b4:	ldr	ip, [sp, #60]	; 0x3c
   2a2b8:	ldr	r8, [lr]
   2a2bc:	ldr	r0, [lr, #4]
   2a2c0:	adds	r8, r8, r6
   2a2c4:	str	r0, [sp, #48]	; 0x30
   2a2c8:	adc	r6, r0, ip
   2a2cc:	cmn	r5, #1
   2a2d0:	mov	r0, #0
   2a2d4:	str	r8, [lr]
   2a2d8:	mov	r5, #0
   2a2dc:	mov	r8, #0
   2a2e0:	movwgt	r0, #1
   2a2e4:	cmn	r1, #1
   2a2e8:	mov	r1, #0
   2a2ec:	str	r6, [lr, #4]
   2a2f0:	mov	lr, #0
   2a2f4:	movwgt	r1, #1
   2a2f8:	str	r0, [sp, #52]	; 0x34
   2a2fc:	subs	r0, r0, r1
   2a300:	mov	r1, #0
   2a304:	movwne	r0, #1
   2a308:	str	r0, [sp, #16]
   2a30c:	ldr	r0, [sp, #20]
   2a310:	cmn	r0, #1
   2a314:	mov	r0, #0
   2a318:	movwgt	r0, #1
   2a31c:	cmn	r2, #1
   2a320:	ldr	r2, [sp, #40]	; 0x28
   2a324:	movwgt	r1, #1
   2a328:	cmn	r3, #1
   2a32c:	str	r0, [sp, #20]
   2a330:	mov	r0, #0
   2a334:	mov	r3, #0
   2a338:	movwgt	r0, #1
   2a33c:	str	r1, [sp, #12]
   2a340:	subs	r0, r1, r0
   2a344:	ldr	r1, [sp, #28]
   2a348:	movwne	r0, #1
   2a34c:	str	r0, [sp, #8]
   2a350:	ldr	r0, [sp, #24]
   2a354:	cmn	r0, #1
   2a358:	mov	r0, #0
   2a35c:	movwgt	r0, #1
   2a360:	cmn	r4, #1
   2a364:	mov	r4, #0
   2a368:	movwgt	r5, #1
   2a36c:	cmn	r7, #1
   2a370:	str	r0, [sp, #24]
   2a374:	mov	r0, #0
   2a378:	movwgt	r0, #1
   2a37c:	subs	r0, r5, r0
   2a380:	movwne	r0, #1
   2a384:	str	r0, [sp, #4]
   2a388:	ldr	r0, [sp, #32]
   2a38c:	cmn	r0, #1
   2a390:	mov	r0, #0
   2a394:	movwgt	r0, #1
   2a398:	cmn	r1, #1
   2a39c:	mov	r1, #0
   2a3a0:	movwgt	lr, #1
   2a3a4:	cmn	sl, #1
   2a3a8:	movwgt	r1, #1
   2a3ac:	subs	r1, lr, r1
   2a3b0:	movwne	r1, #1
   2a3b4:	str	r1, [sp, #32]
   2a3b8:	ldr	r1, [sp, #64]	; 0x40
   2a3bc:	cmn	r1, #1
   2a3c0:	ldr	r1, [sp, #36]	; 0x24
   2a3c4:	movwgt	r8, #1
   2a3c8:	cmn	r1, #1
   2a3cc:	mov	r1, #0
   2a3d0:	movwgt	r1, #1
   2a3d4:	cmn	r2, #1
   2a3d8:	mov	r2, #0
   2a3dc:	movwgt	r2, #1
   2a3e0:	subs	r7, r1, r2
   2a3e4:	ldr	r2, [sp, #68]	; 0x44
   2a3e8:	movwne	r7, #1
   2a3ec:	cmn	r2, #1
   2a3f0:	ldr	r2, [sp, #48]	; 0x30
   2a3f4:	movwgt	r3, #1
   2a3f8:	cmn	r2, #1
   2a3fc:	mov	r2, #0
   2a400:	movwgt	r2, #1
   2a404:	cmn	r6, #1
   2a408:	mov	r6, #0
   2a40c:	movwgt	r4, #1
   2a410:	subs	sl, r2, r4
   2a414:	ldr	r4, [sp, #44]	; 0x2c
   2a418:	movwne	sl, #1
   2a41c:	cmn	ip, #1
   2a420:	ldr	ip, [sp, #56]	; 0x38
   2a424:	movwgt	r6, #1
   2a428:	str	r6, [sp, #68]	; 0x44
   2a42c:	cmp	r4, ip
   2a430:	bvs	2c2dc <__assert_fail@plt+0x1982c>
   2a434:	ldr	r4, [sp, #52]	; 0x34
   2a438:	ldr	r6, [sp, #20]
   2a43c:	sub	r4, r4, r6
   2a440:	ldr	r6, [sp, #16]
   2a444:	clz	r4, r4
   2a448:	lsr	r4, r4, #5
   2a44c:	ands	r4, r4, r6
   2a450:	ldreq	r6, [sp, #12]
   2a454:	ldreq	r4, [sp, #24]
   2a458:	subeq	r4, r6, r4
   2a45c:	ldreq	r6, [sp, #8]
   2a460:	clzeq	r4, r4
   2a464:	lsreq	r4, r4, #5
   2a468:	andseq	r4, r4, r6
   2a46c:	bne	2c2dc <__assert_fail@plt+0x1982c>
   2a470:	ldr	r6, [sp, #4]
   2a474:	sub	r0, r5, r0
   2a478:	ldr	r4, [sp, #164]	; 0xa4
   2a47c:	clz	r0, r0
   2a480:	lsr	r0, r0, #5
   2a484:	ands	r0, r0, r6
   2a488:	bne	2c2dc <__assert_fail@plt+0x1982c>
   2a48c:	ldr	r6, [sp, #32]
   2a490:	sub	r0, lr, r8
   2a494:	clz	r0, r0
   2a498:	lsr	r0, r0, #5
   2a49c:	ands	r0, r0, r6
   2a4a0:	subeq	r0, r1, r3
   2a4a4:	clzeq	r0, r0
   2a4a8:	lsreq	r0, r0, #5
   2a4ac:	andseq	r0, r0, r7
   2a4b0:	bne	2c2dc <__assert_fail@plt+0x1982c>
   2a4b4:	ldr	r0, [sp, #68]	; 0x44
   2a4b8:	sub	r0, r2, r0
   2a4bc:	b	2ba8c <__assert_fail@plt+0x18fdc>
   2a4c0:	sub	r0, r3, #112	; 0x70
   2a4c4:	vldr	d18, [r3, #-96]	; 0xffffffa0
   2a4c8:	mov	r5, r2
   2a4cc:	ldr	r2, [sp, #160]	; 0xa0
   2a4d0:	mov	r8, r4
   2a4d4:	mov	r4, r3
   2a4d8:	mov	r6, #1
   2a4dc:	vld1.64	{d16-d17}, [r0]
   2a4e0:	ldr	r0, [sp, #92]	; 0x5c
   2a4e4:	vst1.64	{d16-d17}, [r0]!
   2a4e8:	vstr	d18, [r0]
   2a4ec:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   2a4f0:	rsbs	r0, r0, #0
   2a4f4:	rsc	r3, r1, #0
   2a4f8:	stm	r2, {r0, r3}
   2a4fc:	ands	r0, r1, r3
   2a500:	bmi	2c2f0 <__assert_fail@plt+0x19840>
   2a504:	ldrd	r0, [r7]
   2a508:	ldr	r2, [sp, #156]	; 0x9c
   2a50c:	rsbs	r0, r0, #0
   2a510:	rsc	r3, r1, #0
   2a514:	stm	r2, {r0, r3}
   2a518:	mov	r2, r5
   2a51c:	ands	r0, r1, r3
   2a520:	mov	r3, r4
   2a524:	mov	r4, r8
   2a528:	bpl	2be48 <__assert_fail@plt+0x19398>
   2a52c:	b	2c2f0 <__assert_fail@plt+0x19840>
   2a530:	mov	r5, r4
   2a534:	mov	r4, r2
   2a538:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   2a53c:	ldr	r2, [sp, #156]	; 0x9c
   2a540:	strd	r0, [r2]
   2a544:	ldrd	r0, [r3]
   2a548:	ldr	r2, [sp, #160]	; 0xa0
   2a54c:	b	2add8 <__assert_fail@plt+0x18328>
   2a550:	mvn	r0, #0
   2a554:	str	r0, [sp, #236]	; 0xec
   2a558:	mvn	r0, #0
   2a55c:	b	2be44 <__assert_fail@plt+0x19394>
   2a560:	mov	r0, #1
   2a564:	str	r0, [r9, #20]
   2a568:	ldr	r0, [r9, #168]	; 0xa8
   2a56c:	add	r0, r0, #1
   2a570:	str	r0, [r9, #168]	; 0xa8
   2a574:	b	2be48 <__assert_fail@plt+0x19398>
   2a578:	ldr	r0, [r3, #-56]	; 0xffffffc8
   2a57c:	str	r4, [sp, #164]	; 0xa4
   2a580:	str	r2, [sp, #148]	; 0x94
   2a584:	b	2a6f8 <__assert_fail@plt+0x17c48>
   2a588:	mov	r5, r4
   2a58c:	mov	r4, r2
   2a590:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   2a594:	ldr	r2, [sp, #136]	; 0x88
   2a598:	vmov.i32	q8, #0	; 0x00000000
   2a59c:	strd	r0, [r2]
   2a5a0:	mov	r2, r4
   2a5a4:	mov	r4, r5
   2a5a8:	ldr	r0, [sp, #132]	; 0x84
   2a5ac:	vst1.64	{d16-d17}, [r0]
   2a5b0:	b	2acd4 <__assert_fail@plt+0x18224>
   2a5b4:	ldr	r0, [r3, #-56]	; 0xffffffc8
   2a5b8:	b	2ab70 <__assert_fail@plt+0x180c0>
   2a5bc:	ldr	r1, [r3, #-40]	; 0xffffffd8
   2a5c0:	ldr	r5, [r3, #4]
   2a5c4:	ldr	r0, [r3, #-48]	; 0xffffffd0
   2a5c8:	ldr	r7, [r3, #-44]	; 0xffffffd4
   2a5cc:	str	r2, [sp, #148]	; 0x94
   2a5d0:	mov	r2, #0
   2a5d4:	mov	r8, #100	; 0x64
   2a5d8:	str	r3, [sp, #172]	; 0xac
   2a5dc:	cmp	r1, #3
   2a5e0:	mov	r1, #0
   2a5e4:	movwlt	r1, #1
   2a5e8:	cmp	r5, #0
   2a5ec:	movwmi	r2, #1
   2a5f0:	ands	r1, r2, r1
   2a5f4:	umull	r6, r1, r0, r8
   2a5f8:	moveq	r6, r0
   2a5fc:	mlane	r7, r7, r8, r1
   2a600:	cmn	r5, #1
   2a604:	ble	2b6a4 <__assert_fail@plt+0x18bf4>
   2a608:	ldr	r0, [r3, #-56]	; 0xffffffc8
   2a60c:	ldr	r8, [r3]
   2a610:	cmn	r7, #1
   2a614:	str	r4, [sp, #164]	; 0xa4
   2a618:	str	r0, [sp, #68]	; 0x44
   2a61c:	ble	2bb24 <__assert_fail@plt+0x19074>
   2a620:	movw	r1, #8738	; 0x2222
   2a624:	movw	r0, #8738	; 0x2222
   2a628:	mov	sl, #1
   2a62c:	movt	r1, #8738	; 0x2222
   2a630:	movt	r0, #546	; 0x222
   2a634:	subs	r1, r1, r6
   2a638:	sbcs	r0, r0, r7
   2a63c:	blt	2bb5c <__assert_fail@plt+0x190ac>
   2a640:	b	2bb58 <__assert_fail@plt+0x190a8>
   2a644:	mov	r5, r4
   2a648:	mov	r4, r2
   2a64c:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   2a650:	ldr	r2, [sp, #136]	; 0x88
   2a654:	vmov.i32	q8, #0	; 0x00000000
   2a658:	strd	r0, [r2]
   2a65c:	mov	r2, r4
   2a660:	mov	r4, r5
   2a664:	ldr	r0, [sp, #132]	; 0x84
   2a668:	vst1.64	{d16-d17}, [r0]
   2a66c:	b	2ab60 <__assert_fail@plt+0x180b0>
   2a670:	mov	r5, r2
   2a674:	ldrd	r0, [r3, #-112]	; 0xffffff90
   2a678:	ldr	r2, [sp, #160]	; 0xa0
   2a67c:	mov	r8, r4
   2a680:	mov	r4, r3
   2a684:	mov	r6, #1
   2a688:	strd	r0, [r2]
   2a68c:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   2a690:	ldr	r2, [sp, #156]	; 0x9c
   2a694:	rsbs	r0, r0, #0
   2a698:	rsc	r3, r1, #0
   2a69c:	stm	r2, {r0, r3}
   2a6a0:	ands	r0, r1, r3
   2a6a4:	bmi	2c2f0 <__assert_fail@plt+0x19840>
   2a6a8:	ldrd	r0, [r7]
   2a6ac:	ldr	r2, [sp, #80]	; 0x50
   2a6b0:	rsbs	r0, r0, #0
   2a6b4:	rsc	r3, r1, #0
   2a6b8:	stm	r2, {r0, r3}
   2a6bc:	ands	r0, r1, r3
   2a6c0:	bmi	2c2f0 <__assert_fail@plt+0x19840>
   2a6c4:	mov	r3, r4
   2a6c8:	ldr	r1, [sp, #84]	; 0x54
   2a6cc:	mov	r2, r5
   2a6d0:	mov	r4, r8
   2a6d4:	ldr	r0, [r3, #16]
   2a6d8:	str	r0, [r1]
   2a6dc:	b	2be48 <__assert_fail@plt+0x19398>
   2a6e0:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   2a6e4:	b	2aaac <__assert_fail@plt+0x17ffc>
   2a6e8:	movw	r0, #40336	; 0x9d90
   2a6ec:	str	r4, [sp, #164]	; 0xa4
   2a6f0:	str	r2, [sp, #148]	; 0x94
   2a6f4:	movt	r0, #65535	; 0xffff
   2a6f8:	str	r0, [r9, #24]
   2a6fc:	str	r3, [sp, #172]	; 0xac
   2a700:	ldr	r0, [r3, #4]
   2a704:	ldr	r1, [r3]
   2a708:	ldr	r3, [r6, #8]
   2a70c:	ldr	r4, [r6]
   2a710:	str	r0, [sp, #68]	; 0x44
   2a714:	ldm	r7, {r0, lr}
   2a718:	str	r1, [sp, #20]
   2a71c:	ldr	r1, [r5, #4]
   2a720:	str	lr, [sp, #56]	; 0x38
   2a724:	ldr	r5, [r5]
   2a728:	str	r0, [sp, #52]	; 0x34
   2a72c:	ldm	sl, {r0, ip}
   2a730:	str	ip, [sp, #44]	; 0x2c
   2a734:	ldr	sl, [r6, #4]
   2a738:	str	r1, [sp, #32]
   2a73c:	str	r0, [sp, #48]	; 0x30
   2a740:	ldm	r8, {r0, r7}
   2a744:	str	r7, [sp, #28]
   2a748:	ldr	r2, [r9, #144]	; 0x90
   2a74c:	str	r2, [sp, #64]	; 0x40
   2a750:	add	r2, r2, r3
   2a754:	str	r2, [sp, #60]	; 0x3c
   2a758:	str	r2, [r9, #144]	; 0x90
   2a75c:	ldr	r2, [sp, #96]	; 0x60
   2a760:	ldr	r6, [r2]
   2a764:	ldr	r3, [r2, #4]
   2a768:	adds	r6, r6, r4
   2a76c:	adc	r8, r3, sl
   2a770:	stm	r2, {r6, r8}
   2a774:	ldr	r4, [sp, #100]	; 0x64
   2a778:	ldr	r6, [r4]
   2a77c:	ldr	r2, [r4, #4]
   2a780:	adds	r0, r6, r0
   2a784:	adc	r6, r2, r7
   2a788:	stm	r4, {r0, r6}
   2a78c:	ldr	r0, [sp, #104]	; 0x68
   2a790:	ldr	r7, [r0]
   2a794:	ldr	r4, [r0, #4]
   2a798:	adds	r5, r7, r5
   2a79c:	str	r4, [sp, #24]
   2a7a0:	adc	r7, r4, r1
   2a7a4:	stm	r0, {r5, r7}
   2a7a8:	ldr	r0, [sp, #108]	; 0x6c
   2a7ac:	ldr	r1, [sp, #48]	; 0x30
   2a7b0:	ldrd	r4, [r0]
   2a7b4:	adds	r4, r4, r1
   2a7b8:	adc	r1, r5, ip
   2a7bc:	str	r1, [sp, #36]	; 0x24
   2a7c0:	str	r4, [r0]
   2a7c4:	str	r1, [r0, #4]
   2a7c8:	ldr	ip, [sp, #112]	; 0x70
   2a7cc:	ldr	r1, [sp, #52]	; 0x34
   2a7d0:	ldr	r4, [ip]
   2a7d4:	ldr	r0, [ip, #4]
   2a7d8:	adds	r4, r4, r1
   2a7dc:	str	r0, [sp, #40]	; 0x28
   2a7e0:	adc	r1, r0, lr
   2a7e4:	str	r1, [sp, #48]	; 0x30
   2a7e8:	str	r4, [ip]
   2a7ec:	str	r1, [ip, #4]
   2a7f0:	ldr	lr, [sp, #116]	; 0x74
   2a7f4:	ldr	r0, [sp, #20]
   2a7f8:	ldr	r4, [lr]
   2a7fc:	ldr	r1, [lr, #4]
   2a800:	adds	r4, r4, r0
   2a804:	ldr	r0, [sp, #68]	; 0x44
   2a808:	str	r1, [sp, #52]	; 0x34
   2a80c:	adc	ip, r1, r0
   2a810:	cmn	r3, #1
   2a814:	mov	r0, #0
   2a818:	mov	r1, #0
   2a81c:	stm	lr, {r4, ip}
   2a820:	mov	r3, #0
   2a824:	mov	lr, #0
   2a828:	mov	r4, #0
   2a82c:	movwgt	r0, #1
   2a830:	cmn	r8, #1
   2a834:	mov	r8, #0
   2a838:	movwgt	r1, #1
   2a83c:	str	r0, [sp, #20]
   2a840:	subs	r0, r0, r1
   2a844:	mov	r1, #0
   2a848:	movwne	r0, #1
   2a84c:	cmn	sl, #1
   2a850:	str	r0, [sp, #16]
   2a854:	mov	r0, #0
   2a858:	movwgt	r0, #1
   2a85c:	cmn	r2, #1
   2a860:	mov	r2, #0
   2a864:	str	r0, [sp, #12]
   2a868:	mov	r0, #0
   2a86c:	movwgt	r0, #1
   2a870:	cmn	r6, #1
   2a874:	mov	r6, #0
   2a878:	movwgt	r1, #1
   2a87c:	str	r0, [sp, #8]
   2a880:	subs	r0, r0, r1
   2a884:	ldr	r1, [sp, #36]	; 0x24
   2a888:	movwne	r0, #1
   2a88c:	str	r0, [sp, #4]
   2a890:	ldr	r0, [sp, #28]
   2a894:	cmn	r0, #1
   2a898:	mov	r0, #0
   2a89c:	movwgt	r0, #1
   2a8a0:	str	r0, [sp, #28]
   2a8a4:	ldr	r0, [sp, #24]
   2a8a8:	cmn	r0, #1
   2a8ac:	mov	r0, #0
   2a8b0:	movwgt	r8, #1
   2a8b4:	cmn	r7, #1
   2a8b8:	movwgt	r0, #1
   2a8bc:	subs	r0, r8, r0
   2a8c0:	movwne	r0, #1
   2a8c4:	str	r0, [sp, #24]
   2a8c8:	ldr	r0, [sp, #32]
   2a8cc:	cmn	r0, #1
   2a8d0:	mov	r0, #0
   2a8d4:	movwgt	r0, #1
   2a8d8:	cmn	r5, #1
   2a8dc:	mov	r5, #0
   2a8e0:	movwgt	r3, #1
   2a8e4:	cmn	r1, #1
   2a8e8:	mov	r1, #0
   2a8ec:	movwgt	r1, #1
   2a8f0:	subs	r1, r3, r1
   2a8f4:	movwne	r1, #1
   2a8f8:	str	r1, [sp, #36]	; 0x24
   2a8fc:	ldr	r1, [sp, #44]	; 0x2c
   2a900:	cmn	r1, #1
   2a904:	ldr	r1, [sp, #40]	; 0x28
   2a908:	movwgt	lr, #1
   2a90c:	cmn	r1, #1
   2a910:	ldr	r1, [sp, #48]	; 0x30
   2a914:	movwgt	r5, #1
   2a918:	cmn	r1, #1
   2a91c:	ldr	r1, [sp, #56]	; 0x38
   2a920:	movwgt	r2, #1
   2a924:	subs	r7, r5, r2
   2a928:	mov	r2, #0
   2a92c:	movwne	r7, #1
   2a930:	cmn	r1, #1
   2a934:	ldr	r1, [sp, #52]	; 0x34
   2a938:	movwgt	r2, #1
   2a93c:	cmn	r1, #1
   2a940:	mov	r1, #0
   2a944:	movwgt	r6, #1
   2a948:	cmn	ip, #1
   2a94c:	ldr	ip, [sp, #60]	; 0x3c
   2a950:	movwgt	r4, #1
   2a954:	subs	sl, r6, r4
   2a958:	ldr	r4, [sp, #68]	; 0x44
   2a95c:	movwne	sl, #1
   2a960:	cmn	r4, #1
   2a964:	ldr	r4, [sp, #64]	; 0x40
   2a968:	movwgt	r1, #1
   2a96c:	str	r1, [sp, #68]	; 0x44
   2a970:	cmp	ip, r4
   2a974:	bvs	2c2dc <__assert_fail@plt+0x1982c>
   2a978:	ldr	r4, [sp, #20]
   2a97c:	ldr	r1, [sp, #12]
   2a980:	sub	r4, r4, r1
   2a984:	ldr	r1, [sp, #16]
   2a988:	clz	r4, r4
   2a98c:	lsr	r4, r4, #5
   2a990:	ands	r4, r4, r1
   2a994:	ldreq	r1, [sp, #8]
   2a998:	ldreq	r4, [sp, #28]
   2a99c:	subeq	r4, r1, r4
   2a9a0:	ldreq	r1, [sp, #4]
   2a9a4:	clzeq	r4, r4
   2a9a8:	lsreq	r4, r4, #5
   2a9ac:	andseq	r4, r4, r1
   2a9b0:	bne	2c2dc <__assert_fail@plt+0x1982c>
   2a9b4:	ldr	r1, [sp, #24]
   2a9b8:	sub	r0, r8, r0
   2a9bc:	ldr	r4, [sp, #164]	; 0xa4
   2a9c0:	clz	r0, r0
   2a9c4:	lsr	r0, r0, #5
   2a9c8:	ands	r0, r0, r1
   2a9cc:	bne	2c2dc <__assert_fail@plt+0x1982c>
   2a9d0:	ldr	r1, [sp, #36]	; 0x24
   2a9d4:	sub	r0, r3, lr
   2a9d8:	clz	r0, r0
   2a9dc:	lsr	r0, r0, #5
   2a9e0:	ands	r0, r0, r1
   2a9e4:	subeq	r0, r5, r2
   2a9e8:	clzeq	r0, r0
   2a9ec:	lsreq	r0, r0, #5
   2a9f0:	andseq	r0, r0, r7
   2a9f4:	bne	2c2dc <__assert_fail@plt+0x1982c>
   2a9f8:	ldr	r0, [sp, #68]	; 0x44
   2a9fc:	sub	r0, r6, r0
   2aa00:	mov	r6, #1
   2aa04:	clz	r0, r0
   2aa08:	lsr	r0, r0, #5
   2aa0c:	ands	r0, r0, sl
   2aa10:	bne	2c2f0 <__assert_fail@plt+0x19840>
   2aa14:	movw	r1, #9913	; 0x26b9
   2aa18:	mov	r0, #1
   2aa1c:	mov	r2, #5
   2aa20:	movt	r1, #5
   2aa24:	strb	r0, [r9, #153]	; 0x99
   2aa28:	mov	r0, #0
   2aa2c:	bl	12564 <dcgettext@plt>
   2aa30:	ldr	r2, [sp, #148]	; 0x94
   2aa34:	ldr	r3, [sp, #172]	; 0xac
   2aa38:	b	2ada0 <__assert_fail@plt+0x182f0>
   2aa3c:	mov	r0, r2
   2aa40:	mov	r1, r4
   2aa44:	mov	r4, r3
   2aa48:	ldr	r8, [r3, #-56]	; 0xffffffc8
   2aa4c:	ldr	sl, [r3, #-52]	; 0xffffffcc
   2aa50:	ldr	r2, [r3, #-272]	; 0xfffffef0
   2aa54:	ldr	r3, [r3, #-268]	; 0xfffffef4
   2aa58:	ldr	r5, [sp, #136]	; 0x88
   2aa5c:	ldrd	r6, [r4, #-160]	; 0xffffff60
   2aa60:	strd	r2, [r5]
   2aa64:	mov	r3, r4
   2aa68:	mov	r4, r1
   2aa6c:	ldr	r2, [sp, #132]	; 0x84
   2aa70:	strd	r6, [r2]
   2aa74:	str	r8, [r9, #88]	; 0x58
   2aa78:	mov	r2, r0
   2aa7c:	str	sl, [r9, #92]	; 0x5c
   2aa80:	b	2ab60 <__assert_fail@plt+0x180b0>
   2aa84:	ldr	r0, [r3]
   2aa88:	str	r0, [r9, #24]
   2aa8c:	b	2be48 <__assert_fail@plt+0x19398>
   2aa90:	ldr	r0, [r9, #172]	; 0xac
   2aa94:	movw	r1, #65148	; 0xfe7c
   2aa98:	movt	r1, #4
   2aa9c:	add	r0, r0, #1
   2aaa0:	str	r0, [r9, #172]	; 0xac
   2aaa4:	b	2ad7c <__assert_fail@plt+0x182cc>
   2aaa8:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   2aaac:	mov	r5, r4
   2aab0:	mov	r4, r2
   2aab4:	ldr	r2, [sp, #88]	; 0x58
   2aab8:	strd	r0, [r2]
   2aabc:	mov	r1, #1
   2aac0:	mov	r2, r4
   2aac4:	mov	r4, r5
   2aac8:	ldr	r0, [r3]
   2aacc:	strb	r1, [r9, #187]	; 0xbb
   2aad0:	str	r0, [r9, #16]
   2aad4:	b	2be48 <__assert_fail@plt+0x19398>
   2aad8:	ldr	r0, [r3, #-208]	; 0xffffff30
   2aadc:	mov	r5, r4
   2aae0:	mov	r4, r2
   2aae4:	cmp	r0, #4
   2aae8:	blt	2b29c <__assert_fail@plt+0x187ec>
   2aaec:	sub	r0, r3, #224	; 0xe0
   2aaf0:	vldr	d18, [r3, #-208]	; 0xffffff30
   2aaf4:	vld1.64	{d16-d17}, [r0]
   2aaf8:	ldr	r0, [sp, #92]	; 0x5c
   2aafc:	vst1.64	{d16-d17}, [r0]!
   2ab00:	vstr	d18, [r0]
   2ab04:	ldrd	r0, [r3, #-104]	; 0xffffff98
   2ab08:	b	2adc8 <__assert_fail@plt+0x18318>
   2ab0c:	ldr	r0, [r9, #156]	; 0x9c
   2ab10:	movw	r1, #9904	; 0x26b0
   2ab14:	movt	r1, #5
   2ab18:	add	r0, r0, #1
   2ab1c:	str	r0, [r9, #156]	; 0x9c
   2ab20:	b	2ad7c <__assert_fail@plt+0x182cc>
   2ab24:	ldrd	r0, [r3, #-160]	; 0xffffff60
   2ab28:	ldr	r7, [sp, #136]	; 0x88
   2ab2c:	mov	r6, r4
   2ab30:	mov	r4, r3
   2ab34:	mov	r5, r2
   2ab38:	ldrd	r2, [r3, #-48]	; 0xffffffd0
   2ab3c:	strd	r0, [r7]
   2ab40:	ldr	r0, [sp, #132]	; 0x84
   2ab44:	strd	r2, [r0]
   2ab48:	mov	r0, #0
   2ab4c:	mov	r3, r4
   2ab50:	mov	r2, r5
   2ab54:	mov	r4, r6
   2ab58:	str	r0, [r9, #88]	; 0x58
   2ab5c:	str	r0, [r9, #92]	; 0x5c
   2ab60:	ldr	r0, [r3]
   2ab64:	str	r0, [r9, #28]
   2ab68:	b	2be48 <__assert_fail@plt+0x19398>
   2ab6c:	ldr	r0, [r3]
   2ab70:	add	r0, r0, #3600	; 0xe10
   2ab74:	str	r0, [r9, #24]
   2ab78:	b	2be48 <__assert_fail@plt+0x19398>
   2ab7c:	mov	r5, r2
   2ab80:	ldrd	r0, [r3]
   2ab84:	ldr	r2, [sp, #72]	; 0x48
   2ab88:	strd	r0, [r2]
   2ab8c:	movw	r1, #142	; 0x8e
   2ab90:	mov	r0, #1
   2ab94:	strb	r0, [r9, #152]	; 0x98
   2ab98:	movt	r1, #5
   2ab9c:	mov	r0, #0
   2aba0:	b	2ad84 <__assert_fail@plt+0x182d4>
   2aba4:	ldr	r1, [r9, #172]	; 0xac
   2aba8:	ldr	r0, [r9, #156]	; 0x9c
   2abac:	add	r1, r1, #1
   2abb0:	add	r0, r0, #1
   2abb4:	str	r1, [r9, #172]	; 0xac
   2abb8:	movw	r1, #9884	; 0x269c
   2abbc:	str	r0, [r9, #156]	; 0x9c
   2abc0:	movt	r1, #5
   2abc4:	b	2ad7c <__assert_fail@plt+0x182cc>
   2abc8:	ldr	r0, [r9, #160]	; 0xa0
   2abcc:	movw	r1, #9909	; 0x26b5
   2abd0:	movt	r1, #5
   2abd4:	add	r0, r0, #1
   2abd8:	str	r0, [r9, #160]	; 0xa0
   2abdc:	b	2ad7c <__assert_fail@plt+0x182cc>
   2abe0:	movw	r1, #9913	; 0x26b9
   2abe4:	movt	r1, #5
   2abe8:	b	2ad7c <__assert_fail@plt+0x182cc>
   2abec:	ldrd	r0, [r3, #-160]	; 0xffffff60
   2abf0:	ldr	r7, [sp, #136]	; 0x88
   2abf4:	mov	r6, r4
   2abf8:	mov	r4, r3
   2abfc:	mov	r5, r2
   2ac00:	ldrd	r2, [r3, #-48]	; 0xffffffd0
   2ac04:	strd	r0, [r7]
   2ac08:	ldr	r0, [sp, #132]	; 0x84
   2ac0c:	strd	r2, [r0]
   2ac10:	mov	r0, #0
   2ac14:	mov	r3, r4
   2ac18:	mov	r2, r5
   2ac1c:	mov	r4, r6
   2ac20:	str	r0, [r9, #88]	; 0x58
   2ac24:	str	r0, [r9, #92]	; 0x5c
   2ac28:	b	2acd4 <__assert_fail@plt+0x18224>
   2ac2c:	mov	r0, #0
   2ac30:	str	r0, [sp, #228]	; 0xe4
   2ac34:	mov	r0, #1
   2ac38:	str	r0, [sp, #236]	; 0xec
   2ac3c:	mov	r0, #0
   2ac40:	str	r0, [sp, #220]	; 0xdc
   2ac44:	mov	r0, #0
   2ac48:	str	r0, [sp, #224]	; 0xe0
   2ac4c:	mov	r0, #0
   2ac50:	str	r0, [sp, #216]	; 0xd8
   2ac54:	mov	r0, #0
   2ac58:	str	r0, [sp, #212]	; 0xd4
   2ac5c:	mov	r0, #0
   2ac60:	str	r0, [sp, #208]	; 0xd0
   2ac64:	mov	r0, #0
   2ac68:	str	r0, [sp, #204]	; 0xcc
   2ac6c:	mov	r0, #0
   2ac70:	str	r0, [sp, #196]	; 0xc4
   2ac74:	mov	r0, #0
   2ac78:	str	r0, [sp, #200]	; 0xc8
   2ac7c:	mov	r0, #0
   2ac80:	str	r0, [sp, #192]	; 0xc0
   2ac84:	mov	r0, #0
   2ac88:	str	r0, [sp, #188]	; 0xbc
   2ac8c:	b	2be40 <__assert_fail@plt+0x19390>
   2ac90:	mov	r0, r2
   2ac94:	mov	r1, r4
   2ac98:	mov	r4, r3
   2ac9c:	ldr	r8, [r3, #-56]	; 0xffffffc8
   2aca0:	ldr	sl, [r3, #-52]	; 0xffffffcc
   2aca4:	ldr	r2, [r3, #-272]	; 0xfffffef0
   2aca8:	ldr	r3, [r3, #-268]	; 0xfffffef4
   2acac:	ldr	r5, [sp, #136]	; 0x88
   2acb0:	ldrd	r6, [r4, #-160]	; 0xffffff60
   2acb4:	strd	r2, [r5]
   2acb8:	mov	r3, r4
   2acbc:	mov	r4, r1
   2acc0:	ldr	r2, [sp, #132]	; 0x84
   2acc4:	strd	r6, [r2]
   2acc8:	str	r8, [r9, #88]	; 0x58
   2accc:	mov	r2, r0
   2acd0:	str	sl, [r9, #92]	; 0x5c
   2acd4:	mov	r0, #2
   2acd8:	str	r0, [r9, #28]
   2acdc:	b	2be48 <__assert_fail@plt+0x19398>
   2ace0:	ldrd	r0, [r3, #-104]	; 0xffffff98
   2ace4:	b	2adc0 <__assert_fail@plt+0x18310>
   2ace8:	ldr	r0, [r9, #164]	; 0xa4
   2acec:	movw	r1, #9893	; 0x26a5
   2acf0:	movt	r1, #5
   2acf4:	add	r0, r0, #1
   2acf8:	str	r0, [r9, #164]	; 0xa4
   2acfc:	b	2ad7c <__assert_fail@plt+0x182cc>
   2ad00:	ldrd	r0, [r7]
   2ad04:	str	r1, [sp, #232]	; 0xe8
   2ad08:	str	r0, [sp, #236]	; 0xec
   2ad0c:	b	2be48 <__assert_fail@plt+0x19398>
   2ad10:	ldr	r0, [r9, #176]	; 0xb0
   2ad14:	movw	r1, #9899	; 0x26ab
   2ad18:	movt	r1, #5
   2ad1c:	add	r0, r0, #1
   2ad20:	str	r0, [r9, #176]	; 0xb0
   2ad24:	b	2ad7c <__assert_fail@plt+0x182cc>
   2ad28:	mov	r5, r4
   2ad2c:	mov	r4, r2
   2ad30:	ldrd	r0, [r3, #-104]	; 0xffffff98
   2ad34:	ldr	r2, [sp, #156]	; 0x9c
   2ad38:	strd	r0, [r2]
   2ad3c:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   2ad40:	ldr	r2, [sp, #160]	; 0xa0
   2ad44:	b	2b128 <__assert_fail@plt+0x18678>
   2ad48:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   2ad4c:	str	r1, [sp, #220]	; 0xdc
   2ad50:	str	r0, [sp, #228]	; 0xe4
   2ad54:	mov	r0, #0
   2ad58:	str	r0, [sp, #224]	; 0xe0
   2ad5c:	mov	r0, #0
   2ad60:	str	r0, [sp, #216]	; 0xd8
   2ad64:	b	2be00 <__assert_fail@plt+0x19350>
   2ad68:	movw	r1, #9922	; 0x26c2
   2ad6c:	movt	r1, #5
   2ad70:	b	2ad7c <__assert_fail@plt+0x182cc>
   2ad74:	movw	r1, #5493	; 0x1575
   2ad78:	movt	r1, #5
   2ad7c:	mov	r0, #0
   2ad80:	mov	r5, r2
   2ad84:	mov	r2, #5
   2ad88:	mov	r6, r4
   2ad8c:	mov	r4, r3
   2ad90:	bl	12564 <dcgettext@plt>
   2ad94:	mov	r3, r4
   2ad98:	mov	r2, r5
   2ad9c:	mov	r4, r6
   2ada0:	ldr	ip, [sp, #168]	; 0xa8
   2ada4:	movw	lr, #7224	; 0x1c38
   2ada8:	movt	lr, #5
   2adac:	b	2be48 <__assert_fail@plt+0x19398>
   2adb0:	ldr	r0, [r3]
   2adb4:	str	r0, [r9, #20]
   2adb8:	b	2be48 <__assert_fail@plt+0x19398>
   2adbc:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   2adc0:	mov	r5, r4
   2adc4:	mov	r4, r2
   2adc8:	ldr	r2, [sp, #160]	; 0xa0
   2adcc:	strd	r0, [r2]
   2add0:	ldrd	r0, [r7]
   2add4:	ldr	r2, [sp, #156]	; 0x9c
   2add8:	strd	r0, [r2]
   2addc:	mov	r2, r4
   2ade0:	mov	r4, r5
   2ade4:	b	2be48 <__assert_fail@plt+0x19398>
   2ade8:	ldr	r0, [r9, #176]	; 0xb0
   2adec:	str	r2, [sp, #148]	; 0x94
   2adf0:	mov	r2, #0
   2adf4:	mov	r6, #100	; 0x64
   2adf8:	str	r4, [sp, #164]	; 0xa4
   2adfc:	str	r3, [sp, #172]	; 0xac
   2ae00:	add	r0, r0, #1
   2ae04:	str	r0, [r9, #176]	; 0xb0
   2ae08:	ldr	r1, [r3, #-40]	; 0xffffffd8
   2ae0c:	ldr	sl, [r3, #4]
   2ae10:	ldr	r0, [r3, #-48]	; 0xffffffd0
   2ae14:	ldr	r5, [r3, #-44]	; 0xffffffd4
   2ae18:	cmp	r1, #3
   2ae1c:	mov	r1, #0
   2ae20:	movwlt	r1, #1
   2ae24:	cmp	sl, #0
   2ae28:	movwmi	r2, #1
   2ae2c:	ands	r1, r2, r1
   2ae30:	umull	r7, r1, r0, r6
   2ae34:	moveq	r7, r0
   2ae38:	mlane	r5, r5, r6, r1
   2ae3c:	cmn	sl, #1
   2ae40:	ble	2b6e8 <__assert_fail@plt+0x18c38>
   2ae44:	ldr	r0, [r3, #-56]	; 0xffffffc8
   2ae48:	ldr	r4, [r3]
   2ae4c:	cmn	r5, #1
   2ae50:	str	r0, [sp, #68]	; 0x44
   2ae54:	ble	2bcb8 <__assert_fail@plt+0x19208>
   2ae58:	movw	r1, #8738	; 0x2222
   2ae5c:	movw	r0, #8738	; 0x2222
   2ae60:	mov	r2, #1
   2ae64:	movt	r1, #8738	; 0x2222
   2ae68:	movt	r0, #546	; 0x222
   2ae6c:	subs	r1, r1, r7
   2ae70:	sbcs	r0, r0, r5
   2ae74:	blt	2bcf0 <__assert_fail@plt+0x19240>
   2ae78:	b	2bcec <__assert_fail@plt+0x1923c>
   2ae7c:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   2ae80:	str	r0, [sp, #212]	; 0xd4
   2ae84:	mov	r0, #0
   2ae88:	str	r1, [sp, #208]	; 0xd0
   2ae8c:	str	r0, [sp, #228]	; 0xe4
   2ae90:	mov	r0, #0
   2ae94:	str	r0, [sp, #220]	; 0xdc
   2ae98:	mov	r0, #0
   2ae9c:	str	r0, [sp, #224]	; 0xe0
   2aea0:	mov	r0, #0
   2aea4:	str	r0, [sp, #216]	; 0xd8
   2aea8:	b	2be10 <__assert_fail@plt+0x19360>
   2aeac:	mov	r0, #0
   2aeb0:	str	r0, [sp, #228]	; 0xe4
   2aeb4:	mov	r0, #1
   2aeb8:	str	r0, [sp, #204]	; 0xcc
   2aebc:	mov	r0, #0
   2aec0:	str	r0, [sp, #220]	; 0xdc
   2aec4:	mov	r0, #0
   2aec8:	str	r0, [sp, #224]	; 0xe0
   2aecc:	mov	r0, #0
   2aed0:	str	r0, [sp, #216]	; 0xd8
   2aed4:	mov	r0, #0
   2aed8:	str	r0, [sp, #212]	; 0xd4
   2aedc:	mov	r0, #0
   2aee0:	str	r0, [sp, #208]	; 0xd0
   2aee4:	b	2be18 <__assert_fail@plt+0x19368>
   2aee8:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   2aeec:	str	r0, [sp, #200]	; 0xc8
   2aef0:	mov	r0, #0
   2aef4:	str	r1, [sp, #192]	; 0xc0
   2aef8:	str	r0, [sp, #228]	; 0xe4
   2aefc:	mov	r0, #0
   2af00:	str	r0, [sp, #220]	; 0xdc
   2af04:	mov	r0, #0
   2af08:	str	r0, [sp, #224]	; 0xe0
   2af0c:	mov	r0, #0
   2af10:	str	r0, [sp, #216]	; 0xd8
   2af14:	mov	r0, #0
   2af18:	str	r0, [sp, #212]	; 0xd4
   2af1c:	mov	r0, #0
   2af20:	str	r0, [sp, #208]	; 0xd0
   2af24:	mov	r0, #0
   2af28:	str	r0, [sp, #204]	; 0xcc
   2af2c:	mov	r0, #0
   2af30:	str	r0, [sp, #196]	; 0xc4
   2af34:	b	2be30 <__assert_fail@plt+0x19380>
   2af38:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   2af3c:	str	r0, [sp, #236]	; 0xec
   2af40:	mov	r0, #0
   2af44:	str	r1, [sp, #232]	; 0xe8
   2af48:	str	r0, [sp, #228]	; 0xe4
   2af4c:	mov	r0, #0
   2af50:	str	r0, [sp, #220]	; 0xdc
   2af54:	mov	r0, #0
   2af58:	str	r0, [sp, #224]	; 0xe0
   2af5c:	mov	r0, #0
   2af60:	str	r0, [sp, #216]	; 0xd8
   2af64:	mov	r0, #0
   2af68:	str	r0, [sp, #212]	; 0xd4
   2af6c:	mov	r0, #0
   2af70:	str	r0, [sp, #208]	; 0xd0
   2af74:	mov	r0, #0
   2af78:	str	r0, [sp, #204]	; 0xcc
   2af7c:	mov	r0, #0
   2af80:	str	r0, [sp, #196]	; 0xc4
   2af84:	mov	r0, #0
   2af88:	str	r0, [sp, #200]	; 0xc8
   2af8c:	mov	r0, #0
   2af90:	str	r0, [sp, #192]	; 0xc0
   2af94:	mov	r0, #0
   2af98:	str	r0, [sp, #188]	; 0xbc
   2af9c:	b	2be48 <__assert_fail@plt+0x19398>
   2afa0:	movw	r0, #40336	; 0x9d90
   2afa4:	movt	r0, #65535	; 0xffff
   2afa8:	str	r0, [r9, #24]
   2afac:	b	2be48 <__assert_fail@plt+0x19398>
   2afb0:	mov	r0, #0
   2afb4:	str	r0, [sp, #228]	; 0xe4
   2afb8:	mov	r0, #1
   2afbc:	str	r0, [sp, #212]	; 0xd4
   2afc0:	mov	r0, #0
   2afc4:	str	r0, [sp, #220]	; 0xdc
   2afc8:	mov	r0, #0
   2afcc:	str	r0, [sp, #224]	; 0xe0
   2afd0:	mov	r0, #0
   2afd4:	str	r0, [sp, #216]	; 0xd8
   2afd8:	b	2be08 <__assert_fail@plt+0x19358>
   2afdc:	ldr	r0, [r9, #156]	; 0x9c
   2afe0:	vld1.64	{d16-d17}, [r3]
   2afe4:	ldr	r6, [sl]
   2afe8:	cmp	r0, #0
   2afec:	beq	2b024 <__assert_fail@plt+0x18574>
   2aff0:	ldr	r1, [sp, #84]	; 0x54
   2aff4:	ldr	r1, [r1]
   2aff8:	cmp	r1, #0
   2affc:	bne	2b024 <__assert_fail@plt+0x18574>
   2b000:	ldrb	r1, [r9, #153]	; 0x99
   2b004:	cmp	r1, #0
   2b008:	bne	2b024 <__assert_fail@plt+0x18574>
   2b00c:	ldr	r7, [sl, #4]
   2b010:	cmp	r6, #2
   2b014:	bgt	2bf50 <__assert_fail@plt+0x194a0>
   2b018:	ldr	r1, [r9, #172]	; 0xac
   2b01c:	cmp	r1, #0
   2b020:	bne	2bf50 <__assert_fail@plt+0x194a0>
   2b024:	cmp	r6, #5
   2b028:	str	r4, [sp, #164]	; 0xa4
   2b02c:	blt	2b300 <__assert_fail@plt+0x18850>
   2b030:	vmov.32	r5, d17[1]
   2b034:	vmov.32	sl, d17[0]
   2b038:	add	r0, r0, #1
   2b03c:	str	r2, [sp, #148]	; 0x94
   2b040:	mov	r8, r3
   2b044:	mov	r2, #100	; 0x64
   2b048:	mov	r3, #0
   2b04c:	mov	r4, #100	; 0x64
   2b050:	str	r0, [r9, #156]	; 0x9c
   2b054:	mov	r0, sl
   2b058:	mov	r1, r5
   2b05c:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2b060:	umull	r2, r3, r0, r4
   2b064:	ldr	r7, [sp, #156]	; 0x9c
   2b068:	mla	r3, r1, r4, r3
   2b06c:	subs	r2, sl, r2
   2b070:	sbc	r3, r5, r3
   2b074:	strd	r2, [r7]
   2b078:	mov	r2, #100	; 0x64
   2b07c:	mov	r3, #0
   2b080:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2b084:	mov	r0, r2
   2b088:	ldr	r2, [sp, #160]	; 0xa0
   2b08c:	mov	r1, r3
   2b090:	mov	r3, #0
   2b094:	strd	r0, [r2]
   2b098:	mov	r0, sl
   2b09c:	mov	r1, r5
   2b0a0:	movw	r2, #10000	; 0x2710
   2b0a4:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2b0a8:	ldr	r2, [sp, #80]	; 0x50
   2b0ac:	ldr	ip, [sp, #168]	; 0xa8
   2b0b0:	movw	lr, #7224	; 0x1c38
   2b0b4:	mov	r3, r8
   2b0b8:	movt	lr, #5
   2b0bc:	strd	r0, [r2]
   2b0c0:	sub	r0, r6, #4
   2b0c4:	ldr	r2, [sp, #148]	; 0x94
   2b0c8:	ldr	r4, [sp, #164]	; 0xa4
   2b0cc:	str	r0, [r9, #48]	; 0x30
   2b0d0:	b	2be48 <__assert_fail@plt+0x19398>
   2b0d4:	ldr	r1, [sp, #88]	; 0x58
   2b0d8:	mov	r0, #0
   2b0dc:	str	r0, [r1]
   2b0e0:	str	r0, [r1, #4]
   2b0e4:	ldr	r0, [r3, #-56]	; 0xffffffc8
   2b0e8:	str	r0, [r9, #16]
   2b0ec:	b	2be48 <__assert_fail@plt+0x19398>
   2b0f0:	ldr	r1, [sp, #88]	; 0x58
   2b0f4:	mov	r0, #0
   2b0f8:	str	r0, [r1]
   2b0fc:	str	r0, [r1, #4]
   2b100:	ldr	r0, [r3]
   2b104:	str	r0, [r9, #16]
   2b108:	b	2be48 <__assert_fail@plt+0x19398>
   2b10c:	mov	r5, r4
   2b110:	mov	r4, r2
   2b114:	ldrd	r0, [r3, #-168]	; 0xffffff58
   2b118:	ldr	r2, [sp, #160]	; 0xa0
   2b11c:	strd	r0, [r2]
   2b120:	ldrd	r0, [r3, #-104]	; 0xffffff98
   2b124:	ldr	r2, [sp, #156]	; 0x9c
   2b128:	strd	r0, [r2]
   2b12c:	mov	r0, r3
   2b130:	mov	r2, r4
   2b134:	mov	r4, r5
   2b138:	vld1.64	{d16-d17}, [r0]!
   2b13c:	vldr	d18, [r0]
   2b140:	ldr	r0, [sp, #92]	; 0x5c
   2b144:	vst1.64	{d16-d17}, [r0]!
   2b148:	vstr	d18, [r0]
   2b14c:	b	2be48 <__assert_fail@plt+0x19398>
   2b150:	mov	r5, r2
   2b154:	ldrd	r0, [r3, #-104]	; 0xffffff98
   2b158:	ldr	r2, [sp, #156]	; 0x9c
   2b15c:	mov	r6, r4
   2b160:	mov	r4, r3
   2b164:	strd	r0, [r2]
   2b168:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   2b16c:	ldr	r2, [sp, #160]	; 0xa0
   2b170:	strd	r0, [r2]
   2b174:	ldrd	r0, [r7]
   2b178:	ldr	r2, [sp, #80]	; 0x50
   2b17c:	rsbs	r0, r0, #0
   2b180:	rsc	r3, r1, #0
   2b184:	stm	r2, {r0, r3}
   2b188:	ands	r0, r1, r3
   2b18c:	bmi	2c2dc <__assert_fail@plt+0x1982c>
   2b190:	ldr	r0, [r4, #16]
   2b194:	ldr	r1, [sp, #84]	; 0x54
   2b198:	mov	r3, r4
   2b19c:	mov	r2, r5
   2b1a0:	mov	r4, r6
   2b1a4:	str	r0, [r1]
   2b1a8:	b	2be48 <__assert_fail@plt+0x19398>
   2b1ac:	mov	r0, #0
   2b1b0:	str	r0, [sp, #228]	; 0xe4
   2b1b4:	mov	r0, #1
   2b1b8:	str	r0, [sp, #200]	; 0xc8
   2b1bc:	mov	r0, #0
   2b1c0:	str	r0, [sp, #220]	; 0xdc
   2b1c4:	mov	r0, #0
   2b1c8:	str	r0, [sp, #224]	; 0xe0
   2b1cc:	mov	r0, #0
   2b1d0:	str	r0, [sp, #216]	; 0xd8
   2b1d4:	mov	r0, #0
   2b1d8:	str	r0, [sp, #212]	; 0xd4
   2b1dc:	mov	r0, #0
   2b1e0:	str	r0, [sp, #208]	; 0xd0
   2b1e4:	mov	r0, #0
   2b1e8:	str	r0, [sp, #204]	; 0xcc
   2b1ec:	mov	r0, #0
   2b1f0:	str	r0, [sp, #196]	; 0xc4
   2b1f4:	b	2be28 <__assert_fail@plt+0x19378>
   2b1f8:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   2b1fc:	str	r0, [sp, #204]	; 0xcc
   2b200:	mov	r0, #0
   2b204:	str	r1, [sp, #196]	; 0xc4
   2b208:	str	r0, [sp, #228]	; 0xe4
   2b20c:	mov	r0, #0
   2b210:	str	r0, [sp, #220]	; 0xdc
   2b214:	mov	r0, #0
   2b218:	str	r0, [sp, #224]	; 0xe0
   2b21c:	mov	r0, #0
   2b220:	str	r0, [sp, #216]	; 0xd8
   2b224:	mov	r0, #0
   2b228:	str	r0, [sp, #212]	; 0xd4
   2b22c:	mov	r0, #0
   2b230:	str	r0, [sp, #208]	; 0xd0
   2b234:	b	2be20 <__assert_fail@plt+0x19370>
   2b238:	ldr	r8, [r3, #-48]	; 0xffffffd0
   2b23c:	ldr	r5, [r3, #-44]	; 0xffffffd4
   2b240:	cmn	r5, #1
   2b244:	ble	2b3a0 <__assert_fail@plt+0x188f0>
   2b248:	and	r0, r6, r7
   2b24c:	cmn	r0, #1
   2b250:	beq	2bddc <__assert_fail@plt+0x1932c>
   2b254:	mov	sl, r2
   2b258:	str	r4, [sp, #164]	; 0xa4
   2b25c:	mov	r4, r3
   2b260:	mov	r0, #0
   2b264:	mov	r1, #-2147483648	; 0x80000000
   2b268:	mov	r2, r6
   2b26c:	mov	r3, r7
   2b270:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2b274:	mov	r3, r4
   2b278:	ldr	r4, [sp, #164]	; 0xa4
   2b27c:	ldr	ip, [sp, #168]	; 0xa8
   2b280:	movw	lr, #7224	; 0x1c38
   2b284:	subs	r0, r0, r8
   2b288:	mov	r2, sl
   2b28c:	movt	lr, #5
   2b290:	sbcs	r0, r1, r5
   2b294:	bge	2bddc <__assert_fail@plt+0x1932c>
   2b298:	b	2c2dc <__assert_fail@plt+0x1982c>
   2b29c:	ldrd	r0, [r3, #-216]	; 0xffffff28
   2b2a0:	ldr	r2, [sp, #160]	; 0xa0
   2b2a4:	strd	r0, [r2]
   2b2a8:	ldrd	r0, [r3, #-104]	; 0xffffff98
   2b2ac:	ldr	r2, [sp, #156]	; 0x9c
   2b2b0:	strd	r0, [r2]
   2b2b4:	mov	r0, r3
   2b2b8:	vld1.64	{d16-d17}, [r0]!
   2b2bc:	vldr	d18, [r0]
   2b2c0:	ldr	r0, [sp, #92]	; 0x5c
   2b2c4:	vst1.64	{d16-d17}, [r0]!
   2b2c8:	vstr	d18, [r0]
   2b2cc:	b	2addc <__assert_fail@plt+0x1832c>
   2b2d0:	ldr	r0, [r9, #172]	; 0xac
   2b2d4:	vmov.32	r4, d17[1]
   2b2d8:	mov	r2, #0
   2b2dc:	cmp	lr, #3
   2b2e0:	add	r0, r0, #1
   2b2e4:	str	r0, [r9, #172]	; 0xac
   2b2e8:	vmov.32	r0, d17[0]
   2b2ec:	bge	2b72c <__assert_fail@plt+0x18c7c>
   2b2f0:	mov	r1, r4
   2b2f4:	mov	ip, #0
   2b2f8:	mov	r3, #0
   2b2fc:	b	2b75c <__assert_fail@plt+0x18cac>
   2b300:	vmov.32	sl, d17[1]
   2b304:	vmov.32	r7, d17[0]
   2b308:	ldr	r0, [r9, #172]	; 0xac
   2b30c:	mov	r4, r2
   2b310:	mov	r5, r3
   2b314:	mov	r8, #0
   2b318:	cmp	r6, #3
   2b31c:	add	r0, r0, #1
   2b320:	str	r0, [r9, #172]	; 0xac
   2b324:	bge	2bac0 <__assert_fail@plt+0x19010>
   2b328:	mov	r0, r7
   2b32c:	mov	r1, sl
   2b330:	mov	r2, #0
   2b334:	mov	r3, #0
   2b338:	b	2baf4 <__assert_fail@plt+0x19044>
   2b33c:	and	r0, r8, r5
   2b340:	cmn	r0, #1
   2b344:	beq	2bdd4 <__assert_fail@plt+0x19324>
   2b348:	mov	sl, r2
   2b34c:	str	r4, [sp, #164]	; 0xa4
   2b350:	mov	r4, r3
   2b354:	mov	r0, #0
   2b358:	mov	r1, #-2147483648	; 0x80000000
   2b35c:	mov	r2, r8
   2b360:	mov	r3, r5
   2b364:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2b368:	mov	r3, r4
   2b36c:	ldr	r4, [sp, #164]	; 0xa4
   2b370:	ldr	ip, [sp, #168]	; 0xa8
   2b374:	movw	lr, #7224	; 0x1c38
   2b378:	subs	r0, r0, r6
   2b37c:	mov	r2, sl
   2b380:	movt	lr, #5
   2b384:	sbcs	r0, r1, r7
   2b388:	bge	2bddc <__assert_fail@plt+0x1932c>
   2b38c:	b	2c2dc <__assert_fail@plt+0x1982c>
   2b390:	ldr	r8, [r3, #-56]	; 0xffffffc8
   2b394:	ldr	r5, [r3, #-52]	; 0xffffffcc
   2b398:	cmn	r5, #1
   2b39c:	bgt	2b248 <__assert_fail@plt+0x18798>
   2b3a0:	mov	sl, r2
   2b3a4:	str	r4, [sp, #164]	; 0xa4
   2b3a8:	mov	r4, r3
   2b3ac:	mvn	r0, #0
   2b3b0:	mvn	r1, #-2147483648	; 0x80000000
   2b3b4:	mov	r2, r6
   2b3b8:	mov	r3, r7
   2b3bc:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2b3c0:	mov	r3, r4
   2b3c4:	ldr	r4, [sp, #164]	; 0xa4
   2b3c8:	ldr	ip, [sp, #168]	; 0xa8
   2b3cc:	movw	lr, #7224	; 0x1c38
   2b3d0:	subs	r0, r8, r0
   2b3d4:	mov	r2, sl
   2b3d8:	movt	lr, #5
   2b3dc:	sbcs	r0, r5, r1
   2b3e0:	bge	2bddc <__assert_fail@plt+0x1932c>
   2b3e4:	b	2c2dc <__assert_fail@plt+0x1982c>
   2b3e8:	ldr	r0, [sp, #96]	; 0x60
   2b3ec:	sub	r5, r2, r4
   2b3f0:	str	r4, [sp, #44]	; 0x2c
   2b3f4:	str	r5, [r9, #144]	; 0x90
   2b3f8:	ldrd	r4, [r0]
   2b3fc:	subs	r4, r4, r1
   2b400:	sbc	r1, r5, r7
   2b404:	str	r4, [r0]
   2b408:	mov	r4, r6
   2b40c:	str	r1, [r0, #4]
   2b410:	ldr	r0, [sp, #100]	; 0x64
   2b414:	ldr	r8, [r0]
   2b418:	ldr	r6, [r0, #4]
   2b41c:	subs	r8, r8, r3
   2b420:	str	r6, [sp, #16]
   2b424:	sbc	r3, r6, r4
   2b428:	str	r8, [r0]
   2b42c:	str	r3, [r0, #4]
   2b430:	ldr	r0, [sp, #104]	; 0x68
   2b434:	ldr	r8, [r0]
   2b438:	ldr	r6, [r0, #4]
   2b43c:	subs	r8, r8, ip
   2b440:	str	r6, [sp, #20]
   2b444:	sbc	r6, r6, sl
   2b448:	str	r6, [sp, #24]
   2b44c:	str	r8, [r0]
   2b450:	str	r6, [r0, #4]
   2b454:	ldr	ip, [sp, #108]	; 0x6c
   2b458:	ldr	r6, [sp, #64]	; 0x40
   2b45c:	ldr	r8, [ip]
   2b460:	ldr	r0, [ip, #4]
   2b464:	subs	r8, r8, lr
   2b468:	str	r0, [sp, #28]
   2b46c:	sbc	r6, r0, r6
   2b470:	str	r6, [sp, #36]	; 0x24
   2b474:	str	r8, [ip]
   2b478:	str	r6, [ip, #4]
   2b47c:	ldr	ip, [sp, #112]	; 0x70
   2b480:	ldr	r2, [sp, #48]	; 0x30
   2b484:	ldr	r6, [ip]
   2b488:	ldr	r0, [ip, #4]
   2b48c:	subs	r8, r6, r2
   2b490:	ldr	r2, [sp, #68]	; 0x44
   2b494:	str	r0, [sp, #40]	; 0x28
   2b498:	sbc	r6, r0, r2
   2b49c:	str	r6, [sp, #48]	; 0x30
   2b4a0:	str	r8, [ip]
   2b4a4:	str	r6, [ip, #4]
   2b4a8:	mov	ip, #0
   2b4ac:	ldr	r6, [sp, #116]	; 0x74
   2b4b0:	ldr	r0, [sp, #52]	; 0x34
   2b4b4:	ldm	r6, {r2, lr}
   2b4b8:	subs	r8, r2, r0
   2b4bc:	ldr	r0, [sp, #60]	; 0x3c
   2b4c0:	mov	r2, #0
   2b4c4:	sbc	r0, lr, r0
   2b4c8:	cmn	r7, #1
   2b4cc:	str	r0, [sp, #52]	; 0x34
   2b4d0:	str	r8, [r6]
   2b4d4:	str	r0, [r6, #4]
   2b4d8:	mov	r0, #0
   2b4dc:	movwgt	r0, #1
   2b4e0:	cmn	r5, #1
   2b4e4:	mov	r6, #0
   2b4e8:	mov	r5, #0
   2b4ec:	movwgt	r2, #1
   2b4f0:	subs	r0, r2, r0
   2b4f4:	movwne	r0, #1
   2b4f8:	cmn	r1, #1
   2b4fc:	ldr	r1, [sp, #16]
   2b500:	str	r0, [sp, #12]
   2b504:	mov	r0, #0
   2b508:	movwgt	r0, #1
   2b50c:	subs	r0, r2, r0
   2b510:	ldr	r2, [sp, #36]	; 0x24
   2b514:	movwne	r0, #1
   2b518:	cmn	r4, #1
   2b51c:	mov	r4, #0
   2b520:	str	r0, [sp, #8]
   2b524:	mov	r0, #0
   2b528:	movwgt	r0, #1
   2b52c:	cmn	r1, #1
   2b530:	mov	r1, #0
   2b534:	movwgt	r1, #1
   2b538:	subs	r0, r1, r0
   2b53c:	movwne	r0, #1
   2b540:	cmn	r3, #1
   2b544:	str	r0, [sp, #16]
   2b548:	mov	r0, #0
   2b54c:	movwgt	r0, #1
   2b550:	subs	r8, r1, r0
   2b554:	ldr	r1, [sp, #20]
   2b558:	mov	r0, #0
   2b55c:	movwne	r8, #1
   2b560:	cmn	sl, #1
   2b564:	movwgt	r0, #1
   2b568:	cmn	r1, #1
   2b56c:	mov	r1, #0
   2b570:	movwgt	r1, #1
   2b574:	subs	r7, r1, r0
   2b578:	ldr	r0, [sp, #24]
   2b57c:	movwne	r7, #1
   2b580:	cmn	r0, #1
   2b584:	mov	r0, #0
   2b588:	movwgt	r0, #1
   2b58c:	subs	r3, r1, r0
   2b590:	ldr	r0, [sp, #64]	; 0x40
   2b594:	ldr	r1, [sp, #28]
   2b598:	movwne	r3, #1
   2b59c:	cmn	r0, #1
   2b5a0:	mov	r0, #0
   2b5a4:	movwgt	r0, #1
   2b5a8:	cmn	r1, #1
   2b5ac:	mov	r1, #0
   2b5b0:	movwgt	r1, #1
   2b5b4:	subs	r0, r1, r0
   2b5b8:	movwne	r0, #1
   2b5bc:	cmn	r2, #1
   2b5c0:	ldr	r2, [sp, #40]	; 0x28
   2b5c4:	movwgt	r6, #1
   2b5c8:	subs	sl, r1, r6
   2b5cc:	ldr	r1, [sp, #68]	; 0x44
   2b5d0:	movwne	sl, #1
   2b5d4:	cmn	r1, #1
   2b5d8:	mov	r1, #0
   2b5dc:	movwgt	r1, #1
   2b5e0:	cmn	r2, #1
   2b5e4:	ldr	r2, [sp, #48]	; 0x30
   2b5e8:	movwgt	r5, #1
   2b5ec:	subs	r1, r5, r1
   2b5f0:	movwne	r1, #1
   2b5f4:	cmn	r2, #1
   2b5f8:	ldr	r2, [sp, #60]	; 0x3c
   2b5fc:	movwgt	r4, #1
   2b600:	subs	r5, r5, r4
   2b604:	mov	r4, #0
   2b608:	movwne	r5, #1
   2b60c:	cmn	r2, #1
   2b610:	mov	r2, #0
   2b614:	movwgt	r4, #1
   2b618:	cmn	lr, #1
   2b61c:	movwgt	r2, #1
   2b620:	subs	lr, r2, r4
   2b624:	ldr	r4, [sp, #52]	; 0x34
   2b628:	movwne	lr, #1
   2b62c:	cmn	r4, #1
   2b630:	ldr	r4, [sp, #56]	; 0x38
   2b634:	movwgt	ip, #1
   2b638:	subs	ip, r2, ip
   2b63c:	ldr	r2, [sp, #44]	; 0x2c
   2b640:	movwne	ip, #1
   2b644:	cmp	r4, r2
   2b648:	bvs	2c2dc <__assert_fail@plt+0x1982c>
   2b64c:	ldr	r2, [sp, #12]
   2b650:	ldr	r4, [sp, #8]
   2b654:	ands	r2, r2, r4
   2b658:	bne	2c2dc <__assert_fail@plt+0x1982c>
   2b65c:	ldr	r2, [sp, #16]
   2b660:	ldr	r4, [sp, #164]	; 0xa4
   2b664:	ands	r2, r2, r8
   2b668:	bne	2c2dc <__assert_fail@plt+0x1982c>
   2b66c:	ands	r2, r7, r3
   2b670:	mov	r6, #1
   2b674:	bne	2c2f0 <__assert_fail@plt+0x19840>
   2b678:	ldr	r3, [sp, #172]	; 0xac
   2b67c:	ldr	r2, [sp, #148]	; 0x94
   2b680:	ands	r0, r0, sl
   2b684:	andseq	r0, r1, r5
   2b688:	bne	2c2f0 <__assert_fail@plt+0x19840>
   2b68c:	ands	r0, lr, ip
   2b690:	ldr	ip, [sp, #168]	; 0xa8
   2b694:	movw	lr, #7224	; 0x1c38
   2b698:	movt	lr, #5
   2b69c:	beq	2bab4 <__assert_fail@plt+0x19004>
   2b6a0:	b	2c2f0 <__assert_fail@plt+0x19840>
   2b6a4:	mov	r0, r6
   2b6a8:	mov	r1, r7
   2b6ac:	mov	r2, #100	; 0x64
   2b6b0:	mov	r3, #0
   2b6b4:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2b6b8:	umull	r2, r3, r0, r8
   2b6bc:	mla	r3, r1, r8, r3
   2b6c0:	rsb	r1, r1, r1, lsl #4
   2b6c4:	subs	r2, r6, r2
   2b6c8:	sbc	r3, r7, r3
   2b6cc:	mov	r7, #60	; 0x3c
   2b6d0:	umull	r0, r7, r0, r7
   2b6d4:	add	r1, r7, r1, lsl #2
   2b6d8:	adds	r0, r0, r2
   2b6dc:	mov	r2, #1
   2b6e0:	adc	r1, r1, r3
   2b6e4:	b	2bc00 <__assert_fail@plt+0x19150>
   2b6e8:	mov	r0, r7
   2b6ec:	mov	r1, r5
   2b6f0:	mov	r2, #100	; 0x64
   2b6f4:	mov	r3, #0
   2b6f8:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2b6fc:	umull	r2, r3, r0, r6
   2b700:	mla	r3, r1, r6, r3
   2b704:	rsb	r1, r1, r1, lsl #4
   2b708:	subs	r2, r7, r2
   2b70c:	mov	r7, #60	; 0x3c
   2b710:	umull	r0, r7, r0, r7
   2b714:	sbc	r3, r5, r3
   2b718:	add	r1, r7, r1, lsl #2
   2b71c:	adds	r0, r0, r2
   2b720:	mov	r7, #1
   2b724:	adc	r1, r1, r3
   2b728:	b	2bd8c <__assert_fail@plt+0x192dc>
   2b72c:	mov	r1, r4
   2b730:	mov	r2, #100	; 0x64
   2b734:	mov	r3, #0
   2b738:	str	r0, [sp, #68]	; 0x44
   2b73c:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2b740:	mov	lr, #100	; 0x64
   2b744:	mov	r2, #0
   2b748:	umull	ip, r3, r0, lr
   2b74c:	mla	lr, r1, lr, r3
   2b750:	ldr	r3, [sp, #68]	; 0x44
   2b754:	subs	ip, r3, ip
   2b758:	sbc	r3, r4, lr
   2b75c:	ldr	r4, [sp, #136]	; 0x88
   2b760:	strd	r0, [r4]
   2b764:	ldr	r0, [sp, #132]	; 0x84
   2b768:	str	ip, [r0]
   2b76c:	str	r3, [r0, #4]
   2b770:	mov	r0, #2
   2b774:	str	r2, [r9, #88]	; 0x58
   2b778:	str	r2, [r9, #92]	; 0x5c
   2b77c:	ldr	r3, [sp, #172]	; 0xac
   2b780:	str	r0, [r9, #28]
   2b784:	ldr	r0, [r3, #4]
   2b788:	ldr	r1, [r3]
   2b78c:	ldr	r3, [r6, #8]
   2b790:	ldr	r2, [r8, #4]
   2b794:	ldm	sl, {r4, lr}
   2b798:	ldm	r5, {sl, ip}
   2b79c:	ldr	r8, [r8]
   2b7a0:	ldr	r5, [r6]
   2b7a4:	str	lr, [sp, #48]	; 0x30
   2b7a8:	str	ip, [sp, #36]	; 0x24
   2b7ac:	str	r0, [sp, #68]	; 0x44
   2b7b0:	ldr	r0, [r7, #4]
   2b7b4:	str	r1, [sp, #24]
   2b7b8:	ldr	r1, [r7]
   2b7bc:	str	r2, [sp, #28]
   2b7c0:	str	r0, [sp, #64]	; 0x40
   2b7c4:	ldr	r0, [r9, #144]	; 0x90
   2b7c8:	str	r1, [sp, #52]	; 0x34
   2b7cc:	ldr	r1, [r6, #4]
   2b7d0:	str	r0, [sp, #60]	; 0x3c
   2b7d4:	add	r0, r0, r3
   2b7d8:	str	r1, [sp, #20]
   2b7dc:	str	r0, [sp, #56]	; 0x38
   2b7e0:	str	r0, [r9, #144]	; 0x90
   2b7e4:	ldr	r0, [sp, #96]	; 0x60
   2b7e8:	ldrd	r6, [r0]
   2b7ec:	adds	r6, r6, r5
   2b7f0:	adc	r3, r7, r1
   2b7f4:	str	r6, [r0]
   2b7f8:	str	r3, [r0, #4]
   2b7fc:	ldr	r0, [sp, #100]	; 0x64
   2b800:	ldr	r6, [r0]
   2b804:	ldr	r5, [r0, #4]
   2b808:	adds	r8, r6, r8
   2b80c:	adc	r6, r5, r2
   2b810:	str	r8, [r0]
   2b814:	str	r6, [r0, #4]
   2b818:	ldr	r1, [sp, #104]	; 0x68
   2b81c:	ldm	r1, {r0, r8}
   2b820:	adds	r0, r0, sl
   2b824:	adc	sl, r8, ip
   2b828:	stm	r1, {r0, sl}
   2b82c:	mov	ip, #0
   2b830:	ldr	r1, [sp, #108]	; 0x6c
   2b834:	ldm	r1, {r0, r2}
   2b838:	str	r2, [sp, #32]
   2b83c:	adds	r4, r0, r4
   2b840:	adc	r0, r2, lr
   2b844:	str	r0, [sp, #40]	; 0x28
   2b848:	str	r4, [r1]
   2b84c:	str	r0, [r1, #4]
   2b850:	ldr	r0, [sp, #112]	; 0x70
   2b854:	ldr	r2, [sp, #52]	; 0x34
   2b858:	ldr	r4, [r0]
   2b85c:	ldr	r1, [r0, #4]
   2b860:	adds	r4, r4, r2
   2b864:	ldr	r2, [sp, #64]	; 0x40
   2b868:	str	r1, [sp, #44]	; 0x2c
   2b86c:	str	r4, [r0]
   2b870:	adc	r2, r1, r2
   2b874:	str	r2, [r0, #4]
   2b878:	ldr	lr, [sp, #116]	; 0x74
   2b87c:	ldr	r0, [sp, #24]
   2b880:	ldr	r4, [lr]
   2b884:	ldr	r1, [lr, #4]
   2b888:	adds	r4, r4, r0
   2b88c:	ldr	r0, [sp, #68]	; 0x44
   2b890:	str	r1, [sp, #52]	; 0x34
   2b894:	str	r4, [lr]
   2b898:	adc	r0, r1, r0
   2b89c:	cmn	r7, #1
   2b8a0:	mov	r1, #0
   2b8a4:	str	r0, [lr, #4]
   2b8a8:	mov	r4, r0
   2b8ac:	mov	r0, #0
   2b8b0:	movwgt	r0, #1
   2b8b4:	cmn	r3, #1
   2b8b8:	mov	r3, #0
   2b8bc:	mov	lr, #0
   2b8c0:	movwgt	r1, #1
   2b8c4:	str	r0, [sp, #24]
   2b8c8:	subs	r0, r0, r1
   2b8cc:	mov	r1, #0
   2b8d0:	movwne	r0, #1
   2b8d4:	str	r0, [sp, #16]
   2b8d8:	ldr	r0, [sp, #20]
   2b8dc:	cmn	r0, #1
   2b8e0:	mov	r0, #0
   2b8e4:	movwgt	r0, #1
   2b8e8:	cmn	r5, #1
   2b8ec:	mov	r5, #0
   2b8f0:	str	r0, [sp, #20]
   2b8f4:	mov	r0, #0
   2b8f8:	movwgt	r0, #1
   2b8fc:	cmn	r6, #1
   2b900:	mov	r6, #0
   2b904:	movwgt	r1, #1
   2b908:	str	r0, [sp, #12]
   2b90c:	subs	r0, r0, r1
   2b910:	mov	r1, #0
   2b914:	movwne	r0, #1
   2b918:	str	r0, [sp, #8]
   2b91c:	ldr	r0, [sp, #28]
   2b920:	cmn	r0, #1
   2b924:	mov	r0, #0
   2b928:	movwgt	r0, #1
   2b92c:	cmn	r8, #1
   2b930:	mov	r8, #0
   2b934:	movwgt	r8, #1
   2b938:	cmn	sl, #1
   2b93c:	str	r0, [sp, #28]
   2b940:	movwgt	r1, #1
   2b944:	subs	r0, r8, r1
   2b948:	ldr	r1, [sp, #64]	; 0x40
   2b94c:	movwne	r0, #1
   2b950:	str	r0, [sp, #4]
   2b954:	ldr	r0, [sp, #36]	; 0x24
   2b958:	cmn	r0, #1
   2b95c:	ldr	r0, [sp, #32]
   2b960:	movwgt	r5, #1
   2b964:	cmn	r0, #1
   2b968:	ldr	r0, [sp, #40]	; 0x28
   2b96c:	movwgt	r3, #1
   2b970:	cmn	r0, #1
   2b974:	mov	r0, #0
   2b978:	movwgt	r0, #1
   2b97c:	subs	r0, r3, r0
   2b980:	movwne	r0, #1
   2b984:	str	r0, [sp, #40]	; 0x28
   2b988:	ldr	r0, [sp, #48]	; 0x30
   2b98c:	cmn	r0, #1
   2b990:	ldr	r0, [sp, #44]	; 0x2c
   2b994:	movwgt	lr, #1
   2b998:	cmn	r0, #1
   2b99c:	mov	r0, #0
   2b9a0:	movwgt	r0, #1
   2b9a4:	cmn	r2, #1
   2b9a8:	mov	r2, #0
   2b9ac:	movwgt	r2, #1
   2b9b0:	subs	r7, r0, r2
   2b9b4:	mov	r2, #0
   2b9b8:	movwne	r7, #1
   2b9bc:	cmn	r1, #1
   2b9c0:	ldr	r1, [sp, #52]	; 0x34
   2b9c4:	movwgt	r2, #1
   2b9c8:	cmn	r1, #1
   2b9cc:	movwgt	r6, #1
   2b9d0:	cmn	r4, #1
   2b9d4:	mov	r4, #0
   2b9d8:	movwgt	r4, #1
   2b9dc:	subs	sl, r6, r4
   2b9e0:	ldr	r4, [sp, #68]	; 0x44
   2b9e4:	movwne	sl, #1
   2b9e8:	cmn	r4, #1
   2b9ec:	ldr	r4, [sp, #60]	; 0x3c
   2b9f0:	movwgt	ip, #1
   2b9f4:	str	ip, [sp, #68]	; 0x44
   2b9f8:	ldr	ip, [sp, #56]	; 0x38
   2b9fc:	cmp	ip, r4
   2ba00:	bvs	2c2dc <__assert_fail@plt+0x1982c>
   2ba04:	ldr	r4, [sp, #24]
   2ba08:	ldr	r1, [sp, #20]
   2ba0c:	sub	r4, r4, r1
   2ba10:	ldr	r1, [sp, #16]
   2ba14:	clz	r4, r4
   2ba18:	lsr	r4, r4, #5
   2ba1c:	ands	r4, r4, r1
   2ba20:	ldreq	r1, [sp, #12]
   2ba24:	ldreq	r4, [sp, #28]
   2ba28:	subeq	r4, r1, r4
   2ba2c:	ldreq	r1, [sp, #8]
   2ba30:	clzeq	r4, r4
   2ba34:	lsreq	r4, r4, #5
   2ba38:	andseq	r4, r4, r1
   2ba3c:	bne	2c2dc <__assert_fail@plt+0x1982c>
   2ba40:	ldr	r1, [sp, #4]
   2ba44:	sub	r5, r8, r5
   2ba48:	ldr	r4, [sp, #164]	; 0xa4
   2ba4c:	clz	r5, r5
   2ba50:	lsr	r5, r5, #5
   2ba54:	ands	r5, r5, r1
   2ba58:	ldreq	r1, [sp, #40]	; 0x28
   2ba5c:	subeq	r3, r3, lr
   2ba60:	clzeq	r3, r3
   2ba64:	lsreq	r3, r3, #5
   2ba68:	andseq	r1, r3, r1
   2ba6c:	bne	2c2dc <__assert_fail@plt+0x1982c>
   2ba70:	sub	r0, r0, r2
   2ba74:	clz	r0, r0
   2ba78:	lsr	r0, r0, #5
   2ba7c:	ands	r0, r0, r7
   2ba80:	bne	2c2dc <__assert_fail@plt+0x1982c>
   2ba84:	ldr	r0, [sp, #68]	; 0x44
   2ba88:	sub	r0, r6, r0
   2ba8c:	ldr	ip, [sp, #168]	; 0xa8
   2ba90:	ldr	r3, [sp, #172]	; 0xac
   2ba94:	ldr	r2, [sp, #148]	; 0x94
   2ba98:	clz	r0, r0
   2ba9c:	movw	lr, #7224	; 0x1c38
   2baa0:	mov	r6, #1
   2baa4:	lsr	r0, r0, #5
   2baa8:	movt	lr, #5
   2baac:	ands	r0, r0, sl
   2bab0:	bne	2c2f0 <__assert_fail@plt+0x19840>
   2bab4:	mov	r0, #1
   2bab8:	strb	r0, [r9, #153]	; 0x99
   2babc:	b	2be48 <__assert_fail@plt+0x19398>
   2bac0:	mov	r0, r7
   2bac4:	mov	r1, sl
   2bac8:	mov	r2, #100	; 0x64
   2bacc:	mov	r3, #0
   2bad0:	mov	r6, #100	; 0x64
   2bad4:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2bad8:	umull	r2, r3, r0, r6
   2badc:	ldr	ip, [sp, #168]	; 0xa8
   2bae0:	movw	lr, #7224	; 0x1c38
   2bae4:	movt	lr, #5
   2bae8:	mla	r3, r1, r6, r3
   2baec:	subs	r2, r7, r2
   2baf0:	sbc	r3, sl, r3
   2baf4:	ldr	r7, [sp, #136]	; 0x88
   2baf8:	strd	r0, [r7]
   2bafc:	ldr	r0, [sp, #132]	; 0x84
   2bb00:	strd	r2, [r0]
   2bb04:	mov	r2, r4
   2bb08:	mov	r0, #2
   2bb0c:	str	r8, [r9, #88]	; 0x58
   2bb10:	str	r8, [r9, #92]	; 0x5c
   2bb14:	mov	r3, r5
   2bb18:	ldr	r4, [sp, #164]	; 0xa4
   2bb1c:	str	r0, [r9, #28]
   2bb20:	b	2be48 <__assert_fail@plt+0x19398>
   2bb24:	and	r0, r6, r7
   2bb28:	cmn	r0, #1
   2bb2c:	beq	2bb58 <__assert_fail@plt+0x190a8>
   2bb30:	mov	r0, #0
   2bb34:	mov	r1, #-2147483648	; 0x80000000
   2bb38:	mov	r2, r6
   2bb3c:	mov	r3, r7
   2bb40:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2bb44:	subs	r0, r0, #60	; 0x3c
   2bb48:	mov	sl, #1
   2bb4c:	sbcs	r0, r1, #0
   2bb50:	movge	sl, #0
   2bb54:	b	2bb5c <__assert_fail@plt+0x190ac>
   2bb58:	mov	sl, #0
   2bb5c:	mov	r0, #60	; 0x3c
   2bb60:	cmn	r5, #1
   2bb64:	mov	r4, #0
   2bb68:	mov	r2, #0
   2bb6c:	mov	lr, r8
   2bb70:	mov	r3, #0
   2bb74:	umull	ip, r1, r6, r0
   2bb78:	rsb	r6, r7, r7, lsl #4
   2bb7c:	movwgt	r4, #1
   2bb80:	add	r6, r1, r6, lsl #2
   2bb84:	cmn	r6, #1
   2bb88:	movwgt	r2, #1
   2bb8c:	subs	r7, r2, r4
   2bb90:	movwne	r7, #1
   2bb94:	subs	r0, ip, r8
   2bb98:	mov	r8, #0
   2bb9c:	sbc	r1, r6, r5
   2bba0:	str	r0, [sp, #64]	; 0x40
   2bba4:	cmn	r1, #1
   2bba8:	movwgt	r8, #1
   2bbac:	subs	r0, r2, r8
   2bbb0:	movwne	r0, #1
   2bbb4:	and	r7, r7, r0
   2bbb8:	adds	r0, ip, lr
   2bbbc:	adc	r6, r6, r5
   2bbc0:	ldr	r5, [sp, #68]	; 0x44
   2bbc4:	cmn	r6, #1
   2bbc8:	movwgt	r3, #1
   2bbcc:	subs	r3, r2, r3
   2bbd0:	sub	r2, r2, r4
   2bbd4:	ldr	r4, [sp, #164]	; 0xa4
   2bbd8:	clz	r2, r2
   2bbdc:	movwne	r3, #1
   2bbe0:	ands	r5, r5, #1
   2bbe4:	lsr	r2, r2, #5
   2bbe8:	moveq	r1, r6
   2bbec:	andeq	r7, r2, r3
   2bbf0:	ldr	r3, [sp, #64]	; 0x40
   2bbf4:	orr	r2, sl, r7
   2bbf8:	eor	r2, r2, #1
   2bbfc:	movne	r0, r3
   2bc00:	adds	r3, r0, #1440	; 0x5a0
   2bc04:	mov	r6, #1
   2bc08:	adc	r1, r1, #0
   2bc0c:	cmp	r2, #0
   2bc10:	beq	2c2f0 <__assert_fail@plt+0x19840>
   2bc14:	rsbs	r2, r3, #2880	; 0xb40
   2bc18:	rscs	r1, r1, #0
   2bc1c:	bcc	2c2f0 <__assert_fail@plt+0x19840>
   2bc20:	rsb	r0, r0, r0, lsl #4
   2bc24:	mov	r8, r4
   2bc28:	mov	r3, #0
   2bc2c:	mov	r2, #0
   2bc30:	lsl	r1, r0, #2
   2bc34:	str	r1, [r9, #24]
   2bc38:	sbfx	r1, r0, #29, #1
   2bc3c:	ldr	r7, [sp, #172]	; 0xac
   2bc40:	cmn	r1, #1
   2bc44:	movwgt	r3, #1
   2bc48:	ldrd	r4, [r7, #-112]	; 0xffffff90
   2bc4c:	mov	r7, #0
   2bc50:	adds	r0, r4, r0, lsl #2
   2bc54:	adc	r1, r1, r5
   2bc58:	cmn	r1, #1
   2bc5c:	str	r0, [r9, #24]
   2bc60:	movwgt	r7, #1
   2bc64:	subs	r7, r3, r7
   2bc68:	movwne	r7, #1
   2bc6c:	cmn	r5, #1
   2bc70:	movwgt	r2, #1
   2bc74:	sub	r2, r3, r2
   2bc78:	clz	r2, r2
   2bc7c:	lsr	r2, r2, #5
   2bc80:	tst	r2, r7
   2bc84:	bne	2c2f0 <__assert_fail@plt+0x19840>
   2bc88:	asr	r2, r0, #31
   2bc8c:	ldr	ip, [sp, #168]	; 0xa8
   2bc90:	ldr	r3, [sp, #172]	; 0xac
   2bc94:	movw	lr, #7224	; 0x1c38
   2bc98:	eor	r0, r0, r0
   2bc9c:	mov	r4, r8
   2bca0:	eor	r1, r1, r2
   2bca4:	ldr	r2, [sp, #148]	; 0x94
   2bca8:	movt	lr, #5
   2bcac:	orrs	r0, r0, r1
   2bcb0:	beq	2be48 <__assert_fail@plt+0x19398>
   2bcb4:	b	2c2f0 <__assert_fail@plt+0x19840>
   2bcb8:	and	r0, r7, r5
   2bcbc:	cmn	r0, #1
   2bcc0:	beq	2bcec <__assert_fail@plt+0x1923c>
   2bcc4:	mov	r0, #0
   2bcc8:	mov	r1, #-2147483648	; 0x80000000
   2bccc:	mov	r2, r7
   2bcd0:	mov	r3, r5
   2bcd4:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2bcd8:	subs	r0, r0, #60	; 0x3c
   2bcdc:	mov	r2, #1
   2bce0:	sbcs	r0, r1, #0
   2bce4:	movge	r2, #0
   2bce8:	b	2bcf0 <__assert_fail@plt+0x19240>
   2bcec:	mov	r2, #0
   2bcf0:	mov	r0, #60	; 0x3c
   2bcf4:	str	r2, [sp, #64]	; 0x40
   2bcf8:	rsb	r2, r5, r5, lsl #4
   2bcfc:	cmn	sl, #1
   2bd00:	mov	r6, #0
   2bd04:	mov	ip, #0
   2bd08:	mov	r3, #0
   2bd0c:	umull	lr, r1, r7, r0
   2bd10:	movwgt	r6, #1
   2bd14:	mov	r7, #0
   2bd18:	add	r2, r1, r2, lsl #2
   2bd1c:	cmn	r2, #1
   2bd20:	movwgt	r7, #1
   2bd24:	subs	r0, r7, r6
   2bd28:	movwne	r0, #1
   2bd2c:	subs	r8, lr, r4
   2bd30:	sbc	r1, r2, sl
   2bd34:	cmn	r1, #1
   2bd38:	movwgt	ip, #1
   2bd3c:	subs	r5, r7, ip
   2bd40:	movwne	r5, #1
   2bd44:	and	r5, r0, r5
   2bd48:	adds	r0, lr, r4
   2bd4c:	adc	r2, r2, sl
   2bd50:	cmn	r2, #1
   2bd54:	movwgt	r3, #1
   2bd58:	subs	r3, r7, r3
   2bd5c:	sub	r7, r7, r6
   2bd60:	ldr	r6, [sp, #68]	; 0x44
   2bd64:	clz	r7, r7
   2bd68:	movwne	r3, #1
   2bd6c:	lsr	r7, r7, #5
   2bd70:	ands	r6, r6, #1
   2bd74:	andeq	r5, r7, r3
   2bd78:	ldr	r3, [sp, #64]	; 0x40
   2bd7c:	moveq	r1, r2
   2bd80:	movne	r0, r8
   2bd84:	orr	r3, r3, r5
   2bd88:	eor	r7, r3, #1
   2bd8c:	ldr	ip, [sp, #168]	; 0xa8
   2bd90:	movw	lr, #7224	; 0x1c38
   2bd94:	adds	r3, r0, #1440	; 0x5a0
   2bd98:	mov	r6, #1
   2bd9c:	movt	lr, #5
   2bda0:	adc	r1, r1, #0
   2bda4:	cmp	r7, #0
   2bda8:	beq	2c2f0 <__assert_fail@plt+0x19840>
   2bdac:	rsbs	r2, r3, #2880	; 0xb40
   2bdb0:	ldr	r3, [sp, #172]	; 0xac
   2bdb4:	ldr	r2, [sp, #148]	; 0x94
   2bdb8:	ldr	r4, [sp, #164]	; 0xa4
   2bdbc:	rscs	r1, r1, #0
   2bdc0:	bcc	2c2f0 <__assert_fail@plt+0x19840>
   2bdc4:	rsb	r0, r0, r0, lsl #4
   2bdc8:	lsl	r0, r0, #2
   2bdcc:	str	r0, [r9, #24]
   2bdd0:	b	2be48 <__assert_fail@plt+0x19398>
   2bdd4:	mvn	r8, #0
   2bdd8:	mvn	r5, #0
   2bddc:	umull	r1, r0, r8, r6
   2bde0:	mla	r0, r8, r7, r0
   2bde4:	mla	r0, r5, r6, r0
   2bde8:	str	r1, [sp, #224]	; 0xe0
   2bdec:	str	r0, [sp, #216]	; 0xd8
   2bdf0:	mov	r0, #0
   2bdf4:	str	r0, [sp, #228]	; 0xe4
   2bdf8:	mov	r0, #0
   2bdfc:	str	r0, [sp, #220]	; 0xdc
   2be00:	mov	r0, #0
   2be04:	str	r0, [sp, #212]	; 0xd4
   2be08:	mov	r0, #0
   2be0c:	str	r0, [sp, #208]	; 0xd0
   2be10:	mov	r0, #0
   2be14:	str	r0, [sp, #204]	; 0xcc
   2be18:	mov	r0, #0
   2be1c:	str	r0, [sp, #196]	; 0xc4
   2be20:	mov	r0, #0
   2be24:	str	r0, [sp, #200]	; 0xc8
   2be28:	mov	r0, #0
   2be2c:	str	r0, [sp, #192]	; 0xc0
   2be30:	mov	r0, #0
   2be34:	str	r0, [sp, #188]	; 0xbc
   2be38:	mov	r0, #0
   2be3c:	str	r0, [sp, #236]	; 0xec
   2be40:	mov	r0, #0
   2be44:	str	r0, [sp, #232]	; 0xe8
   2be48:	sub	r0, r4, r4, lsl #3
   2be4c:	ldr	r7, [sp, #184]	; 0xb8
   2be50:	add	r3, r3, r0, lsl #3
   2be54:	ldr	r0, [sp, #236]	; 0xec
   2be58:	sub	r7, r7, r4
   2be5c:	sub	r4, fp, #112	; 0x70
   2be60:	str	r0, [r3, #56]!	; 0x38
   2be64:	ldr	r0, [sp, #232]	; 0xe8
   2be68:	str	r0, [r3, #4]
   2be6c:	ldr	r0, [sp, #228]	; 0xe4
   2be70:	str	r0, [r3, #8]
   2be74:	ldr	r0, [sp, #220]	; 0xdc
   2be78:	str	r0, [r3, #12]
   2be7c:	ldr	r0, [sp, #224]	; 0xe0
   2be80:	str	r0, [r3, #16]
   2be84:	ldr	r0, [sp, #216]	; 0xd8
   2be88:	str	r0, [r3, #20]
   2be8c:	ldr	r0, [sp, #212]	; 0xd4
   2be90:	str	r0, [r3, #24]
   2be94:	ldr	r0, [sp, #208]	; 0xd0
   2be98:	str	r0, [r3, #28]
   2be9c:	ldr	r0, [sp, #204]	; 0xcc
   2bea0:	str	r0, [r3, #32]
   2bea4:	ldr	r0, [sp, #196]	; 0xc4
   2bea8:	str	r0, [r3, #36]	; 0x24
   2beac:	ldr	r0, [sp, #200]	; 0xc8
   2beb0:	str	r0, [r3, #40]	; 0x28
   2beb4:	ldr	r0, [sp, #192]	; 0xc0
   2beb8:	str	r0, [r3, #44]	; 0x2c
   2bebc:	ldr	r0, [sp, #188]	; 0xbc
   2bec0:	str	r0, [r3, #48]	; 0x30
   2bec4:	ldr	r0, [sp, #180]	; 0xb4
   2bec8:	str	r0, [r3, #52]	; 0x34
   2becc:	add	r0, r4, r7, lsl #1
   2bed0:	ldrsh	r1, [r0]
   2bed4:	movw	r0, #8048	; 0x1f70
   2bed8:	movt	r0, #5
   2bedc:	ldrb	r0, [r0, r2]
   2bee0:	movw	r2, #8140	; 0x1fcc
   2bee4:	movt	r2, #5
   2bee8:	sub	r0, r0, #28
   2beec:	add	r2, r2, r0
   2bef0:	ldrsb	r2, [r2]
   2bef4:	add	r2, r1, r2
   2bef8:	cmp	r2, #112	; 0x70
   2befc:	bhi	28360 <__assert_fail@plt+0x158b0>
   2bf00:	mov	r5, r3
   2bf04:	movw	r3, #7616	; 0x1dc0
   2bf08:	movt	r3, #5
   2bf0c:	add	r3, r3, r2
   2bf10:	ldrsb	r3, [r3]
   2bf14:	cmp	r3, r1
   2bf18:	mov	r3, r5
   2bf1c:	bne	28360 <__assert_fail@plt+0x158b0>
   2bf20:	movw	r0, #7729	; 0x1e31
   2bf24:	movt	r0, #5
   2bf28:	ldrb	r8, [r0, r2]
   2bf2c:	b	28370 <__assert_fail@plt+0x158c0>
   2bf30:	mov	r0, #1
   2bf34:	strb	r0, [r9, #180]	; 0xb4
   2bf38:	ldr	r0, [sp, #92]	; 0x5c
   2bf3c:	vst1.64	{d16-d17}, [r0]
   2bf40:	ldr	r0, [sp, #84]	; 0x54
   2bf44:	str	lr, [r0]
   2bf48:	str	ip, [r0, #4]
   2bf4c:	b	2b784 <__assert_fail@plt+0x18cd4>
   2bf50:	mov	r0, #1
   2bf54:	strb	r0, [r9, #180]	; 0xb4
   2bf58:	ldr	r0, [sp, #92]	; 0x5c
   2bf5c:	vst1.64	{d16-d17}, [r0]
   2bf60:	ldr	r0, [sp, #84]	; 0x54
   2bf64:	strd	r6, [r0]
   2bf68:	b	2be48 <__assert_fail@plt+0x19398>
   2bf6c:	ldr	r0, [sp, #236]	; 0xec
   2bf70:	b	29924 <__assert_fail@plt+0x16e74>
   2bf74:	ldr	r0, [sp, #232]	; 0xe8
   2bf78:	b	29924 <__assert_fail@plt+0x16e74>
   2bf7c:	ldr	r0, [sp, #228]	; 0xe4
   2bf80:	b	29924 <__assert_fail@plt+0x16e74>
   2bf84:	ldr	r0, [sp, #224]	; 0xe0
   2bf88:	b	29924 <__assert_fail@plt+0x16e74>
   2bf8c:	ldr	r0, [sp, #220]	; 0xdc
   2bf90:	b	29924 <__assert_fail@plt+0x16e74>
   2bf94:	ldr	r0, [sp, #216]	; 0xd8
   2bf98:	b	29924 <__assert_fail@plt+0x16e74>
   2bf9c:	ldr	r0, [sp, #212]	; 0xd4
   2bfa0:	b	29924 <__assert_fail@plt+0x16e74>
   2bfa4:	ldr	r0, [sp, #208]	; 0xd0
   2bfa8:	b	29924 <__assert_fail@plt+0x16e74>
   2bfac:	ldr	r0, [sp, #204]	; 0xcc
   2bfb0:	b	29924 <__assert_fail@plt+0x16e74>
   2bfb4:	movw	r0, #8696	; 0x21f8
   2bfb8:	movt	r0, #5
   2bfbc:	b	2942c <__assert_fail@plt+0x1697c>
   2bfc0:	movw	r0, #8696	; 0x21f8
   2bfc4:	movt	r0, #5
   2bfc8:	add	r0, r0, #24
   2bfcc:	b	29924 <__assert_fail@plt+0x16e74>
   2bfd0:	movw	r0, #8696	; 0x21f8
   2bfd4:	movt	r0, #5
   2bfd8:	add	r0, r0, #36	; 0x24
   2bfdc:	b	29924 <__assert_fail@plt+0x16e74>
   2bfe0:	movw	r0, #8696	; 0x21f8
   2bfe4:	movt	r0, #5
   2bfe8:	add	r0, r0, #48	; 0x30
   2bfec:	b	29924 <__assert_fail@plt+0x16e74>
   2bff0:	movw	r0, #8696	; 0x21f8
   2bff4:	movt	r0, #5
   2bff8:	add	r0, r0, #60	; 0x3c
   2bffc:	b	29924 <__assert_fail@plt+0x16e74>
   2c000:	movw	r0, #8696	; 0x21f8
   2c004:	movt	r0, #5
   2c008:	add	r0, r0, #72	; 0x48
   2c00c:	b	29924 <__assert_fail@plt+0x16e74>
   2c010:	movw	r0, #8696	; 0x21f8
   2c014:	movt	r0, #5
   2c018:	add	r0, r0, #84	; 0x54
   2c01c:	b	29924 <__assert_fail@plt+0x16e74>
   2c020:	movw	r0, #8696	; 0x21f8
   2c024:	movt	r0, #5
   2c028:	add	r0, r0, #96	; 0x60
   2c02c:	b	29924 <__assert_fail@plt+0x16e74>
   2c030:	movw	r0, #8696	; 0x21f8
   2c034:	movt	r0, #5
   2c038:	add	r0, r0, #108	; 0x6c
   2c03c:	b	29924 <__assert_fail@plt+0x16e74>
   2c040:	movw	r0, #8696	; 0x21f8
   2c044:	movt	r0, #5
   2c048:	add	r0, r0, #120	; 0x78
   2c04c:	b	29924 <__assert_fail@plt+0x16e74>
   2c050:	movw	r0, #8696	; 0x21f8
   2c054:	movt	r0, #5
   2c058:	add	r0, r0, #132	; 0x84
   2c05c:	b	29924 <__assert_fail@plt+0x16e74>
   2c060:	movw	r0, #8696	; 0x21f8
   2c064:	movt	r0, #5
   2c068:	add	r0, r0, #144	; 0x90
   2c06c:	b	29924 <__assert_fail@plt+0x16e74>
   2c070:	movw	r0, #8696	; 0x21f8
   2c074:	movt	r0, #5
   2c078:	add	r0, r0, #156	; 0x9c
   2c07c:	b	29924 <__assert_fail@plt+0x16e74>
   2c080:	movw	r0, #8696	; 0x21f8
   2c084:	movt	r0, #5
   2c088:	add	r0, r0, #168	; 0xa8
   2c08c:	b	29924 <__assert_fail@plt+0x16e74>
   2c090:	movw	r0, #8696	; 0x21f8
   2c094:	movt	r0, #5
   2c098:	add	r0, r0, #180	; 0xb4
   2c09c:	b	29924 <__assert_fail@plt+0x16e74>
   2c0a0:	movw	r0, #8696	; 0x21f8
   2c0a4:	movt	r0, #5
   2c0a8:	add	r0, r0, #192	; 0xc0
   2c0ac:	b	29924 <__assert_fail@plt+0x16e74>
   2c0b0:	movw	r0, #8696	; 0x21f8
   2c0b4:	movt	r0, #5
   2c0b8:	add	r0, r0, #204	; 0xcc
   2c0bc:	b	29924 <__assert_fail@plt+0x16e74>
   2c0c0:	movw	r0, #8696	; 0x21f8
   2c0c4:	movt	r0, #5
   2c0c8:	add	r0, r0, #216	; 0xd8
   2c0cc:	b	29924 <__assert_fail@plt+0x16e74>
   2c0d0:	movw	r0, #8696	; 0x21f8
   2c0d4:	movt	r0, #5
   2c0d8:	add	r0, r0, #228	; 0xe4
   2c0dc:	b	29924 <__assert_fail@plt+0x16e74>
   2c0e0:	cmp	r2, #0
   2c0e4:	sub	r4, fp, #72	; 0x48
   2c0e8:	beq	2c16c <__assert_fail@plt+0x196bc>
   2c0ec:	ldrb	r3, [fp, #-71]	; 0xffffffb9
   2c0f0:	sub	r0, r2, #46	; 0x2e
   2c0f4:	cmp	r2, #46	; 0x2e
   2c0f8:	ldr	r1, [sp, #76]	; 0x4c
   2c0fc:	clz	r0, r0
   2c100:	moveq	r1, r4
   2c104:	lsr	r0, r0, #5
   2c108:	cmp	r3, #0
   2c10c:	strb	r3, [r1]
   2c110:	beq	2c144 <__assert_fail@plt+0x19694>
   2c114:	ldr	r2, [sp, #76]	; 0x4c
   2c118:	ldrb	r3, [r2]
   2c11c:	ldrb	r6, [r2, #1]!
   2c120:	cmp	r3, #46	; 0x2e
   2c124:	sub	r3, r3, #46	; 0x2e
   2c128:	clz	r3, r3
   2c12c:	addne	r1, r1, #1
   2c130:	cmp	r6, #0
   2c134:	lsr	r3, r3, #5
   2c138:	strb	r6, [r1]
   2c13c:	orr	r0, r0, r3
   2c140:	bne	2c118 <__assert_fail@plt+0x19668>
   2c144:	mov	r6, #63	; 0x3f
   2c148:	tst	r0, #1
   2c14c:	beq	29944 <__assert_fail@plt+0x16e94>
   2c150:	sub	r4, fp, #72	; 0x48
   2c154:	mov	r0, r9
   2c158:	mov	r1, r4
   2c15c:	bl	2d4f8 <__assert_fail@plt+0x1aa48>
   2c160:	cmp	r0, #0
   2c164:	bne	29924 <__assert_fail@plt+0x16e74>
   2c168:	b	29944 <__assert_fail@plt+0x16e94>
   2c16c:	mov	r6, #63	; 0x3f
   2c170:	b	29944 <__assert_fail@plt+0x16e94>
   2c174:	movw	r0, #8948	; 0x22f4
   2c178:	movt	r0, #5
   2c17c:	add	r0, r0, #24
   2c180:	b	29924 <__assert_fail@plt+0x16e74>
   2c184:	movw	r0, #8948	; 0x22f4
   2c188:	movt	r0, #5
   2c18c:	add	r0, r0, #36	; 0x24
   2c190:	b	29924 <__assert_fail@plt+0x16e74>
   2c194:	movw	r0, #8948	; 0x22f4
   2c198:	movt	r0, #5
   2c19c:	add	r0, r0, #48	; 0x30
   2c1a0:	b	29924 <__assert_fail@plt+0x16e74>
   2c1a4:	movw	r0, #8948	; 0x22f4
   2c1a8:	movt	r0, #5
   2c1ac:	add	r0, r0, #60	; 0x3c
   2c1b0:	b	29924 <__assert_fail@plt+0x16e74>
   2c1b4:	movw	r0, #8948	; 0x22f4
   2c1b8:	movt	r0, #5
   2c1bc:	add	r0, r0, #72	; 0x48
   2c1c0:	b	29924 <__assert_fail@plt+0x16e74>
   2c1c4:	movw	r0, #8948	; 0x22f4
   2c1c8:	movt	r0, #5
   2c1cc:	add	r0, r0, #84	; 0x54
   2c1d0:	b	29924 <__assert_fail@plt+0x16e74>
   2c1d4:	movw	r0, #8948	; 0x22f4
   2c1d8:	movt	r0, #5
   2c1dc:	add	r0, r0, #96	; 0x60
   2c1e0:	b	29924 <__assert_fail@plt+0x16e74>
   2c1e4:	movw	r0, #8948	; 0x22f4
   2c1e8:	movt	r0, #5
   2c1ec:	add	r0, r0, #108	; 0x6c
   2c1f0:	b	29924 <__assert_fail@plt+0x16e74>
   2c1f4:	movw	r0, #8948	; 0x22f4
   2c1f8:	movt	r0, #5
   2c1fc:	add	r0, r0, #120	; 0x78
   2c200:	b	29924 <__assert_fail@plt+0x16e74>
   2c204:	movw	r0, #8948	; 0x22f4
   2c208:	movt	r0, #5
   2c20c:	add	r0, r0, #132	; 0x84
   2c210:	b	29924 <__assert_fail@plt+0x16e74>
   2c214:	movw	r0, #8948	; 0x22f4
   2c218:	movt	r0, #5
   2c21c:	add	r0, r0, #144	; 0x90
   2c220:	b	29924 <__assert_fail@plt+0x16e74>
   2c224:	movw	r0, #8948	; 0x22f4
   2c228:	movt	r0, #5
   2c22c:	add	r0, r0, #156	; 0x9c
   2c230:	b	29924 <__assert_fail@plt+0x16e74>
   2c234:	movw	r0, #8948	; 0x22f4
   2c238:	movt	r0, #5
   2c23c:	add	r0, r0, #168	; 0xa8
   2c240:	b	29924 <__assert_fail@plt+0x16e74>
   2c244:	movw	r0, #8948	; 0x22f4
   2c248:	movt	r0, #5
   2c24c:	add	r0, r0, #180	; 0xb4
   2c250:	b	29924 <__assert_fail@plt+0x16e74>
   2c254:	movw	r0, #8948	; 0x22f4
   2c258:	movt	r0, #5
   2c25c:	add	r0, r0, #192	; 0xc0
   2c260:	b	29924 <__assert_fail@plt+0x16e74>
   2c264:	movw	r0, #8948	; 0x22f4
   2c268:	movt	r0, #5
   2c26c:	add	r0, r0, #204	; 0xcc
   2c270:	b	29924 <__assert_fail@plt+0x16e74>
   2c274:	movw	r0, #8948	; 0x22f4
   2c278:	movt	r0, #5
   2c27c:	add	r0, r0, #216	; 0xd8
   2c280:	b	29924 <__assert_fail@plt+0x16e74>
   2c284:	movw	r0, #8948	; 0x22f4
   2c288:	movt	r0, #5
   2c28c:	add	r0, r0, #228	; 0xe4
   2c290:	b	29924 <__assert_fail@plt+0x16e74>
   2c294:	movw	r0, #8948	; 0x22f4
   2c298:	movt	r0, #5
   2c29c:	add	r0, r0, #240	; 0xf0
   2c2a0:	b	29924 <__assert_fail@plt+0x16e74>
   2c2a4:	movw	r0, #8948	; 0x22f4
   2c2a8:	movt	r0, #5
   2c2ac:	add	r0, r0, #252	; 0xfc
   2c2b0:	b	29924 <__assert_fail@plt+0x16e74>
   2c2b4:	movw	r0, #8948	; 0x22f4
   2c2b8:	movt	r0, #5
   2c2bc:	b	29920 <__assert_fail@plt+0x16e70>
   2c2c0:	movw	r0, #8948	; 0x22f4
   2c2c4:	movt	r0, #5
   2c2c8:	b	2971c <__assert_fail@plt+0x16c6c>
   2c2cc:	movw	r0, #8948	; 0x22f4
   2c2d0:	movt	r0, #5
   2c2d4:	add	r0, r0, #288	; 0x120
   2c2d8:	b	29924 <__assert_fail@plt+0x16e74>
   2c2dc:	mov	r6, #1
   2c2e0:	b	2c2f0 <__assert_fail@plt+0x19840>
   2c2e4:	mov	r6, #0
   2c2e8:	b	2c2f0 <__assert_fail@plt+0x19840>
   2c2ec:	mov	r6, #2
   2c2f0:	mov	r0, r6
   2c2f4:	sub	sp, fp, #48	; 0x30
   2c2f8:	vpop	{d8-d9}
   2c2fc:	add	sp, sp, #4
   2c300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c304:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c308:	add	fp, sp, #28
   2c30c:	sub	sp, sp, #620	; 0x26c
   2c310:	mov	r4, r0
   2c314:	movw	r0, #9929	; 0x26c9
   2c318:	mov	r6, r2
   2c31c:	mov	r5, r1
   2c320:	movt	r0, #5
   2c324:	bl	126d8 <getenv@plt>
   2c328:	bl	4b474 <__assert_fail@plt+0x389c4>
   2c32c:	cmp	r0, #0
   2c330:	beq	2c6c4 <__assert_fail@plt+0x19c14>
   2c334:	add	r8, sp, #136	; 0x88
   2c338:	cmp	r6, #0
   2c33c:	str	r4, [sp, #36]	; 0x24
   2c340:	str	r0, [sp, #76]	; 0x4c
   2c344:	bne	2c354 <__assert_fail@plt+0x198a4>
   2c348:	sub	r6, fp, #184	; 0xb8
   2c34c:	mov	r0, r6
   2c350:	bl	4c46c <__assert_fail@plt+0x399bc>
   2c354:	add	r0, r8, #8
   2c358:	ldr	r2, [r6]
   2c35c:	add	sl, r5, #4
   2c360:	str	r0, [sp, #20]
   2c364:	add	r0, r8, #40	; 0x28
   2c368:	str	r0, [sp, #68]	; 0x44
   2c36c:	add	r0, r8, #56	; 0x38
   2c370:	str	r0, [sp, #64]	; 0x40
   2c374:	add	r0, r8, #64	; 0x40
   2c378:	str	r0, [sp, #60]	; 0x3c
   2c37c:	add	r0, r8, #72	; 0x48
   2c380:	str	r0, [sp, #56]	; 0x38
   2c384:	add	r0, r8, #80	; 0x50
   2c388:	str	r0, [sp, #52]	; 0x34
   2c38c:	add	r0, r8, #88	; 0x58
   2c390:	str	r0, [sp, #32]
   2c394:	add	r0, r8, #96	; 0x60
   2c398:	str	r0, [sp, #48]	; 0x30
   2c39c:	add	r0, r8, #104	; 0x68
   2c3a0:	str	r0, [sp, #24]
   2c3a4:	add	r0, r8, #112	; 0x70
   2c3a8:	str	r0, [sp, #28]
   2c3ac:	add	r0, r8, #120	; 0x78
   2c3b0:	str	r0, [sp, #16]
   2c3b4:	add	r0, r8, #128	; 0x80
   2c3b8:	str	r0, [sp, #12]
   2c3bc:	add	r0, r8, #136	; 0x88
   2c3c0:	str	r0, [sp, #8]
   2c3c4:	ldr	r0, [r6, #4]
   2c3c8:	str	r0, [sp, #40]	; 0x28
   2c3cc:	ldrb	r0, [sl, #-4]
   2c3d0:	sub	r1, r0, #9
   2c3d4:	cmp	r1, #5
   2c3d8:	bcs	2c3f0 <__assert_fail@plt+0x19940>
   2c3dc:	add	sl, sl, #1
   2c3e0:	ldrb	r0, [sl, #-4]
   2c3e4:	sub	r1, r0, #9
   2c3e8:	cmp	r1, #5
   2c3ec:	bcc	2c3dc <__assert_fail@plt+0x1992c>
   2c3f0:	cmp	r0, #32
   2c3f4:	beq	2c3dc <__assert_fail@plt+0x1992c>
   2c3f8:	vmov.i32	q8, #0	; 0x00000000
   2c3fc:	sub	r4, fp, #240	; 0xf0
   2c400:	mov	r0, #52	; 0x34
   2c404:	str	r2, [sp, #44]	; 0x2c
   2c408:	mov	r2, #0
   2c40c:	sub	r7, sl, #4
   2c410:	mov	r1, r4
   2c414:	add	r9, r4, #32
   2c418:	add	r5, r4, #16
   2c41c:	str	r2, [fp, #-192]	; 0xffffff40
   2c420:	vst1.64	{d16-d17}, [r1], r0
   2c424:	mov	r0, #0
   2c428:	vst1.64	{d16-d17}, [r9]
   2c42c:	vst1.64	{d16-d17}, [r5]
   2c430:	str	r2, [r1]
   2c434:	movw	r1, #10519	; 0x2917
   2c438:	str	r0, [sp, #84]	; 0x54
   2c43c:	mov	r0, r7
   2c440:	mov	r2, #4
   2c444:	movt	r1, #5
   2c448:	bl	12a50 <strncmp@plt>
   2c44c:	cmp	r0, #0
   2c450:	beq	2c6d4 <__assert_fail@plt+0x19c24>
   2c454:	ldr	sl, [sp, #76]	; 0x4c
   2c458:	mov	r0, #0
   2c45c:	str	r0, [sp, #72]	; 0x48
   2c460:	mov	r3, sl
   2c464:	sub	r2, fp, #284	; 0x11c
   2c468:	mov	r0, r3
   2c46c:	mov	r1, r6
   2c470:	str	r3, [sp, #80]	; 0x50
   2c474:	bl	4b538 <__assert_fail@plt+0x38a88>
   2c478:	cmp	r0, #0
   2c47c:	beq	2c748 <__assert_fail@plt+0x19c98>
   2c480:	ldrb	r0, [r7]
   2c484:	movw	r1, #58329	; 0xe3d9
   2c488:	movw	r2, #1900	; 0x76c
   2c48c:	vld1.64	{d18-d19}, [r9]
   2c490:	vld1.64	{d20-d21}, [r5]
   2c494:	add	lr, sp, #256	; 0x100
   2c498:	movt	r1, #4
   2c49c:	cmp	r0, #0
   2c4a0:	ldr	r0, [fp, #-264]	; 0xfffffef8
   2c4a4:	movne	r1, r7
   2c4a8:	ldr	r7, [sp, #48]	; 0x30
   2c4ac:	str	r1, [sp, #136]	; 0x88
   2c4b0:	asr	r1, r0, #31
   2c4b4:	adds	r0, r0, r2
   2c4b8:	ldr	r2, [sp, #68]	; 0x44
   2c4bc:	adc	r1, r1, #0
   2c4c0:	strd	r0, [r2]
   2c4c4:	ldr	r1, [fp, #-268]	; 0xfffffef4
   2c4c8:	mov	r0, #0
   2c4cc:	str	r0, [sp, #184]	; 0xb8
   2c4d0:	add	r2, r1, #1
   2c4d4:	ldr	r1, [sp, #64]	; 0x40
   2c4d8:	asr	r3, r2, #31
   2c4dc:	strd	r2, [r1]
   2c4e0:	ldr	r2, [fp, #-272]	; 0xfffffef0
   2c4e4:	ldr	r1, [sp, #60]	; 0x3c
   2c4e8:	asr	r3, r2, #31
   2c4ec:	strd	r2, [r1]
   2c4f0:	ldr	r2, [fp, #-276]	; 0xfffffeec
   2c4f4:	ldr	r1, [sp, #56]	; 0x38
   2c4f8:	asr	r3, r2, #31
   2c4fc:	strd	r2, [r1]
   2c500:	ldr	r2, [fp, #-280]	; 0xfffffee8
   2c504:	ldr	r1, [sp, #52]	; 0x34
   2c508:	asr	r3, r2, #31
   2c50c:	strd	r2, [r1]
   2c510:	ldr	r2, [sp, #40]	; 0x28
   2c514:	mov	r1, #48	; 0x30
   2c518:	ldr	r3, [fp, #-252]	; 0xffffff04
   2c51c:	vld1.64	{d16-d17}, [r4], r1
   2c520:	vldr	d22, [r4]
   2c524:	ldr	r4, [sp, #44]	; 0x2c
   2c528:	str	r2, [sp, #228]	; 0xe4
   2c52c:	mov	r2, #2
   2c530:	str	r3, [fp, #-44]	; 0xffffffd4
   2c534:	str	r2, [sp, #164]	; 0xa4
   2c538:	ldr	r2, [fp, #-284]	; 0xfffffee4
   2c53c:	str	r2, [sp, #224]	; 0xe0
   2c540:	add	r2, r7, #32
   2c544:	vst1.64	{d18-d19}, [r2]
   2c548:	add	r2, r7, #16
   2c54c:	vst1.64	{d20-d21}, [r2]
   2c550:	mov	r2, r7
   2c554:	vst1.64	{d16-d17}, [r2], r1
   2c558:	vmov.i32	q8, #0	; 0x00000000
   2c55c:	add	r1, r8, #156	; 0x9c
   2c560:	vstr	d22, [r2]
   2c564:	vst1.32	{d16-d17}, [r1]
   2c568:	add	r1, r8, #172	; 0xac
   2c56c:	vst1.32	{d16-d17}, [r1]
   2c570:	strh	r0, [lr, #32]
   2c574:	str	r0, [sp, #336]	; 0x150
   2c578:	movw	r0, #269	; 0x10d
   2c57c:	str	r3, [sp, #332]	; 0x14c
   2c580:	str	r0, [sp, #328]	; 0x148
   2c584:	ldr	r0, [fp, #-244]	; 0xffffff0c
   2c588:	str	r0, [sp, #324]	; 0x144
   2c58c:	add	r0, r4, #42752	; 0xa700
   2c590:	add	r0, r0, #7733248	; 0x760000
   2c594:	cmp	r0, r4
   2c598:	str	r0, [sp, #132]	; 0x84
   2c59c:	bvs	2c67c <__assert_fail@plt+0x19bcc>
   2c5a0:	ldr	r0, [sp, #80]	; 0x50
   2c5a4:	add	r1, sp, #132	; 0x84
   2c5a8:	add	r2, sp, #88	; 0x58
   2c5ac:	bl	4b538 <__assert_fail@plt+0x38a88>
   2c5b0:	cmp	r0, #0
   2c5b4:	beq	2c5d4 <__assert_fail@plt+0x19b24>
   2c5b8:	ldr	r0, [sp, #128]	; 0x80
   2c5bc:	cmp	r0, #0
   2c5c0:	beq	2c5d4 <__assert_fail@plt+0x19b24>
   2c5c4:	ldr	r1, [sp, #120]	; 0x78
   2c5c8:	ldr	r2, [sp, #332]	; 0x14c
   2c5cc:	cmp	r1, r2
   2c5d0:	bne	2c664 <__assert_fail@plt+0x19bb4>
   2c5d4:	add	r0, r4, #19968	; 0x4e00
   2c5d8:	add	r0, r0, #15532032	; 0xed0000
   2c5dc:	cmp	r0, r4
   2c5e0:	str	r0, [sp, #132]	; 0x84
   2c5e4:	bvs	2c67c <__assert_fail@plt+0x19bcc>
   2c5e8:	ldr	r0, [sp, #80]	; 0x50
   2c5ec:	add	r1, sp, #132	; 0x84
   2c5f0:	add	r2, sp, #88	; 0x58
   2c5f4:	bl	4b538 <__assert_fail@plt+0x38a88>
   2c5f8:	cmp	r0, #0
   2c5fc:	beq	2c61c <__assert_fail@plt+0x19b6c>
   2c600:	ldr	r0, [sp, #128]	; 0x80
   2c604:	cmp	r0, #0
   2c608:	beq	2c61c <__assert_fail@plt+0x19b6c>
   2c60c:	ldr	r1, [sp, #120]	; 0x78
   2c610:	ldr	r2, [sp, #332]	; 0x14c
   2c614:	cmp	r1, r2
   2c618:	bne	2c664 <__assert_fail@plt+0x19bb4>
   2c61c:	movw	r0, #62720	; 0xf500
   2c620:	movt	r0, #355	; 0x163
   2c624:	adds	r0, r4, r0
   2c628:	str	r0, [sp, #132]	; 0x84
   2c62c:	bvs	2c67c <__assert_fail@plt+0x19bcc>
   2c630:	ldr	r0, [sp, #80]	; 0x50
   2c634:	add	r1, sp, #132	; 0x84
   2c638:	add	r2, sp, #88	; 0x58
   2c63c:	bl	4b538 <__assert_fail@plt+0x38a88>
   2c640:	cmp	r0, #0
   2c644:	beq	2c67c <__assert_fail@plt+0x19bcc>
   2c648:	ldr	r0, [sp, #128]	; 0x80
   2c64c:	cmp	r0, #0
   2c650:	beq	2c67c <__assert_fail@plt+0x19bcc>
   2c654:	ldr	r1, [sp, #120]	; 0x78
   2c658:	ldr	r2, [sp, #332]	; 0x14c
   2c65c:	cmp	r1, r2
   2c660:	beq	2c67c <__assert_fail@plt+0x19bcc>
   2c664:	mov	r2, #0
   2c668:	str	r2, [sp, #348]	; 0x15c
   2c66c:	str	r1, [sp, #344]	; 0x158
   2c670:	movw	r1, #269	; 0x10d
   2c674:	str	r1, [sp, #340]	; 0x154
   2c678:	str	r0, [sp, #336]	; 0x150
   2c67c:	ldr	r0, [sp, #324]	; 0x144
   2c680:	cmp	r0, #0
   2c684:	beq	2c6ac <__assert_fail@plt+0x19bfc>
   2c688:	ldr	r1, [sp, #336]	; 0x150
   2c68c:	cmp	r1, #0
   2c690:	beq	2c6ac <__assert_fail@plt+0x19bfc>
   2c694:	bl	123fc <strcmp@plt>
   2c698:	cmp	r0, #0
   2c69c:	moveq	r0, #0
   2c6a0:	streq	r0, [sp, #336]	; 0x150
   2c6a4:	mvneq	r0, #0
   2c6a8:	streq	r0, [sp, #332]	; 0x14c
   2c6ac:	add	r0, sp, #136	; 0x88
   2c6b0:	bl	28254 <__assert_fail@plt+0x157a4>
   2c6b4:	cmp	r0, #0
   2c6b8:	beq	2c724 <__assert_fail@plt+0x19c74>
   2c6bc:	mov	r0, #0
   2c6c0:	b	2c744 <__assert_fail@plt+0x19c94>
   2c6c4:	mov	r4, #0
   2c6c8:	mov	r0, r4
   2c6cc:	sub	sp, fp, #28
   2c6d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c6d4:	mov	r0, #1
   2c6d8:	mov	r1, sl
   2c6dc:	ldrb	r2, [r1]
   2c6e0:	cmp	r2, #92	; 0x5c
   2c6e4:	beq	2c6fc <__assert_fail@plt+0x19c4c>
   2c6e8:	cmp	r2, #0
   2c6ec:	beq	2c454 <__assert_fail@plt+0x199a4>
   2c6f0:	cmp	r2, #34	; 0x22
   2c6f4:	bne	2c70c <__assert_fail@plt+0x19c5c>
   2c6f8:	b	2c77c <__assert_fail@plt+0x19ccc>
   2c6fc:	ldrb	r2, [r1, #1]!
   2c700:	cmp	r2, #34	; 0x22
   2c704:	cmpne	r2, #92	; 0x5c
   2c708:	bne	2c454 <__assert_fail@plt+0x199a4>
   2c70c:	add	r0, r0, #1
   2c710:	add	r1, r1, #1
   2c714:	ldrb	r2, [r1]
   2c718:	cmp	r2, #92	; 0x5c
   2c71c:	bne	2c6e8 <__assert_fail@plt+0x19c38>
   2c720:	b	2c6fc <__assert_fail@plt+0x19c4c>
   2c724:	ldrb	r0, [sp, #288]	; 0x120
   2c728:	cmp	r0, #0
   2c72c:	beq	2c7a0 <__assert_fail@plt+0x19cf0>
   2c730:	ldr	r0, [sp, #32]
   2c734:	ldr	r2, [sp, #36]	; 0x24
   2c738:	ldrd	r0, [r0]
   2c73c:	stm	r2, {r0, r1}
   2c740:	mov	r0, #1
   2c744:	str	r0, [sp, #84]	; 0x54
   2c748:	ldr	r0, [sp, #80]	; 0x50
   2c74c:	cmp	r0, sl
   2c750:	beq	2c758 <__assert_fail@plt+0x19ca8>
   2c754:	bl	4b510 <__assert_fail@plt+0x38a60>
   2c758:	ldr	r7, [sp, #72]	; 0x48
   2c75c:	ldr	r4, [sp, #84]	; 0x54
   2c760:	mov	r0, r7
   2c764:	bl	32910 <__assert_fail@plt+0x1fe60>
   2c768:	mov	r0, sl
   2c76c:	bl	4b510 <__assert_fail@plt+0x38a60>
   2c770:	mov	r0, r4
   2c774:	sub	sp, fp, #28
   2c778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c77c:	cmp	r0, #101	; 0x65
   2c780:	bcc	2c82c <__assert_fail@plt+0x19d7c>
   2c784:	bl	35350 <__assert_fail@plt+0x228a0>
   2c788:	cmp	r0, #0
   2c78c:	mov	r7, r0
   2c790:	bne	2c834 <__assert_fail@plt+0x19d84>
   2c794:	mov	r4, #0
   2c798:	mov	r7, #0
   2c79c:	b	2c8bc <__assert_fail@plt+0x19e0c>
   2c7a0:	ldr	r3, [sp, #312]	; 0x138
   2c7a4:	add	ip, sp, #292	; 0x124
   2c7a8:	ldr	r7, [sp, #304]	; 0x130
   2c7ac:	ldm	ip, {r1, r2, ip}
   2c7b0:	add	r6, r3, ip
   2c7b4:	ldr	r3, [sp, #308]	; 0x134
   2c7b8:	orr	r2, r2, r1
   2c7bc:	orr	r1, r2, r3
   2c7c0:	orr	r7, r1, r7
   2c7c4:	orr	r7, r7, r6
   2c7c8:	cmp	r7, #1
   2c7cc:	bgt	2c6bc <__assert_fail@plt+0x19c0c>
   2c7d0:	ldr	r0, [sp, #68]	; 0x44
   2c7d4:	mvn	lr, #0
   2c7d8:	ldrd	r4, [r0]
   2c7dc:	cmp	r5, #0
   2c7e0:	bmi	2c8c4 <__assert_fail@plt+0x19e14>
   2c7e4:	add	r7, r0, #8
   2c7e8:	mov	r0, #0
   2c7ec:	ldr	r7, [r7]
   2c7f0:	cmp	r7, #2
   2c7f4:	bne	2c8ec <__assert_fail@plt+0x19e3c>
   2c7f8:	subs	r6, r4, #69	; 0x45
   2c7fc:	mov	r7, #0
   2c800:	str	r0, [sp, #84]	; 0x54
   2c804:	sbcs	r6, r5, #0
   2c808:	movw	r6, #1900	; 0x76c
   2c80c:	movwlt	r7, #1
   2c810:	cmp	r7, #0
   2c814:	movwne	r6, #2000	; 0x7d0
   2c818:	adds	r4, r6, r4
   2c81c:	adc	r5, r5, #0
   2c820:	cmn	r5, #1
   2c824:	bgt	2c8f0 <__assert_fail@plt+0x19e40>
   2c828:	b	2c8cc <__assert_fail@plt+0x19e1c>
   2c82c:	mov	r7, #0
   2c830:	sub	r0, fp, #176	; 0xb0
   2c834:	ldrb	r2, [sl]
   2c838:	mov	r1, r0
   2c83c:	cmp	r2, #34	; 0x22
   2c840:	beq	2c864 <__assert_fail@plt+0x19db4>
   2c844:	uxtb	r2, r2
   2c848:	cmp	r2, #92	; 0x5c
   2c84c:	addeq	sl, sl, #1
   2c850:	ldrb	r2, [sl]
   2c854:	strb	r2, [r1], #1
   2c858:	ldrb	r2, [sl, #1]!
   2c85c:	cmp	r2, #34	; 0x22
   2c860:	bne	2c844 <__assert_fail@plt+0x19d94>
   2c864:	mov	r2, #0
   2c868:	strb	r2, [r1]
   2c86c:	bl	4b474 <__assert_fail@plt+0x389c4>
   2c870:	cmp	r0, #0
   2c874:	beq	2c8b8 <__assert_fail@plt+0x19e08>
   2c878:	str	r7, [sp, #72]	; 0x48
   2c87c:	add	r7, sl, #1
   2c880:	ldr	sl, [sp, #76]	; 0x4c
   2c884:	mov	r3, r0
   2c888:	ldrb	r0, [r7]
   2c88c:	sub	r1, r0, #9
   2c890:	cmp	r1, #5
   2c894:	bcs	2c8ac <__assert_fail@plt+0x19dfc>
   2c898:	add	r7, r7, #1
   2c89c:	ldrb	r0, [r7]
   2c8a0:	sub	r1, r0, #9
   2c8a4:	cmp	r1, #5
   2c8a8:	bcc	2c898 <__assert_fail@plt+0x19de8>
   2c8ac:	cmp	r0, #32
   2c8b0:	beq	2c898 <__assert_fail@plt+0x19de8>
   2c8b4:	b	2c464 <__assert_fail@plt+0x199b4>
   2c8b8:	mov	r4, #0
   2c8bc:	ldr	sl, [sp, #76]	; 0x4c
   2c8c0:	b	2c760 <__assert_fail@plt+0x19cb0>
   2c8c4:	mov	r0, #0
   2c8c8:	str	r0, [sp, #84]	; 0x54
   2c8cc:	movw	r7, #63636	; 0xf894
   2c8d0:	movt	r7, #65535	; 0xffff
   2c8d4:	subs	r9, r7, r4
   2c8d8:	sbc	r7, lr, r5
   2c8dc:	str	r9, [fp, #-56]	; 0xffffffc8
   2c8e0:	teq	r7, r9, asr #31
   2c8e4:	bne	2c748 <__assert_fail@plt+0x19c98>
   2c8e8:	b	2c908 <__assert_fail@plt+0x19e58>
   2c8ec:	str	r0, [sp, #84]	; 0x54
   2c8f0:	movw	r7, #1900	; 0x76c
   2c8f4:	subs	r9, r4, r7
   2c8f8:	str	r9, [fp, #-56]	; 0xffffffc8
   2c8fc:	sbc	r7, r5, #0
   2c900:	teq	r7, r9, asr #31
   2c904:	bne	2c748 <__assert_fail@plt+0x19c98>
   2c908:	ldr	r0, [sp, #64]	; 0x40
   2c90c:	mov	r7, #0
   2c910:	ldrd	r4, [r0]
   2c914:	mov	r0, #0
   2c918:	cmn	r5, #1
   2c91c:	movwgt	r7, #1
   2c920:	subs	sl, r4, #1
   2c924:	mov	r4, #0
   2c928:	sbc	r6, r5, #0
   2c92c:	str	sl, [fp, #-60]	; 0xffffffc4
   2c930:	cmn	r6, #1
   2c934:	movwgt	r4, #1
   2c938:	subs	r7, r7, r4
   2c93c:	movwne	r7, #1
   2c940:	cmp	r5, #0
   2c944:	mov	r5, #0
   2c948:	movwmi	r5, #1
   2c94c:	tst	r5, r7
   2c950:	bne	2c9fc <__assert_fail@plt+0x19f4c>
   2c954:	asr	r7, sl, #31
   2c958:	eor	r5, sl, sl
   2c95c:	str	r0, [sp, #84]	; 0x54
   2c960:	eor	r7, r6, r7
   2c964:	orrs	r7, r5, r7
   2c968:	bne	2cde4 <__assert_fail@plt+0x1a334>
   2c96c:	ldr	r0, [sp, #60]	; 0x3c
   2c970:	ldr	r8, [r0]
   2c974:	ldr	r5, [r0, #4]
   2c978:	teq	r5, r8, asr #31
   2c97c:	str	r8, [fp, #-64]	; 0xffffffc0
   2c980:	bne	2cde4 <__assert_fail@plt+0x1a334>
   2c984:	cmp	r3, #0
   2c988:	bne	2c9a0 <__assert_fail@plt+0x19ef0>
   2c98c:	cmp	r2, #0
   2c990:	bne	2ca7c <__assert_fail@plt+0x19fcc>
   2c994:	ldrb	r2, [sp, #289]	; 0x121
   2c998:	cmp	r2, #0
   2c99c:	beq	2ca7c <__assert_fail@plt+0x19fcc>
   2c9a0:	ldr	r0, [sp, #56]	; 0x38
   2c9a4:	ldr	r2, [sp, #164]	; 0xa4
   2c9a8:	ldr	r6, [r0]
   2c9ac:	ldr	r3, [r0, #4]
   2c9b0:	cmp	r2, #0
   2c9b4:	beq	2ca14 <__assert_fail@plt+0x19f64>
   2c9b8:	cmp	r2, #1
   2c9bc:	bne	2ca48 <__assert_fail@plt+0x19f98>
   2c9c0:	eor	r2, r6, #12
   2c9c4:	orrs	r2, r2, r3
   2c9c8:	mvn	r2, #0
   2c9cc:	movweq	r2, #12
   2c9d0:	subs	r7, r6, #1
   2c9d4:	sbc	r3, r3, #0
   2c9d8:	subs	r7, r7, #11
   2c9dc:	sbcs	r3, r3, #0
   2c9e0:	addcc	r2, r6, #12
   2c9e4:	mov	r6, r2
   2c9e8:	ldr	r0, [sp, #80]	; 0x50
   2c9ec:	cmp	r6, #0
   2c9f0:	str	r6, [fp, #-68]	; 0xffffffbc
   2c9f4:	bpl	2ca64 <__assert_fail@plt+0x19fb4>
   2c9f8:	b	2cde4 <__assert_fail@plt+0x1a334>
   2c9fc:	ldr	sl, [sp, #76]	; 0x4c
   2ca00:	str	r0, [sp, #84]	; 0x54
   2ca04:	ldr	r0, [sp, #80]	; 0x50
   2ca08:	cmp	r0, sl
   2ca0c:	bne	2c754 <__assert_fail@plt+0x19ca4>
   2ca10:	b	2c758 <__assert_fail@plt+0x19ca8>
   2ca14:	eor	r2, r6, #12
   2ca18:	orrs	r2, r2, r3
   2ca1c:	mvnne	r2, #0
   2ca20:	subs	r7, r6, #1
   2ca24:	sbc	r3, r3, #0
   2ca28:	subs	r7, r7, #11
   2ca2c:	sbcs	r3, r3, #0
   2ca30:	movcs	r6, r2
   2ca34:	ldr	r0, [sp, #80]	; 0x50
   2ca38:	cmp	r6, #0
   2ca3c:	str	r6, [fp, #-68]	; 0xffffffbc
   2ca40:	bpl	2ca64 <__assert_fail@plt+0x19fb4>
   2ca44:	b	2cde4 <__assert_fail@plt+0x1a334>
   2ca48:	subs	r2, r6, #24
   2ca4c:	sbcs	r2, r3, #0
   2ca50:	mvncs	r6, #0
   2ca54:	ldr	r0, [sp, #80]	; 0x50
   2ca58:	cmp	r6, #0
   2ca5c:	str	r6, [fp, #-68]	; 0xffffffbc
   2ca60:	bmi	2cde4 <__assert_fail@plt+0x1a334>
   2ca64:	ldr	r2, [sp, #52]	; 0x34
   2ca68:	ldr	r7, [sp, #224]	; 0xe0
   2ca6c:	ldr	r4, [r2]
   2ca70:	str	r7, [fp, #-76]	; 0xffffffb4
   2ca74:	str	r4, [fp, #-72]	; 0xffffffb8
   2ca78:	b	2ca9c <__assert_fail@plt+0x19fec>
   2ca7c:	ldr	r0, [sp, #80]	; 0x50
   2ca80:	mov	r6, #0
   2ca84:	mov	r4, #0
   2ca88:	mov	r7, #0
   2ca8c:	str	r6, [fp, #-68]	; 0xffffffbc
   2ca90:	str	r6, [fp, #-72]	; 0xffffffb8
   2ca94:	str	r6, [fp, #-76]	; 0xffffffb4
   2ca98:	str	r6, [sp, #228]	; 0xe4
   2ca9c:	cmp	r1, #0
   2caa0:	mvnne	r1, #0
   2caa4:	strne	r1, [fp, #-44]	; 0xffffffd4
   2caa8:	cmp	ip, #0
   2caac:	beq	2cac0 <__assert_fail@plt+0x1a010>
   2cab0:	ldr	r1, [sp, #156]	; 0x9c
   2cab4:	str	r1, [sp, #64]	; 0x40
   2cab8:	str	r1, [fp, #-44]	; 0xffffffd4
   2cabc:	b	2cac8 <__assert_fail@plt+0x1a018>
   2cac0:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2cac4:	str	r1, [sp, #64]	; 0x40
   2cac8:	mvn	r1, #0
   2cacc:	str	r1, [fp, #-52]	; 0xffffffcc
   2cad0:	sub	r1, fp, #76	; 0x4c
   2cad4:	bl	4b92c <__assert_fail@plt+0x38e7c>
   2cad8:	mov	r5, r0
   2cadc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2cae0:	str	r4, [sp, #68]	; 0x44
   2cae4:	cmp	r0, #0
   2cae8:	bmi	2cb2c <__assert_fail@plt+0x1a07c>
   2caec:	sub	r3, fp, #76	; 0x4c
   2caf0:	ldm	r3, {r0, r1, r2, r3}
   2caf4:	eor	r1, r1, r4
   2caf8:	eor	r0, r0, r7
   2cafc:	orr	r0, r1, r0
   2cb00:	eor	r1, r2, r6
   2cb04:	orr	r0, r0, r1
   2cb08:	eor	r1, r3, r8
   2cb0c:	orr	r0, r0, r1
   2cb10:	ldr	r1, [fp, #-60]	; 0xffffffc4
   2cb14:	eor	r1, r1, sl
   2cb18:	orr	r0, r0, r1
   2cb1c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   2cb20:	eor	r1, r1, r9
   2cb24:	orrs	r0, r0, r1
   2cb28:	beq	2cd68 <__assert_fail@plt+0x1a2b8>
   2cb2c:	ldr	r0, [sp, #312]	; 0x138
   2cb30:	cmp	r0, #0
   2cb34:	beq	2cde4 <__assert_fail@plt+0x1a334>
   2cb38:	mov	r0, #88	; 0x58
   2cb3c:	ldr	r4, [sp, #160]	; 0xa0
   2cb40:	str	r6, [sp, #60]	; 0x3c
   2cb44:	mov	r2, #43	; 0x2b
   2cb48:	strb	r0, [sp, #90]	; 0x5a
   2cb4c:	movw	r0, #22616	; 0x5858
   2cb50:	strh	r0, [sp, #88]	; 0x58
   2cb54:	movw	r0, #46021	; 0xb3c5
   2cb58:	movt	r0, #37282	; 0x91a2
   2cb5c:	smmla	r0, r4, r0, r4
   2cb60:	asr	r1, r0, #11
   2cb64:	add	r5, r1, r0, lsr #31
   2cb68:	movw	r1, #9932	; 0x26cc
   2cb6c:	add	r0, sp, #88	; 0x58
   2cb70:	add	r6, r0, #3
   2cb74:	movt	r1, #5
   2cb78:	cmp	r5, #0
   2cb7c:	mov	r3, r5
   2cb80:	mov	r0, r6
   2cb84:	rsbmi	r3, r5, #0
   2cb88:	cmp	r4, #0
   2cb8c:	movwmi	r2, #45	; 0x2d
   2cb90:	bl	1296c <sprintf@plt>
   2cb94:	mov	r1, #3600	; 0xe10
   2cb98:	mls	r1, r5, r1, r4
   2cb9c:	ldr	r4, [sp, #68]	; 0x44
   2cba0:	cmp	r1, #0
   2cba4:	beq	2cc68 <__assert_fail@plt+0x1a1b8>
   2cba8:	add	r0, r6, r0
   2cbac:	mov	r2, #58	; 0x3a
   2cbb0:	rsbmi	r1, r1, #0
   2cbb4:	mov	ip, r7
   2cbb8:	strb	r2, [r0]
   2cbbc:	movw	r2, #33205	; 0x81b5
   2cbc0:	uxth	r3, r1
   2cbc4:	movt	r2, #6990	; 0x1b4e
   2cbc8:	umull	r2, r7, r3, r2
   2cbcc:	mov	r2, #48	; 0x30
   2cbd0:	add	r7, r2, r7, lsr #6
   2cbd4:	strb	r7, [r0, #1]
   2cbd8:	movw	r7, #34953	; 0x8889
   2cbdc:	movt	r7, #34952	; 0x8888
   2cbe0:	umull	r3, r7, r3, r7
   2cbe4:	movw	r3, #52429	; 0xcccd
   2cbe8:	movt	r3, #52428	; 0xcccc
   2cbec:	ubfx	r6, r7, #5, #8
   2cbf0:	umull	r5, r4, r6, r3
   2cbf4:	lsr	r5, r4, #3
   2cbf8:	add	r5, r5, r5, lsl #2
   2cbfc:	sub	r6, r6, r5, lsl #1
   2cc00:	orr	r6, r6, #48	; 0x30
   2cc04:	strb	r6, [r0, #2]
   2cc08:	lsr	r6, r7, #5
   2cc0c:	add	r0, r0, #3
   2cc10:	lsl	r6, r6, #4
   2cc14:	sub	r7, r6, r7, lsr #5
   2cc18:	sub	r1, r1, r7, lsl #2
   2cc1c:	movw	r7, #65535	; 0xffff
   2cc20:	tst	r1, r7
   2cc24:	beq	2cc58 <__assert_fail@plt+0x1a1a8>
   2cc28:	mov	r7, #58	; 0x3a
   2cc2c:	strb	r7, [r0]
   2cc30:	uxtb	r7, r1
   2cc34:	umull	r3, r7, r7, r3
   2cc38:	orr	r2, r2, r7, lsr #3
   2cc3c:	strb	r2, [r0, #1]
   2cc40:	lsr	r2, r7, #3
   2cc44:	add	r2, r2, r2, lsl #2
   2cc48:	sub	r1, r1, r2, lsl #1
   2cc4c:	orr	r1, r1, #48	; 0x30
   2cc50:	strb	r1, [r0, #2]
   2cc54:	add	r0, r0, #3
   2cc58:	ldr	r4, [sp, #68]	; 0x44
   2cc5c:	mov	r7, ip
   2cc60:	mov	r1, #0
   2cc64:	strb	r1, [r0]
   2cc68:	add	r0, sp, #88	; 0x58
   2cc6c:	bl	4b474 <__assert_fail@plt+0x389c4>
   2cc70:	cmp	r0, #0
   2cc74:	beq	2cde4 <__assert_fail@plt+0x1a334>
   2cc78:	mov	r6, r0
   2cc7c:	ldr	r0, [sp, #64]	; 0x40
   2cc80:	ldr	r5, [sp, #60]	; 0x3c
   2cc84:	sub	r1, fp, #76	; 0x4c
   2cc88:	str	r0, [fp, #-44]	; 0xffffffd4
   2cc8c:	mvn	r0, #0
   2cc90:	str	r9, [fp, #-56]	; 0xffffffc8
   2cc94:	str	sl, [fp, #-60]	; 0xffffffc4
   2cc98:	str	r8, [fp, #-64]	; 0xffffffc0
   2cc9c:	str	r5, [fp, #-68]	; 0xffffffbc
   2cca0:	str	r4, [fp, #-72]	; 0xffffffb8
   2cca4:	str	r7, [fp, #-76]	; 0xffffffb4
   2cca8:	str	r0, [fp, #-52]	; 0xffffffcc
   2ccac:	mov	r0, r6
   2ccb0:	bl	4b92c <__assert_fail@plt+0x38e7c>
   2ccb4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2ccb8:	cmn	r1, #1
   2ccbc:	ble	2cddc <__assert_fail@plt+0x1a32c>
   2ccc0:	str	r0, [sp, #4]
   2ccc4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   2ccc8:	ldr	r4, [fp, #-76]	; 0xffffffb4
   2cccc:	str	r0, [sp, #56]	; 0x38
   2ccd0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2ccd4:	str	r0, [sp, #52]	; 0x34
   2ccd8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2ccdc:	str	r0, [sp, #32]
   2cce0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2cce4:	str	r0, [sp, #40]	; 0x28
   2cce8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2ccec:	str	r0, [sp, #44]	; 0x2c
   2ccf0:	mov	r0, r6
   2ccf4:	bl	4b510 <__assert_fail@plt+0x38a60>
   2ccf8:	ldr	r1, [sp, #68]	; 0x44
   2ccfc:	ldr	r2, [sp, #32]
   2cd00:	eor	r0, r4, r7
   2cd04:	eor	r1, r2, r1
   2cd08:	orr	r0, r1, r0
   2cd0c:	ldr	r1, [sp, #40]	; 0x28
   2cd10:	eor	r1, r1, r5
   2cd14:	orr	r0, r0, r1
   2cd18:	ldr	r1, [sp, #44]	; 0x2c
   2cd1c:	eor	r1, r1, r8
   2cd20:	orr	r0, r0, r1
   2cd24:	ldr	r1, [sp, #52]	; 0x34
   2cd28:	eor	r1, r1, sl
   2cd2c:	orr	r0, r0, r1
   2cd30:	ldr	r1, [sp, #56]	; 0x38
   2cd34:	eor	r1, r1, r9
   2cd38:	orrs	r0, r0, r1
   2cd3c:	bne	2cde4 <__assert_fail@plt+0x1a334>
   2cd40:	mov	r6, r5
   2cd44:	ldr	sl, [sp, #76]	; 0x4c
   2cd48:	ldr	r5, [sp, #4]
   2cd4c:	mvn	r2, #0
   2cd50:	mov	r3, r7
   2cd54:	ldr	r0, [sp, #296]	; 0x128
   2cd58:	mov	r8, r7
   2cd5c:	cmp	r0, #0
   2cd60:	bne	2cd80 <__assert_fail@plt+0x1a2d0>
   2cd64:	b	2d018 <__assert_fail@plt+0x1a568>
   2cd68:	ldr	sl, [sp, #76]	; 0x4c
   2cd6c:	mvn	r2, #0
   2cd70:	ldr	r0, [sp, #296]	; 0x128
   2cd74:	mov	r8, r7
   2cd78:	cmp	r0, #0
   2cd7c:	beq	2d018 <__assert_fail@plt+0x1a568>
   2cd80:	ldr	r0, [sp, #292]	; 0x124
   2cd84:	cmp	r0, #0
   2cd88:	bne	2d018 <__assert_fail@plt+0x1a568>
   2cd8c:	ldr	r0, [sp, #20]
   2cd90:	ldrd	r4, [r0]
   2cd94:	subs	r0, r4, #1
   2cd98:	sbcs	r0, r5, #0
   2cd9c:	blt	2cdf8 <__assert_fail@plt+0x1a348>
   2cda0:	ldr	r0, [sp, #152]	; 0x98
   2cda4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2cda8:	subs	r0, r1, r0
   2cdac:	movwne	r0, #1
   2cdb0:	subs	r0, r4, r0
   2cdb4:	sbcs	r0, r5, #0
   2cdb8:	bge	2ce08 <__assert_fail@plt+0x1a358>
   2cdbc:	subs	r0, r4, #1
   2cdc0:	sbcs	r0, r5, #0
   2cdc4:	blt	2ce2c <__assert_fail@plt+0x1a37c>
   2cdc8:	ldr	r0, [sp, #152]	; 0x98
   2cdcc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2cdd0:	subs	r0, r1, r0
   2cdd4:	movwne	r0, #1
   2cdd8:	b	2ce30 <__assert_fail@plt+0x1a380>
   2cddc:	mov	r0, r6
   2cde0:	bl	4b510 <__assert_fail@plt+0x38a60>
   2cde4:	ldr	sl, [sp, #76]	; 0x4c
   2cde8:	ldr	r0, [sp, #80]	; 0x50
   2cdec:	cmp	r0, sl
   2cdf0:	bne	2c754 <__assert_fail@plt+0x19ca4>
   2cdf4:	b	2c758 <__assert_fail@plt+0x19ca8>
   2cdf8:	mov	r0, #0
   2cdfc:	subs	r0, r4, r0
   2ce00:	sbcs	r0, r5, #0
   2ce04:	blt	2cdbc <__assert_fail@plt+0x1a30c>
   2ce08:	subs	r0, r4, #1
   2ce0c:	mov	r2, #0
   2ce10:	sbcs	r0, r5, #0
   2ce14:	blt	2ce70 <__assert_fail@plt+0x1a3c0>
   2ce18:	ldr	r0, [sp, #152]	; 0x98
   2ce1c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2ce20:	subs	r0, r1, r0
   2ce24:	movwne	r0, #1
   2ce28:	b	2ce74 <__assert_fail@plt+0x1a3c4>
   2ce2c:	mov	r0, #0
   2ce30:	subs	r0, r4, r0
   2ce34:	sbc	r1, r5, #0
   2ce38:	eor	r0, r0, r2
   2ce3c:	eor	r1, r1, r2
   2ce40:	orrs	r0, r0, r1
   2ce44:	beq	2cecc <__assert_fail@plt+0x1a41c>
   2ce48:	mov	r0, #0
   2ce4c:	str	r0, [sp, #84]	; 0x54
   2ce50:	subs	r0, r4, #1
   2ce54:	sbcs	r0, r5, #0
   2ce58:	blt	2cea0 <__assert_fail@plt+0x1a3f0>
   2ce5c:	ldr	r0, [sp, #152]	; 0x98
   2ce60:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2ce64:	subs	r0, r1, r0
   2ce68:	movwne	r0, #1
   2ce6c:	b	2cea4 <__assert_fail@plt+0x1a3f4>
   2ce70:	mov	r0, #0
   2ce74:	movw	r3, #37449	; 0x9249
   2ce78:	subs	r0, r4, r0
   2ce7c:	str	r2, [sp, #84]	; 0x54
   2ce80:	sbc	r1, r5, r2
   2ce84:	movw	r2, #9362	; 0x2492
   2ce88:	movt	r3, #18724	; 0x4924
   2ce8c:	movt	r2, #4681	; 0x1249
   2ce90:	subs	r0, r3, r0
   2ce94:	sbcs	r0, r2, r1
   2ce98:	blt	2c748 <__assert_fail@plt+0x19c98>
   2ce9c:	b	2cecc <__assert_fail@plt+0x1a41c>
   2cea0:	mov	r0, #0
   2cea4:	subs	r2, r4, r0
   2cea8:	ldr	r0, [sp, #84]	; 0x54
   2ceac:	mov	r1, #-2147483648	; 0x80000000
   2ceb0:	sbc	r3, r5, r0
   2ceb4:	mov	r0, #0
   2ceb8:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2cebc:	ldr	sl, [sp, #76]	; 0x4c
   2cec0:	subs	r0, r0, #7
   2cec4:	sbcs	r0, r1, #0
   2cec8:	blt	2c748 <__assert_fail@plt+0x19c98>
   2cecc:	rsbs	r0, r4, #0
   2ced0:	rscs	r0, r5, #0
   2ced4:	bge	2ceec <__assert_fail@plt+0x1a43c>
   2ced8:	ldr	r1, [sp, #152]	; 0x98
   2cedc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2cee0:	subs	r2, r0, r1
   2cee4:	movwne	r2, #1
   2cee8:	b	2cef8 <__assert_fail@plt+0x1a448>
   2ceec:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2cef0:	ldr	r1, [sp, #152]	; 0x98
   2cef4:	mov	r2, #0
   2cef8:	sub	r0, r1, r0
   2cefc:	movw	r1, #9363	; 0x2493
   2cf00:	mov	r7, #7
   2cf04:	subs	r2, r4, r2
   2cf08:	mov	r3, #0
   2cf0c:	movt	r1, #37449	; 0x9249
   2cf10:	add	r0, r0, #7
   2cf14:	umull	r2, r7, r2, r7
   2cf18:	sbc	r3, r5, r3
   2cf1c:	rsb	r3, r3, r3, lsl #3
   2cf20:	smmla	r1, r0, r1, r0
   2cf24:	add	r3, r7, r3
   2cf28:	asr	r7, r1, #2
   2cf2c:	add	r1, r7, r1, lsr #31
   2cf30:	sub	r1, r1, r1, lsl #3
   2cf34:	add	r0, r0, r1
   2cf38:	adds	r1, r0, r2
   2cf3c:	asr	r7, r0, #31
   2cf40:	mov	r2, #0
   2cf44:	adc	r0, r7, r3
   2cf48:	str	r2, [sp, #84]	; 0x54
   2cf4c:	mov	r2, #0
   2cf50:	cmn	r0, #1
   2cf54:	movwgt	r2, #1
   2cf58:	cmn	r7, #1
   2cf5c:	mov	r7, #0
   2cf60:	movwgt	r7, #1
   2cf64:	subs	r2, r7, r2
   2cf68:	movwne	r2, #1
   2cf6c:	cmn	r3, #1
   2cf70:	mov	r3, #0
   2cf74:	movwgt	r3, #1
   2cf78:	sub	r3, r7, r3
   2cf7c:	clz	r3, r3
   2cf80:	lsr	r3, r3, #5
   2cf84:	ands	r2, r3, r2
   2cf88:	bne	2c748 <__assert_fail@plt+0x19c98>
   2cf8c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   2cf90:	mov	r2, #0
   2cf94:	cmn	r0, #1
   2cf98:	mov	r7, #0
   2cf9c:	str	r2, [sp, #84]	; 0x54
   2cfa0:	mov	r2, #0
   2cfa4:	movwgt	r2, #1
   2cfa8:	adds	r1, r1, r3
   2cfac:	adc	r0, r0, r3, asr #31
   2cfb0:	asr	r3, r3, #31
   2cfb4:	str	r1, [fp, #-64]	; 0xffffffc0
   2cfb8:	cmn	r0, #1
   2cfbc:	movwgt	r7, #1
   2cfc0:	subs	r7, r2, r7
   2cfc4:	movwne	r7, #1
   2cfc8:	cmn	r3, #1
   2cfcc:	mov	r3, #0
   2cfd0:	movwgt	r3, #1
   2cfd4:	sub	r2, r2, r3
   2cfd8:	clz	r2, r2
   2cfdc:	lsr	r2, r2, #5
   2cfe0:	tst	r2, r7
   2cfe4:	asreq	r2, r1, #31
   2cfe8:	eoreq	r1, r1, r1
   2cfec:	eoreq	r0, r0, r2
   2cff0:	orrseq	r0, r1, r0
   2cff4:	bne	2c748 <__assert_fail@plt+0x19c98>
   2cff8:	mvn	r0, #0
   2cffc:	sub	r1, fp, #76	; 0x4c
   2d000:	str	r0, [fp, #-44]	; 0xffffffd4
   2d004:	ldr	r0, [sp, #80]	; 0x50
   2d008:	bl	4b92c <__assert_fail@plt+0x38e7c>
   2d00c:	mov	r5, r0
   2d010:	cmn	r0, #1
   2d014:	beq	2c748 <__assert_fail@plt+0x19c98>
   2d018:	ldr	r1, [sp, #24]
   2d01c:	ldr	r0, [sp, #48]	; 0x30
   2d020:	mov	ip, r6
   2d024:	ldr	r4, [r1]
   2d028:	ldr	r2, [r1, #4]
   2d02c:	ldr	r1, [sp, #28]
   2d030:	ldm	r0, {r0, r3}
   2d034:	ldr	lr, [r1]
   2d038:	ldr	r9, [r1, #4]
   2d03c:	orr	r7, r2, r3
   2d040:	orr	r6, r4, r0
   2d044:	orr	r7, r7, r9
   2d048:	orr	r6, r6, lr
   2d04c:	orrs	r7, r6, r7
   2d050:	beq	2d1d0 <__assert_fail@plt+0x1a720>
   2d054:	ldr	r7, [fp, #-56]	; 0xffffffc8
   2d058:	mov	r1, #0
   2d05c:	mov	r5, #0
   2d060:	str	r1, [sp, #84]	; 0x54
   2d064:	mov	r1, #0
   2d068:	asr	r6, r7, #31
   2d06c:	cmn	r6, #1
   2d070:	movwgt	r1, #1
   2d074:	adds	r0, r7, r0
   2d078:	adc	r7, r6, r3
   2d07c:	mov	r6, #0
   2d080:	cmn	r7, #1
   2d084:	movwgt	r6, #1
   2d088:	subs	r6, r1, r6
   2d08c:	movwne	r6, #1
   2d090:	cmn	r3, #1
   2d094:	movwgt	r5, #1
   2d098:	sub	r1, r1, r5
   2d09c:	clz	r1, r1
   2d0a0:	lsr	r1, r1, #5
   2d0a4:	tst	r1, r6
   2d0a8:	asreq	r1, r0, #31
   2d0ac:	eoreq	r6, r0, r0
   2d0b0:	eoreq	r1, r7, r1
   2d0b4:	orrseq	r1, r6, r1
   2d0b8:	bne	2c748 <__assert_fail@plt+0x19c98>
   2d0bc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   2d0c0:	mov	r7, #0
   2d0c4:	mov	r5, #0
   2d0c8:	mov	r3, #0
   2d0cc:	str	r7, [sp, #84]	; 0x54
   2d0d0:	asr	r6, r1, #31
   2d0d4:	cmn	r6, #1
   2d0d8:	movwgt	r5, #1
   2d0dc:	adds	r7, r1, r4
   2d0e0:	mov	r1, #0
   2d0e4:	adc	r6, r6, r2
   2d0e8:	cmn	r6, #1
   2d0ec:	movwgt	r1, #1
   2d0f0:	subs	r1, r5, r1
   2d0f4:	movwne	r1, #1
   2d0f8:	cmn	r2, #1
   2d0fc:	movwgt	r3, #1
   2d100:	sub	r3, r5, r3
   2d104:	clz	r3, r3
   2d108:	lsr	r3, r3, #5
   2d10c:	tst	r3, r1
   2d110:	asreq	r1, r7, #31
   2d114:	eoreq	r3, r7, r7
   2d118:	eoreq	r1, r6, r1
   2d11c:	orrseq	r1, r3, r1
   2d120:	bne	2c748 <__assert_fail@plt+0x19c98>
   2d124:	ldr	r1, [fp, #-64]	; 0xffffffc0
   2d128:	mov	r6, #0
   2d12c:	mov	r5, #0
   2d130:	str	r6, [sp, #84]	; 0x54
   2d134:	mov	r6, #0
   2d138:	asr	r3, r1, #31
   2d13c:	cmn	r3, #1
   2d140:	movwgt	r6, #1
   2d144:	adds	r2, r1, lr
   2d148:	mov	r1, #0
   2d14c:	adc	r3, r3, r9
   2d150:	cmn	r3, #1
   2d154:	movwgt	r1, #1
   2d158:	subs	r1, r6, r1
   2d15c:	movwne	r1, #1
   2d160:	cmn	r9, #1
   2d164:	movwgt	r5, #1
   2d168:	sub	r6, r6, r5
   2d16c:	clz	r6, r6
   2d170:	lsr	r6, r6, #5
   2d174:	tst	r6, r1
   2d178:	bne	2cde4 <__assert_fail@plt+0x1a334>
   2d17c:	asr	r1, r2, #31
   2d180:	eor	r6, r2, r2
   2d184:	eor	r1, r3, r1
   2d188:	orrs	r1, r6, r1
   2d18c:	bne	2cde4 <__assert_fail@plt+0x1a334>
   2d190:	str	r7, [fp, #-60]	; 0xffffffc4
   2d194:	str	r0, [fp, #-56]	; 0xffffffc8
   2d198:	ldr	r0, [sp, #68]	; 0x44
   2d19c:	str	r2, [fp, #-64]	; 0xffffffc0
   2d1a0:	str	ip, [fp, #-68]	; 0xffffffbc
   2d1a4:	sub	r1, fp, #76	; 0x4c
   2d1a8:	str	r0, [fp, #-72]	; 0xffffffb8
   2d1ac:	ldr	r0, [sp, #64]	; 0x40
   2d1b0:	str	r0, [fp, #-44]	; 0xffffffd4
   2d1b4:	ldr	r0, [sp, #80]	; 0x50
   2d1b8:	str	r8, [fp, #-76]	; 0xffffffb4
   2d1bc:	bl	4b92c <__assert_fail@plt+0x38e7c>
   2d1c0:	ldr	sl, [sp, #76]	; 0x4c
   2d1c4:	mov	r5, r0
   2d1c8:	cmn	r0, #1
   2d1cc:	beq	2c748 <__assert_fail@plt+0x19c98>
   2d1d0:	ldr	r0, [sp, #312]	; 0x138
   2d1d4:	cmp	r0, #0
   2d1d8:	beq	2d20c <__assert_fail@plt+0x1a75c>
   2d1dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2d1e0:	ldr	r2, [sp, #160]	; 0xa0
   2d1e4:	asr	r1, r0, #31
   2d1e8:	subs	r0, r0, r2
   2d1ec:	sbc	r1, r1, r2, asr #31
   2d1f0:	adds	r4, r0, r5
   2d1f4:	adc	r0, r1, r5, asr #31
   2d1f8:	teq	r0, r4, asr #31
   2d1fc:	mov	r0, #0
   2d200:	str	r0, [sp, #84]	; 0x54
   2d204:	bne	2c748 <__assert_fail@plt+0x19c98>
   2d208:	b	2d210 <__assert_fail@plt+0x1a760>
   2d20c:	mov	r4, r5
   2d210:	ldr	r1, [sp, #280]	; 0x118
   2d214:	ldr	r0, [sp, #228]	; 0xe4
   2d218:	movw	r5, #51712	; 0xca00
   2d21c:	mov	r3, #0
   2d220:	movt	r5, #15258	; 0x3b9a
   2d224:	asr	r2, r1, #31
   2d228:	adds	r7, r1, r0
   2d22c:	adc	r6, r2, r0, asr #31
   2d230:	mov	r0, #0
   2d234:	mov	r2, r5
   2d238:	str	r0, [sp, #84]	; 0x54
   2d23c:	mov	r0, r7
   2d240:	mov	r1, r6
   2d244:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2d248:	adds	r0, r2, r5
   2d24c:	mov	r2, r5
   2d250:	adc	r1, r3, #0
   2d254:	mov	r3, #0
   2d258:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2d25c:	subs	r0, r7, r2
   2d260:	str	r2, [sp, #64]	; 0x40
   2d264:	mov	r3, #0
   2d268:	sbc	r1, r6, r2, asr #31
   2d26c:	mov	r2, r5
   2d270:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2d274:	str	r0, [sp, #68]	; 0x44
   2d278:	ldr	r0, [sp, #16]
   2d27c:	mov	r7, r1
   2d280:	ldr	r5, [r0, #4]
   2d284:	ldr	r6, [r0]
   2d288:	cmn	r5, #1
   2d28c:	ble	2d2b0 <__assert_fail@plt+0x1a800>
   2d290:	movw	r1, #24175	; 0x5e6f
   2d294:	movw	r0, #6699	; 0x1a2b
   2d298:	movt	r1, #15437	; 0x3c4d
   2d29c:	movt	r0, #9
   2d2a0:	subs	r1, r1, r6
   2d2a4:	sbcs	r0, r0, r5
   2d2a8:	blt	2c748 <__assert_fail@plt+0x19c98>
   2d2ac:	b	2d2ec <__assert_fail@plt+0x1a83c>
   2d2b0:	mvn	r1, #0
   2d2b4:	eor	r0, r6, r1
   2d2b8:	eor	r1, r5, r1
   2d2bc:	orrs	r0, r0, r1
   2d2c0:	beq	2d2ec <__assert_fail@plt+0x1a83c>
   2d2c4:	mov	r0, #0
   2d2c8:	mov	r1, #-2147483648	; 0x80000000
   2d2cc:	mov	r2, r6
   2d2d0:	mov	r3, r5
   2d2d4:	str	r0, [sp, #84]	; 0x54
   2d2d8:	mov	r0, #0
   2d2dc:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2d2e0:	subs	r0, r0, #3600	; 0xe10
   2d2e4:	sbcs	r0, r1, #0
   2d2e8:	blt	2c748 <__assert_fail@plt+0x19c98>
   2d2ec:	mov	r0, #3600	; 0xe10
   2d2f0:	umull	r1, r2, r6, r0
   2d2f4:	mla	r0, r5, r0, r2
   2d2f8:	asr	r2, r4, #31
   2d2fc:	adds	r5, r4, r1
   2d300:	mov	r1, #0
   2d304:	adc	r4, r2, r0
   2d308:	str	r1, [sp, #84]	; 0x54
   2d30c:	mov	r1, #0
   2d310:	cmn	r4, #1
   2d314:	movwgt	r1, #1
   2d318:	cmn	r2, #1
   2d31c:	mov	r2, #0
   2d320:	movwgt	r2, #1
   2d324:	subs	r1, r2, r1
   2d328:	movwne	r1, #1
   2d32c:	cmn	r0, #1
   2d330:	mov	r0, #0
   2d334:	movwgt	r0, #1
   2d338:	sub	r0, r2, r0
   2d33c:	clz	r0, r0
   2d340:	lsr	r0, r0, #5
   2d344:	tst	r0, r1
   2d348:	bne	2cde4 <__assert_fail@plt+0x1a334>
   2d34c:	ldr	r0, [sp, #12]
   2d350:	ldrd	r8, [r0]
   2d354:	cmn	r9, #1
   2d358:	ble	2d380 <__assert_fail@plt+0x1a8d0>
   2d35c:	movw	r1, #8738	; 0x2222
   2d360:	movw	r0, #8738	; 0x2222
   2d364:	ldr	sl, [sp, #76]	; 0x4c
   2d368:	movt	r1, #8738	; 0x2222
   2d36c:	movt	r0, #546	; 0x222
   2d370:	subs	r1, r1, r8
   2d374:	sbcs	r0, r0, r9
   2d378:	blt	2c748 <__assert_fail@plt+0x19c98>
   2d37c:	b	2d3c0 <__assert_fail@plt+0x1a910>
   2d380:	ldr	sl, [sp, #76]	; 0x4c
   2d384:	mvn	r1, #0
   2d388:	eor	r0, r8, r1
   2d38c:	eor	r1, r9, r1
   2d390:	orrs	r0, r0, r1
   2d394:	beq	2d3c0 <__assert_fail@plt+0x1a910>
   2d398:	mov	r0, #0
   2d39c:	mov	r1, #-2147483648	; 0x80000000
   2d3a0:	mov	r2, r8
   2d3a4:	mov	r3, r9
   2d3a8:	str	r0, [sp, #84]	; 0x54
   2d3ac:	mov	r0, #0
   2d3b0:	bl	4ccbc <__assert_fail@plt+0x3a20c>
   2d3b4:	subs	r0, r0, #60	; 0x3c
   2d3b8:	sbcs	r0, r1, #0
   2d3bc:	blt	2c748 <__assert_fail@plt+0x19c98>
   2d3c0:	mov	r0, #60	; 0x3c
   2d3c4:	rsb	r2, r9, r9, lsl #4
   2d3c8:	mov	r3, #0
   2d3cc:	mov	r6, #0
   2d3d0:	umull	r0, r1, r8, r0
   2d3d4:	str	r3, [sp, #84]	; 0x54
   2d3d8:	mov	r3, #0
   2d3dc:	add	r2, r1, r2, lsl #2
   2d3e0:	adds	r0, r5, r0
   2d3e4:	adc	r1, r4, r2
   2d3e8:	cmn	r1, #1
   2d3ec:	movwgt	r3, #1
   2d3f0:	cmn	r4, #1
   2d3f4:	movwgt	r6, #1
   2d3f8:	subs	r3, r6, r3
   2d3fc:	movwne	r3, #1
   2d400:	cmn	r2, #1
   2d404:	mov	r2, #0
   2d408:	movwgt	r2, #1
   2d40c:	sub	r2, r6, r2
   2d410:	clz	r2, r2
   2d414:	lsr	r2, r2, #5
   2d418:	ands	r2, r2, r3
   2d41c:	bne	2c748 <__assert_fail@plt+0x19c98>
   2d420:	ldr	r3, [sp, #8]
   2d424:	mov	r2, #0
   2d428:	cmn	r1, #1
   2d42c:	mov	r6, #0
   2d430:	str	r2, [sp, #84]	; 0x54
   2d434:	mov	r2, #0
   2d438:	movwgt	r2, #1
   2d43c:	ldrd	r4, [r3]
   2d440:	mov	r3, #0
   2d444:	adds	r0, r0, r4
   2d448:	adc	r1, r1, r5
   2d44c:	cmn	r1, #1
   2d450:	movwgt	r3, #1
   2d454:	subs	r3, r2, r3
   2d458:	movwne	r3, #1
   2d45c:	cmn	r5, #1
   2d460:	movwgt	r6, #1
   2d464:	sub	r2, r2, r6
   2d468:	clz	r2, r2
   2d46c:	lsr	r2, r2, #5
   2d470:	ands	r2, r2, r3
   2d474:	bne	2c748 <__assert_fail@plt+0x19c98>
   2d478:	ldr	r3, [sp, #68]	; 0x44
   2d47c:	mov	r2, #0
   2d480:	cmn	r1, #1
   2d484:	str	r2, [sp, #84]	; 0x54
   2d488:	mov	r2, #0
   2d48c:	movwgt	r2, #1
   2d490:	adds	r0, r0, r3
   2d494:	mov	r3, #0
   2d498:	adc	r1, r1, r7
   2d49c:	cmn	r1, #1
   2d4a0:	movwgt	r3, #1
   2d4a4:	subs	r3, r2, r3
   2d4a8:	movwne	r3, #1
   2d4ac:	cmn	r7, #1
   2d4b0:	mov	r7, #0
   2d4b4:	movwgt	r7, #1
   2d4b8:	sub	r2, r2, r7
   2d4bc:	clz	r2, r2
   2d4c0:	lsr	r2, r2, #5
   2d4c4:	tst	r2, r3
   2d4c8:	bne	2cde4 <__assert_fail@plt+0x1a334>
   2d4cc:	ldr	sl, [sp, #76]	; 0x4c
   2d4d0:	asr	r2, r0, #31
   2d4d4:	eor	r3, r0, r0
   2d4d8:	eor	r1, r1, r2
   2d4dc:	orrs	r1, r3, r1
   2d4e0:	bne	2c748 <__assert_fail@plt+0x19c98>
   2d4e4:	ldr	r1, [sp, #36]	; 0x24
   2d4e8:	str	r0, [r1]
   2d4ec:	ldr	r0, [sp, #64]	; 0x40
   2d4f0:	str	r0, [r1, #4]
   2d4f4:	b	2c740 <__assert_fail@plt+0x19c90>
   2d4f8:	push	{r4, r5, r6, sl, fp, lr}
   2d4fc:	add	fp, sp, #16
   2d500:	mov	r4, r1
   2d504:	movw	r1, #10126	; 0x278e
   2d508:	mov	r5, r0
   2d50c:	movt	r1, #5
   2d510:	mov	r0, r4
   2d514:	bl	123fc <strcmp@plt>
   2d518:	cmp	r0, #0
   2d51c:	beq	2d5bc <__assert_fail@plt+0x1ab0c>
   2d520:	movw	r1, #10130	; 0x2792
   2d524:	mov	r0, r4
   2d528:	movt	r1, #5
   2d52c:	bl	123fc <strcmp@plt>
   2d530:	movw	r6, #9260	; 0x242c
   2d534:	cmp	r0, #0
   2d538:	movt	r6, #5
   2d53c:	beq	2d5cc <__assert_fail@plt+0x1ab1c>
   2d540:	movw	r1, #10133	; 0x2795
   2d544:	mov	r0, r4
   2d548:	movt	r1, #5
   2d54c:	bl	123fc <strcmp@plt>
   2d550:	cmp	r0, #0
   2d554:	beq	2d5d8 <__assert_fail@plt+0x1ab28>
   2d558:	ldr	r1, [r5, #188]	; 0xbc
   2d55c:	cmp	r1, #0
   2d560:	beq	2d584 <__assert_fail@plt+0x1aad4>
   2d564:	add	r5, r5, #200	; 0xc8
   2d568:	mov	r0, r4
   2d56c:	bl	123fc <strcmp@plt>
   2d570:	cmp	r0, #0
   2d574:	beq	2d5e4 <__assert_fail@plt+0x1ab34>
   2d578:	ldr	r1, [r5], #12
   2d57c:	cmp	r1, #0
   2d580:	bne	2d568 <__assert_fail@plt+0x1aab8>
   2d584:	movw	r5, #9308	; 0x245c
   2d588:	movw	r1, #10137	; 0x2799
   2d58c:	movt	r5, #5
   2d590:	movt	r1, #5
   2d594:	mov	r0, r4
   2d598:	bl	123fc <strcmp@plt>
   2d59c:	cmp	r0, #0
   2d5a0:	beq	2d5e8 <__assert_fail@plt+0x1ab38>
   2d5a4:	ldr	r1, [r5, #12]!
   2d5a8:	cmp	r1, #0
   2d5ac:	bne	2d594 <__assert_fail@plt+0x1aae4>
   2d5b0:	mov	r5, #0
   2d5b4:	mov	r0, r5
   2d5b8:	pop	{r4, r5, r6, sl, fp, pc}
   2d5bc:	movw	r5, #9260	; 0x242c
   2d5c0:	movt	r5, #5
   2d5c4:	mov	r0, r5
   2d5c8:	pop	{r4, r5, r6, sl, fp, pc}
   2d5cc:	add	r5, r6, #12
   2d5d0:	mov	r0, r5
   2d5d4:	pop	{r4, r5, r6, sl, fp, pc}
   2d5d8:	add	r5, r6, #24
   2d5dc:	mov	r0, r5
   2d5e0:	pop	{r4, r5, r6, sl, fp, pc}
   2d5e4:	sub	r5, r5, #12
   2d5e8:	mov	r0, r5
   2d5ec:	pop	{r4, r5, r6, sl, fp, pc}
   2d5f0:	push	{r4, r5, fp, lr}
   2d5f4:	add	fp, sp, #8
   2d5f8:	cmp	r0, #0
   2d5fc:	beq	2d690 <__assert_fail@plt+0x1abe0>
   2d600:	mov	r1, #47	; 0x2f
   2d604:	mov	r4, r0
   2d608:	bl	12924 <strrchr@plt>
   2d60c:	cmp	r0, #0
   2d610:	mov	r5, r4
   2d614:	addne	r5, r0, #1
   2d618:	sub	r0, r5, r4
   2d61c:	cmp	r0, #7
   2d620:	blt	2d674 <__assert_fail@plt+0x1abc4>
   2d624:	movw	r1, #10580	; 0x2954
   2d628:	sub	r0, r5, #7
   2d62c:	mov	r2, #7
   2d630:	movt	r1, #5
   2d634:	bl	12a50 <strncmp@plt>
   2d638:	cmp	r0, #0
   2d63c:	bne	2d674 <__assert_fail@plt+0x1abc4>
   2d640:	movw	r1, #10588	; 0x295c
   2d644:	mov	r0, r5
   2d648:	mov	r2, #3
   2d64c:	movt	r1, #5
   2d650:	bl	12a50 <strncmp@plt>
   2d654:	cmp	r0, #0
   2d658:	beq	2d664 <__assert_fail@plt+0x1abb4>
   2d65c:	mov	r4, r5
   2d660:	b	2d674 <__assert_fail@plt+0x1abc4>
   2d664:	movw	r0, #17728	; 0x4540
   2d668:	add	r4, r5, #3
   2d66c:	movt	r0, #6
   2d670:	str	r4, [r0]
   2d674:	movw	r0, #17736	; 0x4548
   2d678:	movt	r0, #6
   2d67c:	str	r4, [r0]
   2d680:	movw	r0, #19724	; 0x4d0c
   2d684:	movt	r0, #6
   2d688:	str	r4, [r0]
   2d68c:	pop	{r4, r5, fp, pc}
   2d690:	movw	r0, #17744	; 0x4550
   2d694:	mov	r1, #55	; 0x37
   2d698:	mov	r2, #1
   2d69c:	movt	r0, #6
   2d6a0:	ldr	r3, [r0]
   2d6a4:	movw	r0, #10524	; 0x291c
   2d6a8:	movt	r0, #5
   2d6ac:	bl	12618 <fwrite@plt>
   2d6b0:	bl	12a5c <abort@plt>
   2d6b4:	push	{r4, r5, r6, sl, fp, lr}
   2d6b8:	add	fp, sp, #16
   2d6bc:	mov	r4, r0
   2d6c0:	movw	r0, #19728	; 0x4d10
   2d6c4:	movt	r0, #6
   2d6c8:	cmp	r4, #0
   2d6cc:	moveq	r4, r0
   2d6d0:	bl	12804 <__errno_location@plt>
   2d6d4:	ldr	r6, [r0]
   2d6d8:	mov	r5, r0
   2d6dc:	mov	r0, r4
   2d6e0:	mov	r1, #48	; 0x30
   2d6e4:	bl	30b48 <__assert_fail@plt+0x1e098>
   2d6e8:	str	r6, [r5]
   2d6ec:	pop	{r4, r5, r6, sl, fp, pc}
   2d6f0:	movw	r1, #19728	; 0x4d10
   2d6f4:	cmp	r0, #0
   2d6f8:	movt	r1, #6
   2d6fc:	movne	r1, r0
   2d700:	ldr	r0, [r1]
   2d704:	bx	lr
   2d708:	movw	r2, #19728	; 0x4d10
   2d70c:	cmp	r0, #0
   2d710:	movt	r2, #6
   2d714:	movne	r2, r0
   2d718:	str	r1, [r2]
   2d71c:	bx	lr
   2d720:	movw	r3, #19728	; 0x4d10
   2d724:	cmp	r0, #0
   2d728:	and	r2, r2, #1
   2d72c:	movt	r3, #6
   2d730:	movne	r3, r0
   2d734:	ubfx	r0, r1, #5, #3
   2d738:	and	r1, r1, #31
   2d73c:	add	ip, r3, r0, lsl #2
   2d740:	mov	r0, #1
   2d744:	ldr	r3, [ip, #8]
   2d748:	and	r0, r0, r3, lsr r1
   2d74c:	eor	r2, r0, r2
   2d750:	eor	r1, r3, r2, lsl r1
   2d754:	str	r1, [ip, #8]
   2d758:	bx	lr
   2d75c:	movw	r2, #19728	; 0x4d10
   2d760:	cmp	r0, #0
   2d764:	movt	r2, #6
   2d768:	movne	r2, r0
   2d76c:	ldr	r0, [r2, #4]
   2d770:	str	r1, [r2, #4]
   2d774:	bx	lr
   2d778:	push	{fp, lr}
   2d77c:	mov	fp, sp
   2d780:	movw	r3, #19728	; 0x4d10
   2d784:	cmp	r0, #0
   2d788:	movt	r3, #6
   2d78c:	movne	r3, r0
   2d790:	cmp	r1, #0
   2d794:	mov	r0, #10
   2d798:	cmpne	r2, #0
   2d79c:	str	r0, [r3]
   2d7a0:	bne	2d7a8 <__assert_fail@plt+0x1acf8>
   2d7a4:	bl	12a5c <abort@plt>
   2d7a8:	str	r1, [r3, #40]	; 0x28
   2d7ac:	str	r2, [r3, #44]	; 0x2c
   2d7b0:	pop	{fp, pc}
   2d7b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d7b8:	add	fp, sp, #28
   2d7bc:	sub	sp, sp, #20
   2d7c0:	mov	r7, r0
   2d7c4:	ldr	r0, [fp, #8]
   2d7c8:	movw	r5, #19728	; 0x4d10
   2d7cc:	mov	r8, r3
   2d7d0:	mov	r9, r2
   2d7d4:	mov	sl, r1
   2d7d8:	movt	r5, #6
   2d7dc:	cmp	r0, #0
   2d7e0:	movne	r5, r0
   2d7e4:	bl	12804 <__errno_location@plt>
   2d7e8:	ldr	r2, [r5, #40]	; 0x28
   2d7ec:	ldr	r3, [r5, #44]	; 0x2c
   2d7f0:	mov	r4, r0
   2d7f4:	ldm	r5, {r0, r1}
   2d7f8:	add	r5, r5, #8
   2d7fc:	ldr	r6, [r4]
   2d800:	stm	sp, {r0, r1, r5}
   2d804:	mov	r0, r7
   2d808:	mov	r1, sl
   2d80c:	str	r2, [sp, #12]
   2d810:	str	r3, [sp, #16]
   2d814:	mov	r2, r9
   2d818:	mov	r3, r8
   2d81c:	bl	2d82c <__assert_fail@plt+0x1ad7c>
   2d820:	str	r6, [r4]
   2d824:	sub	sp, fp, #28
   2d828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d82c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d830:	add	fp, sp, #28
   2d834:	sub	sp, sp, #156	; 0x9c
   2d838:	str	r0, [fp, #-84]	; 0xffffffac
   2d83c:	add	r0, r2, #1
   2d840:	mov	r6, r1
   2d844:	mov	r7, r3
   2d848:	str	r2, [fp, #-80]	; 0xffffffb0
   2d84c:	str	r0, [sp, #80]	; 0x50
   2d850:	ldr	r0, [fp, #12]
   2d854:	and	r1, r0, #1
   2d858:	str	r1, [sp, #36]	; 0x24
   2d85c:	and	r1, r0, #4
   2d860:	str	r1, [sp, #32]
   2d864:	ubfx	r8, r0, #1, #1
   2d868:	bl	12648 <__ctype_get_mb_cur_max@plt>
   2d86c:	str	r0, [sp, #40]	; 0x28
   2d870:	ldr	r0, [fp, #24]
   2d874:	ldr	r4, [fp, #8]
   2d878:	mov	r1, #0
   2d87c:	str	r1, [fp, #-52]	; 0xffffffcc
   2d880:	mov	r1, #0
   2d884:	str	r1, [sp, #60]	; 0x3c
   2d888:	mov	r1, #1
   2d88c:	str	r1, [sp, #84]	; 0x54
   2d890:	str	r0, [sp, #76]	; 0x4c
   2d894:	ldr	r0, [fp, #20]
   2d898:	str	r0, [sp, #72]	; 0x48
   2d89c:	mov	r0, #0
   2d8a0:	str	r0, [sp, #56]	; 0x38
   2d8a4:	mov	r0, #0
   2d8a8:	str	r0, [fp, #-88]	; 0xffffffa8
   2d8ac:	mov	r0, #0
   2d8b0:	str	r0, [fp, #-72]	; 0xffffffb8
   2d8b4:	mov	r0, #0
   2d8b8:	cmp	r4, #10
   2d8bc:	bhi	2ebd8 <__assert_fail@plt+0x1c128>
   2d8c0:	add	r1, pc, #24
   2d8c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   2d8c8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2d8cc:	mov	r5, r6
   2d8d0:	mov	r9, #0
   2d8d4:	mov	r2, #1
   2d8d8:	mov	r3, #0
   2d8dc:	ldr	pc, [r1, r4, lsl #2]
   2d8e0:	andeq	sp, r2, r8, lsr #19
   2d8e4:	andeq	sp, r2, r4, ror #19
   2d8e8:			; <UNDEFINED> instruction: 0x0002d9b8
   2d8ec:	andeq	sp, r2, r0, lsr #19
   2d8f0:	ldrdeq	sp, [r2], -r8
   2d8f4:	andeq	sp, r2, ip, lsr sl
   2d8f8:	andeq	sp, r2, r8, asr #19
   2d8fc:			; <UNDEFINED> instruction: 0x0002dcb4
   2d900:	andeq	sp, r2, ip, lsl #18
   2d904:	andeq	sp, r2, ip, lsl #18
   2d908:	andeq	sp, r2, r4, asr #22
   2d90c:	movw	r6, #10668	; 0x29ac
   2d910:	mov	r0, #0
   2d914:	mov	r2, #5
   2d918:	movt	r6, #5
   2d91c:	mov	r1, r6
   2d920:	bl	12564 <dcgettext@plt>
   2d924:	cmp	r0, r6
   2d928:	str	r0, [sp, #72]	; 0x48
   2d92c:	bne	2db1c <__assert_fail@plt+0x1b06c>
   2d930:	bl	4c5c4 <__assert_fail@plt+0x39b14>
   2d934:	ldrb	r1, [r0]
   2d938:	and	r1, r1, #223	; 0xdf
   2d93c:	cmp	r1, #71	; 0x47
   2d940:	beq	2da9c <__assert_fail@plt+0x1afec>
   2d944:	cmp	r1, #85	; 0x55
   2d948:	bne	2db00 <__assert_fail@plt+0x1b050>
   2d94c:	ldrb	r1, [r0, #1]
   2d950:	and	r1, r1, #223	; 0xdf
   2d954:	cmp	r1, #84	; 0x54
   2d958:	bne	2db00 <__assert_fail@plt+0x1b050>
   2d95c:	ldrb	r1, [r0, #2]
   2d960:	and	r1, r1, #223	; 0xdf
   2d964:	cmp	r1, #70	; 0x46
   2d968:	bne	2db00 <__assert_fail@plt+0x1b050>
   2d96c:	ldrb	r1, [r0, #3]
   2d970:	cmp	r1, #45	; 0x2d
   2d974:	bne	2db00 <__assert_fail@plt+0x1b050>
   2d978:	ldrb	r1, [r0, #4]
   2d97c:	cmp	r1, #56	; 0x38
   2d980:	bne	2db00 <__assert_fail@plt+0x1b050>
   2d984:	ldrb	r0, [r0, #5]
   2d988:	cmp	r0, #0
   2d98c:	movw	r0, #10670	; 0x29ae
   2d990:	movt	r0, #5
   2d994:	str	r0, [sp, #72]	; 0x48
   2d998:	bne	2db00 <__assert_fail@plt+0x1b050>
   2d99c:	b	2db1c <__assert_fail@plt+0x1b06c>
   2d9a0:	mov	r0, #1
   2d9a4:	b	2d9e4 <__assert_fail@plt+0x1af34>
   2d9a8:	mov	r4, #0
   2d9ac:	mov	r9, #0
   2d9b0:	mov	r2, r0
   2d9b4:	b	2da34 <__assert_fail@plt+0x1af84>
   2d9b8:	tst	r8, #1
   2d9bc:	bne	2d9e4 <__assert_fail@plt+0x1af34>
   2d9c0:	mov	r2, r0
   2d9c4:	b	2da0c <__assert_fail@plt+0x1af5c>
   2d9c8:	mov	r0, #1
   2d9cc:	mov	r9, #0
   2d9d0:	mov	r4, #5
   2d9d4:	b	2da50 <__assert_fail@plt+0x1afa0>
   2d9d8:	mov	r2, #1
   2d9dc:	tst	r8, #1
   2d9e0:	beq	2da0c <__assert_fail@plt+0x1af5c>
   2d9e4:	mov	r1, #1
   2d9e8:	mov	r9, #0
   2d9ec:	mov	r4, #2
   2d9f0:	mov	r2, r0
   2d9f4:	mov	r3, #1
   2d9f8:	str	r1, [fp, #-72]	; 0xffffffb8
   2d9fc:	movw	r1, #63048	; 0xf648
   2da00:	movt	r1, #4
   2da04:	str	r1, [fp, #-88]	; 0xffffffa8
   2da08:	b	2dcb4 <__assert_fail@plt+0x1b204>
   2da0c:	cmp	r5, #0
   2da10:	mov	r9, #1
   2da14:	mov	r4, #2
   2da18:	movne	r0, #39	; 0x27
   2da1c:	strbne	r0, [ip]
   2da20:	movw	r0, #63048	; 0xf648
   2da24:	movt	r0, #4
   2da28:	str	r0, [fp, #-88]	; 0xffffffa8
   2da2c:	mov	r0, #1
   2da30:	str	r0, [fp, #-72]	; 0xffffffb8
   2da34:	mov	r3, #0
   2da38:	b	2dcb4 <__assert_fail@plt+0x1b204>
   2da3c:	mov	r4, #5
   2da40:	tst	r8, #1
   2da44:	beq	2da6c <__assert_fail@plt+0x1afbc>
   2da48:	mov	r0, #1
   2da4c:	mov	r9, #0
   2da50:	str	r0, [fp, #-72]	; 0xffffffb8
   2da54:	movw	r0, #10522	; 0x291a
   2da58:	mov	r2, #1
   2da5c:	mov	r3, #1
   2da60:	movt	r0, #5
   2da64:	str	r0, [fp, #-88]	; 0xffffffa8
   2da68:	b	2dcb4 <__assert_fail@plt+0x1b204>
   2da6c:	cmp	r5, #0
   2da70:	mov	r3, #0
   2da74:	mov	r9, #1
   2da78:	mov	r2, #1
   2da7c:	movne	r0, #34	; 0x22
   2da80:	strbne	r0, [ip]
   2da84:	movw	r0, #10522	; 0x291a
   2da88:	movt	r0, #5
   2da8c:	str	r0, [fp, #-88]	; 0xffffffa8
   2da90:	mov	r0, #1
   2da94:	str	r0, [fp, #-72]	; 0xffffffb8
   2da98:	b	2dcb4 <__assert_fail@plt+0x1b204>
   2da9c:	ldrb	r1, [r0, #1]
   2daa0:	and	r1, r1, #223	; 0xdf
   2daa4:	cmp	r1, #66	; 0x42
   2daa8:	bne	2db00 <__assert_fail@plt+0x1b050>
   2daac:	ldrb	r1, [r0, #2]
   2dab0:	cmp	r1, #49	; 0x31
   2dab4:	bne	2db00 <__assert_fail@plt+0x1b050>
   2dab8:	ldrb	r1, [r0, #3]
   2dabc:	cmp	r1, #56	; 0x38
   2dac0:	bne	2db00 <__assert_fail@plt+0x1b050>
   2dac4:	ldrb	r1, [r0, #4]
   2dac8:	cmp	r1, #48	; 0x30
   2dacc:	bne	2db00 <__assert_fail@plt+0x1b050>
   2dad0:	ldrb	r1, [r0, #5]
   2dad4:	cmp	r1, #51	; 0x33
   2dad8:	bne	2db00 <__assert_fail@plt+0x1b050>
   2dadc:	ldrb	r1, [r0, #6]
   2dae0:	cmp	r1, #48	; 0x30
   2dae4:	bne	2db00 <__assert_fail@plt+0x1b050>
   2dae8:	ldrb	r0, [r0, #7]
   2daec:	cmp	r0, #0
   2daf0:	movw	r0, #10678	; 0x29b6
   2daf4:	movt	r0, #5
   2daf8:	str	r0, [sp, #72]	; 0x48
   2dafc:	beq	2db1c <__assert_fail@plt+0x1b06c>
   2db00:	movw	r1, #10522	; 0x291a
   2db04:	movw	r0, #63048	; 0xf648
   2db08:	cmp	r4, #9
   2db0c:	movt	r1, #5
   2db10:	movt	r0, #4
   2db14:	moveq	r0, r1
   2db18:	str	r0, [sp, #72]	; 0x48
   2db1c:	movw	r6, #63048	; 0xf648
   2db20:	mov	r0, #0
   2db24:	mov	r2, #5
   2db28:	movt	r6, #4
   2db2c:	mov	r1, r6
   2db30:	bl	12564 <dcgettext@plt>
   2db34:	cmp	r0, r6
   2db38:	str	r0, [sp, #76]	; 0x4c
   2db3c:	beq	2db88 <__assert_fail@plt+0x1b0d8>
   2db40:	ldr	ip, [fp, #-84]	; 0xffffffac
   2db44:	mov	r9, #0
   2db48:	tst	r8, #1
   2db4c:	bne	2dc90 <__assert_fail@plt+0x1b1e0>
   2db50:	ldr	r0, [sp, #72]	; 0x48
   2db54:	ldrb	r0, [r0]
   2db58:	cmp	r0, #0
   2db5c:	beq	2dc90 <__assert_fail@plt+0x1b1e0>
   2db60:	ldr	r1, [sp, #72]	; 0x48
   2db64:	mov	r9, #0
   2db68:	add	r1, r1, #1
   2db6c:	cmp	r9, r5
   2db70:	strbcc	r0, [ip, r9]
   2db74:	ldrb	r0, [r1, r9]
   2db78:	add	r9, r9, #1
   2db7c:	cmp	r0, #0
   2db80:	bne	2db6c <__assert_fail@plt+0x1b0bc>
   2db84:	b	2dc90 <__assert_fail@plt+0x1b1e0>
   2db88:	bl	4c5c4 <__assert_fail@plt+0x39b14>
   2db8c:	ldrb	r1, [r0]
   2db90:	and	r1, r1, #223	; 0xdf
   2db94:	cmp	r1, #71	; 0x47
   2db98:	beq	2dc08 <__assert_fail@plt+0x1b158>
   2db9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   2dba0:	cmp	r1, #85	; 0x55
   2dba4:	bne	2dc64 <__assert_fail@plt+0x1b1b4>
   2dba8:	ldrb	r1, [r0, #1]
   2dbac:	and	r1, r1, #223	; 0xdf
   2dbb0:	cmp	r1, #84	; 0x54
   2dbb4:	bne	2dc64 <__assert_fail@plt+0x1b1b4>
   2dbb8:	ldrb	r1, [r0, #2]
   2dbbc:	and	r1, r1, #223	; 0xdf
   2dbc0:	cmp	r1, #70	; 0x46
   2dbc4:	bne	2dc64 <__assert_fail@plt+0x1b1b4>
   2dbc8:	ldrb	r1, [r0, #3]
   2dbcc:	cmp	r1, #45	; 0x2d
   2dbd0:	bne	2dc64 <__assert_fail@plt+0x1b1b4>
   2dbd4:	ldrb	r1, [r0, #4]
   2dbd8:	cmp	r1, #56	; 0x38
   2dbdc:	bne	2dc64 <__assert_fail@plt+0x1b1b4>
   2dbe0:	ldrb	r0, [r0, #5]
   2dbe4:	cmp	r0, #0
   2dbe8:	bne	2dc64 <__assert_fail@plt+0x1b1b4>
   2dbec:	movw	r0, #10674	; 0x29b2
   2dbf0:	movt	r0, #5
   2dbf4:	str	r0, [sp, #76]	; 0x4c
   2dbf8:	mov	r9, #0
   2dbfc:	tst	r8, #1
   2dc00:	beq	2db50 <__assert_fail@plt+0x1b0a0>
   2dc04:	b	2dc90 <__assert_fail@plt+0x1b1e0>
   2dc08:	ldrb	r1, [r0, #1]
   2dc0c:	ldr	ip, [fp, #-84]	; 0xffffffac
   2dc10:	and	r1, r1, #223	; 0xdf
   2dc14:	cmp	r1, #66	; 0x42
   2dc18:	bne	2dc64 <__assert_fail@plt+0x1b1b4>
   2dc1c:	ldrb	r1, [r0, #2]
   2dc20:	cmp	r1, #49	; 0x31
   2dc24:	bne	2dc64 <__assert_fail@plt+0x1b1b4>
   2dc28:	ldrb	r1, [r0, #3]
   2dc2c:	cmp	r1, #56	; 0x38
   2dc30:	bne	2dc64 <__assert_fail@plt+0x1b1b4>
   2dc34:	ldrb	r1, [r0, #4]
   2dc38:	cmp	r1, #48	; 0x30
   2dc3c:	bne	2dc64 <__assert_fail@plt+0x1b1b4>
   2dc40:	ldrb	r1, [r0, #5]
   2dc44:	cmp	r1, #51	; 0x33
   2dc48:	bne	2dc64 <__assert_fail@plt+0x1b1b4>
   2dc4c:	ldrb	r1, [r0, #6]
   2dc50:	cmp	r1, #48	; 0x30
   2dc54:	bne	2dc64 <__assert_fail@plt+0x1b1b4>
   2dc58:	ldrb	r0, [r0, #7]
   2dc5c:	cmp	r0, #0
   2dc60:	beq	2ea78 <__assert_fail@plt+0x1bfc8>
   2dc64:	movw	r0, #63048	; 0xf648
   2dc68:	cmp	r4, #9
   2dc6c:	movt	r0, #4
   2dc70:	mov	r1, r0
   2dc74:	movw	r0, #10522	; 0x291a
   2dc78:	movt	r0, #5
   2dc7c:	moveq	r1, r0
   2dc80:	str	r1, [sp, #76]	; 0x4c
   2dc84:	mov	r9, #0
   2dc88:	tst	r8, #1
   2dc8c:	beq	2db50 <__assert_fail@plt+0x1b0a0>
   2dc90:	ldr	r6, [sp, #76]	; 0x4c
   2dc94:	mov	r0, r6
   2dc98:	bl	127bc <strlen@plt>
   2dc9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   2dca0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2dca4:	str	r0, [fp, #-72]	; 0xffffffb8
   2dca8:	str	r6, [fp, #-88]	; 0xffffffa8
   2dcac:	mov	r2, #1
   2dcb0:	mov	r3, r8
   2dcb4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2dcb8:	str	r4, [fp, #-64]	; 0xffffffc0
   2dcbc:	mov	sl, #0
   2dcc0:	str	r3, [fp, #-76]	; 0xffffffb4
   2dcc4:	str	r2, [sp, #88]	; 0x58
   2dcc8:	cmp	r0, #0
   2dccc:	movwne	r0, #1
   2dcd0:	and	r1, r0, r3
   2dcd4:	and	r1, r2, r1
   2dcd8:	str	r1, [sp, #48]	; 0x30
   2dcdc:	sub	r1, r4, #2
   2dce0:	clz	r1, r1
   2dce4:	lsr	r1, r1, #5
   2dce8:	and	r1, r1, r3
   2dcec:	str	r1, [sp, #44]	; 0x2c
   2dcf0:	subs	r1, r4, #2
   2dcf4:	eor	r4, r3, #1
   2dcf8:	movwne	r1, #1
   2dcfc:	str	r4, [sp, #92]	; 0x5c
   2dd00:	orr	r4, r1, r4
   2dd04:	and	r1, r1, r2
   2dd08:	and	r0, r0, r1
   2dd0c:	str	r4, [sp, #64]	; 0x40
   2dd10:	ldr	r4, [sp, #84]	; 0x54
   2dd14:	str	r0, [fp, #-60]	; 0xffffffc4
   2dd18:	orr	r0, r1, r3
   2dd1c:	ldr	r1, [fp, #16]
   2dd20:	eor	r0, r0, #1
   2dd24:	clz	r1, r1
   2dd28:	lsr	r1, r1, #5
   2dd2c:	orr	r0, r1, r0
   2dd30:	str	r0, [fp, #-68]	; 0xffffffbc
   2dd34:	eor	r0, r2, #1
   2dd38:	str	r0, [sp, #52]	; 0x34
   2dd3c:	cmn	r7, #1
   2dd40:	beq	2dd50 <__assert_fail@plt+0x1b2a0>
   2dd44:	cmp	sl, r7
   2dd48:	bne	2dd5c <__assert_fail@plt+0x1b2ac>
   2dd4c:	b	2e9f0 <__assert_fail@plt+0x1bf40>
   2dd50:	ldrb	r0, [lr, sl]
   2dd54:	cmp	r0, #0
   2dd58:	beq	2e9f8 <__assert_fail@plt+0x1bf48>
   2dd5c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2dd60:	cmp	r0, #0
   2dd64:	beq	2ddc4 <__assert_fail@plt+0x1b314>
   2dd68:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2dd6c:	mov	r6, r5
   2dd70:	add	r5, sl, r0
   2dd74:	cmp	r0, #2
   2dd78:	bcc	2dde4 <__assert_fail@plt+0x1b334>
   2dd7c:	mov	r0, #0
   2dd80:	cmn	r7, #1
   2dd84:	str	r0, [fp, #-56]	; 0xffffffc8
   2dd88:	bne	2dda0 <__assert_fail@plt+0x1b2f0>
   2dd8c:	mov	r0, lr
   2dd90:	bl	127bc <strlen@plt>
   2dd94:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2dd98:	ldr	ip, [fp, #-84]	; 0xffffffac
   2dd9c:	mov	r7, r0
   2dda0:	cmp	r5, r7
   2dda4:	bls	2ddf4 <__assert_fail@plt+0x1b344>
   2dda8:	mov	r0, #0
   2ddac:	mov	r5, r6
   2ddb0:	str	r0, [fp, #-48]	; 0xffffffd0
   2ddb4:	ldrb	r6, [lr, sl]
   2ddb8:	cmp	r6, #126	; 0x7e
   2ddbc:	bls	2de44 <__assert_fail@plt+0x1b394>
   2ddc0:	b	2e3a0 <__assert_fail@plt+0x1b8f0>
   2ddc4:	mov	r0, #0
   2ddc8:	str	r0, [fp, #-56]	; 0xffffffc8
   2ddcc:	mov	r0, #0
   2ddd0:	str	r0, [fp, #-48]	; 0xffffffd0
   2ddd4:	ldrb	r6, [lr, sl]
   2ddd8:	cmp	r6, #126	; 0x7e
   2dddc:	bls	2de44 <__assert_fail@plt+0x1b394>
   2dde0:	b	2e3a0 <__assert_fail@plt+0x1b8f0>
   2dde4:	mov	r0, #0
   2dde8:	str	r0, [fp, #-56]	; 0xffffffc8
   2ddec:	cmp	r5, r7
   2ddf0:	bhi	2dda8 <__assert_fail@plt+0x1b2f8>
   2ddf4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   2ddf8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   2ddfc:	add	r0, lr, sl
   2de00:	bl	127a4 <bcmp@plt>
   2de04:	ldr	r2, [sp, #92]	; 0x5c
   2de08:	cmp	r0, #0
   2de0c:	mov	r1, r0
   2de10:	mov	r5, r6
   2de14:	movwne	r1, #1
   2de18:	orr	r1, r1, r2
   2de1c:	tst	r1, #1
   2de20:	beq	2eab8 <__assert_fail@plt+0x1c008>
   2de24:	ldr	ip, [fp, #-84]	; 0xffffffac
   2de28:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2de2c:	clz	r0, r0
   2de30:	lsr	r0, r0, #5
   2de34:	str	r0, [fp, #-48]	; 0xffffffd0
   2de38:	ldrb	r6, [lr, sl]
   2de3c:	cmp	r6, #126	; 0x7e
   2de40:	bhi	2e3a0 <__assert_fail@plt+0x1b8f0>
   2de44:	add	r3, pc, #16
   2de48:	mov	r8, #1
   2de4c:	mov	r2, #110	; 0x6e
   2de50:	mov	r0, #97	; 0x61
   2de54:	mov	r1, #0
   2de58:	ldr	pc, [r3, r6, lsl #2]
   2de5c:	andeq	lr, r2, r8, asr r1
   2de60:	andeq	lr, r2, r0, lsr #7
   2de64:	andeq	lr, r2, r0, lsr #7
   2de68:	andeq	lr, r2, r0, lsr #7
   2de6c:	andeq	lr, r2, r0, lsr #7
   2de70:	andeq	lr, r2, r0, lsr #7
   2de74:	andeq	lr, r2, r0, lsr #7
   2de78:	andeq	lr, r2, r4, asr r4
   2de7c:	andeq	lr, r2, r8, lsr r1
   2de80:	andeq	lr, r2, r0, lsr r1
   2de84:	andeq	lr, r2, r4, asr #2
   2de88:	andeq	lr, r2, r4, ror r2
   2de8c:	andeq	lr, r2, r8, lsr #2
   2de90:	andeq	lr, r2, r0, asr #2
   2de94:	andeq	lr, r2, r0, lsr #7
   2de98:	andeq	lr, r2, r0, lsr #7
   2de9c:	andeq	lr, r2, r0, lsr #7
   2dea0:	andeq	lr, r2, r0, lsr #7
   2dea4:	andeq	lr, r2, r0, lsr #7
   2dea8:	andeq	lr, r2, r0, lsr #7
   2deac:	andeq	lr, r2, r0, lsr #7
   2deb0:	andeq	lr, r2, r0, lsr #7
   2deb4:	andeq	lr, r2, r0, lsr #7
   2deb8:	andeq	lr, r2, r0, lsr #7
   2debc:	andeq	lr, r2, r0, lsr #7
   2dec0:	andeq	lr, r2, r0, lsr #7
   2dec4:	andeq	lr, r2, r0, lsr #7
   2dec8:	andeq	lr, r2, r0, lsr #7
   2decc:	andeq	lr, r2, r0, lsr #7
   2ded0:	andeq	lr, r2, r0, lsr #7
   2ded4:	andeq	lr, r2, r0, lsr #7
   2ded8:	andeq	lr, r2, r0, lsr #7
   2dedc:	andeq	lr, r2, ip, asr #1
   2dee0:	ldrdeq	lr, [r2], -r0
   2dee4:	ldrdeq	lr, [r2], -r0
   2dee8:	andeq	lr, r2, r0, asr #1
   2deec:	ldrdeq	lr, [r2], -r0
   2def0:	andeq	lr, r2, r8, asr r0
   2def4:	ldrdeq	lr, [r2], -r0
   2def8:	andeq	lr, r2, ip, ror r2
   2defc:	ldrdeq	lr, [r2], -r0
   2df00:	ldrdeq	lr, [r2], -r0
   2df04:	ldrdeq	lr, [r2], -r0
   2df08:	andeq	lr, r2, r8, asr r0
   2df0c:	andeq	lr, r2, r8, asr r0
   2df10:	andeq	lr, r2, r8, asr r0
   2df14:	andeq	lr, r2, r8, asr r0
   2df18:	andeq	lr, r2, r8, asr r0
   2df1c:	andeq	lr, r2, r8, asr r0
   2df20:	andeq	lr, r2, r8, asr r0
   2df24:	andeq	lr, r2, r8, asr r0
   2df28:	andeq	lr, r2, r8, asr r0
   2df2c:	andeq	lr, r2, r8, asr r0
   2df30:	andeq	lr, r2, r8, asr r0
   2df34:	andeq	lr, r2, r8, asr r0
   2df38:	andeq	lr, r2, r8, asr r0
   2df3c:	andeq	lr, r2, r8, asr r0
   2df40:	andeq	lr, r2, r8, asr r0
   2df44:	andeq	lr, r2, r8, asr r0
   2df48:	ldrdeq	lr, [r2], -r0
   2df4c:	ldrdeq	lr, [r2], -r0
   2df50:	ldrdeq	lr, [r2], -r0
   2df54:	ldrdeq	lr, [r2], -r0
   2df58:	andeq	lr, r2, r0, asr #4
   2df5c:	andeq	lr, r2, r0, lsr #7
   2df60:	andeq	lr, r2, r8, asr r0
   2df64:	andeq	lr, r2, r8, asr r0
   2df68:	andeq	lr, r2, r8, asr r0
   2df6c:	andeq	lr, r2, r8, asr r0
   2df70:	andeq	lr, r2, r8, asr r0
   2df74:	andeq	lr, r2, r8, asr r0
   2df78:	andeq	lr, r2, r8, asr r0
   2df7c:	andeq	lr, r2, r8, asr r0
   2df80:	andeq	lr, r2, r8, asr r0
   2df84:	andeq	lr, r2, r8, asr r0
   2df88:	andeq	lr, r2, r8, asr r0
   2df8c:	andeq	lr, r2, r8, asr r0
   2df90:	andeq	lr, r2, r8, asr r0
   2df94:	andeq	lr, r2, r8, asr r0
   2df98:	andeq	lr, r2, r8, asr r0
   2df9c:	andeq	lr, r2, r8, asr r0
   2dfa0:	andeq	lr, r2, r8, asr r0
   2dfa4:	andeq	lr, r2, r8, asr r0
   2dfa8:	andeq	lr, r2, r8, asr r0
   2dfac:	andeq	lr, r2, r8, asr r0
   2dfb0:	andeq	lr, r2, r8, asr r0
   2dfb4:	andeq	lr, r2, r8, asr r0
   2dfb8:	andeq	lr, r2, r8, asr r0
   2dfbc:	andeq	lr, r2, r8, asr r0
   2dfc0:	andeq	lr, r2, r8, asr r0
   2dfc4:	andeq	lr, r2, r8, asr r0
   2dfc8:	ldrdeq	lr, [r2], -r0
   2dfcc:	andeq	lr, r2, r4, lsl #2
   2dfd0:	andeq	lr, r2, r8, asr r0
   2dfd4:	ldrdeq	lr, [r2], -r0
   2dfd8:	andeq	lr, r2, r8, asr r0
   2dfdc:	ldrdeq	lr, [r2], -r0
   2dfe0:	andeq	lr, r2, r8, asr r0
   2dfe4:	andeq	lr, r2, r8, asr r0
   2dfe8:	andeq	lr, r2, r8, asr r0
   2dfec:	andeq	lr, r2, r8, asr r0
   2dff0:	andeq	lr, r2, r8, asr r0
   2dff4:	andeq	lr, r2, r8, asr r0
   2dff8:	andeq	lr, r2, r8, asr r0
   2dffc:	andeq	lr, r2, r8, asr r0
   2e000:	andeq	lr, r2, r8, asr r0
   2e004:	andeq	lr, r2, r8, asr r0
   2e008:	andeq	lr, r2, r8, asr r0
   2e00c:	andeq	lr, r2, r8, asr r0
   2e010:	andeq	lr, r2, r8, asr r0
   2e014:	andeq	lr, r2, r8, asr r0
   2e018:	andeq	lr, r2, r8, asr r0
   2e01c:	andeq	lr, r2, r8, asr r0
   2e020:	andeq	lr, r2, r8, asr r0
   2e024:	andeq	lr, r2, r8, asr r0
   2e028:	andeq	lr, r2, r8, asr r0
   2e02c:	andeq	lr, r2, r8, asr r0
   2e030:	andeq	lr, r2, r8, asr r0
   2e034:	andeq	lr, r2, r8, asr r0
   2e038:	andeq	lr, r2, r8, asr r0
   2e03c:	andeq	lr, r2, r8, asr r0
   2e040:	andeq	lr, r2, r8, asr r0
   2e044:	andeq	lr, r2, r8, asr r0
   2e048:	muleq	r2, r8, r0
   2e04c:	ldrdeq	lr, [r2], -r0
   2e050:	muleq	r2, r8, r0
   2e054:	andeq	lr, r2, r0, asr #1
   2e058:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2e05c:	tst	r0, #1
   2e060:	bne	2e318 <__assert_fail@plt+0x1b868>
   2e064:	ldr	r1, [fp, #16]
   2e068:	ubfx	r0, r6, #5, #3
   2e06c:	mov	r2, #1
   2e070:	ldr	r0, [r1, r0, lsl #2]
   2e074:	and	r1, r6, #31
   2e078:	tst	r0, r2, lsl r1
   2e07c:	beq	2e318 <__assert_fail@plt+0x1b868>
   2e080:	mov	r0, r6
   2e084:	mov	r1, r8
   2e088:	ldr	r2, [fp, #-76]	; 0xffffffb4
   2e08c:	tst	r2, #1
   2e090:	beq	2e338 <__assert_fail@plt+0x1b888>
   2e094:	b	2ea94 <__assert_fail@plt+0x1bfe4>
   2e098:	cmp	r7, #1
   2e09c:	beq	2e0c0 <__assert_fail@plt+0x1b610>
   2e0a0:	mov	r8, #0
   2e0a4:	cmn	r7, #1
   2e0a8:	bne	2e304 <__assert_fail@plt+0x1b854>
   2e0ac:	ldrb	r0, [lr, #1]
   2e0b0:	cmp	r0, #0
   2e0b4:	beq	2e0c0 <__assert_fail@plt+0x1b610>
   2e0b8:	mvn	r7, #0
   2e0bc:	b	2e304 <__assert_fail@plt+0x1b854>
   2e0c0:	mov	r8, #0
   2e0c4:	cmp	sl, #0
   2e0c8:	bne	2e304 <__assert_fail@plt+0x1b854>
   2e0cc:	mov	r1, #1
   2e0d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2e0d4:	cmp	r0, #2
   2e0d8:	bne	2e0f0 <__assert_fail@plt+0x1b640>
   2e0dc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2e0e0:	mov	r8, r1
   2e0e4:	tst	r0, #1
   2e0e8:	beq	2e058 <__assert_fail@plt+0x1b5a8>
   2e0ec:	b	2ea94 <__assert_fail@plt+0x1bfe4>
   2e0f0:	mov	r8, r1
   2e0f4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2e0f8:	tst	r0, #1
   2e0fc:	beq	2e064 <__assert_fail@plt+0x1b5b4>
   2e100:	b	2e318 <__assert_fail@plt+0x1b868>
   2e104:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2e108:	cmp	r0, #2
   2e10c:	bne	2e3cc <__assert_fail@plt+0x1b91c>
   2e110:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2e114:	tst	r0, #1
   2e118:	bne	2ea94 <__assert_fail@plt+0x1bfe4>
   2e11c:	mov	r0, #0
   2e120:	str	r0, [fp, #-56]	; 0xffffffc8
   2e124:	b	2e3e4 <__assert_fail@plt+0x1b934>
   2e128:	mov	r0, #102	; 0x66
   2e12c:	b	2e454 <__assert_fail@plt+0x1b9a4>
   2e130:	mov	r2, #116	; 0x74
   2e134:	b	2e144 <__assert_fail@plt+0x1b694>
   2e138:	mov	r0, #98	; 0x62
   2e13c:	b	2e454 <__assert_fail@plt+0x1b9a4>
   2e140:	mov	r2, #114	; 0x72
   2e144:	ldr	r0, [sp, #64]	; 0x40
   2e148:	tst	r0, #1
   2e14c:	mov	r0, r2
   2e150:	bne	2e454 <__assert_fail@plt+0x1b9a4>
   2e154:	b	2ea94 <__assert_fail@plt+0x1bfe4>
   2e158:	ldr	r0, [sp, #88]	; 0x58
   2e15c:	tst	r0, #1
   2e160:	beq	2e474 <__assert_fail@plt+0x1b9c4>
   2e164:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2e168:	tst	r0, #1
   2e16c:	bne	2ebd0 <__assert_fail@plt+0x1c120>
   2e170:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2e174:	ldr	r1, [fp, #-52]	; 0xffffffcc
   2e178:	subs	r0, r0, #2
   2e17c:	movwne	r0, #1
   2e180:	orr	r0, r0, r1
   2e184:	tst	r0, #1
   2e188:	bne	2e1c4 <__assert_fail@plt+0x1b714>
   2e18c:	cmp	r9, r5
   2e190:	movcc	r0, #39	; 0x27
   2e194:	strbcc	r0, [ip, r9]
   2e198:	add	r0, r9, #1
   2e19c:	cmp	r0, r5
   2e1a0:	movcc	r1, #36	; 0x24
   2e1a4:	strbcc	r1, [ip, r0]
   2e1a8:	add	r0, r9, #2
   2e1ac:	add	r9, r9, #3
   2e1b0:	cmp	r0, r5
   2e1b4:	movcc	r1, #39	; 0x27
   2e1b8:	strbcc	r1, [ip, r0]
   2e1bc:	mov	r0, #1
   2e1c0:	str	r0, [fp, #-52]	; 0xffffffcc
   2e1c4:	mov	r1, #1
   2e1c8:	cmp	r9, r5
   2e1cc:	mov	r8, #0
   2e1d0:	mov	r6, #48	; 0x30
   2e1d4:	str	r1, [fp, #-56]	; 0xffffffc8
   2e1d8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   2e1dc:	movcc	r0, #92	; 0x5c
   2e1e0:	strbcc	r0, [ip, r9]
   2e1e4:	add	r0, r9, #1
   2e1e8:	cmp	r1, #2
   2e1ec:	beq	2e640 <__assert_fail@plt+0x1bb90>
   2e1f0:	add	r1, sl, #1
   2e1f4:	cmp	r1, r7
   2e1f8:	bcs	2e640 <__assert_fail@plt+0x1bb90>
   2e1fc:	ldrb	r1, [lr, r1]
   2e200:	sub	r1, r1, #48	; 0x30
   2e204:	uxtb	r1, r1
   2e208:	cmp	r1, #9
   2e20c:	bhi	2e640 <__assert_fail@plt+0x1bb90>
   2e210:	cmp	r0, r5
   2e214:	movcc	r1, #48	; 0x30
   2e218:	strbcc	r1, [ip, r0]
   2e21c:	add	r0, r9, #2
   2e220:	add	r9, r9, #3
   2e224:	cmp	r0, r5
   2e228:	movcc	r1, #48	; 0x30
   2e22c:	strbcc	r1, [ip, r0]
   2e230:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2e234:	tst	r0, #1
   2e238:	beq	2e064 <__assert_fail@plt+0x1b5b4>
   2e23c:	b	2e318 <__assert_fail@plt+0x1b868>
   2e240:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2e244:	mov	r6, #63	; 0x3f
   2e248:	cmp	r0, #5
   2e24c:	beq	2e654 <__assert_fail@plt+0x1bba4>
   2e250:	mov	r1, #0
   2e254:	cmp	r0, #2
   2e258:	str	r1, [fp, #-56]	; 0xffffffc8
   2e25c:	bne	2e71c <__assert_fail@plt+0x1bc6c>
   2e260:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2e264:	mov	r8, #0
   2e268:	tst	r0, #1
   2e26c:	beq	2e058 <__assert_fail@plt+0x1b5a8>
   2e270:	b	2ea94 <__assert_fail@plt+0x1bfe4>
   2e274:	mov	r0, #118	; 0x76
   2e278:	b	2e454 <__assert_fail@plt+0x1b9a4>
   2e27c:	mov	r0, #1
   2e280:	mov	r6, #39	; 0x27
   2e284:	str	r0, [sp, #60]	; 0x3c
   2e288:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2e28c:	cmp	r0, #2
   2e290:	bne	2e494 <__assert_fail@plt+0x1b9e4>
   2e294:	ldr	r0, [fp, #-76]	; 0xffffffb4
   2e298:	tst	r0, #1
   2e29c:	bne	2ea94 <__assert_fail@plt+0x1bfe4>
   2e2a0:	ldr	r2, [sp, #56]	; 0x38
   2e2a4:	clz	r1, r5
   2e2a8:	mov	r8, #1
   2e2ac:	lsr	r1, r1, #5
   2e2b0:	cmp	r2, #0
   2e2b4:	mov	r0, r2
   2e2b8:	movwne	r0, #1
   2e2bc:	orrs	r0, r0, r1
   2e2c0:	moveq	r2, r5
   2e2c4:	moveq	r5, r0
   2e2c8:	cmp	r9, r5
   2e2cc:	str	r2, [sp, #56]	; 0x38
   2e2d0:	movcc	r0, #39	; 0x27
   2e2d4:	strbcc	r0, [ip, r9]
   2e2d8:	add	r0, r9, #1
   2e2dc:	cmp	r0, r5
   2e2e0:	movcc	r1, #92	; 0x5c
   2e2e4:	strbcc	r1, [ip, r0]
   2e2e8:	add	r0, r9, #2
   2e2ec:	add	r9, r9, #3
   2e2f0:	cmp	r0, r5
   2e2f4:	movcc	r1, #39	; 0x27
   2e2f8:	strbcc	r1, [ip, r0]
   2e2fc:	mov	r0, #0
   2e300:	str	r0, [fp, #-52]	; 0xffffffcc
   2e304:	mov	r0, #0
   2e308:	str	r0, [fp, #-56]	; 0xffffffc8
   2e30c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2e310:	tst	r0, #1
   2e314:	beq	2e064 <__assert_fail@plt+0x1b5b4>
   2e318:	ldr	r0, [fp, #-48]	; 0xffffffd0
   2e31c:	mov	r1, r8
   2e320:	cmp	r0, #0
   2e324:	mov	r0, r6
   2e328:	beq	2e3ec <__assert_fail@plt+0x1b93c>
   2e32c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   2e330:	tst	r2, #1
   2e334:	bne	2ea94 <__assert_fail@plt+0x1bfe4>
   2e338:	ldr	r2, [fp, #-64]	; 0xffffffc0
   2e33c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   2e340:	subs	r2, r2, #2
   2e344:	movwne	r2, #1
   2e348:	orr	r2, r2, r3
   2e34c:	tst	r2, #1
   2e350:	bne	2e38c <__assert_fail@plt+0x1b8dc>
   2e354:	cmp	r9, r5
   2e358:	movcc	r2, #39	; 0x27
   2e35c:	strbcc	r2, [ip, r9]
   2e360:	add	r2, r9, #1
   2e364:	cmp	r2, r5
   2e368:	movcc	r3, #36	; 0x24
   2e36c:	strbcc	r3, [ip, r2]
   2e370:	add	r2, r9, #2
   2e374:	add	r9, r9, #3
   2e378:	cmp	r2, r5
   2e37c:	movcc	r3, #39	; 0x27
   2e380:	strbcc	r3, [ip, r2]
   2e384:	mov	r2, #1
   2e388:	str	r2, [fp, #-52]	; 0xffffffcc
   2e38c:	cmp	r9, r5
   2e390:	movcc	r2, #92	; 0x5c
   2e394:	strbcc	r2, [ip, r9]
   2e398:	add	r9, r9, #1
   2e39c:	b	2e434 <__assert_fail@plt+0x1b984>
   2e3a0:	ldr	r0, [sp, #40]	; 0x28
   2e3a4:	cmp	r0, #1
   2e3a8:	bne	2e4a8 <__assert_fail@plt+0x1b9f8>
   2e3ac:	bl	12768 <__ctype_b_loc@plt>
   2e3b0:	ldr	r0, [r0]
   2e3b4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2e3b8:	mov	r1, #1
   2e3bc:	add	r0, r0, r6, lsl #1
   2e3c0:	ldrb	r0, [r0, #1]
   2e3c4:	ubfx	r8, r0, #6, #1
   2e3c8:	b	2e800 <__assert_fail@plt+0x1bd50>
   2e3cc:	ldr	r1, [sp, #48]	; 0x30
   2e3d0:	mov	r0, #0
   2e3d4:	str	r0, [fp, #-56]	; 0xffffffc8
   2e3d8:	mov	r0, #92	; 0x5c
   2e3dc:	cmp	r1, #0
   2e3e0:	beq	2e454 <__assert_fail@plt+0x1b9a4>
   2e3e4:	mov	r6, #92	; 0x5c
   2e3e8:	mov	r8, #0
   2e3ec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   2e3f0:	cmp	r0, #0
   2e3f4:	bne	2e42c <__assert_fail@plt+0x1b97c>
   2e3f8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2e3fc:	tst	r0, #1
   2e400:	beq	2e42c <__assert_fail@plt+0x1b97c>
   2e404:	cmp	r9, r5
   2e408:	movcc	r0, #39	; 0x27
   2e40c:	strbcc	r0, [ip, r9]
   2e410:	add	r0, r9, #1
   2e414:	add	r9, r9, #2
   2e418:	cmp	r0, r5
   2e41c:	movcc	r1, #39	; 0x27
   2e420:	strbcc	r1, [ip, r0]
   2e424:	mov	r0, #0
   2e428:	str	r0, [fp, #-52]	; 0xffffffcc
   2e42c:	mov	r1, r8
   2e430:	mov	r0, r6
   2e434:	cmp	r9, r5
   2e438:	and	r4, r4, r1
   2e43c:	strbcc	r0, [ip, r9]
   2e440:	add	r9, r9, #1
   2e444:	add	sl, sl, #1
   2e448:	cmn	r7, #1
   2e44c:	bne	2dd44 <__assert_fail@plt+0x1b294>
   2e450:	b	2dd50 <__assert_fail@plt+0x1b2a0>
   2e454:	mov	r1, #0
   2e458:	mov	r8, #0
   2e45c:	str	r1, [fp, #-56]	; 0xffffffc8
   2e460:	ldr	r1, [sp, #88]	; 0x58
   2e464:	tst	r1, #1
   2e468:	mov	r1, #0
   2e46c:	beq	2e058 <__assert_fail@plt+0x1b5a8>
   2e470:	b	2e32c <__assert_fail@plt+0x1b87c>
   2e474:	ldr	r0, [sp, #36]	; 0x24
   2e478:	mov	r6, #0
   2e47c:	mov	r8, #0
   2e480:	cmp	r0, #0
   2e484:	mov	r0, #0
   2e488:	str	r0, [fp, #-56]	; 0xffffffc8
   2e48c:	bne	2e444 <__assert_fail@plt+0x1b994>
   2e490:	b	2e058 <__assert_fail@plt+0x1b5a8>
   2e494:	mov	r8, #1
   2e498:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2e49c:	tst	r0, #1
   2e4a0:	beq	2e064 <__assert_fail@plt+0x1b5b4>
   2e4a4:	b	2e318 <__assert_fail@plt+0x1b868>
   2e4a8:	mov	r0, #0
   2e4ac:	cmn	r7, #1
   2e4b0:	str	r0, [fp, #-36]	; 0xffffffdc
   2e4b4:	str	r0, [fp, #-40]	; 0xffffffd8
   2e4b8:	bne	2e4cc <__assert_fail@plt+0x1ba1c>
   2e4bc:	mov	r0, lr
   2e4c0:	bl	127bc <strlen@plt>
   2e4c4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2e4c8:	mov	r7, r0
   2e4cc:	ldr	r0, [sp, #44]	; 0x2c
   2e4d0:	str	r4, [sp, #84]	; 0x54
   2e4d4:	str	r5, [sp, #28]
   2e4d8:	cmp	r0, #0
   2e4dc:	beq	2e730 <__assert_fail@plt+0x1bc80>
   2e4e0:	ldr	r0, [sp, #80]	; 0x50
   2e4e4:	mov	r8, #1
   2e4e8:	mov	r5, #0
   2e4ec:	add	r0, r0, sl
   2e4f0:	str	r0, [sp, #24]
   2e4f4:	sub	r0, fp, #40	; 0x28
   2e4f8:	mov	r3, r0
   2e4fc:	b	2e538 <__assert_fail@plt+0x1ba88>
   2e500:	ldr	r5, [sp, #68]	; 0x44
   2e504:	add	r5, r0, r5
   2e508:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2e50c:	bl	125e8 <iswprint@plt>
   2e510:	cmp	r0, #0
   2e514:	sub	r4, fp, #40	; 0x28
   2e518:	movwne	r0, #1
   2e51c:	and	r8, r8, r0
   2e520:	mov	r0, r4
   2e524:	bl	1251c <mbsinit@plt>
   2e528:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2e52c:	mov	r3, r4
   2e530:	cmp	r0, #0
   2e534:	bne	2e7f4 <__assert_fail@plt+0x1bd44>
   2e538:	str	r5, [sp, #68]	; 0x44
   2e53c:	add	r5, r5, sl
   2e540:	sub	r0, fp, #44	; 0x2c
   2e544:	add	r1, lr, r5
   2e548:	sub	r2, r7, r5
   2e54c:	bl	35380 <__assert_fail@plt+0x228d0>
   2e550:	cmn	r0, #2
   2e554:	beq	2e7b4 <__assert_fail@plt+0x1bd04>
   2e558:	ldr	ip, [fp, #-84]	; 0xffffffac
   2e55c:	cmn	r0, #1
   2e560:	beq	2e7a8 <__assert_fail@plt+0x1bcf8>
   2e564:	cmp	r0, #0
   2e568:	beq	2e7ac <__assert_fail@plt+0x1bcfc>
   2e56c:	cmp	r0, #2
   2e570:	bcc	2e500 <__assert_fail@plt+0x1ba50>
   2e574:	ldr	r1, [sp, #68]	; 0x44
   2e578:	ldr	r2, [sp, #24]
   2e57c:	add	r1, r2, r1
   2e580:	sub	r2, r0, #1
   2e584:	ldrb	r3, [r1]
   2e588:	sub	r3, r3, #91	; 0x5b
   2e58c:	cmp	r3, #33	; 0x21
   2e590:	bls	2e5b0 <__assert_fail@plt+0x1bb00>
   2e594:	add	r1, r1, #1
   2e598:	subs	r2, r2, #1
   2e59c:	beq	2e500 <__assert_fail@plt+0x1ba50>
   2e5a0:	ldrb	r3, [r1]
   2e5a4:	sub	r3, r3, #91	; 0x5b
   2e5a8:	cmp	r3, #33	; 0x21
   2e5ac:	bhi	2e594 <__assert_fail@plt+0x1bae4>
   2e5b0:	add	r5, pc, #0
   2e5b4:	ldr	pc, [r5, r3, lsl #2]
   2e5b8:	andeq	lr, r2, ip, asr #21
   2e5bc:	andeq	lr, r2, ip, asr #21
   2e5c0:	muleq	r2, r4, r5
   2e5c4:	andeq	lr, r2, ip, asr #21
   2e5c8:	muleq	r2, r4, r5
   2e5cc:	andeq	lr, r2, ip, asr #21
   2e5d0:	muleq	r2, r4, r5
   2e5d4:	muleq	r2, r4, r5
   2e5d8:	muleq	r2, r4, r5
   2e5dc:	muleq	r2, r4, r5
   2e5e0:	muleq	r2, r4, r5
   2e5e4:	muleq	r2, r4, r5
   2e5e8:	muleq	r2, r4, r5
   2e5ec:	muleq	r2, r4, r5
   2e5f0:	muleq	r2, r4, r5
   2e5f4:	muleq	r2, r4, r5
   2e5f8:	muleq	r2, r4, r5
   2e5fc:	muleq	r2, r4, r5
   2e600:	muleq	r2, r4, r5
   2e604:	muleq	r2, r4, r5
   2e608:	muleq	r2, r4, r5
   2e60c:	muleq	r2, r4, r5
   2e610:	muleq	r2, r4, r5
   2e614:	muleq	r2, r4, r5
   2e618:	muleq	r2, r4, r5
   2e61c:	muleq	r2, r4, r5
   2e620:	muleq	r2, r4, r5
   2e624:	muleq	r2, r4, r5
   2e628:	muleq	r2, r4, r5
   2e62c:	muleq	r2, r4, r5
   2e630:	muleq	r2, r4, r5
   2e634:	muleq	r2, r4, r5
   2e638:	muleq	r2, r4, r5
   2e63c:	andeq	lr, r2, ip, asr #21
   2e640:	mov	r9, r0
   2e644:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2e648:	tst	r0, #1
   2e64c:	beq	2e064 <__assert_fail@plt+0x1b5b4>
   2e650:	b	2e318 <__assert_fail@plt+0x1b868>
   2e654:	mov	r0, #0
   2e658:	str	r0, [fp, #-56]	; 0xffffffc8
   2e65c:	ldr	r0, [sp, #32]
   2e660:	cmp	r0, #0
   2e664:	beq	2e71c <__assert_fail@plt+0x1bc6c>
   2e668:	add	r0, sl, #2
   2e66c:	mov	r1, r7
   2e670:	cmp	r0, r7
   2e674:	bcs	2e71c <__assert_fail@plt+0x1bc6c>
   2e678:	add	r1, sl, lr
   2e67c:	ldrb	r1, [r1, #1]
   2e680:	cmp	r1, #63	; 0x3f
   2e684:	bne	2e71c <__assert_fail@plt+0x1bc6c>
   2e688:	ldrb	r8, [lr, r0]
   2e68c:	sub	r2, r8, #33	; 0x21
   2e690:	cmp	r2, #29
   2e694:	bhi	2e71c <__assert_fail@plt+0x1bc6c>
   2e698:	mov	r1, r4
   2e69c:	movw	r4, #20929	; 0x51c1
   2e6a0:	mov	r3, #1
   2e6a4:	movt	r4, #14336	; 0x3800
   2e6a8:	tst	r4, r3, lsl r2
   2e6ac:	beq	2e9d8 <__assert_fail@plt+0x1bf28>
   2e6b0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   2e6b4:	tst	r2, #1
   2e6b8:	bne	2ea94 <__assert_fail@plt+0x1bfe4>
   2e6bc:	cmp	r9, r5
   2e6c0:	mov	r6, r8
   2e6c4:	mov	r4, r1
   2e6c8:	mov	sl, r0
   2e6cc:	mov	r8, #0
   2e6d0:	movcc	r2, #63	; 0x3f
   2e6d4:	strbcc	r2, [ip, r9]
   2e6d8:	add	r2, r9, #1
   2e6dc:	cmp	r2, r5
   2e6e0:	movcc	r3, #34	; 0x22
   2e6e4:	strbcc	r3, [ip, r2]
   2e6e8:	add	r2, r9, #2
   2e6ec:	cmp	r2, r5
   2e6f0:	movcc	r3, #34	; 0x22
   2e6f4:	strbcc	r3, [ip, r2]
   2e6f8:	add	r2, r9, #3
   2e6fc:	add	r9, r9, #4
   2e700:	cmp	r2, r5
   2e704:	movcc	r3, #63	; 0x3f
   2e708:	strbcc	r3, [ip, r2]
   2e70c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2e710:	tst	r0, #1
   2e714:	beq	2e064 <__assert_fail@plt+0x1b5b4>
   2e718:	b	2e318 <__assert_fail@plt+0x1b868>
   2e71c:	mov	r8, #0
   2e720:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2e724:	tst	r0, #1
   2e728:	beq	2e064 <__assert_fail@plt+0x1b5b4>
   2e72c:	b	2e318 <__assert_fail@plt+0x1b868>
   2e730:	mov	r8, #1
   2e734:	mov	r5, #0
   2e738:	sub	r4, fp, #40	; 0x28
   2e73c:	str	r5, [sp, #68]	; 0x44
   2e740:	add	r5, r5, sl
   2e744:	sub	r0, fp, #44	; 0x2c
   2e748:	mov	r3, r4
   2e74c:	add	r1, lr, r5
   2e750:	sub	r2, r7, r5
   2e754:	bl	35380 <__assert_fail@plt+0x228d0>
   2e758:	cmn	r0, #2
   2e75c:	beq	2e7b4 <__assert_fail@plt+0x1bd04>
   2e760:	cmn	r0, #1
   2e764:	beq	2e7a8 <__assert_fail@plt+0x1bcf8>
   2e768:	ldr	r5, [sp, #68]	; 0x44
   2e76c:	cmp	r0, #0
   2e770:	beq	2e7f0 <__assert_fail@plt+0x1bd40>
   2e774:	add	r5, r0, r5
   2e778:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2e77c:	bl	125e8 <iswprint@plt>
   2e780:	cmp	r0, #0
   2e784:	sub	r4, fp, #40	; 0x28
   2e788:	movwne	r0, #1
   2e78c:	and	r8, r8, r0
   2e790:	mov	r0, r4
   2e794:	bl	1251c <mbsinit@plt>
   2e798:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2e79c:	cmp	r0, #0
   2e7a0:	beq	2e73c <__assert_fail@plt+0x1bc8c>
   2e7a4:	b	2e7f4 <__assert_fail@plt+0x1bd44>
   2e7a8:	mov	r8, #0
   2e7ac:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2e7b0:	b	2e7e8 <__assert_fail@plt+0x1bd38>
   2e7b4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2e7b8:	mov	r8, #0
   2e7bc:	cmp	r5, r7
   2e7c0:	bcs	2e7e8 <__assert_fail@plt+0x1bd38>
   2e7c4:	ldrb	r0, [lr, r5]
   2e7c8:	cmp	r0, #0
   2e7cc:	beq	2e7e8 <__assert_fail@plt+0x1bd38>
   2e7d0:	ldr	r0, [sp, #68]	; 0x44
   2e7d4:	add	r0, r0, #1
   2e7d8:	add	r5, r0, sl
   2e7dc:	str	r0, [sp, #68]	; 0x44
   2e7e0:	cmp	r5, r7
   2e7e4:	bcc	2e7c4 <__assert_fail@plt+0x1bd14>
   2e7e8:	ldr	r5, [sp, #68]	; 0x44
   2e7ec:	b	2e7f4 <__assert_fail@plt+0x1bd44>
   2e7f0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2e7f4:	mov	r1, r5
   2e7f8:	ldr	r5, [sp, #28]
   2e7fc:	ldr	r4, [sp, #84]	; 0x54
   2e800:	ldr	r0, [sp, #52]	; 0x34
   2e804:	ldr	ip, [fp, #-84]	; 0xffffffac
   2e808:	cmp	r1, #1
   2e80c:	orr	r2, r8, r0
   2e810:	mov	r0, r1
   2e814:	bhi	2e820 <__assert_fail@plt+0x1bd70>
   2e818:	tst	r2, #1
   2e81c:	bne	2e058 <__assert_fail@plt+0x1b5a8>
   2e820:	add	r0, r0, sl
   2e824:	str	r2, [sp, #84]	; 0x54
   2e828:	str	r0, [fp, #-56]	; 0xffffffc8
   2e82c:	mov	r0, #0
   2e830:	tst	r2, #1
   2e834:	bne	2e914 <__assert_fail@plt+0x1be64>
   2e838:	ldr	r1, [fp, #-76]	; 0xffffffb4
   2e83c:	tst	r1, #1
   2e840:	bne	2ea94 <__assert_fail@plt+0x1bfe4>
   2e844:	ldr	r1, [fp, #-64]	; 0xffffffc0
   2e848:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2e84c:	subs	r2, r1, #2
   2e850:	movwne	r2, #1
   2e854:	orr	r2, r2, r0
   2e858:	tst	r2, #1
   2e85c:	bne	2e898 <__assert_fail@plt+0x1bde8>
   2e860:	cmp	r9, r5
   2e864:	add	r2, r9, #1
   2e868:	mov	r0, #1
   2e86c:	movcc	r1, #39	; 0x27
   2e870:	str	r0, [fp, #-52]	; 0xffffffcc
   2e874:	strbcc	r1, [ip, r9]
   2e878:	cmp	r2, r5
   2e87c:	movcc	r1, #36	; 0x24
   2e880:	strbcc	r1, [ip, r2]
   2e884:	add	r2, r9, #2
   2e888:	add	r9, r9, #3
   2e88c:	cmp	r2, r5
   2e890:	movcc	r1, #39	; 0x27
   2e894:	strbcc	r1, [ip, r2]
   2e898:	cmp	r9, r5
   2e89c:	add	r2, r9, #1
   2e8a0:	movcc	r1, #92	; 0x5c
   2e8a4:	strbcc	r1, [ip, r9]
   2e8a8:	cmp	r2, r5
   2e8ac:	bcs	2e8c0 <__assert_fail@plt+0x1be10>
   2e8b0:	uxtb	r3, r6
   2e8b4:	mov	r1, #48	; 0x30
   2e8b8:	orr	r3, r1, r3, lsr #6
   2e8bc:	strb	r3, [ip, r2]
   2e8c0:	add	r2, r9, #2
   2e8c4:	add	r9, r9, #3
   2e8c8:	cmp	r2, r5
   2e8cc:	lsrcc	r3, r6, #3
   2e8d0:	movcc	r1, #6
   2e8d4:	bficc	r3, r1, #3, #29
   2e8d8:	mov	r1, #6
   2e8dc:	bfi	r6, r1, #3, #29
   2e8e0:	strbcc	r3, [ip, r2]
   2e8e4:	mov	r2, #1
   2e8e8:	b	2e948 <__assert_fail@plt+0x1be98>
   2e8ec:	ldr	r1, [sp, #80]	; 0x50
   2e8f0:	cmp	r9, r2
   2e8f4:	mov	r5, r2
   2e8f8:	ldr	r2, [sp, #84]	; 0x54
   2e8fc:	strbcc	r6, [ip, r9]
   2e900:	add	r9, r9, #1
   2e904:	ldrb	r6, [r1, sl]
   2e908:	mov	sl, r3
   2e90c:	tst	r2, #1
   2e910:	beq	2e838 <__assert_fail@plt+0x1bd88>
   2e914:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2e918:	tst	r1, #1
   2e91c:	beq	2e93c <__assert_fail@plt+0x1be8c>
   2e920:	cmp	r9, r5
   2e924:	mov	r2, r0
   2e928:	movcc	r1, #92	; 0x5c
   2e92c:	strbcc	r1, [ip, r9]
   2e930:	add	r9, r9, #1
   2e934:	mov	r1, #0
   2e938:	b	2e944 <__assert_fail@plt+0x1be94>
   2e93c:	mov	r1, #0
   2e940:	mov	r2, r0
   2e944:	str	r1, [fp, #-48]	; 0xffffffd0
   2e948:	mov	r0, r2
   2e94c:	and	r1, r2, #1
   2e950:	ldr	r2, [fp, #-56]	; 0xffffffc8
   2e954:	add	r3, sl, #1
   2e958:	cmp	r2, r3
   2e95c:	bls	2e9bc <__assert_fail@plt+0x1bf0c>
   2e960:	mov	r2, r5
   2e964:	ldr	r5, [fp, #-52]	; 0xffffffcc
   2e968:	cmp	r1, #0
   2e96c:	movwne	r1, #1
   2e970:	mvn	r5, r5
   2e974:	orr	r5, r5, r1
   2e978:	tst	r5, #1
   2e97c:	bne	2e8ec <__assert_fail@plt+0x1be3c>
   2e980:	cmp	r9, r2
   2e984:	movcc	r5, r4
   2e988:	movcc	r4, #39	; 0x27
   2e98c:	strbcc	r4, [ip, r9]
   2e990:	movcc	r4, r5
   2e994:	add	r5, r9, #1
   2e998:	add	r9, r9, #2
   2e99c:	cmp	r5, r2
   2e9a0:	movcc	r1, r4
   2e9a4:	movcc	r4, #39	; 0x27
   2e9a8:	strbcc	r4, [ip, r5]
   2e9ac:	movcc	r4, r1
   2e9b0:	mov	r1, #0
   2e9b4:	str	r1, [fp, #-52]	; 0xffffffcc
   2e9b8:	b	2e8ec <__assert_fail@plt+0x1be3c>
   2e9bc:	cmp	r1, #0
   2e9c0:	movwne	r1, #1
   2e9c4:	str	r1, [fp, #-56]	; 0xffffffc8
   2e9c8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   2e9cc:	cmp	r0, #0
   2e9d0:	beq	2e3f8 <__assert_fail@plt+0x1b948>
   2e9d4:	b	2e42c <__assert_fail@plt+0x1b97c>
   2e9d8:	mov	r8, #0
   2e9dc:	mov	r4, r1
   2e9e0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2e9e4:	tst	r0, #1
   2e9e8:	beq	2e064 <__assert_fail@plt+0x1b5b4>
   2e9ec:	b	2e318 <__assert_fail@plt+0x1b868>
   2e9f0:	mov	r7, sl
   2e9f4:	b	2e9fc <__assert_fail@plt+0x1bf4c>
   2e9f8:	mvn	r7, #0
   2e9fc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   2ea00:	ldr	r3, [fp, #-76]	; 0xffffffb4
   2ea04:	ldr	r2, [sp, #88]	; 0x58
   2ea08:	eor	r0, r1, #2
   2ea0c:	orr	r0, r0, r9
   2ea10:	clz	r0, r0
   2ea14:	lsr	r0, r0, #5
   2ea18:	tst	r3, r0
   2ea1c:	bne	2ea94 <__assert_fail@plt+0x1bfe4>
   2ea20:	subs	r0, r1, #2
   2ea24:	movwne	r0, #1
   2ea28:	orr	r0, r3, r0
   2ea2c:	tst	r0, #1
   2ea30:	ldreq	r0, [sp, #60]	; 0x3c
   2ea34:	eoreq	r0, r0, #1
   2ea38:	tsteq	r0, #1
   2ea3c:	bne	2eb70 <__assert_fail@plt+0x1c0c0>
   2ea40:	tst	r4, #1
   2ea44:	bne	2eb34 <__assert_fail@plt+0x1c084>
   2ea48:	ldr	r6, [sp, #56]	; 0x38
   2ea4c:	mov	r8, #0
   2ea50:	cmp	r6, #0
   2ea54:	beq	2eb6c <__assert_fail@plt+0x1c0bc>
   2ea58:	mov	r1, #0
   2ea5c:	mov	r4, #2
   2ea60:	cmp	r5, #0
   2ea64:	mov	r0, r2
   2ea68:	mov	r3, #0
   2ea6c:	str	r1, [sp, #84]	; 0x54
   2ea70:	beq	2d8b8 <__assert_fail@plt+0x1ae08>
   2ea74:	b	2eb70 <__assert_fail@plt+0x1c0c0>
   2ea78:	movw	r0, #10682	; 0x29ba
   2ea7c:	movt	r0, #5
   2ea80:	str	r0, [sp, #76]	; 0x4c
   2ea84:	mov	r9, #0
   2ea88:	tst	r8, #1
   2ea8c:	beq	2db50 <__assert_fail@plt+0x1b0a0>
   2ea90:	b	2dc90 <__assert_fail@plt+0x1b1e0>
   2ea94:	ldr	r1, [sp, #88]	; 0x58
   2ea98:	mov	r0, #2
   2ea9c:	tst	r1, #1
   2eaa0:	movwne	r0, #4
   2eaa4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   2eaa8:	ldr	r1, [fp, #12]
   2eaac:	cmp	r2, #2
   2eab0:	moveq	r2, r0
   2eab4:	b	2eaec <__assert_fail@plt+0x1c03c>
   2eab8:	ldr	ip, [fp, #-84]	; 0xffffffac
   2eabc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2eac0:	ldr	r1, [fp, #12]
   2eac4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   2eac8:	b	2eaec <__assert_fail@plt+0x1c03c>
   2eacc:	ldr	r1, [sp, #88]	; 0x58
   2ead0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   2ead4:	ldr	r5, [sp, #28]
   2ead8:	mov	r0, #2
   2eadc:	tst	r1, #1
   2eae0:	ldr	r1, [fp, #12]
   2eae4:	movwne	r0, #4
   2eae8:	mov	r2, r0
   2eaec:	mov	r0, #0
   2eaf0:	bic	r1, r1, #2
   2eaf4:	str	r2, [sp]
   2eaf8:	mov	r2, lr
   2eafc:	str	r0, [sp, #8]
   2eb00:	ldr	r0, [sp, #72]	; 0x48
   2eb04:	str	r1, [sp, #4]
   2eb08:	mov	r1, r5
   2eb0c:	str	r0, [sp, #12]
   2eb10:	ldr	r0, [sp, #76]	; 0x4c
   2eb14:	str	r0, [sp, #16]
   2eb18:	mov	r0, ip
   2eb1c:	mov	r3, r7
   2eb20:	bl	2d82c <__assert_fail@plt+0x1ad7c>
   2eb24:	mov	r9, r0
   2eb28:	mov	r0, r9
   2eb2c:	sub	sp, fp, #28
   2eb30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eb34:	mov	r0, #5
   2eb38:	ldr	r1, [sp, #56]	; 0x38
   2eb3c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   2eb40:	str	r0, [sp]
   2eb44:	ldr	r0, [fp, #12]
   2eb48:	str	r0, [sp, #4]
   2eb4c:	ldr	r0, [fp, #16]
   2eb50:	str	r0, [sp, #8]
   2eb54:	ldr	r0, [sp, #72]	; 0x48
   2eb58:	str	r0, [sp, #12]
   2eb5c:	ldr	r0, [sp, #76]	; 0x4c
   2eb60:	str	r0, [sp, #16]
   2eb64:	ldr	r0, [fp, #-84]	; 0xffffffac
   2eb68:	b	2eb1c <__assert_fail@plt+0x1c06c>
   2eb6c:	mov	r3, #0
   2eb70:	ldr	r1, [fp, #-88]	; 0xffffffa8
   2eb74:	cmp	r1, #0
   2eb78:	beq	2ebb4 <__assert_fail@plt+0x1c104>
   2eb7c:	ldr	r2, [fp, #-84]	; 0xffffffac
   2eb80:	tst	r3, #1
   2eb84:	bne	2ebb8 <__assert_fail@plt+0x1c108>
   2eb88:	ldrb	r0, [r1]
   2eb8c:	cmp	r0, #0
   2eb90:	beq	2ebb8 <__assert_fail@plt+0x1c108>
   2eb94:	add	r1, r1, #1
   2eb98:	cmp	r9, r5
   2eb9c:	strbcc	r0, [r2, r9]
   2eba0:	add	r9, r9, #1
   2eba4:	ldrb	r0, [r1], #1
   2eba8:	cmp	r0, #0
   2ebac:	bne	2eb98 <__assert_fail@plt+0x1c0e8>
   2ebb0:	b	2ebb8 <__assert_fail@plt+0x1c108>
   2ebb4:	ldr	r2, [fp, #-84]	; 0xffffffac
   2ebb8:	cmp	r9, r5
   2ebbc:	movcc	r0, #0
   2ebc0:	strbcc	r0, [r2, r9]
   2ebc4:	mov	r0, r9
   2ebc8:	sub	sp, fp, #28
   2ebcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ebd0:	mov	r0, #4
   2ebd4:	b	2eaa4 <__assert_fail@plt+0x1bff4>
   2ebd8:	bl	12a5c <abort@plt>
   2ebdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ebe0:	add	fp, sp, #28
   2ebe4:	sub	sp, sp, #28
   2ebe8:	movw	r5, #19728	; 0x4d10
   2ebec:	cmp	r2, #0
   2ebf0:	mov	r4, r1
   2ebf4:	mov	r7, r0
   2ebf8:	str	r0, [sp, #20]
   2ebfc:	movt	r5, #6
   2ec00:	movne	r5, r2
   2ec04:	bl	12804 <__errno_location@plt>
   2ec08:	mov	sl, r0
   2ec0c:	ldr	r2, [r5, #40]	; 0x28
   2ec10:	ldr	r3, [r5, #44]	; 0x2c
   2ec14:	ldm	r5, {r0, r1}
   2ec18:	orr	r8, r1, #1
   2ec1c:	add	r9, r5, #8
   2ec20:	mov	r1, #0
   2ec24:	ldr	r6, [sl]
   2ec28:	stm	sp, {r0, r8, r9}
   2ec2c:	mov	r0, #0
   2ec30:	str	r2, [sp, #12]
   2ec34:	str	r3, [sp, #16]
   2ec38:	mov	r2, r7
   2ec3c:	mov	r3, r4
   2ec40:	str	r6, [sp, #24]
   2ec44:	mov	r6, r4
   2ec48:	bl	2d82c <__assert_fail@plt+0x1ad7c>
   2ec4c:	add	r7, r0, #1
   2ec50:	mov	r0, r7
   2ec54:	bl	30718 <__assert_fail@plt+0x1dc68>
   2ec58:	mov	r4, r0
   2ec5c:	ldr	r0, [r5]
   2ec60:	ldr	r2, [r5, #44]	; 0x2c
   2ec64:	ldr	r1, [r5, #40]	; 0x28
   2ec68:	mov	r3, r6
   2ec6c:	stm	sp, {r0, r8, r9}
   2ec70:	str	r2, [sp, #16]
   2ec74:	ldr	r2, [sp, #20]
   2ec78:	str	r1, [sp, #12]
   2ec7c:	mov	r0, r4
   2ec80:	mov	r1, r7
   2ec84:	bl	2d82c <__assert_fail@plt+0x1ad7c>
   2ec88:	ldr	r0, [sp, #24]
   2ec8c:	str	r0, [sl]
   2ec90:	mov	r0, r4
   2ec94:	sub	sp, fp, #28
   2ec98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ec9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eca0:	add	fp, sp, #28
   2eca4:	sub	sp, sp, #36	; 0x24
   2eca8:	movw	r8, #19728	; 0x4d10
   2ecac:	cmp	r3, #0
   2ecb0:	mov	r4, r2
   2ecb4:	str	r2, [sp, #24]
   2ecb8:	mov	r5, r1
   2ecbc:	mov	r6, r0
   2ecc0:	str	r0, [sp, #20]
   2ecc4:	movt	r8, #6
   2ecc8:	movne	r8, r3
   2eccc:	bl	12804 <__errno_location@plt>
   2ecd0:	str	r0, [sp, #28]
   2ecd4:	ldr	r1, [r8, #40]	; 0x28
   2ecd8:	ldr	r2, [r8, #44]	; 0x2c
   2ecdc:	ldr	r7, [r0]
   2ece0:	cmp	r4, #0
   2ece4:	add	sl, r8, #8
   2ece8:	mov	r0, #0
   2ecec:	ldm	r8, {r3, r9}
   2ecf0:	orreq	r9, r9, #1
   2ecf4:	stm	sp, {r3, r9, sl}
   2ecf8:	str	r1, [sp, #12]
   2ecfc:	str	r2, [sp, #16]
   2ed00:	mov	r1, #0
   2ed04:	mov	r2, r6
   2ed08:	mov	r3, r5
   2ed0c:	str	r7, [sp, #32]
   2ed10:	mov	r7, r5
   2ed14:	bl	2d82c <__assert_fail@plt+0x1ad7c>
   2ed18:	add	r4, r0, #1
   2ed1c:	mov	r5, r0
   2ed20:	mov	r0, r4
   2ed24:	bl	30718 <__assert_fail@plt+0x1dc68>
   2ed28:	mov	r6, r0
   2ed2c:	ldr	r0, [r8]
   2ed30:	ldr	r2, [r8, #44]	; 0x2c
   2ed34:	ldr	r1, [r8, #40]	; 0x28
   2ed38:	mov	r3, r7
   2ed3c:	stm	sp, {r0, r9, sl}
   2ed40:	str	r2, [sp, #16]
   2ed44:	ldr	r2, [sp, #20]
   2ed48:	str	r1, [sp, #12]
   2ed4c:	mov	r0, r6
   2ed50:	mov	r1, r4
   2ed54:	bl	2d82c <__assert_fail@plt+0x1ad7c>
   2ed58:	ldr	r0, [sp, #24]
   2ed5c:	ldr	r1, [sp, #32]
   2ed60:	ldr	r2, [sp, #28]
   2ed64:	cmp	r0, #0
   2ed68:	str	r1, [r2]
   2ed6c:	strne	r5, [r0]
   2ed70:	mov	r0, r6
   2ed74:	sub	sp, fp, #28
   2ed78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ed7c:	push	{r4, r5, r6, r7, fp, lr}
   2ed80:	add	fp, sp, #16
   2ed84:	movw	r4, #17704	; 0x4528
   2ed88:	movt	r4, #6
   2ed8c:	ldrd	r6, [r4]
   2ed90:	cmp	r7, #2
   2ed94:	blt	2edc0 <__assert_fail@plt+0x1c310>
   2ed98:	add	r5, r6, #12
   2ed9c:	mov	r7, #0
   2eda0:	ldr	r0, [r5, r7, lsl #3]
   2eda4:	bl	32910 <__assert_fail@plt+0x1fe60>
   2eda8:	ldr	r1, [r4, #4]
   2edac:	add	r2, r7, #2
   2edb0:	add	r0, r7, #1
   2edb4:	mov	r7, r0
   2edb8:	cmp	r2, r1
   2edbc:	blt	2eda0 <__assert_fail@plt+0x1c2f0>
   2edc0:	ldr	r0, [r6, #4]
   2edc4:	movw	r5, #19776	; 0x4d40
   2edc8:	movt	r5, #6
   2edcc:	cmp	r0, r5
   2edd0:	beq	2ede4 <__assert_fail@plt+0x1c334>
   2edd4:	bl	32910 <__assert_fail@plt+0x1fe60>
   2edd8:	mov	r0, #256	; 0x100
   2eddc:	str	r0, [r4, #8]
   2ede0:	str	r5, [r4, #12]
   2ede4:	add	r5, r4, #8
   2ede8:	cmp	r6, r5
   2edec:	beq	2edfc <__assert_fail@plt+0x1c34c>
   2edf0:	mov	r0, r6
   2edf4:	bl	32910 <__assert_fail@plt+0x1fe60>
   2edf8:	str	r5, [r4]
   2edfc:	mov	r0, #1
   2ee00:	str	r0, [r4, #4]
   2ee04:	pop	{r4, r5, r6, r7, fp, pc}
   2ee08:	movw	r3, #19728	; 0x4d10
   2ee0c:	mvn	r2, #0
   2ee10:	movt	r3, #6
   2ee14:	b	2ee18 <__assert_fail@plt+0x1c368>
   2ee18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ee1c:	add	fp, sp, #28
   2ee20:	sub	sp, sp, #44	; 0x2c
   2ee24:	mov	r7, r3
   2ee28:	str	r2, [sp, #36]	; 0x24
   2ee2c:	str	r1, [sp, #32]
   2ee30:	mov	r5, r0
   2ee34:	bl	12804 <__errno_location@plt>
   2ee38:	cmp	r5, #0
   2ee3c:	bmi	2efa4 <__assert_fail@plt+0x1c4f4>
   2ee40:	cmn	r5, #-2147483647	; 0x80000001
   2ee44:	beq	2efa4 <__assert_fail@plt+0x1c4f4>
   2ee48:	movw	r8, #17704	; 0x4528
   2ee4c:	mov	r4, r0
   2ee50:	ldr	r0, [r0]
   2ee54:	movt	r8, #6
   2ee58:	str	r4, [sp, #28]
   2ee5c:	ldr	r1, [r8, #4]
   2ee60:	ldr	r6, [r8]
   2ee64:	str	r0, [sp, #24]
   2ee68:	cmp	r1, r5
   2ee6c:	ble	2ee78 <__assert_fail@plt+0x1c3c8>
   2ee70:	mov	sl, r6
   2ee74:	b	2eee0 <__assert_fail@plt+0x1c430>
   2ee78:	mov	r0, #8
   2ee7c:	add	r9, r8, #8
   2ee80:	str	r1, [fp, #-32]	; 0xffffffe0
   2ee84:	sub	r1, r5, r1
   2ee88:	mvn	r3, #-2147483648	; 0x80000000
   2ee8c:	str	r0, [sp]
   2ee90:	subs	r0, r6, r9
   2ee94:	add	r2, r1, #1
   2ee98:	sub	r1, fp, #32
   2ee9c:	movne	r0, r6
   2eea0:	bl	30918 <__assert_fail@plt+0x1de68>
   2eea4:	mov	sl, r0
   2eea8:	cmp	r6, r9
   2eeac:	str	r0, [r8]
   2eeb0:	bne	2eebc <__assert_fail@plt+0x1c40c>
   2eeb4:	ldrd	r0, [r8, #8]
   2eeb8:	stm	sl, {r0, r1}
   2eebc:	ldr	r1, [r8, #4]
   2eec0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2eec4:	add	r0, sl, r1, lsl #3
   2eec8:	sub	r1, r2, r1
   2eecc:	lsl	r2, r1, #3
   2eed0:	mov	r1, #0
   2eed4:	bl	12834 <memset@plt>
   2eed8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2eedc:	str	r0, [r8, #4]
   2eee0:	mov	r9, sl
   2eee4:	ldm	r7, {r0, r1}
   2eee8:	orr	r8, r1, #1
   2eeec:	add	r1, r7, #8
   2eef0:	ldr	r2, [r7, #40]	; 0x28
   2eef4:	ldr	r3, [r7, #44]	; 0x2c
   2eef8:	ldr	r6, [r9, r5, lsl #3]!
   2eefc:	str	r1, [sp, #20]
   2ef00:	ldr	r4, [r9, #4]!
   2ef04:	stm	sp, {r0, r8}
   2ef08:	add	r0, sp, #8
   2ef0c:	stm	r0, {r1, r2, r3}
   2ef10:	ldr	r2, [sp, #32]
   2ef14:	ldr	r3, [sp, #36]	; 0x24
   2ef18:	mov	r1, r6
   2ef1c:	mov	r0, r4
   2ef20:	bl	2d82c <__assert_fail@plt+0x1ad7c>
   2ef24:	cmp	r6, r0
   2ef28:	bhi	2ef8c <__assert_fail@plt+0x1c4dc>
   2ef2c:	add	r6, r0, #1
   2ef30:	movw	r0, #19776	; 0x4d40
   2ef34:	movt	r0, #6
   2ef38:	str	r6, [sl, r5, lsl #3]
   2ef3c:	cmp	r4, r0
   2ef40:	beq	2ef4c <__assert_fail@plt+0x1c49c>
   2ef44:	mov	r0, r4
   2ef48:	bl	32910 <__assert_fail@plt+0x1fe60>
   2ef4c:	mov	r0, r6
   2ef50:	bl	30718 <__assert_fail@plt+0x1dc68>
   2ef54:	str	r0, [r9]
   2ef58:	mov	r4, r0
   2ef5c:	add	r3, sp, #8
   2ef60:	ldr	r0, [r7]
   2ef64:	ldr	r1, [r7, #40]	; 0x28
   2ef68:	ldr	r2, [r7, #44]	; 0x2c
   2ef6c:	stm	sp, {r0, r8}
   2ef70:	ldr	r0, [sp, #20]
   2ef74:	stm	r3, {r0, r1, r2}
   2ef78:	ldr	r2, [sp, #32]
   2ef7c:	ldr	r3, [sp, #36]	; 0x24
   2ef80:	mov	r0, r4
   2ef84:	mov	r1, r6
   2ef88:	bl	2d82c <__assert_fail@plt+0x1ad7c>
   2ef8c:	ldr	r1, [sp, #24]
   2ef90:	ldr	r0, [sp, #28]
   2ef94:	str	r1, [r0]
   2ef98:	mov	r0, r4
   2ef9c:	sub	sp, fp, #28
   2efa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2efa4:	bl	12a5c <abort@plt>
   2efa8:	movw	r3, #19728	; 0x4d10
   2efac:	movt	r3, #6
   2efb0:	b	2ee18 <__assert_fail@plt+0x1c368>
   2efb4:	movw	r3, #19728	; 0x4d10
   2efb8:	mov	r1, r0
   2efbc:	mov	r0, #0
   2efc0:	mvn	r2, #0
   2efc4:	movt	r3, #6
   2efc8:	b	2ee18 <__assert_fail@plt+0x1c368>
   2efcc:	movw	r3, #19728	; 0x4d10
   2efd0:	mov	r2, r1
   2efd4:	mov	r1, r0
   2efd8:	mov	r0, #0
   2efdc:	movt	r3, #6
   2efe0:	b	2ee18 <__assert_fail@plt+0x1c368>
   2efe4:	push	{fp, lr}
   2efe8:	mov	fp, sp
   2efec:	sub	sp, sp, #48	; 0x30
   2eff0:	vmov.i32	q8, #0	; 0x00000000
   2eff4:	mov	ip, #32
   2eff8:	mov	r3, sp
   2effc:	mov	lr, r2
   2f000:	cmp	r1, #10
   2f004:	add	r2, r3, #16
   2f008:	vst1.64	{d16-d17}, [r3], ip
   2f00c:	vst1.64	{d16-d17}, [r2]
   2f010:	vst1.64	{d16-d17}, [r3]
   2f014:	beq	2f034 <__assert_fail@plt+0x1c584>
   2f018:	str	r1, [sp]
   2f01c:	mov	r3, sp
   2f020:	mov	r1, lr
   2f024:	mvn	r2, #0
   2f028:	bl	2ee18 <__assert_fail@plt+0x1c368>
   2f02c:	mov	sp, fp
   2f030:	pop	{fp, pc}
   2f034:	bl	12a5c <abort@plt>
   2f038:	push	{r4, sl, fp, lr}
   2f03c:	add	fp, sp, #8
   2f040:	sub	sp, sp, #48	; 0x30
   2f044:	vmov.i32	q8, #0	; 0x00000000
   2f048:	mov	ip, r3
   2f04c:	mov	r3, sp
   2f050:	mov	lr, #32
   2f054:	cmp	r1, #10
   2f058:	add	r4, r3, #16
   2f05c:	vst1.64	{d16-d17}, [r3], lr
   2f060:	vst1.64	{d16-d17}, [r4]
   2f064:	vst1.64	{d16-d17}, [r3]
   2f068:	beq	2f088 <__assert_fail@plt+0x1c5d8>
   2f06c:	str	r1, [sp]
   2f070:	mov	r1, r2
   2f074:	mov	r3, sp
   2f078:	mov	r2, ip
   2f07c:	bl	2ee18 <__assert_fail@plt+0x1c368>
   2f080:	sub	sp, fp, #8
   2f084:	pop	{r4, sl, fp, pc}
   2f088:	bl	12a5c <abort@plt>
   2f08c:	push	{fp, lr}
   2f090:	mov	fp, sp
   2f094:	sub	sp, sp, #48	; 0x30
   2f098:	vmov.i32	q8, #0	; 0x00000000
   2f09c:	mov	r3, sp
   2f0a0:	mov	ip, #32
   2f0a4:	cmp	r0, #10
   2f0a8:	add	r2, r3, #16
   2f0ac:	vst1.64	{d16-d17}, [r3], ip
   2f0b0:	vst1.64	{d16-d17}, [r2]
   2f0b4:	vst1.64	{d16-d17}, [r3]
   2f0b8:	beq	2f0d8 <__assert_fail@plt+0x1c628>
   2f0bc:	str	r0, [sp]
   2f0c0:	mov	r3, sp
   2f0c4:	mov	r0, #0
   2f0c8:	mvn	r2, #0
   2f0cc:	bl	2ee18 <__assert_fail@plt+0x1c368>
   2f0d0:	mov	sp, fp
   2f0d4:	pop	{fp, pc}
   2f0d8:	bl	12a5c <abort@plt>
   2f0dc:	push	{fp, lr}
   2f0e0:	mov	fp, sp
   2f0e4:	sub	sp, sp, #48	; 0x30
   2f0e8:	vmov.i32	q8, #0	; 0x00000000
   2f0ec:	mov	r3, sp
   2f0f0:	mov	ip, #32
   2f0f4:	cmp	r0, #10
   2f0f8:	add	lr, r3, #16
   2f0fc:	vst1.64	{d16-d17}, [r3], ip
   2f100:	vst1.64	{d16-d17}, [lr]
   2f104:	vst1.64	{d16-d17}, [r3]
   2f108:	beq	2f124 <__assert_fail@plt+0x1c674>
   2f10c:	str	r0, [sp]
   2f110:	mov	r3, sp
   2f114:	mov	r0, #0
   2f118:	bl	2ee18 <__assert_fail@plt+0x1c368>
   2f11c:	mov	sp, fp
   2f120:	pop	{fp, pc}
   2f124:	bl	12a5c <abort@plt>
   2f128:	push	{r4, sl, fp, lr}
   2f12c:	add	fp, sp, #8
   2f130:	sub	sp, sp, #48	; 0x30
   2f134:	mov	lr, r0
   2f138:	movw	r0, #19728	; 0x4d10
   2f13c:	mov	ip, r1
   2f140:	mov	r1, #32
   2f144:	mov	r4, #1
   2f148:	movt	r0, #6
   2f14c:	add	r3, r0, #16
   2f150:	vld1.64	{d16-d17}, [r0], r1
   2f154:	vld1.64	{d20-d21}, [r0]
   2f158:	vld1.64	{d18-d19}, [r3]
   2f15c:	mov	r3, sp
   2f160:	add	r0, r3, #32
   2f164:	add	r1, r3, #16
   2f168:	vst1.64	{d20-d21}, [r0]
   2f16c:	mov	r0, #28
   2f170:	vst1.64	{d18-d19}, [r1]
   2f174:	mov	r1, r3
   2f178:	and	r0, r0, r2, lsr #3
   2f17c:	and	r2, r2, #31
   2f180:	vst1.64	{d16-d17}, [r1], r0
   2f184:	ldr	r0, [r1, #8]
   2f188:	bic	r4, r4, r0, lsr r2
   2f18c:	eor	r0, r0, r4, lsl r2
   2f190:	mov	r2, ip
   2f194:	str	r0, [r1, #8]
   2f198:	mov	r0, #0
   2f19c:	mov	r1, lr
   2f1a0:	bl	2ee18 <__assert_fail@plt+0x1c368>
   2f1a4:	sub	sp, fp, #8
   2f1a8:	pop	{r4, sl, fp, pc}
   2f1ac:	push	{fp, lr}
   2f1b0:	mov	fp, sp
   2f1b4:	sub	sp, sp, #48	; 0x30
   2f1b8:	mov	ip, r0
   2f1bc:	movw	r0, #19728	; 0x4d10
   2f1c0:	mov	r2, #32
   2f1c4:	movt	r0, #6
   2f1c8:	add	r3, r0, #16
   2f1cc:	vld1.64	{d16-d17}, [r0], r2
   2f1d0:	vld1.64	{d20-d21}, [r0]
   2f1d4:	vld1.64	{d18-d19}, [r3]
   2f1d8:	mov	r3, sp
   2f1dc:	add	r0, r3, #32
   2f1e0:	add	r2, r3, #16
   2f1e4:	vst1.64	{d20-d21}, [r0]
   2f1e8:	mov	r0, #28
   2f1ec:	vst1.64	{d18-d19}, [r2]
   2f1f0:	mov	r2, r3
   2f1f4:	and	r0, r0, r1, lsr #3
   2f1f8:	and	r1, r1, #31
   2f1fc:	vst1.64	{d16-d17}, [r2], r0
   2f200:	mov	r0, #1
   2f204:	ldr	lr, [r2, #8]
   2f208:	bic	r0, r0, lr, lsr r1
   2f20c:	eor	r0, lr, r0, lsl r1
   2f210:	mov	r1, ip
   2f214:	str	r0, [r2, #8]
   2f218:	mov	r0, #0
   2f21c:	mvn	r2, #0
   2f220:	bl	2ee18 <__assert_fail@plt+0x1c368>
   2f224:	mov	sp, fp
   2f228:	pop	{fp, pc}
   2f22c:	push	{fp, lr}
   2f230:	mov	fp, sp
   2f234:	sub	sp, sp, #48	; 0x30
   2f238:	mov	r1, r0
   2f23c:	movw	r0, #19728	; 0x4d10
   2f240:	mov	r3, #32
   2f244:	movt	r0, #6
   2f248:	add	r2, r0, #16
   2f24c:	vld1.64	{d16-d17}, [r0], r3
   2f250:	mov	r3, sp
   2f254:	vld1.64	{d18-d19}, [r2]
   2f258:	vld1.64	{d20-d21}, [r0]
   2f25c:	add	r2, r3, #16
   2f260:	add	r0, r3, #32
   2f264:	vst1.64	{d18-d19}, [r2]
   2f268:	vst1.64	{d20-d21}, [r0]
   2f26c:	mov	r0, #12
   2f270:	mov	r2, r3
   2f274:	vst1.64	{d16-d17}, [r2], r0
   2f278:	ldr	r0, [r2]
   2f27c:	orr	r0, r0, #67108864	; 0x4000000
   2f280:	str	r0, [r2]
   2f284:	mov	r0, #0
   2f288:	mvn	r2, #0
   2f28c:	bl	2ee18 <__assert_fail@plt+0x1c368>
   2f290:	mov	sp, fp
   2f294:	pop	{fp, pc}
   2f298:	push	{fp, lr}
   2f29c:	mov	fp, sp
   2f2a0:	sub	sp, sp, #48	; 0x30
   2f2a4:	mov	ip, r1
   2f2a8:	mov	r1, r0
   2f2ac:	movw	r0, #19728	; 0x4d10
   2f2b0:	mov	r2, #32
   2f2b4:	movt	r0, #6
   2f2b8:	add	r3, r0, #16
   2f2bc:	vld1.64	{d16-d17}, [r0], r2
   2f2c0:	vld1.64	{d18-d19}, [r3]
   2f2c4:	vld1.64	{d20-d21}, [r0]
   2f2c8:	mov	r3, sp
   2f2cc:	add	r2, r3, #16
   2f2d0:	add	r0, r3, #32
   2f2d4:	vst1.64	{d18-d19}, [r2]
   2f2d8:	vst1.64	{d20-d21}, [r0]
   2f2dc:	mov	r0, #12
   2f2e0:	mov	r2, r3
   2f2e4:	vst1.64	{d16-d17}, [r2], r0
   2f2e8:	ldr	r0, [r2]
   2f2ec:	orr	r0, r0, #67108864	; 0x4000000
   2f2f0:	str	r0, [r2]
   2f2f4:	mov	r0, #0
   2f2f8:	mov	r2, ip
   2f2fc:	bl	2ee18 <__assert_fail@plt+0x1c368>
   2f300:	mov	sp, fp
   2f304:	pop	{fp, pc}
   2f308:	push	{r4, sl, fp, lr}
   2f30c:	add	fp, sp, #8
   2f310:	sub	sp, sp, #96	; 0x60
   2f314:	vmov.i32	q8, #0	; 0x00000000
   2f318:	mov	ip, r2
   2f31c:	mov	r2, sp
   2f320:	mov	r4, #28
   2f324:	cmp	r1, #10
   2f328:	mov	r3, r2
   2f32c:	add	lr, r2, #16
   2f330:	vst1.64	{d16-d17}, [r3], r4
   2f334:	vst1.64	{d16-d17}, [lr]
   2f338:	vst1.32	{d16-d17}, [r3]
   2f33c:	beq	2f38c <__assert_fail@plt+0x1c8dc>
   2f340:	vld1.64	{d16-d17}, [r2], r4
   2f344:	vld1.64	{d18-d19}, [lr]
   2f348:	add	r3, sp, #48	; 0x30
   2f34c:	vld1.32	{d20-d21}, [r2]
   2f350:	add	r2, r3, #20
   2f354:	add	r4, r3, #4
   2f358:	vst1.32	{d18-d19}, [r2]
   2f35c:	add	r2, r3, #32
   2f360:	vst1.32	{d16-d17}, [r4]
   2f364:	vst1.32	{d20-d21}, [r2]
   2f368:	str	r1, [sp, #48]	; 0x30
   2f36c:	mvn	r2, #0
   2f370:	ldr	r1, [sp, #60]	; 0x3c
   2f374:	orr	r1, r1, #67108864	; 0x4000000
   2f378:	str	r1, [sp, #60]	; 0x3c
   2f37c:	mov	r1, ip
   2f380:	bl	2ee18 <__assert_fail@plt+0x1c368>
   2f384:	sub	sp, fp, #8
   2f388:	pop	{r4, sl, fp, pc}
   2f38c:	bl	12a5c <abort@plt>
   2f390:	push	{r4, r5, r6, sl, fp, lr}
   2f394:	add	fp, sp, #16
   2f398:	sub	sp, sp, #48	; 0x30
   2f39c:	mov	ip, r3
   2f3a0:	movw	r3, #19728	; 0x4d10
   2f3a4:	mov	r6, #32
   2f3a8:	cmp	r1, #0
   2f3ac:	mov	r4, sp
   2f3b0:	movt	r3, #6
   2f3b4:	cmpne	r2, #0
   2f3b8:	add	r5, r4, #16
   2f3bc:	add	lr, r3, #16
   2f3c0:	vld1.64	{d16-d17}, [r3], r6
   2f3c4:	vld1.64	{d18-d19}, [lr]
   2f3c8:	vld1.64	{d20-d21}, [r3]
   2f3cc:	mov	r3, #10
   2f3d0:	vst1.64	{d16-d17}, [r4], r6
   2f3d4:	vst1.64	{d18-d19}, [r5]
   2f3d8:	vst1.64	{d20-d21}, [r4]
   2f3dc:	str	r3, [sp]
   2f3e0:	bne	2f3e8 <__assert_fail@plt+0x1c938>
   2f3e4:	bl	12a5c <abort@plt>
   2f3e8:	str	r2, [sp, #44]	; 0x2c
   2f3ec:	str	r1, [sp, #40]	; 0x28
   2f3f0:	mov	r3, sp
   2f3f4:	mov	r1, ip
   2f3f8:	mvn	r2, #0
   2f3fc:	bl	2ee18 <__assert_fail@plt+0x1c368>
   2f400:	sub	sp, fp, #16
   2f404:	pop	{r4, r5, r6, sl, fp, pc}
   2f408:	push	{r4, r5, r6, sl, fp, lr}
   2f40c:	add	fp, sp, #16
   2f410:	sub	sp, sp, #48	; 0x30
   2f414:	mov	lr, r3
   2f418:	movw	r3, #19728	; 0x4d10
   2f41c:	mov	r6, #32
   2f420:	cmp	r1, #0
   2f424:	mov	r4, sp
   2f428:	movt	r3, #6
   2f42c:	cmpne	r2, #0
   2f430:	add	r5, r4, #16
   2f434:	add	ip, r3, #16
   2f438:	vld1.64	{d16-d17}, [r3], r6
   2f43c:	vld1.64	{d18-d19}, [ip]
   2f440:	vld1.64	{d20-d21}, [r3]
   2f444:	mov	r3, #10
   2f448:	vst1.64	{d16-d17}, [r4], r6
   2f44c:	vst1.64	{d18-d19}, [r5]
   2f450:	vst1.64	{d20-d21}, [r4]
   2f454:	str	r3, [sp]
   2f458:	bne	2f460 <__assert_fail@plt+0x1c9b0>
   2f45c:	bl	12a5c <abort@plt>
   2f460:	ldr	ip, [fp, #8]
   2f464:	str	r2, [sp, #44]	; 0x2c
   2f468:	str	r1, [sp, #40]	; 0x28
   2f46c:	mov	r3, sp
   2f470:	mov	r1, lr
   2f474:	mov	r2, ip
   2f478:	bl	2ee18 <__assert_fail@plt+0x1c368>
   2f47c:	sub	sp, fp, #16
   2f480:	pop	{r4, r5, r6, sl, fp, pc}
   2f484:	push	{r4, sl, fp, lr}
   2f488:	add	fp, sp, #8
   2f48c:	sub	sp, sp, #48	; 0x30
   2f490:	movw	r3, #19728	; 0x4d10
   2f494:	mov	lr, #32
   2f498:	mov	ip, r2
   2f49c:	cmp	r0, #0
   2f4a0:	movt	r3, #6
   2f4a4:	cmpne	r1, #0
   2f4a8:	add	r2, r3, #16
   2f4ac:	vld1.64	{d16-d17}, [r3], lr
   2f4b0:	vld1.64	{d20-d21}, [r3]
   2f4b4:	vld1.64	{d18-d19}, [r2]
   2f4b8:	mov	r2, sp
   2f4bc:	add	r4, r2, #16
   2f4c0:	vst1.64	{d16-d17}, [r2], lr
   2f4c4:	vst1.64	{d20-d21}, [r2]
   2f4c8:	mov	r2, #10
   2f4cc:	vst1.64	{d18-d19}, [r4]
   2f4d0:	str	r2, [sp]
   2f4d4:	bne	2f4dc <__assert_fail@plt+0x1ca2c>
   2f4d8:	bl	12a5c <abort@plt>
   2f4dc:	str	r1, [sp, #44]	; 0x2c
   2f4e0:	str	r0, [sp, #40]	; 0x28
   2f4e4:	mov	r3, sp
   2f4e8:	mov	r0, #0
   2f4ec:	mov	r1, ip
   2f4f0:	mvn	r2, #0
   2f4f4:	bl	2ee18 <__assert_fail@plt+0x1c368>
   2f4f8:	sub	sp, fp, #8
   2f4fc:	pop	{r4, sl, fp, pc}
   2f500:	push	{r4, r5, fp, lr}
   2f504:	add	fp, sp, #8
   2f508:	sub	sp, sp, #48	; 0x30
   2f50c:	mov	ip, r3
   2f510:	movw	r3, #19728	; 0x4d10
   2f514:	mov	r4, #32
   2f518:	mov	lr, r2
   2f51c:	cmp	r0, #0
   2f520:	movt	r3, #6
   2f524:	cmpne	r1, #0
   2f528:	add	r2, r3, #16
   2f52c:	vld1.64	{d16-d17}, [r3], r4
   2f530:	vld1.64	{d20-d21}, [r3]
   2f534:	vld1.64	{d18-d19}, [r2]
   2f538:	mov	r2, sp
   2f53c:	add	r5, r2, #16
   2f540:	vst1.64	{d16-d17}, [r2], r4
   2f544:	vst1.64	{d20-d21}, [r2]
   2f548:	mov	r2, #10
   2f54c:	vst1.64	{d18-d19}, [r5]
   2f550:	str	r2, [sp]
   2f554:	bne	2f55c <__assert_fail@plt+0x1caac>
   2f558:	bl	12a5c <abort@plt>
   2f55c:	str	r1, [sp, #44]	; 0x2c
   2f560:	str	r0, [sp, #40]	; 0x28
   2f564:	mov	r3, sp
   2f568:	mov	r0, #0
   2f56c:	mov	r1, lr
   2f570:	mov	r2, ip
   2f574:	bl	2ee18 <__assert_fail@plt+0x1c368>
   2f578:	sub	sp, fp, #8
   2f57c:	pop	{r4, r5, fp, pc}
   2f580:	movw	r3, #17656	; 0x44f8
   2f584:	movt	r3, #6
   2f588:	b	2ee18 <__assert_fail@plt+0x1c368>
   2f58c:	movw	r3, #17656	; 0x44f8
   2f590:	mov	r2, r1
   2f594:	mov	r1, r0
   2f598:	mov	r0, #0
   2f59c:	movt	r3, #6
   2f5a0:	b	2ee18 <__assert_fail@plt+0x1c368>
   2f5a4:	movw	r3, #17656	; 0x44f8
   2f5a8:	mvn	r2, #0
   2f5ac:	movt	r3, #6
   2f5b0:	b	2ee18 <__assert_fail@plt+0x1c368>
   2f5b4:	movw	r3, #17656	; 0x44f8
   2f5b8:	mov	r1, r0
   2f5bc:	mov	r0, #0
   2f5c0:	mvn	r2, #0
   2f5c4:	movt	r3, #6
   2f5c8:	b	2ee18 <__assert_fail@plt+0x1c368>
   2f5cc:	push	{r4, r5, fp, lr}
   2f5d0:	add	fp, sp, #8
   2f5d4:	mov	r4, #0
   2f5d8:	mov	r5, r0
   2f5dc:	mov	r1, #524288	; 0x80000
   2f5e0:	str	r4, [r0, #4]
   2f5e4:	movw	r0, #57732	; 0xe184
   2f5e8:	movt	r0, #4
   2f5ec:	bl	23d34 <__assert_fail@plt+0x11284>
   2f5f0:	cmn	r0, #1
   2f5f4:	str	r0, [r5]
   2f5f8:	ble	2f604 <__assert_fail@plt+0x1cb54>
   2f5fc:	mov	r0, r4
   2f600:	pop	{r4, r5, fp, pc}
   2f604:	mov	r0, #0
   2f608:	mov	r1, #0
   2f60c:	mov	r4, #0
   2f610:	bl	12774 <getcwd@plt>
   2f614:	cmp	r0, #0
   2f618:	str	r0, [r5, #4]
   2f61c:	mvneq	r4, #0
   2f620:	mov	r0, r4
   2f624:	pop	{r4, r5, fp, pc}
   2f628:	ldr	r1, [r0]
   2f62c:	cmp	r1, #0
   2f630:	bmi	2f63c <__assert_fail@plt+0x1cb8c>
   2f634:	mov	r0, r1
   2f638:	b	129b4 <fchdir@plt>
   2f63c:	ldr	r0, [r0, #4]
   2f640:	b	32314 <__assert_fail@plt+0x1f864>
   2f644:	push	{r4, sl, fp, lr}
   2f648:	add	fp, sp, #8
   2f64c:	mov	r4, r0
   2f650:	ldr	r0, [r0]
   2f654:	cmp	r0, #0
   2f658:	bmi	2f660 <__assert_fail@plt+0x1cbb0>
   2f65c:	bl	12a68 <close@plt>
   2f660:	ldr	r0, [r4, #4]
   2f664:	pop	{r4, sl, fp, lr}
   2f668:	b	32910 <__assert_fail@plt+0x1fe60>
   2f66c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f670:	add	fp, sp, #28
   2f674:	sub	sp, sp, #964	; 0x3c4
   2f678:	sub	sp, sp, #3072	; 0xc00
   2f67c:	mov	r4, r2
   2f680:	mov	r5, r1
   2f684:	cmn	r0, #100	; 0x64
   2f688:	beq	2f69c <__assert_fail@plt+0x1cbec>
   2f68c:	mov	r7, r0
   2f690:	ldrb	r0, [r5]
   2f694:	cmp	r0, #47	; 0x2f
   2f698:	bne	2f6b0 <__assert_fail@plt+0x1cc00>
   2f69c:	mov	r0, r5
   2f6a0:	mov	r1, r4
   2f6a4:	sub	sp, fp, #28
   2f6a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f6ac:	b	351f4 <__assert_fail@plt+0x22744>
   2f6b0:	mov	sl, sp
   2f6b4:	mov	r1, r7
   2f6b8:	mov	r2, r5
   2f6bc:	mov	r0, sl
   2f6c0:	bl	4c070 <__assert_fail@plt+0x395c0>
   2f6c4:	cmp	r0, #0
   2f6c8:	beq	2f7b4 <__assert_fail@plt+0x1cd04>
   2f6cc:	mov	r1, r4
   2f6d0:	mov	r6, r0
   2f6d4:	bl	351f4 <__assert_fail@plt+0x22744>
   2f6d8:	mov	r9, r0
   2f6dc:	bl	12804 <__errno_location@plt>
   2f6e0:	ldr	r2, [r0]
   2f6e4:	mov	r8, r0
   2f6e8:	cmp	r6, sl
   2f6ec:	beq	2f700 <__assert_fail@plt+0x1cc50>
   2f6f0:	mov	r0, r6
   2f6f4:	mov	r6, r2
   2f6f8:	bl	32910 <__assert_fail@plt+0x1fe60>
   2f6fc:	mov	r2, r6
   2f700:	cmn	r9, #1
   2f704:	bne	2f880 <__assert_fail@plt+0x1cdd0>
   2f708:	sub	r0, r2, #1
   2f70c:	cmp	r0, #37	; 0x25
   2f710:	bhi	2f88c <__assert_fail@plt+0x1cddc>
   2f714:	add	r1, pc, #0
   2f718:	ldr	pc, [r1, r0, lsl #2]
   2f71c:			; <UNDEFINED> instruction: 0x0002f7b4
   2f720:			; <UNDEFINED> instruction: 0x0002f7b4
   2f724:	muleq	r2, r4, r8
   2f728:	muleq	r2, r4, r8
   2f72c:	muleq	r2, r4, r8
   2f730:	muleq	r2, r4, r8
   2f734:	muleq	r2, r4, r8
   2f738:	muleq	r2, r4, r8
   2f73c:	muleq	r2, r4, r8
   2f740:	muleq	r2, r4, r8
   2f744:	muleq	r2, r4, r8
   2f748:	muleq	r2, r4, r8
   2f74c:			; <UNDEFINED> instruction: 0x0002f7b4
   2f750:	muleq	r2, r4, r8
   2f754:	muleq	r2, r4, r8
   2f758:	muleq	r2, r4, r8
   2f75c:	muleq	r2, r4, r8
   2f760:	muleq	r2, r4, r8
   2f764:	muleq	r2, r4, r8
   2f768:			; <UNDEFINED> instruction: 0x0002f7b4
   2f76c:	muleq	r2, r4, r8
   2f770:	muleq	r2, r4, r8
   2f774:	muleq	r2, r4, r8
   2f778:	muleq	r2, r4, r8
   2f77c:	muleq	r2, r4, r8
   2f780:	muleq	r2, r4, r8
   2f784:	muleq	r2, r4, r8
   2f788:	muleq	r2, r4, r8
   2f78c:	muleq	r2, r4, r8
   2f790:	muleq	r2, r4, r8
   2f794:	muleq	r2, r4, r8
   2f798:	muleq	r2, r4, r8
   2f79c:	muleq	r2, r4, r8
   2f7a0:	muleq	r2, r4, r8
   2f7a4:	muleq	r2, r4, r8
   2f7a8:	muleq	r2, r4, r8
   2f7ac:	muleq	r2, r4, r8
   2f7b0:			; <UNDEFINED> instruction: 0x0002f7b4
   2f7b4:	mov	r0, sp
   2f7b8:	bl	2f5cc <__assert_fail@plt+0x1cb1c>
   2f7bc:	cmp	r0, #0
   2f7c0:	bne	2f8a4 <__assert_fail@plt+0x1cdf4>
   2f7c4:	cmp	r7, #0
   2f7c8:	bmi	2f7fc <__assert_fail@plt+0x1cd4c>
   2f7cc:	ldr	r0, [sp]
   2f7d0:	cmp	r0, r7
   2f7d4:	bne	2f7fc <__assert_fail@plt+0x1cd4c>
   2f7d8:	mov	r0, sp
   2f7dc:	bl	2f644 <__assert_fail@plt+0x1cb94>
   2f7e0:	bl	12804 <__errno_location@plt>
   2f7e4:	mov	r1, #9
   2f7e8:	mvn	r9, #0
   2f7ec:	str	r1, [r0]
   2f7f0:	mov	r0, r9
   2f7f4:	sub	sp, fp, #28
   2f7f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f7fc:	mov	r0, r7
   2f800:	bl	129b4 <fchdir@plt>
   2f804:	cmp	r0, #0
   2f808:	beq	2f834 <__assert_fail@plt+0x1cd84>
   2f80c:	bl	12804 <__errno_location@plt>
   2f810:	ldr	r5, [r0]
   2f814:	mov	r4, r0
   2f818:	mov	r0, sp
   2f81c:	bl	2f644 <__assert_fail@plt+0x1cb94>
   2f820:	str	r5, [r4]
   2f824:	mvn	r9, #0
   2f828:	mov	r0, r9
   2f82c:	sub	sp, fp, #28
   2f830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f834:	mov	r0, r5
   2f838:	mov	r1, r4
   2f83c:	bl	351f4 <__assert_fail@plt+0x22744>
   2f840:	mov	r9, r0
   2f844:	mov	r4, #0
   2f848:	cmn	r0, #1
   2f84c:	bne	2f858 <__assert_fail@plt+0x1cda8>
   2f850:	bl	12804 <__errno_location@plt>
   2f854:	ldr	r4, [r0]
   2f858:	mov	r0, sp
   2f85c:	bl	2f628 <__assert_fail@plt+0x1cb78>
   2f860:	cmp	r0, #0
   2f864:	bne	2f8b0 <__assert_fail@plt+0x1ce00>
   2f868:	mov	r0, sp
   2f86c:	bl	2f644 <__assert_fail@plt+0x1cb94>
   2f870:	cmp	r4, #0
   2f874:	beq	2f880 <__assert_fail@plt+0x1cdd0>
   2f878:	bl	12804 <__errno_location@plt>
   2f87c:	str	r4, [r0]
   2f880:	mov	r0, r9
   2f884:	sub	sp, fp, #28
   2f888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f88c:	cmp	r2, #95	; 0x5f
   2f890:	beq	2f7b4 <__assert_fail@plt+0x1cd04>
   2f894:	str	r2, [r8]
   2f898:	mov	r0, r9
   2f89c:	sub	sp, fp, #28
   2f8a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f8a4:	bl	12804 <__errno_location@plt>
   2f8a8:	ldr	r0, [r0]
   2f8ac:	bl	2819c <__assert_fail@plt+0x156ec>
   2f8b0:	bl	12804 <__errno_location@plt>
   2f8b4:	ldr	r0, [r0]
   2f8b8:	bl	281dc <__assert_fail@plt+0x1572c>
   2f8bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f8c0:	add	fp, sp, #28
   2f8c4:	sub	sp, sp, #964	; 0x3c4
   2f8c8:	sub	sp, sp, #3072	; 0xc00
   2f8cc:	mov	r4, r2
   2f8d0:	mov	r5, r1
   2f8d4:	cmn	r0, #100	; 0x64
   2f8d8:	beq	2f8ec <__assert_fail@plt+0x1ce3c>
   2f8dc:	mov	r7, r0
   2f8e0:	ldrb	r0, [r5]
   2f8e4:	cmp	r0, #47	; 0x2f
   2f8e8:	bne	2f900 <__assert_fail@plt+0x1ce50>
   2f8ec:	mov	r0, r5
   2f8f0:	mov	r1, r4
   2f8f4:	sub	sp, fp, #28
   2f8f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f8fc:	b	35268 <__assert_fail@plt+0x227b8>
   2f900:	mov	sl, sp
   2f904:	mov	r1, r7
   2f908:	mov	r2, r5
   2f90c:	mov	r0, sl
   2f910:	bl	4c070 <__assert_fail@plt+0x395c0>
   2f914:	cmp	r0, #0
   2f918:	beq	2fa04 <__assert_fail@plt+0x1cf54>
   2f91c:	mov	r1, r4
   2f920:	mov	r6, r0
   2f924:	bl	35268 <__assert_fail@plt+0x227b8>
   2f928:	mov	r9, r0
   2f92c:	bl	12804 <__errno_location@plt>
   2f930:	ldr	r2, [r0]
   2f934:	mov	r8, r0
   2f938:	cmp	r6, sl
   2f93c:	beq	2f950 <__assert_fail@plt+0x1cea0>
   2f940:	mov	r0, r6
   2f944:	mov	r6, r2
   2f948:	bl	32910 <__assert_fail@plt+0x1fe60>
   2f94c:	mov	r2, r6
   2f950:	cmn	r9, #1
   2f954:	bne	2fad0 <__assert_fail@plt+0x1d020>
   2f958:	sub	r0, r2, #1
   2f95c:	cmp	r0, #37	; 0x25
   2f960:	bhi	2fadc <__assert_fail@plt+0x1d02c>
   2f964:	add	r1, pc, #0
   2f968:	ldr	pc, [r1, r0, lsl #2]
   2f96c:	andeq	pc, r2, r4, lsl #20
   2f970:	andeq	pc, r2, r4, lsl #20
   2f974:	andeq	pc, r2, r4, ror #21
   2f978:	andeq	pc, r2, r4, ror #21
   2f97c:	andeq	pc, r2, r4, ror #21
   2f980:	andeq	pc, r2, r4, ror #21
   2f984:	andeq	pc, r2, r4, ror #21
   2f988:	andeq	pc, r2, r4, ror #21
   2f98c:	andeq	pc, r2, r4, ror #21
   2f990:	andeq	pc, r2, r4, ror #21
   2f994:	andeq	pc, r2, r4, ror #21
   2f998:	andeq	pc, r2, r4, ror #21
   2f99c:	andeq	pc, r2, r4, lsl #20
   2f9a0:	andeq	pc, r2, r4, ror #21
   2f9a4:	andeq	pc, r2, r4, ror #21
   2f9a8:	andeq	pc, r2, r4, ror #21
   2f9ac:	andeq	pc, r2, r4, ror #21
   2f9b0:	andeq	pc, r2, r4, ror #21
   2f9b4:	andeq	pc, r2, r4, ror #21
   2f9b8:	andeq	pc, r2, r4, lsl #20
   2f9bc:	andeq	pc, r2, r4, ror #21
   2f9c0:	andeq	pc, r2, r4, ror #21
   2f9c4:	andeq	pc, r2, r4, ror #21
   2f9c8:	andeq	pc, r2, r4, ror #21
   2f9cc:	andeq	pc, r2, r4, ror #21
   2f9d0:	andeq	pc, r2, r4, ror #21
   2f9d4:	andeq	pc, r2, r4, ror #21
   2f9d8:	andeq	pc, r2, r4, ror #21
   2f9dc:	andeq	pc, r2, r4, ror #21
   2f9e0:	andeq	pc, r2, r4, ror #21
   2f9e4:	andeq	pc, r2, r4, ror #21
   2f9e8:	andeq	pc, r2, r4, ror #21
   2f9ec:	andeq	pc, r2, r4, ror #21
   2f9f0:	andeq	pc, r2, r4, ror #21
   2f9f4:	andeq	pc, r2, r4, ror #21
   2f9f8:	andeq	pc, r2, r4, ror #21
   2f9fc:	andeq	pc, r2, r4, ror #21
   2fa00:	andeq	pc, r2, r4, lsl #20
   2fa04:	mov	r0, sp
   2fa08:	bl	2f5cc <__assert_fail@plt+0x1cb1c>
   2fa0c:	cmp	r0, #0
   2fa10:	bne	2faf4 <__assert_fail@plt+0x1d044>
   2fa14:	cmp	r7, #0
   2fa18:	bmi	2fa4c <__assert_fail@plt+0x1cf9c>
   2fa1c:	ldr	r0, [sp]
   2fa20:	cmp	r0, r7
   2fa24:	bne	2fa4c <__assert_fail@plt+0x1cf9c>
   2fa28:	mov	r0, sp
   2fa2c:	bl	2f644 <__assert_fail@plt+0x1cb94>
   2fa30:	bl	12804 <__errno_location@plt>
   2fa34:	mov	r1, #9
   2fa38:	mvn	r9, #0
   2fa3c:	str	r1, [r0]
   2fa40:	mov	r0, r9
   2fa44:	sub	sp, fp, #28
   2fa48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fa4c:	mov	r0, r7
   2fa50:	bl	129b4 <fchdir@plt>
   2fa54:	cmp	r0, #0
   2fa58:	beq	2fa84 <__assert_fail@plt+0x1cfd4>
   2fa5c:	bl	12804 <__errno_location@plt>
   2fa60:	ldr	r5, [r0]
   2fa64:	mov	r4, r0
   2fa68:	mov	r0, sp
   2fa6c:	bl	2f644 <__assert_fail@plt+0x1cb94>
   2fa70:	str	r5, [r4]
   2fa74:	mvn	r9, #0
   2fa78:	mov	r0, r9
   2fa7c:	sub	sp, fp, #28
   2fa80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fa84:	mov	r0, r5
   2fa88:	mov	r1, r4
   2fa8c:	bl	35268 <__assert_fail@plt+0x227b8>
   2fa90:	mov	r9, r0
   2fa94:	mov	r4, #0
   2fa98:	cmn	r0, #1
   2fa9c:	bne	2faa8 <__assert_fail@plt+0x1cff8>
   2faa0:	bl	12804 <__errno_location@plt>
   2faa4:	ldr	r4, [r0]
   2faa8:	mov	r0, sp
   2faac:	bl	2f628 <__assert_fail@plt+0x1cb78>
   2fab0:	cmp	r0, #0
   2fab4:	bne	2fb00 <__assert_fail@plt+0x1d050>
   2fab8:	mov	r0, sp
   2fabc:	bl	2f644 <__assert_fail@plt+0x1cb94>
   2fac0:	cmp	r4, #0
   2fac4:	beq	2fad0 <__assert_fail@plt+0x1d020>
   2fac8:	bl	12804 <__errno_location@plt>
   2facc:	str	r4, [r0]
   2fad0:	mov	r0, r9
   2fad4:	sub	sp, fp, #28
   2fad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fadc:	cmp	r2, #95	; 0x5f
   2fae0:	beq	2fa04 <__assert_fail@plt+0x1cf54>
   2fae4:	str	r2, [r8]
   2fae8:	mov	r0, r9
   2faec:	sub	sp, fp, #28
   2faf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2faf4:	bl	12804 <__errno_location@plt>
   2faf8:	ldr	r0, [r0]
   2fafc:	bl	2819c <__assert_fail@plt+0x156ec>
   2fb00:	bl	12804 <__errno_location@plt>
   2fb04:	ldr	r0, [r0]
   2fb08:	bl	281dc <__assert_fail@plt+0x1572c>
   2fb0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fb10:	add	fp, sp, #28
   2fb14:	sub	sp, sp, #964	; 0x3c4
   2fb18:	sub	sp, sp, #3072	; 0xc00
   2fb1c:	mov	r4, r2
   2fb20:	mov	r5, r1
   2fb24:	cmn	r0, #100	; 0x64
   2fb28:	beq	2fb3c <__assert_fail@plt+0x1d08c>
   2fb2c:	mov	r7, r0
   2fb30:	ldrb	r0, [r5]
   2fb34:	cmp	r0, #47	; 0x2f
   2fb38:	bne	2fb50 <__assert_fail@plt+0x1d0a0>
   2fb3c:	mov	r0, r5
   2fb40:	mov	r1, r4
   2fb44:	sub	sp, fp, #28
   2fb48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fb4c:	b	128a0 <setfilecon@plt>
   2fb50:	mov	sl, sp
   2fb54:	mov	r1, r7
   2fb58:	mov	r2, r5
   2fb5c:	mov	r0, sl
   2fb60:	bl	4c070 <__assert_fail@plt+0x395c0>
   2fb64:	cmp	r0, #0
   2fb68:	beq	2fc54 <__assert_fail@plt+0x1d1a4>
   2fb6c:	mov	r1, r4
   2fb70:	mov	r6, r0
   2fb74:	bl	128a0 <setfilecon@plt>
   2fb78:	mov	r9, r0
   2fb7c:	bl	12804 <__errno_location@plt>
   2fb80:	ldr	r2, [r0]
   2fb84:	mov	r8, r0
   2fb88:	cmp	r6, sl
   2fb8c:	beq	2fba0 <__assert_fail@plt+0x1d0f0>
   2fb90:	mov	r0, r6
   2fb94:	mov	r6, r2
   2fb98:	bl	32910 <__assert_fail@plt+0x1fe60>
   2fb9c:	mov	r2, r6
   2fba0:	cmn	r9, #1
   2fba4:	bne	2fd20 <__assert_fail@plt+0x1d270>
   2fba8:	sub	r0, r2, #1
   2fbac:	cmp	r0, #37	; 0x25
   2fbb0:	bhi	2fd2c <__assert_fail@plt+0x1d27c>
   2fbb4:	add	r1, pc, #0
   2fbb8:	ldr	pc, [r1, r0, lsl #2]
   2fbbc:	andeq	pc, r2, r4, asr ip	; <UNPREDICTABLE>
   2fbc0:	andeq	pc, r2, r4, asr ip	; <UNPREDICTABLE>
   2fbc4:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fbc8:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fbcc:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fbd0:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fbd4:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fbd8:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fbdc:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fbe0:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fbe4:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fbe8:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fbec:	andeq	pc, r2, r4, asr ip	; <UNPREDICTABLE>
   2fbf0:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fbf4:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fbf8:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fbfc:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc00:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc04:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc08:	andeq	pc, r2, r4, asr ip	; <UNPREDICTABLE>
   2fc0c:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc10:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc14:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc18:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc1c:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc20:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc24:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc28:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc2c:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc30:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc34:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc38:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc3c:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc40:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc44:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc48:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc4c:	andeq	pc, r2, r4, lsr sp	; <UNPREDICTABLE>
   2fc50:	andeq	pc, r2, r4, asr ip	; <UNPREDICTABLE>
   2fc54:	mov	r0, sp
   2fc58:	bl	2f5cc <__assert_fail@plt+0x1cb1c>
   2fc5c:	cmp	r0, #0
   2fc60:	bne	2fd44 <__assert_fail@plt+0x1d294>
   2fc64:	cmp	r7, #0
   2fc68:	bmi	2fc9c <__assert_fail@plt+0x1d1ec>
   2fc6c:	ldr	r0, [sp]
   2fc70:	cmp	r0, r7
   2fc74:	bne	2fc9c <__assert_fail@plt+0x1d1ec>
   2fc78:	mov	r0, sp
   2fc7c:	bl	2f644 <__assert_fail@plt+0x1cb94>
   2fc80:	bl	12804 <__errno_location@plt>
   2fc84:	mov	r1, #9
   2fc88:	mvn	r9, #0
   2fc8c:	str	r1, [r0]
   2fc90:	mov	r0, r9
   2fc94:	sub	sp, fp, #28
   2fc98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fc9c:	mov	r0, r7
   2fca0:	bl	129b4 <fchdir@plt>
   2fca4:	cmp	r0, #0
   2fca8:	beq	2fcd4 <__assert_fail@plt+0x1d224>
   2fcac:	bl	12804 <__errno_location@plt>
   2fcb0:	ldr	r5, [r0]
   2fcb4:	mov	r4, r0
   2fcb8:	mov	r0, sp
   2fcbc:	bl	2f644 <__assert_fail@plt+0x1cb94>
   2fcc0:	str	r5, [r4]
   2fcc4:	mvn	r9, #0
   2fcc8:	mov	r0, r9
   2fccc:	sub	sp, fp, #28
   2fcd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fcd4:	mov	r0, r5
   2fcd8:	mov	r1, r4
   2fcdc:	bl	128a0 <setfilecon@plt>
   2fce0:	mov	r9, r0
   2fce4:	mov	r4, #0
   2fce8:	cmn	r0, #1
   2fcec:	bne	2fcf8 <__assert_fail@plt+0x1d248>
   2fcf0:	bl	12804 <__errno_location@plt>
   2fcf4:	ldr	r4, [r0]
   2fcf8:	mov	r0, sp
   2fcfc:	bl	2f628 <__assert_fail@plt+0x1cb78>
   2fd00:	cmp	r0, #0
   2fd04:	bne	2fd50 <__assert_fail@plt+0x1d2a0>
   2fd08:	mov	r0, sp
   2fd0c:	bl	2f644 <__assert_fail@plt+0x1cb94>
   2fd10:	cmp	r4, #0
   2fd14:	beq	2fd20 <__assert_fail@plt+0x1d270>
   2fd18:	bl	12804 <__errno_location@plt>
   2fd1c:	str	r4, [r0]
   2fd20:	mov	r0, r9
   2fd24:	sub	sp, fp, #28
   2fd28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd2c:	cmp	r2, #95	; 0x5f
   2fd30:	beq	2fc54 <__assert_fail@plt+0x1d1a4>
   2fd34:	str	r2, [r8]
   2fd38:	mov	r0, r9
   2fd3c:	sub	sp, fp, #28
   2fd40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fd44:	bl	12804 <__errno_location@plt>
   2fd48:	ldr	r0, [r0]
   2fd4c:	bl	2819c <__assert_fail@plt+0x156ec>
   2fd50:	bl	12804 <__errno_location@plt>
   2fd54:	ldr	r0, [r0]
   2fd58:	bl	281dc <__assert_fail@plt+0x1572c>
   2fd5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fd60:	add	fp, sp, #28
   2fd64:	sub	sp, sp, #964	; 0x3c4
   2fd68:	sub	sp, sp, #3072	; 0xc00
   2fd6c:	mov	r4, r2
   2fd70:	mov	r5, r1
   2fd74:	cmn	r0, #100	; 0x64
   2fd78:	beq	2fd8c <__assert_fail@plt+0x1d2dc>
   2fd7c:	mov	r7, r0
   2fd80:	ldrb	r0, [r5]
   2fd84:	cmp	r0, #47	; 0x2f
   2fd88:	bne	2fda0 <__assert_fail@plt+0x1d2f0>
   2fd8c:	mov	r0, r5
   2fd90:	mov	r1, r4
   2fd94:	sub	sp, fp, #28
   2fd98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fd9c:	b	12468 <lsetfilecon@plt>
   2fda0:	mov	sl, sp
   2fda4:	mov	r1, r7
   2fda8:	mov	r2, r5
   2fdac:	mov	r0, sl
   2fdb0:	bl	4c070 <__assert_fail@plt+0x395c0>
   2fdb4:	cmp	r0, #0
   2fdb8:	beq	2fea4 <__assert_fail@plt+0x1d3f4>
   2fdbc:	mov	r1, r4
   2fdc0:	mov	r6, r0
   2fdc4:	bl	12468 <lsetfilecon@plt>
   2fdc8:	mov	r9, r0
   2fdcc:	bl	12804 <__errno_location@plt>
   2fdd0:	ldr	r2, [r0]
   2fdd4:	mov	r8, r0
   2fdd8:	cmp	r6, sl
   2fddc:	beq	2fdf0 <__assert_fail@plt+0x1d340>
   2fde0:	mov	r0, r6
   2fde4:	mov	r6, r2
   2fde8:	bl	32910 <__assert_fail@plt+0x1fe60>
   2fdec:	mov	r2, r6
   2fdf0:	cmn	r9, #1
   2fdf4:	bne	2ff70 <__assert_fail@plt+0x1d4c0>
   2fdf8:	sub	r0, r2, #1
   2fdfc:	cmp	r0, #37	; 0x25
   2fe00:	bhi	2ff7c <__assert_fail@plt+0x1d4cc>
   2fe04:	add	r1, pc, #0
   2fe08:	ldr	pc, [r1, r0, lsl #2]
   2fe0c:	andeq	pc, r2, r4, lsr #29
   2fe10:	andeq	pc, r2, r4, lsr #29
   2fe14:	andeq	pc, r2, r4, lsl #31
   2fe18:	andeq	pc, r2, r4, lsl #31
   2fe1c:	andeq	pc, r2, r4, lsl #31
   2fe20:	andeq	pc, r2, r4, lsl #31
   2fe24:	andeq	pc, r2, r4, lsl #31
   2fe28:	andeq	pc, r2, r4, lsl #31
   2fe2c:	andeq	pc, r2, r4, lsl #31
   2fe30:	andeq	pc, r2, r4, lsl #31
   2fe34:	andeq	pc, r2, r4, lsl #31
   2fe38:	andeq	pc, r2, r4, lsl #31
   2fe3c:	andeq	pc, r2, r4, lsr #29
   2fe40:	andeq	pc, r2, r4, lsl #31
   2fe44:	andeq	pc, r2, r4, lsl #31
   2fe48:	andeq	pc, r2, r4, lsl #31
   2fe4c:	andeq	pc, r2, r4, lsl #31
   2fe50:	andeq	pc, r2, r4, lsl #31
   2fe54:	andeq	pc, r2, r4, lsl #31
   2fe58:	andeq	pc, r2, r4, lsr #29
   2fe5c:	andeq	pc, r2, r4, lsl #31
   2fe60:	andeq	pc, r2, r4, lsl #31
   2fe64:	andeq	pc, r2, r4, lsl #31
   2fe68:	andeq	pc, r2, r4, lsl #31
   2fe6c:	andeq	pc, r2, r4, lsl #31
   2fe70:	andeq	pc, r2, r4, lsl #31
   2fe74:	andeq	pc, r2, r4, lsl #31
   2fe78:	andeq	pc, r2, r4, lsl #31
   2fe7c:	andeq	pc, r2, r4, lsl #31
   2fe80:	andeq	pc, r2, r4, lsl #31
   2fe84:	andeq	pc, r2, r4, lsl #31
   2fe88:	andeq	pc, r2, r4, lsl #31
   2fe8c:	andeq	pc, r2, r4, lsl #31
   2fe90:	andeq	pc, r2, r4, lsl #31
   2fe94:	andeq	pc, r2, r4, lsl #31
   2fe98:	andeq	pc, r2, r4, lsl #31
   2fe9c:	andeq	pc, r2, r4, lsl #31
   2fea0:	andeq	pc, r2, r4, lsr #29
   2fea4:	mov	r0, sp
   2fea8:	bl	2f5cc <__assert_fail@plt+0x1cb1c>
   2feac:	cmp	r0, #0
   2feb0:	bne	2ff94 <__assert_fail@plt+0x1d4e4>
   2feb4:	cmp	r7, #0
   2feb8:	bmi	2feec <__assert_fail@plt+0x1d43c>
   2febc:	ldr	r0, [sp]
   2fec0:	cmp	r0, r7
   2fec4:	bne	2feec <__assert_fail@plt+0x1d43c>
   2fec8:	mov	r0, sp
   2fecc:	bl	2f644 <__assert_fail@plt+0x1cb94>
   2fed0:	bl	12804 <__errno_location@plt>
   2fed4:	mov	r1, #9
   2fed8:	mvn	r9, #0
   2fedc:	str	r1, [r0]
   2fee0:	mov	r0, r9
   2fee4:	sub	sp, fp, #28
   2fee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2feec:	mov	r0, r7
   2fef0:	bl	129b4 <fchdir@plt>
   2fef4:	cmp	r0, #0
   2fef8:	beq	2ff24 <__assert_fail@plt+0x1d474>
   2fefc:	bl	12804 <__errno_location@plt>
   2ff00:	ldr	r5, [r0]
   2ff04:	mov	r4, r0
   2ff08:	mov	r0, sp
   2ff0c:	bl	2f644 <__assert_fail@plt+0x1cb94>
   2ff10:	str	r5, [r4]
   2ff14:	mvn	r9, #0
   2ff18:	mov	r0, r9
   2ff1c:	sub	sp, fp, #28
   2ff20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ff24:	mov	r0, r5
   2ff28:	mov	r1, r4
   2ff2c:	bl	12468 <lsetfilecon@plt>
   2ff30:	mov	r9, r0
   2ff34:	mov	r4, #0
   2ff38:	cmn	r0, #1
   2ff3c:	bne	2ff48 <__assert_fail@plt+0x1d498>
   2ff40:	bl	12804 <__errno_location@plt>
   2ff44:	ldr	r4, [r0]
   2ff48:	mov	r0, sp
   2ff4c:	bl	2f628 <__assert_fail@plt+0x1cb78>
   2ff50:	cmp	r0, #0
   2ff54:	bne	2ffa0 <__assert_fail@plt+0x1d4f0>
   2ff58:	mov	r0, sp
   2ff5c:	bl	2f644 <__assert_fail@plt+0x1cb94>
   2ff60:	cmp	r4, #0
   2ff64:	beq	2ff70 <__assert_fail@plt+0x1d4c0>
   2ff68:	bl	12804 <__errno_location@plt>
   2ff6c:	str	r4, [r0]
   2ff70:	mov	r0, r9
   2ff74:	sub	sp, fp, #28
   2ff78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ff7c:	cmp	r2, #95	; 0x5f
   2ff80:	beq	2fea4 <__assert_fail@plt+0x1d3f4>
   2ff84:	str	r2, [r8]
   2ff88:	mov	r0, r9
   2ff8c:	sub	sp, fp, #28
   2ff90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ff94:	bl	12804 <__errno_location@plt>
   2ff98:	ldr	r0, [r0]
   2ff9c:	bl	2819c <__assert_fail@plt+0x156ec>
   2ffa0:	bl	12804 <__errno_location@plt>
   2ffa4:	ldr	r0, [r0]
   2ffa8:	bl	281dc <__assert_fail@plt+0x1572c>
   2ffac:	push	{r4, r5, fp, lr}
   2ffb0:	add	fp, sp, #8
   2ffb4:	mov	r4, r1
   2ffb8:	mov	r1, #0
   2ffbc:	mov	r5, r0
   2ffc0:	mov	r2, r4
   2ffc4:	bl	12894 <memchr@plt>
   2ffc8:	sub	r1, r0, r5
   2ffcc:	cmp	r0, #0
   2ffd0:	addne	r4, r1, #1
   2ffd4:	mov	r0, r4
   2ffd8:	pop	{r4, r5, fp, pc}
   2ffdc:	mov	r1, #0
   2ffe0:	mov	r2, #3
   2ffe4:	b	326d4 <__assert_fail@plt+0x1fc24>
   2ffe8:	push	{r4, r5, r6, r7, fp, lr}
   2ffec:	add	fp, sp, #16
   2fff0:	mov	r4, r0
   2fff4:	cmp	r0, #2
   2fff8:	bhi	30028 <__assert_fail@plt+0x1d578>
   2fffc:	mov	r0, r4
   30000:	bl	2ffdc <__assert_fail@plt+0x1d52c>
   30004:	mov	r5, r0
   30008:	bl	12804 <__errno_location@plt>
   3000c:	ldr	r7, [r0]
   30010:	mov	r6, r0
   30014:	mov	r0, r4
   30018:	bl	12a68 <close@plt>
   3001c:	mov	r0, r5
   30020:	str	r7, [r6]
   30024:	pop	{r4, r5, r6, r7, fp, pc}
   30028:	mov	r0, r4
   3002c:	pop	{r4, r5, r6, r7, fp, pc}
   30030:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   30034:	add	fp, sp, #24
   30038:	sub	sp, sp, #32
   3003c:	ldr	r7, [fp, #12]
   30040:	ldr	r6, [fp, #8]
   30044:	mov	r4, r2
   30048:	mov	r5, r0
   3004c:	cmp	r1, #0
   30050:	beq	30070 <__assert_fail@plt+0x1d5c0>
   30054:	mov	r2, r1
   30058:	movw	r1, #10772	; 0x2a14
   3005c:	str	r3, [sp]
   30060:	mov	r0, r5
   30064:	mov	r3, r4
   30068:	movt	r1, #5
   3006c:	b	30080 <__assert_fail@plt+0x1d5d0>
   30070:	movw	r1, #10784	; 0x2a20
   30074:	mov	r0, r5
   30078:	mov	r2, r4
   3007c:	movt	r1, #5
   30080:	bl	127f8 <fprintf@plt>
   30084:	movw	r1, #10791	; 0x2a27
   30088:	mov	r0, #0
   3008c:	mov	r2, #5
   30090:	movt	r1, #5
   30094:	bl	12564 <dcgettext@plt>
   30098:	movw	r1, #11487	; 0x2cdf
   3009c:	mov	r2, r0
   300a0:	mov	r0, r5
   300a4:	movw	r3, #2022	; 0x7e6
   300a8:	movt	r1, #5
   300ac:	bl	127f8 <fprintf@plt>
   300b0:	mov	r0, #10
   300b4:	mov	r1, r5
   300b8:	bl	12948 <fputc@plt>
   300bc:	movw	r1, #10795	; 0x2a2b
   300c0:	mov	r0, #0
   300c4:	mov	r2, #5
   300c8:	movt	r1, #5
   300cc:	bl	12564 <dcgettext@plt>
   300d0:	movw	r2, #10966	; 0x2ad6
   300d4:	mov	r1, r0
   300d8:	mov	r0, r5
   300dc:	movt	r2, #5
   300e0:	bl	127f8 <fprintf@plt>
   300e4:	mov	r0, #10
   300e8:	mov	r1, r5
   300ec:	bl	12948 <fputc@plt>
   300f0:	cmp	r7, #9
   300f4:	bhi	30130 <__assert_fail@plt+0x1d680>
   300f8:	add	r0, pc, #0
   300fc:	ldr	pc, [r0, r7, lsl #2]
   30100:	andeq	r0, r3, r8, lsr #2
   30104:	andeq	r0, r3, ip, lsr r1
   30108:	andeq	r0, r3, r8, ror #2
   3010c:	muleq	r3, r4, r1
   30110:	andeq	r0, r3, r8, asr #3
   30114:	andeq	r0, r3, r0, lsl #4
   30118:	andeq	r0, r3, r0, asr #4
   3011c:	andeq	r0, r3, r8, lsl #5
   30120:	andeq	r0, r3, r4, lsr #6
   30124:	andeq	r0, r3, ip, asr #5
   30128:	sub	sp, fp, #24
   3012c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30130:	movw	r1, #11319	; 0x2c37
   30134:	movt	r1, #5
   30138:	b	302d4 <__assert_fail@plt+0x1d824>
   3013c:	movw	r1, #11000	; 0x2af8
   30140:	mov	r0, #0
   30144:	mov	r2, #5
   30148:	movt	r1, #5
   3014c:	bl	12564 <dcgettext@plt>
   30150:	ldr	r2, [r6]
   30154:	mov	r1, r0
   30158:	mov	r0, r5
   3015c:	sub	sp, fp, #24
   30160:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   30164:	b	127f8 <fprintf@plt>
   30168:	movw	r1, #11016	; 0x2b08
   3016c:	mov	r0, #0
   30170:	mov	r2, #5
   30174:	movt	r1, #5
   30178:	bl	12564 <dcgettext@plt>
   3017c:	ldm	r6, {r2, r3}
   30180:	mov	r1, r0
   30184:	mov	r0, r5
   30188:	sub	sp, fp, #24
   3018c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   30190:	b	127f8 <fprintf@plt>
   30194:	movw	r1, #11039	; 0x2b1f
   30198:	mov	r0, #0
   3019c:	mov	r2, #5
   301a0:	movt	r1, #5
   301a4:	bl	12564 <dcgettext@plt>
   301a8:	mov	r1, r0
   301ac:	ldr	r0, [r6, #8]
   301b0:	ldm	r6, {r2, r3}
   301b4:	str	r0, [sp]
   301b8:	mov	r0, r5
   301bc:	bl	127f8 <fprintf@plt>
   301c0:	sub	sp, fp, #24
   301c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   301c8:	movw	r1, #11067	; 0x2b3b
   301cc:	mov	r0, #0
   301d0:	mov	r2, #5
   301d4:	movt	r1, #5
   301d8:	bl	12564 <dcgettext@plt>
   301dc:	mov	r1, r0
   301e0:	ldr	r0, [r6, #8]
   301e4:	ldm	r6, {r2, r3}
   301e8:	ldr	r7, [r6, #12]
   301ec:	stm	sp, {r0, r7}
   301f0:	mov	r0, r5
   301f4:	bl	127f8 <fprintf@plt>
   301f8:	sub	sp, fp, #24
   301fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30200:	movw	r1, #11099	; 0x2b5b
   30204:	mov	r0, #0
   30208:	mov	r2, #5
   3020c:	movt	r1, #5
   30210:	bl	12564 <dcgettext@plt>
   30214:	mov	r1, r0
   30218:	ldm	r6, {r2, r3}
   3021c:	ldr	r0, [r6, #8]
   30220:	ldr	r7, [r6, #12]
   30224:	ldr	r6, [r6, #16]
   30228:	stm	sp, {r0, r7}
   3022c:	str	r6, [sp, #8]
   30230:	mov	r0, r5
   30234:	bl	127f8 <fprintf@plt>
   30238:	sub	sp, fp, #24
   3023c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30240:	movw	r1, #11135	; 0x2b7f
   30244:	mov	r0, #0
   30248:	mov	r2, #5
   3024c:	movt	r1, #5
   30250:	bl	12564 <dcgettext@plt>
   30254:	mov	r1, r0
   30258:	ldm	r6, {r2, r3}
   3025c:	ldr	r0, [r6, #8]
   30260:	ldr	r7, [r6, #12]
   30264:	ldr	r4, [r6, #16]
   30268:	ldr	r6, [r6, #20]
   3026c:	stm	sp, {r0, r7}
   30270:	str	r4, [sp, #8]
   30274:	str	r6, [sp, #12]
   30278:	mov	r0, r5
   3027c:	bl	127f8 <fprintf@plt>
   30280:	sub	sp, fp, #24
   30284:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30288:	movw	r1, #11175	; 0x2ba7
   3028c:	mov	r0, #0
   30290:	mov	r2, #5
   30294:	movt	r1, #5
   30298:	bl	12564 <dcgettext@plt>
   3029c:	mov	ip, r0
   302a0:	ldm	r6, {r2, r3}
   302a4:	ldr	r0, [r6, #8]
   302a8:	ldr	r7, [r6, #12]
   302ac:	ldr	r4, [r6, #16]
   302b0:	ldr	r1, [r6, #20]
   302b4:	ldr	r6, [r6, #24]
   302b8:	stm	sp, {r0, r7}
   302bc:	str	r4, [sp, #8]
   302c0:	str	r1, [sp, #12]
   302c4:	str	r6, [sp, #16]
   302c8:	b	3036c <__assert_fail@plt+0x1d8bc>
   302cc:	movw	r1, #11267	; 0x2c03
   302d0:	movt	r1, #5
   302d4:	mov	r0, #0
   302d8:	mov	r2, #5
   302dc:	bl	12564 <dcgettext@plt>
   302e0:	mov	ip, r0
   302e4:	ldr	r2, [r6]
   302e8:	ldr	r3, [r6, #4]
   302ec:	ldr	r0, [r6, #8]
   302f0:	ldr	r7, [r6, #12]
   302f4:	ldr	r4, [r6, #16]
   302f8:	ldr	r1, [r6, #20]
   302fc:	ldr	lr, [r6, #24]
   30300:	ldr	r8, [r6, #28]
   30304:	ldr	r6, [r6, #32]
   30308:	stm	sp, {r0, r7}
   3030c:	str	r4, [sp, #8]
   30310:	str	r1, [sp, #12]
   30314:	str	lr, [sp, #16]
   30318:	str	r8, [sp, #20]
   3031c:	str	r6, [sp, #24]
   30320:	b	3036c <__assert_fail@plt+0x1d8bc>
   30324:	movw	r1, #11219	; 0x2bd3
   30328:	mov	r0, #0
   3032c:	mov	r2, #5
   30330:	movt	r1, #5
   30334:	bl	12564 <dcgettext@plt>
   30338:	mov	ip, r0
   3033c:	ldm	r6, {r2, r3}
   30340:	ldr	r0, [r6, #8]
   30344:	ldr	r7, [r6, #12]
   30348:	ldr	r4, [r6, #16]
   3034c:	ldr	r1, [r6, #20]
   30350:	ldr	lr, [r6, #24]
   30354:	ldr	r6, [r6, #28]
   30358:	stm	sp, {r0, r7}
   3035c:	str	r4, [sp, #8]
   30360:	str	r1, [sp, #12]
   30364:	str	lr, [sp, #16]
   30368:	str	r6, [sp, #20]
   3036c:	mov	r0, r5
   30370:	mov	r1, ip
   30374:	bl	127f8 <fprintf@plt>
   30378:	sub	sp, fp, #24
   3037c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30380:	push	{r4, sl, fp, lr}
   30384:	add	fp, sp, #8
   30388:	sub	sp, sp, #8
   3038c:	ldr	ip, [fp, #8]
   30390:	mov	lr, #0
   30394:	ldr	r4, [ip, lr, lsl #2]
   30398:	add	lr, lr, #1
   3039c:	cmp	r4, #0
   303a0:	bne	30394 <__assert_fail@plt+0x1d8e4>
   303a4:	sub	r4, lr, #1
   303a8:	str	ip, [sp]
   303ac:	str	r4, [sp, #4]
   303b0:	bl	30030 <__assert_fail@plt+0x1d580>
   303b4:	sub	sp, fp, #8
   303b8:	pop	{r4, sl, fp, pc}
   303bc:	push	{fp, lr}
   303c0:	mov	fp, sp
   303c4:	sub	sp, sp, #48	; 0x30
   303c8:	ldr	ip, [fp, #8]
   303cc:	ldr	lr, [ip]
   303d0:	cmp	lr, #0
   303d4:	str	lr, [sp, #8]
   303d8:	beq	30474 <__assert_fail@plt+0x1d9c4>
   303dc:	ldr	lr, [ip, #4]
   303e0:	cmp	lr, #0
   303e4:	str	lr, [sp, #12]
   303e8:	beq	3047c <__assert_fail@plt+0x1d9cc>
   303ec:	ldr	lr, [ip, #8]
   303f0:	cmp	lr, #0
   303f4:	str	lr, [sp, #16]
   303f8:	beq	30484 <__assert_fail@plt+0x1d9d4>
   303fc:	ldr	lr, [ip, #12]
   30400:	cmp	lr, #0
   30404:	str	lr, [sp, #20]
   30408:	beq	3048c <__assert_fail@plt+0x1d9dc>
   3040c:	ldr	lr, [ip, #16]
   30410:	cmp	lr, #0
   30414:	str	lr, [sp, #24]
   30418:	beq	30494 <__assert_fail@plt+0x1d9e4>
   3041c:	ldr	lr, [ip, #20]
   30420:	cmp	lr, #0
   30424:	str	lr, [sp, #28]
   30428:	beq	3049c <__assert_fail@plt+0x1d9ec>
   3042c:	ldr	lr, [ip, #24]
   30430:	cmp	lr, #0
   30434:	str	lr, [sp, #32]
   30438:	beq	304a4 <__assert_fail@plt+0x1d9f4>
   3043c:	ldr	lr, [ip, #28]
   30440:	cmp	lr, #0
   30444:	str	lr, [sp, #36]	; 0x24
   30448:	beq	304ac <__assert_fail@plt+0x1d9fc>
   3044c:	ldr	lr, [ip, #32]
   30450:	cmp	lr, #0
   30454:	str	lr, [sp, #40]	; 0x28
   30458:	beq	304b4 <__assert_fail@plt+0x1da04>
   3045c:	ldr	lr, [ip, #36]	; 0x24
   30460:	mov	ip, #10
   30464:	cmp	lr, #0
   30468:	str	lr, [sp, #44]	; 0x2c
   3046c:	movweq	ip, #9
   30470:	b	304b8 <__assert_fail@plt+0x1da08>
   30474:	mov	ip, #0
   30478:	b	304b8 <__assert_fail@plt+0x1da08>
   3047c:	mov	ip, #1
   30480:	b	304b8 <__assert_fail@plt+0x1da08>
   30484:	mov	ip, #2
   30488:	b	304b8 <__assert_fail@plt+0x1da08>
   3048c:	mov	ip, #3
   30490:	b	304b8 <__assert_fail@plt+0x1da08>
   30494:	mov	ip, #4
   30498:	b	304b8 <__assert_fail@plt+0x1da08>
   3049c:	mov	ip, #5
   304a0:	b	304b8 <__assert_fail@plt+0x1da08>
   304a4:	mov	ip, #6
   304a8:	b	304b8 <__assert_fail@plt+0x1da08>
   304ac:	mov	ip, #7
   304b0:	b	304b8 <__assert_fail@plt+0x1da08>
   304b4:	mov	ip, #8
   304b8:	add	lr, sp, #8
   304bc:	str	ip, [sp, #4]
   304c0:	str	lr, [sp]
   304c4:	bl	30030 <__assert_fail@plt+0x1d580>
   304c8:	mov	sp, fp
   304cc:	pop	{fp, pc}
   304d0:	push	{fp, lr}
   304d4:	mov	fp, sp
   304d8:	sub	sp, sp, #56	; 0x38
   304dc:	add	ip, fp, #8
   304e0:	str	ip, [sp, #12]
   304e4:	ldr	lr, [fp, #8]
   304e8:	cmp	lr, #0
   304ec:	str	lr, [sp, #16]
   304f0:	beq	3058c <__assert_fail@plt+0x1dadc>
   304f4:	ldr	lr, [ip, #4]
   304f8:	cmp	lr, #0
   304fc:	str	lr, [sp, #20]
   30500:	beq	30594 <__assert_fail@plt+0x1dae4>
   30504:	ldr	lr, [ip, #8]
   30508:	cmp	lr, #0
   3050c:	str	lr, [sp, #24]
   30510:	beq	3059c <__assert_fail@plt+0x1daec>
   30514:	ldr	lr, [ip, #12]
   30518:	cmp	lr, #0
   3051c:	str	lr, [sp, #28]
   30520:	beq	305a4 <__assert_fail@plt+0x1daf4>
   30524:	ldr	lr, [ip, #16]
   30528:	cmp	lr, #0
   3052c:	str	lr, [sp, #32]
   30530:	beq	305ac <__assert_fail@plt+0x1dafc>
   30534:	ldr	lr, [ip, #20]
   30538:	cmp	lr, #0
   3053c:	str	lr, [sp, #36]	; 0x24
   30540:	beq	305b4 <__assert_fail@plt+0x1db04>
   30544:	ldr	lr, [ip, #24]
   30548:	cmp	lr, #0
   3054c:	str	lr, [sp, #40]	; 0x28
   30550:	beq	305bc <__assert_fail@plt+0x1db0c>
   30554:	ldr	lr, [ip, #28]
   30558:	cmp	lr, #0
   3055c:	str	lr, [sp, #44]	; 0x2c
   30560:	beq	305c4 <__assert_fail@plt+0x1db14>
   30564:	ldr	lr, [ip, #32]
   30568:	cmp	lr, #0
   3056c:	str	lr, [sp, #48]	; 0x30
   30570:	beq	305cc <__assert_fail@plt+0x1db1c>
   30574:	ldr	lr, [ip, #36]	; 0x24
   30578:	mov	ip, #10
   3057c:	cmp	lr, #0
   30580:	str	lr, [sp, #52]	; 0x34
   30584:	movweq	ip, #9
   30588:	b	305d0 <__assert_fail@plt+0x1db20>
   3058c:	mov	ip, #0
   30590:	b	305d0 <__assert_fail@plt+0x1db20>
   30594:	mov	ip, #1
   30598:	b	305d0 <__assert_fail@plt+0x1db20>
   3059c:	mov	ip, #2
   305a0:	b	305d0 <__assert_fail@plt+0x1db20>
   305a4:	mov	ip, #3
   305a8:	b	305d0 <__assert_fail@plt+0x1db20>
   305ac:	mov	ip, #4
   305b0:	b	305d0 <__assert_fail@plt+0x1db20>
   305b4:	mov	ip, #5
   305b8:	b	305d0 <__assert_fail@plt+0x1db20>
   305bc:	mov	ip, #6
   305c0:	b	305d0 <__assert_fail@plt+0x1db20>
   305c4:	mov	ip, #7
   305c8:	b	305d0 <__assert_fail@plt+0x1db20>
   305cc:	mov	ip, #8
   305d0:	add	lr, sp, #16
   305d4:	str	ip, [sp, #4]
   305d8:	str	lr, [sp]
   305dc:	bl	30030 <__assert_fail@plt+0x1d580>
   305e0:	mov	sp, fp
   305e4:	pop	{fp, pc}
   305e8:	push	{fp, lr}
   305ec:	mov	fp, sp
   305f0:	movw	r0, #17756	; 0x455c
   305f4:	movt	r0, #6
   305f8:	ldr	r1, [r0]
   305fc:	mov	r0, #10
   30600:	bl	12948 <fputc@plt>
   30604:	movw	r1, #11379	; 0x2c73
   30608:	mov	r0, #0
   3060c:	mov	r2, #5
   30610:	movt	r1, #5
   30614:	bl	12564 <dcgettext@plt>
   30618:	movw	r1, #6692	; 0x1a24
   3061c:	movt	r1, #5
   30620:	bl	12420 <printf@plt>
   30624:	movw	r1, #11399	; 0x2c87
   30628:	mov	r0, #0
   3062c:	mov	r2, #5
   30630:	movt	r1, #5
   30634:	bl	12564 <dcgettext@plt>
   30638:	movw	r1, #5845	; 0x16d5
   3063c:	movw	r2, #6606	; 0x19ce
   30640:	movt	r1, #5
   30644:	movt	r2, #5
   30648:	bl	12420 <printf@plt>
   3064c:	movw	r1, #11419	; 0x2c9b
   30650:	mov	r0, #0
   30654:	mov	r2, #5
   30658:	movt	r1, #5
   3065c:	bl	12564 <dcgettext@plt>
   30660:	movw	r1, #11458	; 0x2cc2
   30664:	movt	r1, #5
   30668:	pop	{fp, lr}
   3066c:	b	12420 <printf@plt>
   30670:	push	{r4, r5, r6, sl, fp, lr}
   30674:	add	fp, sp, #16
   30678:	mov	r4, r2
   3067c:	mov	r5, r1
   30680:	mov	r6, r0
   30684:	bl	36164 <__assert_fail@plt+0x236b4>
   30688:	cmp	r0, #0
   3068c:	popne	{r4, r5, r6, sl, fp, pc}
   30690:	cmp	r6, #0
   30694:	beq	306a8 <__assert_fail@plt+0x1dbf8>
   30698:	cmp	r5, #0
   3069c:	cmpne	r4, #0
   306a0:	bne	306a8 <__assert_fail@plt+0x1dbf8>
   306a4:	pop	{r4, r5, r6, sl, fp, pc}
   306a8:	bl	30c24 <__assert_fail@plt+0x1e174>
   306ac:	push	{r4, r5, r6, sl, fp, lr}
   306b0:	add	fp, sp, #16
   306b4:	mov	r4, r2
   306b8:	mov	r5, r1
   306bc:	mov	r6, r0
   306c0:	bl	36164 <__assert_fail@plt+0x236b4>
   306c4:	cmp	r0, #0
   306c8:	popne	{r4, r5, r6, sl, fp, pc}
   306cc:	cmp	r6, #0
   306d0:	beq	306e4 <__assert_fail@plt+0x1dc34>
   306d4:	cmp	r5, #0
   306d8:	cmpne	r4, #0
   306dc:	bne	306e4 <__assert_fail@plt+0x1dc34>
   306e0:	pop	{r4, r5, r6, sl, fp, pc}
   306e4:	bl	30c24 <__assert_fail@plt+0x1e174>
   306e8:	push	{fp, lr}
   306ec:	mov	fp, sp
   306f0:	bl	35350 <__assert_fail@plt+0x228a0>
   306f4:	cmp	r0, #0
   306f8:	popne	{fp, pc}
   306fc:	bl	30c24 <__assert_fail@plt+0x1e174>
   30700:	push	{fp, lr}
   30704:	mov	fp, sp
   30708:	bl	35350 <__assert_fail@plt+0x228a0>
   3070c:	cmp	r0, #0
   30710:	popne	{fp, pc}
   30714:	bl	30c24 <__assert_fail@plt+0x1e174>
   30718:	push	{fp, lr}
   3071c:	mov	fp, sp
   30720:	bl	35350 <__assert_fail@plt+0x228a0>
   30724:	cmp	r0, #0
   30728:	popne	{fp, pc}
   3072c:	bl	30c24 <__assert_fail@plt+0x1e174>
   30730:	push	{r4, r5, fp, lr}
   30734:	add	fp, sp, #8
   30738:	mov	r4, r1
   3073c:	mov	r5, r0
   30740:	bl	36110 <__assert_fail@plt+0x23660>
   30744:	cmp	r0, #0
   30748:	popne	{r4, r5, fp, pc}
   3074c:	cmp	r5, #0
   30750:	beq	30760 <__assert_fail@plt+0x1dcb0>
   30754:	cmp	r4, #0
   30758:	bne	30760 <__assert_fail@plt+0x1dcb0>
   3075c:	pop	{r4, r5, fp, pc}
   30760:	bl	30c24 <__assert_fail@plt+0x1e174>
   30764:	push	{fp, lr}
   30768:	mov	fp, sp
   3076c:	cmp	r1, #0
   30770:	orreq	r1, r1, #1
   30774:	bl	36110 <__assert_fail@plt+0x23660>
   30778:	cmp	r0, #0
   3077c:	popne	{fp, pc}
   30780:	bl	30c24 <__assert_fail@plt+0x1e174>
   30784:	push	{fp, lr}
   30788:	mov	fp, sp
   3078c:	clz	r3, r2
   30790:	lsr	ip, r3, #5
   30794:	clz	r3, r1
   30798:	lsr	r3, r3, #5
   3079c:	orrs	r3, r3, ip
   307a0:	movwne	r1, #1
   307a4:	movwne	r2, #1
   307a8:	bl	36164 <__assert_fail@plt+0x236b4>
   307ac:	cmp	r0, #0
   307b0:	popne	{fp, pc}
   307b4:	bl	30c24 <__assert_fail@plt+0x1e174>
   307b8:	push	{fp, lr}
   307bc:	mov	fp, sp
   307c0:	mov	r2, r1
   307c4:	mov	r1, r0
   307c8:	mov	r0, #0
   307cc:	bl	36164 <__assert_fail@plt+0x236b4>
   307d0:	cmp	r0, #0
   307d4:	popne	{fp, pc}
   307d8:	bl	30c24 <__assert_fail@plt+0x1e174>
   307dc:	push	{fp, lr}
   307e0:	mov	fp, sp
   307e4:	mov	r2, r1
   307e8:	mov	r1, r0
   307ec:	clz	r0, r2
   307f0:	clz	r3, r1
   307f4:	lsr	r0, r0, #5
   307f8:	lsr	r3, r3, #5
   307fc:	orrs	r0, r3, r0
   30800:	mov	r0, #0
   30804:	movwne	r1, #1
   30808:	movwne	r2, #1
   3080c:	bl	36164 <__assert_fail@plt+0x236b4>
   30810:	cmp	r0, #0
   30814:	popne	{fp, pc}
   30818:	bl	30c24 <__assert_fail@plt+0x1e174>
   3081c:	push	{r4, r5, r6, sl, fp, lr}
   30820:	add	fp, sp, #16
   30824:	ldr	r5, [r1]
   30828:	mov	r4, r1
   3082c:	mov	r6, r0
   30830:	cmp	r0, #0
   30834:	beq	3084c <__assert_fail@plt+0x1dd9c>
   30838:	mov	r0, #1
   3083c:	add	r0, r0, r5, lsr #1
   30840:	adds	r5, r5, r0
   30844:	bcc	30854 <__assert_fail@plt+0x1dda4>
   30848:	b	30890 <__assert_fail@plt+0x1dde0>
   3084c:	cmp	r5, #0
   30850:	movweq	r5, #64	; 0x40
   30854:	mov	r0, r6
   30858:	mov	r1, r5
   3085c:	mov	r2, #1
   30860:	bl	36164 <__assert_fail@plt+0x236b4>
   30864:	cmp	r5, #0
   30868:	mov	r1, r5
   3086c:	movwne	r1, #1
   30870:	cmp	r0, #0
   30874:	bne	30888 <__assert_fail@plt+0x1ddd8>
   30878:	clz	r2, r6
   3087c:	lsr	r2, r2, #5
   30880:	orrs	r1, r2, r1
   30884:	bne	30890 <__assert_fail@plt+0x1dde0>
   30888:	str	r5, [r4]
   3088c:	pop	{r4, r5, r6, sl, fp, pc}
   30890:	bl	30c24 <__assert_fail@plt+0x1e174>
   30894:	push	{r4, r5, r6, r7, fp, lr}
   30898:	add	fp, sp, #16
   3089c:	ldr	r5, [r1]
   308a0:	mov	r6, r2
   308a4:	mov	r4, r1
   308a8:	mov	r7, r0
   308ac:	cmp	r0, #0
   308b0:	beq	308c8 <__assert_fail@plt+0x1de18>
   308b4:	mov	r0, #1
   308b8:	add	r0, r0, r5, lsr #1
   308bc:	adds	r5, r5, r0
   308c0:	bcc	308e0 <__assert_fail@plt+0x1de30>
   308c4:	b	30914 <__assert_fail@plt+0x1de64>
   308c8:	cmp	r5, #0
   308cc:	bne	308e0 <__assert_fail@plt+0x1de30>
   308d0:	mov	r0, #64	; 0x40
   308d4:	cmp	r6, #64	; 0x40
   308d8:	udiv	r5, r0, r6
   308dc:	addhi	r5, r5, #1
   308e0:	mov	r0, r7
   308e4:	mov	r1, r5
   308e8:	mov	r2, r6
   308ec:	bl	36164 <__assert_fail@plt+0x236b4>
   308f0:	cmp	r0, #0
   308f4:	bne	3090c <__assert_fail@plt+0x1de5c>
   308f8:	cmp	r7, #0
   308fc:	beq	30914 <__assert_fail@plt+0x1de64>
   30900:	cmp	r6, #0
   30904:	cmpne	r5, #0
   30908:	bne	30914 <__assert_fail@plt+0x1de64>
   3090c:	str	r5, [r4]
   30910:	pop	{r4, r5, r6, r7, fp, pc}
   30914:	bl	30c24 <__assert_fail@plt+0x1e174>
   30918:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3091c:	add	fp, sp, #24
   30920:	mov	r8, r1
   30924:	ldr	r1, [r1]
   30928:	mov	r5, r0
   3092c:	add	r0, r1, r1, asr #1
   30930:	cmp	r0, r1
   30934:	mvnvs	r0, #-2147483648	; 0x80000000
   30938:	cmp	r0, r3
   3093c:	mov	r7, r0
   30940:	movgt	r7, r3
   30944:	cmn	r3, #1
   30948:	movle	r7, r0
   3094c:	ldr	r0, [fp, #8]
   30950:	cmn	r0, #1
   30954:	ble	3097c <__assert_fail@plt+0x1decc>
   30958:	cmp	r0, #0
   3095c:	beq	309d0 <__assert_fail@plt+0x1df20>
   30960:	cmn	r7, #1
   30964:	ble	309a4 <__assert_fail@plt+0x1def4>
   30968:	mvn	r4, #-2147483648	; 0x80000000
   3096c:	udiv	r6, r4, r0
   30970:	cmp	r6, r7
   30974:	bge	309d0 <__assert_fail@plt+0x1df20>
   30978:	b	309e0 <__assert_fail@plt+0x1df30>
   3097c:	cmn	r7, #1
   30980:	ble	309c0 <__assert_fail@plt+0x1df10>
   30984:	cmn	r0, #1
   30988:	beq	309d0 <__assert_fail@plt+0x1df20>
   3098c:	mov	r6, #-2147483648	; 0x80000000
   30990:	mvn	r4, #-2147483648	; 0x80000000
   30994:	sdiv	r6, r6, r0
   30998:	cmp	r6, r7
   3099c:	bge	309d0 <__assert_fail@plt+0x1df20>
   309a0:	b	309e0 <__assert_fail@plt+0x1df30>
   309a4:	beq	309d0 <__assert_fail@plt+0x1df20>
   309a8:	mov	r6, #-2147483648	; 0x80000000
   309ac:	mvn	r4, #-2147483648	; 0x80000000
   309b0:	sdiv	r6, r6, r7
   309b4:	cmp	r6, r0
   309b8:	bge	309d0 <__assert_fail@plt+0x1df20>
   309bc:	b	309e0 <__assert_fail@plt+0x1df30>
   309c0:	mvn	r4, #-2147483648	; 0x80000000
   309c4:	sdiv	r6, r4, r0
   309c8:	cmp	r7, r6
   309cc:	blt	309e0 <__assert_fail@plt+0x1df30>
   309d0:	mul	r6, r7, r0
   309d4:	mov	r4, #64	; 0x40
   309d8:	cmp	r6, #63	; 0x3f
   309dc:	bgt	309e8 <__assert_fail@plt+0x1df38>
   309e0:	sdiv	r7, r4, r0
   309e4:	mul	r6, r7, r0
   309e8:	cmp	r5, #0
   309ec:	moveq	r4, #0
   309f0:	streq	r4, [r8]
   309f4:	sub	r4, r7, r1
   309f8:	cmp	r4, r2
   309fc:	bge	30aa8 <__assert_fail@plt+0x1dff8>
   30a00:	add	r7, r1, r2
   30a04:	mov	r6, #0
   30a08:	mov	r2, #0
   30a0c:	cmp	r7, r3
   30a10:	movwgt	r6, #1
   30a14:	cmn	r3, #1
   30a18:	movwgt	r2, #1
   30a1c:	cmp	r7, r1
   30a20:	bvs	30adc <__assert_fail@plt+0x1e02c>
   30a24:	ands	r1, r2, r6
   30a28:	bne	30adc <__assert_fail@plt+0x1e02c>
   30a2c:	cmn	r0, #1
   30a30:	ble	30a58 <__assert_fail@plt+0x1dfa8>
   30a34:	cmp	r0, #0
   30a38:	beq	30aa4 <__assert_fail@plt+0x1dff4>
   30a3c:	cmn	r7, #1
   30a40:	ble	30a7c <__assert_fail@plt+0x1dfcc>
   30a44:	mvn	r1, #-2147483648	; 0x80000000
   30a48:	udiv	r1, r1, r0
   30a4c:	cmp	r1, r7
   30a50:	bge	30aa4 <__assert_fail@plt+0x1dff4>
   30a54:	b	30adc <__assert_fail@plt+0x1e02c>
   30a58:	cmn	r7, #1
   30a5c:	ble	30a94 <__assert_fail@plt+0x1dfe4>
   30a60:	cmn	r0, #1
   30a64:	beq	30aa4 <__assert_fail@plt+0x1dff4>
   30a68:	mov	r1, #-2147483648	; 0x80000000
   30a6c:	sdiv	r1, r1, r0
   30a70:	cmp	r1, r7
   30a74:	bge	30aa4 <__assert_fail@plt+0x1dff4>
   30a78:	b	30adc <__assert_fail@plt+0x1e02c>
   30a7c:	beq	30aa4 <__assert_fail@plt+0x1dff4>
   30a80:	mov	r1, #-2147483648	; 0x80000000
   30a84:	sdiv	r1, r1, r7
   30a88:	cmp	r1, r0
   30a8c:	bge	30aa4 <__assert_fail@plt+0x1dff4>
   30a90:	b	30adc <__assert_fail@plt+0x1e02c>
   30a94:	mvn	r1, #-2147483648	; 0x80000000
   30a98:	sdiv	r1, r1, r0
   30a9c:	cmp	r7, r1
   30aa0:	blt	30adc <__assert_fail@plt+0x1e02c>
   30aa4:	mul	r6, r7, r0
   30aa8:	mov	r0, r5
   30aac:	mov	r1, r6
   30ab0:	bl	36110 <__assert_fail@plt+0x23660>
   30ab4:	cmp	r6, #0
   30ab8:	movwne	r6, #1
   30abc:	cmp	r0, #0
   30ac0:	bne	30ad4 <__assert_fail@plt+0x1e024>
   30ac4:	clz	r1, r5
   30ac8:	lsr	r1, r1, #5
   30acc:	orrs	r1, r1, r6
   30ad0:	bne	30adc <__assert_fail@plt+0x1e02c>
   30ad4:	str	r7, [r8]
   30ad8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   30adc:	bl	30c24 <__assert_fail@plt+0x1e174>
   30ae0:	push	{fp, lr}
   30ae4:	mov	fp, sp
   30ae8:	mov	r1, #1
   30aec:	bl	322c0 <__assert_fail@plt+0x1f810>
   30af0:	cmp	r0, #0
   30af4:	popne	{fp, pc}
   30af8:	bl	30c24 <__assert_fail@plt+0x1e174>
   30afc:	push	{fp, lr}
   30b00:	mov	fp, sp
   30b04:	bl	322c0 <__assert_fail@plt+0x1f810>
   30b08:	cmp	r0, #0
   30b0c:	popne	{fp, pc}
   30b10:	bl	30c24 <__assert_fail@plt+0x1e174>
   30b14:	push	{fp, lr}
   30b18:	mov	fp, sp
   30b1c:	mov	r1, #1
   30b20:	bl	322c0 <__assert_fail@plt+0x1f810>
   30b24:	cmp	r0, #0
   30b28:	popne	{fp, pc}
   30b2c:	bl	30c24 <__assert_fail@plt+0x1e174>
   30b30:	push	{fp, lr}
   30b34:	mov	fp, sp
   30b38:	bl	322c0 <__assert_fail@plt+0x1f810>
   30b3c:	cmp	r0, #0
   30b40:	popne	{fp, pc}
   30b44:	bl	30c24 <__assert_fail@plt+0x1e174>
   30b48:	push	{r4, r5, fp, lr}
   30b4c:	add	fp, sp, #8
   30b50:	mov	r5, r0
   30b54:	mov	r0, r1
   30b58:	mov	r4, r1
   30b5c:	bl	35350 <__assert_fail@plt+0x228a0>
   30b60:	cmp	r0, #0
   30b64:	beq	30b78 <__assert_fail@plt+0x1e0c8>
   30b68:	mov	r1, r5
   30b6c:	mov	r2, r4
   30b70:	pop	{r4, r5, fp, lr}
   30b74:	b	124e0 <memcpy@plt>
   30b78:	bl	30c24 <__assert_fail@plt+0x1e174>
   30b7c:	push	{r4, r5, fp, lr}
   30b80:	add	fp, sp, #8
   30b84:	mov	r5, r0
   30b88:	mov	r0, r1
   30b8c:	mov	r4, r1
   30b90:	bl	35350 <__assert_fail@plt+0x228a0>
   30b94:	cmp	r0, #0
   30b98:	beq	30bac <__assert_fail@plt+0x1e0fc>
   30b9c:	mov	r1, r5
   30ba0:	mov	r2, r4
   30ba4:	pop	{r4, r5, fp, lr}
   30ba8:	b	124e0 <memcpy@plt>
   30bac:	bl	30c24 <__assert_fail@plt+0x1e174>
   30bb0:	push	{r4, r5, fp, lr}
   30bb4:	add	fp, sp, #8
   30bb8:	mov	r5, r0
   30bbc:	add	r0, r1, #1
   30bc0:	mov	r4, r1
   30bc4:	bl	35350 <__assert_fail@plt+0x228a0>
   30bc8:	cmp	r0, #0
   30bcc:	beq	30be8 <__assert_fail@plt+0x1e138>
   30bd0:	mov	r1, #0
   30bd4:	mov	r2, r4
   30bd8:	strb	r1, [r0, r4]
   30bdc:	mov	r1, r5
   30be0:	pop	{r4, r5, fp, lr}
   30be4:	b	124e0 <memcpy@plt>
   30be8:	bl	30c24 <__assert_fail@plt+0x1e174>
   30bec:	push	{r4, r5, fp, lr}
   30bf0:	add	fp, sp, #8
   30bf4:	mov	r4, r0
   30bf8:	bl	127bc <strlen@plt>
   30bfc:	add	r5, r0, #1
   30c00:	mov	r0, r5
   30c04:	bl	35350 <__assert_fail@plt+0x228a0>
   30c08:	cmp	r0, #0
   30c0c:	beq	30c20 <__assert_fail@plt+0x1e170>
   30c10:	mov	r1, r4
   30c14:	mov	r2, r5
   30c18:	pop	{r4, r5, fp, lr}
   30c1c:	b	124e0 <memcpy@plt>
   30c20:	bl	30c24 <__assert_fail@plt+0x1e174>
   30c24:	push	{fp, lr}
   30c28:	mov	fp, sp
   30c2c:	movw	r0, #17648	; 0x44f0
   30c30:	movw	r1, #11534	; 0x2d0e
   30c34:	mov	r2, #5
   30c38:	movt	r0, #6
   30c3c:	movt	r1, #5
   30c40:	ldr	r4, [r0]
   30c44:	mov	r0, #0
   30c48:	bl	12564 <dcgettext@plt>
   30c4c:	movw	r2, #12871	; 0x3247
   30c50:	mov	r3, r0
   30c54:	mov	r0, r4
   30c58:	mov	r1, #0
   30c5c:	movt	r2, #5
   30c60:	bl	1269c <error@plt>
   30c64:	bl	12a5c <abort@plt>
   30c68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   30c6c:	add	fp, sp, #24
   30c70:	sub	sp, sp, #8
   30c74:	mov	r4, r3
   30c78:	mov	r8, r2
   30c7c:	mov	r9, r1
   30c80:	mov	r5, r0
   30c84:	bl	12804 <__errno_location@plt>
   30c88:	mov	r6, #0
   30c8c:	mov	r7, r0
   30c90:	add	r1, sp, #4
   30c94:	str	r6, [r0]
   30c98:	mov	r0, r5
   30c9c:	blx	r4
   30ca0:	ldr	r0, [sp, #4]
   30ca4:	cmp	r0, r5
   30ca8:	beq	30cf4 <__assert_fail@plt+0x1e244>
   30cac:	cmp	r9, #0
   30cb0:	beq	30cd0 <__assert_fail@plt+0x1e220>
   30cb4:	vcmp.f64	d0, #0.0
   30cb8:	vmrs	APSR_nzcv, fpscr
   30cbc:	beq	30cf0 <__assert_fail@plt+0x1e240>
   30cc0:	ldr	r1, [r7]
   30cc4:	subs	r6, r1, #34	; 0x22
   30cc8:	movwne	r6, #1
   30ccc:	b	30cf4 <__assert_fail@plt+0x1e244>
   30cd0:	ldrb	r1, [r0]
   30cd4:	mov	r6, #0
   30cd8:	cmp	r1, #0
   30cdc:	beq	30cb4 <__assert_fail@plt+0x1e204>
   30ce0:	vstr	d0, [r8]
   30ce4:	mov	r0, r6
   30ce8:	sub	sp, fp, #24
   30cec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   30cf0:	mov	r6, #1
   30cf4:	cmp	r9, #0
   30cf8:	strne	r0, [r9]
   30cfc:	vstr	d0, [r8]
   30d00:	mov	r0, r6
   30d04:	sub	sp, fp, #24
   30d08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   30d0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30d10:	add	fp, sp, #28
   30d14:	sub	sp, sp, #20
   30d18:	cmp	r2, #37	; 0x25
   30d1c:	bcs	3156c <__assert_fail@plt+0x1eabc>
   30d20:	ldr	r9, [fp, #8]
   30d24:	mov	r5, r2
   30d28:	mov	r4, r1
   30d2c:	mov	r7, r0
   30d30:	str	r3, [sp, #12]
   30d34:	bl	12804 <__errno_location@plt>
   30d38:	mov	r8, r0
   30d3c:	mov	r0, #0
   30d40:	str	r0, [r8]
   30d44:	bl	12768 <__ctype_b_loc@plt>
   30d48:	ldr	r1, [r0]
   30d4c:	mov	r2, r7
   30d50:	ldrb	r0, [r2], #1
   30d54:	add	r3, r1, r0, lsl #1
   30d58:	ldrb	r3, [r3, #1]
   30d5c:	tst	r3, #32
   30d60:	bne	30d50 <__assert_fail@plt+0x1e2a0>
   30d64:	cmp	r4, #0
   30d68:	add	r6, sp, #16
   30d6c:	mov	sl, #4
   30d70:	movne	r6, r4
   30d74:	cmp	r0, #45	; 0x2d
   30d78:	bne	30d88 <__assert_fail@plt+0x1e2d8>
   30d7c:	mov	r0, sl
   30d80:	sub	sp, fp, #28
   30d84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30d88:	mov	r0, r7
   30d8c:	mov	r1, r6
   30d90:	mov	r2, r5
   30d94:	bl	127b0 <strtoul@plt>
   30d98:	ldr	r5, [r6]
   30d9c:	cmp	r5, r7
   30da0:	beq	30dd8 <__assert_fail@plt+0x1e328>
   30da4:	mov	r4, r0
   30da8:	ldr	r0, [r8]
   30dac:	cmp	r0, #0
   30db0:	beq	30f3c <__assert_fail@plt+0x1e48c>
   30db4:	cmp	r0, #34	; 0x22
   30db8:	bne	30d7c <__assert_fail@plt+0x1e2cc>
   30dbc:	mov	sl, #1
   30dc0:	cmp	r9, #0
   30dc4:	beq	31558 <__assert_fail@plt+0x1eaa8>
   30dc8:	ldrb	r7, [r5]
   30dcc:	cmp	r7, #0
   30dd0:	bne	30e10 <__assert_fail@plt+0x1e360>
   30dd4:	b	31558 <__assert_fail@plt+0x1eaa8>
   30dd8:	cmp	r9, #0
   30ddc:	beq	30d7c <__assert_fail@plt+0x1e2cc>
   30de0:	ldrb	r1, [r7]
   30de4:	cmp	r1, #0
   30de8:	beq	30d7c <__assert_fail@plt+0x1e2cc>
   30dec:	mov	r0, r9
   30df0:	bl	127c8 <strchr@plt>
   30df4:	cmp	r0, #0
   30df8:	beq	30d7c <__assert_fail@plt+0x1e2cc>
   30dfc:	mov	r4, #1
   30e00:	mov	sl, #0
   30e04:	ldrb	r7, [r5]
   30e08:	cmp	r7, #0
   30e0c:	beq	31558 <__assert_fail@plt+0x1eaa8>
   30e10:	mov	r0, r9
   30e14:	mov	r1, r7
   30e18:	bl	127c8 <strchr@plt>
   30e1c:	cmp	r0, #0
   30e20:	beq	310d8 <__assert_fail@plt+0x1e628>
   30e24:	sub	r0, r7, #69	; 0x45
   30e28:	mov	lr, #1
   30e2c:	mov	r8, #1024	; 0x400
   30e30:	cmp	r0, #47	; 0x2f
   30e34:	bhi	30f8c <__assert_fail@plt+0x1e4dc>
   30e38:	add	r1, pc, #0
   30e3c:	ldr	pc, [r1, r0, lsl #2]
   30e40:	andeq	r0, r3, r0, lsl #30
   30e44:	andeq	r0, r3, ip, lsl #31
   30e48:	andeq	r0, r3, r0, lsl #30
   30e4c:	andeq	r0, r3, ip, lsl #31
   30e50:	andeq	r0, r3, ip, lsl #31
   30e54:	andeq	r0, r3, ip, lsl #31
   30e58:	andeq	r0, r3, r0, lsl #30
   30e5c:	andeq	r0, r3, ip, lsl #31
   30e60:	andeq	r0, r3, r0, lsl #30
   30e64:	andeq	r0, r3, ip, lsl #31
   30e68:	andeq	r0, r3, ip, lsl #31
   30e6c:	andeq	r0, r3, r0, lsl #30
   30e70:	andeq	r0, r3, ip, lsl #31
   30e74:	andeq	r0, r3, ip, lsl #31
   30e78:	andeq	r0, r3, ip, lsl #31
   30e7c:	andeq	r0, r3, r0, lsl #30
   30e80:	andeq	r0, r3, ip, lsl #31
   30e84:	andeq	r0, r3, ip, lsl #31
   30e88:	andeq	r0, r3, ip, lsl #31
   30e8c:	andeq	r0, r3, ip, lsl #31
   30e90:	andeq	r0, r3, r0, lsl #30
   30e94:	andeq	r0, r3, r0, lsl #30
   30e98:	andeq	r0, r3, ip, lsl #31
   30e9c:	andeq	r0, r3, ip, lsl #31
   30ea0:	andeq	r0, r3, ip, lsl #31
   30ea4:	andeq	r0, r3, ip, lsl #31
   30ea8:	andeq	r0, r3, ip, lsl #31
   30eac:	andeq	r0, r3, ip, lsl #31
   30eb0:	andeq	r0, r3, ip, lsl #31
   30eb4:	andeq	r0, r3, ip, lsl #31
   30eb8:	andeq	r0, r3, ip, lsl #31
   30ebc:	andeq	r0, r3, ip, lsl #31
   30ec0:	andeq	r0, r3, ip, lsl #31
   30ec4:	andeq	r0, r3, ip, lsl #31
   30ec8:	andeq	r0, r3, r0, lsl #30
   30ecc:	andeq	r0, r3, ip, lsl #31
   30ed0:	andeq	r0, r3, ip, lsl #31
   30ed4:	andeq	r0, r3, ip, lsl #31
   30ed8:	andeq	r0, r3, r0, lsl #30
   30edc:	andeq	r0, r3, ip, lsl #31
   30ee0:	andeq	r0, r3, r0, lsl #30
   30ee4:	andeq	r0, r3, ip, lsl #31
   30ee8:	andeq	r0, r3, ip, lsl #31
   30eec:	andeq	r0, r3, ip, lsl #31
   30ef0:	andeq	r0, r3, ip, lsl #31
   30ef4:	andeq	r0, r3, ip, lsl #31
   30ef8:	andeq	r0, r3, ip, lsl #31
   30efc:	andeq	r0, r3, r0, lsl #30
   30f00:	mov	r0, r9
   30f04:	mov	r1, #48	; 0x30
   30f08:	bl	127c8 <strchr@plt>
   30f0c:	cmp	r0, #0
   30f10:	beq	30f4c <__assert_fail@plt+0x1e49c>
   30f14:	ldrb	r0, [r5, #1]
   30f18:	cmp	r0, #66	; 0x42
   30f1c:	cmpne	r0, #68	; 0x44
   30f20:	bne	30f60 <__assert_fail@plt+0x1e4b0>
   30f24:	mov	lr, #2
   30f28:	mov	r8, #1000	; 0x3e8
   30f2c:	sub	r1, r7, #66	; 0x42
   30f30:	cmp	r1, #53	; 0x35
   30f34:	bls	30f98 <__assert_fail@plt+0x1e4e8>
   30f38:	b	310d8 <__assert_fail@plt+0x1e628>
   30f3c:	mov	sl, r0
   30f40:	cmp	r9, #0
   30f44:	bne	30dc8 <__assert_fail@plt+0x1e318>
   30f48:	b	31558 <__assert_fail@plt+0x1eaa8>
   30f4c:	mov	lr, #1
   30f50:	sub	r1, r7, #66	; 0x42
   30f54:	cmp	r1, #53	; 0x35
   30f58:	bls	30f98 <__assert_fail@plt+0x1e4e8>
   30f5c:	b	310d8 <__assert_fail@plt+0x1e628>
   30f60:	cmp	r0, #105	; 0x69
   30f64:	bne	30f88 <__assert_fail@plt+0x1e4d8>
   30f68:	ldrb	r0, [r5, #2]
   30f6c:	mov	lr, #1
   30f70:	cmp	r0, #66	; 0x42
   30f74:	movweq	lr, #3
   30f78:	sub	r1, r7, #66	; 0x42
   30f7c:	cmp	r1, #53	; 0x35
   30f80:	bls	30f98 <__assert_fail@plt+0x1e4e8>
   30f84:	b	310d8 <__assert_fail@plt+0x1e628>
   30f88:	mov	lr, #1
   30f8c:	sub	r1, r7, #66	; 0x42
   30f90:	cmp	r1, #53	; 0x35
   30f94:	bhi	310d8 <__assert_fail@plt+0x1e628>
   30f98:	add	r2, pc, #4
   30f9c:	mov	r0, #0
   30fa0:	ldr	pc, [r2, r1, lsl #2]
   30fa4:	andeq	r1, r3, r0, lsr #5
   30fa8:	ldrdeq	r1, [r3], -r8
   30fac:	ldrdeq	r1, [r3], -r8
   30fb0:			; <UNDEFINED> instruction: 0x000312bc
   30fb4:	ldrdeq	r1, [r3], -r8
   30fb8:	andeq	r1, r3, ip, ror r0
   30fbc:	ldrdeq	r1, [r3], -r8
   30fc0:	ldrdeq	r1, [r3], -r8
   30fc4:	ldrdeq	r1, [r3], -r8
   30fc8:	strdeq	r1, [r3], -r0
   30fcc:	ldrdeq	r1, [r3], -r8
   30fd0:	andeq	r1, r3, r0, lsl r1
   30fd4:	ldrdeq	r1, [r3], -r8
   30fd8:	ldrdeq	r1, [r3], -r8
   30fdc:	andeq	r1, r3, r4, ror r3
   30fe0:	ldrdeq	r1, [r3], -r8
   30fe4:	ldrdeq	r1, [r3], -r8
   30fe8:	ldrdeq	r1, [r3], -r8
   30fec:	andeq	r1, r3, r0, asr r1
   30ff0:	ldrdeq	r1, [r3], -r8
   30ff4:	ldrdeq	r1, [r3], -r8
   30ff8:	ldrdeq	r1, [r3], -r8
   30ffc:	ldrdeq	r1, [r3], -r8
   31000:	andeq	r1, r3, r0, lsl r4
   31004:	andeq	r1, r3, r8, asr #3
   31008:	ldrdeq	r1, [r3], -r8
   3100c:	ldrdeq	r1, [r3], -r8
   31010:	ldrdeq	r1, [r3], -r8
   31014:	ldrdeq	r1, [r3], -r8
   31018:	ldrdeq	r1, [r3], -r8
   3101c:	ldrdeq	r1, [r3], -r8
   31020:	ldrdeq	r1, [r3], -r8
   31024:	andeq	r1, r3, r8, lsl #10
   31028:	andeq	r1, r3, r0, asr #10
   3102c:	ldrdeq	r1, [r3], -r8
   31030:	ldrdeq	r1, [r3], -r8
   31034:	ldrdeq	r1, [r3], -r8
   31038:	andeq	r1, r3, ip, ror r0
   3103c:	ldrdeq	r1, [r3], -r8
   31040:	ldrdeq	r1, [r3], -r8
   31044:	ldrdeq	r1, [r3], -r8
   31048:	strdeq	r1, [r3], -r0
   3104c:	ldrdeq	r1, [r3], -r8
   31050:	andeq	r1, r3, r0, lsl r1
   31054:	ldrdeq	r1, [r3], -r8
   31058:	ldrdeq	r1, [r3], -r8
   3105c:	ldrdeq	r1, [r3], -r8
   31060:	ldrdeq	r1, [r3], -r8
   31064:	ldrdeq	r1, [r3], -r8
   31068:	ldrdeq	r1, [r3], -r8
   3106c:	andeq	r1, r3, r0, asr r1
   31070:	ldrdeq	r1, [r3], -r8
   31074:	ldrdeq	r1, [r3], -r8
   31078:	andeq	r1, r3, ip, lsr #10
   3107c:	mvn	r0, #0
   31080:	mul	r1, r4, r8
   31084:	mov	r7, #0
   31088:	udiv	r0, r0, r8
   3108c:	cmp	r0, r4
   31090:	mvncc	r1, #0
   31094:	cmp	r0, r1
   31098:	mul	r2, r1, r8
   3109c:	mvncc	r2, #0
   310a0:	cmp	r0, r2
   310a4:	mul	r3, r2, r8
   310a8:	mov	r2, #0
   310ac:	mvncc	r3, #0
   310b0:	movwcc	r7, #1
   310b4:	cmp	r0, r1
   310b8:	mov	r1, #0
   310bc:	movwcc	r1, #1
   310c0:	cmp	r0, r4
   310c4:	mov	r4, r3
   310c8:	movwcc	r2, #1
   310cc:	orr	r0, r2, r1
   310d0:	orr	r0, r0, r7
   310d4:	b	31540 <__assert_fail@plt+0x1ea90>
   310d8:	ldr	r0, [sp, #12]
   310dc:	orr	sl, sl, #2
   310e0:	str	r4, [r0]
   310e4:	mov	r0, sl
   310e8:	sub	sp, fp, #28
   310ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   310f0:	mvn	r0, #0
   310f4:	mul	r1, r4, r8
   310f8:	udiv	r0, r0, r8
   310fc:	cmp	r0, r4
   31100:	mov	r0, #0
   31104:	mvncc	r1, #0
   31108:	movwcc	r0, #1
   3110c:	b	3153c <__assert_fail@plt+0x1ea8c>
   31110:	mvn	r0, #0
   31114:	mul	r1, r4, r8
   31118:	mov	r3, #0
   3111c:	udiv	r0, r0, r8
   31120:	cmp	r0, r4
   31124:	mvncc	r1, #0
   31128:	cmp	r0, r1
   3112c:	mul	r2, r1, r8
   31130:	mov	r1, #0
   31134:	mvncc	r2, #0
   31138:	movwcc	r3, #1
   3113c:	cmp	r0, r4
   31140:	movwcc	r1, #1
   31144:	mov	r4, r2
   31148:	orr	r0, r1, r3
   3114c:	b	31540 <__assert_fail@plt+0x1ea90>
   31150:	mvn	r0, #0
   31154:	mul	r1, r4, r8
   31158:	mov	r7, #0
   3115c:	udiv	r0, r0, r8
   31160:	cmp	r0, r4
   31164:	mvncc	r1, #0
   31168:	cmp	r0, r1
   3116c:	mul	r2, r1, r8
   31170:	mvncc	r2, #0
   31174:	cmp	r0, r2
   31178:	mul	r3, r2, r8
   3117c:	mvncc	r3, #0
   31180:	cmp	r0, r3
   31184:	mul	ip, r3, r8
   31188:	mov	r3, #0
   3118c:	mvncc	ip, #0
   31190:	movwcc	r7, #1
   31194:	cmp	r0, r2
   31198:	mov	r2, #0
   3119c:	movwcc	r2, #1
   311a0:	cmp	r0, r1
   311a4:	mov	r1, #0
   311a8:	movwcc	r1, #1
   311ac:	cmp	r0, r4
   311b0:	mov	r4, ip
   311b4:	movwcc	r3, #1
   311b8:	orr	r0, r3, r1
   311bc:	orr	r0, r0, r2
   311c0:	orr	r0, r0, r7
   311c4:	b	31540 <__assert_fail@plt+0x1ea90>
   311c8:	mvn	r0, #0
   311cc:	str	lr, [sp, #8]
   311d0:	mul	lr, r4, r8
   311d4:	udiv	r0, r0, r8
   311d8:	cmp	r0, r4
   311dc:	mvncc	lr, #0
   311e0:	cmp	r0, lr
   311e4:	mul	r9, lr, r8
   311e8:	mvncc	r9, #0
   311ec:	cmp	r0, r9
   311f0:	mul	r7, r9, r8
   311f4:	mvncc	r7, #0
   311f8:	cmp	r0, r7
   311fc:	mul	r3, r7, r8
   31200:	mvncc	r3, #0
   31204:	cmp	r0, r3
   31208:	mul	r1, r3, r8
   3120c:	mvncc	r1, #0
   31210:	cmp	r0, r1
   31214:	mul	r2, r1, r8
   31218:	mvncc	r2, #0
   3121c:	cmp	r0, r2
   31220:	mul	ip, r2, r8
   31224:	mov	r8, #0
   31228:	mov	r2, #0
   3122c:	mvncc	ip, #0
   31230:	movwcc	r8, #1
   31234:	cmp	r0, r1
   31238:	mov	r1, #0
   3123c:	movwcc	r1, #1
   31240:	cmp	r0, r3
   31244:	mov	r3, #0
   31248:	movwcc	r3, #1
   3124c:	cmp	r0, r7
   31250:	mov	r7, #0
   31254:	movwcc	r7, #1
   31258:	cmp	r0, r9
   3125c:	mov	r9, #0
   31260:	movwcc	r9, #1
   31264:	cmp	r0, lr
   31268:	mov	lr, #0
   3126c:	movwcc	lr, #1
   31270:	cmp	r0, r4
   31274:	mov	r4, ip
   31278:	movwcc	r2, #1
   3127c:	orr	r0, r2, lr
   31280:	ldr	lr, [sp, #8]
   31284:	orr	r0, r0, r9
   31288:	orr	r0, r0, r7
   3128c:	orr	r0, r0, r3
   31290:	orr	r0, r0, r1
   31294:	orr	r0, r0, r8
   31298:	and	r0, r0, #1
   3129c:	b	31540 <__assert_fail@plt+0x1ea90>
   312a0:	mov	r1, #0
   312a4:	lsr	r0, r4, #22
   312a8:	cmp	r1, r4, lsr #22
   312ac:	lsl	r4, r4, #10
   312b0:	movwne	r0, #1
   312b4:	mvnne	r4, #0
   312b8:	b	31540 <__assert_fail@plt+0x1ea90>
   312bc:	mvn	r0, #0
   312c0:	mul	ip, r4, r8
   312c4:	str	lr, [sp, #8]
   312c8:	mov	r9, #0
   312cc:	udiv	r0, r0, r8
   312d0:	cmp	r0, r4
   312d4:	mvncc	ip, #0
   312d8:	cmp	r0, ip
   312dc:	mul	r2, ip, r8
   312e0:	mvncc	r2, #0
   312e4:	cmp	r0, r2
   312e8:	mul	r3, r2, r8
   312ec:	mvncc	r3, #0
   312f0:	cmp	r0, r3
   312f4:	mul	r7, r3, r8
   312f8:	mvncc	r7, #0
   312fc:	cmp	r0, r7
   31300:	mul	r1, r7, r8
   31304:	mvncc	r1, #0
   31308:	cmp	r0, r1
   3130c:	mul	lr, r1, r8
   31310:	mov	r8, #0
   31314:	mov	r1, #0
   31318:	mvncc	lr, #0
   3131c:	movwcc	r8, #1
   31320:	cmp	r0, r7
   31324:	mov	r7, #0
   31328:	movwcc	r7, #1
   3132c:	cmp	r0, r3
   31330:	mov	r3, #0
   31334:	movwcc	r3, #1
   31338:	cmp	r0, r2
   3133c:	mov	r2, #0
   31340:	movwcc	r2, #1
   31344:	cmp	r0, ip
   31348:	movwcc	r1, #1
   3134c:	cmp	r0, r4
   31350:	mov	r4, lr
   31354:	ldr	lr, [sp, #8]
   31358:	movwcc	r9, #1
   3135c:	orr	r0, r9, r1
   31360:	orr	r0, r0, r2
   31364:	orr	r0, r0, r3
   31368:	orr	r0, r0, r7
   3136c:	orr	r0, r0, r8
   31370:	b	31540 <__assert_fail@plt+0x1ea90>
   31374:	mvn	r0, #0
   31378:	mul	r1, r4, r8
   3137c:	udiv	r0, r0, r8
   31380:	cmp	r0, r4
   31384:	mvncc	r1, #0
   31388:	cmp	r0, r1
   3138c:	mul	r2, r1, r8
   31390:	mvncc	r2, #0
   31394:	cmp	r0, r2
   31398:	mul	r3, r2, r8
   3139c:	mvncc	r3, #0
   313a0:	cmp	r0, r3
   313a4:	mul	r7, r3, r8
   313a8:	mvncc	r7, #0
   313ac:	cmp	r0, r7
   313b0:	mul	ip, r7, r8
   313b4:	mov	r8, lr
   313b8:	mov	lr, #0
   313bc:	mov	r7, #0
   313c0:	mvncc	ip, #0
   313c4:	movwcc	lr, #1
   313c8:	cmp	r0, r3
   313cc:	mov	r3, #0
   313d0:	movwcc	r3, #1
   313d4:	cmp	r0, r2
   313d8:	mov	r2, #0
   313dc:	movwcc	r2, #1
   313e0:	cmp	r0, r1
   313e4:	mov	r1, #0
   313e8:	movwcc	r1, #1
   313ec:	cmp	r0, r4
   313f0:	mov	r4, ip
   313f4:	movwcc	r7, #1
   313f8:	orr	r0, r7, r1
   313fc:	orr	r0, r0, r2
   31400:	orr	r0, r0, r3
   31404:	orr	r0, r0, lr
   31408:	mov	lr, r8
   3140c:	b	31540 <__assert_fail@plt+0x1ea90>
   31410:	mvn	r0, #0
   31414:	str	lr, [sp, #8]
   31418:	mul	lr, r4, r8
   3141c:	udiv	r0, r0, r8
   31420:	cmp	r0, r4
   31424:	mvncc	lr, #0
   31428:	cmp	r0, lr
   3142c:	mul	r9, lr, r8
   31430:	mvncc	r9, #0
   31434:	cmp	r0, r9
   31438:	mul	r7, r9, r8
   3143c:	mvncc	r7, #0
   31440:	cmp	r0, r7
   31444:	mul	r3, r7, r8
   31448:	mvncc	r3, #0
   3144c:	cmp	r0, r3
   31450:	mul	r1, r3, r8
   31454:	mvncc	r1, #0
   31458:	cmp	r0, r1
   3145c:	mul	r2, r1, r8
   31460:	mvncc	r2, #0
   31464:	cmp	r0, r2
   31468:	mul	ip, r2, r8
   3146c:	mvncc	ip, #0
   31470:	cmp	r0, ip
   31474:	mul	r8, ip, r8
   31478:	mov	ip, #0
   3147c:	mvncc	r8, #0
   31480:	str	r8, [sp, #4]
   31484:	mov	r8, #0
   31488:	movwcc	r8, #1
   3148c:	cmp	r0, r2
   31490:	mov	r2, #0
   31494:	movwcc	r2, #1
   31498:	cmp	r0, r1
   3149c:	mov	r1, #0
   314a0:	movwcc	r1, #1
   314a4:	cmp	r0, r3
   314a8:	mov	r3, #0
   314ac:	movwcc	r3, #1
   314b0:	cmp	r0, r7
   314b4:	mov	r7, #0
   314b8:	movwcc	r7, #1
   314bc:	cmp	r0, r9
   314c0:	mov	r9, #0
   314c4:	movwcc	r9, #1
   314c8:	cmp	r0, lr
   314cc:	mov	lr, #0
   314d0:	movwcc	lr, #1
   314d4:	cmp	r0, r4
   314d8:	ldr	r4, [sp, #4]
   314dc:	movwcc	ip, #1
   314e0:	orr	r0, ip, lr
   314e4:	ldr	lr, [sp, #8]
   314e8:	orr	r0, r0, r9
   314ec:	orr	r0, r0, r7
   314f0:	orr	r0, r0, r3
   314f4:	orr	r0, r0, r1
   314f8:	orr	r0, r0, r2
   314fc:	orr	r0, r0, r8
   31500:	and	r0, r0, #1
   31504:	b	31540 <__assert_fail@plt+0x1ea90>
   31508:	movw	r0, #65535	; 0xffff
   3150c:	movt	r0, #63	; 0x3f
   31510:	orr	r1, r0, #4194304	; 0x400000
   31514:	mov	r0, #0
   31518:	cmp	r4, r1
   3151c:	lsl	r4, r4, #9
   31520:	movwhi	r0, #1
   31524:	mvnhi	r4, #0
   31528:	b	31540 <__assert_fail@plt+0x1ea90>
   3152c:	cmp	r4, #0
   31530:	lsl	r1, r4, #1
   31534:	lsr	r0, r4, #31
   31538:	mvnmi	r1, #0
   3153c:	mov	r4, r1
   31540:	add	r1, r5, lr
   31544:	orr	sl, r0, sl
   31548:	str	r1, [r6]
   3154c:	ldrb	r1, [r5, lr]
   31550:	cmp	r1, #0
   31554:	orrne	sl, sl, #2
   31558:	ldr	r0, [sp, #12]
   3155c:	str	r4, [r0]
   31560:	mov	r0, sl
   31564:	sub	sp, fp, #28
   31568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3156c:	movw	r0, #11551	; 0x2d1f
   31570:	movw	r1, #11589	; 0x2d45
   31574:	movw	r3, #11601	; 0x2d51
   31578:	mov	r2, #84	; 0x54
   3157c:	movt	r0, #5
   31580:	movt	r1, #5
   31584:	movt	r3, #5
   31588:	bl	12ab0 <__assert_fail@plt>
   3158c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31590:	add	fp, sp, #28
   31594:	sub	sp, sp, #44	; 0x2c
   31598:	cmp	r2, #37	; 0x25
   3159c:	bcs	32220 <__assert_fail@plt+0x1f770>
   315a0:	ldr	sl, [fp, #8]
   315a4:	mov	r6, r2
   315a8:	mov	r7, r1
   315ac:	mov	r4, r0
   315b0:	str	r3, [sp, #36]	; 0x24
   315b4:	bl	12804 <__errno_location@plt>
   315b8:	mov	r5, r0
   315bc:	mov	r0, #0
   315c0:	str	r0, [r5]
   315c4:	bl	12768 <__ctype_b_loc@plt>
   315c8:	ldr	r1, [r0]
   315cc:	mov	r2, r4
   315d0:	ldrb	r0, [r2], #1
   315d4:	add	r3, r1, r0, lsl #1
   315d8:	ldrb	r3, [r3, #1]
   315dc:	tst	r3, #32
   315e0:	bne	315d0 <__assert_fail@plt+0x1eb20>
   315e4:	cmp	r7, #0
   315e8:	sub	r9, fp, #32
   315ec:	mov	r8, #4
   315f0:	movne	r9, r7
   315f4:	cmp	r0, #45	; 0x2d
   315f8:	beq	319b8 <__assert_fail@plt+0x1ef08>
   315fc:	mov	r0, r4
   31600:	mov	r1, r9
   31604:	mov	r2, r6
   31608:	mov	r3, #0
   3160c:	bl	12504 <__strtoull_internal@plt>
   31610:	mov	r7, r1
   31614:	ldr	r1, [r9]
   31618:	cmp	r1, r4
   3161c:	beq	31654 <__assert_fail@plt+0x1eba4>
   31620:	mov	r6, r0
   31624:	ldr	r0, [r5]
   31628:	cmp	r0, #0
   3162c:	beq	31970 <__assert_fail@plt+0x1eec0>
   31630:	cmp	r0, #34	; 0x22
   31634:	bne	319b8 <__assert_fail@plt+0x1ef08>
   31638:	mov	r8, #1
   3163c:	cmp	sl, #0
   31640:	beq	3220c <__assert_fail@plt+0x1f75c>
   31644:	ldrb	r4, [r1]
   31648:	cmp	r4, #0
   3164c:	bne	31698 <__assert_fail@plt+0x1ebe8>
   31650:	b	3220c <__assert_fail@plt+0x1f75c>
   31654:	cmp	sl, #0
   31658:	beq	319b8 <__assert_fail@plt+0x1ef08>
   3165c:	mov	r5, r1
   31660:	ldrb	r1, [r4]
   31664:	cmp	r1, #0
   31668:	beq	319b8 <__assert_fail@plt+0x1ef08>
   3166c:	mov	r0, sl
   31670:	bl	127c8 <strchr@plt>
   31674:	cmp	r0, #0
   31678:	beq	319b8 <__assert_fail@plt+0x1ef08>
   3167c:	mov	r1, r5
   31680:	mov	r8, #0
   31684:	mov	r6, #1
   31688:	mov	r7, #0
   3168c:	ldrb	r4, [r1]
   31690:	cmp	r4, #0
   31694:	beq	3220c <__assert_fail@plt+0x1f75c>
   31698:	str	r1, [sp, #32]
   3169c:	mov	r0, sl
   316a0:	mov	r1, r4
   316a4:	bl	127c8 <strchr@plt>
   316a8:	cmp	r0, #0
   316ac:	beq	319ac <__assert_fail@plt+0x1eefc>
   316b0:	sub	r0, r4, #69	; 0x45
   316b4:	mov	r1, #1
   316b8:	mov	r3, #0
   316bc:	mov	r5, #1024	; 0x400
   316c0:	cmp	r0, #47	; 0x2f
   316c4:	str	r1, [sp, #28]
   316c8:	bhi	317cc <__assert_fail@plt+0x1ed1c>
   316cc:	add	r1, pc, #0
   316d0:	ldr	pc, [r1, r0, lsl #2]
   316d4:	muleq	r3, r4, r7
   316d8:	andeq	r1, r3, ip, asr #15
   316dc:	muleq	r3, r4, r7
   316e0:	andeq	r1, r3, ip, asr #15
   316e4:	andeq	r1, r3, ip, asr #15
   316e8:	andeq	r1, r3, ip, asr #15
   316ec:	muleq	r3, r4, r7
   316f0:	andeq	r1, r3, ip, asr #15
   316f4:	muleq	r3, r4, r7
   316f8:	andeq	r1, r3, ip, asr #15
   316fc:	andeq	r1, r3, ip, asr #15
   31700:	muleq	r3, r4, r7
   31704:	andeq	r1, r3, ip, asr #15
   31708:	andeq	r1, r3, ip, asr #15
   3170c:	andeq	r1, r3, ip, asr #15
   31710:	muleq	r3, r4, r7
   31714:	andeq	r1, r3, ip, asr #15
   31718:	andeq	r1, r3, ip, asr #15
   3171c:	andeq	r1, r3, ip, asr #15
   31720:	andeq	r1, r3, ip, asr #15
   31724:	muleq	r3, r4, r7
   31728:	muleq	r3, r4, r7
   3172c:	andeq	r1, r3, ip, asr #15
   31730:	andeq	r1, r3, ip, asr #15
   31734:	andeq	r1, r3, ip, asr #15
   31738:	andeq	r1, r3, ip, asr #15
   3173c:	andeq	r1, r3, ip, asr #15
   31740:	andeq	r1, r3, ip, asr #15
   31744:	andeq	r1, r3, ip, asr #15
   31748:	andeq	r1, r3, ip, asr #15
   3174c:	andeq	r1, r3, ip, asr #15
   31750:	andeq	r1, r3, ip, asr #15
   31754:	andeq	r1, r3, ip, asr #15
   31758:	andeq	r1, r3, ip, asr #15
   3175c:	muleq	r3, r4, r7
   31760:	andeq	r1, r3, ip, asr #15
   31764:	andeq	r1, r3, ip, asr #15
   31768:	andeq	r1, r3, ip, asr #15
   3176c:	muleq	r3, r4, r7
   31770:	andeq	r1, r3, ip, asr #15
   31774:	muleq	r3, r4, r7
   31778:	andeq	r1, r3, ip, asr #15
   3177c:	andeq	r1, r3, ip, asr #15
   31780:	andeq	r1, r3, ip, asr #15
   31784:	andeq	r1, r3, ip, asr #15
   31788:	andeq	r1, r3, ip, asr #15
   3178c:	andeq	r1, r3, ip, asr #15
   31790:	muleq	r3, r4, r7
   31794:	mov	r0, sl
   31798:	mov	r1, #48	; 0x30
   3179c:	bl	127c8 <strchr@plt>
   317a0:	cmp	r0, #0
   317a4:	beq	317c8 <__assert_fail@plt+0x1ed18>
   317a8:	ldr	r1, [sp, #32]
   317ac:	ldrb	r0, [r1, #1]
   317b0:	cmp	r0, #66	; 0x42
   317b4:	cmpne	r0, #68	; 0x44
   317b8:	bne	31980 <__assert_fail@plt+0x1eed0>
   317bc:	mov	r5, #1000	; 0x3e8
   317c0:	mov	r0, #2
   317c4:	str	r0, [sp, #28]
   317c8:	mov	r3, #0
   317cc:	sub	r0, r4, #66	; 0x42
   317d0:	cmp	r0, #53	; 0x35
   317d4:	bhi	319ac <__assert_fail@plt+0x1eefc>
   317d8:	add	r1, pc, #0
   317dc:	ldr	pc, [r1, r0, lsl #2]
   317e0:	andeq	r1, r3, ip, lsl sp
   317e4:	andeq	r1, r3, ip, lsr #19
   317e8:	andeq	r1, r3, ip, lsr #19
   317ec:	andeq	r1, r3, r4, asr #26
   317f0:	andeq	r1, r3, ip, lsr #19
   317f4:			; <UNDEFINED> instruction: 0x000318b8
   317f8:	andeq	r1, r3, ip, lsr #19
   317fc:	andeq	r1, r3, ip, lsr #19
   31800:	andeq	r1, r3, ip, lsr #19
   31804:	andeq	r1, r3, r4, asr #19
   31808:	andeq	r1, r3, ip, lsr #19
   3180c:	andeq	r1, r3, ip, lsl #20
   31810:	andeq	r1, r3, ip, lsr #19
   31814:	andeq	r1, r3, ip, lsr #19
   31818:	muleq	r3, r8, lr
   3181c:	andeq	r1, r3, ip, lsr #19
   31820:	andeq	r1, r3, ip, lsr #19
   31824:	andeq	r1, r3, ip, lsr #19
   31828:	muleq	r3, r8, sl
   3182c:	andeq	r1, r3, ip, lsr #19
   31830:	andeq	r1, r3, ip, lsr #19
   31834:	andeq	r1, r3, ip, lsr #19
   31838:	andeq	r1, r3, ip, lsr #19
   3183c:	andeq	r1, r3, r0, asr #31
   31840:	andeq	r1, r3, r0, lsl #23
   31844:	andeq	r1, r3, ip, lsr #19
   31848:	andeq	r1, r3, ip, lsr #19
   3184c:	andeq	r1, r3, ip, lsr #19
   31850:	andeq	r1, r3, ip, lsr #19
   31854:	andeq	r1, r3, ip, lsr #19
   31858:	andeq	r1, r3, ip, lsr #19
   3185c:	andeq	r1, r3, ip, lsr #19
   31860:	muleq	r3, r4, r1
   31864:	andeq	r2, r3, ip, ror #3
   31868:	andeq	r1, r3, ip, lsr #19
   3186c:	andeq	r1, r3, ip, lsr #19
   31870:	andeq	r1, r3, ip, lsr #19
   31874:			; <UNDEFINED> instruction: 0x000318b8
   31878:	andeq	r1, r3, ip, lsr #19
   3187c:	andeq	r1, r3, ip, lsr #19
   31880:	andeq	r1, r3, ip, lsr #19
   31884:	andeq	r1, r3, r4, asr #19
   31888:	andeq	r1, r3, ip, lsr #19
   3188c:	andeq	r1, r3, ip, lsl #20
   31890:	andeq	r1, r3, ip, lsr #19
   31894:	andeq	r1, r3, ip, lsr #19
   31898:	andeq	r1, r3, ip, lsr #19
   3189c:	andeq	r1, r3, ip, lsr #19
   318a0:	andeq	r1, r3, ip, lsr #19
   318a4:	andeq	r1, r3, ip, lsr #19
   318a8:	muleq	r3, r8, sl
   318ac:	andeq	r1, r3, ip, lsr #19
   318b0:	andeq	r1, r3, ip, lsr #19
   318b4:	andeq	r2, r3, r8, asr #3
   318b8:	mvn	r0, #0
   318bc:	mvn	r1, #0
   318c0:	mov	r2, r5
   318c4:	mov	sl, r3
   318c8:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   318cc:	subs	r3, r0, r6
   318d0:	umull	r4, r2, r6, r5
   318d4:	mov	lr, #0
   318d8:	str	r1, [sp, #20]
   318dc:	sbcs	r3, r1, r7
   318e0:	movwcc	lr, #1
   318e4:	mla	ip, r6, sl, r2
   318e8:	mov	r2, r1
   318ec:	mov	r2, #0
   318f0:	cmp	lr, #0
   318f4:	mla	r7, r7, r5, ip
   318f8:	mvnne	r4, #0
   318fc:	mvnne	r7, #0
   31900:	subs	r6, r0, r4
   31904:	sbcs	r6, r1, r7
   31908:	umull	r3, r6, r4, r5
   3190c:	movwcc	r2, #1
   31910:	cmp	r2, #0
   31914:	mvnne	r3, #0
   31918:	cmp	r2, #0
   3191c:	str	r6, [sp, #16]
   31920:	umull	r6, ip, r3, r5
   31924:	mla	r1, r3, sl, ip
   31928:	ldr	ip, [sp, #16]
   3192c:	str	r1, [sp, #12]
   31930:	mla	r4, r4, sl, ip
   31934:	mla	r4, r7, r5, r4
   31938:	mvnne	r4, #0
   3193c:	subs	r0, r0, r3
   31940:	ldr	r0, [sp, #20]
   31944:	ldr	r7, [sp, #12]
   31948:	sbcs	r0, r0, r4
   3194c:	mov	r0, #0
   31950:	mla	r7, r4, r5, r7
   31954:	movwcc	r0, #1
   31958:	cmp	r0, #0
   3195c:	mov	r1, r0
   31960:	orr	r0, lr, r2
   31964:	mvnne	r7, #0
   31968:	mvnne	r6, #0
   3196c:	b	31fb8 <__assert_fail@plt+0x1f508>
   31970:	mov	r8, r0
   31974:	cmp	sl, #0
   31978:	bne	31644 <__assert_fail@plt+0x1eb94>
   3197c:	b	3220c <__assert_fail@plt+0x1f75c>
   31980:	cmp	r0, #105	; 0x69
   31984:	mov	r3, #0
   31988:	bne	317cc <__assert_fail@plt+0x1ed1c>
   3198c:	ldrb	r0, [r1, #2]
   31990:	mov	r1, #1
   31994:	cmp	r0, #66	; 0x42
   31998:	movweq	r1, #3
   3199c:	str	r1, [sp, #28]
   319a0:	sub	r0, r4, #66	; 0x42
   319a4:	cmp	r0, #53	; 0x35
   319a8:	bls	317d8 <__assert_fail@plt+0x1ed28>
   319ac:	ldr	r0, [sp, #36]	; 0x24
   319b0:	orr	r8, r8, #2
   319b4:	strd	r6, [r0]
   319b8:	mov	r0, r8
   319bc:	sub	sp, fp, #28
   319c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   319c4:	mvn	r0, #0
   319c8:	mvn	r1, #0
   319cc:	mov	r2, r5
   319d0:	mov	r4, r3
   319d4:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   319d8:	subs	r0, r0, r6
   319dc:	mov	r2, #0
   319e0:	sbcs	r0, r1, r7
   319e4:	umull	r0, r1, r6, r5
   319e8:	movwcc	r2, #1
   319ec:	cmp	r2, #0
   319f0:	mla	r1, r6, r4, r1
   319f4:	mov	r3, r2
   319f8:	mvnne	r0, #0
   319fc:	mla	r7, r7, r5, r1
   31a00:	mvnne	r7, #0
   31a04:	mov	r6, r0
   31a08:	b	321ec <__assert_fail@plt+0x1f73c>
   31a0c:	mvn	r0, #0
   31a10:	mvn	r1, #0
   31a14:	mov	r2, r5
   31a18:	str	r3, [sp, #24]
   31a1c:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   31a20:	subs	r3, r0, r6
   31a24:	mov	ip, r0
   31a28:	umull	r4, r0, r6, r5
   31a2c:	mov	sl, #0
   31a30:	sbcs	r3, r1, r7
   31a34:	mov	r3, #0
   31a38:	movwcc	r3, #1
   31a3c:	cmp	r3, #0
   31a40:	str	r0, [sp, #20]
   31a44:	ldr	r0, [sp, #24]
   31a48:	mvnne	r4, #0
   31a4c:	cmp	r3, #0
   31a50:	umull	lr, r2, r4, r5
   31a54:	mla	r2, r4, r0, r2
   31a58:	str	r2, [sp, #16]
   31a5c:	ldr	r2, [sp, #20]
   31a60:	mla	r6, r6, r0, r2
   31a64:	ldr	r0, [sp, #16]
   31a68:	mla	r6, r7, r5, r6
   31a6c:	mvnne	r6, #0
   31a70:	mla	r7, r6, r5, r0
   31a74:	subs	r0, ip, r4
   31a78:	sbcs	r0, r1, r6
   31a7c:	movwcc	sl, #1
   31a80:	cmp	sl, #0
   31a84:	orr	r3, r3, sl
   31a88:	mvnne	lr, #0
   31a8c:	mvnne	r7, #0
   31a90:	mov	r6, lr
   31a94:	b	321ec <__assert_fail@plt+0x1f73c>
   31a98:	mvn	r0, #0
   31a9c:	mvn	r1, #0
   31aa0:	mov	r2, r5
   31aa4:	mov	sl, r3
   31aa8:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   31aac:	subs	r3, r0, r6
   31ab0:	mov	ip, r1
   31ab4:	umull	r2, lr, r6, r5
   31ab8:	str	r0, [sp, #20]
   31abc:	sbcs	r3, r1, r7
   31ac0:	mov	r1, #0
   31ac4:	str	ip, [sp, #16]
   31ac8:	movwcc	r1, #1
   31acc:	mla	r6, r6, sl, lr
   31ad0:	mov	lr, #0
   31ad4:	cmp	r1, #0
   31ad8:	mla	r7, r7, r5, r6
   31adc:	mvnne	r2, #0
   31ae0:	cmp	r1, #0
   31ae4:	umull	r3, r4, r2, r5
   31ae8:	mvnne	r7, #0
   31aec:	mla	r4, r2, sl, r4
   31af0:	subs	r2, r0, r2
   31af4:	sbcs	r2, ip, r7
   31af8:	mla	r4, r7, r5, r4
   31afc:	mov	r2, #0
   31b00:	movwcc	lr, #1
   31b04:	cmp	lr, #0
   31b08:	mvnne	r3, #0
   31b0c:	mvnne	r4, #0
   31b10:	subs	r7, r0, r3
   31b14:	mov	r0, r5
   31b18:	sbcs	r7, ip, r4
   31b1c:	umull	r5, r7, r3, r5
   31b20:	movwcc	r2, #1
   31b24:	cmp	r2, #0
   31b28:	mla	r3, r3, sl, r7
   31b2c:	mvnne	r5, #0
   31b30:	cmp	r2, #0
   31b34:	mla	r3, r4, r0, r3
   31b38:	umull	r6, ip, r5, r0
   31b3c:	mvnne	r3, #0
   31b40:	mla	ip, r5, sl, ip
   31b44:	mla	r7, r3, r0, ip
   31b48:	ldr	r0, [sp, #20]
   31b4c:	subs	r0, r0, r5
   31b50:	ldr	r0, [sp, #16]
   31b54:	sbcs	r0, r0, r3
   31b58:	mov	r0, #0
   31b5c:	movwcc	r0, #1
   31b60:	cmp	r0, #0
   31b64:	mov	r3, r0
   31b68:	orr	r0, r1, lr
   31b6c:	orr	r0, r0, r2
   31b70:	mvnne	r7, #0
   31b74:	mvnne	r6, #0
   31b78:	orr	r3, r0, r3
   31b7c:	b	321ec <__assert_fail@plt+0x1f73c>
   31b80:	mvn	r0, #0
   31b84:	mvn	r1, #0
   31b88:	mov	r2, r5
   31b8c:	mov	r4, r3
   31b90:	str	r3, [sp, #24]
   31b94:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   31b98:	umull	r3, r2, r6, r5
   31b9c:	mla	r2, r6, r4, r2
   31ba0:	subs	r6, r0, r6
   31ba4:	sbcs	r6, r1, r7
   31ba8:	mov	r6, #0
   31bac:	mla	r2, r7, r5, r2
   31bb0:	mov	r7, #0
   31bb4:	movwcc	r6, #1
   31bb8:	cmp	r6, #0
   31bbc:	str	r6, [sp, #20]
   31bc0:	mvnne	r3, #0
   31bc4:	mvnne	r2, #0
   31bc8:	subs	r4, r0, r3
   31bcc:	umull	r6, ip, r3, r5
   31bd0:	sbcs	r4, r1, r2
   31bd4:	ldr	r4, [sp, #24]
   31bd8:	movwcc	r7, #1
   31bdc:	cmp	r7, #0
   31be0:	mov	lr, r7
   31be4:	str	r7, [sp, #16]
   31be8:	mvnne	r6, #0
   31bec:	cmp	lr, #0
   31bf0:	mov	lr, #0
   31bf4:	umull	sl, r7, r6, r5
   31bf8:	mla	r3, r3, r4, ip
   31bfc:	mla	r2, r2, r5, r3
   31c00:	mvnne	r2, #0
   31c04:	subs	r3, r0, r6
   31c08:	mla	r7, r6, r4, r7
   31c0c:	mov	r4, r0
   31c10:	mov	r0, #0
   31c14:	mla	r7, r2, r5, r7
   31c18:	sbcs	r2, r1, r2
   31c1c:	mov	r3, r4
   31c20:	movwcc	r0, #1
   31c24:	str	r3, [sp, #4]
   31c28:	cmp	r0, #0
   31c2c:	str	r0, [sp, #12]
   31c30:	mov	r0, r1
   31c34:	mvnne	sl, #0
   31c38:	mvnne	r7, #0
   31c3c:	str	r0, [sp, #8]
   31c40:	subs	r2, r4, sl
   31c44:	ldr	r4, [sp, #24]
   31c48:	sbcs	r2, r1, r7
   31c4c:	umull	r6, r2, sl, r5
   31c50:	movwcc	lr, #1
   31c54:	cmp	lr, #0
   31c58:	mvnne	r6, #0
   31c5c:	mla	r2, sl, r4, r2
   31c60:	cmp	lr, #0
   31c64:	umull	r1, ip, r6, r5
   31c68:	mla	r2, r7, r5, r2
   31c6c:	mvnne	r2, #0
   31c70:	mla	ip, r6, r4, ip
   31c74:	subs	r6, r3, r6
   31c78:	mla	r7, r2, r5, ip
   31c7c:	sbcs	r2, r0, r2
   31c80:	mov	ip, #0
   31c84:	mov	r2, #0
   31c88:	movwcc	ip, #1
   31c8c:	cmp	ip, #0
   31c90:	mvnne	r1, #0
   31c94:	mvnne	r7, #0
   31c98:	subs	r6, r3, r1
   31c9c:	ldr	r3, [sp, #24]
   31ca0:	sbcs	r6, r0, r7
   31ca4:	umull	r0, sl, r1, r5
   31ca8:	movwcc	r2, #1
   31cac:	cmp	r2, #0
   31cb0:	mvnne	r0, #0
   31cb4:	mla	r1, r1, r3, sl
   31cb8:	cmp	r2, #0
   31cbc:	umull	r6, r4, r0, r5
   31cc0:	mla	r1, r7, r5, r1
   31cc4:	mvnne	r1, #0
   31cc8:	mla	r4, r0, r3, r4
   31ccc:	ldr	r3, [sp, #4]
   31cd0:	mla	r7, r1, r5, r4
   31cd4:	ldr	r5, [sp, #16]
   31cd8:	subs	r0, r3, r0
   31cdc:	ldr	r0, [sp, #8]
   31ce0:	sbcs	r0, r0, r1
   31ce4:	mov	r0, #0
   31ce8:	movwcc	r0, #1
   31cec:	cmp	r0, #0
   31cf0:	mov	r1, r0
   31cf4:	ldr	r0, [sp, #20]
   31cf8:	mvnne	r7, #0
   31cfc:	mvnne	r6, #0
   31d00:	orr	r0, r0, r5
   31d04:	ldr	r5, [sp, #12]
   31d08:	orr	r0, r0, r5
   31d0c:	orr	r0, r0, lr
   31d10:	orr	r0, r0, ip
   31d14:	orr	r0, r0, r2
   31d18:	b	32188 <__assert_fail@plt+0x1f6d8>
   31d1c:	mov	r1, #0
   31d20:	lsl	r2, r7, #10
   31d24:	lsl	r0, r6, #10
   31d28:	lsr	r3, r7, #22
   31d2c:	cmp	r1, r7, lsr #22
   31d30:	orr	r2, r2, r6, lsr #22
   31d34:	mvnne	r0, #0
   31d38:	movwne	r3, #1
   31d3c:	cmp	r1, r7, lsr #22
   31d40:	b	321b8 <__assert_fail@plt+0x1f708>
   31d44:	mvn	r0, #0
   31d48:	mvn	r1, #0
   31d4c:	mov	r2, r5
   31d50:	mov	sl, r3
   31d54:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   31d58:	subs	r2, r0, r6
   31d5c:	mov	ip, r0
   31d60:	mov	r0, #0
   31d64:	sbcs	r2, r1, r7
   31d68:	umull	r4, r2, r6, r5
   31d6c:	movwcc	r0, #1
   31d70:	cmp	r0, #0
   31d74:	mla	r2, r6, sl, r2
   31d78:	str	r0, [sp, #20]
   31d7c:	mvnne	r4, #0
   31d80:	cmp	r0, #0
   31d84:	mla	r2, r7, r5, r2
   31d88:	mov	r0, #0
   31d8c:	umull	lr, r3, r4, r5
   31d90:	mvnne	r2, #0
   31d94:	mla	r3, r4, sl, r3
   31d98:	mla	r6, r2, r5, r3
   31d9c:	subs	r3, ip, r4
   31da0:	mov	r3, r1
   31da4:	sbcs	r2, r1, r2
   31da8:	str	r3, [sp, #8]
   31dac:	movwcc	r0, #1
   31db0:	cmp	r0, #0
   31db4:	str	r0, [sp, #16]
   31db8:	mov	r0, ip
   31dbc:	mvnne	lr, #0
   31dc0:	mvnne	r6, #0
   31dc4:	str	r0, [sp, #12]
   31dc8:	subs	r2, ip, lr
   31dcc:	umull	r7, r4, lr, r5
   31dd0:	sbcs	r2, r1, r6
   31dd4:	mov	r2, #0
   31dd8:	movwcc	r2, #1
   31ddc:	mla	r4, lr, sl, r4
   31de0:	cmp	r2, #0
   31de4:	mla	r6, r6, r5, r4
   31de8:	mov	r4, #0
   31dec:	mvnne	r7, #0
   31df0:	cmp	r2, #0
   31df4:	umull	r1, ip, r7, r5
   31df8:	mvnne	r6, #0
   31dfc:	mla	ip, r7, sl, ip
   31e00:	subs	r7, r0, r7
   31e04:	sbcs	r7, r3, r6
   31e08:	mla	lr, r6, r5, ip
   31e0c:	mov	ip, #0
   31e10:	movwcc	ip, #1
   31e14:	cmp	ip, #0
   31e18:	mvnne	r1, #0
   31e1c:	mvnne	lr, #0
   31e20:	subs	r7, r0, r1
   31e24:	sbcs	r7, r3, lr
   31e28:	umull	r0, r7, r1, r5
   31e2c:	movwcc	r4, #1
   31e30:	cmp	r4, #0
   31e34:	mla	r1, r1, sl, r7
   31e38:	mvnne	r0, #0
   31e3c:	cmp	r4, #0
   31e40:	mla	r1, lr, r5, r1
   31e44:	umull	r6, r3, r0, r5
   31e48:	mvnne	r1, #0
   31e4c:	mla	r3, r0, sl, r3
   31e50:	mla	r7, r1, r5, r3
   31e54:	ldr	r3, [sp, #12]
   31e58:	subs	r0, r3, r0
   31e5c:	ldr	r0, [sp, #8]
   31e60:	ldr	r3, [sp, #16]
   31e64:	sbcs	r0, r0, r1
   31e68:	mov	r0, #0
   31e6c:	movwcc	r0, #1
   31e70:	cmp	r0, #0
   31e74:	mov	r1, r0
   31e78:	ldr	r0, [sp, #20]
   31e7c:	mvnne	r7, #0
   31e80:	mvnne	r6, #0
   31e84:	orr	r0, r0, r3
   31e88:	orr	r0, r0, r2
   31e8c:	orr	r0, r0, ip
   31e90:	orr	r0, r0, r4
   31e94:	b	31fb8 <__assert_fail@plt+0x1f508>
   31e98:	mvn	r0, #0
   31e9c:	mvn	r1, #0
   31ea0:	mov	r2, r5
   31ea4:	mov	sl, r3
   31ea8:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   31eac:	umull	r3, r2, r6, r5
   31eb0:	mov	lr, r1
   31eb4:	mov	r1, r0
   31eb8:	mla	r2, r6, sl, r2
   31ebc:	subs	r6, r0, r6
   31ec0:	mov	r0, #0
   31ec4:	sbcs	r6, lr, r7
   31ec8:	mla	r2, r7, r5, r2
   31ecc:	movwcc	r0, #1
   31ed0:	cmp	r0, #0
   31ed4:	str	r0, [sp, #20]
   31ed8:	mov	r0, r1
   31edc:	mvnne	r3, #0
   31ee0:	mvnne	r2, #0
   31ee4:	str	r0, [sp, #16]
   31ee8:	subs	r4, r1, r3
   31eec:	umull	r7, ip, r3, r5
   31ef0:	sbcs	r4, lr, r2
   31ef4:	mov	r4, #0
   31ef8:	movwcc	r4, #1
   31efc:	mla	r3, r3, sl, ip
   31f00:	mov	ip, #0
   31f04:	cmp	r4, #0
   31f08:	mla	r2, r2, r5, r3
   31f0c:	mvnne	r7, #0
   31f10:	cmp	r4, #0
   31f14:	umull	r1, r6, r7, r5
   31f18:	mvnne	r2, #0
   31f1c:	mla	r6, r7, sl, r6
   31f20:	mla	r3, r2, r5, r6
   31f24:	subs	r6, r0, r7
   31f28:	sbcs	r2, lr, r2
   31f2c:	mov	r2, #0
   31f30:	movwcc	ip, #1
   31f34:	cmp	ip, #0
   31f38:	mvnne	r1, #0
   31f3c:	mvnne	r3, #0
   31f40:	subs	r6, r0, r1
   31f44:	sbcs	r6, lr, r3
   31f48:	umull	r0, r6, r1, r5
   31f4c:	movwcc	r2, #1
   31f50:	cmp	r2, #0
   31f54:	mvnne	r0, #0
   31f58:	cmp	r2, #0
   31f5c:	str	r6, [sp, #12]
   31f60:	umull	r6, r7, r0, r5
   31f64:	mla	r7, r0, sl, r7
   31f68:	str	r7, [sp, #8]
   31f6c:	ldr	r7, [sp, #12]
   31f70:	mla	r1, r1, sl, r7
   31f74:	mla	r1, r3, r5, r1
   31f78:	ldr	r3, [sp, #8]
   31f7c:	mvnne	r1, #0
   31f80:	mla	r7, r1, r5, r3
   31f84:	ldr	r3, [sp, #16]
   31f88:	subs	r0, r3, r0
   31f8c:	sbcs	r0, lr, r1
   31f90:	mov	r0, #0
   31f94:	movwcc	r0, #1
   31f98:	cmp	r0, #0
   31f9c:	mov	r1, r0
   31fa0:	ldr	r0, [sp, #20]
   31fa4:	mvnne	r7, #0
   31fa8:	mvnne	r6, #0
   31fac:	orr	r0, r0, r4
   31fb0:	orr	r0, r0, ip
   31fb4:	orr	r0, r0, r2
   31fb8:	orr	r3, r0, r1
   31fbc:	b	321ec <__assert_fail@plt+0x1f73c>
   31fc0:	mvn	r0, #0
   31fc4:	mvn	r1, #0
   31fc8:	mov	r2, r5
   31fcc:	mov	sl, r3
   31fd0:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   31fd4:	mov	ip, r1
   31fd8:	subs	r1, r0, r6
   31fdc:	umull	r3, lr, r6, r5
   31fe0:	mov	r2, r5
   31fe4:	sbcs	r1, ip, r7
   31fe8:	mov	r1, #0
   31fec:	str	ip, [sp, #4]
   31ff0:	movwcc	r1, #1
   31ff4:	mla	r6, r6, sl, lr
   31ff8:	cmp	r1, #0
   31ffc:	mla	r7, r7, r2, r6
   32000:	str	r1, [sp, #20]
   32004:	mvnne	r3, #0
   32008:	cmp	r1, #0
   3200c:	mov	r1, r0
   32010:	umull	r4, r5, r3, r5
   32014:	mvnne	r7, #0
   32018:	mov	lr, r1
   3201c:	mla	r5, r3, sl, r5
   32020:	subs	r3, r0, r3
   32024:	sbcs	r0, ip, r7
   32028:	mov	r0, #0
   3202c:	mla	r5, r7, r2, r5
   32030:	movwcc	r0, #1
   32034:	cmp	r0, #0
   32038:	str	r0, [sp, #16]
   3203c:	mvnne	r4, #0
   32040:	mvnne	r5, #0
   32044:	subs	r0, r1, r4
   32048:	mov	r1, #0
   3204c:	sbcs	r0, ip, r5
   32050:	umull	r3, r0, r4, r2
   32054:	movwcc	r1, #1
   32058:	cmp	r1, #0
   3205c:	mla	r0, r4, sl, r0
   32060:	mov	r4, lr
   32064:	str	r1, [sp, #12]
   32068:	mvnne	r3, #0
   3206c:	cmp	r1, #0
   32070:	mla	r0, r5, r2, r0
   32074:	str	r4, [sp]
   32078:	umull	r7, r6, r3, r2
   3207c:	mvnne	r0, #0
   32080:	mla	r6, r3, sl, r6
   32084:	subs	r3, lr, r3
   32088:	mov	r3, #0
   3208c:	mla	r5, r0, r2, r6
   32090:	sbcs	r0, ip, r0
   32094:	mov	r0, #0
   32098:	movwcc	r0, #1
   3209c:	cmp	r0, #0
   320a0:	str	r0, [sp, #8]
   320a4:	mvnne	r7, #0
   320a8:	mvnne	r5, #0
   320ac:	subs	r0, lr, r7
   320b0:	sbcs	r0, ip, r5
   320b4:	umull	r6, r0, r7, r2
   320b8:	movwcc	r3, #1
   320bc:	cmp	r3, #0
   320c0:	mla	r7, r7, sl, r0
   320c4:	mov	r0, ip
   320c8:	mvnne	r6, #0
   320cc:	cmp	r3, #0
   320d0:	mla	r7, r5, r2, r7
   320d4:	mov	r5, #0
   320d8:	umull	r1, lr, r6, r2
   320dc:	mvnne	r7, #0
   320e0:	mla	lr, r6, sl, lr
   320e4:	subs	r6, r4, r6
   320e8:	mla	lr, r7, r2, lr
   320ec:	sbcs	r7, ip, r7
   320f0:	mov	ip, #0
   320f4:	movwcc	ip, #1
   320f8:	cmp	ip, #0
   320fc:	mvnne	r1, #0
   32100:	mvnne	lr, #0
   32104:	subs	r7, r4, r1
   32108:	sbcs	r7, r0, lr
   3210c:	umull	r0, r7, r1, r2
   32110:	movwcc	r5, #1
   32114:	cmp	r5, #0
   32118:	mla	r1, r1, sl, r7
   3211c:	mvnne	r0, #0
   32120:	cmp	r5, #0
   32124:	mla	r1, lr, r2, r1
   32128:	umull	r6, r4, r0, r2
   3212c:	mvnne	r1, #0
   32130:	mla	r4, r0, sl, r4
   32134:	mla	r7, r1, r2, r4
   32138:	ldr	r2, [sp]
   3213c:	subs	r0, r2, r0
   32140:	ldr	r0, [sp, #4]
   32144:	ldr	r2, [sp, #16]
   32148:	sbcs	r0, r0, r1
   3214c:	mov	r0, #0
   32150:	movwcc	r0, #1
   32154:	cmp	r0, #0
   32158:	mov	r1, r0
   3215c:	ldr	r0, [sp, #20]
   32160:	mvnne	r7, #0
   32164:	mvnne	r6, #0
   32168:	orr	r0, r0, r2
   3216c:	ldr	r2, [sp, #12]
   32170:	orr	r0, r0, r2
   32174:	ldr	r2, [sp, #8]
   32178:	orr	r0, r0, r2
   3217c:	orr	r0, r0, r3
   32180:	orr	r0, r0, ip
   32184:	orr	r0, r0, r5
   32188:	orr	r0, r0, r1
   3218c:	and	r3, r0, #1
   32190:	b	321ec <__assert_fail@plt+0x1f73c>
   32194:	mov	r1, #0
   32198:	lsl	r2, r7, #9
   3219c:	lsl	r0, r6, #9
   321a0:	lsr	r3, r7, #23
   321a4:	cmp	r1, r7, lsr #23
   321a8:	orr	r2, r2, r6, lsr #23
   321ac:	mvnne	r0, #0
   321b0:	movwne	r3, #1
   321b4:	cmp	r1, r7, lsr #23
   321b8:	mvnne	r2, #0
   321bc:	mov	r6, r0
   321c0:	mov	r7, r2
   321c4:	b	321ec <__assert_fail@plt+0x1f73c>
   321c8:	lsl	r1, r7, #1
   321cc:	cmp	r7, #0
   321d0:	lsl	r0, r6, #1
   321d4:	lsr	r3, r7, #31
   321d8:	orr	r1, r1, r6, lsr #31
   321dc:	mvnmi	r0, #0
   321e0:	mvnmi	r1, #0
   321e4:	mov	r6, r0
   321e8:	mov	r7, r1
   321ec:	ldr	r1, [sp, #32]
   321f0:	ldr	r2, [sp, #28]
   321f4:	orr	r8, r3, r8
   321f8:	add	r0, r1, r2
   321fc:	str	r0, [r9]
   32200:	ldrb	r0, [r1, r2]
   32204:	cmp	r0, #0
   32208:	orrne	r8, r8, #2
   3220c:	ldr	r0, [sp, #36]	; 0x24
   32210:	strd	r6, [r0]
   32214:	mov	r0, r8
   32218:	sub	sp, fp, #28
   3221c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32220:	movw	r0, #11551	; 0x2d1f
   32224:	movw	r1, #11589	; 0x2d45
   32228:	movw	r3, #11682	; 0x2da2
   3222c:	mov	r2, #84	; 0x54
   32230:	movt	r0, #5
   32234:	movt	r1, #5
   32238:	movt	r3, #5
   3223c:	bl	12ab0 <__assert_fail@plt>
   32240:	push	{r4, sl, fp, lr}
   32244:	add	fp, sp, #8
   32248:	sub	sp, sp, #8
   3224c:	movw	r0, #17752	; 0x4558
   32250:	mov	r4, #0
   32254:	mov	r1, sp
   32258:	mov	r2, #10
   3225c:	movt	r0, #6
   32260:	str	r4, [sp, #4]
   32264:	str	r4, [sp]
   32268:	ldr	r3, [r0]
   3226c:	add	r0, sp, #4
   32270:	bl	123cc <__getdelim@plt>
   32274:	cmp	r0, #1
   32278:	blt	322ac <__assert_fail@plt+0x1f7fc>
   3227c:	sub	r1, r0, #1
   32280:	ldr	r0, [sp, #4]
   32284:	ldrb	r2, [r0, r1]
   32288:	cmp	r2, #10
   3228c:	bne	3229c <__assert_fail@plt+0x1f7ec>
   32290:	mov	r2, #0
   32294:	strb	r2, [r0, r1]
   32298:	ldr	r0, [sp, #4]
   3229c:	bl	128f4 <rpmatch@plt>
   322a0:	cmp	r0, #0
   322a4:	mov	r4, #0
   322a8:	movwgt	r4, #1
   322ac:	ldr	r0, [sp, #4]
   322b0:	bl	32910 <__assert_fail@plt+0x1fe60>
   322b4:	mov	r0, r4
   322b8:	sub	sp, fp, #8
   322bc:	pop	{r4, sl, fp, pc}
   322c0:	clz	r2, r1
   322c4:	clz	r3, r0
   322c8:	lsr	r2, r2, #5
   322cc:	lsr	r3, r3, #5
   322d0:	orrs	r2, r3, r2
   322d4:	movwne	r1, #1
   322d8:	movwne	r0, #1
   322dc:	cmp	r1, #0
   322e0:	beq	32310 <__assert_fail@plt+0x1f860>
   322e4:	mvn	r2, #-2147483648	; 0x80000000
   322e8:	udiv	r2, r2, r1
   322ec:	cmp	r2, r0
   322f0:	bcs	32310 <__assert_fail@plt+0x1f860>
   322f4:	push	{fp, lr}
   322f8:	mov	fp, sp
   322fc:	bl	12804 <__errno_location@plt>
   32300:	mov	r1, #12
   32304:	str	r1, [r0]
   32308:	mov	r0, #0
   3230c:	pop	{fp, pc}
   32310:	b	12384 <calloc@plt>
   32314:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32318:	add	fp, sp, #28
   3231c:	sub	sp, sp, #4
   32320:	mov	r4, r0
   32324:	bl	125d0 <chdir@plt>
   32328:	cmp	r0, #0
   3232c:	beq	323fc <__assert_fail@plt+0x1f94c>
   32330:	mov	r6, r0
   32334:	bl	12804 <__errno_location@plt>
   32338:	mov	r9, r0
   3233c:	ldr	r0, [r0]
   32340:	cmp	r0, #36	; 0x24
   32344:	bne	325bc <__assert_fail@plt+0x1fb0c>
   32348:	mov	r0, r4
   3234c:	bl	127bc <strlen@plt>
   32350:	cmp	r0, #0
   32354:	beq	32674 <__assert_fail@plt+0x1fbc4>
   32358:	mov	r7, r0
   3235c:	mov	r0, #0
   32360:	cmp	r0, r7, lsr #12
   32364:	beq	32694 <__assert_fail@plt+0x1fbe4>
   32368:	movw	r1, #55982	; 0xdaae
   3236c:	mov	r0, r4
   32370:	movt	r1, #4
   32374:	bl	12aa4 <strspn@plt>
   32378:	cmp	r0, #0
   3237c:	beq	3240c <__assert_fail@plt+0x1f95c>
   32380:	mov	r6, r0
   32384:	cmp	r0, #2
   32388:	bne	32538 <__assert_fail@plt+0x1fa88>
   3238c:	add	r0, r4, #3
   32390:	sub	r2, r7, #3
   32394:	mov	r1, #47	; 0x2f
   32398:	mov	r8, #47	; 0x2f
   3239c:	bl	12894 <memchr@plt>
   323a0:	cmp	r0, #0
   323a4:	beq	325d0 <__assert_fail@plt+0x1fb20>
   323a8:	mov	r6, r0
   323ac:	mov	r0, #0
   323b0:	mov	r1, r4
   323b4:	mov	r2, #18688	; 0x4900
   323b8:	strb	r0, [r6]
   323bc:	mvn	r0, #99	; 0x63
   323c0:	bl	127e0 <openat64@plt>
   323c4:	cmp	r0, #0
   323c8:	strb	r8, [r6]
   323cc:	bmi	325c8 <__assert_fail@plt+0x1fb18>
   323d0:	movw	r1, #55982	; 0xdaae
   323d4:	add	r6, r6, #1
   323d8:	mov	r5, r0
   323dc:	movt	r1, #4
   323e0:	mov	r0, r6
   323e4:	bl	12aa4 <strspn@plt>
   323e8:	add	r6, r6, r0
   323ec:	ldrb	r0, [r6]
   323f0:	cmp	r0, #47	; 0x2f
   323f4:	bne	32420 <__assert_fail@plt+0x1f970>
   323f8:	b	32568 <__assert_fail@plt+0x1fab8>
   323fc:	mov	r6, #0
   32400:	mov	r0, r6
   32404:	sub	sp, fp, #28
   32408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3240c:	mvn	r5, #99	; 0x63
   32410:	mov	r6, r4
   32414:	ldrb	r0, [r6]
   32418:	cmp	r0, #47	; 0x2f
   3241c:	beq	32568 <__assert_fail@plt+0x1fab8>
   32420:	add	sl, r4, r7
   32424:	cmp	r6, sl
   32428:	bhi	326b4 <__assert_fail@plt+0x1fc04>
   3242c:	sub	r0, sl, r6
   32430:	str	r9, [sp]
   32434:	cmp	r0, #4096	; 0x1000
   32438:	blt	324f0 <__assert_fail@plt+0x1fa40>
   3243c:	movw	r9, #55982	; 0xdaae
   32440:	mov	r8, #0
   32444:	movt	r9, #4
   32448:	b	32474 <__assert_fail@plt+0x1f9c4>
   3244c:	mov	r0, #47	; 0x2f
   32450:	mov	r1, r9
   32454:	strb	r0, [r4], #1
   32458:	mov	r0, r4
   3245c:	bl	12aa4 <strspn@plt>
   32460:	add	r6, r4, r0
   32464:	mov	r5, r7
   32468:	sub	r0, sl, r6
   3246c:	cmp	r0, #4096	; 0x1000
   32470:	blt	324f4 <__assert_fail@plt+0x1fa44>
   32474:	mov	r0, r6
   32478:	mov	r1, #47	; 0x2f
   3247c:	mov	r2, #4096	; 0x1000
   32480:	bl	127ec <memrchr@plt>
   32484:	cmp	r0, #0
   32488:	beq	325e8 <__assert_fail@plt+0x1fb38>
   3248c:	mov	r4, r0
   32490:	strb	r8, [r0], -r6
   32494:	cmp	r0, #4096	; 0x1000
   32498:	bge	32654 <__assert_fail@plt+0x1fba4>
   3249c:	mov	r0, r5
   324a0:	mov	r1, r6
   324a4:	mov	r2, #18688	; 0x4900
   324a8:	bl	127e0 <openat64@plt>
   324ac:	cmp	r0, #0
   324b0:	bmi	32604 <__assert_fail@plt+0x1fb54>
   324b4:	mov	r7, r0
   324b8:	cmp	r5, #0
   324bc:	bmi	3244c <__assert_fail@plt+0x1f99c>
   324c0:	mov	r0, r5
   324c4:	bl	12a68 <close@plt>
   324c8:	cmp	r0, #0
   324cc:	beq	3244c <__assert_fail@plt+0x1f99c>
   324d0:	movw	r0, #11863	; 0x2e57
   324d4:	movw	r1, #11769	; 0x2df9
   324d8:	movw	r3, #11876	; 0x2e64
   324dc:	mov	r2, #64	; 0x40
   324e0:	movt	r0, #5
   324e4:	movt	r1, #5
   324e8:	movt	r3, #5
   324ec:	bl	12ab0 <__assert_fail@plt>
   324f0:	mov	r7, r5
   324f4:	cmp	r6, sl
   324f8:	bcs	32588 <__assert_fail@plt+0x1fad8>
   324fc:	mov	r0, r7
   32500:	mov	r1, r6
   32504:	mov	r2, #18688	; 0x4900
   32508:	bl	127e0 <openat64@plt>
   3250c:	ldr	r9, [sp]
   32510:	cmp	r0, #0
   32514:	bmi	32640 <__assert_fail@plt+0x1fb90>
   32518:	mov	r5, r0
   3251c:	cmp	r7, #0
   32520:	bmi	32590 <__assert_fail@plt+0x1fae0>
   32524:	mov	r0, r7
   32528:	bl	12a68 <close@plt>
   3252c:	cmp	r0, #0
   32530:	beq	32590 <__assert_fail@plt+0x1fae0>
   32534:	b	324d0 <__assert_fail@plt+0x1fa20>
   32538:	movw	r1, #55982	; 0xdaae
   3253c:	mvn	r0, #99	; 0x63
   32540:	mov	r2, #18688	; 0x4900
   32544:	movt	r1, #4
   32548:	bl	127e0 <openat64@plt>
   3254c:	cmp	r0, #0
   32550:	bmi	325c8 <__assert_fail@plt+0x1fb18>
   32554:	mov	r5, r0
   32558:	add	r6, r4, r6
   3255c:	ldrb	r0, [r6]
   32560:	cmp	r0, #47	; 0x2f
   32564:	bne	32420 <__assert_fail@plt+0x1f970>
   32568:	movw	r0, #11817	; 0x2e29
   3256c:	movw	r1, #11769	; 0x2df9
   32570:	movw	r3, #11782	; 0x2e06
   32574:	mov	r2, #162	; 0xa2
   32578:	movt	r0, #5
   3257c:	movt	r1, #5
   32580:	movt	r3, #5
   32584:	bl	12ab0 <__assert_fail@plt>
   32588:	ldr	r9, [sp]
   3258c:	mov	r5, r7
   32590:	mov	r0, r5
   32594:	bl	129b4 <fchdir@plt>
   32598:	cmp	r0, #0
   3259c:	bne	32610 <__assert_fail@plt+0x1fb60>
   325a0:	mov	r6, #0
   325a4:	cmp	r5, #0
   325a8:	bmi	325bc <__assert_fail@plt+0x1fb0c>
   325ac:	mov	r0, r5
   325b0:	bl	12a68 <close@plt>
   325b4:	cmp	r0, #0
   325b8:	bne	324d0 <__assert_fail@plt+0x1fa20>
   325bc:	mov	r0, r6
   325c0:	sub	sp, fp, #28
   325c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   325c8:	ldr	r4, [r9]
   325cc:	b	3262c <__assert_fail@plt+0x1fb7c>
   325d0:	mov	r0, #36	; 0x24
   325d4:	str	r0, [r9]
   325d8:	mvn	r6, #0
   325dc:	mov	r0, r6
   325e0:	sub	sp, fp, #28
   325e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   325e8:	ldr	r1, [sp]
   325ec:	mov	r0, #36	; 0x24
   325f0:	str	r0, [r1]
   325f4:	mvn	r6, #0
   325f8:	mov	r0, r6
   325fc:	sub	sp, fp, #28
   32600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32604:	ldr	r9, [sp]
   32608:	mov	r0, #47	; 0x2f
   3260c:	strb	r0, [r4]
   32610:	ldr	r4, [r9]
   32614:	cmp	r5, #0
   32618:	bmi	3262c <__assert_fail@plt+0x1fb7c>
   3261c:	mov	r0, r5
   32620:	bl	12a68 <close@plt>
   32624:	cmp	r0, #0
   32628:	bne	324d0 <__assert_fail@plt+0x1fa20>
   3262c:	str	r4, [r9]
   32630:	mvn	r6, #0
   32634:	mov	r0, r6
   32638:	sub	sp, fp, #28
   3263c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32640:	mov	r5, r7
   32644:	ldr	r4, [r9]
   32648:	cmp	r5, #0
   3264c:	bpl	3261c <__assert_fail@plt+0x1fb6c>
   32650:	b	3262c <__assert_fail@plt+0x1fb7c>
   32654:	movw	r0, #11844	; 0x2e44
   32658:	movw	r1, #11769	; 0x2df9
   3265c:	movw	r3, #11782	; 0x2e06
   32660:	mov	r2, #179	; 0xb3
   32664:	movt	r0, #5
   32668:	movt	r1, #5
   3266c:	movt	r3, #5
   32670:	bl	12ab0 <__assert_fail@plt>
   32674:	movw	r0, #11761	; 0x2df1
   32678:	movw	r1, #11769	; 0x2df9
   3267c:	movw	r3, #11782	; 0x2e06
   32680:	mov	r2, #126	; 0x7e
   32684:	movt	r0, #5
   32688:	movt	r1, #5
   3268c:	movt	r3, #5
   32690:	bl	12ab0 <__assert_fail@plt>
   32694:	movw	r0, #11805	; 0x2e1d
   32698:	movw	r1, #11769	; 0x2df9
   3269c:	movw	r3, #11782	; 0x2e06
   326a0:	mov	r2, #127	; 0x7f
   326a4:	movt	r0, #5
   326a8:	movt	r1, #5
   326ac:	movt	r3, #5
   326b0:	bl	12ab0 <__assert_fail@plt>
   326b4:	movw	r0, #11829	; 0x2e35
   326b8:	movw	r1, #11769	; 0x2df9
   326bc:	movw	r3, #11782	; 0x2e06
   326c0:	mov	r2, #163	; 0xa3
   326c4:	movt	r0, #5
   326c8:	movt	r1, #5
   326cc:	movt	r3, #5
   326d0:	bl	12ab0 <__assert_fail@plt>
   326d4:	sub	sp, sp, #8
   326d8:	push	{r4, r5, r6, r7, fp, lr}
   326dc:	add	fp, sp, #16
   326e0:	sub	sp, sp, #8
   326e4:	mov	r5, r0
   326e8:	add	r0, fp, #8
   326ec:	cmp	r1, #11
   326f0:	str	r2, [fp, #8]
   326f4:	str	r3, [fp, #12]
   326f8:	str	r0, [sp, #4]
   326fc:	bhi	32738 <__assert_fail@plt+0x1fc88>
   32700:	mov	r0, #1
   32704:	movw	r2, #1300	; 0x514
   32708:	tst	r2, r0, lsl r1
   3270c:	bne	327f8 <__assert_fail@plt+0x1fd48>
   32710:	movw	r2, #2570	; 0xa0a
   32714:	tst	r2, r0, lsl r1
   32718:	bne	32760 <__assert_fail@plt+0x1fcb0>
   3271c:	cmp	r1, #0
   32720:	bne	32738 <__assert_fail@plt+0x1fc88>
   32724:	ldr	r0, [sp, #4]
   32728:	add	r1, r0, #4
   3272c:	str	r1, [sp, #4]
   32730:	mov	r1, #0
   32734:	b	32804 <__assert_fail@plt+0x1fd54>
   32738:	sub	r0, r1, #1024	; 0x400
   3273c:	cmp	r0, #10
   32740:	bhi	327f8 <__assert_fail@plt+0x1fd48>
   32744:	mov	r2, #1
   32748:	movw	r3, #645	; 0x285
   3274c:	tst	r3, r2, lsl r0
   32750:	bne	327f8 <__assert_fail@plt+0x1fd48>
   32754:	movw	r3, #1282	; 0x502
   32758:	tst	r3, r2, lsl r0
   3275c:	beq	3276c <__assert_fail@plt+0x1fcbc>
   32760:	mov	r0, r5
   32764:	bl	128e8 <fcntl64@plt>
   32768:	b	32810 <__assert_fail@plt+0x1fd60>
   3276c:	cmp	r0, #6
   32770:	bne	327f8 <__assert_fail@plt+0x1fd48>
   32774:	ldr	r0, [sp, #4]
   32778:	movw	r7, #20032	; 0x4e40
   3277c:	movt	r7, #6
   32780:	add	r1, r0, #4
   32784:	str	r1, [sp, #4]
   32788:	ldr	r6, [r0]
   3278c:	ldr	r0, [r7]
   32790:	cmp	r0, #0
   32794:	bmi	32834 <__assert_fail@plt+0x1fd84>
   32798:	mov	r0, r5
   3279c:	movw	r1, #1030	; 0x406
   327a0:	mov	r2, r6
   327a4:	bl	128e8 <fcntl64@plt>
   327a8:	mov	r4, r0
   327ac:	cmn	r0, #1
   327b0:	bgt	32828 <__assert_fail@plt+0x1fd78>
   327b4:	bl	12804 <__errno_location@plt>
   327b8:	ldr	r0, [r0]
   327bc:	cmp	r0, #22
   327c0:	bne	32828 <__assert_fail@plt+0x1fd78>
   327c4:	mov	r0, r5
   327c8:	mov	r1, #0
   327cc:	mov	r2, r6
   327d0:	bl	128e8 <fcntl64@plt>
   327d4:	mov	r4, r0
   327d8:	cmp	r0, #0
   327dc:	bmi	32814 <__assert_fail@plt+0x1fd64>
   327e0:	mvn	r0, #0
   327e4:	str	r0, [r7]
   327e8:	mov	r0, #1
   327ec:	cmp	r0, #0
   327f0:	bne	32860 <__assert_fail@plt+0x1fdb0>
   327f4:	b	32814 <__assert_fail@plt+0x1fd64>
   327f8:	ldr	r0, [sp, #4]
   327fc:	add	r2, r0, #4
   32800:	str	r2, [sp, #4]
   32804:	ldr	r2, [r0]
   32808:	mov	r0, r5
   3280c:	bl	128e8 <fcntl64@plt>
   32810:	mov	r4, r0
   32814:	mov	r0, r4
   32818:	sub	sp, fp, #16
   3281c:	pop	{r4, r5, r6, r7, fp, lr}
   32820:	add	sp, sp, #8
   32824:	bx	lr
   32828:	mov	r0, #1
   3282c:	str	r0, [r7]
   32830:	b	32814 <__assert_fail@plt+0x1fd64>
   32834:	mov	r0, r5
   32838:	mov	r1, #0
   3283c:	mov	r2, r6
   32840:	bl	128e8 <fcntl64@plt>
   32844:	mov	r4, r0
   32848:	ldr	r0, [r7]
   3284c:	add	r0, r0, #1
   32850:	clz	r0, r0
   32854:	lsr	r0, r0, #5
   32858:	cmp	r0, #0
   3285c:	beq	32814 <__assert_fail@plt+0x1fd64>
   32860:	cmp	r4, #0
   32864:	bmi	32814 <__assert_fail@plt+0x1fd64>
   32868:	mov	r0, r4
   3286c:	mov	r1, #1
   32870:	bl	128e8 <fcntl64@plt>
   32874:	cmp	r0, #0
   32878:	bmi	32894 <__assert_fail@plt+0x1fde4>
   3287c:	orr	r2, r0, #1
   32880:	mov	r0, r4
   32884:	mov	r1, #2
   32888:	bl	128e8 <fcntl64@plt>
   3288c:	cmn	r0, #1
   32890:	bne	32814 <__assert_fail@plt+0x1fd64>
   32894:	bl	12804 <__errno_location@plt>
   32898:	ldr	r6, [r0]
   3289c:	mov	r5, r0
   328a0:	mov	r0, r4
   328a4:	bl	12a68 <close@plt>
   328a8:	str	r6, [r5]
   328ac:	mvn	r4, #0
   328b0:	b	32814 <__assert_fail@plt+0x1fd64>
   328b4:	push	{r4, sl, fp, lr}
   328b8:	add	fp, sp, #8
   328bc:	sub	sp, sp, #8
   328c0:	mov	r4, r0
   328c4:	cmp	r0, #0
   328c8:	beq	32900 <__assert_fail@plt+0x1fe50>
   328cc:	mov	r0, r4
   328d0:	bl	12720 <__freading@plt>
   328d4:	cmp	r0, #0
   328d8:	beq	32900 <__assert_fail@plt+0x1fe50>
   328dc:	ldrb	r0, [r4, #1]
   328e0:	tst	r0, #1
   328e4:	beq	32900 <__assert_fail@plt+0x1fe50>
   328e8:	mov	r0, #1
   328ec:	mov	r2, #0
   328f0:	mov	r3, #0
   328f4:	str	r0, [sp]
   328f8:	mov	r0, r4
   328fc:	bl	32938 <__assert_fail@plt+0x1fe88>
   32900:	mov	r0, r4
   32904:	sub	sp, fp, #8
   32908:	pop	{r4, sl, fp, lr}
   3290c:	b	12444 <fflush@plt>
   32910:	push	{r4, r5, r6, sl, fp, lr}
   32914:	add	fp, sp, #16
   32918:	mov	r4, r0
   3291c:	bl	12804 <__errno_location@plt>
   32920:	ldr	r6, [r0]
   32924:	mov	r5, r0
   32928:	mov	r0, r4
   3292c:	bl	12480 <free@plt>
   32930:	str	r6, [r5]
   32934:	pop	{r4, r5, r6, sl, fp, pc}
   32938:	push	{r4, r5, r6, r7, fp, lr}
   3293c:	add	fp, sp, #16
   32940:	sub	sp, sp, #8
   32944:	mov	r4, r0
   32948:	ldr	r0, [r0, #4]
   3294c:	mov	r5, r3
   32950:	mov	r6, r2
   32954:	ldr	r1, [r4, #8]
   32958:	cmp	r1, r0
   3295c:	bne	32978 <__assert_fail@plt+0x1fec8>
   32960:	ldrd	r0, [r4, #16]
   32964:	cmp	r1, r0
   32968:	bne	32978 <__assert_fail@plt+0x1fec8>
   3296c:	ldr	r0, [r4, #36]	; 0x24
   32970:	cmp	r0, #0
   32974:	beq	32990 <__assert_fail@plt+0x1fee0>
   32978:	mov	r0, r4
   3297c:	mov	r2, r6
   32980:	mov	r3, r5
   32984:	sub	sp, fp, #16
   32988:	pop	{r4, r5, r6, r7, fp, lr}
   3298c:	b	128d0 <fseeko64@plt>
   32990:	ldr	r7, [fp, #8]
   32994:	mov	r0, r4
   32998:	bl	1287c <fileno@plt>
   3299c:	mov	r2, r6
   329a0:	mov	r3, r5
   329a4:	str	r7, [sp]
   329a8:	bl	12630 <lseek64@plt>
   329ac:	and	r2, r0, r1
   329b0:	cmn	r2, #1
   329b4:	beq	329d4 <__assert_fail@plt+0x1ff24>
   329b8:	strd	r0, [r4, #80]	; 0x50
   329bc:	ldr	r0, [r4]
   329c0:	bic	r0, r0, #16
   329c4:	str	r0, [r4]
   329c8:	mov	r0, #0
   329cc:	sub	sp, fp, #16
   329d0:	pop	{r4, r5, r6, r7, fp, pc}
   329d4:	mvn	r0, #0
   329d8:	sub	sp, fp, #16
   329dc:	pop	{r4, r5, r6, r7, fp, pc}
   329e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   329e4:	add	fp, sp, #28
   329e8:	sub	sp, sp, #28
   329ec:	cmp	r1, #4096	; 0x1000
   329f0:	bcs	32a0c <__assert_fail@plt+0x1ff5c>
   329f4:	mov	sl, r0
   329f8:	and	r0, r1, #516	; 0x204
   329fc:	mov	r6, r1
   32a00:	cmp	r0, #516	; 0x204
   32a04:	tstne	r6, #18
   32a08:	bne	32a28 <__assert_fail@plt+0x1ff78>
   32a0c:	bl	12804 <__errno_location@plt>
   32a10:	mov	r1, #22
   32a14:	mov	r4, #0
   32a18:	str	r1, [r0]
   32a1c:	mov	r0, r4
   32a20:	sub	sp, fp, #28
   32a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32a28:	mov	r0, #1
   32a2c:	mov	r1, #96	; 0x60
   32a30:	mov	r5, r2
   32a34:	bl	322c0 <__assert_fail@plt+0x1f810>
   32a38:	cmp	r0, #0
   32a3c:	beq	3301c <__assert_fail@plt+0x2056c>
   32a40:	mov	r4, r0
   32a44:	mvn	r0, #99	; 0x63
   32a48:	tst	r6, #2
   32a4c:	mov	r1, r6
   32a50:	str	r0, [r4, #32]
   32a54:	bic	r0, r6, #516	; 0x204
   32a58:	str	r5, [r4, #44]	; 0x2c
   32a5c:	str	r4, [sp, #24]
   32a60:	orrne	r1, r0, #4
   32a64:	str	r1, [r4, #48]	; 0x30
   32a68:	ldr	r0, [sl]
   32a6c:	cmp	r0, #0
   32a70:	beq	32ad4 <__assert_fail@plt+0x20024>
   32a74:	add	r7, sl, #4
   32a78:	mov	r4, #0
   32a7c:	bl	127bc <strlen@plt>
   32a80:	cmp	r0, r4
   32a84:	movhi	r4, r0
   32a88:	ldr	r0, [r7], #4
   32a8c:	cmp	r0, #0
   32a90:	bne	32a7c <__assert_fail@plt+0x1ffcc>
   32a94:	add	r0, r4, #1
   32a98:	ldr	r4, [sp, #24]
   32a9c:	cmp	r0, #4096	; 0x1000
   32aa0:	movls	r0, #4096	; 0x1000
   32aa4:	ldr	r1, [r4, #36]	; 0x24
   32aa8:	add	r0, r0, #256	; 0x100
   32aac:	adds	r1, r0, r1
   32ab0:	bcc	32ae8 <__assert_fail@plt+0x20038>
   32ab4:	ldr	r0, [r4, #24]
   32ab8:	bl	32910 <__assert_fail@plt+0x1fe60>
   32abc:	mov	r0, #0
   32ac0:	str	r0, [r4, #24]
   32ac4:	bl	12804 <__errno_location@plt>
   32ac8:	mov	r1, #36	; 0x24
   32acc:	str	r1, [r0]
   32ad0:	b	33014 <__assert_fail@plt+0x20564>
   32ad4:	mov	r0, #4096	; 0x1000
   32ad8:	ldr	r1, [r4, #36]	; 0x24
   32adc:	add	r0, r0, #256	; 0x100
   32ae0:	adds	r1, r0, r1
   32ae4:	bcs	32ab4 <__assert_fail@plt+0x20004>
   32ae8:	str	r1, [r4, #36]	; 0x24
   32aec:	ldr	r0, [r4, #24]
   32af0:	bl	36110 <__assert_fail@plt+0x23660>
   32af4:	cmp	r0, #0
   32af8:	beq	32cf4 <__assert_fail@plt+0x20244>
   32afc:	str	r0, [r4, #24]
   32b00:	ldr	r0, [sl]
   32b04:	cmp	r0, #0
   32b08:	beq	32d08 <__assert_fail@plt+0x20258>
   32b0c:	mov	r0, #176	; 0xb0
   32b10:	bl	35350 <__assert_fail@plt+0x228a0>
   32b14:	cmp	r0, #0
   32b18:	beq	3300c <__assert_fail@plt+0x2055c>
   32b1c:	ldr	r1, [r4, #24]
   32b20:	mov	r7, r0
   32b24:	mov	r0, #0
   32b28:	mov	r2, #196608	; 0x30000
   32b2c:	strb	r0, [r7, #168]	; 0xa8
   32b30:	str	r2, [r7, #58]	; 0x3a
   32b34:	mvn	r2, #0
   32b38:	str	r4, [r7, #44]	; 0x2c
   32b3c:	str	r2, [r7, #48]	; 0x30
   32b40:	str	r0, [r7, #52]	; 0x34
   32b44:	str	r0, [r7, #12]
   32b48:	str	r0, [r7, #16]
   32b4c:	str	r0, [r7, #20]
   32b50:	str	r1, [r7, #28]
   32b54:	str	r0, [r7, #32]
   32b58:	cmp	r5, #0
   32b5c:	beq	32d14 <__assert_fail@plt+0x20264>
   32b60:	ldrb	r0, [r4, #49]	; 0x31
   32b64:	ubfx	r0, r0, #2, #1
   32b68:	ldr	r4, [sl]
   32b6c:	str	r0, [sp, #12]
   32b70:	cmp	r4, #0
   32b74:	beq	32d28 <__assert_fail@plt+0x20278>
   32b78:	tst	r6, #2048	; 0x800
   32b7c:	str	r5, [sp, #16]
   32b80:	str	r7, [sp, #20]
   32b84:	bne	32d4c <__assert_fail@plt+0x2029c>
   32b88:	mov	r0, #0
   32b8c:	mov	r8, #0
   32b90:	mov	r5, #0
   32b94:	str	r0, [sp, #8]
   32b98:	b	32bec <__assert_fail@plt+0x2013c>
   32b9c:	cmp	r8, #0
   32ba0:	str	r4, [r7, #8]
   32ba4:	beq	32bc8 <__assert_fail@plt+0x20118>
   32ba8:	ldr	r0, [sp, #8]
   32bac:	str	r7, [sp, #8]
   32bb0:	str	r7, [r0, #8]
   32bb4:	ldr	r4, [sl, #4]!
   32bb8:	add	r5, r5, #1
   32bbc:	cmp	r4, #0
   32bc0:	bne	32bec <__assert_fail@plt+0x2013c>
   32bc4:	b	32ea0 <__assert_fail@plt+0x203f0>
   32bc8:	mov	r0, r7
   32bcc:	str	r7, [sp, #8]
   32bd0:	b	32bd8 <__assert_fail@plt+0x20128>
   32bd4:	str	r8, [r7, #8]
   32bd8:	mov	r8, r7
   32bdc:	ldr	r4, [sl, #4]!
   32be0:	add	r5, r5, #1
   32be4:	cmp	r4, #0
   32be8:	beq	32ea0 <__assert_fail@plt+0x203f0>
   32bec:	mov	r0, r4
   32bf0:	bl	127bc <strlen@plt>
   32bf4:	mov	r9, r0
   32bf8:	cmp	r0, #3
   32bfc:	bcc	32c2c <__assert_fail@plt+0x2017c>
   32c00:	add	r0, r9, r4
   32c04:	ldrb	r0, [r0, #-1]
   32c08:	cmp	r0, #47	; 0x2f
   32c0c:	bne	32c2c <__assert_fail@plt+0x2017c>
   32c10:	sub	r0, r4, #2
   32c14:	ldrb	r1, [r0, r9]
   32c18:	cmp	r1, #47	; 0x2f
   32c1c:	bne	32c2c <__assert_fail@plt+0x2017c>
   32c20:	sub	r9, r9, #1
   32c24:	cmp	r9, #1
   32c28:	bhi	32c14 <__assert_fail@plt+0x20164>
   32c2c:	add	r0, r9, #176	; 0xb0
   32c30:	bic	r0, r0, #7
   32c34:	bl	35350 <__assert_fail@plt+0x228a0>
   32c38:	cmp	r0, #0
   32c3c:	beq	32e90 <__assert_fail@plt+0x203e0>
   32c40:	add	r6, r0, #168	; 0xa8
   32c44:	mov	r7, r0
   32c48:	mov	r1, r4
   32c4c:	mov	r2, r9
   32c50:	mov	r0, r6
   32c54:	bl	124e0 <memcpy@plt>
   32c58:	ldr	r0, [sp, #24]
   32c5c:	ldr	r1, [sp, #20]
   32c60:	mov	r4, #0
   32c64:	cmp	r8, #0
   32c68:	strb	r4, [r6, r9]
   32c6c:	ldr	r2, [r0, #24]
   32c70:	str	r1, [r7, #4]
   32c74:	add	r1, r7, #44	; 0x2c
   32c78:	stm	r1, {r0, r4, r9}
   32c7c:	mov	r1, #196608	; 0x30000
   32c80:	str	r1, [r7, #58]	; 0x3a
   32c84:	str	r4, [r7, #12]
   32c88:	str	r4, [r7, #16]
   32c8c:	str	r4, [r7, #20]
   32c90:	str	r6, [r7, #24]
   32c94:	mov	r1, r8
   32c98:	movwne	r1, #1
   32c9c:	str	r2, [r7, #28]
   32ca0:	ldr	r2, [sp, #12]
   32ca4:	str	r4, [r7, #32]
   32ca8:	tst	r2, r1
   32cac:	beq	32cd4 <__assert_fail@plt+0x20224>
   32cb0:	mov	r0, #2
   32cb4:	str	r0, [r7, #112]	; 0x70
   32cb8:	mov	r0, #11
   32cbc:	str	r4, [r7, #116]	; 0x74
   32cc0:	strh	r0, [r7, #56]	; 0x38
   32cc4:	ldr	r0, [sp, #16]
   32cc8:	cmp	r0, #0
   32ccc:	bne	32bd4 <__assert_fail@plt+0x20124>
   32cd0:	b	32b9c <__assert_fail@plt+0x200ec>
   32cd4:	mov	r1, r7
   32cd8:	mov	r2, #0
   32cdc:	bl	33090 <__assert_fail@plt+0x205e0>
   32ce0:	strh	r0, [r7, #56]	; 0x38
   32ce4:	ldr	r0, [sp, #16]
   32ce8:	cmp	r0, #0
   32cec:	bne	32bd4 <__assert_fail@plt+0x20124>
   32cf0:	b	32b9c <__assert_fail@plt+0x200ec>
   32cf4:	ldr	r0, [r4, #24]
   32cf8:	bl	32910 <__assert_fail@plt+0x1fe60>
   32cfc:	mov	r0, #0
   32d00:	str	r0, [r4, #24]
   32d04:	b	33014 <__assert_fail@plt+0x20564>
   32d08:	mov	r7, #0
   32d0c:	cmp	r5, #0
   32d10:	bne	32b60 <__assert_fail@plt+0x200b0>
   32d14:	mov	r0, #1
   32d18:	ldr	r4, [sl]
   32d1c:	str	r0, [sp, #12]
   32d20:	cmp	r4, #0
   32d24:	bne	32b78 <__assert_fail@plt+0x200c8>
   32d28:	ldr	r4, [sp, #24]
   32d2c:	mov	r8, #0
   32d30:	mov	r0, #176	; 0xb0
   32d34:	bl	35350 <__assert_fail@plt+0x228a0>
   32d38:	cmp	r0, #0
   32d3c:	bne	32ef8 <__assert_fail@plt+0x20448>
   32d40:	mov	r0, #0
   32d44:	str	r0, [r4]
   32d48:	b	32fc8 <__assert_fail@plt+0x20518>
   32d4c:	add	r0, sl, #4
   32d50:	mov	r9, #0
   32d54:	mov	r8, #0
   32d58:	mov	r5, #0
   32d5c:	str	r0, [sp, #8]
   32d60:	ldr	r0, [sp, #12]
   32d64:	eor	r0, r0, #1
   32d68:	str	r0, [sp, #12]
   32d6c:	mov	r0, #0
   32d70:	str	r0, [sp, #4]
   32d74:	b	32da8 <__assert_fail@plt+0x202f8>
   32d78:	cmp	r8, #0
   32d7c:	str	r9, [r5, #8]
   32d80:	beq	32e84 <__assert_fail@plt+0x203d4>
   32d84:	ldr	r0, [sp, #4]
   32d88:	str	r5, [sp, #4]
   32d8c:	str	r5, [r0, #8]
   32d90:	ldr	r0, [sp, #8]
   32d94:	mov	r5, sl
   32d98:	add	r5, sl, #1
   32d9c:	ldr	r4, [r0, sl, lsl #2]
   32da0:	cmp	r4, #0
   32da4:	beq	32ea0 <__assert_fail@plt+0x203f0>
   32da8:	mov	r0, r4
   32dac:	mov	sl, r5
   32db0:	bl	127bc <strlen@plt>
   32db4:	mov	r7, r0
   32db8:	add	r0, r0, #176	; 0xb0
   32dbc:	bic	r0, r0, #7
   32dc0:	bl	35350 <__assert_fail@plt+0x228a0>
   32dc4:	cmp	r0, #0
   32dc8:	beq	32e90 <__assert_fail@plt+0x203e0>
   32dcc:	add	r6, r0, #168	; 0xa8
   32dd0:	mov	r5, r0
   32dd4:	mov	r1, r4
   32dd8:	mov	r2, r7
   32ddc:	mov	r0, r6
   32de0:	bl	124e0 <memcpy@plt>
   32de4:	ldr	r0, [sp, #24]
   32de8:	ldr	r1, [sp, #20]
   32dec:	strb	r9, [r6, r7]
   32df0:	ldr	r2, [r0, #24]
   32df4:	str	r1, [r5, #4]
   32df8:	mov	r1, #196608	; 0x30000
   32dfc:	str	r0, [r5, #44]	; 0x2c
   32e00:	str	r9, [r5, #48]	; 0x30
   32e04:	str	r7, [r5, #52]	; 0x34
   32e08:	str	r1, [r5, #58]	; 0x3a
   32e0c:	str	r9, [r5, #12]
   32e10:	str	r9, [r5, #16]
   32e14:	str	r9, [r5, #20]
   32e18:	str	r6, [r5, #24]
   32e1c:	clz	r1, r8
   32e20:	lsr	r1, r1, #5
   32e24:	str	r2, [r5, #28]
   32e28:	ldr	r2, [sp, #12]
   32e2c:	str	r9, [r5, #32]
   32e30:	orrs	r1, r2, r1
   32e34:	bne	32e5c <__assert_fail@plt+0x203ac>
   32e38:	mov	r0, #2
   32e3c:	str	r0, [r5, #112]	; 0x70
   32e40:	str	r9, [r5, #116]	; 0x74
   32e44:	mov	r0, #11
   32e48:	strh	r0, [r5, #56]	; 0x38
   32e4c:	ldr	r0, [sp, #16]
   32e50:	cmp	r0, #0
   32e54:	bne	32e78 <__assert_fail@plt+0x203c8>
   32e58:	b	32d78 <__assert_fail@plt+0x202c8>
   32e5c:	mov	r1, r5
   32e60:	mov	r2, #0
   32e64:	bl	33090 <__assert_fail@plt+0x205e0>
   32e68:	strh	r0, [r5, #56]	; 0x38
   32e6c:	ldr	r0, [sp, #16]
   32e70:	cmp	r0, #0
   32e74:	beq	32d78 <__assert_fail@plt+0x202c8>
   32e78:	str	r8, [r5, #8]
   32e7c:	mov	r8, r5
   32e80:	b	32d90 <__assert_fail@plt+0x202e0>
   32e84:	mov	r0, r5
   32e88:	str	r5, [sp, #4]
   32e8c:	b	32e7c <__assert_fail@plt+0x203cc>
   32e90:	ldr	r7, [sp, #20]
   32e94:	cmp	r8, #0
   32e98:	bne	32fe8 <__assert_fail@plt+0x20538>
   32e9c:	b	33000 <__assert_fail@plt+0x20550>
   32ea0:	ldr	r0, [sp, #16]
   32ea4:	ldr	r7, [sp, #20]
   32ea8:	cmp	r0, #0
   32eac:	beq	32ee4 <__assert_fail@plt+0x20434>
   32eb0:	ldr	r4, [sp, #24]
   32eb4:	cmp	r5, #2
   32eb8:	bcc	32ee8 <__assert_fail@plt+0x20438>
   32ebc:	mov	r0, r4
   32ec0:	mov	r1, r8
   32ec4:	mov	r2, r5
   32ec8:	bl	33228 <__assert_fail@plt+0x20778>
   32ecc:	mov	r8, r0
   32ed0:	mov	r0, #176	; 0xb0
   32ed4:	bl	35350 <__assert_fail@plt+0x228a0>
   32ed8:	cmp	r0, #0
   32edc:	bne	32ef8 <__assert_fail@plt+0x20448>
   32ee0:	b	32d40 <__assert_fail@plt+0x20290>
   32ee4:	ldr	r4, [sp, #24]
   32ee8:	mov	r0, #176	; 0xb0
   32eec:	bl	35350 <__assert_fail@plt+0x228a0>
   32ef0:	cmp	r0, #0
   32ef4:	beq	32d40 <__assert_fail@plt+0x20290>
   32ef8:	ldr	r2, [r4, #24]
   32efc:	mov	r1, #0
   32f00:	mov	r3, #196608	; 0x30000
   32f04:	str	r0, [r4]
   32f08:	str	r1, [r0, #52]	; 0x34
   32f0c:	strb	r1, [r0, #168]	; 0xa8
   32f10:	str	r4, [r0, #44]	; 0x2c
   32f14:	str	r3, [r0, #58]	; 0x3a
   32f18:	str	r2, [r0, #28]
   32f1c:	mov	r2, #9
   32f20:	str	r1, [r0, #32]
   32f24:	strh	r2, [r0, #56]	; 0x38
   32f28:	str	r8, [r0, #8]
   32f2c:	str	r1, [r0, #12]
   32f30:	str	r1, [r0, #16]
   32f34:	str	r1, [r0, #20]
   32f38:	mov	r1, #1
   32f3c:	str	r1, [r0, #48]	; 0x30
   32f40:	ldrh	r0, [r4, #48]	; 0x30
   32f44:	movw	r1, #258	; 0x102
   32f48:	tst	r0, r1
   32f4c:	beq	32f88 <__assert_fail@plt+0x204d8>
   32f50:	movw	r0, #10512	; 0x2910
   32f54:	movw	r2, #20440	; 0x4fd8
   32f58:	movw	r3, #20472	; 0x4ff8
   32f5c:	mov	r1, #0
   32f60:	movt	r0, #3
   32f64:	movt	r2, #3
   32f68:	movt	r3, #3
   32f6c:	str	r0, [sp]
   32f70:	mov	r0, #31
   32f74:	bl	2446c <__assert_fail@plt+0x119bc>
   32f78:	cmp	r0, #0
   32f7c:	str	r0, [r4, #56]	; 0x38
   32f80:	bne	32fa0 <__assert_fail@plt+0x204f0>
   32f84:	b	32fc8 <__assert_fail@plt+0x20518>
   32f88:	mov	r0, #32
   32f8c:	bl	35350 <__assert_fail@plt+0x228a0>
   32f90:	cmp	r0, #0
   32f94:	str	r0, [r4, #56]	; 0x38
   32f98:	beq	32fc8 <__assert_fail@plt+0x20518>
   32f9c:	bl	4c2b8 <__assert_fail@plt+0x39808>
   32fa0:	ldr	r4, [sp, #24]
   32fa4:	ldr	r0, [r4, #48]	; 0x30
   32fa8:	tst	r0, #516	; 0x204
   32fac:	beq	3302c <__assert_fail@plt+0x2057c>
   32fb0:	add	r0, r4, #60	; 0x3c
   32fb4:	mvn	r1, #0
   32fb8:	bl	4c4fc <__assert_fail@plt+0x39a4c>
   32fbc:	mov	r0, r4
   32fc0:	sub	sp, fp, #28
   32fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32fc8:	cmp	r8, #0
   32fcc:	bne	32fe8 <__assert_fail@plt+0x20538>
   32fd0:	b	33000 <__assert_fail@plt+0x20550>
   32fd4:	mov	r0, r8
   32fd8:	bl	32910 <__assert_fail@plt+0x1fe60>
   32fdc:	cmp	r4, #0
   32fe0:	mov	r8, r4
   32fe4:	beq	33000 <__assert_fail@plt+0x20550>
   32fe8:	ldrd	r4, [r8, #8]
   32fec:	cmp	r5, #0
   32ff0:	beq	32fd4 <__assert_fail@plt+0x20524>
   32ff4:	mov	r0, r5
   32ff8:	bl	12a80 <closedir@plt>
   32ffc:	b	32fd4 <__assert_fail@plt+0x20524>
   33000:	mov	r0, r7
   33004:	bl	32910 <__assert_fail@plt+0x1fe60>
   33008:	ldr	r4, [sp, #24]
   3300c:	ldr	r0, [r4, #24]
   33010:	bl	32910 <__assert_fail@plt+0x1fe60>
   33014:	mov	r0, r4
   33018:	bl	32910 <__assert_fail@plt+0x1fe60>
   3301c:	mov	r4, #0
   33020:	mov	r0, r4
   33024:	sub	sp, fp, #28
   33028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3302c:	mov	r1, #32768	; 0x8000
   33030:	tst	r0, #512	; 0x200
   33034:	and	r1, r1, r0, lsl #11
   33038:	orr	r1, r1, #18688	; 0x4900
   3303c:	orr	r2, r1, #524288	; 0x80000
   33040:	bne	33064 <__assert_fail@plt+0x205b4>
   33044:	movw	r0, #57732	; 0xe184
   33048:	mov	r1, r2
   3304c:	movt	r0, #4
   33050:	bl	23d34 <__assert_fail@plt+0x11284>
   33054:	cmn	r0, #1
   33058:	str	r0, [r4, #28]
   3305c:	bgt	32fb0 <__assert_fail@plt+0x20500>
   33060:	b	33080 <__assert_fail@plt+0x205d0>
   33064:	ldr	r0, [r4, #32]
   33068:	movw	r1, #57732	; 0xe184
   3306c:	movt	r1, #4
   33070:	bl	2821c <__assert_fail@plt+0x1576c>
   33074:	cmn	r0, #1
   33078:	str	r0, [r4, #28]
   3307c:	bgt	32fb0 <__assert_fail@plt+0x20500>
   33080:	ldr	r0, [r4, #48]	; 0x30
   33084:	orr	r0, r0, #4
   33088:	str	r0, [r4, #48]	; 0x30
   3308c:	b	32fb0 <__assert_fail@plt+0x20500>
   33090:	push	{r4, r5, r6, sl, fp, lr}
   33094:	add	fp, sp, #16
   33098:	sub	sp, sp, #8
   3309c:	mov	r4, r1
   330a0:	ldr	r1, [r0, #48]	; 0x30
   330a4:	ldr	r3, [r4, #48]	; 0x30
   330a8:	add	r5, r4, #64	; 0x40
   330ac:	cmp	r3, #0
   330b0:	andeq	r3, r1, #1
   330b4:	orreq	r2, r3, r2
   330b8:	cmp	r2, #0
   330bc:	andseq	r1, r1, #2
   330c0:	beq	3311c <__assert_fail@plt+0x2066c>
   330c4:	ldr	r1, [r4, #24]
   330c8:	mov	r0, #3
   330cc:	mov	r2, r5
   330d0:	bl	12a14 <__xstat64@plt>
   330d4:	cmp	r0, #0
   330d8:	beq	3319c <__assert_fail@plt+0x206ec>
   330dc:	bl	12804 <__errno_location@plt>
   330e0:	mov	r6, r0
   330e4:	ldr	r0, [r0]
   330e8:	cmp	r0, #2
   330ec:	bne	3314c <__assert_fail@plt+0x2069c>
   330f0:	ldr	r1, [r4, #24]
   330f4:	mov	r0, #3
   330f8:	mov	r2, r5
   330fc:	bl	12a74 <__lxstat64@plt>
   33100:	cmp	r0, #0
   33104:	bne	33148 <__assert_fail@plt+0x20698>
   33108:	mov	r0, #0
   3310c:	str	r0, [r6]
   33110:	mov	r0, #13
   33114:	sub	sp, fp, #16
   33118:	pop	{r4, r5, r6, sl, fp, pc}
   3311c:	ldr	r1, [r0, #32]
   33120:	ldr	r2, [r4, #24]
   33124:	mov	r0, #256	; 0x100
   33128:	mov	r3, r5
   3312c:	str	r0, [sp]
   33130:	mov	r0, #3
   33134:	bl	125dc <__fxstatat64@plt>
   33138:	cmp	r0, #0
   3313c:	beq	3319c <__assert_fail@plt+0x206ec>
   33140:	bl	12804 <__errno_location@plt>
   33144:	mov	r6, r0
   33148:	ldr	r0, [r6]
   3314c:	vmov.i32	q8, #0	; 0x00000000
   33150:	add	r1, r5, #80	; 0x50
   33154:	str	r0, [r4, #32]
   33158:	mov	r0, #0
   3315c:	str	r0, [r5, #96]	; 0x60
   33160:	vst1.64	{d16-d17}, [r1]
   33164:	add	r1, r5, #64	; 0x40
   33168:	vst1.64	{d16-d17}, [r1]
   3316c:	add	r1, r5, #48	; 0x30
   33170:	vst1.64	{d16-d17}, [r1]
   33174:	add	r1, r5, #32
   33178:	vst1.64	{d16-d17}, [r1]
   3317c:	add	r1, r5, #16
   33180:	vst1.64	{d16-d17}, [r1]
   33184:	mov	r1, #100	; 0x64
   33188:	vst1.64	{d16-d17}, [r5], r1
   3318c:	str	r0, [r5]
   33190:	mov	r0, #10
   33194:	sub	sp, fp, #16
   33198:	pop	{r4, r5, r6, sl, fp, pc}
   3319c:	ldr	r0, [r4, #80]	; 0x50
   331a0:	and	r0, r0, #61440	; 0xf000
   331a4:	cmp	r0, #40960	; 0xa000
   331a8:	beq	33210 <__assert_fail@plt+0x20760>
   331ac:	cmp	r0, #32768	; 0x8000
   331b0:	beq	33204 <__assert_fail@plt+0x20754>
   331b4:	cmp	r0, #16384	; 0x4000
   331b8:	bne	3321c <__assert_fail@plt+0x2076c>
   331bc:	ldrb	r1, [r4, #168]	; 0xa8
   331c0:	mov	r0, #1
   331c4:	cmp	r1, #46	; 0x2e
   331c8:	bne	33220 <__assert_fail@plt+0x20770>
   331cc:	ldrb	r1, [r4, #169]	; 0xa9
   331d0:	cmp	r1, #0
   331d4:	beq	331ec <__assert_fail@plt+0x2073c>
   331d8:	cmp	r1, #46	; 0x2e
   331dc:	bne	33220 <__assert_fail@plt+0x20770>
   331e0:	ldrb	r1, [r4, #170]	; 0xaa
   331e4:	cmp	r1, #0
   331e8:	bne	33220 <__assert_fail@plt+0x20770>
   331ec:	ldr	r1, [r4, #48]	; 0x30
   331f0:	mov	r0, #5
   331f4:	cmp	r1, #0
   331f8:	movweq	r0, #1
   331fc:	sub	sp, fp, #16
   33200:	pop	{r4, r5, r6, sl, fp, pc}
   33204:	mov	r0, #8
   33208:	sub	sp, fp, #16
   3320c:	pop	{r4, r5, r6, sl, fp, pc}
   33210:	mov	r0, #12
   33214:	sub	sp, fp, #16
   33218:	pop	{r4, r5, r6, sl, fp, pc}
   3321c:	mov	r0, #3
   33220:	sub	sp, fp, #16
   33224:	pop	{r4, r5, r6, sl, fp, pc}
   33228:	push	{r4, r5, r6, r7, fp, lr}
   3322c:	add	fp, sp, #16
   33230:	mov	r6, r0
   33234:	ldr	r7, [r0, #44]	; 0x2c
   33238:	ldr	r0, [r0, #40]	; 0x28
   3323c:	mov	r5, r2
   33240:	mov	r4, r1
   33244:	cmp	r0, r2
   33248:	bcs	33280 <__assert_fail@plt+0x207d0>
   3324c:	add	r1, r5, #40	; 0x28
   33250:	cmn	r1, #-1073741823	; 0xc0000001
   33254:	str	r1, [r6, #40]	; 0x28
   33258:	bhi	33324 <__assert_fail@plt+0x20874>
   3325c:	ldr	r0, [r6, #8]
   33260:	lsl	r1, r1, #2
   33264:	bl	36110 <__assert_fail@plt+0x23660>
   33268:	cmp	r0, #0
   3326c:	beq	33324 <__assert_fail@plt+0x20874>
   33270:	str	r0, [r6, #8]
   33274:	cmp	r4, #0
   33278:	bne	3328c <__assert_fail@plt+0x207dc>
   3327c:	b	332a0 <__assert_fail@plt+0x207f0>
   33280:	ldr	r0, [r6, #8]
   33284:	cmp	r4, #0
   33288:	beq	332a0 <__assert_fail@plt+0x207f0>
   3328c:	str	r4, [r0], #4
   33290:	ldr	r4, [r4, #8]
   33294:	cmp	r4, #0
   33298:	bne	3328c <__assert_fail@plt+0x207dc>
   3329c:	ldr	r0, [r6, #8]
   332a0:	mov	r1, r5
   332a4:	mov	r2, #4
   332a8:	mov	r3, r7
   332ac:	bl	129cc <qsort@plt>
   332b0:	ldr	r0, [r6, #8]
   332b4:	cmp	r5, #1
   332b8:	ldr	r4, [r0]
   332bc:	mov	r1, r4
   332c0:	beq	33348 <__assert_fail@plt+0x20898>
   332c4:	mov	r2, r0
   332c8:	ldr	r1, [r2, #4]!
   332cc:	str	r1, [r4, #8]
   332d0:	subs	r1, r5, #2
   332d4:	beq	33340 <__assert_fail@plt+0x20890>
   332d8:	tst	r1, #1
   332dc:	beq	332f4 <__assert_fail@plt+0x20844>
   332e0:	ldr	r1, [r0, #8]!
   332e4:	ldr	r2, [r0, #-4]
   332e8:	str	r1, [r2, #8]
   332ec:	sub	r1, r5, #3
   332f0:	mov	r2, r0
   332f4:	cmp	r5, #3
   332f8:	beq	33344 <__assert_fail@plt+0x20894>
   332fc:	mov	r0, r2
   33300:	ldm	r2, {r3, r7}
   33304:	subs	r1, r1, #2
   33308:	str	r7, [r3, #8]
   3330c:	ldr	r3, [r0, #8]!
   33310:	ldr	r2, [r2, #4]
   33314:	str	r3, [r2, #8]
   33318:	mov	r2, r0
   3331c:	bne	33300 <__assert_fail@plt+0x20850>
   33320:	b	33344 <__assert_fail@plt+0x20894>
   33324:	ldr	r0, [r6, #8]
   33328:	bl	32910 <__assert_fail@plt+0x1fe60>
   3332c:	mov	r0, #0
   33330:	str	r0, [r6, #40]	; 0x28
   33334:	str	r0, [r6, #8]
   33338:	mov	r0, r4
   3333c:	pop	{r4, r5, r6, r7, fp, pc}
   33340:	mov	r0, r2
   33344:	ldr	r1, [r0]
   33348:	mov	r0, #0
   3334c:	str	r0, [r1, #8]
   33350:	mov	r0, r4
   33354:	pop	{r4, r5, r6, r7, fp, pc}
   33358:	push	{r4, r5, r6, r7, fp, lr}
   3335c:	add	fp, sp, #16
   33360:	mov	r4, r0
   33364:	ldr	r0, [r0]
   33368:	cmp	r0, #0
   3336c:	beq	333ac <__assert_fail@plt+0x208fc>
   33370:	ldr	r1, [r0, #48]	; 0x30
   33374:	cmp	r1, #0
   33378:	bmi	333a0 <__assert_fail@plt+0x208f0>
   3337c:	ldr	r5, [r0, #8]
   33380:	cmp	r5, #0
   33384:	ldreq	r5, [r0, #4]
   33388:	bl	32910 <__assert_fail@plt+0x1fe60>
   3338c:	ldr	r0, [r5, #48]	; 0x30
   33390:	cmn	r0, #1
   33394:	mov	r0, r5
   33398:	bgt	3337c <__assert_fail@plt+0x208cc>
   3339c:	b	333a4 <__assert_fail@plt+0x208f4>
   333a0:	mov	r5, r0
   333a4:	mov	r0, r5
   333a8:	bl	32910 <__assert_fail@plt+0x1fe60>
   333ac:	ldr	r5, [r4, #4]
   333b0:	cmp	r5, #0
   333b4:	bne	333d0 <__assert_fail@plt+0x20920>
   333b8:	b	333e8 <__assert_fail@plt+0x20938>
   333bc:	mov	r0, r5
   333c0:	bl	32910 <__assert_fail@plt+0x1fe60>
   333c4:	cmp	r6, #0
   333c8:	mov	r5, r6
   333cc:	beq	333e8 <__assert_fail@plt+0x20938>
   333d0:	ldrd	r6, [r5, #8]
   333d4:	cmp	r7, #0
   333d8:	beq	333bc <__assert_fail@plt+0x2090c>
   333dc:	mov	r0, r7
   333e0:	bl	12a80 <closedir@plt>
   333e4:	b	333bc <__assert_fail@plt+0x2090c>
   333e8:	ldr	r0, [r4, #8]
   333ec:	bl	32910 <__assert_fail@plt+0x1fe60>
   333f0:	ldr	r0, [r4, #24]
   333f4:	bl	32910 <__assert_fail@plt+0x1fe60>
   333f8:	ldr	r0, [r4, #48]	; 0x30
   333fc:	tst	r0, #512	; 0x200
   33400:	bne	3343c <__assert_fail@plt+0x2098c>
   33404:	mov	r6, #0
   33408:	tst	r0, #4
   3340c:	bne	33460 <__assert_fail@plt+0x209b0>
   33410:	ldr	r0, [r4, #28]
   33414:	bl	129b4 <fchdir@plt>
   33418:	cmp	r0, #0
   3341c:	beq	33508 <__assert_fail@plt+0x20a58>
   33420:	bl	12804 <__errno_location@plt>
   33424:	ldr	r6, [r0]
   33428:	ldr	r0, [r4, #28]
   3342c:	bl	12a68 <close@plt>
   33430:	cmp	r6, #0
   33434:	beq	33450 <__assert_fail@plt+0x209a0>
   33438:	b	33460 <__assert_fail@plt+0x209b0>
   3343c:	ldr	r0, [r4, #32]
   33440:	mov	r6, #0
   33444:	cmp	r0, #0
   33448:	bmi	33460 <__assert_fail@plt+0x209b0>
   3344c:	bl	12a68 <close@plt>
   33450:	cmp	r0, #0
   33454:	beq	33460 <__assert_fail@plt+0x209b0>
   33458:	bl	12804 <__errno_location@plt>
   3345c:	ldr	r6, [r0]
   33460:	add	r5, r4, #60	; 0x3c
   33464:	mov	r0, r5
   33468:	bl	4c520 <__assert_fail@plt+0x39a70>
   3346c:	cmp	r0, #0
   33470:	bne	33498 <__assert_fail@plt+0x209e8>
   33474:	mov	r0, r5
   33478:	bl	4c574 <__assert_fail@plt+0x39ac4>
   3347c:	cmp	r0, #0
   33480:	bmi	33464 <__assert_fail@plt+0x209b4>
   33484:	bl	12a68 <close@plt>
   33488:	mov	r0, r5
   3348c:	bl	4c520 <__assert_fail@plt+0x39a70>
   33490:	cmp	r0, #0
   33494:	beq	33474 <__assert_fail@plt+0x209c4>
   33498:	ldr	r0, [r4, #52]	; 0x34
   3349c:	cmp	r0, #0
   334a0:	beq	334a8 <__assert_fail@plt+0x209f8>
   334a4:	bl	24788 <__assert_fail@plt+0x11cd8>
   334a8:	ldrh	r0, [r4, #48]	; 0x30
   334ac:	movw	r1, #258	; 0x102
   334b0:	tst	r0, r1
   334b4:	beq	334e8 <__assert_fail@plt+0x20a38>
   334b8:	ldr	r0, [r4, #56]	; 0x38
   334bc:	cmp	r0, #0
   334c0:	beq	334c8 <__assert_fail@plt+0x20a18>
   334c4:	bl	24788 <__assert_fail@plt+0x11cd8>
   334c8:	mov	r0, r4
   334cc:	bl	32910 <__assert_fail@plt+0x1fe60>
   334d0:	cmp	r6, #0
   334d4:	beq	33500 <__assert_fail@plt+0x20a50>
   334d8:	bl	12804 <__errno_location@plt>
   334dc:	str	r6, [r0]
   334e0:	mvn	r0, #0
   334e4:	pop	{r4, r5, r6, r7, fp, pc}
   334e8:	ldr	r0, [r4, #56]	; 0x38
   334ec:	bl	32910 <__assert_fail@plt+0x1fe60>
   334f0:	mov	r0, r4
   334f4:	bl	32910 <__assert_fail@plt+0x1fe60>
   334f8:	cmp	r6, #0
   334fc:	bne	334d8 <__assert_fail@plt+0x20a28>
   33500:	mov	r0, #0
   33504:	pop	{r4, r5, r6, r7, fp, pc}
   33508:	mov	r6, #0
   3350c:	ldr	r0, [r4, #28]
   33510:	bl	12a68 <close@plt>
   33514:	cmp	r6, #0
   33518:	beq	33450 <__assert_fail@plt+0x209a0>
   3351c:	b	33460 <__assert_fail@plt+0x209b0>
   33520:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   33524:	add	fp, sp, #24
   33528:	sub	sp, sp, #8
   3352c:	ldr	r6, [r0]
   33530:	mov	r5, #0
   33534:	cmp	r6, #0
   33538:	beq	33ce0 <__assert_fail@plt+0x21230>
   3353c:	mov	r4, r0
   33540:	ldr	r0, [r0, #48]	; 0x30
   33544:	tst	r0, #8192	; 0x2000
   33548:	bne	33ce0 <__assert_fail@plt+0x21230>
   3354c:	ldrh	r1, [r6, #60]	; 0x3c
   33550:	mov	r2, #3
   33554:	strh	r2, [r6, #60]	; 0x3c
   33558:	cmp	r1, #1
   3355c:	beq	335fc <__assert_fail@plt+0x20b4c>
   33560:	cmp	r1, #2
   33564:	bne	33620 <__assert_fail@plt+0x20b70>
   33568:	ldrh	r2, [r6, #56]	; 0x38
   3356c:	bic	r3, r2, #1
   33570:	cmp	r3, #12
   33574:	bne	33624 <__assert_fail@plt+0x20b74>
   33578:	mov	r0, r4
   3357c:	mov	r1, r6
   33580:	mov	r2, #1
   33584:	bl	33090 <__assert_fail@plt+0x205e0>
   33588:	cmp	r0, #1
   3358c:	strh	r0, [r6, #56]	; 0x38
   33590:	bne	33bf4 <__assert_fail@plt+0x21144>
   33594:	ldr	r0, [r4, #48]	; 0x30
   33598:	tst	r0, #4
   3359c:	bne	33bf4 <__assert_fail@plt+0x21144>
   335a0:	mov	r1, #32768	; 0x8000
   335a4:	tst	r0, #512	; 0x200
   335a8:	and	r1, r1, r0, lsl #11
   335ac:	orr	r1, r1, #18688	; 0x4900
   335b0:	orr	r2, r1, #524288	; 0x80000
   335b4:	bne	33928 <__assert_fail@plt+0x20e78>
   335b8:	movw	r0, #57732	; 0xe184
   335bc:	mov	r1, r2
   335c0:	movt	r0, #4
   335c4:	bl	23d34 <__assert_fail@plt+0x11284>
   335c8:	cmn	r0, #1
   335cc:	str	r0, [r6, #36]	; 0x24
   335d0:	bgt	33944 <__assert_fail@plt+0x20e94>
   335d4:	bl	12804 <__errno_location@plt>
   335d8:	ldr	r0, [r0]
   335dc:	mov	r1, #7
   335e0:	strh	r1, [r6, #56]	; 0x38
   335e4:	str	r0, [r6, #32]
   335e8:	str	r6, [r4]
   335ec:	ldrh	r0, [r6, #56]	; 0x38
   335f0:	cmp	r0, #11
   335f4:	beq	33c04 <__assert_fail@plt+0x21154>
   335f8:	b	33c38 <__assert_fail@plt+0x21188>
   335fc:	mov	r0, r4
   33600:	mov	r1, r6
   33604:	mov	r2, #0
   33608:	bl	33090 <__assert_fail@plt+0x205e0>
   3360c:	strh	r0, [r6, #56]	; 0x38
   33610:	mov	r5, r6
   33614:	mov	r0, r5
   33618:	sub	sp, fp, #24
   3361c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   33620:	ldrh	r2, [r6, #56]	; 0x38
   33624:	cmp	r2, #1
   33628:	bne	33684 <__assert_fail@plt+0x20bd4>
   3362c:	cmp	r1, #4
   33630:	bne	33738 <__assert_fail@plt+0x20c88>
   33634:	ldrb	r0, [r6, #58]	; 0x3a
   33638:	tst	r0, #2
   3363c:	beq	33648 <__assert_fail@plt+0x20b98>
   33640:	ldr	r0, [r6, #36]	; 0x24
   33644:	bl	12a68 <close@plt>
   33648:	ldr	r5, [r4, #4]
   3364c:	cmp	r5, #0
   33650:	bne	3366c <__assert_fail@plt+0x20bbc>
   33654:	b	337d0 <__assert_fail@plt+0x20d20>
   33658:	mov	r0, r5
   3365c:	bl	32910 <__assert_fail@plt+0x1fe60>
   33660:	cmp	r8, #0
   33664:	mov	r5, r8
   33668:	beq	337c8 <__assert_fail@plt+0x20d18>
   3366c:	ldrd	r8, [r5, #8]
   33670:	cmp	r9, #0
   33674:	beq	33658 <__assert_fail@plt+0x20ba8>
   33678:	mov	r0, r9
   3367c:	bl	12a80 <closedir@plt>
   33680:	b	33658 <__assert_fail@plt+0x20ba8>
   33684:	mov	r7, r6
   33688:	ldr	r6, [r7, #8]
   3368c:	cmp	r6, #0
   33690:	beq	337f4 <__assert_fail@plt+0x20d44>
   33694:	mov	r0, r7
   33698:	str	r6, [r4]
   3369c:	bl	32910 <__assert_fail@plt+0x1fe60>
   336a0:	ldr	r0, [r6, #48]	; 0x30
   336a4:	cmp	r0, #0
   336a8:	beq	3383c <__assert_fail@plt+0x20d8c>
   336ac:	ldrh	r0, [r6, #60]	; 0x3c
   336b0:	mov	r7, r6
   336b4:	cmp	r0, #4
   336b8:	beq	33688 <__assert_fail@plt+0x20bd8>
   336bc:	cmp	r0, #2
   336c0:	bne	33bb8 <__assert_fail@plt+0x21108>
   336c4:	mov	r0, r4
   336c8:	mov	r1, r6
   336cc:	mov	r2, #1
   336d0:	bl	33090 <__assert_fail@plt+0x205e0>
   336d4:	cmp	r0, #1
   336d8:	strh	r0, [r6, #56]	; 0x38
   336dc:	bne	33bb0 <__assert_fail@plt+0x21100>
   336e0:	ldr	r0, [r4, #48]	; 0x30
   336e4:	tst	r0, #4
   336e8:	bne	33bb0 <__assert_fail@plt+0x21100>
   336ec:	mov	r1, #32768	; 0x8000
   336f0:	tst	r0, #512	; 0x200
   336f4:	and	r1, r1, r0, lsl #11
   336f8:	orr	r1, r1, #18688	; 0x4900
   336fc:	orr	r2, r1, #524288	; 0x80000
   33700:	bne	33b88 <__assert_fail@plt+0x210d8>
   33704:	movw	r0, #57732	; 0xe184
   33708:	mov	r1, r2
   3370c:	movt	r0, #4
   33710:	bl	23d34 <__assert_fail@plt+0x11284>
   33714:	cmn	r0, #1
   33718:	str	r0, [r6, #36]	; 0x24
   3371c:	bgt	33ba4 <__assert_fail@plt+0x210f4>
   33720:	bl	12804 <__errno_location@plt>
   33724:	ldr	r0, [r0]
   33728:	mov	r1, #7
   3372c:	strh	r1, [r6, #56]	; 0x38
   33730:	str	r0, [r6, #32]
   33734:	b	33bb0 <__assert_fail@plt+0x21100>
   33738:	tst	r0, #64	; 0x40
   3373c:	beq	33758 <__assert_fail@plt+0x20ca8>
   33740:	ldrd	r2, [r4, #16]
   33744:	ldrd	r8, [r6, #64]	; 0x40
   33748:	eor	r1, r9, r3
   3374c:	eor	r2, r8, r2
   33750:	orrs	r1, r2, r1
   33754:	bne	33634 <__assert_fail@plt+0x20b84>
   33758:	ldr	r7, [r4, #4]
   3375c:	cmp	r7, #0
   33760:	beq	338d4 <__assert_fail@plt+0x20e24>
   33764:	tst	r0, #4096	; 0x1000
   33768:	bne	3388c <__assert_fail@plt+0x20ddc>
   3376c:	ldr	r3, [r6, #24]
   33770:	mov	r0, r4
   33774:	mov	r1, r6
   33778:	mvn	r2, #0
   3377c:	bl	33e9c <__assert_fail@plt+0x213ec>
   33780:	cmp	r0, #0
   33784:	beq	338ec <__assert_fail@plt+0x20e3c>
   33788:	bl	12804 <__errno_location@plt>
   3378c:	ldr	r0, [r0]
   33790:	str	r0, [r6, #32]
   33794:	ldrh	r0, [r6, #58]	; 0x3a
   33798:	orr	r0, r0, #1
   3379c:	strh	r0, [r6, #58]	; 0x3a
   337a0:	ldr	r0, [r4, #4]
   337a4:	cmp	r0, #0
   337a8:	beq	338ec <__assert_fail@plt+0x20e3c>
   337ac:	ldmib	r0, {r1, r2}
   337b0:	cmp	r2, #0
   337b4:	ldr	r1, [r1, #24]
   337b8:	str	r1, [r0, #24]
   337bc:	mov	r0, r2
   337c0:	bne	337ac <__assert_fail@plt+0x20cfc>
   337c4:	b	338ec <__assert_fail@plt+0x20e3c>
   337c8:	mov	r0, #0
   337cc:	str	r0, [r4, #4]
   337d0:	mov	r0, #6
   337d4:	strh	r0, [r6, #56]	; 0x38
   337d8:	mov	r0, r4
   337dc:	mov	r1, r6
   337e0:	bl	33dc0 <__assert_fail@plt+0x21310>
   337e4:	mov	r5, r6
   337e8:	mov	r0, r5
   337ec:	sub	sp, fp, #24
   337f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   337f4:	ldr	r0, [r7, #4]
   337f8:	ldr	r1, [r0, #12]
   337fc:	cmp	r1, #0
   33800:	beq	33864 <__assert_fail@plt+0x20db4>
   33804:	str	r0, [r4]
   33808:	mov	r2, #0
   3380c:	ldr	r1, [r4, #24]
   33810:	ldr	r0, [r0, #40]	; 0x28
   33814:	strb	r2, [r1, r0]
   33818:	mov	r0, r4
   3381c:	mov	r1, #3
   33820:	bl	3414c <__assert_fail@plt+0x2169c>
   33824:	cmp	r0, #0
   33828:	beq	33964 <__assert_fail@plt+0x20eb4>
   3382c:	mov	r6, r0
   33830:	mov	r0, r7
   33834:	bl	32910 <__assert_fail@plt+0x1fe60>
   33838:	b	33bb8 <__assert_fail@plt+0x21108>
   3383c:	mov	r0, r4
   33840:	bl	34ce4 <__assert_fail@plt+0x22234>
   33844:	ldr	r1, [r4, #48]	; 0x30
   33848:	cmp	r0, #0
   3384c:	beq	3386c <__assert_fail@plt+0x20dbc>
   33850:	orr	r0, r1, #8192	; 0x2000
   33854:	str	r0, [r4, #48]	; 0x30
   33858:	mov	r0, r5
   3385c:	sub	sp, fp, #24
   33860:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   33864:	mov	r5, r0
   33868:	b	33978 <__assert_fail@plt+0x20ec8>
   3386c:	movw	r0, #258	; 0x102
   33870:	tst	r1, r0
   33874:	beq	33a14 <__assert_fail@plt+0x20f64>
   33878:	ldr	r0, [r4, #56]	; 0x38
   3387c:	cmp	r0, #0
   33880:	beq	33a1c <__assert_fail@plt+0x20f6c>
   33884:	bl	24788 <__assert_fail@plt+0x11cd8>
   33888:	b	33a1c <__assert_fail@plt+0x20f6c>
   3388c:	bic	r0, r0, #4096	; 0x1000
   33890:	str	r0, [r4, #48]	; 0x30
   33894:	ldrd	r8, [r7, #8]
   33898:	cmp	r9, #0
   3389c:	bne	338c0 <__assert_fail@plt+0x20e10>
   338a0:	mov	r0, r7
   338a4:	bl	32910 <__assert_fail@plt+0x1fe60>
   338a8:	cmp	r8, #0
   338ac:	mov	r7, r8
   338b0:	beq	338cc <__assert_fail@plt+0x20e1c>
   338b4:	ldrd	r8, [r7, #8]
   338b8:	cmp	r9, #0
   338bc:	beq	338a0 <__assert_fail@plt+0x20df0>
   338c0:	mov	r0, r9
   338c4:	bl	12a80 <closedir@plt>
   338c8:	b	338a0 <__assert_fail@plt+0x20df0>
   338cc:	mov	r0, #0
   338d0:	str	r0, [r4, #4]
   338d4:	mov	r0, r4
   338d8:	mov	r1, #3
   338dc:	bl	3414c <__assert_fail@plt+0x2169c>
   338e0:	cmp	r0, #0
   338e4:	str	r0, [r4, #4]
   338e8:	beq	338fc <__assert_fail@plt+0x20e4c>
   338ec:	ldr	r6, [r4, #4]
   338f0:	mov	r0, #0
   338f4:	str	r0, [r4, #4]
   338f8:	b	33bb8 <__assert_fail@plt+0x21108>
   338fc:	ldrb	r0, [r4, #49]	; 0x31
   33900:	tst	r0, #32
   33904:	bne	33ce0 <__assert_fail@plt+0x21230>
   33908:	ldr	r0, [r6, #32]
   3390c:	cmp	r0, #0
   33910:	beq	337d8 <__assert_fail@plt+0x20d28>
   33914:	ldrh	r0, [r6, #56]	; 0x38
   33918:	cmp	r0, #4
   3391c:	beq	337d8 <__assert_fail@plt+0x20d28>
   33920:	mov	r0, #7
   33924:	b	337d4 <__assert_fail@plt+0x20d24>
   33928:	ldr	r0, [r4, #32]
   3392c:	movw	r1, #57732	; 0xe184
   33930:	movt	r1, #4
   33934:	bl	2821c <__assert_fail@plt+0x1576c>
   33938:	cmn	r0, #1
   3393c:	str	r0, [r6, #36]	; 0x24
   33940:	ble	335d4 <__assert_fail@plt+0x20b24>
   33944:	ldrh	r0, [r6, #58]	; 0x3a
   33948:	orr	r0, r0, #2
   3394c:	strh	r0, [r6, #58]	; 0x3a
   33950:	str	r6, [r4]
   33954:	ldrh	r0, [r6, #56]	; 0x38
   33958:	cmp	r0, #11
   3395c:	beq	33c04 <__assert_fail@plt+0x21154>
   33960:	b	33c38 <__assert_fail@plt+0x21188>
   33964:	ldrb	r0, [r4, #49]	; 0x31
   33968:	mov	r5, #0
   3396c:	tst	r0, #32
   33970:	bne	33ce0 <__assert_fail@plt+0x21230>
   33974:	ldr	r5, [r7, #4]
   33978:	mov	r0, r7
   3397c:	str	r5, [r4]
   33980:	bl	32910 <__assert_fail@plt+0x1fe60>
   33984:	ldr	r0, [r5, #48]	; 0x30
   33988:	cmn	r0, #1
   3398c:	beq	339f0 <__assert_fail@plt+0x20f40>
   33990:	ldrh	r0, [r5, #56]	; 0x38
   33994:	cmp	r0, #11
   33998:	beq	33dbc <__assert_fail@plt+0x2130c>
   3399c:	ldr	r0, [r5, #40]	; 0x28
   339a0:	ldr	r1, [r4, #24]
   339a4:	mov	r2, #0
   339a8:	strb	r2, [r1, r0]
   339ac:	ldr	r0, [r5, #48]	; 0x30
   339b0:	cmp	r0, #0
   339b4:	beq	33b0c <__assert_fail@plt+0x2105c>
   339b8:	ldrh	r0, [r5, #58]	; 0x3a
   339bc:	tst	r0, #2
   339c0:	bne	33b44 <__assert_fail@plt+0x21094>
   339c4:	tst	r0, #1
   339c8:	bne	33d74 <__assert_fail@plt+0x212c4>
   339cc:	ldr	r1, [r5, #4]
   339d0:	movw	r3, #11913	; 0x2e89
   339d4:	mov	r0, r4
   339d8:	mvn	r2, #0
   339dc:	movt	r3, #5
   339e0:	bl	33e9c <__assert_fail@plt+0x213ec>
   339e4:	cmp	r0, #0
   339e8:	bne	33b1c <__assert_fail@plt+0x2106c>
   339ec:	b	33d74 <__assert_fail@plt+0x212c4>
   339f0:	mov	r0, r5
   339f4:	bl	32910 <__assert_fail@plt+0x1fe60>
   339f8:	bl	12804 <__errno_location@plt>
   339fc:	mov	r5, #0
   33a00:	str	r5, [r0]
   33a04:	str	r5, [r4]
   33a08:	mov	r0, r5
   33a0c:	sub	sp, fp, #24
   33a10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   33a14:	ldr	r0, [r4, #56]	; 0x38
   33a18:	bl	32910 <__assert_fail@plt+0x1fe60>
   33a1c:	ldr	r1, [r6, #52]	; 0x34
   33a20:	add	r7, r6, #168	; 0xa8
   33a24:	str	r1, [r6, #40]	; 0x28
   33a28:	add	r2, r1, #1
   33a2c:	mov	r1, r7
   33a30:	ldr	r0, [r4, #24]
   33a34:	bl	12474 <memmove@plt>
   33a38:	mov	r0, r7
   33a3c:	mov	r1, #47	; 0x2f
   33a40:	bl	12924 <strrchr@plt>
   33a44:	cmp	r0, #0
   33a48:	beq	33a84 <__assert_fail@plt+0x20fd4>
   33a4c:	cmp	r0, r7
   33a50:	bne	33a60 <__assert_fail@plt+0x20fb0>
   33a54:	ldrb	r1, [r6, #169]	; 0xa9
   33a58:	cmp	r1, #0
   33a5c:	beq	33a84 <__assert_fail@plt+0x20fd4>
   33a60:	add	r8, r0, #1
   33a64:	mov	r0, r8
   33a68:	bl	127bc <strlen@plt>
   33a6c:	mov	r9, r0
   33a70:	add	r2, r0, #1
   33a74:	mov	r0, r7
   33a78:	mov	r1, r8
   33a7c:	bl	12474 <memmove@plt>
   33a80:	str	r9, [r6, #52]	; 0x34
   33a84:	ldr	r0, [r4, #24]
   33a88:	movw	r1, #258	; 0x102
   33a8c:	str	r0, [r6, #24]
   33a90:	str	r0, [r6, #28]
   33a94:	ldrh	r0, [r4, #48]	; 0x30
   33a98:	tst	r0, r1
   33a9c:	beq	33ae0 <__assert_fail@plt+0x21030>
   33aa0:	movw	r0, #10512	; 0x2910
   33aa4:	movw	r2, #20440	; 0x4fd8
   33aa8:	movw	r3, #20472	; 0x4ff8
   33aac:	mov	r1, #0
   33ab0:	movt	r0, #3
   33ab4:	movt	r2, #3
   33ab8:	movt	r3, #3
   33abc:	str	r0, [sp]
   33ac0:	mov	r0, #31
   33ac4:	bl	2446c <__assert_fail@plt+0x119bc>
   33ac8:	str	r0, [r4, #56]	; 0x38
   33acc:	str	r6, [r4]
   33ad0:	ldrh	r0, [r6, #56]	; 0x38
   33ad4:	cmp	r0, #11
   33ad8:	beq	33c04 <__assert_fail@plt+0x21154>
   33adc:	b	33c38 <__assert_fail@plt+0x21188>
   33ae0:	mov	r0, #32
   33ae4:	bl	35350 <__assert_fail@plt+0x228a0>
   33ae8:	cmp	r0, #0
   33aec:	str	r0, [r4, #56]	; 0x38
   33af0:	beq	33bf4 <__assert_fail@plt+0x21144>
   33af4:	bl	4c2b8 <__assert_fail@plt+0x39808>
   33af8:	str	r6, [r4]
   33afc:	ldrh	r0, [r6, #56]	; 0x38
   33b00:	cmp	r0, #11
   33b04:	beq	33c04 <__assert_fail@plt+0x21154>
   33b08:	b	33c38 <__assert_fail@plt+0x21188>
   33b0c:	mov	r0, r4
   33b10:	bl	34ce4 <__assert_fail@plt+0x22234>
   33b14:	cmp	r0, #0
   33b18:	beq	33d74 <__assert_fail@plt+0x212c4>
   33b1c:	bl	12804 <__errno_location@plt>
   33b20:	ldr	r0, [r0]
   33b24:	str	r0, [r5, #32]
   33b28:	ldr	r0, [r4, #48]	; 0x30
   33b2c:	orr	r0, r0, #8192	; 0x2000
   33b30:	str	r0, [r4, #48]	; 0x30
   33b34:	ldrh	r0, [r5, #56]	; 0x38
   33b38:	cmp	r0, #2
   33b3c:	bne	33d80 <__assert_fail@plt+0x212d0>
   33b40:	b	33da4 <__assert_fail@plt+0x212f4>
   33b44:	ldr	r0, [r4, #48]	; 0x30
   33b48:	tst	r0, #4
   33b4c:	bne	33d6c <__assert_fail@plt+0x212bc>
   33b50:	ldr	r6, [r5, #36]	; 0x24
   33b54:	tst	r0, #512	; 0x200
   33b58:	bne	33d40 <__assert_fail@plt+0x21290>
   33b5c:	mov	r0, r6
   33b60:	bl	129b4 <fchdir@plt>
   33b64:	cmp	r0, #0
   33b68:	beq	33d6c <__assert_fail@plt+0x212bc>
   33b6c:	bl	12804 <__errno_location@plt>
   33b70:	ldr	r0, [r0]
   33b74:	str	r0, [r5, #32]
   33b78:	ldr	r0, [r4, #48]	; 0x30
   33b7c:	orr	r0, r0, #8192	; 0x2000
   33b80:	str	r0, [r4, #48]	; 0x30
   33b84:	b	33d6c <__assert_fail@plt+0x212bc>
   33b88:	ldr	r0, [r4, #32]
   33b8c:	movw	r1, #57732	; 0xe184
   33b90:	movt	r1, #4
   33b94:	bl	2821c <__assert_fail@plt+0x1576c>
   33b98:	cmn	r0, #1
   33b9c:	str	r0, [r6, #36]	; 0x24
   33ba0:	ble	33720 <__assert_fail@plt+0x20c70>
   33ba4:	ldrh	r0, [r6, #58]	; 0x3a
   33ba8:	orr	r0, r0, #2
   33bac:	strh	r0, [r6, #58]	; 0x3a
   33bb0:	mov	r0, #3
   33bb4:	strh	r0, [r6, #60]	; 0x3c
   33bb8:	ldr	r0, [r6, #4]
   33bbc:	ldr	r1, [r0, #28]
   33bc0:	ldr	r0, [r0, #40]	; 0x28
   33bc4:	sub	r2, r0, #1
   33bc8:	ldrb	r1, [r1, r2]
   33bcc:	cmp	r1, #47	; 0x2f
   33bd0:	ldr	r1, [r4, #24]
   33bd4:	moveq	r0, r2
   33bd8:	mov	r2, #47	; 0x2f
   33bdc:	strb	r2, [r1, r0]!
   33be0:	ldr	r2, [r6, #52]	; 0x34
   33be4:	add	r0, r1, #1
   33be8:	add	r1, r6, #168	; 0xa8
   33bec:	add	r2, r2, #1
   33bf0:	bl	12474 <memmove@plt>
   33bf4:	str	r6, [r4]
   33bf8:	ldrh	r0, [r6, #56]	; 0x38
   33bfc:	cmp	r0, #11
   33c00:	bne	33c38 <__assert_fail@plt+0x21188>
   33c04:	add	r0, r6, #112	; 0x70
   33c08:	ldrd	r0, [r0]
   33c0c:	eor	r2, r0, #1
   33c10:	orrs	r2, r2, r1
   33c14:	beq	33cec <__assert_fail@plt+0x2123c>
   33c18:	eor	r0, r0, #2
   33c1c:	orrs	r0, r0, r1
   33c20:	bne	33dbc <__assert_fail@plt+0x2130c>
   33c24:	mov	r0, r4
   33c28:	mov	r1, r6
   33c2c:	mov	r2, #0
   33c30:	bl	33090 <__assert_fail@plt+0x205e0>
   33c34:	strh	r0, [r6, #56]	; 0x38
   33c38:	cmp	r0, #1
   33c3c:	bne	33cdc <__assert_fail@plt+0x2122c>
   33c40:	ldr	r0, [r6, #48]	; 0x30
   33c44:	add	r8, r6, #64	; 0x40
   33c48:	cmp	r0, #0
   33c4c:	bne	33c58 <__assert_fail@plt+0x211a8>
   33c50:	ldrd	r0, [r8]
   33c54:	strd	r0, [r4, #16]
   33c58:	ldrh	r0, [r4, #48]	; 0x30
   33c5c:	movw	r1, #258	; 0x102
   33c60:	tst	r0, r1
   33c64:	beq	33cfc <__assert_fail@plt+0x2124c>
   33c68:	mov	r0, #24
   33c6c:	bl	35350 <__assert_fail@plt+0x228a0>
   33c70:	cmp	r0, #0
   33c74:	beq	33d28 <__assert_fail@plt+0x21278>
   33c78:	ldrd	r2, [r8]
   33c7c:	mov	r7, r0
   33c80:	add	r0, r6, #160	; 0xa0
   33c84:	stm	r7, {r2, r3}
   33c88:	add	r2, r7, #8
   33c8c:	ldrd	r0, [r0]
   33c90:	stm	r2, {r0, r1, r6}
   33c94:	mov	r1, r7
   33c98:	ldr	r0, [r4, #56]	; 0x38
   33c9c:	bl	250c8 <__assert_fail@plt+0x12618>
   33ca0:	cmp	r0, r7
   33ca4:	beq	33cec <__assert_fail@plt+0x2123c>
   33ca8:	mov	r4, r0
   33cac:	mov	r0, r7
   33cb0:	bl	32910 <__assert_fail@plt+0x1fe60>
   33cb4:	cmp	r4, #0
   33cb8:	beq	33d28 <__assert_fail@plt+0x21278>
   33cbc:	ldr	r0, [r4, #16]
   33cc0:	mov	r1, #2
   33cc4:	mov	r5, r6
   33cc8:	strh	r1, [r6, #56]	; 0x38
   33ccc:	str	r0, [r6]
   33cd0:	mov	r0, r5
   33cd4:	sub	sp, fp, #24
   33cd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   33cdc:	mov	r5, r6
   33ce0:	mov	r0, r5
   33ce4:	sub	sp, fp, #24
   33ce8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   33cec:	mov	r5, r6
   33cf0:	mov	r0, r5
   33cf4:	sub	sp, fp, #24
   33cf8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   33cfc:	ldr	r0, [r4, #56]	; 0x38
   33d00:	mov	r1, r8
   33d04:	bl	4c2d4 <__assert_fail@plt+0x39824>
   33d08:	cmp	r0, #0
   33d0c:	mov	r5, r6
   33d10:	movne	r0, #2
   33d14:	strhne	r0, [r6, #56]	; 0x38
   33d18:	strne	r6, [r6]
   33d1c:	mov	r0, r5
   33d20:	sub	sp, fp, #24
   33d24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   33d28:	bl	12804 <__errno_location@plt>
   33d2c:	mov	r1, #12
   33d30:	str	r1, [r0]
   33d34:	mov	r0, r5
   33d38:	sub	sp, fp, #24
   33d3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   33d40:	ldr	r1, [r4, #32]
   33d44:	cmp	r1, r6
   33d48:	bne	33d54 <__assert_fail@plt+0x212a4>
   33d4c:	cmn	r1, #100	; 0x64
   33d50:	bne	33dbc <__assert_fail@plt+0x2130c>
   33d54:	add	r0, r4, #60	; 0x3c
   33d58:	bl	4c528 <__assert_fail@plt+0x39a78>
   33d5c:	cmp	r0, #0
   33d60:	bmi	33d68 <__assert_fail@plt+0x212b8>
   33d64:	bl	12a68 <close@plt>
   33d68:	str	r6, [r4, #32]
   33d6c:	ldr	r0, [r5, #36]	; 0x24
   33d70:	bl	12a68 <close@plt>
   33d74:	ldrh	r0, [r5, #56]	; 0x38
   33d78:	cmp	r0, #2
   33d7c:	beq	33da4 <__assert_fail@plt+0x212f4>
   33d80:	ldr	r0, [r5, #32]
   33d84:	mov	r1, #7
   33d88:	cmp	r0, #0
   33d8c:	movweq	r1, #6
   33d90:	strh	r1, [r5, #56]	; 0x38
   33d94:	bne	33da4 <__assert_fail@plt+0x212f4>
   33d98:	mov	r0, r4
   33d9c:	mov	r1, r5
   33da0:	bl	33dc0 <__assert_fail@plt+0x21310>
   33da4:	ldrb	r0, [r4, #49]	; 0x31
   33da8:	tst	r0, #32
   33dac:	movne	r5, #0
   33db0:	mov	r0, r5
   33db4:	sub	sp, fp, #24
   33db8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   33dbc:	bl	12a5c <abort@plt>
   33dc0:	push	{r4, r5, r7, sl, fp, lr}
   33dc4:	add	fp, sp, #16
   33dc8:	sub	sp, sp, #24
   33dcc:	ldrh	r2, [r0, #48]	; 0x30
   33dd0:	movw	r3, #258	; 0x102
   33dd4:	add	lr, r1, #64	; 0x40
   33dd8:	add	r4, r1, #160	; 0xa0
   33ddc:	tst	r2, r3
   33de0:	beq	33e18 <__assert_fail@plt+0x21368>
   33de4:	ldrd	r2, [lr]
   33de8:	mov	r1, sp
   33dec:	stm	sp, {r2, r3}
   33df0:	ldrd	r2, [r4]
   33df4:	str	r3, [sp, #12]
   33df8:	str	r2, [sp, #8]
   33dfc:	ldr	r0, [r0, #56]	; 0x38
   33e00:	bl	25110 <__assert_fail@plt+0x12660>
   33e04:	cmp	r0, #0
   33e08:	beq	33e98 <__assert_fail@plt+0x213e8>
   33e0c:	bl	32910 <__assert_fail@plt+0x1fe60>
   33e10:	sub	sp, fp, #16
   33e14:	pop	{r4, r5, r7, sl, fp, pc}
   33e18:	ldr	r1, [r1, #4]
   33e1c:	cmp	r1, #0
   33e20:	beq	33e90 <__assert_fail@plt+0x213e0>
   33e24:	ldr	r2, [r1, #48]	; 0x30
   33e28:	cmp	r2, #0
   33e2c:	bmi	33e90 <__assert_fail@plt+0x213e0>
   33e30:	ldr	ip, [r0, #56]	; 0x38
   33e34:	ldrd	r2, [ip, #16]
   33e38:	orrs	r2, r2, r3
   33e3c:	beq	33e98 <__assert_fail@plt+0x213e8>
   33e40:	ldrd	r2, [r4]
   33e44:	ldrd	r4, [ip]
   33e48:	eor	r3, r5, r3
   33e4c:	eor	r2, r4, r2
   33e50:	orrs	r2, r2, r3
   33e54:	bne	33e90 <__assert_fail@plt+0x213e0>
   33e58:	add	r3, ip, #8
   33e5c:	ldm	lr, {r2, r5}
   33e60:	ldm	r3, {r4, r7}
   33e64:	eor	r7, r7, r5
   33e68:	eor	r2, r4, r2
   33e6c:	orrs	r2, r2, r7
   33e70:	bne	33e90 <__assert_fail@plt+0x213e0>
   33e74:	add	r2, r1, #64	; 0x40
   33e78:	add	r1, r1, #160	; 0xa0
   33e7c:	ldm	r2, {r2, r5}
   33e80:	stm	r3, {r2, r5}
   33e84:	ldr	r0, [r0, #56]	; 0x38
   33e88:	ldrd	r2, [r1]
   33e8c:	strd	r2, [r0]
   33e90:	sub	sp, fp, #16
   33e94:	pop	{r4, r5, r7, sl, fp, pc}
   33e98:	bl	12a5c <abort@plt>
   33e9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33ea0:	add	fp, sp, #28
   33ea4:	sub	sp, sp, #108	; 0x6c
   33ea8:	mov	r7, r3
   33eac:	mov	r4, r2
   33eb0:	mov	r8, r1
   33eb4:	mov	sl, r0
   33eb8:	cmp	r3, #0
   33ebc:	beq	33f48 <__assert_fail@plt+0x21498>
   33ec0:	movw	r1, #11913	; 0x2e89
   33ec4:	mov	r0, r7
   33ec8:	movt	r1, #5
   33ecc:	bl	123fc <strcmp@plt>
   33ed0:	cmp	r0, #0
   33ed4:	mov	r6, r0
   33ed8:	movwne	r6, #1
   33edc:	ldr	r0, [sl, #48]	; 0x30
   33ee0:	tst	r0, #4
   33ee4:	bne	33f58 <__assert_fail@plt+0x214a8>
   33ee8:	cmn	r4, #1
   33eec:	mov	r1, #0
   33ef0:	mov	r9, #0
   33ef4:	movwgt	r1, #1
   33ef8:	orrs	r1, r1, r6
   33efc:	bne	33f80 <__assert_fail@plt+0x214d0>
   33f00:	ands	r0, r0, #512	; 0x200
   33f04:	beq	33f80 <__assert_fail@plt+0x214d0>
   33f08:	add	r4, sl, #60	; 0x3c
   33f0c:	mov	r0, r4
   33f10:	bl	4c520 <__assert_fail@plt+0x39a70>
   33f14:	cmp	r0, #0
   33f18:	bne	33f88 <__assert_fail@plt+0x214d8>
   33f1c:	mov	r0, r4
   33f20:	bl	4c574 <__assert_fail@plt+0x39ac4>
   33f24:	cmn	r0, #1
   33f28:	ble	33f88 <__assert_fail@plt+0x214d8>
   33f2c:	mov	r4, r0
   33f30:	mov	r9, #0
   33f34:	mov	r7, #0
   33f38:	ldr	r5, [sl, #48]	; 0x30
   33f3c:	tst	r5, #2
   33f40:	beq	33fcc <__assert_fail@plt+0x2151c>
   33f44:	b	34014 <__assert_fail@plt+0x21564>
   33f48:	mov	r6, #1
   33f4c:	ldr	r0, [sl, #48]	; 0x30
   33f50:	tst	r0, #4
   33f54:	beq	33ee8 <__assert_fail@plt+0x21438>
   33f58:	mov	r5, #0
   33f5c:	cmp	r4, #0
   33f60:	bmi	34008 <__assert_fail@plt+0x21558>
   33f64:	ands	r0, r0, #512	; 0x200
   33f68:	beq	34008 <__assert_fail@plt+0x21558>
   33f6c:	mov	r0, r4
   33f70:	bl	12a68 <close@plt>
   33f74:	mov	r0, r5
   33f78:	sub	sp, fp, #28
   33f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33f80:	cmn	r4, #1
   33f84:	bgt	33fc0 <__assert_fail@plt+0x21510>
   33f88:	ldr	r0, [sl, #48]	; 0x30
   33f8c:	mov	r1, #32768	; 0x8000
   33f90:	and	r1, r1, r0, lsl #11
   33f94:	tst	r0, #512	; 0x200
   33f98:	orr	r1, r1, #18688	; 0x4900
   33f9c:	orr	r2, r1, #524288	; 0x80000
   33fa0:	bne	3403c <__assert_fail@plt+0x2158c>
   33fa4:	mov	r0, r7
   33fa8:	mov	r1, r2
   33fac:	bl	23d34 <__assert_fail@plt+0x11284>
   33fb0:	mov	r4, r0
   33fb4:	mov	r9, #1
   33fb8:	cmp	r0, #0
   33fbc:	bmi	34058 <__assert_fail@plt+0x215a8>
   33fc0:	ldr	r5, [sl, #48]	; 0x30
   33fc4:	tst	r5, #2
   33fc8:	bne	34014 <__assert_fail@plt+0x21564>
   33fcc:	cmp	r7, #0
   33fd0:	beq	33fec <__assert_fail@plt+0x2153c>
   33fd4:	movw	r1, #11913	; 0x2e89
   33fd8:	mov	r0, r7
   33fdc:	movt	r1, #5
   33fe0:	bl	123fc <strcmp@plt>
   33fe4:	cmp	r0, #0
   33fe8:	beq	34014 <__assert_fail@plt+0x21564>
   33fec:	tst	r5, #512	; 0x200
   33ff0:	bne	340b0 <__assert_fail@plt+0x21600>
   33ff4:	mov	r0, r4
   33ff8:	bl	129b4 <fchdir@plt>
   33ffc:	mov	r5, r0
   34000:	cmp	r9, #0
   34004:	bne	340f8 <__assert_fail@plt+0x21648>
   34008:	mov	r0, r5
   3400c:	sub	sp, fp, #28
   34010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34014:	mov	r2, sp
   34018:	mov	r0, #3
   3401c:	mov	r1, r4
   34020:	bl	1260c <__fxstat64@plt>
   34024:	cmp	r0, #0
   34028:	beq	34068 <__assert_fail@plt+0x215b8>
   3402c:	mvn	r5, #0
   34030:	cmp	r9, #0
   34034:	beq	34008 <__assert_fail@plt+0x21558>
   34038:	b	340f8 <__assert_fail@plt+0x21648>
   3403c:	ldr	r0, [sl, #32]
   34040:	mov	r1, r7
   34044:	bl	2821c <__assert_fail@plt+0x1576c>
   34048:	mov	r4, r0
   3404c:	mov	r9, #1
   34050:	cmp	r0, #0
   34054:	bpl	33fc0 <__assert_fail@plt+0x21510>
   34058:	mvn	r5, #0
   3405c:	mov	r0, r5
   34060:	sub	sp, fp, #28
   34064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34068:	add	r0, r8, #64	; 0x40
   3406c:	ldm	sp, {r2, r3}
   34070:	ldrd	r0, [r0]
   34074:	eor	r1, r1, r3
   34078:	eor	r0, r0, r2
   3407c:	orrs	r0, r0, r1
   34080:	bne	340e0 <__assert_fail@plt+0x21630>
   34084:	add	r0, r8, #160	; 0xa0
   34088:	ldr	r2, [sp, #96]	; 0x60
   3408c:	ldr	r3, [sp, #100]	; 0x64
   34090:	ldrd	r0, [r0]
   34094:	eor	r1, r1, r3
   34098:	eor	r0, r0, r2
   3409c:	orrs	r0, r0, r1
   340a0:	bne	340e0 <__assert_fail@plt+0x21630>
   340a4:	ldr	r5, [sl, #48]	; 0x30
   340a8:	tst	r5, #512	; 0x200
   340ac:	beq	33ff4 <__assert_fail@plt+0x21544>
   340b0:	ldr	r1, [sl, #32]
   340b4:	cmp	r1, r4
   340b8:	bne	340c4 <__assert_fail@plt+0x21614>
   340bc:	cmn	r1, #100	; 0x64
   340c0:	bne	34148 <__assert_fail@plt+0x21698>
   340c4:	cmp	r6, #0
   340c8:	beq	3411c <__assert_fail@plt+0x2166c>
   340cc:	add	r0, sl, #60	; 0x3c
   340d0:	bl	4c528 <__assert_fail@plt+0x39a78>
   340d4:	cmp	r0, #0
   340d8:	bpl	34130 <__assert_fail@plt+0x21680>
   340dc:	b	34134 <__assert_fail@plt+0x21684>
   340e0:	bl	12804 <__errno_location@plt>
   340e4:	mov	r1, #2
   340e8:	str	r1, [r0]
   340ec:	mvn	r5, #0
   340f0:	cmp	r9, #0
   340f4:	beq	34008 <__assert_fail@plt+0x21558>
   340f8:	bl	12804 <__errno_location@plt>
   340fc:	ldr	r7, [r0]
   34100:	mov	r6, r0
   34104:	mov	r0, r4
   34108:	bl	12a68 <close@plt>
   3410c:	str	r7, [r6]
   34110:	mov	r0, r5
   34114:	sub	sp, fp, #28
   34118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3411c:	tst	r5, #4
   34120:	bne	34134 <__assert_fail@plt+0x21684>
   34124:	cmp	r1, #0
   34128:	bmi	34134 <__assert_fail@plt+0x21684>
   3412c:	mov	r0, r1
   34130:	bl	12a68 <close@plt>
   34134:	str	r4, [sl, #32]
   34138:	mov	r5, #0
   3413c:	mov	r0, r5
   34140:	sub	sp, fp, #28
   34144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34148:	bl	12a5c <abort@plt>
   3414c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34150:	add	fp, sp, #28
   34154:	sub	sp, sp, #68	; 0x44
   34158:	ldr	sl, [r0]
   3415c:	mov	r4, r1
   34160:	mov	r5, r0
   34164:	str	r0, [fp, #-44]	; 0xffffffd4
   34168:	ldr	r6, [sl, #12]
   3416c:	cmp	r6, #0
   34170:	beq	341b8 <__assert_fail@plt+0x21708>
   34174:	mov	r0, r6
   34178:	bl	129a8 <dirfd@plt>
   3417c:	cmn	r0, #1
   34180:	str	r0, [fp, #-32]	; 0xffffffe0
   34184:	ble	341ec <__assert_fail@plt+0x2173c>
   34188:	mov	r1, r5
   3418c:	str	r6, [sp, #12]
   34190:	str	r4, [sp, #4]
   34194:	mov	r7, #0
   34198:	ldr	r0, [r1, #44]!	; 0x2c
   3419c:	str	r1, [sp, #20]
   341a0:	mvn	r1, #0
   341a4:	cmp	r0, #0
   341a8:	movweq	r1, #34464	; 0x86a0
   341ac:	movteq	r1, #1
   341b0:	str	r1, [sp, #32]
   341b4:	b	344e4 <__assert_fail@plt+0x21a34>
   341b8:	ldr	r3, [r5, #48]	; 0x30
   341bc:	mvn	r0, #99	; 0x63
   341c0:	mov	r2, #0
   341c4:	and	r1, r3, #516	; 0x204
   341c8:	cmp	r1, #512	; 0x200
   341cc:	ldr	r1, [sl, #24]
   341d0:	ldreq	r0, [r5, #32]
   341d4:	tst	r3, #16
   341d8:	beq	34214 <__assert_fail@plt+0x21764>
   341dc:	tst	r3, #1
   341e0:	bne	34208 <__assert_fail@plt+0x21758>
   341e4:	mov	r2, #32768	; 0x8000
   341e8:	b	34214 <__assert_fail@plt+0x21764>
   341ec:	ldr	r0, [sl, #12]
   341f0:	bl	12a80 <closedir@plt>
   341f4:	mov	r6, #0
   341f8:	str	r6, [sl, #12]
   341fc:	cmp	r4, #3
   34200:	beq	3425c <__assert_fail@plt+0x217ac>
   34204:	b	34bf4 <__assert_fail@plt+0x22144>
   34208:	ldr	r3, [sl, #48]	; 0x30
   3420c:	cmp	r3, #0
   34210:	movne	r2, #32768	; 0x8000
   34214:	sub	r3, fp, #32
   34218:	bl	4c7fc <__assert_fail@plt+0x39d4c>
   3421c:	cmp	r0, #0
   34220:	str	r0, [sl, #12]
   34224:	beq	34250 <__assert_fail@plt+0x217a0>
   34228:	ldrh	r0, [sl, #56]	; 0x38
   3422c:	cmp	r0, #11
   34230:	bne	3427c <__assert_fail@plt+0x217cc>
   34234:	mov	r0, r5
   34238:	mov	r1, sl
   3423c:	mov	r2, #0
   34240:	bl	33090 <__assert_fail@plt+0x205e0>
   34244:	strh	r0, [sl, #56]	; 0x38
   34248:	mov	r7, r5
   3424c:	b	34348 <__assert_fail@plt+0x21898>
   34250:	mov	r6, #0
   34254:	cmp	r4, #3
   34258:	bne	34bf4 <__assert_fail@plt+0x22144>
   3425c:	mov	r0, #4
   34260:	strh	r0, [sl, #56]	; 0x38
   34264:	bl	12804 <__errno_location@plt>
   34268:	ldr	r0, [r0]
   3426c:	str	r0, [sl, #32]
   34270:	mov	r0, r6
   34274:	sub	sp, fp, #28
   34278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3427c:	ldrb	r0, [r5, #49]	; 0x31
   34280:	mov	r7, r5
   34284:	tst	r0, #1
   34288:	beq	34348 <__assert_fail@plt+0x21898>
   3428c:	mov	r0, r7
   34290:	mov	r1, sl
   34294:	add	r8, sl, #64	; 0x40
   34298:	bl	33dc0 <__assert_fail@plt+0x21310>
   3429c:	mov	r0, r7
   342a0:	mov	r1, sl
   342a4:	mov	r2, #0
   342a8:	bl	33090 <__assert_fail@plt+0x205e0>
   342ac:	ldrh	r0, [r7, #48]	; 0x30
   342b0:	movw	r1, #258	; 0x102
   342b4:	tst	r0, r1
   342b8:	beq	3432c <__assert_fail@plt+0x2187c>
   342bc:	mov	r0, #24
   342c0:	bl	35350 <__assert_fail@plt+0x228a0>
   342c4:	cmp	r0, #0
   342c8:	beq	343f0 <__assert_fail@plt+0x21940>
   342cc:	ldrd	r2, [r8]
   342d0:	mov	r5, r0
   342d4:	add	r0, sl, #160	; 0xa0
   342d8:	ldr	r7, [fp, #-44]	; 0xffffffd4
   342dc:	stm	r5, {r2, r3}
   342e0:	add	r2, r5, #8
   342e4:	ldrd	r0, [r0]
   342e8:	stm	r2, {r0, r1, sl}
   342ec:	mov	r1, r5
   342f0:	ldr	r0, [r7, #56]	; 0x38
   342f4:	bl	250c8 <__assert_fail@plt+0x12618>
   342f8:	cmp	r0, r5
   342fc:	beq	34348 <__assert_fail@plt+0x21898>
   34300:	mov	r8, r0
   34304:	mov	r0, r5
   34308:	bl	32910 <__assert_fail@plt+0x1fe60>
   3430c:	cmp	r8, #0
   34310:	beq	343f0 <__assert_fail@plt+0x21940>
   34314:	ldr	r7, [fp, #-44]	; 0xffffffd4
   34318:	ldr	r0, [r8, #16]
   3431c:	mov	r1, #2
   34320:	strh	r1, [sl, #56]	; 0x38
   34324:	str	r0, [sl]
   34328:	b	34348 <__assert_fail@plt+0x21898>
   3432c:	ldr	r0, [r7, #56]	; 0x38
   34330:	mov	r1, r8
   34334:	bl	4c2d4 <__assert_fail@plt+0x39824>
   34338:	cmp	r0, #0
   3433c:	movne	r0, #2
   34340:	strhne	r0, [sl, #56]	; 0x38
   34344:	strne	sl, [sl]
   34348:	mov	r1, r7
   3434c:	mov	r5, r7
   34350:	str	r4, [sp, #4]
   34354:	str	r6, [sp, #12]
   34358:	ldr	r0, [r1, #44]!	; 0x2c
   3435c:	str	r1, [sp, #20]
   34360:	mvn	r1, #0
   34364:	cmp	r0, #0
   34368:	movweq	r1, #34464	; 0x86a0
   3436c:	movteq	r1, #1
   34370:	cmp	r4, #2
   34374:	str	r1, [sp, #32]
   34378:	bne	34394 <__assert_fail@plt+0x218e4>
   3437c:	mov	r7, #1
   34380:	cmp	r4, #3
   34384:	bne	344e4 <__assert_fail@plt+0x21a34>
   34388:	sub	r0, r4, #3
   3438c:	mov	r5, #0
   34390:	b	34428 <__assert_fail@plt+0x21978>
   34394:	ldr	r0, [r5, #48]	; 0x30
   34398:	and	r0, r0, #56	; 0x38
   3439c:	cmp	r0, #24
   343a0:	bne	34420 <__assert_fail@plt+0x21970>
   343a4:	ldr	r0, [sl, #84]	; 0x54
   343a8:	cmp	r0, #2
   343ac:	bne	34420 <__assert_fail@plt+0x21970>
   343b0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   343b4:	mov	r0, sl
   343b8:	bl	35078 <__assert_fail@plt+0x225c8>
   343bc:	movw	r1, #26984	; 0x6968
   343c0:	cmp	r0, r1
   343c4:	ble	3440c <__assert_fail@plt+0x2195c>
   343c8:	movw	r1, #26985	; 0x6969
   343cc:	cmp	r0, r1
   343d0:	movwne	r1, #16719	; 0x414f
   343d4:	movtne	r1, #21318	; 0x5346
   343d8:	cmpne	r0, r1
   343dc:	beq	34420 <__assert_fail@plt+0x21970>
   343e0:	movw	r1, #40864	; 0x9fa0
   343e4:	cmp	r0, r1
   343e8:	beq	34420 <__assert_fail@plt+0x21970>
   343ec:	b	3437c <__assert_fail@plt+0x218cc>
   343f0:	bl	12804 <__errno_location@plt>
   343f4:	mov	r1, #12
   343f8:	mov	r6, #0
   343fc:	str	r1, [r0]
   34400:	mov	r0, r6
   34404:	sub	sp, fp, #28
   34408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3440c:	movw	r1, #19778	; 0x4d42
   34410:	movt	r1, #65363	; 0xff53
   34414:	cmp	r0, r1
   34418:	cmpne	r0, #0
   3441c:	bne	3437c <__assert_fail@plt+0x218cc>
   34420:	sub	r0, r4, #3
   34424:	mov	r5, #1
   34428:	clz	r0, r0
   3442c:	lsr	r7, r0, #5
   34430:	ldr	r0, [fp, #-44]	; 0xffffffd4
   34434:	ldr	r2, [fp, #-32]	; 0xffffffe0
   34438:	ldrb	r0, [r0, #49]	; 0x31
   3443c:	tst	r0, #2
   34440:	beq	3445c <__assert_fail@plt+0x219ac>
   34444:	mov	r0, r2
   34448:	movw	r1, #1030	; 0x406
   3444c:	mov	r2, #3
   34450:	bl	326d4 <__assert_fail@plt+0x1fc24>
   34454:	mov	r2, r0
   34458:	str	r0, [fp, #-32]	; 0xffffffe0
   3445c:	cmp	r2, #0
   34460:	bmi	3447c <__assert_fail@plt+0x219cc>
   34464:	ldr	r0, [fp, #-44]	; 0xffffffd4
   34468:	mov	r1, sl
   3446c:	mov	r3, #0
   34470:	bl	33e9c <__assert_fail@plt+0x213ec>
   34474:	cmp	r0, #0
   34478:	beq	344dc <__assert_fail@plt+0x21a2c>
   3447c:	and	r0, r7, r5
   34480:	cmp	r0, #1
   34484:	bne	34494 <__assert_fail@plt+0x219e4>
   34488:	bl	12804 <__errno_location@plt>
   3448c:	ldr	r0, [r0]
   34490:	str	r0, [sl, #32]
   34494:	ldrh	r0, [sl, #58]	; 0x3a
   34498:	orr	r0, r0, #1
   3449c:	strh	r0, [sl, #58]	; 0x3a
   344a0:	ldr	r0, [sl, #12]
   344a4:	bl	12a80 <closedir@plt>
   344a8:	ldr	r5, [fp, #-44]	; 0xffffffd4
   344ac:	mov	r4, #0
   344b0:	str	r4, [sl, #12]
   344b4:	ldrb	r0, [r5, #49]	; 0x31
   344b8:	tst	r0, #2
   344bc:	beq	344d0 <__assert_fail@plt+0x21a20>
   344c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   344c4:	cmp	r0, #0
   344c8:	bmi	344d0 <__assert_fail@plt+0x21a20>
   344cc:	bl	12a68 <close@plt>
   344d0:	mov	r7, #1
   344d4:	str	r4, [sl, #12]
   344d8:	b	344e4 <__assert_fail@plt+0x21a34>
   344dc:	ldr	r5, [fp, #-44]	; 0xffffffd4
   344e0:	mov	r7, #0
   344e4:	ldr	r0, [sl, #40]	; 0x28
   344e8:	ldr	r1, [sl, #28]
   344ec:	mov	r9, #0
   344f0:	sub	r2, r0, #1
   344f4:	ldrb	r1, [r1, r2]
   344f8:	cmp	r1, #47	; 0x2f
   344fc:	ldrb	r1, [r5, #48]	; 0x30
   34500:	moveq	r0, r2
   34504:	tst	r1, #4
   34508:	mov	r1, #0
   3450c:	str	r1, [sp, #40]	; 0x28
   34510:	beq	34528 <__assert_fail@plt+0x21a78>
   34514:	ldr	r1, [r5, #24]
   34518:	mov	r2, #47	; 0x2f
   3451c:	strb	r2, [r1, r0]!
   34520:	add	r1, r1, #1
   34524:	str	r1, [sp, #40]	; 0x28
   34528:	ldr	r6, [sl, #12]
   3452c:	add	r1, r0, #1
   34530:	str	r1, [fp, #-40]	; 0xffffffd8
   34534:	cmp	r6, #0
   34538:	beq	34900 <__assert_fail@plt+0x21e50>
   3453c:	ldr	r0, [sl, #48]	; 0x30
   34540:	str	r7, [sp]
   34544:	mov	r7, #0
   34548:	add	r0, r0, #1
   3454c:	str	r0, [sp, #24]
   34550:	ldr	r0, [r5, #36]	; 0x24
   34554:	sub	r0, r0, r1
   34558:	str	r0, [sp, #44]	; 0x2c
   3455c:	bl	12804 <__errno_location@plt>
   34560:	str	r0, [sp, #36]	; 0x24
   34564:	mov	r0, #0
   34568:	mov	r9, #0
   3456c:	mov	r4, #0
   34570:	str	sl, [sp, #28]
   34574:	str	r0, [sp, #48]	; 0x30
   34578:	mov	r0, #0
   3457c:	str	r0, [sp, #8]
   34580:	mov	r0, #0
   34584:	str	r0, [sp, #16]
   34588:	ldr	r0, [sp, #36]	; 0x24
   3458c:	str	r7, [r0]
   34590:	mov	r0, r6
   34594:	bl	12978 <readdir64@plt>
   34598:	cmp	r0, #0
   3459c:	beq	3497c <__assert_fail@plt+0x21ecc>
   345a0:	mov	r8, r0
   345a4:	ldrb	r0, [r5, #48]	; 0x30
   345a8:	tst	r0, #32
   345ac:	bne	345dc <__assert_fail@plt+0x21b2c>
   345b0:	ldrb	r0, [r8, #19]
   345b4:	cmp	r0, #46	; 0x2e
   345b8:	bne	345dc <__assert_fail@plt+0x21b2c>
   345bc:	ldrb	r0, [r8, #20]
   345c0:	cmp	r0, #0
   345c4:	beq	34898 <__assert_fail@plt+0x21de8>
   345c8:	cmp	r0, #46	; 0x2e
   345cc:	bne	345dc <__assert_fail@plt+0x21b2c>
   345d0:	ldrb	r0, [r8, #21]
   345d4:	cmp	r0, #0
   345d8:	beq	34898 <__assert_fail@plt+0x21de8>
   345dc:	str	r4, [fp, #-36]	; 0xffffffdc
   345e0:	add	r4, r8, #19
   345e4:	mov	r0, r4
   345e8:	bl	127bc <strlen@plt>
   345ec:	mov	r5, r0
   345f0:	add	r0, r0, #176	; 0xb0
   345f4:	bic	r0, r0, #7
   345f8:	bl	35350 <__assert_fail@plt+0x228a0>
   345fc:	mov	r6, r0
   34600:	cmp	r0, #0
   34604:	beq	34c60 <__assert_fail@plt+0x221b0>
   34608:	add	sl, r6, #168	; 0xa8
   3460c:	mov	r1, r4
   34610:	mov	r2, r5
   34614:	mov	r0, sl
   34618:	bl	124e0 <memcpy@plt>
   3461c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   34620:	strb	r7, [sl, r5]
   34624:	str	r5, [r6, #52]	; 0x34
   34628:	mov	r0, #196608	; 0x30000
   3462c:	ldr	r1, [sp, #44]	; 0x2c
   34630:	str	r2, [r6, #44]	; 0x2c
   34634:	cmp	r5, r1
   34638:	ldr	r4, [r2, #24]
   3463c:	str	r7, [r6, #12]
   34640:	str	r7, [r6, #16]
   34644:	str	r7, [r6, #20]
   34648:	str	r0, [r6, #58]	; 0x3a
   3464c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   34650:	str	r4, [r6, #28]
   34654:	str	r7, [r6, #32]
   34658:	add	r7, r5, r0
   3465c:	bcs	34670 <__assert_fail@plt+0x21bc0>
   34660:	mov	r5, r2
   34664:	cmp	r7, r0
   34668:	bcs	346e8 <__assert_fail@plt+0x21c38>
   3466c:	b	34b40 <__assert_fail@plt+0x22090>
   34670:	ldr	r1, [r2, #36]	; 0x24
   34674:	movw	r0, #257	; 0x101
   34678:	mov	r5, r2
   3467c:	add	r0, r7, r0
   34680:	adds	r1, r0, r1
   34684:	bcs	34c2c <__assert_fail@plt+0x2217c>
   34688:	mov	r0, r4
   3468c:	str	r1, [r5, #36]	; 0x24
   34690:	bl	36110 <__assert_fail@plt+0x23660>
   34694:	cmp	r0, #0
   34698:	beq	34c4c <__assert_fail@plt+0x2219c>
   3469c:	cmp	r0, r4
   346a0:	str	r0, [r5, #24]
   346a4:	beq	346cc <__assert_fail@plt+0x21c1c>
   346a8:	ldrb	r1, [r5, #48]	; 0x30
   346ac:	ldr	r2, [fp, #-40]	; 0xffffffd8
   346b0:	tst	r1, #4
   346b4:	ldr	r1, [sp, #40]	; 0x28
   346b8:	addne	r1, r0, r2
   346bc:	mov	r0, #1
   346c0:	str	r1, [sp, #40]	; 0x28
   346c4:	str	r0, [sp, #16]
   346c8:	b	346d0 <__assert_fail@plt+0x21c20>
   346cc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   346d0:	ldr	r0, [r5, #36]	; 0x24
   346d4:	sub	r0, r0, r2
   346d8:	str	r0, [sp, #44]	; 0x2c
   346dc:	mov	r0, r2
   346e0:	cmp	r7, r0
   346e4:	bcc	34b40 <__assert_fail@plt+0x22090>
   346e8:	ldr	r0, [sp, #24]
   346ec:	add	r4, r6, #112	; 0x70
   346f0:	str	r0, [r6, #48]	; 0x30
   346f4:	ldr	r0, [r5]
   346f8:	str	r7, [r6, #40]	; 0x28
   346fc:	str	r0, [r6, #4]
   34700:	ldrd	r0, [r8]
   34704:	strd	r0, [r4, #48]	; 0x30
   34708:	ldrb	r0, [r5, #48]	; 0x30
   3470c:	tst	r0, #4
   34710:	bne	3471c <__assert_fail@plt+0x21c6c>
   34714:	str	sl, [r6, #24]
   34718:	b	34738 <__assert_fail@plt+0x21c88>
   3471c:	ldr	r0, [r6, #28]
   34720:	ldr	r1, [r6, #52]	; 0x34
   34724:	str	r0, [r6, #24]
   34728:	ldr	r0, [sp, #40]	; 0x28
   3472c:	add	r2, r1, #1
   34730:	mov	r1, sl
   34734:	bl	12474 <memmove@plt>
   34738:	ldr	r0, [r5, #44]	; 0x2c
   3473c:	ldr	r2, [r5, #48]	; 0x30
   34740:	ldr	sl, [sp, #28]
   34744:	mov	r7, #0
   34748:	cmp	r0, #0
   3474c:	beq	347f4 <__assert_fail@plt+0x21d44>
   34750:	ands	r0, r2, #1024	; 0x400
   34754:	bne	347f4 <__assert_fail@plt+0x21d44>
   34758:	mov	r0, r5
   3475c:	mov	r1, r6
   34760:	mov	r2, #0
   34764:	bl	33090 <__assert_fail@plt+0x205e0>
   34768:	strh	r0, [r6, #56]	; 0x38
   3476c:	ldr	r4, [fp, #-36]	; 0xffffffdc
   34770:	cmp	r9, #0
   34774:	str	r7, [r6, #8]
   34778:	beq	34874 <__assert_fail@plt+0x21dc4>
   3477c:	ldr	r0, [sp, #48]	; 0x30
   34780:	str	r6, [r0, #8]
   34784:	movw	r0, #10000	; 0x2710
   34788:	cmp	r4, r0
   3478c:	bne	34884 <__assert_fail@plt+0x21dd4>
   34790:	ldr	r0, [sp, #20]
   34794:	ldr	r0, [r0]
   34798:	cmp	r0, #0
   3479c:	bne	34884 <__assert_fail@plt+0x21dd4>
   347a0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   347a4:	mov	r0, sl
   347a8:	bl	35078 <__assert_fail@plt+0x225c8>
   347ac:	mov	r1, #0
   347b0:	str	r1, [sp, #8]
   347b4:	movw	r1, #19778	; 0x4d42
   347b8:	movt	r1, #65363	; 0xff53
   347bc:	cmp	r0, r1
   347c0:	movwne	r1, #26985	; 0x6969
   347c4:	cmpne	r0, r1
   347c8:	beq	34884 <__assert_fail@plt+0x21dd4>
   347cc:	movw	r1, #6548	; 0x1994
   347d0:	movt	r1, #258	; 0x102
   347d4:	cmp	r0, r1
   347d8:	movne	r0, #1
   347dc:	strne	r0, [sp, #8]
   347e0:	ldr	r0, [sp, #32]
   347e4:	add	r4, r4, #1
   347e8:	cmp	r0, r4
   347ec:	bhi	34894 <__assert_fail@plt+0x21de4>
   347f0:	b	348a4 <__assert_fail@plt+0x21df4>
   347f4:	ldrb	r3, [r8, #18]
   347f8:	mov	r0, #0
   347fc:	tst	r2, #8
   34800:	mov	r1, #0
   34804:	beq	34828 <__assert_fail@plt+0x21d78>
   34808:	orr	r1, r3, #4
   3480c:	cmp	r1, #4
   34810:	mov	r1, #0
   34814:	beq	34828 <__assert_fail@plt+0x21d78>
   34818:	eor	r1, r3, #10
   3481c:	and	r2, r2, #16
   34820:	orrs	r1, r2, r1
   34824:	movwne	r1, #1
   34828:	mov	r2, #11
   3482c:	strh	r2, [r6, #56]	; 0x38
   34830:	sub	r2, r3, #1
   34834:	uxtb	r3, r2
   34838:	cmp	r3, #11
   3483c:	bhi	34850 <__assert_fail@plt+0x21da0>
   34840:	sxtb	r0, r2
   34844:	movw	r2, #11916	; 0x2e8c
   34848:	movt	r2, #5
   3484c:	ldr	r0, [r2, r0, lsl #2]
   34850:	cmp	r1, #0
   34854:	str	r0, [r6, #80]	; 0x50
   34858:	mov	r0, #2
   3485c:	movwne	r0, #1
   34860:	stm	r4, {r0, r7}
   34864:	ldr	r4, [fp, #-36]	; 0xffffffdc
   34868:	cmp	r9, #0
   3486c:	str	r7, [r6, #8]
   34870:	bne	3477c <__assert_fail@plt+0x21ccc>
   34874:	mov	r9, r6
   34878:	movw	r0, #10000	; 0x2710
   3487c:	cmp	r4, r0
   34880:	beq	34790 <__assert_fail@plt+0x21ce0>
   34884:	ldr	r0, [sp, #32]
   34888:	add	r4, r4, #1
   3488c:	cmp	r0, r4
   34890:	bls	348a4 <__assert_fail@plt+0x21df4>
   34894:	str	r6, [sp, #48]	; 0x30
   34898:	ldr	r6, [sl, #12]
   3489c:	cmp	r6, #0
   348a0:	bne	34588 <__assert_fail@plt+0x21ad8>
   348a4:	ldr	r0, [sp, #16]
   348a8:	ldr	r7, [sp]
   348ac:	ldr	r6, [sp, #8]
   348b0:	tst	r0, #1
   348b4:	beq	349d0 <__assert_fail@plt+0x21f20>
   348b8:	ldr	r1, [r5, #4]
   348bc:	ldr	r0, [r5, #24]
   348c0:	cmp	r1, #0
   348c4:	bne	348dc <__assert_fail@plt+0x21e2c>
   348c8:	b	34918 <__assert_fail@plt+0x21e68>
   348cc:	str	r0, [r1, #28]
   348d0:	ldr	r1, [r1, #8]
   348d4:	cmp	r1, #0
   348d8:	beq	34918 <__assert_fail@plt+0x21e68>
   348dc:	ldr	r2, [r1, #24]
   348e0:	add	r3, r1, #168	; 0xa8
   348e4:	cmp	r2, r3
   348e8:	beq	348cc <__assert_fail@plt+0x21e1c>
   348ec:	ldr	r3, [r1, #28]
   348f0:	sub	r2, r2, r3
   348f4:	add	r2, r0, r2
   348f8:	str	r2, [r1, #24]
   348fc:	b	348cc <__assert_fail@plt+0x21e1c>
   34900:	mov	r4, #0
   34904:	mov	r6, #0
   34908:	ldrb	r0, [r5, #48]	; 0x30
   3490c:	tst	r0, #4
   34910:	bne	349dc <__assert_fail@plt+0x21f2c>
   34914:	b	34a04 <__assert_fail@plt+0x21f54>
   34918:	ldr	r1, [r9, #48]	; 0x30
   3491c:	cmp	r1, #0
   34920:	bmi	349d0 <__assert_fail@plt+0x21f20>
   34924:	mov	r1, r9
   34928:	ldr	r2, [r1, #24]
   3492c:	add	r3, r1, #168	; 0xa8
   34930:	cmp	r2, r3
   34934:	bne	34968 <__assert_fail@plt+0x21eb8>
   34938:	str	r0, [r1, #28]
   3493c:	ldr	r2, [r1, #8]
   34940:	cmp	r2, #0
   34944:	ldreq	r2, [r1, #4]
   34948:	ldr	r1, [r2, #48]	; 0x30
   3494c:	cmn	r1, #1
   34950:	mov	r1, r2
   34954:	ble	349d0 <__assert_fail@plt+0x21f20>
   34958:	ldr	r2, [r1, #24]
   3495c:	add	r3, r1, #168	; 0xa8
   34960:	cmp	r2, r3
   34964:	beq	34938 <__assert_fail@plt+0x21e88>
   34968:	ldr	r3, [r1, #28]
   3496c:	sub	r2, r2, r3
   34970:	add	r2, r0, r2
   34974:	str	r2, [r1, #24]
   34978:	b	34938 <__assert_fail@plt+0x21e88>
   3497c:	ldr	r0, [sp, #36]	; 0x24
   34980:	ldr	r0, [r0]
   34984:	cmp	r0, #0
   34988:	beq	349a4 <__assert_fail@plt+0x21ef4>
   3498c:	str	r0, [sl, #32]
   34990:	ldr	r0, [sp, #12]
   34994:	orrs	r0, r0, r4
   34998:	mov	r0, #4
   3499c:	movwne	r0, #7
   349a0:	strh	r0, [sl, #56]	; 0x38
   349a4:	ldr	r0, [sl, #12]
   349a8:	ldr	r6, [sp, #8]
   349ac:	cmp	r0, #0
   349b0:	beq	349c0 <__assert_fail@plt+0x21f10>
   349b4:	bl	12a80 <closedir@plt>
   349b8:	mov	r0, #0
   349bc:	str	r0, [sl, #12]
   349c0:	ldr	r0, [sp, #16]
   349c4:	ldr	r7, [sp]
   349c8:	tst	r0, #1
   349cc:	bne	348b8 <__assert_fail@plt+0x21e08>
   349d0:	ldrb	r0, [r5, #48]	; 0x30
   349d4:	tst	r0, #4
   349d8:	beq	34a04 <__assert_fail@plt+0x21f54>
   349dc:	ldr	r2, [sp, #40]	; 0x28
   349e0:	ldr	r0, [r5, #36]	; 0x24
   349e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   349e8:	cmp	r3, r0
   349ec:	sub	r1, r2, #1
   349f0:	mov	r0, #0
   349f4:	moveq	r2, r1
   349f8:	cmp	r4, #0
   349fc:	moveq	r2, r1
   34a00:	strb	r0, [r2]
   34a04:	ldr	r0, [sp, #12]
   34a08:	cmp	r0, #0
   34a0c:	movwne	r0, #1
   34a10:	orrs	r0, r0, r7
   34a14:	beq	34a7c <__assert_fail@plt+0x21fcc>
   34a18:	cmp	r4, #0
   34a1c:	bne	34abc <__assert_fail@plt+0x2200c>
   34a20:	ldr	r0, [sp, #4]
   34a24:	cmp	r0, #3
   34a28:	bne	34a40 <__assert_fail@plt+0x21f90>
   34a2c:	ldrh	r0, [sl, #56]	; 0x38
   34a30:	cmp	r0, #4
   34a34:	cmpne	r0, #7
   34a38:	movne	r0, #6
   34a3c:	strhne	r0, [sl, #56]	; 0x38
   34a40:	mov	r6, #0
   34a44:	cmp	r9, #0
   34a48:	bne	34a64 <__assert_fail@plt+0x21fb4>
   34a4c:	b	34bf4 <__assert_fail@plt+0x22144>
   34a50:	mov	r0, r9
   34a54:	bl	32910 <__assert_fail@plt+0x1fe60>
   34a58:	cmp	r4, #0
   34a5c:	mov	r9, r4
   34a60:	beq	34bf4 <__assert_fail@plt+0x22144>
   34a64:	ldrd	r4, [r9, #8]
   34a68:	cmp	r5, #0
   34a6c:	beq	34a50 <__assert_fail@plt+0x21fa0>
   34a70:	mov	r0, r5
   34a74:	bl	12a80 <closedir@plt>
   34a78:	b	34a50 <__assert_fail@plt+0x21fa0>
   34a7c:	ldr	r0, [sp, #4]
   34a80:	cmp	r0, #1
   34a84:	cmpne	r4, #0
   34a88:	bne	34abc <__assert_fail@plt+0x2200c>
   34a8c:	ldr	r0, [sl, #48]	; 0x30
   34a90:	cmp	r0, #0
   34a94:	beq	34bc4 <__assert_fail@plt+0x22114>
   34a98:	ldr	r1, [sl, #4]
   34a9c:	movw	r3, #11913	; 0x2e89
   34aa0:	mov	r0, r5
   34aa4:	mvn	r2, #0
   34aa8:	movt	r3, #5
   34aac:	bl	33e9c <__assert_fail@plt+0x213ec>
   34ab0:	cmp	r0, #0
   34ab4:	bne	34bd4 <__assert_fail@plt+0x22124>
   34ab8:	b	34a18 <__assert_fail@plt+0x21f68>
   34abc:	tst	r6, #1
   34ac0:	beq	34af8 <__assert_fail@plt+0x22048>
   34ac4:	movw	r0, #20544	; 0x5040
   34ac8:	mov	r1, r9
   34acc:	mov	r2, r4
   34ad0:	movt	r0, #3
   34ad4:	str	r0, [r5, #44]	; 0x2c
   34ad8:	mov	r0, r5
   34adc:	bl	33228 <__assert_fail@plt+0x20778>
   34ae0:	mov	r6, r0
   34ae4:	mov	r0, #0
   34ae8:	str	r0, [r5, #44]	; 0x2c
   34aec:	mov	r0, r6
   34af0:	sub	sp, fp, #28
   34af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34af8:	cmp	r4, #2
   34afc:	bcc	34b30 <__assert_fail@plt+0x22080>
   34b00:	ldr	r0, [sp, #20]
   34b04:	ldr	r0, [r0]
   34b08:	cmp	r0, #0
   34b0c:	beq	34b30 <__assert_fail@plt+0x22080>
   34b10:	mov	r0, r5
   34b14:	mov	r1, r9
   34b18:	mov	r2, r4
   34b1c:	bl	33228 <__assert_fail@plt+0x20778>
   34b20:	mov	r6, r0
   34b24:	mov	r0, r6
   34b28:	sub	sp, fp, #28
   34b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34b30:	mov	r6, r9
   34b34:	mov	r0, r6
   34b38:	sub	sp, fp, #28
   34b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34b40:	mov	r0, r6
   34b44:	bl	32910 <__assert_fail@plt+0x1fe60>
   34b48:	ldr	r7, [sp, #28]
   34b4c:	cmp	r9, #0
   34b50:	bne	34b6c <__assert_fail@plt+0x220bc>
   34b54:	b	34b84 <__assert_fail@plt+0x220d4>
   34b58:	mov	r0, r9
   34b5c:	bl	32910 <__assert_fail@plt+0x1fe60>
   34b60:	cmp	r4, #0
   34b64:	mov	r9, r4
   34b68:	beq	34b84 <__assert_fail@plt+0x220d4>
   34b6c:	ldrd	r4, [r9, #8]
   34b70:	cmp	r5, #0
   34b74:	beq	34b58 <__assert_fail@plt+0x220a8>
   34b78:	mov	r0, r5
   34b7c:	bl	12a80 <closedir@plt>
   34b80:	b	34b58 <__assert_fail@plt+0x220a8>
   34b84:	ldr	r0, [r7, #12]
   34b88:	bl	12a80 <closedir@plt>
   34b8c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   34b90:	mov	r0, #7
   34b94:	mov	r6, #0
   34b98:	strh	r0, [r7, #56]	; 0x38
   34b9c:	str	r6, [r7, #12]
   34ba0:	ldr	r0, [r1, #48]	; 0x30
   34ba4:	orr	r0, r0, #8192	; 0x2000
   34ba8:	str	r0, [r1, #48]	; 0x30
   34bac:	ldr	r1, [sp, #36]	; 0x24
   34bb0:	mov	r0, #36	; 0x24
   34bb4:	str	r0, [r1]
   34bb8:	mov	r0, r6
   34bbc:	sub	sp, fp, #28
   34bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34bc4:	mov	r0, r5
   34bc8:	bl	34ce4 <__assert_fail@plt+0x22234>
   34bcc:	cmp	r0, #0
   34bd0:	beq	34a18 <__assert_fail@plt+0x21f68>
   34bd4:	mov	r0, #7
   34bd8:	mov	r6, #0
   34bdc:	cmp	r9, #0
   34be0:	strh	r0, [sl, #56]	; 0x38
   34be4:	ldr	r0, [r5, #48]	; 0x30
   34be8:	orr	r0, r0, #8192	; 0x2000
   34bec:	str	r0, [r5, #48]	; 0x30
   34bf0:	bne	34c14 <__assert_fail@plt+0x22164>
   34bf4:	mov	r0, r6
   34bf8:	sub	sp, fp, #28
   34bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34c00:	mov	r0, r9
   34c04:	bl	32910 <__assert_fail@plt+0x1fe60>
   34c08:	cmp	r4, #0
   34c0c:	mov	r9, r4
   34c10:	beq	34bf4 <__assert_fail@plt+0x22144>
   34c14:	ldrd	r4, [r9, #8]
   34c18:	cmp	r5, #0
   34c1c:	beq	34c00 <__assert_fail@plt+0x22150>
   34c20:	mov	r0, r5
   34c24:	bl	12a80 <closedir@plt>
   34c28:	b	34c00 <__assert_fail@plt+0x22150>
   34c2c:	mov	r0, r4
   34c30:	bl	32910 <__assert_fail@plt+0x1fe60>
   34c34:	ldr	r1, [sp, #36]	; 0x24
   34c38:	mov	r0, #0
   34c3c:	str	r0, [r5, #24]
   34c40:	mov	r0, #36	; 0x24
   34c44:	str	r0, [r1]
   34c48:	b	34c5c <__assert_fail@plt+0x221ac>
   34c4c:	ldr	r0, [r5, #24]
   34c50:	bl	32910 <__assert_fail@plt+0x1fe60>
   34c54:	mov	r0, #0
   34c58:	str	r0, [r5, #24]
   34c5c:	ldr	sl, [sp, #28]
   34c60:	ldr	r0, [sp, #36]	; 0x24
   34c64:	ldr	r4, [r0]
   34c68:	mov	r0, r6
   34c6c:	bl	32910 <__assert_fail@plt+0x1fe60>
   34c70:	ldr	r5, [fp, #-44]	; 0xffffffd4
   34c74:	cmp	r9, #0
   34c78:	bne	34c94 <__assert_fail@plt+0x221e4>
   34c7c:	b	34cac <__assert_fail@plt+0x221fc>
   34c80:	mov	r0, r9
   34c84:	bl	32910 <__assert_fail@plt+0x1fe60>
   34c88:	cmp	r6, #0
   34c8c:	mov	r9, r6
   34c90:	beq	34cac <__assert_fail@plt+0x221fc>
   34c94:	ldrd	r6, [r9, #8]
   34c98:	cmp	r7, #0
   34c9c:	beq	34c80 <__assert_fail@plt+0x221d0>
   34ca0:	mov	r0, r7
   34ca4:	bl	12a80 <closedir@plt>
   34ca8:	b	34c80 <__assert_fail@plt+0x221d0>
   34cac:	ldr	r0, [sl, #12]
   34cb0:	bl	12a80 <closedir@plt>
   34cb4:	mov	r0, #7
   34cb8:	mov	r6, #0
   34cbc:	strh	r0, [sl, #56]	; 0x38
   34cc0:	str	r6, [sl, #12]
   34cc4:	ldr	r0, [r5, #48]	; 0x30
   34cc8:	orr	r0, r0, #8192	; 0x2000
   34ccc:	str	r0, [r5, #48]	; 0x30
   34cd0:	ldr	r0, [sp, #36]	; 0x24
   34cd4:	str	r4, [r0]
   34cd8:	mov	r0, r6
   34cdc:	sub	sp, fp, #28
   34ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34ce4:	push	{r4, r5, fp, lr}
   34ce8:	add	fp, sp, #8
   34cec:	mov	r5, r0
   34cf0:	ldr	r0, [r0, #48]	; 0x30
   34cf4:	mov	r4, #0
   34cf8:	tst	r0, #4
   34cfc:	bne	34d40 <__assert_fail@plt+0x22290>
   34d00:	tst	r0, #512	; 0x200
   34d04:	bne	34d20 <__assert_fail@plt+0x22270>
   34d08:	ldr	r0, [r5, #28]
   34d0c:	bl	129b4 <fchdir@plt>
   34d10:	cmp	r0, #0
   34d14:	mov	r4, r0
   34d18:	movwne	r4, #1
   34d1c:	b	34d40 <__assert_fail@plt+0x22290>
   34d20:	ldr	r1, [r5, #32]
   34d24:	add	r0, r5, #60	; 0x3c
   34d28:	bl	4c528 <__assert_fail@plt+0x39a78>
   34d2c:	cmp	r0, #0
   34d30:	bmi	34d38 <__assert_fail@plt+0x22288>
   34d34:	bl	12a68 <close@plt>
   34d38:	mvn	r0, #99	; 0x63
   34d3c:	str	r0, [r5, #32]
   34d40:	add	r5, r5, #60	; 0x3c
   34d44:	mov	r0, r5
   34d48:	bl	4c520 <__assert_fail@plt+0x39a70>
   34d4c:	cmp	r0, #0
   34d50:	bne	34d78 <__assert_fail@plt+0x222c8>
   34d54:	mov	r0, r5
   34d58:	bl	4c574 <__assert_fail@plt+0x39ac4>
   34d5c:	cmp	r0, #0
   34d60:	bmi	34d44 <__assert_fail@plt+0x22294>
   34d64:	bl	12a68 <close@plt>
   34d68:	mov	r0, r5
   34d6c:	bl	4c520 <__assert_fail@plt+0x39a70>
   34d70:	cmp	r0, #0
   34d74:	beq	34d54 <__assert_fail@plt+0x222a4>
   34d78:	mov	r0, r4
   34d7c:	pop	{r4, r5, fp, pc}
   34d80:	push	{fp, lr}
   34d84:	mov	fp, sp
   34d88:	cmp	r2, #5
   34d8c:	bcc	34da4 <__assert_fail@plt+0x222f4>
   34d90:	bl	12804 <__errno_location@plt>
   34d94:	mov	r1, #22
   34d98:	str	r1, [r0]
   34d9c:	mov	r0, #1
   34da0:	pop	{fp, pc}
   34da4:	mov	r0, #0
   34da8:	strh	r2, [r1, #60]	; 0x3c
   34dac:	pop	{fp, pc}
   34db0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34db4:	add	fp, sp, #28
   34db8:	sub	sp, sp, #4
   34dbc:	mov	r9, r0
   34dc0:	mvn	r0, #4096	; 0x1000
   34dc4:	tst	r1, r0
   34dc8:	beq	34de8 <__assert_fail@plt+0x22338>
   34dcc:	bl	12804 <__errno_location@plt>
   34dd0:	mov	r1, #22
   34dd4:	mov	r5, #0
   34dd8:	str	r1, [r0]
   34ddc:	mov	r0, r5
   34de0:	sub	sp, fp, #28
   34de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34de8:	ldr	r8, [r9]
   34dec:	mov	r7, r1
   34df0:	bl	12804 <__errno_location@plt>
   34df4:	mov	r5, #0
   34df8:	mov	sl, r0
   34dfc:	str	r5, [r0]
   34e00:	ldrb	r0, [r9, #49]	; 0x31
   34e04:	tst	r0, #32
   34e08:	bne	34e20 <__assert_fail@plt+0x22370>
   34e0c:	ldrh	r0, [r8, #56]	; 0x38
   34e10:	cmp	r0, #1
   34e14:	beq	34e2c <__assert_fail@plt+0x2237c>
   34e18:	cmp	r0, #9
   34e1c:	ldreq	r5, [r8, #8]
   34e20:	mov	r0, r5
   34e24:	sub	sp, fp, #28
   34e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34e2c:	ldr	r6, [r9, #4]
   34e30:	cmp	r6, #0
   34e34:	bne	34e50 <__assert_fail@plt+0x223a0>
   34e38:	b	34e6c <__assert_fail@plt+0x223bc>
   34e3c:	mov	r0, r6
   34e40:	bl	32910 <__assert_fail@plt+0x1fe60>
   34e44:	cmp	r4, #0
   34e48:	mov	r6, r4
   34e4c:	beq	34e6c <__assert_fail@plt+0x223bc>
   34e50:	ldr	r1, [r6, #12]
   34e54:	ldr	r4, [r6, #8]
   34e58:	cmp	r1, #0
   34e5c:	beq	34e3c <__assert_fail@plt+0x2238c>
   34e60:	mov	r0, r1
   34e64:	bl	12a80 <closedir@plt>
   34e68:	b	34e3c <__assert_fail@plt+0x2238c>
   34e6c:	mov	r4, #1
   34e70:	cmp	r7, #4096	; 0x1000
   34e74:	bne	34e88 <__assert_fail@plt+0x223d8>
   34e78:	ldr	r0, [r9, #48]	; 0x30
   34e7c:	mov	r4, #2
   34e80:	orr	r0, r0, #4096	; 0x1000
   34e84:	str	r0, [r9, #48]	; 0x30
   34e88:	ldr	r0, [r8, #48]	; 0x30
   34e8c:	cmp	r0, #0
   34e90:	bne	34ee8 <__assert_fail@plt+0x22438>
   34e94:	ldr	r0, [r8, #24]
   34e98:	ldrb	r0, [r0]
   34e9c:	cmp	r0, #47	; 0x2f
   34ea0:	beq	34ee8 <__assert_fail@plt+0x22438>
   34ea4:	ldr	r0, [r9, #48]	; 0x30
   34ea8:	tst	r0, #4
   34eac:	bne	34ee8 <__assert_fail@plt+0x22438>
   34eb0:	mov	r1, #32768	; 0x8000
   34eb4:	tst	r0, #512	; 0x200
   34eb8:	and	r1, r1, r0, lsl #11
   34ebc:	orr	r1, r1, #18688	; 0x4900
   34ec0:	orr	r2, r1, #524288	; 0x80000
   34ec4:	bne	34f08 <__assert_fail@plt+0x22458>
   34ec8:	movw	r0, #57732	; 0xe184
   34ecc:	mov	r1, r2
   34ed0:	movt	r0, #4
   34ed4:	bl	23d34 <__assert_fail@plt+0x11284>
   34ed8:	mov	r8, r0
   34edc:	cmn	r0, #1
   34ee0:	bgt	34f24 <__assert_fail@plt+0x22474>
   34ee4:	b	34f6c <__assert_fail@plt+0x224bc>
   34ee8:	mov	r0, r9
   34eec:	mov	r1, r4
   34ef0:	bl	3414c <__assert_fail@plt+0x2169c>
   34ef4:	mov	r5, r0
   34ef8:	str	r0, [r9, #4]
   34efc:	mov	r0, r5
   34f00:	sub	sp, fp, #28
   34f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34f08:	ldr	r0, [r9, #32]
   34f0c:	movw	r1, #57732	; 0xe184
   34f10:	movt	r1, #4
   34f14:	bl	2821c <__assert_fail@plt+0x1576c>
   34f18:	mov	r8, r0
   34f1c:	cmn	r0, #1
   34f20:	ble	34f6c <__assert_fail@plt+0x224bc>
   34f24:	mov	r0, r9
   34f28:	mov	r1, r4
   34f2c:	bl	3414c <__assert_fail@plt+0x2169c>
   34f30:	str	r0, [r9, #4]
   34f34:	ldrb	r0, [r9, #49]	; 0x31
   34f38:	tst	r0, #2
   34f3c:	bne	34f80 <__assert_fail@plt+0x224d0>
   34f40:	mov	r0, r8
   34f44:	bl	129b4 <fchdir@plt>
   34f48:	cmp	r0, #0
   34f4c:	beq	34fbc <__assert_fail@plt+0x2250c>
   34f50:	ldr	r4, [sl]
   34f54:	mov	r0, r8
   34f58:	bl	12a68 <close@plt>
   34f5c:	str	r4, [sl]
   34f60:	mov	r0, r5
   34f64:	sub	sp, fp, #28
   34f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34f6c:	mov	r5, #0
   34f70:	str	r5, [r9, #4]
   34f74:	mov	r0, r5
   34f78:	sub	sp, fp, #28
   34f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34f80:	ldr	r1, [r9, #32]
   34f84:	cmp	r1, r8
   34f88:	bne	34f94 <__assert_fail@plt+0x224e4>
   34f8c:	cmn	r1, #100	; 0x64
   34f90:	bne	34fd4 <__assert_fail@plt+0x22524>
   34f94:	add	r0, r9, #60	; 0x3c
   34f98:	bl	4c528 <__assert_fail@plt+0x39a78>
   34f9c:	cmp	r0, #0
   34fa0:	bmi	34fa8 <__assert_fail@plt+0x224f8>
   34fa4:	bl	12a68 <close@plt>
   34fa8:	str	r8, [r9, #32]
   34fac:	ldr	r5, [r9, #4]
   34fb0:	mov	r0, r5
   34fb4:	sub	sp, fp, #28
   34fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34fbc:	mov	r0, r8
   34fc0:	bl	12a68 <close@plt>
   34fc4:	ldr	r5, [r9, #4]
   34fc8:	mov	r0, r5
   34fcc:	sub	sp, fp, #28
   34fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34fd4:	bl	12a5c <abort@plt>
   34fd8:	push	{fp, lr}
   34fdc:	mov	fp, sp
   34fe0:	mov	r2, r1
   34fe4:	ldrd	r0, [r0, #8]
   34fe8:	mov	r3, #0
   34fec:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   34ff0:	mov	r0, r2
   34ff4:	pop	{fp, pc}
   34ff8:	push	{r4, r5, fp, lr}
   34ffc:	add	fp, sp, #8
   35000:	ldrd	r2, [r1, #8]
   35004:	ldrd	r4, [r0, #8]
   35008:	eor	r3, r5, r3
   3500c:	eor	r2, r4, r2
   35010:	orrs	r2, r2, r3
   35014:	mov	r2, #0
   35018:	bne	35038 <__assert_fail@plt+0x22588>
   3501c:	ldrd	r2, [r1]
   35020:	ldrd	r0, [r0]
   35024:	eor	r1, r1, r3
   35028:	eor	r0, r0, r2
   3502c:	orr	r0, r0, r1
   35030:	clz	r0, r0
   35034:	lsr	r2, r0, #5
   35038:	mov	r0, r2
   3503c:	pop	{r4, r5, fp, pc}
   35040:	push	{r4, r5, fp, lr}
   35044:	add	fp, sp, #8
   35048:	ldr	r0, [r0]
   3504c:	ldrd	r2, [r0, #160]	; 0xa0
   35050:	ldr	r0, [r1]
   35054:	ldrd	r4, [r0, #160]	; 0xa0
   35058:	mov	r0, #0
   3505c:	subs	r1, r4, r2
   35060:	sbcs	r1, r5, r3
   35064:	movwcc	r0, #1
   35068:	subs	r1, r2, r4
   3506c:	sbcs	r1, r3, r5
   35070:	subcc	r0, r0, #1
   35074:	pop	{r4, r5, fp, pc}
   35078:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3507c:	add	fp, sp, #24
   35080:	sub	sp, sp, #96	; 0x60
   35084:	ldr	r7, [r0, #44]	; 0x2c
   35088:	mov	r4, r0
   3508c:	mov	r5, #0
   35090:	ldrb	r0, [r7, #49]	; 0x31
   35094:	tst	r0, #2
   35098:	beq	35148 <__assert_fail@plt+0x22698>
   3509c:	ldr	r6, [r7, #52]	; 0x34
   350a0:	mov	r9, r1
   350a4:	cmp	r6, #0
   350a8:	bne	350e8 <__assert_fail@plt+0x22638>
   350ac:	movw	r0, #10512	; 0x2910
   350b0:	movw	r2, #20916	; 0x51b4
   350b4:	movw	r3, #20948	; 0x51d4
   350b8:	mov	r1, #0
   350bc:	mov	r8, #0
   350c0:	movt	r0, #3
   350c4:	movt	r2, #3
   350c8:	movt	r3, #3
   350cc:	str	r0, [sp]
   350d0:	mov	r0, #13
   350d4:	bl	2446c <__assert_fail@plt+0x119bc>
   350d8:	mov	r6, r0
   350dc:	cmp	r0, #0
   350e0:	str	r0, [r7, #52]	; 0x34
   350e4:	beq	35128 <__assert_fail@plt+0x22678>
   350e8:	ldrd	r0, [r4, #64]	; 0x40
   350ec:	str	r1, [sp, #12]
   350f0:	str	r0, [sp, #8]
   350f4:	add	r1, sp, #8
   350f8:	mov	r0, r6
   350fc:	bl	24198 <__assert_fail@plt+0x116e8>
   35100:	cmp	r0, #0
   35104:	beq	35118 <__assert_fail@plt+0x22668>
   35108:	ldr	r5, [r0, #8]
   3510c:	mov	r0, r5
   35110:	sub	sp, fp, #24
   35114:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   35118:	mov	r8, #1
   3511c:	cmp	r9, #0
   35120:	bpl	35134 <__assert_fail@plt+0x22684>
   35124:	b	35148 <__assert_fail@plt+0x22698>
   35128:	mov	r6, #0
   3512c:	cmp	r9, #0
   35130:	bmi	35148 <__assert_fail@plt+0x22698>
   35134:	add	r1, sp, #8
   35138:	mov	r0, r9
   3513c:	bl	12378 <fstatfs64@plt>
   35140:	cmp	r0, #0
   35144:	beq	35154 <__assert_fail@plt+0x226a4>
   35148:	mov	r0, r5
   3514c:	sub	sp, fp, #24
   35150:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   35154:	cmp	r8, #0
   35158:	beq	351a4 <__assert_fail@plt+0x226f4>
   3515c:	mov	r0, #16
   35160:	bl	35350 <__assert_fail@plt+0x228a0>
   35164:	cmp	r0, #0
   35168:	beq	351a4 <__assert_fail@plt+0x226f4>
   3516c:	mov	r5, r0
   35170:	ldrd	r0, [r4, #64]	; 0x40
   35174:	ldr	r2, [sp, #8]
   35178:	stm	r5, {r0, r1, r2}
   3517c:	mov	r0, r6
   35180:	mov	r1, r5
   35184:	bl	250c8 <__assert_fail@plt+0x12618>
   35188:	cmp	r0, #0
   3518c:	beq	3519c <__assert_fail@plt+0x226ec>
   35190:	cmp	r0, r5
   35194:	beq	351a4 <__assert_fail@plt+0x226f4>
   35198:	bl	12a5c <abort@plt>
   3519c:	mov	r0, r5
   351a0:	bl	32910 <__assert_fail@plt+0x1fe60>
   351a4:	ldr	r5, [sp, #8]
   351a8:	mov	r0, r5
   351ac:	sub	sp, fp, #24
   351b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   351b4:	push	{fp, lr}
   351b8:	mov	fp, sp
   351bc:	mov	r2, r1
   351c0:	ldrd	r0, [r0]
   351c4:	mov	r3, #0
   351c8:	bl	4cd90 <__assert_fail@plt+0x3a2e0>
   351cc:	mov	r0, r2
   351d0:	pop	{fp, pc}
   351d4:	ldrd	r2, [r1]
   351d8:	ldrd	r0, [r0]
   351dc:	eor	r1, r1, r3
   351e0:	eor	r0, r0, r2
   351e4:	orr	r0, r0, r1
   351e8:	clz	r0, r0
   351ec:	lsr	r0, r0, #5
   351f0:	bx	lr
   351f4:	push	{r4, r5, fp, lr}
   351f8:	add	fp, sp, #8
   351fc:	mov	r4, r1
   35200:	bl	12798 <getfilecon@plt>
   35204:	cmp	r0, #10
   35208:	beq	35220 <__assert_fail@plt+0x22770>
   3520c:	cmp	r0, #0
   35210:	bne	35264 <__assert_fail@plt+0x227b4>
   35214:	bl	12804 <__errno_location@plt>
   35218:	mov	r1, #95	; 0x5f
   3521c:	b	3525c <__assert_fail@plt+0x227ac>
   35220:	ldr	r5, [r4]
   35224:	movw	r1, #11964	; 0x2ebc
   35228:	movt	r1, #5
   3522c:	mov	r0, r5
   35230:	bl	123fc <strcmp@plt>
   35234:	mov	r1, r0
   35238:	mov	r0, #10
   3523c:	cmp	r1, #0
   35240:	popne	{r4, r5, fp, pc}
   35244:	mov	r0, r5
   35248:	bl	129d8 <freecon@plt>
   3524c:	mov	r0, #0
   35250:	str	r0, [r4]
   35254:	bl	12804 <__errno_location@plt>
   35258:	mov	r1, #61	; 0x3d
   3525c:	str	r1, [r0]
   35260:	mvn	r0, #0
   35264:	pop	{r4, r5, fp, pc}
   35268:	push	{r4, r5, fp, lr}
   3526c:	add	fp, sp, #8
   35270:	mov	r4, r1
   35274:	bl	126e4 <lgetfilecon@plt>
   35278:	cmp	r0, #10
   3527c:	beq	35294 <__assert_fail@plt+0x227e4>
   35280:	cmp	r0, #0
   35284:	bne	352d8 <__assert_fail@plt+0x22828>
   35288:	bl	12804 <__errno_location@plt>
   3528c:	mov	r1, #95	; 0x5f
   35290:	b	352d0 <__assert_fail@plt+0x22820>
   35294:	ldr	r5, [r4]
   35298:	movw	r1, #11964	; 0x2ebc
   3529c:	movt	r1, #5
   352a0:	mov	r0, r5
   352a4:	bl	123fc <strcmp@plt>
   352a8:	mov	r1, r0
   352ac:	mov	r0, #10
   352b0:	cmp	r1, #0
   352b4:	popne	{r4, r5, fp, pc}
   352b8:	mov	r0, r5
   352bc:	bl	129d8 <freecon@plt>
   352c0:	mov	r0, #0
   352c4:	str	r0, [r4]
   352c8:	bl	12804 <__errno_location@plt>
   352cc:	mov	r1, #61	; 0x3d
   352d0:	str	r1, [r0]
   352d4:	mvn	r0, #0
   352d8:	pop	{r4, r5, fp, pc}
   352dc:	push	{r4, r5, fp, lr}
   352e0:	add	fp, sp, #8
   352e4:	mov	r4, r1
   352e8:	bl	125a0 <fgetfilecon@plt>
   352ec:	cmp	r0, #10
   352f0:	beq	35308 <__assert_fail@plt+0x22858>
   352f4:	cmp	r0, #0
   352f8:	bne	3534c <__assert_fail@plt+0x2289c>
   352fc:	bl	12804 <__errno_location@plt>
   35300:	mov	r1, #95	; 0x5f
   35304:	b	35344 <__assert_fail@plt+0x22894>
   35308:	ldr	r5, [r4]
   3530c:	movw	r1, #11964	; 0x2ebc
   35310:	movt	r1, #5
   35314:	mov	r0, r5
   35318:	bl	123fc <strcmp@plt>
   3531c:	mov	r1, r0
   35320:	mov	r0, #10
   35324:	cmp	r1, #0
   35328:	popne	{r4, r5, fp, pc}
   3532c:	mov	r0, r5
   35330:	bl	129d8 <freecon@plt>
   35334:	mov	r0, #0
   35338:	str	r0, [r4]
   3533c:	bl	12804 <__errno_location@plt>
   35340:	mov	r1, #61	; 0x3d
   35344:	str	r1, [r0]
   35348:	mvn	r0, #0
   3534c:	pop	{r4, r5, fp, pc}
   35350:	cmp	r0, #0
   35354:	movweq	r0, #1
   35358:	cmn	r0, #1
   3535c:	ble	35364 <__assert_fail@plt+0x228b4>
   35360:	b	126f0 <malloc@plt>
   35364:	push	{fp, lr}
   35368:	mov	fp, sp
   3536c:	bl	12804 <__errno_location@plt>
   35370:	mov	r1, #12
   35374:	str	r1, [r0]
   35378:	mov	r0, #0
   3537c:	pop	{fp, pc}
   35380:	push	{r4, r5, r6, r7, fp, lr}
   35384:	add	fp, sp, #16
   35388:	sub	sp, sp, #8
   3538c:	cmp	r0, #0
   35390:	add	r5, sp, #4
   35394:	mov	r7, r2
   35398:	mov	r4, r1
   3539c:	movne	r5, r0
   353a0:	mov	r0, r5
   353a4:	bl	12684 <mbrtowc@plt>
   353a8:	mov	r6, r0
   353ac:	cmp	r7, #0
   353b0:	beq	353d8 <__assert_fail@plt+0x22928>
   353b4:	cmn	r6, #2
   353b8:	bcc	353d8 <__assert_fail@plt+0x22928>
   353bc:	mov	r0, #0
   353c0:	bl	4c490 <__assert_fail@plt+0x399e0>
   353c4:	cmp	r0, #0
   353c8:	bne	353d8 <__assert_fail@plt+0x22928>
   353cc:	ldrb	r0, [r4]
   353d0:	mov	r6, #1
   353d4:	str	r0, [r5]
   353d8:	mov	r0, r6
   353dc:	sub	sp, fp, #16
   353e0:	pop	{r4, r5, r6, r7, fp, pc}
   353e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   353e8:	add	fp, sp, #28
   353ec:	sub	sp, sp, #36	; 0x24
   353f0:	movw	r0, #11974	; 0x2ec6
   353f4:	movw	r1, #5436	; 0x153c
   353f8:	movt	r0, #5
   353fc:	movt	r1, #5
   35400:	bl	129c0 <fopen64@plt>
   35404:	cmp	r0, #0
   35408:	beq	35bec <__assert_fail@plt+0x2313c>
   3540c:	mov	r3, r0
   35410:	mov	r0, #0
   35414:	add	r1, sp, #24
   35418:	mov	r2, #10
   3541c:	str	r0, [sp, #28]
   35420:	str	r0, [sp, #24]
   35424:	add	r0, sp, #28
   35428:	mov	r9, r3
   3542c:	bl	123cc <__getdelim@plt>
   35430:	cmn	r0, #1
   35434:	beq	35fc0 <__assert_fail@plt+0x23510>
   35438:	movw	r8, #11995	; 0x2edb
   3543c:	add	r0, sp, #32
   35440:	add	sl, sp, #12
   35444:	add	r6, sp, #20
   35448:	add	r7, sp, #16
   3544c:	add	r5, sp, #28
   35450:	add	r4, sp, #24
   35454:	str	r9, [sp, #4]
   35458:	movt	r8, #5
   3545c:	str	r0, [sp, #8]
   35460:	b	35494 <__assert_fail@plt+0x229e4>
   35464:	add	r6, sp, #20
   35468:	add	r7, sp, #16
   3546c:	add	r5, sp, #28
   35470:	add	r4, sp, #24
   35474:	mov	r3, r9
   35478:	mov	r0, r5
   3547c:	mov	r1, r4
   35480:	mov	r2, #10
   35484:	mov	r9, r3
   35488:	bl	123cc <__getdelim@plt>
   3548c:	cmn	r0, #1
   35490:	beq	35fc8 <__assert_fail@plt+0x23518>
   35494:	ldr	r0, [sp, #28]
   35498:	mov	r1, r8
   3549c:	mov	r2, r6
   354a0:	mov	r3, r7
   354a4:	str	sl, [sp]
   354a8:	bl	12954 <sscanf@plt>
   354ac:	orr	r0, r0, #1
   354b0:	cmp	r0, #3
   354b4:	bne	35474 <__assert_fail@plt+0x229c4>
   354b8:	ldr	r0, [sp, #12]
   354bc:	ldr	r1, [sp, #28]
   354c0:	add	r0, r1, r0
   354c4:	mov	r1, #32
   354c8:	mov	r5, r0
   354cc:	bl	127c8 <strchr@plt>
   354d0:	cmp	r0, #0
   354d4:	beq	35464 <__assert_fail@plt+0x229b4>
   354d8:	mov	r6, r0
   354dc:	mov	r4, #0
   354e0:	mov	r1, #32
   354e4:	strb	r4, [r6], #1
   354e8:	mov	r0, r6
   354ec:	bl	127c8 <strchr@plt>
   354f0:	cmp	r0, #0
   354f4:	beq	35464 <__assert_fail@plt+0x229b4>
   354f8:	movw	r1, #12012	; 0x2eec
   354fc:	strb	r4, [r0], #1
   35500:	movt	r1, #5
   35504:	bl	4a818 <__assert_fail@plt+0x37d68>
   35508:	cmp	r0, #0
   3550c:	beq	35464 <__assert_fail@plt+0x229b4>
   35510:	add	sl, r0, #3
   35514:	mov	r1, #32
   35518:	mov	r0, sl
   3551c:	bl	127c8 <strchr@plt>
   35520:	cmp	r0, #0
   35524:	beq	35a30 <__assert_fail@plt+0x22f80>
   35528:	mov	r9, r0
   3552c:	mov	r4, #0
   35530:	mov	r1, #32
   35534:	strb	r4, [r9], #1
   35538:	mov	r0, r9
   3553c:	bl	127c8 <strchr@plt>
   35540:	cmp	r0, #0
   35544:	beq	35a30 <__assert_fail@plt+0x22f80>
   35548:	strb	r4, [r0]
   3554c:	mov	r0, r9
   35550:	bl	127bc <strlen@plt>
   35554:	adds	r0, r0, #1
   35558:	mov	r8, r5
   3555c:	bcs	355fc <__assert_fail@plt+0x22b4c>
   35560:	mov	r2, #0
   35564:	mov	r1, r9
   35568:	ldrb	r3, [r9, r2]
   3556c:	add	r7, r2, #4
   35570:	cmp	r7, r0
   35574:	bcc	35598 <__assert_fail@plt+0x22ae8>
   35578:	add	r2, r2, #1
   3557c:	strb	r3, [r1], #1
   35580:	cmp	r2, r0
   35584:	bcs	355fc <__assert_fail@plt+0x22b4c>
   35588:	ldrb	r3, [r9, r2]
   3558c:	add	r7, r2, #4
   35590:	cmp	r7, r0
   35594:	bcs	35578 <__assert_fail@plt+0x22ac8>
   35598:	cmp	r3, #92	; 0x5c
   3559c:	bne	35578 <__assert_fail@plt+0x22ac8>
   355a0:	add	r7, r2, r9
   355a4:	ldrb	r5, [r7, #1]
   355a8:	and	r4, r5, #252	; 0xfc
   355ac:	cmp	r4, #48	; 0x30
   355b0:	bne	35578 <__assert_fail@plt+0x22ac8>
   355b4:	ldrb	r4, [r7, #2]
   355b8:	and	r7, r4, #248	; 0xf8
   355bc:	cmp	r7, #48	; 0x30
   355c0:	bne	35578 <__assert_fail@plt+0x22ac8>
   355c4:	add	ip, r2, #3
   355c8:	ldrb	lr, [r9, ip]
   355cc:	and	r7, lr, #248	; 0xf8
   355d0:	cmp	r7, #48	; 0x30
   355d4:	bne	35578 <__assert_fail@plt+0x22ac8>
   355d8:	lsl	r2, r5, #6
   355dc:	add	r2, r2, r4, lsl #3
   355e0:	add	r2, r2, lr
   355e4:	add	r3, r2, #80	; 0x50
   355e8:	mov	r2, ip
   355ec:	add	r2, r2, #1
   355f0:	strb	r3, [r1], #1
   355f4:	cmp	r2, r0
   355f8:	bcc	35588 <__assert_fail@plt+0x22ad8>
   355fc:	mov	r0, r6
   35600:	bl	127bc <strlen@plt>
   35604:	adds	r0, r0, #1
   35608:	bcs	356a8 <__assert_fail@plt+0x22bf8>
   3560c:	mov	r2, #0
   35610:	mov	r1, r6
   35614:	ldrb	r3, [r6, r2]
   35618:	add	r7, r2, #4
   3561c:	cmp	r7, r0
   35620:	bcc	35644 <__assert_fail@plt+0x22b94>
   35624:	add	r2, r2, #1
   35628:	strb	r3, [r1], #1
   3562c:	cmp	r2, r0
   35630:	bcs	356a8 <__assert_fail@plt+0x22bf8>
   35634:	ldrb	r3, [r6, r2]
   35638:	add	r7, r2, #4
   3563c:	cmp	r7, r0
   35640:	bcs	35624 <__assert_fail@plt+0x22b74>
   35644:	cmp	r3, #92	; 0x5c
   35648:	bne	35624 <__assert_fail@plt+0x22b74>
   3564c:	add	r7, r2, r6
   35650:	ldrb	r5, [r7, #1]
   35654:	and	r4, r5, #252	; 0xfc
   35658:	cmp	r4, #48	; 0x30
   3565c:	bne	35624 <__assert_fail@plt+0x22b74>
   35660:	ldrb	r4, [r7, #2]
   35664:	and	r7, r4, #248	; 0xf8
   35668:	cmp	r7, #48	; 0x30
   3566c:	bne	35624 <__assert_fail@plt+0x22b74>
   35670:	add	ip, r2, #3
   35674:	ldrb	lr, [r6, ip]
   35678:	and	r7, lr, #248	; 0xf8
   3567c:	cmp	r7, #48	; 0x30
   35680:	bne	35624 <__assert_fail@plt+0x22b74>
   35684:	lsl	r2, r5, #6
   35688:	add	r2, r2, r4, lsl #3
   3568c:	add	r2, r2, lr
   35690:	add	r3, r2, #80	; 0x50
   35694:	mov	r2, ip
   35698:	add	r2, r2, #1
   3569c:	strb	r3, [r1], #1
   356a0:	cmp	r2, r0
   356a4:	bcc	35634 <__assert_fail@plt+0x22b84>
   356a8:	mov	r0, r8
   356ac:	bl	127bc <strlen@plt>
   356b0:	adds	r0, r0, #1
   356b4:	bcs	35754 <__assert_fail@plt+0x22ca4>
   356b8:	mov	r2, #0
   356bc:	mov	r1, r8
   356c0:	ldrb	r3, [r8, r2]
   356c4:	add	r7, r2, #4
   356c8:	cmp	r7, r0
   356cc:	bcc	356f0 <__assert_fail@plt+0x22c40>
   356d0:	add	r2, r2, #1
   356d4:	strb	r3, [r1], #1
   356d8:	cmp	r2, r0
   356dc:	bcs	35754 <__assert_fail@plt+0x22ca4>
   356e0:	ldrb	r3, [r8, r2]
   356e4:	add	r7, r2, #4
   356e8:	cmp	r7, r0
   356ec:	bcs	356d0 <__assert_fail@plt+0x22c20>
   356f0:	cmp	r3, #92	; 0x5c
   356f4:	bne	356d0 <__assert_fail@plt+0x22c20>
   356f8:	add	r7, r2, r8
   356fc:	ldrb	r5, [r7, #1]
   35700:	and	r4, r5, #252	; 0xfc
   35704:	cmp	r4, #48	; 0x30
   35708:	bne	356d0 <__assert_fail@plt+0x22c20>
   3570c:	ldrb	r4, [r7, #2]
   35710:	and	r7, r4, #248	; 0xf8
   35714:	cmp	r7, #48	; 0x30
   35718:	bne	356d0 <__assert_fail@plt+0x22c20>
   3571c:	add	ip, r2, #3
   35720:	ldrb	lr, [r8, ip]
   35724:	and	r7, lr, #248	; 0xf8
   35728:	cmp	r7, #48	; 0x30
   3572c:	bne	356d0 <__assert_fail@plt+0x22c20>
   35730:	lsl	r2, r5, #6
   35734:	add	r2, r2, r4, lsl #3
   35738:	add	r2, r2, lr
   3573c:	add	r3, r2, #80	; 0x50
   35740:	mov	r2, ip
   35744:	add	r2, r2, #1
   35748:	strb	r3, [r1], #1
   3574c:	cmp	r2, r0
   35750:	bcc	356e0 <__assert_fail@plt+0x22c30>
   35754:	mov	r0, sl
   35758:	bl	127bc <strlen@plt>
   3575c:	adds	r0, r0, #1
   35760:	bcs	35800 <__assert_fail@plt+0x22d50>
   35764:	mov	r2, #0
   35768:	mov	r1, sl
   3576c:	ldrb	r3, [sl, r2]
   35770:	add	r7, r2, #4
   35774:	cmp	r7, r0
   35778:	bcc	3579c <__assert_fail@plt+0x22cec>
   3577c:	add	r2, r2, #1
   35780:	strb	r3, [r1], #1
   35784:	cmp	r2, r0
   35788:	bcs	35800 <__assert_fail@plt+0x22d50>
   3578c:	ldrb	r3, [sl, r2]
   35790:	add	r7, r2, #4
   35794:	cmp	r7, r0
   35798:	bcs	3577c <__assert_fail@plt+0x22ccc>
   3579c:	cmp	r3, #92	; 0x5c
   357a0:	bne	3577c <__assert_fail@plt+0x22ccc>
   357a4:	add	r7, r2, sl
   357a8:	ldrb	r5, [r7, #1]
   357ac:	and	r4, r5, #252	; 0xfc
   357b0:	cmp	r4, #48	; 0x30
   357b4:	bne	3577c <__assert_fail@plt+0x22ccc>
   357b8:	ldrb	r4, [r7, #2]
   357bc:	and	r7, r4, #248	; 0xf8
   357c0:	cmp	r7, #48	; 0x30
   357c4:	bne	3577c <__assert_fail@plt+0x22ccc>
   357c8:	add	ip, r2, #3
   357cc:	ldrb	lr, [sl, ip]
   357d0:	and	r7, lr, #248	; 0xf8
   357d4:	cmp	r7, #48	; 0x30
   357d8:	bne	3577c <__assert_fail@plt+0x22ccc>
   357dc:	lsl	r2, r5, #6
   357e0:	add	r2, r2, r4, lsl #3
   357e4:	add	r2, r2, lr
   357e8:	add	r3, r2, #80	; 0x50
   357ec:	mov	r2, ip
   357f0:	add	r2, r2, #1
   357f4:	strb	r3, [r1], #1
   357f8:	cmp	r2, r0
   357fc:	bcc	3578c <__assert_fail@plt+0x22cdc>
   35800:	mov	r0, #32
   35804:	bl	306e8 <__assert_fail@plt+0x1dc38>
   35808:	mov	r7, r0
   3580c:	mov	r0, r9
   35810:	bl	30bec <__assert_fail@plt+0x1e13c>
   35814:	str	r0, [r7]
   35818:	mov	r0, r6
   3581c:	bl	30bec <__assert_fail@plt+0x1e13c>
   35820:	str	r0, [r7, #4]
   35824:	mov	r0, r8
   35828:	bl	30bec <__assert_fail@plt+0x1e13c>
   3582c:	str	r0, [r7, #8]
   35830:	mov	r0, sl
   35834:	bl	30bec <__assert_fail@plt+0x1e13c>
   35838:	str	r0, [r7, #12]
   3583c:	mov	r6, r0
   35840:	ldr	r2, [sp, #20]
   35844:	ldrb	r0, [r7, #24]
   35848:	mov	r3, r2
   3584c:	orr	r4, r0, #4
   35850:	ldr	r0, [sp, #16]
   35854:	bfc	r3, #0, #12
   35858:	strb	r4, [r7, #24]
   3585c:	bic	r1, r0, #255	; 0xff
   35860:	uxtb	r0, r0
   35864:	orr	r3, r3, r1, lsr #20
   35868:	bfi	r0, r2, #8, #12
   3586c:	str	r3, [r7, #20]
   35870:	orr	r0, r0, r1, lsl #12
   35874:	movw	r1, #12016	; 0x2ef0
   35878:	movt	r1, #5
   3587c:	str	r0, [r7, #16]
   35880:	mov	r0, r6
   35884:	bl	123fc <strcmp@plt>
   35888:	cmp	r0, #0
   3588c:	mov	r8, #1
   35890:	mov	r0, #1
   35894:	beq	35a00 <__assert_fail@plt+0x22f50>
   35898:	movw	r1, #12023	; 0x2ef7
   3589c:	mov	r0, r6
   358a0:	movt	r1, #5
   358a4:	bl	123fc <strcmp@plt>
   358a8:	cmp	r0, #0
   358ac:	mov	r0, #1
   358b0:	beq	35a00 <__assert_fail@plt+0x22f50>
   358b4:	movw	r1, #12028	; 0x2efc
   358b8:	mov	r0, r6
   358bc:	movt	r1, #5
   358c0:	bl	123fc <strcmp@plt>
   358c4:	cmp	r0, #0
   358c8:	mov	r0, #1
   358cc:	beq	35a00 <__assert_fail@plt+0x22f50>
   358d0:	movw	r1, #12034	; 0x2f02
   358d4:	mov	r0, r6
   358d8:	movt	r1, #5
   358dc:	bl	123fc <strcmp@plt>
   358e0:	cmp	r0, #0
   358e4:	mov	r0, #1
   358e8:	beq	35a00 <__assert_fail@plt+0x22f50>
   358ec:	movw	r1, #12042	; 0x2f0a
   358f0:	mov	r0, r6
   358f4:	movt	r1, #5
   358f8:	bl	123fc <strcmp@plt>
   358fc:	cmp	r0, #0
   35900:	mov	r0, #1
   35904:	beq	35a00 <__assert_fail@plt+0x22f50>
   35908:	movw	r1, #12049	; 0x2f11
   3590c:	mov	r0, r6
   35910:	movt	r1, #5
   35914:	bl	123fc <strcmp@plt>
   35918:	cmp	r0, #0
   3591c:	mov	r0, #1
   35920:	beq	35a00 <__assert_fail@plt+0x22f50>
   35924:	movw	r1, #12057	; 0x2f19
   35928:	mov	r0, r6
   3592c:	movt	r1, #5
   35930:	bl	123fc <strcmp@plt>
   35934:	cmp	r0, #0
   35938:	mov	r0, #1
   3593c:	beq	35a00 <__assert_fail@plt+0x22f50>
   35940:	movw	r1, #12069	; 0x2f25
   35944:	mov	r0, r6
   35948:	movt	r1, #5
   3594c:	bl	123fc <strcmp@plt>
   35950:	cmp	r0, #0
   35954:	mov	r0, #1
   35958:	beq	35a00 <__assert_fail@plt+0x22f50>
   3595c:	movw	r1, #12076	; 0x2f2c
   35960:	mov	r0, r6
   35964:	movt	r1, #5
   35968:	bl	123fc <strcmp@plt>
   3596c:	cmp	r0, #0
   35970:	mov	r0, #1
   35974:	beq	35a00 <__assert_fail@plt+0x22f50>
   35978:	movw	r1, #12087	; 0x2f37
   3597c:	mov	r0, r6
   35980:	movt	r1, #5
   35984:	bl	123fc <strcmp@plt>
   35988:	cmp	r0, #0
   3598c:	mov	r0, #1
   35990:	beq	35a00 <__assert_fail@plt+0x22f50>
   35994:	movw	r1, #12093	; 0x2f3d
   35998:	mov	r0, r6
   3599c:	movt	r1, #5
   359a0:	bl	123fc <strcmp@plt>
   359a4:	cmp	r0, #0
   359a8:	mov	r0, #1
   359ac:	beq	35a00 <__assert_fail@plt+0x22f50>
   359b0:	movw	r1, #12099	; 0x2f43
   359b4:	mov	r0, r6
   359b8:	movt	r1, #5
   359bc:	bl	123fc <strcmp@plt>
   359c0:	cmp	r0, #0
   359c4:	mov	r0, #1
   359c8:	beq	35a00 <__assert_fail@plt+0x22f50>
   359cc:	movw	r1, #64341	; 0xfb55
   359d0:	mov	r0, r6
   359d4:	movt	r1, #4
   359d8:	bl	123fc <strcmp@plt>
   359dc:	cmp	r0, #0
   359e0:	mov	r0, #1
   359e4:	beq	35a00 <__assert_fail@plt+0x22f50>
   359e8:	movw	r1, #12106	; 0x2f4a
   359ec:	mov	r0, r6
   359f0:	movt	r1, #5
   359f4:	bl	123fc <strcmp@plt>
   359f8:	clz	r0, r0
   359fc:	lsr	r0, r0, #5
   35a00:	bic	r1, r4, #1
   35a04:	orr	r5, r1, r0
   35a08:	mov	r1, #58	; 0x3a
   35a0c:	strb	r5, [r7, #24]
   35a10:	ldr	r4, [r7]
   35a14:	mov	r0, r4
   35a18:	bl	127c8 <strchr@plt>
   35a1c:	ldr	r3, [sp, #4]
   35a20:	cmp	r0, #0
   35a24:	beq	35a48 <__assert_fail@plt+0x22f98>
   35a28:	add	r6, sp, #20
   35a2c:	b	35bb4 <__assert_fail@plt+0x23104>
   35a30:	ldr	r3, [sp, #4]
   35a34:	movw	r8, #11995	; 0x2edb
   35a38:	add	sl, sp, #12
   35a3c:	add	r6, sp, #20
   35a40:	movt	r8, #5
   35a44:	b	35bdc <__assert_fail@plt+0x2312c>
   35a48:	ldrb	r0, [r4]
   35a4c:	mov	r9, r3
   35a50:	cmp	r0, #47	; 0x2f
   35a54:	bne	35aac <__assert_fail@plt+0x22ffc>
   35a58:	ldrb	r0, [r4, #1]
   35a5c:	cmp	r0, #47	; 0x2f
   35a60:	bne	35aac <__assert_fail@plt+0x22ffc>
   35a64:	movw	r1, #12111	; 0x2f4f
   35a68:	mov	r0, r6
   35a6c:	movt	r1, #5
   35a70:	bl	123fc <strcmp@plt>
   35a74:	cmp	r0, #0
   35a78:	beq	35bac <__assert_fail@plt+0x230fc>
   35a7c:	movw	r1, #12117	; 0x2f55
   35a80:	mov	r0, r6
   35a84:	movt	r1, #5
   35a88:	bl	123fc <strcmp@plt>
   35a8c:	cmp	r0, #0
   35a90:	beq	35bac <__assert_fail@plt+0x230fc>
   35a94:	movw	r1, #12122	; 0x2f5a
   35a98:	mov	r0, r6
   35a9c:	movt	r1, #5
   35aa0:	bl	123fc <strcmp@plt>
   35aa4:	cmp	r0, #0
   35aa8:	beq	35bac <__assert_fail@plt+0x230fc>
   35aac:	movw	r1, #12127	; 0x2f5f
   35ab0:	mov	r0, r6
   35ab4:	movt	r1, #5
   35ab8:	bl	123fc <strcmp@plt>
   35abc:	cmp	r0, #0
   35ac0:	beq	35bac <__assert_fail@plt+0x230fc>
   35ac4:	movw	r1, #64300	; 0xfb2c
   35ac8:	mov	r0, r6
   35acc:	movt	r1, #4
   35ad0:	bl	123fc <strcmp@plt>
   35ad4:	cmp	r0, #0
   35ad8:	beq	35bac <__assert_fail@plt+0x230fc>
   35adc:	movw	r1, #12132	; 0x2f64
   35ae0:	mov	r0, r6
   35ae4:	movt	r1, #5
   35ae8:	bl	123fc <strcmp@plt>
   35aec:	cmp	r0, #0
   35af0:	beq	35bac <__assert_fail@plt+0x230fc>
   35af4:	movw	r1, #12137	; 0x2f69
   35af8:	mov	r0, r6
   35afc:	movt	r1, #5
   35b00:	bl	123fc <strcmp@plt>
   35b04:	cmp	r0, #0
   35b08:	beq	35bac <__assert_fail@plt+0x230fc>
   35b0c:	movw	r1, #12148	; 0x2f74
   35b10:	mov	r0, r6
   35b14:	movt	r1, #5
   35b18:	bl	123fc <strcmp@plt>
   35b1c:	cmp	r0, #0
   35b20:	beq	35bac <__assert_fail@plt+0x230fc>
   35b24:	movw	r1, #12154	; 0x2f7a
   35b28:	mov	r0, r6
   35b2c:	movt	r1, #5
   35b30:	bl	123fc <strcmp@plt>
   35b34:	cmp	r0, #0
   35b38:	beq	35bac <__assert_fail@plt+0x230fc>
   35b3c:	movw	r1, #12159	; 0x2f7f
   35b40:	mov	r0, r6
   35b44:	movt	r1, #5
   35b48:	bl	123fc <strcmp@plt>
   35b4c:	cmp	r0, #0
   35b50:	beq	35bac <__assert_fail@plt+0x230fc>
   35b54:	movw	r1, #12165	; 0x2f85
   35b58:	mov	r0, r6
   35b5c:	movt	r1, #5
   35b60:	bl	123fc <strcmp@plt>
   35b64:	cmp	r0, #0
   35b68:	beq	35bac <__assert_fail@plt+0x230fc>
   35b6c:	movw	r1, #12171	; 0x2f8b
   35b70:	mov	r0, r6
   35b74:	movt	r1, #5
   35b78:	bl	123fc <strcmp@plt>
   35b7c:	cmp	r0, #0
   35b80:	add	r6, sp, #20
   35b84:	mov	r3, r9
   35b88:	beq	35bb4 <__assert_fail@plt+0x23104>
   35b8c:	movw	r0, #12176	; 0x2f90
   35b90:	mov	r1, r4
   35b94:	movt	r0, #5
   35b98:	bl	123fc <strcmp@plt>
   35b9c:	clz	r0, r0
   35ba0:	mov	r3, r9
   35ba4:	lsr	r8, r0, #5
   35ba8:	b	35bb4 <__assert_fail@plt+0x23104>
   35bac:	add	r6, sp, #20
   35bb0:	mov	r3, r9
   35bb4:	and	r0, r5, #253	; 0xfd
   35bb8:	add	sl, sp, #12
   35bbc:	orr	r0, r0, r8, lsl #1
   35bc0:	movw	r8, #11995	; 0x2edb
   35bc4:	movt	r8, #5
   35bc8:	strb	r0, [r7, #24]
   35bcc:	ldr	r0, [sp, #8]
   35bd0:	str	r7, [r0]
   35bd4:	add	r0, r7, #28
   35bd8:	str	r0, [sp, #8]
   35bdc:	add	r7, sp, #16
   35be0:	add	r5, sp, #28
   35be4:	add	r4, sp, #24
   35be8:	b	35478 <__assert_fail@plt+0x229c8>
   35bec:	movw	r0, #12183	; 0x2f97
   35bf0:	movw	r1, #6016	; 0x1780
   35bf4:	movt	r0, #5
   35bf8:	movt	r1, #5
   35bfc:	bl	129f0 <setmntent@plt>
   35c00:	cmp	r0, #0
   35c04:	beq	36014 <__assert_fail@plt+0x23564>
   35c08:	mov	r8, r0
   35c0c:	bl	126a8 <getmntent@plt>
   35c10:	cmp	r0, #0
   35c14:	beq	36024 <__assert_fail@plt+0x23574>
   35c18:	mov	r5, r0
   35c1c:	add	sl, sp, #32
   35c20:	b	35c7c <__assert_fail@plt+0x231cc>
   35c24:	bic	r1, r4, #1
   35c28:	orr	r4, r1, r0
   35c2c:	mov	r1, #58	; 0x3a
   35c30:	strb	r4, [r9, #24]
   35c34:	ldr	r5, [r9]
   35c38:	mov	r0, r5
   35c3c:	bl	127c8 <strchr@plt>
   35c40:	cmp	r0, #0
   35c44:	beq	35e6c <__assert_fail@plt+0x233bc>
   35c48:	mvn	r0, #0
   35c4c:	str	r0, [r9, #16]
   35c50:	str	r0, [r9, #20]
   35c54:	and	r0, r4, #253	; 0xfd
   35c58:	orr	r0, r0, r6, lsl #1
   35c5c:	strb	r0, [r9, #24]
   35c60:	mov	r0, r8
   35c64:	str	r9, [sl]
   35c68:	add	sl, r9, #28
   35c6c:	bl	126a8 <getmntent@plt>
   35c70:	mov	r5, r0
   35c74:	cmp	r0, #0
   35c78:	beq	36028 <__assert_fail@plt+0x23578>
   35c7c:	movw	r1, #12193	; 0x2fa1
   35c80:	mov	r0, r5
   35c84:	movt	r1, #5
   35c88:	bl	12654 <hasmntopt@plt>
   35c8c:	str	r0, [sp, #8]
   35c90:	mov	r0, #32
   35c94:	bl	306e8 <__assert_fail@plt+0x1dc38>
   35c98:	mov	r9, r0
   35c9c:	ldr	r0, [r5]
   35ca0:	bl	30bec <__assert_fail@plt+0x1e13c>
   35ca4:	str	r0, [r9]
   35ca8:	ldr	r0, [r5, #4]
   35cac:	bl	30bec <__assert_fail@plt+0x1e13c>
   35cb0:	str	r0, [r9, #4]
   35cb4:	mov	r0, #0
   35cb8:	str	r0, [r9, #8]
   35cbc:	ldr	r0, [r5, #8]
   35cc0:	bl	30bec <__assert_fail@plt+0x1e13c>
   35cc4:	str	r0, [r9, #12]
   35cc8:	mov	r7, r0
   35ccc:	movw	r1, #12016	; 0x2ef0
   35cd0:	ldrb	r0, [r9, #24]
   35cd4:	movt	r1, #5
   35cd8:	orr	r4, r0, #4
   35cdc:	mov	r0, r7
   35ce0:	strb	r4, [r9, #24]
   35ce4:	bl	123fc <strcmp@plt>
   35ce8:	cmp	r0, #0
   35cec:	mov	r6, #1
   35cf0:	mov	r0, #1
   35cf4:	beq	35c24 <__assert_fail@plt+0x23174>
   35cf8:	movw	r1, #12023	; 0x2ef7
   35cfc:	mov	r0, r7
   35d00:	movt	r1, #5
   35d04:	bl	123fc <strcmp@plt>
   35d08:	cmp	r0, #0
   35d0c:	mov	r0, #1
   35d10:	beq	35c24 <__assert_fail@plt+0x23174>
   35d14:	movw	r1, #12028	; 0x2efc
   35d18:	mov	r0, r7
   35d1c:	movt	r1, #5
   35d20:	bl	123fc <strcmp@plt>
   35d24:	cmp	r0, #0
   35d28:	mov	r0, #1
   35d2c:	beq	35c24 <__assert_fail@plt+0x23174>
   35d30:	movw	r1, #12034	; 0x2f02
   35d34:	mov	r0, r7
   35d38:	movt	r1, #5
   35d3c:	bl	123fc <strcmp@plt>
   35d40:	cmp	r0, #0
   35d44:	mov	r0, #1
   35d48:	beq	35c24 <__assert_fail@plt+0x23174>
   35d4c:	movw	r1, #12042	; 0x2f0a
   35d50:	mov	r0, r7
   35d54:	movt	r1, #5
   35d58:	bl	123fc <strcmp@plt>
   35d5c:	cmp	r0, #0
   35d60:	mov	r0, #1
   35d64:	beq	35c24 <__assert_fail@plt+0x23174>
   35d68:	movw	r1, #12049	; 0x2f11
   35d6c:	mov	r0, r7
   35d70:	movt	r1, #5
   35d74:	bl	123fc <strcmp@plt>
   35d78:	cmp	r0, #0
   35d7c:	mov	r0, #1
   35d80:	beq	35c24 <__assert_fail@plt+0x23174>
   35d84:	movw	r1, #12057	; 0x2f19
   35d88:	mov	r0, r7
   35d8c:	movt	r1, #5
   35d90:	bl	123fc <strcmp@plt>
   35d94:	cmp	r0, #0
   35d98:	mov	r0, #1
   35d9c:	beq	35c24 <__assert_fail@plt+0x23174>
   35da0:	movw	r1, #12069	; 0x2f25
   35da4:	mov	r0, r7
   35da8:	movt	r1, #5
   35dac:	bl	123fc <strcmp@plt>
   35db0:	cmp	r0, #0
   35db4:	mov	r0, #1
   35db8:	beq	35c24 <__assert_fail@plt+0x23174>
   35dbc:	movw	r1, #12076	; 0x2f2c
   35dc0:	mov	r0, r7
   35dc4:	movt	r1, #5
   35dc8:	bl	123fc <strcmp@plt>
   35dcc:	cmp	r0, #0
   35dd0:	mov	r0, #1
   35dd4:	beq	35c24 <__assert_fail@plt+0x23174>
   35dd8:	movw	r1, #12087	; 0x2f37
   35ddc:	mov	r0, r7
   35de0:	movt	r1, #5
   35de4:	bl	123fc <strcmp@plt>
   35de8:	cmp	r0, #0
   35dec:	mov	r0, #1
   35df0:	beq	35c24 <__assert_fail@plt+0x23174>
   35df4:	movw	r1, #12093	; 0x2f3d
   35df8:	mov	r0, r7
   35dfc:	movt	r1, #5
   35e00:	bl	123fc <strcmp@plt>
   35e04:	cmp	r0, #0
   35e08:	mov	r0, #1
   35e0c:	beq	35c24 <__assert_fail@plt+0x23174>
   35e10:	movw	r1, #12099	; 0x2f43
   35e14:	mov	r0, r7
   35e18:	movt	r1, #5
   35e1c:	bl	123fc <strcmp@plt>
   35e20:	cmp	r0, #0
   35e24:	mov	r0, #1
   35e28:	beq	35c24 <__assert_fail@plt+0x23174>
   35e2c:	movw	r1, #64341	; 0xfb55
   35e30:	mov	r0, r7
   35e34:	movt	r1, #4
   35e38:	bl	123fc <strcmp@plt>
   35e3c:	cmp	r0, #0
   35e40:	mov	r0, #1
   35e44:	beq	35c24 <__assert_fail@plt+0x23174>
   35e48:	movw	r1, #12106	; 0x2f4a
   35e4c:	mov	r0, r7
   35e50:	movt	r1, #5
   35e54:	bl	123fc <strcmp@plt>
   35e58:	ldr	r1, [sp, #8]
   35e5c:	orr	r0, r1, r0
   35e60:	clz	r0, r0
   35e64:	lsr	r0, r0, #5
   35e68:	b	35c24 <__assert_fail@plt+0x23174>
   35e6c:	ldrb	r0, [r5]
   35e70:	cmp	r0, #47	; 0x2f
   35e74:	bne	35ecc <__assert_fail@plt+0x2341c>
   35e78:	ldrb	r0, [r5, #1]
   35e7c:	cmp	r0, #47	; 0x2f
   35e80:	bne	35ecc <__assert_fail@plt+0x2341c>
   35e84:	movw	r1, #12111	; 0x2f4f
   35e88:	mov	r0, r7
   35e8c:	movt	r1, #5
   35e90:	bl	123fc <strcmp@plt>
   35e94:	cmp	r0, #0
   35e98:	beq	35c48 <__assert_fail@plt+0x23198>
   35e9c:	movw	r1, #12117	; 0x2f55
   35ea0:	mov	r0, r7
   35ea4:	movt	r1, #5
   35ea8:	bl	123fc <strcmp@plt>
   35eac:	cmp	r0, #0
   35eb0:	beq	35c48 <__assert_fail@plt+0x23198>
   35eb4:	movw	r1, #12122	; 0x2f5a
   35eb8:	mov	r0, r7
   35ebc:	movt	r1, #5
   35ec0:	bl	123fc <strcmp@plt>
   35ec4:	cmp	r0, #0
   35ec8:	beq	35c48 <__assert_fail@plt+0x23198>
   35ecc:	movw	r1, #12127	; 0x2f5f
   35ed0:	mov	r0, r7
   35ed4:	movt	r1, #5
   35ed8:	bl	123fc <strcmp@plt>
   35edc:	cmp	r0, #0
   35ee0:	beq	35c48 <__assert_fail@plt+0x23198>
   35ee4:	movw	r1, #64300	; 0xfb2c
   35ee8:	mov	r0, r7
   35eec:	movt	r1, #4
   35ef0:	bl	123fc <strcmp@plt>
   35ef4:	cmp	r0, #0
   35ef8:	beq	35c48 <__assert_fail@plt+0x23198>
   35efc:	movw	r1, #12132	; 0x2f64
   35f00:	mov	r0, r7
   35f04:	movt	r1, #5
   35f08:	bl	123fc <strcmp@plt>
   35f0c:	cmp	r0, #0
   35f10:	beq	35c48 <__assert_fail@plt+0x23198>
   35f14:	movw	r1, #12137	; 0x2f69
   35f18:	mov	r0, r7
   35f1c:	movt	r1, #5
   35f20:	bl	123fc <strcmp@plt>
   35f24:	cmp	r0, #0
   35f28:	beq	35c48 <__assert_fail@plt+0x23198>
   35f2c:	movw	r1, #12148	; 0x2f74
   35f30:	mov	r0, r7
   35f34:	movt	r1, #5
   35f38:	bl	123fc <strcmp@plt>
   35f3c:	cmp	r0, #0
   35f40:	beq	35c48 <__assert_fail@plt+0x23198>
   35f44:	movw	r1, #12154	; 0x2f7a
   35f48:	mov	r0, r7
   35f4c:	movt	r1, #5
   35f50:	bl	123fc <strcmp@plt>
   35f54:	cmp	r0, #0
   35f58:	beq	35c48 <__assert_fail@plt+0x23198>
   35f5c:	movw	r1, #12159	; 0x2f7f
   35f60:	mov	r0, r7
   35f64:	movt	r1, #5
   35f68:	bl	123fc <strcmp@plt>
   35f6c:	cmp	r0, #0
   35f70:	beq	35c48 <__assert_fail@plt+0x23198>
   35f74:	movw	r1, #12165	; 0x2f85
   35f78:	mov	r0, r7
   35f7c:	movt	r1, #5
   35f80:	bl	123fc <strcmp@plt>
   35f84:	cmp	r0, #0
   35f88:	beq	35c48 <__assert_fail@plt+0x23198>
   35f8c:	movw	r1, #12171	; 0x2f8b
   35f90:	mov	r0, r7
   35f94:	movt	r1, #5
   35f98:	bl	123fc <strcmp@plt>
   35f9c:	cmp	r0, #0
   35fa0:	beq	35c48 <__assert_fail@plt+0x23198>
   35fa4:	movw	r0, #12176	; 0x2f90
   35fa8:	mov	r1, r5
   35fac:	movt	r0, #5
   35fb0:	bl	123fc <strcmp@plt>
   35fb4:	clz	r0, r0
   35fb8:	lsr	r6, r0, #5
   35fbc:	b	35c48 <__assert_fail@plt+0x23198>
   35fc0:	add	r0, sp, #32
   35fc4:	str	r0, [sp, #8]
   35fc8:	ldr	r0, [sp, #28]
   35fcc:	bl	32910 <__assert_fail@plt+0x1fe60>
   35fd0:	ldrb	r1, [r9]
   35fd4:	tst	r1, #32
   35fd8:	bne	35ff4 <__assert_fail@plt+0x23544>
   35fdc:	mov	r0, r9
   35fe0:	bl	128b8 <fclose@plt>
   35fe4:	ldr	sl, [sp, #8]
   35fe8:	cmn	r0, #1
   35fec:	bne	36038 <__assert_fail@plt+0x23588>
   35ff0:	b	36050 <__assert_fail@plt+0x235a0>
   35ff4:	bl	12804 <__errno_location@plt>
   35ff8:	ldr	r6, [r0]
   35ffc:	mov	r5, r0
   36000:	mov	r0, r9
   36004:	bl	128b8 <fclose@plt>
   36008:	ldr	sl, [sp, #8]
   3600c:	str	r6, [r5]
   36010:	b	36050 <__assert_fail@plt+0x235a0>
   36014:	mov	r4, #0
   36018:	mov	r0, r4
   3601c:	sub	sp, fp, #28
   36020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36024:	add	sl, sp, #32
   36028:	mov	r0, r8
   3602c:	bl	128dc <endmntent@plt>
   36030:	cmp	r0, #0
   36034:	beq	36050 <__assert_fail@plt+0x235a0>
   36038:	mov	r0, #0
   3603c:	str	r0, [sl]
   36040:	ldr	r4, [sp, #32]
   36044:	mov	r0, r4
   36048:	sub	sp, fp, #28
   3604c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36050:	bl	12804 <__errno_location@plt>
   36054:	mov	r4, #0
   36058:	ldr	r8, [r0]
   3605c:	mov	r5, r0
   36060:	str	r4, [sl]
   36064:	ldr	r6, [sp, #32]
   36068:	cmp	r6, #0
   3606c:	bne	36098 <__assert_fail@plt+0x235e8>
   36070:	str	r8, [r5]
   36074:	mov	r0, r4
   36078:	sub	sp, fp, #28
   3607c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36080:	mov	r0, r6
   36084:	bl	32910 <__assert_fail@plt+0x1fe60>
   36088:	cmp	r7, #0
   3608c:	mov	r6, r7
   36090:	str	r7, [sp, #32]
   36094:	beq	36070 <__assert_fail@plt+0x235c0>
   36098:	ldr	r0, [r6]
   3609c:	ldr	r7, [r6, #28]
   360a0:	bl	32910 <__assert_fail@plt+0x1fe60>
   360a4:	ldr	r0, [r6, #4]
   360a8:	bl	32910 <__assert_fail@plt+0x1fe60>
   360ac:	ldr	r0, [r6, #8]
   360b0:	bl	32910 <__assert_fail@plt+0x1fe60>
   360b4:	ldrb	r0, [r6, #24]
   360b8:	tst	r0, #4
   360bc:	beq	36080 <__assert_fail@plt+0x235d0>
   360c0:	ldr	r0, [r6, #12]
   360c4:	bl	32910 <__assert_fail@plt+0x1fe60>
   360c8:	b	36080 <__assert_fail@plt+0x235d0>
   360cc:	push	{r4, sl, fp, lr}
   360d0:	add	fp, sp, #8
   360d4:	mov	r4, r0
   360d8:	ldr	r0, [r0]
   360dc:	bl	32910 <__assert_fail@plt+0x1fe60>
   360e0:	ldr	r0, [r4, #4]
   360e4:	bl	32910 <__assert_fail@plt+0x1fe60>
   360e8:	ldr	r0, [r4, #8]
   360ec:	bl	32910 <__assert_fail@plt+0x1fe60>
   360f0:	ldrb	r0, [r4, #24]
   360f4:	tst	r0, #4
   360f8:	beq	36104 <__assert_fail@plt+0x23654>
   360fc:	ldr	r0, [r4, #12]
   36100:	bl	32910 <__assert_fail@plt+0x1fe60>
   36104:	mov	r0, r4
   36108:	pop	{r4, sl, fp, lr}
   3610c:	b	32910 <__assert_fail@plt+0x1fe60>
   36110:	push	{fp, lr}
   36114:	mov	fp, sp
   36118:	cmp	r0, #0
   3611c:	beq	36138 <__assert_fail@plt+0x23688>
   36120:	cmp	r1, #0
   36124:	beq	36144 <__assert_fail@plt+0x23694>
   36128:	cmn	r1, #1
   3612c:	ble	36150 <__assert_fail@plt+0x236a0>
   36130:	pop	{fp, lr}
   36134:	b	12594 <realloc@plt>
   36138:	mov	r0, r1
   3613c:	pop	{fp, lr}
   36140:	b	35350 <__assert_fail@plt+0x228a0>
   36144:	bl	32910 <__assert_fail@plt+0x1fe60>
   36148:	mov	r0, #0
   3614c:	pop	{fp, pc}
   36150:	bl	12804 <__errno_location@plt>
   36154:	mov	r1, #12
   36158:	str	r1, [r0]
   3615c:	mov	r0, #0
   36160:	pop	{fp, pc}
   36164:	cmp	r2, #0
   36168:	beq	36198 <__assert_fail@plt+0x236e8>
   3616c:	mvn	r3, #0
   36170:	udiv	r3, r3, r2
   36174:	cmp	r3, r1
   36178:	bcs	36198 <__assert_fail@plt+0x236e8>
   3617c:	push	{fp, lr}
   36180:	mov	fp, sp
   36184:	bl	12804 <__errno_location@plt>
   36188:	mov	r1, #12
   3618c:	str	r1, [r0]
   36190:	mov	r0, #0
   36194:	pop	{fp, pc}
   36198:	mul	r1, r2, r1
   3619c:	b	36110 <__assert_fail@plt+0x23660>
   361a0:	push	{fp, lr}
   361a4:	mov	fp, sp
   361a8:	mov	lr, r0
   361ac:	movw	r0, #20168	; 0x4ec8
   361b0:	mov	ip, r1
   361b4:	ldrb	r1, [r2, #28]
   361b8:	movt	r0, #6
   361bc:	ldr	r3, [r0]
   361c0:	mov	r0, #16
   361c4:	and	r1, r1, #111	; 0x6f
   361c8:	and	r0, r0, r3, lsr #21
   361cc:	orr	r0, r1, r0
   361d0:	mov	r1, lr
   361d4:	orr	r0, r0, #128	; 0x80
   361d8:	strb	r0, [r2, #28]
   361dc:	mov	r0, r2
   361e0:	mov	r2, ip
   361e4:	bl	36220 <__assert_fail@plt+0x23770>
   361e8:	cmp	r0, #0
   361ec:	beq	36218 <__assert_fail@plt+0x23768>
   361f0:	movw	r1, #12584	; 0x3128
   361f4:	mov	r2, #5
   361f8:	movt	r1, #5
   361fc:	ldr	r0, [r1, r0, lsl #2]
   36200:	movw	r1, #12200	; 0x2fa8
   36204:	movt	r1, #5
   36208:	add	r1, r1, r0
   3620c:	mov	r0, #0
   36210:	pop	{fp, lr}
   36214:	b	12564 <dcgettext@plt>
   36218:	mov	r0, #0
   3621c:	pop	{fp, pc}
   36220:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36224:	add	fp, sp, #28
   36228:	sub	sp, sp, #140	; 0x8c
   3622c:	mov	sl, r0
   36230:	mov	r0, #0
   36234:	mov	r9, r3
   36238:	mov	r7, r2
   3623c:	str	r1, [sp, #28]
   36240:	str	r0, [fp, #-52]	; 0xffffffcc
   36244:	str	r0, [sl, #24]
   36248:	str	r0, [sl, #8]
   3624c:	str	r3, [sl, #12]
   36250:	ldrb	r0, [sl, #28]
   36254:	and	r0, r0, #144	; 0x90
   36258:	strb	r0, [sl, #28]
   3625c:	ldr	r0, [sl, #4]
   36260:	ldr	r5, [sl]
   36264:	cmp	r0, #159	; 0x9f
   36268:	bls	36d84 <__assert_fail@plt+0x242d4>
   3626c:	mov	r0, #160	; 0xa0
   36270:	mov	r1, #0
   36274:	mov	r2, #160	; 0xa0
   36278:	str	r0, [sl, #8]
   3627c:	mov	r0, r5
   36280:	bl	12834 <memset@plt>
   36284:	mov	r0, #31
   36288:	str	r0, [r5, #64]	; 0x40
   3628c:	movw	r0, #43689	; 0xaaa9
   36290:	movt	r0, #2730	; 0xaaa
   36294:	cmp	r7, r0
   36298:	bhi	36698 <__assert_fail@plt+0x23be8>
   3629c:	add	r8, r7, #1
   362a0:	lsl	r0, r8, #3
   362a4:	str	r8, [r5, #4]
   362a8:	bl	35350 <__assert_fail@plt+0x228a0>
   362ac:	str	r0, [r5]
   362b0:	mov	r0, #1
   362b4:	mov	r6, r0
   362b8:	lsl	r0, r0, #1
   362bc:	cmp	r6, r7
   362c0:	bls	362b4 <__assert_fail@plt+0x23804>
   362c4:	mov	r0, #12
   362c8:	mov	r1, r6
   362cc:	bl	322c0 <__assert_fail@plt+0x1f810>
   362d0:	sub	r1, r6, #1
   362d4:	str	r1, [r5, #68]	; 0x44
   362d8:	str	r0, [r5, #32]
   362dc:	bl	12648 <__ctype_get_mb_cur_max@plt>
   362e0:	str	r0, [r5, #92]	; 0x5c
   362e4:	mov	r0, #14
   362e8:	bl	1293c <nl_langinfo@plt>
   362ec:	ldrb	r1, [r0]
   362f0:	orr	r1, r1, #32
   362f4:	cmp	r1, #117	; 0x75
   362f8:	bne	36348 <__assert_fail@plt+0x23898>
   362fc:	ldrb	r1, [r0, #1]
   36300:	orr	r1, r1, #32
   36304:	cmp	r1, #116	; 0x74
   36308:	bne	36348 <__assert_fail@plt+0x23898>
   3630c:	ldrb	r1, [r0, #2]
   36310:	orr	r1, r1, #32
   36314:	cmp	r1, #102	; 0x66
   36318:	bne	36348 <__assert_fail@plt+0x23898>
   3631c:	ldrb	r1, [r0, #3]!
   36320:	cmp	r1, #45	; 0x2d
   36324:	movw	r1, #12700	; 0x319c
   36328:	movt	r1, #5
   3632c:	addeq	r0, r0, #1
   36330:	bl	123fc <strcmp@plt>
   36334:	cmp	r0, #0
   36338:	bne	36348 <__assert_fail@plt+0x23898>
   3633c:	ldrb	r0, [r5, #88]	; 0x58
   36340:	orr	r0, r0, #4
   36344:	strb	r0, [r5, #88]	; 0x58
   36348:	ldrb	r0, [r5, #88]	; 0x58
   3634c:	and	r1, r0, #247	; 0xf7
   36350:	strb	r1, [r5, #88]	; 0x58
   36354:	ldr	r1, [r5, #92]	; 0x5c
   36358:	cmp	r1, #2
   3635c:	blt	36684 <__assert_fail@plt+0x23bd4>
   36360:	tst	r0, #4
   36364:	bne	363e0 <__assert_fail@plt+0x23930>
   36368:	mov	r0, #32
   3636c:	mov	r1, #1
   36370:	mov	r4, #1
   36374:	bl	322c0 <__assert_fail@plt+0x1f810>
   36378:	cmp	r0, #0
   3637c:	str	r0, [r5, #60]	; 0x3c
   36380:	beq	36698 <__assert_fail@plt+0x23be8>
   36384:	mov	r6, #0
   36388:	mov	r0, r6
   3638c:	bl	12864 <btowc@plt>
   36390:	cmn	r0, #1
   36394:	bne	363b8 <__assert_fail@plt+0x23908>
   36398:	b	363c8 <__assert_fail@plt+0x23918>
   3639c:	add	r6, r6, #1
   363a0:	cmp	r6, #32
   363a4:	beq	363f0 <__assert_fail@plt+0x23940>
   363a8:	mov	r0, r6
   363ac:	bl	12864 <btowc@plt>
   363b0:	cmn	r0, #1
   363b4:	beq	363c8 <__assert_fail@plt+0x23918>
   363b8:	ldr	r1, [r5, #60]	; 0x3c
   363bc:	ldr	r2, [r1]
   363c0:	orr	r2, r2, r4, lsl r6
   363c4:	str	r2, [r1]
   363c8:	cmp	r6, r0
   363cc:	beq	3639c <__assert_fail@plt+0x238ec>
   363d0:	ldrb	r0, [r5, #88]	; 0x58
   363d4:	orr	r0, r0, #8
   363d8:	strb	r0, [r5, #88]	; 0x58
   363dc:	b	3639c <__assert_fail@plt+0x238ec>
   363e0:	movw	r0, #12652	; 0x316c
   363e4:	movt	r0, #5
   363e8:	str	r0, [r5, #60]	; 0x3c
   363ec:	b	36684 <__assert_fail@plt+0x23bd4>
   363f0:	mov	r6, #32
   363f4:	mov	r4, #1
   363f8:	mov	r0, r6
   363fc:	bl	12864 <btowc@plt>
   36400:	cmn	r0, #1
   36404:	bne	36430 <__assert_fail@plt+0x23980>
   36408:	b	36444 <__assert_fail@plt+0x23994>
   3640c:	sub	r1, r6, #31
   36410:	add	r0, r6, #1
   36414:	cmp	r1, #32
   36418:	mov	r6, r0
   3641c:	beq	3645c <__assert_fail@plt+0x239ac>
   36420:	mov	r0, r6
   36424:	bl	12864 <btowc@plt>
   36428:	cmn	r0, #1
   3642c:	beq	36444 <__assert_fail@plt+0x23994>
   36430:	ldr	r2, [r5, #60]	; 0x3c
   36434:	sub	r1, r6, #32
   36438:	ldr	r3, [r2, #4]
   3643c:	orr	r1, r3, r4, lsl r1
   36440:	str	r1, [r2, #4]
   36444:	cmp	r0, r6
   36448:	beq	3640c <__assert_fail@plt+0x2395c>
   3644c:	ldrb	r0, [r5, #88]	; 0x58
   36450:	orr	r0, r0, #8
   36454:	strb	r0, [r5, #88]	; 0x58
   36458:	b	3640c <__assert_fail@plt+0x2395c>
   3645c:	mov	r6, #64	; 0x40
   36460:	mov	r4, #1
   36464:	mov	r0, r6
   36468:	bl	12864 <btowc@plt>
   3646c:	cmn	r0, #1
   36470:	bne	3649c <__assert_fail@plt+0x239ec>
   36474:	b	364b0 <__assert_fail@plt+0x23a00>
   36478:	sub	r1, r6, #63	; 0x3f
   3647c:	add	r0, r6, #1
   36480:	cmp	r1, #32
   36484:	mov	r6, r0
   36488:	beq	364c8 <__assert_fail@plt+0x23a18>
   3648c:	mov	r0, r6
   36490:	bl	12864 <btowc@plt>
   36494:	cmn	r0, #1
   36498:	beq	364b0 <__assert_fail@plt+0x23a00>
   3649c:	ldr	r2, [r5, #60]	; 0x3c
   364a0:	sub	r1, r6, #64	; 0x40
   364a4:	ldr	r3, [r2, #8]
   364a8:	orr	r1, r3, r4, lsl r1
   364ac:	str	r1, [r2, #8]
   364b0:	cmp	r0, r6
   364b4:	beq	36478 <__assert_fail@plt+0x239c8>
   364b8:	ldrb	r0, [r5, #88]	; 0x58
   364bc:	orr	r0, r0, #8
   364c0:	strb	r0, [r5, #88]	; 0x58
   364c4:	b	36478 <__assert_fail@plt+0x239c8>
   364c8:	mov	r6, #96	; 0x60
   364cc:	mov	r4, #1
   364d0:	mov	r0, r6
   364d4:	bl	12864 <btowc@plt>
   364d8:	cmn	r0, #1
   364dc:	bne	36508 <__assert_fail@plt+0x23a58>
   364e0:	b	3651c <__assert_fail@plt+0x23a6c>
   364e4:	sub	r1, r6, #95	; 0x5f
   364e8:	add	r0, r6, #1
   364ec:	cmp	r1, #32
   364f0:	mov	r6, r0
   364f4:	beq	36534 <__assert_fail@plt+0x23a84>
   364f8:	mov	r0, r6
   364fc:	bl	12864 <btowc@plt>
   36500:	cmn	r0, #1
   36504:	beq	3651c <__assert_fail@plt+0x23a6c>
   36508:	ldr	r2, [r5, #60]	; 0x3c
   3650c:	sub	r1, r6, #96	; 0x60
   36510:	ldr	r3, [r2, #12]
   36514:	orr	r1, r3, r4, lsl r1
   36518:	str	r1, [r2, #12]
   3651c:	cmp	r0, r6
   36520:	beq	364e4 <__assert_fail@plt+0x23a34>
   36524:	ldrb	r0, [r5, #88]	; 0x58
   36528:	orr	r0, r0, #8
   3652c:	strb	r0, [r5, #88]	; 0x58
   36530:	b	364e4 <__assert_fail@plt+0x23a34>
   36534:	mov	r6, #128	; 0x80
   36538:	mov	r4, #1
   3653c:	mov	r0, r6
   36540:	bl	12864 <btowc@plt>
   36544:	cmn	r0, #1
   36548:	bne	36570 <__assert_fail@plt+0x23ac0>
   3654c:	sub	r1, r6, #127	; 0x7f
   36550:	add	r0, r6, #1
   36554:	cmp	r1, #32
   36558:	mov	r6, r0
   3655c:	beq	36588 <__assert_fail@plt+0x23ad8>
   36560:	mov	r0, r6
   36564:	bl	12864 <btowc@plt>
   36568:	cmn	r0, #1
   3656c:	beq	3654c <__assert_fail@plt+0x23a9c>
   36570:	ldr	r1, [r5, #60]	; 0x3c
   36574:	sub	r0, r6, #128	; 0x80
   36578:	ldr	r2, [r1, #16]
   3657c:	orr	r0, r2, r4, lsl r0
   36580:	str	r0, [r1, #16]
   36584:	b	3654c <__assert_fail@plt+0x23a9c>
   36588:	mov	r6, #160	; 0xa0
   3658c:	mov	r4, #1
   36590:	mov	r0, r6
   36594:	bl	12864 <btowc@plt>
   36598:	cmn	r0, #1
   3659c:	bne	365c4 <__assert_fail@plt+0x23b14>
   365a0:	sub	r1, r6, #159	; 0x9f
   365a4:	add	r0, r6, #1
   365a8:	cmp	r1, #32
   365ac:	mov	r6, r0
   365b0:	beq	365dc <__assert_fail@plt+0x23b2c>
   365b4:	mov	r0, r6
   365b8:	bl	12864 <btowc@plt>
   365bc:	cmn	r0, #1
   365c0:	beq	365a0 <__assert_fail@plt+0x23af0>
   365c4:	ldr	r1, [r5, #60]	; 0x3c
   365c8:	sub	r0, r6, #160	; 0xa0
   365cc:	ldr	r2, [r1, #20]
   365d0:	orr	r0, r2, r4, lsl r0
   365d4:	str	r0, [r1, #20]
   365d8:	b	365a0 <__assert_fail@plt+0x23af0>
   365dc:	mov	r6, #192	; 0xc0
   365e0:	mov	r4, #1
   365e4:	mov	r0, r6
   365e8:	bl	12864 <btowc@plt>
   365ec:	cmn	r0, #1
   365f0:	bne	36618 <__assert_fail@plt+0x23b68>
   365f4:	sub	r1, r6, #191	; 0xbf
   365f8:	add	r0, r6, #1
   365fc:	cmp	r1, #32
   36600:	mov	r6, r0
   36604:	beq	36630 <__assert_fail@plt+0x23b80>
   36608:	mov	r0, r6
   3660c:	bl	12864 <btowc@plt>
   36610:	cmn	r0, #1
   36614:	beq	365f4 <__assert_fail@plt+0x23b44>
   36618:	ldr	r1, [r5, #60]	; 0x3c
   3661c:	sub	r0, r6, #192	; 0xc0
   36620:	ldr	r2, [r1, #24]
   36624:	orr	r0, r2, r4, lsl r0
   36628:	str	r0, [r1, #24]
   3662c:	b	365f4 <__assert_fail@plt+0x23b44>
   36630:	mov	r6, #224	; 0xe0
   36634:	mov	r4, #1
   36638:	mov	r0, r6
   3663c:	bl	12864 <btowc@plt>
   36640:	cmn	r0, #1
   36644:	bne	3666c <__assert_fail@plt+0x23bbc>
   36648:	sub	r1, r6, #223	; 0xdf
   3664c:	add	r0, r6, #1
   36650:	cmp	r1, #32
   36654:	mov	r6, r0
   36658:	beq	36684 <__assert_fail@plt+0x23bd4>
   3665c:	mov	r0, r6
   36660:	bl	12864 <btowc@plt>
   36664:	cmn	r0, #1
   36668:	beq	36648 <__assert_fail@plt+0x23b98>
   3666c:	ldr	r1, [r5, #60]	; 0x3c
   36670:	sub	r0, r6, #224	; 0xe0
   36674:	ldr	r2, [r1, #28]
   36678:	orr	r0, r2, r4, lsl r0
   3667c:	str	r0, [r1, #28]
   36680:	b	36648 <__assert_fail@plt+0x23b98>
   36684:	ldr	r0, [r5]
   36688:	cmp	r0, #0
   3668c:	ldrne	r0, [r5, #32]
   36690:	cmpne	r0, #0
   36694:	bne	366c0 <__assert_fail@plt+0x23c10>
   36698:	mov	r4, #12
   3669c:	mov	r0, r5
   366a0:	str	r4, [fp, #-52]	; 0xffffffcc
   366a4:	bl	38854 <__assert_fail@plt+0x25da4>
   366a8:	mov	r0, #0
   366ac:	str	r0, [sl]
   366b0:	str	r0, [sl, #4]
   366b4:	mov	r0, r4
   366b8:	sub	sp, fp, #28
   366bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   366c0:	movw	r0, #9392	; 0x24b0
   366c4:	movw	r1, #10328	; 0x2858
   366c8:	mov	r6, #0
   366cc:	movt	r0, #1
   366d0:	movt	r1, #1
   366d4:	str	r6, [fp, #-52]	; 0xffffffcc
   366d8:	orrs	r4, r1, r0
   366dc:	beq	366f4 <__assert_fail@plt+0x23c44>
   366e0:	add	r0, r5, #136	; 0x88
   366e4:	mov	r1, #0
   366e8:	bl	124f8 <pthread_mutex_init@plt>
   366ec:	cmp	r0, #0
   366f0:	bne	36698 <__assert_fail@plt+0x23be8>
   366f4:	vmov.i32	q8, #0	; 0x00000000
   366f8:	add	r1, sp, #32
   366fc:	str	r4, [sp, #8]
   36700:	ldr	r4, [sl, #20]
   36704:	ldr	r3, [sp, #28]
   36708:	add	r0, r1, #64	; 0x40
   3670c:	vst1.32	{d16-d17}, [r0]
   36710:	add	r0, r1, #52	; 0x34
   36714:	vst1.32	{d16-d17}, [r0]
   36718:	add	r0, r1, #36	; 0x24
   3671c:	vst1.32	{d16-d17}, [r0]
   36720:	add	r0, r1, #20
   36724:	vst1.32	{d16-d17}, [r0]
   36728:	add	r0, r1, #4
   3672c:	add	r1, r1, #44	; 0x2c
   36730:	vst1.32	{d16-d17}, [r0]
   36734:	str	r3, [sp, #32]
   36738:	ubfx	r0, r9, #22, #1
   3673c:	str	r9, [sp, #24]
   36740:	vdup.32	q8, r7
   36744:	str	r5, [sp, #20]
   36748:	strb	r0, [sp, #104]	; 0x68
   3674c:	and	r0, r9, #4194304	; 0x400000
   36750:	str	r4, [sp, #96]	; 0x60
   36754:	orrs	r9, r0, r4
   36758:	str	r0, [sp, #12]
   3675c:	movwne	r9, #1
   36760:	cmp	r7, #1
   36764:	strb	r9, [sp, #107]	; 0x6b
   36768:	ldr	r0, [r5, #92]	; 0x5c
   3676c:	str	r0, [sp, #112]	; 0x70
   36770:	ldrb	r2, [r5, #88]	; 0x58
   36774:	vst1.32	{d16-d17}, [r1]
   36778:	ubfx	r1, r2, #3, #1
   3677c:	strb	r1, [sp, #106]	; 0x6a
   36780:	ubfx	r1, r2, #2, #1
   36784:	strb	r1, [sp, #105]	; 0x69
   36788:	blt	36800 <__assert_fail@plt+0x23d50>
   3678c:	cmp	r0, #2
   36790:	blt	367bc <__assert_fail@plt+0x23d0c>
   36794:	mov	r6, #12
   36798:	cmn	r7, #-1073741822	; 0xc0000002
   3679c:	bhi	36d68 <__assert_fail@plt+0x242b8>
   367a0:	lsl	r1, r8, #2
   367a4:	mov	r0, #0
   367a8:	bl	36110 <__assert_fail@plt+0x23660>
   367ac:	cmp	r0, #0
   367b0:	beq	36d68 <__assert_fail@plt+0x242b8>
   367b4:	ldr	r3, [sp, #28]
   367b8:	str	r0, [sp, #40]	; 0x28
   367bc:	cmp	r9, #0
   367c0:	mov	r6, #0
   367c4:	mov	r9, #0
   367c8:	beq	367f0 <__assert_fail@plt+0x23d40>
   367cc:	mov	r0, #0
   367d0:	mov	r1, r8
   367d4:	bl	36110 <__assert_fail@plt+0x23660>
   367d8:	cmp	r0, #0
   367dc:	beq	36d64 <__assert_fail@plt+0x242b4>
   367e0:	ldr	r3, [sp, #28]
   367e4:	mov	r6, r0
   367e8:	mov	r9, #1
   367ec:	str	r0, [sp, #36]	; 0x24
   367f0:	ldr	r0, [sp, #20]
   367f4:	str	r8, [sp, #68]	; 0x44
   367f8:	ldr	r0, [r0, #92]	; 0x5c
   367fc:	b	36804 <__assert_fail@plt+0x23d54>
   36800:	mov	r8, #0
   36804:	ldr	r1, [sp, #12]
   36808:	cmp	r9, #0
   3680c:	moveq	r6, r3
   36810:	str	r6, [sp, #36]	; 0x24
   36814:	cmp	r1, #0
   36818:	beq	36908 <__assert_fail@plt+0x23e58>
   3681c:	cmp	r0, #2
   36820:	blt	36920 <__assert_fail@plt+0x23e70>
   36824:	add	r0, sp, #32
   36828:	bl	3bc80 <__assert_fail@plt+0x291d0>
   3682c:	ldr	r9, [sp, #20]
   36830:	cmp	r0, #0
   36834:	bne	36d5c <__assert_fail@plt+0x242ac>
   36838:	add	r5, sp, #32
   3683c:	ldr	r0, [sp, #64]	; 0x40
   36840:	cmp	r0, r7
   36844:	blt	3686c <__assert_fail@plt+0x23dbc>
   36848:	b	36a14 <__assert_fail@plt+0x23f64>
   3684c:	mov	r0, r5
   36850:	str	r4, [sp, #68]	; 0x44
   36854:	bl	3bc80 <__assert_fail@plt+0x291d0>
   36858:	cmp	r0, #0
   3685c:	bne	36d5c <__assert_fail@plt+0x242ac>
   36860:	ldr	r0, [sp, #64]	; 0x40
   36864:	cmp	r0, r7
   36868:	bge	36a14 <__assert_fail@plt+0x23f64>
   3686c:	ldr	r0, [r9, #92]	; 0x5c
   36870:	ldr	r2, [sp, #60]	; 0x3c
   36874:	ldr	r1, [sp, #68]	; 0x44
   36878:	add	r0, r0, r2
   3687c:	cmp	r1, r0
   36880:	bgt	36a14 <__assert_fail@plt+0x23f64>
   36884:	ldr	r0, [sp, #112]	; 0x70
   36888:	lsl	r4, r1, #1
   3688c:	cmp	r0, #2
   36890:	blt	368e0 <__assert_fail@plt+0x23e30>
   36894:	mov	r6, #12
   36898:	cmn	r4, #-1073741823	; 0xc0000001
   3689c:	bhi	36d68 <__assert_fail@plt+0x242b8>
   368a0:	ldr	r0, [sp, #40]	; 0x28
   368a4:	lsl	r8, r1, #3
   368a8:	mov	r1, r8
   368ac:	bl	36110 <__assert_fail@plt+0x23660>
   368b0:	cmp	r0, #0
   368b4:	beq	36d68 <__assert_fail@plt+0x242b8>
   368b8:	str	r0, [sp, #40]	; 0x28
   368bc:	ldr	r0, [sp, #44]	; 0x2c
   368c0:	cmp	r0, #0
   368c4:	beq	368e0 <__assert_fail@plt+0x23e30>
   368c8:	mov	r1, r8
   368cc:	bl	36110 <__assert_fail@plt+0x23660>
   368d0:	cmp	r0, #0
   368d4:	beq	36d68 <__assert_fail@plt+0x242b8>
   368d8:	ldr	r9, [sp, #20]
   368dc:	str	r0, [sp, #44]	; 0x2c
   368e0:	ldrb	r0, [sp, #107]	; 0x6b
   368e4:	cmp	r0, #0
   368e8:	beq	3684c <__assert_fail@plt+0x23d9c>
   368ec:	ldr	r0, [sp, #36]	; 0x24
   368f0:	mov	r1, r4
   368f4:	bl	36110 <__assert_fail@plt+0x23660>
   368f8:	cmp	r0, #0
   368fc:	beq	36d64 <__assert_fail@plt+0x242b4>
   36900:	str	r0, [sp, #36]	; 0x24
   36904:	b	3684c <__assert_fail@plt+0x23d9c>
   36908:	cmp	r0, #2
   3690c:	blt	369a0 <__assert_fail@plt+0x23ef0>
   36910:	add	r0, sp, #32
   36914:	bl	3c5a0 <__assert_fail@plt+0x29af0>
   36918:	ldr	r9, [sp, #20]
   3691c:	b	36a14 <__assert_fail@plt+0x23f64>
   36920:	ldr	r9, [sp, #20]
   36924:	cmp	r8, r7
   36928:	movgt	r8, r7
   3692c:	cmp	r8, #1
   36930:	blt	36a08 <__assert_fail@plt+0x23f58>
   36934:	mov	r6, #0
   36938:	bl	12750 <__ctype_toupper_loc@plt>
   3693c:	ldr	r3, [sp, #28]
   36940:	mov	r1, #0
   36944:	add	r2, r3, r6
   36948:	cmp	r4, #0
   3694c:	ldrb	r2, [r2, r1]
   36950:	beq	3697c <__assert_fail@plt+0x23ecc>
   36954:	b	36978 <__assert_fail@plt+0x23ec8>
   36958:	ldr	r3, [sp, #32]
   3695c:	ldr	r6, [sp, #56]	; 0x38
   36960:	ldr	r4, [sp, #96]	; 0x60
   36964:	mov	r1, r2
   36968:	add	r2, r3, r6
   3696c:	cmp	r4, #0
   36970:	ldrb	r2, [r2, r1]
   36974:	beq	3697c <__assert_fail@plt+0x23ecc>
   36978:	ldrb	r2, [r4, r2]
   3697c:	ldr	r3, [r0]
   36980:	ldr	r2, [r3, r2, lsl #2]
   36984:	ldr	r3, [sp, #36]	; 0x24
   36988:	strb	r2, [r3, r1]
   3698c:	add	r2, r1, #1
   36990:	cmp	r2, r8
   36994:	blt	36958 <__assert_fail@plt+0x23ea8>
   36998:	add	r0, r1, #1
   3699c:	b	36a0c <__assert_fail@plt+0x23f5c>
   369a0:	ldr	r9, [sp, #20]
   369a4:	cmp	r4, #0
   369a8:	beq	36cbc <__assert_fail@plt+0x2420c>
   369ac:	cmp	r8, r7
   369b0:	movgt	r8, r7
   369b4:	cmp	r8, #1
   369b8:	blt	36a08 <__assert_fail@plt+0x23f58>
   369bc:	ldrb	r0, [r3]
   369c0:	cmp	r8, #1
   369c4:	ldrb	r0, [r4, r0]
   369c8:	strb	r0, [r6]
   369cc:	mov	r0, #1
   369d0:	beq	36a0c <__assert_fail@plt+0x23f5c>
   369d4:	mov	r0, #1
   369d8:	ldr	r1, [sp, #32]
   369dc:	ldr	r3, [sp, #56]	; 0x38
   369e0:	ldr	r7, [sp, #96]	; 0x60
   369e4:	ldr	r2, [sp, #36]	; 0x24
   369e8:	add	r1, r1, r3
   369ec:	ldrb	r1, [r1, r0]
   369f0:	ldrb	r1, [r7, r1]
   369f4:	strb	r1, [r2, r0]
   369f8:	add	r0, r0, #1
   369fc:	cmp	r0, r8
   36a00:	blt	369d8 <__assert_fail@plt+0x23f28>
   36a04:	b	36a0c <__assert_fail@plt+0x23f5c>
   36a08:	mov	r0, #0
   36a0c:	str	r0, [sp, #64]	; 0x40
   36a10:	str	r0, [sp, #60]	; 0x3c
   36a14:	mov	r5, #0
   36a18:	ldr	r4, [sp, #24]
   36a1c:	sub	r8, fp, #48	; 0x30
   36a20:	add	r6, sp, #32
   36a24:	str	r5, [fp, #-52]	; 0xffffffcc
   36a28:	str	r5, [sl, #24]
   36a2c:	mov	r0, r8
   36a30:	mov	r1, r6
   36a34:	ldr	r7, [sl]
   36a38:	orr	r2, r4, #8388608	; 0x800000
   36a3c:	str	r4, [r7, #128]	; 0x80
   36a40:	bl	3cb38 <__assert_fail@plt+0x2a088>
   36a44:	ldr	r1, [sp, #72]	; 0x48
   36a48:	mov	r2, r8
   36a4c:	mov	r3, r4
   36a50:	str	r5, [sp]
   36a54:	add	r0, r1, r0
   36a58:	mov	r1, sl
   36a5c:	str	r0, [sp, #72]	; 0x48
   36a60:	sub	r0, fp, #52	; 0x34
   36a64:	str	r0, [sp, #4]
   36a68:	mov	r0, r6
   36a6c:	bl	3c7b0 <__assert_fail@plt+0x29d00>
   36a70:	mov	r4, r0
   36a74:	cmp	r0, #0
   36a78:	bne	36a88 <__assert_fail@plt+0x23fd8>
   36a7c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   36a80:	cmp	r0, #0
   36a84:	bne	36e10 <__assert_fail@plt+0x24360>
   36a88:	ldr	r1, [r7, #64]	; 0x40
   36a8c:	cmp	r1, #31
   36a90:	beq	36da8 <__assert_fail@plt+0x242f8>
   36a94:	ldr	r0, [r7, #56]	; 0x38
   36a98:	add	r0, r0, r1, lsl #5
   36a9c:	add	r2, r1, #1
   36aa0:	vmov.i32	q8, #0	; 0x00000000
   36aa4:	mov	r1, #0
   36aa8:	str	r2, [r7, #64]	; 0x40
   36aac:	mov	r2, #2
   36ab0:	add	r6, r0, #4
   36ab4:	str	r1, [r0, #20]
   36ab8:	str	r1, [r0, #24]
   36abc:	str	r2, [r0, #28]
   36ac0:	mov	r0, #28
   36ac4:	mov	r1, r6
   36ac8:	vst1.32	{d16-d17}, [r1], r0
   36acc:	mvn	r0, #0
   36ad0:	str	r0, [r1]
   36ad4:	cmp	r4, #0
   36ad8:	mov	r0, r6
   36adc:	beq	36b30 <__assert_fail@plt+0x24080>
   36ae0:	ldr	r1, [r7, #64]	; 0x40
   36ae4:	cmp	r1, #31
   36ae8:	beq	36de0 <__assert_fail@plt+0x24330>
   36aec:	ldr	r0, [r7, #56]	; 0x38
   36af0:	add	r0, r0, r1, lsl #5
   36af4:	add	r2, r1, #1
   36af8:	mov	r1, #0
   36afc:	cmp	r6, #0
   36b00:	mvn	r3, #0
   36b04:	str	r2, [r7, #64]	; 0x40
   36b08:	mov	r2, #16
   36b0c:	str	r1, [r0, #4]!
   36b10:	add	ip, r0, #20
   36b14:	stmib	r0, {r4, r6}
   36b18:	str	r1, [r0, #12]
   36b1c:	str	r1, [r0, #16]
   36b20:	stm	ip, {r1, r2, r3}
   36b24:	str	r0, [r4]
   36b28:	beq	36e08 <__assert_fail@plt+0x24358>
   36b2c:	str	r0, [r6]
   36b30:	cmp	r6, #0
   36b34:	cmpne	r0, #0
   36b38:	beq	36e08 <__assert_fail@plt+0x24358>
   36b3c:	str	r0, [r9, #52]	; 0x34
   36b40:	ldr	r8, [sl]
   36b44:	ldr	r0, [r8, #4]
   36b48:	lsl	r0, r0, #2
   36b4c:	bl	35350 <__assert_fail@plt+0x228a0>
   36b50:	str	r0, [r8, #12]
   36b54:	ldr	r0, [r8, #4]
   36b58:	lsl	r0, r0, #2
   36b5c:	bl	35350 <__assert_fail@plt+0x228a0>
   36b60:	str	r0, [r8, #16]
   36b64:	ldr	r0, [r8, #4]
   36b68:	add	r0, r0, r0, lsl #1
   36b6c:	lsl	r0, r0, #2
   36b70:	bl	35350 <__assert_fail@plt+0x228a0>
   36b74:	str	r0, [r8, #20]
   36b78:	ldr	r0, [r8, #4]
   36b7c:	add	r0, r0, r0, lsl #1
   36b80:	lsl	r0, r0, #2
   36b84:	bl	35350 <__assert_fail@plt+0x228a0>
   36b88:	str	r0, [r8, #24]
   36b8c:	ldr	r1, [r8, #12]
   36b90:	cmp	r1, #0
   36b94:	ldrne	r1, [r8, #16]
   36b98:	cmpne	r1, #0
   36b9c:	beq	36bb0 <__assert_fail@plt+0x24100>
   36ba0:	cmp	r0, #0
   36ba4:	ldrne	r0, [r8, #20]
   36ba8:	cmpne	r0, #0
   36bac:	bne	36c58 <__assert_fail@plt+0x241a8>
   36bb0:	mov	r0, #12
   36bb4:	str	r0, [fp, #-52]	; 0xffffffcc
   36bb8:	ldr	r4, [sl]
   36bbc:	ldr	r0, [r4, #56]	; 0x38
   36bc0:	cmp	r0, #0
   36bc4:	beq	36bdc <__assert_fail@plt+0x2412c>
   36bc8:	ldr	r5, [r0]
   36bcc:	bl	32910 <__assert_fail@plt+0x1fe60>
   36bd0:	cmp	r5, #0
   36bd4:	mov	r0, r5
   36bd8:	bne	36bc8 <__assert_fail@plt+0x24118>
   36bdc:	mov	r0, #31
   36be0:	mov	r5, #0
   36be4:	str	r0, [r4, #64]	; 0x40
   36be8:	str	r5, [r4, #52]	; 0x34
   36bec:	str	r5, [r4, #56]	; 0x38
   36bf0:	ldr	r0, [r4, #16]
   36bf4:	bl	32910 <__assert_fail@plt+0x1fe60>
   36bf8:	str	r5, [r4, #16]
   36bfc:	ldr	r0, [sp, #40]	; 0x28
   36c00:	bl	32910 <__assert_fail@plt+0x1fe60>
   36c04:	ldr	r0, [sp, #44]	; 0x2c
   36c08:	bl	32910 <__assert_fail@plt+0x1fe60>
   36c0c:	ldrb	r0, [sp, #107]	; 0x6b
   36c10:	cmp	r0, #0
   36c14:	beq	36c20 <__assert_fail@plt+0x24170>
   36c18:	ldr	r0, [sp, #36]	; 0x24
   36c1c:	bl	32910 <__assert_fail@plt+0x1fe60>
   36c20:	ldr	r0, [sp, #8]
   36c24:	cmp	r0, #0
   36c28:	beq	36c34 <__assert_fail@plt+0x24184>
   36c2c:	add	r0, r9, #136	; 0x88
   36c30:	bl	1242c <pthread_mutex_destroy@plt>
   36c34:	mov	r0, r9
   36c38:	bl	38854 <__assert_fail@plt+0x25da4>
   36c3c:	mov	r0, #0
   36c40:	str	r0, [sl]
   36c44:	str	r0, [sl, #4]
   36c48:	ldr	r4, [fp, #-52]	; 0xffffffcc
   36c4c:	mov	r0, r4
   36c50:	sub	sp, fp, #28
   36c54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36c58:	ldr	r0, [sl, #24]
   36c5c:	lsl	r0, r0, #2
   36c60:	bl	35350 <__assert_fail@plt+0x228a0>
   36c64:	cmp	r0, #0
   36c68:	str	r0, [r8, #132]	; 0x84
   36c6c:	beq	37024 <__assert_fail@plt+0x24574>
   36c70:	ldr	r1, [sl, #24]
   36c74:	cmp	r1, #0
   36c78:	beq	36e50 <__assert_fail@plt+0x243a0>
   36c7c:	mov	r2, #0
   36c80:	cmp	r1, #4
   36c84:	bcc	36e40 <__assert_fail@plt+0x24390>
   36c88:	bic	r2, r1, #3
   36c8c:	mov	r3, #1
   36c90:	add	r7, pc, #872	; 0x368
   36c94:	sub	r6, r2, #4
   36c98:	add	r3, r3, r6, lsr #2
   36c9c:	cmp	r6, #12
   36ca0:	and	ip, r3, #3
   36ca4:	bcs	36cc8 <__assert_fail@plt+0x24218>
   36ca8:	vld1.64	{d16-d17}, [r7 :128]
   36cac:	mov	r7, #0
   36cb0:	cmp	ip, #0
   36cb4:	bne	36d38 <__assert_fail@plt+0x24288>
   36cb8:	b	36e48 <__assert_fail@plt+0x24398>
   36cbc:	str	r8, [sp, #64]	; 0x40
   36cc0:	str	r8, [sp, #60]	; 0x3c
   36cc4:	b	36a14 <__assert_fail@plt+0x23f64>
   36cc8:	sub	r6, r3, ip
   36ccc:	add	r3, pc, #812	; 0x32c
   36cd0:	vmov.i32	q9, #12	; 0x0000000c
   36cd4:	vmov.i32	q10, #8	; 0x00000008
   36cd8:	vmov.i32	q11, #4	; 0x00000004
   36cdc:	vmov.i32	q12, #16	; 0x00000010
   36ce0:	mov	r7, #0
   36ce4:	mov	lr, #64	; 0x40
   36ce8:	mov	r4, r0
   36cec:	vld1.64	{d16-d17}, [r3 :128]
   36cf0:	mov	r3, r0
   36cf4:	vadd.i32	q13, q8, q9
   36cf8:	add	r5, r3, #48	; 0x30
   36cfc:	vadd.i32	q14, q8, q10
   36d00:	vadd.i32	q15, q8, q11
   36d04:	subs	r6, r6, #4
   36d08:	add	r7, r7, #16
   36d0c:	vst1.32	{d26-d27}, [r5]
   36d10:	vst1.32	{d16-d17}, [r4], lr
   36d14:	vadd.i32	q8, q8, q12
   36d18:	add	r5, r3, #32
   36d1c:	add	r3, r3, #16
   36d20:	vst1.32	{d28-d29}, [r5]
   36d24:	vst1.32	{d30-d31}, [r3]
   36d28:	mov	r3, r4
   36d2c:	bne	36cf4 <__assert_fail@plt+0x24244>
   36d30:	cmp	ip, #0
   36d34:	beq	36e48 <__assert_fail@plt+0x24398>
   36d38:	vmov.i32	q9, #4	; 0x00000004
   36d3c:	add	r3, r0, r7, lsl #2
   36d40:	rsb	r7, ip, #0
   36d44:	vadd.i32	q10, q8, q9
   36d48:	vst1.32	{d16-d17}, [r3]!
   36d4c:	adds	r7, r7, #1
   36d50:	vorr	q8, q10, q10
   36d54:	bcc	36d44 <__assert_fail@plt+0x24294>
   36d58:	b	36e48 <__assert_fail@plt+0x24398>
   36d5c:	mov	r6, r0
   36d60:	b	36d68 <__assert_fail@plt+0x242b8>
   36d64:	mov	r6, #12
   36d68:	ldr	r9, [sp, #20]
   36d6c:	str	r6, [fp, #-52]	; 0xffffffcc
   36d70:	ldr	r4, [sl]
   36d74:	ldr	r0, [r4, #56]	; 0x38
   36d78:	cmp	r0, #0
   36d7c:	bne	36bc8 <__assert_fail@plt+0x24118>
   36d80:	b	36bdc <__assert_fail@plt+0x2412c>
   36d84:	mov	r0, r5
   36d88:	mov	r1, #160	; 0xa0
   36d8c:	mov	r4, #160	; 0xa0
   36d90:	bl	36110 <__assert_fail@plt+0x23660>
   36d94:	cmp	r0, #0
   36d98:	beq	36dd0 <__assert_fail@plt+0x24320>
   36d9c:	mov	r5, r0
   36da0:	stm	sl, {r0, r4}
   36da4:	b	3626c <__assert_fail@plt+0x237bc>
   36da8:	mov	r0, #996	; 0x3e4
   36dac:	bl	35350 <__assert_fail@plt+0x228a0>
   36db0:	cmp	r0, #0
   36db4:	beq	36e2c <__assert_fail@plt+0x2437c>
   36db8:	ldr	r1, [r7, #56]	; 0x38
   36dbc:	str	r1, [r0]
   36dc0:	mov	r1, #0
   36dc4:	str	r1, [r7, #64]	; 0x40
   36dc8:	str	r0, [r7, #56]	; 0x38
   36dcc:	b	36a98 <__assert_fail@plt+0x23fe8>
   36dd0:	mov	r4, #12
   36dd4:	mov	r0, r4
   36dd8:	sub	sp, fp, #28
   36ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36de0:	mov	r0, #996	; 0x3e4
   36de4:	bl	35350 <__assert_fail@plt+0x228a0>
   36de8:	cmp	r0, #0
   36dec:	beq	36e08 <__assert_fail@plt+0x24358>
   36df0:	ldr	r1, [r7, #56]	; 0x38
   36df4:	str	r1, [r0]
   36df8:	mov	r1, #0
   36dfc:	str	r1, [r7, #64]	; 0x40
   36e00:	str	r0, [r7, #56]	; 0x38
   36e04:	b	36af0 <__assert_fail@plt+0x24040>
   36e08:	mov	r0, #12
   36e0c:	str	r0, [fp, #-52]	; 0xffffffcc
   36e10:	mov	r0, #0
   36e14:	str	r0, [r9, #52]	; 0x34
   36e18:	ldr	r4, [sl]
   36e1c:	ldr	r0, [r4, #56]	; 0x38
   36e20:	cmp	r0, #0
   36e24:	bne	36bc8 <__assert_fail@plt+0x24118>
   36e28:	b	36bdc <__assert_fail@plt+0x2412c>
   36e2c:	mov	r6, #0
   36e30:	cmp	r4, #0
   36e34:	mov	r0, r6
   36e38:	bne	36ae0 <__assert_fail@plt+0x24030>
   36e3c:	b	36b30 <__assert_fail@plt+0x24080>
   36e40:	str	r2, [r0, r2, lsl #2]
   36e44:	add	r2, r2, #1
   36e48:	cmp	r1, r2
   36e4c:	bne	36e40 <__assert_fail@plt+0x24390>
   36e50:	ldr	r2, [r8, #52]	; 0x34
   36e54:	ldrb	r1, [r2, #24]
   36e58:	cmp	r1, #17
   36e5c:	beq	36e88 <__assert_fail@plt+0x243d8>
   36e60:	cmp	r1, #4
   36e64:	bne	36ed8 <__assert_fail@plt+0x24428>
   36e68:	ldr	r1, [r2, #20]
   36e6c:	mov	r3, #1
   36e70:	ldr	r0, [r0, r1, lsl #2]
   36e74:	str	r0, [r2, #20]
   36e78:	ldr	r1, [r8, #80]	; 0x50
   36e7c:	orr	r0, r1, r3, lsl r0
   36e80:	str	r0, [r8, #80]	; 0x50
   36e84:	b	36ed8 <__assert_fail@plt+0x24428>
   36e88:	ldr	r1, [r2, #4]
   36e8c:	cmp	r1, #0
   36e90:	beq	36ed8 <__assert_fail@plt+0x24428>
   36e94:	ldrb	r3, [r1, #24]
   36e98:	cmp	r3, #17
   36e9c:	bne	36ed8 <__assert_fail@plt+0x24428>
   36ea0:	ldr	r3, [r1, #4]
   36ea4:	ldr	r1, [r1, #20]
   36ea8:	cmp	r3, #0
   36eac:	str	r3, [r2, #4]
   36eb0:	strne	r2, [r3]
   36eb4:	cmp	r1, #31
   36eb8:	ldr	r3, [r2, #20]
   36ebc:	ldr	r3, [r0, r3, lsl #2]
   36ec0:	str	r3, [r0, r1, lsl #2]
   36ec4:	bgt	36ed8 <__assert_fail@plt+0x24428>
   36ec8:	ldr	r0, [r8, #80]	; 0x50
   36ecc:	mov	r3, #1
   36ed0:	bic	r0, r0, r3, lsl r1
   36ed4:	b	36e80 <__assert_fail@plt+0x243d0>
   36ed8:	mov	r0, #1
   36edc:	ldr	r7, [r2, #4]
   36ee0:	cmp	r7, #0
   36ee4:	bne	36f14 <__assert_fail@plt+0x24464>
   36ee8:	mov	r3, #0
   36eec:	ldr	r7, [r2, #8]
   36ef0:	mov	r1, r2
   36ef4:	cmp	r7, r3
   36ef8:	cmpne	r7, #0
   36efc:	bne	36f14 <__assert_fail@plt+0x24464>
   36f00:	ldr	r2, [r1]
   36f04:	mov	r3, r1
   36f08:	cmp	r2, #0
   36f0c:	bne	36eec <__assert_fail@plt+0x2443c>
   36f10:	b	36fc4 <__assert_fail@plt+0x24514>
   36f14:	ldrb	r1, [r7, #24]
   36f18:	cmp	r1, #17
   36f1c:	beq	36f68 <__assert_fail@plt+0x244b8>
   36f20:	cmp	r1, #4
   36f24:	mov	r2, r7
   36f28:	bne	36edc <__assert_fail@plt+0x2442c>
   36f2c:	ldr	r1, [r8, #132]	; 0x84
   36f30:	mov	r2, r7
   36f34:	cmp	r1, #0
   36f38:	beq	36edc <__assert_fail@plt+0x2442c>
   36f3c:	ldr	r2, [r7, #20]
   36f40:	ldr	r1, [r1, r2, lsl #2]
   36f44:	str	r1, [r7, #20]
   36f48:	ldr	r2, [r8, #80]	; 0x50
   36f4c:	orr	r1, r2, r0, lsl r1
   36f50:	str	r1, [r8, #80]	; 0x50
   36f54:	mov	r2, r7
   36f58:	ldr	r7, [r2, #4]
   36f5c:	cmp	r7, #0
   36f60:	bne	36f14 <__assert_fail@plt+0x24464>
   36f64:	b	36ee8 <__assert_fail@plt+0x24438>
   36f68:	ldr	r3, [r7, #4]
   36f6c:	mov	r2, r7
   36f70:	cmp	r3, #0
   36f74:	beq	36edc <__assert_fail@plt+0x2442c>
   36f78:	ldrb	r1, [r3, #24]
   36f7c:	mov	r2, r7
   36f80:	cmp	r1, #17
   36f84:	bne	36edc <__assert_fail@plt+0x2442c>
   36f88:	ldr	r1, [r3, #4]
   36f8c:	ldr	r3, [r3, #20]
   36f90:	cmp	r1, #0
   36f94:	str	r1, [r7, #4]
   36f98:	strne	r7, [r1]
   36f9c:	cmp	r3, #31
   36fa0:	ldr	r1, [r7, #20]
   36fa4:	ldr	r2, [r8, #132]	; 0x84
   36fa8:	ldr	r1, [r2, r1, lsl #2]
   36fac:	str	r1, [r2, r3, lsl #2]
   36fb0:	mov	r2, r7
   36fb4:	bgt	36edc <__assert_fail@plt+0x2442c>
   36fb8:	ldr	r1, [r8, #80]	; 0x50
   36fbc:	bic	r1, r1, r0, lsl r3
   36fc0:	b	36f50 <__assert_fail@plt+0x244a0>
   36fc4:	ldr	r1, [sl, #24]
   36fc8:	cmp	r1, #0
   36fcc:	beq	36ff4 <__assert_fail@plt+0x24544>
   36fd0:	ldr	r0, [r8, #132]	; 0x84
   36fd4:	mov	r2, #0
   36fd8:	ldr	r3, [r0, r2, lsl #2]
   36fdc:	cmp	r2, r3
   36fe0:	bne	37010 <__assert_fail@plt+0x24560>
   36fe4:	add	r2, r2, #1
   36fe8:	cmp	r1, r2
   36fec:	bne	36fd8 <__assert_fail@plt+0x24528>
   36ff0:	b	37018 <__assert_fail@plt+0x24568>
   36ff4:	ldr	r0, [r8, #132]	; 0x84
   36ff8:	b	37018 <__assert_fail@plt+0x24568>
   36ffc:	nop	{0}
   37000:	andeq	r0, r0, r0
   37004:	andeq	r0, r0, r1
   37008:	andeq	r0, r0, r2
   3700c:	andeq	r0, r0, r3
   37010:	cmp	r1, r2
   37014:	bne	37024 <__assert_fail@plt+0x24574>
   37018:	bl	32910 <__assert_fail@plt+0x1fe60>
   3701c:	mov	r0, #0
   37020:	str	r0, [r8, #132]	; 0x84
   37024:	ldr	r0, [r8, #52]	; 0x34
   37028:	str	r8, [sp, #24]
   3702c:	mov	r7, #0
   37030:	sub	r8, fp, #48	; 0x30
   37034:	mov	r4, r0
   37038:	ldr	r0, [r0, #4]
   3703c:	cmp	r0, #0
   37040:	bne	37034 <__assert_fail@plt+0x24584>
   37044:	ldr	r0, [r4, #8]
   37048:	cmp	r0, #0
   3704c:	bne	37034 <__assert_fail@plt+0x24584>
   37050:	mov	r3, #0
   37054:	cmp	r3, #0
   37058:	str	r7, [fp, #-48]	; 0xffffffd0
   3705c:	beq	37088 <__assert_fail@plt+0x245d8>
   37060:	ldrb	r0, [r3, #24]
   37064:	cmp	r0, #17
   37068:	bne	37088 <__assert_fail@plt+0x245d8>
   3706c:	ldrb	r2, [sl, #28]
   37070:	ldr	r1, [sl]
   37074:	mov	r0, r8
   37078:	bl	41330 <__assert_fail@plt+0x2e880>
   3707c:	cmp	r0, #0
   37080:	str	r0, [r4, #4]
   37084:	strne	r4, [r0]
   37088:	ldr	r3, [r4, #8]
   3708c:	cmp	r3, #0
   37090:	beq	370bc <__assert_fail@plt+0x2460c>
   37094:	ldrb	r0, [r3, #24]
   37098:	cmp	r0, #17
   3709c:	bne	370bc <__assert_fail@plt+0x2460c>
   370a0:	ldrb	r2, [sl, #28]
   370a4:	ldr	r1, [sl]
   370a8:	mov	r0, r8
   370ac:	bl	41330 <__assert_fail@plt+0x2e880>
   370b0:	cmp	r0, #0
   370b4:	str	r0, [r4, #8]
   370b8:	strne	r4, [r0]
   370bc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   370c0:	cmp	r0, #0
   370c4:	bne	36bb4 <__assert_fail@plt+0x24104>
   370c8:	ldr	r1, [r4]
   370cc:	cmp	r1, #0
   370d0:	beq	370fc <__assert_fail@plt+0x2464c>
   370d4:	ldr	r0, [r1, #8]
   370d8:	cmp	r0, r4
   370dc:	cmpne	r0, #0
   370e0:	bne	37034 <__assert_fail@plt+0x24584>
   370e4:	ldr	r3, [r1, #4]
   370e8:	mov	r4, r1
   370ec:	cmp	r3, #0
   370f0:	str	r7, [fp, #-48]	; 0xffffffd0
   370f4:	bne	37060 <__assert_fail@plt+0x245b0>
   370f8:	b	37088 <__assert_fail@plt+0x245d8>
   370fc:	ldr	r8, [sp, #24]
   37100:	ldr	r0, [r8, #52]	; 0x34
   37104:	mov	r4, r0
   37108:	ldr	r0, [r0, #4]
   3710c:	cmp	r0, #0
   37110:	bne	37104 <__assert_fail@plt+0x24654>
   37114:	ldr	r0, [r4, #8]
   37118:	cmp	r0, #0
   3711c:	bne	37104 <__assert_fail@plt+0x24654>
   37120:	ldr	r2, [r4, #24]
   37124:	uxtb	r0, r2
   37128:	cmp	r0, #16
   3712c:	bne	37170 <__assert_fail@plt+0x246c0>
   37130:	ldr	r0, [r4, #4]
   37134:	ldr	r1, [r0, #12]
   37138:	str	r1, [r4, #12]
   3713c:	ldr	r0, [r0, #28]
   37140:	str	r0, [r4, #28]
   37144:	ldr	r1, [r4]
   37148:	cmp	r1, #0
   3714c:	beq	371bc <__assert_fail@plt+0x2470c>
   37150:	ldr	r0, [r1, #8]
   37154:	cmp	r0, r4
   37158:	mov	r4, r1
   3715c:	beq	37120 <__assert_fail@plt+0x24670>
   37160:	cmp	r0, #0
   37164:	mov	r4, r1
   37168:	beq	37120 <__assert_fail@plt+0x24670>
   3716c:	b	37104 <__assert_fail@plt+0x24654>
   37170:	str	r4, [r4, #12]
   37174:	mov	r0, r8
   37178:	ldr	r1, [r4, #20]
   3717c:	bl	41618 <__assert_fail@plt+0x2eb68>
   37180:	cmn	r0, #1
   37184:	str	r0, [r4, #28]
   37188:	beq	36bb0 <__assert_fail@plt+0x24100>
   3718c:	ldrb	r1, [r4, #24]
   37190:	cmp	r1, #12
   37194:	bne	371b0 <__assert_fail@plt+0x24700>
   37198:	ldr	r1, [r8]
   3719c:	ldr	r2, [r4, #20]
   371a0:	add	r0, r1, r0, lsl #3
   371a4:	ldr	r1, [r0, #4]
   371a8:	bfi	r1, r2, #8, #10
   371ac:	str	r1, [r0, #4]
   371b0:	ldr	r1, [r4]
   371b4:	cmp	r1, #0
   371b8:	bne	37150 <__assert_fail@plt+0x246a0>
   371bc:	ldr	r4, [r8, #52]	; 0x34
   371c0:	ldrb	r0, [r4, #24]
   371c4:	cmp	r0, #16
   371c8:	beq	371ec <__assert_fail@plt+0x2473c>
   371cc:	cmp	r0, #11
   371d0:	bne	371fc <__assert_fail@plt+0x2474c>
   371d4:	ldr	r0, [r4, #4]
   371d8:	str	r4, [r0, #16]
   371dc:	mov	r1, r4
   371e0:	cmp	r0, #0
   371e4:	bne	37240 <__assert_fail@plt+0x24790>
   371e8:	b	372a4 <__assert_fail@plt+0x247f4>
   371ec:	ldmib	r4, {r0, r1}
   371f0:	ldr	r2, [r1, #12]
   371f4:	str	r2, [r0, #16]
   371f8:	b	37218 <__assert_fail@plt+0x24768>
   371fc:	ldr	r0, [r4, #4]
   37200:	cmp	r0, #0
   37204:	ldrne	r1, [r4, #16]
   37208:	strne	r1, [r0, #16]
   3720c:	ldr	r1, [r4, #8]
   37210:	cmp	r1, #0
   37214:	beq	37220 <__assert_fail@plt+0x24770>
   37218:	ldr	r2, [r4, #16]
   3721c:	str	r2, [r1, #16]
   37220:	mov	r1, r4
   37224:	cmp	r0, #0
   37228:	bne	37240 <__assert_fail@plt+0x24790>
   3722c:	b	372a4 <__assert_fail@plt+0x247f4>
   37230:	ldr	r0, [r1, #4]
   37234:	str	r1, [r0, #16]
   37238:	cmp	r0, #0
   3723c:	beq	372a4 <__assert_fail@plt+0x247f4>
   37240:	mov	r1, r0
   37244:	ldrb	r0, [r0, #24]
   37248:	cmp	r0, #16
   3724c:	beq	37288 <__assert_fail@plt+0x247d8>
   37250:	cmp	r0, #11
   37254:	beq	37230 <__assert_fail@plt+0x24780>
   37258:	ldr	r0, [r1, #4]
   3725c:	cmp	r0, #0
   37260:	ldrne	r2, [r1, #16]
   37264:	strne	r2, [r0, #16]
   37268:	ldr	r2, [r1, #8]
   3726c:	cmp	r2, #0
   37270:	beq	37238 <__assert_fail@plt+0x24788>
   37274:	ldr	r3, [r1, #16]
   37278:	str	r3, [r2, #16]
   3727c:	cmp	r0, #0
   37280:	bne	37240 <__assert_fail@plt+0x24790>
   37284:	b	372a4 <__assert_fail@plt+0x247f4>
   37288:	ldmib	r1, {r0, r2}
   3728c:	ldr	r3, [r2, #12]
   37290:	str	r3, [r0, #16]
   37294:	ldr	r3, [r1, #16]
   37298:	str	r3, [r2, #16]
   3729c:	cmp	r0, #0
   372a0:	bne	37240 <__assert_fail@plt+0x24790>
   372a4:	mov	r3, #0
   372a8:	ldr	r0, [r1, #8]
   372ac:	mov	r2, r1
   372b0:	cmp	r0, r3
   372b4:	cmpne	r0, #0
   372b8:	bne	37240 <__assert_fail@plt+0x24790>
   372bc:	ldr	r1, [r2]
   372c0:	mov	r3, r2
   372c4:	cmp	r1, #0
   372c8:	bne	372a8 <__assert_fail@plt+0x247f8>
   372cc:	mov	r0, r8
   372d0:	mov	r1, r4
   372d4:	bl	41194 <__assert_fail@plt+0x2e6e4>
   372d8:	cmp	r0, #0
   372dc:	beq	372fc <__assert_fail@plt+0x2484c>
   372e0:	b	36bb4 <__assert_fail@plt+0x24104>
   372e4:	mov	r0, r8
   372e8:	mov	r1, r7
   372ec:	bl	41194 <__assert_fail@plt+0x2e6e4>
   372f0:	cmp	r0, #0
   372f4:	mov	r4, r7
   372f8:	bne	36bb4 <__assert_fail@plt+0x24104>
   372fc:	ldr	r7, [r4, #4]
   37300:	cmp	r7, #0
   37304:	bne	372e4 <__assert_fail@plt+0x24834>
   37308:	mov	r1, #0
   3730c:	ldr	r7, [r4, #8]
   37310:	mov	r0, r4
   37314:	cmp	r7, r1
   37318:	cmpne	r7, #0
   3731c:	bne	372e4 <__assert_fail@plt+0x24834>
   37320:	ldr	r4, [r0]
   37324:	mov	r1, r0
   37328:	cmp	r4, #0
   3732c:	bne	3730c <__assert_fail@plt+0x2485c>
   37330:	mov	r5, #0
   37334:	sub	r4, fp, #48	; 0x30
   37338:	mov	r7, #0
   3733c:	b	3736c <__assert_fail@plt+0x248bc>
   37340:	mov	r1, r5
   37344:	ldr	r2, [r8, #8]
   37348:	add	r0, r7, #1
   3734c:	subs	r3, r0, r2
   37350:	mov	r7, r3
   37354:	movwne	r3, #1
   37358:	movne	r7, r0
   3735c:	tst	r1, #1
   37360:	and	r5, r1, r3
   37364:	cmpeq	r0, r2
   37368:	beq	373c8 <__assert_fail@plt+0x24918>
   3736c:	ldr	r0, [r8, #24]
   37370:	add	r6, r7, r7, lsl #1
   37374:	add	r0, r0, r6, lsl #2
   37378:	ldr	r0, [r0, #4]
   3737c:	cmp	r0, #0
   37380:	bne	37340 <__assert_fail@plt+0x24890>
   37384:	mov	r0, r4
   37388:	mov	r1, r8
   3738c:	mov	r2, r7
   37390:	mov	r3, #1
   37394:	bl	417f0 <__assert_fail@plt+0x2ed40>
   37398:	cmp	r0, #0
   3739c:	bne	36bb4 <__assert_fail@plt+0x24104>
   373a0:	ldr	r0, [r8, #24]
   373a4:	mov	r1, r5
   373a8:	add	r0, r0, r6, lsl #2
   373ac:	ldr	r0, [r0, #4]
   373b0:	cmp	r0, #0
   373b4:	bne	37344 <__assert_fail@plt+0x24894>
   373b8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   373bc:	bl	32910 <__assert_fail@plt+0x1fe60>
   373c0:	mov	r1, #1
   373c4:	b	37344 <__assert_fail@plt+0x24894>
   373c8:	ldrb	r1, [sl, #28]
   373cc:	tst	r1, #16
   373d0:	bne	373ec <__assert_fail@plt+0x2493c>
   373d4:	ldr	r1, [sl, #24]
   373d8:	cmp	r1, #0
   373dc:	beq	373ec <__assert_fail@plt+0x2493c>
   373e0:	ldrb	r1, [r8, #88]	; 0x58
   373e4:	tst	r1, #1
   373e8:	bne	373f8 <__assert_fail@plt+0x24948>
   373ec:	ldr	r1, [r8, #76]	; 0x4c
   373f0:	cmp	r1, #0
   373f4:	beq	3753c <__assert_fail@plt+0x24a8c>
   373f8:	add	r0, r0, r0, lsl #1
   373fc:	lsl	r0, r0, #2
   37400:	bl	35350 <__assert_fail@plt+0x228a0>
   37404:	cmp	r0, #0
   37408:	str	r0, [r8, #28]
   3740c:	beq	379f0 <__assert_fail@plt+0x24f40>
   37410:	ldr	r1, [r8, #8]
   37414:	cmp	r1, #0
   37418:	beq	3753c <__assert_fail@plt+0x24a8c>
   3741c:	mov	r1, #0
   37420:	str	r1, [r0]
   37424:	str	r1, [r0, #4]
   37428:	str	r1, [r0, #8]
   3742c:	ldr	r0, [r8, #8]
   37430:	cmp	r0, #2
   37434:	bcc	37464 <__assert_fail@plt+0x249b4>
   37438:	mov	r2, #1
   3743c:	mov	r3, #12
   37440:	ldr	r0, [r8, #28]
   37444:	add	r2, r2, #1
   37448:	str	r1, [r0, r3]!
   3744c:	add	r3, r3, #12
   37450:	str	r1, [r0, #4]
   37454:	str	r1, [r0, #8]
   37458:	ldr	r0, [r8, #8]
   3745c:	cmp	r2, r0
   37460:	bcc	37440 <__assert_fail@plt+0x24990>
   37464:	cmp	r0, #0
   37468:	beq	3753c <__assert_fail@plt+0x24a8c>
   3746c:	ldr	ip, [r8, #24]
   37470:	mov	r7, #0
   37474:	str	sl, [sp, #16]
   37478:	b	37490 <__assert_fail@plt+0x249e0>
   3747c:	ldr	r0, [r8, #8]
   37480:	ldr	sl, [sp, #16]
   37484:	add	r7, r7, #1
   37488:	cmp	r7, r0
   3748c:	bcs	3753c <__assert_fail@plt+0x24a8c>
   37490:	add	r9, r7, r7, lsl #1
   37494:	add	r2, ip, r9, lsl #2
   37498:	ldr	r3, [r2, #4]
   3749c:	cmp	r3, #1
   374a0:	blt	37484 <__assert_fail@plt+0x249d4>
   374a4:	ldr	r1, [r2, #8]
   374a8:	mov	r6, #0
   374ac:	str	r1, [sp, #28]
   374b0:	b	374dc <__assert_fail@plt+0x24a2c>
   374b4:	add	r0, r4, r0, lsl #2
   374b8:	ldr	r0, [r0, #8]
   374bc:	add	r3, r2, #1
   374c0:	add	r6, r6, #1
   374c4:	str	r3, [sl]
   374c8:	str	r7, [r0, r2, lsl #2]
   374cc:	add	r0, ip, r9, lsl #2
   374d0:	ldr	r0, [r0, #4]
   374d4:	cmp	r6, r0
   374d8:	bge	3747c <__assert_fail@plt+0x249cc>
   374dc:	ldr	r0, [r1, r6, lsl #2]
   374e0:	ldr	r4, [r8, #28]
   374e4:	add	r0, r0, r0, lsl #1
   374e8:	mov	r3, r4
   374ec:	ldr	r5, [r3, r0, lsl #2]!
   374f0:	mov	sl, r3
   374f4:	ldr	r2, [sl, #4]!
   374f8:	cmp	r5, r2
   374fc:	bne	374b4 <__assert_fail@plt+0x24a04>
   37500:	mov	r1, #2
   37504:	add	r8, r4, r0, lsl #2
   37508:	add	r1, r1, r5, lsl #1
   3750c:	str	r1, [r3]
   37510:	lsl	r1, r1, #2
   37514:	ldr	r0, [r8, #8]!
   37518:	bl	36110 <__assert_fail@plt+0x23660>
   3751c:	cmp	r0, #0
   37520:	beq	379ec <__assert_fail@plt+0x24f3c>
   37524:	str	r0, [r8]
   37528:	ldr	r8, [sp, #24]
   3752c:	ldr	r1, [sp, #28]
   37530:	ldr	r2, [sl]
   37534:	ldr	ip, [r8, #24]
   37538:	b	374bc <__assert_fail@plt+0x24a0c>
   3753c:	mov	r0, #0
   37540:	str	r0, [fp, #-52]	; 0xffffffcc
   37544:	ldr	r0, [sp, #12]
   37548:	cmp	r0, #0
   3754c:	bne	37708 <__assert_fail@plt+0x24c58>
   37550:	ldr	r0, [sp, #20]
   37554:	ldrb	r2, [r0, #88]	; 0x58
   37558:	ands	r0, r2, #4
   3755c:	beq	37708 <__assert_fail@plt+0x24c58>
   37560:	ldr	r0, [sl, #20]
   37564:	cmp	r0, #0
   37568:	bne	37708 <__assert_fail@plt+0x24c58>
   3756c:	ldr	r0, [sp, #20]
   37570:	mov	r9, #0
   37574:	ldr	r7, [r0, #8]
   37578:	cmp	r7, #0
   3757c:	beq	3759c <__assert_fail@plt+0x24aec>
   37580:	ldr	r3, [r0]
   37584:	mov	r8, #0
   37588:	mov	ip, #1
   3758c:	mov	lr, #139	; 0x8b
   37590:	mov	r6, #0
   37594:	mov	r4, #0
   37598:	b	375f0 <__assert_fail@plt+0x24b40>
   3759c:	mov	r8, #0
   375a0:	ldr	r3, [sp, #20]
   375a4:	mov	r0, #1
   375a8:	and	r1, r2, #249	; 0xf9
   375ac:	str	r0, [r3, #92]	; 0x5c
   375b0:	ldr	r0, [r3, #76]	; 0x4c
   375b4:	cmp	r0, #0
   375b8:	movwgt	r9, #1
   375bc:	orr	r0, r8, r9
   375c0:	and	r0, r0, #1
   375c4:	orr	r0, r1, r0, lsl #1
   375c8:	strb	r0, [r3, #88]	; 0x58
   375cc:	b	37708 <__assert_fail@plt+0x24c58>
   375d0:	ldrsb	r0, [r5]
   375d4:	cmp	r0, #0
   375d8:	mov	r0, #0
   375dc:	movwmi	r0, #1
   375e0:	orr	r6, r6, r0
   375e4:	add	r4, r4, #1
   375e8:	cmp	r7, r4
   375ec:	beq	376a0 <__assert_fail@plt+0x24bf0>
   375f0:	add	r5, r3, r4, lsl #3
   375f4:	ldrb	r1, [r5, #4]
   375f8:	sub	r1, r1, #1
   375fc:	cmp	r1, #11
   37600:	bhi	37a40 <__assert_fail@plt+0x24f90>
   37604:	add	r0, pc, #0
   37608:	ldr	pc, [r0, r1, lsl #2]
   3760c:	ldrdeq	r7, [r3], -r0
   37610:	andeq	r7, r3, r4, ror #11
   37614:	andeq	r7, r3, ip, lsr r6
   37618:	andeq	r7, r3, r4, ror #11
   3761c:	muleq	r3, r0, r6
   37620:	andeq	r7, r3, r8, lsl #14
   37624:	andeq	r7, r3, r0, asr #20
   37628:	andeq	r7, r3, r4, ror #11
   3762c:	andeq	r7, r3, r4, ror #11
   37630:	andeq	r7, r3, r4, ror #11
   37634:	andeq	r7, r3, r4, ror #11
   37638:	andeq	r7, r3, r0, ror r6
   3763c:	ldr	r5, [r3, r4, lsl #3]
   37640:	ldr	r0, [r5, #16]
   37644:	cmp	r0, #0
   37648:	bne	37708 <__assert_fail@plt+0x24c58>
   3764c:	ldr	r0, [r5, #20]
   37650:	cmp	r0, #0
   37654:	ldreq	r0, [r5, #24]
   37658:	cmpeq	r0, #0
   3765c:	bne	37708 <__assert_fail@plt+0x24c58>
   37660:	ldr	r0, [r5, #28]
   37664:	cmp	r0, #0
   37668:	beq	375e4 <__assert_fail@plt+0x24b34>
   3766c:	b	37708 <__assert_fail@plt+0x24c58>
   37670:	ldr	r0, [r3, r4, lsl #3]
   37674:	sub	r0, r0, #16
   37678:	ror	r1, r0, #4
   3767c:	cmp	r1, #7
   37680:	bhi	37708 <__assert_fail@plt+0x24c58>
   37684:	tst	lr, ip, lsl r1
   37688:	bne	375e4 <__assert_fail@plt+0x24b34>
   3768c:	b	37708 <__assert_fail@plt+0x24c58>
   37690:	mov	r8, #1
   37694:	add	r4, r4, #1
   37698:	cmp	r7, r4
   3769c:	bne	375f0 <__assert_fail@plt+0x24b40>
   376a0:	orr	r0, r6, r8
   376a4:	tst	r0, #1
   376a8:	beq	375a0 <__assert_fail@plt+0x24af0>
   376ac:	mov	r2, #0
   376b0:	mov	r7, #7
   376b4:	add	r3, r3, r2, lsl #3
   376b8:	ldr	r6, [r3, #4]
   376bc:	uxtb	r1, r6
   376c0:	cmp	r1, #5
   376c4:	beq	376e4 <__assert_fail@plt+0x24c34>
   376c8:	cmp	r1, #1
   376cc:	bne	376ec <__assert_fail@plt+0x24c3c>
   376d0:	ldrsb	r0, [r3]
   376d4:	cmn	r0, #1
   376d8:	bicle	r0, r6, #2097152	; 0x200000
   376dc:	strle	r0, [r3, #4]
   376e0:	b	376ec <__assert_fail@plt+0x24c3c>
   376e4:	bfi	r6, r7, #0, #8
   376e8:	str	r6, [r3, #4]
   376ec:	ldr	r1, [sp, #20]
   376f0:	add	r2, r2, #1
   376f4:	ldr	r0, [r1, #8]
   376f8:	cmp	r2, r0
   376fc:	bcs	37a04 <__assert_fail@plt+0x24f54>
   37700:	ldr	r3, [r1]
   37704:	b	376b4 <__assert_fail@plt+0x24c04>
   37708:	ldr	r8, [sp, #20]
   3770c:	ldr	r1, [r8, #52]	; 0x34
   37710:	ldr	r0, [r8, #24]
   37714:	ldr	r1, [r1, #12]
   37718:	ldr	r1, [r1, #28]
   3771c:	str	r1, [r8, #72]	; 0x48
   37720:	add	r1, r1, r1, lsl #1
   37724:	add	r5, r0, r1, lsl #2
   37728:	mov	r4, r5
   3772c:	ldr	r7, [r4, #4]!
   37730:	str	r7, [fp, #-44]	; 0xffffffd4
   37734:	ldr	r0, [r4]
   37738:	cmp	r0, #1
   3773c:	blt	37894 <__assert_fail@plt+0x24de4>
   37740:	lsl	r0, r7, #2
   37744:	str	r7, [fp, #-48]	; 0xffffffd0
   37748:	bl	35350 <__assert_fail@plt+0x228a0>
   3774c:	cmp	r0, #0
   37750:	str	r0, [fp, #-40]	; 0xffffffd8
   37754:	beq	37a28 <__assert_fail@plt+0x24f78>
   37758:	mov	r6, r0
   3775c:	ldr	r0, [r4]
   37760:	ldr	r1, [r5, #8]
   37764:	lsl	r2, r0, #2
   37768:	mov	r0, r6
   3776c:	bl	124e0 <memcpy@plt>
   37770:	mov	r0, #0
   37774:	cmp	r7, #1
   37778:	str	r0, [fp, #-32]	; 0xffffffe0
   3777c:	blt	378a8 <__assert_fail@plt+0x24df8>
   37780:	ldr	r0, [sp, #20]
   37784:	ldr	r0, [r0, #76]	; 0x4c
   37788:	cmp	r0, #1
   3778c:	blt	378a8 <__assert_fail@plt+0x24df8>
   37790:	mov	r0, #0
   37794:	sub	r8, fp, #48	; 0x30
   37798:	mov	r9, #1
   3779c:	ldr	r2, [sp, #20]
   377a0:	ldr	r1, [r6, r0, lsl #2]
   377a4:	ldr	r2, [r2]
   377a8:	add	r3, r2, r1, lsl #3
   377ac:	ldrb	r3, [r3, #4]
   377b0:	cmp	r3, #4
   377b4:	bne	37880 <__assert_fail@plt+0x24dd0>
   377b8:	mov	r3, #0
   377bc:	cmp	r7, #1
   377c0:	bge	377d4 <__assert_fail@plt+0x24d24>
   377c4:	b	377f8 <__assert_fail@plt+0x24d48>
   377c8:	add	r3, r3, #1
   377cc:	cmp	r7, r3
   377d0:	beq	37880 <__assert_fail@plt+0x24dd0>
   377d4:	ldr	r5, [r6, r3, lsl #2]
   377d8:	add	r4, r2, r5, lsl #3
   377dc:	ldrb	r4, [r4, #4]
   377e0:	cmp	r4, #9
   377e4:	bne	377c8 <__assert_fail@plt+0x24d18>
   377e8:	ldr	r4, [r2, r1, lsl #3]
   377ec:	ldr	r5, [r2, r5, lsl #3]
   377f0:	cmp	r5, r4
   377f4:	bne	377c8 <__assert_fail@plt+0x24d18>
   377f8:	cmp	r3, r7
   377fc:	beq	37880 <__assert_fail@plt+0x24dd0>
   37800:	ldr	r2, [sp, #20]
   37804:	add	r1, r1, r1, lsl #1
   37808:	cmp	r7, #1
   3780c:	ldr	r2, [r2, #20]
   37810:	add	r1, r2, r1, lsl #2
   37814:	ldr	r1, [r1, #8]
   37818:	ldr	ip, [r1]
   3781c:	blt	37858 <__assert_fail@plt+0x24da8>
   37820:	mov	r2, #0
   37824:	subs	r3, r7, #1
   37828:	beq	3784c <__assert_fail@plt+0x24d9c>
   3782c:	add	r5, r2, r3
   37830:	lsr	r4, r5, #1
   37834:	ldr	r1, [r6, r4, lsl #2]
   37838:	cmp	r1, ip
   3783c:	addlt	r2, r9, r5, lsr #1
   37840:	movge	r3, r4
   37844:	cmp	r2, r3
   37848:	bcc	3782c <__assert_fail@plt+0x24d7c>
   3784c:	ldr	r1, [r6, r2, lsl #2]
   37850:	cmp	r1, ip
   37854:	beq	37880 <__assert_fail@plt+0x24dd0>
   37858:	ldr	r0, [sp, #20]
   3785c:	add	r1, ip, ip, lsl #1
   37860:	ldr	r0, [r0, #24]
   37864:	add	r1, r0, r1, lsl #2
   37868:	mov	r0, r8
   3786c:	bl	41ea8 <__assert_fail@plt+0x2f3f8>
   37870:	cmp	r0, #0
   37874:	bne	379fc <__assert_fail@plt+0x24f4c>
   37878:	ldr	r7, [fp, #-44]	; 0xffffffd4
   3787c:	mov	r0, #0
   37880:	add	r0, r0, #1
   37884:	cmp	r0, r7
   37888:	bge	378a8 <__assert_fail@plt+0x24df8>
   3788c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   37890:	b	3779c <__assert_fail@plt+0x24cec>
   37894:	mov	r0, #0
   37898:	str	r0, [fp, #-44]	; 0xffffffd4
   3789c:	str	r0, [fp, #-48]	; 0xffffffd0
   378a0:	str	r0, [fp, #-40]	; 0xffffffd8
   378a4:	str	r0, [fp, #-32]	; 0xffffffe0
   378a8:	ldr	r8, [sp, #20]
   378ac:	sub	r0, fp, #32
   378b0:	sub	r2, fp, #48	; 0x30
   378b4:	mov	r3, #0
   378b8:	mov	r1, r8
   378bc:	bl	421c8 <__assert_fail@plt+0x2f718>
   378c0:	cmp	r0, #0
   378c4:	str	r0, [r8, #36]	; 0x24
   378c8:	beq	37948 <__assert_fail@plt+0x24e98>
   378cc:	ldrsb	r1, [r0, #52]	; 0x34
   378d0:	cmn	r1, #1
   378d4:	ble	378e8 <__assert_fail@plt+0x24e38>
   378d8:	str	r0, [r8, #40]	; 0x28
   378dc:	str	r0, [r8, #44]	; 0x2c
   378e0:	str	r0, [r8, #48]	; 0x30
   378e4:	b	3795c <__assert_fail@plt+0x24eac>
   378e8:	sub	r4, fp, #32
   378ec:	sub	r6, fp, #48	; 0x30
   378f0:	mov	r1, r8
   378f4:	mov	r3, #1
   378f8:	mov	r0, r4
   378fc:	mov	r2, r6
   37900:	bl	421c8 <__assert_fail@plt+0x2f718>
   37904:	str	r0, [r8, #40]	; 0x28
   37908:	mov	r0, r4
   3790c:	mov	r1, r8
   37910:	mov	r2, r6
   37914:	mov	r3, #2
   37918:	bl	421c8 <__assert_fail@plt+0x2f718>
   3791c:	str	r0, [r8, #44]	; 0x2c
   37920:	mov	r0, r4
   37924:	mov	r1, r8
   37928:	mov	r2, r6
   3792c:	mov	r3, #6
   37930:	bl	421c8 <__assert_fail@plt+0x2f718>
   37934:	str	r0, [r8, #48]	; 0x30
   37938:	ldr	r1, [r8, #40]	; 0x28
   3793c:	cmp	r1, #0
   37940:	cmpne	r0, #0
   37944:	bne	37950 <__assert_fail@plt+0x24ea0>
   37948:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3794c:	b	37968 <__assert_fail@plt+0x24eb8>
   37950:	ldr	r0, [r8, #44]	; 0x2c
   37954:	cmp	r0, #0
   37958:	beq	37948 <__assert_fail@plt+0x24e98>
   3795c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   37960:	bl	32910 <__assert_fail@plt+0x1fe60>
   37964:	mov	r0, #0
   37968:	str	r0, [fp, #-52]	; 0xffffffcc
   3796c:	ldr	r5, [sl]
   37970:	ldr	r0, [r5, #56]	; 0x38
   37974:	cmp	r0, #0
   37978:	beq	37990 <__assert_fail@plt+0x24ee0>
   3797c:	ldr	r4, [r0]
   37980:	bl	32910 <__assert_fail@plt+0x1fe60>
   37984:	cmp	r4, #0
   37988:	mov	r0, r4
   3798c:	bne	3797c <__assert_fail@plt+0x24ecc>
   37990:	mov	r0, #31
   37994:	mov	r4, #0
   37998:	str	r0, [r5, #64]	; 0x40
   3799c:	str	r4, [r5, #52]	; 0x34
   379a0:	str	r4, [r5, #56]	; 0x38
   379a4:	ldr	r0, [r5, #16]
   379a8:	bl	32910 <__assert_fail@plt+0x1fe60>
   379ac:	str	r4, [r5, #16]
   379b0:	ldr	r0, [sp, #40]	; 0x28
   379b4:	bl	32910 <__assert_fail@plt+0x1fe60>
   379b8:	ldr	r0, [sp, #44]	; 0x2c
   379bc:	bl	32910 <__assert_fail@plt+0x1fe60>
   379c0:	ldrb	r0, [sp, #107]	; 0x6b
   379c4:	cmp	r0, #0
   379c8:	beq	379d4 <__assert_fail@plt+0x24f24>
   379cc:	ldr	r0, [sp, #36]	; 0x24
   379d0:	bl	32910 <__assert_fail@plt+0x1fe60>
   379d4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   379d8:	cmp	r0, #0
   379dc:	bne	37a0c <__assert_fail@plt+0x24f5c>
   379e0:	mov	r0, r4
   379e4:	sub	sp, fp, #28
   379e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   379ec:	ldr	sl, [sp, #16]
   379f0:	mov	r0, #12
   379f4:	ldr	r9, [sp, #20]
   379f8:	b	36bb4 <__assert_fail@plt+0x24104>
   379fc:	ldr	r8, [sp, #20]
   37a00:	b	37968 <__assert_fail@plt+0x24eb8>
   37a04:	ldrb	r2, [r1, #88]	; 0x58
   37a08:	b	375a0 <__assert_fail@plt+0x24af0>
   37a0c:	ldr	r0, [sp, #8]
   37a10:	cmp	r0, #0
   37a14:	beq	37a20 <__assert_fail@plt+0x24f70>
   37a18:	add	r0, r8, #136	; 0x88
   37a1c:	bl	1242c <pthread_mutex_destroy@plt>
   37a20:	mov	r0, r8
   37a24:	b	36c38 <__assert_fail@plt+0x24188>
   37a28:	mov	r0, #0
   37a2c:	str	r0, [fp, #-48]	; 0xffffffd0
   37a30:	str	r0, [fp, #-44]	; 0xffffffd4
   37a34:	mov	r0, #12
   37a38:	str	r0, [fp, #-32]	; 0xffffffe0
   37a3c:	b	37968 <__assert_fail@plt+0x24eb8>
   37a40:	bl	12a5c <abort@plt>
   37a44:	movw	r2, #20168	; 0x4ec8
   37a48:	movt	r2, #6
   37a4c:	ldr	r1, [r2]
   37a50:	str	r0, [r2]
   37a54:	mov	r0, r1
   37a58:	bx	lr
   37a5c:	push	{r4, r5, r6, sl, fp, lr}
   37a60:	add	fp, sp, #16
   37a64:	ldr	r5, [r0, #16]
   37a68:	ldr	r6, [r0]
   37a6c:	mov	r4, r0
   37a70:	mov	r1, #0
   37a74:	mov	r2, #256	; 0x100
   37a78:	mov	r0, r5
   37a7c:	bl	12834 <memset@plt>
   37a80:	ldr	r1, [r6, #36]	; 0x24
   37a84:	mov	r0, r4
   37a88:	mov	r2, r5
   37a8c:	bl	37af4 <__assert_fail@plt+0x25044>
   37a90:	ldr	r0, [r6, #36]	; 0x24
   37a94:	ldr	r1, [r6, #40]	; 0x28
   37a98:	cmp	r0, r1
   37a9c:	beq	37ab0 <__assert_fail@plt+0x25000>
   37aa0:	mov	r0, r4
   37aa4:	mov	r2, r5
   37aa8:	bl	37af4 <__assert_fail@plt+0x25044>
   37aac:	ldr	r0, [r6, #36]	; 0x24
   37ab0:	ldr	r1, [r6, #44]	; 0x2c
   37ab4:	cmp	r0, r1
   37ab8:	beq	37acc <__assert_fail@plt+0x2501c>
   37abc:	mov	r0, r4
   37ac0:	mov	r2, r5
   37ac4:	bl	37af4 <__assert_fail@plt+0x25044>
   37ac8:	ldr	r0, [r6, #36]	; 0x24
   37acc:	ldr	r1, [r6, #48]	; 0x30
   37ad0:	cmp	r0, r1
   37ad4:	movne	r0, r4
   37ad8:	movne	r2, r5
   37adc:	blne	37af4 <__assert_fail@plt+0x25044>
   37ae0:	ldrb	r0, [r4, #28]
   37ae4:	orr	r0, r0, #8
   37ae8:	strb	r0, [r4, #28]
   37aec:	mov	r0, #0
   37af0:	pop	{r4, r5, r6, sl, fp, pc}
   37af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37af8:	add	fp, sp, #28
   37afc:	sub	sp, sp, #348	; 0x15c
   37b00:	ldr	r3, [r0]
   37b04:	mov	r8, r0
   37b08:	mov	sl, r2
   37b0c:	mov	r2, #0
   37b10:	str	r2, [sp, #40]	; 0x28
   37b14:	ldr	r0, [r3, #92]	; 0x5c
   37b18:	cmp	r0, #1
   37b1c:	bne	37b2c <__assert_fail@plt+0x2507c>
   37b20:	ldrb	r0, [r8, #14]
   37b24:	ubfx	r0, r0, #6, #1
   37b28:	str	r0, [sp, #40]	; 0x28
   37b2c:	ldr	r0, [r1, #8]
   37b30:	cmp	r0, #1
   37b34:	blt	385dc <__assert_fail@plt+0x25b2c>
   37b38:	mvn	r0, #5
   37b3c:	mov	r7, #0
   37b40:	mov	lr, #1
   37b44:	mov	r2, #0
   37b48:	str	r8, [sp, #28]
   37b4c:	str	sl, [sp, #68]	; 0x44
   37b50:	str	r1, [sp, #48]	; 0x30
   37b54:	str	r3, [sp, #64]	; 0x40
   37b58:	sub	r0, r0, sl
   37b5c:	str	r0, [sp, #24]
   37b60:	add	r0, sl, #7
   37b64:	str	r0, [sp, #20]
   37b68:	add	r0, sl, #5
   37b6c:	str	r0, [sp, #16]
   37b70:	add	r0, sl, #4
   37b74:	str	r0, [sp, #12]
   37b78:	add	r0, sl, #3
   37b7c:	str	r0, [sp, #8]
   37b80:	add	r0, sp, #72	; 0x48
   37b84:	add	r0, r0, #1
   37b88:	str	r0, [sp, #4]
   37b8c:	b	37bb0 <__assert_fail@plt+0x25100>
   37b90:	mov	lr, #1
   37b94:	ldr	r1, [sp, #48]	; 0x30
   37b98:	ldr	r2, [sp, #52]	; 0x34
   37b9c:	ldr	r3, [sp, #64]	; 0x40
   37ba0:	ldr	r0, [r1, #8]
   37ba4:	add	r2, r2, #1
   37ba8:	cmp	r2, r0
   37bac:	bge	385dc <__assert_fail@plt+0x25b2c>
   37bb0:	ldr	r0, [r1, #12]
   37bb4:	str	r2, [sp, #52]	; 0x34
   37bb8:	ldr	r6, [r0, r2, lsl #2]
   37bbc:	ldr	r2, [r3]
   37bc0:	add	r0, r2, r6, lsl #3
   37bc4:	ldrb	r4, [r0, #4]
   37bc8:	sub	r0, r4, #1
   37bcc:	cmp	r0, #6
   37bd0:	bhi	37b94 <__assert_fail@plt+0x250e4>
   37bd4:	add	r1, pc, #0
   37bd8:	ldr	pc, [r1, r0, lsl #2]
   37bdc:	strdeq	r7, [r3], -r8
   37be0:			; <UNDEFINED> instruction: 0x000385b8
   37be4:	andeq	r7, r3, r0, lsl #26
   37be8:	muleq	r3, r4, fp
   37bec:			; <UNDEFINED> instruction: 0x000385b8
   37bf0:			; <UNDEFINED> instruction: 0x00037db8
   37bf4:			; <UNDEFINED> instruction: 0x000385b8
   37bf8:	ldrb	r4, [r2, r6, lsl #3]
   37bfc:	ldr	r0, [sp, #40]	; 0x28
   37c00:	cmp	r0, #0
   37c04:	strb	lr, [sl, r4]
   37c08:	beq	37c20 <__assert_fail@plt+0x25170>
   37c0c:	bl	12738 <__ctype_tolower_loc@plt>
   37c10:	ldr	r0, [r0]
   37c14:	mov	lr, #1
   37c18:	ldr	r0, [r0, r4, lsl #2]
   37c1c:	strb	lr, [sl, r0]
   37c20:	ldrb	r0, [r8, #14]
   37c24:	tst	r0, #64	; 0x40
   37c28:	beq	37b94 <__assert_fail@plt+0x250e4>
   37c2c:	ldr	r0, [sp, #64]	; 0x40
   37c30:	ldr	r0, [r0, #92]	; 0x5c
   37c34:	cmp	r0, #2
   37c38:	blt	37b94 <__assert_fail@plt+0x250e4>
   37c3c:	ldr	ip, [sp, #64]	; 0x40
   37c40:	add	r1, r6, #1
   37c44:	movw	r4, #1
   37c48:	mov	r9, #1
   37c4c:	add	r5, sp, #72	; 0x48
   37c50:	movt	r4, #32
   37c54:	ldr	r0, [ip]
   37c58:	ldrb	r0, [r0, r6, lsl #3]
   37c5c:	strb	r0, [sp, #72]	; 0x48
   37c60:	ldr	r0, [ip, #8]
   37c64:	cmp	r1, r0
   37c68:	ldr	r0, [sp, #4]
   37c6c:	bcs	37cb0 <__assert_fail@plt+0x25200>
   37c70:	ldr	r0, [sp, #4]
   37c74:	ldr	r1, [ip]
   37c78:	add	r3, r4, #254	; 0xfe
   37c7c:	add	r1, r1, r6, lsl #3
   37c80:	ldr	r2, [r1, #12]
   37c84:	and	r2, r2, r3
   37c88:	cmp	r2, r4
   37c8c:	bne	37cb0 <__assert_fail@plt+0x25200>
   37c90:	ldrb	r1, [r1, #8]
   37c94:	add	r3, r6, #2
   37c98:	strb	r1, [r0], #1
   37c9c:	add	r1, r6, #1
   37ca0:	ldr	r2, [ip, #8]
   37ca4:	mov	r6, r1
   37ca8:	cmp	r3, r2
   37cac:	bcc	37c74 <__assert_fail@plt+0x251c4>
   37cb0:	sub	r4, r0, r5
   37cb4:	sub	r0, fp, #36	; 0x24
   37cb8:	mov	r1, r5
   37cbc:	sub	r3, fp, #48	; 0x30
   37cc0:	str	r7, [fp, #-44]	; 0xffffffd4
   37cc4:	str	r7, [fp, #-48]	; 0xffffffd0
   37cc8:	mov	r2, r4
   37ccc:	bl	35380 <__assert_fail@plt+0x228d0>
   37cd0:	cmp	r0, r4
   37cd4:	bne	37b90 <__assert_fail@plt+0x250e0>
   37cd8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   37cdc:	bl	12510 <towlower@plt>
   37ce0:	mov	r1, r0
   37ce4:	mov	r0, r5
   37ce8:	sub	r2, fp, #48	; 0x30
   37cec:	bl	123b4 <wcrtomb@plt>
   37cf0:	cmn	r0, #1
   37cf4:	ldrbne	r0, [sp, #72]	; 0x48
   37cf8:	strbne	r9, [sl, r0]
   37cfc:	b	37b90 <__assert_fail@plt+0x250e0>
   37d00:	ldr	r0, [sp, #40]	; 0x28
   37d04:	cmp	r0, #0
   37d08:	beq	37f9c <__assert_fail@plt+0x254ec>
   37d0c:	ldr	r0, [r2, r6, lsl #3]
   37d10:	ldr	r1, [sp, #16]
   37d14:	ldr	r2, [sp, #12]
   37d18:	ldr	r7, [sp, #8]
   37d1c:	mov	lr, #0
   37d20:	mov	r3, #4
   37d24:	str	r6, [sp, #44]	; 0x2c
   37d28:	ldr	r0, [r0]
   37d2c:	str	r0, [sp, #60]	; 0x3c
   37d30:	ldr	r0, [sp, #20]
   37d34:	b	37d60 <__assert_fail@plt+0x252b0>
   37d38:	ldr	r1, [sp, #68]	; 0x44
   37d3c:	strb	r2, [r1, r0]
   37d40:	add	lr, r8, #1
   37d44:	add	r0, r6, #1
   37d48:	add	r1, r5, #1
   37d4c:	add	r2, r9, #1
   37d50:	add	r7, sl, #1
   37d54:	add	r3, r4, #4
   37d58:	cmp	lr, #32
   37d5c:	beq	38144 <__assert_fail@plt+0x25694>
   37d60:	mov	r6, r0
   37d64:	ldr	r0, [sp, #60]	; 0x3c
   37d68:	mov	r9, r2
   37d6c:	mov	r2, #1
   37d70:	mov	r8, lr
   37d74:	mov	r4, r3
   37d78:	mov	sl, r7
   37d7c:	mov	r5, r1
   37d80:	tst	r0, r2, lsl lr
   37d84:	beq	37d40 <__assert_fail@plt+0x25290>
   37d88:	ldr	r0, [sp, #68]	; 0x44
   37d8c:	strb	r2, [r0, r8]
   37d90:	add	r0, r8, #128	; 0x80
   37d94:	lsr	r0, r0, #7
   37d98:	cmp	r0, #2
   37d9c:	mov	r0, r8
   37da0:	bhi	37d38 <__assert_fail@plt+0x25288>
   37da4:	bl	12738 <__ctype_tolower_loc@plt>
   37da8:	ldr	r0, [r0]
   37dac:	mov	r2, #1
   37db0:	ldr	r0, [r0, r8, lsl #2]
   37db4:	b	37d38 <__assert_fail@plt+0x25288>
   37db8:	ldr	r0, [sp, #64]	; 0x40
   37dbc:	ldr	r4, [r2, r6, lsl #3]
   37dc0:	ldr	r0, [r0, #92]	; 0x5c
   37dc4:	cmp	r0, #2
   37dc8:	blt	37e40 <__assert_fail@plt+0x25390>
   37dcc:	ldr	r0, [r4, #36]	; 0x24
   37dd0:	cmp	r0, #0
   37dd4:	bne	37df0 <__assert_fail@plt+0x25340>
   37dd8:	ldrb	r0, [r4, #16]
   37ddc:	tst	r0, #1
   37de0:	bne	37df0 <__assert_fail@plt+0x25340>
   37de4:	ldr	r0, [r4, #32]
   37de8:	cmp	r0, #0
   37dec:	beq	37e40 <__assert_fail@plt+0x25390>
   37df0:	add	r4, sp, #72	; 0x48
   37df4:	sub	r5, fp, #48	; 0x30
   37df8:	strb	r7, [fp, #-48]	; 0xffffffd0
   37dfc:	mov	r0, #0
   37e00:	mov	r1, r5
   37e04:	mov	r2, #1
   37e08:	mov	r3, r4
   37e0c:	str	r7, [sp, #76]	; 0x4c
   37e10:	str	r7, [sp, #72]	; 0x48
   37e14:	bl	35380 <__assert_fail@plt+0x228d0>
   37e18:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   37e1c:	cmn	r0, #2
   37e20:	mov	lr, #1
   37e24:	add	r0, r1, #1
   37e28:	strbeq	lr, [sl, r1]
   37e2c:	uxtb	r1, r0
   37e30:	strb	r0, [fp, #-48]	; 0xffffffd0
   37e34:	cmp	r1, r0
   37e38:	beq	37dfc <__assert_fail@plt+0x2534c>
   37e3c:	b	37b94 <__assert_fail@plt+0x250e4>
   37e40:	ldr	r0, [r4, #20]
   37e44:	cmp	r0, #1
   37e48:	blt	37b94 <__assert_fail@plt+0x250e4>
   37e4c:	ldr	r0, [sp, #40]	; 0x28
   37e50:	mov	r5, #0
   37e54:	cmp	r0, #0
   37e58:	bne	37e74 <__assert_fail@plt+0x253c4>
   37e5c:	b	37f1c <__assert_fail@plt+0x2546c>
   37e60:	ldr	r0, [r4, #20]
   37e64:	add	r5, r5, #1
   37e68:	mov	r7, #0
   37e6c:	cmp	r5, r0
   37e70:	bge	37b94 <__assert_fail@plt+0x250e4>
   37e74:	str	r7, [fp, #-44]	; 0xffffffd4
   37e78:	str	r7, [fp, #-48]	; 0xffffffd0
   37e7c:	sub	r9, fp, #48	; 0x30
   37e80:	add	r7, sp, #72	; 0x48
   37e84:	ldr	r0, [r4]
   37e88:	mov	r2, r9
   37e8c:	ldr	r1, [r0, r5, lsl #2]
   37e90:	mov	r0, r7
   37e94:	bl	123b4 <wcrtomb@plt>
   37e98:	mov	lr, #1
   37e9c:	cmn	r0, #1
   37ea0:	beq	37ec0 <__assert_fail@plt+0x25410>
   37ea4:	ldrb	r6, [sp, #72]	; 0x48
   37ea8:	strb	lr, [sl, r6]
   37eac:	bl	12738 <__ctype_tolower_loc@plt>
   37eb0:	ldr	r0, [r0]
   37eb4:	mov	lr, #1
   37eb8:	ldr	r0, [r0, r6, lsl #2]
   37ebc:	strb	lr, [sl, r0]
   37ec0:	ldrb	r0, [r8, #14]
   37ec4:	tst	r0, #64	; 0x40
   37ec8:	beq	37e60 <__assert_fail@plt+0x253b0>
   37ecc:	ldr	r0, [sp, #64]	; 0x40
   37ed0:	ldr	r0, [r0, #92]	; 0x5c
   37ed4:	cmp	r0, #2
   37ed8:	blt	37e60 <__assert_fail@plt+0x253b0>
   37edc:	ldr	r0, [r4]
   37ee0:	ldr	r0, [r0, r5, lsl #2]
   37ee4:	bl	12510 <towlower@plt>
   37ee8:	mov	r1, r0
   37eec:	mov	r0, r7
   37ef0:	mov	r2, r9
   37ef4:	bl	123b4 <wcrtomb@plt>
   37ef8:	cmn	r0, #1
   37efc:	mov	lr, #1
   37f00:	ldrbne	r0, [sp, #72]	; 0x48
   37f04:	strbne	lr, [sl, r0]
   37f08:	b	37e60 <__assert_fail@plt+0x253b0>
   37f0c:	ldr	r0, [r4, #20]
   37f10:	add	r5, r5, #1
   37f14:	cmp	r5, r0
   37f18:	bge	37b94 <__assert_fail@plt+0x250e4>
   37f1c:	str	r7, [fp, #-44]	; 0xffffffd4
   37f20:	str	r7, [fp, #-48]	; 0xffffffd0
   37f24:	sub	r9, fp, #48	; 0x30
   37f28:	add	r6, sp, #72	; 0x48
   37f2c:	ldr	r0, [r4]
   37f30:	mov	r2, r9
   37f34:	ldr	r1, [r0, r5, lsl #2]
   37f38:	mov	r0, r6
   37f3c:	bl	123b4 <wcrtomb@plt>
   37f40:	cmn	r0, #1
   37f44:	mov	lr, #1
   37f48:	ldrbne	r0, [sp, #72]	; 0x48
   37f4c:	strbne	lr, [sl, r0]
   37f50:	ldrb	r0, [r8, #14]
   37f54:	tst	r0, #64	; 0x40
   37f58:	beq	37f0c <__assert_fail@plt+0x2545c>
   37f5c:	ldr	r0, [sp, #64]	; 0x40
   37f60:	ldr	r0, [r0, #92]	; 0x5c
   37f64:	cmp	r0, #2
   37f68:	blt	37f0c <__assert_fail@plt+0x2545c>
   37f6c:	ldr	r0, [r4]
   37f70:	ldr	r0, [r0, r5, lsl #2]
   37f74:	bl	12510 <towlower@plt>
   37f78:	mov	r1, r0
   37f7c:	mov	r0, r6
   37f80:	mov	r2, r9
   37f84:	bl	123b4 <wcrtomb@plt>
   37f88:	cmn	r0, #1
   37f8c:	mov	lr, #1
   37f90:	ldrbne	r0, [sp, #72]	; 0x48
   37f94:	strbne	lr, [sl, r0]
   37f98:	b	37f0c <__assert_fail@plt+0x2545c>
   37f9c:	mov	r0, #0
   37fa0:	mov	r1, #31
   37fa4:	ldr	r2, [r2, r6, lsl #3]
   37fa8:	ldr	r2, [r2, r0]
   37fac:	tst	r2, #1
   37fb0:	addne	r3, sl, r1
   37fb4:	strbne	lr, [r3, #-31]	; 0xffffffe1
   37fb8:	tst	r2, #2
   37fbc:	addne	r3, sl, r0, lsl #3
   37fc0:	strbne	lr, [r3, #1]
   37fc4:	tst	r2, #4
   37fc8:	addne	r3, sl, r0, lsl #3
   37fcc:	strbne	lr, [r3, #2]
   37fd0:	tst	r2, #8
   37fd4:	addne	r3, sl, r0, lsl #3
   37fd8:	strbne	lr, [r3, #3]
   37fdc:	tst	r2, #16
   37fe0:	addne	r3, sl, r0, lsl #3
   37fe4:	strbne	lr, [r3, #4]
   37fe8:	tst	r2, #32
   37fec:	addne	r3, sl, r0, lsl #3
   37ff0:	strbne	lr, [r3, #5]
   37ff4:	tst	r2, #64	; 0x40
   37ff8:	addne	r3, sl, r0, lsl #3
   37ffc:	strbne	lr, [r3, #6]
   38000:	tst	r2, #128	; 0x80
   38004:	addne	r3, sl, r0, lsl #3
   38008:	strbne	lr, [r3, #7]
   3800c:	tst	r2, #256	; 0x100
   38010:	addne	r3, sl, r0, lsl #3
   38014:	strbne	lr, [r3, #8]
   38018:	tst	r2, #512	; 0x200
   3801c:	addne	r3, sl, r0, lsl #3
   38020:	strbne	lr, [r3, #9]
   38024:	tst	r2, #1024	; 0x400
   38028:	addne	r3, sl, r0, lsl #3
   3802c:	strbne	lr, [r3, #10]
   38030:	tst	r2, #2048	; 0x800
   38034:	addne	r3, sl, r0, lsl #3
   38038:	strbne	lr, [r3, #11]
   3803c:	tst	r2, #4096	; 0x1000
   38040:	addne	r3, sl, r0, lsl #3
   38044:	strbne	lr, [r3, #12]
   38048:	tst	r2, #8192	; 0x2000
   3804c:	addne	r3, sl, r0, lsl #3
   38050:	strbne	lr, [r3, #13]
   38054:	tst	r2, #16384	; 0x4000
   38058:	addne	r3, sl, r0, lsl #3
   3805c:	strbne	lr, [r3, #14]
   38060:	tst	r2, #32768	; 0x8000
   38064:	addne	r3, sl, r0, lsl #3
   38068:	strbne	lr, [r3, #15]
   3806c:	tst	r2, #65536	; 0x10000
   38070:	addne	r3, sl, r0, lsl #3
   38074:	strbne	lr, [r3, #16]
   38078:	tst	r2, #131072	; 0x20000
   3807c:	addne	r3, sl, r0, lsl #3
   38080:	strbne	lr, [r3, #17]
   38084:	tst	r2, #262144	; 0x40000
   38088:	addne	r3, sl, r0, lsl #3
   3808c:	strbne	lr, [r3, #18]
   38090:	tst	r2, #524288	; 0x80000
   38094:	addne	r3, sl, r0, lsl #3
   38098:	strbne	lr, [r3, #19]
   3809c:	tst	r2, #1048576	; 0x100000
   380a0:	addne	r3, sl, r0, lsl #3
   380a4:	strbne	lr, [r3, #20]
   380a8:	tst	r2, #2097152	; 0x200000
   380ac:	addne	r3, sl, r0, lsl #3
   380b0:	strbne	lr, [r3, #21]
   380b4:	tst	r2, #4194304	; 0x400000
   380b8:	addne	r3, sl, r0, lsl #3
   380bc:	strbne	lr, [r3, #22]
   380c0:	tst	r2, #8388608	; 0x800000
   380c4:	addne	r3, sl, r0, lsl #3
   380c8:	strbne	lr, [r3, #23]
   380cc:	tst	r2, #16777216	; 0x1000000
   380d0:	addne	r3, sl, r0, lsl #3
   380d4:	strbne	lr, [r3, #24]
   380d8:	tst	r2, #33554432	; 0x2000000
   380dc:	addne	r3, sl, r0, lsl #3
   380e0:	strbne	lr, [r3, #25]
   380e4:	tst	r2, #67108864	; 0x4000000
   380e8:	addne	r3, sl, r0, lsl #3
   380ec:	strbne	lr, [r3, #26]
   380f0:	tst	r2, #134217728	; 0x8000000
   380f4:	addne	r3, sl, r0, lsl #3
   380f8:	strbne	lr, [r3, #27]
   380fc:	tst	r2, #268435456	; 0x10000000
   38100:	addne	r3, sl, r0, lsl #3
   38104:	strbne	lr, [r3, #28]
   38108:	tst	r2, #536870912	; 0x20000000
   3810c:	addne	r3, sl, r0, lsl #3
   38110:	strbne	lr, [r3, #29]
   38114:	tst	r2, #1073741824	; 0x40000000
   38118:	addne	r3, sl, r0, lsl #3
   3811c:	strbne	lr, [r3, #30]
   38120:	cmn	r2, #1
   38124:	strble	lr, [sl, r1]
   38128:	cmp	r0, #28
   3812c:	beq	37b94 <__assert_fail@plt+0x250e4>
   38130:	ldr	r2, [sp, #64]	; 0x40
   38134:	add	r1, r1, #32
   38138:	add	r0, r0, #4
   3813c:	ldr	r2, [r2]
   38140:	b	37fa4 <__assert_fail@plt+0x254f4>
   38144:	ldr	r0, [sp, #68]	; 0x44
   38148:	ldr	r1, [sp, #44]	; 0x2c
   3814c:	mov	ip, r5
   38150:	mov	r5, r8
   38154:	str	r8, [sp, #36]	; 0x24
   38158:	add	r3, r0, lr
   3815c:	ldr	r0, [sp, #64]	; 0x40
   38160:	ldr	r0, [r0]
   38164:	ldr	r0, [r0, r1, lsl #3]
   38168:	mov	r1, ip
   3816c:	ldr	r0, [r0, #4]
   38170:	str	r0, [sp, #60]	; 0x3c
   38174:	mov	r0, #0
   38178:	b	381e0 <__assert_fail@plt+0x25730>
   3817c:	mov	r9, r7
   38180:	str	sl, [sp, #56]	; 0x38
   38184:	mov	r6, ip
   38188:	mov	sl, lr
   3818c:	mov	r7, r3
   38190:	bl	12738 <__ctype_tolower_loc@plt>
   38194:	ldr	r0, [r0]
   38198:	mov	lr, sl
   3819c:	ldr	sl, [sp, #56]	; 0x38
   381a0:	ldr	r1, [sp, #68]	; 0x44
   381a4:	mov	r3, r7
   381a8:	mov	r7, r9
   381ac:	mov	ip, r6
   381b0:	mov	r2, #1
   381b4:	ldr	r0, [r0, r4]
   381b8:	strb	r2, [r1, r0]
   381bc:	add	r0, r8, #1
   381c0:	mov	r2, sl
   381c4:	add	r6, ip, #1
   381c8:	add	r1, r7, #1
   381cc:	add	r9, r5, #1
   381d0:	add	sl, sl, #1
   381d4:	add	r4, r4, #4
   381d8:	cmp	r0, #32
   381dc:	beq	38228 <__assert_fail@plt+0x25778>
   381e0:	mov	r7, r1
   381e4:	ldr	r1, [sp, #60]	; 0x3c
   381e8:	mov	r8, r0
   381ec:	mov	r0, #1
   381f0:	mov	r5, r9
   381f4:	mov	ip, r6
   381f8:	tst	r1, r0, lsl r8
   381fc:	beq	381bc <__assert_fail@plt+0x2570c>
   38200:	strb	r0, [r3, r8]
   38204:	add	r0, lr, r8
   38208:	add	r0, r0, #128	; 0x80
   3820c:	lsr	r0, r0, #7
   38210:	cmp	r0, #2
   38214:	bls	3817c <__assert_fail@plt+0x256cc>
   38218:	ldr	r1, [sp, #68]	; 0x44
   3821c:	add	r0, lr, r8
   38220:	mov	r2, #1
   38224:	b	381b8 <__assert_fail@plt+0x25708>
   38228:	add	r9, lr, r0
   3822c:	ldr	r0, [sp, #64]	; 0x40
   38230:	ldr	r1, [sp, #44]	; 0x2c
   38234:	mov	lr, #1
   38238:	mov	r6, r2
   3823c:	str	r8, [sp, #60]	; 0x3c
   38240:	ldr	r0, [r0]
   38244:	ldr	r0, [r0, r1, lsl #3]
   38248:	ldr	sl, [r0, #8]
   3824c:	mov	r0, #0
   38250:	b	3827c <__assert_fail@plt+0x257cc>
   38254:	ldr	r7, [sp, #68]	; 0x44
   38258:	strb	lr, [r7, r0]
   3825c:	add	r0, r1, #1
   38260:	add	ip, r2, #1
   38264:	add	r7, r3, #1
   38268:	add	r5, r4, #1
   3826c:	add	r6, r8, #1
   38270:	add	r9, r9, #1
   38274:	cmp	r0, #32
   38278:	beq	382e8 <__assert_fail@plt+0x25838>
   3827c:	tst	sl, lr, lsl r0
   38280:	mov	r1, r0
   38284:	mov	r8, r6
   38288:	mov	r4, r5
   3828c:	mov	r3, r7
   38290:	mov	r2, ip
   38294:	beq	3825c <__assert_fail@plt+0x257ac>
   38298:	ldr	r0, [sp, #68]	; 0x44
   3829c:	strb	lr, [r0, r9]
   382a0:	add	r0, r9, #128	; 0x80
   382a4:	lsr	r0, r0, #7
   382a8:	cmp	r0, #2
   382ac:	mov	r0, r9
   382b0:	bhi	38254 <__assert_fail@plt+0x257a4>
   382b4:	mov	r6, sl
   382b8:	mov	r7, r1
   382bc:	mov	r5, r2
   382c0:	mov	sl, r3
   382c4:	bl	12738 <__ctype_tolower_loc@plt>
   382c8:	ldr	r0, [r0]
   382cc:	mov	r3, sl
   382d0:	mov	sl, r6
   382d4:	mov	r2, r5
   382d8:	mov	r1, r7
   382dc:	mov	lr, #1
   382e0:	ldr	r0, [r0, r9, lsl #2]
   382e4:	b	38254 <__assert_fail@plt+0x257a4>
   382e8:	ldr	r0, [sp, #64]	; 0x40
   382ec:	str	r1, [sp, #56]	; 0x38
   382f0:	ldr	r1, [sp, #44]	; 0x2c
   382f4:	ldr	r0, [r0]
   382f8:	ldr	r0, [r0, r1, lsl #3]
   382fc:	ldr	r5, [r0, #12]
   38300:	mov	r0, #0
   38304:	b	38334 <__assert_fail@plt+0x25884>
   38308:	ldr	r1, [sp, #68]	; 0x44
   3830c:	strb	lr, [r1, r0]
   38310:	mov	r1, r4
   38314:	add	r0, r1, #1
   38318:	add	r2, sl, #1
   3831c:	add	r3, r7, #1
   38320:	add	r4, r6, #1
   38324:	add	r8, r8, #1
   38328:	add	r9, r9, #1
   3832c:	cmp	r0, #32
   38330:	beq	3837c <__assert_fail@plt+0x258cc>
   38334:	tst	r5, lr, lsl r0
   38338:	mov	r1, r0
   3833c:	mov	r6, r4
   38340:	mov	r7, r3
   38344:	mov	sl, r2
   38348:	beq	38314 <__assert_fail@plt+0x25864>
   3834c:	add	r0, r9, #128	; 0x80
   38350:	mov	r4, r1
   38354:	strb	lr, [r8]
   38358:	lsr	r0, r0, #7
   3835c:	cmp	r0, #2
   38360:	mov	r0, r9
   38364:	bhi	38308 <__assert_fail@plt+0x25858>
   38368:	bl	12738 <__ctype_tolower_loc@plt>
   3836c:	ldr	r0, [r0]
   38370:	mov	lr, #1
   38374:	ldr	r0, [r0, r9, lsl #2]
   38378:	b	38308 <__assert_fail@plt+0x25858>
   3837c:	ldr	r0, [sp, #64]	; 0x40
   38380:	str	r1, [sp, #32]
   38384:	ldr	r1, [sp, #44]	; 0x2c
   38388:	ldr	r0, [r0]
   3838c:	ldr	r0, [r0, r1, lsl #3]
   38390:	ldr	r2, [r0, #16]
   38394:	mov	r0, #0
   38398:	b	383c0 <__assert_fail@plt+0x25910>
   3839c:	ldr	r1, [sp, #68]	; 0x44
   383a0:	strb	lr, [r1, r0]
   383a4:	add	r0, r8, #1
   383a8:	add	sl, r5, #1
   383ac:	add	r7, r4, #1
   383b0:	add	r6, r6, #1
   383b4:	add	r9, r9, #1
   383b8:	cmp	r0, #32
   383bc:	beq	38408 <__assert_fail@plt+0x25958>
   383c0:	tst	r2, lr, lsl r0
   383c4:	mov	r8, r0
   383c8:	mov	r4, r7
   383cc:	mov	r5, sl
   383d0:	beq	383a4 <__assert_fail@plt+0x258f4>
   383d4:	add	r0, r9, #128	; 0x80
   383d8:	strb	lr, [r6]
   383dc:	lsr	r0, r0, #7
   383e0:	cmp	r0, #2
   383e4:	mov	r0, r9
   383e8:	bhi	3839c <__assert_fail@plt+0x258ec>
   383ec:	mov	r7, r2
   383f0:	bl	12738 <__ctype_tolower_loc@plt>
   383f4:	ldr	r0, [r0]
   383f8:	mov	r2, r7
   383fc:	mov	lr, #1
   38400:	ldr	r0, [r0, r9, lsl #2]
   38404:	b	3839c <__assert_fail@plt+0x258ec>
   38408:	ldr	r0, [sp, #64]	; 0x40
   3840c:	ldr	r1, [sp, #44]	; 0x2c
   38410:	ldr	r0, [r0]
   38414:	ldr	r0, [r0, r1, lsl #3]
   38418:	ldr	sl, [r0, #20]
   3841c:	mov	r0, #0
   38420:	tst	sl, lr, lsl r0
   38424:	mov	r7, r0
   38428:	mov	r6, r5
   3842c:	bne	38464 <__assert_fail@plt+0x259b4>
   38430:	b	3843c <__assert_fail@plt+0x2598c>
   38434:	ldr	r1, [sp, #68]	; 0x44
   38438:	strb	lr, [r1, r0]
   3843c:	add	r0, r7, #1
   38440:	add	r5, r6, #1
   38444:	add	r4, r4, #1
   38448:	add	r9, r9, #1
   3844c:	cmp	r0, #32
   38450:	beq	38490 <__assert_fail@plt+0x259e0>
   38454:	tst	sl, lr, lsl r0
   38458:	mov	r7, r0
   3845c:	mov	r6, r5
   38460:	beq	3843c <__assert_fail@plt+0x2598c>
   38464:	add	r0, r9, #128	; 0x80
   38468:	strb	lr, [r4]
   3846c:	lsr	r0, r0, #7
   38470:	cmp	r0, #2
   38474:	mov	r0, r9
   38478:	bhi	38434 <__assert_fail@plt+0x25984>
   3847c:	bl	12738 <__ctype_tolower_loc@plt>
   38480:	ldr	r0, [r0]
   38484:	mov	lr, #1
   38488:	ldr	r0, [r0, r9, lsl #2]
   3848c:	b	38434 <__assert_fail@plt+0x25984>
   38490:	ldr	r0, [sp, #24]
   38494:	ldr	r1, [sp, #36]	; 0x24
   38498:	ldr	sl, [sp, #68]	; 0x44
   3849c:	sub	r0, r0, r1
   384a0:	ldr	r1, [sp, #60]	; 0x3c
   384a4:	sub	r0, r0, r1
   384a8:	ldr	r1, [sp, #56]	; 0x38
   384ac:	sub	r0, r0, r1
   384b0:	ldr	r1, [sp, #32]
   384b4:	sub	r0, r0, r1
   384b8:	ldr	r1, [sp, #44]	; 0x2c
   384bc:	sub	r0, r0, r8
   384c0:	sub	r5, r0, r7
   384c4:	ldr	r0, [sp, #64]	; 0x40
   384c8:	mov	r7, #0
   384cc:	ldr	r0, [r0]
   384d0:	ldr	r0, [r0, r1, lsl #3]
   384d4:	ldr	r8, [r0, #24]
   384d8:	tst	r8, lr, lsl r7
   384dc:	mov	r4, r6
   384e0:	bne	38510 <__assert_fail@plt+0x25a60>
   384e4:	b	384ec <__assert_fail@plt+0x25a3c>
   384e8:	strb	lr, [sl, r0]
   384ec:	add	r7, r7, #1
   384f0:	add	r6, r4, #1
   384f4:	sub	r5, r5, #1
   384f8:	add	r9, r9, #1
   384fc:	cmp	r7, #32
   38500:	beq	38540 <__assert_fail@plt+0x25a90>
   38504:	tst	r8, lr, lsl r7
   38508:	mov	r4, r6
   3850c:	beq	384ec <__assert_fail@plt+0x25a3c>
   38510:	mov	r0, #0
   38514:	strb	lr, [r0, -r5]
   38518:	add	r0, r9, #128	; 0x80
   3851c:	lsr	r0, r0, #7
   38520:	cmp	r0, #2
   38524:	mov	r0, r9
   38528:	bhi	384e8 <__assert_fail@plt+0x25a38>
   3852c:	bl	12738 <__ctype_tolower_loc@plt>
   38530:	ldr	r0, [r0]
   38534:	mov	lr, #1
   38538:	ldr	r0, [r0, r9, lsl #2]
   3853c:	b	384e8 <__assert_fail@plt+0x25a38>
   38540:	ldr	r0, [sp, #64]	; 0x40
   38544:	ldr	r1, [sp, #44]	; 0x2c
   38548:	ldr	r8, [sp, #28]
   3854c:	mov	r6, #0
   38550:	mov	r7, #0
   38554:	ldr	r0, [r0]
   38558:	ldr	r0, [r0, r1, lsl #3]
   3855c:	ldr	r5, [r0, #28]
   38560:	tst	r5, lr, lsl r6
   38564:	bne	3858c <__assert_fail@plt+0x25adc>
   38568:	b	38570 <__assert_fail@plt+0x25ac0>
   3856c:	strb	lr, [sl, r0]
   38570:	add	r6, r6, #1
   38574:	add	r4, r4, #1
   38578:	add	r9, r9, #1
   3857c:	cmp	r6, #32
   38580:	beq	37b94 <__assert_fail@plt+0x250e4>
   38584:	tst	r5, lr, lsl r6
   38588:	beq	38570 <__assert_fail@plt+0x25ac0>
   3858c:	add	r0, r9, #128	; 0x80
   38590:	strb	lr, [r4]
   38594:	lsr	r0, r0, #7
   38598:	cmp	r0, #2
   3859c:	mov	r0, r9
   385a0:	bhi	3856c <__assert_fail@plt+0x25abc>
   385a4:	bl	12738 <__ctype_tolower_loc@plt>
   385a8:	ldr	r0, [r0]
   385ac:	mov	lr, #1
   385b0:	ldr	r0, [r0, r9, lsl #2]
   385b4:	b	3856c <__assert_fail@plt+0x25abc>
   385b8:	mov	r0, sl
   385bc:	mov	r1, #1
   385c0:	mov	r2, #256	; 0x100
   385c4:	bl	12834 <memset@plt>
   385c8:	cmp	r4, #2
   385cc:	bne	385dc <__assert_fail@plt+0x25b2c>
   385d0:	ldrb	r0, [r8, #28]
   385d4:	orr	r0, r0, #1
   385d8:	strb	r0, [r8, #28]
   385dc:	sub	sp, fp, #28
   385e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   385e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   385e8:	add	fp, sp, #24
   385ec:	mov	r4, r0
   385f0:	mov	r0, #0
   385f4:	mov	r6, r2
   385f8:	mov	r5, r1
   385fc:	str	r0, [r4]
   38600:	str	r0, [r4, #4]
   38604:	str	r0, [r4, #8]
   38608:	mov	r0, #256	; 0x100
   3860c:	bl	35350 <__assert_fail@plt+0x228a0>
   38610:	cmp	r0, #0
   38614:	str	r0, [r4, #16]
   38618:	beq	38748 <__assert_fail@plt+0x25c98>
   3861c:	movw	r0, #45820	; 0xb2fc
   38620:	tst	r6, #1
   38624:	and	r1, r6, #2
   38628:	movt	r0, #3
   3862c:	movweq	r0, #710	; 0x2c6
   38630:	movteq	r0, #257	; 0x101
   38634:	tst	r6, #4
   38638:	orr	r7, r0, r1, lsl #21
   3863c:	bne	38650 <__assert_fail@plt+0x25ba0>
   38640:	ldrb	r0, [r4, #28]
   38644:	and	r0, r0, #127	; 0x7f
   38648:	strb	r0, [r4, #28]
   3864c:	b	38670 <__assert_fail@plt+0x25bc0>
   38650:	ldrb	r0, [r4, #28]
   38654:	mvn	r1, #127	; 0x7f
   38658:	orr	r0, r0, r1
   3865c:	movw	r1, #45758	; 0xb2be
   38660:	movt	r1, #323	; 0x143
   38664:	strb	r0, [r4, #28]
   38668:	and	r1, r7, r1
   3866c:	orr	r7, r1, #256	; 0x100
   38670:	and	r1, r6, #8
   38674:	and	r0, r0, #239	; 0xef
   38678:	mov	r8, #0
   3867c:	orr	r0, r0, r1, lsl #1
   38680:	str	r8, [r4, #20]
   38684:	strb	r0, [r4, #28]
   38688:	mov	r0, r5
   3868c:	bl	127bc <strlen@plt>
   38690:	mov	r2, r0
   38694:	mov	r0, r4
   38698:	mov	r1, r5
   3869c:	mov	r3, r7
   386a0:	bl	36220 <__assert_fail@plt+0x23770>
   386a4:	cmp	r0, #16
   386a8:	mov	r5, r0
   386ac:	movweq	r5, #8
   386b0:	cmp	r5, #0
   386b4:	bne	38754 <__assert_fail@plt+0x25ca4>
   386b8:	ldr	r5, [r4, #16]
   386bc:	ldr	r6, [r4]
   386c0:	mov	r1, #0
   386c4:	mov	r2, #256	; 0x100
   386c8:	mov	r0, r5
   386cc:	bl	12834 <memset@plt>
   386d0:	ldr	r1, [r6, #36]	; 0x24
   386d4:	mov	r0, r4
   386d8:	mov	r2, r5
   386dc:	bl	37af4 <__assert_fail@plt+0x25044>
   386e0:	ldr	r0, [r6, #36]	; 0x24
   386e4:	ldr	r1, [r6, #40]	; 0x28
   386e8:	cmp	r0, r1
   386ec:	beq	38700 <__assert_fail@plt+0x25c50>
   386f0:	mov	r0, r4
   386f4:	mov	r2, r5
   386f8:	bl	37af4 <__assert_fail@plt+0x25044>
   386fc:	ldr	r0, [r6, #36]	; 0x24
   38700:	ldr	r1, [r6, #44]	; 0x2c
   38704:	cmp	r0, r1
   38708:	beq	3871c <__assert_fail@plt+0x25c6c>
   3870c:	mov	r0, r4
   38710:	mov	r2, r5
   38714:	bl	37af4 <__assert_fail@plt+0x25044>
   38718:	ldr	r0, [r6, #36]	; 0x24
   3871c:	ldr	r1, [r6, #48]	; 0x30
   38720:	cmp	r0, r1
   38724:	movne	r0, r4
   38728:	movne	r2, r5
   3872c:	blne	37af4 <__assert_fail@plt+0x25044>
   38730:	ldrb	r0, [r4, #28]
   38734:	mov	r5, #0
   38738:	orr	r0, r0, #8
   3873c:	strb	r0, [r4, #28]
   38740:	mov	r0, r5
   38744:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   38748:	mov	r5, #12
   3874c:	mov	r0, r5
   38750:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   38754:	ldr	r0, [r4, #16]
   38758:	bl	32910 <__assert_fail@plt+0x1fe60>
   3875c:	mov	r0, r5
   38760:	str	r8, [r4, #16]
   38764:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   38768:	push	{r4, r5, r6, r7, fp, lr}
   3876c:	add	fp, sp, #16
   38770:	cmp	r0, #17
   38774:	bcs	387e8 <__assert_fail@plt+0x25d38>
   38778:	movw	r1, #12584	; 0x3128
   3877c:	mov	r4, r2
   38780:	mov	r2, #5
   38784:	mov	r5, r3
   38788:	movt	r1, #5
   3878c:	ldr	r0, [r1, r0, lsl #2]
   38790:	movw	r1, #12200	; 0x2fa8
   38794:	movt	r1, #5
   38798:	add	r1, r1, r0
   3879c:	mov	r0, #0
   387a0:	bl	12564 <dcgettext@plt>
   387a4:	mov	r6, r0
   387a8:	bl	127bc <strlen@plt>
   387ac:	add	r7, r0, #1
   387b0:	cmp	r5, #0
   387b4:	beq	387d0 <__assert_fail@plt+0x25d20>
   387b8:	cmp	r7, r5
   387bc:	mov	r2, r7
   387c0:	bhi	387d8 <__assert_fail@plt+0x25d28>
   387c4:	mov	r0, r4
   387c8:	mov	r1, r6
   387cc:	bl	124e0 <memcpy@plt>
   387d0:	mov	r0, r7
   387d4:	pop	{r4, r5, r6, r7, fp, pc}
   387d8:	sub	r2, r5, #1
   387dc:	mov	r0, #0
   387e0:	strb	r0, [r4, r2]
   387e4:	b	387c4 <__assert_fail@plt+0x25d14>
   387e8:	bl	12a5c <abort@plt>
   387ec:	push	{r4, r5, fp, lr}
   387f0:	add	fp, sp, #8
   387f4:	ldr	r5, [r0]
   387f8:	mov	r4, r0
   387fc:	cmp	r5, #0
   38800:	beq	3882c <__assert_fail@plt+0x25d7c>
   38804:	movw	r0, #9392	; 0x24b0
   38808:	movw	r1, #10328	; 0x2858
   3880c:	movt	r0, #1
   38810:	movt	r1, #1
   38814:	orrs	r0, r1, r0
   38818:	beq	38824 <__assert_fail@plt+0x25d74>
   3881c:	add	r0, r5, #136	; 0x88
   38820:	bl	1242c <pthread_mutex_destroy@plt>
   38824:	mov	r0, r5
   38828:	bl	38854 <__assert_fail@plt+0x25da4>
   3882c:	mov	r5, #0
   38830:	str	r5, [r4]
   38834:	str	r5, [r4, #4]
   38838:	ldr	r0, [r4, #16]
   3883c:	bl	32910 <__assert_fail@plt+0x1fe60>
   38840:	str	r5, [r4, #16]
   38844:	ldr	r0, [r4, #20]
   38848:	bl	32910 <__assert_fail@plt+0x1fe60>
   3884c:	str	r5, [r4, #20]
   38850:	pop	{r4, r5, fp, pc}
   38854:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   38858:	add	fp, sp, #24
   3885c:	mov	r8, r0
   38860:	ldr	r0, [r0]
   38864:	cmp	r0, #0
   38868:	beq	388ec <__assert_fail@plt+0x25e3c>
   3886c:	ldr	r1, [r8, #8]
   38870:	cmp	r1, #0
   38874:	beq	388ec <__assert_fail@plt+0x25e3c>
   38878:	movw	r7, #255	; 0xff
   3887c:	mov	r6, #0
   38880:	movt	r7, #4
   38884:	add	r1, r0, r6, lsl #3
   38888:	ldr	r1, [r1, #4]
   3888c:	and	r1, r1, r7
   38890:	cmp	r1, #3
   38894:	beq	388c8 <__assert_fail@plt+0x25e18>
   38898:	cmp	r1, #6
   3889c:	bne	388d4 <__assert_fail@plt+0x25e24>
   388a0:	ldr	r5, [r0, r6, lsl #3]
   388a4:	ldr	r0, [r5]
   388a8:	bl	32910 <__assert_fail@plt+0x1fe60>
   388ac:	ldr	r0, [r5, #4]
   388b0:	bl	32910 <__assert_fail@plt+0x1fe60>
   388b4:	ldr	r0, [r5, #8]
   388b8:	bl	32910 <__assert_fail@plt+0x1fe60>
   388bc:	ldr	r0, [r5, #12]
   388c0:	bl	32910 <__assert_fail@plt+0x1fe60>
   388c4:	b	388cc <__assert_fail@plt+0x25e1c>
   388c8:	ldr	r5, [r0, r6, lsl #3]
   388cc:	mov	r0, r5
   388d0:	bl	32910 <__assert_fail@plt+0x1fe60>
   388d4:	ldr	r0, [r8, #8]
   388d8:	add	r6, r6, #1
   388dc:	cmp	r6, r0
   388e0:	bcs	388ec <__assert_fail@plt+0x25e3c>
   388e4:	ldr	r0, [r8]
   388e8:	b	38884 <__assert_fail@plt+0x25dd4>
   388ec:	ldr	r0, [r8, #12]
   388f0:	bl	32910 <__assert_fail@plt+0x1fe60>
   388f4:	ldr	r0, [r8, #8]
   388f8:	cmp	r0, #0
   388fc:	beq	3896c <__assert_fail@plt+0x25ebc>
   38900:	mov	r5, #0
   38904:	mov	r6, #8
   38908:	ldr	r0, [r8, #24]
   3890c:	cmp	r0, #0
   38910:	bne	38938 <__assert_fail@plt+0x25e88>
   38914:	b	38940 <__assert_fail@plt+0x25e90>
   38918:	ldr	r0, [r8, #8]
   3891c:	add	r5, r5, #1
   38920:	add	r6, r6, #12
   38924:	cmp	r5, r0
   38928:	bcs	3896c <__assert_fail@plt+0x25ebc>
   3892c:	ldr	r0, [r8, #24]
   38930:	cmp	r0, #0
   38934:	beq	38940 <__assert_fail@plt+0x25e90>
   38938:	ldr	r0, [r0, r6]
   3893c:	bl	32910 <__assert_fail@plt+0x1fe60>
   38940:	ldr	r0, [r8, #28]
   38944:	cmp	r0, #0
   38948:	beq	38954 <__assert_fail@plt+0x25ea4>
   3894c:	ldr	r0, [r0, r6]
   38950:	bl	32910 <__assert_fail@plt+0x1fe60>
   38954:	ldr	r0, [r8, #20]
   38958:	cmp	r0, #0
   3895c:	beq	38918 <__assert_fail@plt+0x25e68>
   38960:	ldr	r0, [r0, r6]
   38964:	bl	32910 <__assert_fail@plt+0x1fe60>
   38968:	b	38918 <__assert_fail@plt+0x25e68>
   3896c:	ldr	r0, [r8, #20]
   38970:	bl	32910 <__assert_fail@plt+0x1fe60>
   38974:	ldr	r0, [r8, #24]
   38978:	bl	32910 <__assert_fail@plt+0x1fe60>
   3897c:	ldr	r0, [r8, #28]
   38980:	bl	32910 <__assert_fail@plt+0x1fe60>
   38984:	ldr	r0, [r8]
   38988:	bl	32910 <__assert_fail@plt+0x1fe60>
   3898c:	ldr	r5, [r8, #32]
   38990:	cmp	r5, #0
   38994:	beq	389f4 <__assert_fail@plt+0x25f44>
   38998:	mov	r6, #0
   3899c:	add	r0, r6, r6, lsl #1
   389a0:	ldr	r0, [r5, r0, lsl #2]!
   389a4:	add	r7, r5, #8
   389a8:	cmp	r0, #1
   389ac:	blt	389d0 <__assert_fail@plt+0x25f20>
   389b0:	mov	r4, #0
   389b4:	ldr	r0, [r7]
   389b8:	ldr	r0, [r0, r4, lsl #2]
   389bc:	bl	3bc20 <__assert_fail@plt+0x29170>
   389c0:	ldr	r0, [r5]
   389c4:	add	r4, r4, #1
   389c8:	cmp	r4, r0
   389cc:	blt	389b4 <__assert_fail@plt+0x25f04>
   389d0:	ldr	r0, [r7]
   389d4:	bl	32910 <__assert_fail@plt+0x1fe60>
   389d8:	ldr	r0, [r8, #68]	; 0x44
   389dc:	cmp	r6, r0
   389e0:	bcs	389f0 <__assert_fail@plt+0x25f40>
   389e4:	ldr	r5, [r8, #32]
   389e8:	add	r6, r6, #1
   389ec:	b	3899c <__assert_fail@plt+0x25eec>
   389f0:	ldr	r5, [r8, #32]
   389f4:	mov	r0, r5
   389f8:	bl	32910 <__assert_fail@plt+0x1fe60>
   389fc:	ldr	r0, [r8, #60]	; 0x3c
   38a00:	movw	r1, #12652	; 0x316c
   38a04:	movt	r1, #5
   38a08:	cmp	r0, r1
   38a0c:	beq	38a14 <__assert_fail@plt+0x25f64>
   38a10:	bl	32910 <__assert_fail@plt+0x1fe60>
   38a14:	ldr	r0, [r8, #132]	; 0x84
   38a18:	bl	32910 <__assert_fail@plt+0x1fe60>
   38a1c:	mov	r0, r8
   38a20:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   38a24:	b	32910 <__assert_fail@plt+0x1fe60>
   38a28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38a2c:	add	fp, sp, #28
   38a30:	sub	sp, sp, #28
   38a34:	ldr	sl, [fp, #8]
   38a38:	mov	r7, #2
   38a3c:	cmp	sl, #7
   38a40:	bhi	38b14 <__assert_fail@plt+0x26064>
   38a44:	mov	r5, r0
   38a48:	ldr	r0, [r0]
   38a4c:	mov	r6, r3
   38a50:	mov	r9, r2
   38a54:	mov	r4, r1
   38a58:	tst	sl, #4
   38a5c:	str	r0, [sp, #24]
   38a60:	bne	38a78 <__assert_fail@plt+0x25fc8>
   38a64:	mov	r0, r4
   38a68:	bl	127bc <strlen@plt>
   38a6c:	mov	r7, r0
   38a70:	mov	r8, #0
   38a74:	b	38a80 <__assert_fail@plt+0x25fd0>
   38a78:	ldr	r8, [r6]
   38a7c:	ldr	r7, [r6, #4]
   38a80:	movw	r0, #9392	; 0x24b0
   38a84:	movw	r1, #10328	; 0x2858
   38a88:	movt	r0, #1
   38a8c:	movt	r1, #1
   38a90:	orrs	r0, r1, r0
   38a94:	str	r0, [sp, #20]
   38a98:	beq	38aa8 <__assert_fail@plt+0x25ff8>
   38a9c:	ldr	r0, [sp, #24]
   38aa0:	add	r0, r0, #136	; 0x88
   38aa4:	bl	1248c <pthread_mutex_lock@plt>
   38aa8:	ldrb	r0, [r5, #28]
   38aac:	tst	r0, #16
   38ab0:	bne	38ac4 <__assert_fail@plt+0x26014>
   38ab4:	str	r7, [sp]
   38ab8:	stmib	sp, {r7, r9}
   38abc:	str	r6, [sp, #12]
   38ac0:	b	38ad8 <__assert_fail@plt+0x26028>
   38ac4:	mov	r0, #0
   38ac8:	str	r7, [sp]
   38acc:	str	r7, [sp, #4]
   38ad0:	str	r0, [sp, #8]
   38ad4:	str	r0, [sp, #12]
   38ad8:	mov	r0, r5
   38adc:	mov	r1, r4
   38ae0:	mov	r2, r7
   38ae4:	mov	r3, r8
   38ae8:	str	sl, [sp, #16]
   38aec:	bl	38b20 <__assert_fail@plt+0x26070>
   38af0:	mov	r7, r0
   38af4:	ldr	r0, [sp, #20]
   38af8:	cmp	r0, #0
   38afc:	beq	38b0c <__assert_fail@plt+0x2605c>
   38b00:	ldr	r0, [sp, #24]
   38b04:	add	r0, r0, #136	; 0x88
   38b08:	bl	12360 <pthread_mutex_unlock@plt>
   38b0c:	cmp	r7, #0
   38b10:	movwne	r7, #1
   38b14:	mov	r0, r7
   38b18:	sub	sp, fp, #28
   38b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38b20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38b24:	add	fp, sp, #28
   38b28:	sub	sp, sp, #412	; 0x19c
   38b2c:	ldr	r7, [r0]
   38b30:	str	r2, [sp, #76]	; 0x4c
   38b34:	str	r1, [sp, #100]	; 0x64
   38b38:	mov	r4, r0
   38b3c:	add	r0, sp, #104	; 0x68
   38b40:	mov	r1, #0
   38b44:	mov	r2, #136	; 0x88
   38b48:	mov	r6, r3
   38b4c:	mov	r9, #0
   38b50:	bl	12834 <memset@plt>
   38b54:	str	r7, [sp, #188]	; 0xbc
   38b58:	ldr	r0, [fp, #16]
   38b5c:	ldr	sl, [fp, #8]
   38b60:	mov	r5, #0
   38b64:	ldr	r1, [r4, #16]
   38b68:	cmp	r1, #0
   38b6c:	beq	38b88 <__assert_fail@plt+0x260d8>
   38b70:	ldrb	r2, [r4, #28]
   38b74:	and	r2, r2, #9
   38b78:	cmp	r2, #8
   38b7c:	movne	r1, #0
   38b80:	subs	r5, r6, sl
   38b84:	movne	r5, r1
   38b88:	ldr	r2, [r4, #24]
   38b8c:	ldr	r1, [r4, #8]
   38b90:	mov	r8, #1
   38b94:	mvn	r3, r2
   38b98:	cmp	r2, r0
   38b9c:	addcc	r9, r3, r0
   38ba0:	cmp	r1, #0
   38ba4:	beq	3b198 <__assert_fail@plt+0x286e8>
   38ba8:	ldr	r1, [r7, #36]	; 0x24
   38bac:	cmp	r1, #0
   38bb0:	ldrne	r2, [r7, #40]	; 0x28
   38bb4:	cmpne	r2, #0
   38bb8:	beq	3b198 <__assert_fail@plt+0x286e8>
   38bbc:	ldr	r3, [r7, #44]	; 0x2c
   38bc0:	cmp	r3, #0
   38bc4:	strne	r7, [sp, #96]	; 0x60
   38bc8:	ldrne	r7, [r7, #48]	; 0x30
   38bcc:	cmpne	r7, #0
   38bd0:	beq	3b198 <__assert_fail@plt+0x286e8>
   38bd4:	ldr	r1, [r1, #8]
   38bd8:	ldr	ip, [r4, #20]
   38bdc:	cmp	r1, #0
   38be0:	beq	38bec <__assert_fail@plt+0x2613c>
   38be4:	ldr	lr, [sp, #96]	; 0x60
   38be8:	b	38bfc <__assert_fail@plt+0x2614c>
   38bec:	ldr	r1, [r2, #8]
   38bf0:	ldr	lr, [sp, #96]	; 0x60
   38bf4:	cmp	r1, #0
   38bf8:	beq	3a2b0 <__assert_fail@plt+0x27800>
   38bfc:	str	sl, [sp, #80]	; 0x50
   38c00:	subs	r0, r0, r9
   38c04:	str	r9, [sp, #32]
   38c08:	str	r0, [sp, #92]	; 0x5c
   38c0c:	mov	r0, #1
   38c10:	str	r0, [sp, #56]	; 0x38
   38c14:	bne	38c28 <__assert_fail@plt+0x26178>
   38c18:	ldr	r0, [lr, #76]	; 0x4c
   38c1c:	cmp	r0, #0
   38c20:	movwne	r0, #1
   38c24:	str	r0, [sp, #56]	; 0x38
   38c28:	ldr	r0, [r4, #12]
   38c2c:	ldr	r2, [lr, #92]	; 0x5c
   38c30:	ldr	r3, [sp, #100]	; 0x64
   38c34:	ldr	r1, [lr, #8]
   38c38:	str	ip, [sp, #168]	; 0xa8
   38c3c:	mov	r7, r4
   38c40:	str	r3, [sp, #104]	; 0x68
   38c44:	str	r2, [sp, #184]	; 0xb8
   38c48:	ubfx	r3, r0, #22, #1
   38c4c:	ldr	r4, [sp, #76]	; 0x4c
   38c50:	and	r0, r0, #4194304	; 0x400000
   38c54:	add	r9, r1, #1
   38c58:	orrs	sl, ip, r0
   38c5c:	strb	r3, [sp, #176]	; 0xb0
   38c60:	mov	r3, lr
   38c64:	add	r3, sp, #104	; 0x68
   38c68:	movwne	sl, #1
   38c6c:	add	r3, r3, #44	; 0x2c
   38c70:	cmp	r2, r9
   38c74:	strb	sl, [sp, #179]	; 0xb3
   38c78:	movgt	r9, r2
   38c7c:	vdup.32	q8, r4
   38c80:	ldrb	r0, [lr, #88]	; 0x58
   38c84:	vst1.32	{d16-d17}, [r3]
   38c88:	ubfx	r3, r0, #3, #1
   38c8c:	strb	r3, [sp, #178]	; 0xb2
   38c90:	ubfx	r0, r0, #2, #1
   38c94:	str	r7, [sp, #64]	; 0x40
   38c98:	str	r5, [sp, #88]	; 0x58
   38c9c:	str	ip, [sp, #84]	; 0x54
   38ca0:	strb	r0, [sp, #177]	; 0xb1
   38ca4:	add	r0, r4, #1
   38ca8:	cmp	r0, r9
   38cac:	movlt	r9, r0
   38cb0:	cmp	r2, #2
   38cb4:	blt	38ce8 <__assert_fail@plt+0x26238>
   38cb8:	mov	r8, #12
   38cbc:	cmn	r9, #-1073741823	; 0xc0000001
   38cc0:	bhi	3b144 <__assert_fail@plt+0x28694>
   38cc4:	lsl	r1, r9, #2
   38cc8:	mov	r0, #0
   38ccc:	bl	36110 <__assert_fail@plt+0x23660>
   38cd0:	ldr	ip, [sp, #84]	; 0x54
   38cd4:	ldr	r5, [sp, #88]	; 0x58
   38cd8:	cmp	r0, #0
   38cdc:	beq	3b144 <__assert_fail@plt+0x28694>
   38ce0:	ldr	r7, [sp, #64]	; 0x40
   38ce4:	str	r0, [sp, #112]	; 0x70
   38ce8:	ldr	r4, [sp, #96]	; 0x60
   38cec:	mov	r8, #1
   38cf0:	cmp	sl, #0
   38cf4:	beq	38d1c <__assert_fail@plt+0x2626c>
   38cf8:	mov	r0, #0
   38cfc:	mov	r1, r9
   38d00:	mov	r8, #0
   38d04:	bl	36110 <__assert_fail@plt+0x23660>
   38d08:	cmp	r0, #0
   38d0c:	beq	3b1ac <__assert_fail@plt+0x286fc>
   38d10:	ldr	r5, [sp, #88]	; 0x58
   38d14:	ldr	ip, [sp, #84]	; 0x54
   38d18:	str	r0, [sp, #108]	; 0x6c
   38d1c:	add	r1, r4, #96	; 0x60
   38d20:	str	r9, [sp, #140]	; 0x8c
   38d24:	ldr	r0, [fp, #12]
   38d28:	cmp	r8, #0
   38d2c:	str	r1, [sp, #172]	; 0xac
   38d30:	ldrb	r1, [r4, #88]	; 0x58
   38d34:	ubfx	r1, r1, #4, #1
   38d38:	strb	r1, [sp, #182]	; 0xb6
   38d3c:	mov	r1, #0
   38d40:	beq	38d5c <__assert_fail@plt+0x262ac>
   38d44:	ldr	r1, [sp, #100]	; 0x64
   38d48:	str	r1, [sp, #108]	; 0x6c
   38d4c:	ldr	r1, [r4, #92]	; 0x5c
   38d50:	cmp	r1, #1
   38d54:	ldr	r1, [sp, #76]	; 0x4c
   38d58:	movwgt	r1, #0
   38d5c:	str	r0, [sp, #160]	; 0xa0
   38d60:	str	r1, [sp, #136]	; 0x88
   38d64:	str	r1, [sp, #132]	; 0x84
   38d68:	str	r0, [sp, #156]	; 0x9c
   38d6c:	ldrb	r0, [r7, #28]
   38d70:	lsr	r0, r0, #7
   38d74:	strb	r0, [sp, #181]	; 0xb5
   38d78:	mvn	r0, #0
   38d7c:	ldr	sl, [r4, #76]	; 0x4c
   38d80:	str	r0, [sp, #196]	; 0xc4
   38d84:	ldr	r0, [fp, #24]
   38d88:	lsl	r4, sl, #1
   38d8c:	cmp	sl, #1
   38d90:	str	r0, [sp, #192]	; 0xc0
   38d94:	blt	38de4 <__assert_fail@plt+0x26334>
   38d98:	movw	r0, #43690	; 0xaaaa
   38d9c:	mov	r8, #12
   38da0:	movt	r0, #2730	; 0xaaa
   38da4:	cmp	r4, r0
   38da8:	bhi	3b144 <__assert_fail@plt+0x28694>
   38dac:	add	r0, sl, sl, lsl #1
   38db0:	lsl	r0, r0, #4
   38db4:	bl	35350 <__assert_fail@plt+0x228a0>
   38db8:	mov	r5, r0
   38dbc:	str	r0, [sp, #220]	; 0xdc
   38dc0:	lsl	r0, sl, #3
   38dc4:	bl	35350 <__assert_fail@plt+0x228a0>
   38dc8:	cmp	r0, #0
   38dcc:	str	r0, [sp, #236]	; 0xec
   38dd0:	beq	3b144 <__assert_fail@plt+0x28694>
   38dd4:	cmp	r5, #0
   38dd8:	ldr	r5, [sp, #88]	; 0x58
   38ddc:	ldr	ip, [sp, #84]	; 0x54
   38de0:	beq	3b144 <__assert_fail@plt+0x28694>
   38de4:	mov	r0, #1
   38de8:	str	r4, [sp, #232]	; 0xe8
   38dec:	str	r0, [sp, #224]	; 0xe0
   38df0:	ldr	r0, [sp, #92]	; 0x5c
   38df4:	str	r4, [sp, #216]	; 0xd8
   38df8:	cmp	r0, #1
   38dfc:	bhi	38e10 <__assert_fail@plt+0x26360>
   38e00:	ldr	r0, [sp, #96]	; 0x60
   38e04:	ldrb	r0, [r0, #88]	; 0x58
   38e08:	tst	r0, #2
   38e0c:	beq	38e3c <__assert_fail@plt+0x2638c>
   38e10:	mov	r8, #12
   38e14:	cmn	r9, #-1073741822	; 0xc0000002
   38e18:	bhi	3b144 <__assert_fail@plt+0x28694>
   38e1c:	mov	r0, #4
   38e20:	add	r0, r0, r9, lsl #2
   38e24:	bl	35350 <__assert_fail@plt+0x228a0>
   38e28:	ldr	ip, [sp, #84]	; 0x54
   38e2c:	ldr	r5, [sp, #88]	; 0x58
   38e30:	cmp	r0, #0
   38e34:	str	r0, [sp, #204]	; 0xcc
   38e38:	beq	3b144 <__assert_fail@plt+0x28694>
   38e3c:	ldr	r1, [fp, #24]
   38e40:	ldr	r2, [sp, #80]	; 0x50
   38e44:	str	r6, [fp, #-200]	; 0xffffff38
   38e48:	mov	r0, #4
   38e4c:	mov	r9, #1
   38e50:	mov	sl, #1
   38e54:	mov	r4, r6
   38e58:	tst	r1, #1
   38e5c:	mov	r1, #4
   38e60:	mov	r7, r2
   38e64:	movweq	r1, #6
   38e68:	cmp	r2, r6
   38e6c:	str	r1, [sp, #164]	; 0xa4
   38e70:	ldr	r1, [sp, #96]	; 0x60
   38e74:	mvnlt	sl, #0
   38e78:	movlt	r7, r6
   38e7c:	movlt	r4, r2
   38e80:	cmp	r5, #0
   38e84:	ldr	r1, [r1, #92]	; 0x5c
   38e88:	str	r1, [sp, #60]	; 0x3c
   38e8c:	beq	38ed0 <__assert_fail@plt+0x26420>
   38e90:	cmp	r1, #1
   38e94:	beq	38eb4 <__assert_fail@plt+0x26404>
   38e98:	ldr	r0, [sp, #64]	; 0x40
   38e9c:	ldr	r0, [r0, #12]
   38ea0:	and	r0, r0, #4194304	; 0x400000
   38ea4:	orr	r0, ip, r0
   38ea8:	clz	r0, r0
   38eac:	lsr	r0, r0, #5
   38eb0:	lsl	r0, r0, #2
   38eb4:	cmp	ip, #0
   38eb8:	mov	r1, ip
   38ebc:	movwne	r1, #1
   38ec0:	cmp	r2, r6
   38ec4:	orrge	r1, r1, #2
   38ec8:	orr	r0, r1, r0
   38ecc:	b	38ed4 <__assert_fail@plt+0x26424>
   38ed0:	mov	r0, #8
   38ed4:	add	r1, sp, #104	; 0x68
   38ed8:	cmp	r2, r6
   38edc:	sub	r0, r0, #4
   38ee0:	str	sl, [sp, #68]	; 0x44
   38ee4:	str	r7, [sp, #52]	; 0x34
   38ee8:	str	r4, [sp, #48]	; 0x30
   38eec:	add	r1, r1, #32
   38ef0:	str	r0, [sp, #80]	; 0x50
   38ef4:	str	r1, [sp, #24]
   38ef8:	sub	r1, fp, #200	; 0xc8
   38efc:	movwlt	r1, #0
   38f00:	cmp	r1, #0
   38f04:	str	r1, [sp, #40]	; 0x28
   38f08:	movwne	r1, #1
   38f0c:	str	r1, [sp, #44]	; 0x2c
   38f10:	sub	r1, fp, #192	; 0xc0
   38f14:	add	r1, r1, #16
   38f18:	str	r1, [sp, #36]	; 0x24
   38f1c:	ldr	r1, [sp, #80]	; 0x50
   38f20:	cmp	r1, #4
   38f24:	bhi	38f98 <__assert_fail@plt+0x264e8>
   38f28:	add	r0, pc, #0
   38f2c:	ldr	pc, [r0, r1, lsl #2]
   38f30:	andeq	r8, r3, r4, asr #30
   38f34:	andeq	r8, r3, r4, asr #30
   38f38:	andeq	r9, r3, r4, lsr r0
   38f3c:	andeq	r9, r3, r4, rrx
   38f40:	muleq	r3, ip, r0
   38f44:	mov	r8, #1
   38f48:	cmp	r6, r4
   38f4c:	blt	3b144 <__assert_fail@plt+0x28694>
   38f50:	cmp	ip, #0
   38f54:	beq	39be0 <__assert_fail@plt+0x27130>
   38f58:	ldr	r1, [sp, #76]	; 0x4c
   38f5c:	mov	r0, #0
   38f60:	cmp	r6, r1
   38f64:	bge	38f70 <__assert_fail@plt+0x264c0>
   38f68:	ldr	r0, [sp, #100]	; 0x64
   38f6c:	ldrb	r0, [r0, r6]
   38f70:	ldrb	r0, [ip, r0]
   38f74:	ldrb	r0, [r5, r0]
   38f78:	cmp	r0, #0
   38f7c:	bne	3909c <__assert_fail@plt+0x265ec>
   38f80:	sub	r0, r6, #1
   38f84:	cmp	r6, r4
   38f88:	mov	r6, r0
   38f8c:	str	r0, [fp, #-200]	; 0xffffff38
   38f90:	bgt	38f5c <__assert_fail@plt+0x264ac>
   38f94:	b	3b144 <__assert_fail@plt+0x28694>
   38f98:	ldr	r0, [sp, #128]	; 0x80
   38f9c:	ldr	r2, [sp, #136]	; 0x88
   38fa0:	sub	r1, r6, r0
   38fa4:	cmp	r1, r2
   38fa8:	bcs	38ff0 <__assert_fail@plt+0x26540>
   38fac:	ldr	r3, [sp, #132]	; 0x84
   38fb0:	mov	r2, #0
   38fb4:	cmp	r1, r3
   38fb8:	bcs	38fc4 <__assert_fail@plt+0x26514>
   38fbc:	ldr	r2, [sp, #108]	; 0x6c
   38fc0:	ldrb	r2, [r2, r1]
   38fc4:	ldrb	r1, [r5, r2]
   38fc8:	cmp	r1, #0
   38fcc:	bne	3909c <__assert_fail@plt+0x265ec>
   38fd0:	add	r6, r6, sl
   38fd4:	mov	r8, #1
   38fd8:	cmp	r6, r4
   38fdc:	str	r6, [fp, #-200]	; 0xffffff38
   38fe0:	blt	3b144 <__assert_fail@plt+0x28694>
   38fe4:	cmp	r6, r7
   38fe8:	ble	38f9c <__assert_fail@plt+0x264ec>
   38fec:	b	3b144 <__assert_fail@plt+0x28694>
   38ff0:	ldr	r2, [fp, #24]
   38ff4:	add	r0, sp, #104	; 0x68
   38ff8:	mov	r1, r6
   38ffc:	bl	42d6c <__assert_fail@plt+0x302bc>
   39000:	cmp	r0, #0
   39004:	bne	3b244 <__assert_fail@plt+0x28794>
   39008:	ldr	r0, [sp, #128]	; 0x80
   3900c:	ldr	r6, [fp, #-200]	; 0xffffff38
   39010:	ldr	r5, [sp, #88]	; 0x58
   39014:	ldr	r7, [sp, #52]	; 0x34
   39018:	ldr	r4, [sp, #48]	; 0x30
   3901c:	sub	r1, r6, r0
   39020:	ldr	r3, [sp, #132]	; 0x84
   39024:	mov	r2, #0
   39028:	cmp	r1, r3
   3902c:	bcc	38fbc <__assert_fail@plt+0x2650c>
   39030:	b	38fc4 <__assert_fail@plt+0x26514>
   39034:	ldr	r1, [sp, #100]	; 0x64
   39038:	cmp	r6, r7
   3903c:	bge	39094 <__assert_fail@plt+0x265e4>
   39040:	ldrb	r0, [r1, r6]
   39044:	ldrb	r0, [r5, r0]
   39048:	cmp	r0, #0
   3904c:	bne	39094 <__assert_fail@plt+0x265e4>
   39050:	add	r6, r6, #1
   39054:	cmp	r6, r7
   39058:	str	r6, [fp, #-200]	; 0xffffff38
   3905c:	blt	39040 <__assert_fail@plt+0x26590>
   39060:	b	39094 <__assert_fail@plt+0x265e4>
   39064:	cmp	r6, r7
   39068:	bge	39094 <__assert_fail@plt+0x265e4>
   3906c:	ldr	r1, [sp, #100]	; 0x64
   39070:	ldrb	r0, [r1, r6]
   39074:	ldrb	r0, [ip, r0]
   39078:	ldrb	r0, [r5, r0]
   3907c:	cmp	r0, #0
   39080:	bne	39094 <__assert_fail@plt+0x265e4>
   39084:	add	r6, r6, #1
   39088:	cmp	r6, r7
   3908c:	str	r6, [fp, #-200]	; 0xffffff38
   39090:	blt	39070 <__assert_fail@plt+0x265c0>
   39094:	cmp	r6, r7
   39098:	beq	39fb4 <__assert_fail@plt+0x27504>
   3909c:	ldr	r2, [fp, #24]
   390a0:	add	r0, sp, #104	; 0x68
   390a4:	mov	r1, r6
   390a8:	bl	42d6c <__assert_fail@plt+0x302bc>
   390ac:	cmp	r0, #0
   390b0:	bne	3b244 <__assert_fail@plt+0x28794>
   390b4:	ldr	r0, [sp, #60]	; 0x3c
   390b8:	cmp	r0, #1
   390bc:	ldrne	r0, [sp, #132]	; 0x84
   390c0:	cmpne	r0, #0
   390c4:	bne	39b4c <__assert_fail@plt+0x2709c>
   390c8:	mov	r0, #0
   390cc:	str	r0, [sp, #212]	; 0xd4
   390d0:	str	r0, [sp, #224]	; 0xe0
   390d4:	str	r0, [sp, #208]	; 0xd0
   390d8:	str	r0, [fp, #-196]	; 0xffffff3c
   390dc:	ldr	r4, [sp, #188]	; 0xbc
   390e0:	ldr	ip, [sp, #144]	; 0x90
   390e4:	ldr	r6, [r4, #36]	; 0x24
   390e8:	ldrsb	r0, [r6, #52]	; 0x34
   390ec:	cmn	r0, #1
   390f0:	ble	39b60 <__assert_fail@plt+0x270b0>
   390f4:	ldr	r7, [sp, #44]	; 0x2c
   390f8:	cmp	r6, #0
   390fc:	beq	3b1ac <__assert_fail@plt+0x286fc>
   39100:	ldr	r0, [sp, #204]	; 0xcc
   39104:	mov	r8, r7
   39108:	cmp	r0, #0
   3910c:	beq	39124 <__assert_fail@plt+0x26674>
   39110:	str	r6, [r0, ip, lsl #2]
   39114:	mov	r8, r7
   39118:	ldr	r0, [r4, #76]	; 0x4c
   3911c:	cmp	r0, #0
   39120:	bne	39e94 <__assert_fail@plt+0x273e4>
   39124:	ldrb	r0, [r6, #52]	; 0x34
   39128:	tst	r0, #16
   3912c:	bne	39e6c <__assert_fail@plt+0x273bc>
   39130:	mov	r0, #0
   39134:	mvn	r4, #0
   39138:	str	r0, [sp, #72]	; 0x48
   3913c:	ldr	r0, [sp, #144]	; 0x90
   39140:	ldr	r1, [sp, #160]	; 0xa0
   39144:	cmp	r1, r0
   39148:	ble	39918 <__assert_fail@plt+0x26e68>
   3914c:	ldr	sl, [sp, #40]	; 0x28
   39150:	b	39164 <__assert_fail@plt+0x266b4>
   39154:	ldr	r0, [sp, #144]	; 0x90
   39158:	ldr	r1, [sp, #160]	; 0xa0
   3915c:	cmp	r1, r0
   39160:	ble	3991c <__assert_fail@plt+0x26e6c>
   39164:	ldr	r2, [sp, #140]	; 0x8c
   39168:	ldr	r1, [sp, #152]	; 0x98
   3916c:	add	r7, r0, #1
   39170:	mov	r5, r6
   39174:	cmp	r7, r2
   39178:	blt	39184 <__assert_fail@plt+0x266d4>
   3917c:	cmp	r2, r1
   39180:	blt	397ac <__assert_fail@plt+0x26cfc>
   39184:	ldr	r2, [sp, #132]	; 0x84
   39188:	cmp	r7, r2
   3918c:	blt	39198 <__assert_fail@plt+0x266e8>
   39190:	cmp	r2, r1
   39194:	blt	397ac <__assert_fail@plt+0x26cfc>
   39198:	ldrb	r0, [r5, #52]	; 0x34
   3919c:	tst	r0, #32
   391a0:	bne	3935c <__assert_fail@plt+0x268ac>
   391a4:	ldr	r1, [sp, #144]	; 0x90
   391a8:	ldr	r0, [sp, #108]	; 0x6c
   391ac:	add	r2, r1, #1
   391b0:	str	r2, [sp, #144]	; 0x90
   391b4:	ldrb	r6, [r0, r1]
   391b8:	ldr	r0, [r5, #44]	; 0x2c
   391bc:	cmp	r0, #0
   391c0:	bne	39200 <__assert_fail@plt+0x26750>
   391c4:	ldr	r2, [r5, #48]	; 0x30
   391c8:	cmp	r2, #0
   391cc:	bne	397d0 <__assert_fail@plt+0x26d20>
   391d0:	ldr	r0, [sp, #188]	; 0xbc
   391d4:	mov	r1, r5
   391d8:	mov	r9, r8
   391dc:	mov	r8, ip
   391e0:	bl	46a80 <__assert_fail@plt+0x33fd0>
   391e4:	mov	ip, r8
   391e8:	mov	r8, r9
   391ec:	mov	r9, #1
   391f0:	cmp	r0, #0
   391f4:	bne	391b8 <__assert_fail@plt+0x26708>
   391f8:	mov	r0, #12
   391fc:	b	39898 <__assert_fail@plt+0x26de8>
   39200:	ldr	r6, [r0, r6, lsl #2]
   39204:	ldr	r0, [sp, #204]	; 0xcc
   39208:	cmp	r0, #0
   3920c:	beq	3922c <__assert_fail@plt+0x2677c>
   39210:	mov	r2, r6
   39214:	sub	r0, fp, #196	; 0xc4
   39218:	add	r1, sp, #104	; 0x68
   3921c:	mov	r6, ip
   39220:	bl	447d8 <__assert_fail@plt+0x31d28>
   39224:	mov	ip, r6
   39228:	mov	r6, r0
   3922c:	cmp	r6, #0
   39230:	beq	392a4 <__assert_fail@plt+0x267f4>
   39234:	sub	r0, r5, r6
   39238:	clz	r0, r0
   3923c:	lsr	r0, r0, #5
   39240:	ands	r8, r8, r0
   39244:	ldrb	r0, [r6, #52]	; 0x34
   39248:	moveq	r7, ip
   3924c:	mov	ip, r7
   39250:	tst	r0, #16
   39254:	beq	39154 <__assert_fail@plt+0x266a4>
   39258:	sxtb	r0, r0
   3925c:	cmn	r0, #1
   39260:	bgt	39284 <__assert_fail@plt+0x267d4>
   39264:	ldr	r2, [sp, #144]	; 0x90
   39268:	add	r0, sp, #104	; 0x68
   3926c:	mov	r1, r6
   39270:	mov	r5, ip
   39274:	bl	437cc <__assert_fail@plt+0x30d1c>
   39278:	mov	ip, r5
   3927c:	cmp	r0, #0
   39280:	beq	39154 <__assert_fail@plt+0x266a4>
   39284:	ldr	r0, [sp, #56]	; 0x38
   39288:	ldr	r4, [sp, #144]	; 0x90
   3928c:	cmp	r0, #0
   39290:	beq	3992c <__assert_fail@plt+0x26e7c>
   39294:	mov	sl, #0
   39298:	mov	r0, #1
   3929c:	str	r0, [sp, #72]	; 0x48
   392a0:	b	39154 <__assert_fail@plt+0x266a4>
   392a4:	ldr	r0, [fp, #-196]	; 0xffffff3c
   392a8:	cmp	r0, #0
   392ac:	bne	3b1ac <__assert_fail@plt+0x286fc>
   392b0:	ldr	r0, [sp, #72]	; 0x48
   392b4:	ldr	r1, [sp, #56]	; 0x38
   392b8:	cmp	r0, #0
   392bc:	mvn	r1, r1
   392c0:	movwne	r0, #1
   392c4:	tst	r1, r0
   392c8:	bne	3991c <__assert_fail@plt+0x26e6c>
   392cc:	ldr	r0, [sp, #204]	; 0xcc
   392d0:	cmp	r0, #0
   392d4:	beq	3991c <__assert_fail@plt+0x26e6c>
   392d8:	ldr	r2, [sp, #144]	; 0x90
   392dc:	ldr	r1, [sp, #208]	; 0xd0
   392e0:	add	r0, r0, #4
   392e4:	cmp	r2, r1
   392e8:	bge	3991c <__assert_fail@plt+0x26e6c>
   392ec:	add	r3, r2, #1
   392f0:	str	r3, [sp, #144]	; 0x90
   392f4:	ldr	r2, [r0, r2, lsl #2]
   392f8:	cmp	r2, #0
   392fc:	mov	r2, r3
   39300:	beq	392e4 <__assert_fail@plt+0x26834>
   39304:	sub	r0, fp, #196	; 0xc4
   39308:	add	r1, sp, #104	; 0x68
   3930c:	mov	r2, #0
   39310:	mov	r9, r8
   39314:	mov	r8, ip
   39318:	bl	447d8 <__assert_fail@plt+0x31d28>
   3931c:	cmp	r0, #0
   39320:	mov	r6, r0
   39324:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   39328:	cmpeq	r0, #0
   3932c:	bne	39344 <__assert_fail@plt+0x26894>
   39330:	ldr	r0, [sp, #204]	; 0xcc
   39334:	mov	ip, r8
   39338:	mov	r8, r9
   3933c:	mov	r9, #1
   39340:	b	392d8 <__assert_fail@plt+0x26828>
   39344:	mov	ip, r8
   39348:	mov	r8, r9
   3934c:	cmp	r6, #0
   39350:	mov	r9, #1
   39354:	bne	39234 <__assert_fail@plt+0x26784>
   39358:	b	3991c <__assert_fail@plt+0x26e6c>
   3935c:	ldr	r0, [r5, #8]
   39360:	cmp	r0, #1
   39364:	blt	3981c <__assert_fail@plt+0x26d6c>
   39368:	ldr	lr, [sp, #188]	; 0xbc
   3936c:	mov	r3, #0
   39370:	str	ip, [sp, #8]
   39374:	str	lr, [sp, #16]
   39378:	b	3938c <__assert_fail@plt+0x268dc>
   3937c:	ldr	r0, [r5, #8]
   39380:	add	r3, r3, #1
   39384:	cmp	r3, r0
   39388:	bge	3981c <__assert_fail@plt+0x26d6c>
   3938c:	ldr	r0, [r5, #12]
   39390:	ldr	r2, [r0, r3, lsl #2]
   39394:	ldr	r0, [lr]
   39398:	add	r0, r0, r2, lsl #3
   3939c:	mov	r1, r2
   393a0:	str	r2, [sp, #28]
   393a4:	ldr	r1, [r0, #4]
   393a8:	tst	r1, #1048576	; 0x100000
   393ac:	beq	3937c <__assert_fail@plt+0x268cc>
   393b0:	movw	r0, #65280	; 0xff00
   393b4:	str	r3, [sp, #20]
   393b8:	movt	r0, #3
   393bc:	tst	r1, r0
   393c0:	beq	394d4 <__assert_fail@plt+0x26a24>
   393c4:	ldr	r0, [sp, #144]	; 0x90
   393c8:	str	r1, [sp, #12]
   393cc:	cmn	r0, #1
   393d0:	ble	3940c <__assert_fail@plt+0x2695c>
   393d4:	ldr	r1, [sp, #152]	; 0x98
   393d8:	cmp	r1, r0
   393dc:	beq	396f0 <__assert_fail@plt+0x26c40>
   393e0:	ldr	r1, [sp, #184]	; 0xb8
   393e4:	cmp	r1, #2
   393e8:	blt	39414 <__assert_fail@plt+0x26964>
   393ec:	ldr	r1, [sp, #112]	; 0x70
   393f0:	ldr	r3, [sp, #20]
   393f4:	ldr	r6, [r1, r0, lsl #2]
   393f8:	cmn	r6, #1
   393fc:	bne	39450 <__assert_fail@plt+0x269a0>
   39400:	sub	r0, r0, #1
   39404:	cmn	r0, #1
   39408:	bne	393f4 <__assert_fail@plt+0x26944>
   3940c:	ldr	r1, [sp, #164]	; 0xa4
   39410:	b	39478 <__assert_fail@plt+0x269c8>
   39414:	ldr	r1, [sp, #108]	; 0x6c
   39418:	ldr	r2, [sp, #172]	; 0xac
   3941c:	ldrb	r0, [r1, r0]
   39420:	ubfx	r1, r0, #5, #3
   39424:	and	r6, r0, #31
   39428:	ldr	r3, [r2, r1, lsl #2]
   3942c:	mov	r1, #1
   39430:	mov	r2, #0
   39434:	tst	r3, r1, lsl r6
   39438:	ldr	r3, [sp, #20]
   3943c:	bne	39494 <__assert_fail@plt+0x269e4>
   39440:	mov	r1, #0
   39444:	cmp	r0, #10
   39448:	beq	39468 <__assert_fail@plt+0x269b8>
   3944c:	b	39478 <__assert_fail@plt+0x269c8>
   39450:	ldrb	r0, [sp, #182]	; 0xb6
   39454:	cmp	r0, #0
   39458:	bne	39720 <__assert_fail@plt+0x26c70>
   3945c:	mov	r1, #0
   39460:	cmp	r6, #10
   39464:	bne	39478 <__assert_fail@plt+0x269c8>
   39468:	ldrb	r0, [sp, #181]	; 0xb5
   3946c:	cmp	r0, #0
   39470:	movwne	r0, #1
   39474:	lsl	r1, r0, #1
   39478:	ldr	r6, [sp, #12]
   3947c:	and	r0, r1, #1
   39480:	eor	r2, r0, #1
   39484:	tst	r6, #1024	; 0x400
   39488:	beq	39494 <__assert_fail@plt+0x269e4>
   3948c:	cmp	r0, #0
   39490:	beq	3937c <__assert_fail@plt+0x268cc>
   39494:	ldr	r0, [lr]
   39498:	ldr	r6, [sp, #28]
   3949c:	cmp	r2, #0
   394a0:	add	r0, r0, r6, lsl #3
   394a4:	ldr	r0, [r0, #4]
   394a8:	bne	394b4 <__assert_fail@plt+0x26a04>
   394ac:	ands	r2, r0, #2048	; 0x800
   394b0:	bne	3937c <__assert_fail@plt+0x268cc>
   394b4:	tst	r1, #2
   394b8:	bne	394c4 <__assert_fail@plt+0x26a14>
   394bc:	ands	r2, r0, #8192	; 0x2000
   394c0:	bne	3937c <__assert_fail@plt+0x268cc>
   394c4:	tst	r1, #8
   394c8:	bne	394d4 <__assert_fail@plt+0x26a24>
   394cc:	ands	r0, r0, #32768	; 0x8000
   394d0:	bne	3937c <__assert_fail@plt+0x268cc>
   394d4:	ldr	r3, [sp, #144]	; 0x90
   394d8:	ldr	r1, [sp, #28]
   394dc:	mov	r0, lr
   394e0:	add	r2, sp, #104	; 0x68
   394e4:	bl	464c4 <__assert_fail@plt+0x33a14>
   394e8:	ldr	r3, [sp, #20]
   394ec:	ldr	lr, [sp, #16]
   394f0:	ldr	ip, [sp, #8]
   394f4:	cmp	r0, #0
   394f8:	beq	3937c <__assert_fail@plt+0x268cc>
   394fc:	ldr	r1, [sp, #224]	; 0xe0
   39500:	cmp	r1, r0
   39504:	movlt	r1, r0
   39508:	str	r1, [sp, #224]	; 0xe0
   3950c:	ldr	r3, [sp, #144]	; 0x90
   39510:	ldr	r2, [sp, #140]	; 0x8c
   39514:	ldr	r1, [sp, #152]	; 0x98
   39518:	ldr	r6, [sp, #208]	; 0xd0
   3951c:	add	r3, r3, r0
   39520:	cmp	r2, r3
   39524:	str	r3, [sp, #12]
   39528:	cmple	r2, r1
   3952c:	blt	39540 <__assert_fail@plt+0x26a90>
   39530:	ldr	r0, [sp, #132]	; 0x84
   39534:	cmp	r0, r3
   39538:	cmple	r0, r1
   3953c:	bge	3955c <__assert_fail@plt+0x26aac>
   39540:	add	r1, r3, #1
   39544:	add	r0, sp, #104	; 0x68
   39548:	bl	445d4 <__assert_fail@plt+0x31b24>
   3954c:	ldr	r3, [sp, #12]
   39550:	ldr	lr, [sp, #16]
   39554:	cmp	r0, #0
   39558:	bne	39890 <__assert_fail@plt+0x26de0>
   3955c:	cmp	r3, r6
   39560:	ble	3958c <__assert_fail@plt+0x26adc>
   39564:	sub	r0, r3, r6
   39568:	mov	r1, #0
   3956c:	lsl	r2, r0, #2
   39570:	ldr	r0, [sp, #204]	; 0xcc
   39574:	add	r0, r0, r6, lsl #2
   39578:	add	r0, r0, #4
   3957c:	bl	12834 <memset@plt>
   39580:	ldr	r3, [sp, #12]
   39584:	ldr	lr, [sp, #16]
   39588:	str	r3, [sp, #208]	; 0xd0
   3958c:	mov	r0, #0
   39590:	ldr	r2, [sp, #28]
   39594:	str	r0, [fp, #-48]	; 0xffffffd0
   39598:	ldr	r0, [sp, #204]	; 0xcc
   3959c:	ldr	r1, [lr, #24]
   395a0:	ldr	r6, [r0, r3, lsl #2]
   395a4:	ldr	r0, [lr, #12]
   395a8:	ldr	r0, [r0, r2, lsl #2]
   395ac:	cmp	r6, #0
   395b0:	add	r0, r0, r0, lsl #1
   395b4:	add	r2, r1, r0, lsl #2
   395b8:	beq	395dc <__assert_fail@plt+0x26b2c>
   395bc:	ldr	r1, [r6, #40]	; 0x28
   395c0:	sub	r0, fp, #192	; 0xc0
   395c4:	bl	44a18 <__assert_fail@plt+0x31f68>
   395c8:	ldr	r3, [sp, #12]
   395cc:	cmp	r0, #0
   395d0:	str	r0, [fp, #-48]	; 0xffffffd0
   395d4:	beq	395ec <__assert_fail@plt+0x26b3c>
   395d8:	b	398b0 <__assert_fail@plt+0x26e00>
   395dc:	vldr	d16, [r2]
   395e0:	ldr	r0, [r2, #8]
   395e4:	str	r0, [fp, #-184]	; 0xffffff48
   395e8:	vstr	d16, [fp, #-192]	; 0xffffff40
   395ec:	cmp	r3, #0
   395f0:	str	r6, [sp, #4]
   395f4:	ble	39704 <__assert_fail@plt+0x26c54>
   395f8:	ldr	r1, [sp, #152]	; 0x98
   395fc:	sub	r0, r3, #1
   39600:	cmp	r1, r0
   39604:	ldr	r1, [sp, #16]
   39608:	beq	39710 <__assert_fail@plt+0x26c60>
   3960c:	ldr	r2, [sp, #184]	; 0xb8
   39610:	cmp	r2, #2
   39614:	blt	3963c <__assert_fail@plt+0x26b8c>
   39618:	ldr	r2, [sp, #112]	; 0x70
   3961c:	ldr	r6, [r2, r0, lsl #2]
   39620:	cmn	r6, #1
   39624:	bne	3966c <__assert_fail@plt+0x26bbc>
   39628:	sub	r0, r0, #1
   3962c:	cmn	r0, #1
   39630:	bne	3961c <__assert_fail@plt+0x26b6c>
   39634:	ldr	r3, [sp, #164]	; 0xa4
   39638:	b	39694 <__assert_fail@plt+0x26be4>
   3963c:	ldr	r3, [sp, #108]	; 0x6c
   39640:	ldr	r2, [sp, #172]	; 0xac
   39644:	ldrb	r0, [r3, r0]
   39648:	ubfx	r3, r0, #5, #3
   3964c:	ldr	r6, [r2, r3, lsl #2]
   39650:	and	r2, r0, #31
   39654:	mov	r3, #1
   39658:	tst	r6, r3, lsl r2
   3965c:	moveq	r3, #0
   39660:	cmpeq	r0, #10
   39664:	bne	39694 <__assert_fail@plt+0x26be4>
   39668:	b	39684 <__assert_fail@plt+0x26bd4>
   3966c:	ldrb	r0, [sp, #182]	; 0xb6
   39670:	cmp	r0, #0
   39674:	bne	39760 <__assert_fail@plt+0x26cb0>
   39678:	mov	r3, #0
   3967c:	cmp	r6, #10
   39680:	bne	39694 <__assert_fail@plt+0x26be4>
   39684:	ldrb	r0, [sp, #181]	; 0xb5
   39688:	cmp	r0, #0
   3968c:	movwne	r0, #1
   39690:	lsl	r3, r0, #1
   39694:	sub	r0, fp, #48	; 0x30
   39698:	sub	r2, fp, #192	; 0xc0
   3969c:	bl	421c8 <__assert_fail@plt+0x2f718>
   396a0:	ldr	r1, [sp, #204]	; 0xcc
   396a4:	ldr	r2, [sp, #12]
   396a8:	str	r0, [r1, r2, lsl #2]
   396ac:	ldr	r0, [sp, #4]
   396b0:	cmp	r0, #0
   396b4:	beq	396c4 <__assert_fail@plt+0x26c14>
   396b8:	ldr	r0, [fp, #-184]	; 0xffffff48
   396bc:	bl	32910 <__assert_fail@plt+0x1fe60>
   396c0:	ldr	r2, [sp, #12]
   396c4:	ldr	r0, [sp, #204]	; 0xcc
   396c8:	ldr	ip, [sp, #8]
   396cc:	ldr	lr, [sp, #16]
   396d0:	ldr	r3, [sp, #20]
   396d4:	ldr	r0, [r0, r2, lsl #2]
   396d8:	cmp	r0, #0
   396dc:	bne	3937c <__assert_fail@plt+0x268cc>
   396e0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   396e4:	cmp	r0, #0
   396e8:	beq	3937c <__assert_fail@plt+0x268cc>
   396ec:	b	39898 <__assert_fail@plt+0x26de8>
   396f0:	ldr	r0, [sp, #192]	; 0xc0
   396f4:	ldr	r3, [sp, #20]
   396f8:	and	r0, r0, #2
   396fc:	eor	r1, r0, #10
   39700:	b	39478 <__assert_fail@plt+0x269c8>
   39704:	ldr	r3, [sp, #164]	; 0xa4
   39708:	ldr	r1, [sp, #16]
   3970c:	b	39694 <__assert_fail@plt+0x26be4>
   39710:	ldr	r0, [sp, #192]	; 0xc0
   39714:	and	r0, r0, #2
   39718:	eor	r3, r0, #10
   3971c:	b	39694 <__assert_fail@plt+0x26be4>
   39720:	mov	r0, r6
   39724:	str	r8, [sp, #4]
   39728:	mov	r8, ip
   3972c:	bl	12810 <iswalnum@plt>
   39730:	mov	r1, #1
   39734:	mov	r2, #0
   39738:	cmp	r6, #95	; 0x5f
   3973c:	beq	39788 <__assert_fail@plt+0x26cd8>
   39740:	mov	ip, r8
   39744:	ldr	r8, [sp, #4]
   39748:	ldr	lr, [sp, #16]
   3974c:	ldr	r3, [sp, #20]
   39750:	cmp	r0, #0
   39754:	mov	r9, #1
   39758:	beq	3945c <__assert_fail@plt+0x269ac>
   3975c:	b	39494 <__assert_fail@plt+0x269e4>
   39760:	mov	r0, r6
   39764:	bl	12810 <iswalnum@plt>
   39768:	mov	r3, #1
   3976c:	cmp	r6, #95	; 0x5f
   39770:	beq	397a0 <__assert_fail@plt+0x26cf0>
   39774:	ldr	r1, [sp, #16]
   39778:	cmp	r0, #0
   3977c:	mov	r9, #1
   39780:	beq	39678 <__assert_fail@plt+0x26bc8>
   39784:	b	39694 <__assert_fail@plt+0x26be4>
   39788:	mov	ip, r8
   3978c:	ldr	r8, [sp, #4]
   39790:	ldr	lr, [sp, #16]
   39794:	ldr	r3, [sp, #20]
   39798:	mov	r9, #1
   3979c:	b	39494 <__assert_fail@plt+0x269e4>
   397a0:	ldr	r1, [sp, #16]
   397a4:	mov	r9, #1
   397a8:	b	39694 <__assert_fail@plt+0x26be4>
   397ac:	add	r1, r0, #2
   397b0:	add	r0, sp, #104	; 0x68
   397b4:	mov	r6, ip
   397b8:	bl	445d4 <__assert_fail@plt+0x31b24>
   397bc:	mov	ip, r6
   397c0:	cmp	r0, #0
   397c4:	str	r0, [fp, #-196]	; 0xffffff3c
   397c8:	beq	39198 <__assert_fail@plt+0x266e8>
   397cc:	b	3b1ac <__assert_fail@plt+0x286fc>
   397d0:	ldr	r0, [sp, #144]	; 0x90
   397d4:	cmp	r0, #0
   397d8:	ble	39814 <__assert_fail@plt+0x26d64>
   397dc:	ldr	r1, [sp, #152]	; 0x98
   397e0:	sub	r3, r0, #1
   397e4:	cmp	r1, r3
   397e8:	beq	398b8 <__assert_fail@plt+0x26e08>
   397ec:	ldr	r1, [sp, #184]	; 0xb8
   397f0:	cmp	r1, #2
   397f4:	blt	39828 <__assert_fail@plt+0x26d78>
   397f8:	ldr	r1, [sp, #112]	; 0x70
   397fc:	ldr	r0, [r1, r3, lsl #2]
   39800:	cmn	r0, #1
   39804:	bne	39850 <__assert_fail@plt+0x26da0>
   39808:	sub	r3, r3, #1
   3980c:	cmn	r3, #1
   39810:	bne	397fc <__assert_fail@plt+0x26d4c>
   39814:	ldr	r1, [sp, #164]	; 0xa4
   39818:	b	39878 <__assert_fail@plt+0x26dc8>
   3981c:	mov	r0, #0
   39820:	str	r0, [fp, #-196]	; 0xffffff3c
   39824:	b	391a4 <__assert_fail@plt+0x266f4>
   39828:	ldr	r1, [sp, #108]	; 0x6c
   3982c:	ldr	lr, [sp, #172]	; 0xac
   39830:	ldrb	r0, [r1, r3]
   39834:	ubfx	r1, r0, #5, #3
   39838:	and	r3, r0, #31
   3983c:	ldr	lr, [lr, r1, lsl #2]
   39840:	mov	r1, #1
   39844:	tst	lr, r1, lsl r3
   39848:	bne	39878 <__assert_fail@plt+0x26dc8>
   3984c:	b	3985c <__assert_fail@plt+0x26dac>
   39850:	ldrb	r1, [sp, #182]	; 0xb6
   39854:	cmp	r1, #0
   39858:	bne	398c0 <__assert_fail@plt+0x26e10>
   3985c:	mov	r1, #0
   39860:	cmp	r0, #10
   39864:	bne	39878 <__assert_fail@plt+0x26dc8>
   39868:	ldrb	r0, [sp, #181]	; 0xb5
   3986c:	cmp	r0, #0
   39870:	movwne	r0, #1
   39874:	lsl	r1, r0, #1
   39878:	bfi	r6, r1, #8, #1
   3987c:	ldr	r6, [r2, r6, lsl #2]
   39880:	ldr	r0, [sp, #204]	; 0xcc
   39884:	cmp	r0, #0
   39888:	bne	39210 <__assert_fail@plt+0x26760>
   3988c:	b	3922c <__assert_fail@plt+0x2677c>
   39890:	ldr	ip, [sp, #8]
   39894:	str	r0, [fp, #-48]	; 0xffffffd0
   39898:	mov	r6, #0
   3989c:	str	r0, [fp, #-196]	; 0xffffff3c
   398a0:	ldr	r0, [sp, #204]	; 0xcc
   398a4:	cmp	r0, #0
   398a8:	bne	39210 <__assert_fail@plt+0x26760>
   398ac:	b	3922c <__assert_fail@plt+0x2677c>
   398b0:	ldr	ip, [sp, #8]
   398b4:	b	39898 <__assert_fail@plt+0x26de8>
   398b8:	mov	r1, #10
   398bc:	b	39878 <__assert_fail@plt+0x26dc8>
   398c0:	str	r8, [sp, #4]
   398c4:	str	r2, [sp, #28]
   398c8:	mov	r8, ip
   398cc:	mov	r9, r0
   398d0:	bl	12810 <iswalnum@plt>
   398d4:	mov	r1, #1
   398d8:	cmp	r9, #95	; 0x5f
   398dc:	beq	39904 <__assert_fail@plt+0x26e54>
   398e0:	mov	ip, r8
   398e4:	ldr	r8, [sp, #4]
   398e8:	ldr	r2, [sp, #28]
   398ec:	mov	r3, r9
   398f0:	cmp	r0, #0
   398f4:	mov	r9, #1
   398f8:	mov	r0, r3
   398fc:	beq	3985c <__assert_fail@plt+0x26dac>
   39900:	b	39878 <__assert_fail@plt+0x26dc8>
   39904:	mov	ip, r8
   39908:	ldr	r8, [sp, #4]
   3990c:	ldr	r2, [sp, #28]
   39910:	mov	r9, #1
   39914:	b	39878 <__assert_fail@plt+0x26dc8>
   39918:	ldr	sl, [sp, #40]	; 0x28
   3991c:	cmp	sl, #0
   39920:	ldrne	r0, [sl]
   39924:	addne	r0, r0, ip
   39928:	strne	r0, [sl]
   3992c:	ldr	sl, [sp, #68]	; 0x44
   39930:	cmn	r4, #1
   39934:	beq	39d80 <__assert_fail@plt+0x272d0>
   39938:	cmn	r4, #2
   3993c:	beq	3b1ac <__assert_fail@plt+0x286fc>
   39940:	ldr	sl, [sp, #64]	; 0x40
   39944:	str	r4, [sp, #196]	; 0xc4
   39948:	ldr	r1, [sp, #92]	; 0x5c
   3994c:	ldr	r9, [sp, #96]	; 0x60
   39950:	ldrb	r0, [sl, #28]
   39954:	cmp	r1, #2
   39958:	bcc	39964 <__assert_fail@plt+0x26eb4>
   3995c:	ands	r1, r0, #16
   39960:	beq	39970 <__assert_fail@plt+0x26ec0>
   39964:	ldr	r1, [r9, #76]	; 0x4c
   39968:	cmp	r1, #0
   3996c:	beq	3998c <__assert_fail@plt+0x26edc>
   39970:	ldr	r0, [sp, #204]	; 0xcc
   39974:	mov	r2, r4
   39978:	ldr	r1, [r0, r4, lsl #2]
   3997c:	add	r0, sp, #104	; 0x68
   39980:	bl	437cc <__assert_fail@plt+0x30d1c>
   39984:	str	r0, [sp, #200]	; 0xc8
   39988:	ldrb	r0, [sl, #28]
   3998c:	ldr	r1, [sp, #92]	; 0x5c
   39990:	cmp	r1, #2
   39994:	bcc	399ac <__assert_fail@plt+0x26efc>
   39998:	ands	r0, r0, #16
   3999c:	bne	399ac <__assert_fail@plt+0x26efc>
   399a0:	ldrb	r0, [r9, #88]	; 0x58
   399a4:	tst	r0, #1
   399a8:	bne	399b8 <__assert_fail@plt+0x26f08>
   399ac:	ldr	r0, [r9, #76]	; 0x4c
   399b0:	cmp	r0, #0
   399b4:	beq	3a10c <__assert_fail@plt+0x2765c>
   399b8:	ldr	r9, [sp, #196]	; 0xc4
   399bc:	cmn	r9, #-1073741823	; 0xc0000001
   399c0:	bcs	3b1ac <__assert_fail@plt+0x286fc>
   399c4:	ldr	r0, [sp, #188]	; 0xbc
   399c8:	ldr	r5, [sp, #200]	; 0xc8
   399cc:	str	r0, [sp, #72]	; 0x48
   399d0:	mov	r0, #4
   399d4:	add	r4, r0, r9, lsl #2
   399d8:	mov	r0, r4
   399dc:	bl	35350 <__assert_fail@plt+0x228a0>
   399e0:	mov	r6, r0
   399e4:	cmp	r0, #0
   399e8:	beq	3b26c <__assert_fail@plt+0x287bc>
   399ec:	ldr	r0, [sp, #72]	; 0x48
   399f0:	ldr	r0, [r0, #76]	; 0x4c
   399f4:	cmp	r0, #0
   399f8:	beq	39c1c <__assert_fail@plt+0x2716c>
   399fc:	mov	r0, r4
   39a00:	bl	35350 <__assert_fail@plt+0x228a0>
   39a04:	cmp	r0, #0
   39a08:	beq	3b26c <__assert_fail@plt+0x287bc>
   39a0c:	add	r7, r9, #1
   39a10:	mov	r1, #0
   39a14:	mov	r4, r0
   39a18:	lsl	r2, r7, #2
   39a1c:	bl	12834 <memset@plt>
   39a20:	ldr	r0, [sp, #36]	; 0x24
   39a24:	mov	r1, #0
   39a28:	str	r9, [fp, #-180]	; 0xffffff4c
   39a2c:	str	r5, [fp, #-184]	; 0xffffff48
   39a30:	str	r4, [fp, #-188]	; 0xffffff44
   39a34:	str	r6, [fp, #-192]	; 0xffffff40
   39a38:	str	r4, [sp, #28]
   39a3c:	str	r1, [r0]
   39a40:	str	r1, [r0, #4]
   39a44:	str	r1, [r0, #8]
   39a48:	add	r0, sp, #104	; 0x68
   39a4c:	sub	r1, fp, #192	; 0xc0
   39a50:	bl	487a0 <__assert_fail@plt+0x35cf0>
   39a54:	mov	r8, r0
   39a58:	mov	r0, #0
   39a5c:	bl	32910 <__assert_fail@plt+0x1fe60>
   39a60:	cmp	r8, #0
   39a64:	bne	3a06c <__assert_fail@plt+0x275bc>
   39a68:	ldr	r0, [r6]
   39a6c:	sub	r4, fp, #48	; 0x30
   39a70:	cmp	r0, #0
   39a74:	beq	39c74 <__assert_fail@plt+0x271c4>
   39a78:	ldr	sl, [sp, #64]	; 0x40
   39a7c:	mov	r1, #0
   39a80:	cmp	r9, #0
   39a84:	mov	r8, #0
   39a88:	str	r5, [sp, #16]
   39a8c:	str	r6, [sp, #20]
   39a90:	str	r1, [sp, #12]
   39a94:	bmi	39b30 <__assert_fail@plt+0x27080>
   39a98:	ldr	r1, [sp, #20]
   39a9c:	sub	r6, r7, #1
   39aa0:	ldr	r7, [sp, #28]
   39aa4:	add	r5, r1, #4
   39aa8:	ldr	r2, [r7]
   39aac:	cmp	r0, #0
   39ab0:	bne	39ad0 <__assert_fail@plt+0x27020>
   39ab4:	b	39b20 <__assert_fail@plt+0x27070>
   39ab8:	ldr	r0, [r5], #4
   39abc:	add	r7, r7, #4
   39ac0:	sub	r6, r6, #1
   39ac4:	ldr	r2, [r7]
   39ac8:	cmp	r0, #0
   39acc:	beq	39b20 <__assert_fail@plt+0x27070>
   39ad0:	cmp	r2, #0
   39ad4:	beq	39b24 <__assert_fail@plt+0x27074>
   39ad8:	add	r1, r0, #4
   39adc:	add	r2, r2, #4
   39ae0:	mov	r0, r4
   39ae4:	bl	44a18 <__assert_fail@plt+0x31f68>
   39ae8:	cmp	r0, #0
   39aec:	str	r0, [fp, #-196]	; 0xffffff3c
   39af0:	bne	39e64 <__assert_fail@plt+0x273b4>
   39af4:	ldr	r1, [sp, #72]	; 0x48
   39af8:	sub	r0, fp, #196	; 0xc4
   39afc:	mov	r2, r4
   39b00:	bl	46194 <__assert_fail@plt+0x336e4>
   39b04:	str	r0, [r5, #-4]
   39b08:	ldr	r0, [fp, #-40]	; 0xffffffd8
   39b0c:	bl	32910 <__assert_fail@plt+0x1fe60>
   39b10:	ldr	r8, [fp, #-196]	; 0xffffff3c
   39b14:	cmp	r8, #0
   39b18:	beq	39b24 <__assert_fail@plt+0x27074>
   39b1c:	b	39b30 <__assert_fail@plt+0x27080>
   39b20:	str	r2, [r5, #-4]
   39b24:	cmp	r6, #0
   39b28:	bne	39ab8 <__assert_fail@plt+0x27008>
   39b2c:	mov	r8, #0
   39b30:	ldr	r0, [sp, #28]
   39b34:	bl	32910 <__assert_fail@plt+0x1fe60>
   39b38:	ldr	r6, [sp, #20]
   39b3c:	ldr	r5, [sp, #16]
   39b40:	cmp	r8, #0
   39b44:	beq	3a0e4 <__assert_fail@plt+0x27634>
   39b48:	b	3a0ac <__assert_fail@plt+0x275fc>
   39b4c:	ldr	r0, [sp, #112]	; 0x70
   39b50:	ldr	r0, [r0]
   39b54:	cmn	r0, #1
   39b58:	bne	390c8 <__assert_fail@plt+0x26618>
   39b5c:	b	39d88 <__assert_fail@plt+0x272d8>
   39b60:	cmp	ip, #0
   39b64:	ble	39fe4 <__assert_fail@plt+0x27534>
   39b68:	ldr	r1, [sp, #152]	; 0x98
   39b6c:	ldr	r7, [sp, #44]	; 0x2c
   39b70:	sub	r0, ip, #1
   39b74:	cmp	r1, r0
   39b78:	beq	39ff8 <__assert_fail@plt+0x27548>
   39b7c:	ldr	r1, [sp, #184]	; 0xb8
   39b80:	cmp	r1, #2
   39b84:	blt	39bb4 <__assert_fail@plt+0x27104>
   39b88:	ldr	r1, [sp, #112]	; 0x70
   39b8c:	ldr	r5, [r1, r0, lsl #2]
   39b90:	cmn	r5, #1
   39b94:	bne	39dbc <__assert_fail@plt+0x2730c>
   39b98:	sub	r0, r0, #1
   39b9c:	cmn	r0, #1
   39ba0:	bne	39b8c <__assert_fail@plt+0x270dc>
   39ba4:	ldr	r3, [sp, #164]	; 0xa4
   39ba8:	tst	r3, #1
   39bac:	beq	39de8 <__assert_fail@plt+0x27338>
   39bb0:	b	3a00c <__assert_fail@plt+0x2755c>
   39bb4:	ldr	r1, [sp, #108]	; 0x6c
   39bb8:	ldr	r2, [sp, #172]	; 0xac
   39bbc:	ldrb	r0, [r1, r0]
   39bc0:	ubfx	r1, r0, #5, #3
   39bc4:	ldr	r1, [r2, r1, lsl #2]
   39bc8:	and	r2, r0, #31
   39bcc:	tst	r1, r9, lsl r2
   39bd0:	bne	3a00c <__assert_fail@plt+0x2755c>
   39bd4:	cmp	r0, #10
   39bd8:	beq	39dd0 <__assert_fail@plt+0x27320>
   39bdc:	b	3a010 <__assert_fail@plt+0x27560>
   39be0:	ldr	r1, [sp, #76]	; 0x4c
   39be4:	mov	r0, #0
   39be8:	cmp	r6, r1
   39bec:	bge	39bf8 <__assert_fail@plt+0x27148>
   39bf0:	ldr	r0, [sp, #100]	; 0x64
   39bf4:	ldrb	r0, [r0, r6]
   39bf8:	ldrb	r0, [r5, r0]
   39bfc:	cmp	r0, #0
   39c00:	bne	3909c <__assert_fail@plt+0x265ec>
   39c04:	sub	r0, r6, #1
   39c08:	cmp	r6, r4
   39c0c:	mov	r6, r0
   39c10:	str	r0, [fp, #-200]	; 0xffffff38
   39c14:	bgt	39be4 <__assert_fail@plt+0x27134>
   39c18:	b	3b144 <__assert_fail@plt+0x28694>
   39c1c:	ldr	r0, [sp, #36]	; 0x24
   39c20:	mov	r1, #0
   39c24:	str	r9, [fp, #-180]	; 0xffffff4c
   39c28:	str	r5, [fp, #-184]	; 0xffffff48
   39c2c:	str	r1, [fp, #-188]	; 0xffffff44
   39c30:	str	r6, [fp, #-192]	; 0xffffff40
   39c34:	str	r1, [r0]
   39c38:	str	r1, [r0, #4]
   39c3c:	str	r1, [r0, #8]
   39c40:	add	r0, sp, #104	; 0x68
   39c44:	sub	r1, fp, #192	; 0xc0
   39c48:	bl	487a0 <__assert_fail@plt+0x35cf0>
   39c4c:	mov	r8, r0
   39c50:	mov	r0, #0
   39c54:	bl	32910 <__assert_fail@plt+0x1fe60>
   39c58:	cmp	r8, #0
   39c5c:	bne	3a074 <__assert_fail@plt+0x275c4>
   39c60:	ldr	r0, [r6]
   39c64:	mov	r8, #0
   39c68:	cmp	r0, #0
   39c6c:	beq	39d68 <__assert_fail@plt+0x272b8>
   39c70:	b	3a0e4 <__assert_fail@plt+0x27634>
   39c74:	ldr	r8, [sp, #28]
   39c78:	ldr	r1, [r8]
   39c7c:	cmp	r1, #0
   39c80:	bne	39e5c <__assert_fail@plt+0x273ac>
   39c84:	cmp	r9, #1
   39c88:	blt	39d68 <__assert_fail@plt+0x272b8>
   39c8c:	ldr	r0, [sp, #204]	; 0xcc
   39c90:	lsl	r4, r9, #2
   39c94:	add	sl, r9, #1
   39c98:	sub	r0, r0, #4
   39c9c:	ldr	r1, [r0, r4]
   39ca0:	cmp	r1, #0
   39ca4:	bne	39cc4 <__assert_fail@plt+0x27214>
   39ca8:	sub	sl, sl, #1
   39cac:	sub	r4, r4, #4
   39cb0:	cmp	sl, #2
   39cb4:	blt	39d68 <__assert_fail@plt+0x272b8>
   39cb8:	ldr	r1, [r0, r4]
   39cbc:	cmp	r1, #0
   39cc0:	beq	39ca8 <__assert_fail@plt+0x271f8>
   39cc4:	ldrb	r2, [r1, #52]	; 0x34
   39cc8:	tst	r2, #16
   39ccc:	beq	39ca8 <__assert_fail@plt+0x271f8>
   39cd0:	sub	r9, sl, #2
   39cd4:	add	r5, sp, #104	; 0x68
   39cd8:	mov	r0, r5
   39cdc:	mov	r2, r9
   39ce0:	bl	437cc <__assert_fail@plt+0x30d1c>
   39ce4:	mov	r5, r0
   39ce8:	mov	r0, r8
   39cec:	mov	r1, #0
   39cf0:	mov	r2, r4
   39cf4:	bl	12834 <memset@plt>
   39cf8:	ldr	r0, [sp, #36]	; 0x24
   39cfc:	mov	r1, #0
   39d00:	str	r9, [fp, #-180]	; 0xffffff4c
   39d04:	str	r5, [fp, #-184]	; 0xffffff48
   39d08:	str	r8, [fp, #-188]	; 0xffffff44
   39d0c:	str	r6, [fp, #-192]	; 0xffffff40
   39d10:	mov	r7, r5
   39d14:	str	r1, [r0]
   39d18:	str	r1, [r0, #4]
   39d1c:	str	r1, [r0, #8]
   39d20:	add	r0, sp, #104	; 0x68
   39d24:	sub	r1, fp, #192	; 0xc0
   39d28:	bl	487a0 <__assert_fail@plt+0x35cf0>
   39d2c:	mov	r8, r0
   39d30:	mov	r0, #0
   39d34:	bl	32910 <__assert_fail@plt+0x1fe60>
   39d38:	cmp	r8, #0
   39d3c:	bne	3a0a0 <__assert_fail@plt+0x275f0>
   39d40:	ldr	r0, [r6]
   39d44:	sub	r1, sl, #1
   39d48:	mov	r5, r7
   39d4c:	sub	r4, fp, #48	; 0x30
   39d50:	mov	r7, r1
   39d54:	cmp	r0, #0
   39d58:	beq	39c74 <__assert_fail@plt+0x271c4>
   39d5c:	sub	r9, sl, #2
   39d60:	sub	r7, sl, #1
   39d64:	b	39a78 <__assert_fail@plt+0x26fc8>
   39d68:	mov	r0, r6
   39d6c:	bl	32910 <__assert_fail@plt+0x1fe60>
   39d70:	mov	r0, r8
   39d74:	bl	32910 <__assert_fail@plt+0x1fe60>
   39d78:	ldr	sl, [sp, #68]	; 0x44
   39d7c:	mov	r9, #1
   39d80:	add	r0, sp, #104	; 0x68
   39d84:	bl	43974 <__assert_fail@plt+0x30ec4>
   39d88:	ldr	r0, [fp, #-200]	; 0xffffff38
   39d8c:	ldr	r4, [sp, #48]	; 0x30
   39d90:	ldr	r7, [sp, #52]	; 0x34
   39d94:	mov	r8, #1
   39d98:	add	r6, r0, sl
   39d9c:	cmp	r6, r4
   39da0:	str	r6, [fp, #-200]	; 0xffffff38
   39da4:	blt	3b144 <__assert_fail@plt+0x28694>
   39da8:	ldr	r5, [sp, #88]	; 0x58
   39dac:	ldr	ip, [sp, #84]	; 0x54
   39db0:	cmp	r7, r6
   39db4:	bge	38f1c <__assert_fail@plt+0x2646c>
   39db8:	b	3b144 <__assert_fail@plt+0x28694>
   39dbc:	ldrb	r0, [sp, #182]	; 0xb6
   39dc0:	cmp	r0, #0
   39dc4:	bne	3a07c <__assert_fail@plt+0x275cc>
   39dc8:	cmp	r5, #10
   39dcc:	bne	3a010 <__assert_fail@plt+0x27560>
   39dd0:	ldrb	r0, [sp, #181]	; 0xb5
   39dd4:	cmp	r0, #0
   39dd8:	movwne	r0, #1
   39ddc:	lsl	r3, r0, #1
   39de0:	tst	r3, #1
   39de4:	bne	3a00c <__assert_fail@plt+0x2755c>
   39de8:	cmp	r3, #0
   39dec:	beq	3a010 <__assert_fail@plt+0x27560>
   39df0:	ands	r1, r3, #2
   39df4:	and	r0, r3, #4
   39df8:	cmpne	r0, #0
   39dfc:	bne	39e3c <__assert_fail@plt+0x2738c>
   39e00:	cmp	r1, #0
   39e04:	bne	39e4c <__assert_fail@plt+0x2739c>
   39e08:	ldr	r6, [r4, #36]	; 0x24
   39e0c:	cmp	r0, #0
   39e10:	beq	3a010 <__assert_fail@plt+0x27560>
   39e14:	ldr	r2, [r6, #40]	; 0x28
   39e18:	sub	r0, fp, #196	; 0xc4
   39e1c:	mov	r1, r4
   39e20:	mov	r5, ip
   39e24:	bl	421c8 <__assert_fail@plt+0x2f718>
   39e28:	mov	ip, r5
   39e2c:	mov	r6, r0
   39e30:	cmp	r6, #0
   39e34:	bne	39100 <__assert_fail@plt+0x26650>
   39e38:	b	3b1ac <__assert_fail@plt+0x286fc>
   39e3c:	ldr	r6, [r4, #48]	; 0x30
   39e40:	cmp	r6, #0
   39e44:	bne	39100 <__assert_fail@plt+0x26650>
   39e48:	b	3b1ac <__assert_fail@plt+0x286fc>
   39e4c:	ldr	r6, [r4, #44]	; 0x2c
   39e50:	cmp	r6, #0
   39e54:	bne	39100 <__assert_fail@plt+0x26650>
   39e58:	b	3b1ac <__assert_fail@plt+0x286fc>
   39e5c:	mov	r2, r7
   39e60:	b	39a78 <__assert_fail@plt+0x26fc8>
   39e64:	mov	r8, r0
   39e68:	b	39b30 <__assert_fail@plt+0x27080>
   39e6c:	sxtb	r0, r0
   39e70:	cmn	r0, #1
   39e74:	ble	3a01c <__assert_fail@plt+0x2756c>
   39e78:	mov	r0, #1
   39e7c:	mov	r4, ip
   39e80:	str	r0, [sp, #72]	; 0x48
   39e84:	ldr	r0, [sp, #56]	; 0x38
   39e88:	cmp	r0, #0
   39e8c:	bne	3913c <__assert_fail@plt+0x2668c>
   39e90:	b	3a05c <__assert_fail@plt+0x275ac>
   39e94:	ldr	r0, [r6, #8]
   39e98:	cmp	r0, #1
   39e9c:	blt	39f70 <__assert_fail@plt+0x274c0>
   39ea0:	ldr	r4, [sp, #188]	; 0xbc
   39ea4:	mov	r5, #0
   39ea8:	str	ip, [sp, #8]
   39eac:	b	39edc <__assert_fail@plt+0x2742c>
   39eb0:	add	r1, r1, #1
   39eb4:	str	r7, [r0, #4]
   39eb8:	ldr	ip, [sp, #8]
   39ebc:	mov	r9, #1
   39ec0:	str	r1, [sp, #228]	; 0xe4
   39ec4:	mov	r1, #0
   39ec8:	str	r1, [r0]
   39ecc:	ldr	r0, [r6, #8]
   39ed0:	add	r5, r5, #1
   39ed4:	cmp	r5, r0
   39ed8:	bge	39f70 <__assert_fail@plt+0x274c0>
   39edc:	ldr	r1, [r6, #12]
   39ee0:	ldr	r7, [r1, r5, lsl #2]
   39ee4:	ldr	r1, [r4]
   39ee8:	add	r2, r1, r7, lsl #3
   39eec:	ldrb	r2, [r2, #4]
   39ef0:	cmp	r2, #8
   39ef4:	bne	39ed0 <__assert_fail@plt+0x27420>
   39ef8:	ldr	r1, [r1, r7, lsl #3]
   39efc:	cmp	r1, #31
   39f00:	bgt	39ed0 <__assert_fail@plt+0x27420>
   39f04:	ldr	r2, [r4, #80]	; 0x50
   39f08:	tst	r2, r9, lsl r1
   39f0c:	beq	39ed0 <__assert_fail@plt+0x27420>
   39f10:	ldr	r0, [sp, #228]	; 0xe4
   39f14:	ldr	r9, [sp, #232]	; 0xe8
   39f18:	cmp	r0, r9
   39f1c:	beq	39f4c <__assert_fail@plt+0x2749c>
   39f20:	mov	r0, #1
   39f24:	mov	r1, #24
   39f28:	bl	322c0 <__assert_fail@plt+0x1f810>
   39f2c:	ldr	r1, [sp, #228]	; 0xe4
   39f30:	ldr	r2, [sp, #236]	; 0xec
   39f34:	str	r0, [r2, r1, lsl #2]
   39f38:	ldr	r0, [sp, #236]	; 0xec
   39f3c:	ldr	r0, [r0, r1, lsl #2]
   39f40:	cmp	r0, #0
   39f44:	bne	39eb0 <__assert_fail@plt+0x27400>
   39f48:	b	3a0dc <__assert_fail@plt+0x2762c>
   39f4c:	ldr	r0, [sp, #236]	; 0xec
   39f50:	lsl	r1, r9, #3
   39f54:	bl	36110 <__assert_fail@plt+0x23660>
   39f58:	cmp	r0, #0
   39f5c:	beq	3a0dc <__assert_fail@plt+0x2762c>
   39f60:	str	r0, [sp, #236]	; 0xec
   39f64:	lsl	r0, r9, #1
   39f68:	str	r0, [sp, #232]	; 0xe8
   39f6c:	b	39f20 <__assert_fail@plt+0x27470>
   39f70:	mov	r8, #0
   39f74:	str	r8, [fp, #-196]	; 0xffffff3c
   39f78:	ldrb	r0, [r6, #52]	; 0x34
   39f7c:	tst	r0, #64	; 0x40
   39f80:	beq	39124 <__assert_fail@plt+0x26674>
   39f84:	add	r1, r6, #4
   39f88:	add	r0, sp, #104	; 0x68
   39f8c:	mov	r4, ip
   39f90:	bl	43c00 <__assert_fail@plt+0x31150>
   39f94:	mov	ip, r4
   39f98:	cmp	r0, #0
   39f9c:	str	r0, [fp, #-196]	; 0xffffff3c
   39fa0:	beq	39124 <__assert_fail@plt+0x26674>
   39fa4:	mov	r4, r0
   39fa8:	cmn	r4, #1
   39fac:	bne	39938 <__assert_fail@plt+0x26e88>
   39fb0:	b	39d80 <__assert_fail@plt+0x272d0>
   39fb4:	ldr	r1, [sp, #76]	; 0x4c
   39fb8:	mov	r0, #0
   39fbc:	mov	r6, r7
   39fc0:	cmp	r7, r1
   39fc4:	ldr	r1, [sp, #100]	; 0x64
   39fc8:	ldrblt	r0, [r1, r7]
   39fcc:	cmp	ip, #0
   39fd0:	ldrbne	r0, [ip, r0]
   39fd4:	ldrb	r0, [r5, r0]
   39fd8:	cmp	r0, #0
   39fdc:	bne	3909c <__assert_fail@plt+0x265ec>
   39fe0:	b	3b3ac <__assert_fail@plt+0x288fc>
   39fe4:	ldr	r3, [sp, #164]	; 0xa4
   39fe8:	ldr	r7, [sp, #44]	; 0x2c
   39fec:	tst	r3, #1
   39ff0:	beq	39de8 <__assert_fail@plt+0x27338>
   39ff4:	b	3a00c <__assert_fail@plt+0x2755c>
   39ff8:	ldr	r0, [sp, #192]	; 0xc0
   39ffc:	and	r0, r0, #2
   3a000:	eor	r3, r0, #10
   3a004:	tst	r3, #1
   3a008:	beq	39de8 <__assert_fail@plt+0x27338>
   3a00c:	ldr	r6, [r4, #40]	; 0x28
   3a010:	cmp	r6, #0
   3a014:	bne	39100 <__assert_fail@plt+0x26650>
   3a018:	b	3b1ac <__assert_fail@plt+0x286fc>
   3a01c:	add	r0, sp, #104	; 0x68
   3a020:	mov	r1, r6
   3a024:	mov	r2, ip
   3a028:	mov	r4, ip
   3a02c:	bl	437cc <__assert_fail@plt+0x30d1c>
   3a030:	clz	r1, r0
   3a034:	cmp	r0, #0
   3a038:	mov	ip, r4
   3a03c:	lsr	r2, r1, #5
   3a040:	ldr	r1, [sp, #56]	; 0x38
   3a044:	movwne	r0, #1
   3a048:	mvneq	r4, #0
   3a04c:	str	r0, [sp, #72]	; 0x48
   3a050:	orr	r1, r1, r2
   3a054:	cmp	r1, #0
   3a058:	bne	3913c <__assert_fail@plt+0x2668c>
   3a05c:	mov	r4, ip
   3a060:	cmn	r4, #1
   3a064:	bne	39938 <__assert_fail@plt+0x26e88>
   3a068:	b	39d80 <__assert_fail@plt+0x272d0>
   3a06c:	ldr	r0, [sp, #28]
   3a070:	b	3a0a8 <__assert_fail@plt+0x275f8>
   3a074:	mov	r0, #0
   3a078:	b	3a0a8 <__assert_fail@plt+0x275f8>
   3a07c:	mov	r0, r5
   3a080:	mov	r8, ip
   3a084:	bl	12810 <iswalnum@plt>
   3a088:	mov	ip, r8
   3a08c:	cmp	r5, #95	; 0x5f
   3a090:	beq	3a00c <__assert_fail@plt+0x2755c>
   3a094:	cmp	r0, #0
   3a098:	beq	39dc8 <__assert_fail@plt+0x27318>
   3a09c:	b	3a00c <__assert_fail@plt+0x2755c>
   3a0a0:	ldr	r0, [sp, #28]
   3a0a4:	ldr	sl, [sp, #64]	; 0x40
   3a0a8:	str	r0, [sp, #12]
   3a0ac:	mov	r0, r6
   3a0b0:	bl	32910 <__assert_fail@plt+0x1fe60>
   3a0b4:	ldr	r0, [sp, #12]
   3a0b8:	bl	32910 <__assert_fail@plt+0x1fe60>
   3a0bc:	ldr	r9, [sp, #96]	; 0x60
   3a0c0:	cmp	r8, #0
   3a0c4:	beq	3a10c <__assert_fail@plt+0x2765c>
   3a0c8:	ldr	sl, [sp, #68]	; 0x44
   3a0cc:	cmp	r8, #1
   3a0d0:	mov	r9, #1
   3a0d4:	beq	39d80 <__assert_fail@plt+0x272d0>
   3a0d8:	b	3b144 <__assert_fail@plt+0x28694>
   3a0dc:	mov	r4, #12
   3a0e0:	b	39940 <__assert_fail@plt+0x26e90>
   3a0e4:	ldr	r0, [sp, #204]	; 0xcc
   3a0e8:	bl	32910 <__assert_fail@plt+0x1fe60>
   3a0ec:	mov	r0, #0
   3a0f0:	str	r5, [sp, #200]	; 0xc8
   3a0f4:	str	r6, [sp, #204]	; 0xcc
   3a0f8:	str	r9, [sp, #196]	; 0xc4
   3a0fc:	bl	32910 <__assert_fail@plt+0x1fe60>
   3a100:	mov	r0, #0
   3a104:	bl	32910 <__assert_fail@plt+0x1fe60>
   3a108:	ldr	r9, [sp, #96]	; 0x60
   3a10c:	ldr	r0, [sp, #92]	; 0x5c
   3a110:	cmp	r0, #0
   3a114:	beq	3b140 <__assert_fail@plt+0x28690>
   3a118:	ldr	r0, [sp, #92]	; 0x5c
   3a11c:	ldr	r1, [fp, #16]
   3a120:	ldr	r8, [fp, #20]
   3a124:	cmp	r0, #1
   3a128:	beq	3a148 <__assert_fail@plt+0x27698>
   3a12c:	ldr	r0, [sp, #32]
   3a130:	mvn	r0, r0
   3a134:	add	r0, r0, r1
   3a138:	mov	r1, #255	; 0xff
   3a13c:	lsl	r2, r0, #3
   3a140:	add	r0, r8, #8
   3a144:	bl	12834 <memset@plt>
   3a148:	mov	r0, #0
   3a14c:	ldr	r1, [sp, #196]	; 0xc4
   3a150:	stm	r8, {r0, r1}
   3a154:	ldr	r0, [sp, #92]	; 0x5c
   3a158:	cmp	r0, #2
   3a15c:	bcc	3b040 <__assert_fail@plt+0x28590>
   3a160:	ldrb	r0, [sl, #28]
   3a164:	ands	r0, r0, #16
   3a168:	bne	3b040 <__assert_fail@plt+0x28590>
   3a16c:	ldrb	r1, [r9, #88]	; 0x58
   3a170:	sub	r5, fp, #48	; 0x30
   3a174:	mov	r0, #0
   3a178:	tst	r1, #1
   3a17c:	mov	r1, #0
   3a180:	beq	3a194 <__assert_fail@plt+0x276e4>
   3a184:	ldr	r2, [r9, #76]	; 0x4c
   3a188:	mov	r1, #0
   3a18c:	cmp	r2, #0
   3a190:	movwgt	r1, #1
   3a194:	movw	r2, #12688	; 0x3190
   3a198:	ldr	r7, [sl]
   3a19c:	cmp	r1, #0
   3a1a0:	mov	r6, #0
   3a1a4:	movt	r2, #5
   3a1a8:	vldr	d16, [r2]
   3a1ac:	ldr	r2, [r2, #8]
   3a1b0:	str	r2, [fp, #-40]	; 0xffffffd8
   3a1b4:	sub	r2, fp, #192	; 0xc0
   3a1b8:	add	r4, r2, #12
   3a1bc:	mov	r2, #16
   3a1c0:	vstr	d16, [fp, #-48]	; 0xffffffd0
   3a1c4:	str	r4, [fp, #-184]	; 0xffffff48
   3a1c8:	str	r2, [fp, #-188]	; 0xffffff44
   3a1cc:	str	r0, [fp, #-192]	; 0xffffff40
   3a1d0:	beq	3a1f0 <__assert_fail@plt+0x27740>
   3a1d4:	mov	r0, #48	; 0x30
   3a1d8:	bl	35350 <__assert_fail@plt+0x228a0>
   3a1dc:	cmp	r0, #0
   3a1e0:	str	r0, [fp, #-40]	; 0xffffffd8
   3a1e4:	beq	3b1ac <__assert_fail@plt+0x286fc>
   3a1e8:	ldr	r0, [fp, #-192]	; 0xffffff40
   3a1ec:	mov	r6, r5
   3a1f0:	ldr	r5, [sp, #92]	; 0x5c
   3a1f4:	ldr	sl, [r7, #72]	; 0x48
   3a1f8:	str	r4, [sp, #88]	; 0x58
   3a1fc:	cmp	r0, r5
   3a200:	bcs	3a2e8 <__assert_fail@plt+0x27838>
   3a204:	sub	r0, fp, #192	; 0xc0
   3a208:	mov	r1, r5
   3a20c:	mov	r2, r4
   3a210:	mov	r3, #8
   3a214:	bl	4c3a8 <__assert_fail@plt+0x398f8>
   3a218:	cmp	r0, #0
   3a21c:	bne	3a2ec <__assert_fail@plt+0x2783c>
   3a220:	ldr	r1, [sp, #88]	; 0x58
   3a224:	ldr	r0, [fp, #-184]	; 0xffffff48
   3a228:	mov	r4, r6
   3a22c:	mov	r5, r1
   3a230:	cmp	r0, r1
   3a234:	beq	3a23c <__assert_fail@plt+0x2778c>
   3a238:	bl	32910 <__assert_fail@plt+0x1fe60>
   3a23c:	mov	r0, #16
   3a240:	str	r5, [fp, #-184]	; 0xffffff48
   3a244:	mov	r8, #12
   3a248:	cmp	r4, #0
   3a24c:	str	r0, [fp, #-188]	; 0xffffff44
   3a250:	mov	r0, #0
   3a254:	str	r0, [fp, #-192]	; 0xffffff40
   3a258:	beq	3b144 <__assert_fail@plt+0x28694>
   3a25c:	ldr	r1, [r4]
   3a260:	mov	r0, r4
   3a264:	ldr	r0, [r4, #8]
   3a268:	cmp	r1, #1
   3a26c:	blt	3b23c <__assert_fail@plt+0x2878c>
   3a270:	mov	r5, #0
   3a274:	mov	r6, #0
   3a278:	add	r0, r0, r5
   3a27c:	ldr	r0, [r0, #20]
   3a280:	bl	32910 <__assert_fail@plt+0x1fe60>
   3a284:	ldr	r0, [r4, #8]
   3a288:	add	r0, r0, r5
   3a28c:	ldr	r0, [r0, #8]
   3a290:	bl	32910 <__assert_fail@plt+0x1fe60>
   3a294:	ldr	r1, [r4]
   3a298:	ldr	r0, [r4, #8]
   3a29c:	add	r6, r6, #1
   3a2a0:	add	r5, r5, #24
   3a2a4:	cmp	r6, r1
   3a2a8:	blt	3a278 <__assert_fail@plt+0x277c8>
   3a2ac:	b	3b23c <__assert_fail@plt+0x2878c>
   3a2b0:	ldr	r1, [r3, #8]
   3a2b4:	cmp	r1, #0
   3a2b8:	beq	3a2c8 <__assert_fail@plt+0x27818>
   3a2bc:	ldrsb	r1, [r4, #28]
   3a2c0:	cmp	r1, #0
   3a2c4:	bmi	38bfc <__assert_fail@plt+0x2614c>
   3a2c8:	mov	r1, #0
   3a2cc:	cmp	r6, #0
   3a2d0:	str	r1, [sp, #80]	; 0x50
   3a2d4:	beq	3b1a4 <__assert_fail@plt+0x286f4>
   3a2d8:	cmp	sl, #0
   3a2dc:	mov	r6, #0
   3a2e0:	bne	3b198 <__assert_fail@plt+0x286e8>
   3a2e4:	b	38c00 <__assert_fail@plt+0x26150>
   3a2e8:	str	r5, [fp, #-192]	; 0xffffff40
   3a2ec:	ldr	r0, [fp, #-184]	; 0xffffff48
   3a2f0:	lsl	r2, r5, #3
   3a2f4:	mov	r1, r8
   3a2f8:	str	r2, [sp, #76]	; 0x4c
   3a2fc:	str	r0, [sp, #84]	; 0x54
   3a300:	bl	124e0 <memcpy@plt>
   3a304:	ldr	r4, [r8]
   3a308:	ldr	r0, [r8, #4]
   3a30c:	mov	ip, #0
   3a310:	cmp	r4, r0
   3a314:	ble	3a3a0 <__assert_fail@plt+0x278f0>
   3a318:	mov	r0, ip
   3a31c:	bl	32910 <__assert_fail@plt+0x1fe60>
   3a320:	ldr	r0, [fp, #-184]	; 0xffffff48
   3a324:	ldr	r4, [sp, #88]	; 0x58
   3a328:	cmp	r0, r4
   3a32c:	beq	3a334 <__assert_fail@plt+0x27884>
   3a330:	bl	32910 <__assert_fail@plt+0x1fe60>
   3a334:	mov	r0, #16
   3a338:	str	r4, [fp, #-184]	; 0xffffff48
   3a33c:	cmp	r6, #0
   3a340:	str	r0, [fp, #-188]	; 0xffffff44
   3a344:	mov	r0, #0
   3a348:	str	r0, [fp, #-192]	; 0xffffff40
   3a34c:	beq	3b040 <__assert_fail@plt+0x28590>
   3a350:	ldr	r1, [r6]
   3a354:	ldr	r0, [r6, #8]
   3a358:	cmp	r1, #1
   3a35c:	blt	3b038 <__assert_fail@plt+0x28588>
   3a360:	mov	r4, #0
   3a364:	mov	r5, #0
   3a368:	add	r0, r0, r4
   3a36c:	ldr	r0, [r0, #20]
   3a370:	bl	32910 <__assert_fail@plt+0x1fe60>
   3a374:	ldr	r0, [r6, #8]
   3a378:	add	r0, r0, r4
   3a37c:	ldr	r0, [r0, #8]
   3a380:	bl	32910 <__assert_fail@plt+0x1fe60>
   3a384:	ldr	r1, [r6]
   3a388:	ldr	r0, [r6, #8]
   3a38c:	add	r5, r5, #1
   3a390:	add	r4, r4, #24
   3a394:	cmp	r5, r1
   3a398:	blt	3a368 <__assert_fail@plt+0x278b8>
   3a39c:	b	3b038 <__assert_fail@plt+0x28588>
   3a3a0:	add	r0, r8, #4
   3a3a4:	mov	lr, #1
   3a3a8:	mov	r5, #0
   3a3ac:	mov	ip, #0
   3a3b0:	mov	r3, #0
   3a3b4:	str	r7, [sp, #60]	; 0x3c
   3a3b8:	str	r6, [sp, #68]	; 0x44
   3a3bc:	str	r0, [sp, #64]	; 0x40
   3a3c0:	ldr	r0, [sp, #92]	; 0x5c
   3a3c4:	lsl	r0, r0, #4
   3a3c8:	str	r0, [sp, #44]	; 0x2c
   3a3cc:	mov	r0, #0
   3a3d0:	str	r0, [sp, #72]	; 0x48
   3a3d4:	ldr	r0, [r7]
   3a3d8:	add	r1, r0, sl, lsl #3
   3a3dc:	ldr	r1, [r1, #4]
   3a3e0:	uxtb	r2, r1
   3a3e4:	cmp	r2, #9
   3a3e8:	beq	3a41c <__assert_fail@plt+0x2796c>
   3a3ec:	cmp	r2, #8
   3a3f0:	bne	3a498 <__assert_fail@plt+0x279e8>
   3a3f4:	ldr	r0, [r0, sl, lsl #3]
   3a3f8:	ldr	r1, [sp, #92]	; 0x5c
   3a3fc:	add	r0, r0, #1
   3a400:	cmp	r0, r1
   3a404:	bge	3a498 <__assert_fail@plt+0x279e8>
   3a408:	mov	r1, r8
   3a40c:	str	r4, [r1, r0, lsl #3]!
   3a410:	mvn	r0, #0
   3a414:	str	r0, [r1, #4]
   3a418:	b	3a498 <__assert_fail@plt+0x279e8>
   3a41c:	ldr	r0, [r0, sl, lsl #3]
   3a420:	ldr	r2, [sp, #92]	; 0x5c
   3a424:	add	r0, r0, #1
   3a428:	cmp	r0, r2
   3a42c:	bge	3a498 <__assert_fail@plt+0x279e8>
   3a430:	ldr	r2, [r8, r0, lsl #3]
   3a434:	cmp	r2, r4
   3a438:	bge	3a450 <__assert_fail@plt+0x279a0>
   3a43c:	add	r0, r8, r0, lsl #3
   3a440:	mov	r1, r8
   3a444:	str	r4, [r0, #4]
   3a448:	ldr	r0, [sp, #84]	; 0x54
   3a44c:	b	3a470 <__assert_fail@plt+0x279c0>
   3a450:	tst	r1, #524288	; 0x80000
   3a454:	beq	3a490 <__assert_fail@plt+0x279e0>
   3a458:	ldr	r1, [sp, #84]	; 0x54
   3a45c:	ldr	r1, [r1, r0, lsl #3]
   3a460:	cmn	r1, #1
   3a464:	beq	3a490 <__assert_fail@plt+0x279e0>
   3a468:	ldr	r1, [sp, #84]	; 0x54
   3a46c:	mov	r0, r8
   3a470:	ldr	r2, [sp, #76]	; 0x4c
   3a474:	mov	r7, ip
   3a478:	str	r3, [sp, #48]	; 0x30
   3a47c:	bl	124e0 <memcpy@plt>
   3a480:	ldr	r3, [sp, #48]	; 0x30
   3a484:	mov	ip, r7
   3a488:	mov	lr, #1
   3a48c:	b	3a498 <__assert_fail@plt+0x279e8>
   3a490:	add	r0, r8, r0, lsl #3
   3a494:	str	r4, [r0, #4]
   3a498:	ldr	r0, [r8, #4]
   3a49c:	cmp	r4, r0
   3a4a0:	ldreq	r0, [sp, #200]	; 0xc8
   3a4a4:	cmpeq	sl, r0
   3a4a8:	beq	3a504 <__assert_fail@plt+0x27a54>
   3a4ac:	cmp	r6, #0
   3a4b0:	beq	3a5dc <__assert_fail@plt+0x27b2c>
   3a4b4:	cmp	r3, #1
   3a4b8:	blt	3a5dc <__assert_fail@plt+0x27b2c>
   3a4bc:	str	ip, [sp, #52]	; 0x34
   3a4c0:	mov	ip, r3
   3a4c4:	mov	r0, #0
   3a4c8:	subs	r1, r3, #1
   3a4cc:	beq	3a4f0 <__assert_fail@plt+0x27a40>
   3a4d0:	add	r2, r0, r1
   3a4d4:	lsr	r3, r2, #1
   3a4d8:	ldr	r7, [r5, r3, lsl #2]
   3a4dc:	cmp	r7, sl
   3a4e0:	addlt	r0, lr, r2, lsr #1
   3a4e4:	movge	r1, r3
   3a4e8:	cmp	r0, r1
   3a4ec:	bcc	3a4d0 <__assert_fail@plt+0x27a20>
   3a4f0:	ldr	r0, [r5, r0, lsl #2]
   3a4f4:	mov	r3, ip
   3a4f8:	ldr	ip, [sp, #52]	; 0x34
   3a4fc:	cmp	r0, sl
   3a500:	bne	3a5dc <__assert_fail@plt+0x27b2c>
   3a504:	ldr	r4, [sp, #88]	; 0x58
   3a508:	cmp	r6, #0
   3a50c:	beq	3afb8 <__assert_fail@plt+0x28508>
   3a510:	ldr	r0, [sp, #92]	; 0x5c
   3a514:	ldr	r1, [sp, #64]	; 0x40
   3a518:	ldr	r2, [r1, #-4]
   3a51c:	cmp	r2, #0
   3a520:	bpl	3a53c <__assert_fail@plt+0x27a8c>
   3a524:	subs	r0, r0, #1
   3a528:	add	r1, r1, #8
   3a52c:	beq	3afb8 <__assert_fail@plt+0x28508>
   3a530:	ldr	r2, [r1, #-4]
   3a534:	cmp	r2, #0
   3a538:	bmi	3a524 <__assert_fail@plt+0x27a74>
   3a53c:	ldr	r2, [r1]
   3a540:	cmn	r2, #1
   3a544:	bne	3a524 <__assert_fail@plt+0x27a74>
   3a548:	ldr	r0, [r6]
   3a54c:	cmp	r0, #0
   3a550:	beq	3afb8 <__assert_fail@plt+0x28508>
   3a554:	sub	r1, r0, #1
   3a558:	ldr	r7, [sp, #76]	; 0x4c
   3a55c:	mov	r0, r8
   3a560:	mov	r8, ip
   3a564:	str	r1, [r6]
   3a568:	add	sl, r1, r1, lsl #1
   3a56c:	ldr	r4, [r6, #8]
   3a570:	mov	r2, r7
   3a574:	ldr	r1, [r4, sl, lsl #3]!
   3a578:	str	r1, [sp, #100]	; 0x64
   3a57c:	ldr	r1, [r4, #8]
   3a580:	bl	124e0 <memcpy@plt>
   3a584:	ldr	r0, [r4, #8]
   3a588:	ldr	r1, [sp, #92]	; 0x5c
   3a58c:	mov	r2, r7
   3a590:	add	r1, r0, r1, lsl #3
   3a594:	ldr	r0, [sp, #84]	; 0x54
   3a598:	bl	124e0 <memcpy@plt>
   3a59c:	mov	r0, r8
   3a5a0:	bl	32910 <__assert_fail@plt+0x1fe60>
   3a5a4:	ldr	r0, [r6, #8]
   3a5a8:	add	r0, r0, sl, lsl #3
   3a5ac:	ldr	r0, [r0, #8]
   3a5b0:	bl	32910 <__assert_fail@plt+0x1fe60>
   3a5b4:	ldr	r0, [r6, #8]
   3a5b8:	mov	lr, #1
   3a5bc:	add	r0, r0, sl, lsl #3
   3a5c0:	ldr	ip, [r0, #20]
   3a5c4:	ldr	r1, [r0, #12]
   3a5c8:	ldr	sl, [r0, #4]
   3a5cc:	ldr	r3, [r0, #16]
   3a5d0:	mov	r5, ip
   3a5d4:	str	r1, [sp, #72]	; 0x48
   3a5d8:	b	3a5e0 <__assert_fail@plt+0x27b30>
   3a5dc:	str	r4, [sp, #100]	; 0x64
   3a5e0:	ldr	r4, [sp, #188]	; 0xbc
   3a5e4:	ldr	r0, [r4]
   3a5e8:	add	r1, r0, sl, lsl #3
   3a5ec:	ldr	r1, [r1, #4]
   3a5f0:	tst	r1, #8
   3a5f4:	bne	3a6c8 <__assert_fail@plt+0x27c18>
   3a5f8:	tst	r1, #1048576	; 0x100000
   3a5fc:	bne	3a758 <__assert_fail@plt+0x27ca8>
   3a600:	uxtb	r1, r1
   3a604:	cmp	r1, #4
   3a608:	bne	3a784 <__assert_fail@plt+0x27cd4>
   3a60c:	ldr	r0, [r0, sl, lsl #3]
   3a610:	ldr	r2, [sp, #92]	; 0x5c
   3a614:	str	r5, [sp, #56]	; 0x38
   3a618:	mov	r7, #0
   3a61c:	mov	r5, r2
   3a620:	add	r0, r0, #1
   3a624:	cmp	r0, r2
   3a628:	bge	3a63c <__assert_fail@plt+0x27b8c>
   3a62c:	ldr	r1, [fp, #20]
   3a630:	ldr	r2, [r1, r0, lsl #3]!
   3a634:	ldr	r1, [r1, #4]
   3a638:	sub	r7, r1, r2
   3a63c:	ldr	r8, [sp, #100]	; 0x64
   3a640:	cmp	r6, #0
   3a644:	beq	3aa48 <__assert_fail@plt+0x27f98>
   3a648:	cmp	r0, r5
   3a64c:	bge	3a6ac <__assert_fail@plt+0x27bfc>
   3a650:	ldr	r2, [fp, #20]
   3a654:	ldr	r1, [r2, r0, lsl #3]
   3a658:	cmn	r1, #1
   3a65c:	beq	3a6ac <__assert_fail@plt+0x27bfc>
   3a660:	add	r0, r2, r0, lsl #3
   3a664:	ldr	r0, [r0, #4]
   3a668:	cmn	r0, #1
   3a66c:	beq	3a6ac <__assert_fail@plt+0x27bfc>
   3a670:	cmp	r7, #0
   3a674:	beq	3aac0 <__assert_fail@plt+0x28010>
   3a678:	ldr	r0, [sp, #132]	; 0x84
   3a67c:	sub	r0, r0, r8
   3a680:	cmp	r0, r7
   3a684:	blt	3a6ac <__assert_fail@plt+0x27bfc>
   3a688:	ldr	r2, [sp, #108]	; 0x6c
   3a68c:	str	ip, [sp, #52]	; 0x34
   3a690:	add	r0, r2, r1
   3a694:	add	r1, r2, r8
   3a698:	mov	r2, r7
   3a69c:	bl	127a4 <bcmp@plt>
   3a6a0:	cmp	r0, #0
   3a6a4:	beq	3ac7c <__assert_fail@plt+0x281cc>
   3a6a8:	ldr	ip, [sp, #52]	; 0x34
   3a6ac:	mov	sl, r5
   3a6b0:	ldr	r5, [sp, #56]	; 0x38
   3a6b4:	ldr	r4, [sp, #88]	; 0x58
   3a6b8:	ldr	r0, [r6]
   3a6bc:	cmp	r0, #0
   3a6c0:	bne	3acb8 <__assert_fail@plt+0x28208>
   3a6c4:	b	3b1b4 <__assert_fail@plt+0x28704>
   3a6c8:	ldr	r0, [sp, #204]	; 0xcc
   3a6cc:	ldr	r1, [sp, #100]	; 0x64
   3a6d0:	ldr	r8, [r4, #20]
   3a6d4:	cmp	r3, #1
   3a6d8:	ldr	r7, [r0, r1, lsl #2]
   3a6dc:	blt	3a730 <__assert_fail@plt+0x27c80>
   3a6e0:	mov	r4, r3
   3a6e4:	mov	r0, #0
   3a6e8:	subs	r1, r3, #1
   3a6ec:	str	r7, [sp, #80]	; 0x50
   3a6f0:	beq	3a714 <__assert_fail@plt+0x27c64>
   3a6f4:	add	r2, r0, r1
   3a6f8:	lsr	r3, r2, #1
   3a6fc:	ldr	r7, [r5, r3, lsl #2]
   3a700:	cmp	r7, sl
   3a704:	addlt	r0, lr, r2, lsr #1
   3a708:	movge	r1, r3
   3a70c:	cmp	r0, r1
   3a710:	bcc	3a6f4 <__assert_fail@plt+0x27c44>
   3a714:	ldr	r0, [r5, r0, lsl #2]
   3a718:	ldr	r7, [sp, #80]	; 0x50
   3a71c:	mov	r3, r4
   3a720:	cmp	r0, sl
   3a724:	bne	3a730 <__assert_fail@plt+0x27c80>
   3a728:	str	r5, [sp, #56]	; 0x38
   3a72c:	b	3a878 <__assert_fail@plt+0x27dc8>
   3a730:	ldr	r0, [sp, #72]	; 0x48
   3a734:	cmp	r0, #0
   3a738:	beq	3a84c <__assert_fail@plt+0x27d9c>
   3a73c:	cmp	r3, #0
   3a740:	str	r5, [sp, #56]	; 0x38
   3a744:	bne	3ad58 <__assert_fail@plt+0x282a8>
   3a748:	mov	r0, r5
   3a74c:	str	sl, [r5]
   3a750:	mov	r3, #1
   3a754:	b	3a878 <__assert_fail@plt+0x27dc8>
   3a758:	ldr	r3, [sp, #100]	; 0x64
   3a75c:	mov	r0, r4
   3a760:	mov	r1, sl
   3a764:	add	r2, sp, #104	; 0x68
   3a768:	mov	r8, ip
   3a76c:	bl	464c4 <__assert_fail@plt+0x33a14>
   3a770:	mov	lr, #1
   3a774:	mov	r1, r0
   3a778:	cmp	r1, #0
   3a77c:	mov	ip, r8
   3a780:	bne	3a7b0 <__assert_fail@plt+0x27d00>
   3a784:	ldr	r0, [r4]
   3a788:	ldr	r2, [sp, #100]	; 0x64
   3a78c:	mov	r6, ip
   3a790:	add	r1, r0, sl, lsl #3
   3a794:	add	r0, sp, #104	; 0x68
   3a798:	bl	46850 <__assert_fail@plt+0x33da0>
   3a79c:	mov	ip, r6
   3a7a0:	mov	lr, #1
   3a7a4:	mov	r1, #1
   3a7a8:	cmp	r0, #0
   3a7ac:	beq	3a898 <__assert_fail@plt+0x27de8>
   3a7b0:	ldr	r0, [r4, #12]
   3a7b4:	ldr	r2, [sp, #100]	; 0x64
   3a7b8:	ldr	r6, [sp, #68]	; 0x44
   3a7bc:	ldr	r7, [r0, sl, lsl #2]
   3a7c0:	add	r2, r1, r2
   3a7c4:	cmp	r6, #0
   3a7c8:	beq	3a940 <__assert_fail@plt+0x27e90>
   3a7cc:	ldr	r0, [sp, #196]	; 0xc4
   3a7d0:	ldr	r4, [sp, #88]	; 0x58
   3a7d4:	cmp	r2, r0
   3a7d8:	bgt	3aca8 <__assert_fail@plt+0x281f8>
   3a7dc:	ldr	r0, [sp, #204]	; 0xcc
   3a7e0:	ldr	r0, [r0, r2, lsl #2]
   3a7e4:	cmp	r0, #0
   3a7e8:	beq	3aca8 <__assert_fail@plt+0x281f8>
   3a7ec:	ldr	r1, [r0, #8]
   3a7f0:	cmp	r1, #1
   3a7f4:	blt	3aca8 <__assert_fail@plt+0x281f8>
   3a7f8:	ldr	r0, [r0, #12]
   3a7fc:	str	r2, [sp, #100]	; 0x64
   3a800:	mov	r8, r5
   3a804:	subs	r1, r1, #1
   3a808:	mov	r2, #0
   3a80c:	beq	3a834 <__assert_fail@plt+0x27d84>
   3a810:	mov	r2, #0
   3a814:	add	r3, r2, r1
   3a818:	lsr	r6, r3, #1
   3a81c:	ldr	r5, [r0, r6, lsl #2]
   3a820:	cmp	r5, r7
   3a824:	addlt	r2, lr, r3, lsr #1
   3a828:	movge	r1, r6
   3a82c:	cmp	r2, r1
   3a830:	bcc	3a814 <__assert_fail@plt+0x27d64>
   3a834:	ldr	r0, [r0, r2, lsl #2]
   3a838:	mov	r3, #0
   3a83c:	mov	r5, r8
   3a840:	cmp	r0, r7
   3a844:	bne	3a898 <__assert_fail@plt+0x27de8>
   3a848:	b	3aa2c <__assert_fail@plt+0x27f7c>
   3a84c:	mov	r0, #4
   3a850:	bl	35350 <__assert_fail@plt+0x228a0>
   3a854:	cmp	r0, #0
   3a858:	beq	3b3b4 <__assert_fail@plt+0x28904>
   3a85c:	mov	ip, r0
   3a860:	str	sl, [r0]
   3a864:	mov	r0, #1
   3a868:	mov	r3, #1
   3a86c:	mov	lr, #1
   3a870:	str	r0, [sp, #72]	; 0x48
   3a874:	str	ip, [sp, #56]	; 0x38
   3a878:	add	r0, sl, sl, lsl #1
   3a87c:	add	r1, r8, r0, lsl #2
   3a880:	ldr	sl, [r1, #4]
   3a884:	cmp	sl, #1
   3a888:	ldrge	r2, [r7, #8]
   3a88c:	subsge	r2, r2, #1
   3a890:	bge	3a8bc <__assert_fail@plt+0x27e0c>
   3a894:	ldr	r5, [sp, #56]	; 0x38
   3a898:	ldr	r6, [sp, #68]	; 0x44
   3a89c:	cmp	r6, #0
   3a8a0:	beq	3b24c <__assert_fail@plt+0x2879c>
   3a8a4:	ldr	sl, [sp, #92]	; 0x5c
   3a8a8:	ldr	r4, [sp, #88]	; 0x58
   3a8ac:	ldr	r0, [r6]
   3a8b0:	cmp	r0, #0
   3a8b4:	bne	3acb8 <__assert_fail@plt+0x28208>
   3a8b8:	b	3b1b4 <__assert_fail@plt+0x28704>
   3a8bc:	str	r3, [sp, #48]	; 0x30
   3a8c0:	ldr	r1, [r1, #8]
   3a8c4:	ldr	r3, [r7, #12]
   3a8c8:	cmp	r2, #0
   3a8cc:	beq	3a96c <__assert_fail@plt+0x27ebc>
   3a8d0:	mov	r5, #0
   3a8d4:	mvn	lr, #0
   3a8d8:	str	ip, [sp, #52]	; 0x34
   3a8dc:	str	r2, [sp, #80]	; 0x50
   3a8e0:	b	3a8f4 <__assert_fail@plt+0x27e44>
   3a8e4:	ldr	r2, [sp, #80]	; 0x50
   3a8e8:	add	r5, r5, #1
   3a8ec:	cmp	r5, sl
   3a8f0:	beq	3a95c <__assert_fail@plt+0x27eac>
   3a8f4:	ldr	r4, [r1, r5, lsl #2]
   3a8f8:	mov	r7, #0
   3a8fc:	mov	ip, #1
   3a900:	add	r6, r7, r2
   3a904:	lsr	r0, r6, #1
   3a908:	ldr	r9, [r3, r0, lsl #2]
   3a90c:	cmp	r9, r4
   3a910:	addlt	r7, ip, r6, lsr #1
   3a914:	movge	r2, r0
   3a918:	cmp	r7, r2
   3a91c:	bcc	3a900 <__assert_fail@plt+0x27e50>
   3a920:	ldr	r0, [r3, r7, lsl #2]
   3a924:	cmp	r0, r4
   3a928:	bne	3a8e4 <__assert_fail@plt+0x27e34>
   3a92c:	cmn	lr, #1
   3a930:	mov	r7, lr
   3a934:	mov	lr, r4
   3a938:	beq	3a8e4 <__assert_fail@plt+0x27e34>
   3a93c:	b	3a9b0 <__assert_fail@plt+0x27f00>
   3a940:	str	r2, [sp, #100]	; 0x64
   3a944:	mov	r3, #0
   3a948:	cmn	r7, #1
   3a94c:	bgt	3aa34 <__assert_fail@plt+0x27f84>
   3a950:	cmn	r7, #2
   3a954:	bne	3a898 <__assert_fail@plt+0x27de8>
   3a958:	b	3b314 <__assert_fail@plt+0x28864>
   3a95c:	ldr	ip, [sp, #52]	; 0x34
   3a960:	mov	r7, lr
   3a964:	mov	lr, #1
   3a968:	b	3aa24 <__assert_fail@plt+0x27f74>
   3a96c:	ldr	r4, [r3]
   3a970:	mvn	r7, #0
   3a974:	ldr	r2, [r1]
   3a978:	cmp	r4, r2
   3a97c:	beq	3a9a0 <__assert_fail@plt+0x27ef0>
   3a980:	mov	r2, r7
   3a984:	add	r1, r1, #4
   3a988:	subs	sl, sl, #1
   3a98c:	mov	r7, r2
   3a990:	beq	3aa20 <__assert_fail@plt+0x27f70>
   3a994:	ldr	r2, [r1]
   3a998:	cmp	r4, r2
   3a99c:	bne	3a980 <__assert_fail@plt+0x27ed0>
   3a9a0:	cmn	r7, #1
   3a9a4:	mov	r2, r4
   3a9a8:	beq	3a984 <__assert_fail@plt+0x27ed4>
   3a9ac:	str	ip, [sp, #52]	; 0x34
   3a9b0:	ldr	r3, [sp, #48]	; 0x30
   3a9b4:	ldr	sl, [sp, #68]	; 0x44
   3a9b8:	ldr	ip, [sp, #52]	; 0x34
   3a9bc:	ldr	r8, [sp, #56]	; 0x38
   3a9c0:	mov	lr, #1
   3a9c4:	cmp	r3, #1
   3a9c8:	blt	3aa74 <__assert_fail@plt+0x27fc4>
   3a9cc:	mov	r0, #0
   3a9d0:	mov	r5, r8
   3a9d4:	subs	r1, r3, #1
   3a9d8:	beq	3a9fc <__assert_fail@plt+0x27f4c>
   3a9dc:	add	r2, r0, r1
   3a9e0:	lsr	r3, r2, #1
   3a9e4:	ldr	r6, [r5, r3, lsl #2]
   3a9e8:	cmp	r6, r7
   3a9ec:	addlt	r0, lr, r2, lsr #1
   3a9f0:	movge	r1, r3
   3a9f4:	cmp	r0, r1
   3a9f8:	bcc	3a9dc <__assert_fail@plt+0x27f2c>
   3a9fc:	ldr	r0, [r5, r0, lsl #2]
   3aa00:	ldr	r3, [sp, #48]	; 0x30
   3aa04:	cmp	r0, r7
   3aa08:	bne	3aa74 <__assert_fail@plt+0x27fc4>
   3aa0c:	mov	r7, r4
   3aa10:	mov	r5, r8
   3aa14:	cmn	r7, #1
   3aa18:	bgt	3aa34 <__assert_fail@plt+0x27f84>
   3aa1c:	b	3a950 <__assert_fail@plt+0x27ea0>
   3aa20:	mov	r7, r2
   3aa24:	ldr	r5, [sp, #56]	; 0x38
   3aa28:	ldr	r3, [sp, #48]	; 0x30
   3aa2c:	cmn	r7, #1
   3aa30:	ble	3a950 <__assert_fail@plt+0x27ea0>
   3aa34:	ldr	r8, [fp, #20]
   3aa38:	ldr	r6, [sp, #68]	; 0x44
   3aa3c:	ldr	r4, [sp, #100]	; 0x64
   3aa40:	mov	sl, r7
   3aa44:	b	3ad40 <__assert_fail@plt+0x28290>
   3aa48:	cmp	r7, #0
   3aa4c:	beq	3aac0 <__assert_fail@plt+0x28010>
   3aa50:	ldr	r0, [r4, #12]
   3aa54:	add	r8, r7, r8
   3aa58:	ldr	r5, [sp, #56]	; 0x38
   3aa5c:	mov	r3, #0
   3aa60:	str	r8, [sp, #100]	; 0x64
   3aa64:	ldr	r7, [r0, sl, lsl #2]
   3aa68:	cmn	r7, #1
   3aa6c:	bgt	3aa34 <__assert_fail@plt+0x27f84>
   3aa70:	b	3a950 <__assert_fail@plt+0x27ea0>
   3aa74:	cmp	sl, #0
   3aa78:	beq	3aae8 <__assert_fail@plt+0x28038>
   3aa7c:	ldr	r6, [sl]
   3aa80:	ldr	r0, [sl, #4]
   3aa84:	add	r1, r6, #1
   3aa88:	cmp	r1, r0
   3aa8c:	str	r1, [sl]
   3aa90:	bne	3aaf8 <__assert_fail@plt+0x28048>
   3aa94:	ldr	r0, [sl, #8]
   3aa98:	add	r1, r1, r1, lsl #1
   3aa9c:	lsl	r1, r1, #4
   3aaa0:	bl	36110 <__assert_fail@plt+0x23660>
   3aaa4:	cmp	r0, #0
   3aaa8:	beq	3b310 <__assert_fail@plt+0x28860>
   3aaac:	str	r0, [sl, #8]
   3aab0:	ldr	r1, [sl, #4]
   3aab4:	lsl	r1, r1, #1
   3aab8:	str	r1, [sl, #4]
   3aabc:	b	3aafc <__assert_fail@plt+0x2804c>
   3aac0:	ldr	r0, [sp, #72]	; 0x48
   3aac4:	str	r7, [sp, #80]	; 0x50
   3aac8:	cmp	r0, #0
   3aacc:	beq	3abcc <__assert_fail@plt+0x2811c>
   3aad0:	cmp	r3, #0
   3aad4:	bne	3ae9c <__assert_fail@plt+0x283ec>
   3aad8:	ldr	r5, [sp, #56]	; 0x38
   3aadc:	mov	r2, #1
   3aae0:	str	sl, [r5]
   3aae4:	b	3abf8 <__assert_fail@plt+0x28148>
   3aae8:	mov	r5, r8
   3aaec:	cmn	r7, #1
   3aaf0:	bgt	3aa34 <__assert_fail@plt+0x27f84>
   3aaf4:	b	3a950 <__assert_fail@plt+0x27ea0>
   3aaf8:	ldr	r0, [sl, #8]
   3aafc:	ldr	r1, [sp, #100]	; 0x64
   3ab00:	add	r6, r6, r6, lsl #1
   3ab04:	str	r1, [r0, r6, lsl #3]!
   3ab08:	str	r4, [r0, #4]
   3ab0c:	ldr	r0, [sp, #44]	; 0x2c
   3ab10:	bl	35350 <__assert_fail@plt+0x228a0>
   3ab14:	ldr	r1, [sl, #8]
   3ab18:	cmp	r0, #0
   3ab1c:	add	r4, r1, r6, lsl #3
   3ab20:	str	r0, [r4, #8]!
   3ab24:	beq	3b308 <__assert_fail@plt+0x28858>
   3ab28:	ldr	r9, [sp, #76]	; 0x4c
   3ab2c:	ldr	r1, [fp, #20]
   3ab30:	mov	r2, r9
   3ab34:	bl	124e0 <memcpy@plt>
   3ab38:	ldr	r0, [r4]
   3ab3c:	ldr	r1, [sp, #92]	; 0x5c
   3ab40:	mov	r2, r9
   3ab44:	add	r0, r0, r1, lsl #3
   3ab48:	ldr	r1, [sp, #84]	; 0x54
   3ab4c:	bl	124e0 <memcpy@plt>
   3ab50:	ldr	r0, [sl, #8]
   3ab54:	ldr	r3, [sp, #48]	; 0x30
   3ab58:	add	r5, r0, r6, lsl #3
   3ab5c:	cmp	r3, #1
   3ab60:	mov	r6, r5
   3ab64:	str	r3, [r6, #16]!
   3ab68:	sub	sl, r6, #4
   3ab6c:	blt	3aba4 <__assert_fail@plt+0x280f4>
   3ab70:	lsl	r4, r3, #2
   3ab74:	str	r3, [sl]
   3ab78:	mov	r0, r4
   3ab7c:	bl	35350 <__assert_fail@plt+0x228a0>
   3ab80:	cmp	r0, #0
   3ab84:	str	r0, [r5, #20]
   3ab88:	beq	3b3bc <__assert_fail@plt+0x2890c>
   3ab8c:	ldr	r5, [sp, #52]	; 0x34
   3ab90:	mov	r2, r4
   3ab94:	mov	r1, r5
   3ab98:	bl	124e0 <memcpy@plt>
   3ab9c:	mov	ip, r5
   3aba0:	b	3a964 <__assert_fail@plt+0x27eb4>
   3aba4:	ldr	ip, [sp, #52]	; 0x34
   3aba8:	ldr	r5, [sp, #56]	; 0x38
   3abac:	mov	r0, #0
   3abb0:	mov	lr, #1
   3abb4:	str	r0, [sl]
   3abb8:	str	r0, [sl, #4]
   3abbc:	str	r0, [sl, #8]
   3abc0:	cmn	r7, #1
   3abc4:	bgt	3aa34 <__assert_fail@plt+0x27f84>
   3abc8:	b	3a950 <__assert_fail@plt+0x27ea0>
   3abcc:	mov	r0, #4
   3abd0:	bl	35350 <__assert_fail@plt+0x228a0>
   3abd4:	cmp	r0, #0
   3abd8:	beq	3b3b4 <__assert_fail@plt+0x28904>
   3abdc:	mov	ip, r0
   3abe0:	str	sl, [r0]
   3abe4:	mov	r0, #1
   3abe8:	mov	r2, #1
   3abec:	mov	lr, #1
   3abf0:	str	r0, [sp, #72]	; 0x48
   3abf4:	mov	r5, ip
   3abf8:	ldr	r0, [sp, #204]	; 0xcc
   3abfc:	ldr	r0, [r0, r8, lsl #2]
   3ac00:	ldr	r1, [r0, #8]
   3ac04:	cmp	r1, #1
   3ac08:	blt	3a784 <__assert_fail@plt+0x27cd4>
   3ac0c:	mov	r9, r2
   3ac10:	ldr	r2, [r4, #20]
   3ac14:	add	r3, sl, sl, lsl #1
   3ac18:	mov	r8, ip
   3ac1c:	ldr	ip, [r0, #12]
   3ac20:	add	r2, r2, r3, lsl #2
   3ac24:	ldr	r2, [r2, #8]
   3ac28:	ldr	r7, [r2]
   3ac2c:	subs	r2, r1, #1
   3ac30:	mov	r1, #0
   3ac34:	beq	3ac58 <__assert_fail@plt+0x281a8>
   3ac38:	add	r3, r1, r2
   3ac3c:	lsr	r6, r3, #1
   3ac40:	ldr	r0, [ip, r6, lsl #2]
   3ac44:	cmp	r0, r7
   3ac48:	addlt	r1, lr, r3, lsr #1
   3ac4c:	movge	r2, r6
   3ac50:	cmp	r1, r2
   3ac54:	bcc	3ac38 <__assert_fail@plt+0x28188>
   3ac58:	ldr	r0, [ip, r1, lsl #2]
   3ac5c:	ldr	r1, [sp, #80]	; 0x50
   3ac60:	cmp	r0, r7
   3ac64:	bne	3a778 <__assert_fail@plt+0x27cc8>
   3ac68:	mov	ip, r8
   3ac6c:	mov	r3, r9
   3ac70:	cmn	r7, #1
   3ac74:	bgt	3aa34 <__assert_fail@plt+0x27f84>
   3ac78:	b	3a950 <__assert_fail@plt+0x27ea0>
   3ac7c:	ldr	r0, [r4, #12]
   3ac80:	add	r8, r7, r8
   3ac84:	ldr	ip, [sp, #52]	; 0x34
   3ac88:	ldr	r5, [sp, #56]	; 0x38
   3ac8c:	mov	lr, #1
   3ac90:	mov	r2, r8
   3ac94:	ldr	r7, [r0, sl, lsl #2]
   3ac98:	ldr	r0, [sp, #196]	; 0xc4
   3ac9c:	ldr	r4, [sp, #88]	; 0x58
   3aca0:	cmp	r2, r0
   3aca4:	ble	3a7dc <__assert_fail@plt+0x27d2c>
   3aca8:	ldr	sl, [sp, #92]	; 0x5c
   3acac:	ldr	r0, [r6]
   3acb0:	cmp	r0, #0
   3acb4:	beq	3b1b4 <__assert_fail@plt+0x28704>
   3acb8:	sub	r0, r0, #1
   3acbc:	ldr	r7, [sp, #76]	; 0x4c
   3acc0:	ldr	r8, [fp, #20]
   3acc4:	mov	r9, ip
   3acc8:	str	r0, [r6]
   3accc:	add	r5, r0, r0, lsl #1
   3acd0:	ldr	r4, [r6, #8]
   3acd4:	mov	r2, r7
   3acd8:	ldr	r0, [r4, r5, lsl #3]!
   3acdc:	ldr	r1, [r4, #8]
   3ace0:	str	r0, [sp, #100]	; 0x64
   3ace4:	mov	r0, r8
   3ace8:	bl	124e0 <memcpy@plt>
   3acec:	ldr	r0, [r4, #8]
   3acf0:	mov	r2, r7
   3acf4:	add	r1, r0, sl, lsl #3
   3acf8:	ldr	r0, [sp, #84]	; 0x54
   3acfc:	bl	124e0 <memcpy@plt>
   3ad00:	ldr	r4, [sp, #100]	; 0x64
   3ad04:	mov	r0, r9
   3ad08:	bl	32910 <__assert_fail@plt+0x1fe60>
   3ad0c:	ldr	r0, [r6, #8]
   3ad10:	add	r0, r0, r5, lsl #3
   3ad14:	ldr	r0, [r0, #8]
   3ad18:	bl	32910 <__assert_fail@plt+0x1fe60>
   3ad1c:	ldr	r0, [r6, #8]
   3ad20:	mov	lr, #1
   3ad24:	add	r0, r0, r5, lsl #3
   3ad28:	ldr	ip, [r0, #20]
   3ad2c:	ldr	r1, [r0, #12]
   3ad30:	ldr	sl, [r0, #4]
   3ad34:	ldr	r3, [r0, #16]
   3ad38:	mov	r5, ip
   3ad3c:	str	r1, [sp, #72]	; 0x48
   3ad40:	ldr	r0, [r8, #4]
   3ad44:	ldr	r9, [sp, #96]	; 0x60
   3ad48:	ldr	r7, [sp, #60]	; 0x3c
   3ad4c:	cmp	r4, r0
   3ad50:	ble	3a3d4 <__assert_fail@plt+0x27924>
   3ad54:	b	3a318 <__assert_fail@plt+0x27868>
   3ad58:	ldr	r0, [sp, #72]	; 0x48
   3ad5c:	str	r8, [sp, #52]	; 0x34
   3ad60:	mov	r4, ip
   3ad64:	mov	r8, r3
   3ad68:	str	r7, [sp, #80]	; 0x50
   3ad6c:	cmp	r0, r3
   3ad70:	bne	3ada4 <__assert_fail@plt+0x282f4>
   3ad74:	ldr	r0, [sp, #72]	; 0x48
   3ad78:	lsl	r1, r0, #3
   3ad7c:	mov	r0, r4
   3ad80:	bl	36110 <__assert_fail@plt+0x23660>
   3ad84:	ldr	r5, [sp, #56]	; 0x38
   3ad88:	cmp	r0, #0
   3ad8c:	beq	3b314 <__assert_fail@plt+0x28864>
   3ad90:	ldr	r1, [sp, #72]	; 0x48
   3ad94:	mov	r4, r0
   3ad98:	str	r0, [sp, #56]	; 0x38
   3ad9c:	lsl	r1, r1, #1
   3ada0:	str	r1, [sp, #72]	; 0x48
   3ada4:	ldr	r0, [sp, #56]	; 0x38
   3ada8:	ldr	r0, [r0]
   3adac:	cmp	r0, sl
   3adb0:	ble	3ae40 <__assert_fail@plt+0x28390>
   3adb4:	mov	ip, r8
   3adb8:	cmp	r8, #1
   3adbc:	blt	3ae78 <__assert_fail@plt+0x283c8>
   3adc0:	mov	r0, r8
   3adc4:	ands	r1, r8, #3
   3adc8:	sub	r2, r8, #1
   3adcc:	beq	3adfc <__assert_fail@plt+0x2834c>
   3add0:	ldr	r0, [sp, #56]	; 0x38
   3add4:	mov	r3, r8
   3add8:	add	r7, r0, r8, lsl #2
   3addc:	mov	r0, r8
   3ade0:	mov	r3, r7
   3ade4:	ldr	r6, [r3, #-4]!
   3ade8:	subs	r1, r1, #1
   3adec:	sub	r0, r0, #1
   3adf0:	str	r6, [r7]
   3adf4:	mov	r7, r3
   3adf8:	bne	3ade4 <__assert_fail@plt+0x28334>
   3adfc:	mov	ip, #0
   3ae00:	cmp	r2, #3
   3ae04:	bcc	3ae78 <__assert_fail@plt+0x283c8>
   3ae08:	ldr	r1, [sp, #56]	; 0x38
   3ae0c:	add	r2, r1, r0, lsl #2
   3ae10:	sub	r2, r2, #8
   3ae14:	ldr	r6, [r2]
   3ae18:	ldr	r1, [r2, #4]
   3ae1c:	ldmdb	r2, {r3, r7}
   3ae20:	sub	r0, r0, #4
   3ae24:	cmp	r0, #0
   3ae28:	stmda	r2, {r3, r7}
   3ae2c:	str	r6, [r2, #4]
   3ae30:	str	r1, [r2, #8]
   3ae34:	sub	r2, r2, #16
   3ae38:	bgt	3ae14 <__assert_fail@plt+0x28364>
   3ae3c:	b	3ae78 <__assert_fail@plt+0x283c8>
   3ae40:	ldr	r0, [sp, #56]	; 0x38
   3ae44:	mov	ip, r8
   3ae48:	add	r0, r0, r8, lsl #2
   3ae4c:	ldr	r2, [r0, #-4]
   3ae50:	cmp	r2, sl
   3ae54:	ble	3ae78 <__assert_fail@plt+0x283c8>
   3ae58:	sub	r1, r8, #2
   3ae5c:	str	r2, [r0]
   3ae60:	sub	r1, r1, #1
   3ae64:	ldr	r2, [r0, #-8]
   3ae68:	sub	r0, r0, #4
   3ae6c:	cmp	r2, sl
   3ae70:	bgt	3ae5c <__assert_fail@plt+0x283ac>
   3ae74:	add	ip, r1, #2
   3ae78:	ldr	r0, [sp, #56]	; 0x38
   3ae7c:	mov	r3, r8
   3ae80:	add	r3, r8, #1
   3ae84:	ldr	r7, [sp, #80]	; 0x50
   3ae88:	ldr	r8, [sp, #52]	; 0x34
   3ae8c:	mov	lr, #1
   3ae90:	str	sl, [r0, ip, lsl #2]
   3ae94:	mov	ip, r4
   3ae98:	b	3a878 <__assert_fail@plt+0x27dc8>
   3ae9c:	ldr	r0, [sp, #72]	; 0x48
   3aea0:	ldr	r5, [sp, #56]	; 0x38
   3aea4:	mov	r8, ip
   3aea8:	mov	r9, r3
   3aeac:	cmp	r0, r3
   3aeb0:	bne	3aee0 <__assert_fail@plt+0x28430>
   3aeb4:	ldr	r0, [sp, #72]	; 0x48
   3aeb8:	lsl	r1, r0, #3
   3aebc:	mov	r0, r8
   3aec0:	bl	36110 <__assert_fail@plt+0x23660>
   3aec4:	cmp	r0, #0
   3aec8:	beq	3b314 <__assert_fail@plt+0x28864>
   3aecc:	ldr	r1, [sp, #72]	; 0x48
   3aed0:	mov	r8, r0
   3aed4:	mov	r5, r0
   3aed8:	lsl	r1, r1, #1
   3aedc:	str	r1, [sp, #72]	; 0x48
   3aee0:	ldr	r0, [r5]
   3aee4:	mov	ip, r9
   3aee8:	cmp	r0, sl
   3aeec:	ble	3af6c <__assert_fail@plt+0x284bc>
   3aef0:	cmp	r9, #1
   3aef4:	blt	3af9c <__assert_fail@plt+0x284ec>
   3aef8:	mov	r0, r9
   3aefc:	ands	r1, r9, #3
   3af00:	sub	r2, r9, #1
   3af04:	beq	3af2c <__assert_fail@plt+0x2847c>
   3af08:	add	r7, r5, r9, lsl #2
   3af0c:	mov	r0, r9
   3af10:	mov	r3, r7
   3af14:	ldr	r6, [r3, #-4]!
   3af18:	subs	r1, r1, #1
   3af1c:	sub	r0, r0, #1
   3af20:	str	r6, [r7]
   3af24:	mov	r7, r3
   3af28:	bne	3af14 <__assert_fail@plt+0x28464>
   3af2c:	mov	ip, #0
   3af30:	cmp	r2, #3
   3af34:	bcc	3af9c <__assert_fail@plt+0x284ec>
   3af38:	add	r2, r5, r0, lsl #2
   3af3c:	sub	r2, r2, #8
   3af40:	ldr	r6, [r2]
   3af44:	ldr	r1, [r2, #4]
   3af48:	ldmdb	r2, {r3, r7}
   3af4c:	sub	r0, r0, #4
   3af50:	cmp	r0, #0
   3af54:	stmda	r2, {r3, r7}
   3af58:	str	r6, [r2, #4]
   3af5c:	str	r1, [r2, #8]
   3af60:	sub	r2, r2, #16
   3af64:	bgt	3af40 <__assert_fail@plt+0x28490>
   3af68:	b	3af9c <__assert_fail@plt+0x284ec>
   3af6c:	add	r0, r5, r9, lsl #2
   3af70:	ldr	r2, [r0, #-4]
   3af74:	cmp	r2, sl
   3af78:	ble	3af9c <__assert_fail@plt+0x284ec>
   3af7c:	sub	r1, r9, #2
   3af80:	str	r2, [r0]
   3af84:	sub	r1, r1, #1
   3af88:	ldr	r2, [r0, #-8]
   3af8c:	sub	r0, r0, #4
   3af90:	cmp	r2, sl
   3af94:	bgt	3af80 <__assert_fail@plt+0x284d0>
   3af98:	add	ip, r1, #2
   3af9c:	str	sl, [r5, ip, lsl #2]
   3afa0:	mov	ip, r8
   3afa4:	ldr	r8, [sp, #100]	; 0x64
   3afa8:	mov	r2, r9
   3afac:	add	r2, r9, #1
   3afb0:	mov	lr, #1
   3afb4:	b	3abf8 <__assert_fail@plt+0x28148>
   3afb8:	mov	r0, ip
   3afbc:	bl	32910 <__assert_fail@plt+0x1fe60>
   3afc0:	ldr	r0, [fp, #-184]	; 0xffffff48
   3afc4:	cmp	r0, r4
   3afc8:	beq	3afd0 <__assert_fail@plt+0x28520>
   3afcc:	bl	32910 <__assert_fail@plt+0x1fe60>
   3afd0:	mov	r0, #16
   3afd4:	str	r4, [fp, #-184]	; 0xffffff48
   3afd8:	cmp	r6, #0
   3afdc:	str	r0, [fp, #-188]	; 0xffffff44
   3afe0:	mov	r0, #0
   3afe4:	str	r0, [fp, #-192]	; 0xffffff40
   3afe8:	beq	3b040 <__assert_fail@plt+0x28590>
   3afec:	ldr	r1, [r6]
   3aff0:	ldr	r0, [r6, #8]
   3aff4:	cmp	r1, #1
   3aff8:	blt	3b038 <__assert_fail@plt+0x28588>
   3affc:	mov	r4, #0
   3b000:	mov	r5, #0
   3b004:	add	r0, r0, r4
   3b008:	ldr	r0, [r0, #20]
   3b00c:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b010:	ldr	r0, [r6, #8]
   3b014:	add	r0, r0, r4
   3b018:	ldr	r0, [r0, #8]
   3b01c:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b020:	ldr	r1, [r6]
   3b024:	ldr	r0, [r6, #8]
   3b028:	add	r5, r5, #1
   3b02c:	add	r4, r4, #24
   3b030:	cmp	r5, r1
   3b034:	blt	3b004 <__assert_fail@plt+0x28554>
   3b038:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b03c:	ldr	r8, [fp, #20]
   3b040:	ldrb	r0, [sp, #180]	; 0xb4
   3b044:	cmp	r0, #0
   3b048:	bne	3b284 <__assert_fail@plt+0x287d4>
   3b04c:	ldr	r1, [fp, #-200]	; 0xffffff38
   3b050:	ldr	r2, [sp, #92]	; 0x5c
   3b054:	ldr	r5, [sp, #32]
   3b058:	add	r0, r8, #4
   3b05c:	ldr	r3, [r0, #-4]
   3b060:	cmn	r3, #1
   3b064:	bne	3b080 <__assert_fail@plt+0x285d0>
   3b068:	add	r0, r0, #8
   3b06c:	subs	r2, r2, #1
   3b070:	beq	3b0a0 <__assert_fail@plt+0x285f0>
   3b074:	ldr	r3, [r0, #-4]
   3b078:	cmn	r3, #1
   3b07c:	beq	3b068 <__assert_fail@plt+0x285b8>
   3b080:	add	r3, r3, r1
   3b084:	str	r3, [r0, #-4]
   3b088:	ldr	r3, [r0]
   3b08c:	add	r3, r3, r1
   3b090:	str	r3, [r0]
   3b094:	add	r0, r0, #8
   3b098:	subs	r2, r2, #1
   3b09c:	bne	3b074 <__assert_fail@plt+0x285c4>
   3b0a0:	cmp	r5, #1
   3b0a4:	blt	3b0bc <__assert_fail@plt+0x2860c>
   3b0a8:	ldr	r0, [sp, #92]	; 0x5c
   3b0ac:	lsl	r2, r5, #3
   3b0b0:	mov	r1, #255	; 0xff
   3b0b4:	add	r0, r8, r0, lsl #3
   3b0b8:	bl	12834 <memset@plt>
   3b0bc:	ldr	r0, [r9, #132]	; 0x84
   3b0c0:	mov	r8, #0
   3b0c4:	cmp	r0, #0
   3b0c8:	beq	3b144 <__assert_fail@plt+0x28694>
   3b0cc:	ldr	r1, [sp, #92]	; 0x5c
   3b0d0:	cmp	r1, #2
   3b0d4:	bcc	3b144 <__assert_fail@plt+0x28694>
   3b0d8:	ldr	r1, [sp, #32]
   3b0dc:	ldr	r2, [fp, #16]
   3b0e0:	ldr	r6, [fp, #20]
   3b0e4:	mvn	r1, r1
   3b0e8:	add	r1, r1, r2
   3b0ec:	mov	r2, #0
   3b0f0:	ldr	r3, [r0, r2, lsl #2]
   3b0f4:	cmp	r2, r3
   3b0f8:	bne	3b114 <__assert_fail@plt+0x28664>
   3b0fc:	add	r2, r2, #1
   3b100:	cmp	r1, r2
   3b104:	beq	3b140 <__assert_fail@plt+0x28690>
   3b108:	ldr	r3, [r0, r2, lsl #2]
   3b10c:	cmp	r2, r3
   3b110:	beq	3b0fc <__assert_fail@plt+0x2864c>
   3b114:	add	r3, r6, r3, lsl #3
   3b118:	add	r7, r6, r2, lsl #3
   3b11c:	ldr	r3, [r3, #8]
   3b120:	str	r3, [r7, #8]
   3b124:	ldr	r3, [r0, r2, lsl #2]
   3b128:	add	r3, r6, r3, lsl #3
   3b12c:	ldr	r3, [r3, #12]
   3b130:	str	r3, [r7, #12]
   3b134:	add	r2, r2, #1
   3b138:	cmp	r1, r2
   3b13c:	bne	3b108 <__assert_fail@plt+0x28658>
   3b140:	mov	r8, #0
   3b144:	ldr	r0, [sp, #204]	; 0xcc
   3b148:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b14c:	ldr	r0, [sp, #96]	; 0x60
   3b150:	ldr	r0, [r0, #76]	; 0x4c
   3b154:	cmp	r0, #0
   3b158:	beq	3b174 <__assert_fail@plt+0x286c4>
   3b15c:	add	r0, sp, #104	; 0x68
   3b160:	bl	43974 <__assert_fail@plt+0x30ec4>
   3b164:	ldr	r0, [sp, #236]	; 0xec
   3b168:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b16c:	ldr	r0, [sp, #220]	; 0xdc
   3b170:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b174:	ldr	r0, [sp, #112]	; 0x70
   3b178:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b17c:	ldr	r0, [sp, #116]	; 0x74
   3b180:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b184:	ldrb	r0, [sp, #179]	; 0xb3
   3b188:	cmp	r0, #0
   3b18c:	beq	3b198 <__assert_fail@plt+0x286e8>
   3b190:	ldr	r0, [sp, #108]	; 0x6c
   3b194:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b198:	mov	r0, r8
   3b19c:	sub	sp, fp, #28
   3b1a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b1a4:	mov	r6, #0
   3b1a8:	b	38c00 <__assert_fail@plt+0x26150>
   3b1ac:	mov	r8, #12
   3b1b0:	b	3b144 <__assert_fail@plt+0x28694>
   3b1b4:	mov	r0, r5
   3b1b8:	mov	r5, #0
   3b1bc:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b1c0:	ldr	r0, [fp, #-184]	; 0xffffff48
   3b1c4:	cmp	r0, r4
   3b1c8:	beq	3b1d0 <__assert_fail@plt+0x28720>
   3b1cc:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b1d0:	mov	r0, #16
   3b1d4:	str	r4, [fp, #-184]	; 0xffffff48
   3b1d8:	mov	r8, #1
   3b1dc:	cmp	r5, #0
   3b1e0:	str	r0, [fp, #-188]	; 0xffffff44
   3b1e4:	mov	r0, #0
   3b1e8:	str	r0, [fp, #-192]	; 0xffffff40
   3b1ec:	bne	3b144 <__assert_fail@plt+0x28694>
   3b1f0:	ldr	r1, [r6]
   3b1f4:	ldr	r0, [r6, #8]
   3b1f8:	cmp	r1, #1
   3b1fc:	blt	3b23c <__assert_fail@plt+0x2878c>
   3b200:	mov	r5, #0
   3b204:	mov	r4, #0
   3b208:	add	r0, r0, r5
   3b20c:	ldr	r0, [r0, #20]
   3b210:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b214:	ldr	r0, [r6, #8]
   3b218:	add	r0, r0, r5
   3b21c:	ldr	r0, [r0, #8]
   3b220:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b224:	ldr	r1, [r6]
   3b228:	ldr	r0, [r6, #8]
   3b22c:	add	r4, r4, #1
   3b230:	add	r5, r5, #24
   3b234:	cmp	r4, r1
   3b238:	blt	3b208 <__assert_fail@plt+0x28758>
   3b23c:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b240:	b	3b144 <__assert_fail@plt+0x28694>
   3b244:	mov	r8, r0
   3b248:	b	3b144 <__assert_fail@plt+0x28694>
   3b24c:	ldr	r4, [sp, #88]	; 0x58
   3b250:	mov	r0, r5
   3b254:	mov	r5, #1
   3b258:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b25c:	ldr	r0, [fp, #-184]	; 0xffffff48
   3b260:	cmp	r0, r4
   3b264:	bne	3b1cc <__assert_fail@plt+0x2871c>
   3b268:	b	3b1d0 <__assert_fail@plt+0x28720>
   3b26c:	mov	r0, r6
   3b270:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b274:	mov	r0, #0
   3b278:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b27c:	mov	r8, #12
   3b280:	b	3b144 <__assert_fail@plt+0x28694>
   3b284:	ldr	r1, [sp, #92]	; 0x5c
   3b288:	ldr	r5, [sp, #32]
   3b28c:	add	r0, r8, #4
   3b290:	ldr	r2, [r0, #-4]
   3b294:	cmn	r2, #1
   3b298:	bne	3b2b4 <__assert_fail@plt+0x28804>
   3b29c:	add	r0, r0, #8
   3b2a0:	subs	r1, r1, #1
   3b2a4:	beq	3b0a0 <__assert_fail@plt+0x285f0>
   3b2a8:	ldr	r2, [r0, #-4]
   3b2ac:	cmn	r2, #1
   3b2b0:	beq	3b29c <__assert_fail@plt+0x287ec>
   3b2b4:	ldr	r3, [sp, #132]	; 0x84
   3b2b8:	ldr	r7, [sp, #24]
   3b2bc:	ldr	ip, [sp, #116]	; 0x74
   3b2c0:	cmp	r2, r3
   3b2c4:	mov	r6, r7
   3b2c8:	addne	r6, ip, r2, lsl #2
   3b2cc:	ldr	r2, [r6]
   3b2d0:	str	r2, [r0, #-4]
   3b2d4:	ldr	r6, [r0]
   3b2d8:	cmp	r6, r3
   3b2dc:	addne	r7, ip, r6, lsl #2
   3b2e0:	ldr	r3, [r7]
   3b2e4:	ldr	r7, [fp, #-200]	; 0xffffff38
   3b2e8:	add	r3, r3, r7
   3b2ec:	add	r2, r2, r7
   3b2f0:	str	r3, [r0]
   3b2f4:	str	r2, [r0, #-4]
   3b2f8:	add	r0, r0, #8
   3b2fc:	subs	r1, r1, #1
   3b300:	bne	3b2a8 <__assert_fail@plt+0x287f8>
   3b304:	b	3b0a0 <__assert_fail@plt+0x285f0>
   3b308:	ldr	r5, [sp, #56]	; 0x38
   3b30c:	b	3b314 <__assert_fail@plt+0x28864>
   3b310:	mov	r5, r8
   3b314:	mov	r0, r5
   3b318:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b31c:	ldr	r0, [fp, #-184]	; 0xffffff48
   3b320:	ldr	r4, [sp, #88]	; 0x58
   3b324:	cmp	r0, r4
   3b328:	beq	3b330 <__assert_fail@plt+0x28880>
   3b32c:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b330:	mov	r0, #16
   3b334:	str	r4, [fp, #-184]	; 0xffffff48
   3b338:	mov	r8, #12
   3b33c:	str	r0, [fp, #-188]	; 0xffffff44
   3b340:	mov	r0, #0
   3b344:	str	r0, [fp, #-192]	; 0xffffff40
   3b348:	ldr	r0, [sp, #68]	; 0x44
   3b34c:	cmp	r0, #0
   3b350:	beq	3b144 <__assert_fail@plt+0x28694>
   3b354:	ldr	r0, [sp, #68]	; 0x44
   3b358:	ldr	r1, [r0]
   3b35c:	mov	r4, r0
   3b360:	ldr	r0, [r0, #8]
   3b364:	cmp	r1, #1
   3b368:	blt	3b23c <__assert_fail@plt+0x2878c>
   3b36c:	mov	r5, #0
   3b370:	mov	r6, #0
   3b374:	add	r0, r0, r5
   3b378:	ldr	r0, [r0, #20]
   3b37c:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b380:	ldr	r0, [r4, #8]
   3b384:	add	r0, r0, r5
   3b388:	ldr	r0, [r0, #8]
   3b38c:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b390:	ldr	r1, [r4]
   3b394:	ldr	r0, [r4, #8]
   3b398:	add	r6, r6, #1
   3b39c:	add	r5, r5, #24
   3b3a0:	cmp	r6, r1
   3b3a4:	blt	3b374 <__assert_fail@plt+0x288c4>
   3b3a8:	b	3b23c <__assert_fail@plt+0x2878c>
   3b3ac:	mov	r8, #1
   3b3b0:	b	3b144 <__assert_fail@plt+0x28694>
   3b3b4:	mov	r5, #0
   3b3b8:	b	3b314 <__assert_fail@plt+0x28864>
   3b3bc:	ldr	r5, [sp, #56]	; 0x38
   3b3c0:	mov	r0, #0
   3b3c4:	str	r0, [r6]
   3b3c8:	str	r0, [sl]
   3b3cc:	b	3b314 <__assert_fail@plt+0x28864>
   3b3d0:	push	{fp, lr}
   3b3d4:	mov	fp, sp
   3b3d8:	sub	sp, sp, #16
   3b3dc:	mov	ip, #1
   3b3e0:	str	r2, [sp, #4]
   3b3e4:	str	ip, [sp, #12]
   3b3e8:	mov	ip, #0
   3b3ec:	str	ip, [sp]
   3b3f0:	ldr	ip, [fp, #8]
   3b3f4:	str	ip, [sp, #8]
   3b3f8:	bl	3b404 <__assert_fail@plt+0x28954>
   3b3fc:	mov	sp, fp
   3b400:	pop	{fp, pc}
   3b404:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b408:	add	fp, sp, #28
   3b40c:	sub	sp, sp, #60	; 0x3c
   3b410:	mvn	r4, #0
   3b414:	cmp	r3, #0
   3b418:	bmi	3b63c <__assert_fail@plt+0x28b8c>
   3b41c:	mov	r6, r3
   3b420:	mov	r7, r2
   3b424:	cmp	r3, r2
   3b428:	bgt	3b63c <__assert_fail@plt+0x28b8c>
   3b42c:	mov	r5, r0
   3b430:	ldr	r0, [fp, #8]
   3b434:	str	r1, [sp, #44]	; 0x2c
   3b438:	movw	r1, #10328	; 0x2858
   3b43c:	mov	r8, r7
   3b440:	ldr	r4, [r5]
   3b444:	movt	r1, #1
   3b448:	add	r0, r0, r6
   3b44c:	cmp	r0, r7
   3b450:	bicle	r8, r0, r0, asr #31
   3b454:	movw	r0, #9392	; 0x24b0
   3b458:	movt	r0, #1
   3b45c:	orrs	r9, r1, r0
   3b460:	beq	3b46c <__assert_fail@plt+0x289bc>
   3b464:	add	r0, r4, #136	; 0x88
   3b468:	bl	1248c <pthread_mutex_lock@plt>
   3b46c:	ldrb	r0, [r5, #28]
   3b470:	ldr	r2, [fp, #16]
   3b474:	cmp	r8, r6
   3b478:	ubfx	r1, r0, #5, #2
   3b47c:	str	r4, [sp, #36]	; 0x24
   3b480:	str	r6, [fp, #-36]	; 0xffffffdc
   3b484:	str	r1, [sp, #40]	; 0x28
   3b488:	ble	3b528 <__assert_fail@plt+0x28a78>
   3b48c:	tst	r0, #8
   3b490:	bne	3b528 <__assert_fail@plt+0x28a78>
   3b494:	ldr	r6, [r5, #16]
   3b498:	cmp	r6, #0
   3b49c:	beq	3b528 <__assert_fail@plt+0x28a78>
   3b4a0:	ldr	r4, [r5]
   3b4a4:	mov	sl, r2
   3b4a8:	mov	r0, r6
   3b4ac:	mov	r1, #0
   3b4b0:	mov	r2, #256	; 0x100
   3b4b4:	bl	12834 <memset@plt>
   3b4b8:	ldr	r1, [r4, #36]	; 0x24
   3b4bc:	mov	r0, r5
   3b4c0:	mov	r2, r6
   3b4c4:	bl	37af4 <__assert_fail@plt+0x25044>
   3b4c8:	ldr	r0, [r4, #36]	; 0x24
   3b4cc:	ldr	r1, [r4, #40]	; 0x28
   3b4d0:	cmp	r0, r1
   3b4d4:	beq	3b4e8 <__assert_fail@plt+0x28a38>
   3b4d8:	mov	r0, r5
   3b4dc:	mov	r2, r6
   3b4e0:	bl	37af4 <__assert_fail@plt+0x25044>
   3b4e4:	ldr	r0, [r4, #36]	; 0x24
   3b4e8:	ldr	r1, [r4, #44]	; 0x2c
   3b4ec:	cmp	r0, r1
   3b4f0:	beq	3b504 <__assert_fail@plt+0x28a54>
   3b4f4:	mov	r0, r5
   3b4f8:	mov	r2, r6
   3b4fc:	bl	37af4 <__assert_fail@plt+0x25044>
   3b500:	ldr	r0, [r4, #36]	; 0x24
   3b504:	ldr	r1, [r4, #48]	; 0x30
   3b508:	cmp	r0, r1
   3b50c:	movne	r0, r5
   3b510:	movne	r2, r6
   3b514:	blne	37af4 <__assert_fail@plt+0x25044>
   3b518:	ldrb	r0, [r5, #28]
   3b51c:	mov	r2, sl
   3b520:	orr	r0, r0, #8
   3b524:	strb	r0, [r5, #28]
   3b528:	str	r9, [fp, #-40]	; 0xffffffd8
   3b52c:	mov	sl, #1
   3b530:	mov	r9, #0
   3b534:	cmp	r2, #0
   3b538:	str	r5, [fp, #-32]	; 0xffffffe0
   3b53c:	beq	3b590 <__assert_fail@plt+0x28ae0>
   3b540:	ldr	r4, [fp, #-36]	; 0xffffffdc
   3b544:	ands	r1, r0, #16
   3b548:	bne	3b5c8 <__assert_fail@plt+0x28b18>
   3b54c:	and	r0, r0, #6
   3b550:	cmp	r0, #4
   3b554:	bne	3b5b8 <__assert_fail@plt+0x28b08>
   3b558:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3b55c:	ldr	sl, [r2]
   3b560:	ldr	r0, [r0, #24]
   3b564:	cmp	sl, r0
   3b568:	bhi	3b5c0 <__assert_fail@plt+0x28b10>
   3b56c:	cmp	sl, #1
   3b570:	bge	3b5c4 <__assert_fail@plt+0x28b14>
   3b574:	mov	sl, #1
   3b578:	mov	r9, #0
   3b57c:	lsl	r0, sl, #3
   3b580:	bl	35350 <__assert_fail@plt+0x228a0>
   3b584:	cmp	r0, #0
   3b588:	bne	3b5d8 <__assert_fail@plt+0x28b28>
   3b58c:	b	3b5a4 <__assert_fail@plt+0x28af4>
   3b590:	ldr	r4, [fp, #-36]	; 0xffffffdc
   3b594:	lsl	r0, sl, #3
   3b598:	bl	35350 <__assert_fail@plt+0x228a0>
   3b59c:	cmp	r0, #0
   3b5a0:	bne	3b5d8 <__assert_fail@plt+0x28b28>
   3b5a4:	ldr	r5, [fp, #-40]	; 0xffffffd8
   3b5a8:	mvn	r4, #1
   3b5ac:	cmp	r5, #0
   3b5b0:	bne	3b630 <__assert_fail@plt+0x28b80>
   3b5b4:	b	3b63c <__assert_fail@plt+0x28b8c>
   3b5b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3b5bc:	ldr	r0, [r0, #24]
   3b5c0:	add	sl, r0, #1
   3b5c4:	mov	r9, r2
   3b5c8:	lsl	r0, sl, #3
   3b5cc:	bl	35350 <__assert_fail@plt+0x228a0>
   3b5d0:	cmp	r0, #0
   3b5d4:	beq	3b5a4 <__assert_fail@plt+0x28af4>
   3b5d8:	mov	r6, r0
   3b5dc:	ldr	r0, [fp, #12]
   3b5e0:	str	r8, [sp]
   3b5e4:	ldr	r1, [sp, #44]	; 0x2c
   3b5e8:	mov	r2, r7
   3b5ec:	mov	r3, r4
   3b5f0:	stmib	sp, {r0, sl}
   3b5f4:	ldr	r0, [sp, #40]	; 0x28
   3b5f8:	str	r6, [sp, #12]
   3b5fc:	str	r0, [sp, #16]
   3b600:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3b604:	bl	38b20 <__assert_fail@plt+0x26070>
   3b608:	cmp	r0, #0
   3b60c:	beq	3b648 <__assert_fail@plt+0x28b98>
   3b610:	cmp	r0, #1
   3b614:	mvn	r4, #1
   3b618:	mvneq	r4, #0
   3b61c:	ldr	r5, [fp, #-40]	; 0xffffffd8
   3b620:	mov	r0, r6
   3b624:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b628:	cmp	r5, #0
   3b62c:	beq	3b63c <__assert_fail@plt+0x28b8c>
   3b630:	ldr	r0, [sp, #36]	; 0x24
   3b634:	add	r0, r0, #136	; 0x88
   3b638:	bl	12360 <pthread_mutex_unlock@plt>
   3b63c:	mov	r0, r4
   3b640:	sub	sp, fp, #28
   3b644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b648:	cmp	r9, #0
   3b64c:	beq	3b930 <__assert_fail@plt+0x28e80>
   3b650:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3b654:	add	r8, sl, #1
   3b658:	ldrb	r0, [r0, #28]
   3b65c:	ubfx	r0, r0, #1, #2
   3b660:	cmp	r0, #1
   3b664:	beq	3b6b4 <__assert_fail@plt+0x28c04>
   3b668:	cmp	r0, #0
   3b66c:	bne	3b6e0 <__assert_fail@plt+0x28c30>
   3b670:	lsl	r5, r8, #2
   3b674:	mov	r0, r5
   3b678:	bl	35350 <__assert_fail@plt+0x228a0>
   3b67c:	mov	r7, #0
   3b680:	cmp	r0, #0
   3b684:	str	r0, [r9, #4]
   3b688:	beq	3b914 <__assert_fail@plt+0x28e64>
   3b68c:	mov	r0, r5
   3b690:	bl	35350 <__assert_fail@plt+0x228a0>
   3b694:	cmp	r0, #0
   3b698:	str	r0, [r9, #8]
   3b69c:	beq	3b9b0 <__assert_fail@plt+0x28f00>
   3b6a0:	str	r8, [r9]
   3b6a4:	mov	lr, #1
   3b6a8:	cmp	sl, #1
   3b6ac:	bge	3b6f0 <__assert_fail@plt+0x28c40>
   3b6b0:	b	3b6d0 <__assert_fail@plt+0x28c20>
   3b6b4:	ldr	r0, [r9]
   3b6b8:	mov	lr, #1
   3b6bc:	cmp	r8, r0
   3b6c0:	bhi	3b958 <__assert_fail@plt+0x28ea8>
   3b6c4:	mov	r8, r0
   3b6c8:	cmp	sl, #1
   3b6cc:	bge	3b6f0 <__assert_fail@plt+0x28c40>
   3b6d0:	mov	sl, #0
   3b6d4:	cmp	sl, r8
   3b6d8:	bcc	3b8f0 <__assert_fail@plt+0x28e40>
   3b6dc:	b	3b910 <__assert_fail@plt+0x28e60>
   3b6e0:	ldr	r8, [r9]
   3b6e4:	mov	lr, #2
   3b6e8:	cmp	sl, #1
   3b6ec:	blt	3b6d0 <__assert_fail@plt+0x28c20>
   3b6f0:	ldr	r5, [r9, #4]
   3b6f4:	ldr	r4, [r9, #8]
   3b6f8:	mov	r2, #0
   3b6fc:	cmp	sl, #3
   3b700:	str	r6, [sp, #44]	; 0x2c
   3b704:	bhi	3b798 <__assert_fail@plt+0x28ce8>
   3b708:	tst	sl, #1
   3b70c:	mov	r3, r2
   3b710:	beq	3b72c <__assert_fail@plt+0x28c7c>
   3b714:	ldr	r0, [sp, #44]	; 0x2c
   3b718:	orr	r3, r2, #1
   3b71c:	ldr	r1, [r0, r2, lsl #3]!
   3b720:	str	r1, [r5, r2, lsl #2]
   3b724:	ldr	r0, [r0, #4]
   3b728:	str	r0, [r4, r2, lsl #2]
   3b72c:	orr	r0, r2, #1
   3b730:	cmp	sl, r0
   3b734:	beq	3b8dc <__assert_fail@plt+0x28e2c>
   3b738:	ldr	r7, [sp, #44]	; 0x2c
   3b73c:	add	r2, r3, #1
   3b740:	sub	r0, sl, r3
   3b744:	mov	r6, #0
   3b748:	add	r1, r5, r2, lsl #2
   3b74c:	add	r2, r4, r2, lsl #2
   3b750:	add	ip, r7, r3, lsl #3
   3b754:	add	r7, ip, #12
   3b758:	ldr	r4, [r7, #-12]
   3b75c:	add	r5, r1, r6
   3b760:	subs	r0, r0, #2
   3b764:	str	r4, [r5, #-4]
   3b768:	add	r4, ip, r6, lsl #1
   3b76c:	add	r5, r2, r6
   3b770:	ldr	r3, [r4, #4]
   3b774:	str	r3, [r5, #-4]
   3b778:	ldr	r3, [r4, #8]
   3b77c:	str	r3, [r1, r6]
   3b780:	ldr	r3, [r7]
   3b784:	add	r7, r7, #16
   3b788:	str	r3, [r2, r6]
   3b78c:	add	r6, r6, #8
   3b790:	bne	3b758 <__assert_fail@plt+0x28ca8>
   3b794:	b	3b8dc <__assert_fail@plt+0x28e2c>
   3b798:	ldr	r0, [sp, #44]	; 0x2c
   3b79c:	str	lr, [sp, #40]	; 0x28
   3b7a0:	add	lr, r4, sl, lsl #2
   3b7a4:	add	r6, r5, sl, lsl #2
   3b7a8:	mov	r8, #0
   3b7ac:	mov	r1, #0
   3b7b0:	mov	r3, #0
   3b7b4:	mov	r2, #0
   3b7b8:	add	r7, r0, sl, lsl #3
   3b7bc:	cmp	r0, lr
   3b7c0:	movwcc	r8, #1
   3b7c4:	cmp	r7, r4
   3b7c8:	movwhi	r1, #1
   3b7cc:	cmp	r0, r6
   3b7d0:	mov	r0, #0
   3b7d4:	movwcc	r3, #1
   3b7d8:	cmp	r7, r5
   3b7dc:	mov	r7, #0
   3b7e0:	movwhi	r7, #1
   3b7e4:	cmp	r4, r6
   3b7e8:	mov	r6, #0
   3b7ec:	movwcc	r6, #1
   3b7f0:	cmp	r5, lr
   3b7f4:	movwcc	r0, #1
   3b7f8:	tst	r0, r6
   3b7fc:	bne	3b888 <__assert_fail@plt+0x28dd8>
   3b800:	ands	r0, r7, r3
   3b804:	bne	3b888 <__assert_fail@plt+0x28dd8>
   3b808:	ldr	lr, [sp, #40]	; 0x28
   3b80c:	ands	r0, r1, r8
   3b810:	bne	3b708 <__assert_fail@plt+0x28c58>
   3b814:	bic	r0, sl, #3
   3b818:	mov	r1, #1
   3b81c:	str	r4, [sp, #32]
   3b820:	str	r0, [sp, #28]
   3b824:	subs	r0, r0, #4
   3b828:	add	r0, r1, r0, lsr #2
   3b82c:	and	r1, r0, #1
   3b830:	str	r1, [sp, #24]
   3b834:	beq	3b89c <__assert_fail@plt+0x28dec>
   3b838:	ldr	r6, [sp, #44]	; 0x2c
   3b83c:	sub	r7, r0, r1
   3b840:	mov	r8, r4
   3b844:	mov	r3, #0
   3b848:	mov	r1, #32
   3b84c:	mov	r4, #64	; 0x40
   3b850:	mov	lr, r5
   3b854:	add	ip, r6, #32
   3b858:	vld2.32	{d16-d19}, [r6], r4
   3b85c:	add	r2, lr, #16
   3b860:	add	r0, r8, #16
   3b864:	subs	r7, r7, #2
   3b868:	add	r3, r3, #8
   3b86c:	vst1.32	{d16-d17}, [lr], r1
   3b870:	vst1.32	{d18-d19}, [r8], r1
   3b874:	vld2.32	{d16-d19}, [ip]
   3b878:	vst1.32	{d16-d17}, [r2]
   3b87c:	vst1.32	{d18-d19}, [r0]
   3b880:	bne	3b854 <__assert_fail@plt+0x28da4>
   3b884:	b	3b8a0 <__assert_fail@plt+0x28df0>
   3b888:	ldr	lr, [sp, #40]	; 0x28
   3b88c:	tst	sl, #1
   3b890:	mov	r3, r2
   3b894:	bne	3b714 <__assert_fail@plt+0x28c64>
   3b898:	b	3b72c <__assert_fail@plt+0x28c7c>
   3b89c:	mov	r3, #0
   3b8a0:	ldr	r0, [sp, #24]
   3b8a4:	ldr	lr, [sp, #40]	; 0x28
   3b8a8:	ldr	r4, [sp, #32]
   3b8ac:	cmp	r0, #0
   3b8b0:	beq	3b8d0 <__assert_fail@plt+0x28e20>
   3b8b4:	ldr	r0, [sp, #44]	; 0x2c
   3b8b8:	add	r0, r0, r3, lsl #3
   3b8bc:	vld2.32	{d16-d19}, [r0]
   3b8c0:	add	r0, r5, r3, lsl #2
   3b8c4:	vst1.32	{d16-d17}, [r0]
   3b8c8:	add	r0, r4, r3, lsl #2
   3b8cc:	vst1.32	{d18-d19}, [r0]
   3b8d0:	ldr	r2, [sp, #28]
   3b8d4:	cmp	sl, r2
   3b8d8:	bne	3b708 <__assert_fail@plt+0x28c58>
   3b8dc:	ldr	r8, [r9]
   3b8e0:	ldr	r4, [fp, #-36]	; 0xffffffdc
   3b8e4:	ldr	r6, [sp, #44]	; 0x2c
   3b8e8:	cmp	sl, r8
   3b8ec:	bcs	3b910 <__assert_fail@plt+0x28e60>
   3b8f0:	ldmib	r9, {r0, r1}
   3b8f4:	mvn	r2, #0
   3b8f8:	str	r2, [r1, sl, lsl #2]
   3b8fc:	str	r2, [r0, sl, lsl #2]
   3b900:	add	sl, sl, #1
   3b904:	ldr	r3, [r9]
   3b908:	cmp	sl, r3
   3b90c:	bcc	3b8f8 <__assert_fail@plt+0x28e48>
   3b910:	mov	r7, lr
   3b914:	ldr	r1, [fp, #-32]	; 0xffffffe0
   3b918:	cmp	r7, #0
   3b91c:	ldrb	r0, [r1, #28]
   3b920:	and	r0, r0, #249	; 0xf9
   3b924:	orr	r0, r0, r7, lsl #1
   3b928:	strb	r0, [r1, #28]
   3b92c:	beq	3b950 <__assert_fail@plt+0x28ea0>
   3b930:	ldr	r0, [fp, #20]
   3b934:	cmp	r0, #0
   3b938:	beq	3b948 <__assert_fail@plt+0x28e98>
   3b93c:	ldr	r0, [r6, #4]
   3b940:	sub	r4, r0, r4
   3b944:	b	3b61c <__assert_fail@plt+0x28b6c>
   3b948:	ldr	r4, [r6]
   3b94c:	b	3b61c <__assert_fail@plt+0x28b6c>
   3b950:	mvn	r4, #1
   3b954:	b	3b61c <__assert_fail@plt+0x28b6c>
   3b958:	ldr	r0, [r9, #4]
   3b95c:	lsl	r1, r8, #2
   3b960:	str	r6, [sp, #44]	; 0x2c
   3b964:	mov	r6, r1
   3b968:	bl	36110 <__assert_fail@plt+0x23660>
   3b96c:	mov	r7, #0
   3b970:	cmp	r0, #0
   3b974:	beq	3b9bc <__assert_fail@plt+0x28f0c>
   3b978:	mov	r5, r0
   3b97c:	ldr	r0, [r9, #8]
   3b980:	mov	r1, r6
   3b984:	bl	36110 <__assert_fail@plt+0x23660>
   3b988:	cmp	r0, #0
   3b98c:	beq	3b9c4 <__assert_fail@plt+0x28f14>
   3b990:	ldr	r6, [sp, #44]	; 0x2c
   3b994:	str	r8, [r9]
   3b998:	str	r5, [r9, #4]
   3b99c:	str	r0, [r9, #8]
   3b9a0:	mov	lr, #1
   3b9a4:	cmp	sl, #1
   3b9a8:	bge	3b6f0 <__assert_fail@plt+0x28c40>
   3b9ac:	b	3b6d0 <__assert_fail@plt+0x28c20>
   3b9b0:	ldr	r0, [r9, #4]
   3b9b4:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b9b8:	b	3b914 <__assert_fail@plt+0x28e64>
   3b9bc:	ldr	r6, [sp, #44]	; 0x2c
   3b9c0:	b	3b914 <__assert_fail@plt+0x28e64>
   3b9c4:	mov	r0, r5
   3b9c8:	bl	32910 <__assert_fail@plt+0x1fe60>
   3b9cc:	ldr	r6, [sp, #44]	; 0x2c
   3b9d0:	b	3b914 <__assert_fail@plt+0x28e64>
   3b9d4:	push	{fp, lr}
   3b9d8:	mov	fp, sp
   3b9dc:	sub	sp, sp, #16
   3b9e0:	mov	ip, #0
   3b9e4:	str	r2, [sp, #4]
   3b9e8:	str	ip, [sp, #12]
   3b9ec:	ldr	ip, [fp, #12]
   3b9f0:	str	ip, [sp, #8]
   3b9f4:	ldr	ip, [fp, #8]
   3b9f8:	str	ip, [sp]
   3b9fc:	bl	3b404 <__assert_fail@plt+0x28954>
   3ba00:	mov	sp, fp
   3ba04:	pop	{fp, pc}
   3ba08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ba0c:	add	fp, sp, #28
   3ba10:	sub	sp, sp, #20
   3ba14:	ldr	r4, [fp, #8]
   3ba18:	mov	r8, r1
   3ba1c:	mov	r1, r0
   3ba20:	mov	r6, r2
   3ba24:	orr	r0, r4, r2
   3ba28:	ldr	r2, [fp, #20]
   3ba2c:	orrs	r0, r0, r2
   3ba30:	bmi	3baf0 <__assert_fail@plt+0x29040>
   3ba34:	adds	sl, r6, r4
   3ba38:	bvs	3baf0 <__assert_fail@plt+0x29040>
   3ba3c:	mov	r5, #0
   3ba40:	cmp	r4, #1
   3ba44:	blt	3ba9c <__assert_fail@plt+0x28fec>
   3ba48:	mov	r9, r3
   3ba4c:	cmp	r6, #1
   3ba50:	blt	3baa4 <__assert_fail@plt+0x28ff4>
   3ba54:	mov	r0, sl
   3ba58:	mov	r5, r1
   3ba5c:	bl	35350 <__assert_fail@plt+0x228a0>
   3ba60:	cmp	r0, #0
   3ba64:	beq	3baf0 <__assert_fail@plt+0x29040>
   3ba68:	mov	r1, r8
   3ba6c:	mov	r2, r6
   3ba70:	mov	r7, r0
   3ba74:	bl	124e0 <memcpy@plt>
   3ba78:	add	r0, r7, r6
   3ba7c:	mov	r1, r9
   3ba80:	mov	r2, r4
   3ba84:	bl	124e0 <memcpy@plt>
   3ba88:	ldr	r2, [fp, #20]
   3ba8c:	mov	r1, r5
   3ba90:	mov	r4, r7
   3ba94:	mov	r5, #0
   3ba98:	b	3baac <__assert_fail@plt+0x28ffc>
   3ba9c:	mov	r7, r8
   3baa0:	b	3baa8 <__assert_fail@plt+0x28ff8>
   3baa4:	mov	r7, r9
   3baa8:	mov	r4, #0
   3baac:	ldr	r0, [fp, #16]
   3bab0:	ldr	r3, [fp, #12]
   3bab4:	mov	r6, #1
   3bab8:	str	r2, [sp, #4]
   3babc:	mov	r2, sl
   3bac0:	str	r5, [sp]
   3bac4:	str	r6, [sp, #12]
   3bac8:	str	r0, [sp, #8]
   3bacc:	mov	r0, r1
   3bad0:	mov	r1, r7
   3bad4:	bl	3b404 <__assert_fail@plt+0x28954>
   3bad8:	mov	r5, r0
   3badc:	mov	r0, r4
   3bae0:	bl	32910 <__assert_fail@plt+0x1fe60>
   3bae4:	mov	r0, r5
   3bae8:	sub	sp, fp, #28
   3baec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3baf0:	mvn	r0, #1
   3baf4:	sub	sp, fp, #28
   3baf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bafc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bb00:	add	fp, sp, #28
   3bb04:	sub	sp, sp, #20
   3bb08:	ldr	r4, [fp, #8]
   3bb0c:	mov	r8, r1
   3bb10:	mov	r1, r0
   3bb14:	mov	r6, r2
   3bb18:	orr	r0, r4, r2
   3bb1c:	ldr	r2, [fp, #24]
   3bb20:	orrs	r0, r0, r2
   3bb24:	bmi	3bbe4 <__assert_fail@plt+0x29134>
   3bb28:	adds	sl, r6, r4
   3bb2c:	bvs	3bbe4 <__assert_fail@plt+0x29134>
   3bb30:	mov	r5, #0
   3bb34:	cmp	r4, #1
   3bb38:	blt	3bb90 <__assert_fail@plt+0x290e0>
   3bb3c:	mov	r9, r3
   3bb40:	cmp	r6, #1
   3bb44:	blt	3bb98 <__assert_fail@plt+0x290e8>
   3bb48:	mov	r0, sl
   3bb4c:	mov	r5, r1
   3bb50:	bl	35350 <__assert_fail@plt+0x228a0>
   3bb54:	cmp	r0, #0
   3bb58:	beq	3bbe4 <__assert_fail@plt+0x29134>
   3bb5c:	mov	r1, r8
   3bb60:	mov	r2, r6
   3bb64:	mov	r7, r0
   3bb68:	bl	124e0 <memcpy@plt>
   3bb6c:	add	r0, r7, r6
   3bb70:	mov	r1, r9
   3bb74:	mov	r2, r4
   3bb78:	bl	124e0 <memcpy@plt>
   3bb7c:	ldr	r2, [fp, #24]
   3bb80:	mov	r1, r5
   3bb84:	mov	r4, r7
   3bb88:	mov	r5, #0
   3bb8c:	b	3bba0 <__assert_fail@plt+0x290f0>
   3bb90:	mov	r7, r8
   3bb94:	b	3bb9c <__assert_fail@plt+0x290ec>
   3bb98:	mov	r7, r9
   3bb9c:	mov	r4, #0
   3bba0:	ldr	r0, [fp, #20]
   3bba4:	ldr	r6, [fp, #16]
   3bba8:	ldr	r3, [fp, #12]
   3bbac:	str	r2, [sp, #4]
   3bbb0:	mov	r2, sl
   3bbb4:	str	r5, [sp, #12]
   3bbb8:	str	r0, [sp, #8]
   3bbbc:	mov	r0, r1
   3bbc0:	mov	r1, r7
   3bbc4:	str	r6, [sp]
   3bbc8:	bl	3b404 <__assert_fail@plt+0x28954>
   3bbcc:	mov	r5, r0
   3bbd0:	mov	r0, r4
   3bbd4:	bl	32910 <__assert_fail@plt+0x1fe60>
   3bbd8:	mov	r0, r5
   3bbdc:	sub	sp, fp, #28
   3bbe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bbe4:	mvn	r0, #1
   3bbe8:	sub	sp, fp, #28
   3bbec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bbf0:	ldrb	ip, [r0, #28]
   3bbf4:	cmp	r2, #0
   3bbf8:	bic	ip, ip, #6
   3bbfc:	orrne	ip, ip, #2
   3bc00:	strb	ip, [r0, #28]
   3bc04:	ldr	r0, [sp]
   3bc08:	moveq	r0, r2
   3bc0c:	cmp	r2, #0
   3bc10:	moveq	r3, r2
   3bc14:	stm	r1, {r2, r3}
   3bc18:	str	r0, [r1, #8]
   3bc1c:	bx	lr
   3bc20:	push	{r4, sl, fp, lr}
   3bc24:	add	fp, sp, #8
   3bc28:	mov	r4, r0
   3bc2c:	ldr	r0, [r0, #24]
   3bc30:	bl	32910 <__assert_fail@plt+0x1fe60>
   3bc34:	ldr	r0, [r4, #36]	; 0x24
   3bc38:	bl	32910 <__assert_fail@plt+0x1fe60>
   3bc3c:	ldr	r0, [r4, #40]	; 0x28
   3bc40:	add	r1, r4, #4
   3bc44:	cmp	r0, r1
   3bc48:	beq	3bc5c <__assert_fail@plt+0x291ac>
   3bc4c:	ldr	r0, [r0, #8]
   3bc50:	bl	32910 <__assert_fail@plt+0x1fe60>
   3bc54:	ldr	r0, [r4, #40]	; 0x28
   3bc58:	bl	32910 <__assert_fail@plt+0x1fe60>
   3bc5c:	ldr	r0, [r4, #12]
   3bc60:	bl	32910 <__assert_fail@plt+0x1fe60>
   3bc64:	ldr	r0, [r4, #48]	; 0x30
   3bc68:	bl	32910 <__assert_fail@plt+0x1fe60>
   3bc6c:	ldr	r0, [r4, #44]	; 0x2c
   3bc70:	bl	32910 <__assert_fail@plt+0x1fe60>
   3bc74:	mov	r0, r4
   3bc78:	pop	{r4, sl, fp, lr}
   3bc7c:	b	32910 <__assert_fail@plt+0x1fe60>
   3bc80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bc84:	add	fp, sp, #28
   3bc88:	sub	sp, sp, #108	; 0x6c
   3bc8c:	mov	r3, r0
   3bc90:	ldrb	r0, [r0, #74]	; 0x4a
   3bc94:	ldr	r9, [r3, #36]	; 0x24
   3bc98:	ldr	r1, [r3, #48]	; 0x30
   3bc9c:	ldr	r8, [r3, #28]
   3bca0:	str	r3, [sp, #20]
   3bca4:	cmp	r9, r1
   3bca8:	movgt	r9, r1
   3bcac:	cmp	r0, #0
   3bcb0:	bne	3bccc <__assert_fail@plt+0x2921c>
   3bcb4:	ldr	r0, [r3, #64]	; 0x40
   3bcb8:	cmp	r0, #0
   3bcbc:	bne	3bccc <__assert_fail@plt+0x2921c>
   3bcc0:	ldrb	r0, [r3, #76]	; 0x4c
   3bcc4:	cmp	r0, #0
   3bcc8:	beq	3bcd4 <__assert_fail@plt+0x29224>
   3bccc:	ldr	r7, [r3, #32]
   3bcd0:	b	3bf10 <__assert_fail@plt+0x29460>
   3bcd4:	cmp	r9, r8
   3bcd8:	ble	3bee8 <__assert_fail@plt+0x29438>
   3bcdc:	add	r5, r3, #16
   3bce0:	add	sl, sp, #32
   3bce4:	str	r9, [sp, #16]
   3bce8:	b	3bd08 <__assert_fail@plt+0x29258>
   3bcec:	mov	r8, r9
   3bcf0:	ldr	r9, [sp, #16]
   3bcf4:	mov	r3, sl
   3bcf8:	add	sl, sp, #32
   3bcfc:	cmp	r9, r8
   3bd00:	mov	r7, r8
   3bd04:	ble	3c2e0 <__assert_fail@plt+0x29830>
   3bd08:	ldr	r6, [r3, #24]
   3bd0c:	ldr	r4, [r3]
   3bd10:	add	r0, r6, r8
   3bd14:	ldrb	r7, [r4, r0]
   3bd18:	tst	r7, #128	; 0x80
   3bd1c:	bne	3bd74 <__assert_fail@plt+0x292c4>
   3bd20:	mov	r0, r5
   3bd24:	bl	1251c <mbsinit@plt>
   3bd28:	cmp	r0, #0
   3bd2c:	beq	3bd74 <__assert_fail@plt+0x292c4>
   3bd30:	mov	r0, r7
   3bd34:	bl	12a38 <towupper@plt>
   3bd38:	cmp	r0, #128	; 0x80
   3bd3c:	bcs	3bd68 <__assert_fail@plt+0x292b8>
   3bd40:	ldr	r3, [sp, #20]
   3bd44:	ldr	r1, [r3, #4]
   3bd48:	strb	r0, [r1, r8]
   3bd4c:	ldr	r1, [r3, #8]
   3bd50:	str	r0, [r1, r8, lsl #2]
   3bd54:	add	r8, r8, #1
   3bd58:	cmp	r9, r8
   3bd5c:	mov	r7, r8
   3bd60:	bgt	3bd08 <__assert_fail@plt+0x29258>
   3bd64:	b	3c2e0 <__assert_fail@plt+0x29830>
   3bd68:	ldr	r0, [sp, #20]
   3bd6c:	ldr	r4, [r0]
   3bd70:	ldr	r6, [r0, #24]
   3bd74:	ldm	r5, {r0, r1}
   3bd78:	str	r1, [fp, #-36]	; 0xffffffdc
   3bd7c:	sub	r2, r9, r8
   3bd80:	mov	r3, r5
   3bd84:	str	r0, [fp, #-40]	; 0xffffffd8
   3bd88:	add	r0, r4, r6
   3bd8c:	add	r1, r0, r8
   3bd90:	add	r0, sp, #28
   3bd94:	bl	35380 <__assert_fail@plt+0x228d0>
   3bd98:	sub	r4, r0, #1
   3bd9c:	mov	r6, r0
   3bda0:	cmn	r4, #4
   3bda4:	bhi	3be90 <__assert_fail@plt+0x293e0>
   3bda8:	ldr	r0, [sp, #28]
   3bdac:	bl	12a38 <towupper@plt>
   3bdb0:	mov	r7, r0
   3bdb4:	ldr	r0, [sp, #28]
   3bdb8:	cmp	r7, r0
   3bdbc:	bne	3bde0 <__assert_fail@plt+0x29330>
   3bdc0:	ldr	sl, [sp, #20]
   3bdc4:	ldr	r1, [sl]
   3bdc8:	ldr	r2, [sl, #24]
   3bdcc:	ldr	r0, [sl, #4]
   3bdd0:	add	r1, r1, r2
   3bdd4:	add	r0, r0, r8
   3bdd8:	add	r1, r1, r8
   3bddc:	b	3be08 <__assert_fail@plt+0x29358>
   3bde0:	mov	r0, sl
   3bde4:	mov	r1, r7
   3bde8:	sub	r2, fp, #40	; 0x28
   3bdec:	bl	123b4 <wcrtomb@plt>
   3bdf0:	cmp	r6, r0
   3bdf4:	bne	3bef0 <__assert_fail@plt+0x29440>
   3bdf8:	mov	r1, sl
   3bdfc:	ldr	sl, [sp, #20]
   3be00:	ldr	r0, [sl, #4]
   3be04:	add	r0, r0, r8
   3be08:	mov	r2, r6
   3be0c:	bl	124e0 <memcpy@plt>
   3be10:	ldr	r0, [sl, #8]
   3be14:	add	r9, r8, #1
   3be18:	str	r7, [r0, r8, lsl #2]
   3be1c:	add	r7, r6, r8
   3be20:	cmp	r9, r7
   3be24:	bge	3bcec <__assert_fail@plt+0x2923c>
   3be28:	add	r0, r0, r8, lsl #2
   3be2c:	mvn	r1, #3
   3be30:	add	r2, r1, r6, lsl #2
   3be34:	mov	r1, #255	; 0xff
   3be38:	add	r0, r0, #4
   3be3c:	bl	12834 <memset@plt>
   3be40:	sub	r0, r6, #2
   3be44:	ands	r1, r4, #7
   3be48:	add	sl, sp, #32
   3be4c:	beq	3be5c <__assert_fail@plt+0x293ac>
   3be50:	subs	r1, r1, #1
   3be54:	add	r9, r9, #1
   3be58:	bne	3be50 <__assert_fail@plt+0x293a0>
   3be5c:	ldr	r3, [sp, #20]
   3be60:	cmp	r0, #7
   3be64:	bcc	3be78 <__assert_fail@plt+0x293c8>
   3be68:	add	r0, r6, r8
   3be6c:	sub	r0, r0, r9
   3be70:	subs	r0, r0, #8
   3be74:	bne	3be70 <__assert_fail@plt+0x293c0>
   3be78:	ldr	r9, [sp, #16]
   3be7c:	mov	r8, r7
   3be80:	cmp	r9, r8
   3be84:	mov	r7, r8
   3be88:	bgt	3bd08 <__assert_fail@plt+0x29258>
   3be8c:	b	3c2e0 <__assert_fail@plt+0x29830>
   3be90:	ldr	r3, [sp, #20]
   3be94:	add	r0, r6, #1
   3be98:	cmp	r0, #2
   3be9c:	bcc	3beb0 <__assert_fail@plt+0x29400>
   3bea0:	ldr	r0, [r3, #36]	; 0x24
   3bea4:	ldr	r1, [r3, #48]	; 0x30
   3bea8:	cmp	r0, r1
   3beac:	blt	3befc <__assert_fail@plt+0x2944c>
   3beb0:	ldr	r0, [r3, #4]
   3beb4:	cmn	r6, #1
   3beb8:	strb	r7, [r0, r8]
   3bebc:	ldr	r0, [r3, #8]
   3bec0:	str	r7, [r0, r8, lsl #2]
   3bec4:	add	r8, r8, #1
   3bec8:	bne	3bcfc <__assert_fail@plt+0x2924c>
   3becc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3bed0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3bed4:	stm	r5, {r0, r1}
   3bed8:	cmp	r9, r8
   3bedc:	mov	r7, r8
   3bee0:	bgt	3bd08 <__assert_fail@plt+0x29258>
   3bee4:	b	3c2e0 <__assert_fail@plt+0x29830>
   3bee8:	mov	r7, r8
   3beec:	b	3c2e0 <__assert_fail@plt+0x29830>
   3bef0:	ldr	r3, [sp, #20]
   3bef4:	mov	r7, r8
   3bef8:	b	3bf18 <__assert_fail@plt+0x29468>
   3befc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3bf00:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3bf04:	mov	r7, r8
   3bf08:	stm	r5, {r0, r1}
   3bf0c:	b	3c2e0 <__assert_fail@plt+0x29830>
   3bf10:	cmp	r8, r9
   3bf14:	bge	3c2e0 <__assert_fail@plt+0x29830>
   3bf18:	mov	r4, r3
   3bf1c:	mov	sl, r9
   3bf20:	sub	r2, r9, r8
   3bf24:	ldr	r0, [r4, #16]!
   3bf28:	ldr	r1, [r4, #4]
   3bf2c:	str	r0, [fp, #-40]	; 0xffffffd8
   3bf30:	str	r1, [fp, #-36]	; 0xffffffdc
   3bf34:	ldr	r0, [r4, #48]	; 0x30
   3bf38:	cmp	r0, #0
   3bf3c:	bne	3c05c <__assert_fail@plt+0x295ac>
   3bf40:	ldr	r0, [r3]
   3bf44:	ldr	r1, [r3, #24]
   3bf48:	mov	r9, r7
   3bf4c:	add	r0, r0, r1
   3bf50:	add	r7, r0, r7
   3bf54:	add	r0, sp, #24
   3bf58:	mov	r1, r7
   3bf5c:	mov	r3, r4
   3bf60:	bl	35380 <__assert_fail@plt+0x228d0>
   3bf64:	mov	r5, r0
   3bf68:	sub	r0, r0, #1
   3bf6c:	cmn	r0, #4
   3bf70:	str	r0, [sp, #16]
   3bf74:	bhi	3c0b0 <__assert_fail@plt+0x29600>
   3bf78:	ldr	r0, [sp, #24]
   3bf7c:	bl	12a38 <towupper@plt>
   3bf80:	mov	r6, r0
   3bf84:	ldr	r0, [sp, #24]
   3bf88:	cmp	r6, r0
   3bf8c:	bne	3bf9c <__assert_fail@plt+0x294ec>
   3bf90:	ldr	r4, [sp, #20]
   3bf94:	mov	r1, r7
   3bf98:	b	3bfbc <__assert_fail@plt+0x2950c>
   3bf9c:	add	r0, sp, #32
   3bfa0:	sub	r2, fp, #40	; 0x28
   3bfa4:	mov	r1, r6
   3bfa8:	bl	123b4 <wcrtomb@plt>
   3bfac:	cmp	r0, r5
   3bfb0:	bne	3c130 <__assert_fail@plt+0x29680>
   3bfb4:	ldr	r4, [sp, #20]
   3bfb8:	add	r1, sp, #32
   3bfbc:	ldr	r0, [r4, #4]
   3bfc0:	add	r0, r0, r8
   3bfc4:	mov	r2, r5
   3bfc8:	bl	124e0 <memcpy@plt>
   3bfcc:	ldrb	r0, [r4, #76]	; 0x4c
   3bfd0:	mov	r7, r9
   3bfd4:	mov	r9, sl
   3bfd8:	mov	r3, r4
   3bfdc:	cmp	r0, #0
   3bfe0:	bne	3c1e4 <__assert_fail@plt+0x29734>
   3bfe4:	ldr	r0, [r3, #8]
   3bfe8:	add	r4, r5, r8
   3bfec:	add	r7, r5, r7
   3bff0:	str	r6, [r0, r8, lsl #2]
   3bff4:	add	r6, r8, #1
   3bff8:	cmp	r6, r4
   3bffc:	bge	3c054 <__assert_fail@plt+0x295a4>
   3c000:	mvn	r1, #3
   3c004:	add	r0, r0, r6, lsl #2
   3c008:	add	r2, r1, r5, lsl #2
   3c00c:	mov	r1, #255	; 0xff
   3c010:	bl	12834 <memset@plt>
   3c014:	ldr	r1, [sp, #16]
   3c018:	sub	r0, r5, #2
   3c01c:	ands	r1, r1, #7
   3c020:	beq	3c030 <__assert_fail@plt+0x29580>
   3c024:	subs	r1, r1, #1
   3c028:	add	r6, r6, #1
   3c02c:	bne	3c024 <__assert_fail@plt+0x29574>
   3c030:	ldr	r3, [sp, #20]
   3c034:	cmp	r0, #7
   3c038:	bcc	3c04c <__assert_fail@plt+0x2959c>
   3c03c:	add	r0, r5, r8
   3c040:	sub	r0, r0, r6
   3c044:	subs	r0, r0, #8
   3c048:	bne	3c044 <__assert_fail@plt+0x29594>
   3c04c:	mov	r8, r4
   3c050:	b	3bf10 <__assert_fail@plt+0x29460>
   3c054:	mov	r8, r6
   3c058:	b	3bf10 <__assert_fail@plt+0x29460>
   3c05c:	cmp	r2, #1
   3c060:	mov	r9, r7
   3c064:	add	r7, sp, #32
   3c068:	ldrge	r1, [r3, #80]	; 0x50
   3c06c:	cmpge	r1, #1
   3c070:	blt	3bf54 <__assert_fail@plt+0x294a4>
   3c074:	ldr	r7, [r3, #24]
   3c078:	ldr	r6, [r3]
   3c07c:	add	r7, r9, r7
   3c080:	add	r3, r6, r7
   3c084:	mov	r6, #0
   3c088:	add	r7, sp, #32
   3c08c:	ldrb	r5, [r3, r6]
   3c090:	ldrb	r5, [r0, r5]
   3c094:	strb	r5, [r7, r6]
   3c098:	add	r6, r6, #1
   3c09c:	cmp	r6, r2
   3c0a0:	bge	3bf54 <__assert_fail@plt+0x294a4>
   3c0a4:	cmp	r6, r1
   3c0a8:	blt	3c08c <__assert_fail@plt+0x295dc>
   3c0ac:	b	3bf54 <__assert_fail@plt+0x294a4>
   3c0b0:	ldr	r3, [sp, #20]
   3c0b4:	add	r0, r5, #1
   3c0b8:	cmp	r0, #2
   3c0bc:	bcc	3c0d0 <__assert_fail@plt+0x29620>
   3c0c0:	ldr	r0, [r3, #36]	; 0x24
   3c0c4:	ldr	r1, [r3, #48]	; 0x30
   3c0c8:	cmp	r0, r1
   3c0cc:	blt	3c2d0 <__assert_fail@plt+0x29820>
   3c0d0:	ldr	r2, [r3, #24]
   3c0d4:	ldr	r0, [r3]
   3c0d8:	ldr	r1, [r3, #64]	; 0x40
   3c0dc:	mov	r7, r9
   3c0e0:	add	r2, r2, r9
   3c0e4:	cmp	r1, #0
   3c0e8:	ldrb	r0, [r0, r2]
   3c0ec:	bne	3c564 <__assert_fail@plt+0x29ab4>
   3c0f0:	ldr	r1, [r3, #4]
   3c0f4:	mov	r9, sl
   3c0f8:	strb	r0, [r1, r8]
   3c0fc:	ldrb	r1, [r3, #76]	; 0x4c
   3c100:	cmp	r1, #0
   3c104:	bne	3c56c <__assert_fail@plt+0x29abc>
   3c108:	ldr	r1, [r3, #8]
   3c10c:	add	r7, r7, #1
   3c110:	cmn	r5, #1
   3c114:	str	r0, [r1, r8, lsl #2]
   3c118:	add	r8, r8, #1
   3c11c:	bne	3bf10 <__assert_fail@plt+0x29460>
   3c120:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3c124:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3c128:	stm	r4, {r0, r1}
   3c12c:	b	3bf10 <__assert_fail@plt+0x29460>
   3c130:	ldr	r3, [sp, #20]
   3c134:	mov	r2, r0
   3c138:	cmn	r0, #1
   3c13c:	beq	3c260 <__assert_fail@plt+0x297b0>
   3c140:	ldr	r1, [r3, #36]	; 0x24
   3c144:	add	r0, r2, r8
   3c148:	cmp	r0, r1
   3c14c:	bhi	3c2d0 <__assert_fail@plt+0x29820>
   3c150:	str	r0, [sp, #12]
   3c154:	ldr	r0, [r3, #12]
   3c158:	mov	r7, r9
   3c15c:	cmp	r0, #0
   3c160:	bne	3c184 <__assert_fail@plt+0x296d4>
   3c164:	lsl	r0, r1, #2
   3c168:	mov	r4, r2
   3c16c:	bl	35350 <__assert_fail@plt+0x228a0>
   3c170:	ldr	r3, [sp, #20]
   3c174:	mov	r2, r4
   3c178:	cmp	r0, #0
   3c17c:	str	r0, [r3, #12]
   3c180:	beq	3c558 <__assert_fail@plt+0x29aa8>
   3c184:	ldrb	r1, [r3, #76]	; 0x4c
   3c188:	ldr	r9, [sp, #16]
   3c18c:	cmp	r1, #0
   3c190:	bne	3c3b0 <__assert_fail@plt+0x29900>
   3c194:	cmp	r8, #0
   3c198:	beq	3c3a8 <__assert_fail@plt+0x298f8>
   3c19c:	mov	r1, #0
   3c1a0:	cmp	r8, #4
   3c1a4:	bcc	3c398 <__assert_fail@plt+0x298e8>
   3c1a8:	bic	r1, r8, #3
   3c1ac:	stmib	sp, {r2, r7}
   3c1b0:	mov	r2, #1
   3c1b4:	add	r3, pc, #964	; 0x3c4
   3c1b8:	sub	r7, r1, #4
   3c1bc:	add	r2, r2, r7, lsr #2
   3c1c0:	cmp	r7, #12
   3c1c4:	and	r4, r2, #3
   3c1c8:	bcs	3c2f4 <__assert_fail@plt+0x29844>
   3c1cc:	vld1.64	{d16-d17}, [r3 :128]
   3c1d0:	mov	sl, r4
   3c1d4:	mov	r3, #0
   3c1d8:	cmp	sl, #0
   3c1dc:	bne	3c368 <__assert_fail@plt+0x298b8>
   3c1e0:	b	3c388 <__assert_fail@plt+0x298d8>
   3c1e4:	ldr	lr, [r3, #12]
   3c1e8:	mov	r1, #0
   3c1ec:	cmp	r5, #4
   3c1f0:	bcc	3c2ac <__assert_fail@plt+0x297fc>
   3c1f4:	vdup.32	q8, r7
   3c1f8:	bic	r1, r5, #3
   3c1fc:	mov	r3, #1
   3c200:	mov	r9, r7
   3c204:	subs	r2, r1, #4
   3c208:	add	r2, r3, r2, lsr #2
   3c20c:	add	r3, pc, #876	; 0x36c
   3c210:	and	ip, r2, #1
   3c214:	beq	3c278 <__assert_fail@plt+0x297c8>
   3c218:	sub	r4, r2, ip
   3c21c:	add	r2, pc, #860	; 0x35c
   3c220:	vmov.i32	q10, #4	; 0x00000004
   3c224:	vmov.i32	q11, #8	; 0x00000008
   3c228:	add	r7, lr, r8, lsl #2
   3c22c:	mov	r3, #0
   3c230:	vld1.64	{d18-d19}, [r2 :128]
   3c234:	mov	r2, #32
   3c238:	vadd.i32	q12, q9, q8
   3c23c:	vadd.i32	q9, q9, q11
   3c240:	add	r0, r7, #16
   3c244:	subs	r4, r4, #2
   3c248:	add	r3, r3, #8
   3c24c:	vadd.i32	q13, q12, q10
   3c250:	vst1.32	{d24-d25}, [r7], r2
   3c254:	vst1.32	{d26-d27}, [r0]
   3c258:	bne	3c238 <__assert_fail@plt+0x29788>
   3c25c:	b	3c280 <__assert_fail@plt+0x297d0>
   3c260:	ldr	r0, [r3, #4]
   3c264:	mov	r1, r7
   3c268:	mov	r2, r5
   3c26c:	mov	r4, r3
   3c270:	add	r0, r0, r8
   3c274:	b	3bfc8 <__assert_fail@plt+0x29518>
   3c278:	vld1.64	{d18-d19}, [r3 :128]
   3c27c:	mov	r3, #0
   3c280:	cmp	ip, #0
   3c284:	beq	3c298 <__assert_fail@plt+0x297e8>
   3c288:	add	r0, r3, r8
   3c28c:	vadd.i32	q8, q9, q8
   3c290:	add	r0, lr, r0, lsl #2
   3c294:	vst1.32	{d16-d17}, [r0]
   3c298:	ldr	r3, [sp, #20]
   3c29c:	mov	r7, r9
   3c2a0:	cmp	r5, r1
   3c2a4:	mov	r9, sl
   3c2a8:	beq	3bfe4 <__assert_fail@plt+0x29534>
   3c2ac:	add	r0, r8, r1
   3c2b0:	add	r2, r7, r1
   3c2b4:	sub	r4, r5, r1
   3c2b8:	add	r0, lr, r0, lsl #2
   3c2bc:	str	r2, [r0], #4
   3c2c0:	add	r2, r2, #1
   3c2c4:	subs	r4, r4, #1
   3c2c8:	bne	3c2bc <__assert_fail@plt+0x2980c>
   3c2cc:	b	3bfe4 <__assert_fail@plt+0x29534>
   3c2d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   3c2d4:	mov	r7, r9
   3c2d8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3c2dc:	stm	r4, {r0, r1}
   3c2e0:	str	r8, [r3, #28]
   3c2e4:	str	r7, [r3, #32]
   3c2e8:	mov	r0, #0
   3c2ec:	sub	sp, fp, #28
   3c2f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c2f4:	mov	sl, r4
   3c2f8:	sub	r4, r2, r4
   3c2fc:	add	r2, pc, #636	; 0x27c
   3c300:	vmov.i32	q9, #12	; 0x0000000c
   3c304:	vmov.i32	q10, #8	; 0x00000008
   3c308:	vmov.i32	q11, #4	; 0x00000004
   3c30c:	vmov.i32	q12, #16	; 0x00000010
   3c310:	mov	r3, #0
   3c314:	mov	lr, #64	; 0x40
   3c318:	mov	r7, r0
   3c31c:	vld1.64	{d16-d17}, [r2 :128]
   3c320:	mov	r2, r0
   3c324:	vadd.i32	q13, q8, q9
   3c328:	add	ip, r2, #48	; 0x30
   3c32c:	vadd.i32	q14, q8, q10
   3c330:	vadd.i32	q15, q8, q11
   3c334:	subs	r4, r4, #4
   3c338:	add	r3, r3, #16
   3c33c:	vst1.32	{d26-d27}, [ip]
   3c340:	vst1.32	{d16-d17}, [r7], lr
   3c344:	vadd.i32	q8, q8, q12
   3c348:	add	ip, r2, #32
   3c34c:	add	r2, r2, #16
   3c350:	vst1.32	{d28-d29}, [ip]
   3c354:	vst1.32	{d30-d31}, [r2]
   3c358:	mov	r2, r7
   3c35c:	bne	3c324 <__assert_fail@plt+0x29874>
   3c360:	cmp	sl, #0
   3c364:	beq	3c388 <__assert_fail@plt+0x298d8>
   3c368:	vmov.i32	q9, #4	; 0x00000004
   3c36c:	add	r2, r0, r3, lsl #2
   3c370:	rsb	r3, sl, #0
   3c374:	vadd.i32	q10, q8, q9
   3c378:	vst1.32	{d16-d17}, [r2]!
   3c37c:	adds	r3, r3, #1
   3c380:	vorr	q8, q10, q10
   3c384:	bcc	3c374 <__assert_fail@plt+0x298c4>
   3c388:	ldr	r3, [sp, #20]
   3c38c:	ldmib	sp, {r2, r7}
   3c390:	cmp	r8, r1
   3c394:	beq	3c3a8 <__assert_fail@plt+0x298f8>
   3c398:	str	r1, [r0, r1, lsl #2]
   3c39c:	add	r1, r1, #1
   3c3a0:	cmp	r8, r1
   3c3a4:	bne	3c398 <__assert_fail@plt+0x298e8>
   3c3a8:	mov	r0, #1
   3c3ac:	strb	r0, [r3, #76]	; 0x4c
   3c3b0:	ldr	r0, [r3, #4]
   3c3b4:	add	r1, sp, #32
   3c3b8:	mov	r4, r3
   3c3bc:	mov	sl, r2
   3c3c0:	add	r0, r0, r8
   3c3c4:	bl	124e0 <memcpy@plt>
   3c3c8:	ldr	r0, [r4, #8]
   3c3cc:	cmp	sl, #2
   3c3d0:	str	r6, [r0, r8, lsl #2]
   3c3d4:	mov	r6, r7
   3c3d8:	ldr	r1, [r4, #12]
   3c3dc:	str	r7, [r1, r8, lsl #2]
   3c3e0:	bcc	3c510 <__assert_fail@plt+0x29a60>
   3c3e4:	sub	lr, sl, #1
   3c3e8:	mov	ip, r6
   3c3ec:	mov	r2, #1
   3c3f0:	cmp	lr, #4
   3c3f4:	bcc	3c478 <__assert_fail@plt+0x299c8>
   3c3f8:	add	r7, sl, r8
   3c3fc:	add	r4, r8, #1
   3c400:	str	ip, [sp, #8]
   3c404:	add	r6, r0, r4, lsl #2
   3c408:	add	r3, r0, r7, lsl #2
   3c40c:	add	r4, r1, r4, lsl #2
   3c410:	cmp	r4, r3
   3c414:	addcc	r3, r1, r7, lsl #2
   3c418:	cmpcc	r6, r3
   3c41c:	bcc	3c478 <__assert_fail@plt+0x299c8>
   3c420:	add	r2, pc, #360	; 0x168
   3c424:	ldr	r3, [sp, #8]
   3c428:	vdup.32	q9, r9
   3c42c:	vdup.32	q10, r5
   3c430:	vmov.i32	q12, #4	; 0x00000004
   3c434:	vmov.i8	q13, #255	; 0xff
   3c438:	vld1.64	{d22-d23}, [r2 :128]
   3c43c:	vdup.32	q8, r3
   3c440:	bic	r3, lr, #3
   3c444:	orr	r2, r3, #1
   3c448:	mov	r7, r3
   3c44c:	vcgt.u32	q14, q10, q11
   3c450:	subs	r7, r7, #4
   3c454:	vbsl	q14, q11, q9
   3c458:	vadd.i32	q11, q11, q12
   3c45c:	vadd.i32	q14, q14, q8
   3c460:	vst1.32	{d28-d29}, [r4]!
   3c464:	vst1.32	{d26-d27}, [r6]!
   3c468:	bne	3c44c <__assert_fail@plt+0x2999c>
   3c46c:	cmp	lr, r3
   3c470:	mov	r6, ip
   3c474:	beq	3c510 <__assert_fail@plt+0x29a60>
   3c478:	tst	sl, #1
   3c47c:	mov	r3, r2
   3c480:	bne	3c4a8 <__assert_fail@plt+0x299f8>
   3c484:	cmp	r2, r5
   3c488:	mov	r3, r9
   3c48c:	add	r7, r2, r8
   3c490:	movcc	r3, r2
   3c494:	add	r3, r3, ip
   3c498:	str	r3, [r1, r7, lsl #2]
   3c49c:	mvn	r3, #0
   3c4a0:	str	r3, [r0, r7, lsl #2]
   3c4a4:	add	r3, r2, #1
   3c4a8:	add	r2, r2, #1
   3c4ac:	mov	r6, ip
   3c4b0:	cmp	sl, r2
   3c4b4:	beq	3c510 <__assert_fail@plt+0x29a60>
   3c4b8:	add	r2, r8, r3
   3c4bc:	add	r2, r2, #1
   3c4c0:	add	r1, r1, r2, lsl #2
   3c4c4:	add	r0, r0, r2, lsl #2
   3c4c8:	mvn	r2, #0
   3c4cc:	cmp	r3, r5
   3c4d0:	mov	r7, r9
   3c4d4:	movcc	r7, r3
   3c4d8:	add	r7, r7, r6
   3c4dc:	str	r7, [r1, #-4]
   3c4e0:	add	r7, r3, #1
   3c4e4:	add	r3, r3, #2
   3c4e8:	str	r2, [r0, #-4]
   3c4ec:	cmp	r7, r5
   3c4f0:	movcs	r7, r9
   3c4f4:	cmp	r3, sl
   3c4f8:	add	r7, r7, r6
   3c4fc:	str	r7, [r1]
   3c500:	str	r2, [r0]
   3c504:	add	r1, r1, #8
   3c508:	add	r0, r0, #8
   3c50c:	bne	3c4cc <__assert_fail@plt+0x29a1c>
   3c510:	ldr	r3, [sp, #20]
   3c514:	sub	r1, sl, r5
   3c518:	mov	r7, r6
   3c51c:	ldr	r0, [r3, #48]	; 0x30
   3c520:	ldr	r2, [r3, #52]	; 0x34
   3c524:	add	r0, r0, r1
   3c528:	cmp	r2, r6
   3c52c:	str	r0, [r3, #48]	; 0x30
   3c530:	ble	3c540 <__assert_fail@plt+0x29a90>
   3c534:	ldr	r2, [r3, #56]	; 0x38
   3c538:	add	r1, r2, r1
   3c53c:	str	r1, [r3, #56]	; 0x38
   3c540:	ldr	r9, [r3, #36]	; 0x24
   3c544:	ldr	r8, [sp, #12]
   3c548:	add	r7, r5, r7
   3c54c:	cmp	r9, r0
   3c550:	movgt	r9, r0
   3c554:	b	3bf10 <__assert_fail@plt+0x29460>
   3c558:	mov	r0, #12
   3c55c:	sub	sp, fp, #28
   3c560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c564:	ldrb	r0, [r1, r0]
   3c568:	b	3c0f0 <__assert_fail@plt+0x29640>
   3c56c:	ldr	r1, [r3, #12]
   3c570:	str	r7, [r1, r8, lsl #2]
   3c574:	b	3c108 <__assert_fail@plt+0x29658>
   3c578:	nop	{0}
   3c57c:	nop	{0}
   3c580:	andeq	r0, r0, r0
   3c584:	andeq	r0, r0, r1
   3c588:	andeq	r0, r0, r2
   3c58c:	andeq	r0, r0, r3
   3c590:	andeq	r0, r0, r1
   3c594:	andeq	r0, r0, r2
   3c598:	andeq	r0, r0, r3
   3c59c:	andeq	r0, r0, r4
   3c5a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c5a4:	add	fp, sp, #28
   3c5a8:	sub	sp, sp, #68	; 0x44
   3c5ac:	mov	r4, r0
   3c5b0:	ldr	r8, [r0, #28]
   3c5b4:	ldr	r5, [r0, #36]	; 0x24
   3c5b8:	ldr	r0, [r0, #48]	; 0x30
   3c5bc:	cmp	r5, r0
   3c5c0:	movgt	r5, r0
   3c5c4:	cmp	r5, r8
   3c5c8:	ble	3c7a0 <__assert_fail@plt+0x29cf0>
   3c5cc:	add	r9, r4, #16
   3c5d0:	mov	r0, sp
   3c5d4:	ldr	r3, [r4, #64]	; 0x40
   3c5d8:	ldm	r9, {r6, sl}
   3c5dc:	sub	r2, r5, r8
   3c5e0:	cmp	r3, #0
   3c5e4:	bne	3c6e4 <__assert_fail@plt+0x29c34>
   3c5e8:	ldr	r3, [r4]
   3c5ec:	ldr	r1, [r4, #24]
   3c5f0:	add	r1, r3, r1
   3c5f4:	add	r1, r1, r8
   3c5f8:	mov	r3, r9
   3c5fc:	bl	35380 <__assert_fail@plt+0x228d0>
   3c600:	mov	r7, r0
   3c604:	add	r0, r0, #1
   3c608:	cmp	r0, #2
   3c60c:	bcc	3c628 <__assert_fail@plt+0x29b78>
   3c610:	cmn	r7, #2
   3c614:	bne	3c654 <__assert_fail@plt+0x29ba4>
   3c618:	ldr	r0, [r4, #36]	; 0x24
   3c61c:	ldr	r1, [r4, #48]	; 0x30
   3c620:	cmp	r0, r1
   3c624:	blt	3c79c <__assert_fail@plt+0x29cec>
   3c628:	ldr	r1, [r4, #24]
   3c62c:	ldr	r0, [r4]
   3c630:	add	r1, r1, r8
   3c634:	ldrb	r0, [r0, r1]
   3c638:	str	r0, [sp]
   3c63c:	ldr	r1, [r4, #64]	; 0x40
   3c640:	cmp	r1, #0
   3c644:	bne	3c790 <__assert_fail@plt+0x29ce0>
   3c648:	mov	r7, #1
   3c64c:	stm	r9, {r6, sl}
   3c650:	b	3c658 <__assert_fail@plt+0x29ba8>
   3c654:	ldr	r0, [sp]
   3c658:	ldr	r1, [r4, #8]
   3c65c:	add	sl, r7, r8
   3c660:	add	r6, r8, #1
   3c664:	cmp	r6, sl
   3c668:	str	r0, [r1, r8, lsl #2]
   3c66c:	bge	3c6d0 <__assert_fail@plt+0x29c20>
   3c670:	mvn	r0, #3
   3c674:	add	r2, r0, r7, lsl #2
   3c678:	add	r0, r1, r8, lsl #2
   3c67c:	mov	r1, #255	; 0xff
   3c680:	add	r0, r0, #4
   3c684:	bl	12834 <memset@plt>
   3c688:	sub	r1, r7, #1
   3c68c:	sub	r0, r7, #2
   3c690:	ands	r1, r1, #7
   3c694:	beq	3c6a4 <__assert_fail@plt+0x29bf4>
   3c698:	subs	r1, r1, #1
   3c69c:	add	r6, r6, #1
   3c6a0:	bne	3c698 <__assert_fail@plt+0x29be8>
   3c6a4:	cmp	r0, #7
   3c6a8:	bcc	3c6bc <__assert_fail@plt+0x29c0c>
   3c6ac:	add	r0, r7, r8
   3c6b0:	sub	r0, r0, r6
   3c6b4:	subs	r0, r0, #8
   3c6b8:	bne	3c6b4 <__assert_fail@plt+0x29c04>
   3c6bc:	mov	r8, sl
   3c6c0:	mov	r0, sp
   3c6c4:	cmp	r5, r8
   3c6c8:	bgt	3c5d4 <__assert_fail@plt+0x29b24>
   3c6cc:	b	3c7a0 <__assert_fail@plt+0x29cf0>
   3c6d0:	mov	r8, r6
   3c6d4:	mov	r0, sp
   3c6d8:	cmp	r5, r8
   3c6dc:	bgt	3c5d4 <__assert_fail@plt+0x29b24>
   3c6e0:	b	3c7a0 <__assert_fail@plt+0x29cf0>
   3c6e4:	cmp	r2, #1
   3c6e8:	add	r1, sp, #4
   3c6ec:	blt	3c5f8 <__assert_fail@plt+0x29b48>
   3c6f0:	ldr	r1, [r4, #80]	; 0x50
   3c6f4:	cmp	r1, #1
   3c6f8:	add	r1, sp, #4
   3c6fc:	blt	3c5f8 <__assert_fail@plt+0x29b48>
   3c700:	ldr	r7, [r4, #24]
   3c704:	ldm	r4, {r1, ip}
   3c708:	cmp	r2, #2
   3c70c:	add	r7, r8, r7
   3c710:	ldrb	r1, [r1, r7]
   3c714:	ldrb	r1, [r3, r1]
   3c718:	strb	r1, [ip, r8]
   3c71c:	strb	r1, [sp, #4]
   3c720:	add	r1, sp, #4
   3c724:	blt	3c5f8 <__assert_fail@plt+0x29b48>
   3c728:	ldr	r1, [r4, #80]	; 0x50
   3c72c:	cmp	r1, #2
   3c730:	add	r1, sp, #4
   3c734:	blt	3c5f8 <__assert_fail@plt+0x29b48>
   3c738:	mov	lr, r0
   3c73c:	mov	r0, #1
   3c740:	ldr	r7, [r4, #24]
   3c744:	ldm	r4, {r1, ip}
   3c748:	ldr	r3, [r4, #64]	; 0x40
   3c74c:	add	r1, r1, r7
   3c750:	add	r1, r1, r8
   3c754:	ldrb	r1, [r1, r0]
   3c758:	ldrb	r1, [r3, r1]
   3c75c:	add	r3, ip, r8
   3c760:	strb	r1, [r3, r0]
   3c764:	add	r3, sp, #4
   3c768:	strb	r1, [r3, r0]
   3c76c:	add	r0, r0, #1
   3c770:	cmp	r0, r2
   3c774:	bge	3c784 <__assert_fail@plt+0x29cd4>
   3c778:	ldr	r1, [r4, #80]	; 0x50
   3c77c:	cmp	r0, r1
   3c780:	blt	3c740 <__assert_fail@plt+0x29c90>
   3c784:	add	r1, sp, #4
   3c788:	mov	r0, lr
   3c78c:	b	3c5f8 <__assert_fail@plt+0x29b48>
   3c790:	ldrb	r0, [r1, r0]
   3c794:	str	r0, [sp]
   3c798:	b	3c648 <__assert_fail@plt+0x29b98>
   3c79c:	stm	r9, {r6, sl}
   3c7a0:	str	r8, [r4, #28]
   3c7a4:	str	r8, [r4, #32]
   3c7a8:	sub	sp, fp, #28
   3c7ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c7b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c7b4:	add	fp, sp, #28
   3c7b8:	sub	sp, sp, #28
   3c7bc:	ldr	r8, [r1]
   3c7c0:	mov	r7, r0
   3c7c4:	ldr	r6, [fp, #12]
   3c7c8:	mov	r5, r2
   3c7cc:	str	r1, [sp, #20]
   3c7d0:	str	r3, [sp, #24]
   3c7d4:	ldr	r0, [r8, #84]	; 0x54
   3c7d8:	str	r6, [sp, #4]
   3c7dc:	str	r0, [sp, #16]
   3c7e0:	ldr	r0, [fp, #8]
   3c7e4:	str	r0, [sp]
   3c7e8:	mov	r0, r7
   3c7ec:	bl	3d38c <__assert_fail@plt+0x2a8dc>
   3c7f0:	mov	r4, r0
   3c7f4:	cmp	r0, #0
   3c7f8:	bne	3c808 <__assert_fail@plt+0x29d58>
   3c7fc:	ldr	r0, [r6]
   3c800:	cmp	r0, #0
   3c804:	bne	3cb2c <__assert_fail@plt+0x2a07c>
   3c808:	ldrb	r0, [r5, #4]
   3c80c:	cmp	r0, #10
   3c810:	bne	3c95c <__assert_fail@plt+0x29eac>
   3c814:	ldr	r0, [sp, #24]
   3c818:	mov	r9, #0
   3c81c:	orr	sl, r0, #8388608	; 0x800000
   3c820:	ldr	r0, [fp, #8]
   3c824:	str	sl, [sp, #12]
   3c828:	cmp	r0, #0
   3c82c:	beq	3c990 <__assert_fail@plt+0x29ee0>
   3c830:	mov	r0, r5
   3c834:	mov	r1, r7
   3c838:	mov	r2, sl
   3c83c:	bl	3cb38 <__assert_fail@plt+0x2a088>
   3c840:	ldr	r1, [r7, #40]	; 0x28
   3c844:	mov	r6, #0
   3c848:	add	r0, r1, r0
   3c84c:	str	r0, [r7, #40]	; 0x28
   3c850:	ldrb	r0, [r5, #4]
   3c854:	orr	r1, r0, #8
   3c858:	cmp	r1, #10
   3c85c:	bne	3c8c0 <__assert_fail@plt+0x29e10>
   3c860:	ldr	r1, [r8, #64]	; 0x40
   3c864:	cmp	r1, #31
   3c868:	beq	3c934 <__assert_fail@plt+0x29e84>
   3c86c:	ldr	r0, [r8, #56]	; 0x38
   3c870:	add	r0, r0, r1, lsl #5
   3c874:	add	r2, r1, #1
   3c878:	mov	r1, #10
   3c87c:	cmp	r4, #0
   3c880:	str	r2, [r8, #64]	; 0x40
   3c884:	str	r9, [r0, #4]!
   3c888:	stmib	r0, {r4, r6, r9}
   3c88c:	str	r9, [r0, #16]
   3c890:	str	r9, [r0, #20]
   3c894:	str	r1, [r0, #24]
   3c898:	mvn	r1, #0
   3c89c:	str	r1, [r0, #28]
   3c8a0:	strne	r0, [r4]
   3c8a4:	cmp	r6, #0
   3c8a8:	mov	r4, r0
   3c8ac:	strne	r0, [r6]
   3c8b0:	ldrb	r1, [r5, #4]
   3c8b4:	cmp	r1, #10
   3c8b8:	beq	3c830 <__assert_fail@plt+0x29d80>
   3c8bc:	b	3ca74 <__assert_fail@plt+0x29fc4>
   3c8c0:	cmp	r0, #9
   3c8c4:	mov	r6, #0
   3c8c8:	beq	3c860 <__assert_fail@plt+0x29db0>
   3c8cc:	ldr	r0, [sp, #16]
   3c8d0:	ldr	sl, [r8, #84]	; 0x54
   3c8d4:	ldr	r1, [sp, #20]
   3c8d8:	ldr	r3, [sp, #24]
   3c8dc:	mov	r2, r5
   3c8e0:	str	r0, [r8, #84]	; 0x54
   3c8e4:	ldr	r0, [fp, #8]
   3c8e8:	str	r0, [sp]
   3c8ec:	ldr	r0, [fp, #12]
   3c8f0:	str	r0, [sp, #4]
   3c8f4:	mov	r0, r7
   3c8f8:	bl	3d38c <__assert_fail@plt+0x2a8dc>
   3c8fc:	mov	r6, r0
   3c900:	cmp	r0, #0
   3c904:	bne	3c918 <__assert_fail@plt+0x29e68>
   3c908:	ldr	r0, [fp, #12]
   3c90c:	ldr	r0, [r0]
   3c910:	cmp	r0, #0
   3c914:	bne	3ca7c <__assert_fail@plt+0x29fcc>
   3c918:	ldr	r0, [r8, #84]	; 0x54
   3c91c:	orr	r0, r0, sl
   3c920:	ldr	sl, [sp, #12]
   3c924:	str	r0, [r8, #84]	; 0x54
   3c928:	ldr	r1, [r8, #64]	; 0x40
   3c92c:	cmp	r1, #31
   3c930:	bne	3c86c <__assert_fail@plt+0x29dbc>
   3c934:	mov	r0, #996	; 0x3e4
   3c938:	bl	35350 <__assert_fail@plt+0x228a0>
   3c93c:	cmp	r0, #0
   3c940:	beq	3cb20 <__assert_fail@plt+0x2a070>
   3c944:	ldr	r1, [r8, #56]	; 0x38
   3c948:	str	r1, [r0]
   3c94c:	mov	r1, #0
   3c950:	str	r1, [r8, #64]	; 0x40
   3c954:	str	r0, [r8, #56]	; 0x38
   3c958:	b	3c870 <__assert_fail@plt+0x29dc0>
   3c95c:	mov	r0, r4
   3c960:	sub	sp, fp, #28
   3c964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c968:	mov	r0, #996	; 0x3e4
   3c96c:	bl	35350 <__assert_fail@plt+0x228a0>
   3c970:	cmp	r0, #0
   3c974:	beq	3cb20 <__assert_fail@plt+0x2a070>
   3c978:	ldr	r1, [r8, #56]	; 0x38
   3c97c:	str	r1, [r0]
   3c980:	mov	r1, #0
   3c984:	str	r1, [r8, #64]	; 0x40
   3c988:	str	r0, [r8, #56]	; 0x38
   3c98c:	b	3ca28 <__assert_fail@plt+0x29f78>
   3c990:	mov	r0, r5
   3c994:	mov	r1, r7
   3c998:	mov	r2, sl
   3c99c:	bl	3cb38 <__assert_fail@plt+0x2a088>
   3c9a0:	ldr	r1, [r7, #40]	; 0x28
   3c9a4:	mov	r6, #0
   3c9a8:	add	r0, r1, r0
   3c9ac:	str	r0, [r7, #40]	; 0x28
   3c9b0:	ldrb	r0, [r5, #4]
   3c9b4:	orr	r0, r0, #8
   3c9b8:	cmp	r0, #10
   3c9bc:	beq	3ca18 <__assert_fail@plt+0x29f68>
   3c9c0:	ldr	r0, [sp, #16]
   3c9c4:	ldr	sl, [r8, #84]	; 0x54
   3c9c8:	ldr	r1, [sp, #20]
   3c9cc:	ldr	r3, [sp, #24]
   3c9d0:	mov	r2, r5
   3c9d4:	str	r0, [r8, #84]	; 0x54
   3c9d8:	ldr	r0, [fp, #12]
   3c9dc:	str	r9, [sp]
   3c9e0:	str	r0, [sp, #4]
   3c9e4:	mov	r0, r7
   3c9e8:	bl	3d38c <__assert_fail@plt+0x2a8dc>
   3c9ec:	mov	r6, r0
   3c9f0:	cmp	r0, #0
   3c9f4:	bne	3ca08 <__assert_fail@plt+0x29f58>
   3c9f8:	ldr	r0, [fp, #12]
   3c9fc:	ldr	r0, [r0]
   3ca00:	cmp	r0, #0
   3ca04:	bne	3ca7c <__assert_fail@plt+0x29fcc>
   3ca08:	ldr	r0, [r8, #84]	; 0x54
   3ca0c:	orr	r0, r0, sl
   3ca10:	ldr	sl, [sp, #12]
   3ca14:	str	r0, [r8, #84]	; 0x54
   3ca18:	ldr	r1, [r8, #64]	; 0x40
   3ca1c:	cmp	r1, #31
   3ca20:	beq	3c968 <__assert_fail@plt+0x29eb8>
   3ca24:	ldr	r0, [r8, #56]	; 0x38
   3ca28:	add	r0, r0, r1, lsl #5
   3ca2c:	add	r2, r1, #1
   3ca30:	mov	r1, #10
   3ca34:	cmp	r4, #0
   3ca38:	str	r2, [r8, #64]	; 0x40
   3ca3c:	str	r9, [r0, #4]!
   3ca40:	stmib	r0, {r4, r6, r9}
   3ca44:	str	r9, [r0, #16]
   3ca48:	str	r9, [r0, #20]
   3ca4c:	str	r1, [r0, #24]
   3ca50:	mvn	r1, #0
   3ca54:	str	r1, [r0, #28]
   3ca58:	strne	r0, [r4]
   3ca5c:	cmp	r6, #0
   3ca60:	mov	r4, r0
   3ca64:	strne	r0, [r6]
   3ca68:	ldrb	r1, [r5, #4]
   3ca6c:	cmp	r1, #10
   3ca70:	beq	3c990 <__assert_fail@plt+0x29ee0>
   3ca74:	sub	sp, fp, #28
   3ca78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ca7c:	cmp	r4, #0
   3ca80:	beq	3cb2c <__assert_fail@plt+0x2a07c>
   3ca84:	movw	r5, #255	; 0xff
   3ca88:	movt	r5, #4
   3ca8c:	mov	r6, r4
   3ca90:	ldr	r4, [r4, #4]
   3ca94:	cmp	r4, #0
   3ca98:	bne	3ca8c <__assert_fail@plt+0x29fdc>
   3ca9c:	ldr	r4, [r6, #8]
   3caa0:	cmp	r4, #0
   3caa4:	bne	3ca8c <__assert_fail@plt+0x29fdc>
   3caa8:	ldr	r0, [r6, #24]
   3caac:	and	r0, r0, r5
   3cab0:	cmp	r0, #3
   3cab4:	beq	3cae8 <__assert_fail@plt+0x2a038>
   3cab8:	cmp	r0, #6
   3cabc:	bne	3caf4 <__assert_fail@plt+0x2a044>
   3cac0:	ldr	r4, [r6, #20]
   3cac4:	ldr	r0, [r4]
   3cac8:	bl	32910 <__assert_fail@plt+0x1fe60>
   3cacc:	ldr	r0, [r4, #4]
   3cad0:	bl	32910 <__assert_fail@plt+0x1fe60>
   3cad4:	ldr	r0, [r4, #8]
   3cad8:	bl	32910 <__assert_fail@plt+0x1fe60>
   3cadc:	ldr	r0, [r4, #12]
   3cae0:	bl	32910 <__assert_fail@plt+0x1fe60>
   3cae4:	b	3caec <__assert_fail@plt+0x2a03c>
   3cae8:	ldr	r4, [r6, #20]
   3caec:	mov	r0, r4
   3caf0:	bl	32910 <__assert_fail@plt+0x1fe60>
   3caf4:	ldr	r0, [r6]
   3caf8:	cmp	r0, #0
   3cafc:	beq	3cb2c <__assert_fail@plt+0x2a07c>
   3cb00:	ldr	r4, [r0, #8]
   3cb04:	cmp	r4, r6
   3cb08:	mov	r6, r0
   3cb0c:	beq	3caa8 <__assert_fail@plt+0x29ff8>
   3cb10:	cmp	r4, #0
   3cb14:	mov	r6, r0
   3cb18:	beq	3caa8 <__assert_fail@plt+0x29ff8>
   3cb1c:	b	3ca8c <__assert_fail@plt+0x29fdc>
   3cb20:	ldr	r1, [fp, #12]
   3cb24:	mov	r0, #12
   3cb28:	str	r0, [r1]
   3cb2c:	mov	r0, #0
   3cb30:	sub	sp, fp, #28
   3cb34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cb38:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3cb3c:	add	fp, sp, #24
   3cb40:	sub	sp, sp, #8
   3cb44:	mov	r9, r0
   3cb48:	mov	r7, r1
   3cb4c:	ldr	r0, [r1, #40]	; 0x28
   3cb50:	ldr	r1, [r1, #56]	; 0x38
   3cb54:	cmp	r1, r0
   3cb58:	ble	3cc40 <__assert_fail@plt+0x2a190>
   3cb5c:	ldr	r1, [r7, #4]
   3cb60:	mov	r5, r9
   3cb64:	mov	r8, r2
   3cb68:	ldrb	r6, [r1, r0]
   3cb6c:	strb	r6, [r5], #4
   3cb70:	ldr	r0, [r5]
   3cb74:	bic	r1, r0, #6291456	; 0x600000
   3cb78:	str	r1, [r5]
   3cb7c:	ldr	r3, [r7, #80]	; 0x50
   3cb80:	cmp	r3, #2
   3cb84:	blt	3cba8 <__assert_fail@plt+0x2a0f8>
   3cb88:	ldr	r2, [r7, #28]
   3cb8c:	ldr	r1, [r7, #40]	; 0x28
   3cb90:	cmp	r1, r2
   3cb94:	beq	3cba8 <__assert_fail@plt+0x2a0f8>
   3cb98:	ldr	r2, [r7, #8]
   3cb9c:	ldr	r1, [r2, r1, lsl #2]
   3cba0:	cmn	r1, #1
   3cba4:	beq	3d084 <__assert_fail@plt+0x2a5d4>
   3cba8:	movw	r1, #65280	; 0xff00
   3cbac:	cmp	r6, #92	; 0x5c
   3cbb0:	movt	r1, #65439	; 0xff9f
   3cbb4:	bne	3cc58 <__assert_fail@plt+0x2a1a8>
   3cbb8:	ldr	r6, [r7, #40]	; 0x28
   3cbbc:	ldr	r4, [r7, #48]	; 0x30
   3cbc0:	add	r2, r6, #1
   3cbc4:	cmp	r2, r4
   3cbc8:	bge	3ccac <__assert_fail@plt+0x2a1fc>
   3cbcc:	ldrb	r4, [r7, #75]	; 0x4b
   3cbd0:	cmp	r4, #0
   3cbd4:	bne	3d318 <__assert_fail@plt+0x2a868>
   3cbd8:	ldr	r3, [r7, #4]
   3cbdc:	ldrb	r6, [r3, r2]
   3cbe0:	and	r0, r0, r1
   3cbe4:	strb	r6, [r9]
   3cbe8:	orr	r4, r0, #1
   3cbec:	str	r4, [r9, #4]
   3cbf0:	ldr	r0, [r7, #80]	; 0x50
   3cbf4:	cmp	r0, #2
   3cbf8:	blt	3ced0 <__assert_fail@plt+0x2a420>
   3cbfc:	ldr	r0, [r7, #8]
   3cc00:	ldr	r1, [r7, #40]	; 0x28
   3cc04:	add	r0, r0, r1, lsl #2
   3cc08:	ldr	r4, [r0, #4]
   3cc0c:	mov	r0, r4
   3cc10:	bl	12810 <iswalnum@plt>
   3cc14:	sub	r1, r4, #95	; 0x5f
   3cc18:	cmp	r0, #0
   3cc1c:	clz	r1, r1
   3cc20:	movwne	r0, #1
   3cc24:	lsr	r1, r1, #5
   3cc28:	orr	r0, r1, r0
   3cc2c:	ldr	r1, [r5]
   3cc30:	bic	r1, r1, #4194304	; 0x400000
   3cc34:	orr	r0, r1, r0, lsl #22
   3cc38:	uxtb	r1, r6
   3cc3c:	b	3cef4 <__assert_fail@plt+0x2a444>
   3cc40:	mov	r0, #2
   3cc44:	mov	r4, #0
   3cc48:	strb	r0, [r9, #4]
   3cc4c:	mov	r0, r4
   3cc50:	sub	sp, fp, #24
   3cc54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3cc58:	and	r0, r0, r1
   3cc5c:	orr	r4, r0, #1
   3cc60:	str	r4, [r5]
   3cc64:	ldr	r0, [r7, #80]	; 0x50
   3cc68:	cmp	r0, #2
   3cc6c:	blt	3ccb8 <__assert_fail@plt+0x2a208>
   3cc70:	ldr	r0, [r7, #8]
   3cc74:	ldr	r1, [r7, #40]	; 0x28
   3cc78:	ldr	r4, [r0, r1, lsl #2]
   3cc7c:	mov	r0, r4
   3cc80:	bl	12810 <iswalnum@plt>
   3cc84:	sub	r1, r4, #95	; 0x5f
   3cc88:	cmp	r0, #0
   3cc8c:	clz	r1, r1
   3cc90:	movwne	r0, #1
   3cc94:	lsr	r1, r1, #5
   3cc98:	orr	r0, r1, r0
   3cc9c:	ldr	r1, [r5]
   3cca0:	bic	r1, r1, #4194304	; 0x400000
   3cca4:	orr	r0, r1, r0, lsl #22
   3cca8:	b	3ccd8 <__assert_fail@plt+0x2a228>
   3ccac:	and	r0, r0, r1
   3ccb0:	orr	r0, r0, #36	; 0x24
   3ccb4:	b	3d098 <__assert_fail@plt+0x2a5e8>
   3ccb8:	bl	12768 <__ctype_b_loc@plt>
   3ccbc:	ldr	r0, [r0]
   3ccc0:	cmp	r6, #95	; 0x5f
   3ccc4:	add	r0, r0, r6, lsl #1
   3ccc8:	ldrh	r0, [r0]
   3cccc:	ubfx	r0, r0, #3, #1
   3ccd0:	movweq	r0, #1
   3ccd4:	orr	r0, r4, r0, lsl #22
   3ccd8:	sub	r1, r6, #10
   3ccdc:	mov	r4, #1
   3cce0:	str	r0, [r5]
   3cce4:	cmp	r1, #115	; 0x73
   3cce8:	bhi	3d30c <__assert_fail@plt+0x2a85c>
   3ccec:	add	r2, pc, #0
   3ccf0:	ldr	pc, [r2, r1, lsl #2]
   3ccf4:	andeq	ip, r3, r4, asr #29
   3ccf8:	andeq	sp, r3, ip, lsl #6
   3ccfc:	andeq	sp, r3, ip, lsl #6
   3cd00:	andeq	sp, r3, ip, lsl #6
   3cd04:	andeq	sp, r3, ip, lsl #6
   3cd08:	andeq	sp, r3, ip, lsl #6
   3cd0c:	andeq	sp, r3, ip, lsl #6
   3cd10:	andeq	sp, r3, ip, lsl #6
   3cd14:	andeq	sp, r3, ip, lsl #6
   3cd18:	andeq	sp, r3, ip, lsl #6
   3cd1c:	andeq	sp, r3, ip, lsl #6
   3cd20:	andeq	sp, r3, ip, lsl #6
   3cd24:	andeq	sp, r3, ip, lsl #6
   3cd28:	andeq	sp, r3, ip, lsl #6
   3cd2c:	andeq	sp, r3, ip, lsl #6
   3cd30:	andeq	sp, r3, ip, lsl #6
   3cd34:	andeq	sp, r3, ip, lsl #6
   3cd38:	andeq	sp, r3, ip, lsl #6
   3cd3c:	andeq	sp, r3, ip, lsl #6
   3cd40:	andeq	sp, r3, ip, lsl #6
   3cd44:	andeq	sp, r3, ip, lsl #6
   3cd48:	andeq	sp, r3, ip, lsl #6
   3cd4c:	andeq	sp, r3, ip, lsl #6
   3cd50:	andeq	sp, r3, ip, lsl #6
   3cd54:	andeq	sp, r3, ip, lsl #6
   3cd58:	andeq	sp, r3, ip, lsl #6
   3cd5c:	andeq	sp, r3, ip, lsr #1
   3cd60:	andeq	sp, r3, ip, lsl #6
   3cd64:	andeq	sp, r3, ip, lsl #6
   3cd68:	andeq	sp, r3, ip, lsl #6
   3cd6c:	andeq	sp, r3, r4, lsl #2
   3cd70:	andeq	sp, r3, r0, lsl r1
   3cd74:	andeq	sp, r3, ip, lsl r1
   3cd78:	andeq	sp, r3, r4, lsr #2
   3cd7c:	andeq	sp, r3, ip, lsl #6
   3cd80:	andeq	sp, r3, ip, lsl #6
   3cd84:	andeq	sp, r3, r4, lsr r1
   3cd88:	andeq	sp, r3, ip, lsl #6
   3cd8c:	andeq	sp, r3, ip, lsl #6
   3cd90:	andeq	sp, r3, ip, lsl #6
   3cd94:	andeq	sp, r3, ip, lsl #6
   3cd98:	andeq	sp, r3, ip, lsl #6
   3cd9c:	andeq	sp, r3, ip, lsl #6
   3cda0:	andeq	sp, r3, ip, lsl #6
   3cda4:	andeq	sp, r3, ip, lsl #6
   3cda8:	andeq	sp, r3, ip, lsl #6
   3cdac:	andeq	sp, r3, ip, lsl #6
   3cdb0:	andeq	sp, r3, ip, lsl #6
   3cdb4:	andeq	sp, r3, ip, lsl #6
   3cdb8:	andeq	sp, r3, ip, lsl #6
   3cdbc:	andeq	sp, r3, ip, lsl #6
   3cdc0:	andeq	sp, r3, ip, lsl #6
   3cdc4:	andeq	sp, r3, ip, lsl #6
   3cdc8:	andeq	sp, r3, ip, lsr r1
   3cdcc:	andeq	sp, r3, ip, lsl #6
   3cdd0:	andeq	sp, r3, ip, lsl #6
   3cdd4:	andeq	sp, r3, ip, lsl #6
   3cdd8:	andeq	sp, r3, ip, lsl #6
   3cddc:	andeq	sp, r3, ip, lsl #6
   3cde0:	andeq	sp, r3, ip, lsl #6
   3cde4:	andeq	sp, r3, ip, lsl #6
   3cde8:	andeq	sp, r3, ip, lsl #6
   3cdec:	andeq	sp, r3, ip, lsl #6
   3cdf0:	andeq	sp, r3, ip, lsl #6
   3cdf4:	andeq	sp, r3, ip, lsl #6
   3cdf8:	andeq	sp, r3, ip, lsl #6
   3cdfc:	andeq	sp, r3, ip, lsl #6
   3ce00:	andeq	sp, r3, ip, lsl #6
   3ce04:	andeq	sp, r3, ip, lsl #6
   3ce08:	andeq	sp, r3, ip, lsl #6
   3ce0c:	andeq	sp, r3, ip, lsl #6
   3ce10:	andeq	sp, r3, ip, lsl #6
   3ce14:	andeq	sp, r3, ip, lsl #6
   3ce18:	andeq	sp, r3, ip, lsl #6
   3ce1c:	andeq	sp, r3, ip, lsl #6
   3ce20:	andeq	sp, r3, ip, lsl #6
   3ce24:	andeq	sp, r3, ip, lsl #6
   3ce28:	andeq	sp, r3, ip, lsl #6
   3ce2c:	andeq	sp, r3, ip, lsl #6
   3ce30:	andeq	sp, r3, ip, lsl #6
   3ce34:	andeq	sp, r3, ip, lsl #6
   3ce38:	andeq	sp, r3, ip, asr #2
   3ce3c:	andeq	sp, r3, ip, lsl #6
   3ce40:	andeq	sp, r3, ip, lsl #6
   3ce44:	andeq	sp, r3, r4, asr r1
   3ce48:	andeq	sp, r3, ip, lsl #6
   3ce4c:	andeq	sp, r3, ip, lsl #6
   3ce50:	andeq	sp, r3, ip, lsl #6
   3ce54:	andeq	sp, r3, ip, lsl #6
   3ce58:	andeq	sp, r3, ip, lsl #6
   3ce5c:	andeq	sp, r3, ip, lsl #6
   3ce60:	andeq	sp, r3, ip, lsl #6
   3ce64:	andeq	sp, r3, ip, lsl #6
   3ce68:	andeq	sp, r3, ip, lsl #6
   3ce6c:	andeq	sp, r3, ip, lsl #6
   3ce70:	andeq	sp, r3, ip, lsl #6
   3ce74:	andeq	sp, r3, ip, lsl #6
   3ce78:	andeq	sp, r3, ip, lsl #6
   3ce7c:	andeq	sp, r3, ip, lsl #6
   3ce80:	andeq	sp, r3, ip, lsl #6
   3ce84:	andeq	sp, r3, ip, lsl #6
   3ce88:	andeq	sp, r3, ip, lsl #6
   3ce8c:	andeq	sp, r3, ip, lsl #6
   3ce90:	andeq	sp, r3, ip, lsl #6
   3ce94:	andeq	sp, r3, ip, lsl #6
   3ce98:	andeq	sp, r3, ip, lsl #6
   3ce9c:	andeq	sp, r3, ip, lsl #6
   3cea0:	andeq	sp, r3, ip, lsl #6
   3cea4:	andeq	sp, r3, ip, lsl #6
   3cea8:	andeq	sp, r3, ip, lsl #6
   3ceac:	andeq	sp, r3, ip, lsl #6
   3ceb0:	andeq	sp, r3, ip, lsl #6
   3ceb4:	andeq	sp, r3, ip, lsl #6
   3ceb8:	andeq	sp, r3, r4, lsl #3
   3cebc:	muleq	r3, r4, r1
   3cec0:	andeq	sp, r3, r8, lsr #3
   3cec4:	tst	r8, #2048	; 0x800
   3cec8:	bne	3d1a0 <__assert_fail@plt+0x2a6f0>
   3cecc:	b	3d30c <__assert_fail@plt+0x2a85c>
   3ced0:	bl	12768 <__ctype_b_loc@plt>
   3ced4:	ldr	r0, [r0]
   3ced8:	uxtb	r1, r6
   3cedc:	cmp	r1, #95	; 0x5f
   3cee0:	add	r0, r0, r1, lsl #1
   3cee4:	ldrh	r0, [r0]
   3cee8:	ubfx	r0, r0, #3, #1
   3ceec:	movweq	r0, #1
   3cef0:	orr	r0, r4, r0, lsl #22
   3cef4:	mvn	r2, #38	; 0x26
   3cef8:	mov	r4, #2
   3cefc:	str	r0, [r5]
   3cf00:	uxtab	r2, r2, r6
   3cf04:	cmp	r2, #86	; 0x56
   3cf08:	bhi	3d30c <__assert_fail@plt+0x2a85c>
   3cf0c:	add	r3, pc, #0
   3cf10:	ldr	pc, [r3, r2, lsl #2]
   3cf14:	andeq	sp, r3, r4, ror #3
   3cf18:	strdeq	sp, [r3], -r4
   3cf1c:	andeq	sp, r3, r4, lsl #4
   3cf20:	andeq	sp, r3, ip, lsl #6
   3cf24:	andeq	sp, r3, r4, lsl r2
   3cf28:	andeq	sp, r3, ip, lsl #6
   3cf2c:	andeq	sp, r3, ip, lsl #6
   3cf30:	andeq	sp, r3, ip, lsl #6
   3cf34:	andeq	sp, r3, ip, lsl #6
   3cf38:	andeq	sp, r3, ip, lsl #6
   3cf3c:	andeq	sp, r3, r0, ror r0
   3cf40:	andeq	sp, r3, r0, ror r0
   3cf44:	andeq	sp, r3, r0, ror r0
   3cf48:	andeq	sp, r3, r0, ror r0
   3cf4c:	andeq	sp, r3, r0, ror r0
   3cf50:	andeq	sp, r3, r0, ror r0
   3cf54:	andeq	sp, r3, r0, ror r0
   3cf58:	andeq	sp, r3, r0, ror r0
   3cf5c:	andeq	sp, r3, r0, ror r0
   3cf60:	andeq	sp, r3, ip, lsl #6
   3cf64:	andeq	sp, r3, ip, lsl #6
   3cf68:	andeq	sp, r3, ip, lsr #4
   3cf6c:	andeq	sp, r3, ip, lsl #6
   3cf70:	andeq	sp, r3, ip, lsr r2
   3cf74:	andeq	sp, r3, ip, asr #4
   3cf78:	andeq	sp, r3, ip, lsl #6
   3cf7c:	andeq	sp, r3, ip, lsl #6
   3cf80:	andeq	sp, r3, r4, ror #4
   3cf84:	andeq	sp, r3, ip, lsl #6
   3cf88:	andeq	sp, r3, ip, lsl #6
   3cf8c:	andeq	sp, r3, ip, lsl #6
   3cf90:	andeq	sp, r3, ip, lsl #6
   3cf94:	andeq	sp, r3, ip, lsl #6
   3cf98:	andeq	sp, r3, ip, lsl #6
   3cf9c:	andeq	sp, r3, ip, lsl #6
   3cfa0:	andeq	sp, r3, ip, lsl #6
   3cfa4:	andeq	sp, r3, ip, lsl #6
   3cfa8:	andeq	sp, r3, ip, lsl #6
   3cfac:	andeq	sp, r3, ip, lsl #6
   3cfb0:	andeq	sp, r3, ip, lsl #6
   3cfb4:	andeq	sp, r3, ip, lsl #6
   3cfb8:	andeq	sp, r3, ip, lsl #6
   3cfbc:	andeq	sp, r3, ip, lsl #6
   3cfc0:	andeq	sp, r3, ip, lsl #6
   3cfc4:	andeq	sp, r3, r4, ror r2
   3cfc8:	andeq	sp, r3, ip, lsl #6
   3cfcc:	andeq	sp, r3, ip, lsl #6
   3cfd0:	andeq	sp, r3, ip, lsl #6
   3cfd4:	andeq	sp, r3, r4, lsl #5
   3cfd8:	andeq	sp, r3, ip, lsl #6
   3cfdc:	andeq	sp, r3, ip, lsl #6
   3cfe0:	andeq	sp, r3, ip, lsl #6
   3cfe4:	andeq	sp, r3, ip, lsl #6
   3cfe8:	andeq	sp, r3, ip, lsl #6
   3cfec:	andeq	sp, r3, ip, lsl #6
   3cff0:	andeq	sp, r3, ip, lsl #6
   3cff4:	andeq	sp, r3, ip, lsl #6
   3cff8:	muleq	r3, r4, r2
   3cffc:	andeq	sp, r3, ip, lsl #6
   3d000:	andeq	sp, r3, r4, lsr #5
   3d004:	andeq	sp, r3, ip, lsl #6
   3d008:	andeq	sp, r3, ip, lsl #6
   3d00c:	andeq	sp, r3, ip, lsl #6
   3d010:	andeq	sp, r3, ip, lsl #6
   3d014:	andeq	sp, r3, ip, lsl #6
   3d018:	andeq	sp, r3, ip, lsl #6
   3d01c:	andeq	sp, r3, ip, lsl #6
   3d020:	andeq	sp, r3, ip, lsl #6
   3d024:	andeq	sp, r3, ip, lsl #6
   3d028:	andeq	sp, r3, ip, lsl #6
   3d02c:	andeq	sp, r3, ip, lsl #6
   3d030:	andeq	sp, r3, ip, lsl #6
   3d034:	andeq	sp, r3, ip, lsl #6
   3d038:	andeq	sp, r3, ip, lsl #6
   3d03c:	andeq	sp, r3, ip, lsl #6
   3d040:	andeq	sp, r3, ip, lsl #6
   3d044:			; <UNDEFINED> instruction: 0x0003d2b4
   3d048:	andeq	sp, r3, ip, lsl #6
   3d04c:	andeq	sp, r3, ip, lsl #6
   3d050:	andeq	sp, r3, ip, lsl #6
   3d054:	andeq	sp, r3, r4, asr #5
   3d058:	andeq	sp, r3, ip, lsl #6
   3d05c:	andeq	sp, r3, ip, lsl #6
   3d060:	andeq	sp, r3, ip, lsl #6
   3d064:	ldrdeq	sp, [r3], -r4
   3d068:	andeq	sp, r3, r8, ror #5
   3d06c:	strdeq	sp, [r3], -r4
   3d070:	tst	r8, #16384	; 0x4000
   3d074:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d078:	sub	r1, r1, #49	; 0x31
   3d07c:	mov	r2, #4
   3d080:	b	3d16c <__assert_fail@plt+0x2a6bc>
   3d084:	movw	r1, #65280	; 0xff00
   3d088:	movt	r1, #65439	; 0xff9f
   3d08c:	and	r0, r0, r1
   3d090:	orr	r0, r0, #1
   3d094:	orr	r0, r0, #2097152	; 0x200000
   3d098:	str	r0, [r5]
   3d09c:	mov	r4, #1
   3d0a0:	mov	r0, r4
   3d0a4:	sub	sp, fp, #24
   3d0a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d0ac:	tst	r8, #8
   3d0b0:	bne	3d0fc <__assert_fail@plt+0x2a64c>
   3d0b4:	ldr	r1, [r7, #40]	; 0x28
   3d0b8:	ldr	r2, [r7, #48]	; 0x30
   3d0bc:	add	r1, r1, #1
   3d0c0:	cmp	r1, r2
   3d0c4:	beq	3d0fc <__assert_fail@plt+0x2a64c>
   3d0c8:	str	r1, [r7, #40]	; 0x28
   3d0cc:	mov	r0, sp
   3d0d0:	mov	r1, r7
   3d0d4:	mov	r2, r8
   3d0d8:	bl	3cb38 <__assert_fail@plt+0x2a088>
   3d0dc:	ldr	r0, [r7, #40]	; 0x28
   3d0e0:	sub	r0, r0, #1
   3d0e4:	str	r0, [r7, #40]	; 0x28
   3d0e8:	ldrb	r0, [sp, #4]
   3d0ec:	sub	r0, r0, #9
   3d0f0:	cmp	r0, #1
   3d0f4:	bhi	3d30c <__assert_fail@plt+0x2a85c>
   3d0f8:	ldr	r0, [r5]
   3d0fc:	mov	r1, #32
   3d100:	b	3d168 <__assert_fail@plt+0x2a6b8>
   3d104:	tst	r8, #8192	; 0x2000
   3d108:	bne	3d1fc <__assert_fail@plt+0x2a74c>
   3d10c:	b	3d30c <__assert_fail@plt+0x2a85c>
   3d110:	tst	r8, #8192	; 0x2000
   3d114:	bne	3d20c <__assert_fail@plt+0x2a75c>
   3d118:	b	3d30c <__assert_fail@plt+0x2a85c>
   3d11c:	mov	r1, #11
   3d120:	b	3d304 <__assert_fail@plt+0x2a854>
   3d124:	movw	r1, #1026	; 0x402
   3d128:	tst	r8, r1
   3d12c:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d130:	b	3d224 <__assert_fail@plt+0x2a774>
   3d134:	mov	r1, #5
   3d138:	b	3d304 <__assert_fail@plt+0x2a854>
   3d13c:	movw	r1, #1026	; 0x402
   3d140:	tst	r8, r1
   3d144:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d148:	b	3d25c <__assert_fail@plt+0x2a7ac>
   3d14c:	mov	r1, #20
   3d150:	b	3d304 <__assert_fail@plt+0x2a854>
   3d154:	movw	r1, #8
   3d158:	movt	r1, #128	; 0x80
   3d15c:	tst	r8, r1
   3d160:	beq	3d1b8 <__assert_fail@plt+0x2a708>
   3d164:	mov	r1, #16
   3d168:	mov	r2, #12
   3d16c:	bfi	r0, r2, #0, #8
   3d170:	str	r1, [r9]
   3d174:	str	r0, [r9, #4]
   3d178:	mov	r0, r4
   3d17c:	sub	sp, fp, #24
   3d180:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d184:	and	r1, r8, #4608	; 0x1200
   3d188:	cmp	r1, #4608	; 0x1200
   3d18c:	beq	3d2e0 <__assert_fail@plt+0x2a830>
   3d190:	b	3d30c <__assert_fail@plt+0x2a85c>
   3d194:	and	r1, r8, #33792	; 0x8400
   3d198:	cmp	r1, #32768	; 0x8000
   3d19c:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d1a0:	mov	r1, #10
   3d1a4:	b	3d304 <__assert_fail@plt+0x2a854>
   3d1a8:	and	r1, r8, #4608	; 0x1200
   3d1ac:	cmp	r1, #4608	; 0x1200
   3d1b0:	beq	3d300 <__assert_fail@plt+0x2a850>
   3d1b4:	b	3d30c <__assert_fail@plt+0x2a85c>
   3d1b8:	ldr	r1, [r7, #40]	; 0x28
   3d1bc:	cmp	r1, #0
   3d1c0:	beq	3d164 <__assert_fail@plt+0x2a6b4>
   3d1c4:	tst	r8, #2048	; 0x800
   3d1c8:	beq	3d30c <__assert_fail@plt+0x2a85c>
   3d1cc:	ldr	r2, [r7, #4]
   3d1d0:	add	r1, r1, r2
   3d1d4:	ldrb	r1, [r1, #-1]
   3d1d8:	cmp	r1, #10
   3d1dc:	beq	3d164 <__assert_fail@plt+0x2a6b4>
   3d1e0:	b	3d30c <__assert_fail@plt+0x2a85c>
   3d1e4:	tst	r8, #524288	; 0x80000
   3d1e8:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d1ec:	mov	r1, #128	; 0x80
   3d1f0:	b	3d168 <__assert_fail@plt+0x2a6b8>
   3d1f4:	tst	r8, #8192	; 0x2000
   3d1f8:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d1fc:	mov	r1, #8
   3d200:	b	3d304 <__assert_fail@plt+0x2a854>
   3d204:	tst	r8, #8192	; 0x2000
   3d208:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d20c:	mov	r1, #9
   3d210:	b	3d304 <__assert_fail@plt+0x2a854>
   3d214:	movw	r1, #1026	; 0x402
   3d218:	and	r1, r8, r1
   3d21c:	cmp	r1, #2
   3d220:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d224:	mov	r1, #18
   3d228:	b	3d304 <__assert_fail@plt+0x2a854>
   3d22c:	tst	r8, #524288	; 0x80000
   3d230:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d234:	mov	r1, #6
   3d238:	b	3d168 <__assert_fail@plt+0x2a6b8>
   3d23c:	tst	r8, #524288	; 0x80000
   3d240:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d244:	mov	r1, #9
   3d248:	b	3d168 <__assert_fail@plt+0x2a6b8>
   3d24c:	movw	r1, #1026	; 0x402
   3d250:	and	r1, r8, r1
   3d254:	cmp	r1, #2
   3d258:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d25c:	mov	r1, #19
   3d260:	b	3d304 <__assert_fail@plt+0x2a854>
   3d264:	tst	r8, #524288	; 0x80000
   3d268:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d26c:	mov	r1, #512	; 0x200
   3d270:	b	3d168 <__assert_fail@plt+0x2a6b8>
   3d274:	tst	r8, #524288	; 0x80000
   3d278:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d27c:	mov	r1, #35	; 0x23
   3d280:	b	3d304 <__assert_fail@plt+0x2a854>
   3d284:	tst	r8, #524288	; 0x80000
   3d288:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d28c:	mov	r1, #33	; 0x21
   3d290:	b	3d304 <__assert_fail@plt+0x2a854>
   3d294:	tst	r8, #524288	; 0x80000
   3d298:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d29c:	mov	r1, #64	; 0x40
   3d2a0:	b	3d168 <__assert_fail@plt+0x2a6b8>
   3d2a4:	tst	r8, #524288	; 0x80000
   3d2a8:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d2ac:	mov	r1, #256	; 0x100
   3d2b0:	b	3d168 <__assert_fail@plt+0x2a6b8>
   3d2b4:	tst	r8, #524288	; 0x80000
   3d2b8:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d2bc:	mov	r1, #34	; 0x22
   3d2c0:	b	3d304 <__assert_fail@plt+0x2a854>
   3d2c4:	tst	r8, #524288	; 0x80000
   3d2c8:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d2cc:	mov	r1, #32
   3d2d0:	b	3d304 <__assert_fail@plt+0x2a854>
   3d2d4:	and	r1, r8, #4608	; 0x1200
   3d2d8:	cmp	r1, #512	; 0x200
   3d2dc:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d2e0:	mov	r1, #23
   3d2e4:	b	3d304 <__assert_fail@plt+0x2a854>
   3d2e8:	tst	r8, #33792	; 0x8400
   3d2ec:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d2f0:	b	3d1a0 <__assert_fail@plt+0x2a6f0>
   3d2f4:	and	r1, r8, #4608	; 0x1200
   3d2f8:	cmp	r1, #512	; 0x200
   3d2fc:	bne	3d30c <__assert_fail@plt+0x2a85c>
   3d300:	mov	r1, #24
   3d304:	bfi	r0, r1, #0, #8
   3d308:	str	r0, [r5]
   3d30c:	mov	r0, r4
   3d310:	sub	sp, fp, #24
   3d314:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d318:	cmp	r3, #2
   3d31c:	blt	3d34c <__assert_fail@plt+0x2a89c>
   3d320:	ldr	r3, [r7, #8]
   3d324:	ldr	r4, [r3, r2, lsl #2]
   3d328:	cmn	r4, #1
   3d32c:	beq	3cbd8 <__assert_fail@plt+0x2a128>
   3d330:	ldr	r4, [r7, #28]
   3d334:	add	r6, r6, #2
   3d338:	cmp	r4, r6
   3d33c:	beq	3d34c <__assert_fail@plt+0x2a89c>
   3d340:	ldr	r3, [r3, r6, lsl #2]
   3d344:	cmn	r3, #1
   3d348:	beq	3cbd8 <__assert_fail@plt+0x2a128>
   3d34c:	ldrb	r3, [r7, #76]	; 0x4c
   3d350:	mov	r6, r2
   3d354:	cmp	r3, #0
   3d358:	beq	3d364 <__assert_fail@plt+0x2a8b4>
   3d35c:	ldr	r6, [r7, #12]
   3d360:	ldr	r6, [r6, r2, lsl #2]
   3d364:	ldr	r4, [r7, #24]
   3d368:	ldr	ip, [r7]
   3d36c:	cmp	r3, #0
   3d370:	add	r6, r4, r6
   3d374:	add	r6, ip, r6
   3d378:	ldrsb	r6, [r6]
   3d37c:	beq	3cbe0 <__assert_fail@plt+0x2a130>
   3d380:	cmn	r6, #1
   3d384:	ble	3cbd8 <__assert_fail@plt+0x2a128>
   3d388:	b	3cbe0 <__assert_fail@plt+0x2a130>
   3d38c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d390:	add	fp, sp, #28
   3d394:	sub	sp, sp, #12
   3d398:	mov	r4, r1
   3d39c:	ldr	r8, [r1]
   3d3a0:	ldr	r1, [fp, #8]
   3d3a4:	ldr	r5, [fp, #12]
   3d3a8:	mov	r7, r2
   3d3ac:	str	r0, [sp, #8]
   3d3b0:	mov	sl, r3
   3d3b4:	mov	r9, r1
   3d3b8:	str	r1, [sp]
   3d3bc:	mov	r1, r4
   3d3c0:	str	r5, [sp, #4]
   3d3c4:	bl	3d7f0 <__assert_fail@plt+0x2ad40>
   3d3c8:	mov	r3, r5
   3d3cc:	mov	r5, r0
   3d3d0:	mov	r0, #0
   3d3d4:	cmp	r5, #0
   3d3d8:	bne	3d3e8 <__assert_fail@plt+0x2a938>
   3d3dc:	ldr	r1, [r3]
   3d3e0:	cmp	r1, #0
   3d3e4:	bne	3d5ec <__assert_fail@plt+0x2ab3c>
   3d3e8:	cmp	r9, #0
   3d3ec:	beq	3d4e0 <__assert_fail@plt+0x2aa30>
   3d3f0:	ldrb	r0, [r7, #4]
   3d3f4:	orr	r1, r0, #8
   3d3f8:	cmp	r1, #10
   3d3fc:	cmpne	r0, #9
   3d400:	beq	3d5e8 <__assert_fail@plt+0x2ab38>
   3d404:	ldr	r0, [sp, #8]
   3d408:	str	r3, [sp, #4]
   3d40c:	mov	r1, r4
   3d410:	mov	r2, r7
   3d414:	mov	r3, sl
   3d418:	str	r9, [sp]
   3d41c:	bl	3d7f0 <__assert_fail@plt+0x2ad40>
   3d420:	ldr	r3, [fp, #12]
   3d424:	cmp	r5, #0
   3d428:	mov	r2, r5
   3d42c:	mov	r6, r0
   3d430:	movwne	r2, #1
   3d434:	cmp	r0, #0
   3d438:	bne	3d448 <__assert_fail@plt+0x2a998>
   3d43c:	ldr	r1, [r3]
   3d440:	cmp	r1, #0
   3d444:	bne	3d5f4 <__assert_fail@plt+0x2ab44>
   3d448:	cmp	r5, #0
   3d44c:	cmpne	r6, #0
   3d450:	bne	3d460 <__assert_fail@plt+0x2a9b0>
   3d454:	cmp	r5, #0
   3d458:	moveq	r5, r6
   3d45c:	b	3d3f0 <__assert_fail@plt+0x2a940>
   3d460:	ldr	r1, [r8, #64]	; 0x40
   3d464:	cmp	r1, #31
   3d468:	beq	3d4b4 <__assert_fail@plt+0x2aa04>
   3d46c:	ldr	r0, [r8, #56]	; 0x38
   3d470:	add	r0, r0, r1, lsl #5
   3d474:	add	r2, r1, #1
   3d478:	mov	r1, #0
   3d47c:	str	r2, [r8, #64]	; 0x40
   3d480:	str	r1, [r0, #4]!
   3d484:	stmib	r0, {r5, r6}
   3d488:	str	r1, [r0, #12]
   3d48c:	str	r1, [r0, #16]
   3d490:	str	r1, [r0, #20]
   3d494:	mov	r1, #16
   3d498:	str	r1, [r0, #24]
   3d49c:	mvn	r1, #0
   3d4a0:	str	r1, [r0, #28]
   3d4a4:	str	r0, [r5]
   3d4a8:	str	r0, [r6]
   3d4ac:	mov	r5, r0
   3d4b0:	b	3d3f0 <__assert_fail@plt+0x2a940>
   3d4b4:	mov	r0, #996	; 0x3e4
   3d4b8:	bl	35350 <__assert_fail@plt+0x228a0>
   3d4bc:	cmp	r0, #0
   3d4c0:	beq	3d6a0 <__assert_fail@plt+0x2abf0>
   3d4c4:	ldr	r1, [r8, #56]	; 0x38
   3d4c8:	ldr	r3, [fp, #12]
   3d4cc:	str	r1, [r0]
   3d4d0:	mov	r1, #0
   3d4d4:	str	r1, [r8, #64]	; 0x40
   3d4d8:	str	r0, [r8, #56]	; 0x38
   3d4dc:	b	3d470 <__assert_fail@plt+0x2a9c0>
   3d4e0:	mov	r9, #0
   3d4e4:	ldrb	r0, [r7, #4]
   3d4e8:	orr	r0, r0, #8
   3d4ec:	cmp	r0, #10
   3d4f0:	bne	3d510 <__assert_fail@plt+0x2aa60>
   3d4f4:	b	3d5e8 <__assert_fail@plt+0x2ab38>
   3d4f8:	cmp	r5, #0
   3d4fc:	moveq	r5, r6
   3d500:	ldrb	r0, [r7, #4]
   3d504:	orr	r0, r0, #8
   3d508:	cmp	r0, #10
   3d50c:	beq	3d5e8 <__assert_fail@plt+0x2ab38>
   3d510:	ldr	r0, [sp, #8]
   3d514:	str	r3, [sp, #4]
   3d518:	mov	r1, r4
   3d51c:	mov	r2, r7
   3d520:	mov	r3, sl
   3d524:	str	r9, [sp]
   3d528:	bl	3d7f0 <__assert_fail@plt+0x2ad40>
   3d52c:	ldr	r3, [fp, #12]
   3d530:	cmp	r5, #0
   3d534:	mov	r2, r5
   3d538:	mov	r6, r0
   3d53c:	movwne	r2, #1
   3d540:	cmp	r0, #0
   3d544:	bne	3d554 <__assert_fail@plt+0x2aaa4>
   3d548:	ldr	r1, [r3]
   3d54c:	cmp	r1, #0
   3d550:	bne	3d5f4 <__assert_fail@plt+0x2ab44>
   3d554:	cmp	r5, #0
   3d558:	cmpne	r6, #0
   3d55c:	beq	3d4f8 <__assert_fail@plt+0x2aa48>
   3d560:	ldr	r1, [r8, #64]	; 0x40
   3d564:	cmp	r1, #31
   3d568:	beq	3d5bc <__assert_fail@plt+0x2ab0c>
   3d56c:	ldr	r0, [r8, #56]	; 0x38
   3d570:	add	r0, r0, r1, lsl #5
   3d574:	add	r2, r1, #1
   3d578:	mov	r1, #16
   3d57c:	str	r2, [r8, #64]	; 0x40
   3d580:	str	r9, [r0, #4]!
   3d584:	stmib	r0, {r5, r6, r9}
   3d588:	str	r9, [r0, #16]
   3d58c:	str	r9, [r0, #20]
   3d590:	str	r1, [r0, #24]
   3d594:	mvn	r1, #0
   3d598:	str	r1, [r0, #28]
   3d59c:	str	r0, [r5]
   3d5a0:	str	r0, [r6]
   3d5a4:	mov	r5, r0
   3d5a8:	ldrb	r0, [r7, #4]
   3d5ac:	orr	r0, r0, #8
   3d5b0:	cmp	r0, #10
   3d5b4:	bne	3d510 <__assert_fail@plt+0x2aa60>
   3d5b8:	b	3d5e8 <__assert_fail@plt+0x2ab38>
   3d5bc:	mov	r0, #996	; 0x3e4
   3d5c0:	bl	35350 <__assert_fail@plt+0x228a0>
   3d5c4:	cmp	r0, #0
   3d5c8:	beq	3d6a0 <__assert_fail@plt+0x2abf0>
   3d5cc:	ldr	r1, [r8, #56]	; 0x38
   3d5d0:	ldr	r3, [fp, #12]
   3d5d4:	str	r1, [r0]
   3d5d8:	mov	r1, #0
   3d5dc:	str	r1, [r8, #64]	; 0x40
   3d5e0:	str	r0, [r8, #56]	; 0x38
   3d5e4:	b	3d570 <__assert_fail@plt+0x2aac0>
   3d5e8:	mov	r0, r5
   3d5ec:	sub	sp, fp, #28
   3d5f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d5f4:	mov	r0, #0
   3d5f8:	cmp	r2, #0
   3d5fc:	beq	3d5ec <__assert_fail@plt+0x2ab3c>
   3d600:	movw	r6, #255	; 0xff
   3d604:	movt	r6, #4
   3d608:	mov	r7, r5
   3d60c:	ldr	r5, [r5, #4]
   3d610:	cmp	r5, #0
   3d614:	bne	3d608 <__assert_fail@plt+0x2ab58>
   3d618:	ldr	r5, [r7, #8]
   3d61c:	cmp	r5, #0
   3d620:	bne	3d608 <__assert_fail@plt+0x2ab58>
   3d624:	ldr	r1, [r7, #24]
   3d628:	and	r1, r1, r6
   3d62c:	cmp	r1, #3
   3d630:	beq	3d664 <__assert_fail@plt+0x2abb4>
   3d634:	cmp	r1, #6
   3d638:	bne	3d674 <__assert_fail@plt+0x2abc4>
   3d63c:	ldr	r4, [r7, #20]
   3d640:	ldr	r0, [r4]
   3d644:	bl	32910 <__assert_fail@plt+0x1fe60>
   3d648:	ldr	r0, [r4, #4]
   3d64c:	bl	32910 <__assert_fail@plt+0x1fe60>
   3d650:	ldr	r0, [r4, #8]
   3d654:	bl	32910 <__assert_fail@plt+0x1fe60>
   3d658:	ldr	r0, [r4, #12]
   3d65c:	bl	32910 <__assert_fail@plt+0x1fe60>
   3d660:	b	3d668 <__assert_fail@plt+0x2abb8>
   3d664:	ldr	r4, [r7, #20]
   3d668:	mov	r0, r4
   3d66c:	bl	32910 <__assert_fail@plt+0x1fe60>
   3d670:	mov	r0, #0
   3d674:	ldr	r1, [r7]
   3d678:	cmp	r1, #0
   3d67c:	beq	3d5ec <__assert_fail@plt+0x2ab3c>
   3d680:	ldr	r5, [r1, #8]
   3d684:	cmp	r5, r7
   3d688:	mov	r7, r1
   3d68c:	beq	3d624 <__assert_fail@plt+0x2ab74>
   3d690:	cmp	r5, #0
   3d694:	mov	r7, r1
   3d698:	beq	3d624 <__assert_fail@plt+0x2ab74>
   3d69c:	b	3d608 <__assert_fail@plt+0x2ab58>
   3d6a0:	ldr	r1, [fp, #12]
   3d6a4:	movw	r8, #255	; 0xff
   3d6a8:	movt	r8, #4
   3d6ac:	mov	r7, r6
   3d6b0:	ldr	r6, [r6, #4]
   3d6b4:	cmp	r6, #0
   3d6b8:	bne	3d6ac <__assert_fail@plt+0x2abfc>
   3d6bc:	ldr	r6, [r7, #8]
   3d6c0:	cmp	r6, #0
   3d6c4:	bne	3d6ac <__assert_fail@plt+0x2abfc>
   3d6c8:	ldr	r0, [r7, #24]
   3d6cc:	and	r0, r0, r8
   3d6d0:	cmp	r0, #3
   3d6d4:	beq	3d708 <__assert_fail@plt+0x2ac58>
   3d6d8:	cmp	r0, #6
   3d6dc:	bne	3d718 <__assert_fail@plt+0x2ac68>
   3d6e0:	ldr	r4, [r7, #20]
   3d6e4:	ldr	r0, [r4]
   3d6e8:	bl	32910 <__assert_fail@plt+0x1fe60>
   3d6ec:	ldr	r0, [r4, #4]
   3d6f0:	bl	32910 <__assert_fail@plt+0x1fe60>
   3d6f4:	ldr	r0, [r4, #8]
   3d6f8:	bl	32910 <__assert_fail@plt+0x1fe60>
   3d6fc:	ldr	r0, [r4, #12]
   3d700:	bl	32910 <__assert_fail@plt+0x1fe60>
   3d704:	b	3d70c <__assert_fail@plt+0x2ac5c>
   3d708:	ldr	r4, [r7, #20]
   3d70c:	mov	r0, r4
   3d710:	bl	32910 <__assert_fail@plt+0x1fe60>
   3d714:	ldr	r1, [fp, #12]
   3d718:	ldr	r0, [r7]
   3d71c:	cmp	r0, #0
   3d720:	beq	3d744 <__assert_fail@plt+0x2ac94>
   3d724:	ldr	r6, [r0, #8]
   3d728:	cmp	r6, r7
   3d72c:	mov	r7, r0
   3d730:	beq	3d6c8 <__assert_fail@plt+0x2ac18>
   3d734:	cmp	r6, #0
   3d738:	mov	r7, r0
   3d73c:	beq	3d6c8 <__assert_fail@plt+0x2ac18>
   3d740:	b	3d6ac <__assert_fail@plt+0x2abfc>
   3d744:	mov	r6, r5
   3d748:	ldr	r5, [r5, #4]
   3d74c:	cmp	r5, #0
   3d750:	bne	3d744 <__assert_fail@plt+0x2ac94>
   3d754:	ldr	r5, [r6, #8]
   3d758:	cmp	r5, #0
   3d75c:	bne	3d744 <__assert_fail@plt+0x2ac94>
   3d760:	ldr	r0, [r6, #24]
   3d764:	and	r0, r0, r8
   3d768:	cmp	r0, #3
   3d76c:	beq	3d7a0 <__assert_fail@plt+0x2acf0>
   3d770:	cmp	r0, #6
   3d774:	bne	3d7b0 <__assert_fail@plt+0x2ad00>
   3d778:	ldr	r4, [r6, #20]
   3d77c:	ldr	r0, [r4]
   3d780:	bl	32910 <__assert_fail@plt+0x1fe60>
   3d784:	ldr	r0, [r4, #4]
   3d788:	bl	32910 <__assert_fail@plt+0x1fe60>
   3d78c:	ldr	r0, [r4, #8]
   3d790:	bl	32910 <__assert_fail@plt+0x1fe60>
   3d794:	ldr	r0, [r4, #12]
   3d798:	bl	32910 <__assert_fail@plt+0x1fe60>
   3d79c:	b	3d7a4 <__assert_fail@plt+0x2acf4>
   3d7a0:	ldr	r4, [r6, #20]
   3d7a4:	mov	r0, r4
   3d7a8:	bl	32910 <__assert_fail@plt+0x1fe60>
   3d7ac:	ldr	r1, [fp, #12]
   3d7b0:	ldr	r0, [r6]
   3d7b4:	cmp	r0, #0
   3d7b8:	beq	3d7dc <__assert_fail@plt+0x2ad2c>
   3d7bc:	ldr	r5, [r0, #8]
   3d7c0:	cmp	r5, r6
   3d7c4:	mov	r6, r0
   3d7c8:	beq	3d760 <__assert_fail@plt+0x2acb0>
   3d7cc:	cmp	r5, #0
   3d7d0:	mov	r6, r0
   3d7d4:	beq	3d760 <__assert_fail@plt+0x2acb0>
   3d7d8:	b	3d744 <__assert_fail@plt+0x2ac94>
   3d7dc:	mov	r0, #12
   3d7e0:	str	r0, [r1]
   3d7e4:	mov	r0, #0
   3d7e8:	sub	sp, fp, #28
   3d7ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d7f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d7f4:	add	fp, sp, #28
   3d7f8:	sub	sp, sp, #156	; 0x9c
   3d7fc:	mov	r5, r0
   3d800:	mov	lr, r2
   3d804:	ldr	r0, [r2, #4]
   3d808:	ldr	r2, [fp, #12]
   3d80c:	mov	r7, r1
   3d810:	mvn	r1, #0
   3d814:	mov	r9, #0
   3d818:	mov	ip, r3
   3d81c:	ldr	sl, [r7]
   3d820:	str	r2, [sp, #20]
   3d824:	uxtab	r1, r1, r0
   3d828:	ldr	r6, [fp, #8]
   3d82c:	add	r2, pc, #12
   3d830:	str	r5, [sp, #28]
   3d834:	str	r3, [sp, #48]	; 0x30
   3d838:	str	lr, [sp, #44]	; 0x2c
   3d83c:	ldr	pc, [r2, r1, lsl #2]
   3d840:	andeq	sp, r3, r8, asr fp
   3d844:	andeq	pc, r3, r8, lsr #17
   3d848:	andeq	pc, r3, ip, lsr pc	; <UNPREDICTABLE>
   3d84c:	andeq	sp, r3, r0, lsr #26
   3d850:	andeq	sp, r3, r0, lsr #27
   3d854:	andeq	pc, r3, ip, lsr pc	; <UNPREDICTABLE>
   3d858:	andeq	pc, r3, ip, lsr pc	; <UNPREDICTABLE>
   3d85c:	andeq	sp, r3, r8, lsl #28
   3d860:	strdeq	sp, [r3], -r0
   3d864:	andeq	pc, r3, r8, lsr #17
   3d868:	andeq	sp, r3, r0, ror #17
   3d86c:	andeq	sp, r3, r4, ror #19
   3d870:	andeq	pc, r3, ip, lsr pc	; <UNPREDICTABLE>
   3d874:	andeq	pc, r3, ip, lsr pc	; <UNPREDICTABLE>
   3d878:	andeq	pc, r3, ip, lsr pc	; <UNPREDICTABLE>
   3d87c:	andeq	pc, r3, ip, lsr pc	; <UNPREDICTABLE>
   3d880:	andeq	pc, r3, ip, lsr pc	; <UNPREDICTABLE>
   3d884:	andeq	sp, r3, r0, ror #17
   3d888:	andeq	sp, r3, r0, ror #17
   3d88c:	andeq	sp, r3, r4, ror #21
   3d890:	andeq	pc, r3, ip, lsr pc	; <UNPREDICTABLE>
   3d894:	andeq	pc, r3, ip, lsr pc	; <UNPREDICTABLE>
   3d898:	andeq	sp, r3, ip, lsl #29
   3d89c:	andeq	sp, r3, r0, lsl #18
   3d8a0:	andeq	pc, r3, ip, lsr pc	; <UNPREDICTABLE>
   3d8a4:	andeq	pc, r3, ip, lsr pc	; <UNPREDICTABLE>
   3d8a8:	andeq	pc, r3, ip, lsr pc	; <UNPREDICTABLE>
   3d8ac:	andeq	pc, r3, ip, lsr pc	; <UNPREDICTABLE>
   3d8b0:	andeq	pc, r3, ip, lsr pc	; <UNPREDICTABLE>
   3d8b4:	andeq	pc, r3, ip, lsr pc	; <UNPREDICTABLE>
   3d8b8:	andeq	pc, r3, ip, lsr pc	; <UNPREDICTABLE>
   3d8bc:	andeq	sp, r3, ip, asr r9
   3d8c0:	andeq	sp, r3, ip, asr r9
   3d8c4:	andeq	sp, r3, ip, ror r9
   3d8c8:	andeq	sp, r3, ip, ror r9
   3d8cc:	muleq	r3, ip, lr
   3d8d0:	andeq	r0, r0, r0
   3d8d4:	mvnseq	r0, #0
   3d8d8:			; <UNDEFINED> instruction: 0x87fffffe
   3d8dc:			; <UNDEFINED> instruction: 0x07fffffe
   3d8e0:	tst	ip, #32
   3d8e4:	bne	3de94 <__assert_fail@plt+0x2b3e4>
   3d8e8:	tst	ip, #16
   3d8ec:	bne	3deac <__assert_fail@plt+0x2b3fc>
   3d8f0:	tst	ip, #131072	; 0x20000
   3d8f4:	uxtbeq	r1, r0
   3d8f8:	cmpeq	r1, #9
   3d8fc:	beq	3deec <__assert_fail@plt+0x2b43c>
   3d900:	mov	r1, #1
   3d904:	bfi	r0, r1, #0, #8
   3d908:	str	r0, [lr, #4]
   3d90c:	ldr	r1, [sl, #64]	; 0x40
   3d910:	cmp	r1, #31
   3d914:	beq	3fa64 <__assert_fail@plt+0x2cfb4>
   3d918:	ldr	r0, [sl, #56]	; 0x38
   3d91c:	add	r7, r0, r1, lsl #5
   3d920:	add	r2, r1, #1
   3d924:	mov	r0, #0
   3d928:	mvn	r3, #0
   3d92c:	str	r2, [sl, #64]	; 0x40
   3d930:	str	r0, [r7, #4]!
   3d934:	str	r0, [r7, #8]
   3d938:	str	r0, [r7, #4]
   3d93c:	ldm	lr, {r1, r2}
   3d940:	str	r3, [r7, #28]
   3d944:	str	r0, [r7, #16]
   3d948:	str	r0, [r7, #12]
   3d94c:	bic	r0, r2, #786432	; 0xc0000
   3d950:	str	r1, [r7, #20]
   3d954:	str	r0, [r7, #24]
   3d958:	b	3e948 <__assert_fail@plt+0x2be98>
   3d95c:	mvn	r2, #32
   3d960:	ldr	r1, [r5, #64]	; 0x40
   3d964:	movw	r3, #12708	; 0x31a4
   3d968:	uxtab	r0, r2, r0
   3d96c:	movw	r2, #12702	; 0x319e
   3d970:	movt	r3, #5
   3d974:	movt	r2, #5
   3d978:	b	3d998 <__assert_fail@plt+0x2aee8>
   3d97c:	mvn	r2, #34	; 0x22
   3d980:	ldr	r1, [r5, #64]	; 0x40
   3d984:	movw	r3, #61103	; 0xeeaf
   3d988:	uxtab	r0, r2, r0
   3d98c:	movw	r2, #12710	; 0x31a6
   3d990:	movt	r3, #4
   3d994:	movt	r2, #5
   3d998:	clz	r0, r0
   3d99c:	lsr	r0, r0, #5
   3d9a0:	str	r0, [sp]
   3d9a4:	ldr	r4, [sp, #20]
   3d9a8:	str	r4, [sp, #4]
   3d9ac:	mov	r0, sl
   3d9b0:	bl	3ff3c <__assert_fail@plt+0x2d48c>
   3d9b4:	mov	r7, r0
   3d9b8:	cmp	r0, #0
   3d9bc:	bne	3d9d8 <__assert_fail@plt+0x2af28>
   3d9c0:	ldr	r0, [r4]
   3d9c4:	cmp	r0, #0
   3d9c8:	ldr	ip, [sp, #48]	; 0x30
   3d9cc:	ldr	lr, [sp, #44]	; 0x2c
   3d9d0:	beq	3e948 <__assert_fail@plt+0x2be98>
   3d9d4:	b	3f8a8 <__assert_fail@plt+0x2cdf8>
   3d9d8:	ldr	ip, [sp, #48]	; 0x30
   3d9dc:	ldr	lr, [sp, #44]	; 0x2c
   3d9e0:	b	3e948 <__assert_fail@plt+0x2be98>
   3d9e4:	ldr	r0, [lr]
   3d9e8:	movw	r1, #783	; 0x30f
   3d9ec:	tst	r0, r1
   3d9f0:	beq	3da38 <__assert_fail@plt+0x2af88>
   3d9f4:	ldrb	r0, [sl, #88]	; 0x58
   3d9f8:	tst	r0, #16
   3d9fc:	bne	3da34 <__assert_fail@plt+0x2af84>
   3da00:	orr	r1, r0, #16
   3da04:	tst	r0, #8
   3da08:	strb	r1, [sl, #88]	; 0x58
   3da0c:	bne	3fd04 <__assert_fail@plt+0x2d254>
   3da10:	sub	r1, pc, #328	; 0x148
   3da14:	tst	r0, #4
   3da18:	vld1.64	{d16-d17}, [r1 :128]
   3da1c:	add	r1, sl, #96	; 0x60
   3da20:	vst1.32	{d16-d17}, [r1]
   3da24:	beq	3fd10 <__assert_fail@plt+0x2d260>
   3da28:	vmov.i32	q8, #0	; 0x00000000
   3da2c:	add	r0, sl, #112	; 0x70
   3da30:	vst1.32	{d16-d17}, [r0]
   3da34:	ldr	r0, [lr]
   3da38:	cmp	r0, #512	; 0x200
   3da3c:	beq	3e734 <__assert_fail@plt+0x2bc84>
   3da40:	cmp	r0, #256	; 0x100
   3da44:	bne	3e84c <__assert_fail@plt+0x2bd9c>
   3da48:	mov	r0, #6
   3da4c:	str	r0, [lr]
   3da50:	ldr	r1, [sl, #64]	; 0x40
   3da54:	cmp	r1, #31
   3da58:	beq	3fc64 <__assert_fail@plt+0x2d1b4>
   3da5c:	ldr	r0, [sl, #56]	; 0x38
   3da60:	add	r4, r0, r1, lsl #5
   3da64:	add	r2, r1, #1
   3da68:	mov	r0, #0
   3da6c:	mvn	r3, #0
   3da70:	str	r2, [sl, #64]	; 0x40
   3da74:	str	r0, [r4, #4]!
   3da78:	str	r0, [r4, #8]
   3da7c:	str	r0, [r4, #4]
   3da80:	ldm	lr, {r1, r2}
   3da84:	str	r3, [r4, #28]
   3da88:	str	r0, [r4, #16]
   3da8c:	str	r0, [r4, #12]
   3da90:	bic	r0, r2, #786432	; 0xc0000
   3da94:	str	r1, [r4, #20]
   3da98:	str	r0, [r4, #24]
   3da9c:	mov	r0, #9
   3daa0:	str	r0, [lr]
   3daa4:	ldr	r1, [sl, #64]	; 0x40
   3daa8:	cmp	r1, #31
   3daac:	bne	3e79c <__assert_fail@plt+0x2bcec>
   3dab0:	mov	r0, #996	; 0x3e4
   3dab4:	bl	35350 <__assert_fail@plt+0x228a0>
   3dab8:	cmp	r0, #0
   3dabc:	beq	3fda0 <__assert_fail@plt+0x2d2f0>
   3dac0:	ldr	r1, [sl, #56]	; 0x38
   3dac4:	ldr	ip, [sp, #48]	; 0x30
   3dac8:	ldr	lr, [sp, #44]	; 0x2c
   3dacc:	mov	r9, #0
   3dad0:	str	r1, [r0]
   3dad4:	mov	r1, #0
   3dad8:	str	r1, [sl, #64]	; 0x40
   3dadc:	str	r0, [sl, #56]	; 0x38
   3dae0:	b	3e7a0 <__assert_fail@plt+0x2bcf0>
   3dae4:	mov	r9, #0
   3dae8:	mov	r0, #32
   3daec:	mov	r1, #1
   3daf0:	str	r9, [fp, #-32]	; 0xffffffe0
   3daf4:	bl	322c0 <__assert_fail@plt+0x1f810>
   3daf8:	mov	r8, r0
   3dafc:	mov	r0, #40	; 0x28
   3db00:	mov	r1, #1
   3db04:	bl	322c0 <__assert_fail@plt+0x1f810>
   3db08:	mov	r7, r0
   3db0c:	cmp	r8, #0
   3db10:	cmpne	r7, #0
   3db14:	beq	3fac4 <__assert_fail@plt+0x2d014>
   3db18:	ldr	r6, [sp, #44]	; 0x2c
   3db1c:	ldr	r4, [sp, #48]	; 0x30
   3db20:	mov	r1, r5
   3db24:	mov	r0, r6
   3db28:	mov	r2, r4
   3db2c:	bl	40330 <__assert_fail@plt+0x2d880>
   3db30:	mov	r3, r0
   3db34:	ldr	r0, [r6, #4]
   3db38:	str	r7, [sp, #60]	; 0x3c
   3db3c:	uxtb	r1, r0
   3db40:	cmp	r1, #25
   3db44:	beq	3def4 <__assert_fail@plt+0x2b444>
   3db48:	cmp	r1, #2
   3db4c:	beq	3fab0 <__assert_fail@plt+0x2d000>
   3db50:	mov	r1, #0
   3db54:	b	3df4c <__assert_fail@plt+0x2b49c>
   3db58:	ldr	r1, [sl, #64]	; 0x40
   3db5c:	cmp	r1, #31
   3db60:	beq	3fad8 <__assert_fail@plt+0x2d028>
   3db64:	ldr	r0, [sl, #56]	; 0x38
   3db68:	add	r4, r0, r1, lsl #5
   3db6c:	add	r2, r1, #1
   3db70:	mov	r0, #0
   3db74:	mvn	r3, #0
   3db78:	str	r2, [sl, #64]	; 0x40
   3db7c:	str	r0, [r4, #4]!
   3db80:	str	r0, [r4, #8]
   3db84:	str	r0, [r4, #4]
   3db88:	ldm	lr, {r1, r2}
   3db8c:	str	r3, [r4, #28]
   3db90:	str	r0, [r4, #16]
   3db94:	str	r0, [r4, #12]
   3db98:	bic	r0, r2, #786432	; 0xc0000
   3db9c:	str	r1, [r4, #20]
   3dba0:	str	r0, [r4, #24]
   3dba4:	ldr	r0, [sl, #92]	; 0x5c
   3dba8:	cmp	r0, #2
   3dbac:	blt	3dea4 <__assert_fail@plt+0x2b3f4>
   3dbb0:	ldr	r0, [r5, #40]	; 0x28
   3dbb4:	ldr	r1, [r5, #56]	; 0x38
   3dbb8:	cmp	r1, r0
   3dbbc:	ble	3dea4 <__assert_fail@plt+0x2b3f4>
   3dbc0:	mov	r8, #0
   3dbc4:	mvn	r9, #0
   3dbc8:	ldr	r1, [r5, #28]
   3dbcc:	cmp	r0, r1
   3dbd0:	beq	3dea4 <__assert_fail@plt+0x2b3f4>
   3dbd4:	ldr	r1, [r5, #8]
   3dbd8:	ldr	r0, [r1, r0, lsl #2]
   3dbdc:	cmn	r0, #1
   3dbe0:	bne	3dea4 <__assert_fail@plt+0x2b3f4>
   3dbe4:	mov	r0, lr
   3dbe8:	mov	r1, r5
   3dbec:	mov	r2, ip
   3dbf0:	bl	3cb38 <__assert_fail@plt+0x2a088>
   3dbf4:	ldr	r1, [r5, #40]	; 0x28
   3dbf8:	add	r0, r1, r0
   3dbfc:	str	r0, [r5, #40]	; 0x28
   3dc00:	ldr	r1, [sl, #64]	; 0x40
   3dc04:	cmp	r1, #31
   3dc08:	beq	3dcb0 <__assert_fail@plt+0x2b200>
   3dc0c:	ldr	r0, [sl, #56]	; 0x38
   3dc10:	add	r6, r0, r1, lsl #5
   3dc14:	ldr	lr, [sp, #44]	; 0x2c
   3dc18:	add	r2, r1, #1
   3dc1c:	ldr	ip, [sp, #48]	; 0x30
   3dc20:	str	r2, [sl, #64]	; 0x40
   3dc24:	str	r8, [r6, #4]!
   3dc28:	str	r8, [r6, #8]
   3dc2c:	str	r8, [r6, #4]
   3dc30:	ldm	lr, {r0, r1}
   3dc34:	str	r9, [r6, #28]
   3dc38:	str	r8, [r6, #16]
   3dc3c:	str	r8, [r6, #12]
   3dc40:	str	r0, [r6, #20]
   3dc44:	bic	r0, r1, #786432	; 0xc0000
   3dc48:	str	r0, [r6, #24]
   3dc4c:	ldr	r1, [sl, #64]	; 0x40
   3dc50:	cmp	r1, #31
   3dc54:	beq	3dcf0 <__assert_fail@plt+0x2b240>
   3dc58:	ldr	r0, [sl, #56]	; 0x38
   3dc5c:	add	r7, r0, r1, lsl #5
   3dc60:	add	r2, r1, #1
   3dc64:	mov	r0, #16
   3dc68:	cmp	r6, #0
   3dc6c:	str	r2, [sl, #64]	; 0x40
   3dc70:	str	r8, [r7, #4]!
   3dc74:	stmib	r7, {r4, r6, r8}
   3dc78:	str	r8, [r7, #16]
   3dc7c:	str	r8, [r7, #20]
   3dc80:	str	r0, [r7, #24]
   3dc84:	str	r9, [r7, #28]
   3dc88:	str	r7, [r4]
   3dc8c:	beq	3fcfc <__assert_fail@plt+0x2d24c>
   3dc90:	ldr	r5, [sp, #28]
   3dc94:	str	r7, [r6]
   3dc98:	mov	r4, r7
   3dc9c:	ldr	r0, [r5, #40]	; 0x28
   3dca0:	ldr	r1, [r5, #56]	; 0x38
   3dca4:	cmp	r1, r0
   3dca8:	bgt	3dbc8 <__assert_fail@plt+0x2b118>
   3dcac:	b	3e948 <__assert_fail@plt+0x2be98>
   3dcb0:	mov	r0, #996	; 0x3e4
   3dcb4:	bl	35350 <__assert_fail@plt+0x228a0>
   3dcb8:	cmp	r0, #0
   3dcbc:	beq	3dcd8 <__assert_fail@plt+0x2b228>
   3dcc0:	ldr	r1, [sl, #56]	; 0x38
   3dcc4:	str	r1, [r0]
   3dcc8:	mov	r1, #0
   3dccc:	str	r1, [sl, #64]	; 0x40
   3dcd0:	str	r0, [sl, #56]	; 0x38
   3dcd4:	b	3dc10 <__assert_fail@plt+0x2b160>
   3dcd8:	ldr	ip, [sp, #48]	; 0x30
   3dcdc:	ldr	lr, [sp, #44]	; 0x2c
   3dce0:	mov	r6, #0
   3dce4:	ldr	r1, [sl, #64]	; 0x40
   3dce8:	cmp	r1, #31
   3dcec:	bne	3dc58 <__assert_fail@plt+0x2b1a8>
   3dcf0:	mov	r0, #996	; 0x3e4
   3dcf4:	bl	35350 <__assert_fail@plt+0x228a0>
   3dcf8:	ldr	lr, [sp, #44]	; 0x2c
   3dcfc:	ldr	ip, [sp, #48]	; 0x30
   3dd00:	cmp	r0, #0
   3dd04:	beq	3fcfc <__assert_fail@plt+0x2d24c>
   3dd08:	ldr	r1, [sl, #56]	; 0x38
   3dd0c:	str	r1, [r0]
   3dd10:	mov	r1, #0
   3dd14:	str	r1, [sl, #64]	; 0x40
   3dd18:	str	r0, [sl, #56]	; 0x38
   3dd1c:	b	3dc5c <__assert_fail@plt+0x2b1ac>
   3dd20:	ldr	r0, [lr]
   3dd24:	ldr	r2, [sl, #84]	; 0x54
   3dd28:	mov	r1, #1
   3dd2c:	tst	r2, r1, lsl r0
   3dd30:	beq	3fb0c <__assert_fail@plt+0x2d05c>
   3dd34:	lsl	r0, r1, r0
   3dd38:	ldr	r1, [sl, #64]	; 0x40
   3dd3c:	ldr	r2, [sl, #80]	; 0x50
   3dd40:	orr	r0, r2, r0
   3dd44:	cmp	r1, #31
   3dd48:	str	r0, [sl, #80]	; 0x50
   3dd4c:	beq	3fb48 <__assert_fail@plt+0x2d098>
   3dd50:	ldr	r0, [sl, #56]	; 0x38
   3dd54:	add	r7, r0, r1, lsl #5
   3dd58:	add	r2, r1, #1
   3dd5c:	mov	r0, #0
   3dd60:	mvn	r3, #0
   3dd64:	str	r2, [sl, #64]	; 0x40
   3dd68:	str	r0, [r7, #4]!
   3dd6c:	str	r0, [r7, #8]
   3dd70:	str	r0, [r7, #4]
   3dd74:	ldm	lr, {r1, r2}
   3dd78:	str	r3, [r7, #28]
   3dd7c:	str	r0, [r7, #16]
   3dd80:	str	r0, [r7, #12]
   3dd84:	bic	r0, r2, #786432	; 0xc0000
   3dd88:	str	r1, [r7, #20]
   3dd8c:	str	r0, [r7, #24]
   3dd90:	ldr	r0, [sl, #76]	; 0x4c
   3dd94:	add	r0, r0, #1
   3dd98:	str	r0, [sl, #76]	; 0x4c
   3dd9c:	b	3ddf8 <__assert_fail@plt+0x2b348>
   3dda0:	ldr	r1, [sl, #64]	; 0x40
   3dda4:	cmp	r1, #31
   3dda8:	beq	3fb14 <__assert_fail@plt+0x2d064>
   3ddac:	ldr	r0, [sl, #56]	; 0x38
   3ddb0:	add	r7, r0, r1, lsl #5
   3ddb4:	add	r2, r1, #1
   3ddb8:	mov	r0, #0
   3ddbc:	mvn	r3, #0
   3ddc0:	str	r2, [sl, #64]	; 0x40
   3ddc4:	str	r0, [r7, #4]!
   3ddc8:	str	r0, [r7, #8]
   3ddcc:	str	r0, [r7, #4]
   3ddd0:	ldm	lr, {r1, r2}
   3ddd4:	str	r3, [r7, #28]
   3ddd8:	str	r0, [r7, #16]
   3dddc:	str	r0, [r7, #12]
   3dde0:	bic	r0, r2, #786432	; 0xc0000
   3dde4:	str	r1, [r7, #20]
   3dde8:	str	r0, [r7, #24]
   3ddec:	ldr	r0, [sl, #92]	; 0x5c
   3ddf0:	cmp	r0, #2
   3ddf4:	blt	3e948 <__assert_fail@plt+0x2be98>
   3ddf8:	ldrb	r0, [sl, #88]	; 0x58
   3ddfc:	orr	r0, r0, #2
   3de00:	strb	r0, [sl, #88]	; 0x58
   3de04:	b	3e948 <__assert_fail@plt+0x2be98>
   3de08:	ldr	r4, [r7, #24]
   3de0c:	orr	r2, ip, #8388608	; 0x800000
   3de10:	mov	r1, r5
   3de14:	add	r0, r4, #1
   3de18:	str	r0, [r7, #24]
   3de1c:	mov	r0, lr
   3de20:	bl	3cb38 <__assert_fail@plt+0x2a088>
   3de24:	ldr	r1, [r5, #40]	; 0x28
   3de28:	ldr	lr, [sp, #44]	; 0x2c
   3de2c:	mov	r9, #0
   3de30:	add	r0, r1, r0
   3de34:	str	r0, [r5, #40]	; 0x28
   3de38:	ldrb	r0, [lr, #4]
   3de3c:	cmp	r0, #9
   3de40:	beq	3e8d8 <__assert_fail@plt+0x2be28>
   3de44:	add	r0, r6, #1
   3de48:	mov	r1, r7
   3de4c:	mov	r2, lr
   3de50:	mov	r7, lr
   3de54:	str	r0, [sp]
   3de58:	mov	r0, r5
   3de5c:	ldr	r6, [sp, #20]
   3de60:	str	r6, [sp, #4]
   3de64:	ldr	r3, [sp, #48]	; 0x30
   3de68:	bl	3c7b0 <__assert_fail@plt+0x29d00>
   3de6c:	mov	r9, r0
   3de70:	ldr	r0, [r6]
   3de74:	cmp	r0, #0
   3de78:	beq	3e8c8 <__assert_fail@plt+0x2be18>
   3de7c:	mov	r9, #0
   3de80:	mov	r0, r9
   3de84:	sub	sp, fp, #28
   3de88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3de8c:	tst	ip, #16777216	; 0x1000000
   3de90:	beq	3d8e0 <__assert_fail@plt+0x2ae30>
   3de94:	mov	r0, #13
   3de98:	b	3e838 <__assert_fail@plt+0x2bd88>
   3de9c:	mov	r0, #5
   3dea0:	b	3e838 <__assert_fail@plt+0x2bd88>
   3dea4:	mov	r7, r4
   3dea8:	b	3e948 <__assert_fail@plt+0x2be98>
   3deac:	mov	r0, lr
   3deb0:	mov	r1, r5
   3deb4:	mov	r2, ip
   3deb8:	mov	r4, ip
   3debc:	mov	r6, lr
   3dec0:	bl	3cb38 <__assert_fail@plt+0x2a088>
   3dec4:	ldr	r1, [r5, #40]	; 0x28
   3dec8:	mov	r2, r6
   3decc:	mov	r3, r4
   3ded0:	add	r0, r1, r0
   3ded4:	mov	r1, r7
   3ded8:	str	r0, [r5, #40]	; 0x28
   3dedc:	mov	r0, r5
   3dee0:	sub	sp, fp, #28
   3dee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dee8:	b	3d7f0 <__assert_fail@plt+0x2ad40>
   3deec:	mov	r0, #16
   3def0:	b	3e838 <__assert_fail@plt+0x2bd88>
   3def4:	ldrb	r0, [r7, #16]
   3def8:	tst	r4, #256	; 0x100
   3defc:	orr	r0, r0, #1
   3df00:	strb	r0, [r7, #16]
   3df04:	beq	3df14 <__assert_fail@plt+0x2b464>
   3df08:	ldr	r0, [r8]
   3df0c:	orr	r0, r0, #1024	; 0x400
   3df10:	str	r0, [r8]
   3df14:	ldr	r0, [r5, #40]	; 0x28
   3df18:	mov	r1, r5
   3df1c:	mov	r2, r4
   3df20:	add	r0, r0, r3
   3df24:	str	r0, [r5, #40]	; 0x28
   3df28:	mov	r0, r6
   3df2c:	bl	40330 <__assert_fail@plt+0x2d880>
   3df30:	ldr	r6, [sp, #44]	; 0x2c
   3df34:	mov	r3, r0
   3df38:	ldr	r0, [r6, #4]
   3df3c:	uxtb	r1, r0
   3df40:	cmp	r1, #2
   3df44:	beq	3fab0 <__assert_fail@plt+0x2d000>
   3df48:	mov	r1, #1
   3df4c:	str	r1, [sp, #56]	; 0x38
   3df50:	uxtb	r1, r0
   3df54:	mov	r2, r6
   3df58:	ldr	r7, [sp, #48]	; 0x30
   3df5c:	cmp	r1, #21
   3df60:	moveq	r1, #1
   3df64:	bfieq	r0, r1, #0, #8
   3df68:	mov	r1, r5
   3df6c:	streq	r0, [r6, #4]
   3df70:	sub	r0, fp, #80	; 0x50
   3df74:	str	r0, [fp, #-36]	; 0xffffffdc
   3df78:	mov	r0, #3
   3df7c:	str	r0, [fp, #-40]	; 0xffffffd8
   3df80:	mov	r0, #1
   3df84:	str	r7, [sp]
   3df88:	str	r0, [sp, #4]
   3df8c:	sub	r0, fp, #40	; 0x28
   3df90:	bl	404d8 <__assert_fail@plt+0x2da28>
   3df94:	cmp	r0, #0
   3df98:	bne	3fa98 <__assert_fail@plt+0x2cfe8>
   3df9c:	and	r0, r7, #65536	; 0x10000
   3dfa0:	mov	r2, r7
   3dfa4:	str	r0, [sp, #40]	; 0x28
   3dfa8:	mov	r0, #0
   3dfac:	str	r0, [sp, #36]	; 0x24
   3dfb0:	mov	r0, #0
   3dfb4:	str	r0, [sp, #32]
   3dfb8:	ldr	r4, [sp, #44]	; 0x2c
   3dfbc:	ldr	r7, [sp, #60]	; 0x3c
   3dfc0:	mov	r0, r4
   3dfc4:	mov	r1, r5
   3dfc8:	bl	40330 <__assert_fail@plt+0x2d880>
   3dfcc:	ldr	r6, [fp, #-40]	; 0xffffffd8
   3dfd0:	mov	r9, r0
   3dfd4:	cmp	r6, #2
   3dfd8:	beq	3e200 <__assert_fail@plt+0x2b750>
   3dfdc:	cmp	r6, #4
   3dfe0:	bne	3e024 <__assert_fail@plt+0x2b574>
   3dfe4:	ldr	r5, [sp, #28]
   3dfe8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3dfec:	mov	r2, r7
   3dff0:	sub	r3, fp, #32
   3dff4:	ldr	r0, [r5, #64]	; 0x40
   3dff8:	str	r1, [sp]
   3dffc:	ldr	r1, [sp, #48]	; 0x30
   3e000:	str	r1, [sp, #4]
   3e004:	mov	r1, r8
   3e008:	bl	407e4 <__assert_fail@plt+0x2dd34>
   3e00c:	ldr	r1, [sp, #20]
   3e010:	ldr	lr, [sp, #44]	; 0x2c
   3e014:	cmp	r0, #0
   3e018:	str	r0, [r1]
   3e01c:	beq	3e248 <__assert_fail@plt+0x2b798>
   3e020:	b	3fa10 <__assert_fail@plt+0x2cf60>
   3e024:	ldr	r0, [sp, #44]	; 0x2c
   3e028:	ldr	r2, [sp, #48]	; 0x30
   3e02c:	mov	r4, r9
   3e030:	mov	r9, #7
   3e034:	str	sl, [sp, #52]	; 0x34
   3e038:	ldrb	r0, [r0, #4]
   3e03c:	cmp	r0, #22
   3e040:	beq	3e050 <__assert_fail@plt+0x2b5a0>
   3e044:	cmp	r0, #2
   3e048:	bne	3e1a8 <__assert_fail@plt+0x2b6f8>
   3e04c:	b	3f9fc <__assert_fail@plt+0x2cf4c>
   3e050:	ldr	r7, [sp, #28]
   3e054:	mov	r5, r4
   3e058:	ldr	r0, [r7, #40]	; 0x28
   3e05c:	mov	r1, r7
   3e060:	add	r0, r0, r4
   3e064:	str	r0, [r7, #40]	; 0x28
   3e068:	add	r0, sp, #64	; 0x40
   3e06c:	bl	40330 <__assert_fail@plt+0x2d880>
   3e070:	mov	r3, r0
   3e074:	ldrb	r0, [sp, #68]	; 0x44
   3e078:	cmp	r0, #21
   3e07c:	beq	3e190 <__assert_fail@plt+0x2b6e0>
   3e080:	ldr	r4, [sp, #48]	; 0x30
   3e084:	cmp	r0, #2
   3e088:	beq	3f9fc <__assert_fail@plt+0x2cf4c>
   3e08c:	mov	r0, #3
   3e090:	str	r8, [sp, #24]
   3e094:	add	r2, sp, #64	; 0x40
   3e098:	str	r0, [fp, #-48]	; 0xffffffd0
   3e09c:	add	r0, sp, #72	; 0x48
   3e0a0:	str	r0, [fp, #-44]	; 0xffffffd4
   3e0a4:	mov	r0, #1
   3e0a8:	str	r4, [sp]
   3e0ac:	str	r0, [sp, #4]
   3e0b0:	sub	r0, fp, #48	; 0x30
   3e0b4:	ldr	r7, [sp, #28]
   3e0b8:	mov	r1, r7
   3e0bc:	bl	404d8 <__assert_fail@plt+0x2da28>
   3e0c0:	cmp	r0, #0
   3e0c4:	bne	3fe98 <__assert_fail@plt+0x2d3e8>
   3e0c8:	ldr	r0, [sp, #44]	; 0x2c
   3e0cc:	mov	r1, r7
   3e0d0:	mov	r2, r4
   3e0d4:	bl	40330 <__assert_fail@plt+0x2d880>
   3e0d8:	ldr	r8, [fp, #-48]	; 0xffffffd0
   3e0dc:	mov	r9, #11
   3e0e0:	str	r0, [sp, #16]
   3e0e4:	cmp	r8, #2
   3e0e8:	beq	3f9f8 <__assert_fail@plt+0x2cf48>
   3e0ec:	cmp	r8, #4
   3e0f0:	beq	3f9f8 <__assert_fail@plt+0x2cf48>
   3e0f4:	cmp	r6, #3
   3e0f8:	bne	3e10c <__assert_fail@plt+0x2b65c>
   3e0fc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3e100:	bl	127bc <strlen@plt>
   3e104:	cmp	r0, #1
   3e108:	bhi	3fea4 <__assert_fail@plt+0x2d3f4>
   3e10c:	cmp	r8, #3
   3e110:	bne	3e124 <__assert_fail@plt+0x2b674>
   3e114:	ldr	r0, [fp, #-44]	; 0xffffffd4
   3e118:	bl	127bc <strlen@plt>
   3e11c:	cmp	r0, #1
   3e120:	bhi	3fea4 <__assert_fail@plt+0x2d3f4>
   3e124:	ldr	lr, [sp, #44]	; 0x2c
   3e128:	cmp	r6, #3
   3e12c:	beq	3e2f8 <__assert_fail@plt+0x2b848>
   3e130:	cmp	r6, #0
   3e134:	mov	r7, #0
   3e138:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   3e13c:	cmp	r8, #3
   3e140:	beq	3e308 <__assert_fail@plt+0x2b858>
   3e144:	cmp	r8, #0
   3e148:	mov	sl, #0
   3e14c:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   3e150:	cmp	r6, #3
   3e154:	cmpne	r6, #0
   3e158:	bne	3e31c <__assert_fail@plt+0x2b86c>
   3e15c:	ldr	r0, [sp, #52]	; 0x34
   3e160:	ldr	r0, [r0, #92]	; 0x5c
   3e164:	cmp	r0, #2
   3e168:	blt	3e320 <__assert_fail@plt+0x2b870>
   3e16c:	mov	r0, r7
   3e170:	bl	12864 <btowc@plt>
   3e174:	ldr	lr, [sp, #44]	; 0x2c
   3e178:	mov	r7, r0
   3e17c:	cmp	r8, #3
   3e180:	cmpne	r8, #0
   3e184:	beq	3e32c <__assert_fail@plt+0x2b87c>
   3e188:	ldr	sl, [fp, #-44]	; 0xffffffd4
   3e18c:	b	3e34c <__assert_fail@plt+0x2b89c>
   3e190:	ldr	r0, [r7, #40]	; 0x28
   3e194:	mov	r1, #1
   3e198:	sub	r0, r0, r5
   3e19c:	str	r0, [r7, #40]	; 0x28
   3e1a0:	ldr	r0, [sp, #44]	; 0x2c
   3e1a4:	strb	r1, [r0, #4]
   3e1a8:	add	r0, pc, #12
   3e1ac:	ldr	sl, [sp, #52]	; 0x34
   3e1b0:	ldr	r7, [sp, #60]	; 0x3c
   3e1b4:	mov	r9, r4
   3e1b8:	ldr	pc, [r0, r6, lsl #2]
   3e1bc:	andeq	lr, r3, ip, asr #3
   3e1c0:	andeq	lr, r3, r4, lsr #5
   3e1c4:	andeq	lr, r3, r0, lsl #4
   3e1c8:	andeq	lr, r3, r0, ror #5
   3e1cc:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   3e1d0:	mov	r3, #1
   3e1d4:	ubfx	r1, r0, #5, #3
   3e1d8:	and	r0, r0, #31
   3e1dc:	ldr	r5, [sp, #28]
   3e1e0:	ldr	lr, [sp, #44]	; 0x2c
   3e1e4:	ldr	r2, [r8, r1, lsl #2]
   3e1e8:	orr	r0, r2, r3, lsl r0
   3e1ec:	str	r0, [r8, r1, lsl #2]
   3e1f0:	ldrb	r0, [lr, #4]
   3e1f4:	cmp	r0, #21
   3e1f8:	bne	3e254 <__assert_fail@plt+0x2b7a4>
   3e1fc:	b	3e4d0 <__assert_fail@plt+0x2ba20>
   3e200:	ldr	r7, [fp, #-36]	; 0xffffffdc
   3e204:	mov	r0, r7
   3e208:	bl	127bc <strlen@plt>
   3e20c:	cmp	r0, #1
   3e210:	bne	3fc0c <__assert_fail@plt+0x2d15c>
   3e214:	ldrb	r0, [r7]
   3e218:	mov	r3, #1
   3e21c:	ubfx	r1, r0, #5, #3
   3e220:	and	r0, r0, #31
   3e224:	ldr	r2, [r8, r1, lsl #2]
   3e228:	orr	r0, r2, r3, lsl r0
   3e22c:	str	r0, [r8, r1, lsl #2]
   3e230:	mov	r1, #0
   3e234:	ldr	r0, [sp, #20]
   3e238:	ldr	r5, [sp, #28]
   3e23c:	ldr	lr, [sp, #44]	; 0x2c
   3e240:	ldr	r7, [sp, #60]	; 0x3c
   3e244:	str	r1, [r0]
   3e248:	ldrb	r0, [lr, #4]
   3e24c:	cmp	r0, #21
   3e250:	beq	3e4d0 <__assert_fail@plt+0x2ba20>
   3e254:	cmp	r0, #2
   3e258:	ldr	r0, [sp, #48]	; 0x30
   3e25c:	beq	3faa4 <__assert_fail@plt+0x2cff4>
   3e260:	sub	r1, fp, #80	; 0x50
   3e264:	mov	r2, lr
   3e268:	mov	r3, r9
   3e26c:	mov	r4, lr
   3e270:	str	r1, [fp, #-36]	; 0xffffffdc
   3e274:	mov	r1, #3
   3e278:	str	r1, [fp, #-40]	; 0xffffffd8
   3e27c:	str	r0, [sp]
   3e280:	mov	r0, #0
   3e284:	mov	r1, r5
   3e288:	str	r0, [sp, #4]
   3e28c:	sub	r0, fp, #40	; 0x28
   3e290:	bl	404d8 <__assert_fail@plt+0x2da28>
   3e294:	ldr	r2, [sp, #48]	; 0x30
   3e298:	cmp	r0, #0
   3e29c:	beq	3dfc0 <__assert_fail@plt+0x2b510>
   3e2a0:	b	3fa98 <__assert_fail@plt+0x2cfe8>
   3e2a4:	ldr	r1, [r7, #20]
   3e2a8:	ldr	r0, [sp, #36]	; 0x24
   3e2ac:	cmp	r0, r1
   3e2b0:	beq	3e434 <__assert_fail@plt+0x2b984>
   3e2b4:	ldr	r0, [r7]
   3e2b8:	ldr	r5, [sp, #28]
   3e2bc:	ldr	lr, [sp, #44]	; 0x2c
   3e2c0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   3e2c4:	add	r2, r1, #1
   3e2c8:	str	r2, [r7, #20]
   3e2cc:	str	r3, [r0, r1, lsl #2]
   3e2d0:	ldrb	r0, [lr, #4]
   3e2d4:	cmp	r0, #21
   3e2d8:	bne	3e254 <__assert_fail@plt+0x2b7a4>
   3e2dc:	b	3e4d0 <__assert_fail@plt+0x2ba20>
   3e2e0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   3e2e4:	mov	r0, r7
   3e2e8:	bl	127bc <strlen@plt>
   3e2ec:	cmp	r0, #1
   3e2f0:	beq	3e214 <__assert_fail@plt+0x2b764>
   3e2f4:	b	3fc10 <__assert_fail@plt+0x2d160>
   3e2f8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3e2fc:	ldrb	r7, [r0]
   3e300:	cmp	r8, #3
   3e304:	bne	3e144 <__assert_fail@plt+0x2b694>
   3e308:	ldr	r0, [fp, #-44]	; 0xffffffd4
   3e30c:	ldrb	sl, [r0]
   3e310:	cmp	r6, #3
   3e314:	cmpne	r6, #0
   3e318:	beq	3e15c <__assert_fail@plt+0x2b6ac>
   3e31c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   3e320:	cmp	r8, #3
   3e324:	cmpne	r8, #0
   3e328:	bne	3e188 <__assert_fail@plt+0x2b6d8>
   3e32c:	ldr	r0, [sp, #52]	; 0x34
   3e330:	ldr	r0, [r0, #92]	; 0x5c
   3e334:	cmp	r0, #2
   3e338:	blt	3e34c <__assert_fail@plt+0x2b89c>
   3e33c:	mov	r0, sl
   3e340:	bl	12864 <btowc@plt>
   3e344:	ldr	lr, [sp, #44]	; 0x2c
   3e348:	mov	sl, r0
   3e34c:	ldr	r8, [sp, #24]
   3e350:	cmn	r7, #1
   3e354:	mov	r9, #3
   3e358:	cmnne	sl, #1
   3e35c:	beq	3f9fc <__assert_fail@plt+0x2cf4c>
   3e360:	ldr	r0, [sp, #40]	; 0x28
   3e364:	cmp	r0, #0
   3e368:	beq	3e378 <__assert_fail@plt+0x2b8c8>
   3e36c:	cmp	r7, sl
   3e370:	mov	r9, #11
   3e374:	bhi	3f9fc <__assert_fail@plt+0x2cf4c>
   3e378:	ldr	r0, [sp, #52]	; 0x34
   3e37c:	ldr	r0, [r0, #92]	; 0x5c
   3e380:	cmp	r0, #2
   3e384:	blt	3e3bc <__assert_fail@plt+0x2b90c>
   3e388:	ldr	r4, [sp, #60]	; 0x3c
   3e38c:	ldr	r1, [sp, #32]
   3e390:	ldr	r5, [sp, #28]
   3e394:	ldr	r0, [r4, #32]
   3e398:	cmp	r1, r0
   3e39c:	beq	3e474 <__assert_fail@plt+0x2b9c4>
   3e3a0:	ldmib	r4, {r6, r9}
   3e3a4:	str	r7, [r6, r0, lsl #2]
   3e3a8:	ldr	r0, [r4, #32]
   3e3ac:	add	r1, r0, #1
   3e3b0:	str	r1, [r4, #32]
   3e3b4:	str	sl, [r9, r0, lsl #2]
   3e3b8:	b	3e3c0 <__assert_fail@plt+0x2b910>
   3e3bc:	ldr	r5, [sp, #28]
   3e3c0:	ldr	r9, [sp, #16]
   3e3c4:	mov	r0, #0
   3e3c8:	cmp	r7, r0
   3e3cc:	cmpls	r0, sl
   3e3d0:	bls	3e3ec <__assert_fail@plt+0x2b93c>
   3e3d4:	add	r0, r0, #1
   3e3d8:	cmp	r0, #256	; 0x100
   3e3dc:	beq	3e410 <__assert_fail@plt+0x2b960>
   3e3e0:	cmp	r7, r0
   3e3e4:	cmpls	r0, sl
   3e3e8:	bhi	3e3d4 <__assert_fail@plt+0x2b924>
   3e3ec:	ubfx	r1, r0, #5, #3
   3e3f0:	and	r3, r0, #31
   3e3f4:	mov	r4, #1
   3e3f8:	ldr	r2, [r8, r1, lsl #2]
   3e3fc:	orr	r2, r2, r4, lsl r3
   3e400:	str	r2, [r8, r1, lsl #2]
   3e404:	add	r0, r0, #1
   3e408:	cmp	r0, #256	; 0x100
   3e40c:	bne	3e3e0 <__assert_fail@plt+0x2b930>
   3e410:	ldr	r0, [sp, #20]
   3e414:	ldr	sl, [sp, #52]	; 0x34
   3e418:	ldr	r7, [sp, #60]	; 0x3c
   3e41c:	mov	r1, #0
   3e420:	str	r1, [r0]
   3e424:	ldrb	r0, [lr, #4]
   3e428:	cmp	r0, #21
   3e42c:	bne	3e254 <__assert_fail@plt+0x2b7a4>
   3e430:	b	3e4d0 <__assert_fail@plt+0x2ba20>
   3e434:	ldr	r1, [sp, #36]	; 0x24
   3e438:	mov	r0, #1
   3e43c:	orr	r1, r0, r1, lsl #1
   3e440:	ldr	r0, [r7]
   3e444:	str	r1, [sp, #36]	; 0x24
   3e448:	lsl	r1, r1, #2
   3e44c:	bl	36110 <__assert_fail@plt+0x23660>
   3e450:	cmp	r0, #0
   3e454:	beq	3ff08 <__assert_fail@plt+0x2d458>
   3e458:	ldr	r7, [sp, #60]	; 0x3c
   3e45c:	ldr	r5, [sp, #28]
   3e460:	ldr	lr, [sp, #44]	; 0x2c
   3e464:	mov	r9, r4
   3e468:	str	r0, [r7]
   3e46c:	ldr	r1, [r7, #20]
   3e470:	b	3e2c0 <__assert_fail@plt+0x2b810>
   3e474:	ldr	r1, [sp, #32]
   3e478:	mov	r0, #1
   3e47c:	orr	r1, r0, r1, lsl #1
   3e480:	ldr	r0, [r4, #4]
   3e484:	lsl	r9, r1, #2
   3e488:	str	r1, [sp, #32]
   3e48c:	mov	r1, r9
   3e490:	bl	36110 <__assert_fail@plt+0x23660>
   3e494:	mov	r6, r0
   3e498:	ldr	r0, [r4, #8]
   3e49c:	mov	r1, r9
   3e4a0:	bl	36110 <__assert_fail@plt+0x23660>
   3e4a4:	mov	r9, r0
   3e4a8:	cmp	r6, #0
   3e4ac:	cmpne	r9, #0
   3e4b0:	beq	3ff20 <__assert_fail@plt+0x2d470>
   3e4b4:	ldr	r4, [sp, #60]	; 0x3c
   3e4b8:	stmib	r4, {r6, r9}
   3e4bc:	ldr	r0, [r4, #32]
   3e4c0:	ldr	r5, [sp, #28]
   3e4c4:	ldr	lr, [sp, #44]	; 0x2c
   3e4c8:	ldr	r8, [sp, #24]
   3e4cc:	b	3e3a4 <__assert_fail@plt+0x2b8f4>
   3e4d0:	ldr	r0, [r5, #40]	; 0x28
   3e4d4:	ldr	ip, [sp, #48]	; 0x30
   3e4d8:	add	r0, r0, r9
   3e4dc:	str	r0, [r5, #40]	; 0x28
   3e4e0:	ldr	r0, [sp, #56]	; 0x38
   3e4e4:	cmp	r0, #0
   3e4e8:	beq	3e524 <__assert_fail@plt+0x2ba74>
   3e4ec:	vld1.32	{d16-d17}, [r8]
   3e4f0:	mov	r0, r8
   3e4f4:	vmvn	q8, q8
   3e4f8:	vst1.32	{d16-d17}, [r0]!
   3e4fc:	vld1.32	{d16-d17}, [r0]
   3e500:	vmvn	q8, q8
   3e504:	vst1.32	{d16-d17}, [r0]
   3e508:	ldr	r0, [sl, #92]	; 0x5c
   3e50c:	cmp	r0, #2
   3e510:	bge	3e530 <__assert_fail@plt+0x2ba80>
   3e514:	ldr	r1, [r7, #20]
   3e518:	cmp	r1, #0
   3e51c:	bne	3e5e0 <__assert_fail@plt+0x2bb30>
   3e520:	b	3e5bc <__assert_fail@plt+0x2bb0c>
   3e524:	ldr	r0, [sl, #92]	; 0x5c
   3e528:	cmp	r0, #2
   3e52c:	blt	3e514 <__assert_fail@plt+0x2ba64>
   3e530:	ldr	r6, [sl, #60]	; 0x3c
   3e534:	ldm	r8, {r1, r2, r3, r7}
   3e538:	ldr	r5, [r6]
   3e53c:	and	r1, r1, r5
   3e540:	ldr	r5, [sp, #28]
   3e544:	str	r1, [r8]
   3e548:	ldr	r1, [r6, #4]
   3e54c:	and	r1, r2, r1
   3e550:	str	r1, [r8, #4]
   3e554:	ldr	r1, [r6, #8]
   3e558:	and	r1, r3, r1
   3e55c:	str	r1, [r8, #8]
   3e560:	ldr	r1, [r6, #12]
   3e564:	and	r1, r7, r1
   3e568:	ldr	r7, [sp, #60]	; 0x3c
   3e56c:	str	r1, [r8, #12]
   3e570:	ldr	r1, [r8, #16]
   3e574:	ldr	r2, [r6, #16]
   3e578:	and	r1, r1, r2
   3e57c:	str	r1, [r8, #16]
   3e580:	ldr	r1, [r6, #20]
   3e584:	ldr	r2, [r8, #20]
   3e588:	and	r1, r2, r1
   3e58c:	str	r1, [r8, #20]
   3e590:	ldr	r1, [r6, #24]
   3e594:	ldr	r2, [r8, #24]
   3e598:	and	r1, r2, r1
   3e59c:	str	r1, [r8, #24]
   3e5a0:	ldr	r1, [r6, #28]
   3e5a4:	ldr	r2, [r8, #28]
   3e5a8:	and	r1, r2, r1
   3e5ac:	str	r1, [r8, #28]
   3e5b0:	ldr	r1, [r7, #20]
   3e5b4:	cmp	r1, #0
   3e5b8:	bne	3e5e0 <__assert_fail@plt+0x2bb30>
   3e5bc:	ldr	r1, [r7, #24]
   3e5c0:	cmp	r1, #0
   3e5c4:	bne	3e5e0 <__assert_fail@plt+0x2bb30>
   3e5c8:	ldr	r1, [r7, #28]
   3e5cc:	cmp	r1, #0
   3e5d0:	bne	3e5e0 <__assert_fail@plt+0x2bb30>
   3e5d4:	ldr	r1, [r7, #32]
   3e5d8:	cmp	r1, #0
   3e5dc:	beq	3f958 <__assert_fail@plt+0x2cea8>
   3e5e0:	ldrb	r0, [sl, #88]	; 0x58
   3e5e4:	orr	r0, r0, #2
   3e5e8:	strb	r0, [sl, #88]	; 0x58
   3e5ec:	ldr	r1, [sl, #64]	; 0x40
   3e5f0:	cmp	r1, #31
   3e5f4:	beq	3fb7c <__assert_fail@plt+0x2d0cc>
   3e5f8:	ldr	r0, [sl, #56]	; 0x38
   3e5fc:	add	r0, r0, r1, lsl #5
   3e600:	add	r2, r1, #1
   3e604:	vmov.i32	q8, #0	; 0x00000000
   3e608:	mov	r1, #6
   3e60c:	str	r2, [sl, #64]	; 0x40
   3e610:	mov	r2, #0
   3e614:	add	r4, r0, #4
   3e618:	str	r2, [r0, #20]
   3e61c:	str	r7, [r0, #24]
   3e620:	str	r1, [r0, #28]
   3e624:	mov	r0, #28
   3e628:	mov	r1, r4
   3e62c:	vst1.32	{d16-d17}, [r1], r0
   3e630:	mvn	r0, #0
   3e634:	str	r0, [r1]
   3e638:	ldr	r0, [r8]
   3e63c:	cmp	r0, #0
   3e640:	bne	3e698 <__assert_fail@plt+0x2bbe8>
   3e644:	ldr	r0, [r8, #4]
   3e648:	cmp	r0, #0
   3e64c:	bne	3e698 <__assert_fail@plt+0x2bbe8>
   3e650:	ldr	r0, [r8, #8]
   3e654:	cmp	r0, #0
   3e658:	bne	3e698 <__assert_fail@plt+0x2bbe8>
   3e65c:	ldr	r0, [r8, #12]
   3e660:	cmp	r0, #0
   3e664:	bne	3e698 <__assert_fail@plt+0x2bbe8>
   3e668:	ldr	r0, [r8, #16]
   3e66c:	cmp	r0, #0
   3e670:	bne	3e698 <__assert_fail@plt+0x2bbe8>
   3e674:	ldr	r0, [r8, #20]
   3e678:	cmp	r0, #0
   3e67c:	bne	3e698 <__assert_fail@plt+0x2bbe8>
   3e680:	ldr	r0, [r8, #24]
   3e684:	cmp	r0, #0
   3e688:	bne	3e698 <__assert_fail@plt+0x2bbe8>
   3e68c:	ldr	r0, [r8, #28]
   3e690:	cmp	r0, #0
   3e694:	beq	3fc18 <__assert_fail@plt+0x2d168>
   3e698:	ldr	r1, [sl, #64]	; 0x40
   3e69c:	cmp	r1, #31
   3e6a0:	beq	3fbac <__assert_fail@plt+0x2d0fc>
   3e6a4:	ldr	r0, [sl, #56]	; 0x38
   3e6a8:	add	r0, r0, r1, lsl #5
   3e6ac:	add	r2, r1, #1
   3e6b0:	vmov.i32	q8, #0	; 0x00000000
   3e6b4:	mov	r1, #3
   3e6b8:	str	r2, [sl, #64]	; 0x40
   3e6bc:	mov	r2, #0
   3e6c0:	add	r6, r0, #4
   3e6c4:	str	r2, [r0, #20]
   3e6c8:	str	r8, [r0, #24]
   3e6cc:	str	r1, [r0, #28]
   3e6d0:	mov	r0, #28
   3e6d4:	mov	r1, r6
   3e6d8:	vst1.32	{d16-d17}, [r1], r0
   3e6dc:	mvn	r0, #0
   3e6e0:	str	r0, [r1]
   3e6e4:	ldr	r1, [sl, #64]	; 0x40
   3e6e8:	cmp	r1, #31
   3e6ec:	beq	3fbdc <__assert_fail@plt+0x2d12c>
   3e6f0:	ldr	r0, [sl, #56]	; 0x38
   3e6f4:	add	r7, r0, r1, lsl #5
   3e6f8:	add	r2, r1, #1
   3e6fc:	mov	r0, #0
   3e700:	mov	r1, #10
   3e704:	str	r2, [sl, #64]	; 0x40
   3e708:	mvn	r2, #0
   3e70c:	str	r0, [r7, #4]!
   3e710:	add	r3, r7, #20
   3e714:	str	r6, [r7, #4]
   3e718:	str	r4, [r7, #8]
   3e71c:	str	r0, [r7, #12]
   3e720:	str	r0, [r7, #16]
   3e724:	stm	r3, {r0, r1, r2}
   3e728:	str	r7, [r6]
   3e72c:	str	r7, [r4]
   3e730:	b	3e948 <__assert_fail@plt+0x2be98>
   3e734:	mov	r0, #5
   3e738:	str	r0, [lr]
   3e73c:	ldr	r1, [sl, #64]	; 0x40
   3e740:	cmp	r1, #31
   3e744:	beq	3fc98 <__assert_fail@plt+0x2d1e8>
   3e748:	ldr	r0, [sl, #56]	; 0x38
   3e74c:	add	r4, r0, r1, lsl #5
   3e750:	add	r2, r1, #1
   3e754:	mov	r0, #0
   3e758:	mvn	r3, #0
   3e75c:	str	r2, [sl, #64]	; 0x40
   3e760:	str	r0, [r4, #4]!
   3e764:	str	r0, [r4, #8]
   3e768:	str	r0, [r4, #4]
   3e76c:	ldm	lr, {r1, r2}
   3e770:	str	r3, [r4, #28]
   3e774:	str	r0, [r4, #16]
   3e778:	str	r0, [r4, #12]
   3e77c:	bic	r0, r2, #786432	; 0xc0000
   3e780:	str	r1, [r4, #20]
   3e784:	str	r0, [r4, #24]
   3e788:	mov	r0, #10
   3e78c:	str	r0, [lr]
   3e790:	ldr	r1, [sl, #64]	; 0x40
   3e794:	cmp	r1, #31
   3e798:	beq	3dab0 <__assert_fail@plt+0x2b000>
   3e79c:	ldr	r0, [sl, #56]	; 0x38
   3e7a0:	add	r5, r0, r1, lsl #5
   3e7a4:	add	r2, r1, #1
   3e7a8:	mov	r0, #0
   3e7ac:	mvn	r3, #0
   3e7b0:	str	r2, [sl, #64]	; 0x40
   3e7b4:	str	r0, [r5, #4]!
   3e7b8:	str	r0, [r5, #8]
   3e7bc:	str	r0, [r5, #4]
   3e7c0:	ldm	lr, {r1, r2}
   3e7c4:	str	r3, [r5, #28]
   3e7c8:	str	r0, [r5, #16]
   3e7cc:	str	r0, [r5, #12]
   3e7d0:	bic	r0, r2, #786432	; 0xc0000
   3e7d4:	str	r1, [r5, #20]
   3e7d8:	str	r0, [r5, #24]
   3e7dc:	ldr	r1, [sl, #64]	; 0x40
   3e7e0:	cmp	r1, #31
   3e7e4:	beq	3fdbc <__assert_fail@plt+0x2d30c>
   3e7e8:	ldr	r0, [sl, #56]	; 0x38
   3e7ec:	add	r6, r0, r1, lsl #5
   3e7f0:	add	r2, r1, #1
   3e7f4:	mov	r0, #0
   3e7f8:	cmp	r4, #0
   3e7fc:	mov	r1, #10
   3e800:	str	r2, [sl, #64]	; 0x40
   3e804:	mvn	r2, #0
   3e808:	str	r0, [r6, #4]!
   3e80c:	add	r3, r6, #20
   3e810:	stmib	r6, {r4, r5}
   3e814:	str	r0, [r6, #12]
   3e818:	str	r0, [r6, #16]
   3e81c:	stm	r3, {r0, r1, r2}
   3e820:	strne	r6, [r4]
   3e824:	cmp	r5, #0
   3e828:	strne	r6, [r5]
   3e82c:	cmpne	r4, #0
   3e830:	bne	3e898 <__assert_fail@plt+0x2bde8>
   3e834:	mov	r0, #12
   3e838:	ldr	r1, [sp, #20]
   3e83c:	str	r0, [r1]
   3e840:	mov	r0, r9
   3e844:	sub	sp, fp, #28
   3e848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e84c:	ldr	r1, [sl, #64]	; 0x40
   3e850:	cmp	r1, #31
   3e854:	beq	3fccc <__assert_fail@plt+0x2d21c>
   3e858:	ldr	r0, [sl, #56]	; 0x38
   3e85c:	add	r6, r0, r1, lsl #5
   3e860:	add	r2, r1, #1
   3e864:	mov	r0, #0
   3e868:	mvn	r3, #0
   3e86c:	str	r2, [sl, #64]	; 0x40
   3e870:	str	r0, [r6, #4]!
   3e874:	str	r0, [r6, #8]
   3e878:	str	r0, [r6, #4]
   3e87c:	ldm	lr, {r1, r2}
   3e880:	str	r3, [r6, #28]
   3e884:	str	r0, [r6, #16]
   3e888:	str	r0, [r6, #12]
   3e88c:	bic	r0, r2, #786432	; 0xc0000
   3e890:	str	r1, [r6, #20]
   3e894:	str	r0, [r6, #24]
   3e898:	ldr	r4, [sp, #28]
   3e89c:	mov	r0, lr
   3e8a0:	mov	r2, ip
   3e8a4:	mov	r1, r4
   3e8a8:	bl	3cb38 <__assert_fail@plt+0x2a088>
   3e8ac:	ldr	r1, [r4, #40]	; 0x28
   3e8b0:	mov	r9, r6
   3e8b4:	add	r0, r1, r0
   3e8b8:	str	r0, [r4, #40]	; 0x28
   3e8bc:	mov	r0, r9
   3e8c0:	sub	sp, fp, #28
   3e8c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e8c8:	ldrb	r0, [r7, #4]
   3e8cc:	cmp	r0, #9
   3e8d0:	bne	3fdec <__assert_fail@plt+0x2d33c>
   3e8d4:	mov	lr, r7
   3e8d8:	cmp	r4, #8
   3e8dc:	bhi	3e8f0 <__assert_fail@plt+0x2be40>
   3e8e0:	ldr	r0, [sl, #84]	; 0x54
   3e8e4:	mov	r1, #1
   3e8e8:	orr	r0, r0, r1, lsl r4
   3e8ec:	str	r0, [sl, #84]	; 0x54
   3e8f0:	ldr	r1, [sl, #64]	; 0x40
   3e8f4:	ldr	ip, [sp, #48]	; 0x30
   3e8f8:	cmp	r1, #31
   3e8fc:	beq	3fc30 <__assert_fail@plt+0x2d180>
   3e900:	ldr	r0, [sl, #56]	; 0x38
   3e904:	add	r0, r0, r1, lsl #5
   3e908:	add	r2, r1, #1
   3e90c:	mov	r1, #0
   3e910:	cmp	r9, #0
   3e914:	mvn	r3, #0
   3e918:	str	r2, [sl, #64]	; 0x40
   3e91c:	mov	r2, #17
   3e920:	mov	r7, r0
   3e924:	str	r1, [r7, #4]!
   3e928:	add	r6, r7, #20
   3e92c:	str	r9, [r7, #4]
   3e930:	str	r1, [r7, #8]
   3e934:	str	r1, [r7, #12]
   3e938:	str	r1, [r7, #16]
   3e93c:	stm	r6, {r1, r2, r3}
   3e940:	strne	r7, [r9]
   3e944:	str	r4, [r0, #24]
   3e948:	mov	r0, lr
   3e94c:	mov	r1, r5
   3e950:	mov	r2, ip
   3e954:	bl	3cb38 <__assert_fail@plt+0x2a088>
   3e958:	ldr	r1, [r5, #40]	; 0x28
   3e95c:	ldr	ip, [sp, #48]	; 0x30
   3e960:	ldr	lr, [sp, #44]	; 0x2c
   3e964:	mov	r4, #0
   3e968:	add	r0, r1, r0
   3e96c:	str	r0, [r5, #40]	; 0x28
   3e970:	and	r0, ip, #16777216	; 0x1000000
   3e974:	str	r0, [sp, #32]
   3e978:	and	r0, ip, #2097152	; 0x200000
   3e97c:	str	r0, [sp, #16]
   3e980:	add	r0, sl, #56	; 0x38
   3e984:	str	r0, [sp, #60]	; 0x3c
   3e988:	add	r0, sl, #64	; 0x40
   3e98c:	str	r0, [sp, #24]
   3e990:	ldrb	r0, [lr, #4]
   3e994:	mov	r9, r7
   3e998:	cmp	r0, #23
   3e99c:	bls	3e9c4 <__assert_fail@plt+0x2bf14>
   3e9a0:	b	3f8a8 <__assert_fail@plt+0x2cdf8>
   3e9a4:	ldrb	r1, [lr, #4]
   3e9a8:	cmp	r1, #23
   3e9ac:	cmpne	r1, #11
   3e9b0:	beq	3f7f4 <__assert_fail@plt+0x2cd44>
   3e9b4:	ldrb	r0, [lr, #4]
   3e9b8:	mov	r9, r7
   3e9bc:	cmp	r0, #23
   3e9c0:	bhi	3f8a8 <__assert_fail@plt+0x2cdf8>
   3e9c4:	movw	r2, #2048	; 0x800
   3e9c8:	mov	r1, #1
   3e9cc:	movt	r2, #140	; 0x8c
   3e9d0:	tst	r2, r1, lsl r0
   3e9d4:	beq	3f8a8 <__assert_fail@plt+0x2cdf8>
   3e9d8:	cmp	r0, #23
   3e9dc:	str	r9, [sp, #40]	; 0x28
   3e9e0:	bne	3ea90 <__assert_fail@plt+0x2bfe0>
   3e9e4:	ldr	r9, [r5, #40]	; 0x28
   3e9e8:	ldm	lr, {r7, sl}
   3e9ec:	mov	r6, r5
   3e9f0:	mvn	r2, #0
   3e9f4:	mov	r8, r2
   3e9f8:	mov	r0, lr
   3e9fc:	mov	r1, r6
   3ea00:	mov	r2, ip
   3ea04:	mov	r5, r6
   3ea08:	bl	3cb38 <__assert_fail@plt+0x2a088>
   3ea0c:	ldr	r1, [r6, #40]	; 0x28
   3ea10:	ldr	lr, [sp, #44]	; 0x2c
   3ea14:	add	r0, r1, r0
   3ea18:	str	r0, [r6, #40]	; 0x28
   3ea1c:	ldrb	r0, [lr, #4]
   3ea20:	ldrb	r1, [lr]
   3ea24:	cmp	r0, #24
   3ea28:	beq	3eaac <__assert_fail@plt+0x2bffc>
   3ea2c:	cmp	r0, #2
   3ea30:	beq	3f108 <__assert_fail@plt+0x2c658>
   3ea34:	cmp	r1, #44	; 0x2c
   3ea38:	beq	3eaac <__assert_fail@plt+0x2bffc>
   3ea3c:	ldr	ip, [sp, #48]	; 0x30
   3ea40:	mvn	r2, #1
   3ea44:	cmp	r1, #48	; 0x30
   3ea48:	bcc	3e9f4 <__assert_fail@plt+0x2bf44>
   3ea4c:	cmp	r0, #1
   3ea50:	bne	3e9f4 <__assert_fail@plt+0x2bf44>
   3ea54:	cmn	r8, #2
   3ea58:	beq	3e9f4 <__assert_fail@plt+0x2bf44>
   3ea5c:	cmp	r1, #57	; 0x39
   3ea60:	bhi	3e9f4 <__assert_fail@plt+0x2bf44>
   3ea64:	cmn	r8, #1
   3ea68:	beq	3ea88 <__assert_fail@plt+0x2bfd8>
   3ea6c:	add	r0, r8, r8, lsl #2
   3ea70:	add	r0, r1, r0, lsl #1
   3ea74:	movw	r1, #32816	; 0x8030
   3ea78:	cmp	r0, r1
   3ea7c:	movge	r0, r1
   3ea80:	sub	r2, r0, #48	; 0x30
   3ea84:	b	3e9f4 <__assert_fail@plt+0x2bf44>
   3ea88:	sub	r2, r1, #48	; 0x30
   3ea8c:	b	3e9f4 <__assert_fail@plt+0x2bf44>
   3ea90:	cmp	r0, #19
   3ea94:	sub	r0, r0, #18
   3ea98:	mvn	sl, #0
   3ea9c:	clz	r0, r0
   3eaa0:	movweq	sl, #1
   3eaa4:	lsr	r8, r0, #5
   3eaa8:	b	3ec60 <__assert_fail@plt+0x2c1b0>
   3eaac:	cmn	r8, #1
   3eab0:	bne	3eaf4 <__assert_fail@plt+0x2c044>
   3eab4:	ldr	ip, [sp, #48]	; 0x30
   3eab8:	cmp	r1, #44	; 0x2c
   3eabc:	moveq	r8, #0
   3eac0:	cmpeq	r0, #1
   3eac4:	beq	3eb50 <__assert_fail@plt+0x2c0a0>
   3eac8:	ldr	r0, [sp, #20]
   3eacc:	mov	r1, #10
   3ead0:	str	r1, [r0]
   3ead4:	ldr	r9, [sp, #40]	; 0x28
   3ead8:	mov	r7, #0
   3eadc:	mov	r5, r6
   3eae0:	clz	r0, r7
   3eae4:	cmp	r7, #0
   3eae8:	lsr	r0, r0, #5
   3eaec:	beq	3f7d4 <__assert_fail@plt+0x2cd24>
   3eaf0:	b	3f7e4 <__assert_fail@plt+0x2cd34>
   3eaf4:	ldr	ip, [sp, #48]	; 0x30
   3eaf8:	cmn	r8, #2
   3eafc:	beq	3eb14 <__assert_fail@plt+0x2c064>
   3eb00:	cmp	r0, #24
   3eb04:	beq	3ec0c <__assert_fail@plt+0x2c15c>
   3eb08:	cmp	r0, #1
   3eb0c:	cmpeq	r1, #44	; 0x2c
   3eb10:	beq	3eb50 <__assert_fail@plt+0x2c0a0>
   3eb14:	ldr	r1, [sp, #16]
   3eb18:	cmp	r1, #0
   3eb1c:	beq	3f118 <__assert_fail@plt+0x2c668>
   3eb20:	mov	r0, #1
   3eb24:	str	r9, [r6, #40]	; 0x28
   3eb28:	mov	r5, r6
   3eb2c:	bfi	sl, r0, #0, #8
   3eb30:	stm	lr, {r7, sl}
   3eb34:	ldr	r9, [sp, #40]	; 0x28
   3eb38:	mov	r7, r9
   3eb3c:	clz	r0, r7
   3eb40:	cmp	r7, #0
   3eb44:	lsr	r0, r0, #5
   3eb48:	beq	3f7d4 <__assert_fail@plt+0x2cd24>
   3eb4c:	b	3f7e4 <__assert_fail@plt+0x2cd34>
   3eb50:	mvn	r2, #0
   3eb54:	str	r9, [sp, #56]	; 0x38
   3eb58:	mov	r9, r2
   3eb5c:	mov	r0, lr
   3eb60:	mov	r1, r6
   3eb64:	mov	r2, ip
   3eb68:	mov	r5, r6
   3eb6c:	bl	3cb38 <__assert_fail@plt+0x2a088>
   3eb70:	ldr	r1, [r6, #40]	; 0x28
   3eb74:	ldr	lr, [sp, #44]	; 0x2c
   3eb78:	add	r0, r1, r0
   3eb7c:	str	r0, [r6, #40]	; 0x28
   3eb80:	ldrb	r0, [lr, #4]
   3eb84:	cmp	r0, #24
   3eb88:	beq	3ebf4 <__assert_fail@plt+0x2c144>
   3eb8c:	cmp	r0, #2
   3eb90:	beq	3f574 <__assert_fail@plt+0x2cac4>
   3eb94:	ldrb	r1, [lr]
   3eb98:	ldr	ip, [sp, #48]	; 0x30
   3eb9c:	cmp	r1, #44	; 0x2c
   3eba0:	beq	3ebf8 <__assert_fail@plt+0x2c148>
   3eba4:	mvn	r2, #1
   3eba8:	cmp	r1, #48	; 0x30
   3ebac:	bcc	3eb58 <__assert_fail@plt+0x2c0a8>
   3ebb0:	cmp	r0, #1
   3ebb4:	bne	3eb58 <__assert_fail@plt+0x2c0a8>
   3ebb8:	cmn	r9, #2
   3ebbc:	beq	3eb58 <__assert_fail@plt+0x2c0a8>
   3ebc0:	cmp	r1, #57	; 0x39
   3ebc4:	bhi	3eb58 <__assert_fail@plt+0x2c0a8>
   3ebc8:	cmn	r9, #1
   3ebcc:	beq	3ebec <__assert_fail@plt+0x2c13c>
   3ebd0:	add	r0, r9, r9, lsl #2
   3ebd4:	add	r0, r1, r0, lsl #1
   3ebd8:	movw	r1, #32816	; 0x8030
   3ebdc:	cmp	r0, r1
   3ebe0:	movge	r0, r1
   3ebe4:	sub	r2, r0, #48	; 0x30
   3ebe8:	b	3eb58 <__assert_fail@plt+0x2c0a8>
   3ebec:	sub	r2, r1, #48	; 0x30
   3ebf0:	b	3eb58 <__assert_fail@plt+0x2c0a8>
   3ebf4:	ldr	ip, [sp, #48]	; 0x30
   3ebf8:	mov	r2, r9
   3ebfc:	ldr	r9, [sp, #56]	; 0x38
   3ec00:	cmn	r2, #2
   3ec04:	bne	3ec18 <__assert_fail@plt+0x2c168>
   3ec08:	b	3eb14 <__assert_fail@plt+0x2c064>
   3ec0c:	mov	r2, r8
   3ec10:	cmn	r2, #2
   3ec14:	beq	3eb14 <__assert_fail@plt+0x2c064>
   3ec18:	ldr	r9, [sp, #40]	; 0x28
   3ec1c:	cmp	r8, r2
   3ec20:	mov	r1, #0
   3ec24:	mov	r5, r6
   3ec28:	movwle	r1, #1
   3ec2c:	cmp	r0, #24
   3ec30:	bne	3f534 <__assert_fail@plt+0x2ca84>
   3ec34:	add	r0, r2, #1
   3ec38:	mov	sl, r2
   3ec3c:	clz	r0, r0
   3ec40:	lsr	r0, r0, #5
   3ec44:	orrs	r0, r1, r0
   3ec48:	beq	3f534 <__assert_fail@plt+0x2ca84>
   3ec4c:	cmn	sl, #1
   3ec50:	mov	r0, sl
   3ec54:	moveq	r0, r8
   3ec58:	cmp	r0, #32768	; 0x8000
   3ec5c:	bge	3f704 <__assert_fail@plt+0x2cc54>
   3ec60:	mov	r0, lr
   3ec64:	mov	r1, r5
   3ec68:	mov	r2, ip
   3ec6c:	bl	3cb38 <__assert_fail@plt+0x2a088>
   3ec70:	ldr	r1, [r5, #40]	; 0x28
   3ec74:	mov	r7, #0
   3ec78:	cmp	r9, #0
   3ec7c:	add	r0, r1, r0
   3ec80:	str	r0, [r5, #40]	; 0x28
   3ec84:	beq	3f130 <__assert_fail@plt+0x2c680>
   3ec88:	ldr	ip, [sp, #48]	; 0x30
   3ec8c:	orrs	r0, sl, r8
   3ec90:	beq	3f14c <__assert_fail@plt+0x2c69c>
   3ec94:	mov	r0, #0
   3ec98:	cmp	r8, #1
   3ec9c:	mov	r7, r9
   3eca0:	str	r0, [sp, #36]	; 0x24
   3eca4:	ldr	lr, [sp, #44]	; 0x2c
   3eca8:	ldr	r5, [sp, #24]
   3ecac:	bge	3f210 <__assert_fail@plt+0x2c760>
   3ecb0:	ldrb	r0, [r7, #24]
   3ecb4:	cmp	r0, #17
   3ecb8:	bne	3ed2c <__assert_fail@plt+0x2c27c>
   3ecbc:	ldr	r0, [r7, #20]
   3ecc0:	mov	r2, r7
   3ecc4:	mov	r1, r2
   3ecc8:	ldr	r2, [r2, #4]
   3eccc:	cmp	r2, #0
   3ecd0:	bne	3ecc4 <__assert_fail@plt+0x2c214>
   3ecd4:	ldr	r2, [r1, #8]
   3ecd8:	cmp	r2, #0
   3ecdc:	bne	3ecc4 <__assert_fail@plt+0x2c214>
   3ece0:	ldr	r2, [r1, #24]
   3ece4:	uxtb	r3, r2
   3ece8:	cmp	r3, #17
   3ecec:	bne	3ed00 <__assert_fail@plt+0x2c250>
   3ecf0:	ldr	r3, [r1, #20]
   3ecf4:	cmp	r3, r0
   3ecf8:	orreq	r2, r2, #524288	; 0x80000
   3ecfc:	streq	r2, [r1, #24]
   3ed00:	ldr	r3, [r1]
   3ed04:	cmp	r3, #0
   3ed08:	beq	3ed2c <__assert_fail@plt+0x2c27c>
   3ed0c:	ldr	r2, [r3, #8]
   3ed10:	cmp	r2, r1
   3ed14:	mov	r1, r3
   3ed18:	beq	3ece0 <__assert_fail@plt+0x2c230>
   3ed1c:	cmp	r2, #0
   3ed20:	mov	r1, r3
   3ed24:	beq	3ece0 <__assert_fail@plt+0x2c230>
   3ed28:	b	3ecc4 <__assert_fail@plt+0x2c214>
   3ed2c:	ldr	r1, [r5]
   3ed30:	cmn	sl, #1
   3ed34:	mov	r6, #10
   3ed38:	movweq	r6, #11
   3ed3c:	cmp	r1, #31
   3ed40:	beq	3f4d8 <__assert_fail@plt+0x2ca28>
   3ed44:	ldr	r0, [sp, #60]	; 0x3c
   3ed48:	ldr	r0, [r0]
   3ed4c:	add	r9, r0, r1, lsl #5
   3ed50:	add	r2, r1, #1
   3ed54:	mvn	r0, #0
   3ed58:	str	r2, [r5]
   3ed5c:	str	r4, [r9, #4]!
   3ed60:	str	r7, [r9, #4]
   3ed64:	str	r4, [r9, #8]
   3ed68:	str	r4, [r9, #12]
   3ed6c:	str	r4, [r9, #16]
   3ed70:	str	r4, [r9, #20]
   3ed74:	str	r6, [r9, #24]
   3ed78:	str	r0, [r9, #28]
   3ed7c:	add	r0, r8, #2
   3ed80:	str	r9, [r7]
   3ed84:	cmp	r0, sl
   3ed88:	bgt	3f088 <__assert_fail@plt+0x2c5d8>
   3ed8c:	str	sl, [sp, #52]	; 0x34
   3ed90:	mov	sl, r9
   3ed94:	ldr	r1, [r5]
   3ed98:	str	r0, [sp, #56]	; 0x38
   3ed9c:	cmp	r1, #31
   3eda0:	beq	3efc0 <__assert_fail@plt+0x2c510>
   3eda4:	ldr	r0, [sp, #60]	; 0x3c
   3eda8:	ldr	r0, [r0]
   3edac:	add	r8, r0, r1, lsl #5
   3edb0:	add	r3, r1, #1
   3edb4:	add	r2, r7, #20
   3edb8:	sub	r6, fp, #80	; 0x50
   3edbc:	str	r3, [r5]
   3edc0:	str	r4, [r8, #4]!
   3edc4:	str	r4, [r8, #8]
   3edc8:	str	r4, [r8, #4]
   3edcc:	ldm	r2, {r0, r1}
   3edd0:	mvn	r2, #0
   3edd4:	str	r2, [r8, #28]
   3edd8:	str	r4, [r8, #16]
   3eddc:	str	r4, [r8, #12]
   3ede0:	str	r0, [r8, #20]
   3ede4:	bic	r0, r1, #786432	; 0xc0000
   3ede8:	str	r0, [r8, #24]
   3edec:	mov	r0, r8
   3edf0:	str	r8, [fp, #-80]	; 0xffffffb0
   3edf4:	str	r9, [r0]
   3edf8:	ldr	r0, [r6]
   3edfc:	ldr	r1, [r0, #24]
   3ee00:	orr	r1, r1, #262144	; 0x40000
   3ee04:	str	r1, [r0, #24]
   3ee08:	ldr	r0, [r7, #4]
   3ee0c:	ldr	r9, [r6]
   3ee10:	cmp	r0, #0
   3ee14:	beq	3ee78 <__assert_fail@plt+0x2c3c8>
   3ee18:	add	r6, r9, #4
   3ee1c:	mov	r7, r0
   3ee20:	ldr	r1, [r5]
   3ee24:	cmp	r1, #31
   3ee28:	beq	3eeb8 <__assert_fail@plt+0x2c408>
   3ee2c:	ldr	r0, [sp, #60]	; 0x3c
   3ee30:	ldr	r0, [r0]
   3ee34:	add	r0, r0, r1, lsl #5
   3ee38:	add	r3, r1, #1
   3ee3c:	add	r2, r7, #20
   3ee40:	str	r3, [r5]
   3ee44:	mvn	r3, #0
   3ee48:	str	r4, [r0, #4]!
   3ee4c:	str	r4, [r0, #8]
   3ee50:	str	r4, [r0, #4]
   3ee54:	ldm	r2, {r1, r2}
   3ee58:	str	r3, [r0, #28]
   3ee5c:	str	r4, [r0, #16]
   3ee60:	str	r4, [r0, #12]
   3ee64:	str	r1, [r0, #20]
   3ee68:	bic	r1, r2, #786432	; 0xc0000
   3ee6c:	str	r1, [r0, #24]
   3ee70:	str	r0, [r6]
   3ee74:	b	3edf4 <__assert_fail@plt+0x2c344>
   3ee78:	mov	r1, #0
   3ee7c:	mov	r0, r7
   3ee80:	ldr	r7, [r7, #8]
   3ee84:	cmp	r7, r1
   3ee88:	cmpne	r7, #0
   3ee8c:	bne	3eea8 <__assert_fail@plt+0x2c3f8>
   3ee90:	ldr	r7, [r0]
   3ee94:	ldr	r9, [r9]
   3ee98:	mov	r1, r0
   3ee9c:	cmp	r7, #0
   3eea0:	bne	3ee7c <__assert_fail@plt+0x2c3cc>
   3eea4:	b	3eeec <__assert_fail@plt+0x2c43c>
   3eea8:	add	r6, r9, #8
   3eeac:	ldr	r1, [r5]
   3eeb0:	cmp	r1, #31
   3eeb4:	bne	3ee2c <__assert_fail@plt+0x2c37c>
   3eeb8:	mov	r0, #996	; 0x3e4
   3eebc:	bl	35350 <__assert_fail@plt+0x228a0>
   3eec0:	cmp	r0, #0
   3eec4:	beq	3f034 <__assert_fail@plt+0x2c584>
   3eec8:	ldr	r2, [sp, #60]	; 0x3c
   3eecc:	ldr	ip, [sp, #48]	; 0x30
   3eed0:	ldr	lr, [sp, #44]	; 0x2c
   3eed4:	ldr	r1, [r2]
   3eed8:	str	r1, [r0]
   3eedc:	mov	r1, #0
   3eee0:	str	r0, [r2]
   3eee4:	str	r1, [r5]
   3eee8:	b	3ee34 <__assert_fail@plt+0x2c384>
   3eeec:	mov	r7, r8
   3eef0:	ldr	r1, [r5]
   3eef4:	cmp	r1, #31
   3eef8:	beq	3f050 <__assert_fail@plt+0x2c5a0>
   3eefc:	ldr	r0, [sp, #60]	; 0x3c
   3ef00:	ldr	r0, [r0]
   3ef04:	add	r6, r0, r1, lsl #5
   3ef08:	add	r2, r1, #1
   3ef0c:	mov	r0, #16
   3ef10:	cmp	r7, #0
   3ef14:	str	r2, [r5]
   3ef18:	str	r4, [r6, #4]!
   3ef1c:	str	sl, [r6, #4]
   3ef20:	str	r7, [r6, #8]
   3ef24:	str	r4, [r6, #12]
   3ef28:	str	r4, [r6, #16]
   3ef2c:	str	r4, [r6, #20]
   3ef30:	str	r0, [r6, #24]
   3ef34:	mvn	r0, #0
   3ef38:	str	r0, [r6, #28]
   3ef3c:	str	r6, [sl]
   3ef40:	beq	3f7ac <__assert_fail@plt+0x2ccfc>
   3ef44:	str	r6, [r7]
   3ef48:	ldr	r1, [r5]
   3ef4c:	cmp	r1, #31
   3ef50:	beq	3eff4 <__assert_fail@plt+0x2c544>
   3ef54:	ldr	r0, [sp, #60]	; 0x3c
   3ef58:	ldr	r0, [r0]
   3ef5c:	add	sl, r0, r1, lsl #5
   3ef60:	add	r2, r1, #1
   3ef64:	mov	r0, #10
   3ef68:	ldr	r1, [sp, #56]	; 0x38
   3ef6c:	str	r2, [r5]
   3ef70:	str	r4, [sl, #4]!
   3ef74:	str	r6, [sl, #4]
   3ef78:	str	r4, [sl, #8]
   3ef7c:	str	r4, [sl, #12]
   3ef80:	str	r4, [sl, #16]
   3ef84:	str	r4, [sl, #20]
   3ef88:	str	r0, [sl, #24]
   3ef8c:	mvn	r0, #0
   3ef90:	str	r0, [sl, #28]
   3ef94:	ldr	r0, [sp, #52]	; 0x34
   3ef98:	str	sl, [r6]
   3ef9c:	cmp	r1, r0
   3efa0:	bge	3f084 <__assert_fail@plt+0x2c5d4>
   3efa4:	ldr	r9, [r7]
   3efa8:	mov	r0, r1
   3efac:	add	r0, r1, #1
   3efb0:	ldr	r1, [r5]
   3efb4:	str	r0, [sp, #56]	; 0x38
   3efb8:	cmp	r1, #31
   3efbc:	bne	3eda4 <__assert_fail@plt+0x2c2f4>
   3efc0:	mov	r0, #996	; 0x3e4
   3efc4:	bl	35350 <__assert_fail@plt+0x228a0>
   3efc8:	cmp	r0, #0
   3efcc:	beq	3f028 <__assert_fail@plt+0x2c578>
   3efd0:	ldr	r2, [sp, #60]	; 0x3c
   3efd4:	ldr	ip, [sp, #48]	; 0x30
   3efd8:	ldr	lr, [sp, #44]	; 0x2c
   3efdc:	ldr	r1, [r2]
   3efe0:	str	r1, [r0]
   3efe4:	mov	r1, #0
   3efe8:	str	r0, [r2]
   3efec:	str	r1, [r5]
   3eff0:	b	3edac <__assert_fail@plt+0x2c2fc>
   3eff4:	mov	r0, #996	; 0x3e4
   3eff8:	bl	35350 <__assert_fail@plt+0x228a0>
   3effc:	ldr	lr, [sp, #44]	; 0x2c
   3f000:	ldr	ip, [sp, #48]	; 0x30
   3f004:	cmp	r0, #0
   3f008:	beq	3f7ac <__assert_fail@plt+0x2ccfc>
   3f00c:	ldr	r2, [sp, #60]	; 0x3c
   3f010:	ldr	r1, [r2]
   3f014:	str	r1, [r0]
   3f018:	mov	r1, #0
   3f01c:	str	r0, [r2]
   3f020:	str	r1, [r5]
   3f024:	b	3ef5c <__assert_fail@plt+0x2c4ac>
   3f028:	mov	r7, #0
   3f02c:	str	r7, [fp, #-80]	; 0xffffffb0
   3f030:	b	3f03c <__assert_fail@plt+0x2c58c>
   3f034:	mov	r7, #0
   3f038:	str	r7, [r6]
   3f03c:	ldr	ip, [sp, #48]	; 0x30
   3f040:	ldr	lr, [sp, #44]	; 0x2c
   3f044:	ldr	r1, [r5]
   3f048:	cmp	r1, #31
   3f04c:	bne	3eefc <__assert_fail@plt+0x2c44c>
   3f050:	mov	r0, #996	; 0x3e4
   3f054:	bl	35350 <__assert_fail@plt+0x228a0>
   3f058:	ldr	lr, [sp, #44]	; 0x2c
   3f05c:	ldr	ip, [sp, #48]	; 0x30
   3f060:	cmp	r0, #0
   3f064:	beq	3f7ac <__assert_fail@plt+0x2ccfc>
   3f068:	ldr	r2, [sp, #60]	; 0x3c
   3f06c:	ldr	r1, [r2]
   3f070:	str	r1, [r0]
   3f074:	mov	r1, #0
   3f078:	str	r0, [r2]
   3f07c:	str	r1, [r5]
   3f080:	b	3ef04 <__assert_fail@plt+0x2c454>
   3f084:	mov	r9, sl
   3f088:	ldr	r6, [sp, #36]	; 0x24
   3f08c:	ldr	r8, [sp, #28]
   3f090:	cmp	r6, #0
   3f094:	beq	3f0ec <__assert_fail@plt+0x2c63c>
   3f098:	ldr	r1, [r5]
   3f09c:	cmp	r1, #31
   3f0a0:	beq	3f540 <__assert_fail@plt+0x2ca90>
   3f0a4:	ldr	r0, [sp, #60]	; 0x3c
   3f0a8:	ldr	r0, [r0]
   3f0ac:	add	r7, r0, r1, lsl #5
   3f0b0:	add	r2, r1, #1
   3f0b4:	mov	r0, #0
   3f0b8:	mov	r1, #16
   3f0bc:	str	r2, [r5]
   3f0c0:	str	r0, [r7, #4]!
   3f0c4:	stmib	r7, {r6, r9}
   3f0c8:	str	r0, [r7, #12]
   3f0cc:	str	r0, [r7, #16]
   3f0d0:	str	r0, [r7, #20]
   3f0d4:	str	r1, [r7, #24]
   3f0d8:	mvn	r1, #0
   3f0dc:	str	r1, [r7, #28]
   3f0e0:	str	r7, [r6]
   3f0e4:	str	r7, [r9]
   3f0e8:	b	3f0f4 <__assert_fail@plt+0x2c644>
   3f0ec:	mov	r0, #0
   3f0f0:	mov	r7, r9
   3f0f4:	mov	r5, r8
   3f0f8:	ldr	r1, [sp, #32]
   3f0fc:	cmp	r1, #0
   3f100:	beq	3e9b4 <__assert_fail@plt+0x2bf04>
   3f104:	b	3e9a4 <__assert_fail@plt+0x2bef4>
   3f108:	ldr	ip, [sp, #48]	; 0x30
   3f10c:	ldr	r1, [sp, #16]
   3f110:	cmp	r1, #0
   3f114:	bne	3eb20 <__assert_fail@plt+0x2c070>
   3f118:	ldr	r1, [sp, #20]
   3f11c:	cmp	r0, #2
   3f120:	mov	r0, #10
   3f124:	movweq	r0, #9
   3f128:	str	r0, [r1]
   3f12c:	b	3ead4 <__assert_fail@plt+0x2c024>
   3f130:	ldr	ip, [sp, #48]	; 0x30
   3f134:	ldr	lr, [sp, #44]	; 0x2c
   3f138:	clz	r0, r7
   3f13c:	cmp	r7, #0
   3f140:	lsr	r0, r0, #5
   3f144:	beq	3f7d4 <__assert_fail@plt+0x2cd24>
   3f148:	b	3f7e4 <__assert_fail@plt+0x2cd34>
   3f14c:	ldr	lr, [sp, #44]	; 0x2c
   3f150:	mov	r0, r9
   3f154:	mov	r6, r0
   3f158:	ldr	r0, [r0, #4]
   3f15c:	cmp	r0, #0
   3f160:	bne	3f154 <__assert_fail@plt+0x2c6a4>
   3f164:	ldr	r0, [r6, #8]
   3f168:	cmp	r0, #0
   3f16c:	bne	3f154 <__assert_fail@plt+0x2c6a4>
   3f170:	ldr	r0, [r6, #24]
   3f174:	movw	r1, #255	; 0xff
   3f178:	movt	r1, #4
   3f17c:	and	r0, r0, r1
   3f180:	cmp	r0, #3
   3f184:	beq	3f1b8 <__assert_fail@plt+0x2c708>
   3f188:	cmp	r0, #6
   3f18c:	bne	3f1cc <__assert_fail@plt+0x2c71c>
   3f190:	ldr	r5, [r6, #20]
   3f194:	ldr	r0, [r5]
   3f198:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f19c:	ldr	r0, [r5, #4]
   3f1a0:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f1a4:	ldr	r0, [r5, #8]
   3f1a8:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f1ac:	ldr	r0, [r5, #12]
   3f1b0:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f1b4:	b	3f1bc <__assert_fail@plt+0x2c70c>
   3f1b8:	ldr	r5, [r6, #20]
   3f1bc:	mov	r0, r5
   3f1c0:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f1c4:	ldr	ip, [sp, #48]	; 0x30
   3f1c8:	ldr	lr, [sp, #44]	; 0x2c
   3f1cc:	ldr	r1, [r6]
   3f1d0:	cmp	r1, #0
   3f1d4:	beq	3f1f8 <__assert_fail@plt+0x2c748>
   3f1d8:	ldr	r0, [r1, #8]
   3f1dc:	cmp	r0, r6
   3f1e0:	mov	r6, r1
   3f1e4:	beq	3f170 <__assert_fail@plt+0x2c6c0>
   3f1e8:	cmp	r0, #0
   3f1ec:	mov	r6, r1
   3f1f0:	beq	3f170 <__assert_fail@plt+0x2c6c0>
   3f1f4:	b	3f154 <__assert_fail@plt+0x2c6a4>
   3f1f8:	ldr	r5, [sp, #28]
   3f1fc:	clz	r0, r7
   3f200:	cmp	r7, #0
   3f204:	lsr	r0, r0, #5
   3f208:	beq	3f7d4 <__assert_fail@plt+0x2cd24>
   3f20c:	b	3f7e4 <__assert_fail@plt+0x2cd34>
   3f210:	mov	r3, r9
   3f214:	str	sl, [sp, #52]	; 0x34
   3f218:	str	r9, [sp, #36]	; 0x24
   3f21c:	beq	3f50c <__assert_fail@plt+0x2ca5c>
   3f220:	ldr	sl, [sp, #40]	; 0x28
   3f224:	ldr	r0, [sl]
   3f228:	mov	r3, sl
   3f22c:	str	r0, [sp, #36]	; 0x24
   3f230:	mov	r0, #2
   3f234:	ldr	r1, [r5]
   3f238:	str	r0, [sp, #56]	; 0x38
   3f23c:	cmp	r1, #31
   3f240:	beq	3f41c <__assert_fail@plt+0x2c96c>
   3f244:	ldr	r0, [sp, #60]	; 0x3c
   3f248:	ldr	r0, [r0]
   3f24c:	add	r6, r0, r1, lsl #5
   3f250:	add	r2, r3, #20
   3f254:	mov	r9, r3
   3f258:	add	r3, r1, #1
   3f25c:	sub	r7, fp, #80	; 0x50
   3f260:	str	r3, [r5]
   3f264:	str	r4, [r6, #4]!
   3f268:	str	r4, [r6, #8]
   3f26c:	str	r4, [r6, #4]
   3f270:	ldm	r2, {r0, r1}
   3f274:	mvn	r2, #0
   3f278:	str	r2, [r6, #28]
   3f27c:	str	r4, [r6, #16]
   3f280:	str	r4, [r6, #12]
   3f284:	str	r0, [r6, #20]
   3f288:	bic	r0, r1, #786432	; 0xc0000
   3f28c:	str	r0, [r6, #24]
   3f290:	mov	r0, r6
   3f294:	str	r6, [fp, #-80]	; 0xffffffb0
   3f298:	ldr	r1, [sp, #36]	; 0x24
   3f29c:	str	r1, [r0]
   3f2a0:	ldr	r0, [r7]
   3f2a4:	ldr	r1, [r0, #24]
   3f2a8:	orr	r1, r1, #262144	; 0x40000
   3f2ac:	str	r1, [r0, #24]
   3f2b0:	ldr	r0, [r9, #4]
   3f2b4:	ldr	r1, [r7]
   3f2b8:	cmp	r0, #0
   3f2bc:	str	r1, [sp, #36]	; 0x24
   3f2c0:	beq	3f324 <__assert_fail@plt+0x2c874>
   3f2c4:	add	r7, r1, #4
   3f2c8:	mov	r9, r0
   3f2cc:	ldr	r1, [r5]
   3f2d0:	cmp	r1, #31
   3f2d4:	beq	3f370 <__assert_fail@plt+0x2c8c0>
   3f2d8:	ldr	r0, [sp, #60]	; 0x3c
   3f2dc:	ldr	r0, [r0]
   3f2e0:	add	r0, r0, r1, lsl #5
   3f2e4:	add	r3, r1, #1
   3f2e8:	add	r2, r9, #20
   3f2ec:	str	r3, [r5]
   3f2f0:	mvn	r3, #0
   3f2f4:	str	r4, [r0, #4]!
   3f2f8:	str	r4, [r0, #8]
   3f2fc:	str	r4, [r0, #4]
   3f300:	ldm	r2, {r1, r2}
   3f304:	str	r3, [r0, #28]
   3f308:	str	r4, [r0, #16]
   3f30c:	str	r4, [r0, #12]
   3f310:	str	r1, [r0, #20]
   3f314:	bic	r1, r2, #786432	; 0xc0000
   3f318:	str	r1, [r0, #24]
   3f31c:	str	r0, [r7]
   3f320:	b	3f298 <__assert_fail@plt+0x2c7e8>
   3f324:	mov	r1, #0
   3f328:	mov	r0, r9
   3f32c:	ldr	r9, [r9, #8]
   3f330:	cmp	r9, r1
   3f334:	cmpne	r9, #0
   3f338:	bne	3f35c <__assert_fail@plt+0x2c8ac>
   3f33c:	ldr	r1, [sp, #36]	; 0x24
   3f340:	ldr	r9, [r0]
   3f344:	ldr	r1, [r1]
   3f348:	cmp	r9, #0
   3f34c:	str	r1, [sp, #36]	; 0x24
   3f350:	mov	r1, r0
   3f354:	bne	3f328 <__assert_fail@plt+0x2c878>
   3f358:	b	3f3a4 <__assert_fail@plt+0x2c8f4>
   3f35c:	ldr	r0, [sp, #36]	; 0x24
   3f360:	add	r7, r0, #8
   3f364:	ldr	r1, [r5]
   3f368:	cmp	r1, #31
   3f36c:	bne	3f2d8 <__assert_fail@plt+0x2c828>
   3f370:	mov	r0, #996	; 0x3e4
   3f374:	bl	35350 <__assert_fail@plt+0x228a0>
   3f378:	cmp	r0, #0
   3f37c:	beq	3f4b8 <__assert_fail@plt+0x2ca08>
   3f380:	ldr	r2, [sp, #60]	; 0x3c
   3f384:	ldr	ip, [sp, #48]	; 0x30
   3f388:	ldr	lr, [sp, #44]	; 0x2c
   3f38c:	ldr	r1, [r2]
   3f390:	str	r1, [r0]
   3f394:	mov	r1, #0
   3f398:	str	r0, [r2]
   3f39c:	str	r1, [r5]
   3f3a0:	b	3f2e0 <__assert_fail@plt+0x2c830>
   3f3a4:	mov	r3, r6
   3f3a8:	ldr	r1, [r5]
   3f3ac:	cmp	r1, #31
   3f3b0:	beq	3f47c <__assert_fail@plt+0x2c9cc>
   3f3b4:	ldr	r0, [sp, #60]	; 0x3c
   3f3b8:	ldr	r0, [r0]
   3f3bc:	add	r2, r1, #1
   3f3c0:	add	r1, r0, r1, lsl #5
   3f3c4:	mov	r0, #16
   3f3c8:	cmp	r3, #0
   3f3cc:	str	r2, [r5]
   3f3d0:	str	r4, [r1, #4]!
   3f3d4:	str	sl, [r1, #4]
   3f3d8:	str	r3, [r1, #8]
   3f3dc:	str	r4, [r1, #12]
   3f3e0:	str	r4, [r1, #16]
   3f3e4:	str	r4, [r1, #20]
   3f3e8:	str	r0, [r1, #24]
   3f3ec:	mvn	r0, #0
   3f3f0:	str	r1, [sp, #36]	; 0x24
   3f3f4:	str	r0, [r1, #28]
   3f3f8:	str	r1, [sl]
   3f3fc:	beq	3f7ac <__assert_fail@plt+0x2ccfc>
   3f400:	ldr	r1, [sp, #56]	; 0x38
   3f404:	ldr	sl, [sp, #36]	; 0x24
   3f408:	add	r0, r1, #1
   3f40c:	cmp	r1, r8
   3f410:	str	sl, [r3]
   3f414:	bne	3f234 <__assert_fail@plt+0x2c784>
   3f418:	b	3f50c <__assert_fail@plt+0x2ca5c>
   3f41c:	mov	r0, #996	; 0x3e4
   3f420:	mov	r6, r3
   3f424:	bl	35350 <__assert_fail@plt+0x228a0>
   3f428:	cmp	r0, #0
   3f42c:	beq	3f45c <__assert_fail@plt+0x2c9ac>
   3f430:	ldr	r2, [sp, #60]	; 0x3c
   3f434:	ldr	r5, [sp, #24]
   3f438:	ldr	ip, [sp, #48]	; 0x30
   3f43c:	ldr	lr, [sp, #44]	; 0x2c
   3f440:	mov	r3, r6
   3f444:	ldr	r1, [r2]
   3f448:	str	r1, [r0]
   3f44c:	mov	r1, #0
   3f450:	str	r0, [r2]
   3f454:	str	r1, [r5]
   3f458:	b	3f24c <__assert_fail@plt+0x2c79c>
   3f45c:	ldr	ip, [sp, #48]	; 0x30
   3f460:	ldr	lr, [sp, #44]	; 0x2c
   3f464:	ldr	r5, [sp, #24]
   3f468:	mov	r3, #0
   3f46c:	str	r3, [fp, #-80]	; 0xffffffb0
   3f470:	ldr	r1, [r5]
   3f474:	cmp	r1, #31
   3f478:	bne	3f3b4 <__assert_fail@plt+0x2c904>
   3f47c:	mov	r0, #996	; 0x3e4
   3f480:	mov	r6, r3
   3f484:	bl	35350 <__assert_fail@plt+0x228a0>
   3f488:	ldr	lr, [sp, #44]	; 0x2c
   3f48c:	ldr	ip, [sp, #48]	; 0x30
   3f490:	cmp	r0, #0
   3f494:	beq	3f7ac <__assert_fail@plt+0x2ccfc>
   3f498:	ldr	r2, [sp, #60]	; 0x3c
   3f49c:	mov	r3, r6
   3f4a0:	ldr	r1, [r2]
   3f4a4:	str	r1, [r0]
   3f4a8:	mov	r1, #0
   3f4ac:	str	r0, [r2]
   3f4b0:	str	r1, [r5]
   3f4b4:	b	3f3bc <__assert_fail@plt+0x2c90c>
   3f4b8:	ldr	ip, [sp, #48]	; 0x30
   3f4bc:	ldr	lr, [sp, #44]	; 0x2c
   3f4c0:	mov	r3, #0
   3f4c4:	str	r3, [r7]
   3f4c8:	ldr	r1, [r5]
   3f4cc:	cmp	r1, #31
   3f4d0:	bne	3f3b4 <__assert_fail@plt+0x2c904>
   3f4d4:	b	3f47c <__assert_fail@plt+0x2c9cc>
   3f4d8:	mov	r0, #996	; 0x3e4
   3f4dc:	bl	35350 <__assert_fail@plt+0x228a0>
   3f4e0:	ldr	lr, [sp, #44]	; 0x2c
   3f4e4:	ldr	ip, [sp, #48]	; 0x30
   3f4e8:	cmp	r0, #0
   3f4ec:	beq	3f7ac <__assert_fail@plt+0x2ccfc>
   3f4f0:	ldr	r2, [sp, #60]	; 0x3c
   3f4f4:	ldr	r1, [r2]
   3f4f8:	str	r1, [r0]
   3f4fc:	mov	r1, #0
   3f500:	str	r0, [r2]
   3f504:	str	r1, [r5]
   3f508:	b	3ed4c <__assert_fail@plt+0x2c29c>
   3f50c:	ldr	sl, [sp, #52]	; 0x34
   3f510:	mov	r0, #0
   3f514:	cmp	r8, sl
   3f518:	bne	3f58c <__assert_fail@plt+0x2cadc>
   3f51c:	ldr	r7, [sp, #36]	; 0x24
   3f520:	ldr	r5, [sp, #28]
   3f524:	ldr	r1, [sp, #32]
   3f528:	cmp	r1, #0
   3f52c:	beq	3e9b4 <__assert_fail@plt+0x2bf04>
   3f530:	b	3e9a4 <__assert_fail@plt+0x2bef4>
   3f534:	ldr	r0, [sp, #20]
   3f538:	mov	r1, #10
   3f53c:	b	3f70c <__assert_fail@plt+0x2cc5c>
   3f540:	mov	r0, #996	; 0x3e4
   3f544:	bl	35350 <__assert_fail@plt+0x228a0>
   3f548:	cmp	r0, #0
   3f54c:	beq	3f728 <__assert_fail@plt+0x2cc78>
   3f550:	ldr	r2, [sp, #60]	; 0x3c
   3f554:	ldr	ip, [sp, #48]	; 0x30
   3f558:	ldr	lr, [sp, #44]	; 0x2c
   3f55c:	ldr	r1, [r2]
   3f560:	str	r1, [r0]
   3f564:	mov	r1, #0
   3f568:	str	r0, [r2]
   3f56c:	str	r1, [r5]
   3f570:	b	3f0ac <__assert_fail@plt+0x2c5fc>
   3f574:	ldr	ip, [sp, #48]	; 0x30
   3f578:	ldr	r9, [sp, #56]	; 0x38
   3f57c:	ldr	r1, [sp, #16]
   3f580:	cmp	r1, #0
   3f584:	bne	3eb20 <__assert_fail@plt+0x2c070>
   3f588:	b	3f118 <__assert_fail@plt+0x2c668>
   3f58c:	mov	r6, r3
   3f590:	ldr	r1, [r5]
   3f594:	ldr	r9, [r6], #20
   3f598:	cmp	r1, #31
   3f59c:	beq	3f750 <__assert_fail@plt+0x2cca0>
   3f5a0:	ldr	r0, [sp, #60]	; 0x3c
   3f5a4:	ldr	r0, [r0]
   3f5a8:	add	r7, r0, r1, lsl #5
   3f5ac:	add	r2, r1, #1
   3f5b0:	str	r2, [r5]
   3f5b4:	mvn	r2, #0
   3f5b8:	str	r4, [r7, #4]!
   3f5bc:	str	r4, [r7, #8]
   3f5c0:	str	r4, [r7, #4]
   3f5c4:	ldm	r6, {r0, r1}
   3f5c8:	str	r2, [r7, #28]
   3f5cc:	str	r4, [r7, #16]
   3f5d0:	str	r4, [r7, #12]
   3f5d4:	sub	r6, fp, #80	; 0x50
   3f5d8:	str	r0, [r7, #20]
   3f5dc:	bic	r0, r1, #786432	; 0xc0000
   3f5e0:	str	r0, [r7, #24]
   3f5e4:	mov	r0, r7
   3f5e8:	str	r7, [fp, #-80]	; 0xffffffb0
   3f5ec:	str	r9, [r0]
   3f5f0:	ldr	r0, [r6]
   3f5f4:	ldr	r1, [r0, #24]
   3f5f8:	orr	r1, r1, #262144	; 0x40000
   3f5fc:	str	r1, [r0, #24]
   3f600:	ldr	r0, [r3, #4]
   3f604:	ldr	r9, [r6]
   3f608:	cmp	r0, #0
   3f60c:	beq	3f67c <__assert_fail@plt+0x2cbcc>
   3f610:	add	r2, r9, #4
   3f614:	mov	r6, r0
   3f618:	ldr	r1, [r5]
   3f61c:	str	r2, [sp, #56]	; 0x38
   3f620:	cmp	r1, #31
   3f624:	beq	3f6c0 <__assert_fail@plt+0x2cc10>
   3f628:	ldr	r0, [sp, #60]	; 0x3c
   3f62c:	ldr	r0, [r0]
   3f630:	add	r0, r0, r1, lsl #5
   3f634:	add	r3, r1, #1
   3f638:	add	r2, r6, #20
   3f63c:	str	r3, [r5]
   3f640:	mvn	r3, #0
   3f644:	str	r4, [r0, #4]!
   3f648:	str	r4, [r0, #8]
   3f64c:	str	r4, [r0, #4]
   3f650:	ldm	r2, {r1, r2}
   3f654:	str	r3, [r0, #28]
   3f658:	mov	r3, r6
   3f65c:	ldr	r6, [sp, #56]	; 0x38
   3f660:	str	r4, [r0, #16]
   3f664:	str	r4, [r0, #12]
   3f668:	str	r1, [r0, #20]
   3f66c:	bic	r1, r2, #786432	; 0xc0000
   3f670:	str	r1, [r0, #24]
   3f674:	str	r0, [r6]
   3f678:	b	3f5ec <__assert_fail@plt+0x2cb3c>
   3f67c:	mov	r1, #0
   3f680:	ldr	r6, [r3, #8]
   3f684:	mov	r0, r3
   3f688:	cmp	r6, r1
   3f68c:	cmpne	r6, #0
   3f690:	bne	3f6ac <__assert_fail@plt+0x2cbfc>
   3f694:	ldr	r3, [r0]
   3f698:	ldr	r9, [r9]
   3f69c:	mov	r1, r0
   3f6a0:	cmp	r3, #0
   3f6a4:	bne	3f680 <__assert_fail@plt+0x2cbd0>
   3f6a8:	b	3ecb0 <__assert_fail@plt+0x2c200>
   3f6ac:	add	r2, r9, #8
   3f6b0:	ldr	r1, [r5]
   3f6b4:	str	r2, [sp, #56]	; 0x38
   3f6b8:	cmp	r1, #31
   3f6bc:	bne	3f628 <__assert_fail@plt+0x2cb78>
   3f6c0:	mov	r0, #996	; 0x3e4
   3f6c4:	str	r6, [sp, #12]
   3f6c8:	bl	35350 <__assert_fail@plt+0x228a0>
   3f6cc:	cmp	r0, #0
   3f6d0:	beq	3f79c <__assert_fail@plt+0x2ccec>
   3f6d4:	ldr	r2, [sp, #60]	; 0x3c
   3f6d8:	ldr	r5, [sp, #24]
   3f6dc:	ldr	ip, [sp, #48]	; 0x30
   3f6e0:	ldr	lr, [sp, #44]	; 0x2c
   3f6e4:	ldr	sl, [sp, #52]	; 0x34
   3f6e8:	ldr	r6, [sp, #12]
   3f6ec:	ldr	r1, [r2]
   3f6f0:	str	r1, [r0]
   3f6f4:	mov	r1, #0
   3f6f8:	str	r0, [r2]
   3f6fc:	str	r1, [r5]
   3f700:	b	3f630 <__assert_fail@plt+0x2cb80>
   3f704:	ldr	r0, [sp, #20]
   3f708:	mov	r1, #15
   3f70c:	str	r1, [r0]
   3f710:	mov	r7, #0
   3f714:	clz	r0, r7
   3f718:	cmp	r7, #0
   3f71c:	lsr	r0, r0, #5
   3f720:	beq	3f7d4 <__assert_fail@plt+0x2cd24>
   3f724:	b	3f7e4 <__assert_fail@plt+0x2cd34>
   3f728:	ldr	ip, [sp, #48]	; 0x30
   3f72c:	ldr	lr, [sp, #44]	; 0x2c
   3f730:	ldr	r9, [sp, #40]	; 0x28
   3f734:	mov	r7, #0
   3f738:	mov	r5, r8
   3f73c:	clz	r0, r7
   3f740:	cmp	r7, #0
   3f744:	lsr	r0, r0, #5
   3f748:	beq	3f7d4 <__assert_fail@plt+0x2cd24>
   3f74c:	b	3f7e4 <__assert_fail@plt+0x2cd34>
   3f750:	mov	r0, #996	; 0x3e4
   3f754:	mov	r7, r3
   3f758:	bl	35350 <__assert_fail@plt+0x228a0>
   3f75c:	cmp	r0, #0
   3f760:	beq	3f794 <__assert_fail@plt+0x2cce4>
   3f764:	ldr	r2, [sp, #60]	; 0x3c
   3f768:	ldr	r5, [sp, #24]
   3f76c:	ldr	ip, [sp, #48]	; 0x30
   3f770:	ldr	lr, [sp, #44]	; 0x2c
   3f774:	ldr	sl, [sp, #52]	; 0x34
   3f778:	mov	r3, r7
   3f77c:	ldr	r1, [r2]
   3f780:	str	r1, [r0]
   3f784:	mov	r1, #0
   3f788:	str	r0, [r2]
   3f78c:	str	r1, [r5]
   3f790:	b	3f5a8 <__assert_fail@plt+0x2caf8>
   3f794:	str	r4, [fp, #-80]	; 0xffffffb0
   3f798:	b	3f7a4 <__assert_fail@plt+0x2ccf4>
   3f79c:	ldr	r0, [sp, #56]	; 0x38
   3f7a0:	str	r4, [r0]
   3f7a4:	ldr	ip, [sp, #48]	; 0x30
   3f7a8:	ldr	lr, [sp, #44]	; 0x2c
   3f7ac:	ldr	r0, [sp, #20]
   3f7b0:	ldr	r5, [sp, #28]
   3f7b4:	ldr	r9, [sp, #40]	; 0x28
   3f7b8:	mov	r1, #12
   3f7bc:	mov	r7, #0
   3f7c0:	str	r1, [r0]
   3f7c4:	clz	r0, r7
   3f7c8:	cmp	r7, #0
   3f7cc:	lsr	r0, r0, #5
   3f7d0:	bne	3f7e4 <__assert_fail@plt+0x2cd34>
   3f7d4:	ldr	r1, [sp, #20]
   3f7d8:	ldr	r1, [r1]
   3f7dc:	cmp	r1, #0
   3f7e0:	bne	3f8b4 <__assert_fail@plt+0x2ce04>
   3f7e4:	ldr	r1, [sp, #32]
   3f7e8:	cmp	r1, #0
   3f7ec:	beq	3e9b4 <__assert_fail@plt+0x2bf04>
   3f7f0:	b	3e9a4 <__assert_fail@plt+0x2bef4>
   3f7f4:	movw	r6, #255	; 0xff
   3f7f8:	cmp	r0, #0
   3f7fc:	movt	r6, #4
   3f800:	bne	3f898 <__assert_fail@plt+0x2cde8>
   3f804:	mov	r5, r7
   3f808:	ldr	r7, [r7, #4]
   3f80c:	cmp	r7, #0
   3f810:	bne	3f804 <__assert_fail@plt+0x2cd54>
   3f814:	ldr	r7, [r5, #8]
   3f818:	cmp	r7, #0
   3f81c:	bne	3f804 <__assert_fail@plt+0x2cd54>
   3f820:	ldr	r0, [r5, #24]
   3f824:	and	r0, r0, r6
   3f828:	cmp	r0, #3
   3f82c:	beq	3f860 <__assert_fail@plt+0x2cdb0>
   3f830:	cmp	r0, #6
   3f834:	bne	3f86c <__assert_fail@plt+0x2cdbc>
   3f838:	ldr	r4, [r5, #20]
   3f83c:	ldr	r0, [r4]
   3f840:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f844:	ldr	r0, [r4, #4]
   3f848:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f84c:	ldr	r0, [r4, #8]
   3f850:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f854:	ldr	r0, [r4, #12]
   3f858:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f85c:	b	3f864 <__assert_fail@plt+0x2cdb4>
   3f860:	ldr	r4, [r5, #20]
   3f864:	mov	r0, r4
   3f868:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f86c:	ldr	r0, [r5]
   3f870:	cmp	r0, #0
   3f874:	beq	3f898 <__assert_fail@plt+0x2cde8>
   3f878:	ldr	r7, [r0, #8]
   3f87c:	cmp	r7, r5
   3f880:	mov	r5, r0
   3f884:	beq	3f820 <__assert_fail@plt+0x2cd70>
   3f888:	cmp	r7, #0
   3f88c:	mov	r5, r0
   3f890:	beq	3f820 <__assert_fail@plt+0x2cd70>
   3f894:	b	3f804 <__assert_fail@plt+0x2cd54>
   3f898:	mov	r0, #13
   3f89c:	ldr	r1, [sp, #20]
   3f8a0:	mov	r9, #0
   3f8a4:	str	r0, [r1]
   3f8a8:	mov	r0, r9
   3f8ac:	sub	sp, fp, #28
   3f8b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f8b4:	cmp	r9, #0
   3f8b8:	beq	3de7c <__assert_fail@plt+0x2b3cc>
   3f8bc:	movw	r6, #255	; 0xff
   3f8c0:	movt	r6, #4
   3f8c4:	mov	r5, r9
   3f8c8:	ldr	r9, [r9, #4]
   3f8cc:	cmp	r9, #0
   3f8d0:	bne	3f8c4 <__assert_fail@plt+0x2ce14>
   3f8d4:	ldr	r9, [r5, #8]
   3f8d8:	cmp	r9, #0
   3f8dc:	bne	3f8c4 <__assert_fail@plt+0x2ce14>
   3f8e0:	ldr	r0, [r5, #24]
   3f8e4:	and	r0, r0, r6
   3f8e8:	cmp	r0, #3
   3f8ec:	beq	3f920 <__assert_fail@plt+0x2ce70>
   3f8f0:	cmp	r0, #6
   3f8f4:	bne	3f92c <__assert_fail@plt+0x2ce7c>
   3f8f8:	ldr	r4, [r5, #20]
   3f8fc:	ldr	r0, [r4]
   3f900:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f904:	ldr	r0, [r4, #4]
   3f908:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f90c:	ldr	r0, [r4, #8]
   3f910:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f914:	ldr	r0, [r4, #12]
   3f918:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f91c:	b	3f924 <__assert_fail@plt+0x2ce74>
   3f920:	ldr	r4, [r5, #20]
   3f924:	mov	r0, r4
   3f928:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f92c:	ldr	r0, [r5]
   3f930:	cmp	r0, #0
   3f934:	beq	3de7c <__assert_fail@plt+0x2b3cc>
   3f938:	ldr	r9, [r0, #8]
   3f93c:	cmp	r9, r5
   3f940:	mov	r5, r0
   3f944:	beq	3f8e0 <__assert_fail@plt+0x2ce30>
   3f948:	cmp	r9, #0
   3f94c:	mov	r5, r0
   3f950:	beq	3f8e0 <__assert_fail@plt+0x2ce30>
   3f954:	b	3f8c4 <__assert_fail@plt+0x2ce14>
   3f958:	cmp	r0, #2
   3f95c:	blt	3f978 <__assert_fail@plt+0x2cec8>
   3f960:	ldr	r0, [r7, #36]	; 0x24
   3f964:	cmp	r0, #0
   3f968:	bne	3e5e0 <__assert_fail@plt+0x2bb30>
   3f96c:	ldrb	r0, [r7, #16]
   3f970:	tst	r0, #1
   3f974:	bne	3e5e0 <__assert_fail@plt+0x2bb30>
   3f978:	ldr	r0, [r7]
   3f97c:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f980:	ldr	r0, [r7, #4]
   3f984:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f988:	ldr	r0, [r7, #8]
   3f98c:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f990:	ldr	r0, [r7, #12]
   3f994:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f998:	mov	r0, r7
   3f99c:	bl	32910 <__assert_fail@plt+0x1fe60>
   3f9a0:	ldr	r1, [sl, #64]	; 0x40
   3f9a4:	cmp	r1, #31
   3f9a8:	beq	3fee0 <__assert_fail@plt+0x2d430>
   3f9ac:	ldr	r0, [sl, #56]	; 0x38
   3f9b0:	add	r0, r0, r1, lsl #5
   3f9b4:	add	r2, r1, #1
   3f9b8:	vmov.i32	q8, #0	; 0x00000000
   3f9bc:	ldr	ip, [sp, #48]	; 0x30
   3f9c0:	ldr	lr, [sp, #44]	; 0x2c
   3f9c4:	mov	r1, #3
   3f9c8:	str	r2, [sl, #64]	; 0x40
   3f9cc:	mov	r2, #0
   3f9d0:	add	r7, r0, #4
   3f9d4:	str	r2, [r0, #20]
   3f9d8:	str	r8, [r0, #24]
   3f9dc:	str	r1, [r0, #28]
   3f9e0:	mov	r0, #28
   3f9e4:	mov	r1, r7
   3f9e8:	vst1.32	{d16-d17}, [r1], r0
   3f9ec:	mvn	r0, #0
   3f9f0:	str	r0, [r1]
   3f9f4:	b	3e948 <__assert_fail@plt+0x2be98>
   3f9f8:	ldr	r8, [sp, #24]
   3f9fc:	ldr	r0, [sp, #20]
   3fa00:	ldr	r5, [sp, #28]
   3fa04:	ldr	sl, [sp, #52]	; 0x34
   3fa08:	ldr	r7, [sp, #60]	; 0x3c
   3fa0c:	str	r9, [r0]
   3fa10:	ldr	r4, [sp, #20]
   3fa14:	mov	r0, r8
   3fa18:	bl	32910 <__assert_fail@plt+0x1fe60>
   3fa1c:	ldr	r0, [r7]
   3fa20:	bl	32910 <__assert_fail@plt+0x1fe60>
   3fa24:	ldr	r0, [r7, #4]
   3fa28:	bl	32910 <__assert_fail@plt+0x1fe60>
   3fa2c:	ldr	r0, [r7, #8]
   3fa30:	bl	32910 <__assert_fail@plt+0x1fe60>
   3fa34:	ldr	r0, [r7, #12]
   3fa38:	bl	32910 <__assert_fail@plt+0x1fe60>
   3fa3c:	mov	r0, r7
   3fa40:	bl	32910 <__assert_fail@plt+0x1fe60>
   3fa44:	ldr	r0, [r4]
   3fa48:	mov	r7, #0
   3fa4c:	mov	r9, #0
   3fa50:	cmp	r0, #0
   3fa54:	ldr	ip, [sp, #48]	; 0x30
   3fa58:	ldr	lr, [sp, #44]	; 0x2c
   3fa5c:	beq	3e948 <__assert_fail@plt+0x2be98>
   3fa60:	b	3f8a8 <__assert_fail@plt+0x2cdf8>
   3fa64:	mov	r0, #996	; 0x3e4
   3fa68:	bl	35350 <__assert_fail@plt+0x228a0>
   3fa6c:	cmp	r0, #0
   3fa70:	beq	3fcfc <__assert_fail@plt+0x2d24c>
   3fa74:	ldr	r1, [sl, #56]	; 0x38
   3fa78:	ldr	r5, [sp, #28]
   3fa7c:	ldr	ip, [sp, #48]	; 0x30
   3fa80:	ldr	lr, [sp, #44]	; 0x2c
   3fa84:	str	r1, [r0]
   3fa88:	mov	r1, #0
   3fa8c:	str	r1, [sl, #64]	; 0x40
   3fa90:	str	r0, [sl, #56]	; 0x38
   3fa94:	b	3d91c <__assert_fail@plt+0x2ae6c>
   3fa98:	mov	r9, r0
   3fa9c:	str	sl, [sp, #52]	; 0x34
   3faa0:	b	3f9fc <__assert_fail@plt+0x2cf4c>
   3faa4:	mov	r9, #7
   3faa8:	str	sl, [sp, #52]	; 0x34
   3faac:	b	3f9fc <__assert_fail@plt+0x2cf4c>
   3fab0:	ldr	r4, [sp, #20]
   3fab4:	ldr	r7, [sp, #60]	; 0x3c
   3fab8:	mov	r0, #2
   3fabc:	str	r0, [r4]
   3fac0:	b	3fa14 <__assert_fail@plt+0x2cf64>
   3fac4:	mov	r0, r8
   3fac8:	bl	32910 <__assert_fail@plt+0x1fe60>
   3facc:	mov	r0, r7
   3fad0:	bl	32910 <__assert_fail@plt+0x1fe60>
   3fad4:	b	3e834 <__assert_fail@plt+0x2bd84>
   3fad8:	mov	r0, #996	; 0x3e4
   3fadc:	bl	35350 <__assert_fail@plt+0x228a0>
   3fae0:	cmp	r0, #0
   3fae4:	beq	3fcfc <__assert_fail@plt+0x2d24c>
   3fae8:	ldr	r1, [sl, #56]	; 0x38
   3faec:	ldr	r5, [sp, #28]
   3faf0:	ldr	ip, [sp, #48]	; 0x30
   3faf4:	ldr	lr, [sp, #44]	; 0x2c
   3faf8:	str	r1, [r0]
   3fafc:	mov	r1, #0
   3fb00:	str	r1, [sl, #64]	; 0x40
   3fb04:	str	r0, [sl, #56]	; 0x38
   3fb08:	b	3db68 <__assert_fail@plt+0x2b0b8>
   3fb0c:	mov	r0, #6
   3fb10:	b	3e838 <__assert_fail@plt+0x2bd88>
   3fb14:	mov	r0, #996	; 0x3e4
   3fb18:	bl	35350 <__assert_fail@plt+0x228a0>
   3fb1c:	cmp	r0, #0
   3fb20:	beq	3fcfc <__assert_fail@plt+0x2d24c>
   3fb24:	ldr	r1, [sl, #56]	; 0x38
   3fb28:	ldr	r5, [sp, #28]
   3fb2c:	ldr	ip, [sp, #48]	; 0x30
   3fb30:	ldr	lr, [sp, #44]	; 0x2c
   3fb34:	str	r1, [r0]
   3fb38:	mov	r1, #0
   3fb3c:	str	r1, [sl, #64]	; 0x40
   3fb40:	str	r0, [sl, #56]	; 0x38
   3fb44:	b	3ddb0 <__assert_fail@plt+0x2b300>
   3fb48:	mov	r0, #996	; 0x3e4
   3fb4c:	bl	35350 <__assert_fail@plt+0x228a0>
   3fb50:	cmp	r0, #0
   3fb54:	beq	3fcfc <__assert_fail@plt+0x2d24c>
   3fb58:	ldr	r1, [sl, #56]	; 0x38
   3fb5c:	ldr	r5, [sp, #28]
   3fb60:	ldr	ip, [sp, #48]	; 0x30
   3fb64:	ldr	lr, [sp, #44]	; 0x2c
   3fb68:	str	r1, [r0]
   3fb6c:	mov	r1, #0
   3fb70:	str	r1, [sl, #64]	; 0x40
   3fb74:	str	r0, [sl, #56]	; 0x38
   3fb78:	b	3dd54 <__assert_fail@plt+0x2b2a4>
   3fb7c:	mov	r0, #996	; 0x3e4
   3fb80:	bl	35350 <__assert_fail@plt+0x228a0>
   3fb84:	cmp	r0, #0
   3fb88:	beq	3ff10 <__assert_fail@plt+0x2d460>
   3fb8c:	ldr	r1, [sl, #56]	; 0x38
   3fb90:	ldr	ip, [sp, #48]	; 0x30
   3fb94:	ldr	lr, [sp, #44]	; 0x2c
   3fb98:	str	r1, [r0]
   3fb9c:	mov	r1, #0
   3fba0:	str	r1, [sl, #64]	; 0x40
   3fba4:	str	r0, [sl, #56]	; 0x38
   3fba8:	b	3e5fc <__assert_fail@plt+0x2bb4c>
   3fbac:	mov	r0, #996	; 0x3e4
   3fbb0:	bl	35350 <__assert_fail@plt+0x228a0>
   3fbb4:	cmp	r0, #0
   3fbb8:	beq	3ff10 <__assert_fail@plt+0x2d460>
   3fbbc:	ldr	r1, [sl, #56]	; 0x38
   3fbc0:	ldr	ip, [sp, #48]	; 0x30
   3fbc4:	ldr	lr, [sp, #44]	; 0x2c
   3fbc8:	str	r1, [r0]
   3fbcc:	mov	r1, #0
   3fbd0:	str	r1, [sl, #64]	; 0x40
   3fbd4:	str	r0, [sl, #56]	; 0x38
   3fbd8:	b	3e6a8 <__assert_fail@plt+0x2bbf8>
   3fbdc:	mov	r0, #996	; 0x3e4
   3fbe0:	bl	35350 <__assert_fail@plt+0x228a0>
   3fbe4:	cmp	r0, #0
   3fbe8:	beq	3ff10 <__assert_fail@plt+0x2d460>
   3fbec:	ldr	r1, [sl, #56]	; 0x38
   3fbf0:	ldr	ip, [sp, #48]	; 0x30
   3fbf4:	ldr	lr, [sp, #44]	; 0x2c
   3fbf8:	str	r1, [r0]
   3fbfc:	mov	r1, #0
   3fc00:	str	r1, [sl, #64]	; 0x40
   3fc04:	str	r0, [sl, #56]	; 0x38
   3fc08:	b	3e6f4 <__assert_fail@plt+0x2bc44>
   3fc0c:	str	sl, [sp, #52]	; 0x34
   3fc10:	mov	r9, #3
   3fc14:	b	3f9fc <__assert_fail@plt+0x2cf4c>
   3fc18:	mov	r0, r8
   3fc1c:	bl	32910 <__assert_fail@plt+0x1fe60>
   3fc20:	ldr	lr, [sp, #44]	; 0x2c
   3fc24:	ldr	ip, [sp, #48]	; 0x30
   3fc28:	mov	r7, r4
   3fc2c:	b	3e948 <__assert_fail@plt+0x2be98>
   3fc30:	mov	r0, #996	; 0x3e4
   3fc34:	bl	35350 <__assert_fail@plt+0x228a0>
   3fc38:	cmp	r0, #0
   3fc3c:	beq	3fcfc <__assert_fail@plt+0x2d24c>
   3fc40:	ldr	r1, [sl, #56]	; 0x38
   3fc44:	ldr	r5, [sp, #28]
   3fc48:	ldr	ip, [sp, #48]	; 0x30
   3fc4c:	ldr	lr, [sp, #44]	; 0x2c
   3fc50:	str	r1, [r0]
   3fc54:	mov	r1, #0
   3fc58:	str	r1, [sl, #64]	; 0x40
   3fc5c:	str	r0, [sl, #56]	; 0x38
   3fc60:	b	3e904 <__assert_fail@plt+0x2be54>
   3fc64:	mov	r0, #996	; 0x3e4
   3fc68:	bl	35350 <__assert_fail@plt+0x228a0>
   3fc6c:	cmp	r0, #0
   3fc70:	beq	3feac <__assert_fail@plt+0x2d3fc>
   3fc74:	ldr	r1, [sl, #56]	; 0x38
   3fc78:	ldr	ip, [sp, #48]	; 0x30
   3fc7c:	ldr	lr, [sp, #44]	; 0x2c
   3fc80:	mov	r9, #0
   3fc84:	str	r1, [r0]
   3fc88:	mov	r1, #0
   3fc8c:	str	r1, [sl, #64]	; 0x40
   3fc90:	str	r0, [sl, #56]	; 0x38
   3fc94:	b	3da60 <__assert_fail@plt+0x2afb0>
   3fc98:	mov	r0, #996	; 0x3e4
   3fc9c:	bl	35350 <__assert_fail@plt+0x228a0>
   3fca0:	cmp	r0, #0
   3fca4:	beq	3feb8 <__assert_fail@plt+0x2d408>
   3fca8:	ldr	r1, [sl, #56]	; 0x38
   3fcac:	ldr	ip, [sp, #48]	; 0x30
   3fcb0:	ldr	lr, [sp, #44]	; 0x2c
   3fcb4:	mov	r9, #0
   3fcb8:	str	r1, [r0]
   3fcbc:	mov	r1, #0
   3fcc0:	str	r1, [sl, #64]	; 0x40
   3fcc4:	str	r0, [sl, #56]	; 0x38
   3fcc8:	b	3e74c <__assert_fail@plt+0x2bc9c>
   3fccc:	mov	r0, #996	; 0x3e4
   3fcd0:	bl	35350 <__assert_fail@plt+0x228a0>
   3fcd4:	cmp	r0, #0
   3fcd8:	beq	3fcfc <__assert_fail@plt+0x2d24c>
   3fcdc:	ldr	r1, [sl, #56]	; 0x38
   3fce0:	ldr	ip, [sp, #48]	; 0x30
   3fce4:	ldr	lr, [sp, #44]	; 0x2c
   3fce8:	str	r1, [r0]
   3fcec:	mov	r1, #0
   3fcf0:	str	r1, [sl, #64]	; 0x40
   3fcf4:	str	r0, [sl, #56]	; 0x38
   3fcf8:	b	3e85c <__assert_fail@plt+0x2bdac>
   3fcfc:	mov	r0, #12
   3fd00:	b	3f89c <__assert_fail@plt+0x2cdec>
   3fd04:	mov	r4, #0
   3fd08:	mov	r5, #0
   3fd0c:	b	3fd18 <__assert_fail@plt+0x2d268>
   3fd10:	mov	r5, #4
   3fd14:	mov	r4, #128	; 0x80
   3fd18:	bl	12768 <__ctype_b_loc@plt>
   3fd1c:	ldr	r0, [r0]
   3fd20:	ldr	ip, [sp, #48]	; 0x30
   3fd24:	ldr	lr, [sp, #44]	; 0x2c
   3fd28:	mov	r1, #1
   3fd2c:	mov	r9, #0
   3fd30:	add	r7, r0, r4, lsl #1
   3fd34:	b	3fd4c <__assert_fail@plt+0x2d29c>
   3fd38:	add	r5, r5, #1
   3fd3c:	add	r7, r7, #64	; 0x40
   3fd40:	add	r4, r4, #32
   3fd44:	cmp	r5, #8
   3fd48:	beq	3da34 <__assert_fail@plt+0x2af84>
   3fd4c:	add	r0, sl, r5, lsl #2
   3fd50:	mov	r3, #0
   3fd54:	add	r2, r0, #96	; 0x60
   3fd58:	mov	r0, r7
   3fd5c:	add	r6, r4, r3
   3fd60:	cmp	r6, #95	; 0x5f
   3fd64:	bne	3fd90 <__assert_fail@plt+0x2d2e0>
   3fd68:	ldr	r6, [r2]
   3fd6c:	orr	r6, r6, r1, lsl r3
   3fd70:	str	r6, [r2]
   3fd74:	add	r3, r3, #1
   3fd78:	add	r0, r0, #2
   3fd7c:	cmp	r3, #32
   3fd80:	beq	3fd38 <__assert_fail@plt+0x2d288>
   3fd84:	add	r6, r4, r3
   3fd88:	cmp	r6, #95	; 0x5f
   3fd8c:	beq	3fd68 <__assert_fail@plt+0x2d2b8>
   3fd90:	ldrh	r6, [r0]
   3fd94:	ands	r6, r6, #8
   3fd98:	beq	3fd74 <__assert_fail@plt+0x2d2c4>
   3fd9c:	b	3fd68 <__assert_fail@plt+0x2d2b8>
   3fda0:	ldr	ip, [sp, #48]	; 0x30
   3fda4:	ldr	lr, [sp, #44]	; 0x2c
   3fda8:	mov	r5, #0
   3fdac:	mov	r9, #0
   3fdb0:	ldr	r1, [sl, #64]	; 0x40
   3fdb4:	cmp	r1, #31
   3fdb8:	bne	3e7e8 <__assert_fail@plt+0x2bd38>
   3fdbc:	mov	r0, #996	; 0x3e4
   3fdc0:	bl	35350 <__assert_fail@plt+0x228a0>
   3fdc4:	ldr	lr, [sp, #44]	; 0x2c
   3fdc8:	ldr	ip, [sp, #48]	; 0x30
   3fdcc:	cmp	r0, #0
   3fdd0:	beq	3e834 <__assert_fail@plt+0x2bd84>
   3fdd4:	ldr	r1, [sl, #56]	; 0x38
   3fdd8:	str	r1, [r0]
   3fddc:	mov	r1, #0
   3fde0:	str	r1, [sl, #64]	; 0x40
   3fde4:	str	r0, [sl, #56]	; 0x38
   3fde8:	b	3e7ec <__assert_fail@plt+0x2bd3c>
   3fdec:	cmp	r9, #0
   3fdf0:	beq	3fe90 <__assert_fail@plt+0x2d3e0>
   3fdf4:	movw	r5, #255	; 0xff
   3fdf8:	movt	r5, #4
   3fdfc:	mov	r6, r9
   3fe00:	ldr	r9, [r9, #4]
   3fe04:	cmp	r9, #0
   3fe08:	bne	3fdfc <__assert_fail@plt+0x2d34c>
   3fe0c:	ldr	r9, [r6, #8]
   3fe10:	cmp	r9, #0
   3fe14:	bne	3fdfc <__assert_fail@plt+0x2d34c>
   3fe18:	ldr	r0, [r6, #24]
   3fe1c:	and	r0, r0, r5
   3fe20:	cmp	r0, #3
   3fe24:	beq	3fe58 <__assert_fail@plt+0x2d3a8>
   3fe28:	cmp	r0, #6
   3fe2c:	bne	3fe64 <__assert_fail@plt+0x2d3b4>
   3fe30:	ldr	r4, [r6, #20]
   3fe34:	ldr	r0, [r4]
   3fe38:	bl	32910 <__assert_fail@plt+0x1fe60>
   3fe3c:	ldr	r0, [r4, #4]
   3fe40:	bl	32910 <__assert_fail@plt+0x1fe60>
   3fe44:	ldr	r0, [r4, #8]
   3fe48:	bl	32910 <__assert_fail@plt+0x1fe60>
   3fe4c:	ldr	r0, [r4, #12]
   3fe50:	bl	32910 <__assert_fail@plt+0x1fe60>
   3fe54:	b	3fe5c <__assert_fail@plt+0x2d3ac>
   3fe58:	ldr	r4, [r6, #20]
   3fe5c:	mov	r0, r4
   3fe60:	bl	32910 <__assert_fail@plt+0x1fe60>
   3fe64:	ldr	r0, [r6]
   3fe68:	cmp	r0, #0
   3fe6c:	beq	3fe90 <__assert_fail@plt+0x2d3e0>
   3fe70:	ldr	r9, [r0, #8]
   3fe74:	cmp	r9, r6
   3fe78:	mov	r6, r0
   3fe7c:	beq	3fe18 <__assert_fail@plt+0x2d368>
   3fe80:	cmp	r9, #0
   3fe84:	mov	r6, r0
   3fe88:	beq	3fe18 <__assert_fail@plt+0x2d368>
   3fe8c:	b	3fdfc <__assert_fail@plt+0x2d34c>
   3fe90:	mov	r0, #8
   3fe94:	b	3f89c <__assert_fail@plt+0x2cdec>
   3fe98:	ldr	r8, [sp, #24]
   3fe9c:	mov	r9, r0
   3fea0:	b	3f9fc <__assert_fail@plt+0x2cf4c>
   3fea4:	ldr	r8, [sp, #24]
   3fea8:	b	3fc10 <__assert_fail@plt+0x2d160>
   3feac:	mov	r4, #0
   3feb0:	mov	r0, #9
   3feb4:	b	3fec0 <__assert_fail@plt+0x2d410>
   3feb8:	mov	r4, #0
   3febc:	mov	r0, #10
   3fec0:	ldr	ip, [sp, #48]	; 0x30
   3fec4:	ldr	lr, [sp, #44]	; 0x2c
   3fec8:	mov	r9, #0
   3fecc:	str	r0, [lr]
   3fed0:	ldr	r1, [sl, #64]	; 0x40
   3fed4:	cmp	r1, #31
   3fed8:	bne	3e79c <__assert_fail@plt+0x2bcec>
   3fedc:	b	3dab0 <__assert_fail@plt+0x2b000>
   3fee0:	mov	r0, #996	; 0x3e4
   3fee4:	bl	35350 <__assert_fail@plt+0x228a0>
   3fee8:	cmp	r0, #0
   3feec:	beq	3ff10 <__assert_fail@plt+0x2d460>
   3fef0:	ldr	r1, [sl, #56]	; 0x38
   3fef4:	str	r1, [r0]
   3fef8:	mov	r1, #0
   3fefc:	str	r1, [sl, #64]	; 0x40
   3ff00:	str	r0, [sl, #56]	; 0x38
   3ff04:	b	3f9b0 <__assert_fail@plt+0x2cf00>
   3ff08:	ldr	r5, [sp, #28]
   3ff0c:	ldr	r7, [sp, #60]	; 0x3c
   3ff10:	ldr	r4, [sp, #20]
   3ff14:	mov	r0, #12
   3ff18:	str	r0, [r4]
   3ff1c:	b	3fa14 <__assert_fail@plt+0x2cf64>
   3ff20:	mov	r0, r6
   3ff24:	bl	32910 <__assert_fail@plt+0x1fe60>
   3ff28:	mov	r0, r9
   3ff2c:	bl	32910 <__assert_fail@plt+0x1fe60>
   3ff30:	ldr	r8, [sp, #24]
   3ff34:	mov	r9, #12
   3ff38:	b	3f9fc <__assert_fail@plt+0x2cf4c>
   3ff3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ff40:	add	fp, sp, #28
   3ff44:	sub	sp, sp, #12
   3ff48:	mov	r9, r1
   3ff4c:	mov	r6, r0
   3ff50:	mov	r4, #0
   3ff54:	mov	r0, #32
   3ff58:	mov	r1, #1
   3ff5c:	mov	sl, r3
   3ff60:	mov	r5, r2
   3ff64:	str	r4, [sp, #8]
   3ff68:	bl	322c0 <__assert_fail@plt+0x1f810>
   3ff6c:	ldr	r1, [fp, #12]
   3ff70:	cmp	r0, #0
   3ff74:	beq	402f4 <__assert_fail@plt+0x2d844>
   3ff78:	mov	r7, r0
   3ff7c:	mov	r0, #40	; 0x28
   3ff80:	mov	r1, #1
   3ff84:	bl	322c0 <__assert_fail@plt+0x1f810>
   3ff88:	cmp	r0, #0
   3ff8c:	beq	4022c <__assert_fail@plt+0x2d77c>
   3ff90:	mov	r8, r0
   3ff94:	ldrb	r0, [r0, #16]
   3ff98:	ldr	r1, [fp, #8]
   3ff9c:	mov	r4, #0
   3ffa0:	add	r3, sp, #8
   3ffa4:	str	r5, [sp]
   3ffa8:	mov	r2, r8
   3ffac:	str	r4, [sp, #4]
   3ffb0:	and	r0, r0, #254	; 0xfe
   3ffb4:	orr	r0, r0, r1
   3ffb8:	mov	r1, r7
   3ffbc:	strb	r0, [r8, #16]
   3ffc0:	mov	r0, r9
   3ffc4:	bl	407e4 <__assert_fail@plt+0x2dd34>
   3ffc8:	cmp	r0, #0
   3ffcc:	bne	40250 <__assert_fail@plt+0x2d7a0>
   3ffd0:	ldrb	r0, [sl]
   3ffd4:	cmp	r0, #0
   3ffd8:	beq	40004 <__assert_fail@plt+0x2d554>
   3ffdc:	add	r1, sl, #1
   3ffe0:	mov	r2, #1
   3ffe4:	ubfx	r3, r0, #5, #3
   3ffe8:	and	r0, r0, #31
   3ffec:	ldr	r5, [r7, r3, lsl #2]
   3fff0:	orr	r0, r5, r2, lsl r0
   3fff4:	str	r0, [r7, r3, lsl #2]
   3fff8:	ldrb	r0, [r1], #1
   3fffc:	cmp	r0, #0
   40000:	bne	3ffe4 <__assert_fail@plt+0x2d534>
   40004:	ldr	r0, [fp, #8]
   40008:	cmp	r0, #0
   4000c:	beq	4013c <__assert_fail@plt+0x2d68c>
   40010:	vld1.32	{d16-d17}, [r7]
   40014:	mov	r0, r7
   40018:	vmvn	q8, q8
   4001c:	vst1.32	{d16-d17}, [r0]!
   40020:	vld1.32	{d16-d17}, [r0]
   40024:	vmvn	q8, q8
   40028:	vst1.32	{d16-d17}, [r0]
   4002c:	ldr	r0, [r6, #92]	; 0x5c
   40030:	cmp	r0, #2
   40034:	bge	40148 <__assert_fail@plt+0x2d698>
   40038:	ldr	r1, [r6, #64]	; 0x40
   4003c:	cmp	r1, #31
   40040:	beq	401cc <__assert_fail@plt+0x2d71c>
   40044:	ldr	r0, [r6, #56]	; 0x38
   40048:	add	r0, r0, r1, lsl #5
   4004c:	add	r2, r1, #1
   40050:	vmov.i32	q8, #0	; 0x00000000
   40054:	mov	r1, #3
   40058:	str	r2, [r6, #64]	; 0x40
   4005c:	mov	r2, #0
   40060:	add	r5, r0, #4
   40064:	str	r2, [r0, #20]
   40068:	str	r7, [r0, #24]
   4006c:	str	r1, [r0, #28]
   40070:	mov	r0, #28
   40074:	mov	r1, r5
   40078:	vst1.32	{d16-d17}, [r1], r0
   4007c:	mvn	r0, #0
   40080:	str	r0, [r1]
   40084:	ldr	r0, [r6, #92]	; 0x5c
   40088:	cmp	r0, #2
   4008c:	blt	401f4 <__assert_fail@plt+0x2d744>
   40090:	ldrb	r0, [r6, #88]	; 0x58
   40094:	orr	r0, r0, #2
   40098:	strb	r0, [r6, #88]	; 0x58
   4009c:	ldr	r1, [r6, #64]	; 0x40
   400a0:	cmp	r1, #31
   400a4:	beq	40298 <__assert_fail@plt+0x2d7e8>
   400a8:	ldr	r0, [r6, #56]	; 0x38
   400ac:	add	r0, r0, r1, lsl #5
   400b0:	vmov.i32	q8, #0	; 0x00000000
   400b4:	add	r2, r1, #1
   400b8:	mov	r1, #6
   400bc:	mov	r4, #0
   400c0:	str	r2, [r6, #64]	; 0x40
   400c4:	add	r7, r0, #4
   400c8:	str	r4, [r0, #20]
   400cc:	str	r8, [r0, #24]
   400d0:	str	r1, [r0, #28]
   400d4:	mov	r0, #28
   400d8:	mov	r1, r7
   400dc:	vst1.32	{d16-d17}, [r1], r0
   400e0:	mvn	r0, #0
   400e4:	str	r0, [r1]
   400e8:	ldr	r1, [r6, #64]	; 0x40
   400ec:	cmp	r1, #31
   400f0:	beq	40308 <__assert_fail@plt+0x2d858>
   400f4:	ldr	r0, [r6, #56]	; 0x38
   400f8:	add	r4, r0, r1, lsl #5
   400fc:	add	r2, r1, #1
   40100:	mov	r0, #0
   40104:	mov	r1, #10
   40108:	str	r2, [r6, #64]	; 0x40
   4010c:	mvn	r2, #0
   40110:	str	r0, [r4, #4]!
   40114:	add	r3, r4, #20
   40118:	stmib	r4, {r5, r7}
   4011c:	str	r0, [r4, #12]
   40120:	str	r0, [r4, #16]
   40124:	stm	r3, {r0, r1, r2}
   40128:	str	r4, [r5]
   4012c:	str	r4, [r7]
   40130:	mov	r0, r4
   40134:	sub	sp, fp, #28
   40138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4013c:	ldr	r0, [r6, #92]	; 0x5c
   40140:	cmp	r0, #2
   40144:	blt	40038 <__assert_fail@plt+0x2d588>
   40148:	ldr	r5, [r6, #60]	; 0x3c
   4014c:	ldm	r7, {r0, r1, r2, ip}
   40150:	ldr	r3, [r5]
   40154:	and	r0, r0, r3
   40158:	str	r0, [r7]
   4015c:	ldr	r0, [r5, #4]
   40160:	and	r0, r1, r0
   40164:	str	r0, [r7, #4]
   40168:	ldr	r0, [r5, #8]
   4016c:	and	r0, r2, r0
   40170:	str	r0, [r7, #8]
   40174:	ldr	r0, [r5, #12]
   40178:	and	r0, ip, r0
   4017c:	str	r0, [r7, #12]
   40180:	ldr	r0, [r7, #16]
   40184:	ldr	r1, [r5, #16]
   40188:	and	r0, r0, r1
   4018c:	str	r0, [r7, #16]
   40190:	ldr	r0, [r5, #20]
   40194:	ldr	r1, [r7, #20]
   40198:	and	r0, r1, r0
   4019c:	str	r0, [r7, #20]
   401a0:	ldr	r0, [r5, #24]
   401a4:	ldr	r1, [r7, #24]
   401a8:	and	r0, r1, r0
   401ac:	str	r0, [r7, #24]
   401b0:	ldr	r0, [r5, #28]
   401b4:	ldr	r1, [r7, #28]
   401b8:	and	r0, r1, r0
   401bc:	str	r0, [r7, #28]
   401c0:	ldr	r1, [r6, #64]	; 0x40
   401c4:	cmp	r1, #31
   401c8:	bne	40044 <__assert_fail@plt+0x2d594>
   401cc:	mov	r0, #996	; 0x3e4
   401d0:	bl	35350 <__assert_fail@plt+0x228a0>
   401d4:	cmp	r0, #0
   401d8:	beq	402c0 <__assert_fail@plt+0x2d810>
   401dc:	ldr	r1, [r6, #56]	; 0x38
   401e0:	str	r1, [r0]
   401e4:	mov	r1, #0
   401e8:	str	r1, [r6, #64]	; 0x40
   401ec:	str	r0, [r6, #56]	; 0x38
   401f0:	b	40048 <__assert_fail@plt+0x2d598>
   401f4:	ldr	r0, [r8]
   401f8:	bl	32910 <__assert_fail@plt+0x1fe60>
   401fc:	ldr	r0, [r8, #4]
   40200:	bl	32910 <__assert_fail@plt+0x1fe60>
   40204:	ldr	r0, [r8, #8]
   40208:	bl	32910 <__assert_fail@plt+0x1fe60>
   4020c:	ldr	r0, [r8, #12]
   40210:	bl	32910 <__assert_fail@plt+0x1fe60>
   40214:	mov	r0, r8
   40218:	bl	32910 <__assert_fail@plt+0x1fe60>
   4021c:	mov	r4, r5
   40220:	mov	r0, r4
   40224:	sub	sp, fp, #28
   40228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4022c:	mov	r0, r7
   40230:	bl	32910 <__assert_fail@plt+0x1fe60>
   40234:	ldr	r1, [fp, #12]
   40238:	mov	r0, #12
   4023c:	mov	r4, #0
   40240:	str	r0, [r1]
   40244:	mov	r0, r4
   40248:	sub	sp, fp, #28
   4024c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40250:	mov	r5, r0
   40254:	mov	r0, r7
   40258:	bl	32910 <__assert_fail@plt+0x1fe60>
   4025c:	ldr	r0, [r8]
   40260:	bl	32910 <__assert_fail@plt+0x1fe60>
   40264:	ldr	r0, [r8, #4]
   40268:	bl	32910 <__assert_fail@plt+0x1fe60>
   4026c:	ldr	r0, [r8, #8]
   40270:	bl	32910 <__assert_fail@plt+0x1fe60>
   40274:	ldr	r0, [r8, #12]
   40278:	bl	32910 <__assert_fail@plt+0x1fe60>
   4027c:	mov	r0, r8
   40280:	bl	32910 <__assert_fail@plt+0x1fe60>
   40284:	ldr	r0, [fp, #12]
   40288:	str	r5, [r0]
   4028c:	mov	r0, r4
   40290:	sub	sp, fp, #28
   40294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40298:	mov	r0, #996	; 0x3e4
   4029c:	bl	35350 <__assert_fail@plt+0x228a0>
   402a0:	cmp	r0, #0
   402a4:	beq	402c0 <__assert_fail@plt+0x2d810>
   402a8:	ldr	r1, [r6, #56]	; 0x38
   402ac:	str	r1, [r0]
   402b0:	mov	r1, #0
   402b4:	str	r1, [r6, #64]	; 0x40
   402b8:	str	r0, [r6, #56]	; 0x38
   402bc:	b	400ac <__assert_fail@plt+0x2d5fc>
   402c0:	mov	r0, r7
   402c4:	bl	32910 <__assert_fail@plt+0x1fe60>
   402c8:	ldr	r0, [r8]
   402cc:	bl	32910 <__assert_fail@plt+0x1fe60>
   402d0:	ldr	r0, [r8, #4]
   402d4:	bl	32910 <__assert_fail@plt+0x1fe60>
   402d8:	ldr	r0, [r8, #8]
   402dc:	bl	32910 <__assert_fail@plt+0x1fe60>
   402e0:	ldr	r0, [r8, #12]
   402e4:	bl	32910 <__assert_fail@plt+0x1fe60>
   402e8:	mov	r0, r8
   402ec:	bl	32910 <__assert_fail@plt+0x1fe60>
   402f0:	ldr	r1, [fp, #12]
   402f4:	mov	r0, #12
   402f8:	str	r0, [r1]
   402fc:	mov	r0, r4
   40300:	sub	sp, fp, #28
   40304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40308:	mov	r0, #996	; 0x3e4
   4030c:	bl	35350 <__assert_fail@plt+0x228a0>
   40310:	cmp	r0, #0
   40314:	beq	40220 <__assert_fail@plt+0x2d770>
   40318:	ldr	r1, [r6, #56]	; 0x38
   4031c:	str	r1, [r0]
   40320:	mov	r1, #0
   40324:	str	r1, [r6, #64]	; 0x40
   40328:	str	r0, [r6, #56]	; 0x38
   4032c:	b	400f8 <__assert_fail@plt+0x2d648>
   40330:	push	{fp, lr}
   40334:	mov	fp, sp
   40338:	ldr	ip, [r1, #40]	; 0x28
   4033c:	ldr	r3, [r1, #56]	; 0x38
   40340:	cmp	r3, ip
   40344:	ble	403c4 <__assert_fail@plt+0x2d914>
   40348:	ldr	r3, [r1, #4]
   4034c:	ldrb	lr, [r3, ip]
   40350:	strb	lr, [r0]
   40354:	ldr	r3, [r1, #80]	; 0x50
   40358:	cmp	r3, #2
   4035c:	blt	40380 <__assert_fail@plt+0x2d8d0>
   40360:	ldr	r3, [r1, #28]
   40364:	ldr	ip, [r1, #40]	; 0x28
   40368:	cmp	ip, r3
   4036c:	beq	40380 <__assert_fail@plt+0x2d8d0>
   40370:	ldr	r3, [r1, #8]
   40374:	ldr	r3, [r3, ip, lsl #2]
   40378:	cmn	r3, #1
   4037c:	beq	40498 <__assert_fail@plt+0x2d9e8>
   40380:	tst	r2, #1
   40384:	beq	403d8 <__assert_fail@plt+0x2d928>
   40388:	cmp	lr, #92	; 0x5c
   4038c:	bne	403d8 <__assert_fail@plt+0x2d928>
   40390:	ldr	r2, [r1, #40]	; 0x28
   40394:	ldr	r3, [r1, #48]	; 0x30
   40398:	add	r2, r2, #1
   4039c:	cmp	r2, r3
   403a0:	bge	40498 <__assert_fail@plt+0x2d9e8>
   403a4:	str	r2, [r1, #40]	; 0x28
   403a8:	ldr	r1, [r1, #4]
   403ac:	ldrb	r2, [r1, r2]
   403b0:	mov	r1, #1
   403b4:	strb	r1, [r0, #4]
   403b8:	strb	r2, [r0]
   403bc:	mov	r0, r1
   403c0:	pop	{fp, pc}
   403c4:	mov	r1, #2
   403c8:	strb	r1, [r0, #4]
   403cc:	mov	r1, #0
   403d0:	mov	r0, r1
   403d4:	pop	{fp, pc}
   403d8:	cmp	lr, #92	; 0x5c
   403dc:	bgt	4043c <__assert_fail@plt+0x2d98c>
   403e0:	cmp	lr, #45	; 0x2d
   403e4:	beq	40460 <__assert_fail@plt+0x2d9b0>
   403e8:	cmp	lr, #91	; 0x5b
   403ec:	bne	40498 <__assert_fail@plt+0x2d9e8>
   403f0:	ldr	r3, [r1, #40]	; 0x28
   403f4:	ldr	ip, [r1, #48]	; 0x30
   403f8:	add	r3, r3, #1
   403fc:	cmp	r3, ip
   40400:	bge	40488 <__assert_fail@plt+0x2d9d8>
   40404:	ldr	r1, [r1, #4]
   40408:	ldrb	r1, [r1, r3]
   4040c:	cmp	r1, #61	; 0x3d
   40410:	strb	r1, [r0]
   40414:	beq	404a8 <__assert_fail@plt+0x2d9f8>
   40418:	cmp	r1, #58	; 0x3a
   4041c:	beq	404bc <__assert_fail@plt+0x2da0c>
   40420:	cmp	r1, #46	; 0x2e
   40424:	bne	40490 <__assert_fail@plt+0x2d9e0>
   40428:	mov	r1, #26
   4042c:	strb	r1, [r0, #4]
   40430:	mov	r1, #2
   40434:	mov	r0, r1
   40438:	pop	{fp, pc}
   4043c:	cmp	lr, #93	; 0x5d
   40440:	beq	40474 <__assert_fail@plt+0x2d9c4>
   40444:	cmp	lr, #94	; 0x5e
   40448:	bne	40498 <__assert_fail@plt+0x2d9e8>
   4044c:	mov	r1, #25
   40450:	strb	r1, [r0, #4]
   40454:	mov	r1, #1
   40458:	mov	r0, r1
   4045c:	pop	{fp, pc}
   40460:	mov	r1, #22
   40464:	strb	r1, [r0, #4]
   40468:	mov	r1, #1
   4046c:	mov	r0, r1
   40470:	pop	{fp, pc}
   40474:	mov	r1, #21
   40478:	strb	r1, [r0, #4]
   4047c:	mov	r1, #1
   40480:	mov	r0, r1
   40484:	pop	{fp, pc}
   40488:	mov	r1, #0
   4048c:	strb	r1, [r0]
   40490:	mov	r1, #91	; 0x5b
   40494:	strb	r1, [r0]
   40498:	mov	r1, #1
   4049c:	strb	r1, [r0, #4]
   404a0:	mov	r0, r1
   404a4:	pop	{fp, pc}
   404a8:	mov	r1, #28
   404ac:	strb	r1, [r0, #4]
   404b0:	mov	r1, #2
   404b4:	mov	r0, r1
   404b8:	pop	{fp, pc}
   404bc:	tst	r2, #4
   404c0:	beq	40490 <__assert_fail@plt+0x2d9e0>
   404c4:	mov	r1, #30
   404c8:	strb	r1, [r0, #4]
   404cc:	mov	r1, #2
   404d0:	mov	r0, r1
   404d4:	pop	{fp, pc}
   404d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   404dc:	add	fp, sp, #24
   404e0:	sub	sp, sp, #8
   404e4:	mov	r5, r2
   404e8:	ldr	r2, [r1, #80]	; 0x50
   404ec:	mov	r9, r0
   404f0:	ldr	r0, [r1, #40]	; 0x28
   404f4:	cmp	r2, #1
   404f8:	beq	40570 <__assert_fail@plt+0x2dac0>
   404fc:	ldr	r2, [r1, #28]
   40500:	add	r6, r0, #1
   40504:	cmp	r6, r2
   40508:	bge	40570 <__assert_fail@plt+0x2dac0>
   4050c:	ldr	lr, [r1, #8]
   40510:	sub	r4, r0, r2
   40514:	sub	ip, r2, r0
   40518:	mvn	r2, #0
   4051c:	add	r6, lr, r0, lsl #2
   40520:	ldr	r7, [r6, -r2, lsl #2]
   40524:	cmn	r7, #1
   40528:	bne	4053c <__assert_fail@plt+0x2da8c>
   4052c:	sub	r2, r2, #1
   40530:	cmp	r4, r2
   40534:	bne	40520 <__assert_fail@plt+0x2da70>
   40538:	b	40548 <__assert_fail@plt+0x2da98>
   4053c:	rsb	ip, r2, #0
   40540:	cmp	ip, #2
   40544:	bcc	40570 <__assert_fail@plt+0x2dac0>
   40548:	mov	r2, #1
   4054c:	str	r2, [r9]
   40550:	ldr	r0, [lr, r0, lsl #2]
   40554:	str	r0, [r9, #4]
   40558:	ldr	r0, [r1, #40]	; 0x28
   4055c:	add	r0, r0, ip
   40560:	str	r0, [r1, #40]	; 0x28
   40564:	mov	r0, #0
   40568:	sub	sp, fp, #24
   4056c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   40570:	add	r2, r0, r3
   40574:	str	r2, [r1, #40]	; 0x28
   40578:	ldrb	r6, [r5, #4]
   4057c:	sub	r0, r6, #22
   40580:	cmp	r0, #8
   40584:	bhi	407cc <__assert_fail@plt+0x2dd1c>
   40588:	add	r3, pc, #0
   4058c:	ldr	pc, [r3, r0, lsl #2]
   40590:	andeq	r0, r4, r4, lsr #15
   40594:	andeq	r0, r4, ip, asr #15
   40598:	andeq	r0, r4, ip, asr #15
   4059c:	andeq	r0, r4, ip, asr #15
   405a0:			; <UNDEFINED> instruction: 0x000405b4
   405a4:	andeq	r0, r4, ip, asr #15
   405a8:			; <UNDEFINED> instruction: 0x000405b4
   405ac:	andeq	r0, r4, ip, asr #15
   405b0:			; <UNDEFINED> instruction: 0x000405b4
   405b4:	ldr	r3, [r1, #56]	; 0x38
   405b8:	mov	r0, #7
   405bc:	cmp	r3, r2
   405c0:	ble	407dc <__assert_fail@plt+0x2dd2c>
   405c4:	ldrb	r3, [r5]
   405c8:	mov	r2, #0
   405cc:	uxtb	r7, r6
   405d0:	cmp	r7, #30
   405d4:	bne	405e4 <__assert_fail@plt+0x2db34>
   405d8:	ldrb	r7, [r1, #75]	; 0x4b
   405dc:	cmp	r7, #0
   405e0:	bne	40648 <__assert_fail@plt+0x2db98>
   405e4:	ldr	r4, [r1, #40]	; 0x28
   405e8:	ldr	r7, [r1, #4]
   405ec:	add	r6, r4, #1
   405f0:	str	r6, [r1, #40]	; 0x28
   405f4:	ldrb	r4, [r7, r4]
   405f8:	ldr	r7, [r1, #56]	; 0x38
   405fc:	cmp	r7, r6
   40600:	ble	407dc <__assert_fail@plt+0x2dd2c>
   40604:	uxtb	r7, r4
   40608:	cmp	r7, r3
   4060c:	bne	40620 <__assert_fail@plt+0x2db70>
   40610:	ldr	r7, [r1, #4]
   40614:	ldrb	r7, [r7, r6]
   40618:	cmp	r7, #93	; 0x5d
   4061c:	beq	40744 <__assert_fail@plt+0x2dc94>
   40620:	ldr	r7, [r9, #4]
   40624:	strb	r4, [r7, r2]
   40628:	add	r2, r2, #1
   4062c:	cmp	r2, #32
   40630:	beq	407dc <__assert_fail@plt+0x2dd2c>
   40634:	ldrb	r6, [r5, #4]
   40638:	uxtb	r7, r6
   4063c:	cmp	r7, #30
   40640:	beq	405d8 <__assert_fail@plt+0x2db28>
   40644:	b	405e4 <__assert_fail@plt+0x2db34>
   40648:	ldrb	r7, [r1, #76]	; 0x4c
   4064c:	cmp	r7, #0
   40650:	beq	406f8 <__assert_fail@plt+0x2dc48>
   40654:	ldr	lr, [r1, #28]
   40658:	ldr	ip, [r1, #40]	; 0x28
   4065c:	cmp	lr, ip
   40660:	beq	40674 <__assert_fail@plt+0x2dbc4>
   40664:	ldr	r4, [r1, #8]
   40668:	ldr	r4, [r4, ip, lsl #2]
   4066c:	cmn	r4, #1
   40670:	beq	40724 <__assert_fail@plt+0x2dc74>
   40674:	ldr	r6, [r1, #12]
   40678:	ldr	r7, [r1, #24]
   4067c:	ldr	r4, [r1]
   40680:	ldr	r6, [r6, ip, lsl #2]
   40684:	add	r6, r7, r6
   40688:	add	r4, r4, r6
   4068c:	ldrsb	r4, [r4]
   40690:	cmn	r4, #1
   40694:	ble	40724 <__assert_fail@plt+0x2dc74>
   40698:	ldr	r7, [r1, #80]	; 0x50
   4069c:	mov	r6, #1
   406a0:	cmp	r7, #1
   406a4:	beq	406e0 <__assert_fail@plt+0x2dc30>
   406a8:	add	r7, ip, #1
   406ac:	cmp	r7, lr
   406b0:	bge	406e0 <__assert_fail@plt+0x2dc30>
   406b4:	ldr	r6, [r1, #8]
   406b8:	sub	lr, lr, ip
   406bc:	add	r8, r6, ip, lsl #2
   406c0:	mov	r6, #1
   406c4:	ldr	r7, [r8, r6, lsl #2]
   406c8:	cmn	r7, #1
   406cc:	bne	406e0 <__assert_fail@plt+0x2dc30>
   406d0:	add	r6, r6, #1
   406d4:	cmp	lr, r6
   406d8:	bne	406c4 <__assert_fail@plt+0x2dc14>
   406dc:	mov	r6, lr
   406e0:	add	r6, r6, ip
   406e4:	str	r6, [r1, #40]	; 0x28
   406e8:	ldr	r7, [r1, #56]	; 0x38
   406ec:	cmp	r7, r6
   406f0:	bgt	40604 <__assert_fail@plt+0x2db54>
   406f4:	b	407dc <__assert_fail@plt+0x2dd2c>
   406f8:	ldr	r7, [r1, #40]	; 0x28
   406fc:	ldr	r4, [r1, #24]
   40700:	ldr	ip, [r1]
   40704:	add	r6, r7, #1
   40708:	add	r7, r7, r4
   4070c:	str	r6, [r1, #40]	; 0x28
   40710:	ldrb	r4, [ip, r7]
   40714:	ldr	r7, [r1, #56]	; 0x38
   40718:	cmp	r7, r6
   4071c:	bgt	40604 <__assert_fail@plt+0x2db54>
   40720:	b	407dc <__assert_fail@plt+0x2dd2c>
   40724:	add	r6, ip, #1
   40728:	str	r6, [r1, #40]	; 0x28
   4072c:	ldr	r7, [r1, #4]
   40730:	ldrb	r4, [r7, ip]
   40734:	ldr	r7, [r1, #56]	; 0x38
   40738:	cmp	r7, r6
   4073c:	bgt	40604 <__assert_fail@plt+0x2db54>
   40740:	b	407dc <__assert_fail@plt+0x2dd2c>
   40744:	add	r0, r6, #1
   40748:	str	r0, [r1, #40]	; 0x28
   4074c:	mov	r0, #0
   40750:	ldr	r1, [r9, #4]
   40754:	strb	r0, [r1, r2]
   40758:	ldrb	r1, [r5, #4]
   4075c:	cmp	r1, #30
   40760:	beq	40784 <__assert_fail@plt+0x2dcd4>
   40764:	cmp	r1, #28
   40768:	beq	40794 <__assert_fail@plt+0x2dce4>
   4076c:	cmp	r1, #26
   40770:	bne	407dc <__assert_fail@plt+0x2dd2c>
   40774:	mov	r1, #3
   40778:	str	r1, [r9]
   4077c:	sub	sp, fp, #24
   40780:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   40784:	mov	r1, #4
   40788:	str	r1, [r9]
   4078c:	sub	sp, fp, #24
   40790:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   40794:	mov	r1, #2
   40798:	str	r1, [r9]
   4079c:	sub	sp, fp, #24
   407a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   407a4:	ldr	r0, [fp, #12]
   407a8:	cmp	r0, #0
   407ac:	bne	407cc <__assert_fail@plt+0x2dd1c>
   407b0:	ldr	r2, [fp, #8]
   407b4:	mov	r0, sp
   407b8:	bl	40330 <__assert_fail@plt+0x2d880>
   407bc:	ldrb	r1, [sp, #4]
   407c0:	mov	r0, #11
   407c4:	cmp	r1, #21
   407c8:	bne	407dc <__assert_fail@plt+0x2dd2c>
   407cc:	mov	r0, #0
   407d0:	str	r0, [r9]
   407d4:	ldrb	r1, [r5]
   407d8:	strb	r1, [r9, #4]
   407dc:	sub	sp, fp, #24
   407e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   407e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   407e8:	add	fp, sp, #24
   407ec:	mov	r8, r0
   407f0:	ldrb	r0, [fp, #14]
   407f4:	ldr	r6, [fp, #8]
   407f8:	mov	r5, r3
   407fc:	mov	r7, r2
   40800:	mov	r4, r1
   40804:	tst	r0, #64	; 0x40
   40808:	beq	40844 <__assert_fail@plt+0x2dd94>
   4080c:	movw	r1, #12716	; 0x31ac
   40810:	mov	r0, r6
   40814:	movt	r1, #5
   40818:	bl	123fc <strcmp@plt>
   4081c:	cmp	r0, #0
   40820:	beq	4083c <__assert_fail@plt+0x2dd8c>
   40824:	movw	r1, #12722	; 0x31b2
   40828:	mov	r0, r6
   4082c:	movt	r1, #5
   40830:	bl	123fc <strcmp@plt>
   40834:	cmp	r0, #0
   40838:	bne	40844 <__assert_fail@plt+0x2dd94>
   4083c:	movw	r6, #12728	; 0x31b8
   40840:	movt	r6, #5
   40844:	ldr	r0, [r5]
   40848:	ldr	r1, [r7, #36]	; 0x24
   4084c:	cmp	r0, r1
   40850:	beq	40e18 <__assert_fail@plt+0x2e368>
   40854:	mov	r0, r6
   40858:	bl	1239c <wctype@plt>
   4085c:	ldr	r2, [r7, #36]	; 0x24
   40860:	ldr	r1, [r7, #12]
   40864:	add	r3, r2, #1
   40868:	str	r3, [r7, #36]	; 0x24
   4086c:	str	r0, [r1, r2, lsl #2]
   40870:	movw	r1, #12702	; 0x319e
   40874:	mov	r0, r6
   40878:	movt	r1, #5
   4087c:	bl	123fc <strcmp@plt>
   40880:	cmp	r0, #0
   40884:	beq	409b4 <__assert_fail@plt+0x2df04>
   40888:	movw	r1, #12734	; 0x31be
   4088c:	mov	r0, r6
   40890:	movt	r1, #5
   40894:	bl	123fc <strcmp@plt>
   40898:	cmp	r0, #0
   4089c:	beq	40a20 <__assert_fail@plt+0x2df70>
   408a0:	movw	r1, #12722	; 0x31b2
   408a4:	mov	r0, r6
   408a8:	movt	r1, #5
   408ac:	bl	123fc <strcmp@plt>
   408b0:	cmp	r0, #0
   408b4:	beq	40a8c <__assert_fail@plt+0x2dfdc>
   408b8:	movw	r1, #12710	; 0x31a6
   408bc:	mov	r0, r6
   408c0:	movt	r1, #5
   408c4:	bl	123fc <strcmp@plt>
   408c8:	cmp	r0, #0
   408cc:	beq	40af8 <__assert_fail@plt+0x2e048>
   408d0:	movw	r1, #12728	; 0x31b8
   408d4:	mov	r0, r6
   408d8:	movt	r1, #5
   408dc:	bl	123fc <strcmp@plt>
   408e0:	cmp	r0, #0
   408e4:	beq	40b9c <__assert_fail@plt+0x2e0ec>
   408e8:	movw	r1, #12759	; 0x31d7
   408ec:	mov	r0, r6
   408f0:	movt	r1, #5
   408f4:	bl	123fc <strcmp@plt>
   408f8:	cmp	r0, #0
   408fc:	beq	40c08 <__assert_fail@plt+0x2e158>
   40900:	movw	r1, #56920	; 0xde58
   40904:	mov	r0, r6
   40908:	movt	r1, #4
   4090c:	bl	123fc <strcmp@plt>
   40910:	cmp	r0, #0
   40914:	beq	40c74 <__assert_fail@plt+0x2e1c4>
   40918:	movw	r1, #12716	; 0x31ac
   4091c:	mov	r0, r6
   40920:	movt	r1, #5
   40924:	bl	123fc <strcmp@plt>
   40928:	cmp	r0, #0
   4092c:	beq	40cc8 <__assert_fail@plt+0x2e218>
   40930:	movw	r1, #12740	; 0x31c4
   40934:	mov	r0, r6
   40938:	movt	r1, #5
   4093c:	bl	123fc <strcmp@plt>
   40940:	cmp	r0, #0
   40944:	beq	40d1c <__assert_fail@plt+0x2e26c>
   40948:	movw	r1, #12746	; 0x31ca
   4094c:	mov	r0, r6
   40950:	movt	r1, #5
   40954:	bl	123fc <strcmp@plt>
   40958:	cmp	r0, #0
   4095c:	beq	40d70 <__assert_fail@plt+0x2e2c0>
   40960:	movw	r1, #12752	; 0x31d0
   40964:	mov	r0, r6
   40968:	movt	r1, #5
   4096c:	bl	123fc <strcmp@plt>
   40970:	cmp	r0, #0
   40974:	beq	40dc4 <__assert_fail@plt+0x2e314>
   40978:	movw	r1, #12758	; 0x31d6
   4097c:	mov	r0, r6
   40980:	movt	r1, #5
   40984:	bl	123fc <strcmp@plt>
   40988:	mov	r1, r0
   4098c:	mov	r0, #4
   40990:	cmp	r1, #0
   40994:	bne	41188 <__assert_fail@plt+0x2e6d8>
   40998:	bl	12768 <__ctype_b_loc@plt>
   4099c:	ldr	r1, [r0]
   409a0:	mov	r2, #0
   409a4:	mov	r3, #1
   409a8:	cmp	r8, #0
   409ac:	beq	40b78 <__assert_fail@plt+0x2e0c8>
   409b0:	b	410c0 <__assert_fail@plt+0x2e610>
   409b4:	bl	12768 <__ctype_b_loc@plt>
   409b8:	ldr	r1, [r0]
   409bc:	cmp	r8, #0
   409c0:	bne	40eb8 <__assert_fail@plt+0x2e408>
   409c4:	mov	r0, #0
   409c8:	mov	r2, #1
   409cc:	ldrb	r3, [r1]
   409d0:	tst	r3, #8
   409d4:	bne	409f4 <__assert_fail@plt+0x2df44>
   409d8:	add	r0, r0, #1
   409dc:	add	r1, r1, #2
   409e0:	cmp	r0, #256	; 0x100
   409e4:	beq	40a18 <__assert_fail@plt+0x2df68>
   409e8:	ldrb	r3, [r1]
   409ec:	tst	r3, #8
   409f0:	beq	409d8 <__assert_fail@plt+0x2df28>
   409f4:	ubfx	r3, r0, #5, #3
   409f8:	and	r6, r0, #31
   409fc:	ldr	r7, [r4, r3, lsl #2]
   40a00:	orr	r7, r7, r2, lsl r6
   40a04:	str	r7, [r4, r3, lsl #2]
   40a08:	add	r0, r0, #1
   40a0c:	add	r1, r1, #2
   40a10:	cmp	r0, #256	; 0x100
   40a14:	bne	409e8 <__assert_fail@plt+0x2df38>
   40a18:	mov	r0, #0
   40a1c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   40a20:	bl	12768 <__ctype_b_loc@plt>
   40a24:	ldr	r1, [r0]
   40a28:	cmp	r8, #0
   40a2c:	bne	40f44 <__assert_fail@plt+0x2e494>
   40a30:	mov	r0, #0
   40a34:	mov	r2, #1
   40a38:	ldrb	r3, [r1]
   40a3c:	tst	r3, #2
   40a40:	bne	40a60 <__assert_fail@plt+0x2dfb0>
   40a44:	add	r0, r0, #1
   40a48:	add	r1, r1, #2
   40a4c:	cmp	r0, #256	; 0x100
   40a50:	beq	40a84 <__assert_fail@plt+0x2dfd4>
   40a54:	ldrb	r3, [r1]
   40a58:	tst	r3, #2
   40a5c:	beq	40a44 <__assert_fail@plt+0x2df94>
   40a60:	ubfx	r3, r0, #5, #3
   40a64:	and	r6, r0, #31
   40a68:	ldr	r7, [r4, r3, lsl #2]
   40a6c:	orr	r7, r7, r2, lsl r6
   40a70:	str	r7, [r4, r3, lsl #2]
   40a74:	add	r0, r0, #1
   40a78:	add	r1, r1, #2
   40a7c:	cmp	r0, #256	; 0x100
   40a80:	bne	40a54 <__assert_fail@plt+0x2dfa4>
   40a84:	mov	r0, #0
   40a88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   40a8c:	bl	12768 <__ctype_b_loc@plt>
   40a90:	ldr	r1, [r0]
   40a94:	cmp	r8, #0
   40a98:	bne	40fd0 <__assert_fail@plt+0x2e520>
   40a9c:	mov	r0, #0
   40aa0:	mov	r2, #1
   40aa4:	ldrb	r3, [r1, #1]
   40aa8:	tst	r3, #2
   40aac:	bne	40acc <__assert_fail@plt+0x2e01c>
   40ab0:	add	r0, r0, #1
   40ab4:	add	r1, r1, #2
   40ab8:	cmp	r0, #256	; 0x100
   40abc:	beq	40af0 <__assert_fail@plt+0x2e040>
   40ac0:	ldrb	r3, [r1, #1]
   40ac4:	tst	r3, #2
   40ac8:	beq	40ab0 <__assert_fail@plt+0x2e000>
   40acc:	ubfx	r3, r0, #5, #3
   40ad0:	and	r6, r0, #31
   40ad4:	ldr	r7, [r4, r3, lsl #2]
   40ad8:	orr	r7, r7, r2, lsl r6
   40adc:	str	r7, [r4, r3, lsl #2]
   40ae0:	add	r0, r0, #1
   40ae4:	add	r1, r1, #2
   40ae8:	cmp	r0, #256	; 0x100
   40aec:	bne	40ac0 <__assert_fail@plt+0x2e010>
   40af0:	mov	r0, #0
   40af4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   40af8:	bl	12768 <__ctype_b_loc@plt>
   40afc:	ldr	r1, [r0]
   40b00:	cmp	r8, #0
   40b04:	bne	4105c <__assert_fail@plt+0x2e5ac>
   40b08:	mov	r0, #0
   40b0c:	mov	r2, #1
   40b10:	ldrb	r3, [r1, #1]
   40b14:	tst	r3, #32
   40b18:	bne	40b38 <__assert_fail@plt+0x2e088>
   40b1c:	add	r0, r0, #1
   40b20:	add	r1, r1, #2
   40b24:	cmp	r0, #256	; 0x100
   40b28:	beq	40b5c <__assert_fail@plt+0x2e0ac>
   40b2c:	ldrb	r3, [r1, #1]
   40b30:	tst	r3, #32
   40b34:	beq	40b1c <__assert_fail@plt+0x2e06c>
   40b38:	ubfx	r3, r0, #5, #3
   40b3c:	and	r6, r0, #31
   40b40:	ldr	r7, [r4, r3, lsl #2]
   40b44:	orr	r7, r7, r2, lsl r6
   40b48:	str	r7, [r4, r3, lsl #2]
   40b4c:	add	r0, r0, #1
   40b50:	add	r1, r1, #2
   40b54:	cmp	r0, #256	; 0x100
   40b58:	bne	40b2c <__assert_fail@plt+0x2e07c>
   40b5c:	mov	r0, #0
   40b60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   40b64:	add	r2, r2, #1
   40b68:	add	r1, r1, #2
   40b6c:	mov	r0, #0
   40b70:	cmp	r2, #256	; 0x100
   40b74:	beq	41188 <__assert_fail@plt+0x2e6d8>
   40b78:	ldrb	r0, [r1, #1]
   40b7c:	tst	r0, #16
   40b80:	beq	40b64 <__assert_fail@plt+0x2e0b4>
   40b84:	ubfx	r0, r2, #5, #3
   40b88:	and	r6, r2, #31
   40b8c:	ldr	r7, [r4, r0, lsl #2]
   40b90:	orr	r7, r7, r3, lsl r6
   40b94:	str	r7, [r4, r0, lsl #2]
   40b98:	b	40b64 <__assert_fail@plt+0x2e0b4>
   40b9c:	bl	12768 <__ctype_b_loc@plt>
   40ba0:	ldr	r1, [r0]
   40ba4:	cmp	r8, #0
   40ba8:	bne	410e8 <__assert_fail@plt+0x2e638>
   40bac:	mov	r0, #0
   40bb0:	mov	r2, #1
   40bb4:	ldrb	r3, [r1, #1]
   40bb8:	tst	r3, #4
   40bbc:	bne	40bdc <__assert_fail@plt+0x2e12c>
   40bc0:	add	r0, r0, #1
   40bc4:	add	r1, r1, #2
   40bc8:	cmp	r0, #256	; 0x100
   40bcc:	beq	40c00 <__assert_fail@plt+0x2e150>
   40bd0:	ldrb	r3, [r1, #1]
   40bd4:	tst	r3, #4
   40bd8:	beq	40bc0 <__assert_fail@plt+0x2e110>
   40bdc:	ubfx	r3, r0, #5, #3
   40be0:	and	r6, r0, #31
   40be4:	ldr	r7, [r4, r3, lsl #2]
   40be8:	orr	r7, r7, r2, lsl r6
   40bec:	str	r7, [r4, r3, lsl #2]
   40bf0:	add	r0, r0, #1
   40bf4:	add	r1, r1, #2
   40bf8:	cmp	r0, #256	; 0x100
   40bfc:	bne	40bd0 <__assert_fail@plt+0x2e120>
   40c00:	mov	r0, #0
   40c04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   40c08:	bl	12768 <__ctype_b_loc@plt>
   40c0c:	ldr	r1, [r0]
   40c10:	cmp	r8, #0
   40c14:	bne	41138 <__assert_fail@plt+0x2e688>
   40c18:	mov	r0, #0
   40c1c:	mov	r2, #1
   40c20:	ldrb	r3, [r1, #1]
   40c24:	tst	r3, #8
   40c28:	bne	40c48 <__assert_fail@plt+0x2e198>
   40c2c:	add	r0, r0, #1
   40c30:	add	r1, r1, #2
   40c34:	cmp	r0, #256	; 0x100
   40c38:	beq	40c6c <__assert_fail@plt+0x2e1bc>
   40c3c:	ldrb	r3, [r1, #1]
   40c40:	tst	r3, #8
   40c44:	beq	40c2c <__assert_fail@plt+0x2e17c>
   40c48:	ubfx	r3, r0, #5, #3
   40c4c:	and	r6, r0, #31
   40c50:	ldr	r7, [r4, r3, lsl #2]
   40c54:	orr	r7, r7, r2, lsl r6
   40c58:	str	r7, [r4, r3, lsl #2]
   40c5c:	add	r0, r0, #1
   40c60:	add	r1, r1, #2
   40c64:	cmp	r0, #256	; 0x100
   40c68:	bne	40c3c <__assert_fail@plt+0x2e18c>
   40c6c:	mov	r0, #0
   40c70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   40c74:	bl	12768 <__ctype_b_loc@plt>
   40c78:	ldr	r1, [r0]
   40c7c:	mov	r2, #0
   40c80:	mov	r3, #1
   40c84:	cmp	r8, #0
   40c88:	beq	40ca4 <__assert_fail@plt+0x2e1f4>
   40c8c:	b	40e54 <__assert_fail@plt+0x2e3a4>
   40c90:	add	r2, r2, #1
   40c94:	add	r1, r1, #2
   40c98:	mov	r0, #0
   40c9c:	cmp	r2, #256	; 0x100
   40ca0:	beq	41188 <__assert_fail@plt+0x2e6d8>
   40ca4:	ldrb	r0, [r1, #1]
   40ca8:	tst	r0, #64	; 0x40
   40cac:	beq	40c90 <__assert_fail@plt+0x2e1e0>
   40cb0:	ubfx	r0, r2, #5, #3
   40cb4:	and	r6, r2, #31
   40cb8:	ldr	r7, [r4, r0, lsl #2]
   40cbc:	orr	r7, r7, r3, lsl r6
   40cc0:	str	r7, [r4, r0, lsl #2]
   40cc4:	b	40c90 <__assert_fail@plt+0x2e1e0>
   40cc8:	bl	12768 <__ctype_b_loc@plt>
   40ccc:	ldr	r1, [r0]
   40cd0:	mov	r2, #0
   40cd4:	mov	r3, #1
   40cd8:	cmp	r8, #0
   40cdc:	beq	40cf8 <__assert_fail@plt+0x2e248>
   40ce0:	b	40e90 <__assert_fail@plt+0x2e3e0>
   40ce4:	add	r2, r2, #1
   40ce8:	add	r1, r1, #2
   40cec:	mov	r0, #0
   40cf0:	cmp	r2, #256	; 0x100
   40cf4:	beq	41188 <__assert_fail@plt+0x2e6d8>
   40cf8:	ldrb	r0, [r1, #1]
   40cfc:	tst	r0, #1
   40d00:	beq	40ce4 <__assert_fail@plt+0x2e234>
   40d04:	ubfx	r0, r2, #5, #3
   40d08:	and	r6, r2, #31
   40d0c:	ldr	r7, [r4, r0, lsl #2]
   40d10:	orr	r7, r7, r3, lsl r6
   40d14:	str	r7, [r4, r0, lsl #2]
   40d18:	b	40ce4 <__assert_fail@plt+0x2e234>
   40d1c:	bl	12768 <__ctype_b_loc@plt>
   40d20:	ldr	r1, [r0]
   40d24:	mov	r2, #0
   40d28:	mov	r3, #1
   40d2c:	cmp	r8, #0
   40d30:	beq	40d4c <__assert_fail@plt+0x2e29c>
   40d34:	b	40f1c <__assert_fail@plt+0x2e46c>
   40d38:	add	r2, r2, #1
   40d3c:	add	r1, r1, #2
   40d40:	mov	r0, #0
   40d44:	cmp	r2, #256	; 0x100
   40d48:	beq	41188 <__assert_fail@plt+0x2e6d8>
   40d4c:	ldrb	r0, [r1]
   40d50:	tst	r0, #1
   40d54:	beq	40d38 <__assert_fail@plt+0x2e288>
   40d58:	ubfx	r0, r2, #5, #3
   40d5c:	and	r6, r2, #31
   40d60:	ldr	r7, [r4, r0, lsl #2]
   40d64:	orr	r7, r7, r3, lsl r6
   40d68:	str	r7, [r4, r0, lsl #2]
   40d6c:	b	40d38 <__assert_fail@plt+0x2e288>
   40d70:	bl	12768 <__ctype_b_loc@plt>
   40d74:	ldr	r1, [r0]
   40d78:	mov	r2, #0
   40d7c:	mov	r3, #1
   40d80:	cmp	r8, #0
   40d84:	beq	40da0 <__assert_fail@plt+0x2e2f0>
   40d88:	b	40fa8 <__assert_fail@plt+0x2e4f8>
   40d8c:	add	r2, r2, #1
   40d90:	add	r1, r1, #2
   40d94:	mov	r0, #0
   40d98:	cmp	r2, #256	; 0x100
   40d9c:	beq	41188 <__assert_fail@plt+0x2e6d8>
   40da0:	ldrsh	r0, [r1]
   40da4:	cmn	r0, #1
   40da8:	bgt	40d8c <__assert_fail@plt+0x2e2dc>
   40dac:	ubfx	r0, r2, #5, #3
   40db0:	and	r6, r2, #31
   40db4:	ldr	r7, [r4, r0, lsl #2]
   40db8:	orr	r7, r7, r3, lsl r6
   40dbc:	str	r7, [r4, r0, lsl #2]
   40dc0:	b	40d8c <__assert_fail@plt+0x2e2dc>
   40dc4:	bl	12768 <__ctype_b_loc@plt>
   40dc8:	ldr	r1, [r0]
   40dcc:	mov	r2, #0
   40dd0:	mov	r3, #1
   40dd4:	cmp	r8, #0
   40dd8:	beq	40df4 <__assert_fail@plt+0x2e344>
   40ddc:	b	41034 <__assert_fail@plt+0x2e584>
   40de0:	add	r2, r2, #1
   40de4:	add	r1, r1, #2
   40de8:	mov	r0, #0
   40dec:	cmp	r2, #256	; 0x100
   40df0:	beq	41188 <__assert_fail@plt+0x2e6d8>
   40df4:	ldrb	r0, [r1]
   40df8:	tst	r0, #4
   40dfc:	beq	40de0 <__assert_fail@plt+0x2e330>
   40e00:	ubfx	r0, r2, #5, #3
   40e04:	and	r6, r2, #31
   40e08:	ldr	r7, [r4, r0, lsl #2]
   40e0c:	orr	r7, r7, r3, lsl r6
   40e10:	str	r7, [r4, r0, lsl #2]
   40e14:	b	40de0 <__assert_fail@plt+0x2e330>
   40e18:	mov	r1, #1
   40e1c:	orr	r9, r1, r0, lsl #1
   40e20:	ldr	r0, [r7, #12]
   40e24:	lsl	r1, r9, #2
   40e28:	bl	36110 <__assert_fail@plt+0x23660>
   40e2c:	cmp	r0, #0
   40e30:	beq	4118c <__assert_fail@plt+0x2e6dc>
   40e34:	str	r0, [r7, #12]
   40e38:	str	r9, [r5]
   40e3c:	b	40854 <__assert_fail@plt+0x2dda4>
   40e40:	add	r2, r2, #1
   40e44:	add	r1, r1, #2
   40e48:	mov	r0, #0
   40e4c:	cmp	r2, #256	; 0x100
   40e50:	beq	41188 <__assert_fail@plt+0x2e6d8>
   40e54:	ldrb	r0, [r1, #1]
   40e58:	tst	r0, #64	; 0x40
   40e5c:	beq	40e40 <__assert_fail@plt+0x2e390>
   40e60:	ldrb	r0, [r8, r2]
   40e64:	ubfx	r7, r0, #5, #3
   40e68:	and	r0, r0, #31
   40e6c:	ldr	r6, [r4, r7, lsl #2]
   40e70:	orr	r0, r6, r3, lsl r0
   40e74:	str	r0, [r4, r7, lsl #2]
   40e78:	b	40e40 <__assert_fail@plt+0x2e390>
   40e7c:	add	r2, r2, #1
   40e80:	add	r1, r1, #2
   40e84:	mov	r0, #0
   40e88:	cmp	r2, #256	; 0x100
   40e8c:	beq	41188 <__assert_fail@plt+0x2e6d8>
   40e90:	ldrb	r0, [r1, #1]
   40e94:	tst	r0, #1
   40e98:	beq	40e7c <__assert_fail@plt+0x2e3cc>
   40e9c:	ldrb	r0, [r8, r2]
   40ea0:	ubfx	r7, r0, #5, #3
   40ea4:	and	r0, r0, #31
   40ea8:	ldr	r6, [r4, r7, lsl #2]
   40eac:	orr	r0, r6, r3, lsl r0
   40eb0:	str	r0, [r4, r7, lsl #2]
   40eb4:	b	40e7c <__assert_fail@plt+0x2e3cc>
   40eb8:	mov	r2, #0
   40ebc:	mov	r3, #1
   40ec0:	ldrb	r0, [r1]
   40ec4:	tst	r0, #8
   40ec8:	bne	40eec <__assert_fail@plt+0x2e43c>
   40ecc:	add	r2, r2, #1
   40ed0:	add	r1, r1, #2
   40ed4:	mov	r0, #0
   40ed8:	cmp	r2, #256	; 0x100
   40edc:	beq	41188 <__assert_fail@plt+0x2e6d8>
   40ee0:	ldrb	r0, [r1]
   40ee4:	tst	r0, #8
   40ee8:	beq	40ecc <__assert_fail@plt+0x2e41c>
   40eec:	ldrb	r0, [r8, r2]
   40ef0:	ubfx	r7, r0, #5, #3
   40ef4:	and	r0, r0, #31
   40ef8:	ldr	r6, [r4, r7, lsl #2]
   40efc:	orr	r0, r6, r3, lsl r0
   40f00:	str	r0, [r4, r7, lsl #2]
   40f04:	b	40ecc <__assert_fail@plt+0x2e41c>
   40f08:	add	r2, r2, #1
   40f0c:	add	r1, r1, #2
   40f10:	mov	r0, #0
   40f14:	cmp	r2, #256	; 0x100
   40f18:	beq	41188 <__assert_fail@plt+0x2e6d8>
   40f1c:	ldrb	r0, [r1]
   40f20:	tst	r0, #1
   40f24:	beq	40f08 <__assert_fail@plt+0x2e458>
   40f28:	ldrb	r0, [r8, r2]
   40f2c:	ubfx	r7, r0, #5, #3
   40f30:	and	r0, r0, #31
   40f34:	ldr	r6, [r4, r7, lsl #2]
   40f38:	orr	r0, r6, r3, lsl r0
   40f3c:	str	r0, [r4, r7, lsl #2]
   40f40:	b	40f08 <__assert_fail@plt+0x2e458>
   40f44:	mov	r2, #0
   40f48:	mov	r3, #1
   40f4c:	ldrb	r0, [r1]
   40f50:	tst	r0, #2
   40f54:	bne	40f78 <__assert_fail@plt+0x2e4c8>
   40f58:	add	r2, r2, #1
   40f5c:	add	r1, r1, #2
   40f60:	mov	r0, #0
   40f64:	cmp	r2, #256	; 0x100
   40f68:	beq	41188 <__assert_fail@plt+0x2e6d8>
   40f6c:	ldrb	r0, [r1]
   40f70:	tst	r0, #2
   40f74:	beq	40f58 <__assert_fail@plt+0x2e4a8>
   40f78:	ldrb	r0, [r8, r2]
   40f7c:	ubfx	r7, r0, #5, #3
   40f80:	and	r0, r0, #31
   40f84:	ldr	r6, [r4, r7, lsl #2]
   40f88:	orr	r0, r6, r3, lsl r0
   40f8c:	str	r0, [r4, r7, lsl #2]
   40f90:	b	40f58 <__assert_fail@plt+0x2e4a8>
   40f94:	add	r2, r2, #1
   40f98:	add	r1, r1, #2
   40f9c:	mov	r0, #0
   40fa0:	cmp	r2, #256	; 0x100
   40fa4:	beq	41188 <__assert_fail@plt+0x2e6d8>
   40fa8:	ldrsh	r0, [r1]
   40fac:	cmn	r0, #1
   40fb0:	bgt	40f94 <__assert_fail@plt+0x2e4e4>
   40fb4:	ldrb	r0, [r8, r2]
   40fb8:	ubfx	r7, r0, #5, #3
   40fbc:	and	r0, r0, #31
   40fc0:	ldr	r6, [r4, r7, lsl #2]
   40fc4:	orr	r0, r6, r3, lsl r0
   40fc8:	str	r0, [r4, r7, lsl #2]
   40fcc:	b	40f94 <__assert_fail@plt+0x2e4e4>
   40fd0:	mov	r2, #0
   40fd4:	mov	r3, #1
   40fd8:	ldrb	r0, [r1, #1]
   40fdc:	tst	r0, #2
   40fe0:	bne	41004 <__assert_fail@plt+0x2e554>
   40fe4:	add	r2, r2, #1
   40fe8:	add	r1, r1, #2
   40fec:	mov	r0, #0
   40ff0:	cmp	r2, #256	; 0x100
   40ff4:	beq	41188 <__assert_fail@plt+0x2e6d8>
   40ff8:	ldrb	r0, [r1, #1]
   40ffc:	tst	r0, #2
   41000:	beq	40fe4 <__assert_fail@plt+0x2e534>
   41004:	ldrb	r0, [r8, r2]
   41008:	ubfx	r7, r0, #5, #3
   4100c:	and	r0, r0, #31
   41010:	ldr	r6, [r4, r7, lsl #2]
   41014:	orr	r0, r6, r3, lsl r0
   41018:	str	r0, [r4, r7, lsl #2]
   4101c:	b	40fe4 <__assert_fail@plt+0x2e534>
   41020:	add	r2, r2, #1
   41024:	add	r1, r1, #2
   41028:	mov	r0, #0
   4102c:	cmp	r2, #256	; 0x100
   41030:	beq	41188 <__assert_fail@plt+0x2e6d8>
   41034:	ldrb	r0, [r1]
   41038:	tst	r0, #4
   4103c:	beq	41020 <__assert_fail@plt+0x2e570>
   41040:	ldrb	r0, [r8, r2]
   41044:	ubfx	r7, r0, #5, #3
   41048:	and	r0, r0, #31
   4104c:	ldr	r6, [r4, r7, lsl #2]
   41050:	orr	r0, r6, r3, lsl r0
   41054:	str	r0, [r4, r7, lsl #2]
   41058:	b	41020 <__assert_fail@plt+0x2e570>
   4105c:	mov	r2, #0
   41060:	mov	r3, #1
   41064:	ldrb	r0, [r1, #1]
   41068:	tst	r0, #32
   4106c:	bne	41090 <__assert_fail@plt+0x2e5e0>
   41070:	add	r2, r2, #1
   41074:	add	r1, r1, #2
   41078:	mov	r0, #0
   4107c:	cmp	r2, #256	; 0x100
   41080:	beq	41188 <__assert_fail@plt+0x2e6d8>
   41084:	ldrb	r0, [r1, #1]
   41088:	tst	r0, #32
   4108c:	beq	41070 <__assert_fail@plt+0x2e5c0>
   41090:	ldrb	r0, [r8, r2]
   41094:	ubfx	r7, r0, #5, #3
   41098:	and	r0, r0, #31
   4109c:	ldr	r6, [r4, r7, lsl #2]
   410a0:	orr	r0, r6, r3, lsl r0
   410a4:	str	r0, [r4, r7, lsl #2]
   410a8:	b	41070 <__assert_fail@plt+0x2e5c0>
   410ac:	add	r2, r2, #1
   410b0:	add	r1, r1, #2
   410b4:	mov	r0, #0
   410b8:	cmp	r2, #256	; 0x100
   410bc:	beq	41188 <__assert_fail@plt+0x2e6d8>
   410c0:	ldrb	r0, [r1, #1]
   410c4:	tst	r0, #16
   410c8:	beq	410ac <__assert_fail@plt+0x2e5fc>
   410cc:	ldrb	r0, [r8, r2]
   410d0:	ubfx	r7, r0, #5, #3
   410d4:	and	r0, r0, #31
   410d8:	ldr	r6, [r4, r7, lsl #2]
   410dc:	orr	r0, r6, r3, lsl r0
   410e0:	str	r0, [r4, r7, lsl #2]
   410e4:	b	410ac <__assert_fail@plt+0x2e5fc>
   410e8:	mov	r2, #0
   410ec:	mov	r3, #1
   410f0:	ldrb	r0, [r1, #1]
   410f4:	tst	r0, #4
   410f8:	bne	4111c <__assert_fail@plt+0x2e66c>
   410fc:	add	r2, r2, #1
   41100:	add	r1, r1, #2
   41104:	mov	r0, #0
   41108:	cmp	r2, #256	; 0x100
   4110c:	beq	41188 <__assert_fail@plt+0x2e6d8>
   41110:	ldrb	r0, [r1, #1]
   41114:	tst	r0, #4
   41118:	beq	410fc <__assert_fail@plt+0x2e64c>
   4111c:	ldrb	r0, [r8, r2]
   41120:	ubfx	r7, r0, #5, #3
   41124:	and	r0, r0, #31
   41128:	ldr	r6, [r4, r7, lsl #2]
   4112c:	orr	r0, r6, r3, lsl r0
   41130:	str	r0, [r4, r7, lsl #2]
   41134:	b	410fc <__assert_fail@plt+0x2e64c>
   41138:	mov	r2, #0
   4113c:	mov	r3, #1
   41140:	ldrb	r0, [r1, #1]
   41144:	tst	r0, #8
   41148:	bne	4116c <__assert_fail@plt+0x2e6bc>
   4114c:	add	r2, r2, #1
   41150:	add	r1, r1, #2
   41154:	mov	r0, #0
   41158:	cmp	r2, #256	; 0x100
   4115c:	beq	41188 <__assert_fail@plt+0x2e6d8>
   41160:	ldrb	r0, [r1, #1]
   41164:	tst	r0, #8
   41168:	beq	4114c <__assert_fail@plt+0x2e69c>
   4116c:	ldrb	r0, [r8, r2]
   41170:	ubfx	r7, r0, #5, #3
   41174:	and	r0, r0, #31
   41178:	ldr	r6, [r4, r7, lsl #2]
   4117c:	orr	r0, r6, r3, lsl r0
   41180:	str	r0, [r4, r7, lsl #2]
   41184:	b	4114c <__assert_fail@plt+0x2e69c>
   41188:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   4118c:	mov	r0, #12
   41190:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   41194:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   41198:	add	fp, sp, #24
   4119c:	ldr	r3, [r1, #24]
   411a0:	mvn	r7, #1
   411a4:	ldr	r2, [r1, #28]
   411a8:	mov	r4, #0
   411ac:	uxtab	r3, r7, r3
   411b0:	cmp	r3, #14
   411b4:	bhi	412d8 <__assert_fail@plt+0x2e828>
   411b8:	add	r7, pc, #0
   411bc:	ldr	pc, [r7, r3, lsl #2]
   411c0:	andeq	r1, r4, ip, lsl #6
   411c4:	ldrdeq	r1, [r4], -r8
   411c8:	strdeq	r1, [r4], -r0
   411cc:	ldrdeq	r1, [r4], -r8
   411d0:	ldrdeq	r1, [r4], -r8
   411d4:	ldrdeq	r1, [r4], -r8
   411d8:	strdeq	r1, [r4], -ip
   411dc:	strdeq	r1, [r4], -ip
   411e0:	andeq	r1, r4, r0, asr r2
   411e4:	andeq	r1, r4, r0, asr r2
   411e8:	strdeq	r1, [r4], -ip
   411ec:	ldrdeq	r1, [r4], -r8
   411f0:	ldrdeq	r1, [r4], -r8
   411f4:	ldrdeq	r1, [r4], -r8
   411f8:	andeq	r1, r4, ip, lsl #6
   411fc:	ldr	r1, [r1, #16]
   41200:	ldr	r5, [r1, #28]
   41204:	ldr	r6, [r0, #20]
   41208:	add	r0, r2, r2, lsl #1
   4120c:	mov	r1, #1
   41210:	str	r1, [r6, r0, lsl #2]!
   41214:	mov	r0, #4
   41218:	mov	r7, r6
   4121c:	str	r1, [r7, #4]!
   41220:	bl	35350 <__assert_fail@plt+0x228a0>
   41224:	cmp	r0, #0
   41228:	str	r0, [r6, #8]
   4122c:	strne	r5, [r0]
   41230:	movne	r0, r4
   41234:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   41238:	mov	r0, #0
   4123c:	str	r0, [r7]
   41240:	str	r0, [r6]
   41244:	mov	r4, #12
   41248:	mov	r0, r4
   4124c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   41250:	ldrb	r3, [r0, #88]	; 0x58
   41254:	add	r6, r1, #16
   41258:	add	r5, r2, r2, lsl #1
   4125c:	orr	r3, r3, #1
   41260:	strb	r3, [r0, #88]	; 0x58
   41264:	mov	r3, r6
   41268:	ldr	r7, [r1, #4]
   4126c:	ldr	r1, [r1, #8]
   41270:	cmp	r1, #0
   41274:	addne	r3, r1, #12
   41278:	cmp	r7, #0
   4127c:	ldr	r1, [r3]
   41280:	addne	r6, r7, #12
   41284:	ldr	r8, [r1, #28]
   41288:	ldr	r1, [r6]
   4128c:	ldr	r6, [r0, #20]
   41290:	mov	r0, #2
   41294:	ldr	r9, [r1, #28]
   41298:	mov	r7, r6
   4129c:	str	r0, [r7, r5, lsl #2]!
   412a0:	mov	r0, #8
   412a4:	bl	35350 <__assert_fail@plt+0x228a0>
   412a8:	cmp	r0, #0
   412ac:	str	r0, [r7, #8]
   412b0:	beq	41244 <__assert_fail@plt+0x2e794>
   412b4:	add	r1, r6, r5, lsl #2
   412b8:	cmp	r9, r8
   412bc:	add	r1, r1, #4
   412c0:	bne	41314 <__assert_fail@plt+0x2e864>
   412c4:	mov	r2, #1
   412c8:	str	r2, [r1]
   412cc:	str	r9, [r0]
   412d0:	mov	r0, r4
   412d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   412d8:	ldr	r1, [r1, #16]
   412dc:	ldr	r0, [r0, #12]
   412e0:	ldr	r1, [r1, #28]
   412e4:	str	r1, [r0, r2, lsl #2]
   412e8:	mov	r0, r4
   412ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   412f0:	ldr	r7, [r1, #16]
   412f4:	ldr	r3, [r0, #12]
   412f8:	ldr	r5, [r7, #28]
   412fc:	str	r5, [r3, r2, lsl #2]
   41300:	ldrb	r1, [r1, #24]
   41304:	cmp	r1, #4
   41308:	beq	41204 <__assert_fail@plt+0x2e754>
   4130c:	mov	r0, r4
   41310:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   41314:	mov	r2, #2
   41318:	str	r2, [r1]
   4131c:	stmcs	r0, {r8, r9}
   41320:	strcc	r9, [r0]
   41324:	strcc	r8, [r0, #4]
   41328:	mov	r0, r4
   4132c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   41330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41334:	add	fp, sp, #28
   41338:	sub	sp, sp, #4
   4133c:	ldr	r6, [r3, #4]
   41340:	tst	r2, #16
   41344:	mov	r9, r3
   41348:	mov	r7, r1
   4134c:	mov	r8, r0
   41350:	cmpne	r6, #0
   41354:	bne	4150c <__assert_fail@plt+0x2ea5c>
   41358:	ldr	r1, [r7, #64]	; 0x40
   4135c:	cmp	r1, #31
   41360:	beq	41534 <__assert_fail@plt+0x2ea84>
   41364:	ldr	r0, [r7, #56]	; 0x38
   41368:	add	r0, r0, r1, lsl #5
   4136c:	add	r2, r1, #1
   41370:	vmov.i32	q8, #0	; 0x00000000
   41374:	mov	r1, #0
   41378:	str	r2, [r7, #64]	; 0x40
   4137c:	mov	r2, #8
   41380:	add	sl, r0, #4
   41384:	str	r1, [r0, #20]
   41388:	str	r1, [r0, #24]
   4138c:	str	r2, [r0, #28]
   41390:	mov	r0, #28
   41394:	mov	r1, sl
   41398:	vst1.32	{d16-d17}, [r1], r0
   4139c:	mvn	r0, #0
   413a0:	str	r0, [r1]
   413a4:	ldr	r1, [r7, #64]	; 0x40
   413a8:	cmp	r1, #31
   413ac:	beq	41594 <__assert_fail@plt+0x2eae4>
   413b0:	ldr	r0, [r7, #56]	; 0x38
   413b4:	add	r0, r0, r1, lsl #5
   413b8:	add	r2, r1, #1
   413bc:	vmov.i32	q8, #0	; 0x00000000
   413c0:	mov	r1, #0
   413c4:	str	r2, [r7, #64]	; 0x40
   413c8:	mov	r2, #9
   413cc:	add	r5, r0, #4
   413d0:	str	r1, [r0, #20]
   413d4:	str	r1, [r0, #24]
   413d8:	str	r2, [r0, #28]
   413dc:	mov	r0, #28
   413e0:	mov	r1, r5
   413e4:	vst1.32	{d16-d17}, [r1], r0
   413e8:	mvn	r0, #0
   413ec:	str	r0, [r1]
   413f0:	cmp	r6, #0
   413f4:	mov	r4, r5
   413f8:	beq	4144c <__assert_fail@plt+0x2e99c>
   413fc:	ldr	r1, [r7, #64]	; 0x40
   41400:	cmp	r1, #31
   41404:	beq	4155c <__assert_fail@plt+0x2eaac>
   41408:	ldr	r0, [r7, #56]	; 0x38
   4140c:	add	r4, r0, r1, lsl #5
   41410:	add	r2, r1, #1
   41414:	mov	r0, #0
   41418:	cmp	r5, #0
   4141c:	mov	r1, #16
   41420:	str	r2, [r7, #64]	; 0x40
   41424:	mvn	r2, #0
   41428:	str	r0, [r4, #4]!
   4142c:	add	r3, r4, #20
   41430:	str	r6, [r4, #4]
   41434:	str	r5, [r4, #8]
   41438:	str	r0, [r4, #12]
   4143c:	str	r0, [r4, #16]
   41440:	stm	r3, {r0, r1, r2}
   41444:	str	r4, [r6]
   41448:	strne	r4, [r5]
   4144c:	ldr	r1, [r7, #64]	; 0x40
   41450:	cmp	r1, #31
   41454:	beq	415e0 <__assert_fail@plt+0x2eb30>
   41458:	ldr	r0, [r7, #56]	; 0x38
   4145c:	add	r6, r0, r1, lsl #5
   41460:	add	r2, r1, #1
   41464:	mov	r0, #0
   41468:	cmp	sl, #0
   4146c:	mov	r1, #16
   41470:	str	r2, [r7, #64]	; 0x40
   41474:	mvn	r2, #0
   41478:	str	r0, [r6, #4]!
   4147c:	add	r3, r6, #20
   41480:	str	sl, [r6, #4]
   41484:	str	r4, [r6, #8]
   41488:	str	r0, [r6, #12]
   4148c:	str	r0, [r6, #16]
   41490:	stm	r3, {r0, r1, r2}
   41494:	strne	r6, [sl]
   41498:	cmp	r4, #0
   4149c:	strne	r6, [r4]
   414a0:	cmp	r5, #0
   414a4:	beq	414b4 <__assert_fail@plt+0x2ea04>
   414a8:	cmp	sl, #0
   414ac:	cmpne	r4, #0
   414b0:	bne	414cc <__assert_fail@plt+0x2ea1c>
   414b4:	mov	r0, #12
   414b8:	mov	r6, #0
   414bc:	str	r0, [r8]
   414c0:	mov	r0, r6
   414c4:	sub	sp, fp, #28
   414c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   414cc:	cmp	r6, #0
   414d0:	beq	414b4 <__assert_fail@plt+0x2ea04>
   414d4:	ldr	r0, [r9, #20]
   414d8:	str	r0, [r5, #20]
   414dc:	str	r0, [sl, #20]
   414e0:	ldr	r1, [r9, #24]
   414e4:	ldr	r0, [r5, #24]
   414e8:	lsr	r1, r1, #19
   414ec:	bfi	r0, r1, #19, #1
   414f0:	str	r0, [r5, #24]
   414f4:	ldr	r0, [sl, #24]
   414f8:	bfi	r0, r1, #19, #1
   414fc:	str	r0, [sl, #24]
   41500:	mov	r0, r6
   41504:	sub	sp, fp, #28
   41508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4150c:	ldr	r0, [r9, #20]
   41510:	cmp	r0, #31
   41514:	bgt	41528 <__assert_fail@plt+0x2ea78>
   41518:	ldr	r1, [r7, #80]	; 0x50
   4151c:	mov	r2, #1
   41520:	tst	r1, r2, lsl r0
   41524:	bne	41358 <__assert_fail@plt+0x2e8a8>
   41528:	mov	r0, r6
   4152c:	sub	sp, fp, #28
   41530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41534:	mov	r0, #996	; 0x3e4
   41538:	bl	35350 <__assert_fail@plt+0x228a0>
   4153c:	cmp	r0, #0
   41540:	beq	41584 <__assert_fail@plt+0x2ead4>
   41544:	ldr	r1, [r7, #56]	; 0x38
   41548:	str	r1, [r0]
   4154c:	mov	r1, #0
   41550:	str	r1, [r7, #64]	; 0x40
   41554:	str	r0, [r7, #56]	; 0x38
   41558:	b	41368 <__assert_fail@plt+0x2e8b8>
   4155c:	mov	r0, #996	; 0x3e4
   41560:	bl	35350 <__assert_fail@plt+0x228a0>
   41564:	cmp	r0, #0
   41568:	beq	415d0 <__assert_fail@plt+0x2eb20>
   4156c:	ldr	r1, [r7, #56]	; 0x38
   41570:	str	r1, [r0]
   41574:	mov	r1, #0
   41578:	str	r1, [r7, #64]	; 0x40
   4157c:	str	r0, [r7, #56]	; 0x38
   41580:	b	4140c <__assert_fail@plt+0x2e95c>
   41584:	mov	sl, #0
   41588:	ldr	r1, [r7, #64]	; 0x40
   4158c:	cmp	r1, #31
   41590:	bne	413b0 <__assert_fail@plt+0x2e900>
   41594:	mov	r0, #996	; 0x3e4
   41598:	bl	35350 <__assert_fail@plt+0x228a0>
   4159c:	cmp	r0, #0
   415a0:	beq	415bc <__assert_fail@plt+0x2eb0c>
   415a4:	ldr	r1, [r7, #56]	; 0x38
   415a8:	str	r1, [r0]
   415ac:	mov	r1, #0
   415b0:	str	r1, [r7, #64]	; 0x40
   415b4:	str	r0, [r7, #56]	; 0x38
   415b8:	b	413b4 <__assert_fail@plt+0x2e904>
   415bc:	mov	r5, #0
   415c0:	cmp	r6, #0
   415c4:	mov	r4, r5
   415c8:	bne	413fc <__assert_fail@plt+0x2e94c>
   415cc:	b	4144c <__assert_fail@plt+0x2e99c>
   415d0:	mov	r4, #0
   415d4:	ldr	r1, [r7, #64]	; 0x40
   415d8:	cmp	r1, #31
   415dc:	bne	41458 <__assert_fail@plt+0x2e9a8>
   415e0:	mov	r0, #996	; 0x3e4
   415e4:	bl	35350 <__assert_fail@plt+0x228a0>
   415e8:	cmp	r0, #0
   415ec:	beq	41608 <__assert_fail@plt+0x2eb58>
   415f0:	ldr	r1, [r7, #56]	; 0x38
   415f4:	str	r1, [r0]
   415f8:	mov	r1, #0
   415fc:	str	r1, [r7, #64]	; 0x40
   41600:	str	r0, [r7, #56]	; 0x38
   41604:	b	4145c <__assert_fail@plt+0x2e9ac>
   41608:	mov	r6, #0
   4160c:	cmp	r5, #0
   41610:	bne	414a8 <__assert_fail@plt+0x2e9f8>
   41614:	b	414b4 <__assert_fail@plt+0x2ea04>
   41618:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4161c:	add	fp, sp, #28
   41620:	sub	sp, sp, #12
   41624:	mov	r4, r0
   41628:	ldr	r7, [r0, #4]
   4162c:	ldr	r0, [r0, #8]
   41630:	mov	r5, r2
   41634:	mov	r9, r1
   41638:	cmp	r0, r7
   4163c:	bcs	41708 <__assert_fail@plt+0x2ec58>
   41640:	ldr	r1, [r4]
   41644:	str	r9, [r1, r0, lsl #3]!
   41648:	str	r5, [r1, #4]
   4164c:	ldr	r0, [r4]
   41650:	ldr	r1, [r4, #8]
   41654:	add	r0, r0, r1, lsl #3
   41658:	ldr	r1, [r0, #4]
   4165c:	bfc	r1, #8, #10
   41660:	str	r1, [r0, #4]
   41664:	uxtb	r1, r5
   41668:	cmp	r1, #5
   4166c:	bne	41680 <__assert_fail@plt+0x2ebd0>
   41670:	ldr	r2, [r4, #92]	; 0x5c
   41674:	mov	r0, #1048576	; 0x100000
   41678:	cmp	r2, #1
   4167c:	bgt	41690 <__assert_fail@plt+0x2ebe0>
   41680:	sub	r0, r1, #6
   41684:	clz	r0, r0
   41688:	lsr	r0, r0, #5
   4168c:	lsl	r0, r0, #20
   41690:	ldr	r1, [r4]
   41694:	ldr	r2, [r4, #8]
   41698:	add	r1, r1, r2, lsl #3
   4169c:	ldr	r2, [r1, #4]
   416a0:	bic	r2, r2, #1048576	; 0x100000
   416a4:	orr	r0, r2, r0
   416a8:	mvn	r2, #0
   416ac:	str	r0, [r1, #4]
   416b0:	ldr	r0, [r4, #8]
   416b4:	ldr	r1, [r4, #12]
   416b8:	str	r2, [r1, r0, lsl #2]
   416bc:	mov	r2, #0
   416c0:	ldr	r0, [r4, #8]
   416c4:	ldr	r1, [r4, #20]
   416c8:	add	r0, r0, r0, lsl #1
   416cc:	str	r2, [r1, r0, lsl #2]!
   416d0:	str	r2, [r1, #4]
   416d4:	str	r2, [r1, #8]
   416d8:	ldr	r0, [r4, #8]
   416dc:	ldr	r1, [r4, #24]
   416e0:	add	r0, r0, r0, lsl #1
   416e4:	str	r2, [r1, r0, lsl #2]!
   416e8:	str	r2, [r1, #4]
   416ec:	str	r2, [r1, #8]
   416f0:	ldr	r6, [r4, #8]
   416f4:	add	r0, r6, #1
   416f8:	str	r0, [r4, #8]
   416fc:	mov	r0, r6
   41700:	sub	sp, fp, #28
   41704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41708:	movw	r0, #21845	; 0x5555
   4170c:	lsl	r1, r7, #1
   41710:	mvn	r6, #0
   41714:	movt	r0, #5461	; 0x1555
   41718:	cmp	r1, r0
   4171c:	bhi	416fc <__assert_fail@plt+0x2ec4c>
   41720:	ldr	r0, [r4]
   41724:	str	r1, [sp, #8]
   41728:	lsl	r1, r7, #4
   4172c:	bl	36110 <__assert_fail@plt+0x23660>
   41730:	cmp	r0, #0
   41734:	beq	416fc <__assert_fail@plt+0x2ec4c>
   41738:	str	r0, [r4]
   4173c:	lsl	r8, r7, #3
   41740:	ldr	r0, [r4, #12]
   41744:	mov	r1, r8
   41748:	bl	36110 <__assert_fail@plt+0x23660>
   4174c:	str	r0, [sp, #4]
   41750:	ldr	r0, [r4, #16]
   41754:	mov	r1, r8
   41758:	bl	36110 <__assert_fail@plt+0x23660>
   4175c:	mov	r2, r0
   41760:	add	r1, r7, r7, lsl #1
   41764:	ldr	r0, [r4, #20]
   41768:	mov	r7, r2
   4176c:	lsl	r8, r1, #3
   41770:	mov	r1, r8
   41774:	bl	36110 <__assert_fail@plt+0x23660>
   41778:	mov	sl, r0
   4177c:	ldr	r0, [r4, #24]
   41780:	mov	r1, r8
   41784:	bl	36110 <__assert_fail@plt+0x23660>
   41788:	mov	r8, r0
   4178c:	ldr	r0, [sp, #4]
   41790:	cmp	r0, #0
   41794:	beq	417a4 <__assert_fail@plt+0x2ecf4>
   41798:	cmp	r7, #0
   4179c:	cmpne	sl, #0
   417a0:	bne	417cc <__assert_fail@plt+0x2ed1c>
   417a4:	bl	32910 <__assert_fail@plt+0x1fe60>
   417a8:	mov	r0, r7
   417ac:	bl	32910 <__assert_fail@plt+0x1fe60>
   417b0:	mov	r0, sl
   417b4:	bl	32910 <__assert_fail@plt+0x1fe60>
   417b8:	mov	r0, r8
   417bc:	bl	32910 <__assert_fail@plt+0x1fe60>
   417c0:	mov	r0, r6
   417c4:	sub	sp, fp, #28
   417c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   417cc:	cmp	r8, #0
   417d0:	beq	417a4 <__assert_fail@plt+0x2ecf4>
   417d4:	add	r1, r4, #12
   417d8:	stm	r1, {r0, r7, sl}
   417dc:	str	r8, [r4, #24]
   417e0:	ldr	r0, [sp, #8]
   417e4:	str	r0, [r4, #4]
   417e8:	ldr	r0, [r4, #8]
   417ec:	b	41640 <__assert_fail@plt+0x2eb90>
   417f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   417f4:	add	fp, sp, #28
   417f8:	sub	sp, sp, #44	; 0x2c
   417fc:	mov	r8, r0
   41800:	ldr	r0, [r1, #20]
   41804:	add	r4, r2, r2, lsl #1
   41808:	mov	r5, r1
   4180c:	mov	r1, #0
   41810:	mov	r9, r3
   41814:	mov	r6, r2
   41818:	add	r0, r0, r4, lsl #2
   4181c:	ldr	r0, [r0, #4]
   41820:	str	r1, [sp, #36]	; 0x24
   41824:	add	r0, r0, #1
   41828:	str	r0, [sp, #32]
   4182c:	lsl	r0, r0, #2
   41830:	bl	35350 <__assert_fail@plt+0x228a0>
   41834:	cmp	r0, #0
   41838:	str	r0, [sp, #40]	; 0x28
   4183c:	beq	41a0c <__assert_fail@plt+0x2ef5c>
   41840:	mov	r1, #1
   41844:	str	r6, [r0]
   41848:	str	r1, [sp, #36]	; 0x24
   4184c:	mvn	r1, #0
   41850:	ldr	r0, [r5, #24]
   41854:	add	r0, r0, r4, lsl #2
   41858:	str	r1, [r0, #4]
   4185c:	ldr	r2, [r5]
   41860:	add	r0, r2, r6, lsl #3
   41864:	ldr	r0, [r0, #4]
   41868:	ubfx	r1, r0, #8, #10
   4186c:	cmp	r1, #0
   41870:	beq	418cc <__assert_fail@plt+0x2ee1c>
   41874:	ldr	r3, [r5, #20]
   41878:	add	r3, r3, r4, lsl #2
   4187c:	ldr	r7, [r3, #4]
   41880:	cmp	r7, #0
   41884:	beq	418cc <__assert_fail@plt+0x2ee1c>
   41888:	ldr	r3, [r3, #8]
   4188c:	ldr	r3, [r3]
   41890:	add	r2, r2, r3, lsl #3
   41894:	ldrb	r2, [r2, #6]
   41898:	tst	r2, #4
   4189c:	bne	418cc <__assert_fail@plt+0x2ee1c>
   418a0:	str	r1, [sp]
   418a4:	mov	r0, r5
   418a8:	mov	r1, r6
   418ac:	mov	r2, r6
   418b0:	mov	r3, r6
   418b4:	bl	41a18 <__assert_fail@plt+0x2ef68>
   418b8:	cmp	r0, #0
   418bc:	bne	41a04 <__assert_fail@plt+0x2ef54>
   418c0:	ldr	r0, [r5]
   418c4:	add	r0, r0, r6, lsl #3
   418c8:	ldr	r0, [r0, #4]
   418cc:	tst	r0, #8
   418d0:	beq	419d8 <__assert_fail@plt+0x2ef28>
   418d4:	ldr	r0, [r5, #20]
   418d8:	add	r1, r0, r4, lsl #2
   418dc:	ldr	r1, [r1, #4]
   418e0:	cmp	r1, #1
   418e4:	blt	419d8 <__assert_fail@plt+0x2ef28>
   418e8:	str	r8, [sp, #12]
   418ec:	mov	r8, #0
   418f0:	add	r7, sp, #16
   418f4:	add	sl, sp, #32
   418f8:	mov	r6, #0
   418fc:	str	r9, [sp, #8]
   41900:	b	41920 <__assert_fail@plt+0x2ee70>
   41904:	mov	r8, #1
   41908:	ldr	r0, [r5, #20]
   4190c:	add	r6, r6, #1
   41910:	add	r1, r0, r4, lsl #2
   41914:	ldr	r1, [r1, #4]
   41918:	cmp	r6, r1
   4191c:	bge	419ac <__assert_fail@plt+0x2eefc>
   41920:	add	r0, r0, r4, lsl #2
   41924:	ldr	r0, [r0, #8]
   41928:	ldr	r2, [r0, r6, lsl #2]
   4192c:	ldr	r0, [r5, #24]
   41930:	add	r9, r2, r2, lsl #1
   41934:	add	r0, r0, r9, lsl #2
   41938:	ldr	r1, [r0, #4]
   4193c:	cmn	r1, #1
   41940:	beq	41904 <__assert_fail@plt+0x2ee54>
   41944:	cmp	r1, #0
   41948:	bne	41968 <__assert_fail@plt+0x2eeb8>
   4194c:	mov	r0, r7
   41950:	mov	r1, r5
   41954:	mov	r3, #0
   41958:	bl	417f0 <__assert_fail@plt+0x2ed40>
   4195c:	cmp	r0, #0
   41960:	beq	41978 <__assert_fail@plt+0x2eec8>
   41964:	b	41a04 <__assert_fail@plt+0x2ef54>
   41968:	vldr	d16, [r0]
   4196c:	ldr	r0, [r0, #8]
   41970:	str	r0, [sp, #24]
   41974:	vstr	d16, [sp, #16]
   41978:	mov	r0, sl
   4197c:	mov	r1, r7
   41980:	bl	41ea8 <__assert_fail@plt+0x2f3f8>
   41984:	cmp	r0, #0
   41988:	bne	41a04 <__assert_fail@plt+0x2ef54>
   4198c:	ldr	r0, [r5, #24]
   41990:	add	r0, r0, r9, lsl #2
   41994:	ldr	r0, [r0, #4]
   41998:	cmp	r0, #0
   4199c:	bne	41908 <__assert_fail@plt+0x2ee58>
   419a0:	ldr	r0, [sp, #24]
   419a4:	bl	32910 <__assert_fail@plt+0x1fe60>
   419a8:	b	41904 <__assert_fail@plt+0x2ee54>
   419ac:	tst	r8, #1
   419b0:	ldr	r8, [sp, #12]
   419b4:	ldr	r0, [sp, #8]
   419b8:	beq	419d8 <__assert_fail@plt+0x2ef28>
   419bc:	cmp	r0, #0
   419c0:	bne	419d8 <__assert_fail@plt+0x2ef28>
   419c4:	ldr	r0, [r5, #24]
   419c8:	mov	r1, #0
   419cc:	add	r0, r0, r4, lsl #2
   419d0:	str	r1, [r0, #4]
   419d4:	b	419f0 <__assert_fail@plt+0x2ef40>
   419d8:	ldr	r0, [r5, #24]
   419dc:	vldr	d16, [sp, #32]
   419e0:	ldr	r1, [sp, #40]	; 0x28
   419e4:	add	r0, r0, r4, lsl #2
   419e8:	str	r1, [r0, #8]
   419ec:	vstr	d16, [r0]
   419f0:	ldr	r0, [sp, #40]	; 0x28
   419f4:	vldr	d16, [sp, #32]
   419f8:	str	r0, [r8, #8]
   419fc:	mov	r0, #0
   41a00:	vstr	d16, [r8]
   41a04:	sub	sp, fp, #28
   41a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41a0c:	mov	r0, #12
   41a10:	sub	sp, fp, #28
   41a14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41a18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41a1c:	add	fp, sp, #28
   41a20:	sub	sp, sp, #20
   41a24:	mov	r9, r0
   41a28:	ldr	r0, [fp, #8]
   41a2c:	mov	r8, r2
   41a30:	mov	r5, r1
   41a34:	str	r3, [sp, #8]
   41a38:	str	r0, [sp, #12]
   41a3c:	ldr	r1, [sp, #12]
   41a40:	movw	r0, #65280	; 0xff00
   41a44:	movt	r0, #3
   41a48:	and	r0, r0, r1, lsl #8
   41a4c:	str	r0, [sp, #16]
   41a50:	ldr	r2, [r9]
   41a54:	add	r3, r2, r5, lsl #3
   41a58:	ldrb	r0, [r3, #4]!
   41a5c:	cmp	r0, #4
   41a60:	bne	41b38 <__assert_fail@plt+0x2f088>
   41a64:	ldr	r0, [r9, #12]
   41a68:	ldr	r1, [r9, #20]
   41a6c:	add	r7, r8, r8, lsl #1
   41a70:	ldr	r6, [r0, r5, lsl #2]
   41a74:	add	r0, r1, r7, lsl #2
   41a78:	mov	r1, #0
   41a7c:	str	r1, [r0, #4]
   41a80:	mov	r0, r9
   41a84:	ldr	r1, [r2, r6, lsl #3]!
   41a88:	ldr	r2, [r2, #4]
   41a8c:	bl	41618 <__assert_fail@plt+0x2eb68>
   41a90:	cmn	r0, #1
   41a94:	beq	41e98 <__assert_fail@plt+0x2f3e8>
   41a98:	mov	r4, r0
   41a9c:	ldr	r0, [r9]
   41aa0:	movw	r2, #255	; 0xff
   41aa4:	movt	r2, #65532	; 0xfffc
   41aa8:	add	r0, r0, r4, lsl #3
   41aac:	ldr	r1, [r0, #4]
   41ab0:	and	r1, r1, r2
   41ab4:	ldr	r2, [sp, #16]
   41ab8:	orr	r1, r1, r2
   41abc:	movw	r2, #65280	; 0xff00
   41ac0:	str	r1, [r0, #4]
   41ac4:	movt	r2, #3
   41ac8:	ldr	r0, [r9]
   41acc:	add	r1, r0, r6, lsl #3
   41ad0:	add	r0, r0, r4, lsl #3
   41ad4:	ldr	r1, [r1, #4]
   41ad8:	and	r1, r1, r2
   41adc:	ldr	r2, [r0, #4]
   41ae0:	orr	r1, r1, r2
   41ae4:	str	r1, [r0, #4]
   41ae8:	ldr	r0, [r9]
   41aec:	add	r0, r0, r4, lsl #3
   41af0:	ldr	r1, [r0, #4]
   41af4:	orr	r1, r1, #262144	; 0x40000
   41af8:	str	r1, [r0, #4]
   41afc:	ldr	r0, [r9, #16]
   41b00:	str	r6, [r0, r4, lsl #2]
   41b04:	ldr	r0, [r9, #12]
   41b08:	ldr	r1, [r0, r5, lsl #2]
   41b0c:	str	r1, [r0, r8, lsl #2]
   41b10:	mov	r1, r4
   41b14:	ldr	r0, [r9, #20]
   41b18:	add	r0, r0, r7, lsl #2
   41b1c:	bl	42048 <__assert_fail@plt+0x2f598>
   41b20:	cmp	r0, #0
   41b24:	mov	r5, r6
   41b28:	mov	r8, r4
   41b2c:	mov	r7, #12
   41b30:	bne	41a50 <__assert_fail@plt+0x2efa0>
   41b34:	b	41e68 <__assert_fail@plt+0x2f3b8>
   41b38:	ldr	r0, [r9, #20]
   41b3c:	add	ip, r5, r5, lsl #1
   41b40:	add	r7, r0, ip, lsl #2
   41b44:	ldr	r1, [r7, #4]
   41b48:	cmp	r1, #0
   41b4c:	beq	41e4c <__assert_fail@plt+0x2f39c>
   41b50:	ldr	r7, [r7, #8]
   41b54:	add	r4, r8, r8, lsl #1
   41b58:	cmp	r1, #1
   41b5c:	add	r0, r0, r4, lsl #2
   41b60:	ldr	sl, [r7]
   41b64:	mov	r7, #0
   41b68:	str	r7, [r0, #4]
   41b6c:	beq	41d74 <__assert_fail@plt+0x2f2c4>
   41b70:	ldr	r1, [r9, #8]
   41b74:	mov	r8, r4
   41b78:	ldr	r4, [sp, #12]
   41b7c:	sub	r3, r1, #1
   41b80:	cmp	r3, #1
   41b84:	blt	41bd4 <__assert_fail@plt+0x2f124>
   41b88:	add	r3, r2, r3, lsl #3
   41b8c:	ldr	r7, [r3, #4]
   41b90:	ands	r3, r7, #262144	; 0x40000
   41b94:	beq	41bd4 <__assert_fail@plt+0x2f124>
   41b98:	ldr	r6, [r9, #16]
   41b9c:	sub	r3, r2, #12
   41ba0:	sub	r6, r6, #4
   41ba4:	ldr	r5, [r6, r1, lsl #2]
   41ba8:	cmp	r5, sl
   41bac:	ubfxeq	r7, r7, #8, #10
   41bb0:	cmpeq	r7, r4
   41bb4:	beq	41d58 <__assert_fail@plt+0x2f2a8>
   41bb8:	sub	r7, r1, #2
   41bbc:	cmp	r7, #1
   41bc0:	blt	41bd4 <__assert_fail@plt+0x2f124>
   41bc4:	ldr	r7, [r3, r1, lsl #3]
   41bc8:	sub	r1, r1, #1
   41bcc:	ands	r5, r7, #262144	; 0x40000
   41bd0:	bne	41ba4 <__assert_fail@plt+0x2f0f4>
   41bd4:	ldr	r1, [r2, sl, lsl #3]!
   41bd8:	mov	r0, r9
   41bdc:	mov	r5, ip
   41be0:	ldr	r2, [r2, #4]
   41be4:	bl	41618 <__assert_fail@plt+0x2eb68>
   41be8:	mov	r7, #12
   41bec:	cmn	r0, #1
   41bf0:	beq	41e68 <__assert_fail@plt+0x2f3b8>
   41bf4:	mov	r6, r0
   41bf8:	ldr	r0, [r9]
   41bfc:	movw	r2, #255	; 0xff
   41c00:	mov	r4, r8
   41c04:	movt	r2, #65532	; 0xfffc
   41c08:	add	r0, r0, r6, lsl #3
   41c0c:	ldr	r1, [r0, #4]
   41c10:	and	r1, r1, r2
   41c14:	ldr	r2, [sp, #16]
   41c18:	orr	r1, r1, r2
   41c1c:	movw	r2, #65280	; 0xff00
   41c20:	str	r1, [r0, #4]
   41c24:	movt	r2, #3
   41c28:	ldr	r0, [r9]
   41c2c:	add	r1, r0, sl, lsl #3
   41c30:	add	r0, r0, r6, lsl #3
   41c34:	ldr	r1, [r1, #4]
   41c38:	and	r1, r1, r2
   41c3c:	ldr	r2, [r0, #4]
   41c40:	orr	r1, r1, r2
   41c44:	str	r1, [r0, #4]
   41c48:	ldr	r0, [r9]
   41c4c:	add	r0, r0, r6, lsl #3
   41c50:	ldr	r1, [r0, #4]
   41c54:	orr	r1, r1, #262144	; 0x40000
   41c58:	str	r1, [r0, #4]
   41c5c:	mov	r1, r6
   41c60:	ldr	r0, [r9, #16]
   41c64:	str	sl, [r0, r6, lsl #2]
   41c68:	ldr	r0, [r9, #20]
   41c6c:	add	r0, r0, r8, lsl #2
   41c70:	bl	42048 <__assert_fail@plt+0x2f598>
   41c74:	cmp	r0, #0
   41c78:	beq	41e68 <__assert_fail@plt+0x2f3b8>
   41c7c:	ldr	r0, [sp, #12]
   41c80:	ldr	r3, [sp, #8]
   41c84:	mov	r1, sl
   41c88:	mov	r2, r6
   41c8c:	str	r0, [sp]
   41c90:	mov	r0, r9
   41c94:	bl	41a18 <__assert_fail@plt+0x2ef68>
   41c98:	cmp	r0, #0
   41c9c:	bne	41e64 <__assert_fail@plt+0x2f3b4>
   41ca0:	ldr	r1, [r9, #20]
   41ca4:	ldr	r0, [r9]
   41ca8:	add	r1, r1, r5, lsl #2
   41cac:	ldr	r1, [r1, #8]
   41cb0:	ldr	r5, [r1, #4]
   41cb4:	ldr	r1, [r0, r5, lsl #3]!
   41cb8:	ldr	r2, [r0, #4]
   41cbc:	mov	r0, r9
   41cc0:	bl	41618 <__assert_fail@plt+0x2eb68>
   41cc4:	mov	r7, #12
   41cc8:	cmn	r0, #1
   41ccc:	beq	41e68 <__assert_fail@plt+0x2f3b8>
   41cd0:	mov	r8, r0
   41cd4:	ldr	r0, [r9]
   41cd8:	movw	r2, #255	; 0xff
   41cdc:	movt	r2, #65532	; 0xfffc
   41ce0:	add	r0, r0, r8, lsl #3
   41ce4:	ldr	r1, [r0, #4]
   41ce8:	and	r1, r1, r2
   41cec:	ldr	r2, [sp, #16]
   41cf0:	orr	r1, r1, r2
   41cf4:	movw	r2, #65280	; 0xff00
   41cf8:	str	r1, [r0, #4]
   41cfc:	movt	r2, #3
   41d00:	ldr	r0, [r9]
   41d04:	add	r1, r0, r5, lsl #3
   41d08:	add	r0, r0, r8, lsl #3
   41d0c:	ldr	r1, [r1, #4]
   41d10:	and	r1, r1, r2
   41d14:	ldr	r2, [r0, #4]
   41d18:	orr	r1, r1, r2
   41d1c:	str	r1, [r0, #4]
   41d20:	ldr	r0, [r9]
   41d24:	add	r0, r0, r8, lsl #3
   41d28:	ldr	r1, [r0, #4]
   41d2c:	orr	r1, r1, #262144	; 0x40000
   41d30:	str	r1, [r0, #4]
   41d34:	mov	r1, r8
   41d38:	ldr	r0, [r9, #16]
   41d3c:	str	r5, [r0, r8, lsl #2]
   41d40:	ldr	r0, [r9, #20]
   41d44:	add	r0, r0, r4, lsl #2
   41d48:	bl	42048 <__assert_fail@plt+0x2f598>
   41d4c:	cmp	r0, #0
   41d50:	bne	41a50 <__assert_fail@plt+0x2efa0>
   41d54:	b	41e68 <__assert_fail@plt+0x2f3b8>
   41d58:	sub	r1, r1, #1
   41d5c:	mov	r5, ip
   41d60:	bl	42048 <__assert_fail@plt+0x2f598>
   41d64:	cmp	r0, #0
   41d68:	mov	r4, r8
   41d6c:	bne	41ca0 <__assert_fail@plt+0x2f1f0>
   41d70:	b	41e98 <__assert_fail@plt+0x2f3e8>
   41d74:	ldr	r1, [sp, #8]
   41d78:	cmp	r5, r1
   41d7c:	bne	41d88 <__assert_fail@plt+0x2f2d8>
   41d80:	cmp	r8, r5
   41d84:	bne	41e74 <__assert_fail@plt+0x2f3c4>
   41d88:	ldr	r1, [r2, sl, lsl #3]!
   41d8c:	ldr	r6, [r3]
   41d90:	mov	r0, r9
   41d94:	ldr	r2, [r2, #4]
   41d98:	bl	41618 <__assert_fail@plt+0x2eb68>
   41d9c:	mov	r8, r0
   41da0:	ubfx	r0, r6, #8, #10
   41da4:	mov	r7, #12
   41da8:	cmn	r8, #1
   41dac:	beq	41e68 <__assert_fail@plt+0x2f3b8>
   41db0:	ldr	r1, [sp, #12]
   41db4:	movw	r7, #255	; 0xff
   41db8:	movt	r7, #65532	; 0xfffc
   41dbc:	orr	r1, r0, r1
   41dc0:	movw	r0, #65280	; 0xff00
   41dc4:	movt	r0, #3
   41dc8:	str	r1, [sp, #12]
   41dcc:	mov	r3, r0
   41dd0:	and	r0, r0, r1, lsl #8
   41dd4:	ldr	r1, [r9]
   41dd8:	add	r1, r1, r8, lsl #3
   41ddc:	ldr	r2, [r1, #4]
   41de0:	and	r2, r2, r7
   41de4:	mov	r7, #12
   41de8:	orr	r0, r2, r0
   41dec:	str	r0, [r1, #4]
   41df0:	ldr	r0, [r9]
   41df4:	add	r1, r0, sl, lsl #3
   41df8:	add	r0, r0, r8, lsl #3
   41dfc:	ldr	r1, [r1, #4]
   41e00:	ldr	r2, [r0, #4]
   41e04:	and	r1, r1, r3
   41e08:	orr	r1, r1, r2
   41e0c:	str	r1, [r0, #4]
   41e10:	ldr	r0, [r9]
   41e14:	add	r0, r0, r8, lsl #3
   41e18:	ldr	r1, [r0, #4]
   41e1c:	orr	r1, r1, #262144	; 0x40000
   41e20:	str	r1, [r0, #4]
   41e24:	mov	r1, r8
   41e28:	ldr	r0, [r9, #16]
   41e2c:	str	sl, [r0, r8, lsl #2]
   41e30:	ldr	r0, [r9, #20]
   41e34:	add	r0, r0, r4, lsl #2
   41e38:	bl	42048 <__assert_fail@plt+0x2f598>
   41e3c:	cmp	r0, #0
   41e40:	mov	r5, sl
   41e44:	bne	41a3c <__assert_fail@plt+0x2ef8c>
   41e48:	b	41e68 <__assert_fail@plt+0x2f3b8>
   41e4c:	ldr	r0, [r9, #12]
   41e50:	ldr	r1, [r0, r5, lsl #2]
   41e54:	str	r1, [r0, r8, lsl #2]
   41e58:	mov	r0, #0
   41e5c:	sub	sp, fp, #28
   41e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41e64:	mov	r7, r0
   41e68:	mov	r0, r7
   41e6c:	sub	sp, fp, #28
   41e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41e74:	mov	r1, sl
   41e78:	bl	42048 <__assert_fail@plt+0x2f598>
   41e7c:	mov	r1, r0
   41e80:	mov	r7, #12
   41e84:	mov	r0, #0
   41e88:	cmp	r1, #0
   41e8c:	moveq	r0, r7
   41e90:	sub	sp, fp, #28
   41e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41e98:	mov	r7, #12
   41e9c:	mov	r0, r7
   41ea0:	sub	sp, fp, #28
   41ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41ea8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   41eac:	add	fp, sp, #24
   41eb0:	mov	r8, #0
   41eb4:	cmp	r1, #0
   41eb8:	beq	4201c <__assert_fail@plt+0x2f56c>
   41ebc:	mov	r6, r1
   41ec0:	ldr	r1, [r1, #4]
   41ec4:	cmp	r1, #0
   41ec8:	beq	4201c <__assert_fail@plt+0x2f56c>
   41ecc:	mov	r9, r0
   41ed0:	ldr	r2, [r0]
   41ed4:	ldr	r0, [r0, #4]
   41ed8:	add	r3, r0, r1, lsl #1
   41edc:	cmp	r2, r3
   41ee0:	bge	41f0c <__assert_fail@plt+0x2f45c>
   41ee4:	ldr	r0, [r9, #8]
   41ee8:	add	r7, r2, r1
   41eec:	lsl	r1, r7, #3
   41ef0:	bl	36110 <__assert_fail@plt+0x23660>
   41ef4:	cmp	r0, #0
   41ef8:	beq	4203c <__assert_fail@plt+0x2f58c>
   41efc:	str	r0, [r9, #8]
   41f00:	lsl	r0, r7, #1
   41f04:	str	r0, [r9]
   41f08:	ldr	r0, [r9, #4]
   41f0c:	cmp	r0, #0
   41f10:	beq	42024 <__assert_fail@plt+0x2f574>
   41f14:	ldr	r2, [r6, #4]
   41f18:	sub	r1, r0, #1
   41f1c:	add	r7, r0, r2, lsl #1
   41f20:	sub	r0, r2, #1
   41f24:	orrs	r2, r0, r1
   41f28:	bmi	41f84 <__assert_fail@plt+0x2f4d4>
   41f2c:	ldr	r2, [r6, #8]
   41f30:	ldr	r3, [r9, #8]
   41f34:	ldr	r4, [r2, r0, lsl #2]
   41f38:	ldr	r5, [r3, r1, lsl #2]
   41f3c:	cmp	r5, r4
   41f40:	beq	41f70 <__assert_fail@plt+0x2f4c0>
   41f44:	sublt	r7, r7, #1
   41f48:	subge	r1, r1, #1
   41f4c:	sublt	r0, r0, #1
   41f50:	strlt	r4, [r3, r7, lsl #2]
   41f54:	orr	r5, r0, r1
   41f58:	cmn	r5, #1
   41f5c:	ble	41f84 <__assert_fail@plt+0x2f4d4>
   41f60:	ldr	r4, [r2, r0, lsl #2]
   41f64:	ldr	r5, [r3, r1, lsl #2]
   41f68:	cmp	r5, r4
   41f6c:	bne	41f44 <__assert_fail@plt+0x2f494>
   41f70:	sub	r1, r1, #1
   41f74:	sub	r0, r0, #1
   41f78:	orr	r5, r0, r1
   41f7c:	cmn	r5, #1
   41f80:	bgt	41f60 <__assert_fail@plt+0x2f4b0>
   41f84:	cmp	r0, #0
   41f88:	bmi	41fa8 <__assert_fail@plt+0x2f4f8>
   41f8c:	add	r2, r0, #1
   41f90:	ldr	r0, [r9, #8]
   41f94:	ldr	r1, [r6, #8]
   41f98:	sub	r7, r7, r2
   41f9c:	lsl	r2, r2, #2
   41fa0:	add	r0, r0, r7, lsl #2
   41fa4:	bl	124e0 <memcpy@plt>
   41fa8:	ldr	r0, [r9, #4]
   41fac:	ldr	r2, [r6, #4]
   41fb0:	sub	r1, r0, #1
   41fb4:	add	r3, r1, r2, lsl #1
   41fb8:	sub	r2, r3, r7
   41fbc:	adds	r2, r2, #1
   41fc0:	bcs	4201c <__assert_fail@plt+0x2f56c>
   41fc4:	add	r0, r2, r0
   41fc8:	str	r0, [r9, #4]
   41fcc:	ldr	r0, [r9, #8]
   41fd0:	ldr	r6, [r0, r1, lsl #2]
   41fd4:	ldr	r5, [r0, r3, lsl #2]
   41fd8:	cmp	r5, r6
   41fdc:	ble	41ff8 <__assert_fail@plt+0x2f548>
   41fe0:	add	r6, r2, r1
   41fe4:	subs	r2, r2, #1
   41fe8:	sub	r3, r3, #1
   41fec:	str	r5, [r0, r6, lsl #2]
   41ff0:	bne	41fd0 <__assert_fail@plt+0x2f520>
   41ff4:	b	4201c <__assert_fail@plt+0x2f56c>
   41ff8:	add	r5, r2, r1
   41ffc:	cmp	r1, #0
   42000:	str	r6, [r0, r5, lsl #2]
   42004:	sub	r6, r1, #1
   42008:	mov	r1, r6
   4200c:	bgt	41fd0 <__assert_fail@plt+0x2f520>
   42010:	add	r1, r0, r7, lsl #2
   42014:	lsl	r2, r2, #2
   42018:	bl	124e0 <memcpy@plt>
   4201c:	mov	r0, r8
   42020:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   42024:	ldr	r0, [r6, #4]
   42028:	str	r0, [r9, #4]
   4202c:	ldr	r0, [r9, #8]
   42030:	ldr	r2, [r6, #4]
   42034:	ldr	r1, [r6, #8]
   42038:	b	42014 <__assert_fail@plt+0x2f564>
   4203c:	mov	r8, #12
   42040:	mov	r0, r8
   42044:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   42048:	push	{r4, r5, r6, sl, fp, lr}
   4204c:	add	fp, sp, #16
   42050:	ldr	r2, [r0]
   42054:	mov	r5, r1
   42058:	mov	r4, r0
   4205c:	cmp	r2, #0
   42060:	beq	42090 <__assert_fail@plt+0x2f5e0>
   42064:	ldr	r1, [r4, #4]
   42068:	cmp	r1, #0
   4206c:	bne	420cc <__assert_fail@plt+0x2f61c>
   42070:	ldr	r0, [r4, #8]
   42074:	str	r5, [r0]
   42078:	ldr	r0, [r4, #4]
   4207c:	mov	r6, #1
   42080:	add	r0, r0, #1
   42084:	str	r0, [r4, #4]
   42088:	mov	r0, r6
   4208c:	pop	{r4, r5, r6, sl, fp, pc}
   42090:	mov	r6, #1
   42094:	mov	r0, #4
   42098:	str	r6, [r4]
   4209c:	str	r6, [r4, #4]
   420a0:	bl	35350 <__assert_fail@plt+0x228a0>
   420a4:	cmp	r0, #0
   420a8:	str	r0, [r4, #8]
   420ac:	strne	r5, [r0]
   420b0:	movne	r0, r6
   420b4:	popne	{r4, r5, r6, sl, fp, pc}
   420b8:	mov	r6, #0
   420bc:	mov	r0, r6
   420c0:	str	r6, [r4]
   420c4:	str	r6, [r4, #4]
   420c8:	pop	{r4, r5, r6, sl, fp, pc}
   420cc:	cmp	r2, r1
   420d0:	bne	42108 <__assert_fail@plt+0x2f658>
   420d4:	lsl	r0, r2, #1
   420d8:	lsl	r1, r2, #3
   420dc:	str	r0, [r4]
   420e0:	ldr	r0, [r4, #8]
   420e4:	bl	36110 <__assert_fail@plt+0x23660>
   420e8:	cmp	r0, #0
   420ec:	beq	421bc <__assert_fail@plt+0x2f70c>
   420f0:	str	r0, [r4, #8]
   420f4:	ldr	r1, [r4, #4]
   420f8:	ldr	r2, [r0]
   420fc:	cmp	r2, r5
   42100:	bgt	42118 <__assert_fail@plt+0x2f668>
   42104:	b	42184 <__assert_fail@plt+0x2f6d4>
   42108:	ldr	r0, [r4, #8]
   4210c:	ldr	r2, [r0]
   42110:	cmp	r2, r5
   42114:	ble	42184 <__assert_fail@plt+0x2f6d4>
   42118:	cmp	r1, #1
   4211c:	blt	421b4 <__assert_fail@plt+0x2f704>
   42120:	ands	r3, r1, #3
   42124:	sub	ip, r1, #1
   42128:	beq	4214c <__assert_fail@plt+0x2f69c>
   4212c:	add	lr, r0, r1, lsl #2
   42130:	mov	r6, lr
   42134:	ldr	r2, [r6, #-4]!
   42138:	subs	r3, r3, #1
   4213c:	sub	r1, r1, #1
   42140:	str	r2, [lr]
   42144:	mov	lr, r6
   42148:	bne	42134 <__assert_fail@plt+0x2f684>
   4214c:	cmp	ip, #3
   42150:	bcc	4217c <__assert_fail@plt+0x2f6cc>
   42154:	add	r2, r0, r1, lsl #2
   42158:	sub	r2, r2, #8
   4215c:	sub	lr, r2, #8
   42160:	sub	r1, r1, #4
   42164:	sub	sl, r2, #4
   42168:	sub	r2, r2, #16
   4216c:	ldm	lr, {r3, r6, ip, lr}
   42170:	cmp	r1, #0
   42174:	stm	sl, {r3, r6, ip, lr}
   42178:	bgt	4215c <__assert_fail@plt+0x2f6ac>
   4217c:	mov	r1, #0
   42180:	b	421b4 <__assert_fail@plt+0x2f704>
   42184:	add	r2, r0, r1, lsl #2
   42188:	ldr	r3, [r2, #-4]
   4218c:	cmp	r3, r5
   42190:	ble	421b4 <__assert_fail@plt+0x2f704>
   42194:	sub	r1, r1, #2
   42198:	str	r3, [r2]
   4219c:	sub	r1, r1, #1
   421a0:	ldr	r3, [r2, #-8]
   421a4:	sub	r2, r2, #4
   421a8:	cmp	r3, r5
   421ac:	bgt	42198 <__assert_fail@plt+0x2f6e8>
   421b0:	add	r1, r1, #2
   421b4:	str	r5, [r0, r1, lsl #2]
   421b8:	b	42078 <__assert_fail@plt+0x2f5c8>
   421bc:	mov	r6, #0
   421c0:	mov	r0, r6
   421c4:	pop	{r4, r5, r6, sl, fp, pc}
   421c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   421cc:	add	fp, sp, #28
   421d0:	sub	sp, sp, #28
   421d4:	ldr	sl, [r2, #4]
   421d8:	cmp	sl, #0
   421dc:	beq	42400 <__assert_fail@plt+0x2f950>
   421e0:	mov	r9, r3
   421e4:	add	r7, sl, r3
   421e8:	cmp	sl, #1
   421ec:	str	r1, [sp, #16]
   421f0:	str	r2, [sp, #20]
   421f4:	str	r0, [sp]
   421f8:	blt	422e0 <__assert_fail@plt+0x2f830>
   421fc:	ldr	ip, [r2, #8]
   42200:	mov	r8, #0
   42204:	cmp	sl, #4
   42208:	bcc	422c8 <__assert_fail@plt+0x2f818>
   4220c:	mov	r3, #0
   42210:	bic	r8, sl, #3
   42214:	mov	r1, #1
   42218:	vdup.32	q8, r3
   4221c:	sub	r4, r8, #4
   42220:	add	r1, r1, r4, lsr #2
   42224:	cmp	r4, #12
   42228:	and	lr, r1, #3
   4222c:	vmov.32	d16[0], r7
   42230:	bcc	42284 <__assert_fail@plt+0x2f7d4>
   42234:	sub	r6, r1, lr
   42238:	mov	r3, #0
   4223c:	mov	r4, #64	; 0x40
   42240:	mov	r7, ip
   42244:	mov	r1, ip
   42248:	vld1.32	{d18-d19}, [r1], r4
   4224c:	add	r5, r7, #16
   42250:	add	r2, r7, #32
   42254:	subs	r6, r6, #4
   42258:	add	r3, r3, #16
   4225c:	vld1.32	{d20-d21}, [r5]
   42260:	vadd.i32	q8, q9, q8
   42264:	vld1.32	{d18-d19}, [r2]
   42268:	add	r2, r7, #48	; 0x30
   4226c:	mov	r7, r1
   42270:	vadd.i32	q8, q10, q8
   42274:	vld1.32	{d20-d21}, [r2]
   42278:	vadd.i32	q8, q9, q8
   4227c:	vadd.i32	q8, q10, q8
   42280:	bne	42248 <__assert_fail@plt+0x2f798>
   42284:	cmp	lr, #0
   42288:	beq	422a4 <__assert_fail@plt+0x2f7f4>
   4228c:	add	r1, ip, r3, lsl #2
   42290:	rsb	r3, lr, #0
   42294:	vld1.32	{d18-d19}, [r1]!
   42298:	adds	r3, r3, #1
   4229c:	vadd.i32	q8, q9, q8
   422a0:	bcc	42294 <__assert_fail@plt+0x2f7e4>
   422a4:	vext.8	q9, q8, q8, #8
   422a8:	ldr	r1, [sp, #16]
   422ac:	ldr	r2, [sp, #20]
   422b0:	cmp	sl, r8
   422b4:	vadd.i32	q8, q8, q9
   422b8:	vdup.32	q9, d16[1]
   422bc:	vadd.i32	q8, q8, q9
   422c0:	vmov.32	r7, d16[0]
   422c4:	beq	422e0 <__assert_fail@plt+0x2f830>
   422c8:	add	r0, ip, r8, lsl #2
   422cc:	sub	r6, sl, r8
   422d0:	ldr	r3, [r0], #4
   422d4:	subs	r6, r6, #1
   422d8:	add	r7, r3, r7
   422dc:	bne	422d0 <__assert_fail@plt+0x2f820>
   422e0:	ldr	r0, [r1, #32]
   422e4:	ldr	r1, [r1, #68]	; 0x44
   422e8:	and	r1, r1, r7
   422ec:	add	r3, r1, r1, lsl #1
   422f0:	ldr	r1, [r0, r3, lsl #2]
   422f4:	cmp	r1, #1
   422f8:	blt	42398 <__assert_fail@plt+0x2f8e8>
   422fc:	cmp	r2, #0
   42300:	beq	42398 <__assert_fail@plt+0x2f8e8>
   42304:	add	r0, r0, r3, lsl #2
   42308:	sub	ip, sl, #1
   4230c:	mov	r6, #0
   42310:	ldr	lr, [r0, #8]
   42314:	ldr	r8, [lr, r6, lsl #2]
   42318:	ldr	r3, [r8]
   4231c:	cmp	r3, r7
   42320:	beq	42340 <__assert_fail@plt+0x2f890>
   42324:	add	r6, r6, #1
   42328:	cmp	r6, r1
   4232c:	bge	42398 <__assert_fail@plt+0x2f8e8>
   42330:	ldr	r8, [lr, r6, lsl #2]
   42334:	ldr	r3, [r8]
   42338:	cmp	r3, r7
   4233c:	bne	42324 <__assert_fail@plt+0x2f874>
   42340:	ldrb	r3, [r8, #52]	; 0x34
   42344:	and	r3, r3, #15
   42348:	cmp	r3, r9
   4234c:	bne	42324 <__assert_fail@plt+0x2f874>
   42350:	ldr	r4, [r8, #40]	; 0x28
   42354:	cmp	r4, #0
   42358:	beq	42324 <__assert_fail@plt+0x2f874>
   4235c:	ldr	r3, [r4, #4]
   42360:	cmp	r3, sl
   42364:	bne	42324 <__assert_fail@plt+0x2f874>
   42368:	mov	r3, ip
   4236c:	add	r5, r3, #1
   42370:	cmp	r5, #1
   42374:	blt	42bd4 <__assert_fail@plt+0x30124>
   42378:	ldr	r5, [r2, #8]
   4237c:	ldr	r0, [r4, #8]
   42380:	ldr	r5, [r5, r3, lsl #2]
   42384:	ldr	r0, [r0, r3, lsl #2]
   42388:	sub	r3, r3, #1
   4238c:	cmp	r0, r5
   42390:	beq	4236c <__assert_fail@plt+0x2f8bc>
   42394:	b	42324 <__assert_fail@plt+0x2f874>
   42398:	mov	r0, #56	; 0x38
   4239c:	mov	r1, #1
   423a0:	bl	322c0 <__assert_fail@plt+0x1f810>
   423a4:	cmp	r0, #0
   423a8:	beq	42bf4 <__assert_fail@plt+0x30144>
   423ac:	ldr	ip, [sp, #20]
   423b0:	mov	r8, r0
   423b4:	add	r6, r0, #4
   423b8:	ldr	r3, [ip, #4]
   423bc:	cmp	r3, #1
   423c0:	str	r3, [r0, #8]
   423c4:	blt	42414 <__assert_fail@plt+0x2f964>
   423c8:	lsl	r0, r3, #2
   423cc:	str	r3, [r8, #4]
   423d0:	bl	35350 <__assert_fail@plt+0x228a0>
   423d4:	cmp	r0, #0
   423d8:	str	r0, [r8, #12]
   423dc:	beq	42c10 <__assert_fail@plt+0x30160>
   423e0:	ldr	r4, [sp, #20]
   423e4:	ldr	r5, [r4, #4]
   423e8:	ldr	r1, [r4, #8]
   423ec:	lsl	r2, r5, #2
   423f0:	bl	124e0 <memcpy@plt>
   423f4:	mov	r3, r5
   423f8:	mov	ip, r4
   423fc:	b	42424 <__assert_fail@plt+0x2f974>
   42400:	mov	r8, #0
   42404:	str	r8, [r0]
   42408:	mov	r0, r8
   4240c:	sub	sp, fp, #28
   42410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42414:	mov	r0, #0
   42418:	str	r0, [r6]
   4241c:	str	r0, [r6, #4]
   42420:	str	r0, [r6, #8]
   42424:	mov	sl, r8
   42428:	and	r1, r9, #15
   4242c:	cmp	r3, #1
   42430:	str	r6, [sp, #24]
   42434:	ldrb	r0, [sl, #52]!	; 0x34
   42438:	str	r6, [sl, #-12]
   4243c:	and	r0, r0, #240	; 0xf0
   42440:	orr	r0, r0, r1
   42444:	strb	r0, [sl]
   42448:	ldr	r0, [sp, #16]
   4244c:	blt	42bc0 <__assert_fail@plt+0x30110>
   42450:	and	r1, r9, #4
   42454:	tst	r9, #1
   42458:	str	sl, [sp, #8]
   4245c:	str	r1, [sp, #12]
   42460:	and	r1, r9, #2
   42464:	bne	42644 <__assert_fail@plt+0x2fb94>
   42468:	movw	r9, #65280	; 0xff00
   4246c:	mov	r6, #0
   42470:	mov	lr, #0
   42474:	cmp	r1, #0
   42478:	movt	r9, #3
   4247c:	add	r5, r9, #255	; 0xff
   42480:	bne	42820 <__assert_fail@plt+0x2fd70>
   42484:	str	r5, [sp, #4]
   42488:	b	424a0 <__assert_fail@plt+0x2f9f0>
   4248c:	mov	r3, r5
   42490:	ldr	r5, [sp, #4]
   42494:	add	r6, r6, #1
   42498:	cmp	r6, r3
   4249c:	bge	42bc0 <__assert_fail@plt+0x30110>
   424a0:	ldr	r1, [ip, #8]
   424a4:	ldr	r2, [r0]
   424a8:	ldr	r1, [r1, r6, lsl #2]
   424ac:	add	r1, r2, r1, lsl #3
   424b0:	ldr	r4, [r1, #4]
   424b4:	and	r1, r4, r5
   424b8:	cmp	r1, #1
   424bc:	beq	42494 <__assert_fail@plt+0x2f9e4>
   424c0:	mov	r5, r3
   424c4:	ldrb	r3, [sl]
   424c8:	mov	r2, #32
   424cc:	and	r1, r4, r9
   424d0:	and	r2, r2, r4, lsr #15
   424d4:	orr	r2, r3, r2
   424d8:	uxtb	r3, r4
   424dc:	strb	r2, [sl]
   424e0:	cmp	r3, #4
   424e4:	beq	424f8 <__assert_fail@plt+0x2fa48>
   424e8:	cmp	r3, #2
   424ec:	bne	42504 <__assert_fail@plt+0x2fa54>
   424f0:	mov	r3, #16
   424f4:	b	424fc <__assert_fail@plt+0x2fa4c>
   424f8:	mov	r3, #64	; 0x40
   424fc:	orr	r2, r2, r3
   42500:	strb	r2, [sl]
   42504:	cmp	r1, #0
   42508:	beq	4248c <__assert_fail@plt+0x2f9dc>
   4250c:	ldr	r1, [r8, #40]	; 0x28
   42510:	ldr	r2, [sp, #24]
   42514:	mov	r3, r5
   42518:	cmp	r1, r2
   4251c:	beq	42544 <__assert_fail@plt+0x2fa94>
   42520:	ldr	r5, [sp, #4]
   42524:	tst	r4, #4352	; 0x1100
   42528:	bne	425e8 <__assert_fail@plt+0x2fb38>
   4252c:	ldr	r1, [sp, #12]
   42530:	cmp	r1, #0
   42534:	bne	42494 <__assert_fail@plt+0x2f9e4>
   42538:	ands	r1, r4, #16384	; 0x4000
   4253c:	bne	425e8 <__assert_fail@plt+0x2fb38>
   42540:	b	42494 <__assert_fail@plt+0x2f9e4>
   42544:	mov	r0, #12
   42548:	bl	35350 <__assert_fail@plt+0x228a0>
   4254c:	cmp	r0, #0
   42550:	beq	42bec <__assert_fail@plt+0x3013c>
   42554:	ldr	ip, [sp, #20]
   42558:	str	r0, [r8, #40]	; 0x28
   4255c:	mov	sl, r0
   42560:	mov	r5, r0
   42564:	ldr	r3, [ip, #4]
   42568:	str	r3, [sl, #4]!
   4256c:	cmp	r3, #0
   42570:	ble	425b4 <__assert_fail@plt+0x2fb04>
   42574:	lsl	r0, r3, #2
   42578:	str	r3, [r5]
   4257c:	bl	35350 <__assert_fail@plt+0x228a0>
   42580:	cmp	r0, #0
   42584:	str	r0, [r5, #8]
   42588:	beq	42be0 <__assert_fail@plt+0x30130>
   4258c:	ldr	r5, [sp, #20]
   42590:	ldr	r9, [r5, #4]
   42594:	ldr	r1, [r5, #8]
   42598:	lsl	r2, r9, #2
   4259c:	bl	124e0 <memcpy@plt>
   425a0:	mov	r3, r9
   425a4:	movw	r9, #65280	; 0xff00
   425a8:	mov	ip, r5
   425ac:	movt	r9, #3
   425b0:	b	425c4 <__assert_fail@plt+0x2fb14>
   425b4:	mov	r0, #0
   425b8:	str	r0, [r5]
   425bc:	str	r0, [r5, #4]
   425c0:	str	r0, [r5, #8]
   425c4:	ldr	sl, [sp, #8]
   425c8:	mov	lr, #0
   425cc:	ldrb	r0, [sl]
   425d0:	orr	r0, r0, #128	; 0x80
   425d4:	strb	r0, [sl]
   425d8:	ldr	r0, [sp, #16]
   425dc:	ldr	r5, [sp, #4]
   425e0:	tst	r4, #4352	; 0x1100
   425e4:	beq	4252c <__assert_fail@plt+0x2fa7c>
   425e8:	subs	r1, r6, lr
   425ec:	bmi	42608 <__assert_fail@plt+0x2fb58>
   425f0:	ldr	r2, [r8, #8]
   425f4:	cmp	r2, r1
   425f8:	subgt	r2, r2, #1
   425fc:	strgt	r2, [r8, #8]
   42600:	cmpgt	r2, r1
   42604:	bgt	4261c <__assert_fail@plt+0x2fb6c>
   42608:	add	lr, lr, #1
   4260c:	add	r6, r6, #1
   42610:	cmp	r6, r3
   42614:	blt	424a0 <__assert_fail@plt+0x2f9f0>
   42618:	b	42bc0 <__assert_fail@plt+0x30110>
   4261c:	ldr	r2, [r8, #12]
   42620:	add	r3, r2, r1, lsl #2
   42624:	ldr	r3, [r3, #4]
   42628:	str	r3, [r2, r1, lsl #2]
   4262c:	add	r1, r1, #1
   42630:	ldr	r3, [r8, #8]
   42634:	cmp	r1, r3
   42638:	blt	42620 <__assert_fail@plt+0x2fb70>
   4263c:	ldr	r3, [ip, #4]
   42640:	b	42608 <__assert_fail@plt+0x2fb58>
   42644:	cmp	r1, #0
   42648:	bne	429e0 <__assert_fail@plt+0x2ff30>
   4264c:	movw	r9, #65280	; 0xff00
   42650:	mov	r6, #0
   42654:	mov	lr, #0
   42658:	movt	r9, #3
   4265c:	add	r5, r9, #255	; 0xff
   42660:	str	r5, [sp, #4]
   42664:	b	4267c <__assert_fail@plt+0x2fbcc>
   42668:	mov	r3, r5
   4266c:	ldr	r5, [sp, #4]
   42670:	add	r6, r6, #1
   42674:	cmp	r6, r3
   42678:	bge	42bc0 <__assert_fail@plt+0x30110>
   4267c:	ldr	r1, [ip, #8]
   42680:	ldr	r2, [r0]
   42684:	ldr	r1, [r1, r6, lsl #2]
   42688:	add	r1, r2, r1, lsl #3
   4268c:	ldr	r4, [r1, #4]
   42690:	and	r1, r4, r5
   42694:	cmp	r1, #1
   42698:	beq	42670 <__assert_fail@plt+0x2fbc0>
   4269c:	mov	r5, r3
   426a0:	ldrb	r3, [sl]
   426a4:	mov	r2, #32
   426a8:	and	r1, r4, r9
   426ac:	and	r2, r2, r4, lsr #15
   426b0:	orr	r2, r3, r2
   426b4:	uxtb	r3, r4
   426b8:	strb	r2, [sl]
   426bc:	cmp	r3, #4
   426c0:	beq	426d4 <__assert_fail@plt+0x2fc24>
   426c4:	cmp	r3, #2
   426c8:	bne	426e0 <__assert_fail@plt+0x2fc30>
   426cc:	mov	r3, #16
   426d0:	b	426d8 <__assert_fail@plt+0x2fc28>
   426d4:	mov	r3, #64	; 0x40
   426d8:	orr	r2, r2, r3
   426dc:	strb	r2, [sl]
   426e0:	cmp	r1, #0
   426e4:	beq	42668 <__assert_fail@plt+0x2fbb8>
   426e8:	ldr	r1, [r8, #40]	; 0x28
   426ec:	ldr	r2, [sp, #24]
   426f0:	mov	r3, r5
   426f4:	cmp	r1, r2
   426f8:	beq	42720 <__assert_fail@plt+0x2fc70>
   426fc:	ldr	r5, [sp, #4]
   42700:	tst	r4, #4608	; 0x1200
   42704:	bne	427c4 <__assert_fail@plt+0x2fd14>
   42708:	ldr	r1, [sp, #12]
   4270c:	cmp	r1, #0
   42710:	bne	42670 <__assert_fail@plt+0x2fbc0>
   42714:	ands	r1, r4, #16384	; 0x4000
   42718:	bne	427c4 <__assert_fail@plt+0x2fd14>
   4271c:	b	42670 <__assert_fail@plt+0x2fbc0>
   42720:	mov	r0, #12
   42724:	bl	35350 <__assert_fail@plt+0x228a0>
   42728:	cmp	r0, #0
   4272c:	beq	42bec <__assert_fail@plt+0x3013c>
   42730:	ldr	ip, [sp, #20]
   42734:	str	r0, [r8, #40]	; 0x28
   42738:	mov	sl, r0
   4273c:	mov	r5, r0
   42740:	ldr	r3, [ip, #4]
   42744:	str	r3, [sl, #4]!
   42748:	cmp	r3, #0
   4274c:	ble	42790 <__assert_fail@plt+0x2fce0>
   42750:	lsl	r0, r3, #2
   42754:	str	r3, [r5]
   42758:	bl	35350 <__assert_fail@plt+0x228a0>
   4275c:	cmp	r0, #0
   42760:	str	r0, [r5, #8]
   42764:	beq	42be0 <__assert_fail@plt+0x30130>
   42768:	ldr	r5, [sp, #20]
   4276c:	ldr	r9, [r5, #4]
   42770:	ldr	r1, [r5, #8]
   42774:	lsl	r2, r9, #2
   42778:	bl	124e0 <memcpy@plt>
   4277c:	mov	r3, r9
   42780:	movw	r9, #65280	; 0xff00
   42784:	mov	ip, r5
   42788:	movt	r9, #3
   4278c:	b	427a0 <__assert_fail@plt+0x2fcf0>
   42790:	mov	r0, #0
   42794:	str	r0, [r5]
   42798:	str	r0, [r5, #4]
   4279c:	str	r0, [r5, #8]
   427a0:	ldr	sl, [sp, #8]
   427a4:	mov	lr, #0
   427a8:	ldrb	r0, [sl]
   427ac:	orr	r0, r0, #128	; 0x80
   427b0:	strb	r0, [sl]
   427b4:	ldr	r0, [sp, #16]
   427b8:	ldr	r5, [sp, #4]
   427bc:	tst	r4, #4608	; 0x1200
   427c0:	beq	42708 <__assert_fail@plt+0x2fc58>
   427c4:	subs	r1, r6, lr
   427c8:	bmi	427e4 <__assert_fail@plt+0x2fd34>
   427cc:	ldr	r2, [r8, #8]
   427d0:	cmp	r2, r1
   427d4:	subgt	r2, r2, #1
   427d8:	strgt	r2, [r8, #8]
   427dc:	cmpgt	r2, r1
   427e0:	bgt	427f8 <__assert_fail@plt+0x2fd48>
   427e4:	add	lr, lr, #1
   427e8:	add	r6, r6, #1
   427ec:	cmp	r6, r3
   427f0:	blt	4267c <__assert_fail@plt+0x2fbcc>
   427f4:	b	42bc0 <__assert_fail@plt+0x30110>
   427f8:	ldr	r2, [r8, #12]
   427fc:	add	r3, r2, r1, lsl #2
   42800:	ldr	r3, [r3, #4]
   42804:	str	r3, [r2, r1, lsl #2]
   42808:	add	r1, r1, #1
   4280c:	ldr	r3, [r8, #8]
   42810:	cmp	r1, r3
   42814:	blt	427fc <__assert_fail@plt+0x2fd4c>
   42818:	ldr	r3, [ip, #4]
   4281c:	b	427e4 <__assert_fail@plt+0x2fd34>
   42820:	str	r5, [sp, #4]
   42824:	b	4283c <__assert_fail@plt+0x2fd8c>
   42828:	mov	r3, r5
   4282c:	ldr	r5, [sp, #4]
   42830:	add	r6, r6, #1
   42834:	cmp	r6, r3
   42838:	bge	42bc0 <__assert_fail@plt+0x30110>
   4283c:	ldr	r1, [ip, #8]
   42840:	ldr	r2, [r0]
   42844:	ldr	r1, [r1, r6, lsl #2]
   42848:	add	r1, r2, r1, lsl #3
   4284c:	ldr	r4, [r1, #4]
   42850:	and	r1, r4, r5
   42854:	cmp	r1, #1
   42858:	beq	42830 <__assert_fail@plt+0x2fd80>
   4285c:	mov	r5, r3
   42860:	ldrb	r3, [sl]
   42864:	mov	r2, #32
   42868:	and	r1, r4, r9
   4286c:	and	r2, r2, r4, lsr #15
   42870:	orr	r2, r3, r2
   42874:	uxtb	r3, r4
   42878:	strb	r2, [sl]
   4287c:	cmp	r3, #4
   42880:	beq	42894 <__assert_fail@plt+0x2fde4>
   42884:	cmp	r3, #2
   42888:	bne	428a0 <__assert_fail@plt+0x2fdf0>
   4288c:	mov	r3, #16
   42890:	b	42898 <__assert_fail@plt+0x2fde8>
   42894:	mov	r3, #64	; 0x40
   42898:	orr	r2, r2, r3
   4289c:	strb	r2, [sl]
   428a0:	cmp	r1, #0
   428a4:	beq	42828 <__assert_fail@plt+0x2fd78>
   428a8:	ldr	r1, [r8, #40]	; 0x28
   428ac:	ldr	r2, [sp, #24]
   428b0:	mov	r3, r5
   428b4:	cmp	r1, r2
   428b8:	beq	428e0 <__assert_fail@plt+0x2fe30>
   428bc:	ldr	r5, [sp, #4]
   428c0:	tst	r4, #256	; 0x100
   428c4:	bne	42984 <__assert_fail@plt+0x2fed4>
   428c8:	ldr	r1, [sp, #12]
   428cc:	cmp	r1, #0
   428d0:	bne	42830 <__assert_fail@plt+0x2fd80>
   428d4:	ands	r1, r4, #16384	; 0x4000
   428d8:	bne	42984 <__assert_fail@plt+0x2fed4>
   428dc:	b	42830 <__assert_fail@plt+0x2fd80>
   428e0:	mov	r0, #12
   428e4:	bl	35350 <__assert_fail@plt+0x228a0>
   428e8:	cmp	r0, #0
   428ec:	beq	42bec <__assert_fail@plt+0x3013c>
   428f0:	ldr	ip, [sp, #20]
   428f4:	str	r0, [r8, #40]	; 0x28
   428f8:	mov	sl, r0
   428fc:	mov	r5, r0
   42900:	ldr	r3, [ip, #4]
   42904:	str	r3, [sl, #4]!
   42908:	cmp	r3, #0
   4290c:	ble	42950 <__assert_fail@plt+0x2fea0>
   42910:	lsl	r0, r3, #2
   42914:	str	r3, [r5]
   42918:	bl	35350 <__assert_fail@plt+0x228a0>
   4291c:	cmp	r0, #0
   42920:	str	r0, [r5, #8]
   42924:	beq	42be0 <__assert_fail@plt+0x30130>
   42928:	ldr	r5, [sp, #20]
   4292c:	ldr	r9, [r5, #4]
   42930:	ldr	r1, [r5, #8]
   42934:	lsl	r2, r9, #2
   42938:	bl	124e0 <memcpy@plt>
   4293c:	mov	r3, r9
   42940:	movw	r9, #65280	; 0xff00
   42944:	mov	ip, r5
   42948:	movt	r9, #3
   4294c:	b	42960 <__assert_fail@plt+0x2feb0>
   42950:	mov	r0, #0
   42954:	str	r0, [r5]
   42958:	str	r0, [r5, #4]
   4295c:	str	r0, [r5, #8]
   42960:	ldr	sl, [sp, #8]
   42964:	mov	lr, #0
   42968:	ldrb	r0, [sl]
   4296c:	orr	r0, r0, #128	; 0x80
   42970:	strb	r0, [sl]
   42974:	ldr	r0, [sp, #16]
   42978:	ldr	r5, [sp, #4]
   4297c:	tst	r4, #256	; 0x100
   42980:	beq	428c8 <__assert_fail@plt+0x2fe18>
   42984:	subs	r1, r6, lr
   42988:	bmi	429a4 <__assert_fail@plt+0x2fef4>
   4298c:	ldr	r2, [r8, #8]
   42990:	cmp	r2, r1
   42994:	subgt	r2, r2, #1
   42998:	strgt	r2, [r8, #8]
   4299c:	cmpgt	r2, r1
   429a0:	bgt	429b8 <__assert_fail@plt+0x2ff08>
   429a4:	add	lr, lr, #1
   429a8:	add	r6, r6, #1
   429ac:	cmp	r6, r3
   429b0:	blt	4283c <__assert_fail@plt+0x2fd8c>
   429b4:	b	42bc0 <__assert_fail@plt+0x30110>
   429b8:	ldr	r2, [r8, #12]
   429bc:	add	r3, r2, r1, lsl #2
   429c0:	ldr	r3, [r3, #4]
   429c4:	str	r3, [r2, r1, lsl #2]
   429c8:	add	r1, r1, #1
   429cc:	ldr	r3, [r8, #8]
   429d0:	cmp	r1, r3
   429d4:	blt	429bc <__assert_fail@plt+0x2ff0c>
   429d8:	ldr	r3, [ip, #4]
   429dc:	b	429a4 <__assert_fail@plt+0x2fef4>
   429e0:	movw	lr, #65280	; 0xff00
   429e4:	mov	r9, #0
   429e8:	mov	r4, #0
   429ec:	movt	lr, #3
   429f0:	add	r5, lr, #255	; 0xff
   429f4:	str	r5, [sp, #4]
   429f8:	b	42a10 <__assert_fail@plt+0x2ff60>
   429fc:	mov	r3, r5
   42a00:	ldr	r5, [sp, #4]
   42a04:	add	r9, r9, #1
   42a08:	cmp	r9, r3
   42a0c:	bge	42bc0 <__assert_fail@plt+0x30110>
   42a10:	ldr	r1, [ip, #8]
   42a14:	ldr	r2, [r0]
   42a18:	ldr	r1, [r1, r9, lsl #2]
   42a1c:	add	r1, r2, r1, lsl #3
   42a20:	ldr	r6, [r1, #4]
   42a24:	and	r1, r6, r5
   42a28:	cmp	r1, #1
   42a2c:	beq	42a04 <__assert_fail@plt+0x2ff54>
   42a30:	mov	r5, r3
   42a34:	ldrb	r3, [sl]
   42a38:	mov	r2, #32
   42a3c:	and	r1, r6, lr
   42a40:	and	r2, r2, r6, lsr #15
   42a44:	orr	r2, r3, r2
   42a48:	uxtb	r3, r6
   42a4c:	strb	r2, [sl]
   42a50:	cmp	r3, #2
   42a54:	beq	42a68 <__assert_fail@plt+0x2ffb8>
   42a58:	cmp	r3, #4
   42a5c:	bne	42a74 <__assert_fail@plt+0x2ffc4>
   42a60:	mov	r3, #64	; 0x40
   42a64:	b	42a6c <__assert_fail@plt+0x2ffbc>
   42a68:	mov	r3, #16
   42a6c:	orr	r2, r2, r3
   42a70:	strb	r2, [sl]
   42a74:	cmp	r1, #0
   42a78:	beq	429fc <__assert_fail@plt+0x2ff4c>
   42a7c:	ldr	r1, [r8, #40]	; 0x28
   42a80:	ldr	r2, [sp, #24]
   42a84:	mov	r3, r5
   42a88:	cmp	r1, r2
   42a8c:	beq	42ab4 <__assert_fail@plt+0x30004>
   42a90:	ldr	r5, [sp, #4]
   42a94:	tst	r6, #512	; 0x200
   42a98:	bne	42b58 <__assert_fail@plt+0x300a8>
   42a9c:	ldr	r1, [sp, #12]
   42aa0:	cmp	r1, #0
   42aa4:	bne	42a04 <__assert_fail@plt+0x2ff54>
   42aa8:	ands	r1, r6, #16384	; 0x4000
   42aac:	bne	42b58 <__assert_fail@plt+0x300a8>
   42ab0:	b	42a04 <__assert_fail@plt+0x2ff54>
   42ab4:	mov	r0, #12
   42ab8:	bl	35350 <__assert_fail@plt+0x228a0>
   42abc:	cmp	r0, #0
   42ac0:	beq	42bec <__assert_fail@plt+0x3013c>
   42ac4:	ldr	ip, [sp, #20]
   42ac8:	str	r0, [r8, #40]	; 0x28
   42acc:	mov	sl, r0
   42ad0:	mov	r5, r0
   42ad4:	ldr	r3, [ip, #4]
   42ad8:	str	r3, [sl, #4]!
   42adc:	cmp	r3, #1
   42ae0:	blt	42b1c <__assert_fail@plt+0x3006c>
   42ae4:	lsl	r0, r3, #2
   42ae8:	str	r3, [r5]
   42aec:	bl	35350 <__assert_fail@plt+0x228a0>
   42af0:	cmp	r0, #0
   42af4:	str	r0, [r5, #8]
   42af8:	beq	42be0 <__assert_fail@plt+0x30130>
   42afc:	ldr	r4, [sp, #20]
   42b00:	ldr	r5, [r4, #4]
   42b04:	ldr	r1, [r4, #8]
   42b08:	lsl	r2, r5, #2
   42b0c:	bl	124e0 <memcpy@plt>
   42b10:	mov	r3, r5
   42b14:	mov	ip, r4
   42b18:	b	42b2c <__assert_fail@plt+0x3007c>
   42b1c:	mov	r0, #0
   42b20:	str	r0, [r5]
   42b24:	str	r0, [r5, #4]
   42b28:	str	r0, [r5, #8]
   42b2c:	ldr	sl, [sp, #8]
   42b30:	movw	lr, #65280	; 0xff00
   42b34:	mov	r4, #0
   42b38:	movt	lr, #3
   42b3c:	ldrb	r0, [sl]
   42b40:	orr	r0, r0, #128	; 0x80
   42b44:	strb	r0, [sl]
   42b48:	ldr	r0, [sp, #16]
   42b4c:	ldr	r5, [sp, #4]
   42b50:	tst	r6, #512	; 0x200
   42b54:	beq	42a9c <__assert_fail@plt+0x2ffec>
   42b58:	subs	r1, r9, r4
   42b5c:	bmi	42b78 <__assert_fail@plt+0x300c8>
   42b60:	ldr	r2, [r8, #8]
   42b64:	cmp	r2, r1
   42b68:	subgt	r2, r2, #1
   42b6c:	strgt	r2, [r8, #8]
   42b70:	cmpgt	r2, r1
   42b74:	bgt	42b8c <__assert_fail@plt+0x300dc>
   42b78:	add	r4, r4, #1
   42b7c:	add	r9, r9, #1
   42b80:	cmp	r9, r3
   42b84:	blt	42a10 <__assert_fail@plt+0x2ff60>
   42b88:	b	42bc0 <__assert_fail@plt+0x30110>
   42b8c:	ldr	r2, [r8, #12]
   42b90:	add	r3, r2, r1, lsl #2
   42b94:	ldr	r3, [r3, #4]
   42b98:	str	r3, [r2, r1, lsl #2]
   42b9c:	add	r1, r1, #1
   42ba0:	ldr	r3, [r8, #8]
   42ba4:	cmp	r1, r3
   42ba8:	blt	42b90 <__assert_fail@plt+0x300e0>
   42bac:	ldr	r3, [ip, #4]
   42bb0:	add	r4, r4, #1
   42bb4:	add	r9, r9, #1
   42bb8:	cmp	r9, r3
   42bbc:	blt	42a10 <__assert_fail@plt+0x2ff60>
   42bc0:	mov	r1, r8
   42bc4:	mov	r2, r7
   42bc8:	bl	42c28 <__assert_fail@plt+0x30178>
   42bcc:	cmp	r0, #0
   42bd0:	bne	42bec <__assert_fail@plt+0x3013c>
   42bd4:	mov	r0, r8
   42bd8:	sub	sp, fp, #28
   42bdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42be0:	mov	r0, #0
   42be4:	str	r0, [sl]
   42be8:	str	r0, [r5]
   42bec:	mov	r0, r8
   42bf0:	bl	3bc20 <__assert_fail@plt+0x29170>
   42bf4:	ldr	r1, [sp]
   42bf8:	mov	r0, #12
   42bfc:	mov	r8, #0
   42c00:	str	r0, [r1]
   42c04:	mov	r0, r8
   42c08:	sub	sp, fp, #28
   42c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42c10:	mov	r0, #0
   42c14:	str	r0, [r8, #4]
   42c18:	str	r0, [r8, #8]
   42c1c:	mov	r0, r8
   42c20:	bl	32910 <__assert_fail@plt+0x1fe60>
   42c24:	b	42bf4 <__assert_fail@plt+0x30144>
   42c28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42c2c:	add	fp, sp, #28
   42c30:	sub	sp, sp, #4
   42c34:	str	r2, [r1]
   42c38:	mov	r4, r1
   42c3c:	mov	r7, r0
   42c40:	mov	r0, #0
   42c44:	mov	r9, r2
   42c48:	ldr	r1, [r1, #8]
   42c4c:	str	r1, [r4, #16]
   42c50:	str	r0, [r4, #20]
   42c54:	lsl	r0, r1, #2
   42c58:	bl	35350 <__assert_fail@plt+0x228a0>
   42c5c:	mov	r8, #12
   42c60:	cmp	r0, #0
   42c64:	str	r0, [r4, #24]
   42c68:	beq	42d30 <__assert_fail@plt+0x30280>
   42c6c:	ldr	r1, [r4, #8]
   42c70:	cmp	r1, #1
   42c74:	blt	42cf0 <__assert_fail@plt+0x30240>
   42c78:	mov	r5, #0
   42c7c:	mov	sl, #2
   42c80:	b	42ca0 <__assert_fail@plt+0x301f0>
   42c84:	add	r2, r1, #1
   42c88:	str	r2, [r4, #20]
   42c8c:	str	r6, [r0, r1, lsl #2]
   42c90:	ldr	r1, [r4, #8]
   42c94:	add	r5, r5, #1
   42c98:	cmp	r5, r1
   42c9c:	bge	42cf0 <__assert_fail@plt+0x30240>
   42ca0:	ldr	r2, [r4, #12]
   42ca4:	ldr	r6, [r2, r5, lsl #2]
   42ca8:	ldr	r2, [r7]
   42cac:	add	r2, r2, r6, lsl #3
   42cb0:	ldrb	r2, [r2, #4]
   42cb4:	tst	r2, #8
   42cb8:	bne	42c94 <__assert_fail@plt+0x301e4>
   42cbc:	ldr	r2, [r4, #16]
   42cc0:	ldr	r1, [r4, #20]
   42cc4:	cmp	r2, r1
   42cc8:	bne	42c84 <__assert_fail@plt+0x301d4>
   42ccc:	add	r1, sl, r2, lsl #1
   42cd0:	str	r1, [r4, #16]
   42cd4:	lsl	r1, r1, #2
   42cd8:	bl	36110 <__assert_fail@plt+0x23660>
   42cdc:	cmp	r0, #0
   42ce0:	beq	42d30 <__assert_fail@plt+0x30280>
   42ce4:	str	r0, [r4, #24]
   42ce8:	ldr	r1, [r4, #20]
   42cec:	b	42c84 <__assert_fail@plt+0x301d4>
   42cf0:	ldr	r1, [r7, #68]	; 0x44
   42cf4:	ldr	r0, [r7, #32]
   42cf8:	and	r1, r1, r9
   42cfc:	mov	r5, r0
   42d00:	add	r2, r1, r1, lsl #1
   42d04:	ldr	r1, [r5, r2, lsl #2]!
   42d08:	mov	r6, r5
   42d0c:	ldr	r3, [r6, #4]!
   42d10:	cmp	r3, r1
   42d14:	ble	42d3c <__assert_fail@plt+0x3028c>
   42d18:	add	r0, r0, r2, lsl #2
   42d1c:	ldr	r0, [r0, #8]
   42d20:	add	r2, r1, #1
   42d24:	mov	r8, #0
   42d28:	str	r2, [r5]
   42d2c:	str	r4, [r0, r1, lsl #2]
   42d30:	mov	r0, r8
   42d34:	sub	sp, fp, #28
   42d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42d3c:	add	r7, r0, r2, lsl #2
   42d40:	mov	r2, #2
   42d44:	add	r9, r2, r1, lsl #1
   42d48:	ldr	r0, [r7, #8]!
   42d4c:	lsl	r1, r9, #2
   42d50:	bl	36110 <__assert_fail@plt+0x23660>
   42d54:	cmp	r0, #0
   42d58:	beq	42d30 <__assert_fail@plt+0x30280>
   42d5c:	str	r0, [r7]
   42d60:	str	r9, [r6]
   42d64:	ldr	r1, [r5]
   42d68:	b	42d20 <__assert_fail@plt+0x30270>
   42d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42d70:	add	fp, sp, #28
   42d74:	sub	sp, sp, #36	; 0x24
   42d78:	mov	r4, r0
   42d7c:	ldr	r0, [r0, #24]
   42d80:	mov	r6, r2
   42d84:	mov	r9, r1
   42d88:	cmp	r0, r1
   42d8c:	ble	42fa4 <__assert_fail@plt+0x304f4>
   42d90:	ldr	r0, [r4, #80]	; 0x50
   42d94:	mov	r1, #4
   42d98:	cmp	r0, #2
   42d9c:	movge	r0, #0
   42da0:	strge	r0, [r4, #16]
   42da4:	strge	r0, [r4, #20]
   42da8:	mov	r0, #0
   42dac:	tst	r6, #1
   42db0:	strb	r0, [r4, #76]	; 0x4c
   42db4:	str	r0, [r4, #24]
   42db8:	str	r0, [r4, #28]
   42dbc:	str	r0, [r4, #32]
   42dc0:	movweq	r1, #6
   42dc4:	ldr	r2, [r4, #44]	; 0x2c
   42dc8:	ldr	r3, [r4, #52]	; 0x34
   42dcc:	str	r2, [r4, #48]	; 0x30
   42dd0:	str	r3, [r4, #56]	; 0x38
   42dd4:	str	r1, [r4, #60]	; 0x3c
   42dd8:	ldrb	r1, [r4, #75]	; 0x4b
   42ddc:	cmp	r1, #0
   42de0:	bne	42dec <__assert_fail@plt+0x3033c>
   42de4:	ldr	r1, [r4]
   42de8:	str	r1, [r4, #4]
   42dec:	mov	r5, r9
   42df0:	cmp	r5, #0
   42df4:	beq	42f20 <__assert_fail@plt+0x30470>
   42df8:	ldr	r1, [r4, #32]
   42dfc:	cmp	r5, r1
   42e00:	bge	42fb4 <__assert_fail@plt+0x30504>
   42e04:	ldrb	r0, [r4, #76]	; 0x4c
   42e08:	cmp	r0, #0
   42e0c:	bne	43168 <__assert_fail@plt+0x306b8>
   42e10:	cmp	r5, #0
   42e14:	ble	42e50 <__assert_fail@plt+0x303a0>
   42e18:	ldr	r1, [r4, #48]	; 0x30
   42e1c:	sub	r0, r5, #1
   42e20:	cmp	r1, r0
   42e24:	beq	43230 <__assert_fail@plt+0x30780>
   42e28:	ldr	r1, [r4, #80]	; 0x50
   42e2c:	cmp	r1, #2
   42e30:	blt	42e68 <__assert_fail@plt+0x303b8>
   42e34:	ldr	r1, [r4, #8]
   42e38:	ldr	r6, [r1, r0, lsl #2]
   42e3c:	cmn	r6, #1
   42e40:	bne	42e98 <__assert_fail@plt+0x303e8>
   42e44:	sub	r0, r0, #1
   42e48:	cmn	r0, #1
   42e4c:	bne	42e38 <__assert_fail@plt+0x30388>
   42e50:	ldr	r1, [r4, #60]	; 0x3c
   42e54:	str	r1, [r4, #60]	; 0x3c
   42e58:	ldr	r0, [r4, #80]	; 0x50
   42e5c:	cmp	r0, #2
   42e60:	bge	42ed0 <__assert_fail@plt+0x30420>
   42e64:	b	42ee8 <__assert_fail@plt+0x30438>
   42e68:	ldr	r1, [r4, #4]
   42e6c:	ldr	r2, [r4, #68]	; 0x44
   42e70:	ldrb	r0, [r1, r0]
   42e74:	ubfx	r1, r0, #5, #3
   42e78:	and	r3, r0, #31
   42e7c:	ldr	r2, [r2, r1, lsl #2]
   42e80:	mov	r1, #1
   42e84:	tst	r2, r1, lsl r3
   42e88:	moveq	r1, #0
   42e8c:	cmpeq	r0, #10
   42e90:	bne	42ec0 <__assert_fail@plt+0x30410>
   42e94:	b	42eb0 <__assert_fail@plt+0x30400>
   42e98:	ldrb	r0, [r4, #78]	; 0x4e
   42e9c:	cmp	r0, #0
   42ea0:	bne	433fc <__assert_fail@plt+0x3094c>
   42ea4:	mov	r1, #0
   42ea8:	cmp	r6, #10
   42eac:	bne	42ec0 <__assert_fail@plt+0x30410>
   42eb0:	ldrb	r0, [r4, #77]	; 0x4d
   42eb4:	cmp	r0, #0
   42eb8:	movwne	r0, #1
   42ebc:	lsl	r1, r0, #1
   42ec0:	str	r1, [r4, #60]	; 0x3c
   42ec4:	ldr	r0, [r4, #80]	; 0x50
   42ec8:	cmp	r0, #2
   42ecc:	blt	42ee8 <__assert_fail@plt+0x30438>
   42ed0:	ldr	r2, [r4, #28]
   42ed4:	ldr	r0, [r4, #8]
   42ed8:	sub	r2, r2, r5
   42edc:	add	r1, r0, r5, lsl #2
   42ee0:	lsl	r2, r2, #2
   42ee4:	bl	12474 <memmove@plt>
   42ee8:	ldrb	r0, [r4, #75]	; 0x4b
   42eec:	cmp	r0, #0
   42ef0:	bne	43218 <__assert_fail@plt+0x30768>
   42ef4:	ldr	r0, [r4, #28]
   42ef8:	ldr	r1, [r4, #32]
   42efc:	sub	r0, r0, r5
   42f00:	sub	r1, r1, r5
   42f04:	str	r0, [r4, #28]
   42f08:	str	r1, [r4, #32]
   42f0c:	ldrb	r0, [r4, #75]	; 0x4b
   42f10:	cmp	r0, #0
   42f14:	ldreq	r0, [r4, #4]
   42f18:	addeq	r0, r0, r5
   42f1c:	streq	r0, [r4, #4]
   42f20:	str	r9, [r4, #24]
   42f24:	ldr	r0, [r4, #48]	; 0x30
   42f28:	ldr	r3, [r4, #80]	; 0x50
   42f2c:	ldr	r1, [r4, #56]	; 0x38
   42f30:	sub	r2, r0, r5
   42f34:	cmp	r3, #2
   42f38:	sub	r0, r1, r5
   42f3c:	str	r2, [r4, #48]	; 0x30
   42f40:	str	r0, [r4, #56]	; 0x38
   42f44:	blt	42f6c <__assert_fail@plt+0x304bc>
   42f48:	ldrb	r0, [r4, #72]	; 0x48
   42f4c:	cmp	r0, #0
   42f50:	beq	42f8c <__assert_fail@plt+0x304dc>
   42f54:	mov	r0, r4
   42f58:	bl	3bc80 <__assert_fail@plt+0x291d0>
   42f5c:	cmp	r0, #0
   42f60:	beq	42f94 <__assert_fail@plt+0x304e4>
   42f64:	sub	sp, fp, #28
   42f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42f6c:	ldrb	r0, [r4, #75]	; 0x4b
   42f70:	cmp	r0, #0
   42f74:	bne	4324c <__assert_fail@plt+0x3079c>
   42f78:	str	r2, [r4, #28]
   42f7c:	mov	r0, #0
   42f80:	str	r0, [r4, #40]	; 0x28
   42f84:	sub	sp, fp, #28
   42f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42f8c:	mov	r0, r4
   42f90:	bl	3c5a0 <__assert_fail@plt+0x29af0>
   42f94:	mov	r0, #0
   42f98:	str	r0, [r4, #40]	; 0x28
   42f9c:	sub	sp, fp, #28
   42fa0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42fa4:	sub	r5, r9, r0
   42fa8:	cmp	r5, #0
   42fac:	bne	42df8 <__assert_fail@plt+0x30348>
   42fb0:	b	42f20 <__assert_fail@plt+0x30470>
   42fb4:	ldrb	r2, [r4, #76]	; 0x4c
   42fb8:	ldr	lr, [r4, #28]
   42fbc:	cmp	r2, #0
   42fc0:	bne	4359c <__assert_fail@plt+0x30aec>
   42fc4:	mov	r2, #0
   42fc8:	str	r2, [r4, #28]
   42fcc:	ldr	r3, [r4, #80]	; 0x50
   42fd0:	cmp	r3, #2
   42fd4:	blt	432bc <__assert_fail@plt+0x3080c>
   42fd8:	ldrb	r2, [r4, #73]	; 0x49
   42fdc:	cmp	r2, #0
   42fe0:	beq	4309c <__assert_fail@plt+0x305ec>
   42fe4:	ldr	r7, [r4]
   42fe8:	sub	r3, r5, r3
   42fec:	add	ip, r7, r0
   42ff0:	add	r3, ip, r3
   42ff4:	add	r8, ip, r5
   42ff8:	cmp	r3, r7
   42ffc:	movcc	r3, r7
   43000:	mov	r7, r8
   43004:	sub	r7, r7, #1
   43008:	cmp	r7, r3
   4300c:	bcc	4309c <__assert_fail@plt+0x305ec>
   43010:	ldrb	r2, [r7]
   43014:	and	r2, r2, #192	; 0xc0
   43018:	cmp	r2, #128	; 0x80
   4301c:	beq	43004 <__assert_fail@plt+0x30554>
   43020:	ldr	r0, [r4, #48]	; 0x30
   43024:	mov	sl, lr
   43028:	mov	r1, r7
   4302c:	add	r0, ip, r0
   43030:	sub	r2, r0, r7
   43034:	ldr	r0, [r4, #64]	; 0x40
   43038:	cmp	r0, #0
   4303c:	bne	43768 <__assert_fail@plt+0x30cb8>
   43040:	mov	r0, #0
   43044:	add	r3, sp, #24
   43048:	str	r0, [sp, #28]
   4304c:	str	r0, [sp, #24]
   43050:	add	r0, sp, #20
   43054:	bl	35380 <__assert_fail@plt+0x228d0>
   43058:	sub	r1, r8, r7
   4305c:	mvn	r7, #0
   43060:	cmp	r0, r1
   43064:	bcc	43088 <__assert_fail@plt+0x305d8>
   43068:	cmn	r0, #3
   4306c:	bhi	43088 <__assert_fail@plt+0x305d8>
   43070:	mov	r2, #0
   43074:	sub	r0, r0, r1
   43078:	str	r2, [r4, #16]
   4307c:	str	r2, [r4, #20]
   43080:	str	r0, [r4, #28]
   43084:	ldr	r7, [sp, #20]
   43088:	cmn	r7, #1
   4308c:	bne	4314c <__assert_fail@plt+0x3069c>
   43090:	ldr	r0, [r4, #24]
   43094:	ldr	r1, [r4, #32]
   43098:	mov	lr, sl
   4309c:	add	r8, r1, r0
   430a0:	cmp	r8, r9
   430a4:	bge	4341c <__assert_fail@plt+0x3096c>
   430a8:	add	sl, r4, #16
   430ac:	str	lr, [sp]
   430b0:	ldr	r0, [r4]
   430b4:	ldr	r2, [r4, #44]	; 0x2c
   430b8:	mov	r3, sl
   430bc:	add	r1, r0, r8
   430c0:	ldr	r0, [sl]
   430c4:	sub	r7, r2, r8
   430c8:	mov	r2, r7
   430cc:	str	r0, [sp, #8]
   430d0:	ldr	r0, [sl, #4]
   430d4:	str	r0, [sp, #4]
   430d8:	add	r0, sp, #24
   430dc:	bl	35380 <__assert_fail@plt+0x228d0>
   430e0:	sub	r1, r0, #1
   430e4:	cmn	r1, #3
   430e8:	bcs	43100 <__assert_fail@plt+0x30650>
   430ec:	ldr	r7, [sp, #24]
   430f0:	add	r8, r0, r8
   430f4:	cmp	r8, r9
   430f8:	blt	430b0 <__assert_fail@plt+0x30600>
   430fc:	b	43138 <__assert_fail@plt+0x30688>
   43100:	ldr	r3, [sp, #4]
   43104:	ldr	r2, [sp, #8]
   43108:	cmp	r7, #0
   4310c:	mov	r1, #0
   43110:	cmpne	r0, #0
   43114:	beq	43120 <__assert_fail@plt+0x30670>
   43118:	ldr	r0, [r4]
   4311c:	ldrb	r1, [r0, r8]
   43120:	stm	sl, {r2, r3}
   43124:	mov	r0, #1
   43128:	mov	r7, r1
   4312c:	add	r8, r0, r8
   43130:	cmp	r8, r9
   43134:	blt	430b0 <__assert_fail@plt+0x30600>
   43138:	ldr	lr, [sp]
   4313c:	sub	r0, r8, r9
   43140:	cmn	r7, #1
   43144:	str	r0, [r4, #28]
   43148:	beq	43424 <__assert_fail@plt+0x30974>
   4314c:	ldrb	r0, [r4, #78]	; 0x4e
   43150:	cmp	r0, #0
   43154:	bne	43738 <__assert_fail@plt+0x30c88>
   43158:	mov	r1, #0
   4315c:	cmp	r7, #10
   43160:	beq	43570 <__assert_fail@plt+0x30ac0>
   43164:	b	43580 <__assert_fail@plt+0x30ad0>
   43168:	ldr	ip, [r4, #12]
   4316c:	ldr	r0, [r4, #28]
   43170:	mov	r2, #0
   43174:	b	43184 <__assert_fail@plt+0x306d4>
   43178:	cmp	r2, r3
   4317c:	mov	r0, r3
   43180:	bge	431b0 <__assert_fail@plt+0x30700>
   43184:	add	r1, r2, r0
   43188:	add	r1, r1, r1, lsr #31
   4318c:	asr	r1, r1, #1
   43190:	ldr	r7, [ip, r1, lsl #2]
   43194:	mov	r3, r1
   43198:	cmp	r7, r5
   4319c:	bgt	43178 <__assert_fail@plt+0x306c8>
   431a0:	bge	431b0 <__assert_fail@plt+0x30700>
   431a4:	add	r2, r1, #1
   431a8:	mov	r3, r0
   431ac:	b	43178 <__assert_fail@plt+0x306c8>
   431b0:	cmp	r7, r5
   431b4:	mov	r0, #0
   431b8:	movwlt	r0, #1
   431bc:	add	r7, r1, r0
   431c0:	cmp	r7, #0
   431c4:	ble	43200 <__assert_fail@plt+0x30750>
   431c8:	ldr	r1, [r4, #48]	; 0x30
   431cc:	sub	r0, r7, #1
   431d0:	cmp	r1, r0
   431d4:	beq	435c4 <__assert_fail@plt+0x30b14>
   431d8:	ldr	r1, [r4, #80]	; 0x50
   431dc:	cmp	r1, #2
   431e0:	blt	43308 <__assert_fail@plt+0x30858>
   431e4:	ldr	r1, [r4, #8]
   431e8:	ldr	r6, [r1, r0, lsl #2]
   431ec:	cmn	r6, #1
   431f0:	bne	43338 <__assert_fail@plt+0x30888>
   431f4:	sub	r0, r0, #1
   431f8:	cmn	r0, #1
   431fc:	bne	431e8 <__assert_fail@plt+0x30738>
   43200:	ldr	r1, [r4, #60]	; 0x3c
   43204:	str	r1, [r4, #60]	; 0x3c
   43208:	cmp	r7, r5
   4320c:	ldr	r2, [r4, #28]
   43210:	beq	43370 <__assert_fail@plt+0x308c0>
   43214:	b	435dc <__assert_fail@plt+0x30b2c>
   43218:	ldr	r2, [r4, #28]
   4321c:	ldr	r0, [r4, #4]
   43220:	add	r1, r0, r5
   43224:	sub	r2, r2, r5
   43228:	bl	12474 <memmove@plt>
   4322c:	b	42ef4 <__assert_fail@plt+0x30444>
   43230:	and	r0, r6, #2
   43234:	eor	r1, r0, #10
   43238:	str	r1, [r4, #60]	; 0x3c
   4323c:	ldr	r0, [r4, #80]	; 0x50
   43240:	cmp	r0, #2
   43244:	bge	42ed0 <__assert_fail@plt+0x30420>
   43248:	b	42ee8 <__assert_fail@plt+0x30438>
   4324c:	ldrb	r0, [r4, #72]	; 0x48
   43250:	cmp	r0, #0
   43254:	beq	4346c <__assert_fail@plt+0x309bc>
   43258:	ldr	r6, [r4, #36]	; 0x24
   4325c:	ldr	r5, [r4, #28]
   43260:	cmp	r6, r2
   43264:	movgt	r6, r2
   43268:	cmp	r5, r6
   4326c:	bge	434f8 <__assert_fail@plt+0x30a48>
   43270:	bl	12750 <__ctype_toupper_loc@plt>
   43274:	ldr	r1, [r4]
   43278:	ldr	r2, [r4, #64]	; 0x40
   4327c:	add	r1, r1, r9
   43280:	cmp	r2, #0
   43284:	ldrb	r1, [r1, r5]
   43288:	bne	432b4 <__assert_fail@plt+0x30804>
   4328c:	ldr	r2, [r0]
   43290:	ldr	r1, [r2, r1, lsl #2]
   43294:	ldr	r2, [r4, #4]
   43298:	strb	r1, [r2, r5]
   4329c:	add	r1, r5, #1
   432a0:	cmp	r1, r6
   432a4:	bge	434f4 <__assert_fail@plt+0x30a44>
   432a8:	ldr	r9, [r4, #24]
   432ac:	mov	r5, r1
   432b0:	b	43274 <__assert_fail@plt+0x307c4>
   432b4:	ldrb	r1, [r2, r1]
   432b8:	b	4328c <__assert_fail@plt+0x307dc>
   432bc:	ldr	r3, [r4]
   432c0:	add	r0, r5, r0
   432c4:	ldr	r1, [r4, #64]	; 0x40
   432c8:	add	r0, r0, r3
   432cc:	cmp	r1, #0
   432d0:	ldrb	r0, [r0, #-1]
   432d4:	str	r2, [r4, #32]
   432d8:	ldrbne	r0, [r1, r0]
   432dc:	ldr	r1, [r4, #68]	; 0x44
   432e0:	ubfx	r2, r0, #5, #3
   432e4:	and	r3, r0, #31
   432e8:	ldr	r2, [r1, r2, lsl #2]
   432ec:	mov	r1, #1
   432f0:	tst	r2, r1, lsl r3
   432f4:	moveq	r1, #0
   432f8:	cmpeq	r0, #10
   432fc:	beq	43544 <__assert_fail@plt+0x30a94>
   43300:	str	r1, [r4, #60]	; 0x3c
   43304:	b	42f0c <__assert_fail@plt+0x3045c>
   43308:	ldr	r1, [r4, #4]
   4330c:	ldr	r2, [r4, #68]	; 0x44
   43310:	ldrb	r0, [r1, r0]
   43314:	ubfx	r1, r0, #5, #3
   43318:	and	r3, r0, #31
   4331c:	ldr	r2, [r2, r1, lsl #2]
   43320:	mov	r1, #1
   43324:	tst	r2, r1, lsl r3
   43328:	moveq	r1, #0
   4332c:	cmpeq	r0, #10
   43330:	bne	43360 <__assert_fail@plt+0x308b0>
   43334:	b	43350 <__assert_fail@plt+0x308a0>
   43338:	ldrb	r0, [r4, #78]	; 0x4e
   4333c:	cmp	r0, #0
   43340:	bne	43718 <__assert_fail@plt+0x30c68>
   43344:	mov	r1, #0
   43348:	cmp	r6, #10
   4334c:	bne	43360 <__assert_fail@plt+0x308b0>
   43350:	ldrb	r0, [r4, #77]	; 0x4d
   43354:	cmp	r0, #0
   43358:	movwne	r0, #1
   4335c:	lsl	r1, r0, #1
   43360:	str	r1, [r4, #60]	; 0x3c
   43364:	cmp	r7, r5
   43368:	ldr	r2, [r4, #28]
   4336c:	bne	435dc <__assert_fail@plt+0x30b2c>
   43370:	cmp	r2, r5
   43374:	ble	435dc <__assert_fail@plt+0x30b2c>
   43378:	ldr	r0, [r4, #12]
   4337c:	ldr	r0, [r0, r5, lsl #2]
   43380:	cmp	r0, r5
   43384:	bne	435dc <__assert_fail@plt+0x30b2c>
   43388:	ldr	r0, [r4, #8]
   4338c:	sub	r2, r2, r5
   43390:	lsl	r2, r2, #2
   43394:	add	r1, r0, r5, lsl #2
   43398:	bl	12474 <memmove@plt>
   4339c:	ldr	r2, [r4, #28]
   433a0:	ldr	r0, [r4, #4]
   433a4:	add	r1, r0, r5
   433a8:	sub	r2, r2, r5
   433ac:	bl	12474 <memmove@plt>
   433b0:	ldr	r0, [r4, #28]
   433b4:	ldr	r1, [r4, #32]
   433b8:	sub	r0, r0, r5
   433bc:	sub	r1, r1, r5
   433c0:	cmp	r0, #1
   433c4:	str	r0, [r4, #28]
   433c8:	str	r1, [r4, #32]
   433cc:	blt	42f0c <__assert_fail@plt+0x3045c>
   433d0:	ldr	r0, [r4, #12]
   433d4:	mov	r2, #0
   433d8:	add	r1, r0, r5, lsl #2
   433dc:	ldr	r3, [r1, r2, lsl #2]
   433e0:	sub	r3, r3, r5
   433e4:	str	r3, [r0, r2, lsl #2]
   433e8:	add	r2, r2, #1
   433ec:	ldr	r3, [r4, #28]
   433f0:	cmp	r2, r3
   433f4:	blt	433dc <__assert_fail@plt+0x3092c>
   433f8:	b	42f0c <__assert_fail@plt+0x3045c>
   433fc:	mov	r0, r6
   43400:	bl	12810 <iswalnum@plt>
   43404:	mov	r1, #1
   43408:	cmp	r6, #95	; 0x5f
   4340c:	beq	42ec0 <__assert_fail@plt+0x30410>
   43410:	cmp	r0, #0
   43414:	beq	42ea4 <__assert_fail@plt+0x303f4>
   43418:	b	42ec0 <__assert_fail@plt+0x30410>
   4341c:	sub	r0, r8, r9
   43420:	str	r0, [r4, #28]
   43424:	cmp	lr, #0
   43428:	ble	43464 <__assert_fail@plt+0x309b4>
   4342c:	ldr	r1, [r4, #48]	; 0x30
   43430:	sub	r0, lr, #1
   43434:	cmp	r1, r0
   43438:	beq	4370c <__assert_fail@plt+0x30c5c>
   4343c:	ldr	r1, [r4, #80]	; 0x50
   43440:	cmp	r1, #2
   43444:	blt	43510 <__assert_fail@plt+0x30a60>
   43448:	ldr	r1, [r4, #8]
   4344c:	ldr	r6, [r1, r0, lsl #2]
   43450:	cmn	r6, #1
   43454:	bne	43558 <__assert_fail@plt+0x30aa8>
   43458:	sub	r0, r0, #1
   4345c:	cmn	r0, #1
   43460:	bne	4344c <__assert_fail@plt+0x3099c>
   43464:	ldr	r1, [r4, #60]	; 0x3c
   43468:	b	43580 <__assert_fail@plt+0x30ad0>
   4346c:	ldr	r3, [r4, #64]	; 0x40
   43470:	cmp	r3, #0
   43474:	beq	42f94 <__assert_fail@plt+0x304e4>
   43478:	ldr	r1, [r4, #36]	; 0x24
   4347c:	ldr	r0, [r4, #28]
   43480:	cmp	r1, r2
   43484:	movgt	r1, r2
   43488:	cmp	r0, r1
   4348c:	bge	434dc <__assert_fail@plt+0x30a2c>
   43490:	ldr	r7, [r4]
   43494:	add	r2, r0, r9
   43498:	ldr	r6, [r4, #4]
   4349c:	ldrb	r2, [r7, r2]
   434a0:	ldrb	r2, [r3, r2]
   434a4:	strb	r2, [r6, r0]
   434a8:	add	r0, r0, #1
   434ac:	cmp	r0, r1
   434b0:	bge	434dc <__assert_fail@plt+0x30a2c>
   434b4:	ldr	r7, [r4, #24]
   434b8:	ldm	r4, {r2, r3}
   434bc:	ldr	r6, [r4, #64]	; 0x40
   434c0:	add	r2, r2, r7
   434c4:	ldrb	r2, [r2, r0]
   434c8:	ldrb	r2, [r6, r2]
   434cc:	strb	r2, [r3, r0]
   434d0:	add	r0, r0, #1
   434d4:	cmp	r0, r1
   434d8:	blt	434b4 <__assert_fail@plt+0x30a04>
   434dc:	str	r0, [r4, #28]
   434e0:	str	r0, [r4, #32]
   434e4:	mov	r0, #0
   434e8:	str	r0, [r4, #40]	; 0x28
   434ec:	sub	sp, fp, #28
   434f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   434f4:	add	r5, r5, #1
   434f8:	str	r5, [r4, #28]
   434fc:	str	r5, [r4, #32]
   43500:	mov	r0, #0
   43504:	str	r0, [r4, #40]	; 0x28
   43508:	sub	sp, fp, #28
   4350c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43510:	ldr	r1, [r4, #4]
   43514:	ldr	r2, [r4, #68]	; 0x44
   43518:	ldrb	r0, [r1, r0]
   4351c:	ubfx	r1, r0, #5, #3
   43520:	and	r3, r0, #31
   43524:	ldr	r2, [r2, r1, lsl #2]
   43528:	mov	r1, #1
   4352c:	tst	r2, r1, lsl r3
   43530:	bne	43580 <__assert_fail@plt+0x30ad0>
   43534:	mov	r1, #0
   43538:	cmp	r0, #10
   4353c:	beq	43570 <__assert_fail@plt+0x30ac0>
   43540:	b	43580 <__assert_fail@plt+0x30ad0>
   43544:	ldrb	r0, [r4, #77]	; 0x4d
   43548:	cmp	r0, #0
   4354c:	movwne	r0, #1
   43550:	lsl	r1, r0, #1
   43554:	b	43300 <__assert_fail@plt+0x30850>
   43558:	ldrb	r0, [r4, #78]	; 0x4e
   4355c:	cmp	r0, #0
   43560:	bne	437a4 <__assert_fail@plt+0x30cf4>
   43564:	mov	r1, #0
   43568:	cmp	r6, #10
   4356c:	bne	43580 <__assert_fail@plt+0x30ad0>
   43570:	ldrb	r0, [r4, #77]	; 0x4d
   43574:	cmp	r0, #0
   43578:	movwne	r0, #1
   4357c:	lsl	r1, r0, #1
   43580:	str	r1, [r4, #60]	; 0x3c
   43584:	mov	r0, #0
   43588:	ldr	r2, [r4, #28]
   4358c:	cmp	r2, #0
   43590:	bne	436c4 <__assert_fail@plt+0x30c14>
   43594:	str	r0, [r4, #32]
   43598:	b	42f0c <__assert_fail@plt+0x3045c>
   4359c:	mov	r2, #0
   435a0:	strb	r2, [r4, #76]	; 0x4c
   435a4:	sub	r2, r5, r9
   435a8:	ldr	r3, [r4, #44]	; 0x2c
   435ac:	ldr	r7, [r4, #52]	; 0x34
   435b0:	add	r3, r2, r3
   435b4:	add	r2, r2, r7
   435b8:	str	r3, [r4, #48]	; 0x30
   435bc:	str	r2, [r4, #56]	; 0x38
   435c0:	b	42fc4 <__assert_fail@plt+0x30514>
   435c4:	and	r0, r6, #2
   435c8:	eor	r1, r0, #10
   435cc:	str	r1, [r4, #60]	; 0x3c
   435d0:	cmp	r7, r5
   435d4:	ldr	r2, [r4, #28]
   435d8:	beq	43370 <__assert_fail@plt+0x308c0>
   435dc:	mov	r0, #0
   435e0:	strb	r0, [r4, #76]	; 0x4c
   435e4:	sub	r0, r5, r9
   435e8:	ldr	r1, [r4, #44]	; 0x2c
   435ec:	ldr	r3, [r4, #52]	; 0x34
   435f0:	add	r1, r0, r1
   435f4:	add	r0, r0, r3
   435f8:	str	r1, [r4, #48]	; 0x30
   435fc:	sub	r1, r7, #1
   43600:	str	r0, [r4, #56]	; 0x38
   43604:	add	r0, r1, #1
   43608:	cmp	r0, #1
   4360c:	blt	43624 <__assert_fail@plt+0x30b74>
   43610:	ldr	r3, [r4, #12]
   43614:	ldr	r3, [r3, r1, lsl #2]
   43618:	sub	r1, r1, #1
   4361c:	cmp	r3, r5
   43620:	beq	43604 <__assert_fail@plt+0x30b54>
   43624:	cmp	r0, r2
   43628:	bge	4364c <__assert_fail@plt+0x30b9c>
   4362c:	ldr	r1, [r4, #8]
   43630:	ldr	r3, [r1, r0, lsl #2]
   43634:	cmn	r3, #1
   43638:	bne	4364c <__assert_fail@plt+0x30b9c>
   4363c:	add	r0, r0, #1
   43640:	cmp	r2, r0
   43644:	bne	43630 <__assert_fail@plt+0x30b80>
   43648:	b	43654 <__assert_fail@plt+0x30ba4>
   4364c:	cmp	r0, r2
   43650:	bne	43664 <__assert_fail@plt+0x30bb4>
   43654:	mov	r0, #0
   43658:	str	r0, [r4, #28]
   4365c:	str	r0, [r4, #32]
   43660:	b	42f0c <__assert_fail@plt+0x3045c>
   43664:	ldr	r1, [r4, #12]
   43668:	ldr	r0, [r1, r0, lsl #2]
   4366c:	subs	r2, r0, r5
   43670:	str	r2, [r4, #28]
   43674:	beq	436b8 <__assert_fail@plt+0x30c08>
   43678:	cmp	r2, #1
   4367c:	blt	436a0 <__assert_fail@plt+0x30bf0>
   43680:	ldr	r0, [r4, #8]
   43684:	mov	r1, #0
   43688:	mvn	r3, #0
   4368c:	str	r3, [r0, r1, lsl #2]
   43690:	add	r1, r1, #1
   43694:	ldr	r2, [r4, #28]
   43698:	cmp	r1, r2
   4369c:	blt	4368c <__assert_fail@plt+0x30bdc>
   436a0:	ldr	r0, [r4, #4]
   436a4:	mov	r1, #255	; 0xff
   436a8:	bl	12834 <memset@plt>
   436ac:	ldr	r0, [r4, #28]
   436b0:	str	r0, [r4, #32]
   436b4:	b	42f0c <__assert_fail@plt+0x3045c>
   436b8:	mov	r0, #0
   436bc:	str	r0, [r4, #32]
   436c0:	b	42f0c <__assert_fail@plt+0x3045c>
   436c4:	cmp	r2, #1
   436c8:	blt	436ec <__assert_fail@plt+0x30c3c>
   436cc:	ldr	r0, [r4, #8]
   436d0:	mov	r1, #0
   436d4:	mvn	r3, #0
   436d8:	str	r3, [r0, r1, lsl #2]
   436dc:	add	r1, r1, #1
   436e0:	ldr	r2, [r4, #28]
   436e4:	cmp	r1, r2
   436e8:	blt	436d8 <__assert_fail@plt+0x30c28>
   436ec:	ldrb	r0, [r4, #75]	; 0x4b
   436f0:	cmp	r0, #0
   436f4:	beq	4375c <__assert_fail@plt+0x30cac>
   436f8:	ldr	r0, [r4, #4]
   436fc:	mov	r1, #255	; 0xff
   43700:	bl	12834 <memset@plt>
   43704:	ldr	r0, [r4, #28]
   43708:	b	43594 <__assert_fail@plt+0x30ae4>
   4370c:	and	r0, r6, #2
   43710:	eor	r1, r0, #10
   43714:	b	43580 <__assert_fail@plt+0x30ad0>
   43718:	mov	r0, r6
   4371c:	bl	12810 <iswalnum@plt>
   43720:	mov	r1, #1
   43724:	cmp	r6, #95	; 0x5f
   43728:	beq	43360 <__assert_fail@plt+0x308b0>
   4372c:	cmp	r0, #0
   43730:	beq	43344 <__assert_fail@plt+0x30894>
   43734:	b	43360 <__assert_fail@plt+0x308b0>
   43738:	mov	r0, r7
   4373c:	bl	12810 <iswalnum@plt>
   43740:	mov	r1, #1
   43744:	cmp	r7, #95	; 0x5f
   43748:	beq	43580 <__assert_fail@plt+0x30ad0>
   4374c:	cmp	r0, #0
   43750:	mov	r2, r7
   43754:	beq	43158 <__assert_fail@plt+0x306a8>
   43758:	b	43580 <__assert_fail@plt+0x30ad0>
   4375c:	mov	r0, r2
   43760:	str	r2, [r4, #32]
   43764:	b	42f0c <__assert_fail@plt+0x3045c>
   43768:	cmp	r2, #1
   4376c:	blt	437c4 <__assert_fail@plt+0x30d14>
   43770:	cmp	r2, #6
   43774:	mov	r1, r2
   43778:	movge	r1, #6
   4377c:	sub	ip, r1, #1
   43780:	add	r1, sp, #14
   43784:	ldrb	r3, [r7, ip]
   43788:	cmp	ip, #0
   4378c:	ldrb	r3, [r0, r3]
   43790:	strb	r3, [r1, ip]
   43794:	sub	r3, ip, #1
   43798:	mov	ip, r3
   4379c:	bgt	43784 <__assert_fail@plt+0x30cd4>
   437a0:	b	43040 <__assert_fail@plt+0x30590>
   437a4:	mov	r0, r6
   437a8:	bl	12810 <iswalnum@plt>
   437ac:	mov	r1, #1
   437b0:	cmp	r6, #95	; 0x5f
   437b4:	beq	43580 <__assert_fail@plt+0x30ad0>
   437b8:	cmp	r0, #0
   437bc:	beq	43564 <__assert_fail@plt+0x30ab4>
   437c0:	b	43580 <__assert_fail@plt+0x30ad0>
   437c4:	add	r1, sp, #14
   437c8:	b	43040 <__assert_fail@plt+0x30590>
   437cc:	push	{r4, r5, r6, sl, fp, lr}
   437d0:	add	fp, sp, #16
   437d4:	mov	r3, r2
   437d8:	ldr	r2, [r0, #88]	; 0x58
   437dc:	mov	r5, r1
   437e0:	mov	r4, r0
   437e4:	mov	r1, r3
   437e8:	bl	43a24 <__assert_fail@plt+0x30f74>
   437ec:	ldr	r1, [r5, #8]
   437f0:	cmp	r1, #1
   437f4:	blt	4396c <__assert_fail@plt+0x30ebc>
   437f8:	ldr	r3, [r5, #12]
   437fc:	ldr	r5, [r4, #84]	; 0x54
   43800:	movw	lr, #65280	; 0xff00
   43804:	and	ip, r0, #8
   43808:	and	r2, r0, #2
   4380c:	tst	r0, #1
   43810:	movt	lr, #3
   43814:	ldr	r5, [r5]
   43818:	bne	43874 <__assert_fail@plt+0x30dc4>
   4381c:	cmp	r2, #0
   43820:	bne	438cc <__assert_fail@plt+0x30e1c>
   43824:	mov	r2, #0
   43828:	b	43838 <__assert_fail@plt+0x30d88>
   4382c:	add	r2, r2, #1
   43830:	cmp	r2, r1
   43834:	bge	4396c <__assert_fail@plt+0x30ebc>
   43838:	ldr	r0, [r3, r2, lsl #2]
   4383c:	add	r4, r5, r0, lsl #3
   43840:	ldr	r4, [r4, #4]
   43844:	uxtb	r6, r4
   43848:	cmp	r6, #2
   4384c:	bne	4382c <__assert_fail@plt+0x30d7c>
   43850:	tst	r4, lr
   43854:	beq	43970 <__assert_fail@plt+0x30ec0>
   43858:	tst	r4, #9216	; 0x2400
   4385c:	bne	4382c <__assert_fail@plt+0x30d7c>
   43860:	cmp	ip, #0
   43864:	bne	43970 <__assert_fail@plt+0x30ec0>
   43868:	ands	r4, r4, #32768	; 0x8000
   4386c:	bne	4382c <__assert_fail@plt+0x30d7c>
   43870:	b	43970 <__assert_fail@plt+0x30ec0>
   43874:	cmp	r2, #0
   43878:	bne	4391c <__assert_fail@plt+0x30e6c>
   4387c:	mov	r2, #0
   43880:	b	43890 <__assert_fail@plt+0x30de0>
   43884:	add	r2, r2, #1
   43888:	cmp	r2, r1
   4388c:	bge	4396c <__assert_fail@plt+0x30ebc>
   43890:	ldr	r0, [r3, r2, lsl #2]
   43894:	add	r4, r5, r0, lsl #3
   43898:	ldr	r4, [r4, #4]
   4389c:	uxtb	r6, r4
   438a0:	cmp	r6, #2
   438a4:	bne	43884 <__assert_fail@plt+0x30dd4>
   438a8:	tst	r4, lr
   438ac:	beq	43970 <__assert_fail@plt+0x30ec0>
   438b0:	tst	r4, #10240	; 0x2800
   438b4:	bne	43884 <__assert_fail@plt+0x30dd4>
   438b8:	cmp	ip, #0
   438bc:	bne	43970 <__assert_fail@plt+0x30ec0>
   438c0:	ands	r4, r4, #32768	; 0x8000
   438c4:	bne	43884 <__assert_fail@plt+0x30dd4>
   438c8:	b	43970 <__assert_fail@plt+0x30ec0>
   438cc:	mov	r2, #0
   438d0:	b	438e0 <__assert_fail@plt+0x30e30>
   438d4:	add	r2, r2, #1
   438d8:	cmp	r2, r1
   438dc:	bge	4396c <__assert_fail@plt+0x30ebc>
   438e0:	ldr	r0, [r3, r2, lsl #2]
   438e4:	add	r4, r5, r0, lsl #3
   438e8:	ldr	r4, [r4, #4]
   438ec:	uxtb	r6, r4
   438f0:	cmp	r6, #2
   438f4:	bne	438d4 <__assert_fail@plt+0x30e24>
   438f8:	tst	r4, lr
   438fc:	beq	43970 <__assert_fail@plt+0x30ec0>
   43900:	tst	r4, #1024	; 0x400
   43904:	bne	438d4 <__assert_fail@plt+0x30e24>
   43908:	cmp	ip, #0
   4390c:	bne	43970 <__assert_fail@plt+0x30ec0>
   43910:	ands	r4, r4, #32768	; 0x8000
   43914:	bne	438d4 <__assert_fail@plt+0x30e24>
   43918:	b	43970 <__assert_fail@plt+0x30ec0>
   4391c:	mov	r2, #0
   43920:	b	43930 <__assert_fail@plt+0x30e80>
   43924:	add	r2, r2, #1
   43928:	cmp	r2, r1
   4392c:	bge	4396c <__assert_fail@plt+0x30ebc>
   43930:	ldr	r0, [r3, r2, lsl #2]
   43934:	add	r4, r5, r0, lsl #3
   43938:	ldr	r4, [r4, #4]
   4393c:	uxtb	r6, r4
   43940:	cmp	r6, #2
   43944:	bne	43924 <__assert_fail@plt+0x30e74>
   43948:	tst	r4, lr
   4394c:	beq	43970 <__assert_fail@plt+0x30ec0>
   43950:	tst	r4, #2048	; 0x800
   43954:	bne	43924 <__assert_fail@plt+0x30e74>
   43958:	cmp	ip, #0
   4395c:	bne	43970 <__assert_fail@plt+0x30ec0>
   43960:	ands	r4, r4, #32768	; 0x8000
   43964:	bne	43924 <__assert_fail@plt+0x30e74>
   43968:	b	43970 <__assert_fail@plt+0x30ec0>
   4396c:	mov	r0, #0
   43970:	pop	{r4, r5, r6, sl, fp, pc}
   43974:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   43978:	add	fp, sp, #24
   4397c:	mov	r8, r0
   43980:	ldr	r0, [r0, #124]	; 0x7c
   43984:	cmp	r0, #1
   43988:	blt	43a14 <__assert_fail@plt+0x30f64>
   4398c:	mov	r7, #0
   43990:	b	439ac <__assert_fail@plt+0x30efc>
   43994:	mov	r0, r5
   43998:	bl	32910 <__assert_fail@plt+0x1fe60>
   4399c:	ldr	r0, [r8, #124]	; 0x7c
   439a0:	add	r7, r7, #1
   439a4:	cmp	r7, r0
   439a8:	bge	43a14 <__assert_fail@plt+0x30f64>
   439ac:	ldr	r0, [r8, #132]	; 0x84
   439b0:	ldr	r5, [r0, r7, lsl #2]
   439b4:	ldr	r0, [r5, #16]
   439b8:	cmp	r0, #1
   439bc:	blt	439ec <__assert_fail@plt+0x30f3c>
   439c0:	mov	r4, #0
   439c4:	ldr	r0, [r5, #20]
   439c8:	ldr	r6, [r0, r4, lsl #2]
   439cc:	ldr	r0, [r6, #16]
   439d0:	bl	32910 <__assert_fail@plt+0x1fe60>
   439d4:	mov	r0, r6
   439d8:	bl	32910 <__assert_fail@plt+0x1fe60>
   439dc:	ldr	r0, [r5, #16]
   439e0:	add	r4, r4, #1
   439e4:	cmp	r4, r0
   439e8:	blt	439c4 <__assert_fail@plt+0x30f14>
   439ec:	ldr	r0, [r5, #20]
   439f0:	bl	32910 <__assert_fail@plt+0x1fe60>
   439f4:	ldr	r0, [r5, #8]
   439f8:	cmp	r0, #0
   439fc:	beq	43994 <__assert_fail@plt+0x30ee4>
   43a00:	ldr	r0, [r0, #8]
   43a04:	bl	32910 <__assert_fail@plt+0x1fe60>
   43a08:	ldr	r0, [r5, #8]
   43a0c:	bl	32910 <__assert_fail@plt+0x1fe60>
   43a10:	b	43994 <__assert_fail@plt+0x30ee4>
   43a14:	mov	r0, #0
   43a18:	str	r0, [r8, #108]	; 0x6c
   43a1c:	str	r0, [r8, #124]	; 0x7c
   43a20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   43a24:	push	{r4, r5, fp, lr}
   43a28:	add	fp, sp, #8
   43a2c:	mov	r4, r0
   43a30:	cmn	r1, #1
   43a34:	ble	43a6c <__assert_fail@plt+0x30fbc>
   43a38:	ldr	r0, [r4, #48]	; 0x30
   43a3c:	cmp	r0, r1
   43a40:	beq	43ad0 <__assert_fail@plt+0x31020>
   43a44:	ldr	r0, [r4, #80]	; 0x50
   43a48:	cmp	r0, #2
   43a4c:	blt	43a74 <__assert_fail@plt+0x30fc4>
   43a50:	ldr	r0, [r4, #8]
   43a54:	ldr	r5, [r0, r1, lsl #2]
   43a58:	cmn	r5, #1
   43a5c:	bne	43aa4 <__assert_fail@plt+0x30ff4>
   43a60:	sub	r1, r1, #1
   43a64:	cmn	r1, #1
   43a68:	bne	43a54 <__assert_fail@plt+0x30fa4>
   43a6c:	ldr	r0, [r4, #60]	; 0x3c
   43a70:	pop	{r4, r5, fp, pc}
   43a74:	ldr	r0, [r4, #4]
   43a78:	ldr	r2, [r4, #68]	; 0x44
   43a7c:	ldrb	r1, [r0, r1]
   43a80:	ubfx	r0, r1, #5, #3
   43a84:	and	r3, r1, #31
   43a88:	ldr	r2, [r2, r0, lsl #2]
   43a8c:	mov	r0, #1
   43a90:	tst	r2, r0, lsl r3
   43a94:	moveq	r0, #0
   43a98:	cmpeq	r1, #10
   43a9c:	bne	43acc <__assert_fail@plt+0x3101c>
   43aa0:	b	43abc <__assert_fail@plt+0x3100c>
   43aa4:	ldrb	r0, [r4, #78]	; 0x4e
   43aa8:	cmp	r0, #0
   43aac:	bne	43adc <__assert_fail@plt+0x3102c>
   43ab0:	mov	r0, #0
   43ab4:	cmp	r5, #10
   43ab8:	popne	{r4, r5, fp, pc}
   43abc:	ldrb	r0, [r4, #77]	; 0x4d
   43ac0:	cmp	r0, #0
   43ac4:	movwne	r0, #1
   43ac8:	lsl	r0, r0, #1
   43acc:	pop	{r4, r5, fp, pc}
   43ad0:	and	r0, r2, #2
   43ad4:	eor	r0, r0, #10
   43ad8:	pop	{r4, r5, fp, pc}
   43adc:	mov	r0, r5
   43ae0:	bl	12810 <iswalnum@plt>
   43ae4:	mov	r1, r0
   43ae8:	mov	r0, #1
   43aec:	cmp	r5, #95	; 0x5f
   43af0:	beq	43acc <__assert_fail@plt+0x3101c>
   43af4:	cmp	r1, #0
   43af8:	beq	43ab0 <__assert_fail@plt+0x31000>
   43afc:	b	43acc <__assert_fail@plt+0x3101c>
   43b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43b04:	add	fp, sp, #28
   43b08:	sub	sp, sp, #4
   43b0c:	mov	sl, r0
   43b10:	ldr	r0, [r1, #4]
   43b14:	cmp	r0, #1
   43b18:	blt	43be8 <__assert_fail@plt+0x31138>
   43b1c:	ldr	r7, [sl, #84]	; 0x54
   43b20:	mov	r8, r2
   43b24:	mov	r5, r1
   43b28:	mov	r4, #0
   43b2c:	b	43b3c <__assert_fail@plt+0x3108c>
   43b30:	add	r4, r4, #1
   43b34:	cmp	r4, r0
   43b38:	bge	43be8 <__assert_fail@plt+0x31138>
   43b3c:	ldr	r1, [r5, #8]
   43b40:	ldr	r6, [r1, r4, lsl #2]
   43b44:	ldr	r1, [r7]
   43b48:	add	r2, r1, r6, lsl #3
   43b4c:	ldrb	r2, [r2, #4]
   43b50:	cmp	r2, #8
   43b54:	bne	43b30 <__assert_fail@plt+0x31080>
   43b58:	ldr	r1, [r1, r6, lsl #3]
   43b5c:	cmp	r1, #31
   43b60:	bgt	43b30 <__assert_fail@plt+0x31080>
   43b64:	ldr	r2, [r7, #80]	; 0x50
   43b68:	mov	r3, #1
   43b6c:	tst	r2, r3, lsl r1
   43b70:	beq	43b30 <__assert_fail@plt+0x31080>
   43b74:	ldr	r0, [sl, #124]	; 0x7c
   43b78:	ldr	r9, [sl, #128]	; 0x80
   43b7c:	cmp	r0, r9
   43b80:	beq	43bc4 <__assert_fail@plt+0x31114>
   43b84:	mov	r0, #1
   43b88:	mov	r1, #24
   43b8c:	bl	322c0 <__assert_fail@plt+0x1f810>
   43b90:	ldr	r1, [sl, #124]	; 0x7c
   43b94:	ldr	r2, [sl, #132]	; 0x84
   43b98:	str	r0, [r2, r1, lsl #2]
   43b9c:	ldr	r0, [sl, #132]	; 0x84
   43ba0:	ldr	r0, [r0, r1, lsl #2]
   43ba4:	cmp	r0, #0
   43ba8:	beq	43bf4 <__assert_fail@plt+0x31144>
   43bac:	add	r1, r1, #1
   43bb0:	str	r6, [r0, #4]
   43bb4:	str	r1, [sl, #124]	; 0x7c
   43bb8:	str	r8, [r0]
   43bbc:	ldr	r0, [r5, #4]
   43bc0:	b	43b30 <__assert_fail@plt+0x31080>
   43bc4:	ldr	r0, [sl, #132]	; 0x84
   43bc8:	lsl	r1, r9, #3
   43bcc:	bl	36110 <__assert_fail@plt+0x23660>
   43bd0:	cmp	r0, #0
   43bd4:	beq	43bf4 <__assert_fail@plt+0x31144>
   43bd8:	lsl	r1, r9, #1
   43bdc:	str	r1, [sl, #128]	; 0x80
   43be0:	str	r0, [sl, #132]	; 0x84
   43be4:	b	43b84 <__assert_fail@plt+0x310d4>
   43be8:	mov	r0, #0
   43bec:	sub	sp, fp, #28
   43bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43bf4:	mov	r0, #12
   43bf8:	sub	sp, fp, #28
   43bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43c00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43c04:	add	fp, sp, #28
   43c08:	sub	sp, sp, #76	; 0x4c
   43c0c:	mov	ip, r0
   43c10:	ldr	r0, [r1, #4]
   43c14:	cmp	r0, #1
   43c18:	blt	44588 <__assert_fail@plt+0x31ad8>
   43c1c:	ldr	r2, [ip, #84]	; 0x54
   43c20:	ldr	r0, [ip, #40]	; 0x28
   43c24:	mov	r3, #0
   43c28:	str	ip, [sp, #44]	; 0x2c
   43c2c:	str	r1, [sp, #12]
   43c30:	str	r0, [sp, #52]	; 0x34
   43c34:	str	r2, [sp, #24]
   43c38:	b	43c58 <__assert_fail@plt+0x311a8>
   43c3c:	ldr	r1, [sp, #12]
   43c40:	ldr	r3, [sp, #16]
   43c44:	ldr	r2, [sp, #24]
   43c48:	ldr	r0, [r1, #4]
   43c4c:	add	r3, r3, #1
   43c50:	cmp	r3, r0
   43c54:	bge	44588 <__assert_fail@plt+0x31ad8>
   43c58:	ldr	r0, [r1, #8]
   43c5c:	str	r3, [sp, #16]
   43c60:	ldr	r3, [r0, r3, lsl #2]
   43c64:	ldr	r0, [r2]
   43c68:	add	r4, r0, r3, lsl #3
   43c6c:	mov	r1, r3
   43c70:	str	r3, [sp, #48]	; 0x30
   43c74:	ldr	r5, [r4, #4]!
   43c78:	uxtb	r0, r5
   43c7c:	cmp	r0, #4
   43c80:	bne	43c3c <__assert_fail@plt+0x3118c>
   43c84:	movw	r0, #65280	; 0xff00
   43c88:	movt	r0, #3
   43c8c:	tst	r5, r0
   43c90:	beq	43da0 <__assert_fail@plt+0x312f0>
   43c94:	ldr	r1, [sp, #52]	; 0x34
   43c98:	cmn	r1, #1
   43c9c:	ble	43cd8 <__assert_fail@plt+0x31228>
   43ca0:	ldr	r0, [ip, #48]	; 0x30
   43ca4:	cmp	r0, r1
   43ca8:	beq	4452c <__assert_fail@plt+0x31a7c>
   43cac:	ldr	r0, [ip, #80]	; 0x50
   43cb0:	cmp	r0, #2
   43cb4:	blt	43cf8 <__assert_fail@plt+0x31248>
   43cb8:	ldr	r0, [ip, #8]
   43cbc:	ldr	r1, [sp, #52]	; 0x34
   43cc0:	ldr	r6, [r0, r1, lsl #2]
   43cc4:	cmn	r6, #1
   43cc8:	bne	43d34 <__assert_fail@plt+0x31284>
   43ccc:	sub	r1, r1, #1
   43cd0:	cmn	r1, #1
   43cd4:	bne	43cc0 <__assert_fail@plt+0x31210>
   43cd8:	ldr	r1, [ip, #60]	; 0x3c
   43cdc:	and	r0, r1, #1
   43ce0:	tst	r5, #1024	; 0x400
   43ce4:	eor	r2, r0, #1
   43ce8:	beq	43d6c <__assert_fail@plt+0x312bc>
   43cec:	cmp	r0, #0
   43cf0:	beq	43c3c <__assert_fail@plt+0x3118c>
   43cf4:	b	43d6c <__assert_fail@plt+0x312bc>
   43cf8:	ldr	r0, [ip, #4]
   43cfc:	ldr	r2, [sp, #52]	; 0x34
   43d00:	ldr	r1, [ip, #68]	; 0x44
   43d04:	ldrb	r0, [r0, r2]
   43d08:	ubfx	r2, r0, #5, #3
   43d0c:	and	r7, r0, #31
   43d10:	ldr	r3, [r1, r2, lsl #2]
   43d14:	mov	r1, #1
   43d18:	mov	r2, #0
   43d1c:	tst	r3, r1, lsl r7
   43d20:	bne	43d6c <__assert_fail@plt+0x312bc>
   43d24:	mov	r1, #0
   43d28:	cmp	r0, #10
   43d2c:	beq	43d4c <__assert_fail@plt+0x3129c>
   43d30:	b	43d5c <__assert_fail@plt+0x312ac>
   43d34:	ldrb	r0, [ip, #78]	; 0x4e
   43d38:	cmp	r0, #0
   43d3c:	bne	4454c <__assert_fail@plt+0x31a9c>
   43d40:	mov	r1, #0
   43d44:	cmp	r6, #10
   43d48:	bne	43d5c <__assert_fail@plt+0x312ac>
   43d4c:	ldrb	r0, [ip, #77]	; 0x4d
   43d50:	cmp	r0, #0
   43d54:	movwne	r0, #1
   43d58:	lsl	r1, r0, #1
   43d5c:	and	r0, r1, #1
   43d60:	tst	r5, #1024	; 0x400
   43d64:	eor	r2, r0, #1
   43d68:	bne	43cec <__assert_fail@plt+0x3123c>
   43d6c:	ldr	r0, [r4]
   43d70:	cmp	r2, #0
   43d74:	bne	43d80 <__assert_fail@plt+0x312d0>
   43d78:	ands	r2, r0, #2048	; 0x800
   43d7c:	bne	43c3c <__assert_fail@plt+0x3118c>
   43d80:	tst	r1, #2
   43d84:	bne	43d90 <__assert_fail@plt+0x312e0>
   43d88:	ands	r2, r0, #8192	; 0x2000
   43d8c:	bne	43c3c <__assert_fail@plt+0x3118c>
   43d90:	tst	r1, #8
   43d94:	bne	43da0 <__assert_fail@plt+0x312f0>
   43d98:	ands	r0, r0, #32768	; 0x8000
   43d9c:	bne	43c3c <__assert_fail@plt+0x3118c>
   43da0:	ldr	r2, [ip, #108]	; 0x6c
   43da4:	ldr	r0, [ip, #84]	; 0x54
   43da8:	ldr	r9, [ip, #4]
   43dac:	cmp	r2, #1
   43db0:	str	r0, [sp, #36]	; 0x24
   43db4:	str	r2, [sp, #20]
   43db8:	blt	43e4c <__assert_fail@plt+0x3139c>
   43dbc:	ldr	r4, [sp, #52]	; 0x34
   43dc0:	ldr	r1, [ip, #116]	; 0x74
   43dc4:	mov	r0, #0
   43dc8:	mov	r5, #1
   43dcc:	mov	lr, r4
   43dd0:	add	r3, r2, r0
   43dd4:	add	r3, r3, r3, lsr #31
   43dd8:	asr	r7, r3, #1
   43ddc:	add	r6, r7, r7, lsl #1
   43de0:	add	r6, r1, r6, lsl #3
   43de4:	ldr	r6, [r6, #4]
   43de8:	cmp	r6, lr
   43dec:	addlt	r0, r5, r3, asr #1
   43df0:	movge	r2, r7
   43df4:	cmp	r0, r2
   43df8:	blt	43dd0 <__assert_fail@plt+0x31320>
   43dfc:	ldr	r1, [sp, #20]
   43e00:	cmp	r0, r1
   43e04:	bge	43e64 <__assert_fail@plt+0x313b4>
   43e08:	cmn	r0, #1
   43e0c:	beq	43e64 <__assert_fail@plt+0x313b4>
   43e10:	ldr	r1, [ip, #116]	; 0x74
   43e14:	add	r0, r0, r0, lsl #1
   43e18:	add	r0, r1, r0, lsl #3
   43e1c:	ldr	r1, [r0, #4]
   43e20:	cmp	r1, lr
   43e24:	bne	43e64 <__assert_fail@plt+0x313b4>
   43e28:	ldr	r1, [r0]
   43e2c:	ldr	r2, [sp, #48]	; 0x30
   43e30:	cmp	r1, r2
   43e34:	beq	4426c <__assert_fail@plt+0x317bc>
   43e38:	ldrb	r1, [r0, #20]
   43e3c:	add	r0, r0, #24
   43e40:	cmp	r1, #0
   43e44:	bne	43e28 <__assert_fail@plt+0x31378>
   43e48:	b	43e64 <__assert_fail@plt+0x313b4>
   43e4c:	ldr	r4, [sp, #52]	; 0x34
   43e50:	mov	r0, #0
   43e54:	mov	lr, r4
   43e58:	ldr	r1, [sp, #20]
   43e5c:	cmp	r0, r1
   43e60:	blt	43e08 <__assert_fail@plt+0x31358>
   43e64:	ldr	r0, [ip, #124]	; 0x7c
   43e68:	cmp	r0, #1
   43e6c:	ldr	r0, [sp, #20]
   43e70:	blt	44270 <__assert_fail@plt+0x317c0>
   43e74:	ldr	r0, [sp, #36]	; 0x24
   43e78:	ldr	r1, [sp, #48]	; 0x30
   43e7c:	mov	r3, #0
   43e80:	ldr	r0, [r0]
   43e84:	ldr	r2, [r0, r1, lsl #3]
   43e88:	str	r2, [sp, #32]
   43e8c:	ldr	r1, [ip, #132]	; 0x84
   43e90:	str	r3, [sp, #28]
   43e94:	ldr	r6, [r1, r3, lsl #2]
   43e98:	ldr	r1, [r6, #4]
   43e9c:	ldr	r0, [r0, r1, lsl #3]
   43ea0:	cmp	r0, r2
   43ea4:	bne	44240 <__assert_fail@plt+0x31790>
   43ea8:	ldr	r0, [r6, #16]
   43eac:	ldr	r1, [r6]
   43eb0:	mov	r8, #0
   43eb4:	mov	r7, lr
   43eb8:	str	r6, [sp, #40]	; 0x28
   43ebc:	cmp	r0, #1
   43ec0:	blt	43ff8 <__assert_fail@plt+0x31548>
   43ec4:	mov	r5, r1
   43ec8:	ldr	r1, [r6, #20]
   43ecc:	ldr	r4, [r1, r8, lsl #2]
   43ed0:	ldr	r1, [r4, #4]
   43ed4:	sub	sl, r1, r5
   43ed8:	str	r1, [fp, #-48]	; 0xffffffd0
   43edc:	cmp	sl, #1
   43ee0:	blt	43f14 <__assert_fail@plt+0x31464>
   43ee4:	ldr	r1, [ip, #28]
   43ee8:	add	r3, sl, r7
   43eec:	cmp	r3, r1
   43ef0:	bgt	43f68 <__assert_fail@plt+0x314b8>
   43ef4:	add	r0, r9, r7
   43ef8:	add	r1, r9, r5
   43efc:	mov	r2, sl
   43f00:	bl	127a4 <bcmp@plt>
   43f04:	ldr	ip, [sp, #44]	; 0x2c
   43f08:	ldr	lr, [sp, #52]	; 0x34
   43f0c:	cmp	r0, #0
   43f10:	bne	43ff0 <__assert_fail@plt+0x31540>
   43f14:	ldr	r3, [sp, #48]	; 0x30
   43f18:	mov	r2, r4
   43f1c:	mov	r0, ip
   43f20:	mov	r1, r6
   43f24:	str	lr, [sp]
   43f28:	mov	r4, ip
   43f2c:	bl	44ca8 <__assert_fail@plt+0x321f8>
   43f30:	cmp	r0, #1
   43f34:	bhi	4459c <__assert_fail@plt+0x31aec>
   43f38:	ldr	r1, [fp, #-48]	; 0xffffffd0
   43f3c:	ldr	r0, [r6, #16]
   43f40:	ldr	r9, [r4, #4]
   43f44:	mov	ip, r4
   43f48:	ldr	r4, [sp, #52]	; 0x34
   43f4c:	add	r8, r8, #1
   43f50:	add	r7, sl, r7
   43f54:	cmp	r8, r0
   43f58:	mov	r5, r1
   43f5c:	mov	lr, r4
   43f60:	blt	43ec8 <__assert_fail@plt+0x31418>
   43f64:	b	43ff8 <__assert_fail@plt+0x31548>
   43f68:	ldr	r2, [ip, #48]	; 0x30
   43f6c:	cmp	r3, r2
   43f70:	bgt	44234 <__assert_fail@plt+0x31784>
   43f74:	ldr	r0, [ip, #36]	; 0x24
   43f78:	ldr	r6, [ip, #104]	; 0x68
   43f7c:	cmp	r0, r3
   43f80:	cmple	r0, r2
   43f84:	blt	43f94 <__assert_fail@plt+0x314e4>
   43f88:	cmp	r1, r3
   43f8c:	cmple	r1, r2
   43f90:	bge	43fb4 <__assert_fail@plt+0x31504>
   43f94:	add	r1, r3, #1
   43f98:	mov	r0, ip
   43f9c:	mov	r9, r3
   43fa0:	bl	445d4 <__assert_fail@plt+0x31b24>
   43fa4:	ldr	ip, [sp, #44]	; 0x2c
   43fa8:	mov	r3, r9
   43fac:	cmp	r0, #0
   43fb0:	bne	4459c <__assert_fail@plt+0x31aec>
   43fb4:	cmp	r3, r6
   43fb8:	ble	43fe4 <__assert_fail@plt+0x31534>
   43fbc:	sub	r0, r3, r6
   43fc0:	mov	r1, #0
   43fc4:	lsl	r2, r0, #2
   43fc8:	ldr	r0, [ip, #100]	; 0x64
   43fcc:	add	r0, r0, r6, lsl #2
   43fd0:	mov	r6, r3
   43fd4:	add	r0, r0, #4
   43fd8:	bl	12834 <memset@plt>
   43fdc:	ldr	ip, [sp, #44]	; 0x2c
   43fe0:	str	r6, [ip, #104]	; 0x68
   43fe4:	ldr	r9, [ip, #4]
   43fe8:	ldr	r6, [sp, #40]	; 0x28
   43fec:	b	43ef4 <__assert_fail@plt+0x31444>
   43ff0:	ldr	r0, [r6, #16]
   43ff4:	mov	r1, r5
   43ff8:	cmp	r8, r0
   43ffc:	blt	44240 <__assert_fail@plt+0x31790>
   44000:	cmp	r8, #0
   44004:	addne	r1, r1, #1
   44008:	cmp	r1, lr
   4400c:	ble	44028 <__assert_fail@plt+0x31578>
   44010:	b	44240 <__assert_fail@plt+0x31790>
   44014:	ldr	r6, [sp, #40]	; 0x28
   44018:	add	r1, sl, #1
   4401c:	cmp	sl, lr
   44020:	mov	r9, r8
   44024:	bge	44240 <__assert_fail@plt+0x31790>
   44028:	ldr	r0, [r6]
   4402c:	mov	sl, r1
   44030:	cmp	r1, r0
   44034:	ble	44060 <__assert_fail@plt+0x315b0>
   44038:	ldr	r0, [ip, #28]
   4403c:	cmp	r7, r0
   44040:	bge	441c4 <__assert_fail@plt+0x31714>
   44044:	add	r5, r7, #1
   44048:	add	r1, sl, r9
   4404c:	ldrb	r0, [r9, r7]
   44050:	ldrb	r1, [r1, #-1]
   44054:	cmp	r0, r1
   44058:	beq	44064 <__assert_fail@plt+0x315b4>
   4405c:	b	44240 <__assert_fail@plt+0x31790>
   44060:	mov	r5, r7
   44064:	ldr	r0, [ip, #100]	; 0x64
   44068:	mov	r8, r9
   4406c:	mov	r7, r5
   44070:	ldr	r2, [r0, sl, lsl #2]
   44074:	cmp	r2, #0
   44078:	beq	44014 <__assert_fail@plt+0x31564>
   4407c:	ldr	r0, [r2, #8]
   44080:	cmp	r0, #1
   44084:	blt	44014 <__assert_fail@plt+0x31564>
   44088:	ldr	r1, [sp, #36]	; 0x24
   4408c:	ldr	r2, [r2, #12]
   44090:	ldr	r4, [sp, #32]
   44094:	ldr	r1, [r1]
   44098:	b	440a8 <__assert_fail@plt+0x315f8>
   4409c:	add	r2, r2, #4
   440a0:	subs	r0, r0, #1
   440a4:	beq	44014 <__assert_fail@plt+0x31564>
   440a8:	ldr	r5, [r2]
   440ac:	add	r3, r1, r5, lsl #3
   440b0:	ldrb	r3, [r3, #4]
   440b4:	cmp	r3, #9
   440b8:	bne	4409c <__assert_fail@plt+0x315ec>
   440bc:	ldr	r3, [r1, r5, lsl #3]
   440c0:	cmp	r3, r4
   440c4:	bne	4409c <__assert_fail@plt+0x315ec>
   440c8:	cmn	r5, #1
   440cc:	beq	44014 <__assert_fail@plt+0x31564>
   440d0:	ldr	r1, [r6, #8]
   440d4:	mov	r4, lr
   440d8:	str	r7, [fp, #-48]	; 0xffffffd0
   440dc:	cmp	r1, #0
   440e0:	bne	44110 <__assert_fail@plt+0x31660>
   440e4:	ldr	r0, [r6]
   440e8:	mov	r9, #12
   440ec:	sub	r0, sl, r0
   440f0:	add	r1, r0, #1
   440f4:	mov	r0, #12
   440f8:	bl	322c0 <__assert_fail@plt+0x1f810>
   440fc:	ldr	ip, [sp, #44]	; 0x2c
   44100:	mov	r1, r0
   44104:	cmp	r0, #0
   44108:	str	r0, [r6, #8]
   4410c:	beq	4458c <__assert_fail@plt+0x31adc>
   44110:	ldr	r3, [r6]
   44114:	ldr	r2, [r6, #4]
   44118:	mov	r0, #9
   4411c:	stm	sp, {r5, sl}
   44120:	str	r0, [sp, #8]
   44124:	mov	r0, ip
   44128:	bl	44e80 <__assert_fail@plt+0x323d0>
   4412c:	ldr	ip, [sp, #44]	; 0x2c
   44130:	ldr	r7, [fp, #-48]	; 0xffffffd0
   44134:	cmp	r0, #1
   44138:	mov	lr, r4
   4413c:	beq	44014 <__assert_fail@plt+0x31564>
   44140:	mov	r9, r0
   44144:	cmp	r0, #0
   44148:	bne	4458c <__assert_fail@plt+0x31adc>
   4414c:	ldr	r7, [sp, #40]	; 0x28
   44150:	ldr	r1, [r7, #12]
   44154:	ldr	r0, [r7, #16]
   44158:	cmp	r0, r1
   4415c:	beq	4420c <__assert_fail@plt+0x3175c>
   44160:	mov	r0, #1
   44164:	mov	r1, #20
   44168:	bl	322c0 <__assert_fail@plt+0x1f810>
   4416c:	cmp	r0, #0
   44170:	beq	445bc <__assert_fail@plt+0x31b0c>
   44174:	mov	r2, r0
   44178:	ldr	r0, [r7, #16]
   4417c:	ldr	r1, [r7, #20]
   44180:	ldr	r3, [sp, #48]	; 0x30
   44184:	str	r2, [r1, r0, lsl #2]
   44188:	stm	r2, {r5, sl}
   4418c:	ldr	r5, [sp, #44]	; 0x2c
   44190:	add	r0, r0, #1
   44194:	mov	r1, r7
   44198:	str	r0, [r7, #16]
   4419c:	str	r4, [sp]
   441a0:	mov	r0, r5
   441a4:	bl	44ca8 <__assert_fail@plt+0x321f8>
   441a8:	cmp	r0, #1
   441ac:	bhi	4459c <__assert_fail@plt+0x31aec>
   441b0:	ldr	r8, [r5, #4]
   441b4:	ldr	r7, [fp, #-48]	; 0xffffffd0
   441b8:	mov	ip, r5
   441bc:	mov	lr, r4
   441c0:	b	44014 <__assert_fail@plt+0x31564>
   441c4:	ldr	r0, [ip, #48]	; 0x30
   441c8:	cmp	r7, r0
   441cc:	bge	44240 <__assert_fail@plt+0x31790>
   441d0:	add	r5, r7, #1
   441d4:	mov	r0, ip
   441d8:	mov	r8, r7
   441dc:	mov	r4, ip
   441e0:	mov	r1, r5
   441e4:	bl	445d4 <__assert_fail@plt+0x31b24>
   441e8:	cmp	r0, #0
   441ec:	bne	4459c <__assert_fail@plt+0x31aec>
   441f0:	ldr	r9, [r4, #4]
   441f4:	mov	ip, r4
   441f8:	ldr	r4, [sp, #52]	; 0x34
   441fc:	ldr	r6, [sp, #40]	; 0x28
   44200:	mov	r7, r8
   44204:	mov	lr, r4
   44208:	b	44048 <__assert_fail@plt+0x31598>
   4420c:	mov	r1, #1
   44210:	orr	r6, r1, r0, lsl #1
   44214:	ldr	r0, [r7, #20]
   44218:	lsl	r1, r6, #2
   4421c:	bl	36110 <__assert_fail@plt+0x23660>
   44220:	cmp	r0, #0
   44224:	beq	445bc <__assert_fail@plt+0x31b0c>
   44228:	str	r6, [r7, #12]
   4422c:	str	r0, [r7, #20]
   44230:	b	44160 <__assert_fail@plt+0x316b0>
   44234:	mov	r1, r5
   44238:	cmp	r8, r0
   4423c:	bge	44000 <__assert_fail@plt+0x31550>
   44240:	ldr	r3, [sp, #28]
   44244:	ldr	r0, [ip, #124]	; 0x7c
   44248:	add	r3, r3, #1
   4424c:	cmp	r3, r0
   44250:	bge	44264 <__assert_fail@plt+0x317b4>
   44254:	ldr	r0, [sp, #36]	; 0x24
   44258:	ldr	r2, [sp, #32]
   4425c:	ldr	r0, [r0]
   44260:	b	43e8c <__assert_fail@plt+0x313dc>
   44264:	ldr	r0, [ip, #108]	; 0x6c
   44268:	b	44270 <__assert_fail@plt+0x317c0>
   4426c:	ldr	r0, [sp, #20]
   44270:	ldr	r7, [sp, #20]
   44274:	mov	r1, #0
   44278:	str	r1, [fp, #-32]	; 0xffffffe0
   4427c:	cmp	r7, r0
   44280:	blt	44298 <__assert_fail@plt+0x317e8>
   44284:	b	43c3c <__assert_fail@plt+0x3118c>
   44288:	ldr	r0, [ip, #108]	; 0x6c
   4428c:	add	r7, r7, #1
   44290:	cmp	r7, r0
   44294:	bge	43c3c <__assert_fail@plt+0x3118c>
   44298:	ldr	r0, [ip, #116]	; 0x74
   4429c:	add	r1, r7, r7, lsl #1
   442a0:	ldr	r3, [sp, #48]	; 0x30
   442a4:	ldr	r2, [r0, r1, lsl #3]
   442a8:	cmp	r2, r3
   442ac:	bne	44288 <__assert_fail@plt+0x317d8>
   442b0:	add	r0, r0, r1, lsl #3
   442b4:	ldr	r2, [sp, #52]	; 0x34
   442b8:	ldr	r1, [r0, #4]
   442bc:	cmp	r1, r2
   442c0:	bne	44288 <__assert_fail@plt+0x317d8>
   442c4:	str	r7, [sp, #20]
   442c8:	ldr	r4, [r0, #8]
   442cc:	ldr	r7, [r0, #12]
   442d0:	ldr	r0, [sp, #24]
   442d4:	ldr	r8, [r0, #24]
   442d8:	cmp	r7, r4
   442dc:	bne	442f8 <__assert_fail@plt+0x31848>
   442e0:	ldr	r1, [sp, #48]	; 0x30
   442e4:	ldr	r0, [r0, #20]
   442e8:	add	r1, r1, r1, lsl #1
   442ec:	add	r0, r0, r1, lsl #2
   442f0:	ldr	r0, [r0, #8]
   442f4:	b	44304 <__assert_fail@plt+0x31854>
   442f8:	ldr	r0, [r0, #12]
   442fc:	ldr	r1, [sp, #48]	; 0x30
   44300:	add	r0, r0, r1, lsl #2
   44304:	ldr	r9, [r0]
   44308:	ldr	r0, [sp, #52]	; 0x34
   4430c:	add	r0, r7, r0
   44310:	sub	r5, r0, r4
   44314:	cmp	r5, #0
   44318:	ble	44354 <__assert_fail@plt+0x318a4>
   4431c:	ldr	r1, [ip, #48]	; 0x30
   44320:	sub	r0, r5, #1
   44324:	cmp	r1, r0
   44328:	beq	444f0 <__assert_fail@plt+0x31a40>
   4432c:	ldr	r1, [ip, #80]	; 0x50
   44330:	cmp	r1, #2
   44334:	blt	4435c <__assert_fail@plt+0x318ac>
   44338:	ldr	r1, [ip, #8]
   4433c:	ldr	r6, [r1, r0, lsl #2]
   44340:	cmn	r6, #1
   44344:	bne	4438c <__assert_fail@plt+0x318dc>
   44348:	sub	r0, r0, #1
   4434c:	cmn	r0, #1
   44350:	bne	4433c <__assert_fail@plt+0x3188c>
   44354:	ldr	sl, [ip, #60]	; 0x3c
   44358:	b	443b4 <__assert_fail@plt+0x31904>
   4435c:	ldr	r1, [ip, #4]
   44360:	ldr	r2, [ip, #68]	; 0x44
   44364:	mov	sl, #1
   44368:	ldrb	r0, [r1, r0]
   4436c:	ubfx	r1, r0, #5, #3
   44370:	ldr	r1, [r2, r1, lsl #2]
   44374:	and	r2, r0, #31
   44378:	tst	r1, sl, lsl r2
   4437c:	moveq	sl, #0
   44380:	cmpeq	r0, #10
   44384:	bne	443b4 <__assert_fail@plt+0x31904>
   44388:	b	443a4 <__assert_fail@plt+0x318f4>
   4438c:	ldrb	r0, [ip, #78]	; 0x4e
   44390:	cmp	r0, #0
   44394:	bne	44500 <__assert_fail@plt+0x31a50>
   44398:	mov	sl, #0
   4439c:	cmp	r6, #10
   443a0:	bne	443b4 <__assert_fail@plt+0x31904>
   443a4:	ldrb	r0, [ip, #77]	; 0x4d
   443a8:	cmp	r0, #0
   443ac:	movwne	r0, #1
   443b0:	lsl	sl, r0, #1
   443b4:	ldr	r0, [ip, #100]	; 0x64
   443b8:	ldr	r2, [sp, #52]	; 0x34
   443bc:	add	r1, r9, r9, lsl #1
   443c0:	ldr	r2, [r0, r2, lsl #2]
   443c4:	ldr	r0, [r0, r5, lsl #2]
   443c8:	cmp	r2, #0
   443cc:	beq	443d8 <__assert_fail@plt+0x31928>
   443d0:	ldr	r2, [r2, #8]
   443d4:	b	443dc <__assert_fail@plt+0x3192c>
   443d8:	mov	r2, #0
   443dc:	add	r8, r8, r1, lsl #2
   443e0:	sub	r6, fp, #44	; 0x2c
   443e4:	cmp	r0, #0
   443e8:	str	r2, [fp, #-48]	; 0xffffffd0
   443ec:	beq	44458 <__assert_fail@plt+0x319a8>
   443f0:	ldr	r1, [r0, #40]	; 0x28
   443f4:	mov	r0, r6
   443f8:	mov	r2, r8
   443fc:	bl	44a18 <__assert_fail@plt+0x31f68>
   44400:	cmp	r0, #0
   44404:	str	r0, [fp, #-32]	; 0xffffffe0
   44408:	bne	445a4 <__assert_fail@plt+0x31af4>
   4440c:	ldr	r1, [sp, #24]
   44410:	sub	r0, fp, #32
   44414:	mov	r2, r6
   44418:	mov	r3, sl
   4441c:	bl	421c8 <__assert_fail@plt+0x2f718>
   44420:	ldr	r6, [sp, #44]	; 0x2c
   44424:	ldr	r1, [r6, #100]	; 0x64
   44428:	str	r0, [r1, r5, lsl #2]
   4442c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   44430:	bl	32910 <__assert_fail@plt+0x1fe60>
   44434:	ldr	r0, [r6, #100]	; 0x64
   44438:	mov	ip, r6
   4443c:	ldr	r1, [r0, r5, lsl #2]
   44440:	cmp	r1, #0
   44444:	bne	44488 <__assert_fail@plt+0x319d8>
   44448:	ldr	r9, [fp, #-32]	; 0xffffffe0
   4444c:	cmp	r9, #0
   44450:	beq	44488 <__assert_fail@plt+0x319d8>
   44454:	b	44590 <__assert_fail@plt+0x31ae0>
   44458:	ldr	r1, [sp, #24]
   4445c:	sub	r0, fp, #32
   44460:	mov	r2, r8
   44464:	mov	r3, sl
   44468:	bl	421c8 <__assert_fail@plt+0x2f718>
   4446c:	ldr	ip, [sp, #44]	; 0x2c
   44470:	ldr	r1, [ip, #100]	; 0x64
   44474:	str	r0, [r1, r5, lsl #2]
   44478:	ldr	r0, [ip, #100]	; 0x64
   4447c:	ldr	r1, [r0, r5, lsl #2]
   44480:	cmp	r1, #0
   44484:	beq	44448 <__assert_fail@plt+0x31998>
   44488:	cmp	r7, r4
   4448c:	ldr	r7, [sp, #20]
   44490:	bne	44288 <__assert_fail@plt+0x317d8>
   44494:	ldr	r1, [sp, #52]	; 0x34
   44498:	ldr	r0, [r0, r1, lsl #2]
   4449c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   444a0:	ldr	r0, [r0, #8]
   444a4:	cmp	r0, r1
   444a8:	ble	44288 <__assert_fail@plt+0x317d8>
   444ac:	ldr	r2, [sp, #52]	; 0x34
   444b0:	mov	r0, ip
   444b4:	mov	r1, r8
   444b8:	mov	r4, ip
   444bc:	bl	43b00 <__assert_fail@plt+0x31050>
   444c0:	cmp	r0, #0
   444c4:	str	r0, [fp, #-32]	; 0xffffffe0
   444c8:	bne	445c4 <__assert_fail@plt+0x31b14>
   444cc:	mov	r0, r4
   444d0:	mov	r1, r8
   444d4:	bl	43c00 <__assert_fail@plt+0x31150>
   444d8:	ldr	r7, [sp, #20]
   444dc:	cmp	r0, #0
   444e0:	mov	ip, r4
   444e4:	str	r0, [fp, #-32]	; 0xffffffe0
   444e8:	beq	44288 <__assert_fail@plt+0x317d8>
   444ec:	b	445c4 <__assert_fail@plt+0x31b14>
   444f0:	ldr	r0, [ip, #88]	; 0x58
   444f4:	and	r0, r0, #2
   444f8:	eor	sl, r0, #10
   444fc:	b	443b4 <__assert_fail@plt+0x31904>
   44500:	mov	r0, r6
   44504:	bl	12810 <iswalnum@plt>
   44508:	mov	sl, #1
   4450c:	cmp	r6, #95	; 0x5f
   44510:	beq	44524 <__assert_fail@plt+0x31a74>
   44514:	ldr	ip, [sp, #44]	; 0x2c
   44518:	cmp	r0, #0
   4451c:	beq	44398 <__assert_fail@plt+0x318e8>
   44520:	b	443b4 <__assert_fail@plt+0x31904>
   44524:	ldr	ip, [sp, #44]	; 0x2c
   44528:	b	443b4 <__assert_fail@plt+0x31904>
   4452c:	ldr	r0, [ip, #88]	; 0x58
   44530:	and	r0, r0, #2
   44534:	eor	r1, r0, #10
   44538:	and	r0, r1, #1
   4453c:	tst	r5, #1024	; 0x400
   44540:	eor	r2, r0, #1
   44544:	bne	43cec <__assert_fail@plt+0x3123c>
   44548:	b	43d6c <__assert_fail@plt+0x312bc>
   4454c:	mov	r0, r6
   44550:	bl	12810 <iswalnum@plt>
   44554:	mov	r1, #1
   44558:	mov	r2, #0
   4455c:	cmp	r6, #95	; 0x5f
   44560:	beq	44574 <__assert_fail@plt+0x31ac4>
   44564:	ldr	ip, [sp, #44]	; 0x2c
   44568:	cmp	r0, #0
   4456c:	beq	43d40 <__assert_fail@plt+0x31290>
   44570:	b	43d6c <__assert_fail@plt+0x312bc>
   44574:	ldr	ip, [sp, #44]	; 0x2c
   44578:	ldr	r0, [r4]
   4457c:	cmp	r2, #0
   44580:	beq	43d78 <__assert_fail@plt+0x312c8>
   44584:	b	43d80 <__assert_fail@plt+0x312d0>
   44588:	mov	r9, #0
   4458c:	str	r9, [fp, #-32]	; 0xffffffe0
   44590:	mov	r0, r9
   44594:	sub	sp, fp, #28
   44598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4459c:	mov	r9, r0
   445a0:	b	4458c <__assert_fail@plt+0x31adc>
   445a4:	mov	r9, r0
   445a8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   445ac:	bl	32910 <__assert_fail@plt+0x1fe60>
   445b0:	mov	r0, r9
   445b4:	sub	sp, fp, #28
   445b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   445bc:	mov	r9, #12
   445c0:	b	4458c <__assert_fail@plt+0x31adc>
   445c4:	mov	r9, r0
   445c8:	mov	r0, r9
   445cc:	sub	sp, fp, #28
   445d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   445d4:	push	{r4, r5, r6, r7, fp, lr}
   445d8:	add	fp, sp, #16
   445dc:	mov	r4, r0
   445e0:	ldr	r0, [r0, #36]	; 0x24
   445e4:	mov	r5, #12
   445e8:	cmn	r0, #-536870910	; 0xe0000002
   445ec:	bhi	447d0 <__assert_fail@plt+0x31d20>
   445f0:	ldr	r6, [r4, #48]	; 0x30
   445f4:	ldr	r2, [r4, #80]	; 0x50
   445f8:	cmp	r6, r0, lsl #1
   445fc:	lslge	r6, r0, #1
   44600:	cmp	r6, r1
   44604:	movle	r6, r1
   44608:	cmp	r2, #2
   4460c:	blt	44654 <__assert_fail@plt+0x31ba4>
   44610:	cmn	r6, #-1073741823	; 0xc0000001
   44614:	bhi	447d0 <__assert_fail@plt+0x31d20>
   44618:	ldr	r0, [r4, #8]
   4461c:	lsl	r7, r6, #2
   44620:	mov	r1, r7
   44624:	bl	36110 <__assert_fail@plt+0x23660>
   44628:	cmp	r0, #0
   4462c:	beq	447d0 <__assert_fail@plt+0x31d20>
   44630:	str	r0, [r4, #8]
   44634:	ldr	r0, [r4, #12]
   44638:	cmp	r0, #0
   4463c:	beq	44654 <__assert_fail@plt+0x31ba4>
   44640:	mov	r1, r7
   44644:	bl	36110 <__assert_fail@plt+0x23660>
   44648:	cmp	r0, #0
   4464c:	beq	447d0 <__assert_fail@plt+0x31d20>
   44650:	str	r0, [r4, #12]
   44654:	ldrb	r0, [r4, #75]	; 0x4b
   44658:	cmp	r0, #0
   4465c:	beq	44678 <__assert_fail@plt+0x31bc8>
   44660:	ldr	r0, [r4, #4]
   44664:	mov	r1, r6
   44668:	bl	36110 <__assert_fail@plt+0x23660>
   4466c:	cmp	r0, #0
   44670:	beq	447d0 <__assert_fail@plt+0x31d20>
   44674:	str	r0, [r4, #4]
   44678:	str	r6, [r4, #36]	; 0x24
   4467c:	ldr	r0, [r4, #100]	; 0x64
   44680:	cmp	r0, #0
   44684:	beq	446a0 <__assert_fail@plt+0x31bf0>
   44688:	mov	r1, #4
   4468c:	add	r1, r1, r6, lsl #2
   44690:	bl	36110 <__assert_fail@plt+0x23660>
   44694:	cmp	r0, #0
   44698:	beq	447d0 <__assert_fail@plt+0x31d20>
   4469c:	str	r0, [r4, #100]	; 0x64
   446a0:	ldrb	r1, [r4, #72]	; 0x48
   446a4:	ldr	r0, [r4, #80]	; 0x50
   446a8:	cmp	r1, #0
   446ac:	beq	446cc <__assert_fail@plt+0x31c1c>
   446b0:	cmp	r0, #2
   446b4:	blt	446e0 <__assert_fail@plt+0x31c30>
   446b8:	mov	r0, r4
   446bc:	bl	3bc80 <__assert_fail@plt+0x291d0>
   446c0:	cmp	r0, #0
   446c4:	beq	447cc <__assert_fail@plt+0x31d1c>
   446c8:	pop	{r4, r5, r6, r7, fp, pc}
   446cc:	cmp	r0, #2
   446d0:	blt	44750 <__assert_fail@plt+0x31ca0>
   446d4:	mov	r0, r4
   446d8:	bl	3c5a0 <__assert_fail@plt+0x29af0>
   446dc:	b	447cc <__assert_fail@plt+0x31d1c>
   446e0:	ldr	r6, [r4, #36]	; 0x24
   446e4:	ldr	r0, [r4, #48]	; 0x30
   446e8:	ldr	r5, [r4, #28]
   446ec:	cmp	r6, r0
   446f0:	movgt	r6, r0
   446f4:	cmp	r5, r6
   446f8:	bge	44744 <__assert_fail@plt+0x31c94>
   446fc:	bl	12750 <__ctype_toupper_loc@plt>
   44700:	ldr	r1, [r4]
   44704:	ldr	r3, [r4, #24]
   44708:	ldr	r2, [r4, #64]	; 0x40
   4470c:	add	r1, r1, r3
   44710:	cmp	r2, #0
   44714:	ldrb	r1, [r1, r5]
   44718:	bne	4473c <__assert_fail@plt+0x31c8c>
   4471c:	ldr	r2, [r0]
   44720:	ldr	r1, [r2, r1, lsl #2]
   44724:	ldr	r2, [r4, #4]
   44728:	strb	r1, [r2, r5]
   4472c:	add	r5, r5, #1
   44730:	cmp	r5, r6
   44734:	blt	44700 <__assert_fail@plt+0x31c50>
   44738:	b	44744 <__assert_fail@plt+0x31c94>
   4473c:	ldrb	r1, [r2, r1]
   44740:	b	4471c <__assert_fail@plt+0x31c6c>
   44744:	str	r5, [r4, #28]
   44748:	str	r5, [r4, #32]
   4474c:	b	447cc <__assert_fail@plt+0x31d1c>
   44750:	ldr	r2, [r4, #64]	; 0x40
   44754:	cmp	r2, #0
   44758:	beq	447cc <__assert_fail@plt+0x31d1c>
   4475c:	ldr	r1, [r4, #36]	; 0x24
   44760:	ldr	r3, [r4, #48]	; 0x30
   44764:	ldr	r0, [r4, #28]
   44768:	cmp	r1, r3
   4476c:	movgt	r1, r3
   44770:	cmp	r0, r1
   44774:	bge	447c4 <__assert_fail@plt+0x31d14>
   44778:	ldr	r6, [r4, #24]
   4477c:	ldm	r4, {r3, r7}
   44780:	add	r6, r6, r0
   44784:	ldrb	r3, [r3, r6]
   44788:	ldrb	r2, [r2, r3]
   4478c:	strb	r2, [r7, r0]
   44790:	add	r0, r0, #1
   44794:	cmp	r0, r1
   44798:	bge	447c4 <__assert_fail@plt+0x31d14>
   4479c:	ldr	r7, [r4, #24]
   447a0:	ldm	r4, {r2, r3}
   447a4:	ldr	r6, [r4, #64]	; 0x40
   447a8:	add	r2, r2, r7
   447ac:	ldrb	r2, [r2, r0]
   447b0:	ldrb	r2, [r6, r2]
   447b4:	strb	r2, [r3, r0]
   447b8:	add	r0, r0, #1
   447bc:	cmp	r0, r1
   447c0:	blt	4479c <__assert_fail@plt+0x31cec>
   447c4:	str	r0, [r4, #28]
   447c8:	str	r0, [r4, #32]
   447cc:	mov	r5, #0
   447d0:	mov	r0, r5
   447d4:	pop	{r4, r5, r6, r7, fp, pc}
   447d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   447dc:	add	fp, sp, #24
   447e0:	sub	sp, sp, #16
   447e4:	mov	r9, r0
   447e8:	mov	r4, r1
   447ec:	ldr	r5, [r1, #40]	; 0x28
   447f0:	ldr	r7, [r1, #84]	; 0x54
   447f4:	ldr	r0, [r1, #100]	; 0x64
   447f8:	ldr	r1, [r1, #104]	; 0x68
   447fc:	mov	r6, r2
   44800:	cmp	r5, r1
   44804:	ble	44824 <__assert_fail@plt+0x31d74>
   44808:	str	r6, [r0, r5, lsl #2]
   4480c:	str	r5, [r4, #104]	; 0x68
   44810:	cmp	r6, #0
   44814:	ldrne	r0, [r7, #76]	; 0x4c
   44818:	cmpne	r0, #0
   4481c:	beq	44974 <__assert_fail@plt+0x31ec4>
   44820:	b	44980 <__assert_fail@plt+0x31ed0>
   44824:	ldr	r1, [r0, r5, lsl #2]
   44828:	cmp	r1, #0
   4482c:	beq	448a4 <__assert_fail@plt+0x31df4>
   44830:	ldr	r2, [r1, #40]	; 0x28
   44834:	cmp	r6, #0
   44838:	beq	448ec <__assert_fail@plt+0x31e3c>
   4483c:	ldr	r8, [r6, #40]	; 0x28
   44840:	mov	r0, sp
   44844:	mov	r1, r8
   44848:	bl	44a18 <__assert_fail@plt+0x31f68>
   4484c:	cmp	r0, #0
   44850:	str	r0, [r9]
   44854:	bne	449d8 <__assert_fail@plt+0x31f28>
   44858:	ldr	r0, [r4, #40]	; 0x28
   4485c:	cmp	r0, #0
   44860:	ble	4489c <__assert_fail@plt+0x31dec>
   44864:	ldr	r1, [r4, #48]	; 0x30
   44868:	sub	r0, r0, #1
   4486c:	cmp	r1, r0
   44870:	beq	449e8 <__assert_fail@plt+0x31f38>
   44874:	ldr	r1, [r4, #80]	; 0x50
   44878:	cmp	r1, #2
   4487c:	blt	448bc <__assert_fail@plt+0x31e0c>
   44880:	ldr	r1, [r4, #8]
   44884:	ldr	r6, [r1, r0, lsl #2]
   44888:	cmn	r6, #1
   4488c:	bne	44910 <__assert_fail@plt+0x31e60>
   44890:	sub	r0, r0, #1
   44894:	cmn	r0, #1
   44898:	bne	44884 <__assert_fail@plt+0x31dd4>
   4489c:	ldr	r3, [r4, #60]	; 0x3c
   448a0:	b	44938 <__assert_fail@plt+0x31e88>
   448a4:	str	r6, [r0, r5, lsl #2]
   448a8:	cmp	r6, #0
   448ac:	ldrne	r0, [r7, #76]	; 0x4c
   448b0:	cmpne	r0, #0
   448b4:	beq	44974 <__assert_fail@plt+0x31ec4>
   448b8:	b	44980 <__assert_fail@plt+0x31ed0>
   448bc:	ldr	r1, [r4, #4]
   448c0:	ldr	r2, [r4, #68]	; 0x44
   448c4:	mov	r3, #1
   448c8:	ldrb	r0, [r1, r0]
   448cc:	ubfx	r1, r0, #5, #3
   448d0:	ldr	r1, [r2, r1, lsl #2]
   448d4:	and	r2, r0, #31
   448d8:	tst	r1, r3, lsl r2
   448dc:	moveq	r3, #0
   448e0:	cmpeq	r0, #10
   448e4:	bne	44938 <__assert_fail@plt+0x31e88>
   448e8:	b	44928 <__assert_fail@plt+0x31e78>
   448ec:	vldr	d16, [r2]
   448f0:	ldr	r0, [r2, #8]
   448f4:	mov	r8, #0
   448f8:	str	r0, [sp, #8]
   448fc:	mov	r0, r5
   44900:	vstr	d16, [sp]
   44904:	cmp	r0, #0
   44908:	bgt	44864 <__assert_fail@plt+0x31db4>
   4490c:	b	4489c <__assert_fail@plt+0x31dec>
   44910:	ldrb	r0, [r4, #78]	; 0x4e
   44914:	cmp	r0, #0
   44918:	bne	449f8 <__assert_fail@plt+0x31f48>
   4491c:	mov	r3, #0
   44920:	cmp	r6, #10
   44924:	bne	44938 <__assert_fail@plt+0x31e88>
   44928:	ldrb	r0, [r4, #77]	; 0x4d
   4492c:	cmp	r0, #0
   44930:	movwne	r0, #1
   44934:	lsl	r3, r0, #1
   44938:	mov	r2, sp
   4493c:	mov	r0, r9
   44940:	mov	r1, r7
   44944:	bl	421c8 <__assert_fail@plt+0x2f718>
   44948:	mov	r6, r0
   4494c:	ldr	r0, [r4, #100]	; 0x64
   44950:	cmp	r8, #0
   44954:	str	r6, [r0, r5, lsl #2]
   44958:	beq	44964 <__assert_fail@plt+0x31eb4>
   4495c:	ldr	r0, [sp, #8]
   44960:	bl	32910 <__assert_fail@plt+0x1fe60>
   44964:	cmp	r6, #0
   44968:	ldrne	r0, [r7, #76]	; 0x4c
   4496c:	cmpne	r0, #0
   44970:	bne	44980 <__assert_fail@plt+0x31ed0>
   44974:	mov	r0, r6
   44978:	sub	sp, fp, #24
   4497c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   44980:	add	r7, r6, #4
   44984:	mov	r0, r4
   44988:	mov	r2, r5
   4498c:	mov	r1, r7
   44990:	bl	43b00 <__assert_fail@plt+0x31050>
   44994:	cmp	r0, #0
   44998:	str	r0, [r9]
   4499c:	bne	449d8 <__assert_fail@plt+0x31f28>
   449a0:	ldrb	r0, [r6, #52]	; 0x34
   449a4:	tst	r0, #64	; 0x40
   449a8:	beq	44974 <__assert_fail@plt+0x31ec4>
   449ac:	mov	r0, r4
   449b0:	mov	r1, r7
   449b4:	bl	43c00 <__assert_fail@plt+0x31150>
   449b8:	str	r0, [r9]
   449bc:	cmp	r0, #0
   449c0:	mov	r6, #0
   449c4:	ldreq	r0, [r4, #100]	; 0x64
   449c8:	ldreq	r6, [r0, r5, lsl #2]
   449cc:	mov	r0, r6
   449d0:	sub	sp, fp, #24
   449d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   449d8:	mov	r6, #0
   449dc:	mov	r0, r6
   449e0:	sub	sp, fp, #24
   449e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   449e8:	ldr	r0, [r4, #88]	; 0x58
   449ec:	and	r0, r0, #2
   449f0:	eor	r3, r0, #10
   449f4:	b	44938 <__assert_fail@plt+0x31e88>
   449f8:	mov	r0, r6
   449fc:	bl	12810 <iswalnum@plt>
   44a00:	mov	r3, #1
   44a04:	cmp	r6, #95	; 0x5f
   44a08:	beq	44938 <__assert_fail@plt+0x31e88>
   44a0c:	cmp	r0, #0
   44a10:	beq	4491c <__assert_fail@plt+0x31e6c>
   44a14:	b	44938 <__assert_fail@plt+0x31e88>
   44a18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44a1c:	add	fp, sp, #28
   44a20:	sub	sp, sp, #20
   44a24:	mov	sl, r2
   44a28:	cmp	r1, #0
   44a2c:	str	r0, [sp, #16]
   44a30:	beq	44ba4 <__assert_fail@plt+0x320f4>
   44a34:	ldr	r0, [r1, #4]
   44a38:	mov	r8, r1
   44a3c:	cmp	sl, #0
   44a40:	beq	44b60 <__assert_fail@plt+0x320b0>
   44a44:	cmp	r0, #1
   44a48:	blt	44b60 <__assert_fail@plt+0x320b0>
   44a4c:	ldr	r1, [sl, #4]
   44a50:	cmp	r1, #1
   44a54:	blt	44b60 <__assert_fail@plt+0x320b0>
   44a58:	ldr	r4, [sp, #16]
   44a5c:	add	r0, r1, r0
   44a60:	str	r0, [r4]
   44a64:	lsl	r0, r0, #2
   44a68:	bl	35350 <__assert_fail@plt+0x228a0>
   44a6c:	cmp	r0, #0
   44a70:	str	r0, [r4, #8]
   44a74:	beq	44c9c <__assert_fail@plt+0x321ec>
   44a78:	ldr	r9, [sl, #4]
   44a7c:	ldr	lr, [r8, #4]
   44a80:	mov	r7, #0
   44a84:	mov	r1, #0
   44a88:	cmp	r9, #0
   44a8c:	movwgt	r1, #1
   44a90:	cmp	lr, #1
   44a94:	blt	44c20 <__assert_fail@plt+0x32170>
   44a98:	mov	r2, #0
   44a9c:	mov	ip, #0
   44aa0:	str	r2, [sp, #8]
   44aa4:	mov	r2, #0
   44aa8:	str	r2, [sp, #12]
   44aac:	mov	r2, #0
   44ab0:	ldr	r4, [sp, #12]
   44ab4:	mov	r7, ip
   44ab8:	tst	r1, #1
   44abc:	beq	44c50 <__assert_fail@plt+0x321a0>
   44ac0:	ldr	r1, [sl, #8]
   44ac4:	ldr	r5, [r1, r7, lsl #2]
   44ac8:	ldr	r1, [r8, #8]
   44acc:	ldr	r3, [r1, r2, lsl #2]
   44ad0:	cmp	r3, r5
   44ad4:	ble	44afc <__assert_fail@plt+0x3204c>
   44ad8:	add	r7, r7, #1
   44adc:	str	r5, [r0, r4, lsl #2]
   44ae0:	mov	r1, #0
   44ae4:	add	r4, r4, #1
   44ae8:	cmp	r9, r7
   44aec:	movwgt	r1, #1
   44af0:	cmp	lr, r2
   44af4:	bgt	44ab8 <__assert_fail@plt+0x32008>
   44af8:	b	44c24 <__assert_fail@plt+0x32174>
   44afc:	str	r3, [r0, r4, lsl #2]
   44b00:	ldr	r6, [sp, #8]
   44b04:	add	r1, r7, #1
   44b08:	mov	ip, r7
   44b0c:	add	r2, r2, #1
   44b10:	ldr	r9, [sl, #4]
   44b14:	ldr	lr, [r8, #4]
   44b18:	moveq	ip, r1
   44b1c:	str	r1, [sp, #4]
   44b20:	mov	r1, #0
   44b24:	sub	r6, r6, #1
   44b28:	cmp	r9, ip
   44b2c:	str	r6, [sp, #8]
   44b30:	add	r6, r4, #1
   44b34:	movwgt	r1, #1
   44b38:	cmp	lr, r2
   44b3c:	str	r6, [sp, #12]
   44b40:	bgt	44ab0 <__assert_fail@plt+0x32000>
   44b44:	ldr	r2, [sp, #4]
   44b48:	cmp	r3, r5
   44b4c:	add	r4, r4, #1
   44b50:	moveq	r7, r2
   44b54:	cmp	r1, #0
   44b58:	bne	44c2c <__assert_fail@plt+0x3217c>
   44b5c:	b	44c78 <__assert_fail@plt+0x321c8>
   44b60:	cmp	r0, #1
   44b64:	blt	44ba4 <__assert_fail@plt+0x320f4>
   44b68:	ldr	r1, [sp, #16]
   44b6c:	str	r0, [r1, #4]
   44b70:	ldr	r1, [r8, #4]
   44b74:	cmp	r1, #1
   44b78:	blt	44c04 <__assert_fail@plt+0x32154>
   44b7c:	ldr	r4, [sp, #16]
   44b80:	str	r0, [r4]
   44b84:	lsl	r0, r0, #2
   44b88:	bl	35350 <__assert_fail@plt+0x228a0>
   44b8c:	cmp	r0, #0
   44b90:	str	r0, [r4, #8]
   44b94:	beq	44c8c <__assert_fail@plt+0x321dc>
   44b98:	ldr	r2, [r8, #4]
   44b9c:	ldr	r1, [r8, #8]
   44ba0:	b	44bf0 <__assert_fail@plt+0x32140>
   44ba4:	cmp	sl, #0
   44ba8:	beq	44c04 <__assert_fail@plt+0x32154>
   44bac:	ldr	r0, [sl, #4]
   44bb0:	cmp	r0, #1
   44bb4:	blt	44c04 <__assert_fail@plt+0x32154>
   44bb8:	ldr	r1, [sp, #16]
   44bbc:	str	r0, [r1, #4]
   44bc0:	ldr	r1, [sl, #4]
   44bc4:	cmp	r1, #1
   44bc8:	blt	44c04 <__assert_fail@plt+0x32154>
   44bcc:	ldr	r4, [sp, #16]
   44bd0:	str	r0, [r4]
   44bd4:	lsl	r0, r0, #2
   44bd8:	bl	35350 <__assert_fail@plt+0x228a0>
   44bdc:	cmp	r0, #0
   44be0:	str	r0, [r4, #8]
   44be4:	beq	44c8c <__assert_fail@plt+0x321dc>
   44be8:	ldr	r2, [sl, #4]
   44bec:	ldr	r1, [sl, #8]
   44bf0:	lsl	r2, r2, #2
   44bf4:	bl	124e0 <memcpy@plt>
   44bf8:	mov	r0, #0
   44bfc:	sub	sp, fp, #28
   44c00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44c04:	ldr	r1, [sp, #16]
   44c08:	mov	r0, #0
   44c0c:	str	r0, [r1]
   44c10:	str	r0, [r1, #4]
   44c14:	str	r0, [r1, #8]
   44c18:	sub	sp, fp, #28
   44c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44c20:	mov	r4, #0
   44c24:	cmp	r1, #0
   44c28:	beq	44c78 <__assert_fail@plt+0x321c8>
   44c2c:	ldr	r1, [sl, #8]
   44c30:	sub	r2, r9, r7
   44c34:	add	r0, r0, r4, lsl #2
   44c38:	lsl	r2, r2, #2
   44c3c:	add	r1, r1, r7, lsl #2
   44c40:	bl	124e0 <memcpy@plt>
   44c44:	sub	r0, r4, r7
   44c48:	add	r4, r0, r9
   44c4c:	b	44c78 <__assert_fail@plt+0x321c8>
   44c50:	ldr	r1, [r8, #8]
   44c54:	add	r0, r0, r4, lsl #2
   44c58:	add	r1, r1, r2, lsl #2
   44c5c:	sub	r2, lr, r2
   44c60:	lsl	r2, r2, #2
   44c64:	bl	124e0 <memcpy@plt>
   44c68:	ldr	r0, [r8, #4]
   44c6c:	ldr	r1, [sp, #8]
   44c70:	add	r0, r0, r1
   44c74:	add	r4, r0, r4
   44c78:	ldr	r0, [sp, #16]
   44c7c:	str	r4, [r0, #4]
   44c80:	mov	r0, #0
   44c84:	sub	sp, fp, #28
   44c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44c8c:	ldr	r1, [sp, #16]
   44c90:	mov	r0, #0
   44c94:	str	r0, [r1]
   44c98:	str	r0, [r1, #4]
   44c9c:	mov	r0, #12
   44ca0:	sub	sp, fp, #28
   44ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44ca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44cac:	add	fp, sp, #28
   44cb0:	sub	sp, sp, #12
   44cb4:	mov	r6, r2
   44cb8:	mov	r7, r3
   44cbc:	ldr	r2, [r2]
   44cc0:	mov	r4, r0
   44cc4:	mov	r0, #8
   44cc8:	mov	r8, r1
   44ccc:	ldr	r9, [fp, #8]
   44cd0:	ldr	r3, [r6, #4]
   44cd4:	str	r0, [sp, #8]
   44cd8:	add	r1, r6, #8
   44cdc:	mov	r0, r4
   44ce0:	stm	sp, {r7, r9}
   44ce4:	bl	44e80 <__assert_fail@plt+0x323d0>
   44ce8:	mov	r5, r0
   44cec:	cmp	r0, #0
   44cf0:	beq	44d00 <__assert_fail@plt+0x32250>
   44cf4:	mov	r0, r5
   44cf8:	sub	sp, fp, #28
   44cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44d00:	ldr	r0, [r4, #108]	; 0x6c
   44d04:	ldr	r1, [r4, #112]	; 0x70
   44d08:	ldr	sl, [r6, #4]
   44d0c:	ldr	r5, [r8]
   44d10:	cmp	r0, r1
   44d14:	blt	44d64 <__assert_fail@plt+0x322b4>
   44d18:	ldr	r0, [r4, #116]	; 0x74
   44d1c:	add	r1, r1, r1, lsl #1
   44d20:	lsl	r1, r1, #4
   44d24:	bl	36110 <__assert_fail@plt+0x23660>
   44d28:	cmp	r0, #0
   44d2c:	beq	44e68 <__assert_fail@plt+0x323b8>
   44d30:	str	r0, [r4, #116]	; 0x74
   44d34:	ldr	r1, [r4, #108]	; 0x6c
   44d38:	ldr	r2, [r4, #112]	; 0x70
   44d3c:	add	r1, r1, r1, lsl #1
   44d40:	add	r0, r0, r1, lsl #3
   44d44:	add	r1, r2, r2, lsl #1
   44d48:	lsl	r2, r1, #3
   44d4c:	mov	r1, #0
   44d50:	bl	12834 <memset@plt>
   44d54:	ldr	r1, [r4, #112]	; 0x70
   44d58:	ldr	r0, [r4, #108]	; 0x6c
   44d5c:	lsl	r1, r1, #1
   44d60:	str	r1, [r4, #112]	; 0x70
   44d64:	ldr	r1, [r4, #116]	; 0x74
   44d68:	cmp	r0, #1
   44d6c:	blt	44d8c <__assert_fail@plt+0x322dc>
   44d70:	sub	r2, r0, #1
   44d74:	add	r2, r2, r2, lsl #1
   44d78:	add	r2, r1, r2, lsl #3
   44d7c:	ldr	r3, [r2, #4]
   44d80:	cmp	r3, r9
   44d84:	moveq	r3, #1
   44d88:	strbeq	r3, [r2, #20]
   44d8c:	add	r2, r0, r0, lsl #1
   44d90:	cmp	sl, r5
   44d94:	mov	r3, #0
   44d98:	mov	ip, #0
   44d9c:	add	r0, r0, #1
   44da0:	mvneq	r3, #0
   44da4:	str	r7, [r1, r2, lsl #3]!
   44da8:	str	r9, [r1, #4]
   44dac:	str	r5, [r1, #8]
   44db0:	str	sl, [r1, #12]
   44db4:	str	r3, [r1, #16]
   44db8:	str	r0, [r4, #108]	; 0x6c
   44dbc:	strb	ip, [r1, #20]
   44dc0:	sub	r0, sl, r5
   44dc4:	ldr	r1, [r4, #120]	; 0x78
   44dc8:	cmp	r1, r0
   44dcc:	strlt	r0, [r4, #120]	; 0x78
   44dd0:	ldr	r0, [r6, #4]
   44dd4:	ldr	r1, [r8]
   44dd8:	ldr	r7, [r4, #104]	; 0x68
   44ddc:	add	r0, r0, r9
   44de0:	sub	r6, r0, r1
   44de4:	ldr	r0, [r4, #36]	; 0x24
   44de8:	cmp	r0, r6
   44dec:	bgt	44dfc <__assert_fail@plt+0x3234c>
   44df0:	ldr	r1, [r4, #48]	; 0x30
   44df4:	cmp	r0, r1
   44df8:	blt	44e14 <__assert_fail@plt+0x32364>
   44dfc:	ldr	r0, [r4, #28]
   44e00:	cmp	r0, r6
   44e04:	bgt	44e2c <__assert_fail@plt+0x3237c>
   44e08:	ldr	r1, [r4, #48]	; 0x30
   44e0c:	cmp	r0, r1
   44e10:	bge	44e2c <__assert_fail@plt+0x3237c>
   44e14:	add	r1, r6, #1
   44e18:	mov	r0, r4
   44e1c:	bl	445d4 <__assert_fail@plt+0x31b24>
   44e20:	mov	r5, r0
   44e24:	cmp	r0, #0
   44e28:	bne	44cf4 <__assert_fail@plt+0x32244>
   44e2c:	mov	r5, #0
   44e30:	cmp	r6, r7
   44e34:	ble	44cf4 <__assert_fail@plt+0x32244>
   44e38:	sub	r0, r6, r7
   44e3c:	mov	r1, #0
   44e40:	mov	r5, #0
   44e44:	lsl	r2, r0, #2
   44e48:	ldr	r0, [r4, #100]	; 0x64
   44e4c:	add	r0, r0, r7, lsl #2
   44e50:	add	r0, r0, #4
   44e54:	bl	12834 <memset@plt>
   44e58:	str	r6, [r4, #104]	; 0x68
   44e5c:	mov	r0, r5
   44e60:	sub	sp, fp, #28
   44e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44e68:	ldr	r0, [r4, #116]	; 0x74
   44e6c:	bl	32910 <__assert_fail@plt+0x1fe60>
   44e70:	mov	r5, #12
   44e74:	mov	r0, r5
   44e78:	sub	sp, fp, #28
   44e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   44e80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   44e84:	add	fp, sp, #28
   44e88:	sub	sp, sp, #84	; 0x54
   44e8c:	ldr	r7, [r0, #84]	; 0x54
   44e90:	mov	ip, r1
   44e94:	mov	r1, #0
   44e98:	mov	lr, r2
   44e9c:	mov	r9, r3
   44ea0:	str	r0, [sp, #44]	; 0x2c
   44ea4:	str	r1, [fp, #-52]	; 0xffffffcc
   44ea8:	ldr	r4, [ip, #4]
   44eac:	ldr	r1, [r7]
   44eb0:	str	r7, [sp, #24]
   44eb4:	ldr	sl, [r1, r2, lsl #3]
   44eb8:	ldr	r1, [r0, #120]	; 0x78
   44ebc:	ldr	r2, [fp, #12]
   44ec0:	add	r2, r1, r2
   44ec4:	cmp	r4, r2
   44ec8:	str	sl, [sp, #20]
   44ecc:	ble	45838 <__assert_fail@plt+0x32d88>
   44ed0:	ldr	r2, [r0, #100]	; 0x64
   44ed4:	ldr	r5, [ip]
   44ed8:	ldr	r4, [r0, #40]	; 0x28
   44edc:	ldr	r1, [r0, #88]	; 0x58
   44ee0:	str	r2, [sp, #8]
   44ee4:	ldr	r2, [ip, #8]
   44ee8:	cmp	r5, #0
   44eec:	str	r4, [sp, #12]
   44ef0:	moveq	r5, r9
   44ef4:	cmp	r5, #0
   44ef8:	str	r2, [r0, #100]	; 0x64
   44efc:	str	r5, [r0, #40]	; 0x28
   44f00:	ble	458a8 <__assert_fail@plt+0x32df8>
   44f04:	ldr	r2, [r0, #48]	; 0x30
   44f08:	sub	r3, r5, #1
   44f0c:	cmp	r2, r3
   44f10:	beq	458bc <__assert_fail@plt+0x32e0c>
   44f14:	ldr	r1, [r0, #80]	; 0x50
   44f18:	cmp	r1, #2
   44f1c:	blt	44f90 <__assert_fail@plt+0x324e0>
   44f20:	ldr	r1, [r0, #8]
   44f24:	ldr	r6, [r1, r3, lsl #2]
   44f28:	cmn	r6, #1
   44f2c:	bne	44fc0 <__assert_fail@plt+0x32510>
   44f30:	sub	r3, r3, #1
   44f34:	cmn	r3, #1
   44f38:	bne	44f24 <__assert_fail@plt+0x32474>
   44f3c:	ldr	r0, [sp, #44]	; 0x2c
   44f40:	ldr	r8, [r0, #60]	; 0x3c
   44f44:	cmp	r5, r9
   44f48:	str	ip, [sp, #16]
   44f4c:	beq	44ffc <__assert_fail@plt+0x3254c>
   44f50:	ldr	r9, [sp, #44]	; 0x2c
   44f54:	ldr	r0, [r9, #100]	; 0x64
   44f58:	ldr	r6, [r0, r5, lsl #2]
   44f5c:	cmp	r6, #0
   44f60:	beq	450c8 <__assert_fail@plt+0x32618>
   44f64:	ldrb	r0, [r6, #52]	; 0x34
   44f68:	tst	r0, #64	; 0x40
   44f6c:	bne	450e8 <__assert_fail@plt+0x32638>
   44f70:	mov	r0, #0
   44f74:	str	r0, [sp, #52]	; 0x34
   44f78:	str	r0, [sp, #48]	; 0x30
   44f7c:	str	r0, [sp, #56]	; 0x38
   44f80:	ldr	r4, [fp, #12]
   44f84:	cmp	r5, r4
   44f88:	blt	45140 <__assert_fail@plt+0x32690>
   44f8c:	b	45720 <__assert_fail@plt+0x32c70>
   44f90:	ldr	r1, [r0, #4]
   44f94:	ldr	r2, [r0, #68]	; 0x44
   44f98:	mov	r8, #1
   44f9c:	ldrb	r0, [r1, r3]
   44fa0:	ubfx	r1, r0, #5, #3
   44fa4:	ldr	r1, [r2, r1, lsl #2]
   44fa8:	and	r2, r0, #31
   44fac:	tst	r1, r8, lsl r2
   44fb0:	moveq	r8, #0
   44fb4:	cmpeq	r0, #10
   44fb8:	bne	44ff0 <__assert_fail@plt+0x32540>
   44fbc:	b	44fdc <__assert_fail@plt+0x3252c>
   44fc0:	ldr	r0, [sp, #44]	; 0x2c
   44fc4:	ldrb	r0, [r0, #78]	; 0x4e
   44fc8:	cmp	r0, #0
   44fcc:	bne	4590c <__assert_fail@plt+0x32e5c>
   44fd0:	mov	r8, #0
   44fd4:	cmp	r6, #10
   44fd8:	bne	44ff0 <__assert_fail@plt+0x32540>
   44fdc:	ldr	r0, [sp, #44]	; 0x2c
   44fe0:	ldrb	r0, [r0, #77]	; 0x4d
   44fe4:	cmp	r0, #0
   44fe8:	movwne	r0, #1
   44fec:	lsl	r8, r0, #1
   44ff0:	cmp	r5, r9
   44ff4:	str	ip, [sp, #16]
   44ff8:	bne	44f50 <__assert_fail@plt+0x324a0>
   44ffc:	mov	r0, #1
   45000:	mov	r6, lr
   45004:	str	r0, [sp, #52]	; 0x34
   45008:	str	r0, [sp, #48]	; 0x30
   4500c:	mov	r0, #4
   45010:	bl	35350 <__assert_fail@plt+0x228a0>
   45014:	cmp	r0, #0
   45018:	str	r0, [sp, #56]	; 0x38
   4501c:	beq	458ec <__assert_fail@plt+0x32e3c>
   45020:	ldr	r3, [fp, #16]
   45024:	str	r6, [r0]
   45028:	mov	r0, #0
   4502c:	add	r1, sp, #48	; 0x30
   45030:	mov	r2, sl
   45034:	str	r0, [fp, #-52]	; 0xffffffcc
   45038:	mov	r0, r7
   4503c:	bl	45954 <__assert_fail@plt+0x32ea4>
   45040:	cmp	r0, #0
   45044:	str	r0, [fp, #-52]	; 0xffffffcc
   45048:	bne	458d4 <__assert_fail@plt+0x32e24>
   4504c:	ldr	r0, [sp, #52]	; 0x34
   45050:	ldr	r9, [sp, #44]	; 0x2c
   45054:	cmp	r0, #0
   45058:	beq	45084 <__assert_fail@plt+0x325d4>
   4505c:	ldr	r0, [fp, #16]
   45060:	ldr	r3, [sp, #20]
   45064:	add	r1, sp, #48	; 0x30
   45068:	mov	r2, r5
   4506c:	str	r0, [sp]
   45070:	mov	r0, r9
   45074:	bl	45a9c <__assert_fail@plt+0x32fec>
   45078:	cmp	r0, #0
   4507c:	str	r0, [fp, #-52]	; 0xffffffcc
   45080:	bne	458d4 <__assert_fail@plt+0x32e24>
   45084:	ldr	r1, [sp, #24]
   45088:	sub	r0, fp, #52	; 0x34
   4508c:	add	r2, sp, #48	; 0x30
   45090:	mov	r3, r8
   45094:	bl	421c8 <__assert_fail@plt+0x2f718>
   45098:	mov	r6, r0
   4509c:	cmp	r0, #0
   450a0:	bne	450b0 <__assert_fail@plt+0x32600>
   450a4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   450a8:	cmp	r0, #0
   450ac:	bne	4580c <__assert_fail@plt+0x32d5c>
   450b0:	ldr	r0, [r9, #100]	; 0x64
   450b4:	str	r6, [r0, r5, lsl #2]
   450b8:	ldr	r4, [fp, #12]
   450bc:	cmp	r5, r4
   450c0:	blt	45140 <__assert_fail@plt+0x32690>
   450c4:	b	45720 <__assert_fail@plt+0x32c70>
   450c8:	mov	r6, #0
   450cc:	str	r6, [sp, #52]	; 0x34
   450d0:	str	r6, [sp, #48]	; 0x30
   450d4:	str	r6, [sp, #56]	; 0x38
   450d8:	ldr	r4, [fp, #12]
   450dc:	cmp	r5, r4
   450e0:	blt	45140 <__assert_fail@plt+0x32690>
   450e4:	b	45720 <__assert_fail@plt+0x32c70>
   450e8:	ldr	r0, [r6, #8]
   450ec:	cmp	r0, #1
   450f0:	str	r0, [sp, #52]	; 0x34
   450f4:	blt	457d0 <__assert_fail@plt+0x32d20>
   450f8:	str	r0, [sp, #48]	; 0x30
   450fc:	lsl	r0, r0, #2
   45100:	bl	35350 <__assert_fail@plt+0x228a0>
   45104:	cmp	r0, #0
   45108:	str	r0, [sp, #56]	; 0x38
   4510c:	beq	458ec <__assert_fail@plt+0x32e3c>
   45110:	ldr	r2, [r6, #8]
   45114:	ldr	r1, [r6, #12]
   45118:	lsl	r2, r2, #2
   4511c:	bl	124e0 <memcpy@plt>
   45120:	ldrb	r0, [r6, #52]	; 0x34
   45124:	mov	r1, #0
   45128:	str	r1, [fp, #-52]	; 0xffffffcc
   4512c:	tst	r0, #64	; 0x40
   45130:	bne	4505c <__assert_fail@plt+0x325ac>
   45134:	ldr	r4, [fp, #12]
   45138:	cmp	r5, r4
   4513c:	bge	45720 <__assert_fail@plt+0x32c70>
   45140:	ldr	r7, [sp, #24]
   45144:	ldr	sl, [sp, #20]
   45148:	ldr	r4, [fp, #16]
   4514c:	add	r8, sp, #48	; 0x30
   45150:	mov	r0, #0
   45154:	str	r6, [sp, #40]	; 0x28
   45158:	b	45188 <__assert_fail@plt+0x326d8>
   4515c:	ldr	r1, [sp, #40]	; 0x28
   45160:	ldr	r0, [r9, #100]	; 0x64
   45164:	ldr	r5, [sp, #28]
   45168:	str	r1, [r0, r5, lsl #2]
   4516c:	cmp	r1, #0
   45170:	ldr	r1, [sp, #32]
   45174:	mov	r0, #0
   45178:	addeq	r0, r1, #1
   4517c:	ldr	r1, [fp, #12]
   45180:	cmp	r5, r1
   45184:	beq	4571c <__assert_fail@plt+0x32c6c>
   45188:	str	r0, [sp, #32]
   4518c:	ldr	r0, [r9, #120]	; 0x78
   45190:	ldr	r1, [sp, #32]
   45194:	cmp	r1, r0
   45198:	bgt	45720 <__assert_fail@plt+0x32c70>
   4519c:	mov	r0, #0
   451a0:	add	r1, r5, #1
   451a4:	str	r0, [sp, #52]	; 0x34
   451a8:	str	r1, [sp, #28]
   451ac:	ldr	r0, [r9, #100]	; 0x64
   451b0:	ldr	r0, [r0, r1, lsl #2]
   451b4:	cmp	r0, #0
   451b8:	beq	451d4 <__assert_fail@plt+0x32724>
   451bc:	add	r1, r0, #4
   451c0:	mov	r0, r8
   451c4:	bl	41ea8 <__assert_fail@plt+0x2f3f8>
   451c8:	cmp	r0, #0
   451cc:	str	r0, [fp, #-52]	; 0xffffffcc
   451d0:	bne	4580c <__assert_fail@plt+0x32d5c>
   451d4:	ldr	r1, [sp, #40]	; 0x28
   451d8:	cmp	r1, #0
   451dc:	beq	455d4 <__assert_fail@plt+0x32b24>
   451e0:	mov	r0, #0
   451e4:	ldr	r8, [r9, #84]	; 0x54
   451e8:	str	r0, [fp, #-32]	; 0xffffffe0
   451ec:	str	r0, [fp, #-44]	; 0xffffffd4
   451f0:	str	r0, [fp, #-48]	; 0xffffffd0
   451f4:	str	r0, [fp, #-40]	; 0xffffffd8
   451f8:	ldr	r1, [r1, #20]
   451fc:	cmp	r1, #1
   45200:	blt	455c0 <__assert_fail@plt+0x32b10>
   45204:	ldr	r7, [sp, #40]	; 0x28
   45208:	mov	r4, #0
   4520c:	b	45240 <__assert_fail@plt+0x32790>
   45210:	ldr	r1, [sp, #52]	; 0x34
   45214:	cmp	r1, #0
   45218:	bne	453cc <__assert_fail@plt+0x3291c>
   4521c:	ldr	r0, [sp, #56]	; 0x38
   45220:	str	r6, [r0]
   45224:	ldr	r0, [sp, #52]	; 0x34
   45228:	add	r0, r0, #1
   4522c:	str	r0, [sp, #52]	; 0x34
   45230:	ldr	r0, [r7, #20]
   45234:	add	r4, r4, #1
   45238:	cmp	r4, r0
   4523c:	bge	455b4 <__assert_fail@plt+0x32b04>
   45240:	ldr	r0, [r7, #24]
   45244:	ldr	sl, [r0, r4, lsl #2]
   45248:	ldr	r0, [r8]
   4524c:	add	r1, r0, sl, lsl #3
   45250:	ldrb	r1, [r1, #6]
   45254:	tst	r1, #16
   45258:	beq	45368 <__assert_fail@plt+0x328b8>
   4525c:	mov	r0, r8
   45260:	mov	r1, sl
   45264:	mov	r2, r9
   45268:	mov	r3, r5
   4526c:	bl	464c4 <__assert_fail@plt+0x33a14>
   45270:	mov	r9, r0
   45274:	cmp	r0, #2
   45278:	blt	45354 <__assert_fail@plt+0x328a4>
   4527c:	ldr	r0, [sp, #44]	; 0x2c
   45280:	ldr	r1, [r8, #12]
   45284:	add	r6, r9, r5
   45288:	ldr	r0, [r0, #100]	; 0x64
   4528c:	ldr	r1, [r1, sl, lsl #2]
   45290:	ldr	r0, [r0, r6, lsl #2]
   45294:	str	r1, [sp, #36]	; 0x24
   45298:	mov	r1, #0
   4529c:	str	r1, [fp, #-44]	; 0xffffffd4
   452a0:	cmp	r0, #0
   452a4:	beq	452c0 <__assert_fail@plt+0x32810>
   452a8:	add	r1, r0, #4
   452ac:	sub	r0, fp, #48	; 0x30
   452b0:	bl	41ea8 <__assert_fail@plt+0x2f3f8>
   452b4:	cmp	r0, #0
   452b8:	str	r0, [fp, #-32]	; 0xffffffe0
   452bc:	bne	457fc <__assert_fail@plt+0x32d4c>
   452c0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   452c4:	cmp	r2, #0
   452c8:	beq	452f4 <__assert_fail@plt+0x32844>
   452cc:	ldr	r1, [fp, #-44]	; 0xffffffd4
   452d0:	ldr	r7, [sp, #36]	; 0x24
   452d4:	cmp	r1, #0
   452d8:	bne	454bc <__assert_fail@plt+0x32a0c>
   452dc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   452e0:	str	r7, [r0]
   452e4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   452e8:	add	r0, r0, #1
   452ec:	str	r0, [fp, #-44]	; 0xffffffd4
   452f0:	b	4531c <__assert_fail@plt+0x3286c>
   452f4:	mov	r0, #1
   452f8:	str	r0, [fp, #-44]	; 0xffffffd4
   452fc:	str	r0, [fp, #-48]	; 0xffffffd0
   45300:	mov	r0, #4
   45304:	bl	35350 <__assert_fail@plt+0x228a0>
   45308:	ldr	r1, [sp, #36]	; 0x24
   4530c:	cmp	r0, #0
   45310:	str	r0, [fp, #-40]	; 0xffffffd8
   45314:	beq	45824 <__assert_fail@plt+0x32d74>
   45318:	str	r1, [r0]
   4531c:	sub	r0, fp, #32
   45320:	mov	r1, r8
   45324:	sub	r2, fp, #48	; 0x30
   45328:	bl	46194 <__assert_fail@plt+0x336e4>
   4532c:	ldr	r2, [sp, #44]	; 0x2c
   45330:	ldr	r1, [r2, #100]	; 0x64
   45334:	str	r0, [r1, r6, lsl #2]
   45338:	ldr	r0, [r2, #100]	; 0x64
   4533c:	ldr	r0, [r0, r6, lsl #2]
   45340:	cmp	r0, #0
   45344:	bne	45354 <__assert_fail@plt+0x328a4>
   45348:	ldr	r7, [fp, #-32]	; 0xffffffe0
   4534c:	cmp	r7, #0
   45350:	bne	45800 <__assert_fail@plt+0x32d50>
   45354:	cmp	r9, #0
   45358:	ldr	r9, [sp, #44]	; 0x2c
   4535c:	ldr	r7, [sp, #40]	; 0x28
   45360:	bne	45380 <__assert_fail@plt+0x328d0>
   45364:	ldr	r0, [r8]
   45368:	add	r1, r0, sl, lsl #3
   4536c:	mov	r0, r9
   45370:	mov	r2, r5
   45374:	bl	46850 <__assert_fail@plt+0x33da0>
   45378:	cmp	r0, #0
   4537c:	beq	45230 <__assert_fail@plt+0x32780>
   45380:	ldr	r0, [r8, #12]
   45384:	ldr	r2, [sp, #48]	; 0x30
   45388:	ldr	r6, [r0, sl, lsl #2]
   4538c:	cmp	r2, #0
   45390:	bne	45210 <__assert_fail@plt+0x32760>
   45394:	mov	r0, #1
   45398:	str	r0, [sp, #52]	; 0x34
   4539c:	str	r0, [sp, #48]	; 0x30
   453a0:	mov	r0, #4
   453a4:	bl	35350 <__assert_fail@plt+0x228a0>
   453a8:	cmp	r0, #0
   453ac:	str	r0, [sp, #56]	; 0x38
   453b0:	beq	457e8 <__assert_fail@plt+0x32d38>
   453b4:	str	r6, [r0]
   453b8:	ldr	r0, [r7, #20]
   453bc:	add	r4, r4, #1
   453c0:	cmp	r4, r0
   453c4:	blt	45240 <__assert_fail@plt+0x32790>
   453c8:	b	455b4 <__assert_fail@plt+0x32b04>
   453cc:	cmp	r2, r1
   453d0:	bne	45438 <__assert_fail@plt+0x32988>
   453d4:	lsl	r0, r2, #1
   453d8:	lsl	r1, r2, #3
   453dc:	str	r0, [sp, #48]	; 0x30
   453e0:	ldr	r0, [sp, #56]	; 0x38
   453e4:	bl	36110 <__assert_fail@plt+0x23660>
   453e8:	cmp	r0, #0
   453ec:	beq	457f4 <__assert_fail@plt+0x32d44>
   453f0:	str	r0, [sp, #56]	; 0x38
   453f4:	ldr	r1, [sp, #52]	; 0x34
   453f8:	ldr	r2, [r0]
   453fc:	cmp	r2, r6
   45400:	bgt	45448 <__assert_fail@plt+0x32998>
   45404:	add	r2, r0, r1, lsl #2
   45408:	ldr	r3, [r2, #-4]
   4540c:	cmp	r3, r6
   45410:	ble	454b4 <__assert_fail@plt+0x32a04>
   45414:	sub	r1, r1, #2
   45418:	str	r3, [r2]
   4541c:	sub	r1, r1, #1
   45420:	ldr	r3, [r2, #-8]
   45424:	sub	r2, r2, #4
   45428:	cmp	r3, r6
   4542c:	bgt	45418 <__assert_fail@plt+0x32968>
   45430:	add	r1, r1, #2
   45434:	b	454b4 <__assert_fail@plt+0x32a04>
   45438:	ldr	r0, [sp, #56]	; 0x38
   4543c:	ldr	r2, [r0]
   45440:	cmp	r2, r6
   45444:	ble	45404 <__assert_fail@plt+0x32954>
   45448:	cmp	r1, #1
   4544c:	blt	454b4 <__assert_fail@plt+0x32a04>
   45450:	ands	r7, r1, #3
   45454:	sub	ip, r1, #1
   45458:	beq	4547c <__assert_fail@plt+0x329cc>
   4545c:	add	lr, r0, r1, lsl #2
   45460:	mov	r3, lr
   45464:	ldr	r2, [r3, #-4]!
   45468:	subs	r7, r7, #1
   4546c:	sub	r1, r1, #1
   45470:	str	r2, [lr]
   45474:	mov	lr, r3
   45478:	bne	45464 <__assert_fail@plt+0x329b4>
   4547c:	cmp	ip, #3
   45480:	bcc	454ac <__assert_fail@plt+0x329fc>
   45484:	add	r2, r0, r1, lsl #2
   45488:	sub	r2, r2, #8
   4548c:	sub	lr, r2, #8
   45490:	sub	r1, r1, #4
   45494:	sub	sl, r2, #4
   45498:	sub	r2, r2, #16
   4549c:	ldm	lr, {r3, r7, ip, lr}
   454a0:	cmp	r1, #0
   454a4:	stm	sl, {r3, r7, ip, lr}
   454a8:	bgt	4548c <__assert_fail@plt+0x329dc>
   454ac:	ldr	r7, [sp, #40]	; 0x28
   454b0:	mov	r1, #0
   454b4:	str	r6, [r0, r1, lsl #2]
   454b8:	b	45224 <__assert_fail@plt+0x32774>
   454bc:	cmp	r2, r1
   454c0:	bne	45528 <__assert_fail@plt+0x32a78>
   454c4:	lsl	r0, r2, #1
   454c8:	lsl	r1, r2, #3
   454cc:	str	r0, [fp, #-48]	; 0xffffffd0
   454d0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   454d4:	bl	36110 <__assert_fail@plt+0x23660>
   454d8:	cmp	r0, #0
   454dc:	beq	457f4 <__assert_fail@plt+0x32d44>
   454e0:	str	r0, [fp, #-40]	; 0xffffffd8
   454e4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   454e8:	ldr	r2, [r0]
   454ec:	cmp	r2, r7
   454f0:	bgt	45538 <__assert_fail@plt+0x32a88>
   454f4:	add	r2, r0, r1, lsl #2
   454f8:	ldr	r3, [r2, #-4]
   454fc:	cmp	r3, r7
   45500:	ble	455ac <__assert_fail@plt+0x32afc>
   45504:	sub	r1, r1, #2
   45508:	str	r3, [r2]
   4550c:	sub	r1, r1, #1
   45510:	ldr	r3, [r2, #-8]
   45514:	sub	r2, r2, #4
   45518:	cmp	r3, r7
   4551c:	bgt	45508 <__assert_fail@plt+0x32a58>
   45520:	add	r1, r1, #2
   45524:	b	455ac <__assert_fail@plt+0x32afc>
   45528:	ldr	r0, [fp, #-40]	; 0xffffffd8
   4552c:	ldr	r2, [r0]
   45530:	cmp	r2, r7
   45534:	ble	454f4 <__assert_fail@plt+0x32a44>
   45538:	cmp	r1, #1
   4553c:	blt	455ac <__assert_fail@plt+0x32afc>
   45540:	ands	r3, r1, #3
   45544:	sub	ip, r1, #1
   45548:	beq	4556c <__assert_fail@plt+0x32abc>
   4554c:	add	lr, r0, r1, lsl #2
   45550:	mov	r7, lr
   45554:	ldr	r2, [r7, #-4]!
   45558:	subs	r3, r3, #1
   4555c:	sub	r1, r1, #1
   45560:	str	r2, [lr]
   45564:	mov	lr, r7
   45568:	bne	45554 <__assert_fail@plt+0x32aa4>
   4556c:	cmp	ip, #3
   45570:	bcc	455a4 <__assert_fail@plt+0x32af4>
   45574:	add	r2, r0, r1, lsl #2
   45578:	sub	r2, r2, #8
   4557c:	sub	lr, r2, #8
   45580:	sub	r1, r1, #4
   45584:	ldm	lr, {r3, r7, ip, lr}
   45588:	cmp	r1, #0
   4558c:	str	r3, [r2, #-4]
   45590:	str	r7, [r2]
   45594:	str	ip, [r2, #4]
   45598:	str	lr, [r2, #8]
   4559c:	sub	r2, r2, #16
   455a0:	bgt	4557c <__assert_fail@plt+0x32acc>
   455a4:	ldr	r7, [sp, #36]	; 0x24
   455a8:	mov	r1, #0
   455ac:	str	r7, [r0, r1, lsl #2]
   455b0:	b	452e4 <__assert_fail@plt+0x32834>
   455b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   455b8:	ldr	r7, [sp, #24]
   455bc:	ldr	sl, [sp, #20]
   455c0:	bl	32910 <__assert_fail@plt+0x1fe60>
   455c4:	ldr	r4, [fp, #16]
   455c8:	mov	r0, #0
   455cc:	add	r8, sp, #48	; 0x30
   455d0:	str	r0, [fp, #-52]	; 0xffffffcc
   455d4:	ldr	r0, [sp, #52]	; 0x34
   455d8:	cmp	r0, #0
   455dc:	beq	45624 <__assert_fail@plt+0x32b74>
   455e0:	mov	r0, r7
   455e4:	mov	r1, r8
   455e8:	mov	r2, sl
   455ec:	mov	r3, r4
   455f0:	bl	45954 <__assert_fail@plt+0x32ea4>
   455f4:	cmp	r0, #0
   455f8:	str	r0, [fp, #-52]	; 0xffffffcc
   455fc:	bne	4580c <__assert_fail@plt+0x32d5c>
   45600:	ldr	r2, [sp, #28]
   45604:	mov	r0, r9
   45608:	mov	r1, r8
   4560c:	mov	r3, sl
   45610:	str	r4, [sp]
   45614:	bl	45a9c <__assert_fail@plt+0x32fec>
   45618:	cmp	r0, #0
   4561c:	str	r0, [fp, #-52]	; 0xffffffcc
   45620:	bne	4580c <__assert_fail@plt+0x32d5c>
   45624:	cmn	r5, #1
   45628:	ble	45660 <__assert_fail@plt+0x32bb0>
   4562c:	ldr	r0, [r9, #48]	; 0x30
   45630:	cmp	r0, r5
   45634:	beq	456ec <__assert_fail@plt+0x32c3c>
   45638:	ldr	r0, [r9, #80]	; 0x50
   4563c:	cmp	r0, #2
   45640:	blt	45668 <__assert_fail@plt+0x32bb8>
   45644:	ldr	r0, [r9, #8]
   45648:	ldr	r6, [r0, r5, lsl #2]
   4564c:	cmn	r6, #1
   45650:	bne	45698 <__assert_fail@plt+0x32be8>
   45654:	sub	r5, r5, #1
   45658:	cmn	r5, #1
   4565c:	bne	45648 <__assert_fail@plt+0x32b98>
   45660:	ldr	r3, [r9, #60]	; 0x3c
   45664:	b	456c0 <__assert_fail@plt+0x32c10>
   45668:	ldr	r0, [r9, #4]
   4566c:	ldr	r1, [r9, #68]	; 0x44
   45670:	mov	r3, #1
   45674:	ldrb	r0, [r0, r5]
   45678:	ubfx	r2, r0, #5, #3
   4567c:	ldr	r1, [r1, r2, lsl #2]
   45680:	and	r2, r0, #31
   45684:	tst	r1, r3, lsl r2
   45688:	moveq	r3, #0
   4568c:	cmpeq	r0, #10
   45690:	bne	456c0 <__assert_fail@plt+0x32c10>
   45694:	b	456b0 <__assert_fail@plt+0x32c00>
   45698:	ldrb	r0, [r9, #78]	; 0x4e
   4569c:	cmp	r0, #0
   456a0:	bne	456fc <__assert_fail@plt+0x32c4c>
   456a4:	mov	r3, #0
   456a8:	cmp	r6, #10
   456ac:	bne	456c0 <__assert_fail@plt+0x32c10>
   456b0:	ldrb	r0, [r9, #77]	; 0x4d
   456b4:	cmp	r0, #0
   456b8:	movwne	r0, #1
   456bc:	lsl	r3, r0, #1
   456c0:	sub	r0, fp, #52	; 0x34
   456c4:	mov	r1, r7
   456c8:	mov	r2, r8
   456cc:	bl	421c8 <__assert_fail@plt+0x2f718>
   456d0:	cmp	r0, #0
   456d4:	str	r0, [sp, #40]	; 0x28
   456d8:	bne	4515c <__assert_fail@plt+0x326ac>
   456dc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   456e0:	cmp	r0, #0
   456e4:	beq	4515c <__assert_fail@plt+0x326ac>
   456e8:	b	4580c <__assert_fail@plt+0x32d5c>
   456ec:	ldr	r0, [r9, #88]	; 0x58
   456f0:	and	r0, r0, #2
   456f4:	eor	r3, r0, #10
   456f8:	b	456c0 <__assert_fail@plt+0x32c10>
   456fc:	mov	r0, r6
   45700:	bl	12810 <iswalnum@plt>
   45704:	mov	r3, #1
   45708:	cmp	r6, #95	; 0x5f
   4570c:	beq	456c0 <__assert_fail@plt+0x32c10>
   45710:	cmp	r0, #0
   45714:	beq	456a4 <__assert_fail@plt+0x32bf4>
   45718:	b	456c0 <__assert_fail@plt+0x32c10>
   4571c:	ldr	r5, [fp, #12]
   45720:	ldr	r0, [sp, #56]	; 0x38
   45724:	bl	32910 <__assert_fail@plt+0x1fe60>
   45728:	ldr	r0, [r9, #100]	; 0x64
   4572c:	ldr	r1, [fp, #12]
   45730:	mov	sl, #1
   45734:	ldr	r1, [r0, r1, lsl #2]
   45738:	ldr	r0, [sp, #16]
   4573c:	str	r5, [r0]
   45740:	ldr	r0, [sp, #12]
   45744:	cmp	r1, #0
   45748:	addne	r1, r1, #4
   4574c:	str	r0, [r9, #40]	; 0x28
   45750:	ldr	r0, [sp, #8]
   45754:	str	r0, [r9, #100]	; 0x64
   45758:	beq	457b4 <__assert_fail@plt+0x32d04>
   4575c:	ldr	r2, [r1, #4]
   45760:	cmp	r2, #1
   45764:	blt	457c0 <__assert_fail@plt+0x32d10>
   45768:	ldr	r0, [fp, #8]
   4576c:	ldr	r1, [r1, #8]
   45770:	subs	r2, r2, #1
   45774:	mov	sl, #0
   45778:	mov	r3, #0
   4577c:	beq	457a8 <__assert_fail@plt+0x32cf8>
   45780:	mov	r3, #0
   45784:	mov	r7, #1
   45788:	add	r5, r3, r2
   4578c:	lsr	r4, r5, #1
   45790:	ldr	r6, [r1, r4, lsl #2]
   45794:	cmp	r6, r0
   45798:	addlt	r3, r7, r5, lsr #1
   4579c:	movge	r2, r4
   457a0:	cmp	r3, r2
   457a4:	bcc	45788 <__assert_fail@plt+0x32cd8>
   457a8:	ldr	r1, [r1, r3, lsl #2]
   457ac:	cmp	r1, r0
   457b0:	movne	sl, #1
   457b4:	mov	r0, sl
   457b8:	sub	sp, fp, #28
   457bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   457c0:	mov	sl, #1
   457c4:	mov	r0, sl
   457c8:	sub	sp, fp, #28
   457cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   457d0:	mov	r0, #0
   457d4:	str	r0, [sp, #52]	; 0x34
   457d8:	str	r0, [sp, #48]	; 0x30
   457dc:	str	r0, [sp, #56]	; 0x38
   457e0:	str	r0, [fp, #-52]	; 0xffffffcc
   457e4:	b	45084 <__assert_fail@plt+0x325d4>
   457e8:	mov	r0, #0
   457ec:	str	r0, [sp, #48]	; 0x30
   457f0:	str	r0, [sp, #52]	; 0x34
   457f4:	mov	r7, #12
   457f8:	b	45800 <__assert_fail@plt+0x32d50>
   457fc:	mov	r7, r0
   45800:	ldr	r0, [fp, #-40]	; 0xffffffd8
   45804:	bl	32910 <__assert_fail@plt+0x1fe60>
   45808:	str	r7, [fp, #-52]	; 0xffffffcc
   4580c:	ldr	r0, [sp, #56]	; 0x38
   45810:	bl	32910 <__assert_fail@plt+0x1fe60>
   45814:	ldr	sl, [fp, #-52]	; 0xffffffcc
   45818:	mov	r0, sl
   4581c:	sub	sp, fp, #28
   45820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45824:	mov	r0, #0
   45828:	mov	r7, #12
   4582c:	str	r0, [fp, #-48]	; 0xffffffd0
   45830:	str	r0, [fp, #-44]	; 0xffffffd4
   45834:	b	45804 <__assert_fail@plt+0x32d54>
   45838:	mvn	r1, #-2147483648	; 0x80000000
   4583c:	mov	sl, #12
   45840:	sub	r1, r1, r4
   45844:	cmp	r1, r2
   45848:	ble	457b4 <__assert_fail@plt+0x32d04>
   4584c:	add	r8, r2, #1
   45850:	str	lr, [sp, #40]	; 0x28
   45854:	add	r5, r8, r4
   45858:	cmn	r5, #-1073741823	; 0xc0000001
   4585c:	bhi	457b4 <__assert_fail@plt+0x32d04>
   45860:	ldr	r0, [ip, #8]
   45864:	lsl	r1, r5, #2
   45868:	mov	r6, ip
   4586c:	bl	36110 <__assert_fail@plt+0x23660>
   45870:	cmp	r0, #0
   45874:	beq	457b4 <__assert_fail@plt+0x32d04>
   45878:	str	r5, [r6, #4]
   4587c:	str	r0, [r6, #8]
   45880:	add	r0, r0, r4, lsl #2
   45884:	lsl	r2, r8, #2
   45888:	mov	r1, #0
   4588c:	bl	12834 <memset@plt>
   45890:	ldr	r0, [sp, #44]	; 0x2c
   45894:	ldr	r7, [sp, #24]
   45898:	ldr	sl, [sp, #20]
   4589c:	ldr	lr, [sp, #40]	; 0x28
   458a0:	mov	ip, r6
   458a4:	b	44ed0 <__assert_fail@plt+0x32420>
   458a8:	ldr	r8, [r0, #60]	; 0x3c
   458ac:	cmp	r5, r9
   458b0:	str	ip, [sp, #16]
   458b4:	beq	44ffc <__assert_fail@plt+0x3254c>
   458b8:	b	44f50 <__assert_fail@plt+0x324a0>
   458bc:	and	r0, r1, #2
   458c0:	eor	r8, r0, #10
   458c4:	cmp	r5, r9
   458c8:	str	ip, [sp, #16]
   458cc:	beq	44ffc <__assert_fail@plt+0x3254c>
   458d0:	b	44f50 <__assert_fail@plt+0x324a0>
   458d4:	mov	sl, r0
   458d8:	ldr	r0, [sp, #56]	; 0x38
   458dc:	bl	32910 <__assert_fail@plt+0x1fe60>
   458e0:	mov	r0, sl
   458e4:	sub	sp, fp, #28
   458e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   458ec:	mov	r0, #0
   458f0:	mov	sl, #12
   458f4:	str	r0, [sp, #48]	; 0x30
   458f8:	str	r0, [sp, #52]	; 0x34
   458fc:	str	sl, [fp, #-52]	; 0xffffffcc
   45900:	mov	r0, sl
   45904:	sub	sp, fp, #28
   45908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4590c:	mov	r0, r6
   45910:	str	lr, [sp, #40]	; 0x28
   45914:	mov	r4, ip
   45918:	bl	12810 <iswalnum@plt>
   4591c:	mov	r8, #1
   45920:	cmp	r6, #95	; 0x5f
   45924:	beq	4593c <__assert_fail@plt+0x32e8c>
   45928:	ldr	lr, [sp, #40]	; 0x28
   4592c:	cmp	r0, #0
   45930:	mov	ip, r4
   45934:	beq	44fd0 <__assert_fail@plt+0x32520>
   45938:	b	44ff0 <__assert_fail@plt+0x32540>
   4593c:	ldr	lr, [sp, #40]	; 0x28
   45940:	mov	ip, r4
   45944:	cmp	r5, r9
   45948:	str	ip, [sp, #16]
   4594c:	beq	44ffc <__assert_fail@plt+0x3254c>
   45950:	b	44f50 <__assert_fail@plt+0x324a0>
   45954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45958:	add	fp, sp, #28
   4595c:	sub	sp, sp, #20
   45960:	str	r0, [sp, #4]
   45964:	ldr	r0, [r1, #4]
   45968:	mov	sl, r1
   4596c:	mov	r1, #0
   45970:	mov	r5, r3
   45974:	mov	r8, r2
   45978:	str	r1, [sp, #12]
   4597c:	str	r0, [sp, #8]
   45980:	lsl	r0, r0, #2
   45984:	bl	35350 <__assert_fail@plt+0x228a0>
   45988:	cmp	r0, #0
   4598c:	str	r0, [sp, #16]
   45990:	beq	45a8c <__assert_fail@plt+0x32fdc>
   45994:	ldr	r0, [sl, #4]
   45998:	cmp	r0, #1
   4599c:	blt	45a4c <__assert_fail@plt+0x32f9c>
   459a0:	mov	r9, #0
   459a4:	ldr	r0, [sl, #8]
   459a8:	ldr	r1, [sp, #4]
   459ac:	ldr	r2, [r0, r9, lsl #2]
   459b0:	ldr	r1, [r1, #24]
   459b4:	add	r0, r2, r2, lsl #1
   459b8:	add	r1, r1, r0, lsl #2
   459bc:	ldr	r0, [r1, #4]
   459c0:	cmp	r0, #1
   459c4:	blt	45a2c <__assert_fail@plt+0x32f7c>
   459c8:	ldr	r7, [sp, #4]
   459cc:	ldr	r3, [r1, #8]
   459d0:	ldr	r7, [r7]
   459d4:	b	459e4 <__assert_fail@plt+0x32f34>
   459d8:	add	r3, r3, #4
   459dc:	subs	r0, r0, #1
   459e0:	beq	45a2c <__assert_fail@plt+0x32f7c>
   459e4:	ldr	r6, [r3]
   459e8:	add	r4, r7, r6, lsl #3
   459ec:	ldrb	r4, [r4, #4]
   459f0:	cmp	r4, r5
   459f4:	bne	459d8 <__assert_fail@plt+0x32f28>
   459f8:	ldr	r4, [r7, r6, lsl #3]
   459fc:	cmp	r4, r8
   45a00:	bne	459d8 <__assert_fail@plt+0x32f28>
   45a04:	cmn	r6, #1
   45a08:	beq	45a2c <__assert_fail@plt+0x32f7c>
   45a0c:	ldr	r0, [sp, #4]
   45a10:	add	r1, sp, #8
   45a14:	mov	r3, r8
   45a18:	str	r5, [sp]
   45a1c:	bl	46050 <__assert_fail@plt+0x335a0>
   45a20:	cmp	r0, #0
   45a24:	beq	45a3c <__assert_fail@plt+0x32f8c>
   45a28:	b	45a74 <__assert_fail@plt+0x32fc4>
   45a2c:	add	r0, sp, #8
   45a30:	bl	41ea8 <__assert_fail@plt+0x2f3f8>
   45a34:	cmp	r0, #0
   45a38:	bne	45a74 <__assert_fail@plt+0x32fc4>
   45a3c:	ldr	r0, [sl, #4]
   45a40:	add	r9, r9, #1
   45a44:	cmp	r9, r0
   45a48:	blt	459a4 <__assert_fail@plt+0x32ef4>
   45a4c:	ldr	r0, [sl, #8]
   45a50:	bl	32910 <__assert_fail@plt+0x1fe60>
   45a54:	vldr	d16, [sp, #8]
   45a58:	ldr	r0, [sp, #16]
   45a5c:	mov	r7, #0
   45a60:	str	r0, [sl, #8]
   45a64:	vstr	d16, [sl]
   45a68:	mov	r0, r7
   45a6c:	sub	sp, fp, #28
   45a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45a74:	mov	r7, r0
   45a78:	ldr	r0, [sp, #16]
   45a7c:	bl	32910 <__assert_fail@plt+0x1fe60>
   45a80:	mov	r0, r7
   45a84:	sub	sp, fp, #28
   45a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45a8c:	mov	r7, #12
   45a90:	mov	r0, r7
   45a94:	sub	sp, fp, #28
   45a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45a9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45aa0:	add	fp, sp, #28
   45aa4:	sub	sp, sp, #52	; 0x34
   45aa8:	ldr	ip, [r0, #108]	; 0x6c
   45aac:	mov	lr, r1
   45ab0:	ldr	r1, [r0, #84]	; 0x54
   45ab4:	str	r0, [sp, #24]
   45ab8:	mov	sl, r2
   45abc:	mov	r8, #0
   45ac0:	mov	r0, #0
   45ac4:	cmp	ip, #1
   45ac8:	str	r1, [sp, #28]
   45acc:	blt	45b10 <__assert_fail@plt+0x33060>
   45ad0:	ldr	r0, [sp, #24]
   45ad4:	mov	r7, #1
   45ad8:	mov	r1, ip
   45adc:	ldr	r2, [r0, #116]	; 0x74
   45ae0:	mov	r0, #0
   45ae4:	add	r6, r1, r0
   45ae8:	add	r6, r6, r6, lsr #31
   45aec:	asr	r4, r6, #1
   45af0:	add	r5, r4, r4, lsl #1
   45af4:	add	r5, r2, r5, lsl #3
   45af8:	ldr	r5, [r5, #4]
   45afc:	cmp	r5, sl
   45b00:	addlt	r0, r7, r6, asr #1
   45b04:	movge	r1, r4
   45b08:	cmp	r0, r1
   45b0c:	blt	45ae4 <__assert_fail@plt+0x33034>
   45b10:	cmp	r0, ip
   45b14:	bge	46034 <__assert_fail@plt+0x33584>
   45b18:	cmn	r0, #1
   45b1c:	beq	46034 <__assert_fail@plt+0x33584>
   45b20:	ldr	r1, [sp, #24]
   45b24:	add	r0, r0, r0, lsl #1
   45b28:	str	r0, [sp, #8]
   45b2c:	ldr	r1, [r1, #116]	; 0x74
   45b30:	add	r0, r1, r0, lsl #3
   45b34:	ldr	r0, [r0, #4]
   45b38:	cmp	r0, sl
   45b3c:	bne	46034 <__assert_fail@plt+0x33584>
   45b40:	str	r3, [sp, #12]
   45b44:	mov	r9, #1
   45b48:	str	lr, [sp, #16]
   45b4c:	ldr	r0, [sp, #8]
   45b50:	add	r0, r1, r0, lsl #3
   45b54:	mov	r8, r0
   45b58:	ldr	r0, [lr, #4]
   45b5c:	cmp	r0, #1
   45b60:	bge	45c14 <__assert_fail@plt+0x33164>
   45b64:	b	45bf4 <__assert_fail@plt+0x33144>
   45b68:	mov	r0, #4
   45b6c:	str	r9, [sp, #36]	; 0x24
   45b70:	mov	r4, r1
   45b74:	str	r9, [sp, #32]
   45b78:	bl	35350 <__assert_fail@plt+0x228a0>
   45b7c:	cmp	r0, #0
   45b80:	str	r0, [sp, #40]	; 0x28
   45b84:	beq	45ea8 <__assert_fail@plt+0x333f8>
   45b88:	str	r4, [r0]
   45b8c:	mov	r0, #0
   45b90:	str	r0, [fp, #-32]	; 0xffffffe0
   45b94:	ldr	r1, [sp, #28]
   45b98:	sub	r0, fp, #32
   45b9c:	add	r2, sp, #32
   45ba0:	bl	46194 <__assert_fail@plt+0x336e4>
   45ba4:	ldr	r4, [sp, #24]
   45ba8:	ldr	r1, [r4, #100]	; 0x64
   45bac:	str	r0, [r1, r7, lsl #2]
   45bb0:	ldr	r0, [sp, #40]	; 0x28
   45bb4:	bl	32910 <__assert_fail@plt+0x1fe60>
   45bb8:	ldr	r0, [r4, #100]	; 0x64
   45bbc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   45bc0:	ldr	r0, [r0, r7, lsl #2]
   45bc4:	cmp	r1, #0
   45bc8:	mov	r2, r1
   45bcc:	movwne	r2, #1
   45bd0:	clz	r0, r0
   45bd4:	lsr	r0, r0, #5
   45bd8:	ands	r0, r0, r2
   45bdc:	ldreq	r1, [sp, #20]
   45be0:	str	r1, [sp, #20]
   45be4:	ldr	lr, [sp, #16]
   45be8:	cmp	r0, #0
   45bec:	cmpne	r0, #4
   45bf0:	bne	4601c <__assert_fail@plt+0x3356c>
   45bf4:	ldrb	r1, [r8, #20]
   45bf8:	add	r0, r8, #24
   45bfc:	cmp	r1, #0
   45c00:	beq	46030 <__assert_fail@plt+0x33580>
   45c04:	mov	r8, r0
   45c08:	ldr	r0, [lr, #4]
   45c0c:	cmp	r0, #1
   45c10:	blt	45bf4 <__assert_fail@plt+0x33144>
   45c14:	subs	r6, r0, #1
   45c18:	ldr	r2, [r8]
   45c1c:	ldr	r0, [lr, #8]
   45c20:	mov	r3, #0
   45c24:	beq	45c4c <__assert_fail@plt+0x3319c>
   45c28:	mov	r1, r6
   45c2c:	add	r7, r3, r1
   45c30:	lsr	r5, r7, #1
   45c34:	ldr	r4, [r0, r5, lsl #2]
   45c38:	cmp	r4, r2
   45c3c:	addlt	r3, r9, r7, lsr #1
   45c40:	movge	r1, r5
   45c44:	cmp	r3, r1
   45c48:	bcc	45c2c <__assert_fail@plt+0x3317c>
   45c4c:	ldr	r1, [r0, r3, lsl #2]
   45c50:	cmp	r1, r2
   45c54:	bne	45bf4 <__assert_fail@plt+0x33144>
   45c58:	ldr	r3, [r8, #12]
   45c5c:	ldr	r1, [r8, #8]
   45c60:	add	r3, r3, sl
   45c64:	sub	r7, r3, r1
   45c68:	cmp	r7, sl
   45c6c:	bne	45d64 <__assert_fail@plt+0x332b4>
   45c70:	ldr	r1, [sp, #28]
   45c74:	add	r2, r2, r2, lsl #1
   45c78:	cmp	r6, #0
   45c7c:	ldr	r1, [r1, #20]
   45c80:	add	r1, r1, r2, lsl #2
   45c84:	mov	r2, #0
   45c88:	ldr	r1, [r1, #8]
   45c8c:	ldr	r4, [r1]
   45c90:	beq	45cb4 <__assert_fail@plt+0x33204>
   45c94:	add	r1, r2, r6
   45c98:	lsr	r3, r1, #1
   45c9c:	ldr	r7, [r0, r3, lsl #2]
   45ca0:	cmp	r7, r4
   45ca4:	addlt	r2, r9, r1, lsr #1
   45ca8:	movge	r6, r3
   45cac:	cmp	r2, r6
   45cb0:	bcc	45c94 <__assert_fail@plt+0x331e4>
   45cb4:	ldr	r1, [r0, r2, lsl #2]
   45cb8:	mov	r0, #4
   45cbc:	cmp	r1, r4
   45cc0:	beq	45be8 <__assert_fail@plt+0x33138>
   45cc4:	mov	r0, #4
   45cc8:	str	r9, [sp, #36]	; 0x24
   45ccc:	str	r9, [sp, #32]
   45cd0:	bl	35350 <__assert_fail@plt+0x228a0>
   45cd4:	cmp	r0, #0
   45cd8:	str	r0, [sp, #40]	; 0x28
   45cdc:	beq	45e94 <__assert_fail@plt+0x333e4>
   45ce0:	mov	r6, #0
   45ce4:	str	r4, [r0]
   45ce8:	ldr	r0, [sp, #28]
   45cec:	ldr	r2, [sp, #12]
   45cf0:	ldr	r3, [fp, #8]
   45cf4:	add	r4, sp, #32
   45cf8:	str	r6, [fp, #-32]	; 0xffffffe0
   45cfc:	mov	r1, r4
   45d00:	bl	45954 <__assert_fail@plt+0x32ea4>
   45d04:	ldr	r5, [sp, #16]
   45d08:	mov	r7, r0
   45d0c:	mov	r1, r4
   45d10:	mov	r0, r5
   45d14:	bl	41ea8 <__assert_fail@plt+0x2f3f8>
   45d18:	mov	r4, r0
   45d1c:	ldr	r0, [sp, #40]	; 0x28
   45d20:	bl	32910 <__assert_fail@plt+0x1fe60>
   45d24:	orr	r0, r7, r6
   45d28:	mov	lr, r5
   45d2c:	orrs	r0, r0, r4
   45d30:	mov	r0, #2
   45d34:	beq	45be8 <__assert_fail@plt+0x33138>
   45d38:	cmp	r7, #0
   45d3c:	mov	r0, #1
   45d40:	movne	r4, r7
   45d44:	cmp	r6, #0
   45d48:	movne	r4, r6
   45d4c:	str	r4, [fp, #-32]	; 0xffffffe0
   45d50:	str	r4, [sp, #20]
   45d54:	cmp	r0, #0
   45d58:	cmpne	r0, #4
   45d5c:	beq	45bf4 <__assert_fail@plt+0x33144>
   45d60:	b	4601c <__assert_fail@plt+0x3356c>
   45d64:	ldr	r0, [sp, #24]
   45d68:	ldr	r0, [r0, #100]	; 0x64
   45d6c:	ldr	r5, [r0, r7, lsl #2]
   45d70:	ldr	r0, [sp, #28]
   45d74:	ldr	r0, [r0, #12]
   45d78:	cmp	r5, #0
   45d7c:	ldr	r1, [r0, r2, lsl #2]
   45d80:	beq	45b68 <__assert_fail@plt+0x330b8>
   45d84:	ldr	ip, [r5, #8]
   45d88:	cmp	ip, #0
   45d8c:	ble	45e4c <__assert_fail@plt+0x3339c>
   45d90:	ldr	r0, [r5, #12]
   45d94:	subs	r3, ip, #1
   45d98:	mov	r2, #0
   45d9c:	str	r7, [sp, #4]
   45da0:	beq	45dc4 <__assert_fail@plt+0x33314>
   45da4:	add	r6, r2, r3
   45da8:	lsr	r7, r6, #1
   45dac:	ldr	r4, [r0, r7, lsl #2]
   45db0:	cmp	r4, r1
   45db4:	addlt	r2, r9, r6, lsr #1
   45db8:	movge	r3, r7
   45dbc:	cmp	r2, r3
   45dc0:	bcc	45da4 <__assert_fail@plt+0x332f4>
   45dc4:	ldr	r2, [r0, r2, lsl #2]
   45dc8:	mov	r0, #4
   45dcc:	cmp	r2, r1
   45dd0:	beq	45be8 <__assert_fail@plt+0x33138>
   45dd4:	ldr	r7, [sp, #4]
   45dd8:	mov	r4, r1
   45ddc:	cmp	ip, #1
   45de0:	str	ip, [sp, #36]	; 0x24
   45de4:	blt	45e54 <__assert_fail@plt+0x333a4>
   45de8:	lsl	r0, ip, #2
   45dec:	str	ip, [sp, #32]
   45df0:	bl	35350 <__assert_fail@plt+0x228a0>
   45df4:	cmp	r0, #0
   45df8:	str	r0, [sp, #40]	; 0x28
   45dfc:	beq	45efc <__assert_fail@plt+0x3344c>
   45e00:	ldr	r2, [r5, #8]
   45e04:	ldr	r1, [r5, #12]
   45e08:	mov	r5, r0
   45e0c:	lsl	r2, r2, #2
   45e10:	bl	124e0 <memcpy@plt>
   45e14:	ldr	r1, [sp, #32]
   45e18:	mov	r6, #0
   45e1c:	str	r6, [fp, #-32]	; 0xffffffe0
   45e20:	cmp	r1, #0
   45e24:	beq	45e68 <__assert_fail@plt+0x333b8>
   45e28:	ldr	r0, [sp, #36]	; 0x24
   45e2c:	cmp	r0, #0
   45e30:	bne	45f10 <__assert_fail@plt+0x33460>
   45e34:	str	r4, [r5]
   45e38:	str	r9, [sp, #36]	; 0x24
   45e3c:	mov	r6, #0
   45e40:	cmp	r6, #0
   45e44:	beq	45b94 <__assert_fail@plt+0x330e4>
   45e48:	b	45ed4 <__assert_fail@plt+0x33424>
   45e4c:	mov	r4, r1
   45e50:	str	ip, [sp, #36]	; 0x24
   45e54:	mov	r6, #0
   45e58:	str	r6, [sp, #36]	; 0x24
   45e5c:	str	r6, [sp, #32]
   45e60:	str	r6, [sp, #40]	; 0x28
   45e64:	str	r6, [fp, #-32]	; 0xffffffe0
   45e68:	mov	r0, #4
   45e6c:	str	r9, [sp, #36]	; 0x24
   45e70:	str	r9, [sp, #32]
   45e74:	bl	35350 <__assert_fail@plt+0x228a0>
   45e78:	cmp	r0, #0
   45e7c:	str	r0, [sp, #40]	; 0x28
   45e80:	beq	45ec8 <__assert_fail@plt+0x33418>
   45e84:	str	r4, [r0]
   45e88:	cmp	r6, #0
   45e8c:	beq	45b94 <__assert_fail@plt+0x330e4>
   45e90:	b	45ed4 <__assert_fail@plt+0x33424>
   45e94:	mov	r0, #0
   45e98:	mov	r6, #12
   45e9c:	str	r0, [sp, #32]
   45ea0:	str	r0, [sp, #36]	; 0x24
   45ea4:	b	45ce8 <__assert_fail@plt+0x33238>
   45ea8:	mov	r0, #0
   45eac:	mov	r1, #12
   45eb0:	str	r0, [sp, #32]
   45eb4:	str	r0, [sp, #36]	; 0x24
   45eb8:	mov	r0, #12
   45ebc:	str	r1, [fp, #-32]	; 0xffffffe0
   45ec0:	str	r0, [sp, #20]
   45ec4:	b	45ef4 <__assert_fail@plt+0x33444>
   45ec8:	mov	r0, #0
   45ecc:	str	r0, [sp, #32]
   45ed0:	str	r0, [sp, #36]	; 0x24
   45ed4:	clz	r0, r6
   45ed8:	lsr	r4, r0, #5
   45edc:	ldr	r0, [sp, #40]	; 0x28
   45ee0:	bl	32910 <__assert_fail@plt+0x1fe60>
   45ee4:	cmp	r4, #0
   45ee8:	movwne	r6, #12
   45eec:	str	r6, [sp, #20]
   45ef0:	str	r6, [fp, #-32]	; 0xffffffe0
   45ef4:	mov	r0, #1
   45ef8:	b	45be4 <__assert_fail@plt+0x33134>
   45efc:	mov	r0, #0
   45f00:	mov	r6, #12
   45f04:	str	r0, [sp, #32]
   45f08:	str	r0, [sp, #36]	; 0x24
   45f0c:	b	45e64 <__assert_fail@plt+0x333b4>
   45f10:	cmp	r1, r0
   45f14:	bne	45f40 <__assert_fail@plt+0x33490>
   45f18:	lsl	r0, r1, #1
   45f1c:	lsl	r1, r1, #3
   45f20:	str	r0, [sp, #32]
   45f24:	mov	r0, r5
   45f28:	bl	36110 <__assert_fail@plt+0x23660>
   45f2c:	cmp	r0, #0
   45f30:	beq	46014 <__assert_fail@plt+0x33564>
   45f34:	str	r0, [sp, #40]	; 0x28
   45f38:	mov	r5, r0
   45f3c:	ldr	r0, [sp, #36]	; 0x24
   45f40:	ldr	r1, [r5]
   45f44:	cmp	r1, r4
   45f48:	ble	45fbc <__assert_fail@plt+0x3350c>
   45f4c:	cmp	r0, #1
   45f50:	blt	45ff0 <__assert_fail@plt+0x33540>
   45f54:	ands	r2, r0, #3
   45f58:	sub	r1, r0, #1
   45f5c:	beq	45f80 <__assert_fail@plt+0x334d0>
   45f60:	add	r6, r5, r0, lsl #2
   45f64:	mov	r3, r6
   45f68:	ldr	r7, [r3, #-4]!
   45f6c:	subs	r2, r2, #1
   45f70:	sub	r0, r0, #1
   45f74:	str	r7, [r6]
   45f78:	mov	r6, r3
   45f7c:	bne	45f68 <__assert_fail@plt+0x334b8>
   45f80:	cmp	r1, #3
   45f84:	bcc	45fb4 <__assert_fail@plt+0x33504>
   45f88:	add	r1, r5, r0, lsl #2
   45f8c:	sub	r1, r1, #8
   45f90:	ldr	r6, [r1, #4]
   45f94:	ldmda	r1, {r2, r3, r7}
   45f98:	sub	ip, r1, #4
   45f9c:	sub	r0, r0, #4
   45fa0:	cmp	r0, #0
   45fa4:	stm	ip, {r2, r3, r7}
   45fa8:	str	r6, [r1, #8]
   45fac:	sub	r1, r1, #16
   45fb0:	bgt	45f90 <__assert_fail@plt+0x334e0>
   45fb4:	mov	r0, #0
   45fb8:	b	45ff0 <__assert_fail@plt+0x33540>
   45fbc:	add	r1, r5, r0, lsl #2
   45fc0:	ldr	r2, [r1, #-4]
   45fc4:	cmp	r2, r4
   45fc8:	ble	45ff0 <__assert_fail@plt+0x33540>
   45fcc:	sub	r0, r0, #2
   45fd0:	mov	r3, r4
   45fd4:	str	r2, [r1]
   45fd8:	sub	r0, r0, #1
   45fdc:	ldr	r2, [r1, #-8]
   45fe0:	sub	r1, r1, #4
   45fe4:	cmp	r2, r3
   45fe8:	bgt	45fd4 <__assert_fail@plt+0x33524>
   45fec:	add	r0, r0, #2
   45ff0:	str	r4, [r5, r0, lsl #2]
   45ff4:	ldr	r7, [sp, #4]
   45ff8:	mov	r6, #0
   45ffc:	ldr	r0, [sp, #36]	; 0x24
   46000:	add	r0, r0, #1
   46004:	str	r0, [sp, #36]	; 0x24
   46008:	cmp	r6, #0
   4600c:	beq	45b94 <__assert_fail@plt+0x330e4>
   46010:	b	45ed4 <__assert_fail@plt+0x33424>
   46014:	mov	r6, #0
   46018:	b	45ed4 <__assert_fail@plt+0x33424>
   4601c:	cmp	r0, #2
   46020:	bne	46040 <__assert_fail@plt+0x33590>
   46024:	ldr	r0, [sp, #24]
   46028:	ldr	r1, [r0, #116]	; 0x74
   4602c:	b	45b4c <__assert_fail@plt+0x3309c>
   46030:	mov	r8, #0
   46034:	mov	r0, r8
   46038:	sub	sp, fp, #28
   4603c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46040:	ldr	r8, [sp, #20]
   46044:	mov	r0, r8
   46048:	sub	sp, fp, #28
   4604c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46050:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46054:	add	fp, sp, #28
   46058:	sub	sp, sp, #4
   4605c:	ldr	r4, [fp, #8]
   46060:	mov	r9, r3
   46064:	mov	r7, r2
   46068:	mov	r8, r1
   4606c:	mov	sl, r0
   46070:	mov	r5, #1
   46074:	ldr	r0, [r8, #4]
   46078:	cmp	r0, #1
   4607c:	bge	460a4 <__assert_fail@plt+0x335f4>
   46080:	b	460e8 <__assert_fail@plt+0x33638>
   46084:	cmp	r2, #0
   46088:	beq	4617c <__assert_fail@plt+0x336cc>
   4608c:	add	r0, r0, r7, lsl #2
   46090:	ldr	r0, [r0, #8]
   46094:	ldr	r7, [r0]
   46098:	ldr	r0, [r8, #4]
   4609c:	cmp	r0, #1
   460a0:	blt	460e8 <__assert_fail@plt+0x33638>
   460a4:	subs	r2, r0, #1
   460a8:	ldr	r0, [r8, #8]
   460ac:	mov	ip, r4
   460b0:	mov	r1, #0
   460b4:	beq	460d8 <__assert_fail@plt+0x33628>
   460b8:	add	r3, r1, r2
   460bc:	lsr	r6, r3, #1
   460c0:	ldr	r4, [r0, r6, lsl #2]
   460c4:	cmp	r4, r7
   460c8:	addlt	r1, r5, r3, lsr #1
   460cc:	movge	r2, r6
   460d0:	cmp	r1, r2
   460d4:	bcc	460b8 <__assert_fail@plt+0x33608>
   460d8:	ldr	r0, [r0, r1, lsl #2]
   460dc:	mov	r4, ip
   460e0:	cmp	r0, r7
   460e4:	beq	4617c <__assert_fail@plt+0x336cc>
   460e8:	ldr	r0, [sl]
   460ec:	add	r1, r0, r7, lsl #3
   460f0:	ldrb	r1, [r1, #4]
   460f4:	cmp	r1, r4
   460f8:	bne	46108 <__assert_fail@plt+0x33658>
   460fc:	ldr	r0, [r0, r7, lsl #3]
   46100:	cmp	r0, r9
   46104:	beq	46160 <__assert_fail@plt+0x336b0>
   46108:	mov	r0, r8
   4610c:	mov	r1, r7
   46110:	bl	42048 <__assert_fail@plt+0x2f598>
   46114:	cmp	r0, #0
   46118:	beq	46188 <__assert_fail@plt+0x336d8>
   4611c:	ldr	r0, [sl, #20]
   46120:	add	r7, r7, r7, lsl #1
   46124:	add	r1, r0, r7, lsl #2
   46128:	ldr	r2, [r1, #4]
   4612c:	cmp	r2, #2
   46130:	bne	46084 <__assert_fail@plt+0x335d4>
   46134:	ldr	r0, [r1, #8]
   46138:	mov	r1, r8
   4613c:	mov	r3, r9
   46140:	ldr	r2, [r0, #4]
   46144:	mov	r0, sl
   46148:	str	r4, [sp]
   4614c:	bl	46050 <__assert_fail@plt+0x335a0>
   46150:	cmp	r0, #0
   46154:	bne	46180 <__assert_fail@plt+0x336d0>
   46158:	ldr	r0, [sl, #20]
   4615c:	b	4608c <__assert_fail@plt+0x335dc>
   46160:	cmp	r4, #9
   46164:	bne	4617c <__assert_fail@plt+0x336cc>
   46168:	mov	r0, r8
   4616c:	mov	r1, r7
   46170:	bl	42048 <__assert_fail@plt+0x2f598>
   46174:	cmp	r0, #0
   46178:	beq	46188 <__assert_fail@plt+0x336d8>
   4617c:	mov	r0, #0
   46180:	sub	sp, fp, #28
   46184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46188:	mov	r0, #12
   4618c:	sub	sp, fp, #28
   46190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46194:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46198:	add	fp, sp, #28
   4619c:	sub	sp, sp, #4
   461a0:	ldr	r9, [r2, #4]
   461a4:	cmp	r9, #0
   461a8:	beq	46474 <__assert_fail@plt+0x339c4>
   461ac:	mov	r6, r2
   461b0:	mov	r8, r1
   461b4:	cmp	r9, #1
   461b8:	mov	r7, r9
   461bc:	blt	462a8 <__assert_fail@plt+0x337f8>
   461c0:	ldr	ip, [r6, #8]
   461c4:	mov	sl, #0
   461c8:	cmp	r9, #4
   461cc:	mov	r7, r9
   461d0:	bcc	46290 <__assert_fail@plt+0x337e0>
   461d4:	mov	r3, #0
   461d8:	bic	sl, r9, #3
   461dc:	mov	r1, #1
   461e0:	str	r8, [sp]
   461e4:	vdup.32	q8, r3
   461e8:	sub	r4, sl, #4
   461ec:	add	r1, r1, r4, lsr #2
   461f0:	cmp	r4, #12
   461f4:	and	lr, r1, #3
   461f8:	vmov.32	d16[0], r9
   461fc:	bcc	46250 <__assert_fail@plt+0x337a0>
   46200:	sub	r5, r1, lr
   46204:	mov	r3, #0
   46208:	mov	r4, #64	; 0x40
   4620c:	mov	r7, ip
   46210:	mov	r1, ip
   46214:	vld1.32	{d18-d19}, [r1], r4
   46218:	add	r8, r7, #16
   4621c:	add	r2, r7, #32
   46220:	subs	r5, r5, #4
   46224:	add	r3, r3, #16
   46228:	vld1.32	{d20-d21}, [r8]
   4622c:	vadd.i32	q8, q9, q8
   46230:	vld1.32	{d18-d19}, [r2]
   46234:	add	r2, r7, #48	; 0x30
   46238:	mov	r7, r1
   4623c:	vadd.i32	q8, q10, q8
   46240:	vld1.32	{d20-d21}, [r2]
   46244:	vadd.i32	q8, q9, q8
   46248:	vadd.i32	q8, q10, q8
   4624c:	bne	46214 <__assert_fail@plt+0x33764>
   46250:	cmp	lr, #0
   46254:	beq	46270 <__assert_fail@plt+0x337c0>
   46258:	add	r1, ip, r3, lsl #2
   4625c:	rsb	r3, lr, #0
   46260:	vld1.32	{d18-d19}, [r1]!
   46264:	adds	r3, r3, #1
   46268:	vadd.i32	q8, q9, q8
   4626c:	bcc	46260 <__assert_fail@plt+0x337b0>
   46270:	vext.8	q9, q8, q8, #8
   46274:	ldr	r8, [sp]
   46278:	cmp	r9, sl
   4627c:	vadd.i32	q8, q8, q9
   46280:	vdup.32	q9, d16[1]
   46284:	vadd.i32	q8, q8, q9
   46288:	vmov.32	r7, d16[0]
   4628c:	beq	462a8 <__assert_fail@plt+0x337f8>
   46290:	add	r1, ip, sl, lsl #2
   46294:	sub	r2, r9, sl
   46298:	ldr	r3, [r1], #4
   4629c:	subs	r2, r2, #1
   462a0:	add	r7, r3, r7
   462a4:	bne	46298 <__assert_fail@plt+0x337e8>
   462a8:	ldr	r1, [r8, #68]	; 0x44
   462ac:	ldr	r2, [r8, #32]
   462b0:	str	r0, [sp]
   462b4:	and	r1, r1, r7
   462b8:	add	r3, r1, r1, lsl #1
   462bc:	ldr	r1, [r2, r3, lsl #2]
   462c0:	cmp	r1, #1
   462c4:	blt	46348 <__assert_fail@plt+0x33898>
   462c8:	cmp	r6, #0
   462cc:	beq	46348 <__assert_fail@plt+0x33898>
   462d0:	add	r2, r2, r3, lsl #2
   462d4:	sub	ip, r9, #1
   462d8:	mov	r5, #0
   462dc:	ldr	lr, [r2, #8]
   462e0:	ldr	r4, [lr, r5, lsl #2]
   462e4:	ldr	r3, [r4]
   462e8:	cmp	r7, r3
   462ec:	beq	4630c <__assert_fail@plt+0x3385c>
   462f0:	add	r5, r5, #1
   462f4:	cmp	r5, r1
   462f8:	bge	46348 <__assert_fail@plt+0x33898>
   462fc:	ldr	r4, [lr, r5, lsl #2]
   46300:	ldr	r3, [r4]
   46304:	cmp	r7, r3
   46308:	bne	462f0 <__assert_fail@plt+0x33840>
   4630c:	ldr	r3, [r4, #8]
   46310:	cmp	r3, r9
   46314:	bne	462f0 <__assert_fail@plt+0x33840>
   46318:	mov	r3, ip
   4631c:	add	r0, r3, #1
   46320:	cmp	r0, #1
   46324:	blt	46468 <__assert_fail@plt+0x339b8>
   46328:	ldr	r0, [r6, #8]
   4632c:	ldr	r2, [r4, #12]
   46330:	ldr	r0, [r0, r3, lsl #2]
   46334:	ldr	r2, [r2, r3, lsl #2]
   46338:	sub	r3, r3, #1
   4633c:	cmp	r2, r0
   46340:	beq	4631c <__assert_fail@plt+0x3386c>
   46344:	b	462f0 <__assert_fail@plt+0x33840>
   46348:	mov	r0, #56	; 0x38
   4634c:	mov	r1, #1
   46350:	bl	322c0 <__assert_fail@plt+0x1f810>
   46354:	cmp	r0, #0
   46358:	beq	464a8 <__assert_fail@plt+0x339f8>
   4635c:	mov	r4, r0
   46360:	ldr	r0, [r6, #4]
   46364:	add	sl, r4, #4
   46368:	cmp	r0, #1
   4636c:	str	r0, [r4, #8]
   46370:	blt	46438 <__assert_fail@plt+0x33988>
   46374:	str	r0, [r4, #4]
   46378:	lsl	r0, r0, #2
   4637c:	bl	35350 <__assert_fail@plt+0x228a0>
   46380:	cmp	r0, #0
   46384:	str	r0, [r4, #12]
   46388:	beq	46494 <__assert_fail@plt+0x339e4>
   4638c:	ldmib	r6, {r5, r6}
   46390:	mov	r1, r6
   46394:	mov	r9, r8
   46398:	lsl	r2, r5, #2
   4639c:	bl	124e0 <memcpy@plt>
   463a0:	cmp	r5, #1
   463a4:	str	sl, [r4, #40]	; 0x28
   463a8:	blt	46450 <__assert_fail@plt+0x339a0>
   463ac:	movw	ip, #65280	; 0xff00
   463b0:	ldr	sl, [r9]
   463b4:	mov	lr, #32
   463b8:	movt	ip, #3
   463bc:	add	r8, ip, #255	; 0xff
   463c0:	b	463e4 <__assert_fail@plt+0x33934>
   463c4:	ldr	r0, [r1]
   463c8:	tst	r0, ip
   463cc:	beq	463d8 <__assert_fail@plt+0x33928>
   463d0:	orr	r0, r3, #128	; 0x80
   463d4:	strb	r0, [r4, #52]	; 0x34
   463d8:	add	r6, r6, #4
   463dc:	subs	r5, r5, #1
   463e0:	beq	46450 <__assert_fail@plt+0x339a0>
   463e4:	ldr	r0, [r6]
   463e8:	add	r1, sl, r0, lsl #3
   463ec:	ldr	r0, [r1, #4]!
   463f0:	and	r3, r0, r8
   463f4:	cmp	r3, #1
   463f8:	beq	463d8 <__assert_fail@plt+0x33928>
   463fc:	ldrb	r2, [r4, #52]	; 0x34
   46400:	and	r3, lr, r0, lsr #15
   46404:	uxtb	r0, r0
   46408:	cmp	r0, #12
   4640c:	orr	r3, r2, r3
   46410:	strb	r3, [r4, #52]	; 0x34
   46414:	beq	463d0 <__assert_fail@plt+0x33920>
   46418:	cmp	r0, #4
   4641c:	beq	46430 <__assert_fail@plt+0x33980>
   46420:	cmp	r0, #2
   46424:	bne	463c4 <__assert_fail@plt+0x33914>
   46428:	orr	r0, r3, #16
   4642c:	b	463d4 <__assert_fail@plt+0x33924>
   46430:	orr	r0, r3, #64	; 0x40
   46434:	b	463d4 <__assert_fail@plt+0x33924>
   46438:	mov	r0, #0
   4643c:	mov	r9, r8
   46440:	str	r0, [sl]
   46444:	str	r0, [sl, #4]
   46448:	str	r0, [sl, #8]
   4644c:	str	sl, [r4, #40]	; 0x28
   46450:	mov	r0, r9
   46454:	mov	r1, r4
   46458:	mov	r2, r7
   4645c:	bl	42c28 <__assert_fail@plt+0x30178>
   46460:	cmp	r0, #0
   46464:	bne	46488 <__assert_fail@plt+0x339d8>
   46468:	mov	r0, r4
   4646c:	sub	sp, fp, #28
   46470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46474:	mov	r4, #0
   46478:	str	r4, [r0]
   4647c:	mov	r0, r4
   46480:	sub	sp, fp, #28
   46484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46488:	mov	r0, r4
   4648c:	bl	3bc20 <__assert_fail@plt+0x29170>
   46490:	b	464a8 <__assert_fail@plt+0x339f8>
   46494:	mov	r0, #0
   46498:	str	r0, [r4, #4]
   4649c:	str	r0, [r4, #8]
   464a0:	mov	r0, r4
   464a4:	bl	32910 <__assert_fail@plt+0x1fe60>
   464a8:	ldr	r1, [sp]
   464ac:	mov	r0, #12
   464b0:	mov	r4, #0
   464b4:	str	r0, [r1]
   464b8:	mov	r0, r4
   464bc:	sub	sp, fp, #28
   464c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   464c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   464c8:	add	fp, sp, #24
   464cc:	ldr	lr, [r0]
   464d0:	add	r7, lr, r1, lsl #3
   464d4:	ldrb	r9, [r7, #4]
   464d8:	cmp	r9, #7
   464dc:	beq	466dc <__assert_fail@plt+0x33c2c>
   464e0:	ldr	ip, [r2, #80]	; 0x50
   464e4:	mov	r6, #1
   464e8:	cmp	ip, #1
   464ec:	beq	4652c <__assert_fail@plt+0x33a7c>
   464f0:	ldr	r5, [r2, #28]
   464f4:	add	r7, r3, #1
   464f8:	cmp	r7, r5
   464fc:	bge	4652c <__assert_fail@plt+0x33a7c>
   46500:	ldr	r6, [r2, #8]
   46504:	sub	r5, r5, r3
   46508:	add	r7, r6, r3, lsl #2
   4650c:	mov	r6, #1
   46510:	ldr	r4, [r7, r6, lsl #2]
   46514:	cmn	r4, #1
   46518:	bne	4652c <__assert_fail@plt+0x33a7c>
   4651c:	add	r6, r6, #1
   46520:	cmp	r5, r6
   46524:	bne	46510 <__assert_fail@plt+0x33a60>
   46528:	mov	r6, r5
   4652c:	mov	r8, #0
   46530:	cmp	r9, #5
   46534:	bne	4657c <__assert_fail@plt+0x33acc>
   46538:	cmp	r6, #2
   4653c:	blt	466ac <__assert_fail@plt+0x33bfc>
   46540:	ldr	r0, [r0, #128]	; 0x80
   46544:	tst	r0, #64	; 0x40
   46548:	bne	4655c <__assert_fail@plt+0x33aac>
   4654c:	ldr	r1, [r2, #4]
   46550:	ldrb	r1, [r1, r3]
   46554:	cmp	r1, #10
   46558:	beq	466ac <__assert_fail@plt+0x33bfc>
   4655c:	tst	r0, #128	; 0x80
   46560:	beq	466a8 <__assert_fail@plt+0x33bf8>
   46564:	ldr	r0, [r2, #4]
   46568:	ldrb	r0, [r0, r3]
   4656c:	cmp	r0, #0
   46570:	movne	r8, r6
   46574:	mov	r0, r8
   46578:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   4657c:	cmp	r9, #6
   46580:	bne	466ac <__assert_fail@plt+0x33bfc>
   46584:	cmp	r6, #2
   46588:	blt	466ac <__assert_fail@plt+0x33bfc>
   4658c:	ldr	r7, [lr, r1, lsl #3]
   46590:	ldr	r0, [r7, #32]
   46594:	cmp	r0, #0
   46598:	bne	465b4 <__assert_fail@plt+0x33b04>
   4659c:	ldr	r1, [r7, #36]	; 0x24
   465a0:	cmp	r1, #0
   465a4:	bne	465b4 <__assert_fail@plt+0x33b04>
   465a8:	ldr	r1, [r7, #20]
   465ac:	cmp	r1, #0
   465b0:	beq	466c8 <__assert_fail@plt+0x33c18>
   465b4:	cmp	ip, #1
   465b8:	bne	465d4 <__assert_fail@plt+0x33b24>
   465bc:	ldr	r1, [r2, #4]
   465c0:	ldrb	r5, [r1, r3]
   465c4:	ldr	r1, [r7, #20]
   465c8:	cmp	r1, #1
   465cc:	bge	465e8 <__assert_fail@plt+0x33b38>
   465d0:	b	46608 <__assert_fail@plt+0x33b58>
   465d4:	ldr	r1, [r2, #8]
   465d8:	ldr	r5, [r1, r3, lsl #2]
   465dc:	ldr	r1, [r7, #20]
   465e0:	cmp	r1, #1
   465e4:	blt	46608 <__assert_fail@plt+0x33b58>
   465e8:	ldr	r2, [r7]
   465ec:	mov	r3, #0
   465f0:	ldr	r4, [r2, r3, lsl #2]
   465f4:	cmp	r5, r4
   465f8:	beq	46688 <__assert_fail@plt+0x33bd8>
   465fc:	add	r3, r3, #1
   46600:	cmp	r3, r1
   46604:	blt	465f0 <__assert_fail@plt+0x33b40>
   46608:	ldr	r1, [r7, #36]	; 0x24
   4660c:	cmp	r1, #1
   46610:	blt	46644 <__assert_fail@plt+0x33b94>
   46614:	mov	r4, #0
   46618:	ldr	r0, [r7, #12]
   4661c:	ldr	r1, [r0, r4, lsl #2]
   46620:	mov	r0, r5
   46624:	bl	123f0 <iswctype@plt>
   46628:	cmp	r0, #0
   4662c:	bne	46688 <__assert_fail@plt+0x33bd8>
   46630:	ldr	r0, [r7, #36]	; 0x24
   46634:	add	r4, r4, #1
   46638:	cmp	r4, r0
   4663c:	blt	46618 <__assert_fail@plt+0x33b68>
   46640:	ldr	r0, [r7, #32]
   46644:	cmp	r0, #1
   46648:	blt	466b4 <__assert_fail@plt+0x33c04>
   4664c:	ldr	r1, [r7, #4]
   46650:	mov	r2, #0
   46654:	ldr	r3, [r1, r2, lsl #2]
   46658:	cmp	r3, r5
   4665c:	bls	46678 <__assert_fail@plt+0x33bc8>
   46660:	add	r2, r2, #1
   46664:	cmp	r2, r0
   46668:	bge	466b4 <__assert_fail@plt+0x33c04>
   4666c:	ldr	r3, [r1, r2, lsl #2]
   46670:	cmp	r3, r5
   46674:	bhi	46660 <__assert_fail@plt+0x33bb0>
   46678:	ldr	r3, [r7, #8]
   4667c:	ldr	r3, [r3, r2, lsl #2]
   46680:	cmp	r5, r3
   46684:	bhi	46660 <__assert_fail@plt+0x33bb0>
   46688:	mov	r0, r6
   4668c:	ldrb	r1, [r7, #16]
   46690:	tst	r1, #1
   46694:	beq	466c4 <__assert_fail@plt+0x33c14>
   46698:	cmp	r0, #0
   4669c:	bgt	466ac <__assert_fail@plt+0x33bfc>
   466a0:	cmp	r6, #1
   466a4:	movle	r6, #1
   466a8:	mov	r8, r6
   466ac:	mov	r0, r8
   466b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   466b4:	mov	r0, #0
   466b8:	ldrb	r1, [r7, #16]
   466bc:	tst	r1, #1
   466c0:	bne	46698 <__assert_fail@plt+0x33be8>
   466c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   466c8:	mov	r5, #0
   466cc:	ldr	r1, [r7, #20]
   466d0:	cmp	r1, #1
   466d4:	bge	465e8 <__assert_fail@plt+0x33b38>
   466d8:	b	46608 <__assert_fail@plt+0x33b58>
   466dc:	ldr	r0, [r2, #4]
   466e0:	mov	r8, #0
   466e4:	ldrb	r6, [r0, r3]
   466e8:	cmp	r6, #194	; 0xc2
   466ec:	bcc	466ac <__assert_fail@plt+0x33bfc>
   466f0:	ldr	r2, [r2, #48]	; 0x30
   466f4:	add	r1, r3, #2
   466f8:	cmp	r1, r2
   466fc:	bgt	466ac <__assert_fail@plt+0x33bfc>
   46700:	add	r1, r3, r0
   46704:	cmp	r6, #223	; 0xdf
   46708:	ldrb	r7, [r1, #1]
   4670c:	bhi	46734 <__assert_fail@plt+0x33c84>
   46710:	cmp	r7, #192	; 0xc0
   46714:	mov	r0, #0
   46718:	movwcc	r0, #1
   4671c:	lsl	r8, r0, #1
   46720:	sxtb	r0, r7
   46724:	cmn	r0, #1
   46728:	movwgt	r8, #0
   4672c:	mov	r0, r8
   46730:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   46734:	cmp	r6, #239	; 0xef
   46738:	bhi	46754 <__assert_fail@plt+0x33ca4>
   4673c:	mov	r0, #3
   46740:	cmp	r6, #224	; 0xe0
   46744:	bne	467b0 <__assert_fail@plt+0x33d00>
   46748:	cmp	r7, #160	; 0xa0
   4674c:	bcc	466ac <__assert_fail@plt+0x33bfc>
   46750:	b	467b0 <__assert_fail@plt+0x33d00>
   46754:	cmp	r6, #247	; 0xf7
   46758:	bhi	46774 <__assert_fail@plt+0x33cc4>
   4675c:	mov	r0, #4
   46760:	cmp	r6, #240	; 0xf0
   46764:	bne	467b0 <__assert_fail@plt+0x33d00>
   46768:	cmp	r7, #144	; 0x90
   4676c:	bcc	466ac <__assert_fail@plt+0x33bfc>
   46770:	b	467b0 <__assert_fail@plt+0x33d00>
   46774:	cmp	r6, #251	; 0xfb
   46778:	bhi	46794 <__assert_fail@plt+0x33ce4>
   4677c:	mov	r0, #5
   46780:	cmp	r6, #248	; 0xf8
   46784:	bne	467b0 <__assert_fail@plt+0x33d00>
   46788:	cmp	r7, #136	; 0x88
   4678c:	bcc	466ac <__assert_fail@plt+0x33bfc>
   46790:	b	467b0 <__assert_fail@plt+0x33d00>
   46794:	cmp	r6, #253	; 0xfd
   46798:	bhi	466ac <__assert_fail@plt+0x33bfc>
   4679c:	mov	r0, #6
   467a0:	cmp	r6, #252	; 0xfc
   467a4:	bne	467b0 <__assert_fail@plt+0x33d00>
   467a8:	cmp	r7, #132	; 0x84
   467ac:	bcc	466ac <__assert_fail@plt+0x33bfc>
   467b0:	add	r3, r0, r3
   467b4:	cmp	r3, r2
   467b8:	bgt	466ac <__assert_fail@plt+0x33bfc>
   467bc:	ldrb	r2, [r1, #1]
   467c0:	sxtb	r3, r2
   467c4:	cmn	r3, #1
   467c8:	bgt	466ac <__assert_fail@plt+0x33bfc>
   467cc:	cmp	r2, #191	; 0xbf
   467d0:	bhi	466ac <__assert_fail@plt+0x33bfc>
   467d4:	ldrb	r2, [r1, #2]
   467d8:	sxtb	r3, r2
   467dc:	cmn	r3, #1
   467e0:	bgt	466ac <__assert_fail@plt+0x33bfc>
   467e4:	cmp	r2, #191	; 0xbf
   467e8:	bhi	466ac <__assert_fail@plt+0x33bfc>
   467ec:	cmp	r0, #3
   467f0:	beq	466c4 <__assert_fail@plt+0x33c14>
   467f4:	ldrb	r2, [r1, #3]
   467f8:	sxtb	r3, r2
   467fc:	cmn	r3, #1
   46800:	bgt	466ac <__assert_fail@plt+0x33bfc>
   46804:	cmp	r2, #191	; 0xbf
   46808:	bhi	466ac <__assert_fail@plt+0x33bfc>
   4680c:	cmp	r0, #4
   46810:	beq	466c4 <__assert_fail@plt+0x33c14>
   46814:	ldrb	r2, [r1, #4]
   46818:	sxtb	r3, r2
   4681c:	cmn	r3, #1
   46820:	bgt	466ac <__assert_fail@plt+0x33bfc>
   46824:	cmp	r2, #191	; 0xbf
   46828:	bhi	466ac <__assert_fail@plt+0x33bfc>
   4682c:	cmp	r0, #5
   46830:	beq	466c4 <__assert_fail@plt+0x33c14>
   46834:	ldrsb	r1, [r1, #5]
   46838:	uxtb	r2, r1
   4683c:	cmp	r2, #191	; 0xbf
   46840:	movwhi	r0, #0
   46844:	cmn	r1, #1
   46848:	movwgt	r0, #0
   4684c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   46850:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   46854:	add	fp, sp, #24
   46858:	ldr	r4, [r1, #4]
   4685c:	mov	r6, r0
   46860:	mvn	r0, #0
   46864:	mov	r8, #0
   46868:	uxtab	r3, r0, r4
   4686c:	cmp	r3, #6
   46870:	bhi	46a1c <__assert_fail@plt+0x33f6c>
   46874:	ldr	r0, [r6, #4]
   46878:	mov	r9, r1
   4687c:	ldrb	r1, [r0, r2]
   46880:	add	r7, pc, #4
   46884:	sxtb	r0, r1
   46888:	ldr	pc, [r7, r3, lsl #2]
   4688c:	andeq	r6, r4, r8, lsr #17
   46890:	andeq	r6, r4, ip, lsl sl
   46894:			; <UNDEFINED> instruction: 0x000468bc
   46898:	andeq	r6, r4, ip, lsl sl
   4689c:	andeq	r6, r4, r4, ror #17
   468a0:	andeq	r6, r4, ip, lsl sl
   468a4:	ldrdeq	r6, [r4], -ip
   468a8:	ldrb	r3, [r9]
   468ac:	uxtb	r7, r0
   468b0:	cmp	r3, r7
   468b4:	beq	46904 <__assert_fail@plt+0x33e54>
   468b8:	b	46a1c <__assert_fail@plt+0x33f6c>
   468bc:	ldr	r3, [r9]
   468c0:	ubfx	r7, r1, #5, #3
   468c4:	mov	r5, #1
   468c8:	ldr	r3, [r3, r7, lsl #2]
   468cc:	and	r7, r1, #31
   468d0:	tst	r3, r5, lsl r7
   468d4:	bne	46904 <__assert_fail@plt+0x33e54>
   468d8:	b	46a1c <__assert_fail@plt+0x33f6c>
   468dc:	cmp	r0, #0
   468e0:	bmi	46a1c <__assert_fail@plt+0x33f6c>
   468e4:	cmp	r1, #0
   468e8:	beq	469ac <__assert_fail@plt+0x33efc>
   468ec:	cmp	r1, #10
   468f0:	bne	46904 <__assert_fail@plt+0x33e54>
   468f4:	ldr	r3, [r6, #84]	; 0x54
   468f8:	ldrb	r3, [r3, #128]	; 0x80
   468fc:	tst	r3, #64	; 0x40
   46900:	beq	46a1c <__assert_fail@plt+0x33f6c>
   46904:	movw	r3, #65280	; 0xff00
   46908:	movt	r3, #3
   4690c:	tst	r4, r3
   46910:	beq	46970 <__assert_fail@plt+0x33ec0>
   46914:	cmn	r2, #1
   46918:	ble	46950 <__assert_fail@plt+0x33ea0>
   4691c:	ldr	r3, [r6, #48]	; 0x30
   46920:	cmp	r3, r2
   46924:	beq	46a3c <__assert_fail@plt+0x33f8c>
   46928:	ldr	r3, [r6, #80]	; 0x50
   4692c:	cmp	r3, #2
   46930:	blt	4697c <__assert_fail@plt+0x33ecc>
   46934:	ldr	r0, [r6, #8]
   46938:	ldr	r7, [r0, r2, lsl #2]
   4693c:	cmn	r7, #1
   46940:	bne	469c0 <__assert_fail@plt+0x33f10>
   46944:	sub	r2, r2, #1
   46948:	cmn	r2, #1
   4694c:	bne	46938 <__assert_fail@plt+0x33e88>
   46950:	ldr	r1, [r6, #60]	; 0x3c
   46954:	and	r0, r1, #1
   46958:	tst	r4, #1024	; 0x400
   4695c:	eor	r2, r0, #1
   46960:	beq	469f8 <__assert_fail@plt+0x33f48>
   46964:	cmp	r0, #0
   46968:	beq	46a1c <__assert_fail@plt+0x33f6c>
   4696c:	b	469f8 <__assert_fail@plt+0x33f48>
   46970:	mov	r8, #1
   46974:	mov	r0, r8
   46978:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   4697c:	ldr	r2, [r6, #68]	; 0x44
   46980:	ubfx	r3, r1, #5, #3
   46984:	and	r7, r1, #31
   46988:	mov	r1, #1
   4698c:	ldr	r3, [r2, r3, lsl #2]
   46990:	mov	r2, #0
   46994:	tst	r3, r1, lsl r7
   46998:	bne	469f8 <__assert_fail@plt+0x33f48>
   4699c:	mov	r1, #0
   469a0:	cmp	r0, #10
   469a4:	beq	469d8 <__assert_fail@plt+0x33f28>
   469a8:	b	469e8 <__assert_fail@plt+0x33f38>
   469ac:	ldr	r3, [r6, #84]	; 0x54
   469b0:	ldrb	r3, [r3, #128]	; 0x80
   469b4:	tst	r3, #128	; 0x80
   469b8:	bne	46a1c <__assert_fail@plt+0x33f6c>
   469bc:	b	46904 <__assert_fail@plt+0x33e54>
   469c0:	ldrb	r0, [r6, #78]	; 0x4e
   469c4:	cmp	r0, #0
   469c8:	bne	46a5c <__assert_fail@plt+0x33fac>
   469cc:	mov	r1, #0
   469d0:	cmp	r7, #10
   469d4:	bne	469e8 <__assert_fail@plt+0x33f38>
   469d8:	ldrb	r0, [r6, #77]	; 0x4d
   469dc:	cmp	r0, #0
   469e0:	movwne	r0, #1
   469e4:	lsl	r1, r0, #1
   469e8:	and	r0, r1, #1
   469ec:	tst	r4, #1024	; 0x400
   469f0:	eor	r2, r0, #1
   469f4:	bne	46964 <__assert_fail@plt+0x33eb4>
   469f8:	ldr	r0, [r9, #4]
   469fc:	cmp	r2, #0
   46a00:	bne	46a0c <__assert_fail@plt+0x33f5c>
   46a04:	ands	r2, r0, #2048	; 0x800
   46a08:	bne	46a1c <__assert_fail@plt+0x33f6c>
   46a0c:	tst	r1, #2
   46a10:	bne	46a24 <__assert_fail@plt+0x33f74>
   46a14:	ands	r2, r0, #8192	; 0x2000
   46a18:	beq	46a24 <__assert_fail@plt+0x33f74>
   46a1c:	mov	r0, r8
   46a20:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   46a24:	uxth	r0, r0
   46a28:	mov	r2, #1
   46a2c:	and	r1, r1, #8
   46a30:	eor	r0, r2, r0, lsr #15
   46a34:	orr	r0, r0, r1, lsr #3
   46a38:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   46a3c:	ldr	r0, [r6, #88]	; 0x58
   46a40:	and	r0, r0, #2
   46a44:	eor	r1, r0, #10
   46a48:	and	r0, r1, #1
   46a4c:	tst	r4, #1024	; 0x400
   46a50:	eor	r2, r0, #1
   46a54:	bne	46964 <__assert_fail@plt+0x33eb4>
   46a58:	b	469f8 <__assert_fail@plt+0x33f48>
   46a5c:	mov	r0, r7
   46a60:	bl	12810 <iswalnum@plt>
   46a64:	mov	r1, #1
   46a68:	mov	r2, #0
   46a6c:	cmp	r7, #95	; 0x5f
   46a70:	beq	469f8 <__assert_fail@plt+0x33f48>
   46a74:	cmp	r0, #0
   46a78:	beq	469cc <__assert_fail@plt+0x33f1c>
   46a7c:	b	469f8 <__assert_fail@plt+0x33f48>
   46a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46a84:	add	fp, sp, #28
   46a88:	sub	sp, sp, #4
   46a8c:	vpush	{d8-d9}
   46a90:	sub	sp, sp, #2272	; 0x8e0
   46a94:	sub	sp, sp, #12288	; 0x3000
   46a98:	sub	lr, fp, #1024	; 0x400
   46a9c:	vmov.i32	q4, #0	; 0x00000000
   46aa0:	mov	r8, r0
   46aa4:	mov	r0, #0
   46aa8:	str	r1, [sp, #104]	; 0x68
   46aac:	sub	r3, lr, #56	; 0x38
   46ab0:	str	r0, [r1, #44]	; 0x2c
   46ab4:	str	r0, [r1, #48]	; 0x30
   46ab8:	mov	r0, r3
   46abc:	vst1.64	{d8-d9}, [r0]!
   46ac0:	vst1.64	{d8-d9}, [r0]
   46ac4:	ldr	r0, [r1, #8]
   46ac8:	cmp	r0, #0
   46acc:	ble	48224 <__assert_fail@plt+0x35774>
   46ad0:	add	r0, sp, #168	; 0xa8
   46ad4:	add	r2, r8, #96	; 0x60
   46ad8:	mov	r1, #0
   46adc:	str	r8, [sp, #96]	; 0x60
   46ae0:	add	r0, r0, #28
   46ae4:	str	r2, [sp]
   46ae8:	str	r0, [sp, #12]
   46aec:	add	r0, r2, #16
   46af0:	str	r0, [sp, #4]
   46af4:	add	r0, r3, #16
   46af8:	str	r0, [sp, #8]
   46afc:	mov	r0, #0
   46b00:	str	r0, [sp, #164]	; 0xa4
   46b04:	b	46b34 <__assert_fail@plt+0x34084>
   46b08:	sub	lr, fp, #1024	; 0x400
   46b0c:	sub	r0, lr, #56	; 0x38
   46b10:	vst1.64	{d8-d9}, [r0]!
   46b14:	vst1.64	{d8-d9}, [r0]
   46b18:	ldr	r8, [sp, #96]	; 0x60
   46b1c:	ldr	r1, [sp, #100]	; 0x64
   46b20:	ldr	r0, [sp, #104]	; 0x68
   46b24:	add	r1, r1, #1
   46b28:	ldr	r0, [r0, #8]
   46b2c:	cmp	r1, r0
   46b30:	bge	47898 <__assert_fail@plt+0x34de8>
   46b34:	ldr	r0, [sp, #104]	; 0x68
   46b38:	ldr	r9, [r8]
   46b3c:	str	r1, [sp, #100]	; 0x64
   46b40:	ldr	r0, [r0, #12]
   46b44:	ldr	ip, [r0, r1, lsl #2]
   46b48:	add	r0, r9, ip, lsl #3
   46b4c:	ldr	r0, [r0, #4]
   46b50:	uxtb	r6, r0
   46b54:	cmp	r6, #1
   46b58:	bne	46c4c <__assert_fail@plt+0x3419c>
   46b5c:	ldrb	r1, [r9, ip, lsl #3]
   46b60:	sub	lr, fp, #1024	; 0x400
   46b64:	mov	r5, #1
   46b68:	sub	r3, lr, #56	; 0x38
   46b6c:	add	lr, sp, #168	; 0xa8
   46b70:	mov	r7, r3
   46b74:	ubfx	r2, r1, #5, #3
   46b78:	and	r1, r1, #31
   46b7c:	ldr	r3, [r3, r2, lsl #2]
   46b80:	orr	r1, r3, r5, lsl r1
   46b84:	str	r1, [r7, r2, lsl #2]
   46b88:	movw	r1, #65280	; 0xff00
   46b8c:	ldr	r7, [sp, #12]
   46b90:	movt	r1, #3
   46b94:	ands	r1, r0, r1
   46b98:	beq	46f98 <__assert_fail@plt+0x344e8>
   46b9c:	tst	r0, #8192	; 0x2000
   46ba0:	beq	46bcc <__assert_fail@plt+0x3411c>
   46ba4:	ldr	r1, [fp, #-1080]	; 0xfffffbc8
   46ba8:	sub	r2, fp, #1024	; 0x400
   46bac:	sub	r2, r2, #56	; 0x38
   46bb0:	vst1.64	{d8-d9}, [r2]!
   46bb4:	vst1.64	{d8-d9}, [r2]
   46bb8:	tst	r1, #1024	; 0x400
   46bbc:	beq	46b18 <__assert_fail@plt+0x34068>
   46bc0:	ldr	r7, [sp, #12]
   46bc4:	mov	r1, #1024	; 0x400
   46bc8:	str	r1, [fp, #-1080]	; 0xfffffbc8
   46bcc:	tst	r0, #32768	; 0x8000
   46bd0:	bne	46b08 <__assert_fail@plt+0x34058>
   46bd4:	tst	r0, #1024	; 0x400
   46bd8:	bne	46d3c <__assert_fail@plt+0x3428c>
   46bdc:	tst	r0, #2048	; 0x800
   46be0:	beq	46f98 <__assert_fail@plt+0x344e8>
   46be4:	tst	r0, #4194304	; 0x400000
   46be8:	beq	46bf4 <__assert_fail@plt+0x34144>
   46bec:	cmp	r6, #1
   46bf0:	beq	46b08 <__assert_fail@plt+0x34058>
   46bf4:	ldr	r1, [sp, #96]	; 0x60
   46bf8:	ldr	r0, [r1, #92]	; 0x5c
   46bfc:	cmp	r0, #1
   46c00:	ble	46f20 <__assert_fail@plt+0x34470>
   46c04:	ldr	r0, [r1, #60]	; 0x3c
   46c08:	ldr	r1, [sp]
   46c0c:	vld1.32	{d16-d17}, [r1]
   46c10:	vld1.32	{d18-d19}, [r0]!
   46c14:	sub	r1, fp, #1024	; 0x400
   46c18:	sub	r1, r1, #56	; 0x38
   46c1c:	vld1.64	{d20-d21}, [r1]
   46c20:	vand	q8, q9, q8
   46c24:	vbic	q9, q10, q8
   46c28:	vst1.64	{d18-d19}, [r1]
   46c2c:	ldr	r1, [sp, #4]
   46c30:	vld1.32	{d20-d21}, [r0]
   46c34:	ldr	r0, [sp, #8]
   46c38:	vld1.32	{d16-d17}, [r1]
   46c3c:	vld1.32	{d22-d23}, [r0]
   46c40:	vand	q8, q10, q8
   46c44:	vbic	q8, q11, q8
   46c48:	b	46f50 <__assert_fail@plt+0x344a0>
   46c4c:	cmp	r6, #7
   46c50:	add	lr, sp, #168	; 0xa8
   46c54:	beq	46c9c <__assert_fail@plt+0x341ec>
   46c58:	cmp	r6, #5
   46c5c:	beq	46cec <__assert_fail@plt+0x3423c>
   46c60:	cmp	r6, #3
   46c64:	bne	46d34 <__assert_fail@plt+0x34284>
   46c68:	ldr	r1, [r9, ip, lsl #3]
   46c6c:	sub	r2, fp, #1024	; 0x400
   46c70:	sub	r2, r2, #56	; 0x38
   46c74:	vld1.64	{d16-d17}, [r2]
   46c78:	vld1.32	{d18-d19}, [r1]!
   46c7c:	vorr	q8, q8, q9
   46c80:	vst1.64	{d16-d17}, [r2]
   46c84:	vld1.32	{d16-d17}, [r1]
   46c88:	ldr	r1, [sp, #8]
   46c8c:	vld1.32	{d18-d19}, [r1]
   46c90:	vorr	q8, q9, q8
   46c94:	vst1.32	{d16-d17}, [r1]
   46c98:	b	46b88 <__assert_fail@plt+0x340d8>
   46c9c:	mvn	r1, #0
   46ca0:	str	r1, [fp, #-1068]	; 0xfffffbd4
   46ca4:	str	r1, [fp, #-1072]	; 0xfffffbd0
   46ca8:	str	r1, [fp, #-1076]	; 0xfffffbcc
   46cac:	str	r1, [fp, #-1080]	; 0xfffffbc8
   46cb0:	ldr	r1, [sp, #96]	; 0x60
   46cb4:	ldr	r2, [r1, #128]	; 0x80
   46cb8:	and	r1, r2, #128	; 0x80
   46cbc:	ands	r2, r2, #64	; 0x40
   46cc0:	beq	46ccc <__assert_fail@plt+0x3421c>
   46cc4:	cmp	r1, #0
   46cc8:	beq	46b88 <__assert_fail@plt+0x340d8>
   46ccc:	cmp	r2, #0
   46cd0:	mvn	r2, #1
   46cd4:	movweq	r2, #64510	; 0xfbfe
   46cd8:	movteq	r2, #65535	; 0xffff
   46cdc:	cmp	r1, #0
   46ce0:	mvneq	r2, #1024	; 0x400
   46ce4:	str	r2, [fp, #-1080]	; 0xfffffbc8
   46ce8:	b	46b88 <__assert_fail@plt+0x340d8>
   46cec:	ldr	r3, [sp, #96]	; 0x60
   46cf0:	ldr	r1, [r3, #92]	; 0x5c
   46cf4:	cmp	r1, #2
   46cf8:	blt	46df4 <__assert_fail@plt+0x34344>
   46cfc:	ldr	r1, [r3, #60]	; 0x3c
   46d00:	sub	r2, fp, #1024	; 0x400
   46d04:	sub	r2, r2, #56	; 0x38
   46d08:	vld1.64	{d16-d17}, [r2]
   46d0c:	vld1.32	{d18-d19}, [r1]!
   46d10:	vorr	q8, q8, q9
   46d14:	vst1.64	{d16-d17}, [r2]
   46d18:	vld1.32	{d18-d19}, [r1]
   46d1c:	ldr	r1, [sp, #8]
   46d20:	vld1.32	{d20-d21}, [r1]
   46d24:	vorr	q9, q10, q9
   46d28:	vst1.32	{d18-d19}, [r1]
   46d2c:	vmov.32	r1, d16[0]
   46d30:	b	46e18 <__assert_fail@plt+0x34368>
   46d34:	ldr	r8, [sp, #96]	; 0x60
   46d38:	b	46b20 <__assert_fail@plt+0x34070>
   46d3c:	movw	r1, #255	; 0xff
   46d40:	movt	r1, #64	; 0x40
   46d44:	and	r1, r0, r1
   46d48:	cmp	r1, #1
   46d4c:	beq	46b08 <__assert_fail@plt+0x34058>
   46d50:	ldr	r7, [sp, #96]	; 0x60
   46d54:	ldr	r1, [r7, #92]	; 0x5c
   46d58:	cmp	r1, #1
   46d5c:	ble	46e44 <__assert_fail@plt+0x34394>
   46d60:	ldr	r1, [r7, #60]	; 0x3c
   46d64:	ldr	r2, [sp]
   46d68:	vld1.32	{d16-d17}, [r2]
   46d6c:	vld1.32	{d18-d19}, [r1]!
   46d70:	sub	r2, fp, #1024	; 0x400
   46d74:	sub	r2, r2, #56	; 0x38
   46d78:	vld1.64	{d20-d21}, [r2]
   46d7c:	vorn	q8, q8, q9
   46d80:	vand	q8, q10, q8
   46d84:	vst1.64	{d16-d17}, [r2]
   46d88:	vmov.32	r2, d16[1]
   46d8c:	vld1.32	{d18-d19}, [r1]
   46d90:	ldr	r1, [sp, #4]
   46d94:	vld1.32	{d20-d21}, [r1]
   46d98:	ldr	r1, [sp, #8]
   46d9c:	vld1.32	{d22-d23}, [r1]
   46da0:	vorn	q9, q10, q9
   46da4:	vand	q9, q11, q9
   46da8:	vst1.32	{d18-d19}, [r1]
   46dac:	vmov.32	r1, d16[0]
   46db0:	orr	r1, r2, r1
   46db4:	vmov.32	r2, d17[0]
   46db8:	orr	r1, r1, r2
   46dbc:	vmov.32	r2, d17[1]
   46dc0:	orr	r1, r1, r2
   46dc4:	vmov.32	r2, d18[0]
   46dc8:	orr	r1, r1, r2
   46dcc:	vmov.32	r2, d18[1]
   46dd0:	orr	r1, r1, r2
   46dd4:	vmov.32	r2, d19[0]
   46dd8:	orr	r1, r1, r2
   46ddc:	vmov.32	r2, d19[1]
   46de0:	orr	r1, r1, r2
   46de4:	ldr	r7, [sp, #12]
   46de8:	cmp	r1, #0
   46dec:	bne	46bdc <__assert_fail@plt+0x3412c>
   46df0:	b	46b18 <__assert_fail@plt+0x34068>
   46df4:	mvn	r1, #0
   46df8:	str	r1, [fp, #-1052]	; 0xfffffbe4
   46dfc:	str	r1, [fp, #-1056]	; 0xfffffbe0
   46e00:	str	r1, [fp, #-1060]	; 0xfffffbdc
   46e04:	str	r1, [fp, #-1064]	; 0xfffffbd8
   46e08:	str	r1, [fp, #-1068]	; 0xfffffbd4
   46e0c:	str	r1, [fp, #-1072]	; 0xfffffbd0
   46e10:	str	r1, [fp, #-1076]	; 0xfffffbcc
   46e14:	str	r1, [fp, #-1080]	; 0xfffffbc8
   46e18:	ldr	r2, [r3, #128]	; 0x80
   46e1c:	ands	r3, r2, #64	; 0x40
   46e20:	and	r2, r2, #128	; 0x80
   46e24:	biceq	r1, r1, #1024	; 0x400
   46e28:	beq	46e34 <__assert_fail@plt+0x34384>
   46e2c:	cmp	r2, #0
   46e30:	beq	46b88 <__assert_fail@plt+0x340d8>
   46e34:	cmp	r2, #0
   46e38:	bicne	r1, r1, #1
   46e3c:	str	r1, [fp, #-1080]	; 0xfffffbc8
   46e40:	b	46b88 <__assert_fail@plt+0x340d8>
   46e44:	ldr	r1, [r7, #112]	; 0x70
   46e48:	add	sl, r7, #96	; 0x60
   46e4c:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   46e50:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   46e54:	ldm	sl, {r2, r3, r8, sl}
   46e58:	str	ip, [sp, #28]
   46e5c:	str	r9, [sp, #24]
   46e60:	ldr	r9, [sp, #24]
   46e64:	str	r1, [sp, #148]	; 0x94
   46e68:	ldr	r1, [r7, #116]	; 0x74
   46e6c:	and	ip, r5, r3
   46e70:	and	lr, r4, r2
   46e74:	ldr	r2, [sp, #148]	; 0x94
   46e78:	str	r1, [sp, #152]	; 0x98
   46e7c:	ldr	r1, [r7, #120]	; 0x78
   46e80:	str	r1, [sp, #156]	; 0x9c
   46e84:	ldr	r1, [r7, #124]	; 0x7c
   46e88:	ldr	r7, [fp, #-1072]	; 0xfffffbd0
   46e8c:	ldr	r3, [sp, #156]	; 0x9c
   46e90:	str	r1, [sp, #160]	; 0xa0
   46e94:	ldr	r1, [fp, #-1068]	; 0xfffffbd4
   46e98:	and	r8, r7, r8
   46e9c:	str	lr, [fp, #-1080]	; 0xfffffbc8
   46ea0:	str	ip, [fp, #-1076]	; 0xfffffbcc
   46ea4:	str	r8, [fp, #-1072]	; 0xfffffbd0
   46ea8:	ldr	r7, [sp, #160]	; 0xa0
   46eac:	and	r1, r1, sl
   46eb0:	add	sl, sp, #168	; 0xa8
   46eb4:	str	r1, [fp, #-1068]	; 0xfffffbd4
   46eb8:	ldr	r5, [fp, #-1064]	; 0xfffffbd8
   46ebc:	and	r5, r5, r2
   46ec0:	ldr	r2, [sp, #152]	; 0x98
   46ec4:	str	r5, [fp, #-1064]	; 0xfffffbd8
   46ec8:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   46ecc:	and	r4, r4, r2
   46ed0:	str	r4, [fp, #-1060]	; 0xfffffbdc
   46ed4:	ldr	r2, [fp, #-1056]	; 0xfffffbe0
   46ed8:	and	r2, r2, r3
   46edc:	str	r2, [fp, #-1056]	; 0xfffffbe0
   46ee0:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
   46ee4:	and	r3, r3, r7
   46ee8:	orr	r7, ip, lr
   46eec:	ldr	ip, [sp, #28]
   46ef0:	mov	lr, sl
   46ef4:	orr	r7, r7, r8
   46ef8:	str	r3, [fp, #-1052]	; 0xfffffbe4
   46efc:	orr	r1, r7, r1
   46f00:	orr	r1, r1, r5
   46f04:	orr	r1, r1, r4
   46f08:	orr	r1, r1, r2
   46f0c:	orr	r1, r1, r3
   46f10:	ldr	r7, [sp, #12]
   46f14:	cmp	r1, #0
   46f18:	bne	46bdc <__assert_fail@plt+0x3412c>
   46f1c:	b	46b18 <__assert_fail@plt+0x34068>
   46f20:	ldr	r0, [sp]
   46f24:	vld1.32	{d16-d17}, [r0]
   46f28:	sub	r0, fp, #1024	; 0x400
   46f2c:	sub	r0, r0, #56	; 0x38
   46f30:	vld1.64	{d18-d19}, [r0]
   46f34:	vbic	q9, q9, q8
   46f38:	vst1.64	{d18-d19}, [r0]
   46f3c:	ldr	r0, [sp, #4]
   46f40:	vld1.32	{d16-d17}, [r0]
   46f44:	ldr	r0, [sp, #8]
   46f48:	vld1.32	{d20-d21}, [r0]
   46f4c:	vbic	q8, q10, q8
   46f50:	vst1.32	{d16-d17}, [r0]
   46f54:	vmov.32	r0, d18[0]
   46f58:	vmov.32	r1, d18[1]
   46f5c:	ldr	r7, [sp, #12]
   46f60:	orr	r0, r1, r0
   46f64:	vmov.32	r1, d19[0]
   46f68:	orr	r0, r0, r1
   46f6c:	vmov.32	r1, d19[1]
   46f70:	orr	r0, r0, r1
   46f74:	vmov.32	r1, d16[0]
   46f78:	orr	r0, r0, r1
   46f7c:	vmov.32	r1, d16[1]
   46f80:	orr	r0, r0, r1
   46f84:	vmov.32	r1, d17[0]
   46f88:	orr	r0, r0, r1
   46f8c:	vmov.32	r1, d17[1]
   46f90:	orrs	r0, r0, r1
   46f94:	beq	46b18 <__assert_fail@plt+0x34068>
   46f98:	ldr	r0, [sp, #164]	; 0xa4
   46f9c:	cmp	r0, #1
   46fa0:	blt	4740c <__assert_fail@plt+0x3495c>
   46fa4:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   46fa8:	ldr	r2, [fp, #-1052]	; 0xfffffbe4
   46fac:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   46fb0:	ldr	r1, [fp, #-1080]	; 0xfffffbc8
   46fb4:	cmp	r6, #1
   46fb8:	mov	r4, #0
   46fbc:	str	r0, [sp, #140]	; 0x8c
   46fc0:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   46fc4:	str	r1, [sp, #120]	; 0x78
   46fc8:	str	r2, [sp, #144]	; 0x90
   46fcc:	str	r3, [sp, #152]	; 0x98
   46fd0:	str	r0, [sp, #160]	; 0xa0
   46fd4:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   46fd8:	str	r0, [sp, #156]	; 0x9c
   46fdc:	ldr	r0, [fp, #-1072]	; 0xfffffbd0
   46fe0:	str	r0, [sp, #132]	; 0x84
   46fe4:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   46fe8:	str	r0, [sp, #148]	; 0x94
   46fec:	bne	47428 <__assert_fail@plt+0x34978>
   46ff0:	ldr	r3, [sp, #148]	; 0x94
   46ff4:	sub	r0, fp, #6144	; 0x1800
   46ff8:	str	r7, [sp, #128]	; 0x80
   46ffc:	str	ip, [sp, #28]
   47000:	str	r9, [sp, #24]
   47004:	sub	r6, r0, #104	; 0x68
   47008:	str	r6, [sp, #124]	; 0x7c
   4700c:	b	47040 <__assert_fail@plt+0x34590>
   47010:	mov	r8, ip
   47014:	ldr	r0, [sp, #128]	; 0x80
   47018:	add	r4, r4, #1
   4701c:	mov	ip, r8
   47020:	add	r0, r0, #32
   47024:	str	r0, [sp, #128]	; 0x80
   47028:	ldr	r0, [sp, #124]	; 0x7c
   4702c:	add	r0, r0, #12
   47030:	str	r0, [sp, #124]	; 0x7c
   47034:	ldr	r0, [sp, #164]	; 0xa4
   47038:	cmp	r4, r0
   4703c:	bge	473d4 <__assert_fail@plt+0x34924>
   47040:	ldrb	r0, [r9, ip, lsl #3]
   47044:	mov	r2, #1
   47048:	ubfx	r1, r0, #5, #3
   4704c:	and	r0, r0, #31
   47050:	add	r1, lr, r1, lsl #2
   47054:	ldr	r1, [r1, r4, lsl #5]
   47058:	tst	r1, r2, lsl r0
   4705c:	beq	47010 <__assert_fail@plt+0x34560>
   47060:	add	r9, lr, r4, lsl #5
   47064:	ldr	r2, [sp, #132]	; 0x84
   47068:	str	r4, [sp, #136]	; 0x88
   4706c:	ldr	r4, [sp, #120]	; 0x78
   47070:	ldr	sl, [sp, #156]	; 0x9c
   47074:	str	r3, [sp, #148]	; 0x94
   47078:	ldr	ip, [sp, #152]	; 0x98
   4707c:	ldr	r0, [r9, #8]
   47080:	ldr	r6, [r9, #4]
   47084:	ldr	r7, [r9, #12]
   47088:	ldr	r5, [r9, #16]
   4708c:	and	r1, r0, r2
   47090:	str	r0, [sp, #88]	; 0x58
   47094:	ldr	r0, [sp, #128]	; 0x80
   47098:	str	r6, [sp, #108]	; 0x6c
   4709c:	and	r6, r6, sl
   470a0:	str	r7, [sp, #112]	; 0x70
   470a4:	str	r5, [sp, #92]	; 0x5c
   470a8:	str	r1, [sp, #84]	; 0x54
   470ac:	str	r6, [sp, #76]	; 0x4c
   470b0:	ldr	lr, [r0, #-28]	; 0xffffffe4
   470b4:	ldr	r8, [r0]
   470b8:	and	r0, lr, r4
   470bc:	str	r8, [sp, #116]	; 0x74
   470c0:	str	r0, [sp, #80]	; 0x50
   470c4:	orr	r0, r6, r0
   470c8:	orr	r0, r0, r1
   470cc:	and	r1, r7, r3
   470d0:	ldr	r7, [sp, #160]	; 0xa0
   470d4:	ldr	r3, [sp, #140]	; 0x8c
   470d8:	str	r1, [sp, #72]	; 0x48
   470dc:	orr	r0, r0, r1
   470e0:	and	r1, r5, r7
   470e4:	str	r1, [sp, #68]	; 0x44
   470e8:	orr	r0, r0, r1
   470ec:	ldr	r1, [r9, #20]
   470f0:	and	r6, r1, r3
   470f4:	ldr	r3, [r9, #24]
   470f8:	str	r6, [sp, #64]	; 0x40
   470fc:	orr	r0, r0, r6
   47100:	ldr	r6, [sp, #144]	; 0x90
   47104:	and	r5, r3, ip
   47108:	orr	r0, r0, r5
   4710c:	and	r6, r8, r6
   47110:	orrs	r0, r0, r6
   47114:	beq	472c0 <__assert_fail@plt+0x34810>
   47118:	bic	r0, r4, lr
   4711c:	ldr	ip, [sp, #88]	; 0x58
   47120:	str	r5, [sp, #20]
   47124:	ldr	r5, [sp, #148]	; 0x94
   47128:	str	r6, [sp, #16]
   4712c:	ldr	r6, [sp, #92]	; 0x5c
   47130:	ldr	r8, [sp, #140]	; 0x8c
   47134:	bic	lr, lr, r4
   47138:	ldr	r4, [sp, #148]	; 0x94
   4713c:	str	r0, [sp, #60]	; 0x3c
   47140:	ldr	r0, [sp, #108]	; 0x6c
   47144:	bic	r0, sl, r0
   47148:	str	r0, [sp, #56]	; 0x38
   4714c:	bic	r0, r2, ip
   47150:	bic	r2, ip, r2
   47154:	str	r0, [sp, #52]	; 0x34
   47158:	ldr	r0, [sp, #112]	; 0x70
   4715c:	str	r2, [sp, #156]	; 0x9c
   47160:	bic	r0, r5, r0
   47164:	ldr	r5, [sp, #144]	; 0x90
   47168:	str	r0, [sp, #48]	; 0x30
   4716c:	bic	r0, r7, r6
   47170:	str	r0, [sp, #44]	; 0x2c
   47174:	bic	r0, r8, r1
   47178:	bic	r1, r1, r8
   4717c:	str	r0, [sp, #40]	; 0x28
   47180:	ldr	r0, [sp, #152]	; 0x98
   47184:	bic	r0, r0, r3
   47188:	str	r0, [sp, #36]	; 0x24
   4718c:	ldr	r0, [sp, #116]	; 0x74
   47190:	bic	r0, r5, r0
   47194:	str	r0, [sp, #32]
   47198:	ldr	r0, [sp, #108]	; 0x6c
   4719c:	bic	sl, r0, sl
   471a0:	orr	r0, sl, lr
   471a4:	orr	r0, r0, r2
   471a8:	ldr	r2, [sp, #112]	; 0x70
   471ac:	bic	ip, r2, r4
   471b0:	ldr	r4, [sp, #152]	; 0x98
   471b4:	bic	r2, r6, r7
   471b8:	orr	r0, r0, ip
   471bc:	orr	r0, r0, r2
   471c0:	orr	r0, r0, r1
   471c4:	bic	r3, r3, r4
   471c8:	orr	r4, r0, r3
   471cc:	ldr	r0, [sp, #116]	; 0x74
   471d0:	bic	r0, r0, r5
   471d4:	orrs	r4, r4, r0
   471d8:	beq	472d8 <__assert_fail@plt+0x34828>
   471dc:	ldr	r5, [sp, #164]	; 0xa4
   471e0:	ldr	r7, [sp, #156]	; 0x9c
   471e4:	mov	r6, sl
   471e8:	add	sl, sp, #168	; 0xa8
   471ec:	add	r4, sl, r5, lsl #5
   471f0:	str	lr, [sl, r5, lsl #5]
   471f4:	sub	lr, fp, #6144	; 0x1800
   471f8:	str	r5, [sp, #164]	; 0xa4
   471fc:	str	r6, [r4, #4]
   47200:	str	r7, [r4, #8]
   47204:	str	ip, [r4, #12]
   47208:	str	r2, [r4, #16]
   4720c:	str	r1, [r4, #20]
   47210:	str	r3, [r4, #24]
   47214:	str	r0, [r4, #28]
   47218:	ldr	r0, [sp, #128]	; 0x80
   4721c:	ldr	r1, [sp, #80]	; 0x50
   47220:	ldr	r6, [sp, #124]	; 0x7c
   47224:	mov	ip, r5
   47228:	str	r1, [r0, #-28]	; 0xffffffe4
   4722c:	ldr	r1, [sp, #76]	; 0x4c
   47230:	str	r1, [r9, #4]
   47234:	ldr	r1, [sp, #84]	; 0x54
   47238:	str	r1, [r9, #8]
   4723c:	ldr	r1, [sp, #72]	; 0x48
   47240:	str	r1, [r9, #12]
   47244:	ldr	r1, [sp, #68]	; 0x44
   47248:	str	r1, [r9, #16]
   4724c:	ldr	r1, [sp, #64]	; 0x40
   47250:	str	r1, [r9, #20]
   47254:	ldr	r1, [sp, #20]
   47258:	str	r1, [r9, #24]
   4725c:	ldr	r1, [sp, #16]
   47260:	str	r1, [r0]
   47264:	add	r0, r5, r5, lsl #1
   47268:	sub	r1, lr, #104	; 0x68
   4726c:	add	r5, r1, r0, lsl #2
   47270:	ldr	r0, [r6, #4]
   47274:	mov	r4, r5
   47278:	str	r0, [r4, #4]!
   4727c:	ldr	r8, [r6, #4]
   47280:	cmp	r8, #0
   47284:	ble	472fc <__assert_fail@plt+0x3484c>
   47288:	str	r0, [r5]
   4728c:	lsl	r0, r0, #2
   47290:	bl	35350 <__assert_fail@plt+0x228a0>
   47294:	ldr	r9, [sp, #44]	; 0x2c
   47298:	ldr	r7, [sp, #40]	; 0x28
   4729c:	ldr	sl, [sp, #32]
   472a0:	cmp	r0, #0
   472a4:	str	r0, [r5, #8]
   472a8:	beq	48168 <__assert_fail@plt+0x356b8>
   472ac:	ldr	r1, [r6, #8]
   472b0:	lsl	r2, r8, #2
   472b4:	bl	124e0 <memcpy@plt>
   472b8:	ldr	r4, [sp, #136]	; 0x88
   472bc:	b	4731c <__assert_fail@plt+0x3486c>
   472c0:	ldr	r4, [sp, #136]	; 0x88
   472c4:	ldr	r8, [sp, #28]
   472c8:	ldr	r9, [sp, #24]
   472cc:	ldr	r3, [sp, #148]	; 0x94
   472d0:	add	lr, sp, #168	; 0xa8
   472d4:	b	47014 <__assert_fail@plt+0x34564>
   472d8:	add	sl, sp, #168	; 0xa8
   472dc:	ldr	r4, [sp, #136]	; 0x88
   472e0:	ldr	r6, [sp, #124]	; 0x7c
   472e4:	ldr	r5, [sp, #48]	; 0x30
   472e8:	ldr	r9, [sp, #44]	; 0x2c
   472ec:	ldr	r7, [sp, #40]	; 0x28
   472f0:	mov	r8, sl
   472f4:	ldr	sl, [sp, #32]
   472f8:	b	47330 <__assert_fail@plt+0x34880>
   472fc:	mov	r0, #0
   47300:	ldr	r4, [sp, #136]	; 0x88
   47304:	ldr	r9, [sp, #44]	; 0x2c
   47308:	ldr	r7, [sp, #40]	; 0x28
   4730c:	ldr	sl, [sp, #32]
   47310:	str	r0, [r5]
   47314:	str	r0, [r5, #4]
   47318:	str	r0, [r5, #8]
   4731c:	ldr	r5, [sp, #48]	; 0x30
   47320:	ldr	r0, [sp, #164]	; 0xa4
   47324:	add	r8, sp, #168	; 0xa8
   47328:	add	r0, r0, #1
   4732c:	str	r0, [sp, #164]	; 0xa4
   47330:	ldr	r0, [sp, #104]	; 0x68
   47334:	ldr	r1, [sp, #100]	; 0x64
   47338:	ldr	r0, [r0, #12]
   4733c:	ldr	r1, [r0, r1, lsl #2]
   47340:	mov	r0, r6
   47344:	bl	42048 <__assert_fail@plt+0x2f598>
   47348:	cmp	r0, #0
   4734c:	beq	480ec <__assert_fail@plt+0x3563c>
   47350:	ldr	r1, [sp, #60]	; 0x3c
   47354:	ldr	r2, [sp, #56]	; 0x38
   47358:	ldr	r3, [sp, #52]	; 0x34
   4735c:	ldr	ip, [sp, #36]	; 0x24
   47360:	mov	lr, r8
   47364:	mov	r6, r9
   47368:	str	r9, [sp, #160]	; 0xa0
   4736c:	ldr	r8, [sp, #28]
   47370:	str	sl, [sp, #144]	; 0x90
   47374:	str	r7, [sp, #140]	; 0x8c
   47378:	orr	r0, r2, r1
   4737c:	str	ip, [sp, #152]	; 0x98
   47380:	str	r2, [sp, #156]	; 0x9c
   47384:	str	r1, [sp, #120]	; 0x78
   47388:	orr	r0, r0, r3
   4738c:	orr	r0, r0, r5
   47390:	orr	r0, r0, r9
   47394:	ldr	r9, [sp, #24]
   47398:	orr	r0, r0, r7
   4739c:	orr	r0, r0, ip
   473a0:	orrs	r0, r0, sl
   473a4:	mov	r0, r3
   473a8:	mov	r3, r5
   473ac:	str	r0, [sp, #132]	; 0x84
   473b0:	bne	47014 <__assert_fail@plt+0x34564>
   473b4:	str	sl, [sp, #144]	; 0x90
   473b8:	str	ip, [sp, #152]	; 0x98
   473bc:	str	r7, [sp, #140]	; 0x8c
   473c0:	str	r6, [sp, #160]	; 0xa0
   473c4:	mov	r3, r5
   473c8:	str	r0, [sp, #132]	; 0x84
   473cc:	str	r2, [sp, #156]	; 0x9c
   473d0:	str	r1, [sp, #120]	; 0x78
   473d4:	ldr	r0, [sp, #144]	; 0x90
   473d8:	ldr	r8, [sp, #96]	; 0x60
   473dc:	str	r0, [fp, #-1052]	; 0xfffffbe4
   473e0:	ldr	r0, [sp, #152]	; 0x98
   473e4:	str	r0, [fp, #-1056]	; 0xfffffbe0
   473e8:	ldr	r0, [sp, #140]	; 0x8c
   473ec:	str	r0, [fp, #-1060]	; 0xfffffbdc
   473f0:	ldr	r0, [sp, #160]	; 0xa0
   473f4:	str	r0, [fp, #-1064]	; 0xfffffbd8
   473f8:	ldr	r0, [sp, #132]	; 0x84
   473fc:	str	r3, [fp, #-1068]	; 0xfffffbd4
   47400:	str	r0, [fp, #-1072]	; 0xfffffbd0
   47404:	ldr	r0, [sp, #156]	; 0x9c
   47408:	b	477f8 <__assert_fail@plt+0x34d48>
   4740c:	ldr	r8, [sp, #96]	; 0x60
   47410:	mov	r4, #0
   47414:	ldr	r0, [sp, #164]	; 0xa4
   47418:	ldr	r1, [sp, #100]	; 0x64
   4741c:	cmp	r4, r0
   47420:	bne	46b20 <__assert_fail@plt+0x34070>
   47424:	b	47814 <__assert_fail@plt+0x34d64>
   47428:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   4742c:	sub	lr, fp, #6144	; 0x1800
   47430:	ldr	ip, [sp, #164]	; 0xa4
   47434:	ldr	sl, [sp, #132]	; 0x84
   47438:	str	r0, [sp, #48]	; 0x30
   4743c:	ldr	r0, [fp, #-1072]	; 0xfffffbd0
   47440:	str	r0, [sp, #44]	; 0x2c
   47444:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   47448:	str	r0, [sp, #40]	; 0x28
   4744c:	sub	r0, lr, #104	; 0x68
   47450:	mov	lr, r1
   47454:	str	r0, [sp, #128]	; 0x80
   47458:	ldr	r0, [sp, #156]	; 0x9c
   4745c:	b	47498 <__assert_fail@plt+0x349e8>
   47460:	ldr	r4, [sp, #136]	; 0x88
   47464:	ldr	ip, [sp, #164]	; 0xa4
   47468:	ldr	r8, [sp, #96]	; 0x60
   4746c:	ldr	r0, [sp, #156]	; 0x9c
   47470:	ldr	sl, [sp, #132]	; 0x84
   47474:	ldr	lr, [sp, #124]	; 0x7c
   47478:	ldr	r7, [sp, #116]	; 0x74
   4747c:	ldr	r1, [sp, #128]	; 0x80
   47480:	add	r4, r4, #1
   47484:	cmp	r4, ip
   47488:	add	r7, r7, #32
   4748c:	add	r1, r1, #12
   47490:	str	r1, [sp, #128]	; 0x80
   47494:	bge	477c0 <__assert_fail@plt+0x34d10>
   47498:	add	r1, sp, #168	; 0xa8
   4749c:	str	r4, [sp, #136]	; 0x88
   474a0:	str	lr, [sp, #124]	; 0x7c
   474a4:	str	ip, [sp, #164]	; 0xa4
   474a8:	ldr	ip, [sp, #160]	; 0xa0
   474ac:	str	sl, [sp, #132]	; 0x84
   474b0:	str	r7, [sp, #116]	; 0x74
   474b4:	ldr	r3, [r7]
   474b8:	str	r0, [sp, #156]	; 0x9c
   474bc:	add	r8, r1, r4, lsl #5
   474c0:	ldr	r4, [r7, #-28]	; 0xffffffe4
   474c4:	ldr	r7, [sp, #140]	; 0x8c
   474c8:	ldr	r5, [r8, #4]
   474cc:	ldr	r1, [r8, #8]
   474d0:	ldr	r2, [r8, #12]
   474d4:	ldr	r9, [r8, #16]
   474d8:	str	r4, [sp, #108]	; 0x6c
   474dc:	and	r4, r4, lr
   474e0:	ldr	lr, [sp, #148]	; 0x94
   474e4:	str	r4, [sp, #72]	; 0x48
   474e8:	and	r6, r5, r0
   474ec:	str	r1, [sp, #80]	; 0x50
   474f0:	and	r1, r1, sl
   474f4:	ldr	sl, [r8, #20]
   474f8:	str	r9, [sp, #84]	; 0x54
   474fc:	str	r5, [sp, #112]	; 0x70
   47500:	str	r2, [sp, #88]	; 0x58
   47504:	orr	r0, r6, r4
   47508:	str	r1, [sp, #76]	; 0x4c
   4750c:	str	r6, [sp, #68]	; 0x44
   47510:	ldr	r6, [sp, #152]	; 0x98
   47514:	orr	r0, r0, r1
   47518:	and	r1, r2, lr
   4751c:	str	r1, [sp, #64]	; 0x40
   47520:	orr	r0, r0, r1
   47524:	and	r1, r9, ip
   47528:	ldr	r9, [sp, #144]	; 0x90
   4752c:	and	r4, sl, r7
   47530:	orr	r0, r0, r1
   47534:	str	r1, [sp, #60]	; 0x3c
   47538:	str	r4, [sp, #56]	; 0x38
   4753c:	orr	r0, r0, r4
   47540:	ldr	r4, [r8, #24]
   47544:	and	r5, r4, r6
   47548:	str	r5, [sp, #52]	; 0x34
   4754c:	orr	r0, r0, r5
   47550:	and	r5, r3, r9
   47554:	orrs	r0, r0, r5
   47558:	beq	47460 <__assert_fail@plt+0x349b0>
   4755c:	ldr	r0, [sp, #124]	; 0x7c
   47560:	ldr	r1, [sp, #108]	; 0x6c
   47564:	ldr	r2, [sp, #156]	; 0x9c
   47568:	str	r5, [sp, #20]
   4756c:	ldr	r5, [sp, #132]	; 0x84
   47570:	ldr	ip, [sp, #84]	; 0x54
   47574:	str	r3, [sp, #92]	; 0x5c
   47578:	ldr	r3, [sp, #108]	; 0x6c
   4757c:	bic	r0, r0, r1
   47580:	ldr	r1, [sp, #88]	; 0x58
   47584:	str	r0, [sp, #120]	; 0x78
   47588:	ldr	r0, [sp, #112]	; 0x70
   4758c:	bic	r0, r2, r0
   47590:	ldr	r2, [sp, #80]	; 0x50
   47594:	str	r0, [sp, #48]	; 0x30
   47598:	bic	r0, r5, r2
   4759c:	bic	r2, r2, r5
   475a0:	ldr	r5, [sp, #156]	; 0x9c
   475a4:	str	r0, [sp, #44]	; 0x2c
   475a8:	bic	r0, lr, r1
   475ac:	str	r2, [sp, #156]	; 0x9c
   475b0:	str	r0, [sp, #40]	; 0x28
   475b4:	ldr	r0, [sp, #160]	; 0xa0
   475b8:	bic	r0, r0, ip
   475bc:	str	r0, [sp, #32]
   475c0:	bic	r0, r7, sl
   475c4:	str	r0, [sp, #28]
   475c8:	bic	r0, r6, r4
   475cc:	bic	r4, r4, r6
   475d0:	str	r0, [sp, #24]
   475d4:	ldr	r0, [sp, #92]	; 0x5c
   475d8:	bic	r0, r9, r0
   475dc:	str	r0, [sp, #36]	; 0x24
   475e0:	ldr	r0, [sp, #124]	; 0x7c
   475e4:	bic	r0, r3, r0
   475e8:	ldr	r3, [sp, #112]	; 0x70
   475ec:	bic	r3, r3, r5
   475f0:	orr	r5, r3, r0
   475f4:	str	r3, [sp, #132]	; 0x84
   475f8:	orr	r3, r5, r2
   475fc:	bic	r5, r1, lr
   47600:	ldr	r1, [sp, #160]	; 0xa0
   47604:	orr	r2, r3, r5
   47608:	bic	r3, ip, r1
   4760c:	bic	r1, sl, r7
   47610:	orr	r2, r2, r3
   47614:	orr	r7, r2, r1
   47618:	orr	r2, r7, r4
   4761c:	ldr	r7, [sp, #92]	; 0x5c
   47620:	bic	r7, r7, r9
   47624:	orrs	r2, r2, r7
   47628:	beq	476f8 <__assert_fail@plt+0x34c48>
   4762c:	ldr	r2, [sp, #164]	; 0xa4
   47630:	ldr	r6, [sp, #132]	; 0x84
   47634:	add	sl, sp, #168	; 0xa8
   47638:	sub	lr, fp, #6144	; 0x1800
   4763c:	str	r0, [sl, r2, lsl #5]
   47640:	add	r0, sl, r2, lsl #5
   47644:	str	r6, [r0, #4]
   47648:	ldr	r6, [sp, #156]	; 0x9c
   4764c:	str	r6, [r0, #8]
   47650:	str	r5, [r0, #12]
   47654:	str	r3, [r0, #16]
   47658:	add	r0, r0, #20
   4765c:	stm	r0, {r1, r4, r7}
   47660:	ldr	r0, [sp, #116]	; 0x74
   47664:	ldr	r1, [sp, #72]	; 0x48
   47668:	ldr	r7, [sp, #128]	; 0x80
   4766c:	str	r1, [r0, #-28]	; 0xffffffe4
   47670:	ldr	r1, [sp, #68]	; 0x44
   47674:	str	r1, [r8, #4]
   47678:	ldr	r1, [sp, #76]	; 0x4c
   4767c:	str	r1, [r8, #8]
   47680:	ldr	r1, [sp, #64]	; 0x40
   47684:	str	r1, [r8, #12]
   47688:	ldr	r1, [sp, #60]	; 0x3c
   4768c:	str	r1, [r8, #16]
   47690:	ldr	r1, [sp, #56]	; 0x38
   47694:	str	r1, [r8, #20]
   47698:	ldr	r1, [sp, #52]	; 0x34
   4769c:	str	r1, [r8, #24]
   476a0:	ldr	r1, [sp, #20]
   476a4:	str	r1, [r0]
   476a8:	add	r0, r2, r2, lsl #1
   476ac:	sub	r1, lr, #104	; 0x68
   476b0:	add	r6, r1, r0, lsl #2
   476b4:	ldr	r0, [r7, #4]
   476b8:	mov	r4, r6
   476bc:	str	r0, [r4, #4]!
   476c0:	ldr	r5, [r7, #4]
   476c4:	cmp	r5, #1
   476c8:	blt	47710 <__assert_fail@plt+0x34c60>
   476cc:	str	r0, [r6]
   476d0:	lsl	r0, r0, #2
   476d4:	bl	35350 <__assert_fail@plt+0x228a0>
   476d8:	ldr	r9, [sp, #36]	; 0x24
   476dc:	cmp	r0, #0
   476e0:	str	r0, [r6, #8]
   476e4:	beq	4812c <__assert_fail@plt+0x3567c>
   476e8:	ldr	r1, [r7, #8]
   476ec:	lsl	r2, r5, #2
   476f0:	bl	124e0 <memcpy@plt>
   476f4:	b	47724 <__assert_fail@plt+0x34c74>
   476f8:	ldr	r8, [sp, #96]	; 0x60
   476fc:	ldr	r5, [sp, #100]	; 0x64
   47700:	ldr	r4, [sp, #136]	; 0x88
   47704:	ldr	r7, [sp, #128]	; 0x80
   47708:	ldr	r9, [sp, #36]	; 0x24
   4770c:	b	4773c <__assert_fail@plt+0x34c8c>
   47710:	ldr	r9, [sp, #36]	; 0x24
   47714:	mov	r0, #0
   47718:	str	r0, [r6]
   4771c:	str	r0, [r6, #4]
   47720:	str	r0, [r6, #8]
   47724:	ldr	r0, [sp, #164]	; 0xa4
   47728:	ldr	r8, [sp, #96]	; 0x60
   4772c:	ldr	r5, [sp, #100]	; 0x64
   47730:	ldr	r4, [sp, #136]	; 0x88
   47734:	add	r0, r0, #1
   47738:	str	r0, [sp, #164]	; 0xa4
   4773c:	ldr	r0, [sp, #104]	; 0x68
   47740:	ldr	r0, [r0, #12]
   47744:	ldr	r1, [r0, r5, lsl #2]
   47748:	mov	r0, r7
   4774c:	bl	42048 <__assert_fail@plt+0x2f598>
   47750:	cmp	r0, #0
   47754:	beq	480b0 <__assert_fail@plt+0x35600>
   47758:	ldr	lr, [sp, #120]	; 0x78
   4775c:	ldr	r2, [sp, #48]	; 0x30
   47760:	ldr	sl, [sp, #44]	; 0x2c
   47764:	ldr	r5, [sp, #40]	; 0x28
   47768:	ldr	r7, [sp, #32]
   4776c:	ldr	r6, [sp, #28]
   47770:	ldr	r1, [sp, #24]
   47774:	ldr	ip, [sp, #164]	; 0xa4
   47778:	str	r9, [sp, #144]	; 0x90
   4777c:	orr	r0, r2, lr
   47780:	str	r1, [sp, #152]	; 0x98
   47784:	str	r6, [sp, #140]	; 0x8c
   47788:	str	r7, [sp, #160]	; 0xa0
   4778c:	str	r5, [sp, #148]	; 0x94
   47790:	orr	r0, r0, sl
   47794:	orr	r0, r0, r5
   47798:	orr	r0, r0, r7
   4779c:	orr	r0, r0, r6
   477a0:	orr	r0, r0, r1
   477a4:	orrs	r0, r0, r9
   477a8:	mov	r0, r2
   477ac:	bne	47478 <__assert_fail@plt+0x349c8>
   477b0:	str	r9, [sp, #144]	; 0x90
   477b4:	str	r1, [sp, #152]	; 0x98
   477b8:	str	r6, [sp, #140]	; 0x8c
   477bc:	str	r7, [sp, #160]	; 0xa0
   477c0:	ldr	r0, [sp, #144]	; 0x90
   477c4:	str	ip, [sp, #164]	; 0xa4
   477c8:	str	r0, [fp, #-1052]	; 0xfffffbe4
   477cc:	ldr	r0, [sp, #152]	; 0x98
   477d0:	str	r0, [fp, #-1056]	; 0xfffffbe0
   477d4:	ldr	r0, [sp, #140]	; 0x8c
   477d8:	str	r0, [fp, #-1060]	; 0xfffffbdc
   477dc:	ldr	r0, [sp, #160]	; 0xa0
   477e0:	str	r0, [fp, #-1064]	; 0xfffffbd8
   477e4:	ldr	r0, [sp, #40]	; 0x28
   477e8:	str	r0, [fp, #-1068]	; 0xfffffbd4
   477ec:	ldr	r0, [sp, #44]	; 0x2c
   477f0:	str	r0, [fp, #-1072]	; 0xfffffbd0
   477f4:	ldr	r0, [sp, #48]	; 0x30
   477f8:	str	r0, [fp, #-1076]	; 0xfffffbcc
   477fc:	ldr	r0, [sp, #120]	; 0x78
   47800:	str	r0, [fp, #-1080]	; 0xfffffbc8
   47804:	ldr	r0, [sp, #164]	; 0xa4
   47808:	ldr	r1, [sp, #100]	; 0x64
   4780c:	cmp	r4, r0
   47810:	bne	46b20 <__assert_fail@plt+0x34070>
   47814:	sub	lr, fp, #1024	; 0x400
   47818:	sub	r7, lr, #56	; 0x38
   4781c:	sub	lr, fp, #6144	; 0x1800
   47820:	mov	r0, r7
   47824:	mov	r8, r7
   47828:	sub	r2, lr, #104	; 0x68
   4782c:	vld1.32	{d16-d17}, [r0]!
   47830:	vld1.64	{d18-d19}, [r0]
   47834:	add	r0, sp, #168	; 0xa8
   47838:	add	r0, r0, r4, lsl #5
   4783c:	vst1.32	{d16-d17}, [r0]!
   47840:	vst1.32	{d18-d19}, [r0]
   47844:	ldr	r0, [sp, #104]	; 0x68
   47848:	ldr	r0, [r0, #12]
   4784c:	ldr	r7, [r0, r1, lsl #2]
   47850:	add	r0, r4, r4, lsl #1
   47854:	mov	r1, #1
   47858:	add	r5, r2, r0, lsl #2
   4785c:	str	r1, [r2, r0, lsl #2]
   47860:	mov	r0, #4
   47864:	mov	r6, r5
   47868:	str	r1, [r6, #4]!
   4786c:	bl	35350 <__assert_fail@plt+0x228a0>
   47870:	cmp	r0, #0
   47874:	str	r0, [r5, #8]
   47878:	beq	481fc <__assert_fail@plt+0x3574c>
   4787c:	str	r7, [r0]
   47880:	mov	r0, r8
   47884:	vst1.64	{d8-d9}, [r0]!
   47888:	vst1.64	{d8-d9}, [r0]
   4788c:	add	r0, r4, #1
   47890:	str	r0, [sp, #164]	; 0xa4
   47894:	b	46b18 <__assert_fail@plt+0x34068>
   47898:	ldr	r0, [sp, #164]	; 0xa4
   4789c:	cmp	r0, #0
   478a0:	ble	4821c <__assert_fail@plt+0x3576c>
   478a4:	ldr	r0, [sp, #164]	; 0xa4
   478a8:	mov	r4, #0
   478ac:	str	r4, [fp, #-3136]	; 0xfffff3c0
   478b0:	add	r0, r0, #1
   478b4:	str	r0, [fp, #-3140]	; 0xfffff3bc
   478b8:	lsl	r0, r0, #2
   478bc:	bl	35350 <__assert_fail@plt+0x228a0>
   478c0:	cmp	r0, #0
   478c4:	str	r0, [fp, #-3132]	; 0xfffff3c4
   478c8:	moveq	r4, #12
   478cc:	cmp	r0, #0
   478d0:	str	r4, [fp, #-56]	; 0xffffffc8
   478d4:	beq	48250 <__assert_fail@plt+0x357a0>
   478d8:	vmov.i32	q8, #0	; 0x00000000
   478dc:	sub	lr, fp, #3072	; 0xc00
   478e0:	mov	r1, #0
   478e4:	mov	r7, #0
   478e8:	mov	r2, #0
   478ec:	mov	r6, #0
   478f0:	mov	r5, #0
   478f4:	mov	r9, #0
   478f8:	sub	r0, lr, #104	; 0x68
   478fc:	sub	lr, fp, #3072	; 0xc00
   47900:	vst1.64	{d16-d17}, [r0]!
   47904:	vst1.64	{d16-d17}, [r0]
   47908:	sub	r0, lr, #56	; 0x38
   4790c:	str	r0, [sp, #128]	; 0x80
   47910:	mov	r0, #0
   47914:	str	r0, [sp, #148]	; 0x94
   47918:	mov	r0, #0
   4791c:	str	r0, [sp, #152]	; 0x98
   47920:	mov	r0, #0
   47924:	str	r0, [sp, #156]	; 0x9c
   47928:	mov	r0, #0
   4792c:	str	r0, [sp, #160]	; 0xa0
   47930:	mov	r0, #0
   47934:	str	r0, [sp, #132]	; 0x84
   47938:	b	47a04 <__assert_fail@plt+0x34f54>
   4793c:	ldrsb	r0, [r7, #52]	; 0x34
   47940:	cmn	r0, #1
   47944:	ble	47adc <__assert_fail@plt+0x3502c>
   47948:	sub	lr, fp, #3072	; 0xc00
   4794c:	sub	r0, lr, #56	; 0x38
   47950:	sub	lr, fp, #2048	; 0x800
   47954:	str	r7, [r0, r9, lsl #2]
   47958:	sub	r0, lr, #56	; 0x38
   4795c:	str	r7, [r0, r9, lsl #2]
   47960:	add	r0, sp, #168	; 0xa8
   47964:	ldr	r3, [sp, #148]	; 0x94
   47968:	ldr	sl, [sp, #164]	; 0xa4
   4796c:	ldr	r8, [sp, #96]	; 0x60
   47970:	mov	r2, r0
   47974:	ldr	r0, [r0, r9, lsl #5]
   47978:	orr	r5, r5, r0
   4797c:	add	r0, r2, r9, lsl #5
   47980:	add	r9, r9, #1
   47984:	mov	ip, r5
   47988:	cmp	r9, sl
   4798c:	ldr	r2, [r0, #4]
   47990:	ldr	lr, [r0, #8]
   47994:	ldr	r7, [r0, #12]
   47998:	ldr	r5, [r0, #16]
   4799c:	ldr	r4, [r0, #20]
   479a0:	str	r2, [sp, #136]	; 0x88
   479a4:	mov	r2, r6
   479a8:	ldr	r6, [r0, #24]
   479ac:	ldr	r0, [r0, #28]
   479b0:	orr	r3, r3, r0
   479b4:	ldr	r0, [sp, #152]	; 0x98
   479b8:	str	r3, [sp, #148]	; 0x94
   479bc:	orr	r0, r0, r6
   479c0:	mov	r6, r2
   479c4:	ldr	r2, [sp, #144]	; 0x90
   479c8:	str	r0, [sp, #152]	; 0x98
   479cc:	ldr	r0, [sp, #156]	; 0x9c
   479d0:	orr	r2, r2, lr
   479d4:	orr	r0, r0, r4
   479d8:	str	r0, [sp, #156]	; 0x9c
   479dc:	ldr	r0, [sp, #160]	; 0xa0
   479e0:	orr	r0, r0, r5
   479e4:	mov	r5, ip
   479e8:	str	r0, [sp, #160]	; 0xa0
   479ec:	ldr	r0, [sp, #140]	; 0x8c
   479f0:	orr	r0, r0, r7
   479f4:	mov	r7, r0
   479f8:	ldr	r0, [sp, #136]	; 0x88
   479fc:	orr	r6, r6, r0
   47a00:	beq	47ba4 <__assert_fail@plt+0x350f4>
   47a04:	mov	r0, #0
   47a08:	sub	lr, fp, #6144	; 0x1800
   47a0c:	str	r2, [sp, #144]	; 0x90
   47a10:	str	r7, [sp, #140]	; 0x8c
   47a14:	str	r0, [fp, #-3136]	; 0xfffff3c0
   47a18:	add	r0, r9, r9, lsl #1
   47a1c:	sub	r2, lr, #104	; 0x68
   47a20:	add	r2, r2, r0, lsl #2
   47a24:	mov	r7, r2
   47a28:	ldr	r0, [r7, #4]!
   47a2c:	cmp	r0, #1
   47a30:	blt	47a9c <__assert_fail@plt+0x34fec>
   47a34:	mov	r4, r9
   47a38:	add	sl, r2, #8
   47a3c:	mov	r9, #0
   47a40:	b	47a58 <__assert_fail@plt+0x34fa8>
   47a44:	ldr	r0, [r7]
   47a48:	mov	r1, #0
   47a4c:	add	r9, r9, #1
   47a50:	cmp	r9, r0
   47a54:	bge	47a94 <__assert_fail@plt+0x34fe4>
   47a58:	ldr	r2, [sl]
   47a5c:	ldr	r3, [r8, #12]
   47a60:	ldr	r2, [r2, r9, lsl #2]
   47a64:	ldr	r2, [r3, r2, lsl #2]
   47a68:	cmn	r2, #1
   47a6c:	beq	47a4c <__assert_fail@plt+0x34f9c>
   47a70:	ldr	r0, [r8, #24]
   47a74:	add	r1, r2, r2, lsl #1
   47a78:	sub	lr, fp, #3072	; 0xc00
   47a7c:	add	r1, r0, r1, lsl #2
   47a80:	sub	r0, lr, #68	; 0x44
   47a84:	bl	41ea8 <__assert_fail@plt+0x2f3f8>
   47a88:	cmp	r0, #0
   47a8c:	beq	47a44 <__assert_fail@plt+0x34f94>
   47a90:	b	48038 <__assert_fail@plt+0x35588>
   47a94:	mov	r9, r4
   47a98:	str	r1, [fp, #-56]	; 0xffffffc8
   47a9c:	sub	lr, fp, #3072	; 0xc00
   47aa0:	sub	r0, fp, #56	; 0x38
   47aa4:	mov	r1, r8
   47aa8:	mov	r3, #0
   47aac:	sub	r2, lr, #68	; 0x44
   47ab0:	bl	421c8 <__assert_fail@plt+0x2f718>
   47ab4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   47ab8:	mov	r7, r0
   47abc:	sub	lr, fp, #1024	; 0x400
   47ac0:	sub	r0, lr, #56	; 0x38
   47ac4:	cmp	r7, #0
   47ac8:	str	r7, [r0, r9, lsl #2]
   47acc:	bne	4793c <__assert_fail@plt+0x34e8c>
   47ad0:	cmp	r1, #0
   47ad4:	beq	4793c <__assert_fail@plt+0x34e8c>
   47ad8:	b	47b70 <__assert_fail@plt+0x350c0>
   47adc:	sub	lr, fp, #3072	; 0xc00
   47ae0:	sub	r0, fp, #56	; 0x38
   47ae4:	mov	r1, r8
   47ae8:	mov	r3, #1
   47aec:	sub	r2, lr, #68	; 0x44
   47af0:	bl	421c8 <__assert_fail@plt+0x2f718>
   47af4:	sub	lr, fp, #2048	; 0x800
   47af8:	cmp	r0, #0
   47afc:	sub	r1, lr, #56	; 0x38
   47b00:	str	r0, [r1, r9, lsl #2]
   47b04:	bne	47b14 <__assert_fail@plt+0x35064>
   47b08:	ldr	r1, [fp, #-56]	; 0xffffffc8
   47b0c:	cmp	r1, #0
   47b10:	bne	47b70 <__assert_fail@plt+0x350c0>
   47b14:	cmp	r7, r0
   47b18:	beq	47b38 <__assert_fail@plt+0x35088>
   47b1c:	ldr	r0, [r8, #92]	; 0x5c
   47b20:	ldr	r1, [sp, #132]	; 0x84
   47b24:	cmp	r0, #1
   47b28:	mov	r0, #0
   47b2c:	movwgt	r0, #1
   47b30:	orr	r1, r1, r0
   47b34:	str	r1, [sp, #132]	; 0x84
   47b38:	sub	lr, fp, #3072	; 0xc00
   47b3c:	sub	r0, fp, #56	; 0x38
   47b40:	mov	r1, r8
   47b44:	mov	r3, #2
   47b48:	sub	r2, lr, #68	; 0x44
   47b4c:	bl	421c8 <__assert_fail@plt+0x2f718>
   47b50:	sub	lr, fp, #3072	; 0xc00
   47b54:	cmp	r0, #0
   47b58:	sub	r1, lr, #56	; 0x38
   47b5c:	str	r0, [r1, r9, lsl #2]
   47b60:	ldr	r1, [fp, #-56]	; 0xffffffc8
   47b64:	bne	47960 <__assert_fail@plt+0x34eb0>
   47b68:	cmp	r1, #0
   47b6c:	beq	47960 <__assert_fail@plt+0x34eb0>
   47b70:	ldr	r0, [sp, #148]	; 0x94
   47b74:	str	r0, [fp, #-3148]	; 0xfffff3b4
   47b78:	ldr	r0, [sp, #152]	; 0x98
   47b7c:	str	r0, [fp, #-3152]	; 0xfffff3b0
   47b80:	ldr	r0, [sp, #156]	; 0x9c
   47b84:	str	r0, [fp, #-3156]	; 0xfffff3ac
   47b88:	ldr	r0, [sp, #160]	; 0xa0
   47b8c:	str	r0, [fp, #-3160]	; 0xfffff3a8
   47b90:	ldr	r0, [sp, #140]	; 0x8c
   47b94:	str	r0, [fp, #-3164]	; 0xfffff3a4
   47b98:	ldr	r0, [sp, #144]	; 0x90
   47b9c:	str	r0, [fp, #-3168]	; 0xfffff3a0
   47ba0:	b	4806c <__assert_fail@plt+0x355bc>
   47ba4:	ldr	r0, [sp, #148]	; 0x94
   47ba8:	ldr	r8, [sp, #132]	; 0x84
   47bac:	ldr	r4, [sp, #104]	; 0x68
   47bb0:	str	r0, [fp, #-3148]	; 0xfffff3b4
   47bb4:	ldr	r0, [sp, #152]	; 0x98
   47bb8:	tst	r8, #1
   47bbc:	str	r0, [fp, #-3152]	; 0xfffff3b0
   47bc0:	ldr	r0, [sp, #156]	; 0x9c
   47bc4:	str	r0, [fp, #-3156]	; 0xfffff3ac
   47bc8:	ldr	r0, [sp, #160]	; 0xa0
   47bcc:	str	r0, [fp, #-3160]	; 0xfffff3a8
   47bd0:	mov	r0, #4
   47bd4:	str	r7, [fp, #-3164]	; 0xfffff3a4
   47bd8:	str	r2, [fp, #-3168]	; 0xfffff3a0
   47bdc:	str	r6, [fp, #-3172]	; 0xfffff39c
   47be0:	str	r5, [fp, #-3176]	; 0xfffff398
   47be4:	bne	4825c <__assert_fail@plt+0x357ac>
   47be8:	mov	r1, #256	; 0x100
   47bec:	bl	322c0 <__assert_fail@plt+0x1f810>
   47bf0:	cmp	r0, #0
   47bf4:	str	r0, [r4, #44]	; 0x2c
   47bf8:	beq	48074 <__assert_fail@plt+0x355c4>
   47bfc:	ldr	ip, [fp, #-3176]	; 0xfffff398
   47c00:	cmp	ip, #0
   47c04:	beq	47c84 <__assert_fail@plt+0x351d4>
   47c08:	mov	r2, #0
   47c0c:	mov	r3, #1
   47c10:	mov	r1, ip
   47c14:	mov	r7, #0
   47c18:	tst	r1, #1
   47c1c:	bne	47c3c <__assert_fail@plt+0x3518c>
   47c20:	lsr	r6, r1, #1
   47c24:	cmp	r2, r1, lsr #1
   47c28:	add	r7, r7, #1
   47c2c:	lsl	r3, r3, #1
   47c30:	mov	r1, r6
   47c34:	bne	47c18 <__assert_fail@plt+0x35168>
   47c38:	b	47c84 <__assert_fail@plt+0x351d4>
   47c3c:	mov	r6, #0
   47c40:	add	r4, sp, #168	; 0xa8
   47c44:	ldr	r5, [r4, r6, lsl #3]
   47c48:	add	r6, r6, #4
   47c4c:	tst	r5, r3
   47c50:	beq	47c44 <__assert_fail@plt+0x35194>
   47c54:	ldr	r5, [sp]
   47c58:	sub	lr, fp, #2048	; 0x800
   47c5c:	ldr	r5, [r5]
   47c60:	tst	r5, r3
   47c64:	sub	r5, lr, #56	; 0x38
   47c68:	sub	lr, fp, #1024	; 0x400
   47c6c:	sub	r4, lr, #56	; 0x38
   47c70:	moveq	r5, r4
   47c74:	add	r6, r5, r6
   47c78:	ldr	r6, [r6, #-4]
   47c7c:	str	r6, [r0, r7, lsl #2]
   47c80:	b	47c20 <__assert_fail@plt+0x35170>
   47c84:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   47c88:	cmp	r2, #0
   47c8c:	beq	47d0c <__assert_fail@plt+0x3525c>
   47c90:	add	r1, sp, #168	; 0xa8
   47c94:	mov	r7, #32
   47c98:	mov	r6, #1
   47c9c:	mov	r5, #0
   47ca0:	add	lr, r1, #4
   47ca4:	tst	r2, #1
   47ca8:	bne	47cc8 <__assert_fail@plt+0x35218>
   47cac:	lsr	r1, r2, #1
   47cb0:	cmp	r5, r2, lsr #1
   47cb4:	add	r7, r7, #1
   47cb8:	lsl	r6, r6, #1
   47cbc:	mov	r2, r1
   47cc0:	bne	47ca4 <__assert_fail@plt+0x351f4>
   47cc4:	b	47d0c <__assert_fail@plt+0x3525c>
   47cc8:	mov	r1, #0
   47ccc:	ldr	r4, [lr, r1, lsl #3]
   47cd0:	add	r1, r1, #4
   47cd4:	tst	r4, r6
   47cd8:	beq	47ccc <__assert_fail@plt+0x3521c>
   47cdc:	ldr	r3, [sp, #96]	; 0x60
   47ce0:	ldr	r4, [r3, #100]	; 0x64
   47ce4:	sub	r3, fp, #2048	; 0x800
   47ce8:	tst	r4, r6
   47cec:	sub	r4, r3, #56	; 0x38
   47cf0:	sub	r3, fp, #1024	; 0x400
   47cf4:	sub	r3, r3, #56	; 0x38
   47cf8:	moveq	r4, r3
   47cfc:	add	r1, r4, r1
   47d00:	ldr	r1, [r1, #-4]
   47d04:	str	r1, [r0, r7, lsl #2]
   47d08:	b	47cac <__assert_fail@plt+0x351fc>
   47d0c:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   47d10:	cmp	r2, #0
   47d14:	beq	47d94 <__assert_fail@plt+0x352e4>
   47d18:	add	r1, sp, #168	; 0xa8
   47d1c:	mov	r7, #64	; 0x40
   47d20:	mov	r6, #1
   47d24:	mov	r5, #0
   47d28:	add	lr, r1, #8
   47d2c:	tst	r2, #1
   47d30:	bne	47d50 <__assert_fail@plt+0x352a0>
   47d34:	lsr	r1, r2, #1
   47d38:	cmp	r5, r2, lsr #1
   47d3c:	add	r7, r7, #1
   47d40:	lsl	r6, r6, #1
   47d44:	mov	r2, r1
   47d48:	bne	47d2c <__assert_fail@plt+0x3527c>
   47d4c:	b	47d94 <__assert_fail@plt+0x352e4>
   47d50:	mov	r1, #0
   47d54:	ldr	r4, [lr, r1, lsl #3]
   47d58:	add	r1, r1, #4
   47d5c:	tst	r4, r6
   47d60:	beq	47d54 <__assert_fail@plt+0x352a4>
   47d64:	ldr	r3, [sp, #96]	; 0x60
   47d68:	ldr	r4, [r3, #104]	; 0x68
   47d6c:	sub	r3, fp, #2048	; 0x800
   47d70:	tst	r4, r6
   47d74:	sub	r4, r3, #56	; 0x38
   47d78:	sub	r3, fp, #1024	; 0x400
   47d7c:	sub	r3, r3, #56	; 0x38
   47d80:	moveq	r4, r3
   47d84:	add	r1, r4, r1
   47d88:	ldr	r1, [r1, #-4]
   47d8c:	str	r1, [r0, r7, lsl #2]
   47d90:	b	47d34 <__assert_fail@plt+0x35284>
   47d94:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   47d98:	cmp	r2, #0
   47d9c:	beq	47e1c <__assert_fail@plt+0x3536c>
   47da0:	add	r1, sp, #168	; 0xa8
   47da4:	mov	r7, #96	; 0x60
   47da8:	mov	r6, #1
   47dac:	mov	r5, #0
   47db0:	add	lr, r1, #12
   47db4:	tst	r2, #1
   47db8:	bne	47dd8 <__assert_fail@plt+0x35328>
   47dbc:	lsr	r1, r2, #1
   47dc0:	cmp	r5, r2, lsr #1
   47dc4:	add	r7, r7, #1
   47dc8:	lsl	r6, r6, #1
   47dcc:	mov	r2, r1
   47dd0:	bne	47db4 <__assert_fail@plt+0x35304>
   47dd4:	b	47e1c <__assert_fail@plt+0x3536c>
   47dd8:	mov	r1, #0
   47ddc:	ldr	r4, [lr, r1, lsl #3]
   47de0:	add	r1, r1, #4
   47de4:	tst	r4, r6
   47de8:	beq	47ddc <__assert_fail@plt+0x3532c>
   47dec:	ldr	r3, [sp, #96]	; 0x60
   47df0:	ldr	r4, [r3, #108]	; 0x6c
   47df4:	sub	r3, fp, #2048	; 0x800
   47df8:	tst	r4, r6
   47dfc:	sub	r4, r3, #56	; 0x38
   47e00:	sub	r3, fp, #1024	; 0x400
   47e04:	sub	r3, r3, #56	; 0x38
   47e08:	moveq	r4, r3
   47e0c:	add	r1, r4, r1
   47e10:	ldr	r1, [r1, #-4]
   47e14:	str	r1, [r0, r7, lsl #2]
   47e18:	b	47dbc <__assert_fail@plt+0x3530c>
   47e1c:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   47e20:	cmp	r2, #0
   47e24:	beq	47ea4 <__assert_fail@plt+0x353f4>
   47e28:	add	r1, sp, #168	; 0xa8
   47e2c:	mov	r7, #128	; 0x80
   47e30:	mov	r6, #1
   47e34:	mov	r5, #0
   47e38:	add	lr, r1, #16
   47e3c:	tst	r2, #1
   47e40:	bne	47e60 <__assert_fail@plt+0x353b0>
   47e44:	lsr	r1, r2, #1
   47e48:	cmp	r5, r2, lsr #1
   47e4c:	add	r7, r7, #1
   47e50:	lsl	r6, r6, #1
   47e54:	mov	r2, r1
   47e58:	bne	47e3c <__assert_fail@plt+0x3538c>
   47e5c:	b	47ea4 <__assert_fail@plt+0x353f4>
   47e60:	mov	r1, #0
   47e64:	ldr	r4, [lr, r1, lsl #3]
   47e68:	add	r1, r1, #4
   47e6c:	tst	r4, r6
   47e70:	beq	47e64 <__assert_fail@plt+0x353b4>
   47e74:	ldr	r3, [sp, #4]
   47e78:	ldr	r4, [r3]
   47e7c:	sub	r3, fp, #2048	; 0x800
   47e80:	tst	r4, r6
   47e84:	sub	r4, r3, #56	; 0x38
   47e88:	sub	r3, fp, #1024	; 0x400
   47e8c:	sub	r3, r3, #56	; 0x38
   47e90:	moveq	r4, r3
   47e94:	add	r1, r4, r1
   47e98:	ldr	r1, [r1, #-4]
   47e9c:	str	r1, [r0, r7, lsl #2]
   47ea0:	b	47e44 <__assert_fail@plt+0x35394>
   47ea4:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   47ea8:	cmp	r2, #0
   47eac:	beq	47f2c <__assert_fail@plt+0x3547c>
   47eb0:	add	r1, sp, #168	; 0xa8
   47eb4:	mov	r7, #160	; 0xa0
   47eb8:	mov	r6, #1
   47ebc:	mov	r5, #0
   47ec0:	add	lr, r1, #20
   47ec4:	tst	r2, #1
   47ec8:	bne	47ee8 <__assert_fail@plt+0x35438>
   47ecc:	lsr	r1, r2, #1
   47ed0:	cmp	r5, r2, lsr #1
   47ed4:	add	r7, r7, #1
   47ed8:	lsl	r6, r6, #1
   47edc:	mov	r2, r1
   47ee0:	bne	47ec4 <__assert_fail@plt+0x35414>
   47ee4:	b	47f2c <__assert_fail@plt+0x3547c>
   47ee8:	mov	r1, #0
   47eec:	ldr	r4, [lr, r1, lsl #3]
   47ef0:	add	r1, r1, #4
   47ef4:	tst	r4, r6
   47ef8:	beq	47eec <__assert_fail@plt+0x3543c>
   47efc:	ldr	r3, [sp, #96]	; 0x60
   47f00:	ldr	r4, [r3, #116]	; 0x74
   47f04:	sub	r3, fp, #2048	; 0x800
   47f08:	tst	r4, r6
   47f0c:	sub	r4, r3, #56	; 0x38
   47f10:	sub	r3, fp, #1024	; 0x400
   47f14:	sub	r3, r3, #56	; 0x38
   47f18:	moveq	r4, r3
   47f1c:	add	r1, r4, r1
   47f20:	ldr	r1, [r1, #-4]
   47f24:	str	r1, [r0, r7, lsl #2]
   47f28:	b	47ecc <__assert_fail@plt+0x3541c>
   47f2c:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   47f30:	cmp	r2, #0
   47f34:	beq	47fb4 <__assert_fail@plt+0x35504>
   47f38:	add	r1, sp, #168	; 0xa8
   47f3c:	mov	r7, #192	; 0xc0
   47f40:	mov	r6, #1
   47f44:	mov	r5, #0
   47f48:	add	lr, r1, #24
   47f4c:	tst	r2, #1
   47f50:	bne	47f70 <__assert_fail@plt+0x354c0>
   47f54:	lsr	r1, r2, #1
   47f58:	cmp	r5, r2, lsr #1
   47f5c:	add	r7, r7, #1
   47f60:	lsl	r6, r6, #1
   47f64:	mov	r2, r1
   47f68:	bne	47f4c <__assert_fail@plt+0x3549c>
   47f6c:	b	47fb4 <__assert_fail@plt+0x35504>
   47f70:	mov	r1, #0
   47f74:	ldr	r4, [lr, r1, lsl #3]
   47f78:	add	r1, r1, #4
   47f7c:	tst	r4, r6
   47f80:	beq	47f74 <__assert_fail@plt+0x354c4>
   47f84:	ldr	r3, [sp, #96]	; 0x60
   47f88:	ldr	r4, [r3, #120]	; 0x78
   47f8c:	sub	r3, fp, #2048	; 0x800
   47f90:	tst	r4, r6
   47f94:	sub	r4, r3, #56	; 0x38
   47f98:	sub	r3, fp, #1024	; 0x400
   47f9c:	sub	r3, r3, #56	; 0x38
   47fa0:	moveq	r4, r3
   47fa4:	add	r1, r4, r1
   47fa8:	ldr	r1, [r1, #-4]
   47fac:	str	r1, [r0, r7, lsl #2]
   47fb0:	b	47f54 <__assert_fail@plt+0x354a4>
   47fb4:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   47fb8:	cmp	r2, #0
   47fbc:	beq	48714 <__assert_fail@plt+0x35c64>
   47fc0:	mov	r3, #224	; 0xe0
   47fc4:	mov	r7, #1
   47fc8:	mov	r6, #0
   47fcc:	tst	r2, #1
   47fd0:	bne	47ff0 <__assert_fail@plt+0x35540>
   47fd4:	lsr	r1, r2, #1
   47fd8:	cmp	r6, r2, lsr #1
   47fdc:	add	r3, r3, #1
   47fe0:	lsl	r7, r7, #1
   47fe4:	mov	r2, r1
   47fe8:	bne	47fcc <__assert_fail@plt+0x3551c>
   47fec:	b	48714 <__assert_fail@plt+0x35c64>
   47ff0:	ldr	r4, [sp, #12]
   47ff4:	mov	r1, #0
   47ff8:	ldr	r5, [r4, r1, lsl #3]
   47ffc:	add	r1, r1, #4
   48000:	tst	r5, r7
   48004:	beq	47ff8 <__assert_fail@plt+0x35548>
   48008:	ldr	r5, [sp, #96]	; 0x60
   4800c:	sub	lr, fp, #2048	; 0x800
   48010:	ldr	r5, [r5, #124]	; 0x7c
   48014:	tst	r5, r7
   48018:	sub	r5, lr, #56	; 0x38
   4801c:	sub	lr, fp, #1024	; 0x400
   48020:	sub	r4, lr, #56	; 0x38
   48024:	moveq	r5, r4
   48028:	add	r1, r5, r1
   4802c:	ldr	r1, [r1, #-4]
   48030:	str	r1, [r0, r3, lsl #2]
   48034:	b	47fd4 <__assert_fail@plt+0x35524>
   48038:	ldr	r1, [sp, #148]	; 0x94
   4803c:	str	r0, [fp, #-56]	; 0xffffffc8
   48040:	str	r1, [fp, #-3148]	; 0xfffff3b4
   48044:	ldr	r1, [sp, #152]	; 0x98
   48048:	str	r1, [fp, #-3152]	; 0xfffff3b0
   4804c:	ldr	r1, [sp, #156]	; 0x9c
   48050:	str	r1, [fp, #-3156]	; 0xfffff3ac
   48054:	ldr	r1, [sp, #160]	; 0xa0
   48058:	str	r1, [fp, #-3160]	; 0xfffff3a8
   4805c:	ldr	r1, [sp, #140]	; 0x8c
   48060:	str	r1, [fp, #-3164]	; 0xfffff3a4
   48064:	ldr	r1, [sp, #144]	; 0x90
   48068:	str	r1, [fp, #-3168]	; 0xfffff3a0
   4806c:	str	r6, [fp, #-3172]	; 0xfffff39c
   48070:	str	r5, [fp, #-3176]	; 0xfffff398
   48074:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   48078:	bl	32910 <__assert_fail@plt+0x1fe60>
   4807c:	ldr	r0, [sp, #164]	; 0xa4
   48080:	cmp	r0, #1
   48084:	blt	481e8 <__assert_fail@plt+0x35738>
   48088:	sub	lr, fp, #6144	; 0x1800
   4808c:	sub	r0, lr, #104	; 0x68
   48090:	add	r4, r0, #8
   48094:	ldr	r0, [r4], #12
   48098:	bl	32910 <__assert_fail@plt+0x1fe60>
   4809c:	ldr	r0, [sp, #164]	; 0xa4
   480a0:	subs	r0, r0, #1
   480a4:	str	r0, [sp, #164]	; 0xa4
   480a8:	bne	48094 <__assert_fail@plt+0x355e4>
   480ac:	b	481e8 <__assert_fail@plt+0x35738>
   480b0:	ldr	r0, [sp, #24]
   480b4:	str	r9, [fp, #-1052]	; 0xfffffbe4
   480b8:	str	r0, [fp, #-1056]	; 0xfffffbe0
   480bc:	ldr	r0, [sp, #28]
   480c0:	str	r0, [fp, #-1060]	; 0xfffffbdc
   480c4:	ldr	r0, [sp, #32]
   480c8:	str	r0, [fp, #-1064]	; 0xfffffbd8
   480cc:	ldr	r0, [sp, #40]	; 0x28
   480d0:	str	r0, [fp, #-1068]	; 0xfffffbd4
   480d4:	ldr	r0, [sp, #44]	; 0x2c
   480d8:	str	r0, [fp, #-1072]	; 0xfffffbd0
   480dc:	ldr	r0, [sp, #48]	; 0x30
   480e0:	str	r0, [fp, #-1076]	; 0xfffffbcc
   480e4:	ldr	r0, [sp, #120]	; 0x78
   480e8:	b	48118 <__assert_fail@plt+0x35668>
   480ec:	ldr	r0, [sp, #36]	; 0x24
   480f0:	str	sl, [fp, #-1052]	; 0xfffffbe4
   480f4:	str	r0, [fp, #-1056]	; 0xfffffbe0
   480f8:	ldr	r0, [sp, #52]	; 0x34
   480fc:	str	r7, [fp, #-1060]	; 0xfffffbdc
   48100:	str	r9, [fp, #-1064]	; 0xfffffbd8
   48104:	str	r5, [fp, #-1068]	; 0xfffffbd4
   48108:	str	r0, [fp, #-1072]	; 0xfffffbd0
   4810c:	ldr	r0, [sp, #56]	; 0x38
   48110:	str	r0, [fp, #-1076]	; 0xfffffbcc
   48114:	ldr	r0, [sp, #60]	; 0x3c
   48118:	str	r0, [fp, #-1080]	; 0xfffffbc8
   4811c:	ldr	r0, [sp, #164]	; 0xa4
   48120:	cmp	r0, #1
   48124:	bge	481c4 <__assert_fail@plt+0x35714>
   48128:	b	481e8 <__assert_fail@plt+0x35738>
   4812c:	ldr	r0, [sp, #24]
   48130:	str	r9, [fp, #-1052]	; 0xfffffbe4
   48134:	str	r0, [fp, #-1056]	; 0xfffffbe0
   48138:	ldr	r0, [sp, #28]
   4813c:	str	r0, [fp, #-1060]	; 0xfffffbdc
   48140:	ldr	r0, [sp, #32]
   48144:	str	r0, [fp, #-1064]	; 0xfffffbd8
   48148:	ldr	r0, [sp, #40]	; 0x28
   4814c:	str	r0, [fp, #-1068]	; 0xfffffbd4
   48150:	ldr	r0, [sp, #44]	; 0x2c
   48154:	str	r0, [fp, #-1072]	; 0xfffffbd0
   48158:	ldr	r0, [sp, #48]	; 0x30
   4815c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   48160:	ldr	r0, [sp, #120]	; 0x78
   48164:	b	48198 <__assert_fail@plt+0x356e8>
   48168:	ldr	r0, [sp, #36]	; 0x24
   4816c:	str	sl, [fp, #-1052]	; 0xfffffbe4
   48170:	str	r0, [fp, #-1056]	; 0xfffffbe0
   48174:	ldr	r0, [sp, #48]	; 0x30
   48178:	str	r7, [fp, #-1060]	; 0xfffffbdc
   4817c:	str	r9, [fp, #-1064]	; 0xfffffbd8
   48180:	str	r0, [fp, #-1068]	; 0xfffffbd4
   48184:	ldr	r0, [sp, #52]	; 0x34
   48188:	str	r0, [fp, #-1072]	; 0xfffffbd0
   4818c:	ldr	r0, [sp, #56]	; 0x38
   48190:	str	r0, [fp, #-1076]	; 0xfffffbcc
   48194:	ldr	r0, [sp, #60]	; 0x3c
   48198:	ldr	r1, [sp, #164]	; 0xa4
   4819c:	sub	lr, fp, #6144	; 0x1800
   481a0:	str	r0, [fp, #-1080]	; 0xfffffbc8
   481a4:	mov	r0, #0
   481a8:	sub	r2, lr, #104	; 0x68
   481ac:	str	r0, [r4]
   481b0:	add	r1, r1, r1, lsl #1
   481b4:	str	r0, [r2, r1, lsl #2]
   481b8:	ldr	r0, [sp, #164]	; 0xa4
   481bc:	cmp	r0, #1
   481c0:	blt	481e8 <__assert_fail@plt+0x35738>
   481c4:	sub	lr, fp, #6144	; 0x1800
   481c8:	sub	r0, lr, #104	; 0x68
   481cc:	add	r4, r0, #8
   481d0:	ldr	r0, [r4], #12
   481d4:	bl	32910 <__assert_fail@plt+0x1fe60>
   481d8:	ldr	r0, [sp, #164]	; 0xa4
   481dc:	subs	r0, r0, #1
   481e0:	str	r0, [sp, #164]	; 0xa4
   481e4:	bne	481d0 <__assert_fail@plt+0x35720>
   481e8:	mov	r0, #0
   481ec:	sub	sp, fp, #48	; 0x30
   481f0:	vpop	{d8-d9}
   481f4:	add	sp, sp, #4
   481f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   481fc:	mov	r0, #0
   48200:	str	r4, [sp, #164]	; 0xa4
   48204:	str	r0, [r6]
   48208:	str	r0, [r5]
   4820c:	ldr	r0, [sp, #164]	; 0xa4
   48210:	cmp	r0, #1
   48214:	bge	481c4 <__assert_fail@plt+0x35714>
   48218:	b	481e8 <__assert_fail@plt+0x35738>
   4821c:	mov	r0, #0
   48220:	bne	48240 <__assert_fail@plt+0x35790>
   48224:	mov	r0, #4
   48228:	mov	r1, #256	; 0x100
   4822c:	bl	322c0 <__assert_fail@plt+0x1f810>
   48230:	ldr	r1, [sp, #104]	; 0x68
   48234:	cmp	r0, #0
   48238:	str	r0, [r1, #44]	; 0x2c
   4823c:	movwne	r0, #1
   48240:	sub	sp, fp, #48	; 0x30
   48244:	vpop	{d8-d9}
   48248:	add	sp, sp, #4
   4824c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   48250:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   48254:	bl	32910 <__assert_fail@plt+0x1fe60>
   48258:	b	48088 <__assert_fail@plt+0x355d8>
   4825c:	mov	r1, #512	; 0x200
   48260:	bl	322c0 <__assert_fail@plt+0x1f810>
   48264:	cmp	r0, #0
   48268:	str	r0, [r4, #48]	; 0x30
   4826c:	beq	48074 <__assert_fail@plt+0x355c4>
   48270:	ldr	ip, [fp, #-3176]	; 0xfffff398
   48274:	cmp	ip, #0
   48278:	beq	48304 <__assert_fail@plt+0x35854>
   4827c:	sub	lr, fp, #1024	; 0x400
   48280:	mov	r7, #0
   48284:	mov	r6, #1
   48288:	add	r4, sp, #168	; 0xa8
   4828c:	mov	r5, ip
   48290:	sub	r1, lr, #56	; 0x38
   48294:	sub	lr, r1, #4
   48298:	sub	r1, fp, #2048	; 0x800
   4829c:	sub	r1, r1, #56	; 0x38
   482a0:	sub	r8, r1, #4
   482a4:	mov	r1, #0
   482a8:	tst	r5, #1
   482ac:	bne	482cc <__assert_fail@plt+0x3581c>
   482b0:	lsr	r2, r5, #1
   482b4:	cmp	r7, r5, lsr #1
   482b8:	add	r1, r1, #1
   482bc:	lsl	r6, r6, #1
   482c0:	mov	r5, r2
   482c4:	bne	482a8 <__assert_fail@plt+0x357f8>
   482c8:	b	48304 <__assert_fail@plt+0x35854>
   482cc:	mov	r3, r4
   482d0:	mov	sl, lr
   482d4:	mov	r9, r8
   482d8:	ldr	r2, [r3], #32
   482dc:	add	sl, sl, #4
   482e0:	add	r9, r9, #4
   482e4:	tst	r2, r6
   482e8:	beq	482d8 <__assert_fail@plt+0x35828>
   482ec:	ldr	r2, [sl]
   482f0:	mov	r3, r0
   482f4:	str	r2, [r3, r1, lsl #2]!
   482f8:	ldr	r2, [r9]
   482fc:	str	r2, [r3, #1024]	; 0x400
   48300:	b	482b0 <__assert_fail@plt+0x35800>
   48304:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   48308:	cmp	r2, #0
   4830c:	beq	48398 <__assert_fail@plt+0x358e8>
   48310:	add	r1, sp, #168	; 0xa8
   48314:	sub	lr, fp, #2048	; 0x800
   48318:	mov	r5, #32
   4831c:	mov	r3, #0
   48320:	add	r4, r1, #4
   48324:	sub	r1, lr, #56	; 0x38
   48328:	sub	lr, r1, #4
   4832c:	sub	r1, fp, #1024	; 0x400
   48330:	sub	r1, r1, #56	; 0x38
   48334:	sub	r8, r1, #4
   48338:	mov	r1, #1
   4833c:	tst	r2, #1
   48340:	bne	48360 <__assert_fail@plt+0x358b0>
   48344:	lsr	r6, r2, #1
   48348:	cmp	r3, r2, lsr #1
   4834c:	add	r5, r5, #1
   48350:	lsl	r1, r1, #1
   48354:	mov	r2, r6
   48358:	bne	4833c <__assert_fail@plt+0x3588c>
   4835c:	b	48398 <__assert_fail@plt+0x358e8>
   48360:	mov	r7, r4
   48364:	mov	r9, lr
   48368:	mov	sl, r8
   4836c:	ldr	r6, [r7], #32
   48370:	add	r9, r9, #4
   48374:	add	sl, sl, #4
   48378:	tst	r6, r1
   4837c:	beq	4836c <__assert_fail@plt+0x358bc>
   48380:	ldr	r6, [sl]
   48384:	mov	r7, r0
   48388:	str	r6, [r7, r5, lsl #2]!
   4838c:	ldr	r6, [r9]
   48390:	str	r6, [r7, #1024]	; 0x400
   48394:	b	48344 <__assert_fail@plt+0x35894>
   48398:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   4839c:	cmp	r2, #0
   483a0:	beq	4842c <__assert_fail@plt+0x3597c>
   483a4:	add	r1, sp, #168	; 0xa8
   483a8:	sub	lr, fp, #2048	; 0x800
   483ac:	mov	r5, #64	; 0x40
   483b0:	mov	r3, #0
   483b4:	add	r4, r1, #8
   483b8:	sub	r1, lr, #56	; 0x38
   483bc:	sub	lr, r1, #4
   483c0:	sub	r1, fp, #1024	; 0x400
   483c4:	sub	r1, r1, #56	; 0x38
   483c8:	sub	r8, r1, #4
   483cc:	mov	r1, #1
   483d0:	tst	r2, #1
   483d4:	bne	483f4 <__assert_fail@plt+0x35944>
   483d8:	lsr	r6, r2, #1
   483dc:	cmp	r3, r2, lsr #1
   483e0:	add	r5, r5, #1
   483e4:	lsl	r1, r1, #1
   483e8:	mov	r2, r6
   483ec:	bne	483d0 <__assert_fail@plt+0x35920>
   483f0:	b	4842c <__assert_fail@plt+0x3597c>
   483f4:	mov	r7, r4
   483f8:	mov	r9, lr
   483fc:	mov	sl, r8
   48400:	ldr	r6, [r7], #32
   48404:	add	r9, r9, #4
   48408:	add	sl, sl, #4
   4840c:	tst	r6, r1
   48410:	beq	48400 <__assert_fail@plt+0x35950>
   48414:	ldr	r6, [sl]
   48418:	mov	r7, r0
   4841c:	str	r6, [r7, r5, lsl #2]!
   48420:	ldr	r6, [r9]
   48424:	str	r6, [r7, #1024]	; 0x400
   48428:	b	483d8 <__assert_fail@plt+0x35928>
   4842c:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   48430:	cmp	r2, #0
   48434:	beq	484c0 <__assert_fail@plt+0x35a10>
   48438:	add	r1, sp, #168	; 0xa8
   4843c:	sub	lr, fp, #2048	; 0x800
   48440:	mov	r5, #96	; 0x60
   48444:	mov	r3, #0
   48448:	add	r4, r1, #12
   4844c:	sub	r1, lr, #56	; 0x38
   48450:	sub	lr, r1, #4
   48454:	sub	r1, fp, #1024	; 0x400
   48458:	sub	r1, r1, #56	; 0x38
   4845c:	sub	r8, r1, #4
   48460:	mov	r1, #1
   48464:	tst	r2, #1
   48468:	bne	48488 <__assert_fail@plt+0x359d8>
   4846c:	lsr	r6, r2, #1
   48470:	cmp	r3, r2, lsr #1
   48474:	add	r5, r5, #1
   48478:	lsl	r1, r1, #1
   4847c:	mov	r2, r6
   48480:	bne	48464 <__assert_fail@plt+0x359b4>
   48484:	b	484c0 <__assert_fail@plt+0x35a10>
   48488:	mov	r7, r4
   4848c:	mov	r9, lr
   48490:	mov	sl, r8
   48494:	ldr	r6, [r7], #32
   48498:	add	r9, r9, #4
   4849c:	add	sl, sl, #4
   484a0:	tst	r6, r1
   484a4:	beq	48494 <__assert_fail@plt+0x359e4>
   484a8:	ldr	r6, [sl]
   484ac:	mov	r7, r0
   484b0:	str	r6, [r7, r5, lsl #2]!
   484b4:	ldr	r6, [r9]
   484b8:	str	r6, [r7, #1024]	; 0x400
   484bc:	b	4846c <__assert_fail@plt+0x359bc>
   484c0:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   484c4:	cmp	r2, #0
   484c8:	beq	48554 <__assert_fail@plt+0x35aa4>
   484cc:	add	r1, sp, #168	; 0xa8
   484d0:	sub	lr, fp, #2048	; 0x800
   484d4:	mov	r5, #128	; 0x80
   484d8:	mov	r3, #0
   484dc:	add	r4, r1, #16
   484e0:	sub	r1, lr, #56	; 0x38
   484e4:	sub	lr, r1, #4
   484e8:	sub	r1, fp, #1024	; 0x400
   484ec:	sub	r1, r1, #56	; 0x38
   484f0:	sub	r8, r1, #4
   484f4:	mov	r1, #1
   484f8:	tst	r2, #1
   484fc:	bne	4851c <__assert_fail@plt+0x35a6c>
   48500:	lsr	r6, r2, #1
   48504:	cmp	r3, r2, lsr #1
   48508:	add	r5, r5, #1
   4850c:	lsl	r1, r1, #1
   48510:	mov	r2, r6
   48514:	bne	484f8 <__assert_fail@plt+0x35a48>
   48518:	b	48554 <__assert_fail@plt+0x35aa4>
   4851c:	mov	r7, r4
   48520:	mov	r9, lr
   48524:	mov	sl, r8
   48528:	ldr	r6, [r7], #32
   4852c:	add	r9, r9, #4
   48530:	add	sl, sl, #4
   48534:	tst	r6, r1
   48538:	beq	48528 <__assert_fail@plt+0x35a78>
   4853c:	ldr	r6, [sl]
   48540:	mov	r7, r0
   48544:	str	r6, [r7, r5, lsl #2]!
   48548:	ldr	r6, [r9]
   4854c:	str	r6, [r7, #1024]	; 0x400
   48550:	b	48500 <__assert_fail@plt+0x35a50>
   48554:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   48558:	cmp	r2, #0
   4855c:	beq	485e8 <__assert_fail@plt+0x35b38>
   48560:	add	r1, sp, #168	; 0xa8
   48564:	sub	lr, fp, #2048	; 0x800
   48568:	mov	r5, #160	; 0xa0
   4856c:	mov	r3, #0
   48570:	add	r4, r1, #20
   48574:	sub	r1, lr, #56	; 0x38
   48578:	sub	lr, r1, #4
   4857c:	sub	r1, fp, #1024	; 0x400
   48580:	sub	r1, r1, #56	; 0x38
   48584:	sub	r8, r1, #4
   48588:	mov	r1, #1
   4858c:	tst	r2, #1
   48590:	bne	485b0 <__assert_fail@plt+0x35b00>
   48594:	lsr	r6, r2, #1
   48598:	cmp	r3, r2, lsr #1
   4859c:	add	r5, r5, #1
   485a0:	lsl	r1, r1, #1
   485a4:	mov	r2, r6
   485a8:	bne	4858c <__assert_fail@plt+0x35adc>
   485ac:	b	485e8 <__assert_fail@plt+0x35b38>
   485b0:	mov	r7, r4
   485b4:	mov	r9, lr
   485b8:	mov	sl, r8
   485bc:	ldr	r6, [r7], #32
   485c0:	add	r9, r9, #4
   485c4:	add	sl, sl, #4
   485c8:	tst	r6, r1
   485cc:	beq	485bc <__assert_fail@plt+0x35b0c>
   485d0:	ldr	r6, [sl]
   485d4:	mov	r7, r0
   485d8:	str	r6, [r7, r5, lsl #2]!
   485dc:	ldr	r6, [r9]
   485e0:	str	r6, [r7, #1024]	; 0x400
   485e4:	b	48594 <__assert_fail@plt+0x35ae4>
   485e8:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   485ec:	cmp	r2, #0
   485f0:	beq	4867c <__assert_fail@plt+0x35bcc>
   485f4:	add	r1, sp, #168	; 0xa8
   485f8:	sub	lr, fp, #2048	; 0x800
   485fc:	mov	r5, #192	; 0xc0
   48600:	mov	r3, #0
   48604:	add	r4, r1, #24
   48608:	sub	r1, lr, #56	; 0x38
   4860c:	sub	lr, r1, #4
   48610:	sub	r1, fp, #1024	; 0x400
   48614:	sub	r1, r1, #56	; 0x38
   48618:	sub	r8, r1, #4
   4861c:	mov	r1, #1
   48620:	tst	r2, #1
   48624:	bne	48644 <__assert_fail@plt+0x35b94>
   48628:	lsr	r6, r2, #1
   4862c:	cmp	r3, r2, lsr #1
   48630:	add	r5, r5, #1
   48634:	lsl	r1, r1, #1
   48638:	mov	r2, r6
   4863c:	bne	48620 <__assert_fail@plt+0x35b70>
   48640:	b	4867c <__assert_fail@plt+0x35bcc>
   48644:	mov	r7, r4
   48648:	mov	r9, lr
   4864c:	mov	sl, r8
   48650:	ldr	r6, [r7], #32
   48654:	add	r9, r9, #4
   48658:	add	sl, sl, #4
   4865c:	tst	r6, r1
   48660:	beq	48650 <__assert_fail@plt+0x35ba0>
   48664:	ldr	r6, [sl]
   48668:	mov	r7, r0
   4866c:	str	r6, [r7, r5, lsl #2]!
   48670:	ldr	r6, [r9]
   48674:	str	r6, [r7, #1024]	; 0x400
   48678:	b	48628 <__assert_fail@plt+0x35b78>
   4867c:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   48680:	cmp	r2, #0
   48684:	beq	48710 <__assert_fail@plt+0x35c60>
   48688:	add	r1, sp, #168	; 0xa8
   4868c:	sub	lr, fp, #2048	; 0x800
   48690:	mov	r5, #224	; 0xe0
   48694:	mov	r3, #0
   48698:	add	r4, r1, #28
   4869c:	sub	r1, lr, #56	; 0x38
   486a0:	sub	lr, r1, #4
   486a4:	sub	r1, fp, #1024	; 0x400
   486a8:	sub	r1, r1, #56	; 0x38
   486ac:	sub	r8, r1, #4
   486b0:	mov	r1, #1
   486b4:	tst	r2, #1
   486b8:	bne	486d8 <__assert_fail@plt+0x35c28>
   486bc:	lsr	r6, r2, #1
   486c0:	cmp	r3, r2, lsr #1
   486c4:	add	r5, r5, #1
   486c8:	lsl	r1, r1, #1
   486cc:	mov	r2, r6
   486d0:	bne	486b4 <__assert_fail@plt+0x35c04>
   486d4:	b	48710 <__assert_fail@plt+0x35c60>
   486d8:	mov	r7, r4
   486dc:	mov	r9, lr
   486e0:	mov	sl, r8
   486e4:	ldr	r6, [r7], #32
   486e8:	add	r9, r9, #4
   486ec:	add	sl, sl, #4
   486f0:	tst	r6, r1
   486f4:	beq	486e4 <__assert_fail@plt+0x35c34>
   486f8:	ldr	r6, [sl]
   486fc:	mov	r7, r0
   48700:	str	r6, [r7, r5, lsl #2]!
   48704:	ldr	r6, [r9]
   48708:	str	r6, [r7, #1024]	; 0x400
   4870c:	b	486bc <__assert_fail@plt+0x35c0c>
   48710:	ldr	r8, [sp, #132]	; 0x84
   48714:	tst	ip, #1024	; 0x400
   48718:	add	r3, sp, #168	; 0xa8
   4871c:	beq	48760 <__assert_fail@plt+0x35cb0>
   48720:	ldr	r1, [sp, #164]	; 0xa4
   48724:	ldrb	r2, [r3, #1]
   48728:	tst	r2, #4
   4872c:	bne	4874c <__assert_fail@plt+0x35c9c>
   48730:	ldr	r2, [sp, #128]	; 0x80
   48734:	add	r3, r3, #32
   48738:	subs	r1, r1, #1
   4873c:	add	r2, r2, #4
   48740:	str	r2, [sp, #128]	; 0x80
   48744:	bne	48724 <__assert_fail@plt+0x35c74>
   48748:	b	48760 <__assert_fail@plt+0x35cb0>
   4874c:	ldr	r1, [sp, #128]	; 0x80
   48750:	tst	r8, #1
   48754:	ldr	r1, [r1]
   48758:	str	r1, [r0, #40]	; 0x28
   4875c:	strne	r1, [r0, #1064]	; 0x428
   48760:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   48764:	bl	32910 <__assert_fail@plt+0x1fe60>
   48768:	sub	lr, fp, #6144	; 0x1800
   4876c:	sub	r0, lr, #104	; 0x68
   48770:	add	r4, r0, #8
   48774:	ldr	r0, [r4], #12
   48778:	bl	32910 <__assert_fail@plt+0x1fe60>
   4877c:	ldr	r0, [sp, #164]	; 0xa4
   48780:	subs	r0, r0, #1
   48784:	str	r0, [sp, #164]	; 0xa4
   48788:	bne	48774 <__assert_fail@plt+0x35cc4>
   4878c:	mov	r0, #1
   48790:	sub	sp, fp, #48	; 0x30
   48794:	vpop	{d8-d9}
   48798:	add	sp, sp, #4
   4879c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   487a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   487a4:	add	fp, sp, #28
   487a8:	sub	sp, sp, #68	; 0x44
   487ac:	ldr	r4, [r1, #8]
   487b0:	ldr	r6, [r1, #12]
   487b4:	mov	r8, r0
   487b8:	mov	r0, #1
   487bc:	mov	r5, r1
   487c0:	str	r0, [fp, #-36]	; 0xffffffdc
   487c4:	str	r0, [fp, #-40]	; 0xffffffd8
   487c8:	mov	r0, #4
   487cc:	bl	35350 <__assert_fail@plt+0x228a0>
   487d0:	cmp	r0, #0
   487d4:	str	r0, [fp, #-32]	; 0xffffffe0
   487d8:	beq	48eb8 <__assert_fail@plt+0x36408>
   487dc:	str	r4, [r0]
   487e0:	sub	r3, fp, #40	; 0x28
   487e4:	mov	r0, r8
   487e8:	mov	r1, r5
   487ec:	mov	r2, r6
   487f0:	str	r5, [sp, #28]
   487f4:	bl	48edc <__assert_fail@plt+0x3642c>
   487f8:	cmp	r0, #0
   487fc:	bne	48eb0 <__assert_fail@plt+0x36400>
   48800:	mov	r4, r6
   48804:	mov	r9, #1
   48808:	mov	r1, #0
   4880c:	str	r8, [sp, #48]	; 0x30
   48810:	cmp	r4, #1
   48814:	bge	48844 <__assert_fail@plt+0x35d94>
   48818:	b	48e70 <__assert_fail@plt+0x363c0>
   4881c:	mov	r0, r8
   48820:	mov	r1, lr
   48824:	mov	r2, r4
   48828:	sub	r3, fp, #40	; 0x28
   4882c:	bl	48edc <__assert_fail@plt+0x3642c>
   48830:	ldr	r1, [sp, #4]
   48834:	cmp	r0, #0
   48838:	bne	48eb0 <__assert_fail@plt+0x36400>
   4883c:	cmp	r4, #1
   48840:	blt	48e70 <__assert_fail@plt+0x363c0>
   48844:	ldr	lr, [sp, #28]
   48848:	ldr	r0, [lr]
   4884c:	ldr	r2, [r0, r4, lsl #2]
   48850:	cmp	r2, #0
   48854:	mov	r2, #0
   48858:	addeq	r2, r1, #1
   4885c:	ldr	r1, [r8, #120]	; 0x78
   48860:	cmp	r2, r1
   48864:	bgt	48e78 <__assert_fail@plt+0x363c8>
   48868:	mov	r0, #0
   4886c:	str	r4, [sp, #36]	; 0x24
   48870:	sub	r4, r4, #1
   48874:	str	r2, [sp, #4]
   48878:	str	r0, [fp, #-36]	; 0xffffffdc
   4887c:	ldr	r0, [r8, #100]	; 0x64
   48880:	ldr	r1, [r0, r4, lsl #2]
   48884:	cmp	r1, #0
   48888:	beq	4881c <__assert_fail@plt+0x35d6c>
   4888c:	ldr	r0, [r1, #20]
   48890:	cmp	r0, #1
   48894:	blt	4881c <__assert_fail@plt+0x35d6c>
   48898:	ldr	r0, [r8, #84]	; 0x54
   4889c:	mov	r2, #0
   488a0:	str	r4, [sp, #32]
   488a4:	str	r1, [sp, #16]
   488a8:	str	r0, [sp, #24]
   488ac:	b	488f8 <__assert_fail@plt+0x35e48>
   488b0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   488b4:	cmp	r2, #0
   488b8:	beq	48b40 <__assert_fail@plt+0x36090>
   488bc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   488c0:	ldr	r6, [fp, #-44]	; 0xffffffd4
   488c4:	cmp	r1, #0
   488c8:	bne	48d78 <__assert_fail@plt+0x362c8>
   488cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   488d0:	str	r6, [r0]
   488d4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   488d8:	add	r0, r0, #1
   488dc:	str	r0, [fp, #-36]	; 0xffffffdc
   488e0:	ldr	r1, [sp, #16]
   488e4:	ldr	r2, [sp, #20]
   488e8:	ldr	r0, [r1, #20]
   488ec:	add	r2, r2, #1
   488f0:	cmp	r2, r0
   488f4:	bge	4881c <__assert_fail@plt+0x35d6c>
   488f8:	ldr	r0, [r1, #24]
   488fc:	str	r2, [sp, #20]
   48900:	ldr	r2, [r0, r2, lsl #2]
   48904:	ldr	r0, [sp, #24]
   48908:	ldr	r0, [r0]
   4890c:	mov	r1, r2
   48910:	str	r2, [fp, #-44]	; 0xffffffd4
   48914:	add	r0, r0, r2, lsl #3
   48918:	ldrb	r0, [r0, #6]
   4891c:	tst	r0, #16
   48920:	bne	489c0 <__assert_fail@plt+0x35f10>
   48924:	ldr	r0, [sp, #24]
   48928:	ldr	r1, [fp, #-44]	; 0xffffffd4
   4892c:	mov	r2, r4
   48930:	ldr	r0, [r0]
   48934:	add	r1, r0, r1, lsl #3
   48938:	mov	r0, r8
   4893c:	bl	46850 <__assert_fail@plt+0x33da0>
   48940:	ldr	lr, [sp, #28]
   48944:	cmp	r0, #0
   48948:	beq	488e0 <__assert_fail@plt+0x35e30>
   4894c:	ldr	r0, [lr]
   48950:	ldr	r1, [sp, #36]	; 0x24
   48954:	ldr	r0, [r0, r1, lsl #2]
   48958:	cmp	r0, #0
   4895c:	beq	488e0 <__assert_fail@plt+0x35e30>
   48960:	ldr	r2, [r0, #8]
   48964:	cmp	r2, #1
   48968:	blt	488e0 <__assert_fail@plt+0x35e30>
   4896c:	ldr	r1, [sp, #24]
   48970:	ldr	r3, [fp, #-44]	; 0xffffffd4
   48974:	ldr	r0, [r0, #12]
   48978:	ldr	r1, [r1, #12]
   4897c:	ldr	r1, [r1, r3, lsl #2]
   48980:	subs	r3, r2, #1
   48984:	mov	r2, #0
   48988:	beq	489ac <__assert_fail@plt+0x35efc>
   4898c:	add	r7, r2, r3
   48990:	lsr	r6, r7, #1
   48994:	ldr	r5, [r0, r6, lsl #2]
   48998:	cmp	r5, r1
   4899c:	addlt	r2, r9, r7, lsr #1
   489a0:	movge	r3, r6
   489a4:	cmp	r2, r3
   489a8:	bcc	4898c <__assert_fail@plt+0x35edc>
   489ac:	ldr	r2, [r0, r2, lsl #2]
   489b0:	mov	r0, #1
   489b4:	cmp	r2, r1
   489b8:	bne	488e0 <__assert_fail@plt+0x35e30>
   489bc:	b	48a1c <__assert_fail@plt+0x35f6c>
   489c0:	ldr	r7, [r8, #84]	; 0x54
   489c4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   489c8:	mov	r5, r4
   489cc:	ldr	r4, [lr, #12]
   489d0:	mov	r2, r8
   489d4:	mov	r3, r5
   489d8:	mov	r0, r7
   489dc:	bl	464c4 <__assert_fail@plt+0x33a14>
   489e0:	cmp	r0, #1
   489e4:	blt	48a0c <__assert_fail@plt+0x35f5c>
   489e8:	add	r1, r0, r5
   489ec:	cmp	r1, r4
   489f0:	ble	48ac4 <__assert_fail@plt+0x36014>
   489f4:	ldr	lr, [sp, #28]
   489f8:	ldr	r4, [sp, #32]
   489fc:	ldr	ip, [lr, #20]
   48a00:	cmp	ip, #0
   48a04:	bne	48a28 <__assert_fail@plt+0x35f78>
   48a08:	b	488b0 <__assert_fail@plt+0x35e00>
   48a0c:	ldr	lr, [sp, #28]
   48a10:	cmp	r0, #0
   48a14:	mov	r4, r5
   48a18:	beq	48924 <__assert_fail@plt+0x35e74>
   48a1c:	ldr	ip, [lr, #20]
   48a20:	cmp	ip, #0
   48a24:	beq	488b0 <__assert_fail@plt+0x35e00>
   48a28:	add	r0, r0, r4
   48a2c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   48a30:	str	r0, [sp, #40]	; 0x28
   48a34:	ldr	r0, [sp, #24]
   48a38:	ldr	r0, [r0, #12]
   48a3c:	ldr	r0, [r0, r1, lsl #2]
   48a40:	str	r0, [sp, #8]
   48a44:	ldr	r0, [r8, #108]	; 0x6c
   48a48:	cmp	r0, #1
   48a4c:	blt	48b6c <__assert_fail@plt+0x360bc>
   48a50:	ldr	r2, [r8, #116]	; 0x74
   48a54:	ldr	r1, [sp, #40]	; 0x28
   48a58:	mov	sl, #0
   48a5c:	mov	r3, r0
   48a60:	add	r7, r3, sl
   48a64:	add	r7, r7, r7, lsr #31
   48a68:	asr	r6, r7, #1
   48a6c:	add	r5, r6, r6, lsl #1
   48a70:	add	r5, r2, r5, lsl #3
   48a74:	ldr	r5, [r5, #4]
   48a78:	cmp	r5, r1
   48a7c:	addlt	sl, r9, r7, asr #1
   48a80:	movge	r3, r6
   48a84:	cmp	sl, r3
   48a88:	blt	48a60 <__assert_fail@plt+0x35fb0>
   48a8c:	cmp	sl, r0
   48a90:	bge	48b7c <__assert_fail@plt+0x360cc>
   48a94:	ldr	r2, [r8, #116]	; 0x74
   48a98:	add	r3, sl, sl, lsl #1
   48a9c:	add	r2, r2, r3, lsl #3
   48aa0:	ldr	r2, [r2, #4]
   48aa4:	cmp	r2, r1
   48aa8:	mvnne	sl, #0
   48aac:	cmp	r0, #1
   48ab0:	bge	48b88 <__assert_fail@plt+0x360d8>
   48ab4:	mov	r5, #0
   48ab8:	cmp	r5, r0
   48abc:	blt	48bc8 <__assert_fail@plt+0x36118>
   48ac0:	b	48bec <__assert_fail@plt+0x3613c>
   48ac4:	ldr	lr, [sp, #28]
   48ac8:	ldr	r4, [sp, #32]
   48acc:	ldr	r2, [lr]
   48ad0:	ldr	r2, [r2, r1, lsl #2]
   48ad4:	cmp	r2, #0
   48ad8:	beq	48924 <__assert_fail@plt+0x35e74>
   48adc:	ldr	r3, [r2, #8]
   48ae0:	cmp	r3, #1
   48ae4:	blt	48924 <__assert_fail@plt+0x35e74>
   48ae8:	ldr	r1, [r7, #12]
   48aec:	ldr	r7, [fp, #-44]	; 0xffffffd4
   48af0:	ldr	r2, [r2, #12]
   48af4:	ldr	r1, [r1, r7, lsl #2]
   48af8:	subs	r7, r3, #1
   48afc:	mov	r3, #0
   48b00:	beq	48b24 <__assert_fail@plt+0x36074>
   48b04:	add	r6, r3, r7
   48b08:	lsr	r5, r6, #1
   48b0c:	ldr	r4, [r2, r5, lsl #2]
   48b10:	cmp	r4, r1
   48b14:	addlt	r3, r9, r6, lsr #1
   48b18:	movge	r7, r5
   48b1c:	cmp	r3, r7
   48b20:	bcc	48b04 <__assert_fail@plt+0x36054>
   48b24:	ldr	r4, [sp, #32]
   48b28:	cmp	r0, #0
   48b2c:	beq	48924 <__assert_fail@plt+0x35e74>
   48b30:	ldr	r2, [r2, r3, lsl #2]
   48b34:	cmp	r2, r1
   48b38:	beq	48a1c <__assert_fail@plt+0x35f6c>
   48b3c:	b	48924 <__assert_fail@plt+0x35e74>
   48b40:	mov	r0, #4
   48b44:	str	r9, [fp, #-36]	; 0xffffffdc
   48b48:	str	r9, [fp, #-40]	; 0xffffffd8
   48b4c:	bl	35350 <__assert_fail@plt+0x228a0>
   48b50:	ldr	r1, [fp, #-44]	; 0xffffffd4
   48b54:	cmp	r0, #0
   48b58:	str	r0, [fp, #-32]	; 0xffffffe0
   48b5c:	beq	48e9c <__assert_fail@plt+0x363ec>
   48b60:	ldr	lr, [sp, #28]
   48b64:	str	r1, [r0]
   48b68:	b	488e0 <__assert_fail@plt+0x35e30>
   48b6c:	ldr	r1, [sp, #40]	; 0x28
   48b70:	mov	sl, #0
   48b74:	cmp	sl, r0
   48b78:	blt	48a94 <__assert_fail@plt+0x35fe4>
   48b7c:	mvn	sl, #0
   48b80:	cmp	r0, #1
   48b84:	blt	48ab4 <__assert_fail@plt+0x36004>
   48b88:	ldr	r2, [r8, #116]	; 0x74
   48b8c:	mov	r5, #0
   48b90:	mov	r3, r0
   48b94:	add	r7, r3, r5
   48b98:	add	r7, r7, r7, lsr #31
   48b9c:	asr	r6, r7, #1
   48ba0:	add	r1, r6, r6, lsl #1
   48ba4:	add	r1, r2, r1, lsl #3
   48ba8:	ldr	r1, [r1, #4]
   48bac:	cmp	r1, r4
   48bb0:	addlt	r5, r9, r7, asr #1
   48bb4:	movge	r3, r6
   48bb8:	cmp	r5, r3
   48bbc:	blt	48b94 <__assert_fail@plt+0x360e4>
   48bc0:	cmp	r5, r0
   48bc4:	bge	48bec <__assert_fail@plt+0x3613c>
   48bc8:	ldr	r0, [r8, #116]	; 0x74
   48bcc:	add	r1, r5, r5, lsl #1
   48bd0:	add	r0, r0, r1, lsl #3
   48bd4:	ldr	r0, [r0, #4]
   48bd8:	cmp	r0, r4
   48bdc:	mvnne	r5, #0
   48be0:	cmp	ip, #1
   48be4:	bge	48bf8 <__assert_fail@plt+0x36148>
   48be8:	b	488b0 <__assert_fail@plt+0x35e00>
   48bec:	mvn	r5, #0
   48bf0:	cmp	ip, #1
   48bf4:	blt	488b0 <__assert_fail@plt+0x35e00>
   48bf8:	ldr	ip, [r8, #84]	; 0x54
   48bfc:	mov	r6, #0
   48c00:	str	ip, [sp, #12]
   48c04:	ldr	r0, [lr, #24]
   48c08:	ldr	r3, [r8, #116]	; 0x74
   48c0c:	ldr	r4, [ip]
   48c10:	mvn	r8, #0
   48c14:	ldr	r2, [r0, r6, lsl #2]
   48c18:	mov	r0, r3
   48c1c:	add	r1, r2, r2, lsl #1
   48c20:	ldr	r7, [r0, r1, lsl #3]!
   48c24:	ldr	r0, [r0, #8]
   48c28:	ldr	r4, [r4, r7, lsl #3]
   48c2c:	ldr	r7, [sp, #40]	; 0x28
   48c30:	cmp	r0, r7
   48c34:	str	r4, [sp, #44]	; 0x2c
   48c38:	ble	48c54 <__assert_fail@plt+0x361a4>
   48c3c:	mvn	r9, #0
   48c40:	ldr	r1, [sp, #36]	; 0x24
   48c44:	ldr	r4, [sp, #32]
   48c48:	cmp	r0, r1
   48c4c:	blt	48cd8 <__assert_fail@plt+0x36228>
   48c50:	b	48d54 <__assert_fail@plt+0x362a4>
   48c54:	add	r1, r3, r1, lsl #3
   48c58:	mov	r9, #1
   48c5c:	ldr	r1, [r1, #12]
   48c60:	cmp	r1, r7
   48c64:	blt	48cc8 <__assert_fail@plt+0x36218>
   48c68:	sub	r1, r1, r7
   48c6c:	cmp	r0, r7
   48c70:	mov	r7, #1
   48c74:	clz	r1, r1
   48c78:	lsr	r4, r1, #5
   48c7c:	lsl	r1, r4, #1
   48c80:	orreq	r1, r7, r4, lsl #1
   48c84:	cmp	r1, #0
   48c88:	beq	48d38 <__assert_fail@plt+0x36288>
   48c8c:	ldr	r4, [sp, #48]	; 0x30
   48c90:	ldr	r2, [sp, #44]	; 0x2c
   48c94:	ldr	r3, [sp, #8]
   48c98:	str	sl, [sp]
   48c9c:	mov	r0, r4
   48ca0:	bl	4a4d8 <__assert_fail@plt+0x37a28>
   48ca4:	ldr	lr, [sp, #28]
   48ca8:	mov	r9, r0
   48cac:	ldr	r3, [r4, #116]	; 0x74
   48cb0:	ldr	ip, [sp, #12]
   48cb4:	ldr	r0, [lr, #24]
   48cb8:	ldr	r2, [r0, r6, lsl #2]
   48cbc:	add	r0, r2, r2, lsl #1
   48cc0:	add	r0, r3, r0, lsl #3
   48cc4:	ldr	r0, [r0, #8]
   48cc8:	ldr	r1, [sp, #36]	; 0x24
   48ccc:	ldr	r4, [sp, #32]
   48cd0:	cmp	r0, r1
   48cd4:	bge	48d54 <__assert_fail@plt+0x362a4>
   48cd8:	add	r1, r2, r2, lsl #1
   48cdc:	mov	r8, #1
   48ce0:	add	r1, r3, r1, lsl #3
   48ce4:	ldr	r1, [r1, #12]
   48ce8:	cmp	r1, r4
   48cec:	blt	48d54 <__assert_fail@plt+0x362a4>
   48cf0:	sub	r1, r1, r4
   48cf4:	cmp	r0, r4
   48cf8:	mov	r0, #1
   48cfc:	clz	r1, r1
   48d00:	lsr	r2, r1, #5
   48d04:	lsl	r1, r2, #1
   48d08:	orreq	r1, r0, r2, lsl #1
   48d0c:	cmp	r1, #0
   48d10:	beq	48d50 <__assert_fail@plt+0x362a0>
   48d14:	ldr	r0, [sp, #48]	; 0x30
   48d18:	ldr	r2, [sp, #44]	; 0x2c
   48d1c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   48d20:	str	r5, [sp]
   48d24:	bl	4a4d8 <__assert_fail@plt+0x37a28>
   48d28:	ldr	ip, [sp, #12]
   48d2c:	ldr	lr, [sp, #28]
   48d30:	mov	r8, r0
   48d34:	b	48d54 <__assert_fail@plt+0x362a4>
   48d38:	mov	r9, #0
   48d3c:	ldr	r1, [sp, #36]	; 0x24
   48d40:	ldr	r4, [sp, #32]
   48d44:	cmp	r0, r1
   48d48:	blt	48cd8 <__assert_fail@plt+0x36228>
   48d4c:	b	48d54 <__assert_fail@plt+0x362a4>
   48d50:	mov	r8, #0
   48d54:	cmp	r8, r9
   48d58:	ldr	r8, [sp, #48]	; 0x30
   48d5c:	mov	r9, #1
   48d60:	bne	488e0 <__assert_fail@plt+0x35e30>
   48d64:	ldr	r0, [lr, #20]
   48d68:	add	r6, r6, #1
   48d6c:	cmp	r6, r0
   48d70:	blt	48c04 <__assert_fail@plt+0x36154>
   48d74:	b	488b0 <__assert_fail@plt+0x35e00>
   48d78:	cmp	r2, r1
   48d7c:	bne	48db8 <__assert_fail@plt+0x36308>
   48d80:	lsl	r0, r2, #1
   48d84:	lsl	r1, r2, #3
   48d88:	str	r0, [fp, #-40]	; 0xffffffd8
   48d8c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   48d90:	bl	36110 <__assert_fail@plt+0x23660>
   48d94:	cmp	r0, #0
   48d98:	beq	48ed4 <__assert_fail@plt+0x36424>
   48d9c:	str	r0, [fp, #-32]	; 0xffffffe0
   48da0:	ldr	lr, [sp, #28]
   48da4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   48da8:	ldr	r2, [r0]
   48dac:	cmp	r2, r6
   48db0:	bgt	48dc8 <__assert_fail@plt+0x36318>
   48db4:	b	48e38 <__assert_fail@plt+0x36388>
   48db8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   48dbc:	ldr	r2, [r0]
   48dc0:	cmp	r2, r6
   48dc4:	ble	48e38 <__assert_fail@plt+0x36388>
   48dc8:	cmp	r1, #1
   48dcc:	blt	48e68 <__assert_fail@plt+0x363b8>
   48dd0:	ands	r3, r1, #3
   48dd4:	sub	ip, r1, #1
   48dd8:	beq	48dfc <__assert_fail@plt+0x3634c>
   48ddc:	add	r2, r0, r1, lsl #2
   48de0:	mov	r7, r2
   48de4:	ldr	r5, [r7, #-4]!
   48de8:	subs	r3, r3, #1
   48dec:	sub	r1, r1, #1
   48df0:	str	r5, [r2]
   48df4:	mov	r2, r7
   48df8:	bne	48de4 <__assert_fail@plt+0x36334>
   48dfc:	cmp	ip, #3
   48e00:	bcc	48e30 <__assert_fail@plt+0x36380>
   48e04:	add	r2, r0, r1, lsl #2
   48e08:	sub	r2, r2, #8
   48e0c:	ldr	r5, [r2, #4]
   48e10:	ldmda	r2, {r3, r7, ip}
   48e14:	sub	sl, r2, #4
   48e18:	sub	r1, r1, #4
   48e1c:	cmp	r1, #0
   48e20:	stm	sl, {r3, r7, ip}
   48e24:	str	r5, [r2, #8]
   48e28:	sub	r2, r2, #16
   48e2c:	bgt	48e0c <__assert_fail@plt+0x3635c>
   48e30:	mov	r1, #0
   48e34:	b	48e68 <__assert_fail@plt+0x363b8>
   48e38:	add	r2, r0, r1, lsl #2
   48e3c:	ldr	r3, [r2, #-4]
   48e40:	cmp	r3, r6
   48e44:	ble	48e68 <__assert_fail@plt+0x363b8>
   48e48:	sub	r1, r1, #2
   48e4c:	str	r3, [r2]
   48e50:	sub	r1, r1, #1
   48e54:	ldr	r3, [r2, #-8]
   48e58:	sub	r2, r2, #4
   48e5c:	cmp	r3, r6
   48e60:	bgt	48e4c <__assert_fail@plt+0x3639c>
   48e64:	add	r1, r1, #2
   48e68:	str	r6, [r0, r1, lsl #2]
   48e6c:	b	488d4 <__assert_fail@plt+0x35e24>
   48e70:	mov	r7, #0
   48e74:	b	48e88 <__assert_fail@plt+0x363d8>
   48e78:	lsl	r2, r4, #2
   48e7c:	mov	r1, #0
   48e80:	mov	r7, #0
   48e84:	bl	12834 <memset@plt>
   48e88:	ldr	r0, [fp, #-32]	; 0xffffffe0
   48e8c:	bl	32910 <__assert_fail@plt+0x1fe60>
   48e90:	mov	r0, r7
   48e94:	sub	sp, fp, #28
   48e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   48e9c:	mov	r0, #0
   48ea0:	mov	r7, #12
   48ea4:	str	r0, [fp, #-40]	; 0xffffffd8
   48ea8:	str	r0, [fp, #-36]	; 0xffffffdc
   48eac:	b	48e88 <__assert_fail@plt+0x363d8>
   48eb0:	mov	r7, r0
   48eb4:	b	48e88 <__assert_fail@plt+0x363d8>
   48eb8:	mov	r0, #0
   48ebc:	mov	r7, #12
   48ec0:	str	r0, [fp, #-40]	; 0xffffffd8
   48ec4:	str	r0, [fp, #-36]	; 0xffffffdc
   48ec8:	mov	r0, r7
   48ecc:	sub	sp, fp, #28
   48ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   48ed4:	mov	r7, #12
   48ed8:	b	48e88 <__assert_fail@plt+0x363d8>
   48edc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   48ee0:	add	fp, sp, #28
   48ee4:	sub	sp, sp, #140	; 0x8c
   48ee8:	mov	r5, r1
   48eec:	ldr	r1, [r0, #84]	; 0x54
   48ef0:	mov	ip, r2
   48ef4:	mov	r2, #0
   48ef8:	str	r0, [sp, #76]	; 0x4c
   48efc:	str	r2, [fp, #-76]	; 0xffffffb4
   48f00:	str	ip, [sp, #80]	; 0x50
   48f04:	str	r5, [sp, #84]	; 0x54
   48f08:	str	r1, [fp, #-80]	; 0xffffffb0
   48f0c:	ldr	r1, [r0, #100]	; 0x64
   48f10:	ldr	r8, [r1, ip, lsl #2]
   48f14:	ldr	r1, [r3, #4]
   48f18:	cmp	r8, #0
   48f1c:	mov	r6, r8
   48f20:	addne	r6, r6, #4
   48f24:	cmp	r1, #0
   48f28:	str	r6, [sp, #68]	; 0x44
   48f2c:	beq	49310 <__assert_fail@plt+0x36860>
   48f30:	mov	r9, r3
   48f34:	cmp	r8, #0
   48f38:	beq	49330 <__assert_fail@plt+0x36880>
   48f3c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   48f40:	mov	r0, #0
   48f44:	mov	r2, r9
   48f48:	str	r9, [sp, #60]	; 0x3c
   48f4c:	str	r0, [fp, #-72]	; 0xffffffb8
   48f50:	sub	r0, fp, #72	; 0x48
   48f54:	bl	46194 <__assert_fail@plt+0x336e4>
   48f58:	ldr	r9, [fp, #-72]	; 0xffffffb8
   48f5c:	cmp	r9, #0
   48f60:	bne	49de8 <__assert_fail@plt+0x37338>
   48f64:	mov	r4, r0
   48f68:	mov	r5, r0
   48f6c:	ldr	r0, [r4, #28]!
   48f70:	cmp	r0, #0
   48f74:	bne	4900c <__assert_fail@plt+0x3655c>
   48f78:	ldr	r0, [sp, #60]	; 0x3c
   48f7c:	mov	r1, #0
   48f80:	ldr	r0, [r0, #4]
   48f84:	str	r0, [r5, #28]
   48f88:	lsl	r0, r0, #2
   48f8c:	str	r1, [r5, #32]
   48f90:	bl	35350 <__assert_fail@plt+0x228a0>
   48f94:	cmp	r0, #0
   48f98:	mov	r1, #12
   48f9c:	mov	r9, #12
   48fa0:	str	r0, [r5, #36]	; 0x24
   48fa4:	movne	r1, #0
   48fa8:	cmp	r0, #0
   48fac:	str	r1, [fp, #-72]	; 0xffffffb8
   48fb0:	beq	49de8 <__assert_fail@plt+0x37338>
   48fb4:	ldr	r0, [sp, #60]	; 0x3c
   48fb8:	ldr	r0, [r0, #4]
   48fbc:	cmp	r0, #1
   48fc0:	blt	4900c <__assert_fail@plt+0x3655c>
   48fc4:	ldr	r7, [sp, #60]	; 0x3c
   48fc8:	mov	r5, #0
   48fcc:	ldr	r0, [r7, #8]
   48fd0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   48fd4:	ldr	r0, [r0, r5, lsl #2]
   48fd8:	ldr	r1, [r1, #28]
   48fdc:	add	r0, r0, r0, lsl #1
   48fe0:	add	r1, r1, r0, lsl #2
   48fe4:	mov	r0, r4
   48fe8:	bl	41ea8 <__assert_fail@plt+0x2f3f8>
   48fec:	cmp	r0, #0
   48ff0:	bne	49de4 <__assert_fail@plt+0x37334>
   48ff4:	ldr	r0, [r7, #4]
   48ff8:	add	r5, r5, #1
   48ffc:	cmp	r5, r0
   49000:	blt	48fcc <__assert_fail@plt+0x3651c>
   49004:	mov	r0, #0
   49008:	str	r0, [fp, #-72]	; 0xffffffb8
   4900c:	ldr	r0, [sp, #60]	; 0x3c
   49010:	mov	r1, r6
   49014:	mov	r2, r4
   49018:	bl	49e58 <__assert_fail@plt+0x373a8>
   4901c:	cmp	r0, #0
   49020:	str	r0, [fp, #-76]	; 0xffffffb4
   49024:	bne	49e10 <__assert_fail@plt+0x37360>
   49028:	ldr	r5, [sp, #84]	; 0x54
   4902c:	ldr	r9, [sp, #60]	; 0x3c
   49030:	ldr	r0, [r5, #20]
   49034:	cmp	r0, #0
   49038:	beq	49330 <__assert_fail@plt+0x36880>
   4903c:	ldr	lr, [sp, #80]	; 0x50
   49040:	cmp	r0, #1
   49044:	str	r8, [sp, #56]	; 0x38
   49048:	blt	49324 <__assert_fail@plt+0x36874>
   4904c:	ldr	r0, [sp, #76]	; 0x4c
   49050:	mov	r1, #0
   49054:	ldr	r0, [r0, #116]	; 0x74
   49058:	str	r0, [sp, #64]	; 0x40
   4905c:	b	49074 <__assert_fail@plt+0x365c4>
   49060:	ldr	r1, [sp, #72]	; 0x48
   49064:	ldr	r0, [r5, #20]
   49068:	add	r1, r1, #1
   4906c:	cmp	r1, r0
   49070:	bge	49324 <__assert_fail@plt+0x36874>
   49074:	ldr	r0, [r5, #24]
   49078:	str	r1, [sp, #72]	; 0x48
   4907c:	ldr	r0, [r0, r1, lsl #2]
   49080:	ldr	r1, [sp, #64]	; 0x40
   49084:	add	r0, r0, r0, lsl #1
   49088:	add	r1, r1, r0, lsl #3
   4908c:	ldr	r2, [r1, #8]
   49090:	cmp	r2, lr
   49094:	bge	49060 <__assert_fail@plt+0x365b0>
   49098:	ldr	r1, [r1, #4]
   4909c:	cmp	r1, lr
   490a0:	blt	49060 <__assert_fail@plt+0x365b0>
   490a4:	ldr	r1, [sp, #64]	; 0x40
   490a8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   490ac:	ldr	r0, [r1, r0, lsl #3]!
   490b0:	ldr	r2, [r2]
   490b4:	ldr	r1, [r1, #12]
   490b8:	ldr	r6, [r2, r0, lsl #3]
   490bc:	ldr	r0, [r9, #4]
   490c0:	cmp	r1, lr
   490c4:	bne	492a0 <__assert_fail@plt+0x367f0>
   490c8:	cmp	r0, #1
   490cc:	blt	49060 <__assert_fail@plt+0x365b0>
   490d0:	ldr	r3, [r9, #8]
   490d4:	mvn	r8, #0
   490d8:	mvn	r1, #0
   490dc:	b	490fc <__assert_fail@plt+0x3664c>
   490e0:	ldr	r4, [r2, r7, lsl #3]
   490e4:	cmp	r6, r4
   490e8:	moveq	r8, r7
   490ec:	mov	r4, #1
   490f0:	add	r3, r3, #4
   490f4:	subs	r0, r0, #1
   490f8:	beq	49134 <__assert_fail@plt+0x36684>
   490fc:	ldr	r7, [r3]
   49100:	add	r4, r2, r7, lsl #3
   49104:	ldrb	r4, [r4, #4]
   49108:	cmp	r4, #9
   4910c:	beq	490e0 <__assert_fail@plt+0x36630>
   49110:	cmp	r4, #8
   49114:	bne	490ec <__assert_fail@plt+0x3663c>
   49118:	ldr	r4, [r2, r7, lsl #3]
   4911c:	cmp	r6, r4
   49120:	moveq	r1, r7
   49124:	mov	r4, #1
   49128:	add	r3, r3, #4
   4912c:	subs	r0, r0, #1
   49130:	bne	490fc <__assert_fail@plt+0x3664c>
   49134:	ldr	r3, [sp, #68]	; 0x44
   49138:	cmp	r1, #0
   4913c:	bmi	49158 <__assert_fail@plt+0x366a8>
   49140:	ldr	r0, [fp, #-80]	; 0xffffffb0
   49144:	ldr	r2, [sp, #60]	; 0x3c
   49148:	bl	4a04c <__assert_fail@plt+0x3759c>
   4914c:	ldr	lr, [sp, #80]	; 0x50
   49150:	cmp	r0, #0
   49154:	bne	49d98 <__assert_fail@plt+0x372e8>
   49158:	ldr	r9, [sp, #60]	; 0x3c
   4915c:	cmp	r8, #0
   49160:	bmi	49060 <__assert_fail@plt+0x365b0>
   49164:	ldr	ip, [r9, #4]
   49168:	cmp	ip, #1
   4916c:	blt	49060 <__assert_fail@plt+0x365b0>
   49170:	mov	sl, #0
   49174:	b	491ac <__assert_fail@plt+0x366fc>
   49178:	ldr	r0, [fp, #-80]	; 0xffffffb0
   4917c:	ldr	r3, [sp, #68]	; 0x44
   49180:	mov	r2, r9
   49184:	bl	4a04c <__assert_fail@plt+0x3759c>
   49188:	cmp	r0, #0
   4918c:	bne	49d98 <__assert_fail@plt+0x372e8>
   49190:	ldr	ip, [r9, #4]
   49194:	ldr	lr, [sp, #80]	; 0x50
   49198:	sub	sl, sl, #1
   4919c:	mov	r1, r9
   491a0:	add	sl, sl, #1
   491a4:	cmp	sl, ip
   491a8:	bge	49060 <__assert_fail@plt+0x365b0>
   491ac:	ldr	r1, [r9, #8]
   491b0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   491b4:	ldr	r1, [r1, sl, lsl #2]
   491b8:	ldr	r3, [r0, #28]
   491bc:	add	r2, r1, r1, lsl #1
   491c0:	add	r3, r3, r2, lsl #2
   491c4:	ldr	r7, [r3, #4]
   491c8:	cmp	r7, #1
   491cc:	blt	4922c <__assert_fail@plt+0x3677c>
   491d0:	ldr	r3, [r3, #8]
   491d4:	mov	lr, ip
   491d8:	subs	r6, r7, #1
   491dc:	beq	49210 <__assert_fail@plt+0x36760>
   491e0:	mov	r7, #0
   491e4:	add	r4, r7, r6
   491e8:	mov	ip, #1
   491ec:	lsr	r0, r4, #1
   491f0:	ldr	r5, [r3, r0, lsl #2]
   491f4:	cmp	r5, r8
   491f8:	addlt	r7, ip, r4, lsr #1
   491fc:	movge	r6, r0
   49200:	mov	r4, #1
   49204:	cmp	r7, r6
   49208:	bcc	491e4 <__assert_fail@plt+0x36734>
   4920c:	b	49214 <__assert_fail@plt+0x36764>
   49210:	mov	r7, #0
   49214:	ldr	r0, [r3, r7, lsl #2]
   49218:	mov	ip, lr
   4921c:	ldr	r5, [sp, #84]	; 0x54
   49220:	ldr	lr, [sp, #80]	; 0x50
   49224:	cmp	r0, r8
   49228:	beq	491a0 <__assert_fail@plt+0x366f0>
   4922c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   49230:	ldr	r0, [r0, #24]
   49234:	add	r2, r0, r2, lsl #2
   49238:	ldr	r3, [r2, #4]
   4923c:	cmp	r3, #1
   49240:	blt	49178 <__assert_fail@plt+0x366c8>
   49244:	ldr	r2, [r2, #8]
   49248:	subs	r7, r3, #1
   4924c:	beq	49288 <__assert_fail@plt+0x367d8>
   49250:	mov	r3, #0
   49254:	add	r0, r3, r7
   49258:	lsr	r6, r0, #1
   4925c:	ldr	r5, [r2, r6, lsl #2]
   49260:	cmp	r5, r8
   49264:	addlt	r3, r4, r0, lsr #1
   49268:	movge	r7, r6
   4926c:	cmp	r3, r7
   49270:	bcc	49254 <__assert_fail@plt+0x367a4>
   49274:	ldr	r0, [r2, r3, lsl #2]
   49278:	ldr	r5, [sp, #84]	; 0x54
   4927c:	cmp	r0, r8
   49280:	bne	49178 <__assert_fail@plt+0x366c8>
   49284:	b	491a0 <__assert_fail@plt+0x366f0>
   49288:	mov	r3, #0
   4928c:	ldr	r0, [r2, r3, lsl #2]
   49290:	ldr	r5, [sp, #84]	; 0x54
   49294:	cmp	r0, r8
   49298:	beq	491a0 <__assert_fail@plt+0x366f0>
   4929c:	b	49178 <__assert_fail@plt+0x366c8>
   492a0:	cmp	r0, #1
   492a4:	blt	49060 <__assert_fail@plt+0x365b0>
   492a8:	mov	r7, #0
   492ac:	ldr	r1, [r9, #8]
   492b0:	ldr	r1, [r1, r7, lsl #2]
   492b4:	add	r3, r2, r1, lsl #3
   492b8:	ldrb	r3, [r3, #4]
   492bc:	orr	r3, r3, #1
   492c0:	cmp	r3, #9
   492c4:	bne	492f8 <__assert_fail@plt+0x36848>
   492c8:	ldr	r2, [r2, r1, lsl #3]
   492cc:	cmp	r6, r2
   492d0:	bne	492f8 <__assert_fail@plt+0x36848>
   492d4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   492d8:	ldr	r3, [sp, #68]	; 0x44
   492dc:	mov	r2, r9
   492e0:	bl	4a04c <__assert_fail@plt+0x3759c>
   492e4:	cmp	r0, #0
   492e8:	bne	49d98 <__assert_fail@plt+0x372e8>
   492ec:	ldr	r0, [r9, #4]
   492f0:	ldr	lr, [sp, #80]	; 0x50
   492f4:	mov	r1, r9
   492f8:	add	r7, r7, #1
   492fc:	cmp	r7, r0
   49300:	bge	49060 <__assert_fail@plt+0x365b0>
   49304:	ldr	r1, [fp, #-80]	; 0xffffffb0
   49308:	ldr	r2, [r1]
   4930c:	b	492ac <__assert_fail@plt+0x367fc>
   49310:	ldr	r1, [r5]
   49314:	str	r2, [r1, ip, lsl #2]
   49318:	cmp	r8, #0
   4931c:	bne	49364 <__assert_fail@plt+0x368b4>
   49320:	b	49d88 <__assert_fail@plt+0x372d8>
   49324:	ldr	r8, [sp, #56]	; 0x38
   49328:	mov	r0, #0
   4932c:	str	r0, [fp, #-76]	; 0xffffffb4
   49330:	ldr	r1, [fp, #-80]	; 0xffffffb0
   49334:	sub	r0, fp, #76	; 0x4c
   49338:	mov	r2, r9
   4933c:	bl	46194 <__assert_fail@plt+0x336e4>
   49340:	ldr	r1, [r5]
   49344:	ldr	ip, [sp, #80]	; 0x50
   49348:	str	r0, [r1, ip, lsl #2]
   4934c:	ldr	r0, [sp, #76]	; 0x4c
   49350:	ldr	r9, [fp, #-76]	; 0xffffffb4
   49354:	cmp	r9, #0
   49358:	bne	49d8c <__assert_fail@plt+0x372dc>
   4935c:	cmp	r8, #0
   49360:	beq	49d88 <__assert_fail@plt+0x372d8>
   49364:	ldr	r1, [r0, #100]	; 0x64
   49368:	ldr	r1, [r1, ip, lsl #2]
   4936c:	ldrb	r1, [r1, #52]	; 0x34
   49370:	tst	r1, #64	; 0x40
   49374:	beq	49d88 <__assert_fail@plt+0x372d8>
   49378:	ldr	lr, [r0, #108]	; 0x6c
   4937c:	ldr	r8, [r0, #84]	; 0x54
   49380:	cmp	lr, #1
   49384:	blt	49d74 <__assert_fail@plt+0x372c4>
   49388:	ldr	r1, [r0, #116]	; 0x74
   4938c:	mov	r4, #0
   49390:	mov	r2, #1
   49394:	mov	r3, lr
   49398:	add	r7, r3, r4
   4939c:	add	r7, r7, r7, lsr #31
   493a0:	asr	r6, r7, #1
   493a4:	add	r5, r6, r6, lsl #1
   493a8:	add	r5, r1, r5, lsl #3
   493ac:	ldr	r5, [r5, #4]
   493b0:	cmp	r5, ip
   493b4:	addlt	r4, r2, r7, asr #1
   493b8:	movge	r3, r6
   493bc:	cmp	r4, r3
   493c0:	blt	49398 <__assert_fail@plt+0x368e8>
   493c4:	cmp	r4, lr
   493c8:	bge	49d80 <__assert_fail@plt+0x372d0>
   493cc:	cmn	r4, #1
   493d0:	beq	49d80 <__assert_fail@plt+0x372d0>
   493d4:	ldr	r0, [sp, #76]	; 0x4c
   493d8:	add	r1, r4, r4, lsl #1
   493dc:	str	r1, [sp, #28]
   493e0:	ldr	r0, [r0, #116]	; 0x74
   493e4:	add	r0, r0, r1, lsl #3
   493e8:	ldr	r0, [r0, #4]
   493ec:	cmp	r0, ip
   493f0:	bne	49d80 <__assert_fail@plt+0x372d0>
   493f4:	ldr	r1, [sp, #68]	; 0x44
   493f8:	mov	r2, #0
   493fc:	str	r2, [fp, #-72]	; 0xffffffb8
   49400:	ldr	r0, [r1, #4]
   49404:	cmp	r0, #0
   49408:	ble	49dac <__assert_fail@plt+0x372fc>
   4940c:	str	r4, [sp, #20]
   49410:	add	r0, ip, #1
   49414:	ldr	r4, [sp, #84]	; 0x54
   49418:	mov	r9, #0
   4941c:	str	r8, [sp, #36]	; 0x24
   49420:	str	r0, [sp, #12]
   49424:	sub	r0, fp, #72	; 0x48
   49428:	add	r0, r0, #16
   4942c:	str	r0, [sp, #8]
   49430:	mov	r0, #0
   49434:	str	r0, [sp, #48]	; 0x30
   49438:	b	49450 <__assert_fail@plt+0x369a0>
   4943c:	ldr	r1, [sp, #68]	; 0x44
   49440:	add	r9, r9, #1
   49444:	ldr	r0, [r1, #4]
   49448:	cmp	r9, r0
   4944c:	bge	49db4 <__assert_fail@plt+0x37304>
   49450:	ldr	r0, [r1, #8]
   49454:	ldr	r1, [r4, #8]
   49458:	ldr	r3, [r0, r9, lsl #2]
   4945c:	ldr	r0, [r8]
   49460:	add	r0, r0, r3, lsl #3
   49464:	cmp	r3, r1
   49468:	ldrb	r0, [r0, #4]
   4946c:	bne	49488 <__assert_fail@plt+0x369d8>
   49470:	cmp	r0, #4
   49474:	bne	4943c <__assert_fail@plt+0x3698c>
   49478:	ldr	r0, [r4, #12]
   4947c:	cmp	r0, ip
   49480:	bne	49490 <__assert_fail@plt+0x369e0>
   49484:	b	4943c <__assert_fail@plt+0x3698c>
   49488:	cmp	r0, #4
   4948c:	bne	4943c <__assert_fail@plt+0x3698c>
   49490:	ldr	r0, [sp, #76]	; 0x4c
   49494:	ldr	r1, [sp, #28]
   49498:	ldr	r5, [sp, #20]
   4949c:	str	r9, [sp, #40]	; 0x28
   494a0:	str	r3, [sp, #56]	; 0x38
   494a4:	ldr	r0, [r0, #116]	; 0x74
   494a8:	add	r7, r0, r1, lsl #3
   494ac:	ldr	r0, [r7]
   494b0:	cmp	r0, r3
   494b4:	beq	49c00 <__assert_fail@plt+0x37150>
   494b8:	b	49d58 <__assert_fail@plt+0x372a8>
   494bc:	mov	r8, lr
   494c0:	ldr	r4, [sp, #84]	; 0x54
   494c4:	ldr	r3, [sp, #56]	; 0x38
   494c8:	ldr	r5, [fp, #-80]	; 0xffffffb0
   494cc:	ldr	lr, [sp, #64]	; 0x40
   494d0:	b	49d58 <__assert_fail@plt+0x372a8>
   494d4:	mov	r9, #0
   494d8:	ldr	r3, [sp, #76]	; 0x4c
   494dc:	cmp	r9, r0
   494e0:	blt	49cec <__assert_fail@plt+0x3723c>
   494e4:	mvn	r9, #0
   494e8:	cmp	r0, #1
   494ec:	blt	49d0c <__assert_fail@plt+0x3725c>
   494f0:	ldr	r1, [r3, #116]	; 0x74
   494f4:	ldr	lr, [sp, #64]	; 0x40
   494f8:	mov	r8, #0
   494fc:	mov	r2, r0
   49500:	add	r3, r2, r8
   49504:	add	r3, r3, r3, lsr #31
   49508:	asr	r6, r3, #1
   4950c:	add	r5, r6, r6, lsl #1
   49510:	add	r5, r1, r5, lsl #3
   49514:	ldr	r5, [r5, #4]
   49518:	cmp	r5, sl
   4951c:	addlt	r8, r4, r3, asr #1
   49520:	movge	r2, r6
   49524:	cmp	r8, r2
   49528:	blt	49500 <__assert_fail@plt+0x36a50>
   4952c:	ldr	r3, [sp, #76]	; 0x4c
   49530:	cmp	r8, r0
   49534:	bge	49d20 <__assert_fail@plt+0x37270>
   49538:	ldr	r0, [r3, #116]	; 0x74
   4953c:	add	r1, r8, r8, lsl #1
   49540:	add	r0, r0, r1, lsl #3
   49544:	ldr	r0, [r0, #4]
   49548:	cmp	r0, sl
   4954c:	mvnne	r8, #0
   49550:	ldr	r5, [sp, #84]	; 0x54
   49554:	ldr	r4, [r5, #20]
   49558:	cmp	r4, #1
   4955c:	blt	496e0 <__assert_fail@plt+0x36c30>
   49560:	ldr	r0, [r3, #84]	; 0x54
   49564:	mov	r6, #0
   49568:	str	r0, [sp, #60]	; 0x3c
   4956c:	ldr	r0, [r5, #24]
   49570:	ldr	r3, [r3, #116]	; 0x74
   49574:	ldr	r4, [sp, #60]	; 0x3c
   49578:	ldr	r2, [r0, r6, lsl #2]
   4957c:	mov	r0, r3
   49580:	ldr	r4, [r4]
   49584:	add	r1, r2, r2, lsl #1
   49588:	ldr	r5, [r0, r1, lsl #3]!
   4958c:	ldr	r0, [r0, #8]
   49590:	ldr	r4, [r4, r5, lsl #3]
   49594:	mvn	r5, #0
   49598:	cmp	r0, ip
   4959c:	str	r4, [sp, #72]	; 0x48
   495a0:	ble	495b4 <__assert_fail@plt+0x36b04>
   495a4:	mvn	r4, #0
   495a8:	cmp	r0, sl
   495ac:	ble	4963c <__assert_fail@plt+0x36b8c>
   495b0:	b	49698 <__assert_fail@plt+0x36be8>
   495b4:	add	r1, r3, r1, lsl #3
   495b8:	mov	r4, #1
   495bc:	ldr	r1, [r1, #12]
   495c0:	cmp	r1, ip
   495c4:	blt	49634 <__assert_fail@plt+0x36b84>
   495c8:	sub	r1, r1, ip
   495cc:	cmp	r0, ip
   495d0:	mov	lr, #1
   495d4:	clz	r1, r1
   495d8:	lsr	r4, r1, #5
   495dc:	lsl	r1, r4, #1
   495e0:	orreq	r1, lr, r4, lsl #1
   495e4:	cmp	r1, #0
   495e8:	beq	4962c <__assert_fail@plt+0x36b7c>
   495ec:	ldr	r0, [sp, #76]	; 0x4c
   495f0:	ldr	r2, [sp, #72]	; 0x48
   495f4:	ldr	r3, [sp, #56]	; 0x38
   495f8:	str	r9, [sp]
   495fc:	bl	4a4d8 <__assert_fail@plt+0x37a28>
   49600:	mov	r4, r0
   49604:	ldr	r0, [sp, #84]	; 0x54
   49608:	ldr	r1, [sp, #76]	; 0x4c
   4960c:	ldr	ip, [sp, #80]	; 0x50
   49610:	ldr	r0, [r0, #24]
   49614:	ldr	r3, [r1, #116]	; 0x74
   49618:	ldr	r2, [r0, r6, lsl #2]
   4961c:	add	r0, r2, r2, lsl #1
   49620:	add	r0, r3, r0, lsl #3
   49624:	ldr	r0, [r0, #8]
   49628:	b	49630 <__assert_fail@plt+0x36b80>
   4962c:	mov	r4, #0
   49630:	ldr	lr, [sp, #64]	; 0x40
   49634:	cmp	r0, sl
   49638:	bgt	49698 <__assert_fail@plt+0x36be8>
   4963c:	add	r1, r2, r2, lsl #1
   49640:	mov	r5, #1
   49644:	add	r1, r3, r1, lsl #3
   49648:	ldr	r1, [r1, #12]
   4964c:	cmp	r1, sl
   49650:	blt	49698 <__assert_fail@plt+0x36be8>
   49654:	sub	r1, r1, sl
   49658:	cmp	r0, sl
   4965c:	mov	r0, #1
   49660:	clz	r1, r1
   49664:	lsr	r2, r1, #5
   49668:	lsl	r1, r2, #1
   4966c:	orreq	r1, r0, r2, lsl #1
   49670:	cmp	r1, #0
   49674:	beq	496bc <__assert_fail@plt+0x36c0c>
   49678:	ldr	r0, [sp, #76]	; 0x4c
   4967c:	ldr	r2, [sp, #72]	; 0x48
   49680:	ldr	r3, [sp, #52]	; 0x34
   49684:	str	r8, [sp]
   49688:	bl	4a4d8 <__assert_fail@plt+0x37a28>
   4968c:	ldr	lr, [sp, #64]	; 0x40
   49690:	ldr	ip, [sp, #80]	; 0x50
   49694:	mov	r5, r0
   49698:	cmp	r5, r4
   4969c:	bne	496c8 <__assert_fail@plt+0x36c18>
   496a0:	ldr	r5, [sp, #84]	; 0x54
   496a4:	ldr	r3, [sp, #76]	; 0x4c
   496a8:	add	r6, r6, #1
   496ac:	ldr	r4, [r5, #20]
   496b0:	cmp	r6, r4
   496b4:	blt	4956c <__assert_fail@plt+0x36abc>
   496b8:	b	496e0 <__assert_fail@plt+0x36c30>
   496bc:	mov	r5, #0
   496c0:	cmp	r5, r4
   496c4:	beq	496a0 <__assert_fail@plt+0x36bf0>
   496c8:	ldr	r4, [sp, #84]	; 0x54
   496cc:	ldr	r8, [sp, #36]	; 0x24
   496d0:	ldr	r9, [sp, #40]	; 0x28
   496d4:	ldr	r3, [sp, #56]	; 0x38
   496d8:	ldr	r5, [fp, #-80]	; 0xffffffb0
   496dc:	b	49d58 <__assert_fail@plt+0x372a8>
   496e0:	ldr	r0, [sp, #48]	; 0x30
   496e4:	cmp	r0, #0
   496e8:	beq	49728 <__assert_fail@plt+0x36c78>
   496ec:	ldr	r0, [sp, #56]	; 0x38
   496f0:	str	ip, [fp, #-60]	; 0xffffffc4
   496f4:	ldr	r8, [sp, #36]	; 0x24
   496f8:	ldr	r9, [fp, #-80]	; 0xffffffb0
   496fc:	str	r0, [fp, #-64]	; 0xffffffc0
   49700:	ldr	r0, [sp, #24]
   49704:	cmp	r0, #0
   49708:	beq	498ac <__assert_fail@plt+0x36dfc>
   4970c:	ldr	r6, [sp, #44]	; 0x2c
   49710:	cmp	r6, #0
   49714:	bne	49be0 <__assert_fail@plt+0x37130>
   49718:	mov	r6, #1
   4971c:	str	r9, [lr]
   49720:	str	lr, [sp, #32]
   49724:	b	49938 <__assert_fail@plt+0x36e88>
   49728:	mov	r0, r5
   4972c:	mov	r1, #12
   49730:	ldr	r8, [sp, #36]	; 0x24
   49734:	ldr	r9, [fp, #-80]	; 0xffffffb0
   49738:	cmp	r4, #1
   4973c:	vld1.32	{d16-d17}, [r0], r1
   49740:	sub	r1, fp, #72	; 0x48
   49744:	vld1.32	{d18-d19}, [r0]
   49748:	add	r0, r1, #12
   4974c:	vst1.32	{d18-d19}, [r0]
   49750:	mov	r0, r1
   49754:	mov	r1, #20
   49758:	vst1.64	{d16-d17}, [r0], r1
   4975c:	str	r4, [r0]
   49760:	blt	4988c <__assert_fail@plt+0x36ddc>
   49764:	lsl	r0, r4, #2
   49768:	str	r4, [fp, #-56]	; 0xffffffc8
   4976c:	bl	35350 <__assert_fail@plt+0x228a0>
   49770:	cmp	r0, #0
   49774:	str	r0, [fp, #-48]	; 0xffffffd0
   49778:	beq	49e20 <__assert_fail@plt+0x37370>
   4977c:	ldr	r2, [r5, #20]
   49780:	ldr	r1, [r5, #24]
   49784:	mov	r6, r0
   49788:	lsl	r2, r2, #2
   4978c:	bl	124e0 <memcpy@plt>
   49790:	ldr	r0, [sp, #80]	; 0x50
   49794:	mov	r2, r6
   49798:	mov	r6, r4
   4979c:	mov	lr, r2
   497a0:	str	r0, [fp, #-60]	; 0xffffffc4
   497a4:	ldr	r0, [sp, #56]	; 0x38
   497a8:	str	r0, [fp, #-64]	; 0xffffffc0
   497ac:	lsl	r0, r6, #1
   497b0:	lsl	r1, r6, #3
   497b4:	mov	r4, lr
   497b8:	str	r0, [sp, #24]
   497bc:	str	r0, [fp, #-56]	; 0xffffffc8
   497c0:	mov	r0, r2
   497c4:	bl	36110 <__assert_fail@plt+0x23660>
   497c8:	cmp	r0, #0
   497cc:	beq	49e40 <__assert_fail@plt+0x37390>
   497d0:	ldr	ip, [sp, #80]	; 0x50
   497d4:	mov	lr, r0
   497d8:	mov	r2, r0
   497dc:	str	r0, [fp, #-48]	; 0xffffffd0
   497e0:	str	r0, [sp, #16]
   497e4:	ldr	r0, [lr]
   497e8:	str	r2, [sp, #32]
   497ec:	cmp	r0, r9
   497f0:	ble	498f4 <__assert_fail@plt+0x36e44>
   497f4:	ldr	r3, [sp, #76]	; 0x4c
   497f8:	cmp	r6, #1
   497fc:	mov	r1, r6
   49800:	blt	4992c <__assert_fail@plt+0x36e7c>
   49804:	mov	sl, r3
   49808:	ands	r1, r6, #3
   4980c:	sub	r2, r6, #1
   49810:	mov	r4, r6
   49814:	mov	r0, r6
   49818:	beq	49840 <__assert_fail@plt+0x36d90>
   4981c:	add	r7, lr, r4, lsl #2
   49820:	mov	r0, r4
   49824:	mov	r3, r7
   49828:	ldr	r6, [r3, #-4]!
   4982c:	subs	r1, r1, #1
   49830:	sub	r0, r0, #1
   49834:	str	r6, [r7]
   49838:	mov	r7, r3
   4983c:	bne	49828 <__assert_fail@plt+0x36d78>
   49840:	mov	r1, #0
   49844:	cmp	r2, #3
   49848:	bcc	49880 <__assert_fail@plt+0x36dd0>
   4984c:	add	r2, lr, r0, lsl #2
   49850:	sub	r2, r2, #8
   49854:	ldr	r6, [r2]
   49858:	ldr	r5, [r2, #4]
   4985c:	ldmdb	r2, {r3, r7}
   49860:	sub	r0, r0, #4
   49864:	cmp	r0, #0
   49868:	stmda	r2, {r3, r7}
   4986c:	str	r6, [r2, #4]
   49870:	str	r5, [r2, #8]
   49874:	sub	r2, r2, #16
   49878:	bgt	49854 <__assert_fail@plt+0x36da4>
   4987c:	ldr	r5, [sp, #84]	; 0x54
   49880:	mov	r6, r4
   49884:	mov	r3, sl
   49888:	b	4992c <__assert_fail@plt+0x36e7c>
   4988c:	ldr	r1, [sp, #8]
   49890:	mov	r0, #0
   49894:	str	r0, [r1]
   49898:	str	r0, [r1, #4]
   4989c:	str	r0, [r1, #8]
   498a0:	ldr	r0, [sp, #56]	; 0x38
   498a4:	str	ip, [fp, #-60]	; 0xffffffc4
   498a8:	str	r0, [fp, #-64]	; 0xffffffc0
   498ac:	mov	r0, #1
   498b0:	str	r0, [fp, #-52]	; 0xffffffcc
   498b4:	str	r0, [fp, #-56]	; 0xffffffc8
   498b8:	mov	r0, #4
   498bc:	bl	35350 <__assert_fail@plt+0x228a0>
   498c0:	cmp	r0, #0
   498c4:	str	r0, [fp, #-48]	; 0xffffffd0
   498c8:	beq	49e20 <__assert_fail@plt+0x37370>
   498cc:	ldr	ip, [sp, #80]	; 0x50
   498d0:	ldr	r3, [sp, #76]	; 0x4c
   498d4:	str	r9, [r0]
   498d8:	str	r0, [sp, #16]
   498dc:	str	r0, [sp, #64]	; 0x40
   498e0:	str	r0, [sp, #32]
   498e4:	mov	r0, #1
   498e8:	mov	r6, #1
   498ec:	str	r0, [sp, #24]
   498f0:	b	4993c <__assert_fail@plt+0x36e8c>
   498f4:	add	r0, lr, r6, lsl #2
   498f8:	ldr	r3, [sp, #76]	; 0x4c
   498fc:	mov	r1, r6
   49900:	ldr	r2, [r0, #-4]
   49904:	cmp	r2, r9
   49908:	ble	4992c <__assert_fail@plt+0x36e7c>
   4990c:	sub	r1, r6, #2
   49910:	str	r2, [r0]
   49914:	sub	r1, r1, #1
   49918:	ldr	r2, [r0, #-8]
   4991c:	sub	r0, r0, #4
   49920:	cmp	r2, r9
   49924:	bgt	49910 <__assert_fail@plt+0x36e60>
   49928:	add	r1, r1, #2
   4992c:	add	r6, r6, #1
   49930:	str	r9, [lr, r1, lsl #2]
   49934:	str	lr, [sp, #64]	; 0x40
   49938:	str	r6, [fp, #-52]	; 0xffffffcc
   4993c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   49940:	sub	r1, fp, #72	; 0x48
   49944:	ldr	sl, [r0, ip, lsl #2]
   49948:	str	r0, [sp, #48]	; 0x30
   4994c:	mov	r0, r3
   49950:	bl	487a0 <__assert_fail@plt+0x35cf0>
   49954:	cmp	r0, #0
   49958:	bne	49df8 <__assert_fail@plt+0x37348>
   4995c:	ldr	r5, [r5, #4]
   49960:	ldr	ip, [sp, #80]	; 0x50
   49964:	ldr	lr, [sp, #64]	; 0x40
   49968:	str	r6, [sp, #44]	; 0x2c
   4996c:	cmp	r5, #0
   49970:	beq	49a18 <__assert_fail@plt+0x36f68>
   49974:	cmp	ip, #0
   49978:	bmi	49a14 <__assert_fail@plt+0x36f64>
   4997c:	ldr	r6, [sp, #48]	; 0x30
   49980:	ldr	r7, [sp, #12]
   49984:	ldr	r1, [r5]
   49988:	ldr	r0, [r6]
   4998c:	cmp	r1, #0
   49990:	bne	499b8 <__assert_fail@plt+0x36f08>
   49994:	str	r0, [r5]
   49998:	add	r5, r5, #4
   4999c:	add	r6, r6, #4
   499a0:	subs	r7, r7, #1
   499a4:	beq	49a14 <__assert_fail@plt+0x36f64>
   499a8:	ldr	r1, [r5]
   499ac:	ldr	r0, [r6]
   499b0:	cmp	r1, #0
   499b4:	beq	49994 <__assert_fail@plt+0x36ee4>
   499b8:	cmp	r0, #0
   499bc:	beq	49998 <__assert_fail@plt+0x36ee8>
   499c0:	sub	r4, fp, #44	; 0x2c
   499c4:	add	r2, r0, #4
   499c8:	add	r1, r1, #4
   499cc:	mov	r0, r4
   499d0:	bl	44a18 <__assert_fail@plt+0x31f68>
   499d4:	cmp	r0, #0
   499d8:	str	r0, [fp, #-32]	; 0xffffffe0
   499dc:	bne	49df8 <__assert_fail@plt+0x37348>
   499e0:	sub	r0, fp, #32
   499e4:	mov	r1, r8
   499e8:	mov	r2, r4
   499ec:	bl	46194 <__assert_fail@plt+0x336e4>
   499f0:	str	r0, [r5]
   499f4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   499f8:	bl	32910 <__assert_fail@plt+0x1fe60>
   499fc:	ldr	r9, [fp, #-32]	; 0xffffffe0
   49a00:	ldr	ip, [sp, #80]	; 0x50
   49a04:	ldr	lr, [sp, #64]	; 0x40
   49a08:	cmp	r9, #0
   49a0c:	beq	49998 <__assert_fail@plt+0x36ee8>
   49a10:	b	49db8 <__assert_fail@plt+0x37308>
   49a14:	ldr	r6, [sp, #44]	; 0x2c
   49a18:	ldr	r0, [sp, #48]	; 0x30
   49a1c:	cmp	r6, #1
   49a20:	str	sl, [r0, ip, lsl #2]
   49a24:	blt	49ab8 <__assert_fail@plt+0x37008>
   49a28:	ldr	r4, [sp, #84]	; 0x54
   49a2c:	ldr	r5, [fp, #-80]	; 0xffffffb0
   49a30:	subs	sl, r6, #1
   49a34:	mov	r9, #20
   49a38:	mov	r1, #0
   49a3c:	beq	49a68 <__assert_fail@plt+0x36fb8>
   49a40:	mov	r2, sl
   49a44:	mov	r0, #1
   49a48:	add	r3, r1, r2
   49a4c:	lsr	r7, r3, #1
   49a50:	ldr	r6, [lr, r7, lsl #2]
   49a54:	cmp	r6, r5
   49a58:	addlt	r1, r0, r3, lsr #1
   49a5c:	movge	r2, r7
   49a60:	cmp	r1, r2
   49a64:	bcc	49a48 <__assert_fail@plt+0x36f98>
   49a68:	ldr	r2, [lr, r1, lsl #2]
   49a6c:	mov	r3, #1
   49a70:	cmp	r2, r5
   49a74:	mov	r2, r1
   49a78:	mvnne	r2, #0
   49a7c:	cmp	r2, #0
   49a80:	bmi	49acc <__assert_fail@plt+0x3701c>
   49a84:	ldr	r0, [sp, #44]	; 0x2c
   49a88:	cmp	r0, r2
   49a8c:	ble	49acc <__assert_fail@plt+0x3701c>
   49a90:	cmp	sl, r2
   49a94:	str	sl, [fp, #-52]	; 0xffffffcc
   49a98:	ble	49ad8 <__assert_fail@plt+0x37028>
   49a9c:	mvn	r2, r1
   49aa0:	str	sl, [sp, #72]	; 0x48
   49aa4:	add	sl, r0, r2
   49aa8:	cmp	sl, #4
   49aac:	bcs	49ae8 <__assert_fail@plt+0x37038>
   49ab0:	ldr	r9, [sp, #40]	; 0x28
   49ab4:	b	49b9c <__assert_fail@plt+0x370ec>
   49ab8:	ldr	r4, [sp, #84]	; 0x54
   49abc:	ldr	r9, [sp, #40]	; 0x28
   49ac0:	ldr	r3, [sp, #56]	; 0x38
   49ac4:	ldr	r5, [fp, #-80]	; 0xffffffb0
   49ac8:	b	49bcc <__assert_fail@plt+0x3711c>
   49acc:	ldr	r0, [sp, #16]
   49ad0:	ldr	r9, [sp, #40]	; 0x28
   49ad4:	b	49bc4 <__assert_fail@plt+0x37114>
   49ad8:	ldr	r0, [sp, #16]
   49adc:	ldr	r9, [sp, #40]	; 0x28
   49ae0:	str	sl, [sp, #44]	; 0x2c
   49ae4:	b	49bc4 <__assert_fail@plt+0x37114>
   49ae8:	bic	lr, sl, #3
   49aec:	subs	r7, lr, #4
   49af0:	add	r6, r3, r7, lsr #2
   49af4:	and	ip, r6, #1
   49af8:	beq	49b3c <__assert_fail@plt+0x3708c>
   49afc:	ldr	r3, [sp, #64]	; 0x40
   49b00:	sub	r2, ip, r6
   49b04:	mov	r6, #0
   49b08:	add	r3, r3, r1, lsl #2
   49b0c:	add	r7, r3, #4
   49b10:	mov	r4, r3
   49b14:	adds	r2, r2, #2
   49b18:	add	r6, r6, #8
   49b1c:	vld1.32	{d16-d17}, [r7]
   49b20:	vst1.32	{d16-d17}, [r4], r9
   49b24:	vld1.32	{d16-d17}, [r4]
   49b28:	add	r4, r3, #16
   49b2c:	add	r3, r3, #32
   49b30:	vst1.32	{d16-d17}, [r4]
   49b34:	bne	49b0c <__assert_fail@plt+0x3705c>
   49b38:	b	49b40 <__assert_fail@plt+0x37090>
   49b3c:	mov	r6, #0
   49b40:	cmp	ip, #0
   49b44:	beq	49b60 <__assert_fail@plt+0x370b0>
   49b48:	ldr	r7, [sp, #64]	; 0x40
   49b4c:	add	r3, r1, r6
   49b50:	add	r3, r7, r3, lsl #2
   49b54:	add	r7, r3, #4
   49b58:	vld1.32	{d16-d17}, [r7]
   49b5c:	vst1.32	{d16-d17}, [r3]
   49b60:	ldr	r4, [sp, #84]	; 0x54
   49b64:	ldr	r9, [sp, #40]	; 0x28
   49b68:	cmp	sl, lr
   49b6c:	bne	49b8c <__assert_fail@plt+0x370dc>
   49b70:	ldr	r0, [sp, #16]
   49b74:	ldr	ip, [sp, #80]	; 0x50
   49b78:	ldr	lr, [sp, #64]	; 0x40
   49b7c:	str	r0, [sp, #32]
   49b80:	ldr	r0, [sp, #72]	; 0x48
   49b84:	str	r0, [sp, #44]	; 0x2c
   49b88:	b	49bc8 <__assert_fail@plt+0x37118>
   49b8c:	add	r1, r1, lr
   49b90:	ldr	ip, [sp, #80]	; 0x50
   49b94:	ldr	lr, [sp, #64]	; 0x40
   49b98:	ldr	r0, [sp, #44]	; 0x2c
   49b9c:	ldr	r6, [sp, #72]	; 0x48
   49ba0:	sub	r2, r0, #1
   49ba4:	add	r3, lr, r1, lsl #2
   49ba8:	ldr	r3, [r3, #4]
   49bac:	str	r3, [lr, r1, lsl #2]
   49bb0:	add	r1, r1, #1
   49bb4:	cmp	r2, r1
   49bb8:	bne	49ba4 <__assert_fail@plt+0x370f4>
   49bbc:	ldr	r0, [sp, #16]
   49bc0:	str	r6, [sp, #44]	; 0x2c
   49bc4:	str	r0, [sp, #32]
   49bc8:	ldr	r3, [sp, #56]	; 0x38
   49bcc:	ldr	r0, [sp, #76]	; 0x4c
   49bd0:	add	r1, r5, r5, lsl #1
   49bd4:	ldr	r0, [r0, #116]	; 0x74
   49bd8:	add	r0, r0, r1, lsl #3
   49bdc:	b	49d5c <__assert_fail@plt+0x372ac>
   49be0:	ldr	r0, [sp, #24]
   49be4:	ldr	r2, [sp, #32]
   49be8:	cmp	r0, r6
   49bec:	beq	497ac <__assert_fail@plt+0x36cfc>
   49bf0:	b	497e4 <__assert_fail@plt+0x36d34>
   49bf4:	ldr	r0, [r7]
   49bf8:	cmp	r0, r3
   49bfc:	bne	49d58 <__assert_fail@plt+0x372a8>
   49c00:	ldr	r0, [r7, #8]
   49c04:	ldr	r1, [r7, #12]
   49c08:	str	r5, [fp, #-80]	; 0xffffffb0
   49c0c:	subs	r0, r1, r0
   49c10:	add	sl, r0, ip
   49c14:	beq	49d38 <__assert_fail@plt+0x37288>
   49c18:	ldr	r0, [r8, #12]
   49c1c:	add	r0, r0, r3, lsl #2
   49c20:	ldr	r1, [r4, #12]
   49c24:	cmp	sl, r1
   49c28:	bgt	49d54 <__assert_fail@plt+0x372a4>
   49c2c:	ldr	r1, [r4]
   49c30:	ldr	r1, [r1, sl, lsl #2]
   49c34:	cmp	r1, #0
   49c38:	beq	49d54 <__assert_fail@plt+0x372a4>
   49c3c:	ldr	r2, [r1, #8]
   49c40:	cmp	r2, #1
   49c44:	blt	49d54 <__assert_fail@plt+0x372a4>
   49c48:	str	lr, [sp, #64]	; 0x40
   49c4c:	mov	lr, r8
   49c50:	ldr	r8, [r0]
   49c54:	ldr	r0, [r1, #12]
   49c58:	subs	r2, r2, #1
   49c5c:	mov	r1, #0
   49c60:	mov	r4, #1
   49c64:	beq	49c88 <__assert_fail@plt+0x371d8>
   49c68:	add	r3, r1, r2
   49c6c:	lsr	r6, r3, #1
   49c70:	ldr	r5, [r0, r6, lsl #2]
   49c74:	cmp	r5, r8
   49c78:	addlt	r1, r4, r3, lsr #1
   49c7c:	movge	r2, r6
   49c80:	cmp	r1, r2
   49c84:	bcc	49c68 <__assert_fail@plt+0x371b8>
   49c88:	ldr	r0, [r0, r1, lsl #2]
   49c8c:	cmp	r0, r8
   49c90:	bne	494bc <__assert_fail@plt+0x36a0c>
   49c94:	ldr	r1, [sp, #76]	; 0x4c
   49c98:	str	r8, [sp, #52]	; 0x34
   49c9c:	ldr	r0, [r1, #108]	; 0x6c
   49ca0:	cmp	r0, #1
   49ca4:	blt	494d4 <__assert_fail@plt+0x36a24>
   49ca8:	ldr	r1, [r1, #116]	; 0x74
   49cac:	mov	r9, #0
   49cb0:	mov	r2, r0
   49cb4:	add	r3, r2, r9
   49cb8:	add	r3, r3, r3, lsr #31
   49cbc:	asr	r6, r3, #1
   49cc0:	add	r5, r6, r6, lsl #1
   49cc4:	add	r5, r1, r5, lsl #3
   49cc8:	ldr	r5, [r5, #4]
   49ccc:	cmp	r5, ip
   49cd0:	addlt	r9, r4, r3, asr #1
   49cd4:	movge	r2, r6
   49cd8:	cmp	r9, r2
   49cdc:	blt	49cb4 <__assert_fail@plt+0x37204>
   49ce0:	ldr	r3, [sp, #76]	; 0x4c
   49ce4:	cmp	r9, r0
   49ce8:	bge	494e4 <__assert_fail@plt+0x36a34>
   49cec:	ldr	r1, [r3, #116]	; 0x74
   49cf0:	add	r2, r9, r9, lsl #1
   49cf4:	add	r1, r1, r2, lsl #3
   49cf8:	ldr	r1, [r1, #4]
   49cfc:	cmp	r1, ip
   49d00:	mvnne	r9, #0
   49d04:	cmp	r0, #1
   49d08:	bge	494f0 <__assert_fail@plt+0x36a40>
   49d0c:	ldr	lr, [sp, #64]	; 0x40
   49d10:	mov	r8, #0
   49d14:	ldr	r3, [sp, #76]	; 0x4c
   49d18:	cmp	r8, r0
   49d1c:	blt	49538 <__assert_fail@plt+0x36a88>
   49d20:	mvn	r8, #0
   49d24:	ldr	r5, [sp, #84]	; 0x54
   49d28:	ldr	r4, [r5, #20]
   49d2c:	cmp	r4, #1
   49d30:	bge	49560 <__assert_fail@plt+0x36ab0>
   49d34:	b	496e0 <__assert_fail@plt+0x36c30>
   49d38:	ldr	r0, [r8, #20]
   49d3c:	add	r1, r3, r3, lsl #1
   49d40:	add	r0, r0, r1, lsl #2
   49d44:	ldr	r0, [r0, #8]
   49d48:	ldr	r1, [r4, #12]
   49d4c:	cmp	sl, r1
   49d50:	ble	49c2c <__assert_fail@plt+0x3717c>
   49d54:	ldr	r5, [fp, #-80]	; 0xffffffb0
   49d58:	mov	r0, r7
   49d5c:	add	r7, r0, #24
   49d60:	ldrb	r0, [r0, #20]
   49d64:	add	r5, r5, #1
   49d68:	cmp	r0, #0
   49d6c:	bne	49bf4 <__assert_fail@plt+0x37144>
   49d70:	b	4943c <__assert_fail@plt+0x3698c>
   49d74:	mov	r4, #0
   49d78:	cmp	r4, lr
   49d7c:	blt	493cc <__assert_fail@plt+0x3691c>
   49d80:	mov	r0, #0
   49d84:	str	r0, [fp, #-76]	; 0xffffffb4
   49d88:	mov	r9, #0
   49d8c:	mov	r0, r9
   49d90:	sub	sp, fp, #28
   49d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49d98:	mov	r9, r0
   49d9c:	str	r0, [fp, #-76]	; 0xffffffb4
   49da0:	mov	r0, r9
   49da4:	sub	sp, fp, #28
   49da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49dac:	str	r2, [fp, #-76]	; 0xffffffb4
   49db0:	b	49d88 <__assert_fail@plt+0x372d8>
   49db4:	mov	r9, #0
   49db8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   49dbc:	cmp	r0, #0
   49dc0:	beq	49dcc <__assert_fail@plt+0x3731c>
   49dc4:	mov	r0, lr
   49dc8:	bl	32910 <__assert_fail@plt+0x1fe60>
   49dcc:	cmp	r9, #0
   49dd0:	str	r9, [fp, #-76]	; 0xffffffb4
   49dd4:	moveq	r9, #0
   49dd8:	mov	r0, r9
   49ddc:	sub	sp, fp, #28
   49de0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49de4:	str	r0, [fp, #-72]	; 0xffffffb8
   49de8:	str	r9, [fp, #-76]	; 0xffffffb4
   49dec:	mov	r0, r9
   49df0:	sub	sp, fp, #28
   49df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49df8:	ldr	lr, [sp, #64]	; 0x40
   49dfc:	mov	r9, r0
   49e00:	ldr	r0, [fp, #-72]	; 0xffffffb8
   49e04:	cmp	r0, #0
   49e08:	bne	49dc4 <__assert_fail@plt+0x37314>
   49e0c:	b	49dcc <__assert_fail@plt+0x3731c>
   49e10:	mov	r9, r0
   49e14:	mov	r0, r9
   49e18:	sub	sp, fp, #28
   49e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49e20:	mov	lr, #0
   49e24:	mov	r9, #12
   49e28:	str	lr, [fp, #-56]	; 0xffffffc8
   49e2c:	str	lr, [fp, #-52]	; 0xffffffcc
   49e30:	ldr	r0, [fp, #-72]	; 0xffffffb8
   49e34:	cmp	r0, #0
   49e38:	bne	49dc4 <__assert_fail@plt+0x37314>
   49e3c:	b	49dcc <__assert_fail@plt+0x3731c>
   49e40:	mov	r9, #12
   49e44:	mov	lr, r4
   49e48:	ldr	r0, [fp, #-72]	; 0xffffffb8
   49e4c:	cmp	r0, #0
   49e50:	bne	49dc4 <__assert_fail@plt+0x37314>
   49e54:	b	49dcc <__assert_fail@plt+0x3731c>
   49e58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   49e5c:	add	fp, sp, #28
   49e60:	sub	sp, sp, #4
   49e64:	mov	r9, r0
   49e68:	ldr	r0, [r1, #4]
   49e6c:	mov	r8, #0
   49e70:	cmp	r0, #0
   49e74:	beq	4a030 <__assert_fail@plt+0x37580>
   49e78:	mov	r5, r2
   49e7c:	ldr	r2, [r2, #4]
   49e80:	cmp	r2, #0
   49e84:	beq	4a030 <__assert_fail@plt+0x37580>
   49e88:	mov	sl, r1
   49e8c:	ldr	r1, [r9, #4]
   49e90:	ldr	r7, [r9]
   49e94:	add	r3, r2, r0
   49e98:	add	r6, r1, r3
   49e9c:	cmp	r6, r7
   49ea0:	ble	49ed0 <__assert_fail@plt+0x37420>
   49ea4:	ldr	r0, [r9, #8]
   49ea8:	add	r4, r7, r3
   49eac:	lsl	r1, r4, #2
   49eb0:	bl	36110 <__assert_fail@plt+0x23660>
   49eb4:	cmp	r0, #0
   49eb8:	beq	4a03c <__assert_fail@plt+0x3758c>
   49ebc:	str	r4, [r9]
   49ec0:	str	r0, [r9, #8]
   49ec4:	ldr	r1, [r9, #4]
   49ec8:	ldr	r2, [r5, #4]
   49ecc:	ldr	r0, [sl, #4]
   49ed0:	ldr	lr, [r5, #8]
   49ed4:	ldr	r4, [sl, #8]
   49ed8:	add	r3, r0, r1
   49edc:	sub	r7, r1, #1
   49ee0:	add	ip, r3, r2
   49ee4:	sub	r0, r0, #1
   49ee8:	sub	r3, r2, #1
   49eec:	ldr	r1, [lr, r3, lsl #2]
   49ef0:	ldr	r6, [r4, r0, lsl #2]
   49ef4:	cmp	r6, r1
   49ef8:	beq	49f24 <__assert_fail@plt+0x37474>
   49efc:	blt	49f14 <__assert_fail@plt+0x37464>
   49f00:	sub	r6, r0, #1
   49f04:	cmp	r0, #0
   49f08:	mov	r0, r6
   49f0c:	bgt	49ef0 <__assert_fail@plt+0x37440>
   49f10:	b	49f94 <__assert_fail@plt+0x374e4>
   49f14:	cmp	r2, #2
   49f18:	mov	r2, r3
   49f1c:	bge	49ee8 <__assert_fail@plt+0x37438>
   49f20:	b	49f94 <__assert_fail@plt+0x374e4>
   49f24:	cmp	r7, #0
   49f28:	bmi	49f70 <__assert_fail@plt+0x374c0>
   49f2c:	ldr	r8, [r9, #8]
   49f30:	mov	r1, r7
   49f34:	ldr	r7, [r8, r1, lsl #2]
   49f38:	cmp	r7, r6
   49f3c:	ble	49f54 <__assert_fail@plt+0x374a4>
   49f40:	sub	r7, r1, #1
   49f44:	cmp	r1, #0
   49f48:	mov	r1, r7
   49f4c:	bgt	49f34 <__assert_fail@plt+0x37484>
   49f50:	b	49f70 <__assert_fail@plt+0x374c0>
   49f54:	mov	r7, r1
   49f58:	bne	49f70 <__assert_fail@plt+0x374c0>
   49f5c:	mov	r7, r1
   49f60:	cmp	r0, #1
   49f64:	mov	r8, #0
   49f68:	bge	49f88 <__assert_fail@plt+0x374d8>
   49f6c:	b	49f94 <__assert_fail@plt+0x374e4>
   49f70:	ldr	r1, [r9, #8]
   49f74:	sub	ip, ip, #1
   49f78:	str	r6, [r1, ip, lsl #2]
   49f7c:	cmp	r0, #1
   49f80:	mov	r8, #0
   49f84:	blt	49f94 <__assert_fail@plt+0x374e4>
   49f88:	cmp	r2, #2
   49f8c:	mov	r2, r3
   49f90:	bge	49ee4 <__assert_fail@plt+0x37434>
   49f94:	ldr	r2, [r9, #4]
   49f98:	ldr	lr, [sl, #4]
   49f9c:	ldr	r4, [r5, #4]
   49fa0:	ldr	r0, [r9, #8]
   49fa4:	subs	r1, r2, #1
   49fa8:	add	r3, r1, lr
   49fac:	add	r3, r3, r4
   49fb0:	sub	r7, r3, ip
   49fb4:	add	r6, r7, #1
   49fb8:	add	r5, r6, r2
   49fbc:	str	r5, [r9, #4]
   49fc0:	blt	4a020 <__assert_fail@plt+0x37570>
   49fc4:	cmp	r7, #0
   49fc8:	bmi	4a020 <__assert_fail@plt+0x37570>
   49fcc:	add	r2, r2, r4
   49fd0:	add	r2, r2, lr
   49fd4:	sub	r2, r2, ip
   49fd8:	add	r7, r0, r2, lsl #2
   49fdc:	ldr	r2, [r0, r1, lsl #2]
   49fe0:	ldr	r5, [r0, r3, lsl #2]
   49fe4:	cmp	r5, r2
   49fe8:	bgt	4a004 <__assert_fail@plt+0x37554>
   49fec:	str	r2, [r7, r1, lsl #2]
   49ff0:	sub	r2, r1, #1
   49ff4:	cmp	r1, #0
   49ff8:	mov	r1, r2
   49ffc:	bgt	49fdc <__assert_fail@plt+0x3752c>
   4a000:	b	4a020 <__assert_fail@plt+0x37570>
   4a004:	str	r5, [r7, r1, lsl #2]
   4a008:	sub	r7, r7, #4
   4a00c:	subs	r6, r6, #1
   4a010:	sub	r3, r3, #1
   4a014:	mov	r2, #0
   4a018:	bne	49fdc <__assert_fail@plt+0x3752c>
   4a01c:	b	4a024 <__assert_fail@plt+0x37574>
   4a020:	mov	r2, r6
   4a024:	add	r1, r0, ip, lsl #2
   4a028:	lsl	r2, r2, #2
   4a02c:	bl	124e0 <memcpy@plt>
   4a030:	mov	r0, r8
   4a034:	sub	sp, fp, #28
   4a038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a03c:	mov	r8, #12
   4a040:	mov	r0, r8
   4a044:	sub	sp, fp, #28
   4a048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a04c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4a050:	add	fp, sp, #28
   4a054:	sub	sp, sp, #44	; 0x2c
   4a058:	mov	ip, r0
   4a05c:	ldr	r0, [r0, #28]
   4a060:	str	r3, [sp, #4]
   4a064:	add	r3, r1, r1, lsl #1
   4a068:	mov	r4, #0
   4a06c:	str	r4, [sp, #36]	; 0x24
   4a070:	str	r4, [sp, #32]
   4a074:	str	r4, [sp, #40]	; 0x28
   4a078:	add	r3, r0, r3, lsl #2
   4a07c:	mov	r0, r3
   4a080:	ldr	lr, [r0, #4]!
   4a084:	str	r0, [sp, #24]
   4a088:	cmp	lr, #1
   4a08c:	blt	4a3cc <__assert_fail@plt+0x3791c>
   4a090:	add	r4, r3, #8
   4a094:	mov	r9, #0
   4a098:	mov	sl, #1
   4a09c:	str	r2, [sp, #28]
   4a0a0:	str	r3, [sp]
   4a0a4:	str	r1, [sp, #12]
   4a0a8:	str	ip, [sp, #8]
   4a0ac:	str	r4, [sp, #20]
   4a0b0:	ldr	r3, [r4]
   4a0b4:	ldr	r0, [r3, r9, lsl #2]
   4a0b8:	cmp	r0, r1
   4a0bc:	bne	4a0dc <__assert_fail@plt+0x3762c>
   4a0c0:	add	r9, r9, #1
   4a0c4:	cmp	r9, lr
   4a0c8:	bge	4a28c <__assert_fail@plt+0x377dc>
   4a0cc:	ldr	r3, [r4]
   4a0d0:	ldr	r0, [r3, r9, lsl #2]
   4a0d4:	cmp	r0, r1
   4a0d8:	beq	4a0c0 <__assert_fail@plt+0x37610>
   4a0dc:	ldr	r2, [ip]
   4a0e0:	add	r2, r2, r0, lsl #3
   4a0e4:	ldrb	r2, [r2, #4]
   4a0e8:	tst	r2, #8
   4a0ec:	beq	4a0c0 <__assert_fail@plt+0x37610>
   4a0f0:	ldr	r2, [ip, #20]
   4a0f4:	add	r0, r0, r0, lsl #1
   4a0f8:	mvn	r8, #0
   4a0fc:	str	r0, [sp, #16]
   4a100:	add	r0, r2, r0, lsl #2
   4a104:	ldr	r7, [r0, #4]
   4a108:	ldr	r0, [r0, #8]
   4a10c:	cmp	r7, #2
   4a110:	ldr	r5, [r0]
   4a114:	ldrge	r8, [r0, #4]
   4a118:	cmp	lr, #1
   4a11c:	blt	4a15c <__assert_fail@plt+0x376ac>
   4a120:	mov	r2, #0
   4a124:	subs	r7, lr, #1
   4a128:	beq	4a14c <__assert_fail@plt+0x3769c>
   4a12c:	add	r6, r2, r7
   4a130:	lsr	r4, r6, #1
   4a134:	ldr	r0, [r3, r4, lsl #2]
   4a138:	cmp	r0, r5
   4a13c:	addlt	r2, sl, r6, lsr #1
   4a140:	movge	r7, r4
   4a144:	cmp	r2, r7
   4a148:	bcc	4a12c <__assert_fail@plt+0x3767c>
   4a14c:	ldr	r0, [r3, r2, lsl #2]
   4a150:	ldr	r4, [sp, #20]
   4a154:	cmp	r0, r5
   4a158:	beq	4a1b8 <__assert_fail@plt+0x37708>
   4a15c:	ldr	r0, [sp, #28]
   4a160:	ldr	r0, [r0, #4]
   4a164:	cmp	r0, #1
   4a168:	blt	4a1b8 <__assert_fail@plt+0x37708>
   4a16c:	subs	r7, r0, #1
   4a170:	ldr	r0, [sp, #28]
   4a174:	mov	r6, #0
   4a178:	ldr	r1, [r0, #8]
   4a17c:	beq	4a1a0 <__assert_fail@plt+0x376f0>
   4a180:	add	r0, r6, r7
   4a184:	lsr	r4, r0, #1
   4a188:	ldr	ip, [r1, r4, lsl #2]
   4a18c:	cmp	ip, r5
   4a190:	addlt	r6, sl, r0, lsr #1
   4a194:	movge	r7, r4
   4a198:	cmp	r6, r7
   4a19c:	bcc	4a180 <__assert_fail@plt+0x376d0>
   4a1a0:	ldr	r0, [r1, r6, lsl #2]
   4a1a4:	ldr	r1, [sp, #12]
   4a1a8:	ldr	ip, [sp, #8]
   4a1ac:	ldr	r4, [sp, #20]
   4a1b0:	cmp	r0, r5
   4a1b4:	beq	4a250 <__assert_fail@plt+0x377a0>
   4a1b8:	cmp	r8, #1
   4a1bc:	blt	4a0c0 <__assert_fail@plt+0x37610>
   4a1c0:	cmp	lr, #1
   4a1c4:	blt	4a200 <__assert_fail@plt+0x37750>
   4a1c8:	mov	r2, #0
   4a1cc:	subs	r7, lr, #1
   4a1d0:	beq	4a1f4 <__assert_fail@plt+0x37744>
   4a1d4:	add	r0, r2, r7
   4a1d8:	lsr	r6, r0, #1
   4a1dc:	ldr	r5, [r3, r6, lsl #2]
   4a1e0:	cmp	r5, r8
   4a1e4:	addlt	r2, sl, r0, lsr #1
   4a1e8:	movge	r7, r6
   4a1ec:	cmp	r2, r7
   4a1f0:	bcc	4a1d4 <__assert_fail@plt+0x37724>
   4a1f4:	ldr	r0, [r3, r2, lsl #2]
   4a1f8:	cmp	r0, r8
   4a1fc:	beq	4a0c0 <__assert_fail@plt+0x37610>
   4a200:	ldr	r2, [sp, #28]
   4a204:	ldr	r0, [r2, #4]
   4a208:	cmp	r0, #1
   4a20c:	blt	4a0c0 <__assert_fail@plt+0x37610>
   4a210:	ldr	r4, [r2, #8]
   4a214:	subs	r7, r0, #1
   4a218:	mov	r3, #0
   4a21c:	beq	4a240 <__assert_fail@plt+0x37790>
   4a220:	add	r0, r3, r7
   4a224:	lsr	r6, r0, #1
   4a228:	ldr	r5, [r4, r6, lsl #2]
   4a22c:	cmp	r5, r8
   4a230:	addlt	r3, sl, r0, lsr #1
   4a234:	movge	r7, r6
   4a238:	cmp	r3, r7
   4a23c:	bcc	4a220 <__assert_fail@plt+0x37770>
   4a240:	ldr	r0, [r4, r3, lsl #2]
   4a244:	ldr	r4, [sp, #20]
   4a248:	cmp	r0, r8
   4a24c:	bne	4a0c0 <__assert_fail@plt+0x37610>
   4a250:	ldr	r0, [ip, #28]
   4a254:	ldr	r1, [sp, #16]
   4a258:	add	r2, r0, r1, lsl #2
   4a25c:	ldr	r1, [sp, #4]
   4a260:	add	r0, sp, #32
   4a264:	bl	49e58 <__assert_fail@plt+0x373a8>
   4a268:	cmp	r0, #0
   4a26c:	bne	4a4bc <__assert_fail@plt+0x37a0c>
   4a270:	ldr	r0, [sp, #24]
   4a274:	ldr	r1, [sp, #12]
   4a278:	ldr	ip, [sp, #8]
   4a27c:	ldr	lr, [r0]
   4a280:	add	r9, r9, #1
   4a284:	cmp	r9, lr
   4a288:	blt	4a0cc <__assert_fail@plt+0x3761c>
   4a28c:	ldr	r2, [sp, #28]
   4a290:	ldr	r0, [sp]
   4a294:	cmp	lr, #0
   4a298:	mov	r4, #0
   4a29c:	ble	4a3cc <__assert_fail@plt+0x3791c>
   4a2a0:	ldr	r1, [sp, #36]	; 0x24
   4a2a4:	ldr	r9, [r0, #8]
   4a2a8:	ldr	r0, [sp, #40]	; 0x28
   4a2ac:	subs	lr, r1, #1
   4a2b0:	str	r9, [sp, #20]
   4a2b4:	blt	4a3e0 <__assert_fail@plt+0x37930>
   4a2b8:	mov	ip, #0
   4a2bc:	mov	r7, #1
   4a2c0:	ldr	r6, [r9, ip, lsl #2]
   4a2c4:	cmp	lr, #0
   4a2c8:	mov	r1, #0
   4a2cc:	bne	4a2f8 <__assert_fail@plt+0x37848>
   4a2d0:	b	4a320 <__assert_fail@plt+0x37870>
   4a2d4:	ldr	r1, [sp, #24]
   4a2d8:	add	ip, ip, #1
   4a2dc:	ldr	r1, [r1]
   4a2e0:	cmp	ip, r1
   4a2e4:	bge	4a4a8 <__assert_fail@plt+0x379f8>
   4a2e8:	ldr	r6, [r9, ip, lsl #2]
   4a2ec:	cmp	lr, #0
   4a2f0:	mov	r1, #0
   4a2f4:	beq	4a320 <__assert_fail@plt+0x37870>
   4a2f8:	mov	r1, #0
   4a2fc:	mov	r2, lr
   4a300:	add	r5, r1, r2
   4a304:	lsr	r4, r5, #1
   4a308:	ldr	r3, [r0, r4, lsl #2]
   4a30c:	cmp	r3, r6
   4a310:	addlt	r1, r7, r5, lsr #1
   4a314:	movge	r2, r4
   4a318:	cmp	r1, r2
   4a31c:	bcc	4a300 <__assert_fail@plt+0x37850>
   4a320:	ldr	r1, [r0, r1, lsl #2]
   4a324:	cmp	r1, r6
   4a328:	ldr	r1, [sp, #28]
   4a32c:	beq	4a2d4 <__assert_fail@plt+0x37824>
   4a330:	ldr	sl, [r1, #4]
   4a334:	cmp	sl, #1
   4a338:	blt	4a2d4 <__assert_fail@plt+0x37824>
   4a33c:	ldr	r5, [r1, #8]
   4a340:	subs	r4, sl, #1
   4a344:	beq	4a374 <__assert_fail@plt+0x378c4>
   4a348:	mov	r1, #0
   4a34c:	mov	r8, r4
   4a350:	add	r3, r1, r4
   4a354:	lsr	r2, r3, #1
   4a358:	ldr	r9, [r5, r2, lsl #2]
   4a35c:	cmp	r9, r6
   4a360:	addlt	r1, r7, r3, lsr #1
   4a364:	movge	r4, r2
   4a368:	cmp	r1, r4
   4a36c:	bcc	4a350 <__assert_fail@plt+0x378a0>
   4a370:	b	4a37c <__assert_fail@plt+0x378cc>
   4a374:	mov	r8, r4
   4a378:	mov	r1, #0
   4a37c:	ldr	r2, [r5, r1, lsl #2]
   4a380:	ldr	r3, [sp, #28]
   4a384:	ldr	r9, [sp, #20]
   4a388:	mov	r4, r1
   4a38c:	cmp	r2, r6
   4a390:	mvnne	r4, #0
   4a394:	cmp	r4, #0
   4a398:	bmi	4a2d4 <__assert_fail@plt+0x37824>
   4a39c:	cmp	sl, r4
   4a3a0:	strgt	r8, [r3, #4]
   4a3a4:	cmpgt	r8, r4
   4a3a8:	ble	4a2d4 <__assert_fail@plt+0x37824>
   4a3ac:	add	r2, r5, r1, lsl #2
   4a3b0:	ldr	r2, [r2, #4]
   4a3b4:	str	r2, [r5, r1, lsl #2]
   4a3b8:	add	r1, r1, #1
   4a3bc:	ldr	r2, [r3, #4]
   4a3c0:	cmp	r1, r2
   4a3c4:	blt	4a3ac <__assert_fail@plt+0x378fc>
   4a3c8:	b	4a2d4 <__assert_fail@plt+0x37824>
   4a3cc:	ldr	r0, [sp, #40]	; 0x28
   4a3d0:	bl	32910 <__assert_fail@plt+0x1fe60>
   4a3d4:	mov	r0, r4
   4a3d8:	sub	sp, fp, #28
   4a3dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a3e0:	ldr	r7, [r2, #4]
   4a3e4:	mov	sl, #0
   4a3e8:	mov	r9, #1
   4a3ec:	cmp	r7, #1
   4a3f0:	bge	4a418 <__assert_fail@plt+0x37968>
   4a3f4:	b	4a3fc <__assert_fail@plt+0x3794c>
   4a3f8:	ldr	r2, [sp, #28]
   4a3fc:	ldr	r1, [sp, #24]
   4a400:	add	sl, sl, #1
   4a404:	ldr	r1, [r1]
   4a408:	cmp	sl, r1
   4a40c:	bge	4a4a8 <__assert_fail@plt+0x379f8>
   4a410:	cmp	r7, #1
   4a414:	blt	4a3fc <__assert_fail@plt+0x3794c>
   4a418:	ldr	r1, [sp, #20]
   4a41c:	ldr	r6, [r2, #8]
   4a420:	subs	lr, r7, #1
   4a424:	mov	r5, #0
   4a428:	ldr	r1, [r1, sl, lsl #2]
   4a42c:	beq	4a454 <__assert_fail@plt+0x379a4>
   4a430:	mov	r4, lr
   4a434:	add	r3, r5, r4
   4a438:	lsr	r2, r3, #1
   4a43c:	ldr	ip, [r6, r2, lsl #2]
   4a440:	cmp	ip, r1
   4a444:	addlt	r5, r9, r3, lsr #1
   4a448:	movge	r4, r2
   4a44c:	cmp	r5, r4
   4a450:	bcc	4a434 <__assert_fail@plt+0x37984>
   4a454:	ldr	r2, [r6, r5, lsl #2]
   4a458:	cmp	r2, r1
   4a45c:	mov	r1, r5
   4a460:	mvnne	r1, #0
   4a464:	cmp	r1, #0
   4a468:	bmi	4a3f8 <__assert_fail@plt+0x37948>
   4a46c:	ldr	r2, [sp, #28]
   4a470:	cmp	r7, r1
   4a474:	ble	4a3fc <__assert_fail@plt+0x3794c>
   4a478:	cmp	lr, r1
   4a47c:	mov	r7, lr
   4a480:	str	lr, [r2, #4]
   4a484:	ble	4a3fc <__assert_fail@plt+0x3794c>
   4a488:	add	r1, r6, r5, lsl #2
   4a48c:	ldr	r1, [r1, #4]
   4a490:	str	r1, [r6, r5, lsl #2]
   4a494:	add	r5, r5, #1
   4a498:	ldr	r7, [r2, #4]
   4a49c:	cmp	r5, r7
   4a4a0:	blt	4a488 <__assert_fail@plt+0x379d8>
   4a4a4:	b	4a3fc <__assert_fail@plt+0x3794c>
   4a4a8:	mov	r4, #0
   4a4ac:	bl	32910 <__assert_fail@plt+0x1fe60>
   4a4b0:	mov	r0, r4
   4a4b4:	sub	sp, fp, #28
   4a4b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a4bc:	mov	r1, r0
   4a4c0:	ldr	r0, [sp, #40]	; 0x28
   4a4c4:	mov	r4, r1
   4a4c8:	bl	32910 <__assert_fail@plt+0x1fe60>
   4a4cc:	mov	r0, r4
   4a4d0:	sub	sp, fp, #28
   4a4d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a4d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4a4dc:	add	fp, sp, #28
   4a4e0:	sub	sp, sp, #44	; 0x2c
   4a4e4:	ldr	r4, [r0, #84]	; 0x54
   4a4e8:	mov	r7, r0
   4a4ec:	str	r1, [fp, #-32]	; 0xffffffe0
   4a4f0:	add	r1, r3, r3, lsl #1
   4a4f4:	mov	r6, r2
   4a4f8:	str	r3, [sp, #36]	; 0x24
   4a4fc:	ldr	r0, [r4, #24]
   4a500:	add	r0, r0, r1, lsl #2
   4a504:	mov	r2, r0
   4a508:	ldr	r1, [r2, #4]!
   4a50c:	str	r2, [sp, #28]
   4a510:	cmp	r1, #1
   4a514:	blt	4a7e0 <__assert_fail@plt+0x37d30>
   4a518:	mov	r1, #1
   4a51c:	cmp	r6, #31
   4a520:	add	r0, r0, #8
   4a524:	mov	sl, #0
   4a528:	mvn	r2, r1, lsl r6
   4a52c:	lsl	r1, r1, r6
   4a530:	str	r0, [sp, #32]
   4a534:	str	r2, [sp, #16]
   4a538:	ldr	r2, [fp, #-32]	; 0xffffffe0
   4a53c:	str	r1, [sp, #24]
   4a540:	mov	r1, #0
   4a544:	movwgt	r1, #1
   4a548:	and	r3, r2, #2
   4a54c:	and	r0, r2, #1
   4a550:	orr	r1, r1, r3, lsr #1
   4a554:	str	r3, [sp, #20]
   4a558:	str	r0, [sp, #8]
   4a55c:	str	r1, [sp, #12]
   4a560:	b	4a578 <__assert_fail@plt+0x37ac8>
   4a564:	ldr	r0, [sp, #28]
   4a568:	add	sl, sl, #1
   4a56c:	ldr	r0, [r0]
   4a570:	cmp	sl, r0
   4a574:	bge	4a7e0 <__assert_fail@plt+0x37d30>
   4a578:	ldr	r0, [sp, #32]
   4a57c:	ldr	r0, [r0]
   4a580:	ldr	r8, [r0, sl, lsl #2]
   4a584:	ldr	r0, [r4]
   4a588:	add	r1, r0, r8, lsl #3
   4a58c:	ldrb	r1, [r1, #4]
   4a590:	cmp	r1, #9
   4a594:	beq	4a5e0 <__assert_fail@plt+0x37b30>
   4a598:	cmp	r1, #8
   4a59c:	beq	4a5fc <__assert_fail@plt+0x37b4c>
   4a5a0:	cmp	r1, #4
   4a5a4:	bne	4a564 <__assert_fail@plt+0x37ab4>
   4a5a8:	ldr	r0, [fp, #8]
   4a5ac:	cmn	r0, #1
   4a5b0:	beq	4a564 <__assert_fail@plt+0x37ab4>
   4a5b4:	ldr	r1, [fp, #8]
   4a5b8:	ldr	r0, [r7, #116]	; 0x74
   4a5bc:	cmp	r6, #31
   4a5c0:	add	r1, r1, r1, lsl #1
   4a5c4:	bgt	4a6b8 <__assert_fail@plt+0x37c08>
   4a5c8:	add	r0, r0, r1, lsl #3
   4a5cc:	add	r9, r0, #16
   4a5d0:	ldr	r0, [r9, #-16]
   4a5d4:	cmp	r0, r8
   4a5d8:	bne	4a630 <__assert_fail@plt+0x37b80>
   4a5dc:	b	4a64c <__assert_fail@plt+0x37b9c>
   4a5e0:	ldr	r1, [sp, #20]
   4a5e4:	cmp	r1, #0
   4a5e8:	beq	4a564 <__assert_fail@plt+0x37ab4>
   4a5ec:	ldr	r0, [r0, r8, lsl #3]
   4a5f0:	cmp	r0, r6
   4a5f4:	bne	4a564 <__assert_fail@plt+0x37ab4>
   4a5f8:	b	4a800 <__assert_fail@plt+0x37d50>
   4a5fc:	ldr	r1, [sp, #8]
   4a600:	cmp	r1, #0
   4a604:	beq	4a564 <__assert_fail@plt+0x37ab4>
   4a608:	ldr	r0, [r0, r8, lsl #3]
   4a60c:	cmp	r0, r6
   4a610:	bne	4a564 <__assert_fail@plt+0x37ab4>
   4a614:	b	4a80c <__assert_fail@plt+0x37d5c>
   4a618:	cmn	r0, #1
   4a61c:	beq	4a7d8 <__assert_fail@plt+0x37d28>
   4a620:	ldr	r0, [r9]
   4a624:	ldr	r1, [sp, #16]
   4a628:	and	r0, r0, r1
   4a62c:	str	r0, [r9]
   4a630:	ldrb	r0, [r9, #4]
   4a634:	add	r9, r9, #24
   4a638:	cmp	r0, #0
   4a63c:	beq	4a564 <__assert_fail@plt+0x37ab4>
   4a640:	ldr	r0, [r9, #-16]
   4a644:	cmp	r0, r8
   4a648:	bne	4a630 <__assert_fail@plt+0x37b80>
   4a64c:	ldr	r0, [r9]
   4a650:	ldr	r1, [sp, #24]
   4a654:	tst	r0, r1
   4a658:	beq	4a630 <__assert_fail@plt+0x37b80>
   4a65c:	ldr	r0, [r4, #20]
   4a660:	add	r1, r8, r8, lsl #1
   4a664:	add	r0, r0, r1, lsl #2
   4a668:	ldr	r0, [r0, #8]
   4a66c:	ldr	r3, [r0]
   4a670:	ldr	r0, [sp, #36]	; 0x24
   4a674:	cmp	r3, r0
   4a678:	beq	4a7f0 <__assert_fail@plt+0x37d40>
   4a67c:	ldr	r0, [fp, #8]
   4a680:	ldr	r1, [fp, #-32]	; 0xffffffe0
   4a684:	mov	r2, r6
   4a688:	str	r0, [sp]
   4a68c:	mov	r0, r7
   4a690:	bl	4a4d8 <__assert_fail@plt+0x37a28>
   4a694:	cmp	r0, #0
   4a698:	bne	4a618 <__assert_fail@plt+0x37b68>
   4a69c:	ldr	r0, [sp, #12]
   4a6a0:	cmp	r0, #0
   4a6a4:	beq	4a620 <__assert_fail@plt+0x37b70>
   4a6a8:	ldr	r0, [sp, #20]
   4a6ac:	cmp	r0, #0
   4a6b0:	beq	4a630 <__assert_fail@plt+0x37b80>
   4a6b4:	b	4a800 <__assert_fail@plt+0x37d50>
   4a6b8:	ldr	r2, [sp, #12]
   4a6bc:	cmp	r2, #0
   4a6c0:	beq	4a74c <__assert_fail@plt+0x37c9c>
   4a6c4:	add	r5, r0, r1, lsl #3
   4a6c8:	ldr	r0, [r5]
   4a6cc:	cmp	r0, r8
   4a6d0:	bne	4a6e4 <__assert_fail@plt+0x37c34>
   4a6d4:	b	4a700 <__assert_fail@plt+0x37c50>
   4a6d8:	ldr	r0, [sp, #20]
   4a6dc:	cmp	r0, #0
   4a6e0:	bne	4a800 <__assert_fail@plt+0x37d50>
   4a6e4:	ldrb	r0, [r5, #20]
   4a6e8:	add	r5, r5, #24
   4a6ec:	cmp	r0, #0
   4a6f0:	beq	4a564 <__assert_fail@plt+0x37ab4>
   4a6f4:	ldr	r0, [r5]
   4a6f8:	cmp	r0, r8
   4a6fc:	bne	4a6e4 <__assert_fail@plt+0x37c34>
   4a700:	ldr	r0, [r4, #20]
   4a704:	add	r1, r8, r8, lsl #1
   4a708:	add	r0, r0, r1, lsl #2
   4a70c:	ldr	r0, [r0, #8]
   4a710:	ldr	r3, [r0]
   4a714:	ldr	r0, [sp, #36]	; 0x24
   4a718:	cmp	r3, r0
   4a71c:	beq	4a7f0 <__assert_fail@plt+0x37d40>
   4a720:	ldr	r0, [fp, #8]
   4a724:	ldr	r1, [fp, #-32]	; 0xffffffe0
   4a728:	mov	r2, r6
   4a72c:	str	r0, [sp]
   4a730:	mov	r0, r7
   4a734:	bl	4a4d8 <__assert_fail@plt+0x37a28>
   4a738:	cmp	r0, #0
   4a73c:	beq	4a6d8 <__assert_fail@plt+0x37c28>
   4a740:	cmn	r0, #1
   4a744:	bne	4a6e4 <__assert_fail@plt+0x37c34>
   4a748:	b	4a7d8 <__assert_fail@plt+0x37d28>
   4a74c:	add	r0, r0, r1, lsl #3
   4a750:	add	r5, r0, #16
   4a754:	ldr	r0, [r5, #-16]
   4a758:	cmp	r0, r8
   4a75c:	bne	4a774 <__assert_fail@plt+0x37cc4>
   4a760:	b	4a790 <__assert_fail@plt+0x37ce0>
   4a764:	ldr	r0, [r5]
   4a768:	ldr	r1, [sp, #16]
   4a76c:	and	r0, r0, r1
   4a770:	str	r0, [r5]
   4a774:	ldrb	r0, [r5, #4]
   4a778:	add	r5, r5, #24
   4a77c:	cmp	r0, #0
   4a780:	beq	4a564 <__assert_fail@plt+0x37ab4>
   4a784:	ldr	r0, [r5, #-16]
   4a788:	cmp	r0, r8
   4a78c:	bne	4a774 <__assert_fail@plt+0x37cc4>
   4a790:	ldr	r0, [r4, #20]
   4a794:	add	r1, r8, r8, lsl #1
   4a798:	add	r0, r0, r1, lsl #2
   4a79c:	ldr	r0, [r0, #8]
   4a7a0:	ldr	r3, [r0]
   4a7a4:	ldr	r0, [sp, #36]	; 0x24
   4a7a8:	cmp	r3, r0
   4a7ac:	beq	4a7f0 <__assert_fail@plt+0x37d40>
   4a7b0:	ldr	r0, [fp, #8]
   4a7b4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   4a7b8:	mov	r2, r6
   4a7bc:	str	r0, [sp]
   4a7c0:	mov	r0, r7
   4a7c4:	bl	4a4d8 <__assert_fail@plt+0x37a28>
   4a7c8:	cmp	r0, #0
   4a7cc:	beq	4a764 <__assert_fail@plt+0x37cb4>
   4a7d0:	cmn	r0, #1
   4a7d4:	bne	4a774 <__assert_fail@plt+0x37cc4>
   4a7d8:	sub	sp, fp, #28
   4a7dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a7e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   4a7e4:	ubfx	r0, r0, #1, #1
   4a7e8:	sub	sp, fp, #28
   4a7ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a7f0:	ldr	r0, [sp, #8]
   4a7f4:	rsb	r0, r0, #0
   4a7f8:	sub	sp, fp, #28
   4a7fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a800:	mov	r0, #0
   4a804:	sub	sp, fp, #28
   4a808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a80c:	mvn	r0, #0
   4a810:	sub	sp, fp, #28
   4a814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a818:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4a81c:	add	fp, sp, #28
   4a820:	sub	sp, sp, #36	; 0x24
   4a824:	sub	sp, sp, #1024	; 0x400
   4a828:	mov	r8, r1
   4a82c:	ldrb	r1, [r0]
   4a830:	mov	r4, r0
   4a834:	cmp	r1, #0
   4a838:	beq	4a8f8 <__assert_fail@plt+0x37e48>
   4a83c:	add	r0, sp, #32
   4a840:	mov	r2, #0
   4a844:	add	sl, r0, #16
   4a848:	mov	r0, #1
   4a84c:	ldrb	r3, [r8, r2]
   4a850:	cmp	r3, #0
   4a854:	uxtbne	r1, r1
   4a858:	subne	r1, r1, r3
   4a85c:	clzne	r1, r1
   4a860:	lsrne	r1, r1, #5
   4a864:	andne	r0, r0, r1
   4a868:	addne	r1, r4, r2
   4a86c:	addne	r2, r2, #1
   4a870:	ldrbne	r1, [r1, #1]
   4a874:	cmpne	r1, #0
   4a878:	bne	4a84c <__assert_fail@plt+0x37d9c>
   4a87c:	add	r6, r8, r2
   4a880:	mov	r7, r4
   4a884:	ldrb	r1, [r6]
   4a888:	cmp	r1, #0
   4a88c:	movwne	r7, #0
   4a890:	tst	r0, #1
   4a894:	cmpeq	r1, #0
   4a898:	bne	4a908 <__assert_fail@plt+0x37e58>
   4a89c:	ldrb	r1, [r8]
   4a8a0:	add	r0, r4, #1
   4a8a4:	sub	r5, r6, r8
   4a8a8:	bl	127c8 <strchr@plt>
   4a8ac:	mov	r7, r0
   4a8b0:	cmp	r5, #1
   4a8b4:	cmpne	r7, #0
   4a8b8:	beq	4a908 <__assert_fail@plt+0x37e58>
   4a8bc:	add	r0, r4, r5
   4a8c0:	sub	r9, r6, r5
   4a8c4:	str	r6, [sp, #20]
   4a8c8:	str	r5, [sp, #28]
   4a8cc:	str	r7, [sp, #24]
   4a8d0:	subs	r0, r0, r7
   4a8d4:	movwcc	r0, #1
   4a8d8:	cmp	r5, #31
   4a8dc:	bhi	4a914 <__assert_fail@plt+0x37e64>
   4a8e0:	mov	sl, r0
   4a8e4:	cmp	r5, #3
   4a8e8:	bcs	4aa4c <__assert_fail@plt+0x37f9c>
   4a8ec:	sub	r6, r5, #1
   4a8f0:	mov	r5, #1
   4a8f4:	b	4b0f8 <__assert_fail@plt+0x38648>
   4a8f8:	ldrb	r0, [r8]
   4a8fc:	cmp	r0, #0
   4a900:	movne	r4, #0
   4a904:	mov	r7, r4
   4a908:	mov	r0, r7
   4a90c:	sub	sp, fp, #28
   4a910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4a914:	str	r0, [sp, #8]
   4a918:	rsb	r0, r5, #0
   4a91c:	mvn	r1, #0
   4a920:	mov	r2, #1
   4a924:	mov	ip, #1
   4a928:	mov	r3, #1
   4a92c:	str	r0, [sp, #4]
   4a930:	mov	r0, #0
   4a934:	b	4a950 <__assert_fail@plt+0x37ea0>
   4a938:	sub	ip, r2, r1
   4a93c:	mov	r3, #1
   4a940:	mov	r0, r2
   4a944:	add	r2, r3, r0
   4a948:	cmp	r2, r5
   4a94c:	bcs	4a9a8 <__assert_fail@plt+0x37ef8>
   4a950:	add	r4, r1, r3
   4a954:	ldrb	r7, [r9, r2]
   4a958:	ldrb	r4, [r9, r4]
   4a95c:	cmp	r7, r4
   4a960:	bcc	4a938 <__assert_fail@plt+0x37e88>
   4a964:	bne	4a988 <__assert_fail@plt+0x37ed8>
   4a968:	cmp	r3, ip
   4a96c:	addne	r3, r3, #1
   4a970:	addeq	r0, r0, ip
   4a974:	moveq	r3, #1
   4a978:	add	r2, r3, r0
   4a97c:	cmp	r2, r5
   4a980:	bcc	4a950 <__assert_fail@plt+0x37ea0>
   4a984:	b	4a9a8 <__assert_fail@plt+0x37ef8>
   4a988:	add	r2, r0, #1
   4a98c:	mov	r1, r0
   4a990:	mov	r3, #1
   4a994:	mov	ip, #1
   4a998:	mov	r0, r2
   4a99c:	add	r2, r3, r0
   4a9a0:	cmp	r2, r5
   4a9a4:	bcc	4a950 <__assert_fail@plt+0x37ea0>
   4a9a8:	cmp	r5, #2
   4a9ac:	bcc	4ab78 <__assert_fail@plt+0x380c8>
   4a9b0:	mvn	lr, #0
   4a9b4:	mov	r2, #0
   4a9b8:	mov	r3, #1
   4a9bc:	mov	r5, #1
   4a9c0:	mov	r7, #1
   4a9c4:	b	4a9e4 <__assert_fail@plt+0x37f34>
   4a9c8:	sub	r5, r3, lr
   4a9cc:	mov	r7, #1
   4a9d0:	mov	r2, r3
   4a9d4:	ldr	r0, [sp, #28]
   4a9d8:	add	r3, r7, r2
   4a9dc:	cmp	r3, r0
   4a9e0:	bcs	4ab80 <__assert_fail@plt+0x380d0>
   4a9e4:	add	r4, lr, r7
   4a9e8:	ldrb	r0, [r9, r3]
   4a9ec:	ldrb	r4, [r9, r4]
   4a9f0:	cmp	r4, r0
   4a9f4:	bcc	4a9c8 <__assert_fail@plt+0x37f18>
   4a9f8:	cmp	r0, r4
   4a9fc:	bne	4aa24 <__assert_fail@plt+0x37f74>
   4aa00:	cmp	r7, r5
   4aa04:	addne	r7, r7, #1
   4aa08:	addeq	r2, r2, r5
   4aa0c:	moveq	r7, #1
   4aa10:	ldr	r0, [sp, #28]
   4aa14:	add	r3, r7, r2
   4aa18:	cmp	r3, r0
   4aa1c:	bcc	4a9e4 <__assert_fail@plt+0x37f34>
   4aa20:	b	4ab80 <__assert_fail@plt+0x380d0>
   4aa24:	add	r0, r2, #1
   4aa28:	mov	lr, r2
   4aa2c:	mov	r7, #1
   4aa30:	mov	r5, #1
   4aa34:	mov	r2, r0
   4aa38:	ldr	r0, [sp, #28]
   4aa3c:	add	r3, r7, r2
   4aa40:	cmp	r3, r0
   4aa44:	bcc	4a9e4 <__assert_fail@plt+0x37f34>
   4aa48:	b	4ab80 <__assert_fail@plt+0x380d0>
   4aa4c:	mvn	r1, #0
   4aa50:	mov	r0, #0
   4aa54:	mov	r2, #1
   4aa58:	mov	ip, #1
   4aa5c:	mov	r3, #1
   4aa60:	b	4aa7c <__assert_fail@plt+0x37fcc>
   4aa64:	sub	ip, r2, r1
   4aa68:	mov	r3, #1
   4aa6c:	mov	r0, r2
   4aa70:	add	r2, r3, r0
   4aa74:	cmp	r2, r5
   4aa78:	bcs	4aad4 <__assert_fail@plt+0x38024>
   4aa7c:	add	r4, r1, r3
   4aa80:	ldrb	r7, [r9, r2]
   4aa84:	ldrb	r4, [r9, r4]
   4aa88:	cmp	r7, r4
   4aa8c:	bcc	4aa64 <__assert_fail@plt+0x37fb4>
   4aa90:	bne	4aab4 <__assert_fail@plt+0x38004>
   4aa94:	cmp	r3, ip
   4aa98:	addne	r3, r3, #1
   4aa9c:	addeq	r0, r0, ip
   4aaa0:	moveq	r3, #1
   4aaa4:	add	r2, r3, r0
   4aaa8:	cmp	r2, r5
   4aaac:	bcc	4aa7c <__assert_fail@plt+0x37fcc>
   4aab0:	b	4aad4 <__assert_fail@plt+0x38024>
   4aab4:	add	r2, r0, #1
   4aab8:	mov	r1, r0
   4aabc:	mov	r3, #1
   4aac0:	mov	ip, #1
   4aac4:	mov	r0, r2
   4aac8:	add	r2, r3, r0
   4aacc:	cmp	r2, r5
   4aad0:	bcc	4aa7c <__assert_fail@plt+0x37fcc>
   4aad4:	cmp	r5, #2
   4aad8:	bcc	4b0dc <__assert_fail@plt+0x3862c>
   4aadc:	mvn	lr, #0
   4aae0:	mov	r2, #0
   4aae4:	mov	r3, #1
   4aae8:	mov	r5, #1
   4aaec:	mov	r7, #1
   4aaf0:	b	4ab10 <__assert_fail@plt+0x38060>
   4aaf4:	sub	r5, r3, lr
   4aaf8:	mov	r7, #1
   4aafc:	mov	r2, r3
   4ab00:	ldr	r0, [sp, #28]
   4ab04:	add	r3, r7, r2
   4ab08:	cmp	r3, r0
   4ab0c:	bcs	4b0e4 <__assert_fail@plt+0x38634>
   4ab10:	add	r4, lr, r7
   4ab14:	ldrb	r0, [r9, r3]
   4ab18:	ldrb	r4, [r9, r4]
   4ab1c:	cmp	r4, r0
   4ab20:	bcc	4aaf4 <__assert_fail@plt+0x38044>
   4ab24:	cmp	r0, r4
   4ab28:	bne	4ab50 <__assert_fail@plt+0x380a0>
   4ab2c:	cmp	r7, r5
   4ab30:	addne	r7, r7, #1
   4ab34:	addeq	r2, r2, r5
   4ab38:	moveq	r7, #1
   4ab3c:	ldr	r0, [sp, #28]
   4ab40:	add	r3, r7, r2
   4ab44:	cmp	r3, r0
   4ab48:	bcc	4ab10 <__assert_fail@plt+0x38060>
   4ab4c:	b	4b0e4 <__assert_fail@plt+0x38634>
   4ab50:	add	r0, r2, #1
   4ab54:	mov	lr, r2
   4ab58:	mov	r7, #1
   4ab5c:	mov	r5, #1
   4ab60:	mov	r2, r0
   4ab64:	ldr	r0, [sp, #28]
   4ab68:	add	r3, r7, r2
   4ab6c:	cmp	r3, r0
   4ab70:	bcc	4ab10 <__assert_fail@plt+0x38060>
   4ab74:	b	4b0e4 <__assert_fail@plt+0x38634>
   4ab78:	mov	r5, #1
   4ab7c:	mvn	lr, #0
   4ab80:	ldr	r2, [sp, #28]
   4ab84:	add	r3, sp, #32
   4ab88:	add	r0, sl, #976	; 0x3d0
   4ab8c:	vdup.32	q8, r2
   4ab90:	vst1.32	{d16-d17}, [r3]
   4ab94:	vst1.32	{d16-d17}, [r0]
   4ab98:	add	r0, sl, #960	; 0x3c0
   4ab9c:	vst1.32	{d16-d17}, [r0]
   4aba0:	add	r0, sl, #944	; 0x3b0
   4aba4:	vst1.32	{d16-d17}, [r0]
   4aba8:	add	r0, sl, #928	; 0x3a0
   4abac:	vst1.32	{d16-d17}, [r0]
   4abb0:	add	r0, sl, #912	; 0x390
   4abb4:	vst1.32	{d16-d17}, [r0]
   4abb8:	add	r0, sl, #896	; 0x380
   4abbc:	vst1.32	{d16-d17}, [r0]
   4abc0:	add	r0, sl, #880	; 0x370
   4abc4:	vst1.32	{d16-d17}, [r0]
   4abc8:	add	r0, sl, #864	; 0x360
   4abcc:	vst1.32	{d16-d17}, [r0]
   4abd0:	add	r0, sl, #848	; 0x350
   4abd4:	vst1.32	{d16-d17}, [r0]
   4abd8:	add	r0, sl, #832	; 0x340
   4abdc:	vst1.32	{d16-d17}, [r0]
   4abe0:	add	r0, sl, #816	; 0x330
   4abe4:	vst1.32	{d16-d17}, [r0]
   4abe8:	add	r0, sl, #800	; 0x320
   4abec:	vst1.32	{d16-d17}, [r0]
   4abf0:	add	r0, sl, #784	; 0x310
   4abf4:	vst1.32	{d16-d17}, [r0]
   4abf8:	add	r0, sl, #768	; 0x300
   4abfc:	vst1.32	{d16-d17}, [r0]
   4ac00:	add	r0, sl, #752	; 0x2f0
   4ac04:	vst1.32	{d16-d17}, [r0]
   4ac08:	add	r0, sl, #736	; 0x2e0
   4ac0c:	vst1.32	{d16-d17}, [r0]
   4ac10:	add	r0, sl, #720	; 0x2d0
   4ac14:	vst1.32	{d16-d17}, [r0]
   4ac18:	add	r0, sl, #704	; 0x2c0
   4ac1c:	vst1.32	{d16-d17}, [r0]
   4ac20:	add	r0, sl, #688	; 0x2b0
   4ac24:	vst1.32	{d16-d17}, [r0]
   4ac28:	add	r0, sl, #672	; 0x2a0
   4ac2c:	vst1.32	{d16-d17}, [r0]
   4ac30:	add	r0, sl, #656	; 0x290
   4ac34:	vst1.32	{d16-d17}, [r0]
   4ac38:	add	r0, sl, #640	; 0x280
   4ac3c:	vst1.32	{d16-d17}, [r0]
   4ac40:	add	r0, sl, #624	; 0x270
   4ac44:	vst1.32	{d16-d17}, [r0]
   4ac48:	add	r0, sl, #608	; 0x260
   4ac4c:	vst1.32	{d16-d17}, [r0]
   4ac50:	add	r0, sl, #592	; 0x250
   4ac54:	vst1.32	{d16-d17}, [r0]
   4ac58:	add	r0, sl, #576	; 0x240
   4ac5c:	vst1.32	{d16-d17}, [r0]
   4ac60:	add	r0, sl, #560	; 0x230
   4ac64:	vst1.32	{d16-d17}, [r0]
   4ac68:	add	r0, sl, #544	; 0x220
   4ac6c:	vst1.32	{d16-d17}, [r0]
   4ac70:	add	r0, sl, #528	; 0x210
   4ac74:	vst1.32	{d16-d17}, [r0]
   4ac78:	add	r0, sl, #512	; 0x200
   4ac7c:	vst1.32	{d16-d17}, [r0]
   4ac80:	add	r0, sl, #496	; 0x1f0
   4ac84:	vst1.32	{d16-d17}, [r0]
   4ac88:	add	r0, sl, #480	; 0x1e0
   4ac8c:	vst1.32	{d16-d17}, [r0]
   4ac90:	add	r0, sl, #464	; 0x1d0
   4ac94:	vst1.32	{d16-d17}, [r0]
   4ac98:	add	r0, sl, #448	; 0x1c0
   4ac9c:	vst1.32	{d16-d17}, [r0]
   4aca0:	add	r0, sl, #432	; 0x1b0
   4aca4:	vst1.32	{d16-d17}, [r0]
   4aca8:	add	r0, sl, #416	; 0x1a0
   4acac:	vst1.32	{d16-d17}, [r0]
   4acb0:	add	r0, sl, #400	; 0x190
   4acb4:	vst1.32	{d16-d17}, [r0]
   4acb8:	add	r0, sl, #384	; 0x180
   4acbc:	vst1.32	{d16-d17}, [r0]
   4acc0:	add	r0, sl, #368	; 0x170
   4acc4:	vst1.32	{d16-d17}, [r0]
   4acc8:	add	r0, sl, #352	; 0x160
   4accc:	vst1.32	{d16-d17}, [r0]
   4acd0:	add	r0, sl, #336	; 0x150
   4acd4:	vst1.32	{d16-d17}, [r0]
   4acd8:	add	r0, sl, #320	; 0x140
   4acdc:	vst1.32	{d16-d17}, [r0]
   4ace0:	add	r0, sl, #304	; 0x130
   4ace4:	vst1.32	{d16-d17}, [r0]
   4ace8:	add	r0, sl, #288	; 0x120
   4acec:	vst1.32	{d16-d17}, [r0]
   4acf0:	add	r0, sl, #272	; 0x110
   4acf4:	vst1.32	{d16-d17}, [r0]
   4acf8:	add	r0, sl, #256	; 0x100
   4acfc:	vst1.32	{d16-d17}, [r0]
   4ad00:	add	r0, sl, #240	; 0xf0
   4ad04:	vst1.32	{d16-d17}, [r0]
   4ad08:	add	r0, sl, #224	; 0xe0
   4ad0c:	vst1.32	{d16-d17}, [r0]
   4ad10:	add	r0, sl, #208	; 0xd0
   4ad14:	vst1.32	{d16-d17}, [r0]
   4ad18:	add	r0, sl, #192	; 0xc0
   4ad1c:	vst1.32	{d16-d17}, [r0]
   4ad20:	add	r0, sl, #176	; 0xb0
   4ad24:	vst1.32	{d16-d17}, [r0]
   4ad28:	add	r0, sl, #160	; 0xa0
   4ad2c:	vst1.32	{d16-d17}, [r0]
   4ad30:	add	r0, sl, #144	; 0x90
   4ad34:	vst1.32	{d16-d17}, [r0]
   4ad38:	add	r0, sl, #128	; 0x80
   4ad3c:	vst1.32	{d16-d17}, [r0]
   4ad40:	add	r0, sl, #112	; 0x70
   4ad44:	vst1.32	{d16-d17}, [r0]
   4ad48:	add	r0, sl, #96	; 0x60
   4ad4c:	vst1.32	{d16-d17}, [r0]
   4ad50:	add	r0, sl, #80	; 0x50
   4ad54:	vst1.32	{d16-d17}, [r0]
   4ad58:	add	r0, sl, #64	; 0x40
   4ad5c:	vst1.32	{d16-d17}, [r0]
   4ad60:	add	r0, sl, #48	; 0x30
   4ad64:	vst1.32	{d16-d17}, [r0]
   4ad68:	add	r0, sl, #32
   4ad6c:	vst1.32	{d16-d17}, [r0]
   4ad70:	add	r0, sl, #16
   4ad74:	vst1.32	{d16-d17}, [r0]
   4ad78:	mov	r0, #992	; 0x3e0
   4ad7c:	vst1.32	{d16-d17}, [sl], r0
   4ad80:	add	r0, r1, #1
   4ad84:	add	r1, lr, #1
   4ad88:	cmp	r1, r0
   4ad8c:	vst1.32	{d16-d17}, [sl]
   4ad90:	movcc	r5, ip
   4ad94:	movcc	r1, r0
   4ad98:	cmp	r2, #0
   4ad9c:	str	r1, [sp, #16]
   4ada0:	str	r5, [sp, #12]
   4ada4:	beq	4ae18 <__assert_fail@plt+0x38368>
   4ada8:	mov	r6, r3
   4adac:	ldr	r3, [sp, #20]
   4adb0:	mov	lr, r2
   4adb4:	and	r0, r2, #1
   4adb8:	mvn	r2, r8
   4adbc:	mov	r1, #0
   4adc0:	cmn	r2, r3
   4adc4:	beq	4adfc <__assert_fail@plt+0x3834c>
   4adc8:	sub	r2, lr, r0
   4adcc:	sub	r3, lr, #2
   4add0:	mov	r1, #0
   4add4:	mov	r5, r9
   4add8:	add	r4, r3, #1
   4addc:	ldrb	r7, [r5, r1]!
   4ade0:	add	r1, r1, #2
   4ade4:	cmp	r2, r1
   4ade8:	str	r4, [r6, r7, lsl #2]
   4adec:	ldrb	r7, [r5, #1]
   4adf0:	str	r3, [r6, r7, lsl #2]
   4adf4:	sub	r3, r3, #2
   4adf8:	bne	4add4 <__assert_fail@plt+0x38324>
   4adfc:	ldr	r5, [sp, #12]
   4ae00:	cmp	r0, #0
   4ae04:	beq	4ae18 <__assert_fail@plt+0x38368>
   4ae08:	ldrb	r0, [r9, r1]
   4ae0c:	mvn	r1, r1
   4ae10:	add	r1, lr, r1
   4ae14:	str	r1, [r6, r0, lsl #2]
   4ae18:	ldr	r6, [sp, #16]
   4ae1c:	add	r1, r9, r5
   4ae20:	mov	r0, r9
   4ae24:	mov	r2, r6
   4ae28:	bl	127a4 <bcmp@plt>
   4ae2c:	cmp	r0, #0
   4ae30:	beq	4af7c <__assert_fail@plt+0x384cc>
   4ae34:	ldr	r0, [sp, #24]
   4ae38:	ldr	r1, [sp, #8]
   4ae3c:	ldr	r4, [sp, #28]
   4ae40:	mov	r7, #0
   4ae44:	add	r0, r0, r1
   4ae48:	sub	r2, r4, r1
   4ae4c:	mov	r1, #0
   4ae50:	bl	12894 <memchr@plt>
   4ae54:	sub	r1, r4, r6
   4ae58:	cmp	r6, r1
   4ae5c:	movcs	r1, r6
   4ae60:	cmp	r4, #0
   4ae64:	beq	4a908 <__assert_fail@plt+0x37e58>
   4ae68:	cmp	r0, #0
   4ae6c:	str	r1, [sp, #12]
   4ae70:	bne	4a908 <__assert_fail@plt+0x37e58>
   4ae74:	ldr	r2, [sp, #16]
   4ae78:	sub	r0, r4, #1
   4ae7c:	cmp	r2, r0
   4ae80:	bcs	4b330 <__assert_fail@plt+0x38880>
   4ae84:	ldr	r0, [sp, #24]
   4ae88:	ldr	r1, [sp, #20]
   4ae8c:	mov	r5, #0
   4ae90:	add	r0, r0, r2
   4ae94:	str	r0, [sp, #8]
   4ae98:	ldr	r0, [sp, #4]
   4ae9c:	add	r0, r1, r0
   4aea0:	add	sl, r0, r2
   4aea4:	sub	r0, r8, r1
   4aea8:	mov	r1, r4
   4aeac:	add	r0, r0, r2
   4aeb0:	add	r6, r0, #1
   4aeb4:	rsb	r0, r2, #1
   4aeb8:	str	r0, [sp, #20]
   4aebc:	ldr	r0, [sp, #24]
   4aec0:	add	r3, sp, #32
   4aec4:	add	r0, r1, r0
   4aec8:	ldrb	r2, [r0, #-1]
   4aecc:	ldr	r2, [r3, r2, lsl #2]
   4aed0:	cmp	r2, #0
   4aed4:	beq	4aee0 <__assert_fail@plt+0x38430>
   4aed8:	add	r5, r2, r5
   4aedc:	b	4af4c <__assert_fail@plt+0x3849c>
   4aee0:	ldr	r2, [sp, #8]
   4aee4:	mov	ip, r5
   4aee8:	add	r3, r2, r5
   4aeec:	mov	r2, #0
   4aef0:	ldrb	r7, [r3, -r2]
   4aef4:	ldrb	r5, [sl, -r2]
   4aef8:	cmp	r5, r7
   4aefc:	bne	4af40 <__assert_fail@plt+0x38490>
   4af00:	sub	r2, r2, #1
   4af04:	cmp	r6, r2
   4af08:	bne	4aef0 <__assert_fail@plt+0x38440>
   4af0c:	ldr	r5, [sp, #24]
   4af10:	ldr	r3, [sp, #20]
   4af14:	add	r2, r5, ip
   4af18:	cmp	r3, #1
   4af1c:	beq	4b3c4 <__assert_fail@plt+0x38914>
   4af20:	ldrb	r7, [r2, -r3]
   4af24:	ldrb	r5, [r9, -r3]
   4af28:	add	r3, r3, #1
   4af2c:	cmp	r5, r7
   4af30:	ldr	r5, [sp, #24]
   4af34:	beq	4af18 <__assert_fail@plt+0x38468>
   4af38:	ldr	r2, [sp, #12]
   4af3c:	b	4af44 <__assert_fail@plt+0x38494>
   4af40:	rsb	r2, r2, #0
   4af44:	add	r2, ip, r2
   4af48:	add	r5, r2, #1
   4af4c:	add	r8, r5, r4
   4af50:	mov	r7, #0
   4af54:	sub	r2, r8, r1
   4af58:	mov	r1, #0
   4af5c:	bl	12894 <memchr@plt>
   4af60:	cmp	r8, #0
   4af64:	beq	4a908 <__assert_fail@plt+0x37e58>
   4af68:	ldr	r4, [sp, #28]
   4af6c:	cmp	r0, #0
   4af70:	mov	r1, r8
   4af74:	beq	4aebc <__assert_fail@plt+0x3840c>
   4af78:	b	4a908 <__assert_fail@plt+0x37e58>
   4af7c:	ldr	r0, [sp, #24]
   4af80:	ldr	r1, [sp, #8]
   4af84:	ldr	r4, [sp, #28]
   4af88:	mov	r7, #0
   4af8c:	add	r0, r0, r1
   4af90:	sub	r2, r4, r1
   4af94:	mov	r1, #0
   4af98:	bl	12894 <memchr@plt>
   4af9c:	cmp	r4, #0
   4afa0:	beq	4a908 <__assert_fail@plt+0x37e58>
   4afa4:	cmp	r0, #0
   4afa8:	bne	4a908 <__assert_fail@plt+0x37e58>
   4afac:	sub	r0, r4, r5
   4afb0:	mov	lr, r4
   4afb4:	sub	r8, r4, #1
   4afb8:	mov	r4, #0
   4afbc:	mov	r6, #0
   4afc0:	str	r0, [sp, #20]
   4afc4:	ldr	r0, [sp, #16]
   4afc8:	mov	ip, lr
   4afcc:	sub	r1, r0, #1
   4afd0:	rsb	r0, r0, #1
   4afd4:	str	r1, [sp, #8]
   4afd8:	str	r0, [sp, #4]
   4afdc:	ldr	r0, [sp, #24]
   4afe0:	add	r1, sp, #32
   4afe4:	add	r0, ip, r0
   4afe8:	ldrb	r2, [r0, #-1]
   4afec:	ldr	r3, [r1, r2, lsl #2]
   4aff0:	cmp	r3, #0
   4aff4:	beq	4b018 <__assert_fail@plt+0x38568>
   4aff8:	ldr	r1, [sp, #20]
   4affc:	cmp	r3, r5
   4b000:	mov	r2, r3
   4b004:	movcc	r2, r1
   4b008:	cmp	r4, #0
   4b00c:	mov	r4, #0
   4b010:	moveq	r2, r3
   4b014:	b	4b0a8 <__assert_fail@plt+0x385f8>
   4b018:	ldr	r2, [sp, #16]
   4b01c:	cmp	r2, r4
   4b020:	movcc	r2, r4
   4b024:	cmp	r2, r8
   4b028:	bcs	4b050 <__assert_fail@plt+0x385a0>
   4b02c:	ldr	r1, [sp, #24]
   4b030:	add	r3, r1, r6
   4b034:	ldrb	r7, [r3, r2]
   4b038:	ldrb	r5, [r9, r2]
   4b03c:	cmp	r5, r7
   4b040:	bne	4b098 <__assert_fail@plt+0x385e8>
   4b044:	add	r2, r2, #1
   4b048:	cmp	r2, r8
   4b04c:	bcc	4b034 <__assert_fail@plt+0x38584>
   4b050:	ldr	r1, [sp, #24]
   4b054:	ldr	r2, [sp, #8]
   4b058:	add	r7, r1, r6
   4b05c:	add	r3, r2, #1
   4b060:	cmp	r4, r3
   4b064:	bcs	4b07c <__assert_fail@plt+0x385cc>
   4b068:	ldrb	r5, [r7, r2]
   4b06c:	ldrb	r1, [r9, r2]
   4b070:	sub	r2, r2, #1
   4b074:	cmp	r1, r5
   4b078:	beq	4b05c <__assert_fail@plt+0x385ac>
   4b07c:	ldr	r5, [sp, #12]
   4b080:	add	r1, r4, #1
   4b084:	ldr	r4, [sp, #20]
   4b088:	cmp	r3, r1
   4b08c:	mov	r2, r5
   4b090:	bcs	4b0a8 <__assert_fail@plt+0x385f8>
   4b094:	b	4a908 <__assert_fail@plt+0x37e58>
   4b098:	ldr	r1, [sp, #4]
   4b09c:	ldr	r5, [sp, #12]
   4b0a0:	mov	r4, #0
   4b0a4:	add	r2, r1, r2
   4b0a8:	add	r6, r2, r6
   4b0ac:	mov	r1, #0
   4b0b0:	mov	r7, #0
   4b0b4:	add	sl, r6, lr
   4b0b8:	sub	r2, sl, ip
   4b0bc:	bl	12894 <memchr@plt>
   4b0c0:	cmp	sl, #0
   4b0c4:	beq	4a908 <__assert_fail@plt+0x37e58>
   4b0c8:	ldr	lr, [sp, #28]
   4b0cc:	cmp	r0, #0
   4b0d0:	mov	ip, sl
   4b0d4:	beq	4afdc <__assert_fail@plt+0x3852c>
   4b0d8:	b	4a908 <__assert_fail@plt+0x37e58>
   4b0dc:	mov	r5, #1
   4b0e0:	mvn	lr, #0
   4b0e4:	add	r0, r1, #1
   4b0e8:	add	r6, lr, #1
   4b0ec:	cmp	r6, r0
   4b0f0:	movcc	r5, ip
   4b0f4:	movcc	r6, r0
   4b0f8:	add	r1, r9, r5
   4b0fc:	mov	r0, r9
   4b100:	mov	r2, r6
   4b104:	bl	127a4 <bcmp@plt>
   4b108:	cmp	r0, #0
   4b10c:	str	r6, [sp, #20]
   4b110:	beq	4b214 <__assert_fail@plt+0x38764>
   4b114:	ldr	r0, [sp, #24]
   4b118:	ldr	r5, [sp, #28]
   4b11c:	mov	r1, #0
   4b120:	mov	r7, #0
   4b124:	add	r0, r0, sl
   4b128:	sub	r2, r5, sl
   4b12c:	bl	12894 <memchr@plt>
   4b130:	sub	r4, r5, r6
   4b134:	cmp	r6, r4
   4b138:	movcc	r6, r4
   4b13c:	cmp	r5, #0
   4b140:	beq	4a908 <__assert_fail@plt+0x37e58>
   4b144:	ldr	ip, [sp, #24]
   4b148:	cmp	r0, #0
   4b14c:	bne	4a908 <__assert_fail@plt+0x37e58>
   4b150:	ldr	r0, [sp, #20]
   4b154:	mov	lr, r5
   4b158:	cmp	r5, r0
   4b15c:	bls	4b3d4 <__assert_fail@plt+0x38924>
   4b160:	add	r1, ip, r0
   4b164:	add	sl, r0, r8
   4b168:	rsb	r0, r0, #1
   4b16c:	mov	r5, #0
   4b170:	str	r6, [sp, #20]
   4b174:	str	r1, [sp, #16]
   4b178:	mov	r1, lr
   4b17c:	str	r0, [sp, #12]
   4b180:	ldr	r0, [sp, #16]
   4b184:	mov	r2, #0
   4b188:	add	r0, r0, r5
   4b18c:	ldrb	r3, [r0, r2]
   4b190:	ldrb	r7, [sl, r2]
   4b194:	cmp	r7, r3
   4b198:	bne	4b1d0 <__assert_fail@plt+0x38720>
   4b19c:	add	r2, r2, #1
   4b1a0:	cmp	r4, r2
   4b1a4:	bne	4b18c <__assert_fail@plt+0x386dc>
   4b1a8:	ldr	r2, [sp, #12]
   4b1ac:	add	r0, ip, r5
   4b1b0:	cmp	r2, #1
   4b1b4:	beq	4b464 <__assert_fail@plt+0x389b4>
   4b1b8:	ldrb	r3, [r0, -r2]
   4b1bc:	ldrb	r7, [r9, -r2]
   4b1c0:	add	r2, r2, #1
   4b1c4:	cmp	r7, r3
   4b1c8:	beq	4b1b0 <__assert_fail@plt+0x38700>
   4b1cc:	mov	r2, r6
   4b1d0:	add	r2, r5, r2
   4b1d4:	add	r0, ip, r1
   4b1d8:	mov	r7, #0
   4b1dc:	add	r2, r2, #1
   4b1e0:	add	r8, r2, lr
   4b1e4:	mov	r5, r2
   4b1e8:	sub	r2, r8, r1
   4b1ec:	mov	r1, #0
   4b1f0:	bl	12894 <memchr@plt>
   4b1f4:	cmp	r0, #0
   4b1f8:	bne	4a908 <__assert_fail@plt+0x37e58>
   4b1fc:	add	lr, sp, #20
   4b200:	cmp	r8, #0
   4b204:	mov	r1, r8
   4b208:	ldm	lr, {r6, ip, lr}
   4b20c:	bne	4b180 <__assert_fail@plt+0x386d0>
   4b210:	b	4a908 <__assert_fail@plt+0x37e58>
   4b214:	ldr	r0, [sp, #24]
   4b218:	ldr	r4, [sp, #28]
   4b21c:	mov	r1, #0
   4b220:	mov	r7, #0
   4b224:	add	r0, r0, sl
   4b228:	sub	r2, r4, sl
   4b22c:	bl	12894 <memchr@plt>
   4b230:	cmp	r4, #0
   4b234:	beq	4a908 <__assert_fail@plt+0x37e58>
   4b238:	mov	r8, r5
   4b23c:	ldr	r5, [sp, #24]
   4b240:	cmp	r0, #0
   4b244:	bne	4a908 <__assert_fail@plt+0x37e58>
   4b248:	sub	r0, r4, r8
   4b24c:	mov	r1, r4
   4b250:	mov	r6, #0
   4b254:	mov	ip, r4
   4b258:	mov	sl, #0
   4b25c:	str	r0, [sp, #16]
   4b260:	ldr	r0, [sp, #20]
   4b264:	sub	r2, r0, #1
   4b268:	rsb	r0, r0, #1
   4b26c:	str	r2, [sp, #12]
   4b270:	str	r0, [sp, #8]
   4b274:	ldr	r0, [sp, #20]
   4b278:	cmp	r0, r6
   4b27c:	movcc	r0, r6
   4b280:	cmp	r0, r1
   4b284:	bcs	4b2a8 <__assert_fail@plt+0x387f8>
   4b288:	add	r2, r5, sl
   4b28c:	ldrb	r3, [r2, r0]
   4b290:	ldrb	r7, [r9, r0]
   4b294:	cmp	r7, r3
   4b298:	bne	4b2e8 <__assert_fail@plt+0x38838>
   4b29c:	add	r0, r0, #1
   4b2a0:	cmp	r0, r1
   4b2a4:	bcc	4b28c <__assert_fail@plt+0x387dc>
   4b2a8:	ldr	r0, [sp, #12]
   4b2ac:	add	r7, r5, sl
   4b2b0:	add	r2, r0, #1
   4b2b4:	cmp	r6, r2
   4b2b8:	bcs	4b2d0 <__assert_fail@plt+0x38820>
   4b2bc:	ldrb	r3, [r7, r0]
   4b2c0:	ldrb	r4, [r9, r0]
   4b2c4:	sub	r0, r0, #1
   4b2c8:	cmp	r4, r3
   4b2cc:	beq	4b2b0 <__assert_fail@plt+0x38800>
   4b2d0:	add	r0, r6, #1
   4b2d4:	ldr	r6, [sp, #16]
   4b2d8:	cmp	r2, r0
   4b2dc:	mov	r2, r8
   4b2e0:	bcs	4b2f4 <__assert_fail@plt+0x38844>
   4b2e4:	b	4a908 <__assert_fail@plt+0x37e58>
   4b2e8:	ldr	r2, [sp, #8]
   4b2ec:	mov	r6, #0
   4b2f0:	add	r2, r2, r0
   4b2f4:	add	sl, r2, sl
   4b2f8:	add	r0, r5, ip
   4b2fc:	mov	r7, #0
   4b300:	add	r4, sl, r1
   4b304:	mov	r1, #0
   4b308:	sub	r2, r4, ip
   4b30c:	bl	12894 <memchr@plt>
   4b310:	cmp	r4, #0
   4b314:	beq	4a908 <__assert_fail@plt+0x37e58>
   4b318:	ldr	r1, [sp, #28]
   4b31c:	ldr	r5, [sp, #24]
   4b320:	cmp	r0, #0
   4b324:	mov	ip, r4
   4b328:	beq	4b274 <__assert_fail@plt+0x387c4>
   4b32c:	b	4a908 <__assert_fail@plt+0x37e58>
   4b330:	ldr	r0, [sp, #12]
   4b334:	rsb	sl, r2, #1
   4b338:	mov	r5, #0
   4b33c:	mov	r1, r4
   4b340:	add	r8, r0, #1
   4b344:	mov	ip, r5
   4b348:	ldr	r5, [sp, #24]
   4b34c:	add	r3, sp, #32
   4b350:	add	r0, r1, r5
   4b354:	ldrb	r2, [r0, #-1]
   4b358:	ldr	r2, [r3, r2, lsl #2]
   4b35c:	cmp	r2, #0
   4b360:	bne	4b38c <__assert_fail@plt+0x388dc>
   4b364:	add	r2, r5, ip
   4b368:	mov	r3, sl
   4b36c:	cmp	r3, #1
   4b370:	beq	4b3c4 <__assert_fail@plt+0x38914>
   4b374:	ldrb	r7, [r2, -r3]
   4b378:	ldrb	r6, [r9, -r3]
   4b37c:	add	r3, r3, #1
   4b380:	cmp	r6, r7
   4b384:	beq	4b36c <__assert_fail@plt+0x388bc>
   4b388:	mov	r2, r8
   4b38c:	mov	r5, ip
   4b390:	add	r5, r2, ip
   4b394:	mov	r7, #0
   4b398:	add	r6, r5, r4
   4b39c:	sub	r2, r6, r1
   4b3a0:	mov	r1, #0
   4b3a4:	bl	12894 <memchr@plt>
   4b3a8:	cmp	r6, #0
   4b3ac:	beq	4a908 <__assert_fail@plt+0x37e58>
   4b3b0:	ldr	r4, [sp, #28]
   4b3b4:	cmp	r0, #0
   4b3b8:	mov	r1, r6
   4b3bc:	beq	4b344 <__assert_fail@plt+0x38894>
   4b3c0:	b	4a908 <__assert_fail@plt+0x37e58>
   4b3c4:	add	r7, r5, ip
   4b3c8:	mov	r0, r7
   4b3cc:	sub	sp, fp, #28
   4b3d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b3d4:	add	r1, r6, #1
   4b3d8:	rsb	r0, r0, #1
   4b3dc:	mov	r5, #0
   4b3e0:	mov	r4, ip
   4b3e4:	mov	sl, lr
   4b3e8:	mov	r7, #0
   4b3ec:	str	r1, [sp, #20]
   4b3f0:	mov	r1, r0
   4b3f4:	cmp	r1, #1
   4b3f8:	beq	4b464 <__assert_fail@plt+0x389b4>
   4b3fc:	ldrb	r2, [r4, -r1]
   4b400:	ldrb	r3, [r9, -r1]
   4b404:	add	r1, r1, #1
   4b408:	cmp	r3, r2
   4b40c:	beq	4b3f4 <__assert_fail@plt+0x38944>
   4b410:	str	r0, [sp, #16]
   4b414:	ldr	r0, [sp, #20]
   4b418:	mov	r1, #0
   4b41c:	add	r5, r0, r5
   4b420:	mov	r6, r5
   4b424:	add	r8, r5, lr
   4b428:	mov	r5, r0
   4b42c:	add	r0, ip, sl
   4b430:	mov	r2, r5
   4b434:	bl	12894 <memchr@plt>
   4b438:	cmp	r8, #0
   4b43c:	beq	4a908 <__assert_fail@plt+0x37e58>
   4b440:	cmp	r0, #0
   4b444:	ldr	lr, [sp, #28]
   4b448:	ldr	ip, [sp, #24]
   4b44c:	ldr	r0, [sp, #16]
   4b450:	add	r4, r4, r5
   4b454:	mov	sl, r8
   4b458:	mov	r5, r6
   4b45c:	beq	4b3f0 <__assert_fail@plt+0x38940>
   4b460:	b	4a908 <__assert_fail@plt+0x37e58>
   4b464:	add	r7, ip, r5
   4b468:	mov	r0, r7
   4b46c:	sub	sp, fp, #28
   4b470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b474:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   4b478:	add	fp, sp, #24
   4b47c:	mov	r4, r0
   4b480:	cmp	r0, #0
   4b484:	beq	4b4b8 <__assert_fail@plt+0x38a08>
   4b488:	mov	r0, r4
   4b48c:	bl	127bc <strlen@plt>
   4b490:	add	r5, r0, #1
   4b494:	cmp	r5, #58	; 0x3a
   4b498:	bls	4b4bc <__assert_fail@plt+0x38a0c>
   4b49c:	add	r0, r0, #10
   4b4a0:	bic	r0, r0, #3
   4b4a4:	bl	35350 <__assert_fail@plt+0x228a0>
   4b4a8:	mov	r6, r0
   4b4ac:	cmp	r0, #0
   4b4b0:	bne	4b4d0 <__assert_fail@plt+0x38a20>
   4b4b4:	b	4b508 <__assert_fail@plt+0x38a58>
   4b4b8:	mov	r5, #0
   4b4bc:	mov	r0, #64	; 0x40
   4b4c0:	bl	35350 <__assert_fail@plt+0x228a0>
   4b4c4:	mov	r6, r0
   4b4c8:	cmp	r0, #0
   4b4cc:	beq	4b508 <__assert_fail@plt+0x38a58>
   4b4d0:	cmp	r4, #0
   4b4d4:	mov	r0, r4
   4b4d8:	mov	r8, #0
   4b4dc:	mov	r7, r6
   4b4e0:	movwne	r0, #1
   4b4e4:	str	r8, [r6]
   4b4e8:	strb	r0, [r6, #4]
   4b4ec:	strb	r8, [r7, #5]!
   4b4f0:	beq	4b508 <__assert_fail@plt+0x38a58>
   4b4f4:	mov	r0, r7
   4b4f8:	mov	r1, r4
   4b4fc:	mov	r2, r5
   4b500:	bl	124e0 <memcpy@plt>
   4b504:	strb	r8, [r7, r5]
   4b508:	mov	r0, r6
   4b50c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   4b510:	push	{r4, sl, fp, lr}
   4b514:	add	fp, sp, #8
   4b518:	cmp	r0, #2
   4b51c:	popcc	{r4, sl, fp, pc}
   4b520:	ldr	r4, [r0]
   4b524:	bl	32910 <__assert_fail@plt+0x1fe60>
   4b528:	cmp	r4, #0
   4b52c:	mov	r0, r4
   4b530:	bne	4b520 <__assert_fail@plt+0x38a70>
   4b534:	pop	{r4, sl, fp, pc}
   4b538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b53c:	add	fp, sp, #28
   4b540:	sub	sp, sp, #4
   4b544:	mov	r7, r2
   4b548:	mov	r5, r1
   4b54c:	cmp	r0, #0
   4b550:	beq	4b5cc <__assert_fail@plt+0x38b1c>
   4b554:	mov	r6, r0
   4b558:	movw	r0, #9929	; 0x26c9
   4b55c:	movt	r0, #5
   4b560:	bl	126d8 <getenv@plt>
   4b564:	mov	r9, r0
   4b568:	ldrb	r0, [r6, #4]
   4b56c:	cmp	r9, #0
   4b570:	beq	4b5e0 <__assert_fail@plt+0x38b30>
   4b574:	cmp	r0, #0
   4b578:	beq	4b590 <__assert_fail@plt+0x38ae0>
   4b57c:	add	r0, r6, #5
   4b580:	mov	r1, r9
   4b584:	bl	123fc <strcmp@plt>
   4b588:	cmp	r0, #0
   4b58c:	beq	4b6d0 <__assert_fail@plt+0x38c20>
   4b590:	mov	r0, r9
   4b594:	str	r7, [sp]
   4b598:	bl	127bc <strlen@plt>
   4b59c:	add	sl, r0, #1
   4b5a0:	mov	r8, #1
   4b5a4:	cmp	sl, #58	; 0x3a
   4b5a8:	bls	4b5f4 <__assert_fail@plt+0x38b44>
   4b5ac:	add	r0, r0, #10
   4b5b0:	bic	r0, r0, #3
   4b5b4:	bl	35350 <__assert_fail@plt+0x228a0>
   4b5b8:	cmp	r0, #0
   4b5bc:	bne	4b604 <__assert_fail@plt+0x38b54>
   4b5c0:	mov	r0, #0
   4b5c4:	sub	sp, fp, #28
   4b5c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b5cc:	mov	r0, r5
   4b5d0:	mov	r1, r7
   4b5d4:	sub	sp, fp, #28
   4b5d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b5dc:	b	123c0 <gmtime_r@plt>
   4b5e0:	mov	r8, #0
   4b5e4:	cmp	r0, #0
   4b5e8:	mov	sl, #0
   4b5ec:	str	r7, [sp]
   4b5f0:	beq	4b6cc <__assert_fail@plt+0x38c1c>
   4b5f4:	mov	r0, #64	; 0x40
   4b5f8:	bl	35350 <__assert_fail@plt+0x228a0>
   4b5fc:	cmp	r0, #0
   4b600:	beq	4b5c0 <__assert_fail@plt+0x38b10>
   4b604:	mov	r4, r0
   4b608:	mov	r7, r5
   4b60c:	strb	r8, [r0, #4]
   4b610:	mov	r0, #0
   4b614:	cmp	r8, #0
   4b618:	mov	r5, r4
   4b61c:	str	r0, [r4]
   4b620:	strb	r0, [r5, #5]!
   4b624:	beq	4b640 <__assert_fail@plt+0x38b90>
   4b628:	mov	r0, r5
   4b62c:	mov	r1, r9
   4b630:	mov	r2, sl
   4b634:	mov	r8, #0
   4b638:	bl	124e0 <memcpy@plt>
   4b63c:	strb	r8, [r5, sl]
   4b640:	ldrb	r0, [r6, #4]
   4b644:	mov	r5, r7
   4b648:	cmp	r0, #0
   4b64c:	beq	4b6ac <__assert_fail@plt+0x38bfc>
   4b650:	movw	r0, #9929	; 0x26c9
   4b654:	add	r1, r6, #5
   4b658:	mov	r2, #1
   4b65c:	movt	r0, #5
   4b660:	bl	127d4 <setenv@plt>
   4b664:	ldr	r7, [sp]
   4b668:	cmp	r0, #0
   4b66c:	beq	4b6c4 <__assert_fail@plt+0x38c14>
   4b670:	bl	12804 <__errno_location@plt>
   4b674:	ldr	r6, [r0]
   4b678:	mov	r5, r0
   4b67c:	cmp	r4, #2
   4b680:	bcc	4b69c <__assert_fail@plt+0x38bec>
   4b684:	ldr	r7, [r4]
   4b688:	mov	r0, r4
   4b68c:	bl	32910 <__assert_fail@plt+0x1fe60>
   4b690:	cmp	r7, #0
   4b694:	mov	r4, r7
   4b698:	bne	4b684 <__assert_fail@plt+0x38bd4>
   4b69c:	str	r6, [r5]
   4b6a0:	mov	r0, #0
   4b6a4:	sub	sp, fp, #28
   4b6a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b6ac:	movw	r0, #9929	; 0x26c9
   4b6b0:	movt	r0, #5
   4b6b4:	bl	12a2c <unsetenv@plt>
   4b6b8:	ldr	r7, [sp]
   4b6bc:	cmp	r0, #0
   4b6c0:	bne	4b670 <__assert_fail@plt+0x38bc0>
   4b6c4:	bl	125f4 <tzset@plt>
   4b6c8:	b	4b6d4 <__assert_fail@plt+0x38c24>
   4b6cc:	ldr	r7, [sp]
   4b6d0:	mov	r4, #1
   4b6d4:	mov	r0, r5
   4b6d8:	mov	r1, r7
   4b6dc:	bl	125ac <localtime_r@plt>
   4b6e0:	mov	sl, #1
   4b6e4:	cmp	r0, #0
   4b6e8:	mov	r9, #1
   4b6ec:	beq	4b700 <__assert_fail@plt+0x38c50>
   4b6f0:	mov	r0, r6
   4b6f4:	mov	r1, r7
   4b6f8:	bl	4b7ac <__assert_fail@plt+0x38cfc>
   4b6fc:	eor	r9, r0, #1
   4b700:	cmp	r4, #1
   4b704:	beq	4b768 <__assert_fail@plt+0x38cb8>
   4b708:	bl	12804 <__errno_location@plt>
   4b70c:	mov	r6, r0
   4b710:	ldr	r8, [r0]
   4b714:	ldrb	r0, [r4, #4]
   4b718:	cmp	r0, #0
   4b71c:	beq	4b784 <__assert_fail@plt+0x38cd4>
   4b720:	movw	r0, #9929	; 0x26c9
   4b724:	add	r1, r4, #5
   4b728:	mov	r2, #1
   4b72c:	movt	r0, #5
   4b730:	bl	127d4 <setenv@plt>
   4b734:	cmp	r0, #0
   4b738:	beq	4b798 <__assert_fail@plt+0x38ce8>
   4b73c:	ldr	r8, [r6]
   4b740:	mov	sl, #0
   4b744:	cmp	r4, #2
   4b748:	bcc	4b764 <__assert_fail@plt+0x38cb4>
   4b74c:	ldr	r5, [r4]
   4b750:	mov	r0, r4
   4b754:	bl	32910 <__assert_fail@plt+0x1fe60>
   4b758:	cmp	r5, #0
   4b75c:	mov	r4, r5
   4b760:	bne	4b74c <__assert_fail@plt+0x38c9c>
   4b764:	str	r8, [r6]
   4b768:	cmp	sl, #0
   4b76c:	moveq	r7, sl
   4b770:	cmp	r9, #0
   4b774:	movwne	r7, #0
   4b778:	mov	r0, r7
   4b77c:	sub	sp, fp, #28
   4b780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b784:	movw	r0, #9929	; 0x26c9
   4b788:	movt	r0, #5
   4b78c:	bl	12a2c <unsetenv@plt>
   4b790:	cmp	r0, #0
   4b794:	bne	4b73c <__assert_fail@plt+0x38c8c>
   4b798:	bl	125f4 <tzset@plt>
   4b79c:	mov	sl, #1
   4b7a0:	cmp	r4, #2
   4b7a4:	bcs	4b74c <__assert_fail@plt+0x38c9c>
   4b7a8:	b	4b764 <__assert_fail@plt+0x38cb4>
   4b7ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b7b0:	add	fp, sp, #28
   4b7b4:	sub	sp, sp, #4
   4b7b8:	ldr	r7, [r1, #40]	; 0x28
   4b7bc:	mov	r8, #1
   4b7c0:	cmp	r7, #0
   4b7c4:	beq	4b864 <__assert_fail@plt+0x38db4>
   4b7c8:	mov	r5, r1
   4b7cc:	mov	r6, r0
   4b7d0:	cmp	r7, r1
   4b7d4:	bcc	4b7e4 <__assert_fail@plt+0x38d34>
   4b7d8:	add	r0, r5, #44	; 0x2c
   4b7dc:	cmp	r7, r0
   4b7e0:	bcc	4b864 <__assert_fail@plt+0x38db4>
   4b7e4:	ldrb	r0, [r7]
   4b7e8:	cmp	r0, #0
   4b7ec:	beq	4b858 <__assert_fail@plt+0x38da8>
   4b7f0:	add	r4, r6, #5
   4b7f4:	mov	r0, r4
   4b7f8:	mov	r1, r7
   4b7fc:	bl	123fc <strcmp@plt>
   4b800:	cmp	r0, #0
   4b804:	beq	4b908 <__assert_fail@plt+0x38e58>
   4b808:	ldrb	r0, [r4]
   4b80c:	cmp	r0, #0
   4b810:	bne	4b82c <__assert_fail@plt+0x38d7c>
   4b814:	add	r0, r6, #5
   4b818:	cmp	r4, r0
   4b81c:	bne	4b870 <__assert_fail@plt+0x38dc0>
   4b820:	ldrb	r0, [r6, #4]
   4b824:	cmp	r0, #0
   4b828:	beq	4b870 <__assert_fail@plt+0x38dc0>
   4b82c:	mov	r0, r4
   4b830:	bl	127bc <strlen@plt>
   4b834:	add	r4, r0, r4
   4b838:	ldrb	r0, [r4, #1]!
   4b83c:	cmp	r0, #0
   4b840:	bne	4b7f4 <__assert_fail@plt+0x38d44>
   4b844:	ldr	r0, [r6]
   4b848:	cmp	r0, #0
   4b84c:	addne	r4, r0, #5
   4b850:	movne	r6, r0
   4b854:	b	4b7f4 <__assert_fail@plt+0x38d44>
   4b858:	movw	r4, #61103	; 0xeeaf
   4b85c:	movt	r4, #4
   4b860:	str	r4, [r5, #40]	; 0x28
   4b864:	mov	r0, r8
   4b868:	sub	sp, fp, #28
   4b86c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b870:	sub	r0, r6, r4
   4b874:	add	sl, r0, #64	; 0x40
   4b878:	mov	r0, r7
   4b87c:	bl	127bc <strlen@plt>
   4b880:	add	r9, r0, #1
   4b884:	cmp	r9, sl
   4b888:	bge	4b8b4 <__assert_fail@plt+0x38e04>
   4b88c:	mov	r0, r4
   4b890:	mov	r1, r7
   4b894:	mov	r2, r9
   4b898:	bl	124e0 <memcpy@plt>
   4b89c:	mov	r0, #0
   4b8a0:	strb	r0, [r4, r9]
   4b8a4:	str	r4, [r5, #40]	; 0x28
   4b8a8:	mov	r0, r8
   4b8ac:	sub	sp, fp, #28
   4b8b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b8b4:	add	r0, r0, #10
   4b8b8:	cmp	r9, #59	; 0x3b
   4b8bc:	bic	r0, r0, #3
   4b8c0:	movwcc	r0, #64	; 0x40
   4b8c4:	bl	35350 <__assert_fail@plt+0x228a0>
   4b8c8:	cmp	r0, #0
   4b8cc:	beq	4b918 <__assert_fail@plt+0x38e68>
   4b8d0:	mov	sl, r0
   4b8d4:	mov	r0, #1
   4b8d8:	mov	r1, r7
   4b8dc:	mov	r2, r9
   4b8e0:	strh	r0, [sl, #4]
   4b8e4:	mov	r0, #0
   4b8e8:	add	r4, sl, #5
   4b8ec:	str	r0, [sl]
   4b8f0:	mov	r0, r4
   4b8f4:	bl	124e0 <memcpy@plt>
   4b8f8:	mov	r0, #0
   4b8fc:	strb	r0, [r4, r9]
   4b900:	str	sl, [r6]
   4b904:	strb	r0, [sl, #4]
   4b908:	str	r4, [r5, #40]	; 0x28
   4b90c:	mov	r0, r8
   4b910:	sub	sp, fp, #28
   4b914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b918:	mov	r8, #0
   4b91c:	str	r8, [r6]
   4b920:	mov	r0, r8
   4b924:	sub	sp, fp, #28
   4b928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b92c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b930:	add	fp, sp, #28
   4b934:	sub	sp, sp, #52	; 0x34
   4b938:	mov	r9, r1
   4b93c:	cmp	r0, #0
   4b940:	beq	4b9bc <__assert_fail@plt+0x38f0c>
   4b944:	mov	r7, r0
   4b948:	movw	r0, #9929	; 0x26c9
   4b94c:	movt	r0, #5
   4b950:	bl	126d8 <getenv@plt>
   4b954:	mov	r5, r0
   4b958:	ldrb	r0, [r7, #4]
   4b95c:	cmp	r5, #0
   4b960:	beq	4b9cc <__assert_fail@plt+0x38f1c>
   4b964:	cmp	r0, #0
   4b968:	beq	4b980 <__assert_fail@plt+0x38ed0>
   4b96c:	add	r0, r7, #5
   4b970:	mov	r1, r5
   4b974:	bl	123fc <strcmp@plt>
   4b978:	cmp	r0, #0
   4b97c:	beq	4ba90 <__assert_fail@plt+0x38fe0>
   4b980:	mov	r0, r5
   4b984:	bl	127bc <strlen@plt>
   4b988:	add	sl, r0, #1
   4b98c:	mov	r8, #1
   4b990:	cmp	sl, #58	; 0x3a
   4b994:	bls	4b9dc <__assert_fail@plt+0x38f2c>
   4b998:	add	r0, r0, #10
   4b99c:	bic	r0, r0, #3
   4b9a0:	bl	35350 <__assert_fail@plt+0x228a0>
   4b9a4:	mvn	r6, #0
   4b9a8:	cmp	r0, #0
   4b9ac:	bne	4b9f0 <__assert_fail@plt+0x38f40>
   4b9b0:	mov	r0, r6
   4b9b4:	sub	sp, fp, #28
   4b9b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b9bc:	mov	r0, r9
   4b9c0:	sub	sp, fp, #28
   4b9c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4b9c8:	b	12990 <timegm@plt>
   4b9cc:	mov	r8, #0
   4b9d0:	cmp	r0, #0
   4b9d4:	mov	sl, #0
   4b9d8:	beq	4ba90 <__assert_fail@plt+0x38fe0>
   4b9dc:	mov	r0, #64	; 0x40
   4b9e0:	bl	35350 <__assert_fail@plt+0x228a0>
   4b9e4:	mvn	r6, #0
   4b9e8:	cmp	r0, #0
   4b9ec:	beq	4b9b0 <__assert_fail@plt+0x38f00>
   4b9f0:	mov	r4, r0
   4b9f4:	strb	r8, [r0, #4]
   4b9f8:	mov	r0, #0
   4b9fc:	cmp	r8, #0
   4ba00:	mov	r6, r4
   4ba04:	str	r0, [r4]
   4ba08:	strb	r0, [r6, #5]!
   4ba0c:	beq	4ba28 <__assert_fail@plt+0x38f78>
   4ba10:	mov	r0, r6
   4ba14:	mov	r1, r5
   4ba18:	mov	r2, sl
   4ba1c:	mov	r8, #0
   4ba20:	bl	124e0 <memcpy@plt>
   4ba24:	strb	r8, [r6, sl]
   4ba28:	ldrb	r0, [r7, #4]
   4ba2c:	cmp	r0, #0
   4ba30:	beq	4ba98 <__assert_fail@plt+0x38fe8>
   4ba34:	movw	r0, #9929	; 0x26c9
   4ba38:	add	r1, r7, #5
   4ba3c:	mov	r2, #1
   4ba40:	movt	r0, #5
   4ba44:	bl	127d4 <setenv@plt>
   4ba48:	cmp	r0, #0
   4ba4c:	beq	4baac <__assert_fail@plt+0x38ffc>
   4ba50:	bl	12804 <__errno_location@plt>
   4ba54:	ldr	r5, [r0]
   4ba58:	mov	r6, r0
   4ba5c:	cmp	r4, #2
   4ba60:	bcc	4ba7c <__assert_fail@plt+0x38fcc>
   4ba64:	ldr	r7, [r4]
   4ba68:	mov	r0, r4
   4ba6c:	bl	32910 <__assert_fail@plt+0x1fe60>
   4ba70:	cmp	r7, #0
   4ba74:	mov	r4, r7
   4ba78:	bne	4ba64 <__assert_fail@plt+0x38fb4>
   4ba7c:	str	r5, [r6]
   4ba80:	mvn	r6, #0
   4ba84:	mov	r0, r6
   4ba88:	sub	sp, fp, #28
   4ba8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4ba90:	mov	r4, #1
   4ba94:	b	4bab0 <__assert_fail@plt+0x39000>
   4ba98:	movw	r0, #9929	; 0x26c9
   4ba9c:	movt	r0, #5
   4baa0:	bl	12a2c <unsetenv@plt>
   4baa4:	cmp	r0, #0
   4baa8:	bne	4ba50 <__assert_fail@plt+0x38fa0>
   4baac:	bl	125f4 <tzset@plt>
   4bab0:	mov	r0, #32
   4bab4:	mov	r1, r9
   4bab8:	add	r5, sp, #8
   4babc:	vld1.32	{d16-d17}, [r1], r0
   4bac0:	mov	r2, r5
   4bac4:	vst1.32	{d16-d17}, [r2], r0
   4bac8:	ldr	r0, [r9, #16]
   4bacc:	ldr	r3, [r9, #20]
   4bad0:	str	r0, [sp, #24]
   4bad4:	mvn	r0, #0
   4bad8:	str	r0, [sp, #36]	; 0x24
   4badc:	str	r3, [sp, #28]
   4bae0:	ldr	r0, [r1]
   4bae4:	str	r0, [r2]
   4bae8:	mov	r0, r5
   4baec:	bl	12438 <mktime@plt>
   4baf0:	mov	r6, r0
   4baf4:	ldr	r0, [sp, #36]	; 0x24
   4baf8:	mov	sl, #1
   4bafc:	mov	r8, #1
   4bb00:	cmp	r0, #0
   4bb04:	bmi	4bb18 <__assert_fail@plt+0x39068>
   4bb08:	add	r1, sp, #8
   4bb0c:	mov	r0, r7
   4bb10:	bl	4b7ac <__assert_fail@plt+0x38cfc>
   4bb14:	eor	r8, r0, #1
   4bb18:	cmp	r4, #1
   4bb1c:	beq	4bb90 <__assert_fail@plt+0x390e0>
   4bb20:	bl	12804 <__errno_location@plt>
   4bb24:	mov	r7, r0
   4bb28:	ldr	sl, [r0]
   4bb2c:	ldrb	r0, [r4, #4]
   4bb30:	cmp	r0, #0
   4bb34:	beq	4bbdc <__assert_fail@plt+0x3912c>
   4bb38:	movw	r0, #9929	; 0x26c9
   4bb3c:	add	r1, r4, #5
   4bb40:	mov	r2, #1
   4bb44:	movt	r0, #5
   4bb48:	bl	127d4 <setenv@plt>
   4bb4c:	cmp	r0, #0
   4bb50:	str	r6, [sp, #4]
   4bb54:	beq	4bbf4 <__assert_fail@plt+0x39144>
   4bb58:	ldr	r0, [r7]
   4bb5c:	mov	sl, #0
   4bb60:	str	r0, [sp]
   4bb64:	cmp	r4, #2
   4bb68:	bcc	4bb84 <__assert_fail@plt+0x390d4>
   4bb6c:	ldr	r6, [r4]
   4bb70:	mov	r0, r4
   4bb74:	bl	32910 <__assert_fail@plt+0x1fe60>
   4bb78:	cmp	r6, #0
   4bb7c:	mov	r4, r6
   4bb80:	bne	4bb6c <__assert_fail@plt+0x390bc>
   4bb84:	ldr	r0, [sp]
   4bb88:	ldr	r6, [sp, #4]
   4bb8c:	str	r0, [r7]
   4bb90:	eor	r0, sl, #1
   4bb94:	orrs	r0, r8, r0
   4bb98:	beq	4bbac <__assert_fail@plt+0x390fc>
   4bb9c:	mvn	r6, #0
   4bba0:	mov	r0, r6
   4bba4:	sub	sp, fp, #28
   4bba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4bbac:	mov	r0, #28
   4bbb0:	add	r1, r5, #16
   4bbb4:	vld1.32	{d16-d17}, [r5], r0
   4bbb8:	vld1.64	{d18-d19}, [r1]
   4bbbc:	add	r1, r9, #16
   4bbc0:	vld1.32	{d20-d21}, [r5]
   4bbc4:	vst1.32	{d16-d17}, [r9], r0
   4bbc8:	vst1.32	{d18-d19}, [r1]
   4bbcc:	vst1.32	{d20-d21}, [r9]
   4bbd0:	mov	r0, r6
   4bbd4:	sub	sp, fp, #28
   4bbd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4bbdc:	movw	r0, #9929	; 0x26c9
   4bbe0:	movt	r0, #5
   4bbe4:	bl	12a2c <unsetenv@plt>
   4bbe8:	cmp	r0, #0
   4bbec:	str	r6, [sp, #4]
   4bbf0:	bne	4bb58 <__assert_fail@plt+0x390a8>
   4bbf4:	str	sl, [sp]
   4bbf8:	bl	125f4 <tzset@plt>
   4bbfc:	mov	sl, #1
   4bc00:	cmp	r4, #2
   4bc04:	bcs	4bb6c <__assert_fail@plt+0x390bc>
   4bc08:	b	4bb84 <__assert_fail@plt+0x390d4>
   4bc0c:	push	{fp, lr}
   4bc10:	mov	fp, sp
   4bc14:	movw	r0, #17648	; 0x44f0
   4bc18:	movt	r0, #6
   4bc1c:	ldr	r0, [r0]
   4bc20:	bl	12780 <exit@plt>
   4bc24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4bc28:	add	fp, sp, #28
   4bc2c:	sub	sp, sp, #12
   4bc30:	mov	r4, r3
   4bc34:	mov	r9, r2
   4bc38:	mov	r7, r1
   4bc3c:	mov	r8, r0
   4bc40:	bl	127bc <strlen@plt>
   4bc44:	ldr	r6, [r7]
   4bc48:	cmp	r6, #0
   4bc4c:	beq	4bcf8 <__assert_fail@plt+0x39248>
   4bc50:	mov	r5, r0
   4bc54:	cmp	r9, #0
   4bc58:	beq	4bd08 <__assert_fail@plt+0x39258>
   4bc5c:	add	r0, r7, #4
   4bc60:	mvn	sl, #0
   4bc64:	mov	r7, #0
   4bc68:	str	r9, [sp]
   4bc6c:	str	r0, [sp, #8]
   4bc70:	mov	r0, #0
   4bc74:	str	r0, [sp, #4]
   4bc78:	mov	r0, r9
   4bc7c:	b	4bcc0 <__assert_fail@plt+0x39210>
   4bc80:	ldr	r0, [sp]
   4bc84:	mov	r1, r9
   4bc88:	mov	r2, r4
   4bc8c:	mla	r0, sl, r4, r0
   4bc90:	bl	127a4 <bcmp@plt>
   4bc94:	ldr	r1, [sp, #4]
   4bc98:	cmp	r0, #0
   4bc9c:	movwne	r0, #1
   4bca0:	orr	r1, r1, r0
   4bca4:	str	r1, [sp, #4]
   4bca8:	ldr	r0, [sp, #8]
   4bcac:	add	r9, r9, r4
   4bcb0:	ldr	r6, [r0, r7, lsl #2]
   4bcb4:	add	r7, r7, #1
   4bcb8:	cmp	r6, #0
   4bcbc:	beq	4bd7c <__assert_fail@plt+0x392cc>
   4bcc0:	mov	r0, r6
   4bcc4:	mov	r1, r8
   4bcc8:	mov	r2, r5
   4bccc:	bl	12a50 <strncmp@plt>
   4bcd0:	cmp	r0, #0
   4bcd4:	bne	4bca8 <__assert_fail@plt+0x391f8>
   4bcd8:	mov	r0, r6
   4bcdc:	bl	127bc <strlen@plt>
   4bce0:	cmp	r0, r5
   4bce4:	beq	4bcfc <__assert_fail@plt+0x3924c>
   4bce8:	cmn	sl, #1
   4bcec:	bne	4bc80 <__assert_fail@plt+0x391d0>
   4bcf0:	mov	sl, r7
   4bcf4:	b	4bca8 <__assert_fail@plt+0x391f8>
   4bcf8:	mvn	r7, #0
   4bcfc:	mov	r0, r7
   4bd00:	sub	sp, fp, #28
   4bd04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4bd08:	add	r4, r7, #4
   4bd0c:	mov	r0, #0
   4bd10:	mvn	r9, #0
   4bd14:	mvn	sl, #0
   4bd18:	mov	r7, #0
   4bd1c:	str	r0, [sp, #4]
   4bd20:	b	4bd50 <__assert_fail@plt+0x392a0>
   4bd24:	ldr	r1, [sp, #4]
   4bd28:	subs	r0, sl, r9
   4bd2c:	movwne	r0, #1
   4bd30:	cmn	sl, #1
   4bd34:	moveq	sl, r7
   4bd38:	orr	r1, r1, r0
   4bd3c:	str	r1, [sp, #4]
   4bd40:	ldr	r6, [r4, r7, lsl #2]
   4bd44:	add	r7, r7, #1
   4bd48:	cmp	r6, #0
   4bd4c:	beq	4bd7c <__assert_fail@plt+0x392cc>
   4bd50:	mov	r0, r6
   4bd54:	mov	r1, r8
   4bd58:	mov	r2, r5
   4bd5c:	bl	12a50 <strncmp@plt>
   4bd60:	cmp	r0, #0
   4bd64:	bne	4bd40 <__assert_fail@plt+0x39290>
   4bd68:	mov	r0, r6
   4bd6c:	bl	127bc <strlen@plt>
   4bd70:	cmp	r0, r5
   4bd74:	bne	4bd24 <__assert_fail@plt+0x39274>
   4bd78:	b	4bcfc <__assert_fail@plt+0x3924c>
   4bd7c:	ldr	r0, [sp, #4]
   4bd80:	tst	r0, #1
   4bd84:	mvnne	sl, #1
   4bd88:	mov	r0, sl
   4bd8c:	sub	sp, fp, #28
   4bd90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4bd94:	push	{r4, r5, r6, sl, fp, lr}
   4bd98:	add	fp, sp, #16
   4bd9c:	sub	sp, sp, #8
   4bda0:	mov	r5, r0
   4bda4:	movw	r0, #12784	; 0x31f0
   4bda8:	mov	r4, r1
   4bdac:	movw	r1, #12811	; 0x320b
   4bdb0:	cmn	r2, #1
   4bdb4:	mov	r2, #5
   4bdb8:	movt	r0, #5
   4bdbc:	movt	r1, #5
   4bdc0:	moveq	r1, r0
   4bdc4:	mov	r0, #0
   4bdc8:	bl	12564 <dcgettext@plt>
   4bdcc:	mov	r6, r0
   4bdd0:	mov	r0, #0
   4bdd4:	mov	r1, #8
   4bdd8:	mov	r2, r4
   4bddc:	bl	2efe4 <__assert_fail@plt+0x1c534>
   4bde0:	mov	r4, r0
   4bde4:	mov	r0, #1
   4bde8:	mov	r1, r5
   4bdec:	bl	2f5a4 <__assert_fail@plt+0x1caf4>
   4bdf0:	str	r0, [sp]
   4bdf4:	mov	r0, #0
   4bdf8:	mov	r1, #0
   4bdfc:	mov	r2, r6
   4be00:	mov	r3, r4
   4be04:	bl	1269c <error@plt>
   4be08:	sub	sp, fp, #16
   4be0c:	pop	{r4, r5, r6, sl, fp, pc}
   4be10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4be14:	add	fp, sp, #28
   4be18:	sub	sp, sp, #4
   4be1c:	mov	sl, r1
   4be20:	movw	r1, #12840	; 0x3228
   4be24:	mov	r4, r2
   4be28:	mov	r7, r0
   4be2c:	mov	r0, #0
   4be30:	mov	r2, #5
   4be34:	mov	r8, #0
   4be38:	movt	r1, #5
   4be3c:	bl	12564 <dcgettext@plt>
   4be40:	movw	r1, #17744	; 0x4550
   4be44:	movt	r1, #6
   4be48:	ldr	r1, [r1]
   4be4c:	bl	12a44 <fputs@plt>
   4be50:	ldr	r6, [r7]
   4be54:	cmp	r6, #0
   4be58:	bne	4be78 <__assert_fail@plt+0x393c8>
   4be5c:	movw	r0, #17744	; 0x4550
   4be60:	movt	r0, #6
   4be64:	ldr	r1, [r0]
   4be68:	mov	r0, #10
   4be6c:	sub	sp, fp, #28
   4be70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4be74:	b	1299c <putc@plt>
   4be78:	add	r0, r7, #4
   4be7c:	mov	r9, #0
   4be80:	mov	r7, #0
   4be84:	str	r0, [sp]
   4be88:	mov	r5, #0
   4be8c:	cmp	r9, #0
   4be90:	bne	4bee4 <__assert_fail@plt+0x39434>
   4be94:	movw	r0, #17744	; 0x4550
   4be98:	movt	r0, #6
   4be9c:	ldr	r7, [r0]
   4bea0:	mov	r0, r6
   4bea4:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   4bea8:	movw	r1, #12861	; 0x323d
   4beac:	mov	r2, r0
   4beb0:	mov	r0, r7
   4beb4:	movt	r1, #5
   4beb8:	bl	127f8 <fprintf@plt>
   4bebc:	add	r7, sl, r5
   4bec0:	ldr	r0, [sp]
   4bec4:	add	r8, r8, r4
   4bec8:	ldr	r6, [r0, -r9, lsl #2]
   4becc:	sub	r9, r9, #1
   4bed0:	cmp	r6, #0
   4bed4:	beq	4be5c <__assert_fail@plt+0x393ac>
   4bed8:	mov	r5, #0
   4bedc:	cmp	r9, #0
   4bee0:	beq	4be94 <__assert_fail@plt+0x393e4>
   4bee4:	add	r1, sl, r8
   4bee8:	mov	r0, r7
   4beec:	mov	r2, r4
   4bef0:	bl	127a4 <bcmp@plt>
   4bef4:	cmp	r0, #0
   4bef8:	mov	r5, r8
   4befc:	bne	4be94 <__assert_fail@plt+0x393e4>
   4bf00:	movw	r0, #17744	; 0x4550
   4bf04:	movt	r0, #6
   4bf08:	ldr	r5, [r0]
   4bf0c:	mov	r0, r6
   4bf10:	bl	2f5b4 <__assert_fail@plt+0x1cb04>
   4bf14:	movw	r1, #12869	; 0x3245
   4bf18:	mov	r2, r0
   4bf1c:	mov	r0, r5
   4bf20:	movt	r1, #5
   4bf24:	bl	127f8 <fprintf@plt>
   4bf28:	b	4bec0 <__assert_fail@plt+0x39410>
   4bf2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4bf30:	add	fp, sp, #28
   4bf34:	sub	sp, sp, #4
   4bf38:	ldr	r8, [fp, #8]
   4bf3c:	mov	r7, r0
   4bf40:	mov	r4, r3
   4bf44:	mov	r5, r2
   4bf48:	mov	r6, r1
   4bf4c:	mov	r0, r1
   4bf50:	mov	r1, r2
   4bf54:	mov	r2, r3
   4bf58:	mov	r3, r8
   4bf5c:	bl	4bc24 <__assert_fail@plt+0x39174>
   4bf60:	cmn	r0, #1
   4bf64:	ble	4bf70 <__assert_fail@plt+0x394c0>
   4bf68:	sub	sp, fp, #28
   4bf6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4bf70:	movw	r0, #12784	; 0x31f0
   4bf74:	ldr	sl, [fp, #12]
   4bf78:	movw	r1, #12811	; 0x320b
   4bf7c:	mov	r2, #5
   4bf80:	movt	r0, #5
   4bf84:	movt	r1, #5
   4bf88:	moveq	r1, r0
   4bf8c:	mov	r0, #0
   4bf90:	bl	12564 <dcgettext@plt>
   4bf94:	mov	r9, r0
   4bf98:	mov	r0, #0
   4bf9c:	mov	r1, #8
   4bfa0:	mov	r2, r6
   4bfa4:	bl	2efe4 <__assert_fail@plt+0x1c534>
   4bfa8:	mov	r6, r0
   4bfac:	mov	r0, #1
   4bfb0:	mov	r1, r7
   4bfb4:	bl	2f5a4 <__assert_fail@plt+0x1caf4>
   4bfb8:	str	r0, [sp]
   4bfbc:	mov	r0, #0
   4bfc0:	mov	r1, #0
   4bfc4:	mov	r2, r9
   4bfc8:	mov	r3, r6
   4bfcc:	bl	1269c <error@plt>
   4bfd0:	mov	r0, r5
   4bfd4:	mov	r1, r4
   4bfd8:	mov	r2, r8
   4bfdc:	bl	4be10 <__assert_fail@plt+0x39360>
   4bfe0:	blx	sl
   4bfe4:	mvn	r0, #0
   4bfe8:	sub	sp, fp, #28
   4bfec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4bff0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   4bff4:	add	fp, sp, #24
   4bff8:	ldr	r6, [r1]
   4bffc:	cmp	r6, #0
   4c000:	beq	4c064 <__assert_fail@plt+0x395b4>
   4c004:	mov	r8, r1
   4c008:	mov	r7, r2
   4c00c:	mov	r1, r2
   4c010:	mov	r2, r3
   4c014:	mov	r4, r3
   4c018:	mov	r9, r0
   4c01c:	bl	127a4 <bcmp@plt>
   4c020:	cmp	r0, #0
   4c024:	beq	4c05c <__assert_fail@plt+0x395ac>
   4c028:	add	r7, r7, r4
   4c02c:	add	r5, r8, #4
   4c030:	ldr	r6, [r5]
   4c034:	cmp	r6, #0
   4c038:	beq	4c064 <__assert_fail@plt+0x395b4>
   4c03c:	mov	r0, r9
   4c040:	mov	r1, r7
   4c044:	mov	r2, r4
   4c048:	bl	127a4 <bcmp@plt>
   4c04c:	add	r7, r7, r4
   4c050:	add	r5, r5, #4
   4c054:	cmp	r0, #0
   4c058:	bne	4c030 <__assert_fail@plt+0x39580>
   4c05c:	mov	r0, r6
   4c060:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   4c064:	mov	r6, #0
   4c068:	mov	r0, r6
   4c06c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   4c070:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   4c074:	add	fp, sp, #24
   4c078:	sub	sp, sp, #32
   4c07c:	mov	r5, r0
   4c080:	ldrb	r0, [r2]
   4c084:	cmp	r0, #0
   4c088:	beq	4c0b8 <__assert_fail@plt+0x39608>
   4c08c:	movw	r9, #20036	; 0x4e44
   4c090:	mov	r4, r2
   4c094:	mov	r6, r1
   4c098:	movt	r9, #6
   4c09c:	ldr	r0, [r9]
   4c0a0:	cmp	r0, #0
   4c0a4:	beq	4c0c4 <__assert_fail@plt+0x39614>
   4c0a8:	mov	r7, #0
   4c0ac:	cmp	r0, #0
   4c0b0:	bpl	4c130 <__assert_fail@plt+0x39680>
   4c0b4:	b	4c178 <__assert_fail@plt+0x396c8>
   4c0b8:	mov	r0, #0
   4c0bc:	strb	r0, [r5]
   4c0c0:	b	4c174 <__assert_fail@plt+0x396c4>
   4c0c4:	movw	r0, #5817	; 0x16b9
   4c0c8:	movw	r1, #18688	; 0x4900
   4c0cc:	movt	r0, #5
   4c0d0:	movt	r1, #8
   4c0d4:	bl	126cc <open64@plt>
   4c0d8:	cmn	r0, #1
   4c0dc:	ble	4c184 <__assert_fail@plt+0x396d4>
   4c0e0:	movw	r1, #12874	; 0x324a
   4c0e4:	mov	r7, r0
   4c0e8:	mov	r8, sp
   4c0ec:	movt	r1, #5
   4c0f0:	mov	r0, r8
   4c0f4:	mov	r2, r7
   4c0f8:	bl	1296c <sprintf@plt>
   4c0fc:	mov	r0, r8
   4c100:	mov	r1, #0
   4c104:	bl	128ac <access@plt>
   4c108:	cmp	r0, #0
   4c10c:	mvn	r1, #0
   4c110:	mov	r0, r7
   4c114:	movweq	r1, #1
   4c118:	str	r1, [r9]
   4c11c:	bl	12a68 <close@plt>
   4c120:	ldr	r0, [r9]
   4c124:	mov	r7, #0
   4c128:	cmp	r0, #0
   4c12c:	bmi	4c178 <__assert_fail@plt+0x396c8>
   4c130:	mov	r0, r4
   4c134:	bl	127bc <strlen@plt>
   4c138:	add	r0, r0, #27
   4c13c:	cmp	r0, #4032	; 0xfc0
   4c140:	bls	4c154 <__assert_fail@plt+0x396a4>
   4c144:	bl	35350 <__assert_fail@plt+0x228a0>
   4c148:	mov	r5, r0
   4c14c:	cmp	r0, #0
   4c150:	beq	4c178 <__assert_fail@plt+0x396c8>
   4c154:	movw	r1, #12897	; 0x3261
   4c158:	mov	r0, r5
   4c15c:	mov	r2, r6
   4c160:	movt	r1, #5
   4c164:	bl	1296c <sprintf@plt>
   4c168:	add	r0, r5, r0
   4c16c:	mov	r1, r4
   4c170:	bl	12660 <strcpy@plt>
   4c174:	mov	r7, r5
   4c178:	mov	r0, r7
   4c17c:	sub	sp, fp, #24
   4c180:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   4c184:	mvn	r0, #0
   4c188:	mov	r7, #0
   4c18c:	str	r0, [r9]
   4c190:	mov	r0, r7
   4c194:	sub	sp, fp, #24
   4c198:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   4c19c:	sub	r0, r0, #1
   4c1a0:	ldrb	r3, [r0, #1]!
   4c1a4:	cmp	r3, #47	; 0x2f
   4c1a8:	beq	4c1a0 <__assert_fail@plt+0x396f0>
   4c1ac:	mov	r2, #0
   4c1b0:	mov	r1, r0
   4c1b4:	uxtb	r3, r3
   4c1b8:	cmp	r3, #47	; 0x2f
   4c1bc:	bne	4c1d4 <__assert_fail@plt+0x39724>
   4c1c0:	ldrb	r3, [r1, #1]!
   4c1c4:	mov	r2, #1
   4c1c8:	uxtb	r3, r3
   4c1cc:	cmp	r3, #47	; 0x2f
   4c1d0:	beq	4c1c0 <__assert_fail@plt+0x39710>
   4c1d4:	cmp	r3, #0
   4c1d8:	bxeq	lr
   4c1dc:	tst	r2, #1
   4c1e0:	mov	r2, #0
   4c1e4:	movne	r0, r1
   4c1e8:	ldrb	r3, [r1, #1]!
   4c1ec:	uxtb	r3, r3
   4c1f0:	cmp	r3, #47	; 0x2f
   4c1f4:	bne	4c1d4 <__assert_fail@plt+0x39724>
   4c1f8:	b	4c1c0 <__assert_fail@plt+0x39710>
   4c1fc:	push	{r4, sl, fp, lr}
   4c200:	add	fp, sp, #8
   4c204:	mov	r4, r0
   4c208:	bl	127bc <strlen@plt>
   4c20c:	mov	r1, r0
   4c210:	sub	r2, r4, #1
   4c214:	mov	r0, r1
   4c218:	cmp	r1, #2
   4c21c:	bcc	4c230 <__assert_fail@plt+0x39780>
   4c220:	ldrb	r3, [r2, r0]
   4c224:	sub	r1, r0, #1
   4c228:	cmp	r3, #47	; 0x2f
   4c22c:	beq	4c214 <__assert_fail@plt+0x39764>
   4c230:	pop	{r4, sl, fp, pc}
   4c234:	push	{r4, r5, r6, sl, fp, lr}
   4c238:	add	fp, sp, #16
   4c23c:	mov	r4, r0
   4c240:	bl	12678 <__fpending@plt>
   4c244:	mov	r5, r0
   4c248:	mov	r0, r4
   4c24c:	bl	124a4 <ferror@plt>
   4c250:	mov	r6, r0
   4c254:	mov	r0, r4
   4c258:	bl	128b8 <fclose@plt>
   4c25c:	cmp	r6, #0
   4c260:	beq	4c284 <__assert_fail@plt+0x397d4>
   4c264:	mvn	r4, #0
   4c268:	cmp	r0, #0
   4c26c:	bne	4c2b0 <__assert_fail@plt+0x39800>
   4c270:	bl	12804 <__errno_location@plt>
   4c274:	mov	r1, #0
   4c278:	str	r1, [r0]
   4c27c:	mov	r0, r4
   4c280:	pop	{r4, r5, r6, sl, fp, pc}
   4c284:	cmp	r0, #0
   4c288:	mov	r4, r0
   4c28c:	mvnne	r4, #0
   4c290:	cmp	r5, #0
   4c294:	bne	4c2b0 <__assert_fail@plt+0x39800>
   4c298:	cmp	r0, #0
   4c29c:	beq	4c2b0 <__assert_fail@plt+0x39800>
   4c2a0:	bl	12804 <__errno_location@plt>
   4c2a4:	ldr	r0, [r0]
   4c2a8:	subs	r4, r0, #9
   4c2ac:	mvnne	r4, #0
   4c2b0:	mov	r0, r4
   4c2b4:	pop	{r4, r5, r6, sl, fp, pc}
   4c2b8:	movw	r2, #62998	; 0xf616
   4c2bc:	mov	r1, #0
   4c2c0:	movt	r2, #149	; 0x95
   4c2c4:	str	r1, [r0, #16]
   4c2c8:	str	r1, [r0, #20]
   4c2cc:	str	r2, [r0, #24]
   4c2d0:	bx	lr
   4c2d4:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   4c2d8:	add	fp, sp, #24
   4c2dc:	ldr	r2, [r0, #24]
   4c2e0:	movw	r3, #62998	; 0xf616
   4c2e4:	movt	r3, #149	; 0x95
   4c2e8:	cmp	r2, r3
   4c2ec:	bne	4c388 <__assert_fail@plt+0x398d8>
   4c2f0:	add	r3, r0, #16
   4c2f4:	add	ip, r0, #8
   4c2f8:	ldrd	r4, [r3]
   4c2fc:	orrs	r2, r4, r5
   4c300:	beq	4c33c <__assert_fail@plt+0x3988c>
   4c304:	ldr	r6, [r1, #96]	; 0x60
   4c308:	ldr	r9, [r1, #100]	; 0x64
   4c30c:	ldm	r0, {r2, r7}
   4c310:	eor	r7, r9, r7
   4c314:	eor	r2, r6, r2
   4c318:	orrs	r2, r2, r7
   4c31c:	bne	4c33c <__assert_fail@plt+0x3988c>
   4c320:	ldm	ip, {r2, r7}
   4c324:	ldm	r1, {r6, r9}
   4c328:	eor	r7, r9, r7
   4c32c:	eor	r2, r6, r2
   4c330:	orrs	r2, r2, r7
   4c334:	mov	r2, #1
   4c338:	beq	4c374 <__assert_fail@plt+0x398c4>
   4c33c:	adds	r6, r4, #1
   4c340:	adc	r7, r5, #0
   4c344:	and	r2, r6, r4
   4c348:	strd	r6, [r3]
   4c34c:	and	r3, r7, r5
   4c350:	orrs	r2, r2, r3
   4c354:	mov	r2, #0
   4c358:	bne	4c374 <__assert_fail@plt+0x398c4>
   4c35c:	orrs	r3, r6, r7
   4c360:	beq	4c37c <__assert_fail@plt+0x398cc>
   4c364:	ldrd	r4, [r1]
   4c368:	strd	r4, [ip]
   4c36c:	ldrd	r4, [r1, #96]	; 0x60
   4c370:	strd	r4, [r0]
   4c374:	mov	r0, r2
   4c378:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   4c37c:	mov	r2, #1
   4c380:	mov	r0, r2
   4c384:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   4c388:	movw	r0, #12915	; 0x3273
   4c38c:	movw	r1, #12939	; 0x328b
   4c390:	movw	r3, #12953	; 0x3299
   4c394:	mov	r2, #60	; 0x3c
   4c398:	movt	r0, #5
   4c39c:	movt	r1, #5
   4c3a0:	movt	r3, #5
   4c3a4:	bl	12ab0 <__assert_fail@plt>
   4c3a8:	push	{r4, r5, r6, r7, fp, lr}
   4c3ac:	add	fp, sp, #16
   4c3b0:	mov	r4, r0
   4c3b4:	ldr	r0, [r0, #4]
   4c3b8:	mov	r5, r1
   4c3bc:	cmp	r0, r1
   4c3c0:	bcs	4c3f4 <__assert_fail@plt+0x39944>
   4c3c4:	mov	r6, r3
   4c3c8:	cmp	r3, #0
   4c3cc:	beq	4c400 <__assert_fail@plt+0x39950>
   4c3d0:	mvn	r0, #0
   4c3d4:	udiv	r0, r0, r6
   4c3d8:	cmp	r0, r5
   4c3dc:	bcs	4c400 <__assert_fail@plt+0x39950>
   4c3e0:	bl	12804 <__errno_location@plt>
   4c3e4:	mov	r1, #12
   4c3e8:	str	r1, [r0]
   4c3ec:	mov	r0, #0
   4c3f0:	pop	{r4, r5, r6, r7, fp, pc}
   4c3f4:	mov	r0, #1
   4c3f8:	str	r5, [r4]
   4c3fc:	pop	{r4, r5, r6, r7, fp, pc}
   4c400:	ldr	r0, [r4, #8]
   4c404:	mul	r1, r6, r5
   4c408:	cmp	r0, r2
   4c40c:	beq	4c424 <__assert_fail@plt+0x39974>
   4c410:	bl	36110 <__assert_fail@plt+0x23660>
   4c414:	mov	r7, r0
   4c418:	cmp	r0, #0
   4c41c:	bne	4c454 <__assert_fail@plt+0x399a4>
   4c420:	b	4c464 <__assert_fail@plt+0x399b4>
   4c424:	mov	r0, r1
   4c428:	bl	35350 <__assert_fail@plt+0x228a0>
   4c42c:	cmp	r0, #0
   4c430:	beq	4c464 <__assert_fail@plt+0x399b4>
   4c434:	ldr	r1, [r4, #8]
   4c438:	mov	r7, r0
   4c43c:	cmp	r1, #0
   4c440:	beq	4c454 <__assert_fail@plt+0x399a4>
   4c444:	ldr	r0, [r4]
   4c448:	mul	r2, r0, r6
   4c44c:	mov	r0, r7
   4c450:	bl	124e0 <memcpy@plt>
   4c454:	mov	r0, #1
   4c458:	str	r5, [r4]
   4c45c:	stmib	r4, {r5, r7}
   4c460:	pop	{r4, r5, r6, r7, fp, pc}
   4c464:	mov	r0, #0
   4c468:	pop	{r4, r5, r6, r7, fp, pc}
   4c46c:	mov	r1, r0
   4c470:	mov	r0, #0
   4c474:	b	124c8 <clock_gettime@plt>
   4c478:	push	{fp, lr}
   4c47c:	mov	fp, sp
   4c480:	mov	r1, r0
   4c484:	mov	r0, #0
   4c488:	bl	124c8 <clock_gettime@plt>
   4c48c:	pop	{fp, pc}
   4c490:	push	{r4, sl, fp, lr}
   4c494:	add	fp, sp, #8
   4c498:	sub	sp, sp, #264	; 0x108
   4c49c:	add	r1, sp, #7
   4c4a0:	movw	r2, #257	; 0x101
   4c4a4:	bl	4c85c <__assert_fail@plt+0x39dac>
   4c4a8:	mov	r4, #0
   4c4ac:	cmp	r0, #0
   4c4b0:	bne	4c4f0 <__assert_fail@plt+0x39a40>
   4c4b4:	movw	r1, #54366	; 0xd45e
   4c4b8:	add	r0, sp, #7
   4c4bc:	mov	r2, #2
   4c4c0:	movt	r1, #4
   4c4c4:	bl	127a4 <bcmp@plt>
   4c4c8:	cmp	r0, #0
   4c4cc:	beq	4c4f0 <__assert_fail@plt+0x39a40>
   4c4d0:	movw	r1, #13020	; 0x32dc
   4c4d4:	add	r0, sp, #7
   4c4d8:	mov	r2, #6
   4c4dc:	movt	r1, #5
   4c4e0:	bl	127a4 <bcmp@plt>
   4c4e4:	cmp	r0, #0
   4c4e8:	mov	r4, r0
   4c4ec:	movwne	r4, #1
   4c4f0:	mov	r0, r4
   4c4f4:	sub	sp, fp, #8
   4c4f8:	pop	{r4, sl, fp, pc}
   4c4fc:	vdup.32	q8, r1
   4c500:	mov	r2, #0
   4c504:	str	r2, [r0, #20]
   4c508:	str	r2, [r0, #24]
   4c50c:	mov	r2, #1
   4c510:	strb	r2, [r0, #28]
   4c514:	vst1.32	{d16-d17}, [r0]!
   4c518:	str	r1, [r0]
   4c51c:	bx	lr
   4c520:	ldrb	r0, [r0, #28]
   4c524:	bx	lr
   4c528:	push	{fp, lr}
   4c52c:	mov	fp, sp
   4c530:	ldrb	r3, [r0, #28]
   4c534:	ldr	r2, [r0, #20]
   4c538:	eor	lr, r3, #1
   4c53c:	add	r2, r2, lr
   4c540:	and	r3, r2, #3
   4c544:	ldr	ip, [r0, r3, lsl #2]
   4c548:	str	r1, [r0, r3, lsl #2]
   4c54c:	str	r3, [r0, #20]
   4c550:	ldr	r1, [r0, #24]
   4c554:	cmp	r3, r1
   4c558:	addeq	r1, r2, lr
   4c55c:	andeq	r1, r1, #3
   4c560:	streq	r1, [r0, #24]
   4c564:	mov	r1, #0
   4c568:	strb	r1, [r0, #28]
   4c56c:	mov	r0, ip
   4c570:	pop	{fp, pc}
   4c574:	push	{fp, lr}
   4c578:	mov	fp, sp
   4c57c:	ldrb	r1, [r0, #28]
   4c580:	cmp	r1, #0
   4c584:	bne	4c5c0 <__assert_fail@plt+0x39b10>
   4c588:	ldr	r3, [r0, #20]
   4c58c:	ldr	r2, [r0, #16]
   4c590:	ldr	r1, [r0, r3, lsl #2]
   4c594:	str	r2, [r0, r3, lsl #2]
   4c598:	ldr	r2, [r0, #20]
   4c59c:	ldr	r3, [r0, #24]
   4c5a0:	cmp	r2, r3
   4c5a4:	moveq	r2, #1
   4c5a8:	strbeq	r2, [r0, #28]
   4c5ac:	subne	r2, r2, #1
   4c5b0:	andne	r2, r2, #3
   4c5b4:	strne	r2, [r0, #20]
   4c5b8:	mov	r0, r1
   4c5bc:	pop	{fp, pc}
   4c5c0:	bl	12a5c <abort@plt>
   4c5c4:	push	{fp, lr}
   4c5c8:	mov	fp, sp
   4c5cc:	mov	r0, #14
   4c5d0:	bl	1293c <nl_langinfo@plt>
   4c5d4:	movw	r1, #61103	; 0xeeaf
   4c5d8:	cmp	r0, #0
   4c5dc:	movt	r1, #4
   4c5e0:	movne	r1, r0
   4c5e4:	movw	r0, #13026	; 0x32e2
   4c5e8:	ldrb	r2, [r1]
   4c5ec:	movt	r0, #5
   4c5f0:	cmp	r2, #0
   4c5f4:	movne	r0, r1
   4c5f8:	pop	{fp, pc}
   4c5fc:	push	{r4, sl, fp, lr}
   4c600:	add	fp, sp, #8
   4c604:	mov	r4, #0
   4c608:	adds	r0, r0, #16
   4c60c:	adc	r1, r4, #0
   4c610:	rsb	r2, r1, #0
   4c614:	eors	r2, r2, r1
   4c618:	movwne	r2, #1
   4c61c:	cmp	r0, #0
   4c620:	bmi	4c640 <__assert_fail@plt+0x39b90>
   4c624:	cmp	r2, #0
   4c628:	asreq	r2, r0, #31
   4c62c:	eoreq	r3, r0, r0
   4c630:	andeq	r2, r2, #1
   4c634:	eoreq	r1, r1, r2
   4c638:	orrseq	r1, r3, r1
   4c63c:	beq	4c648 <__assert_fail@plt+0x39b98>
   4c640:	mov	r0, r4
   4c644:	pop	{r4, sl, fp, pc}
   4c648:	bl	126f0 <malloc@plt>
   4c64c:	cmp	r0, #0
   4c650:	addne	r4, r0, #8
   4c654:	movne	r1, #8
   4c658:	bfine	r4, r1, #0, #4
   4c65c:	subne	r0, r4, r0
   4c660:	strbne	r0, [r4, #-1]
   4c664:	mov	r0, r4
   4c668:	pop	{r4, sl, fp, pc}
   4c66c:	push	{fp, lr}
   4c670:	mov	fp, sp
   4c674:	tst	r0, #7
   4c678:	bne	4c694 <__assert_fail@plt+0x39be4>
   4c67c:	tst	r0, #8
   4c680:	popeq	{fp, pc}
   4c684:	ldrb	r1, [r0, #-1]
   4c688:	sub	r0, r0, r1
   4c68c:	pop	{fp, lr}
   4c690:	b	32910 <__assert_fail@plt+0x1fe60>
   4c694:	bl	12a5c <abort@plt>
   4c698:	push	{r4, sl, fp, lr}
   4c69c:	add	fp, sp, #8
   4c6a0:	mov	r4, r0
   4c6a4:	bl	1245c <wcwidth@plt>
   4c6a8:	cmn	r0, #1
   4c6ac:	popgt	{r4, sl, fp, pc}
   4c6b0:	mov	r0, r4
   4c6b4:	bl	125c4 <iswcntrl@plt>
   4c6b8:	clz	r0, r0
   4c6bc:	lsr	r0, r0, #5
   4c6c0:	pop	{r4, sl, fp, pc}
   4c6c4:	push	{r4, r5, r6, sl, fp, lr}
   4c6c8:	add	fp, sp, #16
   4c6cc:	mov	r4, r0
   4c6d0:	mov	r0, r1
   4c6d4:	mov	r5, r1
   4c6d8:	ldr	r1, [r0], #16
   4c6dc:	cmp	r1, r0
   4c6e0:	beq	4c6ec <__assert_fail@plt+0x39c3c>
   4c6e4:	mov	r6, r1
   4c6e8:	b	4c6fc <__assert_fail@plt+0x39c4c>
   4c6ec:	ldr	r2, [r5, #4]
   4c6f0:	add	r6, r4, #16
   4c6f4:	mov	r0, r6
   4c6f8:	bl	124e0 <memcpy@plt>
   4c6fc:	str	r6, [r4]
   4c700:	ldr	r0, [r5, #4]
   4c704:	str	r0, [r4, #4]
   4c708:	ldrb	r0, [r5, #8]
   4c70c:	strb	r0, [r4, #8]
   4c710:	cmp	r0, #0
   4c714:	ldrne	r0, [r5, #12]
   4c718:	strne	r0, [r4, #12]
   4c71c:	pop	{r4, r5, r6, sl, fp, pc}
   4c720:	movw	r2, #13032	; 0x32e8
   4c724:	ubfx	r1, r0, #5, #3
   4c728:	and	r0, r0, #31
   4c72c:	movt	r2, #5
   4c730:	ldr	r1, [r2, r1, lsl #2]
   4c734:	mov	r2, #1
   4c738:	and	r0, r1, r2, lsl r0
   4c73c:	cmp	r0, #0
   4c740:	movwne	r0, #1
   4c744:	bx	lr
   4c748:	push	{r4, r5, r6, sl, fp, lr}
   4c74c:	add	fp, sp, #16
   4c750:	sub	sp, sp, #56	; 0x38
   4c754:	mov	r5, r0
   4c758:	bl	12648 <__ctype_get_mb_cur_max@plt>
   4c75c:	cmp	r0, #2
   4c760:	bcc	4c7ec <__assert_fail@plt+0x39d3c>
   4c764:	mov	r4, #0
   4c768:	mov	r0, sp
   4c76c:	str	r4, [sp, #8]
   4c770:	str	r4, [sp, #4]
   4c774:	strb	r4, [sp, #12]
   4c778:	strb	r4, [sp]
   4c77c:	str	r5, [sp, #16]
   4c780:	bl	27984 <__assert_fail@plt+0x14ed4>
   4c784:	ldrb	r0, [sp, #24]
   4c788:	cmp	r0, #0
   4c78c:	beq	4c79c <__assert_fail@plt+0x39cec>
   4c790:	ldr	r0, [sp, #28]
   4c794:	cmp	r0, #0
   4c798:	beq	4c7e0 <__assert_fail@plt+0x39d30>
   4c79c:	mov	r6, #0
   4c7a0:	mov	r5, sp
   4c7a4:	mov	r4, #0
   4c7a8:	strb	r6, [sp, #12]
   4c7ac:	ldr	r0, [sp, #16]
   4c7b0:	ldr	r1, [sp, #20]
   4c7b4:	add	r0, r0, r1
   4c7b8:	str	r0, [sp, #16]
   4c7bc:	mov	r0, r5
   4c7c0:	bl	27984 <__assert_fail@plt+0x14ed4>
   4c7c4:	ldrb	r1, [sp, #24]
   4c7c8:	ldr	r0, [sp, #28]
   4c7cc:	add	r4, r4, #1
   4c7d0:	cmp	r1, #0
   4c7d4:	beq	4c7a8 <__assert_fail@plt+0x39cf8>
   4c7d8:	cmp	r0, #0
   4c7dc:	bne	4c7a8 <__assert_fail@plt+0x39cf8>
   4c7e0:	mov	r0, r4
   4c7e4:	sub	sp, fp, #16
   4c7e8:	pop	{r4, r5, r6, sl, fp, pc}
   4c7ec:	mov	r0, r5
   4c7f0:	sub	sp, fp, #16
   4c7f4:	pop	{r4, r5, r6, sl, fp, lr}
   4c7f8:	b	127bc <strlen@plt>
   4c7fc:	push	{r4, r5, r6, sl, fp, lr}
   4c800:	add	fp, sp, #16
   4c804:	orr	r2, r2, #18688	; 0x4900
   4c808:	mov	r4, r3
   4c80c:	orr	r2, r2, #524288	; 0x80000
   4c810:	bl	2821c <__assert_fail@plt+0x1576c>
   4c814:	mov	r5, r0
   4c818:	mov	r0, #0
   4c81c:	cmp	r5, #0
   4c820:	bmi	4c858 <__assert_fail@plt+0x39da8>
   4c824:	mov	r0, r5
   4c828:	bl	12984 <fdopendir@plt>
   4c82c:	cmp	r0, #0
   4c830:	beq	4c83c <__assert_fail@plt+0x39d8c>
   4c834:	str	r5, [r4]
   4c838:	pop	{r4, r5, r6, sl, fp, pc}
   4c83c:	bl	12804 <__errno_location@plt>
   4c840:	ldr	r6, [r0]
   4c844:	mov	r4, r0
   4c848:	mov	r0, r5
   4c84c:	bl	12a68 <close@plt>
   4c850:	mov	r0, #0
   4c854:	str	r6, [r4]
   4c858:	pop	{r4, r5, r6, sl, fp, pc}
   4c85c:	push	{r4, r5, r6, r7, fp, lr}
   4c860:	add	fp, sp, #16
   4c864:	mov	r4, r1
   4c868:	mov	r1, #0
   4c86c:	mov	r6, r2
   4c870:	bl	12900 <setlocale@plt>
   4c874:	cmp	r0, #0
   4c878:	beq	4c8a8 <__assert_fail@plt+0x39df8>
   4c87c:	mov	r7, r0
   4c880:	bl	127bc <strlen@plt>
   4c884:	cmp	r0, r6
   4c888:	bcs	4c8c4 <__assert_fail@plt+0x39e14>
   4c88c:	add	r2, r0, #1
   4c890:	mov	r0, r4
   4c894:	mov	r1, r7
   4c898:	bl	124e0 <memcpy@plt>
   4c89c:	mov	r5, #0
   4c8a0:	mov	r0, r5
   4c8a4:	pop	{r4, r5, r6, r7, fp, pc}
   4c8a8:	mov	r5, #22
   4c8ac:	cmp	r6, #0
   4c8b0:	beq	4c8ec <__assert_fail@plt+0x39e3c>
   4c8b4:	mov	r0, #0
   4c8b8:	strb	r0, [r4]
   4c8bc:	mov	r0, r5
   4c8c0:	pop	{r4, r5, r6, r7, fp, pc}
   4c8c4:	mov	r5, #34	; 0x22
   4c8c8:	cmp	r6, #0
   4c8cc:	beq	4c8ec <__assert_fail@plt+0x39e3c>
   4c8d0:	sub	r6, r6, #1
   4c8d4:	mov	r0, r4
   4c8d8:	mov	r1, r7
   4c8dc:	mov	r2, r6
   4c8e0:	bl	124e0 <memcpy@plt>
   4c8e4:	mov	r0, #0
   4c8e8:	strb	r0, [r4, r6]
   4c8ec:	mov	r0, r5
   4c8f0:	pop	{r4, r5, r6, r7, fp, pc}
   4c8f4:	mov	r1, #0
   4c8f8:	b	12900 <setlocale@plt>
   4c8fc:	eor	r1, r1, #-2147483648	; 0x80000000
   4c900:	b	4c908 <__assert_fail@plt+0x39e58>
   4c904:	eor	r3, r3, #-2147483648	; 0x80000000
   4c908:	push	{r4, r5, lr}
   4c90c:	lsl	r4, r1, #1
   4c910:	lsl	r5, r3, #1
   4c914:	teq	r4, r5
   4c918:	teqeq	r0, r2
   4c91c:	orrsne	ip, r4, r0
   4c920:	orrsne	ip, r5, r2
   4c924:	mvnsne	ip, r4, asr #21
   4c928:	mvnsne	ip, r5, asr #21
   4c92c:	beq	4cb18 <__assert_fail@plt+0x3a068>
   4c930:	lsr	r4, r4, #21
   4c934:	rsbs	r5, r4, r5, lsr #21
   4c938:	rsblt	r5, r5, #0
   4c93c:	ble	4c95c <__assert_fail@plt+0x39eac>
   4c940:	add	r4, r4, r5
   4c944:	eor	r2, r0, r2
   4c948:	eor	r3, r1, r3
   4c94c:	eor	r0, r2, r0
   4c950:	eor	r1, r3, r1
   4c954:	eor	r2, r0, r2
   4c958:	eor	r3, r1, r3
   4c95c:	cmp	r5, #54	; 0x36
   4c960:	pophi	{r4, r5, pc}
   4c964:	tst	r1, #-2147483648	; 0x80000000
   4c968:	lsl	r1, r1, #12
   4c96c:	mov	ip, #1048576	; 0x100000
   4c970:	orr	r1, ip, r1, lsr #12
   4c974:	beq	4c980 <__assert_fail@plt+0x39ed0>
   4c978:	rsbs	r0, r0, #0
   4c97c:	rsc	r1, r1, #0
   4c980:	tst	r3, #-2147483648	; 0x80000000
   4c984:	lsl	r3, r3, #12
   4c988:	orr	r3, ip, r3, lsr #12
   4c98c:	beq	4c998 <__assert_fail@plt+0x39ee8>
   4c990:	rsbs	r2, r2, #0
   4c994:	rsc	r3, r3, #0
   4c998:	teq	r4, r5
   4c99c:	beq	4cb00 <__assert_fail@plt+0x3a050>
   4c9a0:	sub	r4, r4, #1
   4c9a4:	rsbs	lr, r5, #32
   4c9a8:	blt	4c9c4 <__assert_fail@plt+0x39f14>
   4c9ac:	lsl	ip, r2, lr
   4c9b0:	adds	r0, r0, r2, lsr r5
   4c9b4:	adc	r1, r1, #0
   4c9b8:	adds	r0, r0, r3, lsl lr
   4c9bc:	adcs	r1, r1, r3, asr r5
   4c9c0:	b	4c9e0 <__assert_fail@plt+0x39f30>
   4c9c4:	sub	r5, r5, #32
   4c9c8:	add	lr, lr, #32
   4c9cc:	cmp	r2, #1
   4c9d0:	lsl	ip, r3, lr
   4c9d4:	orrcs	ip, ip, #2
   4c9d8:	adds	r0, r0, r3, asr r5
   4c9dc:	adcs	r1, r1, r3, asr #31
   4c9e0:	and	r5, r1, #-2147483648	; 0x80000000
   4c9e4:	bpl	4c9f4 <__assert_fail@plt+0x39f44>
   4c9e8:	rsbs	ip, ip, #0
   4c9ec:	rscs	r0, r0, #0
   4c9f0:	rsc	r1, r1, #0
   4c9f4:	cmp	r1, #1048576	; 0x100000
   4c9f8:	bcc	4ca38 <__assert_fail@plt+0x39f88>
   4c9fc:	cmp	r1, #2097152	; 0x200000
   4ca00:	bcc	4ca20 <__assert_fail@plt+0x39f70>
   4ca04:	lsrs	r1, r1, #1
   4ca08:	rrxs	r0, r0
   4ca0c:	rrx	ip, ip
   4ca10:	add	r4, r4, #1
   4ca14:	lsl	r2, r4, #21
   4ca18:	cmn	r2, #4194304	; 0x400000
   4ca1c:	bcs	4cb78 <__assert_fail@plt+0x3a0c8>
   4ca20:	cmp	ip, #-2147483648	; 0x80000000
   4ca24:	lsrseq	ip, r0, #1
   4ca28:	adcs	r0, r0, #0
   4ca2c:	adc	r1, r1, r4, lsl #20
   4ca30:	orr	r1, r1, r5
   4ca34:	pop	{r4, r5, pc}
   4ca38:	lsls	ip, ip, #1
   4ca3c:	adcs	r0, r0, r0
   4ca40:	adc	r1, r1, r1
   4ca44:	tst	r1, #1048576	; 0x100000
   4ca48:	sub	r4, r4, #1
   4ca4c:	bne	4ca20 <__assert_fail@plt+0x39f70>
   4ca50:	teq	r1, #0
   4ca54:	moveq	r1, r0
   4ca58:	moveq	r0, #0
   4ca5c:	clz	r3, r1
   4ca60:	addeq	r3, r3, #32
   4ca64:	sub	r3, r3, #11
   4ca68:	subs	r2, r3, #32
   4ca6c:	bge	4ca90 <__assert_fail@plt+0x39fe0>
   4ca70:	adds	r2, r2, #12
   4ca74:	ble	4ca8c <__assert_fail@plt+0x39fdc>
   4ca78:	add	ip, r2, #20
   4ca7c:	rsb	r2, r2, #12
   4ca80:	lsl	r0, r1, ip
   4ca84:	lsr	r1, r1, r2
   4ca88:	b	4caa0 <__assert_fail@plt+0x39ff0>
   4ca8c:	add	r2, r2, #20
   4ca90:	rsble	ip, r2, #32
   4ca94:	lsl	r1, r1, r2
   4ca98:	orrle	r1, r1, r0, lsr ip
   4ca9c:	lslle	r0, r0, r2
   4caa0:	subs	r4, r4, r3
   4caa4:	addge	r1, r1, r4, lsl #20
   4caa8:	orrge	r1, r1, r5
   4caac:	popge	{r4, r5, pc}
   4cab0:	mvn	r4, r4
   4cab4:	subs	r4, r4, #31
   4cab8:	bge	4caf4 <__assert_fail@plt+0x3a044>
   4cabc:	adds	r4, r4, #12
   4cac0:	bgt	4cadc <__assert_fail@plt+0x3a02c>
   4cac4:	add	r4, r4, #20
   4cac8:	rsb	r2, r4, #32
   4cacc:	lsr	r0, r0, r4
   4cad0:	orr	r0, r0, r1, lsl r2
   4cad4:	orr	r1, r5, r1, lsr r4
   4cad8:	pop	{r4, r5, pc}
   4cadc:	rsb	r4, r4, #12
   4cae0:	rsb	r2, r4, #32
   4cae4:	lsr	r0, r0, r2
   4cae8:	orr	r0, r0, r1, lsl r4
   4caec:	mov	r1, r5
   4caf0:	pop	{r4, r5, pc}
   4caf4:	lsr	r0, r1, r4
   4caf8:	mov	r1, r5
   4cafc:	pop	{r4, r5, pc}
   4cb00:	teq	r4, #0
   4cb04:	eor	r3, r3, #1048576	; 0x100000
   4cb08:	eoreq	r1, r1, #1048576	; 0x100000
   4cb0c:	addeq	r4, r4, #1
   4cb10:	subne	r5, r5, #1
   4cb14:	b	4c9a0 <__assert_fail@plt+0x39ef0>
   4cb18:	mvns	ip, r4, asr #21
   4cb1c:	mvnsne	ip, r5, asr #21
   4cb20:	beq	4cb88 <__assert_fail@plt+0x3a0d8>
   4cb24:	teq	r4, r5
   4cb28:	teqeq	r0, r2
   4cb2c:	beq	4cb40 <__assert_fail@plt+0x3a090>
   4cb30:	orrs	ip, r4, r0
   4cb34:	moveq	r1, r3
   4cb38:	moveq	r0, r2
   4cb3c:	pop	{r4, r5, pc}
   4cb40:	teq	r1, r3
   4cb44:	movne	r1, #0
   4cb48:	movne	r0, #0
   4cb4c:	popne	{r4, r5, pc}
   4cb50:	lsrs	ip, r4, #21
   4cb54:	bne	4cb68 <__assert_fail@plt+0x3a0b8>
   4cb58:	lsls	r0, r0, #1
   4cb5c:	adcs	r1, r1, r1
   4cb60:	orrcs	r1, r1, #-2147483648	; 0x80000000
   4cb64:	pop	{r4, r5, pc}
   4cb68:	adds	r4, r4, #4194304	; 0x400000
   4cb6c:	addcc	r1, r1, #1048576	; 0x100000
   4cb70:	popcc	{r4, r5, pc}
   4cb74:	and	r5, r1, #-2147483648	; 0x80000000
   4cb78:	orr	r1, r5, #2130706432	; 0x7f000000
   4cb7c:	orr	r1, r1, #15728640	; 0xf00000
   4cb80:	mov	r0, #0
   4cb84:	pop	{r4, r5, pc}
   4cb88:	mvns	ip, r4, asr #21
   4cb8c:	movne	r1, r3
   4cb90:	movne	r0, r2
   4cb94:	mvnseq	ip, r5, asr #21
   4cb98:	movne	r3, r1
   4cb9c:	movne	r2, r0
   4cba0:	orrs	r4, r0, r1, lsl #12
   4cba4:	orrseq	r5, r2, r3, lsl #12
   4cba8:	teqeq	r1, r3
   4cbac:	orrne	r1, r1, #524288	; 0x80000
   4cbb0:	pop	{r4, r5, pc}
   4cbb4:	teq	r0, #0
   4cbb8:	moveq	r1, #0
   4cbbc:	bxeq	lr
   4cbc0:	push	{r4, r5, lr}
   4cbc4:	mov	r4, #1024	; 0x400
   4cbc8:	add	r4, r4, #50	; 0x32
   4cbcc:	mov	r5, #0
   4cbd0:	mov	r1, #0
   4cbd4:	b	4ca50 <__assert_fail@plt+0x39fa0>
   4cbd8:	teq	r0, #0
   4cbdc:	moveq	r1, #0
   4cbe0:	bxeq	lr
   4cbe4:	push	{r4, r5, lr}
   4cbe8:	mov	r4, #1024	; 0x400
   4cbec:	add	r4, r4, #50	; 0x32
   4cbf0:	ands	r5, r0, #-2147483648	; 0x80000000
   4cbf4:	rsbmi	r0, r0, #0
   4cbf8:	mov	r1, #0
   4cbfc:	b	4ca50 <__assert_fail@plt+0x39fa0>
   4cc00:	lsls	r2, r0, #1
   4cc04:	asr	r1, r2, #3
   4cc08:	rrx	r1, r1
   4cc0c:	lsl	r0, r2, #28
   4cc10:	andsne	r3, r2, #-16777216	; 0xff000000
   4cc14:	teqne	r3, #-16777216	; 0xff000000
   4cc18:	eorne	r1, r1, #939524096	; 0x38000000
   4cc1c:	bxne	lr
   4cc20:	bics	r2, r2, #-16777216	; 0xff000000
   4cc24:	bxeq	lr
   4cc28:	teq	r3, #-16777216	; 0xff000000
   4cc2c:	orreq	r1, r1, #524288	; 0x80000
   4cc30:	bxeq	lr
   4cc34:	push	{r4, r5, lr}
   4cc38:	mov	r4, #896	; 0x380
   4cc3c:	and	r5, r1, #-2147483648	; 0x80000000
   4cc40:	bic	r1, r1, #-2147483648	; 0x80000000
   4cc44:	b	4ca50 <__assert_fail@plt+0x39fa0>
   4cc48:	orrs	r2, r0, r1
   4cc4c:	bxeq	lr
   4cc50:	push	{r4, r5, lr}
   4cc54:	mov	r5, #0
   4cc58:	b	4cc78 <__assert_fail@plt+0x3a1c8>
   4cc5c:	orrs	r2, r0, r1
   4cc60:	bxeq	lr
   4cc64:	push	{r4, r5, lr}
   4cc68:	ands	r5, r1, #-2147483648	; 0x80000000
   4cc6c:	bpl	4cc78 <__assert_fail@plt+0x3a1c8>
   4cc70:	rsbs	r0, r0, #0
   4cc74:	rsc	r1, r1, #0
   4cc78:	mov	r4, #1024	; 0x400
   4cc7c:	add	r4, r4, #50	; 0x32
   4cc80:	lsrs	ip, r1, #22
   4cc84:	beq	4c9f4 <__assert_fail@plt+0x39f44>
   4cc88:	mov	r2, #3
   4cc8c:	lsrs	ip, ip, #3
   4cc90:	addne	r2, r2, #3
   4cc94:	lsrs	ip, ip, #3
   4cc98:	addne	r2, r2, #3
   4cc9c:	add	r2, r2, ip, lsr #3
   4cca0:	rsb	r3, r2, #32
   4cca4:	lsl	ip, r0, r3
   4cca8:	lsr	r0, r0, r2
   4ccac:	orr	r0, r0, r1, lsl r3
   4ccb0:	lsr	r1, r1, r2
   4ccb4:	add	r4, r4, r2
   4ccb8:	b	4c9f4 <__assert_fail@plt+0x39f44>
   4ccbc:	cmp	r3, #0
   4ccc0:	cmpeq	r2, #0
   4ccc4:	bne	4cce8 <__assert_fail@plt+0x3a238>
   4ccc8:	cmp	r1, #0
   4cccc:	movlt	r1, #-2147483648	; 0x80000000
   4ccd0:	movlt	r0, #0
   4ccd4:	blt	4cce4 <__assert_fail@plt+0x3a234>
   4ccd8:	cmpeq	r0, #0
   4ccdc:	mvnne	r1, #-2147483648	; 0x80000000
   4cce0:	mvnne	r0, #0
   4cce4:	b	4cdcc <__assert_fail@plt+0x3a31c>
   4cce8:	sub	sp, sp, #8
   4ccec:	push	{sp, lr}
   4ccf0:	cmp	r1, #0
   4ccf4:	blt	4cd14 <__assert_fail@plt+0x3a264>
   4ccf8:	cmp	r3, #0
   4ccfc:	blt	4cd48 <__assert_fail@plt+0x3a298>
   4cd00:	bl	4ce20 <__assert_fail@plt+0x3a370>
   4cd04:	ldr	lr, [sp, #4]
   4cd08:	add	sp, sp, #8
   4cd0c:	pop	{r2, r3}
   4cd10:	bx	lr
   4cd14:	rsbs	r0, r0, #0
   4cd18:	sbc	r1, r1, r1, lsl #1
   4cd1c:	cmp	r3, #0
   4cd20:	blt	4cd6c <__assert_fail@plt+0x3a2bc>
   4cd24:	bl	4ce20 <__assert_fail@plt+0x3a370>
   4cd28:	ldr	lr, [sp, #4]
   4cd2c:	add	sp, sp, #8
   4cd30:	pop	{r2, r3}
   4cd34:	rsbs	r0, r0, #0
   4cd38:	sbc	r1, r1, r1, lsl #1
   4cd3c:	rsbs	r2, r2, #0
   4cd40:	sbc	r3, r3, r3, lsl #1
   4cd44:	bx	lr
   4cd48:	rsbs	r2, r2, #0
   4cd4c:	sbc	r3, r3, r3, lsl #1
   4cd50:	bl	4ce20 <__assert_fail@plt+0x3a370>
   4cd54:	ldr	lr, [sp, #4]
   4cd58:	add	sp, sp, #8
   4cd5c:	pop	{r2, r3}
   4cd60:	rsbs	r0, r0, #0
   4cd64:	sbc	r1, r1, r1, lsl #1
   4cd68:	bx	lr
   4cd6c:	rsbs	r2, r2, #0
   4cd70:	sbc	r3, r3, r3, lsl #1
   4cd74:	bl	4ce20 <__assert_fail@plt+0x3a370>
   4cd78:	ldr	lr, [sp, #4]
   4cd7c:	add	sp, sp, #8
   4cd80:	pop	{r2, r3}
   4cd84:	rsbs	r2, r2, #0
   4cd88:	sbc	r3, r3, r3, lsl #1
   4cd8c:	bx	lr
   4cd90:	cmp	r3, #0
   4cd94:	cmpeq	r2, #0
   4cd98:	bne	4cdb0 <__assert_fail@plt+0x3a300>
   4cd9c:	cmp	r1, #0
   4cda0:	cmpeq	r0, #0
   4cda4:	mvnne	r1, #0
   4cda8:	mvnne	r0, #0
   4cdac:	b	4cdcc <__assert_fail@plt+0x3a31c>
   4cdb0:	sub	sp, sp, #8
   4cdb4:	push	{sp, lr}
   4cdb8:	bl	4ce20 <__assert_fail@plt+0x3a370>
   4cdbc:	ldr	lr, [sp, #4]
   4cdc0:	add	sp, sp, #8
   4cdc4:	pop	{r2, r3}
   4cdc8:	bx	lr
   4cdcc:	push	{r1, lr}
   4cdd0:	mov	r0, #8
   4cdd4:	bl	123a8 <raise@plt>
   4cdd8:	pop	{r1, pc}
   4cddc:	andeq	r0, r0, r0
   4cde0:	vmov	d6, r0, r1
   4cde4:	vldr	d7, [pc, #36]	; 4ce10 <__assert_fail@plt+0x3a360>
   4cde8:	vldr	d5, [pc, #40]	; 4ce18 <__assert_fail@plt+0x3a368>
   4cdec:	vmul.f64	d7, d6, d7
   4cdf0:	vcvt.u32.f64	s14, d7
   4cdf4:	vcvt.f64.u32	d4, s14
   4cdf8:	vmov	r1, s14
   4cdfc:	vmls.f64	d6, d4, d5
   4ce00:	vcvt.u32.f64	s15, d6
   4ce04:	vmov	r0, s15
   4ce08:	bx	lr
   4ce0c:	nop			; (mov r0, r0)
   4ce10:	andeq	r0, r0, r0
   4ce14:	ldclcc	0, cr0, [r0]
   4ce18:	andeq	r0, r0, r0
   4ce1c:	mvnsmi	r0, r0
   4ce20:	cmp	r1, r3
   4ce24:	cmpeq	r0, r2
   4ce28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4ce2c:	mov	r4, r0
   4ce30:	movcc	r0, #0
   4ce34:	mov	r5, r1
   4ce38:	ldr	lr, [sp, #36]	; 0x24
   4ce3c:	movcc	r1, r0
   4ce40:	bcc	4cf3c <__assert_fail@plt+0x3a48c>
   4ce44:	cmp	r3, #0
   4ce48:	clzeq	ip, r2
   4ce4c:	clzne	ip, r3
   4ce50:	addeq	ip, ip, #32
   4ce54:	cmp	r5, #0
   4ce58:	clzeq	r1, r4
   4ce5c:	addeq	r1, r1, #32
   4ce60:	clzne	r1, r5
   4ce64:	sub	ip, ip, r1
   4ce68:	sub	sl, ip, #32
   4ce6c:	lsl	r9, r3, ip
   4ce70:	rsb	fp, ip, #32
   4ce74:	orr	r9, r9, r2, lsl sl
   4ce78:	orr	r9, r9, r2, lsr fp
   4ce7c:	lsl	r8, r2, ip
   4ce80:	cmp	r5, r9
   4ce84:	cmpeq	r4, r8
   4ce88:	movcc	r0, #0
   4ce8c:	movcc	r1, r0
   4ce90:	bcc	4ceac <__assert_fail@plt+0x3a3fc>
   4ce94:	mov	r0, #1
   4ce98:	subs	r4, r4, r8
   4ce9c:	lsl	r1, r0, sl
   4cea0:	orr	r1, r1, r0, lsr fp
   4cea4:	lsl	r0, r0, ip
   4cea8:	sbc	r5, r5, r9
   4ceac:	cmp	ip, #0
   4ceb0:	beq	4cf3c <__assert_fail@plt+0x3a48c>
   4ceb4:	lsr	r6, r8, #1
   4ceb8:	orr	r6, r6, r9, lsl #31
   4cebc:	lsr	r7, r9, #1
   4cec0:	mov	r2, ip
   4cec4:	b	4cee8 <__assert_fail@plt+0x3a438>
   4cec8:	subs	r3, r4, r6
   4cecc:	sbc	r8, r5, r7
   4ced0:	adds	r3, r3, r3
   4ced4:	adc	r8, r8, r8
   4ced8:	adds	r4, r3, #1
   4cedc:	adc	r5, r8, #0
   4cee0:	subs	r2, r2, #1
   4cee4:	beq	4cf04 <__assert_fail@plt+0x3a454>
   4cee8:	cmp	r5, r7
   4ceec:	cmpeq	r4, r6
   4cef0:	bcs	4cec8 <__assert_fail@plt+0x3a418>
   4cef4:	adds	r4, r4, r4
   4cef8:	adc	r5, r5, r5
   4cefc:	subs	r2, r2, #1
   4cf00:	bne	4cee8 <__assert_fail@plt+0x3a438>
   4cf04:	lsr	r3, r4, ip
   4cf08:	orr	r3, r3, r5, lsl fp
   4cf0c:	lsr	r2, r5, ip
   4cf10:	orr	r3, r3, r5, lsr sl
   4cf14:	adds	r0, r0, r4
   4cf18:	mov	r4, r3
   4cf1c:	lsl	r3, r2, ip
   4cf20:	orr	r3, r3, r4, lsl sl
   4cf24:	lsl	ip, r4, ip
   4cf28:	orr	r3, r3, r4, lsr fp
   4cf2c:	adc	r1, r1, r5
   4cf30:	subs	r0, r0, ip
   4cf34:	mov	r5, r2
   4cf38:	sbc	r1, r1, r3
   4cf3c:	cmp	lr, #0
   4cf40:	strdne	r4, [lr]
   4cf44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4cf48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   4cf4c:	mov	r7, r0
   4cf50:	ldr	r6, [pc, #72]	; 4cfa0 <__assert_fail@plt+0x3a4f0>
   4cf54:	ldr	r5, [pc, #72]	; 4cfa4 <__assert_fail@plt+0x3a4f4>
   4cf58:	add	r6, pc, r6
   4cf5c:	add	r5, pc, r5
   4cf60:	sub	r6, r6, r5
   4cf64:	mov	r8, r1
   4cf68:	mov	r9, r2
   4cf6c:	bl	12340 <pthread_mutex_unlock@plt-0x20>
   4cf70:	asrs	r6, r6, #2
   4cf74:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   4cf78:	mov	r4, #0
   4cf7c:	add	r4, r4, #1
   4cf80:	ldr	r3, [r5], #4
   4cf84:	mov	r2, r9
   4cf88:	mov	r1, r8
   4cf8c:	mov	r0, r7
   4cf90:	blx	r3
   4cf94:	cmp	r6, r4
   4cf98:	bne	4cf7c <__assert_fail@plt+0x3a4cc>
   4cf9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   4cfa0:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   4cfa4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   4cfa8:	bx	lr
   4cfac:	ldr	r3, [pc, #12]	; 4cfc0 <__assert_fail@plt+0x3a510>
   4cfb0:	mov	r1, #0
   4cfb4:	add	r3, pc, r3
   4cfb8:	ldr	r2, [r3]
   4cfbc:	b	12828 <__cxa_atexit@plt>
   4cfc0:	ldrdeq	r7, [r1], -r0

Disassembly of section .fini:

0004cfc4 <.fini>:
   4cfc4:	push	{r3, lr}
   4cfc8:	pop	{r3, pc}
