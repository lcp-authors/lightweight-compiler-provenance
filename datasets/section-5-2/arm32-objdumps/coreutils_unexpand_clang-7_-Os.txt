
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010de8 <.init>:
   10de8:	push	{r3, lr}
   10dec:	bl	110a8 <__assert_fail@plt+0x48>
   10df0:	pop	{r3, pc}

Disassembly of section .plt:

00010df4 <calloc@plt-0x14>:
   10df4:	push	{lr}		; (str lr, [sp, #-4]!)
   10df8:	ldr	lr, [pc, #4]	; 10e04 <calloc@plt-0x4>
   10dfc:	add	lr, pc, lr
   10e00:	ldr	pc, [lr, #8]!
   10e04:	strdeq	r5, [r1], -ip

00010e08 <calloc@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #508]!	; 0x1fc

00010e14 <fputs_unlocked@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #500]!	; 0x1f4

00010e20 <raise@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #492]!	; 0x1ec

00010e2c <strcmp@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #484]!	; 0x1e4

00010e38 <posix_fadvise64@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #476]!	; 0x1dc

00010e44 <fflush@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #468]!	; 0x1d4

00010e50 <free@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #460]!	; 0x1cc

00010e5c <_exit@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #452]!	; 0x1c4

00010e68 <memcpy@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #444]!	; 0x1bc

00010e74 <mbsinit@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #436]!	; 0x1b4

00010e80 <fwrite_unlocked@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #428]!	; 0x1ac

00010e8c <memcmp@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #420]!	; 0x1a4

00010e98 <getc_unlocked@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #412]!	; 0x19c

00010ea4 <dcgettext@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #404]!	; 0x194

00010eb0 <realloc@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #396]!	; 0x18c

00010ebc <textdomain@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #388]!	; 0x184

00010ec8 <iswprint@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #86016	; 0x15000
   10ed0:	ldr	pc, [ip, #380]!	; 0x17c

00010ed4 <lseek64@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #372]!	; 0x174

00010ee0 <__ctype_get_mb_cur_max@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #364]!	; 0x16c

00010eec <__fpending@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #356]!	; 0x164

00010ef8 <ferror_unlocked@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #348]!	; 0x15c

00010f04 <mbrtowc@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #340]!	; 0x154

00010f10 <error@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #332]!	; 0x14c

00010f1c <malloc@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #324]!	; 0x144

00010f28 <__libc_start_main@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #316]!	; 0x13c

00010f34 <__freading@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #308]!	; 0x134

00010f40 <__gmon_start__@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #300]!	; 0x12c

00010f4c <getopt_long@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #292]!	; 0x124

00010f58 <__ctype_b_loc@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #284]!	; 0x11c

00010f64 <exit@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #276]!	; 0x114

00010f70 <strlen@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #268]!	; 0x10c

00010f7c <__errno_location@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #260]!	; 0x104

00010f88 <__cxa_atexit@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #252]!	; 0xfc

00010f94 <memset@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #244]!	; 0xf4

00010fa0 <__printf_chk@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #236]!	; 0xec

00010fac <fileno@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #228]!	; 0xe4

00010fb8 <__fprintf_chk@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #220]!	; 0xdc

00010fc4 <fclose@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #86016	; 0x15000
   10fcc:	ldr	pc, [ip, #212]!	; 0xd4

00010fd0 <fseeko64@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #86016	; 0x15000
   10fd8:	ldr	pc, [ip, #204]!	; 0xcc

00010fdc <setlocale@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #86016	; 0x15000
   10fe4:	ldr	pc, [ip, #196]!	; 0xc4

00010fe8 <strrchr@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #86016	; 0x15000
   10ff0:	ldr	pc, [ip, #188]!	; 0xbc

00010ff4 <nl_langinfo@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #86016	; 0x15000
   10ffc:	ldr	pc, [ip, #180]!	; 0xb4

00011000 <clearerr_unlocked@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #86016	; 0x15000
   11008:	ldr	pc, [ip, #172]!	; 0xac

0001100c <fopen64@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #86016	; 0x15000
   11014:	ldr	pc, [ip, #164]!	; 0xa4

00011018 <bindtextdomain@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #86016	; 0x15000
   11020:	ldr	pc, [ip, #156]!	; 0x9c

00011024 <fputs@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #86016	; 0x15000
   1102c:	ldr	pc, [ip, #148]!	; 0x94

00011030 <strncmp@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #86016	; 0x15000
   11038:	ldr	pc, [ip, #140]!	; 0x8c

0001103c <abort@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #86016	; 0x15000
   11044:	ldr	pc, [ip, #132]!	; 0x84

00011048 <putchar_unlocked@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #86016	; 0x15000
   11050:	ldr	pc, [ip, #124]!	; 0x7c

00011054 <strspn@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #86016	; 0x15000
   1105c:	ldr	pc, [ip, #116]!	; 0x74

00011060 <__assert_fail@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #86016	; 0x15000
   11068:	ldr	pc, [ip, #108]!	; 0x6c

Disassembly of section .text:

0001106c <.text>:
   1106c:	mov	fp, #0
   11070:	mov	lr, #0
   11074:	pop	{r1}		; (ldr r1, [sp], #4)
   11078:	mov	r2, sp
   1107c:	push	{r2}		; (str r2, [sp, #-4]!)
   11080:	push	{r0}		; (str r0, [sp, #-4]!)
   11084:	ldr	ip, [pc, #16]	; 1109c <__assert_fail@plt+0x3c>
   11088:	push	{ip}		; (str ip, [sp, #-4]!)
   1108c:	ldr	r0, [pc, #12]	; 110a0 <__assert_fail@plt+0x40>
   11090:	ldr	r3, [pc, #12]	; 110a4 <__assert_fail@plt+0x44>
   11094:	bl	10f28 <__libc_start_main@plt>
   11098:	bl	1103c <abort@plt>
   1109c:	andeq	r4, r1, ip, lsr #31
   110a0:	ldrdeq	r1, [r1], -r8
   110a4:	andeq	r4, r1, ip, asr #30
   110a8:	ldr	r3, [pc, #20]	; 110c4 <__assert_fail@plt+0x64>
   110ac:	ldr	r2, [pc, #20]	; 110c8 <__assert_fail@plt+0x68>
   110b0:	add	r3, pc, r3
   110b4:	ldr	r2, [r3, r2]
   110b8:	cmp	r2, #0
   110bc:	bxeq	lr
   110c0:	b	10f40 <__gmon_start__@plt>
   110c4:	andeq	r4, r1, r8, asr #30
   110c8:	ldrdeq	r0, [r0], -r8
   110cc:	ldr	r0, [pc, #24]	; 110ec <__assert_fail@plt+0x8c>
   110d0:	ldr	r3, [pc, #24]	; 110f0 <__assert_fail@plt+0x90>
   110d4:	cmp	r3, r0
   110d8:	bxeq	lr
   110dc:	ldr	r3, [pc, #16]	; 110f4 <__assert_fail@plt+0x94>
   110e0:	cmp	r3, #0
   110e4:	bxeq	lr
   110e8:	bx	r3
   110ec:	andeq	r6, r2, r8, lsr r1
   110f0:	andeq	r6, r2, r8, lsr r1
   110f4:	andeq	r0, r0, r0
   110f8:	ldr	r0, [pc, #36]	; 11124 <__assert_fail@plt+0xc4>
   110fc:	ldr	r1, [pc, #36]	; 11128 <__assert_fail@plt+0xc8>
   11100:	sub	r1, r1, r0
   11104:	asr	r1, r1, #2
   11108:	add	r1, r1, r1, lsr #31
   1110c:	asrs	r1, r1, #1
   11110:	bxeq	lr
   11114:	ldr	r3, [pc, #16]	; 1112c <__assert_fail@plt+0xcc>
   11118:	cmp	r3, #0
   1111c:	bxeq	lr
   11120:	bx	r3
   11124:	andeq	r6, r2, r8, lsr r1
   11128:	andeq	r6, r2, r8, lsr r1
   1112c:	andeq	r0, r0, r0
   11130:	push	{r4, lr}
   11134:	ldr	r4, [pc, #24]	; 11154 <__assert_fail@plt+0xf4>
   11138:	ldrb	r3, [r4]
   1113c:	cmp	r3, #0
   11140:	popne	{r4, pc}
   11144:	bl	110cc <__assert_fail@plt+0x6c>
   11148:	mov	r3, #1
   1114c:	strb	r3, [r4]
   11150:	pop	{r4, pc}
   11154:	andeq	r6, r2, ip, asr r1
   11158:	b	110f8 <__assert_fail@plt+0x98>
   1115c:	push	{fp, lr}
   11160:	mov	fp, sp
   11164:	sub	sp, sp, #56	; 0x38
   11168:	mov	r8, r0
   1116c:	cmp	r0, #0
   11170:	bne	11398 <__assert_fail@plt+0x338>
   11174:	movw	r1, #20475	; 0x4ffb
   11178:	mov	r0, #0
   1117c:	mov	r2, #5
   11180:	movt	r1, #1
   11184:	bl	10ea4 <dcgettext@plt>
   11188:	mov	r1, r0
   1118c:	movw	r0, #24996	; 0x61a4
   11190:	movt	r0, #2
   11194:	ldr	r2, [r0]
   11198:	mov	r0, #1
   1119c:	bl	10fa0 <__printf_chk@plt>
   111a0:	movw	r1, #20508	; 0x501c
   111a4:	mov	r0, #0
   111a8:	mov	r2, #5
   111ac:	movt	r1, #1
   111b0:	bl	10ea4 <dcgettext@plt>
   111b4:	movw	r9, #24916	; 0x6154
   111b8:	movt	r9, #2
   111bc:	ldr	r1, [r9]
   111c0:	bl	10e14 <fputs_unlocked@plt>
   111c4:	movw	r1, #21000	; 0x5208
   111c8:	mov	r0, #0
   111cc:	mov	r2, #5
   111d0:	movt	r1, #1
   111d4:	bl	10ea4 <dcgettext@plt>
   111d8:	ldr	r1, [r9]
   111dc:	bl	10e14 <fputs_unlocked@plt>
   111e0:	movw	r1, #21056	; 0x5240
   111e4:	mov	r0, #0
   111e8:	mov	r2, #5
   111ec:	movt	r1, #1
   111f0:	bl	10ea4 <dcgettext@plt>
   111f4:	ldr	r1, [r9]
   111f8:	bl	10e14 <fputs_unlocked@plt>
   111fc:	movw	r1, #20574	; 0x505e
   11200:	mov	r0, #0
   11204:	mov	r2, #5
   11208:	movt	r1, #1
   1120c:	bl	10ea4 <dcgettext@plt>
   11210:	ldr	r1, [r9]
   11214:	bl	10e14 <fputs_unlocked@plt>
   11218:	bl	122d4 <__assert_fail@plt+0x1274>
   1121c:	movw	r1, #20795	; 0x513b
   11220:	mov	r0, #0
   11224:	mov	r2, #5
   11228:	movt	r1, #1
   1122c:	bl	10ea4 <dcgettext@plt>
   11230:	ldr	r1, [r9]
   11234:	bl	10e14 <fputs_unlocked@plt>
   11238:	movw	r1, #20840	; 0x5168
   1123c:	mov	r0, #0
   11240:	mov	r2, #5
   11244:	movt	r1, #1
   11248:	bl	10ea4 <dcgettext@plt>
   1124c:	ldr	r1, [r9]
   11250:	bl	10e14 <fputs_unlocked@plt>
   11254:	movw	r0, #21608	; 0x5468
   11258:	mov	r6, sp
   1125c:	movt	r0, #1
   11260:	mov	r1, r6
   11264:	ldm	r0!, {r2, r3, r4, r5}
   11268:	stmia	r1!, {r2, r3, r4, r5}
   1126c:	ldm	r0!, {r2, r3, r4, r5, r7}
   11270:	stmia	r1!, {r2, r3, r4, r5, r7}
   11274:	ldm	r0, {r2, r3, r4, r5, r7}
   11278:	stm	r1, {r2, r3, r4, r5, r7}
   1127c:	movw	r1, #21131	; 0x528b
   11280:	movw	r5, #20894	; 0x519e
   11284:	movt	r1, #1
   11288:	movt	r5, #1
   1128c:	mov	r0, r5
   11290:	bl	10e2c <strcmp@plt>
   11294:	cmp	r0, #0
   11298:	ldrne	r1, [r6, #8]!
   1129c:	cmpne	r1, #0
   112a0:	bne	1128c <__assert_fail@plt+0x22c>
   112a4:	ldr	r6, [r6, #4]
   112a8:	movw	r1, #21226	; 0x52ea
   112ac:	mov	r0, #0
   112b0:	mov	r2, #5
   112b4:	movt	r1, #1
   112b8:	bl	10ea4 <dcgettext@plt>
   112bc:	movw	r2, #20942	; 0x51ce
   112c0:	movw	r3, #21249	; 0x5301
   112c4:	mov	r1, r0
   112c8:	mov	r0, #1
   112cc:	movt	r2, #1
   112d0:	movt	r3, #1
   112d4:	bl	10fa0 <__printf_chk@plt>
   112d8:	cmp	r6, #0
   112dc:	mov	r0, #5
   112e0:	mov	r1, #0
   112e4:	moveq	r6, r5
   112e8:	bl	10fdc <setlocale@plt>
   112ec:	cmp	r0, #0
   112f0:	beq	11328 <__assert_fail@plt+0x2c8>
   112f4:	movw	r1, #21289	; 0x5329
   112f8:	mov	r2, #3
   112fc:	movt	r1, #1
   11300:	bl	11030 <strncmp@plt>
   11304:	cmp	r0, #0
   11308:	beq	11328 <__assert_fail@plt+0x2c8>
   1130c:	movw	r1, #21293	; 0x532d
   11310:	mov	r0, #0
   11314:	mov	r2, #5
   11318:	movt	r1, #1
   1131c:	bl	10ea4 <dcgettext@plt>
   11320:	ldr	r1, [r9]
   11324:	bl	10e14 <fputs_unlocked@plt>
   11328:	movw	r1, #21364	; 0x5374
   1132c:	mov	r0, #0
   11330:	mov	r2, #5
   11334:	movt	r1, #1
   11338:	bl	10ea4 <dcgettext@plt>
   1133c:	movw	r2, #21249	; 0x5301
   11340:	mov	r1, r0
   11344:	mov	r0, #1
   11348:	mov	r3, r5
   1134c:	movt	r2, #1
   11350:	bl	10fa0 <__printf_chk@plt>
   11354:	movw	r1, #21391	; 0x538f
   11358:	mov	r0, #0
   1135c:	mov	r2, #5
   11360:	movt	r1, #1
   11364:	bl	10ea4 <dcgettext@plt>
   11368:	movw	r3, #21441	; 0x53c1
   1136c:	mov	r1, r0
   11370:	movw	r0, #21159	; 0x52a7
   11374:	cmp	r6, r5
   11378:	mov	r2, r6
   1137c:	movt	r0, #1
   11380:	movt	r3, #1
   11384:	moveq	r3, r0
   11388:	mov	r0, #1
   1138c:	bl	10fa0 <__printf_chk@plt>
   11390:	mov	r0, r8
   11394:	bl	10f64 <exit@plt>
   11398:	movw	r0, #24904	; 0x6148
   1139c:	movw	r1, #20436	; 0x4fd4
   113a0:	mov	r2, #5
   113a4:	movt	r0, #2
   113a8:	movt	r1, #1
   113ac:	ldr	r5, [r0]
   113b0:	mov	r0, #0
   113b4:	bl	10ea4 <dcgettext@plt>
   113b8:	mov	r2, r0
   113bc:	movw	r0, #24996	; 0x61a4
   113c0:	mov	r1, #1
   113c4:	movt	r0, #2
   113c8:	ldr	r3, [r0]
   113cc:	mov	r0, r5
   113d0:	bl	10fb8 <__fprintf_chk@plt>
   113d4:	b	11390 <__assert_fail@plt+0x330>
   113d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113dc:	add	fp, sp, #28
   113e0:	sub	sp, sp, #36	; 0x24
   113e4:	mov	r5, r0
   113e8:	ldr	r0, [r1]
   113ec:	mov	r4, r1
   113f0:	bl	1262c <__assert_fail@plt+0x15cc>
   113f4:	movw	r1, #21441	; 0x53c1
   113f8:	mov	r0, #6
   113fc:	movt	r1, #1
   11400:	bl	10fdc <setlocale@plt>
   11404:	movw	r6, #20946	; 0x51d2
   11408:	movw	r1, #20903	; 0x51a7
   1140c:	movt	r6, #1
   11410:	movt	r1, #1
   11414:	mov	r0, r6
   11418:	bl	11018 <bindtextdomain@plt>
   1141c:	mov	r0, r6
   11420:	bl	10ebc <textdomain@plt>
   11424:	movw	r0, #9024	; 0x2340
   11428:	movt	r0, #1
   1142c:	bl	14fb0 <__assert_fail@plt+0x3f50>
   11430:	movw	r8, #20927	; 0x51bf
   11434:	movw	r9, #21512	; 0x5408
   11438:	mov	sl, #0
   1143c:	mov	r0, #0
   11440:	movt	r8, #1
   11444:	movt	r9, #1
   11448:	str	r0, [sp, #24]
   1144c:	mov	r0, #0
   11450:	mov	r1, r4
   11454:	mov	r2, r8
   11458:	mov	r3, r9
   1145c:	str	r0, [sp]
   11460:	mov	r0, r5
   11464:	bl	10f4c <getopt_long@plt>
   11468:	cmp	r0, #96	; 0x60
   1146c:	ble	1148c <__assert_fail@plt+0x42c>
   11470:	cmp	r0, #97	; 0x61
   11474:	beq	114d8 <__assert_fail@plt+0x478>
   11478:	cmp	r0, #116	; 0x74
   1147c:	beq	114ec <__assert_fail@plt+0x48c>
   11480:	cmp	r0, #256	; 0x100
   11484:	beq	11578 <__assert_fail@plt+0x518>
   11488:	b	11518 <__assert_fail@plt+0x4b8>
   1148c:	cmp	r0, #43	; 0x2b
   11490:	bgt	114b0 <__assert_fail@plt+0x450>
   11494:	cmn	r0, #1
   11498:	beq	11580 <__assert_fail@plt+0x520>
   1149c:	cmn	r0, #3
   114a0:	beq	118b4 <__assert_fail@plt+0x854>
   114a4:	cmn	r0, #2
   114a8:	bne	11518 <__assert_fail@plt+0x4b8>
   114ac:	b	118fc <__assert_fail@plt+0x89c>
   114b0:	cmp	r0, #44	; 0x2c
   114b4:	bne	11510 <__assert_fail@plt+0x4b0>
   114b8:	tst	sl, #1
   114bc:	mov	sl, #0
   114c0:	beq	1144c <__assert_fail@plt+0x3ec>
   114c4:	mov	r0, r6
   114c8:	mov	r1, r7
   114cc:	bl	1193c <__assert_fail@plt+0x8dc>
   114d0:	mov	sl, #0
   114d4:	b	1144c <__assert_fail@plt+0x3ec>
   114d8:	movw	r0, #24928	; 0x6160
   114dc:	mov	r1, #1
   114e0:	movt	r0, #2
   114e4:	strb	r1, [r0]
   114e8:	b	1144c <__assert_fail@plt+0x3ec>
   114ec:	movw	r0, #24928	; 0x6160
   114f0:	mov	r1, #1
   114f4:	movt	r0, #2
   114f8:	strb	r1, [r0]
   114fc:	movw	r0, #24920	; 0x6158
   11500:	movt	r0, #2
   11504:	ldr	r0, [r0]
   11508:	bl	11a50 <__assert_fail@plt+0x9f0>
   1150c:	b	1144c <__assert_fail@plt+0x3ec>
   11510:	cmp	r0, #63	; 0x3f
   11514:	beq	11904 <__assert_fail@plt+0x8a4>
   11518:	ands	r1, sl, #1
   1151c:	moveq	r7, r1
   11520:	moveq	r6, r1
   11524:	movw	r1, #39321	; 0x9999
   11528:	movt	r1, #39321	; 0x9999
   1152c:	subs	r1, r1, r6
   11530:	movw	r1, #39321	; 0x9999
   11534:	movt	r1, #6553	; 0x1999
   11538:	sbcs	r1, r1, r7
   1153c:	bcc	1190c <__assert_fail@plt+0x8ac>
   11540:	mov	r1, #10
   11544:	add	r3, r7, r7, lsl #2
   11548:	sub	r0, r0, #48	; 0x30
   1154c:	mov	sl, #1
   11550:	umull	r1, r2, r6, r1
   11554:	add	r2, r2, r3, lsl #1
   11558:	adds	r1, r1, r0
   1155c:	adc	r0, r2, r0, asr #31
   11560:	subs	r2, r1, r6
   11564:	mov	r6, r1
   11568:	sbcs	r2, r0, r7
   1156c:	mov	r7, r0
   11570:	bcs	1144c <__assert_fail@plt+0x3ec>
   11574:	b	1190c <__assert_fail@plt+0x8ac>
   11578:	mov	r0, #1
   1157c:	b	11448 <__assert_fail@plt+0x3e8>
   11580:	ldr	r0, [sp, #24]
   11584:	tst	r0, #1
   11588:	movwne	r1, #24928	; 0x6160
   1158c:	movne	r0, #0
   11590:	movtne	r1, #2
   11594:	strbne	r0, [r1]
   11598:	tst	sl, #1
   1159c:	beq	115ac <__assert_fail@plt+0x54c>
   115a0:	mov	r0, r6
   115a4:	mov	r1, r7
   115a8:	bl	1193c <__assert_fail@plt+0x8dc>
   115ac:	bl	11e3c <__assert_fail@plt+0xddc>
   115b0:	movw	r0, #24896	; 0x6140
   115b4:	movt	r0, #2
   115b8:	ldr	r1, [r0]
   115bc:	mov	r0, #0
   115c0:	cmp	r1, r5
   115c4:	addlt	r0, r4, r1, lsl #2
   115c8:	bl	12078 <__assert_fail@plt+0x1018>
   115cc:	mov	r0, #0
   115d0:	bl	120a8 <__assert_fail@plt+0x1048>
   115d4:	cmp	r0, #0
   115d8:	beq	11870 <__assert_fail@plt+0x810>
   115dc:	mov	r4, r0
   115e0:	movw	r0, #25304	; 0x62d8
   115e4:	movt	r0, #2
   115e8:	ldr	r0, [r0]
   115ec:	bl	14624 <__assert_fail@plt+0x35c4>
   115f0:	str	r0, [sp, #8]
   115f4:	mov	r0, #0
   115f8:	mov	r5, #0
   115fc:	mov	sl, #1
   11600:	mov	r8, #0
   11604:	mov	r9, #1
   11608:	str	r0, [sp, #12]
   1160c:	mov	r0, #0
   11610:	str	r5, [sp, #32]
   11614:	str	r0, [sp, #24]
   11618:	b	11650 <__assert_fail@plt+0x5f0>
   1161c:	ldr	r0, [sp, #8]
   11620:	ldr	r2, [sp, #24]
   11624:	mov	sl, #1
   11628:	mov	r9, #1
   1162c:	strb	r7, [r0, r2]
   11630:	clz	r0, r1
   11634:	ldr	r1, [sp, #12]
   11638:	add	r2, r2, #1
   1163c:	lsr	r0, r0, #5
   11640:	str	r2, [sp, #24]
   11644:	orr	r1, r1, r0
   11648:	str	r1, [sp, #12]
   1164c:	b	1185c <__assert_fail@plt+0x7fc>
   11650:	mov	r0, r4
   11654:	bl	10e98 <getc_unlocked@plt>
   11658:	mov	r7, r0
   1165c:	cmn	r0, #1
   11660:	bgt	1167c <__assert_fail@plt+0x61c>
   11664:	mov	r0, r4
   11668:	bl	120a8 <__assert_fail@plt+0x1048>
   1166c:	mov	r4, r0
   11670:	cmp	r0, #0
   11674:	bne	11650 <__assert_fail@plt+0x5f0>
   11678:	mov	r4, #0
   1167c:	tst	sl, #1
   11680:	beq	116cc <__assert_fail@plt+0x66c>
   11684:	bl	10f58 <__ctype_b_loc@plt>
   11688:	ldr	r0, [r0]
   1168c:	add	r0, r0, r7, lsl #1
   11690:	ldrh	r0, [r0]
   11694:	ands	r0, r0, #1
   11698:	str	r0, [sp, #16]
   1169c:	beq	116dc <__assert_fail@plt+0x67c>
   116a0:	mov	r0, r5
   116a4:	mov	r1, r8
   116a8:	add	r2, sp, #32
   116ac:	add	r3, sp, #31
   116b0:	bl	11f74 <__assert_fail@plt+0xf14>
   116b4:	ldrb	ip, [sp, #31]
   116b8:	cmp	ip, #0
   116bc:	beq	11744 <__assert_fail@plt+0x6e4>
   116c0:	ldr	r6, [sp, #24]
   116c4:	str	r5, [sp, #20]
   116c8:	b	117c0 <__assert_fail@plt+0x760>
   116cc:	mov	r6, r9
   116d0:	ldr	r9, [sp, #24]
   116d4:	mov	sl, #0
   116d8:	b	1183c <__assert_fail@plt+0x7dc>
   116dc:	cmp	r7, #8
   116e0:	bne	11724 <__assert_fail@plt+0x6c4>
   116e4:	ldr	r0, [sp, #32]
   116e8:	ldr	r6, [sp, #24]
   116ec:	mov	r7, #8
   116f0:	cmp	r0, #0
   116f4:	subne	r0, r0, #1
   116f8:	subs	r1, r5, #1
   116fc:	str	r0, [sp, #32]
   11700:	orr	r0, r5, r8
   11704:	sbc	r2, r8, #0
   11708:	cmp	r0, #0
   1170c:	moveq	r2, r8
   11710:	moveq	r1, r5
   11714:	mov	r5, #1
   11718:	mov	r8, r2
   1171c:	str	r1, [sp, #20]
   11720:	b	117c8 <__assert_fail@plt+0x768>
   11724:	ldr	r6, [sp, #24]
   11728:	adds	r0, r5, #1
   1172c:	mov	r5, #1
   11730:	adc	r8, r8, #0
   11734:	str	r0, [sp, #20]
   11738:	orrs	r0, r0, r8
   1173c:	bne	117c8 <__assert_fail@plt+0x768>
   11740:	b	11918 <__assert_fail@plt+0x8b8>
   11744:	str	r0, [sp, #20]
   11748:	subs	r0, r0, r5
   1174c:	mov	r2, r1
   11750:	sbcs	r1, r1, r8
   11754:	bcc	11918 <__assert_fail@plt+0x8b8>
   11758:	cmp	r7, #9
   1175c:	bne	11774 <__assert_fail@plt+0x714>
   11760:	ldr	r0, [sp, #24]
   11764:	mov	r8, r2
   11768:	cmp	r0, #0
   1176c:	bne	117a8 <__assert_fail@plt+0x748>
   11770:	b	117b4 <__assert_fail@plt+0x754>
   11774:	ldr	r0, [sp, #20]
   11778:	adds	r5, r5, #1
   1177c:	mvn	r3, r9
   11780:	adc	r8, r8, #0
   11784:	eor	r2, r8, r2
   11788:	eor	r1, r5, r0
   1178c:	orrs	r1, r1, r2
   11790:	mov	r2, r1
   11794:	movwne	r2, #1
   11798:	orr	r2, r3, r2
   1179c:	tst	r2, #1
   117a0:	bne	1161c <__assert_fail@plt+0x5bc>
   117a4:	str	r5, [sp, #20]
   117a8:	ldr	r1, [sp, #8]
   117ac:	mov	r2, #9
   117b0:	strb	r2, [r1]
   117b4:	ldr	r1, [sp, #12]
   117b8:	mov	r7, #9
   117bc:	and	r6, r1, #1
   117c0:	clz	r0, ip
   117c4:	lsr	r5, r0, #5
   117c8:	cmp	r6, #0
   117cc:	beq	11818 <__assert_fail@plt+0x7b8>
   117d0:	cmp	r6, #1
   117d4:	beq	117ec <__assert_fail@plt+0x78c>
   117d8:	ldr	r0, [sp, #12]
   117dc:	tst	r0, #1
   117e0:	ldrne	r0, [sp, #8]
   117e4:	movne	r1, #9
   117e8:	strbne	r1, [r0]
   117ec:	movw	r0, #24916	; 0x6154
   117f0:	mov	r1, #1
   117f4:	mov	r2, r6
   117f8:	movt	r0, #2
   117fc:	ldr	r3, [r0]
   11800:	ldr	r0, [sp, #8]
   11804:	bl	10e80 <fwrite_unlocked@plt>
   11808:	mov	r1, #0
   1180c:	cmp	r0, r6
   11810:	str	r1, [sp, #12]
   11814:	bne	11888 <__assert_fail@plt+0x828>
   11818:	movw	r0, #24928	; 0x6160
   1181c:	ldr	r6, [sp, #16]
   11820:	mov	r9, #0
   11824:	movt	r0, #2
   11828:	ldrb	r0, [r0]
   1182c:	orrs	r0, r6, r0
   11830:	movwne	r0, #1
   11834:	and	sl, r5, r0
   11838:	ldr	r5, [sp, #20]
   1183c:	cmn	r7, #1
   11840:	ble	11868 <__assert_fail@plt+0x808>
   11844:	mov	r0, r7
   11848:	str	r9, [sp, #24]
   1184c:	bl	11048 <putchar_unlocked@plt>
   11850:	cmn	r0, #1
   11854:	mov	r9, r6
   11858:	ble	11888 <__assert_fail@plt+0x828>
   1185c:	cmp	r7, #10
   11860:	bne	11650 <__assert_fail@plt+0x5f0>
   11864:	b	115f4 <__assert_fail@plt+0x594>
   11868:	ldr	r0, [sp, #8]
   1186c:	bl	12560 <__assert_fail@plt+0x1500>
   11870:	bl	12284 <__assert_fail@plt+0x1224>
   11874:	movw	r0, #24932	; 0x6164
   11878:	movt	r0, #2
   1187c:	ldr	r0, [r0]
   11880:	sub	sp, fp, #28
   11884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11888:	bl	10f7c <__errno_location@plt>
   1188c:	ldr	r4, [r0]
   11890:	movw	r1, #21498	; 0x53fa
   11894:	mov	r0, #0
   11898:	mov	r2, #5
   1189c:	movt	r1, #1
   118a0:	bl	10ea4 <dcgettext@plt>
   118a4:	mov	r2, r0
   118a8:	mov	r0, #1
   118ac:	mov	r1, r4
   118b0:	bl	10f10 <error@plt>
   118b4:	movw	r0, #24816	; 0x60f0
   118b8:	movw	r2, #20956	; 0x51dc
   118bc:	mov	r1, #0
   118c0:	movt	r0, #2
   118c4:	movt	r2, #1
   118c8:	str	r1, [sp, #4]
   118cc:	movw	r1, #20894	; 0x519e
   118d0:	ldr	r3, [r0]
   118d4:	movw	r0, #24916	; 0x6154
   118d8:	str	r2, [sp]
   118dc:	movw	r2, #20942	; 0x51ce
   118e0:	movt	r1, #1
   118e4:	movt	r0, #2
   118e8:	movt	r2, #1
   118ec:	ldr	r0, [r0]
   118f0:	bl	1451c <__assert_fail@plt+0x34bc>
   118f4:	mov	r0, #0
   118f8:	bl	10f64 <exit@plt>
   118fc:	mov	r0, #0
   11900:	bl	1115c <__assert_fail@plt+0xfc>
   11904:	mov	r0, #1
   11908:	bl	1115c <__assert_fail@plt+0xfc>
   1190c:	movw	r1, #20972	; 0x51ec
   11910:	movt	r1, #1
   11914:	b	11920 <__assert_fail@plt+0x8c0>
   11918:	movw	r1, #21475	; 0x53e3
   1191c:	movt	r1, #1
   11920:	mov	r0, #0
   11924:	mov	r2, #5
   11928:	bl	10ea4 <dcgettext@plt>
   1192c:	mov	r2, r0
   11930:	mov	r0, #1
   11934:	mov	r1, #0
   11938:	bl	10f10 <error@plt>
   1193c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11940:	add	fp, sp, #24
   11944:	movw	r8, #24936	; 0x6168
   11948:	mov	r4, r1
   1194c:	mov	r6, r0
   11950:	mov	r0, #0
   11954:	movt	r8, #2
   11958:	ldr	r1, [r8]
   1195c:	cmp	r1, #0
   11960:	beq	1197c <__assert_fail@plt+0x91c>
   11964:	movw	r2, #24940	; 0x616c
   11968:	movt	r2, #2
   1196c:	ldr	r2, [r2]
   11970:	add	r2, r2, r1, lsl #3
   11974:	ldrd	r2, [r2, #-8]
   11978:	b	11984 <__assert_fail@plt+0x924>
   1197c:	mov	r2, #0
   11980:	mov	r3, #0
   11984:	subs	r7, r6, r2
   11988:	mov	r5, r6
   1198c:	sbcs	r7, r4, r3
   11990:	movwcc	r0, #1
   11994:	cmp	r0, #0
   11998:	mov	r0, r4
   1199c:	movne	r5, r2
   119a0:	movne	r0, r3
   119a4:	subs	r7, r5, r2
   119a8:	sbc	r5, r0, r3
   119ac:	movw	r0, #24944	; 0x6170
   119b0:	movt	r0, #2
   119b4:	ldr	r0, [r0]
   119b8:	cmp	r1, r0
   119bc:	bne	119e8 <__assert_fail@plt+0x988>
   119c0:	movw	r9, #24940	; 0x616c
   119c4:	movw	r1, #24944	; 0x6170
   119c8:	mov	r2, #8
   119cc:	movt	r9, #2
   119d0:	movt	r1, #2
   119d4:	ldr	r0, [r9]
   119d8:	bl	14730 <__assert_fail@plt+0x36d0>
   119dc:	ldr	r1, [r8]
   119e0:	str	r0, [r9]
   119e4:	b	119f4 <__assert_fail@plt+0x994>
   119e8:	movw	r0, #24940	; 0x616c
   119ec:	movt	r0, #2
   119f0:	ldr	r0, [r0]
   119f4:	add	r2, r1, #1
   119f8:	str	r2, [r8]
   119fc:	str	r6, [r0, r1, lsl #3]!
   11a00:	str	r4, [r0, #4]
   11a04:	movw	r0, #25304	; 0x62d8
   11a08:	movt	r0, #2
   11a0c:	ldr	r1, [r0]
   11a10:	subs	r1, r1, r7
   11a14:	rscs	r1, r5, #0
   11a18:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   11a1c:	cmp	r5, #0
   11a20:	bne	11a2c <__assert_fail@plt+0x9cc>
   11a24:	str	r7, [r0]
   11a28:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11a2c:	movw	r1, #21664	; 0x54a0
   11a30:	mov	r0, #0
   11a34:	mov	r2, #5
   11a38:	movt	r1, #1
   11a3c:	bl	10ea4 <dcgettext@plt>
   11a40:	mov	r2, r0
   11a44:	mov	r0, #1
   11a48:	mov	r1, #0
   11a4c:	bl	10f10 <error@plt>
   11a50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a54:	add	fp, sp, #28
   11a58:	sub	sp, sp, #12
   11a5c:	mov	r8, r0
   11a60:	mov	r0, #0
   11a64:	mov	r7, #0
   11a68:	mov	sl, #1
   11a6c:	mov	r9, #0
   11a70:	mov	r5, #0
   11a74:	mov	r4, #0
   11a78:	str	r0, [sp, #8]
   11a7c:	mov	r0, #0
   11a80:	str	r0, [sp, #4]
   11a84:	ldrb	r6, [r8]
   11a88:	cmp	r6, #44	; 0x2c
   11a8c:	beq	11b04 <__assert_fail@plt+0xaa4>
   11a90:	cmp	r6, #0
   11a94:	beq	11cd8 <__assert_fail@plt+0xc78>
   11a98:	bl	10f58 <__ctype_b_loc@plt>
   11a9c:	ldr	r0, [r0]
   11aa0:	ldrb	r0, [r0, r6, lsl #1]
   11aa4:	tst	r0, #1
   11aa8:	bne	11b04 <__assert_fail@plt+0xaa4>
   11aac:	cmp	r6, #43	; 0x2b
   11ab0:	beq	11b64 <__assert_fail@plt+0xb04>
   11ab4:	cmp	r6, #47	; 0x2f
   11ab8:	bne	11bc4 <__assert_fail@plt+0xb64>
   11abc:	mov	r5, #0
   11ac0:	tst	r4, #1
   11ac4:	beq	11cbc <__assert_fail@plt+0xc5c>
   11ac8:	movw	r1, #21687	; 0x54b7
   11acc:	mov	r0, #0
   11ad0:	mov	r2, #5
   11ad4:	movt	r1, #1
   11ad8:	bl	10ea4 <dcgettext@plt>
   11adc:	mov	r9, r0
   11ae0:	mov	r0, r8
   11ae4:	bl	14030 <__assert_fail@plt+0x2fd0>
   11ae8:	mov	r3, r0
   11aec:	mov	r0, #0
   11af0:	mov	r1, #0
   11af4:	mov	r2, r9
   11af8:	bl	10f10 <error@plt>
   11afc:	mov	r9, #1
   11b00:	b	11bb0 <__assert_fail@plt+0xb50>
   11b04:	tst	r4, #1
   11b08:	beq	11cc0 <__assert_fail@plt+0xc60>
   11b0c:	mov	r0, r7
   11b10:	tst	r9, #1
   11b14:	beq	11b34 <__assert_fail@plt+0xad4>
   11b18:	ldr	r1, [sp, #8]
   11b1c:	bl	11d74 <__assert_fail@plt+0xd14>
   11b20:	mov	r9, #1
   11b24:	cmp	r0, #0
   11b28:	mov	r4, #0
   11b2c:	bne	11cc4 <__assert_fail@plt+0xc64>
   11b30:	b	11d6c <__assert_fail@plt+0xd0c>
   11b34:	tst	r5, #1
   11b38:	beq	11b50 <__assert_fail@plt+0xaf0>
   11b3c:	ldr	r1, [sp, #8]
   11b40:	bl	11dd8 <__assert_fail@plt+0xd78>
   11b44:	cmp	r0, #0
   11b48:	bne	11bb8 <__assert_fail@plt+0xb58>
   11b4c:	b	11d6c <__assert_fail@plt+0xd0c>
   11b50:	ldr	r1, [sp, #8]
   11b54:	bl	1193c <__assert_fail@plt+0x8dc>
   11b58:	mov	r9, #0
   11b5c:	mov	r5, #0
   11b60:	b	11cc0 <__assert_fail@plt+0xc60>
   11b64:	tst	r4, #1
   11b68:	beq	11bb8 <__assert_fail@plt+0xb58>
   11b6c:	movw	r1, #21728	; 0x54e0
   11b70:	mov	r0, #0
   11b74:	mov	r2, #5
   11b78:	mov	r9, #0
   11b7c:	movt	r1, #1
   11b80:	bl	10ea4 <dcgettext@plt>
   11b84:	mov	r4, r7
   11b88:	mov	r7, r0
   11b8c:	mov	r0, r8
   11b90:	bl	14030 <__assert_fail@plt+0x2fd0>
   11b94:	mov	r3, r0
   11b98:	mov	r2, r7
   11b9c:	mov	r0, #0
   11ba0:	mov	r1, #0
   11ba4:	mov	r7, r4
   11ba8:	bl	10f10 <error@plt>
   11bac:	mov	r5, #1
   11bb0:	mov	sl, #0
   11bb4:	b	11cb4 <__assert_fail@plt+0xc54>
   11bb8:	mov	r5, #1
   11bbc:	mov	r9, #0
   11bc0:	b	11cc0 <__assert_fail@plt+0xc60>
   11bc4:	sub	r0, r6, #48	; 0x30
   11bc8:	cmp	r0, #9
   11bcc:	bhi	11d38 <__assert_fail@plt+0xcd8>
   11bd0:	ldr	r2, [sp, #4]
   11bd4:	ands	r1, r4, #1
   11bd8:	moveq	r2, r8
   11bdc:	str	r2, [sp, #4]
   11be0:	mov	r2, r1
   11be4:	movne	r1, r7
   11be8:	ldr	r3, [sp, #8]
   11bec:	movne	r2, r3
   11bf0:	movw	r3, #39321	; 0x9999
   11bf4:	movt	r3, #39321	; 0x9999
   11bf8:	subs	r3, r3, r1
   11bfc:	movw	r3, #39321	; 0x9999
   11c00:	movt	r3, #6553	; 0x1999
   11c04:	sbcs	r3, r3, r2
   11c08:	bcc	11c3c <__assert_fail@plt+0xbdc>
   11c0c:	mov	r3, #10
   11c10:	add	r6, r2, r2, lsl #2
   11c14:	mov	r4, #1
   11c18:	str	r2, [sp, #8]
   11c1c:	umull	r3, r7, r1, r3
   11c20:	add	r7, r7, r6, lsl #1
   11c24:	adds	r3, r3, r0
   11c28:	adc	r0, r7, r0, asr #31
   11c2c:	subs	r7, r3, r1
   11c30:	sbcs	r7, r0, r2
   11c34:	mov	r7, r1
   11c38:	bcs	11ccc <__assert_fail@plt+0xc6c>
   11c3c:	ldr	sl, [sp, #4]
   11c40:	movw	r1, #21769	; 0x5509
   11c44:	movt	r1, #1
   11c48:	mov	r0, sl
   11c4c:	bl	11054 <strspn@plt>
   11c50:	mov	r8, r7
   11c54:	mov	r7, r0
   11c58:	mov	r0, sl
   11c5c:	mov	r1, r7
   11c60:	bl	149ec <__assert_fail@plt+0x398c>
   11c64:	movw	r1, #21780	; 0x5514
   11c68:	mov	r6, r0
   11c6c:	mov	r0, #0
   11c70:	mov	r2, #5
   11c74:	movt	r1, #1
   11c78:	bl	10ea4 <dcgettext@plt>
   11c7c:	mov	r4, r0
   11c80:	mov	r0, r6
   11c84:	bl	14030 <__assert_fail@plt+0x2fd0>
   11c88:	mov	r3, r0
   11c8c:	mov	r0, #0
   11c90:	mov	r1, #0
   11c94:	mov	r2, r4
   11c98:	bl	10f10 <error@plt>
   11c9c:	mov	r0, r6
   11ca0:	bl	12560 <__assert_fail@plt+0x1500>
   11ca4:	add	r0, sl, r7
   11ca8:	mov	r7, r8
   11cac:	mov	sl, #0
   11cb0:	sub	r8, r0, #1
   11cb4:	mov	r4, #1
   11cb8:	b	11cc4 <__assert_fail@plt+0xc64>
   11cbc:	mov	r9, #1
   11cc0:	mov	r4, #0
   11cc4:	add	r8, r8, #1
   11cc8:	b	11a84 <__assert_fail@plt+0xa24>
   11ccc:	mov	r7, r3
   11cd0:	str	r0, [sp, #8]
   11cd4:	b	11cc4 <__assert_fail@plt+0xc64>
   11cd8:	and	r0, sl, r4
   11cdc:	tst	r0, #1
   11ce0:	beq	11cfc <__assert_fail@plt+0xc9c>
   11ce4:	mov	r0, r7
   11ce8:	tst	r9, #1
   11cec:	beq	11d08 <__assert_fail@plt+0xca8>
   11cf0:	ldr	r1, [sp, #8]
   11cf4:	bl	11d74 <__assert_fail@plt+0xd14>
   11cf8:	b	11d18 <__assert_fail@plt+0xcb8>
   11cfc:	tst	sl, #1
   11d00:	bne	11d20 <__assert_fail@plt+0xcc0>
   11d04:	b	11d6c <__assert_fail@plt+0xd0c>
   11d08:	tst	r5, #1
   11d0c:	beq	11d28 <__assert_fail@plt+0xcc8>
   11d10:	ldr	r1, [sp, #8]
   11d14:	bl	11dd8 <__assert_fail@plt+0xd78>
   11d18:	cmp	r0, #0
   11d1c:	beq	11d6c <__assert_fail@plt+0xd0c>
   11d20:	sub	sp, fp, #28
   11d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d28:	ldr	r1, [sp, #8]
   11d2c:	sub	sp, fp, #28
   11d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d34:	b	1193c <__assert_fail@plt+0x8dc>
   11d38:	movw	r1, #21805	; 0x552d
   11d3c:	mov	r0, #0
   11d40:	mov	r2, #5
   11d44:	movt	r1, #1
   11d48:	bl	10ea4 <dcgettext@plt>
   11d4c:	mov	r4, r0
   11d50:	mov	r0, r8
   11d54:	bl	14030 <__assert_fail@plt+0x2fd0>
   11d58:	mov	r3, r0
   11d5c:	mov	r0, #0
   11d60:	mov	r1, #0
   11d64:	mov	r2, r4
   11d68:	bl	10f10 <error@plt>
   11d6c:	mov	r0, #1
   11d70:	bl	10f64 <exit@plt>
   11d74:	push	{r4, r5, r6, r7, fp, lr}
   11d78:	add	fp, sp, #16
   11d7c:	movw	r7, #24952	; 0x6178
   11d80:	mov	r5, r1
   11d84:	mov	r6, r0
   11d88:	movt	r7, #2
   11d8c:	ldrd	r0, [r7]
   11d90:	orrs	r0, r0, r1
   11d94:	beq	11dc4 <__assert_fail@plt+0xd64>
   11d98:	movw	r1, #22330	; 0x573a
   11d9c:	mov	r0, #0
   11da0:	mov	r2, #5
   11da4:	mov	r4, #0
   11da8:	movt	r1, #1
   11dac:	bl	10ea4 <dcgettext@plt>
   11db0:	mov	r2, r0
   11db4:	mov	r0, #0
   11db8:	mov	r1, #0
   11dbc:	bl	10f10 <error@plt>
   11dc0:	b	11dc8 <__assert_fail@plt+0xd68>
   11dc4:	mov	r4, #1
   11dc8:	mov	r0, r4
   11dcc:	str	r6, [r7]
   11dd0:	str	r5, [r7, #4]
   11dd4:	pop	{r4, r5, r6, r7, fp, pc}
   11dd8:	push	{r4, r5, r6, r7, fp, lr}
   11ddc:	add	fp, sp, #16
   11de0:	movw	r7, #24960	; 0x6180
   11de4:	mov	r5, r1
   11de8:	mov	r6, r0
   11dec:	movt	r7, #2
   11df0:	ldrd	r0, [r7]
   11df4:	orrs	r0, r0, r1
   11df8:	beq	11e28 <__assert_fail@plt+0xdc8>
   11dfc:	movw	r1, #22377	; 0x5769
   11e00:	mov	r0, #0
   11e04:	mov	r2, #5
   11e08:	mov	r4, #0
   11e0c:	movt	r1, #1
   11e10:	bl	10ea4 <dcgettext@plt>
   11e14:	mov	r2, r0
   11e18:	mov	r0, #0
   11e1c:	mov	r1, #0
   11e20:	bl	10f10 <error@plt>
   11e24:	b	11e2c <__assert_fail@plt+0xdcc>
   11e28:	mov	r4, #1
   11e2c:	mov	r0, r4
   11e30:	str	r6, [r7]
   11e34:	str	r5, [r7, #4]
   11e38:	pop	{r4, r5, r6, r7, fp, pc}
   11e3c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11e40:	add	fp, sp, #24
   11e44:	movw	r0, #24936	; 0x6168
   11e48:	movt	r0, #2
   11e4c:	ldr	r1, [r0]
   11e50:	movw	r0, #24940	; 0x616c
   11e54:	movt	r0, #2
   11e58:	ldr	r0, [r0]
   11e5c:	cmp	r1, #0
   11e60:	beq	11ea8 <__assert_fail@plt+0xe48>
   11e64:	mov	r2, #0
   11e68:	mov	r3, r0
   11e6c:	mov	r6, #0
   11e70:	mov	r4, #0
   11e74:	ldr	r8, [r3]
   11e78:	ldr	r5, [r3, #4]
   11e7c:	orrs	r7, r8, r5
   11e80:	beq	11f38 <__assert_fail@plt+0xed8>
   11e84:	subs	r7, r6, r8
   11e88:	sbcs	r7, r4, r5
   11e8c:	bcs	11f44 <__assert_fail@plt+0xee4>
   11e90:	add	r2, r2, #1
   11e94:	add	r3, r3, #8
   11e98:	mov	r6, r8
   11e9c:	mov	r4, r5
   11ea0:	cmp	r2, r1
   11ea4:	bcc	11e74 <__assert_fail@plt+0xe14>
   11ea8:	movw	r2, #24952	; 0x6178
   11eac:	movt	r2, #2
   11eb0:	ldrd	r4, [r2]
   11eb4:	movw	r2, #24960	; 0x6180
   11eb8:	movt	r2, #2
   11ebc:	ldrd	r2, [r2]
   11ec0:	orrs	r7, r2, r3
   11ec4:	orrsne	r6, r4, r5
   11ec8:	bne	11f68 <__assert_fail@plt+0xf08>
   11ecc:	cmp	r1, #0
   11ed0:	beq	11ef8 <__assert_fail@plt+0xe98>
   11ed4:	mov	r6, #0
   11ed8:	cmp	r1, #1
   11edc:	bne	11f24 <__assert_fail@plt+0xec4>
   11ee0:	orr	r1, r4, r2
   11ee4:	orr	r2, r5, r3
   11ee8:	mov	r7, #0
   11eec:	orrs	r1, r1, r2
   11ef0:	ldrdeq	r6, [r0]
   11ef4:	b	11f28 <__assert_fail@plt+0xec8>
   11ef8:	cmp	r7, #0
   11efc:	orr	r0, r4, r5
   11f00:	mov	r7, #0
   11f04:	movweq	r2, #8
   11f08:	cmp	r0, #0
   11f0c:	movw	r0, #25304	; 0x62d8
   11f10:	movne	r2, r4
   11f14:	movt	r0, #2
   11f18:	str	r2, [r0]
   11f1c:	mov	r6, r2
   11f20:	b	11f28 <__assert_fail@plt+0xec8>
   11f24:	mov	r7, #0
   11f28:	movw	r0, #24968	; 0x6188
   11f2c:	movt	r0, #2
   11f30:	strd	r6, [r0]
   11f34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11f38:	movw	r1, #22424	; 0x5798
   11f3c:	movt	r1, #1
   11f40:	b	11f4c <__assert_fail@plt+0xeec>
   11f44:	movw	r1, #22445	; 0x57ad
   11f48:	movt	r1, #1
   11f4c:	mov	r0, #0
   11f50:	mov	r2, #5
   11f54:	bl	10ea4 <dcgettext@plt>
   11f58:	mov	r2, r0
   11f5c:	mov	r0, #1
   11f60:	mov	r1, #0
   11f64:	bl	10f10 <error@plt>
   11f68:	movw	r1, #22473	; 0x57c9
   11f6c:	movt	r1, #1
   11f70:	b	11f4c <__assert_fail@plt+0xeec>
   11f74:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11f78:	add	fp, sp, #24
   11f7c:	mov	r9, r0
   11f80:	mov	r0, #0
   11f84:	mov	r8, r1
   11f88:	strb	r0, [r3]
   11f8c:	movw	r0, #24968	; 0x6188
   11f90:	movt	r0, #2
   11f94:	ldrd	r6, [r0]
   11f98:	orrs	r0, r6, r7
   11f9c:	bne	12000 <__assert_fail@plt+0xfa0>
   11fa0:	movw	r0, #24936	; 0x6168
   11fa4:	ldr	r1, [r2]
   11fa8:	movt	r0, #2
   11fac:	ldr	r0, [r0]
   11fb0:	cmp	r1, r0
   11fb4:	bcs	11fec <__assert_fail@plt+0xf8c>
   11fb8:	movw	r7, #24940	; 0x616c
   11fbc:	movt	r7, #2
   11fc0:	ldr	r7, [r7]
   11fc4:	add	r4, r7, r1, lsl #3
   11fc8:	ldrd	r6, [r4]
   11fcc:	subs	r5, r9, r6
   11fd0:	sbcs	r5, r8, r7
   11fd4:	bcc	12024 <__assert_fail@plt+0xfc4>
   11fd8:	add	r1, r1, #1
   11fdc:	add	r4, r4, #8
   11fe0:	cmp	r1, r0
   11fe4:	str	r1, [r2]
   11fe8:	bcc	11fc8 <__assert_fail@plt+0xf68>
   11fec:	movw	r1, #24952	; 0x6178
   11ff0:	movt	r1, #2
   11ff4:	ldrd	r6, [r1]
   11ff8:	orrs	r1, r6, r7
   11ffc:	beq	12030 <__assert_fail@plt+0xfd0>
   12000:	mov	r0, r9
   12004:	mov	r1, r8
   12008:	mov	r2, r6
   1200c:	mov	r3, r7
   12010:	bl	14dd8 <__assert_fail@plt+0x3d78>
   12014:	adds	r0, r6, r9
   12018:	adc	r1, r7, r8
   1201c:	subs	r6, r0, r2
   12020:	sbc	r7, r1, r3
   12024:	mov	r0, r6
   12028:	mov	r1, r7
   1202c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12030:	movw	r1, #24960	; 0x6180
   12034:	movt	r1, #2
   12038:	ldrd	r6, [r1]
   1203c:	orrs	r1, r6, r7
   12040:	beq	12064 <__assert_fail@plt+0x1004>
   12044:	movw	r1, #24940	; 0x616c
   12048:	movt	r1, #2
   1204c:	ldr	r1, [r1]
   12050:	add	r0, r1, r0, lsl #3
   12054:	ldrd	r0, [r0, #-8]
   12058:	subs	r0, r9, r0
   1205c:	sbc	r1, r8, r1
   12060:	b	12008 <__assert_fail@plt+0xfa8>
   12064:	mov	r0, #1
   12068:	mov	r6, #0
   1206c:	mov	r7, #0
   12070:	strb	r0, [r3]
   12074:	b	12024 <__assert_fail@plt+0xfc4>
   12078:	movw	r1, #24976	; 0x6190
   1207c:	mov	r2, #0
   12080:	cmp	r0, #0
   12084:	movt	r1, #2
   12088:	strb	r2, [r1]
   1208c:	movw	r1, #24808	; 0x60e8
   12090:	movt	r1, #2
   12094:	movne	r1, r0
   12098:	movw	r0, #24980	; 0x6194
   1209c:	movt	r0, #2
   120a0:	str	r1, [r0]
   120a4:	bx	lr
   120a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120ac:	add	fp, sp, #28
   120b0:	sub	sp, sp, #4
   120b4:	cmp	r0, #0
   120b8:	beq	12164 <__assert_fail@plt+0x1104>
   120bc:	movw	r7, #24984	; 0x6198
   120c0:	mov	r5, r0
   120c4:	movt	r7, #2
   120c8:	ldr	r0, [r7]
   120cc:	cmp	r0, #0
   120d0:	beq	12264 <__assert_fail@plt+0x1204>
   120d4:	bl	10f7c <__errno_location@plt>
   120d8:	ldr	r4, [r0]
   120dc:	mov	r6, r0
   120e0:	mov	r0, r5
   120e4:	bl	10ef8 <ferror_unlocked@plt>
   120e8:	cmp	r0, #0
   120ec:	movw	r1, #22606	; 0x584e
   120f0:	moveq	r4, r0
   120f4:	ldr	r0, [r7]
   120f8:	movt	r1, #1
   120fc:	bl	10e2c <strcmp@plt>
   12100:	cmp	r0, #0
   12104:	beq	1211c <__assert_fail@plt+0x10bc>
   12108:	mov	r0, r5
   1210c:	bl	12468 <__assert_fail@plt+0x1408>
   12110:	cmp	r0, #0
   12114:	ldrne	r4, [r6]
   12118:	b	12124 <__assert_fail@plt+0x10c4>
   1211c:	mov	r0, r5
   12120:	bl	11000 <clearerr_unlocked@plt>
   12124:	cmp	r4, #0
   12128:	beq	12164 <__assert_fail@plt+0x1104>
   1212c:	ldr	r2, [r7]
   12130:	mov	r0, #0
   12134:	mov	r1, #3
   12138:	bl	13e9c <__assert_fail@plt+0x2e3c>
   1213c:	movw	r2, #21845	; 0x5555
   12140:	mov	r3, r0
   12144:	mov	r0, #0
   12148:	mov	r1, r4
   1214c:	movt	r2, #1
   12150:	bl	10f10 <error@plt>
   12154:	movw	r0, #24932	; 0x6164
   12158:	mov	r1, #1
   1215c:	movt	r0, #2
   12160:	str	r1, [r0]
   12164:	movw	r5, #24980	; 0x6194
   12168:	movt	r5, #2
   1216c:	ldr	r0, [r5]
   12170:	add	r1, r0, #4
   12174:	str	r1, [r5]
   12178:	ldr	r7, [r0]
   1217c:	cmp	r7, #0
   12180:	beq	12238 <__assert_fail@plt+0x11d8>
   12184:	movw	sl, #21845	; 0x5555
   12188:	movw	r9, #24932	; 0x6164
   1218c:	mov	r8, #1
   12190:	movt	sl, #1
   12194:	movt	r9, #2
   12198:	movw	r1, #22606	; 0x584e
   1219c:	mov	r0, r7
   121a0:	movt	r1, #1
   121a4:	bl	10e2c <strcmp@plt>
   121a8:	cmp	r0, #0
   121ac:	beq	121c8 <__assert_fail@plt+0x1168>
   121b0:	movw	r1, #21508	; 0x5404
   121b4:	mov	r0, r7
   121b8:	movt	r1, #1
   121bc:	bl	1100c <fopen64@plt>
   121c0:	mov	r6, r0
   121c4:	b	121e0 <__assert_fail@plt+0x1180>
   121c8:	movw	r0, #24976	; 0x6190
   121cc:	movt	r0, #2
   121d0:	strb	r8, [r0]
   121d4:	movw	r0, #24912	; 0x6150
   121d8:	movt	r0, #2
   121dc:	ldr	r6, [r0]
   121e0:	cmp	r6, #0
   121e4:	bne	12240 <__assert_fail@plt+0x11e0>
   121e8:	bl	10f7c <__errno_location@plt>
   121ec:	ldr	r4, [r0]
   121f0:	mov	r0, #0
   121f4:	mov	r1, #3
   121f8:	mov	r2, r7
   121fc:	mov	r6, #0
   12200:	bl	13e9c <__assert_fail@plt+0x2e3c>
   12204:	mov	r3, r0
   12208:	mov	r0, #0
   1220c:	mov	r1, r4
   12210:	mov	r2, sl
   12214:	bl	10f10 <error@plt>
   12218:	ldr	r0, [r5]
   1221c:	str	r8, [r9]
   12220:	add	r1, r0, #4
   12224:	str	r1, [r5]
   12228:	ldr	r7, [r0]
   1222c:	cmp	r7, #0
   12230:	bne	12198 <__assert_fail@plt+0x1138>
   12234:	b	12258 <__assert_fail@plt+0x11f8>
   12238:	mov	r6, #0
   1223c:	b	12258 <__assert_fail@plt+0x11f8>
   12240:	movw	r0, #24984	; 0x6198
   12244:	mov	r1, #2
   12248:	movt	r0, #2
   1224c:	str	r7, [r0]
   12250:	mov	r0, r6
   12254:	bl	1242c <__assert_fail@plt+0x13cc>
   12258:	mov	r0, r6
   1225c:	sub	sp, fp, #28
   12260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12264:	movw	r0, #21848	; 0x5558
   12268:	movw	r1, #21858	; 0x5562
   1226c:	movw	r3, #21878	; 0x5576
   12270:	mov	r2, #340	; 0x154
   12274:	movt	r0, #1
   12278:	movt	r1, #1
   1227c:	movt	r3, #1
   12280:	bl	11060 <__assert_fail@plt>
   12284:	push	{fp, lr}
   12288:	mov	fp, sp
   1228c:	movw	r0, #24976	; 0x6190
   12290:	movt	r0, #2
   12294:	ldrb	r0, [r0]
   12298:	cmp	r0, #1
   1229c:	popne	{fp, pc}
   122a0:	movw	r0, #24912	; 0x6150
   122a4:	movt	r0, #2
   122a8:	ldr	r0, [r0]
   122ac:	bl	12468 <__assert_fail@plt+0x1408>
   122b0:	cmp	r0, #0
   122b4:	bne	122bc <__assert_fail@plt+0x125c>
   122b8:	pop	{fp, pc}
   122bc:	bl	10f7c <__errno_location@plt>
   122c0:	ldr	r1, [r0]
   122c4:	movw	r2, #22606	; 0x584e
   122c8:	mov	r0, #1
   122cc:	movt	r2, #1
   122d0:	bl	10f10 <error@plt>
   122d4:	push	{r4, sl, fp, lr}
   122d8:	add	fp, sp, #8
   122dc:	movw	r1, #21902	; 0x558e
   122e0:	mov	r0, #0
   122e4:	mov	r2, #5
   122e8:	movt	r1, #1
   122ec:	bl	10ea4 <dcgettext@plt>
   122f0:	movw	r4, #24916	; 0x6154
   122f4:	movt	r4, #2
   122f8:	ldr	r1, [r4]
   122fc:	bl	10e14 <fputs_unlocked@plt>
   12300:	movw	r1, #21965	; 0x55cd
   12304:	mov	r0, #0
   12308:	mov	r2, #5
   1230c:	movt	r1, #1
   12310:	bl	10ea4 <dcgettext@plt>
   12314:	ldr	r1, [r4]
   12318:	pop	{r4, sl, fp, lr}
   1231c:	b	10e14 <fputs_unlocked@plt>
   12320:	movw	r1, #24988	; 0x619c
   12324:	movt	r1, #2
   12328:	str	r0, [r1]
   1232c:	bx	lr
   12330:	movw	r1, #24992	; 0x61a0
   12334:	movt	r1, #2
   12338:	strb	r0, [r1]
   1233c:	bx	lr
   12340:	push	{r4, r5, r6, sl, fp, lr}
   12344:	add	fp, sp, #16
   12348:	sub	sp, sp, #8
   1234c:	movw	r0, #24916	; 0x6154
   12350:	movt	r0, #2
   12354:	ldr	r0, [r0]
   12358:	bl	14b8c <__assert_fail@plt+0x3b2c>
   1235c:	cmp	r0, #0
   12360:	beq	12388 <__assert_fail@plt+0x1328>
   12364:	movw	r0, #24992	; 0x61a0
   12368:	movt	r0, #2
   1236c:	ldrb	r0, [r0]
   12370:	cmp	r0, #0
   12374:	beq	123a8 <__assert_fail@plt+0x1348>
   12378:	bl	10f7c <__errno_location@plt>
   1237c:	ldr	r0, [r0]
   12380:	cmp	r0, #32
   12384:	bne	123a8 <__assert_fail@plt+0x1348>
   12388:	movw	r0, #24904	; 0x6148
   1238c:	movt	r0, #2
   12390:	ldr	r0, [r0]
   12394:	bl	14b8c <__assert_fail@plt+0x3b2c>
   12398:	cmp	r0, #0
   1239c:	subeq	sp, fp, #16
   123a0:	popeq	{r4, r5, r6, sl, fp, pc}
   123a4:	b	12418 <__assert_fail@plt+0x13b8>
   123a8:	movw	r1, #21498	; 0x53fa
   123ac:	mov	r0, #0
   123b0:	mov	r2, #5
   123b4:	movt	r1, #1
   123b8:	bl	10ea4 <dcgettext@plt>
   123bc:	mov	r4, r0
   123c0:	movw	r0, #24988	; 0x619c
   123c4:	movt	r0, #2
   123c8:	ldr	r6, [r0]
   123cc:	bl	10f7c <__errno_location@plt>
   123d0:	ldr	r5, [r0]
   123d4:	cmp	r6, #0
   123d8:	bne	123f4 <__assert_fail@plt+0x1394>
   123dc:	movw	r2, #21845	; 0x5555
   123e0:	mov	r0, #0
   123e4:	mov	r1, r5
   123e8:	mov	r3, r4
   123ec:	movt	r2, #1
   123f0:	b	12414 <__assert_fail@plt+0x13b4>
   123f4:	mov	r0, r6
   123f8:	bl	13df0 <__assert_fail@plt+0x2d90>
   123fc:	movw	r2, #22533	; 0x5805
   12400:	mov	r3, r0
   12404:	str	r4, [sp]
   12408:	mov	r0, #0
   1240c:	mov	r1, r5
   12410:	movt	r2, #1
   12414:	bl	10f10 <error@plt>
   12418:	movw	r0, #24820	; 0x60f4
   1241c:	movt	r0, #2
   12420:	ldr	r0, [r0]
   12424:	bl	10e5c <_exit@plt>
   12428:	b	10e38 <posix_fadvise64@plt>
   1242c:	cmp	r0, #0
   12430:	bxeq	lr
   12434:	push	{r4, sl, fp, lr}
   12438:	add	fp, sp, #8
   1243c:	sub	sp, sp, #16
   12440:	mov	r4, r1
   12444:	bl	10fac <fileno@plt>
   12448:	mov	r1, #0
   1244c:	mov	r2, #0
   12450:	mov	r3, #0
   12454:	str	r1, [sp]
   12458:	stmib	sp, {r1, r4}
   1245c:	bl	10e38 <posix_fadvise64@plt>
   12460:	sub	sp, fp, #8
   12464:	pop	{r4, sl, fp, pc}
   12468:	push	{r4, r5, r6, sl, fp, lr}
   1246c:	add	fp, sp, #16
   12470:	sub	sp, sp, #8
   12474:	mov	r4, r0
   12478:	bl	10fac <fileno@plt>
   1247c:	cmn	r0, #1
   12480:	ble	124f4 <__assert_fail@plt+0x1494>
   12484:	mov	r0, r4
   12488:	bl	10f34 <__freading@plt>
   1248c:	cmp	r0, #0
   12490:	beq	124bc <__assert_fail@plt+0x145c>
   12494:	mov	r0, r4
   12498:	bl	10fac <fileno@plt>
   1249c:	mov	r1, #1
   124a0:	mov	r2, #0
   124a4:	mov	r3, #0
   124a8:	str	r1, [sp]
   124ac:	bl	10ed4 <lseek64@plt>
   124b0:	and	r0, r0, r1
   124b4:	cmn	r0, #1
   124b8:	beq	124f4 <__assert_fail@plt+0x1494>
   124bc:	mov	r0, r4
   124c0:	bl	12504 <__assert_fail@plt+0x14a4>
   124c4:	cmp	r0, #0
   124c8:	beq	124f4 <__assert_fail@plt+0x1494>
   124cc:	bl	10f7c <__errno_location@plt>
   124d0:	ldr	r6, [r0]
   124d4:	mov	r5, r0
   124d8:	mov	r0, r4
   124dc:	bl	10fc4 <fclose@plt>
   124e0:	cmp	r6, #0
   124e4:	strne	r6, [r5]
   124e8:	mvnne	r0, #0
   124ec:	sub	sp, fp, #16
   124f0:	pop	{r4, r5, r6, sl, fp, pc}
   124f4:	mov	r0, r4
   124f8:	sub	sp, fp, #16
   124fc:	pop	{r4, r5, r6, sl, fp, lr}
   12500:	b	10fc4 <fclose@plt>
   12504:	push	{r4, sl, fp, lr}
   12508:	add	fp, sp, #8
   1250c:	sub	sp, sp, #8
   12510:	mov	r4, r0
   12514:	cmp	r0, #0
   12518:	beq	12534 <__assert_fail@plt+0x14d4>
   1251c:	mov	r0, r4
   12520:	bl	10f34 <__freading@plt>
   12524:	cmp	r0, #0
   12528:	ldrbne	r0, [r4, #1]
   1252c:	tstne	r0, #1
   12530:	bne	12544 <__assert_fail@plt+0x14e4>
   12534:	mov	r0, r4
   12538:	sub	sp, fp, #8
   1253c:	pop	{r4, sl, fp, lr}
   12540:	b	10e44 <fflush@plt>
   12544:	mov	r0, #1
   12548:	mov	r2, #0
   1254c:	mov	r3, #0
   12550:	str	r0, [sp]
   12554:	mov	r0, r4
   12558:	bl	12588 <__assert_fail@plt+0x1528>
   1255c:	b	12534 <__assert_fail@plt+0x14d4>
   12560:	push	{r4, r5, r6, sl, fp, lr}
   12564:	add	fp, sp, #16
   12568:	mov	r4, r0
   1256c:	bl	10f7c <__errno_location@plt>
   12570:	ldr	r6, [r0]
   12574:	mov	r5, r0
   12578:	mov	r0, r4
   1257c:	bl	10e50 <free@plt>
   12580:	str	r6, [r5]
   12584:	pop	{r4, r5, r6, sl, fp, pc}
   12588:	push	{r4, r5, r6, r7, fp, lr}
   1258c:	add	fp, sp, #16
   12590:	sub	sp, sp, #8
   12594:	mov	r4, r0
   12598:	ldr	r0, [r0, #4]
   1259c:	mov	r5, r3
   125a0:	mov	r6, r2
   125a4:	ldr	r1, [r4, #8]
   125a8:	cmp	r1, r0
   125ac:	bne	125c8 <__assert_fail@plt+0x1568>
   125b0:	ldrd	r0, [r4, #16]
   125b4:	cmp	r1, r0
   125b8:	bne	125c8 <__assert_fail@plt+0x1568>
   125bc:	ldr	r0, [r4, #36]	; 0x24
   125c0:	cmp	r0, #0
   125c4:	beq	125e0 <__assert_fail@plt+0x1580>
   125c8:	mov	r0, r4
   125cc:	mov	r2, r6
   125d0:	mov	r3, r5
   125d4:	sub	sp, fp, #16
   125d8:	pop	{r4, r5, r6, r7, fp, lr}
   125dc:	b	10fd0 <fseeko64@plt>
   125e0:	ldr	r7, [fp, #8]
   125e4:	mov	r0, r4
   125e8:	bl	10fac <fileno@plt>
   125ec:	mov	r2, r6
   125f0:	mov	r3, r5
   125f4:	str	r7, [sp]
   125f8:	bl	10ed4 <lseek64@plt>
   125fc:	and	r2, r0, r1
   12600:	cmn	r2, #1
   12604:	beq	12620 <__assert_fail@plt+0x15c0>
   12608:	strd	r0, [r4, #80]	; 0x50
   1260c:	ldr	r0, [r4]
   12610:	bic	r0, r0, #16
   12614:	str	r0, [r4]
   12618:	mov	r0, #0
   1261c:	b	12624 <__assert_fail@plt+0x15c4>
   12620:	mvn	r0, #0
   12624:	sub	sp, fp, #16
   12628:	pop	{r4, r5, r6, r7, fp, pc}
   1262c:	push	{r4, r5, fp, lr}
   12630:	add	fp, sp, #8
   12634:	cmp	r0, #0
   12638:	beq	126cc <__assert_fail@plt+0x166c>
   1263c:	mov	r1, #47	; 0x2f
   12640:	mov	r4, r0
   12644:	bl	10fe8 <strrchr@plt>
   12648:	cmp	r0, #0
   1264c:	mov	r5, r4
   12650:	addne	r5, r0, #1
   12654:	sub	r0, r5, r4
   12658:	cmp	r0, #7
   1265c:	blt	126b0 <__assert_fail@plt+0x1650>
   12660:	movw	r1, #22596	; 0x5844
   12664:	sub	r0, r5, #7
   12668:	mov	r2, #7
   1266c:	movt	r1, #1
   12670:	bl	11030 <strncmp@plt>
   12674:	cmp	r0, #0
   12678:	bne	126b0 <__assert_fail@plt+0x1650>
   1267c:	movw	r1, #22604	; 0x584c
   12680:	mov	r0, r5
   12684:	mov	r2, #3
   12688:	movt	r1, #1
   1268c:	bl	11030 <strncmp@plt>
   12690:	cmp	r0, #0
   12694:	beq	126a0 <__assert_fail@plt+0x1640>
   12698:	mov	r4, r5
   1269c:	b	126b0 <__assert_fail@plt+0x1650>
   126a0:	movw	r0, #24888	; 0x6138
   126a4:	add	r4, r5, #3
   126a8:	movt	r0, #2
   126ac:	str	r4, [r0]
   126b0:	movw	r0, #24892	; 0x613c
   126b4:	movt	r0, #2
   126b8:	str	r4, [r0]
   126bc:	movw	r0, #24996	; 0x61a4
   126c0:	movt	r0, #2
   126c4:	str	r4, [r0]
   126c8:	pop	{r4, r5, fp, pc}
   126cc:	movw	r0, #24904	; 0x6148
   126d0:	movt	r0, #2
   126d4:	ldr	r1, [r0]
   126d8:	movw	r0, #22540	; 0x580c
   126dc:	movt	r0, #1
   126e0:	bl	11024 <fputs@plt>
   126e4:	bl	1103c <abort@plt>
   126e8:	push	{r4, r5, r6, sl, fp, lr}
   126ec:	add	fp, sp, #16
   126f0:	mov	r4, r0
   126f4:	movw	r0, #25000	; 0x61a8
   126f8:	movt	r0, #2
   126fc:	cmp	r4, #0
   12700:	moveq	r4, r0
   12704:	bl	10f7c <__errno_location@plt>
   12708:	ldr	r6, [r0]
   1270c:	mov	r5, r0
   12710:	mov	r0, r4
   12714:	mov	r1, #48	; 0x30
   12718:	bl	14974 <__assert_fail@plt+0x3914>
   1271c:	str	r6, [r5]
   12720:	pop	{r4, r5, r6, sl, fp, pc}
   12724:	movw	r1, #25000	; 0x61a8
   12728:	cmp	r0, #0
   1272c:	movt	r1, #2
   12730:	movne	r1, r0
   12734:	ldr	r0, [r1]
   12738:	bx	lr
   1273c:	movw	r2, #25000	; 0x61a8
   12740:	cmp	r0, #0
   12744:	movt	r2, #2
   12748:	movne	r2, r0
   1274c:	str	r1, [r2]
   12750:	bx	lr
   12754:	movw	r3, #25000	; 0x61a8
   12758:	cmp	r0, #0
   1275c:	movt	r3, #2
   12760:	movne	r3, r0
   12764:	ubfx	r0, r1, #5, #3
   12768:	and	r1, r1, #31
   1276c:	add	r0, r3, r0, lsl #2
   12770:	ldr	r3, [r0, #8]
   12774:	eor	r2, r2, r3, lsr r1
   12778:	and	r2, r2, #1
   1277c:	eor	r2, r3, r2, lsl r1
   12780:	str	r2, [r0, #8]
   12784:	mov	r0, #1
   12788:	and	r0, r0, r3, lsr r1
   1278c:	bx	lr
   12790:	movw	r2, #25000	; 0x61a8
   12794:	cmp	r0, #0
   12798:	movt	r2, #2
   1279c:	movne	r2, r0
   127a0:	ldr	r0, [r2, #4]
   127a4:	str	r1, [r2, #4]
   127a8:	bx	lr
   127ac:	movw	r3, #25000	; 0x61a8
   127b0:	cmp	r0, #0
   127b4:	movt	r3, #2
   127b8:	movne	r3, r0
   127bc:	cmp	r1, #0
   127c0:	mov	r0, #10
   127c4:	cmpne	r2, #0
   127c8:	str	r0, [r3]
   127cc:	bne	127dc <__assert_fail@plt+0x177c>
   127d0:	push	{fp, lr}
   127d4:	mov	fp, sp
   127d8:	bl	1103c <abort@plt>
   127dc:	str	r1, [r3, #40]	; 0x28
   127e0:	str	r2, [r3, #44]	; 0x2c
   127e4:	bx	lr
   127e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127ec:	add	fp, sp, #28
   127f0:	sub	sp, sp, #20
   127f4:	mov	r7, r0
   127f8:	ldr	r0, [fp, #8]
   127fc:	movw	r5, #25000	; 0x61a8
   12800:	mov	r8, r3
   12804:	mov	r9, r2
   12808:	mov	sl, r1
   1280c:	movt	r5, #2
   12810:	cmp	r0, #0
   12814:	movne	r5, r0
   12818:	bl	10f7c <__errno_location@plt>
   1281c:	mov	r4, r0
   12820:	ldm	r5, {r0, r1}
   12824:	ldr	r2, [r5, #40]	; 0x28
   12828:	ldr	r3, [r5, #44]	; 0x2c
   1282c:	add	r5, r5, #8
   12830:	ldr	r6, [r4]
   12834:	stm	sp, {r0, r1, r5}
   12838:	str	r2, [sp, #12]
   1283c:	str	r3, [sp, #16]
   12840:	mov	r0, r7
   12844:	mov	r1, sl
   12848:	mov	r2, r9
   1284c:	mov	r3, r8
   12850:	bl	12860 <__assert_fail@plt+0x1800>
   12854:	str	r6, [r4]
   12858:	sub	sp, fp, #28
   1285c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12864:	add	fp, sp, #28
   12868:	sub	sp, sp, #156	; 0x9c
   1286c:	str	r0, [fp, #-56]	; 0xffffffc8
   12870:	ldr	r0, [fp, #12]
   12874:	mov	r4, r1
   12878:	str	r3, [sp, #80]	; 0x50
   1287c:	str	r2, [fp, #-84]	; 0xffffffac
   12880:	and	r1, r0, #4
   12884:	str	r1, [sp, #24]
   12888:	and	r1, r0, #1
   1288c:	str	r1, [sp, #28]
   12890:	ubfx	r7, r0, #1, #1
   12894:	bl	10ee0 <__ctype_get_mb_cur_max@plt>
   12898:	str	r0, [sp, #32]
   1289c:	ldr	r0, [fp, #24]
   128a0:	ldr	r9, [fp, #8]
   128a4:	mov	r2, #0
   128a8:	mov	r1, #0
   128ac:	mov	r5, #0
   128b0:	str	r2, [sp, #52]	; 0x34
   128b4:	mov	r2, #1
   128b8:	str	r0, [sp, #72]	; 0x48
   128bc:	ldr	r0, [fp, #20]
   128c0:	str	r0, [sp, #64]	; 0x40
   128c4:	mov	r0, #0
   128c8:	str	r0, [sp, #92]	; 0x5c
   128cc:	mov	r0, #0
   128d0:	str	r0, [fp, #-76]	; 0xffffffb4
   128d4:	mov	r0, #0
   128d8:	cmp	r9, #10
   128dc:	str	r1, [sp, #68]	; 0x44
   128e0:	bhi	138e0 <__assert_fail@plt+0x2880>
   128e4:	add	r1, pc, #28
   128e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   128ec:	ldr	lr, [sp, #80]	; 0x50
   128f0:	mov	r6, r4
   128f4:	mov	r8, #0
   128f8:	mov	r3, #1
   128fc:	mov	sl, #0
   12900:	mov	r4, r2
   12904:	ldr	pc, [r1, r9, lsl #2]
   12908:	ldrdeq	r2, [r1], -r8
   1290c:	andeq	r2, r1, r4, lsl sl
   12910:	andeq	r2, r1, r8, ror #19
   12914:	ldrdeq	r2, [r1], -r0
   12918:	andeq	r2, r1, r8, lsl #20
   1291c:	andeq	r2, r1, r0, ror #20
   12920:	strdeq	r2, [r1], -r8
   12924:	andeq	r2, r1, r0, asr #21
   12928:	andeq	r2, r1, r4, lsr r9
   1292c:	andeq	r2, r1, r4, lsr r9
   12930:	andeq	r2, r1, ip, asr r9
   12934:	movw	r0, #22686	; 0x589e
   12938:	mov	r1, r9
   1293c:	movt	r0, #1
   12940:	bl	14048 <__assert_fail@plt+0x2fe8>
   12944:	str	r0, [sp, #64]	; 0x40
   12948:	movw	r0, #22516	; 0x57f4
   1294c:	mov	r1, r9
   12950:	movt	r0, #1
   12954:	bl	14048 <__assert_fail@plt+0x2fe8>
   12958:	str	r0, [sp, #72]	; 0x48
   1295c:	mov	r8, #0
   12960:	mov	sl, r7
   12964:	tst	r7, #1
   12968:	str	r5, [fp, #-48]	; 0xffffffd0
   1296c:	bne	129a8 <__assert_fail@plt+0x1948>
   12970:	ldr	r0, [sp, #64]	; 0x40
   12974:	ldrb	r0, [r0]
   12978:	cmp	r0, #0
   1297c:	beq	129a8 <__assert_fail@plt+0x1948>
   12980:	ldr	r1, [sp, #64]	; 0x40
   12984:	mov	r8, #0
   12988:	add	r1, r1, #1
   1298c:	cmp	r8, r6
   12990:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12994:	strbcc	r0, [r2, r8]
   12998:	ldrb	r0, [r1, r8]
   1299c:	add	r8, r8, #1
   129a0:	cmp	r0, #0
   129a4:	bne	1298c <__assert_fail@plt+0x192c>
   129a8:	ldr	r7, [sp, #72]	; 0x48
   129ac:	mov	r0, r7
   129b0:	bl	10f70 <strlen@plt>
   129b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   129b8:	ldr	lr, [sp, #80]	; 0x50
   129bc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   129c0:	str	r0, [fp, #-76]	; 0xffffffb4
   129c4:	str	r7, [sp, #92]	; 0x5c
   129c8:	mov	r3, #1
   129cc:	b	12ac0 <__assert_fail@plt+0x1a60>
   129d0:	mov	r0, #1
   129d4:	b	12a14 <__assert_fail@plt+0x19b4>
   129d8:	mov	r9, #0
   129dc:	mov	r8, #0
   129e0:	mov	r3, r0
   129e4:	b	12abc <__assert_fail@plt+0x1a5c>
   129e8:	tst	r7, #1
   129ec:	bne	12a14 <__assert_fail@plt+0x19b4>
   129f0:	mov	r3, r0
   129f4:	b	12a3c <__assert_fail@plt+0x19dc>
   129f8:	mov	r0, #1
   129fc:	mov	r8, #0
   12a00:	mov	r9, #5
   12a04:	b	12a74 <__assert_fail@plt+0x1a14>
   12a08:	mov	r3, #1
   12a0c:	tst	r7, #1
   12a10:	beq	12a3c <__assert_fail@plt+0x19dc>
   12a14:	mov	r1, #1
   12a18:	mov	r8, #0
   12a1c:	mov	r9, #2
   12a20:	mov	r3, r0
   12a24:	mov	sl, #1
   12a28:	str	r1, [fp, #-76]	; 0xffffffb4
   12a2c:	movw	r1, #22516	; 0x57f4
   12a30:	movt	r1, #1
   12a34:	str	r1, [sp, #92]	; 0x5c
   12a38:	b	12ac0 <__assert_fail@plt+0x1a60>
   12a3c:	cmp	r6, #0
   12a40:	mov	r8, #1
   12a44:	mov	r9, #2
   12a48:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   12a4c:	movne	r0, #39	; 0x27
   12a50:	strbne	r0, [r1]
   12a54:	movw	r0, #22516	; 0x57f4
   12a58:	movt	r0, #1
   12a5c:	b	12ab0 <__assert_fail@plt+0x1a50>
   12a60:	mov	r9, #5
   12a64:	tst	r7, #1
   12a68:	beq	12a90 <__assert_fail@plt+0x1a30>
   12a6c:	mov	r0, #1
   12a70:	mov	r8, #0
   12a74:	str	r0, [fp, #-76]	; 0xffffffb4
   12a78:	movw	r0, #22684	; 0x589c
   12a7c:	mov	r3, #1
   12a80:	mov	sl, #1
   12a84:	movt	r0, #1
   12a88:	str	r0, [sp, #92]	; 0x5c
   12a8c:	b	12ac0 <__assert_fail@plt+0x1a60>
   12a90:	cmp	r6, #0
   12a94:	mov	r8, #1
   12a98:	mov	r3, #1
   12a9c:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   12aa0:	movne	r0, #34	; 0x22
   12aa4:	strbne	r0, [r1]
   12aa8:	movw	r0, #22684	; 0x589c
   12aac:	movt	r0, #1
   12ab0:	str	r0, [sp, #92]	; 0x5c
   12ab4:	mov	r0, #1
   12ab8:	str	r0, [fp, #-76]	; 0xffffffb4
   12abc:	mov	sl, #0
   12ac0:	ldr	r0, [fp, #16]
   12ac4:	mov	r7, #0
   12ac8:	str	r9, [fp, #-64]	; 0xffffffc0
   12acc:	str	sl, [fp, #-72]	; 0xffffffb8
   12ad0:	str	r3, [sp, #84]	; 0x54
   12ad4:	cmp	r0, #0
   12ad8:	movwne	r0, #1
   12adc:	and	r0, r0, sl
   12ae0:	str	r0, [fp, #-88]	; 0xffffffa8
   12ae4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12ae8:	cmp	r0, #0
   12aec:	movwne	r0, #1
   12af0:	subs	r2, r9, #2
   12af4:	and	r1, r0, sl
   12af8:	str	r2, [fp, #-80]	; 0xffffffb0
   12afc:	and	r1, r3, r1
   12b00:	str	r1, [sp, #44]	; 0x2c
   12b04:	clz	r1, r2
   12b08:	lsr	r1, r1, #5
   12b0c:	and	r1, r1, sl
   12b10:	str	r1, [sp, #56]	; 0x38
   12b14:	mov	r1, r2
   12b18:	eor	r2, sl, #1
   12b1c:	movwne	r1, #1
   12b20:	str	r2, [sp, #88]	; 0x58
   12b24:	orr	r2, r1, r2
   12b28:	and	r1, r1, r3
   12b2c:	and	r0, r0, r1
   12b30:	str	r2, [sp, #60]	; 0x3c
   12b34:	str	r1, [fp, #-68]	; 0xffffffbc
   12b38:	str	r0, [fp, #-60]	; 0xffffffc4
   12b3c:	eor	r0, r3, #1
   12b40:	str	r0, [sp, #48]	; 0x30
   12b44:	cmn	lr, #1
   12b48:	beq	12b58 <__assert_fail@plt+0x1af8>
   12b4c:	cmp	r7, lr
   12b50:	bne	12b64 <__assert_fail@plt+0x1b04>
   12b54:	b	13710 <__assert_fail@plt+0x26b0>
   12b58:	ldrb	r0, [ip, r7]
   12b5c:	cmp	r0, #0
   12b60:	beq	13718 <__assert_fail@plt+0x26b8>
   12b64:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12b68:	mov	r9, #0
   12b6c:	str	r5, [fp, #-48]	; 0xffffffd0
   12b70:	str	r6, [fp, #-52]	; 0xffffffcc
   12b74:	cmp	r0, #0
   12b78:	beq	12bb8 <__assert_fail@plt+0x1b58>
   12b7c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b80:	mov	r5, r4
   12b84:	add	r4, r7, r0
   12b88:	cmp	r0, #2
   12b8c:	bcc	12ba8 <__assert_fail@plt+0x1b48>
   12b90:	cmn	lr, #1
   12b94:	bne	12ba8 <__assert_fail@plt+0x1b48>
   12b98:	mov	r0, ip
   12b9c:	bl	10f70 <strlen@plt>
   12ba0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ba4:	mov	lr, r0
   12ba8:	cmp	r4, lr
   12bac:	bls	12bc0 <__assert_fail@plt+0x1b60>
   12bb0:	mov	r6, #0
   12bb4:	b	12c00 <__assert_fail@plt+0x1ba0>
   12bb8:	mov	r6, #0
   12bbc:	b	12c04 <__assert_fail@plt+0x1ba4>
   12bc0:	ldr	r1, [sp, #92]	; 0x5c
   12bc4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12bc8:	add	r0, ip, r7
   12bcc:	mov	r4, lr
   12bd0:	bl	10e8c <memcmp@plt>
   12bd4:	ldr	r2, [sp, #88]	; 0x58
   12bd8:	cmp	r0, #0
   12bdc:	mov	r1, r0
   12be0:	movwne	r1, #1
   12be4:	orr	r1, r1, r2
   12be8:	tst	r1, #1
   12bec:	beq	137ac <__assert_fail@plt+0x274c>
   12bf0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12bf4:	clz	r0, r0
   12bf8:	mov	lr, r4
   12bfc:	lsr	r6, r0, #5
   12c00:	mov	r4, r5
   12c04:	ldrb	r5, [ip, r7]
   12c08:	cmp	r5, #126	; 0x7e
   12c0c:	bhi	12fd4 <__assert_fail@plt+0x1f74>
   12c10:	add	r3, pc, #16
   12c14:	mov	sl, #1
   12c18:	mov	r2, #110	; 0x6e
   12c1c:	mov	r0, #97	; 0x61
   12c20:	mov	r1, #0
   12c24:	ldr	pc, [r3, r5, lsl #2]
   12c28:			; <UNDEFINED> instruction: 0x00012eb8
   12c2c:	ldrdeq	r2, [r1], -r4
   12c30:	ldrdeq	r2, [r1], -r4
   12c34:	ldrdeq	r2, [r1], -r4
   12c38:	ldrdeq	r2, [r1], -r4
   12c3c:	ldrdeq	r2, [r1], -r4
   12c40:	ldrdeq	r2, [r1], -r4
   12c44:	andeq	r3, r1, r8, ror r0
   12c48:	muleq	r1, r8, lr
   12c4c:	muleq	r1, r0, lr
   12c50:	andeq	r2, r1, r4, lsr #29
   12c54:	andeq	r2, r1, r8, lsr #30
   12c58:	andeq	r2, r1, r8, lsl #29
   12c5c:	andeq	r2, r1, r0, lsr #29
   12c60:	ldrdeq	r2, [r1], -r4
   12c64:	ldrdeq	r2, [r1], -r4
   12c68:	ldrdeq	r2, [r1], -r4
   12c6c:	ldrdeq	r2, [r1], -r4
   12c70:	ldrdeq	r2, [r1], -r4
   12c74:	ldrdeq	r2, [r1], -r4
   12c78:	ldrdeq	r2, [r1], -r4
   12c7c:	ldrdeq	r2, [r1], -r4
   12c80:	ldrdeq	r2, [r1], -r4
   12c84:	ldrdeq	r2, [r1], -r4
   12c88:	ldrdeq	r2, [r1], -r4
   12c8c:	ldrdeq	r2, [r1], -r4
   12c90:	ldrdeq	r2, [r1], -r4
   12c94:	ldrdeq	r2, [r1], -r4
   12c98:	ldrdeq	r2, [r1], -r4
   12c9c:	ldrdeq	r2, [r1], -r4
   12ca0:	ldrdeq	r2, [r1], -r4
   12ca4:	ldrdeq	r2, [r1], -r4
   12ca8:	andeq	r3, r1, r8, lsr r0
   12cac:	andeq	r3, r1, ip, lsr r0
   12cb0:	andeq	r3, r1, ip, lsr r0
   12cb4:	andeq	r2, r1, r8, lsr lr
   12cb8:	andeq	r3, r1, ip, lsr r0
   12cbc:	andeq	r2, r1, r4, lsr #28
   12cc0:	andeq	r3, r1, ip, lsr r0
   12cc4:	andeq	r2, r1, r0, lsr pc
   12cc8:	andeq	r3, r1, ip, lsr r0
   12ccc:	andeq	r3, r1, ip, lsr r0
   12cd0:	andeq	r3, r1, ip, lsr r0
   12cd4:	andeq	r2, r1, r4, lsr #28
   12cd8:	andeq	r2, r1, r4, lsr #28
   12cdc:	andeq	r2, r1, r4, lsr #28
   12ce0:	andeq	r2, r1, r4, lsr #28
   12ce4:	andeq	r2, r1, r4, lsr #28
   12ce8:	andeq	r2, r1, r4, lsr #28
   12cec:	andeq	r2, r1, r4, lsr #28
   12cf0:	andeq	r2, r1, r4, lsr #28
   12cf4:	andeq	r2, r1, r4, lsr #28
   12cf8:	andeq	r2, r1, r4, lsr #28
   12cfc:	andeq	r2, r1, r4, lsr #28
   12d00:	andeq	r2, r1, r4, lsr #28
   12d04:	andeq	r2, r1, r4, lsr #28
   12d08:	andeq	r2, r1, r4, lsr #28
   12d0c:	andeq	r2, r1, r4, lsr #28
   12d10:	andeq	r2, r1, r4, lsr #28
   12d14:	andeq	r3, r1, ip, lsr r0
   12d18:	andeq	r3, r1, ip, lsr r0
   12d1c:	andeq	r3, r1, ip, lsr r0
   12d20:	andeq	r3, r1, ip, lsr r0
   12d24:	strdeq	r2, [r1], -ip
   12d28:	ldrdeq	r2, [r1], -r4
   12d2c:	andeq	r2, r1, r4, lsr #28
   12d30:	andeq	r2, r1, r4, lsr #28
   12d34:	andeq	r2, r1, r4, lsr #28
   12d38:	andeq	r2, r1, r4, lsr #28
   12d3c:	andeq	r2, r1, r4, lsr #28
   12d40:	andeq	r2, r1, r4, lsr #28
   12d44:	andeq	r2, r1, r4, lsr #28
   12d48:	andeq	r2, r1, r4, lsr #28
   12d4c:	andeq	r2, r1, r4, lsr #28
   12d50:	andeq	r2, r1, r4, lsr #28
   12d54:	andeq	r2, r1, r4, lsr #28
   12d58:	andeq	r2, r1, r4, lsr #28
   12d5c:	andeq	r2, r1, r4, lsr #28
   12d60:	andeq	r2, r1, r4, lsr #28
   12d64:	andeq	r2, r1, r4, lsr #28
   12d68:	andeq	r2, r1, r4, lsr #28
   12d6c:	andeq	r2, r1, r4, lsr #28
   12d70:	andeq	r2, r1, r4, lsr #28
   12d74:	andeq	r2, r1, r4, lsr #28
   12d78:	andeq	r2, r1, r4, lsr #28
   12d7c:	andeq	r2, r1, r4, lsr #28
   12d80:	andeq	r2, r1, r4, lsr #28
   12d84:	andeq	r2, r1, r4, lsr #28
   12d88:	andeq	r2, r1, r4, lsr #28
   12d8c:	andeq	r2, r1, r4, lsr #28
   12d90:	andeq	r2, r1, r4, lsr #28
   12d94:	andeq	r3, r1, ip, lsr r0
   12d98:	andeq	r2, r1, r4, ror #28
   12d9c:	andeq	r2, r1, r4, lsr #28
   12da0:	andeq	r3, r1, ip, lsr r0
   12da4:	andeq	r2, r1, r4, lsr #28
   12da8:	andeq	r3, r1, ip, lsr r0
   12dac:	andeq	r2, r1, r4, lsr #28
   12db0:	andeq	r2, r1, r4, lsr #28
   12db4:	andeq	r2, r1, r4, lsr #28
   12db8:	andeq	r2, r1, r4, lsr #28
   12dbc:	andeq	r2, r1, r4, lsr #28
   12dc0:	andeq	r2, r1, r4, lsr #28
   12dc4:	andeq	r2, r1, r4, lsr #28
   12dc8:	andeq	r2, r1, r4, lsr #28
   12dcc:	andeq	r2, r1, r4, lsr #28
   12dd0:	andeq	r2, r1, r4, lsr #28
   12dd4:	andeq	r2, r1, r4, lsr #28
   12dd8:	andeq	r2, r1, r4, lsr #28
   12ddc:	andeq	r2, r1, r4, lsr #28
   12de0:	andeq	r2, r1, r4, lsr #28
   12de4:	andeq	r2, r1, r4, lsr #28
   12de8:	andeq	r2, r1, r4, lsr #28
   12dec:	andeq	r2, r1, r4, lsr #28
   12df0:	andeq	r2, r1, r4, lsr #28
   12df4:	andeq	r2, r1, r4, lsr #28
   12df8:	andeq	r2, r1, r4, lsr #28
   12dfc:	andeq	r2, r1, r4, lsr #28
   12e00:	andeq	r2, r1, r4, lsr #28
   12e04:	andeq	r2, r1, r4, lsr #28
   12e08:	andeq	r2, r1, r4, lsr #28
   12e0c:	andeq	r2, r1, r4, lsr #28
   12e10:	andeq	r2, r1, r4, lsr #28
   12e14:	andeq	r2, r1, r8, asr #28
   12e18:	andeq	r3, r1, ip, lsr r0
   12e1c:	andeq	r2, r1, r8, asr #28
   12e20:	andeq	r2, r1, r8, lsr lr
   12e24:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12e28:	cmp	r0, #0
   12e2c:	beq	1308c <__assert_fail@plt+0x202c>
   12e30:	ldr	r0, [fp, #16]
   12e34:	b	13090 <__assert_fail@plt+0x2030>
   12e38:	mov	sl, #0
   12e3c:	cmp	r7, #0
   12e40:	bne	132a8 <__assert_fail@plt+0x2248>
   12e44:	b	13038 <__assert_fail@plt+0x1fd8>
   12e48:	mov	sl, #0
   12e4c:	cmn	lr, #1
   12e50:	beq	13024 <__assert_fail@plt+0x1fc4>
   12e54:	cmp	r7, #0
   12e58:	cmpeq	lr, #1
   12e5c:	bne	132a8 <__assert_fail@plt+0x2248>
   12e60:	b	13038 <__assert_fail@plt+0x1fd8>
   12e64:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e68:	cmp	r0, #2
   12e6c:	bne	1305c <__assert_fail@plt+0x1ffc>
   12e70:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12e74:	tst	r0, #1
   12e78:	bne	137c8 <__assert_fail@plt+0x2768>
   12e7c:	mov	r9, #0
   12e80:	mov	r0, #92	; 0x5c
   12e84:	b	13070 <__assert_fail@plt+0x2010>
   12e88:	mov	r0, #102	; 0x66
   12e8c:	b	13078 <__assert_fail@plt+0x2018>
   12e90:	mov	r2, #116	; 0x74
   12e94:	b	12ea4 <__assert_fail@plt+0x1e44>
   12e98:	mov	r0, #98	; 0x62
   12e9c:	b	13078 <__assert_fail@plt+0x2018>
   12ea0:	mov	r2, #114	; 0x72
   12ea4:	ldr	r0, [sp, #60]	; 0x3c
   12ea8:	tst	r0, #1
   12eac:	mov	r0, r2
   12eb0:	bne	13078 <__assert_fail@plt+0x2018>
   12eb4:	b	137c8 <__assert_fail@plt+0x2768>
   12eb8:	ldr	r0, [sp, #84]	; 0x54
   12ebc:	tst	r0, #1
   12ec0:	beq	13164 <__assert_fail@plt+0x2104>
   12ec4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ec8:	tst	r0, #1
   12ecc:	bne	138d0 <__assert_fail@plt+0x2870>
   12ed0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12ed4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12ed8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12edc:	cmp	r0, #2
   12ee0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12ee4:	movwne	r0, #1
   12ee8:	orr	r0, r0, r3
   12eec:	tst	r0, #1
   12ef0:	beq	135e4 <__assert_fail@plt+0x2584>
   12ef4:	mov	r0, r8
   12ef8:	b	13624 <__assert_fail@plt+0x25c4>
   12efc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f00:	mov	r9, #0
   12f04:	mov	r5, #63	; 0x3f
   12f08:	cmp	r0, #5
   12f0c:	beq	132b0 <__assert_fail@plt+0x2250>
   12f10:	cmp	r0, #2
   12f14:	bne	13370 <__assert_fail@plt+0x2310>
   12f18:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f1c:	tst	r0, #1
   12f20:	beq	13374 <__assert_fail@plt+0x2314>
   12f24:	b	137c8 <__assert_fail@plt+0x2768>
   12f28:	mov	r0, #118	; 0x76
   12f2c:	b	13078 <__assert_fail@plt+0x2018>
   12f30:	mov	r0, #1
   12f34:	mov	r5, #39	; 0x27
   12f38:	str	r0, [sp, #52]	; 0x34
   12f3c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12f40:	cmp	r0, #2
   12f44:	bne	12fcc <__assert_fail@plt+0x1f6c>
   12f48:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12f4c:	tst	r0, #1
   12f50:	bne	137c8 <__assert_fail@plt+0x2768>
   12f54:	ldr	r3, [sp, #68]	; 0x44
   12f58:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12f5c:	mov	r9, #0
   12f60:	clz	r1, r2
   12f64:	cmp	r3, #0
   12f68:	mov	r0, r3
   12f6c:	movwne	r0, #1
   12f70:	lsr	r1, r1, #5
   12f74:	orrs	r0, r0, r1
   12f78:	moveq	r3, r2
   12f7c:	moveq	r2, r0
   12f80:	cmp	r8, r2
   12f84:	str	r3, [sp, #68]	; 0x44
   12f88:	str	r2, [fp, #-52]	; 0xffffffcc
   12f8c:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   12f90:	movcc	r0, #39	; 0x27
   12f94:	strbcc	r0, [r1, r8]
   12f98:	add	r0, r8, #1
   12f9c:	cmp	r0, r2
   12fa0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   12fa4:	movcc	r1, #92	; 0x5c
   12fa8:	strbcc	r1, [r3, r0]
   12fac:	add	r0, r8, #2
   12fb0:	add	r8, r8, #3
   12fb4:	cmp	r0, r2
   12fb8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   12fbc:	movcc	r1, #39	; 0x27
   12fc0:	strbcc	r1, [r2, r0]
   12fc4:	mov	r0, #0
   12fc8:	str	r0, [fp, #-48]	; 0xffffffd0
   12fcc:	mov	sl, #1
   12fd0:	b	12e24 <__assert_fail@plt+0x1dc4>
   12fd4:	ldr	r0, [sp, #32]
   12fd8:	cmp	r0, #1
   12fdc:	bne	13188 <__assert_fail@plt+0x2128>
   12fe0:	str	lr, [sp, #80]	; 0x50
   12fe4:	bl	10f58 <__ctype_b_loc@plt>
   12fe8:	ldr	r0, [r0]
   12fec:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ff0:	mov	r1, #1
   12ff4:	add	r0, r0, r5, lsl #1
   12ff8:	ldrb	r0, [r0, #1]
   12ffc:	ubfx	sl, r0, #6, #1
   13000:	ldr	r0, [sp, #48]	; 0x30
   13004:	mov	r2, r1
   13008:	cmp	r1, #1
   1300c:	orr	r0, sl, r0
   13010:	bhi	1337c <__assert_fail@plt+0x231c>
   13014:	tst	r0, #1
   13018:	beq	1337c <__assert_fail@plt+0x231c>
   1301c:	ldr	lr, [sp, #80]	; 0x50
   13020:	b	12e24 <__assert_fail@plt+0x1dc4>
   13024:	cmp	r7, #0
   13028:	bne	132a4 <__assert_fail@plt+0x2244>
   1302c:	ldrb	r0, [ip, #1]
   13030:	cmp	r0, #0
   13034:	bne	132a4 <__assert_fail@plt+0x2244>
   13038:	mov	r1, #1
   1303c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13040:	cmp	r0, #2
   13044:	bne	13054 <__assert_fail@plt+0x1ff4>
   13048:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1304c:	tst	r0, #1
   13050:	bne	137c8 <__assert_fail@plt+0x2768>
   13054:	mov	sl, r1
   13058:	b	12e24 <__assert_fail@plt+0x1dc4>
   1305c:	ldr	r1, [sp, #44]	; 0x2c
   13060:	mov	r9, #0
   13064:	mov	r0, #92	; 0x5c
   13068:	cmp	r1, #0
   1306c:	beq	13078 <__assert_fail@plt+0x2018>
   13070:	mov	sl, #0
   13074:	b	13590 <__assert_fail@plt+0x2530>
   13078:	ldr	r1, [sp, #84]	; 0x54
   1307c:	mov	sl, #0
   13080:	mov	r9, #0
   13084:	tst	r1, #1
   13088:	bne	130c4 <__assert_fail@plt+0x2064>
   1308c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13090:	cmp	r0, #0
   13094:	mov	r0, r5
   13098:	beq	130bc <__assert_fail@plt+0x205c>
   1309c:	ldr	r1, [fp, #16]
   130a0:	ubfx	r0, r5, #5, #3
   130a4:	mov	r2, #1
   130a8:	ldr	r0, [r1, r0, lsl #2]
   130ac:	and	r1, r5, #31
   130b0:	tst	r0, r2, lsl r1
   130b4:	mov	r0, r5
   130b8:	bne	130c4 <__assert_fail@plt+0x2064>
   130bc:	cmp	r6, #0
   130c0:	beq	13590 <__assert_fail@plt+0x2530>
   130c4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   130c8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   130cc:	tst	r1, #1
   130d0:	bne	137a4 <__assert_fail@plt+0x2744>
   130d4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   130d8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   130dc:	cmp	r1, #2
   130e0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   130e4:	movwne	r1, #1
   130e8:	orr	r1, r1, r5
   130ec:	tst	r1, #1
   130f0:	bne	13134 <__assert_fail@plt+0x20d4>
   130f4:	cmp	r8, r6
   130f8:	mov	r5, #1
   130fc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13100:	movcc	r1, #39	; 0x27
   13104:	strbcc	r1, [r2, r8]
   13108:	add	r1, r8, #1
   1310c:	cmp	r1, r6
   13110:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13114:	movcc	r2, #36	; 0x24
   13118:	strbcc	r2, [r3, r1]
   1311c:	add	r1, r8, #2
   13120:	add	r8, r8, #3
   13124:	cmp	r1, r6
   13128:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1312c:	movcc	r2, #39	; 0x27
   13130:	strbcc	r2, [r3, r1]
   13134:	cmp	r8, r6
   13138:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1313c:	movcc	r1, #92	; 0x5c
   13140:	strbcc	r1, [r2, r8]
   13144:	add	r8, r8, #1
   13148:	cmp	r8, r6
   1314c:	and	r4, r4, sl
   13150:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   13154:	strbcc	r0, [r1, r8]
   13158:	add	r8, r8, #1
   1315c:	add	r7, r7, #1
   13160:	b	12b44 <__assert_fail@plt+0x1ae4>
   13164:	ldr	r0, [sp, #28]
   13168:	mov	sl, #0
   1316c:	mov	r9, #0
   13170:	mov	r5, #0
   13174:	cmp	r0, #0
   13178:	beq	1308c <__assert_fail@plt+0x202c>
   1317c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13180:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13184:	b	1315c <__assert_fail@plt+0x20fc>
   13188:	mov	r0, #0
   1318c:	cmn	lr, #1
   13190:	str	r6, [sp, #76]	; 0x4c
   13194:	str	r4, [sp, #20]
   13198:	str	r0, [fp, #-36]	; 0xffffffdc
   1319c:	str	r0, [fp, #-40]	; 0xffffffd8
   131a0:	bne	131b4 <__assert_fail@plt+0x2154>
   131a4:	mov	r0, ip
   131a8:	bl	10f70 <strlen@plt>
   131ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   131b0:	mov	lr, r0
   131b4:	add	r0, ip, r7
   131b8:	mov	sl, #1
   131bc:	mov	r6, #0
   131c0:	sub	r4, fp, #40	; 0x28
   131c4:	str	lr, [sp, #80]	; 0x50
   131c8:	str	r0, [sp, #36]	; 0x24
   131cc:	str	r6, [sp, #40]	; 0x28
   131d0:	add	r6, r6, r7
   131d4:	sub	r0, fp, #44	; 0x2c
   131d8:	mov	r3, r4
   131dc:	add	r1, ip, r6
   131e0:	sub	r2, lr, r6
   131e4:	bl	14c44 <__assert_fail@plt+0x3be4>
   131e8:	cmp	r0, #0
   131ec:	beq	136f8 <__assert_fail@plt+0x2698>
   131f0:	cmn	r0, #1
   131f4:	beq	136b8 <__assert_fail@plt+0x2658>
   131f8:	ldr	lr, [sp, #80]	; 0x50
   131fc:	cmn	r0, #2
   13200:	beq	136c0 <__assert_fail@plt+0x2660>
   13204:	ldr	r2, [sp, #56]	; 0x38
   13208:	cmp	r0, #2
   1320c:	mov	r1, #0
   13210:	movwcc	r1, #1
   13214:	eor	r2, r2, #1
   13218:	orrs	r1, r2, r1
   1321c:	bne	13268 <__assert_fail@plt+0x2208>
   13220:	ldr	r1, [sp, #40]	; 0x28
   13224:	ldr	r2, [sp, #36]	; 0x24
   13228:	add	ip, r2, r1
   1322c:	mov	r2, #1
   13230:	ldrb	r3, [ip, r2]
   13234:	sub	r6, r3, #94	; 0x5e
   13238:	cmp	r6, #30
   1323c:	bhi	13250 <__assert_fail@plt+0x21f0>
   13240:	mov	r4, #1
   13244:	mov	r1, #1073741829	; 0x40000005
   13248:	tst	r1, r4, lsl r6
   1324c:	bne	137c4 <__assert_fail@plt+0x2764>
   13250:	sub	r3, r3, #91	; 0x5b
   13254:	cmp	r3, #2
   13258:	bcc	137c4 <__assert_fail@plt+0x2764>
   1325c:	add	r2, r2, #1
   13260:	cmp	r2, r0
   13264:	bcc	13230 <__assert_fail@plt+0x21d0>
   13268:	ldr	r6, [sp, #40]	; 0x28
   1326c:	add	r6, r0, r6
   13270:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13274:	bl	10ec8 <iswprint@plt>
   13278:	cmp	r0, #0
   1327c:	sub	r4, fp, #40	; 0x28
   13280:	movwne	r0, #1
   13284:	and	sl, sl, r0
   13288:	mov	r0, r4
   1328c:	bl	10e74 <mbsinit@plt>
   13290:	ldr	lr, [sp, #80]	; 0x50
   13294:	ldr	ip, [fp, #-84]	; 0xffffffac
   13298:	cmp	r0, #0
   1329c:	beq	131cc <__assert_fail@plt+0x216c>
   132a0:	b	13700 <__assert_fail@plt+0x26a0>
   132a4:	mvn	lr, #0
   132a8:	mov	r9, #0
   132ac:	b	12e24 <__assert_fail@plt+0x1dc4>
   132b0:	ldr	r0, [sp, #24]
   132b4:	cmp	r0, #0
   132b8:	beq	13370 <__assert_fail@plt+0x2310>
   132bc:	add	r0, r7, #2
   132c0:	cmp	r0, lr
   132c4:	bcs	13370 <__assert_fail@plt+0x2310>
   132c8:	add	r1, ip, r7
   132cc:	ldrb	r1, [r1, #1]
   132d0:	cmp	r1, #63	; 0x3f
   132d4:	bne	13370 <__assert_fail@plt+0x2310>
   132d8:	ldrb	r5, [ip, r0]
   132dc:	sub	r1, r5, #33	; 0x21
   132e0:	cmp	r1, #29
   132e4:	bhi	13370 <__assert_fail@plt+0x2310>
   132e8:	movw	r3, #20929	; 0x51c1
   132ec:	mov	r2, #1
   132f0:	movt	r3, #14336	; 0x3800
   132f4:	tst	r3, r2, lsl r1
   132f8:	beq	13370 <__assert_fail@plt+0x2310>
   132fc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13300:	tst	r1, #1
   13304:	bne	138d8 <__assert_fail@plt+0x2878>
   13308:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1330c:	mov	r7, r0
   13310:	cmp	r8, r1
   13314:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13318:	movcc	r1, #63	; 0x3f
   1331c:	strbcc	r1, [r2, r8]
   13320:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13324:	add	r1, r8, #1
   13328:	cmp	r1, r2
   1332c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13330:	movcc	r2, #34	; 0x22
   13334:	strbcc	r2, [r3, r1]
   13338:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1333c:	add	r1, r8, #2
   13340:	cmp	r1, r2
   13344:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13348:	movcc	r2, #34	; 0x22
   1334c:	strbcc	r2, [r3, r1]
   13350:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13354:	add	r1, r8, #3
   13358:	add	r8, r8, #4
   1335c:	cmp	r1, r2
   13360:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13364:	movcc	r2, #63	; 0x3f
   13368:	strbcc	r2, [r3, r1]
   1336c:	b	13374 <__assert_fail@plt+0x2314>
   13370:	mov	r5, #63	; 0x3f
   13374:	mov	sl, #0
   13378:	b	12e24 <__assert_fail@plt+0x1dc4>
   1337c:	str	r0, [sp, #40]	; 0x28
   13380:	add	r0, r2, r7
   13384:	str	r6, [sp, #76]	; 0x4c
   13388:	add	r1, r7, #1
   1338c:	ldr	lr, [sp, #80]	; 0x50
   13390:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13394:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13398:	mov	r3, #0
   1339c:	str	r0, [sp, #36]	; 0x24
   133a0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   133a4:	b	13438 <__assert_fail@plt+0x23d8>
   133a8:	str	r0, [sp, #76]	; 0x4c
   133ac:	ldr	r0, [fp, #-48]	; 0xffffffd0
   133b0:	cmp	r9, #0
   133b4:	movwne	r9, #1
   133b8:	mvn	r7, r0
   133bc:	orr	r7, r7, r9
   133c0:	tst	r7, #1
   133c4:	bne	13414 <__assert_fail@plt+0x23b4>
   133c8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   133cc:	cmp	r8, r6
   133d0:	bcs	133e8 <__assert_fail@plt+0x2388>
   133d4:	ldr	r7, [fp, #-56]	; 0xffffffc8
   133d8:	mov	r2, r4
   133dc:	mov	r4, #39	; 0x27
   133e0:	strb	r4, [r7, r8]
   133e4:	mov	r4, r2
   133e8:	add	r7, r8, #1
   133ec:	cmp	r7, r6
   133f0:	bcs	13408 <__assert_fail@plt+0x23a8>
   133f4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   133f8:	mov	r2, r4
   133fc:	mov	r4, #39	; 0x27
   13400:	strb	r4, [r0, r7]
   13404:	mov	r4, r2
   13408:	add	r8, r8, #2
   1340c:	mov	r0, #0
   13410:	b	1341c <__assert_fail@plt+0x23bc>
   13414:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13418:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1341c:	cmp	r8, r6
   13420:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13424:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13428:	strbcc	r5, [r2, r8]
   1342c:	add	r8, r8, #1
   13430:	ldrb	r5, [ip, r1]
   13434:	add	r1, r1, #1
   13438:	ldr	r2, [sp, #40]	; 0x28
   1343c:	tst	r2, #1
   13440:	beq	1347c <__assert_fail@plt+0x241c>
   13444:	ldr	r2, [sp, #76]	; 0x4c
   13448:	str	r0, [fp, #-48]	; 0xffffffd0
   1344c:	tst	r2, #1
   13450:	beq	13474 <__assert_fail@plt+0x2414>
   13454:	cmp	r8, r6
   13458:	bcs	13470 <__assert_fail@plt+0x2410>
   1345c:	ldr	r6, [fp, #-56]	; 0xffffffc8
   13460:	mov	r2, r4
   13464:	mov	r4, #92	; 0x5c
   13468:	strb	r4, [r6, r8]
   1346c:	mov	r4, r2
   13470:	add	r8, r8, #1
   13474:	mov	r0, #0
   13478:	b	13570 <__assert_fail@plt+0x2510>
   1347c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13480:	tst	r2, #1
   13484:	bne	137d0 <__assert_fail@plt+0x2770>
   13488:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1348c:	cmp	r7, #2
   13490:	movwne	r3, #1
   13494:	orr	r3, r3, r0
   13498:	tst	r3, #1
   1349c:	bne	134f8 <__assert_fail@plt+0x2498>
   134a0:	cmp	r8, r6
   134a4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   134a8:	movcc	r3, #39	; 0x27
   134ac:	strbcc	r3, [r2, r8]
   134b0:	add	r3, r8, #1
   134b4:	cmp	r3, r6
   134b8:	bcs	134d0 <__assert_fail@plt+0x2470>
   134bc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   134c0:	mov	r7, r4
   134c4:	mov	r4, #36	; 0x24
   134c8:	strb	r4, [r2, r3]
   134cc:	mov	r4, r7
   134d0:	add	r3, r8, #2
   134d4:	cmp	r3, r6
   134d8:	bcs	134f0 <__assert_fail@plt+0x2490>
   134dc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   134e0:	mov	r7, r4
   134e4:	mov	r4, #39	; 0x27
   134e8:	strb	r4, [r2, r3]
   134ec:	mov	r4, r7
   134f0:	add	r8, r8, #3
   134f4:	mov	r0, #1
   134f8:	cmp	r8, r6
   134fc:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13500:	movcc	r3, #92	; 0x5c
   13504:	strbcc	r3, [r2, r8]
   13508:	add	r3, r8, #1
   1350c:	cmp	r3, r6
   13510:	bcs	13530 <__assert_fail@plt+0x24d0>
   13514:	mov	r2, r4
   13518:	and	r7, r5, #192	; 0xc0
   1351c:	mov	r4, #48	; 0x30
   13520:	orr	r7, r4, r7, lsr #6
   13524:	mov	r4, r2
   13528:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1352c:	strb	r7, [r2, r3]
   13530:	add	r3, r8, #2
   13534:	cmp	r3, r6
   13538:	bcs	13558 <__assert_fail@plt+0x24f8>
   1353c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13540:	mov	r6, r4
   13544:	lsr	r7, r5, #3
   13548:	mov	r4, #6
   1354c:	bfi	r7, r4, #3, #29
   13550:	mov	r4, r6
   13554:	strb	r7, [r2, r3]
   13558:	str	r0, [fp, #-48]	; 0xffffffd0
   1355c:	ldr	r0, [sp, #76]	; 0x4c
   13560:	mov	r3, #6
   13564:	add	r8, r8, #3
   13568:	bfi	r5, r3, #3, #29
   1356c:	mov	r3, #1
   13570:	ldr	r2, [sp, #36]	; 0x24
   13574:	and	r9, r3, #1
   13578:	cmp	r2, r1
   1357c:	bhi	133a8 <__assert_fail@plt+0x2348>
   13580:	cmp	r9, #0
   13584:	sub	r7, r1, #1
   13588:	mov	r0, r5
   1358c:	movwne	r9, #1
   13590:	cmp	r9, #0
   13594:	bne	135d8 <__assert_fail@plt+0x2578>
   13598:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1359c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   135a0:	tst	r5, #1
   135a4:	beq	13148 <__assert_fail@plt+0x20e8>
   135a8:	cmp	r8, r6
   135ac:	mov	r5, #0
   135b0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   135b4:	movcc	r1, #39	; 0x27
   135b8:	strbcc	r1, [r2, r8]
   135bc:	add	r1, r8, #1
   135c0:	add	r8, r8, #2
   135c4:	cmp	r1, r6
   135c8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   135cc:	movcc	r2, #39	; 0x27
   135d0:	strbcc	r2, [r3, r1]
   135d4:	b	13148 <__assert_fail@plt+0x20e8>
   135d8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   135dc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   135e0:	b	13148 <__assert_fail@plt+0x20e8>
   135e4:	cmp	r8, r1
   135e8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   135ec:	movcc	r0, #39	; 0x27
   135f0:	strbcc	r0, [r2, r8]
   135f4:	add	r0, r8, #1
   135f8:	cmp	r0, r1
   135fc:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13600:	movcc	r2, #36	; 0x24
   13604:	strbcc	r2, [r3, r0]
   13608:	add	r0, r8, #2
   1360c:	cmp	r0, r1
   13610:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   13614:	movcc	r2, #39	; 0x27
   13618:	strbcc	r2, [r3, r0]
   1361c:	add	r0, r8, #3
   13620:	mov	r3, #1
   13624:	cmp	r0, r1
   13628:	add	r8, r0, #1
   1362c:	str	r3, [fp, #-48]	; 0xffffffd0
   13630:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13634:	movcc	r1, #92	; 0x5c
   13638:	strbcc	r1, [r2, r0]
   1363c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13640:	cmp	r1, #2
   13644:	beq	136a8 <__assert_fail@plt+0x2648>
   13648:	add	r1, r7, #1
   1364c:	mov	sl, #0
   13650:	mov	r9, #1
   13654:	mov	r5, #48	; 0x30
   13658:	cmp	r1, lr
   1365c:	bcs	12e24 <__assert_fail@plt+0x1dc4>
   13660:	ldrb	r1, [ip, r1]
   13664:	sub	r1, r1, #48	; 0x30
   13668:	uxtb	r1, r1
   1366c:	cmp	r1, #9
   13670:	bhi	12e24 <__assert_fail@plt+0x1dc4>
   13674:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13678:	cmp	r8, r1
   1367c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13680:	movcc	r1, #48	; 0x30
   13684:	strbcc	r1, [r2, r8]
   13688:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1368c:	add	r1, r0, #2
   13690:	add	r8, r0, #3
   13694:	cmp	r1, r2
   13698:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1369c:	movcc	r2, #48	; 0x30
   136a0:	strbcc	r2, [r3, r1]
   136a4:	b	12e24 <__assert_fail@plt+0x1dc4>
   136a8:	mov	r0, #48	; 0x30
   136ac:	mov	r9, #1
   136b0:	mov	sl, #0
   136b4:	b	130bc <__assert_fail@plt+0x205c>
   136b8:	mov	sl, #0
   136bc:	b	136f8 <__assert_fail@plt+0x2698>
   136c0:	mov	sl, #0
   136c4:	cmp	lr, r6
   136c8:	bls	136f8 <__assert_fail@plt+0x2698>
   136cc:	ldr	ip, [fp, #-84]	; 0xffffffac
   136d0:	ldr	r6, [sp, #40]	; 0x28
   136d4:	ldr	r0, [sp, #36]	; 0x24
   136d8:	ldrb	r0, [r0, r6]
   136dc:	cmp	r0, #0
   136e0:	beq	13700 <__assert_fail@plt+0x26a0>
   136e4:	add	r6, r6, #1
   136e8:	add	r0, r7, r6
   136ec:	cmp	r0, lr
   136f0:	bcc	136d4 <__assert_fail@plt+0x2674>
   136f4:	b	13700 <__assert_fail@plt+0x26a0>
   136f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   136fc:	ldr	r6, [sp, #40]	; 0x28
   13700:	mov	r1, r6
   13704:	ldr	r4, [sp, #20]
   13708:	ldr	r6, [sp, #76]	; 0x4c
   1370c:	b	13000 <__assert_fail@plt+0x1fa0>
   13710:	mov	lr, r7
   13714:	b	1371c <__assert_fail@plt+0x26bc>
   13718:	mvn	lr, #0
   1371c:	ldr	r9, [fp, #-64]	; 0xffffffc0
   13720:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13724:	eor	r0, r9, #2
   13728:	orr	r0, r0, r8
   1372c:	clz	r0, r0
   13730:	lsr	r0, r0, #5
   13734:	tst	r1, r0
   13738:	bne	13834 <__assert_fail@plt+0x27d4>
   1373c:	mov	r0, r1
   13740:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13744:	cmp	r9, #2
   13748:	movwne	r1, #1
   1374c:	orr	r0, r0, r1
   13750:	tst	r0, #1
   13754:	bne	13874 <__assert_fail@plt+0x2814>
   13758:	ldr	r0, [sp, #52]	; 0x34
   1375c:	ldr	r1, [sp, #68]	; 0x44
   13760:	str	lr, [sp, #80]	; 0x50
   13764:	eor	r0, r0, #1
   13768:	tst	r0, #1
   1376c:	bne	13874 <__assert_fail@plt+0x2814>
   13770:	tst	r4, #1
   13774:	bne	1383c <__assert_fail@plt+0x27dc>
   13778:	mov	r7, #0
   1377c:	cmp	r1, #0
   13780:	beq	1386c <__assert_fail@plt+0x280c>
   13784:	ldr	r0, [sp, #84]	; 0x54
   13788:	mov	r3, #0
   1378c:	cmp	r6, #0
   13790:	mov	r2, #0
   13794:	mov	r4, r1
   13798:	str	r3, [fp, #-72]	; 0xffffffb8
   1379c:	beq	128d8 <__assert_fail@plt+0x1878>
   137a0:	b	13874 <__assert_fail@plt+0x2814>
   137a4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   137a8:	b	137d0 <__assert_fail@plt+0x2770>
   137ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   137b0:	mov	r2, #1
   137b4:	mov	lr, r4
   137b8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   137bc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   137c0:	b	137d4 <__assert_fail@plt+0x2774>
   137c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   137c8:	mov	r7, #2
   137cc:	ldr	r6, [fp, #-52]	; 0xffffffcc
   137d0:	ldr	r2, [sp, #84]	; 0x54
   137d4:	mov	r0, #0
   137d8:	ldr	r1, [fp, #12]
   137dc:	tst	r2, #1
   137e0:	mov	r2, r7
   137e4:	mov	r3, lr
   137e8:	str	r0, [sp, #8]
   137ec:	ldr	r0, [sp, #64]	; 0x40
   137f0:	movwne	r2, #4
   137f4:	cmp	r7, #2
   137f8:	movne	r2, r7
   137fc:	str	r2, [sp]
   13800:	mov	r2, ip
   13804:	bic	r1, r1, #2
   13808:	str	r0, [sp, #12]
   1380c:	ldr	r0, [sp, #72]	; 0x48
   13810:	str	r1, [sp, #4]
   13814:	mov	r1, r6
   13818:	str	r0, [sp, #16]
   1381c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13820:	bl	12860 <__assert_fail@plt+0x1800>
   13824:	mov	r8, r0
   13828:	mov	r0, r8
   1382c:	sub	sp, fp, #28
   13830:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13834:	mov	r7, #2
   13838:	b	137d0 <__assert_fail@plt+0x2770>
   1383c:	mov	r0, #5
   13840:	ldr	r2, [fp, #-84]	; 0xffffffac
   13844:	ldr	r3, [sp, #80]	; 0x50
   13848:	str	r0, [sp]
   1384c:	ldr	r0, [fp, #12]
   13850:	str	r0, [sp, #4]
   13854:	ldr	r0, [fp, #16]
   13858:	str	r0, [sp, #8]
   1385c:	ldr	r0, [sp, #64]	; 0x40
   13860:	str	r0, [sp, #12]
   13864:	ldr	r0, [sp, #72]	; 0x48
   13868:	b	13818 <__assert_fail@plt+0x27b8>
   1386c:	mov	r0, #0
   13870:	str	r0, [fp, #-72]	; 0xffffffb8
   13874:	ldr	r1, [sp, #92]	; 0x5c
   13878:	cmp	r1, #0
   1387c:	beq	138bc <__assert_fail@plt+0x285c>
   13880:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13884:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13888:	tst	r0, #1
   1388c:	bne	138c0 <__assert_fail@plt+0x2860>
   13890:	ldrb	r0, [r1]
   13894:	cmp	r0, #0
   13898:	beq	138c0 <__assert_fail@plt+0x2860>
   1389c:	add	r1, r1, #1
   138a0:	cmp	r8, r6
   138a4:	strbcc	r0, [r2, r8]
   138a8:	add	r8, r8, #1
   138ac:	ldrb	r0, [r1], #1
   138b0:	cmp	r0, #0
   138b4:	bne	138a0 <__assert_fail@plt+0x2840>
   138b8:	b	138c0 <__assert_fail@plt+0x2860>
   138bc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   138c0:	cmp	r8, r6
   138c4:	movcc	r0, #0
   138c8:	strbcc	r0, [r2, r8]
   138cc:	b	13828 <__assert_fail@plt+0x27c8>
   138d0:	mov	r2, #1
   138d4:	b	137b8 <__assert_fail@plt+0x2758>
   138d8:	mov	r7, #5
   138dc:	b	137cc <__assert_fail@plt+0x276c>
   138e0:	bl	1103c <abort@plt>
   138e4:	mov	r3, r2
   138e8:	mov	r2, #0
   138ec:	b	138f0 <__assert_fail@plt+0x2890>
   138f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138f4:	add	fp, sp, #28
   138f8:	sub	sp, sp, #36	; 0x24
   138fc:	movw	r8, #25000	; 0x61a8
   13900:	cmp	r3, #0
   13904:	mov	r4, r2
   13908:	str	r2, [sp, #24]
   1390c:	mov	r5, r1
   13910:	mov	r6, r0
   13914:	str	r0, [sp, #20]
   13918:	movt	r8, #2
   1391c:	movne	r8, r3
   13920:	bl	10f7c <__errno_location@plt>
   13924:	str	r0, [sp, #28]
   13928:	cmp	r4, #0
   1392c:	add	sl, r8, #8
   13930:	ldm	r8, {r3, r9}
   13934:	ldr	r7, [r0]
   13938:	ldr	r1, [r8, #40]	; 0x28
   1393c:	ldr	r2, [r8, #44]	; 0x2c
   13940:	mov	r0, #0
   13944:	orreq	r9, r9, #1
   13948:	str	r7, [sp, #32]
   1394c:	mov	r7, r5
   13950:	stm	sp, {r3, r9, sl}
   13954:	str	r1, [sp, #12]
   13958:	str	r2, [sp, #16]
   1395c:	mov	r1, #0
   13960:	mov	r2, r6
   13964:	mov	r3, r5
   13968:	bl	12860 <__assert_fail@plt+0x1800>
   1396c:	add	r4, r0, #1
   13970:	mov	r5, r0
   13974:	mov	r0, r4
   13978:	bl	14654 <__assert_fail@plt+0x35f4>
   1397c:	mov	r6, r0
   13980:	ldr	r0, [r8]
   13984:	ldr	r2, [r8, #44]	; 0x2c
   13988:	ldr	r1, [r8, #40]	; 0x28
   1398c:	mov	r3, r7
   13990:	stm	sp, {r0, r9, sl}
   13994:	str	r2, [sp, #16]
   13998:	str	r1, [sp, #12]
   1399c:	mov	r0, r6
   139a0:	mov	r1, r4
   139a4:	ldr	r2, [sp, #20]
   139a8:	bl	12860 <__assert_fail@plt+0x1800>
   139ac:	ldr	r0, [sp, #24]
   139b0:	ldr	r1, [sp, #32]
   139b4:	ldr	r2, [sp, #28]
   139b8:	cmp	r0, #0
   139bc:	str	r1, [r2]
   139c0:	strne	r5, [r0]
   139c4:	mov	r0, r6
   139c8:	sub	sp, fp, #28
   139cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   139d4:	add	fp, sp, #24
   139d8:	movw	r5, #24828	; 0x60fc
   139dc:	movw	r8, #24824	; 0x60f8
   139e0:	movt	r5, #2
   139e4:	movt	r8, #2
   139e8:	ldr	r0, [r5]
   139ec:	ldr	r4, [r8]
   139f0:	cmp	r0, #2
   139f4:	blt	13a20 <__assert_fail@plt+0x29c0>
   139f8:	add	r7, r4, #12
   139fc:	mov	r6, #0
   13a00:	ldr	r0, [r7, r6, lsl #3]
   13a04:	bl	12560 <__assert_fail@plt+0x1500>
   13a08:	ldr	r1, [r5]
   13a0c:	add	r2, r6, #2
   13a10:	add	r0, r6, #1
   13a14:	mov	r6, r0
   13a18:	cmp	r2, r1
   13a1c:	blt	13a00 <__assert_fail@plt+0x29a0>
   13a20:	ldr	r0, [r4, #4]
   13a24:	movw	r7, #25048	; 0x61d8
   13a28:	movt	r7, #2
   13a2c:	cmp	r0, r7
   13a30:	beq	13a48 <__assert_fail@plt+0x29e8>
   13a34:	bl	12560 <__assert_fail@plt+0x1500>
   13a38:	movw	r0, #24832	; 0x6100
   13a3c:	mov	r6, #256	; 0x100
   13a40:	movt	r0, #2
   13a44:	strd	r6, [r0]
   13a48:	movw	r6, #24832	; 0x6100
   13a4c:	movt	r6, #2
   13a50:	cmp	r4, r6
   13a54:	beq	13a64 <__assert_fail@plt+0x2a04>
   13a58:	mov	r0, r4
   13a5c:	bl	12560 <__assert_fail@plt+0x1500>
   13a60:	str	r6, [r8]
   13a64:	mov	r0, #1
   13a68:	str	r0, [r5]
   13a6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a70:	movw	r3, #25000	; 0x61a8
   13a74:	mvn	r2, #0
   13a78:	movt	r3, #2
   13a7c:	b	13a80 <__assert_fail@plt+0x2a20>
   13a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a84:	add	fp, sp, #28
   13a88:	sub	sp, sp, #44	; 0x2c
   13a8c:	mov	r7, r3
   13a90:	str	r2, [sp, #36]	; 0x24
   13a94:	str	r1, [sp, #32]
   13a98:	mov	r5, r0
   13a9c:	bl	10f7c <__errno_location@plt>
   13aa0:	cmp	r5, #0
   13aa4:	blt	13c10 <__assert_fail@plt+0x2bb0>
   13aa8:	cmn	r5, #-2147483647	; 0x80000001
   13aac:	beq	13c10 <__assert_fail@plt+0x2bb0>
   13ab0:	movw	r8, #24828	; 0x60fc
   13ab4:	movw	r4, #24824	; 0x60f8
   13ab8:	str	r0, [sp, #28]
   13abc:	ldr	r0, [r0]
   13ac0:	movt	r8, #2
   13ac4:	movt	r4, #2
   13ac8:	ldr	r1, [r8]
   13acc:	ldr	r6, [r4]
   13ad0:	str	r0, [sp, #24]
   13ad4:	cmp	r1, r5
   13ad8:	ble	13ae4 <__assert_fail@plt+0x2a84>
   13adc:	mov	sl, r6
   13ae0:	b	13b4c <__assert_fail@plt+0x2aec>
   13ae4:	movw	r9, #24832	; 0x6100
   13ae8:	mov	r0, #8
   13aec:	add	r2, r5, #1
   13af0:	str	r1, [fp, #-32]	; 0xffffffe0
   13af4:	mvn	r3, #-2147483648	; 0x80000000
   13af8:	movt	r9, #2
   13afc:	str	r0, [sp]
   13b00:	sub	r2, r2, r1
   13b04:	sub	r1, fp, #32
   13b08:	subs	r0, r6, r9
   13b0c:	movne	r0, r6
   13b10:	bl	14784 <__assert_fail@plt+0x3724>
   13b14:	cmp	r6, r9
   13b18:	mov	sl, r0
   13b1c:	str	r0, [r4]
   13b20:	ldrdeq	r0, [r9]
   13b24:	stmeq	sl, {r0, r1}
   13b28:	ldr	r1, [r8]
   13b2c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13b30:	add	r0, sl, r1, lsl #3
   13b34:	sub	r1, r2, r1
   13b38:	lsl	r2, r1, #3
   13b3c:	mov	r1, #0
   13b40:	bl	10f94 <memset@plt>
   13b44:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13b48:	str	r0, [r8]
   13b4c:	mov	r9, sl
   13b50:	ldr	r6, [r9, r5, lsl #3]!
   13b54:	ldr	r4, [r9, #4]!
   13b58:	ldm	r7, {r0, r1}
   13b5c:	ldr	r2, [r7, #40]	; 0x28
   13b60:	ldr	r3, [r7, #44]	; 0x2c
   13b64:	orr	r8, r1, #1
   13b68:	add	r1, r7, #8
   13b6c:	stm	sp, {r0, r8}
   13b70:	add	r0, sp, #8
   13b74:	str	r1, [sp, #20]
   13b78:	stm	r0, {r1, r2, r3}
   13b7c:	mov	r0, r4
   13b80:	mov	r1, r6
   13b84:	ldr	r2, [sp, #32]
   13b88:	ldr	r3, [sp, #36]	; 0x24
   13b8c:	bl	12860 <__assert_fail@plt+0x1800>
   13b90:	cmp	r6, r0
   13b94:	bhi	13bf8 <__assert_fail@plt+0x2b98>
   13b98:	add	r6, r0, #1
   13b9c:	movw	r0, #25048	; 0x61d8
   13ba0:	movt	r0, #2
   13ba4:	str	r6, [sl, r5, lsl #3]
   13ba8:	cmp	r4, r0
   13bac:	beq	13bb8 <__assert_fail@plt+0x2b58>
   13bb0:	mov	r0, r4
   13bb4:	bl	12560 <__assert_fail@plt+0x1500>
   13bb8:	mov	r0, r6
   13bbc:	bl	14654 <__assert_fail@plt+0x35f4>
   13bc0:	str	r0, [r9]
   13bc4:	mov	r4, r0
   13bc8:	add	r3, sp, #8
   13bcc:	ldr	r0, [r7]
   13bd0:	ldr	r1, [r7, #40]	; 0x28
   13bd4:	ldr	r2, [r7, #44]	; 0x2c
   13bd8:	stm	sp, {r0, r8}
   13bdc:	ldr	r0, [sp, #20]
   13be0:	stm	r3, {r0, r1, r2}
   13be4:	mov	r0, r4
   13be8:	mov	r1, r6
   13bec:	ldr	r2, [sp, #32]
   13bf0:	ldr	r3, [sp, #36]	; 0x24
   13bf4:	bl	12860 <__assert_fail@plt+0x1800>
   13bf8:	ldr	r0, [sp, #28]
   13bfc:	ldr	r1, [sp, #24]
   13c00:	str	r1, [r0]
   13c04:	mov	r0, r4
   13c08:	sub	sp, fp, #28
   13c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c10:	bl	1103c <abort@plt>
   13c14:	movw	r3, #25000	; 0x61a8
   13c18:	movt	r3, #2
   13c1c:	b	13a80 <__assert_fail@plt+0x2a20>
   13c20:	movw	r3, #25000	; 0x61a8
   13c24:	mov	r1, r0
   13c28:	mov	r0, #0
   13c2c:	mvn	r2, #0
   13c30:	movt	r3, #2
   13c34:	b	13a80 <__assert_fail@plt+0x2a20>
   13c38:	movw	r3, #25000	; 0x61a8
   13c3c:	mov	r2, r1
   13c40:	mov	r1, r0
   13c44:	mov	r0, #0
   13c48:	movt	r3, #2
   13c4c:	b	13a80 <__assert_fail@plt+0x2a20>
   13c50:	push	{fp, lr}
   13c54:	mov	fp, sp
   13c58:	sub	sp, sp, #48	; 0x30
   13c5c:	vmov.i32	q8, #0	; 0x00000000
   13c60:	mov	ip, #32
   13c64:	mov	r3, sp
   13c68:	mov	lr, r2
   13c6c:	cmp	r1, #10
   13c70:	add	r2, r3, #16
   13c74:	vst1.64	{d16-d17}, [r3], ip
   13c78:	vst1.64	{d16-d17}, [r3]
   13c7c:	vst1.64	{d16-d17}, [r2]
   13c80:	beq	13ca0 <__assert_fail@plt+0x2c40>
   13c84:	str	r1, [sp]
   13c88:	mov	r3, sp
   13c8c:	mov	r1, lr
   13c90:	mvn	r2, #0
   13c94:	bl	13a80 <__assert_fail@plt+0x2a20>
   13c98:	mov	sp, fp
   13c9c:	pop	{fp, pc}
   13ca0:	bl	1103c <abort@plt>
   13ca4:	push	{r4, sl, fp, lr}
   13ca8:	add	fp, sp, #8
   13cac:	sub	sp, sp, #48	; 0x30
   13cb0:	mov	ip, r3
   13cb4:	mov	r3, sp
   13cb8:	vmov.i32	q8, #0	; 0x00000000
   13cbc:	mov	lr, #32
   13cc0:	cmp	r1, #10
   13cc4:	add	r4, r3, #16
   13cc8:	vst1.64	{d16-d17}, [r3], lr
   13ccc:	vst1.64	{d16-d17}, [r3]
   13cd0:	vst1.64	{d16-d17}, [r4]
   13cd4:	beq	13cf4 <__assert_fail@plt+0x2c94>
   13cd8:	str	r1, [sp]
   13cdc:	mov	r1, r2
   13ce0:	mov	r3, sp
   13ce4:	mov	r2, ip
   13ce8:	bl	13a80 <__assert_fail@plt+0x2a20>
   13cec:	sub	sp, fp, #8
   13cf0:	pop	{r4, sl, fp, pc}
   13cf4:	bl	1103c <abort@plt>
   13cf8:	mov	r2, r1
   13cfc:	mov	r1, r0
   13d00:	mov	r0, #0
   13d04:	b	13c50 <__assert_fail@plt+0x2bf0>
   13d08:	mov	r3, r2
   13d0c:	mov	r2, r1
   13d10:	mov	r1, r0
   13d14:	mov	r0, #0
   13d18:	b	13ca4 <__assert_fail@plt+0x2c44>
   13d1c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13d20:	add	fp, sp, #24
   13d24:	sub	sp, sp, #48	; 0x30
   13d28:	movw	r8, #25000	; 0x61a8
   13d2c:	mov	lr, r0
   13d30:	mov	r3, sp
   13d34:	mov	ip, r1
   13d38:	movt	r8, #2
   13d3c:	mov	r1, r3
   13d40:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   13d44:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   13d48:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   13d4c:	stm	r1, {r0, r4, r5, r6, r7, r9}
   13d50:	ubfx	r0, r2, #5, #3
   13d54:	and	r2, r2, #31
   13d58:	mov	r4, #1
   13d5c:	add	r0, r3, r0, lsl #2
   13d60:	ldr	r1, [r0, #8]
   13d64:	bic	r4, r4, r1, lsr r2
   13d68:	eor	r1, r1, r4, lsl r2
   13d6c:	mov	r2, ip
   13d70:	str	r1, [r0, #8]
   13d74:	mov	r0, #0
   13d78:	mov	r1, lr
   13d7c:	bl	13a80 <__assert_fail@plt+0x2a20>
   13d80:	sub	sp, fp, #24
   13d84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13d88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d8c:	add	fp, sp, #24
   13d90:	sub	sp, sp, #48	; 0x30
   13d94:	movw	lr, #25000	; 0x61a8
   13d98:	mov	ip, r0
   13d9c:	mov	r3, sp
   13da0:	movt	lr, #2
   13da4:	mov	r2, r3
   13da8:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   13dac:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   13db0:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   13db4:	stm	r2, {r0, r4, r5, r6, r7, r8}
   13db8:	ubfx	r0, r1, #5, #3
   13dbc:	and	r1, r1, #31
   13dc0:	mov	r7, #1
   13dc4:	add	r0, r3, r0, lsl #2
   13dc8:	ldr	r2, [r0, #8]
   13dcc:	bic	r7, r7, r2, lsr r1
   13dd0:	eor	r1, r2, r7, lsl r1
   13dd4:	mvn	r2, #0
   13dd8:	str	r1, [r0, #8]
   13ddc:	mov	r0, #0
   13de0:	mov	r1, ip
   13de4:	bl	13a80 <__assert_fail@plt+0x2a20>
   13de8:	sub	sp, fp, #24
   13dec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13df0:	push	{r4, r5, r6, r7, fp, lr}
   13df4:	add	fp, sp, #16
   13df8:	sub	sp, sp, #48	; 0x30
   13dfc:	movw	lr, #25000	; 0x61a8
   13e00:	mov	ip, r0
   13e04:	mov	r3, sp
   13e08:	movt	lr, #2
   13e0c:	mov	r2, r3
   13e10:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   13e14:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13e18:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   13e1c:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13e20:	mov	r1, ip
   13e24:	mvn	r2, #0
   13e28:	ldr	r0, [sp, #12]
   13e2c:	orr	r0, r0, #67108864	; 0x4000000
   13e30:	str	r0, [sp, #12]
   13e34:	mov	r0, #0
   13e38:	bl	13a80 <__assert_fail@plt+0x2a20>
   13e3c:	sub	sp, fp, #16
   13e40:	pop	{r4, r5, r6, r7, fp, pc}
   13e44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e48:	add	fp, sp, #24
   13e4c:	sub	sp, sp, #48	; 0x30
   13e50:	movw	r8, #25000	; 0x61a8
   13e54:	mov	ip, r1
   13e58:	mov	lr, r0
   13e5c:	mov	r3, sp
   13e60:	movt	r8, #2
   13e64:	mov	r2, r3
   13e68:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   13e6c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   13e70:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   13e74:	stm	r2, {r0, r1, r4, r5, r6, r7}
   13e78:	mov	r1, lr
   13e7c:	mov	r2, ip
   13e80:	ldr	r0, [sp, #12]
   13e84:	orr	r0, r0, #67108864	; 0x4000000
   13e88:	str	r0, [sp, #12]
   13e8c:	mov	r0, #0
   13e90:	bl	13a80 <__assert_fail@plt+0x2a20>
   13e94:	sub	sp, fp, #24
   13e98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ea0:	add	fp, sp, #24
   13ea4:	sub	sp, sp, #96	; 0x60
   13ea8:	mov	lr, sp
   13eac:	vmov.i32	q8, #0	; 0x00000000
   13eb0:	mov	ip, r2
   13eb4:	cmp	r1, #10
   13eb8:	add	r3, lr, #16
   13ebc:	mov	r2, lr
   13ec0:	vst1.64	{d16-d17}, [r3]
   13ec4:	mov	r3, #28
   13ec8:	vst1.64	{d16-d17}, [r2], r3
   13ecc:	vst1.32	{d16-d17}, [r2]
   13ed0:	beq	13f10 <__assert_fail@plt+0x2eb0>
   13ed4:	str	r1, [sp, #48]	; 0x30
   13ed8:	add	r3, sp, #48	; 0x30
   13edc:	ldm	lr!, {r2, r4, r5, r6, r7}
   13ee0:	add	r1, r3, #4
   13ee4:	stmia	r1!, {r2, r4, r5, r6, r7}
   13ee8:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   13eec:	stm	r1, {r2, r4, r5, r6, r7, r8}
   13ef0:	mvn	r2, #0
   13ef4:	ldr	r1, [sp, #60]	; 0x3c
   13ef8:	orr	r1, r1, #67108864	; 0x4000000
   13efc:	str	r1, [sp, #60]	; 0x3c
   13f00:	mov	r1, ip
   13f04:	bl	13a80 <__assert_fail@plt+0x2a20>
   13f08:	sub	sp, fp, #24
   13f0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f10:	bl	1103c <abort@plt>
   13f14:	push	{fp, lr}
   13f18:	mov	fp, sp
   13f1c:	sub	sp, sp, #8
   13f20:	mvn	ip, #0
   13f24:	str	ip, [sp]
   13f28:	bl	13f34 <__assert_fail@plt+0x2ed4>
   13f2c:	mov	sp, fp
   13f30:	pop	{fp, pc}
   13f34:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13f38:	add	fp, sp, #24
   13f3c:	sub	sp, sp, #48	; 0x30
   13f40:	movw	ip, #25000	; 0x61a8
   13f44:	mov	lr, r3
   13f48:	mov	r3, sp
   13f4c:	cmp	r1, #0
   13f50:	movt	ip, #2
   13f54:	cmpne	r2, #0
   13f58:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   13f5c:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   13f60:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   13f64:	stm	r3, {r4, r5, r6, r7, r8, r9}
   13f68:	mov	r3, #10
   13f6c:	str	r3, [sp]
   13f70:	bne	13f78 <__assert_fail@plt+0x2f18>
   13f74:	bl	1103c <abort@plt>
   13f78:	ldr	ip, [fp, #8]
   13f7c:	str	r2, [sp, #44]	; 0x2c
   13f80:	str	r1, [sp, #40]	; 0x28
   13f84:	mov	r3, sp
   13f88:	mov	r1, lr
   13f8c:	mov	r2, ip
   13f90:	bl	13a80 <__assert_fail@plt+0x2a20>
   13f94:	sub	sp, fp, #24
   13f98:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f9c:	push	{fp, lr}
   13fa0:	mov	fp, sp
   13fa4:	sub	sp, sp, #8
   13fa8:	mov	r3, r2
   13fac:	mov	r2, r1
   13fb0:	mov	r1, r0
   13fb4:	mvn	r0, #0
   13fb8:	str	r0, [sp]
   13fbc:	mov	r0, #0
   13fc0:	bl	13f34 <__assert_fail@plt+0x2ed4>
   13fc4:	mov	sp, fp
   13fc8:	pop	{fp, pc}
   13fcc:	push	{fp, lr}
   13fd0:	mov	fp, sp
   13fd4:	sub	sp, sp, #8
   13fd8:	mov	ip, r2
   13fdc:	mov	r2, r1
   13fe0:	mov	r1, r0
   13fe4:	str	r3, [sp]
   13fe8:	mov	r0, #0
   13fec:	mov	r3, ip
   13ff0:	bl	13f34 <__assert_fail@plt+0x2ed4>
   13ff4:	mov	sp, fp
   13ff8:	pop	{fp, pc}
   13ffc:	movw	r3, #24840	; 0x6108
   14000:	movt	r3, #2
   14004:	b	13a80 <__assert_fail@plt+0x2a20>
   14008:	movw	r3, #24840	; 0x6108
   1400c:	mov	r2, r1
   14010:	mov	r1, r0
   14014:	mov	r0, #0
   14018:	movt	r3, #2
   1401c:	b	13a80 <__assert_fail@plt+0x2a20>
   14020:	movw	r3, #24840	; 0x6108
   14024:	mvn	r2, #0
   14028:	movt	r3, #2
   1402c:	b	13a80 <__assert_fail@plt+0x2a20>
   14030:	movw	r3, #24840	; 0x6108
   14034:	mov	r1, r0
   14038:	mov	r0, #0
   1403c:	mvn	r2, #0
   14040:	movt	r3, #2
   14044:	b	13a80 <__assert_fail@plt+0x2a20>
   14048:	push	{r4, r5, fp, lr}
   1404c:	add	fp, sp, #8
   14050:	mov	r5, r0
   14054:	mov	r4, r1
   14058:	mov	r0, #0
   1405c:	mov	r2, #5
   14060:	mov	r1, r5
   14064:	bl	10ea4 <dcgettext@plt>
   14068:	cmp	r0, r5
   1406c:	popne	{r4, r5, fp, pc}
   14070:	bl	14c0c <__assert_fail@plt+0x3bac>
   14074:	ldrb	r1, [r0]
   14078:	and	r1, r1, #223	; 0xdf
   1407c:	cmp	r1, #71	; 0x47
   14080:	beq	140e8 <__assert_fail@plt+0x3088>
   14084:	cmp	r1, #85	; 0x55
   14088:	bne	1410c <__assert_fail@plt+0x30ac>
   1408c:	ldrb	r1, [r0, #1]
   14090:	and	r1, r1, #223	; 0xdf
   14094:	cmp	r1, #84	; 0x54
   14098:	bne	1410c <__assert_fail@plt+0x30ac>
   1409c:	ldrb	r1, [r0, #2]
   140a0:	and	r1, r1, #223	; 0xdf
   140a4:	cmp	r1, #70	; 0x46
   140a8:	ldrbeq	r1, [r0, #3]
   140ac:	cmpeq	r1, #45	; 0x2d
   140b0:	bne	1410c <__assert_fail@plt+0x30ac>
   140b4:	ldrb	r1, [r0, #4]
   140b8:	cmp	r1, #56	; 0x38
   140bc:	ldrbeq	r0, [r0, #5]
   140c0:	cmpeq	r0, #0
   140c4:	bne	1410c <__assert_fail@plt+0x30ac>
   140c8:	ldrb	r1, [r5]
   140cc:	movw	r2, #22688	; 0x58a0
   140d0:	movw	r0, #22692	; 0x58a4
   140d4:	movt	r2, #1
   140d8:	movt	r0, #1
   140dc:	cmp	r1, #96	; 0x60
   140e0:	moveq	r0, r2
   140e4:	pop	{r4, r5, fp, pc}
   140e8:	ldrb	r1, [r0, #1]
   140ec:	and	r1, r1, #223	; 0xdf
   140f0:	cmp	r1, #66	; 0x42
   140f4:	bne	1410c <__assert_fail@plt+0x30ac>
   140f8:	ldrb	r1, [r0, #2]
   140fc:	cmp	r1, #49	; 0x31
   14100:	ldrbeq	r1, [r0, #3]
   14104:	cmpeq	r1, #56	; 0x38
   14108:	beq	14128 <__assert_fail@plt+0x30c8>
   1410c:	movw	r1, #22684	; 0x589c
   14110:	movw	r0, #22516	; 0x57f4
   14114:	cmp	r4, #9
   14118:	movt	r1, #1
   1411c:	movt	r0, #1
   14120:	moveq	r0, r1
   14124:	pop	{r4, r5, fp, pc}
   14128:	ldrb	r1, [r0, #4]
   1412c:	cmp	r1, #48	; 0x30
   14130:	ldrbeq	r1, [r0, #5]
   14134:	cmpeq	r1, #51	; 0x33
   14138:	bne	1410c <__assert_fail@plt+0x30ac>
   1413c:	ldrb	r1, [r0, #6]
   14140:	cmp	r1, #48	; 0x30
   14144:	ldrbeq	r0, [r0, #7]
   14148:	cmpeq	r0, #0
   1414c:	bne	1410c <__assert_fail@plt+0x30ac>
   14150:	ldrb	r1, [r5]
   14154:	movw	r2, #22696	; 0x58a8
   14158:	movw	r0, #22700	; 0x58ac
   1415c:	movt	r2, #1
   14160:	movt	r0, #1
   14164:	b	140dc <__assert_fail@plt+0x307c>
   14168:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1416c:	add	fp, sp, #24
   14170:	sub	sp, sp, #32
   14174:	ldr	r6, [fp, #12]
   14178:	ldr	r7, [fp, #8]
   1417c:	mov	r4, r2
   14180:	mov	r8, r0
   14184:	cmp	r1, #0
   14188:	beq	141b0 <__assert_fail@plt+0x3150>
   1418c:	movw	r2, #22788	; 0x5904
   14190:	mov	r5, r1
   14194:	str	r3, [sp, #4]
   14198:	str	r4, [sp]
   1419c:	mov	r0, r8
   141a0:	mov	r1, #1
   141a4:	movt	r2, #1
   141a8:	mov	r3, r5
   141ac:	b	141c8 <__assert_fail@plt+0x3168>
   141b0:	movw	r2, #22800	; 0x5910
   141b4:	str	r3, [sp]
   141b8:	mov	r0, r8
   141bc:	mov	r1, #1
   141c0:	mov	r3, r4
   141c4:	movt	r2, #1
   141c8:	bl	10fb8 <__fprintf_chk@plt>
   141cc:	movw	r1, #22807	; 0x5917
   141d0:	mov	r0, #0
   141d4:	mov	r2, #5
   141d8:	movt	r1, #1
   141dc:	bl	10ea4 <dcgettext@plt>
   141e0:	movw	r2, #23525	; 0x5be5
   141e4:	mov	r3, r0
   141e8:	movw	r0, #2022	; 0x7e6
   141ec:	mov	r1, #1
   141f0:	str	r0, [sp]
   141f4:	movt	r2, #1
   141f8:	mov	r0, r8
   141fc:	bl	10fb8 <__fprintf_chk@plt>
   14200:	movw	r4, #21440	; 0x53c0
   14204:	mov	r1, r8
   14208:	movt	r4, #1
   1420c:	mov	r0, r4
   14210:	bl	10e14 <fputs_unlocked@plt>
   14214:	movw	r1, #22811	; 0x591b
   14218:	mov	r0, #0
   1421c:	mov	r2, #5
   14220:	movt	r1, #1
   14224:	bl	10ea4 <dcgettext@plt>
   14228:	movw	r3, #22982	; 0x59c6
   1422c:	mov	r2, r0
   14230:	mov	r0, r8
   14234:	mov	r1, #1
   14238:	movt	r3, #1
   1423c:	bl	10fb8 <__fprintf_chk@plt>
   14240:	mov	r0, r4
   14244:	mov	r1, r8
   14248:	bl	10e14 <fputs_unlocked@plt>
   1424c:	cmp	r6, #9
   14250:	bhi	142b4 <__assert_fail@plt+0x3254>
   14254:	add	r0, pc, #0
   14258:	ldr	pc, [r0, r6, lsl #2]
   1425c:	andeq	r4, r1, ip, lsl #9
   14260:	andeq	r4, r1, r4, lsl #5
   14264:	andeq	r4, r1, r0, asr #5
   14268:	andeq	r4, r1, r8, ror #5
   1426c:	andeq	r4, r1, r0, lsl r3
   14270:	andeq	r4, r1, r8, lsr r3
   14274:	andeq	r4, r1, r0, ror #6
   14278:	muleq	r1, r8, r3
   1427c:	andeq	r4, r1, r8, lsr r4
   14280:	andeq	r4, r1, r0, ror #7
   14284:	movw	r1, #23016	; 0x59e8
   14288:	mov	r0, #0
   1428c:	mov	r2, #5
   14290:	movt	r1, #1
   14294:	bl	10ea4 <dcgettext@plt>
   14298:	ldr	r3, [r7]
   1429c:	mov	r2, r0
   142a0:	mov	r0, r8
   142a4:	mov	r1, #1
   142a8:	sub	sp, fp, #24
   142ac:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   142b0:	b	10fb8 <__fprintf_chk@plt>
   142b4:	movw	r1, #23335	; 0x5b27
   142b8:	movt	r1, #1
   142bc:	b	143e8 <__assert_fail@plt+0x3388>
   142c0:	movw	r1, #23032	; 0x59f8
   142c4:	mov	r0, #0
   142c8:	mov	r2, #5
   142cc:	movt	r1, #1
   142d0:	bl	10ea4 <dcgettext@plt>
   142d4:	mov	r2, r0
   142d8:	ldr	r3, [r7]
   142dc:	ldr	r0, [r7, #4]
   142e0:	str	r0, [sp]
   142e4:	b	143d4 <__assert_fail@plt+0x3374>
   142e8:	movw	r1, #23055	; 0x5a0f
   142ec:	mov	r0, #0
   142f0:	mov	r2, #5
   142f4:	movt	r1, #1
   142f8:	bl	10ea4 <dcgettext@plt>
   142fc:	ldr	r3, [r7]
   14300:	mov	r2, r0
   14304:	ldmib	r7, {r0, r1}
   14308:	stm	sp, {r0, r1}
   1430c:	b	143d4 <__assert_fail@plt+0x3374>
   14310:	movw	r1, #23083	; 0x5a2b
   14314:	mov	r0, #0
   14318:	mov	r2, #5
   1431c:	movt	r1, #1
   14320:	bl	10ea4 <dcgettext@plt>
   14324:	ldr	r3, [r7]
   14328:	mov	r2, r0
   1432c:	ldmib	r7, {r0, r1, r7}
   14330:	stm	sp, {r0, r1, r7}
   14334:	b	143d4 <__assert_fail@plt+0x3374>
   14338:	movw	r1, #23115	; 0x5a4b
   1433c:	mov	r0, #0
   14340:	mov	r2, #5
   14344:	movt	r1, #1
   14348:	bl	10ea4 <dcgettext@plt>
   1434c:	ldr	r3, [r7]
   14350:	mov	r2, r0
   14354:	ldmib	r7, {r0, r1, r6, r7}
   14358:	stm	sp, {r0, r1, r6, r7}
   1435c:	b	143d4 <__assert_fail@plt+0x3374>
   14360:	movw	r1, #23151	; 0x5a6f
   14364:	mov	r0, #0
   14368:	mov	r2, #5
   1436c:	movt	r1, #1
   14370:	bl	10ea4 <dcgettext@plt>
   14374:	ldr	r3, [r7]
   14378:	mov	r2, r0
   1437c:	ldmib	r7, {r0, r1, r6}
   14380:	ldr	r5, [r7, #16]
   14384:	ldr	r7, [r7, #20]
   14388:	stm	sp, {r0, r1, r6}
   1438c:	str	r5, [sp, #12]
   14390:	str	r7, [sp, #16]
   14394:	b	143d4 <__assert_fail@plt+0x3374>
   14398:	movw	r1, #23191	; 0x5a97
   1439c:	mov	r0, #0
   143a0:	mov	r2, #5
   143a4:	movt	r1, #1
   143a8:	bl	10ea4 <dcgettext@plt>
   143ac:	ldr	r3, [r7]
   143b0:	mov	r2, r0
   143b4:	ldmib	r7, {r0, r1, r6}
   143b8:	ldr	r5, [r7, #16]
   143bc:	ldr	r4, [r7, #20]
   143c0:	ldr	r7, [r7, #24]
   143c4:	stm	sp, {r0, r1, r6}
   143c8:	str	r5, [sp, #12]
   143cc:	str	r4, [sp, #16]
   143d0:	str	r7, [sp, #20]
   143d4:	mov	r0, r8
   143d8:	mov	r1, #1
   143dc:	b	14488 <__assert_fail@plt+0x3428>
   143e0:	movw	r1, #23283	; 0x5af3
   143e4:	movt	r1, #1
   143e8:	mov	r0, #0
   143ec:	mov	r2, #5
   143f0:	bl	10ea4 <dcgettext@plt>
   143f4:	mov	ip, r0
   143f8:	ldr	r3, [r7]
   143fc:	ldr	r0, [r7, #4]
   14400:	ldr	r1, [r7, #8]
   14404:	ldr	r6, [r7, #12]
   14408:	ldr	r5, [r7, #16]
   1440c:	ldr	r4, [r7, #20]
   14410:	ldr	r2, [r7, #24]
   14414:	ldr	lr, [r7, #28]
   14418:	ldr	r7, [r7, #32]
   1441c:	stm	sp, {r0, r1, r6}
   14420:	str	r5, [sp, #12]
   14424:	str	r4, [sp, #16]
   14428:	str	r2, [sp, #20]
   1442c:	str	lr, [sp, #24]
   14430:	str	r7, [sp, #28]
   14434:	b	1447c <__assert_fail@plt+0x341c>
   14438:	movw	r1, #23235	; 0x5ac3
   1443c:	mov	r0, #0
   14440:	mov	r2, #5
   14444:	movt	r1, #1
   14448:	bl	10ea4 <dcgettext@plt>
   1444c:	mov	ip, r0
   14450:	ldr	r3, [r7]
   14454:	ldmib	r7, {r0, r1, r6}
   14458:	ldr	r5, [r7, #16]
   1445c:	ldr	r4, [r7, #20]
   14460:	ldr	r2, [r7, #24]
   14464:	ldr	r7, [r7, #28]
   14468:	stm	sp, {r0, r1, r6}
   1446c:	str	r5, [sp, #12]
   14470:	str	r4, [sp, #16]
   14474:	str	r2, [sp, #20]
   14478:	str	r7, [sp, #24]
   1447c:	mov	r0, r8
   14480:	mov	r1, #1
   14484:	mov	r2, ip
   14488:	bl	10fb8 <__fprintf_chk@plt>
   1448c:	sub	sp, fp, #24
   14490:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14494:	push	{r4, sl, fp, lr}
   14498:	add	fp, sp, #8
   1449c:	sub	sp, sp, #8
   144a0:	ldr	ip, [fp, #8]
   144a4:	mov	lr, #0
   144a8:	ldr	r4, [ip, lr, lsl #2]
   144ac:	add	lr, lr, #1
   144b0:	cmp	r4, #0
   144b4:	bne	144a8 <__assert_fail@plt+0x3448>
   144b8:	sub	r4, lr, #1
   144bc:	str	ip, [sp]
   144c0:	str	r4, [sp, #4]
   144c4:	bl	14168 <__assert_fail@plt+0x3108>
   144c8:	sub	sp, fp, #8
   144cc:	pop	{r4, sl, fp, pc}
   144d0:	push	{r4, r5, fp, lr}
   144d4:	add	fp, sp, #8
   144d8:	sub	sp, sp, #48	; 0x30
   144dc:	ldr	r4, [fp, #8]
   144e0:	mov	ip, #0
   144e4:	add	lr, sp, #8
   144e8:	ldr	r5, [r4]
   144ec:	cmp	r5, #0
   144f0:	str	r5, [lr, ip, lsl #2]
   144f4:	beq	14508 <__assert_fail@plt+0x34a8>
   144f8:	add	ip, ip, #1
   144fc:	add	r4, r4, #4
   14500:	cmp	ip, #10
   14504:	bcc	144e8 <__assert_fail@plt+0x3488>
   14508:	str	lr, [sp]
   1450c:	str	ip, [sp, #4]
   14510:	bl	14168 <__assert_fail@plt+0x3108>
   14514:	sub	sp, fp, #8
   14518:	pop	{r4, r5, fp, pc}
   1451c:	push	{fp, lr}
   14520:	mov	fp, sp
   14524:	sub	sp, sp, #8
   14528:	add	ip, fp, #8
   1452c:	str	ip, [sp, #4]
   14530:	str	ip, [sp]
   14534:	bl	144d0 <__assert_fail@plt+0x3470>
   14538:	mov	sp, fp
   1453c:	pop	{fp, pc}
   14540:	push	{fp, lr}
   14544:	mov	fp, sp
   14548:	movw	r0, #24916	; 0x6154
   1454c:	movt	r0, #2
   14550:	ldr	r1, [r0]
   14554:	movw	r0, #21440	; 0x53c0
   14558:	movt	r0, #1
   1455c:	bl	10e14 <fputs_unlocked@plt>
   14560:	movw	r1, #23395	; 0x5b63
   14564:	mov	r0, #0
   14568:	mov	r2, #5
   1456c:	movt	r1, #1
   14570:	bl	10ea4 <dcgettext@plt>
   14574:	movw	r2, #23415	; 0x5b77
   14578:	mov	r1, r0
   1457c:	mov	r0, #1
   14580:	movt	r2, #1
   14584:	bl	10fa0 <__printf_chk@plt>
   14588:	movw	r1, #23437	; 0x5b8d
   1458c:	mov	r0, #0
   14590:	mov	r2, #5
   14594:	movt	r1, #1
   14598:	bl	10ea4 <dcgettext@plt>
   1459c:	movw	r2, #20942	; 0x51ce
   145a0:	movw	r3, #21249	; 0x5301
   145a4:	mov	r1, r0
   145a8:	mov	r0, #1
   145ac:	movt	r2, #1
   145b0:	movt	r3, #1
   145b4:	bl	10fa0 <__printf_chk@plt>
   145b8:	movw	r1, #23457	; 0x5ba1
   145bc:	mov	r0, #0
   145c0:	mov	r2, #5
   145c4:	movt	r1, #1
   145c8:	bl	10ea4 <dcgettext@plt>
   145cc:	movw	r2, #23496	; 0x5bc8
   145d0:	mov	r1, r0
   145d4:	mov	r0, #1
   145d8:	movt	r2, #1
   145dc:	pop	{fp, lr}
   145e0:	b	10fa0 <__printf_chk@plt>
   145e4:	b	145e8 <__assert_fail@plt+0x3588>
   145e8:	push	{r4, r5, r6, sl, fp, lr}
   145ec:	add	fp, sp, #16
   145f0:	mov	r4, r2
   145f4:	mov	r5, r1
   145f8:	mov	r6, r0
   145fc:	bl	14ca4 <__assert_fail@plt+0x3c44>
   14600:	cmp	r0, #0
   14604:	popne	{r4, r5, r6, sl, fp, pc}
   14608:	cmp	r6, #0
   1460c:	beq	14620 <__assert_fail@plt+0x35c0>
   14610:	cmp	r5, #0
   14614:	cmpne	r4, #0
   14618:	bne	14620 <__assert_fail@plt+0x35c0>
   1461c:	pop	{r4, r5, r6, sl, fp, pc}
   14620:	bl	14a74 <__assert_fail@plt+0x3a14>
   14624:	push	{fp, lr}
   14628:	mov	fp, sp
   1462c:	bl	14b0c <__assert_fail@plt+0x3aac>
   14630:	cmp	r0, #0
   14634:	popne	{fp, pc}
   14638:	bl	14a74 <__assert_fail@plt+0x3a14>
   1463c:	push	{fp, lr}
   14640:	mov	fp, sp
   14644:	bl	14b0c <__assert_fail@plt+0x3aac>
   14648:	cmp	r0, #0
   1464c:	popne	{fp, pc}
   14650:	bl	14a74 <__assert_fail@plt+0x3a14>
   14654:	push	{fp, lr}
   14658:	mov	fp, sp
   1465c:	bl	14b0c <__assert_fail@plt+0x3aac>
   14660:	cmp	r0, #0
   14664:	popne	{fp, pc}
   14668:	bl	14a74 <__assert_fail@plt+0x3a14>
   1466c:	push	{r4, r5, fp, lr}
   14670:	add	fp, sp, #8
   14674:	mov	r4, r1
   14678:	mov	r5, r0
   1467c:	bl	14b3c <__assert_fail@plt+0x3adc>
   14680:	cmp	r0, #0
   14684:	popne	{r4, r5, fp, pc}
   14688:	cmp	r5, #0
   1468c:	beq	1469c <__assert_fail@plt+0x363c>
   14690:	cmp	r4, #0
   14694:	bne	1469c <__assert_fail@plt+0x363c>
   14698:	pop	{r4, r5, fp, pc}
   1469c:	bl	14a74 <__assert_fail@plt+0x3a14>
   146a0:	push	{fp, lr}
   146a4:	mov	fp, sp
   146a8:	cmp	r1, #0
   146ac:	orreq	r1, r1, #1
   146b0:	bl	14b3c <__assert_fail@plt+0x3adc>
   146b4:	cmp	r0, #0
   146b8:	popne	{fp, pc}
   146bc:	bl	14a74 <__assert_fail@plt+0x3a14>
   146c0:	push	{fp, lr}
   146c4:	mov	fp, sp
   146c8:	clz	r3, r2
   146cc:	lsr	ip, r3, #5
   146d0:	clz	r3, r1
   146d4:	lsr	r3, r3, #5
   146d8:	orrs	r3, r3, ip
   146dc:	movwne	r1, #1
   146e0:	movwne	r2, #1
   146e4:	bl	14ca4 <__assert_fail@plt+0x3c44>
   146e8:	cmp	r0, #0
   146ec:	popne	{fp, pc}
   146f0:	bl	14a74 <__assert_fail@plt+0x3a14>
   146f4:	push	{fp, lr}
   146f8:	mov	fp, sp
   146fc:	mov	r2, r1
   14700:	mov	r1, r0
   14704:	mov	r0, #0
   14708:	bl	14ca4 <__assert_fail@plt+0x3c44>
   1470c:	cmp	r0, #0
   14710:	popne	{fp, pc}
   14714:	bl	14a74 <__assert_fail@plt+0x3a14>
   14718:	mov	r2, r1
   1471c:	mov	r1, r0
   14720:	mov	r0, #0
   14724:	b	146c0 <__assert_fail@plt+0x3660>
   14728:	mov	r2, #1
   1472c:	b	14730 <__assert_fail@plt+0x36d0>
   14730:	push	{r4, r5, fp, lr}
   14734:	add	fp, sp, #8
   14738:	ldr	r5, [r1]
   1473c:	mov	r4, r1
   14740:	cmp	r0, #0
   14744:	beq	1475c <__assert_fail@plt+0x36fc>
   14748:	mov	r1, #1
   1474c:	add	r1, r1, r5, lsr #1
   14750:	adds	r5, r5, r1
   14754:	bcc	14774 <__assert_fail@plt+0x3714>
   14758:	bl	14a74 <__assert_fail@plt+0x3a14>
   1475c:	cmp	r5, #0
   14760:	bne	14774 <__assert_fail@plt+0x3714>
   14764:	mov	r1, #64	; 0x40
   14768:	cmp	r2, #64	; 0x40
   1476c:	udiv	r5, r1, r2
   14770:	addhi	r5, r5, #1
   14774:	mov	r1, r5
   14778:	bl	145e8 <__assert_fail@plt+0x3588>
   1477c:	str	r5, [r4]
   14780:	pop	{r4, r5, fp, pc}
   14784:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14788:	add	fp, sp, #24
   1478c:	ldr	r6, [r1]
   14790:	mov	r8, r1
   14794:	ldr	r4, [fp, #8]
   14798:	add	r1, r6, r6, asr #1
   1479c:	cmp	r1, r6
   147a0:	mvnvs	r1, #-2147483648	; 0x80000000
   147a4:	cmp	r1, r3
   147a8:	mov	r5, r1
   147ac:	movgt	r5, r3
   147b0:	cmn	r3, #1
   147b4:	movle	r5, r1
   147b8:	cmn	r4, #1
   147bc:	ble	147dc <__assert_fail@plt+0x377c>
   147c0:	cmp	r4, #0
   147c4:	beq	14830 <__assert_fail@plt+0x37d0>
   147c8:	cmn	r5, #1
   147cc:	ble	14804 <__assert_fail@plt+0x37a4>
   147d0:	mvn	r7, #-2147483648	; 0x80000000
   147d4:	udiv	r1, r7, r4
   147d8:	b	147f8 <__assert_fail@plt+0x3798>
   147dc:	cmn	r5, #1
   147e0:	ble	14820 <__assert_fail@plt+0x37c0>
   147e4:	cmn	r4, #1
   147e8:	beq	14830 <__assert_fail@plt+0x37d0>
   147ec:	mov	r1, #-2147483648	; 0x80000000
   147f0:	mvn	r7, #-2147483648	; 0x80000000
   147f4:	sdiv	r1, r1, r4
   147f8:	cmp	r1, r5
   147fc:	bge	14830 <__assert_fail@plt+0x37d0>
   14800:	b	14840 <__assert_fail@plt+0x37e0>
   14804:	beq	14830 <__assert_fail@plt+0x37d0>
   14808:	mov	r1, #-2147483648	; 0x80000000
   1480c:	mvn	r7, #-2147483648	; 0x80000000
   14810:	sdiv	r1, r1, r5
   14814:	cmp	r1, r4
   14818:	bge	14830 <__assert_fail@plt+0x37d0>
   1481c:	b	14840 <__assert_fail@plt+0x37e0>
   14820:	mvn	r7, #-2147483648	; 0x80000000
   14824:	sdiv	r1, r7, r4
   14828:	cmp	r5, r1
   1482c:	blt	14840 <__assert_fail@plt+0x37e0>
   14830:	mul	r1, r5, r4
   14834:	mov	r7, #64	; 0x40
   14838:	cmp	r1, #63	; 0x3f
   1483c:	bgt	14848 <__assert_fail@plt+0x37e8>
   14840:	sdiv	r5, r7, r4
   14844:	mul	r1, r5, r4
   14848:	cmp	r0, #0
   1484c:	moveq	r7, #0
   14850:	streq	r7, [r8]
   14854:	sub	r7, r5, r6
   14858:	cmp	r7, r2
   1485c:	bge	14900 <__assert_fail@plt+0x38a0>
   14860:	add	r5, r6, r2
   14864:	mov	r2, #0
   14868:	mov	r1, #0
   1486c:	cmp	r5, r3
   14870:	movwgt	r2, #1
   14874:	cmn	r3, #1
   14878:	movwgt	r1, #1
   1487c:	cmp	r5, r6
   14880:	bvs	148e8 <__assert_fail@plt+0x3888>
   14884:	ands	r1, r1, r2
   14888:	bne	148e8 <__assert_fail@plt+0x3888>
   1488c:	cmn	r4, #1
   14890:	ble	148b0 <__assert_fail@plt+0x3850>
   14894:	cmp	r4, #0
   14898:	beq	148fc <__assert_fail@plt+0x389c>
   1489c:	cmn	r5, #1
   148a0:	ble	148d4 <__assert_fail@plt+0x3874>
   148a4:	mvn	r1, #-2147483648	; 0x80000000
   148a8:	udiv	r1, r1, r4
   148ac:	b	148c8 <__assert_fail@plt+0x3868>
   148b0:	cmn	r5, #1
   148b4:	ble	148ec <__assert_fail@plt+0x388c>
   148b8:	cmn	r4, #1
   148bc:	beq	148fc <__assert_fail@plt+0x389c>
   148c0:	mov	r1, #-2147483648	; 0x80000000
   148c4:	sdiv	r1, r1, r4
   148c8:	cmp	r1, r5
   148cc:	bge	148fc <__assert_fail@plt+0x389c>
   148d0:	b	148e8 <__assert_fail@plt+0x3888>
   148d4:	beq	148fc <__assert_fail@plt+0x389c>
   148d8:	mov	r1, #-2147483648	; 0x80000000
   148dc:	sdiv	r1, r1, r5
   148e0:	cmp	r1, r4
   148e4:	bge	148fc <__assert_fail@plt+0x389c>
   148e8:	bl	14a74 <__assert_fail@plt+0x3a14>
   148ec:	mvn	r1, #-2147483648	; 0x80000000
   148f0:	sdiv	r1, r1, r4
   148f4:	cmp	r5, r1
   148f8:	blt	148e8 <__assert_fail@plt+0x3888>
   148fc:	mul	r1, r5, r4
   14900:	bl	1466c <__assert_fail@plt+0x360c>
   14904:	str	r5, [r8]
   14908:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1490c:	push	{fp, lr}
   14910:	mov	fp, sp
   14914:	mov	r1, #1
   14918:	bl	14ab8 <__assert_fail@plt+0x3a58>
   1491c:	cmp	r0, #0
   14920:	popne	{fp, pc}
   14924:	bl	14a74 <__assert_fail@plt+0x3a14>
   14928:	push	{fp, lr}
   1492c:	mov	fp, sp
   14930:	bl	14ab8 <__assert_fail@plt+0x3a58>
   14934:	cmp	r0, #0
   14938:	popne	{fp, pc}
   1493c:	bl	14a74 <__assert_fail@plt+0x3a14>
   14940:	push	{fp, lr}
   14944:	mov	fp, sp
   14948:	mov	r1, #1
   1494c:	bl	14ab8 <__assert_fail@plt+0x3a58>
   14950:	cmp	r0, #0
   14954:	popne	{fp, pc}
   14958:	bl	14a74 <__assert_fail@plt+0x3a14>
   1495c:	push	{fp, lr}
   14960:	mov	fp, sp
   14964:	bl	14ab8 <__assert_fail@plt+0x3a58>
   14968:	cmp	r0, #0
   1496c:	popne	{fp, pc}
   14970:	bl	14a74 <__assert_fail@plt+0x3a14>
   14974:	push	{r4, r5, r6, sl, fp, lr}
   14978:	add	fp, sp, #16
   1497c:	mov	r5, r0
   14980:	mov	r0, r1
   14984:	mov	r4, r1
   14988:	bl	14b0c <__assert_fail@plt+0x3aac>
   1498c:	cmp	r0, #0
   14990:	beq	149ac <__assert_fail@plt+0x394c>
   14994:	mov	r1, r5
   14998:	mov	r2, r4
   1499c:	mov	r6, r0
   149a0:	bl	10e68 <memcpy@plt>
   149a4:	mov	r0, r6
   149a8:	pop	{r4, r5, r6, sl, fp, pc}
   149ac:	bl	14a74 <__assert_fail@plt+0x3a14>
   149b0:	push	{r4, r5, r6, sl, fp, lr}
   149b4:	add	fp, sp, #16
   149b8:	mov	r5, r0
   149bc:	mov	r0, r1
   149c0:	mov	r4, r1
   149c4:	bl	14b0c <__assert_fail@plt+0x3aac>
   149c8:	cmp	r0, #0
   149cc:	beq	149e8 <__assert_fail@plt+0x3988>
   149d0:	mov	r1, r5
   149d4:	mov	r2, r4
   149d8:	mov	r6, r0
   149dc:	bl	10e68 <memcpy@plt>
   149e0:	mov	r0, r6
   149e4:	pop	{r4, r5, r6, sl, fp, pc}
   149e8:	bl	14a74 <__assert_fail@plt+0x3a14>
   149ec:	push	{r4, r5, r6, sl, fp, lr}
   149f0:	add	fp, sp, #16
   149f4:	mov	r5, r0
   149f8:	add	r0, r1, #1
   149fc:	mov	r4, r1
   14a00:	bl	14b0c <__assert_fail@plt+0x3aac>
   14a04:	cmp	r0, #0
   14a08:	beq	14a30 <__assert_fail@plt+0x39d0>
   14a0c:	mov	r6, r0
   14a10:	mov	r0, #0
   14a14:	mov	r1, r5
   14a18:	mov	r2, r4
   14a1c:	strb	r0, [r6, r4]
   14a20:	mov	r0, r6
   14a24:	bl	10e68 <memcpy@plt>
   14a28:	mov	r0, r6
   14a2c:	pop	{r4, r5, r6, sl, fp, pc}
   14a30:	bl	14a74 <__assert_fail@plt+0x3a14>
   14a34:	push	{r4, r5, r6, sl, fp, lr}
   14a38:	add	fp, sp, #16
   14a3c:	mov	r4, r0
   14a40:	bl	10f70 <strlen@plt>
   14a44:	add	r5, r0, #1
   14a48:	mov	r0, r5
   14a4c:	bl	14b0c <__assert_fail@plt+0x3aac>
   14a50:	cmp	r0, #0
   14a54:	beq	14a70 <__assert_fail@plt+0x3a10>
   14a58:	mov	r1, r4
   14a5c:	mov	r2, r5
   14a60:	mov	r6, r0
   14a64:	bl	10e68 <memcpy@plt>
   14a68:	mov	r0, r6
   14a6c:	pop	{r4, r5, r6, sl, fp, pc}
   14a70:	bl	14a74 <__assert_fail@plt+0x3a14>
   14a74:	push	{fp, lr}
   14a78:	mov	fp, sp
   14a7c:	movw	r0, #24820	; 0x60f4
   14a80:	movw	r1, #23572	; 0x5c14
   14a84:	mov	r2, #5
   14a88:	movt	r0, #2
   14a8c:	movt	r1, #1
   14a90:	ldr	r4, [r0]
   14a94:	mov	r0, #0
   14a98:	bl	10ea4 <dcgettext@plt>
   14a9c:	movw	r2, #21845	; 0x5555
   14aa0:	mov	r3, r0
   14aa4:	mov	r0, r4
   14aa8:	mov	r1, #0
   14aac:	movt	r2, #1
   14ab0:	bl	10f10 <error@plt>
   14ab4:	bl	1103c <abort@plt>
   14ab8:	clz	r2, r1
   14abc:	clz	r3, r0
   14ac0:	lsr	r2, r2, #5
   14ac4:	lsr	r3, r3, #5
   14ac8:	orrs	r2, r3, r2
   14acc:	movwne	r1, #1
   14ad0:	movwne	r0, #1
   14ad4:	cmp	r1, #0
   14ad8:	beq	14b08 <__assert_fail@plt+0x3aa8>
   14adc:	mvn	r2, #-2147483648	; 0x80000000
   14ae0:	udiv	r2, r2, r1
   14ae4:	cmp	r2, r0
   14ae8:	bcs	14b08 <__assert_fail@plt+0x3aa8>
   14aec:	push	{fp, lr}
   14af0:	mov	fp, sp
   14af4:	bl	10f7c <__errno_location@plt>
   14af8:	mov	r1, #12
   14afc:	str	r1, [r0]
   14b00:	mov	r0, #0
   14b04:	pop	{fp, pc}
   14b08:	b	10e08 <calloc@plt>
   14b0c:	cmp	r0, #0
   14b10:	movweq	r0, #1
   14b14:	cmn	r0, #1
   14b18:	ble	14b20 <__assert_fail@plt+0x3ac0>
   14b1c:	b	10f1c <malloc@plt>
   14b20:	push	{fp, lr}
   14b24:	mov	fp, sp
   14b28:	bl	10f7c <__errno_location@plt>
   14b2c:	mov	r1, #12
   14b30:	str	r1, [r0]
   14b34:	mov	r0, #0
   14b38:	pop	{fp, pc}
   14b3c:	push	{fp, lr}
   14b40:	mov	fp, sp
   14b44:	cmp	r0, #0
   14b48:	beq	14b64 <__assert_fail@plt+0x3b04>
   14b4c:	cmp	r1, #0
   14b50:	beq	14b70 <__assert_fail@plt+0x3b10>
   14b54:	cmn	r1, #1
   14b58:	ble	14b78 <__assert_fail@plt+0x3b18>
   14b5c:	pop	{fp, lr}
   14b60:	b	10eb0 <realloc@plt>
   14b64:	mov	r0, r1
   14b68:	pop	{fp, lr}
   14b6c:	b	14b0c <__assert_fail@plt+0x3aac>
   14b70:	bl	12560 <__assert_fail@plt+0x1500>
   14b74:	b	14b84 <__assert_fail@plt+0x3b24>
   14b78:	bl	10f7c <__errno_location@plt>
   14b7c:	mov	r1, #12
   14b80:	str	r1, [r0]
   14b84:	mov	r0, #0
   14b88:	pop	{fp, pc}
   14b8c:	push	{r4, r5, r6, sl, fp, lr}
   14b90:	add	fp, sp, #16
   14b94:	mov	r4, r0
   14b98:	bl	10eec <__fpending@plt>
   14b9c:	mov	r5, r0
   14ba0:	mov	r0, r4
   14ba4:	bl	10ef8 <ferror_unlocked@plt>
   14ba8:	mov	r6, r0
   14bac:	mov	r0, r4
   14bb0:	bl	12468 <__assert_fail@plt+0x1408>
   14bb4:	cmp	r6, #0
   14bb8:	beq	14bd8 <__assert_fail@plt+0x3b78>
   14bbc:	mvn	r4, #0
   14bc0:	cmp	r0, #0
   14bc4:	bne	14c04 <__assert_fail@plt+0x3ba4>
   14bc8:	bl	10f7c <__errno_location@plt>
   14bcc:	mov	r1, #0
   14bd0:	str	r1, [r0]
   14bd4:	b	14c04 <__assert_fail@plt+0x3ba4>
   14bd8:	cmp	r0, #0
   14bdc:	mov	r4, r0
   14be0:	mvnne	r4, #0
   14be4:	cmp	r5, #0
   14be8:	bne	14c04 <__assert_fail@plt+0x3ba4>
   14bec:	cmp	r0, #0
   14bf0:	beq	14c04 <__assert_fail@plt+0x3ba4>
   14bf4:	bl	10f7c <__errno_location@plt>
   14bf8:	ldr	r0, [r0]
   14bfc:	subs	r4, r0, #9
   14c00:	mvnne	r4, #0
   14c04:	mov	r0, r4
   14c08:	pop	{r4, r5, r6, sl, fp, pc}
   14c0c:	push	{fp, lr}
   14c10:	mov	fp, sp
   14c14:	mov	r0, #14
   14c18:	bl	10ff4 <nl_langinfo@plt>
   14c1c:	movw	r1, #21441	; 0x53c1
   14c20:	cmp	r0, #0
   14c24:	movt	r1, #1
   14c28:	movne	r1, r0
   14c2c:	movw	r0, #23589	; 0x5c25
   14c30:	ldrb	r2, [r1]
   14c34:	movt	r0, #1
   14c38:	cmp	r2, #0
   14c3c:	movne	r0, r1
   14c40:	pop	{fp, pc}
   14c44:	push	{r4, r5, r6, r7, fp, lr}
   14c48:	add	fp, sp, #16
   14c4c:	sub	sp, sp, #8
   14c50:	add	r5, sp, #4
   14c54:	cmp	r0, #0
   14c58:	mov	r7, r2
   14c5c:	mov	r4, r1
   14c60:	movne	r5, r0
   14c64:	mov	r0, r5
   14c68:	bl	10f04 <mbrtowc@plt>
   14c6c:	mov	r6, r0
   14c70:	cmp	r7, #0
   14c74:	beq	14c98 <__assert_fail@plt+0x3c38>
   14c78:	cmn	r6, #2
   14c7c:	bcc	14c98 <__assert_fail@plt+0x3c38>
   14c80:	mov	r0, #0
   14c84:	bl	14ce0 <__assert_fail@plt+0x3c80>
   14c88:	cmp	r0, #0
   14c8c:	ldrbeq	r0, [r4]
   14c90:	moveq	r6, #1
   14c94:	streq	r0, [r5]
   14c98:	mov	r0, r6
   14c9c:	sub	sp, fp, #16
   14ca0:	pop	{r4, r5, r6, r7, fp, pc}
   14ca4:	cmp	r2, #0
   14ca8:	beq	14cd8 <__assert_fail@plt+0x3c78>
   14cac:	mvn	r3, #0
   14cb0:	udiv	r3, r3, r2
   14cb4:	cmp	r3, r1
   14cb8:	bcs	14cd8 <__assert_fail@plt+0x3c78>
   14cbc:	push	{fp, lr}
   14cc0:	mov	fp, sp
   14cc4:	bl	10f7c <__errno_location@plt>
   14cc8:	mov	r1, #12
   14ccc:	str	r1, [r0]
   14cd0:	mov	r0, #0
   14cd4:	pop	{fp, pc}
   14cd8:	mul	r1, r2, r1
   14cdc:	b	14b3c <__assert_fail@plt+0x3adc>
   14ce0:	push	{r4, sl, fp, lr}
   14ce4:	add	fp, sp, #8
   14ce8:	sub	sp, sp, #264	; 0x108
   14cec:	add	r1, sp, #7
   14cf0:	movw	r2, #257	; 0x101
   14cf4:	bl	14d44 <__assert_fail@plt+0x3ce4>
   14cf8:	mov	r4, #0
   14cfc:	cmp	r0, #0
   14d00:	bne	14d38 <__assert_fail@plt+0x3cd8>
   14d04:	movw	r1, #23595	; 0x5c2b
   14d08:	add	r0, sp, #7
   14d0c:	movt	r1, #1
   14d10:	bl	10e2c <strcmp@plt>
   14d14:	cmp	r0, #0
   14d18:	beq	14d38 <__assert_fail@plt+0x3cd8>
   14d1c:	movw	r1, #23597	; 0x5c2d
   14d20:	add	r0, sp, #7
   14d24:	movt	r1, #1
   14d28:	bl	10e2c <strcmp@plt>
   14d2c:	mov	r4, r0
   14d30:	cmp	r0, #0
   14d34:	movwne	r4, #1
   14d38:	mov	r0, r4
   14d3c:	sub	sp, fp, #8
   14d40:	pop	{r4, sl, fp, pc}
   14d44:	push	{r4, r5, r6, r7, fp, lr}
   14d48:	add	fp, sp, #16
   14d4c:	mov	r4, r1
   14d50:	mov	r1, #0
   14d54:	mov	r6, r2
   14d58:	bl	10fdc <setlocale@plt>
   14d5c:	cmp	r0, #0
   14d60:	beq	14d8c <__assert_fail@plt+0x3d2c>
   14d64:	mov	r7, r0
   14d68:	bl	10f70 <strlen@plt>
   14d6c:	cmp	r0, r6
   14d70:	bcs	14da0 <__assert_fail@plt+0x3d40>
   14d74:	add	r2, r0, #1
   14d78:	mov	r0, r4
   14d7c:	mov	r1, r7
   14d80:	bl	10e68 <memcpy@plt>
   14d84:	mov	r5, #0
   14d88:	b	14dc8 <__assert_fail@plt+0x3d68>
   14d8c:	cmp	r6, #0
   14d90:	mov	r5, #22
   14d94:	movne	r0, #0
   14d98:	strbne	r0, [r4]
   14d9c:	b	14dc8 <__assert_fail@plt+0x3d68>
   14da0:	mov	r5, #34	; 0x22
   14da4:	cmp	r6, #0
   14da8:	beq	14dc8 <__assert_fail@plt+0x3d68>
   14dac:	sub	r6, r6, #1
   14db0:	mov	r0, r4
   14db4:	mov	r1, r7
   14db8:	mov	r2, r6
   14dbc:	bl	10e68 <memcpy@plt>
   14dc0:	mov	r0, #0
   14dc4:	strb	r0, [r4, r6]
   14dc8:	mov	r0, r5
   14dcc:	pop	{r4, r5, r6, r7, fp, pc}
   14dd0:	mov	r1, #0
   14dd4:	b	10fdc <setlocale@plt>
   14dd8:	cmp	r3, #0
   14ddc:	cmpeq	r2, #0
   14de0:	bne	14df8 <__assert_fail@plt+0x3d98>
   14de4:	cmp	r1, #0
   14de8:	cmpeq	r0, #0
   14dec:	mvnne	r1, #0
   14df0:	mvnne	r0, #0
   14df4:	b	14e14 <__assert_fail@plt+0x3db4>
   14df8:	sub	sp, sp, #8
   14dfc:	push	{sp, lr}
   14e00:	bl	14e24 <__assert_fail@plt+0x3dc4>
   14e04:	ldr	lr, [sp, #4]
   14e08:	add	sp, sp, #8
   14e0c:	pop	{r2, r3}
   14e10:	bx	lr
   14e14:	push	{r1, lr}
   14e18:	mov	r0, #8
   14e1c:	bl	10e20 <raise@plt>
   14e20:	pop	{r1, pc}
   14e24:	cmp	r1, r3
   14e28:	cmpeq	r0, r2
   14e2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e30:	mov	r4, r0
   14e34:	movcc	r0, #0
   14e38:	mov	r5, r1
   14e3c:	ldr	lr, [sp, #36]	; 0x24
   14e40:	movcc	r1, r0
   14e44:	bcc	14f40 <__assert_fail@plt+0x3ee0>
   14e48:	cmp	r3, #0
   14e4c:	clzeq	ip, r2
   14e50:	clzne	ip, r3
   14e54:	addeq	ip, ip, #32
   14e58:	cmp	r5, #0
   14e5c:	clzeq	r1, r4
   14e60:	addeq	r1, r1, #32
   14e64:	clzne	r1, r5
   14e68:	sub	ip, ip, r1
   14e6c:	sub	sl, ip, #32
   14e70:	lsl	r9, r3, ip
   14e74:	rsb	fp, ip, #32
   14e78:	orr	r9, r9, r2, lsl sl
   14e7c:	orr	r9, r9, r2, lsr fp
   14e80:	lsl	r8, r2, ip
   14e84:	cmp	r5, r9
   14e88:	cmpeq	r4, r8
   14e8c:	movcc	r0, #0
   14e90:	movcc	r1, r0
   14e94:	bcc	14eb0 <__assert_fail@plt+0x3e50>
   14e98:	mov	r0, #1
   14e9c:	subs	r4, r4, r8
   14ea0:	lsl	r1, r0, sl
   14ea4:	orr	r1, r1, r0, lsr fp
   14ea8:	lsl	r0, r0, ip
   14eac:	sbc	r5, r5, r9
   14eb0:	cmp	ip, #0
   14eb4:	beq	14f40 <__assert_fail@plt+0x3ee0>
   14eb8:	lsr	r6, r8, #1
   14ebc:	orr	r6, r6, r9, lsl #31
   14ec0:	lsr	r7, r9, #1
   14ec4:	mov	r2, ip
   14ec8:	b	14eec <__assert_fail@plt+0x3e8c>
   14ecc:	subs	r3, r4, r6
   14ed0:	sbc	r8, r5, r7
   14ed4:	adds	r3, r3, r3
   14ed8:	adc	r8, r8, r8
   14edc:	adds	r4, r3, #1
   14ee0:	adc	r5, r8, #0
   14ee4:	subs	r2, r2, #1
   14ee8:	beq	14f08 <__assert_fail@plt+0x3ea8>
   14eec:	cmp	r5, r7
   14ef0:	cmpeq	r4, r6
   14ef4:	bcs	14ecc <__assert_fail@plt+0x3e6c>
   14ef8:	adds	r4, r4, r4
   14efc:	adc	r5, r5, r5
   14f00:	subs	r2, r2, #1
   14f04:	bne	14eec <__assert_fail@plt+0x3e8c>
   14f08:	lsr	r3, r4, ip
   14f0c:	orr	r3, r3, r5, lsl fp
   14f10:	lsr	r2, r5, ip
   14f14:	orr	r3, r3, r5, lsr sl
   14f18:	adds	r0, r0, r4
   14f1c:	mov	r4, r3
   14f20:	lsl	r3, r2, ip
   14f24:	orr	r3, r3, r4, lsl sl
   14f28:	lsl	ip, r4, ip
   14f2c:	orr	r3, r3, r4, lsr fp
   14f30:	adc	r1, r1, r5
   14f34:	subs	r0, r0, ip
   14f38:	mov	r5, r2
   14f3c:	sbc	r1, r1, r3
   14f40:	cmp	lr, #0
   14f44:	strdne	r4, [lr]
   14f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14f50:	mov	r7, r0
   14f54:	ldr	r6, [pc, #72]	; 14fa4 <__assert_fail@plt+0x3f44>
   14f58:	ldr	r5, [pc, #72]	; 14fa8 <__assert_fail@plt+0x3f48>
   14f5c:	add	r6, pc, r6
   14f60:	add	r5, pc, r5
   14f64:	sub	r6, r6, r5
   14f68:	mov	r8, r1
   14f6c:	mov	r9, r2
   14f70:	bl	10de8 <calloc@plt-0x20>
   14f74:	asrs	r6, r6, #2
   14f78:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f7c:	mov	r4, #0
   14f80:	add	r4, r4, #1
   14f84:	ldr	r3, [r5], #4
   14f88:	mov	r2, r9
   14f8c:	mov	r1, r8
   14f90:	mov	r0, r7
   14f94:	blx	r3
   14f98:	cmp	r6, r4
   14f9c:	bne	14f80 <__assert_fail@plt+0x3f20>
   14fa0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14fa4:	andeq	r0, r1, r8, lsr #31
   14fa8:	andeq	r0, r1, r0, lsr #31
   14fac:	bx	lr
   14fb0:	ldr	r3, [pc, #12]	; 14fc4 <__assert_fail@plt+0x3f64>
   14fb4:	mov	r1, #0
   14fb8:	add	r3, pc, r3
   14fbc:	ldr	r2, [r3]
   14fc0:	b	10f88 <__cxa_atexit@plt>
   14fc4:	andeq	r1, r1, r4, lsr #2

Disassembly of section .fini:

00014fc8 <.fini>:
   14fc8:	push	{r3, lr}
   14fcc:	pop	{r3, pc}
