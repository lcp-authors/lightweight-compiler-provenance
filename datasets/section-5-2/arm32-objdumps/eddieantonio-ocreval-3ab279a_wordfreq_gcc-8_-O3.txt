
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

000109ec <.init>:
   109ec:	push	{r3, lr}
   109f0:	bl	10d10 <__assert_fail@plt+0x148>
   109f4:	pop	{r3, pc}

Disassembly of section .plt:

000109f8 <calloc@plt-0x14>:
   109f8:	push	{lr}		; (str lr, [sp, #-4]!)
   109fc:	ldr	lr, [pc, #4]	; 10a08 <calloc@plt-0x4>
   10a00:	add	lr, pc, lr
   10a04:	ldr	pc, [lr, #8]!
   10a08:	strdeq	r7, [r1], -r8

00010a0c <calloc@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #94208	; 0x17000
   10a14:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a18 <strcmp@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #94208	; 0x17000
   10a20:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a24 <strtol@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #94208	; 0x17000
   10a2c:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a30 <printf@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #94208	; 0x17000
   10a38:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a3c <fopen@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #94208	; 0x17000
   10a44:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a48 <free@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #94208	; 0x17000
   10a50:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a54 <utf8proc_get_property@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #94208	; 0x17000
   10a5c:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a60 <fgets@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #94208	; 0x17000
   10a68:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a6c <utf8proc_encode_char@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #94208	; 0x17000
   10a74:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a78 <strdup@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #94208	; 0x17000
   10a80:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a84 <rewind@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #94208	; 0x17000
   10a8c:	ldr	pc, [ip, #1448]!	; 0x5a8

00010a90 <unlink@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #94208	; 0x17000
   10a98:	ldr	pc, [ip, #1440]!	; 0x5a0

00010a9c <utf8proc_tolower@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #94208	; 0x17000
   10aa4:	ldr	pc, [ip, #1432]!	; 0x598

00010aa8 <__xstat@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #94208	; 0x17000
   10ab0:	ldr	pc, [ip, #1424]!	; 0x590

00010ab4 <fwrite@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #94208	; 0x17000
   10abc:	ldr	pc, [ip, #1416]!	; 0x588

00010ac0 <fread@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #94208	; 0x17000
   10ac8:	ldr	pc, [ip, #1408]!	; 0x580

00010acc <utf8proc_iterate@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #94208	; 0x17000
   10ad4:	ldr	pc, [ip, #1400]!	; 0x578

00010ad8 <puts@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #94208	; 0x17000
   10ae0:	ldr	pc, [ip, #1392]!	; 0x570

00010ae4 <malloc@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #94208	; 0x17000
   10aec:	ldr	pc, [ip, #1384]!	; 0x568

00010af0 <__libc_start_main@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #94208	; 0x17000
   10af8:	ldr	pc, [ip, #1376]!	; 0x560

00010afc <__sysv_signal@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #94208	; 0x17000
   10b04:	ldr	pc, [ip, #1368]!	; 0x558

00010b08 <__gmon_start__@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #94208	; 0x17000
   10b10:	ldr	pc, [ip, #1360]!	; 0x550

00010b14 <getpid@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #94208	; 0x17000
   10b1c:	ldr	pc, [ip, #1352]!	; 0x548

00010b20 <exit@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #94208	; 0x17000
   10b28:	ldr	pc, [ip, #1344]!	; 0x540

00010b2c <utf8proc_category@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #94208	; 0x17000
   10b34:	ldr	pc, [ip, #1336]!	; 0x538

00010b38 <strlen@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #94208	; 0x17000
   10b40:	ldr	pc, [ip, #1328]!	; 0x530

00010b44 <fprintf@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #94208	; 0x17000
   10b4c:	ldr	pc, [ip, #1320]!	; 0x528

00010b50 <__isoc99_sscanf@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #94208	; 0x17000
   10b58:	ldr	pc, [ip, #1312]!	; 0x520

00010b5c <fclose@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #94208	; 0x17000
   10b64:	ldr	pc, [ip, #1304]!	; 0x518

00010b68 <utf8proc_NFC@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #94208	; 0x17000
   10b70:	ldr	pc, [ip, #1296]!	; 0x510

00010b74 <fputc@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #94208	; 0x17000
   10b7c:	ldr	pc, [ip, #1288]!	; 0x508

00010b80 <sprintf@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #94208	; 0x17000
   10b88:	ldr	pc, [ip, #1280]!	; 0x500

00010b8c <utf8proc_errmsg@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #94208	; 0x17000
   10b94:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b98 <fputs@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #94208	; 0x17000
   10ba0:	ldr	pc, [ip, #1264]!	; 0x4f0

00010ba4 <strncmp@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #94208	; 0x17000
   10bac:	ldr	pc, [ip, #1256]!	; 0x4e8

00010bb0 <abort@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #94208	; 0x17000
   10bb8:	ldr	pc, [ip, #1248]!	; 0x4e0

00010bbc <getc@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #94208	; 0x17000
   10bc4:	ldr	pc, [ip, #1240]!	; 0x4d8

00010bc8 <__assert_fail@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #94208	; 0x17000
   10bd0:	ldr	pc, [ip, #1232]!	; 0x4d0

Disassembly of section .text:

00010bd8 <error@@Base-0x227c>:
   10bd8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10bdc:	mov	r3, #0
   10be0:	movw	r2, #15412	; 0x3c34
   10be4:	movt	r2, #1
   10be8:	strd	r6, [sp, #8]
   10bec:	strd	r8, [sp, #16]
   10bf0:	mov	r8, r1
   10bf4:	strd	sl, [sp, #24]
   10bf8:	str	lr, [sp, #32]
   10bfc:	sub	sp, sp, #12
   10c00:	str	r0, [sp, #4]
   10c04:	add	r0, sp, #4
   10c08:	bl	12fc0 <error@@Base+0x16c>
   10c0c:	ldr	r3, [sp, #4]
   10c10:	cmp	r3, #0
   10c14:	beq	10cc8 <__assert_fail@plt+0x100>
   10c18:	ble	10cc0 <__assert_fail@plt+0xf8>
   10c1c:	movw	sl, #33116	; 0x815c
   10c20:	movt	sl, #2
   10c24:	movw	fp, #32944	; 0x80b0
   10c28:	movt	fp, #2
   10c2c:	movw	r6, #33100	; 0x814c
   10c30:	movt	r6, #2
   10c34:	sub	r8, r8, #4
   10c38:	mov	r9, sl
   10c3c:	mov	r7, #0
   10c40:	mov	r2, fp
   10c44:	mov	r0, r6
   10c48:	ldr	r1, [r8, #4]!
   10c4c:	bl	13320 <error@@Base+0x4cc>
   10c50:	mov	r1, r6
   10c54:	mov	r0, r9
   10c58:	bl	1241c <__assert_fail@plt+0x1854>
   10c5c:	ldr	r4, [sl]
   10c60:	cmp	r4, #0
   10c64:	beq	10c90 <__assert_fail@plt+0xc8>
   10c68:	movw	r5, #33132	; 0x816c
   10c6c:	movt	r5, #2
   10c70:	mov	r3, #0
   10c74:	mov	r2, #1
   10c78:	ldr	r1, [r4, #8]
   10c7c:	mov	r0, r5
   10c80:	bl	11bbc <__assert_fail@plt+0xff4>
   10c84:	ldr	r4, [r4, #4]
   10c88:	cmp	r4, #0
   10c8c:	bne	10c70 <__assert_fail@plt+0xa8>
   10c90:	mov	r0, r6
   10c94:	movw	r1, #2632	; 0xa48
   10c98:	movt	r1, #1
   10c9c:	add	r7, r7, #1
   10ca0:	bl	112e0 <__assert_fail@plt+0x718>
   10ca4:	movw	r1, #11152	; 0x2b90
   10ca8:	movt	r1, #1
   10cac:	mov	r0, r9
   10cb0:	bl	112e0 <__assert_fail@plt+0x718>
   10cb4:	ldr	r3, [sp, #4]
   10cb8:	cmp	r3, r7
   10cbc:	bgt	10c40 <__assert_fail@plt+0x78>
   10cc0:	bl	10f40 <__assert_fail@plt+0x378>
   10cc4:	bl	12df4 <__assert_fail@plt+0x222c>
   10cc8:	movw	r0, #15448	; 0x3c58
   10ccc:	movt	r0, #1
   10cd0:	bl	12e54 <error@@Base>
   10cd4:	mov	fp, #0
   10cd8:	mov	lr, #0
   10cdc:	pop	{r1}		; (ldr r1, [sp], #4)
   10ce0:	mov	r2, sp
   10ce4:	push	{r2}		; (str r2, [sp, #-4]!)
   10ce8:	push	{r0}		; (str r0, [sp, #-4]!)
   10cec:	ldr	ip, [pc, #16]	; 10d04 <__assert_fail@plt+0x13c>
   10cf0:	push	{ip}		; (str ip, [sp, #-4]!)
   10cf4:	ldr	r0, [pc, #12]	; 10d08 <__assert_fail@plt+0x140>
   10cf8:	ldr	r3, [pc, #12]	; 10d0c <__assert_fail@plt+0x144>
   10cfc:	bl	10af0 <__libc_start_main@plt>
   10d00:	bl	10bb0 <abort@plt>
   10d04:	strdeq	r3, [r1], -ip
   10d08:	ldrdeq	r0, [r1], -r8
   10d0c:	muleq	r1, ip, fp
   10d10:	ldr	r3, [pc, #20]	; 10d2c <__assert_fail@plt+0x164>
   10d14:	ldr	r2, [pc, #20]	; 10d30 <__assert_fail@plt+0x168>
   10d18:	add	r3, pc, r3
   10d1c:	ldr	r2, [r3, r2]
   10d20:	cmp	r2, #0
   10d24:	bxeq	lr
   10d28:	b	10b08 <__gmon_start__@plt>
   10d2c:	andeq	r7, r1, r0, ror #5
   10d30:	andeq	r0, r0, r4, lsr #1
   10d34:	ldr	r0, [pc, #24]	; 10d54 <__assert_fail@plt+0x18c>
   10d38:	ldr	r3, [pc, #24]	; 10d58 <__assert_fail@plt+0x190>
   10d3c:	cmp	r3, r0
   10d40:	bxeq	lr
   10d44:	ldr	r3, [pc, #16]	; 10d5c <__assert_fail@plt+0x194>
   10d48:	cmp	r3, #0
   10d4c:	bxeq	lr
   10d50:	bx	r3
   10d54:	andeq	r8, r2, r4, asr #1
   10d58:	andeq	r8, r2, r4, asr #1
   10d5c:	andeq	r0, r0, r0
   10d60:	ldr	r0, [pc, #36]	; 10d8c <__assert_fail@plt+0x1c4>
   10d64:	ldr	r1, [pc, #36]	; 10d90 <__assert_fail@plt+0x1c8>
   10d68:	sub	r1, r1, r0
   10d6c:	asr	r1, r1, #2
   10d70:	add	r1, r1, r1, lsr #31
   10d74:	asrs	r1, r1, #1
   10d78:	bxeq	lr
   10d7c:	ldr	r3, [pc, #16]	; 10d94 <__assert_fail@plt+0x1cc>
   10d80:	cmp	r3, #0
   10d84:	bxeq	lr
   10d88:	bx	r3
   10d8c:	andeq	r8, r2, r4, asr #1
   10d90:	andeq	r8, r2, r4, asr #1
   10d94:	andeq	r0, r0, r0
   10d98:	push	{r4, lr}
   10d9c:	ldr	r4, [pc, #24]	; 10dbc <__assert_fail@plt+0x1f4>
   10da0:	ldrb	r3, [r4]
   10da4:	cmp	r3, #0
   10da8:	popne	{r4, pc}
   10dac:	bl	10d34 <__assert_fail@plt+0x16c>
   10db0:	mov	r3, #1
   10db4:	strb	r3, [r4]
   10db8:	pop	{r4, pc}
   10dbc:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   10dc0:	b	10d60 <__assert_fail@plt+0x198>
   10dc4:	ldr	r0, [r0, #8]
   10dc8:	ldr	r1, [r1, #8]
   10dcc:	b	12c5c <__assert_fail@plt+0x2094>
   10dd0:	ldr	r2, [r0, #12]
   10dd4:	ldr	r3, [r1, #12]
   10dd8:	cmp	r2, r3
   10ddc:	beq	10de8 <__assert_fail@plt+0x220>
   10de0:	sub	r0, r3, r2
   10de4:	bx	lr
   10de8:	ldr	r0, [r0, #8]
   10dec:	ldr	r1, [r1, #8]
   10df0:	b	12c5c <__assert_fail@plt+0x2094>
   10df4:	mov	r1, r0
   10df8:	movw	r2, #32944	; 0x80b0
   10dfc:	movt	r2, #2
   10e00:	movw	r0, #33100	; 0x814c
   10e04:	movt	r0, #2
   10e08:	strd	r4, [sp, #-16]!
   10e0c:	movw	r4, #33116	; 0x815c
   10e10:	movt	r4, #2
   10e14:	str	r6, [sp, #8]
   10e18:	str	lr, [sp, #12]
   10e1c:	bl	13320 <error@@Base+0x4cc>
   10e20:	mov	r0, r4
   10e24:	movw	r1, #33100	; 0x814c
   10e28:	movt	r1, #2
   10e2c:	bl	1241c <__assert_fail@plt+0x1854>
   10e30:	ldr	r4, [r4]
   10e34:	cmp	r4, #0
   10e38:	beq	10e64 <__assert_fail@plt+0x29c>
   10e3c:	movw	r5, #33132	; 0x816c
   10e40:	movt	r5, #2
   10e44:	mov	r3, #0
   10e48:	mov	r2, #1
   10e4c:	ldr	r1, [r4, #8]
   10e50:	mov	r0, r5
   10e54:	bl	11bbc <__assert_fail@plt+0xff4>
   10e58:	ldr	r4, [r4, #4]
   10e5c:	cmp	r4, #0
   10e60:	bne	10e44 <__assert_fail@plt+0x27c>
   10e64:	movw	r1, #2632	; 0xa48
   10e68:	movt	r1, #1
   10e6c:	movw	r0, #33100	; 0x814c
   10e70:	movt	r0, #2
   10e74:	bl	112e0 <__assert_fail@plt+0x718>
   10e78:	movw	r1, #11152	; 0x2b90
   10e7c:	movt	r1, #1
   10e80:	ldrd	r4, [sp]
   10e84:	movw	r0, #33116	; 0x815c
   10e88:	movt	r0, #2
   10e8c:	ldr	r6, [sp, #8]
   10e90:	ldr	lr, [sp, #12]
   10e94:	add	sp, sp, #16
   10e98:	b	112e0 <__assert_fail@plt+0x718>
   10e9c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10ea0:	movw	r0, #15372	; 0x3c0c
   10ea4:	movt	r0, #1
   10ea8:	ldr	r5, [pc, #140]	; 10f3c <__assert_fail@plt+0x374>
   10eac:	strd	r6, [sp, #8]
   10eb0:	str	r8, [sp, #16]
   10eb4:	str	lr, [sp, #20]
   10eb8:	bl	10ad8 <puts@plt>
   10ebc:	ldr	r3, [r5, #3956]	; 0xf74
   10ec0:	cmp	r3, #0
   10ec4:	ble	10f34 <__assert_fail@plt+0x36c>
   10ec8:	ldr	r3, [r5, #3952]	; 0xf70
   10ecc:	mov	r6, #0
   10ed0:	movw	r7, #15384	; 0x3c18
   10ed4:	movt	r7, #1
   10ed8:	mov	r4, r6
   10edc:	ldr	r3, [r3, r4, lsl #2]
   10ee0:	mov	r0, r7
   10ee4:	ldr	r2, [r3, #8]
   10ee8:	ldr	r1, [r3, #12]
   10eec:	bl	10a30 <printf@plt>
   10ef0:	ldr	r3, [r5, #3952]	; 0xf70
   10ef4:	ldr	r1, [r5, #3956]	; 0xf74
   10ef8:	ldr	r2, [r3, r4, lsl #2]
   10efc:	add	r4, r4, #1
   10f00:	cmp	r1, r4
   10f04:	ldr	r2, [r2, #12]
   10f08:	add	r6, r6, r2
   10f0c:	bgt	10edc <__assert_fail@plt+0x314>
   10f10:	mov	r1, r6
   10f14:	movw	r0, #15396	; 0x3c24
   10f18:	movt	r0, #1
   10f1c:	ldrd	r4, [sp]
   10f20:	ldrd	r6, [sp, #8]
   10f24:	ldr	r8, [sp, #16]
   10f28:	ldr	lr, [sp, #20]
   10f2c:	add	sp, sp, #24
   10f30:	b	10a30 <printf@plt>
   10f34:	mov	r6, #0
   10f38:	b	10f10 <__assert_fail@plt+0x348>
   10f3c:	andeq	r9, r2, ip, ror #2
   10f40:	strd	r4, [sp, #-24]!	; 0xffffffe8
   10f44:	movw	r0, #33132	; 0x816c
   10f48:	movt	r0, #2
   10f4c:	ldr	r4, [pc, #324]	; 11098 <__assert_fail@plt+0x4d0>
   10f50:	strd	r6, [sp, #8]
   10f54:	str	r8, [sp, #16]
   10f58:	str	lr, [sp, #20]
   10f5c:	bl	1221c <__assert_fail@plt+0x1654>
   10f60:	movw	r2, #3524	; 0xdc4
   10f64:	movt	r2, #1
   10f68:	ldr	r1, [r4, #3952]	; 0xf70
   10f6c:	ldr	r0, [r4, #3956]	; 0xf74
   10f70:	bl	11508 <__assert_fail@plt+0x940>
   10f74:	movw	r0, #15372	; 0x3c0c
   10f78:	movt	r0, #1
   10f7c:	bl	10ad8 <puts@plt>
   10f80:	ldr	r3, [r4, #3956]	; 0xf74
   10f84:	cmp	r3, #0
   10f88:	ble	11088 <__assert_fail@plt+0x4c0>
   10f8c:	ldr	r3, [r4, #3952]	; 0xf70
   10f90:	mov	r6, #0
   10f94:	movw	r7, #15384	; 0x3c18
   10f98:	movt	r7, #1
   10f9c:	mov	r5, r6
   10fa0:	ldr	r3, [r3, r5, lsl #2]
   10fa4:	mov	r0, r7
   10fa8:	ldr	r2, [r3, #8]
   10fac:	ldr	r1, [r3, #12]
   10fb0:	bl	10a30 <printf@plt>
   10fb4:	ldr	r3, [r4, #3952]	; 0xf70
   10fb8:	ldr	r1, [r4, #3956]	; 0xf74
   10fbc:	ldr	r2, [r3, r5, lsl #2]
   10fc0:	add	r5, r5, #1
   10fc4:	cmp	r5, r1
   10fc8:	ldr	r2, [r2, #12]
   10fcc:	add	r6, r6, r2
   10fd0:	blt	10fa0 <__assert_fail@plt+0x3d8>
   10fd4:	mov	r1, r6
   10fd8:	movw	r0, #15396	; 0x3c24
   10fdc:	movt	r0, #1
   10fe0:	bl	10a30 <printf@plt>
   10fe4:	movw	r0, #15728	; 0x3d70
   10fe8:	movt	r0, #1
   10fec:	bl	10ad8 <puts@plt>
   10ff0:	movw	r2, #3536	; 0xdd0
   10ff4:	movt	r2, #1
   10ff8:	ldr	r1, [r4, #3952]	; 0xf70
   10ffc:	ldr	r0, [r4, #3956]	; 0xf74
   11000:	bl	11508 <__assert_fail@plt+0x940>
   11004:	movw	r0, #15372	; 0x3c0c
   11008:	movt	r0, #1
   1100c:	bl	10ad8 <puts@plt>
   11010:	ldr	r3, [r4, #3956]	; 0xf74
   11014:	cmp	r3, #0
   11018:	ble	11090 <__assert_fail@plt+0x4c8>
   1101c:	ldr	r3, [r4, #3952]	; 0xf70
   11020:	mov	r6, #0
   11024:	movw	r7, #15384	; 0x3c18
   11028:	movt	r7, #1
   1102c:	mov	r5, r6
   11030:	ldr	r3, [r3, r5, lsl #2]
   11034:	mov	r0, r7
   11038:	ldr	r2, [r3, #8]
   1103c:	ldr	r1, [r3, #12]
   11040:	bl	10a30 <printf@plt>
   11044:	ldr	r3, [r4, #3952]	; 0xf70
   11048:	ldr	r1, [r4, #3956]	; 0xf74
   1104c:	ldr	r2, [r3, r5, lsl #2]
   11050:	add	r5, r5, #1
   11054:	cmp	r5, r1
   11058:	ldr	r2, [r2, #12]
   1105c:	add	r6, r6, r2
   11060:	blt	11030 <__assert_fail@plt+0x468>
   11064:	mov	r1, r6
   11068:	movw	r0, #15396	; 0x3c24
   1106c:	movt	r0, #1
   11070:	ldrd	r4, [sp]
   11074:	ldrd	r6, [sp, #8]
   11078:	ldr	r8, [sp, #16]
   1107c:	ldr	lr, [sp, #20]
   11080:	add	sp, sp, #24
   11084:	b	10a30 <printf@plt>
   11088:	mov	r6, #0
   1108c:	b	10fd4 <__assert_fail@plt+0x40c>
   11090:	mov	r6, #0
   11094:	b	11064 <__assert_fail@plt+0x49c>
   11098:	andeq	r9, r2, ip, ror #2
   1109c:	mov	r3, #0
   110a0:	str	r3, [r0]
   110a4:	str	r3, [r0, #4]
   110a8:	str	r3, [r0, #8]
   110ac:	str	r3, [r0, #12]
   110b0:	bx	lr
   110b4:	ldr	r3, [r0]
   110b8:	mov	r2, #0
   110bc:	str	r4, [sp, #-8]!
   110c0:	mov	r4, r0
   110c4:	str	lr, [sp, #4]
   110c8:	cmp	r3, r2
   110cc:	strd	r2, [r1]
   110d0:	str	r1, [r0]
   110d4:	streq	r1, [r0, #4]
   110d8:	ldr	r0, [r0, #8]
   110dc:	strne	r1, [r3]
   110e0:	cmp	r0, #0
   110e4:	beq	110f4 <__assert_fail@plt+0x52c>
   110e8:	bl	10a48 <free@plt>
   110ec:	mov	r3, #0
   110f0:	str	r3, [r4, #8]
   110f4:	ldr	r3, [r4, #12]
   110f8:	add	r3, r3, #1
   110fc:	str	r3, [r4, #12]
   11100:	ldr	r4, [sp]
   11104:	add	sp, sp, #4
   11108:	pop	{pc}		; (ldr pc, [sp], #4)
   1110c:	ldr	r3, [r0, #4]
   11110:	mov	r2, #0
   11114:	str	r4, [sp, #-8]!
   11118:	mov	r4, r0
   1111c:	str	lr, [sp, #4]
   11120:	cmp	r3, r2
   11124:	str	r3, [r1]
   11128:	str	r2, [r1, #4]
   1112c:	streq	r1, [r0]
   11130:	ldr	r0, [r0, #8]
   11134:	strne	r1, [r3, #4]
   11138:	str	r1, [r4, #4]
   1113c:	cmp	r0, #0
   11140:	beq	11150 <__assert_fail@plt+0x588>
   11144:	bl	10a48 <free@plt>
   11148:	mov	r3, #0
   1114c:	str	r3, [r4, #8]
   11150:	ldr	r3, [r4, #12]
   11154:	add	r3, r3, #1
   11158:	str	r3, [r4, #12]
   1115c:	ldr	r4, [sp]
   11160:	add	sp, sp, #4
   11164:	pop	{pc}		; (ldr pc, [sp], #4)
   11168:	ldr	r3, [r2]
   1116c:	str	r4, [sp, #-8]!
   11170:	mov	r4, r0
   11174:	str	lr, [sp, #4]
   11178:	cmp	r3, #0
   1117c:	str	r3, [r1]
   11180:	str	r2, [r1, #4]
   11184:	streq	r1, [r0]
   11188:	ldr	r0, [r0, #8]
   1118c:	strne	r1, [r3, #4]
   11190:	str	r1, [r2]
   11194:	cmp	r0, #0
   11198:	beq	111a8 <__assert_fail@plt+0x5e0>
   1119c:	bl	10a48 <free@plt>
   111a0:	mov	r3, #0
   111a4:	str	r3, [r4, #8]
   111a8:	ldr	r3, [r4, #12]
   111ac:	add	r3, r3, #1
   111b0:	str	r3, [r4, #12]
   111b4:	ldr	r4, [sp]
   111b8:	add	sp, sp, #4
   111bc:	pop	{pc}		; (ldr pc, [sp], #4)
   111c0:	ldr	r3, [r1, #4]
   111c4:	str	r4, [sp, #-8]!
   111c8:	mov	r4, r0
   111cc:	str	lr, [sp, #4]
   111d0:	cmp	r3, #0
   111d4:	stm	r2, {r1, r3}
   111d8:	str	r2, [r1, #4]
   111dc:	streq	r2, [r0, #4]
   111e0:	ldr	r0, [r0, #8]
   111e4:	strne	r2, [r3]
   111e8:	cmp	r0, #0
   111ec:	beq	111fc <__assert_fail@plt+0x634>
   111f0:	bl	10a48 <free@plt>
   111f4:	mov	r3, #0
   111f8:	str	r3, [r4, #8]
   111fc:	ldr	r3, [r4, #12]
   11200:	add	r3, r3, #1
   11204:	str	r3, [r4, #12]
   11208:	ldr	r4, [sp]
   1120c:	add	sp, sp, #4
   11210:	pop	{pc}		; (ldr pc, [sp], #4)
   11214:	ldrd	r2, [r1]
   11218:	strd	r4, [sp, #-16]!
   1121c:	mov	r4, r0
   11220:	mov	r5, #0
   11224:	str	r6, [sp, #8]
   11228:	str	lr, [sp, #12]
   1122c:	cmp	r2, #0
   11230:	strne	r3, [r2, #4]
   11234:	ldrne	r3, [r1, #4]
   11238:	streq	r3, [r0]
   1123c:	cmp	r3, #0
   11240:	streq	r2, [r0, #4]
   11244:	ldr	r0, [r0, #8]
   11248:	strne	r2, [r3]
   1124c:	str	r5, [r1]
   11250:	str	r5, [r1, #4]
   11254:	cmp	r0, r5
   11258:	beq	11264 <__assert_fail@plt+0x69c>
   1125c:	bl	10a48 <free@plt>
   11260:	str	r5, [r4, #8]
   11264:	ldr	r3, [r4, #12]
   11268:	ldr	r6, [sp, #8]
   1126c:	sub	r3, r3, #1
   11270:	str	r3, [r4, #12]
   11274:	ldrd	r4, [sp]
   11278:	add	sp, sp, #12
   1127c:	pop	{pc}		; (ldr pc, [sp], #4)
   11280:	ldr	r3, [r0, #8]
   11284:	cmp	r3, #0
   11288:	bxne	lr
   1128c:	ldr	r3, [r0, #12]
   11290:	cmp	r3, #0
   11294:	bxeq	lr
   11298:	mov	r1, #4
   1129c:	str	r4, [sp, #-8]!
   112a0:	mov	r4, r0
   112a4:	mov	r0, r3
   112a8:	str	lr, [sp, #4]
   112ac:	bl	12e94 <error@@Base+0x40>
   112b0:	ldr	r3, [r4]
   112b4:	str	r0, [r4, #8]
   112b8:	cmp	r3, #0
   112bc:	beq	112d4 <__assert_fail@plt+0x70c>
   112c0:	sub	r0, r0, #4
   112c4:	str	r3, [r0, #4]!
   112c8:	ldr	r3, [r3, #4]
   112cc:	cmp	r3, #0
   112d0:	bne	112c4 <__assert_fail@plt+0x6fc>
   112d4:	ldr	r4, [sp]
   112d8:	add	sp, sp, #4
   112dc:	pop	{pc}		; (ldr pc, [sp], #4)
   112e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   112e4:	ldr	r4, [r0]
   112e8:	strd	r6, [sp, #8]
   112ec:	str	r8, [sp, #16]
   112f0:	str	lr, [sp, #20]
   112f4:	cmp	r4, #0
   112f8:	beq	11378 <__assert_fail@plt+0x7b0>
   112fc:	mov	r7, r1
   11300:	mov	r5, r0
   11304:	mov	r6, #0
   11308:	b	11338 <__assert_fail@plt+0x770>
   1130c:	mov	r0, r3
   11310:	bl	10a48 <free@plt>
   11314:	ldr	r3, [r5, #12]
   11318:	mov	r0, r4
   1131c:	str	r6, [r5, #8]
   11320:	sub	r3, r3, #1
   11324:	str	r3, [r5, #12]
   11328:	blx	r7
   1132c:	ldr	r4, [r5]
   11330:	cmp	r4, #0
   11334:	beq	11378 <__assert_fail@plt+0x7b0>
   11338:	ldrd	r2, [r4]
   1133c:	mov	r0, r4
   11340:	cmp	r2, #0
   11344:	strne	r3, [r2, #4]
   11348:	ldrne	r3, [r4, #4]
   1134c:	streq	r3, [r5]
   11350:	cmp	r3, #0
   11354:	strne	r2, [r3]
   11358:	ldr	r3, [r5, #8]
   1135c:	streq	r2, [r5, #4]
   11360:	str	r6, [r4]
   11364:	str	r6, [r4, #4]
   11368:	cmp	r3, #0
   1136c:	bne	1130c <__assert_fail@plt+0x744>
   11370:	ldr	r3, [r5, #12]
   11374:	b	11320 <__assert_fail@plt+0x758>
   11378:	ldrd	r4, [sp]
   1137c:	ldrd	r6, [sp, #8]
   11380:	ldr	r8, [sp, #16]
   11384:	add	sp, sp, #20
   11388:	pop	{pc}		; (ldr pc, [sp], #4)
   1138c:	lsl	r3, r1, #2
   11390:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11394:	strd	r6, [sp, #8]
   11398:	strd	r8, [sp, #16]
   1139c:	mov	r8, r0
   113a0:	strd	sl, [sp, #24]
   113a4:	movw	sl, #32988	; 0x80dc
   113a8:	movt	sl, #2
   113ac:	str	lr, [sp, #32]
   113b0:	sub	sp, sp, #12
   113b4:	str	r1, [sp]
   113b8:	str	r3, [sp, #4]
   113bc:	ldr	r3, [sp]
   113c0:	ldr	r1, [sl]
   113c4:	cmp	r8, r3
   113c8:	movlt	r4, r3
   113cc:	movlt	r7, r8
   113d0:	ldr	r5, [r1, r8, lsl #2]
   113d4:	bge	114f4 <__assert_fail@plt+0x92c>
   113d8:	mov	r0, r5
   113dc:	lsl	fp, r4, #2
   113e0:	ldr	r1, [r1, r4, lsl #2]
   113e4:	ldr	r2, [sl, #4]
   113e8:	blx	r2
   113ec:	cmp	r0, #0
   113f0:	bge	11484 <__assert_fail@plt+0x8bc>
   113f4:	sub	r4, r4, #1
   113f8:	ldr	r1, [sl]
   113fc:	cmp	r7, r4
   11400:	lslge	fp, r4, #2
   11404:	blt	113d8 <__assert_fail@plt+0x810>
   11408:	cmp	r4, r7
   1140c:	add	r6, r1, fp
   11410:	beq	11494 <__assert_fail@plt+0x8cc>
   11414:	ldr	r0, [r1, fp]
   11418:	add	r9, r7, #1
   1141c:	lsl	r6, r7, #2
   11420:	cmp	r4, r9
   11424:	str	r0, [r1, r7, lsl #2]
   11428:	bgt	11440 <__assert_fail@plt+0x878>
   1142c:	b	114d4 <__assert_fail@plt+0x90c>
   11430:	add	r9, r9, #1
   11434:	ldr	r1, [sl]
   11438:	cmp	r4, r9
   1143c:	beq	1148c <__assert_fail@plt+0x8c4>
   11440:	mov	r0, r5
   11444:	ldr	r1, [r1, r9, lsl #2]
   11448:	lsl	r6, r9, #2
   1144c:	ldr	r7, [sl, #4]
   11450:	blx	r7
   11454:	cmp	r0, #0
   11458:	bgt	11430 <__assert_fail@plt+0x868>
   1145c:	ldr	r1, [sl]
   11460:	mov	r7, r9
   11464:	add	r6, r1, r6
   11468:	ldr	r0, [r6]
   1146c:	sub	r4, r4, #1
   11470:	cmp	r4, r9
   11474:	str	r0, [r1, fp]
   11478:	bgt	113d8 <__assert_fail@plt+0x810>
   1147c:	add	r6, r1, r4, lsl #2
   11480:	b	11498 <__assert_fail@plt+0x8d0>
   11484:	ldr	r1, [sl]
   11488:	b	11408 <__assert_fail@plt+0x840>
   1148c:	add	r6, r1, fp
   11490:	mov	r7, r4
   11494:	mov	r4, r7
   11498:	sub	r1, r4, #1
   1149c:	str	r5, [r6]
   114a0:	cmp	r8, r1
   114a4:	blt	114e8 <__assert_fail@plt+0x920>
   114a8:	ldr	r3, [sp]
   114ac:	add	r8, r7, #1
   114b0:	cmp	r8, r3
   114b4:	blt	113bc <__assert_fail@plt+0x7f4>
   114b8:	add	sp, sp, #12
   114bc:	ldrd	r4, [sp]
   114c0:	ldrd	r6, [sp, #8]
   114c4:	ldrd	r8, [sp, #16]
   114c8:	ldrd	sl, [sp, #24]
   114cc:	add	sp, sp, #32
   114d0:	pop	{pc}		; (ldr pc, [sp], #4)
   114d4:	add	r6, r6, #4
   114d8:	add	r6, r1, r6
   114dc:	beq	11490 <__assert_fail@plt+0x8c8>
   114e0:	mov	r7, r9
   114e4:	b	11468 <__assert_fail@plt+0x8a0>
   114e8:	mov	r0, r8
   114ec:	bl	1138c <__assert_fail@plt+0x7c4>
   114f0:	b	114a8 <__assert_fail@plt+0x8e0>
   114f4:	mov	r4, r3
   114f8:	ldr	r3, [sp, #4]
   114fc:	mov	r7, r8
   11500:	add	r6, r1, r3
   11504:	b	11498 <__assert_fail@plt+0x8d0>
   11508:	cmp	r0, #1
   1150c:	mov	ip, r1
   11510:	ble	11530 <__assert_fail@plt+0x968>
   11514:	movw	r3, #32988	; 0x80dc
   11518:	movt	r3, #2
   1151c:	sub	r1, r0, #1
   11520:	mov	r0, #0
   11524:	str	ip, [r3]
   11528:	str	r2, [r3, #4]
   1152c:	b	1138c <__assert_fail@plt+0x7c4>
   11530:	bx	lr
   11534:	andeq	r0, r0, r0
   11538:	ldr	r0, [r0, #8]
   1153c:	ldr	r1, [r1, #8]
   11540:	b	12c5c <__assert_fail@plt+0x2094>
   11544:	mov	r2, r0
   11548:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1154c:	strd	r6, [sp, #8]
   11550:	mov	r6, r0
   11554:	mov	r7, r1
   11558:	movw	r0, #32996	; 0x80e4
   1155c:	movt	r0, #2
   11560:	strd	r8, [sp, #16]
   11564:	mov	r1, #99	; 0x63
   11568:	str	lr, [sp, #24]
   1156c:	sub	sp, sp, #12
   11570:	bl	10a60 <fgets@plt>
   11574:	cmp	r0, #0
   11578:	beq	11644 <__assert_fail@plt+0xa7c>
   1157c:	movw	r0, #32996	; 0x80e4
   11580:	movt	r0, #2
   11584:	mov	r2, r6
   11588:	mov	r1, #99	; 0x63
   1158c:	bl	10a60 <fgets@plt>
   11590:	cmp	r0, #0
   11594:	beq	11644 <__assert_fail@plt+0xa7c>
   11598:	movw	r4, #32996	; 0x80e4
   1159c:	movt	r4, #2
   115a0:	movw	r8, #15480	; 0x3c78
   115a4:	movt	r8, #1
   115a8:	add	r5, r4, #29
   115ac:	mov	r9, #0
   115b0:	b	115d0 <__assert_fail@plt+0xa08>
   115b4:	ldr	r0, [sp]
   115b8:	add	r3, r7, r3, lsl #3
   115bc:	ldm	r3, {r1, r2}
   115c0:	ldr	ip, [sp, #4]
   115c4:	add	r1, r1, r0
   115c8:	add	r2, r2, ip
   115cc:	stm	r3, {r1, r2}
   115d0:	mov	r2, r6
   115d4:	mov	r1, #99	; 0x63
   115d8:	mov	r0, r4
   115dc:	bl	10a60 <fgets@plt>
   115e0:	cmp	r0, #0
   115e4:	add	r3, sp, #4
   115e8:	mov	r2, sp
   115ec:	mov	r1, r8
   115f0:	mov	r0, r4
   115f4:	beq	11648 <__assert_fail@plt+0xa80>
   115f8:	bl	10b50 <__isoc99_sscanf@plt>
   115fc:	cmp	r0, #2
   11600:	bne	11648 <__assert_fail@plt+0xa80>
   11604:	mov	r1, #0
   11608:	mov	r2, #10
   1160c:	mov	r0, r5
   11610:	bl	10a24 <strtol@plt>
   11614:	subs	r3, r0, #0
   11618:	movw	r1, #15472	; 0x3c70
   1161c:	movt	r1, #1
   11620:	mov	r0, r5
   11624:	bne	115b4 <__assert_fail@plt+0x9ec>
   11628:	bl	10a18 <strcmp@plt>
   1162c:	cmp	r0, #0
   11630:	ldr	r0, [sp]
   11634:	mov	r3, r7
   11638:	addne	r3, r7, #88	; 0x58
   1163c:	moveq	r9, r0
   11640:	b	115bc <__assert_fail@plt+0x9f4>
   11644:	mov	r9, #0
   11648:	mov	r0, r9
   1164c:	add	sp, sp, #12
   11650:	ldrd	r4, [sp]
   11654:	ldrd	r6, [sp, #8]
   11658:	ldrd	r8, [sp, #16]
   1165c:	add	sp, sp, #24
   11660:	pop	{pc}		; (ldr pc, [sp], #4)
   11664:	strd	r4, [sp, #-16]!
   11668:	subs	r4, r1, #0
   1166c:	mov	r5, r0
   11670:	str	r6, [sp, #8]
   11674:	str	lr, [sp, #12]
   11678:	beq	11714 <__assert_fail@plt+0xb4c>
   1167c:	movw	r1, #15488	; 0x3c80
   11680:	movt	r1, #1
   11684:	ldrd	r2, [r4]
   11688:	bl	10b44 <fprintf@plt>
   1168c:	ldr	r3, [r4]
   11690:	cmp	r3, #0
   11694:	beq	116f8 <__assert_fail@plt+0xb30>
   11698:	ldr	r2, [r4, #4]
   1169c:	movw	r1, #15512	; 0x3c98
   116a0:	movt	r1, #1
   116a4:	vmov	s15, r3
   116a8:	mov	r0, r5
   116ac:	vldr	d5, [pc, #124]	; 11730 <__assert_fail@plt+0xb68>
   116b0:	sub	r3, r3, r2
   116b4:	vmov	s14, r3
   116b8:	vcvt.f64.s32	d6, s15
   116bc:	vcvt.f64.s32	d7, s14
   116c0:	vmul.f64	d7, d7, d5
   116c4:	vdiv.f64	d7, d7, d6
   116c8:	vmov	r2, r3, d7
   116cc:	bl	10b44 <fprintf@plt>
   116d0:	mov	r3, r5
   116d4:	movw	r0, #15548	; 0x3cbc
   116d8:	movt	r0, #1
   116dc:	mov	r2, #3
   116e0:	ldrd	r4, [sp]
   116e4:	mov	r1, #1
   116e8:	ldr	r6, [sp, #8]
   116ec:	ldr	lr, [sp, #12]
   116f0:	add	sp, sp, #16
   116f4:	b	10ab4 <fwrite@plt>
   116f8:	movw	r0, #15500	; 0x3c8c
   116fc:	movt	r0, #1
   11700:	mov	r3, r5
   11704:	mov	r2, #8
   11708:	mov	r1, #1
   1170c:	bl	10ab4 <fwrite@plt>
   11710:	b	116d0 <__assert_fail@plt+0xb08>
   11714:	movw	r0, #15520	; 0x3ca0
   11718:	movt	r0, #1
   1171c:	mov	r3, r5
   11720:	mov	r2, #26
   11724:	mov	r1, #1
   11728:	bl	10ab4 <fwrite@plt>
   1172c:	b	116d0 <__assert_fail@plt+0xb08>
   11730:	andeq	r0, r0, r0
   11734:	subsmi	r0, r9, r0
   11738:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1173c:	movw	r5, #32996	; 0x80e4
   11740:	movt	r5, #2
   11744:	mov	r2, r0
   11748:	strd	r6, [sp, #8]
   1174c:	strd	r8, [sp, #16]
   11750:	mov	r8, r0
   11754:	mov	r9, r1
   11758:	mov	r0, r5
   1175c:	mov	r1, #99	; 0x63
   11760:	strd	sl, [sp, #24]
   11764:	str	lr, [sp, #32]
   11768:	sub	sp, sp, #20
   1176c:	bl	10a60 <fgets@plt>
   11770:	cmp	r0, #0
   11774:	beq	11818 <__assert_fail@plt+0xc50>
   11778:	mov	r2, r8
   1177c:	mov	r1, #99	; 0x63
   11780:	mov	r0, r5
   11784:	bl	10a60 <fgets@plt>
   11788:	cmp	r0, #0
   1178c:	beq	11818 <__assert_fail@plt+0xc50>
   11790:	movw	sl, #15480	; 0x3c78
   11794:	movt	sl, #1
   11798:	mov	r4, r5
   1179c:	add	fp, r5, #29
   117a0:	b	117f0 <__assert_fail@plt+0xc28>
   117a4:	bl	10b50 <__isoc99_sscanf@plt>
   117a8:	cmp	r0, #2
   117ac:	bne	11818 <__assert_fail@plt+0xc50>
   117b0:	mov	r0, r4
   117b4:	bl	10b38 <strlen@plt>
   117b8:	add	r3, r5, r0
   117bc:	mov	r2, #0
   117c0:	ldrd	r6, [sp, #8]
   117c4:	mov	r1, fp
   117c8:	mov	r0, r9
   117cc:	strb	r2, [r3, #-1]
   117d0:	bl	12088 <__assert_fail@plt+0x14c0>
   117d4:	subs	r3, r0, #0
   117d8:	beq	11834 <__assert_fail@plt+0xc6c>
   117dc:	ldr	r1, [r3, #12]
   117e0:	ldr	r2, [r3, #16]
   117e4:	add	r6, r1, r6
   117e8:	add	r7, r2, r7
   117ec:	strd	r6, [r3, #12]
   117f0:	mov	r2, r8
   117f4:	mov	r1, #99	; 0x63
   117f8:	mov	r0, r4
   117fc:	bl	10a60 <fgets@plt>
   11800:	cmp	r0, #0
   11804:	add	r3, sp, #12
   11808:	add	r2, sp, #8
   1180c:	mov	r1, sl
   11810:	mov	r0, r4
   11814:	bne	117a4 <__assert_fail@plt+0xbdc>
   11818:	add	sp, sp, #20
   1181c:	ldrd	r4, [sp]
   11820:	ldrd	r6, [sp, #8]
   11824:	ldrd	r8, [sp, #16]
   11828:	ldrd	sl, [sp, #24]
   1182c:	add	sp, sp, #32
   11830:	pop	{pc}		; (ldr pc, [sp], #4)
   11834:	mov	r1, #20
   11838:	mov	r0, #1
   1183c:	bl	12e94 <error@@Base+0x40>
   11840:	mov	r3, r0
   11844:	mov	r0, fp
   11848:	str	r3, [sp, #4]
   1184c:	bl	10a78 <strdup@plt>
   11850:	ldr	r3, [sp, #4]
   11854:	mov	r1, r3
   11858:	str	r0, [r3, #8]
   1185c:	mov	r0, r9
   11860:	bl	12114 <__assert_fail@plt+0x154c>
   11864:	ldr	r3, [sp, #4]
   11868:	b	117dc <__assert_fail@plt+0xc14>
   1186c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11870:	mov	r5, r0
   11874:	mov	r0, r1
   11878:	strd	r6, [sp, #8]
   1187c:	add	r7, r1, #4096	; 0x1000
   11880:	mov	r4, r2
   11884:	strd	r8, [sp, #16]
   11888:	str	sl, [sp, #24]
   1188c:	str	lr, [sp, #28]
   11890:	vpush	{d8}
   11894:	bl	1221c <__assert_fail@plt+0x1654>
   11898:	movw	r2, #5432	; 0x1538
   1189c:	movt	r2, #1
   118a0:	ldr	r1, [r7, #3952]	; 0xf70
   118a4:	ldr	r0, [r7, #3956]	; 0xf74
   118a8:	bl	11508 <__assert_fail@plt+0x940>
   118ac:	mov	r2, r4
   118b0:	mov	r0, r5
   118b4:	movw	r1, #15552	; 0x3cc0
   118b8:	movt	r1, #1
   118bc:	bl	10b44 <fprintf@plt>
   118c0:	mov	r3, r5
   118c4:	mov	r2, #26
   118c8:	mov	r1, #1
   118cc:	movw	r0, #15520	; 0x3ca0
   118d0:	movt	r0, #1
   118d4:	bl	10ab4 <fwrite@plt>
   118d8:	mov	r3, r5
   118dc:	mov	r2, #3
   118e0:	mov	r1, #1
   118e4:	movw	r0, #15548	; 0x3cbc
   118e8:	movt	r0, #1
   118ec:	bl	10ab4 <fwrite@plt>
   118f0:	mov	r1, r5
   118f4:	mov	r0, #10
   118f8:	bl	10b74 <fputc@plt>
   118fc:	ldr	r3, [r7, #3956]	; 0xf74
   11900:	cmp	r3, #0
   11904:	ble	119fc <__assert_fail@plt+0xe34>
   11908:	movw	r8, #15520	; 0x3ca0
   1190c:	movt	r8, #1
   11910:	vldr	d8, [pc, #256]	; 11a18 <__assert_fail@plt+0xe50>
   11914:	mov	r4, #0
   11918:	b	11994 <__assert_fail@plt+0xdcc>
   1191c:	ldr	r3, [r6, #16]
   11920:	movw	r1, #15512	; 0x3c98
   11924:	movt	r1, #1
   11928:	vmov	s15, ip
   1192c:	mov	r0, r5
   11930:	sub	r3, ip, r3
   11934:	vmov	s14, r3
   11938:	vcvt.f64.s32	d6, s15
   1193c:	vcvt.f64.s32	d7, s14
   11940:	vmul.f64	d7, d7, d8
   11944:	vdiv.f64	d7, d7, d6
   11948:	vmov	r2, r3, d7
   1194c:	bl	10b44 <fprintf@plt>
   11950:	mov	r1, #1
   11954:	mov	r3, r5
   11958:	mov	r2, #3
   1195c:	movw	r0, #15548	; 0x3cbc
   11960:	movt	r0, #1
   11964:	add	r4, r4, r1
   11968:	bl	10ab4 <fwrite@plt>
   1196c:	ldr	r3, [r7, #3952]	; 0xf70
   11970:	movw	r1, #29044	; 0x7174
   11974:	movt	r1, #1
   11978:	mov	r0, r5
   1197c:	ldr	r3, [r3, r9]
   11980:	ldr	r2, [r3, #8]
   11984:	bl	10b44 <fprintf@plt>
   11988:	ldr	r3, [r7, #3956]	; 0xf74
   1198c:	cmp	r3, r4
   11990:	ble	119fc <__assert_fail@plt+0xe34>
   11994:	ldr	r3, [r7, #3952]	; 0xf70
   11998:	movw	r1, #15488	; 0x3c80
   1199c:	movt	r1, #1
   119a0:	mov	r0, r5
   119a4:	lsl	r9, r4, #2
   119a8:	ldr	r6, [r3, r4, lsl #2]
   119ac:	cmn	r6, #12
   119b0:	beq	119e4 <__assert_fail@plt+0xe1c>
   119b4:	ldrd	r2, [r6, #12]
   119b8:	bl	10b44 <fprintf@plt>
   119bc:	ldr	ip, [r6, #12]
   119c0:	movw	r0, #15500	; 0x3c8c
   119c4:	movt	r0, #1
   119c8:	mov	r3, r5
   119cc:	mov	r2, #8
   119d0:	mov	r1, #1
   119d4:	cmp	ip, #0
   119d8:	bne	1191c <__assert_fail@plt+0xd54>
   119dc:	bl	10ab4 <fwrite@plt>
   119e0:	b	11950 <__assert_fail@plt+0xd88>
   119e4:	mov	r3, r5
   119e8:	mov	r2, #26
   119ec:	mov	r1, #1
   119f0:	mov	r0, r8
   119f4:	bl	10ab4 <fwrite@plt>
   119f8:	b	11950 <__assert_fail@plt+0xd88>
   119fc:	vpop	{d8}
   11a00:	ldrd	r4, [sp]
   11a04:	ldrd	r6, [sp, #8]
   11a08:	ldrd	r8, [sp, #16]
   11a0c:	ldr	sl, [sp, #24]
   11a10:	add	sp, sp, #28
   11a14:	pop	{pc}		; (ldr pc, [sp], #4)
   11a18:	andeq	r0, r0, r0
   11a1c:	subsmi	r0, r9, r0
   11a20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11a24:	mov	r5, r1
   11a28:	movw	r1, #15552	; 0x3cc0
   11a2c:	movt	r1, #1
   11a30:	strd	r6, [sp, #8]
   11a34:	mov	r6, r0
   11a38:	strd	r8, [sp, #16]
   11a3c:	mov	r9, r2
   11a40:	mov	r2, r3
   11a44:	strd	sl, [sp, #24]
   11a48:	sub	fp, r9, #1
   11a4c:	movw	r7, #15576	; 0x3cd8
   11a50:	movt	r7, #1
   11a54:	str	lr, [sp, #32]
   11a58:	sub	sp, sp, #4
   11a5c:	ldrb	r8, [sp, #40]	; 0x28
   11a60:	uxth	fp, fp
   11a64:	mov	r4, #1
   11a68:	add	fp, fp, #2
   11a6c:	ldrb	sl, [sp, #44]	; 0x2c
   11a70:	bl	10b44 <fprintf@plt>
   11a74:	mov	r3, r6
   11a78:	mov	r2, #26
   11a7c:	mov	r1, #1
   11a80:	movw	r0, #15520	; 0x3ca0
   11a84:	movt	r0, #1
   11a88:	bl	10ab4 <fwrite@plt>
   11a8c:	mov	r3, r6
   11a90:	mov	r2, #3
   11a94:	mov	r1, #1
   11a98:	movw	r0, #15548	; 0x3cbc
   11a9c:	movt	r0, #1
   11aa0:	bl	10ab4 <fwrite@plt>
   11aa4:	cmp	r8, #0
   11aa8:	movw	r3, #15568	; 0x3cd0
   11aac:	movt	r3, #1
   11ab0:	movw	r2, #15560	; 0x3cc8
   11ab4:	movt	r2, #1
   11ab8:	mov	r0, r6
   11abc:	moveq	r2, r3
   11ac0:	movw	r1, #29044	; 0x7174
   11ac4:	movt	r1, #1
   11ac8:	bl	10b44 <fprintf@plt>
   11acc:	ldr	r3, [r5, r4, lsl #3]
   11ad0:	mov	r0, r6
   11ad4:	add	r1, r5, r4, lsl #3
   11ad8:	cmp	r3, #0
   11adc:	ble	11af4 <__assert_fail@plt+0xf2c>
   11ae0:	bl	11664 <__assert_fail@plt+0xa9c>
   11ae4:	mov	r2, r4
   11ae8:	mov	r1, r7
   11aec:	mov	r0, r6
   11af0:	bl	10b44 <fprintf@plt>
   11af4:	add	r4, r4, #1
   11af8:	cmp	fp, r4
   11afc:	bne	11acc <__assert_fail@plt+0xf04>
   11b00:	cmp	r8, #0
   11b04:	beq	11b1c <__assert_fail@plt+0xf54>
   11b08:	add	r1, r9, #1
   11b0c:	ldr	r3, [r5, r1, lsl #3]
   11b10:	add	r1, r5, r1, lsl #3
   11b14:	cmp	r3, #0
   11b18:	bgt	11b40 <__assert_fail@plt+0xf78>
   11b1c:	cmp	sl, #0
   11b20:	bne	11b64 <__assert_fail@plt+0xf9c>
   11b24:	add	sp, sp, #4
   11b28:	ldrd	r4, [sp]
   11b2c:	ldrd	r6, [sp, #8]
   11b30:	ldrd	r8, [sp, #16]
   11b34:	ldrd	sl, [sp, #24]
   11b38:	add	sp, sp, #32
   11b3c:	pop	{pc}		; (ldr pc, [sp], #4)
   11b40:	mov	r0, r6
   11b44:	bl	11664 <__assert_fail@plt+0xa9c>
   11b48:	mov	r2, r9
   11b4c:	movw	r1, #15588	; 0x3ce4
   11b50:	movt	r1, #1
   11b54:	mov	r0, r6
   11b58:	bl	10b44 <fprintf@plt>
   11b5c:	cmp	sl, #0
   11b60:	beq	11b24 <__assert_fail@plt+0xf5c>
   11b64:	mov	r1, r5
   11b68:	mov	r0, r6
   11b6c:	bl	11664 <__assert_fail@plt+0xa9c>
   11b70:	mov	r3, r6
   11b74:	movw	r0, #15472	; 0x3c70
   11b78:	movt	r0, #1
   11b7c:	mov	r2, #7
   11b80:	mov	r1, #1
   11b84:	add	sp, sp, #4
   11b88:	ldrd	r4, [sp]
   11b8c:	ldrd	r6, [sp, #8]
   11b90:	ldrd	r8, [sp, #16]
   11b94:	ldrd	sl, [sp, #24]
   11b98:	ldr	lr, [sp, #32]
   11b9c:	add	sp, sp, #36	; 0x24
   11ba0:	b	10ab4 <fwrite@plt>
   11ba4:	ldr	ip, [r0]
   11ba8:	ldr	r3, [r0, #4]
   11bac:	add	r1, ip, r1
   11bb0:	add	r2, r3, r2
   11bb4:	stm	r0, {r1, r2}
   11bb8:	bx	lr
   11bbc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11bc0:	mov	r5, r3
   11bc4:	strd	r6, [sp, #8]
   11bc8:	mov	r6, r2
   11bcc:	mov	r7, r0
   11bd0:	str	r8, [sp, #16]
   11bd4:	mov	r8, r1
   11bd8:	str	lr, [sp, #20]
   11bdc:	bl	12088 <__assert_fail@plt+0x14c0>
   11be0:	subs	r4, r0, #0
   11be4:	beq	11c0c <__assert_fail@plt+0x1044>
   11be8:	ldrd	r0, [r4, #12]
   11bec:	ldr	r8, [sp, #16]
   11bf0:	add	r0, r0, r6
   11bf4:	add	r1, r1, r5
   11bf8:	ldrd	r6, [sp, #8]
   11bfc:	strd	r0, [r4, #12]
   11c00:	ldrd	r4, [sp]
   11c04:	add	sp, sp, #20
   11c08:	pop	{pc}		; (ldr pc, [sp], #4)
   11c0c:	mov	r1, #20
   11c10:	mov	r0, #1
   11c14:	bl	12e94 <error@@Base+0x40>
   11c18:	mov	r4, r0
   11c1c:	mov	r0, r8
   11c20:	bl	10a78 <strdup@plt>
   11c24:	mov	r1, r4
   11c28:	str	r0, [r4, #8]
   11c2c:	mov	r0, r7
   11c30:	bl	12114 <__assert_fail@plt+0x154c>
   11c34:	b	11be8 <__assert_fail@plt+0x1020>
   11c38:	strd	r4, [sp, #-20]!	; 0xffffffec
   11c3c:	mov	r5, r0
   11c40:	strd	r6, [sp, #8]
   11c44:	mov	r6, r1
   11c48:	movw	r1, #15608	; 0x3cf8
   11c4c:	movt	r1, #1
   11c50:	mov	r0, r6
   11c54:	str	lr, [sp, #16]
   11c58:	sub	sp, sp, #12
   11c5c:	bl	12f34 <error@@Base+0xe0>
   11c60:	mov	r2, r0
   11c64:	mov	r4, r0
   11c68:	mov	r1, #99	; 0x63
   11c6c:	movw	r0, #32996	; 0x80e4
   11c70:	movt	r0, #2
   11c74:	bl	10a60 <fgets@plt>
   11c78:	cmp	r0, #0
   11c7c:	beq	11d14 <__assert_fail@plt+0x114c>
   11c80:	movw	r1, #15612	; 0x3cfc
   11c84:	movt	r1, #1
   11c88:	movw	r0, #32996	; 0x80e4
   11c8c:	movt	r0, #2
   11c90:	mov	r2, #45	; 0x2d
   11c94:	bl	10ba4 <strncmp@plt>
   11c98:	cmp	r0, #0
   11c9c:	bne	11d14 <__assert_fail@plt+0x114c>
   11ca0:	movw	r0, #32996	; 0x80e4
   11ca4:	movt	r0, #2
   11ca8:	mov	r2, r4
   11cac:	mov	r1, #99	; 0x63
   11cb0:	bl	10a60 <fgets@plt>
   11cb4:	cmp	r0, #0
   11cb8:	beq	11d14 <__assert_fail@plt+0x114c>
   11cbc:	movw	r1, #29288	; 0x7268
   11cc0:	movt	r1, #1
   11cc4:	movw	r0, #32996	; 0x80e4
   11cc8:	movt	r0, #2
   11ccc:	bl	10a18 <strcmp@plt>
   11cd0:	cmp	r0, #0
   11cd4:	bne	11d14 <__assert_fail@plt+0x114c>
   11cd8:	movw	r0, #32996	; 0x80e4
   11cdc:	movt	r0, #2
   11ce0:	mov	r2, r4
   11ce4:	mov	r1, #99	; 0x63
   11ce8:	bl	10a60 <fgets@plt>
   11cec:	cmp	r0, #0
   11cf0:	beq	11d14 <__assert_fail@plt+0x114c>
   11cf4:	movw	r1, #15484	; 0x3c7c
   11cf8:	movt	r1, #1
   11cfc:	movw	r0, #32996	; 0x80e4
   11d00:	movt	r0, #2
   11d04:	mov	r2, sp
   11d08:	bl	10b50 <__isoc99_sscanf@plt>
   11d0c:	cmp	r0, #1
   11d10:	beq	11d30 <__assert_fail@plt+0x1168>
   11d14:	cmp	r6, #0
   11d18:	movw	r1, #15600	; 0x3cf0
   11d1c:	movt	r1, #1
   11d20:	movw	r0, #15660	; 0x3d2c
   11d24:	movt	r0, #1
   11d28:	movne	r1, r6
   11d2c:	bl	12ef0 <error@@Base+0x9c>
   11d30:	movw	r0, #32996	; 0x80e4
   11d34:	movt	r0, #2
   11d38:	mov	r2, r4
   11d3c:	mov	r1, #99	; 0x63
   11d40:	bl	10a60 <fgets@plt>
   11d44:	cmp	r0, #0
   11d48:	beq	11d14 <__assert_fail@plt+0x114c>
   11d4c:	movw	r1, #15484	; 0x3c7c
   11d50:	movt	r1, #1
   11d54:	movw	r0, #32996	; 0x80e4
   11d58:	movt	r0, #2
   11d5c:	add	r2, sp, #4
   11d60:	bl	10b50 <__isoc99_sscanf@plt>
   11d64:	cmp	r0, #1
   11d68:	bne	11d14 <__assert_fail@plt+0x114c>
   11d6c:	movw	r0, #32996	; 0x80e4
   11d70:	movt	r0, #2
   11d74:	mov	r2, r4
   11d78:	mov	r1, #99	; 0x63
   11d7c:	bl	10a60 <fgets@plt>
   11d80:	cmp	r0, #0
   11d84:	beq	11d14 <__assert_fail@plt+0x114c>
   11d88:	movw	r0, #32996	; 0x80e4
   11d8c:	movt	r0, #2
   11d90:	mov	r2, r4
   11d94:	mov	r1, #99	; 0x63
   11d98:	bl	10a60 <fgets@plt>
   11d9c:	cmp	r0, #0
   11da0:	beq	11d14 <__assert_fail@plt+0x114c>
   11da4:	ldm	sp, {ip, lr}
   11da8:	add	r1, r5, #8
   11dac:	mov	r0, r4
   11db0:	ldr	r3, [r5]
   11db4:	ldr	r2, [r5, #4]
   11db8:	add	r3, r3, ip
   11dbc:	add	r2, r2, lr
   11dc0:	str	r3, [r5]
   11dc4:	str	r2, [r5, #4]
   11dc8:	bl	11544 <__assert_fail@plt+0x97c>
   11dcc:	mov	r7, r0
   11dd0:	add	r1, r5, #416	; 0x1a0
   11dd4:	mov	r0, r4
   11dd8:	bl	11544 <__assert_fail@plt+0x97c>
   11ddc:	mov	r6, r0
   11de0:	add	r1, r5, #824	; 0x338
   11de4:	mov	r0, r4
   11de8:	bl	11544 <__assert_fail@plt+0x97c>
   11dec:	ldr	r3, [sp]
   11df0:	cmp	r3, #0
   11df4:	bgt	11e14 <__assert_fail@plt+0x124c>
   11df8:	mov	r0, r4
   11dfc:	bl	12cb4 <__assert_fail@plt+0x20ec>
   11e00:	add	sp, sp, #12
   11e04:	ldrd	r4, [sp]
   11e08:	ldrd	r6, [sp, #8]
   11e0c:	add	sp, sp, #16
   11e10:	pop	{pc}		; (ldr pc, [sp], #4)
   11e14:	add	r1, r5, #920	; 0x398
   11e18:	mov	r0, r4
   11e1c:	bl	11544 <__assert_fail@plt+0x97c>
   11e20:	cmp	r7, #0
   11e24:	ble	11e34 <__assert_fail@plt+0x126c>
   11e28:	add	r1, r5, #992	; 0x3e0
   11e2c:	mov	r0, r4
   11e30:	bl	11738 <__assert_fail@plt+0xb70>
   11e34:	cmp	r6, #0
   11e38:	ble	11df8 <__assert_fail@plt+0x1230>
   11e3c:	add	r1, r5, #9024	; 0x2340
   11e40:	mov	r0, r4
   11e44:	add	r1, r1, #24
   11e48:	bl	11738 <__assert_fail@plt+0xb70>
   11e4c:	b	11df8 <__assert_fail@plt+0x1230>
   11e50:	mov	r3, r1
   11e54:	movw	r1, #15680	; 0x3d40
   11e58:	movt	r1, #1
   11e5c:	strd	r4, [sp, #-20]!	; 0xffffffec
   11e60:	mov	r4, r0
   11e64:	mov	r0, r3
   11e68:	strd	r6, [sp, #8]
   11e6c:	str	lr, [sp, #16]
   11e70:	sub	sp, sp, #12
   11e74:	bl	12f34 <error@@Base+0xe0>
   11e78:	mov	r5, r0
   11e7c:	movw	r3, #29288	; 0x7268
   11e80:	movt	r3, #1
   11e84:	movw	r2, #15612	; 0x3cfc
   11e88:	movt	r2, #1
   11e8c:	movw	r1, #15684	; 0x3d44
   11e90:	movt	r1, #1
   11e94:	bl	10b44 <fprintf@plt>
   11e98:	mov	r0, r5
   11e9c:	movw	r1, #15692	; 0x3d4c
   11ea0:	movt	r1, #1
   11ea4:	ldr	r2, [r4]
   11ea8:	bl	10b44 <fprintf@plt>
   11eac:	mov	r0, r5
   11eb0:	movw	r1, #15708	; 0x3d5c
   11eb4:	movt	r1, #1
   11eb8:	ldr	r2, [r4, #4]
   11ebc:	bl	10b44 <fprintf@plt>
   11ec0:	ldr	r3, [r4]
   11ec4:	cmp	r3, #0
   11ec8:	bne	11f8c <__assert_fail@plt+0x13c4>
   11ecc:	movw	r0, #15500	; 0x3c8c
   11ed0:	movt	r0, #1
   11ed4:	mov	r3, r5
   11ed8:	mov	r2, #8
   11edc:	mov	r1, #1
   11ee0:	bl	10ab4 <fwrite@plt>
   11ee4:	mov	r6, #1
   11ee8:	mov	r7, #0
   11eec:	mov	r3, r5
   11ef0:	mov	r2, #12
   11ef4:	mov	r1, r6
   11ef8:	movw	r0, #15732	; 0x3d74
   11efc:	movt	r0, #1
   11f00:	bl	10ab4 <fwrite@plt>
   11f04:	mov	r2, #50	; 0x32
   11f08:	add	r1, r4, #8
   11f0c:	str	r7, [sp]
   11f10:	mov	r0, r5
   11f14:	movw	r3, #15748	; 0x3d84
   11f18:	movt	r3, #1
   11f1c:	str	r6, [sp, #4]
   11f20:	bl	11a20 <__assert_fail@plt+0xe58>
   11f24:	mov	r2, #50	; 0x32
   11f28:	add	r1, r4, #416	; 0x1a0
   11f2c:	str	r7, [sp]
   11f30:	mov	r0, r5
   11f34:	movw	r3, #15760	; 0x3d90
   11f38:	movt	r3, #1
   11f3c:	str	r6, [sp, #4]
   11f40:	bl	11a20 <__assert_fail@plt+0xe58>
   11f44:	movw	r3, #15776	; 0x3da0
   11f48:	movt	r3, #1
   11f4c:	str	r6, [sp]
   11f50:	mov	r2, #10
   11f54:	add	r1, r4, #824	; 0x338
   11f58:	str	r6, [sp, #4]
   11f5c:	mov	r0, r5
   11f60:	bl	11a20 <__assert_fail@plt+0xe58>
   11f64:	ldr	r3, [r4]
   11f68:	cmp	r3, r7
   11f6c:	bgt	11fc8 <__assert_fail@plt+0x1400>
   11f70:	mov	r0, r5
   11f74:	add	sp, sp, #12
   11f78:	ldrd	r4, [sp]
   11f7c:	ldrd	r6, [sp, #8]
   11f80:	ldr	lr, [sp, #16]
   11f84:	add	sp, sp, #20
   11f88:	b	12cb4 <__assert_fail@plt+0x20ec>
   11f8c:	ldr	r2, [r4, #4]
   11f90:	movw	r1, #15512	; 0x3c98
   11f94:	movt	r1, #1
   11f98:	vmov	s15, r3
   11f9c:	mov	r0, r5
   11fa0:	vldr	d5, [pc, #136]	; 12030 <__assert_fail@plt+0x1468>
   11fa4:	sub	r3, r3, r2
   11fa8:	vmov	s14, r3
   11fac:	vcvt.f64.s32	d6, s15
   11fb0:	vcvt.f64.s32	d7, s14
   11fb4:	vmul.f64	d7, d7, d5
   11fb8:	vdiv.f64	d7, d7, d6
   11fbc:	vmov	r2, r3, d7
   11fc0:	bl	10b44 <fprintf@plt>
   11fc4:	b	11ee4 <__assert_fail@plt+0x131c>
   11fc8:	movw	r3, #15800	; 0x3db8
   11fcc:	movt	r3, #1
   11fd0:	str	r7, [sp]
   11fd4:	mov	r2, #8
   11fd8:	add	r1, r4, #920	; 0x398
   11fdc:	str	r7, [sp, #4]
   11fe0:	mov	r0, r5
   11fe4:	bl	11a20 <__assert_fail@plt+0xe58>
   11fe8:	ldr	r3, [r4, #8]
   11fec:	cmp	r3, r7
   11ff0:	ble	12008 <__assert_fail@plt+0x1440>
   11ff4:	movw	r2, #15748	; 0x3d84
   11ff8:	movt	r2, #1
   11ffc:	add	r1, r4, #992	; 0x3e0
   12000:	mov	r0, r5
   12004:	bl	1186c <__assert_fail@plt+0xca4>
   12008:	ldr	r3, [r4, #416]	; 0x1a0
   1200c:	cmp	r3, #0
   12010:	ble	11f70 <__assert_fail@plt+0x13a8>
   12014:	add	r1, r4, #9024	; 0x2340
   12018:	movw	r2, #15760	; 0x3d90
   1201c:	movt	r2, #1
   12020:	add	r1, r1, #24
   12024:	mov	r0, r5
   12028:	bl	1186c <__assert_fail@plt+0xca4>
   1202c:	b	11f70 <__assert_fail@plt+0x13a8>
   12030:	andeq	r0, r0, r0
   12034:	subsmi	r0, r9, r0
   12038:	strd	r4, [sp, #-16]!
   1203c:	add	r5, r0, #8000	; 0x1f40
   12040:	mov	r4, r0
   12044:	add	r5, r5, #48	; 0x30
   12048:	str	r6, [sp, #8]
   1204c:	mov	r6, r0
   12050:	str	lr, [sp, #12]
   12054:	mov	r0, r4
   12058:	add	r4, r4, #16
   1205c:	bl	1109c <__assert_fail@plt+0x4d4>
   12060:	cmp	r5, r4
   12064:	bne	12054 <__assert_fail@plt+0x148c>
   12068:	add	r6, r6, #4096	; 0x1000
   1206c:	mov	r3, #0
   12070:	ldrd	r4, [sp]
   12074:	str	r3, [r6, #3952]	; 0xf70
   12078:	str	r3, [r6, #3956]	; 0xf74
   1207c:	ldr	r6, [sp, #8]
   12080:	add	sp, sp, #12
   12084:	pop	{pc}		; (ldr pc, [sp], #4)
   12088:	strd	r4, [sp, #-16]!
   1208c:	mov	r5, r1
   12090:	str	r6, [sp, #8]
   12094:	str	lr, [sp, #12]
   12098:	ldrb	r3, [r1]
   1209c:	cmp	r3, #0
   120a0:	beq	120d0 <__assert_fail@plt+0x1508>
   120a4:	mov	r2, #0
   120a8:	add	r2, r2, r3
   120ac:	ldrb	r3, [r1, #1]!
   120b0:	cmp	r3, #0
   120b4:	bne	120a8 <__assert_fail@plt+0x14e0>
   120b8:	movw	r3, #20065	; 0x4e61
   120bc:	movt	r3, #33354	; 0x824a
   120c0:	movw	r1, #503	; 0x1f7
   120c4:	umull	ip, r3, r3, r2
   120c8:	lsr	r3, r3, #8
   120cc:	mls	r3, r1, r3, r2
   120d0:	ldr	r4, [r0, r3, lsl #4]
   120d4:	cmp	r4, #0
   120d8:	bne	120ec <__assert_fail@plt+0x1524>
   120dc:	b	12100 <__assert_fail@plt+0x1538>
   120e0:	ldr	r4, [r4, #4]
   120e4:	cmp	r4, #0
   120e8:	beq	12100 <__assert_fail@plt+0x1538>
   120ec:	mov	r0, r5
   120f0:	ldr	r1, [r4, #8]
   120f4:	bl	10a18 <strcmp@plt>
   120f8:	cmp	r0, #0
   120fc:	bne	120e0 <__assert_fail@plt+0x1518>
   12100:	mov	r0, r4
   12104:	ldrd	r4, [sp]
   12108:	ldr	r6, [sp, #8]
   1210c:	add	sp, sp, #12
   12110:	pop	{pc}		; (ldr pc, [sp], #4)
   12114:	ldr	r2, [r1, #8]
   12118:	str	r4, [sp, #-8]!
   1211c:	mov	r4, r0
   12120:	str	lr, [sp, #4]
   12124:	ldrb	r3, [r2]
   12128:	cmp	r3, #0
   1212c:	beq	12160 <__assert_fail@plt+0x1598>
   12130:	mov	r0, #0
   12134:	add	r0, r0, r3
   12138:	ldrb	r3, [r2, #1]!
   1213c:	cmp	r3, #0
   12140:	bne	12134 <__assert_fail@plt+0x156c>
   12144:	movw	r3, #20065	; 0x4e61
   12148:	movt	r3, #33354	; 0x824a
   1214c:	movw	r2, #503	; 0x1f7
   12150:	umull	ip, r3, r3, r0
   12154:	lsr	r3, r3, #8
   12158:	mls	r0, r2, r3, r0
   1215c:	add	r0, r4, r0, lsl #4
   12160:	add	r4, r4, #4096	; 0x1000
   12164:	bl	110b4 <__assert_fail@plt+0x4ec>
   12168:	ldr	r0, [r4, #3952]	; 0xf70
   1216c:	cmp	r0, #0
   12170:	beq	12180 <__assert_fail@plt+0x15b8>
   12174:	bl	10a48 <free@plt>
   12178:	mov	r3, #0
   1217c:	str	r3, [r4, #3952]	; 0xf70
   12180:	ldr	r3, [r4, #3956]	; 0xf74
   12184:	add	r3, r3, #1
   12188:	str	r3, [r4, #3956]	; 0xf74
   1218c:	ldr	r4, [sp]
   12190:	add	sp, sp, #4
   12194:	pop	{pc}		; (ldr pc, [sp], #4)
   12198:	ldr	r2, [r1, #8]
   1219c:	str	r4, [sp, #-8]!
   121a0:	mov	r4, r0
   121a4:	str	lr, [sp, #4]
   121a8:	ldrb	r3, [r2]
   121ac:	cmp	r3, #0
   121b0:	beq	121e4 <__assert_fail@plt+0x161c>
   121b4:	mov	r0, #0
   121b8:	add	r0, r0, r3
   121bc:	ldrb	r3, [r2, #1]!
   121c0:	cmp	r3, #0
   121c4:	bne	121b8 <__assert_fail@plt+0x15f0>
   121c8:	movw	r3, #20065	; 0x4e61
   121cc:	movt	r3, #33354	; 0x824a
   121d0:	movw	r2, #503	; 0x1f7
   121d4:	umull	ip, r3, r3, r0
   121d8:	lsr	r3, r3, #8
   121dc:	mls	r0, r2, r3, r0
   121e0:	add	r0, r4, r0, lsl #4
   121e4:	add	r4, r4, #4096	; 0x1000
   121e8:	bl	11214 <__assert_fail@plt+0x64c>
   121ec:	ldr	r0, [r4, #3952]	; 0xf70
   121f0:	cmp	r0, #0
   121f4:	beq	12204 <__assert_fail@plt+0x163c>
   121f8:	bl	10a48 <free@plt>
   121fc:	mov	r3, #0
   12200:	str	r3, [r4, #3952]	; 0xf70
   12204:	ldr	r3, [r4, #3956]	; 0xf74
   12208:	sub	r3, r3, #1
   1220c:	str	r3, [r4, #3956]	; 0xf74
   12210:	ldr	r4, [sp]
   12214:	add	sp, sp, #4
   12218:	pop	{pc}		; (ldr pc, [sp], #4)
   1221c:	strd	r4, [sp, #-16]!
   12220:	str	r6, [sp, #8]
   12224:	add	r6, r0, #4096	; 0x1000
   12228:	ldr	r4, [r6, #3952]	; 0xf70
   1222c:	str	lr, [sp, #12]
   12230:	cmp	r4, #0
   12234:	beq	12248 <__assert_fail@plt+0x1680>
   12238:	ldrd	r4, [sp]
   1223c:	ldr	r6, [sp, #8]
   12240:	add	sp, sp, #12
   12244:	pop	{pc}		; (ldr pc, [sp], #4)
   12248:	ldr	r3, [r6, #3956]	; 0xf74
   1224c:	cmp	r3, #0
   12250:	beq	12238 <__assert_fail@plt+0x1670>
   12254:	mov	r5, r0
   12258:	mov	r1, #4
   1225c:	mov	r0, r3
   12260:	bl	12e94 <error@@Base+0x40>
   12264:	mov	r2, r4
   12268:	mov	ip, r4
   1226c:	str	r0, [r6, #3952]	; 0xf70
   12270:	movw	lr, #503	; 0x1f7
   12274:	ldr	r3, [r5, ip, lsl #4]
   12278:	cmp	r3, #0
   1227c:	beq	12298 <__assert_fail@plt+0x16d0>
   12280:	add	r1, r0, r2, lsl #2
   12284:	str	r3, [r1], #4
   12288:	add	r2, r2, #1
   1228c:	ldr	r3, [r3, #4]
   12290:	cmp	r3, #0
   12294:	bne	12284 <__assert_fail@plt+0x16bc>
   12298:	add	ip, ip, #1
   1229c:	cmp	ip, lr
   122a0:	bne	12274 <__assert_fail@plt+0x16ac>
   122a4:	ldrd	r4, [sp]
   122a8:	ldr	r6, [sp, #8]
   122ac:	add	sp, sp, #12
   122b0:	pop	{pc}		; (ldr pc, [sp], #4)
   122b4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   122b8:	add	r5, r0, #8000	; 0x1f40
   122bc:	mov	r4, r0
   122c0:	add	r5, r5, #48	; 0x30
   122c4:	strd	r6, [sp, #8]
   122c8:	mov	r7, r0
   122cc:	mov	r6, r1
   122d0:	str	r8, [sp, #16]
   122d4:	str	lr, [sp, #20]
   122d8:	mov	r0, r4
   122dc:	mov	r1, r6
   122e0:	add	r4, r4, #16
   122e4:	bl	112e0 <__assert_fail@plt+0x718>
   122e8:	cmp	r5, r4
   122ec:	bne	122d8 <__assert_fail@plt+0x1710>
   122f0:	add	r7, r7, #4096	; 0x1000
   122f4:	ldr	r0, [r7, #3952]	; 0xf70
   122f8:	cmp	r0, #0
   122fc:	beq	1230c <__assert_fail@plt+0x1744>
   12300:	bl	10a48 <free@plt>
   12304:	mov	r3, #0
   12308:	str	r3, [r7, #3952]	; 0xf70
   1230c:	mov	r3, #0
   12310:	ldrd	r4, [sp]
   12314:	ldr	r8, [sp, #16]
   12318:	str	r3, [r7, #3956]	; 0xf74
   1231c:	ldrd	r6, [sp, #8]
   12320:	add	sp, sp, #20
   12324:	pop	{pc}		; (ldr pc, [sp], #4)
   12328:	str	r4, [sp, #-8]!
   1232c:	movw	r4, #15848	; 0x3de8
   12330:	movt	r4, #1
   12334:	str	lr, [sp, #4]
   12338:	ldr	r0, [r0, #4]
   1233c:	cmp	r0, #0
   12340:	beq	123f0 <__assert_fail@plt+0x1828>
   12344:	movw	ip, #1092	; 0x444
   12348:	movw	r2, #8294	; 0x2066
   1234c:	ldr	lr, [r0, #12]
   12350:	mov	r3, ip
   12354:	mov	r1, #0
   12358:	b	12364 <__assert_fail@plt+0x179c>
   1235c:	add	r2, r2, r2, lsl #1
   12360:	ldr	r2, [r4, r2, lsl #2]
   12364:	add	r3, r1, r3, lsr #1
   12368:	cmp	lr, r2
   1236c:	subcc	ip, r3, #1
   12370:	bcc	1238c <__assert_fail@plt+0x17c4>
   12374:	add	r2, r3, r3, lsl #1
   12378:	add	r1, r3, #1
   1237c:	add	r3, r4, r2, lsl #2
   12380:	ldr	r2, [r3, #4]
   12384:	cmp	lr, r2
   12388:	bls	123fc <__assert_fail@plt+0x1834>
   1238c:	sub	r3, ip, r1
   12390:	cmp	ip, r1
   12394:	add	r2, r1, r3, lsr #1
   12398:	bcs	1235c <__assert_fail@plt+0x1794>
   1239c:	movw	r2, #8294	; 0x2066
   123a0:	mov	r1, #0
   123a4:	movw	ip, #1092	; 0x444
   123a8:	movw	r3, #1092	; 0x444
   123ac:	b	123b8 <__assert_fail@plt+0x17f0>
   123b0:	add	r2, r2, r2, lsl #1
   123b4:	ldr	r2, [r4, r2, lsl #2]
   123b8:	add	r3, r1, r3, lsr #1
   123bc:	cmp	lr, r2
   123c0:	subcc	ip, r3, #1
   123c4:	bcc	123e0 <__assert_fail@plt+0x1818>
   123c8:	add	r2, r3, r3, lsl #1
   123cc:	add	r1, r3, #1
   123d0:	add	r3, r4, r2, lsl #2
   123d4:	ldr	r2, [r3, #4]
   123d8:	cmp	lr, r2
   123dc:	bls	1240c <__assert_fail@plt+0x1844>
   123e0:	sub	r3, ip, r1
   123e4:	cmp	ip, r1
   123e8:	add	r2, r1, r3, lsr #1
   123ec:	bcs	123b0 <__assert_fail@plt+0x17e8>
   123f0:	ldr	r4, [sp]
   123f4:	add	sp, sp, #4
   123f8:	pop	{pc}		; (ldr pc, [sp], #4)
   123fc:	ldr	r3, [r3, #8]
   12400:	cmp	r3, #4
   12404:	beq	12338 <__assert_fail@plt+0x1770>
   12408:	b	1239c <__assert_fail@plt+0x17d4>
   1240c:	ldr	r3, [r3, #8]
   12410:	cmp	r3, #6
   12414:	beq	12338 <__assert_fail@plt+0x1770>
   12418:	b	123f0 <__assert_fail@plt+0x1828>
   1241c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12420:	strd	r6, [sp, #8]
   12424:	strd	r8, [sp, #16]
   12428:	ldr	r9, [r1]
   1242c:	strd	sl, [sp, #24]
   12430:	str	lr, [sp, #32]
   12434:	sub	sp, sp, #28
   12438:	cmp	r9, #0
   1243c:	str	r9, [sp, #12]
   12440:	beq	12734 <__assert_fail@plt+0x1b6c>
   12444:	movw	r7, #15848	; 0x3de8
   12448:	movt	r7, #1
   1244c:	str	r0, [sp, #4]
   12450:	mov	r8, #17
   12454:	add	r6, sp, #8
   12458:	mov	r0, r6
   1245c:	bl	12328 <__assert_fail@plt+0x1760>
   12460:	subs	r6, r0, #0
   12464:	beq	12840 <__assert_fail@plt+0x1c78>
   12468:	movw	r1, #1092	; 0x444
   1246c:	movw	r0, #8294	; 0x2066
   12470:	ldr	ip, [r6, #12]
   12474:	mov	r3, r1
   12478:	mov	r2, #0
   1247c:	b	12490 <__assert_fail@plt+0x18c8>
   12480:	sub	r3, r1, r2
   12484:	add	r0, r2, r3, lsr #1
   12488:	add	r0, r0, r0, lsl #1
   1248c:	ldr	r0, [r7, r0, lsl #2]
   12490:	add	r3, r2, r3, lsr #1
   12494:	cmp	ip, r0
   12498:	subcc	r1, r3, #1
   1249c:	bcc	124b8 <__assert_fail@plt+0x18f0>
   124a0:	add	r2, r3, r3, lsl #1
   124a4:	add	r2, r7, r2, lsl #2
   124a8:	ldr	r0, [r2, #4]
   124ac:	cmp	ip, r0
   124b0:	bls	12918 <__assert_fail@plt+0x1d50>
   124b4:	add	r2, r3, #1
   124b8:	cmp	r1, r2
   124bc:	bcs	12480 <__assert_fail@plt+0x18b8>
   124c0:	mov	r0, r6
   124c4:	bl	12328 <__assert_fail@plt+0x1760>
   124c8:	cmp	r0, #0
   124cc:	beq	12aa8 <__assert_fail@plt+0x1ee0>
   124d0:	mov	r5, #0
   124d4:	mov	sl, r5
   124d8:	movw	r1, #1092	; 0x444
   124dc:	movw	lr, #8294	; 0x2066
   124e0:	ldr	ip, [r0, #12]
   124e4:	mov	r3, r1
   124e8:	mov	r2, #0
   124ec:	b	12500 <__assert_fail@plt+0x1938>
   124f0:	sub	r3, r1, r2
   124f4:	add	lr, r2, r3, lsr #1
   124f8:	add	lr, lr, lr, lsl #1
   124fc:	ldr	lr, [r7, lr, lsl #2]
   12500:	add	r3, r2, r3, lsr #1
   12504:	cmp	ip, lr
   12508:	subcc	r1, r3, #1
   1250c:	bcc	12528 <__assert_fail@plt+0x1960>
   12510:	add	r2, r3, r3, lsl #1
   12514:	add	r2, r7, r2, lsl #2
   12518:	ldr	lr, [r2, #4]
   1251c:	cmp	ip, lr
   12520:	bls	129ec <__assert_fail@plt+0x1e24>
   12524:	add	r2, r3, #1
   12528:	cmp	r1, r2
   1252c:	bcs	124f0 <__assert_fail@plt+0x1928>
   12530:	bl	12328 <__assert_fail@plt+0x1760>
   12534:	cmp	r0, #0
   12538:	beq	12af0 <__assert_fail@plt+0x1f28>
   1253c:	mov	r4, #0
   12540:	mov	r1, r4
   12544:	mov	lr, r4
   12548:	movw	ip, #1092	; 0x444
   1254c:	movw	fp, #8294	; 0x2066
   12550:	ldr	r0, [r0, #12]
   12554:	mov	r3, ip
   12558:	mov	r2, #0
   1255c:	b	12570 <__assert_fail@plt+0x19a8>
   12560:	sub	r3, ip, r2
   12564:	add	fp, r2, r3, lsr #1
   12568:	add	fp, fp, fp, lsl #1
   1256c:	ldr	fp, [r7, fp, lsl #2]
   12570:	add	r3, r2, r3, lsr #1
   12574:	cmp	r0, fp
   12578:	subcc	ip, r3, #1
   1257c:	bcc	12598 <__assert_fail@plt+0x19d0>
   12580:	add	r2, r3, r3, lsl #1
   12584:	add	r2, r7, r2, lsl #2
   12588:	ldr	fp, [r2, #4]
   1258c:	cmp	r0, fp
   12590:	bls	12900 <__assert_fail@plt+0x1d38>
   12594:	add	r2, r3, #1
   12598:	cmp	ip, r2
   1259c:	bcs	12560 <__assert_fail@plt+0x1998>
   125a0:	mov	r2, #0
   125a4:	cmp	lr, #0
   125a8:	bne	1281c <__assert_fail@plt+0x1c54>
   125ac:	sub	r3, r5, #2
   125b0:	cmp	r3, #1
   125b4:	orrls	sl, sl, #1
   125b8:	cmp	sl, #0
   125bc:	bne	12760 <__assert_fail@plt+0x1b98>
   125c0:	bic	ip, r4, #2
   125c4:	cmp	ip, #1
   125c8:	movne	r0, r1
   125cc:	orreq	r0, r1, #1
   125d0:	cmp	r0, #0
   125d4:	bne	12760 <__assert_fail@plt+0x1b98>
   125d8:	sub	r3, r5, #8
   125dc:	cmp	r3, #1
   125e0:	bhi	12854 <__assert_fail@plt+0x1c8c>
   125e4:	sub	r1, r4, #8
   125e8:	cmp	r1, #1
   125ec:	bls	12838 <__assert_fail@plt+0x1c70>
   125f0:	sub	r1, r4, #12
   125f4:	sub	r0, r4, #10
   125f8:	clz	r0, r0
   125fc:	cmp	r4, #10
   12600:	cmpne	r1, #1
   12604:	lsr	r0, r0, #5
   12608:	bhi	12618 <__assert_fail@plt+0x1a50>
   1260c:	sub	r1, r2, #8
   12610:	cmp	r1, #1
   12614:	bls	12838 <__assert_fail@plt+0x1c70>
   12618:	sub	r1, r8, #8
   1261c:	cmp	r1, #1
   12620:	bls	12a98 <__assert_fail@plt+0x1ed0>
   12624:	sub	r1, r5, #8
   12628:	clz	r1, r1
   1262c:	lsr	r1, r1, #5
   12630:	tst	r1, r0
   12634:	beq	12978 <__assert_fail@plt+0x1db0>
   12638:	mov	r8, #8
   1263c:	ldr	r3, [r6, #4]
   12640:	cmp	r3, #0
   12644:	bne	12458 <__assert_fail@plt+0x1890>
   12648:	ldr	r0, [r9, #12]
   1264c:	bl	10a54 <utf8proc_get_property@plt>
   12650:	ldrsh	r3, [r0]
   12654:	cmp	r3, #0
   12658:	ble	12724 <__assert_fail@plt+0x1b5c>
   1265c:	cmp	r3, #12
   12660:	ble	1266c <__assert_fail@plt+0x1aa4>
   12664:	cmp	r3, #29
   12668:	bne	12724 <__assert_fail@plt+0x1b5c>
   1266c:	ldr	r5, [r6, #4]
   12670:	cmp	r5, r9
   12674:	movne	r4, r9
   12678:	movne	r8, #0
   1267c:	bne	1268c <__assert_fail@plt+0x1ac4>
   12680:	b	12b00 <__assert_fail@plt+0x1f38>
   12684:	cmp	r4, #0
   12688:	beq	12b14 <__assert_fail@plt+0x1f4c>
   1268c:	add	r1, sp, #8
   12690:	ldr	r0, [r4, #12]
   12694:	bl	10a6c <utf8proc_encode_char@plt>
   12698:	cmp	r0, #0
   1269c:	beq	12b34 <__assert_fail@plt+0x1f6c>
   126a0:	ldr	r4, [r4, #4]
   126a4:	add	r8, r8, r0
   126a8:	cmp	r5, r4
   126ac:	bne	12684 <__assert_fail@plt+0x1abc>
   126b0:	add	r0, r8, #1
   126b4:	mov	r4, #0
   126b8:	bl	10ae4 <malloc@plt>
   126bc:	mov	r8, r0
   126c0:	b	126cc <__assert_fail@plt+0x1b04>
   126c4:	cmp	r9, #0
   126c8:	beq	12b54 <__assert_fail@plt+0x1f8c>
   126cc:	add	r1, r8, r4
   126d0:	ldr	r0, [r9, #12]
   126d4:	bl	10a6c <utf8proc_encode_char@plt>
   126d8:	ldr	r9, [r9, #4]
   126dc:	add	r4, r4, r0
   126e0:	cmp	r5, r9
   126e4:	bne	126c4 <__assert_fail@plt+0x1afc>
   126e8:	add	r4, r8, r4
   126ec:	mov	r3, #0
   126f0:	mov	r1, #12
   126f4:	mov	r0, #1
   126f8:	strb	r3, [r4]
   126fc:	bl	12e94 <error@@Base+0x40>
   12700:	mov	r4, r0
   12704:	mov	r0, r8
   12708:	bl	10b68 <utf8proc_NFC@plt>
   1270c:	mov	r1, r4
   12710:	str	r0, [r4, #8]
   12714:	ldr	r0, [sp, #4]
   12718:	bl	1110c <__assert_fail@plt+0x544>
   1271c:	mov	r0, r8
   12720:	bl	10a48 <free@plt>
   12724:	ldr	r9, [r6, #4]
   12728:	cmp	r9, #0
   1272c:	str	r9, [sp, #12]
   12730:	bne	12450 <__assert_fail@plt+0x1888>
   12734:	add	sp, sp, #28
   12738:	ldrd	r4, [sp]
   1273c:	ldrd	r6, [sp, #8]
   12740:	ldrd	r8, [sp, #16]
   12744:	ldrd	sl, [sp, #24]
   12748:	add	sp, sp, #32
   1274c:	pop	{pc}		; (ldr pc, [sp], #4)
   12750:	ldr	r3, [r2, #8]
   12754:	cmp	r3, #4
   12758:	bne	127c4 <__assert_fail@plt+0x1bfc>
   1275c:	mov	r6, r0
   12760:	ldr	r0, [r6, #4]
   12764:	cmp	r0, #0
   12768:	beq	12648 <__assert_fail@plt+0x1a80>
   1276c:	movw	ip, #1092	; 0x444
   12770:	movw	lr, #8294	; 0x2066
   12774:	ldr	r1, [r0, #12]
   12778:	mov	r3, ip
   1277c:	mov	r2, #0
   12780:	b	12794 <__assert_fail@plt+0x1bcc>
   12784:	sub	r3, ip, r2
   12788:	add	lr, r2, r3, lsr #1
   1278c:	add	lr, lr, lr, lsl #1
   12790:	ldr	lr, [r7, lr, lsl #2]
   12794:	add	r3, r2, r3, lsr #1
   12798:	cmp	r1, lr
   1279c:	subcc	ip, r3, #1
   127a0:	bcc	127bc <__assert_fail@plt+0x1bf4>
   127a4:	add	r2, r3, r3, lsl #1
   127a8:	add	r2, r7, r2, lsl #2
   127ac:	ldr	lr, [r2, #4]
   127b0:	cmp	r1, lr
   127b4:	bls	12750 <__assert_fail@plt+0x1b88>
   127b8:	add	r2, r3, #1
   127bc:	cmp	r2, ip
   127c0:	bls	12784 <__assert_fail@plt+0x1bbc>
   127c4:	movw	ip, #8294	; 0x2066
   127c8:	mov	r2, #0
   127cc:	movw	lr, #1092	; 0x444
   127d0:	movw	r3, #1092	; 0x444
   127d4:	b	127e8 <__assert_fail@plt+0x1c20>
   127d8:	sub	r3, lr, r2
   127dc:	add	ip, r2, r3, lsr #1
   127e0:	add	ip, ip, ip, lsl #1
   127e4:	ldr	ip, [r7, ip, lsl #2]
   127e8:	add	r3, r2, r3, lsr #1
   127ec:	cmp	r1, ip
   127f0:	subcc	lr, r3, #1
   127f4:	bcc	12810 <__assert_fail@plt+0x1c48>
   127f8:	add	r2, r3, r3, lsl #1
   127fc:	add	r2, r7, r2, lsl #2
   12800:	ldr	ip, [r2, #4]
   12804:	cmp	r1, ip
   12808:	bls	12908 <__assert_fail@plt+0x1d40>
   1280c:	add	r2, r3, #1
   12810:	cmp	lr, r2
   12814:	bcs	127d8 <__assert_fail@plt+0x1c10>
   12818:	b	12648 <__assert_fail@plt+0x1a80>
   1281c:	mov	r8, #1
   12820:	b	1263c <__assert_fail@plt+0x1a74>
   12824:	cmp	r5, #13
   12828:	bne	12948 <__assert_fail@plt+0x1d80>
   1282c:	sub	r1, r4, #8
   12830:	cmp	r1, #1
   12834:	bhi	12860 <__assert_fail@plt+0x1c98>
   12838:	mov	r8, r5
   1283c:	b	1263c <__assert_fail@plt+0x1a74>
   12840:	mov	r4, #18
   12844:	mov	ip, #16
   12848:	mov	r2, r4
   1284c:	mov	r5, r4
   12850:	mov	r3, #10
   12854:	sub	r1, r8, #8
   12858:	cmp	r1, #1
   1285c:	bls	12824 <__assert_fail@plt+0x1c5c>
   12860:	sub	r0, r4, #10
   12864:	clz	r0, r0
   12868:	lsr	r0, r0, #5
   1286c:	cmp	r8, #8
   12870:	cmpeq	r5, #11
   12874:	bne	12a14 <__assert_fail@plt+0x1e4c>
   12878:	cmp	r4, #8
   1287c:	beq	12ad0 <__assert_fail@plt+0x1f08>
   12880:	sub	lr, r4, #15
   12884:	mov	r1, #0
   12888:	clz	lr, lr
   1288c:	mov	r3, r1
   12890:	lsr	lr, lr, #5
   12894:	sub	r2, r5, #7
   12898:	sub	r0, r4, #7
   1289c:	clz	r2, r2
   128a0:	clz	r0, r0
   128a4:	lsr	r2, r2, #5
   128a8:	mov	r8, r5
   128ac:	lsr	r0, r0, #5
   128b0:	orrs	r3, r1, r3
   128b4:	bne	128c8 <__assert_fail@plt+0x1d00>
   128b8:	cmp	r5, #16
   128bc:	orreq	r2, r2, #1
   128c0:	cmp	r2, #0
   128c4:	beq	12abc <__assert_fail@plt+0x1ef4>
   128c8:	cmp	r4, #16
   128cc:	beq	1263c <__assert_fail@plt+0x1a74>
   128d0:	cmp	r5, #16
   128d4:	bne	12abc <__assert_fail@plt+0x1ef4>
   128d8:	sub	r4, r4, #8
   128dc:	cmp	r4, #1
   128e0:	orrls	lr, lr, #1
   128e4:	cmp	lr, #0
   128e8:	bne	1263c <__assert_fail@plt+0x1a74>
   128ec:	cmp	r0, #0
   128f0:	bne	1263c <__assert_fail@plt+0x1a74>
   128f4:	cmp	r6, #0
   128f8:	bne	12760 <__assert_fail@plt+0x1b98>
   128fc:	b	12734 <__assert_fail@plt+0x1b6c>
   12900:	ldr	r2, [r2, #8]
   12904:	b	125a4 <__assert_fail@plt+0x19dc>
   12908:	ldr	r3, [r2, #8]
   1290c:	cmp	r3, #6
   12910:	beq	1275c <__assert_fail@plt+0x1b94>
   12914:	b	12648 <__assert_fail@plt+0x1a80>
   12918:	ldr	r5, [r2, #8]
   1291c:	mov	r0, r6
   12920:	bl	12328 <__assert_fail@plt+0x1760>
   12924:	cmp	r0, #0
   12928:	sub	sl, r5, #1
   1292c:	clz	sl, sl
   12930:	lsr	sl, sl, #5
   12934:	bne	124d8 <__assert_fail@plt+0x1910>
   12938:	mov	r4, #18
   1293c:	mov	r1, r0
   12940:	mov	r2, r4
   12944:	b	125ac <__assert_fail@plt+0x19e4>
   12948:	sub	r1, r5, #10
   1294c:	bics	r1, r1, #2
   12950:	bne	12a98 <__assert_fail@plt+0x1ed0>
   12954:	sub	r1, r4, #8
   12958:	cmp	r1, #1
   1295c:	bls	12838 <__assert_fail@plt+0x1c70>
   12960:	sub	r0, r4, #10
   12964:	sub	r1, r5, #8
   12968:	clz	r0, r0
   1296c:	clz	r1, r1
   12970:	lsr	r0, r0, #5
   12974:	lsr	r1, r1, #5
   12978:	cmp	r4, #11
   1297c:	movne	r1, #0
   12980:	andeq	r1, r1, #1
   12984:	cmp	r1, #0
   12988:	beq	1286c <__assert_fail@plt+0x1ca4>
   1298c:	cmp	r2, #8
   12990:	beq	12638 <__assert_fail@plt+0x1a70>
   12994:	cmp	r3, #1
   12998:	sub	r1, r5, #15
   1299c:	movhi	r3, #0
   129a0:	movls	r3, #1
   129a4:	clz	r1, r1
   129a8:	cmp	r5, #15
   129ac:	lsr	r1, r1, #5
   129b0:	mov	lr, #0
   129b4:	beq	12a58 <__assert_fail@plt+0x1e90>
   129b8:	cmp	r8, #15
   129bc:	beq	12ad8 <__assert_fail@plt+0x1f10>
   129c0:	sub	r2, r5, #7
   129c4:	sub	r0, r4, #7
   129c8:	clz	r2, r2
   129cc:	clz	r0, r0
   129d0:	lsr	r2, r2, #5
   129d4:	lsr	r0, r0, #5
   129d8:	tst	r2, r0
   129dc:	movne	r8, #7
   129e0:	bne	1263c <__assert_fail@plt+0x1a74>
   129e4:	mov	r8, r5
   129e8:	b	128b0 <__assert_fail@plt+0x1ce8>
   129ec:	ldr	r4, [r2, #8]
   129f0:	bl	12328 <__assert_fail@plt+0x1760>
   129f4:	cmp	r0, #0
   129f8:	sub	r1, r4, #2
   129fc:	clz	r1, r1
   12a00:	lsr	r1, r1, #5
   12a04:	and	lr, r1, sl
   12a08:	bne	12548 <__assert_fail@plt+0x1980>
   12a0c:	mov	r2, #18
   12a10:	b	125a4 <__assert_fail@plt+0x19dc>
   12a14:	sub	r1, r5, #15
   12a18:	sub	lr, r4, #15
   12a1c:	clz	r1, r1
   12a20:	clz	lr, lr
   12a24:	lsr	r1, r1, #5
   12a28:	lsr	lr, lr, #5
   12a2c:	tst	r1, lr
   12a30:	beq	12a3c <__assert_fail@plt+0x1e74>
   12a34:	mov	r8, #15
   12a38:	b	1263c <__assert_fail@plt+0x1a74>
   12a3c:	cmp	r3, #1
   12a40:	movhi	r3, #0
   12a44:	movls	r3, #1
   12a48:	tst	lr, r3
   12a4c:	bne	12838 <__assert_fail@plt+0x1c70>
   12a50:	cmp	r5, #15
   12a54:	bne	129b8 <__assert_fail@plt+0x1df0>
   12a58:	sub	r8, r4, #8
   12a5c:	cmp	r8, #1
   12a60:	bls	12a34 <__assert_fail@plt+0x1e6c>
   12a64:	cmp	ip, #12
   12a68:	orreq	r0, r0, #1
   12a6c:	cmp	r0, #0
   12a70:	beq	12a7c <__assert_fail@plt+0x1eb4>
   12a74:	cmp	r2, #15
   12a78:	beq	12a34 <__assert_fail@plt+0x1e6c>
   12a7c:	sub	r0, r4, #7
   12a80:	orrs	r3, r1, r3
   12a84:	clz	r0, r0
   12a88:	lsr	r0, r0, #5
   12a8c:	beq	12abc <__assert_fail@plt+0x1ef4>
   12a90:	mov	r8, #15
   12a94:	b	128c8 <__assert_fail@plt+0x1d00>
   12a98:	sub	r0, r4, #10
   12a9c:	clz	r0, r0
   12aa0:	lsr	r0, r0, #5
   12aa4:	b	12624 <__assert_fail@plt+0x1a5c>
   12aa8:	mov	r2, #18
   12aac:	mov	r5, r0
   12ab0:	mov	r1, r0
   12ab4:	mov	r4, r2
   12ab8:	b	125c0 <__assert_fail@plt+0x19f8>
   12abc:	cmp	r5, #5
   12ac0:	cmpeq	r4, #5
   12ac4:	bne	128f4 <__assert_fail@plt+0x1d2c>
   12ac8:	mov	r8, #5
   12acc:	b	1263c <__assert_fail@plt+0x1a74>
   12ad0:	mov	r8, #11
   12ad4:	b	1263c <__assert_fail@plt+0x1a74>
   12ad8:	cmp	r5, #14
   12adc:	bne	12b70 <__assert_fail@plt+0x1fa8>
   12ae0:	cmp	r4, #15
   12ae4:	bne	12894 <__assert_fail@plt+0x1ccc>
   12ae8:	mov	r8, r5
   12aec:	b	1263c <__assert_fail@plt+0x1a74>
   12af0:	mov	r4, r0
   12af4:	mov	r2, #18
   12af8:	mov	r1, r0
   12afc:	b	125ac <__assert_fail@plt+0x19e4>
   12b00:	mov	r0, #1
   12b04:	bl	10ae4 <malloc@plt>
   12b08:	mov	r8, r0
   12b0c:	mov	r4, r0
   12b10:	b	126ec <__assert_fail@plt+0x1b24>
   12b14:	movw	r3, #15808	; 0x3dc0
   12b18:	movt	r3, #1
   12b1c:	movw	r1, #28964	; 0x7124
   12b20:	movt	r1, #1
   12b24:	movw	r0, #28972	; 0x712c
   12b28:	movt	r0, #1
   12b2c:	mov	r2, #249	; 0xf9
   12b30:	bl	10bc8 <__assert_fail@plt>
   12b34:	movw	r3, #15808	; 0x3dc0
   12b38:	movt	r3, #1
   12b3c:	movw	r1, #28964	; 0x7124
   12b40:	movt	r1, #1
   12b44:	movw	r0, #28988	; 0x713c
   12b48:	movt	r0, #1
   12b4c:	mov	r2, #253	; 0xfd
   12b50:	bl	10bc8 <__assert_fail@plt>
   12b54:	movw	r1, #28964	; 0x7124
   12b58:	movt	r1, #1
   12b5c:	ldr	r3, [pc, #40]	; 12b8c <__assert_fail@plt+0x1fc4>
   12b60:	movw	r0, #28972	; 0x712c
   12b64:	movt	r0, #1
   12b68:	movw	r2, #269	; 0x10d
   12b6c:	bl	10bc8 <__assert_fail@plt>
   12b70:	sub	r2, r5, #10
   12b74:	bics	r2, r2, #2
   12b78:	bne	129c0 <__assert_fail@plt+0x1df8>
   12b7c:	cmp	r4, #15
   12b80:	bne	129c0 <__assert_fail@plt+0x1df8>
   12b84:	mov	r8, r5
   12b88:	b	1263c <__assert_fail@plt+0x1a74>
   12b8c:	ldrdeq	r3, [r1], -r4
   12b90:	str	r4, [sp, #-8]!
   12b94:	mov	r4, r0
   12b98:	ldr	r0, [r0, #8]
   12b9c:	str	lr, [sp, #4]
   12ba0:	bl	10a48 <free@plt>
   12ba4:	mov	r0, r4
   12ba8:	ldr	r4, [sp]
   12bac:	ldr	lr, [sp, #4]
   12bb0:	add	sp, sp, #8
   12bb4:	b	10a48 <free@plt>
   12bb8:	movw	r3, #41196	; 0xa0ec
   12bbc:	movt	r3, #2
   12bc0:	str	r7, [sp, #-8]!
   12bc4:	ldr	r3, [r3]
   12bc8:	mov	r8, r0
   12bcc:	str	lr, [sp, #4]
   12bd0:	sub	sp, sp, #112	; 0x70
   12bd4:	cmp	r3, #0
   12bd8:	beq	12be0 <__assert_fail@plt+0x2018>
   12bdc:	blx	r3
   12be0:	movw	r5, #33096	; 0x8148
   12be4:	movt	r5, #2
   12be8:	ldrsh	r3, [r5]
   12bec:	cmp	r3, #0
   12bf0:	ble	12c54 <__assert_fail@plt+0x208c>
   12bf4:	movw	r7, #41192	; 0xa0e8
   12bf8:	movt	r7, #2
   12bfc:	movw	r6, #29008	; 0x7150
   12c00:	movt	r6, #1
   12c04:	mov	r4, #1
   12c08:	ldr	r9, [r7]
   12c0c:	bl	10b14 <getpid@plt>
   12c10:	mov	r3, r0
   12c14:	mov	r1, r6
   12c18:	str	r4, [sp]
   12c1c:	add	r0, sp, #12
   12c20:	add	r4, r4, #1
   12c24:	sxth	r4, r4
   12c28:	mov	r2, r9
   12c2c:	bl	10b80 <sprintf@plt>
   12c30:	add	r0, sp, #12
   12c34:	bl	10a78 <strdup@plt>
   12c38:	mov	r9, r0
   12c3c:	bl	10a90 <unlink@plt>
   12c40:	mov	r0, r9
   12c44:	bl	10a48 <free@plt>
   12c48:	ldrsh	r3, [r5]
   12c4c:	cmp	r3, r4
   12c50:	bge	12c08 <__assert_fail@plt+0x2040>
   12c54:	mov	r0, r8
   12c58:	bl	10b20 <exit@plt>
   12c5c:	ldrb	r3, [r0]
   12c60:	ldrb	r2, [r1]
   12c64:	cmp	r3, #0
   12c68:	beq	12c90 <__assert_fail@plt+0x20c8>
   12c6c:	cmp	r2, r3
   12c70:	beq	12c80 <__assert_fail@plt+0x20b8>
   12c74:	b	12c9c <__assert_fail@plt+0x20d4>
   12c78:	cmp	r3, r2
   12c7c:	bne	12c9c <__assert_fail@plt+0x20d4>
   12c80:	ldrb	r3, [r0, #1]!
   12c84:	ldrb	r2, [r1, #1]!
   12c88:	cmp	r3, #0
   12c8c:	bne	12c78 <__assert_fail@plt+0x20b0>
   12c90:	cmp	r2, #0
   12c94:	beq	12cac <__assert_fail@plt+0x20e4>
   12c98:	mov	r3, #0
   12c9c:	cmp	r3, r2
   12ca0:	mvncc	r0, #0
   12ca4:	movcs	r0, #1
   12ca8:	bx	lr
   12cac:	mov	r0, r2
   12cb0:	bx	lr
   12cb4:	movw	r3, #32976	; 0x80d0
   12cb8:	movt	r3, #2
   12cbc:	ldr	r3, [r3]
   12cc0:	cmp	r3, r0
   12cc4:	beq	12ce0 <__assert_fail@plt+0x2118>
   12cc8:	movw	r3, #32980	; 0x80d4
   12ccc:	movt	r3, #2
   12cd0:	ldr	r3, [r3]
   12cd4:	cmp	r3, r0
   12cd8:	beq	12ce0 <__assert_fail@plt+0x2118>
   12cdc:	b	10b5c <fclose@plt>
   12ce0:	bx	lr
   12ce4:	push	{lr}		; (str lr, [sp, #-4]!)
   12ce8:	sub	sp, sp, #92	; 0x5c
   12cec:	mov	r1, r0
   12cf0:	mov	r2, sp
   12cf4:	mov	r0, #3
   12cf8:	bl	10aa8 <__xstat@plt>
   12cfc:	clz	r0, r0
   12d00:	lsr	r0, r0, #5
   12d04:	add	sp, sp, #92	; 0x5c
   12d08:	pop	{pc}		; (ldr pc, [sp], #4)
   12d0c:	movw	r3, #33096	; 0x8148
   12d10:	movt	r3, #2
   12d14:	strd	r4, [sp, #-12]!
   12d18:	ldrh	r4, [r3]
   12d1c:	movw	r2, #41192	; 0xa0e8
   12d20:	movt	r2, #2
   12d24:	ldr	r5, [r2]
   12d28:	str	lr, [sp, #8]
   12d2c:	sub	sp, sp, #116	; 0x74
   12d30:	add	r4, r4, #1
   12d34:	sxth	r4, r4
   12d38:	strh	r4, [r3]
   12d3c:	bl	10b14 <getpid@plt>
   12d40:	mov	r3, r0
   12d44:	mov	r2, r5
   12d48:	str	r4, [sp]
   12d4c:	add	r0, sp, #12
   12d50:	movw	r1, #29008	; 0x7150
   12d54:	movt	r1, #1
   12d58:	bl	10b80 <sprintf@plt>
   12d5c:	add	r0, sp, #12
   12d60:	bl	10a78 <strdup@plt>
   12d64:	mov	r4, r0
   12d68:	bl	10a90 <unlink@plt>
   12d6c:	mov	r0, r4
   12d70:	add	sp, sp, #116	; 0x74
   12d74:	ldrd	r4, [sp]
   12d78:	add	sp, sp, #8
   12d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d80:	str	r4, [sp, #-8]!
   12d84:	mov	r4, r0
   12d88:	str	lr, [sp, #4]
   12d8c:	bl	10b38 <strlen@plt>
   12d90:	uxth	r0, r0
   12d94:	sub	r3, r0, #1
   12d98:	sxth	r3, r3
   12d9c:	cmp	r3, #0
   12da0:	blt	12de0 <__assert_fail@plt+0x2218>
   12da4:	ldrb	r2, [r4, r3]
   12da8:	cmp	r2, #47	; 0x2f
   12dac:	beq	12de0 <__assert_fail@plt+0x2218>
   12db0:	sub	r0, r0, #2
   12db4:	sxth	r3, r0
   12db8:	add	r2, r3, #1
   12dbc:	add	r2, r4, r2
   12dc0:	b	12dd4 <__assert_fail@plt+0x220c>
   12dc4:	ldrb	r0, [r2, #-1]!
   12dc8:	cmp	r0, #47	; 0x2f
   12dcc:	beq	12de0 <__assert_fail@plt+0x2218>
   12dd0:	mov	r3, r1
   12dd4:	tst	r3, #32768	; 0x8000
   12dd8:	sub	r1, r3, #1
   12ddc:	beq	12dc4 <__assert_fail@plt+0x21fc>
   12de0:	add	r0, r3, #1
   12de4:	add	r0, r4, r0
   12de8:	ldr	r4, [sp]
   12dec:	add	sp, sp, #4
   12df0:	pop	{pc}		; (ldr pc, [sp], #4)
   12df4:	mov	r0, #0
   12df8:	str	r4, [sp, #-8]!
   12dfc:	str	lr, [sp, #4]
   12e00:	bl	12bb8 <__assert_fail@plt+0x1ff0>
   12e04:	movw	r3, #41188	; 0xa0e4
   12e08:	movt	r3, #2
   12e0c:	str	r4, [sp, #-8]!
   12e10:	ldr	r2, [r3]
   12e14:	str	lr, [sp, #4]
   12e18:	cmp	r2, #0
   12e1c:	beq	12e28 <__assert_fail@plt+0x2260>
   12e20:	blx	r2
   12e24:	bl	12df4 <__assert_fail@plt+0x222c>
   12e28:	movw	r3, #41192	; 0xa0e8
   12e2c:	movt	r3, #2
   12e30:	movw	ip, #32968	; 0x80c8
   12e34:	movt	ip, #2
   12e38:	ldr	r2, [r3]
   12e3c:	movw	r1, #29024	; 0x7160
   12e40:	movt	r1, #1
   12e44:	mov	r3, r0
   12e48:	ldr	r0, [ip]
   12e4c:	bl	10b44 <fprintf@plt>
   12e50:	b	12e24 <__assert_fail@plt+0x225c>

00012e54 <error@@Base>:
   12e54:	movw	r3, #41192	; 0xa0e8
   12e58:	movt	r3, #2
   12e5c:	str	r4, [sp, #-8]!
   12e60:	movw	ip, #32968	; 0x80c8
   12e64:	movt	ip, #2
   12e68:	ldr	r2, [r3]
   12e6c:	movw	r1, #29040	; 0x7170
   12e70:	movt	r1, #1
   12e74:	str	lr, [sp, #4]
   12e78:	mov	r3, r0
   12e7c:	ldr	r0, [ip]
   12e80:	bl	10b44 <fprintf@plt>
   12e84:	movw	r3, #32956	; 0x80bc
   12e88:	movt	r3, #2
   12e8c:	ldr	r0, [r3]
   12e90:	bl	12bb8 <__assert_fail@plt+0x1ff0>
   12e94:	str	r4, [sp, #-8]!
   12e98:	str	lr, [sp, #4]
   12e9c:	bl	10a0c <calloc@plt>
   12ea0:	cmp	r0, #0
   12ea4:	beq	12eb4 <error@@Base+0x60>
   12ea8:	ldr	r4, [sp]
   12eac:	add	sp, sp, #4
   12eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   12eb4:	movw	r0, #29048	; 0x7178
   12eb8:	movt	r0, #1
   12ebc:	bl	12e54 <error@@Base>
   12ec0:	movw	r3, #33096	; 0x8148
   12ec4:	movt	r3, #2
   12ec8:	ldrb	r2, [r3, #2]
   12ecc:	cmp	r2, #0
   12ed0:	bxne	lr
   12ed4:	mov	r2, #1
   12ed8:	movw	r0, #29076	; 0x7194
   12edc:	movt	r0, #1
   12ee0:	str	r4, [sp, #-8]!
   12ee4:	str	lr, [sp, #4]
   12ee8:	strb	r2, [r3, #2]
   12eec:	bl	12e54 <error@@Base>
   12ef0:	push	{lr}		; (str lr, [sp, #-4]!)
   12ef4:	sub	sp, sp, #12
   12ef8:	movw	r3, #41192	; 0xa0e8
   12efc:	movt	r3, #2
   12f00:	movw	ip, #32968	; 0x80c8
   12f04:	movt	ip, #2
   12f08:	str	r1, [sp]
   12f0c:	movw	r1, #29092	; 0x71a4
   12f10:	movt	r1, #1
   12f14:	ldr	r2, [r3]
   12f18:	mov	r3, r0
   12f1c:	ldr	r0, [ip]
   12f20:	bl	10b44 <fprintf@plt>
   12f24:	movw	r3, #32956	; 0x80bc
   12f28:	movt	r3, #2
   12f2c:	ldr	r0, [r3]
   12f30:	bl	12bb8 <__assert_fail@plt+0x1ff0>
   12f34:	subs	r2, r0, #0
   12f38:	strd	r4, [sp, #-16]!
   12f3c:	mov	r4, r1
   12f40:	str	r6, [sp, #8]
   12f44:	str	lr, [sp, #12]
   12f48:	beq	12f88 <error@@Base+0x134>
   12f4c:	mov	r5, r2
   12f50:	bl	10a3c <fopen@plt>
   12f54:	cmp	r0, #0
   12f58:	beq	12f6c <error@@Base+0x118>
   12f5c:	ldrd	r4, [sp]
   12f60:	ldr	r6, [sp, #8]
   12f64:	add	sp, sp, #12
   12f68:	pop	{pc}		; (ldr pc, [sp], #4)
   12f6c:	ldrb	r3, [r4]
   12f70:	mov	r1, r5
   12f74:	cmp	r3, #119	; 0x77
   12f78:	beq	12fb4 <error@@Base+0x160>
   12f7c:	movw	r0, #29132	; 0x71cc
   12f80:	movt	r0, #1
   12f84:	bl	12ef0 <error@@Base+0x9c>
   12f88:	ldrb	r3, [r1]
   12f8c:	ldrd	r4, [sp]
   12f90:	ldr	r6, [sp, #8]
   12f94:	add	sp, sp, #12
   12f98:	cmp	r3, #114	; 0x72
   12f9c:	movweq	r3, #32976	; 0x80d0
   12fa0:	movwne	r3, #32980	; 0x80d4
   12fa4:	movteq	r3, #2
   12fa8:	movtne	r3, #2
   12fac:	ldr	r0, [r3]
   12fb0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fb4:	movw	r0, #29108	; 0x71b4
   12fb8:	movt	r0, #1
   12fbc:	bl	12ef0 <error@@Base+0x9c>
   12fc0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12fc4:	ldr	r4, [r1]
   12fc8:	strd	r6, [sp, #8]
   12fcc:	strd	r8, [sp, #16]
   12fd0:	mov	r8, r3
   12fd4:	strd	sl, [sp, #24]
   12fd8:	mov	sl, r1
   12fdc:	str	lr, [sp, #32]
   12fe0:	sub	sp, sp, #20
   12fe4:	str	r0, [sp]
   12fe8:	mov	r0, r4
   12fec:	str	r2, [sp, #12]
   12ff0:	bl	10b38 <strlen@plt>
   12ff4:	uxth	r0, r0
   12ff8:	sub	r3, r0, #1
   12ffc:	sxth	r3, r3
   13000:	cmp	r3, #0
   13004:	blt	13044 <error@@Base+0x1f0>
   13008:	ldrb	r2, [r4, r3]
   1300c:	cmp	r2, #47	; 0x2f
   13010:	beq	13044 <error@@Base+0x1f0>
   13014:	sub	r0, r0, #2
   13018:	sxth	r3, r0
   1301c:	add	r2, r3, #1
   13020:	add	r2, r4, r2
   13024:	b	1303c <error@@Base+0x1e8>
   13028:	ldrb	r1, [r2, #-1]!
   1302c:	sub	r0, r3, #1
   13030:	cmp	r1, #47	; 0x2f
   13034:	beq	13044 <error@@Base+0x1f0>
   13038:	mov	r3, r0
   1303c:	tst	r3, #32768	; 0x8000
   13040:	beq	13028 <error@@Base+0x1d4>
   13044:	add	r3, r3, #1
   13048:	movw	r2, #41192	; 0xa0e8
   1304c:	movt	r2, #2
   13050:	add	r3, r4, r3
   13054:	movw	r1, #11968	; 0x2ec0
   13058:	movt	r1, #1
   1305c:	mov	r0, #2
   13060:	str	r3, [r2]
   13064:	bl	10afc <__sysv_signal@plt>
   13068:	movw	r1, #11968	; 0x2ec0
   1306c:	movt	r1, #1
   13070:	mov	r0, #15
   13074:	bl	10afc <__sysv_signal@plt>
   13078:	ldr	r3, [sp]
   1307c:	ldr	r9, [r3]
   13080:	cmp	r9, #1
   13084:	beq	1325c <error@@Base+0x408>
   13088:	movle	r6, #0
   1308c:	ble	131e4 <error@@Base+0x390>
   13090:	movw	r3, #29152	; 0x71e0
   13094:	movt	r3, #1
   13098:	mov	r7, #1
   1309c:	mov	r6, #0
   130a0:	mov	r4, r7
   130a4:	str	r3, [sp, #8]
   130a8:	mov	r3, sl
   130ac:	mov	sl, r9
   130b0:	b	130d4 <error@@Base+0x280>
   130b4:	add	r4, r4, #1
   130b8:	add	r2, r6, #1
   130bc:	str	r5, [r3, r6, lsl #2]
   130c0:	sxth	r4, r4
   130c4:	sxth	r6, r2
   130c8:	cmp	r4, sl
   130cc:	mov	r7, r4
   130d0:	bge	131e4 <error@@Base+0x390>
   130d4:	ldr	r5, [r3, r4, lsl #2]
   130d8:	lsl	r9, r4, #2
   130dc:	ldrb	r2, [r5]
   130e0:	cmp	r2, #45	; 0x2d
   130e4:	bne	130b4 <error@@Base+0x260>
   130e8:	ldrb	fp, [r5, #1]
   130ec:	cmp	fp, #0
   130f0:	beq	130b4 <error@@Base+0x260>
   130f4:	mov	r0, r5
   130f8:	str	r3, [sp, #4]
   130fc:	bl	10b38 <strlen@plt>
   13100:	mov	r2, r0
   13104:	mov	r1, r5
   13108:	ldr	r0, [sp, #8]
   1310c:	bl	10ba4 <strncmp@plt>
   13110:	cmp	r0, #0
   13114:	beq	13270 <error@@Base+0x41c>
   13118:	ldr	r3, [sp, #4]
   1311c:	add	r7, r7, #1
   13120:	cmp	r7, sl
   13124:	movge	r0, #0
   13128:	addlt	r9, r3, r9
   1312c:	ldrlt	r0, [r9, #4]
   13130:	cmp	r8, #0
   13134:	beq	13178 <error@@Base+0x324>
   13138:	ldrb	r2, [r8]
   1313c:	cmp	r2, #0
   13140:	beq	13178 <error@@Base+0x324>
   13144:	cmp	fp, r2
   13148:	beq	13188 <error@@Base+0x334>
   1314c:	mov	r2, #0
   13150:	b	1315c <error@@Base+0x308>
   13154:	cmp	fp, ip
   13158:	beq	1318c <error@@Base+0x338>
   1315c:	add	r2, r2, #1
   13160:	sxth	r2, r2
   13164:	add	r1, r2, r2, lsl #1
   13168:	ldrb	ip, [r8, r1, lsl #2]
   1316c:	add	r1, r8, r1, lsl #2
   13170:	cmp	ip, #0
   13174:	bne	13154 <error@@Base+0x300>
   13178:	movw	r0, #29160	; 0x71e8
   1317c:	movt	r0, #1
   13180:	mov	r1, r5
   13184:	bl	12ef0 <error@@Base+0x9c>
   13188:	mov	r1, r8
   1318c:	ldr	r2, [r1, #4]
   13190:	cmp	r2, #0
   13194:	beq	1321c <error@@Base+0x3c8>
   13198:	ldrb	ip, [r5, #2]
   1319c:	cmp	ip, #0
   131a0:	bne	13208 <error@@Base+0x3b4>
   131a4:	cmp	r0, #0
   131a8:	beq	13278 <error@@Base+0x424>
   131ac:	ldr	r1, [r2]
   131b0:	cmp	r1, #0
   131b4:	bne	13288 <error@@Base+0x434>
   131b8:	str	r0, [r2]
   131bc:	uxth	r2, r4
   131c0:	ldrb	r1, [r5, #2]
   131c4:	add	r4, r2, #1
   131c8:	sxth	r4, r4
   131cc:	cmp	r1, #0
   131d0:	addeq	r4, r2, #2
   131d4:	sxtheq	r4, r4
   131d8:	cmp	r4, sl
   131dc:	mov	r7, r4
   131e0:	blt	130d4 <error@@Base+0x280>
   131e4:	ldr	r3, [sp]
   131e8:	str	r6, [r3]
   131ec:	add	sp, sp, #20
   131f0:	ldrd	r4, [sp]
   131f4:	ldrd	r6, [sp, #8]
   131f8:	ldrd	r8, [sp, #16]
   131fc:	ldrd	sl, [sp, #24]
   13200:	add	sp, sp, #32
   13204:	pop	{pc}		; (ldr pc, [sp], #4)
   13208:	ldr	r1, [r2]
   1320c:	cmp	r1, #0
   13210:	bne	13288 <error@@Base+0x434>
   13214:	add	r0, r5, #2
   13218:	b	131b8 <error@@Base+0x364>
   1321c:	ldr	r2, [r1, #8]
   13220:	cmp	r2, #0
   13224:	beq	13178 <error@@Base+0x324>
   13228:	ldrb	r1, [r5, #2]
   1322c:	cmp	r1, #0
   13230:	bne	13178 <error@@Base+0x324>
   13234:	ldrb	r1, [r2]
   13238:	cmp	r1, #0
   1323c:	bne	13288 <error@@Base+0x434>
   13240:	mov	r1, #1
   13244:	add	r4, r4, #1
   13248:	sxth	r4, r4
   1324c:	strb	r1, [r2]
   13250:	ldr	r2, [sp]
   13254:	ldr	sl, [r2]
   13258:	b	130c8 <error@@Base+0x274>
   1325c:	movw	r3, #32956	; 0x80bc
   13260:	movt	r3, #2
   13264:	ldrb	r6, [r3, #4]
   13268:	cmp	r6, #0
   1326c:	beq	131e4 <error@@Base+0x390>
   13270:	ldr	r0, [sp, #12]
   13274:	bl	12e04 <__assert_fail@plt+0x223c>
   13278:	ldr	r2, [r1, #8]
   1327c:	cmp	r2, #0
   13280:	bne	13234 <error@@Base+0x3e0>
   13284:	b	13178 <error@@Base+0x324>
   13288:	movw	r0, #29176	; 0x71f8
   1328c:	movt	r0, #1
   13290:	mov	r1, r5
   13294:	bl	12ef0 <error@@Base+0x9c>
   13298:	push	{lr}		; (str lr, [sp, #-4]!)
   1329c:	sub	sp, sp, #12
   132a0:	movw	r3, #41192	; 0xa0e8
   132a4:	movt	r3, #2
   132a8:	movw	ip, #32968	; 0x80c8
   132ac:	movt	ip, #2
   132b0:	str	r1, [sp]
   132b4:	movw	r1, #29092	; 0x71a4
   132b8:	movt	r1, #1
   132bc:	ldr	r2, [r3]
   132c0:	mov	r3, r0
   132c4:	ldr	r0, [ip]
   132c8:	bl	10b44 <fprintf@plt>
   132cc:	add	sp, sp, #12
   132d0:	pop	{pc}		; (ldr pc, [sp], #4)
   132d4:	strd	r4, [sp, #-16]!
   132d8:	uxtb	r5, r1
   132dc:	mov	r1, #16
   132e0:	str	r6, [sp, #8]
   132e4:	mov	r6, r0
   132e8:	mov	r0, #1
   132ec:	mov	r4, r2
   132f0:	str	lr, [sp, #12]
   132f4:	bl	12e94 <error@@Base+0x40>
   132f8:	mov	r3, r0
   132fc:	mov	r0, r6
   13300:	mov	r1, r3
   13304:	strb	r5, [r3, #8]
   13308:	str	r4, [r3, #12]
   1330c:	ldrd	r4, [sp]
   13310:	ldr	r6, [sp, #8]
   13314:	ldr	lr, [sp, #12]
   13318:	add	sp, sp, #16
   1331c:	b	1110c <__assert_fail@plt+0x544>
   13320:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13324:	clz	r3, r1
   13328:	strd	r6, [sp, #8]
   1332c:	lsr	r3, r3, #5
   13330:	strd	r8, [sp, #16]
   13334:	strd	sl, [sp, #24]
   13338:	mov	fp, r2
   1333c:	str	lr, [sp, #32]
   13340:	sub	sp, sp, #116	; 0x74
   13344:	ldrb	r2, [r2]
   13348:	cmp	r2, #0
   1334c:	moveq	r3, #0
   13350:	cmp	r3, #0
   13354:	bne	1372c <error@@Base+0x8d8>
   13358:	mov	r9, r0
   1335c:	mov	r0, r1
   13360:	ldr	r3, [r9, #4]
   13364:	movw	r1, #15608	; 0x3cf8
   13368:	movt	r1, #1
   1336c:	str	r3, [sp, #4]
   13370:	bl	12f34 <error@@Base+0xe0>
   13374:	ldrb	r3, [fp]
   13378:	mov	r6, r0
   1337c:	cmp	r3, #0
   13380:	bne	13678 <error@@Base+0x824>
   13384:	ldr	sl, [fp, #4]
   13388:	mov	r0, r6
   1338c:	ldrb	r5, [fp, #1]
   13390:	cmp	sl, #0
   13394:	moveq	sl, #94	; 0x5e
   13398:	bl	10bbc <getc@plt>
   1339c:	cmn	r0, #1
   133a0:	beq	13460 <error@@Base+0x60c>
   133a4:	movw	r8, #32264	; 0x7e08
   133a8:	movt	r8, #2
   133ac:	ldrsb	r4, [r8, r0]
   133b0:	cmp	r4, #0
   133b4:	ble	1370c <error@@Base+0x8b8>
   133b8:	cmp	r5, #0
   133bc:	movne	r7, #0
   133c0:	bne	133d4 <error@@Base+0x580>
   133c4:	b	134f4 <error@@Base+0x6a0>
   133c8:	ldrsb	r4, [r8, r0]
   133cc:	cmp	r4, #0
   133d0:	ble	1370c <error@@Base+0x8b8>
   133d4:	cmp	r4, #1
   133d8:	strb	r0, [sp, #8]
   133dc:	beq	13400 <error@@Base+0x5ac>
   133e0:	sub	r5, r4, #1
   133e4:	mov	r3, r6
   133e8:	mov	r2, r5
   133ec:	mov	r1, #1
   133f0:	add	r0, sp, #9
   133f4:	bl	10ac0 <fread@plt>
   133f8:	cmp	r5, r0
   133fc:	bne	13720 <error@@Base+0x8cc>
   13400:	add	r2, sp, #12
   13404:	mov	r1, #4
   13408:	add	r0, sp, #8
   1340c:	bl	10acc <utf8proc_iterate@plt>
   13410:	cmp	r0, r4
   13414:	bne	13718 <error@@Base+0x8c4>
   13418:	ldr	r4, [sp, #12]
   1341c:	cmp	r4, sl
   13420:	moveq	r7, #1
   13424:	beq	13450 <error@@Base+0x5fc>
   13428:	mov	r1, #16
   1342c:	mov	r0, #1
   13430:	bl	12e94 <error@@Base+0x40>
   13434:	mov	r3, r0
   13438:	mov	r0, r9
   1343c:	mov	r1, r3
   13440:	strb	r7, [r3, #8]
   13444:	mov	r7, #0
   13448:	str	r4, [r3, #12]
   1344c:	bl	1110c <__assert_fail@plt+0x544>
   13450:	mov	r0, r6
   13454:	bl	10bbc <getc@plt>
   13458:	cmn	r0, #1
   1345c:	bne	133c8 <error@@Base+0x574>
   13460:	mov	r0, r6
   13464:	bl	12cb4 <__assert_fail@plt+0x20ec>
   13468:	ldrb	r3, [fp, #9]
   1346c:	cmp	r3, #0
   13470:	beq	13578 <error@@Base+0x724>
   13474:	ldr	r3, [sp, #4]
   13478:	cmp	r3, #0
   1347c:	ldrne	r6, [r3, #4]
   13480:	ldreq	r6, [r9]
   13484:	cmp	r6, #0
   13488:	beq	13578 <error@@Base+0x724>
   1348c:	mov	r5, r6
   13490:	mov	r7, #32
   13494:	b	134a4 <error@@Base+0x650>
   13498:	ldr	r5, [r5, #4]
   1349c:	cmp	r5, #0
   134a0:	beq	135f0 <error@@Base+0x79c>
   134a4:	ldr	r4, [r5, #12]
   134a8:	mov	r0, r4
   134ac:	bl	10a54 <utf8proc_get_property@plt>
   134b0:	cmp	r4, #13
   134b4:	bhi	1366c <error@@Base+0x818>
   134b8:	cmp	r4, #11
   134bc:	bcs	134e0 <error@@Base+0x68c>
   134c0:	cmp	r4, #9
   134c4:	beq	134e0 <error@@Base+0x68c>
   134c8:	cmp	r4, #10
   134cc:	beq	13498 <error@@Base+0x644>
   134d0:	ldrsh	r3, [r0]
   134d4:	sub	r3, r3, #23
   134d8:	cmp	r3, #2
   134dc:	bhi	13498 <error@@Base+0x644>
   134e0:	str	r7, [r5, #12]
   134e4:	b	13498 <error@@Base+0x644>
   134e8:	ldrsb	r4, [r8, r0]
   134ec:	cmp	r4, #0
   134f0:	ble	1370c <error@@Base+0x8b8>
   134f4:	cmp	r4, #1
   134f8:	strb	r0, [sp, #8]
   134fc:	beq	13520 <error@@Base+0x6cc>
   13500:	sub	r5, r4, #1
   13504:	mov	r3, r6
   13508:	mov	r2, r5
   1350c:	mov	r1, #1
   13510:	add	r0, sp, #9
   13514:	bl	10ac0 <fread@plt>
   13518:	cmp	r0, r5
   1351c:	bne	13720 <error@@Base+0x8cc>
   13520:	add	r2, sp, #12
   13524:	mov	r1, #4
   13528:	add	r0, sp, #8
   1352c:	bl	10acc <utf8proc_iterate@plt>
   13530:	cmp	r4, r0
   13534:	bne	13718 <error@@Base+0x8c4>
   13538:	ldr	r4, [sp, #12]
   1353c:	mov	r1, #16
   13540:	mov	r0, #1
   13544:	bl	12e94 <error@@Base+0x40>
   13548:	mov	r3, r0
   1354c:	mov	r2, #0
   13550:	mov	r1, r0
   13554:	mov	r0, r9
   13558:	strb	r2, [r3, #8]
   1355c:	str	r4, [r3, #12]
   13560:	bl	1110c <__assert_fail@plt+0x544>
   13564:	mov	r0, r6
   13568:	bl	10bbc <getc@plt>
   1356c:	cmn	r0, #1
   13570:	bne	134e8 <error@@Base+0x694>
   13574:	b	13460 <error@@Base+0x60c>
   13578:	ldrb	r3, [fp, #10]
   1357c:	cmp	r3, #0
   13580:	beq	135b0 <error@@Base+0x75c>
   13584:	ldr	r3, [sp, #4]
   13588:	cmp	r3, #0
   1358c:	ldrne	r4, [r3, #4]
   13590:	ldreq	r4, [r9]
   13594:	b	135a8 <error@@Base+0x754>
   13598:	ldr	r0, [r4, #12]
   1359c:	bl	10a9c <utf8proc_tolower@plt>
   135a0:	str	r0, [r4, #12]
   135a4:	ldr	r4, [r4, #4]
   135a8:	cmp	r4, #0
   135ac:	bne	13598 <error@@Base+0x744>
   135b0:	add	sp, sp, #116	; 0x74
   135b4:	ldrd	r4, [sp]
   135b8:	ldrd	r6, [sp, #8]
   135bc:	ldrd	r8, [sp, #16]
   135c0:	ldrd	sl, [sp, #24]
   135c4:	add	sp, sp, #32
   135c8:	pop	{pc}		; (ldr pc, [sp], #4)
   135cc:	cmp	r3, #10
   135d0:	movne	r2, #0
   135d4:	andeq	r2, r2, #1
   135d8:	cmp	r2, #0
   135dc:	bne	13654 <error@@Base+0x800>
   135e0:	subs	r5, r3, #10
   135e4:	movne	r5, #1
   135e8:	subs	r6, r4, #0
   135ec:	beq	13578 <error@@Base+0x724>
   135f0:	eor	r2, r5, #1
   135f4:	ldr	r4, [r6, #4]
   135f8:	ldr	r3, [r6, #12]
   135fc:	cmp	r3, #32
   13600:	bne	135cc <error@@Base+0x778>
   13604:	cmp	r4, #0
   13608:	moveq	r2, #1
   1360c:	cmp	r2, #0
   13610:	bne	13624 <error@@Base+0x7d0>
   13614:	ldr	r2, [r4, #12]
   13618:	cmp	r2, #10
   1361c:	cmpne	r2, #32
   13620:	bne	135e0 <error@@Base+0x78c>
   13624:	cmp	r4, #0
   13628:	movne	r3, r5
   1362c:	moveq	r3, #0
   13630:	cmp	r3, #0
   13634:	beq	13654 <error@@Base+0x800>
   13638:	ldr	r3, [r4, #12]
   1363c:	cmp	r3, #32
   13640:	bne	13654 <error@@Base+0x800>
   13644:	ldrb	r3, [r4, #8]
   13648:	ldrb	r2, [r6, #8]
   1364c:	orr	r3, r3, r2
   13650:	strb	r3, [r4, #8]
   13654:	mov	r0, r9
   13658:	mov	r1, r6
   1365c:	bl	11214 <__assert_fail@plt+0x64c>
   13660:	mov	r0, r6
   13664:	bl	10a48 <free@plt>
   13668:	b	135e8 <error@@Base+0x794>
   1366c:	cmp	r4, #160	; 0xa0
   13670:	bne	134d0 <error@@Base+0x67c>
   13674:	b	134e0 <error@@Base+0x68c>
   13678:	mov	r2, r0
   1367c:	mov	r1, #99	; 0x63
   13680:	add	r0, sp, #12
   13684:	bl	10a60 <fgets@plt>
   13688:	cmp	r0, #0
   1368c:	beq	136ac <error@@Base+0x858>
   13690:	movw	r1, #29224	; 0x7228
   13694:	movt	r1, #1
   13698:	mov	r2, #51	; 0x33
   1369c:	add	r0, sp, #12
   136a0:	bl	10ba4 <strncmp@plt>
   136a4:	subs	r4, r0, #0
   136a8:	beq	136c0 <error@@Base+0x86c>
   136ac:	mov	r0, r6
   136b0:	bl	10a84 <rewind@plt>
   136b4:	mov	r3, #0
   136b8:	strb	r3, [fp, #11]
   136bc:	b	13384 <error@@Base+0x530>
   136c0:	movw	r5, #29280	; 0x7260
   136c4:	movt	r5, #1
   136c8:	mov	r2, r6
   136cc:	mov	r1, #99	; 0x63
   136d0:	add	r0, sp, #12
   136d4:	bl	10a60 <fgets@plt>
   136d8:	cmp	r0, #0
   136dc:	beq	13704 <error@@Base+0x8b0>
   136e0:	mov	r1, r5
   136e4:	add	r0, sp, #12
   136e8:	bl	10a18 <strcmp@plt>
   136ec:	cmp	r0, #0
   136f0:	bne	136c8 <error@@Base+0x874>
   136f4:	cmp	r4, #0
   136f8:	bne	13704 <error@@Base+0x8b0>
   136fc:	mov	r4, #1
   13700:	b	136c8 <error@@Base+0x874>
   13704:	mov	r3, #1
   13708:	b	136b8 <error@@Base+0x864>
   1370c:	movw	r0, #29336	; 0x7298
   13710:	movt	r0, #1
   13714:	bl	12e54 <error@@Base>
   13718:	bl	10b8c <utf8proc_errmsg@plt>
   1371c:	bl	12e54 <error@@Base>
   13720:	movw	r0, #29360	; 0x72b0
   13724:	movt	r0, #1
   13728:	bl	12e54 <error@@Base>
   1372c:	movw	r1, #29196	; 0x720c
   13730:	movt	r1, #1
   13734:	movw	r0, #29208	; 0x7218
   13738:	movt	r0, #1
   1373c:	bl	12ef0 <error@@Base+0x9c>
   13740:	str	r4, [sp, #-8]!
   13744:	str	lr, [sp, #4]
   13748:	bl	10a6c <utf8proc_encode_char@plt>
   1374c:	cmp	r0, #0
   13750:	ble	13764 <error@@Base+0x910>
   13754:	ldr	r4, [sp]
   13758:	add	sp, sp, #4
   1375c:	sxtb	r0, r0
   13760:	pop	{pc}		; (ldr pc, [sp], #4)
   13764:	movw	r0, #29384	; 0x72c8
   13768:	movt	r0, #1
   1376c:	bl	12e54 <error@@Base>
   13770:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13774:	uxtb	r5, r0
   13778:	cmp	r5, #0
   1377c:	strd	r6, [sp, #8]
   13780:	mov	r6, r1
   13784:	mov	r7, r2
   13788:	moveq	r4, r2
   1378c:	str	r8, [sp, #16]
   13790:	uxtb	r8, r3
   13794:	str	lr, [sp, #20]
   13798:	bne	138a8 <error@@Base+0xa54>
   1379c:	cmp	r6, #10
   137a0:	bne	137d8 <error@@Base+0x984>
   137a4:	cmp	r8, #0
   137a8:	movw	r2, #15728	; 0x3d70
   137ac:	movt	r2, #1
   137b0:	movw	r1, #29408	; 0x72e0
   137b4:	movt	r1, #1
   137b8:	mov	r0, r4
   137bc:	ldrd	r4, [sp]
   137c0:	moveq	r1, r2
   137c4:	ldrd	r6, [sp, #8]
   137c8:	ldr	r8, [sp, #16]
   137cc:	ldr	lr, [sp, #20]
   137d0:	add	sp, sp, #24
   137d4:	b	10b80 <sprintf@plt>
   137d8:	mov	r0, r6
   137dc:	bl	10a54 <utf8proc_get_property@plt>
   137e0:	cmp	r6, #32
   137e4:	beq	13804 <error@@Base+0x9b0>
   137e8:	ldrsh	r3, [r0]
   137ec:	cmp	r3, #0
   137f0:	ble	13878 <error@@Base+0xa24>
   137f4:	cmp	r3, #22
   137f8:	ble	13804 <error@@Base+0x9b0>
   137fc:	cmp	r3, #29
   13800:	bne	13878 <error@@Base+0xa24>
   13804:	mov	r0, r6
   13808:	bl	10b2c <utf8proc_category@plt>
   1380c:	sub	r0, r0, #6
   13810:	cmp	r0, #2
   13814:	bhi	1383c <error@@Base+0x9e8>
   13818:	mov	r1, r4
   1381c:	movw	r0, #9676	; 0x25cc
   13820:	bl	10a6c <utf8proc_encode_char@plt>
   13824:	cmp	r0, #0
   13828:	ble	138c8 <error@@Base+0xa74>
   1382c:	sxtb	r0, r0
   13830:	add	r0, r5, r0
   13834:	sxth	r5, r0
   13838:	add	r4, r7, r5
   1383c:	mov	r1, r4
   13840:	mov	r0, r6
   13844:	bl	10a6c <utf8proc_encode_char@plt>
   13848:	cmp	r0, #0
   1384c:	ble	138c8 <error@@Base+0xa74>
   13850:	sxtb	r0, r0
   13854:	mov	r3, #0
   13858:	add	r0, r5, r0
   1385c:	sxth	r0, r0
   13860:	strb	r3, [r7, r0]
   13864:	ldrd	r4, [sp]
   13868:	ldrd	r6, [sp, #8]
   1386c:	ldr	r8, [sp, #16]
   13870:	add	sp, sp, #20
   13874:	pop	{pc}		; (ldr pc, [sp], #4)
   13878:	cmp	r6, #255	; 0xff
   1387c:	bls	138d4 <error@@Base+0xa80>
   13880:	movw	r1, #29424	; 0x72f0
   13884:	movt	r1, #1
   13888:	mov	r2, r6
   1388c:	mov	r0, r4
   13890:	ldrd	r4, [sp]
   13894:	ldrd	r6, [sp, #8]
   13898:	ldr	r8, [sp, #16]
   1389c:	ldr	lr, [sp, #20]
   138a0:	add	sp, sp, #24
   138a4:	b	10b80 <sprintf@plt>
   138a8:	mov	r1, r2
   138ac:	mov	r0, #94	; 0x5e
   138b0:	bl	10a6c <utf8proc_encode_char@plt>
   138b4:	subs	r4, r0, #0
   138b8:	sxtbgt	r4, r4
   138bc:	sxthgt	r5, r4
   138c0:	addgt	r4, r7, r4
   138c4:	bgt	1379c <error@@Base+0x948>
   138c8:	movw	r0, #29384	; 0x72c8
   138cc:	movt	r0, #1
   138d0:	bl	12e54 <error@@Base>
   138d4:	movw	r1, #29416	; 0x72e8
   138d8:	movt	r1, #1
   138dc:	mov	r2, r6
   138e0:	mov	r0, r4
   138e4:	b	13890 <error@@Base+0xa3c>
   138e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   138ec:	mov	r4, r2
   138f0:	mov	r5, r0
   138f4:	mov	r0, r1
   138f8:	movw	r1, #15680	; 0x3d40
   138fc:	movt	r1, #1
   13900:	strd	r6, [sp, #8]
   13904:	strd	r8, [sp, #16]
   13908:	strd	sl, [sp, #24]
   1390c:	str	lr, [sp, #32]
   13910:	sub	sp, sp, #20
   13914:	bl	12f34 <error@@Base+0xe0>
   13918:	cmp	r4, #0
   1391c:	mov	r7, r0
   13920:	beq	13974 <error@@Base+0xb20>
   13924:	mov	r3, r7
   13928:	mov	r2, #55	; 0x37
   1392c:	mov	r1, #1
   13930:	movw	r0, #29224	; 0x7228
   13934:	movt	r0, #1
   13938:	bl	10ab4 <fwrite@plt>
   1393c:	mov	r3, r7
   13940:	mov	r2, #55	; 0x37
   13944:	mov	r1, #1
   13948:	movw	r0, #29280	; 0x7260
   1394c:	movt	r0, #1
   13950:	bl	10ab4 <fwrite@plt>
   13954:	mov	r0, r7
   13958:	blx	r4
   1395c:	movw	r0, #29280	; 0x7260
   13960:	movt	r0, #1
   13964:	mov	r3, r7
   13968:	mov	r2, #55	; 0x37
   1396c:	mov	r1, #1
   13970:	bl	10ab4 <fwrite@plt>
   13974:	ldr	r4, [r5]
   13978:	cmp	r4, #0
   1397c:	beq	13acc <error@@Base+0xc78>
   13980:	movw	sl, #29424	; 0x72f0
   13984:	movt	sl, #1
   13988:	movw	r9, #29416	; 0x72e8
   1398c:	movt	r9, #1
   13990:	movw	r8, #15728	; 0x3d70
   13994:	movt	r8, #1
   13998:	b	139bc <error@@Base+0xb68>
   1399c:	ldrh	r3, [r8]
   139a0:	strh	r3, [r6]
   139a4:	mov	r1, r7
   139a8:	add	r0, sp, #4
   139ac:	bl	10b98 <fputs@plt>
   139b0:	ldr	r4, [r4, #4]
   139b4:	cmp	r4, #0
   139b8:	beq	13acc <error@@Base+0xc78>
   139bc:	ldrb	r3, [r4, #8]
   139c0:	ldr	r5, [r4, #12]
   139c4:	cmp	r3, #0
   139c8:	moveq	fp, r3
   139cc:	addeq	r6, sp, #4
   139d0:	bne	13a74 <error@@Base+0xc20>
   139d4:	cmp	r5, #10
   139d8:	beq	1399c <error@@Base+0xb48>
   139dc:	mov	r0, r5
   139e0:	bl	10a54 <utf8proc_get_property@plt>
   139e4:	cmp	r5, #32
   139e8:	beq	13a08 <error@@Base+0xbb4>
   139ec:	ldrsh	r3, [r0]
   139f0:	cmp	r3, #0
   139f4:	ble	13a9c <error@@Base+0xc48>
   139f8:	cmp	r3, #22
   139fc:	ble	13a08 <error@@Base+0xbb4>
   13a00:	cmp	r3, #29
   13a04:	bne	13a9c <error@@Base+0xc48>
   13a08:	mov	r0, r5
   13a0c:	bl	10b2c <utf8proc_category@plt>
   13a10:	sub	r0, r0, #6
   13a14:	cmp	r0, #2
   13a18:	bhi	13a44 <error@@Base+0xbf0>
   13a1c:	mov	r1, r6
   13a20:	movw	r0, #9676	; 0x25cc
   13a24:	bl	10a6c <utf8proc_encode_char@plt>
   13a28:	subs	r3, r0, #0
   13a2c:	ble	13af0 <error@@Base+0xc9c>
   13a30:	sxtb	r3, r3
   13a34:	add	r3, fp, r3
   13a38:	sxth	fp, r3
   13a3c:	add	r3, sp, #4
   13a40:	add	r6, r3, fp
   13a44:	mov	r1, r6
   13a48:	mov	r0, r5
   13a4c:	bl	10a6c <utf8proc_encode_char@plt>
   13a50:	subs	r3, r0, #0
   13a54:	ble	13af0 <error@@Base+0xc9c>
   13a58:	sxtb	r3, r3
   13a5c:	add	r1, sp, #16
   13a60:	add	r3, fp, r3
   13a64:	mov	r2, #0
   13a68:	sxtah	r3, r1, r3
   13a6c:	strb	r2, [r3, #-12]
   13a70:	b	139a4 <error@@Base+0xb50>
   13a74:	add	r1, sp, #4
   13a78:	mov	r0, #94	; 0x5e
   13a7c:	bl	10a6c <utf8proc_encode_char@plt>
   13a80:	subs	r6, r0, #0
   13a84:	ble	13af0 <error@@Base+0xc9c>
   13a88:	sxtb	r6, r6
   13a8c:	add	r3, sp, #4
   13a90:	sxth	fp, r6
   13a94:	add	r6, r3, r6
   13a98:	b	139d4 <error@@Base+0xb80>
   13a9c:	cmp	r5, #255	; 0xff
   13aa0:	bhi	13ab8 <error@@Base+0xc64>
   13aa4:	mov	r2, r5
   13aa8:	mov	r0, r6
   13aac:	mov	r1, r9
   13ab0:	bl	10b80 <sprintf@plt>
   13ab4:	b	139a4 <error@@Base+0xb50>
   13ab8:	mov	r2, r5
   13abc:	mov	r0, r6
   13ac0:	mov	r1, sl
   13ac4:	bl	10b80 <sprintf@plt>
   13ac8:	b	139a4 <error@@Base+0xb50>
   13acc:	mov	r0, r7
   13ad0:	bl	12cb4 <__assert_fail@plt+0x20ec>
   13ad4:	add	sp, sp, #20
   13ad8:	ldrd	r4, [sp]
   13adc:	ldrd	r6, [sp, #8]
   13ae0:	ldrd	r8, [sp, #16]
   13ae4:	ldrd	sl, [sp, #24]
   13ae8:	add	sp, sp, #32
   13aec:	pop	{pc}		; (ldr pc, [sp], #4)
   13af0:	movw	r0, #29384	; 0x72c8
   13af4:	movt	r0, #1
   13af8:	bl	12e54 <error@@Base>
   13afc:	strd	r4, [sp, #-20]!	; 0xffffffec
   13b00:	mov	r2, #0
   13b04:	strd	r6, [sp, #8]
   13b08:	str	lr, [sp, #16]
   13b0c:	sub	sp, sp, #12
   13b10:	ldrb	r3, [r1]
   13b14:	str	r2, [sp, #4]
   13b18:	cmp	r3, r2
   13b1c:	beq	13b84 <error@@Base+0xd30>
   13b20:	mov	r4, r1
   13b24:	mov	r6, r0
   13b28:	b	13b5c <error@@Base+0xd08>
   13b2c:	ldr	r5, [sp, #4]
   13b30:	bl	12e94 <error@@Base+0x40>
   13b34:	mov	r3, r0
   13b38:	mov	r2, #0
   13b3c:	mov	r1, r0
   13b40:	mov	r0, r6
   13b44:	strb	r2, [r3, #8]
   13b48:	str	r5, [r3, #12]
   13b4c:	bl	1110c <__assert_fail@plt+0x544>
   13b50:	ldrb	r3, [r4, r7]!
   13b54:	cmp	r3, #0
   13b58:	beq	13b84 <error@@Base+0xd30>
   13b5c:	mvn	r1, #0
   13b60:	add	r2, sp, #4
   13b64:	mov	r0, r4
   13b68:	bl	10acc <utf8proc_iterate@plt>
   13b6c:	subs	r7, r0, #0
   13b70:	mov	r1, #16
   13b74:	mov	r0, #1
   13b78:	bgt	13b2c <error@@Base+0xcd8>
   13b7c:	mov	r0, #0
   13b80:	b	13b88 <error@@Base+0xd34>
   13b84:	mov	r0, #1
   13b88:	add	sp, sp, #12
   13b8c:	ldrd	r4, [sp]
   13b90:	ldrd	r6, [sp, #8]
   13b94:	add	sp, sp, #16
   13b98:	pop	{pc}		; (ldr pc, [sp], #4)
   13b9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13ba0:	mov	r7, r0
   13ba4:	ldr	r6, [pc, #72]	; 13bf4 <error@@Base+0xda0>
   13ba8:	ldr	r5, [pc, #72]	; 13bf8 <error@@Base+0xda4>
   13bac:	add	r6, pc, r6
   13bb0:	add	r5, pc, r5
   13bb4:	sub	r6, r6, r5
   13bb8:	mov	r8, r1
   13bbc:	mov	r9, r2
   13bc0:	bl	109ec <calloc@plt-0x20>
   13bc4:	asrs	r6, r6, #2
   13bc8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13bcc:	mov	r4, #0
   13bd0:	add	r4, r4, #1
   13bd4:	ldr	r3, [r5], #4
   13bd8:	mov	r2, r9
   13bdc:	mov	r1, r8
   13be0:	mov	r0, r7
   13be4:	blx	r3
   13be8:	cmp	r6, r4
   13bec:	bne	13bd0 <error@@Base+0xd7c>
   13bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13bf4:	andeq	r4, r1, r0, asr r2
   13bf8:	andeq	r4, r1, r8, asr #4
   13bfc:	bx	lr

Disassembly of section .fini:

00013c00 <.fini>:
   13c00:	push	{r3, lr}
   13c04:	pop	{r3, pc}
