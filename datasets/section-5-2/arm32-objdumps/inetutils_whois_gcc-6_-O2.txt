
../repos/inetutils/whois/whois:     file format elf32-littlearm


Disassembly of section .init:

00011098 <.init>:
   11098:	push	{r3, lr}
   1109c:	bl	11874 <__assert_fail@plt+0x4bc>
   110a0:	pop	{r3, pc}

Disassembly of section .plt:

000110a4 <fdopen@plt-0x14>:
   110a4:	push	{lr}		; (str lr, [sp, #-4]!)
   110a8:	ldr	lr, [pc, #4]	; 110b4 <fdopen@plt-0x4>
   110ac:	add	lr, pc, lr
   110b0:	ldr	pc, [lr, #8]!
   110b4:	andeq	fp, r1, ip, asr #30

000110b8 <fdopen@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #110592	; 0x1b000
   110c0:	ldr	pc, [ip, #3916]!	; 0xf4c

000110c4 <calloc@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #110592	; 0x1b000
   110cc:	ldr	pc, [ip, #3908]!	; 0xf44

000110d0 <fputs_unlocked@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #110592	; 0x1b000
   110d8:	ldr	pc, [ip, #3900]!	; 0xf3c

000110dc <raise@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #110592	; 0x1b000
   110e4:	ldr	pc, [ip, #3892]!	; 0xf34

000110e8 <inet_aton@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #110592	; 0x1b000
   110f0:	ldr	pc, [ip, #3884]!	; 0xf2c

000110f4 <strcmp@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #110592	; 0x1b000
   110fc:	ldr	pc, [ip, #3876]!	; 0xf24

00011100 <strtol@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #110592	; 0x1b000
   11108:	ldr	pc, [ip, #3868]!	; 0xf1c

0001110c <printf@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #110592	; 0x1b000
   11114:	ldr	pc, [ip, #3860]!	; 0xf14

00011118 <memmove@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #110592	; 0x1b000
   11120:	ldr	pc, [ip, #3852]!	; 0xf0c

00011124 <strchrnul@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #110592	; 0x1b000
   1112c:	ldr	pc, [ip, #3844]!	; 0xf04

00011130 <free@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #110592	; 0x1b000
   11138:	ldr	pc, [ip, #3836]!	; 0xefc

0001113c <gai_strerror@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #110592	; 0x1b000
   11144:	ldr	pc, [ip, #3828]!	; 0xef4

00011148 <fgets@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #110592	; 0x1b000
   11150:	ldr	pc, [ip, #3820]!	; 0xeec

00011154 <ferror@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #110592	; 0x1b000
   1115c:	ldr	pc, [ip, #3812]!	; 0xee4

00011160 <strndup@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #110592	; 0x1b000
   11168:	ldr	pc, [ip, #3804]!	; 0xedc

0001116c <memcpy@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #110592	; 0x1b000
   11174:	ldr	pc, [ip, #3796]!	; 0xed4

00011178 <signal@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #110592	; 0x1b000
   11180:	ldr	pc, [ip, #3788]!	; 0xecc

00011184 <fwrite_unlocked@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #110592	; 0x1b000
   1118c:	ldr	pc, [ip, #3780]!	; 0xec4

00011190 <sleep@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #110592	; 0x1b000
   11198:	ldr	pc, [ip, #3772]!	; 0xebc

0001119c <realloc@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #110592	; 0x1b000
   111a4:	ldr	pc, [ip, #3764]!	; 0xeb4

000111a8 <strcasecmp@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #110592	; 0x1b000
   111b0:	ldr	pc, [ip, #3756]!	; 0xeac

000111b4 <funlockfile@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #110592	; 0x1b000
   111bc:	ldr	pc, [ip, #3748]!	; 0xea4

000111c0 <fwrite@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #110592	; 0x1b000
   111c8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111cc <strcat@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #110592	; 0x1b000
   111d4:	ldr	pc, [ip, #3732]!	; 0xe94

000111d8 <strcpy@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #110592	; 0x1b000
   111e0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111e4 <error@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #110592	; 0x1b000
   111ec:	ldr	pc, [ip, #3716]!	; 0xe84

000111f0 <getenv@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #110592	; 0x1b000
   111f8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111fc <puts@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #110592	; 0x1b000
   11204:	ldr	pc, [ip, #3700]!	; 0xe74

00011208 <malloc@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #110592	; 0x1b000
   11210:	ldr	pc, [ip, #3692]!	; 0xe6c

00011214 <__libc_start_main@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #110592	; 0x1b000
   1121c:	ldr	pc, [ip, #3684]!	; 0xe64

00011220 <strerror@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #110592	; 0x1b000
   11228:	ldr	pc, [ip, #3676]!	; 0xe5c

0001122c <__ctype_tolower_loc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #110592	; 0x1b000
   11234:	ldr	pc, [ip, #3668]!	; 0xe54

00011238 <__gmon_start__@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #110592	; 0x1b000
   11240:	ldr	pc, [ip, #3660]!	; 0xe4c

00011244 <mempcpy@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #110592	; 0x1b000
   1124c:	ldr	pc, [ip, #3652]!	; 0xe44

00011250 <__ctype_b_loc@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #110592	; 0x1b000
   11258:	ldr	pc, [ip, #3644]!	; 0xe3c

0001125c <exit@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #110592	; 0x1b000
   11264:	ldr	pc, [ip, #3636]!	; 0xe34

00011268 <strlen@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #110592	; 0x1b000
   11270:	ldr	pc, [ip, #3628]!	; 0xe2c

00011274 <strchr@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #110592	; 0x1b000
   1127c:	ldr	pc, [ip, #3620]!	; 0xe24

00011280 <fprintf@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #110592	; 0x1b000
   11288:	ldr	pc, [ip, #3612]!	; 0xe1c

0001128c <__errno_location@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #110592	; 0x1b000
   11294:	ldr	pc, [ip, #3604]!	; 0xe14

00011298 <strncasecmp@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #110592	; 0x1b000
   112a0:	ldr	pc, [ip, #3596]!	; 0xe0c

000112a4 <strerror_r@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #110592	; 0x1b000
   112ac:	ldr	pc, [ip, #3588]!	; 0xe04

000112b0 <memset@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #110592	; 0x1b000
   112b8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112bc <write@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #110592	; 0x1b000
   112c4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112c8 <memchr@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #110592	; 0x1b000
   112d0:	ldr	pc, [ip, #3564]!	; 0xdec

000112d4 <__overflow@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #110592	; 0x1b000
   112dc:	ldr	pc, [ip, #3556]!	; 0xde4

000112e0 <strrchr@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #110592	; 0x1b000
   112e8:	ldr	pc, [ip, #3548]!	; 0xddc

000112ec <vfprintf@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #110592	; 0x1b000
   112f4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112f8 <fputc@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #110592	; 0x1b000
   11300:	ldr	pc, [ip, #3532]!	; 0xdcc

00011304 <sscanf@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #110592	; 0x1b000
   1130c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011310 <sprintf@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #110592	; 0x1b000
   11318:	ldr	pc, [ip, #3516]!	; 0xdbc

0001131c <flockfile@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #110592	; 0x1b000
   11324:	ldr	pc, [ip, #3508]!	; 0xdb4

00011328 <vsnprintf@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #110592	; 0x1b000
   11330:	ldr	pc, [ip, #3500]!	; 0xdac

00011334 <qsort@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #110592	; 0x1b000
   1133c:	ldr	pc, [ip, #3492]!	; 0xda4

00011340 <strpbrk@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #110592	; 0x1b000
   11348:	ldr	pc, [ip, #3484]!	; 0xd9c

0001134c <freeaddrinfo@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #110592	; 0x1b000
   11354:	ldr	pc, [ip, #3476]!	; 0xd94

00011358 <getaddrinfo@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #110592	; 0x1b000
   11360:	ldr	pc, [ip, #3468]!	; 0xd8c

00011364 <socket@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #110592	; 0x1b000
   1136c:	ldr	pc, [ip, #3460]!	; 0xd84

00011370 <gethostbyname@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #110592	; 0x1b000
   11378:	ldr	pc, [ip, #3452]!	; 0xd7c

0001137c <fputs@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #110592	; 0x1b000
   11384:	ldr	pc, [ip, #3444]!	; 0xd74

00011388 <strncmp@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #110592	; 0x1b000
   11390:	ldr	pc, [ip, #3436]!	; 0xd6c

00011394 <abort@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #110592	; 0x1b000
   1139c:	ldr	pc, [ip, #3428]!	; 0xd64

000113a0 <close@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #110592	; 0x1b000
   113a8:	ldr	pc, [ip, #3420]!	; 0xd5c

000113ac <connect@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #110592	; 0x1b000
   113b4:	ldr	pc, [ip, #3412]!	; 0xd54

000113b8 <__assert_fail@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #110592	; 0x1b000
   113c0:	ldr	pc, [ip, #3404]!	; 0xd4c

Disassembly of section .text:

000113c4 <argp_parse@@Base-0x1cb8>:
   113c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113c8:	mov	r5, r0
   113cc:	sub	sp, sp, #20
   113d0:	ldr	r0, [r1]
   113d4:	mov	r8, r1
   113d8:	ldr	r4, [pc, #1012]	; 117d4 <__assert_fail@plt+0x41c>
   113dc:	bl	14368 <_obstack_memory_used@@Base+0x34>
   113e0:	ldr	r3, [pc, #1008]	; 117d8 <__assert_fail@plt+0x420>
   113e4:	mov	r2, #0
   113e8:	mov	r1, r2
   113ec:	str	r3, [sp]
   113f0:	mov	r0, r4
   113f4:	ldr	r3, [pc, #992]	; 117dc <__assert_fail@plt+0x424>
   113f8:	bl	14124 <_obstack_begin@@Base>
   113fc:	ldr	r3, [pc, #988]	; 117e0 <__assert_fail@plt+0x428>
   11400:	ldr	r2, [pc, #988]	; 117e4 <__assert_fail@plt+0x42c>
   11404:	ldr	r1, [pc, #988]	; 117e8 <__assert_fail@plt+0x430>
   11408:	ldr	r0, [pc, #988]	; 117ec <__assert_fail@plt+0x434>
   1140c:	str	r2, [r3]
   11410:	bl	13e40 <argp_parse@@Base+0xdc4>
   11414:	mov	r0, #0
   11418:	add	r3, sp, #12
   1141c:	mov	r2, r8
   11420:	str	r0, [sp, #4]
   11424:	str	r3, [sp]
   11428:	mov	r1, r5
   1142c:	mov	r3, #8
   11430:	ldr	r0, [pc, #952]	; 117f0 <__assert_fail@plt+0x438>
   11434:	bl	1307c <argp_parse@@Base>
   11438:	ldr	r3, [r4, #12]
   1143c:	ldr	r2, [r4, #16]
   11440:	cmp	r2, r3
   11444:	beq	116a0 <__assert_fail@plt+0x2e8>
   11448:	mov	r2, #0
   1144c:	add	r1, r3, #1
   11450:	str	r1, [r4, #12]
   11454:	strb	r2, [r3]
   11458:	ldr	r3, [r4, #12]
   1145c:	ldr	r9, [r4, #8]
   11460:	ldr	r1, [r4, #24]
   11464:	cmp	r9, r3
   11468:	ldr	r0, [r4, #16]
   1146c:	ldrbeq	r2, [r4, #40]	; 0x28
   11470:	add	r3, r3, r1
   11474:	bic	r3, r3, r1
   11478:	orreq	r2, r2, #2
   1147c:	strbeq	r2, [r4, #40]	; 0x28
   11480:	ldr	r2, [r4, #4]
   11484:	ldr	r6, [sp, #12]
   11488:	sub	r1, r3, r2
   1148c:	sub	r2, r0, r2
   11490:	cmp	r1, r2
   11494:	str	r3, [r4, #12]
   11498:	strhi	r0, [r4, #12]
   1149c:	ldr	r3, [r4, #12]
   114a0:	subs	r5, r5, r6
   114a4:	ldr	r7, [pc, #840]	; 117f4 <__assert_fail@plt+0x43c>
   114a8:	str	r3, [r4, #8]
   114ac:	bne	115c8 <__assert_fail@plt+0x210>
   114b0:	ldr	r1, [r7]
   114b4:	cmp	r1, #0
   114b8:	beq	1167c <__assert_fail@plt+0x2c4>
   114bc:	ldr	r3, [r4, #12]
   114c0:	ldr	r2, [r4, #16]
   114c4:	cmp	r2, r3
   114c8:	beq	1168c <__assert_fail@plt+0x2d4>
   114cc:	mov	r2, #0
   114d0:	add	r1, r3, #1
   114d4:	str	r1, [r4, #12]
   114d8:	strb	r2, [r3]
   114dc:	ldr	r3, [r4, #12]
   114e0:	ldr	r5, [r4, #8]
   114e4:	ldr	r1, [r4, #4]
   114e8:	cmp	r5, r3
   114ec:	ldr	r0, [r4, #16]
   114f0:	ldrbeq	r2, [r4, #40]	; 0x28
   114f4:	orreq	r2, r2, #2
   114f8:	strbeq	r2, [r4, #40]	; 0x28
   114fc:	ldr	r2, [r4, #24]
   11500:	add	r3, r3, r2
   11504:	bic	r3, r3, r2
   11508:	sub	r2, r3, r1
   1150c:	sub	r1, r0, r1
   11510:	cmp	r2, r1
   11514:	ldr	r2, [r7, #4]
   11518:	str	r3, [r4, #12]
   1151c:	strhi	r0, [r4, #12]
   11520:	ldr	r3, [r4, #12]
   11524:	cmp	r2, #0
   11528:	str	r3, [r4, #8]
   1152c:	beq	116b4 <__assert_fail@plt+0x2fc>
   11530:	ldr	r6, [pc, #704]	; 117f8 <__assert_fail@plt+0x440>
   11534:	ldr	r0, [pc, #704]	; 117fc <__assert_fail@plt+0x444>
   11538:	bl	111f0 <getenv@plt>
   1153c:	mov	r1, r9
   11540:	cmp	r0, #0
   11544:	movne	r2, #0
   11548:	ldrne	r3, [pc, #688]	; 11800 <__assert_fail@plt+0x448>
   1154c:	ldr	r0, [r7, #4]
   11550:	strne	r2, [r3]
   11554:	mov	r2, r5
   11558:	bl	11d38 <__assert_fail@plt+0x980>
   1155c:	ldr	r3, [r7, #12]
   11560:	cmp	r3, #0
   11564:	mov	r4, r0
   11568:	bne	1166c <__assert_fail@plt+0x2b4>
   1156c:	mov	r0, r4
   11570:	bl	11268 <strlen@plt>
   11574:	ldr	r3, [pc, #648]	; 11804 <__assert_fail@plt+0x44c>
   11578:	ldr	r1, [pc, #648]	; 11808 <__assert_fail@plt+0x450>
   1157c:	ldrh	ip, [r3]
   11580:	ldrb	r3, [r3, #2]
   11584:	add	r2, r4, r0
   11588:	strh	ip, [r4, r0]
   1158c:	strb	r3, [r2, #2]
   11590:	mov	r0, #15
   11594:	bl	11178 <signal@plt>
   11598:	ldr	r1, [pc, #616]	; 11808 <__assert_fail@plt+0x450>
   1159c:	mov	r0, #2
   115a0:	bl	11178 <signal@plt>
   115a4:	ldmib	r7, {r0, r1}
   115a8:	bl	126bc <__assert_fail@plt+0x1304>
   115ac:	mov	r1, r4
   115b0:	str	r0, [r6]
   115b4:	bl	127e8 <__assert_fail@plt+0x1430>
   115b8:	ldr	r0, [r6]
   115bc:	bl	113a0 <close@plt>
   115c0:	mov	r0, #0
   115c4:	bl	1125c <exit@plt>
   115c8:	ldr	r3, [r7]
   115cc:	cmp	r3, #0
   115d0:	bne	114bc <__assert_fail@plt+0x104>
   115d4:	add	r6, r8, r6, lsl #2
   115d8:	sub	r5, r5, #1
   115dc:	mov	r8, #32
   115e0:	b	11620 <__assert_fail@plt+0x268>
   115e4:	mov	r1, sl
   115e8:	mov	r2, fp
   115ec:	bl	1116c <memcpy@plt>
   115f0:	ldr	r0, [r4, #12]
   115f4:	cmp	r5, #0
   115f8:	add	r0, r0, fp
   115fc:	str	r0, [r4, #12]
   11600:	beq	114bc <__assert_fail@plt+0x104>
   11604:	ldr	r3, [r4, #16]
   11608:	cmp	r3, r0
   1160c:	beq	11658 <__assert_fail@plt+0x2a0>
   11610:	sub	r5, r5, #1
   11614:	add	r3, r0, #1
   11618:	str	r3, [r4, #12]
   1161c:	strb	r8, [r0]
   11620:	ldr	sl, [r6], #4
   11624:	mov	r0, sl
   11628:	bl	11268 <strlen@plt>
   1162c:	ldr	r1, [r4, #16]
   11630:	mov	fp, r0
   11634:	ldr	r0, [r4, #12]
   11638:	sub	r1, r1, r0
   1163c:	cmp	fp, r1
   11640:	bls	115e4 <__assert_fail@plt+0x22c>
   11644:	ldr	r0, [pc, #392]	; 117d4 <__assert_fail@plt+0x41c>
   11648:	mov	r1, fp
   1164c:	bl	14174 <_obstack_newchunk@@Base>
   11650:	ldr	r0, [r4, #12]
   11654:	b	115e4 <__assert_fail@plt+0x22c>
   11658:	ldr	r0, [pc, #372]	; 117d4 <__assert_fail@plt+0x41c>
   1165c:	mov	r1, #1
   11660:	bl	14174 <_obstack_newchunk@@Base>
   11664:	ldr	r0, [r4, #12]
   11668:	b	11610 <__assert_fail@plt+0x258>
   1166c:	mov	r1, r0
   11670:	ldr	r0, [pc, #404]	; 1180c <__assert_fail@plt+0x454>
   11674:	bl	1110c <printf@plt>
   11678:	b	1156c <__assert_fail@plt+0x1b4>
   1167c:	ldr	r2, [pc, #396]	; 11810 <__assert_fail@plt+0x458>
   11680:	mov	r0, #1
   11684:	bl	111e4 <error@plt>
   11688:	b	114bc <__assert_fail@plt+0x104>
   1168c:	mov	r1, #1
   11690:	ldr	r0, [pc, #316]	; 117d4 <__assert_fail@plt+0x41c>
   11694:	bl	14174 <_obstack_newchunk@@Base>
   11698:	ldr	r3, [r4, #12]
   1169c:	b	114cc <__assert_fail@plt+0x114>
   116a0:	mov	r1, #1
   116a4:	mov	r0, r4
   116a8:	bl	14174 <_obstack_newchunk@@Base>
   116ac:	ldr	r3, [r4, #12]
   116b0:	b	11448 <__assert_fail@plt+0x90>
   116b4:	ldr	r1, [pc, #344]	; 11814 <__assert_fail@plt+0x45c>
   116b8:	mov	r0, r5
   116bc:	bl	12034 <__assert_fail@plt+0xc7c>
   116c0:	cmp	r0, #0
   116c4:	beq	1171c <__assert_fail@plt+0x364>
   116c8:	ldr	r3, [r7, #12]
   116cc:	cmp	r3, #0
   116d0:	bne	117c8 <__assert_fail@plt+0x410>
   116d4:	mov	r1, #0
   116d8:	ldr	r0, [pc, #312]	; 11818 <__assert_fail@plt+0x460>
   116dc:	bl	126bc <__assert_fail@plt+0x1304>
   116e0:	ldr	r6, [pc, #272]	; 117f8 <__assert_fail@plt+0x440>
   116e4:	mov	r1, r5
   116e8:	str	r0, [r6]
   116ec:	bl	124bc <__assert_fail@plt+0x1104>
   116f0:	str	r0, [r7, #4]
   116f4:	ldr	r0, [r6]
   116f8:	bl	113a0 <close@plt>
   116fc:	ldr	r1, [r7, #4]
   11700:	cmp	r1, #0
   11704:	beq	1175c <__assert_fail@plt+0x3a4>
   11708:	ldr	r0, [pc, #268]	; 1181c <__assert_fail@plt+0x464>
   1170c:	bl	1110c <printf@plt>
   11710:	ldr	r3, [r7, #4]
   11714:	cmp	r3, #0
   11718:	bne	11534 <__assert_fail@plt+0x17c>
   1171c:	mov	r0, r5
   11720:	bl	120f8 <__assert_fail@plt+0xd40>
   11724:	str	r0, [r7, #4]
   11728:	ldrb	r3, [r0]
   1172c:	cmp	r3, #3
   11730:	ldrls	pc, [pc, r3, lsl #2]
   11734:	b	117ac <__assert_fail@plt+0x3f4>
   11738:	andeq	r1, r1, r4, ror r7
   1173c:	andeq	r1, r1, r8, asr #14
   11740:	andeq	r1, r1, r0, asr r7
   11744:	andeq	r1, r1, r4, ror #14
   11748:	ldr	r0, [pc, #208]	; 11820 <__assert_fail@plt+0x468>
   1174c:	bl	111fc <puts@plt>
   11750:	ldr	r0, [r7, #4]
   11754:	add	r0, r0, #1
   11758:	bl	111fc <puts@plt>
   1175c:	mov	r0, #0
   11760:	bl	1125c <exit@plt>
   11764:	ldr	r0, [pc, #184]	; 11824 <__assert_fail@plt+0x46c>
   11768:	bl	111fc <puts@plt>
   1176c:	mov	r0, #0
   11770:	bl	1125c <exit@plt>
   11774:	ldr	r0, [pc, #172]	; 11828 <__assert_fail@plt+0x470>
   11778:	bl	111f0 <getenv@plt>
   1177c:	cmp	r0, #0
   11780:	str	r0, [r7, #4]
   11784:	ldreq	r3, [pc, #140]	; 11818 <__assert_fail@plt+0x460>
   11788:	streq	r3, [r7, #4]
   1178c:	ldr	r3, [r7, #12]
   11790:	cmp	r3, #0
   11794:	beq	11530 <__assert_fail@plt+0x178>
   11798:	ldr	r1, [r7, #4]
   1179c:	ldr	r0, [pc, #136]	; 1182c <__assert_fail@plt+0x474>
   117a0:	bl	1110c <printf@plt>
   117a4:	ldr	r6, [pc, #76]	; 117f8 <__assert_fail@plt+0x440>
   117a8:	b	11534 <__assert_fail@plt+0x17c>
   117ac:	ldr	r3, [r7, #12]
   117b0:	cmp	r3, #0
   117b4:	beq	11530 <__assert_fail@plt+0x178>
   117b8:	mov	r1, r0
   117bc:	ldr	r0, [pc, #108]	; 11830 <__assert_fail@plt+0x478>
   117c0:	bl	1110c <printf@plt>
   117c4:	b	11530 <__assert_fail@plt+0x178>
   117c8:	ldr	r0, [pc, #100]	; 11834 <__assert_fail@plt+0x47c>
   117cc:	bl	111fc <puts@plt>
   117d0:	b	116d4 <__assert_fail@plt+0x31c>
   117d4:	andeq	r0, r3, ip, lsl #18
   117d8:	andeq	r3, r1, r4, lsl pc
   117dc:	andeq	r4, r1, ip, asr #27
   117e0:	andeq	r0, r3, ip, lsr r9
   117e4:	ldrdeq	r9, [r1], -ip
   117e8:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   117ec:	andeq	r9, r1, ip, lsl sp
   117f0:	ldrdeq	r0, [r3], -r8
   117f4:	andeq	r0, r3, r4, asr #17
   117f8:	andeq	r0, r3, r8, lsr r9
   117fc:	andeq	r9, r1, r0, lsl pc
   11800:	andeq	sp, r2, ip, lsl r1
   11804:	ldrdeq	r9, [r1], -ip
   11808:	strdeq	r2, [r1], -r4
   1180c:	andeq	r9, r1, ip, lsl pc
   11810:	strdeq	r9, [r1], -r4
   11814:	strdeq	r0, [r3], -r4
   11818:	andeq	r9, r1, r0, lsr lr
   1181c:	andeq	r9, r1, r4, asr #28
   11820:	muleq	r1, r4, lr
   11824:	ldrdeq	r9, [r1], -ip
   11828:	andeq	r9, r1, r8, ror #28
   1182c:	andeq	r9, r1, r8, ror lr
   11830:	strdeq	r9, [r1], -ip
   11834:	andeq	r9, r1, ip, lsl #28
   11838:	mov	fp, #0
   1183c:	mov	lr, #0
   11840:	pop	{r1}		; (ldr r1, [sp], #4)
   11844:	mov	r2, sp
   11848:	push	{r2}		; (str r2, [sp, #-4]!)
   1184c:	push	{r0}		; (str r0, [sp, #-4]!)
   11850:	ldr	ip, [pc, #16]	; 11868 <__assert_fail@plt+0x4b0>
   11854:	push	{ip}		; (str ip, [sp, #-4]!)
   11858:	ldr	r0, [pc, #12]	; 1186c <__assert_fail@plt+0x4b4>
   1185c:	ldr	r3, [pc, #12]	; 11870 <__assert_fail@plt+0x4b8>
   11860:	bl	11214 <__libc_start_main@plt>
   11864:	bl	11394 <abort@plt>
   11868:	andeq	r9, r1, r8, asr sl
   1186c:	andeq	r1, r1, r4, asr #7
   11870:	strdeq	r9, [r1], -r8
   11874:	ldr	r3, [pc, #20]	; 11890 <__assert_fail@plt+0x4d8>
   11878:	ldr	r2, [pc, #20]	; 11894 <__assert_fail@plt+0x4dc>
   1187c:	add	r3, pc, r3
   11880:	ldr	r2, [r3, r2]
   11884:	cmp	r2, #0
   11888:	bxeq	lr
   1188c:	b	11238 <__gmon_start__@plt>
   11890:	andeq	fp, r1, ip, ror r7
   11894:	andeq	r0, r0, r0, lsl r1
   11898:	ldr	r3, [pc, #28]	; 118bc <__assert_fail@plt+0x504>
   1189c:	ldr	r0, [pc, #28]	; 118c0 <__assert_fail@plt+0x508>
   118a0:	sub	r3, r3, r0
   118a4:	cmp	r3, #6
   118a8:	bxls	lr
   118ac:	ldr	r3, [pc, #16]	; 118c4 <__assert_fail@plt+0x50c>
   118b0:	cmp	r3, #0
   118b4:	bxeq	lr
   118b8:	bx	r3
   118bc:			; <UNDEFINED> instruction: 0x000308b3
   118c0:			; <UNDEFINED> instruction: 0x000308b0
   118c4:	andeq	r0, r0, r0
   118c8:	ldr	r1, [pc, #36]	; 118f4 <__assert_fail@plt+0x53c>
   118cc:	ldr	r0, [pc, #36]	; 118f8 <__assert_fail@plt+0x540>
   118d0:	sub	r1, r1, r0
   118d4:	asr	r1, r1, #2
   118d8:	add	r1, r1, r1, lsr #31
   118dc:	asrs	r1, r1, #1
   118e0:	bxeq	lr
   118e4:	ldr	r3, [pc, #16]	; 118fc <__assert_fail@plt+0x544>
   118e8:	cmp	r3, #0
   118ec:	bxeq	lr
   118f0:	bx	r3
   118f4:			; <UNDEFINED> instruction: 0x000308b0
   118f8:			; <UNDEFINED> instruction: 0x000308b0
   118fc:	andeq	r0, r0, r0
   11900:	push	{r4, lr}
   11904:	ldr	r4, [pc, #24]	; 11924 <__assert_fail@plt+0x56c>
   11908:	ldrb	r3, [r4]
   1190c:	cmp	r3, #0
   11910:	popne	{r4, pc}
   11914:	bl	11898 <__assert_fail@plt+0x4e0>
   11918:	mov	r3, #1
   1191c:	strb	r3, [r4]
   11920:	pop	{r4, pc}
   11924:	andeq	r0, r3, r0, asr #17
   11928:	ldr	r0, [pc, #40]	; 11958 <__assert_fail@plt+0x5a0>
   1192c:	ldr	r3, [r0]
   11930:	cmp	r3, #0
   11934:	bne	1193c <__assert_fail@plt+0x584>
   11938:	b	118c8 <__assert_fail@plt+0x510>
   1193c:	ldr	r3, [pc, #24]	; 1195c <__assert_fail@plt+0x5a4>
   11940:	cmp	r3, #0
   11944:	beq	11938 <__assert_fail@plt+0x580>
   11948:	push	{r4, lr}
   1194c:	blx	r3
   11950:	pop	{r4, lr}
   11954:	b	118c8 <__assert_fail@plt+0x510>
   11958:	andeq	ip, r2, r4, lsl pc
   1195c:	andeq	r0, r0, r0
   11960:	sub	r3, r0, #1
   11964:	cmp	r3, #126	; 0x7e
   11968:	bls	11974 <__assert_fail@plt+0x5bc>
   1196c:	mov	r0, #7
   11970:	bx	lr
   11974:	bic	r3, r0, #2
   11978:	cmp	r0, #113	; 0x71
   1197c:	cmpne	r3, #116	; 0x74
   11980:	push	{r4, r5, r6, lr}
   11984:	moveq	r2, #1
   11988:	ldreq	r3, [pc, #264]	; 11a98 <__assert_fail@plt+0x6e0>
   1198c:	ldr	r4, [pc, #264]	; 11a9c <__assert_fail@plt+0x6e4>
   11990:	mov	r6, r1
   11994:	streq	r2, [r3]
   11998:	ldr	r3, [r4, #12]
   1199c:	ldr	r2, [r4, #16]
   119a0:	mov	r5, r0
   119a4:	cmp	r2, r3
   119a8:	beq	11a68 <__assert_fail@plt+0x6b0>
   119ac:	add	r1, r3, #1
   119b0:	mov	r2, #45	; 0x2d
   119b4:	str	r1, [r4, #12]
   119b8:	strb	r2, [r3]
   119bc:	ldr	r3, [r4, #12]
   119c0:	ldr	r2, [r4, #16]
   119c4:	cmp	r2, r3
   119c8:	beq	11a54 <__assert_fail@plt+0x69c>
   119cc:	add	r2, r3, #1
   119d0:	cmp	r6, #0
   119d4:	str	r2, [r4, #12]
   119d8:	strb	r5, [r3]
   119dc:	beq	11a90 <__assert_fail@plt+0x6d8>
   119e0:	ldr	r3, [r4, #12]
   119e4:	ldr	r2, [r4, #16]
   119e8:	cmp	r2, r3
   119ec:	beq	11a7c <__assert_fail@plt+0x6c4>
   119f0:	add	r1, r3, #1
   119f4:	mov	r2, #32
   119f8:	str	r1, [r4, #12]
   119fc:	mov	r0, r6
   11a00:	strb	r2, [r3]
   11a04:	bl	11268 <strlen@plt>
   11a08:	ldr	r3, [r4, #16]
   11a0c:	mov	r5, r0
   11a10:	ldr	r0, [r4, #12]
   11a14:	sub	r3, r3, r0
   11a18:	cmp	r5, r3
   11a1c:	bhi	11a40 <__assert_fail@plt+0x688>
   11a20:	mov	r2, r5
   11a24:	mov	r1, r6
   11a28:	bl	1116c <memcpy@plt>
   11a2c:	ldr	r3, [r4, #12]
   11a30:	mov	r0, #0
   11a34:	add	r5, r3, r5
   11a38:	str	r5, [r4, #12]
   11a3c:	pop	{r4, r5, r6, pc}
   11a40:	ldr	r0, [pc, #84]	; 11a9c <__assert_fail@plt+0x6e4>
   11a44:	mov	r1, r5
   11a48:	bl	14174 <_obstack_newchunk@@Base>
   11a4c:	ldr	r0, [r4, #12]
   11a50:	b	11a20 <__assert_fail@plt+0x668>
   11a54:	mov	r1, #1
   11a58:	ldr	r0, [pc, #60]	; 11a9c <__assert_fail@plt+0x6e4>
   11a5c:	bl	14174 <_obstack_newchunk@@Base>
   11a60:	ldr	r3, [r4, #12]
   11a64:	b	119cc <__assert_fail@plt+0x614>
   11a68:	mov	r1, #1
   11a6c:	mov	r0, r4
   11a70:	bl	14174 <_obstack_newchunk@@Base>
   11a74:	ldr	r3, [r4, #12]
   11a78:	b	119ac <__assert_fail@plt+0x5f4>
   11a7c:	mov	r1, #1
   11a80:	ldr	r0, [pc, #20]	; 11a9c <__assert_fail@plt+0x6e4>
   11a84:	bl	14174 <_obstack_newchunk@@Base>
   11a88:	ldr	r3, [r4, #12]
   11a8c:	b	119f0 <__assert_fail@plt+0x638>
   11a90:	mov	r0, r6
   11a94:	pop	{r4, r5, r6, pc}
   11a98:	andeq	r0, r3, r4, asr #17
   11a9c:	andeq	r0, r3, ip, lsl #18
   11aa0:	sub	r0, r0, #72	; 0x48
   11aa4:	push	{r4, r5, r6, r7, r8, lr}
   11aa8:	mov	r6, r1
   11aac:	cmp	r0, #40	; 0x28
   11ab0:	ldrls	pc, [pc, r0, lsl #2]
   11ab4:	b	11c00 <__assert_fail@plt+0x848>
   11ab8:	andeq	r1, r1, ip, ror #23
   11abc:	andeq	r1, r1, r0, lsl #24
   11ac0:	andeq	r1, r1, r0, lsl #24
   11ac4:	andeq	r1, r1, r0, lsl #24
   11ac8:	andeq	r1, r1, r0, lsl #24
   11acc:	andeq	r1, r1, r0, lsl #24
   11ad0:	andeq	r1, r1, r0, lsl #24
   11ad4:	andeq	r1, r1, r0, lsl #24
   11ad8:	andeq	r1, r1, r0, lsl #24
   11adc:	andeq	r1, r1, r0, lsl #24
   11ae0:	andeq	r1, r1, r0, lsl #24
   11ae4:	andeq	r1, r1, r0, lsl #24
   11ae8:	andeq	r1, r1, r0, lsl #24
   11aec:	andeq	r1, r1, r0, lsl #24
   11af0:	ldrdeq	r1, [r1], -r8
   11af4:	andeq	r1, r1, r0, lsl #24
   11af8:	andeq	r1, r1, r0, lsl #24
   11afc:	andeq	r1, r1, r0, lsl #24
   11b00:	andeq	r1, r1, r0, lsl #24
   11b04:	andeq	r1, r1, r0, lsl #24
   11b08:	andeq	r1, r1, r0, lsl #24
   11b0c:	andeq	r1, r1, r0, lsl #24
   11b10:	andeq	r1, r1, r0, lsl #24
   11b14:	andeq	r1, r1, r0, lsl #24
   11b18:	andeq	r1, r1, r0, lsl #24
   11b1c:	andeq	r1, r1, r0, lsl #24
   11b20:	andeq	r1, r1, r0, lsl #24
   11b24:	andeq	r1, r1, r0, lsl #24
   11b28:	andeq	r1, r1, r0, lsl #24
   11b2c:	andeq	r1, r1, r0, lsl #24
   11b30:	andeq	r1, r1, r0, lsl #24
   11b34:	andeq	r1, r1, r0, lsl #24
   11b38:	andeq	r1, r1, ip, ror #22
   11b3c:	andeq	r1, r1, r0, lsl #24
   11b40:	andeq	r1, r1, r0, lsl #24
   11b44:	andeq	r1, r1, r0, lsl #24
   11b48:	andeq	r1, r1, r0, lsl #24
   11b4c:	andeq	r1, r1, r0, lsl #24
   11b50:	andeq	r1, r1, r0, lsl #24
   11b54:	andeq	r1, r1, r0, lsl #24
   11b58:	andeq	r1, r1, ip, asr fp
   11b5c:	ldr	r3, [pc, #164]	; 11c08 <__assert_fail@plt+0x850>
   11b60:	mov	r0, #0
   11b64:	str	r1, [r3, #8]
   11b68:	pop	{r4, r5, r6, r7, r8, pc}
   11b6c:	mov	r0, r1
   11b70:	bl	11268 <strlen@plt>
   11b74:	ldr	r7, [pc, #140]	; 11c08 <__assert_fail@plt+0x850>
   11b78:	add	r0, r0, #1
   11b7c:	bl	14810 <_obstack_memory_used@@Base+0x4dc>
   11b80:	str	r0, [r7, #4]
   11b84:	ldrb	r4, [r6]
   11b88:	mov	r5, r0
   11b8c:	cmp	r4, #58	; 0x3a
   11b90:	cmpne	r4, #0
   11b94:	beq	11bc0 <__assert_fail@plt+0x808>
   11b98:	bl	1122c <__ctype_tolower_loc@plt>
   11b9c:	add	r3, r6, #1
   11ba0:	ldr	r1, [r0]
   11ba4:	ldr	r2, [r1, r4, lsl #2]
   11ba8:	mov	r6, r3
   11bac:	ldrb	r4, [r3], #1
   11bb0:	strb	r2, [r5], #1
   11bb4:	cmp	r4, #0
   11bb8:	cmpne	r4, #58	; 0x3a
   11bbc:	bne	11ba4 <__assert_fail@plt+0x7ec>
   11bc0:	cmp	r4, #58	; 0x3a
   11bc4:	addeq	r6, r6, #1
   11bc8:	mov	r0, #0
   11bcc:	streq	r6, [r7, #8]
   11bd0:	strb	r0, [r5]
   11bd4:	pop	{r4, r5, r6, r7, r8, pc}
   11bd8:	ldr	r3, [pc, #40]	; 11c08 <__assert_fail@plt+0x850>
   11bdc:	mov	r2, #1
   11be0:	mov	r0, #0
   11be4:	str	r2, [r3, #12]
   11be8:	pop	{r4, r5, r6, r7, r8, pc}
   11bec:	ldr	r2, [pc, #24]	; 11c0c <__assert_fail@plt+0x854>
   11bf0:	mov	r3, #0
   11bf4:	mov	r0, r3
   11bf8:	str	r3, [r2]
   11bfc:	pop	{r4, r5, r6, r7, r8, pc}
   11c00:	mov	r0, #7
   11c04:	pop	{r4, r5, r6, r7, r8, pc}
   11c08:	andeq	r0, r3, r4, asr #17
   11c0c:	andeq	sp, r2, ip, lsl r1
   11c10:	ldr	r3, [pc, #92]	; 11c74 <__assert_fail@plt+0x8bc>
   11c14:	push	{r4, r5, r6, lr}
   11c18:	cmp	r0, r3
   11c1c:	mov	r5, r0
   11c20:	mov	r4, r1
   11c24:	bgt	11c68 <__assert_fail@plt+0x8b0>
   11c28:	ldr	r0, [r4, #4]
   11c2c:	cmp	r0, #0
   11c30:	beq	11c60 <__assert_fail@plt+0x8a8>
   11c34:	add	r1, r4, #8
   11c38:	ldrh	r3, [r1, #-8]
   11c3c:	cmp	r5, r3
   11c40:	blt	11c50 <__assert_fail@plt+0x898>
   11c44:	ldrh	r3, [r1, #-6]
   11c48:	cmp	r5, r3
   11c4c:	pople	{r4, r5, r6, pc}
   11c50:	add	r1, r1, #8
   11c54:	ldr	r0, [r1, #-4]
   11c58:	cmp	r0, #0
   11c5c:	bne	11c38 <__assert_fail@plt+0x880>
   11c60:	ldr	r0, [pc, #16]	; 11c78 <__assert_fail@plt+0x8c0>
   11c64:	pop	{r4, r5, r6, pc}
   11c68:	ldr	r0, [pc, #12]	; 11c7c <__assert_fail@plt+0x8c4>
   11c6c:	bl	111fc <puts@plt>
   11c70:	b	11c28 <__assert_fail@plt+0x870>
   11c74:	andeq	r1, r6, pc, asr #7
   11c78:	andeq	r9, r1, r8, ror #20
   11c7c:	andeq	r9, r1, r8, ror sl
   11c80:	push	{r4, r5, r6, r7, lr}
   11c84:	sub	sp, sp, #12
   11c88:	mov	r5, r0
   11c8c:	mov	r6, r1
   11c90:	mov	r0, r1
   11c94:	add	r1, sp, #4
   11c98:	bl	110e8 <inet_aton@plt>
   11c9c:	ldr	r4, [r5]
   11ca0:	cmp	r4, #0
   11ca4:	movne	r7, r0
   11ca8:	bne	11cbc <__assert_fail@plt+0x904>
   11cac:	b	11d2c <__assert_fail@plt+0x974>
   11cb0:	ldr	r4, [r5, #4]!
   11cb4:	cmp	r4, #0
   11cb8:	beq	11d2c <__assert_fail@plt+0x974>
   11cbc:	mov	r1, r6
   11cc0:	mov	r0, r4
   11cc4:	bl	110f4 <strcmp@plt>
   11cc8:	cmp	r0, #0
   11ccc:	beq	11d20 <__assert_fail@plt+0x968>
   11cd0:	cmp	r7, #0
   11cd4:	beq	11cb0 <__assert_fail@plt+0x8f8>
   11cd8:	mov	r0, r4
   11cdc:	bl	11370 <gethostbyname@plt>
   11ce0:	cmp	r0, #0
   11ce4:	beq	11cb0 <__assert_fail@plt+0x8f8>
   11ce8:	ldr	r2, [r0, #16]
   11cec:	ldr	r3, [r2]
   11cf0:	cmp	r3, #0
   11cf4:	beq	11cb0 <__assert_fail@plt+0x8f8>
   11cf8:	ldr	r3, [r3]
   11cfc:	ldr	r1, [sp, #4]
   11d00:	cmp	r3, r1
   11d04:	beq	11d20 <__assert_fail@plt+0x968>
   11d08:	ldr	r3, [r2, #4]!
   11d0c:	cmp	r3, #0
   11d10:	beq	11cb0 <__assert_fail@plt+0x8f8>
   11d14:	ldr	r3, [r3]
   11d18:	cmp	r3, r1
   11d1c:	bne	11d08 <__assert_fail@plt+0x950>
   11d20:	mov	r0, #1
   11d24:	add	sp, sp, #12
   11d28:	pop	{r4, r5, r6, r7, pc}
   11d2c:	mov	r0, #0
   11d30:	add	sp, sp, #12
   11d34:	pop	{r4, r5, r6, r7, pc}
   11d38:	push	{r4, r5, r6, r7, r8, lr}
   11d3c:	mov	r5, r0
   11d40:	mov	r0, r1
   11d44:	mov	r6, r2
   11d48:	mov	r7, r1
   11d4c:	bl	11268 <strlen@plt>
   11d50:	mov	r4, r0
   11d54:	mov	r0, r6
   11d58:	bl	11268 <strlen@plt>
   11d5c:	add	r0, r4, r0
   11d60:	add	r0, r0, #13
   11d64:	bl	14810 <_obstack_memory_used@@Base+0x4dc>
   11d68:	mov	r3, #0
   11d6c:	mov	r1, r5
   11d70:	mov	r4, r0
   11d74:	ldr	r0, [pc, #456]	; 11f44 <__assert_fail@plt+0xb8c>
   11d78:	strb	r3, [r4]
   11d7c:	bl	11c80 <__assert_fail@plt+0x8c8>
   11d80:	cmp	r0, #0
   11d84:	beq	11ed8 <__assert_fail@plt+0xb20>
   11d88:	mov	r0, r4
   11d8c:	bl	11268 <strlen@plt>
   11d90:	ldr	r3, [pc, #432]	; 11f48 <__assert_fail@plt+0xb90>
   11d94:	ldrb	r2, [r7]
   11d98:	cmp	r2, #0
   11d9c:	mov	ip, r0
   11da0:	ldm	r3!, {r0, r1}
   11da4:	add	r2, r4, ip
   11da8:	ldrb	r3, [r3]
   11dac:	str	r0, [r4, ip]
   11db0:	str	r1, [r2, #4]
   11db4:	strb	r3, [r2, #8]
   11db8:	bne	11dd0 <__assert_fail@plt+0xa18>
   11dbc:	mov	r1, r6
   11dc0:	mov	r0, r4
   11dc4:	bl	111cc <strcat@plt>
   11dc8:	mov	r0, r4
   11dcc:	pop	{r4, r5, r6, r7, r8, pc}
   11dd0:	mov	r8, #1
   11dd4:	mov	r1, r7
   11dd8:	mov	r0, r4
   11ddc:	bl	111cc <strcat@plt>
   11de0:	cmp	r8, #0
   11de4:	bne	11dbc <__assert_fail@plt+0xa04>
   11de8:	ldr	r1, [pc, #348]	; 11f4c <__assert_fail@plt+0xb94>
   11dec:	mov	r0, r5
   11df0:	bl	110f4 <strcmp@plt>
   11df4:	cmp	r0, #0
   11df8:	beq	11e9c <__assert_fail@plt+0xae4>
   11dfc:	ldr	r1, [pc, #332]	; 11f50 <__assert_fail@plt+0xb98>
   11e00:	mov	r0, r5
   11e04:	bl	110f4 <strcmp@plt>
   11e08:	cmp	r0, #0
   11e0c:	beq	11e9c <__assert_fail@plt+0xae4>
   11e10:	ldr	r1, [pc, #316]	; 11f54 <__assert_fail@plt+0xb9c>
   11e14:	mov	r0, r5
   11e18:	bl	110f4 <strcmp@plt>
   11e1c:	cmp	r0, #0
   11e20:	beq	11f18 <__assert_fail@plt+0xb60>
   11e24:	ldr	r1, [pc, #300]	; 11f58 <__assert_fail@plt+0xba0>
   11e28:	mov	r0, r5
   11e2c:	bl	110f4 <strcmp@plt>
   11e30:	cmp	r0, #0
   11e34:	bne	11e4c <__assert_fail@plt+0xa94>
   11e38:	mov	r1, #32
   11e3c:	mov	r0, r6
   11e40:	bl	11274 <strchr@plt>
   11e44:	cmp	r0, #0
   11e48:	beq	11f30 <__assert_fail@plt+0xb78>
   11e4c:	mov	r0, r5
   11e50:	ldr	r1, [pc, #260]	; 11f5c <__assert_fail@plt+0xba4>
   11e54:	bl	110f4 <strcmp@plt>
   11e58:	cmp	r0, #0
   11e5c:	bne	11dbc <__assert_fail@plt+0xa04>
   11e60:	ldr	r0, [pc, #248]	; 11f60 <__assert_fail@plt+0xba8>
   11e64:	bl	111f0 <getenv@plt>
   11e68:	cmp	r0, #0
   11e6c:	beq	11e84 <__assert_fail@plt+0xacc>
   11e70:	mov	r2, #2
   11e74:	ldr	r1, [pc, #232]	; 11f64 <__assert_fail@plt+0xbac>
   11e78:	bl	11388 <strncmp@plt>
   11e7c:	cmp	r0, #0
   11e80:	beq	11dbc <__assert_fail@plt+0xa04>
   11e84:	mov	r2, r6
   11e88:	ldr	r1, [pc, #216]	; 11f68 <__assert_fail@plt+0xbb0>
   11e8c:	mov	r0, r4
   11e90:	bl	11310 <sprintf@plt>
   11e94:	mov	r0, r4
   11e98:	pop	{r4, r5, r6, r7, r8, pc}
   11e9c:	mov	r2, #2
   11ea0:	ldr	r1, [pc, #196]	; 11f6c <__assert_fail@plt+0xbb4>
   11ea4:	mov	r0, r6
   11ea8:	bl	11298 <strncasecmp@plt>
   11eac:	cmp	r0, #0
   11eb0:	bne	11e10 <__assert_fail@plt+0xa58>
   11eb4:	ldrb	r3, [r6, #2]
   11eb8:	sub	r3, r3, #48	; 0x30
   11ebc:	cmp	r3, #9
   11ec0:	bhi	11e10 <__assert_fail@plt+0xa58>
   11ec4:	add	r2, r6, #2
   11ec8:	ldr	r1, [pc, #160]	; 11f70 <__assert_fail@plt+0xbb8>
   11ecc:	mov	r0, r4
   11ed0:	bl	11310 <sprintf@plt>
   11ed4:	b	11dc8 <__assert_fail@plt+0xa10>
   11ed8:	mov	r1, r5
   11edc:	ldr	r0, [pc, #144]	; 11f74 <__assert_fail@plt+0xbbc>
   11ee0:	bl	11c80 <__assert_fail@plt+0x8c8>
   11ee4:	cmp	r0, #0
   11ee8:	bne	11d88 <__assert_fail@plt+0x9d0>
   11eec:	ldrb	r3, [r7]
   11ef0:	cmp	r3, #0
   11ef4:	beq	11de8 <__assert_fail@plt+0xa30>
   11ef8:	ldr	r1, [pc, #84]	; 11f54 <__assert_fail@plt+0xb9c>
   11efc:	mov	r0, r5
   11f00:	bl	110f4 <strcmp@plt>
   11f04:	subs	r8, r0, #0
   11f08:	beq	11dd4 <__assert_fail@plt+0xa1c>
   11f0c:	ldr	r0, [pc, #100]	; 11f78 <__assert_fail@plt+0xbc0>
   11f10:	bl	111fc <puts@plt>
   11f14:	b	11de8 <__assert_fail@plt+0xa30>
   11f18:	mov	r2, r6
   11f1c:	ldr	r1, [pc, #88]	; 11f7c <__assert_fail@plt+0xbc4>
   11f20:	mov	r0, r4
   11f24:	bl	11310 <sprintf@plt>
   11f28:	mov	r0, r4
   11f2c:	pop	{r4, r5, r6, r7, r8, pc}
   11f30:	mov	r2, r6
   11f34:	ldr	r1, [pc, #68]	; 11f80 <__assert_fail@plt+0xbc8>
   11f38:	mov	r0, r4
   11f3c:	bl	11310 <sprintf@plt>
   11f40:	b	11dc8 <__assert_fail@plt+0xa10>
   11f44:	andeq	sp, r2, r0, lsr #2
   11f48:	andeq	r9, r1, r4, ror #22
   11f4c:	andeq	r9, r1, r8, ror #20
   11f50:	strdeq	r9, [r1], -r4
   11f54:	andeq	r9, r1, r8, lsr #21
   11f58:	andeq	r9, r1, r0, lsr #22
   11f5c:	andeq	r9, r1, r0, asr #22
   11f60:	andeq	r9, r1, r0, asr fp
   11f64:	andeq	r9, r1, r8, asr fp
   11f68:	andeq	r9, r1, ip, asr fp
   11f6c:	andeq	r9, r1, r4, lsl #22
   11f70:	andeq	r9, r1, r8, lsl #22
   11f74:	andeq	sp, r2, ip, asr r1
   11f78:			; <UNDEFINED> instruction: 0x00019abc
   11f7c:	andeq	r9, r1, r0, lsl fp
   11f80:	andeq	r9, r1, r4, lsr fp
   11f84:	b	113a0 <close@plt>
   11f88:	push	{r4, r5, r6, r7, r8, lr}
   11f8c:	ldrb	r3, [r0]
   11f90:	cmp	r3, #0
   11f94:	mov	r3, r0
   11f98:	beq	11fa8 <__assert_fail@plt+0xbf0>
   11f9c:	ldrb	r2, [r3, #1]!
   11fa0:	cmp	r2, #0
   11fa4:	bne	11f9c <__assert_fail@plt+0xbe4>
   11fa8:	ldrb	r2, [r1]
   11fac:	sub	r5, r3, #1
   11fb0:	mov	r4, r1
   11fb4:	cmp	r2, #0
   11fb8:	beq	11fc8 <__assert_fail@plt+0xc10>
   11fbc:	ldrb	r3, [r4, #1]!
   11fc0:	cmp	r3, #0
   11fc4:	bne	11fbc <__assert_fail@plt+0xc04>
   11fc8:	sub	r4, r4, #1
   11fcc:	cmp	r1, r4
   11fd0:	cmpls	r0, r5
   11fd4:	bhi	12024 <__assert_fail@plt+0xc6c>
   11fd8:	mov	r6, r1
   11fdc:	mov	r7, r0
   11fe0:	bl	1122c <__ctype_tolower_loc@plt>
   11fe4:	mov	r3, r5
   11fe8:	ldr	ip, [r0]
   11fec:	b	12010 <__assert_fail@plt+0xc58>
   11ff0:	cmp	r6, r4
   11ff4:	sub	r4, r4, #1
   11ff8:	beq	1202c <__assert_fail@plt+0xc74>
   11ffc:	cmp	r7, r3
   12000:	cmpls	r6, r4
   12004:	movls	r0, #1
   12008:	movhi	r0, #0
   1200c:	pophi	{r4, r5, r6, r7, r8, pc}
   12010:	ldrb	r1, [r3], #-1
   12014:	ldrb	r2, [r4]
   12018:	ldr	r1, [ip, r1, lsl #2]
   1201c:	cmp	r1, r2
   12020:	beq	11ff0 <__assert_fail@plt+0xc38>
   12024:	mov	r0, #0
   12028:	pop	{r4, r5, r6, r7, r8, pc}
   1202c:	mov	r0, #1
   12030:	pop	{r4, r5, r6, r7, r8, pc}
   12034:	push	{r4, r5, r6, lr}
   12038:	mov	r4, r1
   1203c:	ldr	r1, [r1]
   12040:	cmp	r1, #0
   12044:	beq	12078 <__assert_fail@plt+0xcc0>
   12048:	mov	r5, r0
   1204c:	b	1205c <__assert_fail@plt+0xca4>
   12050:	ldr	r1, [r4, #4]!
   12054:	cmp	r1, #0
   12058:	beq	12074 <__assert_fail@plt+0xcbc>
   1205c:	mov	r0, r5
   12060:	bl	11f88 <__assert_fail@plt+0xbd0>
   12064:	cmp	r0, #0
   12068:	beq	12050 <__assert_fail@plt+0xc98>
   1206c:	mov	r0, #1
   12070:	pop	{r4, r5, r6, pc}
   12074:	pop	{r4, r5, r6, pc}
   12078:	mov	r0, r1
   1207c:	pop	{r4, r5, r6, pc}
   12080:	cmp	r0, #0
   12084:	beq	120ec <__assert_fail@plt+0xd34>
   12088:	push	{lr}		; (str lr, [sp, #-4]!)
   1208c:	sub	sp, sp, #28
   12090:	add	r2, sp, #20
   12094:	add	r3, sp, #16
   12098:	str	r2, [sp, #4]
   1209c:	str	r3, [sp]
   120a0:	add	r2, sp, #8
   120a4:	add	r3, sp, #12
   120a8:	ldr	r1, [pc, #68]	; 120f4 <__assert_fail@plt+0xd3c>
   120ac:	bl	11304 <sscanf@plt>
   120b0:	cmp	r0, #4
   120b4:	movne	r0, #0
   120b8:	beq	120c4 <__assert_fail@plt+0xd0c>
   120bc:	add	sp, sp, #28
   120c0:	pop	{pc}		; (ldr pc, [sp], #4)
   120c4:	ldr	r0, [sp, #12]
   120c8:	ldr	r3, [sp, #8]
   120cc:	ldr	r2, [sp, #16]
   120d0:	lsl	r0, r0, #16
   120d4:	add	r0, r0, r3, lsl #24
   120d8:	ldr	r3, [sp, #20]
   120dc:	add	r0, r0, r2, lsl #8
   120e0:	add	r0, r0, r3
   120e4:	add	sp, sp, #28
   120e8:	pop	{pc}		; (ldr pc, [sp], #4)
   120ec:	mov	r0, #0
   120f0:	bx	lr
   120f4:	andeq	r9, r1, r0, ror fp
   120f8:	ldrb	r3, [r0]
   120fc:	cmp	r3, #0
   12100:	beq	12218 <__assert_fail@plt+0xe60>
   12104:	push	{r4, r5, r6, r7, r8, lr}
   12108:	mov	r4, r0
   1210c:	sub	sp, sp, #8
   12110:	b	12120 <__assert_fail@plt+0xd68>
   12114:	ldrb	r3, [r4, #2]!
   12118:	cmp	r3, #0
   1211c:	beq	1214c <__assert_fail@plt+0xd94>
   12120:	ldrb	r3, [r4, #1]
   12124:	cmp	r3, #32
   12128:	beq	12114 <__assert_fail@plt+0xd5c>
   1212c:	mov	r1, #64	; 0x40
   12130:	mov	r0, r4
   12134:	bl	11274 <strchr@plt>
   12138:	subs	r5, r0, #0
   1213c:	beq	12158 <__assert_fail@plt+0xda0>
   12140:	ldr	r0, [pc, #728]	; 12420 <__assert_fail@plt+0x1068>
   12144:	add	sp, sp, #8
   12148:	pop	{r4, r5, r6, r7, r8, pc}
   1214c:	ldr	r0, [pc, #720]	; 12424 <__assert_fail@plt+0x106c>
   12150:	add	sp, sp, #8
   12154:	pop	{r4, r5, r6, r7, r8, pc}
   12158:	ldr	r1, [pc, #712]	; 12428 <__assert_fail@plt+0x1070>
   1215c:	mov	r0, r4
   12160:	bl	11340 <strpbrk@plt>
   12164:	cmp	r0, #0
   12168:	beq	12220 <__assert_fail@plt+0xe68>
   1216c:	mov	r1, #58	; 0x3a
   12170:	mov	r0, r4
   12174:	bl	11274 <strchr@plt>
   12178:	cmp	r0, #0
   1217c:	beq	12288 <__assert_fail@plt+0xed0>
   12180:	add	r3, sp, #8
   12184:	mov	r0, r4
   12188:	str	r5, [r3, #-4]!
   1218c:	mov	r2, sp
   12190:	ldr	r1, [pc, #660]	; 1242c <__assert_fail@plt+0x1074>
   12194:	str	r5, [sp]
   12198:	bl	11304 <sscanf@plt>
   1219c:	cmp	r0, #0
   121a0:	beq	12140 <__assert_fail@plt+0xd88>
   121a4:	ldr	r3, [pc, #644]	; 12430 <__assert_fail@plt+0x1078>
   121a8:	ldr	r2, [sp]
   121ac:	ldrh	ip, [sp, #4]
   121b0:	ldr	r0, [r3, #328]	; 0x148
   121b4:	cmp	r0, #0
   121b8:	orr	ip, ip, r2, lsl #16
   121bc:	beq	12200 <__assert_fail@plt+0xe48>
   121c0:	ldr	r2, [r3, #324]	; 0x144
   121c4:	ldr	r1, [r3, #320]	; 0x140
   121c8:	and	r2, r2, ip
   121cc:	cmp	r1, r2
   121d0:	beq	12144 <__assert_fail@plt+0xd8c>
   121d4:	add	r3, r3, #320	; 0x140
   121d8:	b	121f0 <__assert_fail@plt+0xe38>
   121dc:	ldr	r2, [r2, #16]
   121e0:	ldr	r1, [r3, #12]!
   121e4:	and	r2, r2, ip
   121e8:	cmp	r2, r1
   121ec:	beq	12144 <__assert_fail@plt+0xd8c>
   121f0:	ldr	r0, [r3, #20]
   121f4:	mov	r2, r3
   121f8:	cmp	r0, #0
   121fc:	bne	121dc <__assert_fail@plt+0xe24>
   12200:	ldr	r3, [pc, #556]	; 12434 <__assert_fail@plt+0x107c>
   12204:	ldr	r3, [r3, #12]
   12208:	cmp	r3, #0
   1220c:	bne	122dc <__assert_fail@plt+0xf24>
   12210:	ldr	r0, [pc, #544]	; 12438 <__assert_fail@plt+0x1080>
   12214:	b	12144 <__assert_fail@plt+0xd8c>
   12218:	ldr	r0, [pc, #516]	; 12424 <__assert_fail@plt+0x106c>
   1221c:	bx	lr
   12220:	ldrb	r3, [r4]
   12224:	mov	r5, r4
   12228:	cmp	r3, #0
   1222c:	beq	1223c <__assert_fail@plt+0xe84>
   12230:	ldrb	r3, [r5, #1]!
   12234:	cmp	r3, #0
   12238:	bne	12230 <__assert_fail@plt+0xe78>
   1223c:	ldr	r1, [pc, #504]	; 1243c <__assert_fail@plt+0x1084>
   12240:	mov	r2, #2
   12244:	mov	r0, r4
   12248:	bl	11298 <strncasecmp@plt>
   1224c:	subs	r1, r0, #0
   12250:	bne	12268 <__assert_fail@plt+0xeb0>
   12254:	ldrb	r3, [r4, #2]
   12258:	sub	r2, r3, #48	; 0x30
   1225c:	cmp	r3, #32
   12260:	cmpne	r2, #9
   12264:	bls	1238c <__assert_fail@plt+0xfd4>
   12268:	sub	r0, r5, #2
   1226c:	mov	r2, #2
   12270:	ldr	r1, [pc, #456]	; 12440 <__assert_fail@plt+0x1088>
   12274:	bl	11298 <strncasecmp@plt>
   12278:	cmp	r0, #0
   1227c:	bne	12140 <__assert_fail@plt+0xd88>
   12280:	ldr	r0, [pc, #444]	; 12444 <__assert_fail@plt+0x108c>
   12284:	b	12144 <__assert_fail@plt+0xd8c>
   12288:	mov	r0, r4
   1228c:	bl	12080 <__assert_fail@plt+0xcc8>
   12290:	subs	r5, r0, #0
   12294:	bne	122ec <__assert_fail@plt+0xf34>
   12298:	ldr	r7, [pc, #400]	; 12430 <__assert_fail@plt+0x1078>
   1229c:	ldr	r1, [r7, #608]	; 0x260
   122a0:	cmp	r1, #0
   122a4:	addne	r6, r7, #608	; 0x260
   122a8:	bne	122c0 <__assert_fail@plt+0xf08>
   122ac:	b	1235c <__assert_fail@plt+0xfa4>
   122b0:	add	r5, r5, #2
   122b4:	ldr	r1, [r6, r5, lsl #2]
   122b8:	cmp	r1, #0
   122bc:	beq	1235c <__assert_fail@plt+0xfa4>
   122c0:	mov	r0, r4
   122c4:	bl	11f88 <__assert_fail@plt+0xbd0>
   122c8:	cmp	r0, #0
   122cc:	beq	122b0 <__assert_fail@plt+0xef8>
   122d0:	add	r5, r7, r5, lsl #2
   122d4:	ldr	r0, [r5, #612]	; 0x264
   122d8:	b	12144 <__assert_fail@plt+0xd8c>
   122dc:	ldr	r0, [pc, #356]	; 12448 <__assert_fail@plt+0x1090>
   122e0:	bl	111fc <puts@plt>
   122e4:	ldr	r0, [pc, #332]	; 12438 <__assert_fail@plt+0x1080>
   122e8:	b	12144 <__assert_fail@plt+0xd8c>
   122ec:	ldr	r2, [pc, #316]	; 12430 <__assert_fail@plt+0x1078>
   122f0:	ldr	r0, [r2, #2608]	; 0xa30
   122f4:	cmp	r0, #0
   122f8:	beq	1233c <__assert_fail@plt+0xf84>
   122fc:	ldr	r3, [r2, #2604]	; 0xa2c
   12300:	ldr	r2, [r2, #2600]	; 0xa28
   12304:	and	r3, r3, r5
   12308:	cmp	r2, r3
   1230c:	beq	12144 <__assert_fail@plt+0xd8c>
   12310:	ldr	r3, [pc, #308]	; 1244c <__assert_fail@plt+0x1094>
   12314:	b	1232c <__assert_fail@plt+0xf74>
   12318:	ldr	r2, [r2, #16]
   1231c:	ldr	r1, [r3, #12]!
   12320:	and	r2, r2, r5
   12324:	cmp	r2, r1
   12328:	beq	12144 <__assert_fail@plt+0xd8c>
   1232c:	ldr	r0, [r3, #20]
   12330:	mov	r2, r3
   12334:	cmp	r0, #0
   12338:	bne	12318 <__assert_fail@plt+0xf60>
   1233c:	ldr	r3, [pc, #240]	; 12434 <__assert_fail@plt+0x107c>
   12340:	ldr	r3, [r3, #12]
   12344:	cmp	r3, #0
   12348:	beq	12210 <__assert_fail@plt+0xe58>
   1234c:	ldr	r0, [pc, #252]	; 12450 <__assert_fail@plt+0x1098>
   12350:	bl	111fc <puts@plt>
   12354:	ldr	r0, [pc, #220]	; 12438 <__assert_fail@plt+0x1080>
   12358:	b	12144 <__assert_fail@plt+0xd8c>
   1235c:	mov	r1, #46	; 0x2e
   12360:	mov	r0, r4
   12364:	bl	11274 <strchr@plt>
   12368:	cmp	r0, #0
   1236c:	beq	123a4 <__assert_fail@plt+0xfec>
   12370:	ldr	r3, [pc, #188]	; 12434 <__assert_fail@plt+0x107c>
   12374:	ldr	r3, [r3, #12]
   12378:	cmp	r3, #0
   1237c:	beq	12140 <__assert_fail@plt+0xd88>
   12380:	ldr	r0, [pc, #204]	; 12454 <__assert_fail@plt+0x109c>
   12384:	bl	111fc <puts@plt>
   12388:	b	12140 <__assert_fail@plt+0xd88>
   1238c:	add	r0, r4, #2
   12390:	mov	r2, #10
   12394:	bl	11100 <strtol@plt>
   12398:	ldr	r1, [pc, #184]	; 12458 <__assert_fail@plt+0x10a0>
   1239c:	bl	11c10 <__assert_fail@plt+0x858>
   123a0:	b	12144 <__assert_fail@plt+0xd8c>
   123a4:	ldr	r6, [pc, #176]	; 1245c <__assert_fail@plt+0x10a4>
   123a8:	ldr	r7, [r6, #-3052]	; 0xfffff414
   123ac:	cmp	r7, #0
   123b0:	beq	12400 <__assert_fail@plt+0x1048>
   123b4:	sub	r8, r6, #3040	; 0xbe0
   123b8:	mov	r5, r0
   123bc:	sub	r8, r8, #12
   123c0:	b	123d4 <__assert_fail@plt+0x101c>
   123c4:	add	r5, r5, #2
   123c8:	ldr	r7, [r8, r5, lsl #2]
   123cc:	cmp	r7, #0
   123d0:	beq	12400 <__assert_fail@plt+0x1048>
   123d4:	mov	r0, r7
   123d8:	bl	11268 <strlen@plt>
   123dc:	mov	r1, r7
   123e0:	mov	r2, r0
   123e4:	mov	r0, r4
   123e8:	bl	11298 <strncasecmp@plt>
   123ec:	cmp	r0, #0
   123f0:	bne	123c4 <__assert_fail@plt+0x100c>
   123f4:	add	r5, r6, r5, lsl #2
   123f8:	ldr	r0, [r5, #-3048]	; 0xfffff418
   123fc:	b	12144 <__assert_fail@plt+0xd8c>
   12400:	ldr	r3, [pc, #44]	; 12434 <__assert_fail@plt+0x107c>
   12404:	ldr	r3, [r3, #12]
   12408:	cmp	r3, #0
   1240c:	beq	12210 <__assert_fail@plt+0xe58>
   12410:	ldr	r0, [pc, #72]	; 12460 <__assert_fail@plt+0x10a8>
   12414:	bl	111fc <puts@plt>
   12418:	ldr	r0, [pc, #24]	; 12438 <__assert_fail@plt+0x1080>
   1241c:	b	12144 <__assert_fail@plt+0xd8c>
   12420:	andeq	r9, r1, r0, lsr pc
   12424:	andeq	r9, r1, ip, ror fp
   12428:	andeq	r9, r1, ip, lsl #23
   1242c:	muleq	r1, r8, fp
   12430:	andeq	sp, r2, ip, lsl r1
   12434:	andeq	r0, r3, r4, asr #17
   12438:	andeq	r9, r1, r8, ror #20
   1243c:	muleq	r1, r0, fp
   12440:	muleq	r1, r4, fp
   12444:	andeq	r9, r1, r0, asr #22
   12448:	andeq	r9, r1, r0, lsr #23
   1244c:	andeq	sp, r2, r4, asr #22
   12450:	strdeq	r9, [r1], -ip
   12454:	muleq	r1, r8, ip
   12458:	andeq	sp, r2, ip, ror r1
   1245c:	andeq	r1, r3, ip, lsl #2
   12460:	andeq	r9, r1, r4, asr ip
   12464:	ldr	r4, [pc, #72]	; 124b4 <__assert_fail@plt+0x10fc>
   12468:	push	{r0, r1, r2, r3}
   1246c:	push	{lr}		; (str lr, [sp, #-4]!)
   12470:	sub	sp, sp, #12
   12474:	add	r3, sp, #20
   12478:	mov	r2, r3
   1247c:	ldr	r1, [sp, #16]
   12480:	ldr	r0, [r4]
   12484:	str	r3, [sp, #4]
   12488:	bl	112ec <vfprintf@plt>
   1248c:	bl	1128c <__errno_location@plt>
   12490:	ldr	r4, [r4]
   12494:	ldr	r0, [r0]
   12498:	bl	11220 <strerror@plt>
   1249c:	ldr	r1, [pc, #20]	; 124b8 <__assert_fail@plt+0x1100>
   124a0:	mov	r2, r0
   124a4:	mov	r0, r4
   124a8:	bl	11280 <fprintf@plt>
   124ac:	mov	r0, #1
   124b0:	bl	1125c <exit@plt>
   124b4:			; <UNDEFINED> instruction: 0x000308b8
   124b8:	ldrdeq	r9, [r1], -r4
   124bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124c0:	mov	r4, r0
   124c4:	sub	sp, sp, #116	; 0x74
   124c8:	mov	r0, r1
   124cc:	mov	r5, r1
   124d0:	bl	11268 <strlen@plt>
   124d4:	add	r0, r0, #4
   124d8:	bl	14810 <_obstack_memory_used@@Base+0x4dc>
   124dc:	mov	r3, #61	; 0x3d
   124e0:	mov	r1, r5
   124e4:	mov	sl, r0
   124e8:	strb	r3, [r0], #1
   124ec:	bl	111d8 <strcpy@plt>
   124f0:	mov	r0, sl
   124f4:	bl	11268 <strlen@plt>
   124f8:	ldr	r2, [pc, #356]	; 12664 <__assert_fail@plt+0x12ac>
   124fc:	ldr	r1, [pc, #356]	; 12668 <__assert_fail@plt+0x12b0>
   12500:	ldrh	lr, [r2]
   12504:	ldrb	r2, [r2, #2]
   12508:	mov	r3, r0
   1250c:	add	ip, sl, r0
   12510:	strh	lr, [sl, r3]
   12514:	mov	r0, r4
   12518:	strb	r2, [ip, #2]
   1251c:	bl	110b8 <fdopen@plt>
   12520:	mov	r5, r0
   12524:	mov	r0, sl
   12528:	bl	11268 <strlen@plt>
   1252c:	mov	r1, sl
   12530:	mov	r2, r0
   12534:	mov	r0, r4
   12538:	bl	112bc <write@plt>
   1253c:	cmp	r0, #0
   12540:	blt	1265c <__assert_fail@plt+0x12a4>
   12544:	mov	r4, #0
   12548:	mov	fp, r4
   1254c:	mov	r6, #100	; 0x64
   12550:	mov	r9, #16
   12554:	ldr	r8, [pc, #272]	; 1266c <__assert_fail@plt+0x12b4>
   12558:	ldr	r7, [pc, #272]	; 12670 <__assert_fail@plt+0x12b8>
   1255c:	b	1256c <__assert_fail@plt+0x11b4>
   12560:	ldr	r1, [r7]
   12564:	add	r0, sp, #12
   12568:	bl	1137c <fputs@plt>
   1256c:	mov	r2, r5
   12570:	mov	r1, r6
   12574:	add	r0, sp, #12
   12578:	bl	11148 <fgets@plt>
   1257c:	cmp	r0, #0
   12580:	beq	12628 <__assert_fail@plt+0x1270>
   12584:	mov	r2, r9
   12588:	mov	r1, r8
   1258c:	add	r0, sp, #12
   12590:	bl	11388 <strncmp@plt>
   12594:	cmp	r0, #0
   12598:	cmpeq	r4, #0
   1259c:	bne	12560 <__assert_fail@plt+0x11a8>
   125a0:	ldrb	r3, [sp, #12]
   125a4:	add	r0, sp, #12
   125a8:	cmp	r3, #58	; 0x3a
   125ac:	beq	125bc <__assert_fail@plt+0x1204>
   125b0:	ldrb	r3, [r0, #1]!
   125b4:	cmp	r3, #58	; 0x3a
   125b8:	bne	125b0 <__assert_fail@plt+0x11f8>
   125bc:	ldrb	r3, [r0, #1]
   125c0:	add	r2, r0, #1
   125c4:	cmp	r3, #32
   125c8:	bne	125d8 <__assert_fail@plt+0x1220>
   125cc:	ldrb	r3, [r2, #1]!
   125d0:	cmp	r3, #32
   125d4:	beq	125cc <__assert_fail@plt+0x1214>
   125d8:	mov	r0, r2
   125dc:	str	r2, [sp, #4]
   125e0:	bl	11268 <strlen@plt>
   125e4:	add	r0, r0, #1
   125e8:	bl	14810 <_obstack_memory_used@@Base+0x4dc>
   125ec:	ldr	r2, [sp, #4]
   125f0:	ldrb	r3, [r2]
   125f4:	cmp	r3, #13
   125f8:	cmpne	r3, #10
   125fc:	mov	r4, r0
   12600:	beq	1264c <__assert_fail@plt+0x1294>
   12604:	mov	r0, r2
   12608:	mov	r2, r4
   1260c:	strb	r3, [r2], #1
   12610:	ldrb	r3, [r0, #1]!
   12614:	cmp	r3, #10
   12618:	cmpne	r3, #13
   1261c:	bne	1260c <__assert_fail@plt+0x1254>
   12620:	strb	fp, [r2]
   12624:	b	12560 <__assert_fail@plt+0x11a8>
   12628:	mov	r0, r5
   1262c:	bl	11154 <ferror@plt>
   12630:	cmp	r0, #0
   12634:	bne	12654 <__assert_fail@plt+0x129c>
   12638:	mov	r0, sl
   1263c:	bl	13f14 <argp_parse@@Base+0xe98>
   12640:	mov	r0, r4
   12644:	add	sp, sp, #116	; 0x74
   12648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1264c:	mov	r2, r0
   12650:	b	12620 <__assert_fail@plt+0x1268>
   12654:	ldr	r0, [pc, #24]	; 12674 <__assert_fail@plt+0x12bc>
   12658:	bl	12464 <__assert_fail@plt+0x10ac>
   1265c:	ldr	r0, [pc, #20]	; 12678 <__assert_fail@plt+0x12c0>
   12660:	bl	12464 <__assert_fail@plt+0x10ac>
   12664:	ldrdeq	r9, [r1], -ip
   12668:	andeq	ip, r1, r8, rrx
   1266c:	andeq	r9, r1, r8, ror #25
   12670:			; <UNDEFINED> instruction: 0x000308bc
   12674:	strdeq	r9, [r1], -ip
   12678:	andeq	r9, r1, r0, ror #25
   1267c:	ldr	r4, [pc, #52]	; 126b8 <__assert_fail@plt+0x1300>
   12680:	push	{r0, r1, r2, r3}
   12684:	push	{lr}		; (str lr, [sp, #-4]!)
   12688:	sub	sp, sp, #12
   1268c:	add	r3, sp, #20
   12690:	mov	r2, r3
   12694:	ldr	r1, [sp, #16]
   12698:	ldr	r0, [r4]
   1269c:	str	r3, [sp, #4]
   126a0:	bl	112ec <vfprintf@plt>
   126a4:	ldr	r1, [r4]
   126a8:	mov	r0, #10
   126ac:	bl	112f8 <fputc@plt>
   126b0:	mov	r0, #1
   126b4:	bl	1125c <exit@plt>
   126b8:			; <UNDEFINED> instruction: 0x000308b8
   126bc:	push	{r4, r5, r6, lr}
   126c0:	sub	sp, sp, #40	; 0x28
   126c4:	mov	r4, r1
   126c8:	mov	r5, r0
   126cc:	mov	r2, #32
   126d0:	add	r0, sp, #8
   126d4:	mov	r1, #0
   126d8:	bl	112b0 <memset@plt>
   126dc:	mov	r3, #1
   126e0:	cmp	r4, #0
   126e4:	str	r3, [sp, #16]
   126e8:	beq	12768 <__assert_fail@plt+0x13b0>
   126ec:	add	r6, sp, #4
   126f0:	mov	r3, r6
   126f4:	add	r2, sp, #8
   126f8:	mov	r1, r4
   126fc:	mov	r0, r5
   12700:	bl	11358 <getaddrinfo@plt>
   12704:	cmp	r0, #0
   12708:	bne	1278c <__assert_fail@plt+0x13d4>
   1270c:	ldr	r5, [sp, #4]
   12710:	cmp	r5, #0
   12714:	beq	12760 <__assert_fail@plt+0x13a8>
   12718:	mov	r3, r5
   1271c:	ldmib	r3, {r0, r1, r2}
   12720:	bl	11364 <socket@plt>
   12724:	subs	r4, r0, #0
   12728:	blt	1274c <__assert_fail@plt+0x1394>
   1272c:	ldr	r3, [sp, #4]
   12730:	ldr	r2, [r3, #16]
   12734:	ldr	r1, [r3, #20]
   12738:	bl	113ac <connect@plt>
   1273c:	cmp	r0, #0
   12740:	beq	127b8 <__assert_fail@plt+0x1400>
   12744:	mov	r0, r4
   12748:	bl	113a0 <close@plt>
   1274c:	ldr	r3, [sp, #4]
   12750:	ldr	r3, [r3, #28]
   12754:	cmp	r3, #0
   12758:	str	r3, [sp, #4]
   1275c:	bne	1271c <__assert_fail@plt+0x1364>
   12760:	ldr	r0, [pc, #112]	; 127d8 <__assert_fail@plt+0x1420>
   12764:	bl	12464 <__assert_fail@plt+0x10ac>
   12768:	add	r6, sp, #4
   1276c:	mov	r3, r6
   12770:	add	r2, sp, #8
   12774:	ldr	r1, [pc, #96]	; 127dc <__assert_fail@plt+0x1424>
   12778:	mov	r0, r5
   1277c:	bl	11358 <getaddrinfo@plt>
   12780:	cmp	r0, #0
   12784:	beq	1270c <__assert_fail@plt+0x1354>
   12788:	ldr	r4, [pc, #80]	; 127e0 <__assert_fail@plt+0x1428>
   1278c:	mov	r3, r6
   12790:	add	r2, sp, #8
   12794:	mov	r1, r4
   12798:	mov	r0, r5
   1279c:	bl	11358 <getaddrinfo@plt>
   127a0:	cmp	r0, #0
   127a4:	beq	1270c <__assert_fail@plt+0x1354>
   127a8:	bl	1113c <gai_strerror@plt>
   127ac:	mov	r1, r0
   127b0:	ldr	r0, [pc, #44]	; 127e4 <__assert_fail@plt+0x142c>
   127b4:	bl	1267c <__assert_fail@plt+0x12c4>
   127b8:	ldr	r3, [sp, #4]
   127bc:	cmp	r3, #0
   127c0:	beq	12760 <__assert_fail@plt+0x13a8>
   127c4:	mov	r0, r5
   127c8:	bl	1134c <freeaddrinfo@plt>
   127cc:	mov	r0, r4
   127d0:	add	sp, sp, #40	; 0x28
   127d4:	pop	{r4, r5, r6, pc}
   127d8:	andeq	r9, r1, r4, lsr #26
   127dc:	andeq	r9, r1, ip, lsl sp
   127e0:	andeq	r9, r1, r4, lsl #26
   127e4:	andeq	r9, r1, ip, lsl #26
   127e8:	ldr	r3, [pc, #716]	; 12abc <__assert_fail@plt+0x1704>
   127ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127f0:	sub	sp, sp, #1504	; 0x5e0
   127f4:	sub	sp, sp, #12
   127f8:	mov	r5, r1
   127fc:	ldr	r1, [pc, #700]	; 12ac0 <__assert_fail@plt+0x1708>
   12800:	ldr	r4, [r3]
   12804:	mov	r6, r0
   12808:	bl	110b8 <fdopen@plt>
   1280c:	mov	r7, r0
   12810:	mov	r0, r5
   12814:	bl	11268 <strlen@plt>
   12818:	mov	r1, r5
   1281c:	mov	r2, r0
   12820:	mov	r0, r6
   12824:	bl	112bc <write@plt>
   12828:	cmp	r0, #0
   1282c:	blt	12ab4 <__assert_fail@plt+0x16fc>
   12830:	ldr	r8, [pc, #652]	; 12ac4 <__assert_fail@plt+0x170c>
   12834:	ldr	r9, [pc, #652]	; 12ac8 <__assert_fail@plt+0x1710>
   12838:	ldr	fp, [pc, #652]	; 12acc <__assert_fail@plt+0x1714>
   1283c:	ldr	sl, [pc, #652]	; 12ad0 <__assert_fail@plt+0x1718>
   12840:	sub	r6, r8, #4
   12844:	mov	r5, #0
   12848:	add	r8, r8, #2976	; 0xba0
   1284c:	mov	r2, r7
   12850:	mov	r1, #200	; 0xc8
   12854:	add	r0, sp, #32
   12858:	bl	11148 <fgets@plt>
   1285c:	cmp	r0, #0
   12860:	beq	12a74 <__assert_fail@plt+0x16bc>
   12864:	cmp	r4, #1
   12868:	beq	128d0 <__assert_fail@plt+0x1518>
   1286c:	cmp	r4, #0
   12870:	bne	12938 <__assert_fail@plt+0x1580>
   12874:	ldr	r4, [r8, #-2980]	; 0xfffff45c
   12878:	cmp	r4, #0
   1287c:	beq	12934 <__assert_fail@plt+0x157c>
   12880:	mov	r5, #0
   12884:	b	12898 <__assert_fail@plt+0x14e0>
   12888:	add	r5, r5, #2
   1288c:	ldr	r4, [r6, r5, lsl #2]
   12890:	cmp	r4, #0
   12894:	beq	12938 <__assert_fail@plt+0x1580>
   12898:	mov	r0, r4
   1289c:	bl	11268 <strlen@plt>
   128a0:	mov	r1, r4
   128a4:	mov	r2, r0
   128a8:	add	r0, sp, #32
   128ac:	bl	11388 <strncmp@plt>
   128b0:	cmp	r0, #0
   128b4:	bne	12888 <__assert_fail@plt+0x14d0>
   128b8:	mov	r2, r7
   128bc:	mov	r1, #200	; 0xc8
   128c0:	add	r0, sp, #32
   128c4:	bl	11148 <fgets@plt>
   128c8:	cmp	r0, #0
   128cc:	beq	1291c <__assert_fail@plt+0x1564>
   128d0:	add	r5, r5, #1
   128d4:	mov	r4, #200	; 0xc8
   128d8:	add	r5, r8, r5, lsl #2
   128dc:	ldr	r1, [r5, #-2980]	; 0xfffff45c
   128e0:	mov	r0, r1
   128e4:	str	r1, [sp, #12]
   128e8:	bl	11268 <strlen@plt>
   128ec:	ldr	r1, [sp, #12]
   128f0:	mov	r2, r0
   128f4:	add	r0, sp, #32
   128f8:	bl	11388 <strncmp@plt>
   128fc:	mov	r2, r7
   12900:	cmp	r0, #0
   12904:	beq	12a44 <__assert_fail@plt+0x168c>
   12908:	mov	r1, r4
   1290c:	add	r0, sp, #32
   12910:	bl	11148 <fgets@plt>
   12914:	cmp	r0, #0
   12918:	bne	128dc <__assert_fail@plt+0x1524>
   1291c:	mov	r0, r7
   12920:	bl	11154 <ferror@plt>
   12924:	cmp	r0, #0
   12928:	beq	12aac <__assert_fail@plt+0x16f4>
   1292c:	ldr	r0, [pc, #416]	; 12ad4 <__assert_fail@plt+0x171c>
   12930:	bl	12464 <__assert_fail@plt+0x10ac>
   12934:	mov	r5, r4
   12938:	mov	r2, #10
   1293c:	mov	r1, r9
   12940:	add	r0, sp, #32
   12944:	bl	11388 <strncmp@plt>
   12948:	cmp	r0, #0
   1294c:	beq	129b0 <__assert_fail@plt+0x15f8>
   12950:	ldrb	r2, [sp, #32]
   12954:	cmp	r2, #13
   12958:	bls	12998 <__assert_fail@plt+0x15e0>
   1295c:	add	r0, sp, #32
   12960:	ldr	r2, [pc, #368]	; 12ad8 <__assert_fail@plt+0x1720>
   12964:	ldrb	r3, [r0, #1]!
   12968:	cmp	r3, #13
   1296c:	bhi	12964 <__assert_fail@plt+0x15ac>
   12970:	mvn	r3, r2, lsr r3
   12974:	tst	r3, #1
   12978:	bne	12964 <__assert_fail@plt+0x15ac>
   1297c:	mov	r3, #0
   12980:	strb	r3, [r0]
   12984:	add	r2, sp, #32
   12988:	mov	r1, sl
   1298c:	ldr	r0, [fp]
   12990:	bl	11280 <fprintf@plt>
   12994:	b	1284c <__assert_fail@plt+0x1494>
   12998:	ldr	r3, [pc, #312]	; 12ad8 <__assert_fail@plt+0x1720>
   1299c:	add	r0, sp, #32
   129a0:	mvn	r3, r3, lsr r2
   129a4:	tst	r3, #1
   129a8:	beq	1297c <__assert_fail@plt+0x15c4>
   129ac:	b	12960 <__assert_fail@plt+0x15a8>
   129b0:	add	r1, sp, #488	; 0x1e8
   129b4:	add	r3, sp, #16
   129b8:	str	r1, [sp]
   129bc:	add	r2, sp, #232	; 0xe8
   129c0:	ldr	r1, [pc, #276]	; 12adc <__assert_fail@plt+0x1724>
   129c4:	add	r0, sp, #32
   129c8:	str	r3, [sp, #12]
   129cc:	bl	11304 <sscanf@plt>
   129d0:	cmp	r0, #3
   129d4:	bne	12950 <__assert_fail@plt+0x1598>
   129d8:	ldr	r3, [pc, #256]	; 12ae0 <__assert_fail@plt+0x1728>
   129dc:	ldr	r3, [r3, #12]
   129e0:	cmp	r3, #0
   129e4:	bne	12a98 <__assert_fail@plt+0x16e0>
   129e8:	add	r0, sp, #488	; 0x1e8
   129ec:	bl	11268 <strlen@plt>
   129f0:	ldr	r2, [pc, #236]	; 12ae4 <__assert_fail@plt+0x172c>
   129f4:	add	r1, sp, #488	; 0x1e8
   129f8:	ldrh	lr, [r2]
   129fc:	ldrb	r2, [r2, #2]
   12a00:	add	ip, r1, r0
   12a04:	mov	r3, r0
   12a08:	ldr	r1, [sp, #12]
   12a0c:	str	r2, [sp, #12]
   12a10:	add	r2, sp, #488	; 0x1e8
   12a14:	add	r0, sp, #232	; 0xe8
   12a18:	strh	lr, [r2, r3]
   12a1c:	ldrb	r3, [sp, #12]
   12a20:	strb	r3, [ip, #2]
   12a24:	bl	126bc <__assert_fail@plt+0x1304>
   12a28:	add	r1, sp, #488	; 0x1e8
   12a2c:	str	r0, [sp, #12]
   12a30:	bl	127e8 <__assert_fail@plt+0x1430>
   12a34:	ldr	r3, [sp, #12]
   12a38:	mov	r0, r3
   12a3c:	bl	113a0 <close@plt>
   12a40:	b	1284c <__assert_fail@plt+0x1494>
   12a44:	mov	r1, #200	; 0xc8
   12a48:	add	r0, sp, #32
   12a4c:	bl	11148 <fgets@plt>
   12a50:	cmp	r0, #0
   12a54:	bne	12874 <__assert_fail@plt+0x14bc>
   12a58:	mov	r0, r7
   12a5c:	bl	11154 <ferror@plt>
   12a60:	cmp	r0, #0
   12a64:	bne	1292c <__assert_fail@plt+0x1574>
   12a68:	add	sp, sp, #1504	; 0x5e0
   12a6c:	add	sp, sp, #12
   12a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a74:	mov	r0, r7
   12a78:	bl	11154 <ferror@plt>
   12a7c:	cmp	r0, #0
   12a80:	bne	1292c <__assert_fail@plt+0x1574>
   12a84:	cmp	r4, #1
   12a88:	beq	12aac <__assert_fail@plt+0x16f4>
   12a8c:	add	sp, sp, #1504	; 0x5e0
   12a90:	add	sp, sp, #12
   12a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a98:	add	r2, sp, #232	; 0xe8
   12a9c:	add	r1, sp, #488	; 0x1e8
   12aa0:	ldr	r0, [pc, #64]	; 12ae8 <__assert_fail@plt+0x1730>
   12aa4:	bl	1110c <printf@plt>
   12aa8:	b	129e8 <__assert_fail@plt+0x1630>
   12aac:	ldr	r0, [pc, #56]	; 12aec <__assert_fail@plt+0x1734>
   12ab0:	bl	1267c <__assert_fail@plt+0x12c4>
   12ab4:	ldr	r0, [pc, #52]	; 12af0 <__assert_fail@plt+0x1738>
   12ab8:	bl	12464 <__assert_fail@plt+0x10ac>
   12abc:	andeq	sp, r2, ip, lsl r1
   12ac0:	andeq	ip, r1, r8, rrx
   12ac4:	andeq	r0, r3, ip, ror #10
   12ac8:	andeq	r9, r1, ip, lsr #26
   12acc:			; <UNDEFINED> instruction: 0x000308bc
   12ad0:	strdeq	fp, [r1], -r0
   12ad4:	strdeq	r9, [r1], -ip
   12ad8:	andeq	r2, r0, r1, lsl #8
   12adc:	andeq	r9, r1, r8, lsr sp
   12ae0:	andeq	r0, r3, r4, asr #17
   12ae4:	ldrdeq	r9, [r1], -ip
   12ae8:	andeq	r9, r1, r8, ror #26
   12aec:	andeq	r9, r1, r8, lsl #27
   12af0:	andeq	r9, r1, r0, ror #25
   12af4:	ldr	r3, [pc, #24]	; 12b14 <__assert_fail@plt+0x175c>
   12af8:	push	{r4, lr}
   12afc:	mov	r4, r0
   12b00:	ldr	r0, [r3]
   12b04:	bl	113a0 <close@plt>
   12b08:	mov	r1, r4
   12b0c:	ldr	r0, [pc, #4]	; 12b18 <__assert_fail@plt+0x1760>
   12b10:	bl	1267c <__assert_fail@plt+0x12c4>
   12b14:	andeq	r0, r3, r8, lsr r9
   12b18:	andeq	r9, r1, r4, lsr pc
   12b1c:	ldr	r3, [r0]
   12b20:	push	{r4, r5, r6, lr}
   12b24:	cmp	r3, #0
   12b28:	ldr	r5, [r0, #16]
   12b2c:	beq	12b94 <__assert_fail@plt+0x17dc>
   12b30:	ldr	r0, [r1, #8]
   12b34:	mov	r2, #0
   12b38:	add	r0, r0, #1
   12b3c:	str	r0, [r1, #8]
   12b40:	b	12b48 <__assert_fail@plt+0x1790>
   12b44:	add	r2, r2, #1
   12b48:	add	r3, r3, #24
   12b4c:	ldr	r0, [r3, #-20]	; 0xffffffec
   12b50:	cmp	r0, #0
   12b54:	bne	12b44 <__assert_fail@plt+0x178c>
   12b58:	ldr	r0, [r3, #-24]	; 0xffffffe8
   12b5c:	cmp	r0, #0
   12b60:	bne	12b44 <__assert_fail@plt+0x178c>
   12b64:	ldr	r0, [r3, #-8]
   12b68:	cmp	r0, #0
   12b6c:	bne	12b44 <__assert_fail@plt+0x178c>
   12b70:	ldr	r0, [r3, #-4]
   12b74:	cmp	r0, #0
   12b78:	bne	12b44 <__assert_fail@plt+0x178c>
   12b7c:	ldm	r1, {r0, r3}
   12b80:	add	ip, r2, r2, lsl #1
   12b84:	add	r0, r0, ip
   12b88:	add	r2, r3, r2
   12b8c:	stm	r1, {r0, r2}
   12b90:	b	12ba8 <__assert_fail@plt+0x17f0>
   12b94:	ldr	r3, [r0, #4]
   12b98:	cmp	r3, #0
   12b9c:	ldrne	r3, [r1, #8]
   12ba0:	addne	r3, r3, #1
   12ba4:	strne	r3, [r1, #8]
   12ba8:	cmp	r5, #0
   12bac:	popeq	{r4, r5, r6, pc}
   12bb0:	ldr	r0, [r5]
   12bb4:	cmp	r0, #0
   12bb8:	popeq	{r4, r5, r6, pc}
   12bbc:	mov	r4, r1
   12bc0:	mov	r1, r4
   12bc4:	bl	12b1c <__assert_fail@plt+0x1764>
   12bc8:	ldr	r3, [r4, #12]
   12bcc:	ldr	r0, [r5, #16]!
   12bd0:	add	r3, r3, #1
   12bd4:	cmp	r0, #0
   12bd8:	str	r3, [r4, #12]
   12bdc:	bne	12bc0 <__assert_fail@plt+0x1808>
   12be0:	pop	{r4, r5, r6, pc}
   12be4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12be8:	sub	sp, sp, #36	; 0x24
   12bec:	ldr	sl, [r0]
   12bf0:	str	r0, [sp, #12]
   12bf4:	cmp	sl, #0
   12bf8:	str	r1, [sp, #16]
   12bfc:	str	r2, [sp, #20]
   12c00:	mov	r9, r3
   12c04:	ldr	r8, [r0, #16]
   12c08:	ldr	r7, [sp, #72]	; 0x48
   12c0c:	beq	12dd8 <__assert_fail@plt+0x1a20>
   12c10:	add	fp, sl, #24
   12c14:	str	r8, [sp, #28]
   12c18:	str	r3, [sp, #24]
   12c1c:	ldr	r4, [fp, #-20]	; 0xffffffec
   12c20:	sub	r1, fp, #24
   12c24:	cmp	r4, #0
   12c28:	bne	12c38 <__assert_fail@plt+0x1880>
   12c2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12c30:	cmp	r3, #0
   12c34:	beq	12dac <__assert_fail@plt+0x19f4>
   12c38:	ldr	r3, [fp, #-12]
   12c3c:	tst	r3, #4
   12c40:	moveq	sl, r1
   12c44:	moveq	r5, r3
   12c48:	ldrne	r5, [sl, #12]
   12c4c:	ands	r5, r5, #8
   12c50:	bne	12d94 <__assert_fail@plt+0x19dc>
   12c54:	tst	r3, #8
   12c58:	bne	12cd4 <__assert_fail@plt+0x191c>
   12c5c:	sub	r3, r4, #1
   12c60:	cmp	r3, #254	; 0xfe
   12c64:	bhi	12cd4 <__assert_fail@plt+0x191c>
   12c68:	bl	11250 <__ctype_b_loc@plt>
   12c6c:	lsl	r3, r4, #1
   12c70:	ldr	r1, [r0]
   12c74:	ldrh	r3, [r1, r3]
   12c78:	tst	r3, #16384	; 0x4000
   12c7c:	beq	12cd4 <__assert_fail@plt+0x191c>
   12c80:	ldr	r3, [r7, #4]
   12c84:	add	r1, r3, #1
   12c88:	str	r1, [r7, #4]
   12c8c:	strb	r4, [r3]
   12c90:	ldr	r3, [sl, #8]
   12c94:	cmp	r3, #0
   12c98:	beq	12cc8 <__assert_fail@plt+0x1910>
   12c9c:	ldr	r3, [r7, #4]
   12ca0:	mov	r2, #58	; 0x3a
   12ca4:	add	r1, r3, #1
   12ca8:	str	r1, [r7, #4]
   12cac:	strb	r2, [r3]
   12cb0:	ldr	r3, [sl, #12]
   12cb4:	tst	r3, #1
   12cb8:	ldrne	r3, [r7, #4]
   12cbc:	addne	r1, r3, #1
   12cc0:	strne	r1, [r7, #4]
   12cc4:	strbne	r2, [r3]
   12cc8:	ldr	r3, [r7, #4]
   12ccc:	mov	r2, #0
   12cd0:	strb	r2, [r3]
   12cd4:	ldr	r4, [fp, #-24]	; 0xffffffe8
   12cd8:	cmp	r4, #0
   12cdc:	beq	12d94 <__assert_fail@plt+0x19dc>
   12ce0:	ldr	r8, [r7]
   12ce4:	ldr	r6, [r8, #8]
   12ce8:	ldr	r0, [r6]
   12cec:	cmp	r0, #0
   12cf0:	beq	12d14 <__assert_fail@plt+0x195c>
   12cf4:	mov	r9, r6
   12cf8:	mov	r1, r4
   12cfc:	bl	110f4 <strcmp@plt>
   12d00:	cmp	r0, #0
   12d04:	beq	12d9c <__assert_fail@plt+0x19e4>
   12d08:	ldr	r0, [r9, #16]!
   12d0c:	cmp	r0, #0
   12d10:	bne	12cf8 <__assert_fail@plt+0x1940>
   12d14:	ldr	r3, [sl, #8]
   12d18:	ldr	r1, [r7, #8]
   12d1c:	cmp	r3, #0
   12d20:	str	r4, [r1]
   12d24:	beq	12d38 <__assert_fail@plt+0x1980>
   12d28:	ldr	r3, [sl, #12]
   12d2c:	tst	r3, #1
   12d30:	moveq	r5, #1
   12d34:	movne	r5, #2
   12d38:	str	r5, [r1, #4]
   12d3c:	ldr	ip, [fp, #-20]	; 0xffffffec
   12d40:	mov	r3, #0
   12d44:	cmp	ip, r3
   12d48:	str	r3, [r1, #8]
   12d4c:	ldr	r2, [sp, #24]
   12d50:	ldr	r3, [r8, #48]	; 0x30
   12d54:	ldreq	ip, [sl, #4]
   12d58:	sub	r3, r2, r3
   12d5c:	bic	ip, ip, #-16777216	; 0xff000000
   12d60:	asr	r3, r3, #2
   12d64:	add	lr, r1, #16
   12d68:	rsb	r0, r3, r3, lsl #3
   12d6c:	add	r0, r0, r0, lsl #6
   12d70:	add	r0, r3, r0, lsl #3
   12d74:	rsb	r0, r0, r0, lsl #15
   12d78:	add	r3, r3, r0, lsl #3
   12d7c:	add	r3, r3, #1
   12d80:	add	r3, ip, r3, lsl #24
   12d84:	str	r3, [r1, #12]
   12d88:	mov	r3, #0
   12d8c:	str	lr, [r7, #8]
   12d90:	str	r3, [r1, #16]
   12d94:	add	fp, fp, #24
   12d98:	b	12c1c <__assert_fail@plt+0x1864>
   12d9c:	sub	r6, r9, r6
   12da0:	cmn	r6, #15
   12da4:	bge	12d94 <__assert_fail@plt+0x19dc>
   12da8:	b	12d14 <__assert_fail@plt+0x195c>
   12dac:	ldr	r3, [fp, #-8]
   12db0:	cmp	r3, #0
   12db4:	bne	12c38 <__assert_fail@plt+0x1880>
   12db8:	ldr	r3, [fp, #-4]
   12dbc:	cmp	r3, #0
   12dc0:	bne	12c38 <__assert_fail@plt+0x1880>
   12dc4:	ldr	r3, [sp, #12]
   12dc8:	ldr	r8, [sp, #28]
   12dcc:	ldr	r9, [sp, #24]
   12dd0:	ldr	r3, [r3, #4]
   12dd4:	b	12df0 <__assert_fail@plt+0x1a38>
   12dd8:	ldr	r3, [sp, #12]
   12ddc:	ldr	r3, [r3, #4]
   12de0:	cmp	r3, #0
   12de4:	moveq	r0, r9
   12de8:	moveq	r9, r3
   12dec:	beq	12e60 <__assert_fail@plt+0x1aa8>
   12df0:	ldr	r2, [r7, #4]
   12df4:	ldr	r1, [sp, #12]
   12df8:	str	r3, [r9]
   12dfc:	cmp	r8, #0
   12e00:	stmib	r9, {r1, r2}
   12e04:	ldr	r2, [sp, #16]
   12e08:	mov	r3, #0
   12e0c:	str	r2, [r9, #16]
   12e10:	ldr	r2, [sp, #20]
   12e14:	str	r3, [r9, #12]
   12e18:	str	r2, [r9, #20]
   12e1c:	str	r3, [r9, #24]
   12e20:	str	r3, [r9, #32]
   12e24:	str	r3, [r9, #28]
   12e28:	beq	12e5c <__assert_fail@plt+0x1aa4>
   12e2c:	ldr	r2, [r8]
   12e30:	cmp	r2, r3
   12e34:	beq	12ea8 <__assert_fail@plt+0x1af0>
   12e38:	add	r3, r3, #1
   12e3c:	ldr	r2, [r8, r3, lsl #4]
   12e40:	cmp	r2, #0
   12e44:	bne	12e38 <__assert_fail@plt+0x1a80>
   12e48:	lsl	r3, r3, #2
   12e4c:	ldr	r2, [r7, #12]
   12e50:	add	r3, r2, r3
   12e54:	str	r2, [r9, #28]
   12e58:	str	r3, [r7, #12]
   12e5c:	add	r0, r9, #36	; 0x24
   12e60:	cmp	r8, #0
   12e64:	beq	12ea0 <__assert_fail@plt+0x1ae8>
   12e68:	ldr	r1, [r8]
   12e6c:	cmp	r1, #0
   12e70:	beq	12ea0 <__assert_fail@plt+0x1ae8>
   12e74:	mov	r2, #0
   12e78:	add	r4, r2, #1
   12e7c:	mov	r3, r0
   12e80:	str	r7, [sp]
   12e84:	mov	r0, r1
   12e88:	mov	r1, r9
   12e8c:	bl	12be4 <__assert_fail@plt+0x182c>
   12e90:	ldr	r1, [r8, r4, lsl #4]
   12e94:	mov	r2, r4
   12e98:	cmp	r1, #0
   12e9c:	bne	12e78 <__assert_fail@plt+0x1ac0>
   12ea0:	add	sp, sp, #36	; 0x24
   12ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ea8:	mov	r3, r2
   12eac:	b	12e4c <__assert_fail@plt+0x1a94>
   12eb0:	cmp	r0, #86	; 0x56
   12eb4:	beq	12ec0 <__assert_fail@plt+0x1b08>
   12eb8:	mov	r0, #7
   12ebc:	bx	lr
   12ec0:	ldr	r3, [pc, #104]	; 12f30 <__assert_fail@plt+0x1b78>
   12ec4:	push	{r4, lr}
   12ec8:	mov	r4, r2
   12ecc:	ldr	r3, [r3]
   12ed0:	cmp	r3, #0
   12ed4:	beq	12ef8 <__assert_fail@plt+0x1b40>
   12ed8:	mov	r1, r2
   12edc:	ldr	r0, [r2, #48]	; 0x30
   12ee0:	blx	r3
   12ee4:	ldr	r0, [r4, #16]
   12ee8:	ands	r0, r0, #32
   12eec:	beq	12f2c <__assert_fail@plt+0x1b74>
   12ef0:	mov	r0, #0
   12ef4:	pop	{r4, pc}
   12ef8:	ldr	r3, [pc, #52]	; 12f34 <__assert_fail@plt+0x1b7c>
   12efc:	ldr	r2, [r3]
   12f00:	cmp	r2, #0
   12f04:	beq	12f18 <__assert_fail@plt+0x1b60>
   12f08:	ldr	r1, [pc, #40]	; 12f38 <__assert_fail@plt+0x1b80>
   12f0c:	ldr	r0, [r4, #48]	; 0x30
   12f10:	bl	11280 <fprintf@plt>
   12f14:	b	12ee4 <__assert_fail@plt+0x1b2c>
   12f18:	ldr	r2, [pc, #28]	; 12f3c <__assert_fail@plt+0x1b84>
   12f1c:	ldr	r1, [pc, #28]	; 12f40 <__assert_fail@plt+0x1b88>
   12f20:	mov	r0, r4
   12f24:	bl	18050 <argp_error@@Base>
   12f28:	b	12ee4 <__assert_fail@plt+0x1b2c>
   12f2c:	bl	1125c <exit@plt>
   12f30:	ldrdeq	r0, [r3], -r8
   12f34:	andeq	r0, r3, r0, asr #18
   12f38:	strdeq	fp, [r1], -r0
   12f3c:	andeq	fp, r1, ip, lsr r9
   12f40:	andeq	fp, r1, r0, ror #18
   12f44:	cmn	r0, #3
   12f48:	push	{r4, r5, lr}
   12f4c:	mov	r4, r2
   12f50:	sub	sp, sp, #12
   12f54:	beq	13038 <__assert_fail@plt+0x1c80>
   12f58:	ble	12fc8 <__assert_fail@plt+0x1c10>
   12f5c:	cmn	r0, #2
   12f60:	beq	12f88 <__assert_fail@plt+0x1bd0>
   12f64:	cmp	r0, #63	; 0x3f
   12f68:	bne	1302c <__assert_fail@plt+0x1c74>
   12f6c:	mov	r0, r4
   12f70:	ldr	r2, [pc, #236]	; 13064 <__assert_fail@plt+0x1cac>
   12f74:	ldr	r1, [r4, #48]	; 0x30
   12f78:	bl	17fa0 <argp_state_help@@Base>
   12f7c:	mov	r0, #0
   12f80:	add	sp, sp, #12
   12f84:	pop	{r4, r5, pc}
   12f88:	ldr	r3, [pc, #216]	; 13068 <__assert_fail@plt+0x1cb0>
   12f8c:	mov	r0, r1
   12f90:	str	r1, [sp, #4]
   12f94:	str	r1, [r3]
   12f98:	bl	13e68 <argp_parse@@Base+0xdec>
   12f9c:	ldr	r3, [r4, #16]
   12fa0:	ldr	r2, [pc, #196]	; 1306c <__assert_fail@plt+0x1cb4>
   12fa4:	and	r3, r3, #3
   12fa8:	cmp	r3, #1
   12fac:	ldr	r1, [sp, #4]
   12fb0:	str	r0, [r4, #40]	; 0x28
   12fb4:	str	r0, [r2]
   12fb8:	beq	13054 <__assert_fail@plt+0x1c9c>
   12fbc:	mov	r0, #0
   12fc0:	add	sp, sp, #12
   12fc4:	pop	{r4, r5, pc}
   12fc8:	cmn	r0, #4
   12fcc:	bne	1302c <__assert_fail@plt+0x1c74>
   12fd0:	cmp	r1, #0
   12fd4:	ldr	r0, [pc, #148]	; 13070 <__assert_fail@plt+0x1cb8>
   12fd8:	mov	r2, #10
   12fdc:	movne	r0, r1
   12fe0:	mov	r1, #0
   12fe4:	bl	11100 <strtol@plt>
   12fe8:	ldr	r4, [pc, #132]	; 13074 <__assert_fail@plt+0x1cbc>
   12fec:	str	r0, [r4]
   12ff0:	ldr	r3, [r4]
   12ff4:	cmp	r3, #0
   12ff8:	sub	r3, r3, #1
   12ffc:	str	r3, [r4]
   13000:	ble	12fbc <__assert_fail@plt+0x1c04>
   13004:	mov	r5, #1
   13008:	mov	r0, r5
   1300c:	bl	11190 <sleep@plt>
   13010:	ldr	r3, [r4]
   13014:	cmp	r3, #0
   13018:	sub	r3, r3, #1
   1301c:	str	r3, [r4]
   13020:	bgt	13008 <__assert_fail@plt+0x1c50>
   13024:	mov	r0, #0
   13028:	b	12fc0 <__assert_fail@plt+0x1c08>
   1302c:	mov	r0, #7
   13030:	add	sp, sp, #12
   13034:	pop	{r4, r5, pc}
   13038:	mov	r0, r4
   1303c:	ldr	r2, [pc, #52]	; 13078 <__assert_fail@plt+0x1cc0>
   13040:	ldr	r1, [r4, #48]	; 0x30
   13044:	bl	17fa0 <argp_state_help@@Base>
   13048:	mov	r0, #0
   1304c:	add	sp, sp, #12
   13050:	pop	{r4, r5, pc}
   13054:	ldr	r3, [r4, #8]
   13058:	mov	r0, #0
   1305c:	str	r1, [r3]
   13060:	b	12f80 <__assert_fail@plt+0x1bc8>
   13064:	andeq	r0, r0, sl, ror r2
   13068:			; <UNDEFINED> instruction: 0x000308b4
   1306c:			; <UNDEFINED> instruction: 0x000308b0
   13070:	andeq	fp, r1, r4, ror #18
   13074:	ldrdeq	r0, [r3], -r4
   13078:	andeq	r0, r0, r1, lsl #4

0001307c <argp_parse@@Base>:
   1307c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13080:	add	fp, sp, #32
   13084:	tst	r3, #1
   13088:	sub	sp, sp, #228	; 0xe4
   1308c:	mov	r6, r3
   13090:	mov	r7, r0
   13094:	str	r1, [fp, #-240]	; 0xffffff10
   13098:	str	r2, [fp, #-232]	; 0xffffff18
   1309c:	bne	130c8 <argp_parse@@Base+0x4c>
   130a0:	ldr	r3, [pc, #3260]	; 13d64 <argp_parse@@Base+0xce8>
   130a4:	ldr	r4, [pc, #3260]	; 13d68 <argp_parse@@Base+0xcec>
   130a8:	ldr	r2, [r3]
   130ac:	cmp	r2, #0
   130b0:	ldreq	r2, [fp, #-232]	; 0xffffff18
   130b4:	ldreq	r2, [r2]
   130b8:	streq	r2, [r3]
   130bc:	ldr	r3, [r4]
   130c0:	cmp	r3, #0
   130c4:	beq	13768 <argp_parse@@Base+0x6ec>
   130c8:	ands	r3, r6, #16
   130cc:	beq	13670 <argp_parse@@Base+0x5f4>
   130d0:	sub	r4, fp, #196	; 0xc4
   130d4:	mov	r0, r4
   130d8:	mov	r2, #36	; 0x24
   130dc:	mov	r1, #0
   130e0:	bl	112b0 <memset@plt>
   130e4:	ands	r3, r6, #4
   130e8:	str	r3, [fp, #-244]	; 0xffffff0c
   130ec:	mov	r3, #0
   130f0:	moveq	r0, #1
   130f4:	movne	r0, #0
   130f8:	cmp	r7, r3
   130fc:	str	r3, [fp, #-224]	; 0xffffff20
   13100:	str	r3, [fp, #-220]	; 0xffffff24
   13104:	str	r3, [fp, #-216]	; 0xffffff28
   13108:	str	r0, [fp, #-228]	; 0xffffff1c
   1310c:	beq	13574 <argp_parse@@Base+0x4f8>
   13110:	mov	r0, r7
   13114:	sub	r1, fp, #228	; 0xe4
   13118:	bl	12b1c <__assert_fail@plt+0x1764>
   1311c:	ldr	r5, [fp, #-220]	; 0xffffff24
   13120:	ldr	r9, [fp, #-216]	; 0xffffff28
   13124:	add	r5, r5, #1
   13128:	ldr	r3, [fp, #-224]	; 0xffffff20
   1312c:	add	r5, r5, r5, lsl #3
   13130:	lsl	r2, r9, #2
   13134:	lsl	r5, r5, #2
   13138:	add	r3, r3, #1
   1313c:	add	sl, r2, r5
   13140:	ldr	r0, [fp, #-228]	; 0xffffff1c
   13144:	add	r9, sl, r3, lsl #4
   13148:	str	r2, [fp, #-236]	; 0xffffff14
   1314c:	add	r0, r9, r0
   13150:	add	r0, r0, #1
   13154:	bl	14dcc <_obstack_memory_used@@Base+0xa98>
   13158:	cmp	r0, #0
   1315c:	mov	r8, r0
   13160:	str	r0, [fp, #-40]	; 0xffffffd8
   13164:	moveq	r5, #12
   13168:	beq	13568 <argp_parse@@Base+0x4ec>
   1316c:	mov	r3, #1
   13170:	str	r3, [fp, #-196]	; 0xffffff3c
   13174:	str	r3, [fp, #-192]	; 0xffffff40
   13178:	ldm	r4!, {r0, r1, r2, r3}
   1317c:	sub	ip, fp, #148	; 0x94
   13180:	add	r5, r8, r5
   13184:	str	r5, [fp, #-104]	; 0xffffff98
   13188:	stmia	ip!, {r0, r1, r2, r3}
   1318c:	add	r3, r8, sl
   13190:	mov	lr, r3
   13194:	ldm	r4!, {r0, r1, r2, r3}
   13198:	add	sl, r8, r9
   1319c:	str	lr, [fp, #-248]	; 0xffffff08
   131a0:	str	lr, [fp, #-152]	; 0xffffff68
   131a4:	ldr	lr, [r4]
   131a8:	stmia	ip!, {r0, r1, r2, r3}
   131ac:	mov	r0, r5
   131b0:	ldr	r2, [fp, #-236]	; 0xffffff14
   131b4:	mov	r1, #0
   131b8:	str	lr, [ip]
   131bc:	str	r8, [fp, #-112]	; 0xffffff90
   131c0:	str	sl, [fp, #-156]	; 0xffffff64
   131c4:	bl	112b0 <memset@plt>
   131c8:	ldr	lr, [fp, #-248]	; 0xffffff08
   131cc:	sub	r4, fp, #160	; 0xa0
   131d0:	tst	r6, #8
   131d4:	str	lr, [fp, #-204]	; 0xffffff34
   131d8:	str	sl, [fp, #-208]	; 0xffffff30
   131dc:	str	r5, [fp, #-200]	; 0xffffff38
   131e0:	str	r4, [fp, #-212]	; 0xffffff2c
   131e4:	bne	13588 <argp_parse@@Base+0x50c>
   131e8:	ldr	r3, [fp, #-244]	; 0xffffff0c
   131ec:	cmp	r3, #0
   131f0:	addne	r3, sl, #1
   131f4:	movne	r2, #43	; 0x2b
   131f8:	strbne	r2, [sl]
   131fc:	movne	sl, r3
   13200:	strne	r3, [fp, #-208]	; 0xffffff30
   13204:	mov	r2, #0
   13208:	strb	r2, [sl]
   1320c:	ldr	r3, [fp, #-204]	; 0xffffff34
   13210:	cmp	r7, r2
   13214:	str	r2, [r3]
   13218:	str	r7, [fp, #-160]	; 0xffffff60
   1321c:	beq	13730 <argp_parse@@Base+0x6b4>
   13220:	sub	r1, fp, #212	; 0xd4
   13224:	mov	r0, r7
   13228:	str	r1, [sp]
   1322c:	ldr	r3, [fp, #-112]	; 0xffffff90
   13230:	mov	r1, r2
   13234:	bl	12be4 <__assert_fail@plt+0x182c>
   13238:	ldr	r7, [fp, #-160]	; 0xffffff60
   1323c:	ldr	r5, [fp, #-112]	; 0xffffff90
   13240:	mov	r8, r0
   13244:	str	r0, [fp, #-108]	; 0xffffff94
   13248:	mov	r2, #56	; 0x38
   1324c:	mov	r1, #0
   13250:	sub	r0, fp, #96	; 0x60
   13254:	bl	112b0 <memset@plt>
   13258:	ldr	r2, [pc, #2828]	; 13d6c <argp_parse@@Base+0xcf0>
   1325c:	ldr	r3, [pc, #2828]	; 13d70 <argp_parse@@Base+0xcf4>
   13260:	ldr	r0, [fp, #-240]	; 0xffffff10
   13264:	ldr	r1, [r2]
   13268:	str	r0, [fp, #-92]	; 0xffffffa4
   1326c:	ldr	r2, [r3]
   13270:	ldr	r0, [fp, #-232]	; 0xffffff18
   13274:	mov	r3, #1
   13278:	cmp	r5, r8
   1327c:	str	r7, [fp, #-96]	; 0xffffffa0
   13280:	str	r0, [fp, #-88]	; 0xffffffa8
   13284:	str	r6, [fp, #-80]	; 0xffffffb0
   13288:	str	r4, [fp, #-44]	; 0xffffffd4
   1328c:	str	r1, [fp, #-52]	; 0xffffffcc
   13290:	str	r2, [fp, #-48]	; 0xffffffd0
   13294:	str	r3, [fp, #-100]	; 0xffffff9c
   13298:	bcc	1359c <argp_parse@@Base+0x520>
   1329c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   132a0:	tst	r3, #2
   132a4:	bne	13740 <argp_parse@@Base+0x6c4>
   132a8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   132ac:	ldr	r4, [fp, #-92]	; 0xffffffa4
   132b0:	mov	r2, #1
   132b4:	str	r2, [fp, #-144]	; 0xffffff70
   132b8:	ldr	r2, [fp, #-232]	; 0xffffff18
   132bc:	cmp	r2, r3
   132c0:	beq	13c40 <argp_parse@@Base+0xbc4>
   132c4:	ldr	r3, [pc, #2716]	; 13d68 <argp_parse@@Base+0xcec>
   132c8:	ldr	r3, [r3]
   132cc:	str	r3, [fp, #-56]	; 0xffffffc8
   132d0:	ldr	r2, [fp, #-100]	; 0xffffff9c
   132d4:	ldr	r5, [fp, #-84]	; 0xffffffac
   132d8:	ldr	sl, [pc, #2708]	; 13d74 <argp_parse@@Base+0xcf8>
   132dc:	mov	r0, r4
   132e0:	mov	r6, #0
   132e4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   132e8:	cmp	r3, #0
   132ec:	beq	1377c <argp_parse@@Base+0x700>
   132f0:	cmp	r3, r5
   132f4:	strgt	r6, [fp, #-72]	; 0xffffffb8
   132f8:	bgt	1377c <argp_parse@@Base+0x700>
   132fc:	cmp	r5, r0
   13300:	blt	13b18 <argp_parse@@Base+0xa9c>
   13304:	cmp	r5, r0
   13308:	bne	13b24 <argp_parse@@Base+0xaa8>
   1330c:	ldr	r3, [fp, #-112]	; 0xffffff90
   13310:	ldr	ip, [fp, #-108]	; 0xffffff94
   13314:	cmp	r3, ip
   13318:	bcs	13d08 <argp_parse@@Base+0xc8c>
   1331c:	mov	r5, #0
   13320:	add	r4, r3, #36	; 0x24
   13324:	mov	r7, r5
   13328:	ldr	r6, [pc, #2632]	; 13d78 <argp_parse@@Base+0xcfc>
   1332c:	mov	r0, r5
   13330:	b	13378 <argp_parse@@Base+0x2fc>
   13334:	ldr	ip, [r4, #-4]
   13338:	str	ip, [fp, #-60]	; 0xffffffc4
   1333c:	ldr	ip, [r4, #-12]
   13340:	str	ip, [fp, #-68]	; 0xffffffbc
   13344:	ldr	ip, [r4, #-8]
   13348:	str	r3, [fp, #-76]	; 0xffffffb4
   1334c:	str	ip, [fp, #-64]	; 0xffffffc0
   13350:	blx	r5
   13354:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13358:	str	r3, [r4, #-4]
   1335c:	ldr	ip, [fp, #-108]	; 0xffffff94
   13360:	cmp	ip, r4
   13364:	bls	13cb0 <argp_parse@@Base+0xc34>
   13368:	cmp	r0, #7
   1336c:	cmpne	r0, #0
   13370:	bne	13c8c <argp_parse@@Base+0xc10>
   13374:	add	r4, r4, #36	; 0x24
   13378:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1337c:	cmp	r3, #0
   13380:	bne	13360 <argp_parse@@Base+0x2e4>
   13384:	ldr	r5, [r4, #-36]	; 0xffffffdc
   13388:	sub	r2, fp, #96	; 0x60
   1338c:	cmp	r5, #0
   13390:	mov	r1, r7
   13394:	mov	r0, r6
   13398:	bne	13334 <argp_parse@@Base+0x2b8>
   1339c:	cmp	ip, r4
   133a0:	mov	r0, #7
   133a4:	bhi	13374 <argp_parse@@Base+0x2f8>
   133a8:	ldr	r3, [fp, #-112]	; 0xffffff90
   133ac:	sub	r4, ip, #36	; 0x24
   133b0:	cmp	r4, r3
   133b4:	movcs	r5, #7
   133b8:	bcc	13440 <argp_parse@@Base+0x3c4>
   133bc:	cmp	r5, #7
   133c0:	cmpne	r5, #0
   133c4:	bne	13ca0 <argp_parse@@Base+0xc24>
   133c8:	sub	r4, r4, #36	; 0x24
   133cc:	mov	r7, #0
   133d0:	ldr	r6, [pc, #2468]	; 13d7c <argp_parse@@Base+0xd00>
   133d4:	b	13420 <argp_parse@@Base+0x3a4>
   133d8:	ldr	r3, [r4, #68]	; 0x44
   133dc:	ldr	ip, [r4, #48]	; 0x30
   133e0:	str	r3, [fp, #-60]	; 0xffffffc4
   133e4:	ldr	r3, [r4, #60]	; 0x3c
   133e8:	str	r3, [fp, #-68]	; 0xffffffbc
   133ec:	ldr	r3, [r4, #64]	; 0x40
   133f0:	str	ip, [fp, #-76]	; 0xffffffb4
   133f4:	str	r3, [fp, #-64]	; 0xffffffc0
   133f8:	blx	r5
   133fc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13400:	str	r3, [r4, #68]	; 0x44
   13404:	ldr	r3, [fp, #-112]	; 0xffffff90
   13408:	cmp	r4, r3
   1340c:	bcc	13d00 <argp_parse@@Base+0xc84>
   13410:	cmp	r0, #7
   13414:	cmpne	r0, #0
   13418:	bne	13c70 <argp_parse@@Base+0xbf4>
   1341c:	sub	r4, r4, #36	; 0x24
   13420:	ldr	r5, [r4, #36]	; 0x24
   13424:	sub	r2, fp, #96	; 0x60
   13428:	cmp	r5, #0
   1342c:	mov	r1, r7
   13430:	mov	r0, r6
   13434:	bne	133d8 <argp_parse@@Base+0x35c>
   13438:	cmp	r4, r3
   1343c:	bcs	1341c <argp_parse@@Base+0x3a0>
   13440:	ldr	r2, [fp, #4]
   13444:	cmp	r2, #0
   13448:	beq	13464 <argp_parse@@Base+0x3e8>
   1344c:	mov	r5, #0
   13450:	ldr	r1, [fp, #4]
   13454:	ldr	r2, [fp, #-84]	; 0xffffffac
   13458:	str	r2, [r1]
   1345c:	cmp	r5, #0
   13460:	bne	13c80 <argp_parse@@Base+0xc04>
   13464:	ldr	ip, [fp, #-108]	; 0xffffff94
   13468:	b	13b3c <argp_parse@@Base+0xac0>
   1346c:	ldr	r3, [fp, #-112]	; 0xffffff90
   13470:	mov	r5, r0
   13474:	ldr	ip, [fp, #-108]	; 0xffffff94
   13478:	cmp	ip, r3
   1347c:	bls	13c38 <argp_parse@@Base+0xbbc>
   13480:	ldr	r7, [pc, #2296]	; 13d80 <argp_parse@@Base+0xd04>
   13484:	add	r4, r3, #36	; 0x24
   13488:	mov	r8, #0
   1348c:	ldr	r3, [r4, #-36]	; 0xffffffdc
   13490:	sub	r2, fp, #96	; 0x60
   13494:	cmp	r3, #0
   13498:	mov	r1, r8
   1349c:	mov	r0, r7
   134a0:	mov	r6, r4
   134a4:	beq	134d8 <argp_parse@@Base+0x45c>
   134a8:	ldr	ip, [r4, #-4]
   134ac:	ldr	lr, [r4, #-24]	; 0xffffffe8
   134b0:	str	ip, [fp, #-60]	; 0xffffffc4
   134b4:	ldr	ip, [r4, #-12]
   134b8:	str	ip, [fp, #-68]	; 0xffffffbc
   134bc:	ldr	ip, [r4, #-8]
   134c0:	str	lr, [fp, #-76]	; 0xffffffb4
   134c4:	str	ip, [fp, #-64]	; 0xffffffc0
   134c8:	blx	r3
   134cc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   134d0:	str	r3, [r4, #-4]
   134d4:	ldr	ip, [fp, #-108]	; 0xffffff94
   134d8:	cmp	ip, r6
   134dc:	add	r4, r4, #36	; 0x24
   134e0:	bhi	1348c <argp_parse@@Base+0x410>
   134e4:	ldr	r3, [fp, #-112]	; 0xffffff90
   134e8:	sub	ip, ip, #36	; 0x24
   134ec:	cmp	r3, ip
   134f0:	bhi	13558 <argp_parse@@Base+0x4dc>
   134f4:	ldr	r8, [pc, #2184]	; 13d84 <argp_parse@@Base+0xd08>
   134f8:	sub	r4, ip, #36	; 0x24
   134fc:	mov	r9, #0
   13500:	ldr	r6, [r4, #36]	; 0x24
   13504:	sub	r2, fp, #96	; 0x60
   13508:	cmp	r6, #0
   1350c:	mov	r1, r9
   13510:	mov	r0, r8
   13514:	mov	r7, r4
   13518:	beq	1354c <argp_parse@@Base+0x4d0>
   1351c:	ldr	r3, [r4, #68]	; 0x44
   13520:	ldr	ip, [r4, #48]	; 0x30
   13524:	str	r3, [fp, #-60]	; 0xffffffc4
   13528:	ldr	r3, [r4, #60]	; 0x3c
   1352c:	str	r3, [fp, #-68]	; 0xffffffbc
   13530:	ldr	r3, [r4, #64]	; 0x40
   13534:	str	ip, [fp, #-76]	; 0xffffffb4
   13538:	str	r3, [fp, #-64]	; 0xffffffc0
   1353c:	blx	r6
   13540:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13544:	str	r3, [r4, #68]	; 0x44
   13548:	ldr	r3, [fp, #-112]	; 0xffffff90
   1354c:	cmp	r3, r7
   13550:	sub	r4, r4, #36	; 0x24
   13554:	bls	13500 <argp_parse@@Base+0x484>
   13558:	cmp	r5, #7
   1355c:	moveq	r5, #22
   13560:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13564:	bl	13f14 <argp_parse@@Base+0xe98>
   13568:	mov	r0, r5
   1356c:	sub	sp, fp, #32
   13570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13574:	mov	sl, #36	; 0x24
   13578:	mov	r5, sl
   1357c:	mov	r9, #52	; 0x34
   13580:	str	r7, [fp, #-236]	; 0xffffff14
   13584:	b	1314c <argp_parse@@Base+0xd0>
   13588:	add	sl, sl, #1
   1358c:	mov	r3, #45	; 0x2d
   13590:	str	sl, [fp, #-208]	; 0xffffff30
   13594:	strb	r3, [r8, r9]
   13598:	b	13204 <argp_parse@@Base+0x188>
   1359c:	ldr	r3, [fp, #8]
   135a0:	add	r4, r5, #36	; 0x24
   135a4:	str	r3, [r5, #24]
   135a8:	mov	r7, #0
   135ac:	ldr	r6, [pc, #2004]	; 13d88 <argp_parse@@Base+0xd0c>
   135b0:	b	13608 <argp_parse@@Base+0x58c>
   135b4:	ldr	r2, [r4, #-4]
   135b8:	ldr	r0, [r4, #-24]	; 0xffffffe8
   135bc:	str	r2, [fp, #-60]	; 0xffffffc4
   135c0:	ldr	r1, [r4, #-12]
   135c4:	sub	r2, fp, #96	; 0x60
   135c8:	str	r1, [fp, #-68]	; 0xffffffbc
   135cc:	ldr	ip, [r4, #-8]
   135d0:	mov	r1, r7
   135d4:	str	r0, [fp, #-76]	; 0xffffffb4
   135d8:	str	ip, [fp, #-64]	; 0xffffffc0
   135dc:	mov	r0, r6
   135e0:	blx	r3
   135e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   135e8:	str	r3, [r4, #-4]
   135ec:	ldr	r3, [fp, #-108]	; 0xffffff94
   135f0:	cmp	r3, r4
   135f4:	bls	13d24 <argp_parse@@Base+0xca8>
   135f8:	cmp	r0, #7
   135fc:	cmpne	r0, #0
   13600:	bne	13720 <argp_parse@@Base+0x6a4>
   13604:	add	r4, r4, #36	; 0x24
   13608:	ldr	r3, [r4, #-20]	; 0xffffffec
   1360c:	cmp	r3, #0
   13610:	ldrne	r3, [r3, #28]
   13614:	ldrne	r2, [r4, #-16]
   13618:	ldrne	r3, [r3, r2, lsl #2]
   1361c:	strne	r3, [r4, #-12]
   13620:	ldr	r3, [r4, #-36]	; 0xffffffdc
   13624:	cmp	r3, #0
   13628:	bne	135b4 <argp_parse@@Base+0x538>
   1362c:	ldr	r3, [r4, #-32]	; 0xffffffe0
   13630:	ldr	r3, [r3, #16]
   13634:	cmp	r3, #0
   13638:	beq	13660 <argp_parse@@Base+0x5e4>
   1363c:	ldr	r3, [r3]
   13640:	cmp	r3, #0
   13644:	beq	13660 <argp_parse@@Base+0x5e4>
   13648:	ldr	r3, [r4, #-8]
   1364c:	ldr	r2, [r4, #-12]
   13650:	str	r2, [r3]
   13654:	ldr	r3, [r4, #-36]	; 0xffffffdc
   13658:	cmp	r3, #0
   1365c:	bne	135b4 <argp_parse@@Base+0x538>
   13660:	ldr	r3, [fp, #-108]	; 0xffffff94
   13664:	cmp	r3, r4
   13668:	bhi	13604 <argp_parse@@Base+0x588>
   1366c:	b	1329c <argp_parse@@Base+0x220>
   13670:	sub	sp, sp, #72	; 0x48
   13674:	add	r4, sp, #8
   13678:	sub	sp, sp, #40	; 0x28
   1367c:	add	r5, sp, #8
   13680:	mov	r1, r3
   13684:	mov	r0, r4
   13688:	mov	r2, #64	; 0x40
   1368c:	str	r3, [r5]
   13690:	str	r3, [r5, #4]
   13694:	str	r3, [r5, #8]
   13698:	str	r3, [r5, #12]
   1369c:	str	r3, [r5, #20]
   136a0:	str	r3, [r5, #24]
   136a4:	str	r4, [r5, #16]
   136a8:	bl	112b0 <memset@plt>
   136ac:	ldr	r3, [pc, #1752]	; 13d8c <argp_parse@@Base+0xd10>
   136b0:	cmp	r7, #0
   136b4:	strne	r7, [r4]
   136b8:	ldr	r3, [r3]
   136bc:	addne	r4, r4, #16
   136c0:	ldr	r2, [pc, #1736]	; 13d90 <argp_parse@@Base+0xd14>
   136c4:	cmp	r3, #0
   136c8:	str	r2, [r4]
   136cc:	beq	13c58 <argp_parse@@Base+0xbdc>
   136d0:	ldr	r2, [pc, #1724]	; 13d94 <argp_parse@@Base+0xd18>
   136d4:	add	r3, r4, #32
   136d8:	str	r2, [r4, #16]
   136dc:	mov	r8, #0
   136e0:	sub	r4, fp, #196	; 0xc4
   136e4:	str	r8, [r3]
   136e8:	mov	r1, r8
   136ec:	mov	r0, r4
   136f0:	mov	r2, #36	; 0x24
   136f4:	bl	112b0 <memset@plt>
   136f8:	ands	r3, r6, #4
   136fc:	str	r3, [fp, #-244]	; 0xffffff0c
   13700:	moveq	r3, #1
   13704:	movne	r3, r8
   13708:	mov	r7, r5
   1370c:	str	r8, [fp, #-224]	; 0xffffff20
   13710:	str	r8, [fp, #-220]	; 0xffffff24
   13714:	str	r8, [fp, #-216]	; 0xffffff28
   13718:	str	r3, [fp, #-228]	; 0xffffff1c
   1371c:	b	13110 <argp_parse@@Base+0x94>
   13720:	mov	r5, r0
   13724:	mov	r0, r5
   13728:	sub	sp, fp, #32
   1372c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13730:	ldr	r5, [fp, #-112]	; 0xffffff90
   13734:	mov	r8, r5
   13738:	str	r5, [fp, #-108]	; 0xffffff94
   1373c:	b	13248 <argp_parse@@Base+0x1cc>
   13740:	tst	r3, #1
   13744:	mov	r3, #0
   13748:	str	r3, [fp, #-144]	; 0xffffff70
   1374c:	ldr	r4, [fp, #-92]	; 0xffffffa4
   13750:	ldr	r3, [fp, #-88]	; 0xffffffa8
   13754:	subne	r3, r3, #4
   13758:	addne	r4, r4, #1
   1375c:	strne	r3, [fp, #-88]	; 0xffffffa8
   13760:	strne	r4, [fp, #-92]	; 0xffffffa4
   13764:	b	132b8 <argp_parse@@Base+0x23c>
   13768:	ldr	r3, [fp, #-232]	; 0xffffff18
   1376c:	ldr	r0, [r3]
   13770:	bl	13e68 <argp_parse@@Base+0xdec>
   13774:	str	r0, [r4]
   13778:	b	130c8 <argp_parse@@Base+0x4c>
   1377c:	cmp	r2, #0
   13780:	beq	132fc <argp_parse@@Base+0x280>
   13784:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13788:	str	r5, [fp, #-148]	; 0xffffff6c
   1378c:	ands	ip, r3, #64	; 0x40
   13790:	mvn	r3, #0
   13794:	str	r3, [fp, #-140]	; 0xffffff74
   13798:	ldr	r2, [fp, #-156]	; 0xffffff64
   1379c:	ldr	r3, [fp, #-152]	; 0xffffff68
   137a0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   137a4:	beq	13ac4 <argp_parse@@Base+0xa48>
   137a8:	sub	ip, fp, #148	; 0x94
   137ac:	stm	sp, {r6, ip}
   137b0:	bl	13fe8 <argp_parse@@Base+0xf6c>
   137b4:	ldr	r5, [fp, #-148]	; 0xffffff6c
   137b8:	str	r5, [fp, #-84]	; 0xffffffac
   137bc:	mov	r7, r0
   137c0:	cmn	r7, #1
   137c4:	beq	13ae4 <argp_parse@@Base+0xa68>
   137c8:	cmp	r7, #63	; 0x3f
   137cc:	beq	13be8 <argp_parse@@Base+0xb6c>
   137d0:	cmp	r7, #1
   137d4:	beq	1392c <argp_parse@@Base+0x8b0>
   137d8:	asrs	r8, r7, #24
   137dc:	bne	13888 <argp_parse@@Base+0x80c>
   137e0:	mov	r1, r7
   137e4:	ldr	r0, [fp, #-156]	; 0xffffff64
   137e8:	bl	11274 <strchr@plt>
   137ec:	cmp	r0, #0
   137f0:	beq	138f8 <argp_parse@@Base+0x87c>
   137f4:	ldr	r4, [fp, #-112]	; 0xffffff90
   137f8:	ldr	r2, [fp, #-108]	; 0xffffff94
   137fc:	cmp	r4, r2
   13800:	bcc	13814 <argp_parse@@Base+0x798>
   13804:	b	138f8 <argp_parse@@Base+0x87c>
   13808:	add	r4, r4, #36	; 0x24
   1380c:	cmp	r4, r2
   13810:	bcs	138f8 <argp_parse@@Base+0x87c>
   13814:	ldr	r3, [r4, #8]
   13818:	cmp	r0, r3
   1381c:	bcs	13808 <argp_parse@@Base+0x78c>
   13820:	ldr	r3, [r4]
   13824:	cmp	r3, #0
   13828:	beq	138f8 <argp_parse@@Base+0x87c>
   1382c:	ldr	r2, [r4, #32]
   13830:	ldr	r0, [r4, #28]
   13834:	ldr	ip, [r4, #24]
   13838:	str	r2, [fp, #-60]	; 0xffffffc4
   1383c:	ldr	r2, [r4, #12]
   13840:	ldr	r1, [fp, #-136]	; 0xffffff78
   13844:	str	r0, [fp, #-64]	; 0xffffffc0
   13848:	str	r2, [fp, #-76]	; 0xffffffb4
   1384c:	str	ip, [fp, #-68]	; 0xffffffbc
   13850:	sub	r2, fp, #96	; 0x60
   13854:	mov	r0, r7
   13858:	blx	r3
   1385c:	mov	r8, r6
   13860:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13864:	str	r3, [r4, #32]
   13868:	cmp	r0, #7
   1386c:	beq	138f0 <argp_parse@@Base+0x874>
   13870:	cmp	r0, #0
   13874:	bne	1346c <argp_parse@@Base+0x3f0>
   13878:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1387c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13880:	ldr	r0, [fp, #-92]	; 0xffffffa4
   13884:	b	132e4 <argp_parse@@Base+0x268>
   13888:	add	r3, r8, r8, lsl #3
   1388c:	ldr	r2, [fp, #-112]	; 0xffffff90
   13890:	lsl	r3, r3, #2
   13894:	sub	r3, r3, #36	; 0x24
   13898:	add	r4, r2, r3
   1389c:	ldr	r5, [r2, r3]
   138a0:	ands	r3, r7, #8388608	; 0x800000
   138a4:	movne	r3, #-16777216	; 0xff000000
   138a8:	cmp	r5, #0
   138ac:	beq	13a7c <argp_parse@@Base+0xa00>
   138b0:	ldr	r0, [r4, #32]
   138b4:	ldr	r2, [r4, #24]
   138b8:	str	r0, [fp, #-60]	; 0xffffffc4
   138bc:	ldr	r0, [r4, #28]
   138c0:	str	r2, [fp, #-68]	; 0xffffffbc
   138c4:	ldr	r2, [r4, #12]
   138c8:	str	r0, [fp, #-64]	; 0xffffffc0
   138cc:	bic	r0, r7, #-16777216	; 0xff000000
   138d0:	str	r2, [fp, #-76]	; 0xffffffb4
   138d4:	orr	r0, r0, r3
   138d8:	ldr	r1, [fp, #-136]	; 0xffffff78
   138dc:	sub	r2, fp, #96	; 0x60
   138e0:	blx	r5
   138e4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   138e8:	str	r3, [r4, #32]
   138ec:	b	13868 <argp_parse@@Base+0x7ec>
   138f0:	cmp	r8, #0
   138f4:	bne	13a7c <argp_parse@@Base+0xa00>
   138f8:	mov	r2, r7
   138fc:	ldr	r3, [pc, #1172]	; 13d98 <argp_parse@@Base+0xd1c>
   13900:	ldr	r1, [pc, #1172]	; 13d9c <argp_parse@@Base+0xd20>
   13904:	sub	r0, fp, #96	; 0x60
   13908:	bl	18050 <argp_error@@Base>
   1390c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13910:	mov	r2, #260	; 0x104
   13914:	sub	r0, fp, #96	; 0x60
   13918:	bl	17fa0 <argp_state_help@@Base>
   1391c:	mov	r5, #7
   13920:	ldr	r3, [fp, #-112]	; 0xffffff90
   13924:	ldr	ip, [fp, #-108]	; 0xffffff94
   13928:	b	13478 <argp_parse@@Base+0x3fc>
   1392c:	ldr	r7, [fp, #-136]	; 0xffffff78
   13930:	ldr	r3, [fp, #-112]	; 0xffffff90
   13934:	ldr	ip, [fp, #-108]	; 0xffffff94
   13938:	sub	r8, r5, #1
   1393c:	cmp	r3, ip
   13940:	str	r8, [fp, #-84]	; 0xffffffac
   13944:	bcs	13a70 <argp_parse@@Base+0x9f4>
   13948:	mov	lr, r8
   1394c:	add	r4, r3, #36	; 0x24
   13950:	ldr	r3, [r4, #-36]	; 0xffffffdc
   13954:	add	r5, lr, #1
   13958:	cmp	r3, #0
   1395c:	str	r5, [fp, #-84]	; 0xffffffac
   13960:	sub	r2, fp, #96	; 0x60
   13964:	mov	r1, r7
   13968:	mov	r0, r6
   1396c:	sub	r5, r4, #36	; 0x24
   13970:	mov	r9, r4
   13974:	streq	lr, [fp, #-84]	; 0xffffffac
   13978:	beq	13a64 <argp_parse@@Base+0x9e8>
   1397c:	ldr	ip, [r4, #-4]
   13980:	ldr	lr, [r4, #-24]	; 0xffffffe8
   13984:	str	ip, [fp, #-60]	; 0xffffffc4
   13988:	ldr	ip, [r4, #-12]
   1398c:	str	ip, [fp, #-68]	; 0xffffffbc
   13990:	ldr	ip, [r4, #-8]
   13994:	str	lr, [fp, #-76]	; 0xffffffb4
   13998:	str	ip, [fp, #-64]	; 0xffffffc0
   1399c:	blx	r3
   139a0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   139a4:	str	r3, [r4, #-4]
   139a8:	cmp	r0, #7
   139ac:	beq	139e8 <argp_parse@@Base+0x96c>
   139b0:	cmp	r0, #0
   139b4:	bne	1346c <argp_parse@@Base+0x3f0>
   139b8:	ldr	r0, [fp, #-92]	; 0xffffffa4
   139bc:	ldr	r5, [fp, #-84]	; 0xffffffac
   139c0:	cmp	r8, r5
   139c4:	sublt	r8, r5, r8
   139c8:	ldrlt	r3, [r4, #-24]	; 0xffffffe8
   139cc:	movge	r3, #1
   139d0:	addlt	r8, r3, r8
   139d4:	strlt	r8, [r4, #-24]	; 0xffffffe8
   139d8:	ldrlt	r2, [fp, #-100]	; 0xffffff9c
   139dc:	strge	r3, [fp, #-100]	; 0xffffff9c
   139e0:	movge	r2, r3
   139e4:	b	132e4 <argp_parse@@Base+0x268>
   139e8:	ldr	lr, [fp, #-84]	; 0xffffffac
   139ec:	ldr	r3, [r4, #-36]	; 0xffffffdc
   139f0:	sub	lr, lr, #1
   139f4:	cmp	r3, #0
   139f8:	str	lr, [fp, #-84]	; 0xffffffac
   139fc:	beq	13a60 <argp_parse@@Base+0x9e4>
   13a00:	add	r0, r5, #24
   13a04:	ldr	r2, [r5, #12]
   13a08:	ldm	r0, {r0, r1, ip}
   13a0c:	str	r2, [fp, #-76]	; 0xffffffb4
   13a10:	sub	r2, fp, #96	; 0x60
   13a14:	str	ip, [fp, #-60]	; 0xffffffc4
   13a18:	str	r0, [fp, #-68]	; 0xffffffbc
   13a1c:	str	r1, [fp, #-64]	; 0xffffffc0
   13a20:	mov	r0, sl
   13a24:	mov	r1, r6
   13a28:	blx	r3
   13a2c:	ldr	ip, [fp, #-108]	; 0xffffff94
   13a30:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13a34:	cmp	r4, ip
   13a38:	movcs	r1, #0
   13a3c:	movcc	r1, #1
   13a40:	mov	r3, r4
   13a44:	str	r2, [r5, #32]
   13a48:	cmp	r0, #7
   13a4c:	movne	r1, #0
   13a50:	cmp	r1, #0
   13a54:	beq	13d3c <argp_parse@@Base+0xcc0>
   13a58:	ldr	lr, [fp, #-84]	; 0xffffffac
   13a5c:	b	1394c <argp_parse@@Base+0x8d0>
   13a60:	ldr	ip, [fp, #-108]	; 0xffffff94
   13a64:	cmp	r9, ip
   13a68:	add	r4, r4, #36	; 0x24
   13a6c:	bcc	13950 <argp_parse@@Base+0x8d4>
   13a70:	ldr	r5, [fp, #-84]	; 0xffffffac
   13a74:	ldr	r0, [fp, #-92]	; 0xffffffa4
   13a78:	b	13304 <argp_parse@@Base+0x288>
   13a7c:	ldr	r3, [fp, #-152]	; 0xffffff68
   13a80:	ldr	r2, [r3, #12]
   13a84:	cmp	r2, r7
   13a88:	bne	13aa0 <argp_parse@@Base+0xa24>
   13a8c:	b	13bd4 <argp_parse@@Base+0xb58>
   13a90:	add	r3, r3, #16
   13a94:	ldr	r2, [r3, #12]
   13a98:	cmp	r2, r7
   13a9c:	beq	13bd4 <argp_parse@@Base+0xb58>
   13aa0:	ldr	r2, [r3]
   13aa4:	cmp	r2, #0
   13aa8:	bne	13a90 <argp_parse@@Base+0xa14>
   13aac:	ldr	r2, [pc, #748]	; 13da0 <argp_parse@@Base+0xd24>
   13ab0:	ldr	r3, [pc, #736]	; 13d98 <argp_parse@@Base+0xd1c>
   13ab4:	ldr	r1, [pc, #744]	; 13da4 <argp_parse@@Base+0xd28>
   13ab8:	sub	r0, fp, #96	; 0x60
   13abc:	bl	18050 <argp_error@@Base>
   13ac0:	b	1390c <argp_parse@@Base+0x890>
   13ac4:	sub	lr, fp, #148	; 0x94
   13ac8:	stm	sp, {ip, lr}
   13acc:	bl	13f94 <argp_parse@@Base+0xf18>
   13ad0:	ldr	r5, [fp, #-148]	; 0xffffff6c
   13ad4:	str	r5, [fp, #-84]	; 0xffffffac
   13ad8:	mov	r7, r0
   13adc:	cmn	r7, #1
   13ae0:	bne	137c8 <argp_parse@@Base+0x74c>
   13ae4:	cmp	r5, #1
   13ae8:	str	r6, [fp, #-100]	; 0xffffff9c
   13aec:	ble	13b0c <argp_parse@@Base+0xa90>
   13af0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13af4:	sub	r3, r5, #-1073741823	; 0xc0000001
   13af8:	ldr	r1, [pc, #680]	; 13da8 <argp_parse@@Base+0xd2c>
   13afc:	ldr	r0, [r2, r3, lsl #2]
   13b00:	bl	110f4 <strcmp@plt>
   13b04:	cmp	r0, #0
   13b08:	streq	r5, [fp, #-72]	; 0xffffffb8
   13b0c:	ldr	r0, [fp, #-92]	; 0xffffffa4
   13b10:	cmp	r5, r0
   13b14:	bge	13304 <argp_parse@@Base+0x288>
   13b18:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13b1c:	tst	r3, #4
   13b20:	beq	13bf8 <argp_parse@@Base+0xb7c>
   13b24:	ldr	r3, [fp, #4]
   13b28:	cmp	r3, #0
   13b2c:	beq	13cd0 <argp_parse@@Base+0xc54>
   13b30:	str	r5, [r3]
   13b34:	ldr	ip, [fp, #-108]	; 0xffffff94
   13b38:	ldr	r3, [fp, #-112]	; 0xffffff90
   13b3c:	sub	r2, ip, #36	; 0x24
   13b40:	cmp	r3, r2
   13b44:	bhi	13c2c <argp_parse@@Base+0xbb0>
   13b48:	ldr	r6, [pc, #604]	; 13dac <argp_parse@@Base+0xd30>
   13b4c:	sub	r4, ip, #72	; 0x48
   13b50:	mov	r7, #0
   13b54:	ldr	r5, [r4, #36]	; 0x24
   13b58:	sub	r2, fp, #96	; 0x60
   13b5c:	cmp	r5, #0
   13b60:	mov	r1, r7
   13b64:	mov	r0, r6
   13b68:	beq	13bc4 <argp_parse@@Base+0xb48>
   13b6c:	ldr	r3, [r4, #68]	; 0x44
   13b70:	ldr	ip, [r4, #48]	; 0x30
   13b74:	str	r3, [fp, #-60]	; 0xffffffc4
   13b78:	ldr	r3, [r4, #60]	; 0x3c
   13b7c:	str	r3, [fp, #-68]	; 0xffffffbc
   13b80:	ldr	r3, [r4, #64]	; 0x40
   13b84:	str	ip, [fp, #-76]	; 0xffffffb4
   13b88:	str	r3, [fp, #-64]	; 0xffffffc0
   13b8c:	blx	r5
   13b90:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13b94:	str	r3, [r4, #68]	; 0x44
   13b98:	ldr	r3, [fp, #-112]	; 0xffffff90
   13b9c:	cmp	r4, r3
   13ba0:	bcc	13c0c <argp_parse@@Base+0xb90>
   13ba4:	cmp	r0, #7
   13ba8:	cmpne	r0, #0
   13bac:	sub	r4, r4, #36	; 0x24
   13bb0:	beq	13b54 <argp_parse@@Base+0xad8>
   13bb4:	ldr	ip, [fp, #-108]	; 0xffffff94
   13bb8:	mov	r5, r0
   13bbc:	sub	ip, ip, #36	; 0x24
   13bc0:	b	134ec <argp_parse@@Base+0x470>
   13bc4:	cmp	r4, r3
   13bc8:	bcc	13c18 <argp_parse@@Base+0xb9c>
   13bcc:	sub	r4, r4, #36	; 0x24
   13bd0:	b	13b54 <argp_parse@@Base+0xad8>
   13bd4:	ldr	r2, [r3]
   13bd8:	ldr	r3, [pc, #448]	; 13da0 <argp_parse@@Base+0xd24>
   13bdc:	cmp	r2, #0
   13be0:	moveq	r2, r3
   13be4:	b	13ab0 <argp_parse@@Base+0xa34>
   13be8:	ldr	r3, [fp, #-140]	; 0xffffff74
   13bec:	cmn	r3, #1
   13bf0:	bne	1390c <argp_parse@@Base+0x890>
   13bf4:	b	137e0 <argp_parse@@Base+0x764>
   13bf8:	ldr	r3, [fp, #-88]	; 0xffffffa8
   13bfc:	ldr	r7, [r3, r5, lsl #2]
   13c00:	add	r5, r5, #1
   13c04:	str	r7, [fp, #-136]	; 0xffffff78
   13c08:	b	13930 <argp_parse@@Base+0x8b4>
   13c0c:	cmp	r0, #7
   13c10:	mov	r5, r0
   13c14:	bne	13c34 <argp_parse@@Base+0xbb8>
   13c18:	ldr	ip, [fp, #-108]	; 0xffffff94
   13c1c:	sub	ip, ip, #36	; 0x24
   13c20:	cmp	ip, r3
   13c24:	movcs	r5, #0
   13c28:	bcs	134f4 <argp_parse@@Base+0x478>
   13c2c:	mov	r5, #0
   13c30:	b	13560 <argp_parse@@Base+0x4e4>
   13c34:	ldr	ip, [fp, #-108]	; 0xffffff94
   13c38:	sub	ip, ip, #36	; 0x24
   13c3c:	b	134ec <argp_parse@@Base+0x470>
   13c40:	ldr	r0, [r2]
   13c44:	cmp	r0, #0
   13c48:	beq	132c4 <argp_parse@@Base+0x248>
   13c4c:	bl	13e68 <argp_parse@@Base+0xdec>
   13c50:	str	r0, [fp, #-56]	; 0xffffffc8
   13c54:	b	132d0 <argp_parse@@Base+0x254>
   13c58:	ldr	r3, [pc, #336]	; 13db0 <argp_parse@@Base+0xd34>
   13c5c:	ldr	r3, [r3]
   13c60:	cmp	r3, #0
   13c64:	addeq	r3, r4, #16
   13c68:	bne	136d0 <argp_parse@@Base+0x654>
   13c6c:	b	136dc <argp_parse@@Base+0x660>
   13c70:	mov	r5, r0
   13c74:	ldr	r2, [fp, #4]
   13c78:	cmp	r2, #0
   13c7c:	bne	13450 <argp_parse@@Base+0x3d4>
   13c80:	cmp	r5, #7
   13c84:	bne	13474 <argp_parse@@Base+0x3f8>
   13c88:	b	1390c <argp_parse@@Base+0x890>
   13c8c:	ldr	r3, [fp, #-112]	; 0xffffff90
   13c90:	sub	ip, ip, #36	; 0x24
   13c94:	cmp	r3, ip
   13c98:	mov	r5, r0
   13c9c:	bls	13c74 <argp_parse@@Base+0xbf8>
   13ca0:	ldr	r2, [fp, #4]
   13ca4:	cmp	r2, #0
   13ca8:	bne	13450 <argp_parse@@Base+0x3d4>
   13cac:	b	1345c <argp_parse@@Base+0x3e0>
   13cb0:	ldr	r3, [fp, #-112]	; 0xffffff90
   13cb4:	sub	r4, ip, #36	; 0x24
   13cb8:	cmp	r4, r3
   13cbc:	mov	r5, r0
   13cc0:	bcs	133bc <argp_parse@@Base+0x340>
   13cc4:	cmp	r5, #7
   13cc8:	beq	13440 <argp_parse@@Base+0x3c4>
   13ccc:	b	13ca0 <argp_parse@@Base+0xc24>
   13cd0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13cd4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13cd8:	tst	r3, #2
   13cdc:	bne	13910 <argp_parse@@Base+0x894>
   13ce0:	cmp	r1, #0
   13ce4:	beq	13910 <argp_parse@@Base+0x894>
   13ce8:	mov	r0, r1
   13cec:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13cf0:	ldr	r1, [pc, #188]	; 13db4 <argp_parse@@Base+0xd38>
   13cf4:	bl	11280 <fprintf@plt>
   13cf8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13cfc:	b	13910 <argp_parse@@Base+0x894>
   13d00:	mov	r5, r0
   13d04:	b	13cc4 <argp_parse@@Base+0xc48>
   13d08:	sub	r4, ip, #36	; 0x24
   13d0c:	cmp	r3, r4
   13d10:	bls	133c8 <argp_parse@@Base+0x34c>
   13d14:	ldr	r2, [fp, #4]
   13d18:	cmp	r2, #0
   13d1c:	bne	1344c <argp_parse@@Base+0x3d0>
   13d20:	b	13b3c <argp_parse@@Base+0xac0>
   13d24:	cmp	r0, #7
   13d28:	mov	r5, r0
   13d2c:	beq	1329c <argp_parse@@Base+0x220>
   13d30:	cmp	r0, #0
   13d34:	beq	1329c <argp_parse@@Base+0x220>
   13d38:	b	13568 <argp_parse@@Base+0x4ec>
   13d3c:	cmp	r0, #0
   13d40:	ldreq	r0, [fp, #-92]	; 0xffffffa4
   13d44:	moveq	r5, r0
   13d48:	streq	r0, [fp, #-84]	; 0xffffffac
   13d4c:	beq	139c0 <argp_parse@@Base+0x944>
   13d50:	cmp	r0, #7
   13d54:	mov	r5, r0
   13d58:	beq	13a70 <argp_parse@@Base+0x9f4>
   13d5c:	ldr	r3, [fp, #-112]	; 0xffffff90
   13d60:	b	13478 <argp_parse@@Base+0x3fc>
   13d64:			; <UNDEFINED> instruction: 0x000308b4
   13d68:			; <UNDEFINED> instruction: 0x000308b0
   13d6c:			; <UNDEFINED> instruction: 0x000308b8
   13d70:			; <UNDEFINED> instruction: 0x000308bc
   13d74:	tsteq	r0, r6
   13d78:	tsteq	r0, r2
   13d7c:	tsteq	r0, r1
   13d80:	tsteq	r0, r5
   13d84:	tsteq	r0, r7
   13d88:	tsteq	r0, r3
   13d8c:	andeq	r0, r3, r0, asr #18
   13d90:	andeq	fp, r1, r4, lsr #16
   13d94:	andeq	fp, r1, r0, asr #16
   13d98:	andeq	fp, r1, ip, asr r8
   13d9c:	andeq	fp, r1, r4, ror r9
   13da0:	andeq	fp, r1, ip, ror #18
   13da4:	andeq	fp, r1, ip, ror r9
   13da8:	andeq	fp, r1, r0, ror r9
   13dac:	tsteq	r0, r4
   13db0:	ldrdeq	r0, [r3], -r8
   13db4:	andeq	fp, r1, r8, lsl #19
   13db8:	cmp	r1, #0
   13dbc:	beq	13dfc <argp_parse@@Base+0xd80>
   13dc0:	ldr	r2, [r1, #52]	; 0x34
   13dc4:	ldr	r3, [r2, #48]	; 0x30
   13dc8:	ldr	r1, [r2, #52]	; 0x34
   13dcc:	cmp	r3, r1
   13dd0:	bcs	13dfc <argp_parse@@Base+0xd80>
   13dd4:	ldr	r2, [r3, #4]
   13dd8:	cmp	r0, r2
   13ddc:	bne	13df0 <argp_parse@@Base+0xd74>
   13de0:	b	13e04 <argp_parse@@Base+0xd88>
   13de4:	ldr	r2, [r3, #4]
   13de8:	cmp	r2, r0
   13dec:	beq	13e04 <argp_parse@@Base+0xd88>
   13df0:	add	r3, r3, #36	; 0x24
   13df4:	cmp	r3, r1
   13df8:	bcc	13de4 <argp_parse@@Base+0xd68>
   13dfc:	mov	r0, #0
   13e00:	bx	lr
   13e04:	ldr	r0, [r3, #24]
   13e08:	bx	lr
   13e0c:	ldr	ip, [pc, #32]	; 13e34 <argp_parse@@Base+0xdb8>
   13e10:	push	{lr}		; (str lr, [sp, #-4]!)
   13e14:	sub	sp, sp, #12
   13e18:	ldm	ip, {r1, ip}
   13e1c:	ldr	r3, [pc, #20]	; 13e38 <argp_parse@@Base+0xdbc>
   13e20:	ldr	r2, [pc, #20]	; 13e3c <argp_parse@@Base+0xdc0>
   13e24:	str	ip, [sp]
   13e28:	bl	146c4 <_obstack_memory_used@@Base+0x390>
   13e2c:	add	sp, sp, #12
   13e30:	pop	{pc}		; (ldr pc, [sp], #4)
   13e34:	ldrdeq	r0, [r3], -ip
   13e38:	andeq	fp, r1, r0, ror sl
   13e3c:	andeq	fp, r1, r0, lsl #21
   13e40:	ldr	r3, [pc, #20]	; 13e5c <argp_parse@@Base+0xde0>
   13e44:	ldr	r2, [pc, #20]	; 13e60 <argp_parse@@Base+0xde4>
   13e48:	ldr	ip, [pc, #20]	; 13e64 <argp_parse@@Base+0xde8>
   13e4c:	str	r0, [r3]
   13e50:	str	ip, [r2]
   13e54:	str	r1, [r3, #4]
   13e58:	bx	lr
   13e5c:	ldrdeq	r0, [r3], -ip
   13e60:	ldrdeq	r0, [r3], -r8
   13e64:	andeq	r3, r1, ip, lsl #28
   13e68:	ldrb	r3, [r0]
   13e6c:	cmp	r3, #47	; 0x2f
   13e70:	bne	13e80 <argp_parse@@Base+0xe04>
   13e74:	ldrb	r3, [r0, #1]!
   13e78:	cmp	r3, #47	; 0x2f
   13e7c:	beq	13e74 <argp_parse@@Base+0xdf8>
   13e80:	cmp	r3, #0
   13e84:	bxeq	lr
   13e88:	mov	r2, #0
   13e8c:	push	{lr}		; (str lr, [sp, #-4]!)
   13e90:	mov	ip, r2
   13e94:	mov	r1, r0
   13e98:	mov	lr, #1
   13e9c:	cmp	r3, #47	; 0x2f
   13ea0:	moveq	r2, lr
   13ea4:	beq	13eb4 <argp_parse@@Base+0xe38>
   13ea8:	cmp	r2, #0
   13eac:	movne	r0, r1
   13eb0:	movne	r2, ip
   13eb4:	ldrb	r3, [r1, #1]!
   13eb8:	cmp	r3, #0
   13ebc:	bne	13e9c <argp_parse@@Base+0xe20>
   13ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ec4:	push	{r4, lr}
   13ec8:	mov	r4, r0
   13ecc:	bl	11268 <strlen@plt>
   13ed0:	cmp	r0, #1
   13ed4:	popls	{r4, pc}
   13ed8:	sub	r3, r0, #1
   13edc:	add	r2, r4, r3
   13ee0:	ldrb	r1, [r4, r3]
   13ee4:	cmp	r1, #47	; 0x2f
   13ee8:	popne	{r4, pc}
   13eec:	cmp	r3, #1
   13ef0:	beq	13f04 <argp_parse@@Base+0xe88>
   13ef4:	ldrb	r1, [r2, #-1]!
   13ef8:	sub	r0, r3, #1
   13efc:	cmp	r1, #47	; 0x2f
   13f00:	beq	13f0c <argp_parse@@Base+0xe90>
   13f04:	mov	r0, r3
   13f08:	pop	{r4, pc}
   13f0c:	mov	r3, r0
   13f10:	b	13eec <argp_parse@@Base+0xe70>
   13f14:	push	{r4, r5, lr}
   13f18:	sub	sp, sp, #12
   13f1c:	mov	r5, r0
   13f20:	bl	1128c <__errno_location@plt>
   13f24:	mov	r2, #0
   13f28:	mov	r4, r0
   13f2c:	ldr	r3, [r0]
   13f30:	str	r2, [r4]
   13f34:	mov	r0, r5
   13f38:	str	r3, [sp]
   13f3c:	str	r3, [sp, #4]
   13f40:	bl	11130 <free@plt>
   13f44:	ldr	r3, [r4]
   13f48:	add	r2, sp, #8
   13f4c:	cmp	r3, #0
   13f50:	moveq	r3, #4
   13f54:	movne	r3, #0
   13f58:	add	r3, r2, r3
   13f5c:	ldr	r3, [r3, #-8]
   13f60:	str	r3, [r4]
   13f64:	add	sp, sp, #12
   13f68:	pop	{r4, r5, pc}
   13f6c:	push	{lr}		; (str lr, [sp, #-4]!)
   13f70:	sub	sp, sp, #20
   13f74:	mov	ip, #0
   13f78:	ldr	lr, [sp, #24]
   13f7c:	str	ip, [sp, #8]
   13f80:	str	lr, [sp]
   13f84:	str	ip, [sp, #4]
   13f88:	bl	18cf4 <argp_error@@Base+0xca4>
   13f8c:	add	sp, sp, #20
   13f90:	pop	{pc}		; (ldr pc, [sp], #4)
   13f94:	push	{r4, lr}
   13f98:	sub	sp, sp, #16
   13f9c:	mov	ip, #0
   13fa0:	ldr	r4, [sp, #24]
   13fa4:	ldr	lr, [sp, #28]
   13fa8:	str	r4, [sp]
   13fac:	str	lr, [sp, #8]
   13fb0:	str	ip, [sp, #12]
   13fb4:	str	ip, [sp, #4]
   13fb8:	bl	18794 <argp_error@@Base+0x744>
   13fbc:	add	sp, sp, #16
   13fc0:	pop	{r4, pc}
   13fc4:	push	{r4, lr}
   13fc8:	sub	sp, sp, #16
   13fcc:	mov	lr, #0
   13fd0:	ldr	r4, [sp, #24]
   13fd4:	mov	ip, #1
   13fd8:	stm	sp, {r4, ip, lr}
   13fdc:	bl	18cf4 <argp_error@@Base+0xca4>
   13fe0:	add	sp, sp, #16
   13fe4:	pop	{r4, pc}
   13fe8:	push	{r4, r5, lr}
   13fec:	sub	sp, sp, #20
   13ff0:	mov	lr, #0
   13ff4:	ldr	r5, [sp, #32]
   13ff8:	ldr	r4, [sp, #36]	; 0x24
   13ffc:	mov	ip, #1
   14000:	str	r5, [sp]
   14004:	str	r4, [sp, #8]
   14008:	str	lr, [sp, #12]
   1400c:	str	ip, [sp, #4]
   14010:	bl	18794 <argp_error@@Base+0x744>
   14014:	add	sp, sp, #20
   14018:	pop	{r4, r5, pc}
   1401c:	ldr	r3, [pc, #28]	; 14040 <argp_parse@@Base+0xfc4>
   14020:	push	{r4, lr}
   14024:	ldr	r0, [r3]
   14028:	ldr	r2, [pc, #20]	; 14044 <argp_parse@@Base+0xfc8>
   1402c:	ldr	r1, [pc, #20]	; 14048 <argp_parse@@Base+0xfcc>
   14030:	bl	11280 <fprintf@plt>
   14034:	ldr	r3, [pc, #16]	; 1404c <argp_parse@@Base+0xfd0>
   14038:	ldr	r0, [r3]
   1403c:	bl	1125c <exit@plt>
   14040:			; <UNDEFINED> instruction: 0x000308b8
   14044:	muleq	r1, r0, sl
   14048:	strdeq	fp, [r1], -r0
   1404c:	muleq	r3, ip, r8
   14050:	ldrb	r3, [r0, #40]	; 0x28
   14054:	tst	r3, #1
   14058:	ldr	r3, [r0, #28]
   1405c:	bne	14068 <argp_parse@@Base+0xfec>
   14060:	mov	r0, r1
   14064:	bx	r3
   14068:	ldr	r0, [r0, #36]	; 0x24
   1406c:	bx	r3
   14070:	ldrb	r3, [r0, #40]	; 0x28
   14074:	tst	r3, #1
   14078:	ldr	r3, [r0, #32]
   1407c:	bne	14088 <argp_parse@@Base+0x100c>
   14080:	mov	r0, r1
   14084:	bx	r3
   14088:	ldr	r0, [r0, #36]	; 0x24
   1408c:	bx	r3
   14090:	push	{r4, r5, r6, lr}
   14094:	subs	r5, r2, #0
   14098:	ldr	r3, [pc, #124]	; 1411c <argp_parse@@Base+0x10a0>
   1409c:	subne	r6, r5, #1
   140a0:	moveq	r6, #7
   140a4:	moveq	r5, #8
   140a8:	cmp	r1, #0
   140ac:	moveq	r1, r3
   140b0:	str	r6, [r0, #24]
   140b4:	str	r1, [r0]
   140b8:	mov	r4, r0
   140bc:	bl	14050 <argp_parse@@Base+0xfd4>
   140c0:	cmp	r0, #0
   140c4:	str	r0, [r4, #4]
   140c8:	beq	14110 <argp_parse@@Base+0x1094>
   140cc:	ldr	r3, [r4]
   140d0:	add	r2, r0, #8
   140d4:	rsb	r5, r5, #0
   140d8:	add	r2, r2, r6
   140dc:	add	r3, r0, r3
   140e0:	and	r2, r2, r5
   140e4:	mov	r1, #0
   140e8:	str	r2, [r4, #8]
   140ec:	str	r2, [r4, #12]
   140f0:	str	r3, [r0]
   140f4:	str	r3, [r4, #16]
   140f8:	str	r1, [r0, #4]
   140fc:	ldrb	r3, [r4, #40]	; 0x28
   14100:	mov	r0, #1
   14104:	and	r3, r3, #249	; 0xf9
   14108:	strb	r3, [r4, #40]	; 0x28
   1410c:	pop	{r4, r5, r6, pc}
   14110:	ldr	r3, [pc, #8]	; 14120 <argp_parse@@Base+0x10a4>
   14114:	ldr	r3, [r3]
   14118:	blx	r3
   1411c:	andeq	r0, r0, r8, ror #31
   14120:	andeq	r0, r3, r0, ror r8

00014124 <_obstack_begin@@Base>:
   14124:	push	{r4, lr}
   14128:	ldrb	lr, [r0, #40]	; 0x28
   1412c:	ldr	r4, [sp, #8]
   14130:	str	r3, [r0, #28]
   14134:	bic	lr, lr, #1
   14138:	str	r4, [r0, #32]
   1413c:	strb	lr, [r0, #40]	; 0x28
   14140:	pop	{r4, lr}
   14144:	b	14090 <argp_parse@@Base+0x1014>

00014148 <_obstack_begin_1@@Base>:
   14148:	push	{r4, r5, lr}
   1414c:	ldrb	lr, [r0, #40]	; 0x28
   14150:	ldr	r5, [sp, #12]
   14154:	ldr	r4, [sp, #16]
   14158:	orr	lr, lr, #1
   1415c:	str	r3, [r0, #28]
   14160:	str	r5, [r0, #32]
   14164:	str	r4, [r0, #36]	; 0x24
   14168:	strb	lr, [r0, #40]	; 0x28
   1416c:	pop	{r4, r5, lr}
   14170:	b	14090 <argp_parse@@Base+0x1014>

00014174 <_obstack_newchunk@@Base>:
   14174:	ldr	r2, [r0, #8]
   14178:	push	{r4, r5, r6, r7, r8, lr}
   1417c:	ldr	r6, [r0, #12]
   14180:	ldr	r3, [r0, #24]
   14184:	sub	r6, r6, r2
   14188:	add	r1, r6, r1
   1418c:	adds	r3, r1, r3
   14190:	movcc	r2, #1
   14194:	movcs	r2, #0
   14198:	cmp	r6, r1
   1419c:	movhi	r1, #0
   141a0:	andls	r1, r2, #1
   141a4:	cmp	r1, #0
   141a8:	bne	141b8 <_obstack_newchunk@@Base+0x44>
   141ac:	ldr	r3, [pc, #204]	; 14280 <_obstack_newchunk@@Base+0x10c>
   141b0:	ldr	r3, [r3]
   141b4:	blx	r3
   141b8:	ldr	r5, [r0]
   141bc:	add	r1, r3, r6, lsr #3
   141c0:	cmp	r3, r5
   141c4:	movcc	r3, r5
   141c8:	add	r1, r1, #100	; 0x64
   141cc:	cmp	r3, r1
   141d0:	movcs	r5, r3
   141d4:	movcc	r5, r1
   141d8:	mov	r1, r5
   141dc:	mov	r4, r0
   141e0:	ldr	r7, [r0, #4]
   141e4:	bl	14050 <argp_parse@@Base+0xfd4>
   141e8:	subs	r8, r0, #0
   141ec:	beq	141ac <_obstack_newchunk@@Base+0x38>
   141f0:	ldr	r2, [r4, #24]
   141f4:	mov	r3, r8
   141f8:	add	r1, r8, r5
   141fc:	str	r8, [r4, #4]
   14200:	str	r7, [r8, #4]
   14204:	str	r1, [r4, #16]
   14208:	str	r1, [r3], #8
   1420c:	add	r3, r3, r2
   14210:	bic	r5, r3, r2
   14214:	mov	r0, r5
   14218:	mov	r2, r6
   1421c:	ldr	r1, [r4, #8]
   14220:	bl	1116c <memcpy@plt>
   14224:	ldrb	r3, [r4, #40]	; 0x28
   14228:	tst	r3, #2
   1422c:	bne	1424c <_obstack_newchunk@@Base+0xd8>
   14230:	ldr	r2, [r4, #24]
   14234:	add	r3, r7, #8
   14238:	add	r3, r3, r2
   1423c:	ldr	r1, [r4, #8]
   14240:	bic	r3, r3, r2
   14244:	cmp	r1, r3
   14248:	beq	14268 <_obstack_newchunk@@Base+0xf4>
   1424c:	ldrb	r3, [r4, #40]	; 0x28
   14250:	add	r2, r5, r6
   14254:	str	r2, [r4, #12]
   14258:	bic	r3, r3, #2
   1425c:	str	r5, [r4, #8]
   14260:	strb	r3, [r4, #40]	; 0x28
   14264:	pop	{r4, r5, r6, r7, r8, pc}
   14268:	ldr	r3, [r7, #4]
   1426c:	mov	r1, r7
   14270:	str	r3, [r8, #4]
   14274:	mov	r0, r4
   14278:	bl	14070 <argp_parse@@Base+0xff4>
   1427c:	b	1424c <_obstack_newchunk@@Base+0xd8>
   14280:	andeq	r0, r3, r0, ror r8

00014284 <_obstack_allocated_p@@Base>:
   14284:	ldr	r0, [r0, #4]
   14288:	cmp	r0, #0
   1428c:	bne	142a0 <_obstack_allocated_p@@Base+0x1c>
   14290:	b	142bc <_obstack_allocated_p@@Base+0x38>
   14294:	ldr	r0, [r0, #4]
   14298:	cmp	r0, #0
   1429c:	bxeq	lr
   142a0:	cmp	r1, r0
   142a4:	bls	14294 <_obstack_allocated_p@@Base+0x10>
   142a8:	ldr	r3, [r0]
   142ac:	cmp	r1, r3
   142b0:	bhi	14294 <_obstack_allocated_p@@Base+0x10>
   142b4:	mov	r0, #1
   142b8:	bx	lr
   142bc:	bx	lr

000142c0 <_obstack_free@@Base>:
   142c0:	push	{r4, r5, r6, lr}
   142c4:	mov	r6, r1
   142c8:	ldr	r4, [r0, #4]
   142cc:	cmp	r4, #0
   142d0:	movne	r5, r0
   142d4:	beq	14310 <_obstack_free@@Base+0x50>
   142d8:	cmp	r6, r4
   142dc:	bls	142ec <_obstack_free@@Base+0x2c>
   142e0:	ldr	r2, [r4]
   142e4:	cmp	r6, r2
   142e8:	bls	1431c <_obstack_free@@Base+0x5c>
   142ec:	mov	r1, r4
   142f0:	mov	r0, r5
   142f4:	ldr	r4, [r4, #4]
   142f8:	bl	14070 <argp_parse@@Base+0xff4>
   142fc:	ldrb	r2, [r5, #40]	; 0x28
   14300:	cmp	r4, #0
   14304:	orr	r2, r2, #2
   14308:	strb	r2, [r5, #40]	; 0x28
   1430c:	bne	142d8 <_obstack_free@@Base+0x18>
   14310:	cmp	r6, #0
   14314:	bne	14330 <_obstack_free@@Base+0x70>
   14318:	pop	{r4, r5, r6, pc}
   1431c:	str	r6, [r5, #12]
   14320:	str	r6, [r5, #8]
   14324:	str	r2, [r5, #16]
   14328:	str	r4, [r5, #4]
   1432c:	pop	{r4, r5, r6, pc}
   14330:	bl	11394 <abort@plt>

00014334 <_obstack_memory_used@@Base>:
   14334:	ldr	r3, [r0, #4]
   14338:	cmp	r3, #0
   1433c:	beq	14360 <_obstack_memory_used@@Base+0x2c>
   14340:	mov	r0, #0
   14344:	ldr	r2, [r3]
   14348:	sub	r2, r2, r3
   1434c:	ldr	r3, [r3, #4]
   14350:	add	r0, r0, r2
   14354:	cmp	r3, #0
   14358:	bne	14344 <_obstack_memory_used@@Base+0x10>
   1435c:	bx	lr
   14360:	mov	r0, r3
   14364:	bx	lr
   14368:	push	{r4, r5, r6, lr}
   1436c:	subs	r4, r0, #0
   14370:	beq	143e4 <_obstack_memory_used@@Base+0xb0>
   14374:	mov	r1, #47	; 0x2f
   14378:	bl	112e0 <strrchr@plt>
   1437c:	subs	r5, r0, #0
   14380:	beq	143d0 <_obstack_memory_used@@Base+0x9c>
   14384:	add	r6, r5, #1
   14388:	sub	r3, r6, r4
   1438c:	cmp	r3, #6
   14390:	ble	143d0 <_obstack_memory_used@@Base+0x9c>
   14394:	mov	r2, #7
   14398:	ldr	r1, [pc, #96]	; 14400 <_obstack_memory_used@@Base+0xcc>
   1439c:	sub	r0, r5, #6
   143a0:	bl	11388 <strncmp@plt>
   143a4:	cmp	r0, #0
   143a8:	bne	143d0 <_obstack_memory_used@@Base+0x9c>
   143ac:	mov	r2, #3
   143b0:	ldr	r1, [pc, #76]	; 14404 <_obstack_memory_used@@Base+0xd0>
   143b4:	mov	r0, r6
   143b8:	bl	11388 <strncmp@plt>
   143bc:	cmp	r0, #0
   143c0:	movne	r4, r6
   143c4:	ldreq	r3, [pc, #60]	; 14408 <_obstack_memory_used@@Base+0xd4>
   143c8:	addeq	r4, r5, #4
   143cc:	streq	r4, [r3]
   143d0:	ldr	r2, [pc, #52]	; 1440c <_obstack_memory_used@@Base+0xd8>
   143d4:	ldr	r3, [pc, #52]	; 14410 <_obstack_memory_used@@Base+0xdc>
   143d8:	str	r4, [r2]
   143dc:	str	r4, [r3]
   143e0:	pop	{r4, r5, r6, pc}
   143e4:	ldr	r3, [pc, #40]	; 14414 <_obstack_memory_used@@Base+0xe0>
   143e8:	mov	r2, #55	; 0x37
   143ec:	mov	r1, #1
   143f0:	ldr	r3, [r3]
   143f4:	ldr	r0, [pc, #28]	; 14418 <_obstack_memory_used@@Base+0xe4>
   143f8:	bl	111c0 <fwrite@plt>
   143fc:	bl	11394 <abort@plt>
   14400:	ldrdeq	fp, [r1], -ip
   14404:	andeq	fp, r1, r4, ror #21
   14408:			; <UNDEFINED> instruction: 0x000308b0
   1440c:	andeq	r0, r3, r4, ror #17
   14410:			; <UNDEFINED> instruction: 0x000308b4
   14414:			; <UNDEFINED> instruction: 0x000308b8
   14418:	andeq	fp, r1, r4, lsr #21
   1441c:	push	{r4, r5, r6, r7, lr}
   14420:	sub	sp, sp, #36	; 0x24
   14424:	cmp	r1, #0
   14428:	mov	r4, r0
   1442c:	ldr	r5, [sp, #56]	; 0x38
   14430:	ldr	r6, [sp, #60]	; 0x3c
   14434:	beq	14674 <_obstack_memory_used@@Base+0x340>
   14438:	str	r3, [sp]
   1443c:	mov	r3, r2
   14440:	mov	r2, r1
   14444:	ldr	r1, [pc, #564]	; 14680 <_obstack_memory_used@@Base+0x34c>
   14448:	bl	11280 <fprintf@plt>
   1444c:	ldr	r3, [pc, #560]	; 14684 <_obstack_memory_used@@Base+0x350>
   14450:	ldr	r2, [pc, #560]	; 14688 <_obstack_memory_used@@Base+0x354>
   14454:	ldr	r1, [pc, #560]	; 1468c <_obstack_memory_used@@Base+0x358>
   14458:	mov	r0, r4
   1445c:	bl	11280 <fprintf@plt>
   14460:	mov	r1, r4
   14464:	mov	r0, #10
   14468:	bl	112f8 <fputc@plt>
   1446c:	ldr	r1, [pc, #540]	; 14690 <_obstack_memory_used@@Base+0x35c>
   14470:	ldr	r2, [pc, #540]	; 14694 <_obstack_memory_used@@Base+0x360>
   14474:	mov	r0, r4
   14478:	bl	11280 <fprintf@plt>
   1447c:	mov	r1, r4
   14480:	mov	r0, #10
   14484:	bl	112f8 <fputc@plt>
   14488:	cmp	r6, #9
   1448c:	ldrls	pc, [pc, r6, lsl #2]
   14490:	b	144bc <_obstack_memory_used@@Base+0x188>
   14494:	strdeq	r4, [r1], -ip
   14498:	andeq	r4, r1, r8, asr #10
   1449c:	andeq	r4, r1, r0, ror #10
   144a0:	andeq	r4, r1, r8, ror r5
   144a4:	muleq	r1, r8, r5
   144a8:	andeq	r4, r1, r0, asr #11
   144ac:	andeq	r4, r1, r0, ror #11
   144b0:	andeq	r4, r1, r8, lsl #12
   144b4:	andeq	r4, r1, r8, lsr r6
   144b8:	andeq	r4, r1, r4, lsl #10
   144bc:	ldr	ip, [r5, #32]
   144c0:	ldr	r1, [r5, #28]
   144c4:	ldm	r5, {r2, r3}
   144c8:	ldr	r7, [r5, #24]
   144cc:	ldr	r6, [r5, #20]
   144d0:	str	ip, [sp, #24]
   144d4:	ldr	lr, [r5, #16]
   144d8:	str	r1, [sp, #20]
   144dc:	ldr	r1, [r5, #8]
   144e0:	ldr	ip, [r5, #12]
   144e4:	mov	r0, r4
   144e8:	str	r7, [sp, #16]
   144ec:	stm	sp, {r1, ip, lr}
   144f0:	str	r6, [sp, #12]
   144f4:	ldr	r1, [pc, #412]	; 14698 <_obstack_memory_used@@Base+0x364>
   144f8:	bl	11280 <fprintf@plt>
   144fc:	add	sp, sp, #36	; 0x24
   14500:	pop	{r4, r5, r6, r7, pc}
   14504:	ldr	ip, [r5, #32]
   14508:	ldr	r1, [r5, #28]
   1450c:	ldm	r5, {r2, r3}
   14510:	ldr	r7, [r5, #24]
   14514:	ldr	r6, [r5, #20]
   14518:	str	ip, [sp, #24]
   1451c:	ldr	lr, [r5, #16]
   14520:	str	r1, [sp, #20]
   14524:	ldr	r1, [r5, #8]
   14528:	ldr	ip, [r5, #12]
   1452c:	mov	r0, r4
   14530:	str	r7, [sp, #16]
   14534:	stm	sp, {r1, ip, lr}
   14538:	str	r6, [sp, #12]
   1453c:	ldr	r1, [pc, #344]	; 1469c <_obstack_memory_used@@Base+0x368>
   14540:	bl	11280 <fprintf@plt>
   14544:	b	144fc <_obstack_memory_used@@Base+0x1c8>
   14548:	ldr	r2, [r5]
   1454c:	mov	r0, r4
   14550:	ldr	r1, [pc, #328]	; 146a0 <_obstack_memory_used@@Base+0x36c>
   14554:	add	sp, sp, #36	; 0x24
   14558:	pop	{r4, r5, r6, r7, lr}
   1455c:	b	11280 <fprintf@plt>
   14560:	mov	r0, r4
   14564:	ldm	r5, {r2, r3}
   14568:	ldr	r1, [pc, #308]	; 146a4 <_obstack_memory_used@@Base+0x370>
   1456c:	add	sp, sp, #36	; 0x24
   14570:	pop	{r4, r5, r6, r7, lr}
   14574:	b	11280 <fprintf@plt>
   14578:	ldr	r1, [r5, #8]
   1457c:	ldm	r5, {r2, r3}
   14580:	mov	r0, r4
   14584:	str	r1, [sp, #56]	; 0x38
   14588:	ldr	r1, [pc, #280]	; 146a8 <_obstack_memory_used@@Base+0x374>
   1458c:	add	sp, sp, #36	; 0x24
   14590:	pop	{r4, r5, r6, r7, lr}
   14594:	b	11280 <fprintf@plt>
   14598:	ldr	r1, [r5, #8]
   1459c:	ldr	ip, [r5, #12]
   145a0:	ldm	r5, {r2, r3}
   145a4:	mov	r0, r4
   145a8:	str	r1, [sp, #56]	; 0x38
   145ac:	str	ip, [sp, #60]	; 0x3c
   145b0:	ldr	r1, [pc, #244]	; 146ac <_obstack_memory_used@@Base+0x378>
   145b4:	add	sp, sp, #36	; 0x24
   145b8:	pop	{r4, r5, r6, r7, lr}
   145bc:	b	11280 <fprintf@plt>
   145c0:	add	r1, r5, #8
   145c4:	ldm	r5, {r2, r3}
   145c8:	ldm	r1, {r1, ip, lr}
   145cc:	mov	r0, r4
   145d0:	stm	sp, {r1, ip, lr}
   145d4:	ldr	r1, [pc, #212]	; 146b0 <_obstack_memory_used@@Base+0x37c>
   145d8:	bl	11280 <fprintf@plt>
   145dc:	b	144fc <_obstack_memory_used@@Base+0x1c8>
   145e0:	add	r1, r5, #8
   145e4:	ldr	r6, [r5, #20]
   145e8:	ldm	r1, {r1, ip, lr}
   145ec:	mov	r0, r4
   145f0:	ldm	r5, {r2, r3}
   145f4:	str	r6, [sp, #12]
   145f8:	stm	sp, {r1, ip, lr}
   145fc:	ldr	r1, [pc, #176]	; 146b4 <_obstack_memory_used@@Base+0x380>
   14600:	bl	11280 <fprintf@plt>
   14604:	b	144fc <_obstack_memory_used@@Base+0x1c8>
   14608:	add	r1, r5, #8
   1460c:	ldr	r7, [r5, #24]
   14610:	ldm	r1, {r1, ip, lr}
   14614:	mov	r0, r4
   14618:	ldr	r6, [r5, #20]
   1461c:	ldm	r5, {r2, r3}
   14620:	stm	sp, {r1, ip, lr}
   14624:	str	r7, [sp, #16]
   14628:	str	r6, [sp, #12]
   1462c:	ldr	r1, [pc, #132]	; 146b8 <_obstack_memory_used@@Base+0x384>
   14630:	bl	11280 <fprintf@plt>
   14634:	b	144fc <_obstack_memory_used@@Base+0x1c8>
   14638:	ldr	r1, [r5, #28]
   1463c:	ldm	r5, {r2, r3}
   14640:	ldr	r7, [r5, #24]
   14644:	ldr	r6, [r5, #20]
   14648:	ldr	lr, [r5, #16]
   1464c:	str	r1, [sp, #20]
   14650:	ldr	r1, [r5, #8]
   14654:	ldr	ip, [r5, #12]
   14658:	mov	r0, r4
   1465c:	str	r7, [sp, #16]
   14660:	stm	sp, {r1, ip, lr}
   14664:	str	r6, [sp, #12]
   14668:	ldr	r1, [pc, #76]	; 146bc <_obstack_memory_used@@Base+0x388>
   1466c:	bl	11280 <fprintf@plt>
   14670:	b	144fc <_obstack_memory_used@@Base+0x1c8>
   14674:	ldr	r1, [pc, #68]	; 146c0 <_obstack_memory_used@@Base+0x38c>
   14678:	bl	11280 <fprintf@plt>
   1467c:	b	1444c <_obstack_memory_used@@Base+0x118>
   14680:	andeq	fp, r1, r8, ror #21
   14684:	andeq	r0, r0, r6, ror #15
   14688:	strdeq	fp, [r1], -ip
   1468c:	strdeq	fp, [r1], -ip
   14690:	andeq	fp, r1, r4, lsr #22
   14694:	andeq	fp, r1, r0, lsl #22
   14698:	andeq	fp, r1, r0, lsl sp
   1469c:	ldrdeq	fp, [r1], -ip
   146a0:	ldrdeq	fp, [r1], -r0
   146a4:	andeq	fp, r1, r0, ror #23
   146a8:	strdeq	fp, [r1], -r8
   146ac:	andeq	fp, r1, r4, lsl ip
   146b0:	andeq	fp, r1, r4, lsr ip
   146b4:	andeq	fp, r1, r8, asr ip
   146b8:	andeq	fp, r1, r0, lsl #25
   146bc:	andeq	fp, r1, ip, lsr #25
   146c0:	strdeq	fp, [r1], -r4
   146c4:	push	{r4, r5, lr}
   146c8:	sub	sp, sp, #12
   146cc:	ldr	r5, [sp, #24]
   146d0:	ldr	ip, [r5]
   146d4:	cmp	ip, #0
   146d8:	beq	146f4 <_obstack_memory_used@@Base+0x3c0>
   146dc:	mov	lr, r5
   146e0:	mov	ip, #0
   146e4:	ldr	r4, [lr, #4]!
   146e8:	add	ip, ip, #1
   146ec:	cmp	r4, #0
   146f0:	bne	146e4 <_obstack_memory_used@@Base+0x3b0>
   146f4:	stm	sp, {r5, ip}
   146f8:	bl	1441c <_obstack_memory_used@@Base+0xe8>
   146fc:	add	sp, sp, #12
   14700:	pop	{r4, r5, pc}
   14704:	push	{r4, r5, lr}
   14708:	sub	sp, sp, #52	; 0x34
   1470c:	add	r5, sp, #4
   14710:	ldr	r4, [sp, #64]	; 0x40
   14714:	mov	ip, #0
   14718:	sub	r4, r4, #4
   1471c:	ldr	lr, [r4, #4]!
   14720:	cmp	lr, #0
   14724:	str	lr, [r5, #4]!
   14728:	beq	14738 <_obstack_memory_used@@Base+0x404>
   1472c:	add	ip, ip, #1
   14730:	cmp	ip, #10
   14734:	bne	1471c <_obstack_memory_used@@Base+0x3e8>
   14738:	add	lr, sp, #8
   1473c:	str	ip, [sp, #4]
   14740:	str	lr, [sp]
   14744:	bl	1441c <_obstack_memory_used@@Base+0xe8>
   14748:	add	sp, sp, #52	; 0x34
   1474c:	pop	{r4, r5, pc}
   14750:	push	{r3}		; (str r3, [sp, #-4]!)
   14754:	push	{r4, lr}
   14758:	sub	sp, sp, #60	; 0x3c
   1475c:	add	lr, sp, #56	; 0x38
   14760:	add	r3, sp, #72	; 0x48
   14764:	str	r3, [lr, #-44]!	; 0xffffffd4
   14768:	add	r4, sp, #68	; 0x44
   1476c:	mov	r3, #0
   14770:	ldr	ip, [r4, #4]!
   14774:	cmp	ip, #0
   14778:	str	ip, [lr, #4]!
   1477c:	beq	1478c <_obstack_memory_used@@Base+0x458>
   14780:	add	r3, r3, #1
   14784:	cmp	r3, #10
   14788:	bne	14770 <_obstack_memory_used@@Base+0x43c>
   1478c:	add	ip, sp, #16
   14790:	str	r3, [sp, #4]
   14794:	str	ip, [sp]
   14798:	ldr	r3, [sp, #68]	; 0x44
   1479c:	bl	1441c <_obstack_memory_used@@Base+0xe8>
   147a0:	add	sp, sp, #60	; 0x3c
   147a4:	pop	{r4, lr}
   147a8:	add	sp, sp, #4
   147ac:	bx	lr
   147b0:	ldr	r3, [pc, #56]	; 147f0 <_obstack_memory_used@@Base+0x4bc>
   147b4:	push	{r4, lr}
   147b8:	mov	r0, #10
   147bc:	ldr	r1, [r3]
   147c0:	bl	112f8 <fputc@plt>
   147c4:	ldr	r1, [pc, #40]	; 147f4 <_obstack_memory_used@@Base+0x4c0>
   147c8:	ldr	r0, [pc, #40]	; 147f8 <_obstack_memory_used@@Base+0x4c4>
   147cc:	bl	1110c <printf@plt>
   147d0:	ldr	r1, [pc, #36]	; 147fc <_obstack_memory_used@@Base+0x4c8>
   147d4:	ldr	r2, [pc, #36]	; 14800 <_obstack_memory_used@@Base+0x4cc>
   147d8:	ldr	r0, [pc, #36]	; 14804 <_obstack_memory_used@@Base+0x4d0>
   147dc:	bl	1110c <printf@plt>
   147e0:	ldr	r1, [pc, #32]	; 14808 <_obstack_memory_used@@Base+0x4d4>
   147e4:	ldr	r0, [pc, #32]	; 1480c <_obstack_memory_used@@Base+0x4d8>
   147e8:	pop	{r4, lr}
   147ec:	b	1110c <printf@plt>
   147f0:			; <UNDEFINED> instruction: 0x000308bc
   147f4:	andeq	fp, r1, ip, asr #26
   147f8:	andeq	fp, r1, r4, ror #26
   147fc:	andeq	fp, r1, r0, lsl #21
   14800:	andeq	fp, r1, r8, ror sp
   14804:	andeq	fp, r1, r0, lsr #27
   14808:			; <UNDEFINED> instruction: 0x0001bdb4
   1480c:	ldrdeq	fp, [r1], -r4
   14810:	push	{r4, lr}
   14814:	bl	14dcc <_obstack_memory_used@@Base+0xa98>
   14818:	cmp	r0, #0
   1481c:	popne	{r4, pc}
   14820:	bl	14d58 <_obstack_memory_used@@Base+0xa24>
   14824:	push	{r4, lr}
   14828:	bl	14dcc <_obstack_memory_used@@Base+0xa98>
   1482c:	cmp	r0, #0
   14830:	popne	{r4, pc}
   14834:	bl	14d58 <_obstack_memory_used@@Base+0xa24>
   14838:	push	{r4, lr}
   1483c:	bl	14dcc <_obstack_memory_used@@Base+0xa98>
   14840:	cmp	r0, #0
   14844:	popne	{r4, pc}
   14848:	bl	14d58 <_obstack_memory_used@@Base+0xa24>
   1484c:	push	{r4, r5, r6, lr}
   14850:	mov	r5, r0
   14854:	mov	r4, r1
   14858:	bl	14df8 <_obstack_memory_used@@Base+0xac4>
   1485c:	cmp	r0, #0
   14860:	popne	{r4, r5, r6, pc}
   14864:	adds	r4, r4, #0
   14868:	movne	r4, #1
   1486c:	cmp	r5, #0
   14870:	orreq	r4, r4, #1
   14874:	cmp	r4, #0
   14878:	popeq	{r4, r5, r6, pc}
   1487c:	bl	14d58 <_obstack_memory_used@@Base+0xa24>
   14880:	push	{r4, lr}
   14884:	cmp	r1, #0
   14888:	orreq	r1, r1, #1
   1488c:	bl	14df8 <_obstack_memory_used@@Base+0xac4>
   14890:	cmp	r0, #0
   14894:	popne	{r4, pc}
   14898:	bl	14d58 <_obstack_memory_used@@Base+0xa24>
   1489c:	push	{r4, r5, r6, lr}
   148a0:	mov	r6, r0
   148a4:	mov	r5, r1
   148a8:	mov	r4, r2
   148ac:	bl	18d88 <argp_error@@Base+0xd38>
   148b0:	cmp	r0, #0
   148b4:	popne	{r4, r5, r6, pc}
   148b8:	cmp	r6, #0
   148bc:	beq	148cc <_obstack_memory_used@@Base+0x598>
   148c0:	cmp	r5, #0
   148c4:	cmpne	r4, #0
   148c8:	popeq	{r4, r5, r6, pc}
   148cc:	bl	14d58 <_obstack_memory_used@@Base+0xa24>
   148d0:	b	1489c <_obstack_memory_used@@Base+0x568>
   148d4:	cmp	r2, #0
   148d8:	cmpne	r1, #0
   148dc:	moveq	r2, #1
   148e0:	moveq	r1, r2
   148e4:	push	{r4, lr}
   148e8:	bl	18d88 <argp_error@@Base+0xd38>
   148ec:	cmp	r0, #0
   148f0:	popne	{r4, pc}
   148f4:	bl	14d58 <_obstack_memory_used@@Base+0xa24>
   148f8:	mov	r2, r1
   148fc:	mov	r1, r0
   14900:	mov	r0, #0
   14904:	b	1489c <_obstack_memory_used@@Base+0x568>
   14908:	mov	r2, r1
   1490c:	mov	r1, r0
   14910:	mov	r0, #0
   14914:	b	148d4 <_obstack_memory_used@@Base+0x5a0>
   14918:	push	{r4, r5, r6, lr}
   1491c:	subs	r6, r0, #0
   14920:	sub	sp, sp, #8
   14924:	mov	r5, r1
   14928:	ldr	r4, [r1]
   1492c:	beq	14968 <_obstack_memory_used@@Base+0x634>
   14930:	lsr	r1, r4, #1
   14934:	add	r3, r1, #1
   14938:	mvn	r3, r3
   1493c:	cmp	r4, r3
   14940:	bhi	14964 <_obstack_memory_used@@Base+0x630>
   14944:	add	r4, r4, #1
   14948:	add	r4, r4, r1
   1494c:	mov	r0, r6
   14950:	mov	r1, r4
   14954:	bl	1489c <_obstack_memory_used@@Base+0x568>
   14958:	str	r4, [r5]
   1495c:	add	sp, sp, #8
   14960:	pop	{r4, r5, r6, pc}
   14964:	bl	14d58 <_obstack_memory_used@@Base+0xa24>
   14968:	cmp	r4, #0
   1496c:	bne	1494c <_obstack_memory_used@@Base+0x618>
   14970:	mov	r1, r2
   14974:	mov	r0, #64	; 0x40
   14978:	str	r2, [sp, #4]
   1497c:	bl	1959c <argp_error@@Base+0x154c>
   14980:	ldr	r2, [sp, #4]
   14984:	cmp	r0, #0
   14988:	movne	r4, r0
   1498c:	addeq	r4, r0, #1
   14990:	b	1494c <_obstack_memory_used@@Base+0x618>
   14994:	mov	r2, #1
   14998:	b	14918 <_obstack_memory_used@@Base+0x5e4>
   1499c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149a0:	sub	sp, sp, #12
   149a4:	ldr	r6, [r1]
   149a8:	mov	sl, r1
   149ac:	mov	r9, r0
   149b0:	asrs	r4, r6, #1
   149b4:	mov	r5, r2
   149b8:	mov	fp, r3
   149bc:	ldr	r7, [sp, #48]	; 0x30
   149c0:	bmi	14b2c <_obstack_memory_used@@Base+0x7f8>
   149c4:	mvn	r3, #-2147483648	; 0x80000000
   149c8:	sub	r3, r3, r4
   149cc:	cmp	r6, r3
   149d0:	movle	r3, #0
   149d4:	movgt	r3, #1
   149d8:	mvn	r8, fp
   149dc:	cmp	r3, #0
   149e0:	addeq	r4, r4, r6
   149e4:	mvnne	r4, #-2147483648	; 0x80000000
   149e8:	lsr	r8, r8, #31
   149ec:	cmp	fp, r4
   149f0:	movge	r3, #0
   149f4:	andlt	r3, r8, #1
   149f8:	cmp	r3, #0
   149fc:	beq	14ae4 <_obstack_memory_used@@Base+0x7b0>
   14a00:	cmp	r7, #0
   14a04:	blt	14bb4 <_obstack_memory_used@@Base+0x880>
   14a08:	bne	14bac <_obstack_memory_used@@Base+0x878>
   14a0c:	mov	r2, #64	; 0x40
   14a10:	mov	r1, r7
   14a14:	mov	r0, r2
   14a18:	str	r2, [sp, #4]
   14a1c:	bl	197a8 <argp_error@@Base+0x1758>
   14a20:	ldr	r2, [sp, #4]
   14a24:	mov	r1, r7
   14a28:	mov	r4, r0
   14a2c:	mov	r0, r2
   14a30:	bl	199c8 <argp_error@@Base+0x1978>
   14a34:	ldr	r2, [sp, #4]
   14a38:	sub	r1, r2, r1
   14a3c:	cmp	r9, #0
   14a40:	sub	r3, r4, r6
   14a44:	streq	r9, [sl]
   14a48:	cmp	r3, r5
   14a4c:	bge	14ad0 <_obstack_memory_used@@Base+0x79c>
   14a50:	cmp	r5, #0
   14a54:	blt	14b40 <_obstack_memory_used@@Base+0x80c>
   14a58:	cmp	r6, #0
   14a5c:	blt	14a7c <_obstack_memory_used@@Base+0x748>
   14a60:	mvn	r3, #-2147483648	; 0x80000000
   14a64:	sub	r3, r3, r5
   14a68:	cmp	r6, r3
   14a6c:	movle	r3, #0
   14a70:	movgt	r3, #1
   14a74:	cmp	r3, #0
   14a78:	bne	14c3c <_obstack_memory_used@@Base+0x908>
   14a7c:	add	r5, r6, r5
   14a80:	cmp	fp, r5
   14a84:	movge	r8, #0
   14a88:	andlt	r8, r8, #1
   14a8c:	cmp	r8, #0
   14a90:	mov	r4, r5
   14a94:	bne	14c3c <_obstack_memory_used@@Base+0x908>
   14a98:	cmp	r7, #0
   14a9c:	blt	14b54 <_obstack_memory_used@@Base+0x820>
   14aa0:	beq	14acc <_obstack_memory_used@@Base+0x798>
   14aa4:	cmp	r5, #0
   14aa8:	blt	14bfc <_obstack_memory_used@@Base+0x8c8>
   14aac:	mov	r1, r7
   14ab0:	mvn	r0, #-2147483648	; 0x80000000
   14ab4:	bl	197a8 <argp_error@@Base+0x1758>
   14ab8:	cmp	r5, r0
   14abc:	movle	r0, #0
   14ac0:	movgt	r0, #1
   14ac4:	cmp	r0, #0
   14ac8:	bne	14c3c <_obstack_memory_used@@Base+0x908>
   14acc:	mul	r1, r5, r7
   14ad0:	mov	r0, r9
   14ad4:	bl	1484c <_obstack_memory_used@@Base+0x518>
   14ad8:	str	r4, [sl]
   14adc:	add	sp, sp, #12
   14ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ae4:	cmp	r7, #0
   14ae8:	blt	14b80 <_obstack_memory_used@@Base+0x84c>
   14aec:	beq	14a0c <_obstack_memory_used@@Base+0x6d8>
   14af0:	cmp	r4, #0
   14af4:	blt	14bbc <_obstack_memory_used@@Base+0x888>
   14af8:	mov	r1, r7
   14afc:	mvn	r0, #-2147483648	; 0x80000000
   14b00:	bl	197a8 <argp_error@@Base+0x1758>
   14b04:	cmp	r0, r4
   14b08:	movge	r0, #0
   14b0c:	movlt	r0, #1
   14b10:	cmp	r0, #0
   14b14:	mvnne	r2, #-2147483648	; 0x80000000
   14b18:	bne	14a10 <_obstack_memory_used@@Base+0x6dc>
   14b1c:	mul	r1, r7, r4
   14b20:	cmp	r1, #63	; 0x3f
   14b24:	bgt	14a3c <_obstack_memory_used@@Base+0x708>
   14b28:	b	14a0c <_obstack_memory_used@@Base+0x6d8>
   14b2c:	rsb	r3, r4, #-2147483648	; 0x80000000
   14b30:	cmp	r6, r3
   14b34:	movge	r3, #0
   14b38:	movlt	r3, #1
   14b3c:	b	149d8 <_obstack_memory_used@@Base+0x6a4>
   14b40:	rsb	r3, r5, #-2147483648	; 0x80000000
   14b44:	cmp	r6, r3
   14b48:	movge	r3, #0
   14b4c:	movlt	r3, #1
   14b50:	b	14a74 <_obstack_memory_used@@Base+0x740>
   14b54:	cmp	r5, #0
   14b58:	blt	14be0 <_obstack_memory_used@@Base+0x8ac>
   14b5c:	cmn	r7, #1
   14b60:	beq	14acc <_obstack_memory_used@@Base+0x798>
   14b64:	mov	r1, r7
   14b68:	mov	r0, #-2147483648	; 0x80000000
   14b6c:	bl	197a8 <argp_error@@Base+0x1758>
   14b70:	cmp	r5, r0
   14b74:	movle	r0, #0
   14b78:	movgt	r0, #1
   14b7c:	b	14ac4 <_obstack_memory_used@@Base+0x790>
   14b80:	cmp	r4, #0
   14b84:	blt	14c20 <_obstack_memory_used@@Base+0x8ec>
   14b88:	cmn	r7, #1
   14b8c:	beq	14b1c <_obstack_memory_used@@Base+0x7e8>
   14b90:	mov	r1, r7
   14b94:	mov	r0, #-2147483648	; 0x80000000
   14b98:	bl	197a8 <argp_error@@Base+0x1758>
   14b9c:	cmp	r0, r4
   14ba0:	movge	r0, #0
   14ba4:	movlt	r0, #1
   14ba8:	b	14b10 <_obstack_memory_used@@Base+0x7dc>
   14bac:	mov	r4, fp
   14bb0:	b	14af8 <_obstack_memory_used@@Base+0x7c4>
   14bb4:	mov	r4, fp
   14bb8:	b	14b88 <_obstack_memory_used@@Base+0x854>
   14bbc:	cmn	r4, #1
   14bc0:	beq	14b1c <_obstack_memory_used@@Base+0x7e8>
   14bc4:	mov	r1, r4
   14bc8:	mov	r0, #-2147483648	; 0x80000000
   14bcc:	bl	197a8 <argp_error@@Base+0x1758>
   14bd0:	cmp	r7, r0
   14bd4:	movle	r0, #0
   14bd8:	movgt	r0, #1
   14bdc:	b	14b10 <_obstack_memory_used@@Base+0x7dc>
   14be0:	mov	r1, r7
   14be4:	mvn	r0, #-2147483648	; 0x80000000
   14be8:	bl	197a8 <argp_error@@Base+0x1758>
   14bec:	cmp	r5, r0
   14bf0:	movge	r0, #0
   14bf4:	movlt	r0, #1
   14bf8:	b	14ac4 <_obstack_memory_used@@Base+0x790>
   14bfc:	cmn	r5, #1
   14c00:	beq	14acc <_obstack_memory_used@@Base+0x798>
   14c04:	mov	r1, r5
   14c08:	mov	r0, #-2147483648	; 0x80000000
   14c0c:	bl	197a8 <argp_error@@Base+0x1758>
   14c10:	cmp	r7, r0
   14c14:	movle	r0, #0
   14c18:	movgt	r0, #1
   14c1c:	b	14ac4 <_obstack_memory_used@@Base+0x790>
   14c20:	mov	r1, r7
   14c24:	mvn	r0, #-2147483648	; 0x80000000
   14c28:	bl	197a8 <argp_error@@Base+0x1758>
   14c2c:	cmp	r0, r4
   14c30:	movle	r0, #0
   14c34:	movgt	r0, #1
   14c38:	b	14b10 <_obstack_memory_used@@Base+0x7dc>
   14c3c:	bl	14d58 <_obstack_memory_used@@Base+0xa24>
   14c40:	push	{r4, lr}
   14c44:	mov	r1, #1
   14c48:	bl	14d84 <_obstack_memory_used@@Base+0xa50>
   14c4c:	cmp	r0, #0
   14c50:	popne	{r4, pc}
   14c54:	bl	14d58 <_obstack_memory_used@@Base+0xa24>
   14c58:	push	{r4, lr}
   14c5c:	mov	r1, #1
   14c60:	bl	14d84 <_obstack_memory_used@@Base+0xa50>
   14c64:	cmp	r0, #0
   14c68:	popne	{r4, pc}
   14c6c:	bl	14d58 <_obstack_memory_used@@Base+0xa24>
   14c70:	push	{r4, lr}
   14c74:	bl	14d84 <_obstack_memory_used@@Base+0xa50>
   14c78:	cmp	r0, #0
   14c7c:	popne	{r4, pc}
   14c80:	bl	14d58 <_obstack_memory_used@@Base+0xa24>
   14c84:	push	{r4, lr}
   14c88:	bl	14d84 <_obstack_memory_used@@Base+0xa50>
   14c8c:	cmp	r0, #0
   14c90:	popne	{r4, pc}
   14c94:	bl	14d58 <_obstack_memory_used@@Base+0xa24>
   14c98:	push	{r4, r5, r6, lr}
   14c9c:	mov	r6, r0
   14ca0:	mov	r0, r1
   14ca4:	mov	r4, r1
   14ca8:	bl	14dcc <_obstack_memory_used@@Base+0xa98>
   14cac:	subs	r5, r0, #0
   14cb0:	beq	14cc8 <_obstack_memory_used@@Base+0x994>
   14cb4:	mov	r2, r4
   14cb8:	mov	r1, r6
   14cbc:	bl	1116c <memcpy@plt>
   14cc0:	mov	r0, r5
   14cc4:	pop	{r4, r5, r6, pc}
   14cc8:	bl	14d58 <_obstack_memory_used@@Base+0xa24>
   14ccc:	push	{r4, r5, r6, lr}
   14cd0:	mov	r6, r0
   14cd4:	mov	r0, r1
   14cd8:	mov	r4, r1
   14cdc:	bl	14dcc <_obstack_memory_used@@Base+0xa98>
   14ce0:	subs	r5, r0, #0
   14ce4:	beq	14cfc <_obstack_memory_used@@Base+0x9c8>
   14ce8:	mov	r2, r4
   14cec:	mov	r1, r6
   14cf0:	bl	1116c <memcpy@plt>
   14cf4:	mov	r0, r5
   14cf8:	pop	{r4, r5, r6, pc}
   14cfc:	bl	14d58 <_obstack_memory_used@@Base+0xa24>
   14d00:	push	{r4, r5, r6, lr}
   14d04:	mov	r6, r0
   14d08:	add	r0, r1, #1
   14d0c:	mov	r4, r1
   14d10:	bl	14dcc <_obstack_memory_used@@Base+0xa98>
   14d14:	subs	r5, r0, #0
   14d18:	beq	14d38 <_obstack_memory_used@@Base+0xa04>
   14d1c:	mov	r3, #0
   14d20:	mov	r1, r6
   14d24:	strb	r3, [r5, r4]
   14d28:	mov	r2, r4
   14d2c:	bl	1116c <memcpy@plt>
   14d30:	mov	r0, r5
   14d34:	pop	{r4, r5, r6, pc}
   14d38:	bl	14d58 <_obstack_memory_used@@Base+0xa24>
   14d3c:	push	{r4, lr}
   14d40:	mov	r4, r0
   14d44:	bl	11268 <strlen@plt>
   14d48:	add	r1, r0, #1
   14d4c:	mov	r0, r4
   14d50:	pop	{r4, lr}
   14d54:	b	14c98 <_obstack_memory_used@@Base+0x964>
   14d58:	ldr	r1, [pc, #24]	; 14d78 <_obstack_memory_used@@Base+0xa44>
   14d5c:	push	{r4, lr}
   14d60:	ldr	r0, [r1]
   14d64:	ldr	r3, [pc, #16]	; 14d7c <_obstack_memory_used@@Base+0xa48>
   14d68:	ldr	r2, [pc, #16]	; 14d80 <_obstack_memory_used@@Base+0xa4c>
   14d6c:	mov	r1, #0
   14d70:	bl	111e4 <error@plt>
   14d74:	bl	11394 <abort@plt>
   14d78:	muleq	r3, ip, r8
   14d7c:	muleq	r1, r0, sl
   14d80:	andeq	fp, r1, r0, ror #18
   14d84:	cmp	r1, #0
   14d88:	cmpne	r0, #0
   14d8c:	moveq	r1, #1
   14d90:	moveq	r0, r1
   14d94:	umull	r2, r3, r0, r1
   14d98:	adds	r3, r3, #0
   14d9c:	movne	r3, #1
   14da0:	cmp	r2, #0
   14da4:	blt	14db4 <_obstack_memory_used@@Base+0xa80>
   14da8:	cmp	r3, #0
   14dac:	bne	14db4 <_obstack_memory_used@@Base+0xa80>
   14db0:	b	110c4 <calloc@plt>
   14db4:	push	{r4, lr}
   14db8:	bl	1128c <__errno_location@plt>
   14dbc:	mov	r3, #12
   14dc0:	str	r3, [r0]
   14dc4:	mov	r0, #0
   14dc8:	pop	{r4, pc}
   14dcc:	cmp	r0, #0
   14dd0:	moveq	r0, #1
   14dd4:	cmp	r0, #0
   14dd8:	blt	14de0 <_obstack_memory_used@@Base+0xaac>
   14ddc:	b	11208 <malloc@plt>
   14de0:	push	{r4, lr}
   14de4:	bl	1128c <__errno_location@plt>
   14de8:	mov	r3, #12
   14dec:	str	r3, [r0]
   14df0:	mov	r0, #0
   14df4:	pop	{r4, pc}
   14df8:	cmp	r0, #0
   14dfc:	beq	14e20 <_obstack_memory_used@@Base+0xaec>
   14e00:	cmp	r1, #0
   14e04:	push	{lr}		; (str lr, [sp, #-4]!)
   14e08:	sub	sp, sp, #12
   14e0c:	beq	14e28 <_obstack_memory_used@@Base+0xaf4>
   14e10:	blt	14e40 <_obstack_memory_used@@Base+0xb0c>
   14e14:	add	sp, sp, #12
   14e18:	pop	{lr}		; (ldr lr, [sp], #4)
   14e1c:	b	1119c <realloc@plt>
   14e20:	mov	r0, r1
   14e24:	b	14dcc <_obstack_memory_used@@Base+0xa98>
   14e28:	str	r1, [sp, #4]
   14e2c:	bl	13f14 <argp_parse@@Base+0xe98>
   14e30:	ldr	r3, [sp, #4]
   14e34:	mov	r0, r3
   14e38:	add	sp, sp, #12
   14e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e40:	bl	1128c <__errno_location@plt>
   14e44:	mov	r2, #12
   14e48:	mov	r3, #0
   14e4c:	str	r2, [r0]
   14e50:	b	14e34 <_obstack_memory_used@@Base+0xb00>
   14e54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e58:	sub	sp, sp, #20
   14e5c:	ldr	r5, [r0, #4]
   14e60:	ldr	r4, [r0]
   14e64:	cmp	r5, #0
   14e68:	ldr	r7, [r0, #8]
   14e6c:	beq	14f44 <_obstack_memory_used@@Base+0xc10>
   14e70:	stmib	sp, {r1, r2, r3}
   14e74:	mov	r6, #1
   14e78:	str	r4, [sp]
   14e7c:	mov	r8, #0
   14e80:	b	14ea0 <_obstack_memory_used@@Base+0xb6c>
   14e84:	mov	r3, r6
   14e88:	subs	r5, r5, #1
   14e8c:	moveq	r3, #0
   14e90:	andne	r3, r3, #1
   14e94:	cmp	r3, #0
   14e98:	add	r4, r4, #24
   14e9c:	beq	14f0c <_obstack_memory_used@@Base+0xbd8>
   14ea0:	ldr	fp, [r4, #12]
   14ea4:	ands	r9, fp, #8
   14ea8:	movne	r3, r6
   14eac:	movne	r9, r8
   14eb0:	bne	14e88 <_obstack_memory_used@@Base+0xb54>
   14eb4:	ldr	sl, [r4, #4]
   14eb8:	sub	r3, sl, #1
   14ebc:	cmp	r3, #254	; 0xfe
   14ec0:	bhi	14e84 <_obstack_memory_used@@Base+0xb50>
   14ec4:	bl	11250 <__ctype_b_loc@plt>
   14ec8:	lsl	r3, sl, #1
   14ecc:	ldr	r1, [r0]
   14ed0:	ldrh	r3, [r1, r3]
   14ed4:	tst	r3, #16384	; 0x4000
   14ed8:	beq	14e84 <_obstack_memory_used@@Base+0xb50>
   14edc:	ldrb	r3, [r7]
   14ee0:	cmp	r3, sl
   14ee4:	bne	14e84 <_obstack_memory_used@@Base+0xb50>
   14ee8:	ldr	r3, [sp]
   14eec:	tst	fp, #4
   14ef0:	moveq	r3, r4
   14ef4:	tst	fp, #2
   14ef8:	str	r3, [sp]
   14efc:	movne	r3, r6
   14f00:	beq	14f1c <_obstack_memory_used@@Base+0xbe8>
   14f04:	add	r7, r7, #1
   14f08:	b	14e88 <_obstack_memory_used@@Base+0xb54>
   14f0c:	mov	sl, r9
   14f10:	mov	r0, sl
   14f14:	add	sp, sp, #20
   14f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f1c:	ldr	r3, [sp, #12]
   14f20:	ldr	r2, [sp, #8]
   14f24:	ldr	r1, [sp]
   14f28:	mov	r0, r4
   14f2c:	ldr	ip, [sp, #4]
   14f30:	blx	ip
   14f34:	clz	r3, r0
   14f38:	mov	r9, r0
   14f3c:	lsr	r3, r3, #5
   14f40:	b	14f04 <_obstack_memory_used@@Base+0xbd0>
   14f44:	mov	sl, r5
   14f48:	b	14f10 <_obstack_memory_used@@Base+0xbdc>
   14f4c:	push	{r4, r5, r6, lr}
   14f50:	ldr	r4, [r0, #12]
   14f54:	ands	r4, r4, #8
   14f58:	movne	r4, #0
   14f5c:	bne	14f88 <_obstack_memory_used@@Base+0xc54>
   14f60:	ldr	r5, [r0, #4]
   14f64:	sub	r3, r5, #1
   14f68:	cmp	r3, #254	; 0xfe
   14f6c:	bhi	14f88 <_obstack_memory_used@@Base+0xc54>
   14f70:	bl	11250 <__ctype_b_loc@plt>
   14f74:	lsl	r3, r5, #1
   14f78:	ldr	r2, [r0]
   14f7c:	ldrh	r3, [r2, r3]
   14f80:	tst	r3, #16384	; 0x4000
   14f84:	movne	r4, r5
   14f88:	mov	r0, r4
   14f8c:	pop	{r4, r5, r6, pc}
   14f90:	push	{r4, lr}
   14f94:	mov	r4, r0
   14f98:	bl	11250 <__ctype_b_loc@plt>
   14f9c:	ldr	r2, [r4]
   14fa0:	ldr	lr, [r0]
   14fa4:	b	14fac <_obstack_memory_used@@Base+0xc78>
   14fa8:	str	r2, [r4]
   14fac:	ldrb	r1, [r2]
   14fb0:	mov	r3, r2
   14fb4:	add	r2, r2, #1
   14fb8:	lsl	r0, r1, #1
   14fbc:	ldrh	ip, [lr, r0]
   14fc0:	tst	ip, #8192	; 0x2000
   14fc4:	bne	14fa8 <_obstack_memory_used@@Base+0xc74>
   14fc8:	subs	r0, r1, #45	; 0x2d
   14fcc:	movne	r0, #1
   14fd0:	cmp	r1, #0
   14fd4:	popeq	{r4, pc}
   14fd8:	tst	ip, #8
   14fdc:	popne	{r4, pc}
   14fe0:	add	r3, r3, #1
   14fe4:	str	r3, [r4]
   14fe8:	ldrb	r2, [r3]
   14fec:	cmp	r2, #0
   14ff0:	lsl	r2, r2, #1
   14ff4:	popeq	{r4, pc}
   14ff8:	ldrh	r2, [lr, r2]
   14ffc:	tst	r2, #8
   15000:	beq	14fe0 <_obstack_memory_used@@Base+0xcac>
   15004:	pop	{r4, pc}
   15008:	push	{r4, r5, r6, lr}
   1500c:	mov	r5, r0
   15010:	ldr	r0, [r0, #12]
   15014:	cmp	r0, #0
   15018:	beq	1502c <_obstack_memory_used@@Base+0xcf8>
   1501c:	ldr	r4, [r0, #24]
   15020:	bl	13f14 <argp_parse@@Base+0xe98>
   15024:	subs	r0, r4, #0
   15028:	bne	1501c <_obstack_memory_used@@Base+0xce8>
   1502c:	ldr	r3, [r5, #4]
   15030:	cmp	r3, #0
   15034:	beq	15048 <_obstack_memory_used@@Base+0xd14>
   15038:	ldr	r0, [r5]
   1503c:	bl	13f14 <argp_parse@@Base+0xe98>
   15040:	ldr	r0, [r5, #8]
   15044:	bl	13f14 <argp_parse@@Base+0xe98>
   15048:	mov	r0, r5
   1504c:	pop	{r4, r5, r6, lr}
   15050:	b	13f14 <argp_parse@@Base+0xe98>
   15054:	push	{r4, r5, r6, r7, r8, lr}
   15058:	mov	r5, r1
   1505c:	ldr	r3, [r0, #28]
   15060:	ldr	r1, [r0, #24]
   15064:	ldr	r2, [r0, #16]
   15068:	sub	r3, r3, r1
   1506c:	cmp	r3, r2
   15070:	mov	r4, r0
   15074:	bhi	150e0 <_obstack_memory_used@@Base+0xdac>
   15078:	ldr	r1, [r4, #20]
   1507c:	mov	r6, #32
   15080:	cmp	r1, #0
   15084:	subge	r5, r5, r1
   15088:	mov	r7, #1
   1508c:	cmp	r5, #0
   15090:	sub	r5, r5, #1
   15094:	ble	150c0 <_obstack_memory_used@@Base+0xd8c>
   15098:	ldr	r3, [r4, #28]
   1509c:	ldr	r2, [r4, #32]
   150a0:	cmp	r3, r2
   150a4:	bcs	150c4 <_obstack_memory_used@@Base+0xd90>
   150a8:	add	r2, r3, #1
   150ac:	cmp	r5, #0
   150b0:	str	r2, [r4, #28]
   150b4:	sub	r5, r5, #1
   150b8:	strb	r6, [r3]
   150bc:	bgt	15098 <_obstack_memory_used@@Base+0xd64>
   150c0:	pop	{r4, r5, r6, r7, r8, pc}
   150c4:	mov	r1, r7
   150c8:	mov	r0, r4
   150cc:	bl	194e0 <argp_error@@Base+0x1490>
   150d0:	cmp	r0, #0
   150d4:	beq	1508c <_obstack_memory_used@@Base+0xd58>
   150d8:	ldr	r3, [r4, #28]
   150dc:	b	150a8 <_obstack_memory_used@@Base+0xd74>
   150e0:	bl	18e50 <argp_error@@Base+0xe00>
   150e4:	b	15078 <_obstack_memory_used@@Base+0xd44>
   150e8:	push	{r4, r5, r6, lr}
   150ec:	subs	r4, r2, #0
   150f0:	popeq	{r4, r5, r6, pc}
   150f4:	ldr	ip, [r4, #20]
   150f8:	cmp	ip, #0
   150fc:	popeq	{r4, r5, r6, pc}
   15100:	mov	r6, r1
   15104:	mov	r5, r0
   15108:	mov	r1, r3
   1510c:	mov	r0, r4
   15110:	bl	13db8 <argp_parse@@Base+0xd3c>
   15114:	ldr	r3, [r4, #20]
   15118:	mov	r1, r5
   1511c:	mov	r2, r0
   15120:	mov	r0, r6
   15124:	pop	{r4, r5, r6, lr}
   15128:	bx	r3
   1512c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15130:	mov	r5, r2
   15134:	sub	sp, sp, #12
   15138:	mov	r2, r1
   1513c:	ldr	r3, [r5, #16]
   15140:	ldr	r1, [pc, #488]	; 15330 <_obstack_memory_used@@Base+0xffc>
   15144:	mov	r8, r0
   15148:	bl	150e8 <_obstack_memory_used@@Base+0xdb4>
   1514c:	subs	r6, r0, #0
   15150:	beq	1525c <_obstack_memory_used@@Base+0xf28>
   15154:	ldrb	r3, [r6]
   15158:	cmp	r3, #0
   1515c:	beq	15250 <_obstack_memory_used@@Base+0xf1c>
   15160:	ldr	r3, [r5, #8]
   15164:	ldr	r3, [r3]
   15168:	cmp	r3, #0
   1516c:	beq	15194 <_obstack_memory_used@@Base+0xe60>
   15170:	ldr	r4, [r5, #4]
   15174:	ldr	r3, [r4, #28]
   15178:	ldr	r2, [r4, #32]
   1517c:	cmp	r3, r2
   15180:	bcs	15314 <_obstack_memory_used@@Base+0xfe0>
   15184:	add	r1, r3, #1
   15188:	mov	r2, #10
   1518c:	str	r1, [r4, #28]
   15190:	strb	r2, [r3]
   15194:	ldr	sl, [pc, #408]	; 15334 <_obstack_memory_used@@Base+0x1000>
   15198:	ldr	r0, [r5, #4]
   1519c:	ldr	r1, [sl, #24]
   151a0:	bl	15054 <_obstack_memory_used@@Base+0xd20>
   151a4:	ldr	r4, [r5, #4]
   151a8:	ldr	r9, [sl, #24]
   151ac:	ldr	r7, [r4, #28]
   151b0:	ldr	r3, [r4, #24]
   151b4:	ldr	r2, [r4, #16]
   151b8:	sub	r3, r7, r3
   151bc:	cmp	r3, r2
   151c0:	strls	r9, [r4, #4]
   151c4:	movls	fp, r4
   151c8:	bhi	15298 <_obstack_memory_used@@Base+0xf64>
   151cc:	str	r9, [fp, #12]
   151d0:	mov	r0, r6
   151d4:	bl	11268 <strlen@plt>
   151d8:	subs	r9, r0, #0
   151dc:	beq	15214 <_obstack_memory_used@@Base+0xee0>
   151e0:	ldr	r2, [r4, #32]
   151e4:	add	r3, r7, r9
   151e8:	cmp	r2, r3
   151ec:	bcc	1527c <_obstack_memory_used@@Base+0xf48>
   151f0:	mov	r2, r9
   151f4:	mov	r0, r7
   151f8:	mov	r1, r6
   151fc:	bl	1116c <memcpy@plt>
   15200:	ldr	r3, [r4, #28]
   15204:	add	r9, r3, r9
   15208:	str	r9, [r4, #28]
   1520c:	ldr	r4, [r5, #4]
   15210:	ldr	r7, [r4, #28]
   15214:	ldr	r3, [r4, #24]
   15218:	ldr	r2, [r4, #16]
   1521c:	sub	r3, r7, r3
   15220:	cmp	r3, r2
   15224:	movls	r9, r4
   15228:	bhi	152e4 <_obstack_memory_used@@Base+0xfb0>
   1522c:	ldr	r2, [r9, #32]
   15230:	mov	r3, #0
   15234:	cmp	r2, r7
   15238:	str	r3, [r4, #4]
   1523c:	bls	152f8 <_obstack_memory_used@@Base+0xfc4>
   15240:	add	r2, r7, #1
   15244:	mov	r3, #10
   15248:	str	r2, [r9, #28]
   1524c:	strb	r3, [r7]
   15250:	ldr	r3, [r5, #8]
   15254:	mov	r2, #1
   15258:	str	r2, [r3, #4]
   1525c:	cmp	r8, r6
   15260:	beq	15274 <_obstack_memory_used@@Base+0xf40>
   15264:	mov	r0, r6
   15268:	add	sp, sp, #12
   1526c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15270:	b	13f14 <argp_parse@@Base+0xe98>
   15274:	add	sp, sp, #12
   15278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1527c:	mov	r1, r9
   15280:	mov	r0, r4
   15284:	bl	194e0 <argp_error@@Base+0x1490>
   15288:	cmp	r0, #0
   1528c:	beq	1520c <_obstack_memory_used@@Base+0xed8>
   15290:	ldr	r7, [r4, #28]
   15294:	b	151f0 <_obstack_memory_used@@Base+0xebc>
   15298:	mov	r0, r4
   1529c:	str	r9, [sp, #4]
   152a0:	bl	18e50 <argp_error@@Base+0xe00>
   152a4:	ldr	fp, [r5, #4]
   152a8:	ldr	r3, [sp, #4]
   152ac:	ldr	r9, [sl, #24]
   152b0:	ldr	r7, [fp, #28]
   152b4:	ldr	r2, [fp, #24]
   152b8:	ldr	r1, [fp, #16]
   152bc:	sub	r2, r7, r2
   152c0:	cmp	r2, r1
   152c4:	str	r3, [r4, #4]
   152c8:	movls	r4, fp
   152cc:	bls	151cc <_obstack_memory_used@@Base+0xe98>
   152d0:	mov	r0, fp
   152d4:	bl	18e50 <argp_error@@Base+0xe00>
   152d8:	ldr	r4, [r5, #4]
   152dc:	ldr	r7, [r4, #28]
   152e0:	b	151cc <_obstack_memory_used@@Base+0xe98>
   152e4:	mov	r0, r4
   152e8:	bl	18e50 <argp_error@@Base+0xe00>
   152ec:	ldr	r9, [r5, #4]
   152f0:	ldr	r7, [r9, #28]
   152f4:	b	1522c <_obstack_memory_used@@Base+0xef8>
   152f8:	mov	r1, #1
   152fc:	mov	r0, r9
   15300:	bl	194e0 <argp_error@@Base+0x1490>
   15304:	cmp	r0, #0
   15308:	beq	15250 <_obstack_memory_used@@Base+0xf1c>
   1530c:	ldr	r7, [r9, #28]
   15310:	b	15240 <_obstack_memory_used@@Base+0xf0c>
   15314:	mov	r1, #1
   15318:	mov	r0, r4
   1531c:	bl	194e0 <argp_error@@Base+0x1490>
   15320:	cmp	r0, #0
   15324:	beq	15194 <_obstack_memory_used@@Base+0xe60>
   15328:	ldr	r3, [r4, #28]
   1532c:	b	15184 <_obstack_memory_used@@Base+0xe50>
   15330:	andeq	r0, r0, #3
   15334:	andeq	r0, r3, r4, ror r8
   15338:	ldr	r3, [r1, #12]
   1533c:	push	{r4, r5, r6, r7, r8, lr}
   15340:	cmp	r3, #0
   15344:	mov	r4, r1
   15348:	mov	r6, r0
   1534c:	beq	15434 <_obstack_memory_used@@Base+0x1100>
   15350:	ldr	r3, [r1, #8]
   15354:	ldr	r2, [r1]
   15358:	ldr	r7, [r3]
   1535c:	ldr	r3, [r3, #4]
   15360:	ldr	r5, [r2, #16]
   15364:	cmp	r3, #0
   15368:	cmpne	r7, #0
   1536c:	beq	153a4 <_obstack_memory_used@@Base+0x1070>
   15370:	ldr	r2, [r2, #12]
   15374:	ldr	r3, [r7, #12]
   15378:	cmp	r2, r3
   1537c:	beq	153a4 <_obstack_memory_used@@Base+0x1070>
   15380:	ldr	r8, [r1, #4]
   15384:	ldr	r3, [r8, #28]
   15388:	ldr	r2, [r8, #32]
   1538c:	cmp	r3, r2
   15390:	bcs	154c4 <_obstack_memory_used@@Base+0x1190>
   15394:	add	r1, r3, #1
   15398:	mov	r2, #10
   1539c:	str	r1, [r8, #28]
   153a0:	strb	r2, [r3]
   153a4:	cmp	r5, #0
   153a8:	beq	15490 <_obstack_memory_used@@Base+0x115c>
   153ac:	ldr	r0, [r5]
   153b0:	cmp	r0, #0
   153b4:	beq	15490 <_obstack_memory_used@@Base+0x115c>
   153b8:	ldrb	r3, [r0]
   153bc:	cmp	r3, #0
   153c0:	beq	15490 <_obstack_memory_used@@Base+0x115c>
   153c4:	cmp	r7, #0
   153c8:	beq	153f8 <_obstack_memory_used@@Base+0x10c4>
   153cc:	ldr	r3, [r7, #16]
   153d0:	cmp	r5, r3
   153d4:	beq	15490 <_obstack_memory_used@@Base+0x115c>
   153d8:	cmp	r3, #0
   153dc:	beq	153f8 <_obstack_memory_used@@Base+0x10c4>
   153e0:	ldr	r3, [r3, #12]
   153e4:	cmp	r3, #0
   153e8:	cmpne	r5, r3
   153ec:	bne	153e0 <_obstack_memory_used@@Base+0x10ac>
   153f0:	cmp	r5, r3
   153f4:	beq	15490 <_obstack_memory_used@@Base+0x115c>
   153f8:	ldr	r3, [r4, #4]
   153fc:	ldr	r1, [r5, #16]
   15400:	mov	r2, r4
   15404:	ldr	r7, [r3, #12]
   15408:	bl	1512c <_obstack_memory_used@@Base+0xdf8>
   1540c:	ldr	r5, [r4, #4]
   15410:	mov	r0, r5
   15414:	ldr	r3, [r5, #28]
   15418:	ldr	r1, [r5, #24]
   1541c:	ldr	r2, [r5, #16]
   15420:	sub	r3, r3, r1
   15424:	cmp	r3, r2
   15428:	bhi	154b8 <_obstack_memory_used@@Base+0x1184>
   1542c:	str	r7, [r5, #12]
   15430:	b	15494 <_obstack_memory_used@@Base+0x1160>
   15434:	ldr	r5, [r1, #4]
   15438:	ldr	r3, [r5, #28]
   1543c:	ldr	r1, [r5, #32]
   15440:	add	r2, r3, #2
   15444:	cmp	r1, r2
   15448:	bcc	15474 <_obstack_memory_used@@Base+0x1140>
   1544c:	ldr	r2, [pc, #140]	; 154e0 <_obstack_memory_used@@Base+0x11ac>
   15450:	mov	r1, r6
   15454:	ldrh	r2, [r2]
   15458:	strh	r2, [r3]
   1545c:	ldr	r3, [r5, #28]
   15460:	ldr	r0, [r4, #4]
   15464:	add	r3, r3, #2
   15468:	str	r3, [r5, #28]
   1546c:	pop	{r4, r5, r6, r7, r8, lr}
   15470:	b	15054 <_obstack_memory_used@@Base+0xd20>
   15474:	mov	r1, #2
   15478:	mov	r0, r5
   1547c:	bl	194e0 <argp_error@@Base+0x1490>
   15480:	cmp	r0, #0
   15484:	beq	154a8 <_obstack_memory_used@@Base+0x1174>
   15488:	ldr	r3, [r5, #28]
   1548c:	b	1544c <_obstack_memory_used@@Base+0x1118>
   15490:	ldr	r0, [r4, #4]
   15494:	mov	r3, #0
   15498:	str	r3, [r4, #12]
   1549c:	mov	r1, r6
   154a0:	pop	{r4, r5, r6, r7, r8, lr}
   154a4:	b	15054 <_obstack_memory_used@@Base+0xd20>
   154a8:	ldr	r0, [r4, #4]
   154ac:	mov	r1, r6
   154b0:	pop	{r4, r5, r6, r7, r8, lr}
   154b4:	b	15054 <_obstack_memory_used@@Base+0xd20>
   154b8:	bl	18e50 <argp_error@@Base+0xe00>
   154bc:	ldr	r0, [r4, #4]
   154c0:	b	1542c <_obstack_memory_used@@Base+0x10f8>
   154c4:	mov	r1, #1
   154c8:	mov	r0, r8
   154cc:	bl	194e0 <argp_error@@Base+0x1490>
   154d0:	cmp	r0, #0
   154d4:	beq	153a4 <_obstack_memory_used@@Base+0x1070>
   154d8:	ldr	r3, [r8, #28]
   154dc:	b	15394 <_obstack_memory_used@@Base+0x1060>
   154e0:	ldrdeq	fp, [r1], -r4
   154e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154e8:	mov	r7, r3
   154ec:	ldr	sl, [r0, #12]
   154f0:	sub	sp, sp, #36	; 0x24
   154f4:	ldr	r3, [r0, #16]
   154f8:	cmp	sl, #0
   154fc:	mov	fp, r0
   15500:	mov	r6, r2
   15504:	str	r3, [sp, #16]
   15508:	mov	r9, r1
   1550c:	ldr	r8, [sp, #72]	; 0x48
   15510:	ldr	r5, [sp, #76]	; 0x4c
   15514:	beq	158e4 <_obstack_memory_used@@Base+0x15b0>
   15518:	mov	r1, #11
   1551c:	mov	r0, sl
   15520:	bl	11274 <strchr@plt>
   15524:	cmp	r6, #0
   15528:	bne	15800 <_obstack_memory_used@@Base+0x14cc>
   1552c:	cmp	r0, #0
   15530:	ldr	r3, [fp, #20]
   15534:	beq	15a3c <_obstack_memory_used@@Base+0x1708>
   15538:	cmp	r3, #0
   1553c:	sub	r4, r0, sl
   15540:	beq	159d4 <_obstack_memory_used@@Base+0x16a0>
   15544:	cmp	r4, #0
   15548:	beq	15974 <_obstack_memory_used@@Base+0x1640>
   1554c:	mov	r0, sl
   15550:	mov	r1, r4
   15554:	bl	11160 <strndup@plt>
   15558:	mov	r3, #1
   1555c:	str	r3, [sp, #24]
   15560:	mov	sl, r0
   15564:	adds	r3, r0, #0
   15568:	movne	r3, #1
   1556c:	str	r3, [sp, #20]
   15570:	mov	r1, r9
   15574:	mov	r0, fp
   15578:	bl	13db8 <argp_parse@@Base+0xd3c>
   1557c:	ldr	r3, [fp, #20]
   15580:	str	r0, [sp, #12]
   15584:	ldr	r0, [pc, #1272]	; 15a84 <_obstack_memory_used@@Base+0x1750>
   15588:	ldr	r2, [sp, #12]
   1558c:	mov	r1, sl
   15590:	blx	r3
   15594:	subs	r3, r0, #0
   15598:	beq	15924 <_obstack_memory_used@@Base+0x15f0>
   1559c:	cmp	r7, #0
   155a0:	beq	155c4 <_obstack_memory_used@@Base+0x1290>
   155a4:	ldr	r2, [r5, #28]
   155a8:	ldr	r1, [r5, #32]
   155ac:	cmp	r2, r1
   155b0:	bcs	1592c <_obstack_memory_used@@Base+0x15f8>
   155b4:	add	r0, r2, #1
   155b8:	mov	r1, #10
   155bc:	str	r0, [r5, #28]
   155c0:	strb	r1, [r2]
   155c4:	ldr	r2, [sp, #24]
   155c8:	cmp	r3, sl
   155cc:	movne	r2, #0
   155d0:	andeq	r2, r2, #1
   155d4:	cmp	r2, #0
   155d8:	beq	15844 <_obstack_memory_used@@Base+0x1510>
   155dc:	ldr	r0, [r5, #28]
   155e0:	ldr	r1, [r5, #32]
   155e4:	add	r2, r0, r4
   155e8:	cmp	r1, r2
   155ec:	bcs	158a4 <_obstack_memory_used@@Base+0x1570>
   155f0:	mov	r1, r4
   155f4:	mov	r0, r5
   155f8:	str	r3, [sp, #24]
   155fc:	bl	194e0 <argp_error@@Base+0x1490>
   15600:	ldr	r3, [sp, #24]
   15604:	cmp	r0, #0
   15608:	bne	158a0 <_obstack_memory_used@@Base+0x156c>
   1560c:	ldr	r4, [r5, #28]
   15610:	ldr	r1, [r5, #24]
   15614:	ldr	r2, [r5, #16]
   15618:	sub	r4, r4, r1
   1561c:	cmp	r4, r2
   15620:	bhi	158c8 <_obstack_memory_used@@Base+0x1594>
   15624:	ldr	r2, [r5, #20]
   15628:	ldr	r1, [r5, #4]
   1562c:	bic	r2, r2, r2, asr #31
   15630:	cmp	r1, r2
   15634:	bcs	15658 <_obstack_memory_used@@Base+0x1324>
   15638:	ldr	r2, [r5, #28]
   1563c:	ldr	r1, [r5, #32]
   15640:	cmp	r2, r1
   15644:	bcs	15950 <_obstack_memory_used@@Base+0x161c>
   15648:	add	r0, r2, #1
   1564c:	mov	r1, #10
   15650:	str	r0, [r5, #28]
   15654:	strb	r1, [r2]
   15658:	cmp	r3, sl
   1565c:	moveq	r4, #1
   15660:	beq	15670 <_obstack_memory_used@@Base+0x133c>
   15664:	mov	r0, r3
   15668:	bl	13f14 <argp_parse@@Base+0xe98>
   1566c:	mov	r4, #1
   15670:	ldr	r3, [sp, #20]
   15674:	cmp	r3, #0
   15678:	beq	15690 <_obstack_memory_used@@Base+0x135c>
   1567c:	ldr	r3, [fp, #20]
   15680:	cmp	r3, #0
   15684:	beq	15774 <_obstack_memory_used@@Base+0x1440>
   15688:	mov	r0, sl
   1568c:	bl	13f14 <argp_parse@@Base+0xe98>
   15690:	cmp	r6, #0
   15694:	beq	15774 <_obstack_memory_used@@Base+0x1440>
   15698:	ldr	r3, [fp, #20]
   1569c:	cmp	r3, #0
   156a0:	beq	15774 <_obstack_memory_used@@Base+0x1440>
   156a4:	ldr	r2, [sp, #12]
   156a8:	mov	r1, #0
   156ac:	ldr	r0, [pc, #980]	; 15a88 <_obstack_memory_used@@Base+0x1754>
   156b0:	blx	r3
   156b4:	subs	sl, r0, #0
   156b8:	beq	15774 <_obstack_memory_used@@Base+0x1440>
   156bc:	orrs	r3, r7, r4
   156c0:	beq	156e4 <_obstack_memory_used@@Base+0x13b0>
   156c4:	ldr	r3, [r5, #28]
   156c8:	ldr	r2, [r5, #32]
   156cc:	cmp	r3, r2
   156d0:	bcs	15a0c <_obstack_memory_used@@Base+0x16d8>
   156d4:	add	r1, r3, #1
   156d8:	mov	r2, #10
   156dc:	str	r1, [r5, #28]
   156e0:	strb	r2, [r3]
   156e4:	mov	r0, sl
   156e8:	bl	11268 <strlen@plt>
   156ec:	subs	r4, r0, #0
   156f0:	beq	1571c <_obstack_memory_used@@Base+0x13e8>
   156f4:	ldr	r0, [r5, #28]
   156f8:	ldr	r2, [r5, #32]
   156fc:	add	r3, r0, r4
   15700:	cmp	r2, r3
   15704:	bcs	15984 <_obstack_memory_used@@Base+0x1650>
   15708:	mov	r1, r4
   1570c:	mov	r0, r5
   15710:	bl	194e0 <argp_error@@Base+0x1490>
   15714:	cmp	r0, #0
   15718:	bne	15980 <_obstack_memory_used@@Base+0x164c>
   1571c:	mov	r0, sl
   15720:	bl	13f14 <argp_parse@@Base+0xe98>
   15724:	ldr	r3, [r5, #28]
   15728:	ldr	r1, [r5, #24]
   1572c:	ldr	r2, [r5, #16]
   15730:	sub	r3, r3, r1
   15734:	cmp	r3, r2
   15738:	bhi	159a0 <_obstack_memory_used@@Base+0x166c>
   1573c:	ldr	r3, [r5, #20]
   15740:	ldr	r2, [r5, #4]
   15744:	bic	r3, r3, r3, asr #31
   15748:	cmp	r2, r3
   1574c:	bcs	158dc <_obstack_memory_used@@Base+0x15a8>
   15750:	ldr	r3, [r5, #28]
   15754:	ldr	r2, [r5, #32]
   15758:	cmp	r3, r2
   1575c:	bcs	159f0 <_obstack_memory_used@@Base+0x16bc>
   15760:	mov	r4, #1
   15764:	add	r2, r3, r4
   15768:	str	r2, [r5, #28]
   1576c:	mov	r2, #10
   15770:	strb	r2, [r3]
   15774:	ldr	fp, [sp, #16]
   15778:	cmp	fp, #0
   1577c:	beq	157f4 <_obstack_memory_used@@Base+0x14c0>
   15780:	ldr	r3, [fp]
   15784:	cmp	r3, #0
   15788:	beq	157f4 <_obstack_memory_used@@Base+0x14c0>
   1578c:	eor	r2, r4, #1
   15790:	and	r2, r2, #1
   15794:	clz	sl, r8
   15798:	lsr	sl, sl, #5
   1579c:	orrs	r2, sl, r2
   157a0:	bne	157bc <_obstack_memory_used@@Base+0x1488>
   157a4:	b	15a28 <_obstack_memory_used@@Base+0x16f4>
   157a8:	cmp	r4, #0
   157ac:	movne	r2, sl
   157b0:	orreq	r2, sl, #1
   157b4:	cmp	r2, #0
   157b8:	beq	157f4 <_obstack_memory_used@@Base+0x14c0>
   157bc:	orrs	r2, r7, r4
   157c0:	mov	r0, r3
   157c4:	str	r5, [sp, #4]
   157c8:	movne	r3, #1
   157cc:	moveq	r3, #0
   157d0:	str	r8, [sp]
   157d4:	mov	r2, r6
   157d8:	mov	r1, r9
   157dc:	bl	154e4 <_obstack_memory_used@@Base+0x11b0>
   157e0:	ldr	r3, [fp, #16]
   157e4:	add	fp, fp, #16
   157e8:	cmp	r3, #0
   157ec:	orr	r4, r4, r0
   157f0:	bne	157a8 <_obstack_memory_used@@Base+0x1474>
   157f4:	mov	r0, r4
   157f8:	add	sp, sp, #36	; 0x24
   157fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15800:	cmp	r0, #0
   15804:	addne	sl, r0, #1
   15808:	beq	159cc <_obstack_memory_used@@Base+0x1698>
   1580c:	ldr	r3, [fp, #20]
   15810:	cmp	r3, #0
   15814:	beq	159ac <_obstack_memory_used@@Base+0x1678>
   15818:	mov	r3, #0
   1581c:	mov	r1, r9
   15820:	mov	r0, fp
   15824:	mov	r4, r3
   15828:	str	r3, [sp, #20]
   1582c:	bl	13db8 <argp_parse@@Base+0xd3c>
   15830:	str	r4, [sp, #24]
   15834:	ldr	r3, [fp, #20]
   15838:	str	r0, [sp, #12]
   1583c:	ldr	r0, [pc, #584]	; 15a8c <_obstack_memory_used@@Base+0x1758>
   15840:	b	15588 <_obstack_memory_used@@Base+0x1254>
   15844:	mov	r0, r3
   15848:	str	r3, [sp, #24]
   1584c:	bl	11268 <strlen@plt>
   15850:	ldr	r3, [sp, #24]
   15854:	subs	r4, r0, #0
   15858:	beq	1560c <_obstack_memory_used@@Base+0x12d8>
   1585c:	ldr	r0, [r5, #28]
   15860:	ldr	r1, [r5, #32]
   15864:	add	r2, r0, r4
   15868:	cmp	r1, r2
   1586c:	bcs	15890 <_obstack_memory_used@@Base+0x155c>
   15870:	mov	r1, r4
   15874:	mov	r0, r5
   15878:	str	r3, [sp, #24]
   1587c:	bl	194e0 <argp_error@@Base+0x1490>
   15880:	ldr	r3, [sp, #24]
   15884:	cmp	r0, #0
   15888:	beq	1560c <_obstack_memory_used@@Base+0x12d8>
   1588c:	ldr	r0, [r5, #28]
   15890:	mov	r2, r4
   15894:	mov	r1, r3
   15898:	str	r3, [sp, #24]
   1589c:	b	158b0 <_obstack_memory_used@@Base+0x157c>
   158a0:	ldr	r0, [r5, #28]
   158a4:	mov	r2, r4
   158a8:	mov	r1, sl
   158ac:	str	r3, [sp, #24]
   158b0:	bl	1116c <memcpy@plt>
   158b4:	ldr	r2, [r5, #28]
   158b8:	ldr	r3, [sp, #24]
   158bc:	add	r4, r2, r4
   158c0:	str	r4, [r5, #28]
   158c4:	b	15610 <_obstack_memory_used@@Base+0x12dc>
   158c8:	mov	r0, r5
   158cc:	str	r3, [sp, #24]
   158d0:	bl	18e50 <argp_error@@Base+0xe00>
   158d4:	ldr	r3, [sp, #24]
   158d8:	b	15624 <_obstack_memory_used@@Base+0x12f0>
   158dc:	mov	r4, #1
   158e0:	b	15774 <_obstack_memory_used@@Base+0x1440>
   158e4:	ldr	r4, [r0, #20]
   158e8:	cmp	r4, #0
   158ec:	beq	15a34 <_obstack_memory_used@@Base+0x1700>
   158f0:	bl	13db8 <argp_parse@@Base+0xd3c>
   158f4:	cmp	r6, #0
   158f8:	ldr	r3, [fp, #20]
   158fc:	strne	sl, [sp, #20]
   15900:	strne	sl, [sp, #24]
   15904:	movne	r4, sl
   15908:	streq	r6, [sp, #20]
   1590c:	streq	r6, [sp, #24]
   15910:	moveq	r4, r6
   15914:	str	r0, [sp, #12]
   15918:	ldrne	r0, [pc, #364]	; 15a8c <_obstack_memory_used@@Base+0x1758>
   1591c:	ldreq	r0, [pc, #352]	; 15a84 <_obstack_memory_used@@Base+0x1750>
   15920:	b	15588 <_obstack_memory_used@@Base+0x1254>
   15924:	mov	r4, r3
   15928:	b	15670 <_obstack_memory_used@@Base+0x133c>
   1592c:	mov	r1, #1
   15930:	mov	r0, r5
   15934:	str	r3, [sp, #28]
   15938:	bl	194e0 <argp_error@@Base+0x1490>
   1593c:	ldr	r3, [sp, #28]
   15940:	cmp	r0, #0
   15944:	beq	155c4 <_obstack_memory_used@@Base+0x1290>
   15948:	ldr	r2, [r5, #28]
   1594c:	b	155b4 <_obstack_memory_used@@Base+0x1280>
   15950:	mov	r1, #1
   15954:	mov	r0, r5
   15958:	str	r3, [sp, #24]
   1595c:	bl	194e0 <argp_error@@Base+0x1490>
   15960:	ldr	r3, [sp, #24]
   15964:	cmp	r0, #0
   15968:	beq	15658 <_obstack_memory_used@@Base+0x1324>
   1596c:	ldr	r2, [r5, #28]
   15970:	b	15648 <_obstack_memory_used@@Base+0x1314>
   15974:	str	r4, [sp, #20]
   15978:	str	r4, [sp, #24]
   1597c:	b	15570 <_obstack_memory_used@@Base+0x123c>
   15980:	ldr	r0, [r5, #28]
   15984:	mov	r2, r4
   15988:	mov	r1, sl
   1598c:	bl	1116c <memcpy@plt>
   15990:	ldr	r3, [r5, #28]
   15994:	add	r4, r3, r4
   15998:	str	r4, [r5, #28]
   1599c:	b	1571c <_obstack_memory_used@@Base+0x13e8>
   159a0:	mov	r0, r5
   159a4:	bl	18e50 <argp_error@@Base+0xe00>
   159a8:	b	1573c <_obstack_memory_used@@Base+0x1408>
   159ac:	cmp	sl, #0
   159b0:	beq	15a30 <_obstack_memory_used@@Base+0x16fc>
   159b4:	str	r3, [sp, #20]
   159b8:	str	r3, [sp, #24]
   159bc:	mov	r4, r3
   159c0:	str	r3, [sp, #12]
   159c4:	mov	r3, sl
   159c8:	b	1559c <_obstack_memory_used@@Base+0x1268>
   159cc:	mov	sl, r0
   159d0:	b	1580c <_obstack_memory_used@@Base+0x14d8>
   159d4:	adds	r3, r4, #0
   159d8:	movne	r3, #1
   159dc:	str	r3, [sp, #24]
   159e0:	str	r3, [sp, #20]
   159e4:	str	r6, [sp, #12]
   159e8:	mov	r3, sl
   159ec:	b	1559c <_obstack_memory_used@@Base+0x1268>
   159f0:	mov	r1, #1
   159f4:	mov	r0, r5
   159f8:	bl	194e0 <argp_error@@Base+0x1490>
   159fc:	cmp	r0, #0
   15a00:	beq	158dc <_obstack_memory_used@@Base+0x15a8>
   15a04:	ldr	r3, [r5, #28]
   15a08:	b	15760 <_obstack_memory_used@@Base+0x142c>
   15a0c:	mov	r1, #1
   15a10:	mov	r0, r5
   15a14:	bl	194e0 <argp_error@@Base+0x1490>
   15a18:	cmp	r0, #0
   15a1c:	beq	156e4 <_obstack_memory_used@@Base+0x13b0>
   15a20:	ldr	r3, [r5, #28]
   15a24:	b	156d4 <_obstack_memory_used@@Base+0x13a0>
   15a28:	mov	r4, #1
   15a2c:	b	157f4 <_obstack_memory_used@@Base+0x14c0>
   15a30:	mov	r4, sl
   15a34:	str	r4, [sp, #12]
   15a38:	b	15690 <_obstack_memory_used@@Base+0x135c>
   15a3c:	cmp	r3, #0
   15a40:	beq	15a6c <_obstack_memory_used@@Base+0x1738>
   15a44:	mov	r1, r9
   15a48:	mov	r0, fp
   15a4c:	bl	13db8 <argp_parse@@Base+0xd3c>
   15a50:	mov	r4, r6
   15a54:	ldr	r3, [fp, #20]
   15a58:	str	r6, [sp, #20]
   15a5c:	str	r6, [sp, #24]
   15a60:	str	r0, [sp, #12]
   15a64:	ldr	r0, [pc, #24]	; 15a84 <_obstack_memory_used@@Base+0x1750>
   15a68:	b	15588 <_obstack_memory_used@@Base+0x1254>
   15a6c:	mov	r3, sl
   15a70:	str	r6, [sp, #20]
   15a74:	str	r6, [sp, #24]
   15a78:	mov	r4, r6
   15a7c:	str	r6, [sp, #12]
   15a80:	b	1559c <_obstack_memory_used@@Base+0x1268>
   15a84:	andeq	r0, r0, #1
   15a88:	andeq	r0, r0, #4
   15a8c:	andeq	r0, r0, #2
   15a90:	ldr	r3, [r0, #12]
   15a94:	ldr	r2, [r1, #12]
   15a98:	push	{r4, r5, r6, lr}
   15a9c:	cmp	r3, r2
   15aa0:	beq	15af0 <_obstack_memory_used@@Base+0x17bc>
   15aa4:	mov	r5, r1
   15aa8:	mov	r4, r0
   15aac:	mov	r1, r2
   15ab0:	mov	r0, r3
   15ab4:	bl	15a90 <_obstack_memory_used@@Base+0x175c>
   15ab8:	cmp	r0, #0
   15abc:	popne	{r4, r5, r6, pc}
   15ac0:	ldr	r3, [r5, #8]
   15ac4:	ldr	r0, [r4, #8]
   15ac8:	mvn	r2, r3
   15acc:	lsr	r2, r2, #31
   15ad0:	cmp	r2, r0, lsr #31
   15ad4:	subne	r0, r0, r3
   15ad8:	subeq	r0, r3, r0
   15adc:	cmp	r0, #0
   15ae0:	ldreq	r3, [r5, #4]
   15ae4:	ldreq	r0, [r4, #4]
   15ae8:	subeq	r0, r3, r0
   15aec:	pop	{r4, r5, r6, pc}
   15af0:	ldr	r3, [r1, #8]
   15af4:	ldr	r2, [r0, #8]
   15af8:	mvn	ip, r3
   15afc:	ldr	lr, [r1, #4]
   15b00:	lsr	ip, ip, #31
   15b04:	cmp	ip, r2, lsr #31
   15b08:	ldr	r1, [r0, #4]
   15b0c:	subne	r0, r2, r3
   15b10:	subeq	r0, r3, r2
   15b14:	cmp	r0, #0
   15b18:	subeq	r0, lr, r1
   15b1c:	pop	{r4, r5, r6, pc}
   15b20:	push	{r4, r5, r6, r7, r8, r9, lr}
   15b24:	sub	sp, sp, #12
   15b28:	ldr	lr, [r0, #16]
   15b2c:	cmp	lr, #0
   15b30:	movne	r2, lr
   15b34:	bne	15b40 <_obstack_memory_used@@Base+0x180c>
   15b38:	b	15e04 <_obstack_memory_used@@Base+0x1ad0>
   15b3c:	mov	r2, r3
   15b40:	ldr	r3, [r2, #12]
   15b44:	cmp	r3, #0
   15b48:	bne	15b3c <_obstack_memory_used@@Base+0x1808>
   15b4c:	ldr	ip, [r1, #16]
   15b50:	ldr	r4, [r2, #8]
   15b54:	cmp	ip, #0
   15b58:	movne	r2, ip
   15b5c:	bne	15b68 <_obstack_memory_used@@Base+0x1834>
   15b60:	b	15e18 <_obstack_memory_used@@Base+0x1ae4>
   15b64:	mov	r2, r3
   15b68:	ldr	r3, [r2, #12]
   15b6c:	cmp	r3, #0
   15b70:	bne	15b64 <_obstack_memory_used@@Base+0x1830>
   15b74:	ldr	r3, [r2, #8]
   15b78:	mvn	r2, r3
   15b7c:	lsr	r2, r2, #31
   15b80:	cmp	r2, r4, lsr #31
   15b84:	subne	r4, r4, r3
   15b88:	subeq	r4, r3, r4
   15b8c:	cmp	r4, #0
   15b90:	bne	15bf8 <_obstack_memory_used@@Base+0x18c4>
   15b94:	adds	r4, ip, #0
   15b98:	movne	r4, #1
   15b9c:	cmp	lr, #0
   15ba0:	rsbeq	r4, r4, #0
   15ba4:	rsbne	r4, r4, #1
   15ba8:	cmp	r4, #0
   15bac:	bne	15bf8 <_obstack_memory_used@@Base+0x18c4>
   15bb0:	cmp	lr, #0
   15bb4:	mov	r5, r1
   15bb8:	mov	r6, r0
   15bbc:	beq	15c14 <_obstack_memory_used@@Base+0x18e0>
   15bc0:	ldr	r0, [lr, #20]
   15bc4:	ldr	r2, [ip, #20]
   15bc8:	cmp	r0, r2
   15bcc:	ble	15dd8 <_obstack_memory_used@@Base+0x1aa4>
   15bd0:	mov	r0, lr
   15bd4:	ldr	r0, [r0, #12]
   15bd8:	ldr	r3, [r0, #20]
   15bdc:	cmp	r2, r3
   15be0:	blt	15bd4 <_obstack_memory_used@@Base+0x18a0>
   15be4:	mov	r1, ip
   15be8:	bl	15a90 <_obstack_memory_used@@Base+0x175c>
   15bec:	cmp	r0, #0
   15bf0:	movne	r4, r0
   15bf4:	moveq	r4, #1
   15bf8:	mov	r0, r4
   15bfc:	add	sp, sp, #12
   15c00:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15c04:	mov	r0, lr
   15c08:	bl	15a90 <_obstack_memory_used@@Base+0x175c>
   15c0c:	subs	r4, r0, #0
   15c10:	bne	15bf8 <_obstack_memory_used@@Base+0x18c4>
   15c14:	ldr	r4, [r5, #12]
   15c18:	ldr	r3, [r6, #12]
   15c1c:	mvn	r2, r4
   15c20:	lsr	r2, r2, #31
   15c24:	cmp	r2, r3, lsr #31
   15c28:	subne	r4, r3, r4
   15c2c:	subeq	r4, r4, r3
   15c30:	cmp	r4, #0
   15c34:	bne	15bf8 <_obstack_memory_used@@Base+0x18c4>
   15c38:	ldr	r2, [r6, #4]
   15c3c:	ldr	lr, [r6]
   15c40:	cmp	r2, #0
   15c44:	beq	15c70 <_obstack_memory_used@@Base+0x193c>
   15c48:	add	r3, lr, #24
   15c4c:	ldr	r1, [r3, #-24]	; 0xffffffe8
   15c50:	cmp	r1, #0
   15c54:	beq	15c64 <_obstack_memory_used@@Base+0x1930>
   15c58:	ldr	r0, [r3, #-12]
   15c5c:	tst	r0, #2
   15c60:	beq	15e20 <_obstack_memory_used@@Base+0x1aec>
   15c64:	subs	r2, r2, #1
   15c68:	add	r3, r3, #24
   15c6c:	bne	15c4c <_obstack_memory_used@@Base+0x1918>
   15c70:	ldr	r2, [r5, #4]
   15c74:	mov	ip, #0
   15c78:	cmp	r2, ip
   15c7c:	str	ip, [sp]
   15c80:	ldr	r3, [r5]
   15c84:	beq	15e90 <_obstack_memory_used@@Base+0x1b5c>
   15c88:	add	r3, r3, #24
   15c8c:	ldr	r1, [r3, #-24]	; 0xffffffe8
   15c90:	cmp	r1, #0
   15c94:	beq	15ca4 <_obstack_memory_used@@Base+0x1970>
   15c98:	ldr	r0, [r3, #-12]
   15c9c:	tst	r0, #2
   15ca0:	beq	15cb4 <_obstack_memory_used@@Base+0x1980>
   15ca4:	subs	r2, r2, #1
   15ca8:	add	r3, r3, #24
   15cac:	bne	15c8c <_obstack_memory_used@@Base+0x1958>
   15cb0:	mov	r1, r2
   15cb4:	ldr	r3, [lr, #12]
   15cb8:	str	r1, [sp, #4]
   15cbc:	ands	r3, ip, r3, lsr #3
   15cc0:	beq	15e88 <_obstack_memory_used@@Base+0x1b54>
   15cc4:	mov	r0, sp
   15cc8:	bl	14f90 <_obstack_memory_used@@Base+0xc5c>
   15ccc:	ldr	r3, [r5]
   15cd0:	cmp	r0, #0
   15cd4:	bne	15e74 <_obstack_memory_used@@Base+0x1b40>
   15cd8:	ldr	r3, [r3, #12]
   15cdc:	tst	r3, #8
   15ce0:	beq	15d08 <_obstack_memory_used@@Base+0x19d4>
   15ce4:	ldr	r3, [sp, #4]
   15ce8:	cmp	r3, #0
   15cec:	beq	15d08 <_obstack_memory_used@@Base+0x19d4>
   15cf0:	add	r0, sp, #4
   15cf4:	bl	14f90 <_obstack_memory_used@@Base+0xc5c>
   15cf8:	cmp	r0, #0
   15cfc:	subne	r4, r4, #1
   15d00:	cmp	r4, #0
   15d04:	bne	15bf8 <_obstack_memory_used@@Base+0x18c4>
   15d08:	ldr	r2, [r6, #20]
   15d0c:	mov	r0, r6
   15d10:	mov	r3, #0
   15d14:	ldr	r2, [r2, #24]
   15d18:	ldr	r1, [pc, #408]	; 15eb8 <_obstack_memory_used@@Base+0x1b84>
   15d1c:	bl	14e54 <_obstack_memory_used@@Base+0xb20>
   15d20:	ldr	r2, [r5, #20]
   15d24:	mov	r3, #0
   15d28:	ldr	r1, [pc, #392]	; 15eb8 <_obstack_memory_used@@Base+0x1b84>
   15d2c:	ldr	r2, [r2, #24]
   15d30:	uxtb	r6, r0
   15d34:	mov	r0, r5
   15d38:	bl	14e54 <_obstack_memory_used@@Base+0xb20>
   15d3c:	cmp	r6, #0
   15d40:	lslne	r4, r6, #2
   15d44:	movne	r7, r6
   15d48:	uxtb	r5, r0
   15d4c:	beq	15e58 <_obstack_memory_used@@Base+0x1b24>
   15d50:	cmp	r5, #0
   15d54:	lslne	r9, r5, #2
   15d58:	movne	r8, r5
   15d5c:	beq	15e3c <_obstack_memory_used@@Base+0x1b08>
   15d60:	bl	1122c <__ctype_tolower_loc@plt>
   15d64:	ldr	r3, [r0]
   15d68:	ldr	r4, [r3, r4]
   15d6c:	ldr	r3, [r3, r9]
   15d70:	subs	r4, r4, r3
   15d74:	bne	15bf8 <_obstack_memory_used@@Base+0x18c4>
   15d78:	subs	r4, r8, r7
   15d7c:	bne	15bf8 <_obstack_memory_used@@Base+0x18c4>
   15d80:	adds	r4, r5, #0
   15d84:	movne	r4, #1
   15d88:	cmp	r6, #0
   15d8c:	rsbeq	r4, r4, #0
   15d90:	rsbne	r4, r4, #1
   15d94:	cmp	r4, #0
   15d98:	bne	15bf8 <_obstack_memory_used@@Base+0x18c4>
   15d9c:	cmp	r6, #0
   15da0:	bne	15bf8 <_obstack_memory_used@@Base+0x18c4>
   15da4:	ldm	sp, {r0, r1}
   15da8:	adds	r4, r1, #0
   15dac:	movne	r4, #1
   15db0:	cmp	r0, #0
   15db4:	rsbeq	r4, r4, #0
   15db8:	rsbne	r4, r4, #1
   15dbc:	cmp	r4, #0
   15dc0:	bne	15bf8 <_obstack_memory_used@@Base+0x18c4>
   15dc4:	cmp	r0, #0
   15dc8:	beq	15bf8 <_obstack_memory_used@@Base+0x18c4>
   15dcc:	bl	111a8 <strcasecmp@plt>
   15dd0:	mov	r4, r0
   15dd4:	b	15bf8 <_obstack_memory_used@@Base+0x18c4>
   15dd8:	mov	r1, ip
   15ddc:	bge	15c04 <_obstack_memory_used@@Base+0x18d0>
   15de0:	ldr	r1, [r1, #12]
   15de4:	ldr	r3, [r1, #20]
   15de8:	cmp	r0, r3
   15dec:	blt	15de0 <_obstack_memory_used@@Base+0x1aac>
   15df0:	mov	r0, lr
   15df4:	bl	15a90 <_obstack_memory_used@@Base+0x175c>
   15df8:	subs	r4, r0, #0
   15dfc:	mvneq	r4, #0
   15e00:	b	15bf8 <_obstack_memory_used@@Base+0x18c4>
   15e04:	ldr	ip, [r1, #16]
   15e08:	ldr	r4, [r0, #12]
   15e0c:	cmp	ip, #0
   15e10:	movne	r2, ip
   15e14:	bne	15b68 <_obstack_memory_used@@Base+0x1834>
   15e18:	ldr	r3, [r1, #12]
   15e1c:	b	15b78 <_obstack_memory_used@@Base+0x1844>
   15e20:	ldr	r2, [r5, #4]
   15e24:	str	r1, [sp]
   15e28:	cmp	r2, #0
   15e2c:	ldr	r3, [r5]
   15e30:	beq	15e98 <_obstack_memory_used@@Base+0x1b64>
   15e34:	mov	ip, #1
   15e38:	b	15c88 <_obstack_memory_used@@Base+0x1954>
   15e3c:	ldr	r3, [sp, #4]
   15e40:	cmp	r3, #0
   15e44:	moveq	r9, r5
   15e48:	ldrbne	r8, [r3]
   15e4c:	moveq	r8, r5
   15e50:	lslne	r9, r8, #2
   15e54:	b	15d60 <_obstack_memory_used@@Base+0x1a2c>
   15e58:	ldr	r3, [sp]
   15e5c:	cmp	r3, #0
   15e60:	moveq	r4, r6
   15e64:	ldrbne	r7, [r3]
   15e68:	moveq	r7, r6
   15e6c:	lslne	r4, r7, #2
   15e70:	b	15d50 <_obstack_memory_used@@Base+0x1a1c>
   15e74:	ldr	r3, [r3, #12]
   15e78:	tst	r3, #8
   15e7c:	bne	15ea4 <_obstack_memory_used@@Base+0x1b70>
   15e80:	mov	r4, #1
   15e84:	b	15bf8 <_obstack_memory_used@@Base+0x18c4>
   15e88:	ldr	r3, [r5]
   15e8c:	b	15cd8 <_obstack_memory_used@@Base+0x19a4>
   15e90:	str	r2, [sp, #4]
   15e94:	b	15d08 <_obstack_memory_used@@Base+0x19d4>
   15e98:	mov	r1, r2
   15e9c:	mov	ip, #1
   15ea0:	b	15cb4 <_obstack_memory_used@@Base+0x1980>
   15ea4:	ldr	r3, [sp, #4]
   15ea8:	mov	r4, #1
   15eac:	cmp	r3, #0
   15eb0:	bne	15cf0 <_obstack_memory_used@@Base+0x19bc>
   15eb4:	b	15bf8 <_obstack_memory_used@@Base+0x18c4>
   15eb8:	andeq	r4, r1, ip, asr #30
   15ebc:	ldr	r3, [r0, #28]
   15ec0:	ldr	r2, [r0, #24]
   15ec4:	push	{r4, r5, r6, lr}
   15ec8:	mov	r5, r1
   15ecc:	ldr	r1, [r0, #16]
   15ed0:	sub	r2, r3, r2
   15ed4:	cmp	r2, r1
   15ed8:	mov	r4, r0
   15edc:	movls	r2, r3
   15ee0:	bhi	15f3c <_obstack_memory_used@@Base+0x1c08>
   15ee4:	ldr	r1, [r4, #20]
   15ee8:	ldr	r0, [r4, #8]
   15eec:	cmp	r1, #0
   15ef0:	addge	r5, r5, r1
   15ef4:	cmp	r5, r0
   15ef8:	bcc	15f1c <_obstack_memory_used@@Base+0x1be8>
   15efc:	ldr	r1, [r4, #32]
   15f00:	cmp	r1, r3
   15f04:	bls	15f4c <_obstack_memory_used@@Base+0x1c18>
   15f08:	add	r1, r2, #1
   15f0c:	mov	r3, #10
   15f10:	str	r1, [r4, #28]
   15f14:	strb	r3, [r2]
   15f18:	pop	{r4, r5, r6, pc}
   15f1c:	ldr	r2, [r4, #32]
   15f20:	cmp	r2, r3
   15f24:	bls	15f68 <_obstack_memory_used@@Base+0x1c34>
   15f28:	add	r1, r3, #1
   15f2c:	mov	r2, #32
   15f30:	str	r1, [r4, #28]
   15f34:	strb	r2, [r3]
   15f38:	pop	{r4, r5, r6, pc}
   15f3c:	bl	18e50 <argp_error@@Base+0xe00>
   15f40:	ldr	r3, [r4, #28]
   15f44:	mov	r2, r3
   15f48:	b	15ee4 <_obstack_memory_used@@Base+0x1bb0>
   15f4c:	mov	r1, #1
   15f50:	mov	r0, r4
   15f54:	bl	194e0 <argp_error@@Base+0x1490>
   15f58:	cmp	r0, #0
   15f5c:	popeq	{r4, r5, r6, pc}
   15f60:	ldr	r2, [r4, #28]
   15f64:	b	15f08 <_obstack_memory_used@@Base+0x1bd4>
   15f68:	mov	r1, #1
   15f6c:	mov	r0, r4
   15f70:	bl	194e0 <argp_error@@Base+0x1490>
   15f74:	cmp	r0, #0
   15f78:	popeq	{r4, r5, r6, pc}
   15f7c:	ldr	r3, [r4, #28]
   15f80:	b	15f28 <_obstack_memory_used@@Base+0x1bf4>
   15f84:	push	{r4, r5, r6, lr}
   15f88:	ldr	r5, [r0, #8]
   15f8c:	ldr	r2, [r0, #12]
   15f90:	ldr	ip, [r1, #12]
   15f94:	cmp	r5, #0
   15f98:	orr	r2, r2, ip
   15f9c:	beq	16004 <_obstack_memory_used@@Base+0x1cd0>
   15fa0:	tst	r2, #16
   15fa4:	bne	15fe0 <_obstack_memory_used@@Base+0x1cac>
   15fa8:	tst	r2, #1
   15fac:	mov	r6, r3
   15fb0:	mov	r4, r0
   15fb4:	bne	15fe8 <_obstack_memory_used@@Base+0x1cb4>
   15fb8:	mov	r0, r5
   15fbc:	bl	11268 <strlen@plt>
   15fc0:	add	r1, r0, #6
   15fc4:	mov	r0, r6
   15fc8:	bl	15ebc <_obstack_memory_used@@Base+0x1b88>
   15fcc:	mov	r3, r5
   15fd0:	ldr	r2, [r4, #4]
   15fd4:	mov	r0, r6
   15fd8:	ldr	r1, [pc, #56]	; 16018 <_obstack_memory_used@@Base+0x1ce4>
   15fdc:	bl	19500 <argp_error@@Base+0x14b0>
   15fe0:	mov	r0, #0
   15fe4:	pop	{r4, r5, r6, pc}
   15fe8:	ldr	r2, [r0, #4]
   15fec:	mov	r3, r5
   15ff0:	mov	r0, r6
   15ff4:	ldr	r1, [pc, #32]	; 1601c <_obstack_memory_used@@Base+0x1ce8>
   15ff8:	bl	19500 <argp_error@@Base+0x14b0>
   15ffc:	mov	r0, #0
   16000:	pop	{r4, r5, r6, pc}
   16004:	ldr	r5, [r1, #8]
   16008:	cmp	r5, #0
   1600c:	bne	15fa0 <_obstack_memory_used@@Base+0x1c6c>
   16010:	mov	r0, #0
   16014:	pop	{r4, r5, r6, pc}
   16018:	andeq	fp, r1, r4, ror #29
   1601c:	ldrdeq	fp, [r1], -r8
   16020:	mov	ip, r0
   16024:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16028:	mov	r8, r2
   1602c:	sub	sp, sp, #28
   16030:	mov	r2, ip
   16034:	ldr	ip, [ip, #16]
   16038:	mov	r9, r1
   1603c:	ldr	r1, [r0, #8]
   16040:	str	ip, [sp, #8]
   16044:	ldr	ip, [r8]
   16048:	str	r1, [sp, #16]
   1604c:	mov	r0, r1
   16050:	mov	r4, r3
   16054:	ldr	r1, [pc, #456]	; 16224 <_obstack_memory_used@@Base+0x1ef0>
   16058:	mov	r3, r9
   1605c:	mov	r5, ip
   16060:	str	ip, [sp, #20]
   16064:	ldr	r6, [sp, #64]	; 0x40
   16068:	bl	150e8 <_obstack_memory_used@@Base+0xdb4>
   1606c:	subs	r3, r0, #0
   16070:	str	r3, [sp, #12]
   16074:	beq	161d0 <_obstack_memory_used@@Base+0x1e9c>
   16078:	mov	r1, #10
   1607c:	bl	11124 <strchrnul@plt>
   16080:	ldrb	sl, [r0]
   16084:	mov	r7, r0
   16088:	cmp	sl, #0
   1608c:	bne	1618c <_obstack_memory_used@@Base+0x1e58>
   16090:	ldr	r5, [sp, #12]
   16094:	add	r1, r7, #1
   16098:	sub	r1, r1, r5
   1609c:	mov	r0, r6
   160a0:	bl	15ebc <_obstack_memory_used@@Base+0x1b88>
   160a4:	ldr	r0, [r6, #28]
   160a8:	sub	fp, r7, r5
   160ac:	ldr	r1, [r6, #32]
   160b0:	add	r2, r0, fp
   160b4:	cmp	r1, r2
   160b8:	bcs	160d4 <_obstack_memory_used@@Base+0x1da0>
   160bc:	mov	r1, fp
   160c0:	mov	r0, r6
   160c4:	bl	194e0 <argp_error@@Base+0x1490>
   160c8:	cmp	r0, #0
   160cc:	beq	160ec <_obstack_memory_used@@Base+0x1db8>
   160d0:	ldr	r0, [r6, #28]
   160d4:	mov	r2, fp
   160d8:	mov	r1, r5
   160dc:	bl	1116c <memcpy@plt>
   160e0:	ldr	r3, [r6, #28]
   160e4:	add	fp, r3, fp
   160e8:	str	fp, [r6, #28]
   160ec:	ldr	r3, [sp, #16]
   160f0:	ldr	r2, [sp, #12]
   160f4:	cmp	r3, r2
   160f8:	beq	16104 <_obstack_memory_used@@Base+0x1dd0>
   160fc:	mov	r0, r2
   16100:	bl	13f14 <argp_parse@@Base+0xe98>
   16104:	ldr	r3, [sp, #8]
   16108:	cmp	r3, #0
   1610c:	beq	16150 <_obstack_memory_used@@Base+0x1e1c>
   16110:	ldr	r2, [r3]
   16114:	cmp	r2, #0
   16118:	beq	16150 <_obstack_memory_used@@Base+0x1e1c>
   1611c:	ldr	r5, [sp, #8]
   16120:	mov	r3, r4
   16124:	mov	r0, r2
   16128:	str	r6, [sp]
   1612c:	mov	r2, r8
   16130:	mov	r1, r9
   16134:	bl	16020 <_obstack_memory_used@@Base+0x1cec>
   16138:	ldr	r2, [r5, #16]!
   1613c:	cmp	r2, #0
   16140:	clz	r3, r0
   16144:	lsr	r3, r3, #5
   16148:	bne	16124 <_obstack_memory_used@@Base+0x1df0>
   1614c:	mov	r4, r3
   16150:	cmp	r4, #0
   16154:	moveq	sl, #0
   16158:	andne	sl, sl, #1
   1615c:	cmp	sl, #0
   16160:	beq	161f0 <_obstack_memory_used@@Base+0x1ebc>
   16164:	ldrb	r0, [r7]
   16168:	cmp	r0, #0
   1616c:	bne	16200 <_obstack_memory_used@@Base+0x1ecc>
   16170:	ldr	r3, [sp, #20]
   16174:	ldrb	r4, [r3]
   16178:	cmp	r4, #0
   1617c:	moveq	r0, r4
   16180:	strbne	r0, [r3]
   16184:	add	sp, sp, #28
   16188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1618c:	ldrb	sl, [r5]
   16190:	cmp	sl, #0
   16194:	beq	1621c <_obstack_memory_used@@Base+0x1ee8>
   16198:	mov	fp, #0
   1619c:	add	r5, r0, #1
   161a0:	add	fp, fp, #1
   161a4:	mov	r0, r5
   161a8:	mov	r1, #10
   161ac:	bl	11124 <strchrnul@plt>
   161b0:	cmp	fp, sl
   161b4:	bne	1619c <_obstack_memory_used@@Base+0x1e68>
   161b8:	mov	r7, r0
   161bc:	ldr	r2, [r8]
   161c0:	mov	sl, #1
   161c4:	add	r2, r2, sl
   161c8:	str	r2, [r8]
   161cc:	b	16094 <_obstack_memory_used@@Base+0x1d60>
   161d0:	ldr	r3, [sp, #8]
   161d4:	cmp	r3, #0
   161d8:	beq	161f0 <_obstack_memory_used@@Base+0x1ebc>
   161dc:	ldr	r2, [r3]
   161e0:	cmp	r2, #0
   161e4:	ldrne	r7, [sp, #12]
   161e8:	movne	sl, r7
   161ec:	bne	1611c <_obstack_memory_used@@Base+0x1de8>
   161f0:	clz	r0, r4
   161f4:	lsr	r0, r0, #5
   161f8:	add	sp, sp, #28
   161fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16200:	ldr	r2, [sp, #20]
   16204:	mov	r0, #1
   16208:	ldrb	r3, [r2]
   1620c:	add	r3, r3, r0
   16210:	strb	r3, [r2]
   16214:	add	sp, sp, #28
   16218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1621c:	ldr	r5, [sp, #12]
   16220:	b	161bc <_obstack_memory_used@@Base+0x1e88>
   16224:	andeq	r0, r0, #6
   16228:	ldr	r2, [r0, #8]
   1622c:	cmp	r2, #0
   16230:	beq	1623c <_obstack_memory_used@@Base+0x1f08>
   16234:	mov	r0, #0
   16238:	bx	lr
   1623c:	ldr	r2, [r1, #8]
   16240:	cmp	r2, #0
   16244:	bne	16234 <_obstack_memory_used@@Base+0x1f00>
   16248:	ldr	r1, [r1, #12]
   1624c:	ldr	r2, [r0, #12]
   16250:	orr	r2, r2, r1
   16254:	tst	r2, #16
   16258:	ldreq	r2, [r3]
   1625c:	ldreq	r1, [r0, #4]
   16260:	addeq	r0, r2, #1
   16264:	streq	r0, [r3]
   16268:	strbeq	r1, [r2]
   1626c:	b	16234 <_obstack_memory_used@@Base+0x1f00>
   16270:	mov	r3, r0
   16274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16278:	sub	sp, sp, #52	; 0x34
   1627c:	ldr	r2, [r3, #16]
   16280:	str	r0, [sp, #24]
   16284:	mov	r0, #16
   16288:	ldr	r4, [r3]
   1628c:	str	r1, [sp, #28]
   16290:	str	r2, [sp, #8]
   16294:	bl	14dcc <_obstack_memory_used@@Base+0xa98>
   16298:	subs	r3, r0, #0
   1629c:	str	r3, [sp, #20]
   162a0:	beq	16904 <_obstack_memory_used@@Base+0x25d0>
   162a4:	ldr	r2, [sp, #20]
   162a8:	mov	r3, #0
   162ac:	cmp	r4, #0
   162b0:	str	r3, [r2, #4]
   162b4:	str	r3, [r2, #12]
   162b8:	beq	164bc <_obstack_memory_used@@Base+0x2188>
   162bc:	ldr	r5, [r4, #12]
   162c0:	ands	r5, r5, #4
   162c4:	bne	16918 <_obstack_memory_used@@Base+0x25e4>
   162c8:	add	r6, r4, #24
   162cc:	mov	r9, r5
   162d0:	mov	sl, r5
   162d4:	mov	fp, r2
   162d8:	b	1631c <_obstack_memory_used@@Base+0x1fe8>
   162dc:	ldr	r3, [r6, #-12]
   162e0:	tst	r3, #4
   162e4:	addeq	r9, r9, #1
   162e8:	streq	r9, [fp, #4]
   162ec:	tst	r3, #8
   162f0:	bne	16318 <_obstack_memory_used@@Base+0x1fe4>
   162f4:	sub	r3, r8, #1
   162f8:	cmp	r3, #254	; 0xfe
   162fc:	bhi	16318 <_obstack_memory_used@@Base+0x1fe4>
   16300:	bl	11250 <__ctype_b_loc@plt>
   16304:	lsl	r8, r8, #1
   16308:	ldr	r3, [r0]
   1630c:	ldrh	r3, [r3, r8]
   16310:	tst	r3, #16384	; 0x4000
   16314:	addne	sl, sl, #1
   16318:	add	r6, r6, #24
   1631c:	ldr	r8, [r6, #-20]	; 0xffffffec
   16320:	cmp	r8, #0
   16324:	bne	162dc <_obstack_memory_used@@Base+0x1fa8>
   16328:	ldr	r3, [r6, #-24]	; 0xffffffe8
   1632c:	cmp	r3, #0
   16330:	bne	162dc <_obstack_memory_used@@Base+0x1fa8>
   16334:	ldr	r3, [r6, #-8]
   16338:	cmp	r3, #0
   1633c:	bne	162dc <_obstack_memory_used@@Base+0x1fa8>
   16340:	ldr	r7, [r6, #-4]
   16344:	cmp	r7, #0
   16348:	bne	162dc <_obstack_memory_used@@Base+0x1fa8>
   1634c:	rsb	r9, r9, r9, lsl #3
   16350:	lsl	r0, r9, #2
   16354:	bl	14dcc <_obstack_memory_used@@Base+0xa98>
   16358:	ldr	r6, [sp, #20]
   1635c:	str	r0, [r6]
   16360:	add	r0, sl, #1
   16364:	bl	14dcc <_obstack_memory_used@@Base+0xa98>
   16368:	ldr	r8, [r6]
   1636c:	mov	r3, r6
   16370:	cmp	r0, #0
   16374:	cmpne	r8, #0
   16378:	mov	sl, r0
   1637c:	str	r0, [r3, #8]
   16380:	beq	168c8 <_obstack_memory_used@@Base+0x2594>
   16384:	ldr	r2, [sp, #20]
   16388:	ldr	r3, [pc, #1436]	; 1692c <_obstack_memory_used@@Base+0x25f8>
   1638c:	ldr	r2, [r2, #4]
   16390:	cmp	r2, r3
   16394:	bhi	168b4 <_obstack_memory_used@@Base+0x2580>
   16398:	add	r8, r8, #28
   1639c:	mov	r2, r8
   163a0:	ldr	r3, [r4, #4]
   163a4:	mov	r8, sl
   163a8:	mov	r9, r2
   163ac:	cmp	r3, #0
   163b0:	bne	163c0 <_obstack_memory_used@@Base+0x208c>
   163b4:	ldr	r2, [r4]
   163b8:	cmp	r2, #0
   163bc:	beq	1686c <_obstack_memory_used@@Base+0x2538>
   163c0:	str	r7, [r9, #-24]	; 0xffffffe8
   163c4:	ldr	r6, [r4, #20]
   163c8:	str	r4, [r9, #-28]	; 0xffffffe4
   163cc:	cmp	r6, #0
   163d0:	str	sl, [r9, #-20]	; 0xffffffec
   163d4:	bne	163ec <_obstack_memory_used@@Base+0x20b8>
   163d8:	ldr	r2, [r4]
   163dc:	cmp	r2, #0
   163e0:	cmpeq	r3, #0
   163e4:	movne	r6, r5
   163e8:	beq	16890 <_obstack_memory_used@@Base+0x255c>
   163ec:	ldr	r1, [sp, #28]
   163f0:	str	r6, [r9, #-16]
   163f4:	mov	r5, r4
   163f8:	ldr	r2, [r4, #12]
   163fc:	mov	r3, r7
   16400:	str	r1, [r9, #-12]
   16404:	ldr	r1, [sp, #24]
   16408:	str	r1, [r9, #-8]
   1640c:	add	r3, r3, #1
   16410:	tst	r2, #8
   16414:	str	r3, [r9, #-24]	; 0xffffffe8
   16418:	bne	16484 <_obstack_memory_used@@Base+0x2150>
   1641c:	ldr	fp, [r4, #4]
   16420:	sub	r3, fp, #1
   16424:	cmp	r3, #254	; 0xfe
   16428:	bhi	16484 <_obstack_memory_used@@Base+0x2150>
   1642c:	bl	11250 <__ctype_b_loc@plt>
   16430:	lsl	r3, fp, #1
   16434:	ldr	r2, [r0]
   16438:	ldrh	r3, [r2, r3]
   1643c:	tst	r3, #16384	; 0x4000
   16440:	beq	16484 <_obstack_memory_used@@Base+0x2150>
   16444:	cmp	r8, sl
   16448:	uxtb	r1, fp
   1644c:	bcs	1647c <_obstack_memory_used@@Base+0x2148>
   16450:	ldrb	r3, [r8]
   16454:	cmp	r3, r1
   16458:	movne	r3, r8
   1645c:	subne	r0, sl, #1
   16460:	bne	16474 <_obstack_memory_used@@Base+0x2140>
   16464:	b	16484 <_obstack_memory_used@@Base+0x2150>
   16468:	ldrb	r2, [r3, #1]!
   1646c:	cmp	r2, r1
   16470:	beq	16484 <_obstack_memory_used@@Base+0x2150>
   16474:	cmp	r0, r3
   16478:	bne	16468 <_obstack_memory_used@@Base+0x2134>
   1647c:	strb	r1, [sl]
   16480:	add	sl, sl, #1
   16484:	ldr	r3, [r5, #28]
   16488:	add	r4, r4, #24
   1648c:	cmp	r3, #0
   16490:	bne	164a0 <_obstack_memory_used@@Base+0x216c>
   16494:	ldr	r2, [r5, #24]
   16498:	cmp	r2, #0
   1649c:	beq	16848 <_obstack_memory_used@@Base+0x2514>
   164a0:	ldr	r2, [r5, #36]	; 0x24
   164a4:	tst	r2, #4
   164a8:	beq	16860 <_obstack_memory_used@@Base+0x252c>
   164ac:	ldr	r3, [r9, #-24]	; 0xffffffe8
   164b0:	mov	r5, r4
   164b4:	b	1640c <_obstack_memory_used@@Base+0x20d8>
   164b8:	strb	r3, [sl]
   164bc:	ldr	r3, [sp, #8]
   164c0:	cmp	r3, #0
   164c4:	beq	16600 <_obstack_memory_used@@Base+0x22cc>
   164c8:	ldr	r3, [r3]
   164cc:	cmp	r3, #0
   164d0:	beq	16600 <_obstack_memory_used@@Base+0x22cc>
   164d4:	ldr	r3, [sp, #20]
   164d8:	add	r3, r3, #12
   164dc:	str	r3, [sp, #44]	; 0x2c
   164e0:	ldr	r3, [sp, #8]
   164e4:	ldr	r5, [r3, #12]
   164e8:	cmp	r5, #0
   164ec:	ldrne	r6, [r3, #8]
   164f0:	bne	16504 <_obstack_memory_used@@Base+0x21d0>
   164f4:	ldr	r3, [sp, #8]
   164f8:	ldr	r6, [r3, #8]
   164fc:	cmp	r6, #0
   16500:	beq	16828 <_obstack_memory_used@@Base+0x24f4>
   16504:	ldr	r7, [sp, #24]
   16508:	ldr	r2, [sp, #8]
   1650c:	mov	r0, #28
   16510:	ldr	r3, [r7, #16]
   16514:	sub	r3, r2, r3
   16518:	asr	r4, r3, #4
   1651c:	bl	14dcc <_obstack_memory_used@@Base+0xa98>
   16520:	subs	r1, r0, #0
   16524:	beq	16564 <_obstack_memory_used@@Base+0x2230>
   16528:	ldr	r3, [sp, #28]
   1652c:	ldr	r0, [sp, #20]
   16530:	cmp	r3, #0
   16534:	str	r3, [r1, #12]
   16538:	ldrne	r3, [r3, #20]
   1653c:	ldr	r2, [r0, #12]
   16540:	addne	r3, r3, #1
   16544:	moveq	r3, #0
   16548:	str	r5, [r1, #8]
   1654c:	str	r6, [r1]
   16550:	str	r4, [r1, #4]
   16554:	str	r7, [r1, #16]
   16558:	str	r3, [r1, #20]
   1655c:	str	r2, [r1, #24]
   16560:	str	r1, [r0, #12]
   16564:	ldr	r3, [sp, #8]
   16568:	ldr	r0, [r3]
   1656c:	bl	16270 <_obstack_memory_used@@Base+0x1f3c>
   16570:	ldr	r3, [sp, #20]
   16574:	ldr	r2, [r3, #12]
   16578:	cmp	r2, #0
   1657c:	str	r0, [sp, #16]
   16580:	bne	1658c <_obstack_memory_used@@Base+0x2258>
   16584:	b	16830 <_obstack_memory_used@@Base+0x24fc>
   16588:	mov	r2, r3
   1658c:	ldr	r3, [r2, #24]
   16590:	cmp	r3, #0
   16594:	bne	16588 <_obstack_memory_used@@Base+0x2254>
   16598:	add	r2, r2, #24
   1659c:	ldr	r0, [sp, #16]
   165a0:	mov	ip, r0
   165a4:	ldr	r3, [r0, #4]
   165a8:	ldr	r1, [r0, #12]
   165ac:	cmp	r3, #0
   165b0:	str	r1, [r2]
   165b4:	mov	r2, #0
   165b8:	str	r2, [r0, #12]
   165bc:	beq	165e4 <_obstack_memory_used@@Base+0x22b0>
   165c0:	ldr	lr, [sp, #20]
   165c4:	ldr	r2, [lr, #4]
   165c8:	cmp	r2, #0
   165cc:	bne	1660c <_obstack_memory_used@@Base+0x22d8>
   165d0:	ldr	r0, [r0]
   165d4:	ldr	r1, [ip, #8]
   165d8:	stm	lr, {r0, r3}
   165dc:	str	r1, [lr, #8]
   165e0:	str	r2, [ip, #4]
   165e4:	ldr	r0, [sp, #16]
   165e8:	bl	15008 <_obstack_memory_used@@Base+0xcd4>
   165ec:	ldr	r2, [sp, #8]
   165f0:	ldr	r3, [r2, #16]!
   165f4:	cmp	r3, #0
   165f8:	str	r2, [sp, #8]
   165fc:	bne	164e0 <_obstack_memory_used@@Base+0x21ac>
   16600:	ldr	r0, [sp, #20]
   16604:	add	sp, sp, #52	; 0x34
   16608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1660c:	add	r3, r3, r2
   16610:	str	r3, [sp, #36]	; 0x24
   16614:	rsb	r0, r3, r3, lsl #3
   16618:	lsl	r0, r0, #2
   1661c:	bl	14dcc <_obstack_memory_used@@Base+0xa98>
   16620:	ldr	r3, [sp, #20]
   16624:	mov	r4, r0
   16628:	str	r0, [sp, #32]
   1662c:	ldr	r0, [r3, #8]
   16630:	bl	11268 <strlen@plt>
   16634:	ldr	r3, [sp, #16]
   16638:	mov	r8, r0
   1663c:	ldr	r0, [r3, #8]
   16640:	bl	11268 <strlen@plt>
   16644:	add	r0, r8, r0
   16648:	add	r0, r0, #1
   1664c:	bl	14dcc <_obstack_memory_used@@Base+0xa98>
   16650:	cmp	r4, #0
   16654:	cmpne	r0, #0
   16658:	mov	r7, r0
   1665c:	beq	168dc <_obstack_memory_used@@Base+0x25a8>
   16660:	ldr	r3, [sp, #36]	; 0x24
   16664:	ldr	r2, [pc, #704]	; 1692c <_obstack_memory_used@@Base+0x25f8>
   16668:	cmp	r3, r2
   1666c:	bhi	168f0 <_obstack_memory_used@@Base+0x25bc>
   16670:	ldr	r5, [sp, #20]
   16674:	ldr	r9, [sp, #32]
   16678:	ldm	r5, {r3, r4}
   1667c:	mov	r0, r9
   16680:	rsb	r6, r4, r4, lsl #3
   16684:	mov	r1, r3
   16688:	lsl	r6, r6, #2
   1668c:	mov	r2, r6
   16690:	str	r3, [sp, #40]	; 0x28
   16694:	bl	11244 <mempcpy@plt>
   16698:	ldr	r3, [sp, #16]
   1669c:	ldr	r1, [r3, #4]
   166a0:	mov	ip, r1
   166a4:	str	r1, [sp, #4]
   166a8:	rsb	r2, ip, ip, lsl #3
   166ac:	ldr	r1, [r3]
   166b0:	lsl	r2, r2, #2
   166b4:	bl	1116c <memcpy@plt>
   166b8:	ldr	r5, [r5, #8]
   166bc:	mov	r2, r8
   166c0:	mov	r1, r5
   166c4:	mov	r0, r7
   166c8:	bl	1116c <memcpy@plt>
   166cc:	cmp	r4, #0
   166d0:	beq	16840 <_obstack_memory_used@@Base+0x250c>
   166d4:	mov	r2, r9
   166d8:	ldr	r3, [r2, #8]
   166dc:	subs	r4, r4, #1
   166e0:	sub	r3, r3, r5
   166e4:	add	r3, r7, r3
   166e8:	str	r3, [r2, #8]
   166ec:	add	r2, r2, #28
   166f0:	bne	166d8 <_obstack_memory_used@@Base+0x23a4>
   166f4:	ldr	r3, [sp, #32]
   166f8:	add	r1, r3, r6
   166fc:	ldr	r3, [sp, #4]
   16700:	ldr	r2, [sp, #16]
   16704:	cmp	r3, #0
   16708:	add	r3, r7, r8
   1670c:	str	r3, [sp, #12]
   16710:	ldr	sl, [r2, #8]
   16714:	beq	16838 <_obstack_memory_used@@Base+0x2504>
   16718:	sub	r8, r3, #1
   1671c:	add	fp, r1, #28
   16720:	mov	r9, r3
   16724:	mov	r3, r8
   16728:	mov	r8, fp
   1672c:	mov	fp, sl
   16730:	mov	sl, r3
   16734:	ldr	r5, [r8, #-24]	; 0xffffffe8
   16738:	str	r9, [r8, #-20]	; 0xffffffec
   1673c:	cmp	r5, #0
   16740:	ldr	r4, [r8, #-28]	; 0xffffffe4
   16744:	bne	16758 <_obstack_memory_used@@Base+0x2424>
   16748:	b	167e4 <_obstack_memory_used@@Base+0x24b0>
   1674c:	subs	r5, r5, #1
   16750:	add	r4, r4, #24
   16754:	beq	167e4 <_obstack_memory_used@@Base+0x24b0>
   16758:	ldr	r3, [r4, #12]
   1675c:	tst	r3, #8
   16760:	bne	1674c <_obstack_memory_used@@Base+0x2418>
   16764:	ldr	r6, [r4, #4]
   16768:	sub	r3, r6, #1
   1676c:	cmp	r3, #254	; 0xfe
   16770:	bhi	1674c <_obstack_memory_used@@Base+0x2418>
   16774:	bl	11250 <__ctype_b_loc@plt>
   16778:	lsl	r3, r6, #1
   1677c:	ldr	r2, [r0]
   16780:	ldrh	r3, [r2, r3]
   16784:	tst	r3, #16384	; 0x4000
   16788:	beq	1674c <_obstack_memory_used@@Base+0x2418>
   1678c:	ldrb	r1, [fp]
   16790:	cmp	r1, r6
   16794:	bne	1674c <_obstack_memory_used@@Base+0x2418>
   16798:	ldr	r3, [sp, #12]
   1679c:	cmp	r7, r3
   167a0:	bcs	167cc <_obstack_memory_used@@Base+0x2498>
   167a4:	ldrb	r3, [r7]
   167a8:	cmp	r3, r1
   167ac:	movne	r3, r7
   167b0:	bne	167c4 <_obstack_memory_used@@Base+0x2490>
   167b4:	b	167d4 <_obstack_memory_used@@Base+0x24a0>
   167b8:	ldrb	r2, [r3, #1]!
   167bc:	cmp	r2, r1
   167c0:	beq	167d4 <_obstack_memory_used@@Base+0x24a0>
   167c4:	cmp	sl, r3
   167c8:	bne	167b8 <_obstack_memory_used@@Base+0x2484>
   167cc:	strb	r1, [r9]
   167d0:	add	r9, r9, #1
   167d4:	subs	r5, r5, #1
   167d8:	add	fp, fp, #1
   167dc:	add	r4, r4, #24
   167e0:	bne	16758 <_obstack_memory_used@@Base+0x2424>
   167e4:	ldr	r3, [sp, #4]
   167e8:	add	r8, r8, #28
   167ec:	subs	r3, r3, #1
   167f0:	str	r3, [sp, #4]
   167f4:	bne	16734 <_obstack_memory_used@@Base+0x2400>
   167f8:	mov	r3, #0
   167fc:	strb	r3, [r9]
   16800:	ldr	r0, [sp, #40]	; 0x28
   16804:	bl	13f14 <argp_parse@@Base+0xe98>
   16808:	ldr	r4, [sp, #20]
   1680c:	ldr	r0, [r4, #8]
   16810:	bl	13f14 <argp_parse@@Base+0xe98>
   16814:	ldr	r2, [sp, #32]
   16818:	str	r2, [r4]
   1681c:	ldr	r2, [sp, #36]	; 0x24
   16820:	stmib	r4, {r2, r7}
   16824:	b	165e4 <_obstack_memory_used@@Base+0x22b0>
   16828:	ldr	r1, [sp, #28]
   1682c:	b	16564 <_obstack_memory_used@@Base+0x2230>
   16830:	ldr	r2, [sp, #44]	; 0x2c
   16834:	b	1659c <_obstack_memory_used@@Base+0x2268>
   16838:	ldr	r9, [sp, #12]
   1683c:	b	167f8 <_obstack_memory_used@@Base+0x24c4>
   16840:	ldr	r1, [sp, #32]
   16844:	b	166fc <_obstack_memory_used@@Base+0x23c8>
   16848:	ldr	r2, [r5, #40]	; 0x28
   1684c:	cmp	r2, #0
   16850:	bne	164a0 <_obstack_memory_used@@Base+0x216c>
   16854:	ldr	r2, [r5, #44]	; 0x2c
   16858:	cmp	r2, #0
   1685c:	bne	164a0 <_obstack_memory_used@@Base+0x216c>
   16860:	add	r9, r9, #28
   16864:	mov	r5, r6
   16868:	b	163ac <_obstack_memory_used@@Base+0x2078>
   1686c:	ldr	r2, [r4, #16]
   16870:	cmp	r2, #0
   16874:	beq	16898 <_obstack_memory_used@@Base+0x2564>
   16878:	str	r3, [r9, #-24]	; 0xffffffe8
   1687c:	ldr	r6, [r4, #20]
   16880:	str	r4, [r9, #-28]	; 0xffffffe4
   16884:	cmp	r6, #0
   16888:	str	sl, [r9, #-20]	; 0xffffffec
   1688c:	bne	163ec <_obstack_memory_used@@Base+0x20b8>
   16890:	add	r6, r5, #1
   16894:	b	163ec <_obstack_memory_used@@Base+0x20b8>
   16898:	ldr	r6, [r4, #20]
   1689c:	cmp	r6, #0
   168a0:	beq	164b8 <_obstack_memory_used@@Base+0x2184>
   168a4:	str	r4, [r9, #-28]	; 0xffffffe4
   168a8:	str	r3, [r9, #-24]	; 0xffffffe8
   168ac:	str	sl, [r9, #-20]	; 0xffffffec
   168b0:	b	163ec <_obstack_memory_used@@Base+0x20b8>
   168b4:	ldr	r3, [pc, #116]	; 16930 <_obstack_memory_used@@Base+0x25fc>
   168b8:	mov	r2, #476	; 0x1dc
   168bc:	ldr	r1, [pc, #112]	; 16934 <_obstack_memory_used@@Base+0x2600>
   168c0:	ldr	r0, [pc, #112]	; 16938 <_obstack_memory_used@@Base+0x2604>
   168c4:	bl	113b8 <__assert_fail@plt>
   168c8:	ldr	r3, [pc, #96]	; 16930 <_obstack_memory_used@@Base+0x25fc>
   168cc:	ldr	r2, [pc, #104]	; 1693c <_obstack_memory_used@@Base+0x2608>
   168d0:	ldr	r1, [pc, #92]	; 16934 <_obstack_memory_used@@Base+0x2600>
   168d4:	ldr	r0, [pc, #100]	; 16940 <_obstack_memory_used@@Base+0x260c>
   168d8:	bl	113b8 <__assert_fail@plt>
   168dc:	ldr	r3, [pc, #96]	; 16944 <_obstack_memory_used@@Base+0x2610>
   168e0:	ldr	r2, [pc, #96]	; 16948 <_obstack_memory_used@@Base+0x2614>
   168e4:	ldr	r1, [pc, #72]	; 16934 <_obstack_memory_used@@Base+0x2600>
   168e8:	ldr	r0, [pc, #92]	; 1694c <_obstack_memory_used@@Base+0x2618>
   168ec:	bl	113b8 <__assert_fail@plt>
   168f0:	ldr	r3, [pc, #76]	; 16944 <_obstack_memory_used@@Base+0x2610>
   168f4:	mov	r2, #972	; 0x3cc
   168f8:	ldr	r1, [pc, #52]	; 16934 <_obstack_memory_used@@Base+0x2600>
   168fc:	ldr	r0, [pc, #76]	; 16950 <_obstack_memory_used@@Base+0x261c>
   16900:	bl	113b8 <__assert_fail@plt>
   16904:	ldr	r3, [pc, #36]	; 16930 <_obstack_memory_used@@Base+0x25fc>
   16908:	ldr	r2, [pc, #68]	; 16954 <_obstack_memory_used@@Base+0x2620>
   1690c:	ldr	r1, [pc, #32]	; 16934 <_obstack_memory_used@@Base+0x2600>
   16910:	ldr	r0, [pc, #64]	; 16958 <_obstack_memory_used@@Base+0x2624>
   16914:	bl	113b8 <__assert_fail@plt>
   16918:	ldr	r3, [pc, #16]	; 16930 <_obstack_memory_used@@Base+0x25fc>
   1691c:	mov	r2, #460	; 0x1cc
   16920:	ldr	r1, [pc, #12]	; 16934 <_obstack_memory_used@@Base+0x2600>
   16924:	ldr	r0, [pc, #48]	; 1695c <_obstack_memory_used@@Base+0x2628>
   16928:	bl	113b8 <__assert_fail@plt>
   1692c:	stmdbeq	r4!, {r0, r3, r6, r9, ip, pc}
   16930:	andeq	fp, r1, ip, lsr #28
   16934:	strdeq	fp, [r1], -r0
   16938:	andeq	fp, r1, r4, lsr pc
   1693c:	ldrdeq	r0, [r0], -sl
   16940:	andeq	fp, r1, r0, lsl pc
   16944:	andeq	fp, r1, r8, lsr lr
   16948:	andeq	r0, r0, sl, asr #7
   1694c:	andeq	fp, r1, r0, ror pc
   16950:	andeq	fp, r1, ip, lsl #31
   16954:	andeq	r0, r0, r2, asr #3
   16958:	strdeq	fp, [r1], -ip
   1695c:	andeq	fp, r1, r0, lsl #30
   16960:	cmp	r1, #0
   16964:	push	{r4, r5, r6, r7, r8, lr}
   16968:	beq	169e0 <_obstack_memory_used@@Base+0x26ac>
   1696c:	sub	r7, r1, #1
   16970:	mov	r8, r2
   16974:	mov	r6, r0
   16978:	ldm	r6, {r4, r5}
   1697c:	cmp	r5, #0
   16980:	sub	r5, r5, #1
   16984:	beq	169c4 <_obstack_memory_used@@Base+0x2690>
   16988:	add	r4, r4, #24
   1698c:	ldr	r3, [r4, #-24]	; 0xffffffe8
   16990:	mov	r1, r8
   16994:	subs	r0, r3, #0
   16998:	sub	r5, r5, #1
   1699c:	beq	169b8 <_obstack_memory_used@@Base+0x2684>
   169a0:	ldr	r3, [r4, #-12]
   169a4:	tst	r3, #2
   169a8:	bne	169b8 <_obstack_memory_used@@Base+0x2684>
   169ac:	bl	110f4 <strcmp@plt>
   169b0:	cmp	r0, #0
   169b4:	beq	169d8 <_obstack_memory_used@@Base+0x26a4>
   169b8:	cmn	r5, #1
   169bc:	add	r4, r4, #24
   169c0:	bne	1698c <_obstack_memory_used@@Base+0x2658>
   169c4:	sub	r7, r7, #1
   169c8:	cmn	r7, #1
   169cc:	add	r6, r6, #28
   169d0:	bne	16978 <_obstack_memory_used@@Base+0x2644>
   169d4:	mov	r6, #0
   169d8:	mov	r0, r6
   169dc:	pop	{r4, r5, r6, r7, r8, pc}
   169e0:	mov	r6, r1
   169e4:	b	169d8 <_obstack_memory_used@@Base+0x26a4>
   169e8:	push	{r4, r5, r6, lr}
   169ec:	subs	r4, r0, #0
   169f0:	mov	r5, r1
   169f4:	beq	16a08 <_obstack_memory_used@@Base+0x26d4>
   169f8:	mov	r1, #10
   169fc:	bl	11274 <strchr@plt>
   16a00:	adds	r4, r0, #0
   16a04:	movne	r4, #1
   16a08:	cmp	r5, #0
   16a0c:	beq	16a38 <_obstack_memory_used@@Base+0x2704>
   16a10:	ldr	r3, [r5]
   16a14:	cmp	r3, #0
   16a18:	beq	16a38 <_obstack_memory_used@@Base+0x2704>
   16a1c:	ldr	r1, [r3, #16]
   16a20:	ldr	r0, [r3, #8]
   16a24:	bl	169e8 <_obstack_memory_used@@Base+0x26b4>
   16a28:	ldr	r3, [r5, #16]!
   16a2c:	cmp	r3, #0
   16a30:	add	r4, r4, r0
   16a34:	bne	16a1c <_obstack_memory_used@@Base+0x26e8>
   16a38:	mov	r0, r4
   16a3c:	pop	{r4, r5, r6, pc}
   16a40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a44:	add	fp, sp, #32
   16a48:	sub	sp, sp, #12
   16a4c:	ldr	r5, [r0, #4]
   16a50:	cmp	r5, #0
   16a54:	bne	16a60 <_obstack_memory_used@@Base+0x272c>
   16a58:	sub	sp, fp, #32
   16a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a60:	mov	r6, r0
   16a64:	ldr	r0, [r0, #8]
   16a68:	mov	r9, r1
   16a6c:	bl	11268 <strlen@plt>
   16a70:	ldr	r8, [pc, #360]	; 16be0 <_obstack_memory_used@@Base+0x28ac>
   16a74:	ldr	r4, [r6]
   16a78:	sub	r7, fp, #36	; 0x24
   16a7c:	add	r3, r0, #15
   16a80:	bic	r3, r3, #7
   16a84:	sub	sp, sp, r3
   16a88:	mov	sl, sp
   16a8c:	str	sp, [r7, #-4]!
   16a90:	ldr	r2, [r4, #20]
   16a94:	mov	r0, r4
   16a98:	mov	r3, r7
   16a9c:	mov	r1, r8
   16aa0:	ldr	r2, [r2, #24]
   16aa4:	bl	14e54 <_obstack_memory_used@@Base+0xb20>
   16aa8:	subs	r5, r5, #1
   16aac:	add	r4, r4, #28
   16ab0:	bne	16a90 <_obstack_memory_used@@Base+0x275c>
   16ab4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16ab8:	cmp	sl, r3
   16abc:	bcc	16bc0 <_obstack_memory_used@@Base+0x288c>
   16ac0:	ldm	r6, {r4, r5}
   16ac4:	cmp	r5, #0
   16ac8:	beq	16a58 <_obstack_memory_used@@Base+0x2724>
   16acc:	ldr	r7, [pc, #272]	; 16be4 <_obstack_memory_used@@Base+0x28b0>
   16ad0:	ldr	r2, [r4, #20]
   16ad4:	mov	r0, r4
   16ad8:	mov	r3, r9
   16adc:	mov	r1, r7
   16ae0:	ldr	r2, [r2, #24]
   16ae4:	bl	14e54 <_obstack_memory_used@@Base+0xb20>
   16ae8:	subs	r5, r5, #1
   16aec:	add	r4, r4, #28
   16af0:	bne	16ad0 <_obstack_memory_used@@Base+0x279c>
   16af4:	ldm	r6, {r7, r8}
   16af8:	cmp	r8, #0
   16afc:	beq	16a58 <_obstack_memory_used@@Base+0x2724>
   16b00:	ldr	sl, [pc, #224]	; 16be8 <_obstack_memory_used@@Base+0x28b4>
   16b04:	add	r7, r7, #28
   16b08:	ldr	r5, [r7, #-24]	; 0xffffffe8
   16b0c:	ldr	r4, [r7, #-28]	; 0xffffffe4
   16b10:	cmp	r5, #0
   16b14:	movne	r6, r4
   16b18:	bne	16b2c <_obstack_memory_used@@Base+0x27f8>
   16b1c:	b	16b88 <_obstack_memory_used@@Base+0x2854>
   16b20:	subs	r5, r5, #1
   16b24:	add	r4, r4, #24
   16b28:	beq	16b88 <_obstack_memory_used@@Base+0x2854>
   16b2c:	ldr	r2, [r4]
   16b30:	cmp	r2, #0
   16b34:	beq	16b20 <_obstack_memory_used@@Base+0x27ec>
   16b38:	ldr	r1, [r4, #12]
   16b3c:	tst	r1, #4
   16b40:	moveq	r6, r4
   16b44:	tst	r1, #2
   16b48:	bne	16b20 <_obstack_memory_used@@Base+0x27ec>
   16b4c:	ldr	r3, [r4, #8]
   16b50:	ldr	r0, [r6, #12]
   16b54:	cmp	r3, #0
   16b58:	orr	r1, r1, r0
   16b5c:	beq	16b9c <_obstack_memory_used@@Base+0x2868>
   16b60:	tst	r1, #16
   16b64:	bne	16b20 <_obstack_memory_used@@Base+0x27ec>
   16b68:	tst	r1, #1
   16b6c:	moveq	r1, sl
   16b70:	ldrne	r1, [pc, #116]	; 16bec <_obstack_memory_used@@Base+0x28b8>
   16b74:	mov	r0, r9
   16b78:	bl	19500 <argp_error@@Base+0x14b0>
   16b7c:	subs	r5, r5, #1
   16b80:	add	r4, r4, #24
   16b84:	bne	16b2c <_obstack_memory_used@@Base+0x27f8>
   16b88:	subs	r8, r8, #1
   16b8c:	add	r7, r7, #28
   16b90:	bne	16b08 <_obstack_memory_used@@Base+0x27d4>
   16b94:	sub	sp, fp, #32
   16b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b9c:	tst	r1, #16
   16ba0:	bne	16b20 <_obstack_memory_used@@Base+0x27ec>
   16ba4:	ldr	r3, [r6, #8]
   16ba8:	cmp	r3, #0
   16bac:	bne	16b68 <_obstack_memory_used@@Base+0x2834>
   16bb0:	ldr	r1, [pc, #56]	; 16bf0 <_obstack_memory_used@@Base+0x28bc>
   16bb4:	mov	r0, r9
   16bb8:	bl	19500 <argp_error@@Base+0x14b0>
   16bbc:	b	16b20 <_obstack_memory_used@@Base+0x27ec>
   16bc0:	add	r1, r3, #1
   16bc4:	str	r1, [fp, #-40]	; 0xffffffd8
   16bc8:	mov	r2, sl
   16bcc:	ldr	r1, [pc, #32]	; 16bf4 <_obstack_memory_used@@Base+0x28c0>
   16bd0:	strb	r5, [r3]
   16bd4:	mov	r0, r9
   16bd8:	bl	19500 <argp_error@@Base+0x14b0>
   16bdc:	b	16ac0 <_obstack_memory_used@@Base+0x278c>
   16be0:	andeq	r6, r1, r8, lsr #4
   16be4:	andeq	r5, r1, r4, lsl #31
   16be8:	ldrdeq	fp, [r1], -r8
   16bec:	andeq	fp, r1, r8, asr #31
   16bf0:	andeq	fp, r1, r4, ror #31
   16bf4:	andeq	fp, r1, r0, asr #31

00016bf8 <argp_failure@@Base>:
   16bf8:	push	{r3}		; (str r3, [sp, #-4]!)
   16bfc:	push	{r4, r5, r6, r7, lr}
   16c00:	subs	r5, r0, #0
   16c04:	sub	sp, sp, #200	; 0xc8
   16c08:	mov	r7, r1
   16c0c:	mov	r6, r2
   16c10:	beq	16d60 <argp_failure@@Base+0x168>
   16c14:	ldr	r3, [r5, #16]
   16c18:	tst	r3, #2
   16c1c:	bne	16d50 <argp_failure@@Base+0x158>
   16c20:	ldr	r4, [r5, #44]	; 0x2c
   16c24:	cmp	r4, #0
   16c28:	beq	16d50 <argp_failure@@Base+0x158>
   16c2c:	mov	r0, r4
   16c30:	bl	1131c <flockfile@plt>
   16c34:	ldr	r0, [r5, #40]	; 0x28
   16c38:	mov	r1, r4
   16c3c:	bl	110d0 <fputs_unlocked@plt>
   16c40:	ldr	r3, [sp, #220]	; 0xdc
   16c44:	cmp	r3, #0
   16c48:	beq	16ca4 <argp_failure@@Base+0xac>
   16c4c:	ldr	r3, [r4, #20]
   16c50:	ldr	r1, [r4, #24]
   16c54:	add	r2, sp, #224	; 0xe0
   16c58:	cmp	r3, r1
   16c5c:	str	r2, [sp]
   16c60:	addcc	r1, r3, #1
   16c64:	movcc	r2, #58	; 0x3a
   16c68:	strcc	r1, [r4, #20]
   16c6c:	strbcc	r2, [r3]
   16c70:	bcs	16dac <argp_failure@@Base+0x1b4>
   16c74:	ldr	r3, [r4, #20]
   16c78:	ldr	r2, [r4, #24]
   16c7c:	cmp	r3, r2
   16c80:	addcc	r1, r3, #1
   16c84:	movcc	r2, #32
   16c88:	strcc	r1, [r4, #20]
   16c8c:	strbcc	r2, [r3]
   16c90:	bcs	16d9c <argp_failure@@Base+0x1a4>
   16c94:	ldr	r2, [sp]
   16c98:	ldr	r1, [sp, #220]	; 0xdc
   16c9c:	mov	r0, r4
   16ca0:	bl	112ec <vfprintf@plt>
   16ca4:	cmp	r6, #0
   16ca8:	beq	16d0c <argp_failure@@Base+0x114>
   16cac:	ldr	r3, [r4, #20]
   16cb0:	ldr	r2, [r4, #24]
   16cb4:	cmp	r3, r2
   16cb8:	addcc	r1, r3, #1
   16cbc:	movcc	r2, #58	; 0x3a
   16cc0:	strcc	r1, [r4, #20]
   16cc4:	strbcc	r2, [r3]
   16cc8:	bcs	16dcc <argp_failure@@Base+0x1d4>
   16ccc:	ldr	r3, [r4, #20]
   16cd0:	ldr	r2, [r4, #24]
   16cd4:	cmp	r3, r2
   16cd8:	addcc	r1, r3, #1
   16cdc:	movcc	r2, #32
   16ce0:	strcc	r1, [r4, #20]
   16ce4:	strbcc	r2, [r3]
   16ce8:	bcs	16dbc <argp_failure@@Base+0x1c4>
   16cec:	mov	r2, #200	; 0xc8
   16cf0:	mov	r1, sp
   16cf4:	mov	r0, r6
   16cf8:	bl	112a4 <strerror_r@plt>
   16cfc:	cmp	r0, #0
   16d00:	beq	16ddc <argp_failure@@Base+0x1e4>
   16d04:	mov	r1, r4
   16d08:	bl	110d0 <fputs_unlocked@plt>
   16d0c:	ldr	r3, [r4, #20]
   16d10:	ldr	r2, [r4, #24]
   16d14:	cmp	r3, r2
   16d18:	addcc	r1, r3, #1
   16d1c:	movcc	r2, #10
   16d20:	strcc	r1, [r4, #20]
   16d24:	strbcc	r2, [r3]
   16d28:	bcs	16d84 <argp_failure@@Base+0x18c>
   16d2c:	mov	r0, r4
   16d30:	bl	111b4 <funlockfile@plt>
   16d34:	cmp	r7, #0
   16d38:	beq	16d50 <argp_failure@@Base+0x158>
   16d3c:	cmp	r5, #0
   16d40:	beq	16d94 <argp_failure@@Base+0x19c>
   16d44:	ldr	r3, [r5, #16]
   16d48:	tst	r3, #32
   16d4c:	beq	16d94 <argp_failure@@Base+0x19c>
   16d50:	add	sp, sp, #200	; 0xc8
   16d54:	pop	{r4, r5, r6, r7, lr}
   16d58:	add	sp, sp, #4
   16d5c:	bx	lr
   16d60:	ldr	r3, [pc, #140]	; 16df4 <argp_failure@@Base+0x1fc>
   16d64:	ldr	r4, [r3]
   16d68:	cmp	r4, #0
   16d6c:	beq	16d50 <argp_failure@@Base+0x158>
   16d70:	mov	r0, r4
   16d74:	bl	1131c <flockfile@plt>
   16d78:	ldr	r3, [pc, #120]	; 16df8 <argp_failure@@Base+0x200>
   16d7c:	ldr	r0, [r3]
   16d80:	b	16c38 <argp_failure@@Base+0x40>
   16d84:	mov	r1, #10
   16d88:	mov	r0, r4
   16d8c:	bl	112d4 <__overflow@plt>
   16d90:	b	16d2c <argp_failure@@Base+0x134>
   16d94:	mov	r0, r7
   16d98:	bl	1125c <exit@plt>
   16d9c:	mov	r1, #32
   16da0:	mov	r0, r4
   16da4:	bl	112d4 <__overflow@plt>
   16da8:	b	16c94 <argp_failure@@Base+0x9c>
   16dac:	mov	r1, #58	; 0x3a
   16db0:	mov	r0, r4
   16db4:	bl	112d4 <__overflow@plt>
   16db8:	b	16c74 <argp_failure@@Base+0x7c>
   16dbc:	mov	r1, #32
   16dc0:	mov	r0, r4
   16dc4:	bl	112d4 <__overflow@plt>
   16dc8:	b	16cec <argp_failure@@Base+0xf4>
   16dcc:	mov	r1, #58	; 0x3a
   16dd0:	mov	r0, r4
   16dd4:	bl	112d4 <__overflow@plt>
   16dd8:	b	16ccc <argp_failure@@Base+0xd4>
   16ddc:	mov	r0, r6
   16de0:	bl	11220 <strerror@plt>
   16de4:	ldr	r3, [pc, #16]	; 16dfc <argp_failure@@Base+0x204>
   16de8:	cmp	r0, #0
   16dec:	moveq	r0, r3
   16df0:	b	16d04 <argp_failure@@Base+0x10c>
   16df4:			; <UNDEFINED> instruction: 0x000308b8
   16df8:			; <UNDEFINED> instruction: 0x000308b0
   16dfc:	andeq	fp, r1, ip, ror #31
   16e00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e04:	add	fp, sp, #32
   16e08:	cmp	r2, #0
   16e0c:	sub	sp, sp, #116	; 0x74
   16e10:	str	r2, [fp, #-132]	; 0xffffff7c
   16e14:	str	r0, [fp, #-112]	; 0xffffff90
   16e18:	str	r1, [fp, #-104]	; 0xffffff98
   16e1c:	str	r3, [fp, #-96]	; 0xffffffa0
   16e20:	beq	16ed8 <argp_failure@@Base+0x2e0>
   16e24:	ldr	sl, [pc, #4064]	; 17e0c <argp_failure@@Base+0x1214>
   16e28:	mov	r0, r2
   16e2c:	bl	1131c <flockfile@plt>
   16e30:	ldr	r3, [sl, #36]	; 0x24
   16e34:	cmp	r3, #0
   16e38:	str	r3, [fp, #-108]	; 0xffffff94
   16e3c:	beq	17388 <argp_failure@@Base+0x790>
   16e40:	mov	r3, #0
   16e44:	mov	r1, r3
   16e48:	ldr	r2, [sl, #32]
   16e4c:	ldr	r0, [fp, #-132]	; 0xffffff7c
   16e50:	bl	18dd4 <argp_error@@Base+0xd84>
   16e54:	subs	r9, r0, #0
   16e58:	beq	17ecc <argp_failure@@Base+0x12d4>
   16e5c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16e60:	ands	r3, r3, #11
   16e64:	streq	r3, [fp, #-136]	; 0xffffff78
   16e68:	bne	177e4 <argp_failure@@Base+0xbec>
   16e6c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16e70:	ands	r4, r3, #3
   16e74:	bne	175d8 <argp_failure@@Base+0x9e0>
   16e78:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16e7c:	tst	r3, #16
   16e80:	bne	175b4 <argp_failure@@Base+0x9bc>
   16e84:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16e88:	tst	r3, #4
   16e8c:	bne	17598 <argp_failure@@Base+0x9a0>
   16e90:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16e94:	tst	r3, #8
   16e98:	bne	16f2c <argp_failure@@Base+0x334>
   16e9c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16ea0:	tst	r3, #32
   16ea4:	bne	17360 <argp_failure@@Base+0x768>
   16ea8:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16eac:	tst	r3, #64	; 0x40
   16eb0:	bne	16ee0 <argp_failure@@Base+0x2e8>
   16eb4:	ldr	r0, [fp, #-132]	; 0xffffff7c
   16eb8:	bl	111b4 <funlockfile@plt>
   16ebc:	ldr	r3, [fp, #-136]	; 0xffffff78
   16ec0:	cmp	r3, #0
   16ec4:	beq	16ed0 <argp_failure@@Base+0x2d8>
   16ec8:	mov	r0, r3
   16ecc:	bl	15008 <_obstack_memory_used@@Base+0xcd4>
   16ed0:	mov	r0, r9
   16ed4:	bl	193c0 <argp_error@@Base+0x1370>
   16ed8:	sub	sp, fp, #32
   16edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ee0:	ldr	r5, [pc, #3880]	; 17e10 <argp_failure@@Base+0x1218>
   16ee4:	ldr	r2, [r5]
   16ee8:	cmp	r2, #0
   16eec:	beq	16eb4 <argp_failure@@Base+0x2bc>
   16ef0:	cmp	r4, #0
   16ef4:	beq	16f1c <argp_failure@@Base+0x324>
   16ef8:	ldr	r3, [r9, #28]
   16efc:	ldr	r2, [r9, #32]
   16f00:	cmp	r3, r2
   16f04:	bcs	17eb0 <argp_failure@@Base+0x12b8>
   16f08:	add	r1, r3, #1
   16f0c:	mov	r2, #10
   16f10:	str	r1, [r9, #28]
   16f14:	strb	r2, [r3]
   16f18:	ldr	r2, [r5]
   16f1c:	ldr	r1, [pc, #3824]	; 17e14 <argp_failure@@Base+0x121c>
   16f20:	mov	r0, r9
   16f24:	bl	19500 <argp_error@@Base+0x14b0>
   16f28:	b	16eb4 <argp_failure@@Base+0x2bc>
   16f2c:	ldr	r3, [fp, #-136]	; 0xffffff78
   16f30:	ldr	r3, [r3, #4]
   16f34:	cmp	r3, #0
   16f38:	str	r3, [fp, #-108]	; 0xffffff94
   16f3c:	beq	16e9c <argp_failure@@Base+0x2a4>
   16f40:	cmp	r4, #0
   16f44:	beq	17d60 <argp_failure@@Base+0x1168>
   16f48:	ldr	r3, [r9, #28]
   16f4c:	ldr	r2, [r9, #32]
   16f50:	cmp	r3, r2
   16f54:	bcs	17f04 <argp_failure@@Base+0x130c>
   16f58:	add	r1, r3, #1
   16f5c:	mov	r2, #10
   16f60:	str	r1, [r9, #28]
   16f64:	strb	r2, [r3]
   16f68:	ldr	r3, [fp, #-136]	; 0xffffff78
   16f6c:	ldr	r2, [fp, #-136]	; 0xffffff78
   16f70:	ldr	r3, [r3, #4]
   16f74:	ldr	r8, [r2]
   16f78:	str	r3, [fp, #-108]	; 0xffffff94
   16f7c:	ldr	r3, [fp, #-108]	; 0xffffff94
   16f80:	cmp	r3, #0
   16f84:	mov	r3, #0
   16f88:	str	r3, [fp, #-88]	; 0xffffffa8
   16f8c:	str	r3, [fp, #-84]	; 0xffffffac
   16f90:	str	r3, [fp, #-80]	; 0xffffffb0
   16f94:	beq	17350 <argp_failure@@Base+0x758>
   16f98:	str	sl, [fp, #-100]	; 0xffffff9c
   16f9c:	ldr	lr, [r9, #28]
   16fa0:	ldr	r3, [r9, #24]
   16fa4:	ldr	r5, [r9, #16]
   16fa8:	sub	lr, lr, r3
   16fac:	cmp	lr, r5
   16fb0:	ldr	r6, [r8]
   16fb4:	ldr	sl, [r8, #8]
   16fb8:	bhi	17ab8 <argp_failure@@Base+0xec0>
   16fbc:	ldr	r1, [r9, #4]
   16fc0:	ldr	r7, [r6, #12]
   16fc4:	str	r1, [fp, #-116]	; 0xffffff8c
   16fc8:	ldr	r1, [r9, #12]
   16fcc:	mov	r3, #0
   16fd0:	str	r1, [fp, #-120]	; 0xffffff88
   16fd4:	sub	r1, fp, #88	; 0x58
   16fd8:	str	r3, [r9, #4]
   16fdc:	and	r2, r7, #8
   16fe0:	str	r1, [fp, #-68]	; 0xffffffbc
   16fe4:	ldr	r1, [fp, #-104]	; 0xffffff98
   16fe8:	mov	r0, #1
   16fec:	cmp	r2, r3
   16ff0:	mov	r4, r2
   16ff4:	str	r0, [fp, #-64]	; 0xffffffc0
   16ff8:	str	r8, [fp, #-76]	; 0xffffffb4
   16ffc:	str	r9, [fp, #-72]	; 0xffffffb8
   17000:	str	r1, [fp, #-60]	; 0xffffffc4
   17004:	bne	17944 <argp_failure@@Base+0xd4c>
   17008:	ldr	ip, [r8, #4]
   1700c:	cmp	ip, r3
   17010:	beq	1703c <argp_failure@@Base+0x444>
   17014:	add	r0, r6, #24
   17018:	ldr	r3, [r0, #-24]	; 0xffffffe8
   1701c:	cmp	r3, #0
   17020:	beq	17030 <argp_failure@@Base+0x438>
   17024:	ldr	r3, [r0, #-12]
   17028:	tst	r3, #2
   1702c:	beq	17940 <argp_failure@@Base+0xd48>
   17030:	subs	ip, ip, #1
   17034:	add	r0, r0, #24
   17038:	bne	17018 <argp_failure@@Base+0x420>
   1703c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17040:	cmp	lr, r5
   17044:	str	r2, [fp, #-128]	; 0xffffff80
   17048:	ldr	r5, [r3, #8]
   1704c:	bhi	17958 <argp_failure@@Base+0xd60>
   17050:	str	r5, [r9, #12]
   17054:	ldr	r5, [r8, #4]
   17058:	cmp	r5, #0
   1705c:	beq	170e0 <argp_failure@@Base+0x4e8>
   17060:	mov	r4, r6
   17064:	str	r8, [fp, #-124]	; 0xffffff84
   17068:	b	17080 <argp_failure@@Base+0x488>
   1706c:	subs	r5, r5, #1
   17070:	add	r4, r4, #24
   17074:	beq	170d4 <argp_failure@@Base+0x4dc>
   17078:	ldr	r7, [r4, #12]
   1707c:	and	r2, r7, #8
   17080:	cmp	r2, #0
   17084:	bne	1706c <argp_failure@@Base+0x474>
   17088:	ldr	r8, [r4, #4]
   1708c:	sub	r2, r8, #1
   17090:	cmp	r2, #254	; 0xfe
   17094:	bhi	1706c <argp_failure@@Base+0x474>
   17098:	bl	11250 <__ctype_b_loc@plt>
   1709c:	lsl	r2, r8, #1
   170a0:	ldr	r1, [r0]
   170a4:	ldrh	r2, [r1, r2]
   170a8:	tst	r2, #16384	; 0x4000
   170ac:	beq	1706c <argp_failure@@Base+0x474>
   170b0:	ldrb	r2, [sl]
   170b4:	cmp	r8, r2
   170b8:	bne	1706c <argp_failure@@Base+0x474>
   170bc:	tst	r7, #2
   170c0:	beq	17a04 <argp_failure@@Base+0xe0c>
   170c4:	subs	r5, r5, #1
   170c8:	add	sl, sl, #1
   170cc:	add	r4, r4, #24
   170d0:	bne	17078 <argp_failure@@Base+0x480>
   170d4:	ldr	r4, [r6, #12]
   170d8:	ldr	r8, [fp, #-124]	; 0xffffff84
   170dc:	and	r4, r4, #8
   170e0:	ldr	r3, [r9, #28]
   170e4:	ldr	r1, [r9, #24]
   170e8:	cmp	r4, #0
   170ec:	ldr	r2, [r9, #16]
   170f0:	sub	r3, r3, r1
   170f4:	beq	17970 <argp_failure@@Base+0xd78>
   170f8:	cmp	r3, r2
   170fc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17100:	ldr	r4, [r3, #16]
   17104:	bhi	17c38 <argp_failure@@Base+0x1040>
   17108:	str	r4, [r9, #12]
   1710c:	ldr	r5, [r8, #4]
   17110:	cmp	r5, #0
   17114:	addne	r4, r6, #24
   17118:	bne	1712c <argp_failure@@Base+0x534>
   1711c:	b	171bc <argp_failure@@Base+0x5c4>
   17120:	subs	r5, r5, #1
   17124:	add	r4, r4, #24
   17128:	beq	171bc <argp_failure@@Base+0x5c4>
   1712c:	ldr	r3, [r4, #-24]	; 0xffffffe8
   17130:	cmp	r3, #0
   17134:	beq	17120 <argp_failure@@Base+0x528>
   17138:	ldr	r3, [r4, #-12]
   1713c:	tst	r3, #2
   17140:	bne	17120 <argp_failure@@Base+0x528>
   17144:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17148:	sub	r1, fp, #76	; 0x4c
   1714c:	ldr	r0, [r3, #16]
   17150:	bl	15338 <_obstack_memory_used@@Base+0x1004>
   17154:	ldr	sl, [r4, #-24]	; 0xffffffe8
   17158:	mov	r0, sl
   1715c:	bl	11268 <strlen@plt>
   17160:	subs	r7, r0, #0
   17164:	beq	17120 <argp_failure@@Base+0x528>
   17168:	ldr	r2, [r9, #28]
   1716c:	ldr	lr, [r9, #32]
   17170:	add	ip, r2, r7
   17174:	cmp	lr, ip
   17178:	mov	r1, r7
   1717c:	mov	r0, r9
   17180:	bcs	17194 <argp_failure@@Base+0x59c>
   17184:	bl	194e0 <argp_error@@Base+0x1490>
   17188:	cmp	r0, #0
   1718c:	beq	17120 <argp_failure@@Base+0x528>
   17190:	ldr	r2, [r9, #28]
   17194:	mov	r0, r2
   17198:	mov	r1, sl
   1719c:	mov	r2, r7
   171a0:	bl	1116c <memcpy@plt>
   171a4:	ldr	r2, [r9, #28]
   171a8:	subs	r5, r5, #1
   171ac:	add	r3, r2, r7
   171b0:	str	r3, [r9, #28]
   171b4:	add	r4, r4, #24
   171b8:	bne	1712c <argp_failure@@Base+0x534>
   171bc:	ldr	r3, [r9, #28]
   171c0:	ldr	r1, [r9, #24]
   171c4:	ldr	r2, [r9, #16]
   171c8:	sub	r3, r3, r1
   171cc:	cmp	r3, r2
   171d0:	bhi	17bec <argp_failure@@Base+0xff4>
   171d4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   171d8:	mov	r3, #0
   171dc:	cmp	r2, r3
   171e0:	str	r3, [r9, #4]
   171e4:	beq	17ad4 <argp_failure@@Base+0xedc>
   171e8:	ldr	r3, [r6, #12]
   171ec:	tst	r3, #8
   171f0:	bne	1721c <argp_failure@@Base+0x624>
   171f4:	ldr	r4, [r6, #4]
   171f8:	sub	r3, r4, #1
   171fc:	cmp	r3, #254	; 0xfe
   17200:	bhi	1721c <argp_failure@@Base+0x624>
   17204:	bl	11250 <__ctype_b_loc@plt>
   17208:	lsl	r4, r4, #1
   1720c:	ldr	r3, [r0]
   17210:	ldrh	r3, [r3, r4]
   17214:	tst	r3, #16384	; 0x4000
   17218:	bne	17228 <argp_failure@@Base+0x630>
   1721c:	ldr	r3, [r6]
   17220:	cmp	r3, #0
   17224:	beq	17e9c <argp_failure@@Base+0x12a4>
   17228:	ldr	r3, [r9, #28]
   1722c:	ldr	r1, [r9, #24]
   17230:	ldr	r2, [r9, #16]
   17234:	sub	r3, r3, r1
   17238:	cmp	r3, r2
   1723c:	bhi	17a84 <argp_failure@@Base+0xe8c>
   17240:	ldr	r3, [fp, #-116]	; 0xffffff8c
   17244:	str	r3, [r9, #4]
   17248:	ldr	r3, [fp, #-108]	; 0xffffff94
   1724c:	add	r8, r8, #28
   17250:	subs	r3, r3, #1
   17254:	str	r3, [fp, #-108]	; 0xffffff94
   17258:	ldr	r3, [fp, #-120]	; 0xffffff88
   1725c:	str	r3, [r9, #12]
   17260:	bne	16f9c <argp_failure@@Base+0x3a4>
   17264:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17268:	ldr	sl, [fp, #-100]	; 0xffffff9c
   1726c:	cmp	r3, #0
   17270:	beq	17350 <argp_failure@@Base+0x758>
   17274:	ldr	r3, [sl, #4]
   17278:	cmp	r3, #0
   1727c:	beq	17350 <argp_failure@@Base+0x758>
   17280:	ldr	r3, [fp, #-104]	; 0xffffff98
   17284:	ldr	r1, [pc, #2956]	; 17e18 <argp_failure@@Base+0x1220>
   17288:	cmp	r3, #0
   1728c:	ldr	r0, [pc, #2952]	; 17e1c <argp_failure@@Base+0x1224>
   17290:	ldrne	r2, [r3]
   17294:	ldreq	r2, [fp, #-104]	; 0xffffff98
   17298:	ldr	r3, [fp, #-104]	; 0xffffff98
   1729c:	bl	150e8 <_obstack_memory_used@@Base+0xdb4>
   172a0:	subs	r4, r0, #0
   172a4:	beq	17350 <argp_failure@@Base+0x758>
   172a8:	ldrb	r3, [r4]
   172ac:	cmp	r3, #0
   172b0:	beq	17344 <argp_failure@@Base+0x74c>
   172b4:	ldr	r3, [r9, #28]
   172b8:	ldr	r2, [r9, #32]
   172bc:	cmp	r3, r2
   172c0:	bcs	17f60 <argp_failure@@Base+0x1368>
   172c4:	add	r1, r3, #1
   172c8:	mov	r2, #10
   172cc:	str	r1, [r9, #28]
   172d0:	strb	r2, [r3]
   172d4:	mov	r0, r4
   172d8:	bl	11268 <strlen@plt>
   172dc:	subs	r5, r0, #0
   172e0:	beq	17f3c <argp_failure@@Base+0x1344>
   172e4:	ldr	r0, [r9, #28]
   172e8:	ldr	r2, [r9, #32]
   172ec:	add	r3, r0, r5
   172f0:	cmp	r2, r3
   172f4:	bcs	17310 <argp_failure@@Base+0x718>
   172f8:	mov	r1, r5
   172fc:	mov	r0, r9
   17300:	bl	194e0 <argp_error@@Base+0x1490>
   17304:	cmp	r0, #0
   17308:	beq	17f3c <argp_failure@@Base+0x1344>
   1730c:	ldr	r0, [r9, #28]
   17310:	mov	r2, r5
   17314:	mov	r1, r4
   17318:	bl	1116c <memcpy@plt>
   1731c:	ldr	r3, [r9, #28]
   17320:	add	r3, r3, r5
   17324:	str	r3, [r9, #28]
   17328:	ldr	r2, [r9, #32]
   1732c:	cmp	r2, r3
   17330:	bls	17f44 <argp_failure@@Base+0x134c>
   17334:	add	r1, r3, #1
   17338:	mov	r2, #10
   1733c:	str	r1, [r9, #28]
   17340:	strb	r2, [r3]
   17344:	ldr	r3, [pc, #2768]	; 17e1c <argp_failure@@Base+0x1224>
   17348:	cmp	r4, r3
   1734c:	bne	17e90 <argp_failure@@Base+0x1298>
   17350:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17354:	mov	r4, #1
   17358:	tst	r3, #32
   1735c:	beq	16ea8 <argp_failure@@Base+0x2b0>
   17360:	mov	r3, #0
   17364:	str	r3, [sp]
   17368:	str	r9, [sp, #4]
   1736c:	mov	r3, r4
   17370:	ldr	r1, [fp, #-104]	; 0xffffff98
   17374:	ldr	r0, [fp, #-112]	; 0xffffff90
   17378:	mov	r2, #1
   1737c:	bl	154e4 <_obstack_memory_used@@Base+0x11b0>
   17380:	orr	r4, r4, r0
   17384:	b	16ea8 <argp_failure@@Base+0x2b0>
   17388:	ldr	r0, [pc, #2704]	; 17e20 <argp_failure@@Base+0x1228>
   1738c:	bl	111f0 <getenv@plt>
   17390:	mov	lr, sl
   17394:	sub	r3, fp, #76	; 0x4c
   17398:	mov	ip, r3
   1739c:	str	r3, [fp, #-100]	; 0xffffff9c
   173a0:	mov	r6, r0
   173a4:	ldm	lr!, {r0, r1, r2, r3}
   173a8:	cmp	r6, #0
   173ac:	stmia	ip!, {r0, r1, r2, r3}
   173b0:	ldm	lr!, {r0, r1, r2, r3}
   173b4:	stmia	ip!, {r0, r1, r2, r3}
   173b8:	ldm	lr, {r0, r1}
   173bc:	stm	ip, {r0, r1}
   173c0:	beq	16e40 <argp_failure@@Base+0x248>
   173c4:	ldrb	r9, [r6]
   173c8:	ldr	r8, [pc, #2644]	; 17e24 <argp_failure@@Base+0x122c>
   173cc:	cmp	r9, #0
   173d0:	beq	17524 <argp_failure@@Base+0x92c>
   173d4:	bl	11250 <__ctype_b_loc@plt>
   173d8:	mov	r5, r0
   173dc:	ldr	r1, [r0]
   173e0:	b	173e8 <argp_failure@@Base+0x7f0>
   173e4:	ldrb	r9, [r6, #1]!
   173e8:	lsl	r3, r9, #1
   173ec:	ldrh	r3, [r1, r3]
   173f0:	tst	r3, #8192	; 0x2000
   173f4:	bne	173e4 <argp_failure@@Base+0x7ec>
   173f8:	ands	r2, r3, #1024	; 0x400
   173fc:	beq	1751c <argp_failure@@Base+0x924>
   17400:	cmp	r9, #95	; 0x5f
   17404:	cmpne	r9, #45	; 0x2d
   17408:	lsl	r3, r3, #28
   1740c:	moveq	r7, #1
   17410:	movne	r7, #0
   17414:	orrs	r3, r7, r3, lsr #31
   17418:	beq	17cd8 <argp_failure@@Base+0x10e0>
   1741c:	mov	r4, r6
   17420:	ldrb	r3, [r4, #1]!
   17424:	cmp	r3, #95	; 0x5f
   17428:	cmpne	r3, #45	; 0x2d
   1742c:	lsl	r2, r3, #1
   17430:	moveq	r0, #1
   17434:	ldrh	r2, [r1, r2]
   17438:	movne	r0, #0
   1743c:	lsl	ip, r2, #28
   17440:	orrs	r0, r0, ip, lsr #31
   17444:	bne	17420 <argp_failure@@Base+0x828>
   17448:	tst	r2, #8192	; 0x2000
   1744c:	sub	r7, r4, r6
   17450:	beq	17468 <argp_failure@@Base+0x870>
   17454:	ldrb	r3, [r4, #1]!
   17458:	lsl	r2, r3, #1
   1745c:	ldrh	r2, [r1, r2]
   17460:	tst	r2, #8192	; 0x2000
   17464:	bne	17454 <argp_failure@@Base+0x85c>
   17468:	cmp	r3, #44	; 0x2c
   1746c:	cmpne	r3, #0
   17470:	beq	17584 <argp_failure@@Base+0x98c>
   17474:	cmp	r3, #61	; 0x3d
   17478:	beq	178e0 <argp_failure@@Base+0xce8>
   1747c:	ldrb	r3, [r4]
   17480:	lsl	r3, r3, #1
   17484:	ldrh	r3, [r1, r3]
   17488:	tst	r3, #2048	; 0x800
   1748c:	bne	17880 <argp_failure@@Base+0xc88>
   17490:	ldr	r3, [fp, #-108]	; 0xffffff94
   17494:	mov	r9, r3
   17498:	str	r3, [fp, #-116]	; 0xffffff8c
   1749c:	ldr	r5, [pc, #2436]	; 17e28 <argp_failure@@Base+0x1230>
   174a0:	b	174b0 <argp_failure@@Base+0x8b8>
   174a4:	add	r5, r5, #16
   174a8:	cmp	r5, r8
   174ac:	beq	17d40 <argp_failure@@Base+0x1148>
   174b0:	mov	r0, r5
   174b4:	bl	11268 <strlen@plt>
   174b8:	cmp	r0, r7
   174bc:	bne	174a4 <argp_failure@@Base+0x8ac>
   174c0:	mov	r2, r7
   174c4:	mov	r1, r5
   174c8:	mov	r0, r6
   174cc:	bl	11388 <strncmp@plt>
   174d0:	cmp	r0, #0
   174d4:	bne	174a4 <argp_failure@@Base+0x8ac>
   174d8:	cmp	r9, #0
   174dc:	beq	174ec <argp_failure@@Base+0x8f4>
   174e0:	ldrb	r1, [r5, #14]
   174e4:	cmp	r1, #0
   174e8:	beq	17f20 <argp_failure@@Base+0x1328>
   174ec:	ldrb	r3, [r5, #15]
   174f0:	sub	r2, fp, #36	; 0x24
   174f4:	add	r3, r2, r3
   174f8:	ldr	r2, [fp, #-116]	; 0xffffff8c
   174fc:	str	r2, [r3, #-40]	; 0xffffffd8
   17500:	cmp	r5, r8
   17504:	beq	17d40 <argp_failure@@Base+0x1148>
   17508:	ldrb	r9, [r4]
   1750c:	cmp	r9, #44	; 0x2c
   17510:	beq	17c20 <argp_failure@@Base+0x1028>
   17514:	mov	r6, r4
   17518:	b	173cc <argp_failure@@Base+0x7d4>
   1751c:	cmp	r9, #0
   17520:	bne	17e78 <argp_failure@@Base+0x1280>
   17524:	ldr	lr, [fp, #-44]	; 0xffffffd4
   17528:	ldr	r1, [pc, #2296]	; 17e28 <argp_failure@@Base+0x1230>
   1752c:	add	r3, r1, #16
   17530:	cmp	r3, r8
   17534:	mov	r1, r3
   17538:	beq	17c7c <argp_failure@@Base+0x1084>
   1753c:	ldrb	r2, [r3, #14]
   17540:	cmp	r2, #0
   17544:	bne	1752c <argp_failure@@Base+0x934>
   17548:	ldrb	r0, [r3, #15]
   1754c:	sub	ip, fp, #36	; 0x24
   17550:	cmp	r0, #32
   17554:	add	ip, ip, r0
   17558:	beq	1752c <argp_failure@@Base+0x934>
   1755c:	ldr	r0, [ip, #-40]	; 0xffffffd8
   17560:	cmp	r0, lr
   17564:	blt	1752c <argp_failure@@Base+0x934>
   17568:	ldr	r1, [pc, #2236]	; 17e2c <argp_failure@@Base+0x1234>
   1756c:	ldr	r0, [fp, #-104]	; 0xffffff98
   17570:	stm	sp, {r1, r3}
   17574:	ldr	r3, [pc, #2228]	; 17e30 <argp_failure@@Base+0x1238>
   17578:	mov	r1, r2
   1757c:	bl	16bf8 <argp_failure@@Base>
   17580:	b	16e40 <argp_failure@@Base+0x248>
   17584:	cmp	r9, #110	; 0x6e
   17588:	beq	17910 <argp_failure@@Base+0xd18>
   1758c:	mov	r9, #1
   17590:	str	r9, [fp, #-116]	; 0xffffff8c
   17594:	b	1749c <argp_failure@@Base+0x8a4>
   17598:	ldr	r3, [fp, #4]
   1759c:	ldr	r1, [pc, #2192]	; 17e34 <argp_failure@@Base+0x123c>
   175a0:	mov	r2, r3
   175a4:	mov	r0, r9
   175a8:	bl	19500 <argp_error@@Base+0x14b0>
   175ac:	mov	r4, #1
   175b0:	b	16e90 <argp_failure@@Base+0x298>
   175b4:	mov	r2, #1
   175b8:	mov	r3, #0
   175bc:	stm	sp, {r2, r9}
   175c0:	ldr	r1, [fp, #-104]	; 0xffffff98
   175c4:	mov	r2, r3
   175c8:	ldr	r0, [fp, #-112]	; 0xffffff90
   175cc:	bl	154e4 <_obstack_memory_used@@Base+0x11b0>
   175d0:	orr	r4, r4, r0
   175d4:	b	16e84 <argp_failure@@Base+0x28c>
   175d8:	ldr	r3, [fp, #-112]	; 0xffffff90
   175dc:	mov	r4, #1
   175e0:	mov	r6, r4
   175e4:	ldr	r1, [r3, #16]
   175e8:	ldr	r0, [r3, #8]
   175ec:	bl	169e8 <_obstack_memory_used@@Base+0x26b4>
   175f0:	mov	r1, #0
   175f4:	add	r3, r0, #14
   175f8:	bic	r3, r3, #7
   175fc:	sub	sp, sp, r3
   17600:	add	r7, sp, #8
   17604:	mov	r2, r0
   17608:	mov	r0, r7
   1760c:	bl	112b0 <memset@plt>
   17610:	sub	r3, fp, #76	; 0x4c
   17614:	str	r3, [fp, #-100]	; 0xffffff9c
   17618:	ldr	r8, [fp, #-136]	; 0xffffff78
   1761c:	str	r7, [fp, #-108]	; 0xffffff94
   17620:	b	1773c <argp_failure@@Base+0xb44>
   17624:	cmp	r4, #0
   17628:	ldr	r3, [fp, #-108]	; 0xffffff94
   1762c:	ldr	r5, [r9, #12]
   17630:	ldrne	r2, [pc, #2048]	; 17e38 <argp_failure@@Base+0x1240>
   17634:	str	r7, [r9, #12]
   17638:	ldreq	r2, [pc, #2044]	; 17e3c <argp_failure@@Base+0x1244>
   1763c:	str	r3, [fp, #-76]	; 0xffffffb4
   17640:	ldr	r1, [pc, #2040]	; 17e40 <argp_failure@@Base+0x1248>
   17644:	ldr	r3, [fp, #4]
   17648:	mov	r0, r9
   1764c:	bl	19500 <argp_error@@Base+0x14b0>
   17650:	ldr	r3, [r9, #28]
   17654:	ldr	r1, [r9, #24]
   17658:	ldr	r2, [r9, #16]
   1765c:	sub	r3, r3, r1
   17660:	cmp	r3, r2
   17664:	ldr	r7, [sl, #28]
   17668:	bhi	177d0 <argp_failure@@Base+0xbd8>
   1766c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17670:	ldr	r4, [r9, #4]
   17674:	tst	r3, #2
   17678:	str	r7, [r9, #4]
   1767c:	beq	177b4 <argp_failure@@Base+0xbbc>
   17680:	ldr	r3, [r8, #4]
   17684:	cmp	r3, #0
   17688:	beq	176d8 <argp_failure@@Base+0xae0>
   1768c:	ldr	ip, [r9, #28]
   17690:	ldr	r2, [r9, #32]
   17694:	add	r3, ip, #12
   17698:	cmp	r2, r3
   1769c:	bcs	176b8 <argp_failure@@Base+0xac0>
   176a0:	mov	r1, #12
   176a4:	mov	r0, r9
   176a8:	bl	194e0 <argp_error@@Base+0x1490>
   176ac:	cmp	r0, #0
   176b0:	beq	176d8 <argp_failure@@Base+0xae0>
   176b4:	ldr	ip, [r9, #28]
   176b8:	ldr	r3, [pc, #1924]	; 17e44 <argp_failure@@Base+0x124c>
   176bc:	ldm	r3!, {r0, r1, r2}
   176c0:	str	r0, [ip]
   176c4:	str	r1, [ip, #4]
   176c8:	str	r2, [ip, #8]
   176cc:	ldr	r3, [r9, #28]
   176d0:	add	r3, r3, #12
   176d4:	str	r3, [r9, #28]
   176d8:	mov	r3, r6
   176dc:	ldr	r1, [fp, #-104]	; 0xffffff98
   176e0:	str	r9, [sp]
   176e4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   176e8:	ldr	r0, [fp, #-112]	; 0xffffff90
   176ec:	bl	16020 <_obstack_memory_used@@Base+0x1cec>
   176f0:	ldr	r3, [r9, #28]
   176f4:	ldr	r1, [r9, #24]
   176f8:	sub	r1, r3, r1
   176fc:	mov	r7, r0
   17700:	ldr	r0, [r9, #16]
   17704:	cmp	r1, r0
   17708:	strls	r5, [r9, #12]
   1770c:	bhi	17780 <argp_failure@@Base+0xb88>
   17710:	ldr	r1, [r9, #32]
   17714:	str	r4, [r9, #4]
   17718:	cmp	r1, r3
   1771c:	bls	17764 <argp_failure@@Base+0xb6c>
   17720:	add	r1, r3, #1
   17724:	mov	r2, #10
   17728:	str	r1, [r9, #28]
   1772c:	strb	r2, [r3]
   17730:	cmp	r7, #0
   17734:	mov	r4, #0
   17738:	beq	177dc <argp_failure@@Base+0xbe4>
   1773c:	ldr	r3, [r9, #28]
   17740:	ldr	r1, [r9, #24]
   17744:	ldr	r2, [r9, #16]
   17748:	sub	r3, r3, r1
   1774c:	cmp	r3, r2
   17750:	ldr	r7, [sl, #28]
   17754:	bls	17624 <argp_failure@@Base+0xa2c>
   17758:	mov	r0, r9
   1775c:	bl	18e50 <argp_error@@Base+0xe00>
   17760:	b	17624 <argp_failure@@Base+0xa2c>
   17764:	mov	r1, r6
   17768:	mov	r0, r9
   1776c:	bl	194e0 <argp_error@@Base+0x1490>
   17770:	cmp	r0, #0
   17774:	beq	17730 <argp_failure@@Base+0xb38>
   17778:	ldr	r3, [r9, #28]
   1777c:	b	17720 <argp_failure@@Base+0xb28>
   17780:	mov	r0, r9
   17784:	bl	18e50 <argp_error@@Base+0xe00>
   17788:	ldr	r3, [r9, #28]
   1778c:	ldr	r1, [r9, #24]
   17790:	ldr	r0, [r9, #16]
   17794:	sub	r1, r3, r1
   17798:	cmp	r1, r0
   1779c:	str	r5, [r9, #12]
   177a0:	bls	17710 <argp_failure@@Base+0xb18>
   177a4:	mov	r0, r9
   177a8:	bl	18e50 <argp_error@@Base+0xe00>
   177ac:	ldr	r3, [r9, #28]
   177b0:	b	17710 <argp_failure@@Base+0xb18>
   177b4:	mov	r1, r9
   177b8:	mov	r0, r8
   177bc:	bl	16a40 <_obstack_memory_used@@Base+0x270c>
   177c0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   177c4:	orr	r3, r3, #2
   177c8:	str	r3, [fp, #-96]	; 0xffffffa0
   177cc:	b	176d8 <argp_failure@@Base+0xae0>
   177d0:	mov	r0, r9
   177d4:	bl	18e50 <argp_error@@Base+0xe00>
   177d8:	b	1766c <argp_failure@@Base+0xa74>
   177dc:	mov	r4, #1
   177e0:	b	16e78 <argp_failure@@Base+0x280>
   177e4:	mov	r1, #0
   177e8:	ldr	r0, [fp, #-112]	; 0xffffff90
   177ec:	bl	16270 <_obstack_memory_used@@Base+0x1f3c>
   177f0:	ldr	r2, [pc, #1616]	; 17e48 <argp_failure@@Base+0x1250>
   177f4:	ldr	r4, [r0, #4]
   177f8:	ldr	r5, [r0]
   177fc:	mov	r1, r4
   17800:	mov	r6, r0
   17804:	str	r0, [fp, #-136]	; 0xffffff78
   17808:	mov	r0, r5
   1780c:	bl	16960 <_obstack_memory_used@@Base+0x262c>
   17810:	ldr	r2, [pc, #1588]	; 17e4c <argp_failure@@Base+0x1254>
   17814:	cmp	r0, #0
   17818:	mvnne	r3, #0
   1781c:	strne	r3, [r0, #12]
   17820:	movne	r3, r6
   17824:	mov	r0, r5
   17828:	ldrne	r4, [r3, #4]
   1782c:	mov	r1, r4
   17830:	bl	16960 <_obstack_memory_used@@Base+0x262c>
   17834:	cmp	r0, #0
   17838:	mvnne	r3, #0
   1783c:	strne	r3, [r0, #12]
   17840:	ldrne	r3, [fp, #-136]	; 0xffffff78
   17844:	ldrne	r4, [r3, #4]
   17848:	cmp	r4, #0
   1784c:	beq	16e6c <argp_failure@@Base+0x274>
   17850:	mov	r3, r5
   17854:	mov	r1, #0
   17858:	str	r1, [r3, #24]
   1785c:	add	r1, r1, #1
   17860:	cmp	r1, r4
   17864:	add	r3, r3, #28
   17868:	bne	17858 <argp_failure@@Base+0xc60>
   1786c:	mov	r0, r5
   17870:	ldr	r3, [pc, #1496]	; 17e50 <argp_failure@@Base+0x1258>
   17874:	mov	r2, #28
   17878:	bl	11334 <qsort@plt>
   1787c:	b	16e6c <argp_failure@@Base+0x274>
   17880:	mov	r2, #10
   17884:	mov	r1, #0
   17888:	mov	r0, r4
   1788c:	bl	11100 <strtol@plt>
   17890:	ldrb	r3, [r4]
   17894:	ldr	r2, [r5]
   17898:	lsl	r3, r3, #1
   1789c:	ldrh	r3, [r2, r3]
   178a0:	tst	r3, #2048	; 0x800
   178a4:	str	r0, [fp, #-116]	; 0xffffff8c
   178a8:	beq	178d0 <argp_failure@@Base+0xcd8>
   178ac:	ldrb	r3, [r4, #1]!
   178b0:	lsl	r3, r3, #1
   178b4:	ldrh	r3, [r2, r3]
   178b8:	tst	r3, #2048	; 0x800
   178bc:	bne	178ac <argp_failure@@Base+0xcb4>
   178c0:	b	178d0 <argp_failure@@Base+0xcd8>
   178c4:	ldrb	r3, [r4, #1]!
   178c8:	lsl	r3, r3, #1
   178cc:	ldrh	r3, [r2, r3]
   178d0:	tst	r3, #8192	; 0x2000
   178d4:	bne	178c4 <argp_failure@@Base+0xccc>
   178d8:	ldr	r9, [fp, #-108]	; 0xffffff94
   178dc:	b	1749c <argp_failure@@Base+0x8a4>
   178e0:	ldrb	r3, [r4, #1]
   178e4:	add	r4, r4, #1
   178e8:	lsl	r3, r3, #1
   178ec:	ldrh	r3, [r1, r3]
   178f0:	tst	r3, #8192	; 0x2000
   178f4:	beq	17488 <argp_failure@@Base+0x890>
   178f8:	ldrb	r3, [r4, #1]!
   178fc:	lsl	r3, r3, #1
   17900:	ldrh	r3, [r1, r3]
   17904:	tst	r3, #8192	; 0x2000
   17908:	bne	178f8 <argp_failure@@Base+0xd00>
   1790c:	b	17488 <argp_failure@@Base+0x890>
   17910:	ldrb	r3, [r6, #1]
   17914:	cmp	r3, #111	; 0x6f
   17918:	bne	1758c <argp_failure@@Base+0x994>
   1791c:	ldrb	r3, [r6, #2]
   17920:	cmp	r3, #45	; 0x2d
   17924:	bne	1758c <argp_failure@@Base+0x994>
   17928:	ldr	r3, [fp, #-108]	; 0xffffff94
   1792c:	add	r6, r6, #3
   17930:	sub	r7, r7, #3
   17934:	str	r3, [fp, #-116]	; 0xffffff8c
   17938:	mov	r9, #1
   1793c:	b	1749c <argp_failure@@Base+0x8a4>
   17940:	mov	r3, #1
   17944:	str	r3, [fp, #-128]	; 0xffffff80
   17948:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1794c:	cmp	lr, r5
   17950:	ldr	r5, [r3, #8]
   17954:	bls	17050 <argp_failure@@Base+0x458>
   17958:	mov	r0, r9
   1795c:	bl	18e50 <argp_error@@Base+0xe00>
   17960:	ldr	r7, [r6, #12]
   17964:	and	r2, r7, #8
   17968:	mov	r4, r2
   1796c:	b	17050 <argp_failure@@Base+0x458>
   17970:	cmp	r3, r2
   17974:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17978:	ldr	r4, [r3, #12]
   1797c:	bhi	17c2c <argp_failure@@Base+0x1034>
   17980:	str	r4, [r9, #12]
   17984:	ldr	r5, [r8, #4]
   17988:	cmp	r5, #0
   1798c:	beq	171bc <argp_failure@@Base+0x5c4>
   17990:	add	r4, r6, #24
   17994:	ldr	r7, [fp, #-100]	; 0xffffff9c
   17998:	b	179a8 <argp_failure@@Base+0xdb0>
   1799c:	subs	r5, r5, #1
   179a0:	add	r4, r4, #24
   179a4:	beq	171bc <argp_failure@@Base+0x5c4>
   179a8:	ldr	r3, [r4, #-24]	; 0xffffffe8
   179ac:	cmp	r3, #0
   179b0:	beq	1799c <argp_failure@@Base+0xda4>
   179b4:	ldr	r3, [r4, #-12]
   179b8:	tst	r3, #2
   179bc:	bne	1799c <argp_failure@@Base+0xda4>
   179c0:	sub	r1, fp, #76	; 0x4c
   179c4:	ldr	r0, [r7, #12]
   179c8:	bl	15338 <_obstack_memory_used@@Base+0x1004>
   179cc:	ldr	r2, [r4, #-24]	; 0xffffffe8
   179d0:	ldr	r1, [pc, #1148]	; 17e54 <argp_failure@@Base+0x125c>
   179d4:	mov	r0, r9
   179d8:	bl	19500 <argp_error@@Base+0x14b0>
   179dc:	ldr	r3, [r6, #8]
   179e0:	ldr	r1, [pc, #1136]	; 17e58 <argp_failure@@Base+0x1260>
   179e4:	subs	r2, r3, #0
   179e8:	mov	r0, r9
   179ec:	beq	1799c <argp_failure@@Base+0xda4>
   179f0:	ldr	ip, [r6, #12]
   179f4:	tst	ip, #1
   179f8:	ldrne	r1, [pc, #1116]	; 17e5c <argp_failure@@Base+0x1264>
   179fc:	bl	19500 <argp_error@@Base+0x14b0>
   17a00:	b	1799c <argp_failure@@Base+0xda4>
   17a04:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17a08:	sub	r1, fp, #76	; 0x4c
   17a0c:	ldr	r0, [r3, #8]
   17a10:	bl	15338 <_obstack_memory_used@@Base+0x1004>
   17a14:	ldr	r3, [r9, #28]
   17a18:	ldr	r2, [r9, #32]
   17a1c:	cmp	r3, r2
   17a20:	bcs	17c60 <argp_failure@@Base+0x1068>
   17a24:	add	r2, r3, #1
   17a28:	str	r2, [r9, #28]
   17a2c:	mov	r2, #45	; 0x2d
   17a30:	strb	r2, [r3]
   17a34:	ldr	r3, [r9, #28]
   17a38:	ldr	r2, [r9, #32]
   17a3c:	ldrb	r7, [sl]
   17a40:	cmp	r3, r2
   17a44:	bcs	17c44 <argp_failure@@Base+0x104c>
   17a48:	add	r2, r3, #1
   17a4c:	str	r2, [r9, #28]
   17a50:	strb	r7, [r3]
   17a54:	ldr	r3, [fp, #-128]	; 0xffffff80
   17a58:	cmp	r3, #0
   17a5c:	beq	17bf8 <argp_failure@@Base+0x1000>
   17a60:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17a64:	ldr	r3, [r3]
   17a68:	cmp	r3, #0
   17a6c:	bne	17bf8 <argp_failure@@Base+0x1000>
   17a70:	ldr	r3, [r6, #8]
   17a74:	cmp	r3, #0
   17a78:	movne	r3, #1
   17a7c:	strne	r3, [fp, #-80]	; 0xffffffb0
   17a80:	b	170c4 <argp_failure@@Base+0x4cc>
   17a84:	mov	r0, r9
   17a88:	bl	18e50 <argp_error@@Base+0xe00>
   17a8c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17a90:	ldr	r3, [r9, #28]
   17a94:	ldr	r1, [r9, #24]
   17a98:	str	r2, [r9, #4]
   17a9c:	ldr	r2, [r9, #16]
   17aa0:	sub	r3, r3, r1
   17aa4:	cmp	r3, r2
   17aa8:	bls	17248 <argp_failure@@Base+0x650>
   17aac:	mov	r0, r9
   17ab0:	bl	18e50 <argp_error@@Base+0xe00>
   17ab4:	b	17248 <argp_failure@@Base+0x650>
   17ab8:	mov	r0, r9
   17abc:	bl	18e50 <argp_error@@Base+0xe00>
   17ac0:	ldr	lr, [r9, #28]
   17ac4:	ldr	r2, [r9, #24]
   17ac8:	ldr	r5, [r9, #16]
   17acc:	sub	lr, lr, r2
   17ad0:	b	16fbc <argp_failure@@Base+0x3c4>
   17ad4:	ldr	r4, [r6, #16]
   17ad8:	ldr	r1, [r6, #4]
   17adc:	mov	r0, r4
   17ae0:	ldr	r3, [fp, #-104]	; 0xffffff98
   17ae4:	ldr	r2, [r8, #20]
   17ae8:	bl	150e8 <_obstack_memory_used@@Base+0xdb4>
   17aec:	subs	r5, r0, #0
   17af0:	beq	17ba8 <argp_failure@@Base+0xfb0>
   17af4:	ldrb	r3, [r5]
   17af8:	cmp	r3, #0
   17afc:	beq	17b98 <argp_failure@@Base+0xfa0>
   17b00:	ldr	r3, [r9, #28]
   17b04:	ldr	r1, [r9, #24]
   17b08:	ldr	r2, [r9, #16]
   17b0c:	sub	r3, r3, r1
   17b10:	cmp	r3, r2
   17b14:	bhi	17d98 <argp_failure@@Base+0x11a0>
   17b18:	ldr	r7, [r9, #20]
   17b1c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   17b20:	bic	r7, r7, r7, asr #31
   17b24:	ldr	r6, [r3, #20]
   17b28:	mov	r3, r6
   17b2c:	str	r6, [r9, #4]
   17b30:	add	r2, r6, #3
   17b34:	cmp	r2, r7
   17b38:	str	r3, [r9, #12]
   17b3c:	bcs	17ce8 <argp_failure@@Base+0x10f0>
   17b40:	ldr	r3, [r9, #28]
   17b44:	ldr	r2, [r9, #32]
   17b48:	cmp	r3, r2
   17b4c:	bcs	17ee8 <argp_failure@@Base+0x12f0>
   17b50:	add	r1, r3, #1
   17b54:	mov	r2, #10
   17b58:	str	r1, [r9, #28]
   17b5c:	strb	r2, [r3]
   17b60:	mov	r0, r5
   17b64:	bl	11268 <strlen@plt>
   17b68:	subs	r6, r0, #0
   17b6c:	beq	17b98 <argp_failure@@Base+0xfa0>
   17b70:	ldr	r0, [r9, #28]
   17b74:	ldr	r2, [r9, #32]
   17b78:	add	r3, r0, r6
   17b7c:	cmp	r2, r3
   17b80:	bcs	17d7c <argp_failure@@Base+0x1184>
   17b84:	mov	r1, r6
   17b88:	mov	r0, r9
   17b8c:	bl	194e0 <argp_error@@Base+0x1490>
   17b90:	cmp	r0, #0
   17b94:	bne	17d78 <argp_failure@@Base+0x1180>
   17b98:	cmp	r4, r5
   17b9c:	beq	17ba8 <argp_failure@@Base+0xfb0>
   17ba0:	mov	r0, r5
   17ba4:	bl	13f14 <argp_parse@@Base+0xe98>
   17ba8:	ldr	r3, [r9, #28]
   17bac:	ldr	r2, [r9, #24]
   17bb0:	ldr	r1, [r9, #16]
   17bb4:	sub	r2, r3, r2
   17bb8:	cmp	r2, r1
   17bbc:	bhi	17cc8 <argp_failure@@Base+0x10d0>
   17bc0:	ldr	r1, [r9, #32]
   17bc4:	mov	r2, #0
   17bc8:	cmp	r1, r3
   17bcc:	str	r2, [r9, #4]
   17bd0:	bls	17cac <argp_failure@@Base+0x10b4>
   17bd4:	add	r1, r3, #1
   17bd8:	mov	r2, #10
   17bdc:	str	r1, [r9, #28]
   17be0:	strb	r2, [r3]
   17be4:	str	r8, [fp, #-88]	; 0xffffffa8
   17be8:	b	17228 <argp_failure@@Base+0x630>
   17bec:	mov	r0, r9
   17bf0:	bl	18e50 <argp_error@@Base+0xe00>
   17bf4:	b	171d4 <argp_failure@@Base+0x5dc>
   17bf8:	ldr	r2, [r6, #8]
   17bfc:	cmp	r2, #0
   17c00:	beq	170c4 <argp_failure@@Base+0x4cc>
   17c04:	ldr	r3, [r6, #12]
   17c08:	mov	r0, r9
   17c0c:	tst	r3, #1
   17c10:	ldrne	r1, [pc, #584]	; 17e60 <argp_failure@@Base+0x1268>
   17c14:	ldreq	r1, [pc, #584]	; 17e64 <argp_failure@@Base+0x126c>
   17c18:	bl	19500 <argp_error@@Base+0x14b0>
   17c1c:	b	170c4 <argp_failure@@Base+0x4cc>
   17c20:	ldrb	r9, [r4, #1]
   17c24:	add	r4, r4, #1
   17c28:	b	17514 <argp_failure@@Base+0x91c>
   17c2c:	mov	r0, r9
   17c30:	bl	18e50 <argp_error@@Base+0xe00>
   17c34:	b	17980 <argp_failure@@Base+0xd88>
   17c38:	mov	r0, r9
   17c3c:	bl	18e50 <argp_error@@Base+0xe00>
   17c40:	b	17108 <argp_failure@@Base+0x510>
   17c44:	mov	r1, #1
   17c48:	mov	r0, r9
   17c4c:	bl	194e0 <argp_error@@Base+0x1490>
   17c50:	cmp	r0, #0
   17c54:	beq	17a54 <argp_failure@@Base+0xe5c>
   17c58:	ldr	r3, [r9, #28]
   17c5c:	b	17a48 <argp_failure@@Base+0xe50>
   17c60:	mov	r1, #1
   17c64:	mov	r0, r9
   17c68:	bl	194e0 <argp_error@@Base+0x1490>
   17c6c:	cmp	r0, #0
   17c70:	beq	17a34 <argp_failure@@Base+0xe3c>
   17c74:	ldr	r3, [r9, #28]
   17c78:	b	17a24 <argp_failure@@Base+0xe2c>
   17c7c:	ldr	lr, [fp, #-100]	; 0xffffff9c
   17c80:	ldr	sl, [pc, #388]	; 17e0c <argp_failure@@Base+0x1214>
   17c84:	mov	r4, #1
   17c88:	ldm	lr!, {r0, r1, r2, r3}
   17c8c:	mov	ip, sl
   17c90:	stmia	ip!, {r0, r1, r2, r3}
   17c94:	ldm	lr!, {r0, r1, r2, r3}
   17c98:	stmia	ip!, {r0, r1, r2, r3}
   17c9c:	ldm	lr, {r0, r1}
   17ca0:	stm	ip, {r0, r1}
   17ca4:	str	r4, [sl, #36]	; 0x24
   17ca8:	b	16e40 <argp_failure@@Base+0x248>
   17cac:	mov	r1, #1
   17cb0:	mov	r0, r9
   17cb4:	bl	194e0 <argp_error@@Base+0x1490>
   17cb8:	cmp	r0, #0
   17cbc:	beq	17be4 <argp_failure@@Base+0xfec>
   17cc0:	ldr	r3, [r9, #28]
   17cc4:	b	17bd4 <argp_failure@@Base+0xfdc>
   17cc8:	mov	r0, r9
   17ccc:	bl	18e50 <argp_error@@Base+0xe00>
   17cd0:	ldr	r3, [r9, #28]
   17cd4:	b	17bc0 <argp_failure@@Base+0xfc8>
   17cd8:	mov	r7, r3
   17cdc:	mov	r4, r6
   17ce0:	mov	r3, r9
   17ce4:	b	17468 <argp_failure@@Base+0x870>
   17ce8:	cmp	r6, r7
   17cec:	bhi	17ed8 <argp_failure@@Base+0x12e0>
   17cf0:	ldr	r3, [r9, #28]
   17cf4:	ldr	r1, [r9, #32]
   17cf8:	add	r2, r3, #3
   17cfc:	cmp	r1, r2
   17d00:	bcs	17d1c <argp_failure@@Base+0x1124>
   17d04:	mov	r1, #3
   17d08:	mov	r0, r9
   17d0c:	bl	194e0 <argp_error@@Base+0x1490>
   17d10:	cmp	r0, #0
   17d14:	beq	17b60 <argp_failure@@Base+0xf68>
   17d18:	ldr	r3, [r9, #28]
   17d1c:	ldr	r2, [pc, #324]	; 17e68 <argp_failure@@Base+0x1270>
   17d20:	ldrh	r1, [r2]
   17d24:	ldrb	r2, [r2, #2]
   17d28:	strh	r1, [r3]
   17d2c:	strb	r2, [r3, #2]
   17d30:	ldr	r3, [r9, #28]
   17d34:	add	r3, r3, #3
   17d38:	str	r3, [r9, #28]
   17d3c:	b	17b60 <argp_failure@@Base+0xf68>
   17d40:	mov	r2, #0
   17d44:	str	r6, [sp, #4]
   17d48:	str	r7, [sp]
   17d4c:	ldr	r3, [pc, #280]	; 17e6c <argp_failure@@Base+0x1274>
   17d50:	mov	r1, r2
   17d54:	ldr	r0, [fp, #-104]	; 0xffffff98
   17d58:	bl	16bf8 <argp_failure@@Base>
   17d5c:	b	17508 <argp_failure@@Base+0x910>
   17d60:	ldr	r3, [fp, #-136]	; 0xffffff78
   17d64:	ldr	r8, [r3]
   17d68:	str	r4, [fp, #-88]	; 0xffffffa8
   17d6c:	str	r4, [fp, #-84]	; 0xffffffac
   17d70:	str	r4, [fp, #-80]	; 0xffffffb0
   17d74:	b	16f98 <argp_failure@@Base+0x3a0>
   17d78:	ldr	r0, [r9, #28]
   17d7c:	mov	r2, r6
   17d80:	mov	r1, r5
   17d84:	bl	1116c <memcpy@plt>
   17d88:	ldr	r3, [r9, #28]
   17d8c:	add	r6, r3, r6
   17d90:	str	r6, [r9, #28]
   17d94:	b	17b98 <argp_failure@@Base+0xfa0>
   17d98:	mov	r0, r9
   17d9c:	bl	18e50 <argp_error@@Base+0xe00>
   17da0:	ldr	r3, [r9, #28]
   17da4:	ldr	r1, [r9, #24]
   17da8:	ldr	r2, [r9, #16]
   17dac:	ldr	r7, [r9, #20]
   17db0:	ldr	sl, [fp, #-100]	; 0xffffff9c
   17db4:	sub	r3, r3, r1
   17db8:	cmp	r3, r2
   17dbc:	ldr	r6, [sl, #20]
   17dc0:	bic	r7, r7, r7, asr #31
   17dc4:	bls	17b28 <argp_failure@@Base+0xf30>
   17dc8:	mov	r0, r9
   17dcc:	bl	18e50 <argp_error@@Base+0xe00>
   17dd0:	ldr	r3, [r9, #28]
   17dd4:	ldr	r1, [r9, #24]
   17dd8:	ldr	r2, [r9, #16]
   17ddc:	sub	r3, r3, r1
   17de0:	cmp	r3, r2
   17de4:	ldr	r3, [sl, #20]
   17de8:	str	r6, [r9, #4]
   17dec:	movls	r6, r3
   17df0:	bls	17b30 <argp_failure@@Base+0xf38>
   17df4:	mov	r0, r9
   17df8:	str	r3, [fp, #-124]	; 0xffffff84
   17dfc:	bl	18e50 <argp_error@@Base+0xe00>
   17e00:	ldr	r6, [sl, #20]
   17e04:	ldr	r3, [fp, #-124]	; 0xffffff84
   17e08:	b	17b30 <argp_failure@@Base+0xf38>
   17e0c:	andeq	r0, r3, r4, ror r8
   17e10:	andeq	r0, r3, ip, lsr r9
   17e14:			; <UNDEFINED> instruction: 0x0001c1bc
   17e18:	andeq	r0, r0, #5
   17e1c:	andeq	ip, r1, r8, asr #2
   17e20:	andeq	ip, r1, r4
   17e24:	ldrdeq	fp, [r1], -r4
   17e28:	andeq	fp, r1, r4, asr #28
   17e2c:	andeq	ip, r1, r0, asr #1
   17e30:	andeq	ip, r1, ip, lsl #1
   17e34:	strdeq	ip, [r1], -r0
   17e38:	andeq	ip, r1, r8, asr #1
   17e3c:	ldrdeq	ip, [r1], -r8
   17e40:	ldrdeq	ip, [r1], -r0
   17e44:	andeq	ip, r1, r0, ror #1
   17e48:	andeq	fp, r1, r8, asr #19
   17e4c:	andeq	fp, r1, r8, lsr #19
   17e50:	andeq	r5, r1, r0, lsr #22
   17e54:	andeq	ip, r1, r0, lsr r1
   17e58:	andeq	ip, r1, r0, asr #2
   17e5c:	andeq	ip, r1, r8, lsr r1
   17e60:	andeq	ip, r1, r8, lsr #2
   17e64:	andeq	fp, r1, r8, ror r9
   17e68:	andeq	ip, r1, r4, asr #2
   17e6c:	andeq	ip, r1, r4, asr #32
   17e70:	andeq	ip, r1, ip, rrx
   17e74:	andeq	ip, r1, r4, lsl r0
   17e78:	str	r6, [sp]
   17e7c:	ldr	r3, [pc, #-20]	; 17e70 <argp_failure@@Base+0x1278>
   17e80:	mov	r1, r2
   17e84:	ldr	r0, [fp, #-104]	; 0xffffff98
   17e88:	bl	16bf8 <argp_failure@@Base>
   17e8c:	b	17524 <argp_failure@@Base+0x92c>
   17e90:	mov	r0, r4
   17e94:	bl	13f14 <argp_parse@@Base+0xe98>
   17e98:	b	17350 <argp_failure@@Base+0x758>
   17e9c:	ldr	r0, [r6, #16]
   17ea0:	sub	r2, fp, #76	; 0x4c
   17ea4:	ldr	r1, [r8, #20]
   17ea8:	bl	1512c <_obstack_memory_used@@Base+0xdf8>
   17eac:	b	17be4 <argp_failure@@Base+0xfec>
   17eb0:	mov	r1, #1
   17eb4:	mov	r0, r9
   17eb8:	bl	194e0 <argp_error@@Base+0x1490>
   17ebc:	cmp	r0, #0
   17ec0:	beq	16f18 <argp_failure@@Base+0x320>
   17ec4:	ldr	r3, [r9, #28]
   17ec8:	b	16f08 <argp_failure@@Base+0x310>
   17ecc:	ldr	r0, [fp, #-132]	; 0xffffff7c
   17ed0:	bl	111b4 <funlockfile@plt>
   17ed4:	b	16ed8 <argp_failure@@Base+0x2e0>
   17ed8:	mov	r1, r6
   17edc:	mov	r0, r9
   17ee0:	bl	15054 <_obstack_memory_used@@Base+0xd20>
   17ee4:	b	17b60 <argp_failure@@Base+0xf68>
   17ee8:	mov	r1, #1
   17eec:	mov	r0, r9
   17ef0:	bl	194e0 <argp_error@@Base+0x1490>
   17ef4:	cmp	r0, #0
   17ef8:	beq	17b60 <argp_failure@@Base+0xf68>
   17efc:	ldr	r3, [r9, #28]
   17f00:	b	17b50 <argp_failure@@Base+0xf58>
   17f04:	mov	r1, #1
   17f08:	mov	r0, r9
   17f0c:	bl	194e0 <argp_error@@Base+0x1490>
   17f10:	cmp	r0, #0
   17f14:	beq	16f68 <argp_failure@@Base+0x370>
   17f18:	ldr	r3, [r9, #28]
   17f1c:	b	16f58 <argp_failure@@Base+0x360>
   17f20:	str	r6, [sp, #4]
   17f24:	str	r7, [sp]
   17f28:	ldr	r3, [pc, #-188]	; 17e74 <argp_failure@@Base+0x127c>
   17f2c:	mov	r2, #0
   17f30:	ldr	r0, [fp, #-104]	; 0xffffff98
   17f34:	bl	16bf8 <argp_failure@@Base>
   17f38:	b	17500 <argp_failure@@Base+0x908>
   17f3c:	ldr	r3, [r9, #28]
   17f40:	b	17328 <argp_failure@@Base+0x730>
   17f44:	mov	r1, #1
   17f48:	mov	r0, r9
   17f4c:	bl	194e0 <argp_error@@Base+0x1490>
   17f50:	cmp	r0, #0
   17f54:	beq	17344 <argp_failure@@Base+0x74c>
   17f58:	ldr	r3, [r9, #28]
   17f5c:	b	17334 <argp_failure@@Base+0x73c>
   17f60:	mov	r1, #1
   17f64:	mov	r0, r9
   17f68:	bl	194e0 <argp_error@@Base+0x1490>
   17f6c:	cmp	r0, #0
   17f70:	beq	172d4 <argp_failure@@Base+0x6dc>
   17f74:	ldr	r3, [r9, #28]
   17f78:	b	172c4 <argp_failure@@Base+0x6cc>

00017f7c <argp_help@@Base>:
   17f7c:	push	{lr}		; (str lr, [sp, #-4]!)
   17f80:	sub	sp, sp, #12
   17f84:	str	r3, [sp]
   17f88:	mov	r3, r2
   17f8c:	mov	r2, r1
   17f90:	mov	r1, #0
   17f94:	bl	16e00 <argp_failure@@Base+0x208>
   17f98:	add	sp, sp, #12
   17f9c:	pop	{pc}		; (ldr pc, [sp], #4)

00017fa0 <argp_state_help@@Base>:
   17fa0:	push	{r4, r5, lr}
   17fa4:	subs	r4, r0, #0
   17fa8:	sub	sp, sp, #12
   17fac:	mov	r5, r2
   17fb0:	beq	18010 <argp_state_help@@Base+0x70>
   17fb4:	ldr	r3, [r4, #16]
   17fb8:	tst	r3, #2
   17fbc:	bne	18008 <argp_state_help@@Base+0x68>
   17fc0:	cmp	r1, #0
   17fc4:	beq	18008 <argp_state_help@@Base+0x68>
   17fc8:	tst	r3, #64	; 0x40
   17fcc:	ldr	r3, [r4, #40]	; 0x28
   17fd0:	orrne	r5, r5, #128	; 0x80
   17fd4:	ldr	r0, [r4]
   17fd8:	mov	r2, r1
   17fdc:	str	r3, [sp]
   17fe0:	mov	r1, r4
   17fe4:	mov	r3, r5
   17fe8:	bl	16e00 <argp_failure@@Base+0x208>
   17fec:	ldr	r3, [r4, #16]
   17ff0:	tst	r3, #32
   17ff4:	bne	18008 <argp_state_help@@Base+0x68>
   17ff8:	ands	r0, r5, #256	; 0x100
   17ffc:	bne	1803c <argp_state_help@@Base+0x9c>
   18000:	tst	r5, #512	; 0x200
   18004:	bne	18038 <argp_state_help@@Base+0x98>
   18008:	add	sp, sp, #12
   1800c:	pop	{r4, r5, pc}
   18010:	cmp	r1, #0
   18014:	beq	18008 <argp_state_help@@Base+0x68>
   18018:	ldr	r3, [pc, #40]	; 18048 <argp_state_help@@Base+0xa8>
   1801c:	mov	r2, r1
   18020:	mov	r1, r4
   18024:	ldr	ip, [r3]
   18028:	mov	r3, r5
   1802c:	str	ip, [sp]
   18030:	bl	16e00 <argp_failure@@Base+0x208>
   18034:	b	17ff8 <argp_state_help@@Base+0x58>
   18038:	bl	1125c <exit@plt>
   1803c:	ldr	r3, [pc, #8]	; 1804c <argp_state_help@@Base+0xac>
   18040:	ldr	r0, [r3]
   18044:	bl	1125c <exit@plt>
   18048:			; <UNDEFINED> instruction: 0x000308b0
   1804c:	andeq	r0, r3, ip, lsr #17

00018050 <argp_error@@Base>:
   18050:	push	{r1, r2, r3}
   18054:	push	{r4, r5, lr}
   18058:	subs	r5, r0, #0
   1805c:	sub	sp, sp, #8
   18060:	beq	18130 <argp_error@@Base+0xe0>
   18064:	ldr	r3, [r5, #16]
   18068:	tst	r3, #2
   1806c:	bne	18120 <argp_error@@Base+0xd0>
   18070:	ldr	r4, [r5, #44]	; 0x2c
   18074:	cmp	r4, #0
   18078:	beq	18120 <argp_error@@Base+0xd0>
   1807c:	mov	r0, r4
   18080:	bl	1131c <flockfile@plt>
   18084:	ldr	r0, [r5, #40]	; 0x28
   18088:	add	r3, sp, #24
   1808c:	str	r3, [sp, #4]
   18090:	mov	r1, r4
   18094:	bl	110d0 <fputs_unlocked@plt>
   18098:	ldr	r3, [r4, #20]
   1809c:	ldr	r2, [r4, #24]
   180a0:	cmp	r3, r2
   180a4:	addcc	r1, r3, #1
   180a8:	movcc	r2, #58	; 0x3a
   180ac:	strcc	r1, [r4, #20]
   180b0:	strbcc	r2, [r3]
   180b4:	bcs	1817c <argp_error@@Base+0x12c>
   180b8:	ldr	r3, [r4, #20]
   180bc:	ldr	r2, [r4, #24]
   180c0:	cmp	r3, r2
   180c4:	addcc	r1, r3, #1
   180c8:	movcc	r2, #32
   180cc:	strcc	r1, [r4, #20]
   180d0:	strbcc	r2, [r3]
   180d4:	bcs	1816c <argp_error@@Base+0x11c>
   180d8:	ldr	r1, [sp, #20]
   180dc:	ldr	r2, [sp, #4]
   180e0:	mov	r0, r4
   180e4:	bl	112ec <vfprintf@plt>
   180e8:	ldr	r3, [r4, #20]
   180ec:	ldr	r2, [r4, #24]
   180f0:	cmp	r3, r2
   180f4:	addcc	r1, r3, #1
   180f8:	movcc	r2, #10
   180fc:	strcc	r1, [r4, #20]
   18100:	strbcc	r2, [r3]
   18104:	bcs	1815c <argp_error@@Base+0x10c>
   18108:	mov	r0, r5
   1810c:	mov	r2, #260	; 0x104
   18110:	mov	r1, r4
   18114:	bl	17fa0 <argp_state_help@@Base>
   18118:	mov	r0, r4
   1811c:	bl	111b4 <funlockfile@plt>
   18120:	add	sp, sp, #8
   18124:	pop	{r4, r5, lr}
   18128:	add	sp, sp, #12
   1812c:	bx	lr
   18130:	ldr	r3, [pc, #84]	; 1818c <argp_error@@Base+0x13c>
   18134:	ldr	r4, [r3]
   18138:	cmp	r4, #0
   1813c:	beq	18120 <argp_error@@Base+0xd0>
   18140:	mov	r0, r4
   18144:	bl	1131c <flockfile@plt>
   18148:	ldr	r2, [pc, #64]	; 18190 <argp_error@@Base+0x140>
   1814c:	add	r3, sp, #24
   18150:	str	r3, [sp, #4]
   18154:	ldr	r0, [r2]
   18158:	b	18090 <argp_error@@Base+0x40>
   1815c:	mov	r1, #10
   18160:	mov	r0, r4
   18164:	bl	112d4 <__overflow@plt>
   18168:	b	18108 <argp_error@@Base+0xb8>
   1816c:	mov	r1, #32
   18170:	mov	r0, r4
   18174:	bl	112d4 <__overflow@plt>
   18178:	b	180d8 <argp_error@@Base+0x88>
   1817c:	mov	r1, #58	; 0x3a
   18180:	mov	r0, r4
   18184:	bl	112d4 <__overflow@plt>
   18188:	b	180b8 <argp_error@@Base+0x68>
   1818c:			; <UNDEFINED> instruction: 0x000308b8
   18190:			; <UNDEFINED> instruction: 0x000308b0
   18194:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18198:	ldr	r4, [r1, #32]
   1819c:	ldr	r8, [r1, #28]
   181a0:	ldr	r7, [r1]
   181a4:	add	r6, r0, r4, lsl #2
   181a8:	mov	r2, r8
   181ac:	mov	r5, r7
   181b0:	cmp	r5, r4
   181b4:	movle	r3, #0
   181b8:	movgt	r3, #1
   181bc:	cmp	r2, r4
   181c0:	movge	r3, #0
   181c4:	cmp	r3, #0
   181c8:	beq	1823c <argp_error@@Base+0x1ec>
   181cc:	sub	r3, r5, r4
   181d0:	sub	sl, r4, r2
   181d4:	cmp	r3, sl
   181d8:	ble	1820c <argp_error@@Base+0x1bc>
   181dc:	sub	r5, r5, sl
   181e0:	add	sl, sl, r2
   181e4:	add	ip, r0, r5, lsl #2
   181e8:	add	sl, r0, sl, lsl #2
   181ec:	add	r3, r0, r2, lsl #2
   181f0:	ldr	r9, [ip]
   181f4:	ldr	lr, [r3]
   181f8:	str	r9, [r3], #4
   181fc:	cmp	sl, r3
   18200:	str	lr, [ip], #4
   18204:	bne	181f0 <argp_error@@Base+0x1a0>
   18208:	b	181b0 <argp_error@@Base+0x160>
   1820c:	add	sl, r3, r2
   18210:	add	r3, r0, r2, lsl #2
   18214:	add	r9, r0, sl, lsl #2
   18218:	mov	r2, r6
   1821c:	ldr	lr, [r2]
   18220:	ldr	ip, [r3]
   18224:	str	lr, [r3], #4
   18228:	cmp	r3, r9
   1822c:	str	ip, [r2], #4
   18230:	bne	1821c <argp_error@@Base+0x1cc>
   18234:	mov	r2, sl
   18238:	b	181b0 <argp_error@@Base+0x160>
   1823c:	sub	r4, r7, r4
   18240:	add	r8, r4, r8
   18244:	str	r8, [r1, #28]
   18248:	str	r7, [r1, #32]
   1824c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18254:	sub	sp, sp, #44	; 0x2c
   18258:	str	r1, [sp, #20]
   1825c:	ldr	r1, [sp, #88]	; 0x58
   18260:	str	r0, [sp, #24]
   18264:	str	r2, [sp, #28]
   18268:	ldr	r8, [r1, #20]
   1826c:	str	r3, [sp, #12]
   18270:	mov	r7, r8
   18274:	ldrb	r5, [r8]
   18278:	cmp	r5, #61	; 0x3d
   1827c:	cmpne	r5, #0
   18280:	movne	r5, #1
   18284:	moveq	r5, #0
   18288:	beq	182a0 <argp_error@@Base+0x250>
   1828c:	ldrb	r3, [r7, #1]!
   18290:	cmp	r3, #0
   18294:	cmpne	r3, #61	; 0x3d
   18298:	bne	1828c <argp_error@@Base+0x23c>
   1829c:	sub	r5, r7, r8
   182a0:	ldr	r3, [sp, #12]
   182a4:	ldr	sl, [r3]
   182a8:	cmp	sl, #0
   182ac:	beq	18560 <argp_error@@Base+0x510>
   182b0:	mov	fp, r3
   182b4:	mov	r4, sl
   182b8:	mov	r6, #0
   182bc:	mov	r2, r5
   182c0:	mov	r1, r8
   182c4:	mov	r0, r4
   182c8:	bl	11388 <strncmp@plt>
   182cc:	mov	r9, fp
   182d0:	cmp	r0, #0
   182d4:	mov	r0, r4
   182d8:	bne	182e8 <argp_error@@Base+0x298>
   182dc:	bl	11268 <strlen@plt>
   182e0:	cmp	r0, r5
   182e4:	beq	18374 <argp_error@@Base+0x324>
   182e8:	ldr	r4, [fp, #16]!
   182ec:	add	r6, r6, #1
   182f0:	cmp	r4, #0
   182f4:	bne	182bc <argp_error@@Base+0x26c>
   182f8:	ldr	r3, [sp, #12]
   182fc:	ldr	fp, [sp, #88]	; 0x58
   18300:	mov	r0, sl
   18304:	mov	r1, r8
   18308:	mov	r9, r4
   1830c:	mov	sl, r4
   18310:	mov	r8, r3
   18314:	mvn	r2, #0
   18318:	str	r4, [sp, #36]	; 0x24
   1831c:	str	r4, [sp, #16]
   18320:	str	r2, [sp, #32]
   18324:	mov	r2, r5
   18328:	bl	11388 <strncmp@plt>
   1832c:	cmp	r0, #0
   18330:	bne	18350 <argp_error@@Base+0x300>
   18334:	cmp	r9, #0
   18338:	beq	185d0 <argp_error@@Base+0x580>
   1833c:	ldr	r3, [sp, #84]	; 0x54
   18340:	cmp	r3, #0
   18344:	beq	18418 <argp_error@@Base+0x3c8>
   18348:	cmp	r4, #0
   1834c:	beq	1844c <argp_error@@Base+0x3fc>
   18350:	ldr	r0, [r8, #16]!
   18354:	add	sl, sl, #1
   18358:	cmp	r0, #0
   1835c:	beq	18480 <argp_error@@Base+0x430>
   18360:	ldr	r1, [fp, #20]
   18364:	b	18324 <argp_error@@Base+0x2d4>
   18368:	cmp	r9, #0
   1836c:	beq	18560 <argp_error@@Base+0x510>
   18370:	ldr	r6, [sp, #32]
   18374:	ldr	r3, [sp, #88]	; 0x58
   18378:	ldr	r0, [sp, #88]	; 0x58
   1837c:	mov	r1, #0
   18380:	ldr	r2, [r3]
   18384:	str	r1, [r0, #20]
   18388:	add	r3, r2, #1
   1838c:	str	r3, [r0]
   18390:	ldrb	r1, [r7]
   18394:	cmp	r1, #0
   18398:	bne	183d8 <argp_error@@Base+0x388>
   1839c:	ldr	r1, [r9, #4]
   183a0:	cmp	r1, #1
   183a4:	beq	185dc <argp_error@@Base+0x58c>
   183a8:	ldr	r3, [sp, #80]	; 0x50
   183ac:	ldr	r2, [r9, #8]
   183b0:	cmp	r3, #0
   183b4:	strne	r6, [r3]
   183b8:	cmp	r2, #0
   183bc:	movne	r3, #0
   183c0:	ldreq	r3, [r9, #12]
   183c4:	ldrne	r1, [r9, #12]
   183c8:	strne	r1, [r2]
   183cc:	mov	r0, r3
   183d0:	add	sp, sp, #44	; 0x2c
   183d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183d8:	ldr	r3, [r9, #4]
   183dc:	cmp	r3, #0
   183e0:	movne	r3, r0
   183e4:	addne	r7, r7, #1
   183e8:	strne	r7, [r3, #12]
   183ec:	bne	183a8 <argp_error@@Base+0x358>
   183f0:	ldr	r3, [sp, #92]	; 0x5c
   183f4:	cmp	r3, #0
   183f8:	bne	18528 <argp_error@@Base+0x4d8>
   183fc:	ldr	r1, [sp, #88]	; 0x58
   18400:	ldr	r2, [r9, #12]
   18404:	mov	r3, #63	; 0x3f
   18408:	str	r2, [r1, #8]
   1840c:	mov	r0, r3
   18410:	add	sp, sp, #44	; 0x2c
   18414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18418:	ldr	r2, [r9, #4]
   1841c:	ldr	r3, [r8, #4]
   18420:	cmp	r2, r3
   18424:	bne	18348 <argp_error@@Base+0x2f8>
   18428:	ldr	r2, [r9, #8]
   1842c:	ldr	r3, [r8, #8]
   18430:	cmp	r2, r3
   18434:	bne	18348 <argp_error@@Base+0x2f8>
   18438:	ldr	r2, [r9, #12]
   1843c:	ldr	r3, [r8, #12]
   18440:	cmp	r2, r3
   18444:	bne	18348 <argp_error@@Base+0x2f8>
   18448:	b	18350 <argp_error@@Base+0x300>
   1844c:	ldr	r3, [sp, #92]	; 0x5c
   18450:	cmp	r3, #0
   18454:	ldr	r3, [sp, #16]
   18458:	beq	18518 <argp_error@@Base+0x4c8>
   1845c:	cmp	r3, #0
   18460:	beq	18734 <argp_error@@Base+0x6e4>
   18464:	ldr	r3, [sp, #16]
   18468:	ldr	r0, [r8, #16]!
   1846c:	mov	r2, #1
   18470:	cmp	r0, #0
   18474:	strb	r2, [r3, sl]
   18478:	add	sl, sl, #1
   1847c:	bne	18360 <argp_error@@Base+0x310>
   18480:	ldr	r3, [sp, #16]
   18484:	cmp	r3, #0
   18488:	cmpeq	r4, #0
   1848c:	beq	18368 <argp_error@@Base+0x318>
   18490:	ldr	r3, [sp, #92]	; 0x5c
   18494:	cmp	r3, #0
   18498:	beq	18618 <argp_error@@Base+0x5c8>
   1849c:	cmp	r4, #0
   184a0:	bne	186a0 <argp_error@@Base+0x650>
   184a4:	ldr	r5, [pc, #716]	; 18778 <argp_error@@Base+0x728>
   184a8:	ldr	r8, [sp, #16]
   184ac:	ldr	r7, [pc, #712]	; 1877c <argp_error@@Base+0x72c>
   184b0:	ldr	r0, [r5]
   184b4:	bl	1131c <flockfile@plt>
   184b8:	ldr	r3, [sp, #20]
   184bc:	ldr	r0, [r5]
   184c0:	ldr	r1, [pc, #696]	; 18780 <argp_error@@Base+0x730>
   184c4:	ldr	r2, [r3]
   184c8:	ldr	r3, [sp, #88]	; 0x58
   184cc:	add	r6, r8, r6
   184d0:	ldr	r3, [r3, #20]
   184d4:	str	r3, [sp]
   184d8:	ldr	r3, [sp, #96]	; 0x60
   184dc:	bl	11280 <fprintf@plt>
   184e0:	ldr	r9, [sp, #12]
   184e4:	b	184f4 <argp_error@@Base+0x4a4>
   184e8:	cmp	r8, r6
   184ec:	add	r4, r4, #1
   184f0:	beq	18604 <argp_error@@Base+0x5b4>
   184f4:	ldrb	r3, [r8], #1
   184f8:	cmp	r3, #0
   184fc:	beq	184e8 <argp_error@@Base+0x498>
   18500:	ldr	r3, [r9, r4, lsl #4]
   18504:	ldr	r2, [sp, #96]	; 0x60
   18508:	mov	r1, r7
   1850c:	ldr	r0, [r5]
   18510:	bl	11280 <fprintf@plt>
   18514:	b	184e8 <argp_error@@Base+0x498>
   18518:	cmp	r3, #0
   1851c:	mov	r4, #1
   18520:	bne	18464 <argp_error@@Base+0x414>
   18524:	b	18350 <argp_error@@Base+0x300>
   18528:	ldr	r3, [sp, #20]
   1852c:	ldr	r1, [pc, #580]	; 18778 <argp_error@@Base+0x728>
   18530:	ldr	r2, [r3]
   18534:	ldr	r3, [r9]
   18538:	ldr	r0, [r1]
   1853c:	str	r3, [sp]
   18540:	ldr	r1, [pc, #572]	; 18784 <argp_error@@Base+0x734>
   18544:	ldr	r3, [sp, #96]	; 0x60
   18548:	bl	11280 <fprintf@plt>
   1854c:	ldr	r1, [sp, #88]	; 0x58
   18550:	ldr	r2, [r9, #12]
   18554:	mov	r3, #63	; 0x3f
   18558:	str	r2, [r1, #8]
   1855c:	b	1840c <argp_error@@Base+0x3bc>
   18560:	ldr	r3, [sp, #84]	; 0x54
   18564:	cmp	r3, #0
   18568:	bne	186f4 <argp_error@@Base+0x6a4>
   1856c:	ldr	r3, [sp, #92]	; 0x5c
   18570:	cmp	r3, #0
   18574:	beq	185a0 <argp_error@@Base+0x550>
   18578:	ldr	r3, [sp, #20]
   1857c:	ldr	r1, [pc, #500]	; 18778 <argp_error@@Base+0x728>
   18580:	ldr	r2, [r3]
   18584:	ldr	r3, [sp, #88]	; 0x58
   18588:	ldr	r0, [r1]
   1858c:	ldr	r1, [pc, #500]	; 18788 <argp_error@@Base+0x738>
   18590:	ldr	r3, [r3, #20]
   18594:	str	r3, [sp]
   18598:	ldr	r3, [sp, #96]	; 0x60
   1859c:	bl	11280 <fprintf@plt>
   185a0:	ldr	r3, [sp, #88]	; 0x58
   185a4:	ldr	r1, [sp, #88]	; 0x58
   185a8:	mov	r2, #0
   185ac:	ldr	r3, [r3]
   185b0:	str	r2, [r1, #20]
   185b4:	add	r3, r3, #1
   185b8:	str	r3, [r1]
   185bc:	mov	r3, #63	; 0x3f
   185c0:	mov	r0, r3
   185c4:	str	r2, [r1, #8]
   185c8:	add	sp, sp, #44	; 0x2c
   185cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185d0:	str	sl, [sp, #32]
   185d4:	mov	r9, r8
   185d8:	b	18350 <argp_error@@Base+0x300>
   185dc:	ldr	r1, [sp, #24]
   185e0:	cmp	r3, r1
   185e4:	bge	18670 <argp_error@@Base+0x620>
   185e8:	ldr	r1, [sp, #20]
   185ec:	add	r2, r2, #2
   185f0:	ldr	r3, [r1, r3, lsl #2]
   185f4:	ldr	r1, [sp, #88]	; 0x58
   185f8:	str	r3, [r1, #12]
   185fc:	str	r2, [r1]
   18600:	b	183a8 <argp_error@@Base+0x358>
   18604:	ldr	r1, [r5]
   18608:	mov	r0, #10
   1860c:	bl	112f8 <fputc@plt>
   18610:	ldr	r0, [r5]
   18614:	bl	111b4 <funlockfile@plt>
   18618:	ldr	r3, [sp, #36]	; 0x24
   1861c:	cmp	r3, #0
   18620:	beq	1862c <argp_error@@Base+0x5dc>
   18624:	ldr	r0, [sp, #16]
   18628:	bl	13f14 <argp_parse@@Base+0xe98>
   1862c:	ldr	r3, [sp, #88]	; 0x58
   18630:	ldr	r4, [r3, #20]
   18634:	mov	r0, r4
   18638:	bl	11268 <strlen@plt>
   1863c:	ldr	r3, [sp, #88]	; 0x58
   18640:	ldr	r1, [sp, #88]	; 0x58
   18644:	mov	r2, #0
   18648:	ldr	r3, [r3]
   1864c:	str	r2, [r1, #8]
   18650:	add	r3, r3, #1
   18654:	str	r3, [r1]
   18658:	mov	r3, #63	; 0x3f
   1865c:	add	r0, r4, r0
   18660:	str	r0, [r1, #20]
   18664:	mov	r0, r3
   18668:	add	sp, sp, #44	; 0x2c
   1866c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18670:	ldr	r3, [sp, #92]	; 0x5c
   18674:	cmp	r3, #0
   18678:	bne	186cc <argp_error@@Base+0x67c>
   1867c:	ldr	r2, [sp, #88]	; 0x58
   18680:	ldr	r3, [r9, #12]
   18684:	str	r3, [r2, #8]
   18688:	ldr	r3, [sp, #28]
   1868c:	ldrb	r3, [r3]
   18690:	cmp	r3, #58	; 0x3a
   18694:	movne	r3, #63	; 0x3f
   18698:	moveq	r3, #58	; 0x3a
   1869c:	b	183cc <argp_error@@Base+0x37c>
   186a0:	ldr	r3, [sp, #20]
   186a4:	ldr	r1, [pc, #204]	; 18778 <argp_error@@Base+0x728>
   186a8:	ldr	r2, [r3]
   186ac:	ldr	r3, [sp, #88]	; 0x58
   186b0:	ldr	r0, [r1]
   186b4:	ldr	r1, [pc, #208]	; 1878c <argp_error@@Base+0x73c>
   186b8:	ldr	r3, [r3, #20]
   186bc:	str	r3, [sp]
   186c0:	ldr	r3, [sp, #96]	; 0x60
   186c4:	bl	11280 <fprintf@plt>
   186c8:	b	18618 <argp_error@@Base+0x5c8>
   186cc:	ldr	r3, [sp, #20]
   186d0:	ldr	r1, [pc, #160]	; 18778 <argp_error@@Base+0x728>
   186d4:	ldr	r2, [r3]
   186d8:	ldr	r3, [r9]
   186dc:	ldr	r0, [r1]
   186e0:	str	r3, [sp]
   186e4:	ldr	r1, [pc, #164]	; 18790 <argp_error@@Base+0x740>
   186e8:	ldr	r3, [sp, #96]	; 0x60
   186ec:	bl	11280 <fprintf@plt>
   186f0:	b	1867c <argp_error@@Base+0x62c>
   186f4:	ldr	r3, [sp, #88]	; 0x58
   186f8:	ldr	r2, [sp, #20]
   186fc:	ldr	r3, [r3]
   18700:	ldr	r3, [r2, r3, lsl #2]
   18704:	ldrb	r3, [r3, #1]
   18708:	cmp	r3, #45	; 0x2d
   1870c:	beq	1856c <argp_error@@Base+0x51c>
   18710:	ldr	r3, [sp, #88]	; 0x58
   18714:	ldr	r0, [sp, #28]
   18718:	ldr	r3, [r3, #20]
   1871c:	ldrb	r1, [r3]
   18720:	bl	11274 <strchr@plt>
   18724:	cmp	r0, #0
   18728:	beq	1856c <argp_error@@Base+0x51c>
   1872c:	mvn	r3, #0
   18730:	b	183cc <argp_error@@Base+0x37c>
   18734:	mov	r0, r6
   18738:	bl	14dcc <_obstack_memory_used@@Base+0xa98>
   1873c:	subs	r3, r0, #0
   18740:	str	r3, [sp, #16]
   18744:	beq	18770 <argp_error@@Base+0x720>
   18748:	mov	r2, r6
   1874c:	mov	r1, #0
   18750:	bl	112b0 <memset@plt>
   18754:	mov	r3, #1
   18758:	str	r3, [sp, #36]	; 0x24
   1875c:	ldr	r2, [sp, #32]
   18760:	ldr	r3, [sp, #16]
   18764:	mov	r1, #1
   18768:	strb	r1, [r3, r2]
   1876c:	b	18464 <argp_error@@Base+0x414>
   18770:	mov	r4, #1
   18774:	b	18350 <argp_error@@Base+0x300>
   18778:			; <UNDEFINED> instruction: 0x000308b8
   1877c:	andeq	ip, r1, r0, lsr #4
   18780:	strdeq	ip, [r1], -r0
   18784:	andeq	ip, r1, r8, asr #4
   18788:	andeq	ip, r1, r8, lsr #4
   1878c:	ldrdeq	ip, [r1], -r0
   18790:	andeq	ip, r1, r8, ror r2
   18794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18798:	sub	sp, sp, #36	; 0x24
   1879c:	subs	r6, r0, #0
   187a0:	ldr	r4, [sp, #80]	; 0x50
   187a4:	ldr	r8, [r4, #4]
   187a8:	ble	18984 <argp_error@@Base+0x934>
   187ac:	mov	sl, r3
   187b0:	ldr	r3, [r4]
   187b4:	mov	r7, r2
   187b8:	mov	r2, #0
   187bc:	cmp	r3, r2
   187c0:	mov	r9, r1
   187c4:	str	r2, [r4, #12]
   187c8:	beq	18a0c <argp_error@@Base+0x9bc>
   187cc:	ldr	r2, [r4, #16]
   187d0:	cmp	r2, #0
   187d4:	bne	18990 <argp_error@@Base+0x940>
   187d8:	mov	r5, #0
   187dc:	str	r3, [r4, #32]
   187e0:	str	r3, [r4, #28]
   187e4:	str	r5, [r4, #20]
   187e8:	ldrb	r3, [r7]
   187ec:	cmp	r3, #45	; 0x2d
   187f0:	moveq	r3, #2
   187f4:	addeq	r7, r7, #1
   187f8:	streq	r3, [r4, #24]
   187fc:	beq	18824 <argp_error@@Base+0x7d4>
   18800:	cmp	r3, #43	; 0x2b
   18804:	streq	r5, [r4, #24]
   18808:	addeq	r7, r7, #1
   1880c:	beq	18824 <argp_error@@Base+0x7d4>
   18810:	ldr	r3, [sp, #84]	; 0x54
   18814:	cmp	r3, #0
   18818:	beq	18aac <argp_error@@Base+0xa5c>
   1881c:	mov	r3, #0
   18820:	str	r3, [r4, #24]
   18824:	mov	r3, #1
   18828:	str	r3, [r4, #16]
   1882c:	ldrb	r3, [r7]
   18830:	cmp	r3, #58	; 0x3a
   18834:	moveq	r8, #0
   18838:	cmp	r5, #0
   1883c:	beq	188f0 <argp_error@@Base+0x8a0>
   18840:	ldrb	r3, [r5]
   18844:	cmp	r3, #0
   18848:	beq	188f0 <argp_error@@Base+0x8a0>
   1884c:	add	r3, r5, #1
   18850:	str	r3, [r4, #20]
   18854:	ldrb	fp, [r5]
   18858:	mov	r0, r7
   1885c:	str	r3, [sp, #28]
   18860:	mov	r1, fp
   18864:	bl	11274 <strchr@plt>
   18868:	ldrb	r1, [r5, #1]
   1886c:	ldr	r3, [sp, #28]
   18870:	cmp	r1, #0
   18874:	ldreq	r1, [r4]
   18878:	addeq	r1, r1, #1
   1887c:	streq	r1, [r4]
   18880:	sub	r1, fp, #58	; 0x3a
   18884:	mov	r2, r0
   18888:	cmp	r2, #0
   1888c:	cmpne	r1, #1
   18890:	mov	r0, fp
   18894:	bls	189dc <argp_error@@Base+0x98c>
   18898:	ldrb	r1, [r2]
   1889c:	cmp	r1, #87	; 0x57
   188a0:	ldrb	r1, [r2, #1]
   188a4:	beq	18b30 <argp_error@@Base+0xae0>
   188a8:	cmp	r1, #58	; 0x3a
   188ac:	bne	189d4 <argp_error@@Base+0x984>
   188b0:	ldrb	r2, [r2, #2]
   188b4:	cmp	r2, #58	; 0x3a
   188b8:	ldrb	r2, [r5, #1]
   188bc:	beq	18bb8 <argp_error@@Base+0xb68>
   188c0:	cmp	r2, #0
   188c4:	bne	18bc4 <argp_error@@Base+0xb74>
   188c8:	ldr	r3, [r4]
   188cc:	cmp	r6, r3
   188d0:	beq	18c64 <argp_error@@Base+0xc14>
   188d4:	ldr	r2, [r9, r3, lsl #2]
   188d8:	add	r3, r3, #1
   188dc:	str	r2, [r4, #12]
   188e0:	str	r3, [r4]
   188e4:	mov	r3, #0
   188e8:	str	r3, [r4, #20]
   188ec:	b	189d4 <argp_error@@Base+0x984>
   188f0:	ldr	fp, [r4]
   188f4:	ldr	r3, [r4, #32]
   188f8:	cmp	r3, fp
   188fc:	ldr	r3, [r4, #28]
   18900:	strgt	fp, [r4, #32]
   18904:	cmp	fp, r3
   18908:	ldr	r3, [r4, #24]
   1890c:	strlt	fp, [r4, #28]
   18910:	cmp	r3, #1
   18914:	beq	18a1c <argp_error@@Base+0x9cc>
   18918:	cmp	r6, fp
   1891c:	beq	18a94 <argp_error@@Base+0xa44>
   18920:	ldr	r3, [pc, #944]	; 18cd8 <argp_error@@Base+0xc88>
   18924:	ldr	r5, [r9, fp, lsl #2]
   18928:	mov	r1, r3
   1892c:	mov	r0, r5
   18930:	str	r3, [sp, #28]
   18934:	bl	110f4 <strcmp@plt>
   18938:	ldr	r3, [sp, #28]
   1893c:	cmp	r0, #0
   18940:	bne	189ac <argp_error@@Base+0x95c>
   18944:	ldr	r3, [r4, #28]
   18948:	ldr	r2, [r4, #32]
   1894c:	add	fp, fp, #1
   18950:	cmp	r3, r2
   18954:	str	fp, [r4]
   18958:	beq	18b24 <argp_error@@Base+0xad4>
   1895c:	cmp	fp, r2
   18960:	beq	18974 <argp_error@@Base+0x924>
   18964:	mov	r0, r9
   18968:	mov	r1, r4
   1896c:	bl	18194 <argp_error@@Base+0x144>
   18970:	ldr	r3, [r4, #28]
   18974:	cmp	r3, r6
   18978:	str	r6, [r4]
   1897c:	str	r6, [r4, #32]
   18980:	strne	r3, [r4]
   18984:	mvn	r0, #0
   18988:	add	sp, sp, #36	; 0x24
   1898c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18990:	ldrb	r3, [r7]
   18994:	ldr	r5, [r4, #20]
   18998:	sub	r2, r3, #43	; 0x2b
   1899c:	tst	r2, #253	; 0xfd
   189a0:	ldrbeq	r3, [r7, #1]
   189a4:	addeq	r7, r7, #1
   189a8:	b	18830 <argp_error@@Base+0x7e0>
   189ac:	ldrb	r2, [r5]
   189b0:	cmp	r2, #45	; 0x2d
   189b4:	beq	18ad8 <argp_error@@Base+0xa88>
   189b8:	ldr	r3, [r4, #24]
   189bc:	cmp	r3, #0
   189c0:	beq	18984 <argp_error@@Base+0x934>
   189c4:	mov	r0, #1
   189c8:	add	fp, fp, #1
   189cc:	str	fp, [r4]
   189d0:	str	r5, [r4, #12]
   189d4:	add	sp, sp, #36	; 0x24
   189d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189dc:	cmp	r8, #0
   189e0:	beq	189fc <argp_error@@Base+0x9ac>
   189e4:	ldr	r1, [pc, #752]	; 18cdc <argp_error@@Base+0xc8c>
   189e8:	ldr	r2, [r9]
   189ec:	mov	r3, fp
   189f0:	ldr	r0, [r1]
   189f4:	ldr	r1, [pc, #740]	; 18ce0 <argp_error@@Base+0xc90>
   189f8:	bl	11280 <fprintf@plt>
   189fc:	mov	r0, #63	; 0x3f
   18a00:	str	fp, [r4, #8]
   18a04:	add	sp, sp, #36	; 0x24
   18a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a0c:	mov	r2, #1
   18a10:	mov	r3, r2
   18a14:	str	r2, [r4]
   18a18:	b	187d8 <argp_error@@Base+0x788>
   18a1c:	ldr	r2, [r4, #28]
   18a20:	ldr	r3, [r4, #32]
   18a24:	cmp	r2, r3
   18a28:	beq	18ba8 <argp_error@@Base+0xb58>
   18a2c:	cmp	fp, r3
   18a30:	beq	18a44 <argp_error@@Base+0x9f4>
   18a34:	mov	r1, r4
   18a38:	mov	r0, r9
   18a3c:	bl	18194 <argp_error@@Base+0x144>
   18a40:	ldr	r3, [r4]
   18a44:	cmp	r6, r3
   18a48:	movle	fp, r3
   18a4c:	ble	18a88 <argp_error@@Base+0xa38>
   18a50:	add	r1, r9, r3, lsl #2
   18a54:	b	18a68 <argp_error@@Base+0xa18>
   18a58:	add	r3, r3, #1
   18a5c:	cmp	r6, r3
   18a60:	str	r3, [r4]
   18a64:	beq	18acc <argp_error@@Base+0xa7c>
   18a68:	ldr	r2, [r1], #4
   18a6c:	ldrb	r0, [r2]
   18a70:	cmp	r0, #45	; 0x2d
   18a74:	bne	18a58 <argp_error@@Base+0xa08>
   18a78:	ldrb	r2, [r2, #1]
   18a7c:	cmp	r2, #0
   18a80:	beq	18a58 <argp_error@@Base+0xa08>
   18a84:	ldr	fp, [r4]
   18a88:	str	r3, [r4, #32]
   18a8c:	cmp	r6, fp
   18a90:	bne	18920 <argp_error@@Base+0x8d0>
   18a94:	ldr	r3, [r4, #28]
   18a98:	ldr	r6, [r4, #32]
   18a9c:	mvn	r0, #0
   18aa0:	cmp	r3, r6
   18aa4:	strne	r3, [r4]
   18aa8:	b	18988 <argp_error@@Base+0x938>
   18aac:	ldr	r0, [pc, #560]	; 18ce4 <argp_error@@Base+0xc94>
   18ab0:	bl	111f0 <getenv@plt>
   18ab4:	ldr	r5, [r4, #20]
   18ab8:	cmp	r0, #0
   18abc:	bne	1881c <argp_error@@Base+0x7cc>
   18ac0:	mov	r3, #1
   18ac4:	str	r3, [r4, #24]
   18ac8:	b	18824 <argp_error@@Base+0x7d4>
   18acc:	mov	fp, r6
   18ad0:	str	r3, [r4, #32]
   18ad4:	b	18a8c <argp_error@@Base+0xa3c>
   18ad8:	ldrb	r1, [r5, #1]
   18adc:	cmp	r1, #0
   18ae0:	beq	189b8 <argp_error@@Base+0x968>
   18ae4:	cmp	sl, #0
   18ae8:	beq	18b1c <argp_error@@Base+0xacc>
   18aec:	cmp	r1, #45	; 0x2d
   18af0:	beq	18c28 <argp_error@@Base+0xbd8>
   18af4:	ldr	r3, [sp, #76]	; 0x4c
   18af8:	cmp	r3, #0
   18afc:	beq	18b1c <argp_error@@Base+0xacc>
   18b00:	ldrb	r3, [r5, #2]
   18b04:	cmp	r3, #0
   18b08:	bne	18bd8 <argp_error@@Base+0xb88>
   18b0c:	mov	r0, r7
   18b10:	bl	11274 <strchr@plt>
   18b14:	cmp	r0, #0
   18b18:	beq	18bd8 <argp_error@@Base+0xb88>
   18b1c:	add	r5, r5, #1
   18b20:	b	1884c <argp_error@@Base+0x7fc>
   18b24:	mov	r3, fp
   18b28:	str	fp, [r4, #28]
   18b2c:	b	18974 <argp_error@@Base+0x924>
   18b30:	cmp	sl, #0
   18b34:	sub	ip, r1, #59	; 0x3b
   18b38:	clz	ip, ip
   18b3c:	lsr	ip, ip, #5
   18b40:	moveq	ip, #0
   18b44:	cmp	ip, #0
   18b48:	beq	188a8 <argp_error@@Base+0x858>
   18b4c:	ldrb	r2, [r5, #1]
   18b50:	cmp	r2, #0
   18b54:	bne	18b68 <argp_error@@Base+0xb18>
   18b58:	ldr	r3, [r4]
   18b5c:	cmp	r6, r3
   18b60:	ldrne	r3, [r9, r3, lsl #2]
   18b64:	beq	18c84 <argp_error@@Base+0xc34>
   18b68:	str	r3, [r4, #20]
   18b6c:	ldr	lr, [pc, #372]	; 18ce8 <argp_error@@Base+0xc98>
   18b70:	ldr	r3, [sp, #72]	; 0x48
   18b74:	mov	ip, #0
   18b78:	str	r3, [sp]
   18b7c:	str	r8, [sp, #12]
   18b80:	str	r4, [sp, #8]
   18b84:	str	lr, [sp, #16]
   18b88:	mov	r3, sl
   18b8c:	str	ip, [r4, #12]
   18b90:	mov	r2, r7
   18b94:	mov	r1, r9
   18b98:	mov	r0, r6
   18b9c:	str	ip, [sp, #4]
   18ba0:	bl	18250 <argp_error@@Base+0x200>
   18ba4:	b	189d4 <argp_error@@Base+0x984>
   18ba8:	cmp	fp, r3
   18bac:	movne	r3, fp
   18bb0:	strne	fp, [r4, #28]
   18bb4:	b	18a44 <argp_error@@Base+0x9f4>
   18bb8:	cmp	r2, #0
   18bbc:	streq	r2, [r4, #12]
   18bc0:	beq	188e4 <argp_error@@Base+0x894>
   18bc4:	ldr	r2, [r4]
   18bc8:	str	r3, [r4, #12]
   18bcc:	add	r3, r2, #1
   18bd0:	str	r3, [r4]
   18bd4:	b	188e4 <argp_error@@Base+0x894>
   18bd8:	ldr	r2, [sp, #76]	; 0x4c
   18bdc:	add	r5, r5, #1
   18be0:	str	r5, [r4, #20]
   18be4:	ldr	r3, [pc, #256]	; 18cec <argp_error@@Base+0xc9c>
   18be8:	str	r2, [sp, #4]
   18bec:	ldr	r2, [sp, #72]	; 0x48
   18bf0:	str	r3, [sp, #16]
   18bf4:	str	r2, [sp]
   18bf8:	str	r8, [sp, #12]
   18bfc:	str	r4, [sp, #8]
   18c00:	mov	r3, sl
   18c04:	mov	r2, r7
   18c08:	mov	r1, r9
   18c0c:	mov	r0, r6
   18c10:	bl	18250 <argp_error@@Base+0x200>
   18c14:	cmn	r0, #1
   18c18:	bne	189d4 <argp_error@@Base+0x984>
   18c1c:	ldr	r3, [r4]
   18c20:	ldr	r5, [r9, r3, lsl #2]
   18c24:	b	18b1c <argp_error@@Base+0xacc>
   18c28:	add	r5, r5, #2
   18c2c:	str	r5, [r4, #20]
   18c30:	str	r3, [sp, #16]
   18c34:	ldr	r3, [sp, #76]	; 0x4c
   18c38:	str	r8, [sp, #12]
   18c3c:	str	r3, [sp, #4]
   18c40:	ldr	r3, [sp, #72]	; 0x48
   18c44:	str	r4, [sp, #8]
   18c48:	str	r3, [sp]
   18c4c:	mov	r2, r7
   18c50:	mov	r3, sl
   18c54:	mov	r1, r9
   18c58:	mov	r0, r6
   18c5c:	bl	18250 <argp_error@@Base+0x200>
   18c60:	b	189d4 <argp_error@@Base+0x984>
   18c64:	cmp	r8, #0
   18c68:	bne	18cbc <argp_error@@Base+0xc6c>
   18c6c:	str	fp, [r4, #8]
   18c70:	ldrb	r0, [r7]
   18c74:	cmp	r0, #58	; 0x3a
   18c78:	movne	r0, #63	; 0x3f
   18c7c:	moveq	r0, #58	; 0x3a
   18c80:	b	188e4 <argp_error@@Base+0x894>
   18c84:	cmp	r8, #0
   18c88:	beq	18ca4 <argp_error@@Base+0xc54>
   18c8c:	ldr	r1, [pc, #72]	; 18cdc <argp_error@@Base+0xc8c>
   18c90:	ldr	r2, [r9]
   18c94:	mov	r3, fp
   18c98:	ldr	r0, [r1]
   18c9c:	ldr	r1, [pc, #76]	; 18cf0 <argp_error@@Base+0xca0>
   18ca0:	bl	11280 <fprintf@plt>
   18ca4:	str	fp, [r4, #8]
   18ca8:	ldrb	r0, [r7]
   18cac:	cmp	r0, #58	; 0x3a
   18cb0:	movne	r0, #63	; 0x3f
   18cb4:	moveq	r0, #58	; 0x3a
   18cb8:	b	189d4 <argp_error@@Base+0x984>
   18cbc:	ldr	r1, [pc, #24]	; 18cdc <argp_error@@Base+0xc8c>
   18cc0:	ldr	r2, [r9]
   18cc4:	mov	r3, fp
   18cc8:	ldr	r0, [r1]
   18ccc:	ldr	r1, [pc, #28]	; 18cf0 <argp_error@@Base+0xca0>
   18cd0:	bl	11280 <fprintf@plt>
   18cd4:	b	18c6c <argp_error@@Base+0xc1c>
   18cd8:	andeq	fp, r1, r0, ror r9
   18cdc:			; <UNDEFINED> instruction: 0x000308b8
   18ce0:			; <UNDEFINED> instruction: 0x0001c2b0
   18ce4:	andeq	ip, r1, r0, lsr #5
   18ce8:	strdeq	ip, [r1], -r8
   18cec:	muleq	r1, r8, r5
   18cf0:	andeq	ip, r1, ip, asr #5
   18cf4:	push	{r4, r5, r6, lr}
   18cf8:	sub	sp, sp, #16
   18cfc:	ldr	r5, [pc, #84]	; 18d58 <argp_error@@Base+0xd08>
   18d00:	ldr	ip, [sp, #32]
   18d04:	ldr	r4, [pc, #80]	; 18d5c <argp_error@@Base+0xd0c>
   18d08:	str	ip, [sp]
   18d0c:	ldr	ip, [sp, #40]	; 0x28
   18d10:	ldr	r6, [sp, #36]	; 0x24
   18d14:	ldr	lr, [r5]
   18d18:	str	ip, [sp, #12]
   18d1c:	ldr	ip, [r5, #4]
   18d20:	str	r4, [sp, #8]
   18d24:	str	r6, [sp, #4]
   18d28:	str	ip, [r4, #4]
   18d2c:	str	lr, [r4]
   18d30:	bl	18794 <argp_error@@Base+0x744>
   18d34:	ldr	r3, [pc, #36]	; 18d60 <argp_error@@Base+0xd10>
   18d38:	ldr	ip, [r4]
   18d3c:	ldr	r1, [r4, #8]
   18d40:	ldr	r2, [r4, #12]
   18d44:	str	ip, [r5]
   18d48:	str	r1, [r5, #8]
   18d4c:	str	r2, [r3]
   18d50:	add	sp, sp, #16
   18d54:	pop	{r4, r5, r6, pc}
   18d58:	andeq	r0, r3, r0, lsr #17
   18d5c:	andeq	r0, r3, r8, ror #17
   18d60:	andeq	r0, r3, r4, asr #18
   18d64:	push	{lr}		; (str lr, [sp, #-4]!)
   18d68:	mov	r3, #0
   18d6c:	sub	sp, sp, #20
   18d70:	mov	ip, #1
   18d74:	str	r3, [sp]
   18d78:	stmib	sp, {r3, ip}
   18d7c:	bl	18cf4 <argp_error@@Base+0xca4>
   18d80:	add	sp, sp, #20
   18d84:	pop	{pc}		; (ldr pc, [sp], #4)
   18d88:	push	{r4, r5, r6, lr}
   18d8c:	subs	r4, r2, #0
   18d90:	mov	r6, r0
   18d94:	mov	r5, r1
   18d98:	beq	18dc4 <argp_error@@Base+0xd74>
   18d9c:	mov	r1, r4
   18da0:	mvn	r0, #0
   18da4:	bl	1959c <argp_error@@Base+0x154c>
   18da8:	cmp	r0, r5
   18dac:	bcs	18dc4 <argp_error@@Base+0xd74>
   18db0:	bl	1128c <__errno_location@plt>
   18db4:	mov	r3, #12
   18db8:	str	r3, [r0]
   18dbc:	mov	r0, #0
   18dc0:	pop	{r4, r5, r6, pc}
   18dc4:	mul	r1, r5, r4
   18dc8:	mov	r0, r6
   18dcc:	pop	{r4, r5, r6, lr}
   18dd0:	b	14df8 <_obstack_memory_used@@Base+0xac4>
   18dd4:	push	{r4, r5, r6, r7, r8, lr}
   18dd8:	mov	r8, r0
   18ddc:	mov	r0, #36	; 0x24
   18de0:	mov	r7, r1
   18de4:	mov	r6, r2
   18de8:	mov	r5, r3
   18dec:	bl	14dcc <_obstack_memory_used@@Base+0xa98>
   18df0:	subs	r4, r0, #0
   18df4:	beq	18e38 <argp_error@@Base+0xde8>
   18df8:	mov	r0, #0
   18dfc:	str	r5, [r4, #12]
   18e00:	str	r0, [r4, #20]
   18e04:	str	r0, [r4, #16]
   18e08:	str	r8, [r4]
   18e0c:	str	r7, [r4, #4]
   18e10:	str	r6, [r4, #8]
   18e14:	mov	r0, #200	; 0xc8
   18e18:	bl	14dcc <_obstack_memory_used@@Base+0xa98>
   18e1c:	cmp	r0, #0
   18e20:	addne	r3, r0, #200	; 0xc8
   18e24:	mov	r5, r0
   18e28:	str	r0, [r4, #24]
   18e2c:	strne	r0, [r4, #28]
   18e30:	strne	r3, [r4, #32]
   18e34:	beq	18e40 <argp_error@@Base+0xdf0>
   18e38:	mov	r0, r4
   18e3c:	pop	{r4, r5, r6, r7, r8, pc}
   18e40:	mov	r0, r4
   18e44:	bl	13f14 <argp_parse@@Base+0xe98>
   18e48:	mov	r4, r5
   18e4c:	b	18e38 <argp_error@@Base+0xde8>
   18e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e54:	mov	r7, r0
   18e58:	ldr	r6, [r0, #24]
   18e5c:	ldr	r3, [r0, #16]
   18e60:	ldr	fp, [r0, #28]
   18e64:	sub	sp, sp, #12
   18e68:	add	r6, r6, r3
   18e6c:	mov	r9, #32
   18e70:	cmp	r6, fp
   18e74:	bcs	18f50 <argp_error@@Base+0xf00>
   18e78:	ldr	r8, [r7, #20]
   18e7c:	cmp	r8, #0
   18e80:	bne	18ef0 <argp_error@@Base+0xea0>
   18e84:	ldr	r4, [r7, #4]
   18e88:	cmp	r4, #0
   18e8c:	beq	19194 <argp_error@@Base+0x1144>
   18e90:	ldr	r2, [r7, #32]
   18e94:	add	r3, fp, r4
   18e98:	cmp	r2, r3
   18e9c:	bls	18eb0 <argp_error@@Base+0xe60>
   18ea0:	b	192dc <argp_error@@Base+0x128c>
   18ea4:	add	r8, r8, #1
   18ea8:	cmp	r4, r8
   18eac:	beq	18ee4 <argp_error@@Base+0xe94>
   18eb0:	ldr	r0, [r7]
   18eb4:	ldr	r3, [r0, #20]
   18eb8:	ldr	r2, [r0, #24]
   18ebc:	add	r1, r3, #1
   18ec0:	cmp	r3, r2
   18ec4:	strcc	r1, [r0, #20]
   18ec8:	strbcc	r9, [r3]
   18ecc:	bcc	18ea4 <argp_error@@Base+0xe54>
   18ed0:	mov	r1, r9
   18ed4:	add	r8, r8, #1
   18ed8:	bl	112d4 <__overflow@plt>
   18edc:	cmp	r4, r8
   18ee0:	bne	18eb0 <argp_error@@Base+0xe60>
   18ee4:	ldr	fp, [r7, #28]
   18ee8:	mov	r8, r4
   18eec:	str	r4, [r7, #20]
   18ef0:	sub	sl, fp, r6
   18ef4:	mov	r2, sl
   18ef8:	mov	r1, #10
   18efc:	mov	r0, r6
   18f00:	bl	112c8 <memchr@plt>
   18f04:	cmp	r8, #0
   18f08:	movlt	r8, #0
   18f0c:	movlt	r3, r8
   18f10:	str	r6, [sp]
   18f14:	mov	r4, r0
   18f18:	strlt	r3, [r7, #20]
   18f1c:	cmp	r4, #0
   18f20:	beq	191b8 <argp_error@@Base+0x1168>
   18f24:	sub	r2, r4, r6
   18f28:	ldr	r3, [r7, #8]
   18f2c:	add	r2, r2, r8
   18f30:	cmp	r2, r3
   18f34:	bge	18f64 <argp_error@@Base+0xf14>
   18f38:	ldr	fp, [r7, #28]
   18f3c:	add	r6, r4, #1
   18f40:	mov	r3, #0
   18f44:	cmp	r6, fp
   18f48:	str	r3, [r7, #20]
   18f4c:	bcc	18e78 <argp_error@@Base+0xe28>
   18f50:	ldr	r3, [r7, #24]
   18f54:	sub	r3, fp, r3
   18f58:	str	r3, [r7, #16]
   18f5c:	add	sp, sp, #12
   18f60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f64:	ldr	r2, [r7, #12]
   18f68:	sub	r5, r3, #1
   18f6c:	cmp	r2, #0
   18f70:	str	r2, [sp, #4]
   18f74:	blt	19270 <argp_error@@Base+0x1220>
   18f78:	add	r5, r5, #1
   18f7c:	sub	r8, r5, r8
   18f80:	adds	r8, r6, r8
   18f84:	bcs	191f0 <argp_error@@Base+0x11a0>
   18f88:	bl	11250 <__ctype_b_loc@plt>
   18f8c:	mov	r3, r8
   18f90:	ldr	r0, [r0]
   18f94:	b	18fa0 <argp_error@@Base+0xf50>
   18f98:	cmp	r3, r6
   18f9c:	bcc	191f4 <argp_error@@Base+0x11a4>
   18fa0:	mov	r1, r3
   18fa4:	sub	r3, r3, #1
   18fa8:	ldrb	r2, [r1]
   18fac:	mov	r5, r3
   18fb0:	lsl	r2, r2, #1
   18fb4:	ldrh	r2, [r0, r2]
   18fb8:	tst	r2, #1
   18fbc:	beq	18f98 <argp_error@@Base+0xf48>
   18fc0:	add	r5, r1, #1
   18fc4:	cmp	r5, r6
   18fc8:	bls	19208 <argp_error@@Base+0x11b8>
   18fcc:	cmp	r1, r6
   18fd0:	bcc	19200 <argp_error@@Base+0x11b0>
   18fd4:	mov	r1, r3
   18fd8:	sub	r8, r6, #1
   18fdc:	b	18ff8 <argp_error@@Base+0xfa8>
   18fe0:	ldrb	r3, [r1]
   18fe4:	sub	r1, r1, #1
   18fe8:	lsl	r3, r3, #1
   18fec:	ldrh	r3, [r0, r3]
   18ff0:	tst	r3, #1
   18ff4:	beq	19320 <argp_error@@Base+0x12d0>
   18ff8:	cmp	r8, r1
   18ffc:	mov	r2, r1
   19000:	bne	18fe0 <argp_error@@Base+0xf90>
   19004:	add	r8, r8, #1
   19008:	add	r3, sl, #1
   1900c:	add	r3, r6, r3
   19010:	cmp	r5, r3
   19014:	beq	190fc <argp_error@@Base+0x10ac>
   19018:	add	r3, r8, #1
   1901c:	ldr	r1, [sp, #4]
   19020:	sub	r2, r5, r3
   19024:	cmp	r2, r1
   19028:	bge	19118 <argp_error@@Base+0x10c8>
   1902c:	cmp	r5, fp
   19030:	bcs	19110 <argp_error@@Base+0x10c0>
   19034:	ldr	r3, [r7, #32]
   19038:	ldr	r2, [sp, #4]
   1903c:	sub	r3, r3, fp
   19040:	add	r0, r2, #1
   19044:	cmp	r3, r0
   19048:	bgt	19350 <argp_error@@Base+0x1300>
   1904c:	ldr	r0, [r7, #24]
   19050:	cmp	r8, r0
   19054:	bls	19068 <argp_error@@Base+0x1018>
   19058:	sub	r2, r8, r0
   1905c:	ldr	r3, [r7]
   19060:	mov	r1, #1
   19064:	bl	11184 <fwrite_unlocked@plt>
   19068:	ldr	r0, [r7]
   1906c:	ldr	r2, [r0, #24]
   19070:	ldr	r3, [r0, #20]
   19074:	cmp	r3, r2
   19078:	addcc	r2, r3, #1
   1907c:	strcc	r2, [r0, #20]
   19080:	movcc	r2, #10
   19084:	strbcc	r2, [r3]
   19088:	bcs	19390 <argp_error@@Base+0x1340>
   1908c:	ldr	r6, [r7, #24]
   19090:	ldr	r3, [sp]
   19094:	sub	r2, r5, r6
   19098:	sub	r3, r3, r6
   1909c:	add	sl, sl, r3
   190a0:	mov	fp, r2
   190a4:	mov	r4, r6
   190a8:	ldr	r3, [r7, #12]
   190ac:	cmp	r3, r2
   190b0:	bgt	19138 <argp_error@@Base+0x10e8>
   190b4:	cmp	r3, #0
   190b8:	movgt	r2, r6
   190bc:	ble	190d8 <argp_error@@Base+0x1088>
   190c0:	strb	r9, [r2], #1
   190c4:	ldr	r3, [r7, #12]
   190c8:	sub	r1, r2, r6
   190cc:	cmp	r3, r1
   190d0:	bgt	190c0 <argp_error@@Base+0x1070>
   190d4:	mov	r6, r2
   190d8:	cmp	r6, r5
   190dc:	bcc	192c0 <argp_error@@Base+0x1270>
   190e0:	sub	fp, sl, fp
   190e4:	cmp	r3, #0
   190e8:	add	fp, r6, fp
   190ec:	mvneq	r3, #0
   190f0:	str	fp, [r7, #28]
   190f4:	str	r3, [r7, #20]
   190f8:	b	18e70 <argp_error@@Base+0xe20>
   190fc:	ldr	r3, [r7, #32]
   19100:	ldr	r2, [sp, #4]
   19104:	sub	r3, r3, r8
   19108:	cmp	r3, r2
   1910c:	ble	1902c <argp_error@@Base+0xfdc>
   19110:	add	r3, r8, #1
   19114:	sub	r2, r5, r3
   19118:	sub	fp, r5, r6
   1911c:	mov	r4, r6
   19120:	mov	r6, r3
   19124:	mov	r3, #10
   19128:	strb	r3, [r8]
   1912c:	ldr	r3, [r7, #12]
   19130:	cmp	r3, r2
   19134:	ble	190b4 <argp_error@@Base+0x1064>
   19138:	add	r2, sl, #1
   1913c:	add	r2, r4, r2
   19140:	cmp	r5, r2
   19144:	beq	1933c <argp_error@@Base+0x12ec>
   19148:	cmp	r3, #0
   1914c:	movgt	r8, #0
   19150:	bgt	19168 <argp_error@@Base+0x1118>
   19154:	b	190d8 <argp_error@@Base+0x1088>
   19158:	ldr	r3, [r7, #12]
   1915c:	add	r8, r8, #1
   19160:	cmp	r3, r8
   19164:	ble	190d8 <argp_error@@Base+0x1088>
   19168:	ldr	r0, [r7]
   1916c:	ldr	r3, [r0, #20]
   19170:	ldr	r2, [r0, #24]
   19174:	add	r1, r3, #1
   19178:	cmp	r3, r2
   1917c:	strcc	r1, [r0, #20]
   19180:	strbcc	r9, [r3]
   19184:	bcc	19158 <argp_error@@Base+0x1108>
   19188:	mov	r1, r9
   1918c:	bl	112d4 <__overflow@plt>
   19190:	b	19158 <argp_error@@Base+0x1108>
   19194:	sub	sl, fp, r6
   19198:	mov	r2, sl
   1919c:	mov	r1, #10
   191a0:	mov	r0, r6
   191a4:	bl	112c8 <memchr@plt>
   191a8:	str	r6, [sp]
   191ac:	mov	r4, r0
   191b0:	cmp	r4, #0
   191b4:	bne	18f24 <argp_error@@Base+0xed4>
   191b8:	ldr	r5, [r7, #8]
   191bc:	add	r3, r8, sl
   191c0:	cmp	r3, r5
   191c4:	bcc	193b4 <argp_error@@Base+0x1364>
   191c8:	ldr	r2, [r7, #12]
   191cc:	sub	r5, r5, #1
   191d0:	cmp	r2, #0
   191d4:	str	r2, [sp, #4]
   191d8:	blt	193a0 <argp_error@@Base+0x1350>
   191dc:	add	r5, r5, #1
   191e0:	sub	r8, r5, r8
   191e4:	adds	r8, r6, r8
   191e8:	mov	r4, fp
   191ec:	bcc	18f88 <argp_error@@Base+0xf38>
   191f0:	mov	r5, r8
   191f4:	add	r5, r5, #1
   191f8:	cmp	r5, r6
   191fc:	bls	19208 <argp_error@@Base+0x11b8>
   19200:	mov	r8, r5
   19204:	b	19008 <argp_error@@Base+0xfb8>
   19208:	cmp	r8, r4
   1920c:	bcs	19244 <argp_error@@Base+0x11f4>
   19210:	add	r5, r8, #1
   19214:	b	19238 <argp_error@@Base+0x11e8>
   19218:	bl	11250 <__ctype_b_loc@plt>
   1921c:	ldrb	r3, [r5]
   19220:	add	r5, r5, #1
   19224:	lsl	r3, r3, #1
   19228:	ldr	r2, [r0]
   1922c:	ldrh	r3, [r2, r3]
   19230:	tst	r3, #1
   19234:	bne	19254 <argp_error@@Base+0x1204>
   19238:	cmp	r5, r4
   1923c:	mov	r8, r5
   19240:	bne	19218 <argp_error@@Base+0x11c8>
   19244:	cmp	r8, r4
   19248:	beq	19328 <argp_error@@Base+0x12d8>
   1924c:	bl	11250 <__ctype_b_loc@plt>
   19250:	ldr	r2, [r0]
   19254:	mov	r5, r8
   19258:	ldrb	r3, [r5, #1]!
   1925c:	lsl	r3, r3, #1
   19260:	ldrh	r3, [r2, r3]
   19264:	tst	r3, #1
   19268:	bne	19258 <argp_error@@Base+0x1208>
   1926c:	b	19008 <argp_error@@Base+0xfb8>
   19270:	cmp	r4, fp
   19274:	str	r3, [sp]
   19278:	bcs	1939c <argp_error@@Base+0x134c>
   1927c:	sub	r0, r5, r8
   19280:	sub	r2, fp, r4
   19284:	add	r0, r6, r0
   19288:	mov	r1, r4
   1928c:	bl	11118 <memmove@plt>
   19290:	ldr	r2, [r7, #20]
   19294:	ldr	fp, [r7, #28]
   19298:	sub	r5, r5, r2
   1929c:	add	r5, r6, r5
   192a0:	mov	r3, #0
   192a4:	sub	r4, r5, r4
   192a8:	str	r3, [r7, #20]
   192ac:	ldr	r3, [sp]
   192b0:	sub	fp, fp, r4
   192b4:	add	r6, r6, r3
   192b8:	str	fp, [r7, #28]
   192bc:	b	18e70 <argp_error@@Base+0xe20>
   192c0:	add	r2, r4, sl
   192c4:	sub	r2, r2, r5
   192c8:	mov	r1, r5
   192cc:	mov	r0, r6
   192d0:	bl	11118 <memmove@plt>
   192d4:	ldr	r3, [r7, #12]
   192d8:	b	190e0 <argp_error@@Base+0x1090>
   192dc:	add	r5, r6, r4
   192e0:	sub	r2, fp, r6
   192e4:	mov	r1, r6
   192e8:	mov	r0, r5
   192ec:	bl	11118 <memmove@plt>
   192f0:	ldr	r3, [r7, #28]
   192f4:	mov	r0, r6
   192f8:	add	r3, r3, r4
   192fc:	str	r3, [r7, #28]
   19300:	mov	r2, r4
   19304:	mov	r1, r9
   19308:	bl	112b0 <memset@plt>
   1930c:	mov	r6, r5
   19310:	ldr	fp, [r7, #28]
   19314:	mov	r8, r4
   19318:	str	r4, [r7, #20]
   1931c:	b	18ef0 <argp_error@@Base+0xea0>
   19320:	add	r8, r2, #1
   19324:	b	19008 <argp_error@@Base+0xfb8>
   19328:	mov	r3, #0
   1932c:	str	r3, [r7, #20]
   19330:	add	r6, r8, #1
   19334:	ldr	fp, [r7, #28]
   19338:	b	18e70 <argp_error@@Base+0xe20>
   1933c:	ldr	r2, [r7, #32]
   19340:	sub	r2, r2, r5
   19344:	cmp	r3, r2
   19348:	ble	190b4 <argp_error@@Base+0x1064>
   1934c:	b	19148 <argp_error@@Base+0x10f8>
   19350:	sub	fp, fp, r5
   19354:	mov	r2, fp
   19358:	mov	r1, r5
   1935c:	add	r0, r8, r0
   19360:	bl	11118 <memmove@plt>
   19364:	ldr	r2, [r7, #12]
   19368:	mov	r3, #10
   1936c:	add	r5, r2, #1
   19370:	add	r5, r8, r5
   19374:	add	fp, r5, fp
   19378:	sub	sl, fp, r6
   1937c:	mov	r4, r6
   19380:	sub	fp, r5, r6
   19384:	strb	r3, [r8]
   19388:	add	r6, r8, #1
   1938c:	b	190a8 <argp_error@@Base+0x1058>
   19390:	mov	r1, #10
   19394:	bl	112d4 <__overflow@plt>
   19398:	b	1908c <argp_error@@Base+0x103c>
   1939c:	add	r3, r8, sl
   193a0:	sub	r5, r5, r3
   193a4:	add	fp, fp, r5
   193a8:	str	fp, [r7, #28]
   193ac:	str	r3, [r7, #20]
   193b0:	b	18f50 <argp_error@@Base+0xf00>
   193b4:	str	r3, [r7, #20]
   193b8:	ldr	fp, [r7, #28]
   193bc:	b	18f50 <argp_error@@Base+0xf00>
   193c0:	push	{r4, lr}
   193c4:	mov	r4, r0
   193c8:	bl	18e50 <argp_error@@Base+0xe00>
   193cc:	ldr	r2, [r4, #28]
   193d0:	ldr	r0, [r4, #24]
   193d4:	cmp	r2, r0
   193d8:	bls	193f0 <argp_error@@Base+0x13a0>
   193dc:	sub	r2, r2, r0
   193e0:	ldr	r3, [r4]
   193e4:	mov	r1, #1
   193e8:	bl	11184 <fwrite_unlocked@plt>
   193ec:	ldr	r0, [r4, #24]
   193f0:	bl	13f14 <argp_parse@@Base+0xe98>
   193f4:	mov	r0, r4
   193f8:	pop	{r4, lr}
   193fc:	b	13f14 <argp_parse@@Base+0xe98>
   19400:	push	{r4, r5, r6, lr}
   19404:	mov	r4, r0
   19408:	mov	r5, r1
   1940c:	bl	18e50 <argp_error@@Base+0xe00>
   19410:	ldr	r3, [r4, #24]
   19414:	ldr	r2, [r4, #28]
   19418:	mov	r0, r3
   1941c:	sub	r2, r2, r3
   19420:	mov	r1, #1
   19424:	ldr	r3, [r4]
   19428:	bl	11184 <fwrite_unlocked@plt>
   1942c:	ldr	r2, [r4, #28]
   19430:	ldr	r3, [r4, #24]
   19434:	sub	r1, r2, r3
   19438:	cmp	r0, r1
   1943c:	bne	19480 <argp_error@@Base+0x1430>
   19440:	ldr	r1, [r4, #32]
   19444:	mov	r2, #0
   19448:	sub	r1, r1, r3
   1944c:	cmp	r1, r5
   19450:	str	r3, [r4, #28]
   19454:	str	r2, [r4, #16]
   19458:	movcs	r3, #1
   1945c:	bcs	19478 <argp_error@@Base+0x1428>
   19460:	adds	r5, r1, r5
   19464:	bcc	194b0 <argp_error@@Base+0x1460>
   19468:	bl	1128c <__errno_location@plt>
   1946c:	mov	r3, #0
   19470:	mov	r2, #12
   19474:	str	r2, [r0]
   19478:	mov	r0, r3
   1947c:	pop	{r4, r5, r6, pc}
   19480:	ldr	r1, [r4, #16]
   19484:	sub	r2, r2, r0
   19488:	sub	r1, r1, r0
   1948c:	str	r2, [r4, #28]
   19490:	str	r1, [r4, #16]
   19494:	sub	r2, r2, r3
   19498:	add	r1, r3, r0
   1949c:	mov	r0, r3
   194a0:	bl	11118 <memmove@plt>
   194a4:	mov	r3, #0
   194a8:	mov	r0, r3
   194ac:	pop	{r4, r5, r6, pc}
   194b0:	mov	r0, r3
   194b4:	mov	r1, r5
   194b8:	bl	14df8 <_obstack_memory_used@@Base+0xac4>
   194bc:	cmp	r0, #0
   194c0:	beq	19468 <argp_error@@Base+0x1418>
   194c4:	add	r1, r0, r5
   194c8:	mov	r3, #1
   194cc:	str	r0, [r4, #24]
   194d0:	str	r0, [r4, #28]
   194d4:	str	r1, [r4, #32]
   194d8:	mov	r0, r3
   194dc:	pop	{r4, r5, r6, pc}
   194e0:	ldr	r3, [r0, #32]
   194e4:	ldr	r2, [r0, #28]
   194e8:	sub	r3, r3, r2
   194ec:	cmp	r3, r1
   194f0:	bcc	194fc <argp_error@@Base+0x14ac>
   194f4:	mov	r0, #1
   194f8:	bx	lr
   194fc:	b	19400 <argp_error@@Base+0x13b0>
   19500:	push	{r1, r2, r3}
   19504:	mov	r1, #150	; 0x96
   19508:	push	{r4, r5, r6, r7, lr}
   1950c:	sub	sp, sp, #8
   19510:	mov	r5, r0
   19514:	ldr	r7, [sp, #28]
   19518:	add	r6, sp, #32
   1951c:	ldr	r3, [r5, #32]
   19520:	ldr	r0, [r5, #28]
   19524:	sub	r2, r3, r0
   19528:	cmp	r1, r2
   1952c:	bhi	19570 <argp_error@@Base+0x1520>
   19530:	sub	r4, r3, r0
   19534:	mov	r1, r4
   19538:	mov	r3, r6
   1953c:	mov	r2, r7
   19540:	str	r6, [sp, #4]
   19544:	bl	11328 <vsnprintf@plt>
   19548:	cmp	r4, r0
   1954c:	addls	r1, r0, #1
   19550:	bls	1951c <argp_error@@Base+0x14cc>
   19554:	ldr	r3, [r5, #28]
   19558:	add	r3, r3, r0
   1955c:	str	r3, [r5, #28]
   19560:	add	sp, sp, #8
   19564:	pop	{r4, r5, r6, r7, lr}
   19568:	add	sp, sp, #12
   1956c:	bx	lr
   19570:	mov	r0, r5
   19574:	bl	19400 <argp_error@@Base+0x13b0>
   19578:	cmp	r0, #0
   1957c:	ldrne	r3, [r5, #32]
   19580:	ldrne	r0, [r5, #28]
   19584:	bne	19530 <argp_error@@Base+0x14e0>
   19588:	mvn	r0, #0
   1958c:	add	sp, sp, #8
   19590:	pop	{r4, r5, r6, r7, lr}
   19594:	add	sp, sp, #12
   19598:	bx	lr
   1959c:	subs	r2, r1, #1
   195a0:	bxeq	lr
   195a4:	bcc	1977c <argp_error@@Base+0x172c>
   195a8:	cmp	r0, r1
   195ac:	bls	19760 <argp_error@@Base+0x1710>
   195b0:	tst	r1, r2
   195b4:	beq	1976c <argp_error@@Base+0x171c>
   195b8:	clz	r3, r0
   195bc:	clz	r2, r1
   195c0:	sub	r3, r2, r3
   195c4:	rsbs	r3, r3, #31
   195c8:	addne	r3, r3, r3, lsl #1
   195cc:	mov	r2, #0
   195d0:	addne	pc, pc, r3, lsl #2
   195d4:	nop			; (mov r0, r0)
   195d8:	cmp	r0, r1, lsl #31
   195dc:	adc	r2, r2, r2
   195e0:	subcs	r0, r0, r1, lsl #31
   195e4:	cmp	r0, r1, lsl #30
   195e8:	adc	r2, r2, r2
   195ec:	subcs	r0, r0, r1, lsl #30
   195f0:	cmp	r0, r1, lsl #29
   195f4:	adc	r2, r2, r2
   195f8:	subcs	r0, r0, r1, lsl #29
   195fc:	cmp	r0, r1, lsl #28
   19600:	adc	r2, r2, r2
   19604:	subcs	r0, r0, r1, lsl #28
   19608:	cmp	r0, r1, lsl #27
   1960c:	adc	r2, r2, r2
   19610:	subcs	r0, r0, r1, lsl #27
   19614:	cmp	r0, r1, lsl #26
   19618:	adc	r2, r2, r2
   1961c:	subcs	r0, r0, r1, lsl #26
   19620:	cmp	r0, r1, lsl #25
   19624:	adc	r2, r2, r2
   19628:	subcs	r0, r0, r1, lsl #25
   1962c:	cmp	r0, r1, lsl #24
   19630:	adc	r2, r2, r2
   19634:	subcs	r0, r0, r1, lsl #24
   19638:	cmp	r0, r1, lsl #23
   1963c:	adc	r2, r2, r2
   19640:	subcs	r0, r0, r1, lsl #23
   19644:	cmp	r0, r1, lsl #22
   19648:	adc	r2, r2, r2
   1964c:	subcs	r0, r0, r1, lsl #22
   19650:	cmp	r0, r1, lsl #21
   19654:	adc	r2, r2, r2
   19658:	subcs	r0, r0, r1, lsl #21
   1965c:	cmp	r0, r1, lsl #20
   19660:	adc	r2, r2, r2
   19664:	subcs	r0, r0, r1, lsl #20
   19668:	cmp	r0, r1, lsl #19
   1966c:	adc	r2, r2, r2
   19670:	subcs	r0, r0, r1, lsl #19
   19674:	cmp	r0, r1, lsl #18
   19678:	adc	r2, r2, r2
   1967c:	subcs	r0, r0, r1, lsl #18
   19680:	cmp	r0, r1, lsl #17
   19684:	adc	r2, r2, r2
   19688:	subcs	r0, r0, r1, lsl #17
   1968c:	cmp	r0, r1, lsl #16
   19690:	adc	r2, r2, r2
   19694:	subcs	r0, r0, r1, lsl #16
   19698:	cmp	r0, r1, lsl #15
   1969c:	adc	r2, r2, r2
   196a0:	subcs	r0, r0, r1, lsl #15
   196a4:	cmp	r0, r1, lsl #14
   196a8:	adc	r2, r2, r2
   196ac:	subcs	r0, r0, r1, lsl #14
   196b0:	cmp	r0, r1, lsl #13
   196b4:	adc	r2, r2, r2
   196b8:	subcs	r0, r0, r1, lsl #13
   196bc:	cmp	r0, r1, lsl #12
   196c0:	adc	r2, r2, r2
   196c4:	subcs	r0, r0, r1, lsl #12
   196c8:	cmp	r0, r1, lsl #11
   196cc:	adc	r2, r2, r2
   196d0:	subcs	r0, r0, r1, lsl #11
   196d4:	cmp	r0, r1, lsl #10
   196d8:	adc	r2, r2, r2
   196dc:	subcs	r0, r0, r1, lsl #10
   196e0:	cmp	r0, r1, lsl #9
   196e4:	adc	r2, r2, r2
   196e8:	subcs	r0, r0, r1, lsl #9
   196ec:	cmp	r0, r1, lsl #8
   196f0:	adc	r2, r2, r2
   196f4:	subcs	r0, r0, r1, lsl #8
   196f8:	cmp	r0, r1, lsl #7
   196fc:	adc	r2, r2, r2
   19700:	subcs	r0, r0, r1, lsl #7
   19704:	cmp	r0, r1, lsl #6
   19708:	adc	r2, r2, r2
   1970c:	subcs	r0, r0, r1, lsl #6
   19710:	cmp	r0, r1, lsl #5
   19714:	adc	r2, r2, r2
   19718:	subcs	r0, r0, r1, lsl #5
   1971c:	cmp	r0, r1, lsl #4
   19720:	adc	r2, r2, r2
   19724:	subcs	r0, r0, r1, lsl #4
   19728:	cmp	r0, r1, lsl #3
   1972c:	adc	r2, r2, r2
   19730:	subcs	r0, r0, r1, lsl #3
   19734:	cmp	r0, r1, lsl #2
   19738:	adc	r2, r2, r2
   1973c:	subcs	r0, r0, r1, lsl #2
   19740:	cmp	r0, r1, lsl #1
   19744:	adc	r2, r2, r2
   19748:	subcs	r0, r0, r1, lsl #1
   1974c:	cmp	r0, r1
   19750:	adc	r2, r2, r2
   19754:	subcs	r0, r0, r1
   19758:	mov	r0, r2
   1975c:	bx	lr
   19760:	moveq	r0, #1
   19764:	movne	r0, #0
   19768:	bx	lr
   1976c:	clz	r2, r1
   19770:	rsb	r2, r2, #31
   19774:	lsr	r0, r0, r2
   19778:	bx	lr
   1977c:	cmp	r0, #0
   19780:	mvnne	r0, #0
   19784:	b	199e8 <argp_error@@Base+0x1998>
   19788:	cmp	r1, #0
   1978c:	beq	1977c <argp_error@@Base+0x172c>
   19790:	push	{r0, r1, lr}
   19794:	bl	1959c <argp_error@@Base+0x154c>
   19798:	pop	{r1, r2, lr}
   1979c:	mul	r3, r2, r0
   197a0:	sub	r1, r1, r3
   197a4:	bx	lr
   197a8:	cmp	r1, #0
   197ac:	beq	199b8 <argp_error@@Base+0x1968>
   197b0:	eor	ip, r0, r1
   197b4:	rsbmi	r1, r1, #0
   197b8:	subs	r2, r1, #1
   197bc:	beq	19984 <argp_error@@Base+0x1934>
   197c0:	movs	r3, r0
   197c4:	rsbmi	r3, r0, #0
   197c8:	cmp	r3, r1
   197cc:	bls	19990 <argp_error@@Base+0x1940>
   197d0:	tst	r1, r2
   197d4:	beq	199a0 <argp_error@@Base+0x1950>
   197d8:	clz	r2, r3
   197dc:	clz	r0, r1
   197e0:	sub	r2, r0, r2
   197e4:	rsbs	r2, r2, #31
   197e8:	addne	r2, r2, r2, lsl #1
   197ec:	mov	r0, #0
   197f0:	addne	pc, pc, r2, lsl #2
   197f4:	nop			; (mov r0, r0)
   197f8:	cmp	r3, r1, lsl #31
   197fc:	adc	r0, r0, r0
   19800:	subcs	r3, r3, r1, lsl #31
   19804:	cmp	r3, r1, lsl #30
   19808:	adc	r0, r0, r0
   1980c:	subcs	r3, r3, r1, lsl #30
   19810:	cmp	r3, r1, lsl #29
   19814:	adc	r0, r0, r0
   19818:	subcs	r3, r3, r1, lsl #29
   1981c:	cmp	r3, r1, lsl #28
   19820:	adc	r0, r0, r0
   19824:	subcs	r3, r3, r1, lsl #28
   19828:	cmp	r3, r1, lsl #27
   1982c:	adc	r0, r0, r0
   19830:	subcs	r3, r3, r1, lsl #27
   19834:	cmp	r3, r1, lsl #26
   19838:	adc	r0, r0, r0
   1983c:	subcs	r3, r3, r1, lsl #26
   19840:	cmp	r3, r1, lsl #25
   19844:	adc	r0, r0, r0
   19848:	subcs	r3, r3, r1, lsl #25
   1984c:	cmp	r3, r1, lsl #24
   19850:	adc	r0, r0, r0
   19854:	subcs	r3, r3, r1, lsl #24
   19858:	cmp	r3, r1, lsl #23
   1985c:	adc	r0, r0, r0
   19860:	subcs	r3, r3, r1, lsl #23
   19864:	cmp	r3, r1, lsl #22
   19868:	adc	r0, r0, r0
   1986c:	subcs	r3, r3, r1, lsl #22
   19870:	cmp	r3, r1, lsl #21
   19874:	adc	r0, r0, r0
   19878:	subcs	r3, r3, r1, lsl #21
   1987c:	cmp	r3, r1, lsl #20
   19880:	adc	r0, r0, r0
   19884:	subcs	r3, r3, r1, lsl #20
   19888:	cmp	r3, r1, lsl #19
   1988c:	adc	r0, r0, r0
   19890:	subcs	r3, r3, r1, lsl #19
   19894:	cmp	r3, r1, lsl #18
   19898:	adc	r0, r0, r0
   1989c:	subcs	r3, r3, r1, lsl #18
   198a0:	cmp	r3, r1, lsl #17
   198a4:	adc	r0, r0, r0
   198a8:	subcs	r3, r3, r1, lsl #17
   198ac:	cmp	r3, r1, lsl #16
   198b0:	adc	r0, r0, r0
   198b4:	subcs	r3, r3, r1, lsl #16
   198b8:	cmp	r3, r1, lsl #15
   198bc:	adc	r0, r0, r0
   198c0:	subcs	r3, r3, r1, lsl #15
   198c4:	cmp	r3, r1, lsl #14
   198c8:	adc	r0, r0, r0
   198cc:	subcs	r3, r3, r1, lsl #14
   198d0:	cmp	r3, r1, lsl #13
   198d4:	adc	r0, r0, r0
   198d8:	subcs	r3, r3, r1, lsl #13
   198dc:	cmp	r3, r1, lsl #12
   198e0:	adc	r0, r0, r0
   198e4:	subcs	r3, r3, r1, lsl #12
   198e8:	cmp	r3, r1, lsl #11
   198ec:	adc	r0, r0, r0
   198f0:	subcs	r3, r3, r1, lsl #11
   198f4:	cmp	r3, r1, lsl #10
   198f8:	adc	r0, r0, r0
   198fc:	subcs	r3, r3, r1, lsl #10
   19900:	cmp	r3, r1, lsl #9
   19904:	adc	r0, r0, r0
   19908:	subcs	r3, r3, r1, lsl #9
   1990c:	cmp	r3, r1, lsl #8
   19910:	adc	r0, r0, r0
   19914:	subcs	r3, r3, r1, lsl #8
   19918:	cmp	r3, r1, lsl #7
   1991c:	adc	r0, r0, r0
   19920:	subcs	r3, r3, r1, lsl #7
   19924:	cmp	r3, r1, lsl #6
   19928:	adc	r0, r0, r0
   1992c:	subcs	r3, r3, r1, lsl #6
   19930:	cmp	r3, r1, lsl #5
   19934:	adc	r0, r0, r0
   19938:	subcs	r3, r3, r1, lsl #5
   1993c:	cmp	r3, r1, lsl #4
   19940:	adc	r0, r0, r0
   19944:	subcs	r3, r3, r1, lsl #4
   19948:	cmp	r3, r1, lsl #3
   1994c:	adc	r0, r0, r0
   19950:	subcs	r3, r3, r1, lsl #3
   19954:	cmp	r3, r1, lsl #2
   19958:	adc	r0, r0, r0
   1995c:	subcs	r3, r3, r1, lsl #2
   19960:	cmp	r3, r1, lsl #1
   19964:	adc	r0, r0, r0
   19968:	subcs	r3, r3, r1, lsl #1
   1996c:	cmp	r3, r1
   19970:	adc	r0, r0, r0
   19974:	subcs	r3, r3, r1
   19978:	cmp	ip, #0
   1997c:	rsbmi	r0, r0, #0
   19980:	bx	lr
   19984:	teq	ip, r0
   19988:	rsbmi	r0, r0, #0
   1998c:	bx	lr
   19990:	movcc	r0, #0
   19994:	asreq	r0, ip, #31
   19998:	orreq	r0, r0, #1
   1999c:	bx	lr
   199a0:	clz	r2, r1
   199a4:	rsb	r2, r2, #31
   199a8:	cmp	ip, #0
   199ac:	lsr	r0, r3, r2
   199b0:	rsbmi	r0, r0, #0
   199b4:	bx	lr
   199b8:	cmp	r0, #0
   199bc:	mvngt	r0, #-2147483648	; 0x80000000
   199c0:	movlt	r0, #-2147483648	; 0x80000000
   199c4:	b	199e8 <argp_error@@Base+0x1998>
   199c8:	cmp	r1, #0
   199cc:	beq	199b8 <argp_error@@Base+0x1968>
   199d0:	push	{r0, r1, lr}
   199d4:	bl	197b0 <argp_error@@Base+0x1760>
   199d8:	pop	{r1, r2, lr}
   199dc:	mul	r3, r2, r0
   199e0:	sub	r1, r1, r3
   199e4:	bx	lr
   199e8:	push	{r1, lr}
   199ec:	mov	r0, #8
   199f0:	bl	110dc <raise@plt>
   199f4:	pop	{r1, pc}
   199f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   199fc:	mov	r7, r0
   19a00:	ldr	r6, [pc, #72]	; 19a50 <argp_error@@Base+0x1a00>
   19a04:	ldr	r5, [pc, #72]	; 19a54 <argp_error@@Base+0x1a04>
   19a08:	add	r6, pc, r6
   19a0c:	add	r5, pc, r5
   19a10:	sub	r6, r6, r5
   19a14:	mov	r8, r1
   19a18:	mov	r9, r2
   19a1c:	bl	11098 <fdopen@plt-0x20>
   19a20:	asrs	r6, r6, #2
   19a24:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19a28:	mov	r4, #0
   19a2c:	add	r4, r4, #1
   19a30:	ldr	r3, [r5], #4
   19a34:	mov	r2, r9
   19a38:	mov	r1, r8
   19a3c:	mov	r0, r7
   19a40:	blx	r3
   19a44:	cmp	r6, r4
   19a48:	bne	19a2c <argp_error@@Base+0x19dc>
   19a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19a50:	andeq	r3, r1, r0, lsl #10
   19a54:	strdeq	r3, [r1], -r8
   19a58:	bx	lr

Disassembly of section .fini:

00019a5c <.fini>:
   19a5c:	push	{r3, lr}
   19a60:	pop	{r3, pc}
