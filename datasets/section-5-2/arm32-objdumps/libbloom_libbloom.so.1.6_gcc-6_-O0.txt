
../repos/libbloom/build/libbloom.so.1.6:     file format elf32-littlearm


Disassembly of section .init:

00000510 <.init>:
 510:	push	{r3, lr}
 514:	bl	5b8 <bloom_init@plt+0x10>
 518:	pop	{r3, pc}

Disassembly of section .plt:

0000051c <calloc@plt-0x14>:
 51c:	push	{lr}		; (str lr, [sp, #-4]!)
 520:	ldr	lr, [pc, #4]	; 52c <calloc@plt-0x4>
 524:	add	lr, pc, lr
 528:	ldr	pc, [lr, #8]!
 52c:	ldrdeq	r1, [r1], -r4

00000530 <calloc@plt>:
 530:	add	ip, pc, #0, 12
 534:	add	ip, ip, #69632	; 0x11000
 538:	ldr	pc, [ip, #2772]!	; 0xad4

0000053c <raise@plt>:
 53c:	add	ip, pc, #0, 12
 540:	add	ip, ip, #69632	; 0x11000
 544:	ldr	pc, [ip, #2764]!	; 0xacc

00000548 <log@plt>:
 548:	add	ip, pc, #0, 12
 54c:	add	ip, ip, #69632	; 0x11000
 550:	ldr	pc, [ip, #2756]!	; 0xac4

00000554 <__cxa_finalize@plt>:
 554:	add	ip, pc, #0, 12
 558:	add	ip, ip, #69632	; 0x11000
 55c:	ldr	pc, [ip, #2748]!	; 0xabc

00000560 <printf@plt>:
 560:	add	ip, pc, #0, 12
 564:	add	ip, ip, #69632	; 0x11000
 568:	ldr	pc, [ip, #2740]!	; 0xab4

0000056c <murmurhash2@plt>:
 56c:	add	ip, pc, #0, 12
 570:	add	ip, ip, #69632	; 0x11000
 574:	ldr	pc, [ip, #2732]!	; 0xaac

00000578 <free@plt>:
 578:	add	ip, pc, #0, 12
 57c:	add	ip, ip, #69632	; 0x11000
 580:	ldr	pc, [ip, #2724]!	; 0xaa4

00000584 <__gmon_start__@plt>:
 584:	add	ip, pc, #0, 12
 588:	add	ip, ip, #69632	; 0x11000
 58c:	ldr	pc, [ip, #2716]!	; 0xa9c

00000590 <memset@plt>:
 590:	add	ip, pc, #0, 12
 594:	add	ip, ip, #69632	; 0x11000
 598:	ldr	pc, [ip, #2708]!	; 0xa94

0000059c <ceil@plt>:
 59c:	add	ip, pc, #0, 12
 5a0:	add	ip, ip, #69632	; 0x11000
 5a4:	ldr	pc, [ip, #2700]!	; 0xa8c

000005a8 <bloom_init@plt>:
 5a8:	add	ip, pc, #0, 12
 5ac:	add	ip, ip, #69632	; 0x11000
 5b0:	ldr	pc, [ip, #2692]!	; 0xa84

Disassembly of section .text:

000005b8 <bloom_init_size@@Base-0x358>:
     5b8:	ldr	r3, [pc, #20]	; 5d4 <bloom_init@plt+0x2c>
     5bc:	ldr	r2, [pc, #20]	; 5d8 <bloom_init@plt+0x30>
     5c0:	add	r3, pc, r3
     5c4:	ldr	r2, [r3, r2]
     5c8:	cmp	r2, #0
     5cc:	bxeq	lr
     5d0:	b	584 <__gmon_start__@plt>
     5d4:	andeq	r1, r1, r8, lsr sl
     5d8:	andeq	r0, r0, r0, asr #32
     5dc:	ldr	r3, [pc, #52]	; 618 <bloom_init@plt+0x70>
     5e0:	ldr	r0, [pc, #52]	; 61c <bloom_init@plt+0x74>
     5e4:	add	r3, pc, r3
     5e8:	add	r0, pc, r0
     5ec:	add	r3, r3, #3
     5f0:	sub	r3, r3, r0
     5f4:	cmp	r3, #6
     5f8:	ldr	r3, [pc, #32]	; 620 <bloom_init@plt+0x78>
     5fc:	add	r3, pc, r3
     600:	bxls	lr
     604:	ldr	r2, [pc, #24]	; 624 <bloom_init@plt+0x7c>
     608:	ldr	r3, [r3, r2]
     60c:	cmp	r3, #0
     610:	bxeq	lr
     614:	bx	r3
     618:	andeq	r1, r1, r4, ror #20
     61c:	andeq	r1, r1, r0, ror #20
     620:	strdeq	r1, [r1], -ip
     624:	andeq	r0, r0, ip, lsr r0
     628:	ldr	r1, [pc, #56]	; 668 <bloom_init@plt+0xc0>
     62c:	ldr	r0, [pc, #56]	; 66c <bloom_init@plt+0xc4>
     630:	add	r1, pc, r1
     634:	add	r0, pc, r0
     638:	sub	r1, r1, r0
     63c:	ldr	r3, [pc, #44]	; 670 <bloom_init@plt+0xc8>
     640:	asr	r1, r1, #2
     644:	add	r3, pc, r3
     648:	add	r1, r1, r1, lsr #31
     64c:	asrs	r1, r1, #1
     650:	bxeq	lr
     654:	ldr	r2, [pc, #24]	; 674 <bloom_init@plt+0xcc>
     658:	ldr	r3, [r3, r2]
     65c:	cmp	r3, #0
     660:	bxeq	lr
     664:	bx	r3
     668:	andeq	r1, r1, r8, lsl sl
     66c:	andeq	r1, r1, r4, lsl sl
     670:			; <UNDEFINED> instruction: 0x000119b4
     674:	andeq	r0, r0, r8, asr #32
     678:	ldr	r3, [pc, #76]	; 6cc <bloom_init@plt+0x124>
     67c:	ldr	r2, [pc, #76]	; 6d0 <bloom_init@plt+0x128>
     680:	add	r3, pc, r3
     684:	add	r2, pc, r2
     688:	ldrb	r3, [r3]
     68c:	cmp	r3, #0
     690:	bxne	lr
     694:	ldr	r3, [pc, #56]	; 6d4 <bloom_init@plt+0x12c>
     698:	push	{r4, lr}
     69c:	ldr	r3, [r2, r3]
     6a0:	cmp	r3, #0
     6a4:	beq	6b4 <bloom_init@plt+0x10c>
     6a8:	ldr	r3, [pc, #40]	; 6d8 <bloom_init@plt+0x130>
     6ac:	ldr	r0, [pc, r3]
     6b0:	bl	554 <__cxa_finalize@plt>
     6b4:	bl	5dc <bloom_init@plt+0x34>
     6b8:	ldr	r3, [pc, #28]	; 6dc <bloom_init@plt+0x134>
     6bc:	mov	r2, #1
     6c0:	add	r3, pc, r3
     6c4:	strb	r2, [r3]
     6c8:	pop	{r4, pc}
     6cc:	andeq	r1, r1, r8, asr #19
     6d0:	andeq	r1, r1, r4, ror r9
     6d4:	andeq	r0, r0, r8, lsr r0
     6d8:	muleq	r1, r8, r9
     6dc:	andeq	r1, r1, r8, lsl #19
     6e0:	ldr	r0, [pc, #56]	; 720 <bloom_init@plt+0x178>
     6e4:	ldr	r3, [pc, #56]	; 724 <bloom_init@plt+0x17c>
     6e8:	add	r0, pc, r0
     6ec:	ldr	r2, [r0]
     6f0:	add	r3, pc, r3
     6f4:	cmp	r2, #0
     6f8:	bne	700 <bloom_init@plt+0x158>
     6fc:	b	628 <bloom_init@plt+0x80>
     700:	ldr	r2, [pc, #32]	; 728 <bloom_init@plt+0x180>
     704:	ldr	r3, [r3, r2]
     708:	cmp	r3, #0
     70c:	beq	6fc <bloom_init@plt+0x154>
     710:	push	{r4, lr}
     714:	blx	r3
     718:	pop	{r4, lr}
     71c:	b	628 <bloom_init@plt+0x80>
     720:	andeq	r1, r1, ip, lsl r8
     724:	andeq	r1, r1, r8, lsl #18
     728:	andeq	r0, r0, r4, asr #32
     72c:	andeq	r0, r0, r0
     730:	push	{fp}		; (str fp, [sp, #-4]!)
     734:	add	fp, sp, #0
     738:	sub	sp, sp, #36	; 0x24
     73c:	str	r0, [fp, #-24]	; 0xffffffe8
     740:	str	r1, [fp, #-28]	; 0xffffffe4
     744:	str	r2, [fp, #-32]	; 0xffffffe0
     748:	ldr	r3, [fp, #-28]	; 0xffffffe4
     74c:	lsr	r3, r3, #3
     750:	str	r3, [fp, #-8]
     754:	ldr	r2, [fp, #-24]	; 0xffffffe8
     758:	ldr	r3, [fp, #-8]
     75c:	add	r3, r2, r3
     760:	ldrb	r3, [r3]
     764:	strb	r3, [fp, #-9]
     768:	ldr	r3, [fp, #-28]	; 0xffffffe4
     76c:	and	r3, r3, #7
     770:	mov	r2, #1
     774:	lsl	r3, r2, r3
     778:	str	r3, [fp, #-16]
     77c:	ldrb	r2, [fp, #-9]
     780:	ldr	r3, [fp, #-16]
     784:	and	r3, r3, r2
     788:	cmp	r3, #0
     78c:	beq	798 <bloom_init@plt+0x1f0>
     790:	mov	r3, #1
     794:	b	7cc <bloom_init@plt+0x224>
     798:	ldr	r3, [fp, #-32]	; 0xffffffe0
     79c:	cmp	r3, #0
     7a0:	beq	7c8 <bloom_init@plt+0x220>
     7a4:	ldr	r2, [fp, #-24]	; 0xffffffe8
     7a8:	ldr	r3, [fp, #-8]
     7ac:	add	r3, r2, r3
     7b0:	ldr	r2, [fp, #-16]
     7b4:	uxtb	r1, r2
     7b8:	ldrb	r2, [fp, #-9]
     7bc:	orr	r2, r1, r2
     7c0:	uxtb	r2, r2
     7c4:	strb	r2, [r3]
     7c8:	mov	r3, #0
     7cc:	mov	r0, r3
     7d0:	add	sp, fp, #0
     7d4:	pop	{fp}		; (ldr fp, [sp], #4)
     7d8:	bx	lr
     7dc:	push	{r4, r5, r6, r7, fp, lr}
     7e0:	add	fp, sp, #20
     7e4:	sub	sp, sp, #24
     7e8:	str	r0, [fp, #-32]	; 0xffffffe0
     7ec:	str	r1, [fp, #-36]	; 0xffffffdc
     7f0:	str	r2, [fp, #-40]	; 0xffffffd8
     7f4:	str	r3, [fp, #-44]	; 0xffffffd4
     7f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     7fc:	ldr	r3, [r3, #44]	; 0x2c
     800:	cmp	r3, #0
     804:	bne	824 <bloom_init@plt+0x27c>
     808:	ldr	r1, [fp, #-32]	; 0xffffffe0
     80c:	ldr	r3, [pc, #244]	; 908 <bloom_init@plt+0x360>
     810:	add	r3, pc, r3
     814:	mov	r0, r3
     818:	bl	560 <printf@plt>
     81c:	mvn	r3, #0
     820:	b	8fc <bloom_init@plt+0x354>
     824:	mov	r3, #0
     828:	str	r3, [fp, #-24]	; 0xffffffe8
     82c:	ldr	r2, [pc, #216]	; 90c <bloom_init@plt+0x364>
     830:	ldr	r1, [fp, #-40]	; 0xffffffd8
     834:	ldr	r0, [fp, #-36]	; 0xffffffdc
     838:	bl	56c <murmurhash2@plt>
     83c:	mov	r5, r0
     840:	mov	r2, r5
     844:	ldr	r1, [fp, #-40]	; 0xffffffd8
     848:	ldr	r0, [fp, #-36]	; 0xffffffdc
     84c:	bl	56c <murmurhash2@plt>
     850:	mov	r6, r0
     854:	mov	r4, #0
     858:	b	8cc <bloom_init@plt+0x324>
     85c:	mul	r3, r6, r4
     860:	add	r2, r3, r5
     864:	ldr	r3, [fp, #-32]	; 0xffffffe0
     868:	ldr	r3, [r3, #16]
     86c:	mov	r1, r3
     870:	mov	r0, r2
     874:	bl	10c4 <murmurhash2@@Base+0x390>
     878:	mov	r3, r1
     87c:	mov	r7, r3
     880:	ldr	r3, [fp, #-32]	; 0xffffffe0
     884:	ldr	r3, [r3, #40]	; 0x28
     888:	ldr	r2, [fp, #-44]	; 0xffffffd4
     88c:	mov	r1, r7
     890:	mov	r0, r3
     894:	bl	730 <bloom_init@plt+0x188>
     898:	mov	r3, r0
     89c:	cmp	r3, #0
     8a0:	beq	8b4 <bloom_init@plt+0x30c>
     8a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     8a8:	add	r3, r3, #1
     8ac:	str	r3, [fp, #-24]	; 0xffffffe8
     8b0:	b	8c8 <bloom_init@plt+0x320>
     8b4:	ldr	r3, [fp, #-44]	; 0xffffffd4
     8b8:	cmp	r3, #0
     8bc:	bne	8c8 <bloom_init@plt+0x320>
     8c0:	mov	r3, #0
     8c4:	b	8fc <bloom_init@plt+0x354>
     8c8:	add	r4, r4, #1
     8cc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     8d0:	ldr	r3, [r3, #24]
     8d4:	cmp	r3, r4
     8d8:	bhi	85c <bloom_init@plt+0x2b4>
     8dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     8e0:	ldr	r2, [r3, #24]
     8e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
     8e8:	cmp	r2, r3
     8ec:	bne	8f8 <bloom_init@plt+0x350>
     8f0:	mov	r3, #1
     8f4:	b	8fc <bloom_init@plt+0x354>
     8f8:	mov	r3, #0
     8fc:	mov	r0, r3
     900:	sub	sp, fp, #20
     904:	pop	{r4, r5, r6, r7, fp, pc}
     908:	andeq	r0, r0, r4, ror #17
     90c:	strbls	fp, [r7, -ip, lsl #5]

00000910 <bloom_init_size@@Base>:
     910:	push	{fp, lr}
     914:	add	fp, sp, #4
     918:	sub	sp, sp, #24
     91c:	str	r0, [fp, #-8]
     920:	str	r1, [fp, #-12]
     924:	vstr	d0, [fp, #-20]	; 0xffffffec
     928:	str	r2, [fp, #-24]	; 0xffffffe8
     92c:	vldr	d0, [fp, #-20]	; 0xffffffec
     930:	ldr	r1, [fp, #-12]
     934:	ldr	r0, [fp, #-8]
     938:	bl	5a8 <bloom_init@plt>
     93c:	mov	r3, r0
     940:	mov	r0, r3
     944:	sub	sp, fp, #4
     948:	pop	{fp, pc}

0000094c <bloom_init@@Base>:
     94c:	push	{fp, lr}
     950:	add	fp, sp, #4
     954:	sub	sp, sp, #40	; 0x28
     958:	str	r0, [fp, #-32]	; 0xffffffe0
     95c:	str	r1, [fp, #-36]	; 0xffffffdc
     960:	vstr	d0, [fp, #-44]	; 0xffffffd4
     964:	ldr	r3, [fp, #-32]	; 0xffffffe0
     968:	mov	r2, #0
     96c:	str	r2, [r3, #44]	; 0x2c
     970:	ldr	r3, [fp, #-36]	; 0xffffffdc
     974:	cmp	r3, #1000	; 0x3e8
     978:	blt	98c <bloom_init@@Base+0x40>
     97c:	vldr	d7, [fp, #-44]	; 0xffffffd4
     980:	vcmp.f64	d7, #0.0
     984:	vmrs	APSR_nzcv, fpscr
     988:	bne	994 <bloom_init@@Base+0x48>
     98c:	mov	r3, #1
     990:	b	af4 <bloom_init@@Base+0x1a8>
     994:	ldr	r3, [fp, #-32]	; 0xffffffe0
     998:	ldr	r2, [fp, #-36]	; 0xffffffdc
     99c:	str	r2, [r3]
     9a0:	ldr	r1, [fp, #-32]	; 0xffffffe0
     9a4:	ldrd	r2, [fp, #-44]	; 0xffffffd4
     9a8:	strd	r2, [r1, #8]
     9ac:	ldr	r3, [fp, #-32]	; 0xffffffe0
     9b0:	vldr	d7, [r3, #8]
     9b4:	vmov.f64	d0, d7
     9b8:	bl	548 <log@plt>
     9bc:	vstr	d0, [fp, #-12]
     9c0:	ldr	r2, [pc, #320]	; b08 <bloom_init@@Base+0x1bc>
     9c4:	ldr	r3, [pc, #320]	; b0c <bloom_init@@Base+0x1c0>
     9c8:	strd	r2, [fp, #-20]	; 0xffffffec
     9cc:	vldr	d5, [fp, #-12]
     9d0:	vldr	d6, [fp, #-20]	; 0xffffffec
     9d4:	vdiv.f64	d7, d5, d6
     9d8:	vneg.f64	d7, d7
     9dc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     9e0:	vstr	d7, [r3, #32]
     9e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     9e8:	vmov	s15, r3
     9ec:	vcvt.f64.s32	d7, s15
     9f0:	vstr	d7, [fp, #-28]	; 0xffffffe4
     9f4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     9f8:	vldr	d6, [r3, #32]
     9fc:	vldr	d7, [fp, #-28]	; 0xffffffe4
     a00:	vmul.f64	d7, d6, d7
     a04:	vcvt.s32.f64	s15, d7
     a08:	vmov	r2, s15
     a0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a10:	str	r2, [r3, #16]
     a14:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a18:	ldr	r3, [r3, #16]
     a1c:	and	r3, r3, #7
     a20:	cmp	r3, #0
     a24:	beq	a54 <bloom_init@@Base+0x108>
     a28:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a2c:	ldr	r3, [r3, #16]
     a30:	add	r2, r3, #7
     a34:	cmp	r3, #0
     a38:	movlt	r3, r2
     a3c:	movge	r3, r3
     a40:	asr	r3, r3, #3
     a44:	add	r2, r3, #1
     a48:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a4c:	str	r2, [r3, #20]
     a50:	b	a7c <bloom_init@@Base+0x130>
     a54:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a58:	ldr	r3, [r3, #16]
     a5c:	add	r2, r3, #7
     a60:	cmp	r3, #0
     a64:	movlt	r3, r2
     a68:	movge	r3, r3
     a6c:	asr	r3, r3, #3
     a70:	mov	r2, r3
     a74:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a78:	str	r2, [r3, #20]
     a7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     a80:	vldr	d7, [r3, #32]
     a84:	vldr	d6, [pc, #116]	; b00 <bloom_init@@Base+0x1b4>
     a88:	vmul.f64	d7, d7, d6
     a8c:	vmov.f64	d0, d7
     a90:	bl	59c <ceil@plt>
     a94:	vmov.f64	d7, d0
     a98:	vcvt.s32.f64	s15, d7
     a9c:	vmov	r2, s15
     aa0:	ldr	r3, [fp, #-32]	; 0xffffffe0
     aa4:	str	r2, [r3, #24]
     aa8:	ldr	r3, [fp, #-32]	; 0xffffffe0
     aac:	ldr	r3, [r3, #20]
     ab0:	mov	r1, #1
     ab4:	mov	r0, r3
     ab8:	bl	530 <calloc@plt>
     abc:	mov	r3, r0
     ac0:	mov	r2, r3
     ac4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     ac8:	str	r2, [r3, #40]	; 0x28
     acc:	ldr	r3, [fp, #-32]	; 0xffffffe0
     ad0:	ldr	r3, [r3, #40]	; 0x28
     ad4:	cmp	r3, #0
     ad8:	bne	ae4 <bloom_init@@Base+0x198>
     adc:	mov	r3, #1
     ae0:	b	af4 <bloom_init@@Base+0x1a8>
     ae4:	ldr	r3, [fp, #-32]	; 0xffffffe0
     ae8:	mov	r2, #1
     aec:	str	r2, [r3, #44]	; 0x2c
     af0:	mov	r3, #0
     af4:	mov	r0, r3
     af8:	sub	sp, fp, #4
     afc:	pop	{fp, pc}
     b00:			; <UNDEFINED> instruction: 0xfefa39ec
     b04:	svccc	0x00e62e42
     b08:			; <UNDEFINED> instruction: 0xff82c587
     b0c:	svccc	0x00debfbd

00000b10 <bloom_check@@Base>:
     b10:	push	{fp, lr}
     b14:	add	fp, sp, #4
     b18:	sub	sp, sp, #16
     b1c:	str	r0, [fp, #-8]
     b20:	str	r1, [fp, #-12]
     b24:	str	r2, [fp, #-16]
     b28:	mov	r3, #0
     b2c:	ldr	r2, [fp, #-16]
     b30:	ldr	r1, [fp, #-12]
     b34:	ldr	r0, [fp, #-8]
     b38:	bl	7dc <bloom_init@plt+0x234>
     b3c:	mov	r3, r0
     b40:	mov	r0, r3
     b44:	sub	sp, fp, #4
     b48:	pop	{fp, pc}

00000b4c <bloom_add@@Base>:
     b4c:	push	{fp, lr}
     b50:	add	fp, sp, #4
     b54:	sub	sp, sp, #16
     b58:	str	r0, [fp, #-8]
     b5c:	str	r1, [fp, #-12]
     b60:	str	r2, [fp, #-16]
     b64:	mov	r3, #1
     b68:	ldr	r2, [fp, #-16]
     b6c:	ldr	r1, [fp, #-12]
     b70:	ldr	r0, [fp, #-8]
     b74:	bl	7dc <bloom_init@plt+0x234>
     b78:	mov	r3, r0
     b7c:	mov	r0, r3
     b80:	sub	sp, fp, #4
     b84:	pop	{fp, pc}

00000b88 <bloom_print@@Base>:
     b88:	push	{fp, lr}
     b8c:	add	fp, sp, #4
     b90:	sub	sp, sp, #8
     b94:	str	r0, [fp, #-8]
     b98:	ldr	r1, [fp, #-8]
     b9c:	ldr	r3, [pc, #180]	; c58 <bloom_print@@Base+0xd0>
     ba0:	add	r3, pc, r3
     ba4:	mov	r0, r3
     ba8:	bl	560 <printf@plt>
     bac:	ldr	r3, [fp, #-8]
     bb0:	ldr	r3, [r3]
     bb4:	mov	r1, r3
     bb8:	ldr	r3, [pc, #156]	; c5c <bloom_print@@Base+0xd4>
     bbc:	add	r3, pc, r3
     bc0:	mov	r0, r3
     bc4:	bl	560 <printf@plt>
     bc8:	ldr	r3, [fp, #-8]
     bcc:	ldrd	r2, [r3, #8]
     bd0:	ldr	r1, [pc, #136]	; c60 <bloom_print@@Base+0xd8>
     bd4:	add	r1, pc, r1
     bd8:	mov	r0, r1
     bdc:	bl	560 <printf@plt>
     be0:	ldr	r3, [fp, #-8]
     be4:	ldr	r3, [r3, #16]
     be8:	mov	r1, r3
     bec:	ldr	r3, [pc, #112]	; c64 <bloom_print@@Base+0xdc>
     bf0:	add	r3, pc, r3
     bf4:	mov	r0, r3
     bf8:	bl	560 <printf@plt>
     bfc:	ldr	r3, [fp, #-8]
     c00:	ldrd	r2, [r3, #32]
     c04:	ldr	r1, [pc, #92]	; c68 <bloom_print@@Base+0xe0>
     c08:	add	r1, pc, r1
     c0c:	mov	r0, r1
     c10:	bl	560 <printf@plt>
     c14:	ldr	r3, [fp, #-8]
     c18:	ldr	r3, [r3, #20]
     c1c:	mov	r1, r3
     c20:	ldr	r3, [pc, #68]	; c6c <bloom_print@@Base+0xe4>
     c24:	add	r3, pc, r3
     c28:	mov	r0, r3
     c2c:	bl	560 <printf@plt>
     c30:	ldr	r3, [fp, #-8]
     c34:	ldr	r3, [r3, #24]
     c38:	mov	r1, r3
     c3c:	ldr	r3, [pc, #44]	; c70 <bloom_print@@Base+0xe8>
     c40:	add	r3, pc, r3
     c44:	mov	r0, r3
     c48:	bl	560 <printf@plt>
     c4c:	nop			; (mov r0, r0)
     c50:	sub	sp, fp, #4
     c54:	pop	{fp, pc}
     c58:	andeq	r0, r0, r4, ror r5
     c5c:	andeq	r0, r0, r8, ror #10
     c60:	andeq	r0, r0, r4, ror #10
     c64:	andeq	r0, r0, r8, asr r5
     c68:	andeq	r0, r0, r0, asr r5
     c6c:	andeq	r0, r0, ip, asr #10
     c70:	andeq	r0, r0, r0, asr #10

00000c74 <bloom_free@@Base>:
     c74:	push	{fp, lr}
     c78:	add	fp, sp, #4
     c7c:	sub	sp, sp, #8
     c80:	str	r0, [fp, #-8]
     c84:	ldr	r3, [fp, #-8]
     c88:	ldr	r3, [r3, #44]	; 0x2c
     c8c:	cmp	r3, #0
     c90:	beq	ca4 <bloom_free@@Base+0x30>
     c94:	ldr	r3, [fp, #-8]
     c98:	ldr	r3, [r3, #40]	; 0x28
     c9c:	mov	r0, r3
     ca0:	bl	578 <free@plt>
     ca4:	ldr	r3, [fp, #-8]
     ca8:	mov	r2, #0
     cac:	str	r2, [r3, #44]	; 0x2c
     cb0:	nop			; (mov r0, r0)
     cb4:	sub	sp, fp, #4
     cb8:	pop	{fp, pc}

00000cbc <bloom_reset@@Base>:
     cbc:	push	{fp, lr}
     cc0:	add	fp, sp, #4
     cc4:	sub	sp, sp, #8
     cc8:	str	r0, [fp, #-8]
     ccc:	ldr	r3, [fp, #-8]
     cd0:	ldr	r3, [r3, #44]	; 0x2c
     cd4:	cmp	r3, #0
     cd8:	bne	ce4 <bloom_reset@@Base+0x28>
     cdc:	mov	r3, #1
     ce0:	b	d04 <bloom_reset@@Base+0x48>
     ce4:	ldr	r3, [fp, #-8]
     ce8:	ldr	r0, [r3, #40]	; 0x28
     cec:	ldr	r3, [fp, #-8]
     cf0:	ldr	r3, [r3, #20]
     cf4:	mov	r2, r3
     cf8:	mov	r1, #0
     cfc:	bl	590 <memset@plt>
     d00:	mov	r3, #0
     d04:	mov	r0, r3
     d08:	sub	sp, fp, #4
     d0c:	pop	{fp, pc}

00000d10 <bloom_version@@Base>:
     d10:	push	{fp}		; (str fp, [sp, #-4]!)
     d14:	add	fp, sp, #0
     d18:	ldr	r3, [pc, #16]	; d30 <bloom_version@@Base+0x20>
     d1c:	add	r3, pc, r3
     d20:	mov	r0, r3
     d24:	add	sp, fp, #0
     d28:	pop	{fp}		; (ldr fp, [sp], #4)
     d2c:	bx	lr
     d30:	andeq	r0, r0, ip, ror r4

00000d34 <murmurhash2@@Base>:
     d34:	push	{fp}		; (str fp, [sp, #-4]!)
     d38:	add	fp, sp, #0
     d3c:	sub	sp, sp, #44	; 0x2c
     d40:	str	r0, [fp, #-32]	; 0xffffffe0
     d44:	str	r1, [fp, #-36]	; 0xffffffdc
     d48:	str	r2, [fp, #-40]	; 0xffffffd8
     d4c:	ldr	r3, [pc, #384]	; ed4 <murmurhash2@@Base+0x1a0>
     d50:	str	r3, [fp, #-16]
     d54:	mov	r3, #24
     d58:	str	r3, [fp, #-20]	; 0xffffffec
     d5c:	ldr	r3, [fp, #-36]	; 0xffffffdc
     d60:	ldr	r2, [fp, #-40]	; 0xffffffd8
     d64:	eor	r3, r3, r2
     d68:	str	r3, [fp, #-8]
     d6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
     d70:	str	r3, [fp, #-12]
     d74:	b	df4 <murmurhash2@@Base+0xc0>
     d78:	ldr	r3, [fp, #-12]
     d7c:	ldr	r3, [r3]
     d80:	str	r3, [fp, #-24]	; 0xffffffe8
     d84:	ldr	r3, [fp, #-24]	; 0xffffffe8
     d88:	ldr	r2, [fp, #-16]
     d8c:	mul	r3, r2, r3
     d90:	str	r3, [fp, #-24]	; 0xffffffe8
     d94:	ldr	r2, [fp, #-24]	; 0xffffffe8
     d98:	ldr	r3, [fp, #-20]	; 0xffffffec
     d9c:	lsr	r3, r2, r3
     da0:	ldr	r2, [fp, #-24]	; 0xffffffe8
     da4:	eor	r3, r3, r2
     da8:	str	r3, [fp, #-24]	; 0xffffffe8
     dac:	ldr	r3, [fp, #-24]	; 0xffffffe8
     db0:	ldr	r2, [fp, #-16]
     db4:	mul	r3, r2, r3
     db8:	str	r3, [fp, #-24]	; 0xffffffe8
     dbc:	ldr	r3, [fp, #-8]
     dc0:	ldr	r2, [fp, #-16]
     dc4:	mul	r3, r2, r3
     dc8:	str	r3, [fp, #-8]
     dcc:	ldr	r2, [fp, #-8]
     dd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
     dd4:	eor	r3, r3, r2
     dd8:	str	r3, [fp, #-8]
     ddc:	ldr	r3, [fp, #-12]
     de0:	add	r3, r3, #4
     de4:	str	r3, [fp, #-12]
     de8:	ldr	r3, [fp, #-36]	; 0xffffffdc
     dec:	sub	r3, r3, #4
     df0:	str	r3, [fp, #-36]	; 0xffffffdc
     df4:	ldr	r3, [fp, #-36]	; 0xffffffdc
     df8:	cmp	r3, #3
     dfc:	bgt	d78 <murmurhash2@@Base+0x44>
     e00:	ldr	r3, [fp, #-36]	; 0xffffffdc
     e04:	cmp	r3, #2
     e08:	beq	e40 <murmurhash2@@Base+0x10c>
     e0c:	cmp	r3, #3
     e10:	beq	e20 <murmurhash2@@Base+0xec>
     e14:	cmp	r3, #1
     e18:	beq	e60 <murmurhash2@@Base+0x12c>
     e1c:	b	e88 <murmurhash2@@Base+0x154>
     e20:	ldr	r3, [fp, #-12]
     e24:	add	r3, r3, #2
     e28:	ldrb	r3, [r3]
     e2c:	lsl	r3, r3, #16
     e30:	mov	r2, r3
     e34:	ldr	r3, [fp, #-8]
     e38:	eor	r3, r3, r2
     e3c:	str	r3, [fp, #-8]
     e40:	ldr	r3, [fp, #-12]
     e44:	add	r3, r3, #1
     e48:	ldrb	r3, [r3]
     e4c:	lsl	r3, r3, #8
     e50:	mov	r2, r3
     e54:	ldr	r3, [fp, #-8]
     e58:	eor	r3, r3, r2
     e5c:	str	r3, [fp, #-8]
     e60:	ldr	r3, [fp, #-12]
     e64:	ldrb	r3, [r3]
     e68:	mov	r2, r3
     e6c:	ldr	r3, [fp, #-8]
     e70:	eor	r3, r3, r2
     e74:	str	r3, [fp, #-8]
     e78:	ldr	r3, [fp, #-8]
     e7c:	ldr	r2, [fp, #-16]
     e80:	mul	r3, r2, r3
     e84:	str	r3, [fp, #-8]
     e88:	ldr	r3, [fp, #-8]
     e8c:	lsr	r3, r3, #13
     e90:	ldr	r2, [fp, #-8]
     e94:	eor	r3, r3, r2
     e98:	str	r3, [fp, #-8]
     e9c:	ldr	r3, [fp, #-8]
     ea0:	ldr	r2, [fp, #-16]
     ea4:	mul	r3, r2, r3
     ea8:	str	r3, [fp, #-8]
     eac:	ldr	r3, [fp, #-8]
     eb0:	lsr	r3, r3, #15
     eb4:	ldr	r2, [fp, #-8]
     eb8:	eor	r3, r3, r2
     ebc:	str	r3, [fp, #-8]
     ec0:	ldr	r3, [fp, #-8]
     ec4:	mov	r0, r3
     ec8:	add	sp, fp, #0
     ecc:	pop	{fp}		; (ldr fp, [sp], #4)
     ed0:	bx	lr
     ed4:	blpl	ff47b530 <murmurhash2@@Base+0xff47a7fc>
     ed8:	subs	r2, r1, #1
     edc:	bxeq	lr
     ee0:	bcc	10b8 <murmurhash2@@Base+0x384>
     ee4:	cmp	r0, r1
     ee8:	bls	109c <murmurhash2@@Base+0x368>
     eec:	tst	r1, r2
     ef0:	beq	10a8 <murmurhash2@@Base+0x374>
     ef4:	clz	r3, r0
     ef8:	clz	r2, r1
     efc:	sub	r3, r2, r3
     f00:	rsbs	r3, r3, #31
     f04:	addne	r3, r3, r3, lsl #1
     f08:	mov	r2, #0
     f0c:	addne	pc, pc, r3, lsl #2
     f10:	nop			; (mov r0, r0)
     f14:	cmp	r0, r1, lsl #31
     f18:	adc	r2, r2, r2
     f1c:	subcs	r0, r0, r1, lsl #31
     f20:	cmp	r0, r1, lsl #30
     f24:	adc	r2, r2, r2
     f28:	subcs	r0, r0, r1, lsl #30
     f2c:	cmp	r0, r1, lsl #29
     f30:	adc	r2, r2, r2
     f34:	subcs	r0, r0, r1, lsl #29
     f38:	cmp	r0, r1, lsl #28
     f3c:	adc	r2, r2, r2
     f40:	subcs	r0, r0, r1, lsl #28
     f44:	cmp	r0, r1, lsl #27
     f48:	adc	r2, r2, r2
     f4c:	subcs	r0, r0, r1, lsl #27
     f50:	cmp	r0, r1, lsl #26
     f54:	adc	r2, r2, r2
     f58:	subcs	r0, r0, r1, lsl #26
     f5c:	cmp	r0, r1, lsl #25
     f60:	adc	r2, r2, r2
     f64:	subcs	r0, r0, r1, lsl #25
     f68:	cmp	r0, r1, lsl #24
     f6c:	adc	r2, r2, r2
     f70:	subcs	r0, r0, r1, lsl #24
     f74:	cmp	r0, r1, lsl #23
     f78:	adc	r2, r2, r2
     f7c:	subcs	r0, r0, r1, lsl #23
     f80:	cmp	r0, r1, lsl #22
     f84:	adc	r2, r2, r2
     f88:	subcs	r0, r0, r1, lsl #22
     f8c:	cmp	r0, r1, lsl #21
     f90:	adc	r2, r2, r2
     f94:	subcs	r0, r0, r1, lsl #21
     f98:	cmp	r0, r1, lsl #20
     f9c:	adc	r2, r2, r2
     fa0:	subcs	r0, r0, r1, lsl #20
     fa4:	cmp	r0, r1, lsl #19
     fa8:	adc	r2, r2, r2
     fac:	subcs	r0, r0, r1, lsl #19
     fb0:	cmp	r0, r1, lsl #18
     fb4:	adc	r2, r2, r2
     fb8:	subcs	r0, r0, r1, lsl #18
     fbc:	cmp	r0, r1, lsl #17
     fc0:	adc	r2, r2, r2
     fc4:	subcs	r0, r0, r1, lsl #17
     fc8:	cmp	r0, r1, lsl #16
     fcc:	adc	r2, r2, r2
     fd0:	subcs	r0, r0, r1, lsl #16
     fd4:	cmp	r0, r1, lsl #15
     fd8:	adc	r2, r2, r2
     fdc:	subcs	r0, r0, r1, lsl #15
     fe0:	cmp	r0, r1, lsl #14
     fe4:	adc	r2, r2, r2
     fe8:	subcs	r0, r0, r1, lsl #14
     fec:	cmp	r0, r1, lsl #13
     ff0:	adc	r2, r2, r2
     ff4:	subcs	r0, r0, r1, lsl #13
     ff8:	cmp	r0, r1, lsl #12
     ffc:	adc	r2, r2, r2
    1000:	subcs	r0, r0, r1, lsl #12
    1004:	cmp	r0, r1, lsl #11
    1008:	adc	r2, r2, r2
    100c:	subcs	r0, r0, r1, lsl #11
    1010:	cmp	r0, r1, lsl #10
    1014:	adc	r2, r2, r2
    1018:	subcs	r0, r0, r1, lsl #10
    101c:	cmp	r0, r1, lsl #9
    1020:	adc	r2, r2, r2
    1024:	subcs	r0, r0, r1, lsl #9
    1028:	cmp	r0, r1, lsl #8
    102c:	adc	r2, r2, r2
    1030:	subcs	r0, r0, r1, lsl #8
    1034:	cmp	r0, r1, lsl #7
    1038:	adc	r2, r2, r2
    103c:	subcs	r0, r0, r1, lsl #7
    1040:	cmp	r0, r1, lsl #6
    1044:	adc	r2, r2, r2
    1048:	subcs	r0, r0, r1, lsl #6
    104c:	cmp	r0, r1, lsl #5
    1050:	adc	r2, r2, r2
    1054:	subcs	r0, r0, r1, lsl #5
    1058:	cmp	r0, r1, lsl #4
    105c:	adc	r2, r2, r2
    1060:	subcs	r0, r0, r1, lsl #4
    1064:	cmp	r0, r1, lsl #3
    1068:	adc	r2, r2, r2
    106c:	subcs	r0, r0, r1, lsl #3
    1070:	cmp	r0, r1, lsl #2
    1074:	adc	r2, r2, r2
    1078:	subcs	r0, r0, r1, lsl #2
    107c:	cmp	r0, r1, lsl #1
    1080:	adc	r2, r2, r2
    1084:	subcs	r0, r0, r1, lsl #1
    1088:	cmp	r0, r1
    108c:	adc	r2, r2, r2
    1090:	subcs	r0, r0, r1
    1094:	mov	r0, r2
    1098:	bx	lr
    109c:	moveq	r0, #1
    10a0:	movne	r0, #0
    10a4:	bx	lr
    10a8:	clz	r2, r1
    10ac:	rsb	r2, r2, #31
    10b0:	lsr	r0, r0, r2
    10b4:	bx	lr
    10b8:	cmp	r0, #0
    10bc:	mvnne	r0, #0
    10c0:	b	10e4 <murmurhash2@@Base+0x3b0>
    10c4:	cmp	r1, #0
    10c8:	beq	10b8 <murmurhash2@@Base+0x384>
    10cc:	push	{r0, r1, lr}
    10d0:	bl	ed8 <murmurhash2@@Base+0x1a4>
    10d4:	pop	{r1, r2, lr}
    10d8:	mul	r3, r2, r0
    10dc:	sub	r1, r1, r3
    10e0:	bx	lr
    10e4:	push	{r1, lr}
    10e8:	mov	r0, #8
    10ec:	bl	53c <raise@plt>
    10f0:	pop	{r1, pc}

Disassembly of section .fini:

000010f4 <.fini>:
    10f4:	push	{r3, lr}
    10f8:	pop	{r3, pc}
