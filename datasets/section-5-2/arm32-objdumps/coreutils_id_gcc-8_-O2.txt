
../repos/coreutils/src/id:     file format elf32-littlearm


Disassembly of section .init:

00010e80 <.init>:
   10e80:	push	{r3, lr}
   10e84:	bl	11820 <__assert_fail@plt+0x6a4>
   10e88:	pop	{r3, pc}

Disassembly of section .plt:

00010e8c <calloc@plt-0x14>:
   10e8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e90:	ldr	lr, [pc, #4]	; 10e9c <calloc@plt-0x4>
   10e94:	add	lr, pc, lr
   10e98:	ldr	pc, [lr, #8]!
   10e9c:	andeq	r7, r1, r4, ror #2

00010ea0 <calloc@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #356]!	; 0x164

00010eac <endgrent@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #348]!	; 0x15c

00010eb8 <fputs_unlocked@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #340]!	; 0x154

00010ec4 <raise@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #332]!	; 0x14c

00010ed0 <getpwnam@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #324]!	; 0x144

00010edc <is_selinux_enabled@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #316]!	; 0x13c

00010ee8 <strcmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #308]!	; 0x134

00010ef4 <getpwuid@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #300]!	; 0x12c

00010f00 <fflush@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #292]!	; 0x124

00010f0c <getuid@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #284]!	; 0x11c

00010f18 <free@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #276]!	; 0x114

00010f24 <_exit@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #268]!	; 0x10c

00010f30 <memcpy@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #260]!	; 0x104

00010f3c <mbsinit@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #252]!	; 0xfc

00010f48 <memcmp@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #244]!	; 0xf4

00010f54 <fputc_unlocked@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #236]!	; 0xec

00010f60 <dcgettext@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #228]!	; 0xe4

00010f6c <realloc@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #220]!	; 0xdc

00010f78 <textdomain@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #212]!	; 0xd4

00010f84 <geteuid@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #204]!	; 0xcc

00010f90 <iswprint@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #196]!	; 0xc4

00010f9c <getegid@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #188]!	; 0xbc

00010fa8 <fwrite@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #180]!	; 0xb4

00010fb4 <lseek64@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #172]!	; 0xac

00010fc0 <__ctype_get_mb_cur_max@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #164]!	; 0xa4

00010fcc <getcon@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #156]!	; 0x9c

00010fd8 <__fpending@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #148]!	; 0x94

00010fe4 <mbrtowc@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #140]!	; 0x8c

00010ff0 <error@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #132]!	; 0x84

00010ffc <getenv@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #124]!	; 0x7c

00011008 <malloc@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #116]!	; 0x74

00011014 <__libc_start_main@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #108]!	; 0x6c

00011020 <__freading@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #100]!	; 0x64

0001102c <__gmon_start__@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #92]!	; 0x5c

00011038 <getopt_long@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #84]!	; 0x54

00011044 <__ctype_b_loc@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #76]!	; 0x4c

00011050 <exit@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #68]!	; 0x44

0001105c <strtoul@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #60]!	; 0x3c

00011068 <strlen@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #52]!	; 0x34

00011074 <strchr@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #44]!	; 0x2c

00011080 <__errno_location@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #36]!	; 0x24

0001108c <__cxa_atexit@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #28]!

00011098 <getgid@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #20]!

000110a4 <getgrouplist@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #12]!

000110b0 <memset@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #94208	; 0x17000
   110b8:	ldr	pc, [ip, #4]!

000110bc <__printf_chk@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #4092]!	; 0xffc

000110c8 <fileno@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #4084]!	; 0xff4

000110d4 <__fprintf_chk@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #4076]!	; 0xfec

000110e0 <fclose@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110ec <fseeko64@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4060]!	; 0xfdc

000110f8 <__overflow@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #4052]!	; 0xfd4

00011104 <setlocale@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011110 <endpwent@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #4036]!	; 0xfc4

0001111c <strrchr@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #4028]!	; 0xfbc

00011128 <nl_langinfo@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #4020]!	; 0xfb4

00011134 <getgroups@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #4012]!	; 0xfac

00011140 <bindtextdomain@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #4004]!	; 0xfa4

0001114c <strncmp@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3996]!	; 0xf9c

00011158 <abort@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #90112	; 0x16000
   11160:	ldr	pc, [ip, #3988]!	; 0xf94

00011164 <getgrgid@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #90112	; 0x16000
   1116c:	ldr	pc, [ip, #3980]!	; 0xf8c

00011170 <getgrnam@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #90112	; 0x16000
   11178:	ldr	pc, [ip, #3972]!	; 0xf84

0001117c <__assert_fail@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #90112	; 0x16000
   11184:	ldr	pc, [ip, #3964]!	; 0xf7c

Disassembly of section .text:

00011188 <.text>:
   11188:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1118c:	mov	r4, r1
   11190:	mov	r5, r0
   11194:	strd	r6, [sp, #8]
   11198:	movw	r7, #27860	; 0x6cd4
   1119c:	movt	r7, #1
   111a0:	strd	r8, [sp, #16]
   111a4:	movw	r9, #33148	; 0x817c
   111a8:	movt	r9, #2
   111ac:	strd	sl, [sp, #24]
   111b0:	str	lr, [sp, #32]
   111b4:	sub	sp, sp, #28
   111b8:	bl	10edc <is_selinux_enabled@plt>
   111bc:	mov	r8, r0
   111c0:	ldr	r0, [r4]
   111c4:	bl	12628 <__assert_fail@plt+0x14ac>
   111c8:	movw	r1, #26700	; 0x684c
   111cc:	movt	r1, #1
   111d0:	ldr	sl, [pc, #1536]	; 117d8 <__assert_fail@plt+0x65c>
   111d4:	mov	r0, #6
   111d8:	bl	11104 <setlocale@plt>
   111dc:	movw	r1, #27748	; 0x6c64
   111e0:	movt	r1, #1
   111e4:	movw	r0, #27580	; 0x6bbc
   111e8:	movt	r0, #1
   111ec:	bl	11140 <bindtextdomain@plt>
   111f0:	movw	r0, #27580	; 0x6bbc
   111f4:	movt	r0, #1
   111f8:	bl	10f78 <textdomain@plt>
   111fc:	movw	r0, #9316	; 0x2464
   11200:	movt	r0, #1
   11204:	bl	16648 <__assert_fail@plt+0x54cc>
   11208:	mov	r6, #0
   1120c:	mov	r3, sl
   11210:	mov	r2, r7
   11214:	str	r6, [sp]
   11218:	mov	r1, r4
   1121c:	mov	r0, r5
   11220:	bl	11038 <getopt_long@plt>
   11224:	cmn	r0, #1
   11228:	beq	11334 <__assert_fail@plt+0x1b8>
   1122c:	cmp	r0, #97	; 0x61
   11230:	beq	1120c <__assert_fail@plt+0x90>
   11234:	ble	1125c <__assert_fail@plt+0xe0>
   11238:	cmp	r0, #114	; 0x72
   1123c:	beq	11328 <__assert_fail@plt+0x1ac>
   11240:	bgt	11300 <__assert_fail@plt+0x184>
   11244:	cmp	r0, #103	; 0x67
   11248:	bne	1127c <__assert_fail@plt+0x100>
   1124c:	mov	r3, #1
   11250:	mov	r6, #0
   11254:	strb	r3, [r9, #37]	; 0x25
   11258:	b	1120c <__assert_fail@plt+0x90>
   1125c:	cmn	r0, #2
   11260:	beq	1177c <__assert_fail@plt+0x600>
   11264:	ble	112ac <__assert_fail@plt+0x130>
   11268:	cmp	r0, #71	; 0x47
   1126c:	bne	11290 <__assert_fail@plt+0x114>
   11270:	mov	r3, #1
   11274:	strb	r3, [r9, #48]	; 0x30
   11278:	b	11208 <__assert_fail@plt+0x8c>
   1127c:	cmp	r0, #110	; 0x6e
   11280:	bne	11774 <__assert_fail@plt+0x5f8>
   11284:	mov	r3, #1
   11288:	strb	r3, [r9, #12]
   1128c:	b	11208 <__assert_fail@plt+0x8c>
   11290:	cmp	r0, #90	; 0x5a
   11294:	bne	11774 <__assert_fail@plt+0x5f8>
   11298:	cmp	r8, #0
   1129c:	ble	11790 <__assert_fail@plt+0x614>
   112a0:	mov	r3, #1
   112a4:	strb	r3, [r9, #50]	; 0x32
   112a8:	b	11208 <__assert_fail@plt+0x8c>
   112ac:	cmn	r0, #3
   112b0:	bne	11774 <__assert_fail@plt+0x5f8>
   112b4:	movw	r1, #27828	; 0x6cb4
   112b8:	movt	r1, #1
   112bc:	movw	r2, #27844	; 0x6cc4
   112c0:	movt	r2, #1
   112c4:	movw	r3, #33044	; 0x8114
   112c8:	movt	r3, #2
   112cc:	movw	r0, #33140	; 0x8174
   112d0:	movt	r0, #2
   112d4:	str	r2, [sp]
   112d8:	movw	r2, #27576	; 0x6bb8
   112dc:	movt	r2, #1
   112e0:	stmib	sp, {r1, r6}
   112e4:	movw	r1, #26624	; 0x6800
   112e8:	movt	r1, #1
   112ec:	ldr	r0, [r0]
   112f0:	ldr	r3, [r3]
   112f4:	bl	151b4 <__assert_fail@plt+0x4038>
   112f8:	mov	r0, #0
   112fc:	bl	11050 <exit@plt>
   11300:	cmp	r0, #117	; 0x75
   11304:	bne	11314 <__assert_fail@plt+0x198>
   11308:	mov	r3, #1
   1130c:	strb	r3, [r9]
   11310:	b	11208 <__assert_fail@plt+0x8c>
   11314:	cmp	r0, #122	; 0x7a
   11318:	bne	11774 <__assert_fail@plt+0x5f8>
   1131c:	mov	r3, #1
   11320:	strb	r3, [r9, #49]	; 0x31
   11324:	b	11208 <__assert_fail@plt+0x8c>
   11328:	mov	r3, #1
   1132c:	strb	r3, [r9, #1]
   11330:	b	11208 <__assert_fail@plt+0x8c>
   11334:	movw	r6, #33128	; 0x8168
   11338:	movt	r6, #2
   1133c:	ldr	r2, [r6]
   11340:	movw	r7, #33148	; 0x817c
   11344:	movt	r7, #2
   11348:	ldrb	ip, [r7, #50]	; 0x32
   1134c:	subs	r5, r5, r2
   11350:	beq	1135c <__assert_fail@plt+0x1e0>
   11354:	cmp	ip, #0
   11358:	bne	117c0 <__assert_fail@plt+0x644>
   1135c:	ldrb	r1, [r7, #37]	; 0x25
   11360:	ldrb	r0, [r7]
   11364:	ldrb	lr, [r7, #48]	; 0x30
   11368:	add	r3, r0, r1
   1136c:	add	r3, r3, lr
   11370:	add	r3, r3, ip
   11374:	cmp	r3, #1
   11378:	movwgt	r1, #27924	; 0x6d14
   1137c:	movtgt	r1, #1
   11380:	bgt	113d0 <__assert_fail@plt+0x254>
   11384:	orr	r0, r0, ip
   11388:	orr	r1, r1, r0
   1138c:	orrs	r3, lr, r1
   11390:	beq	11454 <__assert_fail@plt+0x2d8>
   11394:	cmp	r5, #0
   11398:	bne	11488 <__assert_fail@plt+0x30c>
   1139c:	cmp	ip, #0
   113a0:	beq	113ec <__assert_fail@plt+0x270>
   113a4:	cmp	r8, #0
   113a8:	ble	113ec <__assert_fail@plt+0x270>
   113ac:	ldr	r0, [pc, #1064]	; 117dc <__assert_fail@plt+0x660>
   113b0:	bl	10fcc <getcon@plt>
   113b4:	cmp	r0, #0
   113b8:	beq	113ec <__assert_fail@plt+0x270>
   113bc:	ldrb	r3, [r7, #50]	; 0x32
   113c0:	cmp	r3, #0
   113c4:	movwne	r1, #28088	; 0x6db8
   113c8:	movtne	r1, #1
   113cc:	beq	113ec <__assert_fail@plt+0x270>
   113d0:	mov	r2, #5
   113d4:	mov	r0, #0
   113d8:	bl	10f60 <dcgettext@plt>
   113dc:	mov	r2, r0
   113e0:	mov	r1, #0
   113e4:	mov	r0, #1
   113e8:	bl	10ff0 <error@plt>
   113ec:	ldrb	r4, [r7]
   113f0:	cmp	r4, #0
   113f4:	beq	115a4 <__assert_fail@plt+0x428>
   113f8:	ldrb	r4, [r7, #1]
   113fc:	cmp	r4, #0
   11400:	beq	116fc <__assert_fail@plt+0x580>
   11404:	bl	11080 <__errno_location@plt>
   11408:	mov	r3, #0
   1140c:	mov	r4, r0
   11410:	str	r3, [r0]
   11414:	bl	10f0c <getuid@plt>
   11418:	cmn	r0, #1
   1141c:	str	r0, [r7, #4]
   11420:	bne	11698 <__assert_fail@plt+0x51c>
   11424:	ldr	r5, [r4]
   11428:	cmp	r5, #0
   1142c:	beq	11698 <__assert_fail@plt+0x51c>
   11430:	movw	r1, #28164	; 0x6e04
   11434:	movt	r1, #1
   11438:	mov	r2, #5
   1143c:	mov	r0, #0
   11440:	bl	10f60 <dcgettext@plt>
   11444:	mov	r2, r0
   11448:	mov	r1, r5
   1144c:	mov	r0, #1
   11450:	bl	10ff0 <error@plt>
   11454:	ldrb	r3, [r7, #1]
   11458:	cmp	r3, #0
   1145c:	bne	117cc <__assert_fail@plt+0x650>
   11460:	ldrb	r9, [r7, #12]
   11464:	cmp	r9, #0
   11468:	bne	117cc <__assert_fail@plt+0x650>
   1146c:	ldrb	r3, [r7, #49]	; 0x31
   11470:	cmp	r3, #0
   11474:	movwne	r1, #28024	; 0x6d78
   11478:	movtne	r1, #1
   1147c:	bne	113d0 <__assert_fail@plt+0x254>
   11480:	cmp	r5, #0
   11484:	beq	1158c <__assert_fail@plt+0x410>
   11488:	cmp	r5, #1
   1148c:	add	r5, r2, r5
   11490:	movls	r3, #0
   11494:	movhi	r3, #1
   11498:	cmp	r2, r5
   1149c:	movw	r8, #33040	; 0x8110
   114a0:	movt	r8, #2
   114a4:	strb	r3, [r7, #77]	; 0x4d
   114a8:	bcs	116a8 <__assert_fail@plt+0x52c>
   114ac:	movw	r3, #28116	; 0x6dd4
   114b0:	movt	r3, #1
   114b4:	mov	sl, #0
   114b8:	str	r3, [sp, #16]
   114bc:	b	11518 <__assert_fail@plt+0x39c>
   114c0:	bl	11080 <__errno_location@plt>
   114c4:	mov	r2, #5
   114c8:	ldr	r9, [r0]
   114cc:	mov	r0, #0
   114d0:	ldr	r1, [sp, #16]
   114d4:	bl	10f60 <dcgettext@plt>
   114d8:	ldr	r3, [r6]
   114dc:	mov	fp, r0
   114e0:	ldr	r0, [r4, r3, lsl #2]
   114e4:	bl	14918 <__assert_fail@plt+0x379c>
   114e8:	mov	r3, r0
   114ec:	mov	r2, fp
   114f0:	mov	r1, r9
   114f4:	mov	r0, #0
   114f8:	bl	10ff0 <error@plt>
   114fc:	strb	sl, [r8]
   11500:	ldr	r3, [r6]
   11504:	add	r3, r3, #1
   11508:	cmp	r3, r5
   1150c:	mov	r2, r3
   11510:	str	r3, [r6]
   11514:	bcs	116a8 <__assert_fail@plt+0x52c>
   11518:	ldr	r0, [r4, r2, lsl #2]
   1151c:	ldrb	r3, [r0]
   11520:	cmp	r3, #0
   11524:	beq	114c0 <__assert_fail@plt+0x344>
   11528:	mov	r3, #0
   1152c:	ldr	r1, [pc, #684]	; 117e0 <__assert_fail@plt+0x664>
   11530:	mov	r2, r3
   11534:	str	sl, [sp]
   11538:	bl	14c48 <__assert_fail@plt+0x3acc>
   1153c:	cmp	r0, #0
   11540:	bne	114c0 <__assert_fail@plt+0x344>
   11544:	ldr	r0, [r7, #8]
   11548:	bl	10ef4 <getpwuid@plt>
   1154c:	subs	r9, r0, #0
   11550:	beq	114c0 <__assert_fail@plt+0x344>
   11554:	ldr	r0, [r9]
   11558:	bl	15714 <__assert_fail@plt+0x4598>
   1155c:	ldr	r1, [r9, #8]
   11560:	str	r0, [sp, #20]
   11564:	ldr	r3, [r9, #12]
   11568:	str	r1, [r7, #4]
   1156c:	str	r1, [r7, #8]
   11570:	str	r3, [r7, #40]	; 0x28
   11574:	str	r3, [r7, #44]	; 0x2c
   11578:	bl	118d4 <__assert_fail@plt+0x758>
   1157c:	ldr	r2, [sp, #20]
   11580:	mov	r0, r2
   11584:	bl	12550 <__assert_fail@plt+0x13d4>
   11588:	b	11500 <__assert_fail@plt+0x384>
   1158c:	movw	r0, #28072	; 0x6da8
   11590:	movt	r0, #1
   11594:	bl	10ffc <getenv@plt>
   11598:	cmp	r0, #0
   1159c:	beq	11784 <__assert_fail@plt+0x608>
   115a0:	ldrb	r4, [r7]
   115a4:	ldrb	r3, [r7, #37]	; 0x25
   115a8:	cmp	r3, #0
   115ac:	bne	11654 <__assert_fail@plt+0x4d8>
   115b0:	ldrb	r3, [r7, #48]	; 0x30
   115b4:	cmp	r3, #0
   115b8:	bne	115f0 <__assert_fail@plt+0x474>
   115bc:	ldrb	r6, [r7, #50]	; 0x32
   115c0:	cmp	r6, #0
   115c4:	bne	115f0 <__assert_fail@plt+0x474>
   115c8:	bl	11080 <__errno_location@plt>
   115cc:	str	r6, [r0]
   115d0:	mov	r5, r0
   115d4:	bl	10f84 <geteuid@plt>
   115d8:	cmn	r0, #1
   115dc:	str	r0, [r7, #8]
   115e0:	beq	1175c <__assert_fail@plt+0x5e0>
   115e4:	ldrb	r3, [r7, #37]	; 0x25
   115e8:	cmp	r3, #0
   115ec:	bne	11654 <__assert_fail@plt+0x4d8>
   115f0:	ldrb	r3, [r7, #48]	; 0x30
   115f4:	cmp	r3, #0
   115f8:	bne	11608 <__assert_fail@plt+0x48c>
   115fc:	ldrb	r3, [r7, #50]	; 0x32
   11600:	cmp	r3, #0
   11604:	bne	1163c <__assert_fail@plt+0x4c0>
   11608:	bl	11080 <__errno_location@plt>
   1160c:	mov	r3, #0
   11610:	mov	r6, r0
   11614:	str	r3, [r0]
   11618:	bl	10f0c <getuid@plt>
   1161c:	cmn	r0, #1
   11620:	str	r0, [r7, #4]
   11624:	beq	1174c <__assert_fail@plt+0x5d0>
   11628:	cmp	r4, #0
   1162c:	bne	11698 <__assert_fail@plt+0x51c>
   11630:	ldrb	r3, [r7, #37]	; 0x25
   11634:	cmp	r3, #0
   11638:	bne	11654 <__assert_fail@plt+0x4d8>
   1163c:	ldrb	r3, [r7, #48]	; 0x30
   11640:	cmp	r3, #0
   11644:	bne	11654 <__assert_fail@plt+0x4d8>
   11648:	ldrb	r3, [r7, #50]	; 0x32
   1164c:	cmp	r3, #0
   11650:	bne	11698 <__assert_fail@plt+0x51c>
   11654:	mov	r5, #0
   11658:	bl	11080 <__errno_location@plt>
   1165c:	str	r5, [r0]
   11660:	mov	r4, r0
   11664:	bl	10f9c <getegid@plt>
   11668:	cmn	r0, #1
   1166c:	str	r0, [r7, #44]	; 0x2c
   11670:	bne	11680 <__assert_fail@plt+0x504>
   11674:	ldr	r6, [r4]
   11678:	cmp	r6, r5
   1167c:	bne	1179c <__assert_fail@plt+0x620>
   11680:	mov	r5, #0
   11684:	str	r5, [r4]
   11688:	bl	11098 <getgid@plt>
   1168c:	cmn	r0, #1
   11690:	str	r0, [r7, #40]	; 0x28
   11694:	beq	116cc <__assert_fail@plt+0x550>
   11698:	mov	r0, #0
   1169c:	movw	r8, #33040	; 0x8110
   116a0:	movt	r8, #2
   116a4:	bl	118d4 <__assert_fail@plt+0x758>
   116a8:	ldrb	r0, [r8]
   116ac:	eor	r0, r0, #1
   116b0:	add	sp, sp, #28
   116b4:	ldrd	r4, [sp]
   116b8:	ldrd	r6, [sp, #8]
   116bc:	ldrd	r8, [sp, #16]
   116c0:	ldrd	sl, [sp, #24]
   116c4:	add	sp, sp, #32
   116c8:	pop	{pc}		; (ldr pc, [sp], #4)
   116cc:	ldr	r4, [r4]
   116d0:	cmp	r4, r5
   116d4:	beq	11698 <__assert_fail@plt+0x51c>
   116d8:	mov	r2, #5
   116dc:	mov	r0, r5
   116e0:	movw	r1, #28212	; 0x6e34
   116e4:	movt	r1, #1
   116e8:	bl	10f60 <dcgettext@plt>
   116ec:	mov	r2, r0
   116f0:	mov	r1, r4
   116f4:	mov	r0, #1
   116f8:	bl	10ff0 <error@plt>
   116fc:	bl	11080 <__errno_location@plt>
   11700:	str	r4, [r0]
   11704:	mov	r5, r0
   11708:	bl	10f84 <geteuid@plt>
   1170c:	cmn	r0, #1
   11710:	str	r0, [r7, #8]
   11714:	bne	11698 <__assert_fail@plt+0x51c>
   11718:	ldr	r5, [r5]
   1171c:	cmp	r5, #0
   11720:	bne	11768 <__assert_fail@plt+0x5ec>
   11724:	ldrb	r4, [r7, #1]
   11728:	cmp	r4, #0
   1172c:	beq	11698 <__assert_fail@plt+0x51c>
   11730:	bl	11080 <__errno_location@plt>
   11734:	str	r5, [r0]
   11738:	mov	r6, r0
   1173c:	bl	10f0c <getuid@plt>
   11740:	cmn	r0, #1
   11744:	str	r0, [r7, #4]
   11748:	bne	11698 <__assert_fail@plt+0x51c>
   1174c:	ldr	r5, [r6]
   11750:	cmp	r5, #0
   11754:	beq	11628 <__assert_fail@plt+0x4ac>
   11758:	b	11430 <__assert_fail@plt+0x2b4>
   1175c:	ldr	r5, [r5]
   11760:	cmp	r5, #0
   11764:	beq	115e4 <__assert_fail@plt+0x468>
   11768:	movw	r1, #28136	; 0x6de8
   1176c:	movt	r1, #1
   11770:	b	11438 <__assert_fail@plt+0x2bc>
   11774:	mov	r0, #1
   11778:	bl	11e60 <__assert_fail@plt+0xce4>
   1177c:	mov	r0, #0
   11780:	bl	11e60 <__assert_fail@plt+0xce4>
   11784:	cmp	r8, #0
   11788:	ble	115a0 <__assert_fail@plt+0x424>
   1178c:	b	113ac <__assert_fail@plt+0x230>
   11790:	movw	r1, #27772	; 0x6c7c
   11794:	movt	r1, #1
   11798:	b	113d0 <__assert_fail@plt+0x254>
   1179c:	mov	r2, #5
   117a0:	mov	r0, r5
   117a4:	movw	r1, #28184	; 0x6e18
   117a8:	movt	r1, #1
   117ac:	bl	10f60 <dcgettext@plt>
   117b0:	mov	r2, r0
   117b4:	mov	r1, r6
   117b8:	mov	r0, #1
   117bc:	bl	10ff0 <error@plt>
   117c0:	movw	r1, #27872	; 0x6ce0
   117c4:	movt	r1, #1
   117c8:	b	113d0 <__assert_fail@plt+0x254>
   117cc:	movw	r1, #27968	; 0x6d40
   117d0:	movt	r1, #1
   117d4:	b	113d0 <__assert_fail@plt+0x254>
   117d8:	andeq	r6, r1, r4, lsr #13
   117dc:			; <UNDEFINED> instruction: 0x000281b0
   117e0:	andeq	r8, r2, r4, lsl #3
   117e4:	mov	fp, #0
   117e8:	mov	lr, #0
   117ec:	pop	{r1}		; (ldr r1, [sp], #4)
   117f0:	mov	r2, sp
   117f4:	push	{r2}		; (str r2, [sp, #-4]!)
   117f8:	push	{r0}		; (str r0, [sp, #-4]!)
   117fc:	ldr	ip, [pc, #16]	; 11814 <__assert_fail@plt+0x698>
   11800:	push	{ip}		; (str ip, [sp, #-4]!)
   11804:	ldr	r0, [pc, #12]	; 11818 <__assert_fail@plt+0x69c>
   11808:	ldr	r3, [pc, #12]	; 1181c <__assert_fail@plt+0x6a0>
   1180c:	bl	11014 <__libc_start_main@plt>
   11810:	bl	11158 <abort@plt>
   11814:	andeq	r6, r1, r4, asr #12
   11818:	andeq	r1, r1, r8, lsl #3
   1181c:	andeq	r6, r1, r4, ror #11
   11820:	ldr	r3, [pc, #20]	; 1183c <__assert_fail@plt+0x6c0>
   11824:	ldr	r2, [pc, #20]	; 11840 <__assert_fail@plt+0x6c4>
   11828:	add	r3, pc, r3
   1182c:	ldr	r2, [r3, r2]
   11830:	cmp	r2, #0
   11834:	bxeq	lr
   11838:	b	1102c <__gmon_start__@plt>
   1183c:	ldrdeq	r6, [r1], -r0
   11840:	andeq	r0, r0, r4, lsl #2
   11844:	ldr	r0, [pc, #24]	; 11864 <__assert_fail@plt+0x6e8>
   11848:	ldr	r3, [pc, #24]	; 11868 <__assert_fail@plt+0x6ec>
   1184c:	cmp	r3, r0
   11850:	bxeq	lr
   11854:	ldr	r3, [pc, #16]	; 1186c <__assert_fail@plt+0x6f0>
   11858:	cmp	r3, #0
   1185c:	bxeq	lr
   11860:	bx	r3
   11864:	andeq	r8, r2, ip, asr r1
   11868:	andeq	r8, r2, ip, asr r1
   1186c:	andeq	r0, r0, r0
   11870:	ldr	r0, [pc, #36]	; 1189c <__assert_fail@plt+0x720>
   11874:	ldr	r1, [pc, #36]	; 118a0 <__assert_fail@plt+0x724>
   11878:	sub	r1, r1, r0
   1187c:	asr	r1, r1, #2
   11880:	add	r1, r1, r1, lsr #31
   11884:	asrs	r1, r1, #1
   11888:	bxeq	lr
   1188c:	ldr	r3, [pc, #16]	; 118a4 <__assert_fail@plt+0x728>
   11890:	cmp	r3, #0
   11894:	bxeq	lr
   11898:	bx	r3
   1189c:	andeq	r8, r2, ip, asr r1
   118a0:	andeq	r8, r2, ip, asr r1
   118a4:	andeq	r0, r0, r0
   118a8:	push	{r4, lr}
   118ac:	ldr	r4, [pc, #24]	; 118cc <__assert_fail@plt+0x750>
   118b0:	ldrb	r3, [r4]
   118b4:	cmp	r3, #0
   118b8:	popne	{r4, pc}
   118bc:	bl	11844 <__assert_fail@plt+0x6c8>
   118c0:	mov	r3, #1
   118c4:	strb	r3, [r4]
   118c8:	pop	{r4, pc}
   118cc:	andeq	r8, r2, r8, ror r1
   118d0:	b	11870 <__assert_fail@plt+0x6f4>
   118d4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   118d8:	movw	r4, #33148	; 0x817c
   118dc:	movt	r4, #2
   118e0:	ldrb	r3, [r4]
   118e4:	strd	r6, [sp, #8]
   118e8:	strd	r8, [sp, #16]
   118ec:	str	lr, [sp, #24]
   118f0:	sub	sp, sp, #20
   118f4:	cmp	r3, #0
   118f8:	beq	119f8 <__assert_fail@plt+0x87c>
   118fc:	ldrb	r3, [r4, #1]
   11900:	cmp	r3, #0
   11904:	ldrb	r3, [r4, #12]
   11908:	ldrne	r5, [r4, #4]
   1190c:	ldreq	r5, [r4, #8]
   11910:	cmp	r3, #0
   11914:	bne	119b0 <__assert_fail@plt+0x834>
   11918:	mov	r0, r5
   1191c:	ldr	r2, [pc, #1332]	; 11e58 <__assert_fail@plt+0xcdc>
   11920:	mov	r1, #0
   11924:	bl	125b0 <__assert_fail@plt+0x1434>
   11928:	movw	r5, #33140	; 0x8174
   1192c:	movt	r5, #2
   11930:	ldr	r1, [r5]
   11934:	bl	10eb8 <fputs_unlocked@plt>
   11938:	ldrb	r3, [r4, #49]	; 0x31
   1193c:	ldr	r0, [r5]
   11940:	cmp	r3, #0
   11944:	ldr	r3, [r0, #20]
   11948:	ldr	r2, [r0, #24]
   1194c:	beq	119c8 <__assert_fail@plt+0x84c>
   11950:	ldrb	r1, [r4, #48]	; 0x30
   11954:	cmp	r1, #0
   11958:	beq	119cc <__assert_fail@plt+0x850>
   1195c:	ldrb	r1, [r4, #77]	; 0x4d
   11960:	cmp	r1, #0
   11964:	beq	119cc <__assert_fail@plt+0x850>
   11968:	cmp	r3, r2
   1196c:	addcc	r1, r3, #1
   11970:	movcc	r2, #0
   11974:	strcc	r1, [r0, #20]
   11978:	strbcc	r2, [r3]
   1197c:	bcs	11e0c <__assert_fail@plt+0xc90>
   11980:	ldr	r0, [r5]
   11984:	ldr	r3, [r0, #20]
   11988:	ldr	r2, [r0, #24]
   1198c:	cmp	r3, r2
   11990:	addcc	r1, r3, #1
   11994:	movcc	r2, #0
   11998:	strcc	r1, [r0, #20]
   1199c:	strbcc	r2, [r3]
   119a0:	bcc	119e0 <__assert_fail@plt+0x864>
   119a4:	mov	r1, #0
   119a8:	bl	110f8 <__overflow@plt>
   119ac:	b	119e0 <__assert_fail@plt+0x864>
   119b0:	mov	r0, r5
   119b4:	bl	10ef4 <getpwuid@plt>
   119b8:	subs	r6, r0, #0
   119bc:	beq	11d14 <__assert_fail@plt+0xb98>
   119c0:	ldr	r0, [r6]
   119c4:	b	11928 <__assert_fail@plt+0x7ac>
   119c8:	mov	r1, #10
   119cc:	cmp	r3, r2
   119d0:	addcc	r2, r3, #1
   119d4:	strcc	r2, [r0, #20]
   119d8:	strbcc	r1, [r3]
   119dc:	bcs	11a9c <__assert_fail@plt+0x920>
   119e0:	add	sp, sp, #20
   119e4:	ldrd	r4, [sp]
   119e8:	ldrd	r6, [sp, #8]
   119ec:	ldrd	r8, [sp, #16]
   119f0:	add	sp, sp, #24
   119f4:	pop	{pc}		; (ldr pc, [sp], #4)
   119f8:	ldrb	r3, [r4, #37]	; 0x25
   119fc:	cmp	r3, #0
   11a00:	beq	11a3c <__assert_fail@plt+0x8c0>
   11a04:	ldrb	r3, [r4, #1]
   11a08:	movw	r5, #33140	; 0x8174
   11a0c:	movt	r5, #2
   11a10:	ldrb	r1, [r4, #12]
   11a14:	cmp	r3, #0
   11a18:	ldrne	r0, [r4, #40]	; 0x28
   11a1c:	ldreq	r0, [r4, #44]	; 0x2c
   11a20:	bl	121b0 <__assert_fail@plt+0x1034>
   11a24:	movw	r3, #33040	; 0x8110
   11a28:	movt	r3, #2
   11a2c:	ldrb	r2, [r3]
   11a30:	and	r0, r0, r2
   11a34:	strb	r0, [r3]
   11a38:	b	11938 <__assert_fail@plt+0x7bc>
   11a3c:	ldrb	r3, [r4, #48]	; 0x30
   11a40:	cmp	r3, #0
   11a44:	bne	11a6c <__assert_fail@plt+0x8f0>
   11a48:	ldrb	r6, [r4, #50]	; 0x32
   11a4c:	cmp	r6, #0
   11a50:	beq	11aa4 <__assert_fail@plt+0x928>
   11a54:	movw	r5, #33140	; 0x8174
   11a58:	movt	r5, #2
   11a5c:	ldr	r0, [r4, #52]	; 0x34
   11a60:	ldr	r1, [r5]
   11a64:	bl	10eb8 <fputs_unlocked@plt>
   11a68:	b	11938 <__assert_fail@plt+0x7bc>
   11a6c:	ldrb	r3, [r4, #49]	; 0x31
   11a70:	movw	r5, #33140	; 0x8174
   11a74:	movt	r5, #2
   11a78:	ldrb	r2, [r4, #12]
   11a7c:	ldr	r1, [r4, #4]
   11a80:	cmp	r3, #0
   11a84:	movne	r3, #0
   11a88:	moveq	r3, #32
   11a8c:	strd	r2, [sp]
   11a90:	ldrd	r2, [r4, #40]	; 0x28
   11a94:	bl	12244 <__assert_fail@plt+0x10c8>
   11a98:	b	11a24 <__assert_fail@plt+0x8a8>
   11a9c:	bl	110f8 <__overflow@plt>
   11aa0:	b	119e0 <__assert_fail@plt+0x864>
   11aa4:	mov	r2, #5
   11aa8:	mov	r5, r0
   11aac:	movw	r1, #26468	; 0x6764
   11ab0:	movt	r1, #1
   11ab4:	mov	r0, r6
   11ab8:	bl	10f60 <dcgettext@plt>
   11abc:	mov	r7, r0
   11ac0:	mov	r1, r6
   11ac4:	ldr	r0, [r4, #4]
   11ac8:	add	r2, r4, #16
   11acc:	bl	125b0 <__assert_fail@plt+0x1434>
   11ad0:	mov	r2, r0
   11ad4:	mov	r1, r7
   11ad8:	mov	r0, #1
   11adc:	bl	110bc <__printf_chk@plt>
   11ae0:	ldr	r0, [r4, #4]
   11ae4:	bl	10ef4 <getpwuid@plt>
   11ae8:	subs	r6, r0, #0
   11aec:	beq	11b04 <__assert_fail@plt+0x988>
   11af0:	movw	r1, #26476	; 0x676c
   11af4:	movt	r1, #1
   11af8:	ldr	r2, [r6]
   11afc:	mov	r0, #1
   11b00:	bl	110bc <__printf_chk@plt>
   11b04:	mov	r2, #5
   11b08:	movw	r1, #26484	; 0x6774
   11b0c:	movt	r1, #1
   11b10:	mov	r0, #0
   11b14:	bl	10f60 <dcgettext@plt>
   11b18:	mov	r7, r0
   11b1c:	ldr	r2, [pc, #824]	; 11e5c <__assert_fail@plt+0xce0>
   11b20:	mov	r1, #0
   11b24:	ldr	r0, [r4, #40]	; 0x28
   11b28:	bl	125b0 <__assert_fail@plt+0x1434>
   11b2c:	mov	r2, r0
   11b30:	mov	r1, r7
   11b34:	mov	r0, #1
   11b38:	bl	110bc <__printf_chk@plt>
   11b3c:	ldr	r0, [r4, #40]	; 0x28
   11b40:	bl	11164 <getgrgid@plt>
   11b44:	cmp	r0, #0
   11b48:	beq	11b60 <__assert_fail@plt+0x9e4>
   11b4c:	movw	r1, #26476	; 0x676c
   11b50:	movt	r1, #1
   11b54:	ldr	r2, [r0]
   11b58:	mov	r0, #1
   11b5c:	bl	110bc <__printf_chk@plt>
   11b60:	ldr	r3, [r4, #4]
   11b64:	ldr	r2, [r4, #8]
   11b68:	cmp	r2, r3
   11b6c:	bne	11c54 <__assert_fail@plt+0xad8>
   11b70:	ldr	r3, [r4, #40]	; 0x28
   11b74:	ldr	r7, [r4, #44]	; 0x2c
   11b78:	cmp	r7, r3
   11b7c:	bne	11bf4 <__assert_fail@plt+0xa78>
   11b80:	cmp	r5, #0
   11b84:	beq	11cb4 <__assert_fail@plt+0xb38>
   11b88:	cmp	r6, #0
   11b8c:	mvneq	r1, #0
   11b90:	ldrne	r1, [r6, #12]
   11b94:	add	r2, sp, #12
   11b98:	mov	r0, r5
   11b9c:	bl	15780 <__assert_fail@plt+0x4604>
   11ba0:	subs	r7, r0, #0
   11ba4:	blt	11e18 <__assert_fail@plt+0xc9c>
   11ba8:	cmp	r7, #0
   11bac:	movweq	r5, #33140	; 0x8174
   11bb0:	movteq	r5, #2
   11bb4:	bne	11d5c <__assert_fail@plt+0xbe0>
   11bb8:	ldr	r0, [sp, #12]
   11bbc:	bl	12550 <__assert_fail@plt+0x13d4>
   11bc0:	ldr	r3, [r4, #52]	; 0x34
   11bc4:	cmp	r3, #0
   11bc8:	beq	11938 <__assert_fail@plt+0x7bc>
   11bcc:	mov	r2, #5
   11bd0:	movw	r1, #26600	; 0x67e8
   11bd4:	movt	r1, #1
   11bd8:	mov	r0, #0
   11bdc:	bl	10f60 <dcgettext@plt>
   11be0:	mov	r1, r0
   11be4:	mov	r0, #1
   11be8:	ldr	r2, [r4, #52]	; 0x34
   11bec:	bl	110bc <__printf_chk@plt>
   11bf0:	b	11938 <__assert_fail@plt+0x7bc>
   11bf4:	mov	r2, #5
   11bf8:	movw	r1, #26504	; 0x6788
   11bfc:	movt	r1, #1
   11c00:	mov	r0, #0
   11c04:	bl	10f60 <dcgettext@plt>
   11c08:	mov	r8, r0
   11c0c:	ldr	r2, [pc, #584]	; 11e5c <__assert_fail@plt+0xce0>
   11c10:	mov	r1, #0
   11c14:	mov	r0, r7
   11c18:	bl	125b0 <__assert_fail@plt+0x1434>
   11c1c:	mov	r2, r0
   11c20:	mov	r1, r8
   11c24:	mov	r0, #1
   11c28:	bl	110bc <__printf_chk@plt>
   11c2c:	ldr	r0, [r4, #44]	; 0x2c
   11c30:	bl	11164 <getgrgid@plt>
   11c34:	cmp	r0, #0
   11c38:	beq	11b80 <__assert_fail@plt+0xa04>
   11c3c:	movw	r1, #26476	; 0x676c
   11c40:	movt	r1, #1
   11c44:	ldr	r2, [r0]
   11c48:	mov	r0, #1
   11c4c:	bl	110bc <__printf_chk@plt>
   11c50:	b	11b80 <__assert_fail@plt+0xa04>
   11c54:	mov	r2, #5
   11c58:	movw	r1, #26492	; 0x677c
   11c5c:	movt	r1, #1
   11c60:	mov	r0, #0
   11c64:	bl	10f60 <dcgettext@plt>
   11c68:	mov	r6, r0
   11c6c:	ldr	r2, [pc, #484]	; 11e58 <__assert_fail@plt+0xcdc>
   11c70:	mov	r1, #0
   11c74:	ldr	r0, [r4, #8]
   11c78:	bl	125b0 <__assert_fail@plt+0x1434>
   11c7c:	mov	r2, r0
   11c80:	mov	r1, r6
   11c84:	mov	r0, #1
   11c88:	bl	110bc <__printf_chk@plt>
   11c8c:	ldr	r0, [r4, #8]
   11c90:	bl	10ef4 <getpwuid@plt>
   11c94:	subs	r6, r0, #0
   11c98:	beq	11b70 <__assert_fail@plt+0x9f4>
   11c9c:	movw	r1, #26476	; 0x676c
   11ca0:	movt	r1, #1
   11ca4:	ldr	r2, [r6]
   11ca8:	mov	r0, #1
   11cac:	bl	110bc <__printf_chk@plt>
   11cb0:	b	11b70 <__assert_fail@plt+0x9f4>
   11cb4:	add	r2, sp, #12
   11cb8:	mov	r0, r5
   11cbc:	ldr	r1, [r4, #44]	; 0x2c
   11cc0:	bl	15780 <__assert_fail@plt+0x4604>
   11cc4:	subs	r7, r0, #0
   11cc8:	bge	11ba8 <__assert_fail@plt+0xa2c>
   11ccc:	bl	11080 <__errno_location@plt>
   11cd0:	ldr	r6, [r0]
   11cd4:	mov	r2, #5
   11cd8:	movw	r1, #26552	; 0x67b8
   11cdc:	movt	r1, #1
   11ce0:	mov	r0, r5
   11ce4:	bl	10f60 <dcgettext@plt>
   11ce8:	mov	r2, r0
   11cec:	mov	r0, r5
   11cf0:	mov	r1, r6
   11cf4:	bl	10ff0 <error@plt>
   11cf8:	movw	r3, #33040	; 0x8110
   11cfc:	movt	r3, #2
   11d00:	mov	r2, #0
   11d04:	movw	r5, #33140	; 0x8174
   11d08:	movt	r5, #2
   11d0c:	strb	r2, [r3]
   11d10:	b	11938 <__assert_fail@plt+0x7bc>
   11d14:	mov	r2, #5
   11d18:	movw	r1, #26436	; 0x6744
   11d1c:	movt	r1, #1
   11d20:	bl	10f60 <dcgettext@plt>
   11d24:	mov	r7, r0
   11d28:	ldr	r2, [pc, #296]	; 11e58 <__assert_fail@plt+0xcdc>
   11d2c:	mov	r1, r6
   11d30:	mov	r0, r5
   11d34:	bl	125b0 <__assert_fail@plt+0x1434>
   11d38:	mov	r3, r0
   11d3c:	mov	r2, r7
   11d40:	mov	r1, r6
   11d44:	mov	r0, r6
   11d48:	bl	10ff0 <error@plt>
   11d4c:	movw	r3, #33040	; 0x8110
   11d50:	movt	r3, #2
   11d54:	strb	r6, [r3]
   11d58:	b	11918 <__assert_fail@plt+0x79c>
   11d5c:	movw	r1, #26612	; 0x67f4
   11d60:	movt	r1, #1
   11d64:	ldr	r9, [pc, #240]	; 11e5c <__assert_fail@plt+0xce0>
   11d68:	mov	r2, #5
   11d6c:	mov	r0, #0
   11d70:	movw	r5, #33140	; 0x8174
   11d74:	movt	r5, #2
   11d78:	bl	10f60 <dcgettext@plt>
   11d7c:	ldr	r1, [r5]
   11d80:	movw	r8, #26476	; 0x676c
   11d84:	movt	r8, #1
   11d88:	mov	r6, #0
   11d8c:	bl	10eb8 <fputs_unlocked@plt>
   11d90:	ldr	r3, [sp, #12]
   11d94:	mov	r2, r9
   11d98:	mov	r1, #0
   11d9c:	ldr	r0, [r3, r6, lsl #2]
   11da0:	bl	125b0 <__assert_fail@plt+0x1434>
   11da4:	ldr	r1, [r5]
   11da8:	bl	10eb8 <fputs_unlocked@plt>
   11dac:	ldr	r3, [sp, #12]
   11db0:	ldr	r0, [r3, r6, lsl #2]
   11db4:	add	r6, r6, #1
   11db8:	bl	11164 <getgrgid@plt>
   11dbc:	subs	r3, r0, #0
   11dc0:	mov	r1, r8
   11dc4:	mov	r0, #1
   11dc8:	beq	11dd4 <__assert_fail@plt+0xc58>
   11dcc:	ldr	r2, [r3]
   11dd0:	bl	110bc <__printf_chk@plt>
   11dd4:	cmp	r6, r7
   11dd8:	mov	r2, #44	; 0x2c
   11ddc:	beq	11bb8 <__assert_fail@plt+0xa3c>
   11de0:	ldr	r0, [r5]
   11de4:	ldr	r3, [r0, #20]
   11de8:	ldr	r1, [r0, #24]
   11dec:	add	ip, r3, #1
   11df0:	cmp	r3, r1
   11df4:	strcc	ip, [r0, #20]
   11df8:	strbcc	r2, [r3]
   11dfc:	bcc	11d90 <__assert_fail@plt+0xc14>
   11e00:	mov	r1, #44	; 0x2c
   11e04:	bl	110f8 <__overflow@plt>
   11e08:	b	11d90 <__assert_fail@plt+0xc14>
   11e0c:	mov	r1, #0
   11e10:	bl	110f8 <__overflow@plt>
   11e14:	b	11980 <__assert_fail@plt+0x804>
   11e18:	bl	11080 <__errno_location@plt>
   11e1c:	ldr	r6, [r0]
   11e20:	mov	r2, #5
   11e24:	movw	r1, #26516	; 0x6794
   11e28:	movt	r1, #1
   11e2c:	mov	r0, #0
   11e30:	bl	10f60 <dcgettext@plt>
   11e34:	mov	r7, r0
   11e38:	mov	r0, r5
   11e3c:	bl	14918 <__assert_fail@plt+0x379c>
   11e40:	mov	r3, r0
   11e44:	mov	r2, r7
   11e48:	mov	r1, r6
   11e4c:	mov	r0, #0
   11e50:	bl	10ff0 <error@plt>
   11e54:	b	11cf8 <__assert_fail@plt+0xb7c>
   11e58:	andeq	r8, r2, ip, lsl #3
   11e5c:			; <UNDEFINED> instruction: 0x000281b4
   11e60:	subs	r6, r0, #0
   11e64:	str	r7, [sp, #-8]!
   11e68:	str	lr, [sp, #4]
   11e6c:	sub	sp, sp, #56	; 0x38
   11e70:	beq	11eb8 <__assert_fail@plt+0xd3c>
   11e74:	movw	r3, #33136	; 0x8170
   11e78:	movt	r3, #2
   11e7c:	ldr	r4, [r3]
   11e80:	mov	r2, #5
   11e84:	movw	r1, #26628	; 0x6804
   11e88:	movt	r1, #1
   11e8c:	mov	r0, #0
   11e90:	bl	10f60 <dcgettext@plt>
   11e94:	movw	r3, #33260	; 0x81ec
   11e98:	movt	r3, #2
   11e9c:	mov	r2, r0
   11ea0:	mov	r1, #1
   11ea4:	ldr	r3, [r3]
   11ea8:	mov	r0, r4
   11eac:	bl	110d4 <__fprintf_chk@plt>
   11eb0:	mov	r0, r6
   11eb4:	bl	11050 <exit@plt>
   11eb8:	mov	r2, #5
   11ebc:	movw	r1, #26668	; 0x682c
   11ec0:	movt	r1, #1
   11ec4:	movw	r7, #33140	; 0x8174
   11ec8:	movt	r7, #2
   11ecc:	bl	10f60 <dcgettext@plt>
   11ed0:	movw	r3, #33260	; 0x81ec
   11ed4:	movt	r3, #2
   11ed8:	mov	r1, r0
   11edc:	mov	r0, #1
   11ee0:	ldr	r2, [r3]
   11ee4:	bl	110bc <__printf_chk@plt>
   11ee8:	mov	r2, #5
   11eec:	movw	r1, #26704	; 0x6850
   11ef0:	movt	r1, #1
   11ef4:	mov	r0, r6
   11ef8:	bl	10f60 <dcgettext@plt>
   11efc:	ldr	r1, [r7]
   11f00:	bl	10eb8 <fputs_unlocked@plt>
   11f04:	mov	r2, #5
   11f08:	movw	r1, #26812	; 0x68bc
   11f0c:	movt	r1, #1
   11f10:	mov	r0, r6
   11f14:	bl	10f60 <dcgettext@plt>
   11f18:	ldr	r1, [r7]
   11f1c:	bl	10eb8 <fputs_unlocked@plt>
   11f20:	mov	r2, #5
   11f24:	movw	r1, #27336	; 0x6ac8
   11f28:	movt	r1, #1
   11f2c:	mov	r0, r6
   11f30:	bl	10f60 <dcgettext@plt>
   11f34:	ldr	r1, [r7]
   11f38:	bl	10eb8 <fputs_unlocked@plt>
   11f3c:	mov	r2, #5
   11f40:	movw	r1, #27384	; 0x6af8
   11f44:	movt	r1, #1
   11f48:	mov	r0, r6
   11f4c:	bl	10f60 <dcgettext@plt>
   11f50:	ldr	r1, [r7]
   11f54:	bl	10eb8 <fputs_unlocked@plt>
   11f58:	mov	r2, #5
   11f5c:	movw	r1, #27440	; 0x6b30
   11f60:	movt	r1, #1
   11f64:	mov	r0, r6
   11f68:	bl	10f60 <dcgettext@plt>
   11f6c:	ldr	r1, [r7]
   11f70:	bl	10eb8 <fputs_unlocked@plt>
   11f74:	movw	lr, #26220	; 0x666c
   11f78:	movt	lr, #1
   11f7c:	ldr	ip, [lr]
   11f80:	ldr	r4, [lr, #4]
   11f84:	ldrd	r8, [lr, #8]
   11f88:	subs	r1, ip, #0
   11f8c:	str	ip, [sp]
   11f90:	ldrd	r2, [lr, #16]
   11f94:	str	r4, [sp, #4]
   11f98:	ldrd	r4, [lr, #24]
   11f9c:	strd	r8, [sp, #8]
   11fa0:	ldrd	r8, [lr, #32]
   11fa4:	strd	r2, [sp, #16]
   11fa8:	ldrd	r2, [lr, #40]	; 0x28
   11fac:	strd	r4, [sp, #24]
   11fb0:	ldrd	r4, [lr, #48]	; 0x30
   11fb4:	strd	r8, [sp, #32]
   11fb8:	strd	r2, [sp, #40]	; 0x28
   11fbc:	strd	r4, [sp, #48]	; 0x30
   11fc0:	movwne	r5, #26624	; 0x6800
   11fc4:	mov	r4, sp
   11fc8:	movtne	r5, #1
   11fcc:	bne	120c4 <__assert_fail@plt+0xf48>
   11fd0:	ldr	r4, [r4, #4]
   11fd4:	movw	r1, #27512	; 0x6b78
   11fd8:	movt	r1, #1
   11fdc:	mov	r2, #5
   11fe0:	cmp	r4, #0
   11fe4:	beq	120d8 <__assert_fail@plt+0xf5c>
   11fe8:	mov	r0, #0
   11fec:	bl	10f60 <dcgettext@plt>
   11ff0:	mov	r1, r0
   11ff4:	movw	r3, #27536	; 0x6b90
   11ff8:	movt	r3, #1
   11ffc:	movw	r2, #27576	; 0x6bb8
   12000:	movt	r2, #1
   12004:	mov	r0, #1
   12008:	bl	110bc <__printf_chk@plt>
   1200c:	mov	r1, #0
   12010:	mov	r0, #5
   12014:	bl	11104 <setlocale@plt>
   12018:	cmp	r0, #0
   1201c:	movweq	r5, #26624	; 0x6800
   12020:	movteq	r5, #1
   12024:	beq	12048 <__assert_fail@plt+0xecc>
   12028:	movw	r1, #27592	; 0x6bc8
   1202c:	movt	r1, #1
   12030:	mov	r2, #3
   12034:	movw	r5, #26624	; 0x6800
   12038:	movt	r5, #1
   1203c:	bl	1114c <strncmp@plt>
   12040:	cmp	r0, #0
   12044:	bne	12190 <__assert_fail@plt+0x1014>
   12048:	mov	r2, #5
   1204c:	movw	r1, #27668	; 0x6c14
   12050:	movt	r1, #1
   12054:	mov	r0, #0
   12058:	bl	10f60 <dcgettext@plt>
   1205c:	mov	r1, r0
   12060:	movw	r3, #26624	; 0x6800
   12064:	movt	r3, #1
   12068:	movw	r2, #27536	; 0x6b90
   1206c:	movt	r2, #1
   12070:	mov	r0, #1
   12074:	bl	110bc <__printf_chk@plt>
   12078:	mov	r2, #5
   1207c:	movw	r1, #27696	; 0x6c30
   12080:	movt	r1, #1
   12084:	mov	r0, #0
   12088:	bl	10f60 <dcgettext@plt>
   1208c:	movw	r2, #28240	; 0x6e50
   12090:	movt	r2, #1
   12094:	cmp	r4, r5
   12098:	movw	r3, #26700	; 0x684c
   1209c:	movt	r3, #1
   120a0:	mov	r1, r0
   120a4:	moveq	r3, r2
   120a8:	mov	r2, r4
   120ac:	mov	r0, #1
   120b0:	bl	110bc <__printf_chk@plt>
   120b4:	b	11eb0 <__assert_fail@plt+0xd34>
   120b8:	ldr	r1, [r4, #8]!
   120bc:	cmp	r1, #0
   120c0:	beq	11fd0 <__assert_fail@plt+0xe54>
   120c4:	mov	r0, r5
   120c8:	bl	10ee8 <strcmp@plt>
   120cc:	cmp	r0, #0
   120d0:	bne	120b8 <__assert_fail@plt+0xf3c>
   120d4:	b	11fd0 <__assert_fail@plt+0xe54>
   120d8:	mov	r0, r4
   120dc:	bl	10f60 <dcgettext@plt>
   120e0:	mov	r1, r0
   120e4:	movw	r3, #27536	; 0x6b90
   120e8:	movt	r3, #1
   120ec:	movw	r2, #27576	; 0x6bb8
   120f0:	movt	r2, #1
   120f4:	mov	r0, #1
   120f8:	bl	110bc <__printf_chk@plt>
   120fc:	mov	r1, r4
   12100:	mov	r0, #5
   12104:	bl	11104 <setlocale@plt>
   12108:	cmp	r0, #0
   1210c:	beq	12128 <__assert_fail@plt+0xfac>
   12110:	movw	r1, #27592	; 0x6bc8
   12114:	movt	r1, #1
   12118:	mov	r2, #3
   1211c:	bl	1114c <strncmp@plt>
   12120:	cmp	r0, #0
   12124:	bne	12184 <__assert_fail@plt+0x1008>
   12128:	mov	r2, #5
   1212c:	movw	r1, #27668	; 0x6c14
   12130:	movt	r1, #1
   12134:	mov	r0, #0
   12138:	bl	10f60 <dcgettext@plt>
   1213c:	mov	r1, r0
   12140:	movw	r3, #26624	; 0x6800
   12144:	movt	r3, #1
   12148:	movw	r2, #27536	; 0x6b90
   1214c:	movt	r2, #1
   12150:	mov	r0, #1
   12154:	bl	110bc <__printf_chk@plt>
   12158:	movw	r1, #27696	; 0x6c30
   1215c:	movt	r1, #1
   12160:	mov	r2, #5
   12164:	mov	r0, #0
   12168:	bl	10f60 <dcgettext@plt>
   1216c:	movw	r4, #26624	; 0x6800
   12170:	movt	r4, #1
   12174:	movw	r3, #28240	; 0x6e50
   12178:	movt	r3, #1
   1217c:	mov	r1, r0
   12180:	b	120a8 <__assert_fail@plt+0xf2c>
   12184:	movw	r5, #26624	; 0x6800
   12188:	movt	r5, #1
   1218c:	mov	r4, r5
   12190:	mov	r2, #5
   12194:	movw	r1, #27596	; 0x6bcc
   12198:	movt	r1, #1
   1219c:	mov	r0, #0
   121a0:	bl	10f60 <dcgettext@plt>
   121a4:	ldr	r1, [r7]
   121a8:	bl	10eb8 <fputs_unlocked@plt>
   121ac:	b	12048 <__assert_fail@plt+0xecc>
   121b0:	strd	r4, [sp, #-16]!
   121b4:	subs	r4, r1, #0
   121b8:	mov	r5, r0
   121bc:	str	r6, [sp, #8]
   121c0:	str	lr, [sp, #12]
   121c4:	beq	121dc <__assert_fail@plt+0x1060>
   121c8:	bl	11164 <getgrgid@plt>
   121cc:	subs	r6, r0, #0
   121d0:	beq	12218 <__assert_fail@plt+0x109c>
   121d4:	ldr	r0, [r6]
   121d8:	b	121f4 <__assert_fail@plt+0x1078>
   121dc:	mov	r4, #1
   121e0:	movw	r2, #33228	; 0x81cc
   121e4:	movt	r2, #2
   121e8:	mov	r0, r5
   121ec:	mov	r1, #0
   121f0:	bl	125b0 <__assert_fail@plt+0x1434>
   121f4:	movw	r3, #33140	; 0x8174
   121f8:	movt	r3, #2
   121fc:	ldr	r1, [r3]
   12200:	bl	10eb8 <fputs_unlocked@plt>
   12204:	mov	r0, r4
   12208:	ldrd	r4, [sp]
   1220c:	ldr	r6, [sp, #8]
   12210:	add	sp, sp, #12
   12214:	pop	{pc}		; (ldr pc, [sp], #4)
   12218:	mov	r2, #5
   1221c:	movw	r1, #28396	; 0x6eec
   12220:	movt	r1, #1
   12224:	mov	r4, r6
   12228:	bl	10f60 <dcgettext@plt>
   1222c:	mov	r2, r0
   12230:	mov	r3, r5
   12234:	mov	r1, r6
   12238:	mov	r0, r6
   1223c:	bl	10ff0 <error@plt>
   12240:	b	121e0 <__assert_fail@plt+0x1064>
   12244:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12248:	mov	r5, r2
   1224c:	strd	r6, [sp, #8]
   12250:	mov	r6, r3
   12254:	strd	r8, [sp, #16]
   12258:	subs	r9, r0, #0
   1225c:	strd	sl, [sp, #24]
   12260:	moveq	r4, r9
   12264:	moveq	r7, #1
   12268:	str	lr, [sp, #32]
   1226c:	sub	sp, sp, #20
   12270:	ldrb	r3, [sp, #60]	; 0x3c
   12274:	ldrb	r8, [sp, #56]	; 0x38
   12278:	str	r3, [sp, #4]
   1227c:	beq	12294 <__assert_fail@plt+0x1118>
   12280:	mov	r0, r1
   12284:	bl	10ef4 <getpwuid@plt>
   12288:	adds	r7, r0, #0
   1228c:	mov	r4, r0
   12290:	movne	r7, #1
   12294:	mov	r1, r8
   12298:	mov	r0, r5
   1229c:	bl	121b0 <__assert_fail@plt+0x1034>
   122a0:	cmp	r0, #0
   122a4:	moveq	r7, #0
   122a8:	cmp	r5, r6
   122ac:	beq	122f0 <__assert_fail@plt+0x1174>
   122b0:	movw	r3, #33140	; 0x8174
   122b4:	movt	r3, #2
   122b8:	ldr	r0, [r3]
   122bc:	ldr	r3, [r0, #20]
   122c0:	ldr	r2, [r0, #24]
   122c4:	cmp	r3, r2
   122c8:	bcs	12438 <__assert_fail@plt+0x12bc>
   122cc:	add	r2, r3, #1
   122d0:	str	r2, [r0, #20]
   122d4:	ldr	r2, [sp, #4]
   122d8:	strb	r2, [r3]
   122dc:	mov	r1, r8
   122e0:	mov	r0, r6
   122e4:	bl	121b0 <__assert_fail@plt+0x1034>
   122e8:	cmp	r0, #0
   122ec:	moveq	r7, #0
   122f0:	cmp	r4, #0
   122f4:	add	r2, sp, #12
   122f8:	ldrne	r1, [r4, #12]
   122fc:	moveq	r1, r6
   12300:	mov	r0, r9
   12304:	bl	15780 <__assert_fail@plt+0x4604>
   12308:	subs	sl, r0, #0
   1230c:	blt	123b8 <__assert_fail@plt+0x123c>
   12310:	movwne	r9, #33140	; 0x8174
   12314:	movne	r4, #0
   12318:	ldr	r0, [sp, #12]
   1231c:	movtne	r9, #2
   12320:	bne	12334 <__assert_fail@plt+0x11b8>
   12324:	b	12394 <__assert_fail@plt+0x1218>
   12328:	add	r4, r4, #1
   1232c:	cmp	sl, r4
   12330:	beq	12394 <__assert_fail@plt+0x1218>
   12334:	ldr	r3, [r0, r4, lsl #2]
   12338:	lsl	fp, r4, #2
   1233c:	cmp	r3, r6
   12340:	cmpne	r3, r5
   12344:	beq	12328 <__assert_fail@plt+0x11ac>
   12348:	ldr	r0, [r9]
   1234c:	ldr	r3, [r0, #20]
   12350:	ldr	r1, [r0, #24]
   12354:	add	ip, r3, #1
   12358:	cmp	r3, r1
   1235c:	bcs	12404 <__assert_fail@plt+0x1288>
   12360:	ldr	r2, [sp, #4]
   12364:	str	ip, [r0, #20]
   12368:	strb	r2, [r3]
   1236c:	ldr	r3, [sp, #12]
   12370:	mov	r1, r8
   12374:	add	r4, r4, #1
   12378:	ldr	r0, [r3, fp]
   1237c:	bl	121b0 <__assert_fail@plt+0x1034>
   12380:	subs	r3, r0, #0
   12384:	ldr	r0, [sp, #12]
   12388:	moveq	r7, r3
   1238c:	cmp	sl, r4
   12390:	bne	12334 <__assert_fail@plt+0x11b8>
   12394:	bl	12550 <__assert_fail@plt+0x13d4>
   12398:	mov	r0, r7
   1239c:	add	sp, sp, #20
   123a0:	ldrd	r4, [sp]
   123a4:	ldrd	r6, [sp, #8]
   123a8:	ldrd	r8, [sp, #16]
   123ac:	ldrd	sl, [sp, #24]
   123b0:	add	sp, sp, #32
   123b4:	pop	{pc}		; (ldr pc, [sp], #4)
   123b8:	bl	11080 <__errno_location@plt>
   123bc:	cmp	r9, #0
   123c0:	ldr	r4, [r0]
   123c4:	beq	12410 <__assert_fail@plt+0x1294>
   123c8:	mov	r2, #5
   123cc:	movw	r1, #26516	; 0x6794
   123d0:	movt	r1, #1
   123d4:	mov	r0, #0
   123d8:	bl	10f60 <dcgettext@plt>
   123dc:	mov	r5, r0
   123e0:	mov	r0, r9
   123e4:	bl	14918 <__assert_fail@plt+0x379c>
   123e8:	mov	r3, r0
   123ec:	mov	r2, r5
   123f0:	mov	r1, r4
   123f4:	mov	r0, #0
   123f8:	bl	10ff0 <error@plt>
   123fc:	mov	r7, #0
   12400:	b	12398 <__assert_fail@plt+0x121c>
   12404:	ldr	r1, [sp, #4]
   12408:	bl	110f8 <__overflow@plt>
   1240c:	b	1236c <__assert_fail@plt+0x11f0>
   12410:	mov	r2, #5
   12414:	mov	r0, r9
   12418:	movw	r1, #26552	; 0x67b8
   1241c:	movt	r1, #1
   12420:	bl	10f60 <dcgettext@plt>
   12424:	mov	r2, r0
   12428:	mov	r1, r4
   1242c:	mov	r0, r9
   12430:	bl	10ff0 <error@plt>
   12434:	b	123fc <__assert_fail@plt+0x1280>
   12438:	ldr	r1, [sp, #4]
   1243c:	bl	110f8 <__overflow@plt>
   12440:	b	122dc <__assert_fail@plt+0x1160>
   12444:	movw	r3, #33252	; 0x81e4
   12448:	movt	r3, #2
   1244c:	str	r0, [r3]
   12450:	bx	lr
   12454:	movw	r3, #33252	; 0x81e4
   12458:	movt	r3, #2
   1245c:	strb	r0, [r3, #4]
   12460:	bx	lr
   12464:	movw	r3, #33140	; 0x8174
   12468:	movt	r3, #2
   1246c:	strd	r4, [sp, #-16]!
   12470:	ldr	r0, [r3]
   12474:	str	r6, [sp, #8]
   12478:	str	lr, [sp, #12]
   1247c:	sub	sp, sp, #8
   12480:	bl	15dc4 <__assert_fail@plt+0x4c48>
   12484:	cmp	r0, #0
   12488:	beq	124b4 <__assert_fail@plt+0x1338>
   1248c:	movw	r4, #33252	; 0x81e4
   12490:	movt	r4, #2
   12494:	ldrb	r6, [r4, #4]
   12498:	bl	11080 <__errno_location@plt>
   1249c:	mov	r5, r0
   124a0:	cmp	r6, #0
   124a4:	beq	124e0 <__assert_fail@plt+0x1364>
   124a8:	ldr	r3, [r0]
   124ac:	cmp	r3, #32
   124b0:	bne	124e0 <__assert_fail@plt+0x1364>
   124b4:	movw	r3, #33136	; 0x8170
   124b8:	movt	r3, #2
   124bc:	ldr	r0, [r3]
   124c0:	bl	15dc4 <__assert_fail@plt+0x4c48>
   124c4:	cmp	r0, #0
   124c8:	bne	12528 <__assert_fail@plt+0x13ac>
   124cc:	add	sp, sp, #8
   124d0:	ldrd	r4, [sp]
   124d4:	ldr	r6, [sp, #8]
   124d8:	add	sp, sp, #12
   124dc:	pop	{pc}		; (ldr pc, [sp], #4)
   124e0:	movw	r1, #28448	; 0x6f20
   124e4:	movt	r1, #1
   124e8:	mov	r2, #5
   124ec:	mov	r0, #0
   124f0:	bl	10f60 <dcgettext@plt>
   124f4:	mov	r6, r0
   124f8:	ldr	r0, [r4]
   124fc:	cmp	r0, #0
   12500:	beq	12538 <__assert_fail@plt+0x13bc>
   12504:	ldr	r4, [r5]
   12508:	bl	1472c <__assert_fail@plt+0x35b0>
   1250c:	mov	r3, r0
   12510:	movw	r2, #28460	; 0x6f2c
   12514:	movt	r2, #1
   12518:	mov	r0, #0
   1251c:	str	r6, [sp]
   12520:	mov	r1, r4
   12524:	bl	10ff0 <error@plt>
   12528:	movw	r3, #33048	; 0x8118
   1252c:	movt	r3, #2
   12530:	ldr	r0, [r3]
   12534:	bl	10f24 <_exit@plt>
   12538:	mov	r3, r6
   1253c:	movw	r2, #28464	; 0x6f30
   12540:	movt	r2, #1
   12544:	ldr	r1, [r5]
   12548:	bl	10ff0 <error@plt>
   1254c:	b	12528 <__assert_fail@plt+0x13ac>
   12550:	strd	r4, [sp, #-12]!
   12554:	mov	r5, r0
   12558:	str	lr, [sp, #8]
   1255c:	sub	sp, sp, #12
   12560:	bl	11080 <__errno_location@plt>
   12564:	mov	r4, r0
   12568:	mov	r2, #0
   1256c:	ldr	r3, [r4]
   12570:	mov	r0, r5
   12574:	str	r2, [r4]
   12578:	str	r3, [sp]
   1257c:	str	r3, [sp, #4]
   12580:	bl	10f18 <free@plt>
   12584:	ldr	r3, [r4]
   12588:	add	r2, sp, #8
   1258c:	clz	r3, r3
   12590:	lsr	r3, r3, #5
   12594:	add	r3, r2, r3, lsl #2
   12598:	ldr	r3, [r3, #-8]
   1259c:	str	r3, [r4]
   125a0:	add	sp, sp, #12
   125a4:	ldrd	r4, [sp]
   125a8:	add	sp, sp, #8
   125ac:	pop	{pc}		; (ldr pc, [sp], #4)
   125b0:	mov	r3, #0
   125b4:	strd	r4, [sp, #-16]!
   125b8:	mov	r4, r0
   125bc:	mov	r5, r1
   125c0:	str	r6, [sp, #8]
   125c4:	add	r6, r2, #20
   125c8:	str	lr, [sp, #12]
   125cc:	strb	r3, [r2, #20]
   125d0:	mov	r0, r4
   125d4:	mov	r1, r5
   125d8:	mov	r2, #10
   125dc:	mov	r3, #0
   125e0:	bl	16470 <__assert_fail@plt+0x52f4>
   125e4:	add	ip, r2, #48	; 0x30
   125e8:	mov	r0, r4
   125ec:	mov	r1, r5
   125f0:	mov	r2, #10
   125f4:	mov	r3, #0
   125f8:	strb	ip, [r6, #-1]!
   125fc:	bl	16470 <__assert_fail@plt+0x52f4>
   12600:	cmp	r5, #0
   12604:	mov	r5, r1
   12608:	cmpeq	r4, #9
   1260c:	mov	r4, r0
   12610:	bhi	125d0 <__assert_fail@plt+0x1454>
   12614:	mov	r0, r6
   12618:	ldrd	r4, [sp]
   1261c:	ldr	r6, [sp, #8]
   12620:	add	sp, sp, #12
   12624:	pop	{pc}		; (ldr pc, [sp], #4)
   12628:	strd	r4, [sp, #-16]!
   1262c:	subs	r4, r0, #0
   12630:	str	r6, [sp, #8]
   12634:	str	lr, [sp, #12]
   12638:	beq	126d0 <__assert_fail@plt+0x1554>
   1263c:	mov	r1, #47	; 0x2f
   12640:	bl	1111c <strrchr@plt>
   12644:	subs	r5, r0, #0
   12648:	beq	126a8 <__assert_fail@plt+0x152c>
   1264c:	add	r6, r5, #1
   12650:	sub	r3, r6, r4
   12654:	cmp	r3, #6
   12658:	ble	126a8 <__assert_fail@plt+0x152c>
   1265c:	movw	r1, #28524	; 0x6f6c
   12660:	movt	r1, #1
   12664:	mov	r2, #7
   12668:	sub	r0, r5, #6
   1266c:	bl	1114c <strncmp@plt>
   12670:	cmp	r0, #0
   12674:	bne	126a8 <__assert_fail@plt+0x152c>
   12678:	movw	r1, #28532	; 0x6f74
   1267c:	movt	r1, #1
   12680:	mov	r2, #3
   12684:	mov	r0, r6
   12688:	bl	1114c <strncmp@plt>
   1268c:	cmp	r0, #0
   12690:	movne	r4, r6
   12694:	bne	126a8 <__assert_fail@plt+0x152c>
   12698:	add	r4, r5, #4
   1269c:	movw	r3, #33120	; 0x8160
   126a0:	movt	r3, #2
   126a4:	str	r4, [r3]
   126a8:	movw	r2, #33260	; 0x81ec
   126ac:	movt	r2, #2
   126b0:	ldr	r6, [sp, #8]
   126b4:	movw	r3, #33124	; 0x8164
   126b8:	movt	r3, #2
   126bc:	str	r4, [r2]
   126c0:	str	r4, [r3]
   126c4:	ldrd	r4, [sp]
   126c8:	add	sp, sp, #12
   126cc:	pop	{pc}		; (ldr pc, [sp], #4)
   126d0:	movw	r3, #33136	; 0x8170
   126d4:	movt	r3, #2
   126d8:	movw	r0, #28468	; 0x6f34
   126dc:	movt	r0, #1
   126e0:	ldr	r3, [r3]
   126e4:	mov	r2, #55	; 0x37
   126e8:	mov	r1, #1
   126ec:	bl	10fa8 <fwrite@plt>
   126f0:	bl	11158 <abort@plt>
   126f4:	strd	r4, [sp, #-16]!
   126f8:	mov	r4, #0
   126fc:	mov	r5, #0
   12700:	cmp	r1, #10
   12704:	str	r6, [sp, #8]
   12708:	strd	r4, [r0]
   1270c:	strd	r4, [r0, #8]
   12710:	str	lr, [sp, #12]
   12714:	strd	r4, [r0, #16]
   12718:	strd	r4, [r0, #24]
   1271c:	strd	r4, [r0, #32]
   12720:	strd	r4, [r0, #40]	; 0x28
   12724:	beq	1273c <__assert_fail@plt+0x15c0>
   12728:	ldrd	r4, [sp]
   1272c:	str	r1, [r0]
   12730:	ldr	r6, [sp, #8]
   12734:	add	sp, sp, #12
   12738:	pop	{pc}		; (ldr pc, [sp], #4)
   1273c:	bl	11158 <abort@plt>
   12740:	mov	r2, #5
   12744:	strd	r4, [sp, #-16]!
   12748:	mov	r5, r0
   1274c:	str	r6, [sp, #8]
   12750:	mov	r6, r1
   12754:	mov	r1, r0
   12758:	mov	r0, #0
   1275c:	str	lr, [sp, #12]
   12760:	bl	10f60 <dcgettext@plt>
   12764:	cmp	r5, r0
   12768:	mov	r4, r0
   1276c:	beq	12784 <__assert_fail@plt+0x1608>
   12770:	mov	r0, r4
   12774:	ldrd	r4, [sp]
   12778:	ldr	r6, [sp, #8]
   1277c:	add	sp, sp, #12
   12780:	pop	{pc}		; (ldr pc, [sp], #4)
   12784:	bl	16030 <__assert_fail@plt+0x4eb4>
   12788:	ldrb	r3, [r0]
   1278c:	bic	r3, r3, #32
   12790:	cmp	r3, #85	; 0x55
   12794:	bne	127fc <__assert_fail@plt+0x1680>
   12798:	ldrb	r3, [r0, #1]
   1279c:	bic	r3, r3, #32
   127a0:	cmp	r3, #84	; 0x54
   127a4:	bne	1287c <__assert_fail@plt+0x1700>
   127a8:	ldrb	r3, [r0, #2]
   127ac:	bic	r3, r3, #32
   127b0:	cmp	r3, #70	; 0x46
   127b4:	bne	1287c <__assert_fail@plt+0x1700>
   127b8:	ldrb	r3, [r0, #3]
   127bc:	cmp	r3, #45	; 0x2d
   127c0:	bne	1287c <__assert_fail@plt+0x1700>
   127c4:	ldrb	r3, [r0, #4]
   127c8:	cmp	r3, #56	; 0x38
   127cc:	bne	1287c <__assert_fail@plt+0x1700>
   127d0:	ldrb	r3, [r0, #5]
   127d4:	cmp	r3, #0
   127d8:	bne	1287c <__assert_fail@plt+0x1700>
   127dc:	ldrb	r2, [r4]
   127e0:	movw	r3, #28624	; 0x6fd0
   127e4:	movt	r3, #1
   127e8:	movw	r4, #28636	; 0x6fdc
   127ec:	movt	r4, #1
   127f0:	cmp	r2, #96	; 0x60
   127f4:	movne	r4, r3
   127f8:	b	12770 <__assert_fail@plt+0x15f4>
   127fc:	cmp	r3, #71	; 0x47
   12800:	bne	1287c <__assert_fail@plt+0x1700>
   12804:	ldrb	r3, [r0, #1]
   12808:	bic	r3, r3, #32
   1280c:	cmp	r3, #66	; 0x42
   12810:	bne	1287c <__assert_fail@plt+0x1700>
   12814:	ldrb	r3, [r0, #2]
   12818:	cmp	r3, #49	; 0x31
   1281c:	bne	1287c <__assert_fail@plt+0x1700>
   12820:	ldrb	r3, [r0, #3]
   12824:	cmp	r3, #56	; 0x38
   12828:	bne	1287c <__assert_fail@plt+0x1700>
   1282c:	ldrb	r3, [r0, #4]
   12830:	cmp	r3, #48	; 0x30
   12834:	bne	1287c <__assert_fail@plt+0x1700>
   12838:	ldrb	r3, [r0, #5]
   1283c:	cmp	r3, #51	; 0x33
   12840:	bne	1287c <__assert_fail@plt+0x1700>
   12844:	ldrb	r3, [r0, #6]
   12848:	cmp	r3, #48	; 0x30
   1284c:	bne	1287c <__assert_fail@plt+0x1700>
   12850:	ldrb	r3, [r0, #7]
   12854:	cmp	r3, #0
   12858:	bne	1287c <__assert_fail@plt+0x1700>
   1285c:	ldrb	r2, [r4]
   12860:	movw	r3, #28628	; 0x6fd4
   12864:	movt	r3, #1
   12868:	movw	r4, #28632	; 0x6fd8
   1286c:	movt	r4, #1
   12870:	cmp	r2, #96	; 0x60
   12874:	movne	r4, r3
   12878:	b	12770 <__assert_fail@plt+0x15f4>
   1287c:	movw	r3, #28640	; 0x6fe0
   12880:	movt	r3, #1
   12884:	cmp	r6, #9
   12888:	movw	r4, #28620	; 0x6fcc
   1288c:	movt	r4, #1
   12890:	movne	r4, r3
   12894:	b	12770 <__assert_fail@plt+0x15f4>
   12898:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1289c:	strd	r6, [sp, #8]
   128a0:	strd	r8, [sp, #16]
   128a4:	strd	sl, [sp, #24]
   128a8:	mov	fp, r0
   128ac:	mov	sl, r1
   128b0:	str	lr, [sp, #32]
   128b4:	sub	sp, sp, #116	; 0x74
   128b8:	ldr	r8, [sp, #152]	; 0x98
   128bc:	str	r3, [sp, #28]
   128c0:	ldr	r3, [sp, #156]	; 0x9c
   128c4:	str	r2, [sp, #32]
   128c8:	and	r4, r3, #2
   128cc:	ubfx	r3, r3, #1, #1
   128d0:	str	r3, [sp, #44]	; 0x2c
   128d4:	bl	10fc0 <__ctype_get_mb_cur_max@plt>
   128d8:	str	r0, [sp, #64]	; 0x40
   128dc:	cmp	r8, #10
   128e0:	ldrls	pc, [pc, r8, lsl #2]
   128e4:	b	14054 <__assert_fail@plt+0x2ed8>
   128e8:	andeq	r2, r1, ip, ror #25
   128ec:	andeq	r2, r1, r8, lsl #27
   128f0:	andeq	r3, r1, r4, ror #6
   128f4:	andeq	r2, r1, r8, lsr #27
   128f8:	andeq	r2, r1, r0, asr ip
   128fc:	muleq	r1, ip, ip
   12900:	andeq	r2, r1, ip, lsl sp
   12904:	andeq	r2, r1, r8, asr sp
   12908:	andeq	r2, r1, r4, lsl r9
   1290c:	andeq	r2, r1, r4, lsl r9
   12910:	andeq	r2, r1, r4, lsl r9
   12914:	cmp	r8, #10
   12918:	beq	12944 <__assert_fail@plt+0x17c8>
   1291c:	mov	r1, r8
   12920:	movw	r0, #28644	; 0x6fe4
   12924:	movt	r0, #1
   12928:	bl	12740 <__assert_fail@plt+0x15c4>
   1292c:	mov	r1, r8
   12930:	str	r0, [sp, #164]	; 0xa4
   12934:	movw	r0, #28640	; 0x6fe0
   12938:	movt	r0, #1
   1293c:	bl	12740 <__assert_fail@plt+0x15c4>
   12940:	str	r0, [sp, #168]	; 0xa8
   12944:	cmp	r4, #0
   12948:	movne	r4, #0
   1294c:	beq	13d30 <__assert_fail@plt+0x2bb4>
   12950:	mov	r3, #1
   12954:	mov	r5, #0
   12958:	ldr	r0, [sp, #168]	; 0xa8
   1295c:	str	r3, [sp, #36]	; 0x24
   12960:	str	r3, [sp, #40]	; 0x28
   12964:	str	r5, [sp, #68]	; 0x44
   12968:	bl	11068 <strlen@plt>
   1296c:	ldr	r3, [sp, #168]	; 0xa8
   12970:	str	r5, [sp, #48]	; 0x30
   12974:	str	r0, [sp, #56]	; 0x38
   12978:	str	r3, [sp, #60]	; 0x3c
   1297c:	str	r5, [sp, #72]	; 0x48
   12980:	str	r8, [sp, #152]	; 0x98
   12984:	mov	r8, fp
   12988:	mov	r9, #0
   1298c:	ldr	fp, [sp, #152]	; 0x98
   12990:	ldr	r3, [sp, #28]
   12994:	cmn	r3, #1
   12998:	beq	12ef8 <__assert_fail@plt+0x1d7c>
   1299c:	ldr	r3, [sp, #28]
   129a0:	subs	r6, r3, r9
   129a4:	movne	r6, #1
   129a8:	cmp	r6, #0
   129ac:	beq	12f10 <__assert_fail@plt+0x1d94>
   129b0:	ldr	r0, [sp, #32]
   129b4:	ldr	r7, [sp, #40]	; 0x28
   129b8:	add	r3, r0, r9
   129bc:	cmp	fp, #2
   129c0:	moveq	r7, #0
   129c4:	andne	r7, r7, #1
   129c8:	str	r3, [sp, #52]	; 0x34
   129cc:	cmp	r7, #0
   129d0:	beq	133ac <__assert_fail@plt+0x2230>
   129d4:	ldr	r2, [sp, #56]	; 0x38
   129d8:	cmp	r2, #0
   129dc:	beq	13648 <__assert_fail@plt+0x24cc>
   129e0:	ldr	r1, [sp, #28]
   129e4:	cmp	r2, #1
   129e8:	mov	r3, r2
   129ec:	movls	r3, #0
   129f0:	movhi	r3, #1
   129f4:	add	r5, r9, r2
   129f8:	cmn	r1, #1
   129fc:	movne	r3, #0
   12a00:	cmp	r3, #0
   12a04:	beq	12a10 <__assert_fail@plt+0x1894>
   12a08:	bl	11068 <strlen@plt>
   12a0c:	str	r0, [sp, #28]
   12a10:	ldr	r3, [sp, #28]
   12a14:	cmp	r5, r3
   12a18:	bhi	13648 <__assert_fail@plt+0x24cc>
   12a1c:	ldr	r0, [sp, #52]	; 0x34
   12a20:	ldr	r2, [sp, #56]	; 0x38
   12a24:	ldr	r1, [sp, #60]	; 0x3c
   12a28:	bl	10f48 <memcmp@plt>
   12a2c:	cmp	r0, #0
   12a30:	bne	13648 <__assert_fail@plt+0x24cc>
   12a34:	ldr	r3, [sp, #44]	; 0x2c
   12a38:	cmp	r3, #0
   12a3c:	bne	13f78 <__assert_fail@plt+0x2dfc>
   12a40:	ldr	r3, [sp, #52]	; 0x34
   12a44:	ldrb	r5, [r3]
   12a48:	cmp	r5, #126	; 0x7e
   12a4c:	ldrls	pc, [pc, r5, lsl #2]
   12a50:	b	13308 <__assert_fail@plt+0x218c>
   12a54:	andeq	r3, r1, ip, lsl #4
   12a58:	andeq	r3, r1, r8, lsl #6
   12a5c:	andeq	r3, r1, r8, lsl #6
   12a60:	andeq	r3, r1, r8, lsl #6
   12a64:	andeq	r3, r1, r8, lsl #6
   12a68:	andeq	r3, r1, r8, lsl #6
   12a6c:	andeq	r3, r1, r8, lsl #6
   12a70:	andeq	r3, r1, r0, ror #3
   12a74:	ldrdeq	r3, [r1], -r8
   12a78:	andeq	r3, r1, r0, lsr #2
   12a7c:	andeq	r3, r1, ip, asr #3
   12a80:	andeq	r3, r1, r8, lsl r1
   12a84:	andeq	r3, r1, r8, lsr #3
   12a88:	strdeq	r3, [r1], -r4
   12a8c:	andeq	r3, r1, r8, lsl #6
   12a90:	andeq	r3, r1, r8, lsl #6
   12a94:	andeq	r3, r1, r8, lsl #6
   12a98:	andeq	r3, r1, r8, lsl #6
   12a9c:	andeq	r3, r1, r8, lsl #6
   12aa0:	andeq	r3, r1, r8, lsl #6
   12aa4:	andeq	r3, r1, r8, lsl #6
   12aa8:	andeq	r3, r1, r8, lsl #6
   12aac:	andeq	r3, r1, r8, lsl #6
   12ab0:	andeq	r3, r1, r8, lsl #6
   12ab4:	andeq	r3, r1, r8, lsl #6
   12ab8:	andeq	r3, r1, r8, lsl #6
   12abc:	andeq	r3, r1, r8, lsl #6
   12ac0:	andeq	r3, r1, r8, lsl #6
   12ac4:	andeq	r3, r1, r8, lsl #6
   12ac8:	andeq	r3, r1, r8, lsl #6
   12acc:	andeq	r3, r1, r8, lsl #6
   12ad0:	andeq	r3, r1, r8, lsl #6
   12ad4:	andeq	r3, r1, r4, ror #5
   12ad8:	andeq	r3, r1, ip, ror #3
   12adc:	andeq	r3, r1, ip, ror #3
   12ae0:	andeq	r3, r1, r8, asr #5
   12ae4:	andeq	r3, r1, ip, ror #3
   12ae8:	strdeq	r3, [r1], -ip
   12aec:	andeq	r3, r1, ip, ror #3
   12af0:	andeq	r3, r1, r8, asr #32
   12af4:	andeq	r3, r1, ip, ror #3
   12af8:	andeq	r3, r1, ip, ror #3
   12afc:	andeq	r3, r1, ip, ror #3
   12b00:	strdeq	r3, [r1], -ip
   12b04:	strdeq	r3, [r1], -ip
   12b08:	strdeq	r3, [r1], -ip
   12b0c:	strdeq	r3, [r1], -ip
   12b10:	strdeq	r3, [r1], -ip
   12b14:	strdeq	r3, [r1], -ip
   12b18:	strdeq	r3, [r1], -ip
   12b1c:	strdeq	r3, [r1], -ip
   12b20:	strdeq	r3, [r1], -ip
   12b24:	strdeq	r3, [r1], -ip
   12b28:	strdeq	r3, [r1], -ip
   12b2c:	strdeq	r3, [r1], -ip
   12b30:	strdeq	r3, [r1], -ip
   12b34:	strdeq	r3, [r1], -ip
   12b38:	strdeq	r3, [r1], -ip
   12b3c:	strdeq	r3, [r1], -ip
   12b40:	andeq	r3, r1, ip, ror #3
   12b44:	andeq	r3, r1, ip, ror #3
   12b48:	andeq	r3, r1, ip, ror #3
   12b4c:	andeq	r3, r1, ip, ror #3
   12b50:	andeq	r3, r1, ip, lsl r0
   12b54:	andeq	r3, r1, r8, lsl #6
   12b58:	strdeq	r3, [r1], -ip
   12b5c:	strdeq	r3, [r1], -ip
   12b60:	strdeq	r3, [r1], -ip
   12b64:	strdeq	r3, [r1], -ip
   12b68:	strdeq	r3, [r1], -ip
   12b6c:	strdeq	r3, [r1], -ip
   12b70:	strdeq	r3, [r1], -ip
   12b74:	strdeq	r3, [r1], -ip
   12b78:	strdeq	r3, [r1], -ip
   12b7c:	strdeq	r3, [r1], -ip
   12b80:	strdeq	r3, [r1], -ip
   12b84:	strdeq	r3, [r1], -ip
   12b88:	strdeq	r3, [r1], -ip
   12b8c:	strdeq	r3, [r1], -ip
   12b90:	strdeq	r3, [r1], -ip
   12b94:	strdeq	r3, [r1], -ip
   12b98:	strdeq	r3, [r1], -ip
   12b9c:	strdeq	r3, [r1], -ip
   12ba0:	strdeq	r3, [r1], -ip
   12ba4:	strdeq	r3, [r1], -ip
   12ba8:	strdeq	r3, [r1], -ip
   12bac:	strdeq	r3, [r1], -ip
   12bb0:	strdeq	r3, [r1], -ip
   12bb4:	strdeq	r3, [r1], -ip
   12bb8:	strdeq	r3, [r1], -ip
   12bbc:	strdeq	r3, [r1], -ip
   12bc0:	andeq	r3, r1, ip, ror #3
   12bc4:	andeq	r2, r1, r4, asr #31
   12bc8:	strdeq	r3, [r1], -ip
   12bcc:	andeq	r3, r1, ip, ror #3
   12bd0:	strdeq	r3, [r1], -ip
   12bd4:	andeq	r3, r1, ip, ror #3
   12bd8:	strdeq	r3, [r1], -ip
   12bdc:	strdeq	r3, [r1], -ip
   12be0:	strdeq	r3, [r1], -ip
   12be4:	strdeq	r3, [r1], -ip
   12be8:	strdeq	r3, [r1], -ip
   12bec:	strdeq	r3, [r1], -ip
   12bf0:	strdeq	r3, [r1], -ip
   12bf4:	strdeq	r3, [r1], -ip
   12bf8:	strdeq	r3, [r1], -ip
   12bfc:	strdeq	r3, [r1], -ip
   12c00:	strdeq	r3, [r1], -ip
   12c04:	strdeq	r3, [r1], -ip
   12c08:	strdeq	r3, [r1], -ip
   12c0c:	strdeq	r3, [r1], -ip
   12c10:	strdeq	r3, [r1], -ip
   12c14:	strdeq	r3, [r1], -ip
   12c18:	strdeq	r3, [r1], -ip
   12c1c:	strdeq	r3, [r1], -ip
   12c20:	strdeq	r3, [r1], -ip
   12c24:	strdeq	r3, [r1], -ip
   12c28:	strdeq	r3, [r1], -ip
   12c2c:	strdeq	r3, [r1], -ip
   12c30:	strdeq	r3, [r1], -ip
   12c34:	strdeq	r3, [r1], -ip
   12c38:	strdeq	r3, [r1], -ip
   12c3c:	strdeq	r3, [r1], -ip
   12c40:	andeq	r2, r1, r8, ror #27
   12c44:	andeq	r3, r1, ip, ror #3
   12c48:	andeq	r2, r1, r8, ror #27
   12c4c:	andeq	r3, r1, r8, asr #5
   12c50:	cmp	r4, #0
   12c54:	moveq	r3, #1
   12c58:	streq	r3, [sp, #40]	; 0x28
   12c5c:	beq	13370 <__assert_fail@plt+0x21f4>
   12c60:	mov	r3, #0
   12c64:	mov	r2, #1
   12c68:	mov	r4, r3
   12c6c:	str	r2, [sp, #36]	; 0x24
   12c70:	str	r2, [sp, #44]	; 0x2c
   12c74:	str	r2, [sp, #56]	; 0x38
   12c78:	str	r3, [sp, #68]	; 0x44
   12c7c:	movw	r3, #28640	; 0x6fe0
   12c80:	movt	r3, #1
   12c84:	str	r4, [sp, #40]	; 0x28
   12c88:	mov	r8, #2
   12c8c:	str	r4, [sp, #48]	; 0x30
   12c90:	str	r3, [sp, #60]	; 0x3c
   12c94:	str	r4, [sp, #72]	; 0x48
   12c98:	b	12980 <__assert_fail@plt+0x1804>
   12c9c:	cmp	r4, #0
   12ca0:	bne	13eec <__assert_fail@plt+0x2d70>
   12ca4:	cmp	sl, #0
   12ca8:	beq	13cac <__assert_fail@plt+0x2b30>
   12cac:	mov	r3, #34	; 0x22
   12cb0:	mov	r1, r4
   12cb4:	mov	r2, #1
   12cb8:	strb	r3, [fp]
   12cbc:	movw	r3, #28620	; 0x6fcc
   12cc0:	movt	r3, #1
   12cc4:	mov	r4, r2
   12cc8:	str	r2, [sp, #36]	; 0x24
   12ccc:	str	r2, [sp, #40]	; 0x28
   12cd0:	str	r1, [sp, #44]	; 0x2c
   12cd4:	str	r1, [sp, #48]	; 0x30
   12cd8:	str	r2, [sp, #56]	; 0x38
   12cdc:	str	r3, [sp, #60]	; 0x3c
   12ce0:	str	r1, [sp, #68]	; 0x44
   12ce4:	str	r1, [sp, #72]	; 0x48
   12ce8:	b	12980 <__assert_fail@plt+0x1804>
   12cec:	mov	r3, #0
   12cf0:	mov	r4, r8
   12cf4:	str	r3, [sp, #40]	; 0x28
   12cf8:	str	r3, [sp, #44]	; 0x2c
   12cfc:	str	r3, [sp, #48]	; 0x30
   12d00:	str	r8, [sp, #56]	; 0x38
   12d04:	str	r3, [sp, #60]	; 0x3c
   12d08:	str	r3, [sp, #68]	; 0x44
   12d0c:	mov	r3, #1
   12d10:	str	r3, [sp, #36]	; 0x24
   12d14:	str	r8, [sp, #72]	; 0x48
   12d18:	b	12980 <__assert_fail@plt+0x1804>
   12d1c:	mov	r3, #1
   12d20:	mov	r2, #0
   12d24:	mov	r4, r2
   12d28:	mov	r8, #5
   12d2c:	str	r3, [sp, #36]	; 0x24
   12d30:	str	r3, [sp, #40]	; 0x28
   12d34:	str	r3, [sp, #44]	; 0x2c
   12d38:	str	r2, [sp, #48]	; 0x30
   12d3c:	str	r3, [sp, #56]	; 0x38
   12d40:	movw	r3, #28620	; 0x6fcc
   12d44:	movt	r3, #1
   12d48:	str	r3, [sp, #60]	; 0x3c
   12d4c:	str	r2, [sp, #68]	; 0x44
   12d50:	str	r2, [sp, #72]	; 0x48
   12d54:	b	12980 <__assert_fail@plt+0x1804>
   12d58:	mov	r3, #0
   12d5c:	mov	r2, #1
   12d60:	mov	r4, r3
   12d64:	str	r2, [sp, #36]	; 0x24
   12d68:	str	r2, [sp, #40]	; 0x28
   12d6c:	str	r3, [sp, #44]	; 0x2c
   12d70:	str	r3, [sp, #48]	; 0x30
   12d74:	str	r3, [sp, #56]	; 0x38
   12d78:	str	r3, [sp, #60]	; 0x3c
   12d7c:	str	r3, [sp, #68]	; 0x44
   12d80:	str	r3, [sp, #72]	; 0x48
   12d84:	b	12980 <__assert_fail@plt+0x1804>
   12d88:	mov	r2, #1
   12d8c:	mov	r3, #0
   12d90:	mov	r4, r3
   12d94:	str	r2, [sp, #36]	; 0x24
   12d98:	str	r2, [sp, #44]	; 0x2c
   12d9c:	str	r8, [sp, #56]	; 0x38
   12da0:	str	r3, [sp, #68]	; 0x44
   12da4:	b	12c7c <__assert_fail@plt+0x1b00>
   12da8:	mov	r3, #1
   12dac:	mov	r2, #0
   12db0:	mov	r4, r2
   12db4:	mov	r8, #2
   12db8:	str	r3, [sp, #36]	; 0x24
   12dbc:	str	r3, [sp, #40]	; 0x28
   12dc0:	str	r3, [sp, #44]	; 0x2c
   12dc4:	str	r2, [sp, #48]	; 0x30
   12dc8:	str	r3, [sp, #56]	; 0x38
   12dcc:	movw	r3, #28640	; 0x6fe0
   12dd0:	movt	r3, #1
   12dd4:	str	r3, [sp, #60]	; 0x3c
   12dd8:	str	r2, [sp, #68]	; 0x44
   12ddc:	str	r2, [sp, #72]	; 0x48
   12de0:	b	12980 <__assert_fail@plt+0x1804>
   12de4:	mov	r7, #0
   12de8:	ldr	r3, [sp, #28]
   12dec:	cmn	r3, #1
   12df0:	beq	138c8 <__assert_fail@plt+0x274c>
   12df4:	ldr	r3, [sp, #28]
   12df8:	subs	r2, r3, #1
   12dfc:	movne	r2, #1
   12e00:	sub	r3, fp, #2
   12e04:	cmp	r2, #0
   12e08:	clz	r3, r3
   12e0c:	lsr	r3, r3, #5
   12e10:	bne	12e1c <__assert_fail@plt+0x1ca0>
   12e14:	cmp	r9, #0
   12e18:	beq	13628 <__assert_fail@plt+0x24ac>
   12e1c:	mov	r6, #0
   12e20:	ldr	r2, [sp, #40]	; 0x28
   12e24:	eor	r2, r2, #1
   12e28:	orrs	r3, r3, r2
   12e2c:	bne	13004 <__assert_fail@plt+0x1e88>
   12e30:	ldr	r2, [sp, #160]	; 0xa0
   12e34:	cmp	r2, #0
   12e38:	beq	12e58 <__assert_fail@plt+0x1cdc>
   12e3c:	ldr	r0, [sp, #160]	; 0xa0
   12e40:	ubfx	r1, r5, #5, #8
   12e44:	and	r2, r5, #31
   12e48:	ldr	r1, [r0, r1, lsl #2]
   12e4c:	lsr	r2, r1, r2
   12e50:	tst	r2, #1
   12e54:	bne	12e60 <__assert_fail@plt+0x1ce4>
   12e58:	cmp	r7, #0
   12e5c:	beq	130d0 <__assert_fail@plt+0x1f54>
   12e60:	ldr	r2, [sp, #44]	; 0x2c
   12e64:	sub	r3, fp, #2
   12e68:	clz	r3, r3
   12e6c:	lsr	r3, r3, #5
   12e70:	cmp	r2, #0
   12e74:	bne	13c1c <__assert_fail@plt+0x2aa0>
   12e78:	ldr	r2, [sp, #48]	; 0x30
   12e7c:	eor	r2, r2, #1
   12e80:	ands	r3, r3, r2
   12e84:	beq	12ebc <__assert_fail@plt+0x1d40>
   12e88:	cmp	sl, r4
   12e8c:	str	r3, [sp, #48]	; 0x30
   12e90:	movhi	r2, #39	; 0x27
   12e94:	strbhi	r2, [r8, r4]
   12e98:	add	r2, r4, #1
   12e9c:	cmp	sl, r2
   12ea0:	movhi	r1, #36	; 0x24
   12ea4:	strbhi	r1, [r8, r2]
   12ea8:	add	r2, r4, #2
   12eac:	add	r4, r4, #3
   12eb0:	cmp	sl, r2
   12eb4:	movhi	r1, #39	; 0x27
   12eb8:	strbhi	r1, [r8, r2]
   12ebc:	cmp	r4, sl
   12ec0:	add	r9, r9, #1
   12ec4:	movcc	r3, #92	; 0x5c
   12ec8:	strbcc	r3, [r8, r4]
   12ecc:	add	r4, r4, #1
   12ed0:	cmp	r4, sl
   12ed4:	ldr	r3, [sp, #36]	; 0x24
   12ed8:	strbcc	r5, [r8, r4]
   12edc:	cmp	r6, #0
   12ee0:	add	r4, r4, #1
   12ee4:	moveq	r3, #0
   12ee8:	str	r3, [sp, #36]	; 0x24
   12eec:	ldr	r3, [sp, #28]
   12ef0:	cmn	r3, #1
   12ef4:	bne	1299c <__assert_fail@plt+0x1820>
   12ef8:	ldr	r3, [sp, #32]
   12efc:	ldrb	r6, [r3, r9]
   12f00:	adds	r6, r6, #0
   12f04:	movne	r6, #1
   12f08:	cmp	r6, #0
   12f0c:	bne	129b0 <__assert_fail@plt+0x1834>
   12f10:	str	fp, [sp, #152]	; 0x98
   12f14:	mov	fp, r8
   12f18:	cmp	r4, #0
   12f1c:	ldr	r1, [sp, #44]	; 0x2c
   12f20:	movne	r3, #0
   12f24:	ldr	r8, [sp, #152]	; 0x98
   12f28:	sub	r2, r8, #2
   12f2c:	clz	r2, r2
   12f30:	lsr	r2, r2, #5
   12f34:	andeq	r3, r2, r1
   12f38:	cmp	r3, #0
   12f3c:	bne	13ff8 <__assert_fail@plt+0x2e7c>
   12f40:	eor	r3, r1, #1
   12f44:	ands	r2, r2, r3
   12f48:	beq	13f24 <__assert_fail@plt+0x2da8>
   12f4c:	ldr	r3, [sp, #68]	; 0x44
   12f50:	cmp	r3, #0
   12f54:	beq	13f28 <__assert_fail@plt+0x2dac>
   12f58:	ldr	r3, [sp, #36]	; 0x24
   12f5c:	cmp	r3, #0
   12f60:	bne	13fb4 <__assert_fail@plt+0x2e38>
   12f64:	ldr	r3, [sp, #72]	; 0x48
   12f68:	adds	r3, r3, #0
   12f6c:	movne	r3, #1
   12f70:	cmp	sl, #0
   12f74:	movne	r3, #0
   12f78:	cmp	r3, #0
   12f7c:	ldreq	r2, [sp, #68]	; 0x44
   12f80:	beq	13f28 <__assert_fail@plt+0x2dac>
   12f84:	ldr	r2, [sp, #72]	; 0x48
   12f88:	str	r3, [sp, #68]	; 0x44
   12f8c:	movw	r3, #28640	; 0x6fe0
   12f90:	movt	r3, #1
   12f94:	mov	r1, #39	; 0x27
   12f98:	mov	r4, #1
   12f9c:	ldr	sl, [sp, #72]	; 0x48
   12fa0:	mov	r8, #2
   12fa4:	str	r3, [sp, #60]	; 0x3c
   12fa8:	mov	r3, #0
   12fac:	strb	r1, [fp]
   12fb0:	str	r3, [sp, #44]	; 0x2c
   12fb4:	str	r4, [sp, #56]	; 0x38
   12fb8:	str	r2, [sp, #72]	; 0x48
   12fbc:	b	12980 <__assert_fail@plt+0x1804>
   12fc0:	mov	r7, #0
   12fc4:	cmp	fp, #2
   12fc8:	beq	138a8 <__assert_fail@plt+0x272c>
   12fcc:	ldr	r2, [sp, #40]	; 0x28
   12fd0:	ldr	r3, [sp, #56]	; 0x38
   12fd4:	ldr	r1, [sp, #44]	; 0x2c
   12fd8:	cmp	r3, #0
   12fdc:	moveq	r3, #0
   12fe0:	andne	r3, r2, r1
   12fe4:	cmp	r3, #0
   12fe8:	moveq	r5, #92	; 0x5c
   12fec:	moveq	r3, r5
   12ff0:	bne	138b4 <__assert_fail@plt+0x2738>
   12ff4:	ldr	r2, [sp, #40]	; 0x28
   12ff8:	cmp	r2, #0
   12ffc:	bne	13cf0 <__assert_fail@plt+0x2b74>
   13000:	mov	r6, #0
   13004:	ldr	r3, [sp, #44]	; 0x2c
   13008:	cmp	r3, #0
   1300c:	beq	138a0 <__assert_fail@plt+0x2724>
   13010:	mov	r3, #0
   13014:	b	12e30 <__assert_fail@plt+0x1cb4>
   13018:	mov	r7, #0
   1301c:	cmp	fp, #2
   13020:	beq	13918 <__assert_fail@plt+0x279c>
   13024:	cmp	fp, #5
   13028:	beq	138dc <__assert_fail@plt+0x2760>
   1302c:	sub	r3, fp, #2
   13030:	mov	r6, #0
   13034:	clz	r3, r3
   13038:	mov	r5, #63	; 0x3f
   1303c:	lsr	r3, r3, #5
   13040:	b	12e20 <__assert_fail@plt+0x1ca4>
   13044:	mov	r7, #0
   13048:	cmp	fp, #2
   1304c:	movne	r3, #0
   13050:	movne	r5, #39	; 0x27
   13054:	strne	r6, [sp, #68]	; 0x44
   13058:	bne	12e20 <__assert_fail@plt+0x1ca4>
   1305c:	ldr	r3, [sp, #44]	; 0x2c
   13060:	cmp	r3, #0
   13064:	bne	13d20 <__assert_fail@plt+0x2ba4>
   13068:	ldr	r3, [sp, #72]	; 0x48
   1306c:	cmp	sl, #0
   13070:	clz	r3, r3
   13074:	lsr	r3, r3, #5
   13078:	moveq	r3, #0
   1307c:	cmp	r3, #0
   13080:	bne	13c4c <__assert_fail@plt+0x2ad0>
   13084:	cmp	sl, r4
   13088:	movhi	r3, #39	; 0x27
   1308c:	strbhi	r3, [r8, r4]
   13090:	add	r3, r4, #1
   13094:	cmp	sl, r3
   13098:	movhi	r2, #92	; 0x5c
   1309c:	strbhi	r2, [r8, r3]
   130a0:	add	r3, r4, #2
   130a4:	cmp	sl, r3
   130a8:	bls	130b4 <__assert_fail@plt+0x1f38>
   130ac:	mov	r2, #39	; 0x27
   130b0:	strb	r2, [r8, r3]
   130b4:	mov	r3, #0
   130b8:	cmp	r7, #0
   130bc:	add	r4, r4, #3
   130c0:	mov	r5, #39	; 0x27
   130c4:	str	r3, [sp, #48]	; 0x30
   130c8:	str	r6, [sp, #68]	; 0x44
   130cc:	bne	12e60 <__assert_fail@plt+0x1ce4>
   130d0:	ldr	r2, [sp, #48]	; 0x30
   130d4:	eor	r3, r3, #1
   130d8:	add	r9, r9, #1
   130dc:	and	r3, r3, r2
   130e0:	uxtb	r3, r3
   130e4:	cmp	r3, #0
   130e8:	beq	12ed0 <__assert_fail@plt+0x1d54>
   130ec:	cmp	sl, r4
   130f0:	movhi	r3, #39	; 0x27
   130f4:	strbhi	r3, [r8, r4]
   130f8:	add	r3, r4, #1
   130fc:	add	r4, r4, #2
   13100:	cmp	sl, r3
   13104:	movhi	r2, #39	; 0x27
   13108:	strbhi	r2, [r8, r3]
   1310c:	mov	r3, #0
   13110:	str	r3, [sp, #48]	; 0x30
   13114:	b	12ed0 <__assert_fail@plt+0x1d54>
   13118:	mov	r3, #118	; 0x76
   1311c:	b	12ff4 <__assert_fail@plt+0x1e78>
   13120:	mov	r3, #116	; 0x74
   13124:	ldr	r2, [sp, #44]	; 0x2c
   13128:	cmp	fp, #2
   1312c:	movne	r2, #0
   13130:	andeq	r2, r2, #1
   13134:	cmp	r2, #0
   13138:	beq	12ff4 <__assert_fail@plt+0x1e78>
   1313c:	mov	fp, r8
   13140:	mov	r8, #2
   13144:	ldr	r3, [sp, #40]	; 0x28
   13148:	cmp	r3, #0
   1314c:	movne	r8, #4
   13150:	mov	lr, #0
   13154:	mov	r0, fp
   13158:	ldr	r2, [sp, #32]
   1315c:	ldr	r3, [sp, #156]	; 0x9c
   13160:	ldr	r1, [sp, #164]	; 0xa4
   13164:	bic	ip, r3, #2
   13168:	ldr	r3, [sp, #28]
   1316c:	stm	sp, {r8, ip, lr}
   13170:	ldr	ip, [sp, #168]	; 0xa8
   13174:	str	r1, [sp, #12]
   13178:	mov	r1, sl
   1317c:	str	ip, [sp, #16]
   13180:	bl	12898 <__assert_fail@plt+0x171c>
   13184:	mov	r4, r0
   13188:	mov	r0, r4
   1318c:	add	sp, sp, #116	; 0x74
   13190:	ldrd	r4, [sp]
   13194:	ldrd	r6, [sp, #8]
   13198:	ldrd	r8, [sp, #16]
   1319c:	ldrd	sl, [sp, #24]
   131a0:	add	sp, sp, #32
   131a4:	pop	{pc}		; (ldr pc, [sp], #4)
   131a8:	mov	r5, #102	; 0x66
   131ac:	ldr	r2, [sp, #44]	; 0x2c
   131b0:	sub	r3, fp, #2
   131b4:	clz	r3, r3
   131b8:	lsr	r3, r3, #5
   131bc:	cmp	r2, #0
   131c0:	bne	13c1c <__assert_fail@plt+0x2aa0>
   131c4:	mov	r6, r2
   131c8:	b	12ebc <__assert_fail@plt+0x1d40>
   131cc:	mov	r5, #110	; 0x6e
   131d0:	mov	r6, #0
   131d4:	b	12e60 <__assert_fail@plt+0x1ce4>
   131d8:	mov	r5, #98	; 0x62
   131dc:	b	131ac <__assert_fail@plt+0x2030>
   131e0:	mov	r5, #97	; 0x61
   131e4:	b	131ac <__assert_fail@plt+0x2030>
   131e8:	mov	r7, #0
   131ec:	mov	r6, #0
   131f0:	b	13010 <__assert_fail@plt+0x1e94>
   131f4:	mov	r5, #114	; 0x72
   131f8:	b	131d0 <__assert_fail@plt+0x2054>
   131fc:	ldr	r3, [sp, #44]	; 0x2c
   13200:	cmp	r3, #0
   13204:	bne	13f94 <__assert_fail@plt+0x2e18>
   13208:	mov	r7, r3
   1320c:	ldr	r3, [sp, #48]	; 0x30
   13210:	sub	r2, fp, #2
   13214:	clz	r2, r2
   13218:	lsr	r2, r2, #5
   1321c:	eor	r3, r3, #1
   13220:	ands	r3, r2, r3
   13224:	beq	13c38 <__assert_fail@plt+0x2abc>
   13228:	cmp	sl, r4
   1322c:	movhi	r1, #39	; 0x27
   13230:	strbhi	r1, [r8, r4]
   13234:	add	r1, r4, #1
   13238:	cmp	sl, r1
   1323c:	movhi	r0, #36	; 0x24
   13240:	strbhi	r0, [r8, r1]
   13244:	add	r1, r4, #2
   13248:	cmp	sl, r1
   1324c:	movhi	r0, #39	; 0x27
   13250:	strbhi	r0, [r8, r1]
   13254:	add	r1, r4, #3
   13258:	cmp	sl, r1
   1325c:	bls	13c90 <__assert_fail@plt+0x2b14>
   13260:	mov	r4, r1
   13264:	mov	r1, #92	; 0x5c
   13268:	mov	r0, r4
   1326c:	str	r3, [sp, #48]	; 0x30
   13270:	strb	r1, [r8, r4]
   13274:	cmp	fp, #2
   13278:	add	r4, r4, #1
   1327c:	beq	13ce0 <__assert_fail@plt+0x2b64>
   13280:	ldr	r1, [sp, #28]
   13284:	add	r3, r9, #1
   13288:	cmp	r3, r1
   1328c:	bcs	132a4 <__assert_fail@plt+0x2128>
   13290:	ldr	r1, [sp, #32]
   13294:	ldrb	r3, [r1, r3]
   13298:	sub	r3, r3, #48	; 0x30
   1329c:	cmp	r3, #9
   132a0:	bls	13cf8 <__assert_fail@plt+0x2b7c>
   132a4:	mov	r5, #48	; 0x30
   132a8:	ldr	r3, [sp, #40]	; 0x28
   132ac:	eor	r3, r3, #1
   132b0:	orrs	r2, r2, r3
   132b4:	mov	r3, r6
   132b8:	moveq	r6, r2
   132bc:	beq	12e30 <__assert_fail@plt+0x1cb4>
   132c0:	mov	r6, #0
   132c4:	b	12e58 <__assert_fail@plt+0x1cdc>
   132c8:	cmp	r9, #0
   132cc:	mov	r2, r7
   132d0:	bne	13870 <__assert_fail@plt+0x26f4>
   132d4:	mov	r6, r7
   132d8:	mov	r3, r9
   132dc:	mov	r7, r2
   132e0:	b	12e20 <__assert_fail@plt+0x1ca4>
   132e4:	mov	r2, r7
   132e8:	mov	r6, r7
   132ec:	mov	r3, #0
   132f0:	mov	r7, r2
   132f4:	mov	r5, #32
   132f8:	b	12e20 <__assert_fail@plt+0x1ca4>
   132fc:	mov	r6, r7
   13300:	b	13010 <__assert_fail@plt+0x1e94>
   13304:	mov	r7, #0
   13308:	ldr	r3, [sp, #64]	; 0x40
   1330c:	cmp	r3, #1
   13310:	bne	13930 <__assert_fail@plt+0x27b4>
   13314:	bl	11044 <__ctype_b_loc@plt>
   13318:	ldr	r2, [r0]
   1331c:	sxth	r3, r5
   13320:	lsl	r3, r3, #1
   13324:	ldr	r1, [sp, #64]	; 0x40
   13328:	ldrh	r3, [r2, r3]
   1332c:	mov	ip, r1
   13330:	and	r3, r3, #16384	; 0x4000
   13334:	cmp	r3, #0
   13338:	ldr	r3, [sp, #40]	; 0x28
   1333c:	movne	r6, #1
   13340:	moveq	r6, #0
   13344:	movne	r2, #0
   13348:	andeq	r2, r3, #1
   1334c:	cmp	r2, #0
   13350:	bne	13c78 <__assert_fail@plt+0x2afc>
   13354:	sub	r3, fp, #2
   13358:	clz	r3, r3
   1335c:	lsr	r3, r3, #5
   13360:	b	12e20 <__assert_fail@plt+0x1ca4>
   13364:	cmp	r4, #0
   13368:	bne	14008 <__assert_fail@plt+0x2e8c>
   1336c:	str	r4, [sp, #40]	; 0x28
   13370:	cmp	sl, #0
   13374:	bne	14038 <__assert_fail@plt+0x2ebc>
   13378:	mov	r3, #1
   1337c:	movw	r2, #28640	; 0x6fe0
   13380:	movt	r2, #1
   13384:	mov	r4, r3
   13388:	mov	r8, #2
   1338c:	str	r3, [sp, #36]	; 0x24
   13390:	str	sl, [sp, #44]	; 0x2c
   13394:	str	sl, [sp, #48]	; 0x30
   13398:	str	r3, [sp, #56]	; 0x38
   1339c:	str	r2, [sp, #60]	; 0x3c
   133a0:	str	sl, [sp, #68]	; 0x44
   133a4:	str	sl, [sp, #72]	; 0x48
   133a8:	b	12980 <__assert_fail@plt+0x1804>
   133ac:	ldr	r3, [sp, #32]
   133b0:	ldrb	r5, [r3, r9]
   133b4:	cmp	r5, #126	; 0x7e
   133b8:	ldrls	pc, [pc, r5, lsl #2]
   133bc:	b	13308 <__assert_fail@plt+0x218c>
   133c0:	andeq	r3, r1, r4, ror #11
   133c4:	andeq	r3, r1, r8, lsl #6
   133c8:	andeq	r3, r1, r8, lsl #6
   133cc:	andeq	r3, r1, r8, lsl #6
   133d0:	andeq	r3, r1, r8, lsl #6
   133d4:	andeq	r3, r1, r8, lsl #6
   133d8:	andeq	r3, r1, r8, lsl #6
   133dc:	ldrdeq	r3, [r1], -ip
   133e0:	ldrdeq	r3, [r1], -r4
   133e4:	andeq	r3, r1, r0, lsr #2
   133e8:	andeq	r3, r1, ip, asr #11
   133ec:	andeq	r3, r1, r8, lsl r1
   133f0:	andeq	r3, r1, r4, asr #11
   133f4:			; <UNDEFINED> instruction: 0x000135bc
   133f8:	andeq	r3, r1, r8, lsl #6
   133fc:	andeq	r3, r1, r8, lsl #6
   13400:	andeq	r3, r1, r8, lsl #6
   13404:	andeq	r3, r1, r8, lsl #6
   13408:	andeq	r3, r1, r8, lsl #6
   1340c:	andeq	r3, r1, r8, lsl #6
   13410:	andeq	r3, r1, r8, lsl #6
   13414:	andeq	r3, r1, r8, lsl #6
   13418:	andeq	r3, r1, r8, lsl #6
   1341c:	andeq	r3, r1, r8, lsl #6
   13420:	andeq	r3, r1, r8, lsl #6
   13424:	andeq	r3, r1, r8, lsl #6
   13428:	andeq	r3, r1, r8, lsl #6
   1342c:	andeq	r3, r1, r8, lsl #6
   13430:	andeq	r3, r1, r8, lsl #6
   13434:	andeq	r3, r1, r8, lsl #6
   13438:	andeq	r3, r1, r8, lsl #6
   1343c:	andeq	r3, r1, r8, lsl #6
   13440:	andeq	r3, r1, r8, lsr r6
   13444:	andeq	r3, r1, r8, lsl r6
   13448:	andeq	r3, r1, r8, lsl r6
   1344c:	andeq	r3, r1, r8, lsl #12
   13450:	andeq	r3, r1, r8, lsl r6
   13454:	andeq	r3, r1, r4, asr r3
   13458:	andeq	r3, r1, r8, lsl r6
   1345c:	andeq	r3, r1, r8, asr #32
   13460:	andeq	r3, r1, r8, lsl r6
   13464:	andeq	r3, r1, r8, lsl r6
   13468:	andeq	r3, r1, r8, lsl r6
   1346c:	andeq	r3, r1, r4, asr r3
   13470:	andeq	r3, r1, r4, asr r3
   13474:	andeq	r3, r1, r4, asr r3
   13478:	andeq	r3, r1, r4, asr r3
   1347c:	andeq	r3, r1, r4, asr r3
   13480:	andeq	r3, r1, r4, asr r3
   13484:	andeq	r3, r1, r4, asr r3
   13488:	andeq	r3, r1, r4, asr r3
   1348c:	andeq	r3, r1, r4, asr r3
   13490:	andeq	r3, r1, r4, asr r3
   13494:	andeq	r3, r1, r4, asr r3
   13498:	andeq	r3, r1, r4, asr r3
   1349c:	andeq	r3, r1, r4, asr r3
   134a0:	andeq	r3, r1, r4, asr r3
   134a4:	andeq	r3, r1, r4, asr r3
   134a8:	andeq	r3, r1, r4, asr r3
   134ac:	andeq	r3, r1, r8, lsl r6
   134b0:	andeq	r3, r1, r8, lsl r6
   134b4:	andeq	r3, r1, r8, lsl r6
   134b8:	andeq	r3, r1, r8, lsl r6
   134bc:	andeq	r3, r1, ip, lsl r0
   134c0:	andeq	r3, r1, r8, lsl #6
   134c4:	andeq	r3, r1, r4, asr r3
   134c8:	andeq	r3, r1, r4, asr r3
   134cc:	andeq	r3, r1, r4, asr r3
   134d0:	andeq	r3, r1, r4, asr r3
   134d4:	andeq	r3, r1, r4, asr r3
   134d8:	andeq	r3, r1, r4, asr r3
   134dc:	andeq	r3, r1, r4, asr r3
   134e0:	andeq	r3, r1, r4, asr r3
   134e4:	andeq	r3, r1, r4, asr r3
   134e8:	andeq	r3, r1, r4, asr r3
   134ec:	andeq	r3, r1, r4, asr r3
   134f0:	andeq	r3, r1, r4, asr r3
   134f4:	andeq	r3, r1, r4, asr r3
   134f8:	andeq	r3, r1, r4, asr r3
   134fc:	andeq	r3, r1, r4, asr r3
   13500:	andeq	r3, r1, r4, asr r3
   13504:	andeq	r3, r1, r4, asr r3
   13508:	andeq	r3, r1, r4, asr r3
   1350c:	andeq	r3, r1, r4, asr r3
   13510:	andeq	r3, r1, r4, asr r3
   13514:	andeq	r3, r1, r4, asr r3
   13518:	andeq	r3, r1, r4, asr r3
   1351c:	andeq	r3, r1, r4, asr r3
   13520:	andeq	r3, r1, r4, asr r3
   13524:	andeq	r3, r1, r4, asr r3
   13528:	andeq	r3, r1, r4, asr r3
   1352c:	andeq	r3, r1, r8, lsl r6
   13530:	andeq	r2, r1, r4, asr #31
   13534:	andeq	r3, r1, r4, asr r3
   13538:	andeq	r3, r1, r8, lsl r6
   1353c:	andeq	r3, r1, r4, asr r3
   13540:	andeq	r3, r1, r8, lsl r6
   13544:	andeq	r3, r1, r4, asr r3
   13548:	andeq	r3, r1, r4, asr r3
   1354c:	andeq	r3, r1, r4, asr r3
   13550:	andeq	r3, r1, r4, asr r3
   13554:	andeq	r3, r1, r4, asr r3
   13558:	andeq	r3, r1, r4, asr r3
   1355c:	andeq	r3, r1, r4, asr r3
   13560:	andeq	r3, r1, r4, asr r3
   13564:	andeq	r3, r1, r4, asr r3
   13568:	andeq	r3, r1, r4, asr r3
   1356c:	andeq	r3, r1, r4, asr r3
   13570:	andeq	r3, r1, r4, asr r3
   13574:	andeq	r3, r1, r4, asr r3
   13578:	andeq	r3, r1, r4, asr r3
   1357c:	andeq	r3, r1, r4, asr r3
   13580:	andeq	r3, r1, r4, asr r3
   13584:	andeq	r3, r1, r4, asr r3
   13588:	andeq	r3, r1, r4, asr r3
   1358c:	andeq	r3, r1, r4, asr r3
   13590:	andeq	r3, r1, r4, asr r3
   13594:	andeq	r3, r1, r4, asr r3
   13598:	andeq	r3, r1, r4, asr r3
   1359c:	andeq	r3, r1, r4, asr r3
   135a0:	andeq	r3, r1, r4, asr r3
   135a4:	andeq	r3, r1, r4, asr r3
   135a8:	andeq	r3, r1, r4, asr r3
   135ac:	andeq	r2, r1, r8, ror #27
   135b0:	andeq	r3, r1, r8, lsl r6
   135b4:	andeq	r2, r1, r8, ror #27
   135b8:	andeq	r3, r1, r8, lsl #12
   135bc:	mov	r3, #114	; 0x72
   135c0:	b	13124 <__assert_fail@plt+0x1fa8>
   135c4:	mov	r3, #102	; 0x66
   135c8:	b	12ff4 <__assert_fail@plt+0x1e78>
   135cc:	mov	r3, #110	; 0x6e
   135d0:	b	13124 <__assert_fail@plt+0x1fa8>
   135d4:	mov	r3, #98	; 0x62
   135d8:	b	12ff4 <__assert_fail@plt+0x1e78>
   135dc:	mov	r3, #97	; 0x61
   135e0:	b	12ff4 <__assert_fail@plt+0x1e78>
   135e4:	ldr	r3, [sp, #40]	; 0x28
   135e8:	cmp	r3, #0
   135ec:	bne	131fc <__assert_fail@plt+0x2080>
   135f0:	ldr	r3, [sp, #156]	; 0x9c
   135f4:	tst	r3, #1
   135f8:	addne	r9, r9, #1
   135fc:	bne	12990 <__assert_fail@plt+0x1814>
   13600:	ldr	r7, [sp, #40]	; 0x28
   13604:	b	13000 <__assert_fail@plt+0x1e84>
   13608:	sub	r3, fp, #2
   1360c:	clz	r3, r3
   13610:	lsr	r3, r3, #5
   13614:	b	12e14 <__assert_fail@plt+0x1c98>
   13618:	sub	r3, fp, #2
   1361c:	mov	r6, #0
   13620:	clz	r3, r3
   13624:	lsr	r3, r3, #5
   13628:	ldr	r2, [sp, #44]	; 0x2c
   1362c:	tst	r2, r3
   13630:	beq	12e20 <__assert_fail@plt+0x1ca4>
   13634:	b	1313c <__assert_fail@plt+0x1fc0>
   13638:	sub	r3, fp, #2
   1363c:	clz	r3, r3
   13640:	lsr	r3, r3, #5
   13644:	b	13628 <__assert_fail@plt+0x24ac>
   13648:	ldr	r3, [sp, #52]	; 0x34
   1364c:	ldrb	r5, [r3]
   13650:	cmp	r5, #126	; 0x7e
   13654:	ldrls	pc, [pc, r5, lsl #2]
   13658:	b	13304 <__assert_fail@plt+0x2188>
   1365c:	strdeq	r3, [r1], -ip
   13660:	andeq	r3, r1, r4, lsl #6
   13664:	andeq	r3, r1, r4, lsl #6
   13668:	andeq	r3, r1, r4, lsl #6
   1366c:	andeq	r3, r1, r4, lsl #6
   13670:	andeq	r3, r1, r4, lsl #6
   13674:	andeq	r3, r1, r4, lsl #6
   13678:	andeq	r3, r1, r0, ror #3
   1367c:	ldrdeq	r3, [r1], -r8
   13680:	muleq	r1, r4, r8
   13684:	andeq	r3, r1, ip, asr #3
   13688:	andeq	r3, r1, r8, lsl #17
   1368c:	andeq	r3, r1, r8, lsr #3
   13690:	strdeq	r3, [r1], -r4
   13694:	andeq	r3, r1, r4, lsl #6
   13698:	andeq	r3, r1, r4, lsl #6
   1369c:	andeq	r3, r1, r4, lsl #6
   136a0:	andeq	r3, r1, r4, lsl #6
   136a4:	andeq	r3, r1, r4, lsl #6
   136a8:	andeq	r3, r1, r4, lsl #6
   136ac:	andeq	r3, r1, r4, lsl #6
   136b0:	andeq	r3, r1, r4, lsl #6
   136b4:	andeq	r3, r1, r4, lsl #6
   136b8:	andeq	r3, r1, r4, lsl #6
   136bc:	andeq	r3, r1, r4, lsl #6
   136c0:	andeq	r3, r1, r4, lsl #6
   136c4:	andeq	r3, r1, r4, lsl #6
   136c8:	andeq	r3, r1, r4, lsl #6
   136cc:	andeq	r3, r1, r4, lsl #6
   136d0:	andeq	r3, r1, r4, lsl #6
   136d4:	andeq	r3, r1, r4, lsl #6
   136d8:	andeq	r3, r1, r4, lsl #6
   136dc:	andeq	r3, r1, r0, lsl #17
   136e0:	andeq	r3, r1, r8, ror #3
   136e4:	andeq	r3, r1, r8, ror #3
   136e8:	andeq	r3, r1, r4, ror #16
   136ec:	andeq	r3, r1, r8, ror #3
   136f0:	andeq	r3, r1, r8, asr r8
   136f4:	andeq	r3, r1, r8, ror #3
   136f8:	andeq	r3, r1, r4, asr #32
   136fc:	andeq	r3, r1, r8, ror #3
   13700:	andeq	r3, r1, r8, ror #3
   13704:	andeq	r3, r1, r8, ror #3
   13708:	andeq	r3, r1, r8, asr r8
   1370c:	andeq	r3, r1, r8, asr r8
   13710:	andeq	r3, r1, r8, asr r8
   13714:	andeq	r3, r1, r8, asr r8
   13718:	andeq	r3, r1, r8, asr r8
   1371c:	andeq	r3, r1, r8, asr r8
   13720:	andeq	r3, r1, r8, asr r8
   13724:	andeq	r3, r1, r8, asr r8
   13728:	andeq	r3, r1, r8, asr r8
   1372c:	andeq	r3, r1, r8, asr r8
   13730:	andeq	r3, r1, r8, asr r8
   13734:	andeq	r3, r1, r8, asr r8
   13738:	andeq	r3, r1, r8, asr r8
   1373c:	andeq	r3, r1, r8, asr r8
   13740:	andeq	r3, r1, r8, asr r8
   13744:	andeq	r3, r1, r8, asr r8
   13748:	andeq	r3, r1, r8, ror #3
   1374c:	andeq	r3, r1, r8, ror #3
   13750:	andeq	r3, r1, r8, ror #3
   13754:	andeq	r3, r1, r8, ror #3
   13758:	andeq	r3, r1, r8, lsl r0
   1375c:	andeq	r3, r1, r4, lsl #6
   13760:	andeq	r3, r1, r8, asr r8
   13764:	andeq	r3, r1, r8, asr r8
   13768:	andeq	r3, r1, r8, asr r8
   1376c:	andeq	r3, r1, r8, asr r8
   13770:	andeq	r3, r1, r8, asr r8
   13774:	andeq	r3, r1, r8, asr r8
   13778:	andeq	r3, r1, r8, asr r8
   1377c:	andeq	r3, r1, r8, asr r8
   13780:	andeq	r3, r1, r8, asr r8
   13784:	andeq	r3, r1, r8, asr r8
   13788:	andeq	r3, r1, r8, asr r8
   1378c:	andeq	r3, r1, r8, asr r8
   13790:	andeq	r3, r1, r8, asr r8
   13794:	andeq	r3, r1, r8, asr r8
   13798:	andeq	r3, r1, r8, asr r8
   1379c:	andeq	r3, r1, r8, asr r8
   137a0:	andeq	r3, r1, r8, asr r8
   137a4:	andeq	r3, r1, r8, asr r8
   137a8:	andeq	r3, r1, r8, asr r8
   137ac:	andeq	r3, r1, r8, asr r8
   137b0:	andeq	r3, r1, r8, asr r8
   137b4:	andeq	r3, r1, r8, asr r8
   137b8:	andeq	r3, r1, r8, asr r8
   137bc:	andeq	r3, r1, r8, asr r8
   137c0:	andeq	r3, r1, r8, asr r8
   137c4:	andeq	r3, r1, r8, asr r8
   137c8:	andeq	r3, r1, r8, ror #3
   137cc:	andeq	r2, r1, r0, asr #31
   137d0:	andeq	r3, r1, r8, asr r8
   137d4:	andeq	r3, r1, r8, ror #3
   137d8:	andeq	r3, r1, r8, asr r8
   137dc:	andeq	r3, r1, r8, ror #3
   137e0:	andeq	r3, r1, r8, asr r8
   137e4:	andeq	r3, r1, r8, asr r8
   137e8:	andeq	r3, r1, r8, asr r8
   137ec:	andeq	r3, r1, r8, asr r8
   137f0:	andeq	r3, r1, r8, asr r8
   137f4:	andeq	r3, r1, r8, asr r8
   137f8:	andeq	r3, r1, r8, asr r8
   137fc:	andeq	r3, r1, r8, asr r8
   13800:	andeq	r3, r1, r8, asr r8
   13804:	andeq	r3, r1, r8, asr r8
   13808:	andeq	r3, r1, r8, asr r8
   1380c:	andeq	r3, r1, r8, asr r8
   13810:	andeq	r3, r1, r8, asr r8
   13814:	andeq	r3, r1, r8, asr r8
   13818:	andeq	r3, r1, r8, asr r8
   1381c:	andeq	r3, r1, r8, asr r8
   13820:	andeq	r3, r1, r8, asr r8
   13824:	andeq	r3, r1, r8, asr r8
   13828:	andeq	r3, r1, r8, asr r8
   1382c:	andeq	r3, r1, r8, asr r8
   13830:	andeq	r3, r1, r8, asr r8
   13834:	andeq	r3, r1, r8, asr r8
   13838:	andeq	r3, r1, r8, asr r8
   1383c:	andeq	r3, r1, r8, asr r8
   13840:	andeq	r3, r1, r8, asr r8
   13844:	andeq	r3, r1, r8, asr r8
   13848:	andeq	r2, r1, r4, ror #27
   1384c:	andeq	r3, r1, r8, ror #3
   13850:	andeq	r2, r1, r4, ror #27
   13854:	andeq	r3, r1, r4, ror #16
   13858:	mov	r6, r7
   1385c:	mov	r7, #0
   13860:	b	13010 <__assert_fail@plt+0x1e94>
   13864:	cmp	r9, #0
   13868:	mov	r2, #0
   1386c:	beq	132d4 <__assert_fail@plt+0x2158>
   13870:	mov	r6, #0
   13874:	mov	r7, r2
   13878:	mov	r3, r6
   1387c:	b	12e30 <__assert_fail@plt+0x1cb4>
   13880:	mov	r2, #0
   13884:	b	132e8 <__assert_fail@plt+0x216c>
   13888:	mov	r7, #0
   1388c:	mov	r3, #118	; 0x76
   13890:	b	12ff4 <__assert_fail@plt+0x1e78>
   13894:	mov	r7, #0
   13898:	mov	r3, #116	; 0x74
   1389c:	b	13124 <__assert_fail@plt+0x1fa8>
   138a0:	ldr	r3, [sp, #44]	; 0x2c
   138a4:	b	12e58 <__assert_fail@plt+0x1cdc>
   138a8:	ldr	r3, [sp, #44]	; 0x2c
   138ac:	cmp	r3, #0
   138b0:	bne	13d20 <__assert_fail@plt+0x2ba4>
   138b4:	add	r9, r9, #1
   138b8:	mov	r6, #0
   138bc:	ldr	r3, [sp, #48]	; 0x30
   138c0:	mov	r5, #92	; 0x5c
   138c4:	b	130e4 <__assert_fail@plt+0x1f68>
   138c8:	ldr	r3, [sp, #32]
   138cc:	ldrb	r2, [r3, #1]
   138d0:	adds	r2, r2, #0
   138d4:	movne	r2, #1
   138d8:	b	12e00 <__assert_fail@plt+0x1c84>
   138dc:	ldr	r3, [sp, #156]	; 0x9c
   138e0:	ands	r3, r3, #4
   138e4:	beq	1390c <__assert_fail@plt+0x2790>
   138e8:	ldr	r2, [sp, #28]
   138ec:	add	r3, r9, #2
   138f0:	cmp	r3, r2
   138f4:	bcs	13908 <__assert_fail@plt+0x278c>
   138f8:	ldr	r2, [sp, #52]	; 0x34
   138fc:	ldrb	r5, [r2, #1]
   13900:	cmp	r5, #63	; 0x3f
   13904:	beq	13d84 <__assert_fail@plt+0x2c08>
   13908:	mov	r3, #0
   1390c:	mov	r5, #63	; 0x3f
   13910:	mov	r6, r3
   13914:	b	12e20 <__assert_fail@plt+0x1ca4>
   13918:	ldr	r3, [sp, #44]	; 0x2c
   1391c:	cmp	r3, #0
   13920:	bne	13d20 <__assert_fail@plt+0x2ba4>
   13924:	mov	r6, r3
   13928:	mov	r5, #63	; 0x3f
   1392c:	b	12e58 <__assert_fail@plt+0x1cdc>
   13930:	ldr	r1, [sp, #28]
   13934:	mov	r2, #0
   13938:	mov	r3, #0
   1393c:	strd	r2, [sp, #104]	; 0x68
   13940:	cmn	r1, #1
   13944:	bne	13954 <__assert_fail@plt+0x27d8>
   13948:	ldr	r0, [sp, #32]
   1394c:	bl	11068 <strlen@plt>
   13950:	str	r0, [sp, #28]
   13954:	str	r8, [sp, #76]	; 0x4c
   13958:	mov	r3, #0
   1395c:	str	sl, [sp, #80]	; 0x50
   13960:	ldr	sl, [sp, #32]
   13964:	str	r5, [sp, #84]	; 0x54
   13968:	mov	r5, r3
   1396c:	ldr	r8, [sp, #44]	; 0x2c
   13970:	str	r7, [sp, #88]	; 0x58
   13974:	str	r4, [sp, #92]	; 0x5c
   13978:	ldr	r2, [sp, #28]
   1397c:	add	r4, r9, r5
   13980:	add	r3, sp, #104	; 0x68
   13984:	add	r7, sl, r4
   13988:	add	r0, sp, #100	; 0x64
   1398c:	mov	r1, r7
   13990:	sub	r2, r2, r4
   13994:	bl	1607c <__assert_fail@plt+0x4f00>
   13998:	subs	r1, r0, #0
   1399c:	beq	139e8 <__assert_fail@plt+0x286c>
   139a0:	cmn	r1, #1
   139a4:	beq	13d60 <__assert_fail@plt+0x2be4>
   139a8:	cmn	r1, #2
   139ac:	beq	13e80 <__assert_fail@plt+0x2d04>
   139b0:	cmp	fp, #2
   139b4:	movne	r3, #0
   139b8:	andeq	r3, r8, #1
   139bc:	cmp	r3, #0
   139c0:	bne	13b4c <__assert_fail@plt+0x29d0>
   139c4:	ldr	r0, [sp, #100]	; 0x64
   139c8:	add	r5, r5, r1
   139cc:	bl	10f90 <iswprint@plt>
   139d0:	cmp	r0, #0
   139d4:	add	r0, sp, #104	; 0x68
   139d8:	moveq	r6, #0
   139dc:	bl	10f3c <mbsinit@plt>
   139e0:	cmp	r0, #0
   139e4:	beq	13978 <__assert_fail@plt+0x27fc>
   139e8:	ldr	r3, [sp, #40]	; 0x28
   139ec:	mov	ip, r5
   139f0:	eor	r2, r6, #1
   139f4:	ldr	r8, [sp, #76]	; 0x4c
   139f8:	ldr	sl, [sp, #80]	; 0x50
   139fc:	and	r2, r2, r3
   13a00:	ldr	r5, [sp, #84]	; 0x54
   13a04:	ldr	r7, [sp, #88]	; 0x58
   13a08:	ldr	r4, [sp, #92]	; 0x5c
   13a0c:	cmp	ip, #1
   13a10:	bls	1334c <__assert_fail@plt+0x21d0>
   13a14:	add	r1, ip, r9
   13a18:	mov	r0, #39	; 0x27
   13a1c:	ldr	lr, [sp, #52]	; 0x34
   13a20:	mov	ip, #0
   13a24:	str	r6, [sp, #52]	; 0x34
   13a28:	ldr	r6, [sp, #48]	; 0x30
   13a2c:	b	13ae8 <__assert_fail@plt+0x296c>
   13a30:	ldr	ip, [sp, #44]	; 0x2c
   13a34:	sub	r3, fp, #2
   13a38:	clz	r3, r3
   13a3c:	lsr	r3, r3, #5
   13a40:	cmp	ip, #0
   13a44:	bne	13c58 <__assert_fail@plt+0x2adc>
   13a48:	eor	ip, r6, #1
   13a4c:	ands	r3, r3, ip
   13a50:	beq	13a80 <__assert_fail@plt+0x2904>
   13a54:	cmp	sl, r4
   13a58:	add	ip, r4, #1
   13a5c:	strbhi	r0, [r8, r4]
   13a60:	cmp	sl, ip
   13a64:	movhi	r6, #36	; 0x24
   13a68:	strbhi	r6, [r8, ip]
   13a6c:	add	ip, r4, #2
   13a70:	mov	r6, r3
   13a74:	cmp	sl, ip
   13a78:	add	r4, r4, #3
   13a7c:	strbhi	r0, [r8, ip]
   13a80:	cmp	sl, r4
   13a84:	movhi	r3, #92	; 0x5c
   13a88:	strbhi	r3, [r8, r4]
   13a8c:	add	r3, r4, #1
   13a90:	cmp	sl, r3
   13a94:	bls	13aa4 <__assert_fail@plt+0x2928>
   13a98:	lsr	ip, r5, #6
   13a9c:	add	ip, ip, #48	; 0x30
   13aa0:	strb	ip, [r8, r3]
   13aa4:	add	r3, r4, #2
   13aa8:	cmp	sl, r3
   13aac:	bls	13abc <__assert_fail@plt+0x2940>
   13ab0:	ubfx	ip, r5, #3, #3
   13ab4:	add	ip, ip, #48	; 0x30
   13ab8:	strb	ip, [r8, r3]
   13abc:	add	r9, r9, #1
   13ac0:	and	r5, r5, #7
   13ac4:	cmp	r9, r1
   13ac8:	add	r5, r5, #48	; 0x30
   13acc:	add	r4, r4, #3
   13ad0:	bcs	13c84 <__assert_fail@plt+0x2b08>
   13ad4:	mov	ip, r2
   13ad8:	cmp	sl, r4
   13adc:	strbhi	r5, [r8, r4]
   13ae0:	add	r4, r4, #1
   13ae4:	ldrb	r5, [lr, #1]!
   13ae8:	cmp	r2, #0
   13aec:	bne	13a30 <__assert_fail@plt+0x28b4>
   13af0:	eor	r3, ip, #1
   13af4:	cmp	r7, #0
   13af8:	and	r3, r3, r6
   13afc:	uxtb	r3, r3
   13b00:	beq	13b14 <__assert_fail@plt+0x2998>
   13b04:	cmp	sl, r4
   13b08:	movhi	r7, #92	; 0x5c
   13b0c:	strbhi	r7, [r8, r4]
   13b10:	add	r4, r4, #1
   13b14:	add	r9, r9, #1
   13b18:	cmp	r9, r1
   13b1c:	bcs	13c6c <__assert_fail@plt+0x2af0>
   13b20:	cmp	r3, #0
   13b24:	beq	13ca4 <__assert_fail@plt+0x2b28>
   13b28:	cmp	sl, r4
   13b2c:	add	r3, r4, #1
   13b30:	mov	r7, #0
   13b34:	strbhi	r0, [r8, r4]
   13b38:	cmp	sl, r3
   13b3c:	add	r4, r4, #2
   13b40:	mov	r6, r7
   13b44:	strbhi	r0, [r8, r3]
   13b48:	b	13ad8 <__assert_fail@plt+0x295c>
   13b4c:	cmp	r1, #1
   13b50:	beq	139c4 <__assert_fail@plt+0x2848>
   13b54:	add	r2, r4, #1
   13b58:	add	r3, sl, r1
   13b5c:	add	r2, sl, r2
   13b60:	add	r4, r3, r4
   13b64:	ldrb	r3, [r2], #1
   13b68:	sub	r3, r3, #91	; 0x5b
   13b6c:	cmp	r3, #33	; 0x21
   13b70:	ldrls	pc, [pc, r3, lsl #2]
   13b74:	b	13c00 <__assert_fail@plt+0x2a84>
   13b78:	andeq	r3, r1, ip, lsl #24
   13b7c:	andeq	r3, r1, ip, lsl #24
   13b80:	andeq	r3, r1, r0, lsl #24
   13b84:	andeq	r3, r1, ip, lsl #24
   13b88:	andeq	r3, r1, r0, lsl #24
   13b8c:	andeq	r3, r1, ip, lsl #24
   13b90:	andeq	r3, r1, r0, lsl #24
   13b94:	andeq	r3, r1, r0, lsl #24
   13b98:	andeq	r3, r1, r0, lsl #24
   13b9c:	andeq	r3, r1, r0, lsl #24
   13ba0:	andeq	r3, r1, r0, lsl #24
   13ba4:	andeq	r3, r1, r0, lsl #24
   13ba8:	andeq	r3, r1, r0, lsl #24
   13bac:	andeq	r3, r1, r0, lsl #24
   13bb0:	andeq	r3, r1, r0, lsl #24
   13bb4:	andeq	r3, r1, r0, lsl #24
   13bb8:	andeq	r3, r1, r0, lsl #24
   13bbc:	andeq	r3, r1, r0, lsl #24
   13bc0:	andeq	r3, r1, r0, lsl #24
   13bc4:	andeq	r3, r1, r0, lsl #24
   13bc8:	andeq	r3, r1, r0, lsl #24
   13bcc:	andeq	r3, r1, r0, lsl #24
   13bd0:	andeq	r3, r1, r0, lsl #24
   13bd4:	andeq	r3, r1, r0, lsl #24
   13bd8:	andeq	r3, r1, r0, lsl #24
   13bdc:	andeq	r3, r1, r0, lsl #24
   13be0:	andeq	r3, r1, r0, lsl #24
   13be4:	andeq	r3, r1, r0, lsl #24
   13be8:	andeq	r3, r1, r0, lsl #24
   13bec:	andeq	r3, r1, r0, lsl #24
   13bf0:	andeq	r3, r1, r0, lsl #24
   13bf4:	andeq	r3, r1, r0, lsl #24
   13bf8:	andeq	r3, r1, r0, lsl #24
   13bfc:	andeq	r3, r1, ip, lsl #24
   13c00:	cmp	r4, r2
   13c04:	bne	13b64 <__assert_fail@plt+0x29e8>
   13c08:	b	139c4 <__assert_fail@plt+0x2848>
   13c0c:	mov	r8, #2
   13c10:	ldr	fp, [sp, #76]	; 0x4c
   13c14:	ldr	sl, [sp, #80]	; 0x50
   13c18:	b	13144 <__assert_fail@plt+0x1fc8>
   13c1c:	ldr	r2, [sp, #40]	; 0x28
   13c20:	str	fp, [sp, #152]	; 0x98
   13c24:	mov	fp, r8
   13c28:	ldr	r8, [sp, #152]	; 0x98
   13c2c:	and	r2, r2, r3
   13c30:	str	r2, [sp, #40]	; 0x28
   13c34:	b	13144 <__assert_fail@plt+0x1fc8>
   13c38:	cmp	sl, r4
   13c3c:	movls	r0, r4
   13c40:	bls	13274 <__assert_fail@plt+0x20f8>
   13c44:	ldr	r3, [sp, #48]	; 0x30
   13c48:	b	13264 <__assert_fail@plt+0x20e8>
   13c4c:	str	sl, [sp, #72]	; 0x48
   13c50:	ldr	sl, [sp, #44]	; 0x2c
   13c54:	b	130b4 <__assert_fail@plt+0x1f38>
   13c58:	str	r3, [sp, #40]	; 0x28
   13c5c:	str	fp, [sp, #152]	; 0x98
   13c60:	mov	fp, r8
   13c64:	ldr	r8, [sp, #152]	; 0x98
   13c68:	b	13144 <__assert_fail@plt+0x1fc8>
   13c6c:	str	r6, [sp, #48]	; 0x30
   13c70:	ldr	r6, [sp, #52]	; 0x34
   13c74:	b	130e4 <__assert_fail@plt+0x1f68>
   13c78:	mov	r6, #0
   13c7c:	ldr	r2, [sp, #40]	; 0x28
   13c80:	b	13a14 <__assert_fail@plt+0x2898>
   13c84:	str	r6, [sp, #48]	; 0x30
   13c88:	ldr	r6, [sp, #52]	; 0x34
   13c8c:	b	12ed0 <__assert_fail@plt+0x1d54>
   13c90:	add	r4, r4, #4
   13c94:	mov	r6, #0
   13c98:	str	r3, [sp, #48]	; 0x30
   13c9c:	mov	r5, #48	; 0x30
   13ca0:	b	12e58 <__assert_fail@plt+0x1cdc>
   13ca4:	mov	r7, r3
   13ca8:	b	13ad8 <__assert_fail@plt+0x295c>
   13cac:	mov	r3, #1
   13cb0:	movw	r2, #28620	; 0x6fcc
   13cb4:	movt	r2, #1
   13cb8:	mov	r4, r3
   13cbc:	str	r3, [sp, #36]	; 0x24
   13cc0:	str	r3, [sp, #40]	; 0x28
   13cc4:	str	sl, [sp, #44]	; 0x2c
   13cc8:	str	sl, [sp, #48]	; 0x30
   13ccc:	str	r3, [sp, #56]	; 0x38
   13cd0:	str	r2, [sp, #60]	; 0x3c
   13cd4:	str	sl, [sp, #68]	; 0x44
   13cd8:	str	sl, [sp, #72]	; 0x48
   13cdc:	b	12980 <__assert_fail@plt+0x1804>
   13ce0:	mov	r3, r6
   13ce4:	mov	r5, #48	; 0x30
   13ce8:	mov	r6, #0
   13cec:	b	12e58 <__assert_fail@plt+0x1cdc>
   13cf0:	mov	r5, r3
   13cf4:	b	131d0 <__assert_fail@plt+0x2054>
   13cf8:	cmp	sl, r4
   13cfc:	mov	r5, #48	; 0x30
   13d00:	movhi	r3, #48	; 0x30
   13d04:	strbhi	r3, [r8, r4]
   13d08:	add	r3, r0, #2
   13d0c:	add	r4, r0, #3
   13d10:	cmp	sl, r3
   13d14:	movhi	r1, #48	; 0x30
   13d18:	strbhi	r1, [r8, r3]
   13d1c:	b	132a8 <__assert_fail@plt+0x212c>
   13d20:	str	fp, [sp, #152]	; 0x98
   13d24:	mov	fp, r8
   13d28:	ldr	r8, [sp, #152]	; 0x98
   13d2c:	b	13144 <__assert_fail@plt+0x1fc8>
   13d30:	ldr	r3, [sp, #164]	; 0xa4
   13d34:	ldrb	r3, [r3]
   13d38:	cmp	r3, #0
   13d3c:	beq	12950 <__assert_fail@plt+0x17d4>
   13d40:	ldr	r2, [sp, #164]	; 0xa4
   13d44:	cmp	sl, r4
   13d48:	strbhi	r3, [fp, r4]
   13d4c:	add	r4, r4, #1
   13d50:	ldrb	r3, [r2, #1]!
   13d54:	cmp	r3, #0
   13d58:	bne	13d44 <__assert_fail@plt+0x2bc8>
   13d5c:	b	12950 <__assert_fail@plt+0x17d4>
   13d60:	mov	ip, r5
   13d64:	mov	r6, #0
   13d68:	ldr	r2, [sp, #40]	; 0x28
   13d6c:	ldr	r8, [sp, #76]	; 0x4c
   13d70:	ldr	sl, [sp, #80]	; 0x50
   13d74:	ldr	r5, [sp, #84]	; 0x54
   13d78:	ldr	r7, [sp, #88]	; 0x58
   13d7c:	ldr	r4, [sp, #92]	; 0x5c
   13d80:	b	13a0c <__assert_fail@plt+0x2890>
   13d84:	ldr	r2, [sp, #32]
   13d88:	ldrb	r1, [r2, r3]
   13d8c:	sub	r2, r1, #33	; 0x21
   13d90:	cmp	r2, #29
   13d94:	ldrls	pc, [pc, r2, lsl #2]
   13d98:	b	13e74 <__assert_fail@plt+0x2cf8>
   13d9c:	andeq	r3, r1, r4, lsl lr
   13da0:	andeq	r3, r1, r4, ror lr
   13da4:	andeq	r3, r1, r4, ror lr
   13da8:	andeq	r3, r1, r4, ror lr
   13dac:	andeq	r3, r1, r4, ror lr
   13db0:	andeq	r3, r1, r4, ror lr
   13db4:	andeq	r3, r1, r4, lsl lr
   13db8:	andeq	r3, r1, r4, lsl lr
   13dbc:	andeq	r3, r1, r4, lsl lr
   13dc0:	andeq	r3, r1, r4, ror lr
   13dc4:	andeq	r3, r1, r4, ror lr
   13dc8:	andeq	r3, r1, r4, ror lr
   13dcc:	andeq	r3, r1, r4, lsl lr
   13dd0:	andeq	r3, r1, r4, ror lr
   13dd4:	andeq	r3, r1, r4, lsl lr
   13dd8:	andeq	r3, r1, r4, ror lr
   13ddc:	andeq	r3, r1, r4, ror lr
   13de0:	andeq	r3, r1, r4, ror lr
   13de4:	andeq	r3, r1, r4, ror lr
   13de8:	andeq	r3, r1, r4, ror lr
   13dec:	andeq	r3, r1, r4, ror lr
   13df0:	andeq	r3, r1, r4, ror lr
   13df4:	andeq	r3, r1, r4, ror lr
   13df8:	andeq	r3, r1, r4, ror lr
   13dfc:	andeq	r3, r1, r4, ror lr
   13e00:	andeq	r3, r1, r4, ror lr
   13e04:	andeq	r3, r1, r4, ror lr
   13e08:	andeq	r3, r1, r4, lsl lr
   13e0c:	andeq	r3, r1, r4, lsl lr
   13e10:	andeq	r3, r1, r4, lsl lr
   13e14:	ldr	r2, [sp, #44]	; 0x2c
   13e18:	cmp	r2, #0
   13e1c:	bne	13f78 <__assert_fail@plt+0x2dfc>
   13e20:	cmp	sl, r4
   13e24:	mov	r5, r1
   13e28:	movhi	r2, #63	; 0x3f
   13e2c:	mov	r9, r3
   13e30:	strbhi	r2, [r8, r4]
   13e34:	add	r2, r4, #1
   13e38:	cmp	sl, r2
   13e3c:	movhi	r0, #34	; 0x22
   13e40:	strbhi	r0, [r8, r2]
   13e44:	add	r2, r4, #2
   13e48:	cmp	sl, r2
   13e4c:	movhi	r0, #34	; 0x22
   13e50:	strbhi	r0, [r8, r2]
   13e54:	add	r2, r4, #3
   13e58:	add	r4, r4, #4
   13e5c:	cmp	sl, r2
   13e60:	movhi	r0, #63	; 0x3f
   13e64:	strbhi	r0, [r8, r2]
   13e68:	mov	r2, #0
   13e6c:	mov	r6, r2
   13e70:	b	132a8 <__assert_fail@plt+0x212c>
   13e74:	mov	r3, #0
   13e78:	mov	r6, r3
   13e7c:	b	12e20 <__assert_fail@plt+0x1ca4>
   13e80:	ldr	r0, [sp, #28]
   13e84:	mov	r1, r4
   13e88:	mov	r2, r7
   13e8c:	mov	r3, r5
   13e90:	mov	ip, r5
   13e94:	ldr	r8, [sp, #76]	; 0x4c
   13e98:	ldr	sl, [sp, #80]	; 0x50
   13e9c:	cmp	r1, r0
   13ea0:	ldr	r5, [sp, #84]	; 0x54
   13ea4:	ldr	r7, [sp, #88]	; 0x58
   13ea8:	ldr	r4, [sp, #92]	; 0x5c
   13eac:	bcs	13ee0 <__assert_fail@plt+0x2d64>
   13eb0:	ldrb	r6, [r2]
   13eb4:	cmp	r6, #0
   13eb8:	bne	13ecc <__assert_fail@plt+0x2d50>
   13ebc:	b	14000 <__assert_fail@plt+0x2e84>
   13ec0:	ldrb	r6, [r2, #1]!
   13ec4:	cmp	r6, #0
   13ec8:	beq	13f88 <__assert_fail@plt+0x2e0c>
   13ecc:	add	r3, r3, #1
   13ed0:	add	r1, r9, r3
   13ed4:	cmp	r1, r0
   13ed8:	bcc	13ec0 <__assert_fail@plt+0x2d44>
   13edc:	mov	ip, r3
   13ee0:	mov	r6, #0
   13ee4:	ldr	r2, [sp, #40]	; 0x28
   13ee8:	b	13a0c <__assert_fail@plt+0x2890>
   13eec:	mov	r3, #1
   13ef0:	mov	r2, #0
   13ef4:	mov	r4, r2
   13ef8:	str	r3, [sp, #36]	; 0x24
   13efc:	str	r3, [sp, #40]	; 0x28
   13f00:	str	r3, [sp, #44]	; 0x2c
   13f04:	str	r2, [sp, #48]	; 0x30
   13f08:	str	r3, [sp, #56]	; 0x38
   13f0c:	movw	r3, #28620	; 0x6fcc
   13f10:	movt	r3, #1
   13f14:	str	r3, [sp, #60]	; 0x3c
   13f18:	str	r2, [sp, #68]	; 0x44
   13f1c:	str	r2, [sp, #72]	; 0x48
   13f20:	b	12980 <__assert_fail@plt+0x1804>
   13f24:	mov	r2, r3
   13f28:	ldr	r3, [sp, #60]	; 0x3c
   13f2c:	cmp	r3, #0
   13f30:	moveq	r2, #0
   13f34:	andne	r2, r2, #1
   13f38:	cmp	r2, #0
   13f3c:	beq	13f68 <__assert_fail@plt+0x2dec>
   13f40:	mov	r2, r3
   13f44:	ldrb	r3, [r3]
   13f48:	cmp	r3, #0
   13f4c:	beq	13f68 <__assert_fail@plt+0x2dec>
   13f50:	cmp	sl, r4
   13f54:	strbhi	r3, [fp, r4]
   13f58:	add	r4, r4, #1
   13f5c:	ldrb	r3, [r2, #1]!
   13f60:	cmp	r3, #0
   13f64:	bne	13f50 <__assert_fail@plt+0x2dd4>
   13f68:	cmp	sl, r4
   13f6c:	movhi	r3, #0
   13f70:	strbhi	r3, [fp, r4]
   13f74:	b	13188 <__assert_fail@plt+0x200c>
   13f78:	str	fp, [sp, #152]	; 0x98
   13f7c:	mov	fp, r8
   13f80:	ldr	r8, [sp, #152]	; 0x98
   13f84:	b	13150 <__assert_fail@plt+0x1fd4>
   13f88:	mov	ip, r3
   13f8c:	ldr	r2, [sp, #40]	; 0x28
   13f90:	b	13a0c <__assert_fail@plt+0x2890>
   13f94:	str	fp, [sp, #152]	; 0x98
   13f98:	mov	fp, r8
   13f9c:	ldr	r8, [sp, #152]	; 0x98
   13fa0:	sub	r3, r8, #2
   13fa4:	clz	r3, r3
   13fa8:	lsr	r3, r3, #5
   13fac:	str	r3, [sp, #40]	; 0x28
   13fb0:	b	13144 <__assert_fail@plt+0x1fc8>
   13fb4:	mov	ip, #5
   13fb8:	ldr	r3, [sp, #28]
   13fbc:	str	ip, [sp]
   13fc0:	ldr	r2, [sp, #156]	; 0x9c
   13fc4:	ldr	ip, [sp, #164]	; 0xa4
   13fc8:	ldr	r0, [sp, #160]	; 0xa0
   13fcc:	str	r2, [sp, #4]
   13fd0:	ldr	r2, [sp, #32]
   13fd4:	ldr	r1, [sp, #72]	; 0x48
   13fd8:	str	ip, [sp, #12]
   13fdc:	ldr	ip, [sp, #168]	; 0xa8
   13fe0:	str	r0, [sp, #8]
   13fe4:	mov	r0, fp
   13fe8:	str	ip, [sp, #16]
   13fec:	bl	12898 <__assert_fail@plt+0x171c>
   13ff0:	mov	r4, r0
   13ff4:	b	13188 <__assert_fail@plt+0x200c>
   13ff8:	mov	r8, #2
   13ffc:	b	13144 <__assert_fail@plt+0x1fc8>
   14000:	ldr	r2, [sp, #40]	; 0x28
   14004:	b	13a0c <__assert_fail@plt+0x2890>
   14008:	mov	r3, #0
   1400c:	mov	r2, #1
   14010:	mov	r4, r3
   14014:	strd	r2, [sp, #36]	; 0x24
   14018:	strd	r2, [sp, #44]	; 0x2c
   1401c:	str	r2, [sp, #56]	; 0x38
   14020:	str	r3, [sp, #68]	; 0x44
   14024:	str	r3, [sp, #72]	; 0x48
   14028:	movw	r3, #28640	; 0x6fe0
   1402c:	movt	r3, #1
   14030:	str	r3, [sp, #60]	; 0x3c
   14034:	b	12980 <__assert_fail@plt+0x1804>
   14038:	mov	r3, #0
   1403c:	mov	r1, #1
   14040:	mov	r2, r3
   14044:	str	r1, [sp, #36]	; 0x24
   14048:	str	r3, [sp, #48]	; 0x30
   1404c:	str	sl, [sp, #72]	; 0x48
   14050:	b	12f88 <__assert_fail@plt+0x1e0c>
   14054:	bl	11158 <abort@plt>
   14058:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1405c:	mov	r4, r0
   14060:	mov	r5, r3
   14064:	strd	r6, [sp, #8]
   14068:	movw	r7, #33052	; 0x811c
   1406c:	movt	r7, #2
   14070:	strd	r8, [sp, #16]
   14074:	strd	sl, [sp, #24]
   14078:	mov	sl, r1
   1407c:	mov	fp, r2
   14080:	str	lr, [sp, #32]
   14084:	sub	sp, sp, #60	; 0x3c
   14088:	bl	11080 <__errno_location@plt>
   1408c:	mov	r8, r0
   14090:	cmn	r4, #-2147483647	; 0x80000001
   14094:	ldr	r6, [r7]
   14098:	movne	r0, #0
   1409c:	moveq	r0, #1
   140a0:	ldr	r3, [r8]
   140a4:	orrs	r0, r0, r4, lsr #31
   140a8:	str	r3, [sp, #28]
   140ac:	bne	1423c <__assert_fail@plt+0x30c0>
   140b0:	ldr	r3, [r7, #4]
   140b4:	cmp	r3, r4
   140b8:	bgt	14118 <__assert_fail@plt+0x2f9c>
   140bc:	add	r1, r7, #8
   140c0:	sub	r2, r4, r3
   140c4:	str	r3, [sp, #52]	; 0x34
   140c8:	cmp	r6, r1
   140cc:	add	r2, r2, #1
   140d0:	beq	14214 <__assert_fail@plt+0x3098>
   140d4:	mov	r1, #8
   140d8:	mov	r0, r6
   140dc:	mvn	r3, #-2147483648	; 0x80000000
   140e0:	str	r1, [sp]
   140e4:	add	r1, sp, #52	; 0x34
   140e8:	bl	154bc <__assert_fail@plt+0x4340>
   140ec:	mov	r6, r0
   140f0:	str	r0, [r7]
   140f4:	ldr	r0, [r7, #4]
   140f8:	mov	r1, #0
   140fc:	ldr	r2, [sp, #52]	; 0x34
   14100:	sub	r2, r2, r0
   14104:	add	r0, r6, r0, lsl #3
   14108:	lsl	r2, r2, #3
   1410c:	bl	110b0 <memset@plt>
   14110:	ldr	r3, [sp, #52]	; 0x34
   14114:	str	r3, [r7, #4]
   14118:	ldr	r1, [r5, #4]
   1411c:	add	r0, r6, r4, lsl #3
   14120:	add	ip, r5, #8
   14124:	mov	r3, fp
   14128:	mov	r2, sl
   1412c:	ldr	r7, [r0, #4]
   14130:	str	r0, [sp, #36]	; 0x24
   14134:	str	ip, [sp, #40]	; 0x28
   14138:	orr	r0, r1, #1
   1413c:	ldr	r9, [r6, r4, lsl #3]
   14140:	str	ip, [sp, #8]
   14144:	ldr	lr, [r5, #44]	; 0x2c
   14148:	str	r0, [sp, #4]
   1414c:	ldr	ip, [r5]
   14150:	mov	r1, r9
   14154:	str	ip, [sp, #32]
   14158:	ldr	ip, [r5, #40]	; 0x28
   1415c:	str	ip, [sp, #12]
   14160:	ldr	ip, [sp, #32]
   14164:	str	lr, [sp, #16]
   14168:	str	r0, [sp, #44]	; 0x2c
   1416c:	mov	r0, r7
   14170:	str	ip, [sp]
   14174:	bl	12898 <__assert_fail@plt+0x171c>
   14178:	cmp	r9, r0
   1417c:	bhi	141ec <__assert_fail@plt+0x3070>
   14180:	add	r9, r0, #1
   14184:	movw	r3, #33264	; 0x81f0
   14188:	movt	r3, #2
   1418c:	cmp	r7, r3
   14190:	str	r9, [r6, r4, lsl #3]
   14194:	beq	141a0 <__assert_fail@plt+0x3024>
   14198:	mov	r0, r7
   1419c:	bl	12550 <__assert_fail@plt+0x13d4>
   141a0:	mov	r0, r9
   141a4:	bl	1530c <__assert_fail@plt+0x4190>
   141a8:	ldr	ip, [r5]
   141ac:	mov	r3, fp
   141b0:	mov	r2, sl
   141b4:	mov	r1, r9
   141b8:	mov	r7, r0
   141bc:	ldr	lr, [sp, #36]	; 0x24
   141c0:	ldr	r4, [r5, #40]	; 0x28
   141c4:	str	r0, [lr, #4]
   141c8:	ldr	lr, [r5, #44]	; 0x2c
   141cc:	str	ip, [sp]
   141d0:	ldr	ip, [sp, #44]	; 0x2c
   141d4:	str	ip, [sp, #4]
   141d8:	ldr	ip, [sp, #40]	; 0x28
   141dc:	str	r4, [sp, #12]
   141e0:	str	lr, [sp, #16]
   141e4:	str	ip, [sp, #8]
   141e8:	bl	12898 <__assert_fail@plt+0x171c>
   141ec:	ldr	r3, [sp, #28]
   141f0:	mov	r0, r7
   141f4:	str	r3, [r8]
   141f8:	add	sp, sp, #60	; 0x3c
   141fc:	ldrd	r4, [sp]
   14200:	ldrd	r6, [sp, #8]
   14204:	ldrd	r8, [sp, #16]
   14208:	ldrd	sl, [sp, #24]
   1420c:	add	sp, sp, #32
   14210:	pop	{pc}		; (ldr pc, [sp], #4)
   14214:	mov	r1, #8
   14218:	mvn	r3, #-2147483648	; 0x80000000
   1421c:	str	r1, [sp]
   14220:	add	r1, sp, #52	; 0x34
   14224:	bl	154bc <__assert_fail@plt+0x4340>
   14228:	ldrd	r2, [r7, #8]
   1422c:	mov	r6, r0
   14230:	str	r0, [r7]
   14234:	strd	r2, [r0]
   14238:	b	140f4 <__assert_fail@plt+0x2f78>
   1423c:	bl	11158 <abort@plt>
   14240:	strd	r4, [sp, #-16]!
   14244:	mov	r5, r0
   14248:	str	r6, [sp, #8]
   1424c:	str	lr, [sp, #12]
   14250:	bl	11080 <__errno_location@plt>
   14254:	mov	r4, r0
   14258:	cmp	r5, #0
   1425c:	ldr	r0, [pc, #32]	; 14284 <__assert_fail@plt+0x3108>
   14260:	mov	r1, #48	; 0x30
   14264:	movne	r0, r5
   14268:	ldr	r6, [r4]
   1426c:	bl	15634 <__assert_fail@plt+0x44b8>
   14270:	str	r6, [r4]
   14274:	ldrd	r4, [sp]
   14278:	ldr	r6, [sp, #8]
   1427c:	add	sp, sp, #12
   14280:	pop	{pc}		; (ldr pc, [sp], #4)
   14284:	strdeq	r8, [r2], -r0
   14288:	ldr	r3, [pc, #12]	; 1429c <__assert_fail@plt+0x3120>
   1428c:	cmp	r0, #0
   14290:	moveq	r0, r3
   14294:	ldr	r0, [r0]
   14298:	bx	lr
   1429c:	strdeq	r8, [r2], -r0
   142a0:	ldr	r3, [pc, #12]	; 142b4 <__assert_fail@plt+0x3138>
   142a4:	cmp	r0, #0
   142a8:	moveq	r0, r3
   142ac:	str	r1, [r0]
   142b0:	bx	lr
   142b4:	strdeq	r8, [r2], -r0
   142b8:	ldr	r3, [pc, #52]	; 142f4 <__assert_fail@plt+0x3178>
   142bc:	cmp	r0, #0
   142c0:	push	{lr}		; (str lr, [sp, #-4]!)
   142c4:	lsr	lr, r1, #5
   142c8:	and	r1, r1, #31
   142cc:	moveq	r0, r3
   142d0:	add	r3, r0, #8
   142d4:	ldr	ip, [r3, lr, lsl #2]
   142d8:	lsr	r0, ip, r1
   142dc:	eor	r2, r2, r0
   142e0:	and	r0, r0, #1
   142e4:	and	r2, r2, #1
   142e8:	eor	r1, ip, r2, lsl r1
   142ec:	str	r1, [r3, lr, lsl #2]
   142f0:	pop	{pc}		; (ldr pc, [sp], #4)
   142f4:	strdeq	r8, [r2], -r0
   142f8:	ldr	r3, [pc, #16]	; 14310 <__assert_fail@plt+0x3194>
   142fc:	cmp	r0, #0
   14300:	movne	r3, r0
   14304:	ldr	r0, [r3, #4]
   14308:	str	r1, [r3, #4]
   1430c:	bx	lr
   14310:	strdeq	r8, [r2], -r0
   14314:	ldr	r3, [pc, #48]	; 1434c <__assert_fail@plt+0x31d0>
   14318:	cmp	r0, #0
   1431c:	mov	ip, #10
   14320:	moveq	r0, r3
   14324:	cmp	r2, #0
   14328:	cmpne	r1, #0
   1432c:	str	ip, [r0]
   14330:	beq	14340 <__assert_fail@plt+0x31c4>
   14334:	str	r1, [r0, #40]	; 0x28
   14338:	str	r2, [r0, #44]	; 0x2c
   1433c:	bx	lr
   14340:	str	r4, [sp, #-8]!
   14344:	str	lr, [sp, #4]
   14348:	bl	11158 <abort@plt>
   1434c:	strdeq	r8, [r2], -r0
   14350:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14354:	strd	r6, [sp, #8]
   14358:	mov	r7, r0
   1435c:	mov	r6, r1
   14360:	strd	r8, [sp, #16]
   14364:	mov	r8, r2
   14368:	mov	r9, r3
   1436c:	str	lr, [sp, #24]
   14370:	sub	sp, sp, #28
   14374:	ldr	r4, [sp, #56]	; 0x38
   14378:	ldr	ip, [pc, #104]	; 143e8 <__assert_fail@plt+0x326c>
   1437c:	cmp	r4, #0
   14380:	moveq	r4, ip
   14384:	bl	11080 <__errno_location@plt>
   14388:	ldr	ip, [r4, #44]	; 0x2c
   1438c:	mov	r5, r0
   14390:	mov	r1, r6
   14394:	add	lr, r4, #8
   14398:	mov	r3, r9
   1439c:	ldr	r6, [r5]
   143a0:	mov	r2, r8
   143a4:	mov	r0, r7
   143a8:	str	ip, [sp, #16]
   143ac:	ldr	ip, [r4, #40]	; 0x28
   143b0:	str	lr, [sp, #8]
   143b4:	str	ip, [sp, #12]
   143b8:	ldr	ip, [r4, #4]
   143bc:	str	ip, [sp, #4]
   143c0:	ldr	ip, [r4]
   143c4:	str	ip, [sp]
   143c8:	bl	12898 <__assert_fail@plt+0x171c>
   143cc:	str	r6, [r5]
   143d0:	add	sp, sp, #28
   143d4:	ldrd	r4, [sp]
   143d8:	ldrd	r6, [sp, #8]
   143dc:	ldrd	r8, [sp, #16]
   143e0:	add	sp, sp, #24
   143e4:	pop	{pc}		; (ldr pc, [sp], #4)
   143e8:	strdeq	r8, [r2], -r0
   143ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   143f0:	cmp	r3, #0
   143f4:	ldr	r4, [pc, #220]	; 144d8 <__assert_fail@plt+0x335c>
   143f8:	movne	r4, r3
   143fc:	strd	r6, [sp, #8]
   14400:	mov	r6, r2
   14404:	strd	r8, [sp, #16]
   14408:	mov	r9, r0
   1440c:	strd	sl, [sp, #24]
   14410:	mov	sl, r1
   14414:	str	lr, [sp, #32]
   14418:	sub	sp, sp, #44	; 0x2c
   1441c:	bl	11080 <__errno_location@plt>
   14420:	ldr	r5, [r4, #4]
   14424:	mov	r7, r0
   14428:	mov	r1, #0
   1442c:	add	r8, r4, #8
   14430:	mov	r3, sl
   14434:	ldr	ip, [r4, #44]	; 0x2c
   14438:	mov	r2, r9
   1443c:	mov	r0, r1
   14440:	ldr	lr, [r7]
   14444:	cmp	r6, r1
   14448:	orreq	r5, r5, #1
   1444c:	str	ip, [sp, #16]
   14450:	ldr	ip, [r4, #40]	; 0x28
   14454:	stmib	sp, {r5, r8, ip}
   14458:	ldr	ip, [r4]
   1445c:	str	lr, [sp, #28]
   14460:	str	ip, [sp]
   14464:	bl	12898 <__assert_fail@plt+0x171c>
   14468:	add	r1, r0, #1
   1446c:	mov	fp, r0
   14470:	mov	r0, r1
   14474:	str	r1, [sp, #36]	; 0x24
   14478:	bl	1530c <__assert_fail@plt+0x4190>
   1447c:	ldr	ip, [r4, #44]	; 0x2c
   14480:	mov	r3, sl
   14484:	mov	r2, r9
   14488:	ldr	r1, [sp, #36]	; 0x24
   1448c:	str	ip, [sp, #16]
   14490:	ldr	ip, [r4, #40]	; 0x28
   14494:	str	r0, [sp, #32]
   14498:	stmib	sp, {r5, r8, ip}
   1449c:	ldr	ip, [r4]
   144a0:	str	ip, [sp]
   144a4:	bl	12898 <__assert_fail@plt+0x171c>
   144a8:	ldr	lr, [sp, #28]
   144ac:	cmp	r6, #0
   144b0:	ldr	r0, [sp, #32]
   144b4:	str	lr, [r7]
   144b8:	strne	fp, [r6]
   144bc:	add	sp, sp, #44	; 0x2c
   144c0:	ldrd	r4, [sp]
   144c4:	ldrd	r6, [sp, #8]
   144c8:	ldrd	r8, [sp, #16]
   144cc:	ldrd	sl, [sp, #24]
   144d0:	add	sp, sp, #32
   144d4:	pop	{pc}		; (ldr pc, [sp], #4)
   144d8:	strdeq	r8, [r2], -r0
   144dc:	mov	r3, r2
   144e0:	mov	r2, #0
   144e4:	b	143ec <__assert_fail@plt+0x3270>
   144e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   144ec:	movw	r5, #33052	; 0x811c
   144f0:	movt	r5, #2
   144f4:	ldr	r3, [r5, #4]
   144f8:	strd	r6, [sp, #8]
   144fc:	str	r8, [sp, #16]
   14500:	str	lr, [sp, #20]
   14504:	ldr	r7, [r5]
   14508:	cmp	r3, #1
   1450c:	ble	14530 <__assert_fail@plt+0x33b4>
   14510:	mov	r4, #1
   14514:	add	r6, r7, #4
   14518:	ldr	r0, [r6, r4, lsl #3]
   1451c:	add	r4, r4, #1
   14520:	bl	12550 <__assert_fail@plt+0x13d4>
   14524:	ldr	r3, [r5, #4]
   14528:	cmp	r3, r4
   1452c:	bgt	14518 <__assert_fail@plt+0x339c>
   14530:	ldr	r0, [r7, #4]
   14534:	movw	r4, #33264	; 0x81f0
   14538:	movt	r4, #2
   1453c:	cmp	r0, r4
   14540:	beq	14554 <__assert_fail@plt+0x33d8>
   14544:	bl	12550 <__assert_fail@plt+0x13d4>
   14548:	mov	r3, #256	; 0x100
   1454c:	str	r3, [r5, #8]
   14550:	str	r4, [r5, #12]
   14554:	ldr	r4, [pc, #44]	; 14588 <__assert_fail@plt+0x340c>
   14558:	cmp	r7, r4
   1455c:	beq	1456c <__assert_fail@plt+0x33f0>
   14560:	mov	r0, r7
   14564:	bl	12550 <__assert_fail@plt+0x13d4>
   14568:	str	r4, [r5]
   1456c:	mov	r3, #1
   14570:	ldrd	r6, [sp, #8]
   14574:	str	r3, [r5, #4]
   14578:	ldrd	r4, [sp]
   1457c:	ldr	r8, [sp, #16]
   14580:	add	sp, sp, #20
   14584:	pop	{pc}		; (ldr pc, [sp], #4)
   14588:	andeq	r8, r2, r4, lsr #2
   1458c:	ldr	r3, [pc, #4]	; 14598 <__assert_fail@plt+0x341c>
   14590:	mvn	r2, #0
   14594:	b	14058 <__assert_fail@plt+0x2edc>
   14598:	strdeq	r8, [r2], -r0
   1459c:	ldr	r3, [pc]	; 145a4 <__assert_fail@plt+0x3428>
   145a0:	b	14058 <__assert_fail@plt+0x2edc>
   145a4:	strdeq	r8, [r2], -r0
   145a8:	mov	r1, r0
   145ac:	ldr	r3, [pc, #8]	; 145bc <__assert_fail@plt+0x3440>
   145b0:	mvn	r2, #0
   145b4:	mov	r0, #0
   145b8:	b	14058 <__assert_fail@plt+0x2edc>
   145bc:	strdeq	r8, [r2], -r0
   145c0:	mov	r2, r1
   145c4:	ldr	r3, [pc, #8]	; 145d4 <__assert_fail@plt+0x3458>
   145c8:	mov	r1, r0
   145cc:	mov	r0, #0
   145d0:	b	14058 <__assert_fail@plt+0x2edc>
   145d4:	strdeq	r8, [r2], -r0
   145d8:	strd	r4, [sp, #-12]!
   145dc:	mov	r5, r2
   145e0:	mov	r4, r0
   145e4:	str	lr, [sp, #8]
   145e8:	sub	sp, sp, #52	; 0x34
   145ec:	mov	r0, sp
   145f0:	bl	126f4 <__assert_fail@plt+0x1578>
   145f4:	mov	r3, sp
   145f8:	mov	r1, r5
   145fc:	mov	r0, r4
   14600:	mvn	r2, #0
   14604:	bl	14058 <__assert_fail@plt+0x2edc>
   14608:	add	sp, sp, #52	; 0x34
   1460c:	ldrd	r4, [sp]
   14610:	add	sp, sp, #8
   14614:	pop	{pc}		; (ldr pc, [sp], #4)
   14618:	strd	r4, [sp, #-16]!
   1461c:	mov	r5, r2
   14620:	mov	r4, r0
   14624:	str	r6, [sp, #8]
   14628:	mov	r6, r3
   1462c:	str	lr, [sp, #12]
   14630:	sub	sp, sp, #48	; 0x30
   14634:	mov	r0, sp
   14638:	bl	126f4 <__assert_fail@plt+0x1578>
   1463c:	mov	r3, sp
   14640:	mov	r2, r6
   14644:	mov	r1, r5
   14648:	mov	r0, r4
   1464c:	bl	14058 <__assert_fail@plt+0x2edc>
   14650:	add	sp, sp, #48	; 0x30
   14654:	ldrd	r4, [sp]
   14658:	ldr	r6, [sp, #8]
   1465c:	add	sp, sp, #12
   14660:	pop	{pc}		; (ldr pc, [sp], #4)
   14664:	mov	r2, r1
   14668:	mov	r1, r0
   1466c:	mov	r0, #0
   14670:	b	145d8 <__assert_fail@plt+0x345c>
   14674:	mov	r3, r2
   14678:	mov	r2, r1
   1467c:	mov	r1, r0
   14680:	mov	r0, #0
   14684:	b	14618 <__assert_fail@plt+0x349c>
   14688:	ldr	ip, [pc, #140]	; 1471c <__assert_fail@plt+0x35a0>
   1468c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14690:	ldrd	r4, [ip]
   14694:	strd	r6, [sp, #8]
   14698:	ldrd	r6, [ip, #8]
   1469c:	strd	r8, [sp, #16]
   146a0:	lsr	r9, r2, #5
   146a4:	str	lr, [sp, #24]
   146a8:	sub	sp, sp, #52	; 0x34
   146ac:	and	lr, r2, #31
   146b0:	add	r8, sp, #8
   146b4:	mov	r2, r1
   146b8:	strd	r4, [sp]
   146bc:	mov	r1, r0
   146c0:	mov	r3, sp
   146c4:	strd	r6, [sp, #8]
   146c8:	mov	r0, #0
   146cc:	ldrd	r4, [ip, #16]
   146d0:	ldrd	r6, [ip, #24]
   146d4:	strd	r4, [sp, #16]
   146d8:	ldrd	r4, [ip, #32]
   146dc:	strd	r6, [sp, #24]
   146e0:	ldrd	r6, [ip, #40]	; 0x28
   146e4:	strd	r4, [sp, #32]
   146e8:	strd	r6, [sp, #40]	; 0x28
   146ec:	ldr	ip, [r8, r9, lsl #2]
   146f0:	mvn	r4, ip, lsr lr
   146f4:	and	r4, r4, #1
   146f8:	eor	lr, ip, r4, lsl lr
   146fc:	str	lr, [r8, r9, lsl #2]
   14700:	bl	14058 <__assert_fail@plt+0x2edc>
   14704:	add	sp, sp, #52	; 0x34
   14708:	ldrd	r4, [sp]
   1470c:	ldrd	r6, [sp, #8]
   14710:	ldrd	r8, [sp, #16]
   14714:	add	sp, sp, #24
   14718:	pop	{pc}		; (ldr pc, [sp], #4)
   1471c:	strdeq	r8, [r2], -r0
   14720:	mov	r2, r1
   14724:	mvn	r1, #0
   14728:	b	14688 <__assert_fail@plt+0x350c>
   1472c:	mov	r2, #58	; 0x3a
   14730:	mvn	r1, #0
   14734:	b	14688 <__assert_fail@plt+0x350c>
   14738:	mov	r2, #58	; 0x3a
   1473c:	b	14688 <__assert_fail@plt+0x350c>
   14740:	strd	r4, [sp, #-20]!	; 0xffffffec
   14744:	strd	r6, [sp, #8]
   14748:	mov	r6, r0
   1474c:	mov	r7, r2
   14750:	str	lr, [sp, #16]
   14754:	sub	sp, sp, #100	; 0x64
   14758:	mov	r0, sp
   1475c:	bl	126f4 <__assert_fail@plt+0x1578>
   14760:	ldrd	r4, [sp, #8]
   14764:	mov	r1, r7
   14768:	mov	r0, r6
   1476c:	add	r3, sp, #48	; 0x30
   14770:	mvn	r2, #0
   14774:	ldrd	r6, [sp]
   14778:	strd	r4, [sp, #56]	; 0x38
   1477c:	ldrd	r4, [sp, #16]
   14780:	strd	r6, [sp, #48]	; 0x30
   14784:	ldrd	r6, [sp, #32]
   14788:	ldr	lr, [sp, #60]	; 0x3c
   1478c:	strd	r4, [sp, #64]	; 0x40
   14790:	ldrd	r4, [sp, #24]
   14794:	mvn	ip, lr
   14798:	and	ip, ip, #67108864	; 0x4000000
   1479c:	strd	r4, [sp, #72]	; 0x48
   147a0:	eor	ip, ip, lr
   147a4:	ldrd	r4, [sp, #40]	; 0x28
   147a8:	str	ip, [sp, #60]	; 0x3c
   147ac:	strd	r6, [sp, #80]	; 0x50
   147b0:	strd	r4, [sp, #88]	; 0x58
   147b4:	bl	14058 <__assert_fail@plt+0x2edc>
   147b8:	add	sp, sp, #100	; 0x64
   147bc:	ldrd	r4, [sp]
   147c0:	ldrd	r6, [sp, #8]
   147c4:	add	sp, sp, #16
   147c8:	pop	{pc}		; (ldr pc, [sp], #4)
   147cc:	ldr	ip, [pc, #156]	; 14870 <__assert_fail@plt+0x36f4>
   147d0:	cmp	r2, #0
   147d4:	cmpne	r1, #0
   147d8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   147dc:	strd	r6, [sp, #8]
   147e0:	mov	r6, r2
   147e4:	str	r8, [sp, #16]
   147e8:	mov	r8, r3
   147ec:	strd	sl, [sp, #20]
   147f0:	ldrd	r4, [ip]
   147f4:	str	lr, [sp, #28]
   147f8:	sub	sp, sp, #48	; 0x30
   147fc:	mov	lr, #10
   14800:	ldrd	r2, [ip, #8]
   14804:	ldrd	sl, [ip, #16]
   14808:	strd	r4, [sp]
   1480c:	ldrd	r4, [ip, #32]
   14810:	str	lr, [sp]
   14814:	strd	r2, [sp, #8]
   14818:	strd	sl, [sp, #16]
   1481c:	ldrd	r2, [ip, #24]
   14820:	ldrd	sl, [ip, #40]	; 0x28
   14824:	strd	r2, [sp, #24]
   14828:	strd	r4, [sp, #32]
   1482c:	strd	sl, [sp, #40]	; 0x28
   14830:	beq	1486c <__assert_fail@plt+0x36f0>
   14834:	ldr	r2, [sp, #80]	; 0x50
   14838:	mov	r7, r1
   1483c:	mov	r3, sp
   14840:	mov	r1, r8
   14844:	str	r7, [sp, #40]	; 0x28
   14848:	str	r6, [sp, #44]	; 0x2c
   1484c:	bl	14058 <__assert_fail@plt+0x2edc>
   14850:	add	sp, sp, #48	; 0x30
   14854:	ldrd	r4, [sp]
   14858:	ldrd	r6, [sp, #8]
   1485c:	ldr	r8, [sp, #16]
   14860:	ldrd	sl, [sp, #20]
   14864:	add	sp, sp, #28
   14868:	pop	{pc}		; (ldr pc, [sp], #4)
   1486c:	bl	11158 <abort@plt>
   14870:	strdeq	r8, [r2], -r0
   14874:	mvn	ip, #0
   14878:	push	{lr}		; (str lr, [sp, #-4]!)
   1487c:	sub	sp, sp, #12
   14880:	str	ip, [sp]
   14884:	bl	147cc <__assert_fail@plt+0x3650>
   14888:	add	sp, sp, #12
   1488c:	pop	{pc}		; (ldr pc, [sp], #4)
   14890:	mvn	ip, #0
   14894:	push	{lr}		; (str lr, [sp, #-4]!)
   14898:	sub	sp, sp, #12
   1489c:	mov	r3, r2
   148a0:	mov	r2, r1
   148a4:	mov	r1, r0
   148a8:	mov	r0, #0
   148ac:	str	ip, [sp]
   148b0:	bl	147cc <__assert_fail@plt+0x3650>
   148b4:	add	sp, sp, #12
   148b8:	pop	{pc}		; (ldr pc, [sp], #4)
   148bc:	push	{lr}		; (str lr, [sp, #-4]!)
   148c0:	sub	sp, sp, #12
   148c4:	str	r3, [sp]
   148c8:	mov	r3, r2
   148cc:	mov	r2, r1
   148d0:	mov	r1, r0
   148d4:	mov	r0, #0
   148d8:	bl	147cc <__assert_fail@plt+0x3650>
   148dc:	add	sp, sp, #12
   148e0:	pop	{pc}		; (ldr pc, [sp], #4)
   148e4:	ldr	r3, [pc]	; 148ec <__assert_fail@plt+0x3770>
   148e8:	b	14058 <__assert_fail@plt+0x2edc>
   148ec:	andeq	r8, r2, ip, lsr #2
   148f0:	mov	r2, r1
   148f4:	ldr	r3, [pc, #8]	; 14904 <__assert_fail@plt+0x3788>
   148f8:	mov	r1, r0
   148fc:	mov	r0, #0
   14900:	b	14058 <__assert_fail@plt+0x2edc>
   14904:	andeq	r8, r2, ip, lsr #2
   14908:	ldr	r3, [pc, #4]	; 14914 <__assert_fail@plt+0x3798>
   1490c:	mvn	r2, #0
   14910:	b	14058 <__assert_fail@plt+0x2edc>
   14914:	andeq	r8, r2, ip, lsr #2
   14918:	mov	r1, r0
   1491c:	ldr	r3, [pc, #8]	; 1492c <__assert_fail@plt+0x37b0>
   14920:	mvn	r2, #0
   14924:	mov	r0, #0
   14928:	b	14058 <__assert_fail@plt+0x2edc>
   1492c:	andeq	r8, r2, ip, lsr #2
   14930:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14934:	mov	r4, r1
   14938:	strd	r6, [sp, #8]
   1493c:	strd	r8, [sp, #16]
   14940:	subs	r9, r3, #0
   14944:	mov	r8, r2
   14948:	strd	sl, [sp, #24]
   1494c:	mvneq	sl, #0
   14950:	str	lr, [sp, #32]
   14954:	sub	sp, sp, #44	; 0x2c
   14958:	ldr	r3, [sp, #80]	; 0x50
   1495c:	ldrne	sl, [r9]
   14960:	ldr	fp, [r2]
   14964:	cmp	r3, #0
   14968:	ldr	r6, [sp, #84]	; 0x54
   1496c:	beq	1497c <__assert_fail@plt+0x3800>
   14970:	mov	r3, #0
   14974:	ldr	r2, [sp, #80]	; 0x50
   14978:	str	r3, [r2]
   1497c:	cmp	r6, #0
   14980:	movne	r3, #0
   14984:	strne	r3, [r6]
   14988:	cmp	r4, #0
   1498c:	beq	14b40 <__assert_fail@plt+0x39c4>
   14990:	subs	r3, r4, r0
   14994:	bne	14a3c <__assert_fail@plt+0x38c0>
   14998:	ldrb	r2, [r4, #1]
   1499c:	cmp	r2, #0
   149a0:	beq	14b54 <__assert_fail@plt+0x39d8>
   149a4:	adds	r5, r4, #1
   149a8:	moveq	r4, r5
   149ac:	beq	149e4 <__assert_fail@plt+0x3868>
   149b0:	mov	r4, r3
   149b4:	ldrb	r3, [r5]
   149b8:	cmp	r3, #43	; 0x2b
   149bc:	beq	14ab0 <__assert_fail@plt+0x3934>
   149c0:	mov	r0, r5
   149c4:	bl	11170 <getgrnam@plt>
   149c8:	cmp	r0, #0
   149cc:	beq	14ab0 <__assert_fail@plt+0x3934>
   149d0:	ldr	sl, [r0, #8]
   149d4:	bl	10eac <endgrent@plt>
   149d8:	mov	r0, r5
   149dc:	bl	15714 <__assert_fail@plt+0x4598>
   149e0:	mov	r5, r0
   149e4:	ldr	r3, [sp, #80]	; 0x50
   149e8:	cmp	r9, #0
   149ec:	str	fp, [r8]
   149f0:	strne	sl, [r9]
   149f4:	cmp	r3, #0
   149f8:	strne	r4, [r3]
   149fc:	movne	r4, #0
   14a00:	cmp	r6, #0
   14a04:	mov	r0, r4
   14a08:	strne	r5, [r6]
   14a0c:	movne	r5, #0
   14a10:	bl	12550 <__assert_fail@plt+0x13d4>
   14a14:	mov	r0, r5
   14a18:	bl	12550 <__assert_fail@plt+0x13d4>
   14a1c:	mov	r0, #0
   14a20:	add	sp, sp, #44	; 0x2c
   14a24:	ldrd	r4, [sp]
   14a28:	ldrd	r6, [sp, #8]
   14a2c:	ldrd	r8, [sp, #16]
   14a30:	ldrd	sl, [sp, #24]
   14a34:	add	sp, sp, #32
   14a38:	pop	{pc}		; (ldr pc, [sp], #4)
   14a3c:	add	r1, r3, #1
   14a40:	str	r3, [sp, #12]
   14a44:	bl	1567c <__assert_fail@plt+0x4500>
   14a48:	ldrb	r5, [r4, #1]
   14a4c:	mov	r2, #0
   14a50:	mov	r7, r0
   14a54:	ldr	r3, [sp, #12]
   14a58:	cmp	r5, r2
   14a5c:	strb	r2, [r0, r3]
   14a60:	ldrb	r3, [r0]
   14a64:	beq	14b5c <__assert_fail@plt+0x39e0>
   14a68:	adds	r5, r4, #1
   14a6c:	moveq	r4, #1
   14a70:	movne	r4, r2
   14a74:	cmp	r3, #43	; 0x2b
   14a78:	beq	14b04 <__assert_fail@plt+0x3988>
   14a7c:	bl	10ed0 <getpwnam@plt>
   14a80:	cmp	r0, #0
   14a84:	beq	14b04 <__assert_fail@plt+0x3988>
   14a88:	cmp	r4, #0
   14a8c:	ldr	fp, [r0, #8]
   14a90:	moveq	r4, r7
   14a94:	bne	14b78 <__assert_fail@plt+0x39fc>
   14a98:	bl	11110 <endpwent@plt>
   14a9c:	cmp	r5, #0
   14aa0:	beq	149e4 <__assert_fail@plt+0x3868>
   14aa4:	ldrb	r3, [r5]
   14aa8:	cmp	r3, #43	; 0x2b
   14aac:	bne	149c0 <__assert_fail@plt+0x3844>
   14ab0:	movw	r0, #26700	; 0x684c
   14ab4:	movt	r0, #1
   14ab8:	add	r3, sp, #16
   14abc:	mov	r2, #10
   14ac0:	mov	r1, #0
   14ac4:	str	r0, [sp]
   14ac8:	mov	r0, r5
   14acc:	bl	157bc <__assert_fail@plt+0x4640>
   14ad0:	cmp	r0, #0
   14ad4:	bne	14ae4 <__assert_fail@plt+0x3968>
   14ad8:	ldr	sl, [sp, #16]
   14adc:	cmn	sl, #1
   14ae0:	bne	149d4 <__assert_fail@plt+0x3858>
   14ae4:	bl	10eac <endgrent@plt>
   14ae8:	mov	r0, r5
   14aec:	mov	r7, r4
   14af0:	bl	15714 <__assert_fail@plt+0x4598>
   14af4:	movw	r4, #28764	; 0x705c
   14af8:	movt	r4, #1
   14afc:	mov	r5, r0
   14b00:	b	14b1c <__assert_fail@plt+0x39a0>
   14b04:	cmp	r4, #0
   14b08:	beq	14bcc <__assert_fail@plt+0x3a50>
   14b0c:	movw	r4, #28748	; 0x704c
   14b10:	movt	r4, #1
   14b14:	mov	r5, #0
   14b18:	bl	11110 <endpwent@plt>
   14b1c:	mov	r0, r7
   14b20:	bl	12550 <__assert_fail@plt+0x13d4>
   14b24:	mov	r0, r5
   14b28:	bl	12550 <__assert_fail@plt+0x13d4>
   14b2c:	mov	r1, r4
   14b30:	mov	r2, #5
   14b34:	mov	r0, #0
   14b38:	bl	10f60 <dcgettext@plt>
   14b3c:	b	14a20 <__assert_fail@plt+0x38a4>
   14b40:	ldrb	r3, [r0]
   14b44:	cmp	r3, #0
   14b48:	bne	14ba8 <__assert_fail@plt+0x3a2c>
   14b4c:	mov	r5, r4
   14b50:	b	149e4 <__assert_fail@plt+0x3868>
   14b54:	mov	r4, r2
   14b58:	b	14b4c <__assert_fail@plt+0x39d0>
   14b5c:	cmp	r3, #43	; 0x2b
   14b60:	beq	14b0c <__assert_fail@plt+0x3990>
   14b64:	bl	10ed0 <getpwnam@plt>
   14b68:	cmp	r0, #0
   14b6c:	movne	r4, #1
   14b70:	bne	14a88 <__assert_fail@plt+0x390c>
   14b74:	b	14b0c <__assert_fail@plt+0x3990>
   14b78:	ldr	sl, [r0, #12]
   14b7c:	mov	r0, sl
   14b80:	bl	11164 <getgrgid@plt>
   14b84:	subs	r1, r0, #0
   14b88:	beq	14c38 <__assert_fail@plt+0x3abc>
   14b8c:	ldr	r0, [r1]
   14b90:	bl	15714 <__assert_fail@plt+0x4598>
   14b94:	mov	r5, r0
   14b98:	mov	r4, r7
   14b9c:	bl	10eac <endgrent@plt>
   14ba0:	bl	11110 <endpwent@plt>
   14ba4:	b	149e4 <__assert_fail@plt+0x3868>
   14ba8:	bl	15714 <__assert_fail@plt+0x4598>
   14bac:	ldrb	r3, [r0]
   14bb0:	mov	r7, r0
   14bb4:	cmp	r3, #43	; 0x2b
   14bb8:	moveq	r5, r4
   14bbc:	beq	14bcc <__assert_fail@plt+0x3a50>
   14bc0:	bl	10ed0 <getpwnam@plt>
   14bc4:	subs	r5, r0, #0
   14bc8:	bne	14c28 <__assert_fail@plt+0x3aac>
   14bcc:	movw	r0, #26700	; 0x684c
   14bd0:	movt	r0, #1
   14bd4:	add	r3, sp, #16
   14bd8:	mov	r2, #10
   14bdc:	mov	r1, #0
   14be0:	str	r0, [sp]
   14be4:	mov	r0, r7
   14be8:	bl	157bc <__assert_fail@plt+0x4640>
   14bec:	cmp	r0, #0
   14bf0:	bne	14c14 <__assert_fail@plt+0x3a98>
   14bf4:	ldr	fp, [sp, #16]
   14bf8:	cmn	fp, #1
   14bfc:	beq	14c14 <__assert_fail@plt+0x3a98>
   14c00:	bl	11110 <endpwent@plt>
   14c04:	cmp	r5, #0
   14c08:	mov	r4, r7
   14c0c:	beq	149e4 <__assert_fail@plt+0x3868>
   14c10:	b	149b4 <__assert_fail@plt+0x3838>
   14c14:	movw	r4, #28780	; 0x706c
   14c18:	movt	r4, #1
   14c1c:	bl	11110 <endpwent@plt>
   14c20:	mov	r5, #0
   14c24:	b	14b1c <__assert_fail@plt+0x39a0>
   14c28:	ldr	fp, [r5, #8]
   14c2c:	mov	r5, r4
   14c30:	mov	r4, r7
   14c34:	b	14a98 <__assert_fail@plt+0x391c>
   14c38:	add	r2, sp, #16
   14c3c:	mov	r0, sl
   14c40:	bl	125b0 <__assert_fail@plt+0x1434>
   14c44:	b	14b90 <__assert_fail@plt+0x3a14>
   14c48:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14c4c:	strd	r6, [sp, #8]
   14c50:	subs	r7, r2, #0
   14c54:	strd	r8, [sp, #16]
   14c58:	mov	r9, r1
   14c5c:	mov	r8, r3
   14c60:	str	sl, [sp, #24]
   14c64:	str	lr, [sp, #28]
   14c68:	sub	sp, sp, #8
   14c6c:	ldr	r6, [sp, #40]	; 0x28
   14c70:	beq	14d08 <__assert_fail@plt+0x3b8c>
   14c74:	mov	r1, #58	; 0x3a
   14c78:	mov	r5, r0
   14c7c:	bl	11074 <strchr@plt>
   14c80:	mov	sl, r0
   14c84:	mov	r1, r0
   14c88:	str	r8, [sp]
   14c8c:	mov	r3, r7
   14c90:	mov	r2, r9
   14c94:	str	r6, [sp, #4]
   14c98:	mov	r0, r5
   14c9c:	bl	14930 <__assert_fail@plt+0x37b4>
   14ca0:	cmp	sl, #0
   14ca4:	mov	r4, r0
   14ca8:	bne	14ce8 <__assert_fail@plt+0x3b6c>
   14cac:	cmp	r0, #0
   14cb0:	beq	14d28 <__assert_fail@plt+0x3bac>
   14cb4:	mov	r1, #46	; 0x2e
   14cb8:	mov	r0, r5
   14cbc:	bl	11074 <strchr@plt>
   14cc0:	subs	r1, r0, #0
   14cc4:	beq	14ce8 <__assert_fail@plt+0x3b6c>
   14cc8:	mov	r3, r7
   14ccc:	mov	r2, r9
   14cd0:	str	r8, [sp]
   14cd4:	mov	r0, r5
   14cd8:	str	r6, [sp, #4]
   14cdc:	bl	14930 <__assert_fail@plt+0x37b4>
   14ce0:	cmp	r0, #0
   14ce4:	beq	14d28 <__assert_fail@plt+0x3bac>
   14ce8:	mov	r0, r4
   14cec:	add	sp, sp, #8
   14cf0:	ldrd	r4, [sp]
   14cf4:	ldrd	r6, [sp, #8]
   14cf8:	ldrd	r8, [sp, #16]
   14cfc:	ldr	sl, [sp, #24]
   14d00:	add	sp, sp, #28
   14d04:	pop	{pc}		; (ldr pc, [sp], #4)
   14d08:	mov	r2, r1
   14d0c:	mov	r3, r7
   14d10:	str	r8, [sp]
   14d14:	mov	r1, r7
   14d18:	str	r6, [sp, #4]
   14d1c:	bl	14930 <__assert_fail@plt+0x37b4>
   14d20:	mov	r4, r0
   14d24:	b	14ce8 <__assert_fail@plt+0x3b6c>
   14d28:	mov	r4, #0
   14d2c:	b	14ce8 <__assert_fail@plt+0x3b6c>
   14d30:	cmp	r1, #0
   14d34:	strd	r4, [sp, #-16]!
   14d38:	mov	ip, r3
   14d3c:	str	r6, [sp, #8]
   14d40:	mov	r4, r0
   14d44:	str	lr, [sp, #12]
   14d48:	sub	sp, sp, #32
   14d4c:	ldr	r5, [sp, #48]	; 0x30
   14d50:	ldr	r6, [sp, #52]	; 0x34
   14d54:	beq	14e98 <__assert_fail@plt+0x3d1c>
   14d58:	mov	r3, r1
   14d5c:	mov	r1, #1
   14d60:	stm	sp, {r2, ip}
   14d64:	movw	r2, #28796	; 0x707c
   14d68:	movt	r2, #1
   14d6c:	bl	110d4 <__fprintf_chk@plt>
   14d70:	mov	r2, #5
   14d74:	movw	r1, #28816	; 0x7090
   14d78:	movt	r1, #1
   14d7c:	mov	r0, #0
   14d80:	bl	10f60 <dcgettext@plt>
   14d84:	movw	ip, #2022	; 0x7e6
   14d88:	mov	r3, r0
   14d8c:	mov	r1, #1
   14d90:	movw	r2, #29544	; 0x7368
   14d94:	movt	r2, #1
   14d98:	mov	r0, r4
   14d9c:	str	ip, [sp]
   14da0:	bl	110d4 <__fprintf_chk@plt>
   14da4:	mov	r1, r4
   14da8:	mov	r0, #10
   14dac:	bl	10f54 <fputc_unlocked@plt>
   14db0:	mov	r2, #5
   14db4:	movw	r1, #28820	; 0x7094
   14db8:	movt	r1, #1
   14dbc:	mov	r0, #0
   14dc0:	bl	10f60 <dcgettext@plt>
   14dc4:	mov	r2, r0
   14dc8:	mov	r1, #1
   14dcc:	movw	r3, #28992	; 0x7140
   14dd0:	movt	r3, #1
   14dd4:	mov	r0, r4
   14dd8:	bl	110d4 <__fprintf_chk@plt>
   14ddc:	mov	r1, r4
   14de0:	mov	r0, #10
   14de4:	bl	10f54 <fputc_unlocked@plt>
   14de8:	cmp	r6, #9
   14dec:	ldrls	pc, [pc, r6, lsl #2]
   14df0:	b	15104 <__assert_fail@plt+0x3f88>
   14df4:	andeq	r4, r1, r4, lsl #29
   14df8:			; <UNDEFINED> instruction: 0x00014eb4
   14dfc:	strdeq	r4, [r1], -r0
   14e00:	andeq	r4, r1, r0, lsr pc
   14e04:	andeq	r4, r1, r8, ror pc
   14e08:			; <UNDEFINED> instruction: 0x00014fb0
   14e0c:	strdeq	r4, [r1], -r8
   14e10:	andeq	r5, r1, ip, asr #32
   14e14:	andeq	r5, r1, r4, lsr #1
   14e18:	andeq	r4, r1, ip, lsl lr
   14e1c:	movw	r1, #29296	; 0x7270
   14e20:	movt	r1, #1
   14e24:	mov	r2, #5
   14e28:	mov	r0, #0
   14e2c:	bl	10f60 <dcgettext@plt>
   14e30:	ldr	lr, [r5, #4]
   14e34:	mov	r2, r0
   14e38:	mov	r1, #1
   14e3c:	mov	r0, r4
   14e40:	ldr	r3, [r5, #8]
   14e44:	ldr	ip, [r5, #32]
   14e48:	str	lr, [sp]
   14e4c:	ldr	lr, [r5, #12]
   14e50:	str	ip, [sp, #28]
   14e54:	ldr	ip, [r5, #28]
   14e58:	str	r3, [sp, #4]
   14e5c:	ldr	r3, [r5, #16]
   14e60:	str	lr, [sp, #8]
   14e64:	ldr	lr, [r5, #20]
   14e68:	str	ip, [sp, #24]
   14e6c:	ldr	ip, [r5, #24]
   14e70:	str	r3, [sp, #12]
   14e74:	ldr	r3, [r5]
   14e78:	str	lr, [sp, #16]
   14e7c:	str	ip, [sp, #20]
   14e80:	bl	110d4 <__fprintf_chk@plt>
   14e84:	add	sp, sp, #32
   14e88:	ldrd	r4, [sp]
   14e8c:	ldr	r6, [sp, #8]
   14e90:	add	sp, sp, #12
   14e94:	pop	{pc}		; (ldr pc, [sp], #4)
   14e98:	mov	r3, r2
   14e9c:	mov	r1, #1
   14ea0:	str	ip, [sp]
   14ea4:	movw	r2, #28808	; 0x7088
   14ea8:	movt	r2, #1
   14eac:	bl	110d4 <__fprintf_chk@plt>
   14eb0:	b	14d70 <__assert_fail@plt+0x3bf4>
   14eb4:	mov	r2, #5
   14eb8:	movw	r1, #29028	; 0x7164
   14ebc:	movt	r1, #1
   14ec0:	mov	r0, #0
   14ec4:	bl	10f60 <dcgettext@plt>
   14ec8:	ldr	r3, [r5]
   14ecc:	mov	r2, r0
   14ed0:	mov	r1, #1
   14ed4:	mov	r0, r4
   14ed8:	add	sp, sp, #32
   14edc:	ldrd	r4, [sp]
   14ee0:	ldr	r6, [sp, #8]
   14ee4:	ldr	lr, [sp, #12]
   14ee8:	add	sp, sp, #16
   14eec:	b	110d4 <__fprintf_chk@plt>
   14ef0:	mov	r2, #5
   14ef4:	movw	r1, #29044	; 0x7174
   14ef8:	movt	r1, #1
   14efc:	mov	r0, #0
   14f00:	bl	10f60 <dcgettext@plt>
   14f04:	ldm	r5, {r3, ip}
   14f08:	mov	r2, r0
   14f0c:	mov	r1, #1
   14f10:	mov	r0, r4
   14f14:	str	ip, [sp, #48]	; 0x30
   14f18:	add	sp, sp, #32
   14f1c:	ldrd	r4, [sp]
   14f20:	ldr	r6, [sp, #8]
   14f24:	ldr	lr, [sp, #12]
   14f28:	add	sp, sp, #16
   14f2c:	b	110d4 <__fprintf_chk@plt>
   14f30:	mov	r2, #5
   14f34:	movw	r1, #29068	; 0x718c
   14f38:	movt	r1, #1
   14f3c:	mov	r0, #0
   14f40:	bl	10f60 <dcgettext@plt>
   14f44:	ldm	r5, {r3, lr}
   14f48:	mov	r2, r0
   14f4c:	mov	r1, #1
   14f50:	mov	r0, r4
   14f54:	ldr	ip, [r5, #8]
   14f58:	str	lr, [sp, #48]	; 0x30
   14f5c:	str	ip, [sp, #52]	; 0x34
   14f60:	add	sp, sp, #32
   14f64:	ldrd	r4, [sp]
   14f68:	ldr	r6, [sp, #8]
   14f6c:	ldr	lr, [sp, #12]
   14f70:	add	sp, sp, #16
   14f74:	b	110d4 <__fprintf_chk@plt>
   14f78:	mov	r2, #5
   14f7c:	movw	r1, #29096	; 0x71a8
   14f80:	movt	r1, #1
   14f84:	mov	r0, #0
   14f88:	bl	10f60 <dcgettext@plt>
   14f8c:	ldmib	r5, {r3, ip, lr}
   14f90:	mov	r2, r0
   14f94:	mov	r1, #1
   14f98:	mov	r0, r4
   14f9c:	str	r3, [sp]
   14fa0:	ldr	r3, [r5]
   14fa4:	stmib	sp, {ip, lr}
   14fa8:	bl	110d4 <__fprintf_chk@plt>
   14fac:	b	14e84 <__assert_fail@plt+0x3d08>
   14fb0:	mov	r2, #5
   14fb4:	movw	r1, #29128	; 0x71c8
   14fb8:	movt	r1, #1
   14fbc:	mov	r0, #0
   14fc0:	bl	10f60 <dcgettext@plt>
   14fc4:	ldmib	r5, {ip, lr}
   14fc8:	mov	r2, r0
   14fcc:	mov	r1, #1
   14fd0:	mov	r0, r4
   14fd4:	ldr	r3, [r5, #16]
   14fd8:	str	ip, [sp]
   14fdc:	ldr	ip, [r5, #12]
   14fe0:	str	r3, [sp, #12]
   14fe4:	ldr	r3, [r5]
   14fe8:	str	lr, [sp, #4]
   14fec:	str	ip, [sp, #8]
   14ff0:	bl	110d4 <__fprintf_chk@plt>
   14ff4:	b	14e84 <__assert_fail@plt+0x3d08>
   14ff8:	mov	r2, #5
   14ffc:	movw	r1, #29164	; 0x71ec
   15000:	movt	r1, #1
   15004:	mov	r0, #0
   15008:	bl	10f60 <dcgettext@plt>
   1500c:	ldr	lr, [r5, #4]
   15010:	mov	r2, r0
   15014:	mov	r1, #1
   15018:	mov	r0, r4
   1501c:	ldr	r3, [r5, #8]
   15020:	ldr	ip, [r5, #20]
   15024:	str	lr, [sp]
   15028:	ldr	lr, [r5, #12]
   1502c:	str	ip, [sp, #16]
   15030:	ldr	ip, [r5, #16]
   15034:	str	r3, [sp, #4]
   15038:	ldr	r3, [r5]
   1503c:	str	lr, [sp, #8]
   15040:	str	ip, [sp, #12]
   15044:	bl	110d4 <__fprintf_chk@plt>
   15048:	b	14e84 <__assert_fail@plt+0x3d08>
   1504c:	mov	r2, #5
   15050:	movw	r1, #29204	; 0x7214
   15054:	movt	r1, #1
   15058:	mov	r0, #0
   1505c:	bl	10f60 <dcgettext@plt>
   15060:	ldmib	r5, {r3, ip}
   15064:	mov	r2, r0
   15068:	mov	r1, #1
   1506c:	mov	r0, r4
   15070:	ldr	lr, [r5, #24]
   15074:	str	r3, [sp]
   15078:	ldr	r3, [r5, #12]
   1507c:	str	lr, [sp, #20]
   15080:	ldr	lr, [r5, #20]
   15084:	str	ip, [sp, #4]
   15088:	ldr	ip, [r5, #16]
   1508c:	str	r3, [sp, #8]
   15090:	ldr	r3, [r5]
   15094:	str	ip, [sp, #12]
   15098:	str	lr, [sp, #16]
   1509c:	bl	110d4 <__fprintf_chk@plt>
   150a0:	b	14e84 <__assert_fail@plt+0x3d08>
   150a4:	mov	r2, #5
   150a8:	movw	r1, #29248	; 0x7240
   150ac:	movt	r1, #1
   150b0:	mov	r0, #0
   150b4:	bl	10f60 <dcgettext@plt>
   150b8:	ldmib	r5, {ip, lr}
   150bc:	mov	r2, r0
   150c0:	mov	r1, #1
   150c4:	mov	r0, r4
   150c8:	ldr	r3, [r5, #28]
   150cc:	str	ip, [sp]
   150d0:	ldr	ip, [r5, #12]
   150d4:	str	r3, [sp, #24]
   150d8:	ldr	r3, [r5, #24]
   150dc:	str	lr, [sp, #4]
   150e0:	ldr	lr, [r5, #16]
   150e4:	str	ip, [sp, #8]
   150e8:	ldr	ip, [r5, #20]
   150ec:	str	r3, [sp, #20]
   150f0:	ldr	r3, [r5]
   150f4:	str	lr, [sp, #12]
   150f8:	str	ip, [sp, #16]
   150fc:	bl	110d4 <__fprintf_chk@plt>
   15100:	b	14e84 <__assert_fail@plt+0x3d08>
   15104:	movw	r1, #29348	; 0x72a4
   15108:	movt	r1, #1
   1510c:	b	14e24 <__assert_fail@plt+0x3ca8>
   15110:	strd	r4, [sp, #-12]!
   15114:	str	lr, [sp, #8]
   15118:	sub	sp, sp, #12
   1511c:	ldr	r5, [sp, #24]
   15120:	ldr	ip, [r5]
   15124:	cmp	ip, #0
   15128:	beq	15144 <__assert_fail@plt+0x3fc8>
   1512c:	mov	lr, r5
   15130:	mov	ip, #0
   15134:	ldr	r4, [lr, #4]!
   15138:	add	ip, ip, #1
   1513c:	cmp	r4, #0
   15140:	bne	15134 <__assert_fail@plt+0x3fb8>
   15144:	stm	sp, {r5, ip}
   15148:	bl	14d30 <__assert_fail@plt+0x3bb4>
   1514c:	add	sp, sp, #12
   15150:	ldrd	r4, [sp]
   15154:	add	sp, sp, #8
   15158:	pop	{pc}		; (ldr pc, [sp], #4)
   1515c:	strd	r4, [sp, #-16]!
   15160:	mov	ip, #0
   15164:	str	r6, [sp, #8]
   15168:	str	lr, [sp, #12]
   1516c:	sub	sp, sp, #48	; 0x30
   15170:	ldr	r5, [sp, #64]	; 0x40
   15174:	add	r6, sp, #8
   15178:	mov	r4, r6
   1517c:	ldr	lr, [r5], #4
   15180:	cmp	lr, #0
   15184:	str	lr, [r4], #4
   15188:	beq	15198 <__assert_fail@plt+0x401c>
   1518c:	add	ip, ip, #1
   15190:	cmp	ip, #10
   15194:	bne	1517c <__assert_fail@plt+0x4000>
   15198:	stm	sp, {r6, ip}
   1519c:	bl	14d30 <__assert_fail@plt+0x3bb4>
   151a0:	add	sp, sp, #48	; 0x30
   151a4:	ldrd	r4, [sp]
   151a8:	ldr	r6, [sp, #8]
   151ac:	add	sp, sp, #12
   151b0:	pop	{pc}		; (ldr pc, [sp], #4)
   151b4:	push	{r3}		; (str r3, [sp, #-4]!)
   151b8:	mov	ip, #0
   151bc:	strd	r4, [sp, #-12]!
   151c0:	str	lr, [sp, #8]
   151c4:	sub	sp, sp, #56	; 0x38
   151c8:	add	r3, sp, #72	; 0x48
   151cc:	add	r5, sp, #16
   151d0:	mov	r4, r3
   151d4:	mov	lr, r5
   151d8:	str	r3, [sp, #12]
   151dc:	ldr	r3, [r4], #4
   151e0:	cmp	r3, #0
   151e4:	str	r3, [lr], #4
   151e8:	beq	151f8 <__assert_fail@plt+0x407c>
   151ec:	add	ip, ip, #1
   151f0:	cmp	ip, #10
   151f4:	bne	151dc <__assert_fail@plt+0x4060>
   151f8:	ldr	r3, [sp, #68]	; 0x44
   151fc:	stm	sp, {r5, ip}
   15200:	bl	14d30 <__assert_fail@plt+0x3bb4>
   15204:	add	sp, sp, #56	; 0x38
   15208:	ldrd	r4, [sp]
   1520c:	ldr	lr, [sp, #8]
   15210:	add	sp, sp, #12
   15214:	add	sp, sp, #4
   15218:	bx	lr
   1521c:	movw	r3, #33140	; 0x8174
   15220:	movt	r3, #2
   15224:	str	r4, [sp, #-8]!
   15228:	mov	r0, #10
   1522c:	ldr	r1, [r3]
   15230:	str	lr, [sp, #4]
   15234:	bl	10f54 <fputc_unlocked@plt>
   15238:	mov	r2, #5
   1523c:	movw	r1, #29408	; 0x72e0
   15240:	movt	r1, #1
   15244:	mov	r0, #0
   15248:	bl	10f60 <dcgettext@plt>
   1524c:	mov	r1, r0
   15250:	movw	r2, #29428	; 0x72f4
   15254:	movt	r2, #1
   15258:	mov	r0, #1
   1525c:	bl	110bc <__printf_chk@plt>
   15260:	mov	r2, #5
   15264:	movw	r1, #29452	; 0x730c
   15268:	movt	r1, #1
   1526c:	mov	r0, #0
   15270:	bl	10f60 <dcgettext@plt>
   15274:	mov	r1, r0
   15278:	movw	r3, #27536	; 0x6b90
   1527c:	movt	r3, #1
   15280:	movw	r2, #27576	; 0x6bb8
   15284:	movt	r2, #1
   15288:	mov	r0, #1
   1528c:	bl	110bc <__printf_chk@plt>
   15290:	mov	r2, #5
   15294:	movw	r1, #29472	; 0x7320
   15298:	movt	r1, #1
   1529c:	mov	r0, #0
   152a0:	bl	10f60 <dcgettext@plt>
   152a4:	mov	r1, r0
   152a8:	movw	r2, #29512	; 0x7348
   152ac:	movt	r2, #1
   152b0:	mov	r0, #1
   152b4:	ldr	r4, [sp]
   152b8:	ldr	lr, [sp, #4]
   152bc:	add	sp, sp, #8
   152c0:	b	110bc <__printf_chk@plt>
   152c4:	str	r4, [sp, #-8]!
   152c8:	str	lr, [sp, #4]
   152cc:	bl	15d30 <__assert_fail@plt+0x4bb4>
   152d0:	cmp	r0, #0
   152d4:	beq	152e4 <__assert_fail@plt+0x4168>
   152d8:	ldr	r4, [sp]
   152dc:	add	sp, sp, #4
   152e0:	pop	{pc}		; (ldr pc, [sp], #4)
   152e4:	bl	1573c <__assert_fail@plt+0x45c0>
   152e8:	str	r4, [sp, #-8]!
   152ec:	str	lr, [sp, #4]
   152f0:	bl	15d30 <__assert_fail@plt+0x4bb4>
   152f4:	cmp	r0, #0
   152f8:	beq	15308 <__assert_fail@plt+0x418c>
   152fc:	ldr	r4, [sp]
   15300:	add	sp, sp, #4
   15304:	pop	{pc}		; (ldr pc, [sp], #4)
   15308:	bl	1573c <__assert_fail@plt+0x45c0>
   1530c:	str	r4, [sp, #-8]!
   15310:	str	lr, [sp, #4]
   15314:	bl	15d30 <__assert_fail@plt+0x4bb4>
   15318:	cmp	r0, #0
   1531c:	beq	1532c <__assert_fail@plt+0x41b0>
   15320:	ldr	r4, [sp]
   15324:	add	sp, sp, #4
   15328:	pop	{pc}		; (ldr pc, [sp], #4)
   1532c:	bl	1573c <__assert_fail@plt+0x45c0>
   15330:	strd	r4, [sp, #-16]!
   15334:	mov	r5, r0
   15338:	mov	r4, r1
   1533c:	str	r6, [sp, #8]
   15340:	str	lr, [sp, #12]
   15344:	bl	15d6c <__assert_fail@plt+0x4bf0>
   15348:	cmp	r0, #0
   1534c:	beq	15360 <__assert_fail@plt+0x41e4>
   15350:	ldrd	r4, [sp]
   15354:	ldr	r6, [sp, #8]
   15358:	add	sp, sp, #12
   1535c:	pop	{pc}		; (ldr pc, [sp], #4)
   15360:	adds	r4, r4, #0
   15364:	movne	r4, #1
   15368:	cmp	r5, #0
   1536c:	moveq	r4, #1
   15370:	cmp	r4, #0
   15374:	beq	15350 <__assert_fail@plt+0x41d4>
   15378:	bl	1573c <__assert_fail@plt+0x45c0>
   1537c:	cmp	r1, #0
   15380:	orreq	r1, r1, #1
   15384:	str	r4, [sp, #-8]!
   15388:	str	lr, [sp, #4]
   1538c:	bl	15d6c <__assert_fail@plt+0x4bf0>
   15390:	cmp	r0, #0
   15394:	beq	153a4 <__assert_fail@plt+0x4228>
   15398:	ldr	r4, [sp]
   1539c:	add	sp, sp, #4
   153a0:	pop	{pc}		; (ldr pc, [sp], #4)
   153a4:	bl	1573c <__assert_fail@plt+0x45c0>
   153a8:	strd	r4, [sp, #-16]!
   153ac:	mov	r4, r0
   153b0:	mov	r5, r2
   153b4:	str	r6, [sp, #8]
   153b8:	mov	r6, r1
   153bc:	str	lr, [sp, #12]
   153c0:	bl	1631c <__assert_fail@plt+0x51a0>
   153c4:	cmp	r0, #0
   153c8:	beq	153dc <__assert_fail@plt+0x4260>
   153cc:	ldrd	r4, [sp]
   153d0:	ldr	r6, [sp, #8]
   153d4:	add	sp, sp, #12
   153d8:	pop	{pc}		; (ldr pc, [sp], #4)
   153dc:	cmp	r4, #0
   153e0:	beq	153f0 <__assert_fail@plt+0x4274>
   153e4:	cmp	r6, #0
   153e8:	cmpne	r5, #0
   153ec:	beq	153cc <__assert_fail@plt+0x4250>
   153f0:	bl	1573c <__assert_fail@plt+0x45c0>
   153f4:	b	153a8 <__assert_fail@plt+0x422c>
   153f8:	cmp	r2, #0
   153fc:	cmpne	r1, #0
   15400:	str	r4, [sp, #-8]!
   15404:	moveq	r2, #1
   15408:	str	lr, [sp, #4]
   1540c:	moveq	r1, r2
   15410:	bl	1631c <__assert_fail@plt+0x51a0>
   15414:	cmp	r0, #0
   15418:	beq	15428 <__assert_fail@plt+0x42ac>
   1541c:	ldr	r4, [sp]
   15420:	add	sp, sp, #4
   15424:	pop	{pc}		; (ldr pc, [sp], #4)
   15428:	bl	1573c <__assert_fail@plt+0x45c0>
   1542c:	mov	r2, r1
   15430:	mov	r1, r0
   15434:	mov	r0, #0
   15438:	b	153a8 <__assert_fail@plt+0x422c>
   1543c:	mov	r2, r1
   15440:	mov	r1, r0
   15444:	mov	r0, #0
   15448:	b	153f8 <__assert_fail@plt+0x427c>
   1544c:	cmp	r0, #0
   15450:	strd	r4, [sp, #-16]!
   15454:	mov	r5, r1
   15458:	ldr	r4, [r1]
   1545c:	str	r6, [sp, #8]
   15460:	str	lr, [sp, #12]
   15464:	beq	15494 <__assert_fail@plt+0x4318>
   15468:	lsr	r3, r4, #1
   1546c:	add	r3, r3, #1
   15470:	adds	r4, r4, r3
   15474:	bcs	154b0 <__assert_fail@plt+0x4334>
   15478:	mov	r1, r4
   1547c:	bl	153a8 <__assert_fail@plt+0x422c>
   15480:	ldr	r6, [sp, #8]
   15484:	str	r4, [r5]
   15488:	ldrd	r4, [sp]
   1548c:	add	sp, sp, #12
   15490:	pop	{pc}		; (ldr pc, [sp], #4)
   15494:	cmp	r4, #0
   15498:	bne	15478 <__assert_fail@plt+0x42fc>
   1549c:	mov	r4, #64	; 0x40
   154a0:	udiv	r4, r4, r2
   154a4:	cmp	r2, #64	; 0x40
   154a8:	addhi	r4, r4, #1
   154ac:	b	15478 <__assert_fail@plt+0x42fc>
   154b0:	bl	1573c <__assert_fail@plt+0x45c0>
   154b4:	mov	r2, #1
   154b8:	b	1544c <__assert_fail@plt+0x42d0>
   154bc:	ldr	ip, [r1]
   154c0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   154c4:	mov	r5, r1
   154c8:	strd	r6, [sp, #8]
   154cc:	str	lr, [sp, #28]
   154d0:	strd	r8, [sp, #16]
   154d4:	asr	lr, ip, #1
   154d8:	ldr	r8, [sp, #32]
   154dc:	str	sl, [sp, #24]
   154e0:	adds	r4, ip, lr
   154e4:	mvn	lr, r3
   154e8:	lsr	lr, lr, #31
   154ec:	mvnvs	r4, #-2147483648	; 0x80000000
   154f0:	cmp	r3, r4
   154f4:	movge	r1, #0
   154f8:	andlt	r1, lr, #1
   154fc:	cmp	r1, #0
   15500:	movne	r4, r3
   15504:	smull	r6, r7, r4, r8
   15508:	cmp	r7, r6, asr #31
   1550c:	bne	15594 <__assert_fail@plt+0x4418>
   15510:	cmp	r6, #63	; 0x3f
   15514:	mov	r1, r6
   15518:	ble	1557c <__assert_fail@plt+0x4400>
   1551c:	cmp	r0, #0
   15520:	sub	r6, r4, ip
   15524:	streq	r0, [r5]
   15528:	cmp	r6, r2
   1552c:	bge	1555c <__assert_fail@plt+0x43e0>
   15530:	adds	r4, ip, r2
   15534:	bvs	15590 <__assert_fail@plt+0x4414>
   15538:	cmp	r4, r3
   1553c:	movle	r3, #0
   15540:	andgt	r3, lr, #1
   15544:	cmp	r3, #0
   15548:	bne	15590 <__assert_fail@plt+0x4414>
   1554c:	smull	r8, r9, r4, r8
   15550:	cmp	r9, r8, asr #31
   15554:	mov	r1, r8
   15558:	bne	15590 <__assert_fail@plt+0x4414>
   1555c:	bl	15330 <__assert_fail@plt+0x41b4>
   15560:	ldrd	r6, [sp, #8]
   15564:	ldrd	r8, [sp, #16]
   15568:	ldr	sl, [sp, #24]
   1556c:	str	r4, [r5]
   15570:	ldrd	r4, [sp]
   15574:	add	sp, sp, #28
   15578:	pop	{pc}		; (ldr pc, [sp], #4)
   1557c:	mov	r6, #64	; 0x40
   15580:	sdiv	r4, r6, r8
   15584:	mls	r1, r8, r4, r6
   15588:	sub	r1, r6, r1
   1558c:	b	1551c <__assert_fail@plt+0x43a0>
   15590:	bl	1573c <__assert_fail@plt+0x45c0>
   15594:	mvn	r6, #-2147483648	; 0x80000000
   15598:	b	15580 <__assert_fail@plt+0x4404>
   1559c:	mov	r1, #1
   155a0:	str	r4, [sp, #-8]!
   155a4:	str	lr, [sp, #4]
   155a8:	bl	15cbc <__assert_fail@plt+0x4b40>
   155ac:	cmp	r0, #0
   155b0:	beq	155c0 <__assert_fail@plt+0x4444>
   155b4:	ldr	r4, [sp]
   155b8:	add	sp, sp, #4
   155bc:	pop	{pc}		; (ldr pc, [sp], #4)
   155c0:	bl	1573c <__assert_fail@plt+0x45c0>
   155c4:	mov	r1, #1
   155c8:	str	r4, [sp, #-8]!
   155cc:	str	lr, [sp, #4]
   155d0:	bl	15cbc <__assert_fail@plt+0x4b40>
   155d4:	cmp	r0, #0
   155d8:	beq	155e8 <__assert_fail@plt+0x446c>
   155dc:	ldr	r4, [sp]
   155e0:	add	sp, sp, #4
   155e4:	pop	{pc}		; (ldr pc, [sp], #4)
   155e8:	bl	1573c <__assert_fail@plt+0x45c0>
   155ec:	str	r4, [sp, #-8]!
   155f0:	str	lr, [sp, #4]
   155f4:	bl	15cbc <__assert_fail@plt+0x4b40>
   155f8:	cmp	r0, #0
   155fc:	beq	1560c <__assert_fail@plt+0x4490>
   15600:	ldr	r4, [sp]
   15604:	add	sp, sp, #4
   15608:	pop	{pc}		; (ldr pc, [sp], #4)
   1560c:	bl	1573c <__assert_fail@plt+0x45c0>
   15610:	str	r4, [sp, #-8]!
   15614:	str	lr, [sp, #4]
   15618:	bl	15cbc <__assert_fail@plt+0x4b40>
   1561c:	cmp	r0, #0
   15620:	beq	15630 <__assert_fail@plt+0x44b4>
   15624:	ldr	r4, [sp]
   15628:	add	sp, sp, #4
   1562c:	pop	{pc}		; (ldr pc, [sp], #4)
   15630:	bl	1573c <__assert_fail@plt+0x45c0>
   15634:	strd	r4, [sp, #-16]!
   15638:	mov	r4, r1
   1563c:	str	r6, [sp, #8]
   15640:	mov	r6, r0
   15644:	mov	r0, r1
   15648:	str	lr, [sp, #12]
   1564c:	bl	15d30 <__assert_fail@plt+0x4bb4>
   15650:	subs	r5, r0, #0
   15654:	beq	15678 <__assert_fail@plt+0x44fc>
   15658:	mov	r2, r4
   1565c:	mov	r1, r6
   15660:	bl	10f30 <memcpy@plt>
   15664:	mov	r0, r5
   15668:	ldrd	r4, [sp]
   1566c:	ldr	r6, [sp, #8]
   15670:	add	sp, sp, #12
   15674:	pop	{pc}		; (ldr pc, [sp], #4)
   15678:	bl	1573c <__assert_fail@plt+0x45c0>
   1567c:	strd	r4, [sp, #-16]!
   15680:	mov	r4, r1
   15684:	str	r6, [sp, #8]
   15688:	mov	r6, r0
   1568c:	mov	r0, r1
   15690:	str	lr, [sp, #12]
   15694:	bl	15d30 <__assert_fail@plt+0x4bb4>
   15698:	subs	r5, r0, #0
   1569c:	beq	156c0 <__assert_fail@plt+0x4544>
   156a0:	mov	r2, r4
   156a4:	mov	r1, r6
   156a8:	bl	10f30 <memcpy@plt>
   156ac:	mov	r0, r5
   156b0:	ldrd	r4, [sp]
   156b4:	ldr	r6, [sp, #8]
   156b8:	add	sp, sp, #12
   156bc:	pop	{pc}		; (ldr pc, [sp], #4)
   156c0:	bl	1573c <__assert_fail@plt+0x45c0>
   156c4:	strd	r4, [sp, #-16]!
   156c8:	mov	r4, r1
   156cc:	str	r6, [sp, #8]
   156d0:	mov	r6, r0
   156d4:	add	r0, r1, #1
   156d8:	str	lr, [sp, #12]
   156dc:	bl	15d30 <__assert_fail@plt+0x4bb4>
   156e0:	subs	r5, r0, #0
   156e4:	beq	15710 <__assert_fail@plt+0x4594>
   156e8:	mov	r3, #0
   156ec:	mov	r1, r6
   156f0:	mov	r2, r4
   156f4:	strb	r3, [r5, r4]
   156f8:	bl	10f30 <memcpy@plt>
   156fc:	mov	r0, r5
   15700:	ldrd	r4, [sp]
   15704:	ldr	r6, [sp, #8]
   15708:	add	sp, sp, #12
   1570c:	pop	{pc}		; (ldr pc, [sp], #4)
   15710:	bl	1573c <__assert_fail@plt+0x45c0>
   15714:	str	r4, [sp, #-8]!
   15718:	mov	r4, r0
   1571c:	str	lr, [sp, #4]
   15720:	bl	11068 <strlen@plt>
   15724:	add	r1, r0, #1
   15728:	mov	r0, r4
   1572c:	ldr	r4, [sp]
   15730:	ldr	lr, [sp, #4]
   15734:	add	sp, sp, #8
   15738:	b	15634 <__assert_fail@plt+0x44b8>
   1573c:	movw	r3, #33048	; 0x8118
   15740:	movt	r3, #2
   15744:	str	r4, [sp, #-8]!
   15748:	ldr	r4, [r3]
   1574c:	mov	r2, #5
   15750:	movw	r1, #29592	; 0x7398
   15754:	movt	r1, #1
   15758:	mov	r0, #0
   1575c:	str	lr, [sp, #4]
   15760:	bl	10f60 <dcgettext@plt>
   15764:	mov	r3, r0
   15768:	movw	r2, #28464	; 0x6f30
   1576c:	movt	r2, #1
   15770:	mov	r1, #0
   15774:	mov	r0, r4
   15778:	bl	10ff0 <error@plt>
   1577c:	bl	11158 <abort@plt>
   15780:	str	r4, [sp, #-8]!
   15784:	str	lr, [sp, #4]
   15788:	bl	16130 <__assert_fail@plt+0x4fb4>
   1578c:	cmn	r0, #1
   15790:	mov	r4, r0
   15794:	beq	157a8 <__assert_fail@plt+0x462c>
   15798:	mov	r0, r4
   1579c:	ldr	r4, [sp]
   157a0:	add	sp, sp, #4
   157a4:	pop	{pc}		; (ldr pc, [sp], #4)
   157a8:	bl	11080 <__errno_location@plt>
   157ac:	ldr	r3, [r0]
   157b0:	cmp	r3, #12
   157b4:	bne	15798 <__assert_fail@plt+0x461c>
   157b8:	bl	1573c <__assert_fail@plt+0x45c0>
   157bc:	cmp	r2, #36	; 0x24
   157c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   157c4:	strd	r6, [sp, #8]
   157c8:	strd	r8, [sp, #16]
   157cc:	strd	sl, [sp, #24]
   157d0:	str	lr, [sp, #32]
   157d4:	sub	sp, sp, #12
   157d8:	bhi	15c9c <__assert_fail@plt+0x4b20>
   157dc:	cmp	r1, #0
   157e0:	mov	r7, r2
   157e4:	mov	r8, r0
   157e8:	mov	r5, r1
   157ec:	mov	r6, r3
   157f0:	addeq	r5, sp, #4
   157f4:	bl	11080 <__errno_location@plt>
   157f8:	mov	r3, #0
   157fc:	mov	r9, r0
   15800:	str	r3, [r0]
   15804:	bl	11044 <__ctype_b_loc@plt>
   15808:	ldrb	r3, [r8]
   1580c:	mov	r2, r8
   15810:	ldr	r0, [r0]
   15814:	b	1581c <__assert_fail@plt+0x46a0>
   15818:	ldrb	r3, [r2, #1]!
   1581c:	lsl	r1, r3, #1
   15820:	ldrh	r4, [r0, r1]
   15824:	ands	r4, r4, #8192	; 0x2000
   15828:	bne	15818 <__assert_fail@plt+0x469c>
   1582c:	cmp	r3, #45	; 0x2d
   15830:	beq	158c4 <__assert_fail@plt+0x4748>
   15834:	mov	r2, r7
   15838:	mov	r1, r5
   1583c:	mov	r0, r8
   15840:	bl	1105c <strtoul@plt>
   15844:	ldr	r7, [r5]
   15848:	mov	sl, r0
   1584c:	cmp	r7, r8
   15850:	beq	158ac <__assert_fail@plt+0x4730>
   15854:	ldr	r4, [r9]
   15858:	cmp	r4, #0
   1585c:	bne	1589c <__assert_fail@plt+0x4720>
   15860:	ldr	r3, [sp, #48]	; 0x30
   15864:	cmp	r3, #0
   15868:	beq	15878 <__assert_fail@plt+0x46fc>
   1586c:	ldrb	r8, [r7]
   15870:	cmp	r8, #0
   15874:	bne	15b34 <__assert_fail@plt+0x49b8>
   15878:	str	sl, [r6]
   1587c:	mov	r0, r4
   15880:	add	sp, sp, #12
   15884:	ldrd	r4, [sp]
   15888:	ldrd	r6, [sp, #8]
   1588c:	ldrd	r8, [sp, #16]
   15890:	ldrd	sl, [sp, #24]
   15894:	add	sp, sp, #32
   15898:	pop	{pc}		; (ldr pc, [sp], #4)
   1589c:	cmp	r4, #34	; 0x22
   158a0:	bne	158c4 <__assert_fail@plt+0x4748>
   158a4:	mov	r4, #1
   158a8:	b	15860 <__assert_fail@plt+0x46e4>
   158ac:	ldr	r3, [sp, #48]	; 0x30
   158b0:	cmp	r3, #0
   158b4:	beq	158c4 <__assert_fail@plt+0x4748>
   158b8:	ldrb	r8, [r8]
   158bc:	cmp	r8, #0
   158c0:	bne	158cc <__assert_fail@plt+0x4750>
   158c4:	mov	r4, #4
   158c8:	b	1587c <__assert_fail@plt+0x4700>
   158cc:	mov	r1, r8
   158d0:	mov	r0, r3
   158d4:	bl	11074 <strchr@plt>
   158d8:	cmp	r0, #0
   158dc:	movne	sl, #1
   158e0:	beq	158c4 <__assert_fail@plt+0x4748>
   158e4:	sub	r3, r8, #69	; 0x45
   158e8:	cmp	r3, #47	; 0x2f
   158ec:	ldrls	pc, [pc, r3, lsl #2]
   158f0:	b	159f4 <__assert_fail@plt+0x4878>
   158f4:			; <UNDEFINED> instruction: 0x000159b4
   158f8:	strdeq	r5, [r1], -r4
   158fc:			; <UNDEFINED> instruction: 0x000159b4
   15900:	strdeq	r5, [r1], -r4
   15904:	strdeq	r5, [r1], -r4
   15908:	strdeq	r5, [r1], -r4
   1590c:			; <UNDEFINED> instruction: 0x000159b4
   15910:	strdeq	r5, [r1], -r4
   15914:			; <UNDEFINED> instruction: 0x000159b4
   15918:	strdeq	r5, [r1], -r4
   1591c:	strdeq	r5, [r1], -r4
   15920:			; <UNDEFINED> instruction: 0x000159b4
   15924:	strdeq	r5, [r1], -r4
   15928:	strdeq	r5, [r1], -r4
   1592c:	strdeq	r5, [r1], -r4
   15930:			; <UNDEFINED> instruction: 0x000159b4
   15934:	strdeq	r5, [r1], -r4
   15938:	strdeq	r5, [r1], -r4
   1593c:	strdeq	r5, [r1], -r4
   15940:	strdeq	r5, [r1], -r4
   15944:			; <UNDEFINED> instruction: 0x000159b4
   15948:			; <UNDEFINED> instruction: 0x000159b4
   1594c:	strdeq	r5, [r1], -r4
   15950:	strdeq	r5, [r1], -r4
   15954:	strdeq	r5, [r1], -r4
   15958:	strdeq	r5, [r1], -r4
   1595c:	strdeq	r5, [r1], -r4
   15960:	strdeq	r5, [r1], -r4
   15964:	strdeq	r5, [r1], -r4
   15968:	strdeq	r5, [r1], -r4
   1596c:	strdeq	r5, [r1], -r4
   15970:	strdeq	r5, [r1], -r4
   15974:	strdeq	r5, [r1], -r4
   15978:	strdeq	r5, [r1], -r4
   1597c:			; <UNDEFINED> instruction: 0x000159b4
   15980:	strdeq	r5, [r1], -r4
   15984:	strdeq	r5, [r1], -r4
   15988:	strdeq	r5, [r1], -r4
   1598c:			; <UNDEFINED> instruction: 0x000159b4
   15990:	strdeq	r5, [r1], -r4
   15994:			; <UNDEFINED> instruction: 0x000159b4
   15998:	strdeq	r5, [r1], -r4
   1599c:	strdeq	r5, [r1], -r4
   159a0:	strdeq	r5, [r1], -r4
   159a4:	strdeq	r5, [r1], -r4
   159a8:	strdeq	r5, [r1], -r4
   159ac:	strdeq	r5, [r1], -r4
   159b0:			; <UNDEFINED> instruction: 0x000159b4
   159b4:	mov	r1, #48	; 0x30
   159b8:	ldr	r0, [sp, #48]	; 0x30
   159bc:	bl	11074 <strchr@plt>
   159c0:	cmp	r0, #0
   159c4:	beq	159f4 <__assert_fail@plt+0x4878>
   159c8:	ldrb	r3, [r7, #1]
   159cc:	cmp	r3, #68	; 0x44
   159d0:	beq	15c90 <__assert_fail@plt+0x4b14>
   159d4:	cmp	r3, #105	; 0x69
   159d8:	beq	15b4c <__assert_fail@plt+0x49d0>
   159dc:	cmp	r3, #66	; 0x42
   159e0:	moveq	r0, #2
   159e4:	movne	r0, #1
   159e8:	moveq	r1, #1000	; 0x3e8
   159ec:	movne	r1, #1024	; 0x400
   159f0:	b	159fc <__assert_fail@plt+0x4880>
   159f4:	mov	r0, #1
   159f8:	mov	r1, #1024	; 0x400
   159fc:	sub	r8, r8, #66	; 0x42
   15a00:	cmp	r8, #53	; 0x35
   15a04:	ldrls	pc, [pc, r8, lsl #2]
   15a08:	b	15b18 <__assert_fail@plt+0x499c>
   15a0c:	andeq	r5, r1, ip, lsl ip
   15a10:	andeq	r5, r1, r8, lsl fp
   15a14:	andeq	r5, r1, r8, lsl fp
   15a18:	strdeq	r5, [r1], -r8
   15a1c:	andeq	r5, r1, r8, lsl fp
   15a20:	andeq	r5, r1, r4, ror #21
   15a24:	andeq	r5, r1, r8, lsl fp
   15a28:	andeq	r5, r1, r8, lsl fp
   15a2c:	andeq	r5, r1, r8, lsl fp
   15a30:	andeq	r5, r1, r0, lsr #22
   15a34:	andeq	r5, r1, r8, lsl fp
   15a38:	andeq	r5, r1, r4, lsr ip
   15a3c:	andeq	r5, r1, r8, lsl fp
   15a40:	andeq	r5, r1, r8, lsl fp
   15a44:	ldrdeq	r5, [r1], -r4
   15a48:	andeq	r5, r1, r8, lsl fp
   15a4c:	andeq	r5, r1, r8, lsl fp
   15a50:	andeq	r5, r1, r8, lsl fp
   15a54:			; <UNDEFINED> instruction: 0x00015bb0
   15a58:	andeq	r5, r1, r8, lsl fp
   15a5c:	andeq	r5, r1, r8, lsl fp
   15a60:	andeq	r5, r1, r8, lsl fp
   15a64:	andeq	r5, r1, r8, lsl fp
   15a68:	andeq	r5, r1, ip, lsl #23
   15a6c:	andeq	r5, r1, r4, ror #22
   15a70:	andeq	r5, r1, r8, lsl fp
   15a74:	andeq	r5, r1, r8, lsl fp
   15a78:	andeq	r5, r1, r8, lsl fp
   15a7c:	andeq	r5, r1, r8, lsl fp
   15a80:	andeq	r5, r1, r8, lsl fp
   15a84:	andeq	r5, r1, r8, lsl fp
   15a88:	andeq	r5, r1, r8, lsl fp
   15a8c:	andeq	r5, r1, r8, ror ip
   15a90:	andeq	r5, r1, r4, lsl #22
   15a94:	andeq	r5, r1, r8, lsl fp
   15a98:	andeq	r5, r1, r8, lsl fp
   15a9c:	andeq	r5, r1, r8, lsl fp
   15aa0:	andeq	r5, r1, r4, ror #21
   15aa4:	andeq	r5, r1, r8, lsl fp
   15aa8:	andeq	r5, r1, r8, lsl fp
   15aac:	andeq	r5, r1, r8, lsl fp
   15ab0:	andeq	r5, r1, r0, lsr #22
   15ab4:	andeq	r5, r1, r8, lsl fp
   15ab8:	andeq	r5, r1, r4, lsr ip
   15abc:	andeq	r5, r1, r8, lsl fp
   15ac0:	andeq	r5, r1, r8, lsl fp
   15ac4:	andeq	r5, r1, r8, lsl fp
   15ac8:	andeq	r5, r1, r8, lsl fp
   15acc:	andeq	r5, r1, r8, lsl fp
   15ad0:	andeq	r5, r1, r8, lsl fp
   15ad4:			; <UNDEFINED> instruction: 0x00015bb0
   15ad8:	andeq	r5, r1, r8, lsl fp
   15adc:	andeq	r5, r1, r8, lsl fp
   15ae0:	andeq	r5, r1, r0, ror #24
   15ae4:	umull	r2, r3, sl, r1
   15ae8:	cmp	r3, #0
   15aec:	bne	15afc <__assert_fail@plt+0x4980>
   15af0:	umull	r2, r3, r2, r1
   15af4:	cmp	r3, #0
   15af8:	beq	15c40 <__assert_fail@plt+0x4ac4>
   15afc:	mov	r4, #1
   15b00:	mvn	sl, #0
   15b04:	add	r3, r7, r0
   15b08:	str	r3, [r5]
   15b0c:	ldrb	r3, [r7, r0]
   15b10:	cmp	r3, #0
   15b14:	beq	15878 <__assert_fail@plt+0x46fc>
   15b18:	orr	r4, r4, #2
   15b1c:	b	15878 <__assert_fail@plt+0x46fc>
   15b20:	umull	sl, fp, sl, r1
   15b24:	cmp	fp, #0
   15b28:	movne	r4, #1
   15b2c:	mvnne	sl, #0
   15b30:	b	15b04 <__assert_fail@plt+0x4988>
   15b34:	mov	r1, r8
   15b38:	ldr	r0, [sp, #48]	; 0x30
   15b3c:	bl	11074 <strchr@plt>
   15b40:	cmp	r0, #0
   15b44:	bne	158e4 <__assert_fail@plt+0x4768>
   15b48:	b	15b18 <__assert_fail@plt+0x499c>
   15b4c:	ldrb	r3, [r7, #2]
   15b50:	mov	r1, #1024	; 0x400
   15b54:	cmp	r3, #66	; 0x42
   15b58:	movne	r0, #1
   15b5c:	moveq	r0, #3
   15b60:	b	159fc <__assert_fail@plt+0x4880>
   15b64:	mov	ip, #7
   15b68:	mov	lr, #0
   15b6c:	umull	sl, fp, sl, r1
   15b70:	cmp	fp, #0
   15b74:	movne	lr, #1
   15b78:	mvnne	sl, #0
   15b7c:	subs	ip, ip, #1
   15b80:	bne	15b6c <__assert_fail@plt+0x49f0>
   15b84:	orr	r4, r4, lr
   15b88:	b	15b04 <__assert_fail@plt+0x4988>
   15b8c:	mov	ip, #8
   15b90:	mov	lr, #0
   15b94:	umull	sl, fp, sl, r1
   15b98:	cmp	fp, #0
   15b9c:	movne	lr, #1
   15ba0:	mvnne	sl, #0
   15ba4:	subs	ip, ip, #1
   15ba8:	bne	15b94 <__assert_fail@plt+0x4a18>
   15bac:	b	15b84 <__assert_fail@plt+0x4a08>
   15bb0:	mov	ip, #4
   15bb4:	mov	lr, #0
   15bb8:	umull	sl, fp, sl, r1
   15bbc:	cmp	fp, #0
   15bc0:	movne	lr, #1
   15bc4:	mvnne	sl, #0
   15bc8:	subs	ip, ip, #1
   15bcc:	bne	15bb8 <__assert_fail@plt+0x4a3c>
   15bd0:	b	15b84 <__assert_fail@plt+0x4a08>
   15bd4:	mov	ip, #5
   15bd8:	mov	lr, #0
   15bdc:	umull	sl, fp, sl, r1
   15be0:	cmp	fp, #0
   15be4:	movne	lr, #1
   15be8:	mvnne	sl, #0
   15bec:	subs	ip, ip, #1
   15bf0:	bne	15bdc <__assert_fail@plt+0x4a60>
   15bf4:	b	15b84 <__assert_fail@plt+0x4a08>
   15bf8:	mov	ip, #6
   15bfc:	mov	lr, #0
   15c00:	umull	sl, fp, sl, r1
   15c04:	cmp	fp, #0
   15c08:	movne	lr, #1
   15c0c:	mvnne	sl, #0
   15c10:	subs	ip, ip, #1
   15c14:	bne	15c00 <__assert_fail@plt+0x4a84>
   15c18:	b	15b84 <__assert_fail@plt+0x4a08>
   15c1c:	lsr	r3, sl, #22
   15c20:	cmp	r3, #0
   15c24:	movne	r4, #1
   15c28:	mvnne	sl, #0
   15c2c:	lsleq	sl, sl, #10
   15c30:	b	15b04 <__assert_fail@plt+0x4988>
   15c34:	umull	r2, r3, sl, r1
   15c38:	cmp	r3, #0
   15c3c:	bne	15afc <__assert_fail@plt+0x4980>
   15c40:	umull	r8, r9, r2, r1
   15c44:	adds	r3, r9, #0
   15c48:	movne	r3, #1
   15c4c:	cmp	r3, #0
   15c50:	movne	r4, r3
   15c54:	moveq	sl, r8
   15c58:	mvnne	sl, #0
   15c5c:	b	15b04 <__assert_fail@plt+0x4988>
   15c60:	lsr	r3, sl, #31
   15c64:	cmp	r3, #0
   15c68:	movne	r4, #1
   15c6c:	mvnne	sl, #0
   15c70:	lsleq	sl, sl, #1
   15c74:	b	15b04 <__assert_fail@plt+0x4988>
   15c78:	lsr	r3, sl, #23
   15c7c:	cmp	r3, #0
   15c80:	movne	r4, #1
   15c84:	mvnne	sl, #0
   15c88:	lsleq	sl, sl, #9
   15c8c:	b	15b04 <__assert_fail@plt+0x4988>
   15c90:	mov	r0, #2
   15c94:	mov	r1, #1000	; 0x3e8
   15c98:	b	159fc <__assert_fail@plt+0x4880>
   15c9c:	movw	r3, #29612	; 0x73ac
   15ca0:	movt	r3, #1
   15ca4:	movw	r1, #29624	; 0x73b8
   15ca8:	movt	r1, #1
   15cac:	movw	r0, #29640	; 0x73c8
   15cb0:	movt	r0, #1
   15cb4:	mov	r2, #85	; 0x55
   15cb8:	bl	1117c <__assert_fail@plt>
   15cbc:	cmp	r1, #0
   15cc0:	cmpne	r0, #0
   15cc4:	beq	15d10 <__assert_fail@plt+0x4b94>
   15cc8:	strd	r4, [sp, #-16]!
   15ccc:	umull	r4, r5, r0, r1
   15cd0:	str	r6, [sp, #8]
   15cd4:	str	lr, [sp, #12]
   15cd8:	adds	r3, r5, #0
   15cdc:	movne	r3, #1
   15ce0:	cmp	r4, #0
   15ce4:	blt	15cf0 <__assert_fail@plt+0x4b74>
   15ce8:	cmp	r3, #0
   15cec:	beq	15d1c <__assert_fail@plt+0x4ba0>
   15cf0:	bl	11080 <__errno_location@plt>
   15cf4:	mov	r3, #12
   15cf8:	ldrd	r4, [sp]
   15cfc:	ldr	r6, [sp, #8]
   15d00:	add	sp, sp, #12
   15d04:	str	r3, [r0]
   15d08:	mov	r0, #0
   15d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d10:	mov	r1, #1
   15d14:	mov	r0, r1
   15d18:	b	10ea0 <calloc@plt>
   15d1c:	ldrd	r4, [sp]
   15d20:	ldr	r6, [sp, #8]
   15d24:	ldr	lr, [sp, #12]
   15d28:	add	sp, sp, #16
   15d2c:	b	10ea0 <calloc@plt>
   15d30:	cmp	r0, #0
   15d34:	beq	15d40 <__assert_fail@plt+0x4bc4>
   15d38:	blt	15d48 <__assert_fail@plt+0x4bcc>
   15d3c:	b	11008 <malloc@plt>
   15d40:	mov	r0, #1
   15d44:	b	11008 <malloc@plt>
   15d48:	str	r4, [sp, #-8]!
   15d4c:	str	lr, [sp, #4]
   15d50:	bl	11080 <__errno_location@plt>
   15d54:	mov	r3, #12
   15d58:	ldr	r4, [sp]
   15d5c:	add	sp, sp, #4
   15d60:	str	r3, [r0]
   15d64:	mov	r0, #0
   15d68:	pop	{pc}		; (ldr pc, [sp], #4)
   15d6c:	cmp	r0, #0
   15d70:	beq	15d98 <__assert_fail@plt+0x4c1c>
   15d74:	cmp	r1, #0
   15d78:	str	r4, [sp, #-8]!
   15d7c:	str	lr, [sp, #4]
   15d80:	beq	15da0 <__assert_fail@plt+0x4c24>
   15d84:	blt	15db4 <__assert_fail@plt+0x4c38>
   15d88:	ldr	r4, [sp]
   15d8c:	ldr	lr, [sp, #4]
   15d90:	add	sp, sp, #8
   15d94:	b	10f6c <realloc@plt>
   15d98:	mov	r0, r1
   15d9c:	b	15d30 <__assert_fail@plt+0x4bb4>
   15da0:	bl	12550 <__assert_fail@plt+0x13d4>
   15da4:	ldr	r4, [sp]
   15da8:	add	sp, sp, #4
   15dac:	mov	r0, #0
   15db0:	pop	{pc}		; (ldr pc, [sp], #4)
   15db4:	bl	11080 <__errno_location@plt>
   15db8:	mov	r3, #12
   15dbc:	str	r3, [r0]
   15dc0:	b	15da4 <__assert_fail@plt+0x4c28>
   15dc4:	strd	r4, [sp, #-16]!
   15dc8:	mov	r4, r0
   15dcc:	str	r6, [sp, #8]
   15dd0:	str	lr, [sp, #12]
   15dd4:	bl	10fd8 <__fpending@plt>
   15dd8:	ldr	r5, [r4]
   15ddc:	mov	r6, r0
   15de0:	mov	r0, r4
   15de4:	bl	15e4c <__assert_fail@plt+0x4cd0>
   15de8:	mov	r4, r0
   15dec:	and	r5, r5, #32
   15df0:	cmp	r5, #0
   15df4:	bne	15e2c <__assert_fail@plt+0x4cb0>
   15df8:	cmp	r0, #0
   15dfc:	beq	15e18 <__assert_fail@plt+0x4c9c>
   15e00:	cmp	r6, #0
   15e04:	bne	15e44 <__assert_fail@plt+0x4cc8>
   15e08:	bl	11080 <__errno_location@plt>
   15e0c:	ldr	r4, [r0]
   15e10:	subs	r4, r4, #9
   15e14:	mvnne	r4, #0
   15e18:	mov	r0, r4
   15e1c:	ldrd	r4, [sp]
   15e20:	ldr	r6, [sp, #8]
   15e24:	add	sp, sp, #12
   15e28:	pop	{pc}		; (ldr pc, [sp], #4)
   15e2c:	cmp	r0, #0
   15e30:	bne	15e44 <__assert_fail@plt+0x4cc8>
   15e34:	bl	11080 <__errno_location@plt>
   15e38:	str	r4, [r0]
   15e3c:	mvn	r4, #0
   15e40:	b	15e18 <__assert_fail@plt+0x4c9c>
   15e44:	mvn	r4, #0
   15e48:	b	15e18 <__assert_fail@plt+0x4c9c>
   15e4c:	strd	r4, [sp, #-12]!
   15e50:	mov	r4, r0
   15e54:	str	lr, [sp, #8]
   15e58:	sub	sp, sp, #12
   15e5c:	bl	110c8 <fileno@plt>
   15e60:	cmp	r0, #0
   15e64:	mov	r0, r4
   15e68:	blt	15eec <__assert_fail@plt+0x4d70>
   15e6c:	bl	11020 <__freading@plt>
   15e70:	cmp	r0, #0
   15e74:	bne	15eb8 <__assert_fail@plt+0x4d3c>
   15e78:	mov	r0, r4
   15e7c:	bl	15f00 <__assert_fail@plt+0x4d84>
   15e80:	cmp	r0, #0
   15e84:	beq	15ee8 <__assert_fail@plt+0x4d6c>
   15e88:	bl	11080 <__errno_location@plt>
   15e8c:	mov	r5, r0
   15e90:	mov	r0, r4
   15e94:	ldr	r4, [r5]
   15e98:	bl	110e0 <fclose@plt>
   15e9c:	cmp	r4, #0
   15ea0:	mvnne	r0, #0
   15ea4:	strne	r4, [r5]
   15ea8:	add	sp, sp, #12
   15eac:	ldrd	r4, [sp]
   15eb0:	add	sp, sp, #8
   15eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   15eb8:	mov	r0, r4
   15ebc:	bl	110c8 <fileno@plt>
   15ec0:	mov	r1, #1
   15ec4:	mov	r2, #0
   15ec8:	mov	r3, #0
   15ecc:	str	r1, [sp]
   15ed0:	bl	10fb4 <lseek64@plt>
   15ed4:	mvn	r3, #0
   15ed8:	mvn	r2, #0
   15edc:	cmp	r1, r3
   15ee0:	cmpeq	r0, r2
   15ee4:	bne	15e78 <__assert_fail@plt+0x4cfc>
   15ee8:	mov	r0, r4
   15eec:	add	sp, sp, #12
   15ef0:	ldrd	r4, [sp]
   15ef4:	ldr	lr, [sp, #8]
   15ef8:	add	sp, sp, #12
   15efc:	b	110e0 <fclose@plt>
   15f00:	str	r4, [sp, #-8]!
   15f04:	subs	r4, r0, #0
   15f08:	str	lr, [sp, #4]
   15f0c:	sub	sp, sp, #8
   15f10:	beq	15f2c <__assert_fail@plt+0x4db0>
   15f14:	bl	11020 <__freading@plt>
   15f18:	cmp	r0, #0
   15f1c:	beq	15f2c <__assert_fail@plt+0x4db0>
   15f20:	ldr	r3, [r4]
   15f24:	tst	r3, #256	; 0x100
   15f28:	bne	15f44 <__assert_fail@plt+0x4dc8>
   15f2c:	mov	r0, r4
   15f30:	add	sp, sp, #8
   15f34:	ldr	r4, [sp]
   15f38:	ldr	lr, [sp, #4]
   15f3c:	add	sp, sp, #8
   15f40:	b	10f00 <fflush@plt>
   15f44:	mov	r1, #1
   15f48:	mov	r2, #0
   15f4c:	mov	r3, #0
   15f50:	mov	r0, r4
   15f54:	str	r1, [sp]
   15f58:	bl	15f60 <__assert_fail@plt+0x4de4>
   15f5c:	b	15f2c <__assert_fail@plt+0x4db0>
   15f60:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15f64:	mov	r4, r0
   15f68:	ldr	ip, [r0, #4]
   15f6c:	strd	r6, [sp, #8]
   15f70:	str	lr, [sp, #20]
   15f74:	ldr	lr, [r0, #8]
   15f78:	str	r8, [sp, #16]
   15f7c:	sub	sp, sp, #8
   15f80:	ldr	r5, [sp, #32]
   15f84:	cmp	lr, ip
   15f88:	beq	15fb0 <__assert_fail@plt+0x4e34>
   15f8c:	mov	r0, r4
   15f90:	str	r5, [sp, #32]
   15f94:	add	sp, sp, #8
   15f98:	ldrd	r4, [sp]
   15f9c:	ldrd	r6, [sp, #8]
   15fa0:	ldr	r8, [sp, #16]
   15fa4:	ldr	lr, [sp, #20]
   15fa8:	add	sp, sp, #24
   15fac:	b	110ec <fseeko64@plt>
   15fb0:	ldr	ip, [r0, #16]
   15fb4:	ldr	lr, [r0, #20]
   15fb8:	cmp	lr, ip
   15fbc:	bne	15f8c <__assert_fail@plt+0x4e10>
   15fc0:	ldr	r8, [r0, #36]	; 0x24
   15fc4:	cmp	r8, #0
   15fc8:	bne	15f8c <__assert_fail@plt+0x4e10>
   15fcc:	mov	r6, r2
   15fd0:	mov	r7, r3
   15fd4:	bl	110c8 <fileno@plt>
   15fd8:	mov	r2, r6
   15fdc:	mov	r3, r7
   15fe0:	str	r5, [sp]
   15fe4:	bl	10fb4 <lseek64@plt>
   15fe8:	mvn	r3, #0
   15fec:	mvn	r2, #0
   15ff0:	cmp	r1, r3
   15ff4:	cmpeq	r0, r2
   15ff8:	beq	16028 <__assert_fail@plt+0x4eac>
   15ffc:	ldr	r3, [r4]
   16000:	strd	r0, [r4, #80]	; 0x50
   16004:	bic	r3, r3, #16
   16008:	str	r3, [r4]
   1600c:	mov	r0, r8
   16010:	add	sp, sp, #8
   16014:	ldrd	r4, [sp]
   16018:	ldrd	r6, [sp, #8]
   1601c:	ldr	r8, [sp, #16]
   16020:	add	sp, sp, #20
   16024:	pop	{pc}		; (ldr pc, [sp], #4)
   16028:	mvn	r8, #0
   1602c:	b	1600c <__assert_fail@plt+0x4e90>
   16030:	mov	r0, #14
   16034:	str	r4, [sp, #-8]!
   16038:	str	lr, [sp, #4]
   1603c:	bl	11128 <nl_langinfo@plt>
   16040:	cmp	r0, #0
   16044:	beq	16068 <__assert_fail@plt+0x4eec>
   16048:	ldrb	r2, [r0]
   1604c:	movw	r3, #29680	; 0x73f0
   16050:	movt	r3, #1
   16054:	ldr	r4, [sp]
   16058:	add	sp, sp, #4
   1605c:	cmp	r2, #0
   16060:	moveq	r0, r3
   16064:	pop	{pc}		; (ldr pc, [sp], #4)
   16068:	ldr	r4, [sp]
   1606c:	add	sp, sp, #4
   16070:	movw	r0, #29680	; 0x73f0
   16074:	movt	r0, #1
   16078:	pop	{pc}		; (ldr pc, [sp], #4)
   1607c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16080:	mov	r5, r2
   16084:	strd	r6, [sp, #8]
   16088:	subs	r6, r0, #0
   1608c:	mov	r7, r1
   16090:	str	lr, [sp, #16]
   16094:	sub	sp, sp, #12
   16098:	addeq	r6, sp, #4
   1609c:	mov	r0, r6
   160a0:	bl	10fe4 <mbrtowc@plt>
   160a4:	cmp	r5, #0
   160a8:	cmnne	r0, #3
   160ac:	mov	r4, r0
   160b0:	bhi	160cc <__assert_fail@plt+0x4f50>
   160b4:	mov	r0, r4
   160b8:	add	sp, sp, #12
   160bc:	ldrd	r4, [sp]
   160c0:	ldrd	r6, [sp, #8]
   160c4:	add	sp, sp, #16
   160c8:	pop	{pc}		; (ldr pc, [sp], #4)
   160cc:	mov	r0, #0
   160d0:	bl	16354 <__assert_fail@plt+0x51d8>
   160d4:	cmp	r0, #0
   160d8:	bne	160b4 <__assert_fail@plt+0x4f38>
   160dc:	ldrb	r3, [r7]
   160e0:	mov	r4, #1
   160e4:	str	r3, [r6]
   160e8:	b	160b4 <__assert_fail@plt+0x4f38>
   160ec:	lsrs	r3, r1, #30
   160f0:	movne	r3, #1
   160f4:	moveq	r3, #0
   160f8:	lsls	r1, r1, #2
   160fc:	bmi	1610c <__assert_fail@plt+0x4f90>
   16100:	cmp	r3, #0
   16104:	bne	1610c <__assert_fail@plt+0x4f90>
   16108:	b	15d6c <__assert_fail@plt+0x4bf0>
   1610c:	str	r4, [sp, #-8]!
   16110:	str	lr, [sp, #4]
   16114:	bl	11080 <__errno_location@plt>
   16118:	mov	r3, #12
   1611c:	ldr	r4, [sp]
   16120:	add	sp, sp, #4
   16124:	str	r3, [r0]
   16128:	mov	r0, #0
   1612c:	pop	{pc}		; (ldr pc, [sp], #4)
   16130:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16134:	strd	r6, [sp, #8]
   16138:	subs	r7, r0, #0
   1613c:	mov	r6, r1
   16140:	str	r8, [sp, #16]
   16144:	mov	r8, r2
   16148:	str	lr, [sp, #20]
   1614c:	sub	sp, sp, #8
   16150:	beq	161fc <__assert_fail@plt+0x5080>
   16154:	mov	r3, #10
   16158:	mov	r0, #0
   1615c:	mov	r1, r3
   16160:	str	r3, [sp, #4]
   16164:	bl	160ec <__assert_fail@plt+0x4f70>
   16168:	subs	r4, r0, #0
   1616c:	beq	161ac <__assert_fail@plt+0x5030>
   16170:	add	r3, sp, #4
   16174:	mov	r2, r4
   16178:	ldr	r5, [sp, #4]
   1617c:	mov	r1, r6
   16180:	mov	r0, r7
   16184:	bl	110a4 <getgrouplist@plt>
   16188:	cmp	r0, #0
   1618c:	blt	161c8 <__assert_fail@plt+0x504c>
   16190:	mov	r0, r4
   16194:	ldr	r1, [sp, #4]
   16198:	bl	160ec <__assert_fail@plt+0x4f70>
   1619c:	cmp	r0, #0
   161a0:	bne	161f0 <__assert_fail@plt+0x5074>
   161a4:	mov	r0, r4
   161a8:	bl	12550 <__assert_fail@plt+0x13d4>
   161ac:	mvn	r0, #0
   161b0:	add	sp, sp, #8
   161b4:	ldrd	r4, [sp]
   161b8:	ldrd	r6, [sp, #8]
   161bc:	ldr	r8, [sp, #16]
   161c0:	add	sp, sp, #20
   161c4:	pop	{pc}		; (ldr pc, [sp], #4)
   161c8:	ldr	r1, [sp, #4]
   161cc:	mov	r0, r4
   161d0:	cmp	r1, r5
   161d4:	lsleq	r1, r1, #1
   161d8:	streq	r1, [sp, #4]
   161dc:	bl	160ec <__assert_fail@plt+0x4f70>
   161e0:	cmp	r0, #0
   161e4:	beq	161a4 <__assert_fail@plt+0x5028>
   161e8:	mov	r4, r0
   161ec:	b	16170 <__assert_fail@plt+0x4ff4>
   161f0:	str	r0, [r8]
   161f4:	ldr	r0, [sp, #4]
   161f8:	b	161b0 <__assert_fail@plt+0x5034>
   161fc:	mov	r1, r7
   16200:	bl	11134 <getgroups@plt>
   16204:	cmp	r0, #0
   16208:	str	r0, [sp, #4]
   1620c:	blt	162b8 <__assert_fail@plt+0x513c>
   16210:	adds	r5, r6, #1
   16214:	movne	r5, #1
   16218:	cmp	r0, #0
   1621c:	movne	r3, r5
   16220:	moveq	r3, #1
   16224:	cmp	r3, #0
   16228:	beq	162f0 <__assert_fail@plt+0x5174>
   1622c:	add	r3, r0, #1
   16230:	mov	r0, r7
   16234:	mov	r1, r3
   16238:	str	r3, [sp, #4]
   1623c:	bl	160ec <__assert_fail@plt+0x4f70>
   16240:	subs	r4, r0, #0
   16244:	beq	161ac <__assert_fail@plt+0x5030>
   16248:	ldr	r0, [sp, #4]
   1624c:	cmn	r6, #1
   16250:	sub	r0, r0, r5
   16254:	beq	16308 <__assert_fail@plt+0x518c>
   16258:	add	r1, r4, #4
   1625c:	bl	11134 <getgroups@plt>
   16260:	cmp	r0, #0
   16264:	addge	r0, r0, #1
   16268:	strge	r6, [r4]
   1626c:	blt	161a4 <__assert_fail@plt+0x5028>
   16270:	cmp	r0, #1
   16274:	str	r4, [r8]
   16278:	ble	161b0 <__assert_fail@plt+0x5034>
   1627c:	ldr	lr, [r4]
   16280:	add	ip, r4, r0, lsl #2
   16284:	add	r3, r4, #4
   16288:	cmp	ip, r3
   1628c:	bls	161b0 <__assert_fail@plt+0x5034>
   16290:	ldr	r2, [r3], #4
   16294:	cmp	r2, lr
   16298:	beq	162b0 <__assert_fail@plt+0x5134>
   1629c:	ldr	r1, [r4]
   162a0:	cmp	r2, r1
   162a4:	strne	r2, [r4, #4]
   162a8:	addne	r4, r4, #4
   162ac:	bne	16288 <__assert_fail@plt+0x510c>
   162b0:	sub	r0, r0, #1
   162b4:	b	16288 <__assert_fail@plt+0x510c>
   162b8:	bl	11080 <__errno_location@plt>
   162bc:	ldr	r3, [r0]
   162c0:	cmp	r3, #38	; 0x26
   162c4:	bne	161ac <__assert_fail@plt+0x5030>
   162c8:	mov	r0, r7
   162cc:	mov	r1, #4
   162d0:	bl	15d6c <__assert_fail@plt+0x4bf0>
   162d4:	subs	r3, r0, #0
   162d8:	beq	161ac <__assert_fail@plt+0x5030>
   162dc:	adds	r0, r6, #1
   162e0:	str	r3, [r8]
   162e4:	movne	r0, #1
   162e8:	str	r6, [r3]
   162ec:	b	161b0 <__assert_fail@plt+0x5034>
   162f0:	mov	r1, r0
   162f4:	mov	r0, r3
   162f8:	bl	160ec <__assert_fail@plt+0x4f70>
   162fc:	subs	r4, r0, #0
   16300:	ldrne	r0, [sp, #4]
   16304:	beq	161ac <__assert_fail@plt+0x5030>
   16308:	mov	r1, r4
   1630c:	bl	11134 <getgroups@plt>
   16310:	cmp	r0, #0
   16314:	bge	16270 <__assert_fail@plt+0x50f4>
   16318:	b	161a4 <__assert_fail@plt+0x5028>
   1631c:	umull	r2, r3, r1, r2
   16320:	cmp	r3, #0
   16324:	bne	16330 <__assert_fail@plt+0x51b4>
   16328:	mov	r1, r2
   1632c:	b	15d6c <__assert_fail@plt+0x4bf0>
   16330:	str	r4, [sp, #-8]!
   16334:	str	lr, [sp, #4]
   16338:	bl	11080 <__errno_location@plt>
   1633c:	mov	r3, #12
   16340:	ldr	r4, [sp]
   16344:	add	sp, sp, #4
   16348:	str	r3, [r0]
   1634c:	mov	r0, #0
   16350:	pop	{pc}		; (ldr pc, [sp], #4)
   16354:	push	{lr}		; (str lr, [sp, #-4]!)
   16358:	sub	sp, sp, #268	; 0x10c
   1635c:	movw	r2, #257	; 0x101
   16360:	add	r1, sp, #4
   16364:	bl	163ac <__assert_fail@plt+0x5230>
   16368:	cmp	r0, #0
   1636c:	movne	r0, #0
   16370:	bne	163a4 <__assert_fail@plt+0x5228>
   16374:	movw	r1, #29688	; 0x73f8
   16378:	movt	r1, #1
   1637c:	add	r0, sp, #4
   16380:	bl	10ee8 <strcmp@plt>
   16384:	cmp	r0, #0
   16388:	beq	163a4 <__assert_fail@plt+0x5228>
   1638c:	add	r0, sp, #4
   16390:	movw	r1, #29692	; 0x73fc
   16394:	movt	r1, #1
   16398:	bl	10ee8 <strcmp@plt>
   1639c:	adds	r0, r0, #0
   163a0:	movne	r0, #1
   163a4:	add	sp, sp, #268	; 0x10c
   163a8:	pop	{pc}		; (ldr pc, [sp], #4)
   163ac:	strd	r4, [sp, #-16]!
   163b0:	mov	r5, r1
   163b4:	mov	r1, #0
   163b8:	mov	r4, r2
   163bc:	str	r6, [sp, #8]
   163c0:	str	lr, [sp, #12]
   163c4:	bl	11104 <setlocale@plt>
   163c8:	subs	r6, r0, #0
   163cc:	beq	1644c <__assert_fail@plt+0x52d0>
   163d0:	bl	11068 <strlen@plt>
   163d4:	cmp	r4, r0
   163d8:	bhi	163f8 <__assert_fail@plt+0x527c>
   163dc:	cmp	r4, #0
   163e0:	moveq	r0, #34	; 0x22
   163e4:	bne	1641c <__assert_fail@plt+0x52a0>
   163e8:	ldrd	r4, [sp]
   163ec:	ldr	r6, [sp, #8]
   163f0:	add	sp, sp, #12
   163f4:	pop	{pc}		; (ldr pc, [sp], #4)
   163f8:	add	r2, r0, #1
   163fc:	mov	r1, r6
   16400:	mov	r0, r5
   16404:	bl	10f30 <memcpy@plt>
   16408:	ldrd	r4, [sp]
   1640c:	mov	r0, #0
   16410:	ldr	r6, [sp, #8]
   16414:	add	sp, sp, #12
   16418:	pop	{pc}		; (ldr pc, [sp], #4)
   1641c:	sub	r4, r4, #1
   16420:	mov	r1, r6
   16424:	mov	r2, r4
   16428:	mov	r0, r5
   1642c:	bl	10f30 <memcpy@plt>
   16430:	mov	r3, #0
   16434:	mov	r0, #34	; 0x22
   16438:	strb	r3, [r5, r4]
   1643c:	ldrd	r4, [sp]
   16440:	ldr	r6, [sp, #8]
   16444:	add	sp, sp, #12
   16448:	pop	{pc}		; (ldr pc, [sp], #4)
   1644c:	cmp	r4, #0
   16450:	mov	r0, #22
   16454:	strbne	r6, [r5]
   16458:	ldrd	r4, [sp]
   1645c:	ldr	r6, [sp, #8]
   16460:	add	sp, sp, #12
   16464:	pop	{pc}		; (ldr pc, [sp], #4)
   16468:	mov	r1, #0
   1646c:	b	11104 <setlocale@plt>
   16470:	cmp	r3, #0
   16474:	cmpeq	r2, #0
   16478:	bne	16490 <__assert_fail@plt+0x5314>
   1647c:	cmp	r1, #0
   16480:	cmpeq	r0, #0
   16484:	mvnne	r1, #0
   16488:	mvnne	r0, #0
   1648c:	b	164ac <__assert_fail@plt+0x5330>
   16490:	sub	sp, sp, #8
   16494:	push	{sp, lr}
   16498:	bl	164bc <__assert_fail@plt+0x5340>
   1649c:	ldr	lr, [sp, #4]
   164a0:	add	sp, sp, #8
   164a4:	pop	{r2, r3}
   164a8:	bx	lr
   164ac:	push	{r1, lr}
   164b0:	mov	r0, #8
   164b4:	bl	10ec4 <raise@plt>
   164b8:	pop	{r1, pc}
   164bc:	cmp	r1, r3
   164c0:	cmpeq	r0, r2
   164c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164c8:	mov	r4, r0
   164cc:	movcc	r0, #0
   164d0:	mov	r5, r1
   164d4:	ldr	lr, [sp, #36]	; 0x24
   164d8:	movcc	r1, r0
   164dc:	bcc	165d8 <__assert_fail@plt+0x545c>
   164e0:	cmp	r3, #0
   164e4:	clzeq	ip, r2
   164e8:	clzne	ip, r3
   164ec:	addeq	ip, ip, #32
   164f0:	cmp	r5, #0
   164f4:	clzeq	r1, r4
   164f8:	addeq	r1, r1, #32
   164fc:	clzne	r1, r5
   16500:	sub	ip, ip, r1
   16504:	sub	sl, ip, #32
   16508:	lsl	r9, r3, ip
   1650c:	rsb	fp, ip, #32
   16510:	orr	r9, r9, r2, lsl sl
   16514:	orr	r9, r9, r2, lsr fp
   16518:	lsl	r8, r2, ip
   1651c:	cmp	r5, r9
   16520:	cmpeq	r4, r8
   16524:	movcc	r0, #0
   16528:	movcc	r1, r0
   1652c:	bcc	16548 <__assert_fail@plt+0x53cc>
   16530:	mov	r0, #1
   16534:	subs	r4, r4, r8
   16538:	lsl	r1, r0, sl
   1653c:	orr	r1, r1, r0, lsr fp
   16540:	lsl	r0, r0, ip
   16544:	sbc	r5, r5, r9
   16548:	cmp	ip, #0
   1654c:	beq	165d8 <__assert_fail@plt+0x545c>
   16550:	lsr	r6, r8, #1
   16554:	orr	r6, r6, r9, lsl #31
   16558:	lsr	r7, r9, #1
   1655c:	mov	r2, ip
   16560:	b	16584 <__assert_fail@plt+0x5408>
   16564:	subs	r3, r4, r6
   16568:	sbc	r8, r5, r7
   1656c:	adds	r3, r3, r3
   16570:	adc	r8, r8, r8
   16574:	adds	r4, r3, #1
   16578:	adc	r5, r8, #0
   1657c:	subs	r2, r2, #1
   16580:	beq	165a0 <__assert_fail@plt+0x5424>
   16584:	cmp	r5, r7
   16588:	cmpeq	r4, r6
   1658c:	bcs	16564 <__assert_fail@plt+0x53e8>
   16590:	adds	r4, r4, r4
   16594:	adc	r5, r5, r5
   16598:	subs	r2, r2, #1
   1659c:	bne	16584 <__assert_fail@plt+0x5408>
   165a0:	lsr	r3, r4, ip
   165a4:	orr	r3, r3, r5, lsl fp
   165a8:	lsr	r2, r5, ip
   165ac:	orr	r3, r3, r5, lsr sl
   165b0:	adds	r0, r0, r4
   165b4:	mov	r4, r3
   165b8:	lsl	r3, r2, ip
   165bc:	orr	r3, r3, r4, lsl sl
   165c0:	lsl	ip, r4, ip
   165c4:	orr	r3, r3, r4, lsr fp
   165c8:	adc	r1, r1, r5
   165cc:	subs	r0, r0, ip
   165d0:	mov	r5, r2
   165d4:	sbc	r1, r1, r3
   165d8:	cmp	lr, #0
   165dc:	strdne	r4, [lr]
   165e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   165e8:	mov	r7, r0
   165ec:	ldr	r6, [pc, #72]	; 1663c <__assert_fail@plt+0x54c0>
   165f0:	ldr	r5, [pc, #72]	; 16640 <__assert_fail@plt+0x54c4>
   165f4:	add	r6, pc, r6
   165f8:	add	r5, pc, r5
   165fc:	sub	r6, r6, r5
   16600:	mov	r8, r1
   16604:	mov	r9, r2
   16608:	bl	10e80 <calloc@plt-0x20>
   1660c:	asrs	r6, r6, #2
   16610:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16614:	mov	r4, #0
   16618:	add	r4, r4, #1
   1661c:	ldr	r3, [r5], #4
   16620:	mov	r2, r9
   16624:	mov	r1, r8
   16628:	mov	r0, r7
   1662c:	blx	r3
   16630:	cmp	r6, r4
   16634:	bne	16618 <__assert_fail@plt+0x549c>
   16638:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1663c:	andeq	r1, r1, r0, lsl r9
   16640:	andeq	r1, r1, r8, lsl #18
   16644:	bx	lr
   16648:	ldr	r3, [pc, #12]	; 1665c <__assert_fail@plt+0x54e0>
   1664c:	mov	r1, #0
   16650:	add	r3, pc, r3
   16654:	ldr	r2, [r3]
   16658:	b	1108c <__cxa_atexit@plt>
   1665c:			; <UNDEFINED> instruction: 0x00011ab4

Disassembly of section .fini:

00016660 <.fini>:
   16660:	push	{r3, lr}
   16664:	pop	{r3, pc}
