
../repos/coreutils/src/base64:     file format elf32-littlearm


Disassembly of section .init:

00010e04 <.init>:
   10e04:	push	{r3, lr}
   10e08:	bl	110d0 <__assert_fail@plt+0x48>
   10e0c:	pop	{r3, pc}

Disassembly of section .plt:

00010e10 <calloc@plt-0x14>:
   10e10:	push	{lr}		; (str lr, [sp, #-4]!)
   10e14:	ldr	lr, [pc, #4]	; 10e20 <calloc@plt-0x4>
   10e18:	add	lr, pc, lr
   10e1c:	ldr	pc, [lr, #8]!
   10e20:	andeq	r7, r1, r0, ror #3

00010e24 <calloc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e30 <fputs_unlocked@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #472]!	; 0x1d8

00010e3c <raise@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #464]!	; 0x1d0

00010e48 <strcmp@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #456]!	; 0x1c8

00010e54 <posix_fadvise64@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e60 <fflush@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #440]!	; 0x1b8

00010e6c <memmove@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #432]!	; 0x1b0

00010e78 <free@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #424]!	; 0x1a8

00010e84 <_exit@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e90 <memcpy@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #408]!	; 0x198

00010e9c <mbsinit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #400]!	; 0x190

00010ea8 <fwrite_unlocked@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #392]!	; 0x188

00010eb4 <dcgettext@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #384]!	; 0x180

00010ec0 <realloc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #376]!	; 0x178

00010ecc <textdomain@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #368]!	; 0x170

00010ed8 <iswprint@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #360]!	; 0x168

00010ee4 <fwrite@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #352]!	; 0x160

00010ef0 <lseek64@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #344]!	; 0x158

00010efc <__ctype_get_mb_cur_max@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #336]!	; 0x150

00010f08 <__fpending@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #328]!	; 0x148

00010f14 <mbrtowc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #320]!	; 0x140

00010f20 <error@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #312]!	; 0x138

00010f2c <malloc@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #304]!	; 0x130

00010f38 <__libc_start_main@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #296]!	; 0x128

00010f44 <__freading@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #288]!	; 0x120

00010f50 <__gmon_start__@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #280]!	; 0x118

00010f5c <getopt_long@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #272]!	; 0x110

00010f68 <__ctype_b_loc@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #264]!	; 0x108

00010f74 <exit@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #256]!	; 0x100

00010f80 <bcmp@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #248]!	; 0xf8

00010f8c <strlen@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #240]!	; 0xf0

00010f98 <strchr@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #232]!	; 0xe8

00010fa4 <__errno_location@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #224]!	; 0xe0

00010fb0 <__cxa_atexit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #216]!	; 0xd8

00010fbc <memset@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #208]!	; 0xd0

00010fc8 <__printf_chk@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #200]!	; 0xc8

00010fd4 <fileno@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #192]!	; 0xc0

00010fe0 <__fprintf_chk@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #184]!	; 0xb8

00010fec <memchr@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #176]!	; 0xb0

00010ff8 <fclose@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #168]!	; 0xa8

00011004 <fseeko64@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #160]!	; 0xa0

00011010 <__overflow@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #94208	; 0x17000
   11018:	ldr	pc, [ip, #152]!	; 0x98

0001101c <setlocale@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #94208	; 0x17000
   11024:	ldr	pc, [ip, #144]!	; 0x90

00011028 <strrchr@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #94208	; 0x17000
   11030:	ldr	pc, [ip, #136]!	; 0x88

00011034 <nl_langinfo@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #94208	; 0x17000
   1103c:	ldr	pc, [ip, #128]!	; 0x80

00011040 <__strtoll_internal@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #94208	; 0x17000
   11048:	ldr	pc, [ip, #120]!	; 0x78

0001104c <fopen64@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #94208	; 0x17000
   11054:	ldr	pc, [ip, #112]!	; 0x70

00011058 <bindtextdomain@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #94208	; 0x17000
   11060:	ldr	pc, [ip, #104]!	; 0x68

00011064 <fread_unlocked@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #96]!	; 0x60

00011070 <strncmp@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #88]!	; 0x58

0001107c <abort@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #94208	; 0x17000
   11084:	ldr	pc, [ip, #80]!	; 0x50

00011088 <__assert_fail@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #72]!	; 0x48

Disassembly of section .text:

00011094 <.text>:
   11094:	mov	fp, #0
   11098:	mov	lr, #0
   1109c:	pop	{r1}		; (ldr r1, [sp], #4)
   110a0:	mov	r2, sp
   110a4:	push	{r2}		; (str r2, [sp, #-4]!)
   110a8:	push	{r0}		; (str r0, [sp, #-4]!)
   110ac:	ldr	ip, [pc, #16]	; 110c4 <__assert_fail@plt+0x3c>
   110b0:	push	{ip}		; (str ip, [sp, #-4]!)
   110b4:	ldr	r0, [pc, #12]	; 110c8 <__assert_fail@plt+0x40>
   110b8:	ldr	r3, [pc, #12]	; 110cc <__assert_fail@plt+0x44>
   110bc:	bl	10f38 <__libc_start_main@plt>
   110c0:	bl	1107c <abort@plt>
   110c4:	andeq	r6, r1, r4, ror #29
   110c8:	andeq	r1, r1, ip, asr #8
   110cc:	andeq	r6, r1, r4, lsl #29
   110d0:	ldr	r3, [pc, #20]	; 110ec <__assert_fail@plt+0x64>
   110d4:	ldr	r2, [pc, #20]	; 110f0 <__assert_fail@plt+0x68>
   110d8:	add	r3, pc, r3
   110dc:	ldr	r2, [r3, r2]
   110e0:	cmp	r2, #0
   110e4:	bxeq	lr
   110e8:	b	10f50 <__gmon_start__@plt>
   110ec:	andeq	r6, r1, r0, lsr #30
   110f0:	ldrdeq	r0, [r0], -ip
   110f4:	ldr	r0, [pc, #24]	; 11114 <__assert_fail@plt+0x8c>
   110f8:	ldr	r3, [pc, #24]	; 11118 <__assert_fail@plt+0x90>
   110fc:	cmp	r3, r0
   11100:	bxeq	lr
   11104:	ldr	r3, [pc, #16]	; 1111c <__assert_fail@plt+0x94>
   11108:	cmp	r3, #0
   1110c:	bxeq	lr
   11110:	bx	r3
   11114:	andeq	r8, r2, r0, lsr r1
   11118:	andeq	r8, r2, r0, lsr r1
   1111c:	andeq	r0, r0, r0
   11120:	ldr	r0, [pc, #36]	; 1114c <__assert_fail@plt+0xc4>
   11124:	ldr	r1, [pc, #36]	; 11150 <__assert_fail@plt+0xc8>
   11128:	sub	r1, r1, r0
   1112c:	asr	r1, r1, #2
   11130:	add	r1, r1, r1, lsr #31
   11134:	asrs	r1, r1, #1
   11138:	bxeq	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <__assert_fail@plt+0xcc>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	andeq	r8, r2, r0, lsr r1
   11150:	andeq	r8, r2, r0, lsr r1
   11154:	andeq	r0, r0, r0
   11158:	push	{r4, lr}
   1115c:	ldr	r4, [pc, #24]	; 1117c <__assert_fail@plt+0xf4>
   11160:	ldrb	r3, [r4]
   11164:	cmp	r3, #0
   11168:	popne	{r4, pc}
   1116c:	bl	110f4 <__assert_fail@plt+0x6c>
   11170:	mov	r3, #1
   11174:	strb	r3, [r4]
   11178:	pop	{r4, pc}
   1117c:	andeq	r8, r2, r4, asr r1
   11180:	b	11120 <__assert_fail@plt+0x98>
   11184:	push	{fp, lr}
   11188:	mov	fp, sp
   1118c:	sub	sp, sp, #56	; 0x38
   11190:	mov	r4, r0
   11194:	cmp	r0, #0
   11198:	bne	11408 <__assert_fail@plt+0x380>
   1119c:	movw	r1, #28467	; 0x6f33
   111a0:	mov	r0, #0
   111a4:	mov	r2, #5
   111a8:	movt	r1, #1
   111ac:	bl	10eb4 <dcgettext@plt>
   111b0:	mov	r1, r0
   111b4:	movw	r0, #33120	; 0x8160
   111b8:	movt	r0, #2
   111bc:	ldr	r2, [r0]
   111c0:	mov	r0, #1
   111c4:	bl	10fc8 <__printf_chk@plt>
   111c8:	movw	r1, #28497	; 0x6f51
   111cc:	mov	r0, #0
   111d0:	mov	r2, #5
   111d4:	movt	r1, #1
   111d8:	bl	10eb4 <dcgettext@plt>
   111dc:	mov	r1, r0
   111e0:	mov	r0, #1
   111e4:	mov	r2, #64	; 0x40
   111e8:	bl	10fc8 <__printf_chk@plt>
   111ec:	movw	r1, #29287	; 0x7267
   111f0:	mov	r0, #0
   111f4:	mov	r2, #5
   111f8:	movt	r1, #1
   111fc:	bl	10eb4 <dcgettext@plt>
   11200:	movw	r7, #33100	; 0x814c
   11204:	movt	r7, #2
   11208:	ldr	r1, [r7]
   1120c:	bl	10e30 <fputs_unlocked@plt>
   11210:	movw	r1, #29343	; 0x729f
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10eb4 <dcgettext@plt>
   11224:	ldr	r1, [r7]
   11228:	bl	10e30 <fputs_unlocked@plt>
   1122c:	movw	r1, #28567	; 0x6f97
   11230:	mov	r0, #0
   11234:	mov	r2, #5
   11238:	movt	r1, #1
   1123c:	bl	10eb4 <dcgettext@plt>
   11240:	ldr	r1, [r7]
   11244:	bl	10e30 <fputs_unlocked@plt>
   11248:	movw	r1, #28809	; 0x7089
   1124c:	mov	r0, #0
   11250:	mov	r2, #5
   11254:	movt	r1, #1
   11258:	bl	10eb4 <dcgettext@plt>
   1125c:	ldr	r1, [r7]
   11260:	bl	10e30 <fputs_unlocked@plt>
   11264:	movw	r1, #28854	; 0x70b6
   11268:	mov	r0, #0
   1126c:	mov	r2, #5
   11270:	movt	r1, #1
   11274:	bl	10eb4 <dcgettext@plt>
   11278:	ldr	r1, [r7]
   1127c:	bl	10e30 <fputs_unlocked@plt>
   11280:	movw	r1, #28908	; 0x70ec
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10eb4 <dcgettext@plt>
   11294:	movw	r5, #29176	; 0x71f8
   11298:	mov	r1, r0
   1129c:	mov	r0, #1
   112a0:	movt	r5, #1
   112a4:	mov	r2, r5
   112a8:	mov	r3, r5
   112ac:	bl	10fc8 <__printf_chk@plt>
   112b0:	movw	r0, #29928	; 0x74e8
   112b4:	mov	r2, #48	; 0x30
   112b8:	mov	r6, sp
   112bc:	movt	r0, #1
   112c0:	add	r1, r0, #32
   112c4:	add	r3, r0, #16
   112c8:	vld1.64	{d18-d19}, [r0], r2
   112cc:	vld1.64	{d16-d17}, [r1]
   112d0:	vld1.64	{d20-d21}, [r3]
   112d4:	vldr	d22, [r0]
   112d8:	add	r1, r6, #32
   112dc:	add	r0, r6, #16
   112e0:	vst1.64	{d16-d17}, [r1]
   112e4:	movw	r1, #29418	; 0x72ea
   112e8:	vst1.64	{d20-d21}, [r0]
   112ec:	mov	r0, r6
   112f0:	movt	r1, #1
   112f4:	vst1.64	{d18-d19}, [r0], r2
   112f8:	vstr	d22, [r0]
   112fc:	mov	r0, r5
   11300:	bl	10e48 <strcmp@plt>
   11304:	cmp	r0, #0
   11308:	ldrne	r1, [r6, #8]!
   1130c:	cmpne	r1, #0
   11310:	bne	112fc <__assert_fail@plt+0x274>
   11314:	movw	r1, #29513	; 0x7349
   11318:	ldr	r6, [r6, #4]
   1131c:	mov	r0, #0
   11320:	mov	r2, #5
   11324:	movt	r1, #1
   11328:	bl	10eb4 <dcgettext@plt>
   1132c:	movw	r2, #29237	; 0x7235
   11330:	movw	r3, #29536	; 0x7360
   11334:	mov	r1, r0
   11338:	mov	r0, #1
   1133c:	movt	r2, #1
   11340:	movt	r3, #1
   11344:	bl	10fc8 <__printf_chk@plt>
   11348:	cmp	r6, #0
   1134c:	mov	r0, #5
   11350:	mov	r1, #0
   11354:	moveq	r6, r5
   11358:	bl	1101c <setlocale@plt>
   1135c:	cmp	r0, #0
   11360:	beq	11398 <__assert_fail@plt+0x310>
   11364:	movw	r1, #29576	; 0x7388
   11368:	mov	r2, #3
   1136c:	movt	r1, #1
   11370:	bl	11070 <strncmp@plt>
   11374:	cmp	r0, #0
   11378:	beq	11398 <__assert_fail@plt+0x310>
   1137c:	movw	r1, #29580	; 0x738c
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	movt	r1, #1
   1138c:	bl	10eb4 <dcgettext@plt>
   11390:	ldr	r1, [r7]
   11394:	bl	10e30 <fputs_unlocked@plt>
   11398:	movw	r1, #29651	; 0x73d3
   1139c:	mov	r0, #0
   113a0:	mov	r2, #5
   113a4:	movt	r1, #1
   113a8:	bl	10eb4 <dcgettext@plt>
   113ac:	movw	r2, #29536	; 0x7360
   113b0:	mov	r1, r0
   113b4:	mov	r0, #1
   113b8:	mov	r3, r5
   113bc:	movt	r2, #1
   113c0:	bl	10fc8 <__printf_chk@plt>
   113c4:	movw	r1, #29678	; 0x73ee
   113c8:	mov	r0, #0
   113cc:	mov	r2, #5
   113d0:	movt	r1, #1
   113d4:	bl	10eb4 <dcgettext@plt>
   113d8:	mov	r1, r0
   113dc:	movw	r0, #29446	; 0x7306
   113e0:	movw	r3, #29728	; 0x7420
   113e4:	cmp	r6, r5
   113e8:	mov	r2, r6
   113ec:	movt	r0, #1
   113f0:	movt	r3, #1
   113f4:	moveq	r3, r0
   113f8:	mov	r0, #1
   113fc:	bl	10fc8 <__printf_chk@plt>
   11400:	mov	r0, r4
   11404:	bl	10f74 <exit@plt>
   11408:	movw	r0, #33088	; 0x8140
   1140c:	movw	r1, #28428	; 0x6f0c
   11410:	mov	r2, #5
   11414:	movt	r0, #2
   11418:	movt	r1, #1
   1141c:	ldr	r5, [r0]
   11420:	mov	r0, #0
   11424:	bl	10eb4 <dcgettext@plt>
   11428:	mov	r2, r0
   1142c:	movw	r0, #33120	; 0x8160
   11430:	mov	r1, #1
   11434:	movt	r0, #2
   11438:	ldr	r3, [r0]
   1143c:	mov	r0, r5
   11440:	bl	10fe0 <__fprintf_chk@plt>
   11444:	mov	r0, r4
   11448:	bl	10f74 <exit@plt>
   1144c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11450:	add	fp, sp, #28
   11454:	sub	sp, sp, #28
   11458:	mov	r5, r0
   1145c:	ldr	r0, [r1]
   11460:	mov	r4, r1
   11464:	bl	1260c <__assert_fail@plt+0x1584>
   11468:	movw	r1, #29728	; 0x7420
   1146c:	mov	r0, #6
   11470:	movt	r1, #1
   11474:	bl	1101c <setlocale@plt>
   11478:	movw	r6, #29241	; 0x7239
   1147c:	movw	r1, #29183	; 0x71ff
   11480:	movt	r6, #1
   11484:	movt	r1, #1
   11488:	mov	r0, r6
   1148c:	bl	11058 <bindtextdomain@plt>
   11490:	mov	r0, r6
   11494:	bl	10ecc <textdomain@plt>
   11498:	movw	r0, #8988	; 0x231c
   1149c:	movt	r0, #1
   114a0:	bl	16ee8 <__assert_fail@plt+0x5e60>
   114a4:	movw	r9, #29207	; 0x7217
   114a8:	movw	r7, #29832	; 0x7488
   114ac:	mov	r6, #76	; 0x4c
   114b0:	mov	r8, #0
   114b4:	mov	sl, #0
   114b8:	mov	r0, #0
   114bc:	movt	r9, #1
   114c0:	movt	r7, #1
   114c4:	str	r0, [sp, #12]
   114c8:	mov	r0, r5
   114cc:	mov	r1, r4
   114d0:	mov	r2, r9
   114d4:	mov	r3, r7
   114d8:	str	r8, [sp]
   114dc:	bl	10f5c <getopt_long@plt>
   114e0:	cmp	r0, #99	; 0x63
   114e4:	ble	1156c <__assert_fail@plt+0x4e4>
   114e8:	cmp	r0, #100	; 0x64
   114ec:	beq	1155c <__assert_fail@plt+0x4d4>
   114f0:	cmp	r0, #105	; 0x69
   114f4:	beq	11564 <__assert_fail@plt+0x4dc>
   114f8:	cmp	r0, #119	; 0x77
   114fc:	bne	11744 <__assert_fail@plt+0x6bc>
   11500:	movw	r0, #33104	; 0x8150
   11504:	movw	r1, #29728	; 0x7420
   11508:	mov	r2, #10
   1150c:	add	r3, sp, #16
   11510:	movt	r0, #2
   11514:	movt	r1, #1
   11518:	ldr	r0, [r0]
   1151c:	str	r1, [sp]
   11520:	mov	r1, #0
   11524:	bl	14fe4 <__assert_fail@plt+0x3f5c>
   11528:	cmp	r0, #1
   1152c:	bhi	11700 <__assert_fail@plt+0x678>
   11530:	ldr	r1, [sp, #20]
   11534:	cmn	r1, #1
   11538:	ble	11700 <__assert_fail@plt+0x678>
   1153c:	ldr	r2, [sp, #16]
   11540:	mvn	r3, #-2147483648	; 0x80000000
   11544:	subs	r3, r3, r2
   11548:	rscs	r1, r1, #0
   1154c:	movwlt	r2, #0
   11550:	subs	r6, r0, #1
   11554:	movne	r6, r2
   11558:	b	114c8 <__assert_fail@plt+0x440>
   1155c:	mov	sl, #1
   11560:	b	114c8 <__assert_fail@plt+0x440>
   11564:	mov	r0, #1
   11568:	b	114c4 <__assert_fail@plt+0x43c>
   1156c:	cmn	r0, #3
   11570:	beq	11584 <__assert_fail@plt+0x4fc>
   11574:	cmn	r0, #2
   11578:	bne	115cc <__assert_fail@plt+0x544>
   1157c:	mov	r0, #0
   11580:	bl	11184 <__assert_fail@plt+0xfc>
   11584:	movw	r0, #33000	; 0x80e8
   11588:	movw	r2, #29251	; 0x7243
   1158c:	mov	r1, #0
   11590:	movt	r0, #2
   11594:	movt	r2, #1
   11598:	str	r1, [sp, #4]
   1159c:	movw	r1, #29176	; 0x71f8
   115a0:	movt	r1, #1
   115a4:	ldr	r3, [r0]
   115a8:	movw	r0, #33100	; 0x814c
   115ac:	str	r2, [sp]
   115b0:	movw	r2, #29237	; 0x7235
   115b4:	movt	r0, #2
   115b8:	movt	r2, #1
   115bc:	ldr	r0, [r0]
   115c0:	bl	14830 <__assert_fail@plt+0x37a8>
   115c4:	mov	r0, #0
   115c8:	bl	10f74 <exit@plt>
   115cc:	cmn	r0, #1
   115d0:	bne	11744 <__assert_fail@plt+0x6bc>
   115d4:	movw	r7, #33080	; 0x8138
   115d8:	movt	r7, #2
   115dc:	ldr	r0, [r7]
   115e0:	sub	r1, r5, r0
   115e4:	cmp	r1, #2
   115e8:	blt	11630 <__assert_fail@plt+0x5a8>
   115ec:	movw	r1, #29267	; 0x7253
   115f0:	mov	r0, #0
   115f4:	mov	r2, #5
   115f8:	movt	r1, #1
   115fc:	bl	10eb4 <dcgettext@plt>
   11600:	mov	r5, r0
   11604:	ldr	r0, [r7]
   11608:	add	r0, r4, r0, lsl #2
   1160c:	ldr	r0, [r0, #4]
   11610:	bl	14260 <__assert_fail@plt+0x31d8>
   11614:	mov	r3, r0
   11618:	mov	r0, #0
   1161c:	mov	r1, #0
   11620:	mov	r2, r5
   11624:	bl	10f20 <error@plt>
   11628:	mov	r0, #1
   1162c:	bl	11184 <__assert_fail@plt+0xfc>
   11630:	cmp	r0, r5
   11634:	bge	11640 <__assert_fail@plt+0x5b8>
   11638:	ldr	r4, [r4, r0, lsl #2]
   1163c:	b	11648 <__assert_fail@plt+0x5c0>
   11640:	movw	r4, #30385	; 0x76b1
   11644:	movt	r4, #1
   11648:	movw	r1, #30385	; 0x76b1
   1164c:	mov	r0, r4
   11650:	movt	r1, #1
   11654:	bl	10e48 <strcmp@plt>
   11658:	cmp	r0, #0
   1165c:	bne	11670 <__assert_fail@plt+0x5e8>
   11660:	movw	r0, #33096	; 0x8148
   11664:	movt	r0, #2
   11668:	ldr	r5, [r0]
   1166c:	b	116bc <__assert_fail@plt+0x634>
   11670:	movw	r1, #29284	; 0x7264
   11674:	mov	r0, r4
   11678:	movt	r1, #1
   1167c:	bl	1104c <fopen64@plt>
   11680:	mov	r5, r0
   11684:	cmp	r0, #0
   11688:	bne	116bc <__assert_fail@plt+0x634>
   1168c:	bl	10fa4 <__errno_location@plt>
   11690:	ldr	r5, [r0]
   11694:	mov	r0, #0
   11698:	mov	r1, #3
   1169c:	mov	r2, r4
   116a0:	bl	13fb4 <__assert_fail@plt+0x2f2c>
   116a4:	movw	r2, #29216	; 0x7220
   116a8:	mov	r3, r0
   116ac:	mov	r0, #1
   116b0:	mov	r1, r5
   116b4:	movt	r2, #1
   116b8:	bl	10f20 <error@plt>
   116bc:	mov	r0, r5
   116c0:	mov	r1, #2
   116c4:	bl	12408 <__assert_fail@plt+0x1380>
   116c8:	movw	r0, #33100	; 0x814c
   116cc:	tst	sl, #1
   116d0:	movt	r0, #2
   116d4:	ldr	r2, [r0]
   116d8:	beq	116f0 <__assert_fail@plt+0x668>
   116dc:	ldr	r0, [sp, #12]
   116e0:	mov	r1, r4
   116e4:	and	r3, r0, #1
   116e8:	mov	r0, r5
   116ec:	bl	1174c <__assert_fail@plt+0x6c4>
   116f0:	mov	r0, r5
   116f4:	mov	r1, r4
   116f8:	mov	r3, r6
   116fc:	bl	11950 <__assert_fail@plt+0x8c8>
   11700:	movw	r1, #29219	; 0x7223
   11704:	mov	r0, #0
   11708:	mov	r2, #5
   1170c:	movt	r1, #1
   11710:	bl	10eb4 <dcgettext@plt>
   11714:	mov	r4, r0
   11718:	movw	r0, #33104	; 0x8150
   1171c:	movt	r0, #2
   11720:	ldr	r0, [r0]
   11724:	bl	14260 <__assert_fail@plt+0x31d8>
   11728:	movw	r2, #29212	; 0x721c
   1172c:	str	r0, [sp]
   11730:	mov	r0, #1
   11734:	mov	r1, #0
   11738:	mov	r3, r4
   1173c:	movt	r2, #1
   11740:	bl	10f20 <error@plt>
   11744:	mov	r0, #1
   11748:	bl	11184 <__assert_fail@plt+0xfc>
   1174c:	push	{fp, lr}
   11750:	mov	fp, sp
   11754:	sub	sp, sp, #40	; 0x28
   11758:	add	ip, sp, #8
   1175c:	mov	r8, r0
   11760:	mov	r0, #4096	; 0x1000
   11764:	stm	ip, {r1, r2, r3}
   11768:	bl	14a64 <__assert_fail@plt+0x39dc>
   1176c:	mov	r4, r0
   11770:	mov	r0, #3072	; 0xc00
   11774:	bl	14a64 <__assert_fail@plt+0x39dc>
   11778:	str	r0, [fp, #-16]
   1177c:	sub	r0, fp, #8
   11780:	bl	11e9c <__assert_fail@plt+0xe14>
   11784:	ldr	r5, [sp, #12]
   11788:	mov	sl, #0
   1178c:	str	r8, [sp, #20]
   11790:	b	117a0 <__assert_fail@plt+0x718>
   11794:	mov	sl, #0
   11798:	cmp	r0, #0
   1179c:	bne	11944 <__assert_fail@plt+0x8bc>
   117a0:	add	r9, r4, sl
   117a4:	rsb	r2, sl, #4096	; 0x1000
   117a8:	mov	r1, #1
   117ac:	mov	r3, r8
   117b0:	mov	r0, r9
   117b4:	bl	11064 <fread_unlocked@plt>
   117b8:	mov	r8, r0
   117bc:	cmp	r0, #1
   117c0:	blt	11828 <__assert_fail@plt+0x7a0>
   117c4:	ldr	r0, [sp, #16]
   117c8:	cmp	r0, #0
   117cc:	beq	11828 <__assert_fail@plt+0x7a0>
   117d0:	mov	r6, #0
   117d4:	add	r0, r6, sl
   117d8:	ldrb	r7, [r4, r0]
   117dc:	mov	r0, r7
   117e0:	bl	11e7c <__assert_fail@plt+0xdf4>
   117e4:	cmp	r0, #0
   117e8:	bne	1181c <__assert_fail@plt+0x794>
   117ec:	cmp	r7, #61	; 0x3d
   117f0:	beq	1181c <__assert_fail@plt+0x794>
   117f4:	sub	r8, r8, #1
   117f8:	add	r0, r9, r6
   117fc:	sub	r2, r8, r6
   11800:	add	r1, r0, #1
   11804:	bl	10e6c <memmove@plt>
   11808:	cmp	r8, #1
   1180c:	blt	11828 <__assert_fail@plt+0x7a0>
   11810:	cmp	r6, r8
   11814:	blt	117d4 <__assert_fail@plt+0x74c>
   11818:	b	11828 <__assert_fail@plt+0x7a0>
   1181c:	add	r6, r6, #1
   11820:	cmp	r8, #1
   11824:	bge	11810 <__assert_fail@plt+0x788>
   11828:	ldr	r0, [sp, #20]
   1182c:	ldr	r0, [r0]
   11830:	tst	r0, #32
   11834:	bne	11930 <__assert_fail@plt+0x8a8>
   11838:	add	sl, r8, sl
   1183c:	ldr	r8, [sp, #20]
   11840:	cmp	sl, #4096	; 0x1000
   11844:	bge	11850 <__assert_fail@plt+0x7c8>
   11848:	ands	r0, r0, #16
   1184c:	beq	117a0 <__assert_fail@plt+0x718>
   11850:	mov	r1, #0
   11854:	ldr	r9, [fp, #-16]
   11858:	mov	r0, #3072	; 0xc00
   1185c:	cmp	r1, #0
   11860:	mov	r2, #0
   11864:	mov	r6, r1
   11868:	mov	r1, r4
   1186c:	str	r0, [fp, #-12]
   11870:	sub	r0, fp, #12
   11874:	moveq	r2, sl
   11878:	str	r0, [sp]
   1187c:	sub	r0, fp, #8
   11880:	mov	r3, r9
   11884:	bl	11ea8 <__assert_fail@plt+0xe20>
   11888:	ldr	r2, [fp, #-12]
   1188c:	mov	r7, r0
   11890:	mov	r0, r9
   11894:	mov	r1, #1
   11898:	mov	r3, r5
   1189c:	bl	10ea8 <fwrite_unlocked@plt>
   118a0:	ldr	r1, [fp, #-12]
   118a4:	cmp	r0, r1
   118a8:	bcc	11904 <__assert_fail@plt+0x87c>
   118ac:	cmp	r7, #0
   118b0:	beq	118e0 <__assert_fail@plt+0x858>
   118b4:	ldr	r0, [r8]
   118b8:	mov	r2, #2
   118bc:	add	r1, r6, #1
   118c0:	ands	r0, r0, #16
   118c4:	movweq	r2, #1
   118c8:	cmp	r1, r2
   118cc:	bcs	11794 <__assert_fail@plt+0x70c>
   118d0:	ldr	r2, [fp, #-8]
   118d4:	orrs	r2, r6, r2
   118d8:	bne	11854 <__assert_fail@plt+0x7cc>
   118dc:	b	11794 <__assert_fail@plt+0x70c>
   118e0:	movw	r1, #29792	; 0x7460
   118e4:	mov	r0, #0
   118e8:	mov	r2, #5
   118ec:	movt	r1, #1
   118f0:	bl	10eb4 <dcgettext@plt>
   118f4:	mov	r2, r0
   118f8:	mov	r0, #1
   118fc:	mov	r1, #0
   11900:	bl	10f20 <error@plt>
   11904:	bl	10fa4 <__errno_location@plt>
   11908:	ldr	r4, [r0]
   1190c:	movw	r1, #29780	; 0x7454
   11910:	movt	r1, #1
   11914:	mov	r0, #0
   11918:	mov	r2, #5
   1191c:	bl	10eb4 <dcgettext@plt>
   11920:	mov	r2, r0
   11924:	mov	r0, #1
   11928:	mov	r1, r4
   1192c:	bl	10f20 <error@plt>
   11930:	bl	10fa4 <__errno_location@plt>
   11934:	ldr	r4, [r0]
   11938:	movw	r1, #29769	; 0x7449
   1193c:	movt	r1, #1
   11940:	b	11914 <__assert_fail@plt+0x88c>
   11944:	ldr	r1, [sp, #8]
   11948:	mov	r0, r8
   1194c:	bl	11b94 <__assert_fail@plt+0xb0c>
   11950:	push	{fp, lr}
   11954:	mov	fp, sp
   11958:	sub	sp, sp, #16
   1195c:	mov	r5, r0
   11960:	mov	r0, #30720	; 0x7800
   11964:	str	r3, [fp, #-4]
   11968:	stm	sp, {r1, r2}
   1196c:	bl	14a64 <__assert_fail@plt+0x39dc>
   11970:	mov	r4, r0
   11974:	mov	r0, #40960	; 0xa000
   11978:	bl	14a64 <__assert_fail@plt+0x39dc>
   1197c:	mov	r7, r0
   11980:	mov	sl, #0
   11984:	str	r0, [sp, #8]
   11988:	mov	r6, #0
   1198c:	add	r0, r4, r6
   11990:	rsb	r2, r6, #30720	; 0x7800
   11994:	mov	r1, #1
   11998:	mov	r3, r5
   1199c:	bl	11064 <fread_unlocked@plt>
   119a0:	add	r6, r0, r6
   119a4:	ldr	r0, [r5]
   119a8:	tst	r0, #16
   119ac:	bne	119c0 <__assert_fail@plt+0x938>
   119b0:	cmp	r6, #30720	; 0x7800
   119b4:	bge	119c0 <__assert_fail@plt+0x938>
   119b8:	ands	r0, r0, #32
   119bc:	beq	1198c <__assert_fail@plt+0x904>
   119c0:	cmp	r6, #1
   119c4:	blt	11ad4 <__assert_fail@plt+0xa4c>
   119c8:	movw	r1, #21846	; 0x5556
   119cc:	add	r0, r6, #2
   119d0:	mov	r2, r7
   119d4:	movt	r1, #21845	; 0x5555
   119d8:	smmul	r0, r0, r1
   119dc:	mov	r1, r6
   119e0:	add	r0, r0, r0, lsr #31
   119e4:	lsl	r8, r0, #2
   119e8:	mov	r0, r4
   119ec:	mov	r3, r8
   119f0:	bl	11c24 <__assert_fail@plt+0xb9c>
   119f4:	ldr	r0, [fp, #-4]
   119f8:	cmp	r0, #0
   119fc:	beq	11a08 <__assert_fail@plt+0x980>
   11a00:	mov	r7, #0
   11a04:	b	11a4c <__assert_fail@plt+0x9c4>
   11a08:	movw	r0, #33100	; 0x814c
   11a0c:	mov	r1, #1
   11a10:	mov	r2, r8
   11a14:	movt	r0, #2
   11a18:	ldr	r3, [r0]
   11a1c:	mov	r0, r7
   11a20:	bl	10ea8 <fwrite_unlocked@plt>
   11a24:	cmp	r0, r8
   11a28:	bcs	11ad4 <__assert_fail@plt+0xa4c>
   11a2c:	b	11b3c <__assert_fail@plt+0xab4>
   11a30:	mov	r1, #10
   11a34:	bl	11010 <__overflow@plt>
   11a38:	mov	sl, #0
   11a3c:	cmn	r0, #1
   11a40:	beq	11b3c <__assert_fail@plt+0xab4>
   11a44:	cmp	r7, r8
   11a48:	bge	11ad4 <__assert_fail@plt+0xa4c>
   11a4c:	ldr	r0, [fp, #-4]
   11a50:	sub	r9, r8, r7
   11a54:	sub	r0, r0, sl
   11a58:	cmp	r0, r9
   11a5c:	movlt	r9, r0
   11a60:	cmp	r9, #0
   11a64:	beq	11aa4 <__assert_fail@plt+0xa1c>
   11a68:	movw	r1, #33100	; 0x814c
   11a6c:	ldr	r0, [sp, #8]
   11a70:	mov	r2, r9
   11a74:	movt	r1, #2
   11a78:	ldr	r3, [r1]
   11a7c:	mov	r1, #1
   11a80:	add	r0, r0, r7
   11a84:	bl	10ea8 <fwrite_unlocked@plt>
   11a88:	cmp	r0, r9
   11a8c:	bcc	11b3c <__assert_fail@plt+0xab4>
   11a90:	add	r7, r9, r7
   11a94:	add	sl, r9, sl
   11a98:	cmp	r7, r8
   11a9c:	blt	11a4c <__assert_fail@plt+0x9c4>
   11aa0:	b	11ad4 <__assert_fail@plt+0xa4c>
   11aa4:	ldr	r0, [sp, #4]
   11aa8:	ldr	r2, [r0, #20]
   11aac:	ldr	r1, [r0, #24]
   11ab0:	cmp	r2, r1
   11ab4:	bcs	11a30 <__assert_fail@plt+0x9a8>
   11ab8:	add	r1, r2, #1
   11abc:	mov	sl, #0
   11ac0:	str	r1, [r0, #20]
   11ac4:	mov	r0, #10
   11ac8:	strb	r0, [r2]
   11acc:	cmp	r7, r8
   11ad0:	blt	11a4c <__assert_fail@plt+0x9c4>
   11ad4:	ldr	r0, [r5]
   11ad8:	ldr	r7, [sp, #8]
   11adc:	tst	r0, #16
   11ae0:	cmpeq	r6, #30720	; 0x7800
   11ae4:	bne	11af0 <__assert_fail@plt+0xa68>
   11ae8:	ands	r0, r0, #32
   11aec:	beq	11988 <__assert_fail@plt+0x900>
   11af0:	ldr	r0, [fp, #-4]
   11af4:	cmp	r0, #0
   11af8:	beq	11b50 <__assert_fail@plt+0xac8>
   11afc:	cmp	sl, #1
   11b00:	blt	11b50 <__assert_fail@plt+0xac8>
   11b04:	ldr	r0, [sp, #4]
   11b08:	ldr	r2, [r0, #20]
   11b0c:	ldr	r1, [r0, #24]
   11b10:	cmp	r2, r1
   11b14:	bcs	11b2c <__assert_fail@plt+0xaa4>
   11b18:	add	r1, r2, #1
   11b1c:	str	r1, [r0, #20]
   11b20:	mov	r1, #10
   11b24:	strb	r1, [r2]
   11b28:	b	11b50 <__assert_fail@plt+0xac8>
   11b2c:	mov	r1, #10
   11b30:	bl	11010 <__overflow@plt>
   11b34:	cmn	r0, #1
   11b38:	bne	11b50 <__assert_fail@plt+0xac8>
   11b3c:	bl	10fa4 <__errno_location@plt>
   11b40:	ldr	r4, [r0]
   11b44:	movw	r1, #29780	; 0x7454
   11b48:	movt	r1, #1
   11b4c:	b	11b78 <__assert_fail@plt+0xaf0>
   11b50:	ldrb	r0, [r5]
   11b54:	tst	r0, #32
   11b58:	bne	11b68 <__assert_fail@plt+0xae0>
   11b5c:	ldr	r1, [sp]
   11b60:	mov	r0, r5
   11b64:	bl	11b94 <__assert_fail@plt+0xb0c>
   11b68:	bl	10fa4 <__errno_location@plt>
   11b6c:	ldr	r4, [r0]
   11b70:	movw	r1, #29769	; 0x7449
   11b74:	movt	r1, #1
   11b78:	mov	r0, #0
   11b7c:	mov	r2, #5
   11b80:	bl	10eb4 <dcgettext@plt>
   11b84:	mov	r2, r0
   11b88:	mov	r0, #1
   11b8c:	mov	r1, r4
   11b90:	bl	10f20 <error@plt>
   11b94:	push	{fp, lr}
   11b98:	mov	fp, sp
   11b9c:	mov	r5, r1
   11ba0:	bl	12444 <__assert_fail@plt+0x13bc>
   11ba4:	cmp	r0, #0
   11ba8:	bne	11bb4 <__assert_fail@plt+0xb2c>
   11bac:	mov	r0, #0
   11bb0:	bl	10f74 <exit@plt>
   11bb4:	movw	r1, #30385	; 0x76b1
   11bb8:	mov	r0, r5
   11bbc:	movt	r1, #1
   11bc0:	bl	10e48 <strcmp@plt>
   11bc4:	mov	r6, r0
   11bc8:	bl	10fa4 <__errno_location@plt>
   11bcc:	ldr	r4, [r0]
   11bd0:	cmp	r6, #0
   11bd4:	bne	11bfc <__assert_fail@plt+0xb74>
   11bd8:	movw	r1, #29806	; 0x746e
   11bdc:	mov	r0, #0
   11be0:	mov	r2, #5
   11be4:	movt	r1, #1
   11be8:	bl	10eb4 <dcgettext@plt>
   11bec:	mov	r2, r0
   11bf0:	mov	r0, #1
   11bf4:	mov	r1, r4
   11bf8:	bl	10f20 <error@plt>
   11bfc:	mov	r0, #0
   11c00:	mov	r1, #3
   11c04:	mov	r2, r5
   11c08:	bl	13fb4 <__assert_fail@plt+0x2f2c>
   11c0c:	movw	r2, #29216	; 0x7220
   11c10:	mov	r3, r0
   11c14:	mov	r0, #1
   11c18:	mov	r1, r4
   11c1c:	movt	r2, #1
   11c20:	bl	10f20 <error@plt>
   11c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c28:	add	fp, sp, #28
   11c2c:	tst	r3, #3
   11c30:	bne	11ca8 <__assert_fail@plt+0xc20>
   11c34:	asr	r7, r3, #2
   11c38:	add	r7, r7, r7, lsl #1
   11c3c:	cmp	r7, r1
   11c40:	bne	11ca8 <__assert_fail@plt+0xc20>
   11c44:	cmp	r1, #0
   11c48:	beq	11cc4 <__assert_fail@plt+0xc3c>
   11c4c:	movw	r3, #29999	; 0x752f
   11c50:	movt	r3, #1
   11c54:	ldrb	r7, [r0]
   11c58:	subs	r1, r1, #3
   11c5c:	ldrb	r6, [r3, r7, lsr #2]
   11c60:	strb	r6, [r2]
   11c64:	ldrb	r6, [r0, #1]
   11c68:	lsr	r5, r6, #4
   11c6c:	bfi	r5, r7, #4, #2
   11c70:	ldrb	r7, [r3, r5]
   11c74:	strb	r7, [r2, #1]
   11c78:	ldrb	r7, [r0, #2]
   11c7c:	add	r0, r0, #3
   11c80:	and	r5, r7, #63	; 0x3f
   11c84:	lsr	r7, r7, #6
   11c88:	bfi	r7, r6, #2, #4
   11c8c:	ldrb	r5, [r3, r5]
   11c90:	ldrb	r7, [r3, r7]
   11c94:	strb	r5, [r2, #3]
   11c98:	strb	r7, [r2, #2]
   11c9c:	add	r2, r2, #4
   11ca0:	bne	11c54 <__assert_fail@plt+0xbcc>
   11ca4:	b	11cc4 <__assert_fail@plt+0xc3c>
   11ca8:	cmp	r1, #0
   11cac:	cmpne	r3, #0
   11cb0:	bne	11cc8 <__assert_fail@plt+0xc40>
   11cb4:	cmp	r3, #0
   11cb8:	beq	11cc4 <__assert_fail@plt+0xc3c>
   11cbc:	mov	r0, #0
   11cc0:	strb	r0, [r2]
   11cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cc8:	movw	r6, #29999	; 0x752f
   11ccc:	add	r0, r0, #1
   11cd0:	sub	ip, r3, #3
   11cd4:	sub	lr, r3, #2
   11cd8:	sub	sl, r3, #1
   11cdc:	sub	r9, r3, #4
   11ce0:	mov	r8, #0
   11ce4:	mov	r7, #0
   11ce8:	movt	r6, #1
   11cec:	ldrb	r3, [r0, #-1]
   11cf0:	mov	r5, r2
   11cf4:	cmp	sl, r7
   11cf8:	ldrb	r3, [r6, r3, lsr #2]
   11cfc:	strb	r3, [r5, r7]!
   11d00:	beq	11cc4 <__assert_fail@plt+0xc3c>
   11d04:	cmp	r1, #1
   11d08:	ldrb	r3, [r0, #-1]
   11d0c:	mov	r4, #0
   11d10:	ldrbne	r4, [r0]
   11d14:	lsl	r3, r3, #4
   11d18:	lsrne	r4, r4, #4
   11d1c:	cmp	lr, r7
   11d20:	add	r3, r4, r3
   11d24:	and	r3, r3, #63	; 0x3f
   11d28:	ldrb	r3, [r6, r3]
   11d2c:	strb	r3, [r5, #1]
   11d30:	beq	11cc4 <__assert_fail@plt+0xc3c>
   11d34:	cmp	r1, #1
   11d38:	beq	11d58 <__assert_fail@plt+0xcd0>
   11d3c:	ldrb	r3, [r0]
   11d40:	subs	r1, r1, #2
   11d44:	lsl	r3, r3, #2
   11d48:	beq	11d64 <__assert_fail@plt+0xcdc>
   11d4c:	ldrb	r4, [r0, #1]
   11d50:	lsr	r4, r4, #6
   11d54:	b	11d68 <__assert_fail@plt+0xce0>
   11d58:	mov	r3, #61	; 0x3d
   11d5c:	mov	r1, #0
   11d60:	b	11d74 <__assert_fail@plt+0xcec>
   11d64:	mov	r4, #0
   11d68:	add	r3, r4, r3
   11d6c:	and	r3, r3, #63	; 0x3f
   11d70:	ldrb	r3, [r6, r3]
   11d74:	cmp	ip, r7
   11d78:	strb	r3, [r5, #2]
   11d7c:	beq	11cc4 <__assert_fail@plt+0xc3c>
   11d80:	cmp	r1, #0
   11d84:	beq	11d98 <__assert_fail@plt+0xd10>
   11d88:	ldrb	r3, [r0, #1]
   11d8c:	and	r3, r3, #63	; 0x3f
   11d90:	ldrb	r3, [r6, r3]
   11d94:	b	11d9c <__assert_fail@plt+0xd14>
   11d98:	mov	r3, #61	; 0x3d
   11d9c:	cmp	r9, r7
   11da0:	strb	r3, [r5, #3]
   11da4:	beq	11cc4 <__assert_fail@plt+0xc3c>
   11da8:	subs	r1, r1, #1
   11dac:	add	r7, r7, #4
   11db0:	adc	r3, r8, #0
   11db4:	cmp	r1, #0
   11db8:	addne	r0, r0, #3
   11dbc:	cmpne	r3, #0
   11dc0:	bne	11cec <__assert_fail@plt+0xc64>
   11dc4:	add	r2, r2, r7
   11dc8:	b	11cbc <__assert_fail@plt+0xc34>
   11dcc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11dd0:	add	fp, sp, #24
   11dd4:	mov	r8, r0
   11dd8:	movw	r0, #21846	; 0x5556
   11ddc:	mov	r4, r1
   11de0:	mov	r6, r2
   11de4:	movt	r0, #21845	; 0x5555
   11de8:	smmul	r0, r1, r0
   11dec:	add	r0, r0, r0, lsr #31
   11df0:	add	r1, r0, r0, lsl #1
   11df4:	subs	r1, r4, r1
   11df8:	addne	r0, r0, #1
   11dfc:	cmn	r0, #1
   11e00:	ble	11e10 <__assert_fail@plt+0xd88>
   11e04:	cmn	r0, #-536870911	; 0xe0000001
   11e08:	ble	11e24 <__assert_fail@plt+0xd9c>
   11e0c:	b	11e64 <__assert_fail@plt+0xddc>
   11e10:	beq	11e24 <__assert_fail@plt+0xd9c>
   11e14:	mov	r1, #-2147483648	; 0x80000000
   11e18:	sdiv	r1, r1, r0
   11e1c:	cmp	r1, #4
   11e20:	blt	11e64 <__assert_fail@plt+0xddc>
   11e24:	cmn	r4, #1
   11e28:	ble	11e64 <__assert_fail@plt+0xddc>
   11e2c:	lsl	r7, r0, #2
   11e30:	orr	r5, r7, #1
   11e34:	mov	r0, r5
   11e38:	bl	16950 <__assert_fail@plt+0x58c8>
   11e3c:	cmp	r0, #0
   11e40:	str	r0, [r6]
   11e44:	beq	11e74 <__assert_fail@plt+0xdec>
   11e48:	mov	r2, r0
   11e4c:	mov	r0, r8
   11e50:	mov	r1, r4
   11e54:	mov	r3, r5
   11e58:	bl	11c24 <__assert_fail@plt+0xb9c>
   11e5c:	mov	r0, r7
   11e60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11e64:	mov	r7, #0
   11e68:	mov	r0, r7
   11e6c:	str	r7, [r6]
   11e70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11e74:	mov	r0, r5
   11e78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11e7c:	movw	r1, #30063	; 0x756f
   11e80:	movt	r1, #1
   11e84:	add	r0, r1, r0
   11e88:	ldrsb	r1, [r0]
   11e8c:	mov	r0, #0
   11e90:	cmn	r1, #1
   11e94:	movwgt	r0, #1
   11e98:	bx	lr
   11e9c:	mov	r1, #0
   11ea0:	str	r1, [r0]
   11ea4:	bx	lr
   11ea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eac:	add	fp, sp, #28
   11eb0:	sub	sp, sp, #28
   11eb4:	mov	r6, r2
   11eb8:	mov	r2, r0
   11ebc:	ldr	r0, [fp, #8]
   11ec0:	str	r3, [sp, #24]
   11ec4:	mov	r5, r1
   11ec8:	mov	r8, #0
   11ecc:	cmp	r2, #0
   11ed0:	ldr	r7, [r0]
   11ed4:	mov	r0, #0
   11ed8:	str	r7, [sp, #20]
   11edc:	beq	11ef4 <__assert_fail@plt+0xe6c>
   11ee0:	clz	r0, r6
   11ee4:	lsr	r8, r0, #5
   11ee8:	ldr	r0, [r2]
   11eec:	cmp	r0, #0
   11ef0:	movwne	r0, #1
   11ef4:	orr	r0, r0, r8
   11ef8:	add	sl, sp, #24
   11efc:	add	r4, sp, #20
   11f00:	str	r2, [sp, #16]
   11f04:	str	r0, [sp, #8]
   11f08:	add	r0, r2, #4
   11f0c:	str	r0, [sp, #4]
   11f10:	clz	r0, r2
   11f14:	lsr	r0, r0, #5
   11f18:	str	r0, [sp, #12]
   11f1c:	b	11f2c <__assert_fail@plt+0xea4>
   11f20:	ldr	r7, [sp, #20]
   11f24:	sub	r6, r6, #1
   11f28:	add	r5, r5, #1
   11f2c:	ldr	r0, [sp, #8]
   11f30:	cmp	r0, #0
   11f34:	bne	11f68 <__assert_fail@plt+0xee0>
   11f38:	mov	r0, r5
   11f3c:	mov	r1, r6
   11f40:	mov	r2, sl
   11f44:	mov	r3, r4
   11f48:	bl	1210c <__assert_fail@plt+0x1084>
   11f4c:	cmp	r0, #0
   11f50:	beq	11f64 <__assert_fail@plt+0xedc>
   11f54:	ldr	r7, [sp, #20]
   11f58:	add	r5, r5, #4
   11f5c:	sub	r6, r6, #4
   11f60:	b	11f38 <__assert_fail@plt+0xeb0>
   11f64:	ldr	r2, [sp, #16]
   11f68:	cmp	r6, #0
   11f6c:	mov	r0, r6
   11f70:	movwne	r0, #1
   11f74:	orr	r0, r8, r0
   11f78:	cmp	r0, #1
   11f7c:	bne	120e0 <__assert_fail@plt+0x1058>
   11f80:	cmp	r6, #0
   11f84:	beq	11fa0 <__assert_fail@plt+0xf18>
   11f88:	ldrb	r0, [r5]
   11f8c:	ldr	r1, [sp, #12]
   11f90:	subs	r0, r0, #10
   11f94:	movwne	r0, #1
   11f98:	orrs	r0, r0, r1
   11f9c:	beq	11f20 <__assert_fail@plt+0xe98>
   11fa0:	ldr	r0, [sp, #20]
   11fa4:	ldr	r1, [sp, #24]
   11fa8:	add	r9, r5, r6
   11fac:	cmp	r2, #0
   11fb0:	str	r7, [sp, #20]
   11fb4:	sub	r0, r0, r7
   11fb8:	add	r0, r1, r0
   11fbc:	str	r0, [sp, #24]
   11fc0:	beq	12064 <__assert_fail@plt+0xfdc>
   11fc4:	ldr	r7, [r2]
   11fc8:	cmp	r7, #0
   11fcc:	beq	11fe0 <__assert_fail@plt+0xf58>
   11fd0:	cmp	r7, #4
   11fd4:	bne	1200c <__assert_fail@plt+0xf84>
   11fd8:	mov	r0, #0
   11fdc:	str	r0, [r2]
   11fe0:	sub	r0, r9, r5
   11fe4:	mov	r7, #0
   11fe8:	cmp	r0, #4
   11fec:	blt	1200c <__assert_fail@plt+0xf84>
   11ff0:	mov	r0, r5
   11ff4:	mov	r1, #10
   11ff8:	mov	r2, #4
   11ffc:	bl	10fec <memchr@plt>
   12000:	ldr	r2, [sp, #16]
   12004:	cmp	r0, #0
   12008:	beq	120cc <__assert_fail@plt+0x1044>
   1200c:	cmp	r6, #1
   12010:	blt	1206c <__assert_fail@plt+0xfe4>
   12014:	mov	r6, r7
   12018:	mov	r0, r5
   1201c:	ldrb	r1, [r5], #1
   12020:	cmp	r1, #10
   12024:	bne	12034 <__assert_fail@plt+0xfac>
   12028:	cmp	r5, r9
   1202c:	bcc	12018 <__assert_fail@plt+0xf90>
   12030:	b	1205c <__assert_fail@plt+0xfd4>
   12034:	add	r7, r6, #1
   12038:	mov	r3, r2
   1203c:	add	r5, r0, #1
   12040:	str	r7, [r3], r6
   12044:	cmp	r5, r9
   12048:	strb	r1, [r3, #4]
   1204c:	ldr	r6, [r2]
   12050:	bcs	1205c <__assert_fail@plt+0xfd4>
   12054:	cmp	r6, #4
   12058:	bne	12018 <__assert_fail@plt+0xf90>
   1205c:	add	r5, r0, #1
   12060:	b	12070 <__assert_fail@plt+0xfe8>
   12064:	mov	r0, r5
   12068:	b	12074 <__assert_fail@plt+0xfec>
   1206c:	mov	r6, r7
   12070:	ldr	r0, [sp, #4]
   12074:	mov	r1, #0
   12078:	cmp	r6, #0
   1207c:	beq	120e4 <__assert_fail@plt+0x105c>
   12080:	ldr	r3, [sp, #12]
   12084:	cmp	r6, #3
   12088:	mov	r2, #0
   1208c:	movwgt	r2, #1
   12090:	orr	r2, r8, r2
   12094:	orr	r2, r2, r3
   12098:	cmp	r2, #1
   1209c:	bne	120e4 <__assert_fail@plt+0x105c>
   120a0:	mov	r1, r6
   120a4:	mov	r2, sl
   120a8:	mov	r3, r4
   120ac:	bl	1210c <__assert_fail@plt+0x1084>
   120b0:	cmp	r0, #0
   120b4:	mov	r1, r6
   120b8:	beq	120e4 <__assert_fail@plt+0x105c>
   120bc:	ldr	r7, [sp, #20]
   120c0:	ldr	r2, [sp, #16]
   120c4:	sub	r6, r9, r5
   120c8:	b	11f2c <__assert_fail@plt+0xea4>
   120cc:	add	r1, r5, #4
   120d0:	mov	r0, r5
   120d4:	mov	r6, #4
   120d8:	mov	r5, r1
   120dc:	b	120a0 <__assert_fail@plt+0x1018>
   120e0:	mov	r1, r6
   120e4:	ldr	r0, [fp, #8]
   120e8:	ldr	r2, [sp, #20]
   120ec:	mov	r3, r0
   120f0:	ldr	r0, [r0]
   120f4:	sub	r0, r0, r2
   120f8:	str	r0, [r3]
   120fc:	clz	r0, r1
   12100:	lsr	r0, r0, #5
   12104:	sub	sp, fp, #28
   12108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1210c:	push	{r4, r5, r6, sl, fp, lr}
   12110:	add	fp, sp, #16
   12114:	mov	ip, #0
   12118:	cmp	r1, #2
   1211c:	blt	12250 <__assert_fail@plt+0x11c8>
   12120:	ldrb	r4, [r0]
   12124:	movw	lr, #30063	; 0x756f
   12128:	movt	lr, #1
   1212c:	add	r4, lr, r4
   12130:	ldrsb	r5, [r4]
   12134:	cmp	r5, #0
   12138:	bmi	12250 <__assert_fail@plt+0x11c8>
   1213c:	ldrb	r4, [r0, #1]
   12140:	add	r4, lr, r4
   12144:	ldrsb	r4, [r4]
   12148:	cmp	r4, #0
   1214c:	bmi	12250 <__assert_fail@plt+0x11c8>
   12150:	ldr	r6, [r3]
   12154:	ldr	ip, [r2]
   12158:	cmp	r6, #0
   1215c:	beq	12188 <__assert_fail@plt+0x1100>
   12160:	uxtb	r6, r4
   12164:	lsr	r6, r6, #4
   12168:	orr	r5, r6, r5, lsl #2
   1216c:	strb	r5, [ip], #1
   12170:	ldr	r5, [r3]
   12174:	sub	r6, r5, #1
   12178:	str	r6, [r3]
   1217c:	cmp	r1, #2
   12180:	bne	12194 <__assert_fail@plt+0x110c>
   12184:	b	12258 <__assert_fail@plt+0x11d0>
   12188:	mov	r6, #0
   1218c:	cmp	r1, #2
   12190:	beq	12258 <__assert_fail@plt+0x11d0>
   12194:	ldrb	r5, [r0, #2]
   12198:	cmp	r5, #61	; 0x3d
   1219c:	bne	121b8 <__assert_fail@plt+0x1130>
   121a0:	cmp	r1, #4
   121a4:	bne	12258 <__assert_fail@plt+0x11d0>
   121a8:	ldrb	r0, [r0, #3]
   121ac:	cmp	r0, #61	; 0x3d
   121b0:	beq	12248 <__assert_fail@plt+0x11c0>
   121b4:	b	12258 <__assert_fail@plt+0x11d0>
   121b8:	add	r5, lr, r5
   121bc:	ldrsb	r5, [r5]
   121c0:	cmn	r5, #1
   121c4:	ble	12258 <__assert_fail@plt+0x11d0>
   121c8:	cmp	r6, #0
   121cc:	beq	121f8 <__assert_fail@plt+0x1170>
   121d0:	uxtb	r6, r5
   121d4:	lsr	r6, r6, #2
   121d8:	orr	r4, r6, r4, lsl #4
   121dc:	strb	r4, [ip], #1
   121e0:	ldr	r4, [r3]
   121e4:	sub	r4, r4, #1
   121e8:	str	r4, [r3]
   121ec:	cmp	r1, #3
   121f0:	bne	12204 <__assert_fail@plt+0x117c>
   121f4:	b	12258 <__assert_fail@plt+0x11d0>
   121f8:	mov	r4, #0
   121fc:	cmp	r1, #3
   12200:	beq	12258 <__assert_fail@plt+0x11d0>
   12204:	ldrb	r0, [r0, #3]
   12208:	cmp	r0, #61	; 0x3d
   1220c:	bne	1221c <__assert_fail@plt+0x1194>
   12210:	cmp	r1, #4
   12214:	beq	12248 <__assert_fail@plt+0x11c0>
   12218:	b	12258 <__assert_fail@plt+0x11d0>
   1221c:	add	r0, lr, r0
   12220:	ldrsb	r0, [r0]
   12224:	cmn	r0, #1
   12228:	ble	12258 <__assert_fail@plt+0x11d0>
   1222c:	cmp	r4, #0
   12230:	beq	12248 <__assert_fail@plt+0x11c0>
   12234:	orr	r0, r0, r5, lsl #6
   12238:	strb	r0, [ip], #1
   1223c:	ldr	r0, [r3]
   12240:	sub	r0, r0, #1
   12244:	str	r0, [r3]
   12248:	str	ip, [r2]
   1224c:	mov	ip, #1
   12250:	mov	r0, ip
   12254:	pop	{r4, r5, r6, sl, fp, pc}
   12258:	str	ip, [r2]
   1225c:	mov	ip, #0
   12260:	mov	r0, ip
   12264:	pop	{r4, r5, r6, sl, fp, pc}
   12268:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1226c:	add	fp, sp, #24
   12270:	sub	sp, sp, #8
   12274:	mov	r7, r0
   12278:	asr	r0, r2, #2
   1227c:	mov	r4, r3
   12280:	mov	r6, r2
   12284:	mov	r8, r1
   12288:	add	r0, r0, r0, lsl #1
   1228c:	add	r0, r0, #3
   12290:	str	r0, [sp, #4]
   12294:	bl	16950 <__assert_fail@plt+0x58c8>
   12298:	mov	r5, #1
   1229c:	cmp	r0, #0
   122a0:	str	r0, [r4]
   122a4:	beq	122f0 <__assert_fail@plt+0x1268>
   122a8:	mov	r3, r0
   122ac:	add	r0, sp, #4
   122b0:	mov	r1, r8
   122b4:	mov	r2, r6
   122b8:	str	r0, [sp]
   122bc:	mov	r0, r7
   122c0:	bl	11ea8 <__assert_fail@plt+0xe20>
   122c4:	cmp	r0, #0
   122c8:	beq	122e0 <__assert_fail@plt+0x1258>
   122cc:	ldr	r0, [fp, #8]
   122d0:	cmp	r0, #0
   122d4:	ldrne	r1, [sp, #4]
   122d8:	strne	r1, [r0]
   122dc:	b	122f0 <__assert_fail@plt+0x1268>
   122e0:	ldr	r0, [r4]
   122e4:	bl	1253c <__assert_fail@plt+0x14b4>
   122e8:	mov	r5, #0
   122ec:	str	r5, [r4]
   122f0:	mov	r0, r5
   122f4:	sub	sp, fp, #24
   122f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   122fc:	movw	r1, #33112	; 0x8158
   12300:	movt	r1, #2
   12304:	str	r0, [r1]
   12308:	bx	lr
   1230c:	movw	r1, #33116	; 0x815c
   12310:	movt	r1, #2
   12314:	strb	r0, [r1]
   12318:	bx	lr
   1231c:	push	{r4, r5, r6, sl, fp, lr}
   12320:	add	fp, sp, #16
   12324:	sub	sp, sp, #8
   12328:	movw	r0, #33100	; 0x814c
   1232c:	movt	r0, #2
   12330:	ldr	r0, [r0]
   12334:	bl	169d4 <__assert_fail@plt+0x594c>
   12338:	cmp	r0, #0
   1233c:	beq	12364 <__assert_fail@plt+0x12dc>
   12340:	movw	r0, #33116	; 0x815c
   12344:	movt	r0, #2
   12348:	ldrb	r0, [r0]
   1234c:	cmp	r0, #0
   12350:	beq	12384 <__assert_fail@plt+0x12fc>
   12354:	bl	10fa4 <__errno_location@plt>
   12358:	ldr	r0, [r0]
   1235c:	cmp	r0, #32
   12360:	bne	12384 <__assert_fail@plt+0x12fc>
   12364:	movw	r0, #33088	; 0x8140
   12368:	movt	r0, #2
   1236c:	ldr	r0, [r0]
   12370:	bl	169d4 <__assert_fail@plt+0x594c>
   12374:	cmp	r0, #0
   12378:	subeq	sp, fp, #16
   1237c:	popeq	{r4, r5, r6, sl, fp, pc}
   12380:	b	123f4 <__assert_fail@plt+0x136c>
   12384:	movw	r1, #29780	; 0x7454
   12388:	mov	r0, #0
   1238c:	mov	r2, #5
   12390:	movt	r1, #1
   12394:	bl	10eb4 <dcgettext@plt>
   12398:	mov	r4, r0
   1239c:	movw	r0, #33112	; 0x8158
   123a0:	movt	r0, #2
   123a4:	ldr	r6, [r0]
   123a8:	bl	10fa4 <__errno_location@plt>
   123ac:	ldr	r5, [r0]
   123b0:	cmp	r6, #0
   123b4:	bne	123d0 <__assert_fail@plt+0x1348>
   123b8:	movw	r2, #29216	; 0x7220
   123bc:	mov	r0, #0
   123c0:	mov	r1, r5
   123c4:	mov	r3, r4
   123c8:	movt	r2, #1
   123cc:	b	123f0 <__assert_fail@plt+0x1368>
   123d0:	mov	r0, r6
   123d4:	bl	13ed8 <__assert_fail@plt+0x2e50>
   123d8:	movw	r2, #29212	; 0x721c
   123dc:	mov	r3, r0
   123e0:	str	r4, [sp]
   123e4:	mov	r0, #0
   123e8:	mov	r1, r5
   123ec:	movt	r2, #1
   123f0:	bl	10f20 <error@plt>
   123f4:	movw	r0, #33004	; 0x80ec
   123f8:	movt	r0, #2
   123fc:	ldr	r0, [r0]
   12400:	bl	10e84 <_exit@plt>
   12404:	b	10e54 <posix_fadvise64@plt>
   12408:	cmp	r0, #0
   1240c:	bxeq	lr
   12410:	push	{r4, sl, fp, lr}
   12414:	add	fp, sp, #8
   12418:	sub	sp, sp, #16
   1241c:	mov	r4, r1
   12420:	bl	10fd4 <fileno@plt>
   12424:	mov	r1, #0
   12428:	mov	r2, #0
   1242c:	mov	r3, #0
   12430:	str	r1, [sp]
   12434:	stmib	sp, {r1, r4}
   12438:	bl	10e54 <posix_fadvise64@plt>
   1243c:	sub	sp, fp, #8
   12440:	pop	{r4, sl, fp, pc}
   12444:	push	{r4, r5, r6, sl, fp, lr}
   12448:	add	fp, sp, #16
   1244c:	sub	sp, sp, #8
   12450:	mov	r4, r0
   12454:	bl	10fd4 <fileno@plt>
   12458:	cmn	r0, #1
   1245c:	ble	124d0 <__assert_fail@plt+0x1448>
   12460:	mov	r0, r4
   12464:	bl	10f44 <__freading@plt>
   12468:	cmp	r0, #0
   1246c:	beq	12498 <__assert_fail@plt+0x1410>
   12470:	mov	r0, r4
   12474:	bl	10fd4 <fileno@plt>
   12478:	mov	r1, #1
   1247c:	mov	r2, #0
   12480:	mov	r3, #0
   12484:	str	r1, [sp]
   12488:	bl	10ef0 <lseek64@plt>
   1248c:	and	r0, r0, r1
   12490:	cmn	r0, #1
   12494:	beq	124d0 <__assert_fail@plt+0x1448>
   12498:	mov	r0, r4
   1249c:	bl	124e0 <__assert_fail@plt+0x1458>
   124a0:	cmp	r0, #0
   124a4:	beq	124d0 <__assert_fail@plt+0x1448>
   124a8:	bl	10fa4 <__errno_location@plt>
   124ac:	ldr	r6, [r0]
   124b0:	mov	r5, r0
   124b4:	mov	r0, r4
   124b8:	bl	10ff8 <fclose@plt>
   124bc:	cmp	r6, #0
   124c0:	strne	r6, [r5]
   124c4:	mvnne	r0, #0
   124c8:	sub	sp, fp, #16
   124cc:	pop	{r4, r5, r6, sl, fp, pc}
   124d0:	mov	r0, r4
   124d4:	sub	sp, fp, #16
   124d8:	pop	{r4, r5, r6, sl, fp, lr}
   124dc:	b	10ff8 <fclose@plt>
   124e0:	push	{r4, sl, fp, lr}
   124e4:	add	fp, sp, #8
   124e8:	sub	sp, sp, #8
   124ec:	mov	r4, r0
   124f0:	cmp	r0, #0
   124f4:	beq	1252c <__assert_fail@plt+0x14a4>
   124f8:	mov	r0, r4
   124fc:	bl	10f44 <__freading@plt>
   12500:	cmp	r0, #0
   12504:	beq	1252c <__assert_fail@plt+0x14a4>
   12508:	ldrb	r0, [r4, #1]
   1250c:	tst	r0, #1
   12510:	beq	1252c <__assert_fail@plt+0x14a4>
   12514:	mov	r0, #1
   12518:	mov	r2, #0
   1251c:	mov	r3, #0
   12520:	str	r0, [sp]
   12524:	mov	r0, r4
   12528:	bl	12564 <__assert_fail@plt+0x14dc>
   1252c:	mov	r0, r4
   12530:	sub	sp, fp, #8
   12534:	pop	{r4, sl, fp, lr}
   12538:	b	10e60 <fflush@plt>
   1253c:	push	{r4, r5, r6, sl, fp, lr}
   12540:	add	fp, sp, #16
   12544:	mov	r4, r0
   12548:	bl	10fa4 <__errno_location@plt>
   1254c:	ldr	r6, [r0]
   12550:	mov	r5, r0
   12554:	mov	r0, r4
   12558:	bl	10e78 <free@plt>
   1255c:	str	r6, [r5]
   12560:	pop	{r4, r5, r6, sl, fp, pc}
   12564:	push	{r4, r5, r6, r7, fp, lr}
   12568:	add	fp, sp, #16
   1256c:	sub	sp, sp, #8
   12570:	mov	r4, r0
   12574:	ldr	r0, [r0, #4]
   12578:	mov	r5, r3
   1257c:	mov	r6, r2
   12580:	ldr	r1, [r4, #8]
   12584:	cmp	r1, r0
   12588:	bne	125a4 <__assert_fail@plt+0x151c>
   1258c:	ldrd	r0, [r4, #16]
   12590:	cmp	r1, r0
   12594:	bne	125a4 <__assert_fail@plt+0x151c>
   12598:	ldr	r0, [r4, #36]	; 0x24
   1259c:	cmp	r0, #0
   125a0:	beq	125bc <__assert_fail@plt+0x1534>
   125a4:	mov	r0, r4
   125a8:	mov	r2, r6
   125ac:	mov	r3, r5
   125b0:	sub	sp, fp, #16
   125b4:	pop	{r4, r5, r6, r7, fp, lr}
   125b8:	b	11004 <fseeko64@plt>
   125bc:	ldr	r7, [fp, #8]
   125c0:	mov	r0, r4
   125c4:	bl	10fd4 <fileno@plt>
   125c8:	mov	r2, r6
   125cc:	mov	r3, r5
   125d0:	str	r7, [sp]
   125d4:	bl	10ef0 <lseek64@plt>
   125d8:	and	r2, r0, r1
   125dc:	cmn	r2, #1
   125e0:	beq	12600 <__assert_fail@plt+0x1578>
   125e4:	strd	r0, [r4, #80]	; 0x50
   125e8:	ldr	r0, [r4]
   125ec:	bic	r0, r0, #16
   125f0:	str	r0, [r4]
   125f4:	mov	r0, #0
   125f8:	sub	sp, fp, #16
   125fc:	pop	{r4, r5, r6, r7, fp, pc}
   12600:	mvn	r0, #0
   12604:	sub	sp, fp, #16
   12608:	pop	{r4, r5, r6, r7, fp, pc}
   1260c:	push	{r4, r5, fp, lr}
   12610:	add	fp, sp, #8
   12614:	cmp	r0, #0
   12618:	beq	126ac <__assert_fail@plt+0x1624>
   1261c:	mov	r1, #47	; 0x2f
   12620:	mov	r4, r0
   12624:	bl	11028 <strrchr@plt>
   12628:	cmp	r0, #0
   1262c:	mov	r5, r4
   12630:	addne	r5, r0, #1
   12634:	sub	r0, r5, r4
   12638:	cmp	r0, #7
   1263c:	blt	12690 <__assert_fail@plt+0x1608>
   12640:	movw	r1, #30375	; 0x76a7
   12644:	sub	r0, r5, #7
   12648:	mov	r2, #7
   1264c:	movt	r1, #1
   12650:	bl	11070 <strncmp@plt>
   12654:	cmp	r0, #0
   12658:	bne	12690 <__assert_fail@plt+0x1608>
   1265c:	movw	r1, #30383	; 0x76af
   12660:	mov	r0, r5
   12664:	mov	r2, #3
   12668:	movt	r1, #1
   1266c:	bl	11070 <strncmp@plt>
   12670:	cmp	r0, #0
   12674:	beq	12680 <__assert_fail@plt+0x15f8>
   12678:	mov	r4, r5
   1267c:	b	12690 <__assert_fail@plt+0x1608>
   12680:	movw	r0, #33072	; 0x8130
   12684:	add	r4, r5, #3
   12688:	movt	r0, #2
   1268c:	str	r4, [r0]
   12690:	movw	r0, #33076	; 0x8134
   12694:	movt	r0, #2
   12698:	str	r4, [r0]
   1269c:	movw	r0, #33120	; 0x8160
   126a0:	movt	r0, #2
   126a4:	str	r4, [r0]
   126a8:	pop	{r4, r5, fp, pc}
   126ac:	movw	r0, #33088	; 0x8140
   126b0:	mov	r1, #55	; 0x37
   126b4:	mov	r2, #1
   126b8:	movt	r0, #2
   126bc:	ldr	r3, [r0]
   126c0:	movw	r0, #30319	; 0x766f
   126c4:	movt	r0, #1
   126c8:	bl	10ee4 <fwrite@plt>
   126cc:	bl	1107c <abort@plt>
   126d0:	push	{r4, r5, r6, sl, fp, lr}
   126d4:	add	fp, sp, #16
   126d8:	mov	r4, r0
   126dc:	movw	r0, #33128	; 0x8168
   126e0:	movt	r0, #2
   126e4:	cmp	r4, #0
   126e8:	moveq	r4, r0
   126ec:	bl	10fa4 <__errno_location@plt>
   126f0:	ldr	r6, [r0]
   126f4:	mov	r5, r0
   126f8:	mov	r0, r4
   126fc:	mov	r1, #48	; 0x30
   12700:	bl	14ec4 <__assert_fail@plt+0x3e3c>
   12704:	str	r6, [r5]
   12708:	pop	{r4, r5, r6, sl, fp, pc}
   1270c:	movw	r1, #33128	; 0x8168
   12710:	cmp	r0, #0
   12714:	movt	r1, #2
   12718:	movne	r1, r0
   1271c:	ldr	r0, [r1]
   12720:	bx	lr
   12724:	movw	r2, #33128	; 0x8168
   12728:	cmp	r0, #0
   1272c:	movt	r2, #2
   12730:	movne	r2, r0
   12734:	str	r1, [r2]
   12738:	bx	lr
   1273c:	movw	r3, #33128	; 0x8168
   12740:	cmp	r0, #0
   12744:	and	r2, r2, #1
   12748:	movt	r3, #2
   1274c:	movne	r3, r0
   12750:	ubfx	r0, r1, #5, #3
   12754:	and	r1, r1, #31
   12758:	add	ip, r3, r0, lsl #2
   1275c:	mov	r0, #1
   12760:	ldr	r3, [ip, #8]
   12764:	and	r0, r0, r3, lsr r1
   12768:	eor	r2, r0, r2
   1276c:	eor	r1, r3, r2, lsl r1
   12770:	str	r1, [ip, #8]
   12774:	bx	lr
   12778:	movw	r2, #33128	; 0x8168
   1277c:	cmp	r0, #0
   12780:	movt	r2, #2
   12784:	movne	r2, r0
   12788:	ldr	r0, [r2, #4]
   1278c:	str	r1, [r2, #4]
   12790:	bx	lr
   12794:	push	{fp, lr}
   12798:	mov	fp, sp
   1279c:	movw	r3, #33128	; 0x8168
   127a0:	cmp	r0, #0
   127a4:	movt	r3, #2
   127a8:	movne	r3, r0
   127ac:	cmp	r1, #0
   127b0:	mov	r0, #10
   127b4:	cmpne	r2, #0
   127b8:	str	r0, [r3]
   127bc:	bne	127c4 <__assert_fail@plt+0x173c>
   127c0:	bl	1107c <abort@plt>
   127c4:	str	r1, [r3, #40]	; 0x28
   127c8:	str	r2, [r3, #44]	; 0x2c
   127cc:	pop	{fp, pc}
   127d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127d4:	add	fp, sp, #28
   127d8:	sub	sp, sp, #20
   127dc:	mov	r7, r0
   127e0:	ldr	r0, [fp, #8]
   127e4:	movw	r5, #33128	; 0x8168
   127e8:	mov	r8, r3
   127ec:	mov	r9, r2
   127f0:	mov	sl, r1
   127f4:	movt	r5, #2
   127f8:	cmp	r0, #0
   127fc:	movne	r5, r0
   12800:	bl	10fa4 <__errno_location@plt>
   12804:	ldr	r2, [r5, #40]	; 0x28
   12808:	ldr	r3, [r5, #44]	; 0x2c
   1280c:	mov	r4, r0
   12810:	ldm	r5, {r0, r1}
   12814:	add	r5, r5, #8
   12818:	ldr	r6, [r4]
   1281c:	stm	sp, {r0, r1, r5}
   12820:	mov	r0, r7
   12824:	mov	r1, sl
   12828:	str	r2, [sp, #12]
   1282c:	str	r3, [sp, #16]
   12830:	mov	r2, r9
   12834:	mov	r3, r8
   12838:	bl	12848 <__assert_fail@plt+0x17c0>
   1283c:	str	r6, [r4]
   12840:	sub	sp, fp, #28
   12844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1284c:	add	fp, sp, #28
   12850:	sub	sp, sp, #156	; 0x9c
   12854:	mov	r5, r0
   12858:	add	r0, r2, #1
   1285c:	mov	r6, r1
   12860:	mov	sl, r3
   12864:	str	r2, [fp, #-80]	; 0xffffffb0
   12868:	str	r0, [sp, #72]	; 0x48
   1286c:	ldr	r0, [fp, #12]
   12870:	and	r1, r0, #1
   12874:	str	r1, [sp, #36]	; 0x24
   12878:	and	r1, r0, #4
   1287c:	str	r1, [sp, #32]
   12880:	ubfx	r9, r0, #1, #1
   12884:	bl	10efc <__ctype_get_mb_cur_max@plt>
   12888:	str	r0, [sp, #40]	; 0x28
   1288c:	ldr	r0, [fp, #24]
   12890:	ldr	r7, [fp, #8]
   12894:	mov	r1, #0
   12898:	str	r5, [fp, #-84]	; 0xffffffac
   1289c:	str	r1, [fp, #-56]	; 0xffffffc8
   128a0:	mov	r1, #0
   128a4:	str	r1, [sp, #60]	; 0x3c
   128a8:	mov	r1, #1
   128ac:	str	r1, [fp, #-48]	; 0xffffffd0
   128b0:	str	r0, [sp, #80]	; 0x50
   128b4:	ldr	r0, [fp, #20]
   128b8:	str	r0, [sp, #76]	; 0x4c
   128bc:	mov	r0, #0
   128c0:	str	r0, [sp, #56]	; 0x38
   128c4:	mov	r0, #0
   128c8:	str	r0, [fp, #-88]	; 0xffffffa8
   128cc:	mov	r0, #0
   128d0:	str	r0, [fp, #-72]	; 0xffffffb8
   128d4:	mov	r0, #0
   128d8:	cmp	r7, #10
   128dc:	bhi	13870 <__assert_fail@plt+0x27e8>
   128e0:	add	r1, pc, #24
   128e4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   128e8:	mov	r4, r6
   128ec:	mov	r8, #0
   128f0:	mov	r2, #1
   128f4:	mov	r3, #0
   128f8:	mov	lr, sl
   128fc:	ldr	pc, [r1, r7, lsl #2]
   12900:	andeq	r2, r1, r4, asr #19
   12904:	andeq	r2, r1, r8, lsl sl
   12908:	ldrdeq	r2, [r1], -r8
   1290c:			; <UNDEFINED> instruction: 0x000129bc
   12910:	andeq	r2, r1, ip, lsl #20
   12914:	andeq	r2, r1, r0, asr #20
   12918:	andeq	r2, r1, r8, ror #19
   1291c:	andeq	r2, r1, r4, asr #21
   12920:	andeq	r2, r1, ip, lsr #18
   12924:	andeq	r2, r1, ip, lsr #18
   12928:	andeq	r2, r1, r4, asr r9
   1292c:	movw	r0, #30465	; 0x7701
   12930:	mov	r1, r7
   12934:	movt	r0, #1
   12938:	bl	14278 <__assert_fail@plt+0x31f0>
   1293c:	str	r0, [sp, #76]	; 0x4c
   12940:	movw	r0, #30467	; 0x7703
   12944:	mov	r1, r7
   12948:	movt	r0, #1
   1294c:	bl	14278 <__assert_fail@plt+0x31f0>
   12950:	str	r0, [sp, #80]	; 0x50
   12954:	mov	r8, #0
   12958:	tst	r9, #1
   1295c:	bne	12994 <__assert_fail@plt+0x190c>
   12960:	ldr	r0, [sp, #76]	; 0x4c
   12964:	ldrb	r0, [r0]
   12968:	cmp	r0, #0
   1296c:	beq	12994 <__assert_fail@plt+0x190c>
   12970:	ldr	r1, [sp, #76]	; 0x4c
   12974:	mov	r8, #0
   12978:	add	r1, r1, #1
   1297c:	cmp	r8, r4
   12980:	strbcc	r0, [r5, r8]
   12984:	ldrb	r0, [r1, r8]
   12988:	add	r8, r8, #1
   1298c:	cmp	r0, #0
   12990:	bne	1297c <__assert_fail@plt+0x18f4>
   12994:	ldr	r6, [sp, #80]	; 0x50
   12998:	mov	r0, r6
   1299c:	bl	10f8c <strlen@plt>
   129a0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   129a4:	str	r0, [fp, #-72]	; 0xffffffb8
   129a8:	str	r6, [fp, #-88]	; 0xffffffa8
   129ac:	mov	r2, #1
   129b0:	mov	r3, r9
   129b4:	mov	lr, sl
   129b8:	b	12ac4 <__assert_fail@plt+0x1a3c>
   129bc:	mov	r0, #1
   129c0:	b	12a18 <__assert_fail@plt+0x1990>
   129c4:	mov	r7, #0
   129c8:	mov	r8, #0
   129cc:	mov	r2, r0
   129d0:	mov	r3, #0
   129d4:	b	12ac4 <__assert_fail@plt+0x1a3c>
   129d8:	tst	r9, #1
   129dc:	bne	12a18 <__assert_fail@plt+0x1990>
   129e0:	mov	r2, r0
   129e4:	b	12a70 <__assert_fail@plt+0x19e8>
   129e8:	mov	r0, #1
   129ec:	mov	r8, #0
   129f0:	mov	r7, #5
   129f4:	mov	r2, #1
   129f8:	str	r0, [fp, #-72]	; 0xffffffb8
   129fc:	movw	r0, #30463	; 0x76ff
   12a00:	movt	r0, #1
   12a04:	str	r0, [fp, #-88]	; 0xffffffa8
   12a08:	b	12a38 <__assert_fail@plt+0x19b0>
   12a0c:	mov	r2, #1
   12a10:	tst	r9, #1
   12a14:	beq	12a70 <__assert_fail@plt+0x19e8>
   12a18:	mov	r1, #1
   12a1c:	mov	r8, #0
   12a20:	mov	r7, #2
   12a24:	mov	r2, r0
   12a28:	str	r1, [fp, #-72]	; 0xffffffb8
   12a2c:	movw	r1, #30467	; 0x7703
   12a30:	movt	r1, #1
   12a34:	str	r1, [fp, #-88]	; 0xffffffa8
   12a38:	mov	r3, #1
   12a3c:	b	12ac4 <__assert_fail@plt+0x1a3c>
   12a40:	tst	r9, #1
   12a44:	beq	12a94 <__assert_fail@plt+0x1a0c>
   12a48:	mov	r0, #1
   12a4c:	mov	r8, #0
   12a50:	mov	r2, #1
   12a54:	mov	r3, #1
   12a58:	mov	r7, #5
   12a5c:	str	r0, [fp, #-72]	; 0xffffffb8
   12a60:	movw	r0, #30463	; 0x76ff
   12a64:	movt	r0, #1
   12a68:	str	r0, [fp, #-88]	; 0xffffffa8
   12a6c:	b	12ac4 <__assert_fail@plt+0x1a3c>
   12a70:	cmp	r4, #0
   12a74:	mov	r8, #1
   12a78:	mov	r3, #0
   12a7c:	mov	r7, #2
   12a80:	movne	r0, #39	; 0x27
   12a84:	strbne	r0, [r5]
   12a88:	movw	r0, #30467	; 0x7703
   12a8c:	movt	r0, #1
   12a90:	b	12ab8 <__assert_fail@plt+0x1a30>
   12a94:	cmp	r4, #0
   12a98:	mov	r8, #1
   12a9c:	mov	r2, #1
   12aa0:	mov	r7, #5
   12aa4:	mov	r3, #0
   12aa8:	movne	r0, #34	; 0x22
   12aac:	strbne	r0, [r5]
   12ab0:	movw	r0, #30463	; 0x76ff
   12ab4:	movt	r0, #1
   12ab8:	str	r0, [fp, #-88]	; 0xffffffa8
   12abc:	mov	r0, #1
   12ac0:	str	r0, [fp, #-72]	; 0xffffffb8
   12ac4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ac8:	eor	r6, r3, #1
   12acc:	str	r7, [fp, #-68]	; 0xffffffbc
   12ad0:	str	r3, [fp, #-76]	; 0xffffffb4
   12ad4:	str	r2, [sp, #84]	; 0x54
   12ad8:	str	r6, [sp, #92]	; 0x5c
   12adc:	cmp	r0, #0
   12ae0:	movwne	r0, #1
   12ae4:	and	r1, r0, r3
   12ae8:	and	r1, r2, r1
   12aec:	str	r1, [sp, #48]	; 0x30
   12af0:	sub	r1, r7, #2
   12af4:	clz	r1, r1
   12af8:	lsr	r1, r1, #5
   12afc:	and	r1, r1, r3
   12b00:	str	r1, [sp, #64]	; 0x40
   12b04:	subs	r1, r7, #2
   12b08:	mov	r7, #0
   12b0c:	movwne	r1, #1
   12b10:	orr	r6, r1, r6
   12b14:	and	r1, r1, r2
   12b18:	and	r0, r0, r1
   12b1c:	str	r6, [sp, #68]	; 0x44
   12b20:	str	r0, [fp, #-60]	; 0xffffffc4
   12b24:	orr	r0, r1, r3
   12b28:	ldr	r1, [fp, #16]
   12b2c:	eor	r0, r0, #1
   12b30:	clz	r1, r1
   12b34:	lsr	r1, r1, #5
   12b38:	orr	r0, r1, r0
   12b3c:	str	r0, [fp, #-64]	; 0xffffffc0
   12b40:	eor	r0, r2, #1
   12b44:	str	r0, [sp, #52]	; 0x34
   12b48:	cmn	lr, #1
   12b4c:	beq	12b5c <__assert_fail@plt+0x1ad4>
   12b50:	cmp	r7, lr
   12b54:	bne	12b68 <__assert_fail@plt+0x1ae0>
   12b58:	b	136b0 <__assert_fail@plt+0x2628>
   12b5c:	ldrb	r0, [ip, r7]
   12b60:	cmp	r0, #0
   12b64:	beq	136b8 <__assert_fail@plt+0x2630>
   12b68:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12b6c:	mov	sl, #0
   12b70:	cmp	r0, #0
   12b74:	beq	12bac <__assert_fail@plt+0x1b24>
   12b78:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12b7c:	add	r5, r7, r0
   12b80:	cmp	r0, #2
   12b84:	bcc	12ba0 <__assert_fail@plt+0x1b18>
   12b88:	cmn	lr, #1
   12b8c:	bne	12ba0 <__assert_fail@plt+0x1b18>
   12b90:	mov	r0, ip
   12b94:	bl	10f8c <strlen@plt>
   12b98:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12b9c:	mov	lr, r0
   12ba0:	cmp	r5, lr
   12ba4:	bls	12bb4 <__assert_fail@plt+0x1b2c>
   12ba8:	ldr	r5, [fp, #-84]	; 0xffffffac
   12bac:	mov	r0, #0
   12bb0:	b	12c00 <__assert_fail@plt+0x1b78>
   12bb4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12bb8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12bbc:	add	r0, ip, r7
   12bc0:	mov	r6, r4
   12bc4:	mov	r4, lr
   12bc8:	bl	10f80 <bcmp@plt>
   12bcc:	ldr	r2, [sp, #92]	; 0x5c
   12bd0:	cmp	r0, #0
   12bd4:	ldr	r5, [fp, #-84]	; 0xffffffac
   12bd8:	mov	r1, r0
   12bdc:	movwne	r1, #1
   12be0:	orr	r1, r1, r2
   12be4:	tst	r1, #1
   12be8:	beq	13740 <__assert_fail@plt+0x26b8>
   12bec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12bf0:	clz	r0, r0
   12bf4:	mov	lr, r4
   12bf8:	mov	r4, r6
   12bfc:	lsr	r0, r0, #5
   12c00:	str	r0, [fp, #-52]	; 0xffffffcc
   12c04:	ldrb	r6, [ip, r7]
   12c08:	cmp	r6, #126	; 0x7e
   12c0c:	bhi	1313c <__assert_fail@plt+0x20b4>
   12c10:	add	r3, pc, #16
   12c14:	mov	r9, #1
   12c18:	mov	r2, #110	; 0x6e
   12c1c:	mov	r0, #97	; 0x61
   12c20:	mov	r1, #0
   12c24:	ldr	pc, [r3, r6, lsl #2]
   12c28:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12c2c:	andeq	r3, r1, ip, lsr r1
   12c30:	andeq	r3, r1, ip, lsr r1
   12c34:	andeq	r3, r1, ip, lsr r1
   12c38:	andeq	r3, r1, ip, lsr r1
   12c3c:	andeq	r3, r1, ip, lsr r1
   12c40:	andeq	r3, r1, ip, lsr r1
   12c44:	andeq	r3, r1, r8, lsl r2
   12c48:	andeq	r2, r1, ip, ror pc
   12c4c:	andeq	r2, r1, r4, ror pc
   12c50:	andeq	r2, r1, r8, lsl #31
   12c54:	andeq	r3, r1, r4, lsr #1
   12c58:	andeq	r2, r1, ip, ror #30
   12c5c:	andeq	r2, r1, r4, lsl #31
   12c60:	andeq	r3, r1, ip, lsr r1
   12c64:	andeq	r3, r1, ip, lsr r1
   12c68:	andeq	r3, r1, ip, lsr r1
   12c6c:	andeq	r3, r1, ip, lsr r1
   12c70:	andeq	r3, r1, ip, lsr r1
   12c74:	andeq	r3, r1, ip, lsr r1
   12c78:	andeq	r3, r1, ip, lsr r1
   12c7c:	andeq	r3, r1, ip, lsr r1
   12c80:	andeq	r3, r1, ip, lsr r1
   12c84:	andeq	r3, r1, ip, lsr r1
   12c88:	andeq	r3, r1, ip, lsr r1
   12c8c:	andeq	r3, r1, ip, lsr r1
   12c90:	andeq	r3, r1, ip, lsr r1
   12c94:	andeq	r3, r1, ip, lsr r1
   12c98:	andeq	r3, r1, ip, lsr r1
   12c9c:	andeq	r3, r1, ip, lsr r1
   12ca0:	andeq	r3, r1, ip, lsr r1
   12ca4:	andeq	r3, r1, ip, lsr r1
   12ca8:	andeq	r2, r1, r0, lsr #30
   12cac:	andeq	r2, r1, r4, lsr #30
   12cb0:	andeq	r2, r1, r4, lsr #30
   12cb4:	andeq	r2, r1, ip, lsl #30
   12cb8:	andeq	r2, r1, r4, lsr #30
   12cbc:	andeq	r2, r1, r4, lsr #28
   12cc0:	andeq	r2, r1, r4, lsr #30
   12cc4:	andeq	r3, r1, ip, lsr #1
   12cc8:	andeq	r2, r1, r4, lsr #30
   12ccc:	andeq	r2, r1, r4, lsr #30
   12cd0:	andeq	r2, r1, r4, lsr #30
   12cd4:	andeq	r2, r1, r4, lsr #28
   12cd8:	andeq	r2, r1, r4, lsr #28
   12cdc:	andeq	r2, r1, r4, lsr #28
   12ce0:	andeq	r2, r1, r4, lsr #28
   12ce4:	andeq	r2, r1, r4, lsr #28
   12ce8:	andeq	r2, r1, r4, lsr #28
   12cec:	andeq	r2, r1, r4, lsr #28
   12cf0:	andeq	r2, r1, r4, lsr #28
   12cf4:	andeq	r2, r1, r4, lsr #28
   12cf8:	andeq	r2, r1, r4, lsr #28
   12cfc:	andeq	r2, r1, r4, lsr #28
   12d00:	andeq	r2, r1, r4, lsr #28
   12d04:	andeq	r2, r1, r4, lsr #28
   12d08:	andeq	r2, r1, r4, lsr #28
   12d0c:	andeq	r2, r1, r4, lsr #28
   12d10:	andeq	r2, r1, r4, lsr #28
   12d14:	andeq	r2, r1, r4, lsr #30
   12d18:	andeq	r2, r1, r4, lsr #30
   12d1c:	andeq	r2, r1, r4, lsr #30
   12d20:	andeq	r2, r1, r4, lsr #30
   12d24:	andeq	r3, r1, r4, ror r0
   12d28:	andeq	r3, r1, ip, lsr r1
   12d2c:	andeq	r2, r1, r4, lsr #28
   12d30:	andeq	r2, r1, r4, lsr #28
   12d34:	andeq	r2, r1, r4, lsr #28
   12d38:	andeq	r2, r1, r4, lsr #28
   12d3c:	andeq	r2, r1, r4, lsr #28
   12d40:	andeq	r2, r1, r4, lsr #28
   12d44:	andeq	r2, r1, r4, lsr #28
   12d48:	andeq	r2, r1, r4, lsr #28
   12d4c:	andeq	r2, r1, r4, lsr #28
   12d50:	andeq	r2, r1, r4, lsr #28
   12d54:	andeq	r2, r1, r4, lsr #28
   12d58:	andeq	r2, r1, r4, lsr #28
   12d5c:	andeq	r2, r1, r4, lsr #28
   12d60:	andeq	r2, r1, r4, lsr #28
   12d64:	andeq	r2, r1, r4, lsr #28
   12d68:	andeq	r2, r1, r4, lsr #28
   12d6c:	andeq	r2, r1, r4, lsr #28
   12d70:	andeq	r2, r1, r4, lsr #28
   12d74:	andeq	r2, r1, r4, lsr #28
   12d78:	andeq	r2, r1, r4, lsr #28
   12d7c:	andeq	r2, r1, r4, lsr #28
   12d80:	andeq	r2, r1, r4, lsr #28
   12d84:	andeq	r2, r1, r4, lsr #28
   12d88:	andeq	r2, r1, r4, lsr #28
   12d8c:	andeq	r2, r1, r4, lsr #28
   12d90:	andeq	r2, r1, r4, lsr #28
   12d94:	andeq	r2, r1, r4, lsr #30
   12d98:	andeq	r2, r1, ip, asr #30
   12d9c:	andeq	r2, r1, r4, lsr #28
   12da0:	andeq	r2, r1, r4, lsr #30
   12da4:	andeq	r2, r1, r4, lsr #28
   12da8:	andeq	r2, r1, r4, lsr #30
   12dac:	andeq	r2, r1, r4, lsr #28
   12db0:	andeq	r2, r1, r4, lsr #28
   12db4:	andeq	r2, r1, r4, lsr #28
   12db8:	andeq	r2, r1, r4, lsr #28
   12dbc:	andeq	r2, r1, r4, lsr #28
   12dc0:	andeq	r2, r1, r4, lsr #28
   12dc4:	andeq	r2, r1, r4, lsr #28
   12dc8:	andeq	r2, r1, r4, lsr #28
   12dcc:	andeq	r2, r1, r4, lsr #28
   12dd0:	andeq	r2, r1, r4, lsr #28
   12dd4:	andeq	r2, r1, r4, lsr #28
   12dd8:	andeq	r2, r1, r4, lsr #28
   12ddc:	andeq	r2, r1, r4, lsr #28
   12de0:	andeq	r2, r1, r4, lsr #28
   12de4:	andeq	r2, r1, r4, lsr #28
   12de8:	andeq	r2, r1, r4, lsr #28
   12dec:	andeq	r2, r1, r4, lsr #28
   12df0:	andeq	r2, r1, r4, lsr #28
   12df4:	andeq	r2, r1, r4, lsr #28
   12df8:	andeq	r2, r1, r4, lsr #28
   12dfc:	andeq	r2, r1, r4, lsr #28
   12e00:	andeq	r2, r1, r4, lsr #28
   12e04:	andeq	r2, r1, r4, lsr #28
   12e08:	andeq	r2, r1, r4, lsr #28
   12e0c:	andeq	r2, r1, r4, lsr #28
   12e10:	andeq	r2, r1, r4, lsr #28
   12e14:	andeq	r2, r1, r0, ror #29
   12e18:	andeq	r2, r1, r4, lsr #30
   12e1c:	andeq	r2, r1, r0, ror #29
   12e20:	andeq	r2, r1, ip, lsl #30
   12e24:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12e28:	tst	r0, #1
   12e2c:	bne	12e58 <__assert_fail@plt+0x1dd0>
   12e30:	ldr	r1, [fp, #16]
   12e34:	ubfx	r0, r6, #5, #3
   12e38:	mov	r2, #1
   12e3c:	ldr	r0, [r1, r0, lsl #2]
   12e40:	and	r1, r6, #31
   12e44:	tst	r0, r2, lsl r1
   12e48:	beq	12e58 <__assert_fail@plt+0x1dd0>
   12e4c:	mov	r0, r6
   12e50:	mov	r1, r9
   12e54:	b	12e6c <__assert_fail@plt+0x1de4>
   12e58:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12e5c:	mov	r1, r9
   12e60:	cmp	r0, #0
   12e64:	mov	r0, r6
   12e68:	beq	131ac <__assert_fail@plt+0x2124>
   12e6c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12e70:	tst	r2, #1
   12e74:	bne	1377c <__assert_fail@plt+0x26f4>
   12e78:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12e7c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12e80:	subs	r2, r2, #2
   12e84:	movwne	r2, #1
   12e88:	orr	r2, r2, r3
   12e8c:	tst	r2, #1
   12e90:	bne	12ecc <__assert_fail@plt+0x1e44>
   12e94:	cmp	r8, r4
   12e98:	movcc	r2, #39	; 0x27
   12e9c:	strbcc	r2, [r5, r8]
   12ea0:	add	r2, r8, #1
   12ea4:	cmp	r2, r4
   12ea8:	movcc	r3, #36	; 0x24
   12eac:	strbcc	r3, [r5, r2]
   12eb0:	add	r2, r8, #2
   12eb4:	add	r8, r8, #3
   12eb8:	cmp	r2, r4
   12ebc:	movcc	r3, #39	; 0x27
   12ec0:	strbcc	r3, [r5, r2]
   12ec4:	mov	r2, #1
   12ec8:	str	r2, [fp, #-56]	; 0xffffffc8
   12ecc:	cmp	r8, r4
   12ed0:	movcc	r2, #92	; 0x5c
   12ed4:	strbcc	r2, [r5, r8]
   12ed8:	add	r8, r8, #1
   12edc:	b	131f0 <__assert_fail@plt+0x2168>
   12ee0:	cmp	lr, #1
   12ee4:	beq	12f0c <__assert_fail@plt+0x1e84>
   12ee8:	mov	r9, #0
   12eec:	cmn	lr, #1
   12ef0:	bne	12f18 <__assert_fail@plt+0x1e90>
   12ef4:	ldrb	r0, [ip, #1]
   12ef8:	cmp	r0, #0
   12efc:	beq	12f0c <__assert_fail@plt+0x1e84>
   12f00:	mvn	lr, #0
   12f04:	mov	sl, #0
   12f08:	b	12e24 <__assert_fail@plt+0x1d9c>
   12f0c:	mov	r9, #0
   12f10:	cmp	r7, #0
   12f14:	beq	12f20 <__assert_fail@plt+0x1e98>
   12f18:	mov	sl, #0
   12f1c:	b	12e24 <__assert_fail@plt+0x1d9c>
   12f20:	mov	r1, #1
   12f24:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f28:	cmp	r0, #2
   12f2c:	bne	12f44 <__assert_fail@plt+0x1ebc>
   12f30:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12f34:	mov	r9, r1
   12f38:	tst	r0, #1
   12f3c:	beq	12e24 <__assert_fail@plt+0x1d9c>
   12f40:	b	1377c <__assert_fail@plt+0x26f4>
   12f44:	mov	r9, r1
   12f48:	b	12e24 <__assert_fail@plt+0x1d9c>
   12f4c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f50:	cmp	r0, #2
   12f54:	bne	13190 <__assert_fail@plt+0x2108>
   12f58:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12f5c:	tst	r0, #1
   12f60:	bne	1377c <__assert_fail@plt+0x26f4>
   12f64:	mov	sl, #0
   12f68:	b	131a4 <__assert_fail@plt+0x211c>
   12f6c:	mov	r0, #102	; 0x66
   12f70:	b	13218 <__assert_fail@plt+0x2190>
   12f74:	mov	r2, #116	; 0x74
   12f78:	b	12f88 <__assert_fail@plt+0x1f00>
   12f7c:	mov	r0, #98	; 0x62
   12f80:	b	13218 <__assert_fail@plt+0x2190>
   12f84:	mov	r2, #114	; 0x72
   12f88:	ldr	r0, [sp, #68]	; 0x44
   12f8c:	tst	r0, #1
   12f90:	mov	r0, r2
   12f94:	bne	13218 <__assert_fail@plt+0x2190>
   12f98:	b	1377c <__assert_fail@plt+0x26f4>
   12f9c:	ldr	r0, [sp, #84]	; 0x54
   12fa0:	tst	r0, #1
   12fa4:	beq	13234 <__assert_fail@plt+0x21ac>
   12fa8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12fac:	tst	r0, #1
   12fb0:	bne	13868 <__assert_fail@plt+0x27e0>
   12fb4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12fb8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12fbc:	subs	r0, r0, #2
   12fc0:	movwne	r0, #1
   12fc4:	orr	r0, r0, r1
   12fc8:	tst	r0, #1
   12fcc:	bne	13008 <__assert_fail@plt+0x1f80>
   12fd0:	cmp	r8, r4
   12fd4:	movcc	r0, #39	; 0x27
   12fd8:	strbcc	r0, [r5, r8]
   12fdc:	add	r0, r8, #1
   12fe0:	cmp	r0, r4
   12fe4:	movcc	r1, #36	; 0x24
   12fe8:	strbcc	r1, [r5, r0]
   12fec:	add	r0, r8, #2
   12ff0:	add	r8, r8, #3
   12ff4:	cmp	r0, r4
   12ff8:	movcc	r1, #39	; 0x27
   12ffc:	strbcc	r1, [r5, r0]
   13000:	mov	r0, #1
   13004:	str	r0, [fp, #-56]	; 0xffffffc8
   13008:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1300c:	cmp	r8, r4
   13010:	mov	r9, #0
   13014:	mov	sl, #1
   13018:	mov	r6, #48	; 0x30
   1301c:	movcc	r0, #92	; 0x5c
   13020:	strbcc	r0, [r5, r8]
   13024:	add	r0, r8, #1
   13028:	cmp	r1, #2
   1302c:	beq	133fc <__assert_fail@plt+0x2374>
   13030:	add	r1, r7, #1
   13034:	cmp	r1, lr
   13038:	bcs	133fc <__assert_fail@plt+0x2374>
   1303c:	ldrb	r1, [ip, r1]
   13040:	sub	r1, r1, #48	; 0x30
   13044:	uxtb	r1, r1
   13048:	cmp	r1, #9
   1304c:	bhi	133fc <__assert_fail@plt+0x2374>
   13050:	cmp	r0, r4
   13054:	movcc	r1, #48	; 0x30
   13058:	strbcc	r1, [r5, r0]
   1305c:	add	r0, r8, #2
   13060:	add	r8, r8, #3
   13064:	cmp	r0, r4
   13068:	movcc	r1, #48	; 0x30
   1306c:	strbcc	r1, [r5, r0]
   13070:	b	12e24 <__assert_fail@plt+0x1d9c>
   13074:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13078:	mov	sl, #0
   1307c:	mov	r6, #63	; 0x3f
   13080:	cmp	r0, #5
   13084:	beq	13404 <__assert_fail@plt+0x237c>
   13088:	cmp	r0, #2
   1308c:	bne	134ac <__assert_fail@plt+0x2424>
   13090:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13094:	mov	r9, #0
   13098:	tst	r0, #1
   1309c:	beq	12e24 <__assert_fail@plt+0x1d9c>
   130a0:	b	1377c <__assert_fail@plt+0x26f4>
   130a4:	mov	r0, #118	; 0x76
   130a8:	b	13218 <__assert_fail@plt+0x2190>
   130ac:	mov	r0, #1
   130b0:	mov	r6, #39	; 0x27
   130b4:	str	r0, [sp, #60]	; 0x3c
   130b8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   130bc:	cmp	r0, #2
   130c0:	bne	13250 <__assert_fail@plt+0x21c8>
   130c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   130c8:	tst	r0, #1
   130cc:	bne	1377c <__assert_fail@plt+0x26f4>
   130d0:	ldr	r2, [sp, #56]	; 0x38
   130d4:	clz	r1, r4
   130d8:	mov	sl, #0
   130dc:	mov	r9, #1
   130e0:	lsr	r1, r1, #5
   130e4:	cmp	r2, #0
   130e8:	mov	r0, r2
   130ec:	movwne	r0, #1
   130f0:	orrs	r0, r0, r1
   130f4:	moveq	r2, r4
   130f8:	moveq	r4, r0
   130fc:	cmp	r8, r4
   13100:	str	r2, [sp, #56]	; 0x38
   13104:	movcc	r0, #39	; 0x27
   13108:	strbcc	r0, [r5, r8]
   1310c:	add	r0, r8, #1
   13110:	cmp	r0, r4
   13114:	movcc	r1, #92	; 0x5c
   13118:	strbcc	r1, [r5, r0]
   1311c:	add	r0, r8, #2
   13120:	add	r8, r8, #3
   13124:	cmp	r0, r4
   13128:	movcc	r1, #39	; 0x27
   1312c:	strbcc	r1, [r5, r0]
   13130:	mov	r0, #0
   13134:	str	r0, [fp, #-56]	; 0xffffffc8
   13138:	b	12e24 <__assert_fail@plt+0x1d9c>
   1313c:	ldr	r0, [sp, #40]	; 0x28
   13140:	str	r4, [sp, #88]	; 0x58
   13144:	cmp	r0, #1
   13148:	bne	13258 <__assert_fail@plt+0x21d0>
   1314c:	str	lr, [sp, #28]
   13150:	bl	10f68 <__ctype_b_loc@plt>
   13154:	ldr	r0, [r0]
   13158:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1315c:	mov	r2, #1
   13160:	add	r0, r0, r6, lsl #1
   13164:	ldrb	r0, [r0, #1]
   13168:	ubfx	r9, r0, #6, #1
   1316c:	ldr	r0, [sp, #52]	; 0x34
   13170:	cmp	r2, #1
   13174:	orr	r0, r9, r0
   13178:	bhi	134b4 <__assert_fail@plt+0x242c>
   1317c:	tst	r0, #1
   13180:	beq	134b4 <__assert_fail@plt+0x242c>
   13184:	ldr	lr, [sp, #28]
   13188:	ldr	r4, [sp, #88]	; 0x58
   1318c:	b	12e24 <__assert_fail@plt+0x1d9c>
   13190:	ldr	r1, [sp, #48]	; 0x30
   13194:	mov	sl, #0
   13198:	mov	r0, #92	; 0x5c
   1319c:	cmp	r1, #0
   131a0:	beq	13218 <__assert_fail@plt+0x2190>
   131a4:	mov	r6, #92	; 0x5c
   131a8:	mov	r9, #0
   131ac:	cmp	sl, #0
   131b0:	bne	131e8 <__assert_fail@plt+0x2160>
   131b4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   131b8:	tst	r0, #1
   131bc:	beq	131e8 <__assert_fail@plt+0x2160>
   131c0:	cmp	r8, r4
   131c4:	movcc	r0, #39	; 0x27
   131c8:	strbcc	r0, [r5, r8]
   131cc:	add	r0, r8, #1
   131d0:	add	r8, r8, #2
   131d4:	cmp	r0, r4
   131d8:	movcc	r1, #39	; 0x27
   131dc:	strbcc	r1, [r5, r0]
   131e0:	mov	r0, #0
   131e4:	str	r0, [fp, #-56]	; 0xffffffc8
   131e8:	mov	r1, r9
   131ec:	mov	r0, r6
   131f0:	cmp	r8, r4
   131f4:	strbcc	r0, [r5, r8]
   131f8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   131fc:	add	r8, r8, #1
   13200:	and	r0, r0, r1
   13204:	str	r0, [fp, #-48]	; 0xffffffd0
   13208:	add	r7, r7, #1
   1320c:	cmn	lr, #1
   13210:	bne	12b50 <__assert_fail@plt+0x1ac8>
   13214:	b	12b5c <__assert_fail@plt+0x1ad4>
   13218:	ldr	r1, [sp, #84]	; 0x54
   1321c:	mov	sl, #0
   13220:	mov	r9, #0
   13224:	tst	r1, #1
   13228:	mov	r1, #0
   1322c:	beq	12e24 <__assert_fail@plt+0x1d9c>
   13230:	b	12e6c <__assert_fail@plt+0x1de4>
   13234:	ldr	r0, [sp, #36]	; 0x24
   13238:	mov	r6, #0
   1323c:	mov	sl, #0
   13240:	mov	r9, #0
   13244:	cmp	r0, #0
   13248:	beq	12e24 <__assert_fail@plt+0x1d9c>
   1324c:	b	13208 <__assert_fail@plt+0x2180>
   13250:	mov	r9, #1
   13254:	b	12e24 <__assert_fail@plt+0x1d9c>
   13258:	mov	r0, #0
   1325c:	cmn	lr, #1
   13260:	sub	r4, fp, #40	; 0x28
   13264:	str	r0, [fp, #-36]	; 0xffffffdc
   13268:	str	r0, [fp, #-40]	; 0xffffffd8
   1326c:	bne	13280 <__assert_fail@plt+0x21f8>
   13270:	mov	r0, ip
   13274:	bl	10f8c <strlen@plt>
   13278:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1327c:	mov	lr, r0
   13280:	ldr	r0, [sp, #72]	; 0x48
   13284:	mov	r9, #1
   13288:	mov	r2, #0
   1328c:	str	lr, [sp, #28]
   13290:	add	r0, r0, r7
   13294:	str	r0, [sp, #20]
   13298:	b	132dc <__assert_fail@plt+0x2254>
   1329c:	ldr	r5, [sp, #44]	; 0x2c
   132a0:	add	r5, r0, r5
   132a4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   132a8:	bl	10ed8 <iswprint@plt>
   132ac:	cmp	r0, #0
   132b0:	sub	r4, fp, #40	; 0x28
   132b4:	movwne	r0, #1
   132b8:	and	r9, r9, r0
   132bc:	mov	r0, r4
   132c0:	bl	10e9c <mbsinit@plt>
   132c4:	mov	r2, r5
   132c8:	ldr	lr, [sp, #28]
   132cc:	ldr	r5, [fp, #-84]	; 0xffffffac
   132d0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   132d4:	cmp	r0, #0
   132d8:	bne	1316c <__assert_fail@plt+0x20e4>
   132dc:	add	r0, r2, r7
   132e0:	str	r2, [sp, #44]	; 0x2c
   132e4:	mov	r3, r4
   132e8:	add	r1, ip, r0
   132ec:	str	r0, [sp, #24]
   132f0:	sub	r2, lr, r0
   132f4:	sub	r0, fp, #44	; 0x2c
   132f8:	bl	16a90 <__assert_fail@plt+0x5a08>
   132fc:	cmp	r0, #0
   13300:	beq	136a4 <__assert_fail@plt+0x261c>
   13304:	cmn	r0, #1
   13308:	beq	13660 <__assert_fail@plt+0x25d8>
   1330c:	ldr	lr, [sp, #28]
   13310:	cmn	r0, #2
   13314:	beq	13668 <__assert_fail@plt+0x25e0>
   13318:	ldr	r2, [sp, #64]	; 0x40
   1331c:	ldr	r4, [sp, #88]	; 0x58
   13320:	ldr	ip, [sp, #84]	; 0x54
   13324:	cmp	r0, #2
   13328:	mov	r1, #0
   1332c:	movwcc	r1, #1
   13330:	eor	r2, r2, #1
   13334:	orrs	r1, r2, r1
   13338:	bne	1329c <__assert_fail@plt+0x2214>
   1333c:	ldr	r1, [sp, #44]	; 0x2c
   13340:	ldr	r2, [sp, #20]
   13344:	add	r1, r2, r1
   13348:	sub	r2, r0, #1
   1334c:	b	1335c <__assert_fail@plt+0x22d4>
   13350:	add	r1, r1, #1
   13354:	subs	r2, r2, #1
   13358:	beq	1329c <__assert_fail@plt+0x2214>
   1335c:	ldrb	r3, [r1]
   13360:	sub	r3, r3, #91	; 0x5b
   13364:	cmp	r3, #33	; 0x21
   13368:	bhi	13350 <__assert_fail@plt+0x22c8>
   1336c:	add	r5, pc, #0
   13370:	ldr	pc, [r5, r3, lsl #2]
   13374:	andeq	r3, r1, r8, asr r7
   13378:	andeq	r3, r1, r8, asr r7
   1337c:	andeq	r3, r1, r0, asr r3
   13380:	andeq	r3, r1, r8, asr r7
   13384:	andeq	r3, r1, r0, asr r3
   13388:	andeq	r3, r1, r8, asr r7
   1338c:	andeq	r3, r1, r0, asr r3
   13390:	andeq	r3, r1, r0, asr r3
   13394:	andeq	r3, r1, r0, asr r3
   13398:	andeq	r3, r1, r0, asr r3
   1339c:	andeq	r3, r1, r0, asr r3
   133a0:	andeq	r3, r1, r0, asr r3
   133a4:	andeq	r3, r1, r0, asr r3
   133a8:	andeq	r3, r1, r0, asr r3
   133ac:	andeq	r3, r1, r0, asr r3
   133b0:	andeq	r3, r1, r0, asr r3
   133b4:	andeq	r3, r1, r0, asr r3
   133b8:	andeq	r3, r1, r0, asr r3
   133bc:	andeq	r3, r1, r0, asr r3
   133c0:	andeq	r3, r1, r0, asr r3
   133c4:	andeq	r3, r1, r0, asr r3
   133c8:	andeq	r3, r1, r0, asr r3
   133cc:	andeq	r3, r1, r0, asr r3
   133d0:	andeq	r3, r1, r0, asr r3
   133d4:	andeq	r3, r1, r0, asr r3
   133d8:	andeq	r3, r1, r0, asr r3
   133dc:	andeq	r3, r1, r0, asr r3
   133e0:	andeq	r3, r1, r0, asr r3
   133e4:	andeq	r3, r1, r0, asr r3
   133e8:	andeq	r3, r1, r0, asr r3
   133ec:	andeq	r3, r1, r0, asr r3
   133f0:	andeq	r3, r1, r0, asr r3
   133f4:	andeq	r3, r1, r0, asr r3
   133f8:	andeq	r3, r1, r8, asr r7
   133fc:	mov	r8, r0
   13400:	b	12e24 <__assert_fail@plt+0x1d9c>
   13404:	ldr	r0, [sp, #32]
   13408:	cmp	r0, #0
   1340c:	beq	134ac <__assert_fail@plt+0x2424>
   13410:	add	r0, r7, #2
   13414:	cmp	r0, lr
   13418:	bcs	134ac <__assert_fail@plt+0x2424>
   1341c:	add	r1, r7, ip
   13420:	ldrb	r1, [r1, #1]
   13424:	cmp	r1, #63	; 0x3f
   13428:	bne	134ac <__assert_fail@plt+0x2424>
   1342c:	ldrb	r9, [ip, r0]
   13430:	sub	r2, r9, #33	; 0x21
   13434:	cmp	r2, #29
   13438:	bhi	134ac <__assert_fail@plt+0x2424>
   1343c:	movw	r1, #20929	; 0x51c1
   13440:	mov	r3, #1
   13444:	movt	r1, #14336	; 0x3800
   13448:	tst	r1, r3, lsl r2
   1344c:	beq	134ac <__assert_fail@plt+0x2424>
   13450:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13454:	tst	r1, #1
   13458:	bne	1377c <__assert_fail@plt+0x26f4>
   1345c:	cmp	r8, r4
   13460:	add	r2, r8, #1
   13464:	mov	r6, r9
   13468:	mov	r7, r0
   1346c:	mov	r9, #0
   13470:	movcc	r1, #63	; 0x3f
   13474:	strbcc	r1, [r5, r8]
   13478:	cmp	r2, r4
   1347c:	movcc	r1, #34	; 0x22
   13480:	strbcc	r1, [r5, r2]
   13484:	add	r2, r8, #2
   13488:	cmp	r2, r4
   1348c:	movcc	r1, #34	; 0x22
   13490:	strbcc	r1, [r5, r2]
   13494:	add	r2, r8, #3
   13498:	add	r8, r8, #4
   1349c:	cmp	r2, r4
   134a0:	movcc	r1, #63	; 0x3f
   134a4:	strbcc	r1, [r5, r2]
   134a8:	b	12e24 <__assert_fail@plt+0x1d9c>
   134ac:	mov	r9, #0
   134b0:	b	12e24 <__assert_fail@plt+0x1d9c>
   134b4:	ldr	lr, [sp, #28]
   134b8:	ldr	r4, [fp, #-56]	; 0xffffffc8
   134bc:	add	r1, r2, r7
   134c0:	mov	r2, #0
   134c4:	str	r1, [sp, #44]	; 0x2c
   134c8:	tst	r0, #1
   134cc:	bne	135e8 <__assert_fail@plt+0x2560>
   134d0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   134d4:	tst	r1, #1
   134d8:	bne	13778 <__assert_fail@plt+0x26f0>
   134dc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   134e0:	subs	r2, r1, #2
   134e4:	movwne	r2, #1
   134e8:	orr	r2, r2, r4
   134ec:	tst	r2, #1
   134f0:	bne	13534 <__assert_fail@plt+0x24ac>
   134f4:	ldr	r1, [sp, #88]	; 0x58
   134f8:	add	r2, r8, #1
   134fc:	mov	r4, #1
   13500:	cmp	r8, r1
   13504:	movcc	r1, #39	; 0x27
   13508:	strbcc	r1, [r5, r8]
   1350c:	ldr	r1, [sp, #88]	; 0x58
   13510:	cmp	r2, r1
   13514:	movcc	r1, #36	; 0x24
   13518:	strbcc	r1, [r5, r2]
   1351c:	ldr	r1, [sp, #88]	; 0x58
   13520:	add	r2, r8, #2
   13524:	add	r8, r8, #3
   13528:	cmp	r2, r1
   1352c:	movcc	r1, #39	; 0x27
   13530:	strbcc	r1, [r5, r2]
   13534:	ldr	r1, [sp, #88]	; 0x58
   13538:	add	r2, r8, #1
   1353c:	cmp	r8, r1
   13540:	movcc	r1, #92	; 0x5c
   13544:	strbcc	r1, [r5, r8]
   13548:	ldr	r1, [sp, #88]	; 0x58
   1354c:	cmp	r2, r1
   13550:	bcs	13564 <__assert_fail@plt+0x24dc>
   13554:	uxtb	r3, r6
   13558:	mov	r1, #48	; 0x30
   1355c:	orr	r3, r1, r3, lsr #6
   13560:	strb	r3, [r5, r2]
   13564:	ldr	r1, [sp, #88]	; 0x58
   13568:	add	r2, r8, #2
   1356c:	add	r8, r8, #3
   13570:	cmp	r2, r1
   13574:	lsrcc	r3, r6, #3
   13578:	movcc	r1, #6
   1357c:	bficc	r3, r1, #3, #29
   13580:	mov	r1, #6
   13584:	bfi	r6, r1, #3, #29
   13588:	strbcc	r3, [r5, r2]
   1358c:	mov	r2, #1
   13590:	b	13610 <__assert_fail@plt+0x2588>
   13594:	ldr	r1, [sp, #88]	; 0x58
   13598:	ldr	r5, [fp, #-84]	; 0xffffffac
   1359c:	ldr	r4, [sp, #88]	; 0x58
   135a0:	cmp	r8, r1
   135a4:	movcc	r1, #39	; 0x27
   135a8:	strbcc	r1, [r5, r8]
   135ac:	add	r1, r8, #1
   135b0:	add	r8, r8, #2
   135b4:	cmp	r1, r4
   135b8:	movcc	r4, #39	; 0x27
   135bc:	strbcc	r4, [r5, r1]
   135c0:	mov	r4, #0
   135c4:	ldr	r1, [sp, #88]	; 0x58
   135c8:	cmp	r8, r1
   135cc:	ldr	r1, [sp, #72]	; 0x48
   135d0:	strbcc	r6, [r5, r8]
   135d4:	add	r8, r8, #1
   135d8:	ldrb	r6, [r1, r7]
   135dc:	mov	r7, r3
   135e0:	tst	r0, #1
   135e4:	beq	134d0 <__assert_fail@plt+0x2448>
   135e8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   135ec:	tst	r1, #1
   135f0:	beq	13608 <__assert_fail@plt+0x2580>
   135f4:	ldr	r1, [sp, #88]	; 0x58
   135f8:	cmp	r8, r1
   135fc:	movcc	r1, #92	; 0x5c
   13600:	strbcc	r1, [r5, r8]
   13604:	add	r8, r8, #1
   13608:	mov	r1, #0
   1360c:	str	r1, [fp, #-52]	; 0xffffffcc
   13610:	ldr	r1, [sp, #44]	; 0x2c
   13614:	add	r3, r7, #1
   13618:	and	sl, r2, #1
   1361c:	cmp	r1, r3
   13620:	bls	13644 <__assert_fail@plt+0x25bc>
   13624:	cmp	sl, #0
   13628:	mvn	r5, r4
   1362c:	movwne	sl, #1
   13630:	orr	r5, r5, sl
   13634:	tst	r5, #1
   13638:	beq	13594 <__assert_fail@plt+0x250c>
   1363c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13640:	b	135c4 <__assert_fail@plt+0x253c>
   13644:	str	r4, [fp, #-56]	; 0xffffffc8
   13648:	ldr	r4, [sp, #88]	; 0x58
   1364c:	cmp	sl, #0
   13650:	movwne	sl, #1
   13654:	cmp	sl, #0
   13658:	beq	131b4 <__assert_fail@plt+0x212c>
   1365c:	b	131e8 <__assert_fail@plt+0x2160>
   13660:	mov	r9, #0
   13664:	b	136a4 <__assert_fail@plt+0x261c>
   13668:	ldr	r0, [sp, #24]
   1366c:	mov	r9, #0
   13670:	cmp	lr, r0
   13674:	bls	136a4 <__assert_fail@plt+0x261c>
   13678:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1367c:	ldr	r2, [sp, #44]	; 0x2c
   13680:	add	r0, ip, r7
   13684:	ldrb	r1, [r0, r2]
   13688:	cmp	r1, #0
   1368c:	beq	1316c <__assert_fail@plt+0x20e4>
   13690:	add	r2, r2, #1
   13694:	add	r1, r7, r2
   13698:	cmp	r1, lr
   1369c:	bcc	13684 <__assert_fail@plt+0x25fc>
   136a0:	b	1316c <__assert_fail@plt+0x20e4>
   136a4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   136a8:	ldr	r2, [sp, #44]	; 0x2c
   136ac:	b	1316c <__assert_fail@plt+0x20e4>
   136b0:	mov	lr, r7
   136b4:	b	136bc <__assert_fail@plt+0x2634>
   136b8:	mvn	lr, #0
   136bc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   136c0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   136c4:	eor	r0, r1, #2
   136c8:	orr	r0, r0, r8
   136cc:	clz	r0, r0
   136d0:	lsr	r0, r0, #5
   136d4:	tst	r2, r0
   136d8:	bne	1377c <__assert_fail@plt+0x26f4>
   136dc:	subs	r0, r1, #2
   136e0:	movwne	r0, #1
   136e4:	orr	r0, r2, r0
   136e8:	tst	r0, #1
   136ec:	ldreq	r0, [sp, #60]	; 0x3c
   136f0:	eoreq	r0, r0, #1
   136f4:	tsteq	r0, #1
   136f8:	bne	13810 <__assert_fail@plt+0x2788>
   136fc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13700:	mov	sl, lr
   13704:	tst	r0, #1
   13708:	bne	137dc <__assert_fail@plt+0x2754>
   1370c:	ldr	r6, [sp, #56]	; 0x38
   13710:	mov	r9, #0
   13714:	cmp	r6, #0
   13718:	beq	13808 <__assert_fail@plt+0x2780>
   1371c:	ldr	r0, [sp, #84]	; 0x54
   13720:	mov	r1, #0
   13724:	mov	r7, #2
   13728:	cmp	r4, #0
   1372c:	str	r1, [fp, #-48]	; 0xffffffd0
   13730:	mov	r1, #0
   13734:	str	r1, [fp, #-76]	; 0xffffffb4
   13738:	beq	128d8 <__assert_fail@plt+0x1850>
   1373c:	b	13810 <__assert_fail@plt+0x2788>
   13740:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13744:	ldr	r1, [fp, #12]
   13748:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1374c:	mov	lr, r4
   13750:	mov	r4, r6
   13754:	b	1379c <__assert_fail@plt+0x2714>
   13758:	tst	ip, #1
   1375c:	ldr	r5, [fp, #-84]	; 0xffffffac
   13760:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13764:	ldr	r1, [fp, #12]
   13768:	mov	r0, #2
   1376c:	movwne	r0, #4
   13770:	mov	r2, r0
   13774:	b	1379c <__assert_fail@plt+0x2714>
   13778:	ldr	r4, [sp, #88]	; 0x58
   1377c:	ldr	r1, [sp, #84]	; 0x54
   13780:	mov	r0, #2
   13784:	tst	r1, #1
   13788:	movwne	r0, #4
   1378c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13790:	ldr	r1, [fp, #12]
   13794:	cmp	r2, #2
   13798:	moveq	r2, r0
   1379c:	mov	r0, #0
   137a0:	bic	r1, r1, #2
   137a4:	str	r2, [sp]
   137a8:	mov	r2, ip
   137ac:	mov	r3, lr
   137b0:	str	r0, [sp, #8]
   137b4:	ldr	r0, [sp, #76]	; 0x4c
   137b8:	str	r1, [sp, #4]
   137bc:	mov	r1, r4
   137c0:	str	r0, [sp, #12]
   137c4:	ldr	r0, [sp, #80]	; 0x50
   137c8:	str	r0, [sp, #16]
   137cc:	mov	r0, r5
   137d0:	bl	12848 <__assert_fail@plt+0x17c0>
   137d4:	mov	r8, r0
   137d8:	b	1385c <__assert_fail@plt+0x27d4>
   137dc:	mov	r0, #5
   137e0:	ldr	r1, [sp, #56]	; 0x38
   137e4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   137e8:	mov	r3, sl
   137ec:	str	r0, [sp]
   137f0:	ldr	r0, [fp, #12]
   137f4:	str	r0, [sp, #4]
   137f8:	ldr	r0, [fp, #16]
   137fc:	str	r0, [sp, #8]
   13800:	ldr	r0, [sp, #76]	; 0x4c
   13804:	b	137c0 <__assert_fail@plt+0x2738>
   13808:	mov	r0, #0
   1380c:	str	r0, [fp, #-76]	; 0xffffffb4
   13810:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13814:	cmp	r1, #0
   13818:	beq	13850 <__assert_fail@plt+0x27c8>
   1381c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13820:	tst	r0, #1
   13824:	bne	13850 <__assert_fail@plt+0x27c8>
   13828:	ldrb	r0, [r1]
   1382c:	cmp	r0, #0
   13830:	beq	13850 <__assert_fail@plt+0x27c8>
   13834:	add	r1, r1, #1
   13838:	cmp	r8, r4
   1383c:	strbcc	r0, [r5, r8]
   13840:	add	r8, r8, #1
   13844:	ldrb	r0, [r1], #1
   13848:	cmp	r0, #0
   1384c:	bne	13838 <__assert_fail@plt+0x27b0>
   13850:	cmp	r8, r4
   13854:	movcc	r0, #0
   13858:	strbcc	r0, [r5, r8]
   1385c:	mov	r0, r8
   13860:	sub	sp, fp, #28
   13864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13868:	mov	r0, #4
   1386c:	b	1378c <__assert_fail@plt+0x2704>
   13870:	bl	1107c <abort@plt>
   13874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13878:	add	fp, sp, #28
   1387c:	sub	sp, sp, #28
   13880:	movw	r5, #33128	; 0x8168
   13884:	cmp	r2, #0
   13888:	mov	r4, r1
   1388c:	mov	r7, r0
   13890:	str	r0, [sp, #20]
   13894:	movt	r5, #2
   13898:	movne	r5, r2
   1389c:	bl	10fa4 <__errno_location@plt>
   138a0:	mov	sl, r0
   138a4:	ldr	r2, [r5, #40]	; 0x28
   138a8:	ldr	r3, [r5, #44]	; 0x2c
   138ac:	ldm	r5, {r0, r1}
   138b0:	orr	r8, r1, #1
   138b4:	add	r9, r5, #8
   138b8:	mov	r1, #0
   138bc:	ldr	r6, [sl]
   138c0:	stm	sp, {r0, r8, r9}
   138c4:	mov	r0, #0
   138c8:	str	r2, [sp, #12]
   138cc:	str	r3, [sp, #16]
   138d0:	mov	r2, r7
   138d4:	mov	r3, r4
   138d8:	str	r6, [sp, #24]
   138dc:	mov	r6, r4
   138e0:	bl	12848 <__assert_fail@plt+0x17c0>
   138e4:	add	r7, r0, #1
   138e8:	mov	r0, r7
   138ec:	bl	14a94 <__assert_fail@plt+0x3a0c>
   138f0:	mov	r4, r0
   138f4:	ldr	r0, [r5]
   138f8:	ldr	r2, [r5, #44]	; 0x2c
   138fc:	ldr	r1, [r5, #40]	; 0x28
   13900:	mov	r3, r6
   13904:	stm	sp, {r0, r8, r9}
   13908:	str	r2, [sp, #16]
   1390c:	ldr	r2, [sp, #20]
   13910:	str	r1, [sp, #12]
   13914:	mov	r0, r4
   13918:	mov	r1, r7
   1391c:	bl	12848 <__assert_fail@plt+0x17c0>
   13920:	ldr	r0, [sp, #24]
   13924:	str	r0, [sl]
   13928:	mov	r0, r4
   1392c:	sub	sp, fp, #28
   13930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13938:	add	fp, sp, #28
   1393c:	sub	sp, sp, #36	; 0x24
   13940:	movw	r8, #33128	; 0x8168
   13944:	cmp	r3, #0
   13948:	mov	r4, r2
   1394c:	str	r2, [sp, #24]
   13950:	mov	r5, r1
   13954:	mov	r6, r0
   13958:	str	r0, [sp, #20]
   1395c:	movt	r8, #2
   13960:	movne	r8, r3
   13964:	bl	10fa4 <__errno_location@plt>
   13968:	str	r0, [sp, #28]
   1396c:	ldr	r1, [r8, #40]	; 0x28
   13970:	ldr	r2, [r8, #44]	; 0x2c
   13974:	ldr	r7, [r0]
   13978:	cmp	r4, #0
   1397c:	add	sl, r8, #8
   13980:	mov	r0, #0
   13984:	ldm	r8, {r3, r9}
   13988:	orreq	r9, r9, #1
   1398c:	stm	sp, {r3, r9, sl}
   13990:	str	r1, [sp, #12]
   13994:	str	r2, [sp, #16]
   13998:	mov	r1, #0
   1399c:	mov	r2, r6
   139a0:	mov	r3, r5
   139a4:	str	r7, [sp, #32]
   139a8:	mov	r7, r5
   139ac:	bl	12848 <__assert_fail@plt+0x17c0>
   139b0:	add	r4, r0, #1
   139b4:	mov	r5, r0
   139b8:	mov	r0, r4
   139bc:	bl	14a94 <__assert_fail@plt+0x3a0c>
   139c0:	mov	r6, r0
   139c4:	ldr	r0, [r8]
   139c8:	ldr	r2, [r8, #44]	; 0x2c
   139cc:	ldr	r1, [r8, #40]	; 0x28
   139d0:	mov	r3, r7
   139d4:	stm	sp, {r0, r9, sl}
   139d8:	str	r2, [sp, #16]
   139dc:	ldr	r2, [sp, #20]
   139e0:	str	r1, [sp, #12]
   139e4:	mov	r0, r6
   139e8:	mov	r1, r4
   139ec:	bl	12848 <__assert_fail@plt+0x17c0>
   139f0:	ldr	r0, [sp, #24]
   139f4:	ldr	r1, [sp, #32]
   139f8:	ldr	r2, [sp, #28]
   139fc:	cmp	r0, #0
   13a00:	str	r1, [r2]
   13a04:	strne	r5, [r0]
   13a08:	mov	r0, r6
   13a0c:	sub	sp, fp, #28
   13a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13a18:	add	fp, sp, #24
   13a1c:	movw	r5, #33012	; 0x80f4
   13a20:	movw	r8, #33008	; 0x80f0
   13a24:	movt	r5, #2
   13a28:	movt	r8, #2
   13a2c:	ldr	r0, [r5]
   13a30:	ldr	r4, [r8]
   13a34:	cmp	r0, #2
   13a38:	blt	13a64 <__assert_fail@plt+0x29dc>
   13a3c:	add	r7, r4, #12
   13a40:	mov	r6, #0
   13a44:	ldr	r0, [r7, r6, lsl #3]
   13a48:	bl	1253c <__assert_fail@plt+0x14b4>
   13a4c:	ldr	r1, [r5]
   13a50:	add	r2, r6, #2
   13a54:	add	r0, r6, #1
   13a58:	mov	r6, r0
   13a5c:	cmp	r2, r1
   13a60:	blt	13a44 <__assert_fail@plt+0x29bc>
   13a64:	ldr	r0, [r4, #4]
   13a68:	movw	r9, #33176	; 0x8198
   13a6c:	movw	r7, #33016	; 0x80f8
   13a70:	movt	r9, #2
   13a74:	movt	r7, #2
   13a78:	cmp	r0, r9
   13a7c:	beq	13a8c <__assert_fail@plt+0x2a04>
   13a80:	bl	1253c <__assert_fail@plt+0x14b4>
   13a84:	mov	r0, #256	; 0x100
   13a88:	stm	r7, {r0, r9}
   13a8c:	cmp	r4, r7
   13a90:	beq	13aa0 <__assert_fail@plt+0x2a18>
   13a94:	mov	r0, r4
   13a98:	bl	1253c <__assert_fail@plt+0x14b4>
   13a9c:	str	r7, [r8]
   13aa0:	mov	r0, #1
   13aa4:	str	r0, [r5]
   13aa8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13aac:	movw	r3, #33128	; 0x8168
   13ab0:	mvn	r2, #0
   13ab4:	movt	r3, #2
   13ab8:	b	13abc <__assert_fail@plt+0x2a34>
   13abc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ac0:	add	fp, sp, #28
   13ac4:	sub	sp, sp, #44	; 0x2c
   13ac8:	mov	r7, r3
   13acc:	str	r2, [sp, #36]	; 0x24
   13ad0:	str	r1, [sp, #32]
   13ad4:	mov	r5, r0
   13ad8:	bl	10fa4 <__errno_location@plt>
   13adc:	cmp	r5, #0
   13ae0:	bmi	13c50 <__assert_fail@plt+0x2bc8>
   13ae4:	cmn	r5, #-2147483647	; 0x80000001
   13ae8:	beq	13c50 <__assert_fail@plt+0x2bc8>
   13aec:	movw	r8, #33012	; 0x80f4
   13af0:	movw	r4, #33008	; 0x80f0
   13af4:	str	r0, [sp, #28]
   13af8:	ldr	r0, [r0]
   13afc:	movt	r8, #2
   13b00:	movt	r4, #2
   13b04:	ldr	r1, [r8]
   13b08:	ldr	r6, [r4]
   13b0c:	str	r0, [sp, #24]
   13b10:	cmp	r1, r5
   13b14:	ble	13b20 <__assert_fail@plt+0x2a98>
   13b18:	mov	sl, r6
   13b1c:	b	13b8c <__assert_fail@plt+0x2b04>
   13b20:	movw	r9, #33016	; 0x80f8
   13b24:	mov	r0, #8
   13b28:	str	r1, [fp, #-32]	; 0xffffffe0
   13b2c:	sub	r1, r5, r1
   13b30:	mvn	r3, #-2147483648	; 0x80000000
   13b34:	movt	r9, #2
   13b38:	str	r0, [sp]
   13b3c:	add	r2, r1, #1
   13b40:	sub	r1, fp, #32
   13b44:	subs	r0, r6, r9
   13b48:	movne	r0, r6
   13b4c:	bl	14c94 <__assert_fail@plt+0x3c0c>
   13b50:	mov	sl, r0
   13b54:	cmp	r6, r9
   13b58:	str	r0, [r4]
   13b5c:	bne	13b68 <__assert_fail@plt+0x2ae0>
   13b60:	ldrd	r0, [r9]
   13b64:	stm	sl, {r0, r1}
   13b68:	ldr	r1, [r8]
   13b6c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13b70:	add	r0, sl, r1, lsl #3
   13b74:	sub	r1, r2, r1
   13b78:	lsl	r2, r1, #3
   13b7c:	mov	r1, #0
   13b80:	bl	10fbc <memset@plt>
   13b84:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13b88:	str	r0, [r8]
   13b8c:	mov	r9, sl
   13b90:	ldm	r7, {r0, r1}
   13b94:	orr	r8, r1, #1
   13b98:	add	r1, r7, #8
   13b9c:	ldr	r2, [r7, #40]	; 0x28
   13ba0:	ldr	r3, [r7, #44]	; 0x2c
   13ba4:	ldr	r6, [r9, r5, lsl #3]!
   13ba8:	str	r1, [sp, #20]
   13bac:	ldr	r4, [r9, #4]!
   13bb0:	stm	sp, {r0, r8}
   13bb4:	add	r0, sp, #8
   13bb8:	stm	r0, {r1, r2, r3}
   13bbc:	ldr	r2, [sp, #32]
   13bc0:	ldr	r3, [sp, #36]	; 0x24
   13bc4:	mov	r1, r6
   13bc8:	mov	r0, r4
   13bcc:	bl	12848 <__assert_fail@plt+0x17c0>
   13bd0:	cmp	r6, r0
   13bd4:	bhi	13c38 <__assert_fail@plt+0x2bb0>
   13bd8:	add	r6, r0, #1
   13bdc:	movw	r0, #33176	; 0x8198
   13be0:	movt	r0, #2
   13be4:	str	r6, [sl, r5, lsl #3]
   13be8:	cmp	r4, r0
   13bec:	beq	13bf8 <__assert_fail@plt+0x2b70>
   13bf0:	mov	r0, r4
   13bf4:	bl	1253c <__assert_fail@plt+0x14b4>
   13bf8:	mov	r0, r6
   13bfc:	bl	14a94 <__assert_fail@plt+0x3a0c>
   13c00:	str	r0, [r9]
   13c04:	mov	r4, r0
   13c08:	add	r3, sp, #8
   13c0c:	ldr	r0, [r7]
   13c10:	ldr	r1, [r7, #40]	; 0x28
   13c14:	ldr	r2, [r7, #44]	; 0x2c
   13c18:	stm	sp, {r0, r8}
   13c1c:	ldr	r0, [sp, #20]
   13c20:	stm	r3, {r0, r1, r2}
   13c24:	ldr	r2, [sp, #32]
   13c28:	ldr	r3, [sp, #36]	; 0x24
   13c2c:	mov	r0, r4
   13c30:	mov	r1, r6
   13c34:	bl	12848 <__assert_fail@plt+0x17c0>
   13c38:	ldr	r0, [sp, #28]
   13c3c:	ldr	r1, [sp, #24]
   13c40:	str	r1, [r0]
   13c44:	mov	r0, r4
   13c48:	sub	sp, fp, #28
   13c4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c50:	bl	1107c <abort@plt>
   13c54:	movw	r3, #33128	; 0x8168
   13c58:	movt	r3, #2
   13c5c:	b	13abc <__assert_fail@plt+0x2a34>
   13c60:	movw	r3, #33128	; 0x8168
   13c64:	mov	r1, r0
   13c68:	mov	r0, #0
   13c6c:	mvn	r2, #0
   13c70:	movt	r3, #2
   13c74:	b	13abc <__assert_fail@plt+0x2a34>
   13c78:	movw	r3, #33128	; 0x8168
   13c7c:	mov	r2, r1
   13c80:	mov	r1, r0
   13c84:	mov	r0, #0
   13c88:	movt	r3, #2
   13c8c:	b	13abc <__assert_fail@plt+0x2a34>
   13c90:	push	{fp, lr}
   13c94:	mov	fp, sp
   13c98:	sub	sp, sp, #48	; 0x30
   13c9c:	vmov.i32	q8, #0	; 0x00000000
   13ca0:	mov	ip, #32
   13ca4:	mov	r3, sp
   13ca8:	mov	lr, r2
   13cac:	cmp	r1, #10
   13cb0:	add	r2, r3, #16
   13cb4:	vst1.64	{d16-d17}, [r3], ip
   13cb8:	vst1.64	{d16-d17}, [r2]
   13cbc:	vst1.64	{d16-d17}, [r3]
   13cc0:	beq	13ce0 <__assert_fail@plt+0x2c58>
   13cc4:	str	r1, [sp]
   13cc8:	mov	r3, sp
   13ccc:	mov	r1, lr
   13cd0:	mvn	r2, #0
   13cd4:	bl	13abc <__assert_fail@plt+0x2a34>
   13cd8:	mov	sp, fp
   13cdc:	pop	{fp, pc}
   13ce0:	bl	1107c <abort@plt>
   13ce4:	push	{r4, sl, fp, lr}
   13ce8:	add	fp, sp, #8
   13cec:	sub	sp, sp, #48	; 0x30
   13cf0:	vmov.i32	q8, #0	; 0x00000000
   13cf4:	mov	ip, r3
   13cf8:	mov	r3, sp
   13cfc:	mov	lr, #32
   13d00:	cmp	r1, #10
   13d04:	add	r4, r3, #16
   13d08:	vst1.64	{d16-d17}, [r3], lr
   13d0c:	vst1.64	{d16-d17}, [r4]
   13d10:	vst1.64	{d16-d17}, [r3]
   13d14:	beq	13d34 <__assert_fail@plt+0x2cac>
   13d18:	str	r1, [sp]
   13d1c:	mov	r1, r2
   13d20:	mov	r3, sp
   13d24:	mov	r2, ip
   13d28:	bl	13abc <__assert_fail@plt+0x2a34>
   13d2c:	sub	sp, fp, #8
   13d30:	pop	{r4, sl, fp, pc}
   13d34:	bl	1107c <abort@plt>
   13d38:	push	{fp, lr}
   13d3c:	mov	fp, sp
   13d40:	sub	sp, sp, #48	; 0x30
   13d44:	vmov.i32	q8, #0	; 0x00000000
   13d48:	mov	r3, sp
   13d4c:	mov	ip, #32
   13d50:	cmp	r0, #10
   13d54:	add	r2, r3, #16
   13d58:	vst1.64	{d16-d17}, [r3], ip
   13d5c:	vst1.64	{d16-d17}, [r2]
   13d60:	vst1.64	{d16-d17}, [r3]
   13d64:	beq	13d84 <__assert_fail@plt+0x2cfc>
   13d68:	str	r0, [sp]
   13d6c:	mov	r3, sp
   13d70:	mov	r0, #0
   13d74:	mvn	r2, #0
   13d78:	bl	13abc <__assert_fail@plt+0x2a34>
   13d7c:	mov	sp, fp
   13d80:	pop	{fp, pc}
   13d84:	bl	1107c <abort@plt>
   13d88:	push	{fp, lr}
   13d8c:	mov	fp, sp
   13d90:	sub	sp, sp, #48	; 0x30
   13d94:	vmov.i32	q8, #0	; 0x00000000
   13d98:	mov	r3, sp
   13d9c:	mov	ip, #32
   13da0:	cmp	r0, #10
   13da4:	add	lr, r3, #16
   13da8:	vst1.64	{d16-d17}, [r3], ip
   13dac:	vst1.64	{d16-d17}, [lr]
   13db0:	vst1.64	{d16-d17}, [r3]
   13db4:	beq	13dd0 <__assert_fail@plt+0x2d48>
   13db8:	str	r0, [sp]
   13dbc:	mov	r3, sp
   13dc0:	mov	r0, #0
   13dc4:	bl	13abc <__assert_fail@plt+0x2a34>
   13dc8:	mov	sp, fp
   13dcc:	pop	{fp, pc}
   13dd0:	bl	1107c <abort@plt>
   13dd4:	push	{r4, sl, fp, lr}
   13dd8:	add	fp, sp, #8
   13ddc:	sub	sp, sp, #48	; 0x30
   13de0:	mov	lr, r0
   13de4:	movw	r0, #33128	; 0x8168
   13de8:	mov	ip, r1
   13dec:	mov	r1, #32
   13df0:	mov	r4, #1
   13df4:	movt	r0, #2
   13df8:	add	r3, r0, #16
   13dfc:	vld1.64	{d16-d17}, [r0], r1
   13e00:	vld1.64	{d20-d21}, [r0]
   13e04:	vld1.64	{d18-d19}, [r3]
   13e08:	mov	r3, sp
   13e0c:	add	r0, r3, #32
   13e10:	add	r1, r3, #16
   13e14:	vst1.64	{d20-d21}, [r0]
   13e18:	mov	r0, #28
   13e1c:	vst1.64	{d18-d19}, [r1]
   13e20:	mov	r1, r3
   13e24:	and	r0, r0, r2, lsr #3
   13e28:	and	r2, r2, #31
   13e2c:	vst1.64	{d16-d17}, [r1], r0
   13e30:	ldr	r0, [r1, #8]
   13e34:	bic	r4, r4, r0, lsr r2
   13e38:	eor	r0, r0, r4, lsl r2
   13e3c:	mov	r2, ip
   13e40:	str	r0, [r1, #8]
   13e44:	mov	r0, #0
   13e48:	mov	r1, lr
   13e4c:	bl	13abc <__assert_fail@plt+0x2a34>
   13e50:	sub	sp, fp, #8
   13e54:	pop	{r4, sl, fp, pc}
   13e58:	push	{fp, lr}
   13e5c:	mov	fp, sp
   13e60:	sub	sp, sp, #48	; 0x30
   13e64:	mov	ip, r0
   13e68:	movw	r0, #33128	; 0x8168
   13e6c:	mov	r2, #32
   13e70:	movt	r0, #2
   13e74:	add	r3, r0, #16
   13e78:	vld1.64	{d16-d17}, [r0], r2
   13e7c:	vld1.64	{d20-d21}, [r0]
   13e80:	vld1.64	{d18-d19}, [r3]
   13e84:	mov	r3, sp
   13e88:	add	r0, r3, #32
   13e8c:	add	r2, r3, #16
   13e90:	vst1.64	{d20-d21}, [r0]
   13e94:	mov	r0, #28
   13e98:	vst1.64	{d18-d19}, [r2]
   13e9c:	mov	r2, r3
   13ea0:	and	r0, r0, r1, lsr #3
   13ea4:	and	r1, r1, #31
   13ea8:	vst1.64	{d16-d17}, [r2], r0
   13eac:	mov	r0, #1
   13eb0:	ldr	lr, [r2, #8]
   13eb4:	bic	r0, r0, lr, lsr r1
   13eb8:	eor	r0, lr, r0, lsl r1
   13ebc:	mov	r1, ip
   13ec0:	str	r0, [r2, #8]
   13ec4:	mov	r0, #0
   13ec8:	mvn	r2, #0
   13ecc:	bl	13abc <__assert_fail@plt+0x2a34>
   13ed0:	mov	sp, fp
   13ed4:	pop	{fp, pc}
   13ed8:	push	{fp, lr}
   13edc:	mov	fp, sp
   13ee0:	sub	sp, sp, #48	; 0x30
   13ee4:	mov	r1, r0
   13ee8:	movw	r0, #33128	; 0x8168
   13eec:	mov	r3, #32
   13ef0:	movt	r0, #2
   13ef4:	add	r2, r0, #16
   13ef8:	vld1.64	{d16-d17}, [r0], r3
   13efc:	mov	r3, sp
   13f00:	vld1.64	{d18-d19}, [r2]
   13f04:	vld1.64	{d20-d21}, [r0]
   13f08:	add	r2, r3, #16
   13f0c:	add	r0, r3, #32
   13f10:	vst1.64	{d18-d19}, [r2]
   13f14:	vst1.64	{d20-d21}, [r0]
   13f18:	mov	r0, #12
   13f1c:	mov	r2, r3
   13f20:	vst1.64	{d16-d17}, [r2], r0
   13f24:	ldr	r0, [r2]
   13f28:	orr	r0, r0, #67108864	; 0x4000000
   13f2c:	str	r0, [r2]
   13f30:	mov	r0, #0
   13f34:	mvn	r2, #0
   13f38:	bl	13abc <__assert_fail@plt+0x2a34>
   13f3c:	mov	sp, fp
   13f40:	pop	{fp, pc}
   13f44:	push	{fp, lr}
   13f48:	mov	fp, sp
   13f4c:	sub	sp, sp, #48	; 0x30
   13f50:	mov	ip, r1
   13f54:	mov	r1, r0
   13f58:	movw	r0, #33128	; 0x8168
   13f5c:	mov	r2, #32
   13f60:	movt	r0, #2
   13f64:	add	r3, r0, #16
   13f68:	vld1.64	{d16-d17}, [r0], r2
   13f6c:	vld1.64	{d18-d19}, [r3]
   13f70:	vld1.64	{d20-d21}, [r0]
   13f74:	mov	r3, sp
   13f78:	add	r2, r3, #16
   13f7c:	add	r0, r3, #32
   13f80:	vst1.64	{d18-d19}, [r2]
   13f84:	vst1.64	{d20-d21}, [r0]
   13f88:	mov	r0, #12
   13f8c:	mov	r2, r3
   13f90:	vst1.64	{d16-d17}, [r2], r0
   13f94:	ldr	r0, [r2]
   13f98:	orr	r0, r0, #67108864	; 0x4000000
   13f9c:	str	r0, [r2]
   13fa0:	mov	r0, #0
   13fa4:	mov	r2, ip
   13fa8:	bl	13abc <__assert_fail@plt+0x2a34>
   13fac:	mov	sp, fp
   13fb0:	pop	{fp, pc}
   13fb4:	push	{r4, sl, fp, lr}
   13fb8:	add	fp, sp, #8
   13fbc:	sub	sp, sp, #96	; 0x60
   13fc0:	vmov.i32	q8, #0	; 0x00000000
   13fc4:	mov	ip, r2
   13fc8:	mov	r2, sp
   13fcc:	mov	r4, #28
   13fd0:	cmp	r1, #10
   13fd4:	mov	r3, r2
   13fd8:	add	lr, r2, #16
   13fdc:	vst1.64	{d16-d17}, [r3], r4
   13fe0:	vst1.64	{d16-d17}, [lr]
   13fe4:	vst1.32	{d16-d17}, [r3]
   13fe8:	beq	14038 <__assert_fail@plt+0x2fb0>
   13fec:	vld1.64	{d16-d17}, [r2], r4
   13ff0:	vld1.64	{d18-d19}, [lr]
   13ff4:	add	r3, sp, #48	; 0x30
   13ff8:	vld1.32	{d20-d21}, [r2]
   13ffc:	add	r2, r3, #20
   14000:	add	r4, r3, #4
   14004:	vst1.32	{d18-d19}, [r2]
   14008:	add	r2, r3, #32
   1400c:	vst1.32	{d16-d17}, [r4]
   14010:	vst1.32	{d20-d21}, [r2]
   14014:	str	r1, [sp, #48]	; 0x30
   14018:	mvn	r2, #0
   1401c:	ldr	r1, [sp, #60]	; 0x3c
   14020:	orr	r1, r1, #67108864	; 0x4000000
   14024:	str	r1, [sp, #60]	; 0x3c
   14028:	mov	r1, ip
   1402c:	bl	13abc <__assert_fail@plt+0x2a34>
   14030:	sub	sp, fp, #8
   14034:	pop	{r4, sl, fp, pc}
   14038:	bl	1107c <abort@plt>
   1403c:	push	{r4, r5, r6, sl, fp, lr}
   14040:	add	fp, sp, #16
   14044:	sub	sp, sp, #48	; 0x30
   14048:	mov	ip, r3
   1404c:	movw	r3, #33128	; 0x8168
   14050:	mov	r6, #32
   14054:	cmp	r1, #0
   14058:	mov	r4, sp
   1405c:	movt	r3, #2
   14060:	cmpne	r2, #0
   14064:	add	r5, r4, #16
   14068:	add	lr, r3, #16
   1406c:	vld1.64	{d16-d17}, [r3], r6
   14070:	vld1.64	{d18-d19}, [lr]
   14074:	vld1.64	{d20-d21}, [r3]
   14078:	mov	r3, #10
   1407c:	vst1.64	{d16-d17}, [r4], r6
   14080:	vst1.64	{d18-d19}, [r5]
   14084:	vst1.64	{d20-d21}, [r4]
   14088:	str	r3, [sp]
   1408c:	bne	14094 <__assert_fail@plt+0x300c>
   14090:	bl	1107c <abort@plt>
   14094:	str	r2, [sp, #44]	; 0x2c
   14098:	str	r1, [sp, #40]	; 0x28
   1409c:	mov	r3, sp
   140a0:	mov	r1, ip
   140a4:	mvn	r2, #0
   140a8:	bl	13abc <__assert_fail@plt+0x2a34>
   140ac:	sub	sp, fp, #16
   140b0:	pop	{r4, r5, r6, sl, fp, pc}
   140b4:	push	{r4, r5, r6, sl, fp, lr}
   140b8:	add	fp, sp, #16
   140bc:	sub	sp, sp, #48	; 0x30
   140c0:	mov	lr, r3
   140c4:	movw	r3, #33128	; 0x8168
   140c8:	mov	r6, #32
   140cc:	cmp	r1, #0
   140d0:	mov	r4, sp
   140d4:	movt	r3, #2
   140d8:	cmpne	r2, #0
   140dc:	add	r5, r4, #16
   140e0:	add	ip, r3, #16
   140e4:	vld1.64	{d16-d17}, [r3], r6
   140e8:	vld1.64	{d18-d19}, [ip]
   140ec:	vld1.64	{d20-d21}, [r3]
   140f0:	mov	r3, #10
   140f4:	vst1.64	{d16-d17}, [r4], r6
   140f8:	vst1.64	{d18-d19}, [r5]
   140fc:	vst1.64	{d20-d21}, [r4]
   14100:	str	r3, [sp]
   14104:	bne	1410c <__assert_fail@plt+0x3084>
   14108:	bl	1107c <abort@plt>
   1410c:	ldr	ip, [fp, #8]
   14110:	str	r2, [sp, #44]	; 0x2c
   14114:	str	r1, [sp, #40]	; 0x28
   14118:	mov	r3, sp
   1411c:	mov	r1, lr
   14120:	mov	r2, ip
   14124:	bl	13abc <__assert_fail@plt+0x2a34>
   14128:	sub	sp, fp, #16
   1412c:	pop	{r4, r5, r6, sl, fp, pc}
   14130:	push	{r4, sl, fp, lr}
   14134:	add	fp, sp, #8
   14138:	sub	sp, sp, #48	; 0x30
   1413c:	movw	r3, #33128	; 0x8168
   14140:	mov	lr, #32
   14144:	mov	ip, r2
   14148:	cmp	r0, #0
   1414c:	movt	r3, #2
   14150:	cmpne	r1, #0
   14154:	add	r2, r3, #16
   14158:	vld1.64	{d16-d17}, [r3], lr
   1415c:	vld1.64	{d20-d21}, [r3]
   14160:	vld1.64	{d18-d19}, [r2]
   14164:	mov	r2, sp
   14168:	add	r4, r2, #16
   1416c:	vst1.64	{d16-d17}, [r2], lr
   14170:	vst1.64	{d20-d21}, [r2]
   14174:	mov	r2, #10
   14178:	vst1.64	{d18-d19}, [r4]
   1417c:	str	r2, [sp]
   14180:	bne	14188 <__assert_fail@plt+0x3100>
   14184:	bl	1107c <abort@plt>
   14188:	str	r1, [sp, #44]	; 0x2c
   1418c:	str	r0, [sp, #40]	; 0x28
   14190:	mov	r3, sp
   14194:	mov	r0, #0
   14198:	mov	r1, ip
   1419c:	mvn	r2, #0
   141a0:	bl	13abc <__assert_fail@plt+0x2a34>
   141a4:	sub	sp, fp, #8
   141a8:	pop	{r4, sl, fp, pc}
   141ac:	push	{r4, r5, fp, lr}
   141b0:	add	fp, sp, #8
   141b4:	sub	sp, sp, #48	; 0x30
   141b8:	mov	ip, r3
   141bc:	movw	r3, #33128	; 0x8168
   141c0:	mov	r4, #32
   141c4:	mov	lr, r2
   141c8:	cmp	r0, #0
   141cc:	movt	r3, #2
   141d0:	cmpne	r1, #0
   141d4:	add	r2, r3, #16
   141d8:	vld1.64	{d16-d17}, [r3], r4
   141dc:	vld1.64	{d20-d21}, [r3]
   141e0:	vld1.64	{d18-d19}, [r2]
   141e4:	mov	r2, sp
   141e8:	add	r5, r2, #16
   141ec:	vst1.64	{d16-d17}, [r2], r4
   141f0:	vst1.64	{d20-d21}, [r2]
   141f4:	mov	r2, #10
   141f8:	vst1.64	{d18-d19}, [r5]
   141fc:	str	r2, [sp]
   14200:	bne	14208 <__assert_fail@plt+0x3180>
   14204:	bl	1107c <abort@plt>
   14208:	str	r1, [sp, #44]	; 0x2c
   1420c:	str	r0, [sp, #40]	; 0x28
   14210:	mov	r3, sp
   14214:	mov	r0, #0
   14218:	mov	r1, lr
   1421c:	mov	r2, ip
   14220:	bl	13abc <__assert_fail@plt+0x2a34>
   14224:	sub	sp, fp, #8
   14228:	pop	{r4, r5, fp, pc}
   1422c:	movw	r3, #33024	; 0x8100
   14230:	movt	r3, #2
   14234:	b	13abc <__assert_fail@plt+0x2a34>
   14238:	movw	r3, #33024	; 0x8100
   1423c:	mov	r2, r1
   14240:	mov	r1, r0
   14244:	mov	r0, #0
   14248:	movt	r3, #2
   1424c:	b	13abc <__assert_fail@plt+0x2a34>
   14250:	movw	r3, #33024	; 0x8100
   14254:	mvn	r2, #0
   14258:	movt	r3, #2
   1425c:	b	13abc <__assert_fail@plt+0x2a34>
   14260:	movw	r3, #33024	; 0x8100
   14264:	mov	r1, r0
   14268:	mov	r0, #0
   1426c:	mvn	r2, #0
   14270:	movt	r3, #2
   14274:	b	13abc <__assert_fail@plt+0x2a34>
   14278:	push	{r4, r5, fp, lr}
   1427c:	add	fp, sp, #8
   14280:	mov	r5, r0
   14284:	mov	r4, r1
   14288:	mov	r0, #0
   1428c:	mov	r2, #5
   14290:	mov	r1, r5
   14294:	bl	10eb4 <dcgettext@plt>
   14298:	cmp	r0, r5
   1429c:	popne	{r4, r5, fp, pc}
   142a0:	bl	16a58 <__assert_fail@plt+0x59d0>
   142a4:	ldrb	r1, [r0]
   142a8:	and	r1, r1, #223	; 0xdf
   142ac:	cmp	r1, #71	; 0x47
   142b0:	beq	14318 <__assert_fail@plt+0x3290>
   142b4:	cmp	r1, #85	; 0x55
   142b8:	bne	14370 <__assert_fail@plt+0x32e8>
   142bc:	ldrb	r1, [r0, #1]
   142c0:	and	r1, r1, #223	; 0xdf
   142c4:	cmp	r1, #84	; 0x54
   142c8:	bne	14370 <__assert_fail@plt+0x32e8>
   142cc:	ldrb	r1, [r0, #2]
   142d0:	and	r1, r1, #223	; 0xdf
   142d4:	cmp	r1, #70	; 0x46
   142d8:	bne	14370 <__assert_fail@plt+0x32e8>
   142dc:	ldrb	r1, [r0, #3]
   142e0:	cmp	r1, #45	; 0x2d
   142e4:	bne	14370 <__assert_fail@plt+0x32e8>
   142e8:	ldrb	r1, [r0, #4]
   142ec:	cmp	r1, #56	; 0x38
   142f0:	bne	14370 <__assert_fail@plt+0x32e8>
   142f4:	ldrb	r0, [r0, #5]
   142f8:	cmp	r0, #0
   142fc:	bne	14370 <__assert_fail@plt+0x32e8>
   14300:	ldrb	r1, [r5]
   14304:	movw	r2, #30469	; 0x7705
   14308:	movw	r0, #30473	; 0x7709
   1430c:	movt	r2, #1
   14310:	movt	r0, #1
   14314:	b	143a0 <__assert_fail@plt+0x3318>
   14318:	ldrb	r1, [r0, #1]
   1431c:	and	r1, r1, #223	; 0xdf
   14320:	cmp	r1, #66	; 0x42
   14324:	bne	14370 <__assert_fail@plt+0x32e8>
   14328:	ldrb	r1, [r0, #2]
   1432c:	cmp	r1, #49	; 0x31
   14330:	bne	14370 <__assert_fail@plt+0x32e8>
   14334:	ldrb	r1, [r0, #3]
   14338:	cmp	r1, #56	; 0x38
   1433c:	bne	14370 <__assert_fail@plt+0x32e8>
   14340:	ldrb	r1, [r0, #4]
   14344:	cmp	r1, #48	; 0x30
   14348:	bne	14370 <__assert_fail@plt+0x32e8>
   1434c:	ldrb	r1, [r0, #5]
   14350:	cmp	r1, #51	; 0x33
   14354:	bne	14370 <__assert_fail@plt+0x32e8>
   14358:	ldrb	r1, [r0, #6]
   1435c:	cmp	r1, #48	; 0x30
   14360:	bne	14370 <__assert_fail@plt+0x32e8>
   14364:	ldrb	r0, [r0, #7]
   14368:	cmp	r0, #0
   1436c:	beq	1438c <__assert_fail@plt+0x3304>
   14370:	movw	r1, #30463	; 0x76ff
   14374:	movw	r0, #30467	; 0x7703
   14378:	cmp	r4, #9
   1437c:	movt	r1, #1
   14380:	movt	r0, #1
   14384:	moveq	r0, r1
   14388:	pop	{r4, r5, fp, pc}
   1438c:	ldrb	r1, [r5]
   14390:	movw	r2, #30477	; 0x770d
   14394:	movw	r0, #30481	; 0x7711
   14398:	movt	r2, #1
   1439c:	movt	r0, #1
   143a0:	cmp	r1, #96	; 0x60
   143a4:	moveq	r0, r2
   143a8:	pop	{r4, r5, fp, pc}
   143ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   143b0:	add	fp, sp, #24
   143b4:	sub	sp, sp, #32
   143b8:	ldr	r6, [fp, #12]
   143bc:	ldr	r7, [fp, #8]
   143c0:	mov	r4, r2
   143c4:	mov	r8, r0
   143c8:	cmp	r1, #0
   143cc:	beq	143f4 <__assert_fail@plt+0x336c>
   143d0:	movw	r2, #30568	; 0x7768
   143d4:	mov	r5, r1
   143d8:	str	r3, [sp, #4]
   143dc:	str	r4, [sp]
   143e0:	mov	r0, r8
   143e4:	mov	r1, #1
   143e8:	movt	r2, #1
   143ec:	mov	r3, r5
   143f0:	b	1440c <__assert_fail@plt+0x3384>
   143f4:	movw	r2, #30580	; 0x7774
   143f8:	str	r3, [sp]
   143fc:	mov	r0, r8
   14400:	mov	r1, #1
   14404:	mov	r3, r4
   14408:	movt	r2, #1
   1440c:	bl	10fe0 <__fprintf_chk@plt>
   14410:	movw	r1, #30587	; 0x777b
   14414:	mov	r0, #0
   14418:	mov	r2, #5
   1441c:	movt	r1, #1
   14420:	bl	10eb4 <dcgettext@plt>
   14424:	movw	r2, #31305	; 0x7a49
   14428:	mov	r3, r0
   1442c:	movw	r0, #2022	; 0x7e6
   14430:	mov	r1, #1
   14434:	movt	r2, #1
   14438:	str	r0, [sp]
   1443c:	mov	r0, r8
   14440:	bl	10fe0 <__fprintf_chk@plt>
   14444:	movw	r4, #29727	; 0x741f
   14448:	mov	r1, r8
   1444c:	movt	r4, #1
   14450:	mov	r0, r4
   14454:	bl	10e30 <fputs_unlocked@plt>
   14458:	movw	r1, #30591	; 0x777f
   1445c:	mov	r0, #0
   14460:	mov	r2, #5
   14464:	movt	r1, #1
   14468:	bl	10eb4 <dcgettext@plt>
   1446c:	movw	r3, #30762	; 0x782a
   14470:	mov	r2, r0
   14474:	mov	r0, r8
   14478:	mov	r1, #1
   1447c:	movt	r3, #1
   14480:	bl	10fe0 <__fprintf_chk@plt>
   14484:	mov	r0, r4
   14488:	mov	r1, r8
   1448c:	bl	10e30 <fputs_unlocked@plt>
   14490:	cmp	r6, #9
   14494:	bhi	144d0 <__assert_fail@plt+0x3448>
   14498:	add	r0, pc, #0
   1449c:	ldr	pc, [r0, r6, lsl #2]
   144a0:	andeq	r4, r1, r8, asr #9
   144a4:	ldrdeq	r4, [r1], -ip
   144a8:	andeq	r4, r1, ip, lsl #10
   144ac:	andeq	r4, r1, r4, lsr r5
   144b0:	andeq	r4, r1, ip, asr r5
   144b4:	andeq	r4, r1, r4, lsl #11
   144b8:	andeq	r4, r1, ip, lsr #11
   144bc:	andeq	r4, r1, r4, ror #11
   144c0:	andeq	r4, r1, r4, lsl #13
   144c4:	andeq	r4, r1, ip, lsr #12
   144c8:	sub	sp, fp, #24
   144cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   144d0:	movw	r1, #31115	; 0x798b
   144d4:	movt	r1, #1
   144d8:	b	14634 <__assert_fail@plt+0x35ac>
   144dc:	movw	r1, #30796	; 0x784c
   144e0:	mov	r0, #0
   144e4:	mov	r2, #5
   144e8:	movt	r1, #1
   144ec:	bl	10eb4 <dcgettext@plt>
   144f0:	ldr	r3, [r7]
   144f4:	mov	r2, r0
   144f8:	mov	r0, r8
   144fc:	mov	r1, #1
   14500:	sub	sp, fp, #24
   14504:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14508:	b	10fe0 <__fprintf_chk@plt>
   1450c:	movw	r1, #30812	; 0x785c
   14510:	mov	r0, #0
   14514:	mov	r2, #5
   14518:	movt	r1, #1
   1451c:	bl	10eb4 <dcgettext@plt>
   14520:	mov	r2, r0
   14524:	ldr	r3, [r7]
   14528:	ldr	r0, [r7, #4]
   1452c:	str	r0, [sp]
   14530:	b	14620 <__assert_fail@plt+0x3598>
   14534:	movw	r1, #30835	; 0x7873
   14538:	mov	r0, #0
   1453c:	mov	r2, #5
   14540:	movt	r1, #1
   14544:	bl	10eb4 <dcgettext@plt>
   14548:	mov	r2, r0
   1454c:	ldr	r3, [r7]
   14550:	ldmib	r7, {r0, r1}
   14554:	stm	sp, {r0, r1}
   14558:	b	14620 <__assert_fail@plt+0x3598>
   1455c:	movw	r1, #30863	; 0x788f
   14560:	mov	r0, #0
   14564:	mov	r2, #5
   14568:	movt	r1, #1
   1456c:	bl	10eb4 <dcgettext@plt>
   14570:	ldr	r3, [r7]
   14574:	mov	r2, r0
   14578:	ldmib	r7, {r0, r1, r7}
   1457c:	stm	sp, {r0, r1, r7}
   14580:	b	14620 <__assert_fail@plt+0x3598>
   14584:	movw	r1, #30895	; 0x78af
   14588:	mov	r0, #0
   1458c:	mov	r2, #5
   14590:	movt	r1, #1
   14594:	bl	10eb4 <dcgettext@plt>
   14598:	ldr	r3, [r7]
   1459c:	mov	r2, r0
   145a0:	ldmib	r7, {r0, r1, r6, r7}
   145a4:	stm	sp, {r0, r1, r6, r7}
   145a8:	b	14620 <__assert_fail@plt+0x3598>
   145ac:	movw	r1, #30931	; 0x78d3
   145b0:	mov	r0, #0
   145b4:	mov	r2, #5
   145b8:	movt	r1, #1
   145bc:	bl	10eb4 <dcgettext@plt>
   145c0:	mov	r2, r0
   145c4:	ldr	r3, [r7]
   145c8:	ldmib	r7, {r0, r1, r6}
   145cc:	ldr	r5, [r7, #16]
   145d0:	ldr	r7, [r7, #20]
   145d4:	stm	sp, {r0, r1, r6}
   145d8:	str	r5, [sp, #12]
   145dc:	str	r7, [sp, #16]
   145e0:	b	14620 <__assert_fail@plt+0x3598>
   145e4:	movw	r1, #30971	; 0x78fb
   145e8:	mov	r0, #0
   145ec:	mov	r2, #5
   145f0:	movt	r1, #1
   145f4:	bl	10eb4 <dcgettext@plt>
   145f8:	mov	r2, r0
   145fc:	ldr	r3, [r7]
   14600:	ldmib	r7, {r0, r1, r6}
   14604:	ldr	r5, [r7, #16]
   14608:	ldr	r4, [r7, #20]
   1460c:	ldr	r7, [r7, #24]
   14610:	stm	sp, {r0, r1, r6}
   14614:	str	r5, [sp, #12]
   14618:	str	r4, [sp, #16]
   1461c:	str	r7, [sp, #20]
   14620:	mov	r0, r8
   14624:	mov	r1, #1
   14628:	b	146d4 <__assert_fail@plt+0x364c>
   1462c:	movw	r1, #31063	; 0x7957
   14630:	movt	r1, #1
   14634:	mov	r0, #0
   14638:	mov	r2, #5
   1463c:	bl	10eb4 <dcgettext@plt>
   14640:	mov	ip, r0
   14644:	ldr	r3, [r7]
   14648:	ldr	r0, [r7, #4]
   1464c:	ldr	r1, [r7, #8]
   14650:	ldr	r6, [r7, #12]
   14654:	ldr	r5, [r7, #16]
   14658:	ldr	r4, [r7, #20]
   1465c:	ldr	r2, [r7, #24]
   14660:	ldr	lr, [r7, #28]
   14664:	ldr	r7, [r7, #32]
   14668:	stm	sp, {r0, r1, r6}
   1466c:	str	r5, [sp, #12]
   14670:	str	r4, [sp, #16]
   14674:	str	r2, [sp, #20]
   14678:	str	lr, [sp, #24]
   1467c:	str	r7, [sp, #28]
   14680:	b	146c8 <__assert_fail@plt+0x3640>
   14684:	movw	r1, #31015	; 0x7927
   14688:	mov	r0, #0
   1468c:	mov	r2, #5
   14690:	movt	r1, #1
   14694:	bl	10eb4 <dcgettext@plt>
   14698:	mov	ip, r0
   1469c:	ldr	r3, [r7]
   146a0:	ldmib	r7, {r0, r1, r6}
   146a4:	ldr	r5, [r7, #16]
   146a8:	ldr	r4, [r7, #20]
   146ac:	ldr	r2, [r7, #24]
   146b0:	ldr	r7, [r7, #28]
   146b4:	stm	sp, {r0, r1, r6}
   146b8:	str	r5, [sp, #12]
   146bc:	str	r4, [sp, #16]
   146c0:	str	r2, [sp, #20]
   146c4:	str	r7, [sp, #24]
   146c8:	mov	r0, r8
   146cc:	mov	r1, #1
   146d0:	mov	r2, ip
   146d4:	bl	10fe0 <__fprintf_chk@plt>
   146d8:	sub	sp, fp, #24
   146dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146e0:	push	{r4, sl, fp, lr}
   146e4:	add	fp, sp, #8
   146e8:	sub	sp, sp, #8
   146ec:	ldr	ip, [fp, #8]
   146f0:	mov	lr, #0
   146f4:	ldr	r4, [ip, lr, lsl #2]
   146f8:	add	lr, lr, #1
   146fc:	cmp	r4, #0
   14700:	bne	146f4 <__assert_fail@plt+0x366c>
   14704:	sub	r4, lr, #1
   14708:	str	ip, [sp]
   1470c:	str	r4, [sp, #4]
   14710:	bl	143ac <__assert_fail@plt+0x3324>
   14714:	sub	sp, fp, #8
   14718:	pop	{r4, sl, fp, pc}
   1471c:	push	{fp, lr}
   14720:	mov	fp, sp
   14724:	sub	sp, sp, #48	; 0x30
   14728:	ldr	ip, [fp, #8]
   1472c:	ldr	lr, [ip]
   14730:	cmp	lr, #0
   14734:	str	lr, [sp, #8]
   14738:	beq	147d4 <__assert_fail@plt+0x374c>
   1473c:	ldr	lr, [ip, #4]
   14740:	cmp	lr, #0
   14744:	str	lr, [sp, #12]
   14748:	beq	147dc <__assert_fail@plt+0x3754>
   1474c:	ldr	lr, [ip, #8]
   14750:	cmp	lr, #0
   14754:	str	lr, [sp, #16]
   14758:	beq	147e4 <__assert_fail@plt+0x375c>
   1475c:	ldr	lr, [ip, #12]
   14760:	cmp	lr, #0
   14764:	str	lr, [sp, #20]
   14768:	beq	147ec <__assert_fail@plt+0x3764>
   1476c:	ldr	lr, [ip, #16]
   14770:	cmp	lr, #0
   14774:	str	lr, [sp, #24]
   14778:	beq	147f4 <__assert_fail@plt+0x376c>
   1477c:	ldr	lr, [ip, #20]
   14780:	cmp	lr, #0
   14784:	str	lr, [sp, #28]
   14788:	beq	147fc <__assert_fail@plt+0x3774>
   1478c:	ldr	lr, [ip, #24]
   14790:	cmp	lr, #0
   14794:	str	lr, [sp, #32]
   14798:	beq	14804 <__assert_fail@plt+0x377c>
   1479c:	ldr	lr, [ip, #28]
   147a0:	cmp	lr, #0
   147a4:	str	lr, [sp, #36]	; 0x24
   147a8:	beq	1480c <__assert_fail@plt+0x3784>
   147ac:	ldr	lr, [ip, #32]
   147b0:	cmp	lr, #0
   147b4:	str	lr, [sp, #40]	; 0x28
   147b8:	beq	14814 <__assert_fail@plt+0x378c>
   147bc:	ldr	lr, [ip, #36]	; 0x24
   147c0:	mov	ip, #10
   147c4:	cmp	lr, #0
   147c8:	str	lr, [sp, #44]	; 0x2c
   147cc:	movweq	ip, #9
   147d0:	b	14818 <__assert_fail@plt+0x3790>
   147d4:	mov	ip, #0
   147d8:	b	14818 <__assert_fail@plt+0x3790>
   147dc:	mov	ip, #1
   147e0:	b	14818 <__assert_fail@plt+0x3790>
   147e4:	mov	ip, #2
   147e8:	b	14818 <__assert_fail@plt+0x3790>
   147ec:	mov	ip, #3
   147f0:	b	14818 <__assert_fail@plt+0x3790>
   147f4:	mov	ip, #4
   147f8:	b	14818 <__assert_fail@plt+0x3790>
   147fc:	mov	ip, #5
   14800:	b	14818 <__assert_fail@plt+0x3790>
   14804:	mov	ip, #6
   14808:	b	14818 <__assert_fail@plt+0x3790>
   1480c:	mov	ip, #7
   14810:	b	14818 <__assert_fail@plt+0x3790>
   14814:	mov	ip, #8
   14818:	add	lr, sp, #8
   1481c:	str	ip, [sp, #4]
   14820:	str	lr, [sp]
   14824:	bl	143ac <__assert_fail@plt+0x3324>
   14828:	mov	sp, fp
   1482c:	pop	{fp, pc}
   14830:	push	{fp, lr}
   14834:	mov	fp, sp
   14838:	sub	sp, sp, #56	; 0x38
   1483c:	add	ip, fp, #8
   14840:	str	ip, [sp, #12]
   14844:	ldr	lr, [fp, #8]
   14848:	cmp	lr, #0
   1484c:	str	lr, [sp, #16]
   14850:	beq	148ec <__assert_fail@plt+0x3864>
   14854:	ldr	lr, [ip, #4]
   14858:	cmp	lr, #0
   1485c:	str	lr, [sp, #20]
   14860:	beq	148f4 <__assert_fail@plt+0x386c>
   14864:	ldr	lr, [ip, #8]
   14868:	cmp	lr, #0
   1486c:	str	lr, [sp, #24]
   14870:	beq	148fc <__assert_fail@plt+0x3874>
   14874:	ldr	lr, [ip, #12]
   14878:	cmp	lr, #0
   1487c:	str	lr, [sp, #28]
   14880:	beq	14904 <__assert_fail@plt+0x387c>
   14884:	ldr	lr, [ip, #16]
   14888:	cmp	lr, #0
   1488c:	str	lr, [sp, #32]
   14890:	beq	1490c <__assert_fail@plt+0x3884>
   14894:	ldr	lr, [ip, #20]
   14898:	cmp	lr, #0
   1489c:	str	lr, [sp, #36]	; 0x24
   148a0:	beq	14914 <__assert_fail@plt+0x388c>
   148a4:	ldr	lr, [ip, #24]
   148a8:	cmp	lr, #0
   148ac:	str	lr, [sp, #40]	; 0x28
   148b0:	beq	1491c <__assert_fail@plt+0x3894>
   148b4:	ldr	lr, [ip, #28]
   148b8:	cmp	lr, #0
   148bc:	str	lr, [sp, #44]	; 0x2c
   148c0:	beq	14924 <__assert_fail@plt+0x389c>
   148c4:	ldr	lr, [ip, #32]
   148c8:	cmp	lr, #0
   148cc:	str	lr, [sp, #48]	; 0x30
   148d0:	beq	1492c <__assert_fail@plt+0x38a4>
   148d4:	ldr	lr, [ip, #36]	; 0x24
   148d8:	mov	ip, #10
   148dc:	cmp	lr, #0
   148e0:	str	lr, [sp, #52]	; 0x34
   148e4:	movweq	ip, #9
   148e8:	b	14930 <__assert_fail@plt+0x38a8>
   148ec:	mov	ip, #0
   148f0:	b	14930 <__assert_fail@plt+0x38a8>
   148f4:	mov	ip, #1
   148f8:	b	14930 <__assert_fail@plt+0x38a8>
   148fc:	mov	ip, #2
   14900:	b	14930 <__assert_fail@plt+0x38a8>
   14904:	mov	ip, #3
   14908:	b	14930 <__assert_fail@plt+0x38a8>
   1490c:	mov	ip, #4
   14910:	b	14930 <__assert_fail@plt+0x38a8>
   14914:	mov	ip, #5
   14918:	b	14930 <__assert_fail@plt+0x38a8>
   1491c:	mov	ip, #6
   14920:	b	14930 <__assert_fail@plt+0x38a8>
   14924:	mov	ip, #7
   14928:	b	14930 <__assert_fail@plt+0x38a8>
   1492c:	mov	ip, #8
   14930:	add	lr, sp, #16
   14934:	str	ip, [sp, #4]
   14938:	str	lr, [sp]
   1493c:	bl	143ac <__assert_fail@plt+0x3324>
   14940:	mov	sp, fp
   14944:	pop	{fp, pc}
   14948:	push	{fp, lr}
   1494c:	mov	fp, sp
   14950:	movw	r0, #33100	; 0x814c
   14954:	movt	r0, #2
   14958:	ldr	r1, [r0]
   1495c:	movw	r0, #29727	; 0x741f
   14960:	movt	r0, #1
   14964:	bl	10e30 <fputs_unlocked@plt>
   14968:	movw	r1, #31175	; 0x79c7
   1496c:	mov	r0, #0
   14970:	mov	r2, #5
   14974:	movt	r1, #1
   14978:	bl	10eb4 <dcgettext@plt>
   1497c:	movw	r2, #31195	; 0x79db
   14980:	mov	r1, r0
   14984:	mov	r0, #1
   14988:	movt	r2, #1
   1498c:	bl	10fc8 <__printf_chk@plt>
   14990:	movw	r1, #31217	; 0x79f1
   14994:	mov	r0, #0
   14998:	mov	r2, #5
   1499c:	movt	r1, #1
   149a0:	bl	10eb4 <dcgettext@plt>
   149a4:	movw	r2, #29237	; 0x7235
   149a8:	movw	r3, #29536	; 0x7360
   149ac:	mov	r1, r0
   149b0:	mov	r0, #1
   149b4:	movt	r2, #1
   149b8:	movt	r3, #1
   149bc:	bl	10fc8 <__printf_chk@plt>
   149c0:	movw	r1, #31237	; 0x7a05
   149c4:	mov	r0, #0
   149c8:	mov	r2, #5
   149cc:	movt	r1, #1
   149d0:	bl	10eb4 <dcgettext@plt>
   149d4:	movw	r2, #31276	; 0x7a2c
   149d8:	mov	r1, r0
   149dc:	mov	r0, #1
   149e0:	movt	r2, #1
   149e4:	pop	{fp, lr}
   149e8:	b	10fc8 <__printf_chk@plt>
   149ec:	push	{r4, r5, r6, sl, fp, lr}
   149f0:	add	fp, sp, #16
   149f4:	mov	r4, r2
   149f8:	mov	r5, r1
   149fc:	mov	r6, r0
   14a00:	bl	16af4 <__assert_fail@plt+0x5a6c>
   14a04:	cmp	r0, #0
   14a08:	popne	{r4, r5, r6, sl, fp, pc}
   14a0c:	cmp	r6, #0
   14a10:	beq	14a24 <__assert_fail@plt+0x399c>
   14a14:	cmp	r5, #0
   14a18:	cmpne	r4, #0
   14a1c:	bne	14a24 <__assert_fail@plt+0x399c>
   14a20:	pop	{r4, r5, r6, sl, fp, pc}
   14a24:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14a28:	push	{r4, r5, r6, sl, fp, lr}
   14a2c:	add	fp, sp, #16
   14a30:	mov	r4, r2
   14a34:	mov	r5, r1
   14a38:	mov	r6, r0
   14a3c:	bl	16af4 <__assert_fail@plt+0x5a6c>
   14a40:	cmp	r0, #0
   14a44:	popne	{r4, r5, r6, sl, fp, pc}
   14a48:	cmp	r6, #0
   14a4c:	beq	14a60 <__assert_fail@plt+0x39d8>
   14a50:	cmp	r5, #0
   14a54:	cmpne	r4, #0
   14a58:	bne	14a60 <__assert_fail@plt+0x39d8>
   14a5c:	pop	{r4, r5, r6, sl, fp, pc}
   14a60:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14a64:	push	{fp, lr}
   14a68:	mov	fp, sp
   14a6c:	bl	16950 <__assert_fail@plt+0x58c8>
   14a70:	cmp	r0, #0
   14a74:	popne	{fp, pc}
   14a78:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14a7c:	push	{fp, lr}
   14a80:	mov	fp, sp
   14a84:	bl	16950 <__assert_fail@plt+0x58c8>
   14a88:	cmp	r0, #0
   14a8c:	popne	{fp, pc}
   14a90:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14a94:	push	{fp, lr}
   14a98:	mov	fp, sp
   14a9c:	bl	16950 <__assert_fail@plt+0x58c8>
   14aa0:	cmp	r0, #0
   14aa4:	popne	{fp, pc}
   14aa8:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14aac:	push	{r4, r5, fp, lr}
   14ab0:	add	fp, sp, #8
   14ab4:	mov	r4, r1
   14ab8:	mov	r5, r0
   14abc:	bl	16980 <__assert_fail@plt+0x58f8>
   14ac0:	cmp	r0, #0
   14ac4:	popne	{r4, r5, fp, pc}
   14ac8:	cmp	r5, #0
   14acc:	beq	14adc <__assert_fail@plt+0x3a54>
   14ad0:	cmp	r4, #0
   14ad4:	bne	14adc <__assert_fail@plt+0x3a54>
   14ad8:	pop	{r4, r5, fp, pc}
   14adc:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14ae0:	push	{fp, lr}
   14ae4:	mov	fp, sp
   14ae8:	cmp	r1, #0
   14aec:	orreq	r1, r1, #1
   14af0:	bl	16980 <__assert_fail@plt+0x58f8>
   14af4:	cmp	r0, #0
   14af8:	popne	{fp, pc}
   14afc:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14b00:	push	{fp, lr}
   14b04:	mov	fp, sp
   14b08:	clz	r3, r2
   14b0c:	lsr	ip, r3, #5
   14b10:	clz	r3, r1
   14b14:	lsr	r3, r3, #5
   14b18:	orrs	r3, r3, ip
   14b1c:	movwne	r1, #1
   14b20:	movwne	r2, #1
   14b24:	bl	16af4 <__assert_fail@plt+0x5a6c>
   14b28:	cmp	r0, #0
   14b2c:	popne	{fp, pc}
   14b30:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14b34:	push	{fp, lr}
   14b38:	mov	fp, sp
   14b3c:	mov	r2, r1
   14b40:	mov	r1, r0
   14b44:	mov	r0, #0
   14b48:	bl	16af4 <__assert_fail@plt+0x5a6c>
   14b4c:	cmp	r0, #0
   14b50:	popne	{fp, pc}
   14b54:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14b58:	push	{fp, lr}
   14b5c:	mov	fp, sp
   14b60:	mov	r2, r1
   14b64:	mov	r1, r0
   14b68:	clz	r0, r2
   14b6c:	clz	r3, r1
   14b70:	lsr	r0, r0, #5
   14b74:	lsr	r3, r3, #5
   14b78:	orrs	r0, r3, r0
   14b7c:	mov	r0, #0
   14b80:	movwne	r1, #1
   14b84:	movwne	r2, #1
   14b88:	bl	16af4 <__assert_fail@plt+0x5a6c>
   14b8c:	cmp	r0, #0
   14b90:	popne	{fp, pc}
   14b94:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14b98:	push	{r4, r5, r6, sl, fp, lr}
   14b9c:	add	fp, sp, #16
   14ba0:	ldr	r5, [r1]
   14ba4:	mov	r4, r1
   14ba8:	mov	r6, r0
   14bac:	cmp	r0, #0
   14bb0:	beq	14bc8 <__assert_fail@plt+0x3b40>
   14bb4:	mov	r0, #1
   14bb8:	add	r0, r0, r5, lsr #1
   14bbc:	adds	r5, r5, r0
   14bc0:	bcc	14bd0 <__assert_fail@plt+0x3b48>
   14bc4:	b	14c0c <__assert_fail@plt+0x3b84>
   14bc8:	cmp	r5, #0
   14bcc:	movweq	r5, #64	; 0x40
   14bd0:	mov	r0, r6
   14bd4:	mov	r1, r5
   14bd8:	mov	r2, #1
   14bdc:	bl	16af4 <__assert_fail@plt+0x5a6c>
   14be0:	cmp	r5, #0
   14be4:	mov	r1, r5
   14be8:	movwne	r1, #1
   14bec:	cmp	r0, #0
   14bf0:	bne	14c04 <__assert_fail@plt+0x3b7c>
   14bf4:	clz	r2, r6
   14bf8:	lsr	r2, r2, #5
   14bfc:	orrs	r1, r2, r1
   14c00:	bne	14c0c <__assert_fail@plt+0x3b84>
   14c04:	str	r5, [r4]
   14c08:	pop	{r4, r5, r6, sl, fp, pc}
   14c0c:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14c10:	push	{r4, r5, r6, r7, fp, lr}
   14c14:	add	fp, sp, #16
   14c18:	ldr	r5, [r1]
   14c1c:	mov	r6, r2
   14c20:	mov	r4, r1
   14c24:	mov	r7, r0
   14c28:	cmp	r0, #0
   14c2c:	beq	14c44 <__assert_fail@plt+0x3bbc>
   14c30:	mov	r0, #1
   14c34:	add	r0, r0, r5, lsr #1
   14c38:	adds	r5, r5, r0
   14c3c:	bcc	14c5c <__assert_fail@plt+0x3bd4>
   14c40:	b	14c90 <__assert_fail@plt+0x3c08>
   14c44:	cmp	r5, #0
   14c48:	bne	14c5c <__assert_fail@plt+0x3bd4>
   14c4c:	mov	r0, #64	; 0x40
   14c50:	cmp	r6, #64	; 0x40
   14c54:	udiv	r5, r0, r6
   14c58:	addhi	r5, r5, #1
   14c5c:	mov	r0, r7
   14c60:	mov	r1, r5
   14c64:	mov	r2, r6
   14c68:	bl	16af4 <__assert_fail@plt+0x5a6c>
   14c6c:	cmp	r0, #0
   14c70:	bne	14c88 <__assert_fail@plt+0x3c00>
   14c74:	cmp	r7, #0
   14c78:	beq	14c90 <__assert_fail@plt+0x3c08>
   14c7c:	cmp	r6, #0
   14c80:	cmpne	r5, #0
   14c84:	bne	14c90 <__assert_fail@plt+0x3c08>
   14c88:	str	r5, [r4]
   14c8c:	pop	{r4, r5, r6, r7, fp, pc}
   14c90:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14c94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c98:	add	fp, sp, #24
   14c9c:	mov	r8, r1
   14ca0:	ldr	r1, [r1]
   14ca4:	mov	r5, r0
   14ca8:	add	r0, r1, r1, asr #1
   14cac:	cmp	r0, r1
   14cb0:	mvnvs	r0, #-2147483648	; 0x80000000
   14cb4:	cmp	r0, r3
   14cb8:	mov	r7, r0
   14cbc:	movgt	r7, r3
   14cc0:	cmn	r3, #1
   14cc4:	movle	r7, r0
   14cc8:	ldr	r0, [fp, #8]
   14ccc:	cmn	r0, #1
   14cd0:	ble	14cf8 <__assert_fail@plt+0x3c70>
   14cd4:	cmp	r0, #0
   14cd8:	beq	14d4c <__assert_fail@plt+0x3cc4>
   14cdc:	cmn	r7, #1
   14ce0:	ble	14d20 <__assert_fail@plt+0x3c98>
   14ce4:	mvn	r4, #-2147483648	; 0x80000000
   14ce8:	udiv	r6, r4, r0
   14cec:	cmp	r6, r7
   14cf0:	bge	14d4c <__assert_fail@plt+0x3cc4>
   14cf4:	b	14d5c <__assert_fail@plt+0x3cd4>
   14cf8:	cmn	r7, #1
   14cfc:	ble	14d3c <__assert_fail@plt+0x3cb4>
   14d00:	cmn	r0, #1
   14d04:	beq	14d4c <__assert_fail@plt+0x3cc4>
   14d08:	mov	r6, #-2147483648	; 0x80000000
   14d0c:	mvn	r4, #-2147483648	; 0x80000000
   14d10:	sdiv	r6, r6, r0
   14d14:	cmp	r6, r7
   14d18:	bge	14d4c <__assert_fail@plt+0x3cc4>
   14d1c:	b	14d5c <__assert_fail@plt+0x3cd4>
   14d20:	beq	14d4c <__assert_fail@plt+0x3cc4>
   14d24:	mov	r6, #-2147483648	; 0x80000000
   14d28:	mvn	r4, #-2147483648	; 0x80000000
   14d2c:	sdiv	r6, r6, r7
   14d30:	cmp	r6, r0
   14d34:	bge	14d4c <__assert_fail@plt+0x3cc4>
   14d38:	b	14d5c <__assert_fail@plt+0x3cd4>
   14d3c:	mvn	r4, #-2147483648	; 0x80000000
   14d40:	sdiv	r6, r4, r0
   14d44:	cmp	r7, r6
   14d48:	blt	14d5c <__assert_fail@plt+0x3cd4>
   14d4c:	mul	r6, r7, r0
   14d50:	mov	r4, #64	; 0x40
   14d54:	cmp	r6, #63	; 0x3f
   14d58:	bgt	14d64 <__assert_fail@plt+0x3cdc>
   14d5c:	sdiv	r7, r4, r0
   14d60:	mul	r6, r7, r0
   14d64:	cmp	r5, #0
   14d68:	moveq	r4, #0
   14d6c:	streq	r4, [r8]
   14d70:	sub	r4, r7, r1
   14d74:	cmp	r4, r2
   14d78:	bge	14e24 <__assert_fail@plt+0x3d9c>
   14d7c:	add	r7, r1, r2
   14d80:	mov	r6, #0
   14d84:	mov	r2, #0
   14d88:	cmp	r7, r3
   14d8c:	movwgt	r6, #1
   14d90:	cmn	r3, #1
   14d94:	movwgt	r2, #1
   14d98:	cmp	r7, r1
   14d9c:	bvs	14e58 <__assert_fail@plt+0x3dd0>
   14da0:	ands	r1, r2, r6
   14da4:	bne	14e58 <__assert_fail@plt+0x3dd0>
   14da8:	cmn	r0, #1
   14dac:	ble	14dd4 <__assert_fail@plt+0x3d4c>
   14db0:	cmp	r0, #0
   14db4:	beq	14e20 <__assert_fail@plt+0x3d98>
   14db8:	cmn	r7, #1
   14dbc:	ble	14df8 <__assert_fail@plt+0x3d70>
   14dc0:	mvn	r1, #-2147483648	; 0x80000000
   14dc4:	udiv	r1, r1, r0
   14dc8:	cmp	r1, r7
   14dcc:	bge	14e20 <__assert_fail@plt+0x3d98>
   14dd0:	b	14e58 <__assert_fail@plt+0x3dd0>
   14dd4:	cmn	r7, #1
   14dd8:	ble	14e10 <__assert_fail@plt+0x3d88>
   14ddc:	cmn	r0, #1
   14de0:	beq	14e20 <__assert_fail@plt+0x3d98>
   14de4:	mov	r1, #-2147483648	; 0x80000000
   14de8:	sdiv	r1, r1, r0
   14dec:	cmp	r1, r7
   14df0:	bge	14e20 <__assert_fail@plt+0x3d98>
   14df4:	b	14e58 <__assert_fail@plt+0x3dd0>
   14df8:	beq	14e20 <__assert_fail@plt+0x3d98>
   14dfc:	mov	r1, #-2147483648	; 0x80000000
   14e00:	sdiv	r1, r1, r7
   14e04:	cmp	r1, r0
   14e08:	bge	14e20 <__assert_fail@plt+0x3d98>
   14e0c:	b	14e58 <__assert_fail@plt+0x3dd0>
   14e10:	mvn	r1, #-2147483648	; 0x80000000
   14e14:	sdiv	r1, r1, r0
   14e18:	cmp	r7, r1
   14e1c:	blt	14e58 <__assert_fail@plt+0x3dd0>
   14e20:	mul	r6, r7, r0
   14e24:	mov	r0, r5
   14e28:	mov	r1, r6
   14e2c:	bl	16980 <__assert_fail@plt+0x58f8>
   14e30:	cmp	r6, #0
   14e34:	movwne	r6, #1
   14e38:	cmp	r0, #0
   14e3c:	bne	14e50 <__assert_fail@plt+0x3dc8>
   14e40:	clz	r1, r5
   14e44:	lsr	r1, r1, #5
   14e48:	orrs	r1, r1, r6
   14e4c:	bne	14e58 <__assert_fail@plt+0x3dd0>
   14e50:	str	r7, [r8]
   14e54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e58:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14e5c:	push	{fp, lr}
   14e60:	mov	fp, sp
   14e64:	mov	r1, #1
   14e68:	bl	168fc <__assert_fail@plt+0x5874>
   14e6c:	cmp	r0, #0
   14e70:	popne	{fp, pc}
   14e74:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14e78:	push	{fp, lr}
   14e7c:	mov	fp, sp
   14e80:	bl	168fc <__assert_fail@plt+0x5874>
   14e84:	cmp	r0, #0
   14e88:	popne	{fp, pc}
   14e8c:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14e90:	push	{fp, lr}
   14e94:	mov	fp, sp
   14e98:	mov	r1, #1
   14e9c:	bl	168fc <__assert_fail@plt+0x5874>
   14ea0:	cmp	r0, #0
   14ea4:	popne	{fp, pc}
   14ea8:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14eac:	push	{fp, lr}
   14eb0:	mov	fp, sp
   14eb4:	bl	168fc <__assert_fail@plt+0x5874>
   14eb8:	cmp	r0, #0
   14ebc:	popne	{fp, pc}
   14ec0:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14ec4:	push	{r4, r5, fp, lr}
   14ec8:	add	fp, sp, #8
   14ecc:	mov	r5, r0
   14ed0:	mov	r0, r1
   14ed4:	mov	r4, r1
   14ed8:	bl	16950 <__assert_fail@plt+0x58c8>
   14edc:	cmp	r0, #0
   14ee0:	beq	14ef4 <__assert_fail@plt+0x3e6c>
   14ee4:	mov	r1, r5
   14ee8:	mov	r2, r4
   14eec:	pop	{r4, r5, fp, lr}
   14ef0:	b	10e90 <memcpy@plt>
   14ef4:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14ef8:	push	{r4, r5, fp, lr}
   14efc:	add	fp, sp, #8
   14f00:	mov	r5, r0
   14f04:	mov	r0, r1
   14f08:	mov	r4, r1
   14f0c:	bl	16950 <__assert_fail@plt+0x58c8>
   14f10:	cmp	r0, #0
   14f14:	beq	14f28 <__assert_fail@plt+0x3ea0>
   14f18:	mov	r1, r5
   14f1c:	mov	r2, r4
   14f20:	pop	{r4, r5, fp, lr}
   14f24:	b	10e90 <memcpy@plt>
   14f28:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14f2c:	push	{r4, r5, fp, lr}
   14f30:	add	fp, sp, #8
   14f34:	mov	r5, r0
   14f38:	add	r0, r1, #1
   14f3c:	mov	r4, r1
   14f40:	bl	16950 <__assert_fail@plt+0x58c8>
   14f44:	cmp	r0, #0
   14f48:	beq	14f64 <__assert_fail@plt+0x3edc>
   14f4c:	mov	r1, #0
   14f50:	mov	r2, r4
   14f54:	strb	r1, [r0, r4]
   14f58:	mov	r1, r5
   14f5c:	pop	{r4, r5, fp, lr}
   14f60:	b	10e90 <memcpy@plt>
   14f64:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14f68:	push	{r4, r5, fp, lr}
   14f6c:	add	fp, sp, #8
   14f70:	mov	r4, r0
   14f74:	bl	10f8c <strlen@plt>
   14f78:	add	r5, r0, #1
   14f7c:	mov	r0, r5
   14f80:	bl	16950 <__assert_fail@plt+0x58c8>
   14f84:	cmp	r0, #0
   14f88:	beq	14f9c <__assert_fail@plt+0x3f14>
   14f8c:	mov	r1, r4
   14f90:	mov	r2, r5
   14f94:	pop	{r4, r5, fp, lr}
   14f98:	b	10e90 <memcpy@plt>
   14f9c:	bl	14fa0 <__assert_fail@plt+0x3f18>
   14fa0:	push	{fp, lr}
   14fa4:	mov	fp, sp
   14fa8:	movw	r0, #33004	; 0x80ec
   14fac:	movw	r1, #31352	; 0x7a78
   14fb0:	mov	r2, #5
   14fb4:	movt	r0, #2
   14fb8:	movt	r1, #1
   14fbc:	ldr	r4, [r0]
   14fc0:	mov	r0, #0
   14fc4:	bl	10eb4 <dcgettext@plt>
   14fc8:	movw	r2, #29216	; 0x7220
   14fcc:	mov	r3, r0
   14fd0:	mov	r0, r4
   14fd4:	mov	r1, #0
   14fd8:	movt	r2, #1
   14fdc:	bl	10f20 <error@plt>
   14fe0:	bl	1107c <abort@plt>
   14fe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fe8:	add	fp, sp, #28
   14fec:	sub	sp, sp, #36	; 0x24
   14ff0:	cmp	r2, #37	; 0x25
   14ff4:	bcs	168dc <__assert_fail@plt+0x5854>
   14ff8:	ldr	r8, [fp, #8]
   14ffc:	mov	r9, r3
   15000:	mov	r6, r2
   15004:	mov	r7, r1
   15008:	mov	r4, r0
   1500c:	bl	10fa4 <__errno_location@plt>
   15010:	cmp	r7, #0
   15014:	add	sl, sp, #32
   15018:	mov	r5, r0
   1501c:	mov	r0, #0
   15020:	mov	r2, r6
   15024:	mov	r3, #0
   15028:	movne	sl, r7
   1502c:	str	r0, [r5]
   15030:	mov	r0, r4
   15034:	mov	r1, sl
   15038:	bl	11040 <__strtoll_internal@plt>
   1503c:	mov	r7, r1
   15040:	ldr	r1, [sl]
   15044:	cmp	r1, r4
   15048:	beq	15078 <__assert_fail@plt+0x3ff0>
   1504c:	mov	r6, r0
   15050:	ldr	r0, [r5]
   15054:	cmp	r0, #0
   15058:	beq	150b8 <__assert_fail@plt+0x4030>
   1505c:	mov	r5, #4
   15060:	cmp	r0, #34	; 0x22
   15064:	bne	164ec <__assert_fail@plt+0x5464>
   15068:	mov	r5, #1
   1506c:	cmp	r8, #0
   15070:	bne	150c4 <__assert_fail@plt+0x403c>
   15074:	b	164e8 <__assert_fail@plt+0x5460>
   15078:	mov	r5, #4
   1507c:	cmp	r8, #0
   15080:	beq	164ec <__assert_fail@plt+0x5464>
   15084:	mov	r6, r1
   15088:	ldrb	r1, [r4]
   1508c:	cmp	r1, #0
   15090:	beq	164ec <__assert_fail@plt+0x5464>
   15094:	mov	r0, r8
   15098:	bl	10f98 <strchr@plt>
   1509c:	cmp	r0, #0
   150a0:	beq	164ec <__assert_fail@plt+0x5464>
   150a4:	mov	r1, r6
   150a8:	mov	r5, #0
   150ac:	mov	r6, #1
   150b0:	mov	r7, #0
   150b4:	b	150c4 <__assert_fail@plt+0x403c>
   150b8:	mov	r5, r0
   150bc:	cmp	r8, #0
   150c0:	beq	164e8 <__assert_fail@plt+0x5460>
   150c4:	ldrb	r4, [r1]
   150c8:	cmp	r4, #0
   150cc:	beq	164e8 <__assert_fail@plt+0x5460>
   150d0:	str	r1, [sp, #20]
   150d4:	mov	r0, r8
   150d8:	mov	r1, r4
   150dc:	bl	10f98 <strchr@plt>
   150e0:	cmp	r0, #0
   150e4:	beq	15370 <__assert_fail@plt+0x42e8>
   150e8:	sub	r0, r4, #69	; 0x45
   150ec:	mov	r1, #1
   150f0:	mov	r3, #0
   150f4:	mov	r2, #1024	; 0x400
   150f8:	cmp	r0, #47	; 0x2f
   150fc:	str	r1, [sp, #16]
   15100:	bhi	1523c <__assert_fail@plt+0x41b4>
   15104:	add	r1, pc, #0
   15108:	ldr	pc, [r1, r0, lsl #2]
   1510c:	andeq	r5, r1, ip, asr #3
   15110:	andeq	r5, r1, ip, lsr r2
   15114:	andeq	r5, r1, ip, asr #3
   15118:	andeq	r5, r1, ip, lsr r2
   1511c:	andeq	r5, r1, ip, lsr r2
   15120:	andeq	r5, r1, ip, lsr r2
   15124:	andeq	r5, r1, ip, asr #3
   15128:	andeq	r5, r1, ip, lsr r2
   1512c:	andeq	r5, r1, ip, asr #3
   15130:	andeq	r5, r1, ip, lsr r2
   15134:	andeq	r5, r1, ip, lsr r2
   15138:	andeq	r5, r1, ip, asr #3
   1513c:	andeq	r5, r1, ip, lsr r2
   15140:	andeq	r5, r1, ip, lsr r2
   15144:	andeq	r5, r1, ip, lsr r2
   15148:	andeq	r5, r1, ip, asr #3
   1514c:	andeq	r5, r1, ip, lsr r2
   15150:	andeq	r5, r1, ip, lsr r2
   15154:	andeq	r5, r1, ip, lsr r2
   15158:	andeq	r5, r1, ip, lsr r2
   1515c:	andeq	r5, r1, ip, asr #3
   15160:	andeq	r5, r1, ip, asr #3
   15164:	andeq	r5, r1, ip, lsr r2
   15168:	andeq	r5, r1, ip, lsr r2
   1516c:	andeq	r5, r1, ip, lsr r2
   15170:	andeq	r5, r1, ip, lsr r2
   15174:	andeq	r5, r1, ip, lsr r2
   15178:	andeq	r5, r1, ip, lsr r2
   1517c:	andeq	r5, r1, ip, lsr r2
   15180:	andeq	r5, r1, ip, lsr r2
   15184:	andeq	r5, r1, ip, lsr r2
   15188:	andeq	r5, r1, ip, lsr r2
   1518c:	andeq	r5, r1, ip, lsr r2
   15190:	andeq	r5, r1, ip, lsr r2
   15194:	andeq	r5, r1, ip, asr #3
   15198:	andeq	r5, r1, ip, lsr r2
   1519c:	andeq	r5, r1, ip, lsr r2
   151a0:	andeq	r5, r1, ip, lsr r2
   151a4:	andeq	r5, r1, ip, asr #3
   151a8:	andeq	r5, r1, ip, lsr r2
   151ac:	andeq	r5, r1, ip, asr #3
   151b0:	andeq	r5, r1, ip, lsr r2
   151b4:	andeq	r5, r1, ip, lsr r2
   151b8:	andeq	r5, r1, ip, lsr r2
   151bc:	andeq	r5, r1, ip, lsr r2
   151c0:	andeq	r5, r1, ip, lsr r2
   151c4:	andeq	r5, r1, ip, lsr r2
   151c8:	andeq	r5, r1, ip, asr #3
   151cc:	mov	r0, r8
   151d0:	mov	r1, #48	; 0x30
   151d4:	bl	10f98 <strchr@plt>
   151d8:	cmp	r0, #0
   151dc:	beq	15208 <__assert_fail@plt+0x4180>
   151e0:	ldr	r1, [sp, #20]
   151e4:	ldrb	r0, [r1, #1]
   151e8:	cmp	r0, #66	; 0x42
   151ec:	cmpne	r0, #68	; 0x44
   151f0:	bne	15210 <__assert_fail@plt+0x4188>
   151f4:	mov	r0, #2
   151f8:	mov	r2, #1000	; 0x3e8
   151fc:	mov	r3, #0
   15200:	str	r0, [sp, #16]
   15204:	b	1523c <__assert_fail@plt+0x41b4>
   15208:	mov	r3, #0
   1520c:	b	15238 <__assert_fail@plt+0x41b0>
   15210:	cmp	r0, #105	; 0x69
   15214:	mov	r3, #0
   15218:	bne	15238 <__assert_fail@plt+0x41b0>
   1521c:	ldrb	r0, [r1, #2]
   15220:	mov	r1, #1
   15224:	mov	r2, #1024	; 0x400
   15228:	cmp	r0, #66	; 0x42
   1522c:	movweq	r1, #3
   15230:	str	r1, [sp, #16]
   15234:	b	1523c <__assert_fail@plt+0x41b4>
   15238:	mov	r2, #1024	; 0x400
   1523c:	sub	r0, r4, #66	; 0x42
   15240:	cmp	r0, #53	; 0x35
   15244:	bhi	15370 <__assert_fail@plt+0x42e8>
   15248:	add	r1, pc, #8
   1524c:	str	r3, [sp, #28]
   15250:	str	r2, [sp, #24]
   15254:	ldr	pc, [r1, r0, lsl #2]
   15258:	andeq	r5, r1, r0, ror r4
   1525c:	andeq	r5, r1, r0, ror r3
   15260:	andeq	r5, r1, r0, ror r3
   15264:	andeq	r5, r1, r4, lsl #9
   15268:	andeq	r5, r1, r0, ror r3
   1526c:	andeq	r5, r1, r0, lsr r3
   15270:	andeq	r5, r1, r0, ror r3
   15274:	andeq	r5, r1, r0, ror r3
   15278:	andeq	r5, r1, r0, ror r3
   1527c:	andeq	r5, r1, r8, ror r3
   15280:	andeq	r5, r1, r0, ror r3
   15284:	andeq	r5, r1, r8, lsr #7
   15288:	andeq	r5, r1, r0, ror r3
   1528c:	andeq	r5, r1, r0, ror r3
   15290:	andeq	r5, r1, r8, asr #9
   15294:	andeq	r5, r1, r0, ror r3
   15298:	andeq	r5, r1, r0, ror r3
   1529c:	andeq	r5, r1, r0, ror r3
   152a0:	andeq	r5, r1, r8, ror #7
   152a4:	andeq	r5, r1, r0, ror r3
   152a8:	andeq	r5, r1, r0, ror r3
   152ac:	andeq	r5, r1, r0, ror r3
   152b0:	andeq	r5, r1, r0, ror r3
   152b4:	andeq	r5, r1, ip, lsl #10
   152b8:	andeq	r5, r1, ip, lsr #8
   152bc:	andeq	r5, r1, r0, ror r3
   152c0:	andeq	r5, r1, r0, ror r3
   152c4:	andeq	r5, r1, r0, ror r3
   152c8:	andeq	r5, r1, r0, ror r3
   152cc:	andeq	r5, r1, r0, ror r3
   152d0:	andeq	r5, r1, r0, ror r3
   152d4:	andeq	r5, r1, r0, ror r3
   152d8:	andeq	r5, r1, r0, asr r5
   152dc:	andeq	r6, r1, r8, asr #9
   152e0:	andeq	r5, r1, r0, ror r3
   152e4:	andeq	r5, r1, r0, ror r3
   152e8:	andeq	r5, r1, r0, ror r3
   152ec:	andeq	r5, r1, r0, lsr r3
   152f0:	andeq	r5, r1, r0, ror r3
   152f4:	andeq	r5, r1, r0, ror r3
   152f8:	andeq	r5, r1, r0, ror r3
   152fc:	andeq	r5, r1, r8, ror r3
   15300:	andeq	r5, r1, r0, ror r3
   15304:	andeq	r5, r1, r8, lsr #7
   15308:	andeq	r5, r1, r0, ror r3
   1530c:	andeq	r5, r1, r0, ror r3
   15310:	andeq	r5, r1, r0, ror r3
   15314:	andeq	r5, r1, r0, ror r3
   15318:	andeq	r5, r1, r0, ror r3
   1531c:	andeq	r5, r1, r0, ror r3
   15320:	andeq	r5, r1, r8, ror #7
   15324:	andeq	r5, r1, r0, ror r3
   15328:	andeq	r5, r1, r0, ror r3
   1532c:	andeq	r5, r1, r4, ror #10
   15330:	cmn	r7, #1
   15334:	str	r9, [sp, #12]
   15338:	ble	15578 <__assert_fail@plt+0x44f0>
   1533c:	ldr	r3, [sp, #28]
   15340:	mvn	r0, #0
   15344:	mvn	r1, #-2147483648	; 0x80000000
   15348:	mvn	r8, #0
   1534c:	mvn	r9, #-2147483648	; 0x80000000
   15350:	bl	16d10 <__assert_fail@plt+0x5c88>
   15354:	ldr	r2, [sp, #24]
   15358:	ldr	r3, [sp, #28]
   1535c:	subs	r0, r0, r6
   15360:	mov	r4, #1
   15364:	sbcs	r0, r1, r7
   15368:	bge	155b8 <__assert_fail@plt+0x4530>
   1536c:	b	155d0 <__assert_fail@plt+0x4548>
   15370:	orr	r5, r5, #2
   15374:	b	164e8 <__assert_fail@plt+0x5460>
   15378:	cmn	r7, #1
   1537c:	ble	1560c <__assert_fail@plt+0x4584>
   15380:	ldr	r3, [sp, #28]
   15384:	mvn	r0, #0
   15388:	mvn	r1, #-2147483648	; 0x80000000
   1538c:	bl	16d10 <__assert_fail@plt+0x5c88>
   15390:	ldr	r2, [sp, #24]
   15394:	ldr	r3, [sp, #28]
   15398:	subs	r0, r0, r6
   1539c:	sbcs	r0, r1, r7
   153a0:	bge	15640 <__assert_fail@plt+0x45b8>
   153a4:	b	15d50 <__assert_fail@plt+0x4cc8>
   153a8:	cmn	r7, #1
   153ac:	str	r9, [sp, #12]
   153b0:	ble	15654 <__assert_fail@plt+0x45cc>
   153b4:	ldr	r3, [sp, #28]
   153b8:	mvn	r0, #0
   153bc:	mvn	r1, #-2147483648	; 0x80000000
   153c0:	mvn	r8, #0
   153c4:	mvn	r9, #-2147483648	; 0x80000000
   153c8:	bl	16d10 <__assert_fail@plt+0x5c88>
   153cc:	ldr	r2, [sp, #24]
   153d0:	ldr	r3, [sp, #28]
   153d4:	subs	r0, r0, r6
   153d8:	mov	r4, #1
   153dc:	sbcs	r0, r1, r7
   153e0:	bge	15694 <__assert_fail@plt+0x460c>
   153e4:	b	156ac <__assert_fail@plt+0x4624>
   153e8:	cmn	r7, #1
   153ec:	str	r9, [sp, #12]
   153f0:	ble	156e4 <__assert_fail@plt+0x465c>
   153f4:	ldr	r3, [sp, #28]
   153f8:	mvn	r0, #0
   153fc:	mvn	r1, #-2147483648	; 0x80000000
   15400:	mvn	r9, #-2147483648	; 0x80000000
   15404:	str	r0, [sp, #8]
   15408:	mvn	r0, #0
   1540c:	bl	16d10 <__assert_fail@plt+0x5c88>
   15410:	ldr	r2, [sp, #24]
   15414:	ldr	r3, [sp, #28]
   15418:	subs	r0, r0, r6
   1541c:	mov	r4, #1
   15420:	sbcs	r0, r1, r7
   15424:	bge	15728 <__assert_fail@plt+0x46a0>
   15428:	b	15744 <__assert_fail@plt+0x46bc>
   1542c:	cmp	r7, #0
   15430:	str	r9, [sp, #12]
   15434:	bmi	15a2c <__assert_fail@plt+0x49a4>
   15438:	ldr	r3, [sp, #28]
   1543c:	mvn	r0, #0
   15440:	mvn	r1, #-2147483648	; 0x80000000
   15444:	mvn	r9, #-2147483648	; 0x80000000
   15448:	str	r0, [sp, #8]
   1544c:	mvn	r0, #0
   15450:	bl	16d10 <__assert_fail@plt+0x5c88>
   15454:	ldr	r2, [sp, #24]
   15458:	ldr	r3, [sp, #28]
   1545c:	subs	r0, r0, r6
   15460:	mov	r4, #1
   15464:	sbcs	r0, r1, r7
   15468:	bge	15a70 <__assert_fail@plt+0x49e8>
   1546c:	b	15a8c <__assert_fail@plt+0x4a04>
   15470:	cmn	r7, #1
   15474:	ble	15ac8 <__assert_fail@plt+0x4a40>
   15478:	cmp	r7, #2097152	; 0x200000
   1547c:	blt	15af8 <__assert_fail@plt+0x4a70>
   15480:	b	15d50 <__assert_fail@plt+0x4cc8>
   15484:	cmp	r7, #0
   15488:	str	r9, [sp, #12]
   1548c:	bmi	15b08 <__assert_fail@plt+0x4a80>
   15490:	ldr	r3, [sp, #28]
   15494:	mvn	r0, #0
   15498:	mvn	r1, #-2147483648	; 0x80000000
   1549c:	mvn	r9, #-2147483648	; 0x80000000
   154a0:	str	r0, [sp, #8]
   154a4:	mvn	r0, #0
   154a8:	bl	16d10 <__assert_fail@plt+0x5c88>
   154ac:	ldr	r2, [sp, #24]
   154b0:	ldr	r3, [sp, #28]
   154b4:	subs	r0, r0, r6
   154b8:	mov	r4, #1
   154bc:	sbcs	r0, r1, r7
   154c0:	bge	15b4c <__assert_fail@plt+0x4ac4>
   154c4:	b	15b68 <__assert_fail@plt+0x4ae0>
   154c8:	cmp	r7, #0
   154cc:	str	r9, [sp, #12]
   154d0:	bmi	15ba4 <__assert_fail@plt+0x4b1c>
   154d4:	ldr	r3, [sp, #28]
   154d8:	mvn	r0, #0
   154dc:	mvn	r1, #-2147483648	; 0x80000000
   154e0:	mvn	r8, #-2147483648	; 0x80000000
   154e4:	str	r0, [sp, #8]
   154e8:	mvn	r0, #0
   154ec:	bl	16d10 <__assert_fail@plt+0x5c88>
   154f0:	ldr	r2, [sp, #24]
   154f4:	ldr	r3, [sp, #28]
   154f8:	subs	r0, r0, r6
   154fc:	mov	r4, #1
   15500:	sbcs	r0, r1, r7
   15504:	bge	15be8 <__assert_fail@plt+0x4b60>
   15508:	b	15c04 <__assert_fail@plt+0x4b7c>
   1550c:	cmp	r7, #0
   15510:	str	r9, [sp, #12]
   15514:	bmi	15c40 <__assert_fail@plt+0x4bb8>
   15518:	ldr	r3, [sp, #28]
   1551c:	mvn	r0, #0
   15520:	mvn	r1, #-2147483648	; 0x80000000
   15524:	mvn	r9, #-2147483648	; 0x80000000
   15528:	str	r0, [sp, #8]
   1552c:	mvn	r0, #0
   15530:	bl	16d10 <__assert_fail@plt+0x5c88>
   15534:	ldr	r2, [sp, #24]
   15538:	ldr	r3, [sp, #28]
   1553c:	subs	r0, r0, r6
   15540:	mov	r4, #1
   15544:	sbcs	r0, r1, r7
   15548:	bge	15c84 <__assert_fail@plt+0x4bfc>
   1554c:	b	15ca0 <__assert_fail@plt+0x4c18>
   15550:	cmn	r7, #1
   15554:	ble	15ce0 <__assert_fail@plt+0x4c58>
   15558:	cmp	r7, #4194304	; 0x400000
   1555c:	blt	15d10 <__assert_fail@plt+0x4c88>
   15560:	b	15d50 <__assert_fail@plt+0x4cc8>
   15564:	cmn	r7, #1
   15568:	ble	15d20 <__assert_fail@plt+0x4c98>
   1556c:	cmp	r7, #1073741824	; 0x40000000
   15570:	bge	15d50 <__assert_fail@plt+0x4cc8>
   15574:	b	15d70 <__assert_fail@plt+0x4ce8>
   15578:	and	r0, r6, r7
   1557c:	cmn	r0, #1
   15580:	beq	155b8 <__assert_fail@plt+0x4530>
   15584:	mov	r0, #0
   15588:	mov	r1, #-2147483648	; 0x80000000
   1558c:	mov	r2, r6
   15590:	mov	r3, r7
   15594:	mov	r8, #0
   15598:	mov	r9, #-2147483648	; 0x80000000
   1559c:	bl	16c3c <__assert_fail@plt+0x5bb4>
   155a0:	ldr	r2, [sp, #24]
   155a4:	ldr	r3, [sp, #28]
   155a8:	mov	r4, #1
   155ac:	subs	r0, r0, r2
   155b0:	sbcs	r0, r1, r3
   155b4:	blt	15780 <__assert_fail@plt+0x46f8>
   155b8:	umull	r8, r0, r6, r2
   155bc:	mov	r4, #0
   155c0:	mla	r0, r6, r3, r0
   155c4:	mla	r9, r7, r2, r0
   155c8:	cmp	r9, #0
   155cc:	bmi	15780 <__assert_fail@plt+0x46f8>
   155d0:	ldr	r3, [sp, #28]
   155d4:	mvn	r0, #-2147483648	; 0x80000000
   155d8:	mvn	r1, #-2147483648	; 0x80000000
   155dc:	mov	r6, r4
   155e0:	mvn	r4, #0
   155e4:	str	r0, [sp, #8]
   155e8:	mvn	r0, #0
   155ec:	bl	16d10 <__assert_fail@plt+0x5c88>
   155f0:	ldr	r2, [sp, #24]
   155f4:	ldr	r3, [sp, #28]
   155f8:	subs	r0, r0, r8
   155fc:	mov	r7, #1
   15600:	sbcs	r0, r1, r9
   15604:	bge	157bc <__assert_fail@plt+0x4734>
   15608:	b	157d8 <__assert_fail@plt+0x4750>
   1560c:	and	r0, r6, r7
   15610:	cmn	r0, #1
   15614:	beq	15640 <__assert_fail@plt+0x45b8>
   15618:	mov	r0, #0
   1561c:	mov	r1, #-2147483648	; 0x80000000
   15620:	mov	r2, r6
   15624:	mov	r3, r7
   15628:	bl	16c3c <__assert_fail@plt+0x5bb4>
   1562c:	ldr	r2, [sp, #24]
   15630:	ldr	r3, [sp, #28]
   15634:	subs	r0, r0, r2
   15638:	sbcs	r0, r1, r3
   1563c:	blt	15d50 <__assert_fail@plt+0x4cc8>
   15640:	umull	r0, r1, r6, r2
   15644:	mla	r1, r6, r3, r1
   15648:	mla	r7, r7, r2, r1
   1564c:	mov	r6, r0
   15650:	b	164c8 <__assert_fail@plt+0x5440>
   15654:	and	r0, r6, r7
   15658:	cmn	r0, #1
   1565c:	beq	15694 <__assert_fail@plt+0x460c>
   15660:	mov	r0, #0
   15664:	mov	r1, #-2147483648	; 0x80000000
   15668:	mov	r2, r6
   1566c:	mov	r3, r7
   15670:	mov	r8, #0
   15674:	mov	r9, #-2147483648	; 0x80000000
   15678:	bl	16c3c <__assert_fail@plt+0x5bb4>
   1567c:	ldr	r2, [sp, #24]
   15680:	ldr	r3, [sp, #28]
   15684:	mov	r4, #1
   15688:	subs	r0, r0, r2
   1568c:	sbcs	r0, r1, r3
   15690:	blt	1586c <__assert_fail@plt+0x47e4>
   15694:	umull	r8, r0, r6, r2
   15698:	mov	r4, #0
   1569c:	mla	r0, r6, r3, r0
   156a0:	mla	r9, r7, r2, r0
   156a4:	cmp	r9, #0
   156a8:	bmi	1586c <__assert_fail@plt+0x47e4>
   156ac:	ldr	r3, [sp, #28]
   156b0:	mvn	r0, #0
   156b4:	mvn	r1, #-2147483648	; 0x80000000
   156b8:	str	r4, [sp, #8]
   156bc:	mvn	r6, #0
   156c0:	mvn	r7, #-2147483648	; 0x80000000
   156c4:	bl	16d10 <__assert_fail@plt+0x5c88>
   156c8:	ldr	r4, [sp, #24]
   156cc:	ldr	r3, [sp, #28]
   156d0:	subs	r0, r0, r8
   156d4:	mov	r2, #1
   156d8:	sbcs	r0, r1, r9
   156dc:	bge	158a4 <__assert_fail@plt+0x481c>
   156e0:	b	159dc <__assert_fail@plt+0x4954>
   156e4:	and	r0, r6, r7
   156e8:	cmn	r0, #1
   156ec:	beq	15728 <__assert_fail@plt+0x46a0>
   156f0:	mov	r0, #0
   156f4:	mov	r1, #-2147483648	; 0x80000000
   156f8:	mov	r2, r6
   156fc:	mov	r3, r7
   15700:	bl	16c3c <__assert_fail@plt+0x5bb4>
   15704:	ldr	r2, [sp, #24]
   15708:	ldr	r3, [sp, #28]
   1570c:	mov	r4, #1
   15710:	mov	r9, #-2147483648	; 0x80000000
   15714:	subs	r0, r0, r2
   15718:	sbcs	r0, r1, r3
   1571c:	mov	r0, #0
   15720:	str	r0, [sp, #8]
   15724:	blt	158b8 <__assert_fail@plt+0x4830>
   15728:	umull	r1, r0, r6, r2
   1572c:	mov	r4, #0
   15730:	mla	r0, r6, r3, r0
   15734:	mla	r9, r7, r2, r0
   15738:	str	r1, [sp, #8]
   1573c:	cmp	r9, #0
   15740:	bmi	158b8 <__assert_fail@plt+0x4830>
   15744:	ldr	r3, [sp, #28]
   15748:	mvn	r0, #0
   1574c:	mvn	r1, #-2147483648	; 0x80000000
   15750:	str	r4, [sp, #4]
   15754:	mvn	r6, #0
   15758:	mvn	r8, #-2147483648	; 0x80000000
   1575c:	bl	16d10 <__assert_fail@plt+0x5c88>
   15760:	ldr	r4, [sp, #8]
   15764:	ldr	r2, [sp, #24]
   15768:	ldr	r3, [sp, #28]
   1576c:	mov	r7, #1
   15770:	subs	r0, r0, r4
   15774:	sbcs	r0, r1, r9
   15778:	bge	158f4 <__assert_fail@plt+0x486c>
   1577c:	b	1590c <__assert_fail@plt+0x4884>
   15780:	mov	r0, #-2147483648	; 0x80000000
   15784:	mov	r1, #-2147483648	; 0x80000000
   15788:	mov	r2, r8
   1578c:	mov	r3, r9
   15790:	mov	r6, r4
   15794:	mov	r4, #0
   15798:	str	r0, [sp, #8]
   1579c:	mov	r0, #0
   157a0:	bl	16c3c <__assert_fail@plt+0x5bb4>
   157a4:	ldr	r2, [sp, #24]
   157a8:	ldr	r3, [sp, #28]
   157ac:	mov	r7, #1
   157b0:	subs	r0, r0, r2
   157b4:	sbcs	r0, r1, r3
   157b8:	blt	1582c <__assert_fail@plt+0x47a4>
   157bc:	umull	r4, r0, r8, r2
   157c0:	mov	r7, r6
   157c4:	mla	r0, r8, r3, r0
   157c8:	mla	r0, r9, r2, r0
   157cc:	cmp	r0, #0
   157d0:	str	r0, [sp, #8]
   157d4:	bmi	1582c <__assert_fail@plt+0x47a4>
   157d8:	ldr	r3, [sp, #28]
   157dc:	mvn	r0, #0
   157e0:	mvn	r1, #-2147483648	; 0x80000000
   157e4:	mov	r9, r7
   157e8:	mvn	r6, #0
   157ec:	mvn	r7, #-2147483648	; 0x80000000
   157f0:	bl	16d10 <__assert_fail@plt+0x5c88>
   157f4:	ldr	r8, [sp, #8]
   157f8:	ldr	r3, [sp, #24]
   157fc:	ldr	ip, [sp, #28]
   15800:	subs	r0, r0, r4
   15804:	mov	r2, #1
   15808:	sbcs	r0, r1, r8
   1580c:	blt	15820 <__assert_fail@plt+0x4798>
   15810:	umull	r6, r0, r4, r3
   15814:	mov	r2, #0
   15818:	mla	r0, r4, ip, r0
   1581c:	mla	r7, r8, r3, r0
   15820:	orr	r3, r2, r9
   15824:	ldr	r9, [sp, #12]
   15828:	b	164c8 <__assert_fail@plt+0x5440>
   1582c:	ldr	r8, [sp, #8]
   15830:	mov	r0, #0
   15834:	mov	r1, #-2147483648	; 0x80000000
   15838:	mov	r2, r4
   1583c:	mov	r9, r7
   15840:	mov	r6, #0
   15844:	mov	r7, #-2147483648	; 0x80000000
   15848:	mov	r3, r8
   1584c:	bl	16c3c <__assert_fail@plt+0x5bb4>
   15850:	ldr	r3, [sp, #24]
   15854:	ldr	ip, [sp, #28]
   15858:	mov	r2, #1
   1585c:	subs	r0, r0, r3
   15860:	sbcs	r0, r1, ip
   15864:	bge	15810 <__assert_fail@plt+0x4788>
   15868:	b	15820 <__assert_fail@plt+0x4798>
   1586c:	mov	r0, #0
   15870:	mov	r1, #-2147483648	; 0x80000000
   15874:	mov	r2, r8
   15878:	mov	r3, r9
   1587c:	str	r4, [sp, #8]
   15880:	mov	r6, #0
   15884:	mov	r7, #-2147483648	; 0x80000000
   15888:	bl	16c3c <__assert_fail@plt+0x5bb4>
   1588c:	ldr	r4, [sp, #24]
   15890:	ldr	r3, [sp, #28]
   15894:	mov	r2, #1
   15898:	subs	r0, r0, r4
   1589c:	sbcs	r0, r1, r3
   158a0:	blt	159dc <__assert_fail@plt+0x4954>
   158a4:	umull	r6, r0, r8, r4
   158a8:	mov	r2, #0
   158ac:	mla	r0, r8, r3, r0
   158b0:	mla	r7, r9, r4, r0
   158b4:	b	159dc <__assert_fail@plt+0x4954>
   158b8:	str	r4, [sp, #4]
   158bc:	ldr	r4, [sp, #8]
   158c0:	mov	r0, #0
   158c4:	mov	r1, #-2147483648	; 0x80000000
   158c8:	mov	r3, r9
   158cc:	mov	r2, r4
   158d0:	bl	16c3c <__assert_fail@plt+0x5bb4>
   158d4:	ldr	r2, [sp, #24]
   158d8:	ldr	r3, [sp, #28]
   158dc:	mov	r7, #1
   158e0:	mov	r6, #0
   158e4:	mov	r8, #-2147483648	; 0x80000000
   158e8:	subs	r0, r0, r2
   158ec:	sbcs	r0, r1, r3
   158f0:	blt	15944 <__assert_fail@plt+0x48bc>
   158f4:	umull	r6, r0, r4, r2
   158f8:	ldr	r7, [sp, #4]
   158fc:	mla	r0, r4, r3, r0
   15900:	mla	r8, r9, r2, r0
   15904:	cmp	r8, #0
   15908:	bmi	15944 <__assert_fail@plt+0x48bc>
   1590c:	ldr	r3, [sp, #28]
   15910:	mvn	r0, #0
   15914:	mvn	r1, #-2147483648	; 0x80000000
   15918:	str	r7, [sp, #8]
   1591c:	mvn	r4, #0
   15920:	mvn	r9, #-2147483648	; 0x80000000
   15924:	bl	16d10 <__assert_fail@plt+0x5c88>
   15928:	ldr	r2, [sp, #24]
   1592c:	ldr	r3, [sp, #28]
   15930:	subs	r0, r0, r6
   15934:	mov	r7, #1
   15938:	sbcs	r0, r1, r8
   1593c:	bge	1597c <__assert_fail@plt+0x48f4>
   15940:	b	15994 <__assert_fail@plt+0x490c>
   15944:	mov	r0, #0
   15948:	mov	r1, #-2147483648	; 0x80000000
   1594c:	mov	r2, r6
   15950:	mov	r3, r8
   15954:	str	r7, [sp, #8]
   15958:	bl	16c3c <__assert_fail@plt+0x5bb4>
   1595c:	ldr	r2, [sp, #24]
   15960:	ldr	r3, [sp, #28]
   15964:	mov	r7, #1
   15968:	mov	r4, #0
   1596c:	mov	r9, #-2147483648	; 0x80000000
   15970:	subs	r0, r0, r2
   15974:	sbcs	r0, r1, r3
   15978:	blt	159ec <__assert_fail@plt+0x4964>
   1597c:	umull	r4, r0, r6, r2
   15980:	ldr	r7, [sp, #8]
   15984:	mla	r0, r6, r3, r0
   15988:	mla	r9, r8, r2, r0
   1598c:	cmp	r9, #0
   15990:	bmi	159ec <__assert_fail@plt+0x4964>
   15994:	ldr	r3, [sp, #28]
   15998:	mvn	r0, #0
   1599c:	mvn	r1, #-2147483648	; 0x80000000
   159a0:	str	r7, [sp, #8]
   159a4:	mvn	r6, #0
   159a8:	mvn	r7, #-2147483648	; 0x80000000
   159ac:	bl	16d10 <__assert_fail@plt+0x5c88>
   159b0:	ldr	r3, [sp, #24]
   159b4:	ldr	ip, [sp, #28]
   159b8:	subs	r0, r0, r4
   159bc:	mov	r2, #1
   159c0:	mov	r8, r4
   159c4:	sbcs	r0, r1, r9
   159c8:	blt	159dc <__assert_fail@plt+0x4954>
   159cc:	umull	r6, r0, r8, r3
   159d0:	mov	r2, #0
   159d4:	mla	r0, r8, ip, r0
   159d8:	mla	r7, r9, r3, r0
   159dc:	ldr	r0, [sp, #8]
   159e0:	ldr	r9, [sp, #12]
   159e4:	orr	r3, r2, r0
   159e8:	b	164c8 <__assert_fail@plt+0x5440>
   159ec:	mov	r0, #0
   159f0:	mov	r1, #-2147483648	; 0x80000000
   159f4:	mov	r2, r4
   159f8:	mov	r3, r9
   159fc:	str	r7, [sp, #8]
   15a00:	mov	r8, r4
   15a04:	bl	16c3c <__assert_fail@plt+0x5bb4>
   15a08:	ldr	r3, [sp, #24]
   15a0c:	ldr	ip, [sp, #28]
   15a10:	mov	r2, #1
   15a14:	mov	r6, #0
   15a18:	mov	r7, #-2147483648	; 0x80000000
   15a1c:	subs	r0, r0, r3
   15a20:	sbcs	r0, r1, ip
   15a24:	bge	159cc <__assert_fail@plt+0x4944>
   15a28:	b	159dc <__assert_fail@plt+0x4954>
   15a2c:	and	r0, r6, r7
   15a30:	cmn	r0, #1
   15a34:	beq	15a70 <__assert_fail@plt+0x49e8>
   15a38:	mov	r0, #0
   15a3c:	mov	r1, #-2147483648	; 0x80000000
   15a40:	mov	r2, r6
   15a44:	mov	r3, r7
   15a48:	bl	16c3c <__assert_fail@plt+0x5bb4>
   15a4c:	ldr	r2, [sp, #24]
   15a50:	ldr	r3, [sp, #28]
   15a54:	mov	r4, #1
   15a58:	mov	r9, #-2147483648	; 0x80000000
   15a5c:	subs	r0, r0, r2
   15a60:	sbcs	r0, r1, r3
   15a64:	mov	r0, #0
   15a68:	str	r0, [sp, #8]
   15a6c:	blt	15d80 <__assert_fail@plt+0x4cf8>
   15a70:	umull	r1, r0, r6, r2
   15a74:	mov	r4, #0
   15a78:	mla	r0, r6, r3, r0
   15a7c:	mla	r9, r7, r2, r0
   15a80:	str	r1, [sp, #8]
   15a84:	cmp	r9, #0
   15a88:	bmi	15d80 <__assert_fail@plt+0x4cf8>
   15a8c:	ldr	r3, [sp, #28]
   15a90:	mvn	r0, #0
   15a94:	mvn	r1, #-2147483648	; 0x80000000
   15a98:	str	r4, [sp, #4]
   15a9c:	mvn	r8, #0
   15aa0:	mvn	r4, #-2147483648	; 0x80000000
   15aa4:	bl	16d10 <__assert_fail@plt+0x5c88>
   15aa8:	ldr	r6, [sp, #8]
   15aac:	ldr	r2, [sp, #24]
   15ab0:	ldr	r3, [sp, #28]
   15ab4:	mov	r7, #1
   15ab8:	subs	r0, r0, r6
   15abc:	sbcs	r0, r1, r9
   15ac0:	bge	15dbc <__assert_fail@plt+0x4d34>
   15ac4:	b	15dd4 <__assert_fail@plt+0x4d4c>
   15ac8:	and	r0, r6, r7
   15acc:	cmn	r0, #1
   15ad0:	beq	15af8 <__assert_fail@plt+0x4a70>
   15ad4:	mov	r0, #0
   15ad8:	mov	r1, #-2147483648	; 0x80000000
   15adc:	mov	r2, r6
   15ae0:	mov	r3, r7
   15ae4:	bl	16c3c <__assert_fail@plt+0x5bb4>
   15ae8:	ldr	r3, [sp, #28]
   15aec:	subs	r0, r0, #1024	; 0x400
   15af0:	sbcs	r0, r1, #0
   15af4:	blt	15d50 <__assert_fail@plt+0x4cc8>
   15af8:	lsl	r0, r7, #10
   15afc:	orr	r7, r0, r6, lsr #22
   15b00:	lsl	r6, r6, #10
   15b04:	b	164c8 <__assert_fail@plt+0x5440>
   15b08:	and	r0, r6, r7
   15b0c:	cmn	r0, #1
   15b10:	beq	15b4c <__assert_fail@plt+0x4ac4>
   15b14:	mov	r0, #0
   15b18:	mov	r1, #-2147483648	; 0x80000000
   15b1c:	mov	r2, r6
   15b20:	mov	r3, r7
   15b24:	bl	16c3c <__assert_fail@plt+0x5bb4>
   15b28:	ldr	r2, [sp, #24]
   15b2c:	ldr	r3, [sp, #28]
   15b30:	mov	r4, #1
   15b34:	mov	r9, #-2147483648	; 0x80000000
   15b38:	subs	r0, r0, r2
   15b3c:	sbcs	r0, r1, r3
   15b40:	mov	r0, #0
   15b44:	str	r0, [sp, #8]
   15b48:	blt	16098 <__assert_fail@plt+0x5010>
   15b4c:	umull	r1, r0, r6, r2
   15b50:	mov	r4, #0
   15b54:	mla	r0, r6, r3, r0
   15b58:	mla	r9, r7, r2, r0
   15b5c:	str	r1, [sp, #8]
   15b60:	cmp	r9, #0
   15b64:	bmi	16098 <__assert_fail@plt+0x5010>
   15b68:	ldr	r3, [sp, #28]
   15b6c:	mvn	r0, #0
   15b70:	mvn	r1, #-2147483648	; 0x80000000
   15b74:	str	r4, [sp, #4]
   15b78:	mvn	r8, #0
   15b7c:	mvn	r4, #-2147483648	; 0x80000000
   15b80:	bl	16d10 <__assert_fail@plt+0x5c88>
   15b84:	ldr	r6, [sp, #8]
   15b88:	ldr	r2, [sp, #24]
   15b8c:	ldr	r3, [sp, #28]
   15b90:	mov	r7, #1
   15b94:	subs	r0, r0, r6
   15b98:	sbcs	r0, r1, r9
   15b9c:	bge	160d4 <__assert_fail@plt+0x504c>
   15ba0:	b	160ec <__assert_fail@plt+0x5064>
   15ba4:	and	r0, r6, r7
   15ba8:	cmn	r0, #1
   15bac:	beq	15be8 <__assert_fail@plt+0x4b60>
   15bb0:	mov	r0, #0
   15bb4:	mov	r1, #-2147483648	; 0x80000000
   15bb8:	mov	r2, r6
   15bbc:	mov	r3, r7
   15bc0:	bl	16c3c <__assert_fail@plt+0x5bb4>
   15bc4:	ldr	r2, [sp, #24]
   15bc8:	ldr	r3, [sp, #28]
   15bcc:	mov	r4, #1
   15bd0:	mov	r8, #-2147483648	; 0x80000000
   15bd4:	subs	r0, r0, r2
   15bd8:	sbcs	r0, r1, r3
   15bdc:	mov	r0, #0
   15be0:	str	r0, [sp, #8]
   15be4:	blt	16314 <__assert_fail@plt+0x528c>
   15be8:	umull	r1, r0, r6, r2
   15bec:	mov	r4, #0
   15bf0:	mla	r0, r6, r3, r0
   15bf4:	mla	r8, r7, r2, r0
   15bf8:	str	r1, [sp, #8]
   15bfc:	cmp	r8, #0
   15c00:	bmi	16314 <__assert_fail@plt+0x528c>
   15c04:	ldr	r3, [sp, #28]
   15c08:	mvn	r0, #0
   15c0c:	mvn	r1, #-2147483648	; 0x80000000
   15c10:	str	r4, [sp, #4]
   15c14:	mvn	r9, #0
   15c18:	mvn	r4, #-2147483648	; 0x80000000
   15c1c:	bl	16d10 <__assert_fail@plt+0x5c88>
   15c20:	ldr	r6, [sp, #8]
   15c24:	ldr	r2, [sp, #24]
   15c28:	ldr	r3, [sp, #28]
   15c2c:	mov	r7, #1
   15c30:	subs	r0, r0, r6
   15c34:	sbcs	r0, r1, r8
   15c38:	bge	16350 <__assert_fail@plt+0x52c8>
   15c3c:	b	16368 <__assert_fail@plt+0x52e0>
   15c40:	and	r0, r6, r7
   15c44:	cmn	r0, #1
   15c48:	beq	15c84 <__assert_fail@plt+0x4bfc>
   15c4c:	mov	r0, #0
   15c50:	mov	r1, #-2147483648	; 0x80000000
   15c54:	mov	r2, r6
   15c58:	mov	r3, r7
   15c5c:	bl	16c3c <__assert_fail@plt+0x5bb4>
   15c60:	ldr	r2, [sp, #24]
   15c64:	ldr	r3, [sp, #28]
   15c68:	mov	r4, #1
   15c6c:	mov	r9, #-2147483648	; 0x80000000
   15c70:	subs	r0, r0, r2
   15c74:	sbcs	r0, r1, r3
   15c78:	mov	r0, #0
   15c7c:	str	r0, [sp, #8]
   15c80:	blt	16530 <__assert_fail@plt+0x54a8>
   15c84:	umull	r1, r0, r6, r2
   15c88:	mov	r4, #0
   15c8c:	mla	r0, r6, r3, r0
   15c90:	mla	r9, r7, r2, r0
   15c94:	str	r1, [sp, #8]
   15c98:	cmp	r9, #0
   15c9c:	bmi	16530 <__assert_fail@plt+0x54a8>
   15ca0:	ldr	r3, [sp, #28]
   15ca4:	mvn	r0, #0
   15ca8:	mvn	r1, #-2147483648	; 0x80000000
   15cac:	str	r4, [sp]
   15cb0:	mvn	r8, #-2147483648	; 0x80000000
   15cb4:	str	r0, [sp, #4]
   15cb8:	mvn	r0, #0
   15cbc:	bl	16d10 <__assert_fail@plt+0x5c88>
   15cc0:	ldr	r6, [sp, #8]
   15cc4:	ldr	r2, [sp, #24]
   15cc8:	ldr	r3, [sp, #28]
   15ccc:	mov	r7, #1
   15cd0:	subs	r0, r0, r6
   15cd4:	sbcs	r0, r1, r9
   15cd8:	bge	16570 <__assert_fail@plt+0x54e8>
   15cdc:	b	1658c <__assert_fail@plt+0x5504>
   15ce0:	and	r0, r6, r7
   15ce4:	cmn	r0, #1
   15ce8:	beq	15d10 <__assert_fail@plt+0x4c88>
   15cec:	mov	r0, #0
   15cf0:	mov	r1, #-2147483648	; 0x80000000
   15cf4:	mov	r2, r6
   15cf8:	mov	r3, r7
   15cfc:	bl	16c3c <__assert_fail@plt+0x5bb4>
   15d00:	ldr	r3, [sp, #28]
   15d04:	subs	r0, r0, #512	; 0x200
   15d08:	sbcs	r0, r1, #0
   15d0c:	blt	15d50 <__assert_fail@plt+0x4cc8>
   15d10:	lsl	r0, r7, #9
   15d14:	orr	r7, r0, r6, lsr #23
   15d18:	lsl	r6, r6, #9
   15d1c:	b	164c8 <__assert_fail@plt+0x5440>
   15d20:	and	r0, r6, r7
   15d24:	cmn	r0, #1
   15d28:	beq	15d70 <__assert_fail@plt+0x4ce8>
   15d2c:	mov	r0, #0
   15d30:	mov	r1, #-2147483648	; 0x80000000
   15d34:	mov	r2, r6
   15d38:	mov	r3, r7
   15d3c:	bl	16c3c <__assert_fail@plt+0x5bb4>
   15d40:	ldr	r3, [sp, #28]
   15d44:	subs	r0, r0, #2
   15d48:	sbcs	r0, r1, #0
   15d4c:	bge	15d70 <__assert_fail@plt+0x4ce8>
   15d50:	cmp	r7, #0
   15d54:	mvn	r0, #-2147483648	; 0x80000000
   15d58:	mvn	r6, #0
   15d5c:	mov	r3, #1
   15d60:	movmi	r0, #-2147483648	; 0x80000000
   15d64:	movwmi	r6, #0
   15d68:	mov	r7, r0
   15d6c:	b	164c8 <__assert_fail@plt+0x5440>
   15d70:	lsl	r0, r7, #1
   15d74:	orr	r7, r0, r6, lsr #31
   15d78:	lsl	r6, r6, #1
   15d7c:	b	164c8 <__assert_fail@plt+0x5440>
   15d80:	ldr	r6, [sp, #8]
   15d84:	mov	r0, #0
   15d88:	mov	r1, #-2147483648	; 0x80000000
   15d8c:	mov	r3, r9
   15d90:	str	r4, [sp, #4]
   15d94:	mov	r2, r6
   15d98:	bl	16c3c <__assert_fail@plt+0x5bb4>
   15d9c:	ldr	r2, [sp, #24]
   15da0:	ldr	r3, [sp, #28]
   15da4:	mov	r7, #1
   15da8:	mov	r8, #0
   15dac:	mov	r4, #-2147483648	; 0x80000000
   15db0:	subs	r0, r0, r2
   15db4:	sbcs	r0, r1, r3
   15db8:	blt	15e0c <__assert_fail@plt+0x4d84>
   15dbc:	umull	r8, r0, r6, r2
   15dc0:	ldr	r7, [sp, #4]
   15dc4:	mla	r0, r6, r3, r0
   15dc8:	mla	r4, r9, r2, r0
   15dcc:	cmp	r4, #0
   15dd0:	bmi	15e0c <__assert_fail@plt+0x4d84>
   15dd4:	ldr	r3, [sp, #28]
   15dd8:	mvn	r0, #0
   15ddc:	mvn	r1, #-2147483648	; 0x80000000
   15de0:	str	r7, [sp, #8]
   15de4:	mvn	r7, #0
   15de8:	mvn	r9, #-2147483648	; 0x80000000
   15dec:	bl	16d10 <__assert_fail@plt+0x5c88>
   15df0:	ldr	r2, [sp, #24]
   15df4:	ldr	r3, [sp, #28]
   15df8:	subs	r0, r0, r8
   15dfc:	mov	r6, #1
   15e00:	sbcs	r0, r1, r4
   15e04:	bge	15e44 <__assert_fail@plt+0x4dbc>
   15e08:	b	15e5c <__assert_fail@plt+0x4dd4>
   15e0c:	mov	r0, #0
   15e10:	mov	r1, #-2147483648	; 0x80000000
   15e14:	mov	r2, r8
   15e18:	mov	r3, r4
   15e1c:	str	r7, [sp, #8]
   15e20:	bl	16c3c <__assert_fail@plt+0x5bb4>
   15e24:	ldr	r2, [sp, #24]
   15e28:	ldr	r3, [sp, #28]
   15e2c:	mov	r6, #1
   15e30:	mov	r7, #0
   15e34:	mov	r9, #-2147483648	; 0x80000000
   15e38:	subs	r0, r0, r2
   15e3c:	sbcs	r0, r1, r3
   15e40:	blt	15e9c <__assert_fail@plt+0x4e14>
   15e44:	umull	r7, r0, r8, r2
   15e48:	ldr	r6, [sp, #8]
   15e4c:	mla	r0, r8, r3, r0
   15e50:	mla	r9, r4, r2, r0
   15e54:	cmp	r9, #0
   15e58:	bmi	15e9c <__assert_fail@plt+0x4e14>
   15e5c:	ldr	r3, [sp, #28]
   15e60:	mvn	r0, #0
   15e64:	mvn	r1, #-2147483648	; 0x80000000
   15e68:	str	r6, [sp, #8]
   15e6c:	mvn	r8, #0
   15e70:	mvn	r4, #-2147483648	; 0x80000000
   15e74:	bl	16d10 <__assert_fail@plt+0x5c88>
   15e78:	ldr	r2, [sp, #24]
   15e7c:	ldr	r3, [sp, #28]
   15e80:	subs	r0, r0, r7
   15e84:	sbcs	r0, r1, r9
   15e88:	bge	15ee0 <__assert_fail@plt+0x4e58>
   15e8c:	mov	r0, #1
   15e90:	mov	r6, #0
   15e94:	str	r0, [sp, #8]
   15e98:	b	15ef8 <__assert_fail@plt+0x4e70>
   15e9c:	mov	r0, #0
   15ea0:	mov	r1, #-2147483648	; 0x80000000
   15ea4:	mov	r2, r7
   15ea8:	mov	r3, r9
   15eac:	str	r6, [sp, #8]
   15eb0:	bl	16c3c <__assert_fail@plt+0x5bb4>
   15eb4:	ldr	r2, [sp, #24]
   15eb8:	ldr	r3, [sp, #28]
   15ebc:	subs	r0, r0, r2
   15ec0:	sbcs	r0, r1, r3
   15ec4:	bge	15ee0 <__assert_fail@plt+0x4e58>
   15ec8:	mov	r0, #1
   15ecc:	mov	r8, #0
   15ed0:	mov	r4, #-2147483648	; 0x80000000
   15ed4:	mov	r6, #0
   15ed8:	str	r0, [sp, #8]
   15edc:	b	15f30 <__assert_fail@plt+0x4ea8>
   15ee0:	umull	r8, r0, r7, r2
   15ee4:	mov	r6, #0
   15ee8:	mla	r0, r7, r3, r0
   15eec:	mla	r4, r9, r2, r0
   15ef0:	cmp	r4, #0
   15ef4:	bmi	15f30 <__assert_fail@plt+0x4ea8>
   15ef8:	ldr	r3, [sp, #28]
   15efc:	mvn	r0, #0
   15f00:	mvn	r1, #-2147483648	; 0x80000000
   15f04:	mvn	r9, #0
   15f08:	mvn	r7, #-2147483648	; 0x80000000
   15f0c:	bl	16d10 <__assert_fail@plt+0x5c88>
   15f10:	ldr	r2, [sp, #24]
   15f14:	ldr	r3, [sp, #28]
   15f18:	subs	r0, r0, r8
   15f1c:	sbcs	r0, r1, r4
   15f20:	bge	15f6c <__assert_fail@plt+0x4ee4>
   15f24:	mov	r0, #1
   15f28:	str	r0, [sp, #8]
   15f2c:	b	15f80 <__assert_fail@plt+0x4ef8>
   15f30:	mov	r0, #0
   15f34:	mov	r1, #-2147483648	; 0x80000000
   15f38:	mov	r2, r8
   15f3c:	mov	r3, r4
   15f40:	bl	16c3c <__assert_fail@plt+0x5bb4>
   15f44:	ldr	r2, [sp, #24]
   15f48:	ldr	r3, [sp, #28]
   15f4c:	subs	r0, r0, r2
   15f50:	sbcs	r0, r1, r3
   15f54:	bge	15f6c <__assert_fail@plt+0x4ee4>
   15f58:	mov	r0, #1
   15f5c:	mov	r9, #0
   15f60:	mov	r7, #-2147483648	; 0x80000000
   15f64:	str	r0, [sp, #8]
   15f68:	b	15fbc <__assert_fail@plt+0x4f34>
   15f6c:	umull	r9, r0, r8, r2
   15f70:	mla	r0, r8, r3, r0
   15f74:	mla	r7, r4, r2, r0
   15f78:	cmp	r7, #0
   15f7c:	bmi	15fbc <__assert_fail@plt+0x4f34>
   15f80:	ldr	r3, [sp, #28]
   15f84:	mvn	r0, #0
   15f88:	mvn	r1, #-2147483648	; 0x80000000
   15f8c:	mvn	r8, #0
   15f90:	mvn	r4, #-2147483648	; 0x80000000
   15f94:	bl	16d10 <__assert_fail@plt+0x5c88>
   15f98:	ldr	r2, [sp, #24]
   15f9c:	ldr	r3, [sp, #28]
   15fa0:	subs	r0, r0, r9
   15fa4:	sbcs	r0, r1, r7
   15fa8:	bge	15ffc <__assert_fail@plt+0x4f74>
   15fac:	ldr	r9, [sp, #12]
   15fb0:	mov	r0, #1
   15fb4:	str	r0, [sp, #8]
   15fb8:	b	16014 <__assert_fail@plt+0x4f8c>
   15fbc:	mov	r0, #0
   15fc0:	mov	r1, #-2147483648	; 0x80000000
   15fc4:	mov	r2, r9
   15fc8:	mov	r3, r7
   15fcc:	bl	16c3c <__assert_fail@plt+0x5bb4>
   15fd0:	ldr	r2, [sp, #24]
   15fd4:	ldr	r3, [sp, #28]
   15fd8:	subs	r0, r0, r2
   15fdc:	sbcs	r0, r1, r3
   15fe0:	bge	15ffc <__assert_fail@plt+0x4f74>
   15fe4:	ldr	r9, [sp, #12]
   15fe8:	mov	r0, #1
   15fec:	mov	r8, #0
   15ff0:	mov	r4, #-2147483648	; 0x80000000
   15ff4:	str	r0, [sp, #8]
   15ff8:	b	16064 <__assert_fail@plt+0x4fdc>
   15ffc:	umull	r8, r0, r9, r2
   16000:	mla	r0, r9, r3, r0
   16004:	ldr	r9, [sp, #12]
   16008:	mla	r4, r7, r2, r0
   1600c:	cmp	r4, #0
   16010:	bmi	16064 <__assert_fail@plt+0x4fdc>
   16014:	ldr	r3, [sp, #28]
   16018:	mvn	r0, #0
   1601c:	mvn	r1, #-2147483648	; 0x80000000
   16020:	mvn	r6, #0
   16024:	bl	16d10 <__assert_fail@plt+0x5c88>
   16028:	ldr	r7, [sp, #24]
   1602c:	ldr	r3, [sp, #28]
   16030:	subs	r0, r0, r8
   16034:	mov	r2, #1
   16038:	sbcs	r0, r1, r4
   1603c:	mvn	r0, #-2147483648	; 0x80000000
   16040:	blt	16054 <__assert_fail@plt+0x4fcc>
   16044:	umull	r6, r0, r8, r7
   16048:	mov	r2, #0
   1604c:	mla	r0, r8, r3, r0
   16050:	mla	r0, r4, r7, r0
   16054:	ldr	r1, [sp, #8]
   16058:	mov	r7, r0
   1605c:	orr	r3, r2, r1
   16060:	b	164c8 <__assert_fail@plt+0x5440>
   16064:	mov	r0, #0
   16068:	mov	r1, #-2147483648	; 0x80000000
   1606c:	mov	r2, r8
   16070:	mov	r3, r4
   16074:	bl	16c3c <__assert_fail@plt+0x5bb4>
   16078:	ldr	r7, [sp, #24]
   1607c:	ldr	r3, [sp, #28]
   16080:	mov	r2, #1
   16084:	subs	r0, r0, r7
   16088:	sbcs	r0, r1, r3
   1608c:	mov	r0, #-2147483648	; 0x80000000
   16090:	bge	16044 <__assert_fail@plt+0x4fbc>
   16094:	b	16054 <__assert_fail@plt+0x4fcc>
   16098:	ldr	r6, [sp, #8]
   1609c:	mov	r0, #0
   160a0:	mov	r1, #-2147483648	; 0x80000000
   160a4:	mov	r3, r9
   160a8:	str	r4, [sp, #4]
   160ac:	mov	r2, r6
   160b0:	bl	16c3c <__assert_fail@plt+0x5bb4>
   160b4:	ldr	r2, [sp, #24]
   160b8:	ldr	r3, [sp, #28]
   160bc:	mov	r7, #1
   160c0:	mov	r8, #0
   160c4:	mov	r4, #-2147483648	; 0x80000000
   160c8:	subs	r0, r0, r2
   160cc:	sbcs	r0, r1, r3
   160d0:	blt	16128 <__assert_fail@plt+0x50a0>
   160d4:	umull	r8, r0, r6, r2
   160d8:	ldr	r7, [sp, #4]
   160dc:	mla	r0, r6, r3, r0
   160e0:	mla	r4, r9, r2, r0
   160e4:	cmp	r4, #0
   160e8:	bmi	16128 <__assert_fail@plt+0x50a0>
   160ec:	ldr	r3, [sp, #28]
   160f0:	mvn	r0, #0
   160f4:	mvn	r1, #-2147483648	; 0x80000000
   160f8:	str	r7, [sp, #4]
   160fc:	mvn	r7, #0
   16100:	mvn	r9, #-2147483648	; 0x80000000
   16104:	bl	16d10 <__assert_fail@plt+0x5c88>
   16108:	ldr	r2, [sp, #24]
   1610c:	ldr	r3, [sp, #28]
   16110:	subs	r0, r0, r8
   16114:	mov	r6, #1
   16118:	sbcs	r0, r1, r4
   1611c:	str	r6, [sp, #8]
   16120:	bge	16164 <__assert_fail@plt+0x50dc>
   16124:	b	16180 <__assert_fail@plt+0x50f8>
   16128:	mov	r0, #0
   1612c:	mov	r1, #-2147483648	; 0x80000000
   16130:	mov	r2, r8
   16134:	mov	r3, r4
   16138:	str	r7, [sp, #4]
   1613c:	bl	16c3c <__assert_fail@plt+0x5bb4>
   16140:	ldr	r2, [sp, #24]
   16144:	ldr	r3, [sp, #28]
   16148:	mov	r7, #1
   1614c:	mov	r9, #-2147483648	; 0x80000000
   16150:	str	r7, [sp, #8]
   16154:	mov	r7, #0
   16158:	subs	r0, r0, r2
   1615c:	sbcs	r0, r1, r3
   16160:	blt	161b8 <__assert_fail@plt+0x5130>
   16164:	umull	r7, r0, r8, r2
   16168:	mla	r0, r8, r3, r0
   1616c:	mla	r9, r4, r2, r0
   16170:	ldr	r0, [sp, #4]
   16174:	cmp	r9, #0
   16178:	str	r0, [sp, #8]
   1617c:	bmi	161b8 <__assert_fail@plt+0x5130>
   16180:	ldr	r3, [sp, #28]
   16184:	mvn	r0, #0
   16188:	mvn	r1, #-2147483648	; 0x80000000
   1618c:	mvn	r4, #0
   16190:	mvn	r8, #-2147483648	; 0x80000000
   16194:	bl	16d10 <__assert_fail@plt+0x5c88>
   16198:	ldr	r2, [sp, #24]
   1619c:	ldr	r3, [sp, #28]
   161a0:	subs	r0, r0, r7
   161a4:	sbcs	r0, r1, r9
   161a8:	bge	161f4 <__assert_fail@plt+0x516c>
   161ac:	mov	r0, #1
   161b0:	str	r0, [sp, #8]
   161b4:	b	16208 <__assert_fail@plt+0x5180>
   161b8:	mov	r0, #0
   161bc:	mov	r1, #-2147483648	; 0x80000000
   161c0:	mov	r2, r7
   161c4:	mov	r3, r9
   161c8:	bl	16c3c <__assert_fail@plt+0x5bb4>
   161cc:	ldr	r2, [sp, #24]
   161d0:	ldr	r3, [sp, #28]
   161d4:	subs	r0, r0, r2
   161d8:	sbcs	r0, r1, r3
   161dc:	bge	161f4 <__assert_fail@plt+0x516c>
   161e0:	mov	r0, #1
   161e4:	mov	r4, #0
   161e8:	mov	r8, #-2147483648	; 0x80000000
   161ec:	str	r0, [sp, #8]
   161f0:	b	1623c <__assert_fail@plt+0x51b4>
   161f4:	umull	r4, r0, r7, r2
   161f8:	mla	r0, r7, r3, r0
   161fc:	mla	r8, r9, r2, r0
   16200:	cmp	r8, #0
   16204:	bmi	1623c <__assert_fail@plt+0x51b4>
   16208:	ldr	r3, [sp, #28]
   1620c:	mvn	r0, #0
   16210:	mvn	r1, #-2147483648	; 0x80000000
   16214:	mvn	r6, #0
   16218:	mvn	r9, #-2147483648	; 0x80000000
   1621c:	bl	16d10 <__assert_fail@plt+0x5c88>
   16220:	ldr	r2, [sp, #24]
   16224:	ldr	r3, [sp, #28]
   16228:	subs	r0, r0, r4
   1622c:	sbcs	r0, r1, r8
   16230:	bge	16274 <__assert_fail@plt+0x51ec>
   16234:	mov	r8, #1
   16238:	b	1628c <__assert_fail@plt+0x5204>
   1623c:	mov	r0, #0
   16240:	mov	r1, #-2147483648	; 0x80000000
   16244:	mov	r2, r4
   16248:	mov	r3, r8
   1624c:	bl	16c3c <__assert_fail@plt+0x5bb4>
   16250:	ldr	r2, [sp, #24]
   16254:	ldr	r3, [sp, #28]
   16258:	subs	r0, r0, r2
   1625c:	sbcs	r0, r1, r3
   16260:	bge	16274 <__assert_fail@plt+0x51ec>
   16264:	mov	r8, #1
   16268:	mov	r6, #0
   1626c:	mov	r9, #-2147483648	; 0x80000000
   16270:	b	162dc <__assert_fail@plt+0x5254>
   16274:	umull	r6, r0, r4, r2
   16278:	mla	r0, r4, r3, r0
   1627c:	mla	r9, r8, r2, r0
   16280:	ldr	r8, [sp, #8]
   16284:	cmp	r9, #0
   16288:	bmi	162dc <__assert_fail@plt+0x5254>
   1628c:	ldr	r3, [sp, #28]
   16290:	mvn	r0, #0
   16294:	mvn	r1, #-2147483648	; 0x80000000
   16298:	mvn	r4, #0
   1629c:	mvn	r7, #-2147483648	; 0x80000000
   162a0:	bl	16d10 <__assert_fail@plt+0x5c88>
   162a4:	ldr	r3, [sp, #24]
   162a8:	ldr	ip, [sp, #28]
   162ac:	subs	r0, r0, r6
   162b0:	mov	r2, #1
   162b4:	sbcs	r0, r1, r9
   162b8:	blt	162cc <__assert_fail@plt+0x5244>
   162bc:	umull	r4, r0, r6, r3
   162c0:	mov	r2, #0
   162c4:	mla	r0, r6, ip, r0
   162c8:	mla	r7, r9, r3, r0
   162cc:	ldr	r9, [sp, #12]
   162d0:	orr	r3, r2, r8
   162d4:	mov	r6, r4
   162d8:	b	164c8 <__assert_fail@plt+0x5440>
   162dc:	mov	r0, #0
   162e0:	mov	r1, #-2147483648	; 0x80000000
   162e4:	mov	r2, r6
   162e8:	mov	r3, r9
   162ec:	bl	16c3c <__assert_fail@plt+0x5bb4>
   162f0:	ldr	r3, [sp, #24]
   162f4:	ldr	ip, [sp, #28]
   162f8:	mov	r2, #1
   162fc:	mov	r4, #0
   16300:	mov	r7, #-2147483648	; 0x80000000
   16304:	subs	r0, r0, r3
   16308:	sbcs	r0, r1, ip
   1630c:	bge	162bc <__assert_fail@plt+0x5234>
   16310:	b	162cc <__assert_fail@plt+0x5244>
   16314:	ldr	r6, [sp, #8]
   16318:	mov	r0, #0
   1631c:	mov	r1, #-2147483648	; 0x80000000
   16320:	mov	r3, r8
   16324:	str	r4, [sp, #4]
   16328:	mov	r2, r6
   1632c:	bl	16c3c <__assert_fail@plt+0x5bb4>
   16330:	ldr	r2, [sp, #24]
   16334:	ldr	r3, [sp, #28]
   16338:	mov	r7, #1
   1633c:	mov	r9, #0
   16340:	mov	r4, #-2147483648	; 0x80000000
   16344:	subs	r0, r0, r2
   16348:	sbcs	r0, r1, r3
   1634c:	blt	163a4 <__assert_fail@plt+0x531c>
   16350:	umull	r9, r0, r6, r2
   16354:	ldr	r7, [sp, #4]
   16358:	mla	r0, r6, r3, r0
   1635c:	mla	r4, r8, r2, r0
   16360:	cmp	r4, #0
   16364:	bmi	163a4 <__assert_fail@plt+0x531c>
   16368:	ldr	r3, [sp, #28]
   1636c:	mvn	r0, #0
   16370:	mvn	r1, #-2147483648	; 0x80000000
   16374:	str	r7, [sp, #4]
   16378:	mvn	r8, #0
   1637c:	mvn	r7, #-2147483648	; 0x80000000
   16380:	bl	16d10 <__assert_fail@plt+0x5c88>
   16384:	ldr	r2, [sp, #24]
   16388:	ldr	r3, [sp, #28]
   1638c:	subs	r0, r0, r9
   16390:	mov	r6, #1
   16394:	sbcs	r0, r1, r4
   16398:	str	r6, [sp, #8]
   1639c:	bge	163e0 <__assert_fail@plt+0x5358>
   163a0:	b	163fc <__assert_fail@plt+0x5374>
   163a4:	mov	r0, #0
   163a8:	mov	r1, #-2147483648	; 0x80000000
   163ac:	mov	r2, r9
   163b0:	mov	r3, r4
   163b4:	str	r7, [sp, #4]
   163b8:	bl	16c3c <__assert_fail@plt+0x5bb4>
   163bc:	ldr	r2, [sp, #24]
   163c0:	ldr	r3, [sp, #28]
   163c4:	mov	r7, #1
   163c8:	mov	r8, #0
   163cc:	str	r7, [sp, #8]
   163d0:	mov	r7, #-2147483648	; 0x80000000
   163d4:	subs	r0, r0, r2
   163d8:	sbcs	r0, r1, r3
   163dc:	blt	16430 <__assert_fail@plt+0x53a8>
   163e0:	umull	r8, r0, r9, r2
   163e4:	mla	r0, r9, r3, r0
   163e8:	mla	r7, r4, r2, r0
   163ec:	ldr	r0, [sp, #4]
   163f0:	cmp	r7, #0
   163f4:	str	r0, [sp, #8]
   163f8:	bmi	16430 <__assert_fail@plt+0x53a8>
   163fc:	ldr	r3, [sp, #28]
   16400:	mvn	r0, #0
   16404:	mvn	r1, #-2147483648	; 0x80000000
   16408:	mvn	r4, #0
   1640c:	mvn	r9, #-2147483648	; 0x80000000
   16410:	bl	16d10 <__assert_fail@plt+0x5c88>
   16414:	ldr	r2, [sp, #24]
   16418:	ldr	r3, [sp, #28]
   1641c:	subs	r0, r0, r8
   16420:	sbcs	r0, r1, r7
   16424:	bge	16468 <__assert_fail@plt+0x53e0>
   16428:	mov	r8, #1
   1642c:	b	16480 <__assert_fail@plt+0x53f8>
   16430:	mov	r0, #0
   16434:	mov	r1, #-2147483648	; 0x80000000
   16438:	mov	r2, r8
   1643c:	mov	r3, r7
   16440:	bl	16c3c <__assert_fail@plt+0x5bb4>
   16444:	ldr	r2, [sp, #24]
   16448:	ldr	r3, [sp, #28]
   1644c:	subs	r0, r0, r2
   16450:	sbcs	r0, r1, r3
   16454:	bge	16468 <__assert_fail@plt+0x53e0>
   16458:	mov	r8, #1
   1645c:	mov	r4, #0
   16460:	mov	r9, #-2147483648	; 0x80000000
   16464:	b	164f8 <__assert_fail@plt+0x5470>
   16468:	umull	r4, r0, r8, r2
   1646c:	mla	r0, r8, r3, r0
   16470:	ldr	r8, [sp, #8]
   16474:	mla	r9, r7, r2, r0
   16478:	cmp	r9, #0
   1647c:	bmi	164f8 <__assert_fail@plt+0x5470>
   16480:	ldr	r3, [sp, #28]
   16484:	mvn	r0, #0
   16488:	mvn	r1, #-2147483648	; 0x80000000
   1648c:	mvn	r6, #0
   16490:	mvn	r7, #-2147483648	; 0x80000000
   16494:	bl	16d10 <__assert_fail@plt+0x5c88>
   16498:	ldr	r3, [sp, #24]
   1649c:	ldr	ip, [sp, #28]
   164a0:	subs	r0, r0, r4
   164a4:	mov	r2, #1
   164a8:	sbcs	r0, r1, r9
   164ac:	blt	164c0 <__assert_fail@plt+0x5438>
   164b0:	umull	r6, r0, r4, r3
   164b4:	mov	r2, #0
   164b8:	mla	r0, r4, ip, r0
   164bc:	mla	r7, r9, r3, r0
   164c0:	ldr	r9, [sp, #12]
   164c4:	orr	r3, r2, r8
   164c8:	ldr	r1, [sp, #20]
   164cc:	ldr	r2, [sp, #16]
   164d0:	orr	r5, r3, r5
   164d4:	add	r0, r1, r2
   164d8:	str	r0, [sl]
   164dc:	ldrb	r0, [r1, r2]
   164e0:	cmp	r0, #0
   164e4:	orrne	r5, r5, #2
   164e8:	strd	r6, [r9]
   164ec:	mov	r0, r5
   164f0:	sub	sp, fp, #28
   164f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164f8:	mov	r0, #0
   164fc:	mov	r1, #-2147483648	; 0x80000000
   16500:	mov	r2, r4
   16504:	mov	r3, r9
   16508:	bl	16c3c <__assert_fail@plt+0x5bb4>
   1650c:	ldr	r3, [sp, #24]
   16510:	ldr	ip, [sp, #28]
   16514:	mov	r2, #1
   16518:	mov	r6, #0
   1651c:	mov	r7, #-2147483648	; 0x80000000
   16520:	subs	r0, r0, r3
   16524:	sbcs	r0, r1, ip
   16528:	bge	164b0 <__assert_fail@plt+0x5428>
   1652c:	b	164c0 <__assert_fail@plt+0x5438>
   16530:	ldr	r6, [sp, #8]
   16534:	mov	r0, #0
   16538:	mov	r1, #-2147483648	; 0x80000000
   1653c:	mov	r3, r9
   16540:	str	r4, [sp]
   16544:	mov	r2, r6
   16548:	bl	16c3c <__assert_fail@plt+0x5bb4>
   1654c:	ldr	r2, [sp, #24]
   16550:	ldr	r3, [sp, #28]
   16554:	mov	r7, #1
   16558:	mov	r8, #-2147483648	; 0x80000000
   1655c:	subs	r0, r0, r2
   16560:	sbcs	r0, r1, r3
   16564:	mov	r0, #0
   16568:	str	r0, [sp, #4]
   1656c:	blt	165cc <__assert_fail@plt+0x5544>
   16570:	umull	r1, r0, r6, r2
   16574:	ldr	r7, [sp]
   16578:	mla	r0, r6, r3, r0
   1657c:	mla	r8, r9, r2, r0
   16580:	str	r1, [sp, #4]
   16584:	cmp	r8, #0
   16588:	bmi	165cc <__assert_fail@plt+0x5544>
   1658c:	ldr	r3, [sp, #28]
   16590:	mvn	r0, #0
   16594:	mvn	r1, #-2147483648	; 0x80000000
   16598:	str	r7, [sp]
   1659c:	mvn	r7, #0
   165a0:	mvn	r4, #-2147483648	; 0x80000000
   165a4:	bl	16d10 <__assert_fail@plt+0x5c88>
   165a8:	mov	r6, #1
   165ac:	ldr	r2, [sp, #24]
   165b0:	ldr	r3, [sp, #28]
   165b4:	str	r6, [sp, #8]
   165b8:	ldr	r6, [sp, #4]
   165bc:	subs	r0, r0, r6
   165c0:	sbcs	r0, r1, r8
   165c4:	bge	1660c <__assert_fail@plt+0x5584>
   165c8:	b	16628 <__assert_fail@plt+0x55a0>
   165cc:	ldr	r6, [sp, #4]
   165d0:	mov	r0, #0
   165d4:	mov	r1, #-2147483648	; 0x80000000
   165d8:	mov	r3, r8
   165dc:	str	r7, [sp]
   165e0:	mov	r2, r6
   165e4:	bl	16c3c <__assert_fail@plt+0x5bb4>
   165e8:	ldr	r2, [sp, #24]
   165ec:	ldr	r3, [sp, #28]
   165f0:	mov	r7, #1
   165f4:	mov	r4, #-2147483648	; 0x80000000
   165f8:	str	r7, [sp, #8]
   165fc:	mov	r7, #0
   16600:	subs	r0, r0, r2
   16604:	sbcs	r0, r1, r3
   16608:	blt	16660 <__assert_fail@plt+0x55d8>
   1660c:	umull	r7, r0, r6, r2
   16610:	mla	r0, r6, r3, r0
   16614:	mla	r4, r8, r2, r0
   16618:	ldr	r0, [sp]
   1661c:	cmp	r4, #0
   16620:	str	r0, [sp, #8]
   16624:	bmi	16660 <__assert_fail@plt+0x55d8>
   16628:	ldr	r3, [sp, #28]
   1662c:	mvn	r0, #0
   16630:	mvn	r1, #-2147483648	; 0x80000000
   16634:	mvn	r9, #0
   16638:	mvn	r8, #-2147483648	; 0x80000000
   1663c:	bl	16d10 <__assert_fail@plt+0x5c88>
   16640:	ldr	r2, [sp, #24]
   16644:	ldr	r3, [sp, #28]
   16648:	subs	r0, r0, r7
   1664c:	sbcs	r0, r1, r4
   16650:	bge	1669c <__assert_fail@plt+0x5614>
   16654:	mov	r0, #1
   16658:	str	r0, [sp, #8]
   1665c:	b	166b0 <__assert_fail@plt+0x5628>
   16660:	mov	r0, #0
   16664:	mov	r1, #-2147483648	; 0x80000000
   16668:	mov	r2, r7
   1666c:	mov	r3, r4
   16670:	bl	16c3c <__assert_fail@plt+0x5bb4>
   16674:	ldr	r2, [sp, #24]
   16678:	ldr	r3, [sp, #28]
   1667c:	subs	r0, r0, r2
   16680:	sbcs	r0, r1, r3
   16684:	bge	1669c <__assert_fail@plt+0x5614>
   16688:	mov	r0, #1
   1668c:	mov	r9, #0
   16690:	mov	r8, #-2147483648	; 0x80000000
   16694:	str	r0, [sp, #8]
   16698:	b	166e8 <__assert_fail@plt+0x5660>
   1669c:	umull	r9, r0, r7, r2
   166a0:	mla	r0, r7, r3, r0
   166a4:	mla	r8, r4, r2, r0
   166a8:	cmp	r8, #0
   166ac:	bmi	166e8 <__assert_fail@plt+0x5660>
   166b0:	ldr	r3, [sp, #28]
   166b4:	mvn	r0, #0
   166b8:	mvn	r1, #-2147483648	; 0x80000000
   166bc:	mvn	r4, #0
   166c0:	mvn	r7, #-2147483648	; 0x80000000
   166c4:	bl	16d10 <__assert_fail@plt+0x5c88>
   166c8:	ldr	r2, [sp, #24]
   166cc:	ldr	r3, [sp, #28]
   166d0:	subs	r0, r0, r9
   166d4:	sbcs	r0, r1, r8
   166d8:	bge	16724 <__assert_fail@plt+0x569c>
   166dc:	mov	r0, #1
   166e0:	str	r0, [sp, #8]
   166e4:	b	16738 <__assert_fail@plt+0x56b0>
   166e8:	mov	r0, #0
   166ec:	mov	r1, #-2147483648	; 0x80000000
   166f0:	mov	r2, r9
   166f4:	mov	r3, r8
   166f8:	bl	16c3c <__assert_fail@plt+0x5bb4>
   166fc:	ldr	r2, [sp, #24]
   16700:	ldr	r3, [sp, #28]
   16704:	subs	r0, r0, r2
   16708:	sbcs	r0, r1, r3
   1670c:	bge	16724 <__assert_fail@plt+0x569c>
   16710:	mov	r0, #1
   16714:	mov	r4, #0
   16718:	mov	r7, #-2147483648	; 0x80000000
   1671c:	str	r0, [sp, #8]
   16720:	b	16770 <__assert_fail@plt+0x56e8>
   16724:	umull	r4, r0, r9, r2
   16728:	mla	r0, r9, r3, r0
   1672c:	mla	r7, r8, r2, r0
   16730:	cmp	r7, #0
   16734:	bmi	16770 <__assert_fail@plt+0x56e8>
   16738:	ldr	r3, [sp, #28]
   1673c:	mvn	r0, #0
   16740:	mvn	r1, #-2147483648	; 0x80000000
   16744:	mvn	r8, #0
   16748:	mvn	r9, #-2147483648	; 0x80000000
   1674c:	bl	16d10 <__assert_fail@plt+0x5c88>
   16750:	ldr	r2, [sp, #24]
   16754:	ldr	r3, [sp, #28]
   16758:	subs	r0, r0, r4
   1675c:	sbcs	r0, r1, r7
   16760:	bge	167ac <__assert_fail@plt+0x5724>
   16764:	mov	r0, #1
   16768:	str	r0, [sp, #8]
   1676c:	b	167c0 <__assert_fail@plt+0x5738>
   16770:	mov	r0, #0
   16774:	mov	r1, #-2147483648	; 0x80000000
   16778:	mov	r2, r4
   1677c:	mov	r3, r7
   16780:	bl	16c3c <__assert_fail@plt+0x5bb4>
   16784:	ldr	r2, [sp, #24]
   16788:	ldr	r3, [sp, #28]
   1678c:	subs	r0, r0, r2
   16790:	sbcs	r0, r1, r3
   16794:	bge	167ac <__assert_fail@plt+0x5724>
   16798:	mov	r0, #1
   1679c:	mov	r8, #0
   167a0:	mov	r9, #-2147483648	; 0x80000000
   167a4:	str	r0, [sp, #8]
   167a8:	b	167fc <__assert_fail@plt+0x5774>
   167ac:	umull	r8, r0, r4, r2
   167b0:	mla	r0, r4, r3, r0
   167b4:	mla	r9, r7, r2, r0
   167b8:	cmp	r9, #0
   167bc:	bmi	167fc <__assert_fail@plt+0x5774>
   167c0:	ldr	r3, [sp, #28]
   167c4:	mvn	r0, #0
   167c8:	mvn	r1, #-2147483648	; 0x80000000
   167cc:	mvn	r4, #0
   167d0:	mvn	r6, #-2147483648	; 0x80000000
   167d4:	bl	16d10 <__assert_fail@plt+0x5c88>
   167d8:	ldr	r2, [sp, #24]
   167dc:	ldr	r3, [sp, #28]
   167e0:	subs	r0, r0, r8
   167e4:	sbcs	r0, r1, r9
   167e8:	bge	1683c <__assert_fail@plt+0x57b4>
   167ec:	ldr	r9, [sp, #12]
   167f0:	mov	r0, #1
   167f4:	str	r0, [sp, #8]
   167f8:	b	16854 <__assert_fail@plt+0x57cc>
   167fc:	mov	r0, #0
   16800:	mov	r1, #-2147483648	; 0x80000000
   16804:	mov	r2, r8
   16808:	mov	r3, r9
   1680c:	bl	16c3c <__assert_fail@plt+0x5bb4>
   16810:	ldr	r2, [sp, #24]
   16814:	ldr	r3, [sp, #28]
   16818:	subs	r0, r0, r2
   1681c:	sbcs	r0, r1, r3
   16820:	bge	1683c <__assert_fail@plt+0x57b4>
   16824:	ldr	r9, [sp, #12]
   16828:	mov	r0, #1
   1682c:	mov	r4, #0
   16830:	mov	r6, #-2147483648	; 0x80000000
   16834:	str	r0, [sp, #8]
   16838:	b	168a0 <__assert_fail@plt+0x5818>
   1683c:	umull	r4, r0, r8, r2
   16840:	mla	r0, r8, r3, r0
   16844:	mla	r6, r9, r2, r0
   16848:	ldr	r9, [sp, #12]
   1684c:	cmp	r6, #0
   16850:	bmi	168a0 <__assert_fail@plt+0x5818>
   16854:	ldr	r3, [sp, #28]
   16858:	mvn	r0, #0
   1685c:	mvn	r1, #-2147483648	; 0x80000000
   16860:	mov	r8, r6
   16864:	mvn	r6, #0
   16868:	mvn	r7, #-2147483648	; 0x80000000
   1686c:	bl	16d10 <__assert_fail@plt+0x5c88>
   16870:	ldr	r3, [sp, #24]
   16874:	ldr	ip, [sp, #28]
   16878:	subs	r0, r0, r4
   1687c:	mov	r2, #1
   16880:	sbcs	r0, r1, r8
   16884:	blt	16898 <__assert_fail@plt+0x5810>
   16888:	umull	r6, r0, r4, r3
   1688c:	mov	r2, #0
   16890:	mla	r0, r4, ip, r0
   16894:	mla	r7, r8, r3, r0
   16898:	ldr	r0, [sp, #8]
   1689c:	b	159e4 <__assert_fail@plt+0x495c>
   168a0:	mov	r0, #0
   168a4:	mov	r1, #-2147483648	; 0x80000000
   168a8:	mov	r2, r4
   168ac:	mov	r3, r6
   168b0:	bl	16c3c <__assert_fail@plt+0x5bb4>
   168b4:	ldr	r3, [sp, #24]
   168b8:	ldr	ip, [sp, #28]
   168bc:	mov	r8, r6
   168c0:	mov	r2, #1
   168c4:	mov	r6, #0
   168c8:	mov	r7, #-2147483648	; 0x80000000
   168cc:	subs	r0, r0, r3
   168d0:	sbcs	r0, r1, ip
   168d4:	bge	16888 <__assert_fail@plt+0x5800>
   168d8:	b	16898 <__assert_fail@plt+0x5810>
   168dc:	movw	r0, #31369	; 0x7a89
   168e0:	movw	r1, #31407	; 0x7aaf
   168e4:	movw	r3, #31423	; 0x7abf
   168e8:	mov	r2, #85	; 0x55
   168ec:	movt	r0, #1
   168f0:	movt	r1, #1
   168f4:	movt	r3, #1
   168f8:	bl	11088 <__assert_fail@plt>
   168fc:	clz	r2, r1
   16900:	clz	r3, r0
   16904:	lsr	r2, r2, #5
   16908:	lsr	r3, r3, #5
   1690c:	orrs	r2, r3, r2
   16910:	movwne	r1, #1
   16914:	movwne	r0, #1
   16918:	cmp	r1, #0
   1691c:	beq	1694c <__assert_fail@plt+0x58c4>
   16920:	mvn	r2, #-2147483648	; 0x80000000
   16924:	udiv	r2, r2, r1
   16928:	cmp	r2, r0
   1692c:	bcs	1694c <__assert_fail@plt+0x58c4>
   16930:	push	{fp, lr}
   16934:	mov	fp, sp
   16938:	bl	10fa4 <__errno_location@plt>
   1693c:	mov	r1, #12
   16940:	str	r1, [r0]
   16944:	mov	r0, #0
   16948:	pop	{fp, pc}
   1694c:	b	10e24 <calloc@plt>
   16950:	cmp	r0, #0
   16954:	movweq	r0, #1
   16958:	cmn	r0, #1
   1695c:	ble	16964 <__assert_fail@plt+0x58dc>
   16960:	b	10f2c <malloc@plt>
   16964:	push	{fp, lr}
   16968:	mov	fp, sp
   1696c:	bl	10fa4 <__errno_location@plt>
   16970:	mov	r1, #12
   16974:	str	r1, [r0]
   16978:	mov	r0, #0
   1697c:	pop	{fp, pc}
   16980:	push	{fp, lr}
   16984:	mov	fp, sp
   16988:	cmp	r0, #0
   1698c:	beq	169a8 <__assert_fail@plt+0x5920>
   16990:	cmp	r1, #0
   16994:	beq	169b4 <__assert_fail@plt+0x592c>
   16998:	cmn	r1, #1
   1699c:	ble	169c0 <__assert_fail@plt+0x5938>
   169a0:	pop	{fp, lr}
   169a4:	b	10ec0 <realloc@plt>
   169a8:	mov	r0, r1
   169ac:	pop	{fp, lr}
   169b0:	b	16950 <__assert_fail@plt+0x58c8>
   169b4:	bl	1253c <__assert_fail@plt+0x14b4>
   169b8:	mov	r0, #0
   169bc:	pop	{fp, pc}
   169c0:	bl	10fa4 <__errno_location@plt>
   169c4:	mov	r1, #12
   169c8:	str	r1, [r0]
   169cc:	mov	r0, #0
   169d0:	pop	{fp, pc}
   169d4:	push	{r4, r5, r6, sl, fp, lr}
   169d8:	add	fp, sp, #16
   169dc:	mov	r4, r0
   169e0:	bl	10f08 <__fpending@plt>
   169e4:	ldr	r6, [r4]
   169e8:	mov	r5, r0
   169ec:	mov	r0, r4
   169f0:	bl	12444 <__assert_fail@plt+0x13bc>
   169f4:	tst	r6, #32
   169f8:	bne	16a30 <__assert_fail@plt+0x59a8>
   169fc:	cmp	r0, #0
   16a00:	mov	r4, r0
   16a04:	mvnne	r4, #0
   16a08:	cmp	r5, #0
   16a0c:	bne	16a3c <__assert_fail@plt+0x59b4>
   16a10:	cmp	r0, #0
   16a14:	beq	16a3c <__assert_fail@plt+0x59b4>
   16a18:	bl	10fa4 <__errno_location@plt>
   16a1c:	ldr	r0, [r0]
   16a20:	subs	r4, r0, #9
   16a24:	mvnne	r4, #0
   16a28:	mov	r0, r4
   16a2c:	pop	{r4, r5, r6, sl, fp, pc}
   16a30:	mvn	r4, #0
   16a34:	cmp	r0, #0
   16a38:	beq	16a44 <__assert_fail@plt+0x59bc>
   16a3c:	mov	r0, r4
   16a40:	pop	{r4, r5, r6, sl, fp, pc}
   16a44:	bl	10fa4 <__errno_location@plt>
   16a48:	mov	r1, #0
   16a4c:	str	r1, [r0]
   16a50:	mov	r0, r4
   16a54:	pop	{r4, r5, r6, sl, fp, pc}
   16a58:	push	{fp, lr}
   16a5c:	mov	fp, sp
   16a60:	mov	r0, #14
   16a64:	bl	11034 <nl_langinfo@plt>
   16a68:	movw	r1, #29728	; 0x7420
   16a6c:	cmp	r0, #0
   16a70:	movt	r1, #1
   16a74:	movne	r1, r0
   16a78:	movw	r0, #31501	; 0x7b0d
   16a7c:	ldrb	r2, [r1]
   16a80:	movt	r0, #1
   16a84:	cmp	r2, #0
   16a88:	movne	r0, r1
   16a8c:	pop	{fp, pc}
   16a90:	push	{r4, r5, r6, r7, fp, lr}
   16a94:	add	fp, sp, #16
   16a98:	sub	sp, sp, #8
   16a9c:	cmp	r0, #0
   16aa0:	add	r5, sp, #4
   16aa4:	mov	r7, r2
   16aa8:	mov	r4, r1
   16aac:	movne	r5, r0
   16ab0:	mov	r0, r5
   16ab4:	bl	10f14 <mbrtowc@plt>
   16ab8:	mov	r6, r0
   16abc:	cmp	r7, #0
   16ac0:	beq	16ae8 <__assert_fail@plt+0x5a60>
   16ac4:	cmn	r6, #2
   16ac8:	bcc	16ae8 <__assert_fail@plt+0x5a60>
   16acc:	mov	r0, #0
   16ad0:	bl	16b30 <__assert_fail@plt+0x5aa8>
   16ad4:	cmp	r0, #0
   16ad8:	bne	16ae8 <__assert_fail@plt+0x5a60>
   16adc:	ldrb	r0, [r4]
   16ae0:	mov	r6, #1
   16ae4:	str	r0, [r5]
   16ae8:	mov	r0, r6
   16aec:	sub	sp, fp, #16
   16af0:	pop	{r4, r5, r6, r7, fp, pc}
   16af4:	cmp	r2, #0
   16af8:	beq	16b28 <__assert_fail@plt+0x5aa0>
   16afc:	mvn	r3, #0
   16b00:	udiv	r3, r3, r2
   16b04:	cmp	r3, r1
   16b08:	bcs	16b28 <__assert_fail@plt+0x5aa0>
   16b0c:	push	{fp, lr}
   16b10:	mov	fp, sp
   16b14:	bl	10fa4 <__errno_location@plt>
   16b18:	mov	r1, #12
   16b1c:	str	r1, [r0]
   16b20:	mov	r0, #0
   16b24:	pop	{fp, pc}
   16b28:	mul	r1, r2, r1
   16b2c:	b	16980 <__assert_fail@plt+0x58f8>
   16b30:	push	{r4, sl, fp, lr}
   16b34:	add	fp, sp, #8
   16b38:	sub	sp, sp, #264	; 0x108
   16b3c:	add	r1, sp, #7
   16b40:	movw	r2, #257	; 0x101
   16b44:	bl	16b9c <__assert_fail@plt+0x5b14>
   16b48:	mov	r4, #0
   16b4c:	cmp	r0, #0
   16b50:	bne	16b90 <__assert_fail@plt+0x5b08>
   16b54:	movw	r1, #31507	; 0x7b13
   16b58:	add	r0, sp, #7
   16b5c:	mov	r2, #2
   16b60:	movt	r1, #1
   16b64:	bl	10f80 <bcmp@plt>
   16b68:	cmp	r0, #0
   16b6c:	beq	16b90 <__assert_fail@plt+0x5b08>
   16b70:	movw	r1, #31509	; 0x7b15
   16b74:	add	r0, sp, #7
   16b78:	mov	r2, #6
   16b7c:	movt	r1, #1
   16b80:	bl	10f80 <bcmp@plt>
   16b84:	cmp	r0, #0
   16b88:	mov	r4, r0
   16b8c:	movwne	r4, #1
   16b90:	mov	r0, r4
   16b94:	sub	sp, fp, #8
   16b98:	pop	{r4, sl, fp, pc}
   16b9c:	push	{r4, r5, r6, r7, fp, lr}
   16ba0:	add	fp, sp, #16
   16ba4:	mov	r4, r1
   16ba8:	mov	r1, #0
   16bac:	mov	r6, r2
   16bb0:	bl	1101c <setlocale@plt>
   16bb4:	cmp	r0, #0
   16bb8:	beq	16be8 <__assert_fail@plt+0x5b60>
   16bbc:	mov	r7, r0
   16bc0:	bl	10f8c <strlen@plt>
   16bc4:	cmp	r0, r6
   16bc8:	bcs	16c04 <__assert_fail@plt+0x5b7c>
   16bcc:	add	r2, r0, #1
   16bd0:	mov	r0, r4
   16bd4:	mov	r1, r7
   16bd8:	bl	10e90 <memcpy@plt>
   16bdc:	mov	r5, #0
   16be0:	mov	r0, r5
   16be4:	pop	{r4, r5, r6, r7, fp, pc}
   16be8:	mov	r5, #22
   16bec:	cmp	r6, #0
   16bf0:	beq	16c2c <__assert_fail@plt+0x5ba4>
   16bf4:	mov	r0, #0
   16bf8:	strb	r0, [r4]
   16bfc:	mov	r0, r5
   16c00:	pop	{r4, r5, r6, r7, fp, pc}
   16c04:	mov	r5, #34	; 0x22
   16c08:	cmp	r6, #0
   16c0c:	beq	16c2c <__assert_fail@plt+0x5ba4>
   16c10:	sub	r6, r6, #1
   16c14:	mov	r0, r4
   16c18:	mov	r1, r7
   16c1c:	mov	r2, r6
   16c20:	bl	10e90 <memcpy@plt>
   16c24:	mov	r0, #0
   16c28:	strb	r0, [r4, r6]
   16c2c:	mov	r0, r5
   16c30:	pop	{r4, r5, r6, r7, fp, pc}
   16c34:	mov	r1, #0
   16c38:	b	1101c <setlocale@plt>
   16c3c:	cmp	r3, #0
   16c40:	cmpeq	r2, #0
   16c44:	bne	16c68 <__assert_fail@plt+0x5be0>
   16c48:	cmp	r1, #0
   16c4c:	movlt	r1, #-2147483648	; 0x80000000
   16c50:	movlt	r0, #0
   16c54:	blt	16c64 <__assert_fail@plt+0x5bdc>
   16c58:	cmpeq	r0, #0
   16c5c:	mvnne	r1, #-2147483648	; 0x80000000
   16c60:	mvnne	r0, #0
   16c64:	b	16d4c <__assert_fail@plt+0x5cc4>
   16c68:	sub	sp, sp, #8
   16c6c:	push	{sp, lr}
   16c70:	cmp	r1, #0
   16c74:	blt	16c94 <__assert_fail@plt+0x5c0c>
   16c78:	cmp	r3, #0
   16c7c:	blt	16cc8 <__assert_fail@plt+0x5c40>
   16c80:	bl	16d5c <__assert_fail@plt+0x5cd4>
   16c84:	ldr	lr, [sp, #4]
   16c88:	add	sp, sp, #8
   16c8c:	pop	{r2, r3}
   16c90:	bx	lr
   16c94:	rsbs	r0, r0, #0
   16c98:	sbc	r1, r1, r1, lsl #1
   16c9c:	cmp	r3, #0
   16ca0:	blt	16cec <__assert_fail@plt+0x5c64>
   16ca4:	bl	16d5c <__assert_fail@plt+0x5cd4>
   16ca8:	ldr	lr, [sp, #4]
   16cac:	add	sp, sp, #8
   16cb0:	pop	{r2, r3}
   16cb4:	rsbs	r0, r0, #0
   16cb8:	sbc	r1, r1, r1, lsl #1
   16cbc:	rsbs	r2, r2, #0
   16cc0:	sbc	r3, r3, r3, lsl #1
   16cc4:	bx	lr
   16cc8:	rsbs	r2, r2, #0
   16ccc:	sbc	r3, r3, r3, lsl #1
   16cd0:	bl	16d5c <__assert_fail@plt+0x5cd4>
   16cd4:	ldr	lr, [sp, #4]
   16cd8:	add	sp, sp, #8
   16cdc:	pop	{r2, r3}
   16ce0:	rsbs	r0, r0, #0
   16ce4:	sbc	r1, r1, r1, lsl #1
   16ce8:	bx	lr
   16cec:	rsbs	r2, r2, #0
   16cf0:	sbc	r3, r3, r3, lsl #1
   16cf4:	bl	16d5c <__assert_fail@plt+0x5cd4>
   16cf8:	ldr	lr, [sp, #4]
   16cfc:	add	sp, sp, #8
   16d00:	pop	{r2, r3}
   16d04:	rsbs	r2, r2, #0
   16d08:	sbc	r3, r3, r3, lsl #1
   16d0c:	bx	lr
   16d10:	cmp	r3, #0
   16d14:	cmpeq	r2, #0
   16d18:	bne	16d30 <__assert_fail@plt+0x5ca8>
   16d1c:	cmp	r1, #0
   16d20:	cmpeq	r0, #0
   16d24:	mvnne	r1, #0
   16d28:	mvnne	r0, #0
   16d2c:	b	16d4c <__assert_fail@plt+0x5cc4>
   16d30:	sub	sp, sp, #8
   16d34:	push	{sp, lr}
   16d38:	bl	16d5c <__assert_fail@plt+0x5cd4>
   16d3c:	ldr	lr, [sp, #4]
   16d40:	add	sp, sp, #8
   16d44:	pop	{r2, r3}
   16d48:	bx	lr
   16d4c:	push	{r1, lr}
   16d50:	mov	r0, #8
   16d54:	bl	10e3c <raise@plt>
   16d58:	pop	{r1, pc}
   16d5c:	cmp	r1, r3
   16d60:	cmpeq	r0, r2
   16d64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d68:	mov	r4, r0
   16d6c:	movcc	r0, #0
   16d70:	mov	r5, r1
   16d74:	ldr	lr, [sp, #36]	; 0x24
   16d78:	movcc	r1, r0
   16d7c:	bcc	16e78 <__assert_fail@plt+0x5df0>
   16d80:	cmp	r3, #0
   16d84:	clzeq	ip, r2
   16d88:	clzne	ip, r3
   16d8c:	addeq	ip, ip, #32
   16d90:	cmp	r5, #0
   16d94:	clzeq	r1, r4
   16d98:	addeq	r1, r1, #32
   16d9c:	clzne	r1, r5
   16da0:	sub	ip, ip, r1
   16da4:	sub	sl, ip, #32
   16da8:	lsl	r9, r3, ip
   16dac:	rsb	fp, ip, #32
   16db0:	orr	r9, r9, r2, lsl sl
   16db4:	orr	r9, r9, r2, lsr fp
   16db8:	lsl	r8, r2, ip
   16dbc:	cmp	r5, r9
   16dc0:	cmpeq	r4, r8
   16dc4:	movcc	r0, #0
   16dc8:	movcc	r1, r0
   16dcc:	bcc	16de8 <__assert_fail@plt+0x5d60>
   16dd0:	mov	r0, #1
   16dd4:	subs	r4, r4, r8
   16dd8:	lsl	r1, r0, sl
   16ddc:	orr	r1, r1, r0, lsr fp
   16de0:	lsl	r0, r0, ip
   16de4:	sbc	r5, r5, r9
   16de8:	cmp	ip, #0
   16dec:	beq	16e78 <__assert_fail@plt+0x5df0>
   16df0:	lsr	r6, r8, #1
   16df4:	orr	r6, r6, r9, lsl #31
   16df8:	lsr	r7, r9, #1
   16dfc:	mov	r2, ip
   16e00:	b	16e24 <__assert_fail@plt+0x5d9c>
   16e04:	subs	r3, r4, r6
   16e08:	sbc	r8, r5, r7
   16e0c:	adds	r3, r3, r3
   16e10:	adc	r8, r8, r8
   16e14:	adds	r4, r3, #1
   16e18:	adc	r5, r8, #0
   16e1c:	subs	r2, r2, #1
   16e20:	beq	16e40 <__assert_fail@plt+0x5db8>
   16e24:	cmp	r5, r7
   16e28:	cmpeq	r4, r6
   16e2c:	bcs	16e04 <__assert_fail@plt+0x5d7c>
   16e30:	adds	r4, r4, r4
   16e34:	adc	r5, r5, r5
   16e38:	subs	r2, r2, #1
   16e3c:	bne	16e24 <__assert_fail@plt+0x5d9c>
   16e40:	lsr	r3, r4, ip
   16e44:	orr	r3, r3, r5, lsl fp
   16e48:	lsr	r2, r5, ip
   16e4c:	orr	r3, r3, r5, lsr sl
   16e50:	adds	r0, r0, r4
   16e54:	mov	r4, r3
   16e58:	lsl	r3, r2, ip
   16e5c:	orr	r3, r3, r4, lsl sl
   16e60:	lsl	ip, r4, ip
   16e64:	orr	r3, r3, r4, lsr fp
   16e68:	adc	r1, r1, r5
   16e6c:	subs	r0, r0, ip
   16e70:	mov	r5, r2
   16e74:	sbc	r1, r1, r3
   16e78:	cmp	lr, #0
   16e7c:	strdne	r4, [lr]
   16e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16e88:	mov	r7, r0
   16e8c:	ldr	r6, [pc, #72]	; 16edc <__assert_fail@plt+0x5e54>
   16e90:	ldr	r5, [pc, #72]	; 16ee0 <__assert_fail@plt+0x5e58>
   16e94:	add	r6, pc, r6
   16e98:	add	r5, pc, r5
   16e9c:	sub	r6, r6, r5
   16ea0:	mov	r8, r1
   16ea4:	mov	r9, r2
   16ea8:	bl	10e04 <calloc@plt-0x20>
   16eac:	asrs	r6, r6, #2
   16eb0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16eb4:	mov	r4, #0
   16eb8:	add	r4, r4, #1
   16ebc:	ldr	r3, [r5], #4
   16ec0:	mov	r2, r9
   16ec4:	mov	r1, r8
   16ec8:	mov	r0, r7
   16ecc:	blx	r3
   16ed0:	cmp	r6, r4
   16ed4:	bne	16eb8 <__assert_fail@plt+0x5e30>
   16ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16edc:	andeq	r1, r1, r0, ror r0
   16ee0:	andeq	r1, r1, r8, rrx
   16ee4:	bx	lr
   16ee8:	ldr	r3, [pc, #12]	; 16efc <__assert_fail@plt+0x5e74>
   16eec:	mov	r1, #0
   16ef0:	add	r3, pc, r3
   16ef4:	ldr	r2, [r3]
   16ef8:	b	10fb0 <__cxa_atexit@plt>
   16efc:	andeq	r1, r1, ip, ror #3

Disassembly of section .fini:

00016f00 <.fini>:
   16f00:	push	{r3, lr}
   16f04:	pop	{r3, pc}
