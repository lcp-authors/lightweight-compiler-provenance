
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf32-littlearm


Disassembly of section .init:

00011f34 <.init>:
   11f34:	push	{r3, lr}
   11f38:	bl	12044 <_start@@Base+0x3c>
   11f3c:	pop	{r3, pc}

Disassembly of section .plt:

00011f40 <strcmp@plt-0x14>:
   11f40:	push	{lr}		; (str lr, [sp, #-4]!)
   11f44:	ldr	lr, [pc, #4]	; 11f50 <strcmp@plt-0x4>
   11f48:	add	lr, pc, lr
   11f4c:	ldr	pc, [lr, #8]!
   11f50:	strheq	r7, [r1], -r0

00011f54 <strcmp@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #94208	; 0x17000
   11f5c:	ldr	pc, [ip, #176]!	; 0xb0

00011f60 <free@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #94208	; 0x17000
   11f68:	ldr	pc, [ip, #168]!	; 0xa8

00011f6c <memcpy@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #94208	; 0x17000
   11f74:	ldr	pc, [ip, #160]!	; 0xa0

00011f78 <memcmp@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #94208	; 0x17000
   11f80:	ldr	pc, [ip, #152]!	; 0x98

00011f84 <realloc@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #94208	; 0x17000
   11f8c:	ldr	pc, [ip, #144]!	; 0x90

00011f90 <puts@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #94208	; 0x17000
   11f98:	ldr	pc, [ip, #136]!	; 0x88

00011f9c <malloc@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #94208	; 0x17000
   11fa4:	ldr	pc, [ip, #128]!	; 0x80

00011fa8 <__libc_start_main@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #94208	; 0x17000
   11fb0:	ldr	pc, [ip, #120]!	; 0x78

00011fb4 <__gmon_start__@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #94208	; 0x17000
   11fbc:	ldr	pc, [ip, #112]!	; 0x70

00011fc0 <strlen@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #94208	; 0x17000
   11fc8:	ldr	pc, [ip, #104]!	; 0x68

00011fcc <posix_memalign@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #94208	; 0x17000
   11fd4:	ldr	pc, [ip, #96]!	; 0x60

00011fd8 <memset@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #94208	; 0x17000
   11fe0:	ldr	pc, [ip, #88]!	; 0x58

00011fe4 <memchr@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #94208	; 0x17000
   11fec:	ldr	pc, [ip, #80]!	; 0x50

00011ff0 <abort@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #94208	; 0x17000
   11ff8:	ldr	pc, [ip, #72]!	; 0x48

00011ffc <__assert_fail@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #94208	; 0x17000
   12004:	ldr	pc, [ip, #64]!	; 0x40

Disassembly of section .text:

00012008 <_start@@Base>:
   12008:	mov	fp, #0
   1200c:	mov	lr, #0
   12010:	pop	{r1}		; (ldr r1, [sp], #4)
   12014:	mov	r2, sp
   12018:	push	{r2}		; (str r2, [sp, #-4]!)
   1201c:	push	{r0}		; (str r0, [sp, #-4]!)
   12020:	ldr	ip, [pc, #16]	; 12038 <_start@@Base+0x30>
   12024:	push	{ip}		; (str ip, [sp, #-4]!)
   12028:	ldr	r0, [pc, #12]	; 1203c <_start@@Base+0x34>
   1202c:	ldr	r3, [pc, #12]	; 12040 <_start@@Base+0x38>
   12030:	bl	11fa8 <__libc_start_main@plt>
   12034:	bl	11ff0 <abort@plt>
   12038:	strdeq	r7, [r1], -ip
   1203c:	andeq	r3, r1, r8, lsr r0
   12040:	muleq	r1, ip, r7
   12044:	ldr	r3, [pc, #20]	; 12060 <_start@@Base+0x58>
   12048:	ldr	r2, [pc, #20]	; 12064 <_start@@Base+0x5c>
   1204c:	add	r3, pc, r3
   12050:	ldr	r2, [r3, r2]
   12054:	cmp	r2, #0
   12058:	bxeq	lr
   1205c:	b	11fb4 <__gmon_start__@plt>
   12060:	andeq	r6, r1, ip, lsr #31
   12064:	andeq	r0, r0, r8, asr #32
   12068:	ldr	r3, [pc, #28]	; 1208c <_start@@Base+0x84>
   1206c:	ldr	r0, [pc, #28]	; 12090 <_start@@Base+0x88>
   12070:	sub	r3, r3, r0
   12074:	cmp	r3, #6
   12078:	bxls	lr
   1207c:	ldr	r3, [pc, #16]	; 12094 <_start@@Base+0x8c>
   12080:	cmp	r3, #0
   12084:	bxeq	lr
   12088:	bx	r3
   1208c:	andeq	r9, r2, r7, asr r0
   12090:	andeq	r9, r2, r4, asr r0
   12094:	andeq	r0, r0, r0
   12098:	ldr	r1, [pc, #36]	; 120c4 <_start@@Base+0xbc>
   1209c:	ldr	r0, [pc, #36]	; 120c8 <_start@@Base+0xc0>
   120a0:	sub	r1, r1, r0
   120a4:	asr	r1, r1, #2
   120a8:	add	r1, r1, r1, lsr #31
   120ac:	asrs	r1, r1, #1
   120b0:	bxeq	lr
   120b4:	ldr	r3, [pc, #16]	; 120cc <_start@@Base+0xc4>
   120b8:	cmp	r3, #0
   120bc:	bxeq	lr
   120c0:	bx	r3
   120c4:	andeq	r9, r2, r4, asr r0
   120c8:	andeq	r9, r2, r4, asr r0
   120cc:	andeq	r0, r0, r0
   120d0:	push	{r4, lr}
   120d4:	ldr	r4, [pc, #24]	; 120f4 <_start@@Base+0xec>
   120d8:	ldrb	r3, [r4]
   120dc:	cmp	r3, #0
   120e0:	popne	{r4, pc}
   120e4:	bl	12068 <_start@@Base+0x60>
   120e8:	mov	r3, #1
   120ec:	strb	r3, [r4]
   120f0:	pop	{r4, pc}
   120f4:	andeq	r9, r2, r4, asr r0
   120f8:	ldr	r0, [pc, #40]	; 12128 <_start@@Base+0x120>
   120fc:	ldr	r3, [r0]
   12100:	cmp	r3, #0
   12104:	bne	1210c <_start@@Base+0x104>
   12108:	b	12098 <_start@@Base+0x90>
   1210c:	ldr	r3, [pc, #24]	; 1212c <_start@@Base+0x124>
   12110:	cmp	r3, #0
   12114:	beq	12108 <_start@@Base+0x100>
   12118:	push	{r4, lr}
   1211c:	blx	r3
   12120:	pop	{r4, lr}
   12124:	b	12098 <_start@@Base+0x90>
   12128:	andeq	r8, r2, r4, lsl pc
   1212c:	andeq	r0, r0, r0

00012130 <create_monster_bottom_up@@Base>:
   12130:	push	{r4, r5, r6, r7, r8, r9, lr}
   12134:	sub	sp, sp, #28
   12138:	mov	r4, r0
   1213c:	mov	r6, r1
   12140:	ldr	r1, [pc, #1624]	; 127a0 <create_monster_bottom_up@@Base+0x670>
   12144:	bl	167b0 <flatcc_builder_create_string_str@@Base>
   12148:	mov	r5, r0
   1214c:	ldr	r1, [pc, #1616]	; 127a4 <create_monster_bottom_up@@Base+0x674>
   12150:	mov	r0, r4
   12154:	bl	167b0 <flatcc_builder_create_string_str@@Base>
   12158:	mov	r7, r0
   1215c:	mov	r1, #2
   12160:	mov	r0, r4
   12164:	bl	14f28 <flatcc_builder_start_table@@Base>
   12168:	cmp	r0, #0
   1216c:	bne	12178 <create_monster_bottom_up@@Base+0x48>
   12170:	cmp	r5, #0
   12174:	bne	12330 <create_monster_bottom_up@@Base+0x200>
   12178:	mov	r1, #2
   1217c:	mov	r0, r4
   12180:	bl	14f28 <flatcc_builder_start_table@@Base>
   12184:	cmp	r0, #0
   12188:	moveq	r5, #0
   1218c:	bne	12748 <create_monster_bottom_up@@Base+0x618>
   12190:	cmp	r7, #0
   12194:	bne	12418 <create_monster_bottom_up@@Base+0x2e8>
   12198:	ldr	r1, [pc, #1544]	; 127a8 <create_monster_bottom_up@@Base+0x678>
   1219c:	mov	r0, r4
   121a0:	bl	167b0 <flatcc_builder_create_string_str@@Base>
   121a4:	mov	r7, r0
   121a8:	add	r3, sp, #12
   121ac:	ldr	r2, [pc, #1528]	; 127ac <create_monster_bottom_up@@Base+0x67c>
   121b0:	ldm	r2, {r0, r1, r2}
   121b4:	stmia	r3!, {r0, r1}
   121b8:	strh	r2, [r3]
   121bc:	mvn	r3, #0
   121c0:	str	r3, [sp, #4]
   121c4:	mov	r3, #1
   121c8:	str	r3, [sp]
   121cc:	mov	r2, #10
   121d0:	add	r1, sp, #12
   121d4:	mov	r0, r4
   121d8:	bl	15b2c <flatcc_builder_create_vector@@Base>
   121dc:	mov	r8, r0
   121e0:	mov	r0, r4
   121e4:	bl	14d04 <flatcc_builder_start_offset_vector@@Base>
   121e8:	cmp	r5, #0
   121ec:	bne	124ec <create_monster_bottom_up@@Base+0x3bc>
   121f0:	mov	r0, r4
   121f4:	bl	15da0 <flatcc_builder_end_offset_vector@@Base>
   121f8:	mov	r9, r0
   121fc:	cmp	r6, #0
   12200:	beq	12518 <create_monster_bottom_up@@Base+0x3e8>
   12204:	mov	r3, #0
   12208:	mov	r2, r3
   1220c:	mov	r1, r3
   12210:	mov	r0, r4
   12214:	bl	140fc <flatcc_builder_start_buffer@@Base>
   12218:	cmp	r0, #0
   1221c:	bne	1222c <create_monster_bottom_up@@Base+0xfc>
   12220:	mov	r1, #10
   12224:	mov	r0, r4
   12228:	bl	14f28 <flatcc_builder_start_table@@Base>
   1222c:	mov	r3, #4
   12230:	mov	r2, #12
   12234:	mov	r1, #0
   12238:	mov	r0, r4
   1223c:	bl	16924 <flatcc_builder_table_add@@Base>
   12240:	cmp	r0, #0
   12244:	beq	12260 <create_monster_bottom_up@@Base+0x130>
   12248:	mov	r3, #1065353216	; 0x3f800000
   1224c:	str	r3, [r0]
   12250:	mov	r3, #1073741824	; 0x40000000
   12254:	str	r3, [r0, #4]
   12258:	ldr	r3, [pc, #1360]	; 127b0 <create_monster_bottom_up@@Base+0x680>
   1225c:	str	r3, [r0, #8]
   12260:	mov	r3, #2
   12264:	mov	r2, r3
   12268:	mov	r1, r3
   1226c:	mov	r0, r4
   12270:	bl	16924 <flatcc_builder_table_add@@Base>
   12274:	cmp	r0, #0
   12278:	movne	r3, #300	; 0x12c
   1227c:	strhne	r3, [r0]
   12280:	cmp	r7, #0
   12284:	bne	126ec <create_monster_bottom_up@@Base+0x5bc>
   12288:	cmp	r8, #0
   1228c:	bne	12704 <create_monster_bottom_up@@Base+0x5d4>
   12290:	mov	r3, #1
   12294:	mov	r2, r3
   12298:	mov	r1, #6
   1229c:	mov	r0, r4
   122a0:	bl	16924 <flatcc_builder_table_add@@Base>
   122a4:	cmp	r0, #0
   122a8:	movne	r3, #0
   122ac:	strbne	r3, [r0]
   122b0:	cmp	r9, #0
   122b4:	bne	1271c <create_monster_bottom_up@@Base+0x5ec>
   122b8:	cmp	r5, #0
   122bc:	beq	122f8 <create_monster_bottom_up@@Base+0x1c8>
   122c0:	mov	r3, #1
   122c4:	mov	r2, r3
   122c8:	mov	r1, #8
   122cc:	mov	r0, r4
   122d0:	bl	16924 <flatcc_builder_table_add@@Base>
   122d4:	subs	r6, r0, #0
   122d8:	beq	122f8 <create_monster_bottom_up@@Base+0x1c8>
   122dc:	mov	r1, #9
   122e0:	mov	r0, r4
   122e4:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   122e8:	cmp	r0, #0
   122ec:	movne	r3, #1
   122f0:	strbne	r3, [r6]
   122f4:	strne	r5, [r0]
   122f8:	mov	r2, #0
   122fc:	ldr	r1, [pc, #1200]	; 127b4 <create_monster_bottom_up@@Base+0x684>
   12300:	mov	r0, r4
   12304:	bl	158cc <flatcc_builder_check_required@@Base>
   12308:	cmp	r0, #0
   1230c:	beq	12734 <create_monster_bottom_up@@Base+0x604>
   12310:	mov	r0, r4
   12314:	bl	15978 <flatcc_builder_end_table@@Base>
   12318:	mov	r1, r0
   1231c:	mov	r0, r4
   12320:	bl	141b4 <flatcc_builder_end_buffer@@Base>
   12324:	mov	r0, #0
   12328:	add	sp, sp, #28
   1232c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12330:	mov	r1, #0
   12334:	mov	r0, r4
   12338:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   1233c:	cmp	r0, #0
   12340:	beq	12178 <create_monster_bottom_up@@Base+0x48>
   12344:	str	r5, [r0]
   12348:	mov	r3, #2
   1234c:	mov	r2, r3
   12350:	mov	r1, #1
   12354:	mov	r0, r4
   12358:	bl	16924 <flatcc_builder_table_add@@Base>
   1235c:	cmp	r0, #0
   12360:	beq	12178 <create_monster_bottom_up@@Base+0x48>
   12364:	mov	r3, #3
   12368:	strh	r3, [r0]
   1236c:	mov	r2, #0
   12370:	ldr	r1, [pc, #1088]	; 127b8 <create_monster_bottom_up@@Base+0x688>
   12374:	mov	r0, r4
   12378:	bl	158cc <flatcc_builder_check_required@@Base>
   1237c:	cmp	r0, #0
   12380:	beq	12404 <create_monster_bottom_up@@Base+0x2d4>
   12384:	mov	r0, r4
   12388:	bl	15978 <flatcc_builder_end_table@@Base>
   1238c:	mov	r5, r0
   12390:	mov	r1, #2
   12394:	mov	r0, r4
   12398:	bl	14f28 <flatcc_builder_start_table@@Base>
   1239c:	cmp	r0, #0
   123a0:	beq	12190 <create_monster_bottom_up@@Base+0x60>
   123a4:	ldr	r1, [pc, #1020]	; 127a8 <create_monster_bottom_up@@Base+0x678>
   123a8:	mov	r0, r4
   123ac:	bl	167b0 <flatcc_builder_create_string_str@@Base>
   123b0:	mov	r7, r0
   123b4:	add	r3, sp, #12
   123b8:	ldr	r2, [pc, #1004]	; 127ac <create_monster_bottom_up@@Base+0x67c>
   123bc:	ldm	r2, {r0, r1, r2}
   123c0:	stmia	r3!, {r0, r1}
   123c4:	strh	r2, [r3]
   123c8:	mvn	r3, #0
   123cc:	str	r3, [sp, #4]
   123d0:	mov	r3, #1
   123d4:	str	r3, [sp]
   123d8:	mov	r2, #10
   123dc:	add	r1, sp, #12
   123e0:	mov	r0, r4
   123e4:	bl	15b2c <flatcc_builder_create_vector@@Base>
   123e8:	mov	r8, r0
   123ec:	mov	r0, r4
   123f0:	bl	14d04 <flatcc_builder_start_offset_vector@@Base>
   123f4:	cmp	r5, #0
   123f8:	movne	r9, #0
   123fc:	bne	124f0 <create_monster_bottom_up@@Base+0x3c0>
   12400:	b	121f0 <create_monster_bottom_up@@Base+0xc0>
   12404:	ldr	r3, [pc, #944]	; 127bc <create_monster_bottom_up@@Base+0x68c>
   12408:	mov	r2, #52	; 0x34
   1240c:	ldr	r1, [pc, #940]	; 127c0 <create_monster_bottom_up@@Base+0x690>
   12410:	ldr	r0, [pc, #940]	; 127c4 <create_monster_bottom_up@@Base+0x694>
   12414:	bl	11ffc <__assert_fail@plt>
   12418:	mov	r1, #0
   1241c:	mov	r0, r4
   12420:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   12424:	cmp	r0, #0
   12428:	beq	12198 <create_monster_bottom_up@@Base+0x68>
   1242c:	str	r7, [r0]
   12430:	mov	r3, #2
   12434:	mov	r2, r3
   12438:	mov	r1, #1
   1243c:	mov	r0, r4
   12440:	bl	16924 <flatcc_builder_table_add@@Base>
   12444:	cmp	r0, #0
   12448:	beq	12198 <create_monster_bottom_up@@Base+0x68>
   1244c:	mov	r3, #5
   12450:	strh	r3, [r0]
   12454:	mov	r2, #0
   12458:	ldr	r1, [pc, #856]	; 127b8 <create_monster_bottom_up@@Base+0x688>
   1245c:	mov	r0, r4
   12460:	bl	158cc <flatcc_builder_check_required@@Base>
   12464:	cmp	r0, #0
   12468:	beq	124d8 <create_monster_bottom_up@@Base+0x3a8>
   1246c:	mov	r0, r4
   12470:	bl	15978 <flatcc_builder_end_table@@Base>
   12474:	mov	r9, r0
   12478:	ldr	r1, [pc, #808]	; 127a8 <create_monster_bottom_up@@Base+0x678>
   1247c:	mov	r0, r4
   12480:	bl	167b0 <flatcc_builder_create_string_str@@Base>
   12484:	mov	r7, r0
   12488:	add	r3, sp, #12
   1248c:	ldr	r2, [pc, #792]	; 127ac <create_monster_bottom_up@@Base+0x67c>
   12490:	ldm	r2, {r0, r1, r2}
   12494:	stmia	r3!, {r0, r1}
   12498:	strh	r2, [r3]
   1249c:	mvn	r3, #0
   124a0:	str	r3, [sp, #4]
   124a4:	mov	r3, #1
   124a8:	str	r3, [sp]
   124ac:	mov	r2, #10
   124b0:	add	r1, sp, #12
   124b4:	mov	r0, r4
   124b8:	bl	15b2c <flatcc_builder_create_vector@@Base>
   124bc:	mov	r8, r0
   124c0:	mov	r0, r4
   124c4:	bl	14d04 <flatcc_builder_start_offset_vector@@Base>
   124c8:	cmp	r5, #0
   124cc:	moveq	r5, r9
   124d0:	beq	12500 <create_monster_bottom_up@@Base+0x3d0>
   124d4:	b	124f0 <create_monster_bottom_up@@Base+0x3c0>
   124d8:	ldr	r3, [pc, #732]	; 127bc <create_monster_bottom_up@@Base+0x68c>
   124dc:	mov	r2, #52	; 0x34
   124e0:	ldr	r1, [pc, #728]	; 127c0 <create_monster_bottom_up@@Base+0x690>
   124e4:	ldr	r0, [pc, #728]	; 127c4 <create_monster_bottom_up@@Base+0x694>
   124e8:	bl	11ffc <__assert_fail@plt>
   124ec:	mov	r9, #0
   124f0:	mov	r1, r5
   124f4:	mov	r0, r4
   124f8:	bl	1476c <flatcc_builder_offset_vector_push@@Base>
   124fc:	mov	r5, r9
   12500:	cmp	r5, #0
   12504:	beq	121f0 <create_monster_bottom_up@@Base+0xc0>
   12508:	mov	r1, r5
   1250c:	mov	r0, r4
   12510:	bl	1476c <flatcc_builder_offset_vector_push@@Base>
   12514:	b	121f0 <create_monster_bottom_up@@Base+0xc0>
   12518:	mov	r3, #0
   1251c:	mov	r2, r3
   12520:	mov	r1, r3
   12524:	mov	r0, r4
   12528:	bl	140fc <flatcc_builder_start_buffer@@Base>
   1252c:	cmp	r0, #0
   12530:	bne	12324 <create_monster_bottom_up@@Base+0x1f4>
   12534:	mov	r1, #10
   12538:	mov	r0, r4
   1253c:	bl	14f28 <flatcc_builder_start_table@@Base>
   12540:	cmp	r0, #0
   12544:	movne	r1, #0
   12548:	beq	12558 <create_monster_bottom_up@@Base+0x428>
   1254c:	mov	r0, r4
   12550:	bl	141b4 <flatcc_builder_end_buffer@@Base>
   12554:	b	12324 <create_monster_bottom_up@@Base+0x1f4>
   12558:	mov	r3, #4
   1255c:	mov	r2, #12
   12560:	mov	r1, #0
   12564:	mov	r0, r4
   12568:	bl	16924 <flatcc_builder_table_add@@Base>
   1256c:	cmp	r0, #0
   12570:	beq	126c4 <create_monster_bottom_up@@Base+0x594>
   12574:	mov	r3, #1065353216	; 0x3f800000
   12578:	str	r3, [r0]
   1257c:	mov	r3, #1073741824	; 0x40000000
   12580:	str	r3, [r0, #4]
   12584:	ldr	r3, [pc, #548]	; 127b0 <create_monster_bottom_up@@Base+0x680>
   12588:	str	r3, [r0, #8]
   1258c:	cmp	r7, #0
   12590:	bne	1259c <create_monster_bottom_up@@Base+0x46c>
   12594:	mov	r1, #0
   12598:	b	1254c <create_monster_bottom_up@@Base+0x41c>
   1259c:	mov	r1, #3
   125a0:	mov	r0, r4
   125a4:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   125a8:	cmp	r0, #0
   125ac:	beq	12594 <create_monster_bottom_up@@Base+0x464>
   125b0:	str	r7, [r0]
   125b4:	cmp	r8, #0
   125b8:	bne	125c4 <create_monster_bottom_up@@Base+0x494>
   125bc:	mov	r1, #0
   125c0:	b	1254c <create_monster_bottom_up@@Base+0x41c>
   125c4:	mov	r1, #5
   125c8:	mov	r0, r4
   125cc:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   125d0:	cmp	r0, #0
   125d4:	beq	125bc <create_monster_bottom_up@@Base+0x48c>
   125d8:	str	r8, [r0]
   125dc:	cmp	r9, #0
   125e0:	bne	125ec <create_monster_bottom_up@@Base+0x4bc>
   125e4:	mov	r1, #0
   125e8:	b	1254c <create_monster_bottom_up@@Base+0x41c>
   125ec:	mov	r1, #7
   125f0:	mov	r0, r4
   125f4:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   125f8:	cmp	r0, #0
   125fc:	beq	125e4 <create_monster_bottom_up@@Base+0x4b4>
   12600:	str	r9, [r0]
   12604:	mov	r1, #9
   12608:	mov	r0, r4
   1260c:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   12610:	cmp	r0, #0
   12614:	beq	126cc <create_monster_bottom_up@@Base+0x59c>
   12618:	str	r5, [r0]
   1261c:	mov	r3, #2
   12620:	mov	r2, r3
   12624:	mov	r1, r3
   12628:	mov	r0, r4
   1262c:	bl	16924 <flatcc_builder_table_add@@Base>
   12630:	cmp	r0, #0
   12634:	beq	126d4 <create_monster_bottom_up@@Base+0x5a4>
   12638:	mov	r3, #300	; 0x12c
   1263c:	strh	r3, [r0]
   12640:	mov	r3, #1
   12644:	mov	r2, r3
   12648:	mov	r1, #6
   1264c:	mov	r0, r4
   12650:	bl	16924 <flatcc_builder_table_add@@Base>
   12654:	cmp	r0, #0
   12658:	beq	126dc <create_monster_bottom_up@@Base+0x5ac>
   1265c:	mov	r3, #0
   12660:	strb	r3, [r0]
   12664:	mov	r3, #1
   12668:	mov	r2, r3
   1266c:	mov	r1, #8
   12670:	mov	r0, r4
   12674:	bl	16924 <flatcc_builder_table_add@@Base>
   12678:	cmp	r0, #0
   1267c:	beq	126e4 <create_monster_bottom_up@@Base+0x5b4>
   12680:	mov	r3, #1
   12684:	strb	r3, [r0]
   12688:	mov	r2, #0
   1268c:	ldr	r1, [pc, #288]	; 127b4 <create_monster_bottom_up@@Base+0x684>
   12690:	mov	r0, r4
   12694:	bl	158cc <flatcc_builder_check_required@@Base>
   12698:	cmp	r0, #0
   1269c:	beq	126b0 <create_monster_bottom_up@@Base+0x580>
   126a0:	mov	r0, r4
   126a4:	bl	15978 <flatcc_builder_end_table@@Base>
   126a8:	mov	r1, r0
   126ac:	b	1254c <create_monster_bottom_up@@Base+0x41c>
   126b0:	ldr	r3, [pc, #272]	; 127c8 <create_monster_bottom_up@@Base+0x698>
   126b4:	mov	r2, #50	; 0x32
   126b8:	ldr	r1, [pc, #256]	; 127c0 <create_monster_bottom_up@@Base+0x690>
   126bc:	ldr	r0, [pc, #264]	; 127cc <create_monster_bottom_up@@Base+0x69c>
   126c0:	bl	11ffc <__assert_fail@plt>
   126c4:	mov	r1, #0
   126c8:	b	1254c <create_monster_bottom_up@@Base+0x41c>
   126cc:	mov	r1, #0
   126d0:	b	1254c <create_monster_bottom_up@@Base+0x41c>
   126d4:	mov	r1, #0
   126d8:	b	1254c <create_monster_bottom_up@@Base+0x41c>
   126dc:	mov	r1, #0
   126e0:	b	1254c <create_monster_bottom_up@@Base+0x41c>
   126e4:	mov	r1, #0
   126e8:	b	1254c <create_monster_bottom_up@@Base+0x41c>
   126ec:	mov	r1, #3
   126f0:	mov	r0, r4
   126f4:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   126f8:	cmp	r0, #0
   126fc:	strne	r7, [r0]
   12700:	b	12288 <create_monster_bottom_up@@Base+0x158>
   12704:	mov	r1, #5
   12708:	mov	r0, r4
   1270c:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   12710:	cmp	r0, #0
   12714:	strne	r8, [r0]
   12718:	b	12290 <create_monster_bottom_up@@Base+0x160>
   1271c:	mov	r1, #7
   12720:	mov	r0, r4
   12724:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   12728:	cmp	r0, #0
   1272c:	strne	r9, [r0]
   12730:	b	122b8 <create_monster_bottom_up@@Base+0x188>
   12734:	ldr	r3, [pc, #140]	; 127c8 <create_monster_bottom_up@@Base+0x698>
   12738:	mov	r2, #50	; 0x32
   1273c:	ldr	r1, [pc, #124]	; 127c0 <create_monster_bottom_up@@Base+0x690>
   12740:	ldr	r0, [pc, #132]	; 127cc <create_monster_bottom_up@@Base+0x69c>
   12744:	bl	11ffc <__assert_fail@plt>
   12748:	ldr	r1, [pc, #88]	; 127a8 <create_monster_bottom_up@@Base+0x678>
   1274c:	mov	r0, r4
   12750:	bl	167b0 <flatcc_builder_create_string_str@@Base>
   12754:	mov	r7, r0
   12758:	add	r3, sp, #12
   1275c:	ldr	r2, [pc, #72]	; 127ac <create_monster_bottom_up@@Base+0x67c>
   12760:	ldm	r2, {r0, r1, r2}
   12764:	stmia	r3!, {r0, r1}
   12768:	strh	r2, [r3]
   1276c:	mvn	r3, #0
   12770:	str	r3, [sp, #4]
   12774:	mov	r3, #1
   12778:	str	r3, [sp]
   1277c:	mov	r2, #10
   12780:	add	r1, sp, #12
   12784:	mov	r0, r4
   12788:	bl	15b2c <flatcc_builder_create_vector@@Base>
   1278c:	mov	r8, r0
   12790:	mov	r0, r4
   12794:	bl	14d04 <flatcc_builder_start_offset_vector@@Base>
   12798:	mov	r5, #0
   1279c:	b	121f0 <create_monster_bottom_up@@Base+0xc0>
   127a0:	muleq	r1, r4, r8
   127a4:	muleq	r1, ip, r8
   127a8:	muleq	r1, r8, r9
   127ac:	andeq	r7, r1, ip, lsr #16
   127b0:	submi	r0, r0, r0
   127b4:	andeq	r7, r1, r8, lsr r8
   127b8:	andeq	r7, r1, ip, lsl #16
   127bc:	andeq	r7, r1, r0, lsl r8
   127c0:	andeq	r7, r1, r0, lsr #17
   127c4:	strdeq	r7, [r1], -ip
   127c8:	andeq	r7, r1, ip, lsr r8
   127cc:	muleq	r1, ip, r9

000127d0 <create_monster_top_down@@Base>:
   127d0:	push	{r4, r5, r6, lr}
   127d4:	sub	sp, sp, #24
   127d8:	mov	r4, r0
   127dc:	add	r3, sp, #12
   127e0:	ldr	r2, [pc, #816]	; 12b18 <create_monster_top_down@@Base+0x348>
   127e4:	ldm	r2, {r0, r1, r2}
   127e8:	stmia	r3!, {r0, r1}
   127ec:	strh	r2, [r3]
   127f0:	mov	r3, #0
   127f4:	mov	r2, r3
   127f8:	mov	r1, r3
   127fc:	mov	r0, r4
   12800:	bl	140fc <flatcc_builder_start_buffer@@Base>
   12804:	cmp	r0, #0
   12808:	bne	12818 <create_monster_top_down@@Base+0x48>
   1280c:	mov	r1, #10
   12810:	mov	r0, r4
   12814:	bl	14f28 <flatcc_builder_start_table@@Base>
   12818:	mov	r3, #4
   1281c:	mov	r2, #12
   12820:	mov	r1, #0
   12824:	mov	r0, r4
   12828:	bl	16924 <flatcc_builder_table_add@@Base>
   1282c:	cmp	r0, #0
   12830:	beq	1284c <create_monster_top_down@@Base+0x7c>
   12834:	mov	r3, #1065353216	; 0x3f800000
   12838:	str	r3, [r0]
   1283c:	mov	r3, #1073741824	; 0x40000000
   12840:	str	r3, [r0, #4]
   12844:	ldr	r3, [pc, #720]	; 12b1c <create_monster_top_down@@Base+0x34c>
   12848:	str	r3, [r0, #8]
   1284c:	mov	r3, #2
   12850:	mov	r2, r3
   12854:	mov	r1, r3
   12858:	mov	r0, r4
   1285c:	bl	16924 <flatcc_builder_table_add@@Base>
   12860:	cmp	r0, #0
   12864:	movne	r3, #300	; 0x12c
   12868:	strhne	r3, [r0]
   1286c:	ldr	r1, [pc, #684]	; 12b20 <create_monster_top_down@@Base+0x350>
   12870:	mov	r0, r4
   12874:	bl	167b0 <flatcc_builder_create_string_str@@Base>
   12878:	subs	r5, r0, #0
   1287c:	beq	12894 <create_monster_top_down@@Base+0xc4>
   12880:	mov	r1, #3
   12884:	mov	r0, r4
   12888:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   1288c:	cmp	r0, #0
   12890:	strne	r5, [r0]
   12894:	mvn	r3, #0
   12898:	str	r3, [sp, #4]
   1289c:	mov	r3, #1
   128a0:	str	r3, [sp]
   128a4:	mov	r2, #10
   128a8:	add	r1, sp, #12
   128ac:	mov	r0, r4
   128b0:	bl	15b2c <flatcc_builder_create_vector@@Base>
   128b4:	subs	r5, r0, #0
   128b8:	beq	128d0 <create_monster_top_down@@Base+0x100>
   128bc:	mov	r1, #5
   128c0:	mov	r0, r4
   128c4:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   128c8:	cmp	r0, #0
   128cc:	strne	r5, [r0]
   128d0:	mov	r3, #1
   128d4:	mov	r2, r3
   128d8:	mov	r1, #6
   128dc:	mov	r0, r4
   128e0:	bl	16924 <flatcc_builder_table_add@@Base>
   128e4:	cmp	r0, #0
   128e8:	movne	r3, #0
   128ec:	strbne	r3, [r0]
   128f0:	mov	r0, r4
   128f4:	bl	14d04 <flatcc_builder_start_offset_vector@@Base>
   128f8:	ldr	r1, [pc, #548]	; 12b24 <create_monster_top_down@@Base+0x354>
   128fc:	mov	r0, r4
   12900:	bl	167b0 <flatcc_builder_create_string_str@@Base>
   12904:	mov	r5, r0
   12908:	mov	r1, #2
   1290c:	mov	r0, r4
   12910:	bl	14f28 <flatcc_builder_start_table@@Base>
   12914:	cmp	r0, #0
   12918:	bne	12990 <create_monster_top_down@@Base+0x1c0>
   1291c:	cmp	r5, #0
   12920:	beq	12990 <create_monster_top_down@@Base+0x1c0>
   12924:	mov	r1, #0
   12928:	mov	r0, r4
   1292c:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   12930:	cmp	r0, #0
   12934:	beq	12990 <create_monster_top_down@@Base+0x1c0>
   12938:	str	r5, [r0]
   1293c:	mov	r3, #2
   12940:	mov	r2, r3
   12944:	mov	r1, #1
   12948:	mov	r0, r4
   1294c:	bl	16924 <flatcc_builder_table_add@@Base>
   12950:	cmp	r0, #0
   12954:	beq	12990 <create_monster_top_down@@Base+0x1c0>
   12958:	mov	r3, #3
   1295c:	strh	r3, [r0]
   12960:	mov	r2, #0
   12964:	ldr	r1, [pc, #444]	; 12b28 <create_monster_top_down@@Base+0x358>
   12968:	mov	r0, r4
   1296c:	bl	158cc <flatcc_builder_check_required@@Base>
   12970:	cmp	r0, #0
   12974:	beq	129c4 <create_monster_top_down@@Base+0x1f4>
   12978:	mov	r0, r4
   1297c:	bl	15978 <flatcc_builder_end_table@@Base>
   12980:	subs	r1, r0, #0
   12984:	beq	12990 <create_monster_top_down@@Base+0x1c0>
   12988:	mov	r0, r4
   1298c:	bl	1476c <flatcc_builder_offset_vector_push@@Base>
   12990:	ldr	r1, [pc, #404]	; 12b2c <create_monster_top_down@@Base+0x35c>
   12994:	mov	r0, r4
   12998:	bl	167b0 <flatcc_builder_create_string_str@@Base>
   1299c:	mov	r5, r0
   129a0:	mov	r1, #2
   129a4:	mov	r0, r4
   129a8:	bl	14f28 <flatcc_builder_start_table@@Base>
   129ac:	cmp	r0, #0
   129b0:	bne	12afc <create_monster_top_down@@Base+0x32c>
   129b4:	cmp	r5, #0
   129b8:	bne	129d8 <create_monster_top_down@@Base+0x208>
   129bc:	mov	r0, #0
   129c0:	b	12a48 <create_monster_top_down@@Base+0x278>
   129c4:	ldr	r3, [pc, #356]	; 12b30 <create_monster_top_down@@Base+0x360>
   129c8:	mov	r2, #52	; 0x34
   129cc:	ldr	r1, [pc, #352]	; 12b34 <create_monster_top_down@@Base+0x364>
   129d0:	ldr	r0, [pc, #352]	; 12b38 <create_monster_top_down@@Base+0x368>
   129d4:	bl	11ffc <__assert_fail@plt>
   129d8:	mov	r1, #0
   129dc:	mov	r0, r4
   129e0:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   129e4:	cmp	r0, #0
   129e8:	beq	129bc <create_monster_top_down@@Base+0x1ec>
   129ec:	str	r5, [r0]
   129f0:	mov	r3, #2
   129f4:	mov	r2, r3
   129f8:	mov	r1, #1
   129fc:	mov	r0, r4
   12a00:	bl	16924 <flatcc_builder_table_add@@Base>
   12a04:	cmp	r0, #0
   12a08:	beq	129bc <create_monster_top_down@@Base+0x1ec>
   12a0c:	mov	r3, #5
   12a10:	strh	r3, [r0]
   12a14:	mov	r2, #0
   12a18:	ldr	r1, [pc, #264]	; 12b28 <create_monster_top_down@@Base+0x358>
   12a1c:	mov	r0, r4
   12a20:	bl	158cc <flatcc_builder_check_required@@Base>
   12a24:	cmp	r0, #0
   12a28:	beq	12ae8 <create_monster_top_down@@Base+0x318>
   12a2c:	mov	r0, r4
   12a30:	bl	15978 <flatcc_builder_end_table@@Base>
   12a34:	subs	r1, r0, #0
   12a38:	moveq	r0, #0
   12a3c:	beq	12a48 <create_monster_top_down@@Base+0x278>
   12a40:	mov	r0, r4
   12a44:	bl	1476c <flatcc_builder_offset_vector_push@@Base>
   12a48:	ldr	r5, [r0]
   12a4c:	mov	r0, r4
   12a50:	bl	15da0 <flatcc_builder_end_offset_vector@@Base>
   12a54:	subs	r6, r0, #0
   12a58:	beq	12a70 <create_monster_top_down@@Base+0x2a0>
   12a5c:	mov	r1, #7
   12a60:	mov	r0, r4
   12a64:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   12a68:	cmp	r0, #0
   12a6c:	strne	r6, [r0]
   12a70:	cmp	r5, #0
   12a74:	beq	12ab0 <create_monster_top_down@@Base+0x2e0>
   12a78:	mov	r3, #1
   12a7c:	mov	r2, r3
   12a80:	mov	r1, #8
   12a84:	mov	r0, r4
   12a88:	bl	16924 <flatcc_builder_table_add@@Base>
   12a8c:	subs	r6, r0, #0
   12a90:	beq	12ab0 <create_monster_top_down@@Base+0x2e0>
   12a94:	mov	r1, #9
   12a98:	mov	r0, r4
   12a9c:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   12aa0:	cmp	r0, #0
   12aa4:	movne	r3, #1
   12aa8:	strbne	r3, [r6]
   12aac:	strne	r5, [r0]
   12ab0:	mov	r2, #0
   12ab4:	ldr	r1, [pc, #128]	; 12b3c <create_monster_top_down@@Base+0x36c>
   12ab8:	mov	r0, r4
   12abc:	bl	158cc <flatcc_builder_check_required@@Base>
   12ac0:	cmp	r0, #0
   12ac4:	beq	12b04 <create_monster_top_down@@Base+0x334>
   12ac8:	mov	r0, r4
   12acc:	bl	15978 <flatcc_builder_end_table@@Base>
   12ad0:	mov	r1, r0
   12ad4:	mov	r0, r4
   12ad8:	bl	141b4 <flatcc_builder_end_buffer@@Base>
   12adc:	mov	r0, #0
   12ae0:	add	sp, sp, #24
   12ae4:	pop	{r4, r5, r6, pc}
   12ae8:	ldr	r3, [pc, #64]	; 12b30 <create_monster_top_down@@Base+0x360>
   12aec:	mov	r2, #52	; 0x34
   12af0:	ldr	r1, [pc, #60]	; 12b34 <create_monster_top_down@@Base+0x364>
   12af4:	ldr	r0, [pc, #60]	; 12b38 <create_monster_top_down@@Base+0x368>
   12af8:	bl	11ffc <__assert_fail@plt>
   12afc:	mov	r0, #0
   12b00:	b	12a48 <create_monster_top_down@@Base+0x278>
   12b04:	ldr	r3, [pc, #52]	; 12b40 <create_monster_top_down@@Base+0x370>
   12b08:	mov	r2, #50	; 0x32
   12b0c:	ldr	r1, [pc, #32]	; 12b34 <create_monster_top_down@@Base+0x364>
   12b10:	ldr	r0, [pc, #44]	; 12b44 <create_monster_top_down@@Base+0x374>
   12b14:	bl	11ffc <__assert_fail@plt>
   12b18:	andeq	r7, r1, ip, lsr #16
   12b1c:	submi	r0, r0, r0
   12b20:	muleq	r1, r8, r9
   12b24:	muleq	r1, r4, r8
   12b28:	andeq	r7, r1, ip, lsl #16
   12b2c:	muleq	r1, ip, r8
   12b30:	andeq	r7, r1, r0, lsl r8
   12b34:	andeq	r7, r1, r0, lsr #17
   12b38:	strdeq	r7, [r1], -ip
   12b3c:	andeq	r7, r1, r8, lsr r8
   12b40:	andeq	r7, r1, ip, lsr r8
   12b44:	muleq	r1, ip, r9

00012b48 <access_monster_buffer@@Base>:
   12b48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b4c:	cmp	r0, #0
   12b50:	beq	12d80 <access_monster_buffer@@Base+0x238>
   12b54:	ldr	r3, [r0]
   12b58:	adds	r4, r0, r3
   12b5c:	beq	12d80 <access_monster_buffer@@Base+0x238>
   12b60:	ldr	r6, [r0, r3]
   12b64:	sub	r6, r4, r6
   12b68:	ldrh	r5, [r6]
   12b6c:	cmp	r5, #9
   12b70:	movls	r7, #0
   12b74:	movls	r1, #100	; 0x64
   12b78:	bls	12b8c <access_monster_buffer@@Base+0x44>
   12b7c:	ldrh	r7, [r6, #8]
   12b80:	cmp	r7, #0
   12b84:	ldrshne	r1, [r4, r7]
   12b88:	moveq	r1, #100	; 0x64
   12b8c:	cmp	r5, #7
   12b90:	movls	r8, #0
   12b94:	movls	r2, #150	; 0x96
   12b98:	bls	12bac <access_monster_buffer@@Base+0x64>
   12b9c:	ldrh	r8, [r6, #6]
   12ba0:	cmp	r8, #0
   12ba4:	ldrshne	r2, [r4, r8]
   12ba8:	moveq	r2, #150	; 0x96
   12bac:	cmp	r5, #11
   12bb0:	movls	r0, #0
   12bb4:	movls	r9, r0
   12bb8:	bls	12be8 <access_monster_buffer@@Base+0xa0>
   12bbc:	ldrh	r3, [r6, #10]
   12bc0:	cmp	r3, #0
   12bc4:	moveq	r0, #0
   12bc8:	moveq	r9, r0
   12bcc:	beq	12be8 <access_monster_buffer@@Base+0xa0>
   12bd0:	add	r0, r4, r3
   12bd4:	ldr	r3, [r4, r3]
   12bd8:	add	r3, r3, #4
   12bdc:	adds	r0, r0, r3
   12be0:	moveq	r9, #0
   12be4:	ldrne	r9, [r0, #-4]
   12be8:	cmp	r1, #300	; 0x12c
   12bec:	bne	12d94 <access_monster_buffer@@Base+0x24c>
   12bf0:	cmp	r2, #150	; 0x96
   12bf4:	bne	12da8 <access_monster_buffer@@Base+0x260>
   12bf8:	ldr	r1, [pc, #1020]	; 12ffc <access_monster_buffer@@Base+0x4b4>
   12bfc:	bl	11f54 <strcmp@plt>
   12c00:	cmp	r0, #0
   12c04:	bne	12dbc <access_monster_buffer@@Base+0x274>
   12c08:	cmp	r9, #3
   12c0c:	bne	12dd0 <access_monster_buffer@@Base+0x288>
   12c10:	cmp	r7, #0
   12c14:	beq	12de4 <access_monster_buffer@@Base+0x29c>
   12c18:	cmp	r8, #0
   12c1c:	bne	12df8 <access_monster_buffer@@Base+0x2b0>
   12c20:	cmp	r5, #5
   12c24:	bls	12e0c <access_monster_buffer@@Base+0x2c4>
   12c28:	ldrh	r3, [r6, #4]
   12c2c:	cmp	r3, #0
   12c30:	beq	12e0c <access_monster_buffer@@Base+0x2c4>
   12c34:	adds	r3, r4, r3
   12c38:	beq	12e0c <access_monster_buffer@@Base+0x2c4>
   12c3c:	vldr	s14, [r3, #4]
   12c40:	vldr	s12, [r3, #8]
   12c44:	vldr	s13, [r3]
   12c48:	vldr	s15, [pc, #928]	; 12ff0 <access_monster_buffer@@Base+0x4a8>
   12c4c:	vcmp.f32	s13, s15
   12c50:	vmrs	APSR_nzcv, fpscr
   12c54:	bne	12e20 <access_monster_buffer@@Base+0x2d8>
   12c58:	vldr	s15, [pc, #916]	; 12ff4 <access_monster_buffer@@Base+0x4ac>
   12c5c:	vcmp.f32	s14, s15
   12c60:	vmrs	APSR_nzcv, fpscr
   12c64:	bne	12e34 <access_monster_buffer@@Base+0x2ec>
   12c68:	vldr	s15, [pc, #904]	; 12ff8 <access_monster_buffer@@Base+0x4b0>
   12c6c:	vcmp.f32	s12, s15
   12c70:	vmrs	APSR_nzcv, fpscr
   12c74:	bne	12e48 <access_monster_buffer@@Base+0x300>
   12c78:	cmp	r5, #15
   12c7c:	bls	12e5c <access_monster_buffer@@Base+0x314>
   12c80:	ldrh	r2, [r6, #14]
   12c84:	cmp	r2, #0
   12c88:	beq	12e5c <access_monster_buffer@@Base+0x314>
   12c8c:	add	r3, r4, r2
   12c90:	ldr	r2, [r4, r2]
   12c94:	add	r2, r2, #4
   12c98:	adds	r3, r3, r2
   12c9c:	beq	12e5c <access_monster_buffer@@Base+0x314>
   12ca0:	ldr	r2, [r3, #-4]
   12ca4:	cmp	r2, #10
   12ca8:	bne	12e70 <access_monster_buffer@@Base+0x328>
   12cac:	ldrb	r3, [r3, #2]
   12cb0:	cmp	r3, #2
   12cb4:	bne	12e84 <access_monster_buffer@@Base+0x33c>
   12cb8:	cmp	r5, #19
   12cbc:	bls	12e98 <access_monster_buffer@@Base+0x350>
   12cc0:	ldrh	r2, [r6, #18]
   12cc4:	cmp	r2, #0
   12cc8:	beq	12e98 <access_monster_buffer@@Base+0x350>
   12ccc:	add	r3, r4, r2
   12cd0:	ldr	r2, [r4, r2]
   12cd4:	add	r2, r2, #4
   12cd8:	adds	r3, r3, r2
   12cdc:	beq	12e98 <access_monster_buffer@@Base+0x350>
   12ce0:	ldr	r2, [r3, #-4]
   12ce4:	cmp	r2, #2
   12ce8:	bne	12e98 <access_monster_buffer@@Base+0x350>
   12cec:	ldr	r2, [r3, #4]
   12cf0:	add	r2, r2, #4
   12cf4:	adds	r1, r3, r2
   12cf8:	beq	12eac <access_monster_buffer@@Base+0x364>
   12cfc:	ldr	r3, [r3, r2]
   12d00:	sub	r3, r1, r3
   12d04:	ldrh	ip, [r3]
   12d08:	cmp	ip, #5
   12d0c:	bls	12fac <access_monster_buffer@@Base+0x464>
   12d10:	ldrh	r2, [r3, #4]
   12d14:	cmp	r2, #0
   12d18:	beq	12fac <access_monster_buffer@@Base+0x464>
   12d1c:	add	r0, r1, r2
   12d20:	ldr	r2, [r1, r2]
   12d24:	add	r2, r2, #4
   12d28:	add	r0, r0, r2
   12d2c:	cmp	ip, #7
   12d30:	movls	r7, #0
   12d34:	bhi	12fb8 <access_monster_buffer@@Base+0x470>
   12d38:	cmp	r0, #0
   12d3c:	beq	12ec0 <access_monster_buffer@@Base+0x378>
   12d40:	ldr	r1, [pc, #696]	; 13000 <access_monster_buffer@@Base+0x4b8>
   12d44:	bl	11f54 <strcmp@plt>
   12d48:	cmp	r0, #0
   12d4c:	bne	12ec0 <access_monster_buffer@@Base+0x378>
   12d50:	cmp	r7, #5
   12d54:	bne	12ed4 <access_monster_buffer@@Base+0x38c>
   12d58:	cmp	r5, #21
   12d5c:	bls	12d78 <access_monster_buffer@@Base+0x230>
   12d60:	ldrh	r3, [r6, #20]
   12d64:	cmp	r3, #0
   12d68:	beq	12d78 <access_monster_buffer@@Base+0x230>
   12d6c:	ldrb	r3, [r4, r3]
   12d70:	cmp	r3, #1
   12d74:	beq	12ee8 <access_monster_buffer@@Base+0x3a0>
   12d78:	mov	r0, #0
   12d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d80:	ldr	r3, [pc, #636]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12d84:	mov	r2, #211	; 0xd3
   12d88:	ldr	r1, [pc, #632]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12d8c:	ldr	r0, [pc, #632]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12d90:	bl	11ffc <__assert_fail@plt>
   12d94:	ldr	r3, [pc, #616]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12d98:	mov	r2, #219	; 0xdb
   12d9c:	ldr	r1, [pc, #612]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12da0:	ldr	r0, [pc, #612]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12da4:	bl	11ffc <__assert_fail@plt>
   12da8:	ldr	r3, [pc, #596]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12dac:	mov	r2, #221	; 0xdd
   12db0:	ldr	r1, [pc, #592]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12db4:	ldr	r0, [pc, #592]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12db8:	bl	11ffc <__assert_fail@plt>
   12dbc:	ldr	r3, [pc, #576]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12dc0:	mov	r2, #222	; 0xde
   12dc4:	ldr	r1, [pc, #572]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12dc8:	ldr	r0, [pc, #572]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12dcc:	bl	11ffc <__assert_fail@plt>
   12dd0:	ldr	r3, [pc, #556]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12dd4:	mov	r2, #223	; 0xdf
   12dd8:	ldr	r1, [pc, #552]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12ddc:	ldr	r0, [pc, #552]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12de0:	bl	11ffc <__assert_fail@plt>
   12de4:	ldr	r3, [pc, #536]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12de8:	mov	r2, #227	; 0xe3
   12dec:	ldr	r1, [pc, #532]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12df0:	ldr	r0, [pc, #532]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12df4:	bl	11ffc <__assert_fail@plt>
   12df8:	ldr	r3, [pc, #516]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12dfc:	mov	r2, #228	; 0xe4
   12e00:	ldr	r1, [pc, #512]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12e04:	ldr	r0, [pc, #512]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12e08:	bl	11ffc <__assert_fail@plt>
   12e0c:	ldr	r3, [pc, #496]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12e10:	mov	r2, #232	; 0xe8
   12e14:	ldr	r1, [pc, #492]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12e18:	ldr	r0, [pc, #492]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12e1c:	bl	11ffc <__assert_fail@plt>
   12e20:	ldr	r3, [pc, #476]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12e24:	mov	r2, #240	; 0xf0
   12e28:	ldr	r1, [pc, #472]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12e2c:	ldr	r0, [pc, #472]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12e30:	bl	11ffc <__assert_fail@plt>
   12e34:	ldr	r3, [pc, #456]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12e38:	mov	r2, #241	; 0xf1
   12e3c:	ldr	r1, [pc, #452]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12e40:	ldr	r0, [pc, #452]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12e44:	bl	11ffc <__assert_fail@plt>
   12e48:	ldr	r3, [pc, #436]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12e4c:	mov	r2, #242	; 0xf2
   12e50:	ldr	r1, [pc, #432]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12e54:	ldr	r0, [pc, #432]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12e58:	bl	11ffc <__assert_fail@plt>
   12e5c:	ldr	r3, [pc, #416]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12e60:	ldr	r2, [pc, #424]	; 13010 <access_monster_buffer@@Base+0x4c8>
   12e64:	ldr	r1, [pc, #412]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12e68:	ldr	r0, [pc, #412]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12e6c:	bl	11ffc <__assert_fail@plt>
   12e70:	ldr	r3, [pc, #396]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12e74:	ldr	r2, [pc, #408]	; 13014 <access_monster_buffer@@Base+0x4cc>
   12e78:	ldr	r1, [pc, #392]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12e7c:	ldr	r0, [pc, #392]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12e80:	bl	11ffc <__assert_fail@plt>
   12e84:	ldr	r3, [pc, #376]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12e88:	ldr	r2, [pc, #392]	; 13018 <access_monster_buffer@@Base+0x4d0>
   12e8c:	ldr	r1, [pc, #372]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12e90:	ldr	r0, [pc, #372]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12e94:	bl	11ffc <__assert_fail@plt>
   12e98:	ldr	r3, [pc, #356]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12e9c:	ldr	r2, [pc, #376]	; 1301c <access_monster_buffer@@Base+0x4d4>
   12ea0:	ldr	r1, [pc, #352]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12ea4:	ldr	r0, [pc, #352]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12ea8:	bl	11ffc <__assert_fail@plt>
   12eac:	ldr	r3, [pc, #364]	; 13020 <access_monster_buffer@@Base+0x4d8>
   12eb0:	mov	r2, #148	; 0x94
   12eb4:	ldr	r1, [pc, #360]	; 13024 <access_monster_buffer@@Base+0x4dc>
   12eb8:	ldr	r0, [pc, #360]	; 13028 <access_monster_buffer@@Base+0x4e0>
   12ebc:	bl	11ffc <__assert_fail@plt>
   12ec0:	ldr	r3, [pc, #316]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12ec4:	ldr	r2, [pc, #352]	; 1302c <access_monster_buffer@@Base+0x4e4>
   12ec8:	ldr	r1, [pc, #312]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12ecc:	ldr	r0, [pc, #312]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12ed0:	bl	11ffc <__assert_fail@plt>
   12ed4:	ldr	r3, [pc, #296]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12ed8:	mov	r2, #276	; 0x114
   12edc:	ldr	r1, [pc, #292]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12ee0:	ldr	r0, [pc, #292]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12ee4:	bl	11ffc <__assert_fail@plt>
   12ee8:	cmp	r5, #23
   12eec:	bls	12f84 <access_monster_buffer@@Base+0x43c>
   12ef0:	ldrh	r3, [r6, #22]
   12ef4:	cmp	r3, #0
   12ef8:	beq	12f84 <access_monster_buffer@@Base+0x43c>
   12efc:	add	r1, r4, r3
   12f00:	ldr	r3, [r4, r3]
   12f04:	adds	r2, r1, r3
   12f08:	beq	12f84 <access_monster_buffer@@Base+0x43c>
   12f0c:	ldr	r3, [r1, r3]
   12f10:	sub	r3, r2, r3
   12f14:	ldrh	ip, [r3]
   12f18:	cmp	ip, #5
   12f1c:	movls	r0, #0
   12f20:	bls	12f40 <access_monster_buffer@@Base+0x3f8>
   12f24:	ldrh	r1, [r3, #4]
   12f28:	cmp	r1, #0
   12f2c:	addne	r0, r2, r1
   12f30:	ldrne	r1, [r2, r1]
   12f34:	addne	r1, r1, #4
   12f38:	addne	r0, r0, r1
   12f3c:	moveq	r0, #0
   12f40:	cmp	ip, #7
   12f44:	bls	12fcc <access_monster_buffer@@Base+0x484>
   12f48:	ldrh	r3, [r3, #6]
   12f4c:	cmp	r3, #0
   12f50:	beq	12f98 <access_monster_buffer@@Base+0x450>
   12f54:	ldrsh	r4, [r2, r3]
   12f58:	ldr	r1, [pc, #160]	; 13000 <access_monster_buffer@@Base+0x4b8>
   12f5c:	bl	11f54 <strcmp@plt>
   12f60:	cmp	r0, #0
   12f64:	bne	12fdc <access_monster_buffer@@Base+0x494>
   12f68:	cmp	r4, #5
   12f6c:	beq	12d78 <access_monster_buffer@@Base+0x230>
   12f70:	ldr	r3, [pc, #140]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12f74:	ldr	r2, [pc, #180]	; 13030 <access_monster_buffer@@Base+0x4e8>
   12f78:	ldr	r1, [pc, #136]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12f7c:	ldr	r0, [pc, #136]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12f80:	bl	11ffc <__assert_fail@plt>
   12f84:	ldr	r3, [pc, #148]	; 13020 <access_monster_buffer@@Base+0x4d8>
   12f88:	mov	r2, #148	; 0x94
   12f8c:	ldr	r1, [pc, #144]	; 13024 <access_monster_buffer@@Base+0x4dc>
   12f90:	ldr	r0, [pc, #144]	; 13028 <access_monster_buffer@@Base+0x4e0>
   12f94:	bl	11ffc <__assert_fail@plt>
   12f98:	ldr	r1, [pc, #96]	; 13000 <access_monster_buffer@@Base+0x4b8>
   12f9c:	bl	11f54 <strcmp@plt>
   12fa0:	cmp	r0, #0
   12fa4:	beq	12f70 <access_monster_buffer@@Base+0x428>
   12fa8:	b	12fdc <access_monster_buffer@@Base+0x494>
   12fac:	cmp	ip, #7
   12fb0:	movhi	r0, #0
   12fb4:	bls	12ec0 <access_monster_buffer@@Base+0x378>
   12fb8:	ldrh	r3, [r3, #6]
   12fbc:	cmp	r3, #0
   12fc0:	ldrshne	r7, [r1, r3]
   12fc4:	moveq	r7, #0
   12fc8:	b	12d38 <access_monster_buffer@@Base+0x1f0>
   12fcc:	ldr	r1, [pc, #44]	; 13000 <access_monster_buffer@@Base+0x4b8>
   12fd0:	bl	11f54 <strcmp@plt>
   12fd4:	cmp	r0, #0
   12fd8:	beq	12f70 <access_monster_buffer@@Base+0x428>
   12fdc:	ldr	r3, [pc, #32]	; 13004 <access_monster_buffer@@Base+0x4bc>
   12fe0:	ldr	r2, [pc, #76]	; 13034 <access_monster_buffer@@Base+0x4ec>
   12fe4:	ldr	r1, [pc, #28]	; 13008 <access_monster_buffer@@Base+0x4c0>
   12fe8:	ldr	r0, [pc, #28]	; 1300c <access_monster_buffer@@Base+0x4c4>
   12fec:	bl	11ffc <__assert_fail@plt>
   12ff0:	svccc	0x00800000
   12ff4:	andmi	r0, r0, r0
   12ff8:	submi	r0, r0, r0
   12ffc:	muleq	r1, r8, r9
   13000:	muleq	r1, ip, r8
   13004:	andeq	r7, r1, r8, asr r8
   13008:	andeq	r7, r1, ip, lsr sl
   1300c:	andeq	r8, r1, r8, ror #5
   13010:	andeq	r0, r0, r5, lsl #2
   13014:	andeq	r0, r0, r7, lsl #2
   13018:	andeq	r0, r0, fp, lsl #2
   1301c:	andeq	r0, r0, pc, lsl #2
   13020:	andeq	r7, r1, r0, ror r8
   13024:	andeq	r7, r1, r8, lsl #21
   13028:	andeq	r7, r1, r4, ror #21
   1302c:	andeq	r0, r0, r3, lsl r1
   13030:	andeq	r0, r0, pc, lsl r1
   13034:	andeq	r0, r0, lr, lsl r1

00013038 <main@@Base>:
   13038:	push	{r4, lr}
   1303c:	sub	sp, sp, #240	; 0xf0
   13040:	add	r0, sp, #8
   13044:	bl	137c8 <flatcc_builder_init@@Base>
   13048:	mov	r1, #0
   1304c:	add	r0, sp, #8
   13050:	bl	12130 <create_monster_bottom_up@@Base>
   13054:	cmp	r0, #0
   13058:	bne	130f4 <main@@Base+0xbc>
   1305c:	add	r1, sp, #4
   13060:	add	r0, sp, #8
   13064:	bl	1707c <flatcc_builder_finalize_aligned_buffer@@Base>
   13068:	bl	17188 <flatcc_builder_aligned_free@@Base>
   1306c:	add	r0, sp, #8
   13070:	bl	1395c <flatcc_builder_reset@@Base>
   13074:	mov	r1, #1
   13078:	add	r0, sp, #8
   1307c:	bl	12130 <create_monster_bottom_up@@Base>
   13080:	cmp	r0, #0
   13084:	bne	13108 <main@@Base+0xd0>
   13088:	add	r1, sp, #4
   1308c:	add	r0, sp, #8
   13090:	bl	1707c <flatcc_builder_finalize_aligned_buffer@@Base>
   13094:	mov	r4, r0
   13098:	bl	12b48 <access_monster_buffer@@Base>
   1309c:	mov	r0, r4
   130a0:	bl	17188 <flatcc_builder_aligned_free@@Base>
   130a4:	add	r0, sp, #8
   130a8:	bl	1395c <flatcc_builder_reset@@Base>
   130ac:	add	r0, sp, #8
   130b0:	bl	127d0 <create_monster_top_down@@Base>
   130b4:	add	r1, sp, #4
   130b8:	add	r0, sp, #8
   130bc:	bl	16ff4 <flatcc_builder_finalize_buffer@@Base>
   130c0:	mov	r4, r0
   130c4:	bl	12b48 <access_monster_buffer@@Base>
   130c8:	cmp	r0, #0
   130cc:	bne	1311c <main@@Base+0xe4>
   130d0:	mov	r0, r4
   130d4:	bl	11f60 <free@plt>
   130d8:	add	r0, sp, #8
   130dc:	bl	13970 <flatcc_builder_clear@@Base>
   130e0:	ldr	r0, [pc, #72]	; 13130 <main@@Base+0xf8>
   130e4:	bl	11f90 <puts@plt>
   130e8:	mov	r0, #0
   130ec:	add	sp, sp, #240	; 0xf0
   130f0:	pop	{r4, pc}
   130f4:	ldr	r3, [pc, #56]	; 13134 <main@@Base+0xfc>
   130f8:	mov	r2, #308	; 0x134
   130fc:	ldr	r1, [pc, #52]	; 13138 <main@@Base+0x100>
   13100:	ldr	r0, [pc, #52]	; 1313c <main@@Base+0x104>
   13104:	bl	11ffc <__assert_fail@plt>
   13108:	ldr	r3, [pc, #36]	; 13134 <main@@Base+0xfc>
   1310c:	ldr	r2, [pc, #44]	; 13140 <main@@Base+0x108>
   13110:	ldr	r1, [pc, #32]	; 13138 <main@@Base+0x100>
   13114:	ldr	r0, [pc, #32]	; 1313c <main@@Base+0x104>
   13118:	bl	11ffc <__assert_fail@plt>
   1311c:	ldr	r3, [pc, #16]	; 13134 <main@@Base+0xfc>
   13120:	ldr	r2, [pc, #28]	; 13144 <main@@Base+0x10c>
   13124:	ldr	r1, [pc, #12]	; 13138 <main@@Base+0x100>
   13128:	ldr	r0, [pc, #12]	; 1313c <main@@Base+0x104>
   1312c:	bl	11ffc <__assert_fail@plt>
   13130:	andeq	r7, r1, ip, lsl #22
   13134:	andeq	r7, r1, ip, lsl #17
   13138:	andeq	r7, r1, ip, lsr sl
   1313c:	andeq	r8, r1, r8, ror #5
   13140:	andeq	r0, r0, pc, asr #2
   13144:	andeq	r0, r0, r6, asr r1
   13148:	push	{r4, r5, r6, lr}
   1314c:	sub	sp, sp, #8
   13150:	mov	r4, r0
   13154:	mov	r5, r2
   13158:	ldr	r2, [r0, #28]
   1315c:	mov	r3, #1
   13160:	str	r3, [sp]
   13164:	ldr	r6, [r0, #48]	; 0x30
   13168:	add	r2, r1, r2
   1316c:	add	r1, r0, #60	; 0x3c
   13170:	ldr	r0, [r0, #40]	; 0x28
   13174:	blx	r6
   13178:	cmp	r0, #0
   1317c:	bne	131b4 <main@@Base+0x17c>
   13180:	ldr	r1, [r4, #28]
   13184:	ldr	r2, [r4, #60]	; 0x3c
   13188:	add	r2, r2, r1
   1318c:	str	r2, [r4, #16]
   13190:	ldr	r3, [r4, #64]	; 0x40
   13194:	sub	r3, r3, r1
   13198:	cmp	r3, r5
   1319c:	movcs	r3, r5
   131a0:	str	r3, [r4, #24]
   131a4:	ldr	r3, [r4, #32]
   131a8:	str	r5, [r3, #4]
   131ac:	add	sp, sp, #8
   131b0:	pop	{r4, r5, r6, pc}
   131b4:	mvn	r0, #0
   131b8:	b	131ac <main@@Base+0x174>

000131bc <flatcc_builder_default_alloc@@Base>:
   131bc:	push	{r4, r5, r6, r7, r8, lr}
   131c0:	mov	r5, r1
   131c4:	cmp	r2, #0
   131c8:	bne	131ec <flatcc_builder_default_alloc@@Base+0x30>
   131cc:	ldr	r0, [r1]
   131d0:	cmp	r0, #0
   131d4:	beq	132b8 <flatcc_builder_default_alloc@@Base+0xfc>
   131d8:	bl	11f60 <free@plt>
   131dc:	mov	r0, #0
   131e0:	str	r0, [r5]
   131e4:	str	r0, [r5, #4]
   131e8:	pop	{r4, r5, r6, r7, r8, pc}
   131ec:	mov	r6, r3
   131f0:	ldr	r3, [sp, #24]
   131f4:	sub	r3, r3, #1
   131f8:	cmp	r3, #6
   131fc:	ldrls	pc, [pc, r3, lsl #2]
   13200:	b	13294 <flatcc_builder_default_alloc@@Base+0xd8>
   13204:	andeq	r3, r1, r8, lsr #4
   13208:	muleq	r1, r4, r2
   1320c:	muleq	r1, r4, r2
   13210:	andeq	r3, r1, r0, lsr #4
   13214:	muleq	r1, ip, r2
   13218:	muleq	r1, r4, r2
   1321c:	andeq	r3, r1, ip, lsl #5
   13220:	mov	r4, #288	; 0x120
   13224:	b	1322c <flatcc_builder_default_alloc@@Base+0x70>
   13228:	mov	r4, #256	; 0x100
   1322c:	cmp	r4, r2
   13230:	bcs	13240 <flatcc_builder_default_alloc@@Base+0x84>
   13234:	lsl	r4, r4, #1
   13238:	cmp	r2, r4
   1323c:	bhi	13234 <flatcc_builder_default_alloc@@Base+0x78>
   13240:	ldr	r3, [r5, #4]
   13244:	cmp	r2, r3
   13248:	bhi	13254 <flatcc_builder_default_alloc@@Base+0x98>
   1324c:	cmp	r4, r3, lsr #1
   13250:	bls	132c0 <flatcc_builder_default_alloc@@Base+0x104>
   13254:	mov	r1, r4
   13258:	ldr	r0, [r5]
   1325c:	bl	11f84 <realloc@plt>
   13260:	subs	r7, r0, #0
   13264:	beq	132c8 <flatcc_builder_default_alloc@@Base+0x10c>
   13268:	cmp	r6, #0
   1326c:	beq	1327c <flatcc_builder_default_alloc@@Base+0xc0>
   13270:	ldr	r0, [r5, #4]
   13274:	cmp	r0, r4
   13278:	bcc	132a4 <flatcc_builder_default_alloc@@Base+0xe8>
   1327c:	str	r7, [r5]
   13280:	str	r4, [r5, #4]
   13284:	mov	r0, #0
   13288:	pop	{r4, r5, r6, r7, r8, pc}
   1328c:	mov	r4, #64	; 0x40
   13290:	b	1322c <flatcc_builder_default_alloc@@Base+0x70>
   13294:	mov	r4, #32
   13298:	b	1322c <flatcc_builder_default_alloc@@Base+0x70>
   1329c:	mov	r4, r2
   132a0:	b	13240 <flatcc_builder_default_alloc@@Base+0x84>
   132a4:	sub	r2, r4, r0
   132a8:	mov	r1, #0
   132ac:	add	r0, r7, r0
   132b0:	bl	11fd8 <memset@plt>
   132b4:	b	1327c <flatcc_builder_default_alloc@@Base+0xc0>
   132b8:	mov	r0, #0
   132bc:	pop	{r4, r5, r6, r7, r8, pc}
   132c0:	mov	r0, #0
   132c4:	pop	{r4, r5, r6, r7, r8, pc}
   132c8:	mvn	r0, #0
   132cc:	pop	{r4, r5, r6, r7, r8, pc}
   132d0:	cmp	r2, #0
   132d4:	bne	132e4 <flatcc_builder_default_alloc@@Base+0x128>
   132d8:	ldrh	r2, [r0, #132]	; 0x84
   132dc:	cmp	r2, #0
   132e0:	moveq	r2, #1
   132e4:	ldrh	ip, [r1]
   132e8:	cmp	ip, #3
   132ec:	movls	ip, #4
   132f0:	strhls	ip, [r1]
   132f4:	ldrh	ip, [r1]
   132f8:	cmp	ip, r2
   132fc:	strhcc	r2, [r1]
   13300:	cmp	r3, #0
   13304:	bne	133c0 <flatcc_builder_default_alloc@@Base+0x204>
   13308:	push	{r4, r5, lr}
   1330c:	sub	sp, sp, #84	; 0x54
   13310:	ldr	r4, [r0, #140]	; 0x8c
   13314:	sub	r2, r2, #1
   13318:	ands	r2, r2, r4
   1331c:	bne	1332c <flatcc_builder_default_alloc@@Base+0x170>
   13320:	mov	r0, #0
   13324:	add	sp, sp, #84	; 0x54
   13328:	pop	{r4, r5, pc}
   1332c:	str	r2, [sp, #8]
   13330:	ldr	r3, [pc, #144]	; 133c8 <flatcc_builder_default_alloc@@Base+0x20c>
   13334:	str	r3, [sp, #16]
   13338:	str	r2, [sp, #20]
   1333c:	mov	r3, #1
   13340:	str	r3, [sp, #12]
   13344:	add	r3, r4, r2
   13348:	str	r3, [r0, #140]	; 0x8c
   1334c:	cmp	r4, r3
   13350:	bgt	13398 <flatcc_builder_default_alloc@@Base+0x1dc>
   13354:	ldr	ip, [r0, #36]	; 0x24
   13358:	str	r2, [sp]
   1335c:	ldr	r5, [r0, #44]	; 0x2c
   13360:	mov	r3, r4
   13364:	mov	r2, #1
   13368:	add	r1, sp, #16
   1336c:	mov	r0, ip
   13370:	blx	r5
   13374:	cmp	r0, #0
   13378:	bne	133ac <flatcc_builder_default_alloc@@Base+0x1f0>
   1337c:	cmn	r4, #1
   13380:	bne	13320 <flatcc_builder_default_alloc@@Base+0x164>
   13384:	ldr	r3, [pc, #64]	; 133cc <flatcc_builder_default_alloc@@Base+0x210>
   13388:	ldr	r2, [pc, #64]	; 133d0 <flatcc_builder_default_alloc@@Base+0x214>
   1338c:	ldr	r1, [pc, #64]	; 133d4 <flatcc_builder_default_alloc@@Base+0x218>
   13390:	ldr	r0, [pc, #64]	; 133d8 <flatcc_builder_default_alloc@@Base+0x21c>
   13394:	bl	11ffc <__assert_fail@plt>
   13398:	ldr	r3, [pc, #60]	; 133dc <flatcc_builder_default_alloc@@Base+0x220>
   1339c:	ldr	r2, [pc, #60]	; 133e0 <flatcc_builder_default_alloc@@Base+0x224>
   133a0:	ldr	r1, [pc, #44]	; 133d4 <flatcc_builder_default_alloc@@Base+0x218>
   133a4:	ldr	r0, [pc, #44]	; 133d8 <flatcc_builder_default_alloc@@Base+0x21c>
   133a8:	bl	11ffc <__assert_fail@plt>
   133ac:	ldr	r3, [pc, #40]	; 133dc <flatcc_builder_default_alloc@@Base+0x220>
   133b0:	ldr	r2, [pc, #44]	; 133e4 <flatcc_builder_default_alloc@@Base+0x228>
   133b4:	ldr	r1, [pc, #24]	; 133d4 <flatcc_builder_default_alloc@@Base+0x218>
   133b8:	ldr	r0, [pc, #24]	; 133d8 <flatcc_builder_default_alloc@@Base+0x21c>
   133bc:	bl	11ffc <__assert_fail@plt>
   133c0:	mov	r0, #0
   133c4:	bx	lr
   133c8:	andeq	r7, r1, r4, asr #22
   133cc:	andeq	r7, r1, r0, asr sp
   133d0:			; <UNDEFINED> instruction: 0x000002be
   133d4:	muleq	r1, r4, r2
   133d8:	andeq	r8, r1, r8, ror #5
   133dc:	andeq	r7, r1, r4, asr #26
   133e0:	andeq	r0, r0, r1, lsr #5
   133e4:	andeq	r0, r0, r5, lsr #5
   133e8:	push	{r4, r5, r6, r7, lr}
   133ec:	sub	sp, sp, #12
   133f0:	mov	r4, r0
   133f4:	mov	r6, r1
   133f8:	ldr	r3, [r0, #156]	; 0x9c
   133fc:	add	r2, r3, #1
   13400:	str	r2, [r0, #156]	; 0x9c
   13404:	ldr	r1, [r0, #160]	; 0xa0
   13408:	cmp	r2, r1
   1340c:	ble	134ac <flatcc_builder_default_alloc@@Base+0x2f0>
   13410:	ldr	r1, [r0, #176]	; 0xb0
   13414:	cmp	r2, r1
   13418:	cmpgt	r1, #0
   1341c:	bgt	13514 <flatcc_builder_default_alloc@@Base+0x358>
   13420:	add	r3, r3, r3, lsl #3
   13424:	lsl	r5, r3, #2
   13428:	add	r2, r5, #36	; 0x24
   1342c:	ldr	r3, [r0, #88]	; 0x58
   13430:	cmp	r2, r3
   13434:	bhi	13474 <flatcc_builder_default_alloc@@Base+0x2b8>
   13438:	ldr	r3, [r4, #84]	; 0x54
   1343c:	add	r5, r3, r5
   13440:	str	r5, [r4, #32]
   13444:	cmp	r5, #0
   13448:	beq	1351c <flatcc_builder_default_alloc@@Base+0x360>
   1344c:	ldr	r3, [r4, #88]	; 0x58
   13450:	ldr	r2, [pc, #204]	; 13524 <flatcc_builder_default_alloc@@Base+0x368>
   13454:	umull	r2, r3, r2, r3
   13458:	lsr	r3, r3, #3
   1345c:	str	r3, [r4, #160]	; 0xa0
   13460:	ldr	r2, [r4, #176]	; 0xb0
   13464:	cmp	r2, #0
   13468:	cmpgt	r3, r2
   1346c:	strgt	r2, [r4, #160]	; 0xa0
   13470:	b	134b8 <flatcc_builder_default_alloc@@Base+0x2fc>
   13474:	mov	r3, #4
   13478:	str	r3, [sp]
   1347c:	ldr	r7, [r0, #48]	; 0x30
   13480:	mov	r3, #0
   13484:	add	r1, r0, #84	; 0x54
   13488:	ldr	r0, [r0, #40]	; 0x28
   1348c:	blx	r7
   13490:	cmp	r0, #0
   13494:	beq	13438 <flatcc_builder_default_alloc@@Base+0x27c>
   13498:	ldr	r3, [pc, #136]	; 13528 <flatcc_builder_default_alloc@@Base+0x36c>
   1349c:	mov	r2, #308	; 0x134
   134a0:	ldr	r1, [pc, #132]	; 1352c <flatcc_builder_default_alloc@@Base+0x370>
   134a4:	ldr	r0, [pc, #132]	; 13530 <flatcc_builder_default_alloc@@Base+0x374>
   134a8:	bl	11ffc <__assert_fail@plt>
   134ac:	ldr	r3, [r0, #32]
   134b0:	add	r3, r3, #36	; 0x24
   134b4:	str	r3, [r0, #32]
   134b8:	ldr	r3, [r4, #32]
   134bc:	ldr	r2, [r4, #20]
   134c0:	str	r2, [r3, #8]
   134c4:	ldr	r3, [r4, #32]
   134c8:	ldrh	r2, [r4, #130]	; 0x82
   134cc:	strh	r2, [r3, #12]
   134d0:	strh	r6, [r4, #130]	; 0x82
   134d4:	ldr	r3, [r4, #32]
   134d8:	ldr	r2, [r4, #28]
   134dc:	str	r2, [r3]
   134e0:	ldr	r3, [r4, #32]
   134e4:	mvn	r2, #3
   134e8:	str	r2, [r3, #4]
   134ec:	ldr	r3, [r4, #28]
   134f0:	ldr	r2, [r4, #20]
   134f4:	add	r3, r3, r2
   134f8:	add	r3, r3, #7
   134fc:	bic	r3, r3, #7
   13500:	str	r3, [r4, #28]
   13504:	mov	r0, #0
   13508:	str	r0, [r4, #20]
   1350c:	add	sp, sp, #12
   13510:	pop	{r4, r5, r6, r7, pc}
   13514:	mvn	r0, #0
   13518:	b	1350c <flatcc_builder_default_alloc@@Base+0x350>
   1351c:	mvn	r0, #0
   13520:	b	1350c <flatcc_builder_default_alloc@@Base+0x350>
   13524:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   13528:	andeq	r7, r1, r0, ror #26
   1352c:	muleq	r1, r4, r2
   13530:	andeq	r8, r1, r8, ror #5
   13534:	push	{r4, r5, r6, r7, r8, lr}
   13538:	sub	sp, sp, #88	; 0x58
   1353c:	cmn	r2, #-1073741823	; 0xc0000001
   13540:	bhi	136f4 <flatcc_builder_default_alloc@@Base+0x538>
   13544:	ldrh	ip, [r0, #128]	; 0x80
   13548:	cmp	ip, #3
   1354c:	movls	ip, #4
   13550:	strhls	ip, [r0, #128]	; 0x80
   13554:	str	r2, [sp, #84]	; 0x54
   13558:	ldr	r7, [r0, #136]	; 0x88
   1355c:	and	lr, r7, #3
   13560:	mov	ip, #4
   13564:	str	ip, [sp, #12]
   13568:	add	r4, sp, #84	; 0x54
   1356c:	str	r4, [sp, #20]
   13570:	str	ip, [sp, #24]
   13574:	mov	ip, #1
   13578:	str	ip, [sp, #16]
   1357c:	lsls	r5, r2, #2
   13580:	beq	1359c <flatcc_builder_default_alloc@@Base+0x3e0>
   13584:	add	ip, r5, #4
   13588:	str	ip, [sp, #12]
   1358c:	str	r1, [sp, #28]
   13590:	str	r5, [sp, #32]
   13594:	mov	ip, #2
   13598:	str	ip, [sp, #16]
   1359c:	cmp	lr, #0
   135a0:	beq	135d0 <flatcc_builder_default_alloc@@Base+0x414>
   135a4:	ldr	ip, [sp, #12]
   135a8:	add	ip, ip, lr
   135ac:	str	ip, [sp, #12]
   135b0:	ldr	ip, [sp, #16]
   135b4:	add	ip, ip, #1
   135b8:	add	r4, sp, #88	; 0x58
   135bc:	add	r4, r4, ip, lsl #3
   135c0:	ldr	r6, [pc, #308]	; 136fc <flatcc_builder_default_alloc@@Base+0x540>
   135c4:	str	r6, [r4, #-76]	; 0xffffffb4
   135c8:	str	lr, [r4, #-72]	; 0xffffffb8
   135cc:	str	ip, [sp, #16]
   135d0:	mov	r6, r0
   135d4:	ldr	r8, [sp, #12]
   135d8:	sub	r7, r7, r8
   135dc:	cmp	r2, #0
   135e0:	beq	13688 <flatcc_builder_default_alloc@@Base+0x4cc>
   135e4:	mov	r2, r1
   135e8:	mov	ip, r3
   135ec:	add	r5, r1, r5
   135f0:	mvn	r1, #3
   135f4:	b	13620 <flatcc_builder_default_alloc@@Base+0x464>
   135f8:	cmp	r3, #0
   135fc:	beq	13674 <flatcc_builder_default_alloc@@Base+0x4b8>
   13600:	ldrb	r0, [ip]
   13604:	cmp	r0, #0
   13608:	bne	13660 <flatcc_builder_default_alloc@@Base+0x4a4>
   1360c:	add	r2, r2, #4
   13610:	add	ip, ip, #1
   13614:	sub	r1, r1, #4
   13618:	cmp	r2, r5
   1361c:	beq	13688 <flatcc_builder_default_alloc@@Base+0x4cc>
   13620:	ldr	lr, [r2]
   13624:	cmp	lr, #0
   13628:	beq	135f8 <flatcc_builder_default_alloc@@Base+0x43c>
   1362c:	sub	r4, r1, r7
   13630:	add	lr, r4, lr
   13634:	str	lr, [r2]
   13638:	cmp	r3, #0
   1363c:	beq	1360c <flatcc_builder_default_alloc@@Base+0x450>
   13640:	ldrb	r0, [ip]
   13644:	cmp	r0, #0
   13648:	bne	1360c <flatcc_builder_default_alloc@@Base+0x450>
   1364c:	ldr	r3, [pc, #172]	; 13700 <flatcc_builder_default_alloc@@Base+0x544>
   13650:	ldr	r2, [pc, #172]	; 13704 <flatcc_builder_default_alloc@@Base+0x548>
   13654:	ldr	r1, [pc, #172]	; 13708 <flatcc_builder_default_alloc@@Base+0x54c>
   13658:	ldr	r0, [pc, #172]	; 1370c <flatcc_builder_default_alloc@@Base+0x550>
   1365c:	bl	11ffc <__assert_fail@plt>
   13660:	ldr	r3, [pc, #152]	; 13700 <flatcc_builder_default_alloc@@Base+0x544>
   13664:	ldr	r2, [pc, #164]	; 13710 <flatcc_builder_default_alloc@@Base+0x554>
   13668:	ldr	r1, [pc, #152]	; 13708 <flatcc_builder_default_alloc@@Base+0x54c>
   1366c:	ldr	r0, [pc, #160]	; 13714 <flatcc_builder_default_alloc@@Base+0x558>
   13670:	bl	11ffc <__assert_fail@plt>
   13674:	ldr	r3, [pc, #132]	; 13700 <flatcc_builder_default_alloc@@Base+0x544>
   13678:	ldr	r2, [pc, #152]	; 13718 <flatcc_builder_default_alloc@@Base+0x55c>
   1367c:	ldr	r1, [pc, #132]	; 13708 <flatcc_builder_default_alloc@@Base+0x54c>
   13680:	ldr	r0, [pc, #148]	; 1371c <flatcc_builder_default_alloc@@Base+0x560>
   13684:	bl	11ffc <__assert_fail@plt>
   13688:	ldr	r3, [r6, #136]	; 0x88
   1368c:	sub	r4, r3, r8
   13690:	cmp	r3, r4
   13694:	ble	136cc <flatcc_builder_default_alloc@@Base+0x510>
   13698:	str	r8, [sp]
   1369c:	ldr	r5, [r6, #44]	; 0x2c
   136a0:	mov	r3, r4
   136a4:	ldr	r2, [sp, #16]
   136a8:	add	r1, sp, #20
   136ac:	ldr	r0, [r6, #36]	; 0x24
   136b0:	blx	r5
   136b4:	cmp	r0, #0
   136b8:	streq	r4, [r6, #136]	; 0x88
   136bc:	bne	136e0 <flatcc_builder_default_alloc@@Base+0x524>
   136c0:	mov	r0, r4
   136c4:	add	sp, sp, #88	; 0x58
   136c8:	pop	{r4, r5, r6, r7, r8, pc}
   136cc:	ldr	r3, [pc, #76]	; 13720 <flatcc_builder_default_alloc@@Base+0x564>
   136d0:	ldr	r2, [pc, #76]	; 13724 <flatcc_builder_default_alloc@@Base+0x568>
   136d4:	ldr	r1, [pc, #44]	; 13708 <flatcc_builder_default_alloc@@Base+0x54c>
   136d8:	ldr	r0, [pc, #60]	; 1371c <flatcc_builder_default_alloc@@Base+0x560>
   136dc:	bl	11ffc <__assert_fail@plt>
   136e0:	ldr	r3, [pc, #56]	; 13720 <flatcc_builder_default_alloc@@Base+0x564>
   136e4:	ldr	r2, [pc, #60]	; 13728 <flatcc_builder_default_alloc@@Base+0x56c>
   136e8:	ldr	r1, [pc, #24]	; 13708 <flatcc_builder_default_alloc@@Base+0x54c>
   136ec:	ldr	r0, [pc, #40]	; 1371c <flatcc_builder_default_alloc@@Base+0x560>
   136f0:	bl	11ffc <__assert_fail@plt>
   136f4:	mov	r4, #0
   136f8:	b	136c0 <flatcc_builder_default_alloc@@Base+0x504>
   136fc:	andeq	r7, r1, r4, asr #22
   13700:	andeq	r7, r1, r0, ror sp
   13704:			; <UNDEFINED> instruction: 0x000005b1
   13708:	muleq	r1, r4, r2
   1370c:	ldrdeq	r8, [r1], -ip
   13710:			; <UNDEFINED> instruction: 0x000005b5
   13714:	andeq	r8, r1, ip, ror #5
   13718:			; <UNDEFINED> instruction: 0x000005b7
   1371c:	andeq	r8, r1, r8, ror #5
   13720:	muleq	r1, r0, sp
   13724:	andeq	r0, r0, r7, lsl #5
   13728:	andeq	r0, r0, fp, lsl #5

0001372c <flatcc_builder_flush_vtable_cache@@Base>:
   1372c:	ldr	r3, [r0, #116]	; 0x74
   13730:	cmp	r3, #0
   13734:	bxeq	lr
   13738:	push	{r4, lr}
   1373c:	mov	r4, r0
   13740:	ldr	r2, [r0, #96]	; 0x60
   13744:	mov	r1, #0
   13748:	ldr	r0, [r0, #92]	; 0x5c
   1374c:	bl	11fd8 <memset@plt>
   13750:	mov	r3, #16
   13754:	str	r3, [r4, #124]	; 0x7c
   13758:	mov	r3, #0
   1375c:	str	r3, [r4, #120]	; 0x78
   13760:	pop	{r4, pc}

00013764 <flatcc_builder_custom_init@@Base>:
   13764:	push	{r4, r5, r6, r7, r8, lr}
   13768:	mov	r4, r0
   1376c:	mov	r6, r1
   13770:	mov	r7, r2
   13774:	mov	r5, r3
   13778:	mov	r2, #232	; 0xe8
   1377c:	mov	r1, #0
   13780:	bl	11fd8 <memset@plt>
   13784:	cmp	r6, #0
   13788:	moveq	r3, #1
   1378c:	streq	r3, [r4, #184]	; 0xb8
   13790:	addeq	r7, r4, #188	; 0xbc
   13794:	ldreq	r6, [pc, #36]	; 137c0 <flatcc_builder_custom_init@@Base+0x5c>
   13798:	ldr	r3, [pc, #36]	; 137c4 <flatcc_builder_custom_init@@Base+0x60>
   1379c:	cmp	r5, #0
   137a0:	moveq	r5, r3
   137a4:	ldr	r3, [sp, #24]
   137a8:	str	r3, [r4, #40]	; 0x28
   137ac:	str	r5, [r4, #48]	; 0x30
   137b0:	str	r7, [r4, #36]	; 0x24
   137b4:	str	r6, [r4, #44]	; 0x2c
   137b8:	mov	r0, #0
   137bc:	pop	{r4, r5, r6, r7, r8, pc}
   137c0:	andeq	r7, r1, ip, lsr r3
   137c4:			; <UNDEFINED> instruction: 0x000131bc

000137c8 <flatcc_builder_init@@Base>:
   137c8:	push	{r4, lr}
   137cc:	mov	r4, r0
   137d0:	mov	r2, #232	; 0xe8
   137d4:	mov	r1, #0
   137d8:	bl	11fd8 <memset@plt>
   137dc:	mov	r3, #1
   137e0:	str	r3, [r4, #184]	; 0xb8
   137e4:	ldr	r3, [pc, #24]	; 13804 <flatcc_builder_init@@Base+0x3c>
   137e8:	str	r3, [r4, #48]	; 0x30
   137ec:	add	r3, r4, #188	; 0xbc
   137f0:	str	r3, [r4, #36]	; 0x24
   137f4:	ldr	r3, [pc, #12]	; 13808 <flatcc_builder_init@@Base+0x40>
   137f8:	str	r3, [r4, #44]	; 0x2c
   137fc:	mov	r0, #0
   13800:	pop	{r4, pc}
   13804:			; <UNDEFINED> instruction: 0x000131bc
   13808:	andeq	r7, r1, ip, lsr r3

0001380c <flatcc_builder_custom_reset@@Base>:
   1380c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13810:	sub	sp, sp, #12
   13814:	mov	r6, r0
   13818:	mov	fp, r1
   1381c:	mov	r8, r2
   13820:	mov	r4, r0
   13824:	mov	r5, #0
   13828:	mov	r9, r5
   1382c:	mov	sl, #1
   13830:	b	13854 <flatcc_builder_custom_reset@@Base+0x48>
   13834:	ldr	r2, [r7, #56]	; 0x38
   13838:	mov	r1, r9
   1383c:	ldr	r0, [r7, #52]	; 0x34
   13840:	bl	11fd8 <memset@plt>
   13844:	add	r5, r5, #1
   13848:	add	r4, r4, #8
   1384c:	cmp	r5, #8
   13850:	beq	138bc <flatcc_builder_custom_reset@@Base+0xb0>
   13854:	add	r1, r4, #52	; 0x34
   13858:	mov	r7, r4
   1385c:	ldr	r3, [r4, #52]	; 0x34
   13860:	cmp	r3, #0
   13864:	beq	1389c <flatcc_builder_custom_reset@@Base+0x90>
   13868:	cmp	r5, #5
   1386c:	cmpne	r8, #0
   13870:	beq	13834 <flatcc_builder_custom_reset@@Base+0x28>
   13874:	str	r5, [sp]
   13878:	mov	r3, sl
   1387c:	mov	r2, sl
   13880:	ldr	r0, [r6, #40]	; 0x28
   13884:	ldr	ip, [r6, #48]	; 0x30
   13888:	blx	ip
   1388c:	cmp	r0, #0
   13890:	beq	13834 <flatcc_builder_custom_reset@@Base+0x28>
   13894:	mvn	r0, #0
   13898:	b	13934 <flatcc_builder_custom_reset@@Base+0x128>
   1389c:	ldr	r3, [r4, #56]	; 0x38
   138a0:	cmp	r3, #0
   138a4:	beq	13844 <flatcc_builder_custom_reset@@Base+0x38>
   138a8:	ldr	r3, [pc, #156]	; 1394c <flatcc_builder_custom_reset@@Base+0x140>
   138ac:	ldr	r2, [pc, #156]	; 13950 <flatcc_builder_custom_reset@@Base+0x144>
   138b0:	ldr	r1, [pc, #156]	; 13954 <flatcc_builder_custom_reset@@Base+0x148>
   138b4:	ldr	r0, [pc, #156]	; 13958 <flatcc_builder_custom_reset@@Base+0x14c>
   138b8:	bl	11ffc <__assert_fail@plt>
   138bc:	mov	r3, #0
   138c0:	str	r3, [r6, #120]	; 0x78
   138c4:	ldr	r3, [r6, #124]	; 0x7c
   138c8:	cmp	r3, #0
   138cc:	movne	r3, #16
   138d0:	strne	r3, [r6, #124]	; 0x7c
   138d4:	mov	r3, #0
   138d8:	strh	r3, [r6, #128]	; 0x80
   138dc:	str	r3, [r6, #136]	; 0x88
   138e0:	str	r3, [r6, #140]	; 0x8c
   138e4:	str	r3, [r6, #156]	; 0x9c
   138e8:	str	r3, [r6, #160]	; 0xa0
   138ec:	str	r3, [r6, #20]
   138f0:	str	r3, [r6, #24]
   138f4:	str	r3, [r6, #148]	; 0x94
   138f8:	str	r3, [r6, #152]	; 0x98
   138fc:	ldr	r2, [r6, #60]	; 0x3c
   13900:	str	r2, [r6, #16]
   13904:	ldr	r2, [r6, #76]	; 0x4c
   13908:	str	r2, [r6]
   1390c:	ldr	r2, [r6, #52]	; 0x34
   13910:	str	r2, [r6, #4]
   13914:	str	r3, [r6, #32]
   13918:	cmp	fp, r3
   1391c:	strne	r3, [r6, #172]	; 0xac
   13920:	strne	r3, [r6, #176]	; 0xb0
   13924:	strne	r3, [r6, #180]	; 0xb4
   13928:	ldr	r0, [r6, #184]	; 0xb8
   1392c:	cmp	r0, #0
   13930:	bne	1393c <flatcc_builder_custom_reset@@Base+0x130>
   13934:	add	sp, sp, #12
   13938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1393c:	add	r0, r6, #188	; 0xbc
   13940:	bl	17204 <flatcc_emitter_reset@@Base>
   13944:	mov	r0, #0
   13948:	b	13934 <flatcc_builder_custom_reset@@Base+0x128>
   1394c:	muleq	r1, ip, sp
   13950:			; <UNDEFINED> instruction: 0x000001b2
   13954:	muleq	r1, r4, r2
   13958:	strdeq	r8, [r1], -ip

0001395c <flatcc_builder_reset@@Base>:
   1395c:	push	{r4, lr}
   13960:	mov	r2, #0
   13964:	mov	r1, r2
   13968:	bl	1380c <flatcc_builder_custom_reset@@Base>
   1396c:	pop	{r4, pc}

00013970 <flatcc_builder_clear@@Base>:
   13970:	push	{r4, r5, r6, r7, r8, lr}
   13974:	sub	sp, sp, #8
   13978:	mov	r6, r0
   1397c:	add	r5, r0, #52	; 0x34
   13980:	mov	r4, #0
   13984:	mov	r8, r4
   13988:	str	r4, [sp]
   1398c:	ldr	r7, [r6, #48]	; 0x30
   13990:	mov	r3, r8
   13994:	mov	r2, r8
   13998:	mov	r1, r5
   1399c:	ldr	r0, [r6, #40]	; 0x28
   139a0:	blx	r7
   139a4:	add	r4, r4, #1
   139a8:	add	r5, r5, #8
   139ac:	cmp	r4, #8
   139b0:	bne	13988 <flatcc_builder_clear@@Base+0x18>
   139b4:	ldr	r3, [r6, #184]	; 0xb8
   139b8:	cmp	r3, #0
   139bc:	bne	139d8 <flatcc_builder_clear@@Base+0x68>
   139c0:	mov	r2, #232	; 0xe8
   139c4:	mov	r1, #0
   139c8:	mov	r0, r6
   139cc:	bl	11fd8 <memset@plt>
   139d0:	add	sp, sp, #8
   139d4:	pop	{r4, r5, r6, r7, r8, pc}
   139d8:	add	r0, r6, #188	; 0xbc
   139dc:	bl	172d4 <flatcc_emitter_clear@@Base>
   139e0:	b	139c0 <flatcc_builder_clear@@Base+0x50>

000139e4 <flatcc_builder_enter_user_frame_ptr@@Base>:
   139e4:	push	{r4, r5, r6, r7, r8, lr}
   139e8:	sub	sp, sp, #8
   139ec:	mov	r7, r0
   139f0:	add	r4, r1, #3
   139f4:	bic	r4, r4, #3
   139f8:	add	r4, r4, #4
   139fc:	ldr	r5, [r0, #228]	; 0xe4
   13a00:	add	r2, r4, r5
   13a04:	ldr	r3, [r0, #112]	; 0x70
   13a08:	cmp	r2, r3
   13a0c:	bhi	13a54 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   13a10:	ldr	r8, [r7, #108]	; 0x6c
   13a14:	adds	r6, r8, r5
   13a18:	beq	13a8c <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   13a1c:	mov	r2, r4
   13a20:	mov	r1, #0
   13a24:	mov	r0, r6
   13a28:	bl	11fd8 <memset@plt>
   13a2c:	ldr	r3, [r7, #224]	; 0xe0
   13a30:	str	r3, [r8, r5]
   13a34:	ldr	r1, [r7, #228]	; 0xe4
   13a38:	add	r3, r1, #4
   13a3c:	str	r3, [r7, #224]	; 0xe0
   13a40:	add	r4, r4, r1
   13a44:	str	r4, [r7, #228]	; 0xe4
   13a48:	add	r0, r6, #4
   13a4c:	add	sp, sp, #8
   13a50:	pop	{r4, r5, r6, r7, r8, pc}
   13a54:	mov	r3, #7
   13a58:	str	r3, [sp]
   13a5c:	ldr	r6, [r0, #48]	; 0x30
   13a60:	mov	r3, #0
   13a64:	add	r1, r0, #108	; 0x6c
   13a68:	ldr	r0, [r0, #40]	; 0x28
   13a6c:	blx	r6
   13a70:	cmp	r0, #0
   13a74:	beq	13a10 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   13a78:	ldr	r3, [pc, #20]	; 13a94 <flatcc_builder_enter_user_frame_ptr@@Base+0xb0>
   13a7c:	mov	r2, #308	; 0x134
   13a80:	ldr	r1, [pc, #16]	; 13a98 <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   13a84:	ldr	r0, [pc, #16]	; 13a9c <flatcc_builder_enter_user_frame_ptr@@Base+0xb8>
   13a88:	bl	11ffc <__assert_fail@plt>
   13a8c:	mov	r0, #0
   13a90:	b	13a4c <flatcc_builder_enter_user_frame_ptr@@Base+0x68>
   13a94:	andeq	r7, r1, r0, ror #26
   13a98:	muleq	r1, r4, r2
   13a9c:	andeq	r8, r1, r8, ror #5

00013aa0 <flatcc_builder_enter_user_frame@@Base>:
   13aa0:	push	{r4, r5, r6, r7, lr}
   13aa4:	sub	sp, sp, #12
   13aa8:	mov	r6, r0
   13aac:	add	r4, r1, #3
   13ab0:	bic	r4, r4, #3
   13ab4:	add	r4, r4, #4
   13ab8:	ldr	r5, [r0, #228]	; 0xe4
   13abc:	add	r2, r4, r5
   13ac0:	ldr	r3, [r0, #112]	; 0x70
   13ac4:	cmp	r2, r3
   13ac8:	bhi	13b0c <flatcc_builder_enter_user_frame@@Base+0x6c>
   13acc:	ldr	r7, [r6, #108]	; 0x6c
   13ad0:	adds	r0, r7, r5
   13ad4:	moveq	r0, #0
   13ad8:	beq	13b04 <flatcc_builder_enter_user_frame@@Base+0x64>
   13adc:	mov	r2, r4
   13ae0:	mov	r1, #0
   13ae4:	bl	11fd8 <memset@plt>
   13ae8:	ldr	r3, [r6, #224]	; 0xe0
   13aec:	str	r3, [r7, r5]
   13af0:	ldr	r1, [r6, #228]	; 0xe4
   13af4:	add	r0, r1, #4
   13af8:	str	r0, [r6, #224]	; 0xe0
   13afc:	add	r4, r4, r1
   13b00:	str	r4, [r6, #228]	; 0xe4
   13b04:	add	sp, sp, #12
   13b08:	pop	{r4, r5, r6, r7, pc}
   13b0c:	mov	r3, #7
   13b10:	str	r3, [sp]
   13b14:	ldr	r7, [r0, #48]	; 0x30
   13b18:	mov	r3, #0
   13b1c:	add	r1, r0, #108	; 0x6c
   13b20:	ldr	r0, [r0, #40]	; 0x28
   13b24:	blx	r7
   13b28:	cmp	r0, #0
   13b2c:	beq	13acc <flatcc_builder_enter_user_frame@@Base+0x2c>
   13b30:	ldr	r3, [pc, #12]	; 13b44 <flatcc_builder_enter_user_frame@@Base+0xa4>
   13b34:	mov	r2, #308	; 0x134
   13b38:	ldr	r1, [pc, #8]	; 13b48 <flatcc_builder_enter_user_frame@@Base+0xa8>
   13b3c:	ldr	r0, [pc, #8]	; 13b4c <flatcc_builder_enter_user_frame@@Base+0xac>
   13b40:	bl	11ffc <__assert_fail@plt>
   13b44:	andeq	r7, r1, r0, ror #26
   13b48:	muleq	r1, r4, r2
   13b4c:	andeq	r8, r1, r8, ror #5

00013b50 <flatcc_builder_exit_user_frame@@Base>:
   13b50:	ldr	r3, [r0, #224]	; 0xe0
   13b54:	cmp	r3, #0
   13b58:	beq	13b7c <flatcc_builder_exit_user_frame@@Base+0x2c>
   13b5c:	ldr	r2, [r0, #108]	; 0x6c
   13b60:	add	r2, r2, r3
   13b64:	sub	r3, r3, #4
   13b68:	str	r3, [r0, #228]	; 0xe4
   13b6c:	ldr	r3, [r2, #-4]
   13b70:	str	r3, [r0, #224]	; 0xe0
   13b74:	mov	r0, r3
   13b78:	bx	lr
   13b7c:	push	{r4, lr}
   13b80:	ldr	r3, [pc, #12]	; 13b94 <flatcc_builder_exit_user_frame@@Base+0x44>
   13b84:	ldr	r2, [pc, #12]	; 13b98 <flatcc_builder_exit_user_frame@@Base+0x48>
   13b88:	ldr	r1, [pc, #12]	; 13b9c <flatcc_builder_exit_user_frame@@Base+0x4c>
   13b8c:	ldr	r0, [pc, #12]	; 13ba0 <flatcc_builder_exit_user_frame@@Base+0x50>
   13b90:	bl	11ffc <__assert_fail@plt>
   13b94:			; <UNDEFINED> instruction: 0x00017db8
   13b98:	andeq	r0, r0, lr, lsl r2
   13b9c:	muleq	r1, r4, r2
   13ba0:	andeq	r8, r1, r0, lsl r3

00013ba4 <flatcc_builder_exit_user_frame_at@@Base>:
   13ba4:	push	{r4, lr}
   13ba8:	ldr	r3, [r0, #224]	; 0xe0
   13bac:	cmp	r3, r1
   13bb0:	bcc	13bc0 <flatcc_builder_exit_user_frame_at@@Base+0x1c>
   13bb4:	str	r1, [r0, #224]	; 0xe0
   13bb8:	bl	13b50 <flatcc_builder_exit_user_frame@@Base>
   13bbc:	pop	{r4, pc}
   13bc0:	ldr	r3, [pc, #12]	; 13bd4 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   13bc4:	ldr	r2, [pc, #12]	; 13bd8 <flatcc_builder_exit_user_frame_at@@Base+0x34>
   13bc8:	ldr	r1, [pc, #12]	; 13bdc <flatcc_builder_exit_user_frame_at@@Base+0x38>
   13bcc:	ldr	r0, [pc, #12]	; 13be0 <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   13bd0:	bl	11ffc <__assert_fail@plt>
   13bd4:	ldrdeq	r7, [r1], -r8
   13bd8:	andeq	r0, r0, r7, lsr #4
   13bdc:	muleq	r1, r4, r2
   13be0:	andeq	r8, r1, ip, lsr #6

00013be4 <flatcc_builder_get_current_user_frame@@Base>:
   13be4:	ldr	r0, [r0, #224]	; 0xe0
   13be8:	bx	lr

00013bec <flatcc_builder_get_user_frame_ptr@@Base>:
   13bec:	ldr	r0, [r0, #108]	; 0x6c
   13bf0:	add	r0, r0, r1
   13bf4:	bx	lr

00013bf8 <flatcc_builder_embed_buffer@@Base>:
   13bf8:	push	{r4, r5, r6, lr}
   13bfc:	sub	sp, sp, #88	; 0x58
   13c00:	mov	r4, r0
   13c04:	mov	r6, r2
   13c08:	mov	r5, r3
   13c0c:	ldr	r3, [r0, #152]	; 0x98
   13c10:	adds	r3, r3, #0
   13c14:	movne	r3, #1
   13c18:	mov	r2, r1
   13c1c:	add	r1, sp, #104	; 0x68
   13c20:	bl	132d0 <flatcc_builder_default_alloc@@Base+0x114>
   13c24:	cmp	r0, #0
   13c28:	bne	13d64 <flatcc_builder_embed_buffer@@Base+0x16c>
   13c2c:	ldr	r3, [sp, #108]	; 0x6c
   13c30:	and	r3, r3, #2
   13c34:	cmp	r3, #0
   13c38:	movne	r3, #4
   13c3c:	moveq	r3, #0
   13c40:	ldr	r1, [r4, #136]	; 0x88
   13c44:	sub	r2, r1, r5
   13c48:	sub	r3, r2, r3
   13c4c:	ldrh	r2, [sp, #104]	; 0x68
   13c50:	sub	r2, r2, #1
   13c54:	and	r3, r3, r2
   13c58:	add	r2, r5, r3
   13c5c:	str	r2, [sp, #84]	; 0x54
   13c60:	mov	r2, #0
   13c64:	str	r2, [sp, #12]
   13c68:	str	r2, [sp, #16]
   13c6c:	ldr	r2, [r4, #152]	; 0x98
   13c70:	cmp	r2, #0
   13c74:	beq	13c94 <flatcc_builder_embed_buffer@@Base+0x9c>
   13c78:	mov	r2, #4
   13c7c:	str	r2, [sp, #12]
   13c80:	add	r0, sp, #84	; 0x54
   13c84:	str	r0, [sp, #20]
   13c88:	str	r2, [sp, #24]
   13c8c:	mov	r2, #1
   13c90:	str	r2, [sp, #16]
   13c94:	cmp	r5, #0
   13c98:	beq	13cc4 <flatcc_builder_embed_buffer@@Base+0xcc>
   13c9c:	ldr	r2, [sp, #12]
   13ca0:	add	r2, r2, r5
   13ca4:	str	r2, [sp, #12]
   13ca8:	ldr	r2, [sp, #16]
   13cac:	add	r2, r2, #1
   13cb0:	add	r0, sp, #88	; 0x58
   13cb4:	add	r0, r0, r2, lsl #3
   13cb8:	str	r6, [r0, #-76]	; 0xffffffb4
   13cbc:	str	r5, [r0, #-72]	; 0xffffffb8
   13cc0:	str	r2, [sp, #16]
   13cc4:	cmp	r3, #0
   13cc8:	beq	13cf8 <flatcc_builder_embed_buffer@@Base+0x100>
   13ccc:	ldr	r2, [sp, #12]
   13cd0:	add	r2, r2, r3
   13cd4:	str	r2, [sp, #12]
   13cd8:	ldr	r2, [sp, #16]
   13cdc:	add	r2, r2, #1
   13ce0:	add	r0, sp, #88	; 0x58
   13ce4:	add	r0, r0, r2, lsl #3
   13ce8:	ldr	ip, [pc, #124]	; 13d6c <flatcc_builder_embed_buffer@@Base+0x174>
   13cec:	str	ip, [r0, #-76]	; 0xffffffb4
   13cf0:	str	r3, [r0, #-72]	; 0xffffffb8
   13cf4:	str	r2, [sp, #16]
   13cf8:	ldr	r3, [sp, #12]
   13cfc:	sub	r5, r1, r3
   13d00:	cmp	r1, r5
   13d04:	ble	13d3c <flatcc_builder_embed_buffer@@Base+0x144>
   13d08:	str	r3, [sp]
   13d0c:	ldr	r6, [r4, #44]	; 0x2c
   13d10:	mov	r3, r5
   13d14:	ldr	r2, [sp, #16]
   13d18:	add	r1, sp, #20
   13d1c:	ldr	r0, [r4, #36]	; 0x24
   13d20:	blx	r6
   13d24:	cmp	r0, #0
   13d28:	streq	r5, [r4, #136]	; 0x88
   13d2c:	bne	13d50 <flatcc_builder_embed_buffer@@Base+0x158>
   13d30:	mov	r0, r5
   13d34:	add	sp, sp, #88	; 0x58
   13d38:	pop	{r4, r5, r6, pc}
   13d3c:	ldr	r3, [pc, #44]	; 13d70 <flatcc_builder_embed_buffer@@Base+0x178>
   13d40:	ldr	r2, [pc, #44]	; 13d74 <flatcc_builder_embed_buffer@@Base+0x17c>
   13d44:	ldr	r1, [pc, #44]	; 13d78 <flatcc_builder_embed_buffer@@Base+0x180>
   13d48:	ldr	r0, [pc, #44]	; 13d7c <flatcc_builder_embed_buffer@@Base+0x184>
   13d4c:	bl	11ffc <__assert_fail@plt>
   13d50:	ldr	r3, [pc, #24]	; 13d70 <flatcc_builder_embed_buffer@@Base+0x178>
   13d54:	ldr	r2, [pc, #36]	; 13d80 <flatcc_builder_embed_buffer@@Base+0x188>
   13d58:	ldr	r1, [pc, #24]	; 13d78 <flatcc_builder_embed_buffer@@Base+0x180>
   13d5c:	ldr	r0, [pc, #24]	; 13d7c <flatcc_builder_embed_buffer@@Base+0x184>
   13d60:	bl	11ffc <__assert_fail@plt>
   13d64:	mov	r5, #0
   13d68:	b	13d30 <flatcc_builder_embed_buffer@@Base+0x138>
   13d6c:	andeq	r7, r1, r4, asr #22
   13d70:	muleq	r1, r0, sp
   13d74:	andeq	r0, r0, r7, lsl #5
   13d78:	muleq	r1, r4, r2
   13d7c:	andeq	r8, r1, r8, ror #5
   13d80:	andeq	r0, r0, fp, lsl #5

00013d84 <flatcc_builder_create_buffer@@Base>:
   13d84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13d88:	sub	sp, sp, #96	; 0x60
   13d8c:	mov	r5, r0
   13d90:	mov	r9, r1
   13d94:	mov	r6, r3
   13d98:	ldr	r8, [sp, #132]	; 0x84
   13d9c:	mov	r3, #0
   13da0:	str	r3, [sp, #12]
   13da4:	and	r4, r8, #1
   13da8:	uxtb	r7, r4
   13dac:	mov	r3, r7
   13db0:	add	r1, sp, #128	; 0x80
   13db4:	bl	132d0 <flatcc_builder_default_alloc@@Base+0x114>
   13db8:	cmp	r0, #0
   13dbc:	bne	13f60 <flatcc_builder_create_buffer@@Base+0x1dc>
   13dc0:	ldrh	r0, [sp, #128]	; 0x80
   13dc4:	ldrh	r3, [r5, #128]	; 0x80
   13dc8:	cmp	r3, r0
   13dcc:	strhcc	r0, [r5, #128]	; 0x80
   13dd0:	cmp	r9, #0
   13dd4:	ldrne	r3, [r9]
   13dd8:	strne	r3, [sp, #12]
   13ddc:	ldr	r1, [sp, #12]
   13de0:	cmp	r1, #0
   13de4:	movne	r1, #4
   13de8:	moveq	r1, #0
   13dec:	tst	r8, #2
   13df0:	bne	13f68 <flatcc_builder_create_buffer@@Base+0x1e4>
   13df4:	ldr	ip, [r5, #136]	; 0x88
   13df8:	mov	r2, ip
   13dfc:	sub	r3, ip, #4
   13e00:	sub	r3, r3, r1
   13e04:	sub	r0, r0, #1
   13e08:	and	r3, r3, r0
   13e0c:	mov	r0, #0
   13e10:	str	r0, [sp, #16]
   13e14:	str	r0, [sp, #20]
   13e18:	cmp	r4, r0
   13e1c:	bne	13f84 <flatcc_builder_create_buffer@@Base+0x200>
   13e20:	ldr	lr, [sp, #16]
   13e24:	add	lr, lr, #4
   13e28:	str	lr, [sp, #16]
   13e2c:	ldr	r8, [sp, #20]
   13e30:	add	r0, r8, #1
   13e34:	add	r9, sp, #96	; 0x60
   13e38:	add	r9, r9, r0, lsl #3
   13e3c:	add	sl, sp, #92	; 0x5c
   13e40:	str	sl, [r9, #-80]	; 0xffffffb0
   13e44:	mov	sl, #4
   13e48:	str	sl, [r9, #-76]	; 0xffffffb4
   13e4c:	str	r0, [sp, #20]
   13e50:	cmp	r1, #0
   13e54:	beq	13e80 <flatcc_builder_create_buffer@@Base+0xfc>
   13e58:	add	lr, r1, lr
   13e5c:	str	lr, [sp, #16]
   13e60:	add	r0, r8, #2
   13e64:	add	lr, sp, #96	; 0x60
   13e68:	add	r0, lr, r0, lsl #3
   13e6c:	add	lr, sp, #12
   13e70:	str	lr, [r0, #-80]	; 0xffffffb0
   13e74:	str	r1, [r0, #-76]	; 0xffffffb4
   13e78:	add	r8, r8, #2
   13e7c:	str	r8, [sp, #20]
   13e80:	cmp	r3, #0
   13e84:	beq	13eb4 <flatcc_builder_create_buffer@@Base+0x130>
   13e88:	ldr	r1, [sp, #16]
   13e8c:	add	r1, r1, r3
   13e90:	str	r1, [sp, #16]
   13e94:	ldr	r1, [sp, #20]
   13e98:	add	r1, r1, #1
   13e9c:	add	r0, sp, #96	; 0x60
   13ea0:	add	r0, r0, r1, lsl #3
   13ea4:	ldr	lr, [pc, #248]	; 13fa4 <flatcc_builder_create_buffer@@Base+0x220>
   13ea8:	str	lr, [r0, #-80]	; 0xffffffb0
   13eac:	str	r3, [r0, #-76]	; 0xffffffb4
   13eb0:	str	r1, [sp, #20]
   13eb4:	ldr	r1, [sp, #16]
   13eb8:	sub	r3, r2, r1
   13ebc:	add	r3, r3, r7, lsl #2
   13ec0:	cmp	r4, #0
   13ec4:	ldrne	r2, [r5, #144]	; 0x90
   13ec8:	ldreq	r2, [r5, #140]	; 0x8c
   13ecc:	sub	r2, r2, r3
   13ed0:	str	r2, [sp, #88]	; 0x58
   13ed4:	sub	r3, r6, r3
   13ed8:	str	r3, [sp, #92]	; 0x5c
   13edc:	sub	r4, ip, r1
   13ee0:	cmp	r4, ip
   13ee4:	bge	13f24 <flatcc_builder_create_buffer@@Base+0x1a0>
   13ee8:	str	r1, [sp]
   13eec:	ldr	r6, [r5, #44]	; 0x2c
   13ef0:	mov	r3, r4
   13ef4:	ldr	r2, [sp, #20]
   13ef8:	add	r1, sp, #24
   13efc:	ldr	r0, [r5, #36]	; 0x24
   13f00:	blx	r6
   13f04:	cmp	r0, #0
   13f08:	bne	13f38 <flatcc_builder_create_buffer@@Base+0x1b4>
   13f0c:	str	r4, [r5, #136]	; 0x88
   13f10:	cmp	r4, #0
   13f14:	beq	13f4c <flatcc_builder_create_buffer@@Base+0x1c8>
   13f18:	mov	r0, r4
   13f1c:	add	sp, sp, #96	; 0x60
   13f20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f24:	ldr	r3, [pc, #124]	; 13fa8 <flatcc_builder_create_buffer@@Base+0x224>
   13f28:	ldr	r2, [pc, #124]	; 13fac <flatcc_builder_create_buffer@@Base+0x228>
   13f2c:	ldr	r1, [pc, #124]	; 13fb0 <flatcc_builder_create_buffer@@Base+0x22c>
   13f30:	ldr	r0, [pc, #124]	; 13fb4 <flatcc_builder_create_buffer@@Base+0x230>
   13f34:	bl	11ffc <__assert_fail@plt>
   13f38:	ldr	r3, [pc, #104]	; 13fa8 <flatcc_builder_create_buffer@@Base+0x224>
   13f3c:	ldr	r2, [pc, #116]	; 13fb8 <flatcc_builder_create_buffer@@Base+0x234>
   13f40:	ldr	r1, [pc, #104]	; 13fb0 <flatcc_builder_create_buffer@@Base+0x22c>
   13f44:	ldr	r0, [pc, #104]	; 13fb4 <flatcc_builder_create_buffer@@Base+0x230>
   13f48:	bl	11ffc <__assert_fail@plt>
   13f4c:	ldr	r3, [pc, #104]	; 13fbc <flatcc_builder_create_buffer@@Base+0x238>
   13f50:	mov	r2, #772	; 0x304
   13f54:	ldr	r1, [pc, #84]	; 13fb0 <flatcc_builder_create_buffer@@Base+0x22c>
   13f58:	ldr	r0, [pc, #84]	; 13fb4 <flatcc_builder_create_buffer@@Base+0x230>
   13f5c:	bl	11ffc <__assert_fail@plt>
   13f60:	mov	r4, #0
   13f64:	b	13f18 <flatcc_builder_create_buffer@@Base+0x194>
   13f68:	ldr	ip, [r5, #136]	; 0x88
   13f6c:	mov	r2, ip
   13f70:	sub	r3, ip, #8
   13f74:	sub	r3, r3, r1
   13f78:	sub	r0, r0, #1
   13f7c:	and	r3, r3, r0
   13f80:	mov	r7, #1
   13f84:	mov	r0, #4
   13f88:	str	r0, [sp, #16]
   13f8c:	add	lr, sp, #88	; 0x58
   13f90:	str	lr, [sp, #24]
   13f94:	str	r0, [sp, #28]
   13f98:	mov	r0, #1
   13f9c:	str	r0, [sp, #20]
   13fa0:	b	13e20 <flatcc_builder_create_buffer@@Base+0x9c>
   13fa4:	andeq	r7, r1, r4, asr #22
   13fa8:	muleq	r1, r0, sp
   13fac:	andeq	r0, r0, r7, lsl #5
   13fb0:	muleq	r1, r4, r2
   13fb4:	andeq	r8, r1, r8, ror #5
   13fb8:	andeq	r0, r0, fp, lsl #5
   13fbc:	strdeq	r7, [r1], -ip

00013fc0 <flatcc_builder_create_struct@@Base>:
   13fc0:	push	{r4, r5, r6, lr}
   13fc4:	sub	sp, sp, #80	; 0x50
   13fc8:	cmp	r3, #0
   13fcc:	beq	14024 <flatcc_builder_create_struct@@Base+0x64>
   13fd0:	mov	r4, r0
   13fd4:	ldrh	r0, [r0, #128]	; 0x80
   13fd8:	cmp	r0, r3
   13fdc:	strhcc	r3, [r4, #128]	; 0x80
   13fe0:	ldr	ip, [r4, #136]	; 0x88
   13fe4:	sub	r0, ip, r2
   13fe8:	sub	r3, r3, #1
   13fec:	and	r3, r3, r0
   13ff0:	mov	r0, #0
   13ff4:	str	r0, [sp, #8]
   13ff8:	str	r0, [sp, #12]
   13ffc:	cmp	r2, r0
   14000:	beq	14060 <flatcc_builder_create_struct@@Base+0xa0>
   14004:	str	r2, [sp, #8]
   14008:	str	r1, [sp, #16]
   1400c:	str	r2, [sp, #20]
   14010:	mov	r2, #1
   14014:	str	r2, [sp, #12]
   14018:	cmp	r3, r0
   1401c:	beq	14094 <flatcc_builder_create_struct@@Base+0xd4>
   14020:	b	14068 <flatcc_builder_create_struct@@Base+0xa8>
   14024:	ldr	r3, [pc, #172]	; 140d8 <flatcc_builder_create_struct@@Base+0x118>
   14028:	ldr	r2, [pc, #172]	; 140dc <flatcc_builder_create_struct@@Base+0x11c>
   1402c:	ldr	r1, [pc, #172]	; 140e0 <flatcc_builder_create_struct@@Base+0x120>
   14030:	ldr	r0, [pc, #172]	; 140e4 <flatcc_builder_create_struct@@Base+0x124>
   14034:	bl	11ffc <__assert_fail@plt>
   14038:	ldr	r3, [pc, #168]	; 140e8 <flatcc_builder_create_struct@@Base+0x128>
   1403c:	ldr	r2, [pc, #168]	; 140ec <flatcc_builder_create_struct@@Base+0x12c>
   14040:	ldr	r1, [pc, #152]	; 140e0 <flatcc_builder_create_struct@@Base+0x120>
   14044:	ldr	r0, [pc, #164]	; 140f0 <flatcc_builder_create_struct@@Base+0x130>
   14048:	bl	11ffc <__assert_fail@plt>
   1404c:	ldr	r3, [pc, #148]	; 140e8 <flatcc_builder_create_struct@@Base+0x128>
   14050:	ldr	r2, [pc, #156]	; 140f4 <flatcc_builder_create_struct@@Base+0x134>
   14054:	ldr	r1, [pc, #132]	; 140e0 <flatcc_builder_create_struct@@Base+0x120>
   14058:	ldr	r0, [pc, #144]	; 140f0 <flatcc_builder_create_struct@@Base+0x130>
   1405c:	bl	11ffc <__assert_fail@plt>
   14060:	cmp	r3, #0
   14064:	beq	14038 <flatcc_builder_create_struct@@Base+0x78>
   14068:	ldr	r2, [sp, #8]
   1406c:	add	r2, r2, r3
   14070:	str	r2, [sp, #8]
   14074:	ldr	r2, [sp, #12]
   14078:	add	r2, r2, #1
   1407c:	add	r1, sp, #80	; 0x50
   14080:	add	r1, r1, r2, lsl #3
   14084:	ldr	r0, [pc, #108]	; 140f8 <flatcc_builder_create_struct@@Base+0x138>
   14088:	str	r0, [r1, #-72]	; 0xffffffb8
   1408c:	str	r3, [r1, #-68]	; 0xffffffbc
   14090:	str	r2, [sp, #12]
   14094:	ldr	r3, [sp, #8]
   14098:	sub	r5, ip, r3
   1409c:	cmp	ip, r5
   140a0:	ble	14038 <flatcc_builder_create_struct@@Base+0x78>
   140a4:	str	r3, [sp]
   140a8:	ldr	r6, [r4, #44]	; 0x2c
   140ac:	mov	r3, r5
   140b0:	ldr	r2, [sp, #12]
   140b4:	add	r1, sp, #16
   140b8:	ldr	r0, [r4, #36]	; 0x24
   140bc:	blx	r6
   140c0:	cmp	r0, #0
   140c4:	bne	1404c <flatcc_builder_create_struct@@Base+0x8c>
   140c8:	str	r5, [r4, #136]	; 0x88
   140cc:	mov	r0, r5
   140d0:	add	sp, sp, #80	; 0x50
   140d4:	pop	{r4, r5, r6, pc}
   140d8:	andeq	r7, r1, ip, lsl lr
   140dc:	andeq	r0, r0, pc, lsl #6
   140e0:	muleq	r1, r4, r2
   140e4:	andeq	r8, r1, ip, asr #6
   140e8:	muleq	r1, r0, sp
   140ec:	andeq	r0, r0, r7, lsl #5
   140f0:	andeq	r8, r1, r8, ror #5
   140f4:	andeq	r0, r0, fp, lsl #5
   140f8:	andeq	r7, r1, r4, asr #22

000140fc <flatcc_builder_start_buffer@@Base>:
   140fc:	push	{r4, r5, r6, r7, r8, lr}
   14100:	mov	r4, r0
   14104:	mov	r5, r1
   14108:	mov	r7, r2
   1410c:	mov	r6, r3
   14110:	ldrh	r1, [r0, #128]	; 0x80
   14114:	bl	133e8 <flatcc_builder_default_alloc@@Base+0x22c>
   14118:	cmp	r0, #0
   1411c:	bne	141a8 <flatcc_builder_start_buffer@@Base+0xac>
   14120:	mov	r3, #1
   14124:	strh	r3, [r4, #128]	; 0x80
   14128:	ldr	r3, [r4, #32]
   1412c:	ldrh	r2, [r4, #132]	; 0x84
   14130:	strh	r2, [r3, #34]	; 0x22
   14134:	strh	r7, [r4, #132]	; 0x84
   14138:	ldr	r3, [r4, #32]
   1413c:	ldrh	r2, [r4, #164]	; 0xa4
   14140:	strh	r2, [r3, #32]
   14144:	strh	r6, [r4, #164]	; 0xa4
   14148:	ldr	r3, [r4, #32]
   1414c:	ldr	r2, [r4, #144]	; 0x90
   14150:	str	r2, [r3, #20]
   14154:	ldr	r3, [r4, #32]
   14158:	ldr	r2, [r4, #152]	; 0x98
   1415c:	str	r2, [r3, #28]
   14160:	ldr	r3, [r4, #136]	; 0x88
   14164:	str	r3, [r4, #144]	; 0x90
   14168:	ldr	r3, [r4, #148]	; 0x94
   1416c:	add	r2, r3, #1
   14170:	str	r2, [r4, #148]	; 0x94
   14174:	str	r3, [r4, #152]	; 0x98
   14178:	ldr	r3, [r4, #32]
   1417c:	ldr	r2, [r4, #168]	; 0xa8
   14180:	str	r2, [r3, #16]
   14184:	ldr	r3, [pc, #36]	; 141b0 <flatcc_builder_start_buffer@@Base+0xb4>
   14188:	cmp	r5, #0
   1418c:	moveq	r5, r3
   14190:	ldr	r3, [r5]
   14194:	str	r3, [r4, #168]	; 0xa8
   14198:	ldr	r3, [r4, #32]
   1419c:	mov	r2, #1
   141a0:	strh	r2, [r3, #14]
   141a4:	pop	{r4, r5, r6, r7, r8, pc}
   141a8:	mvn	r0, #0
   141ac:	pop	{r4, r5, r6, r7, r8, pc}
   141b0:	andeq	r7, r1, r4, asr #22

000141b4 <flatcc_builder_end_buffer@@Base>:
   141b4:	push	{r4, r5, lr}
   141b8:	sub	sp, sp, #12
   141bc:	mov	r4, r0
   141c0:	ldrh	r2, [r0, #164]	; 0xa4
   141c4:	and	r2, r2, #2
   141c8:	ldr	r0, [r0, #152]	; 0x98
   141cc:	cmp	r0, #0
   141d0:	moveq	r0, r2
   141d4:	orrne	r0, r2, #1
   141d8:	ldr	r2, [r4, #32]
   141dc:	ldrh	r2, [r2, #14]
   141e0:	cmp	r2, #1
   141e4:	bne	14228 <flatcc_builder_end_buffer@@Base+0x74>
   141e8:	ldrh	r2, [r4, #132]	; 0x84
   141ec:	ldrh	r3, [r4, #128]	; 0x80
   141f0:	cmp	r3, r2
   141f4:	strhcc	r2, [r4, #128]	; 0x80
   141f8:	str	r0, [sp, #4]
   141fc:	ldrh	r3, [r4, #128]	; 0x80
   14200:	str	r3, [sp]
   14204:	mov	r3, r1
   14208:	add	r1, r4, #168	; 0xa8
   1420c:	mov	r0, r4
   14210:	bl	13d84 <flatcc_builder_create_buffer@@Base>
   14214:	subs	r5, r0, #0
   14218:	bne	1423c <flatcc_builder_end_buffer@@Base+0x88>
   1421c:	mov	r0, r5
   14220:	add	sp, sp, #12
   14224:	pop	{r4, r5, pc}
   14228:	ldr	r3, [pc, #176]	; 142e0 <flatcc_builder_end_buffer@@Base+0x12c>
   1422c:	ldr	r2, [pc, #176]	; 142e4 <flatcc_builder_end_buffer@@Base+0x130>
   14230:	ldr	r1, [pc, #176]	; 142e8 <flatcc_builder_end_buffer@@Base+0x134>
   14234:	ldr	r0, [pc, #176]	; 142ec <flatcc_builder_end_buffer@@Base+0x138>
   14238:	bl	11ffc <__assert_fail@plt>
   1423c:	ldr	r3, [r4, #32]
   14240:	ldr	r2, [r3, #20]
   14244:	str	r2, [r4, #144]	; 0x90
   14248:	ldr	r2, [r3, #28]
   1424c:	str	r2, [r4, #152]	; 0x98
   14250:	ldr	r2, [r3, #16]
   14254:	str	r2, [r4, #168]	; 0xa8
   14258:	ldrh	r3, [r3, #32]
   1425c:	strh	r3, [r4, #164]	; 0xa4
   14260:	ldr	r2, [r4, #20]
   14264:	mov	r1, #0
   14268:	ldr	r0, [r4, #16]
   1426c:	bl	11fd8 <memset@plt>
   14270:	ldr	r2, [r4, #32]
   14274:	ldr	r3, [r2, #8]
   14278:	str	r3, [r4, #20]
   1427c:	ldr	r0, [r2]
   14280:	str	r0, [r4, #28]
   14284:	ldr	r1, [r2, #4]
   14288:	ldr	r3, [r4, #60]	; 0x3c
   1428c:	add	r3, r3, r0
   14290:	str	r3, [r4, #16]
   14294:	ldr	r3, [r4, #64]	; 0x40
   14298:	sub	r3, r3, r0
   1429c:	cmp	r3, r1
   142a0:	movcs	r3, r1
   142a4:	str	r3, [r4, #24]
   142a8:	str	r1, [r2, #4]
   142ac:	ldrh	r3, [r4, #130]	; 0x82
   142b0:	ldrh	r2, [r4, #128]	; 0x80
   142b4:	cmp	r2, r3
   142b8:	strhcc	r3, [r4, #128]	; 0x80
   142bc:	ldr	r3, [r4, #32]
   142c0:	ldrh	r2, [r3, #12]
   142c4:	strh	r2, [r4, #130]	; 0x82
   142c8:	sub	r3, r3, #36	; 0x24
   142cc:	str	r3, [r4, #32]
   142d0:	ldr	r3, [r4, #156]	; 0x9c
   142d4:	sub	r3, r3, #1
   142d8:	str	r3, [r4, #156]	; 0x9c
   142dc:	b	1421c <flatcc_builder_end_buffer@@Base+0x68>
   142e0:	andeq	r7, r1, ip, lsr lr
   142e4:	andeq	r0, r0, r6, asr #6
   142e8:	muleq	r1, r4, r2
   142ec:	andeq	r8, r1, r8, asr r3

000142f0 <flatcc_builder_start_struct@@Base>:
   142f0:	push	{r4, r5, r6, lr}
   142f4:	mov	r4, r0
   142f8:	mov	r5, r1
   142fc:	mov	r1, r2
   14300:	bl	133e8 <flatcc_builder_default_alloc@@Base+0x22c>
   14304:	cmp	r0, #0
   14308:	bne	14388 <flatcc_builder_start_struct@@Base+0x98>
   1430c:	ldr	r3, [r4, #32]
   14310:	mov	r2, #2
   14314:	strh	r2, [r3, #14]
   14318:	ldr	r1, [r4, #28]
   1431c:	ldr	r2, [r4, #60]	; 0x3c
   14320:	add	r2, r2, r1
   14324:	str	r2, [r4, #16]
   14328:	ldr	r3, [r4, #64]	; 0x40
   1432c:	sub	r3, r3, r1
   14330:	cmn	r3, #4
   14334:	mvnhi	r3, #3
   14338:	str	r3, [r4, #24]
   1433c:	ldr	r3, [r4, #32]
   14340:	mvn	r2, #3
   14344:	str	r2, [r3, #4]
   14348:	ldr	r6, [r4, #20]
   1434c:	add	r5, r5, r6
   14350:	str	r5, [r4, #20]
   14354:	ldr	r3, [r4, #24]
   14358:	cmp	r5, r3
   1435c:	bcs	1436c <flatcc_builder_start_struct@@Base+0x7c>
   14360:	ldr	r0, [r4, #16]
   14364:	add	r0, r0, r6
   14368:	pop	{r4, r5, r6, pc}
   1436c:	add	r1, r5, #1
   14370:	mov	r0, r4
   14374:	bl	13148 <main@@Base+0x110>
   14378:	cmp	r0, #0
   1437c:	beq	14360 <flatcc_builder_start_struct@@Base+0x70>
   14380:	mov	r0, #0
   14384:	pop	{r4, r5, r6, pc}
   14388:	mov	r0, #0
   1438c:	pop	{r4, r5, r6, pc}

00014390 <flatcc_builder_struct_edit@@Base>:
   14390:	ldr	r0, [r0, #16]
   14394:	bx	lr

00014398 <flatcc_builder_end_struct@@Base>:
   14398:	push	{r4, r5, r6, lr}
   1439c:	ldr	r3, [r0, #32]
   143a0:	ldrh	r3, [r3, #14]
   143a4:	cmp	r3, #2
   143a8:	bne	143d0 <flatcc_builder_end_struct@@Base+0x38>
   143ac:	mov	r4, r0
   143b0:	ldrh	r3, [r0, #130]	; 0x82
   143b4:	ldr	r2, [r0, #20]
   143b8:	ldr	r1, [r0, #16]
   143bc:	bl	13fc0 <flatcc_builder_create_struct@@Base>
   143c0:	subs	r5, r0, #0
   143c4:	bne	143e4 <flatcc_builder_end_struct@@Base+0x4c>
   143c8:	mov	r0, r5
   143cc:	pop	{r4, r5, r6, pc}
   143d0:	ldr	r3, [pc, #140]	; 14464 <flatcc_builder_end_struct@@Base+0xcc>
   143d4:	mov	r2, #872	; 0x368
   143d8:	ldr	r1, [pc, #136]	; 14468 <flatcc_builder_end_struct@@Base+0xd0>
   143dc:	ldr	r0, [pc, #136]	; 1446c <flatcc_builder_end_struct@@Base+0xd4>
   143e0:	bl	11ffc <__assert_fail@plt>
   143e4:	ldr	r2, [r4, #20]
   143e8:	mov	r1, #0
   143ec:	ldr	r0, [r4, #16]
   143f0:	bl	11fd8 <memset@plt>
   143f4:	ldr	r2, [r4, #32]
   143f8:	ldr	r3, [r2, #8]
   143fc:	str	r3, [r4, #20]
   14400:	ldr	r0, [r2]
   14404:	str	r0, [r4, #28]
   14408:	ldr	r1, [r2, #4]
   1440c:	ldr	r3, [r4, #60]	; 0x3c
   14410:	add	r3, r3, r0
   14414:	str	r3, [r4, #16]
   14418:	ldr	r3, [r4, #64]	; 0x40
   1441c:	sub	r3, r3, r0
   14420:	cmp	r3, r1
   14424:	movcs	r3, r1
   14428:	str	r3, [r4, #24]
   1442c:	str	r1, [r2, #4]
   14430:	ldrh	r3, [r4, #130]	; 0x82
   14434:	ldrh	r2, [r4, #128]	; 0x80
   14438:	cmp	r2, r3
   1443c:	strhcc	r3, [r4, #128]	; 0x80
   14440:	ldr	r3, [r4, #32]
   14444:	ldrh	r2, [r3, #12]
   14448:	strh	r2, [r4, #130]	; 0x82
   1444c:	sub	r3, r3, #36	; 0x24
   14450:	str	r3, [r4, #32]
   14454:	ldr	r3, [r4, #156]	; 0x9c
   14458:	sub	r3, r3, #1
   1445c:	str	r3, [r4, #156]	; 0x9c
   14460:	b	143c8 <flatcc_builder_end_struct@@Base+0x30>
   14464:	andeq	r7, r1, r8, asr lr
   14468:	muleq	r1, r4, r2
   1446c:	andeq	r8, r1, r4, lsl #7

00014470 <flatcc_builder_extend_vector@@Base>:
   14470:	push	{r4, r5, r6, lr}
   14474:	mov	r4, r0
   14478:	ldr	r2, [r0, #32]
   1447c:	ldr	r3, [r2, #20]
   14480:	add	r0, r1, r3
   14484:	ldr	ip, [r2, #24]
   14488:	cmp	r3, r0
   1448c:	movls	r3, #0
   14490:	movhi	r3, #1
   14494:	cmp	ip, r0
   14498:	orrcc	r3, r3, #1
   1449c:	cmp	r3, #0
   144a0:	bne	144d4 <flatcc_builder_extend_vector@@Base+0x64>
   144a4:	str	r0, [r2, #20]
   144a8:	ldr	r5, [r4, #20]
   144ac:	ldr	r3, [r4, #32]
   144b0:	ldr	r3, [r3, #16]
   144b4:	mla	r1, r3, r1, r5
   144b8:	str	r1, [r4, #20]
   144bc:	ldr	r3, [r4, #24]
   144c0:	cmp	r1, r3
   144c4:	bcs	144e8 <flatcc_builder_extend_vector@@Base+0x78>
   144c8:	ldr	r0, [r4, #16]
   144cc:	add	r0, r0, r5
   144d0:	pop	{r4, r5, r6, pc}
   144d4:	ldr	r3, [pc, #44]	; 14508 <flatcc_builder_extend_vector@@Base+0x98>
   144d8:	mov	r2, #892	; 0x37c
   144dc:	ldr	r1, [pc, #40]	; 1450c <flatcc_builder_extend_vector@@Base+0x9c>
   144e0:	ldr	r0, [pc, #40]	; 14510 <flatcc_builder_extend_vector@@Base+0xa0>
   144e4:	bl	11ffc <__assert_fail@plt>
   144e8:	mvn	r2, #3
   144ec:	add	r1, r1, #1
   144f0:	mov	r0, r4
   144f4:	bl	13148 <main@@Base+0x110>
   144f8:	cmp	r0, #0
   144fc:	beq	144c8 <flatcc_builder_extend_vector@@Base+0x58>
   14500:	mov	r0, #0
   14504:	pop	{r4, r5, r6, pc}
   14508:	andeq	r7, r1, r4, ror lr
   1450c:	muleq	r1, r4, r2
   14510:			; <UNDEFINED> instruction: 0x000183b0

00014514 <flatcc_builder_vector_push@@Base>:
   14514:	push	{r4, r5, r6, r7, r8, lr}
   14518:	ldr	r3, [r0, #32]
   1451c:	ldrh	r2, [r3, #14]
   14520:	cmp	r2, #4
   14524:	bne	1458c <flatcc_builder_vector_push@@Base+0x78>
   14528:	mov	r4, r0
   1452c:	mov	r6, r1
   14530:	ldr	r2, [r3, #20]
   14534:	ldr	r1, [r3, #24]
   14538:	cmp	r2, r1
   1453c:	bhi	145a0 <flatcc_builder_vector_push@@Base+0x8c>
   14540:	add	r2, r2, #1
   14544:	str	r2, [r3, #20]
   14548:	ldr	r3, [r0, #32]
   1454c:	ldr	r7, [r3, #16]
   14550:	ldr	r5, [r0, #20]
   14554:	add	r1, r7, r5
   14558:	str	r1, [r0, #20]
   1455c:	ldr	r3, [r0, #24]
   14560:	cmp	r1, r3
   14564:	bcs	145b4 <flatcc_builder_vector_push@@Base+0xa0>
   14568:	ldr	r4, [r4, #16]
   1456c:	adds	r4, r4, r5
   14570:	beq	14584 <flatcc_builder_vector_push@@Base+0x70>
   14574:	mov	r2, r7
   14578:	mov	r1, r6
   1457c:	mov	r0, r4
   14580:	bl	11f6c <memcpy@plt>
   14584:	mov	r0, r4
   14588:	pop	{r4, r5, r6, r7, r8, pc}
   1458c:	ldr	r3, [pc, #60]	; 145d0 <flatcc_builder_vector_push@@Base+0xbc>
   14590:	ldr	r2, [pc, #60]	; 145d4 <flatcc_builder_vector_push@@Base+0xc0>
   14594:	ldr	r1, [pc, #60]	; 145d8 <flatcc_builder_vector_push@@Base+0xc4>
   14598:	ldr	r0, [pc, #60]	; 145dc <flatcc_builder_vector_push@@Base+0xc8>
   1459c:	bl	11ffc <__assert_fail@plt>
   145a0:	ldr	r3, [pc, #40]	; 145d0 <flatcc_builder_vector_push@@Base+0xbc>
   145a4:	mov	r2, #908	; 0x38c
   145a8:	ldr	r1, [pc, #40]	; 145d8 <flatcc_builder_vector_push@@Base+0xc4>
   145ac:	ldr	r0, [pc, #44]	; 145e0 <flatcc_builder_vector_push@@Base+0xcc>
   145b0:	bl	11ffc <__assert_fail@plt>
   145b4:	mvn	r2, #3
   145b8:	add	r1, r1, #1
   145bc:	bl	13148 <main@@Base+0x110>
   145c0:	cmp	r0, #0
   145c4:	beq	14568 <flatcc_builder_vector_push@@Base+0x54>
   145c8:	mov	r4, #0
   145cc:	b	14584 <flatcc_builder_vector_push@@Base+0x70>
   145d0:	andeq	r7, r1, r8, lsl #29
   145d4:	andeq	r0, r0, fp, lsl #7
   145d8:	muleq	r1, r4, r2
   145dc:	andeq	r8, r1, ip, asr #7
   145e0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>

000145e4 <flatcc_builder_append_vector@@Base>:
   145e4:	push	{r4, r5, r6, r7, r8, lr}
   145e8:	mov	r5, r1
   145ec:	ldr	r1, [r0, #32]
   145f0:	ldrh	r3, [r1, #14]
   145f4:	cmp	r3, #4
   145f8:	bne	14674 <flatcc_builder_append_vector@@Base+0x90>
   145fc:	mov	r4, r0
   14600:	ldr	r3, [r1, #20]
   14604:	add	r0, r2, r3
   14608:	ldr	ip, [r1, #24]
   1460c:	cmp	r3, r0
   14610:	movls	r3, #0
   14614:	movhi	r3, #1
   14618:	cmp	ip, r0
   1461c:	orrcc	r3, r3, #1
   14620:	cmp	r3, #0
   14624:	bne	14688 <flatcc_builder_append_vector@@Base+0xa4>
   14628:	str	r0, [r1, #20]
   1462c:	ldr	r3, [r4, #32]
   14630:	ldr	r6, [r3, #16]
   14634:	mul	r6, r6, r2
   14638:	ldr	r7, [r4, #20]
   1463c:	add	r1, r6, r7
   14640:	str	r1, [r4, #20]
   14644:	ldr	r3, [r4, #24]
   14648:	cmp	r1, r3
   1464c:	bcs	1469c <flatcc_builder_append_vector@@Base+0xb8>
   14650:	ldr	r4, [r4, #16]
   14654:	adds	r4, r4, r7
   14658:	beq	1466c <flatcc_builder_append_vector@@Base+0x88>
   1465c:	mov	r2, r6
   14660:	mov	r1, r5
   14664:	mov	r0, r4
   14668:	bl	11f6c <memcpy@plt>
   1466c:	mov	r0, r4
   14670:	pop	{r4, r5, r6, r7, r8, pc}
   14674:	ldr	r3, [pc, #64]	; 146bc <flatcc_builder_append_vector@@Base+0xd8>
   14678:	ldr	r2, [pc, #64]	; 146c0 <flatcc_builder_append_vector@@Base+0xdc>
   1467c:	ldr	r1, [pc, #64]	; 146c4 <flatcc_builder_append_vector@@Base+0xe0>
   14680:	ldr	r0, [pc, #64]	; 146c8 <flatcc_builder_append_vector@@Base+0xe4>
   14684:	bl	11ffc <__assert_fail@plt>
   14688:	ldr	r3, [pc, #60]	; 146cc <flatcc_builder_append_vector@@Base+0xe8>
   1468c:	mov	r2, #892	; 0x37c
   14690:	ldr	r1, [pc, #44]	; 146c4 <flatcc_builder_append_vector@@Base+0xe0>
   14694:	ldr	r0, [pc, #52]	; 146d0 <flatcc_builder_append_vector@@Base+0xec>
   14698:	bl	11ffc <__assert_fail@plt>
   1469c:	mvn	r2, #3
   146a0:	add	r1, r1, #1
   146a4:	mov	r0, r4
   146a8:	bl	13148 <main@@Base+0x110>
   146ac:	cmp	r0, #0
   146b0:	beq	14650 <flatcc_builder_append_vector@@Base+0x6c>
   146b4:	mov	r4, #0
   146b8:	b	1466c <flatcc_builder_append_vector@@Base+0x88>
   146bc:	andeq	r7, r1, r4, lsr #29
   146c0:	muleq	r0, r3, r3
   146c4:	muleq	r1, r4, r2
   146c8:	andeq	r8, r1, ip, asr #7
   146cc:	andeq	r7, r1, r4, ror lr
   146d0:			; <UNDEFINED> instruction: 0x000183b0

000146d4 <flatcc_builder_extend_offset_vector@@Base>:
   146d4:	push	{r4, r5, r6, lr}
   146d8:	mov	r4, r0
   146dc:	ldr	r2, [r0, #32]
   146e0:	ldr	r3, [r2, #20]
   146e4:	adds	r3, r1, r3
   146e8:	movcs	ip, #1
   146ec:	movcc	ip, #0
   146f0:	cmn	r3, #-1073741823	; 0xc0000001
   146f4:	movls	r0, #0
   146f8:	movhi	r0, #1
   146fc:	orrs	r0, ip, r0
   14700:	bne	1472c <flatcc_builder_extend_offset_vector@@Base+0x58>
   14704:	str	r3, [r2, #20]
   14708:	ldr	r5, [r4, #20]
   1470c:	add	r1, r5, r1, lsl #2
   14710:	str	r1, [r4, #20]
   14714:	ldr	r3, [r4, #24]
   14718:	cmp	r1, r3
   1471c:	bcs	14740 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   14720:	ldr	r0, [r4, #16]
   14724:	add	r0, r0, r5
   14728:	pop	{r4, r5, r6, pc}
   1472c:	ldr	r3, [pc, #44]	; 14760 <flatcc_builder_extend_offset_vector@@Base+0x8c>
   14730:	mov	r2, #892	; 0x37c
   14734:	ldr	r1, [pc, #40]	; 14764 <flatcc_builder_extend_offset_vector@@Base+0x90>
   14738:	ldr	r0, [pc, #40]	; 14768 <flatcc_builder_extend_offset_vector@@Base+0x94>
   1473c:	bl	11ffc <__assert_fail@plt>
   14740:	mvn	r2, #3
   14744:	add	r1, r1, #1
   14748:	mov	r0, r4
   1474c:	bl	13148 <main@@Base+0x110>
   14750:	cmp	r0, #0
   14754:	beq	14720 <flatcc_builder_extend_offset_vector@@Base+0x4c>
   14758:	mov	r0, #0
   1475c:	pop	{r4, r5, r6, pc}
   14760:	andeq	r7, r1, r4, ror lr
   14764:	muleq	r1, r4, r2
   14768:			; <UNDEFINED> instruction: 0x000183b0

0001476c <flatcc_builder_offset_vector_push@@Base>:
   1476c:	push	{r4, r5, r6, lr}
   14770:	ldr	r2, [r0, #32]
   14774:	ldrh	r3, [r2, #14]
   14778:	cmp	r3, #5
   1477c:	bne	147c4 <flatcc_builder_offset_vector_push@@Base+0x58>
   14780:	mov	r4, r0
   14784:	mov	r6, r1
   14788:	ldr	r3, [r2, #20]
   1478c:	cmn	r3, #-1073741823	; 0xc0000001
   14790:	beq	147f4 <flatcc_builder_offset_vector_push@@Base+0x88>
   14794:	add	r3, r3, #1
   14798:	str	r3, [r2, #20]
   1479c:	ldr	r5, [r0, #20]
   147a0:	add	r3, r5, #4
   147a4:	str	r3, [r0, #20]
   147a8:	ldr	r2, [r0, #24]
   147ac:	cmp	r3, r2
   147b0:	bcs	147d8 <flatcc_builder_offset_vector_push@@Base+0x6c>
   147b4:	ldr	r3, [r4, #16]
   147b8:	adds	r0, r3, r5
   147bc:	strne	r6, [r3, r5]
   147c0:	pop	{r4, r5, r6, pc}
   147c4:	ldr	r3, [pc, #48]	; 147fc <flatcc_builder_offset_vector_push@@Base+0x90>
   147c8:	ldr	r2, [pc, #48]	; 14800 <flatcc_builder_offset_vector_push@@Base+0x94>
   147cc:	ldr	r1, [pc, #48]	; 14804 <flatcc_builder_offset_vector_push@@Base+0x98>
   147d0:	ldr	r0, [pc, #48]	; 14808 <flatcc_builder_offset_vector_push@@Base+0x9c>
   147d4:	bl	11ffc <__assert_fail@plt>
   147d8:	mvn	r2, #3
   147dc:	add	r1, r5, #5
   147e0:	bl	13148 <main@@Base+0x110>
   147e4:	cmp	r0, #0
   147e8:	beq	147b4 <flatcc_builder_offset_vector_push@@Base+0x48>
   147ec:	mov	r0, #0
   147f0:	pop	{r4, r5, r6, pc}
   147f4:	mov	r0, #0
   147f8:	pop	{r4, r5, r6, pc}
   147fc:	andeq	r7, r1, r4, asr #29
   14800:	andeq	r0, r0, r6, lsr #7
   14804:	muleq	r1, r4, r2
   14808:	andeq	r8, r1, r8, lsr r4

0001480c <flatcc_builder_append_offset_vector@@Base>:
   1480c:	push	{r4, r5, r6, r7, r8, lr}
   14810:	mov	r6, r1
   14814:	ldr	r1, [r0, #32]
   14818:	ldrh	r3, [r1, #14]
   1481c:	cmp	r3, #5
   14820:	bne	14890 <flatcc_builder_append_offset_vector@@Base+0x84>
   14824:	mov	r5, r0
   14828:	ldr	r3, [r1, #20]
   1482c:	adds	r3, r2, r3
   14830:	movcs	ip, #1
   14834:	movcc	ip, #0
   14838:	cmn	r3, #-1073741823	; 0xc0000001
   1483c:	movls	r0, #0
   14840:	movhi	r0, #1
   14844:	orrs	r0, ip, r0
   14848:	bne	148a4 <flatcc_builder_append_offset_vector@@Base+0x98>
   1484c:	str	r3, [r1, #20]
   14850:	lsl	r4, r2, #2
   14854:	ldr	r7, [r5, #20]
   14858:	add	r1, r4, r7
   1485c:	str	r1, [r5, #20]
   14860:	ldr	r3, [r5, #24]
   14864:	cmp	r1, r3
   14868:	bcs	148b8 <flatcc_builder_append_offset_vector@@Base+0xac>
   1486c:	ldr	r5, [r5, #16]
   14870:	adds	r5, r5, r7
   14874:	beq	14888 <flatcc_builder_append_offset_vector@@Base+0x7c>
   14878:	mov	r2, r4
   1487c:	mov	r1, r6
   14880:	mov	r0, r5
   14884:	bl	11f6c <memcpy@plt>
   14888:	mov	r0, r5
   1488c:	pop	{r4, r5, r6, r7, r8, pc}
   14890:	ldr	r3, [pc, #64]	; 148d8 <flatcc_builder_append_offset_vector@@Base+0xcc>
   14894:	mov	r2, #948	; 0x3b4
   14898:	ldr	r1, [pc, #60]	; 148dc <flatcc_builder_append_offset_vector@@Base+0xd0>
   1489c:	ldr	r0, [pc, #60]	; 148e0 <flatcc_builder_append_offset_vector@@Base+0xd4>
   148a0:	bl	11ffc <__assert_fail@plt>
   148a4:	ldr	r3, [pc, #56]	; 148e4 <flatcc_builder_append_offset_vector@@Base+0xd8>
   148a8:	mov	r2, #892	; 0x37c
   148ac:	ldr	r1, [pc, #40]	; 148dc <flatcc_builder_append_offset_vector@@Base+0xd0>
   148b0:	ldr	r0, [pc, #48]	; 148e8 <flatcc_builder_append_offset_vector@@Base+0xdc>
   148b4:	bl	11ffc <__assert_fail@plt>
   148b8:	mvn	r2, #3
   148bc:	add	r1, r1, #1
   148c0:	mov	r0, r5
   148c4:	bl	13148 <main@@Base+0x110>
   148c8:	cmp	r0, #0
   148cc:	beq	1486c <flatcc_builder_append_offset_vector@@Base+0x60>
   148d0:	mov	r5, #0
   148d4:	b	14888 <flatcc_builder_append_offset_vector@@Base+0x7c>
   148d8:	andeq	r7, r1, r8, ror #29
   148dc:	muleq	r1, r4, r2
   148e0:	andeq	r8, r1, r8, lsr r4
   148e4:	andeq	r7, r1, r4, ror lr
   148e8:			; <UNDEFINED> instruction: 0x000183b0

000148ec <flatcc_builder_extend_string@@Base>:
   148ec:	push	{r4, r5, r6, lr}
   148f0:	ldr	r2, [r0, #32]
   148f4:	ldrh	r3, [r2, #14]
   148f8:	cmp	r3, #6
   148fc:	bne	14938 <flatcc_builder_extend_string@@Base+0x4c>
   14900:	mov	r4, r0
   14904:	ldr	r3, [r2, #20]
   14908:	adds	r3, r1, r3
   1490c:	bcs	1494c <flatcc_builder_extend_string@@Base+0x60>
   14910:	str	r3, [r2, #20]
   14914:	ldr	r5, [r0, #20]
   14918:	add	r1, r1, r5
   1491c:	str	r1, [r0, #20]
   14920:	ldr	r3, [r0, #24]
   14924:	cmp	r1, r3
   14928:	bcs	14960 <flatcc_builder_extend_string@@Base+0x74>
   1492c:	ldr	r0, [r4, #16]
   14930:	add	r0, r0, r5
   14934:	pop	{r4, r5, r6, pc}
   14938:	ldr	r3, [pc, #60]	; 1497c <flatcc_builder_extend_string@@Base+0x90>
   1493c:	ldr	r2, [pc, #60]	; 14980 <flatcc_builder_extend_string@@Base+0x94>
   14940:	ldr	r1, [pc, #60]	; 14984 <flatcc_builder_extend_string@@Base+0x98>
   14944:	ldr	r0, [pc, #60]	; 14988 <flatcc_builder_extend_string@@Base+0x9c>
   14948:	bl	11ffc <__assert_fail@plt>
   1494c:	ldr	r3, [pc, #56]	; 1498c <flatcc_builder_extend_string@@Base+0xa0>
   14950:	mov	r2, #892	; 0x37c
   14954:	ldr	r1, [pc, #40]	; 14984 <flatcc_builder_extend_string@@Base+0x98>
   14958:	ldr	r0, [pc, #48]	; 14990 <flatcc_builder_extend_string@@Base+0xa4>
   1495c:	bl	11ffc <__assert_fail@plt>
   14960:	mvn	r2, #3
   14964:	add	r1, r1, #1
   14968:	bl	13148 <main@@Base+0x110>
   1496c:	cmp	r0, #0
   14970:	beq	1492c <flatcc_builder_extend_string@@Base+0x40>
   14974:	mov	r0, #0
   14978:	pop	{r4, r5, r6, pc}
   1497c:	andeq	r7, r1, ip, lsl #30
   14980:			; <UNDEFINED> instruction: 0x000003bd
   14984:	muleq	r1, r4, r2
   14988:	andeq	r8, r1, ip, ror #8
   1498c:	andeq	r7, r1, r4, ror lr
   14990:			; <UNDEFINED> instruction: 0x000183b0

00014994 <flatcc_builder_append_string@@Base>:
   14994:	push	{r4, r5, r6, r7, r8, lr}
   14998:	mov	r5, r2
   1499c:	ldr	r2, [r0, #32]
   149a0:	ldrh	r3, [r2, #14]
   149a4:	cmp	r3, #6
   149a8:	bne	14a00 <flatcc_builder_append_string@@Base+0x6c>
   149ac:	mov	r4, r0
   149b0:	mov	r6, r1
   149b4:	ldr	r3, [r2, #20]
   149b8:	adds	r3, r5, r3
   149bc:	bcs	14a14 <flatcc_builder_append_string@@Base+0x80>
   149c0:	str	r3, [r2, #20]
   149c4:	ldr	r7, [r0, #20]
   149c8:	add	r1, r5, r7
   149cc:	str	r1, [r0, #20]
   149d0:	ldr	r3, [r0, #24]
   149d4:	cmp	r1, r3
   149d8:	bcs	14a28 <flatcc_builder_append_string@@Base+0x94>
   149dc:	ldr	r4, [r4, #16]
   149e0:	adds	r4, r4, r7
   149e4:	beq	149f8 <flatcc_builder_append_string@@Base+0x64>
   149e8:	mov	r2, r5
   149ec:	mov	r1, r6
   149f0:	mov	r0, r4
   149f4:	bl	11f6c <memcpy@plt>
   149f8:	mov	r0, r4
   149fc:	pop	{r4, r5, r6, r7, r8, pc}
   14a00:	ldr	r3, [pc, #60]	; 14a44 <flatcc_builder_append_string@@Base+0xb0>
   14a04:	ldr	r2, [pc, #60]	; 14a48 <flatcc_builder_append_string@@Base+0xb4>
   14a08:	ldr	r1, [pc, #60]	; 14a4c <flatcc_builder_append_string@@Base+0xb8>
   14a0c:	ldr	r0, [pc, #60]	; 14a50 <flatcc_builder_append_string@@Base+0xbc>
   14a10:	bl	11ffc <__assert_fail@plt>
   14a14:	ldr	r3, [pc, #56]	; 14a54 <flatcc_builder_append_string@@Base+0xc0>
   14a18:	mov	r2, #892	; 0x37c
   14a1c:	ldr	r1, [pc, #40]	; 14a4c <flatcc_builder_append_string@@Base+0xb8>
   14a20:	ldr	r0, [pc, #48]	; 14a58 <flatcc_builder_append_string@@Base+0xc4>
   14a24:	bl	11ffc <__assert_fail@plt>
   14a28:	mvn	r2, #3
   14a2c:	add	r1, r1, #1
   14a30:	bl	13148 <main@@Base+0x110>
   14a34:	cmp	r0, #0
   14a38:	beq	149dc <flatcc_builder_append_string@@Base+0x48>
   14a3c:	mov	r4, #0
   14a40:	b	149f8 <flatcc_builder_append_string@@Base+0x64>
   14a44:	andeq	r7, r1, ip, lsr #30
   14a48:	andeq	r0, r0, r6, asr #7
   14a4c:	muleq	r1, r4, r2
   14a50:	andeq	r8, r1, ip, ror #8
   14a54:	andeq	r7, r1, r4, ror lr
   14a58:			; <UNDEFINED> instruction: 0x000183b0

00014a5c <flatcc_builder_append_string_str@@Base>:
   14a5c:	push	{r4, r5, r6, lr}
   14a60:	mov	r5, r0
   14a64:	mov	r4, r1
   14a68:	mov	r0, r1
   14a6c:	bl	11fc0 <strlen@plt>
   14a70:	mov	r2, r0
   14a74:	mov	r1, r4
   14a78:	mov	r0, r5
   14a7c:	bl	14994 <flatcc_builder_append_string@@Base>
   14a80:	pop	{r4, r5, r6, pc}

00014a84 <flatcc_builder_append_string_strn@@Base>:
   14a84:	push	{r4, r5, r6, lr}
   14a88:	mov	r6, r0
   14a8c:	mov	r4, r1
   14a90:	mov	r5, r2
   14a94:	mov	r1, #0
   14a98:	mov	r0, r4
   14a9c:	bl	11fe4 <memchr@plt>
   14aa0:	cmp	r0, #0
   14aa4:	subne	r5, r0, r4
   14aa8:	mov	r2, r5
   14aac:	mov	r1, r4
   14ab0:	mov	r0, r6
   14ab4:	bl	14994 <flatcc_builder_append_string@@Base>
   14ab8:	pop	{r4, r5, r6, pc}

00014abc <flatcc_builder_truncate_vector@@Base>:
   14abc:	push	{r4, lr}
   14ac0:	ldr	ip, [r0, #32]
   14ac4:	ldrh	r3, [ip, #14]
   14ac8:	cmp	r3, #4
   14acc:	bne	14b14 <flatcc_builder_truncate_vector@@Base+0x58>
   14ad0:	ldr	r3, [ip, #20]
   14ad4:	cmp	r3, r1
   14ad8:	bcc	14b28 <flatcc_builder_truncate_vector@@Base+0x6c>
   14adc:	sub	r3, r3, r1
   14ae0:	str	r3, [ip, #20]
   14ae4:	ldr	r3, [r0, #32]
   14ae8:	ldr	r2, [r3, #16]
   14aec:	mul	r2, r2, r1
   14af0:	ldr	r3, [r0, #20]
   14af4:	sub	r3, r3, r2
   14af8:	str	r3, [r0, #20]
   14afc:	ldr	r0, [r0, #16]
   14b00:	mov	r1, #0
   14b04:	add	r0, r0, r3
   14b08:	bl	11fd8 <memset@plt>
   14b0c:	mov	r0, #0
   14b10:	pop	{r4, pc}
   14b14:	ldr	r3, [pc, #32]	; 14b3c <flatcc_builder_truncate_vector@@Base+0x80>
   14b18:	ldr	r2, [pc, #32]	; 14b40 <flatcc_builder_truncate_vector@@Base+0x84>
   14b1c:	ldr	r1, [pc, #32]	; 14b44 <flatcc_builder_truncate_vector@@Base+0x88>
   14b20:	ldr	r0, [pc, #32]	; 14b48 <flatcc_builder_truncate_vector@@Base+0x8c>
   14b24:	bl	11ffc <__assert_fail@plt>
   14b28:	ldr	r3, [pc, #12]	; 14b3c <flatcc_builder_truncate_vector@@Base+0x80>
   14b2c:	ldr	r2, [pc, #24]	; 14b4c <flatcc_builder_truncate_vector@@Base+0x90>
   14b30:	ldr	r1, [pc, #12]	; 14b44 <flatcc_builder_truncate_vector@@Base+0x88>
   14b34:	ldr	r0, [pc, #20]	; 14b50 <flatcc_builder_truncate_vector@@Base+0x94>
   14b38:	bl	11ffc <__assert_fail@plt>
   14b3c:	andeq	r7, r1, ip, asr #30
   14b40:	ldrdeq	r0, [r0], -r9
   14b44:	muleq	r1, r4, r2
   14b48:	andeq	r8, r1, ip, asr #7
   14b4c:	ldrdeq	r0, [r0], -sl
   14b50:	muleq	r1, r8, r4

00014b54 <flatcc_builder_truncate_offset_vector@@Base>:
   14b54:	push	{r4, lr}
   14b58:	ldr	ip, [r0, #32]
   14b5c:	ldrh	r3, [ip, #14]
   14b60:	cmp	r3, #5
   14b64:	bne	14bac <flatcc_builder_truncate_offset_vector@@Base+0x58>
   14b68:	ldr	r3, [ip, #20]
   14b6c:	cmp	r3, r1
   14b70:	bcc	14bc0 <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   14b74:	sub	r3, r3, r1
   14b78:	str	r3, [ip, #20]
   14b7c:	ldr	r3, [r0, #32]
   14b80:	ldr	r2, [r3, #16]
   14b84:	mul	r2, r2, r1
   14b88:	ldr	r3, [r0, #20]
   14b8c:	sub	r3, r3, r2
   14b90:	str	r3, [r0, #20]
   14b94:	ldr	r0, [r0, #16]
   14b98:	mov	r1, #0
   14b9c:	add	r0, r0, r3
   14ba0:	bl	11fd8 <memset@plt>
   14ba4:	mov	r0, #0
   14ba8:	pop	{r4, pc}
   14bac:	ldr	r3, [pc, #32]	; 14bd4 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   14bb0:	ldr	r2, [pc, #32]	; 14bd8 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   14bb4:	ldr	r1, [pc, #32]	; 14bdc <flatcc_builder_truncate_offset_vector@@Base+0x88>
   14bb8:	ldr	r0, [pc, #32]	; 14be0 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   14bbc:	bl	11ffc <__assert_fail@plt>
   14bc0:	ldr	r3, [pc, #12]	; 14bd4 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   14bc4:	ldr	r2, [pc, #24]	; 14be4 <flatcc_builder_truncate_offset_vector@@Base+0x90>
   14bc8:	ldr	r1, [pc, #12]	; 14bdc <flatcc_builder_truncate_offset_vector@@Base+0x88>
   14bcc:	ldr	r0, [pc, #20]	; 14be8 <flatcc_builder_truncate_offset_vector@@Base+0x94>
   14bd0:	bl	11ffc <__assert_fail@plt>
   14bd4:	andeq	r7, r1, ip, ror #30
   14bd8:	andeq	r0, r0, r2, ror #7
   14bdc:	muleq	r1, r4, r2
   14be0:	andeq	r8, r1, r8, lsr r4
   14be4:	andeq	r0, r0, r3, ror #7
   14be8:			; <UNDEFINED> instruction: 0x000184bc

00014bec <flatcc_builder_truncate_string@@Base>:
   14bec:	push	{r4, lr}
   14bf0:	ldr	r2, [r0, #32]
   14bf4:	ldrh	r3, [r2, #14]
   14bf8:	cmp	r3, #6
   14bfc:	bne	14c3c <flatcc_builder_truncate_string@@Base+0x50>
   14c00:	ldr	r3, [r2, #20]
   14c04:	cmp	r3, r1
   14c08:	bcc	14c50 <flatcc_builder_truncate_string@@Base+0x64>
   14c0c:	sub	r3, r3, r1
   14c10:	str	r3, [r2, #20]
   14c14:	ldr	r3, [r0, #20]
   14c18:	sub	r3, r3, r1
   14c1c:	str	r3, [r0, #20]
   14c20:	ldr	r0, [r0, #16]
   14c24:	mov	r2, r1
   14c28:	mov	r1, #0
   14c2c:	add	r0, r0, r3
   14c30:	bl	11fd8 <memset@plt>
   14c34:	mov	r0, #0
   14c38:	pop	{r4, pc}
   14c3c:	ldr	r3, [pc, #32]	; 14c64 <flatcc_builder_truncate_string@@Base+0x78>
   14c40:	ldr	r2, [pc, #32]	; 14c68 <flatcc_builder_truncate_string@@Base+0x7c>
   14c44:	ldr	r1, [pc, #32]	; 14c6c <flatcc_builder_truncate_string@@Base+0x80>
   14c48:	ldr	r0, [pc, #32]	; 14c70 <flatcc_builder_truncate_string@@Base+0x84>
   14c4c:	bl	11ffc <__assert_fail@plt>
   14c50:	ldr	r3, [pc, #12]	; 14c64 <flatcc_builder_truncate_string@@Base+0x78>
   14c54:	mov	r2, #1004	; 0x3ec
   14c58:	ldr	r1, [pc, #12]	; 14c6c <flatcc_builder_truncate_string@@Base+0x80>
   14c5c:	ldr	r0, [pc, #16]	; 14c74 <flatcc_builder_truncate_string@@Base+0x88>
   14c60:	bl	11ffc <__assert_fail@plt>
   14c64:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   14c68:	andeq	r0, r0, fp, ror #7
   14c6c:	muleq	r1, r4, r2
   14c70:	andeq	r8, r1, ip, ror #8
   14c74:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>

00014c78 <flatcc_builder_start_vector@@Base>:
   14c78:	push	{r4, r5, r6, lr}
   14c7c:	mov	r4, r0
   14c80:	mov	r6, r1
   14c84:	mov	r5, r3
   14c88:	cmp	r2, #4
   14c8c:	movcs	r1, r2
   14c90:	movcc	r1, #4
   14c94:	bl	133e8 <flatcc_builder_default_alloc@@Base+0x22c>
   14c98:	cmp	r0, #0
   14c9c:	bne	14cfc <flatcc_builder_start_vector@@Base+0x84>
   14ca0:	ldr	r3, [r4, #32]
   14ca4:	str	r6, [r3, #16]
   14ca8:	ldr	r3, [r4, #32]
   14cac:	mov	r2, #0
   14cb0:	str	r2, [r3, #20]
   14cb4:	ldr	r3, [r4, #32]
   14cb8:	str	r5, [r3, #24]
   14cbc:	ldr	r3, [r4, #32]
   14cc0:	mov	r2, #4
   14cc4:	strh	r2, [r3, #14]
   14cc8:	ldr	r1, [r4, #28]
   14ccc:	ldr	r2, [r4, #60]	; 0x3c
   14cd0:	add	r2, r2, r1
   14cd4:	str	r2, [r4, #16]
   14cd8:	ldr	r3, [r4, #64]	; 0x40
   14cdc:	sub	r3, r3, r1
   14ce0:	cmn	r3, #4
   14ce4:	mvnhi	r3, #3
   14ce8:	str	r3, [r4, #24]
   14cec:	ldr	r3, [r4, #32]
   14cf0:	mvn	r2, #3
   14cf4:	str	r2, [r3, #4]
   14cf8:	pop	{r4, r5, r6, pc}
   14cfc:	mvn	r0, #0
   14d00:	pop	{r4, r5, r6, pc}

00014d04 <flatcc_builder_start_offset_vector@@Base>:
   14d04:	push	{r4, lr}
   14d08:	mov	r4, r0
   14d0c:	mov	r1, #4
   14d10:	bl	133e8 <flatcc_builder_default_alloc@@Base+0x22c>
   14d14:	cmp	r0, #0
   14d18:	bne	14d74 <flatcc_builder_start_offset_vector@@Base+0x70>
   14d1c:	ldr	r3, [r4, #32]
   14d20:	mov	r2, #4
   14d24:	str	r2, [r3, #16]
   14d28:	ldr	r3, [r4, #32]
   14d2c:	mov	r2, #0
   14d30:	str	r2, [r3, #20]
   14d34:	ldr	r3, [r4, #32]
   14d38:	mov	r2, #5
   14d3c:	strh	r2, [r3, #14]
   14d40:	ldr	r1, [r4, #28]
   14d44:	ldr	r2, [r4, #60]	; 0x3c
   14d48:	add	r2, r2, r1
   14d4c:	str	r2, [r4, #16]
   14d50:	ldr	r3, [r4, #64]	; 0x40
   14d54:	sub	r3, r3, r1
   14d58:	cmn	r3, #4
   14d5c:	mvnhi	r3, #3
   14d60:	str	r3, [r4, #24]
   14d64:	ldr	r3, [r4, #32]
   14d68:	mvn	r2, #3
   14d6c:	str	r2, [r3, #4]
   14d70:	pop	{r4, pc}
   14d74:	mvn	r0, #0
   14d78:	pop	{r4, pc}

00014d7c <flatcc_builder_start_string@@Base>:
   14d7c:	push	{r4, lr}
   14d80:	mov	r4, r0
   14d84:	mov	r1, #1
   14d88:	bl	133e8 <flatcc_builder_default_alloc@@Base+0x22c>
   14d8c:	cmp	r0, #0
   14d90:	bne	14dec <flatcc_builder_start_string@@Base+0x70>
   14d94:	ldr	r3, [r4, #32]
   14d98:	mov	r2, #1
   14d9c:	str	r2, [r3, #16]
   14da0:	ldr	r3, [r4, #32]
   14da4:	mov	r2, #0
   14da8:	str	r2, [r3, #20]
   14dac:	ldr	r3, [r4, #32]
   14db0:	mov	r2, #6
   14db4:	strh	r2, [r3, #14]
   14db8:	ldr	r1, [r4, #28]
   14dbc:	ldr	r2, [r4, #60]	; 0x3c
   14dc0:	add	r2, r2, r1
   14dc4:	str	r2, [r4, #16]
   14dc8:	ldr	r3, [r4, #64]	; 0x40
   14dcc:	sub	r3, r3, r1
   14dd0:	cmn	r3, #4
   14dd4:	mvnhi	r3, #3
   14dd8:	str	r3, [r4, #24]
   14ddc:	ldr	r3, [r4, #32]
   14de0:	mvn	r2, #3
   14de4:	str	r2, [r3, #4]
   14de8:	pop	{r4, pc}
   14dec:	mvn	r0, #0
   14df0:	pop	{r4, pc}

00014df4 <flatcc_builder_reserve_table@@Base>:
   14df4:	push	{r4, r5, r6, r7, lr}
   14df8:	sub	sp, sp, #12
   14dfc:	cmp	r1, #0
   14e00:	blt	14e8c <flatcc_builder_reserve_table@@Base+0x98>
   14e04:	mov	r5, r0
   14e08:	ldr	r2, [r0, #32]
   14e0c:	ldrh	r6, [r2, #28]
   14e10:	ldr	r3, [r2, #16]
   14e14:	add	r6, r3, r6, lsl #1
   14e18:	add	r1, r1, #2
   14e1c:	lsl	r4, r1, #1
   14e20:	add	r2, r6, r4
   14e24:	ldr	r3, [r0, #56]	; 0x38
   14e28:	cmp	r2, r3
   14e2c:	bhi	14ea0 <flatcc_builder_reserve_table@@Base+0xac>
   14e30:	ldr	r3, [r5, #52]	; 0x34
   14e34:	adds	r3, r3, r6
   14e38:	moveq	r3, #0
   14e3c:	streq	r3, [r5, #4]
   14e40:	mvneq	r0, #0
   14e44:	beq	14e84 <flatcc_builder_reserve_table@@Base+0x90>
   14e48:	add	r3, r3, #4
   14e4c:	str	r3, [r5, #4]
   14e50:	ldr	r3, [r5, #32]
   14e54:	ldr	r6, [r3, #20]
   14e58:	add	r2, r4, r6
   14e5c:	sub	r2, r2, #3
   14e60:	ldr	r3, [r5, #80]	; 0x50
   14e64:	cmp	r2, r3
   14e68:	bhi	14ed8 <flatcc_builder_reserve_table@@Base+0xe4>
   14e6c:	ldr	r0, [r5, #76]	; 0x4c
   14e70:	add	r0, r0, r6
   14e74:	str	r0, [r5]
   14e78:	cmp	r0, #0
   14e7c:	movne	r0, #0
   14e80:	mvneq	r0, #0
   14e84:	add	sp, sp, #12
   14e88:	pop	{r4, r5, r6, r7, pc}
   14e8c:	ldr	r3, [pc, #124]	; 14f10 <flatcc_builder_reserve_table@@Base+0x11c>
   14e90:	ldr	r2, [pc, #124]	; 14f14 <flatcc_builder_reserve_table@@Base+0x120>
   14e94:	ldr	r1, [pc, #124]	; 14f18 <flatcc_builder_reserve_table@@Base+0x124>
   14e98:	ldr	r0, [pc, #124]	; 14f1c <flatcc_builder_reserve_table@@Base+0x128>
   14e9c:	bl	11ffc <__assert_fail@plt>
   14ea0:	mov	r3, #0
   14ea4:	str	r3, [sp]
   14ea8:	ldr	r7, [r0, #48]	; 0x30
   14eac:	mov	r3, #1
   14eb0:	add	r1, r0, #52	; 0x34
   14eb4:	ldr	r0, [r0, #40]	; 0x28
   14eb8:	blx	r7
   14ebc:	cmp	r0, #0
   14ec0:	beq	14e30 <flatcc_builder_reserve_table@@Base+0x3c>
   14ec4:	ldr	r3, [pc, #84]	; 14f20 <flatcc_builder_reserve_table@@Base+0x12c>
   14ec8:	mov	r2, #308	; 0x134
   14ecc:	ldr	r1, [pc, #68]	; 14f18 <flatcc_builder_reserve_table@@Base+0x124>
   14ed0:	ldr	r0, [pc, #76]	; 14f24 <flatcc_builder_reserve_table@@Base+0x130>
   14ed4:	bl	11ffc <__assert_fail@plt>
   14ed8:	mov	r3, #3
   14edc:	str	r3, [sp]
   14ee0:	ldr	r4, [r5, #48]	; 0x30
   14ee4:	mov	r3, #0
   14ee8:	add	r1, r5, #76	; 0x4c
   14eec:	ldr	r0, [r5, #40]	; 0x28
   14ef0:	blx	r4
   14ef4:	cmp	r0, #0
   14ef8:	beq	14e6c <flatcc_builder_reserve_table@@Base+0x78>
   14efc:	ldr	r3, [pc, #28]	; 14f20 <flatcc_builder_reserve_table@@Base+0x12c>
   14f00:	mov	r2, #308	; 0x134
   14f04:	ldr	r1, [pc, #12]	; 14f18 <flatcc_builder_reserve_table@@Base+0x124>
   14f08:	ldr	r0, [pc, #20]	; 14f24 <flatcc_builder_reserve_table@@Base+0x130>
   14f0c:	bl	11ffc <__assert_fail@plt>
   14f10:			; <UNDEFINED> instruction: 0x00017fb4
   14f14:	andeq	r0, r0, r9, lsr #8
   14f18:	muleq	r1, r4, r2
   14f1c:	andeq	r8, r1, ip, lsl r5
   14f20:	andeq	r7, r1, r0, ror #26
   14f24:	andeq	r8, r1, r8, ror #5

00014f28 <flatcc_builder_start_table@@Base>:
   14f28:	push	{r4, r5, r6, r7, lr}
   14f2c:	sub	sp, sp, #12
   14f30:	mov	r4, r0
   14f34:	mov	r5, r1
   14f38:	mov	r1, #4
   14f3c:	bl	133e8 <flatcc_builder_default_alloc@@Base+0x22c>
   14f40:	cmp	r0, #0
   14f44:	bne	150d4 <flatcc_builder_start_table@@Base+0x1ac>
   14f48:	ldr	r2, [r4, #32]
   14f4c:	ldr	r3, [r4, #4]
   14f50:	ldr	r1, [r4, #52]	; 0x34
   14f54:	sub	r3, r3, r1
   14f58:	str	r3, [r2, #16]
   14f5c:	ldr	r2, [r4, #32]
   14f60:	ldr	r3, [r4]
   14f64:	ldr	r1, [r4, #76]	; 0x4c
   14f68:	sub	r3, r3, r1
   14f6c:	str	r3, [r2, #20]
   14f70:	ldr	r3, [r4, #32]
   14f74:	ldr	r2, [r4, #12]
   14f78:	str	r2, [r3, #24]
   14f7c:	ldr	r3, [r4, #32]
   14f80:	ldrh	r2, [r4, #8]
   14f84:	strh	r2, [r3, #28]
   14f88:	ldr	r3, [pc, #340]	; 150e4 <flatcc_builder_start_table@@Base+0x1bc>
   14f8c:	str	r3, [r4, #12]
   14f90:	mov	r3, #0
   14f94:	strh	r3, [r4, #8]
   14f98:	ldr	r3, [r4, #32]
   14f9c:	mov	r2, #3
   14fa0:	strh	r2, [r3, #14]
   14fa4:	ldr	r2, [r4, #32]
   14fa8:	ldrh	r6, [r2, #28]
   14fac:	ldr	r3, [r2, #16]
   14fb0:	add	r6, r3, r6, lsl #1
   14fb4:	add	r5, r5, #2
   14fb8:	lsl	r5, r5, #1
   14fbc:	add	r2, r6, r5
   14fc0:	ldr	r3, [r4, #56]	; 0x38
   14fc4:	cmp	r2, r3
   14fc8:	bhi	15064 <flatcc_builder_start_table@@Base+0x13c>
   14fcc:	ldr	r3, [r4, #52]	; 0x34
   14fd0:	adds	r3, r3, r6
   14fd4:	moveq	r3, #0
   14fd8:	streq	r3, [r4, #4]
   14fdc:	mvneq	r0, #0
   14fe0:	beq	1505c <flatcc_builder_start_table@@Base+0x134>
   14fe4:	add	r3, r3, #4
   14fe8:	str	r3, [r4, #4]
   14fec:	ldr	r3, [r4, #32]
   14ff0:	ldr	r6, [r3, #20]
   14ff4:	sub	r2, r5, #3
   14ff8:	add	r2, r2, r6
   14ffc:	ldr	r3, [r4, #80]	; 0x50
   15000:	cmp	r2, r3
   15004:	bhi	1509c <flatcc_builder_start_table@@Base+0x174>
   15008:	ldr	r0, [r4, #76]	; 0x4c
   1500c:	add	r0, r0, r6
   15010:	str	r0, [r4]
   15014:	cmp	r0, #0
   15018:	movne	r0, #0
   1501c:	mvneq	r0, #0
   15020:	cmp	r0, #0
   15024:	bne	150dc <flatcc_builder_start_table@@Base+0x1b4>
   15028:	ldr	r1, [r4, #28]
   1502c:	ldr	r2, [r4, #60]	; 0x3c
   15030:	add	r2, r2, r1
   15034:	str	r2, [r4, #16]
   15038:	ldr	r3, [r4, #64]	; 0x40
   1503c:	sub	r3, r3, r1
   15040:	ldr	r2, [pc, #160]	; 150e8 <flatcc_builder_start_table@@Base+0x1c0>
   15044:	cmp	r3, r2
   15048:	ldrhi	r3, [pc, #152]	; 150e8 <flatcc_builder_start_table@@Base+0x1c0>
   1504c:	str	r3, [r4, #24]
   15050:	ldr	r3, [r4, #32]
   15054:	ldr	r2, [pc, #140]	; 150e8 <flatcc_builder_start_table@@Base+0x1c0>
   15058:	str	r2, [r3, #4]
   1505c:	add	sp, sp, #12
   15060:	pop	{r4, r5, r6, r7, pc}
   15064:	mov	r3, #0
   15068:	str	r3, [sp]
   1506c:	ldr	r7, [r4, #48]	; 0x30
   15070:	mov	r3, #1
   15074:	add	r1, r4, #52	; 0x34
   15078:	ldr	r0, [r4, #40]	; 0x28
   1507c:	blx	r7
   15080:	cmp	r0, #0
   15084:	beq	14fcc <flatcc_builder_start_table@@Base+0xa4>
   15088:	ldr	r3, [pc, #92]	; 150ec <flatcc_builder_start_table@@Base+0x1c4>
   1508c:	mov	r2, #308	; 0x134
   15090:	ldr	r1, [pc, #88]	; 150f0 <flatcc_builder_start_table@@Base+0x1c8>
   15094:	ldr	r0, [pc, #88]	; 150f4 <flatcc_builder_start_table@@Base+0x1cc>
   15098:	bl	11ffc <__assert_fail@plt>
   1509c:	mov	r3, #3
   150a0:	str	r3, [sp]
   150a4:	ldr	r5, [r4, #48]	; 0x30
   150a8:	mov	r3, #0
   150ac:	add	r1, r4, #76	; 0x4c
   150b0:	ldr	r0, [r4, #40]	; 0x28
   150b4:	blx	r5
   150b8:	cmp	r0, #0
   150bc:	beq	15008 <flatcc_builder_start_table@@Base+0xe0>
   150c0:	ldr	r3, [pc, #36]	; 150ec <flatcc_builder_start_table@@Base+0x1c4>
   150c4:	mov	r2, #308	; 0x134
   150c8:	ldr	r1, [pc, #32]	; 150f0 <flatcc_builder_start_table@@Base+0x1c8>
   150cc:	ldr	r0, [pc, #32]	; 150f4 <flatcc_builder_start_table@@Base+0x1cc>
   150d0:	bl	11ffc <__assert_fail@plt>
   150d4:	mvn	r0, #0
   150d8:	b	1505c <flatcc_builder_start_table@@Base+0x134>
   150dc:	mvn	r0, #0
   150e0:	b	1505c <flatcc_builder_start_table@@Base+0x134>
   150e4:	svccs	0x00693b52
   150e8:	strdeq	pc, [r0], -ip
   150ec:	andeq	r7, r1, r0, ror #26
   150f0:	muleq	r1, r4, r2
   150f4:	andeq	r8, r1, r8, ror #5

000150f8 <flatcc_builder_create_vtable@@Base>:
   150f8:	push	{r4, r5, r6, lr}
   150fc:	sub	sp, sp, #80	; 0x50
   15100:	mov	r5, r0
   15104:	mov	r3, #0
   15108:	str	r3, [sp, #8]
   1510c:	str	r3, [sp, #12]
   15110:	cmp	r2, #0
   15114:	beq	15198 <flatcc_builder_create_vtable@@Base+0xa0>
   15118:	str	r2, [sp, #8]
   1511c:	str	r1, [sp, #16]
   15120:	str	r2, [sp, #20]
   15124:	mov	r3, #1
   15128:	str	r3, [sp, #12]
   1512c:	ldr	r3, [r0, #152]	; 0x98
   15130:	cmp	r3, #0
   15134:	bne	151b0 <flatcc_builder_create_vtable@@Base+0xb8>
   15138:	ldr	r3, [r0, #180]	; 0xb4
   1513c:	cmp	r3, #0
   15140:	bne	151b0 <flatcc_builder_create_vtable@@Base+0xb8>
   15144:	ldr	r4, [r0, #140]	; 0x8c
   15148:	mov	r3, r2
   1514c:	add	r2, r2, r4
   15150:	str	r2, [r0, #140]	; 0x8c
   15154:	cmp	r4, r2
   15158:	ble	15210 <flatcc_builder_create_vtable@@Base+0x118>
   1515c:	ldr	r3, [pc, #232]	; 1524c <flatcc_builder_create_vtable@@Base+0x154>
   15160:	ldr	r2, [pc, #232]	; 15250 <flatcc_builder_create_vtable@@Base+0x158>
   15164:	ldr	r1, [pc, #232]	; 15254 <flatcc_builder_create_vtable@@Base+0x15c>
   15168:	ldr	r0, [pc, #232]	; 15258 <flatcc_builder_create_vtable@@Base+0x160>
   1516c:	bl	11ffc <__assert_fail@plt>
   15170:	ldr	r3, [pc, #228]	; 1525c <flatcc_builder_create_vtable@@Base+0x164>
   15174:	ldr	r2, [pc, #228]	; 15260 <flatcc_builder_create_vtable@@Base+0x168>
   15178:	ldr	r1, [pc, #212]	; 15254 <flatcc_builder_create_vtable@@Base+0x15c>
   1517c:	ldr	r0, [pc, #212]	; 15258 <flatcc_builder_create_vtable@@Base+0x160>
   15180:	bl	11ffc <__assert_fail@plt>
   15184:	ldr	r3, [pc, #208]	; 1525c <flatcc_builder_create_vtable@@Base+0x164>
   15188:	ldr	r2, [pc, #212]	; 15264 <flatcc_builder_create_vtable@@Base+0x16c>
   1518c:	ldr	r1, [pc, #192]	; 15254 <flatcc_builder_create_vtable@@Base+0x15c>
   15190:	ldr	r0, [pc, #192]	; 15258 <flatcc_builder_create_vtable@@Base+0x160>
   15194:	bl	11ffc <__assert_fail@plt>
   15198:	ldr	r3, [r0, #152]	; 0x98
   1519c:	cmp	r3, #0
   151a0:	bne	15170 <flatcc_builder_create_vtable@@Base+0x78>
   151a4:	ldr	r3, [r0, #180]	; 0xb4
   151a8:	cmp	r3, #0
   151ac:	beq	15200 <flatcc_builder_create_vtable@@Base+0x108>
   151b0:	ldr	r2, [r5, #136]	; 0x88
   151b4:	ldr	r3, [sp, #8]
   151b8:	sub	r4, r2, r3
   151bc:	cmp	r2, r4
   151c0:	ble	15170 <flatcc_builder_create_vtable@@Base+0x78>
   151c4:	str	r3, [sp]
   151c8:	ldr	r6, [r5, #44]	; 0x2c
   151cc:	mov	r3, r4
   151d0:	ldr	r2, [sp, #12]
   151d4:	add	r1, sp, #16
   151d8:	ldr	r0, [r5, #36]	; 0x24
   151dc:	blx	r6
   151e0:	cmp	r0, #0
   151e4:	bne	15184 <flatcc_builder_create_vtable@@Base+0x8c>
   151e8:	str	r4, [r5, #136]	; 0x88
   151ec:	cmp	r4, #0
   151f0:	addne	r4, r4, #1
   151f4:	mov	r0, r4
   151f8:	add	sp, sp, #80	; 0x50
   151fc:	pop	{r4, r5, r6, pc}
   15200:	ldr	r4, [r5, #140]	; 0x8c
   15204:	ldr	r3, [sp, #8]
   15208:	add	r2, r3, r4
   1520c:	str	r2, [r5, #140]	; 0x8c
   15210:	ldr	r0, [r5, #36]	; 0x24
   15214:	str	r3, [sp]
   15218:	ldr	r5, [r5, #44]	; 0x2c
   1521c:	mov	r3, r4
   15220:	ldr	r2, [sp, #12]
   15224:	add	r1, sp, #16
   15228:	blx	r5
   1522c:	cmp	r0, #0
   15230:	addeq	r4, r4, #1
   15234:	beq	151f4 <flatcc_builder_create_vtable@@Base+0xfc>
   15238:	ldr	r3, [pc, #12]	; 1524c <flatcc_builder_create_vtable@@Base+0x154>
   1523c:	ldr	r2, [pc, #36]	; 15268 <flatcc_builder_create_vtable@@Base+0x170>
   15240:	ldr	r1, [pc, #12]	; 15254 <flatcc_builder_create_vtable@@Base+0x15c>
   15244:	ldr	r0, [pc, #12]	; 15258 <flatcc_builder_create_vtable@@Base+0x160>
   15248:	bl	11ffc <__assert_fail@plt>
   1524c:	andeq	r7, r1, r4, asr #26
   15250:	andeq	r0, r0, r1, lsr #5
   15254:	muleq	r1, r4, r2
   15258:	andeq	r8, r1, r8, ror #5
   1525c:	muleq	r1, r0, sp
   15260:	andeq	r0, r0, r7, lsl #5
   15264:	andeq	r0, r0, fp, lsl #5
   15268:	andeq	r0, r0, r5, lsr #5

0001526c <flatcc_builder_create_cached_vtable@@Base>:
   1526c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15270:	sub	sp, sp, #28
   15274:	mov	r8, r0
   15278:	str	r1, [sp, #8]
   1527c:	mov	r7, r2
   15280:	mov	fp, r3
   15284:	ldr	r4, [r0, #116]	; 0x74
   15288:	cmp	r4, #0
   1528c:	beq	152d4 <flatcc_builder_create_cached_vtable@@Base+0x68>
   15290:	ldr	r3, [r8, #116]	; 0x74
   15294:	rsb	r3, r3, #32
   15298:	lsr	fp, fp, r3
   1529c:	ldr	r3, [r8, #92]	; 0x5c
   152a0:	str	r3, [sp, #16]
   152a4:	adds	r2, r3, fp, lsl #2
   152a8:	str	r2, [sp, #20]
   152ac:	beq	155a4 <flatcc_builder_create_cached_vtable@@Base+0x338>
   152b0:	ldr	r5, [r3, fp, lsl #2]
   152b4:	cmp	r5, #0
   152b8:	beq	15444 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   152bc:	ldr	sl, [r8, #100]	; 0x64
   152c0:	ldr	r6, [r8, #68]	; 0x44
   152c4:	mov	r9, r2
   152c8:	mov	r3, #0
   152cc:	str	r3, [sp, #12]
   152d0:	b	153cc <flatcc_builder_create_cached_vtable@@Base+0x160>
   152d4:	add	r6, r0, #92	; 0x5c
   152d8:	ldr	r3, [r0, #124]	; 0x7c
   152dc:	cmp	r3, #0
   152e0:	bne	15338 <flatcc_builder_create_cached_vtable@@Base+0xcc>
   152e4:	ldr	r3, [r0, #104]	; 0x68
   152e8:	cmp	r3, #15
   152ec:	bls	1534c <flatcc_builder_create_cached_vtable@@Base+0xe0>
   152f0:	ldr	r3, [r8, #100]	; 0x64
   152f4:	cmp	r3, #0
   152f8:	beq	155c4 <flatcc_builder_create_cached_vtable@@Base+0x358>
   152fc:	mov	r3, #16
   15300:	str	r3, [r8, #124]	; 0x7c
   15304:	mov	r3, #5
   15308:	str	r3, [sp]
   1530c:	ldr	r5, [r8, #48]	; 0x30
   15310:	mov	r3, #1
   15314:	mov	r2, #256	; 0x100
   15318:	mov	r1, r6
   1531c:	ldr	r0, [r8, #40]	; 0x28
   15320:	blx	r5
   15324:	cmp	r0, #0
   15328:	bne	155c4 <flatcc_builder_create_cached_vtable@@Base+0x358>
   1532c:	ldr	r1, [r8, #96]	; 0x60
   15330:	mov	r3, #256	; 0x100
   15334:	b	1538c <flatcc_builder_create_cached_vtable@@Base+0x120>
   15338:	ldr	r3, [pc, #652]	; 155cc <flatcc_builder_create_cached_vtable@@Base+0x360>
   1533c:	ldr	r2, [pc, #652]	; 155d0 <flatcc_builder_create_cached_vtable@@Base+0x364>
   15340:	ldr	r1, [pc, #652]	; 155d4 <flatcc_builder_create_cached_vtable@@Base+0x368>
   15344:	ldr	r0, [pc, #652]	; 155d8 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   15348:	bl	11ffc <__assert_fail@plt>
   1534c:	mov	r3, #6
   15350:	str	r3, [sp]
   15354:	ldr	r5, [r0, #48]	; 0x30
   15358:	mov	r3, #0
   1535c:	mov	r2, #16
   15360:	add	r1, r0, #100	; 0x64
   15364:	ldr	r0, [r0, #40]	; 0x28
   15368:	blx	r5
   1536c:	cmp	r0, #0
   15370:	beq	152f0 <flatcc_builder_create_cached_vtable@@Base+0x84>
   15374:	ldr	r3, [pc, #608]	; 155dc <flatcc_builder_create_cached_vtable@@Base+0x370>
   15378:	mov	r2, #308	; 0x134
   1537c:	ldr	r1, [pc, #592]	; 155d4 <flatcc_builder_create_cached_vtable@@Base+0x368>
   15380:	ldr	r0, [pc, #600]	; 155e0 <flatcc_builder_create_cached_vtable@@Base+0x374>
   15384:	bl	11ffc <__assert_fail@plt>
   15388:	mov	r3, r2
   1538c:	lsl	r2, r3, #1
   15390:	cmp	r2, r1
   15394:	bls	15388 <flatcc_builder_create_cached_vtable@@Base+0x11c>
   15398:	lsr	r3, r3, #2
   1539c:	cmp	r3, #1
   153a0:	bls	153b4 <flatcc_builder_create_cached_vtable@@Base+0x148>
   153a4:	mov	r2, #1
   153a8:	add	r4, r4, #1
   153ac:	cmp	r3, r2, lsl r4
   153b0:	bhi	153a8 <flatcc_builder_create_cached_vtable@@Base+0x13c>
   153b4:	str	r4, [r8, #116]	; 0x74
   153b8:	b	15290 <flatcc_builder_create_cached_vtable@@Base+0x24>
   153bc:	add	r9, r4, #12
   153c0:	ldr	r5, [r4, #12]
   153c4:	cmp	r5, #0
   153c8:	beq	1544c <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   153cc:	add	r4, sl, r5
   153d0:	ldr	r3, [r4, #8]
   153d4:	add	r1, r6, r3
   153d8:	ldrh	r3, [r6, r3]
   153dc:	cmp	r3, r7
   153e0:	bne	153bc <flatcc_builder_create_cached_vtable@@Base+0x150>
   153e4:	mov	r2, r7
   153e8:	ldr	r0, [sp, #8]
   153ec:	bl	11f78 <memcmp@plt>
   153f0:	cmp	r0, #0
   153f4:	bne	153bc <flatcc_builder_create_cached_vtable@@Base+0x150>
   153f8:	ldr	r2, [r4, #4]
   153fc:	ldr	r3, [r8, #152]	; 0x98
   15400:	cmp	r2, r3
   15404:	addne	r9, r4, #12
   15408:	ldrne	r5, [r4, #12]
   1540c:	strne	r4, [sp, #12]
   15410:	bne	153c4 <flatcc_builder_create_cached_vtable@@Base+0x158>
   15414:	ldr	r3, [sp, #20]
   15418:	cmp	r3, r9
   1541c:	beq	15438 <flatcc_builder_create_cached_vtable@@Base+0x1cc>
   15420:	ldr	r3, [r4, #12]
   15424:	str	r3, [r9]
   15428:	ldr	r2, [sp, #16]
   1542c:	ldr	r3, [r2, fp, lsl #2]
   15430:	str	r3, [r4, #12]
   15434:	str	r5, [r2, fp, lsl #2]
   15438:	ldr	r0, [r4]
   1543c:	add	sp, sp, #28
   15440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15444:	mov	r3, #0
   15448:	str	r3, [sp, #12]
   1544c:	ldr	r4, [r8, #124]	; 0x7c
   15450:	add	r2, r4, #16
   15454:	ldr	r3, [r8, #104]	; 0x68
   15458:	cmp	r2, r3
   1545c:	bhi	154c8 <flatcc_builder_create_cached_vtable@@Base+0x25c>
   15460:	ldr	r5, [r8, #100]	; 0x64
   15464:	adds	r6, r5, r4
   15468:	beq	155ac <flatcc_builder_create_cached_vtable@@Base+0x340>
   1546c:	ldr	r3, [r8, #124]	; 0x7c
   15470:	add	r2, r3, #16
   15474:	str	r2, [r8, #124]	; 0x7c
   15478:	ldr	r2, [r8, #152]	; 0x98
   1547c:	str	r2, [r6, #4]
   15480:	ldr	r1, [sp, #16]
   15484:	ldr	r2, [r1, fp, lsl #2]
   15488:	str	r2, [r6, #12]
   1548c:	str	r3, [r1, fp, lsl #2]
   15490:	mov	r2, r7
   15494:	ldr	r1, [sp, #8]
   15498:	mov	r0, r8
   1549c:	bl	150f8 <flatcc_builder_create_vtable@@Base>
   154a0:	str	r0, [r5, r4]
   154a4:	cmp	r0, #0
   154a8:	beq	155b4 <flatcc_builder_create_cached_vtable@@Base+0x348>
   154ac:	ldr	r3, [sp, #12]
   154b0:	cmp	r3, #0
   154b4:	beq	15500 <flatcc_builder_create_cached_vtable@@Base+0x294>
   154b8:	ldr	r3, [r3, #8]
   154bc:	str	r3, [r6, #8]
   154c0:	ldr	r0, [r5, r4]
   154c4:	b	1543c <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   154c8:	mov	r3, #6
   154cc:	str	r3, [sp]
   154d0:	ldr	r5, [r8, #48]	; 0x30
   154d4:	mov	r3, #0
   154d8:	add	r1, r8, #100	; 0x64
   154dc:	ldr	r0, [r8, #40]	; 0x28
   154e0:	blx	r5
   154e4:	cmp	r0, #0
   154e8:	beq	15460 <flatcc_builder_create_cached_vtable@@Base+0x1f4>
   154ec:	ldr	r3, [pc, #232]	; 155dc <flatcc_builder_create_cached_vtable@@Base+0x370>
   154f0:	mov	r2, #308	; 0x134
   154f4:	ldr	r1, [pc, #216]	; 155d4 <flatcc_builder_create_cached_vtable@@Base+0x368>
   154f8:	ldr	r0, [pc, #224]	; 155e0 <flatcc_builder_create_cached_vtable@@Base+0x374>
   154fc:	bl	11ffc <__assert_fail@plt>
   15500:	ldr	r2, [r8, #172]	; 0xac
   15504:	cmp	r2, #0
   15508:	beq	1551c <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   1550c:	ldr	r3, [r8, #120]	; 0x78
   15510:	add	r3, r7, r3
   15514:	cmp	r2, r3
   15518:	bcc	15560 <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   1551c:	ldr	r9, [r8, #120]	; 0x78
   15520:	add	r2, r9, r7
   15524:	ldr	r3, [r8, #72]	; 0x48
   15528:	cmp	r2, r3
   1552c:	bhi	1556c <flatcc_builder_create_cached_vtable@@Base+0x300>
   15530:	ldr	r3, [r8, #68]	; 0x44
   15534:	adds	r0, r3, r9
   15538:	beq	155bc <flatcc_builder_create_cached_vtable@@Base+0x350>
   1553c:	ldr	r3, [r8, #120]	; 0x78
   15540:	str	r3, [r6, #8]
   15544:	ldr	r3, [r8, #120]	; 0x78
   15548:	add	r3, r3, r7
   1554c:	str	r3, [r8, #120]	; 0x78
   15550:	mov	r2, r7
   15554:	ldr	r1, [sp, #8]
   15558:	bl	11f6c <memcpy@plt>
   1555c:	b	154c0 <flatcc_builder_create_cached_vtable@@Base+0x254>
   15560:	mov	r0, r8
   15564:	bl	1372c <flatcc_builder_flush_vtable_cache@@Base>
   15568:	b	154c0 <flatcc_builder_create_cached_vtable@@Base+0x254>
   1556c:	mov	r3, #2
   15570:	str	r3, [sp]
   15574:	ldr	sl, [r8, #48]	; 0x30
   15578:	mov	r3, #0
   1557c:	add	r1, r8, #68	; 0x44
   15580:	ldr	r0, [r8, #40]	; 0x28
   15584:	blx	sl
   15588:	cmp	r0, #0
   1558c:	beq	15530 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   15590:	ldr	r3, [pc, #68]	; 155dc <flatcc_builder_create_cached_vtable@@Base+0x370>
   15594:	mov	r2, #308	; 0x134
   15598:	ldr	r1, [pc, #52]	; 155d4 <flatcc_builder_create_cached_vtable@@Base+0x368>
   1559c:	ldr	r0, [pc, #60]	; 155e0 <flatcc_builder_create_cached_vtable@@Base+0x374>
   155a0:	bl	11ffc <__assert_fail@plt>
   155a4:	mov	r0, #0
   155a8:	b	1543c <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   155ac:	mov	r0, #0
   155b0:	b	1543c <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   155b4:	mov	r0, #0
   155b8:	b	1543c <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   155bc:	mvn	r0, #0
   155c0:	b	1543c <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   155c4:	mov	r0, #0
   155c8:	b	1543c <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   155cc:	ldrdeq	r7, [r1], -r4
   155d0:	andeq	r0, r0, r6, asr r1
   155d4:	muleq	r1, r4, r2
   155d8:	andeq	r8, r1, r8, lsr #10
   155dc:	andeq	r7, r1, r0, ror #26
   155e0:	andeq	r8, r1, r8, ror #5

000155e4 <flatcc_builder_create_table@@Base>:
   155e4:	push	{r4, r5, r6, r7, lr}
   155e8:	sub	sp, sp, #92	; 0x5c
   155ec:	ldr	r4, [sp, #116]	; 0x74
   155f0:	ldr	ip, [sp, #120]	; 0x78
   155f4:	cmp	r4, #0
   155f8:	blt	15738 <flatcc_builder_create_table@@Base+0x154>
   155fc:	mov	r5, r0
   15600:	tst	ip, #1
   15604:	beq	1574c <flatcc_builder_create_table@@Base+0x168>
   15608:	cmp	r3, #4
   1560c:	movcs	r0, r3
   15610:	movcc	r0, #4
   15614:	ldrh	r3, [r5, #128]	; 0x80
   15618:	cmp	r3, r0
   1561c:	strhcc	r0, [r5, #128]	; 0x80
   15620:	ldr	lr, [r5, #136]	; 0x88
   15624:	sub	r7, lr, r2
   15628:	sub	r0, r0, #1
   1562c:	and	r7, r7, r0
   15630:	mvn	r3, #3
   15634:	sub	r3, r3, r2
   15638:	add	r3, r3, lr
   1563c:	sub	r3, r3, r7
   15640:	sub	ip, ip, #1
   15644:	sub	ip, r3, ip
   15648:	str	ip, [sp, #84]	; 0x54
   1564c:	cmp	r4, #0
   15650:	ble	15680 <flatcc_builder_create_table@@Base+0x9c>
   15654:	ldr	ip, [sp, #112]	; 0x70
   15658:	add	r4, ip, r4, lsl #1
   1565c:	mvn	r6, #3
   15660:	sub	r6, r6, r3
   15664:	ldrh	r3, [ip], #2
   15668:	sub	lr, r6, r3
   1566c:	ldr	r0, [r1, r3]
   15670:	add	r0, r0, lr
   15674:	str	r0, [r1, r3]
   15678:	cmp	ip, r4
   1567c:	bne	15664 <flatcc_builder_create_table@@Base+0x80>
   15680:	mov	r3, #4
   15684:	str	r3, [sp, #12]
   15688:	add	r0, sp, #84	; 0x54
   1568c:	str	r0, [sp, #20]
   15690:	str	r3, [sp, #24]
   15694:	mov	r3, #1
   15698:	str	r3, [sp, #16]
   1569c:	cmp	r2, #0
   156a0:	beq	156bc <flatcc_builder_create_table@@Base+0xd8>
   156a4:	add	r3, r2, #4
   156a8:	str	r3, [sp, #12]
   156ac:	str	r1, [sp, #28]
   156b0:	str	r2, [sp, #32]
   156b4:	mov	r3, #2
   156b8:	str	r3, [sp, #16]
   156bc:	cmp	r7, #0
   156c0:	beq	156f0 <flatcc_builder_create_table@@Base+0x10c>
   156c4:	ldr	r3, [sp, #12]
   156c8:	add	r3, r3, r7
   156cc:	str	r3, [sp, #12]
   156d0:	ldr	r3, [sp, #16]
   156d4:	add	r3, r3, #1
   156d8:	add	r2, sp, #88	; 0x58
   156dc:	add	r2, r2, r3, lsl #3
   156e0:	ldr	r1, [pc, #160]	; 15788 <flatcc_builder_create_table@@Base+0x1a4>
   156e4:	str	r1, [r2, #-76]	; 0xffffffb4
   156e8:	str	r7, [r2, #-72]	; 0xffffffb8
   156ec:	str	r3, [sp, #16]
   156f0:	ldr	r2, [r5, #136]	; 0x88
   156f4:	ldr	r3, [sp, #12]
   156f8:	sub	r4, r2, r3
   156fc:	cmp	r2, r4
   15700:	ble	15760 <flatcc_builder_create_table@@Base+0x17c>
   15704:	str	r3, [sp]
   15708:	ldr	r6, [r5, #44]	; 0x2c
   1570c:	mov	r3, r4
   15710:	ldr	r2, [sp, #16]
   15714:	add	r1, sp, #20
   15718:	ldr	r0, [r5, #36]	; 0x24
   1571c:	blx	r6
   15720:	cmp	r0, #0
   15724:	bne	15774 <flatcc_builder_create_table@@Base+0x190>
   15728:	str	r4, [r5, #136]	; 0x88
   1572c:	mov	r0, r4
   15730:	add	sp, sp, #92	; 0x5c
   15734:	pop	{r4, r5, r6, r7, pc}
   15738:	ldr	r3, [pc, #76]	; 1578c <flatcc_builder_create_table@@Base+0x1a8>
   1573c:	ldr	r2, [pc, #76]	; 15790 <flatcc_builder_create_table@@Base+0x1ac>
   15740:	ldr	r1, [pc, #76]	; 15794 <flatcc_builder_create_table@@Base+0x1b0>
   15744:	ldr	r0, [pc, #76]	; 15798 <flatcc_builder_create_table@@Base+0x1b4>
   15748:	bl	11ffc <__assert_fail@plt>
   1574c:	ldr	r3, [pc, #56]	; 1578c <flatcc_builder_create_table@@Base+0x1a8>
   15750:	ldr	r2, [pc, #68]	; 1579c <flatcc_builder_create_table@@Base+0x1b8>
   15754:	ldr	r1, [pc, #56]	; 15794 <flatcc_builder_create_table@@Base+0x1b0>
   15758:	ldr	r0, [pc, #64]	; 157a0 <flatcc_builder_create_table@@Base+0x1bc>
   1575c:	bl	11ffc <__assert_fail@plt>
   15760:	ldr	r3, [pc, #60]	; 157a4 <flatcc_builder_create_table@@Base+0x1c0>
   15764:	ldr	r2, [pc, #60]	; 157a8 <flatcc_builder_create_table@@Base+0x1c4>
   15768:	ldr	r1, [pc, #36]	; 15794 <flatcc_builder_create_table@@Base+0x1b0>
   1576c:	ldr	r0, [pc, #56]	; 157ac <flatcc_builder_create_table@@Base+0x1c8>
   15770:	bl	11ffc <__assert_fail@plt>
   15774:	ldr	r3, [pc, #40]	; 157a4 <flatcc_builder_create_table@@Base+0x1c0>
   15778:	ldr	r2, [pc, #48]	; 157b0 <flatcc_builder_create_table@@Base+0x1cc>
   1577c:	ldr	r1, [pc, #16]	; 15794 <flatcc_builder_create_table@@Base+0x1b0>
   15780:	ldr	r0, [pc, #36]	; 157ac <flatcc_builder_create_table@@Base+0x1c8>
   15784:	bl	11ffc <__assert_fail@plt>
   15788:	andeq	r7, r1, r4, asr #22
   1578c:	andeq	r7, r1, r0, ror #31
   15790:	ldrdeq	r0, [r0], -r5
   15794:	muleq	r1, r4, r2
   15798:	andeq	r8, r1, r8, lsr r5
   1579c:	ldrdeq	r0, [r0], -fp
   157a0:	andeq	r8, r1, ip, asr #10
   157a4:	muleq	r1, r0, sp
   157a8:	andeq	r0, r0, r7, lsl #5
   157ac:	andeq	r8, r1, r8, ror #5
   157b0:	andeq	r0, r0, fp, lsl #5

000157b4 <flatcc_builder_check_required_field@@Base>:
   157b4:	ldr	r3, [r0, #32]
   157b8:	ldrh	r3, [r3, #14]
   157bc:	cmp	r3, #3
   157c0:	bne	157ec <flatcc_builder_check_required_field@@Base+0x38>
   157c4:	ldrh	r3, [r0, #8]
   157c8:	cmp	r3, r1
   157cc:	movls	r0, #0
   157d0:	bls	157e8 <flatcc_builder_check_required_field@@Base+0x34>
   157d4:	ldr	r3, [r0, #4]
   157d8:	lsl	r1, r1, #1
   157dc:	ldrh	r0, [r3, r1]
   157e0:	adds	r0, r0, #0
   157e4:	movne	r0, #1
   157e8:	bx	lr
   157ec:	push	{r4, lr}
   157f0:	ldr	r3, [pc, #12]	; 15804 <flatcc_builder_check_required_field@@Base+0x50>
   157f4:	ldr	r2, [pc, #12]	; 15808 <flatcc_builder_check_required_field@@Base+0x54>
   157f8:	ldr	r1, [pc, #12]	; 1580c <flatcc_builder_check_required_field@@Base+0x58>
   157fc:	ldr	r0, [pc, #12]	; 15810 <flatcc_builder_check_required_field@@Base+0x5c>
   15800:	bl	11ffc <__assert_fail@plt>
   15804:	strdeq	r7, [r1], -ip
   15808:	strdeq	r0, [r0], -r8
   1580c:	muleq	r1, r4, r2
   15810:	andeq	r8, r1, r8, asr r5

00015814 <flatcc_builder_check_union_field@@Base>:
   15814:	ldr	r3, [r0, #32]
   15818:	ldrh	r3, [r3, #14]
   1581c:	cmp	r3, #3
   15820:	bne	1587c <flatcc_builder_check_union_field@@Base+0x68>
   15824:	cmp	r1, #0
   15828:	moveq	r0, #0
   1582c:	beq	158a4 <flatcc_builder_check_union_field@@Base+0x90>
   15830:	ldrh	r3, [r0, #8]
   15834:	cmp	r3, r1
   15838:	movls	r0, #0
   1583c:	bls	158a4 <flatcc_builder_check_union_field@@Base+0x90>
   15840:	ldr	r3, [r0, #4]
   15844:	sub	r1, r1, #-2147483647	; 0x80000001
   15848:	lsl	r1, r1, #1
   1584c:	ldrh	r2, [r3, r1]
   15850:	cmp	r2, #0
   15854:	beq	15894 <flatcc_builder_check_union_field@@Base+0x80>
   15858:	ldr	r0, [r0, #16]
   1585c:	ldrb	r2, [r0, r2]
   15860:	cmp	r2, #0
   15864:	bne	158a8 <flatcc_builder_check_union_field@@Base+0x94>
   15868:	add	r1, r3, r1
   1586c:	ldrh	r0, [r1, #2]
   15870:	clz	r0, r0
   15874:	lsr	r0, r0, #5
   15878:	b	158a4 <flatcc_builder_check_union_field@@Base+0x90>
   1587c:	push	{r4, lr}
   15880:	ldr	r3, [pc, #52]	; 158bc <flatcc_builder_check_union_field@@Base+0xa8>
   15884:	ldr	r2, [pc, #52]	; 158c0 <flatcc_builder_check_union_field@@Base+0xac>
   15888:	ldr	r1, [pc, #52]	; 158c4 <flatcc_builder_check_union_field@@Base+0xb0>
   1588c:	ldr	r0, [pc, #52]	; 158c8 <flatcc_builder_check_union_field@@Base+0xb4>
   15890:	bl	11ffc <__assert_fail@plt>
   15894:	add	r1, r3, r1
   15898:	ldrh	r0, [r1, #2]
   1589c:	clz	r0, r0
   158a0:	lsr	r0, r0, #5
   158a4:	bx	lr
   158a8:	add	r1, r3, r1
   158ac:	ldrh	r0, [r1, #2]
   158b0:	adds	r0, r0, #0
   158b4:	movne	r0, #1
   158b8:	b	158a4 <flatcc_builder_check_union_field@@Base+0x90>
   158bc:	andeq	r8, r1, r0, lsr #32
   158c0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   158c4:	muleq	r1, r4, r2
   158c8:	andeq	r8, r1, r8, asr r5

000158cc <flatcc_builder_check_required@@Base>:
   158cc:	ldr	r3, [r0, #32]
   158d0:	ldrh	r3, [r3, #14]
   158d4:	cmp	r3, #3
   158d8:	bne	15938 <flatcc_builder_check_required@@Base+0x6c>
   158dc:	ldrh	r3, [r0, #8]
   158e0:	cmp	r3, r2
   158e4:	movlt	r0, #0
   158e8:	blt	15954 <flatcc_builder_check_required@@Base+0x88>
   158ec:	cmp	r2, #0
   158f0:	ble	15958 <flatcc_builder_check_required@@Base+0x8c>
   158f4:	ldr	ip, [r0, #4]
   158f8:	ldrh	r3, [r1]
   158fc:	lsl	r3, r3, #1
   15900:	ldrh	r3, [ip, r3]
   15904:	cmp	r3, #0
   15908:	beq	15960 <flatcc_builder_check_required@@Base+0x94>
   1590c:	add	r0, r1, #2
   15910:	add	r2, r1, r2, lsl #1
   15914:	cmp	r0, r2
   15918:	beq	15950 <flatcc_builder_check_required@@Base+0x84>
   1591c:	ldrh	r3, [r0], #2
   15920:	lsl	r3, r3, #1
   15924:	ldrh	r3, [ip, r3]
   15928:	cmp	r3, #0
   1592c:	bne	15914 <flatcc_builder_check_required@@Base+0x48>
   15930:	mov	r0, #0
   15934:	b	15954 <flatcc_builder_check_required@@Base+0x88>
   15938:	push	{r4, lr}
   1593c:	ldr	r3, [pc, #36]	; 15968 <flatcc_builder_check_required@@Base+0x9c>
   15940:	ldr	r2, [pc, #36]	; 1596c <flatcc_builder_check_required@@Base+0xa0>
   15944:	ldr	r1, [pc, #36]	; 15970 <flatcc_builder_check_required@@Base+0xa4>
   15948:	ldr	r0, [pc, #36]	; 15974 <flatcc_builder_check_required@@Base+0xa8>
   1594c:	bl	11ffc <__assert_fail@plt>
   15950:	mov	r0, #1
   15954:	bx	lr
   15958:	mov	r0, #1
   1595c:	b	15954 <flatcc_builder_check_required@@Base+0x88>
   15960:	mov	r0, #0
   15964:	b	15954 <flatcc_builder_check_required@@Base+0x88>
   15968:	andeq	r8, r1, r4, asr #32
   1596c:	andeq	r0, r0, r1, lsl r5
   15970:	muleq	r1, r4, r2
   15974:	andeq	r8, r1, r8, asr r5

00015978 <flatcc_builder_end_table@@Base>:
   15978:	push	{r4, r5, r6, r7, lr}
   1597c:	sub	sp, sp, #20
   15980:	ldr	r3, [r0, #32]
   15984:	ldrh	r3, [r3, #14]
   15988:	cmp	r3, #3
   1598c:	bne	159fc <flatcc_builder_end_table@@Base+0x84>
   15990:	mov	r4, r0
   15994:	ldr	r1, [r0, #4]
   15998:	sub	r6, r1, #4
   1599c:	ldrh	r5, [r0, #8]
   159a0:	add	r5, r5, #2
   159a4:	lsl	r5, r5, #1
   159a8:	uxth	r5, r5
   159ac:	strh	r5, [r1, #-4]
   159b0:	ldr	r3, [r0, #20]
   159b4:	add	r3, r3, #4
   159b8:	uxth	r2, r3
   159bc:	strh	r2, [r1, #-2]
   159c0:	ldr	r3, [r0, #12]
   159c4:	eor	r3, r3, r5
   159c8:	ldr	r1, [pc, #328]	; 15b18 <flatcc_builder_end_table@@Base+0x1a0>
   159cc:	mul	r3, r1, r3
   159d0:	eor	r3, r3, r2
   159d4:	mul	r3, r1, r3
   159d8:	str	r3, [r0, #12]
   159dc:	mov	r2, r5
   159e0:	mov	r1, r6
   159e4:	bl	1526c <flatcc_builder_create_cached_vtable@@Base>
   159e8:	subs	r7, r0, #0
   159ec:	bne	15a10 <flatcc_builder_end_table@@Base+0x98>
   159f0:	mov	r0, r7
   159f4:	add	sp, sp, #20
   159f8:	pop	{r4, r5, r6, r7, pc}
   159fc:	ldr	r3, [pc, #280]	; 15b1c <flatcc_builder_end_table@@Base+0x1a4>
   15a00:	ldr	r2, [pc, #280]	; 15b20 <flatcc_builder_end_table@@Base+0x1a8>
   15a04:	ldr	r1, [pc, #280]	; 15b24 <flatcc_builder_end_table@@Base+0x1ac>
   15a08:	ldr	r0, [pc, #280]	; 15b28 <flatcc_builder_end_table@@Base+0x1b0>
   15a0c:	bl	11ffc <__assert_fail@plt>
   15a10:	mov	r2, r5
   15a14:	mov	r1, #0
   15a18:	mov	r0, r6
   15a1c:	bl	11fd8 <memset@plt>
   15a20:	ldr	r3, [r4, #32]
   15a24:	ldr	r1, [r4, #76]	; 0x4c
   15a28:	ldr	r3, [r3, #20]
   15a2c:	add	r1, r1, r3
   15a30:	ldrh	r3, [r4, #130]	; 0x82
   15a34:	str	r7, [sp, #8]
   15a38:	ldr	r2, [r4]
   15a3c:	sub	r2, r2, r1
   15a40:	asr	r2, r2, #1
   15a44:	str	r2, [sp, #4]
   15a48:	str	r1, [sp]
   15a4c:	ldr	r2, [r4, #20]
   15a50:	ldr	r1, [r4, #16]
   15a54:	mov	r0, r4
   15a58:	bl	155e4 <flatcc_builder_create_table@@Base>
   15a5c:	subs	r7, r0, #0
   15a60:	beq	159f0 <flatcc_builder_end_table@@Base+0x78>
   15a64:	ldr	r3, [r4, #32]
   15a68:	ldr	r2, [r3, #24]
   15a6c:	str	r2, [r4, #12]
   15a70:	ldrh	r2, [r3, #28]
   15a74:	strh	r2, [r4, #8]
   15a78:	ldr	r2, [r4, #52]	; 0x34
   15a7c:	ldr	r1, [r3, #16]
   15a80:	add	r2, r2, r1
   15a84:	str	r2, [r4, #4]
   15a88:	ldr	r2, [r4, #76]	; 0x4c
   15a8c:	ldr	r3, [r3, #20]
   15a90:	add	r3, r2, r3
   15a94:	str	r3, [r4]
   15a98:	ldr	r2, [r4, #20]
   15a9c:	mov	r1, #0
   15aa0:	ldr	r0, [r4, #16]
   15aa4:	bl	11fd8 <memset@plt>
   15aa8:	ldr	r2, [r4, #32]
   15aac:	ldr	r3, [r2, #8]
   15ab0:	str	r3, [r4, #20]
   15ab4:	ldr	r0, [r2]
   15ab8:	str	r0, [r4, #28]
   15abc:	ldr	r1, [r2, #4]
   15ac0:	ldr	r3, [r4, #60]	; 0x3c
   15ac4:	add	r3, r3, r0
   15ac8:	str	r3, [r4, #16]
   15acc:	ldr	r3, [r4, #64]	; 0x40
   15ad0:	sub	r3, r3, r0
   15ad4:	cmp	r3, r1
   15ad8:	movcs	r3, r1
   15adc:	str	r3, [r4, #24]
   15ae0:	str	r1, [r2, #4]
   15ae4:	ldrh	r3, [r4, #130]	; 0x82
   15ae8:	ldrh	r2, [r4, #128]	; 0x80
   15aec:	cmp	r2, r3
   15af0:	strhcc	r3, [r4, #128]	; 0x80
   15af4:	ldr	r3, [r4, #32]
   15af8:	ldrh	r2, [r3, #12]
   15afc:	strh	r2, [r4, #130]	; 0x82
   15b00:	sub	r3, r3, #36	; 0x24
   15b04:	str	r3, [r4, #32]
   15b08:	ldr	r3, [r4, #156]	; 0x9c
   15b0c:	sub	r3, r3, #1
   15b10:	str	r3, [r4, #156]	; 0x9c
   15b14:	b	159f0 <flatcc_builder_end_table@@Base+0x78>
   15b18:			; <UNDEFINED> instruction: 0x9e3779b1
   15b1c:	andeq	r8, r1, r4, rrx
   15b20:	andeq	r0, r0, r5, lsr #10
   15b24:	muleq	r1, r4, r2
   15b28:	andeq	r8, r1, r8, asr r5

00015b2c <flatcc_builder_create_vector@@Base>:
   15b2c:	push	{r4, r5, r6, lr}
   15b30:	sub	sp, sp, #88	; 0x58
   15b34:	mov	r4, r0
   15b38:	ldrh	r0, [sp, #104]	; 0x68
   15b3c:	ldr	ip, [sp, #108]	; 0x6c
   15b40:	cmp	r2, ip
   15b44:	bhi	15c28 <flatcc_builder_create_vector@@Base+0xfc>
   15b48:	cmp	r0, #4
   15b4c:	movcc	r0, #4
   15b50:	ldrh	ip, [r4, #128]	; 0x80
   15b54:	cmp	ip, r0
   15b58:	strhcc	r0, [r4, #128]	; 0x80
   15b5c:	mul	r3, r3, r2
   15b60:	str	r2, [sp, #84]	; 0x54
   15b64:	ldr	r2, [r4, #136]	; 0x88
   15b68:	sub	ip, r2, r3
   15b6c:	sub	r0, r0, #1
   15b70:	and	r0, r0, ip
   15b74:	mov	ip, #4
   15b78:	str	ip, [sp, #12]
   15b7c:	add	lr, sp, #84	; 0x54
   15b80:	str	lr, [sp, #20]
   15b84:	str	ip, [sp, #24]
   15b88:	mov	ip, #1
   15b8c:	str	ip, [sp, #16]
   15b90:	cmp	r3, #0
   15b94:	beq	15bb0 <flatcc_builder_create_vector@@Base+0x84>
   15b98:	add	ip, r3, #4
   15b9c:	str	ip, [sp, #12]
   15ba0:	str	r1, [sp, #28]
   15ba4:	str	r3, [sp, #32]
   15ba8:	mov	r3, #2
   15bac:	str	r3, [sp, #16]
   15bb0:	cmp	r0, #0
   15bb4:	beq	15be4 <flatcc_builder_create_vector@@Base+0xb8>
   15bb8:	ldr	r3, [sp, #12]
   15bbc:	add	r3, r3, r0
   15bc0:	str	r3, [sp, #12]
   15bc4:	ldr	r3, [sp, #16]
   15bc8:	add	r3, r3, #1
   15bcc:	add	r1, sp, #88	; 0x58
   15bd0:	add	r1, r1, r3, lsl #3
   15bd4:	ldr	ip, [pc, #136]	; 15c64 <flatcc_builder_create_vector@@Base+0x138>
   15bd8:	str	ip, [r1, #-76]	; 0xffffffb4
   15bdc:	str	r0, [r1, #-72]	; 0xffffffb8
   15be0:	str	r3, [sp, #16]
   15be4:	ldr	r3, [sp, #12]
   15be8:	sub	r5, r2, r3
   15bec:	cmp	r2, r5
   15bf0:	ble	15c3c <flatcc_builder_create_vector@@Base+0x110>
   15bf4:	str	r3, [sp]
   15bf8:	ldr	r6, [r4, #44]	; 0x2c
   15bfc:	mov	r3, r5
   15c00:	ldr	r2, [sp, #16]
   15c04:	add	r1, sp, #20
   15c08:	ldr	r0, [r4, #36]	; 0x24
   15c0c:	blx	r6
   15c10:	cmp	r0, #0
   15c14:	bne	15c50 <flatcc_builder_create_vector@@Base+0x124>
   15c18:	str	r5, [r4, #136]	; 0x88
   15c1c:	mov	r0, r5
   15c20:	add	sp, sp, #88	; 0x58
   15c24:	pop	{r4, r5, r6, pc}
   15c28:	ldr	r3, [pc, #56]	; 15c68 <flatcc_builder_create_vector@@Base+0x13c>
   15c2c:	ldr	r2, [pc, #56]	; 15c6c <flatcc_builder_create_vector@@Base+0x140>
   15c30:	ldr	r1, [pc, #56]	; 15c70 <flatcc_builder_create_vector@@Base+0x144>
   15c34:	ldr	r0, [pc, #56]	; 15c74 <flatcc_builder_create_vector@@Base+0x148>
   15c38:	bl	11ffc <__assert_fail@plt>
   15c3c:	ldr	r3, [pc, #52]	; 15c78 <flatcc_builder_create_vector@@Base+0x14c>
   15c40:	ldr	r2, [pc, #52]	; 15c7c <flatcc_builder_create_vector@@Base+0x150>
   15c44:	ldr	r1, [pc, #36]	; 15c70 <flatcc_builder_create_vector@@Base+0x144>
   15c48:	ldr	r0, [pc, #48]	; 15c80 <flatcc_builder_create_vector@@Base+0x154>
   15c4c:	bl	11ffc <__assert_fail@plt>
   15c50:	ldr	r3, [pc, #32]	; 15c78 <flatcc_builder_create_vector@@Base+0x14c>
   15c54:	ldr	r2, [pc, #40]	; 15c84 <flatcc_builder_create_vector@@Base+0x158>
   15c58:	ldr	r1, [pc, #16]	; 15c70 <flatcc_builder_create_vector@@Base+0x144>
   15c5c:	ldr	r0, [pc, #28]	; 15c80 <flatcc_builder_create_vector@@Base+0x154>
   15c60:	bl	11ffc <__assert_fail@plt>
   15c64:	andeq	r7, r1, r4, asr #22
   15c68:	andeq	r8, r1, r0, lsl #1
   15c6c:	andeq	r0, r0, r5, asr r5
   15c70:	muleq	r1, r4, r2
   15c74:	andeq	r8, r1, r4, lsl #11
   15c78:	muleq	r1, r0, sp
   15c7c:	andeq	r0, r0, r7, lsl #5
   15c80:	andeq	r8, r1, r8, ror #5
   15c84:	andeq	r0, r0, fp, lsl #5

00015c88 <flatcc_builder_end_vector@@Base>:
   15c88:	push	{r4, r5, lr}
   15c8c:	sub	sp, sp, #12
   15c90:	ldr	r1, [r0, #32]
   15c94:	ldrh	r3, [r1, #14]
   15c98:	cmp	r3, #4
   15c9c:	bne	15cd8 <flatcc_builder_end_vector@@Base+0x50>
   15ca0:	mov	r4, r0
   15ca4:	ldr	r3, [r1, #16]
   15ca8:	ldr	r2, [r1, #20]
   15cac:	ldr	r1, [r1, #24]
   15cb0:	str	r1, [sp, #4]
   15cb4:	ldrh	r1, [r0, #130]	; 0x82
   15cb8:	str	r1, [sp]
   15cbc:	ldr	r1, [r0, #16]
   15cc0:	bl	15b2c <flatcc_builder_create_vector@@Base>
   15cc4:	subs	r5, r0, #0
   15cc8:	bne	15cec <flatcc_builder_end_vector@@Base+0x64>
   15ccc:	mov	r0, r5
   15cd0:	add	sp, sp, #12
   15cd4:	pop	{r4, r5, pc}
   15cd8:	ldr	r3, [pc, #140]	; 15d6c <flatcc_builder_end_vector@@Base+0xe4>
   15cdc:	ldr	r2, [pc, #140]	; 15d70 <flatcc_builder_end_vector@@Base+0xe8>
   15ce0:	ldr	r1, [pc, #140]	; 15d74 <flatcc_builder_end_vector@@Base+0xec>
   15ce4:	ldr	r0, [pc, #140]	; 15d78 <flatcc_builder_end_vector@@Base+0xf0>
   15ce8:	bl	11ffc <__assert_fail@plt>
   15cec:	ldr	r2, [r4, #20]
   15cf0:	mov	r1, #0
   15cf4:	ldr	r0, [r4, #16]
   15cf8:	bl	11fd8 <memset@plt>
   15cfc:	ldr	r2, [r4, #32]
   15d00:	ldr	r3, [r2, #8]
   15d04:	str	r3, [r4, #20]
   15d08:	ldr	r0, [r2]
   15d0c:	str	r0, [r4, #28]
   15d10:	ldr	r1, [r2, #4]
   15d14:	ldr	r3, [r4, #60]	; 0x3c
   15d18:	add	r3, r3, r0
   15d1c:	str	r3, [r4, #16]
   15d20:	ldr	r3, [r4, #64]	; 0x40
   15d24:	sub	r3, r3, r0
   15d28:	cmp	r3, r1
   15d2c:	movcs	r3, r1
   15d30:	str	r3, [r4, #24]
   15d34:	str	r1, [r2, #4]
   15d38:	ldrh	r3, [r4, #130]	; 0x82
   15d3c:	ldrh	r2, [r4, #128]	; 0x80
   15d40:	cmp	r2, r3
   15d44:	strhcc	r3, [r4, #128]	; 0x80
   15d48:	ldr	r3, [r4, #32]
   15d4c:	ldrh	r2, [r3, #12]
   15d50:	strh	r2, [r4, #130]	; 0x82
   15d54:	sub	r3, r3, #36	; 0x24
   15d58:	str	r3, [r4, #32]
   15d5c:	ldr	r3, [r4, #156]	; 0x9c
   15d60:	sub	r3, r3, #1
   15d64:	str	r3, [r4, #156]	; 0x9c
   15d68:	b	15ccc <flatcc_builder_end_vector@@Base+0x44>
   15d6c:	andeq	r8, r1, r0, lsr #1
   15d70:	andeq	r0, r0, r8, ror r5
   15d74:	muleq	r1, r4, r2
   15d78:	andeq	r8, r1, ip, asr #7

00015d7c <flatcc_builder_vector_count@@Base>:
   15d7c:	ldr	r3, [r0, #32]
   15d80:	ldr	r0, [r3, #20]
   15d84:	bx	lr

00015d88 <flatcc_builder_vector_edit@@Base>:
   15d88:	ldr	r0, [r0, #16]
   15d8c:	bx	lr

00015d90 <flatcc_builder_create_offset_vector_direct@@Base>:
   15d90:	push	{r4, lr}
   15d94:	mov	r3, #0
   15d98:	bl	13534 <flatcc_builder_default_alloc@@Base+0x378>
   15d9c:	pop	{r4, pc}

00015da0 <flatcc_builder_end_offset_vector@@Base>:
   15da0:	push	{r4, r5, r6, lr}
   15da4:	ldr	r3, [r0, #32]
   15da8:	ldrh	r2, [r3, #14]
   15dac:	cmp	r2, #5
   15db0:	bne	15dd4 <flatcc_builder_end_offset_vector@@Base+0x34>
   15db4:	mov	r4, r0
   15db8:	ldr	r2, [r3, #20]
   15dbc:	ldr	r1, [r0, #16]
   15dc0:	bl	15d90 <flatcc_builder_create_offset_vector_direct@@Base>
   15dc4:	subs	r5, r0, #0
   15dc8:	bne	15de8 <flatcc_builder_end_offset_vector@@Base+0x48>
   15dcc:	mov	r0, r5
   15dd0:	pop	{r4, r5, r6, pc}
   15dd4:	ldr	r3, [pc, #140]	; 15e68 <flatcc_builder_end_offset_vector@@Base+0xc8>
   15dd8:	ldr	r2, [pc, #140]	; 15e6c <flatcc_builder_end_offset_vector@@Base+0xcc>
   15ddc:	ldr	r1, [pc, #140]	; 15e70 <flatcc_builder_end_offset_vector@@Base+0xd0>
   15de0:	ldr	r0, [pc, #140]	; 15e74 <flatcc_builder_end_offset_vector@@Base+0xd4>
   15de4:	bl	11ffc <__assert_fail@plt>
   15de8:	ldr	r2, [r4, #20]
   15dec:	mov	r1, #0
   15df0:	ldr	r0, [r4, #16]
   15df4:	bl	11fd8 <memset@plt>
   15df8:	ldr	r2, [r4, #32]
   15dfc:	ldr	r3, [r2, #8]
   15e00:	str	r3, [r4, #20]
   15e04:	ldr	r0, [r2]
   15e08:	str	r0, [r4, #28]
   15e0c:	ldr	r1, [r2, #4]
   15e10:	ldr	r3, [r4, #60]	; 0x3c
   15e14:	add	r3, r3, r0
   15e18:	str	r3, [r4, #16]
   15e1c:	ldr	r3, [r4, #64]	; 0x40
   15e20:	sub	r3, r3, r0
   15e24:	cmp	r3, r1
   15e28:	movcs	r3, r1
   15e2c:	str	r3, [r4, #24]
   15e30:	str	r1, [r2, #4]
   15e34:	ldrh	r3, [r4, #130]	; 0x82
   15e38:	ldrh	r2, [r4, #128]	; 0x80
   15e3c:	cmp	r2, r3
   15e40:	strhcc	r3, [r4, #128]	; 0x80
   15e44:	ldr	r3, [r4, #32]
   15e48:	ldrh	r2, [r3, #12]
   15e4c:	strh	r2, [r4, #130]	; 0x82
   15e50:	sub	r3, r3, #36	; 0x24
   15e54:	str	r3, [r4, #32]
   15e58:	ldr	r3, [r4, #156]	; 0x9c
   15e5c:	sub	r3, r3, #1
   15e60:	str	r3, [r4, #156]	; 0x9c
   15e64:	b	15dcc <flatcc_builder_end_offset_vector@@Base+0x2c>
   15e68:	strheq	r8, [r1], -ip
   15e6c:	andeq	r0, r0, r8, asr #11
   15e70:	muleq	r1, r4, r2
   15e74:	andeq	r8, r1, r8, lsr r4

00015e78 <flatcc_builder_create_offset_vector@@Base>:
   15e78:	push	{r4, r5, r6, lr}
   15e7c:	mov	r4, r0
   15e80:	mov	r6, r1
   15e84:	mov	r5, r2
   15e88:	bl	14d04 <flatcc_builder_start_offset_vector@@Base>
   15e8c:	cmp	r0, #0
   15e90:	beq	15e9c <flatcc_builder_create_offset_vector@@Base+0x24>
   15e94:	mov	r0, #0
   15e98:	pop	{r4, r5, r6, pc}
   15e9c:	mov	r1, r5
   15ea0:	mov	r0, r4
   15ea4:	bl	146d4 <flatcc_builder_extend_offset_vector@@Base>
   15ea8:	cmp	r0, #0
   15eac:	beq	15ec8 <flatcc_builder_create_offset_vector@@Base+0x50>
   15eb0:	lsl	r2, r5, #2
   15eb4:	mov	r1, r6
   15eb8:	bl	11f6c <memcpy@plt>
   15ebc:	mov	r0, r4
   15ec0:	bl	15da0 <flatcc_builder_end_offset_vector@@Base>
   15ec4:	pop	{r4, r5, r6, pc}
   15ec8:	mov	r0, #0
   15ecc:	pop	{r4, r5, r6, pc}

00015ed0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   15ed0:	push	{r4, r5, r6, lr}
   15ed4:	mov	r4, r0
   15ed8:	ldr	r2, [r0, #32]
   15edc:	ldrh	r0, [r2, #14]
   15ee0:	cmp	r0, #5
   15ee4:	bne	15f0c <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   15ee8:	mov	r3, r1
   15eec:	ldr	r2, [r2, #20]
   15ef0:	ldr	r1, [r4, #16]
   15ef4:	mov	r0, r4
   15ef8:	bl	13534 <flatcc_builder_default_alloc@@Base+0x378>
   15efc:	subs	r5, r0, #0
   15f00:	bne	15f20 <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   15f04:	mov	r0, r5
   15f08:	pop	{r4, r5, r6, pc}
   15f0c:	ldr	r3, [pc, #140]	; 15fa0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   15f10:	ldr	r2, [pc, #140]	; 15fa4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd4>
   15f14:	ldr	r1, [pc, #140]	; 15fa8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   15f18:	ldr	r0, [pc, #140]	; 15fac <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   15f1c:	bl	11ffc <__assert_fail@plt>
   15f20:	ldr	r2, [r4, #20]
   15f24:	mov	r1, #0
   15f28:	ldr	r0, [r4, #16]
   15f2c:	bl	11fd8 <memset@plt>
   15f30:	ldr	r2, [r4, #32]
   15f34:	ldr	r3, [r2, #8]
   15f38:	str	r3, [r4, #20]
   15f3c:	ldr	r0, [r2]
   15f40:	str	r0, [r4, #28]
   15f44:	ldr	r1, [r2, #4]
   15f48:	ldr	r3, [r4, #60]	; 0x3c
   15f4c:	add	r3, r3, r0
   15f50:	str	r3, [r4, #16]
   15f54:	ldr	r3, [r4, #64]	; 0x40
   15f58:	sub	r3, r3, r0
   15f5c:	cmp	r3, r1
   15f60:	movcs	r3, r1
   15f64:	str	r3, [r4, #24]
   15f68:	str	r1, [r2, #4]
   15f6c:	ldrh	r3, [r4, #130]	; 0x82
   15f70:	ldrh	r2, [r4, #128]	; 0x80
   15f74:	cmp	r2, r3
   15f78:	strhcc	r3, [r4, #128]	; 0x80
   15f7c:	ldr	r3, [r4, #32]
   15f80:	ldrh	r2, [r3, #12]
   15f84:	strh	r2, [r4, #130]	; 0x82
   15f88:	sub	r3, r3, #36	; 0x24
   15f8c:	str	r3, [r4, #32]
   15f90:	ldr	r3, [r4, #156]	; 0x9c
   15f94:	sub	r3, r3, #1
   15f98:	str	r3, [r4, #156]	; 0x9c
   15f9c:	b	15f04 <flatcc_builder_end_offset_vector_for_unions@@Base+0x34>
   15fa0:	andeq	r8, r1, r0, ror #1
   15fa4:	ldrdeq	r0, [r0], -r5
   15fa8:	muleq	r1, r4, r2
   15fac:	andeq	r8, r1, r8, lsr r4

00015fb0 <flatcc_builder_offset_vector_edit@@Base>:
   15fb0:	ldr	r0, [r0, #16]
   15fb4:	bx	lr

00015fb8 <flatcc_builder_offset_vector_count@@Base>:
   15fb8:	ldr	r3, [r0, #32]
   15fbc:	ldr	r0, [r3, #20]
   15fc0:	bx	lr

00015fc4 <flatcc_builder_create_union_vector_direct@@Base>:
   15fc4:	push	{r4, r5, r6, r7, lr}
   15fc8:	sub	sp, sp, #12
   15fcc:	mov	r4, r0
   15fd0:	mov	r5, r1
   15fd4:	mov	r6, r2
   15fd8:	mov	r1, r3
   15fdc:	mov	r3, r2
   15fe0:	ldr	r2, [sp, #32]
   15fe4:	mov	r0, r5
   15fe8:	bl	13534 <flatcc_builder_default_alloc@@Base+0x378>
   15fec:	subs	r7, r0, #0
   15ff0:	bne	1600c <flatcc_builder_create_union_vector_direct@@Base+0x48>
   15ff4:	mov	r3, #0
   15ff8:	str	r3, [r4]
   15ffc:	str	r3, [r4, #4]
   16000:	mov	r0, r4
   16004:	add	sp, sp, #12
   16008:	pop	{r4, r5, r6, r7, pc}
   1600c:	mvn	r3, #0
   16010:	str	r3, [sp, #4]
   16014:	mov	r3, #1
   16018:	str	r3, [sp]
   1601c:	ldr	r2, [sp, #32]
   16020:	mov	r1, r6
   16024:	mov	r0, r5
   16028:	bl	15b2c <flatcc_builder_create_vector@@Base>
   1602c:	cmp	r0, #0
   16030:	moveq	r3, #0
   16034:	streq	r3, [r4]
   16038:	strne	r0, [r4]
   1603c:	str	r7, [r4, #4]
   16040:	b	16000 <flatcc_builder_create_union_vector_direct@@Base+0x3c>

00016044 <flatcc_builder_create_union_vector@@Base>:
   16044:	push	{r4, r5, r6, r7, r8, lr}
   16048:	sub	sp, sp, #16
   1604c:	mov	r5, r0
   16050:	mov	r4, r1
   16054:	mov	r7, r2
   16058:	mov	r6, r3
   1605c:	mov	r0, r1
   16060:	bl	14d04 <flatcc_builder_start_offset_vector@@Base>
   16064:	cmp	r0, #0
   16068:	beq	16084 <flatcc_builder_create_union_vector@@Base+0x40>
   1606c:	mov	r3, #0
   16070:	str	r3, [r5]
   16074:	str	r3, [r5, #4]
   16078:	mov	r0, r5
   1607c:	add	sp, sp, #16
   16080:	pop	{r4, r5, r6, r7, r8, pc}
   16084:	mov	r1, r6
   16088:	mov	r0, r4
   1608c:	bl	146d4 <flatcc_builder_extend_offset_vector@@Base>
   16090:	cmp	r0, #0
   16094:	moveq	r3, #0
   16098:	streq	r3, [r5]
   1609c:	streq	r3, [r5, #4]
   160a0:	beq	16078 <flatcc_builder_create_union_vector@@Base+0x34>
   160a4:	ldr	r8, [r4, #20]
   160a8:	add	r1, r6, r8
   160ac:	str	r1, [r4, #20]
   160b0:	ldr	r3, [r4, #24]
   160b4:	cmp	r1, r3
   160b8:	bcs	1619c <flatcc_builder_create_union_vector@@Base+0x158>
   160bc:	ldr	r3, [r4, #16]
   160c0:	adds	r2, r3, r8
   160c4:	beq	161b4 <flatcc_builder_create_union_vector@@Base+0x170>
   160c8:	cmp	r6, #0
   160cc:	beq	160fc <flatcc_builder_create_union_vector@@Base+0xb8>
   160d0:	mov	r1, r7
   160d4:	sub	ip, r2, #1
   160d8:	sub	r0, r3, #4
   160dc:	add	r7, r7, r6, lsl #3
   160e0:	ldrb	lr, [r1]
   160e4:	strb	lr, [ip, #1]!
   160e8:	ldr	lr, [r1, #4]
   160ec:	str	lr, [r0, #4]!
   160f0:	add	r1, r1, #8
   160f4:	cmp	r1, r7
   160f8:	bne	160e0 <flatcc_builder_create_union_vector@@Base+0x9c>
   160fc:	str	r6, [sp]
   16100:	mov	r1, r4
   16104:	add	r0, sp, #8
   16108:	bl	15fc4 <flatcc_builder_create_union_vector_direct@@Base>
   1610c:	ldr	r7, [sp, #8]
   16110:	ldr	r6, [sp, #12]
   16114:	ldr	r2, [r4, #20]
   16118:	mov	r1, #0
   1611c:	ldr	r0, [r4, #16]
   16120:	bl	11fd8 <memset@plt>
   16124:	ldr	r2, [r4, #32]
   16128:	ldr	r3, [r2, #8]
   1612c:	str	r3, [r4, #20]
   16130:	ldr	r0, [r2]
   16134:	str	r0, [r4, #28]
   16138:	ldr	r1, [r2, #4]
   1613c:	ldr	r3, [r4, #60]	; 0x3c
   16140:	add	r3, r3, r0
   16144:	str	r3, [r4, #16]
   16148:	ldr	r3, [r4, #64]	; 0x40
   1614c:	sub	r3, r3, r0
   16150:	cmp	r3, r1
   16154:	movcs	r3, r1
   16158:	str	r3, [r4, #24]
   1615c:	str	r1, [r2, #4]
   16160:	ldrh	r3, [r4, #130]	; 0x82
   16164:	ldrh	r2, [r4, #128]	; 0x80
   16168:	cmp	r2, r3
   1616c:	strhcc	r3, [r4, #128]	; 0x80
   16170:	ldr	r3, [r4, #32]
   16174:	ldrh	r2, [r3, #12]
   16178:	strh	r2, [r4, #130]	; 0x82
   1617c:	sub	r3, r3, #36	; 0x24
   16180:	str	r3, [r4, #32]
   16184:	ldr	r3, [r4, #156]	; 0x9c
   16188:	sub	r3, r3, #1
   1618c:	str	r3, [r4, #156]	; 0x9c
   16190:	str	r7, [r5]
   16194:	str	r6, [r5, #4]
   16198:	b	16078 <flatcc_builder_create_union_vector@@Base+0x34>
   1619c:	mvn	r2, #3
   161a0:	add	r1, r1, #1
   161a4:	mov	r0, r4
   161a8:	bl	13148 <main@@Base+0x110>
   161ac:	cmp	r0, #0
   161b0:	beq	160bc <flatcc_builder_create_union_vector@@Base+0x78>
   161b4:	mov	r3, #0
   161b8:	str	r3, [r5]
   161bc:	str	r3, [r5, #4]
   161c0:	b	16078 <flatcc_builder_create_union_vector@@Base+0x34>

000161c4 <flatcc_builder_start_union_vector@@Base>:
   161c4:	push	{r4, lr}
   161c8:	mov	r4, r0
   161cc:	mov	r1, #4
   161d0:	bl	133e8 <flatcc_builder_default_alloc@@Base+0x22c>
   161d4:	cmp	r0, #0
   161d8:	bne	16234 <flatcc_builder_start_union_vector@@Base+0x70>
   161dc:	ldr	r3, [r4, #32]
   161e0:	mov	r2, #8
   161e4:	str	r2, [r3, #16]
   161e8:	ldr	r3, [r4, #32]
   161ec:	mov	r2, #0
   161f0:	str	r2, [r3, #20]
   161f4:	ldr	r3, [r4, #32]
   161f8:	mov	r2, #7
   161fc:	strh	r2, [r3, #14]
   16200:	ldr	r1, [r4, #28]
   16204:	ldr	r2, [r4, #60]	; 0x3c
   16208:	add	r2, r2, r1
   1620c:	str	r2, [r4, #16]
   16210:	ldr	r3, [r4, #64]	; 0x40
   16214:	sub	r3, r3, r1
   16218:	cmn	r3, #4
   1621c:	mvnhi	r3, #3
   16220:	str	r3, [r4, #24]
   16224:	ldr	r3, [r4, #32]
   16228:	mvn	r2, #3
   1622c:	str	r2, [r3, #4]
   16230:	pop	{r4, pc}
   16234:	mvn	r0, #0
   16238:	pop	{r4, pc}

0001623c <flatcc_builder_end_union_vector@@Base>:
   1623c:	push	{r4, r5, r6, r7, r8, lr}
   16240:	sub	sp, sp, #16
   16244:	ldr	r3, [r1, #32]
   16248:	ldrh	r2, [r3, #14]
   1624c:	cmp	r2, #7
   16250:	bne	16368 <flatcc_builder_end_union_vector@@Base+0x12c>
   16254:	mov	r6, r0
   16258:	mov	r4, r1
   1625c:	ldr	r5, [r3, #20]
   16260:	ldr	r8, [r1, #20]
   16264:	add	r1, r5, r5, lsl #2
   16268:	add	r1, r1, r8
   1626c:	str	r1, [r4, #20]
   16270:	ldr	r3, [r4, #24]
   16274:	cmp	r1, r3
   16278:	bcs	1637c <flatcc_builder_end_union_vector@@Base+0x140>
   1627c:	ldr	r7, [r4, #16]
   16280:	adds	r3, r7, r8
   16284:	beq	16394 <flatcc_builder_end_union_vector@@Base+0x158>
   16288:	add	r2, r3, r5, lsl #2
   1628c:	cmp	r5, #0
   16290:	beq	162c0 <flatcc_builder_end_union_vector@@Base+0x84>
   16294:	mov	r1, r7
   16298:	sub	ip, r2, #1
   1629c:	sub	r0, r3, #4
   162a0:	add	r7, r7, r5, lsl #3
   162a4:	ldrb	lr, [r1]
   162a8:	strb	lr, [ip, #1]!
   162ac:	ldr	lr, [r1, #4]
   162b0:	str	lr, [r0, #4]!
   162b4:	add	r1, r1, #8
   162b8:	cmp	r1, r7
   162bc:	bne	162a4 <flatcc_builder_end_union_vector@@Base+0x68>
   162c0:	str	r5, [sp]
   162c4:	mov	r1, r4
   162c8:	add	r0, sp, #8
   162cc:	bl	15fc4 <flatcc_builder_create_union_vector_direct@@Base>
   162d0:	ldr	r7, [sp, #8]
   162d4:	ldr	r5, [sp, #12]
   162d8:	ldr	r2, [r4, #20]
   162dc:	mov	r1, #0
   162e0:	ldr	r0, [r4, #16]
   162e4:	bl	11fd8 <memset@plt>
   162e8:	ldr	r2, [r4, #32]
   162ec:	ldr	r3, [r2, #8]
   162f0:	str	r3, [r4, #20]
   162f4:	ldr	r0, [r2]
   162f8:	str	r0, [r4, #28]
   162fc:	ldr	r1, [r2, #4]
   16300:	ldr	r3, [r4, #60]	; 0x3c
   16304:	add	r3, r3, r0
   16308:	str	r3, [r4, #16]
   1630c:	ldr	r3, [r4, #64]	; 0x40
   16310:	sub	r3, r3, r0
   16314:	cmp	r3, r1
   16318:	movcs	r3, r1
   1631c:	str	r3, [r4, #24]
   16320:	str	r1, [r2, #4]
   16324:	ldrh	r3, [r4, #130]	; 0x82
   16328:	ldrh	r2, [r4, #128]	; 0x80
   1632c:	cmp	r2, r3
   16330:	strhcc	r3, [r4, #128]	; 0x80
   16334:	ldr	r3, [r4, #32]
   16338:	ldrh	r2, [r3, #12]
   1633c:	strh	r2, [r4, #130]	; 0x82
   16340:	sub	r3, r3, #36	; 0x24
   16344:	str	r3, [r4, #32]
   16348:	ldr	r3, [r4, #156]	; 0x9c
   1634c:	sub	r3, r3, #1
   16350:	str	r3, [r4, #156]	; 0x9c
   16354:	str	r7, [r6]
   16358:	str	r5, [r6, #4]
   1635c:	mov	r0, r6
   16360:	add	sp, sp, #16
   16364:	pop	{r4, r5, r6, r7, r8, pc}
   16368:	ldr	r3, [pc, #52]	; 163a4 <flatcc_builder_end_union_vector@@Base+0x168>
   1636c:	ldr	r2, [pc, #52]	; 163a8 <flatcc_builder_end_union_vector@@Base+0x16c>
   16370:	ldr	r1, [pc, #52]	; 163ac <flatcc_builder_end_union_vector@@Base+0x170>
   16374:	ldr	r0, [pc, #52]	; 163b0 <flatcc_builder_end_union_vector@@Base+0x174>
   16378:	bl	11ffc <__assert_fail@plt>
   1637c:	mvn	r2, #3
   16380:	add	r1, r1, #1
   16384:	mov	r0, r4
   16388:	bl	13148 <main@@Base+0x110>
   1638c:	cmp	r0, #0
   16390:	beq	1627c <flatcc_builder_end_union_vector@@Base+0x40>
   16394:	mov	r3, #0
   16398:	str	r3, [r6]
   1639c:	str	r3, [r6, #4]
   163a0:	b	1635c <flatcc_builder_end_union_vector@@Base+0x120>
   163a4:	andeq	r8, r1, ip, lsl #2
   163a8:	andeq	r0, r0, r1, asr r6
   163ac:	muleq	r1, r4, r2
   163b0:	muleq	r1, r8, r5

000163b4 <flatcc_builder_union_vector_edit@@Base>:
   163b4:	ldr	r0, [r0, #16]
   163b8:	bx	lr

000163bc <flatcc_builder_union_vector_count@@Base>:
   163bc:	ldr	r3, [r0, #32]
   163c0:	ldr	r0, [r3, #20]
   163c4:	bx	lr

000163c8 <flatcc_builder_extend_union_vector@@Base>:
   163c8:	push	{r4, r5, r6, lr}
   163cc:	mov	r4, r0
   163d0:	ldr	r2, [r0, #32]
   163d4:	ldr	r3, [r2, #20]
   163d8:	adds	r3, r1, r3
   163dc:	movcs	ip, #1
   163e0:	movcc	ip, #0
   163e4:	cmn	r3, #-536870911	; 0xe0000001
   163e8:	movls	r0, #0
   163ec:	movhi	r0, #1
   163f0:	orrs	r0, ip, r0
   163f4:	bne	16420 <flatcc_builder_extend_union_vector@@Base+0x58>
   163f8:	str	r3, [r2, #20]
   163fc:	ldr	r5, [r4, #20]
   16400:	add	r1, r5, r1, lsl #3
   16404:	str	r1, [r4, #20]
   16408:	ldr	r3, [r4, #24]
   1640c:	cmp	r1, r3
   16410:	bcs	16434 <flatcc_builder_extend_union_vector@@Base+0x6c>
   16414:	ldr	r0, [r4, #16]
   16418:	add	r0, r0, r5
   1641c:	pop	{r4, r5, r6, pc}
   16420:	ldr	r3, [pc, #44]	; 16454 <flatcc_builder_extend_union_vector@@Base+0x8c>
   16424:	mov	r2, #892	; 0x37c
   16428:	ldr	r1, [pc, #40]	; 16458 <flatcc_builder_extend_union_vector@@Base+0x90>
   1642c:	ldr	r0, [pc, #40]	; 1645c <flatcc_builder_extend_union_vector@@Base+0x94>
   16430:	bl	11ffc <__assert_fail@plt>
   16434:	mvn	r2, #3
   16438:	add	r1, r1, #1
   1643c:	mov	r0, r4
   16440:	bl	13148 <main@@Base+0x110>
   16444:	cmp	r0, #0
   16448:	beq	16414 <flatcc_builder_extend_union_vector@@Base+0x4c>
   1644c:	mov	r0, #0
   16450:	pop	{r4, r5, r6, pc}
   16454:	andeq	r7, r1, r4, ror lr
   16458:	muleq	r1, r4, r2
   1645c:			; <UNDEFINED> instruction: 0x000183b0

00016460 <flatcc_builder_truncate_union_vector@@Base>:
   16460:	push	{r4, lr}
   16464:	ldr	ip, [r0, #32]
   16468:	ldrh	r3, [ip, #14]
   1646c:	cmp	r3, #7
   16470:	bne	164b8 <flatcc_builder_truncate_union_vector@@Base+0x58>
   16474:	ldr	r3, [ip, #20]
   16478:	cmp	r3, r1
   1647c:	bcc	164cc <flatcc_builder_truncate_union_vector@@Base+0x6c>
   16480:	sub	r3, r3, r1
   16484:	str	r3, [ip, #20]
   16488:	ldr	r3, [r0, #32]
   1648c:	ldr	r2, [r3, #16]
   16490:	mul	r2, r2, r1
   16494:	ldr	r3, [r0, #20]
   16498:	sub	r3, r3, r2
   1649c:	str	r3, [r0, #20]
   164a0:	ldr	r0, [r0, #16]
   164a4:	mov	r1, #0
   164a8:	add	r0, r0, r3
   164ac:	bl	11fd8 <memset@plt>
   164b0:	mov	r0, #0
   164b4:	pop	{r4, pc}
   164b8:	ldr	r3, [pc, #32]	; 164e0 <flatcc_builder_truncate_union_vector@@Base+0x80>
   164bc:	ldr	r2, [pc, #32]	; 164e4 <flatcc_builder_truncate_union_vector@@Base+0x84>
   164c0:	ldr	r1, [pc, #32]	; 164e8 <flatcc_builder_truncate_union_vector@@Base+0x88>
   164c4:	ldr	r0, [pc, #32]	; 164ec <flatcc_builder_truncate_union_vector@@Base+0x8c>
   164c8:	bl	11ffc <__assert_fail@plt>
   164cc:	ldr	r3, [pc, #12]	; 164e0 <flatcc_builder_truncate_union_vector@@Base+0x80>
   164d0:	ldr	r2, [pc, #24]	; 164f0 <flatcc_builder_truncate_union_vector@@Base+0x90>
   164d4:	ldr	r1, [pc, #12]	; 164e8 <flatcc_builder_truncate_union_vector@@Base+0x88>
   164d8:	ldr	r0, [pc, #20]	; 164f4 <flatcc_builder_truncate_union_vector@@Base+0x94>
   164dc:	bl	11ffc <__assert_fail@plt>
   164e0:	andeq	r8, r1, ip, lsr #2
   164e4:	andeq	r0, r0, r1, lsl #13
   164e8:	muleq	r1, r4, r2
   164ec:	muleq	r1, r8, r5
   164f0:	andeq	r0, r0, r2, lsl #13
   164f4:			; <UNDEFINED> instruction: 0x000184bc

000164f8 <flatcc_builder_union_vector_push@@Base>:
   164f8:	push	{r4, r5, lr}
   164fc:	sub	sp, sp, #12
   16500:	add	r3, sp, #8
   16504:	stmdb	r3, {r1, r2}
   16508:	ldr	r2, [r0, #32]
   1650c:	ldrh	r3, [r2, #14]
   16510:	cmp	r3, #7
   16514:	bne	1656c <flatcc_builder_union_vector_push@@Base+0x74>
   16518:	mov	r4, r0
   1651c:	ldr	r3, [r2, #20]
   16520:	cmn	r3, #-536870911	; 0xe0000001
   16524:	beq	1659c <flatcc_builder_union_vector_push@@Base+0xa4>
   16528:	add	r3, r3, #1
   1652c:	str	r3, [r2, #20]
   16530:	ldr	r5, [r0, #20]
   16534:	add	r3, r5, #8
   16538:	str	r3, [r0, #20]
   1653c:	ldr	r2, [r0, #24]
   16540:	cmp	r3, r2
   16544:	bcs	16580 <flatcc_builder_union_vector_push@@Base+0x88>
   16548:	ldr	r3, [r4, #16]
   1654c:	adds	r3, r3, r5
   16550:	moveq	r0, r3
   16554:	addne	r2, sp, #8
   16558:	ldmdbne	r2, {r0, r1}
   1655c:	stmne	r3, {r0, r1}
   16560:	movne	r0, r3
   16564:	add	sp, sp, #12
   16568:	pop	{r4, r5, pc}
   1656c:	ldr	r3, [pc, #48]	; 165a4 <flatcc_builder_union_vector_push@@Base+0xac>
   16570:	ldr	r2, [pc, #48]	; 165a8 <flatcc_builder_union_vector_push@@Base+0xb0>
   16574:	ldr	r1, [pc, #48]	; 165ac <flatcc_builder_union_vector_push@@Base+0xb4>
   16578:	ldr	r0, [pc, #48]	; 165b0 <flatcc_builder_union_vector_push@@Base+0xb8>
   1657c:	bl	11ffc <__assert_fail@plt>
   16580:	mvn	r2, #3
   16584:	add	r1, r5, #9
   16588:	bl	13148 <main@@Base+0x110>
   1658c:	cmp	r0, #0
   16590:	beq	16548 <flatcc_builder_union_vector_push@@Base+0x50>
   16594:	mov	r0, #0
   16598:	b	16564 <flatcc_builder_union_vector_push@@Base+0x6c>
   1659c:	mov	r0, #0
   165a0:	b	16564 <flatcc_builder_union_vector_push@@Base+0x6c>
   165a4:	andeq	r8, r1, r4, asr r1
   165a8:	andeq	r0, r0, sp, lsl #13
   165ac:	muleq	r1, r4, r2
   165b0:	muleq	r1, r8, r5

000165b4 <flatcc_builder_append_union_vector@@Base>:
   165b4:	push	{r4, r5, r6, r7, r8, lr}
   165b8:	mov	r6, r1
   165bc:	ldr	r1, [r0, #32]
   165c0:	ldrh	r3, [r1, #14]
   165c4:	cmp	r3, #7
   165c8:	bne	16638 <flatcc_builder_append_union_vector@@Base+0x84>
   165cc:	mov	r5, r0
   165d0:	ldr	r3, [r1, #20]
   165d4:	adds	r3, r2, r3
   165d8:	movcs	ip, #1
   165dc:	movcc	ip, #0
   165e0:	cmn	r3, #-536870911	; 0xe0000001
   165e4:	movls	r0, #0
   165e8:	movhi	r0, #1
   165ec:	orrs	r0, ip, r0
   165f0:	bne	1664c <flatcc_builder_append_union_vector@@Base+0x98>
   165f4:	str	r3, [r1, #20]
   165f8:	lsl	r4, r2, #3
   165fc:	ldr	r7, [r5, #20]
   16600:	add	r1, r4, r7
   16604:	str	r1, [r5, #20]
   16608:	ldr	r3, [r5, #24]
   1660c:	cmp	r1, r3
   16610:	bcs	16660 <flatcc_builder_append_union_vector@@Base+0xac>
   16614:	ldr	r5, [r5, #16]
   16618:	adds	r5, r5, r7
   1661c:	beq	16630 <flatcc_builder_append_union_vector@@Base+0x7c>
   16620:	mov	r2, r4
   16624:	mov	r1, r6
   16628:	mov	r0, r5
   1662c:	bl	11f6c <memcpy@plt>
   16630:	mov	r0, r5
   16634:	pop	{r4, r5, r6, r7, r8, pc}
   16638:	ldr	r3, [pc, #64]	; 16680 <flatcc_builder_append_union_vector@@Base+0xcc>
   1663c:	ldr	r2, [pc, #64]	; 16684 <flatcc_builder_append_union_vector@@Base+0xd0>
   16640:	ldr	r1, [pc, #64]	; 16688 <flatcc_builder_append_union_vector@@Base+0xd4>
   16644:	ldr	r0, [pc, #64]	; 1668c <flatcc_builder_append_union_vector@@Base+0xd8>
   16648:	bl	11ffc <__assert_fail@plt>
   1664c:	ldr	r3, [pc, #60]	; 16690 <flatcc_builder_append_union_vector@@Base+0xdc>
   16650:	mov	r2, #892	; 0x37c
   16654:	ldr	r1, [pc, #44]	; 16688 <flatcc_builder_append_union_vector@@Base+0xd4>
   16658:	ldr	r0, [pc, #52]	; 16694 <flatcc_builder_append_union_vector@@Base+0xe0>
   1665c:	bl	11ffc <__assert_fail@plt>
   16660:	mvn	r2, #3
   16664:	add	r1, r1, #1
   16668:	mov	r0, r5
   1666c:	bl	13148 <main@@Base+0x110>
   16670:	cmp	r0, #0
   16674:	beq	16614 <flatcc_builder_append_union_vector@@Base+0x60>
   16678:	mov	r5, #0
   1667c:	b	16630 <flatcc_builder_append_union_vector@@Base+0x7c>
   16680:	andeq	r8, r1, r8, ror r1
   16684:	muleq	r0, ip, r6
   16688:	muleq	r1, r4, r2
   1668c:	muleq	r1, r8, r5
   16690:	andeq	r7, r1, r4, ror lr
   16694:			; <UNDEFINED> instruction: 0x000183b0

00016698 <flatcc_builder_create_string@@Base>:
   16698:	push	{r4, r5, r6, lr}
   1669c:	sub	sp, sp, #88	; 0x58
   166a0:	mov	r5, r0
   166a4:	str	r2, [sp, #84]	; 0x54
   166a8:	ldr	r0, [r0, #136]	; 0x88
   166ac:	sub	r3, r0, r2
   166b0:	sub	r3, r3, #1
   166b4:	and	r3, r3, #3
   166b8:	add	r3, r3, #1
   166bc:	mov	ip, #4
   166c0:	str	ip, [sp, #12]
   166c4:	add	lr, sp, #84	; 0x54
   166c8:	str	lr, [sp, #20]
   166cc:	str	ip, [sp, #24]
   166d0:	mov	ip, #1
   166d4:	str	ip, [sp, #16]
   166d8:	cmp	r2, #0
   166dc:	beq	166f8 <flatcc_builder_create_string@@Base+0x60>
   166e0:	add	ip, r2, #4
   166e4:	str	ip, [sp, #12]
   166e8:	str	r1, [sp, #28]
   166ec:	str	r2, [sp, #32]
   166f0:	mov	r2, #2
   166f4:	str	r2, [sp, #16]
   166f8:	cmp	r3, #0
   166fc:	beq	1672c <flatcc_builder_create_string@@Base+0x94>
   16700:	ldr	r2, [sp, #12]
   16704:	add	r2, r2, r3
   16708:	str	r2, [sp, #12]
   1670c:	ldr	r2, [sp, #16]
   16710:	add	r2, r2, #1
   16714:	add	r1, sp, #88	; 0x58
   16718:	add	r1, r1, r2, lsl #3
   1671c:	ldr	ip, [pc, #116]	; 16798 <flatcc_builder_create_string@@Base+0x100>
   16720:	str	ip, [r1, #-76]	; 0xffffffb4
   16724:	str	r3, [r1, #-72]	; 0xffffffb8
   16728:	str	r2, [sp, #16]
   1672c:	ldr	r3, [sp, #12]
   16730:	sub	r4, r0, r3
   16734:	cmp	r0, r4
   16738:	ble	16770 <flatcc_builder_create_string@@Base+0xd8>
   1673c:	str	r3, [sp]
   16740:	ldr	r6, [r5, #44]	; 0x2c
   16744:	mov	r3, r4
   16748:	ldr	r2, [sp, #16]
   1674c:	add	r1, sp, #20
   16750:	ldr	r0, [r5, #36]	; 0x24
   16754:	blx	r6
   16758:	cmp	r0, #0
   1675c:	bne	16784 <flatcc_builder_create_string@@Base+0xec>
   16760:	str	r4, [r5, #136]	; 0x88
   16764:	mov	r0, r4
   16768:	add	sp, sp, #88	; 0x58
   1676c:	pop	{r4, r5, r6, pc}
   16770:	ldr	r3, [pc, #36]	; 1679c <flatcc_builder_create_string@@Base+0x104>
   16774:	ldr	r2, [pc, #36]	; 167a0 <flatcc_builder_create_string@@Base+0x108>
   16778:	ldr	r1, [pc, #36]	; 167a4 <flatcc_builder_create_string@@Base+0x10c>
   1677c:	ldr	r0, [pc, #36]	; 167a8 <flatcc_builder_create_string@@Base+0x110>
   16780:	bl	11ffc <__assert_fail@plt>
   16784:	ldr	r3, [pc, #16]	; 1679c <flatcc_builder_create_string@@Base+0x104>
   16788:	ldr	r2, [pc, #28]	; 167ac <flatcc_builder_create_string@@Base+0x114>
   1678c:	ldr	r1, [pc, #16]	; 167a4 <flatcc_builder_create_string@@Base+0x10c>
   16790:	ldr	r0, [pc, #16]	; 167a8 <flatcc_builder_create_string@@Base+0x110>
   16794:	bl	11ffc <__assert_fail@plt>
   16798:	andeq	r7, r1, r4, asr #22
   1679c:	muleq	r1, r0, sp
   167a0:	andeq	r0, r0, r7, lsl #5
   167a4:	muleq	r1, r4, r2
   167a8:	andeq	r8, r1, r8, ror #5
   167ac:	andeq	r0, r0, fp, lsl #5

000167b0 <flatcc_builder_create_string_str@@Base>:
   167b0:	push	{r4, r5, r6, lr}
   167b4:	mov	r5, r0
   167b8:	mov	r4, r1
   167bc:	mov	r0, r1
   167c0:	bl	11fc0 <strlen@plt>
   167c4:	mov	r2, r0
   167c8:	mov	r1, r4
   167cc:	mov	r0, r5
   167d0:	bl	16698 <flatcc_builder_create_string@@Base>
   167d4:	pop	{r4, r5, r6, pc}

000167d8 <flatcc_builder_create_string_strn@@Base>:
   167d8:	push	{r4, r5, r6, lr}
   167dc:	mov	r6, r0
   167e0:	mov	r4, r1
   167e4:	mov	r5, r2
   167e8:	mov	r1, #0
   167ec:	mov	r0, r4
   167f0:	bl	11fe4 <memchr@plt>
   167f4:	cmp	r0, #0
   167f8:	subne	r5, r0, r4
   167fc:	mov	r2, r5
   16800:	mov	r1, r4
   16804:	mov	r0, r6
   16808:	bl	16698 <flatcc_builder_create_string@@Base>
   1680c:	pop	{r4, r5, r6, pc}

00016810 <flatcc_builder_end_string@@Base>:
   16810:	push	{r4, r5, r6, lr}
   16814:	ldr	r3, [r0, #32]
   16818:	ldrh	r2, [r3, #14]
   1681c:	cmp	r2, #6
   16820:	bne	16850 <flatcc_builder_end_string@@Base+0x40>
   16824:	mov	r4, r0
   16828:	ldr	r2, [r3, #20]
   1682c:	ldr	r3, [r0, #20]
   16830:	cmp	r2, r3
   16834:	bne	16864 <flatcc_builder_end_string@@Base+0x54>
   16838:	ldr	r1, [r0, #16]
   1683c:	bl	16698 <flatcc_builder_create_string@@Base>
   16840:	subs	r5, r0, #0
   16844:	bne	16878 <flatcc_builder_end_string@@Base+0x68>
   16848:	mov	r0, r5
   1684c:	pop	{r4, r5, r6, pc}
   16850:	ldr	r3, [pc, #160]	; 168f8 <flatcc_builder_end_string@@Base+0xe8>
   16854:	ldr	r2, [pc, #160]	; 168fc <flatcc_builder_end_string@@Base+0xec>
   16858:	ldr	r1, [pc, #160]	; 16900 <flatcc_builder_end_string@@Base+0xf0>
   1685c:	ldr	r0, [pc, #160]	; 16904 <flatcc_builder_end_string@@Base+0xf4>
   16860:	bl	11ffc <__assert_fail@plt>
   16864:	ldr	r3, [pc, #140]	; 168f8 <flatcc_builder_end_string@@Base+0xe8>
   16868:	ldr	r2, [pc, #152]	; 16908 <flatcc_builder_end_string@@Base+0xf8>
   1686c:	ldr	r1, [pc, #140]	; 16900 <flatcc_builder_end_string@@Base+0xf0>
   16870:	ldr	r0, [pc, #148]	; 1690c <flatcc_builder_end_string@@Base+0xfc>
   16874:	bl	11ffc <__assert_fail@plt>
   16878:	ldr	r2, [r4, #20]
   1687c:	mov	r1, #0
   16880:	ldr	r0, [r4, #16]
   16884:	bl	11fd8 <memset@plt>
   16888:	ldr	r2, [r4, #32]
   1688c:	ldr	r3, [r2, #8]
   16890:	str	r3, [r4, #20]
   16894:	ldr	r0, [r2]
   16898:	str	r0, [r4, #28]
   1689c:	ldr	r1, [r2, #4]
   168a0:	ldr	r3, [r4, #60]	; 0x3c
   168a4:	add	r3, r3, r0
   168a8:	str	r3, [r4, #16]
   168ac:	ldr	r3, [r4, #64]	; 0x40
   168b0:	sub	r3, r3, r0
   168b4:	cmp	r3, r1
   168b8:	movcs	r3, r1
   168bc:	str	r3, [r4, #24]
   168c0:	str	r1, [r2, #4]
   168c4:	ldrh	r3, [r4, #130]	; 0x82
   168c8:	ldrh	r2, [r4, #128]	; 0x80
   168cc:	cmp	r2, r3
   168d0:	strhcc	r3, [r4, #128]	; 0x80
   168d4:	ldr	r3, [r4, #32]
   168d8:	ldrh	r2, [r3, #12]
   168dc:	strh	r2, [r4, #130]	; 0x82
   168e0:	sub	r3, r3, #36	; 0x24
   168e4:	str	r3, [r4, #32]
   168e8:	ldr	r3, [r4, #156]	; 0x9c
   168ec:	sub	r3, r3, #1
   168f0:	str	r3, [r4, #156]	; 0x9c
   168f4:	b	16848 <flatcc_builder_end_string@@Base+0x38>
   168f8:	muleq	r1, ip, r1
   168fc:	andeq	r0, r0, r4, asr #13
   16900:	muleq	r1, r4, r2
   16904:	andeq	r8, r1, ip, ror #8
   16908:	andeq	r0, r0, r5, asr #13
   1690c:	andeq	r8, r1, ip, asr #11

00016910 <flatcc_builder_string_edit@@Base>:
   16910:	ldr	r0, [r0, #16]
   16914:	bx	lr

00016918 <flatcc_builder_string_len@@Base>:
   16918:	ldr	r3, [r0, #32]
   1691c:	ldr	r0, [r3, #20]
   16920:	bx	lr

00016924 <flatcc_builder_table_add@@Base>:
   16924:	push	{r4, r5, r6, r7, r8, lr}
   16928:	mov	r5, r1
   1692c:	ldr	r1, [r0, #32]
   16930:	ldrh	r1, [r1, #14]
   16934:	cmp	r1, #3
   16938:	bne	169e4 <flatcc_builder_table_add@@Base+0xc0>
   1693c:	mov	r4, r0
   16940:	ldr	r1, [pc, #248]	; 16a40 <flatcc_builder_table_add@@Base+0x11c>
   16944:	cmp	r5, r1
   16948:	bhi	169f8 <flatcc_builder_table_add@@Base+0xd4>
   1694c:	ldrh	r1, [r0, #130]	; 0x82
   16950:	cmp	r1, r3
   16954:	strhcc	r3, [r0, #130]	; 0x82
   16958:	ldr	r0, [r0, #4]
   1695c:	lsl	r1, r5, #1
   16960:	ldrh	r1, [r0, r1]
   16964:	cmp	r1, #0
   16968:	bne	16a0c <flatcc_builder_table_add@@Base+0xe8>
   1696c:	ldr	r0, [r4, #12]
   16970:	eor	r0, r0, r5
   16974:	ldr	r1, [pc, #200]	; 16a44 <flatcc_builder_table_add@@Base+0x120>
   16978:	mul	r0, r1, r0
   1697c:	eor	r0, r0, r2
   16980:	mul	r0, r1, r0
   16984:	str	r0, [r4, #12]
   16988:	uxth	r7, r5
   1698c:	sub	r6, r3, #1
   16990:	ldr	r0, [r4, #20]
   16994:	add	r6, r6, r0
   16998:	rsb	r3, r3, #0
   1699c:	and	r6, r6, r3
   169a0:	add	r1, r2, r6
   169a4:	str	r1, [r4, #20]
   169a8:	ldr	r3, [r4, #24]
   169ac:	cmp	r1, r3
   169b0:	bcs	16a20 <flatcc_builder_table_add@@Base+0xfc>
   169b4:	uxth	r5, r5
   169b8:	ldr	r3, [r4, #4]
   169bc:	lsl	r5, r5, #1
   169c0:	add	r2, r6, #4
   169c4:	strh	r2, [r3, r5]
   169c8:	ldrh	r3, [r4, #8]
   169cc:	cmp	r3, r7
   169d0:	addls	r7, r7, #1
   169d4:	strhls	r7, [r4, #8]
   169d8:	ldr	r0, [r4, #16]
   169dc:	add	r0, r0, r6
   169e0:	pop	{r4, r5, r6, r7, r8, pc}
   169e4:	ldr	r3, [pc, #92]	; 16a48 <flatcc_builder_table_add@@Base+0x124>
   169e8:	ldr	r2, [pc, #92]	; 16a4c <flatcc_builder_table_add@@Base+0x128>
   169ec:	ldr	r1, [pc, #92]	; 16a50 <flatcc_builder_table_add@@Base+0x12c>
   169f0:	ldr	r0, [pc, #92]	; 16a54 <flatcc_builder_table_add@@Base+0x130>
   169f4:	bl	11ffc <__assert_fail@plt>
   169f8:	ldr	r3, [pc, #72]	; 16a48 <flatcc_builder_table_add@@Base+0x124>
   169fc:	ldr	r2, [pc, #84]	; 16a58 <flatcc_builder_table_add@@Base+0x134>
   16a00:	ldr	r1, [pc, #72]	; 16a50 <flatcc_builder_table_add@@Base+0x12c>
   16a04:	ldr	r0, [pc, #80]	; 16a5c <flatcc_builder_table_add@@Base+0x138>
   16a08:	bl	11ffc <__assert_fail@plt>
   16a0c:	ldr	r3, [pc, #52]	; 16a48 <flatcc_builder_table_add@@Base+0x124>
   16a10:	ldr	r2, [pc, #72]	; 16a60 <flatcc_builder_table_add@@Base+0x13c>
   16a14:	ldr	r1, [pc, #52]	; 16a50 <flatcc_builder_table_add@@Base+0x12c>
   16a18:	ldr	r0, [pc, #68]	; 16a64 <flatcc_builder_table_add@@Base+0x140>
   16a1c:	bl	11ffc <__assert_fail@plt>
   16a20:	ldr	r2, [pc, #64]	; 16a68 <flatcc_builder_table_add@@Base+0x144>
   16a24:	add	r1, r1, #1
   16a28:	mov	r0, r4
   16a2c:	bl	13148 <main@@Base+0x110>
   16a30:	cmp	r0, #0
   16a34:	beq	169b4 <flatcc_builder_table_add@@Base+0x90>
   16a38:	mov	r0, #0
   16a3c:	pop	{r4, r5, r6, r7, r8, pc}
   16a40:	strdeq	r7, [r0], -ip
   16a44:			; <UNDEFINED> instruction: 0x9e3779b1
   16a48:			; <UNDEFINED> instruction: 0x000181b8
   16a4c:	andeq	r0, r0, sp, ror #13
   16a50:	muleq	r1, r4, r2
   16a54:	andeq	r8, r1, r8, asr r5
   16a58:	andeq	r0, r0, lr, ror #13
   16a5c:	strdeq	r8, [r1], -r0
   16a60:	strdeq	r0, [r0], -r8
   16a64:	andeq	r8, r1, r8, ror #5
   16a68:	strdeq	pc, [r0], -ip

00016a6c <flatcc_builder_table_edit@@Base>:
   16a6c:	ldr	r3, [r0, #32]
   16a70:	ldrh	r3, [r3, #14]
   16a74:	cmp	r3, #3
   16a78:	bne	16a90 <flatcc_builder_table_edit@@Base+0x24>
   16a7c:	ldr	r3, [r0, #20]
   16a80:	sub	r1, r3, r1
   16a84:	ldr	r0, [r0, #16]
   16a88:	add	r0, r0, r1
   16a8c:	bx	lr
   16a90:	push	{r4, lr}
   16a94:	ldr	r3, [pc, #12]	; 16aa8 <flatcc_builder_table_edit@@Base+0x3c>
   16a98:	ldr	r2, [pc, #12]	; 16aac <flatcc_builder_table_edit@@Base+0x40>
   16a9c:	ldr	r1, [pc, #12]	; 16ab0 <flatcc_builder_table_edit@@Base+0x44>
   16aa0:	ldr	r0, [pc, #12]	; 16ab4 <flatcc_builder_table_edit@@Base+0x48>
   16aa4:	bl	11ffc <__assert_fail@plt>
   16aa8:	ldrdeq	r8, [r1], -r4
   16aac:	andeq	r0, r0, r2, lsl #14
   16ab0:	muleq	r1, r4, r2
   16ab4:	andeq	r8, r1, r8, asr r5

00016ab8 <flatcc_builder_table_add_copy@@Base>:
   16ab8:	push	{r4, r5, r6, lr}
   16abc:	mov	r6, r2
   16ac0:	mov	r5, r3
   16ac4:	ldrh	r3, [sp, #16]
   16ac8:	mov	r2, r5
   16acc:	bl	16924 <flatcc_builder_table_add@@Base>
   16ad0:	subs	r4, r0, #0
   16ad4:	beq	16ae8 <flatcc_builder_table_add_copy@@Base+0x30>
   16ad8:	mov	r2, r5
   16adc:	mov	r1, r6
   16ae0:	mov	r0, r4
   16ae4:	bl	11f6c <memcpy@plt>
   16ae8:	mov	r0, r4
   16aec:	pop	{r4, r5, r6, pc}

00016af0 <flatcc_builder_table_add_offset@@Base>:
   16af0:	push	{r4, r5, r6, r7, r8, lr}
   16af4:	ldr	r3, [r0, #32]
   16af8:	ldrh	r3, [r3, #14]
   16afc:	cmp	r3, #3
   16b00:	bne	16bb0 <flatcc_builder_table_add_offset@@Base+0xc0>
   16b04:	mov	r4, r0
   16b08:	mov	r5, r1
   16b0c:	ldr	r3, [pc, #240]	; 16c04 <flatcc_builder_table_add_offset@@Base+0x114>
   16b10:	cmp	r1, r3
   16b14:	bhi	16bc4 <flatcc_builder_table_add_offset@@Base+0xd4>
   16b18:	ldr	r2, [r0, #4]
   16b1c:	lsl	r3, r1, #1
   16b20:	ldrh	r3, [r2, r3]
   16b24:	cmp	r3, #0
   16b28:	bne	16bd8 <flatcc_builder_table_add_offset@@Base+0xe8>
   16b2c:	ldr	r3, [r0, #12]
   16b30:	eor	r3, r3, r1
   16b34:	ldr	r2, [pc, #204]	; 16c08 <flatcc_builder_table_add_offset@@Base+0x118>
   16b38:	mul	r3, r2, r3
   16b3c:	eor	r3, r3, #4
   16b40:	mul	r3, r2, r3
   16b44:	str	r3, [r0, #12]
   16b48:	uxth	r7, r1
   16b4c:	ldr	r6, [r0, #20]
   16b50:	add	r6, r6, #3
   16b54:	bic	r6, r6, #3
   16b58:	add	r1, r6, #4
   16b5c:	str	r1, [r0, #20]
   16b60:	ldr	r3, [r0, #24]
   16b64:	cmp	r1, r3
   16b68:	bhi	16bec <flatcc_builder_table_add_offset@@Base+0xfc>
   16b6c:	uxth	r2, r6
   16b70:	uxth	r5, r5
   16b74:	ldr	r3, [r4, #4]
   16b78:	lsl	r5, r5, #1
   16b7c:	add	r1, r2, #4
   16b80:	strh	r1, [r3, r5]
   16b84:	ldrh	r3, [r4, #8]
   16b88:	cmp	r3, r7
   16b8c:	addls	r7, r7, #1
   16b90:	strhls	r7, [r4, #8]
   16b94:	ldr	r3, [r4]
   16b98:	add	r1, r3, #2
   16b9c:	str	r1, [r4]
   16ba0:	strh	r2, [r3]
   16ba4:	ldr	r0, [r4, #16]
   16ba8:	add	r0, r0, r6
   16bac:	pop	{r4, r5, r6, r7, r8, pc}
   16bb0:	ldr	r3, [pc, #84]	; 16c0c <flatcc_builder_table_add_offset@@Base+0x11c>
   16bb4:	ldr	r2, [pc, #84]	; 16c10 <flatcc_builder_table_add_offset@@Base+0x120>
   16bb8:	ldr	r1, [pc, #84]	; 16c14 <flatcc_builder_table_add_offset@@Base+0x124>
   16bbc:	ldr	r0, [pc, #84]	; 16c18 <flatcc_builder_table_add_offset@@Base+0x128>
   16bc0:	bl	11ffc <__assert_fail@plt>
   16bc4:	ldr	r3, [pc, #64]	; 16c0c <flatcc_builder_table_add_offset@@Base+0x11c>
   16bc8:	ldr	r2, [pc, #76]	; 16c1c <flatcc_builder_table_add_offset@@Base+0x12c>
   16bcc:	ldr	r1, [pc, #64]	; 16c14 <flatcc_builder_table_add_offset@@Base+0x124>
   16bd0:	ldr	r0, [pc, #72]	; 16c20 <flatcc_builder_table_add_offset@@Base+0x130>
   16bd4:	bl	11ffc <__assert_fail@plt>
   16bd8:	ldr	r3, [pc, #44]	; 16c0c <flatcc_builder_table_add_offset@@Base+0x11c>
   16bdc:	ldr	r2, [pc, #64]	; 16c24 <flatcc_builder_table_add_offset@@Base+0x134>
   16be0:	ldr	r1, [pc, #44]	; 16c14 <flatcc_builder_table_add_offset@@Base+0x124>
   16be4:	ldr	r0, [pc, #60]	; 16c28 <flatcc_builder_table_add_offset@@Base+0x138>
   16be8:	bl	11ffc <__assert_fail@plt>
   16bec:	ldr	r2, [pc, #56]	; 16c2c <flatcc_builder_table_add_offset@@Base+0x13c>
   16bf0:	bl	13148 <main@@Base+0x110>
   16bf4:	cmp	r0, #0
   16bf8:	beq	16b6c <flatcc_builder_table_add_offset@@Base+0x7c>
   16bfc:	mov	r0, #0
   16c00:	pop	{r4, r5, r6, r7, r8, pc}
   16c04:	strdeq	r7, [r0], -ip
   16c08:			; <UNDEFINED> instruction: 0x9e3779b1
   16c0c:	strdeq	r8, [r1], -r0
   16c10:	andeq	r0, r0, r3, lsl r7
   16c14:	muleq	r1, r4, r2
   16c18:	andeq	r8, r1, r8, asr r5
   16c1c:	andeq	r0, r0, r4, lsl r7
   16c20:	strdeq	r8, [r1], -r0
   16c24:	andeq	r0, r0, fp, lsl r7
   16c28:	andeq	r8, r1, r8, ror #5
   16c2c:	strdeq	pc, [r0], -ip

00016c30 <flatcc_builder_table_add_union@@Base>:
   16c30:	push	{r4, r5, r6, r7, lr}
   16c34:	sub	sp, sp, #12
   16c38:	mov	r5, r1
   16c3c:	add	r1, sp, #8
   16c40:	stmdb	r1, {r2, r3}
   16c44:	ldr	r3, [r0, #32]
   16c48:	ldrh	r3, [r3, #14]
   16c4c:	cmp	r3, #3
   16c50:	bne	16cc0 <flatcc_builder_table_add_union@@Base+0x90>
   16c54:	mov	r4, r0
   16c58:	ldrb	r7, [sp]
   16c5c:	ldr	r6, [sp, #4]
   16c60:	adds	r3, r6, #0
   16c64:	movne	r3, #1
   16c68:	cmp	r7, #0
   16c6c:	movne	r3, #0
   16c70:	cmp	r3, #0
   16c74:	bne	16cd4 <flatcc_builder_table_add_union@@Base+0xa4>
   16c78:	cmp	r6, #0
   16c7c:	beq	16c94 <flatcc_builder_table_add_union@@Base+0x64>
   16c80:	mov	r1, r5
   16c84:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   16c88:	cmp	r0, #0
   16c8c:	strne	r6, [r0]
   16c90:	beq	16ce8 <flatcc_builder_table_add_union@@Base+0xb8>
   16c94:	mov	r3, #1
   16c98:	mov	r2, r3
   16c9c:	sub	r1, r5, #1
   16ca0:	mov	r0, r4
   16ca4:	bl	16924 <flatcc_builder_table_add@@Base>
   16ca8:	cmp	r0, #0
   16cac:	beq	16cfc <flatcc_builder_table_add_union@@Base+0xcc>
   16cb0:	strb	r7, [r0]
   16cb4:	mov	r0, #0
   16cb8:	add	sp, sp, #12
   16cbc:	pop	{r4, r5, r6, r7, pc}
   16cc0:	ldr	r3, [pc, #72]	; 16d10 <flatcc_builder_table_add_union@@Base+0xe0>
   16cc4:	ldr	r2, [pc, #72]	; 16d14 <flatcc_builder_table_add_union@@Base+0xe4>
   16cc8:	ldr	r1, [pc, #72]	; 16d18 <flatcc_builder_table_add_union@@Base+0xe8>
   16ccc:	ldr	r0, [pc, #72]	; 16d1c <flatcc_builder_table_add_union@@Base+0xec>
   16cd0:	bl	11ffc <__assert_fail@plt>
   16cd4:	ldr	r3, [pc, #52]	; 16d10 <flatcc_builder_table_add_union@@Base+0xe0>
   16cd8:	ldr	r2, [pc, #64]	; 16d20 <flatcc_builder_table_add_union@@Base+0xf0>
   16cdc:	ldr	r1, [pc, #52]	; 16d18 <flatcc_builder_table_add_union@@Base+0xe8>
   16ce0:	ldr	r0, [pc, #60]	; 16d24 <flatcc_builder_table_add_union@@Base+0xf4>
   16ce4:	bl	11ffc <__assert_fail@plt>
   16ce8:	ldr	r3, [pc, #32]	; 16d10 <flatcc_builder_table_add_union@@Base+0xe0>
   16cec:	ldr	r2, [pc, #52]	; 16d28 <flatcc_builder_table_add_union@@Base+0xf8>
   16cf0:	ldr	r1, [pc, #32]	; 16d18 <flatcc_builder_table_add_union@@Base+0xe8>
   16cf4:	ldr	r0, [pc, #48]	; 16d2c <flatcc_builder_table_add_union@@Base+0xfc>
   16cf8:	bl	11ffc <__assert_fail@plt>
   16cfc:	ldr	r3, [pc, #12]	; 16d10 <flatcc_builder_table_add_union@@Base+0xe0>
   16d00:	ldr	r2, [pc, #40]	; 16d30 <flatcc_builder_table_add_union@@Base+0x100>
   16d04:	ldr	r1, [pc, #12]	; 16d18 <flatcc_builder_table_add_union@@Base+0xe8>
   16d08:	ldr	r0, [pc, #36]	; 16d34 <flatcc_builder_table_add_union@@Base+0x104>
   16d0c:	bl	11ffc <__assert_fail@plt>
   16d10:	andeq	r8, r1, r0, lsl r2
   16d14:	andeq	r0, r0, lr, ror #11
   16d18:	muleq	r1, r4, r2
   16d1c:	andeq	r8, r1, r8, asr r5
   16d20:	andeq	r0, r0, pc, ror #11
   16d24:	andeq	r8, r1, r4, lsr r6
   16d28:	strdeq	r0, [r0], -r2
   16d2c:	andeq	r8, r1, r8, asr r6
   16d30:	strdeq	r0, [r0], -r6
   16d34:	andeq	r8, r1, r4, ror #12

00016d38 <flatcc_builder_table_add_union_vector@@Base>:
   16d38:	push	{r4, r5, r6, r7, lr}
   16d3c:	sub	sp, sp, #12
   16d40:	mov	r7, r1
   16d44:	add	r1, sp, #8
   16d48:	stmdb	r1, {r2, r3}
   16d4c:	ldr	r4, [sp]
   16d50:	ldr	r6, [sp, #4]
   16d54:	ldr	r3, [r0, #32]
   16d58:	ldrh	r3, [r3, #14]
   16d5c:	cmp	r3, #3
   16d60:	bne	16d9c <flatcc_builder_table_add_union_vector@@Base+0x64>
   16d64:	mov	r5, r0
   16d68:	clz	r3, r6
   16d6c:	lsr	r3, r3, #5
   16d70:	clz	r2, r4
   16d74:	lsr	r2, r2, #5
   16d78:	cmp	r2, r3
   16d7c:	beq	16dc4 <flatcc_builder_table_add_union_vector@@Base+0x8c>
   16d80:	adds	r4, r4, #0
   16d84:	movne	r4, #1
   16d88:	cmp	r4, r3
   16d8c:	mvnne	r0, #0
   16d90:	beq	16db0 <flatcc_builder_table_add_union_vector@@Base+0x78>
   16d94:	add	sp, sp, #12
   16d98:	pop	{r4, r5, r6, r7, pc}
   16d9c:	ldr	r3, [pc, #136]	; 16e2c <flatcc_builder_table_add_union_vector@@Base+0xf4>
   16da0:	mov	r2, #1536	; 0x600
   16da4:	ldr	r1, [pc, #132]	; 16e30 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   16da8:	ldr	r0, [pc, #132]	; 16e34 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   16dac:	bl	11ffc <__assert_fail@plt>
   16db0:	ldr	r3, [pc, #116]	; 16e2c <flatcc_builder_table_add_union_vector@@Base+0xf4>
   16db4:	ldr	r2, [pc, #124]	; 16e38 <flatcc_builder_table_add_union_vector@@Base+0x100>
   16db8:	ldr	r1, [pc, #112]	; 16e30 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   16dbc:	ldr	r0, [pc, #120]	; 16e3c <flatcc_builder_table_add_union_vector@@Base+0x104>
   16dc0:	bl	11ffc <__assert_fail@plt>
   16dc4:	cmp	r4, #0
   16dc8:	moveq	r0, #0
   16dcc:	beq	16d94 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   16dd0:	sub	r1, r7, #1
   16dd4:	mov	r0, r5
   16dd8:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   16ddc:	cmp	r0, #0
   16de0:	beq	16e18 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   16de4:	str	r4, [r0]
   16de8:	mov	r1, r7
   16dec:	mov	r0, r5
   16df0:	bl	16af0 <flatcc_builder_table_add_offset@@Base>
   16df4:	cmp	r0, #0
   16df8:	strne	r6, [r0]
   16dfc:	movne	r0, #0
   16e00:	bne	16d94 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   16e04:	ldr	r3, [pc, #32]	; 16e2c <flatcc_builder_table_add_union_vector@@Base+0xf4>
   16e08:	ldr	r2, [pc, #48]	; 16e40 <flatcc_builder_table_add_union_vector@@Base+0x108>
   16e0c:	ldr	r1, [pc, #28]	; 16e30 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   16e10:	ldr	r0, [pc, #44]	; 16e44 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   16e14:	bl	11ffc <__assert_fail@plt>
   16e18:	ldr	r3, [pc, #12]	; 16e2c <flatcc_builder_table_add_union_vector@@Base+0xf4>
   16e1c:	ldr	r2, [pc, #36]	; 16e48 <flatcc_builder_table_add_union_vector@@Base+0x110>
   16e20:	ldr	r1, [pc, #8]	; 16e30 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   16e24:	ldr	r0, [pc, #24]	; 16e44 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   16e28:	bl	11ffc <__assert_fail@plt>
   16e2c:	andeq	r8, r1, r0, lsr r2
   16e30:	muleq	r1, r4, r2
   16e34:	andeq	r8, r1, r8, asr r5
   16e38:	andeq	r0, r0, r1, lsl #12
   16e3c:	andeq	r8, r1, r0, ror r6
   16e40:	andeq	r0, r0, r8, lsl #12
   16e44:	andeq	r8, r1, r8, asr r6
   16e48:	andeq	r0, r0, r4, lsl #12

00016e4c <flatcc_builder_push_buffer_alignment@@Base>:
   16e4c:	mov	r3, r0
   16e50:	ldrh	r0, [r0, #128]	; 0x80
   16e54:	mov	r2, #4
   16e58:	strh	r2, [r3, #128]	; 0x80
   16e5c:	bx	lr

00016e60 <flatcc_builder_pop_buffer_alignment@@Base>:
   16e60:	ldrh	r3, [r0, #128]	; 0x80
   16e64:	cmp	r3, r1
   16e68:	strhcc	r1, [r0, #128]	; 0x80
   16e6c:	bx	lr

00016e70 <flatcc_builder_get_buffer_alignment@@Base>:
   16e70:	ldrh	r0, [r0, #128]	; 0x80
   16e74:	bx	lr

00016e78 <flatcc_builder_set_vtable_clustering@@Base>:
   16e78:	clz	r1, r1
   16e7c:	lsr	r1, r1, #5
   16e80:	str	r1, [r0, #180]	; 0xb4
   16e84:	bx	lr

00016e88 <flatcc_builder_set_block_align@@Base>:
   16e88:	strh	r1, [r0, #132]	; 0x84
   16e8c:	bx	lr

00016e90 <flatcc_builder_get_level@@Base>:
   16e90:	ldr	r0, [r0, #156]	; 0x9c
   16e94:	bx	lr

00016e98 <flatcc_builder_set_max_level@@Base>:
   16e98:	str	r1, [r0, #176]	; 0xb0
   16e9c:	ldr	r3, [r0, #160]	; 0xa0
   16ea0:	cmp	r1, r3
   16ea4:	strgt	r1, [r0, #160]	; 0xa0
   16ea8:	bx	lr

00016eac <flatcc_builder_get_buffer_size@@Base>:
   16eac:	ldr	r2, [r0, #140]	; 0x8c
   16eb0:	ldr	r0, [r0, #136]	; 0x88
   16eb4:	sub	r0, r2, r0
   16eb8:	bx	lr

00016ebc <flatcc_builder_get_buffer_start@@Base>:
   16ebc:	ldr	r0, [r0, #136]	; 0x88
   16ec0:	bx	lr

00016ec4 <flatcc_builder_get_buffer_end@@Base>:
   16ec4:	ldr	r0, [r0, #140]	; 0x8c
   16ec8:	bx	lr

00016ecc <flatcc_builder_set_vtable_cache_limit@@Base>:
   16ecc:	str	r1, [r0, #172]	; 0xac
   16ed0:	bx	lr

00016ed4 <flatcc_builder_set_identifier@@Base>:
   16ed4:	ldr	r3, [pc, #16]	; 16eec <flatcc_builder_set_identifier@@Base+0x18>
   16ed8:	cmp	r1, #0
   16edc:	moveq	r1, r3
   16ee0:	ldr	r3, [r1]
   16ee4:	str	r3, [r0, #168]	; 0xa8
   16ee8:	bx	lr
   16eec:	andeq	r7, r1, r4, asr #22

00016ef0 <flatcc_builder_get_type@@Base>:
   16ef0:	ldr	r3, [r0, #32]
   16ef4:	cmp	r3, #0
   16ef8:	ldrhne	r0, [r3, #14]
   16efc:	moveq	r0, #0
   16f00:	bx	lr

00016f04 <flatcc_builder_get_type_at@@Base>:
   16f04:	cmp	r1, #0
   16f08:	ble	16f30 <flatcc_builder_get_type_at@@Base+0x2c>
   16f0c:	ldr	r3, [r0, #156]	; 0x9c
   16f10:	cmp	r1, r3
   16f14:	bgt	16f38 <flatcc_builder_get_type_at@@Base+0x34>
   16f18:	sub	r1, r1, r3
   16f1c:	ldr	r3, [r0, #32]
   16f20:	add	r1, r1, r1, lsl #3
   16f24:	add	r1, r3, r1, lsl #2
   16f28:	ldrh	r0, [r1, #14]
   16f2c:	bx	lr
   16f30:	mov	r0, #0
   16f34:	bx	lr
   16f38:	mov	r0, #0
   16f3c:	bx	lr

00016f40 <flatcc_builder_get_direct_buffer@@Base>:
   16f40:	ldr	r3, [r0, #184]	; 0xb8
   16f44:	cmp	r3, #0
   16f48:	beq	16f84 <flatcc_builder_get_direct_buffer@@Base+0x44>
   16f4c:	ldr	r2, [r0, #188]	; 0xbc
   16f50:	ldr	r3, [r0, #192]	; 0xc0
   16f54:	cmp	r2, r3
   16f58:	beq	16f70 <flatcc_builder_get_direct_buffer@@Base+0x30>
   16f5c:	cmp	r1, #0
   16f60:	beq	16f98 <flatcc_builder_get_direct_buffer@@Base+0x58>
   16f64:	mov	r0, #0
   16f68:	str	r0, [r1]
   16f6c:	bx	lr
   16f70:	cmp	r1, #0
   16f74:	ldrne	r3, [r0, #212]	; 0xd4
   16f78:	strne	r3, [r1]
   16f7c:	ldr	r0, [r0, #196]	; 0xc4
   16f80:	bx	lr
   16f84:	cmp	r1, #0
   16f88:	beq	16fa0 <flatcc_builder_get_direct_buffer@@Base+0x60>
   16f8c:	mov	r0, #0
   16f90:	str	r0, [r1]
   16f94:	bx	lr
   16f98:	mov	r0, #0
   16f9c:	bx	lr
   16fa0:	mov	r0, #0
   16fa4:	bx	lr

00016fa8 <flatcc_builder_copy_buffer@@Base>:
   16fa8:	ldr	r3, [r0, #184]	; 0xb8
   16fac:	cmp	r3, #0
   16fb0:	beq	16fdc <flatcc_builder_copy_buffer@@Base+0x34>
   16fb4:	push	{r4, lr}
   16fb8:	add	r0, r0, #188	; 0xbc
   16fbc:	bl	176d8 <flatcc_emitter_copy_buffer@@Base>
   16fc0:	cmp	r0, #0
   16fc4:	popne	{r4, pc}
   16fc8:	ldr	r3, [pc, #20]	; 16fe4 <flatcc_builder_copy_buffer@@Base+0x3c>
   16fcc:	ldr	r2, [pc, #20]	; 16fe8 <flatcc_builder_copy_buffer@@Base+0x40>
   16fd0:	ldr	r1, [pc, #20]	; 16fec <flatcc_builder_copy_buffer@@Base+0x44>
   16fd4:	ldr	r0, [pc, #20]	; 16ff0 <flatcc_builder_copy_buffer@@Base+0x48>
   16fd8:	bl	11ffc <__assert_fail@plt>
   16fdc:	mov	r0, #0
   16fe0:	bx	lr
   16fe4:	andeq	r8, r1, r8, asr r2
   16fe8:	andeq	r0, r0, r6, lsl #15
   16fec:	muleq	r1, r4, r2
   16ff0:	muleq	r1, r8, r6

00016ff4 <flatcc_builder_finalize_buffer@@Base>:
   16ff4:	push	{r4, r5, r6, lr}
   16ff8:	mov	r5, r0
   16ffc:	ldr	r4, [r0, #140]	; 0x8c
   17000:	ldr	r3, [r0, #136]	; 0x88
   17004:	sub	r4, r4, r3
   17008:	cmp	r1, #0
   1700c:	strne	r4, [r1]
   17010:	mov	r0, r4
   17014:	bl	11f9c <malloc@plt>
   17018:	subs	r6, r0, #0
   1701c:	beq	17040 <flatcc_builder_finalize_buffer@@Base+0x4c>
   17020:	mov	r2, r4
   17024:	mov	r1, r6
   17028:	mov	r0, r5
   1702c:	bl	16fa8 <flatcc_builder_copy_buffer@@Base>
   17030:	cmp	r0, #0
   17034:	beq	17054 <flatcc_builder_finalize_buffer@@Base+0x60>
   17038:	mov	r0, r6
   1703c:	pop	{r4, r5, r6, pc}
   17040:	ldr	r3, [pc, #32]	; 17068 <flatcc_builder_finalize_buffer@@Base+0x74>
   17044:	ldr	r2, [pc, #32]	; 1706c <flatcc_builder_finalize_buffer@@Base+0x78>
   17048:	ldr	r1, [pc, #32]	; 17070 <flatcc_builder_finalize_buffer@@Base+0x7c>
   1704c:	ldr	r0, [pc, #32]	; 17074 <flatcc_builder_finalize_buffer@@Base+0x80>
   17050:	bl	11ffc <__assert_fail@plt>
   17054:	ldr	r3, [pc, #12]	; 17068 <flatcc_builder_finalize_buffer@@Base+0x74>
   17058:	ldr	r2, [pc, #24]	; 17078 <flatcc_builder_finalize_buffer@@Base+0x84>
   1705c:	ldr	r1, [pc, #12]	; 17070 <flatcc_builder_finalize_buffer@@Base+0x7c>
   17060:	ldr	r0, [pc, #12]	; 17074 <flatcc_builder_finalize_buffer@@Base+0x80>
   17064:	bl	11ffc <__assert_fail@plt>
   17068:	andeq	r8, r1, r4, ror r2
   1706c:	muleq	r0, r8, r7
   17070:	muleq	r1, r4, r2
   17074:	andeq	r8, r1, r8, ror #5
   17078:	muleq	r0, ip, r7

0001707c <flatcc_builder_finalize_aligned_buffer@@Base>:
   1707c:	push	{r4, r5, r6, r7, lr}
   17080:	sub	sp, sp, #12
   17084:	mov	r7, r0
   17088:	ldr	r4, [r0, #140]	; 0x8c
   1708c:	ldr	r3, [r0, #136]	; 0x88
   17090:	sub	r3, r4, r3
   17094:	subs	r6, r1, #0
   17098:	strne	r3, [r6]
   1709c:	ldrh	r1, [r0, #128]	; 0x80
   170a0:	sub	r4, r1, #1
   170a4:	add	r4, r4, r3
   170a8:	rsb	r3, r1, #0
   170ac:	and	r4, r4, r3
   170b0:	add	r0, sp, #8
   170b4:	mov	r3, #0
   170b8:	str	r3, [r0, #-4]!
   170bc:	mov	r2, r4
   170c0:	cmp	r1, #4
   170c4:	movcc	r1, #4
   170c8:	bl	11fcc <posix_memalign@plt>
   170cc:	cmp	r0, #0
   170d0:	beq	170f4 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   170d4:	ldr	r0, [sp, #4]
   170d8:	cmp	r0, #0
   170dc:	beq	170e4 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   170e0:	bl	11f60 <free@plt>
   170e4:	cmp	r6, #0
   170e8:	mov	r5, #0
   170ec:	strne	r5, [r6]
   170f0:	b	17118 <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   170f4:	ldr	r5, [sp, #4]
   170f8:	cmp	r5, #0
   170fc:	beq	170e4 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   17100:	mov	r2, r4
   17104:	mov	r1, r5
   17108:	mov	r0, r7
   1710c:	bl	16fa8 <flatcc_builder_copy_buffer@@Base>
   17110:	cmp	r0, #0
   17114:	beq	17124 <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   17118:	mov	r0, r5
   1711c:	add	sp, sp, #12
   17120:	pop	{r4, r5, r6, r7, pc}
   17124:	mov	r0, r5
   17128:	bl	11f60 <free@plt>
   1712c:	b	170e4 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>

00017130 <flatcc_builder_aligned_alloc@@Base>:
   17130:	push	{lr}		; (str lr, [sp, #-4]!)
   17134:	sub	sp, sp, #12
   17138:	add	r3, sp, #8
   1713c:	mov	r2, #0
   17140:	str	r2, [r3, #-4]!
   17144:	mov	r2, r1
   17148:	cmp	r0, #4
   1714c:	movcs	r1, r0
   17150:	movcc	r1, #4
   17154:	mov	r0, r3
   17158:	bl	11fcc <posix_memalign@plt>
   1715c:	cmp	r0, #0
   17160:	beq	1717c <flatcc_builder_aligned_alloc@@Base+0x4c>
   17164:	ldr	r0, [sp, #4]
   17168:	cmp	r0, #0
   1716c:	beq	1717c <flatcc_builder_aligned_alloc@@Base+0x4c>
   17170:	bl	11f60 <free@plt>
   17174:	mov	r3, #0
   17178:	str	r3, [sp, #4]
   1717c:	ldr	r0, [sp, #4]
   17180:	add	sp, sp, #12
   17184:	pop	{pc}		; (ldr pc, [sp], #4)

00017188 <flatcc_builder_aligned_free@@Base>:
   17188:	push	{r4, lr}
   1718c:	bl	11f60 <free@plt>
   17190:	pop	{r4, pc}

00017194 <flatcc_builder_get_emit_context@@Base>:
   17194:	ldr	r0, [r0, #36]	; 0x24
   17198:	bx	lr

0001719c <flatcc_emitter_recycle_page@@Base>:
   1719c:	ldr	r3, [r0]
   171a0:	cmp	r3, r1
   171a4:	beq	171f4 <flatcc_emitter_recycle_page@@Base+0x58>
   171a8:	ldr	r3, [r0, #4]
   171ac:	cmp	r1, r3
   171b0:	beq	171fc <flatcc_emitter_recycle_page@@Base+0x60>
   171b4:	ldr	r3, [r1, #2944]	; 0xb80
   171b8:	ldr	r2, [r1, #2948]	; 0xb84
   171bc:	str	r2, [r3, #2948]	; 0xb84
   171c0:	ldr	r3, [r1, #2948]	; 0xb84
   171c4:	ldr	r2, [r1, #2944]	; 0xb80
   171c8:	str	r2, [r3, #2944]	; 0xb80
   171cc:	ldr	r3, [r0]
   171d0:	ldr	r3, [r3, #2948]	; 0xb84
   171d4:	str	r3, [r1, #2948]	; 0xb84
   171d8:	ldr	r2, [r0]
   171dc:	str	r2, [r1, #2944]	; 0xb80
   171e0:	str	r1, [r3, #2944]	; 0xb80
   171e4:	ldr	r3, [r1, #2944]	; 0xb80
   171e8:	str	r1, [r3, #2948]	; 0xb84
   171ec:	mov	r0, #0
   171f0:	bx	lr
   171f4:	mvn	r0, #0
   171f8:	bx	lr
   171fc:	mvn	r0, #0
   17200:	bx	lr

00017204 <flatcc_emitter_reset@@Base>:
   17204:	ldr	r3, [r0]
   17208:	cmp	r3, #0
   1720c:	bxeq	lr
   17210:	str	r3, [r0, #4]
   17214:	add	r2, r3, #1472	; 0x5c0
   17218:	str	r2, [r0, #8]
   1721c:	str	r2, [r0, #16]
   17220:	mov	r2, #1472	; 0x5c0
   17224:	str	r2, [r0, #12]
   17228:	str	r2, [r0, #20]
   1722c:	sub	r2, r2, #2944	; 0xb80
   17230:	str	r2, [r3, #2952]	; 0xb88
   17234:	ldr	r3, [r0, #32]
   17238:	cmp	r3, #0
   1723c:	ldreq	r3, [r0, #24]
   17240:	streq	r3, [r0, #32]
   17244:	ldr	r3, [r0, #32]
   17248:	add	r2, r3, r3, lsl #1
   1724c:	ldr	r3, [r0, #24]
   17250:	lsr	r3, r3, #2
   17254:	add	r3, r3, r2, lsr #2
   17258:	str	r3, [r0, #32]
   1725c:	mov	r2, #0
   17260:	str	r2, [r0, #24]
   17264:	ldr	r2, [r0, #28]
   17268:	cmp	r2, r3, lsl #1
   1726c:	bxls	lr
   17270:	push	{r4, lr}
   17274:	mov	r4, r0
   17278:	ldr	r3, [r0, #4]
   1727c:	ldr	r0, [r3, #2944]	; 0xb80
   17280:	ldr	r2, [r4]
   17284:	cmp	r0, r2
   17288:	popeq	{r4, pc}
   1728c:	ldr	r2, [r0, #2944]	; 0xb80
   17290:	str	r2, [r3, #2944]	; 0xb80
   17294:	ldr	r3, [r0, #2944]	; 0xb80
   17298:	ldr	r2, [r4, #4]
   1729c:	str	r2, [r3, #2948]	; 0xb84
   172a0:	bl	11f60 <free@plt>
   172a4:	ldr	r3, [r4, #28]
   172a8:	sub	r3, r3, #2944	; 0xb80
   172ac:	str	r3, [r4, #28]
   172b0:	ldr	r2, [r4, #32]
   172b4:	cmp	r3, r2, lsl #1
   172b8:	popls	{r4, pc}
   172bc:	ldr	r3, [r4, #4]
   172c0:	ldr	r0, [r3, #2944]	; 0xb80
   172c4:	ldr	r2, [r4]
   172c8:	cmp	r0, r2
   172cc:	bne	1728c <flatcc_emitter_reset@@Base+0x88>
   172d0:	pop	{r4, pc}

000172d4 <flatcc_emitter_clear@@Base>:
   172d4:	ldr	r3, [r0]
   172d8:	cmp	r3, #0
   172dc:	bxeq	lr
   172e0:	push	{r4, r5, r6, lr}
   172e4:	mov	r5, r0
   172e8:	ldr	r2, [r3, #2948]	; 0xb84
   172ec:	mov	r1, #0
   172f0:	str	r1, [r2, #2944]	; 0xb80
   172f4:	ldr	r4, [r3, #2944]	; 0xb80
   172f8:	cmp	r4, r1
   172fc:	bne	1730c <flatcc_emitter_clear@@Base+0x38>
   17300:	mov	r4, r3
   17304:	b	17320 <flatcc_emitter_clear@@Base+0x4c>
   17308:	mov	r4, r3
   1730c:	ldr	r0, [r4, #2948]	; 0xb84
   17310:	bl	11f60 <free@plt>
   17314:	ldr	r3, [r4, #2944]	; 0xb80
   17318:	cmp	r3, #0
   1731c:	bne	17308 <flatcc_emitter_clear@@Base+0x34>
   17320:	mov	r0, r4
   17324:	bl	11f60 <free@plt>
   17328:	mov	r2, #36	; 0x24
   1732c:	mov	r1, #0
   17330:	mov	r0, r5
   17334:	bl	11fd8 <memset@plt>
   17338:	pop	{r4, r5, r6, pc}

0001733c <flatcc_emitter@@Base>:
   1733c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17340:	mov	r4, r0
   17344:	ldr	ip, [sp, #40]	; 0x28
   17348:	ldr	r0, [r0, #24]
   1734c:	add	r0, r0, ip
   17350:	str	r0, [r4, #24]
   17354:	cmp	r3, #0
   17358:	blt	17384 <flatcc_emitter@@Base+0x48>
   1735c:	ldr	r3, [r4, #20]
   17360:	cmp	ip, r3
   17364:	bls	17470 <flatcc_emitter@@Base+0x134>
   17368:	cmp	r2, #0
   1736c:	addne	r7, r1, #8
   17370:	movne	sl, r2
   17374:	movne	fp, #2944	; 0xb80
   17378:	bne	17624 <flatcc_emitter@@Base+0x2e8>
   1737c:	mov	r0, r2
   17380:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17384:	ldr	r3, [r4, #12]
   17388:	cmp	ip, r3
   1738c:	bhi	173b0 <flatcc_emitter@@Base+0x74>
   17390:	ldr	r5, [r4, #8]
   17394:	sub	r5, r5, ip
   17398:	str	r5, [r4, #8]
   1739c:	sub	r3, r3, ip
   173a0:	str	r3, [r4, #12]
   173a4:	b	17484 <flatcc_emitter@@Base+0x148>
   173a8:	mov	r0, r2
   173ac:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173b0:	add	r7, r1, r2, lsl #3
   173b4:	mov	r8, r2
   173b8:	mov	fp, #1472	; 0x5c0
   173bc:	mov	sl, #2944	; 0xb80
   173c0:	b	175a0 <flatcc_emitter@@Base+0x264>
   173c4:	mov	r2, r5
   173c8:	rsb	r1, r2, #0
   173cc:	ldr	r0, [r4, #8]
   173d0:	add	r0, r0, r1
   173d4:	str	r0, [r4, #8]
   173d8:	sub	r3, r3, r2
   173dc:	str	r3, [r4, #12]
   173e0:	add	r6, r6, r1
   173e4:	sub	r5, r5, r2
   173e8:	mov	r1, r6
   173ec:	bl	11f6c <memcpy@plt>
   173f0:	cmp	r5, #0
   173f4:	beq	17598 <flatcc_emitter@@Base+0x25c>
   173f8:	ldr	r3, [r4, #12]
   173fc:	cmp	r3, r5
   17400:	bcs	173c4 <flatcc_emitter@@Base+0x88>
   17404:	cmp	r3, #0
   17408:	movne	r2, r3
   1740c:	bne	173c8 <flatcc_emitter@@Base+0x8c>
   17410:	ldr	r9, [r4]
   17414:	cmp	r9, #0
   17418:	beq	176b8 <flatcc_emitter@@Base+0x37c>
   1741c:	ldr	r2, [r9, #2948]	; 0xb84
   17420:	ldr	r3, [r4, #4]
   17424:	cmp	r2, r3
   17428:	beq	17640 <flatcc_emitter@@Base+0x304>
   1742c:	ldr	r3, [r9, #2952]	; 0xb88
   17430:	sub	r3, r3, #2944	; 0xb80
   17434:	str	r3, [r2, #2952]	; 0xb88
   17438:	ldr	r3, [r4]
   1743c:	ldr	r3, [r3, #2948]	; 0xb84
   17440:	str	r3, [r4]
   17444:	ldr	r3, [r4]
   17448:	add	r2, r3, #2944	; 0xb80
   1744c:	str	r2, [r4, #8]
   17450:	str	sl, [r4, #12]
   17454:	ldr	r2, [r3, #2944]	; 0xb80
   17458:	ldr	r2, [r2, #2952]	; 0xb88
   1745c:	sub	r2, r2, #2944	; 0xb80
   17460:	str	r2, [r3, #2952]	; 0xb88
   17464:	b	173f0 <flatcc_emitter@@Base+0xb4>
   17468:	mov	r0, #0
   1746c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17470:	ldr	r5, [r4, #16]
   17474:	add	r0, r5, ip
   17478:	str	r0, [r4, #16]
   1747c:	sub	r3, r3, ip
   17480:	str	r3, [r4, #20]
   17484:	cmp	r2, #0
   17488:	addne	r4, r1, #8
   1748c:	movne	r8, r2
   17490:	beq	173a8 <flatcc_emitter@@Base+0x6c>
   17494:	ldr	r2, [r4, #-4]
   17498:	ldr	r1, [r4, #-8]
   1749c:	mov	r0, r5
   174a0:	bl	11f6c <memcpy@plt>
   174a4:	ldr	r3, [r4, #-4]
   174a8:	add	r5, r5, r3
   174ac:	add	r4, r4, #8
   174b0:	subs	r8, r8, #1
   174b4:	bne	17494 <flatcc_emitter@@Base+0x158>
   174b8:	mov	r0, #0
   174bc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174c0:	ldr	r0, [pc, #520]	; 176d0 <flatcc_emitter@@Base+0x394>
   174c4:	bl	11f9c <malloc@plt>
   174c8:	cmp	r0, #0
   174cc:	beq	17588 <flatcc_emitter@@Base+0x24c>
   174d0:	ldr	r3, [r4, #28]
   174d4:	add	r3, r3, #2944	; 0xb80
   174d8:	str	r3, [r4, #28]
   174dc:	str	r5, [r0, #2948]	; 0xb84
   174e0:	str	r9, [r0, #2944]	; 0xb80
   174e4:	str	r0, [r9, #2948]	; 0xb84
   174e8:	ldr	r3, [r4, #4]
   174ec:	str	r0, [r3, #2944]	; 0xb80
   174f0:	str	r0, [r4, #4]
   174f4:	b	17568 <flatcc_emitter@@Base+0x22c>
   174f8:	mov	r5, r6
   174fc:	mov	r2, r5
   17500:	mov	r1, r8
   17504:	ldr	r0, [r4, #16]
   17508:	bl	11f6c <memcpy@plt>
   1750c:	sub	r6, r6, r5
   17510:	add	r8, r8, r5
   17514:	ldr	r3, [r4, #16]
   17518:	add	r3, r3, r5
   1751c:	str	r3, [r4, #16]
   17520:	ldr	r3, [r4, #20]
   17524:	sub	r5, r3, r5
   17528:	str	r5, [r4, #20]
   1752c:	cmp	r6, #0
   17530:	beq	17618 <flatcc_emitter@@Base+0x2dc>
   17534:	ldr	r5, [r4, #20]
   17538:	cmp	r5, r6
   1753c:	bcs	174f8 <flatcc_emitter@@Base+0x1bc>
   17540:	cmp	r5, #0
   17544:	bne	174fc <flatcc_emitter@@Base+0x1c0>
   17548:	ldr	r5, [r4, #4]
   1754c:	cmp	r5, #0
   17550:	beq	17600 <flatcc_emitter@@Base+0x2c4>
   17554:	ldr	r9, [r5, #2944]	; 0xb80
   17558:	ldr	r3, [r4]
   1755c:	cmp	r9, r3
   17560:	strne	r9, [r4, #4]
   17564:	beq	174c0 <flatcc_emitter@@Base+0x184>
   17568:	ldr	r3, [r4, #4]
   1756c:	str	r3, [r4, #16]
   17570:	str	fp, [r4, #20]
   17574:	ldr	r2, [r3, #2948]	; 0xb84
   17578:	ldr	r2, [r2, #2952]	; 0xb88
   1757c:	add	r2, r2, #2944	; 0xb80
   17580:	str	r2, [r3, #2952]	; 0xb88
   17584:	b	1752c <flatcc_emitter@@Base+0x1f0>
   17588:	mvn	r0, #0
   1758c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17590:	mvn	r0, #0
   17594:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17598:	sub	r7, r7, #8
   1759c:	sub	r8, r8, #1
   175a0:	cmp	r8, #0
   175a4:	beq	17468 <flatcc_emitter@@Base+0x12c>
   175a8:	ldr	r5, [r7, #-4]
   175ac:	ldr	r6, [r7, #-8]
   175b0:	add	r6, r6, r5
   175b4:	cmp	r5, #0
   175b8:	bne	173f8 <flatcc_emitter@@Base+0xbc>
   175bc:	b	17598 <flatcc_emitter@@Base+0x25c>
   175c0:	ldr	r3, [r4, #28]
   175c4:	add	r3, r3, #2944	; 0xb80
   175c8:	str	r3, [r4, #28]
   175cc:	str	r0, [r4]
   175d0:	str	r0, [r4, #4]
   175d4:	str	r0, [r0, #2944]	; 0xb80
   175d8:	str	r0, [r0, #2948]	; 0xb84
   175dc:	add	r3, r0, #1472	; 0x5c0
   175e0:	str	r3, [r4, #8]
   175e4:	str	r3, [r4, #16]
   175e8:	mov	r3, #1472	; 0x5c0
   175ec:	str	r3, [r4, #12]
   175f0:	str	r3, [r4, #20]
   175f4:	sub	r3, r3, #2944	; 0xb80
   175f8:	str	r3, [r0, #2952]	; 0xb88
   175fc:	b	1752c <flatcc_emitter@@Base+0x1f0>
   17600:	ldr	r0, [pc, #200]	; 176d0 <flatcc_emitter@@Base+0x394>
   17604:	bl	11f9c <malloc@plt>
   17608:	cmp	r0, #0
   1760c:	bne	175c0 <flatcc_emitter@@Base+0x284>
   17610:	mvn	r0, #0
   17614:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17618:	add	r7, r7, #8
   1761c:	subs	sl, sl, #1
   17620:	beq	17638 <flatcc_emitter@@Base+0x2fc>
   17624:	ldr	r8, [r7, #-8]
   17628:	ldr	r6, [r7, #-4]
   1762c:	cmp	r6, #0
   17630:	bne	17534 <flatcc_emitter@@Base+0x1f8>
   17634:	b	17618 <flatcc_emitter@@Base+0x2dc>
   17638:	mov	r0, #0
   1763c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17640:	ldr	r0, [pc, #136]	; 176d0 <flatcc_emitter@@Base+0x394>
   17644:	bl	11f9c <malloc@plt>
   17648:	cmp	r0, #0
   1764c:	beq	17590 <flatcc_emitter@@Base+0x254>
   17650:	ldr	r3, [r4, #28]
   17654:	add	r3, r3, #2944	; 0xb80
   17658:	str	r3, [r4, #28]
   1765c:	ldr	r3, [r4, #4]
   17660:	str	r3, [r0, #2948]	; 0xb84
   17664:	str	r9, [r0, #2944]	; 0xb80
   17668:	str	r0, [r9, #2948]	; 0xb84
   1766c:	ldr	r3, [r4, #4]
   17670:	str	r0, [r3, #2944]	; 0xb80
   17674:	str	r0, [r4]
   17678:	b	17444 <flatcc_emitter@@Base+0x108>
   1767c:	ldr	r3, [r4, #28]
   17680:	add	r3, r3, #2944	; 0xb80
   17684:	str	r3, [r4, #28]
   17688:	str	r0, [r4]
   1768c:	str	r0, [r4, #4]
   17690:	str	r0, [r0, #2944]	; 0xb80
   17694:	str	r0, [r0, #2948]	; 0xb84
   17698:	add	r3, r0, #1472	; 0x5c0
   1769c:	str	r3, [r4, #8]
   176a0:	str	r3, [r4, #16]
   176a4:	str	fp, [r4, #12]
   176a8:	str	fp, [r4, #20]
   176ac:	ldr	r3, [pc, #32]	; 176d4 <flatcc_emitter@@Base+0x398>
   176b0:	str	r3, [r0, #2952]	; 0xb88
   176b4:	b	173f0 <flatcc_emitter@@Base+0xb4>
   176b8:	ldr	r0, [pc, #16]	; 176d0 <flatcc_emitter@@Base+0x394>
   176bc:	bl	11f9c <malloc@plt>
   176c0:	cmp	r0, #0
   176c4:	bne	1767c <flatcc_emitter@@Base+0x340>
   176c8:	mvn	r0, #0
   176cc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176d0:	andeq	r0, r0, ip, lsl #23
   176d4:			; <UNDEFINED> instruction: 0xfffffa40

000176d8 <flatcc_emitter_copy_buffer@@Base>:
   176d8:	push	{r4, r5, r6, r7, r8, lr}
   176dc:	mov	r5, r1
   176e0:	ldr	r1, [r0, #24]
   176e4:	cmp	r1, r2
   176e8:	bhi	1778c <flatcc_emitter_copy_buffer@@Base+0xb4>
   176ec:	ldr	r3, [r0]
   176f0:	cmp	r3, #0
   176f4:	beq	17794 <flatcc_emitter_copy_buffer@@Base+0xbc>
   176f8:	mov	r6, r0
   176fc:	ldr	r2, [r0, #4]
   17700:	cmp	r3, r2
   17704:	beq	17778 <flatcc_emitter_copy_buffer@@Base+0xa0>
   17708:	ldr	r4, [r0, #12]
   1770c:	rsb	r4, r4, #2944	; 0xb80
   17710:	mov	r2, r4
   17714:	ldr	r1, [r0, #8]
   17718:	mov	r0, r5
   1771c:	bl	11f6c <memcpy@plt>
   17720:	add	r5, r5, r4
   17724:	ldr	r3, [r6]
   17728:	ldr	r4, [r3, #2944]	; 0xb80
   1772c:	ldr	r1, [r6, #4]
   17730:	cmp	r4, r1
   17734:	beq	17760 <flatcc_emitter_copy_buffer@@Base+0x88>
   17738:	mov	r7, #2944	; 0xb80
   1773c:	mov	r2, r7
   17740:	mov	r1, r4
   17744:	mov	r0, r5
   17748:	bl	11f6c <memcpy@plt>
   1774c:	add	r5, r5, #2944	; 0xb80
   17750:	ldr	r4, [r4, #2944]	; 0xb80
   17754:	ldr	r1, [r6, #4]
   17758:	cmp	r1, r4
   1775c:	bne	1773c <flatcc_emitter_copy_buffer@@Base+0x64>
   17760:	ldr	r2, [r6, #20]
   17764:	rsb	r2, r2, #2944	; 0xb80
   17768:	mov	r0, r5
   1776c:	bl	11f6c <memcpy@plt>
   17770:	mov	r0, r5
   17774:	pop	{r4, r5, r6, r7, r8, pc}
   17778:	mov	r2, r1
   1777c:	ldr	r1, [r0, #8]
   17780:	mov	r0, r5
   17784:	bl	11f6c <memcpy@plt>
   17788:	b	17770 <flatcc_emitter_copy_buffer@@Base+0x98>
   1778c:	mov	r5, #0
   17790:	b	17770 <flatcc_emitter_copy_buffer@@Base+0x98>
   17794:	mov	r5, #0
   17798:	b	17770 <flatcc_emitter_copy_buffer@@Base+0x98>

0001779c <__libc_csu_init@@Base>:
   1779c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   177a0:	mov	r7, r0
   177a4:	ldr	r6, [pc, #72]	; 177f4 <__libc_csu_init@@Base+0x58>
   177a8:	ldr	r5, [pc, #72]	; 177f8 <__libc_csu_init@@Base+0x5c>
   177ac:	add	r6, pc, r6
   177b0:	add	r5, pc, r5
   177b4:	sub	r6, r6, r5
   177b8:	mov	r8, r1
   177bc:	mov	r9, r2
   177c0:	bl	11f34 <strcmp@plt-0x20>
   177c4:	asrs	r6, r6, #2
   177c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   177cc:	mov	r4, #0
   177d0:	add	r4, r4, #1
   177d4:	ldr	r3, [r5], #4
   177d8:	mov	r2, r9
   177dc:	mov	r1, r8
   177e0:	mov	r0, r7
   177e4:	blx	r3
   177e8:	cmp	r6, r4
   177ec:	bne	177d0 <__libc_csu_init@@Base+0x34>
   177f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   177f4:	andeq	r1, r1, ip, asr r7
   177f8:	andeq	r1, r1, r4, asr r7

000177fc <__libc_csu_fini@@Base>:
   177fc:	bx	lr

Disassembly of section .fini:

00017800 <.fini>:
   17800:	push	{r3, lr}
   17804:	pop	{r3, pc}
