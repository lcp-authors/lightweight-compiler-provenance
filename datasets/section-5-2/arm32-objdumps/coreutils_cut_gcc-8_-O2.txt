
../repos/coreutils/src/cut:     file format elf32-littlearm


Disassembly of section .init:

00010d44 <.init>:
   10d44:	push	{r3, lr}
   10d48:	bl	11458 <__assert_fail@plt+0x454>
   10d4c:	pop	{r3, pc}

Disassembly of section .plt:

00010d50 <calloc@plt-0x14>:
   10d50:	push	{lr}		; (str lr, [sp, #-4]!)
   10d54:	ldr	lr, [pc, #4]	; 10d60 <calloc@plt-0x4>
   10d58:	add	lr, pc, lr
   10d5c:	ldr	pc, [lr, #8]!
   10d60:	andeq	r7, r1, r0, lsr #5

00010d64 <calloc@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #672]!	; 0x2a0

00010d70 <fputs_unlocked@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #664]!	; 0x298

00010d7c <strcmp@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #656]!	; 0x290

00010d88 <posix_fadvise64@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #648]!	; 0x288

00010d94 <fflush@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #640]!	; 0x280

00010da0 <memmove@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #632]!	; 0x278

00010dac <free@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #624]!	; 0x270

00010db8 <ferror@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #616]!	; 0x268

00010dc4 <_exit@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #608]!	; 0x260

00010dd0 <memcpy@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #600]!	; 0x258

00010ddc <mbsinit@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #592]!	; 0x250

00010de8 <fwrite_unlocked@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #584]!	; 0x248

00010df4 <memcmp@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #576]!	; 0x240

00010e00 <fputc_unlocked@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #94208	; 0x17000
   10e08:	ldr	pc, [ip, #568]!	; 0x238

00010e0c <dcgettext@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #94208	; 0x17000
   10e14:	ldr	pc, [ip, #560]!	; 0x230

00010e18 <realloc@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #94208	; 0x17000
   10e20:	ldr	pc, [ip, #552]!	; 0x228

00010e24 <textdomain@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #544]!	; 0x220

00010e30 <iswprint@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #536]!	; 0x218

00010e3c <fwrite@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #528]!	; 0x210

00010e48 <lseek64@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #520]!	; 0x208

00010e54 <__ctype_get_mb_cur_max@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #512]!	; 0x200

00010e60 <__fpending@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #504]!	; 0x1f8

00010e6c <mbrtowc@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #496]!	; 0x1f0

00010e78 <error@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #488]!	; 0x1e8

00010e84 <malloc@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e90 <__libc_start_main@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #472]!	; 0x1d8

00010e9c <__freading@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #464]!	; 0x1d0

00010ea8 <__gmon_start__@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #456]!	; 0x1c8

00010eb4 <getopt_long@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #448]!	; 0x1c0

00010ec0 <__ctype_b_loc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #440]!	; 0x1b8

00010ecc <exit@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #432]!	; 0x1b0

00010ed8 <strlen@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #424]!	; 0x1a8

00010ee4 <ungetc@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #416]!	; 0x1a0

00010ef0 <__errno_location@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #408]!	; 0x198

00010efc <__cxa_atexit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #400]!	; 0x190

00010f08 <memset@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #392]!	; 0x188

00010f14 <fgetc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #384]!	; 0x180

00010f20 <__printf_chk@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #376]!	; 0x178

00010f2c <fileno@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #368]!	; 0x170

00010f38 <__fprintf_chk@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #360]!	; 0x168

00010f44 <memchr@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #352]!	; 0x160

00010f50 <fclose@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #344]!	; 0x158

00010f5c <fseeko64@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #336]!	; 0x150

00010f68 <__fread_chk@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #328]!	; 0x148

00010f74 <__uflow@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #320]!	; 0x140

00010f80 <__overflow@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #312]!	; 0x138

00010f8c <setlocale@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #304]!	; 0x130

00010f98 <strrchr@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #296]!	; 0x128

00010fa4 <nl_langinfo@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #288]!	; 0x120

00010fb0 <clearerr_unlocked@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #280]!	; 0x118

00010fbc <fopen64@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #272]!	; 0x110

00010fc8 <qsort@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #264]!	; 0x108

00010fd4 <bindtextdomain@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #256]!	; 0x100

00010fe0 <strncmp@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #248]!	; 0xf8

00010fec <abort@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #240]!	; 0xf0

00010ff8 <strspn@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #232]!	; 0xe8

00011004 <__assert_fail@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #224]!	; 0xe0

Disassembly of section .text:

00011010 <.text>:
   11010:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11014:	movw	r5, #33136	; 0x8170
   11018:	movt	r5, #2
   1101c:	strd	r6, [sp, #8]
   11020:	mov	r6, r1
   11024:	movw	r7, #28108	; 0x6dcc
   11028:	movt	r7, #1
   1102c:	strd	r8, [sp, #16]
   11030:	mov	r8, r0
   11034:	strd	sl, [sp, #24]
   11038:	movw	fp, #33128	; 0x8168
   1103c:	movt	fp, #2
   11040:	str	lr, [sp, #32]
   11044:	sub	sp, sp, #28
   11048:	ldr	r0, [r1]
   1104c:	bl	13174 <__assert_fail@plt+0x2170>
   11050:	movw	r1, #26516	; 0x6794
   11054:	movt	r1, #1
   11058:	ldr	r9, [pc, #948]	; 11414 <__assert_fail@plt+0x410>
   1105c:	mov	r0, #6
   11060:	bl	10f8c <setlocale@plt>
   11064:	movw	r1, #27960	; 0x6d38
   11068:	movt	r1, #1
   1106c:	movw	r0, #27792	; 0x6c90
   11070:	movt	r0, #1
   11074:	bl	10fd4 <bindtextdomain@plt>
   11078:	movw	r0, #27792	; 0x6c90
   1107c:	movt	r0, #1
   11080:	bl	10e24 <textdomain@plt>
   11084:	movw	r0, #10584	; 0x2958
   11088:	movt	r0, #1
   1108c:	bl	1649c <__assert_fail@plt+0x5498>
   11090:	mov	r3, #0
   11094:	mov	sl, r3
   11098:	strb	r3, [r5, #4]
   1109c:	strb	r3, [r5, #16]
   110a0:	str	r3, [sp, #16]
   110a4:	str	r3, [sp, #20]
   110a8:	strb	r3, [r5, #29]
   110ac:	mov	r4, #0
   110b0:	mov	r3, r9
   110b4:	mov	r2, r7
   110b8:	mov	r1, r6
   110bc:	mov	r0, r8
   110c0:	str	r4, [sp]
   110c4:	bl	10eb4 <getopt_long@plt>
   110c8:	cmn	r0, #1
   110cc:	beq	11224 <__assert_fail@plt+0x220>
   110d0:	cmp	r0, #102	; 0x66
   110d4:	beq	11204 <__assert_fail@plt+0x200>
   110d8:	ble	11104 <__assert_fail@plt+0x100>
   110dc:	cmp	r0, #122	; 0x7a
   110e0:	beq	11214 <__assert_fail@plt+0x210>
   110e4:	bgt	11170 <__assert_fail@plt+0x16c>
   110e8:	cmp	r0, #110	; 0x6e
   110ec:	beq	110ac <__assert_fail@plt+0xa8>
   110f0:	cmp	r0, #115	; 0x73
   110f4:	bne	11400 <__assert_fail@plt+0x3fc>
   110f8:	mov	r3, #1
   110fc:	strb	r3, [r5, #4]
   11100:	b	110ac <__assert_fail@plt+0xa8>
   11104:	cmp	r0, #99	; 0x63
   11108:	bgt	111c8 <__assert_fail@plt+0x1c4>
   1110c:	cmp	r0, #98	; 0x62
   11110:	bge	111fc <__assert_fail@plt+0x1f8>
   11114:	cmn	r0, #3
   11118:	bne	111b8 <__assert_fail@plt+0x1b4>
   1111c:	movw	r3, #28060	; 0x6d9c
   11120:	movt	r3, #1
   11124:	movw	r1, #28076	; 0x6dac
   11128:	movt	r1, #1
   1112c:	movw	r2, #28092	; 0x6dbc
   11130:	movt	r2, #1
   11134:	movw	r0, #33124	; 0x8164
   11138:	movt	r0, #2
   1113c:	str	r2, [sp]
   11140:	movw	r2, #27788	; 0x6c8c
   11144:	movt	r2, #1
   11148:	stmib	sp, {r1, r3, r4}
   1114c:	movw	r3, #33024	; 0x8100
   11150:	movt	r3, #2
   11154:	movw	r1, #26064	; 0x65d0
   11158:	movt	r1, #1
   1115c:	ldr	r0, [r0]
   11160:	ldr	r3, [r3]
   11164:	bl	15900 <__assert_fail@plt+0x48fc>
   11168:	mov	r0, r4
   1116c:	bl	10ecc <exit@plt>
   11170:	cmp	r0, #256	; 0x100
   11174:	bne	111a0 <__assert_fail@plt+0x19c>
   11178:	ldr	r4, [fp]
   1117c:	ldrb	r3, [r4]
   11180:	cmp	r3, #0
   11184:	moveq	r0, #1
   11188:	beq	11194 <__assert_fail@plt+0x190>
   1118c:	mov	r0, r4
   11190:	bl	10ed8 <strlen@plt>
   11194:	str	r0, [r5, #20]
   11198:	str	r4, [r5, #24]
   1119c:	b	110ac <__assert_fail@plt+0xa8>
   111a0:	movw	r3, #257	; 0x101
   111a4:	cmp	r0, r3
   111a8:	bne	11400 <__assert_fail@plt+0x3fc>
   111ac:	mov	r3, #1
   111b0:	strb	r3, [r5, #30]
   111b4:	b	110ac <__assert_fail@plt+0xa8>
   111b8:	cmn	r0, #2
   111bc:	bne	11400 <__assert_fail@plt+0x3fc>
   111c0:	mov	r0, r4
   111c4:	bl	11dc8 <__assert_fail@plt+0xdc4>
   111c8:	cmp	r0, #100	; 0x64
   111cc:	bne	11400 <__assert_fail@plt+0x3fc>
   111d0:	ldr	r2, [fp]
   111d4:	ldrb	r3, [r2]
   111d8:	cmp	r3, #0
   111dc:	beq	111ec <__assert_fail@plt+0x1e8>
   111e0:	ldrb	r2, [r2, #1]
   111e4:	cmp	r2, #0
   111e8:	bne	11408 <__assert_fail@plt+0x404>
   111ec:	strb	r3, [r5, #16]
   111f0:	mov	r3, #1
   111f4:	str	r3, [sp, #20]
   111f8:	b	110ac <__assert_fail@plt+0xa8>
   111fc:	mov	r3, #1
   11200:	str	r3, [sp, #16]
   11204:	cmp	sl, #0
   11208:	bne	113dc <__assert_fail@plt+0x3d8>
   1120c:	ldr	sl, [fp]
   11210:	b	110ac <__assert_fail@plt+0xa8>
   11214:	movw	r3, #33020	; 0x80fc
   11218:	movt	r3, #2
   1121c:	strb	r4, [r3]
   11220:	b	110ac <__assert_fail@plt+0xa8>
   11224:	cmp	sl, r4
   11228:	movweq	r1, #28120	; 0x6dd8
   1122c:	movteq	r1, #1
   11230:	beq	113e4 <__assert_fail@plt+0x3e0>
   11234:	ldr	r3, [sp, #16]
   11238:	cmp	r3, #0
   1123c:	beq	112b8 <__assert_fail@plt+0x2b4>
   11240:	ldr	r3, [sp, #20]
   11244:	cmp	r3, #0
   11248:	movwne	r1, #28176	; 0x6e10
   1124c:	movtne	r1, #1
   11250:	bne	113e4 <__assert_fail@plt+0x3e0>
   11254:	ldrb	r3, [r5, #4]
   11258:	cmp	r3, #0
   1125c:	movwne	r1, #28244	; 0x6e54
   11260:	movne	r2, #5
   11264:	movtne	r1, #1
   11268:	bne	113e8 <__assert_fail@plt+0x3e4>
   1126c:	ldrb	r3, [r5, #30]
   11270:	mov	r0, sl
   11274:	cmp	r3, #0
   11278:	beq	1139c <__assert_fail@plt+0x398>
   1127c:	mov	r1, #6
   11280:	bl	12280 <__assert_fail@plt+0x127c>
   11284:	ldr	r3, [r5, #24]
   11288:	mov	r2, #9
   1128c:	strb	r2, [r5, #16]
   11290:	cmp	r3, #0
   11294:	beq	113a8 <__assert_fail@plt+0x3a4>
   11298:	ldr	r2, [sp, #16]
   1129c:	movw	r3, #5388	; 0x150c
   112a0:	movt	r3, #1
   112a4:	movw	r9, #6764	; 0x1a6c
   112a8:	movt	r9, #1
   112ac:	cmp	r2, #0
   112b0:	moveq	r9, r3
   112b4:	b	112f0 <__assert_fail@plt+0x2ec>
   112b8:	ldrb	r3, [r5, #30]
   112bc:	mov	r0, sl
   112c0:	cmp	r3, #0
   112c4:	movne	r1, #2
   112c8:	moveq	r1, #0
   112cc:	bl	12280 <__assert_fail@plt+0x127c>
   112d0:	ldr	r3, [sp, #20]
   112d4:	cmp	r3, #0
   112d8:	beq	11284 <__assert_fail@plt+0x280>
   112dc:	ldr	r3, [r5, #24]
   112e0:	cmp	r3, #0
   112e4:	beq	113a8 <__assert_fail@plt+0x3a4>
   112e8:	movw	r9, #5388	; 0x150c
   112ec:	movt	r9, #1
   112f0:	movw	r7, #33104	; 0x8150
   112f4:	movt	r7, #2
   112f8:	ldr	r3, [r7]
   112fc:	cmp	r3, r8
   11300:	beq	113c4 <__assert_fail@plt+0x3c0>
   11304:	mov	r4, #1
   11308:	bge	11334 <__assert_fail@plt+0x330>
   1130c:	mov	r1, r9
   11310:	ldr	r0, [r6, r3, lsl #2]
   11314:	bl	11c80 <__assert_fail@plt+0xc7c>
   11318:	ldr	r3, [r7]
   1131c:	and	r4, r4, r0
   11320:	uxtb	r4, r4
   11324:	add	r3, r3, #1
   11328:	cmp	r3, r8
   1132c:	str	r3, [r7]
   11330:	blt	1130c <__assert_fail@plt+0x308>
   11334:	ldrb	r3, [r5, #29]
   11338:	cmp	r3, #0
   1133c:	bne	11364 <__assert_fail@plt+0x360>
   11340:	eor	r0, r4, #1
   11344:	uxtb	r0, r0
   11348:	add	sp, sp, #28
   1134c:	ldrd	r4, [sp]
   11350:	ldrd	r6, [sp, #8]
   11354:	ldrd	r8, [sp, #16]
   11358:	ldrd	sl, [sp, #24]
   1135c:	add	sp, sp, #32
   11360:	pop	{pc}		; (ldr pc, [sp], #4)
   11364:	movw	r3, #33120	; 0x8160
   11368:	movt	r3, #2
   1136c:	ldr	r0, [r3]
   11370:	bl	12a98 <__assert_fail@plt+0x1a94>
   11374:	cmn	r0, #1
   11378:	bne	11340 <__assert_fail@plt+0x33c>
   1137c:	bl	10ef0 <__errno_location@plt>
   11380:	mov	r4, #0
   11384:	movw	r2, #28700	; 0x701c
   11388:	movt	r2, #1
   1138c:	ldr	r1, [r0]
   11390:	mov	r0, r4
   11394:	bl	10e78 <error@plt>
   11398:	b	11340 <__assert_fail@plt+0x33c>
   1139c:	mov	r1, #4
   113a0:	bl	12280 <__assert_fail@plt+0x127c>
   113a4:	b	11284 <__assert_fail@plt+0x280>
   113a8:	ldrb	r2, [r5, #16]
   113ac:	mov	r1, #1
   113b0:	ldr	r3, [pc, #96]	; 11418 <__assert_fail@plt+0x414>
   113b4:	str	r1, [r5, #20]
   113b8:	str	r3, [r5, #24]
   113bc:	strb	r2, [r5, #28]
   113c0:	b	11298 <__assert_fail@plt+0x294>
   113c4:	mov	r1, r9
   113c8:	movw	r0, #28700	; 0x701c
   113cc:	movt	r0, #1
   113d0:	bl	11c80 <__assert_fail@plt+0xc7c>
   113d4:	mov	r4, r0
   113d8:	b	11334 <__assert_fail@plt+0x330>
   113dc:	movw	r1, #27984	; 0x6d50
   113e0:	movt	r1, #1
   113e4:	mov	r2, #5
   113e8:	mov	r0, #0
   113ec:	bl	10e0c <dcgettext@plt>
   113f0:	mov	r1, #0
   113f4:	mov	r2, r0
   113f8:	mov	r0, r1
   113fc:	bl	10e78 <error@plt>
   11400:	mov	r0, #1
   11404:	bl	11dc8 <__assert_fail@plt+0xdc4>
   11408:	movw	r1, #28016	; 0x6d70
   1140c:	movt	r1, #1
   11410:	b	113e4 <__assert_fail@plt+0x3e0>
   11414:	andeq	r6, r1, r4, lsl #10
   11418:	andeq	r8, r2, ip, lsl #3
   1141c:	mov	fp, #0
   11420:	mov	lr, #0
   11424:	pop	{r1}		; (ldr r1, [sp], #4)
   11428:	mov	r2, sp
   1142c:	push	{r2}		; (str r2, [sp, #-4]!)
   11430:	push	{r0}		; (str r0, [sp, #-4]!)
   11434:	ldr	ip, [pc, #16]	; 1144c <__assert_fail@plt+0x448>
   11438:	push	{ip}		; (str ip, [sp, #-4]!)
   1143c:	ldr	r0, [pc, #12]	; 11450 <__assert_fail@plt+0x44c>
   11440:	ldr	r3, [pc, #12]	; 11454 <__assert_fail@plt+0x450>
   11444:	bl	10e90 <__libc_start_main@plt>
   11448:	bl	10fec <abort@plt>
   1144c:	muleq	r1, r8, r4
   11450:	andeq	r1, r1, r0, lsl r0
   11454:	andeq	r6, r1, r8, lsr r4
   11458:	ldr	r3, [pc, #20]	; 11474 <__assert_fail@plt+0x470>
   1145c:	ldr	r2, [pc, #20]	; 11478 <__assert_fail@plt+0x474>
   11460:	add	r3, pc, r3
   11464:	ldr	r2, [r3, r2]
   11468:	cmp	r2, #0
   1146c:	bxeq	lr
   11470:	b	10ea8 <__gmon_start__@plt>
   11474:	muleq	r1, r8, fp
   11478:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1147c:	ldr	r0, [pc, #24]	; 1149c <__assert_fail@plt+0x498>
   11480:	ldr	r3, [pc, #24]	; 114a0 <__assert_fail@plt+0x49c>
   11484:	cmp	r3, r0
   11488:	bxeq	lr
   1148c:	ldr	r3, [pc, #16]	; 114a4 <__assert_fail@plt+0x4a0>
   11490:	cmp	r3, #0
   11494:	bxeq	lr
   11498:	bx	r3
   1149c:	andeq	r8, r2, r8, asr #2
   114a0:	andeq	r8, r2, r8, asr #2
   114a4:	andeq	r0, r0, r0
   114a8:	ldr	r0, [pc, #36]	; 114d4 <__assert_fail@plt+0x4d0>
   114ac:	ldr	r1, [pc, #36]	; 114d8 <__assert_fail@plt+0x4d4>
   114b0:	sub	r1, r1, r0
   114b4:	asr	r1, r1, #2
   114b8:	add	r1, r1, r1, lsr #31
   114bc:	asrs	r1, r1, #1
   114c0:	bxeq	lr
   114c4:	ldr	r3, [pc, #16]	; 114dc <__assert_fail@plt+0x4d8>
   114c8:	cmp	r3, #0
   114cc:	bxeq	lr
   114d0:	bx	r3
   114d4:	andeq	r8, r2, r8, asr #2
   114d8:	andeq	r8, r2, r8, asr #2
   114dc:	andeq	r0, r0, r0
   114e0:	push	{r4, lr}
   114e4:	ldr	r4, [pc, #24]	; 11504 <__assert_fail@plt+0x500>
   114e8:	ldrb	r3, [r4]
   114ec:	cmp	r3, #0
   114f0:	popne	{r4, pc}
   114f4:	bl	1147c <__assert_fail@plt+0x478>
   114f8:	mov	r3, #1
   114fc:	strb	r3, [r4]
   11500:	pop	{r4, pc}
   11504:	andeq	r8, r2, ip, ror #2
   11508:	b	114a8 <__assert_fail@plt+0x4a4>
   1150c:	movw	r3, #33172	; 0x8194
   11510:	movt	r3, #2
   11514:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11518:	ldr	r2, [r3]
   1151c:	movw	r5, #33136	; 0x8170
   11520:	movt	r5, #2
   11524:	mov	r4, r0
   11528:	ldr	r1, [r0, #8]
   1152c:	strd	r6, [sp, #8]
   11530:	strd	r8, [sp, #16]
   11534:	strd	sl, [sp, #24]
   11538:	str	lr, [sp, #32]
   1153c:	sub	sp, sp, #36	; 0x24
   11540:	str	r2, [r5]
   11544:	str	r3, [sp, #28]
   11548:	ldr	r3, [r0, #4]
   1154c:	cmp	r1, r3
   11550:	bls	119a0 <__assert_fail@plt+0x99c>
   11554:	add	r2, r3, #1
   11558:	str	r2, [r0, #4]
   1155c:	ldrb	r0, [r3]
   11560:	mov	r1, r4
   11564:	mov	fp, #0
   11568:	bl	10ee4 <ungetc@plt>
   1156c:	ldr	r3, [r5]
   11570:	mov	r2, #0
   11574:	mov	sl, #1
   11578:	mov	r6, r2
   1157c:	movw	r7, #33020	; 0x80fc
   11580:	movt	r7, #2
   11584:	str	r2, [sp, #20]
   11588:	movw	r8, #33124	; 0x8164
   1158c:	movt	r8, #2
   11590:	ldrb	r1, [r5, #4]
   11594:	ldrd	r2, [r3]
   11598:	cmp	r3, fp
   1159c:	cmpeq	r2, sl
   115a0:	movhi	r3, #1
   115a4:	movls	r3, r6
   115a8:	eor	r3, r3, r1
   115ac:	str	r3, [sp, #24]
   115b0:	ldr	r3, [sp, #24]
   115b4:	cmp	fp, #0
   115b8:	cmpeq	sl, #1
   115bc:	movne	r9, #0
   115c0:	andeq	r9, r3, #1
   115c4:	cmp	r9, #0
   115c8:	bne	11760 <__assert_fail@plt+0x75c>
   115cc:	ldr	r1, [r5]
   115d0:	ldrd	r2, [r1]
   115d4:	cmp	r3, fp
   115d8:	cmpeq	r2, sl
   115dc:	bhi	116f4 <__assert_fail@plt+0x6f0>
   115e0:	ldr	r3, [sp, #20]
   115e4:	cmp	r3, #0
   115e8:	beq	11654 <__assert_fail@plt+0x650>
   115ec:	mov	r1, #1
   115f0:	ldr	r3, [r8]
   115f4:	ldr	r2, [r5, #20]
   115f8:	ldr	r0, [r5, #24]
   115fc:	bl	10de8 <fwrite_unlocked@plt>
   11600:	b	11654 <__assert_fail@plt+0x650>
   11604:	add	r2, r3, #1
   11608:	str	r2, [r4, #4]
   1160c:	ldrb	r9, [r3]
   11610:	ldrb	r3, [r5, #16]
   11614:	ldrb	r2, [r7]
   11618:	cmp	r3, r9
   1161c:	beq	11680 <__assert_fail@plt+0x67c>
   11620:	cmp	r2, r9
   11624:	beq	1192c <__assert_fail@plt+0x928>
   11628:	cmn	r9, #1
   1162c:	beq	11804 <__assert_fail@plt+0x800>
   11630:	ldr	r0, [r8]
   11634:	ldr	r3, [r0, #20]
   11638:	ldr	r2, [r0, #24]
   1163c:	cmp	r3, r2
   11640:	addcc	r2, r3, #1
   11644:	strcc	r2, [r0, #20]
   11648:	strbcc	r9, [r3]
   1164c:	bcs	11754 <__assert_fail@plt+0x750>
   11650:	mov	r6, r9
   11654:	ldr	r3, [r4, #4]
   11658:	ldr	r2, [r4, #8]
   1165c:	cmp	r3, r2
   11660:	bcc	11604 <__assert_fail@plt+0x600>
   11664:	mov	r0, r4
   11668:	bl	10f74 <__uflow@plt>
   1166c:	ldrb	r3, [r5, #16]
   11670:	mov	r9, r0
   11674:	ldrb	r2, [r7]
   11678:	cmp	r3, r9
   1167c:	bne	11620 <__assert_fail@plt+0x61c>
   11680:	mov	r1, #1
   11684:	cmp	r3, r2
   11688:	str	r1, [sp, #20]
   1168c:	beq	11728 <__assert_fail@plt+0x724>
   11690:	mov	r2, r6
   11694:	mov	r6, r9
   11698:	cmp	r9, r3
   1169c:	bne	11908 <__assert_fail@plt+0x904>
   116a0:	ldr	r1, [r5]
   116a4:	adds	sl, sl, #1
   116a8:	adc	fp, fp, #0
   116ac:	ldrd	r2, [r1, #8]
   116b0:	cmp	fp, r3
   116b4:	cmpeq	sl, r2
   116b8:	addhi	r1, r1, #16
   116bc:	strhi	r1, [r5]
   116c0:	b	115b0 <__assert_fail@plt+0x5ac>
   116c4:	add	r2, r3, #1
   116c8:	str	r2, [r4, #4]
   116cc:	ldrb	r0, [r3]
   116d0:	ldrb	r3, [r5, #16]
   116d4:	ldrb	r2, [r7]
   116d8:	cmp	r3, r0
   116dc:	beq	1171c <__assert_fail@plt+0x718>
   116e0:	cmp	r2, r0
   116e4:	beq	118ec <__assert_fail@plt+0x8e8>
   116e8:	cmn	r0, #1
   116ec:	beq	1180c <__assert_fail@plt+0x808>
   116f0:	mov	r6, r0
   116f4:	ldr	r3, [r4, #4]
   116f8:	ldr	r2, [r4, #8]
   116fc:	cmp	r3, r2
   11700:	bcc	116c4 <__assert_fail@plt+0x6c0>
   11704:	mov	r0, r4
   11708:	bl	10f74 <__uflow@plt>
   1170c:	ldrb	r3, [r5, #16]
   11710:	ldrb	r2, [r7]
   11714:	cmp	r3, r0
   11718:	bne	116e0 <__assert_fail@plt+0x6dc>
   1171c:	cmp	r3, r2
   11720:	mov	r9, r0
   11724:	bne	11690 <__assert_fail@plt+0x68c>
   11728:	ldr	r3, [r4, #4]
   1172c:	ldr	r2, [r4, #8]
   11730:	cmp	r3, r2
   11734:	bcs	1198c <__assert_fail@plt+0x988>
   11738:	add	r2, r3, #1
   1173c:	str	r2, [r4, #4]
   11740:	ldrb	r0, [r3]
   11744:	mov	r1, r4
   11748:	bl	10ee4 <ungetc@plt>
   1174c:	ldrb	r3, [r5, #16]
   11750:	b	11690 <__assert_fail@plt+0x68c>
   11754:	uxtb	r1, r9
   11758:	bl	10f80 <__overflow@plt>
   1175c:	b	11650 <__assert_fail@plt+0x64c>
   11760:	ldrb	r0, [r7]
   11764:	mov	r2, #0
   11768:	mvn	r3, #0
   1176c:	ldr	r1, [pc, #756]	; 11a68 <__assert_fail@plt+0xa64>
   11770:	ldrb	ip, [r5, #16]
   11774:	str	ip, [sp]
   11778:	stmib	sp, {r0, r4}
   1177c:	add	r0, r1, #4
   11780:	bl	12cdc <__assert_fail@plt+0x1cd8>
   11784:	subs	r2, r0, #0
   11788:	blt	11a00 <__assert_fail@plt+0x9fc>
   1178c:	beq	11a48 <__assert_fail@plt+0xa44>
   11790:	ldr	r0, [r5, #12]
   11794:	sub	sl, r2, #1
   11798:	ldrb	r3, [r5, #16]
   1179c:	ldrb	r1, [r0, sl]
   117a0:	cmp	r1, r3
   117a4:	beq	118b0 <__assert_fail@plt+0x8ac>
   117a8:	ldrb	r3, [r5, #4]
   117ac:	cmp	r3, #0
   117b0:	bne	11950 <__assert_fail@plt+0x94c>
   117b4:	mov	r1, #1
   117b8:	ldr	r3, [r8]
   117bc:	bl	10de8 <fwrite_unlocked@plt>
   117c0:	ldr	r3, [r5, #12]
   117c4:	ldrb	r6, [r7]
   117c8:	ldrb	r3, [r3, sl]
   117cc:	cmp	r3, r6
   117d0:	moveq	r6, r3
   117d4:	beq	117f8 <__assert_fail@plt+0x7f4>
   117d8:	ldr	r0, [r8]
   117dc:	ldr	r3, [r0, #20]
   117e0:	ldr	r2, [r0, #24]
   117e4:	cmp	r3, r2
   117e8:	addcc	r2, r3, #1
   117ec:	strcc	r2, [r0, #20]
   117f0:	strbcc	r6, [r3]
   117f4:	bcs	11a38 <__assert_fail@plt+0xa34>
   117f8:	mov	sl, #1
   117fc:	mov	fp, #0
   11800:	b	115b0 <__assert_fail@plt+0x5ac>
   11804:	mov	r3, #1
   11808:	str	r3, [sp, #20]
   1180c:	mov	r1, #1
   11810:	ldrb	r3, [r5, #16]
   11814:	mov	r2, r6
   11818:	mov	ip, #0
   1181c:	mvn	r6, #0
   11820:	ldr	lr, [sp, #20]
   11824:	str	r1, [sp, #20]
   11828:	ldrb	r1, [r7]
   1182c:	cmp	lr, #0
   11830:	bne	11850 <__assert_fail@plt+0x84c>
   11834:	ldrb	r0, [r5, #4]
   11838:	cmp	fp, #0
   1183c:	cmpeq	sl, #1
   11840:	eor	r0, r0, #1
   11844:	orrne	r0, r0, #1
   11848:	cmp	r0, #0
   1184c:	beq	1188c <__assert_fail@plt+0x888>
   11850:	subs	r2, r2, r1
   11854:	movne	r2, #1
   11858:	cmp	r3, r1
   1185c:	movne	r3, r2
   11860:	orreq	r3, r2, #1
   11864:	orrs	r3, ip, r3
   11868:	beq	119ac <__assert_fail@plt+0x9a8>
   1186c:	ldr	r0, [r8]
   11870:	ldr	r3, [r0, #20]
   11874:	ldr	r2, [r0, #24]
   11878:	cmp	r3, r2
   1187c:	addcc	r2, r3, #1
   11880:	strcc	r2, [r0, #20]
   11884:	strbcc	r1, [r3]
   11888:	bcs	119c8 <__assert_fail@plt+0x9c4>
   1188c:	ldr	r3, [sp, #20]
   11890:	cmp	r3, #0
   11894:	bne	119ac <__assert_fail@plt+0x9a8>
   11898:	ldr	r3, [sp, #28]
   1189c:	mov	sl, #1
   118a0:	mov	fp, #0
   118a4:	ldr	r3, [r3]
   118a8:	str	r3, [r5]
   118ac:	b	115b0 <__assert_fail@plt+0x5ac>
   118b0:	ldr	r1, [r5]
   118b4:	ldrd	r2, [r1]
   118b8:	cmp	r3, #0
   118bc:	cmpeq	r2, #1
   118c0:	bls	11960 <__assert_fail@plt+0x95c>
   118c4:	ldrd	r2, [r1, #8]
   118c8:	cmp	r3, #0
   118cc:	cmpeq	r2, #1
   118d0:	bhi	11940 <__assert_fail@plt+0x93c>
   118d4:	add	r1, r1, #16
   118d8:	mov	sl, #2
   118dc:	mov	fp, #0
   118e0:	mov	r6, #0
   118e4:	str	r1, [r5]
   118e8:	b	115d0 <__assert_fail@plt+0x5cc>
   118ec:	mov	r2, r6
   118f0:	mov	r9, r0
   118f4:	mov	r6, r0
   118f8:	ldrb	r3, [r5, #16]
   118fc:	ldrb	r1, [r7]
   11900:	cmp	r1, r3
   11904:	bne	11698 <__assert_fail@plt+0x694>
   11908:	ldrb	r1, [r7]
   1190c:	cmp	r1, r9
   11910:	moveq	ip, #1
   11914:	movne	ip, #0
   11918:	bne	115b0 <__assert_fail@plt+0x5ac>
   1191c:	mov	r0, #0
   11920:	ldr	lr, [sp, #20]
   11924:	str	r0, [sp, #20]
   11928:	b	1182c <__assert_fail@plt+0x828>
   1192c:	mov	r3, #1
   11930:	mov	r2, r6
   11934:	mov	r6, r9
   11938:	str	r3, [sp, #20]
   1193c:	b	118f8 <__assert_fail@plt+0x8f4>
   11940:	mov	sl, #2
   11944:	mov	fp, #0
   11948:	mov	r6, #0
   1194c:	b	115d0 <__assert_fail@plt+0x5cc>
   11950:	mov	sl, #1
   11954:	mov	fp, #0
   11958:	mov	r6, #0
   1195c:	b	115b0 <__assert_fail@plt+0x5ac>
   11960:	mov	r2, sl
   11964:	mov	r1, #1
   11968:	ldr	r3, [r8]
   1196c:	bl	10de8 <fwrite_unlocked@plt>
   11970:	ldrb	r2, [r5, #16]
   11974:	ldrb	r3, [r7]
   11978:	cmp	r2, r3
   1197c:	beq	119d0 <__assert_fail@plt+0x9cc>
   11980:	str	r9, [sp, #20]
   11984:	ldr	r1, [r5]
   11988:	b	118c4 <__assert_fail@plt+0x8c0>
   1198c:	mov	r0, r4
   11990:	bl	10f74 <__uflow@plt>
   11994:	cmn	r0, #1
   11998:	beq	1180c <__assert_fail@plt+0x808>
   1199c:	b	11744 <__assert_fail@plt+0x740>
   119a0:	bl	10f74 <__uflow@plt>
   119a4:	cmn	r0, #1
   119a8:	bne	11560 <__assert_fail@plt+0x55c>
   119ac:	add	sp, sp, #36	; 0x24
   119b0:	ldrd	r4, [sp]
   119b4:	ldrd	r6, [sp, #8]
   119b8:	ldrd	r8, [sp, #16]
   119bc:	ldrd	sl, [sp, #24]
   119c0:	add	sp, sp, #32
   119c4:	pop	{pc}		; (ldr pc, [sp], #4)
   119c8:	bl	10f80 <__overflow@plt>
   119cc:	b	1188c <__assert_fail@plt+0x888>
   119d0:	ldr	r3, [r4, #4]
   119d4:	ldr	r2, [r4, #8]
   119d8:	cmp	r3, r2
   119dc:	bcs	11a20 <__assert_fail@plt+0xa1c>
   119e0:	add	r2, r3, #1
   119e4:	str	r2, [r4, #4]
   119e8:	ldrb	r0, [r3]
   119ec:	mov	r1, r4
   119f0:	bl	10ee4 <ungetc@plt>
   119f4:	str	r9, [sp, #20]
   119f8:	ldr	r1, [r5]
   119fc:	b	118c4 <__assert_fail@plt+0x8c0>
   11a00:	ldr	r0, [r5, #12]
   11a04:	bl	12bac <__assert_fail@plt+0x1ba8>
   11a08:	ldr	r3, [r4]
   11a0c:	mov	r2, #0
   11a10:	str	r2, [r5, #12]
   11a14:	tst	r3, #48	; 0x30
   11a18:	bne	119ac <__assert_fail@plt+0x9a8>
   11a1c:	bl	15e88 <__assert_fail@plt+0x4e84>
   11a20:	mov	r0, r4
   11a24:	bl	10f74 <__uflow@plt>
   11a28:	cmn	r0, #1
   11a2c:	bne	119ec <__assert_fail@plt+0x9e8>
   11a30:	ldr	r1, [r5]
   11a34:	b	118c4 <__assert_fail@plt+0x8c0>
   11a38:	mov	r1, r6
   11a3c:	bl	10f80 <__overflow@plt>
   11a40:	ldrb	r6, [r7]
   11a44:	b	117f8 <__assert_fail@plt+0x7f4>
   11a48:	movw	r3, #25792	; 0x64c0
   11a4c:	movt	r3, #1
   11a50:	movw	r1, #26036	; 0x65b4
   11a54:	movt	r1, #1
   11a58:	movw	r0, #26048	; 0x65c0
   11a5c:	movt	r0, #1
   11a60:	movw	r2, #315	; 0x13b
   11a64:	bl	11004 <__assert_fail@plt>
   11a68:	andeq	r8, r2, r8, ror r1
   11a6c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11a70:	movw	r2, #33124	; 0x8164
   11a74:	movt	r2, #2
   11a78:	mov	r4, #0
   11a7c:	mov	r5, #0
   11a80:	strd	r6, [sp, #8]
   11a84:	strd	sl, [sp, #24]
   11a88:	movw	fp, #33172	; 0x8194
   11a8c:	movt	fp, #2
   11a90:	ldr	r3, [fp]
   11a94:	mov	r6, r0
   11a98:	mov	sl, #0
   11a9c:	strd	r8, [sp, #16]
   11aa0:	movw	r8, #33136	; 0x8170
   11aa4:	movt	r8, #2
   11aa8:	mov	r1, r8
   11aac:	movw	r9, #33020	; 0x80fc
   11ab0:	movt	r9, #2
   11ab4:	str	lr, [sp, #32]
   11ab8:	sub	sp, sp, #12
   11abc:	str	r2, [sp]
   11ac0:	str	r3, [r1], #28
   11ac4:	str	r1, [sp, #4]
   11ac8:	ldr	r3, [r6, #4]
   11acc:	ldr	r2, [r6, #8]
   11ad0:	cmp	r2, r3
   11ad4:	bls	11b88 <__assert_fail@plt+0xb84>
   11ad8:	add	r2, r3, #1
   11adc:	ldrb	r0, [r9]
   11ae0:	str	r2, [r6, #4]
   11ae4:	ldrb	r7, [r3]
   11ae8:	cmp	r7, r0
   11aec:	beq	11bf0 <__assert_fail@plt+0xbec>
   11af0:	ldr	r1, [r8]
   11af4:	adds	r4, r4, #1
   11af8:	adc	r5, r5, #0
   11afc:	ldrd	r2, [r1, #8]
   11b00:	cmp	r5, r3
   11b04:	cmpeq	r4, r2
   11b08:	addhi	r1, r1, #16
   11b0c:	ldrd	r2, [r1]
   11b10:	strhi	r1, [r8]
   11b14:	cmp	r3, r5
   11b18:	cmpeq	r2, r4
   11b1c:	bhi	11ac8 <__assert_fail@plt+0xac4>
   11b20:	ldr	r1, [sp]
   11b24:	ldr	r0, [r8, #24]
   11b28:	ldr	ip, [r1]
   11b2c:	ldr	r1, [sp, #4]
   11b30:	cmp	r0, r1
   11b34:	beq	11b50 <__assert_fail@plt+0xb4c>
   11b38:	cmp	r3, r5
   11b3c:	cmpeq	r2, r4
   11b40:	movne	sl, #0
   11b44:	cmp	sl, #0
   11b48:	moveq	sl, #1
   11b4c:	bne	11c2c <__assert_fail@plt+0xc28>
   11b50:	ldr	r3, [ip, #20]
   11b54:	ldr	r2, [ip, #24]
   11b58:	cmp	r3, r2
   11b5c:	addcc	r2, r3, #1
   11b60:	strcc	r2, [ip, #20]
   11b64:	strbcc	r7, [r3]
   11b68:	bcc	11ac8 <__assert_fail@plt+0xac4>
   11b6c:	uxtb	r1, r7
   11b70:	mov	r0, ip
   11b74:	bl	10f80 <__overflow@plt>
   11b78:	ldr	r3, [r6, #4]
   11b7c:	ldr	r2, [r6, #8]
   11b80:	cmp	r2, r3
   11b84:	bhi	11ad8 <__assert_fail@plt+0xad4>
   11b88:	mov	r0, r6
   11b8c:	bl	10f74 <__uflow@plt>
   11b90:	ldrb	r1, [r9]
   11b94:	cmp	r1, r0
   11b98:	beq	11bf0 <__assert_fail@plt+0xbec>
   11b9c:	cmn	r0, #1
   11ba0:	bne	11c78 <__assert_fail@plt+0xc74>
   11ba4:	orrs	r3, r4, r5
   11ba8:	beq	11bd4 <__assert_fail@plt+0xbd0>
   11bac:	movw	r3, #33124	; 0x8164
   11bb0:	movt	r3, #2
   11bb4:	ldr	r0, [r3]
   11bb8:	ldr	r3, [r0, #20]
   11bbc:	ldr	r2, [r0, #24]
   11bc0:	cmp	r3, r2
   11bc4:	addcc	r2, r3, #1
   11bc8:	strcc	r2, [r0, #20]
   11bcc:	strbcc	r1, [r3]
   11bd0:	bcs	11c58 <__assert_fail@plt+0xc54>
   11bd4:	add	sp, sp, #12
   11bd8:	ldrd	r4, [sp]
   11bdc:	ldrd	r6, [sp, #8]
   11be0:	ldrd	r8, [sp, #16]
   11be4:	ldrd	sl, [sp, #24]
   11be8:	add	sp, sp, #32
   11bec:	pop	{pc}		; (ldr pc, [sp], #4)
   11bf0:	ldr	r3, [sp]
   11bf4:	ldr	r3, [r3]
   11bf8:	ldr	r2, [r3, #20]
   11bfc:	ldr	r1, [r3, #24]
   11c00:	cmp	r2, r1
   11c04:	addcc	r1, r2, #1
   11c08:	strcc	r1, [r3, #20]
   11c0c:	strbcc	r0, [r2]
   11c10:	bcs	11c48 <__assert_fail@plt+0xc44>
   11c14:	ldr	r3, [fp]
   11c18:	mov	r4, #0
   11c1c:	mov	r5, #0
   11c20:	mov	sl, #0
   11c24:	str	r3, [r8]
   11c28:	b	11ac8 <__assert_fail@plt+0xac4>
   11c2c:	mov	r3, ip
   11c30:	mov	r1, #1
   11c34:	ldr	r2, [r8, #20]
   11c38:	bl	10de8 <fwrite_unlocked@plt>
   11c3c:	ldr	r3, [sp]
   11c40:	ldr	ip, [r3]
   11c44:	b	11b50 <__assert_fail@plt+0xb4c>
   11c48:	mov	r1, r0
   11c4c:	mov	r0, r3
   11c50:	bl	10f80 <__overflow@plt>
   11c54:	b	11c14 <__assert_fail@plt+0xc10>
   11c58:	add	sp, sp, #12
   11c5c:	ldrd	r4, [sp]
   11c60:	ldrd	r6, [sp, #8]
   11c64:	ldrd	r8, [sp, #16]
   11c68:	ldrd	sl, [sp, #24]
   11c6c:	ldr	lr, [sp, #32]
   11c70:	add	sp, sp, #36	; 0x24
   11c74:	b	10f80 <__overflow@plt>
   11c78:	mov	r7, r0
   11c7c:	b	11af0 <__assert_fail@plt+0xaec>
   11c80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11c84:	mov	r5, r1
   11c88:	movw	r1, #28700	; 0x701c
   11c8c:	movt	r1, #1
   11c90:	strd	r6, [sp, #8]
   11c94:	mov	r6, r0
   11c98:	str	r8, [sp, #16]
   11c9c:	str	lr, [sp, #20]
   11ca0:	bl	10d7c <strcmp@plt>
   11ca4:	mov	r4, r0
   11ca8:	bl	10ef0 <__errno_location@plt>
   11cac:	cmp	r4, #0
   11cb0:	mov	r7, r0
   11cb4:	bne	11d80 <__assert_fail@plt+0xd7c>
   11cb8:	movw	r3, #33120	; 0x8160
   11cbc:	movt	r3, #2
   11cc0:	ldr	r4, [r3]
   11cc4:	movw	r2, #33136	; 0x8170
   11cc8:	movt	r2, #2
   11ccc:	mov	r1, #1
   11cd0:	strb	r1, [r2, #29]
   11cd4:	mov	r1, #2
   11cd8:	mov	r0, r4
   11cdc:	bl	12a48 <__assert_fail@plt+0x1a44>
   11ce0:	mov	r0, r4
   11ce4:	blx	r5
   11ce8:	ldr	r3, [r4]
   11cec:	movw	r1, #28700	; 0x701c
   11cf0:	movt	r1, #1
   11cf4:	mov	r0, r6
   11cf8:	ldr	r5, [r7]
   11cfc:	tst	r3, #32
   11d00:	moveq	r5, #0
   11d04:	bl	10d7c <strcmp@plt>
   11d08:	cmp	r0, #0
   11d0c:	mov	r0, r4
   11d10:	beq	11d40 <__assert_fail@plt+0xd3c>
   11d14:	bl	12a98 <__assert_fail@plt+0x1a94>
   11d18:	cmn	r0, #1
   11d1c:	ldreq	r5, [r7]
   11d20:	cmp	r5, #0
   11d24:	moveq	r0, #1
   11d28:	bne	11d50 <__assert_fail@plt+0xd4c>
   11d2c:	ldrd	r4, [sp]
   11d30:	ldrd	r6, [sp, #8]
   11d34:	ldr	r8, [sp, #16]
   11d38:	add	sp, sp, #20
   11d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   11d40:	bl	10fb0 <clearerr_unlocked@plt>
   11d44:	cmp	r5, #0
   11d48:	moveq	r0, #1
   11d4c:	beq	11d2c <__assert_fail@plt+0xd28>
   11d50:	mov	r2, r6
   11d54:	mov	r1, #3
   11d58:	mov	r0, #0
   11d5c:	bl	1528c <__assert_fail@plt+0x4288>
   11d60:	mov	r3, r0
   11d64:	mov	r1, r5
   11d68:	mov	r0, #0
   11d6c:	movw	r2, #28976	; 0x7130
   11d70:	movt	r2, #1
   11d74:	bl	10e78 <error@plt>
   11d78:	mov	r0, #0
   11d7c:	b	11d2c <__assert_fail@plt+0xd28>
   11d80:	movw	r1, #28456	; 0x6f28
   11d84:	movt	r1, #1
   11d88:	mov	r0, r6
   11d8c:	bl	10fbc <fopen64@plt>
   11d90:	subs	r4, r0, #0
   11d94:	bne	11cd4 <__assert_fail@plt+0xcd0>
   11d98:	ldr	r5, [r7]
   11d9c:	mov	r2, r6
   11da0:	mov	r1, #3
   11da4:	bl	1528c <__assert_fail@plt+0x4288>
   11da8:	mov	r3, r0
   11dac:	movw	r2, #28976	; 0x7130
   11db0:	movt	r2, #1
   11db4:	mov	r0, r4
   11db8:	mov	r1, r5
   11dbc:	bl	10e78 <error@plt>
   11dc0:	mov	r0, r4
   11dc4:	b	11d2c <__assert_fail@plt+0xd28>
   11dc8:	subs	r4, r0, #0
   11dcc:	str	r7, [sp, #-8]!
   11dd0:	str	lr, [sp, #4]
   11dd4:	sub	sp, sp, #56	; 0x38
   11dd8:	beq	11e20 <__assert_fail@plt+0xe1c>
   11ddc:	movw	r3, #33112	; 0x8158
   11de0:	movt	r3, #2
   11de4:	ldr	r5, [r3]
   11de8:	mov	r2, #5
   11dec:	movw	r1, #26068	; 0x65d4
   11df0:	movt	r1, #1
   11df4:	mov	r0, #0
   11df8:	bl	10e0c <dcgettext@plt>
   11dfc:	movw	r3, #33192	; 0x81a8
   11e00:	movt	r3, #2
   11e04:	mov	r2, r0
   11e08:	mov	r1, #1
   11e0c:	ldr	r3, [r3]
   11e10:	mov	r0, r5
   11e14:	bl	10f38 <__fprintf_chk@plt>
   11e18:	mov	r0, r4
   11e1c:	bl	10ecc <exit@plt>
   11e20:	mov	r2, #5
   11e24:	movw	r1, #26108	; 0x65fc
   11e28:	movt	r1, #1
   11e2c:	movw	r5, #33124	; 0x8164
   11e30:	movt	r5, #2
   11e34:	bl	10e0c <dcgettext@plt>
   11e38:	movw	r3, #33192	; 0x81a8
   11e3c:	movt	r3, #2
   11e40:	mov	r1, r0
   11e44:	mov	r0, #1
   11e48:	ldr	r2, [r3]
   11e4c:	bl	10f20 <__printf_chk@plt>
   11e50:	mov	r2, #5
   11e54:	movw	r1, #26140	; 0x661c
   11e58:	movt	r1, #1
   11e5c:	mov	r0, r4
   11e60:	bl	10e0c <dcgettext@plt>
   11e64:	ldr	r1, [r5]
   11e68:	bl	10d70 <fputs_unlocked@plt>
   11e6c:	mov	r2, #5
   11e70:	movw	r1, #26208	; 0x6660
   11e74:	movt	r1, #1
   11e78:	mov	r0, r4
   11e7c:	bl	10e0c <dcgettext@plt>
   11e80:	ldr	r1, [r5]
   11e84:	bl	10d70 <fputs_unlocked@plt>
   11e88:	mov	r2, #5
   11e8c:	movw	r1, #26264	; 0x6698
   11e90:	movt	r1, #1
   11e94:	mov	r0, r4
   11e98:	bl	10e0c <dcgettext@plt>
   11e9c:	ldr	r1, [r5]
   11ea0:	bl	10d70 <fputs_unlocked@plt>
   11ea4:	mov	r2, #5
   11ea8:	movw	r1, #26340	; 0x66e4
   11eac:	movt	r1, #1
   11eb0:	mov	r0, r4
   11eb4:	bl	10e0c <dcgettext@plt>
   11eb8:	ldr	r1, [r5]
   11ebc:	bl	10d70 <fputs_unlocked@plt>
   11ec0:	mov	r2, #5
   11ec4:	movw	r1, #26520	; 0x6798
   11ec8:	movt	r1, #1
   11ecc:	mov	r0, r4
   11ed0:	bl	10e0c <dcgettext@plt>
   11ed4:	ldr	r1, [r5]
   11ed8:	bl	10d70 <fputs_unlocked@plt>
   11edc:	mov	r2, #5
   11ee0:	movw	r1, #26760	; 0x6888
   11ee4:	movt	r1, #1
   11ee8:	mov	r0, r4
   11eec:	bl	10e0c <dcgettext@plt>
   11ef0:	ldr	r1, [r5]
   11ef4:	bl	10d70 <fputs_unlocked@plt>
   11ef8:	mov	r2, #5
   11efc:	movw	r1, #26876	; 0x68fc
   11f00:	movt	r1, #1
   11f04:	mov	r0, r4
   11f08:	bl	10e0c <dcgettext@plt>
   11f0c:	ldr	r1, [r5]
   11f10:	bl	10d70 <fputs_unlocked@plt>
   11f14:	mov	r2, #5
   11f18:	movw	r1, #27088	; 0x69d0
   11f1c:	movt	r1, #1
   11f20:	mov	r0, r4
   11f24:	bl	10e0c <dcgettext@plt>
   11f28:	ldr	r1, [r5]
   11f2c:	bl	10d70 <fputs_unlocked@plt>
   11f30:	mov	r2, #5
   11f34:	movw	r1, #27152	; 0x6a10
   11f38:	movt	r1, #1
   11f3c:	mov	r0, r4
   11f40:	bl	10e0c <dcgettext@plt>
   11f44:	ldr	r1, [r5]
   11f48:	bl	10d70 <fputs_unlocked@plt>
   11f4c:	mov	r2, #5
   11f50:	movw	r1, #27200	; 0x6a40
   11f54:	movt	r1, #1
   11f58:	mov	r0, r4
   11f5c:	bl	10e0c <dcgettext@plt>
   11f60:	ldr	r1, [r5]
   11f64:	bl	10d70 <fputs_unlocked@plt>
   11f68:	mov	r2, #5
   11f6c:	movw	r1, #27256	; 0x6a78
   11f70:	movt	r1, #1
   11f74:	mov	r0, r4
   11f78:	bl	10e0c <dcgettext@plt>
   11f7c:	ldr	r1, [r5]
   11f80:	bl	10d70 <fputs_unlocked@plt>
   11f84:	mov	r2, #5
   11f88:	movw	r1, #27460	; 0x6b44
   11f8c:	movt	r1, #1
   11f90:	mov	r0, r4
   11f94:	bl	10e0c <dcgettext@plt>
   11f98:	ldr	r1, [r5]
   11f9c:	bl	10d70 <fputs_unlocked@plt>
   11fa0:	movw	r0, #25792	; 0x64c0
   11fa4:	movt	r0, #1
   11fa8:	ldr	ip, [r0, #12]
   11fac:	ldrd	r2, [r0, #20]
   11fb0:	ldr	r6, [r0, #16]
   11fb4:	subs	r1, ip, #0
   11fb8:	str	ip, [sp]
   11fbc:	ldrd	r8, [r0, #28]
   11fc0:	strd	r2, [sp, #8]
   11fc4:	ldrd	r2, [r0, #36]	; 0x24
   11fc8:	str	r6, [sp, #4]
   11fcc:	ldrd	r6, [r0, #44]	; 0x2c
   11fd0:	strd	r8, [sp, #16]
   11fd4:	ldrd	r8, [r0, #52]	; 0x34
   11fd8:	strd	r2, [sp, #24]
   11fdc:	ldrd	r2, [r0, #60]	; 0x3c
   11fe0:	strd	r6, [sp, #32]
   11fe4:	movwne	r7, #26064	; 0x65d0
   11fe8:	mov	r6, sp
   11fec:	movtne	r7, #1
   11ff0:	strd	r8, [sp, #40]	; 0x28
   11ff4:	strd	r2, [sp, #48]	; 0x30
   11ff8:	bne	120f0 <__assert_fail@plt+0x10ec>
   11ffc:	ldr	r6, [r6, #4]
   12000:	movw	r1, #27724	; 0x6c4c
   12004:	movt	r1, #1
   12008:	mov	r2, #5
   1200c:	cmp	r6, #0
   12010:	beq	12104 <__assert_fail@plt+0x1100>
   12014:	mov	r0, #0
   12018:	bl	10e0c <dcgettext@plt>
   1201c:	mov	r1, r0
   12020:	movw	r3, #27748	; 0x6c64
   12024:	movt	r3, #1
   12028:	movw	r2, #27788	; 0x6c8c
   1202c:	movt	r2, #1
   12030:	mov	r0, #1
   12034:	bl	10f20 <__printf_chk@plt>
   12038:	mov	r1, #0
   1203c:	mov	r0, #5
   12040:	bl	10f8c <setlocale@plt>
   12044:	cmp	r0, #0
   12048:	movweq	r7, #26064	; 0x65d0
   1204c:	movteq	r7, #1
   12050:	beq	12074 <__assert_fail@plt+0x1070>
   12054:	movw	r1, #27804	; 0x6c9c
   12058:	movt	r1, #1
   1205c:	mov	r2, #3
   12060:	movw	r7, #26064	; 0x65d0
   12064:	movt	r7, #1
   12068:	bl	10fe0 <strncmp@plt>
   1206c:	cmp	r0, #0
   12070:	bne	121bc <__assert_fail@plt+0x11b8>
   12074:	mov	r2, #5
   12078:	movw	r1, #27880	; 0x6ce8
   1207c:	movt	r1, #1
   12080:	mov	r0, #0
   12084:	bl	10e0c <dcgettext@plt>
   12088:	mov	r1, r0
   1208c:	movw	r3, #26064	; 0x65d0
   12090:	movt	r3, #1
   12094:	movw	r2, #27748	; 0x6c64
   12098:	movt	r2, #1
   1209c:	mov	r0, #1
   120a0:	bl	10f20 <__printf_chk@plt>
   120a4:	mov	r2, #5
   120a8:	movw	r1, #27908	; 0x6d04
   120ac:	movt	r1, #1
   120b0:	mov	r0, #0
   120b4:	bl	10e0c <dcgettext@plt>
   120b8:	movw	r2, #28328	; 0x6ea8
   120bc:	movt	r2, #1
   120c0:	cmp	r6, r7
   120c4:	movw	r3, #26516	; 0x6794
   120c8:	movt	r3, #1
   120cc:	mov	r1, r0
   120d0:	moveq	r3, r2
   120d4:	mov	r2, r6
   120d8:	mov	r0, #1
   120dc:	bl	10f20 <__printf_chk@plt>
   120e0:	b	11e18 <__assert_fail@plt+0xe14>
   120e4:	ldr	r1, [r6, #8]!
   120e8:	cmp	r1, #0
   120ec:	beq	11ffc <__assert_fail@plt+0xff8>
   120f0:	mov	r0, r7
   120f4:	bl	10d7c <strcmp@plt>
   120f8:	cmp	r0, #0
   120fc:	bne	120e4 <__assert_fail@plt+0x10e0>
   12100:	b	11ffc <__assert_fail@plt+0xff8>
   12104:	mov	r0, r6
   12108:	bl	10e0c <dcgettext@plt>
   1210c:	mov	r1, r0
   12110:	movw	r3, #27748	; 0x6c64
   12114:	movt	r3, #1
   12118:	movw	r2, #27788	; 0x6c8c
   1211c:	movt	r2, #1
   12120:	mov	r0, #1
   12124:	bl	10f20 <__printf_chk@plt>
   12128:	mov	r1, r6
   1212c:	mov	r0, #5
   12130:	bl	10f8c <setlocale@plt>
   12134:	cmp	r0, #0
   12138:	beq	12154 <__assert_fail@plt+0x1150>
   1213c:	movw	r1, #27804	; 0x6c9c
   12140:	movt	r1, #1
   12144:	mov	r2, #3
   12148:	bl	10fe0 <strncmp@plt>
   1214c:	cmp	r0, #0
   12150:	bne	121b0 <__assert_fail@plt+0x11ac>
   12154:	mov	r2, #5
   12158:	movw	r1, #27880	; 0x6ce8
   1215c:	movt	r1, #1
   12160:	mov	r0, #0
   12164:	bl	10e0c <dcgettext@plt>
   12168:	mov	r1, r0
   1216c:	movw	r3, #26064	; 0x65d0
   12170:	movt	r3, #1
   12174:	movw	r2, #27748	; 0x6c64
   12178:	movt	r2, #1
   1217c:	mov	r0, #1
   12180:	bl	10f20 <__printf_chk@plt>
   12184:	movw	r1, #27908	; 0x6d04
   12188:	movt	r1, #1
   1218c:	mov	r2, #5
   12190:	mov	r0, #0
   12194:	bl	10e0c <dcgettext@plt>
   12198:	movw	r6, #26064	; 0x65d0
   1219c:	movt	r6, #1
   121a0:	movw	r3, #28328	; 0x6ea8
   121a4:	movt	r3, #1
   121a8:	mov	r1, r0
   121ac:	b	120d4 <__assert_fail@plt+0x10d0>
   121b0:	movw	r7, #26064	; 0x65d0
   121b4:	movt	r7, #1
   121b8:	mov	r6, r7
   121bc:	mov	r2, #5
   121c0:	movw	r1, #27808	; 0x6ca0
   121c4:	movt	r1, #1
   121c8:	mov	r0, #0
   121cc:	bl	10e0c <dcgettext@plt>
   121d0:	ldr	r1, [r5]
   121d4:	bl	10d70 <fputs_unlocked@plt>
   121d8:	b	12074 <__assert_fail@plt+0x1070>
   121dc:	andeq	r0, r0, r0
   121e0:	ldr	r2, [r0]
   121e4:	ldr	r3, [r1]
   121e8:	cmp	r2, r3
   121ec:	blt	121fc <__assert_fail@plt+0x11f8>
   121f0:	movgt	r0, #1
   121f4:	movle	r0, #0
   121f8:	bx	lr
   121fc:	mvn	r0, #0
   12200:	bx	lr
   12204:	str	r4, [sp, #-24]!	; 0xffffffe8
   12208:	movw	r4, #33168	; 0x8190
   1220c:	movt	r4, #2
   12210:	strd	r6, [sp, #4]
   12214:	mov	r6, r0
   12218:	mov	r7, r1
   1221c:	strd	r8, [sp, #12]
   12220:	mov	r9, r3
   12224:	mov	r8, r2
   12228:	ldr	ip, [r4]
   1222c:	str	lr, [sp, #20]
   12230:	ldmib	r4, {r0, r3}
   12234:	cmp	ip, r3
   12238:	beq	12268 <__assert_fail@plt+0x1264>
   1223c:	lsl	r3, ip, #4
   12240:	add	ip, ip, #1
   12244:	add	r2, r0, r3
   12248:	strd	r6, [r0, r3]
   1224c:	str	ip, [r4]
   12250:	ldr	r4, [sp]
   12254:	ldrd	r6, [sp, #4]
   12258:	strd	r8, [r2, #8]
   1225c:	ldrd	r8, [sp, #12]
   12260:	add	sp, sp, #20
   12264:	pop	{pc}		; (ldr pc, [sp], #4)
   12268:	mov	r2, #16
   1226c:	add	r1, r4, #8
   12270:	bl	15b98 <__assert_fail@plt+0x4b94>
   12274:	str	r0, [r4, #4]
   12278:	ldr	ip, [r4]
   1227c:	b	1223c <__assert_fail@plt+0x1238>
   12280:	ands	r3, r1, #1
   12284:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12288:	mov	r5, r0
   1228c:	strd	r6, [sp, #8]
   12290:	strd	r8, [sp, #16]
   12294:	strd	sl, [sp, #24]
   12298:	str	lr, [sp, #32]
   1229c:	sub	sp, sp, #44	; 0x2c
   122a0:	str	r3, [sp, #24]
   122a4:	str	r1, [sp, #28]
   122a8:	beq	122c0 <__assert_fail@plt+0x12bc>
   122ac:	movw	r1, #28700	; 0x701c
   122b0:	movt	r1, #1
   122b4:	bl	10d7c <strcmp@plt>
   122b8:	cmp	r0, #0
   122bc:	beq	12658 <__assert_fail@plt+0x1654>
   122c0:	mov	r8, #0
   122c4:	mov	r9, #0
   122c8:	mov	sl, #0
   122cc:	mov	r1, #0
   122d0:	mov	r3, sl
   122d4:	mov	r2, r1
   122d8:	mov	r6, #1
   122dc:	mov	r7, #0
   122e0:	mov	fp, r1
   122e4:	mov	r1, r5
   122e8:	ldrb	r4, [r5], #1
   122ec:	cmp	r4, #45	; 0x2d
   122f0:	beq	123a4 <__assert_fail@plt+0x13a0>
   122f4:	cmp	r4, #44	; 0x2c
   122f8:	str	r1, [sp, #4]
   122fc:	beq	12334 <__assert_fail@plt+0x1330>
   12300:	str	r3, [sp, #8]
   12304:	str	r2, [sp, #12]
   12308:	bl	10ec0 <__ctype_b_loc@plt>
   1230c:	ldr	ip, [r0]
   12310:	lsl	r0, r4, #1
   12314:	cmp	r4, #0
   12318:	ldmib	sp, {r1, r3}
   1231c:	ldr	r2, [sp, #12]
   12320:	ldrh	r0, [ip, r0]
   12324:	moveq	r0, #1
   12328:	andne	r0, r0, #1
   1232c:	cmp	r0, #0
   12330:	beq	125a0 <__assert_fail@plt+0x159c>
   12334:	cmp	r3, #0
   12338:	beq	123e0 <__assert_fail@plt+0x13dc>
   1233c:	orr	sl, sl, r2
   12340:	tst	sl, #255	; 0xff
   12344:	bne	12558 <__assert_fail@plt+0x1554>
   12348:	ldr	r3, [sp, #24]
   1234c:	cmp	r3, #0
   12350:	beq	12858 <__assert_fail@plt+0x1854>
   12354:	mov	r6, #1
   12358:	mov	r7, #0
   1235c:	mvn	r2, #0
   12360:	mvn	r3, #0
   12364:	mov	r0, r6
   12368:	mov	r1, r7
   1236c:	bl	12204 <__assert_fail@plt+0x1200>
   12370:	ldrb	ip, [r5, #-1]
   12374:	cmp	ip, #0
   12378:	beq	12408 <__assert_fail@plt+0x1404>
   1237c:	mov	r1, r5
   12380:	ldrb	r4, [r5], #1
   12384:	mov	fp, #0
   12388:	mov	r8, #0
   1238c:	mov	r9, #0
   12390:	mov	r3, fp
   12394:	mov	r2, fp
   12398:	mov	sl, fp
   1239c:	cmp	r4, #45	; 0x2d
   123a0:	bne	122f4 <__assert_fail@plt+0x12f0>
   123a4:	cmp	r3, #0
   123a8:	bne	127c0 <__assert_fail@plt+0x17bc>
   123ac:	orrs	r1, r8, r9
   123b0:	movne	fp, #0
   123b4:	andeq	fp, sl, #1
   123b8:	cmp	fp, #0
   123bc:	bne	12758 <__assert_fail@plt+0x1754>
   123c0:	cmp	sl, #0
   123c4:	beq	12584 <__assert_fail@plt+0x1580>
   123c8:	mov	r6, r8
   123cc:	mov	r7, r9
   123d0:	mov	r3, sl
   123d4:	mov	r8, #0
   123d8:	mov	r9, #0
   123dc:	b	122e4 <__assert_fail@plt+0x12e0>
   123e0:	orrs	r2, r8, r9
   123e4:	beq	12758 <__assert_fail@plt+0x1754>
   123e8:	mov	r2, r8
   123ec:	mov	r3, r9
   123f0:	mov	r0, r8
   123f4:	mov	r1, r9
   123f8:	bl	12204 <__assert_fail@plt+0x1200>
   123fc:	ldrb	ip, [r5, #-1]
   12400:	cmp	ip, #0
   12404:	bne	1237c <__assert_fail@plt+0x1378>
   12408:	movw	r4, #33168	; 0x8190
   1240c:	movt	r4, #2
   12410:	ldr	r1, [r4]
   12414:	cmp	r1, #0
   12418:	beq	12894 <__assert_fail@plt+0x1890>
   1241c:	movw	r3, #8672	; 0x21e0
   12420:	movt	r3, #1
   12424:	ldr	r0, [r4, #4]
   12428:	mov	r2, #16
   1242c:	mov	r8, ip
   12430:	bl	10fc8 <qsort@plt>
   12434:	ldr	fp, [r4]
   12438:	ldr	sl, [r4, #4]
   1243c:	mov	r1, sl
   12440:	cmp	r8, fp
   12444:	bcs	124f4 <__assert_fail@plt+0x14f0>
   12448:	add	r8, r8, #1
   1244c:	cmp	r8, fp
   12450:	bcs	12440 <__assert_fail@plt+0x143c>
   12454:	lsl	r5, r8, #4
   12458:	sub	r9, r5, #16
   1245c:	ldrd	r6, [r1, r5]
   12460:	add	r0, r1, r5
   12464:	add	ip, r1, r9
   12468:	ldrd	r2, [ip, #8]
   1246c:	cmp	r3, r7
   12470:	cmpeq	r2, r6
   12474:	bcc	12440 <__assert_fail@plt+0x143c>
   12478:	movw	lr, #65535	; 0xffff
   1247c:	movt	lr, #4095	; 0xfff
   12480:	sub	lr, lr, r8
   12484:	add	sl, r5, #16
   12488:	str	lr, [sp, #4]
   1248c:	ldrd	r6, [r0, #8]
   12490:	add	r1, r1, sl
   12494:	cmp	r7, r3
   12498:	cmpeq	r6, r2
   1249c:	movcc	r7, r3
   124a0:	ldr	r3, [sp, #4]
   124a4:	movcc	r6, r2
   124a8:	strd	r6, [ip, #8]
   124ac:	add	r2, fp, r3
   124b0:	lsl	r2, r2, #4
   124b4:	bl	10da0 <memmove@plt>
   124b8:	ldr	fp, [r4]
   124bc:	ldr	r1, [r4, #4]
   124c0:	sub	fp, fp, #1
   124c4:	cmp	fp, r8
   124c8:	str	fp, [r4]
   124cc:	bls	12440 <__assert_fail@plt+0x143c>
   124d0:	add	ip, r1, r9
   124d4:	ldrd	r6, [r1, r5]
   124d8:	add	r0, r1, r5
   124dc:	ldrd	r2, [ip, #8]
   124e0:	cmp	r7, r3
   124e4:	cmpeq	r6, r2
   124e8:	bls	1248c <__assert_fail@plt+0x1488>
   124ec:	cmp	r8, fp
   124f0:	bcc	12448 <__assert_fail@plt+0x1444>
   124f4:	ldr	r3, [sp, #28]
   124f8:	mov	sl, r1
   124fc:	tst	r3, #2
   12500:	bne	1266c <__assert_fail@plt+0x1668>
   12504:	add	fp, fp, #1
   12508:	mov	r0, sl
   1250c:	lsl	r1, fp, #4
   12510:	mvn	r6, #0
   12514:	mvn	r7, #0
   12518:	str	fp, [r4]
   1251c:	bl	15a7c <__assert_fail@plt+0x4a78>
   12520:	ldr	r3, [r4]
   12524:	str	r0, [r4, #4]
   12528:	sub	r3, r3, #-268435455	; 0xf0000001
   1252c:	lsl	r3, r3, #4
   12530:	add	r2, r0, r3
   12534:	strd	r6, [r2, #8]
   12538:	strd	r6, [r0, r3]
   1253c:	add	sp, sp, #44	; 0x2c
   12540:	ldrd	r4, [sp]
   12544:	ldrd	r6, [sp, #8]
   12548:	ldrd	r8, [sp, #16]
   1254c:	ldrd	sl, [sp, #24]
   12550:	add	sp, sp, #32
   12554:	pop	{pc}		; (ldr pc, [sp], #4)
   12558:	cmp	r2, #0
   1255c:	beq	1235c <__assert_fail@plt+0x1358>
   12560:	cmp	r7, r9
   12564:	cmpeq	r6, r8
   12568:	bhi	12794 <__assert_fail@plt+0x1790>
   1256c:	mov	r2, r8
   12570:	mov	r3, r9
   12574:	mov	r0, r6
   12578:	mov	r1, r7
   1257c:	bl	12204 <__assert_fail@plt+0x1200>
   12580:	b	12370 <__assert_fail@plt+0x136c>
   12584:	mov	fp, sl
   12588:	mov	r8, #0
   1258c:	mov	r9, #0
   12590:	mov	r3, #1
   12594:	mov	r6, #1
   12598:	mov	r7, #0
   1259c:	b	122e4 <__assert_fail@plt+0x12e0>
   125a0:	sub	r4, r4, #48	; 0x30
   125a4:	cmp	r4, #9
   125a8:	bhi	128b8 <__assert_fail@plt+0x18b4>
   125ac:	cmp	fp, #0
   125b0:	movw	ip, #33168	; 0x8190
   125b4:	movt	ip, #2
   125b8:	beq	12650 <__assert_fail@plt+0x164c>
   125bc:	ldr	r0, [ip, #12]
   125c0:	cmp	r0, #0
   125c4:	beq	12650 <__assert_fail@plt+0x164c>
   125c8:	add	r1, pc, #864	; 0x360
   125cc:	ldrd	r0, [r1]
   125d0:	cmp	r3, #0
   125d4:	moveq	sl, #1
   125d8:	movne	r2, r3
   125dc:	cmp	r9, r1
   125e0:	cmpeq	r8, r0
   125e4:	bhi	127e4 <__assert_fail@plt+0x17e0>
   125e8:	lsl	r0, r9, #2
   125ec:	lsl	r1, r8, #2
   125f0:	orr	r0, r0, r8, lsr #30
   125f4:	adds	r1, r1, r8
   125f8:	adc	r0, r0, r9
   125fc:	adds	r1, r1, r1
   12600:	str	r1, [sp, #16]
   12604:	adc	r1, r0, r0
   12608:	str	r1, [sp, #20]
   1260c:	ldrd	r0, [sp, #16]
   12610:	adds	r0, r0, r4
   12614:	adc	r1, r1, r4, asr #31
   12618:	cmp	r1, r9
   1261c:	and	lr, r0, r1
   12620:	cmpeq	r0, r8
   12624:	movcc	r4, #1
   12628:	movcs	r4, #0
   1262c:	cmn	lr, #1
   12630:	movne	lr, #0
   12634:	moveq	lr, #1
   12638:	orrs	lr, r4, lr
   1263c:	bne	127e4 <__assert_fail@plt+0x17e0>
   12640:	mov	r8, r0
   12644:	mov	r9, r1
   12648:	mov	fp, #1
   1264c:	b	122e4 <__assert_fail@plt+0x12e0>
   12650:	str	r1, [ip, #12]
   12654:	b	125c8 <__assert_fail@plt+0x15c4>
   12658:	add	r5, r5, #1
   1265c:	mov	r8, #1
   12660:	mov	r9, #0
   12664:	mov	sl, #1
   12668:	b	122cc <__assert_fail@plt+0x12c8>
   1266c:	ldrd	r6, [r1]
   12670:	mov	r3, #0
   12674:	str	r3, [r4]
   12678:	str	r3, [r4, #4]
   1267c:	str	r3, [r4, #8]
   12680:	cmp	r7, #0
   12684:	cmpeq	r6, #1
   12688:	bhi	12740 <__assert_fail@plt+0x173c>
   1268c:	cmp	fp, #1
   12690:	bls	126f0 <__assert_fail@plt+0x16ec>
   12694:	add	r5, sl, fp, lsl #4
   12698:	mov	r8, sl
   1269c:	mov	r9, fp
   126a0:	str	sl, [sp, #4]
   126a4:	sub	r5, r5, #16
   126a8:	ldr	r3, [r8, #8]
   126ac:	ldr	r2, [r8, #12]
   126b0:	ldrd	sl, [r8, #16]
   126b4:	adds	r6, r3, #1
   126b8:	adc	r7, r2, #0
   126bc:	cmp	r7, fp
   126c0:	cmpeq	r6, sl
   126c4:	beq	126dc <__assert_fail@plt+0x16d8>
   126c8:	subs	r2, sl, #1
   126cc:	mov	r0, r6
   126d0:	mov	r1, r7
   126d4:	sbc	r3, fp, #0
   126d8:	bl	12204 <__assert_fail@plt+0x1200>
   126dc:	add	r8, r8, #16
   126e0:	cmp	r5, r8
   126e4:	bne	126a8 <__assert_fail@plt+0x16a4>
   126e8:	ldr	sl, [sp, #4]
   126ec:	mov	fp, r9
   126f0:	add	fp, sl, fp, lsl #4
   126f4:	mvn	r3, #0
   126f8:	mvn	r2, #0
   126fc:	ldrd	r6, [fp, #-8]
   12700:	cmp	r7, r3
   12704:	cmpeq	r6, r2
   12708:	bne	12720 <__assert_fail@plt+0x171c>
   1270c:	mov	r0, sl
   12710:	bl	12bac <__assert_fail@plt+0x1ba8>
   12714:	ldr	fp, [r4]
   12718:	ldr	sl, [r4, #4]
   1271c:	b	12504 <__assert_fail@plt+0x1500>
   12720:	adds	r0, r6, #1
   12724:	adc	r1, r7, #0
   12728:	bl	12204 <__assert_fail@plt+0x1200>
   1272c:	mov	r0, sl
   12730:	bl	12bac <__assert_fail@plt+0x1ba8>
   12734:	ldr	fp, [r4]
   12738:	ldr	sl, [r4, #4]
   1273c:	b	12504 <__assert_fail@plt+0x1500>
   12740:	subs	r2, r6, #1
   12744:	mov	r0, #1
   12748:	mov	r1, #0
   1274c:	sbc	r3, r7, #0
   12750:	bl	12204 <__assert_fail@plt+0x1200>
   12754:	b	1268c <__assert_fail@plt+0x1688>
   12758:	ldr	r2, [sp, #28]
   1275c:	mov	r0, r3
   12760:	tst	r2, #4
   12764:	mov	r2, #5
   12768:	movwne	r1, #28592	; 0x6fb0
   1276c:	movweq	r1, #28640	; 0x6fe0
   12770:	movtne	r1, #1
   12774:	movteq	r1, #1
   12778:	bl	10e0c <dcgettext@plt>
   1277c:	mov	r1, #0
   12780:	mov	r2, r0
   12784:	mov	r0, r1
   12788:	bl	10e78 <error@plt>
   1278c:	mov	r0, #1
   12790:	bl	11dc8 <__assert_fail@plt+0xdc4>
   12794:	movw	r1, #28704	; 0x7020
   12798:	movt	r1, #1
   1279c:	mov	r2, #5
   127a0:	mov	r0, #0
   127a4:	bl	10e0c <dcgettext@plt>
   127a8:	mov	r1, #0
   127ac:	mov	r2, r0
   127b0:	mov	r0, r1
   127b4:	bl	10e78 <error@plt>
   127b8:	mov	r0, #1
   127bc:	bl	11dc8 <__assert_fail@plt+0xdc4>
   127c0:	ldr	r3, [sp, #28]
   127c4:	ands	r0, r3, #4
   127c8:	beq	12868 <__assert_fail@plt+0x1864>
   127cc:	movw	r1, #28540	; 0x6f7c
   127d0:	movt	r1, #1
   127d4:	mov	r2, #5
   127d8:	mov	r0, #0
   127dc:	bl	10e0c <dcgettext@plt>
   127e0:	b	1277c <__assert_fail@plt+0x1778>
   127e4:	ldr	r4, [ip, #12]
   127e8:	movw	r1, #28732	; 0x703c
   127ec:	movt	r1, #1
   127f0:	mov	r0, r4
   127f4:	bl	10ff8 <strspn@plt>
   127f8:	mov	r1, r0
   127fc:	mov	r0, r4
   12800:	bl	15e10 <__assert_fail@plt+0x4e0c>
   12804:	ldr	r3, [sp, #28]
   12808:	mov	r4, r0
   1280c:	ands	r0, r3, #4
   12810:	beq	1287c <__assert_fail@plt+0x1878>
   12814:	movw	r1, #28744	; 0x7048
   12818:	movt	r1, #1
   1281c:	mov	r2, #5
   12820:	mov	r0, #0
   12824:	bl	10e0c <dcgettext@plt>
   12828:	mov	r5, r0
   1282c:	mov	r0, r4
   12830:	bl	15464 <__assert_fail@plt+0x4460>
   12834:	mov	r1, #0
   12838:	mov	r3, r0
   1283c:	mov	r2, r5
   12840:	mov	r0, r1
   12844:	bl	10e78 <error@plt>
   12848:	mov	r0, r4
   1284c:	bl	12bac <__assert_fail@plt+0x1ba8>
   12850:	mov	r0, #1
   12854:	bl	11dc8 <__assert_fail@plt+0xdc4>
   12858:	movw	r1, #28668	; 0x6ffc
   1285c:	movt	r1, #1
   12860:	mov	r2, #5
   12864:	b	127a0 <__assert_fail@plt+0x179c>
   12868:	movw	r1, #28572	; 0x6f9c
   1286c:	movt	r1, #1
   12870:	mov	r2, #5
   12874:	bl	10e0c <dcgettext@plt>
   12878:	b	1277c <__assert_fail@plt+0x1778>
   1287c:	movw	r1, #28784	; 0x7070
   12880:	movt	r1, #1
   12884:	mov	r2, #5
   12888:	bl	10e0c <dcgettext@plt>
   1288c:	mov	r5, r0
   12890:	b	1282c <__assert_fail@plt+0x1828>
   12894:	ldr	r3, [sp, #28]
   12898:	ands	r0, r3, #4
   1289c:	beq	12900 <__assert_fail@plt+0x18fc>
   128a0:	mov	r0, r1
   128a4:	mov	r2, #5
   128a8:	movw	r1, #28876	; 0x70cc
   128ac:	movt	r1, #1
   128b0:	bl	10e0c <dcgettext@plt>
   128b4:	b	1277c <__assert_fail@plt+0x1778>
   128b8:	ldr	r3, [sp, #28]
   128bc:	mov	fp, r1
   128c0:	ands	r3, r3, #4
   128c4:	beq	12914 <__assert_fail@plt+0x1910>
   128c8:	movw	r1, #28816	; 0x7090
   128cc:	movt	r1, #1
   128d0:	mov	r2, #5
   128d4:	bl	10e0c <dcgettext@plt>
   128d8:	mov	r4, r0
   128dc:	mov	r0, fp
   128e0:	bl	15464 <__assert_fail@plt+0x4460>
   128e4:	mov	r1, #0
   128e8:	mov	r3, r0
   128ec:	mov	r2, r4
   128f0:	mov	r0, r1
   128f4:	bl	10e78 <error@plt>
   128f8:	mov	r0, #1
   128fc:	bl	11dc8 <__assert_fail@plt+0xdc4>
   12900:	movw	r1, #28920	; 0x70f8
   12904:	movt	r1, #1
   12908:	mov	r2, #5
   1290c:	bl	10e0c <dcgettext@plt>
   12910:	b	1277c <__assert_fail@plt+0x1778>
   12914:	mov	r0, r3
   12918:	movw	r1, #28852	; 0x70b4
   1291c:	movt	r1, #1
   12920:	mov	r2, #5
   12924:	bl	10e0c <dcgettext@plt>
   12928:	mov	r4, r0
   1292c:	b	128dc <__assert_fail@plt+0x18d8>
   12930:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   12934:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   12938:	movw	r3, #33184	; 0x81a0
   1293c:	movt	r3, #2
   12940:	str	r0, [r3]
   12944:	bx	lr
   12948:	movw	r3, #33184	; 0x81a0
   1294c:	movt	r3, #2
   12950:	strb	r0, [r3, #4]
   12954:	bx	lr
   12958:	movw	r3, #33124	; 0x8164
   1295c:	movt	r3, #2
   12960:	strd	r4, [sp, #-16]!
   12964:	ldr	r0, [r3]
   12968:	str	r6, [sp, #8]
   1296c:	str	lr, [sp, #12]
   12970:	sub	sp, sp, #8
   12974:	bl	15fd4 <__assert_fail@plt+0x4fd0>
   12978:	cmp	r0, #0
   1297c:	beq	129a8 <__assert_fail@plt+0x19a4>
   12980:	movw	r4, #33184	; 0x81a0
   12984:	movt	r4, #2
   12988:	ldrb	r6, [r4, #4]
   1298c:	bl	10ef0 <__errno_location@plt>
   12990:	mov	r5, r0
   12994:	cmp	r6, #0
   12998:	beq	129d4 <__assert_fail@plt+0x19d0>
   1299c:	ldr	r3, [r0]
   129a0:	cmp	r3, #32
   129a4:	bne	129d4 <__assert_fail@plt+0x19d0>
   129a8:	movw	r3, #33112	; 0x8158
   129ac:	movt	r3, #2
   129b0:	ldr	r0, [r3]
   129b4:	bl	15fd4 <__assert_fail@plt+0x4fd0>
   129b8:	cmp	r0, #0
   129bc:	bne	12a1c <__assert_fail@plt+0x1a18>
   129c0:	add	sp, sp, #8
   129c4:	ldrd	r4, [sp]
   129c8:	ldr	r6, [sp, #8]
   129cc:	add	sp, sp, #12
   129d0:	pop	{pc}		; (ldr pc, [sp], #4)
   129d4:	movw	r1, #28960	; 0x7120
   129d8:	movt	r1, #1
   129dc:	mov	r2, #5
   129e0:	mov	r0, #0
   129e4:	bl	10e0c <dcgettext@plt>
   129e8:	mov	r6, r0
   129ec:	ldr	r0, [r4]
   129f0:	cmp	r0, #0
   129f4:	beq	12a2c <__assert_fail@plt+0x1a28>
   129f8:	ldr	r4, [r5]
   129fc:	bl	15278 <__assert_fail@plt+0x4274>
   12a00:	mov	r3, r0
   12a04:	movw	r2, #28972	; 0x712c
   12a08:	movt	r2, #1
   12a0c:	mov	r0, #0
   12a10:	str	r6, [sp]
   12a14:	mov	r1, r4
   12a18:	bl	10e78 <error@plt>
   12a1c:	movw	r3, #33028	; 0x8104
   12a20:	movt	r3, #2
   12a24:	ldr	r0, [r3]
   12a28:	bl	10dc4 <_exit@plt>
   12a2c:	mov	r3, r6
   12a30:	movw	r2, #28976	; 0x7130
   12a34:	movt	r2, #1
   12a38:	ldr	r1, [r5]
   12a3c:	bl	10e78 <error@plt>
   12a40:	b	12a1c <__assert_fail@plt+0x1a18>
   12a44:	b	10d88 <posix_fadvise64@plt>
   12a48:	cmp	r0, #0
   12a4c:	bxeq	lr
   12a50:	str	r4, [sp, #-16]!
   12a54:	mov	r4, r1
   12a58:	strd	r6, [sp, #4]
   12a5c:	mov	r6, #0
   12a60:	mov	r7, #0
   12a64:	str	lr, [sp, #12]
   12a68:	sub	sp, sp, #16
   12a6c:	bl	10f2c <fileno@plt>
   12a70:	mov	r2, r6
   12a74:	mov	r3, r7
   12a78:	strd	r6, [sp]
   12a7c:	str	r4, [sp, #8]
   12a80:	bl	10d88 <posix_fadvise64@plt>
   12a84:	add	sp, sp, #16
   12a88:	ldr	r4, [sp]
   12a8c:	ldrd	r6, [sp, #4]
   12a90:	add	sp, sp, #12
   12a94:	pop	{pc}		; (ldr pc, [sp], #4)
   12a98:	strd	r4, [sp, #-12]!
   12a9c:	mov	r4, r0
   12aa0:	str	lr, [sp, #8]
   12aa4:	sub	sp, sp, #12
   12aa8:	bl	10f2c <fileno@plt>
   12aac:	cmp	r0, #0
   12ab0:	mov	r0, r4
   12ab4:	blt	12b38 <__assert_fail@plt+0x1b34>
   12ab8:	bl	10e9c <__freading@plt>
   12abc:	cmp	r0, #0
   12ac0:	bne	12b04 <__assert_fail@plt+0x1b00>
   12ac4:	mov	r0, r4
   12ac8:	bl	12b4c <__assert_fail@plt+0x1b48>
   12acc:	cmp	r0, #0
   12ad0:	beq	12b34 <__assert_fail@plt+0x1b30>
   12ad4:	bl	10ef0 <__errno_location@plt>
   12ad8:	mov	r5, r0
   12adc:	mov	r0, r4
   12ae0:	ldr	r4, [r5]
   12ae4:	bl	10f50 <fclose@plt>
   12ae8:	cmp	r4, #0
   12aec:	mvnne	r0, #0
   12af0:	strne	r4, [r5]
   12af4:	add	sp, sp, #12
   12af8:	ldrd	r4, [sp]
   12afc:	add	sp, sp, #8
   12b00:	pop	{pc}		; (ldr pc, [sp], #4)
   12b04:	mov	r0, r4
   12b08:	bl	10f2c <fileno@plt>
   12b0c:	mov	r1, #1
   12b10:	mov	r2, #0
   12b14:	mov	r3, #0
   12b18:	str	r1, [sp]
   12b1c:	bl	10e48 <lseek64@plt>
   12b20:	mvn	r3, #0
   12b24:	mvn	r2, #0
   12b28:	cmp	r1, r3
   12b2c:	cmpeq	r0, r2
   12b30:	bne	12ac4 <__assert_fail@plt+0x1ac0>
   12b34:	mov	r0, r4
   12b38:	add	sp, sp, #12
   12b3c:	ldrd	r4, [sp]
   12b40:	ldr	lr, [sp, #8]
   12b44:	add	sp, sp, #12
   12b48:	b	10f50 <fclose@plt>
   12b4c:	str	r4, [sp, #-8]!
   12b50:	subs	r4, r0, #0
   12b54:	str	lr, [sp, #4]
   12b58:	sub	sp, sp, #8
   12b5c:	beq	12b78 <__assert_fail@plt+0x1b74>
   12b60:	bl	10e9c <__freading@plt>
   12b64:	cmp	r0, #0
   12b68:	beq	12b78 <__assert_fail@plt+0x1b74>
   12b6c:	ldr	r3, [r4]
   12b70:	tst	r3, #256	; 0x100
   12b74:	bne	12b90 <__assert_fail@plt+0x1b8c>
   12b78:	mov	r0, r4
   12b7c:	add	sp, sp, #8
   12b80:	ldr	r4, [sp]
   12b84:	ldr	lr, [sp, #4]
   12b88:	add	sp, sp, #8
   12b8c:	b	10d94 <fflush@plt>
   12b90:	mov	r1, #1
   12b94:	mov	r2, #0
   12b98:	mov	r3, #0
   12b9c:	mov	r0, r4
   12ba0:	str	r1, [sp]
   12ba4:	bl	12c0c <__assert_fail@plt+0x1c08>
   12ba8:	b	12b78 <__assert_fail@plt+0x1b74>
   12bac:	strd	r4, [sp, #-12]!
   12bb0:	mov	r5, r0
   12bb4:	str	lr, [sp, #8]
   12bb8:	sub	sp, sp, #12
   12bbc:	bl	10ef0 <__errno_location@plt>
   12bc0:	mov	r4, r0
   12bc4:	mov	r2, #0
   12bc8:	ldr	r3, [r4]
   12bcc:	mov	r0, r5
   12bd0:	str	r2, [r4]
   12bd4:	str	r3, [sp]
   12bd8:	str	r3, [sp, #4]
   12bdc:	bl	10dac <free@plt>
   12be0:	ldr	r3, [r4]
   12be4:	add	r2, sp, #8
   12be8:	clz	r3, r3
   12bec:	lsr	r3, r3, #5
   12bf0:	add	r3, r2, r3, lsl #2
   12bf4:	ldr	r3, [r3, #-8]
   12bf8:	str	r3, [r4]
   12bfc:	add	sp, sp, #12
   12c00:	ldrd	r4, [sp]
   12c04:	add	sp, sp, #8
   12c08:	pop	{pc}		; (ldr pc, [sp], #4)
   12c0c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12c10:	mov	r4, r0
   12c14:	ldr	ip, [r0, #4]
   12c18:	strd	r6, [sp, #8]
   12c1c:	str	lr, [sp, #20]
   12c20:	ldr	lr, [r0, #8]
   12c24:	str	r8, [sp, #16]
   12c28:	sub	sp, sp, #8
   12c2c:	ldr	r5, [sp, #32]
   12c30:	cmp	lr, ip
   12c34:	beq	12c5c <__assert_fail@plt+0x1c58>
   12c38:	mov	r0, r4
   12c3c:	str	r5, [sp, #32]
   12c40:	add	sp, sp, #8
   12c44:	ldrd	r4, [sp]
   12c48:	ldrd	r6, [sp, #8]
   12c4c:	ldr	r8, [sp, #16]
   12c50:	ldr	lr, [sp, #20]
   12c54:	add	sp, sp, #24
   12c58:	b	10f5c <fseeko64@plt>
   12c5c:	ldr	ip, [r0, #16]
   12c60:	ldr	lr, [r0, #20]
   12c64:	cmp	lr, ip
   12c68:	bne	12c38 <__assert_fail@plt+0x1c34>
   12c6c:	ldr	r8, [r0, #36]	; 0x24
   12c70:	cmp	r8, #0
   12c74:	bne	12c38 <__assert_fail@plt+0x1c34>
   12c78:	mov	r6, r2
   12c7c:	mov	r7, r3
   12c80:	bl	10f2c <fileno@plt>
   12c84:	mov	r2, r6
   12c88:	mov	r3, r7
   12c8c:	str	r5, [sp]
   12c90:	bl	10e48 <lseek64@plt>
   12c94:	mvn	r3, #0
   12c98:	mvn	r2, #0
   12c9c:	cmp	r1, r3
   12ca0:	cmpeq	r0, r2
   12ca4:	beq	12cd4 <__assert_fail@plt+0x1cd0>
   12ca8:	ldr	r3, [r4]
   12cac:	strd	r0, [r4, #80]	; 0x50
   12cb0:	bic	r3, r3, #16
   12cb4:	str	r3, [r4]
   12cb8:	mov	r0, r8
   12cbc:	add	sp, sp, #8
   12cc0:	ldrd	r4, [sp]
   12cc4:	ldrd	r6, [sp, #8]
   12cc8:	ldr	r8, [sp, #16]
   12ccc:	add	sp, sp, #20
   12cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   12cd4:	mvn	r8, #0
   12cd8:	b	12cb8 <__assert_fail@plt+0x1cb4>
   12cdc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12ce0:	strd	r6, [sp, #8]
   12ce4:	strd	sl, [sp, #24]
   12ce8:	mov	sl, r3
   12cec:	ldr	r3, [r0]
   12cf0:	strd	r8, [sp, #16]
   12cf4:	str	lr, [sp, #32]
   12cf8:	sub	sp, sp, #36	; 0x24
   12cfc:	ldr	r8, [r1]
   12d00:	cmp	r3, #0
   12d04:	str	r3, [sp, #4]
   12d08:	str	r2, [sp, #8]
   12d0c:	strd	r0, [sp, #16]
   12d10:	ldr	r9, [sp, #80]	; 0x50
   12d14:	beq	12fa0 <__assert_fail@plt+0x1f9c>
   12d18:	ldr	r3, [sp, #8]
   12d1c:	cmp	r8, r3
   12d20:	bcc	12e88 <__assert_fail@plt+0x1e84>
   12d24:	ldr	r3, [sp, #8]
   12d28:	subs	r4, r8, r3
   12d2c:	moveq	r3, #1
   12d30:	movne	r3, #0
   12d34:	cmp	r8, sl
   12d38:	movcc	r3, #0
   12d3c:	andcs	r3, r3, #1
   12d40:	cmp	r3, #0
   12d44:	bne	12e88 <__assert_fail@plt+0x1e84>
   12d48:	ldr	r3, [sp, #72]	; 0x48
   12d4c:	cmn	r3, #1
   12d50:	ldr	r3, [sp, #76]	; 0x4c
   12d54:	streq	r3, [sp, #72]	; 0x48
   12d58:	beq	12d6c <__assert_fail@plt+0x1d68>
   12d5c:	ldr	r2, [sp, #72]	; 0x48
   12d60:	cmn	r3, #1
   12d64:	moveq	r3, r2
   12d68:	str	r3, [sp, #76]	; 0x4c
   12d6c:	ldrd	r2, [sp, #4]
   12d70:	add	r6, r3, r2
   12d74:	b	12e10 <__assert_fail@plt+0x1e0c>
   12d78:	ldr	r5, [sp, #28]
   12d7c:	ldr	r3, [sp, #72]	; 0x48
   12d80:	cmn	r3, #1
   12d84:	bne	12f34 <__assert_fail@plt+0x1f30>
   12d88:	mov	fp, #0
   12d8c:	add	r0, r5, #1
   12d90:	mov	r2, fp
   12d94:	cmp	r0, r4
   12d98:	movls	r1, #0
   12d9c:	movhi	r1, #1
   12da0:	cmp	r8, sl
   12da4:	movcs	r1, #0
   12da8:	cmp	r1, #0
   12dac:	bne	12ebc <__assert_fail@plt+0x1eb8>
   12db0:	cmp	r4, #1
   12db4:	bls	12dec <__assert_fail@plt+0x1de8>
   12db8:	ldr	r1, [sp, #28]
   12dbc:	sub	r5, r4, #1
   12dc0:	cmp	r5, r1
   12dc4:	movcs	r5, r1
   12dc8:	cmp	r7, #0
   12dcc:	strbeq	r2, [r6]
   12dd0:	beq	12de4 <__assert_fail@plt+0x1de0>
   12dd4:	mov	r2, r5
   12dd8:	mov	r1, r7
   12ddc:	mov	r0, r6
   12de0:	bl	10dd0 <memcpy@plt>
   12de4:	add	r6, r6, r5
   12de8:	sub	r4, r4, r5
   12dec:	cmp	r7, #0
   12df0:	beq	12e08 <__assert_fail@plt+0x1e04>
   12df4:	mov	r0, r9
   12df8:	ldr	r1, [sp, #28]
   12dfc:	bl	1608c <__assert_fail@plt+0x5088>
   12e00:	cmp	r0, #0
   12e04:	bne	12e88 <__assert_fail@plt+0x1e84>
   12e08:	cmp	fp, #0
   12e0c:	bne	12f70 <__assert_fail@plt+0x1f6c>
   12e10:	add	r1, sp, #28
   12e14:	mov	r0, r9
   12e18:	bl	1605c <__assert_fail@plt+0x5058>
   12e1c:	subs	r7, r0, #0
   12e20:	bne	12d78 <__assert_fail@plt+0x1d74>
   12e24:	ldr	r3, [r9, #4]
   12e28:	ldr	r2, [r9, #8]
   12e2c:	cmp	r3, r2
   12e30:	bcs	12e68 <__assert_fail@plt+0x1e64>
   12e34:	add	r2, r3, #1
   12e38:	str	r2, [r9, #4]
   12e3c:	ldrb	r2, [r3]
   12e40:	mov	r0, #2
   12e44:	ldr	r3, [sp, #72]	; 0x48
   12e48:	ldr	r1, [sp, #76]	; 0x4c
   12e4c:	cmp	r1, r2
   12e50:	cmpne	r3, r2
   12e54:	mov	r3, #1
   12e58:	moveq	fp, #1
   12e5c:	movne	fp, #0
   12e60:	str	r3, [sp, #28]
   12e64:	b	12d94 <__assert_fail@plt+0x1d90>
   12e68:	mov	r0, r9
   12e6c:	bl	10f74 <__uflow@plt>
   12e70:	cmn	r0, #1
   12e74:	mov	r2, r0
   12e78:	bne	12e40 <__assert_fail@plt+0x1e3c>
   12e7c:	ldr	r3, [sp, #4]
   12e80:	cmp	r6, r3
   12e84:	bne	12f70 <__assert_fail@plt+0x1f6c>
   12e88:	ldr	r2, [sp, #4]
   12e8c:	mvn	r0, #0
   12e90:	ldr	r3, [sp, #16]
   12e94:	str	r2, [r3]
   12e98:	ldr	r3, [sp, #20]
   12e9c:	str	r8, [r3]
   12ea0:	add	sp, sp, #36	; 0x24
   12ea4:	ldrd	r4, [sp]
   12ea8:	ldrd	r6, [sp, #8]
   12eac:	ldrd	r8, [sp, #16]
   12eb0:	ldrd	sl, [sp, #24]
   12eb4:	add	sp, sp, #32
   12eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   12ebc:	ldr	r3, [sp, #4]
   12ec0:	cmp	r8, #63	; 0x3f
   12ec4:	lslhi	r5, r8, #1
   12ec8:	addls	r5, r8, #64	; 0x40
   12ecc:	sub	r6, r6, r3
   12ed0:	ldr	r3, [sp, #8]
   12ed4:	sub	r1, r5, r6
   12ed8:	cmp	r1, r0
   12edc:	addcc	r5, r6, r0
   12ee0:	cmp	r5, sl
   12ee4:	cmpls	r8, r5
   12ee8:	movcs	r5, sl
   12eec:	sub	r1, r5, r3
   12ef0:	cmp	r1, #0
   12ef4:	bge	12f04 <__assert_fail@plt+0x1f00>
   12ef8:	add	r5, r3, #-2147483648	; 0x80000000
   12efc:	cmp	r8, r5
   12f00:	beq	12e88 <__assert_fail@plt+0x1e84>
   12f04:	mov	r1, r5
   12f08:	ldr	r0, [sp, #4]
   12f0c:	sub	r4, r5, r6
   12f10:	str	r2, [sp, #12]
   12f14:	bl	15f7c <__assert_fail@plt+0x4f78>
   12f18:	cmp	r0, #0
   12f1c:	beq	12e88 <__assert_fail@plt+0x1e84>
   12f20:	add	r6, r0, r6
   12f24:	mov	r8, r5
   12f28:	str	r0, [sp, #4]
   12f2c:	ldr	r2, [sp, #12]
   12f30:	b	12db0 <__assert_fail@plt+0x1dac>
   12f34:	mov	r3, r5
   12f38:	ldr	r1, [sp, #72]	; 0x48
   12f3c:	ldr	r2, [sp, #76]	; 0x4c
   12f40:	bl	12fc4 <__assert_fail@plt+0x1fc0>
   12f44:	subs	fp, r0, #0
   12f48:	addeq	r0, r5, #1
   12f4c:	moveq	r2, fp
   12f50:	beq	12d94 <__assert_fail@plt+0x1d90>
   12f54:	sub	r0, fp, r7
   12f58:	mov	r2, #0
   12f5c:	add	r1, r0, #1
   12f60:	mov	fp, #1
   12f64:	add	r0, r0, #2
   12f68:	str	r1, [sp, #28]
   12f6c:	b	12d94 <__assert_fail@plt+0x1d90>
   12f70:	ldrd	r2, [sp, #4]
   12f74:	add	r0, r2, r3
   12f78:	mov	r3, #0
   12f7c:	subs	r0, r6, r0
   12f80:	strb	r3, [r6]
   12f84:	ldr	r3, [sp, #16]
   12f88:	str	r2, [r3]
   12f8c:	ldr	r3, [sp, #20]
   12f90:	str	r8, [r3]
   12f94:	bne	12ea0 <__assert_fail@plt+0x1e9c>
   12f98:	mvn	r0, #0
   12f9c:	b	12ea0 <__assert_fail@plt+0x1e9c>
   12fa0:	cmp	sl, #64	; 0x40
   12fa4:	movcc	r8, sl
   12fa8:	movcs	r8, #64	; 0x40
   12fac:	mov	r0, r8
   12fb0:	bl	15f40 <__assert_fail@plt+0x4f3c>
   12fb4:	subs	r3, r0, #0
   12fb8:	str	r3, [sp, #4]
   12fbc:	bne	12d18 <__assert_fail@plt+0x1d14>
   12fc0:	b	12f98 <__assert_fail@plt+0x1f94>
   12fc4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12fc8:	uxtb	r4, r1
   12fcc:	uxtb	r5, r2
   12fd0:	cmp	r4, r5
   12fd4:	strd	r6, [sp, #8]
   12fd8:	strd	r8, [sp, #16]
   12fdc:	str	sl, [sp, #24]
   12fe0:	str	lr, [sp, #28]
   12fe4:	beq	13140 <__assert_fail@plt+0x213c>
   12fe8:	cmp	r3, #0
   12fec:	mov	ip, r0
   12ff0:	beq	1304c <__assert_fail@plt+0x2048>
   12ff4:	tst	r0, #3
   12ff8:	beq	1304c <__assert_fail@plt+0x2048>
   12ffc:	ldrb	r0, [r0]
   13000:	cmp	r4, r0
   13004:	cmpne	r5, r0
   13008:	beq	1316c <__assert_fail@plt+0x2168>
   1300c:	add	ip, ip, #1
   13010:	subs	r3, r3, #1
   13014:	mov	r0, ip
   13018:	beq	13050 <__assert_fail@plt+0x204c>
   1301c:	tst	ip, #3
   13020:	beq	13050 <__assert_fail@plt+0x204c>
   13024:	ldrb	lr, [ip], #1
   13028:	cmp	lr, r4
   1302c:	cmpne	lr, r5
   13030:	bne	13010 <__assert_fail@plt+0x200c>
   13034:	ldrd	r4, [sp]
   13038:	ldrd	r6, [sp, #8]
   1303c:	ldrd	r8, [sp, #16]
   13040:	ldr	sl, [sp, #24]
   13044:	add	sp, sp, #28
   13048:	pop	{pc}		; (ldr pc, [sp], #4)
   1304c:	mov	r0, ip
   13050:	lsl	r1, r1, #8
   13054:	cmp	r3, #3
   13058:	lsl	r6, r2, #8
   1305c:	uxth	r1, r1
   13060:	uxth	r6, r6
   13064:	orr	lr, r1, r4
   13068:	orr	r6, r6, r5
   1306c:	orr	lr, lr, lr, lsl #16
   13070:	orr	r6, r6, r6, lsl #16
   13074:	bls	130f0 <__assert_fail@plt+0x20ec>
   13078:	ldr	r1, [r0]
   1307c:	movw	r7, #65279	; 0xfeff
   13080:	movt	r7, #65278	; 0xfefe
   13084:	movw	r8, #32896	; 0x8080
   13088:	movt	r8, #32896	; 0x8080
   1308c:	eor	r9, lr, r1
   13090:	eor	r1, r1, r6
   13094:	add	r2, r9, r7
   13098:	add	ip, r1, r7
   1309c:	bic	r1, ip, r1
   130a0:	bic	r2, r2, r9
   130a4:	orr	r2, r2, r1
   130a8:	tst	r2, r8
   130ac:	addeq	r1, r0, #4
   130b0:	beq	130e0 <__assert_fail@plt+0x20dc>
   130b4:	b	130f8 <__assert_fail@plt+0x20f4>
   130b8:	ldr	ip, [r1], #4
   130bc:	eor	sl, ip, lr
   130c0:	eor	ip, ip, r6
   130c4:	add	r2, sl, r7
   130c8:	add	r9, ip, r7
   130cc:	bic	r2, r2, sl
   130d0:	bic	ip, r9, ip
   130d4:	orr	r2, r2, ip
   130d8:	tst	r2, r8
   130dc:	bne	130f8 <__assert_fail@plt+0x20f4>
   130e0:	sub	r3, r3, #4
   130e4:	mov	r0, r1
   130e8:	cmp	r3, #3
   130ec:	bhi	130b8 <__assert_fail@plt+0x20b4>
   130f0:	cmp	r3, #0
   130f4:	beq	13164 <__assert_fail@plt+0x2160>
   130f8:	ldrb	r2, [r0]
   130fc:	cmp	r4, r2
   13100:	cmpne	r5, r2
   13104:	beq	13034 <__assert_fail@plt+0x2030>
   13108:	add	r3, r0, r3
   1310c:	add	r2, r0, #1
   13110:	cmp	r2, r3
   13114:	mov	r0, r2
   13118:	beq	13138 <__assert_fail@plt+0x2134>
   1311c:	ldrb	r1, [r2], #1
   13120:	cmp	r1, r4
   13124:	cmpne	r1, r5
   13128:	beq	13034 <__assert_fail@plt+0x2030>
   1312c:	cmp	r2, r3
   13130:	mov	r0, r2
   13134:	bne	1311c <__assert_fail@plt+0x2118>
   13138:	mov	r0, #0
   1313c:	b	13034 <__assert_fail@plt+0x2030>
   13140:	mov	r1, r4
   13144:	mov	r2, r3
   13148:	ldrd	r4, [sp]
   1314c:	ldrd	r6, [sp, #8]
   13150:	ldrd	r8, [sp, #16]
   13154:	ldr	sl, [sp, #24]
   13158:	ldr	lr, [sp, #28]
   1315c:	add	sp, sp, #32
   13160:	b	10f44 <memchr@plt>
   13164:	mov	r0, r3
   13168:	b	13034 <__assert_fail@plt+0x2030>
   1316c:	mov	r0, ip
   13170:	b	13034 <__assert_fail@plt+0x2030>
   13174:	strd	r4, [sp, #-16]!
   13178:	subs	r4, r0, #0
   1317c:	str	r6, [sp, #8]
   13180:	str	lr, [sp, #12]
   13184:	beq	1321c <__assert_fail@plt+0x2218>
   13188:	mov	r1, #47	; 0x2f
   1318c:	bl	10f98 <strrchr@plt>
   13190:	subs	r5, r0, #0
   13194:	beq	131f4 <__assert_fail@plt+0x21f0>
   13198:	add	r6, r5, #1
   1319c:	sub	r3, r6, r4
   131a0:	cmp	r3, #6
   131a4:	ble	131f4 <__assert_fail@plt+0x21f0>
   131a8:	movw	r1, #29036	; 0x716c
   131ac:	movt	r1, #1
   131b0:	mov	r2, #7
   131b4:	sub	r0, r5, #6
   131b8:	bl	10fe0 <strncmp@plt>
   131bc:	cmp	r0, #0
   131c0:	bne	131f4 <__assert_fail@plt+0x21f0>
   131c4:	movw	r1, #29044	; 0x7174
   131c8:	movt	r1, #1
   131cc:	mov	r2, #3
   131d0:	mov	r0, r6
   131d4:	bl	10fe0 <strncmp@plt>
   131d8:	cmp	r0, #0
   131dc:	movne	r4, r6
   131e0:	bne	131f4 <__assert_fail@plt+0x21f0>
   131e4:	add	r4, r5, #4
   131e8:	movw	r3, #33096	; 0x8148
   131ec:	movt	r3, #2
   131f0:	str	r4, [r3]
   131f4:	movw	r2, #33192	; 0x81a8
   131f8:	movt	r2, #2
   131fc:	ldr	r6, [sp, #8]
   13200:	movw	r3, #33100	; 0x814c
   13204:	movt	r3, #2
   13208:	str	r4, [r2]
   1320c:	str	r4, [r3]
   13210:	ldrd	r4, [sp]
   13214:	add	sp, sp, #12
   13218:	pop	{pc}		; (ldr pc, [sp], #4)
   1321c:	movw	r3, #33112	; 0x8158
   13220:	movt	r3, #2
   13224:	movw	r0, #28980	; 0x7134
   13228:	movt	r0, #1
   1322c:	ldr	r3, [r3]
   13230:	mov	r2, #55	; 0x37
   13234:	mov	r1, #1
   13238:	bl	10e3c <fwrite@plt>
   1323c:	bl	10fec <abort@plt>
   13240:	strd	r4, [sp, #-16]!
   13244:	mov	r4, #0
   13248:	mov	r5, #0
   1324c:	cmp	r1, #10
   13250:	str	r6, [sp, #8]
   13254:	strd	r4, [r0]
   13258:	strd	r4, [r0, #8]
   1325c:	str	lr, [sp, #12]
   13260:	strd	r4, [r0, #16]
   13264:	strd	r4, [r0, #24]
   13268:	strd	r4, [r0, #32]
   1326c:	strd	r4, [r0, #40]	; 0x28
   13270:	beq	13288 <__assert_fail@plt+0x2284>
   13274:	ldrd	r4, [sp]
   13278:	str	r1, [r0]
   1327c:	ldr	r6, [sp, #8]
   13280:	add	sp, sp, #12
   13284:	pop	{pc}		; (ldr pc, [sp], #4)
   13288:	bl	10fec <abort@plt>
   1328c:	mov	r2, #5
   13290:	strd	r4, [sp, #-16]!
   13294:	mov	r5, r0
   13298:	str	r6, [sp, #8]
   1329c:	mov	r6, r1
   132a0:	mov	r1, r0
   132a4:	mov	r0, #0
   132a8:	str	lr, [sp, #12]
   132ac:	bl	10e0c <dcgettext@plt>
   132b0:	cmp	r5, r0
   132b4:	mov	r4, r0
   132b8:	beq	132d0 <__assert_fail@plt+0x22cc>
   132bc:	mov	r0, r4
   132c0:	ldrd	r4, [sp]
   132c4:	ldr	r6, [sp, #8]
   132c8:	add	sp, sp, #12
   132cc:	pop	{pc}		; (ldr pc, [sp], #4)
   132d0:	bl	161e8 <__assert_fail@plt+0x51e4>
   132d4:	ldrb	r3, [r0]
   132d8:	bic	r3, r3, #32
   132dc:	cmp	r3, #85	; 0x55
   132e0:	bne	13348 <__assert_fail@plt+0x2344>
   132e4:	ldrb	r3, [r0, #1]
   132e8:	bic	r3, r3, #32
   132ec:	cmp	r3, #84	; 0x54
   132f0:	bne	133c8 <__assert_fail@plt+0x23c4>
   132f4:	ldrb	r3, [r0, #2]
   132f8:	bic	r3, r3, #32
   132fc:	cmp	r3, #70	; 0x46
   13300:	bne	133c8 <__assert_fail@plt+0x23c4>
   13304:	ldrb	r3, [r0, #3]
   13308:	cmp	r3, #45	; 0x2d
   1330c:	bne	133c8 <__assert_fail@plt+0x23c4>
   13310:	ldrb	r3, [r0, #4]
   13314:	cmp	r3, #56	; 0x38
   13318:	bne	133c8 <__assert_fail@plt+0x23c4>
   1331c:	ldrb	r3, [r0, #5]
   13320:	cmp	r3, #0
   13324:	bne	133c8 <__assert_fail@plt+0x23c4>
   13328:	ldrb	r2, [r4]
   1332c:	movw	r3, #29136	; 0x71d0
   13330:	movt	r3, #1
   13334:	movw	r4, #29148	; 0x71dc
   13338:	movt	r4, #1
   1333c:	cmp	r2, #96	; 0x60
   13340:	movne	r4, r3
   13344:	b	132bc <__assert_fail@plt+0x22b8>
   13348:	cmp	r3, #71	; 0x47
   1334c:	bne	133c8 <__assert_fail@plt+0x23c4>
   13350:	ldrb	r3, [r0, #1]
   13354:	bic	r3, r3, #32
   13358:	cmp	r3, #66	; 0x42
   1335c:	bne	133c8 <__assert_fail@plt+0x23c4>
   13360:	ldrb	r3, [r0, #2]
   13364:	cmp	r3, #49	; 0x31
   13368:	bne	133c8 <__assert_fail@plt+0x23c4>
   1336c:	ldrb	r3, [r0, #3]
   13370:	cmp	r3, #56	; 0x38
   13374:	bne	133c8 <__assert_fail@plt+0x23c4>
   13378:	ldrb	r3, [r0, #4]
   1337c:	cmp	r3, #48	; 0x30
   13380:	bne	133c8 <__assert_fail@plt+0x23c4>
   13384:	ldrb	r3, [r0, #5]
   13388:	cmp	r3, #51	; 0x33
   1338c:	bne	133c8 <__assert_fail@plt+0x23c4>
   13390:	ldrb	r3, [r0, #6]
   13394:	cmp	r3, #48	; 0x30
   13398:	bne	133c8 <__assert_fail@plt+0x23c4>
   1339c:	ldrb	r3, [r0, #7]
   133a0:	cmp	r3, #0
   133a4:	bne	133c8 <__assert_fail@plt+0x23c4>
   133a8:	ldrb	r2, [r4]
   133ac:	movw	r3, #29140	; 0x71d4
   133b0:	movt	r3, #1
   133b4:	movw	r4, #29144	; 0x71d8
   133b8:	movt	r4, #1
   133bc:	cmp	r2, #96	; 0x60
   133c0:	movne	r4, r3
   133c4:	b	132bc <__assert_fail@plt+0x22b8>
   133c8:	movw	r3, #29152	; 0x71e0
   133cc:	movt	r3, #1
   133d0:	cmp	r6, #9
   133d4:	movw	r4, #29132	; 0x71cc
   133d8:	movt	r4, #1
   133dc:	movne	r4, r3
   133e0:	b	132bc <__assert_fail@plt+0x22b8>
   133e4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   133e8:	strd	r6, [sp, #8]
   133ec:	strd	r8, [sp, #16]
   133f0:	strd	sl, [sp, #24]
   133f4:	mov	fp, r0
   133f8:	mov	sl, r1
   133fc:	str	lr, [sp, #32]
   13400:	sub	sp, sp, #116	; 0x74
   13404:	ldr	r8, [sp, #152]	; 0x98
   13408:	str	r3, [sp, #28]
   1340c:	ldr	r3, [sp, #156]	; 0x9c
   13410:	str	r2, [sp, #32]
   13414:	and	r4, r3, #2
   13418:	ubfx	r3, r3, #1, #1
   1341c:	str	r3, [sp, #44]	; 0x2c
   13420:	bl	10e54 <__ctype_get_mb_cur_max@plt>
   13424:	str	r0, [sp, #64]	; 0x40
   13428:	cmp	r8, #10
   1342c:	ldrls	pc, [pc, r8, lsl #2]
   13430:	b	14ba0 <__assert_fail@plt+0x3b9c>
   13434:	andeq	r3, r1, r8, lsr r8
   13438:	ldrdeq	r3, [r1], -r4
   1343c:			; <UNDEFINED> instruction: 0x00013eb0
   13440:	strdeq	r3, [r1], -r4
   13444:	muleq	r1, ip, r7
   13448:	andeq	r3, r1, r8, ror #15
   1344c:	andeq	r3, r1, r8, ror #16
   13450:	andeq	r3, r1, r4, lsr #17
   13454:	andeq	r3, r1, r0, ror #8
   13458:	andeq	r3, r1, r0, ror #8
   1345c:	andeq	r3, r1, r0, ror #8
   13460:	cmp	r8, #10
   13464:	beq	13490 <__assert_fail@plt+0x248c>
   13468:	mov	r1, r8
   1346c:	movw	r0, #29156	; 0x71e4
   13470:	movt	r0, #1
   13474:	bl	1328c <__assert_fail@plt+0x2288>
   13478:	mov	r1, r8
   1347c:	str	r0, [sp, #164]	; 0xa4
   13480:	movw	r0, #29152	; 0x71e0
   13484:	movt	r0, #1
   13488:	bl	1328c <__assert_fail@plt+0x2288>
   1348c:	str	r0, [sp, #168]	; 0xa8
   13490:	cmp	r4, #0
   13494:	movne	r4, #0
   13498:	beq	1487c <__assert_fail@plt+0x3878>
   1349c:	mov	r3, #1
   134a0:	mov	r5, #0
   134a4:	ldr	r0, [sp, #168]	; 0xa8
   134a8:	str	r3, [sp, #36]	; 0x24
   134ac:	str	r3, [sp, #40]	; 0x28
   134b0:	str	r5, [sp, #68]	; 0x44
   134b4:	bl	10ed8 <strlen@plt>
   134b8:	ldr	r3, [sp, #168]	; 0xa8
   134bc:	str	r5, [sp, #48]	; 0x30
   134c0:	str	r0, [sp, #56]	; 0x38
   134c4:	str	r3, [sp, #60]	; 0x3c
   134c8:	str	r5, [sp, #72]	; 0x48
   134cc:	str	r8, [sp, #152]	; 0x98
   134d0:	mov	r8, fp
   134d4:	mov	r9, #0
   134d8:	ldr	fp, [sp, #152]	; 0x98
   134dc:	ldr	r3, [sp, #28]
   134e0:	cmn	r3, #1
   134e4:	beq	13a44 <__assert_fail@plt+0x2a40>
   134e8:	ldr	r3, [sp, #28]
   134ec:	subs	r6, r3, r9
   134f0:	movne	r6, #1
   134f4:	cmp	r6, #0
   134f8:	beq	13a5c <__assert_fail@plt+0x2a58>
   134fc:	ldr	r0, [sp, #32]
   13500:	ldr	r7, [sp, #40]	; 0x28
   13504:	add	r3, r0, r9
   13508:	cmp	fp, #2
   1350c:	moveq	r7, #0
   13510:	andne	r7, r7, #1
   13514:	str	r3, [sp, #52]	; 0x34
   13518:	cmp	r7, #0
   1351c:	beq	13ef8 <__assert_fail@plt+0x2ef4>
   13520:	ldr	r2, [sp, #56]	; 0x38
   13524:	cmp	r2, #0
   13528:	beq	14194 <__assert_fail@plt+0x3190>
   1352c:	ldr	r1, [sp, #28]
   13530:	cmp	r2, #1
   13534:	mov	r3, r2
   13538:	movls	r3, #0
   1353c:	movhi	r3, #1
   13540:	add	r5, r9, r2
   13544:	cmn	r1, #1
   13548:	movne	r3, #0
   1354c:	cmp	r3, #0
   13550:	beq	1355c <__assert_fail@plt+0x2558>
   13554:	bl	10ed8 <strlen@plt>
   13558:	str	r0, [sp, #28]
   1355c:	ldr	r3, [sp, #28]
   13560:	cmp	r5, r3
   13564:	bhi	14194 <__assert_fail@plt+0x3190>
   13568:	ldr	r0, [sp, #52]	; 0x34
   1356c:	ldr	r2, [sp, #56]	; 0x38
   13570:	ldr	r1, [sp, #60]	; 0x3c
   13574:	bl	10df4 <memcmp@plt>
   13578:	cmp	r0, #0
   1357c:	bne	14194 <__assert_fail@plt+0x3190>
   13580:	ldr	r3, [sp, #44]	; 0x2c
   13584:	cmp	r3, #0
   13588:	bne	14ac4 <__assert_fail@plt+0x3ac0>
   1358c:	ldr	r3, [sp, #52]	; 0x34
   13590:	ldrb	r5, [r3]
   13594:	cmp	r5, #126	; 0x7e
   13598:	ldrls	pc, [pc, r5, lsl #2]
   1359c:	b	13e54 <__assert_fail@plt+0x2e50>
   135a0:	andeq	r3, r1, r8, asr sp
   135a4:	andeq	r3, r1, r4, asr lr
   135a8:	andeq	r3, r1, r4, asr lr
   135ac:	andeq	r3, r1, r4, asr lr
   135b0:	andeq	r3, r1, r4, asr lr
   135b4:	andeq	r3, r1, r4, asr lr
   135b8:	andeq	r3, r1, r4, asr lr
   135bc:	andeq	r3, r1, ip, lsr #26
   135c0:	andeq	r3, r1, r4, lsr #26
   135c4:	andeq	r3, r1, ip, ror #24
   135c8:	andeq	r3, r1, r8, lsl sp
   135cc:	andeq	r3, r1, r4, ror #24
   135d0:	strdeq	r3, [r1], -r4
   135d4:	andeq	r3, r1, r0, asr #26
   135d8:	andeq	r3, r1, r4, asr lr
   135dc:	andeq	r3, r1, r4, asr lr
   135e0:	andeq	r3, r1, r4, asr lr
   135e4:	andeq	r3, r1, r4, asr lr
   135e8:	andeq	r3, r1, r4, asr lr
   135ec:	andeq	r3, r1, r4, asr lr
   135f0:	andeq	r3, r1, r4, asr lr
   135f4:	andeq	r3, r1, r4, asr lr
   135f8:	andeq	r3, r1, r4, asr lr
   135fc:	andeq	r3, r1, r4, asr lr
   13600:	andeq	r3, r1, r4, asr lr
   13604:	andeq	r3, r1, r4, asr lr
   13608:	andeq	r3, r1, r4, asr lr
   1360c:	andeq	r3, r1, r4, asr lr
   13610:	andeq	r3, r1, r4, asr lr
   13614:	andeq	r3, r1, r4, asr lr
   13618:	andeq	r3, r1, r4, asr lr
   1361c:	andeq	r3, r1, r4, asr lr
   13620:	andeq	r3, r1, r0, lsr lr
   13624:	andeq	r3, r1, r8, lsr sp
   13628:	andeq	r3, r1, r8, lsr sp
   1362c:	andeq	r3, r1, r4, lsl lr
   13630:	andeq	r3, r1, r8, lsr sp
   13634:	andeq	r3, r1, r8, asr #28
   13638:	andeq	r3, r1, r8, lsr sp
   1363c:	muleq	r1, r4, fp
   13640:	andeq	r3, r1, r8, lsr sp
   13644:	andeq	r3, r1, r8, lsr sp
   13648:	andeq	r3, r1, r8, lsr sp
   1364c:	andeq	r3, r1, r8, asr #28
   13650:	andeq	r3, r1, r8, asr #28
   13654:	andeq	r3, r1, r8, asr #28
   13658:	andeq	r3, r1, r8, asr #28
   1365c:	andeq	r3, r1, r8, asr #28
   13660:	andeq	r3, r1, r8, asr #28
   13664:	andeq	r3, r1, r8, asr #28
   13668:	andeq	r3, r1, r8, asr #28
   1366c:	andeq	r3, r1, r8, asr #28
   13670:	andeq	r3, r1, r8, asr #28
   13674:	andeq	r3, r1, r8, asr #28
   13678:	andeq	r3, r1, r8, asr #28
   1367c:	andeq	r3, r1, r8, asr #28
   13680:	andeq	r3, r1, r8, asr #28
   13684:	andeq	r3, r1, r8, asr #28
   13688:	andeq	r3, r1, r8, asr #28
   1368c:	andeq	r3, r1, r8, lsr sp
   13690:	andeq	r3, r1, r8, lsr sp
   13694:	andeq	r3, r1, r8, lsr sp
   13698:	andeq	r3, r1, r8, lsr sp
   1369c:	andeq	r3, r1, r8, ror #22
   136a0:	andeq	r3, r1, r4, asr lr
   136a4:	andeq	r3, r1, r8, asr #28
   136a8:	andeq	r3, r1, r8, asr #28
   136ac:	andeq	r3, r1, r8, asr #28
   136b0:	andeq	r3, r1, r8, asr #28
   136b4:	andeq	r3, r1, r8, asr #28
   136b8:	andeq	r3, r1, r8, asr #28
   136bc:	andeq	r3, r1, r8, asr #28
   136c0:	andeq	r3, r1, r8, asr #28
   136c4:	andeq	r3, r1, r8, asr #28
   136c8:	andeq	r3, r1, r8, asr #28
   136cc:	andeq	r3, r1, r8, asr #28
   136d0:	andeq	r3, r1, r8, asr #28
   136d4:	andeq	r3, r1, r8, asr #28
   136d8:	andeq	r3, r1, r8, asr #28
   136dc:	andeq	r3, r1, r8, asr #28
   136e0:	andeq	r3, r1, r8, asr #28
   136e4:	andeq	r3, r1, r8, asr #28
   136e8:	andeq	r3, r1, r8, asr #28
   136ec:	andeq	r3, r1, r8, asr #28
   136f0:	andeq	r3, r1, r8, asr #28
   136f4:	andeq	r3, r1, r8, asr #28
   136f8:	andeq	r3, r1, r8, asr #28
   136fc:	andeq	r3, r1, r8, asr #28
   13700:	andeq	r3, r1, r8, asr #28
   13704:	andeq	r3, r1, r8, asr #28
   13708:	andeq	r3, r1, r8, asr #28
   1370c:	andeq	r3, r1, r8, lsr sp
   13710:	andeq	r3, r1, r0, lsl fp
   13714:	andeq	r3, r1, r8, asr #28
   13718:	andeq	r3, r1, r8, lsr sp
   1371c:	andeq	r3, r1, r8, asr #28
   13720:	andeq	r3, r1, r8, lsr sp
   13724:	andeq	r3, r1, r8, asr #28
   13728:	andeq	r3, r1, r8, asr #28
   1372c:	andeq	r3, r1, r8, asr #28
   13730:	andeq	r3, r1, r8, asr #28
   13734:	andeq	r3, r1, r8, asr #28
   13738:	andeq	r3, r1, r8, asr #28
   1373c:	andeq	r3, r1, r8, asr #28
   13740:	andeq	r3, r1, r8, asr #28
   13744:	andeq	r3, r1, r8, asr #28
   13748:	andeq	r3, r1, r8, asr #28
   1374c:	andeq	r3, r1, r8, asr #28
   13750:	andeq	r3, r1, r8, asr #28
   13754:	andeq	r3, r1, r8, asr #28
   13758:	andeq	r3, r1, r8, asr #28
   1375c:	andeq	r3, r1, r8, asr #28
   13760:	andeq	r3, r1, r8, asr #28
   13764:	andeq	r3, r1, r8, asr #28
   13768:	andeq	r3, r1, r8, asr #28
   1376c:	andeq	r3, r1, r8, asr #28
   13770:	andeq	r3, r1, r8, asr #28
   13774:	andeq	r3, r1, r8, asr #28
   13778:	andeq	r3, r1, r8, asr #28
   1377c:	andeq	r3, r1, r8, asr #28
   13780:	andeq	r3, r1, r8, asr #28
   13784:	andeq	r3, r1, r8, asr #28
   13788:	andeq	r3, r1, r8, asr #28
   1378c:	andeq	r3, r1, r4, lsr r9
   13790:	andeq	r3, r1, r8, lsr sp
   13794:	andeq	r3, r1, r4, lsr r9
   13798:	andeq	r3, r1, r4, lsl lr
   1379c:	cmp	r4, #0
   137a0:	moveq	r3, #1
   137a4:	streq	r3, [sp, #40]	; 0x28
   137a8:	beq	13ebc <__assert_fail@plt+0x2eb8>
   137ac:	mov	r3, #0
   137b0:	mov	r2, #1
   137b4:	mov	r4, r3
   137b8:	str	r2, [sp, #36]	; 0x24
   137bc:	str	r2, [sp, #44]	; 0x2c
   137c0:	str	r2, [sp, #56]	; 0x38
   137c4:	str	r3, [sp, #68]	; 0x44
   137c8:	movw	r3, #29152	; 0x71e0
   137cc:	movt	r3, #1
   137d0:	str	r4, [sp, #40]	; 0x28
   137d4:	mov	r8, #2
   137d8:	str	r4, [sp, #48]	; 0x30
   137dc:	str	r3, [sp, #60]	; 0x3c
   137e0:	str	r4, [sp, #72]	; 0x48
   137e4:	b	134cc <__assert_fail@plt+0x24c8>
   137e8:	cmp	r4, #0
   137ec:	bne	14a38 <__assert_fail@plt+0x3a34>
   137f0:	cmp	sl, #0
   137f4:	beq	147f8 <__assert_fail@plt+0x37f4>
   137f8:	mov	r3, #34	; 0x22
   137fc:	mov	r1, r4
   13800:	mov	r2, #1
   13804:	strb	r3, [fp]
   13808:	movw	r3, #29132	; 0x71cc
   1380c:	movt	r3, #1
   13810:	mov	r4, r2
   13814:	str	r2, [sp, #36]	; 0x24
   13818:	str	r2, [sp, #40]	; 0x28
   1381c:	str	r1, [sp, #44]	; 0x2c
   13820:	str	r1, [sp, #48]	; 0x30
   13824:	str	r2, [sp, #56]	; 0x38
   13828:	str	r3, [sp, #60]	; 0x3c
   1382c:	str	r1, [sp, #68]	; 0x44
   13830:	str	r1, [sp, #72]	; 0x48
   13834:	b	134cc <__assert_fail@plt+0x24c8>
   13838:	mov	r3, #0
   1383c:	mov	r4, r8
   13840:	str	r3, [sp, #40]	; 0x28
   13844:	str	r3, [sp, #44]	; 0x2c
   13848:	str	r3, [sp, #48]	; 0x30
   1384c:	str	r8, [sp, #56]	; 0x38
   13850:	str	r3, [sp, #60]	; 0x3c
   13854:	str	r3, [sp, #68]	; 0x44
   13858:	mov	r3, #1
   1385c:	str	r3, [sp, #36]	; 0x24
   13860:	str	r8, [sp, #72]	; 0x48
   13864:	b	134cc <__assert_fail@plt+0x24c8>
   13868:	mov	r3, #1
   1386c:	mov	r2, #0
   13870:	mov	r4, r2
   13874:	mov	r8, #5
   13878:	str	r3, [sp, #36]	; 0x24
   1387c:	str	r3, [sp, #40]	; 0x28
   13880:	str	r3, [sp, #44]	; 0x2c
   13884:	str	r2, [sp, #48]	; 0x30
   13888:	str	r3, [sp, #56]	; 0x38
   1388c:	movw	r3, #29132	; 0x71cc
   13890:	movt	r3, #1
   13894:	str	r3, [sp, #60]	; 0x3c
   13898:	str	r2, [sp, #68]	; 0x44
   1389c:	str	r2, [sp, #72]	; 0x48
   138a0:	b	134cc <__assert_fail@plt+0x24c8>
   138a4:	mov	r3, #0
   138a8:	mov	r2, #1
   138ac:	mov	r4, r3
   138b0:	str	r2, [sp, #36]	; 0x24
   138b4:	str	r2, [sp, #40]	; 0x28
   138b8:	str	r3, [sp, #44]	; 0x2c
   138bc:	str	r3, [sp, #48]	; 0x30
   138c0:	str	r3, [sp, #56]	; 0x38
   138c4:	str	r3, [sp, #60]	; 0x3c
   138c8:	str	r3, [sp, #68]	; 0x44
   138cc:	str	r3, [sp, #72]	; 0x48
   138d0:	b	134cc <__assert_fail@plt+0x24c8>
   138d4:	mov	r2, #1
   138d8:	mov	r3, #0
   138dc:	mov	r4, r3
   138e0:	str	r2, [sp, #36]	; 0x24
   138e4:	str	r2, [sp, #44]	; 0x2c
   138e8:	str	r8, [sp, #56]	; 0x38
   138ec:	str	r3, [sp, #68]	; 0x44
   138f0:	b	137c8 <__assert_fail@plt+0x27c4>
   138f4:	mov	r3, #1
   138f8:	mov	r2, #0
   138fc:	mov	r4, r2
   13900:	mov	r8, #2
   13904:	str	r3, [sp, #36]	; 0x24
   13908:	str	r3, [sp, #40]	; 0x28
   1390c:	str	r3, [sp, #44]	; 0x2c
   13910:	str	r2, [sp, #48]	; 0x30
   13914:	str	r3, [sp, #56]	; 0x38
   13918:	movw	r3, #29152	; 0x71e0
   1391c:	movt	r3, #1
   13920:	str	r3, [sp, #60]	; 0x3c
   13924:	str	r2, [sp, #68]	; 0x44
   13928:	str	r2, [sp, #72]	; 0x48
   1392c:	b	134cc <__assert_fail@plt+0x24c8>
   13930:	mov	r7, #0
   13934:	ldr	r3, [sp, #28]
   13938:	cmn	r3, #1
   1393c:	beq	14414 <__assert_fail@plt+0x3410>
   13940:	ldr	r3, [sp, #28]
   13944:	subs	r2, r3, #1
   13948:	movne	r2, #1
   1394c:	sub	r3, fp, #2
   13950:	cmp	r2, #0
   13954:	clz	r3, r3
   13958:	lsr	r3, r3, #5
   1395c:	bne	13968 <__assert_fail@plt+0x2964>
   13960:	cmp	r9, #0
   13964:	beq	14174 <__assert_fail@plt+0x3170>
   13968:	mov	r6, #0
   1396c:	ldr	r2, [sp, #40]	; 0x28
   13970:	eor	r2, r2, #1
   13974:	orrs	r3, r3, r2
   13978:	bne	13b50 <__assert_fail@plt+0x2b4c>
   1397c:	ldr	r2, [sp, #160]	; 0xa0
   13980:	cmp	r2, #0
   13984:	beq	139a4 <__assert_fail@plt+0x29a0>
   13988:	ldr	r0, [sp, #160]	; 0xa0
   1398c:	ubfx	r1, r5, #5, #8
   13990:	and	r2, r5, #31
   13994:	ldr	r1, [r0, r1, lsl #2]
   13998:	lsr	r2, r1, r2
   1399c:	tst	r2, #1
   139a0:	bne	139ac <__assert_fail@plt+0x29a8>
   139a4:	cmp	r7, #0
   139a8:	beq	13c1c <__assert_fail@plt+0x2c18>
   139ac:	ldr	r2, [sp, #44]	; 0x2c
   139b0:	sub	r3, fp, #2
   139b4:	clz	r3, r3
   139b8:	lsr	r3, r3, #5
   139bc:	cmp	r2, #0
   139c0:	bne	14768 <__assert_fail@plt+0x3764>
   139c4:	ldr	r2, [sp, #48]	; 0x30
   139c8:	eor	r2, r2, #1
   139cc:	ands	r3, r3, r2
   139d0:	beq	13a08 <__assert_fail@plt+0x2a04>
   139d4:	cmp	sl, r4
   139d8:	str	r3, [sp, #48]	; 0x30
   139dc:	movhi	r2, #39	; 0x27
   139e0:	strbhi	r2, [r8, r4]
   139e4:	add	r2, r4, #1
   139e8:	cmp	sl, r2
   139ec:	movhi	r1, #36	; 0x24
   139f0:	strbhi	r1, [r8, r2]
   139f4:	add	r2, r4, #2
   139f8:	add	r4, r4, #3
   139fc:	cmp	sl, r2
   13a00:	movhi	r1, #39	; 0x27
   13a04:	strbhi	r1, [r8, r2]
   13a08:	cmp	r4, sl
   13a0c:	add	r9, r9, #1
   13a10:	movcc	r3, #92	; 0x5c
   13a14:	strbcc	r3, [r8, r4]
   13a18:	add	r4, r4, #1
   13a1c:	cmp	r4, sl
   13a20:	ldr	r3, [sp, #36]	; 0x24
   13a24:	strbcc	r5, [r8, r4]
   13a28:	cmp	r6, #0
   13a2c:	add	r4, r4, #1
   13a30:	moveq	r3, #0
   13a34:	str	r3, [sp, #36]	; 0x24
   13a38:	ldr	r3, [sp, #28]
   13a3c:	cmn	r3, #1
   13a40:	bne	134e8 <__assert_fail@plt+0x24e4>
   13a44:	ldr	r3, [sp, #32]
   13a48:	ldrb	r6, [r3, r9]
   13a4c:	adds	r6, r6, #0
   13a50:	movne	r6, #1
   13a54:	cmp	r6, #0
   13a58:	bne	134fc <__assert_fail@plt+0x24f8>
   13a5c:	str	fp, [sp, #152]	; 0x98
   13a60:	mov	fp, r8
   13a64:	cmp	r4, #0
   13a68:	ldr	r1, [sp, #44]	; 0x2c
   13a6c:	movne	r3, #0
   13a70:	ldr	r8, [sp, #152]	; 0x98
   13a74:	sub	r2, r8, #2
   13a78:	clz	r2, r2
   13a7c:	lsr	r2, r2, #5
   13a80:	andeq	r3, r2, r1
   13a84:	cmp	r3, #0
   13a88:	bne	14b44 <__assert_fail@plt+0x3b40>
   13a8c:	eor	r3, r1, #1
   13a90:	ands	r2, r2, r3
   13a94:	beq	14a70 <__assert_fail@plt+0x3a6c>
   13a98:	ldr	r3, [sp, #68]	; 0x44
   13a9c:	cmp	r3, #0
   13aa0:	beq	14a74 <__assert_fail@plt+0x3a70>
   13aa4:	ldr	r3, [sp, #36]	; 0x24
   13aa8:	cmp	r3, #0
   13aac:	bne	14b00 <__assert_fail@plt+0x3afc>
   13ab0:	ldr	r3, [sp, #72]	; 0x48
   13ab4:	adds	r3, r3, #0
   13ab8:	movne	r3, #1
   13abc:	cmp	sl, #0
   13ac0:	movne	r3, #0
   13ac4:	cmp	r3, #0
   13ac8:	ldreq	r2, [sp, #68]	; 0x44
   13acc:	beq	14a74 <__assert_fail@plt+0x3a70>
   13ad0:	ldr	r2, [sp, #72]	; 0x48
   13ad4:	str	r3, [sp, #68]	; 0x44
   13ad8:	movw	r3, #29152	; 0x71e0
   13adc:	movt	r3, #1
   13ae0:	mov	r1, #39	; 0x27
   13ae4:	mov	r4, #1
   13ae8:	ldr	sl, [sp, #72]	; 0x48
   13aec:	mov	r8, #2
   13af0:	str	r3, [sp, #60]	; 0x3c
   13af4:	mov	r3, #0
   13af8:	strb	r1, [fp]
   13afc:	str	r3, [sp, #44]	; 0x2c
   13b00:	str	r4, [sp, #56]	; 0x38
   13b04:	str	r2, [sp, #72]	; 0x48
   13b08:	b	134cc <__assert_fail@plt+0x24c8>
   13b0c:	mov	r7, #0
   13b10:	cmp	fp, #2
   13b14:	beq	143f4 <__assert_fail@plt+0x33f0>
   13b18:	ldr	r2, [sp, #40]	; 0x28
   13b1c:	ldr	r3, [sp, #56]	; 0x38
   13b20:	ldr	r1, [sp, #44]	; 0x2c
   13b24:	cmp	r3, #0
   13b28:	moveq	r3, #0
   13b2c:	andne	r3, r2, r1
   13b30:	cmp	r3, #0
   13b34:	moveq	r5, #92	; 0x5c
   13b38:	moveq	r3, r5
   13b3c:	bne	14400 <__assert_fail@plt+0x33fc>
   13b40:	ldr	r2, [sp, #40]	; 0x28
   13b44:	cmp	r2, #0
   13b48:	bne	1483c <__assert_fail@plt+0x3838>
   13b4c:	mov	r6, #0
   13b50:	ldr	r3, [sp, #44]	; 0x2c
   13b54:	cmp	r3, #0
   13b58:	beq	143ec <__assert_fail@plt+0x33e8>
   13b5c:	mov	r3, #0
   13b60:	b	1397c <__assert_fail@plt+0x2978>
   13b64:	mov	r7, #0
   13b68:	cmp	fp, #2
   13b6c:	beq	14464 <__assert_fail@plt+0x3460>
   13b70:	cmp	fp, #5
   13b74:	beq	14428 <__assert_fail@plt+0x3424>
   13b78:	sub	r3, fp, #2
   13b7c:	mov	r6, #0
   13b80:	clz	r3, r3
   13b84:	mov	r5, #63	; 0x3f
   13b88:	lsr	r3, r3, #5
   13b8c:	b	1396c <__assert_fail@plt+0x2968>
   13b90:	mov	r7, #0
   13b94:	cmp	fp, #2
   13b98:	movne	r3, #0
   13b9c:	movne	r5, #39	; 0x27
   13ba0:	strne	r6, [sp, #68]	; 0x44
   13ba4:	bne	1396c <__assert_fail@plt+0x2968>
   13ba8:	ldr	r3, [sp, #44]	; 0x2c
   13bac:	cmp	r3, #0
   13bb0:	bne	1486c <__assert_fail@plt+0x3868>
   13bb4:	ldr	r3, [sp, #72]	; 0x48
   13bb8:	cmp	sl, #0
   13bbc:	clz	r3, r3
   13bc0:	lsr	r3, r3, #5
   13bc4:	moveq	r3, #0
   13bc8:	cmp	r3, #0
   13bcc:	bne	14798 <__assert_fail@plt+0x3794>
   13bd0:	cmp	sl, r4
   13bd4:	movhi	r3, #39	; 0x27
   13bd8:	strbhi	r3, [r8, r4]
   13bdc:	add	r3, r4, #1
   13be0:	cmp	sl, r3
   13be4:	movhi	r2, #92	; 0x5c
   13be8:	strbhi	r2, [r8, r3]
   13bec:	add	r3, r4, #2
   13bf0:	cmp	sl, r3
   13bf4:	bls	13c00 <__assert_fail@plt+0x2bfc>
   13bf8:	mov	r2, #39	; 0x27
   13bfc:	strb	r2, [r8, r3]
   13c00:	mov	r3, #0
   13c04:	cmp	r7, #0
   13c08:	add	r4, r4, #3
   13c0c:	mov	r5, #39	; 0x27
   13c10:	str	r3, [sp, #48]	; 0x30
   13c14:	str	r6, [sp, #68]	; 0x44
   13c18:	bne	139ac <__assert_fail@plt+0x29a8>
   13c1c:	ldr	r2, [sp, #48]	; 0x30
   13c20:	eor	r3, r3, #1
   13c24:	add	r9, r9, #1
   13c28:	and	r3, r3, r2
   13c2c:	uxtb	r3, r3
   13c30:	cmp	r3, #0
   13c34:	beq	13a1c <__assert_fail@plt+0x2a18>
   13c38:	cmp	sl, r4
   13c3c:	movhi	r3, #39	; 0x27
   13c40:	strbhi	r3, [r8, r4]
   13c44:	add	r3, r4, #1
   13c48:	add	r4, r4, #2
   13c4c:	cmp	sl, r3
   13c50:	movhi	r2, #39	; 0x27
   13c54:	strbhi	r2, [r8, r3]
   13c58:	mov	r3, #0
   13c5c:	str	r3, [sp, #48]	; 0x30
   13c60:	b	13a1c <__assert_fail@plt+0x2a18>
   13c64:	mov	r3, #118	; 0x76
   13c68:	b	13b40 <__assert_fail@plt+0x2b3c>
   13c6c:	mov	r3, #116	; 0x74
   13c70:	ldr	r2, [sp, #44]	; 0x2c
   13c74:	cmp	fp, #2
   13c78:	movne	r2, #0
   13c7c:	andeq	r2, r2, #1
   13c80:	cmp	r2, #0
   13c84:	beq	13b40 <__assert_fail@plt+0x2b3c>
   13c88:	mov	fp, r8
   13c8c:	mov	r8, #2
   13c90:	ldr	r3, [sp, #40]	; 0x28
   13c94:	cmp	r3, #0
   13c98:	movne	r8, #4
   13c9c:	mov	lr, #0
   13ca0:	mov	r0, fp
   13ca4:	ldr	r2, [sp, #32]
   13ca8:	ldr	r3, [sp, #156]	; 0x9c
   13cac:	ldr	r1, [sp, #164]	; 0xa4
   13cb0:	bic	ip, r3, #2
   13cb4:	ldr	r3, [sp, #28]
   13cb8:	stm	sp, {r8, ip, lr}
   13cbc:	ldr	ip, [sp, #168]	; 0xa8
   13cc0:	str	r1, [sp, #12]
   13cc4:	mov	r1, sl
   13cc8:	str	ip, [sp, #16]
   13ccc:	bl	133e4 <__assert_fail@plt+0x23e0>
   13cd0:	mov	r4, r0
   13cd4:	mov	r0, r4
   13cd8:	add	sp, sp, #116	; 0x74
   13cdc:	ldrd	r4, [sp]
   13ce0:	ldrd	r6, [sp, #8]
   13ce4:	ldrd	r8, [sp, #16]
   13ce8:	ldrd	sl, [sp, #24]
   13cec:	add	sp, sp, #32
   13cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   13cf4:	mov	r5, #102	; 0x66
   13cf8:	ldr	r2, [sp, #44]	; 0x2c
   13cfc:	sub	r3, fp, #2
   13d00:	clz	r3, r3
   13d04:	lsr	r3, r3, #5
   13d08:	cmp	r2, #0
   13d0c:	bne	14768 <__assert_fail@plt+0x3764>
   13d10:	mov	r6, r2
   13d14:	b	13a08 <__assert_fail@plt+0x2a04>
   13d18:	mov	r5, #110	; 0x6e
   13d1c:	mov	r6, #0
   13d20:	b	139ac <__assert_fail@plt+0x29a8>
   13d24:	mov	r5, #98	; 0x62
   13d28:	b	13cf8 <__assert_fail@plt+0x2cf4>
   13d2c:	mov	r5, #97	; 0x61
   13d30:	b	13cf8 <__assert_fail@plt+0x2cf4>
   13d34:	mov	r7, #0
   13d38:	mov	r6, #0
   13d3c:	b	13b5c <__assert_fail@plt+0x2b58>
   13d40:	mov	r5, #114	; 0x72
   13d44:	b	13d1c <__assert_fail@plt+0x2d18>
   13d48:	ldr	r3, [sp, #44]	; 0x2c
   13d4c:	cmp	r3, #0
   13d50:	bne	14ae0 <__assert_fail@plt+0x3adc>
   13d54:	mov	r7, r3
   13d58:	ldr	r3, [sp, #48]	; 0x30
   13d5c:	sub	r2, fp, #2
   13d60:	clz	r2, r2
   13d64:	lsr	r2, r2, #5
   13d68:	eor	r3, r3, #1
   13d6c:	ands	r3, r2, r3
   13d70:	beq	14784 <__assert_fail@plt+0x3780>
   13d74:	cmp	sl, r4
   13d78:	movhi	r1, #39	; 0x27
   13d7c:	strbhi	r1, [r8, r4]
   13d80:	add	r1, r4, #1
   13d84:	cmp	sl, r1
   13d88:	movhi	r0, #36	; 0x24
   13d8c:	strbhi	r0, [r8, r1]
   13d90:	add	r1, r4, #2
   13d94:	cmp	sl, r1
   13d98:	movhi	r0, #39	; 0x27
   13d9c:	strbhi	r0, [r8, r1]
   13da0:	add	r1, r4, #3
   13da4:	cmp	sl, r1
   13da8:	bls	147dc <__assert_fail@plt+0x37d8>
   13dac:	mov	r4, r1
   13db0:	mov	r1, #92	; 0x5c
   13db4:	mov	r0, r4
   13db8:	str	r3, [sp, #48]	; 0x30
   13dbc:	strb	r1, [r8, r4]
   13dc0:	cmp	fp, #2
   13dc4:	add	r4, r4, #1
   13dc8:	beq	1482c <__assert_fail@plt+0x3828>
   13dcc:	ldr	r1, [sp, #28]
   13dd0:	add	r3, r9, #1
   13dd4:	cmp	r3, r1
   13dd8:	bcs	13df0 <__assert_fail@plt+0x2dec>
   13ddc:	ldr	r1, [sp, #32]
   13de0:	ldrb	r3, [r1, r3]
   13de4:	sub	r3, r3, #48	; 0x30
   13de8:	cmp	r3, #9
   13dec:	bls	14844 <__assert_fail@plt+0x3840>
   13df0:	mov	r5, #48	; 0x30
   13df4:	ldr	r3, [sp, #40]	; 0x28
   13df8:	eor	r3, r3, #1
   13dfc:	orrs	r2, r2, r3
   13e00:	mov	r3, r6
   13e04:	moveq	r6, r2
   13e08:	beq	1397c <__assert_fail@plt+0x2978>
   13e0c:	mov	r6, #0
   13e10:	b	139a4 <__assert_fail@plt+0x29a0>
   13e14:	cmp	r9, #0
   13e18:	mov	r2, r7
   13e1c:	bne	143bc <__assert_fail@plt+0x33b8>
   13e20:	mov	r6, r7
   13e24:	mov	r3, r9
   13e28:	mov	r7, r2
   13e2c:	b	1396c <__assert_fail@plt+0x2968>
   13e30:	mov	r2, r7
   13e34:	mov	r6, r7
   13e38:	mov	r3, #0
   13e3c:	mov	r7, r2
   13e40:	mov	r5, #32
   13e44:	b	1396c <__assert_fail@plt+0x2968>
   13e48:	mov	r6, r7
   13e4c:	b	13b5c <__assert_fail@plt+0x2b58>
   13e50:	mov	r7, #0
   13e54:	ldr	r3, [sp, #64]	; 0x40
   13e58:	cmp	r3, #1
   13e5c:	bne	1447c <__assert_fail@plt+0x3478>
   13e60:	bl	10ec0 <__ctype_b_loc@plt>
   13e64:	ldr	r2, [r0]
   13e68:	sxth	r3, r5
   13e6c:	lsl	r3, r3, #1
   13e70:	ldr	r1, [sp, #64]	; 0x40
   13e74:	ldrh	r3, [r2, r3]
   13e78:	mov	ip, r1
   13e7c:	and	r3, r3, #16384	; 0x4000
   13e80:	cmp	r3, #0
   13e84:	ldr	r3, [sp, #40]	; 0x28
   13e88:	movne	r6, #1
   13e8c:	moveq	r6, #0
   13e90:	movne	r2, #0
   13e94:	andeq	r2, r3, #1
   13e98:	cmp	r2, #0
   13e9c:	bne	147c4 <__assert_fail@plt+0x37c0>
   13ea0:	sub	r3, fp, #2
   13ea4:	clz	r3, r3
   13ea8:	lsr	r3, r3, #5
   13eac:	b	1396c <__assert_fail@plt+0x2968>
   13eb0:	cmp	r4, #0
   13eb4:	bne	14b54 <__assert_fail@plt+0x3b50>
   13eb8:	str	r4, [sp, #40]	; 0x28
   13ebc:	cmp	sl, #0
   13ec0:	bne	14b84 <__assert_fail@plt+0x3b80>
   13ec4:	mov	r3, #1
   13ec8:	movw	r2, #29152	; 0x71e0
   13ecc:	movt	r2, #1
   13ed0:	mov	r4, r3
   13ed4:	mov	r8, #2
   13ed8:	str	r3, [sp, #36]	; 0x24
   13edc:	str	sl, [sp, #44]	; 0x2c
   13ee0:	str	sl, [sp, #48]	; 0x30
   13ee4:	str	r3, [sp, #56]	; 0x38
   13ee8:	str	r2, [sp, #60]	; 0x3c
   13eec:	str	sl, [sp, #68]	; 0x44
   13ef0:	str	sl, [sp, #72]	; 0x48
   13ef4:	b	134cc <__assert_fail@plt+0x24c8>
   13ef8:	ldr	r3, [sp, #32]
   13efc:	ldrb	r5, [r3, r9]
   13f00:	cmp	r5, #126	; 0x7e
   13f04:	ldrls	pc, [pc, r5, lsl #2]
   13f08:	b	13e54 <__assert_fail@plt+0x2e50>
   13f0c:	andeq	r4, r1, r0, lsr r1
   13f10:	andeq	r3, r1, r4, asr lr
   13f14:	andeq	r3, r1, r4, asr lr
   13f18:	andeq	r3, r1, r4, asr lr
   13f1c:	andeq	r3, r1, r4, asr lr
   13f20:	andeq	r3, r1, r4, asr lr
   13f24:	andeq	r3, r1, r4, asr lr
   13f28:	andeq	r4, r1, r8, lsr #2
   13f2c:	andeq	r4, r1, r0, lsr #2
   13f30:	andeq	r3, r1, ip, ror #24
   13f34:	andeq	r4, r1, r8, lsl r1
   13f38:	andeq	r3, r1, r4, ror #24
   13f3c:	andeq	r4, r1, r0, lsl r1
   13f40:	andeq	r4, r1, r8, lsl #2
   13f44:	andeq	r3, r1, r4, asr lr
   13f48:	andeq	r3, r1, r4, asr lr
   13f4c:	andeq	r3, r1, r4, asr lr
   13f50:	andeq	r3, r1, r4, asr lr
   13f54:	andeq	r3, r1, r4, asr lr
   13f58:	andeq	r3, r1, r4, asr lr
   13f5c:	andeq	r3, r1, r4, asr lr
   13f60:	andeq	r3, r1, r4, asr lr
   13f64:	andeq	r3, r1, r4, asr lr
   13f68:	andeq	r3, r1, r4, asr lr
   13f6c:	andeq	r3, r1, r4, asr lr
   13f70:	andeq	r3, r1, r4, asr lr
   13f74:	andeq	r3, r1, r4, asr lr
   13f78:	andeq	r3, r1, r4, asr lr
   13f7c:	andeq	r3, r1, r4, asr lr
   13f80:	andeq	r3, r1, r4, asr lr
   13f84:	andeq	r3, r1, r4, asr lr
   13f88:	andeq	r3, r1, r4, asr lr
   13f8c:	andeq	r4, r1, r4, lsl #3
   13f90:	andeq	r4, r1, r4, ror #2
   13f94:	andeq	r4, r1, r4, ror #2
   13f98:	andeq	r4, r1, r4, asr r1
   13f9c:	andeq	r4, r1, r4, ror #2
   13fa0:	andeq	r3, r1, r0, lsr #29
   13fa4:	andeq	r4, r1, r4, ror #2
   13fa8:	muleq	r1, r4, fp
   13fac:	andeq	r4, r1, r4, ror #2
   13fb0:	andeq	r4, r1, r4, ror #2
   13fb4:	andeq	r4, r1, r4, ror #2
   13fb8:	andeq	r3, r1, r0, lsr #29
   13fbc:	andeq	r3, r1, r0, lsr #29
   13fc0:	andeq	r3, r1, r0, lsr #29
   13fc4:	andeq	r3, r1, r0, lsr #29
   13fc8:	andeq	r3, r1, r0, lsr #29
   13fcc:	andeq	r3, r1, r0, lsr #29
   13fd0:	andeq	r3, r1, r0, lsr #29
   13fd4:	andeq	r3, r1, r0, lsr #29
   13fd8:	andeq	r3, r1, r0, lsr #29
   13fdc:	andeq	r3, r1, r0, lsr #29
   13fe0:	andeq	r3, r1, r0, lsr #29
   13fe4:	andeq	r3, r1, r0, lsr #29
   13fe8:	andeq	r3, r1, r0, lsr #29
   13fec:	andeq	r3, r1, r0, lsr #29
   13ff0:	andeq	r3, r1, r0, lsr #29
   13ff4:	andeq	r3, r1, r0, lsr #29
   13ff8:	andeq	r4, r1, r4, ror #2
   13ffc:	andeq	r4, r1, r4, ror #2
   14000:	andeq	r4, r1, r4, ror #2
   14004:	andeq	r4, r1, r4, ror #2
   14008:	andeq	r3, r1, r8, ror #22
   1400c:	andeq	r3, r1, r4, asr lr
   14010:	andeq	r3, r1, r0, lsr #29
   14014:	andeq	r3, r1, r0, lsr #29
   14018:	andeq	r3, r1, r0, lsr #29
   1401c:	andeq	r3, r1, r0, lsr #29
   14020:	andeq	r3, r1, r0, lsr #29
   14024:	andeq	r3, r1, r0, lsr #29
   14028:	andeq	r3, r1, r0, lsr #29
   1402c:	andeq	r3, r1, r0, lsr #29
   14030:	andeq	r3, r1, r0, lsr #29
   14034:	andeq	r3, r1, r0, lsr #29
   14038:	andeq	r3, r1, r0, lsr #29
   1403c:	andeq	r3, r1, r0, lsr #29
   14040:	andeq	r3, r1, r0, lsr #29
   14044:	andeq	r3, r1, r0, lsr #29
   14048:	andeq	r3, r1, r0, lsr #29
   1404c:	andeq	r3, r1, r0, lsr #29
   14050:	andeq	r3, r1, r0, lsr #29
   14054:	andeq	r3, r1, r0, lsr #29
   14058:	andeq	r3, r1, r0, lsr #29
   1405c:	andeq	r3, r1, r0, lsr #29
   14060:	andeq	r3, r1, r0, lsr #29
   14064:	andeq	r3, r1, r0, lsr #29
   14068:	andeq	r3, r1, r0, lsr #29
   1406c:	andeq	r3, r1, r0, lsr #29
   14070:	andeq	r3, r1, r0, lsr #29
   14074:	andeq	r3, r1, r0, lsr #29
   14078:	andeq	r4, r1, r4, ror #2
   1407c:	andeq	r3, r1, r0, lsl fp
   14080:	andeq	r3, r1, r0, lsr #29
   14084:	andeq	r4, r1, r4, ror #2
   14088:	andeq	r3, r1, r0, lsr #29
   1408c:	andeq	r4, r1, r4, ror #2
   14090:	andeq	r3, r1, r0, lsr #29
   14094:	andeq	r3, r1, r0, lsr #29
   14098:	andeq	r3, r1, r0, lsr #29
   1409c:	andeq	r3, r1, r0, lsr #29
   140a0:	andeq	r3, r1, r0, lsr #29
   140a4:	andeq	r3, r1, r0, lsr #29
   140a8:	andeq	r3, r1, r0, lsr #29
   140ac:	andeq	r3, r1, r0, lsr #29
   140b0:	andeq	r3, r1, r0, lsr #29
   140b4:	andeq	r3, r1, r0, lsr #29
   140b8:	andeq	r3, r1, r0, lsr #29
   140bc:	andeq	r3, r1, r0, lsr #29
   140c0:	andeq	r3, r1, r0, lsr #29
   140c4:	andeq	r3, r1, r0, lsr #29
   140c8:	andeq	r3, r1, r0, lsr #29
   140cc:	andeq	r3, r1, r0, lsr #29
   140d0:	andeq	r3, r1, r0, lsr #29
   140d4:	andeq	r3, r1, r0, lsr #29
   140d8:	andeq	r3, r1, r0, lsr #29
   140dc:	andeq	r3, r1, r0, lsr #29
   140e0:	andeq	r3, r1, r0, lsr #29
   140e4:	andeq	r3, r1, r0, lsr #29
   140e8:	andeq	r3, r1, r0, lsr #29
   140ec:	andeq	r3, r1, r0, lsr #29
   140f0:	andeq	r3, r1, r0, lsr #29
   140f4:	andeq	r3, r1, r0, lsr #29
   140f8:	andeq	r3, r1, r4, lsr r9
   140fc:	andeq	r4, r1, r4, ror #2
   14100:	andeq	r3, r1, r4, lsr r9
   14104:	andeq	r4, r1, r4, asr r1
   14108:	mov	r3, #114	; 0x72
   1410c:	b	13c70 <__assert_fail@plt+0x2c6c>
   14110:	mov	r3, #102	; 0x66
   14114:	b	13b40 <__assert_fail@plt+0x2b3c>
   14118:	mov	r3, #110	; 0x6e
   1411c:	b	13c70 <__assert_fail@plt+0x2c6c>
   14120:	mov	r3, #98	; 0x62
   14124:	b	13b40 <__assert_fail@plt+0x2b3c>
   14128:	mov	r3, #97	; 0x61
   1412c:	b	13b40 <__assert_fail@plt+0x2b3c>
   14130:	ldr	r3, [sp, #40]	; 0x28
   14134:	cmp	r3, #0
   14138:	bne	13d48 <__assert_fail@plt+0x2d44>
   1413c:	ldr	r3, [sp, #156]	; 0x9c
   14140:	tst	r3, #1
   14144:	addne	r9, r9, #1
   14148:	bne	134dc <__assert_fail@plt+0x24d8>
   1414c:	ldr	r7, [sp, #40]	; 0x28
   14150:	b	13b4c <__assert_fail@plt+0x2b48>
   14154:	sub	r3, fp, #2
   14158:	clz	r3, r3
   1415c:	lsr	r3, r3, #5
   14160:	b	13960 <__assert_fail@plt+0x295c>
   14164:	sub	r3, fp, #2
   14168:	mov	r6, #0
   1416c:	clz	r3, r3
   14170:	lsr	r3, r3, #5
   14174:	ldr	r2, [sp, #44]	; 0x2c
   14178:	tst	r2, r3
   1417c:	beq	1396c <__assert_fail@plt+0x2968>
   14180:	b	13c88 <__assert_fail@plt+0x2c84>
   14184:	sub	r3, fp, #2
   14188:	clz	r3, r3
   1418c:	lsr	r3, r3, #5
   14190:	b	14174 <__assert_fail@plt+0x3170>
   14194:	ldr	r3, [sp, #52]	; 0x34
   14198:	ldrb	r5, [r3]
   1419c:	cmp	r5, #126	; 0x7e
   141a0:	ldrls	pc, [pc, r5, lsl #2]
   141a4:	b	13e50 <__assert_fail@plt+0x2e4c>
   141a8:	andeq	r3, r1, r8, asr #26
   141ac:	andeq	r3, r1, r0, asr lr
   141b0:	andeq	r3, r1, r0, asr lr
   141b4:	andeq	r3, r1, r0, asr lr
   141b8:	andeq	r3, r1, r0, asr lr
   141bc:	andeq	r3, r1, r0, asr lr
   141c0:	andeq	r3, r1, r0, asr lr
   141c4:	andeq	r3, r1, ip, lsr #26
   141c8:	andeq	r3, r1, r4, lsr #26
   141cc:	andeq	r4, r1, r0, ror #7
   141d0:	andeq	r3, r1, r8, lsl sp
   141d4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   141d8:	strdeq	r3, [r1], -r4
   141dc:	andeq	r3, r1, r0, asr #26
   141e0:	andeq	r3, r1, r0, asr lr
   141e4:	andeq	r3, r1, r0, asr lr
   141e8:	andeq	r3, r1, r0, asr lr
   141ec:	andeq	r3, r1, r0, asr lr
   141f0:	andeq	r3, r1, r0, asr lr
   141f4:	andeq	r3, r1, r0, asr lr
   141f8:	andeq	r3, r1, r0, asr lr
   141fc:	andeq	r3, r1, r0, asr lr
   14200:	andeq	r3, r1, r0, asr lr
   14204:	andeq	r3, r1, r0, asr lr
   14208:	andeq	r3, r1, r0, asr lr
   1420c:	andeq	r3, r1, r0, asr lr
   14210:	andeq	r3, r1, r0, asr lr
   14214:	andeq	r3, r1, r0, asr lr
   14218:	andeq	r3, r1, r0, asr lr
   1421c:	andeq	r3, r1, r0, asr lr
   14220:	andeq	r3, r1, r0, asr lr
   14224:	andeq	r3, r1, r0, asr lr
   14228:	andeq	r4, r1, ip, asr #7
   1422c:	andeq	r3, r1, r4, lsr sp
   14230:	andeq	r3, r1, r4, lsr sp
   14234:			; <UNDEFINED> instruction: 0x000143b0
   14238:	andeq	r3, r1, r4, lsr sp
   1423c:	andeq	r4, r1, r4, lsr #7
   14240:	andeq	r3, r1, r4, lsr sp
   14244:	muleq	r1, r0, fp
   14248:	andeq	r3, r1, r4, lsr sp
   1424c:	andeq	r3, r1, r4, lsr sp
   14250:	andeq	r3, r1, r4, lsr sp
   14254:	andeq	r4, r1, r4, lsr #7
   14258:	andeq	r4, r1, r4, lsr #7
   1425c:	andeq	r4, r1, r4, lsr #7
   14260:	andeq	r4, r1, r4, lsr #7
   14264:	andeq	r4, r1, r4, lsr #7
   14268:	andeq	r4, r1, r4, lsr #7
   1426c:	andeq	r4, r1, r4, lsr #7
   14270:	andeq	r4, r1, r4, lsr #7
   14274:	andeq	r4, r1, r4, lsr #7
   14278:	andeq	r4, r1, r4, lsr #7
   1427c:	andeq	r4, r1, r4, lsr #7
   14280:	andeq	r4, r1, r4, lsr #7
   14284:	andeq	r4, r1, r4, lsr #7
   14288:	andeq	r4, r1, r4, lsr #7
   1428c:	andeq	r4, r1, r4, lsr #7
   14290:	andeq	r4, r1, r4, lsr #7
   14294:	andeq	r3, r1, r4, lsr sp
   14298:	andeq	r3, r1, r4, lsr sp
   1429c:	andeq	r3, r1, r4, lsr sp
   142a0:	andeq	r3, r1, r4, lsr sp
   142a4:	andeq	r3, r1, r4, ror #22
   142a8:	andeq	r3, r1, r0, asr lr
   142ac:	andeq	r4, r1, r4, lsr #7
   142b0:	andeq	r4, r1, r4, lsr #7
   142b4:	andeq	r4, r1, r4, lsr #7
   142b8:	andeq	r4, r1, r4, lsr #7
   142bc:	andeq	r4, r1, r4, lsr #7
   142c0:	andeq	r4, r1, r4, lsr #7
   142c4:	andeq	r4, r1, r4, lsr #7
   142c8:	andeq	r4, r1, r4, lsr #7
   142cc:	andeq	r4, r1, r4, lsr #7
   142d0:	andeq	r4, r1, r4, lsr #7
   142d4:	andeq	r4, r1, r4, lsr #7
   142d8:	andeq	r4, r1, r4, lsr #7
   142dc:	andeq	r4, r1, r4, lsr #7
   142e0:	andeq	r4, r1, r4, lsr #7
   142e4:	andeq	r4, r1, r4, lsr #7
   142e8:	andeq	r4, r1, r4, lsr #7
   142ec:	andeq	r4, r1, r4, lsr #7
   142f0:	andeq	r4, r1, r4, lsr #7
   142f4:	andeq	r4, r1, r4, lsr #7
   142f8:	andeq	r4, r1, r4, lsr #7
   142fc:	andeq	r4, r1, r4, lsr #7
   14300:	andeq	r4, r1, r4, lsr #7
   14304:	andeq	r4, r1, r4, lsr #7
   14308:	andeq	r4, r1, r4, lsr #7
   1430c:	andeq	r4, r1, r4, lsr #7
   14310:	andeq	r4, r1, r4, lsr #7
   14314:	andeq	r3, r1, r4, lsr sp
   14318:	andeq	r3, r1, ip, lsl #22
   1431c:	andeq	r4, r1, r4, lsr #7
   14320:	andeq	r3, r1, r4, lsr sp
   14324:	andeq	r4, r1, r4, lsr #7
   14328:	andeq	r3, r1, r4, lsr sp
   1432c:	andeq	r4, r1, r4, lsr #7
   14330:	andeq	r4, r1, r4, lsr #7
   14334:	andeq	r4, r1, r4, lsr #7
   14338:	andeq	r4, r1, r4, lsr #7
   1433c:	andeq	r4, r1, r4, lsr #7
   14340:	andeq	r4, r1, r4, lsr #7
   14344:	andeq	r4, r1, r4, lsr #7
   14348:	andeq	r4, r1, r4, lsr #7
   1434c:	andeq	r4, r1, r4, lsr #7
   14350:	andeq	r4, r1, r4, lsr #7
   14354:	andeq	r4, r1, r4, lsr #7
   14358:	andeq	r4, r1, r4, lsr #7
   1435c:	andeq	r4, r1, r4, lsr #7
   14360:	andeq	r4, r1, r4, lsr #7
   14364:	andeq	r4, r1, r4, lsr #7
   14368:	andeq	r4, r1, r4, lsr #7
   1436c:	andeq	r4, r1, r4, lsr #7
   14370:	andeq	r4, r1, r4, lsr #7
   14374:	andeq	r4, r1, r4, lsr #7
   14378:	andeq	r4, r1, r4, lsr #7
   1437c:	andeq	r4, r1, r4, lsr #7
   14380:	andeq	r4, r1, r4, lsr #7
   14384:	andeq	r4, r1, r4, lsr #7
   14388:	andeq	r4, r1, r4, lsr #7
   1438c:	andeq	r4, r1, r4, lsr #7
   14390:	andeq	r4, r1, r4, lsr #7
   14394:	andeq	r3, r1, r0, lsr r9
   14398:	andeq	r3, r1, r4, lsr sp
   1439c:	andeq	r3, r1, r0, lsr r9
   143a0:			; <UNDEFINED> instruction: 0x000143b0
   143a4:	mov	r6, r7
   143a8:	mov	r7, #0
   143ac:	b	13b5c <__assert_fail@plt+0x2b58>
   143b0:	cmp	r9, #0
   143b4:	mov	r2, #0
   143b8:	beq	13e20 <__assert_fail@plt+0x2e1c>
   143bc:	mov	r6, #0
   143c0:	mov	r7, r2
   143c4:	mov	r3, r6
   143c8:	b	1397c <__assert_fail@plt+0x2978>
   143cc:	mov	r2, #0
   143d0:	b	13e34 <__assert_fail@plt+0x2e30>
   143d4:	mov	r7, #0
   143d8:	mov	r3, #118	; 0x76
   143dc:	b	13b40 <__assert_fail@plt+0x2b3c>
   143e0:	mov	r7, #0
   143e4:	mov	r3, #116	; 0x74
   143e8:	b	13c70 <__assert_fail@plt+0x2c6c>
   143ec:	ldr	r3, [sp, #44]	; 0x2c
   143f0:	b	139a4 <__assert_fail@plt+0x29a0>
   143f4:	ldr	r3, [sp, #44]	; 0x2c
   143f8:	cmp	r3, #0
   143fc:	bne	1486c <__assert_fail@plt+0x3868>
   14400:	add	r9, r9, #1
   14404:	mov	r6, #0
   14408:	ldr	r3, [sp, #48]	; 0x30
   1440c:	mov	r5, #92	; 0x5c
   14410:	b	13c30 <__assert_fail@plt+0x2c2c>
   14414:	ldr	r3, [sp, #32]
   14418:	ldrb	r2, [r3, #1]
   1441c:	adds	r2, r2, #0
   14420:	movne	r2, #1
   14424:	b	1394c <__assert_fail@plt+0x2948>
   14428:	ldr	r3, [sp, #156]	; 0x9c
   1442c:	ands	r3, r3, #4
   14430:	beq	14458 <__assert_fail@plt+0x3454>
   14434:	ldr	r2, [sp, #28]
   14438:	add	r3, r9, #2
   1443c:	cmp	r3, r2
   14440:	bcs	14454 <__assert_fail@plt+0x3450>
   14444:	ldr	r2, [sp, #52]	; 0x34
   14448:	ldrb	r5, [r2, #1]
   1444c:	cmp	r5, #63	; 0x3f
   14450:	beq	148d0 <__assert_fail@plt+0x38cc>
   14454:	mov	r3, #0
   14458:	mov	r5, #63	; 0x3f
   1445c:	mov	r6, r3
   14460:	b	1396c <__assert_fail@plt+0x2968>
   14464:	ldr	r3, [sp, #44]	; 0x2c
   14468:	cmp	r3, #0
   1446c:	bne	1486c <__assert_fail@plt+0x3868>
   14470:	mov	r6, r3
   14474:	mov	r5, #63	; 0x3f
   14478:	b	139a4 <__assert_fail@plt+0x29a0>
   1447c:	ldr	r1, [sp, #28]
   14480:	mov	r2, #0
   14484:	mov	r3, #0
   14488:	strd	r2, [sp, #104]	; 0x68
   1448c:	cmn	r1, #1
   14490:	bne	144a0 <__assert_fail@plt+0x349c>
   14494:	ldr	r0, [sp, #32]
   14498:	bl	10ed8 <strlen@plt>
   1449c:	str	r0, [sp, #28]
   144a0:	str	r8, [sp, #76]	; 0x4c
   144a4:	mov	r3, #0
   144a8:	str	sl, [sp, #80]	; 0x50
   144ac:	ldr	sl, [sp, #32]
   144b0:	str	r5, [sp, #84]	; 0x54
   144b4:	mov	r5, r3
   144b8:	ldr	r8, [sp, #44]	; 0x2c
   144bc:	str	r7, [sp, #88]	; 0x58
   144c0:	str	r4, [sp, #92]	; 0x5c
   144c4:	ldr	r2, [sp, #28]
   144c8:	add	r4, r9, r5
   144cc:	add	r3, sp, #104	; 0x68
   144d0:	add	r7, sl, r4
   144d4:	add	r0, sp, #100	; 0x64
   144d8:	mov	r1, r7
   144dc:	sub	r2, r2, r4
   144e0:	bl	16234 <__assert_fail@plt+0x5230>
   144e4:	subs	r1, r0, #0
   144e8:	beq	14534 <__assert_fail@plt+0x3530>
   144ec:	cmn	r1, #1
   144f0:	beq	148ac <__assert_fail@plt+0x38a8>
   144f4:	cmn	r1, #2
   144f8:	beq	149cc <__assert_fail@plt+0x39c8>
   144fc:	cmp	fp, #2
   14500:	movne	r3, #0
   14504:	andeq	r3, r8, #1
   14508:	cmp	r3, #0
   1450c:	bne	14698 <__assert_fail@plt+0x3694>
   14510:	ldr	r0, [sp, #100]	; 0x64
   14514:	add	r5, r5, r1
   14518:	bl	10e30 <iswprint@plt>
   1451c:	cmp	r0, #0
   14520:	add	r0, sp, #104	; 0x68
   14524:	moveq	r6, #0
   14528:	bl	10ddc <mbsinit@plt>
   1452c:	cmp	r0, #0
   14530:	beq	144c4 <__assert_fail@plt+0x34c0>
   14534:	ldr	r3, [sp, #40]	; 0x28
   14538:	mov	ip, r5
   1453c:	eor	r2, r6, #1
   14540:	ldr	r8, [sp, #76]	; 0x4c
   14544:	ldr	sl, [sp, #80]	; 0x50
   14548:	and	r2, r2, r3
   1454c:	ldr	r5, [sp, #84]	; 0x54
   14550:	ldr	r7, [sp, #88]	; 0x58
   14554:	ldr	r4, [sp, #92]	; 0x5c
   14558:	cmp	ip, #1
   1455c:	bls	13e98 <__assert_fail@plt+0x2e94>
   14560:	add	r1, ip, r9
   14564:	mov	r0, #39	; 0x27
   14568:	ldr	lr, [sp, #52]	; 0x34
   1456c:	mov	ip, #0
   14570:	str	r6, [sp, #52]	; 0x34
   14574:	ldr	r6, [sp, #48]	; 0x30
   14578:	b	14634 <__assert_fail@plt+0x3630>
   1457c:	ldr	ip, [sp, #44]	; 0x2c
   14580:	sub	r3, fp, #2
   14584:	clz	r3, r3
   14588:	lsr	r3, r3, #5
   1458c:	cmp	ip, #0
   14590:	bne	147a4 <__assert_fail@plt+0x37a0>
   14594:	eor	ip, r6, #1
   14598:	ands	r3, r3, ip
   1459c:	beq	145cc <__assert_fail@plt+0x35c8>
   145a0:	cmp	sl, r4
   145a4:	add	ip, r4, #1
   145a8:	strbhi	r0, [r8, r4]
   145ac:	cmp	sl, ip
   145b0:	movhi	r6, #36	; 0x24
   145b4:	strbhi	r6, [r8, ip]
   145b8:	add	ip, r4, #2
   145bc:	mov	r6, r3
   145c0:	cmp	sl, ip
   145c4:	add	r4, r4, #3
   145c8:	strbhi	r0, [r8, ip]
   145cc:	cmp	sl, r4
   145d0:	movhi	r3, #92	; 0x5c
   145d4:	strbhi	r3, [r8, r4]
   145d8:	add	r3, r4, #1
   145dc:	cmp	sl, r3
   145e0:	bls	145f0 <__assert_fail@plt+0x35ec>
   145e4:	lsr	ip, r5, #6
   145e8:	add	ip, ip, #48	; 0x30
   145ec:	strb	ip, [r8, r3]
   145f0:	add	r3, r4, #2
   145f4:	cmp	sl, r3
   145f8:	bls	14608 <__assert_fail@plt+0x3604>
   145fc:	ubfx	ip, r5, #3, #3
   14600:	add	ip, ip, #48	; 0x30
   14604:	strb	ip, [r8, r3]
   14608:	add	r9, r9, #1
   1460c:	and	r5, r5, #7
   14610:	cmp	r9, r1
   14614:	add	r5, r5, #48	; 0x30
   14618:	add	r4, r4, #3
   1461c:	bcs	147d0 <__assert_fail@plt+0x37cc>
   14620:	mov	ip, r2
   14624:	cmp	sl, r4
   14628:	strbhi	r5, [r8, r4]
   1462c:	add	r4, r4, #1
   14630:	ldrb	r5, [lr, #1]!
   14634:	cmp	r2, #0
   14638:	bne	1457c <__assert_fail@plt+0x3578>
   1463c:	eor	r3, ip, #1
   14640:	cmp	r7, #0
   14644:	and	r3, r3, r6
   14648:	uxtb	r3, r3
   1464c:	beq	14660 <__assert_fail@plt+0x365c>
   14650:	cmp	sl, r4
   14654:	movhi	r7, #92	; 0x5c
   14658:	strbhi	r7, [r8, r4]
   1465c:	add	r4, r4, #1
   14660:	add	r9, r9, #1
   14664:	cmp	r9, r1
   14668:	bcs	147b8 <__assert_fail@plt+0x37b4>
   1466c:	cmp	r3, #0
   14670:	beq	147f0 <__assert_fail@plt+0x37ec>
   14674:	cmp	sl, r4
   14678:	add	r3, r4, #1
   1467c:	mov	r7, #0
   14680:	strbhi	r0, [r8, r4]
   14684:	cmp	sl, r3
   14688:	add	r4, r4, #2
   1468c:	mov	r6, r7
   14690:	strbhi	r0, [r8, r3]
   14694:	b	14624 <__assert_fail@plt+0x3620>
   14698:	cmp	r1, #1
   1469c:	beq	14510 <__assert_fail@plt+0x350c>
   146a0:	add	r2, r4, #1
   146a4:	add	r3, sl, r1
   146a8:	add	r2, sl, r2
   146ac:	add	r4, r3, r4
   146b0:	ldrb	r3, [r2], #1
   146b4:	sub	r3, r3, #91	; 0x5b
   146b8:	cmp	r3, #33	; 0x21
   146bc:	ldrls	pc, [pc, r3, lsl #2]
   146c0:	b	1474c <__assert_fail@plt+0x3748>
   146c4:	andeq	r4, r1, r8, asr r7
   146c8:	andeq	r4, r1, r8, asr r7
   146cc:	andeq	r4, r1, ip, asr #14
   146d0:	andeq	r4, r1, r8, asr r7
   146d4:	andeq	r4, r1, ip, asr #14
   146d8:	andeq	r4, r1, r8, asr r7
   146dc:	andeq	r4, r1, ip, asr #14
   146e0:	andeq	r4, r1, ip, asr #14
   146e4:	andeq	r4, r1, ip, asr #14
   146e8:	andeq	r4, r1, ip, asr #14
   146ec:	andeq	r4, r1, ip, asr #14
   146f0:	andeq	r4, r1, ip, asr #14
   146f4:	andeq	r4, r1, ip, asr #14
   146f8:	andeq	r4, r1, ip, asr #14
   146fc:	andeq	r4, r1, ip, asr #14
   14700:	andeq	r4, r1, ip, asr #14
   14704:	andeq	r4, r1, ip, asr #14
   14708:	andeq	r4, r1, ip, asr #14
   1470c:	andeq	r4, r1, ip, asr #14
   14710:	andeq	r4, r1, ip, asr #14
   14714:	andeq	r4, r1, ip, asr #14
   14718:	andeq	r4, r1, ip, asr #14
   1471c:	andeq	r4, r1, ip, asr #14
   14720:	andeq	r4, r1, ip, asr #14
   14724:	andeq	r4, r1, ip, asr #14
   14728:	andeq	r4, r1, ip, asr #14
   1472c:	andeq	r4, r1, ip, asr #14
   14730:	andeq	r4, r1, ip, asr #14
   14734:	andeq	r4, r1, ip, asr #14
   14738:	andeq	r4, r1, ip, asr #14
   1473c:	andeq	r4, r1, ip, asr #14
   14740:	andeq	r4, r1, ip, asr #14
   14744:	andeq	r4, r1, ip, asr #14
   14748:	andeq	r4, r1, r8, asr r7
   1474c:	cmp	r4, r2
   14750:	bne	146b0 <__assert_fail@plt+0x36ac>
   14754:	b	14510 <__assert_fail@plt+0x350c>
   14758:	mov	r8, #2
   1475c:	ldr	fp, [sp, #76]	; 0x4c
   14760:	ldr	sl, [sp, #80]	; 0x50
   14764:	b	13c90 <__assert_fail@plt+0x2c8c>
   14768:	ldr	r2, [sp, #40]	; 0x28
   1476c:	str	fp, [sp, #152]	; 0x98
   14770:	mov	fp, r8
   14774:	ldr	r8, [sp, #152]	; 0x98
   14778:	and	r2, r2, r3
   1477c:	str	r2, [sp, #40]	; 0x28
   14780:	b	13c90 <__assert_fail@plt+0x2c8c>
   14784:	cmp	sl, r4
   14788:	movls	r0, r4
   1478c:	bls	13dc0 <__assert_fail@plt+0x2dbc>
   14790:	ldr	r3, [sp, #48]	; 0x30
   14794:	b	13db0 <__assert_fail@plt+0x2dac>
   14798:	str	sl, [sp, #72]	; 0x48
   1479c:	ldr	sl, [sp, #44]	; 0x2c
   147a0:	b	13c00 <__assert_fail@plt+0x2bfc>
   147a4:	str	r3, [sp, #40]	; 0x28
   147a8:	str	fp, [sp, #152]	; 0x98
   147ac:	mov	fp, r8
   147b0:	ldr	r8, [sp, #152]	; 0x98
   147b4:	b	13c90 <__assert_fail@plt+0x2c8c>
   147b8:	str	r6, [sp, #48]	; 0x30
   147bc:	ldr	r6, [sp, #52]	; 0x34
   147c0:	b	13c30 <__assert_fail@plt+0x2c2c>
   147c4:	mov	r6, #0
   147c8:	ldr	r2, [sp, #40]	; 0x28
   147cc:	b	14560 <__assert_fail@plt+0x355c>
   147d0:	str	r6, [sp, #48]	; 0x30
   147d4:	ldr	r6, [sp, #52]	; 0x34
   147d8:	b	13a1c <__assert_fail@plt+0x2a18>
   147dc:	add	r4, r4, #4
   147e0:	mov	r6, #0
   147e4:	str	r3, [sp, #48]	; 0x30
   147e8:	mov	r5, #48	; 0x30
   147ec:	b	139a4 <__assert_fail@plt+0x29a0>
   147f0:	mov	r7, r3
   147f4:	b	14624 <__assert_fail@plt+0x3620>
   147f8:	mov	r3, #1
   147fc:	movw	r2, #29132	; 0x71cc
   14800:	movt	r2, #1
   14804:	mov	r4, r3
   14808:	str	r3, [sp, #36]	; 0x24
   1480c:	str	r3, [sp, #40]	; 0x28
   14810:	str	sl, [sp, #44]	; 0x2c
   14814:	str	sl, [sp, #48]	; 0x30
   14818:	str	r3, [sp, #56]	; 0x38
   1481c:	str	r2, [sp, #60]	; 0x3c
   14820:	str	sl, [sp, #68]	; 0x44
   14824:	str	sl, [sp, #72]	; 0x48
   14828:	b	134cc <__assert_fail@plt+0x24c8>
   1482c:	mov	r3, r6
   14830:	mov	r5, #48	; 0x30
   14834:	mov	r6, #0
   14838:	b	139a4 <__assert_fail@plt+0x29a0>
   1483c:	mov	r5, r3
   14840:	b	13d1c <__assert_fail@plt+0x2d18>
   14844:	cmp	sl, r4
   14848:	mov	r5, #48	; 0x30
   1484c:	movhi	r3, #48	; 0x30
   14850:	strbhi	r3, [r8, r4]
   14854:	add	r3, r0, #2
   14858:	add	r4, r0, #3
   1485c:	cmp	sl, r3
   14860:	movhi	r1, #48	; 0x30
   14864:	strbhi	r1, [r8, r3]
   14868:	b	13df4 <__assert_fail@plt+0x2df0>
   1486c:	str	fp, [sp, #152]	; 0x98
   14870:	mov	fp, r8
   14874:	ldr	r8, [sp, #152]	; 0x98
   14878:	b	13c90 <__assert_fail@plt+0x2c8c>
   1487c:	ldr	r3, [sp, #164]	; 0xa4
   14880:	ldrb	r3, [r3]
   14884:	cmp	r3, #0
   14888:	beq	1349c <__assert_fail@plt+0x2498>
   1488c:	ldr	r2, [sp, #164]	; 0xa4
   14890:	cmp	sl, r4
   14894:	strbhi	r3, [fp, r4]
   14898:	add	r4, r4, #1
   1489c:	ldrb	r3, [r2, #1]!
   148a0:	cmp	r3, #0
   148a4:	bne	14890 <__assert_fail@plt+0x388c>
   148a8:	b	1349c <__assert_fail@plt+0x2498>
   148ac:	mov	ip, r5
   148b0:	mov	r6, #0
   148b4:	ldr	r2, [sp, #40]	; 0x28
   148b8:	ldr	r8, [sp, #76]	; 0x4c
   148bc:	ldr	sl, [sp, #80]	; 0x50
   148c0:	ldr	r5, [sp, #84]	; 0x54
   148c4:	ldr	r7, [sp, #88]	; 0x58
   148c8:	ldr	r4, [sp, #92]	; 0x5c
   148cc:	b	14558 <__assert_fail@plt+0x3554>
   148d0:	ldr	r2, [sp, #32]
   148d4:	ldrb	r1, [r2, r3]
   148d8:	sub	r2, r1, #33	; 0x21
   148dc:	cmp	r2, #29
   148e0:	ldrls	pc, [pc, r2, lsl #2]
   148e4:	b	149c0 <__assert_fail@plt+0x39bc>
   148e8:	andeq	r4, r1, r0, ror #18
   148ec:	andeq	r4, r1, r0, asr #19
   148f0:	andeq	r4, r1, r0, asr #19
   148f4:	andeq	r4, r1, r0, asr #19
   148f8:	andeq	r4, r1, r0, asr #19
   148fc:	andeq	r4, r1, r0, asr #19
   14900:	andeq	r4, r1, r0, ror #18
   14904:	andeq	r4, r1, r0, ror #18
   14908:	andeq	r4, r1, r0, ror #18
   1490c:	andeq	r4, r1, r0, asr #19
   14910:	andeq	r4, r1, r0, asr #19
   14914:	andeq	r4, r1, r0, asr #19
   14918:	andeq	r4, r1, r0, ror #18
   1491c:	andeq	r4, r1, r0, asr #19
   14920:	andeq	r4, r1, r0, ror #18
   14924:	andeq	r4, r1, r0, asr #19
   14928:	andeq	r4, r1, r0, asr #19
   1492c:	andeq	r4, r1, r0, asr #19
   14930:	andeq	r4, r1, r0, asr #19
   14934:	andeq	r4, r1, r0, asr #19
   14938:	andeq	r4, r1, r0, asr #19
   1493c:	andeq	r4, r1, r0, asr #19
   14940:	andeq	r4, r1, r0, asr #19
   14944:	andeq	r4, r1, r0, asr #19
   14948:	andeq	r4, r1, r0, asr #19
   1494c:	andeq	r4, r1, r0, asr #19
   14950:	andeq	r4, r1, r0, asr #19
   14954:	andeq	r4, r1, r0, ror #18
   14958:	andeq	r4, r1, r0, ror #18
   1495c:	andeq	r4, r1, r0, ror #18
   14960:	ldr	r2, [sp, #44]	; 0x2c
   14964:	cmp	r2, #0
   14968:	bne	14ac4 <__assert_fail@plt+0x3ac0>
   1496c:	cmp	sl, r4
   14970:	mov	r5, r1
   14974:	movhi	r2, #63	; 0x3f
   14978:	mov	r9, r3
   1497c:	strbhi	r2, [r8, r4]
   14980:	add	r2, r4, #1
   14984:	cmp	sl, r2
   14988:	movhi	r0, #34	; 0x22
   1498c:	strbhi	r0, [r8, r2]
   14990:	add	r2, r4, #2
   14994:	cmp	sl, r2
   14998:	movhi	r0, #34	; 0x22
   1499c:	strbhi	r0, [r8, r2]
   149a0:	add	r2, r4, #3
   149a4:	add	r4, r4, #4
   149a8:	cmp	sl, r2
   149ac:	movhi	r0, #63	; 0x3f
   149b0:	strbhi	r0, [r8, r2]
   149b4:	mov	r2, #0
   149b8:	mov	r6, r2
   149bc:	b	13df4 <__assert_fail@plt+0x2df0>
   149c0:	mov	r3, #0
   149c4:	mov	r6, r3
   149c8:	b	1396c <__assert_fail@plt+0x2968>
   149cc:	ldr	r0, [sp, #28]
   149d0:	mov	r1, r4
   149d4:	mov	r2, r7
   149d8:	mov	r3, r5
   149dc:	mov	ip, r5
   149e0:	ldr	r8, [sp, #76]	; 0x4c
   149e4:	ldr	sl, [sp, #80]	; 0x50
   149e8:	cmp	r1, r0
   149ec:	ldr	r5, [sp, #84]	; 0x54
   149f0:	ldr	r7, [sp, #88]	; 0x58
   149f4:	ldr	r4, [sp, #92]	; 0x5c
   149f8:	bcs	14a2c <__assert_fail@plt+0x3a28>
   149fc:	ldrb	r6, [r2]
   14a00:	cmp	r6, #0
   14a04:	bne	14a18 <__assert_fail@plt+0x3a14>
   14a08:	b	14b4c <__assert_fail@plt+0x3b48>
   14a0c:	ldrb	r6, [r2, #1]!
   14a10:	cmp	r6, #0
   14a14:	beq	14ad4 <__assert_fail@plt+0x3ad0>
   14a18:	add	r3, r3, #1
   14a1c:	add	r1, r9, r3
   14a20:	cmp	r1, r0
   14a24:	bcc	14a0c <__assert_fail@plt+0x3a08>
   14a28:	mov	ip, r3
   14a2c:	mov	r6, #0
   14a30:	ldr	r2, [sp, #40]	; 0x28
   14a34:	b	14558 <__assert_fail@plt+0x3554>
   14a38:	mov	r3, #1
   14a3c:	mov	r2, #0
   14a40:	mov	r4, r2
   14a44:	str	r3, [sp, #36]	; 0x24
   14a48:	str	r3, [sp, #40]	; 0x28
   14a4c:	str	r3, [sp, #44]	; 0x2c
   14a50:	str	r2, [sp, #48]	; 0x30
   14a54:	str	r3, [sp, #56]	; 0x38
   14a58:	movw	r3, #29132	; 0x71cc
   14a5c:	movt	r3, #1
   14a60:	str	r3, [sp, #60]	; 0x3c
   14a64:	str	r2, [sp, #68]	; 0x44
   14a68:	str	r2, [sp, #72]	; 0x48
   14a6c:	b	134cc <__assert_fail@plt+0x24c8>
   14a70:	mov	r2, r3
   14a74:	ldr	r3, [sp, #60]	; 0x3c
   14a78:	cmp	r3, #0
   14a7c:	moveq	r2, #0
   14a80:	andne	r2, r2, #1
   14a84:	cmp	r2, #0
   14a88:	beq	14ab4 <__assert_fail@plt+0x3ab0>
   14a8c:	mov	r2, r3
   14a90:	ldrb	r3, [r3]
   14a94:	cmp	r3, #0
   14a98:	beq	14ab4 <__assert_fail@plt+0x3ab0>
   14a9c:	cmp	sl, r4
   14aa0:	strbhi	r3, [fp, r4]
   14aa4:	add	r4, r4, #1
   14aa8:	ldrb	r3, [r2, #1]!
   14aac:	cmp	r3, #0
   14ab0:	bne	14a9c <__assert_fail@plt+0x3a98>
   14ab4:	cmp	sl, r4
   14ab8:	movhi	r3, #0
   14abc:	strbhi	r3, [fp, r4]
   14ac0:	b	13cd4 <__assert_fail@plt+0x2cd0>
   14ac4:	str	fp, [sp, #152]	; 0x98
   14ac8:	mov	fp, r8
   14acc:	ldr	r8, [sp, #152]	; 0x98
   14ad0:	b	13c9c <__assert_fail@plt+0x2c98>
   14ad4:	mov	ip, r3
   14ad8:	ldr	r2, [sp, #40]	; 0x28
   14adc:	b	14558 <__assert_fail@plt+0x3554>
   14ae0:	str	fp, [sp, #152]	; 0x98
   14ae4:	mov	fp, r8
   14ae8:	ldr	r8, [sp, #152]	; 0x98
   14aec:	sub	r3, r8, #2
   14af0:	clz	r3, r3
   14af4:	lsr	r3, r3, #5
   14af8:	str	r3, [sp, #40]	; 0x28
   14afc:	b	13c90 <__assert_fail@plt+0x2c8c>
   14b00:	mov	ip, #5
   14b04:	ldr	r3, [sp, #28]
   14b08:	str	ip, [sp]
   14b0c:	ldr	r2, [sp, #156]	; 0x9c
   14b10:	ldr	ip, [sp, #164]	; 0xa4
   14b14:	ldr	r0, [sp, #160]	; 0xa0
   14b18:	str	r2, [sp, #4]
   14b1c:	ldr	r2, [sp, #32]
   14b20:	ldr	r1, [sp, #72]	; 0x48
   14b24:	str	ip, [sp, #12]
   14b28:	ldr	ip, [sp, #168]	; 0xa8
   14b2c:	str	r0, [sp, #8]
   14b30:	mov	r0, fp
   14b34:	str	ip, [sp, #16]
   14b38:	bl	133e4 <__assert_fail@plt+0x23e0>
   14b3c:	mov	r4, r0
   14b40:	b	13cd4 <__assert_fail@plt+0x2cd0>
   14b44:	mov	r8, #2
   14b48:	b	13c90 <__assert_fail@plt+0x2c8c>
   14b4c:	ldr	r2, [sp, #40]	; 0x28
   14b50:	b	14558 <__assert_fail@plt+0x3554>
   14b54:	mov	r3, #0
   14b58:	mov	r2, #1
   14b5c:	mov	r4, r3
   14b60:	strd	r2, [sp, #36]	; 0x24
   14b64:	strd	r2, [sp, #44]	; 0x2c
   14b68:	str	r2, [sp, #56]	; 0x38
   14b6c:	str	r3, [sp, #68]	; 0x44
   14b70:	str	r3, [sp, #72]	; 0x48
   14b74:	movw	r3, #29152	; 0x71e0
   14b78:	movt	r3, #1
   14b7c:	str	r3, [sp, #60]	; 0x3c
   14b80:	b	134cc <__assert_fail@plt+0x24c8>
   14b84:	mov	r3, #0
   14b88:	mov	r1, #1
   14b8c:	mov	r2, r3
   14b90:	str	r1, [sp, #36]	; 0x24
   14b94:	str	r3, [sp, #48]	; 0x30
   14b98:	str	sl, [sp, #72]	; 0x48
   14b9c:	b	13ad4 <__assert_fail@plt+0x2ad0>
   14ba0:	bl	10fec <abort@plt>
   14ba4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14ba8:	mov	r4, r0
   14bac:	mov	r5, r3
   14bb0:	strd	r6, [sp, #8]
   14bb4:	movw	r7, #33032	; 0x8108
   14bb8:	movt	r7, #2
   14bbc:	strd	r8, [sp, #16]
   14bc0:	strd	sl, [sp, #24]
   14bc4:	mov	sl, r1
   14bc8:	mov	fp, r2
   14bcc:	str	lr, [sp, #32]
   14bd0:	sub	sp, sp, #60	; 0x3c
   14bd4:	bl	10ef0 <__errno_location@plt>
   14bd8:	mov	r8, r0
   14bdc:	cmn	r4, #-2147483647	; 0x80000001
   14be0:	ldr	r6, [r7]
   14be4:	movne	r0, #0
   14be8:	moveq	r0, #1
   14bec:	ldr	r3, [r8]
   14bf0:	orrs	r0, r0, r4, lsr #31
   14bf4:	str	r3, [sp, #28]
   14bf8:	bne	14d88 <__assert_fail@plt+0x3d84>
   14bfc:	ldr	r3, [r7, #4]
   14c00:	cmp	r3, r4
   14c04:	bgt	14c64 <__assert_fail@plt+0x3c60>
   14c08:	add	r1, r7, #8
   14c0c:	sub	r2, r4, r3
   14c10:	str	r3, [sp, #52]	; 0x34
   14c14:	cmp	r6, r1
   14c18:	add	r2, r2, #1
   14c1c:	beq	14d60 <__assert_fail@plt+0x3d5c>
   14c20:	mov	r1, #8
   14c24:	mov	r0, r6
   14c28:	mvn	r3, #-2147483648	; 0x80000000
   14c2c:	str	r1, [sp]
   14c30:	add	r1, sp, #52	; 0x34
   14c34:	bl	15c08 <__assert_fail@plt+0x4c04>
   14c38:	mov	r6, r0
   14c3c:	str	r0, [r7]
   14c40:	ldr	r0, [r7, #4]
   14c44:	mov	r1, #0
   14c48:	ldr	r2, [sp, #52]	; 0x34
   14c4c:	sub	r2, r2, r0
   14c50:	add	r0, r6, r0, lsl #3
   14c54:	lsl	r2, r2, #3
   14c58:	bl	10f08 <memset@plt>
   14c5c:	ldr	r3, [sp, #52]	; 0x34
   14c60:	str	r3, [r7, #4]
   14c64:	ldr	r1, [r5, #4]
   14c68:	add	r0, r6, r4, lsl #3
   14c6c:	add	ip, r5, #8
   14c70:	mov	r3, fp
   14c74:	mov	r2, sl
   14c78:	ldr	r7, [r0, #4]
   14c7c:	str	r0, [sp, #36]	; 0x24
   14c80:	str	ip, [sp, #40]	; 0x28
   14c84:	orr	r0, r1, #1
   14c88:	ldr	r9, [r6, r4, lsl #3]
   14c8c:	str	ip, [sp, #8]
   14c90:	ldr	lr, [r5, #44]	; 0x2c
   14c94:	str	r0, [sp, #4]
   14c98:	ldr	ip, [r5]
   14c9c:	mov	r1, r9
   14ca0:	str	ip, [sp, #32]
   14ca4:	ldr	ip, [r5, #40]	; 0x28
   14ca8:	str	ip, [sp, #12]
   14cac:	ldr	ip, [sp, #32]
   14cb0:	str	lr, [sp, #16]
   14cb4:	str	r0, [sp, #44]	; 0x2c
   14cb8:	mov	r0, r7
   14cbc:	str	ip, [sp]
   14cc0:	bl	133e4 <__assert_fail@plt+0x23e0>
   14cc4:	cmp	r9, r0
   14cc8:	bhi	14d38 <__assert_fail@plt+0x3d34>
   14ccc:	add	r9, r0, #1
   14cd0:	movw	r3, #33196	; 0x81ac
   14cd4:	movt	r3, #2
   14cd8:	cmp	r7, r3
   14cdc:	str	r9, [r6, r4, lsl #3]
   14ce0:	beq	14cec <__assert_fail@plt+0x3ce8>
   14ce4:	mov	r0, r7
   14ce8:	bl	12bac <__assert_fail@plt+0x1ba8>
   14cec:	mov	r0, r9
   14cf0:	bl	15a58 <__assert_fail@plt+0x4a54>
   14cf4:	ldr	ip, [r5]
   14cf8:	mov	r3, fp
   14cfc:	mov	r2, sl
   14d00:	mov	r1, r9
   14d04:	mov	r7, r0
   14d08:	ldr	lr, [sp, #36]	; 0x24
   14d0c:	ldr	r4, [r5, #40]	; 0x28
   14d10:	str	r0, [lr, #4]
   14d14:	ldr	lr, [r5, #44]	; 0x2c
   14d18:	str	ip, [sp]
   14d1c:	ldr	ip, [sp, #44]	; 0x2c
   14d20:	str	ip, [sp, #4]
   14d24:	ldr	ip, [sp, #40]	; 0x28
   14d28:	str	r4, [sp, #12]
   14d2c:	str	lr, [sp, #16]
   14d30:	str	ip, [sp, #8]
   14d34:	bl	133e4 <__assert_fail@plt+0x23e0>
   14d38:	ldr	r3, [sp, #28]
   14d3c:	mov	r0, r7
   14d40:	str	r3, [r8]
   14d44:	add	sp, sp, #60	; 0x3c
   14d48:	ldrd	r4, [sp]
   14d4c:	ldrd	r6, [sp, #8]
   14d50:	ldrd	r8, [sp, #16]
   14d54:	ldrd	sl, [sp, #24]
   14d58:	add	sp, sp, #32
   14d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d60:	mov	r1, #8
   14d64:	mvn	r3, #-2147483648	; 0x80000000
   14d68:	str	r1, [sp]
   14d6c:	add	r1, sp, #52	; 0x34
   14d70:	bl	15c08 <__assert_fail@plt+0x4c04>
   14d74:	ldrd	r2, [r7, #8]
   14d78:	mov	r6, r0
   14d7c:	str	r0, [r7]
   14d80:	strd	r2, [r0]
   14d84:	b	14c40 <__assert_fail@plt+0x3c3c>
   14d88:	bl	10fec <abort@plt>
   14d8c:	strd	r4, [sp, #-16]!
   14d90:	mov	r5, r0
   14d94:	str	r6, [sp, #8]
   14d98:	str	lr, [sp, #12]
   14d9c:	bl	10ef0 <__errno_location@plt>
   14da0:	mov	r4, r0
   14da4:	cmp	r5, #0
   14da8:	ldr	r0, [pc, #32]	; 14dd0 <__assert_fail@plt+0x3dcc>
   14dac:	mov	r1, #48	; 0x30
   14db0:	movne	r0, r5
   14db4:	ldr	r6, [r4]
   14db8:	bl	15d80 <__assert_fail@plt+0x4d7c>
   14dbc:	str	r6, [r4]
   14dc0:	ldrd	r4, [sp]
   14dc4:	ldr	r6, [sp, #8]
   14dc8:	add	sp, sp, #12
   14dcc:	pop	{pc}		; (ldr pc, [sp], #4)
   14dd0:	andeq	r8, r2, ip, lsr #5
   14dd4:	ldr	r3, [pc, #12]	; 14de8 <__assert_fail@plt+0x3de4>
   14dd8:	cmp	r0, #0
   14ddc:	moveq	r0, r3
   14de0:	ldr	r0, [r0]
   14de4:	bx	lr
   14de8:	andeq	r8, r2, ip, lsr #5
   14dec:	ldr	r3, [pc, #12]	; 14e00 <__assert_fail@plt+0x3dfc>
   14df0:	cmp	r0, #0
   14df4:	moveq	r0, r3
   14df8:	str	r1, [r0]
   14dfc:	bx	lr
   14e00:	andeq	r8, r2, ip, lsr #5
   14e04:	ldr	r3, [pc, #52]	; 14e40 <__assert_fail@plt+0x3e3c>
   14e08:	cmp	r0, #0
   14e0c:	push	{lr}		; (str lr, [sp, #-4]!)
   14e10:	lsr	lr, r1, #5
   14e14:	and	r1, r1, #31
   14e18:	moveq	r0, r3
   14e1c:	add	r3, r0, #8
   14e20:	ldr	ip, [r3, lr, lsl #2]
   14e24:	lsr	r0, ip, r1
   14e28:	eor	r2, r2, r0
   14e2c:	and	r0, r0, #1
   14e30:	and	r2, r2, #1
   14e34:	eor	r1, ip, r2, lsl r1
   14e38:	str	r1, [r3, lr, lsl #2]
   14e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e40:	andeq	r8, r2, ip, lsr #5
   14e44:	ldr	r3, [pc, #16]	; 14e5c <__assert_fail@plt+0x3e58>
   14e48:	cmp	r0, #0
   14e4c:	movne	r3, r0
   14e50:	ldr	r0, [r3, #4]
   14e54:	str	r1, [r3, #4]
   14e58:	bx	lr
   14e5c:	andeq	r8, r2, ip, lsr #5
   14e60:	ldr	r3, [pc, #48]	; 14e98 <__assert_fail@plt+0x3e94>
   14e64:	cmp	r0, #0
   14e68:	mov	ip, #10
   14e6c:	moveq	r0, r3
   14e70:	cmp	r2, #0
   14e74:	cmpne	r1, #0
   14e78:	str	ip, [r0]
   14e7c:	beq	14e8c <__assert_fail@plt+0x3e88>
   14e80:	str	r1, [r0, #40]	; 0x28
   14e84:	str	r2, [r0, #44]	; 0x2c
   14e88:	bx	lr
   14e8c:	str	r4, [sp, #-8]!
   14e90:	str	lr, [sp, #4]
   14e94:	bl	10fec <abort@plt>
   14e98:	andeq	r8, r2, ip, lsr #5
   14e9c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14ea0:	strd	r6, [sp, #8]
   14ea4:	mov	r7, r0
   14ea8:	mov	r6, r1
   14eac:	strd	r8, [sp, #16]
   14eb0:	mov	r8, r2
   14eb4:	mov	r9, r3
   14eb8:	str	lr, [sp, #24]
   14ebc:	sub	sp, sp, #28
   14ec0:	ldr	r4, [sp, #56]	; 0x38
   14ec4:	ldr	ip, [pc, #104]	; 14f34 <__assert_fail@plt+0x3f30>
   14ec8:	cmp	r4, #0
   14ecc:	moveq	r4, ip
   14ed0:	bl	10ef0 <__errno_location@plt>
   14ed4:	ldr	ip, [r4, #44]	; 0x2c
   14ed8:	mov	r5, r0
   14edc:	mov	r1, r6
   14ee0:	add	lr, r4, #8
   14ee4:	mov	r3, r9
   14ee8:	ldr	r6, [r5]
   14eec:	mov	r2, r8
   14ef0:	mov	r0, r7
   14ef4:	str	ip, [sp, #16]
   14ef8:	ldr	ip, [r4, #40]	; 0x28
   14efc:	str	lr, [sp, #8]
   14f00:	str	ip, [sp, #12]
   14f04:	ldr	ip, [r4, #4]
   14f08:	str	ip, [sp, #4]
   14f0c:	ldr	ip, [r4]
   14f10:	str	ip, [sp]
   14f14:	bl	133e4 <__assert_fail@plt+0x23e0>
   14f18:	str	r6, [r5]
   14f1c:	add	sp, sp, #28
   14f20:	ldrd	r4, [sp]
   14f24:	ldrd	r6, [sp, #8]
   14f28:	ldrd	r8, [sp, #16]
   14f2c:	add	sp, sp, #24
   14f30:	pop	{pc}		; (ldr pc, [sp], #4)
   14f34:	andeq	r8, r2, ip, lsr #5
   14f38:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14f3c:	cmp	r3, #0
   14f40:	ldr	r4, [pc, #220]	; 15024 <__assert_fail@plt+0x4020>
   14f44:	movne	r4, r3
   14f48:	strd	r6, [sp, #8]
   14f4c:	mov	r6, r2
   14f50:	strd	r8, [sp, #16]
   14f54:	mov	r9, r0
   14f58:	strd	sl, [sp, #24]
   14f5c:	mov	sl, r1
   14f60:	str	lr, [sp, #32]
   14f64:	sub	sp, sp, #44	; 0x2c
   14f68:	bl	10ef0 <__errno_location@plt>
   14f6c:	ldr	r5, [r4, #4]
   14f70:	mov	r7, r0
   14f74:	mov	r1, #0
   14f78:	add	r8, r4, #8
   14f7c:	mov	r3, sl
   14f80:	ldr	ip, [r4, #44]	; 0x2c
   14f84:	mov	r2, r9
   14f88:	mov	r0, r1
   14f8c:	ldr	lr, [r7]
   14f90:	cmp	r6, r1
   14f94:	orreq	r5, r5, #1
   14f98:	str	ip, [sp, #16]
   14f9c:	ldr	ip, [r4, #40]	; 0x28
   14fa0:	stmib	sp, {r5, r8, ip}
   14fa4:	ldr	ip, [r4]
   14fa8:	str	lr, [sp, #28]
   14fac:	str	ip, [sp]
   14fb0:	bl	133e4 <__assert_fail@plt+0x23e0>
   14fb4:	add	r1, r0, #1
   14fb8:	mov	fp, r0
   14fbc:	mov	r0, r1
   14fc0:	str	r1, [sp, #36]	; 0x24
   14fc4:	bl	15a58 <__assert_fail@plt+0x4a54>
   14fc8:	ldr	ip, [r4, #44]	; 0x2c
   14fcc:	mov	r3, sl
   14fd0:	mov	r2, r9
   14fd4:	ldr	r1, [sp, #36]	; 0x24
   14fd8:	str	ip, [sp, #16]
   14fdc:	ldr	ip, [r4, #40]	; 0x28
   14fe0:	str	r0, [sp, #32]
   14fe4:	stmib	sp, {r5, r8, ip}
   14fe8:	ldr	ip, [r4]
   14fec:	str	ip, [sp]
   14ff0:	bl	133e4 <__assert_fail@plt+0x23e0>
   14ff4:	ldr	lr, [sp, #28]
   14ff8:	cmp	r6, #0
   14ffc:	ldr	r0, [sp, #32]
   15000:	str	lr, [r7]
   15004:	strne	fp, [r6]
   15008:	add	sp, sp, #44	; 0x2c
   1500c:	ldrd	r4, [sp]
   15010:	ldrd	r6, [sp, #8]
   15014:	ldrd	r8, [sp, #16]
   15018:	ldrd	sl, [sp, #24]
   1501c:	add	sp, sp, #32
   15020:	pop	{pc}		; (ldr pc, [sp], #4)
   15024:	andeq	r8, r2, ip, lsr #5
   15028:	mov	r3, r2
   1502c:	mov	r2, #0
   15030:	b	14f38 <__assert_fail@plt+0x3f34>
   15034:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15038:	movw	r5, #33032	; 0x8108
   1503c:	movt	r5, #2
   15040:	ldr	r3, [r5, #4]
   15044:	strd	r6, [sp, #8]
   15048:	str	r8, [sp, #16]
   1504c:	str	lr, [sp, #20]
   15050:	ldr	r7, [r5]
   15054:	cmp	r3, #1
   15058:	ble	1507c <__assert_fail@plt+0x4078>
   1505c:	mov	r4, #1
   15060:	add	r6, r7, #4
   15064:	ldr	r0, [r6, r4, lsl #3]
   15068:	add	r4, r4, #1
   1506c:	bl	12bac <__assert_fail@plt+0x1ba8>
   15070:	ldr	r3, [r5, #4]
   15074:	cmp	r3, r4
   15078:	bgt	15064 <__assert_fail@plt+0x4060>
   1507c:	ldr	r0, [r7, #4]
   15080:	movw	r4, #33196	; 0x81ac
   15084:	movt	r4, #2
   15088:	cmp	r0, r4
   1508c:	beq	150a0 <__assert_fail@plt+0x409c>
   15090:	bl	12bac <__assert_fail@plt+0x1ba8>
   15094:	mov	r3, #256	; 0x100
   15098:	str	r3, [r5, #8]
   1509c:	str	r4, [r5, #12]
   150a0:	ldr	r4, [pc, #44]	; 150d4 <__assert_fail@plt+0x40d0>
   150a4:	cmp	r7, r4
   150a8:	beq	150b8 <__assert_fail@plt+0x40b4>
   150ac:	mov	r0, r7
   150b0:	bl	12bac <__assert_fail@plt+0x1ba8>
   150b4:	str	r4, [r5]
   150b8:	mov	r3, #1
   150bc:	ldrd	r6, [sp, #8]
   150c0:	str	r3, [r5, #4]
   150c4:	ldrd	r4, [sp]
   150c8:	ldr	r8, [sp, #16]
   150cc:	add	sp, sp, #20
   150d0:	pop	{pc}		; (ldr pc, [sp], #4)
   150d4:	andeq	r8, r2, r0, lsl r1
   150d8:	ldr	r3, [pc, #4]	; 150e4 <__assert_fail@plt+0x40e0>
   150dc:	mvn	r2, #0
   150e0:	b	14ba4 <__assert_fail@plt+0x3ba0>
   150e4:	andeq	r8, r2, ip, lsr #5
   150e8:	ldr	r3, [pc]	; 150f0 <__assert_fail@plt+0x40ec>
   150ec:	b	14ba4 <__assert_fail@plt+0x3ba0>
   150f0:	andeq	r8, r2, ip, lsr #5
   150f4:	mov	r1, r0
   150f8:	ldr	r3, [pc, #8]	; 15108 <__assert_fail@plt+0x4104>
   150fc:	mvn	r2, #0
   15100:	mov	r0, #0
   15104:	b	14ba4 <__assert_fail@plt+0x3ba0>
   15108:	andeq	r8, r2, ip, lsr #5
   1510c:	mov	r2, r1
   15110:	ldr	r3, [pc, #8]	; 15120 <__assert_fail@plt+0x411c>
   15114:	mov	r1, r0
   15118:	mov	r0, #0
   1511c:	b	14ba4 <__assert_fail@plt+0x3ba0>
   15120:	andeq	r8, r2, ip, lsr #5
   15124:	strd	r4, [sp, #-12]!
   15128:	mov	r5, r2
   1512c:	mov	r4, r0
   15130:	str	lr, [sp, #8]
   15134:	sub	sp, sp, #52	; 0x34
   15138:	mov	r0, sp
   1513c:	bl	13240 <__assert_fail@plt+0x223c>
   15140:	mov	r3, sp
   15144:	mov	r1, r5
   15148:	mov	r0, r4
   1514c:	mvn	r2, #0
   15150:	bl	14ba4 <__assert_fail@plt+0x3ba0>
   15154:	add	sp, sp, #52	; 0x34
   15158:	ldrd	r4, [sp]
   1515c:	add	sp, sp, #8
   15160:	pop	{pc}		; (ldr pc, [sp], #4)
   15164:	strd	r4, [sp, #-16]!
   15168:	mov	r5, r2
   1516c:	mov	r4, r0
   15170:	str	r6, [sp, #8]
   15174:	mov	r6, r3
   15178:	str	lr, [sp, #12]
   1517c:	sub	sp, sp, #48	; 0x30
   15180:	mov	r0, sp
   15184:	bl	13240 <__assert_fail@plt+0x223c>
   15188:	mov	r3, sp
   1518c:	mov	r2, r6
   15190:	mov	r1, r5
   15194:	mov	r0, r4
   15198:	bl	14ba4 <__assert_fail@plt+0x3ba0>
   1519c:	add	sp, sp, #48	; 0x30
   151a0:	ldrd	r4, [sp]
   151a4:	ldr	r6, [sp, #8]
   151a8:	add	sp, sp, #12
   151ac:	pop	{pc}		; (ldr pc, [sp], #4)
   151b0:	mov	r2, r1
   151b4:	mov	r1, r0
   151b8:	mov	r0, #0
   151bc:	b	15124 <__assert_fail@plt+0x4120>
   151c0:	mov	r3, r2
   151c4:	mov	r2, r1
   151c8:	mov	r1, r0
   151cc:	mov	r0, #0
   151d0:	b	15164 <__assert_fail@plt+0x4160>
   151d4:	ldr	ip, [pc, #140]	; 15268 <__assert_fail@plt+0x4264>
   151d8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   151dc:	ldrd	r4, [ip]
   151e0:	strd	r6, [sp, #8]
   151e4:	ldrd	r6, [ip, #8]
   151e8:	strd	r8, [sp, #16]
   151ec:	lsr	r9, r2, #5
   151f0:	str	lr, [sp, #24]
   151f4:	sub	sp, sp, #52	; 0x34
   151f8:	and	lr, r2, #31
   151fc:	add	r8, sp, #8
   15200:	mov	r2, r1
   15204:	strd	r4, [sp]
   15208:	mov	r1, r0
   1520c:	mov	r3, sp
   15210:	strd	r6, [sp, #8]
   15214:	mov	r0, #0
   15218:	ldrd	r4, [ip, #16]
   1521c:	ldrd	r6, [ip, #24]
   15220:	strd	r4, [sp, #16]
   15224:	ldrd	r4, [ip, #32]
   15228:	strd	r6, [sp, #24]
   1522c:	ldrd	r6, [ip, #40]	; 0x28
   15230:	strd	r4, [sp, #32]
   15234:	strd	r6, [sp, #40]	; 0x28
   15238:	ldr	ip, [r8, r9, lsl #2]
   1523c:	mvn	r4, ip, lsr lr
   15240:	and	r4, r4, #1
   15244:	eor	lr, ip, r4, lsl lr
   15248:	str	lr, [r8, r9, lsl #2]
   1524c:	bl	14ba4 <__assert_fail@plt+0x3ba0>
   15250:	add	sp, sp, #52	; 0x34
   15254:	ldrd	r4, [sp]
   15258:	ldrd	r6, [sp, #8]
   1525c:	ldrd	r8, [sp, #16]
   15260:	add	sp, sp, #24
   15264:	pop	{pc}		; (ldr pc, [sp], #4)
   15268:	andeq	r8, r2, ip, lsr #5
   1526c:	mov	r2, r1
   15270:	mvn	r1, #0
   15274:	b	151d4 <__assert_fail@plt+0x41d0>
   15278:	mov	r2, #58	; 0x3a
   1527c:	mvn	r1, #0
   15280:	b	151d4 <__assert_fail@plt+0x41d0>
   15284:	mov	r2, #58	; 0x3a
   15288:	b	151d4 <__assert_fail@plt+0x41d0>
   1528c:	strd	r4, [sp, #-20]!	; 0xffffffec
   15290:	strd	r6, [sp, #8]
   15294:	mov	r6, r0
   15298:	mov	r7, r2
   1529c:	str	lr, [sp, #16]
   152a0:	sub	sp, sp, #100	; 0x64
   152a4:	mov	r0, sp
   152a8:	bl	13240 <__assert_fail@plt+0x223c>
   152ac:	ldrd	r4, [sp, #8]
   152b0:	mov	r1, r7
   152b4:	mov	r0, r6
   152b8:	add	r3, sp, #48	; 0x30
   152bc:	mvn	r2, #0
   152c0:	ldrd	r6, [sp]
   152c4:	strd	r4, [sp, #56]	; 0x38
   152c8:	ldrd	r4, [sp, #16]
   152cc:	strd	r6, [sp, #48]	; 0x30
   152d0:	ldrd	r6, [sp, #32]
   152d4:	ldr	lr, [sp, #60]	; 0x3c
   152d8:	strd	r4, [sp, #64]	; 0x40
   152dc:	ldrd	r4, [sp, #24]
   152e0:	mvn	ip, lr
   152e4:	and	ip, ip, #67108864	; 0x4000000
   152e8:	strd	r4, [sp, #72]	; 0x48
   152ec:	eor	ip, ip, lr
   152f0:	ldrd	r4, [sp, #40]	; 0x28
   152f4:	str	ip, [sp, #60]	; 0x3c
   152f8:	strd	r6, [sp, #80]	; 0x50
   152fc:	strd	r4, [sp, #88]	; 0x58
   15300:	bl	14ba4 <__assert_fail@plt+0x3ba0>
   15304:	add	sp, sp, #100	; 0x64
   15308:	ldrd	r4, [sp]
   1530c:	ldrd	r6, [sp, #8]
   15310:	add	sp, sp, #16
   15314:	pop	{pc}		; (ldr pc, [sp], #4)
   15318:	ldr	ip, [pc, #156]	; 153bc <__assert_fail@plt+0x43b8>
   1531c:	cmp	r2, #0
   15320:	cmpne	r1, #0
   15324:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15328:	strd	r6, [sp, #8]
   1532c:	mov	r6, r2
   15330:	str	r8, [sp, #16]
   15334:	mov	r8, r3
   15338:	strd	sl, [sp, #20]
   1533c:	ldrd	r4, [ip]
   15340:	str	lr, [sp, #28]
   15344:	sub	sp, sp, #48	; 0x30
   15348:	mov	lr, #10
   1534c:	ldrd	r2, [ip, #8]
   15350:	ldrd	sl, [ip, #16]
   15354:	strd	r4, [sp]
   15358:	ldrd	r4, [ip, #32]
   1535c:	str	lr, [sp]
   15360:	strd	r2, [sp, #8]
   15364:	strd	sl, [sp, #16]
   15368:	ldrd	r2, [ip, #24]
   1536c:	ldrd	sl, [ip, #40]	; 0x28
   15370:	strd	r2, [sp, #24]
   15374:	strd	r4, [sp, #32]
   15378:	strd	sl, [sp, #40]	; 0x28
   1537c:	beq	153b8 <__assert_fail@plt+0x43b4>
   15380:	ldr	r2, [sp, #80]	; 0x50
   15384:	mov	r7, r1
   15388:	mov	r3, sp
   1538c:	mov	r1, r8
   15390:	str	r7, [sp, #40]	; 0x28
   15394:	str	r6, [sp, #44]	; 0x2c
   15398:	bl	14ba4 <__assert_fail@plt+0x3ba0>
   1539c:	add	sp, sp, #48	; 0x30
   153a0:	ldrd	r4, [sp]
   153a4:	ldrd	r6, [sp, #8]
   153a8:	ldr	r8, [sp, #16]
   153ac:	ldrd	sl, [sp, #20]
   153b0:	add	sp, sp, #28
   153b4:	pop	{pc}		; (ldr pc, [sp], #4)
   153b8:	bl	10fec <abort@plt>
   153bc:	andeq	r8, r2, ip, lsr #5
   153c0:	mvn	ip, #0
   153c4:	push	{lr}		; (str lr, [sp, #-4]!)
   153c8:	sub	sp, sp, #12
   153cc:	str	ip, [sp]
   153d0:	bl	15318 <__assert_fail@plt+0x4314>
   153d4:	add	sp, sp, #12
   153d8:	pop	{pc}		; (ldr pc, [sp], #4)
   153dc:	mvn	ip, #0
   153e0:	push	{lr}		; (str lr, [sp, #-4]!)
   153e4:	sub	sp, sp, #12
   153e8:	mov	r3, r2
   153ec:	mov	r2, r1
   153f0:	mov	r1, r0
   153f4:	mov	r0, #0
   153f8:	str	ip, [sp]
   153fc:	bl	15318 <__assert_fail@plt+0x4314>
   15400:	add	sp, sp, #12
   15404:	pop	{pc}		; (ldr pc, [sp], #4)
   15408:	push	{lr}		; (str lr, [sp, #-4]!)
   1540c:	sub	sp, sp, #12
   15410:	str	r3, [sp]
   15414:	mov	r3, r2
   15418:	mov	r2, r1
   1541c:	mov	r1, r0
   15420:	mov	r0, #0
   15424:	bl	15318 <__assert_fail@plt+0x4314>
   15428:	add	sp, sp, #12
   1542c:	pop	{pc}		; (ldr pc, [sp], #4)
   15430:	ldr	r3, [pc]	; 15438 <__assert_fail@plt+0x4434>
   15434:	b	14ba4 <__assert_fail@plt+0x3ba0>
   15438:	andeq	r8, r2, r8, lsl r1
   1543c:	mov	r2, r1
   15440:	ldr	r3, [pc, #8]	; 15450 <__assert_fail@plt+0x444c>
   15444:	mov	r1, r0
   15448:	mov	r0, #0
   1544c:	b	14ba4 <__assert_fail@plt+0x3ba0>
   15450:	andeq	r8, r2, r8, lsl r1
   15454:	ldr	r3, [pc, #4]	; 15460 <__assert_fail@plt+0x445c>
   15458:	mvn	r2, #0
   1545c:	b	14ba4 <__assert_fail@plt+0x3ba0>
   15460:	andeq	r8, r2, r8, lsl r1
   15464:	mov	r1, r0
   15468:	ldr	r3, [pc, #8]	; 15478 <__assert_fail@plt+0x4474>
   1546c:	mvn	r2, #0
   15470:	mov	r0, #0
   15474:	b	14ba4 <__assert_fail@plt+0x3ba0>
   15478:	andeq	r8, r2, r8, lsl r1
   1547c:	cmp	r1, #0
   15480:	strd	r4, [sp, #-16]!
   15484:	mov	ip, r3
   15488:	str	r6, [sp, #8]
   1548c:	mov	r4, r0
   15490:	str	lr, [sp, #12]
   15494:	sub	sp, sp, #32
   15498:	ldr	r5, [sp, #48]	; 0x30
   1549c:	ldr	r6, [sp, #52]	; 0x34
   154a0:	beq	155e4 <__assert_fail@plt+0x45e0>
   154a4:	mov	r3, r1
   154a8:	mov	r1, #1
   154ac:	stm	sp, {r2, ip}
   154b0:	movw	r2, #29260	; 0x724c
   154b4:	movt	r2, #1
   154b8:	bl	10f38 <__fprintf_chk@plt>
   154bc:	mov	r2, #5
   154c0:	movw	r1, #29280	; 0x7260
   154c4:	movt	r1, #1
   154c8:	mov	r0, #0
   154cc:	bl	10e0c <dcgettext@plt>
   154d0:	movw	ip, #2022	; 0x7e6
   154d4:	mov	r3, r0
   154d8:	mov	r1, #1
   154dc:	movw	r2, #30008	; 0x7538
   154e0:	movt	r2, #1
   154e4:	mov	r0, r4
   154e8:	str	ip, [sp]
   154ec:	bl	10f38 <__fprintf_chk@plt>
   154f0:	mov	r1, r4
   154f4:	mov	r0, #10
   154f8:	bl	10e00 <fputc_unlocked@plt>
   154fc:	mov	r2, #5
   15500:	movw	r1, #29284	; 0x7264
   15504:	movt	r1, #1
   15508:	mov	r0, #0
   1550c:	bl	10e0c <dcgettext@plt>
   15510:	mov	r2, r0
   15514:	mov	r1, #1
   15518:	movw	r3, #29456	; 0x7310
   1551c:	movt	r3, #1
   15520:	mov	r0, r4
   15524:	bl	10f38 <__fprintf_chk@plt>
   15528:	mov	r1, r4
   1552c:	mov	r0, #10
   15530:	bl	10e00 <fputc_unlocked@plt>
   15534:	cmp	r6, #9
   15538:	ldrls	pc, [pc, r6, lsl #2]
   1553c:	b	15850 <__assert_fail@plt+0x484c>
   15540:	ldrdeq	r5, [r1], -r0
   15544:	andeq	r5, r1, r0, lsl #12
   15548:	andeq	r5, r1, ip, lsr r6
   1554c:	andeq	r5, r1, ip, ror r6
   15550:	andeq	r5, r1, r4, asr #13
   15554:	strdeq	r5, [r1], -ip
   15558:	andeq	r5, r1, r4, asr #14
   1555c:	muleq	r1, r8, r7
   15560:	strdeq	r5, [r1], -r0
   15564:	andeq	r5, r1, r8, ror #10
   15568:	movw	r1, #29760	; 0x7440
   1556c:	movt	r1, #1
   15570:	mov	r2, #5
   15574:	mov	r0, #0
   15578:	bl	10e0c <dcgettext@plt>
   1557c:	ldr	lr, [r5, #4]
   15580:	mov	r2, r0
   15584:	mov	r1, #1
   15588:	mov	r0, r4
   1558c:	ldr	r3, [r5, #8]
   15590:	ldr	ip, [r5, #32]
   15594:	str	lr, [sp]
   15598:	ldr	lr, [r5, #12]
   1559c:	str	ip, [sp, #28]
   155a0:	ldr	ip, [r5, #28]
   155a4:	str	r3, [sp, #4]
   155a8:	ldr	r3, [r5, #16]
   155ac:	str	lr, [sp, #8]
   155b0:	ldr	lr, [r5, #20]
   155b4:	str	ip, [sp, #24]
   155b8:	ldr	ip, [r5, #24]
   155bc:	str	r3, [sp, #12]
   155c0:	ldr	r3, [r5]
   155c4:	str	lr, [sp, #16]
   155c8:	str	ip, [sp, #20]
   155cc:	bl	10f38 <__fprintf_chk@plt>
   155d0:	add	sp, sp, #32
   155d4:	ldrd	r4, [sp]
   155d8:	ldr	r6, [sp, #8]
   155dc:	add	sp, sp, #12
   155e0:	pop	{pc}		; (ldr pc, [sp], #4)
   155e4:	mov	r3, r2
   155e8:	mov	r1, #1
   155ec:	str	ip, [sp]
   155f0:	movw	r2, #29272	; 0x7258
   155f4:	movt	r2, #1
   155f8:	bl	10f38 <__fprintf_chk@plt>
   155fc:	b	154bc <__assert_fail@plt+0x44b8>
   15600:	mov	r2, #5
   15604:	movw	r1, #29492	; 0x7334
   15608:	movt	r1, #1
   1560c:	mov	r0, #0
   15610:	bl	10e0c <dcgettext@plt>
   15614:	ldr	r3, [r5]
   15618:	mov	r2, r0
   1561c:	mov	r1, #1
   15620:	mov	r0, r4
   15624:	add	sp, sp, #32
   15628:	ldrd	r4, [sp]
   1562c:	ldr	r6, [sp, #8]
   15630:	ldr	lr, [sp, #12]
   15634:	add	sp, sp, #16
   15638:	b	10f38 <__fprintf_chk@plt>
   1563c:	mov	r2, #5
   15640:	movw	r1, #29508	; 0x7344
   15644:	movt	r1, #1
   15648:	mov	r0, #0
   1564c:	bl	10e0c <dcgettext@plt>
   15650:	ldm	r5, {r3, ip}
   15654:	mov	r2, r0
   15658:	mov	r1, #1
   1565c:	mov	r0, r4
   15660:	str	ip, [sp, #48]	; 0x30
   15664:	add	sp, sp, #32
   15668:	ldrd	r4, [sp]
   1566c:	ldr	r6, [sp, #8]
   15670:	ldr	lr, [sp, #12]
   15674:	add	sp, sp, #16
   15678:	b	10f38 <__fprintf_chk@plt>
   1567c:	mov	r2, #5
   15680:	movw	r1, #29532	; 0x735c
   15684:	movt	r1, #1
   15688:	mov	r0, #0
   1568c:	bl	10e0c <dcgettext@plt>
   15690:	ldm	r5, {r3, lr}
   15694:	mov	r2, r0
   15698:	mov	r1, #1
   1569c:	mov	r0, r4
   156a0:	ldr	ip, [r5, #8]
   156a4:	str	lr, [sp, #48]	; 0x30
   156a8:	str	ip, [sp, #52]	; 0x34
   156ac:	add	sp, sp, #32
   156b0:	ldrd	r4, [sp]
   156b4:	ldr	r6, [sp, #8]
   156b8:	ldr	lr, [sp, #12]
   156bc:	add	sp, sp, #16
   156c0:	b	10f38 <__fprintf_chk@plt>
   156c4:	mov	r2, #5
   156c8:	movw	r1, #29560	; 0x7378
   156cc:	movt	r1, #1
   156d0:	mov	r0, #0
   156d4:	bl	10e0c <dcgettext@plt>
   156d8:	ldmib	r5, {r3, ip, lr}
   156dc:	mov	r2, r0
   156e0:	mov	r1, #1
   156e4:	mov	r0, r4
   156e8:	str	r3, [sp]
   156ec:	ldr	r3, [r5]
   156f0:	stmib	sp, {ip, lr}
   156f4:	bl	10f38 <__fprintf_chk@plt>
   156f8:	b	155d0 <__assert_fail@plt+0x45cc>
   156fc:	mov	r2, #5
   15700:	movw	r1, #29592	; 0x7398
   15704:	movt	r1, #1
   15708:	mov	r0, #0
   1570c:	bl	10e0c <dcgettext@plt>
   15710:	ldmib	r5, {ip, lr}
   15714:	mov	r2, r0
   15718:	mov	r1, #1
   1571c:	mov	r0, r4
   15720:	ldr	r3, [r5, #16]
   15724:	str	ip, [sp]
   15728:	ldr	ip, [r5, #12]
   1572c:	str	r3, [sp, #12]
   15730:	ldr	r3, [r5]
   15734:	str	lr, [sp, #4]
   15738:	str	ip, [sp, #8]
   1573c:	bl	10f38 <__fprintf_chk@plt>
   15740:	b	155d0 <__assert_fail@plt+0x45cc>
   15744:	mov	r2, #5
   15748:	movw	r1, #29628	; 0x73bc
   1574c:	movt	r1, #1
   15750:	mov	r0, #0
   15754:	bl	10e0c <dcgettext@plt>
   15758:	ldr	lr, [r5, #4]
   1575c:	mov	r2, r0
   15760:	mov	r1, #1
   15764:	mov	r0, r4
   15768:	ldr	r3, [r5, #8]
   1576c:	ldr	ip, [r5, #20]
   15770:	str	lr, [sp]
   15774:	ldr	lr, [r5, #12]
   15778:	str	ip, [sp, #16]
   1577c:	ldr	ip, [r5, #16]
   15780:	str	r3, [sp, #4]
   15784:	ldr	r3, [r5]
   15788:	str	lr, [sp, #8]
   1578c:	str	ip, [sp, #12]
   15790:	bl	10f38 <__fprintf_chk@plt>
   15794:	b	155d0 <__assert_fail@plt+0x45cc>
   15798:	mov	r2, #5
   1579c:	movw	r1, #29668	; 0x73e4
   157a0:	movt	r1, #1
   157a4:	mov	r0, #0
   157a8:	bl	10e0c <dcgettext@plt>
   157ac:	ldmib	r5, {r3, ip}
   157b0:	mov	r2, r0
   157b4:	mov	r1, #1
   157b8:	mov	r0, r4
   157bc:	ldr	lr, [r5, #24]
   157c0:	str	r3, [sp]
   157c4:	ldr	r3, [r5, #12]
   157c8:	str	lr, [sp, #20]
   157cc:	ldr	lr, [r5, #20]
   157d0:	str	ip, [sp, #4]
   157d4:	ldr	ip, [r5, #16]
   157d8:	str	r3, [sp, #8]
   157dc:	ldr	r3, [r5]
   157e0:	str	ip, [sp, #12]
   157e4:	str	lr, [sp, #16]
   157e8:	bl	10f38 <__fprintf_chk@plt>
   157ec:	b	155d0 <__assert_fail@plt+0x45cc>
   157f0:	mov	r2, #5
   157f4:	movw	r1, #29712	; 0x7410
   157f8:	movt	r1, #1
   157fc:	mov	r0, #0
   15800:	bl	10e0c <dcgettext@plt>
   15804:	ldmib	r5, {ip, lr}
   15808:	mov	r2, r0
   1580c:	mov	r1, #1
   15810:	mov	r0, r4
   15814:	ldr	r3, [r5, #28]
   15818:	str	ip, [sp]
   1581c:	ldr	ip, [r5, #12]
   15820:	str	r3, [sp, #24]
   15824:	ldr	r3, [r5, #24]
   15828:	str	lr, [sp, #4]
   1582c:	ldr	lr, [r5, #16]
   15830:	str	ip, [sp, #8]
   15834:	ldr	ip, [r5, #20]
   15838:	str	r3, [sp, #20]
   1583c:	ldr	r3, [r5]
   15840:	str	lr, [sp, #12]
   15844:	str	ip, [sp, #16]
   15848:	bl	10f38 <__fprintf_chk@plt>
   1584c:	b	155d0 <__assert_fail@plt+0x45cc>
   15850:	movw	r1, #29812	; 0x7474
   15854:	movt	r1, #1
   15858:	b	15570 <__assert_fail@plt+0x456c>
   1585c:	strd	r4, [sp, #-12]!
   15860:	str	lr, [sp, #8]
   15864:	sub	sp, sp, #12
   15868:	ldr	r5, [sp, #24]
   1586c:	ldr	ip, [r5]
   15870:	cmp	ip, #0
   15874:	beq	15890 <__assert_fail@plt+0x488c>
   15878:	mov	lr, r5
   1587c:	mov	ip, #0
   15880:	ldr	r4, [lr, #4]!
   15884:	add	ip, ip, #1
   15888:	cmp	r4, #0
   1588c:	bne	15880 <__assert_fail@plt+0x487c>
   15890:	stm	sp, {r5, ip}
   15894:	bl	1547c <__assert_fail@plt+0x4478>
   15898:	add	sp, sp, #12
   1589c:	ldrd	r4, [sp]
   158a0:	add	sp, sp, #8
   158a4:	pop	{pc}		; (ldr pc, [sp], #4)
   158a8:	strd	r4, [sp, #-16]!
   158ac:	mov	ip, #0
   158b0:	str	r6, [sp, #8]
   158b4:	str	lr, [sp, #12]
   158b8:	sub	sp, sp, #48	; 0x30
   158bc:	ldr	r5, [sp, #64]	; 0x40
   158c0:	add	r6, sp, #8
   158c4:	mov	r4, r6
   158c8:	ldr	lr, [r5], #4
   158cc:	cmp	lr, #0
   158d0:	str	lr, [r4], #4
   158d4:	beq	158e4 <__assert_fail@plt+0x48e0>
   158d8:	add	ip, ip, #1
   158dc:	cmp	ip, #10
   158e0:	bne	158c8 <__assert_fail@plt+0x48c4>
   158e4:	stm	sp, {r6, ip}
   158e8:	bl	1547c <__assert_fail@plt+0x4478>
   158ec:	add	sp, sp, #48	; 0x30
   158f0:	ldrd	r4, [sp]
   158f4:	ldr	r6, [sp, #8]
   158f8:	add	sp, sp, #12
   158fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15900:	push	{r3}		; (str r3, [sp, #-4]!)
   15904:	mov	ip, #0
   15908:	strd	r4, [sp, #-12]!
   1590c:	str	lr, [sp, #8]
   15910:	sub	sp, sp, #56	; 0x38
   15914:	add	r3, sp, #72	; 0x48
   15918:	add	r5, sp, #16
   1591c:	mov	r4, r3
   15920:	mov	lr, r5
   15924:	str	r3, [sp, #12]
   15928:	ldr	r3, [r4], #4
   1592c:	cmp	r3, #0
   15930:	str	r3, [lr], #4
   15934:	beq	15944 <__assert_fail@plt+0x4940>
   15938:	add	ip, ip, #1
   1593c:	cmp	ip, #10
   15940:	bne	15928 <__assert_fail@plt+0x4924>
   15944:	ldr	r3, [sp, #68]	; 0x44
   15948:	stm	sp, {r5, ip}
   1594c:	bl	1547c <__assert_fail@plt+0x4478>
   15950:	add	sp, sp, #56	; 0x38
   15954:	ldrd	r4, [sp]
   15958:	ldr	lr, [sp, #8]
   1595c:	add	sp, sp, #12
   15960:	add	sp, sp, #4
   15964:	bx	lr
   15968:	movw	r3, #33124	; 0x8164
   1596c:	movt	r3, #2
   15970:	str	r4, [sp, #-8]!
   15974:	mov	r0, #10
   15978:	ldr	r1, [r3]
   1597c:	str	lr, [sp, #4]
   15980:	bl	10e00 <fputc_unlocked@plt>
   15984:	mov	r2, #5
   15988:	movw	r1, #29872	; 0x74b0
   1598c:	movt	r1, #1
   15990:	mov	r0, #0
   15994:	bl	10e0c <dcgettext@plt>
   15998:	mov	r1, r0
   1599c:	movw	r2, #29892	; 0x74c4
   159a0:	movt	r2, #1
   159a4:	mov	r0, #1
   159a8:	bl	10f20 <__printf_chk@plt>
   159ac:	mov	r2, #5
   159b0:	movw	r1, #29916	; 0x74dc
   159b4:	movt	r1, #1
   159b8:	mov	r0, #0
   159bc:	bl	10e0c <dcgettext@plt>
   159c0:	mov	r1, r0
   159c4:	movw	r3, #27748	; 0x6c64
   159c8:	movt	r3, #1
   159cc:	movw	r2, #27788	; 0x6c8c
   159d0:	movt	r2, #1
   159d4:	mov	r0, #1
   159d8:	bl	10f20 <__printf_chk@plt>
   159dc:	mov	r2, #5
   159e0:	movw	r1, #29936	; 0x74f0
   159e4:	movt	r1, #1
   159e8:	mov	r0, #0
   159ec:	bl	10e0c <dcgettext@plt>
   159f0:	mov	r1, r0
   159f4:	movw	r2, #29976	; 0x7518
   159f8:	movt	r2, #1
   159fc:	mov	r0, #1
   15a00:	ldr	r4, [sp]
   15a04:	ldr	lr, [sp, #4]
   15a08:	add	sp, sp, #8
   15a0c:	b	10f20 <__printf_chk@plt>
   15a10:	str	r4, [sp, #-8]!
   15a14:	str	lr, [sp, #4]
   15a18:	bl	15f40 <__assert_fail@plt+0x4f3c>
   15a1c:	cmp	r0, #0
   15a20:	beq	15a30 <__assert_fail@plt+0x4a2c>
   15a24:	ldr	r4, [sp]
   15a28:	add	sp, sp, #4
   15a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a30:	bl	15e88 <__assert_fail@plt+0x4e84>
   15a34:	str	r4, [sp, #-8]!
   15a38:	str	lr, [sp, #4]
   15a3c:	bl	15f40 <__assert_fail@plt+0x4f3c>
   15a40:	cmp	r0, #0
   15a44:	beq	15a54 <__assert_fail@plt+0x4a50>
   15a48:	ldr	r4, [sp]
   15a4c:	add	sp, sp, #4
   15a50:	pop	{pc}		; (ldr pc, [sp], #4)
   15a54:	bl	15e88 <__assert_fail@plt+0x4e84>
   15a58:	str	r4, [sp, #-8]!
   15a5c:	str	lr, [sp, #4]
   15a60:	bl	15f40 <__assert_fail@plt+0x4f3c>
   15a64:	cmp	r0, #0
   15a68:	beq	15a78 <__assert_fail@plt+0x4a74>
   15a6c:	ldr	r4, [sp]
   15a70:	add	sp, sp, #4
   15a74:	pop	{pc}		; (ldr pc, [sp], #4)
   15a78:	bl	15e88 <__assert_fail@plt+0x4e84>
   15a7c:	strd	r4, [sp, #-16]!
   15a80:	mov	r5, r0
   15a84:	mov	r4, r1
   15a88:	str	r6, [sp, #8]
   15a8c:	str	lr, [sp, #12]
   15a90:	bl	15f7c <__assert_fail@plt+0x4f78>
   15a94:	cmp	r0, #0
   15a98:	beq	15aac <__assert_fail@plt+0x4aa8>
   15a9c:	ldrd	r4, [sp]
   15aa0:	ldr	r6, [sp, #8]
   15aa4:	add	sp, sp, #12
   15aa8:	pop	{pc}		; (ldr pc, [sp], #4)
   15aac:	adds	r4, r4, #0
   15ab0:	movne	r4, #1
   15ab4:	cmp	r5, #0
   15ab8:	moveq	r4, #1
   15abc:	cmp	r4, #0
   15ac0:	beq	15a9c <__assert_fail@plt+0x4a98>
   15ac4:	bl	15e88 <__assert_fail@plt+0x4e84>
   15ac8:	cmp	r1, #0
   15acc:	orreq	r1, r1, #1
   15ad0:	str	r4, [sp, #-8]!
   15ad4:	str	lr, [sp, #4]
   15ad8:	bl	15f7c <__assert_fail@plt+0x4f78>
   15adc:	cmp	r0, #0
   15ae0:	beq	15af0 <__assert_fail@plt+0x4aec>
   15ae4:	ldr	r4, [sp]
   15ae8:	add	sp, sp, #4
   15aec:	pop	{pc}		; (ldr pc, [sp], #4)
   15af0:	bl	15e88 <__assert_fail@plt+0x4e84>
   15af4:	strd	r4, [sp, #-16]!
   15af8:	mov	r4, r0
   15afc:	mov	r5, r2
   15b00:	str	r6, [sp, #8]
   15b04:	mov	r6, r1
   15b08:	str	lr, [sp, #12]
   15b0c:	bl	162a4 <__assert_fail@plt+0x52a0>
   15b10:	cmp	r0, #0
   15b14:	beq	15b28 <__assert_fail@plt+0x4b24>
   15b18:	ldrd	r4, [sp]
   15b1c:	ldr	r6, [sp, #8]
   15b20:	add	sp, sp, #12
   15b24:	pop	{pc}		; (ldr pc, [sp], #4)
   15b28:	cmp	r4, #0
   15b2c:	beq	15b3c <__assert_fail@plt+0x4b38>
   15b30:	cmp	r6, #0
   15b34:	cmpne	r5, #0
   15b38:	beq	15b18 <__assert_fail@plt+0x4b14>
   15b3c:	bl	15e88 <__assert_fail@plt+0x4e84>
   15b40:	b	15af4 <__assert_fail@plt+0x4af0>
   15b44:	cmp	r2, #0
   15b48:	cmpne	r1, #0
   15b4c:	str	r4, [sp, #-8]!
   15b50:	moveq	r2, #1
   15b54:	str	lr, [sp, #4]
   15b58:	moveq	r1, r2
   15b5c:	bl	162a4 <__assert_fail@plt+0x52a0>
   15b60:	cmp	r0, #0
   15b64:	beq	15b74 <__assert_fail@plt+0x4b70>
   15b68:	ldr	r4, [sp]
   15b6c:	add	sp, sp, #4
   15b70:	pop	{pc}		; (ldr pc, [sp], #4)
   15b74:	bl	15e88 <__assert_fail@plt+0x4e84>
   15b78:	mov	r2, r1
   15b7c:	mov	r1, r0
   15b80:	mov	r0, #0
   15b84:	b	15af4 <__assert_fail@plt+0x4af0>
   15b88:	mov	r2, r1
   15b8c:	mov	r1, r0
   15b90:	mov	r0, #0
   15b94:	b	15b44 <__assert_fail@plt+0x4b40>
   15b98:	cmp	r0, #0
   15b9c:	strd	r4, [sp, #-16]!
   15ba0:	mov	r5, r1
   15ba4:	ldr	r4, [r1]
   15ba8:	str	r6, [sp, #8]
   15bac:	str	lr, [sp, #12]
   15bb0:	beq	15be0 <__assert_fail@plt+0x4bdc>
   15bb4:	lsr	r3, r4, #1
   15bb8:	add	r3, r3, #1
   15bbc:	adds	r4, r4, r3
   15bc0:	bcs	15bfc <__assert_fail@plt+0x4bf8>
   15bc4:	mov	r1, r4
   15bc8:	bl	15af4 <__assert_fail@plt+0x4af0>
   15bcc:	ldr	r6, [sp, #8]
   15bd0:	str	r4, [r5]
   15bd4:	ldrd	r4, [sp]
   15bd8:	add	sp, sp, #12
   15bdc:	pop	{pc}		; (ldr pc, [sp], #4)
   15be0:	cmp	r4, #0
   15be4:	bne	15bc4 <__assert_fail@plt+0x4bc0>
   15be8:	mov	r4, #64	; 0x40
   15bec:	udiv	r4, r4, r2
   15bf0:	cmp	r2, #64	; 0x40
   15bf4:	addhi	r4, r4, #1
   15bf8:	b	15bc4 <__assert_fail@plt+0x4bc0>
   15bfc:	bl	15e88 <__assert_fail@plt+0x4e84>
   15c00:	mov	r2, #1
   15c04:	b	15b98 <__assert_fail@plt+0x4b94>
   15c08:	ldr	ip, [r1]
   15c0c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15c10:	mov	r5, r1
   15c14:	strd	r6, [sp, #8]
   15c18:	str	lr, [sp, #28]
   15c1c:	strd	r8, [sp, #16]
   15c20:	asr	lr, ip, #1
   15c24:	ldr	r8, [sp, #32]
   15c28:	str	sl, [sp, #24]
   15c2c:	adds	r4, ip, lr
   15c30:	mvn	lr, r3
   15c34:	lsr	lr, lr, #31
   15c38:	mvnvs	r4, #-2147483648	; 0x80000000
   15c3c:	cmp	r3, r4
   15c40:	movge	r1, #0
   15c44:	andlt	r1, lr, #1
   15c48:	cmp	r1, #0
   15c4c:	movne	r4, r3
   15c50:	smull	r6, r7, r4, r8
   15c54:	cmp	r7, r6, asr #31
   15c58:	bne	15ce0 <__assert_fail@plt+0x4cdc>
   15c5c:	cmp	r6, #63	; 0x3f
   15c60:	mov	r1, r6
   15c64:	ble	15cc8 <__assert_fail@plt+0x4cc4>
   15c68:	cmp	r0, #0
   15c6c:	sub	r6, r4, ip
   15c70:	streq	r0, [r5]
   15c74:	cmp	r6, r2
   15c78:	bge	15ca8 <__assert_fail@plt+0x4ca4>
   15c7c:	adds	r4, ip, r2
   15c80:	bvs	15cdc <__assert_fail@plt+0x4cd8>
   15c84:	cmp	r4, r3
   15c88:	movle	r3, #0
   15c8c:	andgt	r3, lr, #1
   15c90:	cmp	r3, #0
   15c94:	bne	15cdc <__assert_fail@plt+0x4cd8>
   15c98:	smull	r8, r9, r4, r8
   15c9c:	cmp	r9, r8, asr #31
   15ca0:	mov	r1, r8
   15ca4:	bne	15cdc <__assert_fail@plt+0x4cd8>
   15ca8:	bl	15a7c <__assert_fail@plt+0x4a78>
   15cac:	ldrd	r6, [sp, #8]
   15cb0:	ldrd	r8, [sp, #16]
   15cb4:	ldr	sl, [sp, #24]
   15cb8:	str	r4, [r5]
   15cbc:	ldrd	r4, [sp]
   15cc0:	add	sp, sp, #28
   15cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cc8:	mov	r6, #64	; 0x40
   15ccc:	sdiv	r4, r6, r8
   15cd0:	mls	r1, r8, r4, r6
   15cd4:	sub	r1, r6, r1
   15cd8:	b	15c68 <__assert_fail@plt+0x4c64>
   15cdc:	bl	15e88 <__assert_fail@plt+0x4e84>
   15ce0:	mvn	r6, #-2147483648	; 0x80000000
   15ce4:	b	15ccc <__assert_fail@plt+0x4cc8>
   15ce8:	mov	r1, #1
   15cec:	str	r4, [sp, #-8]!
   15cf0:	str	lr, [sp, #4]
   15cf4:	bl	15ecc <__assert_fail@plt+0x4ec8>
   15cf8:	cmp	r0, #0
   15cfc:	beq	15d0c <__assert_fail@plt+0x4d08>
   15d00:	ldr	r4, [sp]
   15d04:	add	sp, sp, #4
   15d08:	pop	{pc}		; (ldr pc, [sp], #4)
   15d0c:	bl	15e88 <__assert_fail@plt+0x4e84>
   15d10:	mov	r1, #1
   15d14:	str	r4, [sp, #-8]!
   15d18:	str	lr, [sp, #4]
   15d1c:	bl	15ecc <__assert_fail@plt+0x4ec8>
   15d20:	cmp	r0, #0
   15d24:	beq	15d34 <__assert_fail@plt+0x4d30>
   15d28:	ldr	r4, [sp]
   15d2c:	add	sp, sp, #4
   15d30:	pop	{pc}		; (ldr pc, [sp], #4)
   15d34:	bl	15e88 <__assert_fail@plt+0x4e84>
   15d38:	str	r4, [sp, #-8]!
   15d3c:	str	lr, [sp, #4]
   15d40:	bl	15ecc <__assert_fail@plt+0x4ec8>
   15d44:	cmp	r0, #0
   15d48:	beq	15d58 <__assert_fail@plt+0x4d54>
   15d4c:	ldr	r4, [sp]
   15d50:	add	sp, sp, #4
   15d54:	pop	{pc}		; (ldr pc, [sp], #4)
   15d58:	bl	15e88 <__assert_fail@plt+0x4e84>
   15d5c:	str	r4, [sp, #-8]!
   15d60:	str	lr, [sp, #4]
   15d64:	bl	15ecc <__assert_fail@plt+0x4ec8>
   15d68:	cmp	r0, #0
   15d6c:	beq	15d7c <__assert_fail@plt+0x4d78>
   15d70:	ldr	r4, [sp]
   15d74:	add	sp, sp, #4
   15d78:	pop	{pc}		; (ldr pc, [sp], #4)
   15d7c:	bl	15e88 <__assert_fail@plt+0x4e84>
   15d80:	strd	r4, [sp, #-16]!
   15d84:	mov	r4, r1
   15d88:	str	r6, [sp, #8]
   15d8c:	mov	r6, r0
   15d90:	mov	r0, r1
   15d94:	str	lr, [sp, #12]
   15d98:	bl	15f40 <__assert_fail@plt+0x4f3c>
   15d9c:	subs	r5, r0, #0
   15da0:	beq	15dc4 <__assert_fail@plt+0x4dc0>
   15da4:	mov	r2, r4
   15da8:	mov	r1, r6
   15dac:	bl	10dd0 <memcpy@plt>
   15db0:	mov	r0, r5
   15db4:	ldrd	r4, [sp]
   15db8:	ldr	r6, [sp, #8]
   15dbc:	add	sp, sp, #12
   15dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   15dc4:	bl	15e88 <__assert_fail@plt+0x4e84>
   15dc8:	strd	r4, [sp, #-16]!
   15dcc:	mov	r4, r1
   15dd0:	str	r6, [sp, #8]
   15dd4:	mov	r6, r0
   15dd8:	mov	r0, r1
   15ddc:	str	lr, [sp, #12]
   15de0:	bl	15f40 <__assert_fail@plt+0x4f3c>
   15de4:	subs	r5, r0, #0
   15de8:	beq	15e0c <__assert_fail@plt+0x4e08>
   15dec:	mov	r2, r4
   15df0:	mov	r1, r6
   15df4:	bl	10dd0 <memcpy@plt>
   15df8:	mov	r0, r5
   15dfc:	ldrd	r4, [sp]
   15e00:	ldr	r6, [sp, #8]
   15e04:	add	sp, sp, #12
   15e08:	pop	{pc}		; (ldr pc, [sp], #4)
   15e0c:	bl	15e88 <__assert_fail@plt+0x4e84>
   15e10:	strd	r4, [sp, #-16]!
   15e14:	mov	r4, r1
   15e18:	str	r6, [sp, #8]
   15e1c:	mov	r6, r0
   15e20:	add	r0, r1, #1
   15e24:	str	lr, [sp, #12]
   15e28:	bl	15f40 <__assert_fail@plt+0x4f3c>
   15e2c:	subs	r5, r0, #0
   15e30:	beq	15e5c <__assert_fail@plt+0x4e58>
   15e34:	mov	r3, #0
   15e38:	mov	r1, r6
   15e3c:	mov	r2, r4
   15e40:	strb	r3, [r5, r4]
   15e44:	bl	10dd0 <memcpy@plt>
   15e48:	mov	r0, r5
   15e4c:	ldrd	r4, [sp]
   15e50:	ldr	r6, [sp, #8]
   15e54:	add	sp, sp, #12
   15e58:	pop	{pc}		; (ldr pc, [sp], #4)
   15e5c:	bl	15e88 <__assert_fail@plt+0x4e84>
   15e60:	str	r4, [sp, #-8]!
   15e64:	mov	r4, r0
   15e68:	str	lr, [sp, #4]
   15e6c:	bl	10ed8 <strlen@plt>
   15e70:	add	r1, r0, #1
   15e74:	mov	r0, r4
   15e78:	ldr	r4, [sp]
   15e7c:	ldr	lr, [sp, #4]
   15e80:	add	sp, sp, #8
   15e84:	b	15d80 <__assert_fail@plt+0x4d7c>
   15e88:	movw	r3, #33028	; 0x8104
   15e8c:	movt	r3, #2
   15e90:	str	r4, [sp, #-8]!
   15e94:	ldr	r4, [r3]
   15e98:	mov	r2, #5
   15e9c:	movw	r1, #30056	; 0x7568
   15ea0:	movt	r1, #1
   15ea4:	mov	r0, #0
   15ea8:	str	lr, [sp, #4]
   15eac:	bl	10e0c <dcgettext@plt>
   15eb0:	mov	r3, r0
   15eb4:	movw	r2, #28976	; 0x7130
   15eb8:	movt	r2, #1
   15ebc:	mov	r1, #0
   15ec0:	mov	r0, r4
   15ec4:	bl	10e78 <error@plt>
   15ec8:	bl	10fec <abort@plt>
   15ecc:	cmp	r1, #0
   15ed0:	cmpne	r0, #0
   15ed4:	beq	15f20 <__assert_fail@plt+0x4f1c>
   15ed8:	strd	r4, [sp, #-16]!
   15edc:	umull	r4, r5, r0, r1
   15ee0:	str	r6, [sp, #8]
   15ee4:	str	lr, [sp, #12]
   15ee8:	adds	r3, r5, #0
   15eec:	movne	r3, #1
   15ef0:	cmp	r4, #0
   15ef4:	blt	15f00 <__assert_fail@plt+0x4efc>
   15ef8:	cmp	r3, #0
   15efc:	beq	15f2c <__assert_fail@plt+0x4f28>
   15f00:	bl	10ef0 <__errno_location@plt>
   15f04:	mov	r3, #12
   15f08:	ldrd	r4, [sp]
   15f0c:	ldr	r6, [sp, #8]
   15f10:	add	sp, sp, #12
   15f14:	str	r3, [r0]
   15f18:	mov	r0, #0
   15f1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f20:	mov	r1, #1
   15f24:	mov	r0, r1
   15f28:	b	10d64 <calloc@plt>
   15f2c:	ldrd	r4, [sp]
   15f30:	ldr	r6, [sp, #8]
   15f34:	ldr	lr, [sp, #12]
   15f38:	add	sp, sp, #16
   15f3c:	b	10d64 <calloc@plt>
   15f40:	cmp	r0, #0
   15f44:	beq	15f50 <__assert_fail@plt+0x4f4c>
   15f48:	blt	15f58 <__assert_fail@plt+0x4f54>
   15f4c:	b	10e84 <malloc@plt>
   15f50:	mov	r0, #1
   15f54:	b	10e84 <malloc@plt>
   15f58:	str	r4, [sp, #-8]!
   15f5c:	str	lr, [sp, #4]
   15f60:	bl	10ef0 <__errno_location@plt>
   15f64:	mov	r3, #12
   15f68:	ldr	r4, [sp]
   15f6c:	add	sp, sp, #4
   15f70:	str	r3, [r0]
   15f74:	mov	r0, #0
   15f78:	pop	{pc}		; (ldr pc, [sp], #4)
   15f7c:	cmp	r0, #0
   15f80:	beq	15fa8 <__assert_fail@plt+0x4fa4>
   15f84:	cmp	r1, #0
   15f88:	str	r4, [sp, #-8]!
   15f8c:	str	lr, [sp, #4]
   15f90:	beq	15fb0 <__assert_fail@plt+0x4fac>
   15f94:	blt	15fc4 <__assert_fail@plt+0x4fc0>
   15f98:	ldr	r4, [sp]
   15f9c:	ldr	lr, [sp, #4]
   15fa0:	add	sp, sp, #8
   15fa4:	b	10e18 <realloc@plt>
   15fa8:	mov	r0, r1
   15fac:	b	15f40 <__assert_fail@plt+0x4f3c>
   15fb0:	bl	12bac <__assert_fail@plt+0x1ba8>
   15fb4:	ldr	r4, [sp]
   15fb8:	add	sp, sp, #4
   15fbc:	mov	r0, #0
   15fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   15fc4:	bl	10ef0 <__errno_location@plt>
   15fc8:	mov	r3, #12
   15fcc:	str	r3, [r0]
   15fd0:	b	15fb4 <__assert_fail@plt+0x4fb0>
   15fd4:	strd	r4, [sp, #-16]!
   15fd8:	mov	r4, r0
   15fdc:	str	r6, [sp, #8]
   15fe0:	str	lr, [sp, #12]
   15fe4:	bl	10e60 <__fpending@plt>
   15fe8:	ldr	r5, [r4]
   15fec:	mov	r6, r0
   15ff0:	mov	r0, r4
   15ff4:	bl	12a98 <__assert_fail@plt+0x1a94>
   15ff8:	mov	r4, r0
   15ffc:	and	r5, r5, #32
   16000:	cmp	r5, #0
   16004:	bne	1603c <__assert_fail@plt+0x5038>
   16008:	cmp	r0, #0
   1600c:	beq	16028 <__assert_fail@plt+0x5024>
   16010:	cmp	r6, #0
   16014:	bne	16054 <__assert_fail@plt+0x5050>
   16018:	bl	10ef0 <__errno_location@plt>
   1601c:	ldr	r4, [r0]
   16020:	subs	r4, r4, #9
   16024:	mvnne	r4, #0
   16028:	mov	r0, r4
   1602c:	ldrd	r4, [sp]
   16030:	ldr	r6, [sp, #8]
   16034:	add	sp, sp, #12
   16038:	pop	{pc}		; (ldr pc, [sp], #4)
   1603c:	cmp	r0, #0
   16040:	bne	16054 <__assert_fail@plt+0x5050>
   16044:	bl	10ef0 <__errno_location@plt>
   16048:	str	r4, [r0]
   1604c:	mvn	r4, #0
   16050:	b	16028 <__assert_fail@plt+0x5024>
   16054:	mvn	r4, #0
   16058:	b	16028 <__assert_fail@plt+0x5024>
   1605c:	mov	r3, r0
   16060:	ldr	r2, [r0, #16]
   16064:	ldr	r0, [r0, #20]
   16068:	cmp	r0, r2
   1606c:	bhi	16084 <__assert_fail@plt+0x5080>
   16070:	ldmib	r3, {r0, r3}
   16074:	subs	r3, r3, r0
   16078:	beq	16084 <__assert_fail@plt+0x5080>
   1607c:	str	r3, [r1]
   16080:	bx	lr
   16084:	mov	r0, #0
   16088:	bx	lr
   1608c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16090:	subs	r4, r1, #0
   16094:	strd	r6, [sp, #8]
   16098:	str	lr, [sp, #16]
   1609c:	sub	sp, sp, #4096	; 0x1000
   160a0:	sub	sp, sp, #12
   160a4:	beq	16150 <__assert_fail@plt+0x514c>
   160a8:	mov	r6, r0
   160ac:	bl	162dc <__assert_fail@plt+0x52d8>
   160b0:	subs	r5, r0, #0
   160b4:	beq	16158 <__assert_fail@plt+0x5154>
   160b8:	add	r7, sp, #8
   160bc:	b	160d0 <__assert_fail@plt+0x50cc>
   160c0:	subs	r4, r4, #1
   160c4:	beq	161a8 <__assert_fail@plt+0x51a4>
   160c8:	subs	r5, r5, #1
   160cc:	beq	16158 <__assert_fail@plt+0x5154>
   160d0:	mov	r1, r7
   160d4:	mov	r0, r6
   160d8:	bl	1605c <__assert_fail@plt+0x5058>
   160dc:	cmp	r0, #0
   160e0:	mov	r0, r6
   160e4:	beq	16118 <__assert_fail@plt+0x5114>
   160e8:	ldr	r3, [r7]
   160ec:	cmp	r3, #0
   160f0:	beq	16118 <__assert_fail@plt+0x5114>
   160f4:	ldr	r2, [r6, #4]
   160f8:	cmp	r3, r4
   160fc:	movcs	r3, r4
   16100:	subs	r4, r4, r3
   16104:	add	r2, r2, r3
   16108:	str	r2, [r6, #4]
   1610c:	beq	161a8 <__assert_fail@plt+0x51a4>
   16110:	subs	r5, r5, r3
   16114:	beq	16158 <__assert_fail@plt+0x5154>
   16118:	bl	10f14 <fgetc@plt>
   1611c:	cmn	r0, #1
   16120:	bne	160c0 <__assert_fail@plt+0x50bc>
   16124:	mov	r0, r6
   16128:	bl	10db8 <ferror@plt>
   1612c:	adds	r0, r0, #0
   16130:	movne	r0, #1
   16134:	rsb	r0, r0, #0
   16138:	add	sp, sp, #4096	; 0x1000
   1613c:	add	sp, sp, #12
   16140:	ldrd	r4, [sp]
   16144:	ldrd	r6, [sp, #8]
   16148:	add	sp, sp, #16
   1614c:	pop	{pc}		; (ldr pc, [sp], #4)
   16150:	mov	r0, r4
   16154:	b	16138 <__assert_fail@plt+0x5134>
   16158:	mov	r0, r6
   1615c:	bl	10f2c <fileno@plt>
   16160:	cmp	r0, #0
   16164:	bge	161b0 <__assert_fail@plt+0x51ac>
   16168:	add	r7, sp, #8
   1616c:	b	16178 <__assert_fail@plt+0x5174>
   16170:	subs	r4, r4, r5
   16174:	beq	16150 <__assert_fail@plt+0x514c>
   16178:	cmp	r4, #4096	; 0x1000
   1617c:	mov	r2, #1
   16180:	str	r6, [sp]
   16184:	movcc	r5, r4
   16188:	movcs	r5, #4096	; 0x1000
   1618c:	mov	r1, #4096	; 0x1000
   16190:	mov	r3, r5
   16194:	mov	r0, r7
   16198:	bl	10f68 <__fread_chk@plt>
   1619c:	cmp	r5, r0
   161a0:	bls	16170 <__assert_fail@plt+0x516c>
   161a4:	b	16124 <__assert_fail@plt+0x5120>
   161a8:	mov	r0, #0
   161ac:	b	16138 <__assert_fail@plt+0x5134>
   161b0:	mov	r5, #1
   161b4:	mov	r3, #0
   161b8:	mov	r2, #0
   161bc:	str	r5, [sp]
   161c0:	bl	10e48 <lseek64@plt>
   161c4:	cmp	r0, #0
   161c8:	sbcs	r3, r1, #0
   161cc:	blt	16168 <__assert_fail@plt+0x5164>
   161d0:	mov	r2, r4
   161d4:	mov	r0, r6
   161d8:	str	r5, [sp]
   161dc:	mov	r3, #0
   161e0:	bl	12c0c <__assert_fail@plt+0x1c08>
   161e4:	b	16138 <__assert_fail@plt+0x5134>
   161e8:	mov	r0, #14
   161ec:	str	r4, [sp, #-8]!
   161f0:	str	lr, [sp, #4]
   161f4:	bl	10fa4 <nl_langinfo@plt>
   161f8:	cmp	r0, #0
   161fc:	beq	16220 <__assert_fail@plt+0x521c>
   16200:	ldrb	r2, [r0]
   16204:	movw	r3, #30076	; 0x757c
   16208:	movt	r3, #1
   1620c:	ldr	r4, [sp]
   16210:	add	sp, sp, #4
   16214:	cmp	r2, #0
   16218:	moveq	r0, r3
   1621c:	pop	{pc}		; (ldr pc, [sp], #4)
   16220:	ldr	r4, [sp]
   16224:	add	sp, sp, #4
   16228:	movw	r0, #30076	; 0x757c
   1622c:	movt	r0, #1
   16230:	pop	{pc}		; (ldr pc, [sp], #4)
   16234:	strd	r4, [sp, #-20]!	; 0xffffffec
   16238:	mov	r5, r2
   1623c:	strd	r6, [sp, #8]
   16240:	subs	r6, r0, #0
   16244:	mov	r7, r1
   16248:	str	lr, [sp, #16]
   1624c:	sub	sp, sp, #12
   16250:	addeq	r6, sp, #4
   16254:	mov	r0, r6
   16258:	bl	10e6c <mbrtowc@plt>
   1625c:	cmp	r5, #0
   16260:	cmnne	r0, #3
   16264:	mov	r4, r0
   16268:	bhi	16284 <__assert_fail@plt+0x5280>
   1626c:	mov	r0, r4
   16270:	add	sp, sp, #12
   16274:	ldrd	r4, [sp]
   16278:	ldrd	r6, [sp, #8]
   1627c:	add	sp, sp, #16
   16280:	pop	{pc}		; (ldr pc, [sp], #4)
   16284:	mov	r0, #0
   16288:	bl	1631c <__assert_fail@plt+0x5318>
   1628c:	cmp	r0, #0
   16290:	bne	1626c <__assert_fail@plt+0x5268>
   16294:	ldrb	r3, [r7]
   16298:	mov	r4, #1
   1629c:	str	r3, [r6]
   162a0:	b	1626c <__assert_fail@plt+0x5268>
   162a4:	umull	r2, r3, r1, r2
   162a8:	cmp	r3, #0
   162ac:	bne	162b8 <__assert_fail@plt+0x52b4>
   162b0:	mov	r1, r2
   162b4:	b	15f7c <__assert_fail@plt+0x4f78>
   162b8:	str	r4, [sp, #-8]!
   162bc:	str	lr, [sp, #4]
   162c0:	bl	10ef0 <__errno_location@plt>
   162c4:	mov	r3, #12
   162c8:	ldr	r4, [sp]
   162cc:	add	sp, sp, #4
   162d0:	str	r3, [r0]
   162d4:	mov	r0, #0
   162d8:	pop	{pc}		; (ldr pc, [sp], #4)
   162dc:	ldr	r3, [r0, #16]
   162e0:	ldr	r2, [r0, #20]
   162e4:	cmp	r2, r3
   162e8:	bhi	16314 <__assert_fail@plt+0x5310>
   162ec:	ldm	r0, {r1, r2, r3}
   162f0:	tst	r1, #256	; 0x100
   162f4:	sub	r3, r3, r2
   162f8:	beq	1630c <__assert_fail@plt+0x5308>
   162fc:	ldr	r1, [r0, #36]	; 0x24
   16300:	ldr	r2, [r0, #44]	; 0x2c
   16304:	sub	r2, r2, r1
   16308:	add	r3, r3, r2
   1630c:	mov	r0, r3
   16310:	bx	lr
   16314:	mov	r0, #0
   16318:	bx	lr
   1631c:	push	{lr}		; (str lr, [sp, #-4]!)
   16320:	sub	sp, sp, #268	; 0x10c
   16324:	movw	r2, #257	; 0x101
   16328:	add	r1, sp, #4
   1632c:	bl	16374 <__assert_fail@plt+0x5370>
   16330:	cmp	r0, #0
   16334:	movne	r0, #0
   16338:	bne	1636c <__assert_fail@plt+0x5368>
   1633c:	movw	r1, #30084	; 0x7584
   16340:	movt	r1, #1
   16344:	add	r0, sp, #4
   16348:	bl	10d7c <strcmp@plt>
   1634c:	cmp	r0, #0
   16350:	beq	1636c <__assert_fail@plt+0x5368>
   16354:	add	r0, sp, #4
   16358:	movw	r1, #30088	; 0x7588
   1635c:	movt	r1, #1
   16360:	bl	10d7c <strcmp@plt>
   16364:	adds	r0, r0, #0
   16368:	movne	r0, #1
   1636c:	add	sp, sp, #268	; 0x10c
   16370:	pop	{pc}		; (ldr pc, [sp], #4)
   16374:	strd	r4, [sp, #-16]!
   16378:	mov	r5, r1
   1637c:	mov	r1, #0
   16380:	mov	r4, r2
   16384:	str	r6, [sp, #8]
   16388:	str	lr, [sp, #12]
   1638c:	bl	10f8c <setlocale@plt>
   16390:	subs	r6, r0, #0
   16394:	beq	16414 <__assert_fail@plt+0x5410>
   16398:	bl	10ed8 <strlen@plt>
   1639c:	cmp	r4, r0
   163a0:	bhi	163c0 <__assert_fail@plt+0x53bc>
   163a4:	cmp	r4, #0
   163a8:	moveq	r0, #34	; 0x22
   163ac:	bne	163e4 <__assert_fail@plt+0x53e0>
   163b0:	ldrd	r4, [sp]
   163b4:	ldr	r6, [sp, #8]
   163b8:	add	sp, sp, #12
   163bc:	pop	{pc}		; (ldr pc, [sp], #4)
   163c0:	add	r2, r0, #1
   163c4:	mov	r1, r6
   163c8:	mov	r0, r5
   163cc:	bl	10dd0 <memcpy@plt>
   163d0:	ldrd	r4, [sp]
   163d4:	mov	r0, #0
   163d8:	ldr	r6, [sp, #8]
   163dc:	add	sp, sp, #12
   163e0:	pop	{pc}		; (ldr pc, [sp], #4)
   163e4:	sub	r4, r4, #1
   163e8:	mov	r1, r6
   163ec:	mov	r2, r4
   163f0:	mov	r0, r5
   163f4:	bl	10dd0 <memcpy@plt>
   163f8:	mov	r3, #0
   163fc:	mov	r0, #34	; 0x22
   16400:	strb	r3, [r5, r4]
   16404:	ldrd	r4, [sp]
   16408:	ldr	r6, [sp, #8]
   1640c:	add	sp, sp, #12
   16410:	pop	{pc}		; (ldr pc, [sp], #4)
   16414:	cmp	r4, #0
   16418:	mov	r0, #22
   1641c:	strbne	r6, [r5]
   16420:	ldrd	r4, [sp]
   16424:	ldr	r6, [sp, #8]
   16428:	add	sp, sp, #12
   1642c:	pop	{pc}		; (ldr pc, [sp], #4)
   16430:	mov	r1, #0
   16434:	b	10f8c <setlocale@plt>
   16438:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1643c:	mov	r7, r0
   16440:	ldr	r6, [pc, #72]	; 16490 <__assert_fail@plt+0x548c>
   16444:	ldr	r5, [pc, #72]	; 16494 <__assert_fail@plt+0x5490>
   16448:	add	r6, pc, r6
   1644c:	add	r5, pc, r5
   16450:	sub	r6, r6, r5
   16454:	mov	r8, r1
   16458:	mov	r9, r2
   1645c:	bl	10d44 <calloc@plt-0x20>
   16460:	asrs	r6, r6, #2
   16464:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16468:	mov	r4, #0
   1646c:	add	r4, r4, #1
   16470:	ldr	r3, [r5], #4
   16474:	mov	r2, r9
   16478:	mov	r1, r8
   1647c:	mov	r0, r7
   16480:	blx	r3
   16484:	cmp	r6, r4
   16488:	bne	1646c <__assert_fail@plt+0x5468>
   1648c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16490:	andeq	r1, r1, r4, asr #21
   16494:			; <UNDEFINED> instruction: 0x00011abc
   16498:	bx	lr
   1649c:	ldr	r3, [pc, #12]	; 164b0 <__assert_fail@plt+0x54ac>
   164a0:	mov	r1, #0
   164a4:	add	r3, pc, r3
   164a8:	ldr	r2, [r3]
   164ac:	b	10efc <__cxa_atexit@plt>
   164b0:	andeq	r1, r1, ip, asr #24

Disassembly of section .fini:

000164b4 <.fini>:
   164b4:	push	{r3, lr}
   164b8:	pop	{r3, pc}
