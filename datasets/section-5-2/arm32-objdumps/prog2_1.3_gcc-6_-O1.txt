
../repos/prog2/1.3:     file format elf32-littlearm


Disassembly of section .init:

0001060c <.init>:
   1060c:	push	{r3, lr}
   10610:	bl	106d4 <_start@@Base+0x3c>
   10614:	pop	{r3, pc}

Disassembly of section .plt:

00010618 <printf@plt-0x14>:
   10618:	push	{lr}		; (str lr, [sp, #-4]!)
   1061c:	ldr	lr, [pc, #4]	; 10628 <printf@plt-0x4>
   10620:	add	lr, pc, lr
   10624:	ldr	pc, [lr, #8]!
   10628:	ldrdeq	r0, [r1], -r8

0001062c <printf@plt>:
   1062c:	add	ip, pc, #0, 12
   10630:	add	ip, ip, #16, 20	; 0x10000
   10634:	ldr	pc, [ip, #2520]!	; 0x9d8

00010638 <fopen@plt>:
   10638:	add	ip, pc, #0, 12
   1063c:	add	ip, ip, #16, 20	; 0x10000
   10640:	ldr	pc, [ip, #2512]!	; 0x9d0

00010644 <strcpy@plt>:
   10644:	add	ip, pc, #0, 12
   10648:	add	ip, ip, #16, 20	; 0x10000
   1064c:	ldr	pc, [ip, #2504]!	; 0x9c8

00010650 <__libc_start_main@plt>:
   10650:	add	ip, pc, #0, 12
   10654:	add	ip, ip, #16, 20	; 0x10000
   10658:	ldr	pc, [ip, #2496]!	; 0x9c0

0001065c <__gmon_start__@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2488]!	; 0x9b8

00010668 <fclose@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2480]!	; 0x9b0

00010674 <fseek@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2472]!	; 0x9a8

00010680 <abort@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2464]!	; 0x9a0

0001068c <getc@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2456]!	; 0x998

Disassembly of section .text:

00010698 <_start@@Base>:
   10698:	mov	fp, #0
   1069c:	mov	lr, #0
   106a0:	pop	{r1}		; (ldr r1, [sp], #4)
   106a4:	mov	r2, sp
   106a8:	push	{r2}		; (str r2, [sp, #-4]!)
   106ac:	push	{r0}		; (str r0, [sp, #-4]!)
   106b0:	ldr	ip, [pc, #16]	; 106c8 <_start@@Base+0x30>
   106b4:	push	{ip}		; (str ip, [sp, #-4]!)
   106b8:	ldr	r0, [pc, #12]	; 106cc <_start@@Base+0x34>
   106bc:	ldr	r3, [pc, #12]	; 106d0 <_start@@Base+0x38>
   106c0:	bl	10650 <__libc_start_main@plt>
   106c4:	bl	10680 <abort@plt>
   106c8:	andeq	r0, r1, r8, ror #19
   106cc:	andeq	r0, r1, r4, ror #15
   106d0:	andeq	r0, r1, r8, lsl #19
   106d4:	ldr	r3, [pc, #20]	; 106f0 <_start@@Base+0x58>
   106d8:	ldr	r2, [pc, #20]	; 106f4 <_start@@Base+0x5c>
   106dc:	add	r3, pc, r3
   106e0:	ldr	r2, [r3, r2]
   106e4:	cmp	r2, #0
   106e8:	bxeq	lr
   106ec:	b	1065c <__gmon_start__@plt>
   106f0:	andeq	r0, r1, ip, lsl r9
   106f4:	andeq	r0, r0, r0, lsr r0
   106f8:	ldr	r3, [pc, #28]	; 1071c <_start@@Base+0x84>
   106fc:	ldr	r0, [pc, #28]	; 10720 <_start@@Base+0x88>
   10700:	sub	r3, r3, r0
   10704:	cmp	r3, #6
   10708:	bxls	lr
   1070c:	ldr	r3, [pc, #16]	; 10724 <_start@@Base+0x8c>
   10710:	cmp	r3, #0
   10714:	bxeq	lr
   10718:	bx	r3
   1071c:	andeq	r1, r2, pc, lsr r0
   10720:	andeq	r1, r2, ip, lsr r0
   10724:	andeq	r0, r0, r0
   10728:	ldr	r1, [pc, #36]	; 10754 <_start@@Base+0xbc>
   1072c:	ldr	r0, [pc, #36]	; 10758 <_start@@Base+0xc0>
   10730:	sub	r1, r1, r0
   10734:	asr	r1, r1, #2
   10738:	add	r1, r1, r1, lsr #31
   1073c:	asrs	r1, r1, #1
   10740:	bxeq	lr
   10744:	ldr	r3, [pc, #16]	; 1075c <_start@@Base+0xc4>
   10748:	cmp	r3, #0
   1074c:	bxeq	lr
   10750:	bx	r3
   10754:	andeq	r1, r2, ip, lsr r0
   10758:	andeq	r1, r2, ip, lsr r0
   1075c:	andeq	r0, r0, r0
   10760:	push	{r4, lr}
   10764:	ldr	r4, [pc, #24]	; 10784 <_start@@Base+0xec>
   10768:	ldrb	r3, [r4]
   1076c:	cmp	r3, #0
   10770:	popne	{r4, pc}
   10774:	bl	106f8 <_start@@Base+0x60>
   10778:	mov	r3, #1
   1077c:	strb	r3, [r4]
   10780:	pop	{r4, pc}
   10784:	andeq	r1, r2, ip, lsr r0
   10788:	ldr	r0, [pc, #40]	; 107b8 <_start@@Base+0x120>
   1078c:	ldr	r3, [r0]
   10790:	cmp	r3, #0
   10794:	bne	1079c <_start@@Base+0x104>
   10798:	b	10728 <_start@@Base+0x90>
   1079c:	ldr	r3, [pc, #24]	; 107bc <_start@@Base+0x124>
   107a0:	cmp	r3, #0
   107a4:	beq	10798 <_start@@Base+0x100>
   107a8:	push	{r4, lr}
   107ac:	blx	r3
   107b0:	pop	{r4, lr}
   107b4:	b	10728 <_start@@Base+0x90>
   107b8:	andeq	r0, r2, r4, lsl pc
   107bc:	andeq	r0, r0, r0

000107c0 <esvaziastring@@Base>:
   107c0:	cmp	r1, #0
   107c4:	bxle	lr
   107c8:	mov	r3, r0
   107cc:	add	r0, r0, r1
   107d0:	mov	r2, #0
   107d4:	strb	r2, [r3], #1
   107d8:	cmp	r3, r0
   107dc:	bne	107d4 <esvaziastring@@Base+0x14>
   107e0:	bx	lr

000107e4 <main@@Base>:
   107e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107e8:	sub	sp, sp, #2256	; 0x8d0
   107ec:	sub	sp, sp, #12
   107f0:	ldr	r1, [pc, #384]	; 10978 <main@@Base+0x194>
   107f4:	ldr	r0, [pc, #384]	; 1097c <main@@Base+0x198>
   107f8:	bl	10638 <fopen@plt>
   107fc:	mov	r4, r0
   10800:	mov	r8, #0
   10804:	mov	r7, r8
   10808:	ldr	sl, [pc, #368]	; 10980 <main@@Base+0x19c>
   1080c:	add	r6, sp, #12
   10810:	ldr	r9, [pc, #364]	; 10984 <main@@Base+0x1a0>
   10814:	mov	r0, r4
   10818:	bl	1068c <getc@plt>
   1081c:	cmn	r0, #1
   10820:	beq	10960 <main@@Base+0x17c>
   10824:	cmp	r0, #60	; 0x3c
   10828:	bne	10814 <main@@Base+0x30>
   1082c:	mov	r0, r4
   10830:	bl	1068c <getc@plt>
   10834:	cmp	r0, #97	; 0x61
   10838:	bne	10814 <main@@Base+0x30>
   1083c:	mov	r1, #200	; 0xc8
   10840:	add	r0, sp, #2064	; 0x810
   10844:	bl	107c0 <esvaziastring@@Base>
   10848:	mov	r2, #1
   1084c:	mov	r1, #7
   10850:	mov	r0, r4
   10854:	bl	10674 <fseek@plt>
   10858:	add	fp, sp, #2048	; 0x800
   1085c:	add	fp, fp, #15
   10860:	mov	r5, #0
   10864:	mov	r0, r4
   10868:	bl	1068c <getc@plt>
   1086c:	cmp	r0, #34	; 0x22
   10870:	strbne	r0, [fp, #1]!
   10874:	addne	r5, r5, #1
   10878:	bne	10864 <main@@Base+0x80>
   1087c:	add	r3, sp, #2256	; 0x8d0
   10880:	add	r3, r3, #8
   10884:	add	r5, r3, r5
   10888:	strb	r7, [r5, #-200]	; 0xffffff38
   1088c:	mul	r3, sl, r8
   10890:	str	r3, [sp, #4]
   10894:	add	r3, r6, r3
   10898:	str	r3, [sp]
   1089c:	add	r1, sp, #2064	; 0x810
   108a0:	mov	r0, r3
   108a4:	bl	10644 <strcpy@plt>
   108a8:	mov	r1, #200	; 0xc8
   108ac:	add	r0, sp, #2064	; 0x810
   108b0:	bl	107c0 <esvaziastring@@Base>
   108b4:	mov	r2, #1
   108b8:	mov	r1, r2
   108bc:	mov	r0, r4
   108c0:	bl	10674 <fseek@plt>
   108c4:	mov	r5, r7
   108c8:	mvn	fp, #60	; 0x3c
   108cc:	mov	r0, r4
   108d0:	bl	1068c <getc@plt>
   108d4:	cmp	r0, #60	; 0x3c
   108d8:	beq	10914 <main@@Base+0x130>
   108dc:	cmp	r0, #225	; 0xe1
   108e0:	add	r3, sp, #2256	; 0x8d0
   108e4:	add	r3, r3, #8
   108e8:	add	r3, r3, r5
   108ec:	strbeq	fp, [r3, #-200]	; 0xffffff38
   108f0:	addeq	r5, r5, #1
   108f4:	addeq	r3, sp, #2256	; 0x8d0
   108f8:	addeq	r3, r3, #8
   108fc:	addeq	r3, r3, r5
   10900:	mvneq	r2, #94	; 0x5e
   10904:	strbeq	r2, [r3, #-200]	; 0xffffff38
   10908:	strbne	r0, [r3, #-200]	; 0xffffff38
   1090c:	add	r5, r5, #1
   10910:	b	108cc <main@@Base+0xe8>
   10914:	add	r3, sp, #2256	; 0x8d0
   10918:	add	r3, r3, #8
   1091c:	add	r5, r3, r5
   10920:	strb	r7, [r5, #-200]	; 0xffffff38
   10924:	ldr	r3, [sp, #4]
   10928:	add	r5, r3, #205	; 0xcd
   1092c:	add	r5, r6, r5
   10930:	add	r1, sp, #2064	; 0x810
   10934:	mov	r0, r5
   10938:	bl	10644 <strcpy@plt>
   1093c:	mov	r1, #80	; 0x50
   10940:	add	r0, sp, #2064	; 0x810
   10944:	bl	107c0 <esvaziastring@@Base>
   10948:	ldr	r2, [sp]
   1094c:	mov	r1, r5
   10950:	mov	r0, r9
   10954:	bl	1062c <printf@plt>
   10958:	add	r8, r8, #1
   1095c:	b	10814 <main@@Base+0x30>
   10960:	mov	r0, r4
   10964:	bl	10668 <fclose@plt>
   10968:	mov	r0, #0
   1096c:	add	sp, sp, #2256	; 0x8d0
   10970:	add	sp, sp, #12
   10974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10978:	strdeq	r0, [r1], -r8
   1097c:	strdeq	r0, [r1], -ip
   10980:	muleq	r0, sl, r1
   10984:	andeq	r0, r1, r4, lsl sl

00010988 <__libc_csu_init@@Base>:
   10988:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1098c:	mov	r7, r0
   10990:	ldr	r6, [pc, #72]	; 109e0 <__libc_csu_init@@Base+0x58>
   10994:	ldr	r5, [pc, #72]	; 109e4 <__libc_csu_init@@Base+0x5c>
   10998:	add	r6, pc, r6
   1099c:	add	r5, pc, r5
   109a0:	sub	r6, r6, r5
   109a4:	mov	r8, r1
   109a8:	mov	r9, r2
   109ac:	bl	1060c <printf@plt-0x20>
   109b0:	asrs	r6, r6, #2
   109b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   109b8:	mov	r4, #0
   109bc:	add	r4, r4, #1
   109c0:	ldr	r3, [r5], #4
   109c4:	mov	r2, r9
   109c8:	mov	r1, r8
   109cc:	mov	r0, r7
   109d0:	blx	r3
   109d4:	cmp	r6, r4
   109d8:	bne	109bc <__libc_csu_init@@Base+0x34>
   109dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109e0:	andeq	r0, r1, r0, ror r5
   109e4:	andeq	r0, r1, r8, ror #10

000109e8 <__libc_csu_fini@@Base>:
   109e8:	bx	lr

Disassembly of section .fini:

000109ec <.fini>:
   109ec:	push	{r3, lr}
   109f0:	pop	{r3, pc}
