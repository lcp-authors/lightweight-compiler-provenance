
../repos/coreutils/src/printf:     file format elf32-littlearm


Disassembly of section .init:

00010dd0 <.init>:
   10dd0:	push	{r3, lr}
   10dd4:	bl	110b4 <__mempcpy_chk@plt+0x48>
   10dd8:	pop	{r3, pc}

Disassembly of section .plt:

00010ddc <calloc@plt-0x14>:
   10ddc:	push	{lr}		; (str lr, [sp, #-4]!)
   10de0:	ldr	lr, [pc, #4]	; 10dec <calloc@plt-0x4>
   10de4:	add	lr, pc, lr
   10de8:	ldr	pc, [lr, #8]!
   10dec:	andeq	r6, r1, r4, lsl r2

00010df0 <calloc@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #90112	; 0x16000
   10df8:	ldr	pc, [ip, #532]!	; 0x214

00010dfc <fputs_unlocked@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #90112	; 0x16000
   10e04:	ldr	pc, [ip, #524]!	; 0x20c

00010e08 <uselocale@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #90112	; 0x16000
   10e10:	ldr	pc, [ip, #516]!	; 0x204

00010e14 <iconv@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #90112	; 0x16000
   10e1c:	ldr	pc, [ip, #508]!	; 0x1fc

00010e20 <strcmp@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #90112	; 0x16000
   10e28:	ldr	pc, [ip, #500]!	; 0x1f4

00010e2c <fflush@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #492]!	; 0x1ec

00010e38 <free@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #484]!	; 0x1e4

00010e44 <ferror@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #476]!	; 0x1dc

00010e50 <_exit@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #468]!	; 0x1d4

00010e5c <memcpy@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #460]!	; 0x1cc

00010e68 <mbsinit@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #452]!	; 0x1c4

00010e74 <strtold@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #444]!	; 0x1bc

00010e80 <dcgettext@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #436]!	; 0x1b4

00010e8c <realloc@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #428]!	; 0x1ac

00010e98 <textdomain@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #420]!	; 0x1a4

00010ea4 <iswprint@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #412]!	; 0x19c

00010eb0 <fwrite@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #404]!	; 0x194

00010ebc <lseek64@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #396]!	; 0x18c

00010ec8 <__ctype_get_mb_cur_max@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #388]!	; 0x184

00010ed4 <__fpending@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #380]!	; 0x17c

00010ee0 <ferror_unlocked@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #372]!	; 0x174

00010eec <mbrtowc@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #364]!	; 0x16c

00010ef8 <error@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #356]!	; 0x164

00010f04 <getenv@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #348]!	; 0x15c

00010f10 <malloc@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #340]!	; 0x154

00010f1c <iconv_open@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #332]!	; 0x14c

00010f28 <__libc_start_main@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #324]!	; 0x144

00010f34 <__vfprintf_chk@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #316]!	; 0x13c

00010f40 <__freading@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #308]!	; 0x134

00010f4c <__gmon_start__@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #300]!	; 0x12c

00010f58 <__ctype_b_loc@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #292]!	; 0x124

00010f64 <exit@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #284]!	; 0x11c

00010f70 <bcmp@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #276]!	; 0x114

00010f7c <strlen@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #268]!	; 0x10c

00010f88 <__errno_location@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #260]!	; 0x104

00010f94 <__cxa_atexit@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #252]!	; 0xfc

00010fa0 <memset@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #244]!	; 0xf4

00010fac <__printf_chk@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #236]!	; 0xec

00010fb8 <fileno@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #228]!	; 0xe4

00010fc4 <strtoumax@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #220]!	; 0xdc

00010fd0 <__fprintf_chk@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #212]!	; 0xd4

00010fdc <memchr@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #204]!	; 0xcc

00010fe8 <strtoimax@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #196]!	; 0xc4

00010ff4 <fclose@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #188]!	; 0xbc

00011000 <fseeko64@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #180]!	; 0xb4

0001100c <setlocale@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #172]!	; 0xac

00011018 <strrchr@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #164]!	; 0xa4

00011024 <nl_langinfo@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #156]!	; 0x9c

00011030 <newlocale@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #148]!	; 0x94

0001103c <bindtextdomain@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #140]!	; 0x8c

00011048 <strncmp@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #132]!	; 0x84

00011054 <abort@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #124]!	; 0x7c

00011060 <putchar_unlocked@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #116]!	; 0x74

0001106c <__mempcpy_chk@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #108]!	; 0x6c

Disassembly of section .text:

00011078 <.text>:
   11078:	mov	fp, #0
   1107c:	mov	lr, #0
   11080:	pop	{r1}		; (ldr r1, [sp], #4)
   11084:	mov	r2, sp
   11088:	push	{r2}		; (str r2, [sp, #-4]!)
   1108c:	push	{r0}		; (str r0, [sp, #-4]!)
   11090:	ldr	ip, [pc, #16]	; 110a8 <__mempcpy_chk@plt+0x3c>
   11094:	push	{ip}		; (str ip, [sp, #-4]!)
   11098:	ldr	r0, [pc, #12]	; 110ac <__mempcpy_chk@plt+0x40>
   1109c:	ldr	r3, [pc, #12]	; 110b0 <__mempcpy_chk@plt+0x44>
   110a0:	bl	10f28 <__libc_start_main@plt>
   110a4:	bl	11054 <abort@plt>
   110a8:	andeq	r5, r1, r4, lsr fp
   110ac:	andeq	r1, r1, r8, ror r4
   110b0:	ldrdeq	r5, [r1], -r4
   110b4:	ldr	r3, [pc, #20]	; 110d0 <__mempcpy_chk@plt+0x64>
   110b8:	ldr	r2, [pc, #20]	; 110d4 <__mempcpy_chk@plt+0x68>
   110bc:	add	r3, pc, r3
   110c0:	ldr	r2, [r3, r2]
   110c4:	cmp	r2, #0
   110c8:	bxeq	lr
   110cc:	b	10f4c <__gmon_start__@plt>
   110d0:	andeq	r5, r1, ip, lsr pc
   110d4:	andeq	r0, r0, r4, ror #1
   110d8:	ldr	r0, [pc, #24]	; 110f8 <__mempcpy_chk@plt+0x8c>
   110dc:	ldr	r3, [pc, #24]	; 110fc <__mempcpy_chk@plt+0x90>
   110e0:	cmp	r3, r0
   110e4:	bxeq	lr
   110e8:	ldr	r3, [pc, #16]	; 11100 <__mempcpy_chk@plt+0x94>
   110ec:	cmp	r3, #0
   110f0:	bxeq	lr
   110f4:	bx	r3
   110f8:	andeq	r7, r2, r8, lsr r1
   110fc:	andeq	r7, r2, r8, lsr r1
   11100:	andeq	r0, r0, r0
   11104:	ldr	r0, [pc, #36]	; 11130 <__mempcpy_chk@plt+0xc4>
   11108:	ldr	r1, [pc, #36]	; 11134 <__mempcpy_chk@plt+0xc8>
   1110c:	sub	r1, r1, r0
   11110:	asr	r1, r1, #2
   11114:	add	r1, r1, r1, lsr #31
   11118:	asrs	r1, r1, #1
   1111c:	bxeq	lr
   11120:	ldr	r3, [pc, #16]	; 11138 <__mempcpy_chk@plt+0xcc>
   11124:	cmp	r3, #0
   11128:	bxeq	lr
   1112c:	bx	r3
   11130:	andeq	r7, r2, r8, lsr r1
   11134:	andeq	r7, r2, r8, lsr r1
   11138:	andeq	r0, r0, r0
   1113c:	push	{r4, lr}
   11140:	ldr	r4, [pc, #24]	; 11160 <__mempcpy_chk@plt+0xf4>
   11144:	ldrb	r3, [r4]
   11148:	cmp	r3, #0
   1114c:	popne	{r4, pc}
   11150:	bl	110d8 <__mempcpy_chk@plt+0x6c>
   11154:	mov	r3, #1
   11158:	strb	r3, [r4]
   1115c:	pop	{r4, pc}
   11160:	andeq	r7, r2, r8, asr #2
   11164:	b	11104 <__mempcpy_chk@plt+0x98>
   11168:	push	{fp, lr}
   1116c:	mov	fp, sp
   11170:	mov	r4, r0
   11174:	cmp	r0, #0
   11178:	bne	112ac <__mempcpy_chk@plt+0x240>
   1117c:	movw	r1, #23427	; 0x5b83
   11180:	movt	r1, #1
   11184:	mov	r0, #0
   11188:	mov	r2, #5
   1118c:	bl	10e80 <dcgettext@plt>
   11190:	mov	r1, r0
   11194:	movw	r0, #29016	; 0x7158
   11198:	movt	r0, #2
   1119c:	ldr	r2, [r0]
   111a0:	mov	r0, #1
   111a4:	mov	r3, r2
   111a8:	bl	10fac <__printf_chk@plt>
   111ac:	movw	r1, #23476	; 0x5bb4
   111b0:	movt	r1, #1
   111b4:	mov	r0, #0
   111b8:	mov	r2, #5
   111bc:	bl	10e80 <dcgettext@plt>
   111c0:	movw	r5, #28996	; 0x7144
   111c4:	movt	r5, #2
   111c8:	ldr	r1, [r5]
   111cc:	bl	10dfc <fputs_unlocked@plt>
   111d0:	movw	r1, #23549	; 0x5bfd
   111d4:	movt	r1, #1
   111d8:	mov	r0, #0
   111dc:	mov	r2, #5
   111e0:	bl	10e80 <dcgettext@plt>
   111e4:	ldr	r1, [r5]
   111e8:	bl	10dfc <fputs_unlocked@plt>
   111ec:	movw	r1, #23594	; 0x5c2a
   111f0:	movt	r1, #1
   111f4:	mov	r0, #0
   111f8:	mov	r2, #5
   111fc:	bl	10e80 <dcgettext@plt>
   11200:	ldr	r1, [r5]
   11204:	bl	10dfc <fputs_unlocked@plt>
   11208:	movw	r1, #23648	; 0x5c60
   1120c:	movt	r1, #1
   11210:	mov	r0, #0
   11214:	mov	r2, #5
   11218:	bl	10e80 <dcgettext@plt>
   1121c:	ldr	r1, [r5]
   11220:	bl	10dfc <fputs_unlocked@plt>
   11224:	movw	r1, #23745	; 0x5cc1
   11228:	movt	r1, #1
   1122c:	mov	r0, #0
   11230:	mov	r2, #5
   11234:	bl	10e80 <dcgettext@plt>
   11238:	ldr	r1, [r5]
   1123c:	bl	10dfc <fputs_unlocked@plt>
   11240:	movw	r1, #23974	; 0x5da6
   11244:	movt	r1, #1
   11248:	mov	r0, #0
   1124c:	mov	r2, #5
   11250:	bl	10e80 <dcgettext@plt>
   11254:	ldr	r1, [r5]
   11258:	bl	10dfc <fputs_unlocked@plt>
   1125c:	movw	r1, #24226	; 0x5ea2
   11260:	movt	r1, #1
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	bl	10e80 <dcgettext@plt>
   11270:	ldr	r1, [r5]
   11274:	bl	10dfc <fputs_unlocked@plt>
   11278:	movw	r1, #24674	; 0x6062
   1127c:	movt	r1, #1
   11280:	mov	r0, #0
   11284:	mov	r2, #5
   11288:	bl	10e80 <dcgettext@plt>
   1128c:	mov	r1, r0
   11290:	movw	r2, #24865	; 0x6121
   11294:	movt	r2, #1
   11298:	mov	r0, #1
   1129c:	bl	10fac <__printf_chk@plt>
   112a0:	bl	112f0 <__mempcpy_chk@plt+0x284>
   112a4:	mov	r0, r4
   112a8:	bl	10f64 <exit@plt>
   112ac:	movw	r0, #28992	; 0x7140
   112b0:	movt	r0, #2
   112b4:	ldr	r5, [r0]
   112b8:	movw	r1, #23388	; 0x5b5c
   112bc:	movt	r1, #1
   112c0:	mov	r0, #0
   112c4:	mov	r2, #5
   112c8:	bl	10e80 <dcgettext@plt>
   112cc:	mov	r2, r0
   112d0:	movw	r0, #29016	; 0x7158
   112d4:	movt	r0, #2
   112d8:	ldr	r3, [r0]
   112dc:	mov	r0, r5
   112e0:	mov	r1, #1
   112e4:	bl	10fd0 <__fprintf_chk@plt>
   112e8:	mov	r0, r4
   112ec:	bl	10f64 <exit@plt>
   112f0:	push	{r4, r5, r6, sl, fp, lr}
   112f4:	add	fp, sp, #16
   112f8:	sub	sp, sp, #56	; 0x38
   112fc:	movw	r0, #25664	; 0x6440
   11300:	movt	r0, #1
   11304:	add	r1, r0, #32
   11308:	mov	r2, #48	; 0x30
   1130c:	vld1.64	{d16-d17}, [r1]
   11310:	mov	r6, sp
   11314:	add	r1, r6, #32
   11318:	add	r3, r0, #16
   1131c:	vld1.64	{d18-d19}, [r0], r2
   11320:	vld1.64	{d20-d21}, [r3]
   11324:	vldr	d22, [r0]
   11328:	vst1.64	{d16-d17}, [r1]
   1132c:	add	r0, r6, #16
   11330:	vst1.64	{d20-d21}, [r0]
   11334:	mov	r0, r6
   11338:	vst1.64	{d18-d19}, [r0], r2
   1133c:	vstr	d22, [r0]
   11340:	ldr	r1, [sp]
   11344:	cmp	r1, #0
   11348:	movw	r4, #24865	; 0x6121
   1134c:	movt	r4, #1
   11350:	beq	11378 <__mempcpy_chk@plt+0x30c>
   11354:	mov	r6, sp
   11358:	movw	r5, #24865	; 0x6121
   1135c:	movt	r5, #1
   11360:	mov	r0, r5
   11364:	bl	10e20 <strcmp@plt>
   11368:	cmp	r0, #0
   1136c:	ldrne	r1, [r6, #8]!
   11370:	cmpne	r1, #0
   11374:	bne	11360 <__mempcpy_chk@plt+0x2f4>
   11378:	ldr	r5, [r6, #4]
   1137c:	movw	r1, #25126	; 0x6226
   11380:	movt	r1, #1
   11384:	mov	r0, #0
   11388:	mov	r2, #5
   1138c:	bl	10e80 <dcgettext@plt>
   11390:	mov	r1, r0
   11394:	movw	r2, #24929	; 0x6161
   11398:	movt	r2, #1
   1139c:	movw	r3, #25149	; 0x623d
   113a0:	movt	r3, #1
   113a4:	mov	r0, #1
   113a8:	bl	10fac <__printf_chk@plt>
   113ac:	cmp	r5, #0
   113b0:	moveq	r5, r4
   113b4:	mov	r0, #5
   113b8:	mov	r1, #0
   113bc:	bl	1100c <setlocale@plt>
   113c0:	cmp	r0, #0
   113c4:	beq	11404 <__mempcpy_chk@plt+0x398>
   113c8:	movw	r1, #25189	; 0x6265
   113cc:	movt	r1, #1
   113d0:	mov	r2, #3
   113d4:	bl	11048 <strncmp@plt>
   113d8:	cmp	r0, #0
   113dc:	beq	11404 <__mempcpy_chk@plt+0x398>
   113e0:	movw	r1, #25193	; 0x6269
   113e4:	movt	r1, #1
   113e8:	mov	r0, #0
   113ec:	mov	r2, #5
   113f0:	bl	10e80 <dcgettext@plt>
   113f4:	movw	r1, #28996	; 0x7144
   113f8:	movt	r1, #2
   113fc:	ldr	r1, [r1]
   11400:	bl	10dfc <fputs_unlocked@plt>
   11404:	movw	r1, #25264	; 0x62b0
   11408:	movt	r1, #1
   1140c:	mov	r0, #0
   11410:	mov	r2, #5
   11414:	bl	10e80 <dcgettext@plt>
   11418:	mov	r1, r0
   1141c:	movw	r2, #25149	; 0x623d
   11420:	movt	r2, #1
   11424:	mov	r0, #1
   11428:	mov	r3, r4
   1142c:	bl	10fac <__printf_chk@plt>
   11430:	movw	r0, #25059	; 0x61e3
   11434:	movt	r0, #1
   11438:	movw	r6, #23548	; 0x5bfc
   1143c:	movt	r6, #1
   11440:	cmp	r5, r4
   11444:	moveq	r6, r0
   11448:	movw	r1, #25291	; 0x62cb
   1144c:	movt	r1, #1
   11450:	mov	r0, #0
   11454:	mov	r2, #5
   11458:	bl	10e80 <dcgettext@plt>
   1145c:	mov	r1, r0
   11460:	mov	r0, #1
   11464:	mov	r2, r5
   11468:	mov	r3, r6
   1146c:	sub	sp, fp, #16
   11470:	pop	{r4, r5, r6, sl, fp, lr}
   11474:	b	10fac <__printf_chk@plt>
   11478:	push	{r4, r5, r6, r7, fp, lr}
   1147c:	add	fp, sp, #16
   11480:	sub	sp, sp, #8
   11484:	mov	r5, r1
   11488:	mov	r4, r0
   1148c:	ldr	r0, [r1]
   11490:	bl	127b4 <__mempcpy_chk@plt+0x1748>
   11494:	movw	r1, #23548	; 0x5bfc
   11498:	movt	r1, #1
   1149c:	mov	r0, #6
   114a0:	bl	1100c <setlocale@plt>
   114a4:	movw	r6, #24933	; 0x6165
   114a8:	movt	r6, #1
   114ac:	movw	r1, #24872	; 0x6128
   114b0:	movt	r1, #1
   114b4:	mov	r0, r6
   114b8:	bl	1103c <bindtextdomain@plt>
   114bc:	mov	r0, r6
   114c0:	bl	10e98 <textdomain@plt>
   114c4:	movw	r0, #9892	; 0x26a4
   114c8:	movt	r0, #1
   114cc:	bl	15b38 <__mempcpy_chk@plt+0x4acc>
   114d0:	movw	r7, #29004	; 0x714c
   114d4:	movt	r7, #2
   114d8:	mov	r0, #0
   114dc:	strb	r0, [r7]
   114e0:	movw	r0, #24896	; 0x6140
   114e4:	movt	r0, #1
   114e8:	bl	10f04 <getenv@plt>
   114ec:	cmp	r0, #0
   114f0:	movwne	r0, #1
   114f4:	movw	r1, #29005	; 0x714d
   114f8:	movt	r1, #2
   114fc:	strb	r0, [r1]
   11500:	cmp	r4, #2
   11504:	bne	1157c <__mempcpy_chk@plt+0x510>
   11508:	ldr	r6, [r5, #4]
   1150c:	movw	r1, #24912	; 0x6150
   11510:	movt	r1, #1
   11514:	mov	r0, r6
   11518:	bl	10e20 <strcmp@plt>
   1151c:	cmp	r0, #0
   11520:	beq	11658 <__mempcpy_chk@plt+0x5ec>
   11524:	movw	r1, #24919	; 0x6157
   11528:	movt	r1, #1
   1152c:	mov	r0, r6
   11530:	bl	10e20 <strcmp@plt>
   11534:	cmp	r0, #0
   11538:	bne	11580 <__mempcpy_chk@plt+0x514>
   1153c:	movw	r0, #28912	; 0x70f0
   11540:	movt	r0, #2
   11544:	ldr	r3, [r0]
   11548:	movw	r0, #28996	; 0x7144
   1154c:	movt	r0, #2
   11550:	ldr	r0, [r0]
   11554:	mov	r4, #0
   11558:	movw	r1, #24943	; 0x616f
   1155c:	movt	r1, #1
   11560:	stm	sp, {r1, r4}
   11564:	movw	r1, #24865	; 0x6121
   11568:	movt	r1, #1
   1156c:	movw	r2, #24929	; 0x6161
   11570:	movt	r2, #1
   11574:	bl	14b64 <__mempcpy_chk@plt+0x3af8>
   11578:	b	11620 <__mempcpy_chk@plt+0x5b4>
   1157c:	blt	1162c <__mempcpy_chk@plt+0x5c0>
   11580:	mov	r6, r5
   11584:	ldr	r0, [r6, #4]!
   11588:	movw	r1, #24959	; 0x617f
   1158c:	movt	r1, #1
   11590:	bl	10e20 <strcmp@plt>
   11594:	cmp	r0, #0
   11598:	beq	115a4 <__mempcpy_chk@plt+0x538>
   1159c:	mov	r6, r5
   115a0:	b	115b0 <__mempcpy_chk@plt+0x544>
   115a4:	cmp	r4, #2
   115a8:	ble	1162c <__mempcpy_chk@plt+0x5c0>
   115ac:	sub	r4, r4, #1
   115b0:	add	r5, r6, #8
   115b4:	sub	r4, r4, #2
   115b8:	ldr	r6, [r6, #4]
   115bc:	mov	r0, r6
   115c0:	mov	r1, r4
   115c4:	mov	r2, r5
   115c8:	bl	11660 <__mempcpy_chk@plt+0x5f4>
   115cc:	add	r5, r5, r0, lsl #2
   115d0:	sub	r4, r4, r0
   115d4:	cmp	r0, #1
   115d8:	cmpge	r4, #0
   115dc:	bgt	115bc <__mempcpy_chk@plt+0x550>
   115e0:	cmp	r4, #1
   115e4:	blt	1161c <__mempcpy_chk@plt+0x5b0>
   115e8:	movw	r1, #24978	; 0x6192
   115ec:	movt	r1, #1
   115f0:	mov	r0, #0
   115f4:	mov	r2, #5
   115f8:	bl	10e80 <dcgettext@plt>
   115fc:	mov	r4, r0
   11600:	ldr	r0, [r5]
   11604:	bl	13fa8 <__mempcpy_chk@plt+0x2f3c>
   11608:	mov	r3, r0
   1160c:	mov	r0, #0
   11610:	mov	r1, #0
   11614:	mov	r2, r4
   11618:	bl	10ef8 <error@plt>
   1161c:	ldrb	r4, [r7]
   11620:	mov	r0, r4
   11624:	sub	sp, fp, #16
   11628:	pop	{r4, r5, r6, r7, fp, pc}
   1162c:	movw	r1, #24962	; 0x6182
   11630:	movt	r1, #1
   11634:	mov	r0, #0
   11638:	mov	r2, #5
   1163c:	bl	10e80 <dcgettext@plt>
   11640:	mov	r2, r0
   11644:	mov	r0, #0
   11648:	mov	r1, #0
   1164c:	bl	10ef8 <error@plt>
   11650:	mov	r0, #1
   11654:	bl	11168 <__mempcpy_chk@plt+0xfc>
   11658:	mov	r0, #0
   1165c:	bl	11168 <__mempcpy_chk@plt+0xfc>
   11660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11664:	add	fp, sp, #28
   11668:	sub	sp, sp, #300	; 0x12c
   1166c:	mov	r4, r2
   11670:	mov	r9, r1
   11674:	mov	r7, r0
   11678:	add	r0, sp, #40	; 0x28
   1167c:	add	r0, r0, #99	; 0x63
   11680:	str	r0, [sp, #28]
   11684:	mov	sl, #0
   11688:	mov	r0, #0
   1168c:	str	r0, [sp, #32]
   11690:	mov	r8, #0
   11694:	str	r1, [sp, #24]
   11698:	b	116a8 <__mempcpy_chk@plt+0x63c>
   1169c:	mov	r0, #37	; 0x25
   116a0:	bl	11060 <putchar_unlocked@plt>
   116a4:	add	r7, r6, #1
   116a8:	ldrb	r0, [r7]
   116ac:	cmp	r0, #37	; 0x25
   116b0:	beq	116ec <__mempcpy_chk@plt+0x680>
   116b4:	cmp	r0, #92	; 0x5c
   116b8:	beq	116d4 <__mempcpy_chk@plt+0x668>
   116bc:	cmp	r0, #0
   116c0:	beq	11b14 <__mempcpy_chk@plt+0xaa8>
   116c4:	bl	11060 <putchar_unlocked@plt>
   116c8:	mov	r6, r7
   116cc:	add	r7, r7, #1
   116d0:	b	116a8 <__mempcpy_chk@plt+0x63c>
   116d4:	mov	r0, r7
   116d8:	mov	r1, #0
   116dc:	bl	1206c <__mempcpy_chk@plt+0x1000>
   116e0:	add	r6, r7, r0
   116e4:	add	r7, r6, #1
   116e8:	b	116a8 <__mempcpy_chk@plt+0x63c>
   116ec:	mov	r6, r7
   116f0:	ldrb	r0, [r6, #1]!
   116f4:	cmp	r0, #113	; 0x71
   116f8:	beq	11890 <__mempcpy_chk@plt+0x824>
   116fc:	cmp	r0, #98	; 0x62
   11700:	beq	1187c <__mempcpy_chk@plt+0x810>
   11704:	cmp	r0, #37	; 0x25
   11708:	beq	1169c <__mempcpy_chk@plt+0x630>
   1170c:	str	r8, [sp, #36]	; 0x24
   11710:	mov	r8, r4
   11714:	mov	r4, #0
   11718:	add	r0, sp, #40	; 0x28
   1171c:	mov	r1, #0
   11720:	mov	r2, #256	; 0x100
   11724:	bl	10fa0 <memset@plt>
   11728:	mov	r5, #1
   1172c:	strb	r5, [sp, #160]	; 0xa0
   11730:	strb	r5, [sp, #128]	; 0x80
   11734:	strb	r5, [sp, #157]	; 0x9d
   11738:	strb	r5, [sp, #155]	; 0x9b
   1173c:	strb	r5, [sp, #151]	; 0x97
   11740:	strb	r5, [sp, #145]	; 0x91
   11744:	strb	r5, [sp, #111]	; 0x6f
   11748:	movw	r0, #257	; 0x101
   1174c:	strh	r0, [sp, #109]	; 0x6d
   11750:	strb	r5, [sp, #137]	; 0x89
   11754:	strb	r5, [sp, #105]	; 0x69
   11758:	ldr	r0, [sp, #28]
   1175c:	movw	r1, #257	; 0x101
   11760:	movt	r1, #257	; 0x101
   11764:	str	r1, [r0]
   11768:	strb	r5, [r0, #4]
   1176c:	b	11788 <__mempcpy_chk@plt+0x71c>
   11770:	strb	sl, [sp, #155]	; 0x9b
   11774:	strb	sl, [sp, #157]	; 0x9d
   11778:	strb	sl, [sp, #145]	; 0x91
   1177c:	strh	sl, [sp, #139]	; 0x8b
   11780:	add	r4, r4, #1
   11784:	add	r5, r5, #1
   11788:	ldrb	r0, [r7, r5]
   1178c:	sub	r0, r0, #32
   11790:	cmp	r0, #41	; 0x29
   11794:	bhi	118c0 <__mempcpy_chk@plt+0x854>
   11798:	add	r1, pc, #0
   1179c:	ldr	pc, [r1, r0, lsl #2]
   117a0:	andeq	r1, r1, r0, lsl #15
   117a4:	andeq	r1, r1, r0, asr #17
   117a8:	andeq	r1, r1, r0, asr #17
   117ac:	andeq	r1, r1, r0, ror r7
   117b0:	andeq	r1, r1, r0, asr #17
   117b4:	andeq	r1, r1, r0, asr #17
   117b8:	andeq	r1, r1, r0, asr #17
   117bc:	andeq	r1, r1, r8, asr #16
   117c0:	andeq	r1, r1, r0, asr #17
   117c4:	andeq	r1, r1, r0, asr #17
   117c8:	andeq	r1, r1, r4, lsl #18
   117cc:	andeq	r1, r1, r0, lsl #15
   117d0:	andeq	r1, r1, r0, asr #17
   117d4:	andeq	r1, r1, r0, lsl #15
   117d8:	andeq	r1, r1, r0, asr #17
   117dc:	andeq	r1, r1, r0, asr #17
   117e0:	andeq	r1, r1, r0, ror r8
   117e4:	andeq	r1, r1, r0, asr #17
   117e8:	andeq	r1, r1, r0, asr #17
   117ec:	andeq	r1, r1, r0, asr #17
   117f0:	andeq	r1, r1, r0, asr #17
   117f4:	andeq	r1, r1, r0, asr #17
   117f8:	andeq	r1, r1, r0, asr #17
   117fc:	andeq	r1, r1, r0, asr #17
   11800:	andeq	r1, r1, r0, asr #17
   11804:	andeq	r1, r1, r0, asr #17
   11808:	andeq	r1, r1, r0, asr #17
   1180c:	andeq	r1, r1, r0, asr #17
   11810:	andeq	r1, r1, r0, asr #17
   11814:	andeq	r1, r1, r0, asr #17
   11818:	andeq	r1, r1, r0, asr #17
   1181c:	andeq	r1, r1, r0, asr #17
   11820:	andeq	r1, r1, r0, asr #17
   11824:	andeq	r1, r1, r0, asr #17
   11828:	andeq	r1, r1, r0, asr #17
   1182c:	andeq	r1, r1, r0, asr #17
   11830:	andeq	r1, r1, r0, asr #17
   11834:	andeq	r1, r1, r0, asr #17
   11838:	andeq	r1, r1, r0, asr #17
   1183c:	andeq	r1, r1, r0, asr #17
   11840:	andeq	r1, r1, r0, asr #17
   11844:	andeq	r1, r1, r8, asr #16
   11848:	strb	sl, [sp, #160]	; 0xa0
   1184c:	strb	sl, [sp, #128]	; 0x80
   11850:	strb	sl, [sp, #155]	; 0x9b
   11854:	strb	sl, [sp, #151]	; 0x97
   11858:	strb	sl, [sp, #141]	; 0x8d
   1185c:	strb	sl, [sp, #109]	; 0x6d
   11860:	strb	sl, [sp, #139]	; 0x8b
   11864:	strb	sl, [sp, #137]	; 0x89
   11868:	strb	sl, [sp, #105]	; 0x69
   1186c:	b	11780 <__mempcpy_chk@plt+0x714>
   11870:	strb	sl, [sp, #139]	; 0x8b
   11874:	strb	sl, [sp, #155]	; 0x9b
   11878:	b	11780 <__mempcpy_chk@plt+0x714>
   1187c:	cmp	r9, #1
   11880:	blt	116e4 <__mempcpy_chk@plt+0x678>
   11884:	ldr	r0, [r4], #4
   11888:	bl	11b94 <__mempcpy_chk@plt+0xb28>
   1188c:	b	118b4 <__mempcpy_chk@plt+0x848>
   11890:	cmp	r9, #1
   11894:	blt	116e4 <__mempcpy_chk@plt+0x678>
   11898:	ldr	r1, [r4], #4
   1189c:	mov	r0, #3
   118a0:	bl	13db4 <__mempcpy_chk@plt+0x2d48>
   118a4:	movw	r1, #28996	; 0x7144
   118a8:	movt	r1, #2
   118ac:	ldr	r1, [r1]
   118b0:	bl	10dfc <fputs_unlocked@plt>
   118b4:	sub	r9, r9, #1
   118b8:	add	r7, r6, #1
   118bc:	b	116a8 <__mempcpy_chk@plt+0x63c>
   118c0:	mov	r6, r7
   118c4:	ldrb	r0, [r6, r5]!
   118c8:	sub	r1, r0, #48	; 0x30
   118cc:	mov	r3, #0
   118d0:	cmp	r1, #9
   118d4:	bhi	118fc <__mempcpy_chk@plt+0x890>
   118d8:	add	r0, r7, r4
   118dc:	ldrb	r0, [r0, #2]
   118e0:	sub	r1, r0, #48	; 0x30
   118e4:	add	r4, r4, #1
   118e8:	cmp	r1, #10
   118ec:	bcc	118d8 <__mempcpy_chk@plt+0x86c>
   118f0:	add	r1, r7, r4
   118f4:	add	r6, r1, #1
   118f8:	add	r5, r4, #1
   118fc:	mov	r4, r8
   11900:	b	11954 <__mempcpy_chk@plt+0x8e8>
   11904:	cmp	r9, #1
   11908:	blt	11934 <__mempcpy_chk@plt+0x8c8>
   1190c:	mov	r4, r8
   11910:	ldr	r0, [r8]
   11914:	bl	11bdc <__mempcpy_chk@plt+0xb70>
   11918:	str	r0, [sp, #32]
   1191c:	adds	r0, r0, #-2147483648	; 0x80000000
   11920:	adcs	r0, r1, #0
   11924:	bne	11b24 <__mempcpy_chk@plt+0xab8>
   11928:	sub	r9, r9, #1
   1192c:	add	r4, r4, #4
   11930:	b	11940 <__mempcpy_chk@plt+0x8d4>
   11934:	mov	r0, #0
   11938:	str	r0, [sp, #32]
   1193c:	mov	r4, r8
   11940:	add	r0, r7, r5
   11944:	add	r6, r0, #1
   11948:	add	r5, r5, #1
   1194c:	ldrb	r0, [r0, #1]
   11950:	mov	r3, #1
   11954:	mov	r8, #0
   11958:	cmp	r0, #46	; 0x2e
   1195c:	bne	119e4 <__mempcpy_chk@plt+0x978>
   11960:	strb	sl, [sp, #139]	; 0x8b
   11964:	ldrb	r0, [r6, #1]
   11968:	cmp	r0, #42	; 0x2a
   1196c:	bne	119ac <__mempcpy_chk@plt+0x940>
   11970:	add	r5, r5, #2
   11974:	add	r6, r6, #2
   11978:	mov	r8, #1
   1197c:	cmp	r9, #1
   11980:	blt	119c4 <__mempcpy_chk@plt+0x958>
   11984:	str	r3, [sp, #20]
   11988:	ldr	r0, [r4]
   1198c:	bl	11bdc <__mempcpy_chk@plt+0xb70>
   11990:	cmp	r1, #0
   11994:	bmi	119d0 <__mempcpy_chk@plt+0x964>
   11998:	str	r0, [sp, #36]	; 0x24
   1199c:	subs	r0, r0, #-2147483648	; 0x80000000
   119a0:	sbcs	r0, r1, #0
   119a4:	blt	119d8 <__mempcpy_chk@plt+0x96c>
   119a8:	b	11b30 <__mempcpy_chk@plt+0xac4>
   119ac:	add	r5, r5, #1
   119b0:	ldrb	r0, [r6, #1]!
   119b4:	sub	r0, r0, #48	; 0x30
   119b8:	cmp	r0, #10
   119bc:	bcc	119ac <__mempcpy_chk@plt+0x940>
   119c0:	b	119e4 <__mempcpy_chk@plt+0x978>
   119c4:	mov	r0, #0
   119c8:	str	r0, [sp, #36]	; 0x24
   119cc:	b	119e4 <__mempcpy_chk@plt+0x978>
   119d0:	mvn	r0, #0
   119d4:	str	r0, [sp, #36]	; 0x24
   119d8:	ldr	r3, [sp, #20]
   119dc:	sub	r9, r9, #1
   119e0:	add	r4, r4, #4
   119e4:	ldrb	r2, [r6]
   119e8:	sub	r0, r2, #76	; 0x4c
   119ec:	cmp	r0, #46	; 0x2e
   119f0:	bhi	11ac0 <__mempcpy_chk@plt+0xa54>
   119f4:	add	r1, pc, #0
   119f8:	ldr	pc, [r1, r0, lsl #2]
   119fc:			; <UNDEFINED> instruction: 0x00011ab8
   11a00:	andeq	r1, r1, r0, asr #21
   11a04:	andeq	r1, r1, r0, asr #21
   11a08:	andeq	r1, r1, r0, asr #21
   11a0c:	andeq	r1, r1, r0, asr #21
   11a10:	andeq	r1, r1, r0, asr #21
   11a14:	andeq	r1, r1, r0, asr #21
   11a18:	andeq	r1, r1, r0, asr #21
   11a1c:	andeq	r1, r1, r0, asr #21
   11a20:	andeq	r1, r1, r0, asr #21
   11a24:	andeq	r1, r1, r0, asr #21
   11a28:	andeq	r1, r1, r0, asr #21
   11a2c:	andeq	r1, r1, r0, asr #21
   11a30:	andeq	r1, r1, r0, asr #21
   11a34:	andeq	r1, r1, r0, asr #21
   11a38:	andeq	r1, r1, r0, asr #21
   11a3c:	andeq	r1, r1, r0, asr #21
   11a40:	andeq	r1, r1, r0, asr #21
   11a44:	andeq	r1, r1, r0, asr #21
   11a48:	andeq	r1, r1, r0, asr #21
   11a4c:	andeq	r1, r1, r0, asr #21
   11a50:	andeq	r1, r1, r0, asr #21
   11a54:	andeq	r1, r1, r0, asr #21
   11a58:	andeq	r1, r1, r0, asr #21
   11a5c:	andeq	r1, r1, r0, asr #21
   11a60:	andeq	r1, r1, r0, asr #21
   11a64:	andeq	r1, r1, r0, asr #21
   11a68:	andeq	r1, r1, r0, asr #21
   11a6c:			; <UNDEFINED> instruction: 0x00011ab8
   11a70:	andeq	r1, r1, r0, asr #21
   11a74:			; <UNDEFINED> instruction: 0x00011ab8
   11a78:	andeq	r1, r1, r0, asr #21
   11a7c:			; <UNDEFINED> instruction: 0x00011ab8
   11a80:	andeq	r1, r1, r0, asr #21
   11a84:	andeq	r1, r1, r0, asr #21
   11a88:	andeq	r1, r1, r0, asr #21
   11a8c:	andeq	r1, r1, r0, asr #21
   11a90:	andeq	r1, r1, r0, asr #21
   11a94:	andeq	r1, r1, r0, asr #21
   11a98:	andeq	r1, r1, r0, asr #21
   11a9c:			; <UNDEFINED> instruction: 0x00011ab8
   11aa0:	andeq	r1, r1, r0, asr #21
   11aa4:	andeq	r1, r1, r0, asr #21
   11aa8:	andeq	r1, r1, r0, asr #21
   11aac:	andeq	r1, r1, r0, asr #21
   11ab0:	andeq	r1, r1, r0, asr #21
   11ab4:			; <UNDEFINED> instruction: 0x00011ab8
   11ab8:	add	r6, r6, #1
   11abc:	b	119e4 <__mempcpy_chk@plt+0x978>
   11ac0:	add	r0, sp, #40	; 0x28
   11ac4:	ldrb	r0, [r0, r2]
   11ac8:	cmp	r0, #0
   11acc:	beq	11b64 <__mempcpy_chk@plt+0xaf8>
   11ad0:	cmp	r9, #1
   11ad4:	blt	11ae4 <__mempcpy_chk@plt+0xa78>
   11ad8:	sub	r9, r9, #1
   11adc:	ldr	r0, [r4], #4
   11ae0:	b	11aec <__mempcpy_chk@plt+0xa80>
   11ae4:	movw	r0, #23548	; 0x5bfc
   11ae8:	movt	r0, #1
   11aec:	ldr	r1, [sp, #32]
   11af0:	stm	sp, {r1, r8}
   11af4:	ldr	r8, [sp, #36]	; 0x24
   11af8:	str	r8, [sp, #8]
   11afc:	str	r0, [sp, #12]
   11b00:	mov	r0, r7
   11b04:	mov	r1, r5
   11b08:	bl	11c9c <__mempcpy_chk@plt+0xc30>
   11b0c:	add	r7, r6, #1
   11b10:	b	116a8 <__mempcpy_chk@plt+0x63c>
   11b14:	ldr	r0, [sp, #24]
   11b18:	sub	r0, r0, r9
   11b1c:	sub	sp, fp, #28
   11b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b24:	movw	r1, #25342	; 0x62fe
   11b28:	movt	r1, #1
   11b2c:	b	11b38 <__mempcpy_chk@plt+0xacc>
   11b30:	movw	r1, #25366	; 0x6316
   11b34:	movt	r1, #1
   11b38:	mov	r0, #0
   11b3c:	mov	r2, #5
   11b40:	bl	10e80 <dcgettext@plt>
   11b44:	mov	r5, r0
   11b48:	ldr	r0, [r4]
   11b4c:	bl	13fa8 <__mempcpy_chk@plt+0x2f3c>
   11b50:	mov	r3, r0
   11b54:	mov	r0, #1
   11b58:	mov	r1, #0
   11b5c:	mov	r2, r5
   11b60:	bl	10ef8 <error@plt>
   11b64:	movw	r1, #25388	; 0x632c
   11b68:	movt	r1, #1
   11b6c:	mov	r0, #0
   11b70:	mov	r2, #5
   11b74:	bl	10e80 <dcgettext@plt>
   11b78:	mov	r2, r0
   11b7c:	str	r7, [sp]
   11b80:	sub	r0, r6, r7
   11b84:	add	r3, r0, #1
   11b88:	mov	r0, #1
   11b8c:	mov	r1, #0
   11b90:	bl	10ef8 <error@plt>
   11b94:	push	{r4, sl, fp, lr}
   11b98:	add	fp, sp, #8
   11b9c:	mov	r4, r0
   11ba0:	b	11bb8 <__mempcpy_chk@plt+0xb4c>
   11ba4:	mov	r0, r4
   11ba8:	mov	r1, #1
   11bac:	bl	1206c <__mempcpy_chk@plt+0x1000>
   11bb0:	add	r0, r4, r0
   11bb4:	add	r4, r0, #1
   11bb8:	ldrb	r0, [r4]
   11bbc:	cmp	r0, #92	; 0x5c
   11bc0:	beq	11ba4 <__mempcpy_chk@plt+0xb38>
   11bc4:	cmp	r0, #0
   11bc8:	beq	11bd8 <__mempcpy_chk@plt+0xb6c>
   11bcc:	bl	11060 <putchar_unlocked@plt>
   11bd0:	add	r4, r4, #1
   11bd4:	b	11bb8 <__mempcpy_chk@plt+0xb4c>
   11bd8:	pop	{r4, sl, fp, pc}
   11bdc:	push	{r4, r5, r6, sl, fp, lr}
   11be0:	add	fp, sp, #16
   11be4:	sub	sp, sp, #8
   11be8:	mov	r4, r0
   11bec:	ldrb	r0, [r0]
   11bf0:	cmp	r0, #39	; 0x27
   11bf4:	cmpne	r0, #34	; 0x22
   11bf8:	bne	11c5c <__mempcpy_chk@plt+0xbf0>
   11bfc:	ldrb	r5, [r4, #1]
   11c00:	cmp	r5, #0
   11c04:	beq	11c5c <__mempcpy_chk@plt+0xbf0>
   11c08:	ldrb	r0, [r4, #2]!
   11c0c:	mov	r6, #0
   11c10:	cmp	r0, #0
   11c14:	beq	11c8c <__mempcpy_chk@plt+0xc20>
   11c18:	movw	r0, #29005	; 0x714d
   11c1c:	movt	r0, #2
   11c20:	ldrb	r0, [r0]
   11c24:	cmp	r0, #0
   11c28:	bne	11c8c <__mempcpy_chk@plt+0xc20>
   11c2c:	mov	r6, #0
   11c30:	movw	r1, #25427	; 0x6353
   11c34:	movt	r1, #1
   11c38:	mov	r0, #0
   11c3c:	mov	r2, #5
   11c40:	bl	10e80 <dcgettext@plt>
   11c44:	mov	r2, r0
   11c48:	mov	r0, #0
   11c4c:	mov	r1, #0
   11c50:	mov	r3, r4
   11c54:	bl	10ef8 <error@plt>
   11c58:	b	11c8c <__mempcpy_chk@plt+0xc20>
   11c5c:	bl	10f88 <__errno_location@plt>
   11c60:	mov	r1, #0
   11c64:	str	r1, [r0]
   11c68:	add	r1, sp, #4
   11c6c:	mov	r0, r4
   11c70:	mov	r2, #0
   11c74:	bl	10fe8 <strtoimax@plt>
   11c78:	mov	r5, r0
   11c7c:	mov	r6, r1
   11c80:	ldr	r1, [sp, #4]
   11c84:	mov	r0, r4
   11c88:	bl	122fc <__mempcpy_chk@plt+0x1290>
   11c8c:	mov	r0, r5
   11c90:	mov	r1, r6
   11c94:	sub	sp, fp, #16
   11c98:	pop	{r4, r5, r6, sl, fp, pc}
   11c9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ca0:	add	fp, sp, #28
   11ca4:	sub	sp, sp, #28
   11ca8:	mov	r5, r3
   11cac:	mov	r6, r2
   11cb0:	mov	r4, r1
   11cb4:	mov	sl, r0
   11cb8:	sub	r7, r2, #65	; 0x41
   11cbc:	ldr	r0, [fp, #20]
   11cc0:	str	r0, [sp, #24]
   11cc4:	ldr	r0, [fp, #16]
   11cc8:	str	r0, [sp, #12]
   11ccc:	ldr	r0, [fp, #12]
   11cd0:	str	r0, [sp, #20]
   11cd4:	ldr	r0, [fp, #8]
   11cd8:	str	r0, [sp, #16]
   11cdc:	cmp	r7, #55	; 0x37
   11ce0:	bhi	11fd0 <__mempcpy_chk@plt+0xf64>
   11ce4:	movw	r8, #25564	; 0x63dc
   11ce8:	movt	r8, #1
   11cec:	mov	r9, #2
   11cf0:	add	r0, pc, #0
   11cf4:	ldr	pc, [r0, r7, lsl #2]
   11cf8:	ldrdeq	r1, [r1], -r8
   11cfc:	ldrdeq	r1, [r1], -r0
   11d00:	ldrdeq	r1, [r1], -r0
   11d04:	ldrdeq	r1, [r1], -r0
   11d08:	ldrdeq	r1, [r1], -r8
   11d0c:	ldrdeq	r1, [r1], -r8
   11d10:	ldrdeq	r1, [r1], -r8
   11d14:	ldrdeq	r1, [r1], -r0
   11d18:	ldrdeq	r1, [r1], -r0
   11d1c:	ldrdeq	r1, [r1], -r0
   11d20:	ldrdeq	r1, [r1], -r0
   11d24:	ldrdeq	r1, [r1], -r0
   11d28:	ldrdeq	r1, [r1], -r0
   11d2c:	ldrdeq	r1, [r1], -r0
   11d30:	ldrdeq	r1, [r1], -r0
   11d34:	ldrdeq	r1, [r1], -r0
   11d38:	ldrdeq	r1, [r1], -r0
   11d3c:	ldrdeq	r1, [r1], -r0
   11d40:	ldrdeq	r1, [r1], -r0
   11d44:	ldrdeq	r1, [r1], -r0
   11d48:	ldrdeq	r1, [r1], -r0
   11d4c:	ldrdeq	r1, [r1], -r0
   11d50:	ldrdeq	r1, [r1], -r0
   11d54:	andeq	r1, r1, r4, ror #27
   11d58:	ldrdeq	r1, [r1], -r0
   11d5c:	ldrdeq	r1, [r1], -r0
   11d60:	ldrdeq	r1, [r1], -r0
   11d64:	ldrdeq	r1, [r1], -r0
   11d68:	ldrdeq	r1, [r1], -r0
   11d6c:	ldrdeq	r1, [r1], -r0
   11d70:	ldrdeq	r1, [r1], -r0
   11d74:	ldrdeq	r1, [r1], -r0
   11d78:	ldrdeq	r1, [r1], -r8
   11d7c:	ldrdeq	r1, [r1], -r0
   11d80:	ldrdeq	r1, [r1], -r0
   11d84:	andeq	r1, r1, r4, ror #27
   11d88:	ldrdeq	r1, [r1], -r8
   11d8c:	ldrdeq	r1, [r1], -r8
   11d90:	ldrdeq	r1, [r1], -r8
   11d94:	ldrdeq	r1, [r1], -r0
   11d98:	andeq	r1, r1, r4, ror #27
   11d9c:	ldrdeq	r1, [r1], -r0
   11da0:	ldrdeq	r1, [r1], -r0
   11da4:	ldrdeq	r1, [r1], -r0
   11da8:	ldrdeq	r1, [r1], -r0
   11dac:	ldrdeq	r1, [r1], -r0
   11db0:	andeq	r1, r1, r4, ror #27
   11db4:	ldrdeq	r1, [r1], -r0
   11db8:	ldrdeq	r1, [r1], -r0
   11dbc:	ldrdeq	r1, [r1], -r0
   11dc0:	ldrdeq	r1, [r1], -r0
   11dc4:	ldrdeq	r1, [r1], -r0
   11dc8:	andeq	r1, r1, r4, ror #27
   11dcc:	ldrdeq	r1, [r1], -r0
   11dd0:	ldrdeq	r1, [r1], -r0
   11dd4:	andeq	r1, r1, r4, ror #27
   11dd8:	movw	r8, #25568	; 0x63e0
   11ddc:	movt	r8, #1
   11de0:	mov	r9, #1
   11de4:	add	r0, r4, r9
   11de8:	add	r0, r0, #2
   11dec:	bl	14c6c <__mempcpy_chk@plt+0x3c00>
   11df0:	mov	r1, sl
   11df4:	mov	r2, r4
   11df8:	mov	r4, r0
   11dfc:	mvn	r3, #0
   11e00:	bl	1106c <__mempcpy_chk@plt>
   11e04:	mov	r1, r8
   11e08:	mov	r2, r9
   11e0c:	mvn	r3, #0
   11e10:	bl	1106c <__mempcpy_chk@plt>
   11e14:	mov	r1, #0
   11e18:	strb	r1, [r0, #1]
   11e1c:	strb	r6, [r0]
   11e20:	cmp	r7, #55	; 0x37
   11e24:	bhi	11fc0 <__mempcpy_chk@plt+0xf54>
   11e28:	add	r0, pc, #0
   11e2c:	ldr	pc, [r0, r7, lsl #2]
   11e30:	andeq	r1, r1, r0, lsl pc
   11e34:	andeq	r1, r1, r0, asr #31
   11e38:	andeq	r1, r1, r0, asr #31
   11e3c:	andeq	r1, r1, r0, asr #31
   11e40:	andeq	r1, r1, r0, lsl pc
   11e44:	andeq	r1, r1, r0, lsl pc
   11e48:	andeq	r1, r1, r0, lsl pc
   11e4c:	andeq	r1, r1, r0, asr #31
   11e50:	andeq	r1, r1, r0, asr #31
   11e54:	andeq	r1, r1, r0, asr #31
   11e58:	andeq	r1, r1, r0, asr #31
   11e5c:	andeq	r1, r1, r0, asr #31
   11e60:	andeq	r1, r1, r0, asr #31
   11e64:	andeq	r1, r1, r0, asr #31
   11e68:	andeq	r1, r1, r0, asr #31
   11e6c:	andeq	r1, r1, r0, asr #31
   11e70:	andeq	r1, r1, r0, asr #31
   11e74:	andeq	r1, r1, r0, asr #31
   11e78:	andeq	r1, r1, r0, asr #31
   11e7c:	andeq	r1, r1, r0, asr #31
   11e80:	andeq	r1, r1, r0, asr #31
   11e84:	andeq	r1, r1, r0, asr #31
   11e88:	andeq	r1, r1, r0, asr #31
   11e8c:	andeq	r1, r1, r4, lsr pc
   11e90:	andeq	r1, r1, r0, asr #31
   11e94:	andeq	r1, r1, r0, asr #31
   11e98:	andeq	r1, r1, r0, asr #31
   11e9c:	andeq	r1, r1, r0, asr #31
   11ea0:	andeq	r1, r1, r0, asr #31
   11ea4:	andeq	r1, r1, r0, asr #31
   11ea8:	andeq	r1, r1, r0, asr #31
   11eac:	andeq	r1, r1, r0, asr #31
   11eb0:	andeq	r1, r1, r0, lsl pc
   11eb4:	andeq	r1, r1, r0, asr #31
   11eb8:	ldrdeq	r1, [r1], -ip
   11ebc:	andeq	r1, r1, ip, asr pc
   11ec0:	andeq	r1, r1, r0, lsl pc
   11ec4:	andeq	r1, r1, r0, lsl pc
   11ec8:	andeq	r1, r1, r0, lsl pc
   11ecc:	andeq	r1, r1, r0, asr #31
   11ed0:	andeq	r1, r1, ip, asr pc
   11ed4:	andeq	r1, r1, r0, asr #31
   11ed8:	andeq	r1, r1, r0, asr #31
   11edc:	andeq	r1, r1, r0, asr #31
   11ee0:	andeq	r1, r1, r0, asr #31
   11ee4:	andeq	r1, r1, r0, asr #31
   11ee8:	andeq	r1, r1, r4, lsr pc
   11eec:	andeq	r1, r1, r0, asr #31
   11ef0:	andeq	r1, r1, r0, asr #31
   11ef4:	andeq	r1, r1, r0, asr #31
   11ef8:	strdeq	r1, [r1], -ip
   11efc:	andeq	r1, r1, r0, asr #31
   11f00:	andeq	r1, r1, r4, lsr pc
   11f04:	andeq	r1, r1, r0, asr #31
   11f08:	andeq	r1, r1, r0, asr #31
   11f0c:	andeq	r1, r1, r4, lsr pc
   11f10:	ldr	r0, [sp, #24]
   11f14:	bl	12460 <__mempcpy_chk@plt+0x13f4>
   11f18:	cmp	r5, #0
   11f1c:	beq	11f40 <__mempcpy_chk@plt+0xed4>
   11f20:	ldr	r0, [sp, #20]
   11f24:	cmp	r0, #0
   11f28:	beq	11fb0 <__mempcpy_chk@plt+0xf44>
   11f2c:	vstr	d0, [sp]
   11f30:	b	11f84 <__mempcpy_chk@plt+0xf18>
   11f34:	ldr	r0, [sp, #24]
   11f38:	bl	123a0 <__mempcpy_chk@plt+0x1334>
   11f3c:	b	11f64 <__mempcpy_chk@plt+0xef8>
   11f40:	ldr	r0, [sp, #20]
   11f44:	vmov	r2, r3, d0
   11f48:	cmp	r0, #0
   11f4c:	beq	11fa4 <__mempcpy_chk@plt+0xf38>
   11f50:	mov	r0, r4
   11f54:	ldr	r1, [sp, #12]
   11f58:	b	11fbc <__mempcpy_chk@plt+0xf50>
   11f5c:	ldr	r0, [sp, #24]
   11f60:	bl	11bdc <__mempcpy_chk@plt+0xb70>
   11f64:	mov	r2, r0
   11f68:	mov	r3, r1
   11f6c:	cmp	r5, #0
   11f70:	beq	11f98 <__mempcpy_chk@plt+0xf2c>
   11f74:	ldr	r0, [sp, #20]
   11f78:	cmp	r0, #0
   11f7c:	beq	11fb4 <__mempcpy_chk@plt+0xf48>
   11f80:	stm	sp, {r2, r3}
   11f84:	mov	r0, r4
   11f88:	ldr	r1, [sp, #16]
   11f8c:	ldr	r2, [sp, #12]
   11f90:	bl	15038 <__mempcpy_chk@plt+0x3fcc>
   11f94:	b	11fc0 <__mempcpy_chk@plt+0xf54>
   11f98:	ldr	r0, [sp, #20]
   11f9c:	cmp	r0, #0
   11fa0:	bne	11f50 <__mempcpy_chk@plt+0xee4>
   11fa4:	mov	r0, r4
   11fa8:	bl	15038 <__mempcpy_chk@plt+0x3fcc>
   11fac:	b	11fc0 <__mempcpy_chk@plt+0xf54>
   11fb0:	vmov	r2, r3, d0
   11fb4:	mov	r0, r4
   11fb8:	ldr	r1, [sp, #16]
   11fbc:	bl	15038 <__mempcpy_chk@plt+0x3fcc>
   11fc0:	mov	r0, r4
   11fc4:	sub	sp, fp, #28
   11fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fcc:	b	1278c <__mempcpy_chk@plt+0x1720>
   11fd0:	mov	r9, #0
   11fd4:	mov	r8, sl
   11fd8:	b	11de4 <__mempcpy_chk@plt+0xd78>
   11fdc:	ldr	r0, [sp, #24]
   11fe0:	ldrb	r2, [r0]
   11fe4:	mov	r0, r4
   11fe8:	cmp	r5, #0
   11fec:	beq	12024 <__mempcpy_chk@plt+0xfb8>
   11ff0:	ldr	r1, [sp, #16]
   11ff4:	bl	15038 <__mempcpy_chk@plt+0x3fcc>
   11ff8:	b	11fc0 <__mempcpy_chk@plt+0xf54>
   11ffc:	cmp	r5, #0
   12000:	beq	12030 <__mempcpy_chk@plt+0xfc4>
   12004:	ldr	r0, [sp, #20]
   12008:	cmp	r0, #0
   1200c:	beq	12048 <__mempcpy_chk@plt+0xfdc>
   12010:	mov	r0, r4
   12014:	ldr	r1, [sp, #16]
   12018:	ldr	r2, [sp, #12]
   1201c:	ldr	r3, [sp, #24]
   12020:	b	11fbc <__mempcpy_chk@plt+0xf50>
   12024:	mov	r1, r2
   12028:	bl	15038 <__mempcpy_chk@plt+0x3fcc>
   1202c:	b	11fc0 <__mempcpy_chk@plt+0xf54>
   12030:	ldr	r0, [sp, #20]
   12034:	cmp	r0, #0
   12038:	beq	1205c <__mempcpy_chk@plt+0xff0>
   1203c:	mov	r0, r4
   12040:	ldr	r1, [sp, #12]
   12044:	b	12050 <__mempcpy_chk@plt+0xfe4>
   12048:	mov	r0, r4
   1204c:	ldr	r1, [sp, #16]
   12050:	ldr	r2, [sp, #24]
   12054:	bl	15038 <__mempcpy_chk@plt+0x3fcc>
   12058:	b	11fc0 <__mempcpy_chk@plt+0xf54>
   1205c:	mov	r0, r4
   12060:	ldr	r1, [sp, #24]
   12064:	bl	15038 <__mempcpy_chk@plt+0x3fcc>
   12068:	b	11fc0 <__mempcpy_chk@plt+0xf54>
   1206c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12070:	add	fp, sp, #28
   12074:	sub	sp, sp, #12
   12078:	mov	r9, r0
   1207c:	mov	r7, r0
   12080:	ldrb	r5, [r7, #1]!
   12084:	cmp	r5, #120	; 0x78
   12088:	bne	12100 <__mempcpy_chk@plt+0x1094>
   1208c:	add	r4, r9, #2
   12090:	bl	10f58 <__ctype_b_loc@plt>
   12094:	ldr	r7, [r0]
   12098:	mov	r6, #0
   1209c:	mov	r5, #0
   120a0:	b	120b8 <__mempcpy_chk@plt+0x104c>
   120a4:	add	r0, r2, r0
   120a8:	add	r5, r0, r1
   120ac:	sub	r6, r6, #1
   120b0:	cmn	r6, #2
   120b4:	beq	12160 <__mempcpy_chk@plt+0x10f4>
   120b8:	ldrb	r0, [r4, -r6]
   120bc:	bl	1251c <__mempcpy_chk@plt+0x14b0>
   120c0:	add	r1, r7, r0, lsl #1
   120c4:	ldrb	r1, [r1, #1]
   120c8:	tst	r1, #16
   120cc:	beq	12158 <__mempcpy_chk@plt+0x10ec>
   120d0:	lsl	r1, r5, #4
   120d4:	sub	r2, r0, #97	; 0x61
   120d8:	uxtb	r3, r2
   120dc:	mvn	r2, #86	; 0x56
   120e0:	cmp	r3, #6
   120e4:	bcc	120a4 <__mempcpy_chk@plt+0x1038>
   120e8:	sub	r2, r0, #65	; 0x41
   120ec:	uxtb	r2, r2
   120f0:	cmp	r2, #6
   120f4:	mvn	r2, #47	; 0x2f
   120f8:	mvncc	r2, #54	; 0x36
   120fc:	b	120a4 <__mempcpy_chk@plt+0x1038>
   12100:	and	r0, r5, #248	; 0xf8
   12104:	cmp	r0, #48	; 0x30
   12108:	bne	12170 <__mempcpy_chk@plt+0x1104>
   1210c:	sub	r0, r5, #48	; 0x30
   12110:	clz	r0, r0
   12114:	lsr	r0, r0, #5
   12118:	and	r0, r0, r1
   1211c:	add	r1, r9, r0
   12120:	mov	r0, #0
   12124:	mov	r2, #1
   12128:	ldrb	r3, [r1, r2]
   1212c:	and	r7, r3, #248	; 0xf8
   12130:	cmp	r7, #48	; 0x30
   12134:	bne	1214c <__mempcpy_chk@plt+0x10e0>
   12138:	add	r0, r3, r0, lsl #3
   1213c:	sub	r0, r0, #48	; 0x30
   12140:	add	r2, r2, #1
   12144:	cmp	r2, #4
   12148:	bne	12128 <__mempcpy_chk@plt+0x10bc>
   1214c:	add	r7, r1, r2
   12150:	bl	11060 <putchar_unlocked@plt>
   12154:	b	1224c <__mempcpy_chk@plt+0x11e0>
   12158:	cmp	r6, #0
   1215c:	beq	122d8 <__mempcpy_chk@plt+0x126c>
   12160:	sub	r7, r4, r6
   12164:	mov	r0, r5
   12168:	bl	11060 <putchar_unlocked@plt>
   1216c:	b	1224c <__mempcpy_chk@plt+0x11e0>
   12170:	cmp	r5, #0
   12174:	beq	12230 <__mempcpy_chk@plt+0x11c4>
   12178:	movw	r0, #25607	; 0x6407
   1217c:	movt	r0, #1
   12180:	mov	r1, r5
   12184:	mov	r2, #12
   12188:	bl	10fdc <memchr@plt>
   1218c:	cmp	r0, #0
   12190:	beq	121a0 <__mempcpy_chk@plt+0x1134>
   12194:	mov	r0, r5
   12198:	bl	12520 <__mempcpy_chk@plt+0x14b4>
   1219c:	b	12248 <__mempcpy_chk@plt+0x11dc>
   121a0:	orr	r0, r5, #32
   121a4:	cmp	r0, #117	; 0x75
   121a8:	bne	12230 <__mempcpy_chk@plt+0x11c4>
   121ac:	mov	r8, #8
   121b0:	cmp	r5, #117	; 0x75
   121b4:	movweq	r8, #4
   121b8:	add	sl, r9, #2
   121bc:	bl	10f58 <__ctype_b_loc@plt>
   121c0:	ldr	r7, [r0]
   121c4:	mov	r4, #0
   121c8:	mov	r6, #0
   121cc:	b	121e8 <__mempcpy_chk@plt+0x117c>
   121d0:	add	r0, r2, r0
   121d4:	add	r6, r0, r1
   121d8:	sub	r4, r4, #1
   121dc:	add	r0, r8, r4
   121e0:	cmp	r0, #0
   121e4:	ble	1225c <__mempcpy_chk@plt+0x11f0>
   121e8:	ldrb	r0, [sl, -r4]
   121ec:	bl	1251c <__mempcpy_chk@plt+0x14b0>
   121f0:	add	r1, r7, r0, lsl #1
   121f4:	ldrb	r1, [r1, #1]
   121f8:	tst	r1, #16
   121fc:	beq	122d8 <__mempcpy_chk@plt+0x126c>
   12200:	lsl	r1, r6, #4
   12204:	sub	r2, r0, #97	; 0x61
   12208:	uxtb	r3, r2
   1220c:	mvn	r2, #86	; 0x56
   12210:	cmp	r3, #6
   12214:	bcc	121d0 <__mempcpy_chk@plt+0x1164>
   12218:	sub	r2, r0, #65	; 0x41
   1221c:	uxtb	r2, r2
   12220:	cmp	r2, #6
   12224:	mvn	r2, #47	; 0x2f
   12228:	mvncc	r2, #54	; 0x36
   1222c:	b	121d0 <__mempcpy_chk@plt+0x1164>
   12230:	mov	r0, #92	; 0x5c
   12234:	bl	11060 <putchar_unlocked@plt>
   12238:	ldrb	r0, [r7]
   1223c:	cmp	r0, #0
   12240:	beq	1224c <__mempcpy_chk@plt+0x11e0>
   12244:	bl	11060 <putchar_unlocked@plt>
   12248:	add	r7, r9, #2
   1224c:	mvn	r0, r9
   12250:	add	r0, r7, r0
   12254:	sub	sp, fp, #28
   12258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1225c:	cmp	r6, #159	; 0x9f
   12260:	bhi	12270 <__mempcpy_chk@plt+0x1204>
   12264:	cmp	r6, #36	; 0x24
   12268:	cmpne	r6, #96	; 0x60
   1226c:	bne	122a0 <__mempcpy_chk@plt+0x1234>
   12270:	mov	r0, r6
   12274:	bfc	r0, #0, #11
   12278:	cmp	r0, #55296	; 0xd800
   1227c:	beq	122a8 <__mempcpy_chk@plt+0x123c>
   12280:	sub	r7, sl, r4
   12284:	movw	r0, #28996	; 0x7144
   12288:	movt	r0, #2
   1228c:	ldr	r0, [r0]
   12290:	mov	r1, r6
   12294:	mov	r2, #0
   12298:	bl	145bc <__mempcpy_chk@plt+0x3550>
   1229c:	b	1224c <__mempcpy_chk@plt+0x11e0>
   122a0:	cmp	r6, #64	; 0x40
   122a4:	beq	12270 <__mempcpy_chk@plt+0x1204>
   122a8:	movw	r1, #25619	; 0x6413
   122ac:	movt	r1, #1
   122b0:	mov	r0, #0
   122b4:	mov	r2, #5
   122b8:	bl	10e80 <dcgettext@plt>
   122bc:	mov	r2, r0
   122c0:	str	r8, [sp]
   122c4:	str	r6, [sp, #4]
   122c8:	mov	r0, #1
   122cc:	mov	r1, #0
   122d0:	mov	r3, r5
   122d4:	bl	10ef8 <error@plt>
   122d8:	movw	r1, #25570	; 0x63e2
   122dc:	movt	r1, #1
   122e0:	mov	r0, #0
   122e4:	mov	r2, #5
   122e8:	bl	10e80 <dcgettext@plt>
   122ec:	mov	r2, r0
   122f0:	mov	r0, #1
   122f4:	mov	r1, #0
   122f8:	bl	10ef8 <error@plt>
   122fc:	push	{r4, r5, r6, sl, fp, lr}
   12300:	add	fp, sp, #16
   12304:	mov	r5, r1
   12308:	mov	r4, r0
   1230c:	bl	10f88 <__errno_location@plt>
   12310:	ldr	r6, [r0]
   12314:	cmp	r6, #0
   12318:	beq	1233c <__mempcpy_chk@plt+0x12d0>
   1231c:	mov	r0, r4
   12320:	bl	13fa8 <__mempcpy_chk@plt+0x2f3c>
   12324:	mov	r3, r0
   12328:	movw	r2, #25363	; 0x6313
   1232c:	movt	r2, #1
   12330:	mov	r0, #0
   12334:	mov	r1, r6
   12338:	b	12388 <__mempcpy_chk@plt+0x131c>
   1233c:	ldrb	r0, [r5]
   12340:	cmp	r0, #0
   12344:	beq	1239c <__mempcpy_chk@plt+0x1330>
   12348:	movw	r0, #25500	; 0x639c
   1234c:	movt	r0, #1
   12350:	movw	r1, #25529	; 0x63b9
   12354:	movt	r1, #1
   12358:	cmp	r4, r5
   1235c:	moveq	r1, r0
   12360:	mov	r0, #0
   12364:	mov	r2, #5
   12368:	bl	10e80 <dcgettext@plt>
   1236c:	mov	r5, r0
   12370:	mov	r0, r4
   12374:	bl	13fa8 <__mempcpy_chk@plt+0x2f3c>
   12378:	mov	r3, r0
   1237c:	mov	r0, #0
   12380:	mov	r1, #0
   12384:	mov	r2, r5
   12388:	bl	10ef8 <error@plt>
   1238c:	movw	r0, #29004	; 0x714c
   12390:	movt	r0, #2
   12394:	mov	r1, #1
   12398:	strb	r1, [r0]
   1239c:	pop	{r4, r5, r6, sl, fp, pc}
   123a0:	push	{r4, r5, r6, sl, fp, lr}
   123a4:	add	fp, sp, #16
   123a8:	sub	sp, sp, #8
   123ac:	mov	r4, r0
   123b0:	ldrb	r0, [r0]
   123b4:	cmp	r0, #39	; 0x27
   123b8:	cmpne	r0, #34	; 0x22
   123bc:	bne	12420 <__mempcpy_chk@plt+0x13b4>
   123c0:	ldrb	r5, [r4, #1]
   123c4:	cmp	r5, #0
   123c8:	beq	12420 <__mempcpy_chk@plt+0x13b4>
   123cc:	ldrb	r0, [r4, #2]!
   123d0:	mov	r6, #0
   123d4:	cmp	r0, #0
   123d8:	beq	12450 <__mempcpy_chk@plt+0x13e4>
   123dc:	movw	r0, #29005	; 0x714d
   123e0:	movt	r0, #2
   123e4:	ldrb	r0, [r0]
   123e8:	cmp	r0, #0
   123ec:	bne	12450 <__mempcpy_chk@plt+0x13e4>
   123f0:	mov	r6, #0
   123f4:	movw	r1, #25427	; 0x6353
   123f8:	movt	r1, #1
   123fc:	mov	r0, #0
   12400:	mov	r2, #5
   12404:	bl	10e80 <dcgettext@plt>
   12408:	mov	r2, r0
   1240c:	mov	r0, #0
   12410:	mov	r1, #0
   12414:	mov	r3, r4
   12418:	bl	10ef8 <error@plt>
   1241c:	b	12450 <__mempcpy_chk@plt+0x13e4>
   12420:	bl	10f88 <__errno_location@plt>
   12424:	mov	r1, #0
   12428:	str	r1, [r0]
   1242c:	add	r1, sp, #4
   12430:	mov	r0, r4
   12434:	mov	r2, #0
   12438:	bl	10fc4 <strtoumax@plt>
   1243c:	mov	r5, r0
   12440:	mov	r6, r1
   12444:	ldr	r1, [sp, #4]
   12448:	mov	r0, r4
   1244c:	bl	122fc <__mempcpy_chk@plt+0x1290>
   12450:	mov	r0, r5
   12454:	mov	r1, r6
   12458:	sub	sp, fp, #16
   1245c:	pop	{r4, r5, r6, sl, fp, pc}
   12460:	push	{r4, sl, fp, lr}
   12464:	add	fp, sp, #8
   12468:	vpush	{d8}
   1246c:	sub	sp, sp, #8
   12470:	mov	r4, r0
   12474:	ldrb	r0, [r0]
   12478:	cmp	r0, #39	; 0x27
   1247c:	cmpne	r0, #34	; 0x22
   12480:	bne	124e4 <__mempcpy_chk@plt+0x1478>
   12484:	ldrb	r0, [r4, #1]
   12488:	cmp	r0, #0
   1248c:	beq	124e4 <__mempcpy_chk@plt+0x1478>
   12490:	vmov	s0, r0
   12494:	vcvt.f64.u32	d8, s0
   12498:	ldrb	r0, [r4, #2]!
   1249c:	cmp	r0, #0
   124a0:	beq	1250c <__mempcpy_chk@plt+0x14a0>
   124a4:	movw	r0, #29005	; 0x714d
   124a8:	movt	r0, #2
   124ac:	ldrb	r0, [r0]
   124b0:	cmp	r0, #0
   124b4:	bne	1250c <__mempcpy_chk@plt+0x14a0>
   124b8:	movw	r1, #25427	; 0x6353
   124bc:	movt	r1, #1
   124c0:	mov	r0, #0
   124c4:	mov	r2, #5
   124c8:	bl	10e80 <dcgettext@plt>
   124cc:	mov	r2, r0
   124d0:	mov	r0, #0
   124d4:	mov	r1, #0
   124d8:	mov	r3, r4
   124dc:	bl	10ef8 <error@plt>
   124e0:	b	1250c <__mempcpy_chk@plt+0x14a0>
   124e4:	bl	10f88 <__errno_location@plt>
   124e8:	mov	r1, #0
   124ec:	str	r1, [r0]
   124f0:	add	r1, sp, #4
   124f4:	mov	r0, r4
   124f8:	bl	12604 <__mempcpy_chk@plt+0x1598>
   124fc:	vmov.f64	d8, d0
   12500:	ldr	r1, [sp, #4]
   12504:	mov	r0, r4
   12508:	bl	122fc <__mempcpy_chk@plt+0x1290>
   1250c:	vmov.f64	d0, d8
   12510:	sub	sp, fp, #16
   12514:	vpop	{d8}
   12518:	pop	{r4, sl, fp, pc}
   1251c:	bx	lr
   12520:	push	{fp, lr}
   12524:	mov	fp, sp
   12528:	mov	r1, r0
   1252c:	sub	r2, r0, #97	; 0x61
   12530:	cmp	r2, #21
   12534:	bhi	125f0 <__mempcpy_chk@plt+0x1584>
   12538:	mov	r0, #7
   1253c:	add	r3, pc, #0
   12540:	ldr	pc, [r3, r2, lsl #2]
   12544:	strdeq	r2, [r1], -r4
   12548:	muleq	r1, ip, r5
   1254c:	strdeq	r2, [r1], -ip
   12550:	strdeq	r2, [r1], -r0
   12554:	andeq	r2, r1, ip, asr #11
   12558:	ldrdeq	r2, [r1], -r8
   1255c:	strdeq	r2, [r1], -r0
   12560:	strdeq	r2, [r1], -r0
   12564:	strdeq	r2, [r1], -r0
   12568:	strdeq	r2, [r1], -r0
   1256c:	strdeq	r2, [r1], -r0
   12570:	strdeq	r2, [r1], -r0
   12574:	strdeq	r2, [r1], -r0
   12578:	andeq	r2, r1, r4, ror #11
   1257c:	strdeq	r2, [r1], -r0
   12580:	strdeq	r2, [r1], -r0
   12584:	strdeq	r2, [r1], -r0
   12588:	andeq	r2, r1, r8, lsr #11
   1258c:	strdeq	r2, [r1], -r0
   12590:			; <UNDEFINED> instruction: 0x000125b4
   12594:	strdeq	r2, [r1], -r0
   12598:	andeq	r2, r1, r0, asr #11
   1259c:	mov	r0, #8
   125a0:	pop	{fp, lr}
   125a4:	b	11060 <putchar_unlocked@plt>
   125a8:	mov	r0, #13
   125ac:	pop	{fp, lr}
   125b0:	b	11060 <putchar_unlocked@plt>
   125b4:	mov	r0, #9
   125b8:	pop	{fp, lr}
   125bc:	b	11060 <putchar_unlocked@plt>
   125c0:	mov	r0, #11
   125c4:	pop	{fp, lr}
   125c8:	b	11060 <putchar_unlocked@plt>
   125cc:	mov	r0, #27
   125d0:	pop	{fp, lr}
   125d4:	b	11060 <putchar_unlocked@plt>
   125d8:	mov	r0, #12
   125dc:	pop	{fp, lr}
   125e0:	b	11060 <putchar_unlocked@plt>
   125e4:	mov	r0, #10
   125e8:	pop	{fp, lr}
   125ec:	b	11060 <putchar_unlocked@plt>
   125f0:	mov	r0, r1
   125f4:	pop	{fp, lr}
   125f8:	b	11060 <putchar_unlocked@plt>
   125fc:	mov	r0, #0
   12600:	bl	10f64 <exit@plt>
   12604:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12608:	add	fp, sp, #24
   1260c:	vpush	{d8}
   12610:	sub	sp, sp, #8
   12614:	mov	r4, r1
   12618:	mov	r5, r0
   1261c:	add	r1, sp, #4
   12620:	bl	10e74 <strtold@plt>
   12624:	vmov.f64	d8, d0
   12628:	ldr	r7, [sp, #4]
   1262c:	ldrb	r0, [r7]
   12630:	cmp	r0, #0
   12634:	beq	12668 <__mempcpy_chk@plt+0x15fc>
   12638:	bl	10f88 <__errno_location@plt>
   1263c:	mov	r6, r0
   12640:	ldr	r8, [r0]
   12644:	mov	r1, sp
   12648:	mov	r0, r5
   1264c:	bl	155a4 <__mempcpy_chk@plt+0x4538>
   12650:	ldr	r0, [sp]
   12654:	cmp	r7, r0
   12658:	bcs	12664 <__mempcpy_chk@plt+0x15f8>
   1265c:	str	r0, [sp, #4]
   12660:	b	1266c <__mempcpy_chk@plt+0x1600>
   12664:	str	r8, [r6]
   12668:	vmov.f64	d0, d8
   1266c:	cmp	r4, #0
   12670:	ldrne	r0, [sp, #4]
   12674:	strne	r0, [r4]
   12678:	sub	sp, fp, #32
   1267c:	vpop	{d8}
   12680:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12684:	movw	r1, #29008	; 0x7150
   12688:	movt	r1, #2
   1268c:	str	r0, [r1]
   12690:	bx	lr
   12694:	movw	r1, #29012	; 0x7154
   12698:	movt	r1, #2
   1269c:	strb	r0, [r1]
   126a0:	bx	lr
   126a4:	push	{r4, r5, r6, sl, fp, lr}
   126a8:	add	fp, sp, #16
   126ac:	sub	sp, sp, #8
   126b0:	movw	r0, #28996	; 0x7144
   126b4:	movt	r0, #2
   126b8:	ldr	r0, [r0]
   126bc:	bl	15668 <__mempcpy_chk@plt+0x45fc>
   126c0:	cmp	r0, #0
   126c4:	beq	126ec <__mempcpy_chk@plt+0x1680>
   126c8:	movw	r0, #29012	; 0x7154
   126cc:	movt	r0, #2
   126d0:	ldrb	r0, [r0]
   126d4:	cmp	r0, #0
   126d8:	beq	1270c <__mempcpy_chk@plt+0x16a0>
   126dc:	bl	10f88 <__errno_location@plt>
   126e0:	ldr	r0, [r0]
   126e4:	cmp	r0, #32
   126e8:	bne	1270c <__mempcpy_chk@plt+0x16a0>
   126ec:	movw	r0, #28992	; 0x7140
   126f0:	movt	r0, #2
   126f4:	ldr	r0, [r0]
   126f8:	bl	15668 <__mempcpy_chk@plt+0x45fc>
   126fc:	cmp	r0, #0
   12700:	subeq	sp, fp, #16
   12704:	popeq	{r4, r5, r6, sl, fp, pc}
   12708:	b	1277c <__mempcpy_chk@plt+0x1710>
   1270c:	movw	r1, #25735	; 0x6487
   12710:	movt	r1, #1
   12714:	mov	r0, #0
   12718:	mov	r2, #5
   1271c:	bl	10e80 <dcgettext@plt>
   12720:	mov	r4, r0
   12724:	movw	r0, #29008	; 0x7150
   12728:	movt	r0, #2
   1272c:	ldr	r6, [r0]
   12730:	bl	10f88 <__errno_location@plt>
   12734:	ldr	r5, [r0]
   12738:	cmp	r6, #0
   1273c:	bne	12758 <__mempcpy_chk@plt+0x16ec>
   12740:	movw	r2, #25363	; 0x6313
   12744:	movt	r2, #1
   12748:	mov	r0, #0
   1274c:	mov	r1, r5
   12750:	mov	r3, r4
   12754:	b	12778 <__mempcpy_chk@plt+0x170c>
   12758:	mov	r0, r6
   1275c:	bl	13e58 <__mempcpy_chk@plt+0x2dec>
   12760:	mov	r3, r0
   12764:	str	r4, [sp]
   12768:	movw	r2, #25747	; 0x6493
   1276c:	movt	r2, #1
   12770:	mov	r0, #0
   12774:	mov	r1, r5
   12778:	bl	10ef8 <error@plt>
   1277c:	movw	r0, #28916	; 0x70f4
   12780:	movt	r0, #2
   12784:	ldr	r0, [r0]
   12788:	bl	10e50 <_exit@plt>
   1278c:	push	{r4, r5, r6, sl, fp, lr}
   12790:	add	fp, sp, #16
   12794:	mov	r4, r0
   12798:	bl	10f88 <__errno_location@plt>
   1279c:	mov	r5, r0
   127a0:	ldr	r6, [r0]
   127a4:	mov	r0, r4
   127a8:	bl	10e38 <free@plt>
   127ac:	str	r6, [r5]
   127b0:	pop	{r4, r5, r6, sl, fp, pc}
   127b4:	push	{r4, r5, fp, lr}
   127b8:	add	fp, sp, #8
   127bc:	cmp	r0, #0
   127c0:	beq	12854 <__mempcpy_chk@plt+0x17e8>
   127c4:	mov	r4, r0
   127c8:	mov	r1, #47	; 0x2f
   127cc:	bl	11018 <strrchr@plt>
   127d0:	cmp	r0, #0
   127d4:	mov	r5, r4
   127d8:	addne	r5, r0, #1
   127dc:	sub	r0, r5, r4
   127e0:	cmp	r0, #7
   127e4:	blt	12838 <__mempcpy_chk@plt+0x17cc>
   127e8:	sub	r0, r5, #7
   127ec:	movw	r1, #25810	; 0x64d2
   127f0:	movt	r1, #1
   127f4:	mov	r2, #7
   127f8:	bl	11048 <strncmp@plt>
   127fc:	cmp	r0, #0
   12800:	bne	12838 <__mempcpy_chk@plt+0x17cc>
   12804:	movw	r1, #25818	; 0x64da
   12808:	movt	r1, #1
   1280c:	mov	r0, r5
   12810:	mov	r2, #3
   12814:	bl	11048 <strncmp@plt>
   12818:	cmp	r0, #0
   1281c:	beq	12828 <__mempcpy_chk@plt+0x17bc>
   12820:	mov	r4, r5
   12824:	b	12838 <__mempcpy_chk@plt+0x17cc>
   12828:	add	r4, r5, #3
   1282c:	movw	r0, #28984	; 0x7138
   12830:	movt	r0, #2
   12834:	str	r4, [r0]
   12838:	movw	r0, #28988	; 0x713c
   1283c:	movt	r0, #2
   12840:	str	r4, [r0]
   12844:	movw	r0, #29016	; 0x7158
   12848:	movt	r0, #2
   1284c:	str	r4, [r0]
   12850:	pop	{r4, r5, fp, pc}
   12854:	movw	r0, #28992	; 0x7140
   12858:	movt	r0, #2
   1285c:	ldr	r3, [r0]
   12860:	movw	r0, #25754	; 0x649a
   12864:	movt	r0, #1
   12868:	mov	r1, #55	; 0x37
   1286c:	mov	r2, #1
   12870:	bl	10eb0 <fwrite@plt>
   12874:	bl	11054 <abort@plt>
   12878:	push	{r4, r5, r6, sl, fp, lr}
   1287c:	add	fp, sp, #16
   12880:	mov	r4, r0
   12884:	movw	r0, #29024	; 0x7160
   12888:	movt	r0, #2
   1288c:	cmp	r4, #0
   12890:	moveq	r4, r0
   12894:	bl	10f88 <__errno_location@plt>
   12898:	mov	r5, r0
   1289c:	ldr	r6, [r0]
   128a0:	mov	r0, r4
   128a4:	mov	r1, #48	; 0x30
   128a8:	bl	14f54 <__mempcpy_chk@plt+0x3ee8>
   128ac:	str	r6, [r5]
   128b0:	pop	{r4, r5, r6, sl, fp, pc}
   128b4:	movw	r1, #29024	; 0x7160
   128b8:	movt	r1, #2
   128bc:	cmp	r0, #0
   128c0:	movne	r1, r0
   128c4:	ldr	r0, [r1]
   128c8:	bx	lr
   128cc:	movw	r2, #29024	; 0x7160
   128d0:	movt	r2, #2
   128d4:	cmp	r0, #0
   128d8:	movne	r2, r0
   128dc:	str	r1, [r2]
   128e0:	bx	lr
   128e4:	movw	r3, #29024	; 0x7160
   128e8:	movt	r3, #2
   128ec:	cmp	r0, #0
   128f0:	movne	r3, r0
   128f4:	ubfx	r0, r1, #5, #3
   128f8:	add	ip, r3, r0, lsl #2
   128fc:	ldr	r3, [ip, #8]
   12900:	and	r1, r1, #31
   12904:	mov	r0, #1
   12908:	and	r0, r0, r3, lsr r1
   1290c:	and	r2, r2, #1
   12910:	eor	r2, r0, r2
   12914:	eor	r1, r3, r2, lsl r1
   12918:	str	r1, [ip, #8]
   1291c:	bx	lr
   12920:	movw	r2, #29024	; 0x7160
   12924:	movt	r2, #2
   12928:	cmp	r0, #0
   1292c:	movne	r2, r0
   12930:	ldr	r0, [r2, #4]
   12934:	str	r1, [r2, #4]
   12938:	bx	lr
   1293c:	push	{fp, lr}
   12940:	mov	fp, sp
   12944:	movw	r3, #29024	; 0x7160
   12948:	movt	r3, #2
   1294c:	cmp	r0, #0
   12950:	movne	r3, r0
   12954:	mov	r0, #10
   12958:	str	r0, [r3]
   1295c:	cmp	r1, #0
   12960:	cmpne	r2, #0
   12964:	bne	1296c <__mempcpy_chk@plt+0x1900>
   12968:	bl	11054 <abort@plt>
   1296c:	str	r1, [r3, #40]	; 0x28
   12970:	str	r2, [r3, #44]	; 0x2c
   12974:	pop	{fp, pc}
   12978:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1297c:	add	fp, sp, #28
   12980:	sub	sp, sp, #20
   12984:	mov	r8, r3
   12988:	mov	r9, r2
   1298c:	mov	sl, r1
   12990:	mov	r7, r0
   12994:	ldr	r0, [fp, #8]
   12998:	movw	r5, #29024	; 0x7160
   1299c:	movt	r5, #2
   129a0:	cmp	r0, #0
   129a4:	movne	r5, r0
   129a8:	bl	10f88 <__errno_location@plt>
   129ac:	mov	r4, r0
   129b0:	ldm	r5, {r0, r1}
   129b4:	ldr	r2, [r5, #40]	; 0x28
   129b8:	ldr	r3, [r5, #44]	; 0x2c
   129bc:	ldr	r6, [r4]
   129c0:	add	r5, r5, #8
   129c4:	stm	sp, {r0, r1, r5}
   129c8:	str	r2, [sp, #12]
   129cc:	str	r3, [sp, #16]
   129d0:	mov	r0, r7
   129d4:	mov	r1, sl
   129d8:	mov	r2, r9
   129dc:	mov	r3, r8
   129e0:	bl	129f0 <__mempcpy_chk@plt+0x1984>
   129e4:	str	r6, [r4]
   129e8:	sub	sp, fp, #28
   129ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129f4:	add	fp, sp, #28
   129f8:	sub	sp, sp, #156	; 0x9c
   129fc:	mov	r9, r3
   12a00:	mov	r7, r1
   12a04:	mov	r6, r0
   12a08:	str	r2, [fp, #-80]	; 0xffffffb0
   12a0c:	add	r0, r2, #1
   12a10:	str	r0, [sp, #76]	; 0x4c
   12a14:	ldr	r0, [fp, #12]
   12a18:	and	r1, r0, #1
   12a1c:	str	r1, [sp, #40]	; 0x28
   12a20:	and	r1, r0, #4
   12a24:	str	r1, [sp, #36]	; 0x24
   12a28:	ubfx	r4, r0, #1, #1
   12a2c:	bl	10ec8 <__ctype_get_mb_cur_max@plt>
   12a30:	str	r0, [sp, #44]	; 0x2c
   12a34:	ldr	r0, [fp, #24]
   12a38:	str	r0, [sp, #88]	; 0x58
   12a3c:	ldr	r0, [fp, #20]
   12a40:	str	r0, [sp, #80]	; 0x50
   12a44:	ldr	r1, [fp, #8]
   12a48:	mov	r0, #0
   12a4c:	str	r0, [sp, #84]	; 0x54
   12a50:	mov	r0, #0
   12a54:	str	r0, [fp, #-84]	; 0xffffffac
   12a58:	mov	r0, #0
   12a5c:	str	r0, [fp, #-72]	; 0xffffffb8
   12a60:	mov	r0, #0
   12a64:	mov	r2, #0
   12a68:	str	r2, [fp, #-56]	; 0xffffffc8
   12a6c:	mov	r2, #0
   12a70:	str	r2, [sp, #64]	; 0x40
   12a74:	mov	r2, #1
   12a78:	str	r2, [fp, #-48]	; 0xffffffd0
   12a7c:	cmp	r1, #10
   12a80:	bhi	139ac <__mempcpy_chk@plt+0x2940>
   12a84:	mov	sl, r7
   12a88:	mov	r7, r1
   12a8c:	add	r1, pc, #24
   12a90:	mov	r8, #0
   12a94:	mov	r2, #1
   12a98:	mov	r3, #0
   12a9c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12aa0:	mov	lr, r9
   12aa4:	mov	r5, r6
   12aa8:	ldr	pc, [r1, r7, lsl #2]
   12aac:	andeq	r2, r1, r0, lsl #23
   12ab0:	andeq	r2, r1, r0, asr #23
   12ab4:	muleq	r1, r0, fp
   12ab8:	andeq	r2, r1, r8, ror fp
   12abc:			; <UNDEFINED> instruction: 0x00012bb4
   12ac0:	andeq	r2, r1, r4, lsl ip
   12ac4:	andeq	r2, r1, r0, lsr #23
   12ac8:	andeq	r2, r1, r0, ror ip
   12acc:	ldrdeq	r2, [r1], -r8
   12ad0:	ldrdeq	r2, [r1], -r8
   12ad4:	andeq	r2, r1, r4, lsl #22
   12ad8:	movw	r0, #25902	; 0x652e
   12adc:	movt	r0, #1
   12ae0:	mov	r1, r7
   12ae4:	bl	13fb4 <__mempcpy_chk@plt+0x2f48>
   12ae8:	str	r0, [sp, #80]	; 0x50
   12aec:	movw	r0, #25904	; 0x6530
   12af0:	movt	r0, #1
   12af4:	mov	r1, r7
   12af8:	bl	13fb4 <__mempcpy_chk@plt+0x2f48>
   12afc:	mov	r5, r6
   12b00:	str	r0, [sp, #88]	; 0x58
   12b04:	mov	r8, #0
   12b08:	tst	r4, #1
   12b0c:	str	r7, [fp, #-64]	; 0xffffffc0
   12b10:	bne	12b48 <__mempcpy_chk@plt+0x1adc>
   12b14:	ldr	r0, [sp, #80]	; 0x50
   12b18:	ldrb	r0, [r0]
   12b1c:	cmp	r0, #0
   12b20:	beq	12b48 <__mempcpy_chk@plt+0x1adc>
   12b24:	ldr	r1, [sp, #80]	; 0x50
   12b28:	add	r1, r1, #1
   12b2c:	mov	r8, #0
   12b30:	cmp	r8, sl
   12b34:	strbcc	r0, [r5, r8]
   12b38:	ldrb	r0, [r1, r8]
   12b3c:	add	r8, r8, #1
   12b40:	cmp	r0, #0
   12b44:	bne	12b30 <__mempcpy_chk@plt+0x1ac4>
   12b48:	ldr	r7, [sp, #88]	; 0x58
   12b4c:	mov	r0, r7
   12b50:	bl	10f7c <strlen@plt>
   12b54:	mov	r5, r6
   12b58:	str	r0, [fp, #-72]	; 0xffffffb8
   12b5c:	str	r7, [fp, #-84]	; 0xffffffac
   12b60:	mov	r2, #1
   12b64:	mov	r3, r4
   12b68:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12b6c:	mov	lr, r9
   12b70:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12b74:	b	12c70 <__mempcpy_chk@plt+0x1c04>
   12b78:	mov	r0, #1
   12b7c:	b	12bc0 <__mempcpy_chk@plt+0x1b54>
   12b80:	mov	r7, #0
   12b84:	mov	r8, #0
   12b88:	mov	r2, r0
   12b8c:	b	12c6c <__mempcpy_chk@plt+0x1c00>
   12b90:	tst	r4, #1
   12b94:	bne	12bc0 <__mempcpy_chk@plt+0x1b54>
   12b98:	mov	r2, r0
   12b9c:	b	12be8 <__mempcpy_chk@plt+0x1b7c>
   12ba0:	mov	r0, #1
   12ba4:	str	r0, [fp, #-72]	; 0xffffffb8
   12ba8:	mov	r8, #0
   12bac:	mov	r7, #5
   12bb0:	b	12c2c <__mempcpy_chk@plt+0x1bc0>
   12bb4:	mov	r2, #1
   12bb8:	tst	r4, #1
   12bbc:	beq	12be8 <__mempcpy_chk@plt+0x1b7c>
   12bc0:	mov	r1, #1
   12bc4:	str	r1, [fp, #-72]	; 0xffffffb8
   12bc8:	mov	r8, #0
   12bcc:	mov	r7, #2
   12bd0:	movw	r1, #25904	; 0x6530
   12bd4:	movt	r1, #1
   12bd8:	str	r1, [fp, #-84]	; 0xffffffac
   12bdc:	mov	r2, r0
   12be0:	mov	r3, #1
   12be4:	b	12c70 <__mempcpy_chk@plt+0x1c04>
   12be8:	mov	r8, #1
   12bec:	mov	r7, #2
   12bf0:	cmp	sl, #0
   12bf4:	movne	r0, #39	; 0x27
   12bf8:	strbne	r0, [r5]
   12bfc:	movw	r0, #25904	; 0x6530
   12c00:	movt	r0, #1
   12c04:	str	r0, [fp, #-84]	; 0xffffffac
   12c08:	mov	r0, #1
   12c0c:	str	r0, [fp, #-72]	; 0xffffffb8
   12c10:	b	12c6c <__mempcpy_chk@plt+0x1c00>
   12c14:	mov	r7, #5
   12c18:	tst	r4, #1
   12c1c:	beq	12c44 <__mempcpy_chk@plt+0x1bd8>
   12c20:	mov	r0, #1
   12c24:	str	r0, [fp, #-72]	; 0xffffffb8
   12c28:	mov	r8, #0
   12c2c:	movw	r0, #25900	; 0x652c
   12c30:	movt	r0, #1
   12c34:	str	r0, [fp, #-84]	; 0xffffffac
   12c38:	mov	r2, #1
   12c3c:	mov	r3, #1
   12c40:	b	12c70 <__mempcpy_chk@plt+0x1c04>
   12c44:	cmp	sl, #0
   12c48:	movne	r0, #34	; 0x22
   12c4c:	strbne	r0, [r5]
   12c50:	mov	r8, #1
   12c54:	movw	r0, #25900	; 0x652c
   12c58:	movt	r0, #1
   12c5c:	str	r0, [fp, #-84]	; 0xffffffac
   12c60:	mov	r0, #1
   12c64:	str	r0, [fp, #-72]	; 0xffffffb8
   12c68:	mov	r2, #1
   12c6c:	mov	r3, #0
   12c70:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c74:	cmp	r0, #0
   12c78:	movwne	r0, #1
   12c7c:	and	r1, r0, r3
   12c80:	and	r1, r2, r1
   12c84:	str	r1, [sp, #56]	; 0x38
   12c88:	sub	r1, r7, #2
   12c8c:	clz	r1, r1
   12c90:	lsr	r1, r1, #5
   12c94:	and	r1, r1, r3
   12c98:	str	r1, [sp, #68]	; 0x44
   12c9c:	str	r7, [fp, #-64]	; 0xffffffc0
   12ca0:	subs	r1, r7, #2
   12ca4:	movwne	r1, #1
   12ca8:	eor	r4, r3, #1
   12cac:	str	r4, [fp, #-88]	; 0xffffffa8
   12cb0:	orr	r4, r1, r4
   12cb4:	str	r4, [sp, #72]	; 0x48
   12cb8:	and	r1, r1, r2
   12cbc:	and	r0, r0, r1
   12cc0:	str	r0, [fp, #-60]	; 0xffffffc4
   12cc4:	str	r3, [fp, #-76]	; 0xffffffb4
   12cc8:	orr	r0, r1, r3
   12ccc:	eor	r0, r0, #1
   12cd0:	ldr	r1, [fp, #16]
   12cd4:	clz	r1, r1
   12cd8:	lsr	r1, r1, #5
   12cdc:	orr	r0, r1, r0
   12ce0:	str	r0, [fp, #-68]	; 0xffffffbc
   12ce4:	str	r2, [sp, #92]	; 0x5c
   12ce8:	eor	r0, r2, #1
   12cec:	str	r0, [sp, #60]	; 0x3c
   12cf0:	mov	r7, #0
   12cf4:	cmn	lr, #1
   12cf8:	beq	12d08 <__mempcpy_chk@plt+0x1c9c>
   12cfc:	cmp	r7, lr
   12d00:	bne	12d14 <__mempcpy_chk@plt+0x1ca8>
   12d04:	b	13820 <__mempcpy_chk@plt+0x27b4>
   12d08:	ldrb	r0, [ip, r7]
   12d0c:	cmp	r0, #0
   12d10:	beq	13820 <__mempcpy_chk@plt+0x27b4>
   12d14:	mov	r9, #0
   12d18:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12d1c:	cmp	r0, #0
   12d20:	beq	12d54 <__mempcpy_chk@plt+0x1ce8>
   12d24:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12d28:	add	r4, r7, r0
   12d2c:	cmp	r0, #2
   12d30:	bcc	12d4c <__mempcpy_chk@plt+0x1ce0>
   12d34:	cmn	lr, #1
   12d38:	bne	12d4c <__mempcpy_chk@plt+0x1ce0>
   12d3c:	mov	r0, ip
   12d40:	bl	10f7c <strlen@plt>
   12d44:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12d48:	mov	lr, r0
   12d4c:	cmp	r4, lr
   12d50:	bls	12d60 <__mempcpy_chk@plt+0x1cf4>
   12d54:	mov	r0, #0
   12d58:	str	r0, [fp, #-52]	; 0xffffffcc
   12d5c:	b	12da4 <__mempcpy_chk@plt+0x1d38>
   12d60:	mov	r4, lr
   12d64:	add	r0, ip, r7
   12d68:	ldr	r1, [fp, #-84]	; 0xffffffac
   12d6c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12d70:	bl	10f70 <bcmp@plt>
   12d74:	cmp	r0, #0
   12d78:	mov	r1, r0
   12d7c:	movwne	r1, #1
   12d80:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12d84:	orr	r1, r1, r2
   12d88:	tst	r1, #1
   12d8c:	beq	138f4 <__mempcpy_chk@plt+0x2888>
   12d90:	clz	r0, r0
   12d94:	lsr	r0, r0, #5
   12d98:	str	r0, [fp, #-52]	; 0xffffffcc
   12d9c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12da0:	mov	lr, r4
   12da4:	ldrb	r4, [ip, r7]
   12da8:	cmp	r4, #126	; 0x7e
   12dac:	bhi	132dc <__mempcpy_chk@plt+0x2270>
   12db0:	mov	r6, #1
   12db4:	mov	r2, #110	; 0x6e
   12db8:	mov	r0, #97	; 0x61
   12dbc:	add	r3, pc, #4
   12dc0:	mov	r1, #0
   12dc4:	ldr	pc, [r3, r4, lsl #2]
   12dc8:	andeq	r3, r1, ip, lsr r1
   12dcc:	ldrdeq	r3, [r1], -ip
   12dd0:	ldrdeq	r3, [r1], -ip
   12dd4:	ldrdeq	r3, [r1], -ip
   12dd8:	ldrdeq	r3, [r1], -ip
   12ddc:	ldrdeq	r3, [r1], -ip
   12de0:	ldrdeq	r3, [r1], -ip
   12de4:			; <UNDEFINED> instruction: 0x000133b0
   12de8:	andeq	r3, r1, ip, lsl r1
   12dec:	andeq	r3, r1, r4, lsl r1
   12df0:	andeq	r3, r1, r8, lsr #2
   12df4:	andeq	r3, r1, r4, asr #4
   12df8:	andeq	r3, r1, ip, lsl #2
   12dfc:	andeq	r3, r1, r4, lsr #2
   12e00:	ldrdeq	r3, [r1], -ip
   12e04:	ldrdeq	r3, [r1], -ip
   12e08:	ldrdeq	r3, [r1], -ip
   12e0c:	ldrdeq	r3, [r1], -ip
   12e10:	ldrdeq	r3, [r1], -ip
   12e14:	ldrdeq	r3, [r1], -ip
   12e18:	ldrdeq	r3, [r1], -ip
   12e1c:	ldrdeq	r3, [r1], -ip
   12e20:	ldrdeq	r3, [r1], -ip
   12e24:	ldrdeq	r3, [r1], -ip
   12e28:	ldrdeq	r3, [r1], -ip
   12e2c:	ldrdeq	r3, [r1], -ip
   12e30:	ldrdeq	r3, [r1], -ip
   12e34:	ldrdeq	r3, [r1], -ip
   12e38:	ldrdeq	r3, [r1], -ip
   12e3c:	ldrdeq	r3, [r1], -ip
   12e40:	ldrdeq	r3, [r1], -ip
   12e44:	ldrdeq	r3, [r1], -ip
   12e48:	andeq	r3, r1, r0, asr #1
   12e4c:	andeq	r3, r1, r4, asr #1
   12e50:	andeq	r3, r1, r4, asr #1
   12e54:	andeq	r3, r1, ip, lsr #1
   12e58:	andeq	r3, r1, r4, asr #1
   12e5c:	andeq	r2, r1, r4, asr #31
   12e60:	andeq	r3, r1, r4, asr #1
   12e64:	andeq	r3, r1, ip, asr #4
   12e68:	andeq	r3, r1, r4, asr #1
   12e6c:	andeq	r3, r1, r4, asr #1
   12e70:	andeq	r3, r1, r4, asr #1
   12e74:	andeq	r2, r1, r4, asr #31
   12e78:	andeq	r2, r1, r4, asr #31
   12e7c:	andeq	r2, r1, r4, asr #31
   12e80:	andeq	r2, r1, r4, asr #31
   12e84:	andeq	r2, r1, r4, asr #31
   12e88:	andeq	r2, r1, r4, asr #31
   12e8c:	andeq	r2, r1, r4, asr #31
   12e90:	andeq	r2, r1, r4, asr #31
   12e94:	andeq	r2, r1, r4, asr #31
   12e98:	andeq	r2, r1, r4, asr #31
   12e9c:	andeq	r2, r1, r4, asr #31
   12ea0:	andeq	r2, r1, r4, asr #31
   12ea4:	andeq	r2, r1, r4, asr #31
   12ea8:	andeq	r2, r1, r4, asr #31
   12eac:	andeq	r2, r1, r4, asr #31
   12eb0:	andeq	r2, r1, r4, asr #31
   12eb4:	andeq	r3, r1, r4, asr #1
   12eb8:	andeq	r3, r1, r4, asr #1
   12ebc:	andeq	r3, r1, r4, asr #1
   12ec0:	andeq	r3, r1, r4, asr #1
   12ec4:	andeq	r3, r1, r4, lsl r2
   12ec8:	ldrdeq	r3, [r1], -ip
   12ecc:	andeq	r2, r1, r4, asr #31
   12ed0:	andeq	r2, r1, r4, asr #31
   12ed4:	andeq	r2, r1, r4, asr #31
   12ed8:	andeq	r2, r1, r4, asr #31
   12edc:	andeq	r2, r1, r4, asr #31
   12ee0:	andeq	r2, r1, r4, asr #31
   12ee4:	andeq	r2, r1, r4, asr #31
   12ee8:	andeq	r2, r1, r4, asr #31
   12eec:	andeq	r2, r1, r4, asr #31
   12ef0:	andeq	r2, r1, r4, asr #31
   12ef4:	andeq	r2, r1, r4, asr #31
   12ef8:	andeq	r2, r1, r4, asr #31
   12efc:	andeq	r2, r1, r4, asr #31
   12f00:	andeq	r2, r1, r4, asr #31
   12f04:	andeq	r2, r1, r4, asr #31
   12f08:	andeq	r2, r1, r4, asr #31
   12f0c:	andeq	r2, r1, r4, asr #31
   12f10:	andeq	r2, r1, r4, asr #31
   12f14:	andeq	r2, r1, r4, asr #31
   12f18:	andeq	r2, r1, r4, asr #31
   12f1c:	andeq	r2, r1, r4, asr #31
   12f20:	andeq	r2, r1, r4, asr #31
   12f24:	andeq	r2, r1, r4, asr #31
   12f28:	andeq	r2, r1, r4, asr #31
   12f2c:	andeq	r2, r1, r4, asr #31
   12f30:	andeq	r2, r1, r4, asr #31
   12f34:	andeq	r3, r1, r4, asr #1
   12f38:	andeq	r3, r1, ip, ror #1
   12f3c:	andeq	r2, r1, r4, asr #31
   12f40:	andeq	r3, r1, r4, asr #1
   12f44:	andeq	r2, r1, r4, asr #31
   12f48:	andeq	r3, r1, r4, asr #1
   12f4c:	andeq	r2, r1, r4, asr #31
   12f50:	andeq	r2, r1, r4, asr #31
   12f54:	andeq	r2, r1, r4, asr #31
   12f58:	andeq	r2, r1, r4, asr #31
   12f5c:	andeq	r2, r1, r4, asr #31
   12f60:	andeq	r2, r1, r4, asr #31
   12f64:	andeq	r2, r1, r4, asr #31
   12f68:	andeq	r2, r1, r4, asr #31
   12f6c:	andeq	r2, r1, r4, asr #31
   12f70:	andeq	r2, r1, r4, asr #31
   12f74:	andeq	r2, r1, r4, asr #31
   12f78:	andeq	r2, r1, r4, asr #31
   12f7c:	andeq	r2, r1, r4, asr #31
   12f80:	andeq	r2, r1, r4, asr #31
   12f84:	andeq	r2, r1, r4, asr #31
   12f88:	andeq	r2, r1, r4, asr #31
   12f8c:	andeq	r2, r1, r4, asr #31
   12f90:	andeq	r2, r1, r4, asr #31
   12f94:	andeq	r2, r1, r4, asr #31
   12f98:	andeq	r2, r1, r4, asr #31
   12f9c:	andeq	r2, r1, r4, asr #31
   12fa0:	andeq	r2, r1, r4, asr #31
   12fa4:	andeq	r2, r1, r4, asr #31
   12fa8:	andeq	r2, r1, r4, asr #31
   12fac:	andeq	r2, r1, r4, asr #31
   12fb0:	andeq	r2, r1, r4, asr #31
   12fb4:	andeq	r3, r1, r0, lsl #1
   12fb8:	andeq	r3, r1, r4, asr #1
   12fbc:	andeq	r3, r1, r0, lsl #1
   12fc0:	andeq	r3, r1, ip, lsr #1
   12fc4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12fc8:	tst	r0, #1
   12fcc:	bne	12ff8 <__mempcpy_chk@plt+0x1f8c>
   12fd0:	ubfx	r0, r4, #5, #3
   12fd4:	ldr	r1, [fp, #16]
   12fd8:	ldr	r0, [r1, r0, lsl #2]
   12fdc:	and	r1, r4, #31
   12fe0:	mov	r2, #1
   12fe4:	tst	r0, r2, lsl r1
   12fe8:	beq	12ff8 <__mempcpy_chk@plt+0x1f8c>
   12fec:	mov	r0, r4
   12ff0:	mov	r1, r6
   12ff4:	b	1300c <__mempcpy_chk@plt+0x1fa0>
   12ff8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12ffc:	cmp	r0, #0
   13000:	mov	r0, r4
   13004:	mov	r1, r6
   13008:	beq	13344 <__mempcpy_chk@plt+0x22d8>
   1300c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13010:	tst	r2, #1
   13014:	bne	13908 <__mempcpy_chk@plt+0x289c>
   13018:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1301c:	subs	r2, r2, #2
   13020:	movwne	r2, #1
   13024:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13028:	orr	r2, r2, r3
   1302c:	tst	r2, #1
   13030:	bne	1306c <__mempcpy_chk@plt+0x2000>
   13034:	cmp	r8, sl
   13038:	movcc	r2, #39	; 0x27
   1303c:	strbcc	r2, [r5, r8]
   13040:	add	r2, r8, #1
   13044:	cmp	r2, sl
   13048:	movcc	r3, #36	; 0x24
   1304c:	strbcc	r3, [r5, r2]
   13050:	add	r2, r8, #2
   13054:	cmp	r2, sl
   13058:	movcc	r3, #39	; 0x27
   1305c:	strbcc	r3, [r5, r2]
   13060:	add	r8, r8, #3
   13064:	mov	r2, #1
   13068:	str	r2, [fp, #-56]	; 0xffffffc8
   1306c:	cmp	r8, sl
   13070:	movcc	r2, #92	; 0x5c
   13074:	strbcc	r2, [r5, r8]
   13078:	add	r8, r8, #1
   1307c:	b	13388 <__mempcpy_chk@plt+0x231c>
   13080:	cmp	lr, #1
   13084:	beq	130ac <__mempcpy_chk@plt+0x2040>
   13088:	mov	r6, #0
   1308c:	cmn	lr, #1
   13090:	bne	130b8 <__mempcpy_chk@plt+0x204c>
   13094:	ldrb	r0, [ip, #1]
   13098:	cmp	r0, #0
   1309c:	beq	130ac <__mempcpy_chk@plt+0x2040>
   130a0:	mvn	lr, #0
   130a4:	mov	r9, #0
   130a8:	b	12fc4 <__mempcpy_chk@plt+0x1f58>
   130ac:	mov	r6, #0
   130b0:	cmp	r7, #0
   130b4:	beq	130c0 <__mempcpy_chk@plt+0x2054>
   130b8:	mov	r9, #0
   130bc:	b	12fc4 <__mempcpy_chk@plt+0x1f58>
   130c0:	mov	r1, #1
   130c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   130c8:	cmp	r0, #2
   130cc:	bne	130e4 <__mempcpy_chk@plt+0x2078>
   130d0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   130d4:	tst	r0, #1
   130d8:	mov	r6, r1
   130dc:	beq	12fc4 <__mempcpy_chk@plt+0x1f58>
   130e0:	b	13908 <__mempcpy_chk@plt+0x289c>
   130e4:	mov	r6, r1
   130e8:	b	12fc4 <__mempcpy_chk@plt+0x1f58>
   130ec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   130f0:	cmp	r0, #2
   130f4:	bne	13328 <__mempcpy_chk@plt+0x22bc>
   130f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   130fc:	tst	r0, #1
   13100:	bne	13908 <__mempcpy_chk@plt+0x289c>
   13104:	mov	r9, #0
   13108:	b	1333c <__mempcpy_chk@plt+0x22d0>
   1310c:	mov	r0, #102	; 0x66
   13110:	b	133b0 <__mempcpy_chk@plt+0x2344>
   13114:	mov	r2, #116	; 0x74
   13118:	b	13128 <__mempcpy_chk@plt+0x20bc>
   1311c:	mov	r0, #98	; 0x62
   13120:	b	133b0 <__mempcpy_chk@plt+0x2344>
   13124:	mov	r2, #114	; 0x72
   13128:	ldr	r0, [sp, #72]	; 0x48
   1312c:	tst	r0, #1
   13130:	mov	r0, r2
   13134:	bne	133b0 <__mempcpy_chk@plt+0x2344>
   13138:	b	13908 <__mempcpy_chk@plt+0x289c>
   1313c:	ldr	r0, [sp, #92]	; 0x5c
   13140:	tst	r0, #1
   13144:	beq	133cc <__mempcpy_chk@plt+0x2360>
   13148:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1314c:	tst	r0, #1
   13150:	bne	13908 <__mempcpy_chk@plt+0x289c>
   13154:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13158:	subs	r0, r0, #2
   1315c:	movwne	r0, #1
   13160:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13164:	orr	r0, r0, r1
   13168:	tst	r0, #1
   1316c:	bne	131a8 <__mempcpy_chk@plt+0x213c>
   13170:	cmp	r8, sl
   13174:	movcc	r0, #39	; 0x27
   13178:	strbcc	r0, [r5, r8]
   1317c:	add	r0, r8, #1
   13180:	cmp	r0, sl
   13184:	movcc	r1, #36	; 0x24
   13188:	strbcc	r1, [r5, r0]
   1318c:	add	r0, r8, #2
   13190:	cmp	r0, sl
   13194:	movcc	r1, #39	; 0x27
   13198:	strbcc	r1, [r5, r0]
   1319c:	add	r8, r8, #3
   131a0:	mov	r0, #1
   131a4:	str	r0, [fp, #-56]	; 0xffffffc8
   131a8:	cmp	r8, sl
   131ac:	movcc	r0, #92	; 0x5c
   131b0:	strbcc	r0, [r5, r8]
   131b4:	add	r0, r8, #1
   131b8:	mov	r6, #0
   131bc:	mov	r9, #1
   131c0:	mov	r4, #48	; 0x30
   131c4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   131c8:	cmp	r1, #2
   131cc:	beq	13590 <__mempcpy_chk@plt+0x2524>
   131d0:	add	r1, r7, #1
   131d4:	cmp	r1, lr
   131d8:	bcs	13590 <__mempcpy_chk@plt+0x2524>
   131dc:	ldrb	r1, [ip, r1]
   131e0:	sub	r1, r1, #48	; 0x30
   131e4:	uxtb	r1, r1
   131e8:	cmp	r1, #9
   131ec:	bhi	13590 <__mempcpy_chk@plt+0x2524>
   131f0:	cmp	r0, sl
   131f4:	movcc	r1, #48	; 0x30
   131f8:	strbcc	r1, [r5, r0]
   131fc:	add	r0, r8, #2
   13200:	cmp	r0, sl
   13204:	movcc	r1, #48	; 0x30
   13208:	strbcc	r1, [r5, r0]
   1320c:	add	r8, r8, #3
   13210:	b	12fc4 <__mempcpy_chk@plt+0x1f58>
   13214:	mov	r9, #0
   13218:	mov	r4, #63	; 0x3f
   1321c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13220:	cmp	r0, #5
   13224:	beq	13598 <__mempcpy_chk@plt+0x252c>
   13228:	cmp	r0, #2
   1322c:	bne	13640 <__mempcpy_chk@plt+0x25d4>
   13230:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13234:	tst	r0, #1
   13238:	mov	r6, #0
   1323c:	beq	12fc4 <__mempcpy_chk@plt+0x1f58>
   13240:	b	13908 <__mempcpy_chk@plt+0x289c>
   13244:	mov	r0, #118	; 0x76
   13248:	b	133b0 <__mempcpy_chk@plt+0x2344>
   1324c:	mov	r4, #39	; 0x27
   13250:	mov	r0, #1
   13254:	str	r0, [sp, #64]	; 0x40
   13258:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1325c:	cmp	r0, #2
   13260:	bne	133e8 <__mempcpy_chk@plt+0x237c>
   13264:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13268:	tst	r0, #1
   1326c:	bne	13908 <__mempcpy_chk@plt+0x289c>
   13270:	ldr	r2, [sp, #84]	; 0x54
   13274:	cmp	r2, #0
   13278:	mov	r0, r2
   1327c:	movwne	r0, #1
   13280:	clz	r1, sl
   13284:	lsr	r1, r1, #5
   13288:	orrs	r0, r0, r1
   1328c:	moveq	r2, sl
   13290:	str	r2, [sp, #84]	; 0x54
   13294:	moveq	sl, r0
   13298:	cmp	r8, sl
   1329c:	movcc	r0, #39	; 0x27
   132a0:	strbcc	r0, [r5, r8]
   132a4:	add	r0, r8, #1
   132a8:	cmp	r0, sl
   132ac:	movcc	r1, #92	; 0x5c
   132b0:	strbcc	r1, [r5, r0]
   132b4:	add	r0, r8, #2
   132b8:	cmp	r0, sl
   132bc:	movcc	r1, #39	; 0x27
   132c0:	strbcc	r1, [r5, r0]
   132c4:	add	r8, r8, #3
   132c8:	mov	r0, #0
   132cc:	str	r0, [fp, #-56]	; 0xffffffc8
   132d0:	mov	r9, #0
   132d4:	mov	r6, #1
   132d8:	b	12fc4 <__mempcpy_chk@plt+0x1f58>
   132dc:	ldr	r0, [sp, #44]	; 0x2c
   132e0:	cmp	r0, #1
   132e4:	bne	133f0 <__mempcpy_chk@plt+0x2384>
   132e8:	str	lr, [sp, #32]
   132ec:	bl	10f58 <__ctype_b_loc@plt>
   132f0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   132f4:	ldr	r0, [r0]
   132f8:	add	r0, r0, r4, lsl #1
   132fc:	ldrb	r0, [r0, #1]
   13300:	ubfx	r6, r0, #6, #1
   13304:	mov	r2, #1
   13308:	ldr	r0, [sp, #60]	; 0x3c
   1330c:	orr	r1, r6, r0
   13310:	cmp	r2, #1
   13314:	bhi	13648 <__mempcpy_chk@plt+0x25dc>
   13318:	tst	r1, #1
   1331c:	beq	13648 <__mempcpy_chk@plt+0x25dc>
   13320:	ldr	lr, [sp, #32]
   13324:	b	12fc4 <__mempcpy_chk@plt+0x1f58>
   13328:	mov	r9, #0
   1332c:	mov	r0, #92	; 0x5c
   13330:	ldr	r1, [sp, #56]	; 0x38
   13334:	cmp	r1, #0
   13338:	beq	133b0 <__mempcpy_chk@plt+0x2344>
   1333c:	mov	r4, #92	; 0x5c
   13340:	mov	r6, #0
   13344:	cmp	r9, #0
   13348:	bne	13380 <__mempcpy_chk@plt+0x2314>
   1334c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13350:	tst	r0, #1
   13354:	beq	13380 <__mempcpy_chk@plt+0x2314>
   13358:	cmp	r8, sl
   1335c:	movcc	r0, #39	; 0x27
   13360:	strbcc	r0, [r5, r8]
   13364:	add	r0, r8, #1
   13368:	cmp	r0, sl
   1336c:	movcc	r1, #39	; 0x27
   13370:	strbcc	r1, [r5, r0]
   13374:	add	r8, r8, #2
   13378:	mov	r0, #0
   1337c:	str	r0, [fp, #-56]	; 0xffffffc8
   13380:	mov	r1, r6
   13384:	mov	r0, r4
   13388:	cmp	r8, sl
   1338c:	strbcc	r0, [r5, r8]
   13390:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13394:	and	r0, r0, r1
   13398:	str	r0, [fp, #-48]	; 0xffffffd0
   1339c:	add	r8, r8, #1
   133a0:	add	r7, r7, #1
   133a4:	cmn	lr, #1
   133a8:	bne	12cfc <__mempcpy_chk@plt+0x1c90>
   133ac:	b	12d08 <__mempcpy_chk@plt+0x1c9c>
   133b0:	mov	r9, #0
   133b4:	ldr	r1, [sp, #92]	; 0x5c
   133b8:	tst	r1, #1
   133bc:	mov	r6, #0
   133c0:	mov	r1, #0
   133c4:	beq	12fc4 <__mempcpy_chk@plt+0x1f58>
   133c8:	b	1300c <__mempcpy_chk@plt+0x1fa0>
   133cc:	mov	r4, #0
   133d0:	ldr	r0, [sp, #40]	; 0x28
   133d4:	cmp	r0, #0
   133d8:	mov	r9, #0
   133dc:	mov	r6, #0
   133e0:	beq	12fc4 <__mempcpy_chk@plt+0x1f58>
   133e4:	b	133a0 <__mempcpy_chk@plt+0x2334>
   133e8:	mov	r6, #1
   133ec:	b	12fc4 <__mempcpy_chk@plt+0x1f58>
   133f0:	mov	r0, #0
   133f4:	str	r0, [fp, #-36]	; 0xffffffdc
   133f8:	str	r0, [fp, #-40]	; 0xffffffd8
   133fc:	cmn	lr, #1
   13400:	bne	13414 <__mempcpy_chk@plt+0x23a8>
   13404:	mov	r0, ip
   13408:	bl	10f7c <strlen@plt>
   1340c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13410:	mov	lr, r0
   13414:	ldr	r0, [sp, #76]	; 0x4c
   13418:	add	r0, r0, r7
   1341c:	str	r0, [sp, #24]
   13420:	mov	r6, #1
   13424:	mov	r2, #0
   13428:	sub	r0, fp, #40	; 0x28
   1342c:	mov	r3, r0
   13430:	str	r5, [sp, #28]
   13434:	str	lr, [sp, #32]
   13438:	b	1347c <__mempcpy_chk@plt+0x2410>
   1343c:	ldr	r5, [sp, #52]	; 0x34
   13440:	add	r5, r0, r5
   13444:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13448:	bl	10ea4 <iswprint@plt>
   1344c:	cmp	r0, #0
   13450:	movwne	r0, #1
   13454:	and	r6, r6, r0
   13458:	sub	r0, fp, #40	; 0x28
   1345c:	bl	10e68 <mbsinit@plt>
   13460:	sub	r3, fp, #40	; 0x28
   13464:	mov	r2, r5
   13468:	ldr	lr, [sp, #32]
   1346c:	cmp	r0, #0
   13470:	ldr	r5, [sp, #28]
   13474:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13478:	bne	13308 <__mempcpy_chk@plt+0x229c>
   1347c:	str	r2, [sp, #52]	; 0x34
   13480:	add	r0, r2, r7
   13484:	add	r1, ip, r0
   13488:	str	r0, [sp, #48]	; 0x30
   1348c:	sub	r2, lr, r0
   13490:	sub	r0, fp, #44	; 0x2c
   13494:	bl	15924 <__mempcpy_chk@plt+0x48b8>
   13498:	cmp	r0, #0
   1349c:	beq	13814 <__mempcpy_chk@plt+0x27a8>
   134a0:	cmn	r0, #1
   134a4:	beq	137d0 <__mempcpy_chk@plt+0x2764>
   134a8:	cmn	r0, #2
   134ac:	ldr	lr, [sp, #32]
   134b0:	beq	137d8 <__mempcpy_chk@plt+0x276c>
   134b4:	cmp	r0, #2
   134b8:	mov	r1, #0
   134bc:	movwcc	r1, #1
   134c0:	ldr	r2, [sp, #68]	; 0x44
   134c4:	eor	r2, r2, #1
   134c8:	orrs	r1, r2, r1
   134cc:	bne	1343c <__mempcpy_chk@plt+0x23d0>
   134d0:	ldr	r1, [sp, #52]	; 0x34
   134d4:	ldr	r2, [sp, #24]
   134d8:	add	r1, r2, r1
   134dc:	sub	r2, r0, #1
   134e0:	b	134f0 <__mempcpy_chk@plt+0x2484>
   134e4:	add	r1, r1, #1
   134e8:	subs	r2, r2, #1
   134ec:	beq	1343c <__mempcpy_chk@plt+0x23d0>
   134f0:	ldrb	r3, [r1]
   134f4:	sub	r3, r3, #91	; 0x5b
   134f8:	cmp	r3, #33	; 0x21
   134fc:	bhi	134e4 <__mempcpy_chk@plt+0x2478>
   13500:	add	r5, pc, #0
   13504:	ldr	pc, [r5, r3, lsl #2]
   13508:	andeq	r3, r1, r0, lsl #18
   1350c:	andeq	r3, r1, r0, lsl #18
   13510:	andeq	r3, r1, r4, ror #9
   13514:	andeq	r3, r1, r0, lsl #18
   13518:	andeq	r3, r1, r4, ror #9
   1351c:	andeq	r3, r1, r0, lsl #18
   13520:	andeq	r3, r1, r4, ror #9
   13524:	andeq	r3, r1, r4, ror #9
   13528:	andeq	r3, r1, r4, ror #9
   1352c:	andeq	r3, r1, r4, ror #9
   13530:	andeq	r3, r1, r4, ror #9
   13534:	andeq	r3, r1, r4, ror #9
   13538:	andeq	r3, r1, r4, ror #9
   1353c:	andeq	r3, r1, r4, ror #9
   13540:	andeq	r3, r1, r4, ror #9
   13544:	andeq	r3, r1, r4, ror #9
   13548:	andeq	r3, r1, r4, ror #9
   1354c:	andeq	r3, r1, r4, ror #9
   13550:	andeq	r3, r1, r4, ror #9
   13554:	andeq	r3, r1, r4, ror #9
   13558:	andeq	r3, r1, r4, ror #9
   1355c:	andeq	r3, r1, r4, ror #9
   13560:	andeq	r3, r1, r4, ror #9
   13564:	andeq	r3, r1, r4, ror #9
   13568:	andeq	r3, r1, r4, ror #9
   1356c:	andeq	r3, r1, r4, ror #9
   13570:	andeq	r3, r1, r4, ror #9
   13574:	andeq	r3, r1, r4, ror #9
   13578:	andeq	r3, r1, r4, ror #9
   1357c:	andeq	r3, r1, r4, ror #9
   13580:	andeq	r3, r1, r4, ror #9
   13584:	andeq	r3, r1, r4, ror #9
   13588:	andeq	r3, r1, r4, ror #9
   1358c:	andeq	r3, r1, r0, lsl #18
   13590:	mov	r8, r0
   13594:	b	12fc4 <__mempcpy_chk@plt+0x1f58>
   13598:	ldr	r0, [sp, #36]	; 0x24
   1359c:	cmp	r0, #0
   135a0:	beq	13640 <__mempcpy_chk@plt+0x25d4>
   135a4:	add	r0, r7, #2
   135a8:	cmp	r0, lr
   135ac:	bcs	13640 <__mempcpy_chk@plt+0x25d4>
   135b0:	add	r1, r7, ip
   135b4:	ldrb	r1, [r1, #1]
   135b8:	cmp	r1, #63	; 0x3f
   135bc:	bne	13640 <__mempcpy_chk@plt+0x25d4>
   135c0:	ldrb	r1, [ip, r0]
   135c4:	sub	r2, r1, #33	; 0x21
   135c8:	cmp	r2, #29
   135cc:	bhi	13640 <__mempcpy_chk@plt+0x25d4>
   135d0:	mov	r3, #1
   135d4:	movw	r6, #20929	; 0x51c1
   135d8:	movt	r6, #14336	; 0x3800
   135dc:	tst	r6, r3, lsl r2
   135e0:	beq	13640 <__mempcpy_chk@plt+0x25d4>
   135e4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   135e8:	tst	r2, #1
   135ec:	bne	13908 <__mempcpy_chk@plt+0x289c>
   135f0:	cmp	r8, sl
   135f4:	movcc	r2, #63	; 0x3f
   135f8:	strbcc	r2, [r5, r8]
   135fc:	add	r2, r8, #1
   13600:	cmp	r2, sl
   13604:	movcc	r3, #34	; 0x22
   13608:	strbcc	r3, [r5, r2]
   1360c:	add	r2, r8, #2
   13610:	cmp	r2, sl
   13614:	movcc	r3, #34	; 0x22
   13618:	strbcc	r3, [r5, r2]
   1361c:	add	r2, r8, #3
   13620:	cmp	r2, sl
   13624:	movcc	r3, #63	; 0x3f
   13628:	strbcc	r3, [r5, r2]
   1362c:	add	r8, r8, #4
   13630:	mov	r7, r0
   13634:	mov	r4, r1
   13638:	mov	r6, #0
   1363c:	b	12fc4 <__mempcpy_chk@plt+0x1f58>
   13640:	mov	r6, #0
   13644:	b	12fc4 <__mempcpy_chk@plt+0x1f58>
   13648:	add	r0, r2, r7
   1364c:	str	r0, [sp, #52]	; 0x34
   13650:	mov	r2, #0
   13654:	ldr	lr, [sp, #32]
   13658:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1365c:	str	r1, [sp, #48]	; 0x30
   13660:	tst	r1, #1
   13664:	bne	13740 <__mempcpy_chk@plt+0x26d4>
   13668:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1366c:	tst	r1, #1
   13670:	bne	13908 <__mempcpy_chk@plt+0x289c>
   13674:	mov	r3, r0
   13678:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1367c:	subs	r1, r0, #2
   13680:	movwne	r1, #1
   13684:	orr	r1, r1, r3
   13688:	tst	r1, #1
   1368c:	bne	136c4 <__mempcpy_chk@plt+0x2658>
   13690:	cmp	r8, sl
   13694:	movcc	r0, #39	; 0x27
   13698:	strbcc	r0, [r5, r8]
   1369c:	add	r2, r8, #1
   136a0:	cmp	r2, sl
   136a4:	movcc	r0, #36	; 0x24
   136a8:	strbcc	r0, [r5, r2]
   136ac:	add	r2, r8, #2
   136b0:	cmp	r2, sl
   136b4:	movcc	r0, #39	; 0x27
   136b8:	strbcc	r0, [r5, r2]
   136bc:	add	r8, r8, #3
   136c0:	mov	r3, #1
   136c4:	cmp	r8, sl
   136c8:	movcc	r1, #92	; 0x5c
   136cc:	strbcc	r1, [r5, r8]
   136d0:	add	r2, r8, #1
   136d4:	cmp	r2, sl
   136d8:	bcs	136ec <__mempcpy_chk@plt+0x2680>
   136dc:	uxtb	r1, r4
   136e0:	mov	r0, #48	; 0x30
   136e4:	orr	r1, r0, r1, lsr #6
   136e8:	strb	r1, [r5, r2]
   136ec:	add	r2, r8, #2
   136f0:	cmp	r2, sl
   136f4:	lsrcc	r1, r4, #3
   136f8:	movcc	r0, #6
   136fc:	bficc	r1, r0, #3, #29
   13700:	strbcc	r1, [r5, r2]
   13704:	mov	r0, #6
   13708:	bfi	r4, r0, #3, #29
   1370c:	add	r8, r8, #3
   13710:	mov	r2, #1
   13714:	mov	r0, r3
   13718:	b	13764 <__mempcpy_chk@plt+0x26f8>
   1371c:	cmp	r8, sl
   13720:	strbcc	r4, [r5, r8]
   13724:	ldr	r1, [sp, #76]	; 0x4c
   13728:	ldrb	r4, [r1, r7]
   1372c:	add	r8, r8, #1
   13730:	mov	r7, r3
   13734:	ldr	r1, [sp, #48]	; 0x30
   13738:	tst	r1, #1
   1373c:	beq	13668 <__mempcpy_chk@plt+0x25fc>
   13740:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13744:	tst	r1, #1
   13748:	beq	1375c <__mempcpy_chk@plt+0x26f0>
   1374c:	cmp	r8, sl
   13750:	movcc	r1, #92	; 0x5c
   13754:	strbcc	r1, [r5, r8]
   13758:	add	r8, r8, #1
   1375c:	mov	r1, #0
   13760:	str	r1, [fp, #-52]	; 0xffffffcc
   13764:	and	r9, r2, #1
   13768:	add	r3, r7, #1
   1376c:	ldr	r1, [sp, #52]	; 0x34
   13770:	cmp	r1, r3
   13774:	bls	137b8 <__mempcpy_chk@plt+0x274c>
   13778:	cmp	r9, #0
   1377c:	movwne	r9, #1
   13780:	mvn	r1, r0
   13784:	orr	r1, r1, r9
   13788:	tst	r1, #1
   1378c:	bne	1371c <__mempcpy_chk@plt+0x26b0>
   13790:	cmp	r8, sl
   13794:	movcc	r1, #39	; 0x27
   13798:	strbcc	r1, [r5, r8]
   1379c:	add	r1, r8, #1
   137a0:	cmp	r1, sl
   137a4:	movcc	r0, #39	; 0x27
   137a8:	strbcc	r0, [r5, r1]
   137ac:	add	r8, r8, #2
   137b0:	mov	r0, #0
   137b4:	b	1371c <__mempcpy_chk@plt+0x26b0>
   137b8:	str	r0, [fp, #-56]	; 0xffffffc8
   137bc:	cmp	r9, #0
   137c0:	movwne	r9, #1
   137c4:	cmp	r9, #0
   137c8:	beq	1334c <__mempcpy_chk@plt+0x22e0>
   137cc:	b	13380 <__mempcpy_chk@plt+0x2314>
   137d0:	mov	r6, #0
   137d4:	b	13814 <__mempcpy_chk@plt+0x27a8>
   137d8:	mov	r6, #0
   137dc:	ldr	r0, [sp, #48]	; 0x30
   137e0:	cmp	r0, lr
   137e4:	bcs	13814 <__mempcpy_chk@plt+0x27a8>
   137e8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   137ec:	add	r0, ip, r7
   137f0:	ldr	r2, [sp, #52]	; 0x34
   137f4:	ldrb	r1, [r0, r2]
   137f8:	cmp	r1, #0
   137fc:	beq	13308 <__mempcpy_chk@plt+0x229c>
   13800:	add	r2, r2, #1
   13804:	add	r1, r7, r2
   13808:	cmp	r1, lr
   1380c:	bcc	137f4 <__mempcpy_chk@plt+0x2788>
   13810:	b	13308 <__mempcpy_chk@plt+0x229c>
   13814:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13818:	ldr	r2, [sp, #52]	; 0x34
   1381c:	b	13308 <__mempcpy_chk@plt+0x229c>
   13820:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13824:	eor	r0, r1, #2
   13828:	orr	r0, r0, r8
   1382c:	clz	r0, r0
   13830:	lsr	r0, r0, #5
   13834:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13838:	tst	r3, r0
   1383c:	bne	13908 <__mempcpy_chk@plt+0x289c>
   13840:	mov	r6, r5
   13844:	subs	r0, r1, #2
   13848:	movwne	r0, #1
   1384c:	orr	r0, r3, r0
   13850:	tst	r0, #1
   13854:	ldr	r2, [sp, #92]	; 0x5c
   13858:	ldreq	r0, [sp, #64]	; 0x40
   1385c:	eoreq	r0, r0, #1
   13860:	tsteq	r0, #1
   13864:	bne	138a4 <__mempcpy_chk@plt+0x2838>
   13868:	mov	r9, lr
   1386c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13870:	tst	r0, #1
   13874:	bne	13970 <__mempcpy_chk@plt+0x2904>
   13878:	ldr	r0, [sp, #84]	; 0x54
   1387c:	cmp	r0, #0
   13880:	beq	138a4 <__mempcpy_chk@plt+0x2838>
   13884:	mov	r0, #0
   13888:	str	r0, [fp, #-48]	; 0xffffffd0
   1388c:	mov	r1, #2
   13890:	cmp	sl, #0
   13894:	mov	r0, r2
   13898:	mov	r4, r3
   1389c:	ldr	r7, [sp, #84]	; 0x54
   138a0:	beq	12a7c <__mempcpy_chk@plt+0x1a10>
   138a4:	ldr	r1, [fp, #-84]	; 0xffffffac
   138a8:	clz	r0, r1
   138ac:	lsr	r0, r0, #5
   138b0:	orr	r0, r0, r3
   138b4:	tst	r0, #1
   138b8:	bne	138e4 <__mempcpy_chk@plt+0x2878>
   138bc:	ldrb	r0, [r1]
   138c0:	cmp	r0, #0
   138c4:	beq	138e4 <__mempcpy_chk@plt+0x2878>
   138c8:	add	r1, r1, #1
   138cc:	cmp	r8, sl
   138d0:	strbcc	r0, [r6, r8]
   138d4:	add	r8, r8, #1
   138d8:	ldrb	r0, [r1], #1
   138dc:	cmp	r0, #0
   138e0:	bne	138cc <__mempcpy_chk@plt+0x2860>
   138e4:	cmp	r8, sl
   138e8:	movcc	r0, #0
   138ec:	strbcc	r0, [r6, r8]
   138f0:	b	13964 <__mempcpy_chk@plt+0x28f8>
   138f4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   138f8:	mov	lr, r4
   138fc:	b	13908 <__mempcpy_chk@plt+0x289c>
   13900:	ldr	r5, [sp, #28]
   13904:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13908:	mov	r0, #0
   1390c:	ldr	r1, [fp, #12]
   13910:	bic	r1, r1, #2
   13914:	mov	r2, #2
   13918:	ldr	r3, [sp, #92]	; 0x5c
   1391c:	tst	r3, #1
   13920:	movwne	r2, #4
   13924:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13928:	cmp	r3, #2
   1392c:	movne	r2, r3
   13930:	str	r2, [sp]
   13934:	str	r1, [sp, #4]
   13938:	str	r0, [sp, #8]
   1393c:	ldr	r0, [sp, #80]	; 0x50
   13940:	str	r0, [sp, #12]
   13944:	ldr	r0, [sp, #88]	; 0x58
   13948:	str	r0, [sp, #16]
   1394c:	mov	r0, r5
   13950:	mov	r1, sl
   13954:	mov	r2, ip
   13958:	mov	r3, lr
   1395c:	bl	129f0 <__mempcpy_chk@plt+0x1984>
   13960:	mov	r8, r0
   13964:	mov	r0, r8
   13968:	sub	sp, fp, #28
   1396c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13970:	mov	r0, #5
   13974:	str	r0, [sp]
   13978:	ldr	r0, [fp, #12]
   1397c:	str	r0, [sp, #4]
   13980:	ldr	r0, [fp, #16]
   13984:	str	r0, [sp, #8]
   13988:	ldr	r0, [sp, #80]	; 0x50
   1398c:	str	r0, [sp, #12]
   13990:	ldr	r0, [sp, #88]	; 0x58
   13994:	str	r0, [sp, #16]
   13998:	mov	r0, r6
   1399c:	ldr	r1, [sp, #84]	; 0x54
   139a0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   139a4:	mov	r3, r9
   139a8:	b	1395c <__mempcpy_chk@plt+0x28f0>
   139ac:	bl	11054 <abort@plt>
   139b0:	mov	r3, r2
   139b4:	mov	r2, #0
   139b8:	b	139bc <__mempcpy_chk@plt+0x2950>
   139bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139c0:	add	fp, sp, #28
   139c4:	sub	sp, sp, #36	; 0x24
   139c8:	mov	r4, r2
   139cc:	str	r2, [sp, #24]
   139d0:	mov	r5, r1
   139d4:	mov	r6, r0
   139d8:	str	r0, [sp, #20]
   139dc:	movw	r8, #29024	; 0x7160
   139e0:	movt	r8, #2
   139e4:	cmp	r3, #0
   139e8:	movne	r8, r3
   139ec:	bl	10f88 <__errno_location@plt>
   139f0:	str	r0, [sp, #28]
   139f4:	ldm	r8, {r3, r9}
   139f8:	ldr	r1, [r8, #40]	; 0x28
   139fc:	ldr	r2, [r8, #44]	; 0x2c
   13a00:	ldr	r7, [r0]
   13a04:	str	r7, [sp, #32]
   13a08:	add	sl, r8, #8
   13a0c:	cmp	r4, #0
   13a10:	orreq	r9, r9, #1
   13a14:	stm	sp, {r3, r9, sl}
   13a18:	str	r1, [sp, #12]
   13a1c:	str	r2, [sp, #16]
   13a20:	mov	r0, #0
   13a24:	mov	r1, #0
   13a28:	mov	r2, r6
   13a2c:	mov	r3, r5
   13a30:	mov	r7, r5
   13a34:	bl	129f0 <__mempcpy_chk@plt+0x1984>
   13a38:	mov	r5, r0
   13a3c:	add	r4, r0, #1
   13a40:	mov	r0, r4
   13a44:	bl	14ca8 <__mempcpy_chk@plt+0x3c3c>
   13a48:	mov	r6, r0
   13a4c:	ldr	r0, [r8]
   13a50:	ldr	r1, [r8, #40]	; 0x28
   13a54:	ldr	r2, [r8, #44]	; 0x2c
   13a58:	stm	sp, {r0, r9, sl}
   13a5c:	str	r1, [sp, #12]
   13a60:	str	r2, [sp, #16]
   13a64:	mov	r0, r6
   13a68:	mov	r1, r4
   13a6c:	ldr	r2, [sp, #20]
   13a70:	mov	r3, r7
   13a74:	bl	129f0 <__mempcpy_chk@plt+0x1984>
   13a78:	ldr	r0, [sp, #24]
   13a7c:	ldr	r1, [sp, #32]
   13a80:	ldr	r2, [sp, #28]
   13a84:	str	r1, [r2]
   13a88:	cmp	r0, #0
   13a8c:	strne	r5, [r0]
   13a90:	mov	r0, r6
   13a94:	sub	sp, fp, #28
   13a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a9c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13aa0:	add	fp, sp, #24
   13aa4:	movw	r8, #28920	; 0x70f8
   13aa8:	movt	r8, #2
   13aac:	ldr	r4, [r8]
   13ab0:	movw	r5, #28924	; 0x70fc
   13ab4:	movt	r5, #2
   13ab8:	ldr	r0, [r5]
   13abc:	cmp	r0, #2
   13ac0:	blt	13aec <__mempcpy_chk@plt+0x2a80>
   13ac4:	add	r7, r4, #12
   13ac8:	mov	r6, #0
   13acc:	ldr	r0, [r7, r6, lsl #3]
   13ad0:	bl	1278c <__mempcpy_chk@plt+0x1720>
   13ad4:	add	r0, r6, #1
   13ad8:	ldr	r1, [r5]
   13adc:	add	r2, r6, #2
   13ae0:	cmp	r2, r1
   13ae4:	mov	r6, r0
   13ae8:	blt	13acc <__mempcpy_chk@plt+0x2a60>
   13aec:	ldr	r0, [r4, #4]
   13af0:	movw	r9, #29072	; 0x7190
   13af4:	movt	r9, #2
   13af8:	cmp	r0, r9
   13afc:	movw	r7, #28928	; 0x7100
   13b00:	movt	r7, #2
   13b04:	beq	13b14 <__mempcpy_chk@plt+0x2aa8>
   13b08:	bl	1278c <__mempcpy_chk@plt+0x1720>
   13b0c:	mov	r0, #256	; 0x100
   13b10:	stm	r7, {r0, r9}
   13b14:	cmp	r4, r7
   13b18:	beq	13b28 <__mempcpy_chk@plt+0x2abc>
   13b1c:	mov	r0, r4
   13b20:	bl	1278c <__mempcpy_chk@plt+0x1720>
   13b24:	str	r7, [r8]
   13b28:	mov	r0, #1
   13b2c:	str	r0, [r5]
   13b30:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13b34:	movw	r3, #29024	; 0x7160
   13b38:	movt	r3, #2
   13b3c:	mvn	r2, #0
   13b40:	b	13b44 <__mempcpy_chk@plt+0x2ad8>
   13b44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b48:	add	fp, sp, #28
   13b4c:	sub	sp, sp, #44	; 0x2c
   13b50:	mov	r7, r3
   13b54:	str	r2, [sp, #36]	; 0x24
   13b58:	str	r1, [sp, #32]
   13b5c:	mov	r5, r0
   13b60:	bl	10f88 <__errno_location@plt>
   13b64:	cmp	r5, #0
   13b68:	bmi	13cd8 <__mempcpy_chk@plt+0x2c6c>
   13b6c:	cmn	r5, #-2147483647	; 0x80000001
   13b70:	beq	13cd8 <__mempcpy_chk@plt+0x2c6c>
   13b74:	movw	r4, #28920	; 0x70f8
   13b78:	movt	r4, #2
   13b7c:	ldr	r6, [r4]
   13b80:	str	r0, [sp, #28]
   13b84:	ldr	r0, [r0]
   13b88:	str	r0, [sp, #24]
   13b8c:	movw	r8, #28924	; 0x70fc
   13b90:	movt	r8, #2
   13b94:	ldr	r1, [r8]
   13b98:	cmp	r1, r5
   13b9c:	ble	13ba8 <__mempcpy_chk@plt+0x2b3c>
   13ba0:	mov	sl, r6
   13ba4:	b	13c14 <__mempcpy_chk@plt+0x2ba8>
   13ba8:	str	r1, [fp, #-32]	; 0xffffffe0
   13bac:	mov	r0, #8
   13bb0:	str	r0, [sp]
   13bb4:	movw	r9, #28928	; 0x7100
   13bb8:	movt	r9, #2
   13bbc:	subs	r0, r6, r9
   13bc0:	movne	r0, r6
   13bc4:	sub	r1, r5, r1
   13bc8:	add	r2, r1, #1
   13bcc:	sub	r1, fp, #32
   13bd0:	mvn	r3, #-2147483648	; 0x80000000
   13bd4:	bl	14d84 <__mempcpy_chk@plt+0x3d18>
   13bd8:	mov	sl, r0
   13bdc:	str	r0, [r4]
   13be0:	cmp	r6, r9
   13be4:	bne	13bf0 <__mempcpy_chk@plt+0x2b84>
   13be8:	ldrd	r0, [r9]
   13bec:	stm	sl, {r0, r1}
   13bf0:	ldr	r1, [r8]
   13bf4:	add	r0, sl, r1, lsl #3
   13bf8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13bfc:	sub	r1, r2, r1
   13c00:	lsl	r2, r1, #3
   13c04:	mov	r1, #0
   13c08:	bl	10fa0 <memset@plt>
   13c0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13c10:	str	r0, [r8]
   13c14:	mov	r9, sl
   13c18:	ldr	r6, [r9, r5, lsl #3]!
   13c1c:	ldr	r4, [r9, #4]!
   13c20:	ldm	r7, {r0, r1}
   13c24:	ldr	r2, [r7, #40]	; 0x28
   13c28:	ldr	r3, [r7, #44]	; 0x2c
   13c2c:	orr	r8, r1, #1
   13c30:	add	r1, r7, #8
   13c34:	stm	sp, {r0, r8}
   13c38:	str	r1, [sp, #20]
   13c3c:	add	r0, sp, #8
   13c40:	stm	r0, {r1, r2, r3}
   13c44:	mov	r0, r4
   13c48:	mov	r1, r6
   13c4c:	ldr	r2, [sp, #32]
   13c50:	ldr	r3, [sp, #36]	; 0x24
   13c54:	bl	129f0 <__mempcpy_chk@plt+0x1984>
   13c58:	cmp	r6, r0
   13c5c:	bhi	13cc0 <__mempcpy_chk@plt+0x2c54>
   13c60:	add	r6, r0, #1
   13c64:	str	r6, [sl, r5, lsl #3]
   13c68:	movw	r0, #29072	; 0x7190
   13c6c:	movt	r0, #2
   13c70:	cmp	r4, r0
   13c74:	beq	13c80 <__mempcpy_chk@plt+0x2c14>
   13c78:	mov	r0, r4
   13c7c:	bl	1278c <__mempcpy_chk@plt+0x1720>
   13c80:	mov	r0, r6
   13c84:	bl	14ca8 <__mempcpy_chk@plt+0x3c3c>
   13c88:	mov	r4, r0
   13c8c:	str	r0, [r9]
   13c90:	ldr	r0, [r7]
   13c94:	ldr	r1, [r7, #40]	; 0x28
   13c98:	ldr	r2, [r7, #44]	; 0x2c
   13c9c:	stm	sp, {r0, r8}
   13ca0:	ldr	r0, [sp, #20]
   13ca4:	add	r3, sp, #8
   13ca8:	stm	r3, {r0, r1, r2}
   13cac:	mov	r0, r4
   13cb0:	mov	r1, r6
   13cb4:	ldr	r2, [sp, #32]
   13cb8:	ldr	r3, [sp, #36]	; 0x24
   13cbc:	bl	129f0 <__mempcpy_chk@plt+0x1984>
   13cc0:	ldr	r0, [sp, #28]
   13cc4:	ldr	r1, [sp, #24]
   13cc8:	str	r1, [r0]
   13ccc:	mov	r0, r4
   13cd0:	sub	sp, fp, #28
   13cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cd8:	bl	11054 <abort@plt>
   13cdc:	movw	r3, #29024	; 0x7160
   13ce0:	movt	r3, #2
   13ce4:	b	13b44 <__mempcpy_chk@plt+0x2ad8>
   13ce8:	mov	r1, r0
   13cec:	mov	r0, #0
   13cf0:	b	13b34 <__mempcpy_chk@plt+0x2ac8>
   13cf4:	mov	r2, r1
   13cf8:	mov	r1, r0
   13cfc:	mov	r0, #0
   13d00:	b	13cdc <__mempcpy_chk@plt+0x2c70>
   13d04:	push	{r4, r5, r6, sl, fp, lr}
   13d08:	add	fp, sp, #16
   13d0c:	sub	sp, sp, #48	; 0x30
   13d10:	mov	r4, r2
   13d14:	mov	r5, r0
   13d18:	mov	r6, sp
   13d1c:	mov	r0, r6
   13d20:	bl	13d40 <__mempcpy_chk@plt+0x2cd4>
   13d24:	mov	r0, r5
   13d28:	mov	r1, r4
   13d2c:	mvn	r2, #0
   13d30:	mov	r3, r6
   13d34:	bl	13b44 <__mempcpy_chk@plt+0x2ad8>
   13d38:	sub	sp, fp, #16
   13d3c:	pop	{r4, r5, r6, sl, fp, pc}
   13d40:	push	{fp, lr}
   13d44:	mov	fp, sp
   13d48:	vmov.i32	q8, #0	; 0x00000000
   13d4c:	mov	r2, #32
   13d50:	mov	r3, r0
   13d54:	vst1.32	{d16-d17}, [r3], r2
   13d58:	vst1.32	{d16-d17}, [r3]
   13d5c:	add	r2, r0, #16
   13d60:	vst1.32	{d16-d17}, [r2]
   13d64:	cmp	r1, #10
   13d68:	strne	r1, [r0]
   13d6c:	popne	{fp, pc}
   13d70:	bl	11054 <abort@plt>
   13d74:	push	{r4, r5, r6, r7, fp, lr}
   13d78:	add	fp, sp, #16
   13d7c:	sub	sp, sp, #48	; 0x30
   13d80:	mov	r4, r3
   13d84:	mov	r5, r2
   13d88:	mov	r6, r0
   13d8c:	mov	r7, sp
   13d90:	mov	r0, r7
   13d94:	bl	13d40 <__mempcpy_chk@plt+0x2cd4>
   13d98:	mov	r0, r6
   13d9c:	mov	r1, r5
   13da0:	mov	r2, r4
   13da4:	mov	r3, r7
   13da8:	bl	13b44 <__mempcpy_chk@plt+0x2ad8>
   13dac:	sub	sp, fp, #16
   13db0:	pop	{r4, r5, r6, r7, fp, pc}
   13db4:	mov	r2, r1
   13db8:	mov	r1, r0
   13dbc:	mov	r0, #0
   13dc0:	b	13d04 <__mempcpy_chk@plt+0x2c98>
   13dc4:	mov	r3, r2
   13dc8:	mov	r2, r1
   13dcc:	mov	r1, r0
   13dd0:	mov	r0, #0
   13dd4:	b	13d74 <__mempcpy_chk@plt+0x2d08>
   13dd8:	push	{r4, r5, r6, sl, fp, lr}
   13ddc:	add	fp, sp, #16
   13de0:	sub	sp, sp, #48	; 0x30
   13de4:	mov	r4, r1
   13de8:	mov	r5, r0
   13dec:	movw	r0, #29024	; 0x7160
   13df0:	movt	r0, #2
   13df4:	add	r1, r0, #16
   13df8:	mov	r3, #32
   13dfc:	vld1.64	{d16-d17}, [r0], r3
   13e00:	vld1.64	{d18-d19}, [r1]
   13e04:	mov	r6, sp
   13e08:	add	r1, r6, #16
   13e0c:	vld1.64	{d20-d21}, [r0]
   13e10:	vst1.64	{d18-d19}, [r1]
   13e14:	mov	r0, r6
   13e18:	vst1.64	{d16-d17}, [r0], r3
   13e1c:	vst1.64	{d20-d21}, [r0]
   13e20:	mov	r0, r6
   13e24:	mov	r1, r2
   13e28:	mov	r2, #1
   13e2c:	bl	128e4 <__mempcpy_chk@plt+0x1878>
   13e30:	mov	r0, #0
   13e34:	mov	r1, r5
   13e38:	mov	r2, r4
   13e3c:	mov	r3, r6
   13e40:	bl	13b44 <__mempcpy_chk@plt+0x2ad8>
   13e44:	sub	sp, fp, #16
   13e48:	pop	{r4, r5, r6, sl, fp, pc}
   13e4c:	mov	r2, r1
   13e50:	mvn	r1, #0
   13e54:	b	13dd8 <__mempcpy_chk@plt+0x2d6c>
   13e58:	mov	r1, #58	; 0x3a
   13e5c:	b	13e4c <__mempcpy_chk@plt+0x2de0>
   13e60:	mov	r2, #58	; 0x3a
   13e64:	b	13dd8 <__mempcpy_chk@plt+0x2d6c>
   13e68:	push	{r4, r5, r6, sl, fp, lr}
   13e6c:	add	fp, sp, #16
   13e70:	sub	sp, sp, #48	; 0x30
   13e74:	mov	r4, r2
   13e78:	mov	r5, r0
   13e7c:	mov	r6, sp
   13e80:	mov	r0, r6
   13e84:	bl	13d40 <__mempcpy_chk@plt+0x2cd4>
   13e88:	mov	r0, r6
   13e8c:	mov	r1, #58	; 0x3a
   13e90:	mov	r2, #1
   13e94:	bl	128e4 <__mempcpy_chk@plt+0x1878>
   13e98:	mov	r0, r5
   13e9c:	mov	r1, r4
   13ea0:	mvn	r2, #0
   13ea4:	mov	r3, r6
   13ea8:	bl	13b44 <__mempcpy_chk@plt+0x2ad8>
   13eac:	sub	sp, fp, #16
   13eb0:	pop	{r4, r5, r6, sl, fp, pc}
   13eb4:	push	{fp, lr}
   13eb8:	mov	fp, sp
   13ebc:	sub	sp, sp, #8
   13ec0:	mvn	ip, #0
   13ec4:	str	ip, [sp]
   13ec8:	bl	13ed4 <__mempcpy_chk@plt+0x2e68>
   13ecc:	mov	sp, fp
   13ed0:	pop	{fp, pc}
   13ed4:	push	{r4, r5, r6, r7, fp, lr}
   13ed8:	add	fp, sp, #16
   13edc:	sub	sp, sp, #48	; 0x30
   13ee0:	mov	r7, r3
   13ee4:	mov	r5, r0
   13ee8:	movw	r0, #29024	; 0x7160
   13eec:	movt	r0, #2
   13ef0:	add	r3, r0, #16
   13ef4:	mov	r4, #32
   13ef8:	vld1.64	{d16-d17}, [r0], r4
   13efc:	vld1.64	{d18-d19}, [r3]
   13f00:	mov	r6, sp
   13f04:	add	r3, r6, #16
   13f08:	vld1.64	{d20-d21}, [r0]
   13f0c:	vst1.64	{d18-d19}, [r3]
   13f10:	mov	r0, r6
   13f14:	vst1.64	{d16-d17}, [r0], r4
   13f18:	vst1.64	{d20-d21}, [r0]
   13f1c:	mov	r0, r6
   13f20:	bl	1293c <__mempcpy_chk@plt+0x18d0>
   13f24:	ldr	r2, [fp, #8]
   13f28:	mov	r0, r5
   13f2c:	mov	r1, r7
   13f30:	mov	r3, r6
   13f34:	bl	13b44 <__mempcpy_chk@plt+0x2ad8>
   13f38:	sub	sp, fp, #16
   13f3c:	pop	{r4, r5, r6, r7, fp, pc}
   13f40:	mov	r3, r2
   13f44:	mov	r2, r1
   13f48:	mov	r1, r0
   13f4c:	mov	r0, #0
   13f50:	b	13eb4 <__mempcpy_chk@plt+0x2e48>
   13f54:	push	{fp, lr}
   13f58:	mov	fp, sp
   13f5c:	sub	sp, sp, #8
   13f60:	mov	ip, r2
   13f64:	mov	r2, r1
   13f68:	mov	r1, r0
   13f6c:	str	r3, [sp]
   13f70:	mov	r0, #0
   13f74:	mov	r3, ip
   13f78:	bl	13ed4 <__mempcpy_chk@plt+0x2e68>
   13f7c:	mov	sp, fp
   13f80:	pop	{fp, pc}
   13f84:	movw	r3, #28936	; 0x7108
   13f88:	movt	r3, #2
   13f8c:	b	13b44 <__mempcpy_chk@plt+0x2ad8>
   13f90:	mov	r2, r1
   13f94:	mov	r1, r0
   13f98:	mov	r0, #0
   13f9c:	b	13f84 <__mempcpy_chk@plt+0x2f18>
   13fa0:	mvn	r2, #0
   13fa4:	b	13f84 <__mempcpy_chk@plt+0x2f18>
   13fa8:	mov	r1, r0
   13fac:	mov	r0, #0
   13fb0:	b	13fa0 <__mempcpy_chk@plt+0x2f34>
   13fb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13fb8:	add	fp, sp, #24
   13fbc:	sub	sp, sp, #16
   13fc0:	mov	r4, r1
   13fc4:	mov	r5, r0
   13fc8:	mov	r7, #0
   13fcc:	mov	r0, #0
   13fd0:	mov	r1, r5
   13fd4:	mov	r2, #5
   13fd8:	bl	10e80 <dcgettext@plt>
   13fdc:	cmp	r0, r5
   13fe0:	beq	13fec <__mempcpy_chk@plt+0x2f80>
   13fe4:	sub	sp, fp, #24
   13fe8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13fec:	bl	158ec <__mempcpy_chk@plt+0x4880>
   13ff0:	mov	r6, r0
   13ff4:	mov	r8, #56	; 0x38
   13ff8:	mov	r0, #45	; 0x2d
   13ffc:	stm	sp, {r0, r8}
   14000:	str	r7, [sp, #8]
   14004:	str	r7, [sp, #12]
   14008:	mov	r0, r6
   1400c:	mov	r1, #85	; 0x55
   14010:	mov	r2, #84	; 0x54
   14014:	mov	r3, #70	; 0x46
   14018:	bl	140b0 <__mempcpy_chk@plt+0x3044>
   1401c:	cmp	r0, #0
   14020:	beq	1403c <__mempcpy_chk@plt+0x2fd0>
   14024:	ldrb	r1, [r5]
   14028:	movw	r2, #25906	; 0x6532
   1402c:	movt	r2, #1
   14030:	movw	r0, #25910	; 0x6536
   14034:	movt	r0, #1
   14038:	b	14080 <__mempcpy_chk@plt+0x3014>
   1403c:	mov	r0, #48	; 0x30
   14040:	mov	r1, #51	; 0x33
   14044:	str	r8, [sp]
   14048:	stmib	sp, {r0, r1}
   1404c:	str	r0, [sp, #12]
   14050:	mov	r0, r6
   14054:	mov	r1, #71	; 0x47
   14058:	mov	r2, #66	; 0x42
   1405c:	mov	r3, #49	; 0x31
   14060:	bl	140b0 <__mempcpy_chk@plt+0x3044>
   14064:	cmp	r0, #0
   14068:	beq	14090 <__mempcpy_chk@plt+0x3024>
   1406c:	ldrb	r1, [r5]
   14070:	movw	r2, #25914	; 0x653a
   14074:	movt	r2, #1
   14078:	movw	r0, #25918	; 0x653e
   1407c:	movt	r0, #1
   14080:	cmp	r1, #96	; 0x60
   14084:	moveq	r0, r2
   14088:	sub	sp, fp, #24
   1408c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14090:	movw	r1, #25900	; 0x652c
   14094:	movt	r1, #1
   14098:	movw	r0, #25904	; 0x6530
   1409c:	movt	r0, #1
   140a0:	cmp	r4, #9
   140a4:	moveq	r0, r1
   140a8:	sub	sp, fp, #24
   140ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140b0:	push	{r4, r5, r6, r7, fp, lr}
   140b4:	add	fp, sp, #16
   140b8:	sub	sp, sp, #16
   140bc:	mov	r4, r3
   140c0:	mov	r5, r2
   140c4:	mov	r7, r1
   140c8:	mov	r6, r0
   140cc:	mov	r0, r1
   140d0:	bl	15534 <__mempcpy_chk@plt+0x44c8>
   140d4:	ldrb	r1, [r6]
   140d8:	cmp	r0, #0
   140dc:	andne	r1, r1, #223	; 0xdf
   140e0:	mov	r0, #0
   140e4:	cmp	r1, r7
   140e8:	bne	14120 <__mempcpy_chk@plt+0x30b4>
   140ec:	cmp	r7, #0
   140f0:	beq	14128 <__mempcpy_chk@plt+0x30bc>
   140f4:	ldr	r0, [fp, #20]
   140f8:	ldr	r1, [fp, #16]
   140fc:	ldr	r2, [fp, #12]
   14100:	ldr	r3, [fp, #8]
   14104:	str	r2, [sp]
   14108:	str	r1, [sp, #4]
   1410c:	str	r0, [sp, #8]
   14110:	mov	r0, r6
   14114:	mov	r1, r5
   14118:	mov	r2, r4
   1411c:	bl	14134 <__mempcpy_chk@plt+0x30c8>
   14120:	sub	sp, fp, #16
   14124:	pop	{r4, r5, r6, r7, fp, pc}
   14128:	mov	r0, #1
   1412c:	sub	sp, fp, #16
   14130:	pop	{r4, r5, r6, r7, fp, pc}
   14134:	push	{r4, r5, r6, r7, fp, lr}
   14138:	add	fp, sp, #16
   1413c:	sub	sp, sp, #8
   14140:	mov	r4, r3
   14144:	mov	r5, r2
   14148:	mov	r7, r1
   1414c:	mov	r6, r0
   14150:	mov	r0, r1
   14154:	bl	15534 <__mempcpy_chk@plt+0x44c8>
   14158:	ldrb	r1, [r6, #1]
   1415c:	cmp	r0, #0
   14160:	andne	r1, r1, #223	; 0xdf
   14164:	mov	r0, #0
   14168:	cmp	r1, r7
   1416c:	bne	1419c <__mempcpy_chk@plt+0x3130>
   14170:	cmp	r7, #0
   14174:	beq	141a4 <__mempcpy_chk@plt+0x3138>
   14178:	ldr	r0, [fp, #16]
   1417c:	ldr	r1, [fp, #12]
   14180:	ldr	r3, [fp, #8]
   14184:	str	r1, [sp]
   14188:	str	r0, [sp, #4]
   1418c:	mov	r0, r6
   14190:	mov	r1, r5
   14194:	mov	r2, r4
   14198:	bl	141b0 <__mempcpy_chk@plt+0x3144>
   1419c:	sub	sp, fp, #16
   141a0:	pop	{r4, r5, r6, r7, fp, pc}
   141a4:	mov	r0, #1
   141a8:	sub	sp, fp, #16
   141ac:	pop	{r4, r5, r6, r7, fp, pc}
   141b0:	push	{r4, r5, r6, r7, fp, lr}
   141b4:	add	fp, sp, #16
   141b8:	sub	sp, sp, #8
   141bc:	mov	r4, r3
   141c0:	mov	r5, r2
   141c4:	mov	r7, r1
   141c8:	mov	r6, r0
   141cc:	mov	r0, r1
   141d0:	bl	15534 <__mempcpy_chk@plt+0x44c8>
   141d4:	ldrb	r1, [r6, #2]
   141d8:	cmp	r0, #0
   141dc:	andne	r1, r1, #223	; 0xdf
   141e0:	mov	r0, #0
   141e4:	cmp	r1, r7
   141e8:	bne	14210 <__mempcpy_chk@plt+0x31a4>
   141ec:	cmp	r7, #0
   141f0:	beq	14218 <__mempcpy_chk@plt+0x31ac>
   141f4:	ldr	r0, [fp, #12]
   141f8:	ldr	r3, [fp, #8]
   141fc:	str	r0, [sp]
   14200:	mov	r0, r6
   14204:	mov	r1, r5
   14208:	mov	r2, r4
   1420c:	bl	14224 <__mempcpy_chk@plt+0x31b8>
   14210:	sub	sp, fp, #16
   14214:	pop	{r4, r5, r6, r7, fp, pc}
   14218:	mov	r0, #1
   1421c:	sub	sp, fp, #16
   14220:	pop	{r4, r5, r6, r7, fp, pc}
   14224:	push	{r4, r5, r6, r7, fp, lr}
   14228:	add	fp, sp, #16
   1422c:	mov	r4, r3
   14230:	mov	r5, r2
   14234:	mov	r7, r1
   14238:	mov	r6, r0
   1423c:	mov	r0, r1
   14240:	bl	15534 <__mempcpy_chk@plt+0x44c8>
   14244:	ldrb	r1, [r6, #3]
   14248:	ldr	r3, [fp, #8]
   1424c:	cmp	r0, #0
   14250:	andne	r1, r1, #223	; 0xdf
   14254:	mov	r0, #0
   14258:	cmp	r1, r7
   1425c:	bne	14280 <__mempcpy_chk@plt+0x3214>
   14260:	cmp	r7, #0
   14264:	beq	1427c <__mempcpy_chk@plt+0x3210>
   14268:	mov	r0, r6
   1426c:	mov	r1, r5
   14270:	mov	r2, r4
   14274:	pop	{r4, r5, r6, r7, fp, lr}
   14278:	b	14284 <__mempcpy_chk@plt+0x3218>
   1427c:	mov	r0, #1
   14280:	pop	{r4, r5, r6, r7, fp, pc}
   14284:	push	{r4, r5, r6, r7, fp, lr}
   14288:	add	fp, sp, #16
   1428c:	mov	r4, r3
   14290:	mov	r5, r2
   14294:	mov	r7, r1
   14298:	mov	r6, r0
   1429c:	mov	r0, r1
   142a0:	bl	15534 <__mempcpy_chk@plt+0x44c8>
   142a4:	ldrb	r1, [r6, #4]
   142a8:	cmp	r0, #0
   142ac:	andne	r1, r1, #223	; 0xdf
   142b0:	mov	r0, #0
   142b4:	cmp	r1, r7
   142b8:	bne	142dc <__mempcpy_chk@plt+0x3270>
   142bc:	cmp	r7, #0
   142c0:	beq	142d8 <__mempcpy_chk@plt+0x326c>
   142c4:	mov	r0, r6
   142c8:	mov	r1, r5
   142cc:	mov	r2, r4
   142d0:	pop	{r4, r5, r6, r7, fp, lr}
   142d4:	b	142e0 <__mempcpy_chk@plt+0x3274>
   142d8:	mov	r0, #1
   142dc:	pop	{r4, r5, r6, r7, fp, pc}
   142e0:	push	{r4, r5, r6, sl, fp, lr}
   142e4:	add	fp, sp, #16
   142e8:	mov	r4, r2
   142ec:	mov	r6, r1
   142f0:	mov	r5, r0
   142f4:	mov	r0, r1
   142f8:	bl	15534 <__mempcpy_chk@plt+0x44c8>
   142fc:	ldrb	r1, [r5, #5]
   14300:	cmp	r0, #0
   14304:	andne	r1, r1, #223	; 0xdf
   14308:	mov	r0, #0
   1430c:	cmp	r1, r6
   14310:	bne	14330 <__mempcpy_chk@plt+0x32c4>
   14314:	cmp	r6, #0
   14318:	beq	1432c <__mempcpy_chk@plt+0x32c0>
   1431c:	mov	r0, r5
   14320:	mov	r1, r4
   14324:	pop	{r4, r5, r6, sl, fp, lr}
   14328:	b	14334 <__mempcpy_chk@plt+0x32c8>
   1432c:	mov	r0, #1
   14330:	pop	{r4, r5, r6, sl, fp, pc}
   14334:	push	{r4, r5, fp, lr}
   14338:	add	fp, sp, #8
   1433c:	mov	r5, r1
   14340:	mov	r4, r0
   14344:	mov	r0, r1
   14348:	bl	15534 <__mempcpy_chk@plt+0x44c8>
   1434c:	ldrb	r1, [r4, #6]
   14350:	cmp	r0, #0
   14354:	andne	r1, r1, #223	; 0xdf
   14358:	mov	r0, #0
   1435c:	cmp	r1, r5
   14360:	popne	{r4, r5, fp, pc}
   14364:	cmp	r5, #0
   14368:	beq	14378 <__mempcpy_chk@plt+0x330c>
   1436c:	mov	r0, r4
   14370:	pop	{r4, r5, fp, lr}
   14374:	b	14380 <__mempcpy_chk@plt+0x3314>
   14378:	mov	r0, #1
   1437c:	pop	{r4, r5, fp, pc}
   14380:	push	{r4, sl, fp, lr}
   14384:	add	fp, sp, #8
   14388:	mov	r4, r0
   1438c:	mov	r0, #0
   14390:	bl	15534 <__mempcpy_chk@plt+0x44c8>
   14394:	ldrb	r1, [r4, #7]
   14398:	cmp	r0, #0
   1439c:	beq	143b0 <__mempcpy_chk@plt+0x3344>
   143a0:	tst	r1, #223	; 0xdf
   143a4:	bne	143b8 <__mempcpy_chk@plt+0x334c>
   143a8:	mov	r0, #1
   143ac:	pop	{r4, sl, fp, pc}
   143b0:	cmp	r1, #0
   143b4:	beq	143a8 <__mempcpy_chk@plt+0x333c>
   143b8:	mov	r0, #0
   143bc:	pop	{r4, sl, fp, pc}
   143c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143c4:	add	fp, sp, #28
   143c8:	sub	sp, sp, #60	; 0x3c
   143cc:	mov	r4, r3
   143d0:	mov	r8, r2
   143d4:	str	r1, [sp, #8]
   143d8:	mov	r7, r0
   143dc:	movw	r9, #29328	; 0x7290
   143e0:	movt	r9, #2
   143e4:	ldrb	r0, [r9]
   143e8:	cmp	r0, #0
   143ec:	movw	sl, #29336	; 0x7298
   143f0:	movt	sl, #2
   143f4:	movw	r5, #29332	; 0x7294
   143f8:	movt	r5, #2
   143fc:	bne	14464 <__mempcpy_chk@plt+0x33f8>
   14400:	bl	158ec <__mempcpy_chk@plt+0x4880>
   14404:	mov	r6, r0
   14408:	movw	r1, #26008	; 0x6598
   1440c:	movt	r1, #1
   14410:	bl	10e20 <strcmp@plt>
   14414:	clz	r1, r0
   14418:	lsr	r1, r1, #5
   1441c:	str	r1, [r5]
   14420:	cmp	r0, #0
   14424:	beq	1445c <__mempcpy_chk@plt+0x33f0>
   14428:	movw	r1, #26008	; 0x6598
   1442c:	movt	r1, #1
   14430:	mov	r0, r6
   14434:	bl	10f1c <iconv_open@plt>
   14438:	str	r0, [sl]
   1443c:	cmn	r0, #1
   14440:	bne	1445c <__mempcpy_chk@plt+0x33f0>
   14444:	movw	r0, #26014	; 0x659e
   14448:	movt	r0, #1
   1444c:	movw	r1, #26008	; 0x6598
   14450:	movt	r1, #1
   14454:	bl	10f1c <iconv_open@plt>
   14458:	str	r0, [sl]
   1445c:	mov	r0, #1
   14460:	strb	r0, [r9]
   14464:	ldr	r0, [r5]
   14468:	cmp	r0, #0
   1446c:	ldreq	r0, [sl]
   14470:	cmneq	r0, #1
   14474:	beq	144b8 <__mempcpy_chk@plt+0x344c>
   14478:	sub	r6, fp, #34	; 0x22
   1447c:	mov	r0, r6
   14480:	mov	r1, r7
   14484:	bl	14584 <__mempcpy_chk@plt+0x3518>
   14488:	cmn	r0, #1
   1448c:	ble	144c4 <__mempcpy_chk@plt+0x3458>
   14490:	mov	r1, r0
   14494:	ldr	r0, [r5]
   14498:	cmp	r0, #0
   1449c:	beq	144e0 <__mempcpy_chk@plt+0x3474>
   144a0:	sub	r0, fp, #34	; 0x22
   144a4:	mov	r2, r4
   144a8:	ldr	r3, [sp, #8]
   144ac:	blx	r3
   144b0:	sub	sp, fp, #28
   144b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144b8:	movw	r1, #26020	; 0x65a4
   144bc:	movt	r1, #1
   144c0:	b	144cc <__mempcpy_chk@plt+0x3460>
   144c4:	movw	r1, #26046	; 0x65be
   144c8:	movt	r1, #1
   144cc:	mov	r0, r7
   144d0:	mov	r2, r4
   144d4:	blx	r8
   144d8:	sub	sp, fp, #28
   144dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144e0:	str	r6, [sp, #24]
   144e4:	str	r1, [sp, #20]
   144e8:	add	r5, sp, #29
   144ec:	str	r5, [sp, #16]
   144f0:	mov	r0, #25
   144f4:	str	r0, [sp, #12]
   144f8:	ldr	r0, [sl]
   144fc:	add	r6, sp, #12
   14500:	str	r6, [sp]
   14504:	add	r1, sp, #24
   14508:	add	r2, sp, #20
   1450c:	add	r3, sp, #16
   14510:	bl	10e14 <iconv@plt>
   14514:	cmn	r0, #1
   14518:	beq	14578 <__mempcpy_chk@plt+0x350c>
   1451c:	ldr	r1, [sp, #20]
   14520:	cmp	r1, #0
   14524:	bne	14578 <__mempcpy_chk@plt+0x350c>
   14528:	cmp	r0, #0
   1452c:	beq	14548 <__mempcpy_chk@plt+0x34dc>
   14530:	ldr	r0, [sp, #16]
   14534:	sub	r0, r0, r5
   14538:	cmp	r0, #1
   1453c:	ldrbeq	r0, [sp, #29]
   14540:	cmpeq	r0, #63	; 0x3f
   14544:	beq	14578 <__mempcpy_chk@plt+0x350c>
   14548:	ldr	r0, [sl]
   1454c:	str	r6, [sp]
   14550:	add	r3, sp, #16
   14554:	mov	r1, #0
   14558:	mov	r2, #0
   1455c:	bl	10e14 <iconv@plt>
   14560:	cmn	r0, #1
   14564:	beq	14578 <__mempcpy_chk@plt+0x350c>
   14568:	ldr	r0, [sp, #16]
   1456c:	sub	r1, r0, r5
   14570:	mov	r0, r5
   14574:	b	144a4 <__mempcpy_chk@plt+0x3438>
   14578:	mov	r0, r7
   1457c:	mov	r1, #0
   14580:	b	144d0 <__mempcpy_chk@plt+0x3464>
   14584:	cmp	r1, #127	; 0x7f
   14588:	strbls	r1, [r0]
   1458c:	movls	r0, #1
   14590:	bxls	lr
   14594:	mov	r2, #6
   14598:	b	146c8 <__mempcpy_chk@plt+0x365c>
   1459c:	push	{fp, lr}
   145a0:	mov	fp, sp
   145a4:	mov	r3, r2
   145a8:	mov	r2, r1
   145ac:	mov	r1, #1
   145b0:	bl	10eb0 <fwrite@plt>
   145b4:	mov	r0, #0
   145b8:	pop	{fp, pc}
   145bc:	push	{fp, lr}
   145c0:	mov	fp, sp
   145c4:	mov	lr, r1
   145c8:	mov	ip, r0
   145cc:	movw	r0, #18060	; 0x468c
   145d0:	movt	r0, #1
   145d4:	movw	r3, #17920	; 0x4600
   145d8:	movt	r3, #1
   145dc:	cmp	r2, #0
   145e0:	moveq	r3, r0
   145e4:	movw	r1, #17820	; 0x459c
   145e8:	movt	r1, #1
   145ec:	mov	r0, lr
   145f0:	mov	r2, r3
   145f4:	mov	r3, ip
   145f8:	pop	{fp, lr}
   145fc:	b	143c0 <__mempcpy_chk@plt+0x3354>
   14600:	push	{r4, r5, r6, sl, fp, lr}
   14604:	add	fp, sp, #16
   14608:	sub	sp, sp, #8
   1460c:	mov	r4, r0
   14610:	cmp	r1, #0
   14614:	beq	14658 <__mempcpy_chk@plt+0x35ec>
   14618:	mov	r5, r1
   1461c:	movw	r1, #26114	; 0x6602
   14620:	movt	r1, #1
   14624:	mov	r0, #0
   14628:	mov	r2, #5
   1462c:	bl	10e80 <dcgettext@plt>
   14630:	mov	r6, r0
   14634:	mov	r0, #0
   14638:	mov	r1, r5
   1463c:	mov	r2, #5
   14640:	bl	10e80 <dcgettext@plt>
   14644:	str	r0, [sp]
   14648:	mov	r0, #1
   1464c:	mov	r1, #0
   14650:	mov	r2, r6
   14654:	b	14678 <__mempcpy_chk@plt+0x360c>
   14658:	movw	r1, #26069	; 0x65d5
   1465c:	movt	r1, #1
   14660:	mov	r0, #0
   14664:	mov	r2, #5
   14668:	bl	10e80 <dcgettext@plt>
   1466c:	mov	r2, r0
   14670:	mov	r0, #1
   14674:	mov	r1, #0
   14678:	mov	r3, r4
   1467c:	bl	10ef8 <error@plt>
   14680:	mvn	r0, #0
   14684:	sub	sp, fp, #16
   14688:	pop	{r4, r5, r6, sl, fp, pc}
   1468c:	push	{fp, lr}
   14690:	mov	fp, sp
   14694:	mov	r1, r2
   14698:	mov	r3, r0
   1469c:	movw	r0, #26163	; 0x6633
   146a0:	movt	r0, #1
   146a4:	movw	r2, #26170	; 0x663a
   146a8:	movt	r2, #1
   146ac:	cmp	r3, #65536	; 0x10000
   146b0:	movcc	r2, r0
   146b4:	mov	r0, r1
   146b8:	mov	r1, #1
   146bc:	bl	10fd0 <__fprintf_chk@plt>
   146c0:	mvn	r0, #0
   146c4:	pop	{fp, pc}
   146c8:	push	{fp, lr}
   146cc:	mov	fp, sp
   146d0:	mvn	r3, #1
   146d4:	cmp	r1, #128	; 0x80
   146d8:	bcc	14784 <__mempcpy_chk@plt+0x3718>
   146dc:	mov	ip, #2
   146e0:	cmp	r1, #2048	; 0x800
   146e4:	bcs	14760 <__mempcpy_chk@plt+0x36f4>
   146e8:	cmp	ip, r2
   146ec:	mvn	r3, #1
   146f0:	bgt	14784 <__mempcpy_chk@plt+0x3718>
   146f4:	cmp	ip, #2
   146f8:	beq	1473c <__mempcpy_chk@plt+0x36d0>
   146fc:	cmp	ip, #3
   14700:	beq	14724 <__mempcpy_chk@plt+0x36b8>
   14704:	cmp	ip, #4
   14708:	bne	14754 <__mempcpy_chk@plt+0x36e8>
   1470c:	mov	r2, #2
   14710:	mov	r3, r1
   14714:	bfi	r3, r2, #6, #26
   14718:	strb	r3, [r0, #3]
   1471c:	mov	r2, #65536	; 0x10000
   14720:	orr	r1, r2, r1, lsr #6
   14724:	mov	r2, #2
   14728:	mov	r3, r1
   1472c:	bfi	r3, r2, #6, #26
   14730:	strb	r3, [r0, #2]
   14734:	mov	r2, #2048	; 0x800
   14738:	orr	r1, r2, r1, lsr #6
   1473c:	mov	r2, #192	; 0xc0
   14740:	orr	r2, r2, r1, lsr #6
   14744:	strb	r2, [r0]
   14748:	mov	r2, #2
   1474c:	bfi	r1, r2, #6, #26
   14750:	strb	r1, [r0, #1]
   14754:	mov	r3, ip
   14758:	mov	r0, r3
   1475c:	pop	{fp, pc}
   14760:	mov	r3, #0
   14764:	cmp	r3, r1, lsr #16
   14768:	bne	1478c <__mempcpy_chk@plt+0x3720>
   1476c:	mov	lr, r1
   14770:	bfc	lr, #0, #11
   14774:	mov	ip, #3
   14778:	mvn	r3, #0
   1477c:	cmp	lr, #55296	; 0xd800
   14780:	bne	146e8 <__mempcpy_chk@plt+0x367c>
   14784:	mov	r0, r3
   14788:	pop	{fp, pc}
   1478c:	lsr	lr, r1, #16
   14790:	mvn	r3, #0
   14794:	mov	ip, #4
   14798:	cmp	lr, #16
   1479c:	bls	146e8 <__mempcpy_chk@plt+0x367c>
   147a0:	b	14784 <__mempcpy_chk@plt+0x3718>
   147a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   147a8:	add	fp, sp, #24
   147ac:	sub	sp, sp, #32
   147b0:	mov	r4, r2
   147b4:	mov	r8, r0
   147b8:	ldr	r6, [fp, #12]
   147bc:	ldr	r7, [fp, #8]
   147c0:	cmp	r1, #0
   147c4:	beq	147ec <__mempcpy_chk@plt+0x3780>
   147c8:	mov	r5, r1
   147cc:	str	r4, [sp]
   147d0:	str	r3, [sp, #4]
   147d4:	movw	r2, #26177	; 0x6641
   147d8:	movt	r2, #1
   147dc:	mov	r0, r8
   147e0:	mov	r1, #1
   147e4:	mov	r3, r5
   147e8:	b	14804 <__mempcpy_chk@plt+0x3798>
   147ec:	str	r3, [sp]
   147f0:	movw	r2, #26189	; 0x664d
   147f4:	movt	r2, #1
   147f8:	mov	r0, r8
   147fc:	mov	r1, #1
   14800:	mov	r3, r4
   14804:	bl	10fd0 <__fprintf_chk@plt>
   14808:	movw	r1, #26196	; 0x6654
   1480c:	movt	r1, #1
   14810:	mov	r0, #0
   14814:	mov	r2, #5
   14818:	bl	10e80 <dcgettext@plt>
   1481c:	mov	r3, r0
   14820:	movw	r0, #2022	; 0x7e6
   14824:	str	r0, [sp]
   14828:	movw	r2, #26914	; 0x6922
   1482c:	movt	r2, #1
   14830:	mov	r0, r8
   14834:	mov	r1, #1
   14838:	bl	10fd0 <__fprintf_chk@plt>
   1483c:	movw	r4, #23547	; 0x5bfb
   14840:	movt	r4, #1
   14844:	mov	r0, r4
   14848:	mov	r1, r8
   1484c:	bl	10dfc <fputs_unlocked@plt>
   14850:	movw	r1, #26200	; 0x6658
   14854:	movt	r1, #1
   14858:	mov	r0, #0
   1485c:	mov	r2, #5
   14860:	bl	10e80 <dcgettext@plt>
   14864:	mov	r2, r0
   14868:	movw	r3, #26371	; 0x6703
   1486c:	movt	r3, #1
   14870:	mov	r0, r8
   14874:	mov	r1, #1
   14878:	bl	10fd0 <__fprintf_chk@plt>
   1487c:	mov	r0, r4
   14880:	mov	r1, r8
   14884:	bl	10dfc <fputs_unlocked@plt>
   14888:	cmp	r6, #9
   1488c:	bhi	148c8 <__mempcpy_chk@plt+0x385c>
   14890:	add	r0, pc, #0
   14894:	ldr	pc, [r0, r6, lsl #2]
   14898:	andeq	r4, r1, r0, asr #17
   1489c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148a0:	andeq	r4, r1, r4, lsl #18
   148a4:	andeq	r4, r1, ip, lsr #18
   148a8:	andeq	r4, r1, r4, asr r9
   148ac:	andeq	r4, r1, ip, ror r9
   148b0:	andeq	r4, r1, r4, lsr #19
   148b4:	ldrdeq	r4, [r1], -ip
   148b8:	andeq	r4, r1, ip, ror sl
   148bc:	andeq	r4, r1, r4, lsr #20
   148c0:	sub	sp, fp, #24
   148c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148c8:	movw	r1, #26724	; 0x6864
   148cc:	movt	r1, #1
   148d0:	b	14a2c <__mempcpy_chk@plt+0x39c0>
   148d4:	movw	r1, #26405	; 0x6725
   148d8:	movt	r1, #1
   148dc:	mov	r0, #0
   148e0:	mov	r2, #5
   148e4:	bl	10e80 <dcgettext@plt>
   148e8:	mov	r2, r0
   148ec:	ldr	r3, [r7]
   148f0:	mov	r0, r8
   148f4:	mov	r1, #1
   148f8:	sub	sp, fp, #24
   148fc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14900:	b	10fd0 <__fprintf_chk@plt>
   14904:	movw	r1, #26421	; 0x6735
   14908:	movt	r1, #1
   1490c:	mov	r0, #0
   14910:	mov	r2, #5
   14914:	bl	10e80 <dcgettext@plt>
   14918:	mov	r2, r0
   1491c:	ldr	r3, [r7]
   14920:	ldr	r0, [r7, #4]
   14924:	str	r0, [sp]
   14928:	b	14a18 <__mempcpy_chk@plt+0x39ac>
   1492c:	movw	r1, #26444	; 0x674c
   14930:	movt	r1, #1
   14934:	mov	r0, #0
   14938:	mov	r2, #5
   1493c:	bl	10e80 <dcgettext@plt>
   14940:	mov	r2, r0
   14944:	ldr	r3, [r7]
   14948:	ldmib	r7, {r0, r1}
   1494c:	stm	sp, {r0, r1}
   14950:	b	14a18 <__mempcpy_chk@plt+0x39ac>
   14954:	movw	r1, #26472	; 0x6768
   14958:	movt	r1, #1
   1495c:	mov	r0, #0
   14960:	mov	r2, #5
   14964:	bl	10e80 <dcgettext@plt>
   14968:	mov	r2, r0
   1496c:	ldr	r3, [r7]
   14970:	ldmib	r7, {r0, r1, r7}
   14974:	stm	sp, {r0, r1, r7}
   14978:	b	14a18 <__mempcpy_chk@plt+0x39ac>
   1497c:	movw	r1, #26504	; 0x6788
   14980:	movt	r1, #1
   14984:	mov	r0, #0
   14988:	mov	r2, #5
   1498c:	bl	10e80 <dcgettext@plt>
   14990:	mov	r2, r0
   14994:	ldr	r3, [r7]
   14998:	ldmib	r7, {r0, r1, r6, r7}
   1499c:	stm	sp, {r0, r1, r6, r7}
   149a0:	b	14a18 <__mempcpy_chk@plt+0x39ac>
   149a4:	movw	r1, #26540	; 0x67ac
   149a8:	movt	r1, #1
   149ac:	mov	r0, #0
   149b0:	mov	r2, #5
   149b4:	bl	10e80 <dcgettext@plt>
   149b8:	mov	r2, r0
   149bc:	ldr	r3, [r7]
   149c0:	ldmib	r7, {r0, r1, r6}
   149c4:	ldr	r5, [r7, #16]
   149c8:	ldr	r7, [r7, #20]
   149cc:	stm	sp, {r0, r1, r6}
   149d0:	str	r5, [sp, #12]
   149d4:	str	r7, [sp, #16]
   149d8:	b	14a18 <__mempcpy_chk@plt+0x39ac>
   149dc:	movw	r1, #26580	; 0x67d4
   149e0:	movt	r1, #1
   149e4:	mov	r0, #0
   149e8:	mov	r2, #5
   149ec:	bl	10e80 <dcgettext@plt>
   149f0:	mov	r2, r0
   149f4:	ldr	r3, [r7]
   149f8:	ldmib	r7, {r0, r1, r6}
   149fc:	ldr	r5, [r7, #16]
   14a00:	ldr	r4, [r7, #20]
   14a04:	ldr	r7, [r7, #24]
   14a08:	stm	sp, {r0, r1, r6}
   14a0c:	str	r5, [sp, #12]
   14a10:	str	r4, [sp, #16]
   14a14:	str	r7, [sp, #20]
   14a18:	mov	r0, r8
   14a1c:	mov	r1, #1
   14a20:	b	14acc <__mempcpy_chk@plt+0x3a60>
   14a24:	movw	r1, #26672	; 0x6830
   14a28:	movt	r1, #1
   14a2c:	mov	r0, #0
   14a30:	mov	r2, #5
   14a34:	bl	10e80 <dcgettext@plt>
   14a38:	mov	ip, r0
   14a3c:	ldr	r3, [r7]
   14a40:	ldr	r0, [r7, #4]
   14a44:	ldr	r1, [r7, #8]
   14a48:	ldr	r6, [r7, #12]
   14a4c:	ldr	r5, [r7, #16]
   14a50:	ldr	r4, [r7, #20]
   14a54:	ldr	r2, [r7, #24]
   14a58:	ldr	lr, [r7, #28]
   14a5c:	ldr	r7, [r7, #32]
   14a60:	stm	sp, {r0, r1, r6}
   14a64:	str	r5, [sp, #12]
   14a68:	str	r4, [sp, #16]
   14a6c:	str	r2, [sp, #20]
   14a70:	str	lr, [sp, #24]
   14a74:	str	r7, [sp, #28]
   14a78:	b	14ac0 <__mempcpy_chk@plt+0x3a54>
   14a7c:	movw	r1, #26624	; 0x6800
   14a80:	movt	r1, #1
   14a84:	mov	r0, #0
   14a88:	mov	r2, #5
   14a8c:	bl	10e80 <dcgettext@plt>
   14a90:	mov	ip, r0
   14a94:	ldr	r3, [r7]
   14a98:	ldmib	r7, {r0, r1, r6}
   14a9c:	ldr	r5, [r7, #16]
   14aa0:	ldr	r4, [r7, #20]
   14aa4:	ldr	r2, [r7, #24]
   14aa8:	ldr	r7, [r7, #28]
   14aac:	stm	sp, {r0, r1, r6}
   14ab0:	str	r5, [sp, #12]
   14ab4:	str	r4, [sp, #16]
   14ab8:	str	r2, [sp, #20]
   14abc:	str	r7, [sp, #24]
   14ac0:	mov	r0, r8
   14ac4:	mov	r1, #1
   14ac8:	mov	r2, ip
   14acc:	bl	10fd0 <__fprintf_chk@plt>
   14ad0:	sub	sp, fp, #24
   14ad4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ad8:	push	{r4, sl, fp, lr}
   14adc:	add	fp, sp, #8
   14ae0:	sub	sp, sp, #8
   14ae4:	mov	lr, #0
   14ae8:	ldr	ip, [fp, #8]
   14aec:	ldr	r4, [ip, lr, lsl #2]
   14af0:	add	lr, lr, #1
   14af4:	cmp	r4, #0
   14af8:	bne	14aec <__mempcpy_chk@plt+0x3a80>
   14afc:	sub	r4, lr, #1
   14b00:	str	ip, [sp]
   14b04:	str	r4, [sp, #4]
   14b08:	bl	147a4 <__mempcpy_chk@plt+0x3738>
   14b0c:	sub	sp, fp, #8
   14b10:	pop	{r4, sl, fp, pc}
   14b14:	push	{r4, r5, fp, lr}
   14b18:	add	fp, sp, #8
   14b1c:	sub	sp, sp, #48	; 0x30
   14b20:	mov	ip, #0
   14b24:	ldr	r4, [fp, #8]
   14b28:	add	lr, sp, #8
   14b2c:	ldr	r5, [r4]
   14b30:	str	r5, [lr, ip, lsl #2]
   14b34:	cmp	r5, #0
   14b38:	beq	14b50 <__mempcpy_chk@plt+0x3ae4>
   14b3c:	add	ip, ip, #1
   14b40:	add	r4, r4, #4
   14b44:	cmp	ip, #10
   14b48:	bne	14b2c <__mempcpy_chk@plt+0x3ac0>
   14b4c:	mov	ip, #10
   14b50:	str	lr, [sp]
   14b54:	str	ip, [sp, #4]
   14b58:	bl	147a4 <__mempcpy_chk@plt+0x3738>
   14b5c:	sub	sp, fp, #8
   14b60:	pop	{r4, r5, fp, pc}
   14b64:	push	{fp, lr}
   14b68:	mov	fp, sp
   14b6c:	sub	sp, sp, #8
   14b70:	add	ip, fp, #8
   14b74:	str	ip, [sp, #4]
   14b78:	str	ip, [sp]
   14b7c:	bl	14b14 <__mempcpy_chk@plt+0x3aa8>
   14b80:	mov	sp, fp
   14b84:	pop	{fp, pc}
   14b88:	push	{fp, lr}
   14b8c:	mov	fp, sp
   14b90:	movw	r0, #28996	; 0x7144
   14b94:	movt	r0, #2
   14b98:	ldr	r1, [r0]
   14b9c:	movw	r0, #23547	; 0x5bfb
   14ba0:	movt	r0, #1
   14ba4:	bl	10dfc <fputs_unlocked@plt>
   14ba8:	movw	r1, #26784	; 0x68a0
   14bac:	movt	r1, #1
   14bb0:	mov	r0, #0
   14bb4:	mov	r2, #5
   14bb8:	bl	10e80 <dcgettext@plt>
   14bbc:	mov	r1, r0
   14bc0:	movw	r2, #26804	; 0x68b4
   14bc4:	movt	r2, #1
   14bc8:	mov	r0, #1
   14bcc:	bl	10fac <__printf_chk@plt>
   14bd0:	movw	r1, #26826	; 0x68ca
   14bd4:	movt	r1, #1
   14bd8:	mov	r0, #0
   14bdc:	mov	r2, #5
   14be0:	bl	10e80 <dcgettext@plt>
   14be4:	mov	r1, r0
   14be8:	movw	r2, #24929	; 0x6161
   14bec:	movt	r2, #1
   14bf0:	movw	r3, #25149	; 0x623d
   14bf4:	movt	r3, #1
   14bf8:	mov	r0, #1
   14bfc:	bl	10fac <__printf_chk@plt>
   14c00:	movw	r1, #26846	; 0x68de
   14c04:	movt	r1, #1
   14c08:	mov	r0, #0
   14c0c:	mov	r2, #5
   14c10:	bl	10e80 <dcgettext@plt>
   14c14:	mov	r1, r0
   14c18:	movw	r2, #26885	; 0x6905
   14c1c:	movt	r2, #1
   14c20:	mov	r0, #1
   14c24:	pop	{fp, lr}
   14c28:	b	10fac <__printf_chk@plt>
   14c2c:	b	14c30 <__mempcpy_chk@plt+0x3bc4>
   14c30:	push	{r4, r5, r6, sl, fp, lr}
   14c34:	add	fp, sp, #16
   14c38:	mov	r4, r2
   14c3c:	mov	r5, r1
   14c40:	mov	r6, r0
   14c44:	bl	15988 <__mempcpy_chk@plt+0x491c>
   14c48:	cmp	r0, #0
   14c4c:	popne	{r4, r5, r6, sl, fp, pc}
   14c50:	cmp	r6, #0
   14c54:	beq	14c68 <__mempcpy_chk@plt+0x3bfc>
   14c58:	cmp	r5, #0
   14c5c:	cmpne	r4, #0
   14c60:	bne	14c68 <__mempcpy_chk@plt+0x3bfc>
   14c64:	pop	{r4, r5, r6, sl, fp, pc}
   14c68:	bl	14ff4 <__mempcpy_chk@plt+0x3f88>
   14c6c:	push	{fp, lr}
   14c70:	mov	fp, sp
   14c74:	bl	151fc <__mempcpy_chk@plt+0x4190>
   14c78:	pop	{fp, lr}
   14c7c:	b	14c80 <__mempcpy_chk@plt+0x3c14>
   14c80:	cmp	r0, #0
   14c84:	bxne	lr
   14c88:	push	{fp, lr}
   14c8c:	mov	fp, sp
   14c90:	bl	14ff4 <__mempcpy_chk@plt+0x3f88>
   14c94:	push	{fp, lr}
   14c98:	mov	fp, sp
   14c9c:	bl	158b8 <__mempcpy_chk@plt+0x484c>
   14ca0:	pop	{fp, lr}
   14ca4:	b	14c80 <__mempcpy_chk@plt+0x3c14>
   14ca8:	b	14c6c <__mempcpy_chk@plt+0x3c00>
   14cac:	push	{r4, r5, fp, lr}
   14cb0:	add	fp, sp, #8
   14cb4:	mov	r4, r1
   14cb8:	mov	r5, r0
   14cbc:	bl	1522c <__mempcpy_chk@plt+0x41c0>
   14cc0:	cmp	r0, #0
   14cc4:	popne	{r4, r5, fp, pc}
   14cc8:	cmp	r5, #0
   14ccc:	beq	14cdc <__mempcpy_chk@plt+0x3c70>
   14cd0:	cmp	r4, #0
   14cd4:	bne	14cdc <__mempcpy_chk@plt+0x3c70>
   14cd8:	pop	{r4, r5, fp, pc}
   14cdc:	bl	14ff4 <__mempcpy_chk@plt+0x3f88>
   14ce0:	push	{fp, lr}
   14ce4:	mov	fp, sp
   14ce8:	bl	158bc <__mempcpy_chk@plt+0x4850>
   14cec:	pop	{fp, lr}
   14cf0:	b	14c80 <__mempcpy_chk@plt+0x3c14>
   14cf4:	push	{fp, lr}
   14cf8:	mov	fp, sp
   14cfc:	bl	158cc <__mempcpy_chk@plt+0x4860>
   14d00:	pop	{fp, lr}
   14d04:	b	14c80 <__mempcpy_chk@plt+0x3c14>
   14d08:	mov	r2, r1
   14d0c:	mov	r1, r0
   14d10:	mov	r0, #0
   14d14:	b	14c30 <__mempcpy_chk@plt+0x3bc4>
   14d18:	mov	r2, r1
   14d1c:	mov	r1, r0
   14d20:	mov	r0, #0
   14d24:	b	14cf4 <__mempcpy_chk@plt+0x3c88>
   14d28:	mov	r2, #1
   14d2c:	b	14d30 <__mempcpy_chk@plt+0x3cc4>
   14d30:	push	{r4, r5, fp, lr}
   14d34:	add	fp, sp, #8
   14d38:	mov	r4, r1
   14d3c:	ldr	r5, [r1]
   14d40:	cmp	r0, #0
   14d44:	beq	14d5c <__mempcpy_chk@plt+0x3cf0>
   14d48:	mov	r1, #1
   14d4c:	add	r1, r1, r5, lsr #1
   14d50:	adds	r5, r5, r1
   14d54:	bcc	14d74 <__mempcpy_chk@plt+0x3d08>
   14d58:	bl	14ff4 <__mempcpy_chk@plt+0x3f88>
   14d5c:	cmp	r5, #0
   14d60:	bne	14d74 <__mempcpy_chk@plt+0x3d08>
   14d64:	mov	r1, #64	; 0x40
   14d68:	udiv	r5, r1, r2
   14d6c:	cmp	r2, #64	; 0x40
   14d70:	addhi	r5, r5, #1
   14d74:	mov	r1, r5
   14d78:	bl	14c30 <__mempcpy_chk@plt+0x3bc4>
   14d7c:	str	r5, [r4]
   14d80:	pop	{r4, r5, fp, pc}
   14d84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d88:	add	fp, sp, #24
   14d8c:	mov	r8, r1
   14d90:	ldr	r6, [r1]
   14d94:	add	r1, r6, r6, asr #1
   14d98:	cmp	r1, r6
   14d9c:	mvnvs	r1, #-2147483648	; 0x80000000
   14da0:	cmp	r1, r3
   14da4:	mov	r5, r1
   14da8:	movgt	r5, r3
   14dac:	cmn	r3, #1
   14db0:	movle	r5, r1
   14db4:	ldr	r4, [fp, #8]
   14db8:	cmn	r4, #1
   14dbc:	ble	14de4 <__mempcpy_chk@plt+0x3d78>
   14dc0:	cmp	r4, #0
   14dc4:	beq	14e38 <__mempcpy_chk@plt+0x3dcc>
   14dc8:	cmn	r5, #1
   14dcc:	ble	14e0c <__mempcpy_chk@plt+0x3da0>
   14dd0:	mvn	r7, #-2147483648	; 0x80000000
   14dd4:	udiv	r1, r7, r4
   14dd8:	cmp	r1, r5
   14ddc:	bge	14e38 <__mempcpy_chk@plt+0x3dcc>
   14de0:	b	14e48 <__mempcpy_chk@plt+0x3ddc>
   14de4:	cmn	r5, #1
   14de8:	ble	14e28 <__mempcpy_chk@plt+0x3dbc>
   14dec:	cmn	r4, #1
   14df0:	beq	14e38 <__mempcpy_chk@plt+0x3dcc>
   14df4:	mov	r1, #-2147483648	; 0x80000000
   14df8:	sdiv	r1, r1, r4
   14dfc:	mvn	r7, #-2147483648	; 0x80000000
   14e00:	cmp	r1, r5
   14e04:	bge	14e38 <__mempcpy_chk@plt+0x3dcc>
   14e08:	b	14e48 <__mempcpy_chk@plt+0x3ddc>
   14e0c:	beq	14e38 <__mempcpy_chk@plt+0x3dcc>
   14e10:	mov	r1, #-2147483648	; 0x80000000
   14e14:	sdiv	r1, r1, r5
   14e18:	mvn	r7, #-2147483648	; 0x80000000
   14e1c:	cmp	r1, r4
   14e20:	bge	14e38 <__mempcpy_chk@plt+0x3dcc>
   14e24:	b	14e48 <__mempcpy_chk@plt+0x3ddc>
   14e28:	mvn	r7, #-2147483648	; 0x80000000
   14e2c:	sdiv	r1, r7, r4
   14e30:	cmp	r5, r1
   14e34:	blt	14e48 <__mempcpy_chk@plt+0x3ddc>
   14e38:	mul	r1, r5, r4
   14e3c:	mov	r7, #64	; 0x40
   14e40:	cmp	r1, #63	; 0x3f
   14e44:	bgt	14e50 <__mempcpy_chk@plt+0x3de4>
   14e48:	sdiv	r5, r7, r4
   14e4c:	mul	r1, r5, r4
   14e50:	cmp	r0, #0
   14e54:	moveq	r7, #0
   14e58:	streq	r7, [r8]
   14e5c:	sub	r7, r5, r6
   14e60:	cmp	r7, r2
   14e64:	bge	14f10 <__mempcpy_chk@plt+0x3ea4>
   14e68:	add	r5, r6, r2
   14e6c:	mov	r1, #0
   14e70:	cmp	r5, r3
   14e74:	mov	r2, #0
   14e78:	movwgt	r2, #1
   14e7c:	cmn	r3, #1
   14e80:	movwgt	r1, #1
   14e84:	cmp	r5, r6
   14e88:	bvs	14ef8 <__mempcpy_chk@plt+0x3e8c>
   14e8c:	ands	r1, r1, r2
   14e90:	bne	14ef8 <__mempcpy_chk@plt+0x3e8c>
   14e94:	cmn	r4, #1
   14e98:	ble	14ec0 <__mempcpy_chk@plt+0x3e54>
   14e9c:	cmp	r4, #0
   14ea0:	beq	14f0c <__mempcpy_chk@plt+0x3ea0>
   14ea4:	cmn	r5, #1
   14ea8:	ble	14ee4 <__mempcpy_chk@plt+0x3e78>
   14eac:	mvn	r1, #-2147483648	; 0x80000000
   14eb0:	udiv	r1, r1, r4
   14eb4:	cmp	r1, r5
   14eb8:	bge	14f0c <__mempcpy_chk@plt+0x3ea0>
   14ebc:	b	14ef8 <__mempcpy_chk@plt+0x3e8c>
   14ec0:	cmn	r5, #1
   14ec4:	ble	14efc <__mempcpy_chk@plt+0x3e90>
   14ec8:	cmn	r4, #1
   14ecc:	beq	14f0c <__mempcpy_chk@plt+0x3ea0>
   14ed0:	mov	r1, #-2147483648	; 0x80000000
   14ed4:	sdiv	r1, r1, r4
   14ed8:	cmp	r1, r5
   14edc:	bge	14f0c <__mempcpy_chk@plt+0x3ea0>
   14ee0:	b	14ef8 <__mempcpy_chk@plt+0x3e8c>
   14ee4:	beq	14f0c <__mempcpy_chk@plt+0x3ea0>
   14ee8:	mov	r1, #-2147483648	; 0x80000000
   14eec:	sdiv	r1, r1, r5
   14ef0:	cmp	r1, r4
   14ef4:	bge	14f0c <__mempcpy_chk@plt+0x3ea0>
   14ef8:	bl	14ff4 <__mempcpy_chk@plt+0x3f88>
   14efc:	mvn	r1, #-2147483648	; 0x80000000
   14f00:	sdiv	r1, r1, r4
   14f04:	cmp	r5, r1
   14f08:	blt	14ef8 <__mempcpy_chk@plt+0x3e8c>
   14f0c:	mul	r1, r5, r4
   14f10:	bl	14cac <__mempcpy_chk@plt+0x3c40>
   14f14:	str	r5, [r8]
   14f18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f1c:	mov	r1, #1
   14f20:	b	14f24 <__mempcpy_chk@plt+0x3eb8>
   14f24:	push	{fp, lr}
   14f28:	mov	fp, sp
   14f2c:	bl	151a8 <__mempcpy_chk@plt+0x413c>
   14f30:	pop	{fp, lr}
   14f34:	b	14c80 <__mempcpy_chk@plt+0x3c14>
   14f38:	mov	r1, #1
   14f3c:	b	14f40 <__mempcpy_chk@plt+0x3ed4>
   14f40:	push	{fp, lr}
   14f44:	mov	fp, sp
   14f48:	bl	158c8 <__mempcpy_chk@plt+0x485c>
   14f4c:	pop	{fp, lr}
   14f50:	b	14c80 <__mempcpy_chk@plt+0x3c14>
   14f54:	push	{r4, r5, fp, lr}
   14f58:	add	fp, sp, #8
   14f5c:	mov	r4, r1
   14f60:	mov	r5, r0
   14f64:	mov	r0, r1
   14f68:	bl	14c6c <__mempcpy_chk@plt+0x3c00>
   14f6c:	mov	r1, r5
   14f70:	mov	r2, r4
   14f74:	pop	{r4, r5, fp, lr}
   14f78:	b	10e5c <memcpy@plt>
   14f7c:	push	{r4, r5, fp, lr}
   14f80:	add	fp, sp, #8
   14f84:	mov	r4, r1
   14f88:	mov	r5, r0
   14f8c:	mov	r0, r1
   14f90:	bl	14c94 <__mempcpy_chk@plt+0x3c28>
   14f94:	mov	r1, r5
   14f98:	mov	r2, r4
   14f9c:	pop	{r4, r5, fp, lr}
   14fa0:	b	10e5c <memcpy@plt>
   14fa4:	push	{r4, r5, fp, lr}
   14fa8:	add	fp, sp, #8
   14fac:	mov	r4, r1
   14fb0:	mov	r5, r0
   14fb4:	add	r0, r1, #1
   14fb8:	bl	14c94 <__mempcpy_chk@plt+0x3c28>
   14fbc:	mov	r1, #0
   14fc0:	strb	r1, [r0, r4]
   14fc4:	mov	r1, r5
   14fc8:	mov	r2, r4
   14fcc:	pop	{r4, r5, fp, lr}
   14fd0:	b	10e5c <memcpy@plt>
   14fd4:	push	{r4, sl, fp, lr}
   14fd8:	add	fp, sp, #8
   14fdc:	mov	r4, r0
   14fe0:	bl	10f7c <strlen@plt>
   14fe4:	add	r1, r0, #1
   14fe8:	mov	r0, r4
   14fec:	pop	{r4, sl, fp, lr}
   14ff0:	b	14f54 <__mempcpy_chk@plt+0x3ee8>
   14ff4:	push	{fp, lr}
   14ff8:	mov	fp, sp
   14ffc:	movw	r0, #28916	; 0x70f4
   15000:	movt	r0, #2
   15004:	ldr	r4, [r0]
   15008:	movw	r1, #26961	; 0x6951
   1500c:	movt	r1, #1
   15010:	mov	r0, #0
   15014:	mov	r2, #5
   15018:	bl	10e80 <dcgettext@plt>
   1501c:	mov	r3, r0
   15020:	movw	r2, #25363	; 0x6313
   15024:	movt	r2, #1
   15028:	mov	r0, r4
   1502c:	mov	r1, #0
   15030:	bl	10ef8 <error@plt>
   15034:	bl	11054 <abort@plt>
   15038:	sub	sp, sp, #12
   1503c:	push	{fp, lr}
   15040:	mov	fp, sp
   15044:	sub	sp, sp, #4
   15048:	add	ip, fp, #8
   1504c:	stm	ip, {r1, r2, r3}
   15050:	add	r1, fp, #8
   15054:	str	r1, [sp]
   15058:	bl	1506c <__mempcpy_chk@plt+0x4000>
   1505c:	mov	sp, fp
   15060:	pop	{fp, lr}
   15064:	add	sp, sp, #12
   15068:	bx	lr
   1506c:	push	{r4, r5, r6, sl, fp, lr}
   15070:	add	fp, sp, #16
   15074:	mov	r3, r1
   15078:	mov	r2, r0
   1507c:	movw	r5, #28996	; 0x7144
   15080:	movt	r5, #2
   15084:	ldr	r0, [r5]
   15088:	mov	r1, #1
   1508c:	bl	10f34 <__vfprintf_chk@plt>
   15090:	mov	r4, r0
   15094:	cmn	r0, #1
   15098:	bgt	150ac <__mempcpy_chk@plt+0x4040>
   1509c:	ldr	r0, [r5]
   150a0:	bl	10e44 <ferror@plt>
   150a4:	cmp	r0, #0
   150a8:	beq	150b4 <__mempcpy_chk@plt+0x4048>
   150ac:	mov	r0, r4
   150b0:	pop	{r4, r5, r6, sl, fp, pc}
   150b4:	movw	r0, #28916	; 0x70f4
   150b8:	movt	r0, #2
   150bc:	ldr	r5, [r0]
   150c0:	bl	10f88 <__errno_location@plt>
   150c4:	ldr	r6, [r0]
   150c8:	movw	r1, #26978	; 0x6962
   150cc:	movt	r1, #1
   150d0:	mov	r0, #0
   150d4:	mov	r2, #5
   150d8:	bl	10e80 <dcgettext@plt>
   150dc:	mov	r2, r0
   150e0:	mov	r0, r5
   150e4:	mov	r1, r6
   150e8:	bl	10ef8 <error@plt>
   150ec:	mov	r0, r4
   150f0:	pop	{r4, r5, r6, sl, fp, pc}
   150f4:	sub	sp, sp, #8
   150f8:	push	{fp, lr}
   150fc:	mov	fp, sp
   15100:	sub	sp, sp, #8
   15104:	str	r2, [fp, #8]
   15108:	str	r3, [fp, #12]
   1510c:	add	r2, fp, #8
   15110:	str	r2, [sp, #4]
   15114:	bl	15128 <__mempcpy_chk@plt+0x40bc>
   15118:	mov	sp, fp
   1511c:	pop	{fp, lr}
   15120:	add	sp, sp, #8
   15124:	bx	lr
   15128:	push	{r4, r5, r6, sl, fp, lr}
   1512c:	add	fp, sp, #16
   15130:	mov	r3, r2
   15134:	mov	r2, r1
   15138:	mov	r5, r0
   1513c:	mov	r1, #1
   15140:	bl	10f34 <__vfprintf_chk@plt>
   15144:	mov	r4, r0
   15148:	cmn	r0, #1
   1514c:	bgt	15160 <__mempcpy_chk@plt+0x40f4>
   15150:	mov	r0, r5
   15154:	bl	10e44 <ferror@plt>
   15158:	cmp	r0, #0
   1515c:	beq	15168 <__mempcpy_chk@plt+0x40fc>
   15160:	mov	r0, r4
   15164:	pop	{r4, r5, r6, sl, fp, pc}
   15168:	movw	r0, #28916	; 0x70f4
   1516c:	movt	r0, #2
   15170:	ldr	r5, [r0]
   15174:	bl	10f88 <__errno_location@plt>
   15178:	ldr	r6, [r0]
   1517c:	movw	r1, #26978	; 0x6962
   15180:	movt	r1, #1
   15184:	mov	r0, #0
   15188:	mov	r2, #5
   1518c:	bl	10e80 <dcgettext@plt>
   15190:	mov	r2, r0
   15194:	mov	r0, r5
   15198:	mov	r1, r6
   1519c:	bl	10ef8 <error@plt>
   151a0:	mov	r0, r4
   151a4:	pop	{r4, r5, r6, sl, fp, pc}
   151a8:	clz	r2, r1
   151ac:	lsr	r2, r2, #5
   151b0:	clz	r3, r0
   151b4:	lsr	r3, r3, #5
   151b8:	orrs	r2, r3, r2
   151bc:	movwne	r1, #1
   151c0:	movwne	r0, #1
   151c4:	cmp	r1, #0
   151c8:	beq	151f8 <__mempcpy_chk@plt+0x418c>
   151cc:	mvn	r2, #-2147483648	; 0x80000000
   151d0:	udiv	r2, r2, r1
   151d4:	cmp	r2, r0
   151d8:	bcs	151f8 <__mempcpy_chk@plt+0x418c>
   151dc:	push	{fp, lr}
   151e0:	mov	fp, sp
   151e4:	bl	10f88 <__errno_location@plt>
   151e8:	mov	r1, #12
   151ec:	str	r1, [r0]
   151f0:	mov	r0, #0
   151f4:	pop	{fp, pc}
   151f8:	b	10df0 <calloc@plt>
   151fc:	cmp	r0, #0
   15200:	movweq	r0, #1
   15204:	cmn	r0, #1
   15208:	ble	15210 <__mempcpy_chk@plt+0x41a4>
   1520c:	b	10f10 <malloc@plt>
   15210:	push	{fp, lr}
   15214:	mov	fp, sp
   15218:	bl	10f88 <__errno_location@plt>
   1521c:	mov	r1, #12
   15220:	str	r1, [r0]
   15224:	mov	r0, #0
   15228:	pop	{fp, pc}
   1522c:	push	{fp, lr}
   15230:	mov	fp, sp
   15234:	cmp	r0, #0
   15238:	beq	15254 <__mempcpy_chk@plt+0x41e8>
   1523c:	cmp	r1, #0
   15240:	beq	15260 <__mempcpy_chk@plt+0x41f4>
   15244:	cmn	r1, #1
   15248:	ble	1526c <__mempcpy_chk@plt+0x4200>
   1524c:	pop	{fp, lr}
   15250:	b	10e8c <realloc@plt>
   15254:	mov	r0, r1
   15258:	pop	{fp, lr}
   1525c:	b	151fc <__mempcpy_chk@plt+0x4190>
   15260:	bl	1278c <__mempcpy_chk@plt+0x1720>
   15264:	mov	r0, #0
   15268:	pop	{fp, pc}
   1526c:	bl	10f88 <__errno_location@plt>
   15270:	mov	r1, #12
   15274:	str	r1, [r0]
   15278:	mov	r0, #0
   1527c:	pop	{fp, pc}
   15280:	mov	r1, r0
   15284:	sub	r2, r0, #65	; 0x41
   15288:	mov	r0, #1
   1528c:	cmp	r2, #26
   15290:	subcs	r2, r1, #97	; 0x61
   15294:	cmpcs	r2, #26
   15298:	bcs	152a0 <__mempcpy_chk@plt+0x4234>
   1529c:	bx	lr
   152a0:	sub	r1, r1, #48	; 0x30
   152a4:	cmp	r1, #10
   152a8:	movcs	r0, #0
   152ac:	bx	lr
   152b0:	mov	r1, r0
   152b4:	sub	r2, r0, #65	; 0x41
   152b8:	mov	r0, #1
   152bc:	cmp	r2, #26
   152c0:	subcs	r1, r1, #97	; 0x61
   152c4:	cmpcs	r1, #26
   152c8:	movcs	r0, #0
   152cc:	bx	lr
   152d0:	mov	r1, #0
   152d4:	cmp	r0, #128	; 0x80
   152d8:	movwcc	r1, #1
   152dc:	mov	r0, r1
   152e0:	bx	lr
   152e4:	sub	r1, r0, #9
   152e8:	clz	r1, r1
   152ec:	lsr	r1, r1, #5
   152f0:	sub	r0, r0, #32
   152f4:	clz	r0, r0
   152f8:	lsr	r0, r0, #5
   152fc:	orr	r0, r0, r1
   15300:	bx	lr
   15304:	mov	r1, r0
   15308:	mov	r0, #1
   1530c:	cmp	r1, #32
   15310:	bxcc	lr
   15314:	cmp	r1, #127	; 0x7f
   15318:	movne	r0, #0
   1531c:	bx	lr
   15320:	sub	r1, r0, #48	; 0x30
   15324:	mov	r0, #0
   15328:	cmp	r1, #10
   1532c:	movwcc	r0, #1
   15330:	bx	lr
   15334:	sub	r1, r0, #33	; 0x21
   15338:	mov	r0, #0
   1533c:	cmp	r1, #94	; 0x5e
   15340:	movwcc	r0, #1
   15344:	bx	lr
   15348:	sub	r1, r0, #97	; 0x61
   1534c:	mov	r0, #0
   15350:	cmp	r1, #26
   15354:	movwcc	r0, #1
   15358:	bx	lr
   1535c:	sub	r1, r0, #32
   15360:	mov	r0, #0
   15364:	cmp	r1, #95	; 0x5f
   15368:	movwcc	r0, #1
   1536c:	bx	lr
   15370:	sub	r1, r0, #33	; 0x21
   15374:	cmp	r1, #93	; 0x5d
   15378:	bhi	15504 <__mempcpy_chk@plt+0x4498>
   1537c:	mov	r0, #1
   15380:	add	r2, pc, #0
   15384:	ldr	pc, [r2, r1, lsl #2]
   15388:	andeq	r5, r1, r0, lsl #10
   1538c:	andeq	r5, r1, r0, lsl #10
   15390:	andeq	r5, r1, r0, lsl #10
   15394:	andeq	r5, r1, r0, lsl #10
   15398:	andeq	r5, r1, r0, lsl #10
   1539c:	andeq	r5, r1, r0, lsl #10
   153a0:	andeq	r5, r1, r0, lsl #10
   153a4:	andeq	r5, r1, r0, lsl #10
   153a8:	andeq	r5, r1, r0, lsl #10
   153ac:	andeq	r5, r1, r0, lsl #10
   153b0:	andeq	r5, r1, r0, lsl #10
   153b4:	andeq	r5, r1, r0, lsl #10
   153b8:	andeq	r5, r1, r0, lsl #10
   153bc:	andeq	r5, r1, r0, lsl #10
   153c0:	andeq	r5, r1, r0, lsl #10
   153c4:	andeq	r5, r1, r4, lsl #10
   153c8:	andeq	r5, r1, r4, lsl #10
   153cc:	andeq	r5, r1, r4, lsl #10
   153d0:	andeq	r5, r1, r4, lsl #10
   153d4:	andeq	r5, r1, r4, lsl #10
   153d8:	andeq	r5, r1, r4, lsl #10
   153dc:	andeq	r5, r1, r4, lsl #10
   153e0:	andeq	r5, r1, r4, lsl #10
   153e4:	andeq	r5, r1, r4, lsl #10
   153e8:	andeq	r5, r1, r4, lsl #10
   153ec:	andeq	r5, r1, r0, lsl #10
   153f0:	andeq	r5, r1, r0, lsl #10
   153f4:	andeq	r5, r1, r0, lsl #10
   153f8:	andeq	r5, r1, r0, lsl #10
   153fc:	andeq	r5, r1, r0, lsl #10
   15400:	andeq	r5, r1, r0, lsl #10
   15404:	andeq	r5, r1, r0, lsl #10
   15408:	andeq	r5, r1, r4, lsl #10
   1540c:	andeq	r5, r1, r4, lsl #10
   15410:	andeq	r5, r1, r4, lsl #10
   15414:	andeq	r5, r1, r4, lsl #10
   15418:	andeq	r5, r1, r4, lsl #10
   1541c:	andeq	r5, r1, r4, lsl #10
   15420:	andeq	r5, r1, r4, lsl #10
   15424:	andeq	r5, r1, r4, lsl #10
   15428:	andeq	r5, r1, r4, lsl #10
   1542c:	andeq	r5, r1, r4, lsl #10
   15430:	andeq	r5, r1, r4, lsl #10
   15434:	andeq	r5, r1, r4, lsl #10
   15438:	andeq	r5, r1, r4, lsl #10
   1543c:	andeq	r5, r1, r4, lsl #10
   15440:	andeq	r5, r1, r4, lsl #10
   15444:	andeq	r5, r1, r4, lsl #10
   15448:	andeq	r5, r1, r4, lsl #10
   1544c:	andeq	r5, r1, r4, lsl #10
   15450:	andeq	r5, r1, r4, lsl #10
   15454:	andeq	r5, r1, r4, lsl #10
   15458:	andeq	r5, r1, r4, lsl #10
   1545c:	andeq	r5, r1, r4, lsl #10
   15460:	andeq	r5, r1, r4, lsl #10
   15464:	andeq	r5, r1, r4, lsl #10
   15468:	andeq	r5, r1, r4, lsl #10
   1546c:	andeq	r5, r1, r4, lsl #10
   15470:	andeq	r5, r1, r0, lsl #10
   15474:	andeq	r5, r1, r0, lsl #10
   15478:	andeq	r5, r1, r0, lsl #10
   1547c:	andeq	r5, r1, r0, lsl #10
   15480:	andeq	r5, r1, r0, lsl #10
   15484:	andeq	r5, r1, r0, lsl #10
   15488:	andeq	r5, r1, r4, lsl #10
   1548c:	andeq	r5, r1, r4, lsl #10
   15490:	andeq	r5, r1, r4, lsl #10
   15494:	andeq	r5, r1, r4, lsl #10
   15498:	andeq	r5, r1, r4, lsl #10
   1549c:	andeq	r5, r1, r4, lsl #10
   154a0:	andeq	r5, r1, r4, lsl #10
   154a4:	andeq	r5, r1, r4, lsl #10
   154a8:	andeq	r5, r1, r4, lsl #10
   154ac:	andeq	r5, r1, r4, lsl #10
   154b0:	andeq	r5, r1, r4, lsl #10
   154b4:	andeq	r5, r1, r4, lsl #10
   154b8:	andeq	r5, r1, r4, lsl #10
   154bc:	andeq	r5, r1, r4, lsl #10
   154c0:	andeq	r5, r1, r4, lsl #10
   154c4:	andeq	r5, r1, r4, lsl #10
   154c8:	andeq	r5, r1, r4, lsl #10
   154cc:	andeq	r5, r1, r4, lsl #10
   154d0:	andeq	r5, r1, r4, lsl #10
   154d4:	andeq	r5, r1, r4, lsl #10
   154d8:	andeq	r5, r1, r4, lsl #10
   154dc:	andeq	r5, r1, r4, lsl #10
   154e0:	andeq	r5, r1, r4, lsl #10
   154e4:	andeq	r5, r1, r4, lsl #10
   154e8:	andeq	r5, r1, r4, lsl #10
   154ec:	andeq	r5, r1, r4, lsl #10
   154f0:	andeq	r5, r1, r0, lsl #10
   154f4:	andeq	r5, r1, r0, lsl #10
   154f8:	andeq	r5, r1, r0, lsl #10
   154fc:	andeq	r5, r1, r0, lsl #10
   15500:	bx	lr
   15504:	mov	r0, #0
   15508:	bx	lr
   1550c:	sub	r0, r0, #9
   15510:	cmp	r0, #23
   15514:	movhi	r0, #0
   15518:	bxhi	lr
   1551c:	bic	r0, r0, #-16777216	; 0xff000000
   15520:	movw	r1, #31
   15524:	movt	r1, #128	; 0x80
   15528:	mov	r2, #1
   1552c:	and	r0, r2, r1, lsr r0
   15530:	bx	lr
   15534:	sub	r1, r0, #65	; 0x41
   15538:	mov	r0, #0
   1553c:	cmp	r1, #26
   15540:	movwcc	r0, #1
   15544:	bx	lr
   15548:	mov	r1, r0
   1554c:	sub	r2, r0, #48	; 0x30
   15550:	mov	r0, #1
   15554:	cmp	r2, #22
   15558:	bhi	15570 <__mempcpy_chk@plt+0x4504>
   1555c:	mov	ip, #1
   15560:	movw	r3, #1023	; 0x3ff
   15564:	movt	r3, #126	; 0x7e
   15568:	tst	r3, ip, lsl r2
   1556c:	bxne	lr
   15570:	sub	r1, r1, #97	; 0x61
   15574:	cmp	r1, #6
   15578:	movcs	r0, #0
   1557c:	bxcs	lr
   15580:	bx	lr
   15584:	sub	r1, r0, #65	; 0x41
   15588:	cmp	r1, #26
   1558c:	addcc	r0, r0, #32
   15590:	bx	lr
   15594:	sub	r1, r0, #97	; 0x61
   15598:	cmp	r1, #26
   1559c:	subcc	r0, r0, #32
   155a0:	bx	lr
   155a4:	push	{r4, r5, r6, sl, fp, lr}
   155a8:	add	fp, sp, #16
   155ac:	vpush	{d8}
   155b0:	mov	r4, r1
   155b4:	mov	r5, r0
   155b8:	bl	15624 <__mempcpy_chk@plt+0x45b8>
   155bc:	cmp	r0, #0
   155c0:	beq	15608 <__mempcpy_chk@plt+0x459c>
   155c4:	bl	10e08 <uselocale@plt>
   155c8:	cmp	r0, #0
   155cc:	beq	15608 <__mempcpy_chk@plt+0x459c>
   155d0:	mov	r6, r0
   155d4:	mov	r0, r5
   155d8:	mov	r1, r4
   155dc:	bl	10e74 <strtold@plt>
   155e0:	vorr	d8, d0, d0
   155e4:	bl	10f88 <__errno_location@plt>
   155e8:	mov	r4, r0
   155ec:	ldr	r5, [r0]
   155f0:	mov	r0, r6
   155f4:	bl	10e08 <uselocale@plt>
   155f8:	cmp	r0, #0
   155fc:	beq	15620 <__mempcpy_chk@plt+0x45b4>
   15600:	str	r5, [r4]
   15604:	b	15614 <__mempcpy_chk@plt+0x45a8>
   15608:	vmov.i32	d8, #0	; 0x00000000
   1560c:	cmp	r4, #0
   15610:	strne	r5, [r4]
   15614:	vorr	d0, d8, d8
   15618:	vpop	{d8}
   1561c:	pop	{r4, r5, r6, sl, fp, pc}
   15620:	bl	11054 <abort@plt>
   15624:	push	{r4, sl, fp, lr}
   15628:	add	fp, sp, #8
   1562c:	movw	r4, #29340	; 0x729c
   15630:	movt	r4, #2
   15634:	ldr	r0, [r4]
   15638:	cmp	r0, #0
   1563c:	beq	15648 <__mempcpy_chk@plt+0x45dc>
   15640:	ldr	r0, [r4]
   15644:	pop	{r4, sl, fp, pc}
   15648:	movw	r1, #27010	; 0x6982
   1564c:	movt	r1, #1
   15650:	movw	r0, #8127	; 0x1fbf
   15654:	mov	r2, #0
   15658:	bl	11030 <newlocale@plt>
   1565c:	str	r0, [r4]
   15660:	ldr	r0, [r4]
   15664:	pop	{r4, sl, fp, pc}
   15668:	push	{r4, r5, r6, sl, fp, lr}
   1566c:	add	fp, sp, #16
   15670:	mov	r4, r0
   15674:	bl	10ed4 <__fpending@plt>
   15678:	mov	r5, r0
   1567c:	mov	r0, r4
   15680:	bl	10ee0 <ferror_unlocked@plt>
   15684:	mov	r6, r0
   15688:	mov	r0, r4
   1568c:	bl	156ec <__mempcpy_chk@plt+0x4680>
   15690:	cmp	r6, #0
   15694:	beq	156b8 <__mempcpy_chk@plt+0x464c>
   15698:	mvn	r4, #0
   1569c:	cmp	r0, #0
   156a0:	bne	156e4 <__mempcpy_chk@plt+0x4678>
   156a4:	bl	10f88 <__errno_location@plt>
   156a8:	mov	r1, #0
   156ac:	str	r1, [r0]
   156b0:	mov	r0, r4
   156b4:	pop	{r4, r5, r6, sl, fp, pc}
   156b8:	cmp	r0, #0
   156bc:	mov	r4, r0
   156c0:	mvnne	r4, #0
   156c4:	cmp	r5, #0
   156c8:	bne	156e4 <__mempcpy_chk@plt+0x4678>
   156cc:	cmp	r0, #0
   156d0:	beq	156e4 <__mempcpy_chk@plt+0x4678>
   156d4:	bl	10f88 <__errno_location@plt>
   156d8:	ldr	r0, [r0]
   156dc:	subs	r4, r0, #9
   156e0:	mvnne	r4, #0
   156e4:	mov	r0, r4
   156e8:	pop	{r4, r5, r6, sl, fp, pc}
   156ec:	push	{r4, r5, fp, lr}
   156f0:	add	fp, sp, #8
   156f4:	sub	sp, sp, #8
   156f8:	mov	r4, r0
   156fc:	bl	10fb8 <fileno@plt>
   15700:	cmn	r0, #1
   15704:	ble	1577c <__mempcpy_chk@plt+0x4710>
   15708:	mov	r0, r4
   1570c:	bl	10f40 <__freading@plt>
   15710:	cmp	r0, #0
   15714:	beq	15740 <__mempcpy_chk@plt+0x46d4>
   15718:	mov	r0, r4
   1571c:	bl	10fb8 <fileno@plt>
   15720:	mov	r1, #1
   15724:	str	r1, [sp]
   15728:	mov	r2, #0
   1572c:	mov	r3, #0
   15730:	bl	10ebc <lseek64@plt>
   15734:	and	r0, r0, r1
   15738:	cmn	r0, #1
   1573c:	beq	1577c <__mempcpy_chk@plt+0x4710>
   15740:	mov	r0, r4
   15744:	bl	1578c <__mempcpy_chk@plt+0x4720>
   15748:	cmp	r0, #0
   1574c:	beq	1577c <__mempcpy_chk@plt+0x4710>
   15750:	bl	10f88 <__errno_location@plt>
   15754:	ldr	r5, [r0]
   15758:	mov	r0, r4
   1575c:	bl	10ff4 <fclose@plt>
   15760:	cmp	r5, #0
   15764:	beq	15774 <__mempcpy_chk@plt+0x4708>
   15768:	bl	10f88 <__errno_location@plt>
   1576c:	str	r5, [r0]
   15770:	mvn	r0, #0
   15774:	sub	sp, fp, #8
   15778:	pop	{r4, r5, fp, pc}
   1577c:	mov	r0, r4
   15780:	sub	sp, fp, #8
   15784:	pop	{r4, r5, fp, lr}
   15788:	b	10ff4 <fclose@plt>
   1578c:	push	{r4, sl, fp, lr}
   15790:	add	fp, sp, #8
   15794:	mov	r4, r0
   15798:	cmp	r0, #0
   1579c:	beq	157b4 <__mempcpy_chk@plt+0x4748>
   157a0:	mov	r0, r4
   157a4:	bl	10f40 <__freading@plt>
   157a8:	cmp	r0, #0
   157ac:	movne	r0, r4
   157b0:	blne	157c0 <__mempcpy_chk@plt+0x4754>
   157b4:	mov	r0, r4
   157b8:	pop	{r4, sl, fp, lr}
   157bc:	b	10e2c <fflush@plt>
   157c0:	push	{fp, lr}
   157c4:	mov	fp, sp
   157c8:	sub	sp, sp, #8
   157cc:	ldrb	r1, [r0, #1]
   157d0:	tst	r1, #1
   157d4:	beq	157ec <__mempcpy_chk@plt+0x4780>
   157d8:	mov	r1, #1
   157dc:	str	r1, [sp]
   157e0:	mov	r2, #0
   157e4:	mov	r3, #0
   157e8:	bl	157f4 <__mempcpy_chk@plt+0x4788>
   157ec:	mov	sp, fp
   157f0:	pop	{fp, pc}
   157f4:	push	{r4, r5, r6, r7, fp, lr}
   157f8:	add	fp, sp, #16
   157fc:	sub	sp, sp, #8
   15800:	mov	r5, r3
   15804:	mov	r6, r2
   15808:	mov	r4, r0
   1580c:	ldr	r0, [r0, #4]
   15810:	ldr	r1, [r4, #8]
   15814:	cmp	r1, r0
   15818:	bne	15834 <__mempcpy_chk@plt+0x47c8>
   1581c:	ldrd	r0, [r4, #16]
   15820:	cmp	r1, r0
   15824:	bne	15834 <__mempcpy_chk@plt+0x47c8>
   15828:	ldr	r0, [r4, #36]	; 0x24
   1582c:	cmp	r0, #0
   15830:	beq	1584c <__mempcpy_chk@plt+0x47e0>
   15834:	mov	r0, r4
   15838:	mov	r2, r6
   1583c:	mov	r3, r5
   15840:	sub	sp, fp, #16
   15844:	pop	{r4, r5, r6, r7, fp, lr}
   15848:	b	11000 <fseeko64@plt>
   1584c:	ldr	r7, [fp, #8]
   15850:	mov	r0, r4
   15854:	bl	10fb8 <fileno@plt>
   15858:	str	r7, [sp]
   1585c:	mov	r2, r6
   15860:	mov	r3, r5
   15864:	bl	10ebc <lseek64@plt>
   15868:	and	r2, r0, r1
   1586c:	cmn	r2, #1
   15870:	beq	15890 <__mempcpy_chk@plt+0x4824>
   15874:	strd	r0, [r4, #80]	; 0x50
   15878:	ldr	r0, [r4]
   1587c:	bic	r0, r0, #16
   15880:	str	r0, [r4]
   15884:	mov	r0, #0
   15888:	sub	sp, fp, #16
   1588c:	pop	{r4, r5, r6, r7, fp, pc}
   15890:	mvn	r0, #0
   15894:	sub	sp, fp, #16
   15898:	pop	{r4, r5, r6, r7, fp, pc}
   1589c:	push	{fp, lr}
   158a0:	mov	fp, sp
   158a4:	bl	10f88 <__errno_location@plt>
   158a8:	mov	r1, #12
   158ac:	str	r1, [r0]
   158b0:	mov	r0, #0
   158b4:	pop	{fp, pc}
   158b8:	b	151fc <__mempcpy_chk@plt+0x4190>
   158bc:	cmp	r1, #0
   158c0:	orreq	r1, r1, #1
   158c4:	b	1522c <__mempcpy_chk@plt+0x41c0>
   158c8:	b	151a8 <__mempcpy_chk@plt+0x413c>
   158cc:	clz	r3, r2
   158d0:	lsr	ip, r3, #5
   158d4:	clz	r3, r1
   158d8:	lsr	r3, r3, #5
   158dc:	orrs	r3, r3, ip
   158e0:	movwne	r1, #1
   158e4:	movwne	r2, #1
   158e8:	b	15988 <__mempcpy_chk@plt+0x491c>
   158ec:	push	{fp, lr}
   158f0:	mov	fp, sp
   158f4:	mov	r0, #14
   158f8:	bl	11024 <nl_langinfo@plt>
   158fc:	movw	r1, #23548	; 0x5bfc
   15900:	movt	r1, #1
   15904:	cmp	r0, #0
   15908:	movne	r1, r0
   1590c:	ldrb	r2, [r1]
   15910:	movw	r0, #26014	; 0x659e
   15914:	movt	r0, #1
   15918:	cmp	r2, #0
   1591c:	movne	r0, r1
   15920:	pop	{fp, pc}
   15924:	push	{r4, r5, r6, r7, fp, lr}
   15928:	add	fp, sp, #16
   1592c:	sub	sp, sp, #8
   15930:	mov	r7, r2
   15934:	mov	r4, r1
   15938:	add	r5, sp, #4
   1593c:	cmp	r0, #0
   15940:	movne	r5, r0
   15944:	mov	r0, r5
   15948:	bl	10eec <mbrtowc@plt>
   1594c:	mov	r6, r0
   15950:	cmp	r7, #0
   15954:	beq	1597c <__mempcpy_chk@plt+0x4910>
   15958:	cmn	r6, #2
   1595c:	bcc	1597c <__mempcpy_chk@plt+0x4910>
   15960:	mov	r0, #0
   15964:	bl	159c4 <__mempcpy_chk@plt+0x4958>
   15968:	cmp	r0, #0
   1596c:	bne	1597c <__mempcpy_chk@plt+0x4910>
   15970:	ldrb	r0, [r4]
   15974:	str	r0, [r5]
   15978:	mov	r6, #1
   1597c:	mov	r0, r6
   15980:	sub	sp, fp, #16
   15984:	pop	{r4, r5, r6, r7, fp, pc}
   15988:	cmp	r2, #0
   1598c:	beq	159bc <__mempcpy_chk@plt+0x4950>
   15990:	mvn	r3, #0
   15994:	udiv	r3, r3, r2
   15998:	cmp	r3, r1
   1599c:	bcs	159bc <__mempcpy_chk@plt+0x4950>
   159a0:	push	{fp, lr}
   159a4:	mov	fp, sp
   159a8:	bl	10f88 <__errno_location@plt>
   159ac:	mov	r1, #12
   159b0:	str	r1, [r0]
   159b4:	mov	r0, #0
   159b8:	pop	{fp, pc}
   159bc:	mul	r1, r2, r1
   159c0:	b	1522c <__mempcpy_chk@plt+0x41c0>
   159c4:	push	{r4, sl, fp, lr}
   159c8:	add	fp, sp, #8
   159cc:	sub	sp, sp, #264	; 0x108
   159d0:	add	r1, sp, #7
   159d4:	movw	r2, #257	; 0x101
   159d8:	bl	15a30 <__mempcpy_chk@plt+0x49c4>
   159dc:	mov	r4, #0
   159e0:	cmp	r0, #0
   159e4:	bne	15a24 <__mempcpy_chk@plt+0x49b8>
   159e8:	add	r0, sp, #7
   159ec:	movw	r1, #27010	; 0x6982
   159f0:	movt	r1, #1
   159f4:	mov	r2, #2
   159f8:	bl	10f70 <bcmp@plt>
   159fc:	cmp	r0, #0
   15a00:	beq	15a24 <__mempcpy_chk@plt+0x49b8>
   15a04:	add	r0, sp, #7
   15a08:	movw	r1, #27012	; 0x6984
   15a0c:	movt	r1, #1
   15a10:	mov	r2, #6
   15a14:	bl	10f70 <bcmp@plt>
   15a18:	mov	r4, r0
   15a1c:	cmp	r0, #0
   15a20:	movwne	r4, #1
   15a24:	mov	r0, r4
   15a28:	sub	sp, fp, #8
   15a2c:	pop	{r4, sl, fp, pc}
   15a30:	b	15a34 <__mempcpy_chk@plt+0x49c8>
   15a34:	push	{r4, r5, r6, r7, fp, lr}
   15a38:	add	fp, sp, #16
   15a3c:	mov	r6, r2
   15a40:	mov	r4, r1
   15a44:	bl	15acc <__mempcpy_chk@plt+0x4a60>
   15a48:	cmp	r0, #0
   15a4c:	beq	15a7c <__mempcpy_chk@plt+0x4a10>
   15a50:	mov	r7, r0
   15a54:	bl	10f7c <strlen@plt>
   15a58:	cmp	r0, r6
   15a5c:	bcs	15a98 <__mempcpy_chk@plt+0x4a2c>
   15a60:	add	r2, r0, #1
   15a64:	mov	r0, r4
   15a68:	mov	r1, r7
   15a6c:	bl	10e5c <memcpy@plt>
   15a70:	mov	r5, #0
   15a74:	mov	r0, r5
   15a78:	pop	{r4, r5, r6, r7, fp, pc}
   15a7c:	mov	r5, #22
   15a80:	cmp	r6, #0
   15a84:	beq	15ac0 <__mempcpy_chk@plt+0x4a54>
   15a88:	mov	r0, #0
   15a8c:	strb	r0, [r4]
   15a90:	mov	r0, r5
   15a94:	pop	{r4, r5, r6, r7, fp, pc}
   15a98:	mov	r5, #34	; 0x22
   15a9c:	cmp	r6, #0
   15aa0:	beq	15ac0 <__mempcpy_chk@plt+0x4a54>
   15aa4:	sub	r6, r6, #1
   15aa8:	mov	r0, r4
   15aac:	mov	r1, r7
   15ab0:	mov	r2, r6
   15ab4:	bl	10e5c <memcpy@plt>
   15ab8:	mov	r0, #0
   15abc:	strb	r0, [r4, r6]
   15ac0:	mov	r0, r5
   15ac4:	pop	{r4, r5, r6, r7, fp, pc}
   15ac8:	b	15acc <__mempcpy_chk@plt+0x4a60>
   15acc:	mov	r1, #0
   15ad0:	b	1100c <setlocale@plt>
   15ad4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15ad8:	mov	r7, r0
   15adc:	ldr	r6, [pc, #72]	; 15b2c <__mempcpy_chk@plt+0x4ac0>
   15ae0:	ldr	r5, [pc, #72]	; 15b30 <__mempcpy_chk@plt+0x4ac4>
   15ae4:	add	r6, pc, r6
   15ae8:	add	r5, pc, r5
   15aec:	sub	r6, r6, r5
   15af0:	mov	r8, r1
   15af4:	mov	r9, r2
   15af8:	bl	10dd0 <calloc@plt-0x20>
   15afc:	asrs	r6, r6, #2
   15b00:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b04:	mov	r4, #0
   15b08:	add	r4, r4, #1
   15b0c:	ldr	r3, [r5], #4
   15b10:	mov	r2, r9
   15b14:	mov	r1, r8
   15b18:	mov	r0, r7
   15b1c:	blx	r3
   15b20:	cmp	r6, r4
   15b24:	bne	15b08 <__mempcpy_chk@plt+0x4a9c>
   15b28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b2c:	andeq	r1, r1, r0, lsr #8
   15b30:	andeq	r1, r1, r8, lsl r4
   15b34:	bx	lr
   15b38:	ldr	r3, [pc, #12]	; 15b4c <__mempcpy_chk@plt+0x4ae0>
   15b3c:	mov	r1, #0
   15b40:	add	r3, pc, r3
   15b44:	ldr	r2, [r3]
   15b48:	b	10f94 <__cxa_atexit@plt>
   15b4c:	andeq	r1, r1, r4, lsr #11

Disassembly of section .fini:

00015b50 <.fini>:
   15b50:	push	{r3, lr}
   15b54:	pop	{r3, pc}
