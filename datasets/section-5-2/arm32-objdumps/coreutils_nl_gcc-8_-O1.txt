
../repos/coreutils/src/nl:     file format elf32-littlearm


Disassembly of section .init:

00010f70 <.init>:
   10f70:	push	{r3, lr}
   10f74:	bl	112f0 <__assert_fail@plt+0x48>
   10f78:	pop	{r3, pc}

Disassembly of section .plt:

00010f7c <pthread_mutex_unlock@plt-0x14>:
   10f7c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f80:	ldr	lr, [pc, #4]	; 10f8c <pthread_mutex_unlock@plt-0x4>
   10f84:	add	lr, pc, lr
   10f88:	ldr	pc, [lr, #8]!
   10f8c:	andeq	r5, r2, r4, ror r0

00010f90 <pthread_mutex_unlock@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #151552	; 0x25000
   10f98:	ldr	pc, [ip, #116]!	; 0x74

00010f9c <calloc@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #151552	; 0x25000
   10fa4:	ldr	pc, [ip, #108]!	; 0x6c

00010fa8 <fputs_unlocked@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #151552	; 0x25000
   10fb0:	ldr	pc, [ip, #100]!	; 0x64

00010fb4 <wctype@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #151552	; 0x25000
   10fbc:	ldr	pc, [ip, #92]!	; 0x5c

00010fc0 <wcrtomb@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #151552	; 0x25000
   10fc8:	ldr	pc, [ip, #84]!	; 0x54

00010fcc <iswctype@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #151552	; 0x25000
   10fd4:	ldr	pc, [ip, #76]!	; 0x4c

00010fd8 <strcmp@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #151552	; 0x25000
   10fe0:	ldr	pc, [ip, #68]!	; 0x44

00010fe4 <posix_fadvise64@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #151552	; 0x25000
   10fec:	ldr	pc, [ip, #60]!	; 0x3c

00010ff0 <pthread_mutex_destroy@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #151552	; 0x25000
   10ff8:	ldr	pc, [ip, #52]!	; 0x34

00010ffc <fflush@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #151552	; 0x25000
   11004:	ldr	pc, [ip, #44]!	; 0x2c

00011008 <memmove@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #151552	; 0x25000
   11010:	ldr	pc, [ip, #36]!	; 0x24

00011014 <free@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #151552	; 0x25000
   1101c:	ldr	pc, [ip, #28]!

00011020 <pthread_mutex_lock@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #151552	; 0x25000
   11028:	ldr	pc, [ip, #20]!

0001102c <_exit@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #151552	; 0x25000
   11034:	ldr	pc, [ip, #12]!

00011038 <memcpy@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #151552	; 0x25000
   11040:	ldr	pc, [ip, #4]!

00011044 <pthread_mutex_init@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #36, 20	; 0x24000
   1104c:	ldr	pc, [ip, #4092]!	; 0xffc

00011050 <towlower@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #36, 20	; 0x24000
   11058:	ldr	pc, [ip, #4084]!	; 0xff4

0001105c <mbsinit@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #36, 20	; 0x24000
   11064:	ldr	pc, [ip, #4076]!	; 0xfec

00011068 <fwrite_unlocked@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #36, 20	; 0x24000
   11070:	ldr	pc, [ip, #4068]!	; 0xfe4

00011074 <memcmp@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #36, 20	; 0x24000
   1107c:	ldr	pc, [ip, #4060]!	; 0xfdc

00011080 <stpcpy@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #36, 20	; 0x24000
   11088:	ldr	pc, [ip, #4052]!	; 0xfd4

0001108c <fputc_unlocked@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #36, 20	; 0x24000
   11094:	ldr	pc, [ip, #4044]!	; 0xfcc

00011098 <dcgettext@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #36, 20	; 0x24000
   110a0:	ldr	pc, [ip, #4036]!	; 0xfc4

000110a4 <realloc@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #36, 20	; 0x24000
   110ac:	ldr	pc, [ip, #4028]!	; 0xfbc

000110b0 <textdomain@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #36, 20	; 0x24000
   110b8:	ldr	pc, [ip, #4020]!	; 0xfb4

000110bc <iswprint@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #36, 20	; 0x24000
   110c4:	ldr	pc, [ip, #4012]!	; 0xfac

000110c8 <fwrite@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #36, 20	; 0x24000
   110d0:	ldr	pc, [ip, #4004]!	; 0xfa4

000110d4 <lseek64@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #36, 20	; 0x24000
   110dc:	ldr	pc, [ip, #3996]!	; 0xf9c

000110e0 <__ctype_get_mb_cur_max@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #36, 20	; 0x24000
   110e8:	ldr	pc, [ip, #3988]!	; 0xf94

000110ec <strcpy@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #36, 20	; 0x24000
   110f4:	ldr	pc, [ip, #3980]!	; 0xf8c

000110f8 <__fpending@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #36, 20	; 0x24000
   11100:	ldr	pc, [ip, #3972]!	; 0xf84

00011104 <mbrtowc@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #36, 20	; 0x24000
   1110c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011110 <error@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #36, 20	; 0x24000
   11118:	ldr	pc, [ip, #3956]!	; 0xf74

0001111c <malloc@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #36, 20	; 0x24000
   11124:	ldr	pc, [ip, #3948]!	; 0xf6c

00011128 <__libc_start_main@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #36, 20	; 0x24000
   11130:	ldr	pc, [ip, #3940]!	; 0xf64

00011134 <__freading@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #36, 20	; 0x24000
   1113c:	ldr	pc, [ip, #3932]!	; 0xf5c

00011140 <__ctype_tolower_loc@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #36, 20	; 0x24000
   11148:	ldr	pc, [ip, #3924]!	; 0xf54

0001114c <__ctype_toupper_loc@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #36, 20	; 0x24000
   11154:	ldr	pc, [ip, #3916]!	; 0xf4c

00011158 <__gmon_start__@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #36, 20	; 0x24000
   11160:	ldr	pc, [ip, #3908]!	; 0xf44

00011164 <getopt_long@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #36, 20	; 0x24000
   1116c:	ldr	pc, [ip, #3900]!	; 0xf3c

00011170 <__ctype_b_loc@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #36, 20	; 0x24000
   11178:	ldr	pc, [ip, #3892]!	; 0xf34

0001117c <exit@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #36, 20	; 0x24000
   11184:	ldr	pc, [ip, #3884]!	; 0xf2c

00011188 <strlen@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #36, 20	; 0x24000
   11190:	ldr	pc, [ip, #3876]!	; 0xf24

00011194 <strchr@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #36, 20	; 0x24000
   1119c:	ldr	pc, [ip, #3868]!	; 0xf1c

000111a0 <__errno_location@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #36, 20	; 0x24000
   111a8:	ldr	pc, [ip, #3860]!	; 0xf14

000111ac <iswalnum@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #36, 20	; 0x24000
   111b4:	ldr	pc, [ip, #3852]!	; 0xf0c

000111b8 <__cxa_atexit@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #36, 20	; 0x24000
   111c0:	ldr	pc, [ip, #3844]!	; 0xf04

000111c4 <memset@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #36, 20	; 0x24000
   111cc:	ldr	pc, [ip, #3836]!	; 0xefc

000111d0 <btowc@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #36, 20	; 0x24000
   111d8:	ldr	pc, [ip, #3828]!	; 0xef4

000111dc <__printf_chk@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #36, 20	; 0x24000
   111e4:	ldr	pc, [ip, #3820]!	; 0xeec

000111e8 <fileno@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #36, 20	; 0x24000
   111f0:	ldr	pc, [ip, #3812]!	; 0xee4

000111f4 <__fprintf_chk@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #36, 20	; 0x24000
   111fc:	ldr	pc, [ip, #3804]!	; 0xedc

00011200 <fclose@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #36, 20	; 0x24000
   11208:	ldr	pc, [ip, #3796]!	; 0xed4

0001120c <fseeko64@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #36, 20	; 0x24000
   11214:	ldr	pc, [ip, #3788]!	; 0xecc

00011218 <__uflow@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #36, 20	; 0x24000
   11220:	ldr	pc, [ip, #3780]!	; 0xec4

00011224 <__overflow@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #36, 20	; 0x24000
   1122c:	ldr	pc, [ip, #3772]!	; 0xebc

00011230 <setlocale@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #36, 20	; 0x24000
   11238:	ldr	pc, [ip, #3764]!	; 0xeb4

0001123c <strrchr@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #36, 20	; 0x24000
   11244:	ldr	pc, [ip, #3756]!	; 0xeac

00011248 <nl_langinfo@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #36, 20	; 0x24000
   11250:	ldr	pc, [ip, #3748]!	; 0xea4

00011254 <clearerr_unlocked@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #36, 20	; 0x24000
   1125c:	ldr	pc, [ip, #3740]!	; 0xe9c

00011260 <__strtoll_internal@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #36, 20	; 0x24000
   11268:	ldr	pc, [ip, #3732]!	; 0xe94

0001126c <fopen64@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #36, 20	; 0x24000
   11274:	ldr	pc, [ip, #3724]!	; 0xe8c

00011278 <bindtextdomain@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #36, 20	; 0x24000
   11280:	ldr	pc, [ip, #3716]!	; 0xe84

00011284 <towupper@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #36, 20	; 0x24000
   1128c:	ldr	pc, [ip, #3708]!	; 0xe7c

00011290 <strncmp@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #36, 20	; 0x24000
   11298:	ldr	pc, [ip, #3700]!	; 0xe74

0001129c <abort@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #36, 20	; 0x24000
   112a4:	ldr	pc, [ip, #3692]!	; 0xe6c

000112a8 <__assert_fail@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #36, 20	; 0x24000
   112b0:	ldr	pc, [ip, #3684]!	; 0xe64

Disassembly of section .text:

000112b4 <.text>:
   112b4:	mov	fp, #0
   112b8:	mov	lr, #0
   112bc:	pop	{r1}		; (ldr r1, [sp], #4)
   112c0:	mov	r2, sp
   112c4:	push	{r2}		; (str r2, [sp, #-4]!)
   112c8:	push	{r0}		; (str r0, [sp, #-4]!)
   112cc:	ldr	ip, [pc, #16]	; 112e4 <__assert_fail@plt+0x3c>
   112d0:	push	{ip}		; (str ip, [sp, #-4]!)
   112d4:	ldr	r0, [pc, #12]	; 112e8 <__assert_fail@plt+0x40>
   112d8:	ldr	r3, [pc, #12]	; 112ec <__assert_fail@plt+0x44>
   112dc:	bl	11128 <__libc_start_main@plt>
   112e0:	bl	1129c <abort@plt>
   112e4:	andeq	r4, r2, ip, lsl #4
   112e8:	andeq	r1, r1, r0, lsl #29
   112ec:	andeq	r4, r2, ip, lsr #3
   112f0:	ldr	r3, [pc, #20]	; 1130c <__assert_fail@plt+0x64>
   112f4:	ldr	r2, [pc, #20]	; 11310 <__assert_fail@plt+0x68>
   112f8:	add	r3, pc, r3
   112fc:	ldr	r2, [r3, r2]
   11300:	cmp	r2, #0
   11304:	bxeq	lr
   11308:	b	11158 <__gmon_start__@plt>
   1130c:	andeq	r4, r2, r0, lsl #26
   11310:	andeq	r0, r0, r8, lsl r1
   11314:	ldr	r0, [pc, #24]	; 11334 <__assert_fail@plt+0x8c>
   11318:	ldr	r3, [pc, #24]	; 11338 <__assert_fail@plt+0x90>
   1131c:	cmp	r3, r0
   11320:	bxeq	lr
   11324:	ldr	r3, [pc, #16]	; 1133c <__assert_fail@plt+0x94>
   11328:	cmp	r3, #0
   1132c:	bxeq	lr
   11330:	bx	r3
   11334:			; <UNDEFINED> instruction: 0x000361b8
   11338:			; <UNDEFINED> instruction: 0x000361b8
   1133c:	andeq	r0, r0, r0
   11340:	ldr	r0, [pc, #36]	; 1136c <__assert_fail@plt+0xc4>
   11344:	ldr	r1, [pc, #36]	; 11370 <__assert_fail@plt+0xc8>
   11348:	sub	r1, r1, r0
   1134c:	asr	r1, r1, #2
   11350:	add	r1, r1, r1, lsr #31
   11354:	asrs	r1, r1, #1
   11358:	bxeq	lr
   1135c:	ldr	r3, [pc, #16]	; 11374 <__assert_fail@plt+0xcc>
   11360:	cmp	r3, #0
   11364:	bxeq	lr
   11368:	bx	r3
   1136c:			; <UNDEFINED> instruction: 0x000361b8
   11370:			; <UNDEFINED> instruction: 0x000361b8
   11374:	andeq	r0, r0, r0
   11378:	push	{r4, lr}
   1137c:	ldr	r4, [pc, #24]	; 1139c <__assert_fail@plt+0xf4>
   11380:	ldrb	r3, [r4]
   11384:	cmp	r3, #0
   11388:	popne	{r4, pc}
   1138c:	bl	11314 <__assert_fail@plt+0x6c>
   11390:	mov	r3, #1
   11394:	strb	r3, [r4]
   11398:	pop	{r4, pc}
   1139c:	ldrdeq	r6, [r3], -ip
   113a0:	b	11340 <__assert_fail@plt+0x98>
   113a4:	movw	r3, #24872	; 0x6128
   113a8:	movt	r3, #3
   113ac:	ldrb	r3, [r3]
   113b0:	cmp	r3, #0
   113b4:	beq	113d8 <__assert_fail@plt+0x130>
   113b8:	movw	r3, #25056	; 0x61e0
   113bc:	movt	r3, #3
   113c0:	movw	r2, #24872	; 0x6128
   113c4:	movt	r2, #3
   113c8:	ldrd	r0, [r2, #8]
   113cc:	strd	r0, [r3]
   113d0:	mov	r2, #0
   113d4:	strb	r2, [r3, #8]
   113d8:	bx	lr
   113dc:	strd	r4, [sp, #-12]!
   113e0:	str	lr, [sp, #8]
   113e4:	sub	sp, sp, #20
   113e8:	movw	r3, #25056	; 0x61e0
   113ec:	movt	r3, #3
   113f0:	ldrb	r3, [r3, #8]
   113f4:	cmp	r3, #0
   113f8:	bne	1146c <__assert_fail@plt+0x1c4>
   113fc:	movw	r4, #24872	; 0x6128
   11400:	movt	r4, #3
   11404:	ldr	r3, [r4, #24]
   11408:	str	r3, [sp, #8]
   1140c:	movw	r5, #25056	; 0x61e0
   11410:	movt	r5, #3
   11414:	ldrd	r2, [r5]
   11418:	strd	r2, [sp]
   1141c:	ldr	r2, [r4, #16]
   11420:	ldr	r1, [r4, #20]
   11424:	mov	r0, #1
   11428:	bl	111dc <__printf_chk@plt>
   1142c:	ldrd	r0, [r5]
   11430:	ldrd	r2, [r4, #32]
   11434:	adds	r4, r0, r2
   11438:	adcs	r5, r1, r3
   1143c:	movw	r3, #25056	; 0x61e0
   11440:	movt	r3, #3
   11444:	strd	r4, [r3]
   11448:	bvc	1145c <__assert_fail@plt+0x1b4>
   1144c:	movw	r3, #25056	; 0x61e0
   11450:	movt	r3, #3
   11454:	mov	r2, #1
   11458:	strb	r2, [r3, #8]
   1145c:	add	sp, sp, #20
   11460:	ldrd	r4, [sp]
   11464:	add	sp, sp, #8
   11468:	pop	{pc}		; (ldr pc, [sp], #4)
   1146c:	mov	r2, #5
   11470:	movw	r1, #17260	; 0x436c
   11474:	movt	r1, #2
   11478:	mov	r0, #0
   1147c:	bl	11098 <dcgettext@plt>
   11480:	mov	r2, r0
   11484:	mov	r1, #0
   11488:	mov	r0, #1
   1148c:	bl	11110 <error@plt>
   11490:	movw	r3, #25048	; 0x61d8
   11494:	movt	r3, #3
   11498:	ldr	ip, [r3]
   1149c:	ldrb	r3, [ip]
   114a0:	sub	r3, r3, #97	; 0x61
   114a4:	cmp	r3, #19
   114a8:	ldrls	pc, [pc, r3, lsl #2]
   114ac:	b	115a4 <__assert_fail@plt+0x2fc>
   114b0:	andeq	r1, r1, r0, lsl #10
   114b4:	andeq	r1, r1, r4, lsr #11
   114b8:	andeq	r1, r1, r4, lsr #11
   114bc:	andeq	r1, r1, r4, lsr #11
   114c0:	andeq	r1, r1, r4, lsr #11
   114c4:	andeq	r1, r1, r4, lsr #11
   114c8:	andeq	r1, r1, r4, lsr #11
   114cc:	andeq	r1, r1, r4, lsr #11
   114d0:	andeq	r1, r1, r4, lsr #11
   114d4:	andeq	r1, r1, r4, lsr #11
   114d8:	andeq	r1, r1, r4, lsr #11
   114dc:	andeq	r1, r1, r4, lsr #11
   114e0:	andeq	r1, r1, r4, lsr #11
   114e4:	andeq	r1, r1, r0, lsl #10
   114e8:	andeq	r1, r1, r4, lsr #11
   114ec:	andeq	r1, r1, ip, lsl #10
   114f0:	andeq	r1, r1, r4, lsr #11
   114f4:	andeq	r1, r1, r4, lsr #11
   114f8:	andeq	r1, r1, r4, lsr #11
   114fc:	andeq	r1, r1, r0, lsl #10
   11500:	str	ip, [r0]
   11504:	mov	r0, #1
   11508:	bx	lr
   1150c:	strd	r4, [sp, #-16]!
   11510:	str	r6, [sp, #8]
   11514:	str	lr, [sp, #12]
   11518:	mov	r4, r1
   1151c:	movw	r3, #25048	; 0x61d8
   11520:	movt	r3, #3
   11524:	add	r1, ip, #1
   11528:	str	r1, [r3]
   1152c:	str	ip, [r0]
   11530:	mov	r1, #0
   11534:	str	r1, [r4]
   11538:	str	r1, [r4, #4]
   1153c:	str	r2, [r4, #16]
   11540:	str	r1, [r4, #20]
   11544:	movw	r2, #26304	; 0x66c0
   11548:	movt	r2, #3
   1154c:	movw	r1, #710	; 0x2c6
   11550:	str	r1, [r2]
   11554:	ldr	r5, [r3]
   11558:	mov	r0, r5
   1155c:	bl	11188 <strlen@plt>
   11560:	mov	r2, r4
   11564:	mov	r1, r0
   11568:	mov	r0, r5
   1156c:	bl	21e40 <__assert_fail@plt+0x10b98>
   11570:	cmp	r0, #0
   11574:	bne	1158c <__assert_fail@plt+0x2e4>
   11578:	mov	r0, #1
   1157c:	ldrd	r4, [sp]
   11580:	ldr	r6, [sp, #8]
   11584:	add	sp, sp, #12
   11588:	pop	{pc}		; (ldr pc, [sp], #4)
   1158c:	mov	r3, r0
   11590:	movw	r2, #19472	; 0x4c10
   11594:	movt	r2, #2
   11598:	mov	r1, #0
   1159c:	mov	r0, #1
   115a0:	bl	11110 <error@plt>
   115a4:	mov	r0, #0
   115a8:	bx	lr
   115ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   115b0:	strd	r6, [sp, #8]
   115b4:	strd	r8, [sp, #16]
   115b8:	strd	sl, [sp, #24]
   115bc:	str	lr, [sp, #32]
   115c0:	sub	sp, sp, #28
   115c4:	str	r0, [sp, #12]
   115c8:	movw	r1, #17284	; 0x4384
   115cc:	movt	r1, #2
   115d0:	bl	10fd8 <strcmp@plt>
   115d4:	cmp	r0, #0
   115d8:	bne	11620 <__assert_fail@plt+0x378>
   115dc:	movw	r3, #25056	; 0x61e0
   115e0:	movt	r3, #3
   115e4:	mov	r2, #1
   115e8:	strb	r2, [r3, #9]
   115ec:	movw	r3, #25040	; 0x61d0
   115f0:	movt	r3, #3
   115f4:	ldr	r9, [r3]
   115f8:	mov	r1, #2
   115fc:	mov	r0, r9
   11600:	bl	12858 <__assert_fail@plt+0x15b0>
   11604:	movw	r4, #25056	; 0x61e0
   11608:	movt	r4, #3
   1160c:	movw	r5, #25044	; 0x61d4
   11610:	movt	r5, #3
   11614:	movw	r6, #24872	; 0x6128
   11618:	movt	r6, #3
   1161c:	b	1182c <__assert_fail@plt+0x584>
   11620:	movw	r1, #20924	; 0x51bc
   11624:	movt	r1, #2
   11628:	ldr	r0, [sp, #12]
   1162c:	bl	1126c <fopen64@plt>
   11630:	subs	r9, r0, #0
   11634:	bne	115f8 <__assert_fail@plt+0x350>
   11638:	bl	111a0 <__errno_location@plt>
   1163c:	ldr	r4, [r0]
   11640:	ldr	r2, [sp, #12]
   11644:	mov	r1, #3
   11648:	mov	r0, #0
   1164c:	bl	14d30 <__assert_fail@plt+0x3a88>
   11650:	mov	r3, r0
   11654:	movw	r2, #19472	; 0x4c10
   11658:	movt	r2, #2
   1165c:	mov	r1, r4
   11660:	mov	r0, #0
   11664:	bl	11110 <error@plt>
   11668:	mov	r0, #0
   1166c:	b	119b8 <__assert_fail@plt+0x710>
   11670:	ldr	r1, [r4, #32]
   11674:	mov	r0, sl
   11678:	bl	11074 <memcmp@plt>
   1167c:	cmp	r0, #0
   11680:	bne	11884 <__assert_fail@plt+0x5dc>
   11684:	ldr	r3, [r6, #64]	; 0x40
   11688:	str	r3, [r4, #64]	; 0x40
   1168c:	add	r3, r4, #132	; 0x84
   11690:	str	r3, [r4, #60]	; 0x3c
   11694:	bl	113a4 <__assert_fail@plt+0xfc>
   11698:	ldr	r0, [r5]
   1169c:	ldr	r3, [r0, #20]
   116a0:	ldr	r2, [r0, #24]
   116a4:	cmp	r3, r2
   116a8:	addcc	r2, r3, #1
   116ac:	strcc	r2, [r0, #20]
   116b0:	movcc	r2, #10
   116b4:	strbcc	r2, [r3]
   116b8:	bcc	1182c <__assert_fail@plt+0x584>
   116bc:	mov	r1, #10
   116c0:	bl	11224 <__overflow@plt>
   116c4:	b	1182c <__assert_fail@plt+0x584>
   116c8:	ldr	r1, [r4, #40]	; 0x28
   116cc:	mov	r0, sl
   116d0:	bl	11074 <memcmp@plt>
   116d4:	cmp	r0, #0
   116d8:	bne	11890 <__assert_fail@plt+0x5e8>
   116dc:	ldr	r3, [r6, #56]	; 0x38
   116e0:	str	r3, [r4, #64]	; 0x40
   116e4:	add	r3, r4, #68	; 0x44
   116e8:	str	r3, [r4, #60]	; 0x3c
   116ec:	bl	113a4 <__assert_fail@plt+0xfc>
   116f0:	ldr	r0, [r5]
   116f4:	ldr	r3, [r0, #20]
   116f8:	ldr	r2, [r0, #24]
   116fc:	cmp	r3, r2
   11700:	addcc	r2, r3, #1
   11704:	strcc	r2, [r0, #20]
   11708:	movcc	r2, #10
   1170c:	strbcc	r2, [r3]
   11710:	bcc	1182c <__assert_fail@plt+0x584>
   11714:	mov	r1, #10
   11718:	bl	11224 <__overflow@plt>
   1171c:	b	1182c <__assert_fail@plt+0x584>
   11720:	mov	r2, fp
   11724:	ldr	r1, [r4, #44]	; 0x2c
   11728:	mov	r0, sl
   1172c:	bl	11074 <memcmp@plt>
   11730:	cmp	r0, #0
   11734:	bne	11898 <__assert_fail@plt+0x5f0>
   11738:	ldr	r3, [r6, #60]	; 0x3c
   1173c:	str	r3, [r4, #64]	; 0x40
   11740:	add	r3, r4, #100	; 0x64
   11744:	str	r3, [r4, #60]	; 0x3c
   11748:	bl	113a4 <__assert_fail@plt+0xfc>
   1174c:	ldr	r0, [r5]
   11750:	ldr	r3, [r0, #20]
   11754:	ldr	r2, [r0, #24]
   11758:	cmp	r3, r2
   1175c:	addcc	r2, r3, #1
   11760:	strcc	r2, [r0, #20]
   11764:	movcc	r2, #10
   11768:	strbcc	r2, [r3]
   1176c:	bcc	1182c <__assert_fail@plt+0x584>
   11770:	mov	r1, #10
   11774:	bl	11224 <__overflow@plt>
   11778:	b	1182c <__assert_fail@plt+0x584>
   1177c:	ldrd	r0, [r6, #48]	; 0x30
   11780:	cmp	r0, #2
   11784:	sbcs	r3, r1, #0
   11788:	blt	117e4 <__assert_fail@plt+0x53c>
   1178c:	cmp	r8, #1
   11790:	bgt	117c0 <__assert_fail@plt+0x518>
   11794:	ldr	r3, [r4, #48]	; 0x30
   11798:	ldr	r2, [r4, #52]	; 0x34
   1179c:	adds	r3, r3, #1
   117a0:	str	r3, [sp, #16]
   117a4:	adc	r3, r2, #0
   117a8:	str	r3, [sp, #20]
   117ac:	ldrd	r2, [sp, #16]
   117b0:	strd	r2, [r4, #48]	; 0x30
   117b4:	cmp	r1, r3
   117b8:	cmpeq	r0, r2
   117bc:	bne	117d4 <__assert_fail@plt+0x52c>
   117c0:	bl	113dc <__assert_fail@plt+0x134>
   117c4:	mov	r2, #0
   117c8:	mov	r3, #0
   117cc:	strd	r2, [r4, #48]	; 0x30
   117d0:	b	11818 <__assert_fail@plt+0x570>
   117d4:	ldr	r1, [r5]
   117d8:	ldr	r0, [r4, #56]	; 0x38
   117dc:	bl	10fa8 <fputs_unlocked@plt>
   117e0:	b	11818 <__assert_fail@plt+0x570>
   117e4:	bl	113dc <__assert_fail@plt+0x134>
   117e8:	b	11818 <__assert_fail@plt+0x570>
   117ec:	cmp	r8, #1
   117f0:	ble	117fc <__assert_fail@plt+0x554>
   117f4:	bl	113dc <__assert_fail@plt+0x134>
   117f8:	b	11818 <__assert_fail@plt+0x570>
   117fc:	ldr	r1, [r5]
   11800:	ldr	r0, [r4, #56]	; 0x38
   11804:	bl	10fa8 <fputs_unlocked@plt>
   11808:	b	11818 <__assert_fail@plt+0x570>
   1180c:	ldr	r1, [r5]
   11810:	ldr	r0, [r4, #56]	; 0x38
   11814:	bl	10fa8 <fputs_unlocked@plt>
   11818:	ldr	r3, [r5]
   1181c:	ldr	r2, [r4, #16]
   11820:	mov	r1, #1
   11824:	ldr	r0, [r4, #20]
   11828:	bl	11068 <fwrite_unlocked@plt>
   1182c:	mov	r1, r9
   11830:	ldr	r0, [pc, #500]	; 11a2c <__assert_fail@plt+0x784>
   11834:	bl	12bc8 <__assert_fail@plt+0x1920>
   11838:	cmp	r0, #0
   1183c:	beq	11970 <__assert_fail@plt+0x6c8>
   11840:	ldr	r8, [r4, #16]
   11844:	sub	r7, r8, #1
   11848:	cmp	r7, #1
   1184c:	bls	11898 <__assert_fail@plt+0x5f0>
   11850:	ldr	fp, [r4, #24]
   11854:	cmp	fp, #1
   11858:	bls	11898 <__assert_fail@plt+0x5f0>
   1185c:	ldr	sl, [r4, #20]
   11860:	mov	r2, #2
   11864:	ldr	r1, [r6, #40]	; 0x28
   11868:	mov	r0, sl
   1186c:	bl	11074 <memcmp@plt>
   11870:	cmp	r0, #0
   11874:	bne	11898 <__assert_fail@plt+0x5f0>
   11878:	ldr	r2, [r4, #28]
   1187c:	cmp	r7, r2
   11880:	beq	11670 <__assert_fail@plt+0x3c8>
   11884:	ldr	r2, [r4, #36]	; 0x24
   11888:	cmp	r7, r2
   1188c:	beq	116c8 <__assert_fail@plt+0x420>
   11890:	cmp	r7, fp
   11894:	beq	11720 <__assert_fail@plt+0x478>
   11898:	ldr	r3, [r4, #64]	; 0x40
   1189c:	ldrb	r3, [r3]
   118a0:	sub	r3, r3, #97	; 0x61
   118a4:	cmp	r3, #19
   118a8:	ldrls	pc, [pc, r3, lsl #2]
   118ac:	b	11818 <__assert_fail@plt+0x570>
   118b0:	andeq	r1, r1, ip, ror r7
   118b4:	andeq	r1, r1, r8, lsl r8
   118b8:	andeq	r1, r1, r8, lsl r8
   118bc:	andeq	r1, r1, r8, lsl r8
   118c0:	andeq	r1, r1, r8, lsl r8
   118c4:	andeq	r1, r1, r8, lsl r8
   118c8:	andeq	r1, r1, r8, lsl r8
   118cc:	andeq	r1, r1, r8, lsl r8
   118d0:	andeq	r1, r1, r8, lsl r8
   118d4:	andeq	r1, r1, r8, lsl r8
   118d8:	andeq	r1, r1, r8, lsl r8
   118dc:	andeq	r1, r1, r8, lsl r8
   118e0:	andeq	r1, r1, r8, lsl r8
   118e4:	andeq	r1, r1, ip, lsl #16
   118e8:	andeq	r1, r1, r8, lsl r8
   118ec:	andeq	r1, r1, r0, lsl #18
   118f0:	andeq	r1, r1, r8, lsl r8
   118f4:	andeq	r1, r1, r8, lsl r8
   118f8:	andeq	r1, r1, r8, lsl r8
   118fc:	andeq	r1, r1, ip, ror #15
   11900:	mov	r3, #0
   11904:	str	r3, [sp, #4]
   11908:	str	r7, [sp]
   1190c:	mov	r2, r7
   11910:	ldr	r1, [r4, #20]
   11914:	ldr	r0, [r4, #60]	; 0x3c
   11918:	bl	22828 <__assert_fail@plt+0x11580>
   1191c:	cmn	r0, #2
   11920:	beq	11934 <__assert_fail@plt+0x68c>
   11924:	cmn	r0, #1
   11928:	beq	11960 <__assert_fail@plt+0x6b8>
   1192c:	bl	113dc <__assert_fail@plt+0x134>
   11930:	b	11818 <__assert_fail@plt+0x570>
   11934:	bl	111a0 <__errno_location@plt>
   11938:	ldr	r4, [r0]
   1193c:	mov	r2, #5
   11940:	movw	r1, #17288	; 0x4388
   11944:	movt	r1, #2
   11948:	mov	r0, #0
   1194c:	bl	11098 <dcgettext@plt>
   11950:	mov	r2, r0
   11954:	mov	r1, r4
   11958:	mov	r0, #1
   1195c:	bl	11110 <error@plt>
   11960:	ldr	r1, [r5]
   11964:	ldr	r0, [r4, #56]	; 0x38
   11968:	bl	10fa8 <fputs_unlocked@plt>
   1196c:	b	11818 <__assert_fail@plt+0x570>
   11970:	bl	111a0 <__errno_location@plt>
   11974:	mov	r5, r0
   11978:	ldr	r4, [r0]
   1197c:	ldr	r3, [r9]
   11980:	and	r3, r3, #32
   11984:	cmp	r3, #0
   11988:	moveq	r4, r3
   1198c:	movw	r1, #17284	; 0x4384
   11990:	movt	r1, #2
   11994:	ldr	r0, [sp, #12]
   11998:	bl	10fd8 <strcmp@plt>
   1199c:	cmp	r0, #0
   119a0:	bne	119d4 <__assert_fail@plt+0x72c>
   119a4:	mov	r0, r9
   119a8:	bl	11254 <clearerr_unlocked@plt>
   119ac:	cmp	r4, #0
   119b0:	moveq	r0, #1
   119b4:	bne	119fc <__assert_fail@plt+0x754>
   119b8:	add	sp, sp, #28
   119bc:	ldrd	r4, [sp]
   119c0:	ldrd	r6, [sp, #8]
   119c4:	ldrd	r8, [sp, #16]
   119c8:	ldrd	sl, [sp, #24]
   119cc:	add	sp, sp, #32
   119d0:	pop	{pc}		; (ldr pc, [sp], #4)
   119d4:	mov	r0, r9
   119d8:	bl	12898 <__assert_fail@plt+0x15f0>
   119dc:	clz	r3, r4
   119e0:	lsr	r3, r3, #5
   119e4:	cmp	r0, #0
   119e8:	movne	r0, r3
   119ec:	moveq	r0, #0
   119f0:	cmp	r0, #0
   119f4:	ldrne	r4, [r5]
   119f8:	b	119ac <__assert_fail@plt+0x704>
   119fc:	ldr	r2, [sp, #12]
   11a00:	mov	r1, #3
   11a04:	mov	r0, #0
   11a08:	bl	14d30 <__assert_fail@plt+0x3a88>
   11a0c:	mov	r3, r0
   11a10:	movw	r2, #19472	; 0x4c10
   11a14:	movt	r2, #2
   11a18:	mov	r1, r4
   11a1c:	mov	r0, #0
   11a20:	bl	11110 <error@plt>
   11a24:	mov	r0, #0
   11a28:	b	119b8 <__assert_fail@plt+0x710>
   11a2c:	andeq	r6, r3, ip, ror #3
   11a30:	push	{lr}		; (str lr, [sp, #-4]!)
   11a34:	sub	sp, sp, #60	; 0x3c
   11a38:	subs	r5, r0, #0
   11a3c:	beq	11a84 <__assert_fail@plt+0x7dc>
   11a40:	movw	r3, #25032	; 0x61c8
   11a44:	movt	r3, #3
   11a48:	ldr	r4, [r3]
   11a4c:	mov	r2, #5
   11a50:	movw	r1, #17328	; 0x43b0
   11a54:	movt	r1, #2
   11a58:	mov	r0, #0
   11a5c:	bl	11098 <dcgettext@plt>
   11a60:	movw	r3, #25996	; 0x658c
   11a64:	movt	r3, #3
   11a68:	ldr	r3, [r3]
   11a6c:	mov	r2, r0
   11a70:	mov	r1, #1
   11a74:	mov	r0, r4
   11a78:	bl	111f4 <__fprintf_chk@plt>
   11a7c:	mov	r0, r5
   11a80:	bl	1117c <exit@plt>
   11a84:	mov	r2, #5
   11a88:	movw	r1, #17368	; 0x43d8
   11a8c:	movt	r1, #2
   11a90:	mov	r0, #0
   11a94:	bl	11098 <dcgettext@plt>
   11a98:	movw	r3, #25996	; 0x658c
   11a9c:	movt	r3, #3
   11aa0:	ldr	r2, [r3]
   11aa4:	mov	r1, r0
   11aa8:	mov	r0, #1
   11aac:	bl	111dc <__printf_chk@plt>
   11ab0:	mov	r2, #5
   11ab4:	movw	r1, #17404	; 0x43fc
   11ab8:	movt	r1, #2
   11abc:	mov	r0, #0
   11ac0:	bl	11098 <dcgettext@plt>
   11ac4:	movw	r4, #25044	; 0x61d4
   11ac8:	movt	r4, #3
   11acc:	ldr	r1, [r4]
   11ad0:	bl	10fa8 <fputs_unlocked@plt>
   11ad4:	mov	r2, #5
   11ad8:	movw	r1, #17468	; 0x443c
   11adc:	movt	r1, #2
   11ae0:	mov	r0, #0
   11ae4:	bl	11098 <dcgettext@plt>
   11ae8:	ldr	r1, [r4]
   11aec:	bl	10fa8 <fputs_unlocked@plt>
   11af0:	mov	r2, #5
   11af4:	movw	r1, #17524	; 0x4474
   11af8:	movt	r1, #2
   11afc:	mov	r0, #0
   11b00:	bl	11098 <dcgettext@plt>
   11b04:	ldr	r1, [r4]
   11b08:	bl	10fa8 <fputs_unlocked@plt>
   11b0c:	mov	r2, #5
   11b10:	movw	r1, #17600	; 0x44c0
   11b14:	movt	r1, #2
   11b18:	mov	r0, #0
   11b1c:	bl	11098 <dcgettext@plt>
   11b20:	ldr	r1, [r4]
   11b24:	bl	10fa8 <fputs_unlocked@plt>
   11b28:	mov	r2, #5
   11b2c:	movw	r1, #17812	; 0x4594
   11b30:	movt	r1, #2
   11b34:	mov	r0, #0
   11b38:	bl	11098 <dcgettext@plt>
   11b3c:	ldr	r1, [r4]
   11b40:	bl	10fa8 <fputs_unlocked@plt>
   11b44:	mov	r2, #5
   11b48:	movw	r1, #18256	; 0x4750
   11b4c:	movt	r1, #2
   11b50:	mov	r0, #0
   11b54:	bl	11098 <dcgettext@plt>
   11b58:	ldr	r1, [r4]
   11b5c:	bl	10fa8 <fputs_unlocked@plt>
   11b60:	mov	r2, #5
   11b64:	movw	r1, #18400	; 0x47e0
   11b68:	movt	r1, #2
   11b6c:	mov	r0, #0
   11b70:	bl	11098 <dcgettext@plt>
   11b74:	ldr	r1, [r4]
   11b78:	bl	10fa8 <fputs_unlocked@plt>
   11b7c:	mov	r2, #5
   11b80:	movw	r1, #18448	; 0x4810
   11b84:	movt	r1, #2
   11b88:	mov	r0, #0
   11b8c:	bl	11098 <dcgettext@plt>
   11b90:	ldr	r1, [r4]
   11b94:	bl	10fa8 <fputs_unlocked@plt>
   11b98:	mov	r2, #5
   11b9c:	movw	r1, #18504	; 0x4848
   11ba0:	movt	r1, #2
   11ba4:	mov	r0, #0
   11ba8:	bl	11098 <dcgettext@plt>
   11bac:	ldr	r1, [r4]
   11bb0:	bl	10fa8 <fputs_unlocked@plt>
   11bb4:	mov	r2, #5
   11bb8:	movw	r1, #18828	; 0x498c
   11bbc:	movt	r1, #2
   11bc0:	mov	r0, #0
   11bc4:	bl	11098 <dcgettext@plt>
   11bc8:	ldr	r1, [r4]
   11bcc:	bl	10fa8 <fputs_unlocked@plt>
   11bd0:	mov	r2, #5
   11bd4:	movw	r1, #19032	; 0x4a58
   11bd8:	movt	r1, #2
   11bdc:	mov	r0, #0
   11be0:	bl	11098 <dcgettext@plt>
   11be4:	ldr	r1, [r4]
   11be8:	bl	10fa8 <fputs_unlocked@plt>
   11bec:	movw	r0, #16948	; 0x4234
   11bf0:	movt	r0, #2
   11bf4:	ldr	r1, [r0]
   11bf8:	ldr	r3, [r0, #4]
   11bfc:	str	r1, [sp]
   11c00:	str	r3, [sp, #4]
   11c04:	ldrd	r2, [r0, #8]
   11c08:	strd	r2, [sp, #8]
   11c0c:	ldrd	r2, [r0, #16]
   11c10:	strd	r2, [sp, #16]
   11c14:	ldrd	r2, [r0, #24]
   11c18:	strd	r2, [sp, #24]
   11c1c:	ldrd	r2, [r0, #32]
   11c20:	strd	r2, [sp, #32]
   11c24:	ldrd	r2, [r0, #40]	; 0x28
   11c28:	strd	r2, [sp, #40]	; 0x28
   11c2c:	ldrd	r2, [r0, #48]	; 0x30
   11c30:	strd	r2, [sp, #48]	; 0x30
   11c34:	cmp	r1, #0
   11c38:	moveq	r4, sp
   11c3c:	beq	11c68 <__assert_fail@plt+0x9c0>
   11c40:	mov	r4, sp
   11c44:	movw	r6, #17324	; 0x43ac
   11c48:	movt	r6, #2
   11c4c:	mov	r0, r6
   11c50:	bl	10fd8 <strcmp@plt>
   11c54:	cmp	r0, #0
   11c58:	beq	11c68 <__assert_fail@plt+0x9c0>
   11c5c:	ldr	r1, [r4, #8]!
   11c60:	cmp	r1, #0
   11c64:	bne	11c4c <__assert_fail@plt+0x9a4>
   11c68:	ldr	r4, [r4, #4]
   11c6c:	cmp	r4, #0
   11c70:	beq	11dcc <__assert_fail@plt+0xb24>
   11c74:	mov	r2, #5
   11c78:	movw	r1, #19180	; 0x4aec
   11c7c:	movt	r1, #2
   11c80:	mov	r0, #0
   11c84:	bl	11098 <dcgettext@plt>
   11c88:	movw	r3, #19204	; 0x4b04
   11c8c:	movt	r3, #2
   11c90:	movw	r2, #19244	; 0x4b2c
   11c94:	movt	r2, #2
   11c98:	mov	r1, r0
   11c9c:	mov	r0, #1
   11ca0:	bl	111dc <__printf_chk@plt>
   11ca4:	mov	r1, #0
   11ca8:	mov	r0, #5
   11cac:	bl	11230 <setlocale@plt>
   11cb0:	cmp	r0, #0
   11cb4:	beq	11cd0 <__assert_fail@plt+0xa28>
   11cb8:	mov	r2, #3
   11cbc:	movw	r1, #19260	; 0x4b3c
   11cc0:	movt	r1, #2
   11cc4:	bl	11290 <strncmp@plt>
   11cc8:	cmp	r0, #0
   11ccc:	bne	11d4c <__assert_fail@plt+0xaa4>
   11cd0:	mov	r2, #5
   11cd4:	movw	r1, #19336	; 0x4b88
   11cd8:	movt	r1, #2
   11cdc:	mov	r0, #0
   11ce0:	bl	11098 <dcgettext@plt>
   11ce4:	movw	r6, #17324	; 0x43ac
   11ce8:	movt	r6, #2
   11cec:	mov	r3, r6
   11cf0:	movw	r2, #19204	; 0x4b04
   11cf4:	movt	r2, #2
   11cf8:	mov	r1, r0
   11cfc:	mov	r0, #1
   11d00:	bl	111dc <__printf_chk@plt>
   11d04:	mov	r2, #5
   11d08:	movw	r1, #19364	; 0x4ba4
   11d0c:	movt	r1, #2
   11d10:	mov	r0, #0
   11d14:	bl	11098 <dcgettext@plt>
   11d18:	mov	r1, r0
   11d1c:	movw	r2, #19792	; 0x4d50
   11d20:	movt	r2, #2
   11d24:	movw	r3, #17400	; 0x43f8
   11d28:	movt	r3, #2
   11d2c:	cmp	r4, r6
   11d30:	moveq	r3, r2
   11d34:	mov	r2, r4
   11d38:	mov	r0, #1
   11d3c:	bl	111dc <__printf_chk@plt>
   11d40:	b	11a7c <__assert_fail@plt+0x7d4>
   11d44:	movw	r4, #17324	; 0x43ac
   11d48:	movt	r4, #2
   11d4c:	mov	r2, #5
   11d50:	movw	r1, #19264	; 0x4b40
   11d54:	movt	r1, #2
   11d58:	mov	r0, #0
   11d5c:	bl	11098 <dcgettext@plt>
   11d60:	movw	r3, #25044	; 0x61d4
   11d64:	movt	r3, #3
   11d68:	ldr	r1, [r3]
   11d6c:	bl	10fa8 <fputs_unlocked@plt>
   11d70:	b	11cd0 <__assert_fail@plt+0xa28>
   11d74:	mov	r2, #5
   11d78:	movw	r1, #19336	; 0x4b88
   11d7c:	movt	r1, #2
   11d80:	mov	r0, #0
   11d84:	bl	11098 <dcgettext@plt>
   11d88:	movw	r4, #17324	; 0x43ac
   11d8c:	movt	r4, #2
   11d90:	mov	r3, r4
   11d94:	movw	r2, #19204	; 0x4b04
   11d98:	movt	r2, #2
   11d9c:	mov	r1, r0
   11da0:	mov	r0, #1
   11da4:	bl	111dc <__printf_chk@plt>
   11da8:	mov	r2, #5
   11dac:	movw	r1, #19364	; 0x4ba4
   11db0:	movt	r1, #2
   11db4:	mov	r0, #0
   11db8:	bl	11098 <dcgettext@plt>
   11dbc:	mov	r1, r0
   11dc0:	movw	r3, #19792	; 0x4d50
   11dc4:	movt	r3, #2
   11dc8:	b	11d34 <__assert_fail@plt+0xa8c>
   11dcc:	mov	r2, #5
   11dd0:	movw	r1, #19180	; 0x4aec
   11dd4:	movt	r1, #2
   11dd8:	mov	r0, #0
   11ddc:	bl	11098 <dcgettext@plt>
   11de0:	movw	r3, #19204	; 0x4b04
   11de4:	movt	r3, #2
   11de8:	movw	r2, #19244	; 0x4b2c
   11dec:	movt	r2, #2
   11df0:	mov	r1, r0
   11df4:	mov	r0, #1
   11df8:	bl	111dc <__printf_chk@plt>
   11dfc:	mov	r1, #0
   11e00:	mov	r0, #5
   11e04:	bl	11230 <setlocale@plt>
   11e08:	cmp	r0, #0
   11e0c:	beq	11d74 <__assert_fail@plt+0xacc>
   11e10:	mov	r2, #3
   11e14:	movw	r1, #19260	; 0x4b3c
   11e18:	movt	r1, #2
   11e1c:	bl	11290 <strncmp@plt>
   11e20:	cmp	r0, #0
   11e24:	bne	11d44 <__assert_fail@plt+0xa9c>
   11e28:	mov	r2, #5
   11e2c:	movw	r1, #19336	; 0x4b88
   11e30:	movt	r1, #2
   11e34:	mov	r0, #0
   11e38:	bl	11098 <dcgettext@plt>
   11e3c:	movw	r4, #17324	; 0x43ac
   11e40:	movt	r4, #2
   11e44:	mov	r3, r4
   11e48:	movw	r2, #19204	; 0x4b04
   11e4c:	movt	r2, #2
   11e50:	mov	r1, r0
   11e54:	mov	r0, #1
   11e58:	bl	111dc <__printf_chk@plt>
   11e5c:	mov	r2, #5
   11e60:	movw	r1, #19364	; 0x4ba4
   11e64:	movt	r1, #2
   11e68:	mov	r0, #0
   11e6c:	bl	11098 <dcgettext@plt>
   11e70:	mov	r1, r0
   11e74:	movw	r3, #19792	; 0x4d50
   11e78:	movt	r3, #2
   11e7c:	b	11d34 <__assert_fail@plt+0xa8c>
   11e80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11e84:	strd	r6, [sp, #8]
   11e88:	strd	r8, [sp, #16]
   11e8c:	strd	sl, [sp, #24]
   11e90:	str	lr, [sp, #32]
   11e94:	sub	sp, sp, #36	; 0x24
   11e98:	mov	fp, r0
   11e9c:	mov	r4, r1
   11ea0:	ldr	r0, [r1]
   11ea4:	bl	12c00 <__assert_fail@plt+0x1958>
   11ea8:	movw	r1, #17400	; 0x43f8
   11eac:	movt	r1, #2
   11eb0:	mov	r0, #6
   11eb4:	bl	11230 <setlocale@plt>
   11eb8:	movw	r5, #19248	; 0x4b30
   11ebc:	movt	r5, #2
   11ec0:	movw	r1, #19416	; 0x4bd8
   11ec4:	movt	r1, #2
   11ec8:	mov	r0, r5
   11ecc:	bl	11278 <bindtextdomain@plt>
   11ed0:	mov	r0, r5
   11ed4:	bl	110b0 <textdomain@plt>
   11ed8:	movw	r0, #10008	; 0x2718
   11edc:	movt	r0, #1
   11ee0:	bl	24210 <__assert_fail@plt+0x12f68>
   11ee4:	movw	r3, #25056	; 0x61e0
   11ee8:	movt	r3, #3
   11eec:	mov	r2, #0
   11ef0:	strb	r2, [r3, #9]
   11ef4:	mov	r5, #1
   11ef8:	movw	sl, #16948	; 0x4234
   11efc:	movt	sl, #2
   11f00:	movw	r7, #19760	; 0x4d30
   11f04:	movt	r7, #2
   11f08:	movw	r8, #24872	; 0x6128
   11f0c:	movt	r8, #3
   11f10:	mov	r9, r3
   11f14:	add	r3, r3, #676	; 0x2a4
   11f18:	str	r3, [sp, #24]
   11f1c:	add	r3, r8, #60	; 0x3c
   11f20:	str	r3, [sp, #28]
   11f24:	mov	r6, #0
   11f28:	str	r6, [sp]
   11f2c:	ldr	r3, [pc, #1984]	; 126f4 <__assert_fail@plt+0x144c>
   11f30:	mov	r2, r7
   11f34:	mov	r1, r4
   11f38:	mov	r0, fp
   11f3c:	bl	11164 <getopt_long@plt>
   11f40:	cmn	r0, #1
   11f44:	beq	12554 <__assert_fail@plt+0x12ac>
   11f48:	add	r0, r0, #3
   11f4c:	cmp	r0, #122	; 0x7a
   11f50:	ldrls	pc, [pc, r0, lsl #2]
   11f54:	b	1254c <__assert_fail@plt+0x12a4>
   11f58:	strdeq	r2, [r1], -r8
   11f5c:	strdeq	r2, [r1], -r0
   11f60:	andeq	r2, r1, ip, asr #10
   11f64:	andeq	r2, r1, ip, asr #10
   11f68:	andeq	r2, r1, ip, asr #10
   11f6c:	andeq	r2, r1, ip, asr #10
   11f70:	andeq	r2, r1, ip, asr #10
   11f74:	andeq	r2, r1, ip, asr #10
   11f78:	andeq	r2, r1, ip, asr #10
   11f7c:	andeq	r2, r1, ip, asr #10
   11f80:	andeq	r2, r1, ip, asr #10
   11f84:	andeq	r2, r1, ip, asr #10
   11f88:	andeq	r2, r1, ip, asr #10
   11f8c:	andeq	r2, r1, ip, asr #10
   11f90:	andeq	r2, r1, ip, asr #10
   11f94:	andeq	r2, r1, ip, asr #10
   11f98:	andeq	r2, r1, ip, asr #10
   11f9c:	andeq	r2, r1, ip, asr #10
   11fa0:	andeq	r2, r1, ip, asr #10
   11fa4:	andeq	r2, r1, ip, asr #10
   11fa8:	andeq	r2, r1, ip, asr #10
   11fac:	andeq	r2, r1, ip, asr #10
   11fb0:	andeq	r2, r1, ip, asr #10
   11fb4:	andeq	r2, r1, ip, asr #10
   11fb8:	andeq	r2, r1, ip, asr #10
   11fbc:	andeq	r2, r1, ip, asr #10
   11fc0:	andeq	r2, r1, ip, asr #10
   11fc4:	andeq	r2, r1, ip, asr #10
   11fc8:	andeq	r2, r1, ip, asr #10
   11fcc:	andeq	r2, r1, ip, asr #10
   11fd0:	andeq	r2, r1, ip, asr #10
   11fd4:	andeq	r2, r1, ip, asr #10
   11fd8:	andeq	r2, r1, ip, asr #10
   11fdc:	andeq	r2, r1, ip, asr #10
   11fe0:	andeq	r2, r1, ip, asr #10
   11fe4:	andeq	r2, r1, ip, asr #10
   11fe8:	andeq	r2, r1, ip, asr #10
   11fec:	andeq	r2, r1, ip, asr #10
   11ff0:	andeq	r2, r1, ip, asr #10
   11ff4:	andeq	r2, r1, ip, asr #10
   11ff8:	andeq	r2, r1, ip, asr #10
   11ffc:	andeq	r2, r1, ip, asr #10
   12000:	andeq	r2, r1, ip, asr #10
   12004:	andeq	r2, r1, ip, asr #10
   12008:	andeq	r2, r1, ip, asr #10
   1200c:	andeq	r2, r1, ip, asr #10
   12010:	andeq	r2, r1, ip, asr #10
   12014:	andeq	r2, r1, ip, asr #10
   12018:	andeq	r2, r1, ip, asr #10
   1201c:	andeq	r2, r1, ip, asr #10
   12020:	andeq	r2, r1, ip, asr #10
   12024:	andeq	r2, r1, ip, asr #10
   12028:	andeq	r2, r1, ip, asr #10
   1202c:	andeq	r2, r1, ip, asr #10
   12030:	andeq	r2, r1, ip, asr #10
   12034:	andeq	r2, r1, ip, asr #10
   12038:	andeq	r2, r1, ip, asr #10
   1203c:	andeq	r2, r1, ip, asr #10
   12040:	andeq	r2, r1, ip, asr #10
   12044:	andeq	r2, r1, ip, asr #10
   12048:	andeq	r2, r1, ip, asr #10
   1204c:	andeq	r2, r1, ip, asr #10
   12050:	andeq	r2, r1, ip, asr #10
   12054:	andeq	r2, r1, ip, asr #10
   12058:	andeq	r2, r1, ip, asr #10
   1205c:	andeq	r2, r1, ip, asr #10
   12060:	andeq	r2, r1, ip, asr #10
   12064:	andeq	r2, r1, ip, asr #10
   12068:	andeq	r2, r1, ip, asr #10
   1206c:	andeq	r2, r1, ip, asr #10
   12070:	andeq	r2, r1, ip, asr #10
   12074:	andeq	r2, r1, ip, asr #10
   12078:	andeq	r2, r1, ip, asr #10
   1207c:	andeq	r2, r1, ip, asr #10
   12080:	andeq	r2, r1, ip, asr #10
   12084:	andeq	r2, r1, ip, asr #10
   12088:	andeq	r2, r1, ip, asr #10
   1208c:	andeq	r2, r1, ip, asr #10
   12090:	andeq	r2, r1, ip, asr #10
   12094:	andeq	r2, r1, ip, asr #10
   12098:	andeq	r2, r1, ip, asr #10
   1209c:	andeq	r2, r1, ip, asr #10
   120a0:	andeq	r2, r1, ip, asr #10
   120a4:	andeq	r2, r1, ip, asr #10
   120a8:	andeq	r2, r1, ip, asr #10
   120ac:	andeq	r2, r1, ip, asr #10
   120b0:	andeq	r2, r1, ip, asr #10
   120b4:	andeq	r2, r1, ip, asr #10
   120b8:	andeq	r2, r1, ip, asr #10
   120bc:	andeq	r2, r1, ip, asr #10
   120c0:	andeq	r2, r1, ip, asr #10
   120c4:	andeq	r2, r1, ip, asr #10
   120c8:	andeq	r2, r1, ip, asr #10
   120cc:	andeq	r2, r1, ip, asr #10
   120d0:	andeq	r2, r1, ip, asr #10
   120d4:	andeq	r2, r1, ip, asr #10
   120d8:	andeq	r2, r1, ip, asr #10
   120dc:	andeq	r2, r1, ip, asr #10
   120e0:	andeq	r2, r1, ip, asr #10
   120e4:	andeq	r2, r1, ip, asr #10
   120e8:	andeq	r2, r1, ip, asr #10
   120ec:	muleq	r1, ip, r1
   120f0:	andeq	r2, r1, ip, asr #10
   120f4:	muleq	r1, r0, r4
   120f8:	andeq	r2, r1, ip, asr #10
   120fc:	strdeq	r2, [r1], -r4
   12100:	andeq	r2, r1, ip, asr #10
   12104:	andeq	r2, r1, r4, asr #2
   12108:	andeq	r2, r1, r8, lsr #5
   1210c:	andeq	r2, r1, ip, asr #10
   12110:	andeq	r2, r1, ip, asr #10
   12114:	andeq	r2, r1, r0, lsl r3
   12118:	andeq	r2, r1, ip, asr #10
   1211c:	ldrdeq	r2, [r1], -ip
   12120:	andeq	r2, r1, ip, asr #10
   12124:	andeq	r2, r1, r4, lsl #6
   12128:	andeq	r2, r1, ip, asr #10
   1212c:	andeq	r2, r1, ip, asr #10
   12130:	andeq	r2, r1, ip, ror #6
   12134:	andeq	r2, r1, ip, asr #10
   12138:	andeq	r2, r1, ip, asr #10
   1213c:	andeq	r2, r1, ip, asr #4
   12140:	andeq	r2, r1, r0, lsl #7
   12144:	add	r2, r9, #164	; 0xa4
   12148:	add	r1, r9, #132	; 0x84
   1214c:	add	r0, r8, #64	; 0x40
   12150:	bl	11490 <__assert_fail@plt+0x1e8>
   12154:	subs	r6, r0, #0
   12158:	bne	11f24 <__assert_fail@plt+0xc7c>
   1215c:	mov	r2, #5
   12160:	movw	r1, #19440	; 0x4bf0
   12164:	movt	r1, #2
   12168:	bl	11098 <dcgettext@plt>
   1216c:	mov	r5, r0
   12170:	movw	r3, #25048	; 0x61d8
   12174:	movt	r3, #3
   12178:	ldr	r0, [r3]
   1217c:	bl	14efc <__assert_fail@plt+0x3c54>
   12180:	mov	r3, r0
   12184:	mov	r2, r5
   12188:	mov	r1, #0
   1218c:	mov	r0, r1
   12190:	bl	11110 <error@plt>
   12194:	mov	r5, r6
   12198:	b	11f24 <__assert_fail@plt+0xc7c>
   1219c:	add	r2, r9, #420	; 0x1a4
   121a0:	add	r1, r9, #68	; 0x44
   121a4:	add	r0, r8, #56	; 0x38
   121a8:	bl	11490 <__assert_fail@plt+0x1e8>
   121ac:	subs	r6, r0, #0
   121b0:	bne	11f24 <__assert_fail@plt+0xc7c>
   121b4:	mov	r2, #5
   121b8:	movw	r1, #19476	; 0x4c14
   121bc:	movt	r1, #2
   121c0:	bl	11098 <dcgettext@plt>
   121c4:	mov	r5, r0
   121c8:	movw	r3, #25048	; 0x61d8
   121cc:	movt	r3, #3
   121d0:	ldr	r0, [r3]
   121d4:	bl	14efc <__assert_fail@plt+0x3c54>
   121d8:	mov	r3, r0
   121dc:	mov	r2, r5
   121e0:	mov	r1, #0
   121e4:	mov	r0, r1
   121e8:	bl	11110 <error@plt>
   121ec:	mov	r5, r6
   121f0:	b	11f24 <__assert_fail@plt+0xc7c>
   121f4:	ldr	r2, [sp, #24]
   121f8:	add	r1, r9, #100	; 0x64
   121fc:	ldr	r0, [sp, #28]
   12200:	bl	11490 <__assert_fail@plt+0x1e8>
   12204:	subs	r6, r0, #0
   12208:	bne	11f24 <__assert_fail@plt+0xc7c>
   1220c:	mov	r2, #5
   12210:	movw	r1, #19512	; 0x4c38
   12214:	movt	r1, #2
   12218:	bl	11098 <dcgettext@plt>
   1221c:	mov	r5, r0
   12220:	movw	r3, #25048	; 0x61d8
   12224:	movt	r3, #3
   12228:	ldr	r0, [r3]
   1222c:	bl	14efc <__assert_fail@plt+0x3c54>
   12230:	mov	r3, r0
   12234:	mov	r2, r5
   12238:	mov	r1, #0
   1223c:	mov	r0, r1
   12240:	bl	11110 <error@plt>
   12244:	mov	r5, r6
   12248:	b	11f24 <__assert_fail@plt+0xc7c>
   1224c:	movw	r3, #25048	; 0x61d8
   12250:	movt	r3, #3
   12254:	ldr	r6, [r3]
   12258:	mov	r2, #5
   1225c:	movw	r1, #19548	; 0x4c5c
   12260:	movt	r1, #2
   12264:	mov	r0, #0
   12268:	bl	11098 <dcgettext@plt>
   1226c:	mov	r3, #0
   12270:	str	r3, [sp, #16]
   12274:	str	r0, [sp, #12]
   12278:	movw	r3, #17400	; 0x43f8
   1227c:	movt	r3, #2
   12280:	str	r3, [sp, #8]
   12284:	mvn	r2, #0
   12288:	mvn	r3, #-2147483648	; 0x80000000
   1228c:	strd	r2, [sp]
   12290:	mov	r2, #0
   12294:	mov	r3, #-2147483648	; 0x80000000
   12298:	mov	r0, r6
   1229c:	bl	234fc <__assert_fail@plt+0x12254>
   122a0:	strd	r0, [r8, #8]
   122a4:	b	11f24 <__assert_fail@plt+0xc7c>
   122a8:	movw	r3, #25048	; 0x61d8
   122ac:	movt	r3, #3
   122b0:	ldr	r6, [r3]
   122b4:	mov	r2, #5
   122b8:	movw	r1, #19580	; 0x4c7c
   122bc:	movt	r1, #2
   122c0:	mov	r0, #0
   122c4:	bl	11098 <dcgettext@plt>
   122c8:	mov	r3, #0
   122cc:	str	r3, [sp, #16]
   122d0:	str	r0, [sp, #12]
   122d4:	movw	r3, #17400	; 0x43f8
   122d8:	movt	r3, #2
   122dc:	str	r3, [sp, #8]
   122e0:	mvn	r2, #0
   122e4:	mvn	r3, #-2147483648	; 0x80000000
   122e8:	strd	r2, [sp]
   122ec:	mov	r2, #0
   122f0:	mov	r3, #-2147483648	; 0x80000000
   122f4:	mov	r0, r6
   122f8:	bl	234fc <__assert_fail@plt+0x12254>
   122fc:	strd	r0, [r8, #32]
   12300:	b	11f24 <__assert_fail@plt+0xc7c>
   12304:	mov	r3, #0
   12308:	strb	r3, [r8]
   1230c:	b	11f24 <__assert_fail@plt+0xc7c>
   12310:	movw	r3, #25048	; 0x61d8
   12314:	movt	r3, #3
   12318:	ldr	r6, [r3]
   1231c:	mov	r2, #5
   12320:	movw	r1, #19612	; 0x4c9c
   12324:	movt	r1, #2
   12328:	mov	r0, #0
   1232c:	bl	11098 <dcgettext@plt>
   12330:	mov	r3, #0
   12334:	str	r3, [sp, #16]
   12338:	str	r0, [sp, #12]
   1233c:	movw	r3, #17400	; 0x43f8
   12340:	movt	r3, #2
   12344:	str	r3, [sp, #8]
   12348:	mvn	r2, #0
   1234c:	mvn	r3, #-2147483648	; 0x80000000
   12350:	strd	r2, [sp]
   12354:	mov	r2, #1
   12358:	mov	r3, #0
   1235c:	mov	r0, r6
   12360:	bl	234fc <__assert_fail@plt+0x12254>
   12364:	strd	r0, [r8, #48]	; 0x30
   12368:	b	11f24 <__assert_fail@plt+0xc7c>
   1236c:	movw	r3, #25048	; 0x61d8
   12370:	movt	r3, #3
   12374:	ldr	r3, [r3]
   12378:	str	r3, [r8, #24]
   1237c:	b	11f24 <__assert_fail@plt+0xc7c>
   12380:	movw	r3, #25048	; 0x61d8
   12384:	movt	r3, #3
   12388:	ldr	r6, [r3]
   1238c:	mov	r2, #5
   12390:	movw	r1, #19648	; 0x4cc0
   12394:	movt	r1, #2
   12398:	mov	r0, #0
   1239c:	bl	11098 <dcgettext@plt>
   123a0:	mov	r3, #0
   123a4:	str	r3, [sp, #16]
   123a8:	str	r0, [sp, #12]
   123ac:	movw	r3, #17400	; 0x43f8
   123b0:	movt	r3, #2
   123b4:	str	r3, [sp, #8]
   123b8:	mvn	r2, #-2147483648	; 0x80000000
   123bc:	mov	r3, #0
   123c0:	strd	r2, [sp]
   123c4:	mov	r2, #1
   123c8:	mov	r3, #0
   123cc:	mov	r0, r6
   123d0:	bl	234fc <__assert_fail@plt+0x12254>
   123d4:	str	r0, [r8, #16]
   123d8:	b	11f24 <__assert_fail@plt+0xc7c>
   123dc:	movw	r3, #25048	; 0x61d8
   123e0:	movt	r3, #3
   123e4:	ldr	r6, [r3]
   123e8:	movw	r1, #19680	; 0x4ce0
   123ec:	movt	r1, #2
   123f0:	mov	r0, r6
   123f4:	bl	10fd8 <strcmp@plt>
   123f8:	cmp	r0, #0
   123fc:	addeq	r3, sl, #56	; 0x38
   12400:	streq	r3, [r8, #20]
   12404:	beq	11f24 <__assert_fail@plt+0xc7c>
   12408:	movw	r1, #19684	; 0x4ce4
   1240c:	movt	r1, #2
   12410:	mov	r0, r6
   12414:	bl	10fd8 <strcmp@plt>
   12418:	cmp	r0, #0
   1241c:	addeq	r3, sl, #68	; 0x44
   12420:	streq	r3, [r8, #20]
   12424:	beq	11f24 <__assert_fail@plt+0xc7c>
   12428:	movw	r1, #19688	; 0x4ce8
   1242c:	movt	r1, #2
   12430:	mov	r0, r6
   12434:	bl	10fd8 <strcmp@plt>
   12438:	cmp	r0, #0
   1243c:	bne	1244c <__assert_fail@plt+0x11a4>
   12440:	add	r3, sl, #76	; 0x4c
   12444:	str	r3, [r8, #20]
   12448:	b	11f24 <__assert_fail@plt+0xc7c>
   1244c:	mov	r2, #5
   12450:	movw	r1, #19692	; 0x4cec
   12454:	movt	r1, #2
   12458:	mov	r0, #0
   1245c:	bl	11098 <dcgettext@plt>
   12460:	mov	r5, r0
   12464:	movw	r3, #25048	; 0x61d8
   12468:	movt	r3, #3
   1246c:	ldr	r0, [r3]
   12470:	bl	14efc <__assert_fail@plt+0x3c54>
   12474:	mov	r3, r0
   12478:	mov	r2, r5
   1247c:	mov	r1, #0
   12480:	mov	r0, r1
   12484:	bl	11110 <error@plt>
   12488:	mov	r5, #0
   1248c:	b	11f24 <__assert_fail@plt+0xc7c>
   12490:	movw	r3, #25048	; 0x61d8
   12494:	movt	r3, #3
   12498:	ldr	r6, [r3]
   1249c:	mov	r0, r6
   124a0:	bl	11188 <strlen@plt>
   124a4:	sub	r0, r0, #1
   124a8:	cmp	r0, #1
   124ac:	strhi	r6, [r8, #40]	; 0x28
   124b0:	bhi	11f24 <__assert_fail@plt+0xc7c>
   124b4:	ldr	r2, [r8, #40]	; 0x28
   124b8:	ldrb	r3, [r6]
   124bc:	cmp	r3, #0
   124c0:	beq	11f24 <__assert_fail@plt+0xc7c>
   124c4:	movw	r3, #25048	; 0x61d8
   124c8:	movt	r3, #3
   124cc:	add	r1, r6, #1
   124d0:	str	r1, [r3]
   124d4:	ldrb	r1, [r6]
   124d8:	strb	r1, [r2], #1
   124dc:	ldr	r6, [r3]
   124e0:	ldrb	r1, [r6]
   124e4:	cmp	r1, #0
   124e8:	bne	124cc <__assert_fail@plt+0x1224>
   124ec:	b	11f24 <__assert_fail@plt+0xc7c>
   124f0:	mov	r0, #0
   124f4:	bl	11a30 <__assert_fail@plt+0x788>
   124f8:	movw	r3, #24944	; 0x6170
   124fc:	movt	r3, #3
   12500:	movw	r0, #25044	; 0x61d4
   12504:	movt	r0, #3
   12508:	mov	r4, #0
   1250c:	str	r4, [sp, #8]
   12510:	movw	r2, #19728	; 0x4d10
   12514:	movt	r2, #2
   12518:	str	r2, [sp, #4]
   1251c:	movw	r2, #19744	; 0x4d20
   12520:	movt	r2, #2
   12524:	str	r2, [sp]
   12528:	ldr	r3, [r3]
   1252c:	movw	r2, #19244	; 0x4b2c
   12530:	movt	r2, #2
   12534:	movw	r1, #17324	; 0x43ac
   12538:	movt	r1, #2
   1253c:	ldr	r0, [r0]
   12540:	bl	22e0c <__assert_fail@plt+0x11b64>
   12544:	mov	r0, r4
   12548:	bl	1117c <exit@plt>
   1254c:	mov	r5, r6
   12550:	b	11f28 <__assert_fail@plt+0xc80>
   12554:	cmp	r5, #0
   12558:	beq	126a8 <__assert_fail@plt+0x1400>
   1255c:	movw	r7, #24872	; 0x6128
   12560:	movt	r7, #3
   12564:	ldr	r0, [r7, #40]	; 0x28
   12568:	bl	11188 <strlen@plt>
   1256c:	mov	r9, r0
   12570:	lsl	sl, r0, #1
   12574:	add	r0, sl, r0
   12578:	movw	r6, #25056	; 0x61e0
   1257c:	movt	r6, #3
   12580:	str	r0, [r6, #28]
   12584:	add	r0, r0, #1
   12588:	bl	22ee4 <__assert_fail@plt+0x11c3c>
   1258c:	mov	r8, r0
   12590:	str	r0, [r6, #32]
   12594:	ldr	r3, [r7, #40]	; 0x28
   12598:	str	r3, [sp, #24]
   1259c:	mov	r1, r3
   125a0:	bl	11080 <stpcpy@plt>
   125a4:	ldr	r1, [sp, #24]
   125a8:	bl	11080 <stpcpy@plt>
   125ac:	ldr	r1, [sp, #24]
   125b0:	bl	110ec <strcpy@plt>
   125b4:	str	sl, [r6, #36]	; 0x24
   125b8:	add	r8, r8, r9
   125bc:	str	r8, [r6, #40]	; 0x28
   125c0:	str	r9, [r6, #24]
   125c4:	add	r8, r8, r9
   125c8:	str	r8, [r6, #44]	; 0x2c
   125cc:	add	r0, r6, #12
   125d0:	bl	12a84 <__assert_fail@plt+0x17dc>
   125d4:	ldr	r0, [r7, #24]
   125d8:	bl	11188 <strlen@plt>
   125dc:	mov	r8, r0
   125e0:	ldr	r0, [r7, #16]
   125e4:	add	r0, r0, #1
   125e8:	add	r0, r0, r8
   125ec:	bl	22ee4 <__assert_fail@plt+0x11c3c>
   125f0:	mov	r9, r0
   125f4:	str	r0, [r6, #56]	; 0x38
   125f8:	ldr	r3, [r7, #16]
   125fc:	add	r8, r8, r3
   12600:	mov	r2, r8
   12604:	mov	r1, #32
   12608:	bl	111c4 <memset@plt>
   1260c:	mov	r3, #0
   12610:	strb	r3, [r9, r8]
   12614:	ldrd	r2, [r7, #8]
   12618:	strd	r2, [r6]
   1261c:	ldr	r3, [r7, #56]	; 0x38
   12620:	str	r3, [r6, #64]	; 0x40
   12624:	add	r3, r6, #68	; 0x44
   12628:	str	r3, [r6, #60]	; 0x3c
   1262c:	movw	r3, #25024	; 0x61c0
   12630:	movt	r3, #3
   12634:	ldr	r3, [r3]
   12638:	cmp	r3, fp
   1263c:	beq	126b0 <__assert_fail@plt+0x1408>
   12640:	bge	12670 <__assert_fail@plt+0x13c8>
   12644:	movw	r6, #25024	; 0x61c0
   12648:	movt	r6, #3
   1264c:	ldr	r0, [r4, r3, lsl #2]
   12650:	bl	115ac <__assert_fail@plt+0x304>
   12654:	and	r5, r5, r0
   12658:	uxtb	r5, r5
   1265c:	ldr	r3, [r6]
   12660:	add	r3, r3, #1
   12664:	str	r3, [r6]
   12668:	cmp	r3, fp
   1266c:	blt	1264c <__assert_fail@plt+0x13a4>
   12670:	movw	r3, #25056	; 0x61e0
   12674:	movt	r3, #3
   12678:	ldrb	r3, [r3, #9]
   1267c:	cmp	r3, #0
   12680:	bne	126c4 <__assert_fail@plt+0x141c>
   12684:	eor	r0, r5, #1
   12688:	uxtb	r0, r0
   1268c:	add	sp, sp, #36	; 0x24
   12690:	ldrd	r4, [sp]
   12694:	ldrd	r6, [sp, #8]
   12698:	ldrd	r8, [sp, #16]
   1269c:	ldrd	sl, [sp, #24]
   126a0:	add	sp, sp, #32
   126a4:	pop	{pc}		; (ldr pc, [sp], #4)
   126a8:	mov	r0, #1
   126ac:	bl	11a30 <__assert_fail@plt+0x788>
   126b0:	movw	r0, #17284	; 0x4384
   126b4:	movt	r0, #2
   126b8:	bl	115ac <__assert_fail@plt+0x304>
   126bc:	mov	r5, r0
   126c0:	b	12670 <__assert_fail@plt+0x13c8>
   126c4:	movw	r3, #25040	; 0x61d0
   126c8:	movt	r3, #3
   126cc:	ldr	r0, [r3]
   126d0:	bl	12898 <__assert_fail@plt+0x15f0>
   126d4:	cmn	r0, #1
   126d8:	bne	12684 <__assert_fail@plt+0x13dc>
   126dc:	bl	111a0 <__errno_location@plt>
   126e0:	movw	r2, #17284	; 0x4384
   126e4:	movt	r2, #2
   126e8:	ldr	r1, [r0]
   126ec:	mov	r0, #1
   126f0:	bl	11110 <error@plt>
   126f4:	andeq	r4, r2, ip, lsl #5
   126f8:	movw	r3, #25988	; 0x6584
   126fc:	movt	r3, #3
   12700:	str	r0, [r3]
   12704:	bx	lr
   12708:	movw	r3, #25988	; 0x6584
   1270c:	movt	r3, #3
   12710:	strb	r0, [r3, #4]
   12714:	bx	lr
   12718:	strd	r4, [sp, #-16]!
   1271c:	str	r6, [sp, #8]
   12720:	str	lr, [sp, #12]
   12724:	sub	sp, sp, #8
   12728:	movw	r3, #25044	; 0x61d4
   1272c:	movt	r3, #3
   12730:	ldr	r0, [r3]
   12734:	bl	23de0 <__assert_fail@plt+0x12b38>
   12738:	cmp	r0, #0
   1273c:	beq	12764 <__assert_fail@plt+0x14bc>
   12740:	movw	r3, #25988	; 0x6584
   12744:	movt	r3, #3
   12748:	ldrb	r3, [r3, #4]
   1274c:	cmp	r3, #0
   12750:	beq	12790 <__assert_fail@plt+0x14e8>
   12754:	bl	111a0 <__errno_location@plt>
   12758:	ldr	r3, [r0]
   1275c:	cmp	r3, #32
   12760:	bne	12790 <__assert_fail@plt+0x14e8>
   12764:	movw	r3, #25032	; 0x61c8
   12768:	movt	r3, #3
   1276c:	ldr	r0, [r3]
   12770:	bl	23de0 <__assert_fail@plt+0x12b38>
   12774:	cmp	r0, #0
   12778:	bne	12818 <__assert_fail@plt+0x1570>
   1277c:	add	sp, sp, #8
   12780:	ldrd	r4, [sp]
   12784:	ldr	r6, [sp, #8]
   12788:	add	sp, sp, #12
   1278c:	pop	{pc}		; (ldr pc, [sp], #4)
   12790:	mov	r2, #5
   12794:	movw	r1, #20128	; 0x4ea0
   12798:	movt	r1, #2
   1279c:	mov	r0, #0
   127a0:	bl	11098 <dcgettext@plt>
   127a4:	mov	r4, r0
   127a8:	movw	r3, #25988	; 0x6584
   127ac:	movt	r3, #3
   127b0:	ldr	r5, [r3]
   127b4:	cmp	r5, #0
   127b8:	beq	127f8 <__assert_fail@plt+0x1550>
   127bc:	bl	111a0 <__errno_location@plt>
   127c0:	ldr	r6, [r0]
   127c4:	mov	r0, r5
   127c8:	bl	14cf8 <__assert_fail@plt+0x3a50>
   127cc:	str	r4, [sp]
   127d0:	mov	r3, r0
   127d4:	movw	r2, #20140	; 0x4eac
   127d8:	movt	r2, #2
   127dc:	mov	r1, r6
   127e0:	mov	r0, #0
   127e4:	bl	11110 <error@plt>
   127e8:	movw	r3, #24948	; 0x6174
   127ec:	movt	r3, #3
   127f0:	ldr	r0, [r3]
   127f4:	bl	1102c <_exit@plt>
   127f8:	bl	111a0 <__errno_location@plt>
   127fc:	mov	r3, r4
   12800:	movw	r2, #19472	; 0x4c10
   12804:	movt	r2, #2
   12808:	ldr	r1, [r0]
   1280c:	mov	r0, #0
   12810:	bl	11110 <error@plt>
   12814:	b	127e8 <__assert_fail@plt+0x1540>
   12818:	movw	r3, #24948	; 0x6174
   1281c:	movt	r3, #3
   12820:	ldr	r0, [r3]
   12824:	bl	1102c <_exit@plt>
   12828:	strd	r4, [sp, #-12]!
   1282c:	str	lr, [sp, #8]
   12830:	sub	sp, sp, #20
   12834:	ldr	r1, [sp, #40]	; 0x28
   12838:	str	r1, [sp, #8]
   1283c:	ldrd	r4, [sp, #32]
   12840:	strd	r4, [sp]
   12844:	bl	10fe4 <posix_fadvise64@plt>
   12848:	add	sp, sp, #20
   1284c:	ldrd	r4, [sp]
   12850:	add	sp, sp, #8
   12854:	pop	{pc}		; (ldr pc, [sp], #4)
   12858:	cmp	r0, #0
   1285c:	bxeq	lr
   12860:	str	r4, [sp, #-8]!
   12864:	str	lr, [sp, #4]
   12868:	sub	sp, sp, #16
   1286c:	mov	r4, r1
   12870:	bl	111e8 <fileno@plt>
   12874:	str	r4, [sp, #8]
   12878:	mov	r2, #0
   1287c:	mov	r3, #0
   12880:	strd	r2, [sp]
   12884:	bl	10fe4 <posix_fadvise64@plt>
   12888:	add	sp, sp, #16
   1288c:	ldr	r4, [sp]
   12890:	add	sp, sp, #4
   12894:	pop	{pc}		; (ldr pc, [sp], #4)
   12898:	strd	r4, [sp, #-16]!
   1289c:	str	r6, [sp, #8]
   128a0:	str	lr, [sp, #12]
   128a4:	sub	sp, sp, #8
   128a8:	mov	r4, r0
   128ac:	bl	111e8 <fileno@plt>
   128b0:	cmp	r0, #0
   128b4:	blt	1292c <__assert_fail@plt+0x1684>
   128b8:	mov	r0, r4
   128bc:	bl	11134 <__freading@plt>
   128c0:	cmp	r0, #0
   128c4:	beq	128f8 <__assert_fail@plt+0x1650>
   128c8:	mov	r0, r4
   128cc:	bl	111e8 <fileno@plt>
   128d0:	mov	r3, #1
   128d4:	str	r3, [sp]
   128d8:	mov	r2, #0
   128dc:	mov	r3, #0
   128e0:	bl	110d4 <lseek64@plt>
   128e4:	mvn	r2, #0
   128e8:	mvn	r3, #0
   128ec:	cmp	r1, r3
   128f0:	cmpeq	r0, r2
   128f4:	beq	12938 <__assert_fail@plt+0x1690>
   128f8:	mov	r0, r4
   128fc:	bl	12954 <__assert_fail@plt+0x16ac>
   12900:	cmp	r0, #0
   12904:	beq	12938 <__assert_fail@plt+0x1690>
   12908:	bl	111a0 <__errno_location@plt>
   1290c:	mov	r5, r0
   12910:	ldr	r6, [r0]
   12914:	mov	r0, r4
   12918:	bl	11200 <fclose@plt>
   1291c:	cmp	r6, #0
   12920:	strne	r6, [r5]
   12924:	mvnne	r0, #0
   12928:	b	12940 <__assert_fail@plt+0x1698>
   1292c:	mov	r0, r4
   12930:	bl	11200 <fclose@plt>
   12934:	b	12940 <__assert_fail@plt+0x1698>
   12938:	mov	r0, r4
   1293c:	bl	11200 <fclose@plt>
   12940:	add	sp, sp, #8
   12944:	ldrd	r4, [sp]
   12948:	ldr	r6, [sp, #8]
   1294c:	add	sp, sp, #12
   12950:	pop	{pc}		; (ldr pc, [sp], #4)
   12954:	str	r4, [sp, #-8]!
   12958:	str	lr, [sp, #4]
   1295c:	sub	sp, sp, #8
   12960:	subs	r4, r0, #0
   12964:	beq	12978 <__assert_fail@plt+0x16d0>
   12968:	mov	r0, r4
   1296c:	bl	11134 <__freading@plt>
   12970:	cmp	r0, #0
   12974:	bne	12990 <__assert_fail@plt+0x16e8>
   12978:	mov	r0, r4
   1297c:	bl	10ffc <fflush@plt>
   12980:	add	sp, sp, #8
   12984:	ldr	r4, [sp]
   12988:	add	sp, sp, #4
   1298c:	pop	{pc}		; (ldr pc, [sp], #4)
   12990:	ldr	r3, [r4]
   12994:	tst	r3, #256	; 0x100
   12998:	bne	129a8 <__assert_fail@plt+0x1700>
   1299c:	mov	r0, r4
   129a0:	bl	10ffc <fflush@plt>
   129a4:	b	12980 <__assert_fail@plt+0x16d8>
   129a8:	mov	r3, #1
   129ac:	str	r3, [sp]
   129b0:	mov	r2, #0
   129b4:	mov	r3, #0
   129b8:	mov	r0, r4
   129bc:	bl	129c4 <__assert_fail@plt+0x171c>
   129c0:	b	1299c <__assert_fail@plt+0x16f4>
   129c4:	str	r4, [sp, #-16]!
   129c8:	strd	r6, [sp, #4]
   129cc:	str	lr, [sp, #12]
   129d0:	sub	sp, sp, #8
   129d4:	mov	r4, r0
   129d8:	mov	r6, r2
   129dc:	mov	r7, r3
   129e0:	ldr	r2, [r0, #8]
   129e4:	ldr	r3, [r0, #4]
   129e8:	cmp	r2, r3
   129ec:	beq	12a1c <__assert_fail@plt+0x1774>
   129f0:	ldr	r3, [sp, #24]
   129f4:	str	r3, [sp]
   129f8:	mov	r2, r6
   129fc:	mov	r3, r7
   12a00:	mov	r0, r4
   12a04:	bl	1120c <fseeko64@plt>
   12a08:	add	sp, sp, #8
   12a0c:	ldr	r4, [sp]
   12a10:	ldrd	r6, [sp, #4]
   12a14:	add	sp, sp, #12
   12a18:	pop	{pc}		; (ldr pc, [sp], #4)
   12a1c:	ldr	r2, [r0, #20]
   12a20:	ldr	r3, [r0, #16]
   12a24:	cmp	r2, r3
   12a28:	bne	129f0 <__assert_fail@plt+0x1748>
   12a2c:	ldr	r3, [r0, #36]	; 0x24
   12a30:	cmp	r3, #0
   12a34:	bne	129f0 <__assert_fail@plt+0x1748>
   12a38:	bl	111e8 <fileno@plt>
   12a3c:	ldr	r3, [sp, #24]
   12a40:	str	r3, [sp]
   12a44:	mov	r2, r6
   12a48:	mov	r3, r7
   12a4c:	bl	110d4 <lseek64@plt>
   12a50:	mvn	r2, #0
   12a54:	mvn	r3, #0
   12a58:	cmp	r1, r3
   12a5c:	cmpeq	r0, r2
   12a60:	beq	12a7c <__assert_fail@plt+0x17d4>
   12a64:	ldr	r3, [r4]
   12a68:	bic	r3, r3, #16
   12a6c:	str	r3, [r4]
   12a70:	strd	r0, [r4, #80]	; 0x50
   12a74:	mov	r0, #0
   12a78:	b	12a08 <__assert_fail@plt+0x1760>
   12a7c:	mvn	r0, #0
   12a80:	b	12a08 <__assert_fail@plt+0x1760>
   12a84:	mov	r3, #0
   12a88:	str	r3, [r0]
   12a8c:	str	r3, [r0, #4]
   12a90:	str	r3, [r0, #8]
   12a94:	bx	lr
   12a98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12a9c:	strd	r6, [sp, #8]
   12aa0:	strd	r8, [sp, #16]
   12aa4:	strd	sl, [sp, #24]
   12aa8:	str	lr, [sp, #32]
   12aac:	sub	sp, sp, #20
   12ab0:	ldr	r9, [r0, #8]
   12ab4:	ldr	r7, [r0]
   12ab8:	add	r7, r9, r7
   12abc:	ldr	r3, [r1]
   12ac0:	tst	r3, #16
   12ac4:	movne	r0, #0
   12ac8:	bne	12bac <__assert_fail@plt+0x1904>
   12acc:	mov	r8, r2
   12ad0:	mov	r5, r1
   12ad4:	mov	sl, r0
   12ad8:	mov	r4, r9
   12adc:	mov	fp, #1
   12ae0:	str	r2, [sp, #12]
   12ae4:	b	12b64 <__assert_fail@plt+0x18bc>
   12ae8:	mov	r0, r5
   12aec:	bl	11218 <__uflow@plt>
   12af0:	mov	r6, r0
   12af4:	cmn	r0, #1
   12af8:	bne	12b80 <__assert_fail@plt+0x18d8>
   12afc:	cmp	r9, r4
   12b00:	beq	12b8c <__assert_fail@plt+0x18e4>
   12b04:	ldr	r3, [r5]
   12b08:	tst	r3, #32
   12b0c:	bne	12b94 <__assert_fail@plt+0x18ec>
   12b10:	ldrb	r3, [r4, #-1]
   12b14:	cmp	r3, r8
   12b18:	beq	12ba0 <__assert_fail@plt+0x18f8>
   12b1c:	ldr	r6, [sp, #12]
   12b20:	cmp	r4, r7
   12b24:	bne	12b9c <__assert_fail@plt+0x18f4>
   12b28:	ldr	r4, [sl]
   12b2c:	str	fp, [sp]
   12b30:	mvn	r3, #0
   12b34:	mov	r2, fp
   12b38:	mov	r1, sl
   12b3c:	mov	r0, r9
   12b40:	bl	23130 <__assert_fail@plt+0x11e88>
   12b44:	mov	r9, r0
   12b48:	add	r4, r0, r4
   12b4c:	str	r0, [sl, #8]
   12b50:	ldr	r7, [sl]
   12b54:	add	r7, r0, r7
   12b58:	strb	r6, [r4], #1
   12b5c:	cmp	r8, r6
   12b60:	beq	12ba0 <__assert_fail@plt+0x18f8>
   12b64:	ldr	r3, [r5, #4]
   12b68:	ldr	r2, [r5, #8]
   12b6c:	cmp	r3, r2
   12b70:	bcs	12ae8 <__assert_fail@plt+0x1840>
   12b74:	add	r2, r3, #1
   12b78:	str	r2, [r5, #4]
   12b7c:	ldrb	r6, [r3]
   12b80:	cmp	r4, r7
   12b84:	bne	12b58 <__assert_fail@plt+0x18b0>
   12b88:	b	12b28 <__assert_fail@plt+0x1880>
   12b8c:	mov	r0, #0
   12b90:	b	12bac <__assert_fail@plt+0x1904>
   12b94:	mov	r0, #0
   12b98:	b	12bac <__assert_fail@plt+0x1904>
   12b9c:	strb	r8, [r4], #1
   12ba0:	sub	r4, r4, r9
   12ba4:	str	r4, [sl, #4]
   12ba8:	mov	r0, sl
   12bac:	add	sp, sp, #20
   12bb0:	ldrd	r4, [sp]
   12bb4:	ldrd	r6, [sp, #8]
   12bb8:	ldrd	r8, [sp, #16]
   12bbc:	ldrd	sl, [sp, #24]
   12bc0:	add	sp, sp, #32
   12bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   12bc8:	str	r4, [sp, #-8]!
   12bcc:	str	lr, [sp, #4]
   12bd0:	mov	r2, #10
   12bd4:	bl	12a98 <__assert_fail@plt+0x17f0>
   12bd8:	ldr	r4, [sp]
   12bdc:	add	sp, sp, #4
   12be0:	pop	{pc}		; (ldr pc, [sp], #4)
   12be4:	str	r4, [sp, #-8]!
   12be8:	str	lr, [sp, #4]
   12bec:	ldr	r0, [r0, #8]
   12bf0:	bl	23f40 <__assert_fail@plt+0x12c98>
   12bf4:	ldr	r4, [sp]
   12bf8:	add	sp, sp, #4
   12bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   12c00:	strd	r4, [sp, #-16]!
   12c04:	str	r6, [sp, #8]
   12c08:	str	lr, [sp, #12]
   12c0c:	subs	r4, r0, #0
   12c10:	beq	12cac <__assert_fail@plt+0x1a04>
   12c14:	mov	r1, #47	; 0x2f
   12c18:	mov	r0, r4
   12c1c:	bl	1123c <strrchr@plt>
   12c20:	subs	r5, r0, #0
   12c24:	beq	12c84 <__assert_fail@plt+0x19dc>
   12c28:	add	r6, r5, #1
   12c2c:	sub	r3, r6, r4
   12c30:	cmp	r3, #6
   12c34:	ble	12c84 <__assert_fail@plt+0x19dc>
   12c38:	mov	r2, #7
   12c3c:	movw	r1, #20204	; 0x4eec
   12c40:	movt	r1, #2
   12c44:	sub	r0, r5, #6
   12c48:	bl	11290 <strncmp@plt>
   12c4c:	cmp	r0, #0
   12c50:	bne	12c84 <__assert_fail@plt+0x19dc>
   12c54:	mov	r2, #3
   12c58:	movw	r1, #20212	; 0x4ef4
   12c5c:	movt	r1, #2
   12c60:	mov	r0, r6
   12c64:	bl	11290 <strncmp@plt>
   12c68:	cmp	r0, #0
   12c6c:	movne	r4, r6
   12c70:	bne	12c84 <__assert_fail@plt+0x19dc>
   12c74:	add	r4, r5, #4
   12c78:	movw	r3, #25016	; 0x61b8
   12c7c:	movt	r3, #3
   12c80:	str	r4, [r3]
   12c84:	movw	r3, #25996	; 0x658c
   12c88:	movt	r3, #3
   12c8c:	str	r4, [r3]
   12c90:	movw	r3, #25020	; 0x61bc
   12c94:	movt	r3, #3
   12c98:	str	r4, [r3]
   12c9c:	ldrd	r4, [sp]
   12ca0:	ldr	r6, [sp, #8]
   12ca4:	add	sp, sp, #12
   12ca8:	pop	{pc}		; (ldr pc, [sp], #4)
   12cac:	movw	r3, #25032	; 0x61c8
   12cb0:	movt	r3, #3
   12cb4:	ldr	r3, [r3]
   12cb8:	mov	r2, #55	; 0x37
   12cbc:	mov	r1, #1
   12cc0:	movw	r0, #20148	; 0x4eb4
   12cc4:	movt	r0, #2
   12cc8:	bl	110c8 <fwrite@plt>
   12ccc:	bl	1129c <abort@plt>
   12cd0:	mov	r2, #0
   12cd4:	mov	r3, #0
   12cd8:	strd	r2, [r0]
   12cdc:	strd	r2, [r0, #8]
   12ce0:	strd	r2, [r0, #16]
   12ce4:	strd	r2, [r0, #24]
   12ce8:	strd	r2, [r0, #32]
   12cec:	strd	r2, [r0, #40]	; 0x28
   12cf0:	cmp	r1, #10
   12cf4:	beq	12d00 <__assert_fail@plt+0x1a58>
   12cf8:	str	r1, [r0]
   12cfc:	bx	lr
   12d00:	str	r4, [sp, #-8]!
   12d04:	str	lr, [sp, #4]
   12d08:	bl	1129c <abort@plt>
   12d0c:	strd	r4, [sp, #-16]!
   12d10:	str	r6, [sp, #8]
   12d14:	str	lr, [sp, #12]
   12d18:	mov	r5, r0
   12d1c:	mov	r6, r1
   12d20:	mov	r2, #5
   12d24:	mov	r1, r0
   12d28:	mov	r0, #0
   12d2c:	bl	11098 <dcgettext@plt>
   12d30:	mov	r4, r0
   12d34:	cmp	r5, r0
   12d38:	beq	12d50 <__assert_fail@plt+0x1aa8>
   12d3c:	mov	r0, r4
   12d40:	ldrd	r4, [sp]
   12d44:	ldr	r6, [sp, #8]
   12d48:	add	sp, sp, #12
   12d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   12d50:	bl	23fa0 <__assert_fail@plt+0x12cf8>
   12d54:	ldrb	r3, [r0]
   12d58:	bic	r3, r3, #32
   12d5c:	cmp	r3, #85	; 0x55
   12d60:	bne	12de4 <__assert_fail@plt+0x1b3c>
   12d64:	ldrb	r3, [r0, #1]
   12d68:	bic	r3, r3, #32
   12d6c:	cmp	r3, #84	; 0x54
   12d70:	bne	12da8 <__assert_fail@plt+0x1b00>
   12d74:	ldrb	r3, [r0, #2]
   12d78:	bic	r3, r3, #32
   12d7c:	cmp	r3, #70	; 0x46
   12d80:	bne	12da8 <__assert_fail@plt+0x1b00>
   12d84:	ldrb	r3, [r0, #3]
   12d88:	cmp	r3, #45	; 0x2d
   12d8c:	bne	12da8 <__assert_fail@plt+0x1b00>
   12d90:	ldrb	r3, [r0, #4]
   12d94:	cmp	r3, #56	; 0x38
   12d98:	bne	12da8 <__assert_fail@plt+0x1b00>
   12d9c:	ldrb	r3, [r0, #5]
   12da0:	cmp	r3, #0
   12da4:	beq	12dc4 <__assert_fail@plt+0x1b1c>
   12da8:	movw	r4, #20300	; 0x4f4c
   12dac:	movt	r4, #2
   12db0:	movw	r3, #20320	; 0x4f60
   12db4:	movt	r3, #2
   12db8:	cmp	r6, #9
   12dbc:	movne	r4, r3
   12dc0:	b	12d3c <__assert_fail@plt+0x1a94>
   12dc4:	ldrb	r2, [r4]
   12dc8:	movw	r4, #20316	; 0x4f5c
   12dcc:	movt	r4, #2
   12dd0:	movw	r3, #20304	; 0x4f50
   12dd4:	movt	r3, #2
   12dd8:	cmp	r2, #96	; 0x60
   12ddc:	movne	r4, r3
   12de0:	b	12d3c <__assert_fail@plt+0x1a94>
   12de4:	cmp	r3, #71	; 0x47
   12de8:	bne	12da8 <__assert_fail@plt+0x1b00>
   12dec:	ldrb	r3, [r0, #1]
   12df0:	bic	r3, r3, #32
   12df4:	cmp	r3, #66	; 0x42
   12df8:	bne	12da8 <__assert_fail@plt+0x1b00>
   12dfc:	ldrb	r3, [r0, #2]
   12e00:	cmp	r3, #49	; 0x31
   12e04:	bne	12da8 <__assert_fail@plt+0x1b00>
   12e08:	ldrb	r3, [r0, #3]
   12e0c:	cmp	r3, #56	; 0x38
   12e10:	bne	12da8 <__assert_fail@plt+0x1b00>
   12e14:	ldrb	r3, [r0, #4]
   12e18:	cmp	r3, #48	; 0x30
   12e1c:	bne	12da8 <__assert_fail@plt+0x1b00>
   12e20:	ldrb	r3, [r0, #5]
   12e24:	cmp	r3, #51	; 0x33
   12e28:	bne	12da8 <__assert_fail@plt+0x1b00>
   12e2c:	ldrb	r3, [r0, #6]
   12e30:	cmp	r3, #48	; 0x30
   12e34:	bne	12da8 <__assert_fail@plt+0x1b00>
   12e38:	ldrb	r3, [r0, #7]
   12e3c:	cmp	r3, #0
   12e40:	bne	12da8 <__assert_fail@plt+0x1b00>
   12e44:	ldrb	r2, [r4]
   12e48:	movw	r4, #20312	; 0x4f58
   12e4c:	movt	r4, #2
   12e50:	movw	r3, #20308	; 0x4f54
   12e54:	movt	r3, #2
   12e58:	cmp	r2, #96	; 0x60
   12e5c:	movne	r4, r3
   12e60:	b	12d3c <__assert_fail@plt+0x1a94>
   12e64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12e68:	strd	r6, [sp, #8]
   12e6c:	strd	r8, [sp, #16]
   12e70:	strd	sl, [sp, #24]
   12e74:	str	lr, [sp, #32]
   12e78:	sub	sp, sp, #116	; 0x74
   12e7c:	str	r0, [sp, #64]	; 0x40
   12e80:	mov	r8, r1
   12e84:	str	r2, [sp, #48]	; 0x30
   12e88:	str	r3, [sp, #24]
   12e8c:	ldr	r7, [sp, #152]	; 0x98
   12e90:	bl	110e0 <__ctype_get_mb_cur_max@plt>
   12e94:	str	r0, [sp, #76]	; 0x4c
   12e98:	ldr	r3, [sp, #156]	; 0x9c
   12e9c:	ubfx	r3, r3, #1, #1
   12ea0:	str	r3, [sp, #32]
   12ea4:	mov	r3, #1
   12ea8:	str	r3, [sp, #40]	; 0x28
   12eac:	mov	r3, #0
   12eb0:	str	r3, [sp, #68]	; 0x44
   12eb4:	str	r3, [sp, #36]	; 0x24
   12eb8:	str	r3, [sp, #28]
   12ebc:	str	r3, [sp, #52]	; 0x34
   12ec0:	str	r3, [sp, #60]	; 0x3c
   12ec4:	str	r3, [sp, #72]	; 0x48
   12ec8:	movw	r3, #20324	; 0x4f64
   12ecc:	movt	r3, #2
   12ed0:	str	r3, [sp, #80]	; 0x50
   12ed4:	mov	r9, r8
   12ed8:	mov	sl, r7
   12edc:	cmp	sl, #10
   12ee0:	ldrls	pc, [pc, sl, lsl #2]
   12ee4:	b	130a8 <__assert_fail@plt+0x1e00>
   12ee8:	andeq	r2, r1, r8, asr #30
   12eec:	andeq	r2, r1, ip, lsl pc
   12ef0:	andeq	r3, r1, r0, lsl #1
   12ef4:	andeq	r2, r1, r4, lsl pc
   12ef8:	andeq	r3, r1, r4, lsr r0
   12efc:	andeq	r2, r1, r8, asr pc
   12f00:	andeq	r4, r1, r4, lsr #6
   12f04:	andeq	r3, r1, ip, lsr #1
   12f08:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12f0c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12f10:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12f14:	mov	r3, #1
   12f18:	str	r3, [sp, #28]
   12f1c:	mov	r3, #1
   12f20:	str	r3, [sp, #32]
   12f24:	str	r3, [sp, #52]	; 0x34
   12f28:	movw	r3, #20320	; 0x4f60
   12f2c:	movt	r3, #2
   12f30:	str	r3, [sp, #60]	; 0x3c
   12f34:	mov	fp, #0
   12f38:	mov	sl, #2
   12f3c:	mov	r6, #0
   12f40:	ldr	r8, [sp, #64]	; 0x40
   12f44:	b	137bc <__assert_fail@plt+0x2514>
   12f48:	mov	fp, sl
   12f4c:	mov	r3, #0
   12f50:	str	r3, [sp, #32]
   12f54:	b	12f3c <__assert_fail@plt+0x1c94>
   12f58:	ldr	r3, [sp, #32]
   12f5c:	cmp	r3, #0
   12f60:	bne	130c0 <__assert_fail@plt+0x1e18>
   12f64:	cmp	r9, #0
   12f68:	beq	130e4 <__assert_fail@plt+0x1e3c>
   12f6c:	mov	r3, #34	; 0x22
   12f70:	ldr	r2, [sp, #64]	; 0x40
   12f74:	strb	r3, [r2]
   12f78:	mov	fp, #1
   12f7c:	str	fp, [sp, #28]
   12f80:	str	fp, [sp, #52]	; 0x34
   12f84:	movw	r3, #20300	; 0x4f4c
   12f88:	movt	r3, #2
   12f8c:	str	r3, [sp, #60]	; 0x3c
   12f90:	b	12f3c <__assert_fail@plt+0x1c94>
   12f94:	cmp	sl, #10
   12f98:	bne	12fcc <__assert_fail@plt+0x1d24>
   12f9c:	ldr	r3, [sp, #32]
   12fa0:	cmp	r3, #0
   12fa4:	movne	fp, #0
   12fa8:	beq	12ff4 <__assert_fail@plt+0x1d4c>
   12fac:	ldr	r0, [sp, #168]	; 0xa8
   12fb0:	bl	11188 <strlen@plt>
   12fb4:	str	r0, [sp, #52]	; 0x34
   12fb8:	ldr	r3, [sp, #168]	; 0xa8
   12fbc:	str	r3, [sp, #60]	; 0x3c
   12fc0:	mov	r3, #1
   12fc4:	str	r3, [sp, #28]
   12fc8:	b	12f3c <__assert_fail@plt+0x1c94>
   12fcc:	mov	r1, sl
   12fd0:	ldr	r0, [sp, #80]	; 0x50
   12fd4:	bl	12d0c <__assert_fail@plt+0x1a64>
   12fd8:	str	r0, [sp, #164]	; 0xa4
   12fdc:	mov	r1, sl
   12fe0:	movw	r0, #20320	; 0x4f60
   12fe4:	movt	r0, #2
   12fe8:	bl	12d0c <__assert_fail@plt+0x1a64>
   12fec:	str	r0, [sp, #168]	; 0xa8
   12ff0:	b	12f9c <__assert_fail@plt+0x1cf4>
   12ff4:	ldr	r3, [sp, #164]	; 0xa4
   12ff8:	ldrb	r3, [r3]
   12ffc:	cmp	r3, #0
   13000:	beq	1302c <__assert_fail@plt+0x1d84>
   13004:	ldr	r2, [sp, #164]	; 0xa4
   13008:	mov	fp, #0
   1300c:	ldr	r1, [sp, #64]	; 0x40
   13010:	cmp	r9, fp
   13014:	strbhi	r3, [r1, fp]
   13018:	add	fp, fp, #1
   1301c:	ldrb	r3, [r2, #1]!
   13020:	cmp	r3, #0
   13024:	bne	13010 <__assert_fail@plt+0x1d68>
   13028:	b	12fac <__assert_fail@plt+0x1d04>
   1302c:	mov	fp, #0
   13030:	b	12fac <__assert_fail@plt+0x1d04>
   13034:	ldr	r3, [sp, #32]
   13038:	cmp	r3, #0
   1303c:	bne	12f1c <__assert_fail@plt+0x1c74>
   13040:	mov	r3, #1
   13044:	str	r3, [sp, #28]
   13048:	cmp	r9, #0
   1304c:	beq	13100 <__assert_fail@plt+0x1e58>
   13050:	mov	r3, #39	; 0x27
   13054:	ldr	r2, [sp, #64]	; 0x40
   13058:	strb	r3, [r2]
   1305c:	mov	r3, #0
   13060:	str	r3, [sp, #32]
   13064:	mov	fp, #1
   13068:	str	fp, [sp, #52]	; 0x34
   1306c:	movw	r3, #20320	; 0x4f60
   13070:	movt	r3, #2
   13074:	str	r3, [sp, #60]	; 0x3c
   13078:	mov	sl, #2
   1307c:	b	12f3c <__assert_fail@plt+0x1c94>
   13080:	ldr	r3, [sp, #32]
   13084:	cmp	r3, #0
   13088:	beq	13048 <__assert_fail@plt+0x1da0>
   1308c:	mov	r3, #1
   13090:	str	r3, [sp, #52]	; 0x34
   13094:	movw	r3, #20320	; 0x4f60
   13098:	movt	r3, #2
   1309c:	str	r3, [sp, #60]	; 0x3c
   130a0:	mov	fp, #0
   130a4:	b	12f3c <__assert_fail@plt+0x1c94>
   130a8:	bl	1129c <abort@plt>
   130ac:	mov	fp, #0
   130b0:	str	fp, [sp, #32]
   130b4:	mov	r3, #1
   130b8:	str	r3, [sp, #28]
   130bc:	b	12f3c <__assert_fail@plt+0x1c94>
   130c0:	ldr	r3, [sp, #32]
   130c4:	str	r3, [sp, #28]
   130c8:	mov	r3, #1
   130cc:	str	r3, [sp, #52]	; 0x34
   130d0:	movw	r3, #20300	; 0x4f4c
   130d4:	movt	r3, #2
   130d8:	str	r3, [sp, #60]	; 0x3c
   130dc:	mov	fp, #0
   130e0:	b	12f3c <__assert_fail@plt+0x1c94>
   130e4:	mov	fp, #1
   130e8:	str	fp, [sp, #28]
   130ec:	str	fp, [sp, #52]	; 0x34
   130f0:	movw	r3, #20300	; 0x4f4c
   130f4:	movt	r3, #2
   130f8:	str	r3, [sp, #60]	; 0x3c
   130fc:	b	12f3c <__assert_fail@plt+0x1c94>
   13100:	mov	r3, #0
   13104:	str	r3, [sp, #32]
   13108:	mov	fp, #1
   1310c:	str	fp, [sp, #52]	; 0x34
   13110:	movw	r3, #20320	; 0x4f60
   13114:	movt	r3, #2
   13118:	str	r3, [sp, #60]	; 0x3c
   1311c:	mov	sl, #2
   13120:	b	12f3c <__assert_fail@plt+0x1c94>
   13124:	mov	r3, r2
   13128:	add	r4, r6, r2
   1312c:	ldr	r2, [sp, #24]
   13130:	cmp	r3, #1
   13134:	movls	r3, #0
   13138:	movhi	r3, #1
   1313c:	cmn	r2, #1
   13140:	movne	r3, #0
   13144:	cmp	r3, #0
   13148:	beq	13158 <__assert_fail@plt+0x1eb0>
   1314c:	ldr	r0, [sp, #48]	; 0x30
   13150:	bl	11188 <strlen@plt>
   13154:	str	r0, [sp, #24]
   13158:	ldr	r3, [sp, #24]
   1315c:	cmp	r4, r3
   13160:	bhi	1434c <__assert_fail@plt+0x30a4>
   13164:	ldr	r3, [sp, #48]	; 0x30
   13168:	add	r4, r3, r6
   1316c:	ldr	r2, [sp, #52]	; 0x34
   13170:	ldr	r1, [sp, #60]	; 0x3c
   13174:	mov	r0, r4
   13178:	bl	11074 <memcmp@plt>
   1317c:	cmp	r0, #0
   13180:	bne	1434c <__assert_fail@plt+0x30a4>
   13184:	ldr	r3, [sp, #32]
   13188:	cmp	r3, #0
   1318c:	bne	1339c <__assert_fail@plt+0x20f4>
   13190:	ldrb	r4, [r4]
   13194:	cmp	r4, #126	; 0x7e
   13198:	ldrls	pc, [pc, r4, lsl #2]
   1319c:	b	13c50 <__assert_fail@plt+0x29a8>
   131a0:	andeq	r3, r1, r0, ror #7
   131a4:	andeq	r3, r1, r0, asr ip
   131a8:	andeq	r3, r1, r0, asr ip
   131ac:	andeq	r3, r1, r0, asr ip
   131b0:	andeq	r3, r1, r0, asr ip
   131b4:	andeq	r3, r1, r0, asr ip
   131b8:	andeq	r3, r1, r0, asr ip
   131bc:	strdeq	r3, [r1], -r8
   131c0:	andeq	r3, r1, ip, ror r6
   131c4:	andeq	r3, r1, r0, lsr #20
   131c8:	andeq	r3, r1, ip, asr #21
   131cc:	andeq	r3, r1, r4, lsr sl
   131d0:	muleq	r1, r0, r6
   131d4:	andeq	r3, r1, r4, lsr #13
   131d8:	andeq	r3, r1, r0, asr ip
   131dc:	andeq	r3, r1, r0, asr ip
   131e0:	andeq	r3, r1, r0, asr ip
   131e4:	andeq	r3, r1, r0, asr ip
   131e8:	andeq	r3, r1, r0, asr ip
   131ec:	andeq	r3, r1, r0, asr ip
   131f0:	andeq	r3, r1, r0, asr ip
   131f4:	andeq	r3, r1, r0, asr ip
   131f8:	andeq	r3, r1, r0, asr ip
   131fc:	andeq	r3, r1, r0, asr ip
   13200:	andeq	r3, r1, r0, asr ip
   13204:	andeq	r3, r1, r0, asr ip
   13208:	andeq	r3, r1, r0, asr ip
   1320c:	andeq	r3, r1, r0, asr ip
   13210:	andeq	r3, r1, r0, asr ip
   13214:	andeq	r3, r1, r0, asr ip
   13218:	andeq	r3, r1, r0, asr ip
   1321c:	andeq	r3, r1, r0, asr ip
   13220:	andeq	r3, r1, ip, ror #22
   13224:	muleq	r1, r0, fp
   13228:	muleq	r1, r0, fp
   1322c:	andeq	r3, r1, r8, lsr #22
   13230:	muleq	r1, r0, fp
   13234:	strheq	r4, [r1], -r0
   13238:	muleq	r1, r0, fp
   1323c:			; <UNDEFINED> instruction: 0x00013bb0
   13240:	muleq	r1, r0, fp
   13244:	muleq	r1, r0, fp
   13248:	muleq	r1, r0, fp
   1324c:	strheq	r4, [r1], -r0
   13250:	strheq	r4, [r1], -r0
   13254:	strheq	r4, [r1], -r0
   13258:	strheq	r4, [r1], -r0
   1325c:	strheq	r4, [r1], -r0
   13260:	strheq	r4, [r1], -r0
   13264:	strheq	r4, [r1], -r0
   13268:	strheq	r4, [r1], -r0
   1326c:	strheq	r4, [r1], -r0
   13270:	strheq	r4, [r1], -r0
   13274:	strheq	r4, [r1], -r0
   13278:	strheq	r4, [r1], -r0
   1327c:	strheq	r4, [r1], -r0
   13280:	strheq	r4, [r1], -r0
   13284:	strheq	r4, [r1], -r0
   13288:	strheq	r4, [r1], -r0
   1328c:	muleq	r1, r0, fp
   13290:	muleq	r1, r0, fp
   13294:	muleq	r1, r0, fp
   13298:	muleq	r1, r0, fp
   1329c:	andeq	r3, r1, r0, lsl r5
   132a0:	andeq	r3, r1, r0, asr ip
   132a4:	strheq	r4, [r1], -r0
   132a8:	strheq	r4, [r1], -r0
   132ac:	strheq	r4, [r1], -r0
   132b0:	strheq	r4, [r1], -r0
   132b4:	strheq	r4, [r1], -r0
   132b8:	strheq	r4, [r1], -r0
   132bc:	strheq	r4, [r1], -r0
   132c0:	strheq	r4, [r1], -r0
   132c4:	strheq	r4, [r1], -r0
   132c8:	strheq	r4, [r1], -r0
   132cc:	strheq	r4, [r1], -r0
   132d0:	strheq	r4, [r1], -r0
   132d4:	strheq	r4, [r1], -r0
   132d8:	strheq	r4, [r1], -r0
   132dc:	strheq	r4, [r1], -r0
   132e0:	strheq	r4, [r1], -r0
   132e4:	strheq	r4, [r1], -r0
   132e8:	strheq	r4, [r1], -r0
   132ec:	strheq	r4, [r1], -r0
   132f0:	strheq	r4, [r1], -r0
   132f4:	strheq	r4, [r1], -r0
   132f8:	strheq	r4, [r1], -r0
   132fc:	strheq	r4, [r1], -r0
   13300:	strheq	r4, [r1], -r0
   13304:	strheq	r4, [r1], -r0
   13308:	strheq	r4, [r1], -r0
   1330c:	muleq	r1, r0, fp
   13310:	andeq	r3, r1, r8, asr #20
   13314:	strheq	r4, [r1], -r0
   13318:	muleq	r1, r0, fp
   1331c:	strheq	r4, [r1], -r0
   13320:	muleq	r1, r0, fp
   13324:	strheq	r4, [r1], -r0
   13328:	strheq	r4, [r1], -r0
   1332c:	strheq	r4, [r1], -r0
   13330:	strheq	r4, [r1], -r0
   13334:	strheq	r4, [r1], -r0
   13338:	strheq	r4, [r1], -r0
   1333c:	strheq	r4, [r1], -r0
   13340:	strheq	r4, [r1], -r0
   13344:	strheq	r4, [r1], -r0
   13348:	strheq	r4, [r1], -r0
   1334c:	strheq	r4, [r1], -r0
   13350:	strheq	r4, [r1], -r0
   13354:	strheq	r4, [r1], -r0
   13358:	strheq	r4, [r1], -r0
   1335c:	strheq	r4, [r1], -r0
   13360:	strheq	r4, [r1], -r0
   13364:	strheq	r4, [r1], -r0
   13368:	strheq	r4, [r1], -r0
   1336c:	strheq	r4, [r1], -r0
   13370:	strheq	r4, [r1], -r0
   13374:	strheq	r4, [r1], -r0
   13378:	strheq	r4, [r1], -r0
   1337c:	strheq	r4, [r1], -r0
   13380:	strheq	r4, [r1], -r0
   13384:	strheq	r4, [r1], -r0
   13388:	strheq	r4, [r1], -r0
   1338c:	andeq	r3, r1, r8, lsl #22
   13390:	muleq	r1, r0, fp
   13394:	andeq	r3, r1, r8, lsl #22
   13398:	andeq	r3, r1, r8, lsr #22
   1339c:	mov	r8, r9
   133a0:	mov	r7, sl
   133a4:	b	142a4 <__assert_fail@plt+0x2ffc>
   133a8:	ldr	r3, [sp, #28]
   133ac:	cmp	r3, #0
   133b0:	bne	133d0 <__assert_fail@plt+0x2128>
   133b4:	ldr	r3, [sp, #156]	; 0x9c
   133b8:	tst	r3, #1
   133bc:	bne	137b8 <__assert_fail@plt+0x2510>
   133c0:	ldr	r3, [sp, #28]
   133c4:	str	r3, [sp, #44]	; 0x2c
   133c8:	mov	r5, r3
   133cc:	b	136d8 <__assert_fail@plt+0x2430>
   133d0:	ldr	r3, [sp, #32]
   133d4:	cmp	r3, #0
   133d8:	bne	14254 <__assert_fail@plt+0x2fac>
   133dc:	str	r3, [sp, #44]	; 0x2c
   133e0:	ldr	r3, [sp, #36]	; 0x24
   133e4:	eor	r3, r3, #1
   133e8:	cmp	sl, #2
   133ec:	movne	r3, #0
   133f0:	andeq	r3, r3, #1
   133f4:	cmp	r3, #0
   133f8:	beq	13450 <__assert_fail@plt+0x21a8>
   133fc:	cmp	r9, fp
   13400:	movhi	r2, #39	; 0x27
   13404:	strbhi	r2, [r8, fp]
   13408:	add	r2, fp, #1
   1340c:	cmp	r9, r2
   13410:	movhi	r1, #36	; 0x24
   13414:	strbhi	r1, [r8, r2]
   13418:	add	r2, fp, #2
   1341c:	cmp	r9, r2
   13420:	movhi	r1, #39	; 0x27
   13424:	strbhi	r1, [r8, r2]
   13428:	add	r2, fp, #3
   1342c:	cmp	r9, r2
   13430:	bls	14310 <__assert_fail@plt+0x3068>
   13434:	mov	r1, #92	; 0x5c
   13438:	strb	r1, [r8, r2]
   1343c:	add	fp, fp, #4
   13440:	str	r3, [sp, #36]	; 0x24
   13444:	mov	r5, #0
   13448:	mov	r4, #48	; 0x30
   1344c:	b	13724 <__assert_fail@plt+0x247c>
   13450:	cmp	r9, fp
   13454:	bhi	1347c <__assert_fail@plt+0x21d4>
   13458:	add	r1, fp, #1
   1345c:	ldr	r2, [sp, #56]	; 0x38
   13460:	cmp	r2, #0
   13464:	bne	134a4 <__assert_fail@plt+0x21fc>
   13468:	mov	r3, r5
   1346c:	ldr	r5, [sp, #56]	; 0x38
   13470:	mov	fp, r1
   13474:	mov	r4, #48	; 0x30
   13478:	b	136d8 <__assert_fail@plt+0x2430>
   1347c:	mov	r2, #92	; 0x5c
   13480:	strb	r2, [r8, fp]
   13484:	add	r1, fp, #1
   13488:	ldr	r2, [sp, #56]	; 0x38
   1348c:	cmp	r2, #0
   13490:	moveq	r3, r5
   13494:	moveq	r5, r2
   13498:	moveq	fp, r1
   1349c:	moveq	r4, #48	; 0x30
   134a0:	beq	13724 <__assert_fail@plt+0x247c>
   134a4:	add	r2, r6, #1
   134a8:	ldr	r0, [sp, #24]
   134ac:	cmp	r2, r0
   134b0:	bcs	134cc <__assert_fail@plt+0x2224>
   134b4:	ldr	r0, [sp, #48]	; 0x30
   134b8:	ldrb	r2, [r0, r2]
   134bc:	sub	r2, r2, #48	; 0x30
   134c0:	uxtb	r2, r2
   134c4:	cmp	r2, #9
   134c8:	bls	134e4 <__assert_fail@plt+0x223c>
   134cc:	mov	r2, r3
   134d0:	mov	r3, r5
   134d4:	mov	r5, r2
   134d8:	mov	fp, r1
   134dc:	mov	r4, #48	; 0x30
   134e0:	b	136fc <__assert_fail@plt+0x2454>
   134e4:	cmp	r9, r1
   134e8:	movhi	r2, #48	; 0x30
   134ec:	strbhi	r2, [r8, r1]
   134f0:	add	r2, fp, #2
   134f4:	cmp	r9, r2
   134f8:	movhi	r1, #48	; 0x30
   134fc:	strbhi	r1, [r8, r2]
   13500:	add	r1, fp, #3
   13504:	b	134cc <__assert_fail@plt+0x2224>
   13508:	mov	r3, #0
   1350c:	str	r3, [sp, #44]	; 0x2c
   13510:	cmp	sl, #2
   13514:	beq	13530 <__assert_fail@plt+0x2288>
   13518:	cmp	sl, #5
   1351c:	beq	13548 <__assert_fail@plt+0x22a0>
   13520:	mov	r5, #0
   13524:	mov	r3, r5
   13528:	mov	r4, #63	; 0x3f
   1352c:	b	136d8 <__assert_fail@plt+0x2430>
   13530:	ldr	r3, [sp, #32]
   13534:	cmp	r3, #0
   13538:	bne	14260 <__assert_fail@plt+0x2fb8>
   1353c:	mov	r5, r3
   13540:	mov	r4, #63	; 0x3f
   13544:	b	13c40 <__assert_fail@plt+0x2998>
   13548:	ldr	r3, [sp, #156]	; 0x9c
   1354c:	tst	r3, #4
   13550:	beq	14078 <__assert_fail@plt+0x2dd0>
   13554:	add	r2, r6, #2
   13558:	ldr	r3, [sp, #24]
   1355c:	cmp	r2, r3
   13560:	bcs	14088 <__assert_fail@plt+0x2de0>
   13564:	ldr	r3, [sp, #48]	; 0x30
   13568:	add	r3, r3, r6
   1356c:	ldrb	r4, [r3, #1]
   13570:	cmp	r4, #63	; 0x3f
   13574:	movne	r5, #0
   13578:	movne	r3, r5
   1357c:	movne	r4, #63	; 0x3f
   13580:	bne	136d8 <__assert_fail@plt+0x2430>
   13584:	ldr	r3, [sp, #48]	; 0x30
   13588:	ldrb	r1, [r3, r2]
   1358c:	sub	r3, r1, #33	; 0x21
   13590:	cmp	r3, #29
   13594:	ldrls	pc, [pc, r3, lsl #2]
   13598:	b	14098 <__assert_fail@plt+0x2df0>
   1359c:	andeq	r3, r1, r4, lsl r6
   135a0:	muleq	r1, r8, r0
   135a4:	muleq	r1, r8, r0
   135a8:	muleq	r1, r8, r0
   135ac:	muleq	r1, r8, r0
   135b0:	muleq	r1, r8, r0
   135b4:	andeq	r3, r1, r4, lsl r6
   135b8:	andeq	r3, r1, r4, lsl r6
   135bc:	andeq	r3, r1, r4, lsl r6
   135c0:	muleq	r1, r8, r0
   135c4:	muleq	r1, r8, r0
   135c8:	muleq	r1, r8, r0
   135cc:	andeq	r3, r1, r4, lsl r6
   135d0:	muleq	r1, r8, r0
   135d4:	andeq	r3, r1, r4, lsl r6
   135d8:	muleq	r1, r8, r0
   135dc:	muleq	r1, r8, r0
   135e0:	muleq	r1, r8, r0
   135e4:	muleq	r1, r8, r0
   135e8:	muleq	r1, r8, r0
   135ec:	muleq	r1, r8, r0
   135f0:	muleq	r1, r8, r0
   135f4:	muleq	r1, r8, r0
   135f8:	muleq	r1, r8, r0
   135fc:	muleq	r1, r8, r0
   13600:	muleq	r1, r8, r0
   13604:	muleq	r1, r8, r0
   13608:	andeq	r3, r1, r4, lsl r6
   1360c:	andeq	r3, r1, r4, lsl r6
   13610:	andeq	r3, r1, r4, lsl r6
   13614:	ldr	r3, [sp, #32]
   13618:	cmp	r3, #0
   1361c:	bne	14304 <__assert_fail@plt+0x305c>
   13620:	cmp	r9, fp
   13624:	movhi	r3, #63	; 0x3f
   13628:	strbhi	r3, [r8, fp]
   1362c:	add	r3, fp, #1
   13630:	cmp	r9, r3
   13634:	movhi	r0, #34	; 0x22
   13638:	strbhi	r0, [r8, r3]
   1363c:	add	r3, fp, #2
   13640:	cmp	r9, r3
   13644:	movhi	r0, #34	; 0x22
   13648:	strbhi	r0, [r8, r3]
   1364c:	add	r3, fp, #3
   13650:	cmp	r9, r3
   13654:	movhi	r0, #63	; 0x3f
   13658:	strbhi	r0, [r8, r3]
   1365c:	add	fp, fp, #4
   13660:	ldr	r3, [sp, #32]
   13664:	mov	r5, r3
   13668:	mov	r4, r1
   1366c:	mov	r6, r2
   13670:	b	136d8 <__assert_fail@plt+0x2430>
   13674:	mov	r3, #0
   13678:	str	r3, [sp, #44]	; 0x2c
   1367c:	mov	r4, #8
   13680:	mov	r3, #98	; 0x62
   13684:	b	136c4 <__assert_fail@plt+0x241c>
   13688:	mov	r3, #0
   1368c:	str	r3, [sp, #44]	; 0x2c
   13690:	mov	r4, #12
   13694:	mov	r3, #102	; 0x66
   13698:	b	136c4 <__assert_fail@plt+0x241c>
   1369c:	mov	r3, #0
   136a0:	str	r3, [sp, #44]	; 0x2c
   136a4:	mov	r4, #13
   136a8:	mov	r3, #114	; 0x72
   136ac:	ldr	r2, [sp, #32]
   136b0:	cmp	sl, #2
   136b4:	movne	r2, #0
   136b8:	andeq	r2, r2, #1
   136bc:	cmp	r2, #0
   136c0:	bne	13ae4 <__assert_fail@plt+0x283c>
   136c4:	ldr	r2, [sp, #28]
   136c8:	cmp	r2, #0
   136cc:	bne	140cc <__assert_fail@plt+0x2e24>
   136d0:	mov	r5, r2
   136d4:	mov	r3, r2
   136d8:	ldr	r2, [sp, #28]
   136dc:	eor	r2, r2, #1
   136e0:	cmp	sl, #2
   136e4:	orreq	r2, r2, #1
   136e8:	eor	r2, r2, #1
   136ec:	ldr	r1, [sp, #32]
   136f0:	orr	r2, r1, r2
   136f4:	tst	r2, #255	; 0xff
   136f8:	beq	13724 <__assert_fail@plt+0x247c>
   136fc:	ldr	r2, [sp, #160]	; 0xa0
   13700:	cmp	r2, #0
   13704:	beq	13724 <__assert_fail@plt+0x247c>
   13708:	ubfx	r1, r4, #5, #8
   1370c:	and	r2, r4, #31
   13710:	ldr	r0, [sp, #160]	; 0xa0
   13714:	ldr	r1, [r0, r1, lsl #2]
   13718:	lsr	r2, r1, r2
   1371c:	tst	r2, #1
   13720:	bne	13730 <__assert_fail@plt+0x2488>
   13724:	ldr	r2, [sp, #44]	; 0x2c
   13728:	cmp	r2, #0
   1372c:	beq	13a84 <__assert_fail@plt+0x27dc>
   13730:	ldr	r3, [sp, #32]
   13734:	cmp	r3, #0
   13738:	bne	14284 <__assert_fail@plt+0x2fdc>
   1373c:	ldr	r3, [sp, #36]	; 0x24
   13740:	eor	r3, r3, #1
   13744:	cmp	sl, #2
   13748:	movne	r3, #0
   1374c:	andeq	r3, r3, #1
   13750:	cmp	r3, #0
   13754:	beq	1378c <__assert_fail@plt+0x24e4>
   13758:	cmp	r9, fp
   1375c:	movhi	r2, #39	; 0x27
   13760:	strbhi	r2, [r8, fp]
   13764:	add	r2, fp, #1
   13768:	cmp	r9, r2
   1376c:	movhi	r1, #36	; 0x24
   13770:	strbhi	r1, [r8, r2]
   13774:	add	r2, fp, #2
   13778:	cmp	r9, r2
   1377c:	movhi	r1, #39	; 0x27
   13780:	strbhi	r1, [r8, r2]
   13784:	add	fp, fp, #3
   13788:	str	r3, [sp, #36]	; 0x24
   1378c:	cmp	r9, fp
   13790:	movhi	r3, #92	; 0x5c
   13794:	strbhi	r3, [r8, fp]
   13798:	add	fp, fp, #1
   1379c:	cmp	fp, r9
   137a0:	strbcc	r4, [r8, fp]
   137a4:	add	fp, fp, #1
   137a8:	cmp	r5, #0
   137ac:	ldr	r3, [sp, #40]	; 0x28
   137b0:	moveq	r3, r5
   137b4:	str	r3, [sp, #40]	; 0x28
   137b8:	add	r6, r6, #1
   137bc:	ldr	r3, [sp, #24]
   137c0:	cmn	r3, #1
   137c4:	beq	140f4 <__assert_fail@plt+0x2e4c>
   137c8:	ldr	r3, [sp, #24]
   137cc:	subs	r5, r3, r6
   137d0:	movne	r5, #1
   137d4:	cmp	r5, #0
   137d8:	beq	14108 <__assert_fail@plt+0x2e60>
   137dc:	ldr	r3, [sp, #28]
   137e0:	cmp	sl, #2
   137e4:	moveq	r3, #0
   137e8:	andne	r3, r3, #1
   137ec:	str	r3, [sp, #56]	; 0x38
   137f0:	ldr	r2, [sp, #52]	; 0x34
   137f4:	adds	r7, r2, #0
   137f8:	movne	r7, #1
   137fc:	ands	r3, r3, r7
   13800:	str	r3, [sp, #44]	; 0x2c
   13804:	bne	13124 <__assert_fail@plt+0x1e7c>
   13808:	ldr	r3, [sp, #48]	; 0x30
   1380c:	ldrb	r4, [r3, r6]
   13810:	cmp	r4, #126	; 0x7e
   13814:	ldrls	pc, [pc, r4, lsl #2]
   13818:	b	13c50 <__assert_fail@plt+0x29a8>
   1381c:	andeq	r3, r1, r8, lsr #7
   13820:	andeq	r3, r1, r0, asr ip
   13824:	andeq	r3, r1, r0, asr ip
   13828:	andeq	r3, r1, r0, asr ip
   1382c:	andeq	r3, r1, r0, asr ip
   13830:	andeq	r3, r1, r0, asr ip
   13834:	andeq	r3, r1, r0, asr ip
   13838:	strdeq	r3, [r1], -r0
   1383c:	andeq	r3, r1, ip, ror r6
   13840:	andeq	r3, r1, r0, lsr #20
   13844:	andeq	r3, r1, r4, asr #21
   13848:	andeq	r3, r1, r4, lsr sl
   1384c:	muleq	r1, r0, r6
   13850:	andeq	r3, r1, r4, lsr #13
   13854:	andeq	r3, r1, r0, asr ip
   13858:	andeq	r3, r1, r0, asr ip
   1385c:	andeq	r3, r1, r0, asr ip
   13860:	andeq	r3, r1, r0, asr ip
   13864:	andeq	r3, r1, r0, asr ip
   13868:	andeq	r3, r1, r0, asr ip
   1386c:	andeq	r3, r1, r0, asr ip
   13870:	andeq	r3, r1, r0, asr ip
   13874:	andeq	r3, r1, r0, asr ip
   13878:	andeq	r3, r1, r0, asr ip
   1387c:	andeq	r3, r1, r0, asr ip
   13880:	andeq	r3, r1, r0, asr ip
   13884:	andeq	r3, r1, r0, asr ip
   13888:	andeq	r3, r1, r0, asr ip
   1388c:	andeq	r3, r1, r0, asr ip
   13890:	andeq	r3, r1, r0, asr ip
   13894:	andeq	r3, r1, r0, asr ip
   13898:	andeq	r3, r1, r0, asr ip
   1389c:	andeq	r3, r1, ip, ror #22
   138a0:	andeq	r3, r1, r8, ror #22
   138a4:	andeq	r3, r1, r8, ror #22
   138a8:	andeq	r3, r1, r8, lsr #22
   138ac:	andeq	r3, r1, r8, ror #22
   138b0:	andeq	r4, r1, r0, ror r0
   138b4:	andeq	r3, r1, r8, ror #22
   138b8:			; <UNDEFINED> instruction: 0x00013bb0
   138bc:	andeq	r3, r1, r8, ror #22
   138c0:	andeq	r3, r1, r8, ror #22
   138c4:	andeq	r3, r1, r8, ror #22
   138c8:	andeq	r4, r1, r0, ror r0
   138cc:	andeq	r4, r1, r0, ror r0
   138d0:	andeq	r4, r1, r0, ror r0
   138d4:	andeq	r4, r1, r0, ror r0
   138d8:	andeq	r4, r1, r0, ror r0
   138dc:	andeq	r4, r1, r0, ror r0
   138e0:	andeq	r4, r1, r0, ror r0
   138e4:	andeq	r4, r1, r0, ror r0
   138e8:	andeq	r4, r1, r0, ror r0
   138ec:	andeq	r4, r1, r0, ror r0
   138f0:	andeq	r4, r1, r0, ror r0
   138f4:	andeq	r4, r1, r0, ror r0
   138f8:	andeq	r4, r1, r0, ror r0
   138fc:	andeq	r4, r1, r0, ror r0
   13900:	andeq	r4, r1, r0, ror r0
   13904:	andeq	r4, r1, r0, ror r0
   13908:	andeq	r3, r1, r8, ror #22
   1390c:	andeq	r3, r1, r8, ror #22
   13910:	andeq	r3, r1, r8, ror #22
   13914:	andeq	r3, r1, r8, ror #22
   13918:	andeq	r3, r1, r0, lsl r5
   1391c:	andeq	r3, r1, r0, asr ip
   13920:	andeq	r4, r1, r0, ror r0
   13924:	andeq	r4, r1, r0, ror r0
   13928:	andeq	r4, r1, r0, ror r0
   1392c:	andeq	r4, r1, r0, ror r0
   13930:	andeq	r4, r1, r0, ror r0
   13934:	andeq	r4, r1, r0, ror r0
   13938:	andeq	r4, r1, r0, ror r0
   1393c:	andeq	r4, r1, r0, ror r0
   13940:	andeq	r4, r1, r0, ror r0
   13944:	andeq	r4, r1, r0, ror r0
   13948:	andeq	r4, r1, r0, ror r0
   1394c:	andeq	r4, r1, r0, ror r0
   13950:	andeq	r4, r1, r0, ror r0
   13954:	andeq	r4, r1, r0, ror r0
   13958:	andeq	r4, r1, r0, ror r0
   1395c:	andeq	r4, r1, r0, ror r0
   13960:	andeq	r4, r1, r0, ror r0
   13964:	andeq	r4, r1, r0, ror r0
   13968:	andeq	r4, r1, r0, ror r0
   1396c:	andeq	r4, r1, r0, ror r0
   13970:	andeq	r4, r1, r0, ror r0
   13974:	andeq	r4, r1, r0, ror r0
   13978:	andeq	r4, r1, r0, ror r0
   1397c:	andeq	r4, r1, r0, ror r0
   13980:	andeq	r4, r1, r0, ror r0
   13984:	andeq	r4, r1, r0, ror r0
   13988:	andeq	r3, r1, r8, ror #22
   1398c:	andeq	r3, r1, r8, asr #20
   13990:	andeq	r4, r1, r0, ror r0
   13994:	andeq	r3, r1, r8, ror #22
   13998:	andeq	r4, r1, r0, ror r0
   1399c:	andeq	r3, r1, r8, ror #22
   139a0:	andeq	r4, r1, r0, ror r0
   139a4:	andeq	r4, r1, r0, ror r0
   139a8:	andeq	r4, r1, r0, ror r0
   139ac:	andeq	r4, r1, r0, ror r0
   139b0:	andeq	r4, r1, r0, ror r0
   139b4:	andeq	r4, r1, r0, ror r0
   139b8:	andeq	r4, r1, r0, ror r0
   139bc:	andeq	r4, r1, r0, ror r0
   139c0:	andeq	r4, r1, r0, ror r0
   139c4:	andeq	r4, r1, r0, ror r0
   139c8:	andeq	r4, r1, r0, ror r0
   139cc:	andeq	r4, r1, r0, ror r0
   139d0:	andeq	r4, r1, r0, ror r0
   139d4:	andeq	r4, r1, r0, ror r0
   139d8:	andeq	r4, r1, r0, ror r0
   139dc:	andeq	r4, r1, r0, ror r0
   139e0:	andeq	r4, r1, r0, ror r0
   139e4:	andeq	r4, r1, r0, ror r0
   139e8:	andeq	r4, r1, r0, ror r0
   139ec:	andeq	r4, r1, r0, ror r0
   139f0:	andeq	r4, r1, r0, ror r0
   139f4:	andeq	r4, r1, r0, ror r0
   139f8:	andeq	r4, r1, r0, ror r0
   139fc:	andeq	r4, r1, r0, ror r0
   13a00:	andeq	r4, r1, r0, ror r0
   13a04:	andeq	r4, r1, r0, ror r0
   13a08:	andeq	r3, r1, r8, lsl #22
   13a0c:	andeq	r3, r1, r8, ror #22
   13a10:	andeq	r3, r1, r8, lsl #22
   13a14:	andeq	r3, r1, r8, lsr #22
   13a18:	mov	r3, #0
   13a1c:	str	r3, [sp, #44]	; 0x2c
   13a20:	mov	r4, #9
   13a24:	mov	r3, #116	; 0x74
   13a28:	b	136ac <__assert_fail@plt+0x2404>
   13a2c:	mov	r3, #0
   13a30:	str	r3, [sp, #44]	; 0x2c
   13a34:	mov	r4, #11
   13a38:	mov	r3, #118	; 0x76
   13a3c:	b	136c4 <__assert_fail@plt+0x241c>
   13a40:	mov	r3, #0
   13a44:	str	r3, [sp, #44]	; 0x2c
   13a48:	cmp	sl, #2
   13a4c:	beq	13a70 <__assert_fail@plt+0x27c8>
   13a50:	ldr	r3, [sp, #28]
   13a54:	ldr	r2, [sp, #32]
   13a58:	and	r3, r3, r2
   13a5c:	tst	r7, r3
   13a60:	bne	140e4 <__assert_fail@plt+0x2e3c>
   13a64:	mov	r4, #92	; 0x5c
   13a68:	mov	r3, r4
   13a6c:	b	136c4 <__assert_fail@plt+0x241c>
   13a70:	ldr	r3, [sp, #32]
   13a74:	cmp	r3, #0
   13a78:	bne	1426c <__assert_fail@plt+0x2fc4>
   13a7c:	mov	r5, r3
   13a80:	mov	r4, #92	; 0x5c
   13a84:	eor	r3, r3, #1
   13a88:	ldr	r2, [sp, #36]	; 0x24
   13a8c:	and	r3, r3, r2
   13a90:	tst	r3, #255	; 0xff
   13a94:	beq	1379c <__assert_fail@plt+0x24f4>
   13a98:	cmp	r9, fp
   13a9c:	movhi	r3, #39	; 0x27
   13aa0:	strbhi	r3, [r8, fp]
   13aa4:	add	r3, fp, #1
   13aa8:	cmp	r9, r3
   13aac:	movhi	r2, #39	; 0x27
   13ab0:	strbhi	r2, [r8, r3]
   13ab4:	add	fp, fp, #2
   13ab8:	mov	r3, #0
   13abc:	str	r3, [sp, #36]	; 0x24
   13ac0:	b	1379c <__assert_fail@plt+0x24f4>
   13ac4:	mov	r3, #110	; 0x6e
   13ac8:	b	136ac <__assert_fail@plt+0x2404>
   13acc:	mov	r3, #110	; 0x6e
   13ad0:	b	136ac <__assert_fail@plt+0x2404>
   13ad4:	mov	r3, #0
   13ad8:	str	r3, [sp, #44]	; 0x2c
   13adc:	mov	r3, #110	; 0x6e
   13ae0:	b	136ac <__assert_fail@plt+0x2404>
   13ae4:	mov	r8, r9
   13ae8:	mov	r7, #2
   13aec:	b	1428c <__assert_fail@plt+0x2fe4>
   13af0:	mov	r3, #97	; 0x61
   13af4:	b	136c4 <__assert_fail@plt+0x241c>
   13af8:	mov	r3, #97	; 0x61
   13afc:	b	136c4 <__assert_fail@plt+0x241c>
   13b00:	mov	r3, #0
   13b04:	str	r3, [sp, #44]	; 0x2c
   13b08:	ldr	r3, [sp, #24]
   13b0c:	cmn	r3, #1
   13b10:	beq	13b3c <__assert_fail@plt+0x2894>
   13b14:	ldr	r3, [sp, #24]
   13b18:	subs	r3, r3, #1
   13b1c:	movne	r3, #1
   13b20:	cmp	r3, #0
   13b24:	bne	140a4 <__assert_fail@plt+0x2dfc>
   13b28:	cmp	r6, #0
   13b2c:	beq	13b6c <__assert_fail@plt+0x28c4>
   13b30:	mov	r5, #0
   13b34:	mov	r3, r5
   13b38:	b	136d8 <__assert_fail@plt+0x2430>
   13b3c:	ldr	r3, [sp, #48]	; 0x30
   13b40:	ldrb	r3, [r3, #1]
   13b44:	adds	r3, r3, #0
   13b48:	movne	r3, #1
   13b4c:	b	13b20 <__assert_fail@plt+0x2878>
   13b50:	mov	r3, #0
   13b54:	str	r3, [sp, #44]	; 0x2c
   13b58:	b	13b28 <__assert_fail@plt+0x2880>
   13b5c:	mov	r3, #0
   13b60:	str	r3, [sp, #44]	; 0x2c
   13b64:	b	13b6c <__assert_fail@plt+0x28c4>
   13b68:	ldr	r5, [sp, #44]	; 0x2c
   13b6c:	ldr	r3, [sp, #32]
   13b70:	cmp	sl, #2
   13b74:	movne	r3, #0
   13b78:	andeq	r3, r3, #1
   13b7c:	cmp	r3, #0
   13b80:	beq	136d8 <__assert_fail@plt+0x2430>
   13b84:	mov	r8, r9
   13b88:	mov	r7, #2
   13b8c:	b	1428c <__assert_fail@plt+0x2fe4>
   13b90:	ldr	r5, [sp, #32]
   13b94:	b	13b6c <__assert_fail@plt+0x28c4>
   13b98:	mov	r3, #0
   13b9c:	str	r3, [sp, #44]	; 0x2c
   13ba0:	mov	r5, r3
   13ba4:	b	13b6c <__assert_fail@plt+0x28c4>
   13ba8:	mov	r3, #0
   13bac:	str	r3, [sp, #44]	; 0x2c
   13bb0:	cmp	sl, #2
   13bb4:	strne	r5, [sp, #68]	; 0x44
   13bb8:	movne	r3, #0
   13bbc:	movne	r4, #39	; 0x27
   13bc0:	bne	136d8 <__assert_fail@plt+0x2430>
   13bc4:	ldr	r3, [sp, #32]
   13bc8:	cmp	r3, #0
   13bcc:	bne	14278 <__assert_fail@plt+0x2fd0>
   13bd0:	ldr	r3, [sp, #72]	; 0x48
   13bd4:	clz	r3, r3
   13bd8:	lsr	r3, r3, #5
   13bdc:	cmp	r9, #0
   13be0:	moveq	r3, #0
   13be4:	cmp	r3, #0
   13be8:	movne	r3, #0
   13bec:	bne	13c14 <__assert_fail@plt+0x296c>
   13bf0:	cmp	r9, fp
   13bf4:	movhi	r3, #39	; 0x27
   13bf8:	strbhi	r3, [r8, fp]
   13bfc:	add	r3, fp, #1
   13c00:	cmp	r9, r3
   13c04:	movhi	r2, #92	; 0x5c
   13c08:	strbhi	r2, [r8, r3]
   13c0c:	mov	r3, r9
   13c10:	ldr	r9, [sp, #72]	; 0x48
   13c14:	add	r2, fp, #2
   13c18:	cmp	r2, r3
   13c1c:	movcc	r1, #39	; 0x27
   13c20:	strbcc	r1, [r8, r2]
   13c24:	add	fp, fp, #3
   13c28:	str	r5, [sp, #68]	; 0x44
   13c2c:	ldr	r2, [sp, #32]
   13c30:	str	r2, [sp, #36]	; 0x24
   13c34:	str	r9, [sp, #72]	; 0x48
   13c38:	mov	r9, r3
   13c3c:	mov	r4, #39	; 0x27
   13c40:	mov	r3, #0
   13c44:	b	13724 <__assert_fail@plt+0x247c>
   13c48:	mov	r3, #0
   13c4c:	str	r3, [sp, #44]	; 0x2c
   13c50:	ldr	r7, [sp, #76]	; 0x4c
   13c54:	cmp	r7, #1
   13c58:	bne	13c90 <__assert_fail@plt+0x29e8>
   13c5c:	bl	11170 <__ctype_b_loc@plt>
   13c60:	ldr	r2, [r0]
   13c64:	lsl	r3, r4, #1
   13c68:	ldrh	r5, [r2, r3]
   13c6c:	ubfx	r5, r5, #14, #1
   13c70:	mov	ip, r7
   13c74:	eor	r3, r5, #1
   13c78:	ldr	r2, [sp, #28]
   13c7c:	and	r3, r3, r2
   13c80:	ands	r3, r3, #255	; 0xff
   13c84:	beq	136d8 <__assert_fail@plt+0x2430>
   13c88:	mov	r5, #0
   13c8c:	b	13eec <__assert_fail@plt+0x2c44>
   13c90:	mov	r2, #0
   13c94:	mov	r3, #0
   13c98:	strd	r2, [sp, #104]	; 0x68
   13c9c:	ldr	r3, [sp, #24]
   13ca0:	cmn	r3, #1
   13ca4:	beq	13cc8 <__assert_fail@plt+0x2a20>
   13ca8:	mov	r3, #0
   13cac:	str	r4, [sp, #88]	; 0x58
   13cb0:	str	fp, [sp, #92]	; 0x5c
   13cb4:	str	r8, [sp, #56]	; 0x38
   13cb8:	mov	r8, r3
   13cbc:	str	r9, [sp, #84]	; 0x54
   13cc0:	ldr	r9, [sp, #48]	; 0x30
   13cc4:	b	13e14 <__assert_fail@plt+0x2b6c>
   13cc8:	ldr	r0, [sp, #48]	; 0x30
   13ccc:	bl	11188 <strlen@plt>
   13cd0:	str	r0, [sp, #24]
   13cd4:	b	13ca8 <__assert_fail@plt+0x2a00>
   13cd8:	mov	r1, fp
   13cdc:	ldr	r4, [sp, #88]	; 0x58
   13ce0:	mov	r2, r8
   13ce4:	mov	ip, r8
   13ce8:	ldr	fp, [sp, #92]	; 0x5c
   13cec:	ldr	r8, [sp, #56]	; 0x38
   13cf0:	ldr	r9, [sp, #84]	; 0x54
   13cf4:	ldr	r0, [sp, #24]
   13cf8:	cmp	r7, r0
   13cfc:	bcs	13eb4 <__assert_fail@plt+0x2c0c>
   13d00:	ldrb	r3, [r1]
   13d04:	cmp	r3, #0
   13d08:	beq	13ebc <__assert_fail@plt+0x2c14>
   13d0c:	mov	r3, r1
   13d10:	add	r2, r2, #1
   13d14:	add	r1, r6, r2
   13d18:	cmp	r0, r1
   13d1c:	bls	13ec4 <__assert_fail@plt+0x2c1c>
   13d20:	ldrb	r1, [r3, #1]!
   13d24:	cmp	r1, #0
   13d28:	bne	13d10 <__assert_fail@plt+0x2a68>
   13d2c:	mov	ip, r2
   13d30:	mov	r5, #0
   13d34:	b	13ee4 <__assert_fail@plt+0x2c3c>
   13d38:	ldr	r3, [sp, #56]	; 0x38
   13d3c:	str	r3, [sp, #64]	; 0x40
   13d40:	ldr	r8, [sp, #84]	; 0x54
   13d44:	mov	r7, #2
   13d48:	b	1428c <__assert_fail@plt+0x2fe4>
   13d4c:	cmp	r2, r7
   13d50:	beq	13df0 <__assert_fail@plt+0x2b48>
   13d54:	ldrb	r3, [r2], #1
   13d58:	sub	r3, r3, #91	; 0x5b
   13d5c:	cmp	r3, #33	; 0x21
   13d60:	ldrls	pc, [pc, r3, lsl #2]
   13d64:	b	13d4c <__assert_fail@plt+0x2aa4>
   13d68:	andeq	r3, r1, r8, lsr sp
   13d6c:	andeq	r3, r1, r8, lsr sp
   13d70:	andeq	r3, r1, ip, asr #26
   13d74:	andeq	r3, r1, r8, lsr sp
   13d78:	andeq	r3, r1, ip, asr #26
   13d7c:	andeq	r3, r1, r8, lsr sp
   13d80:	andeq	r3, r1, ip, asr #26
   13d84:	andeq	r3, r1, ip, asr #26
   13d88:	andeq	r3, r1, ip, asr #26
   13d8c:	andeq	r3, r1, ip, asr #26
   13d90:	andeq	r3, r1, ip, asr #26
   13d94:	andeq	r3, r1, ip, asr #26
   13d98:	andeq	r3, r1, ip, asr #26
   13d9c:	andeq	r3, r1, ip, asr #26
   13da0:	andeq	r3, r1, ip, asr #26
   13da4:	andeq	r3, r1, ip, asr #26
   13da8:	andeq	r3, r1, ip, asr #26
   13dac:	andeq	r3, r1, ip, asr #26
   13db0:	andeq	r3, r1, ip, asr #26
   13db4:	andeq	r3, r1, ip, asr #26
   13db8:	andeq	r3, r1, ip, asr #26
   13dbc:	andeq	r3, r1, ip, asr #26
   13dc0:	andeq	r3, r1, ip, asr #26
   13dc4:	andeq	r3, r1, ip, asr #26
   13dc8:	andeq	r3, r1, ip, asr #26
   13dcc:	andeq	r3, r1, ip, asr #26
   13dd0:	andeq	r3, r1, ip, asr #26
   13dd4:	andeq	r3, r1, ip, asr #26
   13dd8:	andeq	r3, r1, ip, asr #26
   13ddc:	andeq	r3, r1, ip, asr #26
   13de0:	andeq	r3, r1, ip, asr #26
   13de4:	andeq	r3, r1, ip, asr #26
   13de8:	andeq	r3, r1, ip, asr #26
   13dec:	andeq	r3, r1, r8, lsr sp
   13df0:	ldr	r0, [sp, #100]	; 0x64
   13df4:	bl	110bc <iswprint@plt>
   13df8:	cmp	r0, #0
   13dfc:	moveq	r5, #0
   13e00:	add	r8, r8, r4
   13e04:	add	r0, sp, #104	; 0x68
   13e08:	bl	1105c <mbsinit@plt>
   13e0c:	cmp	r0, #0
   13e10:	bne	13e80 <__assert_fail@plt+0x2bd8>
   13e14:	add	r7, r6, r8
   13e18:	add	fp, r9, r7
   13e1c:	add	r3, sp, #104	; 0x68
   13e20:	ldr	r2, [sp, #24]
   13e24:	sub	r2, r2, r7
   13e28:	mov	r1, fp
   13e2c:	add	r0, sp, #100	; 0x64
   13e30:	bl	23fe4 <__assert_fail@plt+0x12d3c>
   13e34:	subs	r4, r0, #0
   13e38:	beq	13ed0 <__assert_fail@plt+0x2c28>
   13e3c:	cmn	r4, #1
   13e40:	beq	13e98 <__assert_fail@plt+0x2bf0>
   13e44:	cmn	r4, #2
   13e48:	beq	13cd8 <__assert_fail@plt+0x2a30>
   13e4c:	ldr	r3, [sp, #32]
   13e50:	cmp	sl, #2
   13e54:	movne	r3, #0
   13e58:	andeq	r3, r3, #1
   13e5c:	cmp	r3, #0
   13e60:	beq	13df0 <__assert_fail@plt+0x2b48>
   13e64:	cmp	r4, #1
   13e68:	bls	13df0 <__assert_fail@plt+0x2b48>
   13e6c:	add	r2, r7, #1
   13e70:	add	r2, r9, r2
   13e74:	add	r3, r9, r4
   13e78:	add	r7, r3, r7
   13e7c:	b	13d54 <__assert_fail@plt+0x2aac>
   13e80:	ldr	r4, [sp, #88]	; 0x58
   13e84:	mov	ip, r8
   13e88:	ldr	fp, [sp, #92]	; 0x5c
   13e8c:	ldr	r8, [sp, #56]	; 0x38
   13e90:	ldr	r9, [sp, #84]	; 0x54
   13e94:	b	13ee4 <__assert_fail@plt+0x2c3c>
   13e98:	ldr	r4, [sp, #88]	; 0x58
   13e9c:	mov	ip, r8
   13ea0:	ldr	fp, [sp, #92]	; 0x5c
   13ea4:	ldr	r8, [sp, #56]	; 0x38
   13ea8:	ldr	r9, [sp, #84]	; 0x54
   13eac:	mov	r5, #0
   13eb0:	b	13ee4 <__assert_fail@plt+0x2c3c>
   13eb4:	mov	r5, #0
   13eb8:	b	13ee4 <__assert_fail@plt+0x2c3c>
   13ebc:	mov	r5, #0
   13ec0:	b	13ee4 <__assert_fail@plt+0x2c3c>
   13ec4:	mov	ip, r2
   13ec8:	mov	r5, #0
   13ecc:	b	13ee4 <__assert_fail@plt+0x2c3c>
   13ed0:	ldr	r4, [sp, #88]	; 0x58
   13ed4:	mov	ip, r8
   13ed8:	ldr	fp, [sp, #92]	; 0x5c
   13edc:	ldr	r8, [sp, #56]	; 0x38
   13ee0:	ldr	r9, [sp, #84]	; 0x54
   13ee4:	cmp	ip, #1
   13ee8:	bls	13c74 <__assert_fail@plt+0x29cc>
   13eec:	add	lr, r6, ip
   13ef0:	ldr	r3, [sp, #48]	; 0x30
   13ef4:	add	r1, r3, r6
   13ef8:	mov	r3, #0
   13efc:	eor	r0, r5, #1
   13f00:	ldr	r2, [sp, #28]
   13f04:	and	r0, r0, r2
   13f08:	uxtb	r0, r0
   13f0c:	str	r0, [sp, #56]	; 0x38
   13f10:	mov	r7, #92	; 0x5c
   13f14:	ldr	ip, [sp, #36]	; 0x24
   13f18:	str	r5, [sp, #84]	; 0x54
   13f1c:	ldr	r2, [sp, #44]	; 0x2c
   13f20:	b	13f90 <__assert_fail@plt+0x2ce8>
   13f24:	cmp	r2, #0
   13f28:	beq	13f38 <__assert_fail@plt+0x2c90>
   13f2c:	cmp	r9, fp
   13f30:	strbhi	r7, [r8, fp]
   13f34:	add	fp, fp, #1
   13f38:	add	r5, r6, #1
   13f3c:	cmp	r5, lr
   13f40:	bcs	1404c <__assert_fail@plt+0x2da4>
   13f44:	eor	r2, r3, #1
   13f48:	and	r2, r2, ip
   13f4c:	ands	r2, r2, #255	; 0xff
   13f50:	beq	14068 <__assert_fail@plt+0x2dc0>
   13f54:	cmp	r9, fp
   13f58:	movhi	r2, #39	; 0x27
   13f5c:	strbhi	r2, [r8, fp]
   13f60:	add	r2, fp, #1
   13f64:	cmp	r9, r2
   13f68:	movhi	ip, #39	; 0x27
   13f6c:	strbhi	ip, [r8, r2]
   13f70:	add	fp, fp, #2
   13f74:	ldr	ip, [sp, #56]	; 0x38
   13f78:	mov	r2, ip
   13f7c:	mov	r6, r5
   13f80:	cmp	r9, fp
   13f84:	strbhi	r4, [r8, fp]
   13f88:	add	fp, fp, #1
   13f8c:	ldrb	r4, [r1, #1]!
   13f90:	cmp	r0, #0
   13f94:	beq	13f24 <__assert_fail@plt+0x2c7c>
   13f98:	ldr	r3, [sp, #32]
   13f9c:	cmp	r3, #0
   13fa0:	bne	14234 <__assert_fail@plt+0x2f8c>
   13fa4:	eor	r3, ip, #1
   13fa8:	cmp	sl, #2
   13fac:	movne	r3, #0
   13fb0:	andeq	r3, r3, #1
   13fb4:	cmp	r3, #0
   13fb8:	beq	13ff0 <__assert_fail@plt+0x2d48>
   13fbc:	cmp	r9, fp
   13fc0:	movhi	ip, #39	; 0x27
   13fc4:	strbhi	ip, [r8, fp]
   13fc8:	add	ip, fp, #1
   13fcc:	cmp	r9, ip
   13fd0:	movhi	r5, #36	; 0x24
   13fd4:	strbhi	r5, [r8, ip]
   13fd8:	add	ip, fp, #2
   13fdc:	cmp	r9, ip
   13fe0:	movhi	r5, #39	; 0x27
   13fe4:	strbhi	r5, [r8, ip]
   13fe8:	add	fp, fp, #3
   13fec:	mov	ip, r3
   13ff0:	cmp	r9, fp
   13ff4:	strbhi	r7, [r8, fp]
   13ff8:	add	r3, fp, #1
   13ffc:	cmp	r9, r3
   14000:	bls	14010 <__assert_fail@plt+0x2d68>
   14004:	lsr	r5, r4, #6
   14008:	add	r5, r5, #48	; 0x30
   1400c:	strb	r5, [r8, r3]
   14010:	add	r3, fp, #2
   14014:	cmp	r9, r3
   14018:	bls	14028 <__assert_fail@plt+0x2d80>
   1401c:	ubfx	r5, r4, #3, #3
   14020:	add	r5, r5, #48	; 0x30
   14024:	strb	r5, [r8, r3]
   14028:	add	fp, fp, #3
   1402c:	and	r4, r4, #7
   14030:	add	r4, r4, #48	; 0x30
   14034:	add	r5, r6, #1
   14038:	cmp	r5, lr
   1403c:	bcs	14058 <__assert_fail@plt+0x2db0>
   14040:	ldr	r3, [sp, #56]	; 0x38
   14044:	mov	r6, r5
   14048:	b	13f80 <__assert_fail@plt+0x2cd8>
   1404c:	str	ip, [sp, #36]	; 0x24
   14050:	ldr	r5, [sp, #84]	; 0x54
   14054:	b	13a84 <__assert_fail@plt+0x27dc>
   14058:	str	ip, [sp, #36]	; 0x24
   1405c:	ldr	r5, [sp, #84]	; 0x54
   14060:	mov	r3, r0
   14064:	b	13a84 <__assert_fail@plt+0x27dc>
   14068:	mov	r6, r5
   1406c:	b	13f80 <__assert_fail@plt+0x2cd8>
   14070:	ldr	r3, [sp, #44]	; 0x2c
   14074:	b	136d8 <__assert_fail@plt+0x2430>
   14078:	mov	r5, #0
   1407c:	mov	r3, r5
   14080:	mov	r4, #63	; 0x3f
   14084:	b	136d8 <__assert_fail@plt+0x2430>
   14088:	mov	r5, #0
   1408c:	mov	r3, r5
   14090:	mov	r4, #63	; 0x3f
   14094:	b	136d8 <__assert_fail@plt+0x2430>
   14098:	mov	r5, #0
   1409c:	mov	r3, r5
   140a0:	b	136d8 <__assert_fail@plt+0x2430>
   140a4:	mov	r5, #0
   140a8:	mov	r3, r5
   140ac:	b	136d8 <__assert_fail@plt+0x2430>
   140b0:	ldr	r5, [sp, #44]	; 0x2c
   140b4:	ldr	r3, [sp, #32]
   140b8:	b	136d8 <__assert_fail@plt+0x2430>
   140bc:	ldr	r5, [sp, #44]	; 0x2c
   140c0:	mov	r3, #0
   140c4:	str	r3, [sp, #44]	; 0x2c
   140c8:	b	136d8 <__assert_fail@plt+0x2430>
   140cc:	mov	r4, r3
   140d0:	mov	r5, #0
   140d4:	b	13730 <__assert_fail@plt+0x2488>
   140d8:	mov	r5, #0
   140dc:	mov	r4, #97	; 0x61
   140e0:	b	13730 <__assert_fail@plt+0x2488>
   140e4:	mov	r5, #0
   140e8:	mov	r3, r5
   140ec:	mov	r4, #92	; 0x5c
   140f0:	b	13a84 <__assert_fail@plt+0x27dc>
   140f4:	ldr	r3, [sp, #48]	; 0x30
   140f8:	ldrb	r5, [r3, r6]
   140fc:	adds	r5, r5, #0
   14100:	movne	r5, #1
   14104:	b	137d4 <__assert_fail@plt+0x252c>
   14108:	cmp	sl, #2
   1410c:	movne	r3, #0
   14110:	moveq	r3, #1
   14114:	ldr	r1, [sp, #32]
   14118:	cmp	fp, #0
   1411c:	andeq	r2, r3, r1
   14120:	movne	r2, #0
   14124:	cmp	r2, #0
   14128:	bne	14248 <__assert_fail@plt+0x2fa0>
   1412c:	eor	r2, r1, #1
   14130:	uxtb	r2, r2
   14134:	and	r3, r3, r2
   14138:	ldr	r1, [sp, #68]	; 0x44
   1413c:	ands	r3, r1, r3
   14140:	beq	141d4 <__assert_fail@plt+0x2f2c>
   14144:	ldr	r2, [sp, #40]	; 0x28
   14148:	cmp	r2, #0
   1414c:	bne	14184 <__assert_fail@plt+0x2edc>
   14150:	ldr	r2, [sp, #72]	; 0x48
   14154:	adds	r2, r2, #0
   14158:	movne	r2, #1
   1415c:	cmp	r9, #0
   14160:	movne	r2, #0
   14164:	str	r2, [sp, #68]	; 0x44
   14168:	mov	sl, #2
   1416c:	ldr	r1, [sp, #40]	; 0x28
   14170:	str	r1, [sp, #32]
   14174:	cmp	r2, #0
   14178:	beq	141c8 <__assert_fail@plt+0x2f20>
   1417c:	ldr	r9, [sp, #72]	; 0x48
   14180:	b	12edc <__assert_fail@plt+0x1c34>
   14184:	ldr	r3, [sp, #168]	; 0xa8
   14188:	str	r3, [sp, #16]
   1418c:	ldr	r3, [sp, #164]	; 0xa4
   14190:	str	r3, [sp, #12]
   14194:	ldr	r3, [sp, #160]	; 0xa0
   14198:	str	r3, [sp, #8]
   1419c:	ldr	r3, [sp, #156]	; 0x9c
   141a0:	str	r3, [sp, #4]
   141a4:	mov	r3, #5
   141a8:	str	r3, [sp]
   141ac:	ldr	r3, [sp, #24]
   141b0:	ldr	r2, [sp, #48]	; 0x30
   141b4:	ldr	r1, [sp, #72]	; 0x48
   141b8:	ldr	r0, [sp, #64]	; 0x40
   141bc:	bl	12e64 <__assert_fail@plt+0x1bbc>
   141c0:	mov	fp, r0
   141c4:	b	142e4 <__assert_fail@plt+0x303c>
   141c8:	mov	r8, r9
   141cc:	mov	r2, r3
   141d0:	b	141d8 <__assert_fail@plt+0x2f30>
   141d4:	mov	r8, r9
   141d8:	ldr	r3, [sp, #60]	; 0x3c
   141dc:	cmp	r3, #0
   141e0:	moveq	r2, #0
   141e4:	andne	r2, r2, #1
   141e8:	cmp	r2, #0
   141ec:	beq	1421c <__assert_fail@plt+0x2f74>
   141f0:	mov	r2, r3
   141f4:	ldrb	r3, [r3]
   141f8:	cmp	r3, #0
   141fc:	beq	1421c <__assert_fail@plt+0x2f74>
   14200:	ldr	r1, [sp, #64]	; 0x40
   14204:	cmp	r8, fp
   14208:	strbhi	r3, [r1, fp]
   1420c:	add	fp, fp, #1
   14210:	ldrb	r3, [r2, #1]!
   14214:	cmp	r3, #0
   14218:	bne	14204 <__assert_fail@plt+0x2f5c>
   1421c:	cmp	r8, fp
   14220:	bls	142e4 <__assert_fail@plt+0x303c>
   14224:	mov	r3, #0
   14228:	ldr	r2, [sp, #64]	; 0x40
   1422c:	strb	r3, [r2, fp]
   14230:	b	142e4 <__assert_fail@plt+0x303c>
   14234:	mov	r8, r9
   14238:	mov	r7, sl
   1423c:	ldr	r3, [sp, #32]
   14240:	str	r3, [sp, #28]
   14244:	b	1428c <__assert_fail@plt+0x2fe4>
   14248:	mov	r8, r9
   1424c:	mov	r7, #2
   14250:	b	1428c <__assert_fail@plt+0x2fe4>
   14254:	mov	r8, r9
   14258:	mov	r7, sl
   1425c:	b	1428c <__assert_fail@plt+0x2fe4>
   14260:	mov	r8, r9
   14264:	mov	r7, sl
   14268:	b	1428c <__assert_fail@plt+0x2fe4>
   1426c:	mov	r8, r9
   14270:	mov	r7, sl
   14274:	b	1428c <__assert_fail@plt+0x2fe4>
   14278:	mov	r8, r9
   1427c:	mov	r7, sl
   14280:	b	1428c <__assert_fail@plt+0x2fe4>
   14284:	mov	r8, r9
   14288:	mov	r7, sl
   1428c:	ldr	r3, [sp, #28]
   14290:	cmp	r7, #2
   14294:	movne	r3, #0
   14298:	andeq	r3, r3, #1
   1429c:	cmp	r3, #0
   142a0:	movne	r7, #4
   142a4:	ldr	r3, [sp, #168]	; 0xa8
   142a8:	str	r3, [sp, #16]
   142ac:	ldr	r3, [sp, #164]	; 0xa4
   142b0:	str	r3, [sp, #12]
   142b4:	mov	r3, #0
   142b8:	str	r3, [sp, #8]
   142bc:	ldr	r3, [sp, #156]	; 0x9c
   142c0:	bic	r3, r3, #2
   142c4:	str	r3, [sp, #4]
   142c8:	str	r7, [sp]
   142cc:	ldr	r3, [sp, #24]
   142d0:	ldr	r2, [sp, #48]	; 0x30
   142d4:	mov	r1, r8
   142d8:	ldr	r0, [sp, #64]	; 0x40
   142dc:	bl	12e64 <__assert_fail@plt+0x1bbc>
   142e0:	mov	fp, r0
   142e4:	mov	r0, fp
   142e8:	add	sp, sp, #116	; 0x74
   142ec:	ldrd	r4, [sp]
   142f0:	ldrd	r6, [sp, #8]
   142f4:	ldrd	r8, [sp, #16]
   142f8:	ldrd	sl, [sp, #24]
   142fc:	add	sp, sp, #32
   14300:	pop	{pc}		; (ldr pc, [sp], #4)
   14304:	mov	r8, r9
   14308:	mov	r7, sl
   1430c:	b	142a4 <__assert_fail@plt+0x2ffc>
   14310:	add	fp, fp, #4
   14314:	str	r3, [sp, #36]	; 0x24
   14318:	mov	r5, #0
   1431c:	mov	r4, #48	; 0x30
   14320:	b	136d8 <__assert_fail@plt+0x2430>
   14324:	mov	r3, #1
   14328:	str	r3, [sp, #32]
   1432c:	str	r3, [sp, #28]
   14330:	str	r3, [sp, #52]	; 0x34
   14334:	movw	r3, #20300	; 0x4f4c
   14338:	movt	r3, #2
   1433c:	str	r3, [sp, #60]	; 0x3c
   14340:	mov	fp, #0
   14344:	mov	sl, #5
   14348:	b	12f3c <__assert_fail@plt+0x1c94>
   1434c:	ldr	r3, [sp, #48]	; 0x30
   14350:	ldrb	r4, [r3, r6]
   14354:	cmp	r4, #126	; 0x7e
   14358:	ldrls	pc, [pc, r4, lsl #2]
   1435c:	b	13c48 <__assert_fail@plt+0x29a0>
   14360:	ldrdeq	r3, [r1], -r0
   14364:	andeq	r3, r1, r8, asr #24
   14368:	andeq	r3, r1, r8, asr #24
   1436c:	andeq	r3, r1, r8, asr #24
   14370:	andeq	r3, r1, r8, asr #24
   14374:	andeq	r3, r1, r8, asr #24
   14378:	andeq	r3, r1, r8, asr #24
   1437c:	ldrdeq	r4, [r1], -r8
   14380:	andeq	r3, r1, r4, ror r6
   14384:	andeq	r3, r1, r8, lsl sl
   14388:	ldrdeq	r3, [r1], -r4
   1438c:	andeq	r3, r1, ip, lsr #20
   14390:	andeq	r3, r1, r8, lsl #13
   14394:	muleq	r1, ip, r6
   14398:	andeq	r3, r1, r8, asr #24
   1439c:	andeq	r3, r1, r8, asr #24
   143a0:	andeq	r3, r1, r8, asr #24
   143a4:	andeq	r3, r1, r8, asr #24
   143a8:	andeq	r3, r1, r8, asr #24
   143ac:	andeq	r3, r1, r8, asr #24
   143b0:	andeq	r3, r1, r8, asr #24
   143b4:	andeq	r3, r1, r8, asr #24
   143b8:	andeq	r3, r1, r8, asr #24
   143bc:	andeq	r3, r1, r8, asr #24
   143c0:	andeq	r3, r1, r8, asr #24
   143c4:	andeq	r3, r1, r8, asr #24
   143c8:	andeq	r3, r1, r8, asr #24
   143cc:	andeq	r3, r1, r8, asr #24
   143d0:	andeq	r3, r1, r8, asr #24
   143d4:	andeq	r3, r1, r8, asr #24
   143d8:	andeq	r3, r1, r8, asr #24
   143dc:	andeq	r3, r1, r8, asr #24
   143e0:	andeq	r3, r1, ip, asr fp
   143e4:	muleq	r1, r8, fp
   143e8:	muleq	r1, r8, fp
   143ec:	andeq	r3, r1, r0, asr fp
   143f0:	muleq	r1, r8, fp
   143f4:	strheq	r4, [r1], -ip
   143f8:	muleq	r1, r8, fp
   143fc:	andeq	r3, r1, r8, lsr #23
   14400:	muleq	r1, r8, fp
   14404:	muleq	r1, r8, fp
   14408:	muleq	r1, r8, fp
   1440c:	strheq	r4, [r1], -ip
   14410:	strheq	r4, [r1], -ip
   14414:	strheq	r4, [r1], -ip
   14418:	strheq	r4, [r1], -ip
   1441c:	strheq	r4, [r1], -ip
   14420:	strheq	r4, [r1], -ip
   14424:	strheq	r4, [r1], -ip
   14428:	strheq	r4, [r1], -ip
   1442c:	strheq	r4, [r1], -ip
   14430:	strheq	r4, [r1], -ip
   14434:	strheq	r4, [r1], -ip
   14438:	strheq	r4, [r1], -ip
   1443c:	strheq	r4, [r1], -ip
   14440:	strheq	r4, [r1], -ip
   14444:	strheq	r4, [r1], -ip
   14448:	strheq	r4, [r1], -ip
   1444c:	muleq	r1, r8, fp
   14450:	muleq	r1, r8, fp
   14454:	muleq	r1, r8, fp
   14458:	muleq	r1, r8, fp
   1445c:	andeq	r3, r1, r8, lsl #10
   14460:	andeq	r3, r1, r8, asr #24
   14464:	strheq	r4, [r1], -ip
   14468:	strheq	r4, [r1], -ip
   1446c:	strheq	r4, [r1], -ip
   14470:	strheq	r4, [r1], -ip
   14474:	strheq	r4, [r1], -ip
   14478:	strheq	r4, [r1], -ip
   1447c:	strheq	r4, [r1], -ip
   14480:	strheq	r4, [r1], -ip
   14484:	strheq	r4, [r1], -ip
   14488:	strheq	r4, [r1], -ip
   1448c:	strheq	r4, [r1], -ip
   14490:	strheq	r4, [r1], -ip
   14494:	strheq	r4, [r1], -ip
   14498:	strheq	r4, [r1], -ip
   1449c:	strheq	r4, [r1], -ip
   144a0:	strheq	r4, [r1], -ip
   144a4:	strheq	r4, [r1], -ip
   144a8:	strheq	r4, [r1], -ip
   144ac:	strheq	r4, [r1], -ip
   144b0:	strheq	r4, [r1], -ip
   144b4:	strheq	r4, [r1], -ip
   144b8:	strheq	r4, [r1], -ip
   144bc:	strheq	r4, [r1], -ip
   144c0:	strheq	r4, [r1], -ip
   144c4:	strheq	r4, [r1], -ip
   144c8:	strheq	r4, [r1], -ip
   144cc:	muleq	r1, r8, fp
   144d0:	andeq	r3, r1, r0, asr #20
   144d4:	strheq	r4, [r1], -ip
   144d8:	muleq	r1, r8, fp
   144dc:	strheq	r4, [r1], -ip
   144e0:	muleq	r1, r8, fp
   144e4:	strheq	r4, [r1], -ip
   144e8:	strheq	r4, [r1], -ip
   144ec:	strheq	r4, [r1], -ip
   144f0:	strheq	r4, [r1], -ip
   144f4:	strheq	r4, [r1], -ip
   144f8:	strheq	r4, [r1], -ip
   144fc:	strheq	r4, [r1], -ip
   14500:	strheq	r4, [r1], -ip
   14504:	strheq	r4, [r1], -ip
   14508:	strheq	r4, [r1], -ip
   1450c:	strheq	r4, [r1], -ip
   14510:	strheq	r4, [r1], -ip
   14514:	strheq	r4, [r1], -ip
   14518:	strheq	r4, [r1], -ip
   1451c:	strheq	r4, [r1], -ip
   14520:	strheq	r4, [r1], -ip
   14524:	strheq	r4, [r1], -ip
   14528:	strheq	r4, [r1], -ip
   1452c:	strheq	r4, [r1], -ip
   14530:	strheq	r4, [r1], -ip
   14534:	strheq	r4, [r1], -ip
   14538:	strheq	r4, [r1], -ip
   1453c:	strheq	r4, [r1], -ip
   14540:	strheq	r4, [r1], -ip
   14544:	strheq	r4, [r1], -ip
   14548:	strheq	r4, [r1], -ip
   1454c:	andeq	r3, r1, r0, lsl #22
   14550:	muleq	r1, r8, fp
   14554:	andeq	r3, r1, r0, lsl #22
   14558:	andeq	r3, r1, r0, asr fp
   1455c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14560:	strd	r6, [sp, #8]
   14564:	strd	r8, [sp, #16]
   14568:	strd	sl, [sp, #24]
   1456c:	str	lr, [sp, #32]
   14570:	sub	sp, sp, #52	; 0x34
   14574:	mov	r5, r0
   14578:	str	r1, [sp, #24]
   1457c:	str	r2, [sp, #28]
   14580:	mov	r4, r3
   14584:	bl	111a0 <__errno_location@plt>
   14588:	str	r0, [sp, #32]
   1458c:	ldr	r3, [r0]
   14590:	str	r3, [sp, #36]	; 0x24
   14594:	movw	r3, #24952	; 0x6178
   14598:	movt	r3, #3
   1459c:	ldr	r6, [r3]
   145a0:	cmn	r5, #-2147483647	; 0x80000001
   145a4:	movne	r3, #0
   145a8:	moveq	r3, #1
   145ac:	orrs	r3, r3, r5, lsr #31
   145b0:	bne	14714 <__assert_fail@plt+0x346c>
   145b4:	movw	r3, #24952	; 0x6178
   145b8:	movt	r3, #3
   145bc:	ldr	r2, [r3, #4]
   145c0:	cmp	r2, r5
   145c4:	bgt	14634 <__assert_fail@plt+0x338c>
   145c8:	str	r2, [sp, #44]	; 0x2c
   145cc:	add	r3, r3, #8
   145d0:	cmp	r6, r3
   145d4:	beq	14718 <__assert_fail@plt+0x3470>
   145d8:	sub	r2, r5, r2
   145dc:	mov	r3, #8
   145e0:	str	r3, [sp]
   145e4:	mvn	r3, #-2147483648	; 0x80000000
   145e8:	add	r2, r2, #1
   145ec:	add	r1, sp, #44	; 0x2c
   145f0:	mov	r0, r6
   145f4:	bl	23130 <__assert_fail@plt+0x11e88>
   145f8:	mov	r6, r0
   145fc:	movw	r3, #24952	; 0x6178
   14600:	movt	r3, #3
   14604:	str	r0, [r3]
   14608:	movw	r7, #24952	; 0x6178
   1460c:	movt	r7, #3
   14610:	ldr	r0, [r7, #4]
   14614:	ldr	r2, [sp, #44]	; 0x2c
   14618:	sub	r2, r2, r0
   1461c:	lsl	r2, r2, #3
   14620:	mov	r1, #0
   14624:	add	r0, r6, r0, lsl #3
   14628:	bl	111c4 <memset@plt>
   1462c:	ldr	r3, [sp, #44]	; 0x2c
   14630:	str	r3, [r7, #4]
   14634:	add	fp, r6, r5, lsl #3
   14638:	ldr	r8, [r6, r5, lsl #3]
   1463c:	ldr	r7, [fp, #4]
   14640:	ldr	r3, [r4, #4]
   14644:	orr	r9, r3, #1
   14648:	add	sl, r4, #8
   1464c:	ldr	r3, [r4, #44]	; 0x2c
   14650:	str	r3, [sp, #16]
   14654:	ldr	r3, [r4, #40]	; 0x28
   14658:	str	r3, [sp, #12]
   1465c:	str	sl, [sp, #8]
   14660:	str	r9, [sp, #4]
   14664:	ldr	r3, [r4]
   14668:	str	r3, [sp]
   1466c:	ldr	r3, [sp, #28]
   14670:	ldr	r2, [sp, #24]
   14674:	mov	r1, r8
   14678:	mov	r0, r7
   1467c:	bl	12e64 <__assert_fail@plt+0x1bbc>
   14680:	cmp	r8, r0
   14684:	bhi	146e8 <__assert_fail@plt+0x3440>
   14688:	add	r8, r0, #1
   1468c:	str	r8, [r6, r5, lsl #3]
   14690:	movw	r3, #26000	; 0x6590
   14694:	movt	r3, #3
   14698:	cmp	r7, r3
   1469c:	beq	146a8 <__assert_fail@plt+0x3400>
   146a0:	mov	r0, r7
   146a4:	bl	23f40 <__assert_fail@plt+0x12c98>
   146a8:	mov	r0, r8
   146ac:	bl	22f2c <__assert_fail@plt+0x11c84>
   146b0:	mov	r7, r0
   146b4:	str	r0, [fp, #4]
   146b8:	ldr	r3, [r4, #44]	; 0x2c
   146bc:	str	r3, [sp, #16]
   146c0:	ldr	r3, [r4, #40]	; 0x28
   146c4:	str	r3, [sp, #12]
   146c8:	str	sl, [sp, #8]
   146cc:	str	r9, [sp, #4]
   146d0:	ldr	r3, [r4]
   146d4:	str	r3, [sp]
   146d8:	ldr	r3, [sp, #28]
   146dc:	ldr	r2, [sp, #24]
   146e0:	mov	r1, r8
   146e4:	bl	12e64 <__assert_fail@plt+0x1bbc>
   146e8:	ldr	r3, [sp, #32]
   146ec:	ldr	r2, [sp, #36]	; 0x24
   146f0:	str	r2, [r3]
   146f4:	mov	r0, r7
   146f8:	add	sp, sp, #52	; 0x34
   146fc:	ldrd	r4, [sp]
   14700:	ldrd	r6, [sp, #8]
   14704:	ldrd	r8, [sp, #16]
   14708:	ldrd	sl, [sp, #24]
   1470c:	add	sp, sp, #32
   14710:	pop	{pc}		; (ldr pc, [sp], #4)
   14714:	bl	1129c <abort@plt>
   14718:	sub	r2, r5, r2
   1471c:	mov	r3, #8
   14720:	str	r3, [sp]
   14724:	mvn	r3, #-2147483648	; 0x80000000
   14728:	add	r2, r2, #1
   1472c:	add	r1, sp, #44	; 0x2c
   14730:	mov	r0, #0
   14734:	bl	23130 <__assert_fail@plt+0x11e88>
   14738:	mov	r6, r0
   1473c:	movw	r3, #24952	; 0x6178
   14740:	movt	r3, #3
   14744:	str	r0, [r3]
   14748:	ldrd	r2, [r3, #8]
   1474c:	strd	r2, [r0]
   14750:	b	14608 <__assert_fail@plt+0x3360>
   14754:	strd	r4, [sp, #-16]!
   14758:	str	r6, [sp, #8]
   1475c:	str	lr, [sp, #12]
   14760:	mov	r4, r0
   14764:	bl	111a0 <__errno_location@plt>
   14768:	mov	r5, r0
   1476c:	ldr	r6, [r0]
   14770:	cmp	r4, #0
   14774:	ldr	r3, [pc, #32]	; 1479c <__assert_fail@plt+0x34f4>
   14778:	moveq	r4, r3
   1477c:	mov	r1, #48	; 0x30
   14780:	mov	r0, r4
   14784:	bl	232a0 <__assert_fail@plt+0x11ff8>
   14788:	str	r6, [r5]
   1478c:	ldrd	r4, [sp]
   14790:	ldr	r6, [sp, #8]
   14794:	add	sp, sp, #12
   14798:	pop	{pc}		; (ldr pc, [sp], #4)
   1479c:	muleq	r3, r0, r6
   147a0:	subs	r3, r0, #0
   147a4:	ldr	r2, [pc, #8]	; 147b4 <__assert_fail@plt+0x350c>
   147a8:	moveq	r3, r2
   147ac:	ldr	r0, [r3]
   147b0:	bx	lr
   147b4:	muleq	r3, r0, r6
   147b8:	subs	r3, r0, #0
   147bc:	ldr	r2, [pc, #8]	; 147cc <__assert_fail@plt+0x3524>
   147c0:	moveq	r3, r2
   147c4:	str	r1, [r3]
   147c8:	bx	lr
   147cc:	muleq	r3, r0, r6
   147d0:	push	{lr}		; (str lr, [sp, #-4]!)
   147d4:	subs	r3, r0, #0
   147d8:	ldr	r0, [pc, #44]	; 1480c <__assert_fail@plt+0x3564>
   147dc:	moveq	r3, r0
   147e0:	add	r3, r3, #8
   147e4:	lsr	lr, r1, #5
   147e8:	and	r1, r1, #31
   147ec:	ldr	ip, [r3, lr, lsl #2]
   147f0:	lsr	r0, ip, r1
   147f4:	eor	r2, r2, r0
   147f8:	and	r2, r2, #1
   147fc:	eor	r1, ip, r2, lsl r1
   14800:	str	r1, [r3, lr, lsl #2]
   14804:	and	r0, r0, #1
   14808:	pop	{pc}		; (ldr pc, [sp], #4)
   1480c:	muleq	r3, r0, r6
   14810:	subs	r3, r0, #0
   14814:	ldr	r2, [pc, #12]	; 14828 <__assert_fail@plt+0x3580>
   14818:	moveq	r3, r2
   1481c:	ldr	r0, [r3, #4]
   14820:	str	r1, [r3, #4]
   14824:	bx	lr
   14828:	muleq	r3, r0, r6
   1482c:	subs	r3, r0, #0
   14830:	ldr	r0, [pc, #44]	; 14864 <__assert_fail@plt+0x35bc>
   14834:	moveq	r3, r0
   14838:	mov	r0, #10
   1483c:	str	r0, [r3]
   14840:	cmp	r2, #0
   14844:	cmpne	r1, #0
   14848:	beq	14858 <__assert_fail@plt+0x35b0>
   1484c:	str	r1, [r3, #40]	; 0x28
   14850:	str	r2, [r3, #44]	; 0x2c
   14854:	bx	lr
   14858:	str	r4, [sp, #-8]!
   1485c:	str	lr, [sp, #4]
   14860:	bl	1129c <abort@plt>
   14864:	muleq	r3, r0, r6
   14868:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1486c:	strd	r6, [sp, #8]
   14870:	strd	r8, [sp, #16]
   14874:	str	sl, [sp, #24]
   14878:	str	lr, [sp, #28]
   1487c:	sub	sp, sp, #24
   14880:	mov	r7, r0
   14884:	mov	r8, r1
   14888:	mov	r9, r2
   1488c:	mov	sl, r3
   14890:	ldr	r4, [sp, #56]	; 0x38
   14894:	cmp	r4, #0
   14898:	ldr	r3, [pc, #104]	; 14908 <__assert_fail@plt+0x3660>
   1489c:	moveq	r4, r3
   148a0:	bl	111a0 <__errno_location@plt>
   148a4:	mov	r5, r0
   148a8:	ldr	r6, [r0]
   148ac:	ldr	r3, [r4, #44]	; 0x2c
   148b0:	str	r3, [sp, #16]
   148b4:	ldr	r3, [r4, #40]	; 0x28
   148b8:	str	r3, [sp, #12]
   148bc:	add	r3, r4, #8
   148c0:	str	r3, [sp, #8]
   148c4:	ldr	r3, [r4, #4]
   148c8:	str	r3, [sp, #4]
   148cc:	ldr	r3, [r4]
   148d0:	str	r3, [sp]
   148d4:	mov	r3, sl
   148d8:	mov	r2, r9
   148dc:	mov	r1, r8
   148e0:	mov	r0, r7
   148e4:	bl	12e64 <__assert_fail@plt+0x1bbc>
   148e8:	str	r6, [r5]
   148ec:	add	sp, sp, #24
   148f0:	ldrd	r4, [sp]
   148f4:	ldrd	r6, [sp, #8]
   148f8:	ldrd	r8, [sp, #16]
   148fc:	ldr	sl, [sp, #24]
   14900:	add	sp, sp, #28
   14904:	pop	{pc}		; (ldr pc, [sp], #4)
   14908:	muleq	r3, r0, r6
   1490c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14910:	strd	r6, [sp, #8]
   14914:	strd	r8, [sp, #16]
   14918:	strd	sl, [sp, #24]
   1491c:	str	lr, [sp, #32]
   14920:	sub	sp, sp, #44	; 0x2c
   14924:	mov	r8, r0
   14928:	mov	sl, r1
   1492c:	mov	r6, r2
   14930:	subs	r4, r3, #0
   14934:	ldr	r3, [pc, #200]	; 14a04 <__assert_fail@plt+0x375c>
   14938:	moveq	r4, r3
   1493c:	bl	111a0 <__errno_location@plt>
   14940:	mov	r7, r0
   14944:	ldr	fp, [r0]
   14948:	ldr	r5, [r4, #4]
   1494c:	cmp	r6, #0
   14950:	orreq	r5, r5, #1
   14954:	add	r9, r4, #8
   14958:	ldr	r3, [r4, #44]	; 0x2c
   1495c:	str	r3, [sp, #16]
   14960:	ldr	r3, [r4, #40]	; 0x28
   14964:	str	r3, [sp, #12]
   14968:	str	r9, [sp, #8]
   1496c:	str	r5, [sp, #4]
   14970:	ldr	r3, [r4]
   14974:	str	r3, [sp]
   14978:	str	sl, [sp, #36]	; 0x24
   1497c:	mov	r3, sl
   14980:	str	r8, [sp, #32]
   14984:	mov	r2, r8
   14988:	mov	r1, #0
   1498c:	mov	r0, r1
   14990:	bl	12e64 <__assert_fail@plt+0x1bbc>
   14994:	mov	sl, r0
   14998:	add	r8, r0, #1
   1499c:	mov	r0, r8
   149a0:	bl	22f2c <__assert_fail@plt+0x11c84>
   149a4:	str	r0, [sp, #28]
   149a8:	ldr	r3, [r4, #44]	; 0x2c
   149ac:	str	r3, [sp, #16]
   149b0:	ldr	r3, [r4, #40]	; 0x28
   149b4:	str	r3, [sp, #12]
   149b8:	str	r9, [sp, #8]
   149bc:	str	r5, [sp, #4]
   149c0:	ldr	r3, [r4]
   149c4:	str	r3, [sp]
   149c8:	ldr	r3, [sp, #36]	; 0x24
   149cc:	ldr	r2, [sp, #32]
   149d0:	mov	r1, r8
   149d4:	bl	12e64 <__assert_fail@plt+0x1bbc>
   149d8:	str	fp, [r7]
   149dc:	cmp	r6, #0
   149e0:	strne	sl, [r6]
   149e4:	ldr	r0, [sp, #28]
   149e8:	add	sp, sp, #44	; 0x2c
   149ec:	ldrd	r4, [sp]
   149f0:	ldrd	r6, [sp, #8]
   149f4:	ldrd	r8, [sp, #16]
   149f8:	ldrd	sl, [sp, #24]
   149fc:	add	sp, sp, #32
   14a00:	pop	{pc}		; (ldr pc, [sp], #4)
   14a04:	muleq	r3, r0, r6
   14a08:	str	r4, [sp, #-8]!
   14a0c:	str	lr, [sp, #4]
   14a10:	mov	r3, r2
   14a14:	mov	r2, #0
   14a18:	bl	1490c <__assert_fail@plt+0x3664>
   14a1c:	ldr	r4, [sp]
   14a20:	add	sp, sp, #4
   14a24:	pop	{pc}		; (ldr pc, [sp], #4)
   14a28:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14a2c:	strd	r6, [sp, #8]
   14a30:	str	r8, [sp, #16]
   14a34:	str	lr, [sp, #20]
   14a38:	movw	r3, #24952	; 0x6178
   14a3c:	movt	r3, #3
   14a40:	ldr	r7, [r3]
   14a44:	ldr	r3, [r3, #4]
   14a48:	cmp	r3, #1
   14a4c:	ble	14a78 <__assert_fail@plt+0x37d0>
   14a50:	mov	r4, #1
   14a54:	add	r6, r7, #4
   14a58:	movw	r5, #24952	; 0x6178
   14a5c:	movt	r5, #3
   14a60:	ldr	r0, [r6, r4, lsl #3]
   14a64:	bl	23f40 <__assert_fail@plt+0x12c98>
   14a68:	add	r4, r4, #1
   14a6c:	ldr	r3, [r5, #4]
   14a70:	cmp	r3, r4
   14a74:	bgt	14a60 <__assert_fail@plt+0x37b8>
   14a78:	ldr	r0, [r7, #4]
   14a7c:	movw	r3, #26000	; 0x6590
   14a80:	movt	r3, #3
   14a84:	cmp	r0, r3
   14a88:	beq	14aac <__assert_fail@plt+0x3804>
   14a8c:	bl	23f40 <__assert_fail@plt+0x12c98>
   14a90:	movw	r3, #24952	; 0x6178
   14a94:	movt	r3, #3
   14a98:	mov	r2, #256	; 0x100
   14a9c:	str	r2, [r3, #8]
   14aa0:	movw	r2, #26000	; 0x6590
   14aa4:	movt	r2, #3
   14aa8:	str	r2, [r3, #12]
   14aac:	ldr	r3, [pc, #64]	; 14af4 <__assert_fail@plt+0x384c>
   14ab0:	cmp	r7, r3
   14ab4:	beq	14ad0 <__assert_fail@plt+0x3828>
   14ab8:	mov	r0, r7
   14abc:	bl	23f40 <__assert_fail@plt+0x12c98>
   14ac0:	movw	r3, #24952	; 0x6178
   14ac4:	movt	r3, #3
   14ac8:	add	r2, r3, #8
   14acc:	str	r2, [r3]
   14ad0:	movw	r3, #24952	; 0x6178
   14ad4:	movt	r3, #3
   14ad8:	mov	r2, #1
   14adc:	str	r2, [r3, #4]
   14ae0:	ldrd	r4, [sp]
   14ae4:	ldrd	r6, [sp, #8]
   14ae8:	ldr	r8, [sp, #16]
   14aec:	add	sp, sp, #20
   14af0:	pop	{pc}		; (ldr pc, [sp], #4)
   14af4:	andeq	r6, r3, r0, lsl #3
   14af8:	str	r4, [sp, #-8]!
   14afc:	str	lr, [sp, #4]
   14b00:	ldr	r3, [pc, #16]	; 14b18 <__assert_fail@plt+0x3870>
   14b04:	mvn	r2, #0
   14b08:	bl	1455c <__assert_fail@plt+0x32b4>
   14b0c:	ldr	r4, [sp]
   14b10:	add	sp, sp, #4
   14b14:	pop	{pc}		; (ldr pc, [sp], #4)
   14b18:	muleq	r3, r0, r6
   14b1c:	str	r4, [sp, #-8]!
   14b20:	str	lr, [sp, #4]
   14b24:	ldr	r3, [pc, #12]	; 14b38 <__assert_fail@plt+0x3890>
   14b28:	bl	1455c <__assert_fail@plt+0x32b4>
   14b2c:	ldr	r4, [sp]
   14b30:	add	sp, sp, #4
   14b34:	pop	{pc}		; (ldr pc, [sp], #4)
   14b38:	muleq	r3, r0, r6
   14b3c:	str	r4, [sp, #-8]!
   14b40:	str	lr, [sp, #4]
   14b44:	mov	r1, r0
   14b48:	mov	r0, #0
   14b4c:	bl	14af8 <__assert_fail@plt+0x3850>
   14b50:	ldr	r4, [sp]
   14b54:	add	sp, sp, #4
   14b58:	pop	{pc}		; (ldr pc, [sp], #4)
   14b5c:	str	r4, [sp, #-8]!
   14b60:	str	lr, [sp, #4]
   14b64:	mov	r2, r1
   14b68:	mov	r1, r0
   14b6c:	mov	r0, #0
   14b70:	bl	14b1c <__assert_fail@plt+0x3874>
   14b74:	ldr	r4, [sp]
   14b78:	add	sp, sp, #4
   14b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b80:	strd	r4, [sp, #-12]!
   14b84:	str	lr, [sp, #8]
   14b88:	sub	sp, sp, #52	; 0x34
   14b8c:	mov	r4, r0
   14b90:	mov	r5, r2
   14b94:	mov	r0, sp
   14b98:	bl	12cd0 <__assert_fail@plt+0x1a28>
   14b9c:	mov	r3, sp
   14ba0:	mvn	r2, #0
   14ba4:	mov	r1, r5
   14ba8:	mov	r0, r4
   14bac:	bl	1455c <__assert_fail@plt+0x32b4>
   14bb0:	add	sp, sp, #52	; 0x34
   14bb4:	ldrd	r4, [sp]
   14bb8:	add	sp, sp, #8
   14bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   14bc0:	strd	r4, [sp, #-16]!
   14bc4:	str	r6, [sp, #8]
   14bc8:	str	lr, [sp, #12]
   14bcc:	sub	sp, sp, #48	; 0x30
   14bd0:	mov	r4, r0
   14bd4:	mov	r5, r2
   14bd8:	mov	r6, r3
   14bdc:	mov	r0, sp
   14be0:	bl	12cd0 <__assert_fail@plt+0x1a28>
   14be4:	mov	r3, sp
   14be8:	mov	r2, r6
   14bec:	mov	r1, r5
   14bf0:	mov	r0, r4
   14bf4:	bl	1455c <__assert_fail@plt+0x32b4>
   14bf8:	add	sp, sp, #48	; 0x30
   14bfc:	ldrd	r4, [sp]
   14c00:	ldr	r6, [sp, #8]
   14c04:	add	sp, sp, #12
   14c08:	pop	{pc}		; (ldr pc, [sp], #4)
   14c0c:	str	r4, [sp, #-8]!
   14c10:	str	lr, [sp, #4]
   14c14:	mov	r2, r1
   14c18:	mov	r1, r0
   14c1c:	mov	r0, #0
   14c20:	bl	14b80 <__assert_fail@plt+0x38d8>
   14c24:	ldr	r4, [sp]
   14c28:	add	sp, sp, #4
   14c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c30:	str	r4, [sp, #-8]!
   14c34:	str	lr, [sp, #4]
   14c38:	mov	r3, r2
   14c3c:	mov	r2, r1
   14c40:	mov	r1, r0
   14c44:	mov	r0, #0
   14c48:	bl	14bc0 <__assert_fail@plt+0x3918>
   14c4c:	ldr	r4, [sp]
   14c50:	add	sp, sp, #4
   14c54:	pop	{pc}		; (ldr pc, [sp], #4)
   14c58:	strd	r4, [sp, #-12]!
   14c5c:	str	lr, [sp, #8]
   14c60:	sub	sp, sp, #52	; 0x34
   14c64:	mov	r4, r0
   14c68:	mov	r5, r1
   14c6c:	mov	r1, r2
   14c70:	ldr	r0, [pc, #92]	; 14cd4 <__assert_fail@plt+0x3a2c>
   14c74:	ldrd	r2, [r0]
   14c78:	strd	r2, [sp]
   14c7c:	ldrd	r2, [r0, #8]
   14c80:	strd	r2, [sp, #8]
   14c84:	ldrd	r2, [r0, #16]
   14c88:	strd	r2, [sp, #16]
   14c8c:	ldrd	r2, [r0, #24]
   14c90:	strd	r2, [sp, #24]
   14c94:	ldrd	r2, [r0, #32]
   14c98:	strd	r2, [sp, #32]
   14c9c:	ldrd	r2, [r0, #40]	; 0x28
   14ca0:	strd	r2, [sp, #40]	; 0x28
   14ca4:	mov	r2, #1
   14ca8:	mov	r0, sp
   14cac:	bl	147d0 <__assert_fail@plt+0x3528>
   14cb0:	mov	r3, sp
   14cb4:	mov	r2, r5
   14cb8:	mov	r1, r4
   14cbc:	mov	r0, #0
   14cc0:	bl	1455c <__assert_fail@plt+0x32b4>
   14cc4:	add	sp, sp, #52	; 0x34
   14cc8:	ldrd	r4, [sp]
   14ccc:	add	sp, sp, #8
   14cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   14cd4:	muleq	r3, r0, r6
   14cd8:	str	r4, [sp, #-8]!
   14cdc:	str	lr, [sp, #4]
   14ce0:	mov	r2, r1
   14ce4:	mvn	r1, #0
   14ce8:	bl	14c58 <__assert_fail@plt+0x39b0>
   14cec:	ldr	r4, [sp]
   14cf0:	add	sp, sp, #4
   14cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   14cf8:	str	r4, [sp, #-8]!
   14cfc:	str	lr, [sp, #4]
   14d00:	mov	r1, #58	; 0x3a
   14d04:	bl	14cd8 <__assert_fail@plt+0x3a30>
   14d08:	ldr	r4, [sp]
   14d0c:	add	sp, sp, #4
   14d10:	pop	{pc}		; (ldr pc, [sp], #4)
   14d14:	str	r4, [sp, #-8]!
   14d18:	str	lr, [sp, #4]
   14d1c:	mov	r2, #58	; 0x3a
   14d20:	bl	14c58 <__assert_fail@plt+0x39b0>
   14d24:	ldr	r4, [sp]
   14d28:	add	sp, sp, #4
   14d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d30:	strd	r4, [sp, #-12]!
   14d34:	str	lr, [sp, #8]
   14d38:	sub	sp, sp, #100	; 0x64
   14d3c:	mov	r4, r0
   14d40:	mov	r5, r2
   14d44:	mov	r0, sp
   14d48:	bl	12cd0 <__assert_fail@plt+0x1a28>
   14d4c:	ldrd	r2, [sp]
   14d50:	strd	r2, [sp, #48]	; 0x30
   14d54:	ldrd	r2, [sp, #8]
   14d58:	strd	r2, [sp, #56]	; 0x38
   14d5c:	ldrd	r2, [sp, #16]
   14d60:	strd	r2, [sp, #64]	; 0x40
   14d64:	ldrd	r2, [sp, #24]
   14d68:	strd	r2, [sp, #72]	; 0x48
   14d6c:	ldrd	r2, [sp, #32]
   14d70:	strd	r2, [sp, #80]	; 0x50
   14d74:	ldrd	r2, [sp, #40]	; 0x28
   14d78:	strd	r2, [sp, #88]	; 0x58
   14d7c:	mov	r2, #1
   14d80:	mov	r1, #58	; 0x3a
   14d84:	add	r0, sp, #48	; 0x30
   14d88:	bl	147d0 <__assert_fail@plt+0x3528>
   14d8c:	add	r3, sp, #48	; 0x30
   14d90:	mvn	r2, #0
   14d94:	mov	r1, r5
   14d98:	mov	r0, r4
   14d9c:	bl	1455c <__assert_fail@plt+0x32b4>
   14da0:	add	sp, sp, #100	; 0x64
   14da4:	ldrd	r4, [sp]
   14da8:	add	sp, sp, #8
   14dac:	pop	{pc}		; (ldr pc, [sp], #4)
   14db0:	strd	r4, [sp, #-20]!	; 0xffffffec
   14db4:	strd	r6, [sp, #8]
   14db8:	str	lr, [sp, #16]
   14dbc:	sub	sp, sp, #52	; 0x34
   14dc0:	mov	r4, r0
   14dc4:	mov	r5, r3
   14dc8:	ldr	r3, [pc, #92]	; 14e2c <__assert_fail@plt+0x3b84>
   14dcc:	ldrd	r6, [r3]
   14dd0:	strd	r6, [sp]
   14dd4:	ldrd	r6, [r3, #8]
   14dd8:	strd	r6, [sp, #8]
   14ddc:	ldrd	r6, [r3, #16]
   14de0:	strd	r6, [sp, #16]
   14de4:	ldrd	r6, [r3, #24]
   14de8:	strd	r6, [sp, #24]
   14dec:	ldrd	r6, [r3, #32]
   14df0:	strd	r6, [sp, #32]
   14df4:	ldrd	r6, [r3, #40]	; 0x28
   14df8:	strd	r6, [sp, #40]	; 0x28
   14dfc:	mov	r0, sp
   14e00:	bl	1482c <__assert_fail@plt+0x3584>
   14e04:	mov	r3, sp
   14e08:	ldr	r2, [sp, #72]	; 0x48
   14e0c:	mov	r1, r5
   14e10:	mov	r0, r4
   14e14:	bl	1455c <__assert_fail@plt+0x32b4>
   14e18:	add	sp, sp, #52	; 0x34
   14e1c:	ldrd	r4, [sp]
   14e20:	ldrd	r6, [sp, #8]
   14e24:	add	sp, sp, #16
   14e28:	pop	{pc}		; (ldr pc, [sp], #4)
   14e2c:	muleq	r3, r0, r6
   14e30:	push	{lr}		; (str lr, [sp, #-4]!)
   14e34:	sub	sp, sp, #12
   14e38:	mvn	ip, #0
   14e3c:	str	ip, [sp]
   14e40:	bl	14db0 <__assert_fail@plt+0x3b08>
   14e44:	add	sp, sp, #12
   14e48:	pop	{pc}		; (ldr pc, [sp], #4)
   14e4c:	str	r4, [sp, #-8]!
   14e50:	str	lr, [sp, #4]
   14e54:	mov	r3, r2
   14e58:	mov	r2, r1
   14e5c:	mov	r1, r0
   14e60:	mov	r0, #0
   14e64:	bl	14e30 <__assert_fail@plt+0x3b88>
   14e68:	ldr	r4, [sp]
   14e6c:	add	sp, sp, #4
   14e70:	pop	{pc}		; (ldr pc, [sp], #4)
   14e74:	push	{lr}		; (str lr, [sp, #-4]!)
   14e78:	sub	sp, sp, #12
   14e7c:	str	r3, [sp]
   14e80:	mov	r3, r2
   14e84:	mov	r2, r1
   14e88:	mov	r1, r0
   14e8c:	mov	r0, #0
   14e90:	bl	14db0 <__assert_fail@plt+0x3b08>
   14e94:	add	sp, sp, #12
   14e98:	pop	{pc}		; (ldr pc, [sp], #4)
   14e9c:	str	r4, [sp, #-8]!
   14ea0:	str	lr, [sp, #4]
   14ea4:	ldr	r3, [pc, #12]	; 14eb8 <__assert_fail@plt+0x3c10>
   14ea8:	bl	1455c <__assert_fail@plt+0x32b4>
   14eac:	ldr	r4, [sp]
   14eb0:	add	sp, sp, #4
   14eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   14eb8:	andeq	r6, r3, r8, lsl #3
   14ebc:	str	r4, [sp, #-8]!
   14ec0:	str	lr, [sp, #4]
   14ec4:	mov	r2, r1
   14ec8:	mov	r1, r0
   14ecc:	mov	r0, #0
   14ed0:	bl	14e9c <__assert_fail@plt+0x3bf4>
   14ed4:	ldr	r4, [sp]
   14ed8:	add	sp, sp, #4
   14edc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ee0:	str	r4, [sp, #-8]!
   14ee4:	str	lr, [sp, #4]
   14ee8:	mvn	r2, #0
   14eec:	bl	14e9c <__assert_fail@plt+0x3bf4>
   14ef0:	ldr	r4, [sp]
   14ef4:	add	sp, sp, #4
   14ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   14efc:	str	r4, [sp, #-8]!
   14f00:	str	lr, [sp, #4]
   14f04:	mov	r1, r0
   14f08:	mov	r0, #0
   14f0c:	bl	14ee0 <__assert_fail@plt+0x3c38>
   14f10:	ldr	r4, [sp]
   14f14:	add	sp, sp, #4
   14f18:	pop	{pc}		; (ldr pc, [sp], #4)
   14f1c:	mov	r2, r0
   14f20:	ldr	r0, [r0, #80]	; 0x50
   14f24:	cmp	r0, #1
   14f28:	beq	14f74 <__assert_fail@plt+0x3ccc>
   14f2c:	add	r0, r1, #1
   14f30:	ldr	r3, [r2, #28]
   14f34:	cmp	r0, r3
   14f38:	bge	14f7c <__assert_fail@plt+0x3cd4>
   14f3c:	ldr	ip, [r2, #8]
   14f40:	add	r2, ip, r0, lsl #2
   14f44:	ldr	r0, [ip, r0, lsl #2]
   14f48:	cmn	r0, #1
   14f4c:	bne	14f84 <__assert_fail@plt+0x3cdc>
   14f50:	sub	r0, r3, r1
   14f54:	mov	r3, #1
   14f58:	add	r3, r3, #1
   14f5c:	cmp	r3, r0
   14f60:	beq	14f78 <__assert_fail@plt+0x3cd0>
   14f64:	ldr	r1, [r2, #4]!
   14f68:	cmn	r1, #1
   14f6c:	beq	14f58 <__assert_fail@plt+0x3cb0>
   14f70:	mov	r0, r3
   14f74:	bx	lr
   14f78:	bx	lr
   14f7c:	mov	r0, #1
   14f80:	bx	lr
   14f84:	mov	r0, #1
   14f88:	bx	lr
   14f8c:	ldr	r3, [r0, #80]	; 0x50
   14f90:	cmp	r3, #1
   14f94:	ldreq	r3, [r0, #4]
   14f98:	ldrbeq	r0, [r3, r1]
   14f9c:	ldrne	r3, [r0, #8]
   14fa0:	ldrne	r0, [r3, r1, lsl #2]
   14fa4:	bx	lr
   14fa8:	ldr	ip, [r0, #36]	; 0x24
   14fac:	ldr	r3, [r0, #48]	; 0x30
   14fb0:	cmp	ip, r3
   14fb4:	movge	ip, r3
   14fb8:	ldr	r3, [r0, #28]
   14fbc:	cmp	ip, r3
   14fc0:	ble	14ffc <__assert_fail@plt+0x3d54>
   14fc4:	ldr	r2, [r0]
   14fc8:	ldr	r1, [r0, #24]
   14fcc:	add	r2, r2, r3
   14fd0:	ldrb	r2, [r2, r1]
   14fd4:	ldr	r1, [r0, #64]	; 0x40
   14fd8:	ldrb	r1, [r1, r2]
   14fdc:	ldr	r2, [r0, #4]
   14fe0:	strb	r1, [r2, r3]
   14fe4:	add	r3, r3, #1
   14fe8:	cmp	ip, r3
   14fec:	bne	14fc4 <__assert_fail@plt+0x3d1c>
   14ff0:	str	ip, [r0, #28]
   14ff4:	str	ip, [r0, #32]
   14ff8:	bx	lr
   14ffc:	mov	ip, r3
   15000:	b	14ff0 <__assert_fail@plt+0x3d48>
   15004:	push	{lr}		; (str lr, [sp, #-4]!)
   15008:	mov	ip, r0
   1500c:	mov	lr, r1
   15010:	clz	r1, r1
   15014:	lsr	r1, r1, #5
   15018:	cmp	r0, #0
   1501c:	movne	r0, r1
   15020:	moveq	r0, #1
   15024:	cmp	r0, #0
   15028:	movne	r0, #0
   1502c:	bne	15068 <__assert_fail@plt+0x3dc0>
   15030:	ldr	r3, [ip, #4]
   15034:	ldr	r2, [lr, #4]
   15038:	cmp	r3, r2
   1503c:	bne	15068 <__assert_fail@plt+0x3dc0>
   15040:	subs	r3, r3, #1
   15044:	bmi	15064 <__assert_fail@plt+0x3dbc>
   15048:	ldr	r1, [ip, #8]
   1504c:	ldr	r2, [lr, #8]
   15050:	ldr	r1, [r1, r3, lsl #2]
   15054:	ldr	r2, [r2, r3, lsl #2]
   15058:	cmp	r1, r2
   1505c:	beq	15040 <__assert_fail@plt+0x3d98>
   15060:	b	15068 <__assert_fail@plt+0x3dc0>
   15064:	mov	r0, #1
   15068:	pop	{pc}		; (ldr pc, [sp], #4)
   1506c:	str	r4, [sp, #-8]!
   15070:	str	lr, [sp, #4]
   15074:	ldr	lr, [r0, #4]
   15078:	cmp	lr, #0
   1507c:	movle	r0, #0
   15080:	ble	150f8 <__assert_fail@plt+0x3e50>
   15084:	sub	lr, lr, #1
   15088:	mov	ip, #0
   1508c:	cmp	lr, ip
   15090:	bls	150e4 <__assert_fail@plt+0x3e3c>
   15094:	add	r2, lr, ip
   15098:	lsr	r2, r2, #1
   1509c:	ldr	r4, [r0, #8]
   150a0:	ldr	r3, [r4, r2, lsl #2]
   150a4:	cmp	r1, r3
   150a8:	bgt	150d0 <__assert_fail@plt+0x3e28>
   150ac:	cmp	ip, r2
   150b0:	bcs	150e4 <__assert_fail@plt+0x3e3c>
   150b4:	add	r3, ip, r2
   150b8:	lsr	r3, r3, #1
   150bc:	ldr	lr, [r4, r3, lsl #2]
   150c0:	cmp	lr, r1
   150c4:	blt	150d8 <__assert_fail@plt+0x3e30>
   150c8:	mov	r2, r3
   150cc:	b	150ac <__assert_fail@plt+0x3e04>
   150d0:	mov	r3, r2
   150d4:	mov	r2, lr
   150d8:	add	ip, r3, #1
   150dc:	mov	lr, r2
   150e0:	b	1508c <__assert_fail@plt+0x3de4>
   150e4:	ldr	r3, [r0, #8]
   150e8:	ldr	r3, [r3, ip, lsl #2]
   150ec:	cmp	r3, r1
   150f0:	addeq	r0, ip, #1
   150f4:	movne	r0, #0
   150f8:	ldr	r4, [sp]
   150fc:	add	sp, sp, #4
   15100:	pop	{pc}		; (ldr pc, [sp], #4)
   15104:	cmp	r1, #0
   15108:	blt	15150 <__assert_fail@plt+0x3ea8>
   1510c:	ldr	r3, [r0, #4]
   15110:	cmp	r3, r1
   15114:	ble	15150 <__assert_fail@plt+0x3ea8>
   15118:	sub	r3, r3, #1
   1511c:	str	r3, [r0, #4]
   15120:	cmp	r3, r1
   15124:	ble	15150 <__assert_fail@plt+0x3ea8>
   15128:	add	r3, r1, #1
   1512c:	lsl	r3, r3, #2
   15130:	ldr	r2, [r0, #8]
   15134:	ldr	ip, [r2, r3]
   15138:	str	ip, [r2, r1, lsl #2]
   1513c:	add	r1, r1, #1
   15140:	add	r3, r3, #4
   15144:	ldr	r2, [r0, #4]
   15148:	cmp	r2, r1
   1514c:	bgt	15130 <__assert_fail@plt+0x3e88>
   15150:	bx	lr
   15154:	strd	r4, [sp, #-16]!
   15158:	str	r6, [sp, #8]
   1515c:	str	lr, [sp, #12]
   15160:	mov	r4, r0
   15164:	mov	r6, r1
   15168:	mov	r5, r2
   1516c:	b	15174 <__assert_fail@plt+0x3ecc>
   15170:	mov	r4, r3
   15174:	ldr	r3, [r4, #4]
   15178:	cmp	r3, #0
   1517c:	bne	15170 <__assert_fail@plt+0x3ec8>
   15180:	ldr	r3, [r4, #8]
   15184:	cmp	r3, #0
   15188:	bne	15170 <__assert_fail@plt+0x3ec8>
   1518c:	mov	r1, r4
   15190:	mov	r0, r5
   15194:	blx	r6
   15198:	cmp	r0, #0
   1519c:	bne	151d8 <__assert_fail@plt+0x3f30>
   151a0:	ldr	r2, [r4]
   151a4:	cmp	r2, #0
   151a8:	beq	151d8 <__assert_fail@plt+0x3f30>
   151ac:	ldr	r3, [r2, #8]
   151b0:	cmp	r3, r4
   151b4:	movne	r4, #0
   151b8:	moveq	r4, #1
   151bc:	cmp	r3, #0
   151c0:	movne	r1, r4
   151c4:	moveq	r1, #1
   151c8:	mov	r4, r2
   151cc:	cmp	r1, #0
   151d0:	bne	1518c <__assert_fail@plt+0x3ee4>
   151d4:	b	15170 <__assert_fail@plt+0x3ec8>
   151d8:	ldrd	r4, [sp]
   151dc:	ldr	r6, [sp, #8]
   151e0:	add	sp, sp, #12
   151e4:	pop	{pc}		; (ldr pc, [sp], #4)
   151e8:	strd	r4, [sp, #-16]!
   151ec:	str	r6, [sp, #8]
   151f0:	str	lr, [sp, #12]
   151f4:	mov	r4, r0
   151f8:	mov	r6, r1
   151fc:	mov	r5, r2
   15200:	b	1520c <__assert_fail@plt+0x3f64>
   15204:	mov	r3, r2
   15208:	mov	r4, r3
   1520c:	mov	r1, r4
   15210:	mov	r0, r5
   15214:	blx	r6
   15218:	cmp	r0, #0
   1521c:	bne	15254 <__assert_fail@plt+0x3fac>
   15220:	ldr	r3, [r4, #4]
   15224:	cmp	r3, #0
   15228:	bne	15208 <__assert_fail@plt+0x3f60>
   1522c:	ldr	r2, [r4, #8]
   15230:	cmp	r2, #0
   15234:	cmpne	r2, r3
   15238:	bne	15204 <__assert_fail@plt+0x3f5c>
   1523c:	ldr	r2, [r4]
   15240:	mov	r3, r4
   15244:	cmp	r2, #0
   15248:	beq	15254 <__assert_fail@plt+0x3fac>
   1524c:	mov	r4, r2
   15250:	b	1522c <__assert_fail@plt+0x3f84>
   15254:	ldrd	r4, [sp]
   15258:	ldr	r6, [sp, #8]
   1525c:	add	sp, sp, #12
   15260:	pop	{pc}		; (ldr pc, [sp], #4)
   15264:	ldrb	r3, [r1, #24]
   15268:	cmp	r3, #4
   1526c:	beq	15280 <__assert_fail@plt+0x3fd8>
   15270:	cmp	r3, #17
   15274:	beq	152ac <__assert_fail@plt+0x4004>
   15278:	mov	r0, #0
   1527c:	bx	lr
   15280:	ldr	r3, [r0, #132]	; 0x84
   15284:	cmp	r3, #0
   15288:	beq	15278 <__assert_fail@plt+0x3fd0>
   1528c:	ldr	r2, [r1, #20]
   15290:	ldr	r2, [r3, r2, lsl #2]
   15294:	str	r2, [r1, #20]
   15298:	ldr	r3, [r0, #80]	; 0x50
   1529c:	mov	r1, #1
   152a0:	orr	r3, r3, r1, lsl r2
   152a4:	str	r3, [r0, #80]	; 0x50
   152a8:	b	15278 <__assert_fail@plt+0x3fd0>
   152ac:	ldr	r3, [r1, #4]
   152b0:	cmp	r3, #0
   152b4:	beq	15278 <__assert_fail@plt+0x3fd0>
   152b8:	ldrb	r2, [r3, #24]
   152bc:	cmp	r2, #17
   152c0:	bne	15278 <__assert_fail@plt+0x3fd0>
   152c4:	ldr	r2, [r3, #20]
   152c8:	ldr	r3, [r3, #4]
   152cc:	str	r3, [r1, #4]
   152d0:	cmp	r3, #0
   152d4:	strne	r1, [r3]
   152d8:	ldr	r3, [r0, #132]	; 0x84
   152dc:	ldr	r1, [r1, #20]
   152e0:	ldr	r1, [r3, r1, lsl #2]
   152e4:	str	r1, [r3, r2, lsl #2]
   152e8:	cmp	r2, #31
   152ec:	bgt	15278 <__assert_fail@plt+0x3fd0>
   152f0:	ldr	r3, [r0, #80]	; 0x50
   152f4:	mov	r1, #1
   152f8:	bic	r2, r3, r1, lsl r2
   152fc:	str	r2, [r0, #80]	; 0x50
   15300:	b	15278 <__assert_fail@plt+0x3fd0>
   15304:	ldrb	r3, [r1, #24]
   15308:	cmp	r3, #11
   1530c:	beq	1533c <__assert_fail@plt+0x4094>
   15310:	cmp	r3, #16
   15314:	beq	1534c <__assert_fail@plt+0x40a4>
   15318:	ldr	r3, [r1, #4]
   1531c:	cmp	r3, #0
   15320:	ldrne	r2, [r1, #16]
   15324:	strne	r2, [r3, #16]
   15328:	ldr	r3, [r1, #8]
   1532c:	cmp	r3, #0
   15330:	ldrne	r2, [r1, #16]
   15334:	strne	r2, [r3, #16]
   15338:	b	15344 <__assert_fail@plt+0x409c>
   1533c:	ldr	r3, [r1, #4]
   15340:	str	r1, [r3, #16]
   15344:	mov	r0, #0
   15348:	bx	lr
   1534c:	ldr	r3, [r1, #4]
   15350:	ldr	r2, [r1, #8]
   15354:	ldr	r2, [r2, #12]
   15358:	str	r2, [r3, #16]
   1535c:	ldr	r3, [r1, #8]
   15360:	ldr	r2, [r1, #16]
   15364:	str	r2, [r3, #16]
   15368:	b	15344 <__assert_fail@plt+0x409c>
   1536c:	ldr	r3, [r1, #40]	; 0x28
   15370:	ldr	ip, [r1, #56]	; 0x38
   15374:	cmp	ip, r3
   15378:	ble	153f4 <__assert_fail@plt+0x414c>
   1537c:	push	{lr}		; (str lr, [sp, #-4]!)
   15380:	ldr	ip, [r1, #4]
   15384:	ldrb	r3, [ip, r3]
   15388:	strb	r3, [r0]
   1538c:	ldr	ip, [r1, #80]	; 0x50
   15390:	cmp	ip, #1
   15394:	ble	153c4 <__assert_fail@plt+0x411c>
   15398:	ldr	ip, [r1, #40]	; 0x28
   1539c:	ldr	lr, [r1, #28]
   153a0:	cmp	ip, lr
   153a4:	beq	153c4 <__assert_fail@plt+0x411c>
   153a8:	ldr	lr, [r1, #8]
   153ac:	ldr	ip, [lr, ip, lsl #2]
   153b0:	cmn	ip, #1
   153b4:	moveq	r3, #1
   153b8:	strbeq	r3, [r0, #4]
   153bc:	moveq	r0, r3
   153c0:	beq	154ec <__assert_fail@plt+0x4244>
   153c4:	cmp	r3, #92	; 0x5c
   153c8:	beq	15404 <__assert_fail@plt+0x415c>
   153cc:	cmp	r3, #91	; 0x5b
   153d0:	beq	15450 <__assert_fail@plt+0x41a8>
   153d4:	cmp	r3, #93	; 0x5d
   153d8:	beq	154f0 <__assert_fail@plt+0x4248>
   153dc:	cmp	r3, #94	; 0x5e
   153e0:	bne	154d8 <__assert_fail@plt+0x4230>
   153e4:	mov	r3, #25
   153e8:	strb	r3, [r0, #4]
   153ec:	mov	r0, #1
   153f0:	b	154ec <__assert_fail@plt+0x4244>
   153f4:	mov	r3, #2
   153f8:	strb	r3, [r0, #4]
   153fc:	mov	r0, #0
   15400:	bx	lr
   15404:	tst	r2, #1
   15408:	beq	15420 <__assert_fail@plt+0x4178>
   1540c:	ldr	r3, [r1, #40]	; 0x28
   15410:	add	r3, r3, #1
   15414:	ldr	r2, [r1, #48]	; 0x30
   15418:	cmp	r3, r2
   1541c:	blt	15430 <__assert_fail@plt+0x4188>
   15420:	mov	r3, #1
   15424:	strb	r3, [r0, #4]
   15428:	mov	r0, r3
   1542c:	b	154ec <__assert_fail@plt+0x4244>
   15430:	str	r3, [r1, #40]	; 0x28
   15434:	ldr	r2, [r1, #4]
   15438:	ldrb	r3, [r2, r3]
   1543c:	strb	r3, [r0]
   15440:	mov	r3, #1
   15444:	strb	r3, [r0, #4]
   15448:	mov	r0, r3
   1544c:	b	154ec <__assert_fail@plt+0x4244>
   15450:	ldr	r3, [r1, #40]	; 0x28
   15454:	add	lr, r3, #1
   15458:	ldr	ip, [r1, #48]	; 0x30
   1545c:	cmp	lr, ip
   15460:	bge	15498 <__assert_fail@plt+0x41f0>
   15464:	ldr	r1, [r1, #4]
   15468:	add	r3, r1, r3
   1546c:	ldrb	r3, [r3, #1]
   15470:	strb	r3, [r0]
   15474:	cmp	r3, #58	; 0x3a
   15478:	beq	154c0 <__assert_fail@plt+0x4218>
   1547c:	cmp	r3, #61	; 0x3d
   15480:	beq	154b0 <__assert_fail@plt+0x4208>
   15484:	cmp	r3, #46	; 0x2e
   15488:	moveq	r3, #26
   1548c:	strbeq	r3, [r0, #4]
   15490:	moveq	r0, #2
   15494:	beq	154ec <__assert_fail@plt+0x4244>
   15498:	mov	r3, #1
   1549c:	strb	r3, [r0, #4]
   154a0:	mov	r2, #91	; 0x5b
   154a4:	strb	r2, [r0]
   154a8:	mov	r0, r3
   154ac:	b	154ec <__assert_fail@plt+0x4244>
   154b0:	mov	r3, #28
   154b4:	strb	r3, [r0, #4]
   154b8:	mov	r0, #2
   154bc:	b	154ec <__assert_fail@plt+0x4244>
   154c0:	tst	r2, #4
   154c4:	beq	15498 <__assert_fail@plt+0x41f0>
   154c8:	mov	r3, #30
   154cc:	strb	r3, [r0, #4]
   154d0:	mov	r0, #2
   154d4:	b	154ec <__assert_fail@plt+0x4244>
   154d8:	cmp	r3, #45	; 0x2d
   154dc:	bne	15420 <__assert_fail@plt+0x4178>
   154e0:	mov	r3, #22
   154e4:	strb	r3, [r0, #4]
   154e8:	mov	r0, #1
   154ec:	pop	{pc}		; (ldr pc, [sp], #4)
   154f0:	mov	r3, #21
   154f4:	strb	r3, [r0, #4]
   154f8:	mov	r0, #1
   154fc:	b	154ec <__assert_fail@plt+0x4244>
   15500:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15504:	strd	r6, [sp, #8]
   15508:	strd	r8, [sp, #16]
   1550c:	str	sl, [sp, #24]
   15510:	str	lr, [sp, #28]
   15514:	sub	sp, sp, #8
   15518:	mov	r6, r0
   1551c:	mov	r4, r1
   15520:	mov	r8, r2
   15524:	mov	r9, r3
   15528:	ldr	r5, [r1, #40]	; 0x28
   1552c:	mov	r1, r5
   15530:	mov	r0, r4
   15534:	bl	14f1c <__assert_fail@plt+0x3c74>
   15538:	cmp	r0, #1
   1553c:	bgt	15588 <__assert_fail@plt+0x42e0>
   15540:	add	r5, r5, r9
   15544:	str	r5, [r4, #40]	; 0x28
   15548:	ldrb	r3, [r8, #4]
   1554c:	and	r2, r3, #251	; 0xfb
   15550:	cmp	r3, #28
   15554:	cmpne	r2, #26
   15558:	beq	155d0 <__assert_fail@plt+0x4328>
   1555c:	ldrb	r2, [sp, #48]	; 0x30
   15560:	cmp	r3, #22
   15564:	moveq	r3, r2
   15568:	orrne	r3, r2, #1
   1556c:	cmp	r3, #0
   15570:	beq	15778 <__assert_fail@plt+0x44d0>
   15574:	mov	r0, #0
   15578:	str	r0, [r6]
   1557c:	ldrb	r3, [r8]
   15580:	strb	r3, [r6, #4]
   15584:	b	155b4 <__assert_fail@plt+0x430c>
   15588:	mov	r7, r0
   1558c:	mov	r3, #1
   15590:	str	r3, [r6]
   15594:	ldr	r1, [r4, #40]	; 0x28
   15598:	mov	r0, r4
   1559c:	bl	14f8c <__assert_fail@plt+0x3ce4>
   155a0:	str	r0, [r6, #4]
   155a4:	ldr	r3, [r4, #40]	; 0x28
   155a8:	add	r7, r3, r7
   155ac:	str	r7, [r4, #40]	; 0x28
   155b0:	mov	r0, #0
   155b4:	add	sp, sp, #8
   155b8:	ldrd	r4, [sp]
   155bc:	ldrd	r6, [sp, #8]
   155c0:	ldrd	r8, [sp, #16]
   155c4:	ldr	sl, [sp, #24]
   155c8:	add	sp, sp, #28
   155cc:	pop	{pc}		; (ldr pc, [sp], #4)
   155d0:	ldr	r3, [r4, #56]	; 0x38
   155d4:	cmp	r5, r3
   155d8:	movge	r0, #7
   155dc:	bge	155b4 <__assert_fail@plt+0x430c>
   155e0:	ldrb	r9, [r8]
   155e4:	mov	r5, #0
   155e8:	b	156d0 <__assert_fail@plt+0x4428>
   155ec:	ldrb	r3, [r4, #75]	; 0x4b
   155f0:	cmp	r3, #0
   155f4:	bne	15610 <__assert_fail@plt+0x4368>
   155f8:	ldr	r2, [r4, #4]
   155fc:	ldr	r3, [r4, #40]	; 0x28
   15600:	add	r1, r3, #1
   15604:	str	r1, [r4, #40]	; 0x28
   15608:	ldrb	r7, [r2, r3]
   1560c:	b	156f0 <__assert_fail@plt+0x4448>
   15610:	ldrb	r3, [r4, #76]	; 0x4c
   15614:	cmp	r3, #0
   15618:	beq	1569c <__assert_fail@plt+0x43f4>
   1561c:	ldr	sl, [r4, #40]	; 0x28
   15620:	ldr	r3, [r4, #28]
   15624:	cmp	sl, r3
   15628:	beq	1563c <__assert_fail@plt+0x4394>
   1562c:	ldr	r3, [r4, #8]
   15630:	ldr	r3, [r3, sl, lsl #2]
   15634:	cmn	r3, #1
   15638:	beq	15670 <__assert_fail@plt+0x43c8>
   1563c:	ldr	r2, [r4, #12]
   15640:	ldr	r3, [r4]
   15644:	ldr	r1, [r2, sl, lsl #2]
   15648:	ldr	r2, [r4, #24]
   1564c:	add	r3, r3, r1
   15650:	ldrb	r7, [r3, r2]
   15654:	bics	r3, r7, #127	; 0x7f
   15658:	beq	15684 <__assert_fail@plt+0x43dc>
   1565c:	ldr	r3, [r4, #4]
   15660:	add	r2, sl, #1
   15664:	str	r2, [r4, #40]	; 0x28
   15668:	ldrb	r7, [r3, sl]
   1566c:	b	156f0 <__assert_fail@plt+0x4448>
   15670:	ldr	r3, [r4, #4]
   15674:	add	r2, sl, #1
   15678:	str	r2, [r4, #40]	; 0x28
   1567c:	ldrb	r7, [r3, sl]
   15680:	b	156f0 <__assert_fail@plt+0x4448>
   15684:	mov	r1, sl
   15688:	mov	r0, r4
   1568c:	bl	14f1c <__assert_fail@plt+0x3c74>
   15690:	add	r0, sl, r0
   15694:	str	r0, [r4, #40]	; 0x28
   15698:	b	156f0 <__assert_fail@plt+0x4448>
   1569c:	ldr	r3, [r4]
   156a0:	ldr	r1, [r4, #24]
   156a4:	ldr	r2, [r4, #40]	; 0x28
   156a8:	add	r0, r2, #1
   156ac:	str	r0, [r4, #40]	; 0x28
   156b0:	add	r3, r3, r1
   156b4:	ldrb	r7, [r3, r2]
   156b8:	b	156f0 <__assert_fail@plt+0x4448>
   156bc:	ldr	r3, [r6, #4]
   156c0:	strb	r7, [r3, r5]
   156c4:	add	r5, r5, #1
   156c8:	cmp	r5, #32
   156cc:	beq	157a4 <__assert_fail@plt+0x44fc>
   156d0:	ldrb	r3, [r8, #4]
   156d4:	cmp	r3, #30
   156d8:	beq	155ec <__assert_fail@plt+0x4344>
   156dc:	ldr	r2, [r4, #4]
   156e0:	ldr	r3, [r4, #40]	; 0x28
   156e4:	add	r1, r3, #1
   156e8:	str	r1, [r4, #40]	; 0x28
   156ec:	ldrb	r7, [r2, r3]
   156f0:	ldr	r3, [r4, #40]	; 0x28
   156f4:	ldr	r2, [r4, #56]	; 0x38
   156f8:	cmp	r2, r3
   156fc:	ble	1579c <__assert_fail@plt+0x44f4>
   15700:	cmp	r9, r7
   15704:	bne	156bc <__assert_fail@plt+0x4414>
   15708:	ldr	r2, [r4, #4]
   1570c:	ldrb	r2, [r2, r3]
   15710:	cmp	r2, #93	; 0x5d
   15714:	bne	156bc <__assert_fail@plt+0x4414>
   15718:	add	r3, r3, #1
   1571c:	str	r3, [r4, #40]	; 0x28
   15720:	ldr	r3, [r6, #4]
   15724:	mov	r2, #0
   15728:	strb	r2, [r3, r5]
   1572c:	ldrb	r3, [r8, #4]
   15730:	cmp	r3, #28
   15734:	beq	15758 <__assert_fail@plt+0x44b0>
   15738:	cmp	r3, #30
   1573c:	beq	15768 <__assert_fail@plt+0x44c0>
   15740:	cmp	r3, #26
   15744:	moveq	r3, #3
   15748:	streq	r3, [r6]
   1574c:	moveq	r0, r2
   15750:	movne	r0, #0
   15754:	b	155b4 <__assert_fail@plt+0x430c>
   15758:	mov	r3, #2
   1575c:	str	r3, [r6]
   15760:	mov	r0, #0
   15764:	b	155b4 <__assert_fail@plt+0x430c>
   15768:	mov	r3, #4
   1576c:	str	r3, [r6]
   15770:	mov	r0, #0
   15774:	b	155b4 <__assert_fail@plt+0x430c>
   15778:	ldr	r2, [sp, #44]	; 0x2c
   1577c:	mov	r1, r4
   15780:	mov	r0, sp
   15784:	bl	1536c <__assert_fail@plt+0x40c4>
   15788:	ldrb	r3, [sp, #4]
   1578c:	cmp	r3, #21
   15790:	movne	r0, #11
   15794:	beq	15574 <__assert_fail@plt+0x42cc>
   15798:	b	155b4 <__assert_fail@plt+0x430c>
   1579c:	mov	r0, #7
   157a0:	b	155b4 <__assert_fail@plt+0x430c>
   157a4:	mov	r0, #7
   157a8:	b	155b4 <__assert_fail@plt+0x430c>
   157ac:	ldrb	r3, [r1, #24]
   157b0:	cmp	r3, #17
   157b4:	beq	157c0 <__assert_fail@plt+0x4518>
   157b8:	mov	r0, #0
   157bc:	bx	lr
   157c0:	ldr	r3, [r1, #20]
   157c4:	cmp	r0, r3
   157c8:	bne	157b8 <__assert_fail@plt+0x4510>
   157cc:	ldrb	r3, [r1, #26]
   157d0:	orr	r3, r3, #8
   157d4:	strb	r3, [r1, #26]
   157d8:	b	157b8 <__assert_fail@plt+0x4510>
   157dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   157e0:	strd	r6, [sp, #8]
   157e4:	strd	r8, [sp, #16]
   157e8:	strd	sl, [sp, #24]
   157ec:	str	lr, [sp, #32]
   157f0:	sub	sp, sp, #52	; 0x34
   157f4:	str	r0, [sp, #12]
   157f8:	mov	fp, r1
   157fc:	mov	sl, r2
   15800:	str	r3, [sp, #32]
   15804:	ldr	r8, [r0, #84]	; 0x54
   15808:	add	r3, r3, r3, lsl #1
   1580c:	ldr	r7, [r8, #24]
   15810:	add	r7, r7, r3, lsl #2
   15814:	ldr	r3, [r7, #4]
   15818:	cmp	r3, #0
   1581c:	ble	159b8 <__assert_fail@plt+0x4710>
   15820:	mov	r3, #1
   15824:	lsl	r3, r3, sl
   15828:	str	r3, [sp, #20]
   1582c:	mvn	r3, r3
   15830:	str	r3, [sp, #24]
   15834:	mov	r4, #0
   15838:	ldr	r3, [sp, #88]	; 0x58
   1583c:	add	r3, r3, #1
   15840:	add	r3, r3, r3, lsl #1
   15844:	str	r3, [sp, #36]	; 0x24
   15848:	b	15928 <__assert_fail@plt+0x4680>
   1584c:	ldr	r3, [r8, #20]
   15850:	add	r3, r3, r4
   15854:	ldr	r3, [r3, #8]
   15858:	ldr	r3, [r3]
   1585c:	cmp	r7, r3
   15860:	beq	158e8 <__assert_fail@plt+0x4640>
   15864:	str	fp, [sp]
   15868:	mov	r2, sl
   1586c:	ldr	r1, [sp, #16]
   15870:	ldr	r0, [sp, #12]
   15874:	bl	157dc <__assert_fail@plt+0x4534>
   15878:	cmn	r0, #1
   1587c:	beq	159bc <__assert_fail@plt+0x4714>
   15880:	cmp	r0, #0
   15884:	bne	15894 <__assert_fail@plt+0x45ec>
   15888:	ldr	r3, [sp, #28]
   1588c:	cmp	r3, #0
   15890:	bne	159bc <__assert_fail@plt+0x4714>
   15894:	cmp	sl, #31
   15898:	bgt	158ac <__assert_fail@plt+0x4604>
   1589c:	ldr	r3, [r9, #-8]
   158a0:	ldr	r2, [sp, #24]
   158a4:	and	r3, r3, r2
   158a8:	str	r3, [r9, #-8]
   158ac:	add	r5, r5, #24
   158b0:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   158b4:	cmp	r3, #0
   158b8:	beq	158f4 <__assert_fail@plt+0x464c>
   158bc:	mov	r9, r5
   158c0:	ldr	r3, [r5, #-24]	; 0xffffffe8
   158c4:	cmp	r3, r6
   158c8:	bne	158ac <__assert_fail@plt+0x4604>
   158cc:	cmp	sl, #31
   158d0:	bgt	1584c <__assert_fail@plt+0x45a4>
   158d4:	ldr	r3, [r5, #-8]
   158d8:	ldr	r2, [sp, #20]
   158dc:	tst	r2, r3
   158e0:	bne	1584c <__assert_fail@plt+0x45a4>
   158e4:	b	158ac <__assert_fail@plt+0x4604>
   158e8:	ldr	fp, [sp, #16]
   158ec:	sbfx	r0, fp, #0, #1
   158f0:	b	159bc <__assert_fail@plt+0x4714>
   158f4:	ldr	r7, [sp, #40]	; 0x28
   158f8:	ldr	r4, [sp, #44]	; 0x2c
   158fc:	ldr	fp, [sp, #16]
   15900:	b	15918 <__assert_fail@plt+0x4670>
   15904:	tst	fp, #1
   15908:	beq	15918 <__assert_fail@plt+0x4670>
   1590c:	ldr	r3, [r2, r6, lsl #3]
   15910:	cmp	r3, sl
   15914:	beq	159d8 <__assert_fail@plt+0x4730>
   15918:	add	r4, r4, #1
   1591c:	ldr	r3, [r7, #4]
   15920:	cmp	r3, r4
   15924:	ble	159b8 <__assert_fail@plt+0x4710>
   15928:	ldr	r3, [r7, #8]
   1592c:	ldr	r6, [r3, r4, lsl #2]
   15930:	ldr	r2, [r8]
   15934:	add	r3, r2, r6, lsl #3
   15938:	ldrb	r3, [r3, #4]
   1593c:	cmp	r3, #8
   15940:	beq	15904 <__assert_fail@plt+0x465c>
   15944:	cmp	r3, #9
   15948:	beq	1599c <__assert_fail@plt+0x46f4>
   1594c:	cmp	r3, #4
   15950:	bne	15918 <__assert_fail@plt+0x4670>
   15954:	ldr	r3, [sp, #88]	; 0x58
   15958:	cmn	r3, #1
   1595c:	beq	15918 <__assert_fail@plt+0x4670>
   15960:	add	r3, r6, r6, lsl #1
   15964:	lsl	r3, r3, #2
   15968:	ldr	r2, [sp, #12]
   1596c:	ldr	r5, [r2, #116]	; 0x74
   15970:	ldr	r2, [sp, #36]	; 0x24
   15974:	add	r5, r5, r2, lsl #3
   15978:	and	r2, fp, #2
   1597c:	str	r2, [sp, #28]
   15980:	str	r7, [sp, #40]	; 0x28
   15984:	str	r4, [sp, #44]	; 0x2c
   15988:	mov	r4, r3
   1598c:	str	fp, [sp, #16]
   15990:	ldr	r7, [sp, #32]
   15994:	ldr	fp, [sp, #88]	; 0x58
   15998:	b	158bc <__assert_fail@plt+0x4614>
   1599c:	tst	fp, #2
   159a0:	beq	15918 <__assert_fail@plt+0x4670>
   159a4:	ldr	r3, [r2, r6, lsl #3]
   159a8:	cmp	r3, sl
   159ac:	bne	15918 <__assert_fail@plt+0x4670>
   159b0:	mov	r0, #0
   159b4:	b	159bc <__assert_fail@plt+0x4714>
   159b8:	ubfx	r0, fp, #1, #1
   159bc:	add	sp, sp, #52	; 0x34
   159c0:	ldrd	r4, [sp]
   159c4:	ldrd	r6, [sp, #8]
   159c8:	ldrd	r8, [sp, #16]
   159cc:	ldrd	sl, [sp, #24]
   159d0:	add	sp, sp, #32
   159d4:	pop	{pc}		; (ldr pc, [sp], #4)
   159d8:	mvn	r0, #0
   159dc:	b	159bc <__assert_fail@plt+0x4714>
   159e0:	str	r4, [sp, #-8]!
   159e4:	str	lr, [sp, #4]
   159e8:	sub	sp, sp, #8
   159ec:	ldr	lr, [sp, #16]
   159f0:	add	r1, r1, r1, lsl #1
   159f4:	ldr	ip, [r0, #116]	; 0x74
   159f8:	add	r1, ip, r1, lsl #3
   159fc:	ldr	ip, [r1, #8]
   15a00:	cmp	ip, lr
   15a04:	bgt	15a48 <__assert_fail@plt+0x47a0>
   15a08:	ldr	r4, [r1, #12]
   15a0c:	cmp	r4, lr
   15a10:	movlt	r0, #1
   15a14:	blt	15a38 <__assert_fail@plt+0x4790>
   15a18:	cmp	ip, lr
   15a1c:	movne	r1, #0
   15a20:	moveq	r1, #1
   15a24:	cmp	r4, lr
   15a28:	beq	15a50 <__assert_fail@plt+0x47a8>
   15a2c:	cmp	ip, lr
   15a30:	movne	r0, #0
   15a34:	beq	15a54 <__assert_fail@plt+0x47ac>
   15a38:	add	sp, sp, #8
   15a3c:	ldr	r4, [sp]
   15a40:	add	sp, sp, #4
   15a44:	pop	{pc}		; (ldr pc, [sp], #4)
   15a48:	mvn	r0, #0
   15a4c:	b	15a38 <__assert_fail@plt+0x4790>
   15a50:	orr	r1, r1, #2
   15a54:	ldr	ip, [sp, #20]
   15a58:	str	ip, [sp]
   15a5c:	bl	157dc <__assert_fail@plt+0x4534>
   15a60:	b	15a38 <__assert_fail@plt+0x4790>
   15a64:	strd	r4, [sp, #-12]!
   15a68:	str	lr, [sp, #8]
   15a6c:	mov	r4, r0
   15a70:	ldr	r5, [r0, #108]	; 0x6c
   15a74:	mov	ip, r5
   15a78:	mov	r0, #0
   15a7c:	cmp	ip, r0
   15a80:	ble	15aec <__assert_fail@plt+0x4844>
   15a84:	add	r2, ip, r0
   15a88:	add	r2, r2, r2, lsr #31
   15a8c:	asr	r2, r2, #1
   15a90:	ldr	lr, [r4, #116]	; 0x74
   15a94:	add	r3, r2, r2, lsl #1
   15a98:	add	r3, lr, r3, lsl #3
   15a9c:	ldr	r3, [r3, #4]
   15aa0:	cmp	r1, r3
   15aa4:	bgt	15ad8 <__assert_fail@plt+0x4830>
   15aa8:	cmp	r0, r2
   15aac:	bge	15aec <__assert_fail@plt+0x4844>
   15ab0:	add	r3, r0, r2
   15ab4:	add	r3, r3, r3, lsr #31
   15ab8:	asr	r3, r3, #1
   15abc:	add	ip, r3, r3, lsl #1
   15ac0:	add	ip, lr, ip, lsl #3
   15ac4:	ldr	ip, [ip, #4]
   15ac8:	cmp	ip, r1
   15acc:	blt	15ae0 <__assert_fail@plt+0x4838>
   15ad0:	mov	r2, r3
   15ad4:	b	15aa8 <__assert_fail@plt+0x4800>
   15ad8:	mov	r3, r2
   15adc:	mov	r2, ip
   15ae0:	add	r0, r3, #1
   15ae4:	mov	ip, r2
   15ae8:	b	15a7c <__assert_fail@plt+0x47d4>
   15aec:	cmp	r5, r0
   15af0:	ble	15b18 <__assert_fail@plt+0x4870>
   15af4:	ldr	r3, [r4, #116]	; 0x74
   15af8:	add	r2, r0, r0, lsl #1
   15afc:	add	r3, r3, r2, lsl #3
   15b00:	ldr	r3, [r3, #4]
   15b04:	cmp	r3, r1
   15b08:	mvnne	r0, #0
   15b0c:	ldrd	r4, [sp]
   15b10:	add	sp, sp, #8
   15b14:	pop	{pc}		; (ldr pc, [sp], #4)
   15b18:	mvn	r0, #0
   15b1c:	b	15b0c <__assert_fail@plt+0x4864>
   15b20:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15b24:	strd	r6, [sp, #8]
   15b28:	strd	r8, [sp, #16]
   15b2c:	strd	sl, [sp, #24]
   15b30:	str	lr, [sp, #32]
   15b34:	sub	sp, sp, #20
   15b38:	mov	r4, r0
   15b3c:	mov	r5, r1
   15b40:	str	r2, [sp, #12]
   15b44:	mov	r8, r3
   15b48:	ldr	sl, [r0, #84]	; 0x54
   15b4c:	mov	r1, r3
   15b50:	bl	15a64 <__assert_fail@plt+0x47bc>
   15b54:	mov	fp, r0
   15b58:	ldr	r1, [sp, #60]	; 0x3c
   15b5c:	mov	r0, r4
   15b60:	bl	15a64 <__assert_fail@plt+0x47bc>
   15b64:	str	r0, [sp, #8]
   15b68:	ldr	r3, [r5, #4]
   15b6c:	cmp	r3, #0
   15b70:	ble	15c18 <__assert_fail@plt+0x4970>
   15b74:	mov	r6, #0
   15b78:	ldr	r3, [r5, #8]
   15b7c:	ldr	r1, [r3, r6, lsl #2]
   15b80:	ldr	r3, [r4, #116]	; 0x74
   15b84:	add	r2, r1, r1, lsl #1
   15b88:	ldr	r2, [r3, r2, lsl #3]
   15b8c:	ldr	r3, [sl]
   15b90:	ldr	r7, [r3, r2, lsl #3]
   15b94:	str	fp, [sp, #4]
   15b98:	str	r8, [sp]
   15b9c:	ldr	r3, [sp, #12]
   15ba0:	mov	r2, r7
   15ba4:	mov	r0, r4
   15ba8:	bl	159e0 <__assert_fail@plt+0x4738>
   15bac:	mov	r9, r0
   15bb0:	ldr	r3, [r5, #8]
   15bb4:	ldr	r1, [r3, r6, lsl #2]
   15bb8:	ldr	r3, [sp, #8]
   15bbc:	str	r3, [sp, #4]
   15bc0:	ldr	r3, [sp, #60]	; 0x3c
   15bc4:	str	r3, [sp]
   15bc8:	ldr	r3, [sp, #56]	; 0x38
   15bcc:	mov	r2, r7
   15bd0:	mov	r0, r4
   15bd4:	bl	159e0 <__assert_fail@plt+0x4738>
   15bd8:	cmp	r9, r0
   15bdc:	beq	15c00 <__assert_fail@plt+0x4958>
   15be0:	mov	r0, #1
   15be4:	add	sp, sp, #20
   15be8:	ldrd	r4, [sp]
   15bec:	ldrd	r6, [sp, #8]
   15bf0:	ldrd	r8, [sp, #16]
   15bf4:	ldrd	sl, [sp, #24]
   15bf8:	add	sp, sp, #32
   15bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   15c00:	add	r6, r6, #1
   15c04:	ldr	r3, [r5, #4]
   15c08:	cmp	r3, r6
   15c0c:	bgt	15b78 <__assert_fail@plt+0x48d0>
   15c10:	mov	r0, #0
   15c14:	b	15be4 <__assert_fail@plt+0x493c>
   15c18:	mov	r0, #0
   15c1c:	b	15be4 <__assert_fail@plt+0x493c>
   15c20:	strd	r4, [sp, #-16]!
   15c24:	str	r6, [sp, #8]
   15c28:	str	lr, [sp, #12]
   15c2c:	mov	r4, r0
   15c30:	mov	r5, r1
   15c34:	ldr	r3, [r0, #80]	; 0x50
   15c38:	cmp	r3, #1
   15c3c:	ble	15c84 <__assert_fail@plt+0x49dc>
   15c40:	cmn	r1, #-1073741823	; 0xc0000001
   15c44:	bhi	15cc4 <__assert_fail@plt+0x4a1c>
   15c48:	lsl	r6, r1, #2
   15c4c:	mov	r1, r6
   15c50:	ldr	r0, [r0, #8]
   15c54:	bl	23d84 <__assert_fail@plt+0x12adc>
   15c58:	cmp	r0, #0
   15c5c:	beq	15ccc <__assert_fail@plt+0x4a24>
   15c60:	str	r0, [r4, #8]
   15c64:	ldr	r0, [r4, #12]
   15c68:	cmp	r0, #0
   15c6c:	beq	15c84 <__assert_fail@plt+0x49dc>
   15c70:	mov	r1, r6
   15c74:	bl	23d84 <__assert_fail@plt+0x12adc>
   15c78:	cmp	r0, #0
   15c7c:	beq	15cd4 <__assert_fail@plt+0x4a2c>
   15c80:	str	r0, [r4, #12]
   15c84:	ldrb	r3, [r4, #75]	; 0x4b
   15c88:	cmp	r3, #0
   15c8c:	bne	15ca8 <__assert_fail@plt+0x4a00>
   15c90:	str	r5, [r4, #36]	; 0x24
   15c94:	mov	r0, #0
   15c98:	ldrd	r4, [sp]
   15c9c:	ldr	r6, [sp, #8]
   15ca0:	add	sp, sp, #12
   15ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ca8:	mov	r1, r5
   15cac:	ldr	r0, [r4, #4]
   15cb0:	bl	23d84 <__assert_fail@plt+0x12adc>
   15cb4:	cmp	r0, #0
   15cb8:	beq	15cdc <__assert_fail@plt+0x4a34>
   15cbc:	str	r0, [r4, #4]
   15cc0:	b	15c90 <__assert_fail@plt+0x49e8>
   15cc4:	mov	r0, #12
   15cc8:	b	15c98 <__assert_fail@plt+0x49f0>
   15ccc:	mov	r0, #12
   15cd0:	b	15c98 <__assert_fail@plt+0x49f0>
   15cd4:	mov	r0, #12
   15cd8:	b	15c98 <__assert_fail@plt+0x49f0>
   15cdc:	mov	r0, #12
   15ce0:	b	15c98 <__assert_fail@plt+0x49f0>
   15ce4:	strd	r4, [sp, #-16]!
   15ce8:	str	r6, [sp, #8]
   15cec:	str	lr, [sp, #12]
   15cf0:	mov	r4, r0
   15cf4:	mov	r5, r1
   15cf8:	ldr	r1, [r0]
   15cfc:	ldr	r3, [r0, #4]
   15d00:	cmp	r1, r3
   15d04:	beq	15d30 <__assert_fail@plt+0x4a88>
   15d08:	ldr	r2, [r4, #8]
   15d0c:	ldr	r3, [r4, #4]
   15d10:	add	r1, r3, #1
   15d14:	str	r1, [r4, #4]
   15d18:	str	r5, [r2, r3, lsl #2]
   15d1c:	mov	r0, #1
   15d20:	ldrd	r4, [sp]
   15d24:	ldr	r6, [sp, #8]
   15d28:	add	sp, sp, #12
   15d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d30:	add	r1, r1, #1
   15d34:	lsl	r3, r1, #1
   15d38:	str	r3, [r0]
   15d3c:	lsl	r1, r1, #3
   15d40:	ldr	r0, [r0, #8]
   15d44:	bl	23d84 <__assert_fail@plt+0x12adc>
   15d48:	cmp	r0, #0
   15d4c:	beq	15d58 <__assert_fail@plt+0x4ab0>
   15d50:	str	r0, [r4, #8]
   15d54:	b	15d08 <__assert_fail@plt+0x4a60>
   15d58:	mov	r0, #0
   15d5c:	b	15d20 <__assert_fail@plt+0x4a78>
   15d60:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15d64:	strd	r6, [sp, #8]
   15d68:	str	r8, [sp, #16]
   15d6c:	str	lr, [sp, #20]
   15d70:	mov	r7, r0
   15d74:	mov	r5, r1
   15d78:	mov	r4, r2
   15d7c:	mov	r6, r3
   15d80:	ldr	r3, [r0, #64]	; 0x40
   15d84:	cmp	r3, #31
   15d88:	beq	15e08 <__assert_fail@plt+0x4b60>
   15d8c:	ldr	r3, [r7, #56]	; 0x38
   15d90:	ldr	r2, [r7, #64]	; 0x40
   15d94:	add	r1, r2, #1
   15d98:	str	r1, [r7, #64]	; 0x40
   15d9c:	lsl	r2, r2, #5
   15da0:	add	r0, r2, #4
   15da4:	add	r0, r3, r0
   15da8:	add	r3, r3, r2
   15dac:	mov	r2, #0
   15db0:	str	r2, [r3, #4]
   15db4:	str	r5, [r3, #8]
   15db8:	str	r4, [r3, #12]
   15dbc:	ldrd	r6, [r6]
   15dc0:	strd	r6, [r3, #24]
   15dc4:	ldrb	r1, [r3, #30]
   15dc8:	and	r1, r1, #251	; 0xfb
   15dcc:	bfi	r1, r2, #3, #1
   15dd0:	strb	r1, [r3, #30]
   15dd4:	str	r2, [r3, #16]
   15dd8:	str	r2, [r3, #20]
   15ddc:	mvn	r2, #0
   15de0:	str	r2, [r3, #32]
   15de4:	cmp	r5, #0
   15de8:	strne	r0, [r5]
   15dec:	cmp	r4, #0
   15df0:	strne	r0, [r4]
   15df4:	ldrd	r4, [sp]
   15df8:	ldrd	r6, [sp, #8]
   15dfc:	ldr	r8, [sp, #16]
   15e00:	add	sp, sp, #20
   15e04:	pop	{pc}		; (ldr pc, [sp], #4)
   15e08:	mov	r0, #996	; 0x3e4
   15e0c:	bl	23d48 <__assert_fail@plt+0x12aa0>
   15e10:	cmp	r0, #0
   15e14:	beq	15df4 <__assert_fail@plt+0x4b4c>
   15e18:	ldr	r3, [r7, #56]	; 0x38
   15e1c:	str	r3, [r0]
   15e20:	str	r0, [r7, #56]	; 0x38
   15e24:	mov	r3, #0
   15e28:	str	r3, [r7, #64]	; 0x40
   15e2c:	b	15d8c <__assert_fail@plt+0x4ae4>
   15e30:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15e34:	strd	r6, [sp, #8]
   15e38:	str	r8, [sp, #16]
   15e3c:	str	lr, [sp, #20]
   15e40:	sub	sp, sp, #8
   15e44:	mov	r4, r0
   15e48:	mov	r7, r1
   15e4c:	ldr	r5, [r0]
   15e50:	add	r8, sp, #4
   15e54:	mov	r6, #0
   15e58:	add	r3, r4, #20
   15e5c:	mov	r2, r6
   15e60:	mov	r1, r6
   15e64:	mov	r0, r7
   15e68:	bl	15d60 <__assert_fail@plt+0x4ab8>
   15e6c:	str	r0, [r8]
   15e70:	cmp	r0, #0
   15e74:	beq	15eac <__assert_fail@plt+0x4c04>
   15e78:	str	r5, [r0]
   15e7c:	ldr	r2, [r8]
   15e80:	ldrb	r3, [r2, #26]
   15e84:	orr	r3, r3, #4
   15e88:	strb	r3, [r2, #26]
   15e8c:	ldr	r5, [r8]
   15e90:	ldr	r3, [r4, #4]
   15e94:	cmp	r3, #0
   15e98:	beq	15ec4 <__assert_fail@plt+0x4c1c>
   15e9c:	add	r8, r5, #4
   15ea0:	mov	r4, r3
   15ea4:	b	15e58 <__assert_fail@plt+0x4bb0>
   15ea8:	ldr	r0, [sp, #4]
   15eac:	add	sp, sp, #8
   15eb0:	ldrd	r4, [sp]
   15eb4:	ldrd	r6, [sp, #8]
   15eb8:	ldr	r8, [sp, #16]
   15ebc:	add	sp, sp, #20
   15ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ec4:	ldr	r2, [r4, #8]
   15ec8:	cmp	r2, r3
   15ecc:	cmpne	r2, #0
   15ed0:	bne	15ef0 <__assert_fail@plt+0x4c48>
   15ed4:	ldr	r2, [r4]
   15ed8:	ldr	r5, [r5]
   15edc:	mov	r3, r4
   15ee0:	cmp	r2, #0
   15ee4:	beq	15ea8 <__assert_fail@plt+0x4c00>
   15ee8:	mov	r4, r2
   15eec:	b	15ec4 <__assert_fail@plt+0x4c1c>
   15ef0:	add	r8, r5, #8
   15ef4:	mov	r4, r2
   15ef8:	b	15e58 <__assert_fail@plt+0x4bb0>
   15efc:	strd	r4, [sp, #-12]!
   15f00:	str	lr, [sp, #8]
   15f04:	sub	sp, sp, #12
   15f08:	mov	r4, #0
   15f0c:	mov	r5, #0
   15f10:	strd	r4, [sp]
   15f14:	strb	r3, [sp, #4]
   15f18:	mov	r3, sp
   15f1c:	bl	15d60 <__assert_fail@plt+0x4ab8>
   15f20:	add	sp, sp, #12
   15f24:	ldrd	r4, [sp]
   15f28:	add	sp, sp, #8
   15f2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f30:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15f34:	strd	r6, [sp, #8]
   15f38:	strd	r8, [sp, #16]
   15f3c:	str	sl, [sp, #24]
   15f40:	str	lr, [sp, #28]
   15f44:	mov	r8, r0
   15f48:	mov	r7, r2
   15f4c:	ldr	r6, [r1]
   15f50:	ldr	r4, [r2, #4]
   15f54:	ldrb	r3, [r1, #28]
   15f58:	ubfx	r3, r3, #4, #1
   15f5c:	cmp	r4, #0
   15f60:	moveq	r3, #0
   15f64:	cmp	r3, #0
   15f68:	bne	15fb0 <__assert_fail@plt+0x4d08>
   15f6c:	mov	r3, #8
   15f70:	mov	r2, #0
   15f74:	mov	r1, r2
   15f78:	mov	r0, r6
   15f7c:	bl	15efc <__assert_fail@plt+0x4c54>
   15f80:	mov	r5, r0
   15f84:	mov	r3, #9
   15f88:	mov	r2, #0
   15f8c:	mov	r1, r2
   15f90:	mov	r0, r6
   15f94:	bl	15efc <__assert_fail@plt+0x4c54>
   15f98:	mov	sl, r0
   15f9c:	cmp	r4, #0
   15fa0:	moveq	r9, r0
   15fa4:	beq	16014 <__assert_fail@plt+0x4d6c>
   15fa8:	mov	r9, r0
   15fac:	b	15ffc <__assert_fail@plt+0x4d54>
   15fb0:	ldr	r3, [r2, #20]
   15fb4:	cmp	r3, #31
   15fb8:	bgt	16070 <__assert_fail@plt+0x4dc8>
   15fbc:	ldr	r2, [r6, #80]	; 0x50
   15fc0:	lsr	r3, r2, r3
   15fc4:	tst	r3, #1
   15fc8:	beq	16070 <__assert_fail@plt+0x4dc8>
   15fcc:	mov	r3, #8
   15fd0:	mov	r2, #0
   15fd4:	mov	r1, r2
   15fd8:	mov	r0, r6
   15fdc:	bl	15efc <__assert_fail@plt+0x4c54>
   15fe0:	mov	r5, r0
   15fe4:	mov	r3, #9
   15fe8:	mov	r2, #0
   15fec:	mov	r1, r2
   15ff0:	mov	r0, r6
   15ff4:	bl	15efc <__assert_fail@plt+0x4c54>
   15ff8:	mov	r9, r0
   15ffc:	mov	r3, #16
   16000:	mov	r2, r9
   16004:	mov	r1, r4
   16008:	mov	r0, r6
   1600c:	bl	15efc <__assert_fail@plt+0x4c54>
   16010:	mov	sl, r0
   16014:	mov	r3, #16
   16018:	mov	r2, sl
   1601c:	mov	r1, r5
   16020:	mov	r0, r6
   16024:	bl	15efc <__assert_fail@plt+0x4c54>
   16028:	mov	r4, r0
   1602c:	cmp	sl, #0
   16030:	cmpne	r0, #0
   16034:	beq	1608c <__assert_fail@plt+0x4de4>
   16038:	cmp	r9, #0
   1603c:	cmpne	r5, #0
   16040:	beq	1608c <__assert_fail@plt+0x4de4>
   16044:	ldr	r3, [r7, #20]
   16048:	str	r3, [r9, #20]
   1604c:	str	r3, [r5, #20]
   16050:	ldrb	r3, [r7, #26]
   16054:	ubfx	r3, r3, #3, #1
   16058:	ldrb	r2, [r9, #26]
   1605c:	bfi	r2, r3, #3, #1
   16060:	strb	r2, [r9, #26]
   16064:	ldrb	r2, [r5, #26]
   16068:	bfi	r2, r3, #3, #1
   1606c:	strb	r2, [r5, #26]
   16070:	mov	r0, r4
   16074:	ldrd	r4, [sp]
   16078:	ldrd	r6, [sp, #8]
   1607c:	ldrd	r8, [sp, #16]
   16080:	ldr	sl, [sp, #24]
   16084:	add	sp, sp, #28
   16088:	pop	{pc}		; (ldr pc, [sp], #4)
   1608c:	mov	r3, #12
   16090:	str	r3, [r8]
   16094:	mov	r4, #0
   16098:	b	16070 <__assert_fail@plt+0x4dc8>
   1609c:	strd	r4, [sp, #-12]!
   160a0:	str	lr, [sp, #8]
   160a4:	sub	sp, sp, #12
   160a8:	mov	r5, r0
   160ac:	mov	r4, r1
   160b0:	mov	r3, #0
   160b4:	str	r3, [sp, #4]
   160b8:	ldr	r2, [r1, #4]
   160bc:	cmp	r2, r3
   160c0:	beq	160d0 <__assert_fail@plt+0x4e28>
   160c4:	ldrb	r3, [r2, #24]
   160c8:	cmp	r3, #17
   160cc:	beq	160fc <__assert_fail@plt+0x4e54>
   160d0:	ldr	r2, [r4, #8]
   160d4:	cmp	r2, #0
   160d8:	beq	160e8 <__assert_fail@plt+0x4e40>
   160dc:	ldrb	r3, [r2, #24]
   160e0:	cmp	r3, #17
   160e4:	beq	16118 <__assert_fail@plt+0x4e70>
   160e8:	ldr	r0, [sp, #4]
   160ec:	add	sp, sp, #12
   160f0:	ldrd	r4, [sp]
   160f4:	add	sp, sp, #8
   160f8:	pop	{pc}		; (ldr pc, [sp], #4)
   160fc:	mov	r1, r0
   16100:	add	r0, sp, #4
   16104:	bl	15f30 <__assert_fail@plt+0x4c88>
   16108:	str	r0, [r4, #4]
   1610c:	cmp	r0, #0
   16110:	strne	r4, [r0]
   16114:	b	160d0 <__assert_fail@plt+0x4e28>
   16118:	mov	r1, r5
   1611c:	add	r0, sp, #4
   16120:	bl	15f30 <__assert_fail@plt+0x4c88>
   16124:	str	r0, [r4, #8]
   16128:	cmp	r0, #0
   1612c:	strne	r4, [r0]
   16130:	b	160e8 <__assert_fail@plt+0x4e40>
   16134:	strd	r4, [sp, #-16]!
   16138:	str	r6, [sp, #8]
   1613c:	str	lr, [sp, #12]
   16140:	mov	r4, r0
   16144:	mov	r5, r1
   16148:	mov	r3, #1
   1614c:	str	r3, [r0]
   16150:	str	r3, [r0, #4]
   16154:	mov	r0, #4
   16158:	bl	23d48 <__assert_fail@plt+0x12aa0>
   1615c:	str	r0, [r4, #8]
   16160:	cmp	r0, #0
   16164:	moveq	r3, #0
   16168:	streq	r3, [r4, #4]
   1616c:	streq	r3, [r4]
   16170:	moveq	r0, #12
   16174:	strne	r5, [r0]
   16178:	movne	r0, #0
   1617c:	ldrd	r4, [sp]
   16180:	ldr	r6, [sp, #8]
   16184:	add	sp, sp, #12
   16188:	pop	{pc}		; (ldr pc, [sp], #4)
   1618c:	str	r4, [sp, #-8]!
   16190:	str	lr, [sp, #4]
   16194:	mov	r4, r0
   16198:	str	r1, [r0]
   1619c:	mov	r3, #0
   161a0:	str	r3, [r0, #4]
   161a4:	lsl	r0, r1, #2
   161a8:	bl	23d48 <__assert_fail@plt+0x12aa0>
   161ac:	str	r0, [r4, #8]
   161b0:	cmp	r0, #0
   161b4:	movne	r0, #0
   161b8:	moveq	r0, #12
   161bc:	ldr	r4, [sp]
   161c0:	add	sp, sp, #4
   161c4:	pop	{pc}		; (ldr pc, [sp], #4)
   161c8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   161cc:	strd	r6, [sp, #8]
   161d0:	strd	r8, [sp, #16]
   161d4:	str	sl, [sp, #24]
   161d8:	str	lr, [sp, #28]
   161dc:	mov	r6, r0
   161e0:	mov	r5, r1
   161e4:	mov	r7, r2
   161e8:	mov	r8, r1
   161ec:	str	r2, [r8], #16
   161f0:	ldr	r1, [r1, #8]
   161f4:	mov	r0, r8
   161f8:	bl	1618c <__assert_fail@plt+0x4ee4>
   161fc:	subs	r9, r0, #0
   16200:	bne	162dc <__assert_fail@plt+0x5034>
   16204:	ldr	r3, [r5, #8]
   16208:	cmp	r3, #0
   1620c:	ble	1625c <__assert_fail@plt+0x4fb4>
   16210:	mov	r4, r9
   16214:	b	16228 <__assert_fail@plt+0x4f80>
   16218:	add	r4, r4, #1
   1621c:	ldr	r3, [r5, #8]
   16220:	cmp	r3, r4
   16224:	ble	1625c <__assert_fail@plt+0x4fb4>
   16228:	ldr	r3, [r5, #12]
   1622c:	ldr	r1, [r3, r4, lsl #2]
   16230:	ldr	r3, [r6]
   16234:	add	r3, r3, r1, lsl #3
   16238:	ldrb	r3, [r3, #4]
   1623c:	tst	r3, #8
   16240:	bne	16218 <__assert_fail@plt+0x4f70>
   16244:	mov	r0, r8
   16248:	bl	15ce4 <__assert_fail@plt+0x4a3c>
   1624c:	cmp	r0, #0
   16250:	bne	16218 <__assert_fail@plt+0x4f70>
   16254:	mov	r9, #12
   16258:	b	16298 <__assert_fail@plt+0x4ff0>
   1625c:	ldr	r4, [r6, #68]	; 0x44
   16260:	and	r7, r7, r4
   16264:	add	r7, r7, r7, lsl #1
   16268:	lsl	r4, r7, #2
   1626c:	ldr	r6, [r6, #32]
   16270:	add	r7, r6, r4
   16274:	ldr	r3, [r6, r4]
   16278:	ldr	r2, [r7, #4]
   1627c:	cmp	r2, r3
   16280:	ble	162b4 <__assert_fail@plt+0x500c>
   16284:	ldr	r2, [r7, #8]
   16288:	ldr	r3, [r6, r4]
   1628c:	add	r1, r3, #1
   16290:	str	r1, [r6, r4]
   16294:	str	r5, [r2, r3, lsl #2]
   16298:	mov	r0, r9
   1629c:	ldrd	r4, [sp]
   162a0:	ldrd	r6, [sp, #8]
   162a4:	ldrd	r8, [sp, #16]
   162a8:	ldr	sl, [sp, #24]
   162ac:	add	sp, sp, #28
   162b0:	pop	{pc}		; (ldr pc, [sp], #4)
   162b4:	add	r3, r3, #1
   162b8:	lsl	r8, r3, #1
   162bc:	lsl	r1, r3, #3
   162c0:	ldr	r0, [r7, #8]
   162c4:	bl	23d84 <__assert_fail@plt+0x12adc>
   162c8:	cmp	r0, #0
   162cc:	beq	162e4 <__assert_fail@plt+0x503c>
   162d0:	str	r0, [r7, #8]
   162d4:	str	r8, [r7, #4]
   162d8:	b	16284 <__assert_fail@plt+0x4fdc>
   162dc:	mov	r9, #12
   162e0:	b	16298 <__assert_fail@plt+0x4ff0>
   162e4:	mov	r9, #12
   162e8:	b	16298 <__assert_fail@plt+0x4ff0>
   162ec:	strd	r4, [sp, #-20]!	; 0xffffffec
   162f0:	strd	r6, [sp, #8]
   162f4:	str	lr, [sp, #16]
   162f8:	sub	sp, sp, #84	; 0x54
   162fc:	mov	r4, r0
   16300:	ldr	r5, [r0, #36]	; 0x24
   16304:	ldr	r3, [r0, #48]	; 0x30
   16308:	cmp	r5, r3
   1630c:	movge	r5, r3
   16310:	ldr	r7, [r0, #28]
   16314:	cmp	r5, r7
   16318:	ble	16460 <__assert_fail@plt+0x51b8>
   1631c:	mov	r6, #1
   16320:	b	16400 <__assert_fail@plt+0x5158>
   16324:	ldr	r3, [r4, #80]	; 0x50
   16328:	cmp	r3, #0
   1632c:	cmpgt	r2, #0
   16330:	ble	16388 <__assert_fail@plt+0x50e0>
   16334:	add	r0, sp, #16
   16338:	mov	r1, #0
   1633c:	ldr	r3, [r4]
   16340:	ldr	ip, [r4, #24]
   16344:	add	r3, r3, r7
   16348:	add	r3, r3, r1
   1634c:	ldrb	r3, [r3, ip]
   16350:	ldr	ip, [r4, #64]	; 0x40
   16354:	ldrb	ip, [ip, r3]
   16358:	ldr	r3, [r4, #4]
   1635c:	add	r3, r3, r7
   16360:	strb	ip, [r3, r1]
   16364:	strb	ip, [r0], #1
   16368:	add	r1, r1, #1
   1636c:	ldr	r3, [r4, #80]	; 0x50
   16370:	cmp	r2, r3
   16374:	movlt	r3, r2
   16378:	cmp	r3, r1
   1637c:	bgt	1633c <__assert_fail@plt+0x5094>
   16380:	add	r1, sp, #16
   16384:	b	16428 <__assert_fail@plt+0x5180>
   16388:	add	r1, sp, #16
   1638c:	b	16428 <__assert_fail@plt+0x5180>
   16390:	ldr	r3, [r4]
   16394:	ldr	r2, [r4, #24]
   16398:	add	r3, r3, r7
   1639c:	ldrb	r3, [r3, r2]
   163a0:	str	r3, [sp, #4]
   163a4:	ldr	r2, [r4, #64]	; 0x40
   163a8:	cmp	r2, #0
   163ac:	ldrbne	r3, [r2, r3]
   163b0:	strne	r3, [sp, #4]
   163b4:	ldrd	r2, [sp, #8]
   163b8:	strd	r2, [r4, #16]
   163bc:	mov	r0, r6
   163c0:	add	r3, r7, #1
   163c4:	ldr	r2, [r4, #8]
   163c8:	ldr	r1, [sp, #4]
   163cc:	str	r1, [r2, r7, lsl #2]
   163d0:	add	r0, r7, r0
   163d4:	cmp	r3, r0
   163d8:	bge	1647c <__assert_fail@plt+0x51d4>
   163dc:	mvn	r1, #0
   163e0:	ldr	r2, [r4, #8]
   163e4:	str	r1, [r2, r3, lsl #2]
   163e8:	add	r3, r3, #1
   163ec:	cmp	r3, r0
   163f0:	bne	163e0 <__assert_fail@plt+0x5138>
   163f4:	mov	r7, r0
   163f8:	cmp	r7, r5
   163fc:	bge	16460 <__assert_fail@plt+0x51b8>
   16400:	sub	r2, r5, r7
   16404:	ldrd	r0, [r4, #16]
   16408:	strd	r0, [sp, #8]
   1640c:	ldr	r3, [r4, #64]	; 0x40
   16410:	cmp	r3, #0
   16414:	bne	16324 <__assert_fail@plt+0x507c>
   16418:	ldr	r1, [r4, #24]
   1641c:	add	r3, r7, r1
   16420:	ldr	r1, [r4]
   16424:	add	r1, r1, r3
   16428:	add	r3, r4, #16
   1642c:	add	r0, sp, #4
   16430:	bl	23fe4 <__assert_fail@plt+0x12d3c>
   16434:	sub	r3, r0, #1
   16438:	cmn	r3, #3
   1643c:	bhi	16390 <__assert_fail@plt+0x50e8>
   16440:	cmn	r0, #2
   16444:	bne	163c0 <__assert_fail@plt+0x5118>
   16448:	ldr	r2, [r4, #36]	; 0x24
   1644c:	ldr	r3, [r4, #48]	; 0x30
   16450:	cmp	r2, r3
   16454:	bge	16390 <__assert_fail@plt+0x50e8>
   16458:	ldrd	r2, [sp, #8]
   1645c:	strd	r2, [r4, #16]
   16460:	str	r7, [r4, #28]
   16464:	str	r7, [r4, #32]
   16468:	add	sp, sp, #84	; 0x54
   1646c:	ldrd	r4, [sp]
   16470:	ldrd	r6, [sp, #8]
   16474:	add	sp, sp, #16
   16478:	pop	{pc}		; (ldr pc, [sp], #4)
   1647c:	mov	r7, r3
   16480:	b	163f8 <__assert_fail@plt+0x5150>
   16484:	ldr	r3, [r1, #4]
   16488:	cmp	r3, #0
   1648c:	beq	16648 <__assert_fail@plt+0x53a0>
   16490:	ldr	ip, [r2, #4]
   16494:	cmp	ip, #0
   16498:	beq	16644 <__assert_fail@plt+0x539c>
   1649c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   164a0:	strd	r6, [sp, #8]
   164a4:	str	r8, [sp, #16]
   164a8:	str	lr, [sp, #20]
   164ac:	mov	r6, r2
   164b0:	mov	r5, r1
   164b4:	mov	r7, r0
   164b8:	add	r3, r3, ip
   164bc:	ldr	r4, [r0]
   164c0:	ldr	r2, [r0, #4]
   164c4:	add	r2, r3, r2
   164c8:	cmp	r2, r4
   164cc:	bgt	164f4 <__assert_fail@plt+0x524c>
   164d0:	ldr	r3, [r7, #4]
   164d4:	ldr	r4, [r5, #4]
   164d8:	ldr	r2, [r6, #4]
   164dc:	add	r1, r3, r4
   164e0:	add	r1, r1, r2
   164e4:	sub	r4, r4, #1
   164e8:	sub	r2, r2, #1
   164ec:	sub	r3, r3, #1
   164f0:	b	16580 <__assert_fail@plt+0x52d8>
   164f4:	add	r4, r3, r4
   164f8:	lsl	r1, r4, #2
   164fc:	ldr	r0, [r0, #8]
   16500:	bl	23d84 <__assert_fail@plt+0x12adc>
   16504:	cmp	r0, #0
   16508:	beq	16650 <__assert_fail@plt+0x53a8>
   1650c:	str	r0, [r7, #8]
   16510:	str	r4, [r7]
   16514:	b	164d0 <__assert_fail@plt+0x5228>
   16518:	cmp	r3, #0
   1651c:	blt	16558 <__assert_fail@plt+0x52b0>
   16520:	ldr	r8, [r7, #8]
   16524:	add	lr, r8, r3, lsl #2
   16528:	ldr	r0, [r8, r3, lsl #2]
   1652c:	cmp	ip, r0
   16530:	bge	1654c <__assert_fail@plt+0x52a4>
   16534:	sub	r3, r3, #1
   16538:	cmn	r3, #1
   1653c:	beq	16558 <__assert_fail@plt+0x52b0>
   16540:	ldr	r0, [lr, #-4]!
   16544:	cmp	ip, r0
   16548:	blt	16534 <__assert_fail@plt+0x528c>
   1654c:	ldr	r0, [r8, r3, lsl #2]
   16550:	cmp	ip, r0
   16554:	beq	16564 <__assert_fail@plt+0x52bc>
   16558:	sub	r1, r1, #1
   1655c:	ldr	r0, [r7, #8]
   16560:	str	ip, [r0, r1, lsl #2]
   16564:	subs	r4, r4, #1
   16568:	bmi	165a8 <__assert_fail@plt+0x5300>
   1656c:	subs	r2, r2, #1
   16570:	bpl	16580 <__assert_fail@plt+0x52d8>
   16574:	b	165a8 <__assert_fail@plt+0x5300>
   16578:	subs	r4, r4, #1
   1657c:	bmi	165a8 <__assert_fail@plt+0x5300>
   16580:	ldr	r0, [r5, #8]
   16584:	ldr	ip, [r0, r4, lsl #2]
   16588:	ldr	r0, [r6, #8]
   1658c:	ldr	r0, [r0, r2, lsl #2]
   16590:	cmp	ip, r0
   16594:	beq	16518 <__assert_fail@plt+0x5270>
   16598:	cmp	ip, r0
   1659c:	bge	16578 <__assert_fail@plt+0x52d0>
   165a0:	subs	r2, r2, #1
   165a4:	bpl	16580 <__assert_fail@plt+0x52d8>
   165a8:	ldr	r3, [r7, #4]
   165ac:	sub	r0, r3, #1
   165b0:	ldr	r2, [r5, #4]
   165b4:	add	r2, r3, r2
   165b8:	ldr	ip, [r6, #4]
   165bc:	add	r2, r2, ip
   165c0:	sub	r4, r2, #1
   165c4:	sub	r2, r2, r1
   165c8:	add	r3, r3, r2
   165cc:	str	r3, [r7, #4]
   165d0:	cmp	r0, #0
   165d4:	cmpge	r2, #0
   165d8:	bgt	16618 <__assert_fail@plt+0x5370>
   165dc:	ldr	r0, [r7, #8]
   165e0:	lsl	r2, r2, #2
   165e4:	add	r1, r0, r1, lsl #2
   165e8:	bl	11038 <memcpy@plt>
   165ec:	mov	r3, #0
   165f0:	mov	r0, r3
   165f4:	ldrd	r4, [sp]
   165f8:	ldrd	r6, [sp, #8]
   165fc:	ldr	r8, [sp, #16]
   16600:	add	sp, sp, #20
   16604:	pop	{pc}		; (ldr pc, [sp], #4)
   16608:	add	lr, r0, r2
   1660c:	str	ip, [r3, lr, lsl #2]
   16610:	subs	r0, r0, #1
   16614:	bmi	165dc <__assert_fail@plt+0x5334>
   16618:	ldr	r3, [r7, #8]
   1661c:	ldr	lr, [r3, r4, lsl #2]
   16620:	ldr	ip, [r3, r0, lsl #2]
   16624:	cmp	lr, ip
   16628:	ble	16608 <__assert_fail@plt+0x5360>
   1662c:	sub	r4, r4, #1
   16630:	add	ip, r0, r2
   16634:	str	lr, [r3, ip, lsl #2]
   16638:	subs	r2, r2, #1
   1663c:	bne	16618 <__assert_fail@plt+0x5370>
   16640:	b	165dc <__assert_fail@plt+0x5334>
   16644:	mov	r3, ip
   16648:	mov	r0, r3
   1664c:	bx	lr
   16650:	mov	r3, #12
   16654:	b	165f0 <__assert_fail@plt+0x5348>
   16658:	ldr	r3, [r1, #4]
   1665c:	str	r3, [r0, #4]
   16660:	cmp	r3, #0
   16664:	ble	166c8 <__assert_fail@plt+0x5420>
   16668:	strd	r4, [sp, #-16]!
   1666c:	str	r6, [sp, #8]
   16670:	str	lr, [sp, #12]
   16674:	mov	r5, r1
   16678:	mov	r4, r0
   1667c:	str	r3, [r0]
   16680:	lsl	r0, r3, #2
   16684:	bl	23d48 <__assert_fail@plt+0x12aa0>
   16688:	str	r0, [r4, #8]
   1668c:	cmp	r0, #0
   16690:	moveq	r3, #0
   16694:	streq	r3, [r4, #4]
   16698:	streq	r3, [r4]
   1669c:	moveq	r0, #12
   166a0:	beq	166b8 <__assert_fail@plt+0x5410>
   166a4:	ldr	r2, [r5, #4]
   166a8:	lsl	r2, r2, #2
   166ac:	ldr	r1, [r5, #8]
   166b0:	bl	11038 <memcpy@plt>
   166b4:	mov	r0, #0
   166b8:	ldrd	r4, [sp]
   166bc:	ldr	r6, [sp, #8]
   166c0:	add	sp, sp, #12
   166c4:	pop	{pc}		; (ldr pc, [sp], #4)
   166c8:	mov	r3, #0
   166cc:	str	r3, [r0]
   166d0:	str	r3, [r0, #4]
   166d4:	str	r3, [r0, #8]
   166d8:	mov	r0, r3
   166dc:	bx	lr
   166e0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   166e4:	strd	r6, [sp, #8]
   166e8:	strd	r8, [sp, #16]
   166ec:	str	sl, [sp, #24]
   166f0:	str	lr, [sp, #28]
   166f4:	mov	r5, r0
   166f8:	mov	r4, r2
   166fc:	subs	r6, r1, #0
   16700:	beq	1671c <__assert_fail@plt+0x5474>
   16704:	ldr	r0, [r6, #4]
   16708:	cmp	r2, #0
   1670c:	cmpne	r0, #0
   16710:	bgt	16758 <__assert_fail@plt+0x54b0>
   16714:	cmp	r0, #0
   16718:	bgt	16764 <__assert_fail@plt+0x54bc>
   1671c:	cmp	r4, #0
   16720:	beq	16730 <__assert_fail@plt+0x5488>
   16724:	ldr	r3, [r4, #4]
   16728:	cmp	r3, #0
   1672c:	bgt	167a0 <__assert_fail@plt+0x54f8>
   16730:	mov	r0, #0
   16734:	str	r0, [r5]
   16738:	str	r0, [r5, #4]
   1673c:	str	r0, [r5, #8]
   16740:	ldrd	r4, [sp]
   16744:	ldrd	r6, [sp, #8]
   16748:	ldrd	r8, [sp, #16]
   1674c:	ldr	sl, [sp, #24]
   16750:	add	sp, sp, #28
   16754:	pop	{pc}		; (ldr pc, [sp], #4)
   16758:	ldr	r3, [r2, #4]
   1675c:	cmp	r3, #0
   16760:	bgt	16774 <__assert_fail@plt+0x54cc>
   16764:	mov	r1, r6
   16768:	mov	r0, r5
   1676c:	bl	16658 <__assert_fail@plt+0x53b0>
   16770:	b	16740 <__assert_fail@plt+0x5498>
   16774:	add	r0, r0, r3
   16778:	str	r0, [r5]
   1677c:	lsl	r0, r0, #2
   16780:	bl	23d48 <__assert_fail@plt+0x12aa0>
   16784:	str	r0, [r5, #8]
   16788:	cmp	r0, #0
   1678c:	beq	1687c <__assert_fail@plt+0x55d4>
   16790:	mov	r3, #0
   16794:	mov	r8, r3
   16798:	mov	r7, r3
   1679c:	b	167c0 <__assert_fail@plt+0x5518>
   167a0:	mov	r1, r4
   167a4:	mov	r0, r5
   167a8:	bl	16658 <__assert_fail@plt+0x53b0>
   167ac:	b	16740 <__assert_fail@plt+0x5498>
   167b0:	add	r8, r8, #1
   167b4:	ldr	r2, [r5, #8]
   167b8:	str	r1, [r2, r3, lsl #2]
   167bc:	add	r3, r3, #1
   167c0:	mov	r9, r3
   167c4:	ldr	r2, [r6, #4]
   167c8:	cmp	r2, r7
   167cc:	ble	16838 <__assert_fail@plt+0x5590>
   167d0:	ldr	r1, [r4, #4]
   167d4:	cmp	r1, r8
   167d8:	ble	1680c <__assert_fail@plt+0x5564>
   167dc:	ldr	r2, [r6, #8]
   167e0:	ldr	r2, [r2, r7, lsl #2]
   167e4:	ldr	r1, [r4, #8]
   167e8:	ldr	r1, [r1, r8, lsl #2]
   167ec:	cmp	r2, r1
   167f0:	bgt	167b0 <__assert_fail@plt+0x5508>
   167f4:	cmp	r2, r1
   167f8:	addeq	r8, r8, #1
   167fc:	add	r7, r7, #1
   16800:	ldr	r1, [r5, #8]
   16804:	str	r2, [r1, r3, lsl #2]
   16808:	b	167bc <__assert_fail@plt+0x5514>
   1680c:	ldr	r0, [r5, #8]
   16810:	sub	r2, r2, r7
   16814:	ldr	r1, [r6, #8]
   16818:	lsl	r2, r2, #2
   1681c:	add	r1, r1, r7, lsl #2
   16820:	add	r0, r0, r3, lsl #2
   16824:	bl	11038 <memcpy@plt>
   16828:	ldr	r3, [r6, #4]
   1682c:	sub	r7, r3, r7
   16830:	add	r9, r9, r7
   16834:	b	16844 <__assert_fail@plt+0x559c>
   16838:	ldr	r2, [r4, #4]
   1683c:	cmp	r2, r8
   16840:	bgt	16850 <__assert_fail@plt+0x55a8>
   16844:	str	r9, [r5, #4]
   16848:	mov	r0, #0
   1684c:	b	16740 <__assert_fail@plt+0x5498>
   16850:	ldr	r0, [r5, #8]
   16854:	sub	r2, r2, r8
   16858:	ldr	r1, [r4, #8]
   1685c:	lsl	r2, r2, #2
   16860:	add	r1, r1, r8, lsl #2
   16864:	add	r0, r0, r3, lsl #2
   16868:	bl	11038 <memcpy@plt>
   1686c:	ldr	r3, [r4, #4]
   16870:	sub	r8, r3, r8
   16874:	add	r9, r9, r8
   16878:	b	16844 <__assert_fail@plt+0x559c>
   1687c:	mov	r0, #12
   16880:	b	16740 <__assert_fail@plt+0x5498>
   16884:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16888:	strd	r6, [sp, #8]
   1688c:	strd	r8, [sp, #16]
   16890:	strd	sl, [sp, #24]
   16894:	str	lr, [sp, #32]
   16898:	sub	sp, sp, #92	; 0x5c
   1689c:	mov	r5, r0
   168a0:	ldr	r4, [r0, #28]
   168a4:	ldr	r6, [r0, #36]	; 0x24
   168a8:	ldr	r3, [r0, #48]	; 0x30
   168ac:	cmp	r6, r3
   168b0:	movge	r6, r3
   168b4:	ldrb	r3, [r0, #74]	; 0x4a
   168b8:	cmp	r3, #0
   168bc:	bne	168cc <__assert_fail@plt+0x5624>
   168c0:	ldr	r3, [r0, #64]	; 0x40
   168c4:	cmp	r3, #0
   168c8:	beq	16900 <__assert_fail@plt+0x5658>
   168cc:	ldr	r7, [r5, #32]
   168d0:	cmp	r4, r6
   168d4:	blt	16a2c <__assert_fail@plt+0x5784>
   168d8:	str	r4, [r5, #28]
   168dc:	str	r7, [r5, #32]
   168e0:	mov	r0, #0
   168e4:	add	sp, sp, #92	; 0x5c
   168e8:	ldrd	r4, [sp]
   168ec:	ldrd	r6, [sp, #8]
   168f0:	ldrd	r8, [sp, #16]
   168f4:	ldrd	sl, [sp, #24]
   168f8:	add	sp, sp, #32
   168fc:	pop	{pc}		; (ldr pc, [sp], #4)
   16900:	ldrb	r3, [r0, #76]	; 0x4c
   16904:	cmp	r3, #0
   16908:	bne	168cc <__assert_fail@plt+0x5624>
   1690c:	cmp	r4, r6
   16910:	bge	16b8c <__assert_fail@plt+0x58e4>
   16914:	add	r3, r0, #16
   16918:	str	r3, [sp, #4]
   1691c:	mvn	r7, #0
   16920:	b	169d8 <__assert_fail@plt+0x5730>
   16924:	ldr	r0, [sp, #4]
   16928:	ldrd	r2, [r0]
   1692c:	strd	r2, [sp, #80]	; 0x50
   16930:	mov	r9, r4
   16934:	add	r1, r8, r4
   16938:	mov	r3, r0
   1693c:	sub	r2, r6, r4
   16940:	add	r1, sl, r1
   16944:	add	r0, sp, #12
   16948:	bl	23fe4 <__assert_fail@plt+0x12d3c>
   1694c:	mov	r8, r0
   16950:	sub	r3, r0, #1
   16954:	cmn	r3, #4
   16958:	bhi	16b28 <__assert_fail@plt+0x5880>
   1695c:	ldr	sl, [sp, #12]
   16960:	mov	r0, sl
   16964:	bl	11284 <towupper@plt>
   16968:	mov	fp, r0
   1696c:	cmp	sl, r0
   16970:	beq	16b04 <__assert_fail@plt+0x585c>
   16974:	add	r2, sp, #80	; 0x50
   16978:	mov	r1, r0
   1697c:	add	r0, sp, #16
   16980:	bl	10fc0 <wcrtomb@plt>
   16984:	cmp	r8, r0
   16988:	bne	16a28 <__assert_fail@plt+0x5780>
   1698c:	ldr	r0, [r5, #4]
   16990:	mov	r2, r8
   16994:	add	r1, sp, #16
   16998:	add	r0, r0, r4
   1699c:	bl	11038 <memcpy@plt>
   169a0:	add	r4, r4, #1
   169a4:	ldr	r3, [r5, #8]
   169a8:	str	fp, [r3, r9, lsl #2]
   169ac:	add	r9, r9, r8
   169b0:	cmp	r4, r9
   169b4:	bge	169d0 <__assert_fail@plt+0x5728>
   169b8:	ldr	r3, [r5, #8]
   169bc:	str	r7, [r3, r4, lsl #2]
   169c0:	add	r4, r4, #1
   169c4:	cmp	r9, r4
   169c8:	bne	169b8 <__assert_fail@plt+0x5710>
   169cc:	mov	r4, r9
   169d0:	cmp	r6, r4
   169d4:	ble	16b8c <__assert_fail@plt+0x58e4>
   169d8:	ldr	sl, [r5]
   169dc:	ldr	r8, [r5, #24]
   169e0:	add	r3, sl, r8
   169e4:	ldrb	fp, [r3, r4]
   169e8:	bics	r3, fp, #127	; 0x7f
   169ec:	bne	16924 <__assert_fail@plt+0x567c>
   169f0:	ldr	r0, [sp, #4]
   169f4:	bl	1105c <mbsinit@plt>
   169f8:	cmp	r0, #0
   169fc:	beq	16924 <__assert_fail@plt+0x567c>
   16a00:	mov	r0, fp
   16a04:	bl	11284 <towupper@plt>
   16a08:	bics	r3, r0, #127	; 0x7f
   16a0c:	bne	16924 <__assert_fail@plt+0x567c>
   16a10:	ldr	r3, [r5, #4]
   16a14:	strb	r0, [r3, r4]
   16a18:	ldr	r3, [r5, #8]
   16a1c:	str	r0, [r3, r4, lsl #2]
   16a20:	add	r4, r4, #1
   16a24:	b	169d0 <__assert_fail@plt+0x5728>
   16a28:	mov	r7, r4
   16a2c:	sub	r2, r6, r4
   16a30:	ldrd	r0, [r5, #16]
   16a34:	strd	r0, [sp, #80]	; 0x50
   16a38:	ldr	r3, [r5, #64]	; 0x40
   16a3c:	cmp	r3, #0
   16a40:	bne	16b9c <__assert_fail@plt+0x58f4>
   16a44:	ldr	r3, [r5, #24]
   16a48:	add	r3, r7, r3
   16a4c:	ldr	r1, [r5]
   16a50:	add	r3, r1, r3
   16a54:	str	r3, [sp, #4]
   16a58:	add	r3, r5, #16
   16a5c:	ldr	r1, [sp, #4]
   16a60:	add	r0, sp, #12
   16a64:	bl	23fe4 <__assert_fail@plt+0x12d3c>
   16a68:	mov	r8, r0
   16a6c:	sub	fp, r0, #1
   16a70:	cmn	fp, #4
   16a74:	bhi	16d84 <__assert_fail@plt+0x5adc>
   16a78:	ldr	sl, [sp, #12]
   16a7c:	mov	r0, sl
   16a80:	bl	11284 <towupper@plt>
   16a84:	mov	r9, r0
   16a88:	cmp	sl, r0
   16a8c:	beq	16d44 <__assert_fail@plt+0x5a9c>
   16a90:	add	r2, sp, #80	; 0x50
   16a94:	mov	r1, r0
   16a98:	add	r0, sp, #16
   16a9c:	bl	10fc0 <wcrtomb@plt>
   16aa0:	mov	sl, r0
   16aa4:	cmp	r8, r0
   16aa8:	bne	16bfc <__assert_fail@plt+0x5954>
   16aac:	ldr	r0, [r5, #4]
   16ab0:	mov	r2, sl
   16ab4:	add	r1, sp, #16
   16ab8:	add	r0, r0, r4
   16abc:	bl	11038 <memcpy@plt>
   16ac0:	ldrb	r3, [r5, #76]	; 0x4c
   16ac4:	cmp	r3, #0
   16ac8:	bne	16d5c <__assert_fail@plt+0x5ab4>
   16acc:	add	r7, r7, r8
   16ad0:	add	r3, r4, #1
   16ad4:	ldr	r2, [r5, #8]
   16ad8:	str	r9, [r2, r4, lsl #2]
   16adc:	add	r4, r4, r8
   16ae0:	cmp	r3, r4
   16ae4:	bge	16e00 <__assert_fail@plt+0x5b58>
   16ae8:	mvn	r1, #0
   16aec:	ldr	r2, [r5, #8]
   16af0:	str	r1, [r2, r3, lsl #2]
   16af4:	add	r3, r3, #1
   16af8:	cmp	r4, r3
   16afc:	bne	16aec <__assert_fail@plt+0x5844>
   16b00:	b	168d0 <__assert_fail@plt+0x5628>
   16b04:	ldr	r0, [r5, #4]
   16b08:	ldr	r3, [r5, #24]
   16b0c:	add	r3, r4, r3
   16b10:	ldr	r1, [r5]
   16b14:	mov	r2, r8
   16b18:	add	r1, r1, r3
   16b1c:	add	r0, r0, r4
   16b20:	bl	11038 <memcpy@plt>
   16b24:	b	169a0 <__assert_fail@plt+0x56f8>
   16b28:	cmn	r3, #3
   16b2c:	bhi	16b58 <__assert_fail@plt+0x58b0>
   16b30:	ldr	r2, [r5, #36]	; 0x24
   16b34:	ldr	r3, [r5, #48]	; 0x30
   16b38:	cmp	r2, r3
   16b3c:	blt	16b84 <__assert_fail@plt+0x58dc>
   16b40:	ldr	r3, [r5, #4]
   16b44:	strb	fp, [r3, r4]
   16b48:	add	r4, r4, #1
   16b4c:	ldr	r3, [r5, #8]
   16b50:	str	fp, [r3, r9, lsl #2]
   16b54:	b	169d0 <__assert_fail@plt+0x5728>
   16b58:	ldr	r3, [r5, #4]
   16b5c:	strb	fp, [r3, r4]
   16b60:	add	r4, r4, #1
   16b64:	ldr	r3, [r5, #8]
   16b68:	str	fp, [r3, r9, lsl #2]
   16b6c:	cmn	r0, #1
   16b70:	bne	169d0 <__assert_fail@plt+0x5728>
   16b74:	ldrd	r2, [sp, #80]	; 0x50
   16b78:	ldr	r1, [sp, #4]
   16b7c:	strd	r2, [r1]
   16b80:	b	169d0 <__assert_fail@plt+0x5728>
   16b84:	ldrd	r2, [sp, #80]	; 0x50
   16b88:	strd	r2, [r5, #16]
   16b8c:	str	r4, [r5, #28]
   16b90:	str	r4, [r5, #32]
   16b94:	mov	r0, #0
   16b98:	b	168e4 <__assert_fail@plt+0x563c>
   16b9c:	ldr	lr, [r5, #80]	; 0x50
   16ba0:	cmp	r2, #0
   16ba4:	cmpgt	lr, #0
   16ba8:	ble	16bf0 <__assert_fail@plt+0x5948>
   16bac:	ldr	r8, [r5]
   16bb0:	ldr	ip, [r5, #24]
   16bb4:	add	ip, r7, ip
   16bb8:	add	r1, r8, ip
   16bbc:	add	r0, sp, #16
   16bc0:	cmp	lr, r2
   16bc4:	movge	lr, r2
   16bc8:	mov	r8, r1
   16bcc:	ldrb	ip, [r1], #1
   16bd0:	ldrb	ip, [r3, ip]
   16bd4:	strb	ip, [r0], #1
   16bd8:	sub	ip, r1, r8
   16bdc:	cmp	lr, ip
   16be0:	bgt	16bcc <__assert_fail@plt+0x5924>
   16be4:	add	r3, sp, #16
   16be8:	str	r3, [sp, #4]
   16bec:	b	16a58 <__assert_fail@plt+0x57b0>
   16bf0:	add	r3, sp, #16
   16bf4:	str	r3, [sp, #4]
   16bf8:	b	16a58 <__assert_fail@plt+0x57b0>
   16bfc:	cmn	r0, #1
   16c00:	beq	16d2c <__assert_fail@plt+0x5a84>
   16c04:	mov	r6, r4
   16c08:	add	r3, r4, r0
   16c0c:	str	r3, [sp, #4]
   16c10:	ldr	r0, [r5, #36]	; 0x24
   16c14:	cmp	r3, r0
   16c18:	bls	16c28 <__assert_fail@plt+0x5980>
   16c1c:	ldrd	r2, [sp, #80]	; 0x50
   16c20:	strd	r2, [r5, #16]
   16c24:	b	168d8 <__assert_fail@plt+0x5630>
   16c28:	ldr	r3, [r5, #12]
   16c2c:	cmp	r3, #0
   16c30:	beq	16d10 <__assert_fail@plt+0x5a68>
   16c34:	ldrb	r3, [r5, #76]	; 0x4c
   16c38:	cmp	r3, #0
   16c3c:	bne	16c64 <__assert_fail@plt+0x59bc>
   16c40:	cmp	r6, #0
   16c44:	beq	16c5c <__assert_fail@plt+0x59b4>
   16c48:	ldr	r2, [r5, #12]
   16c4c:	str	r3, [r2, r3, lsl #2]
   16c50:	add	r3, r3, #1
   16c54:	cmp	r6, r3
   16c58:	bne	16c48 <__assert_fail@plt+0x59a0>
   16c5c:	mov	r3, #1
   16c60:	strb	r3, [r5, #76]	; 0x4c
   16c64:	ldr	r0, [r5, #4]
   16c68:	mov	r2, sl
   16c6c:	add	r1, sp, #16
   16c70:	add	r0, r0, r6
   16c74:	bl	11038 <memcpy@plt>
   16c78:	lsl	r3, r6, #2
   16c7c:	ldr	r2, [r5, #8]
   16c80:	str	r9, [r2, r6, lsl #2]
   16c84:	ldr	r2, [r5, #12]
   16c88:	str	r7, [r2, r6, lsl #2]
   16c8c:	cmp	sl, #1
   16c90:	bls	16cd0 <__assert_fail@plt+0x5a28>
   16c94:	add	r3, r3, #4
   16c98:	mov	r2, #1
   16c9c:	mvn	r0, #0
   16ca0:	cmp	r2, r8
   16ca4:	movcc	r1, r2
   16ca8:	movcs	r1, fp
   16cac:	ldr	ip, [r5, #12]
   16cb0:	add	r1, r7, r1
   16cb4:	str	r1, [ip, r3]
   16cb8:	ldr	r1, [r5, #8]
   16cbc:	str	r0, [r1, r3]
   16cc0:	add	r2, r2, #1
   16cc4:	add	r3, r3, #4
   16cc8:	cmp	r2, sl
   16ccc:	bne	16ca0 <__assert_fail@plt+0x59f8>
   16cd0:	sub	sl, sl, r8
   16cd4:	ldr	r6, [r5, #48]	; 0x30
   16cd8:	add	r6, sl, r6
   16cdc:	str	r6, [r5, #48]	; 0x30
   16ce0:	ldr	r3, [r5, #52]	; 0x34
   16ce4:	cmp	r3, r7
   16ce8:	ble	16cf8 <__assert_fail@plt+0x5a50>
   16cec:	ldr	r3, [r5, #56]	; 0x38
   16cf0:	add	sl, r3, sl
   16cf4:	str	sl, [r5, #56]	; 0x38
   16cf8:	ldr	r3, [r5, #36]	; 0x24
   16cfc:	cmp	r6, r3
   16d00:	movge	r6, r3
   16d04:	ldr	r4, [sp, #4]
   16d08:	add	r7, r7, r8
   16d0c:	b	168d0 <__assert_fail@plt+0x5628>
   16d10:	lsl	r0, r0, #2
   16d14:	bl	23d48 <__assert_fail@plt+0x12aa0>
   16d18:	str	r0, [r5, #12]
   16d1c:	cmp	r0, #0
   16d20:	moveq	r0, #12
   16d24:	bne	16c34 <__assert_fail@plt+0x598c>
   16d28:	b	168e4 <__assert_fail@plt+0x563c>
   16d2c:	ldr	r0, [r5, #4]
   16d30:	mov	r2, r8
   16d34:	ldr	r1, [sp, #4]
   16d38:	add	r0, r0, r4
   16d3c:	bl	11038 <memcpy@plt>
   16d40:	b	16ac0 <__assert_fail@plt+0x5818>
   16d44:	ldr	r0, [r5, #4]
   16d48:	mov	r2, r8
   16d4c:	ldr	r1, [sp, #4]
   16d50:	add	r0, r0, r4
   16d54:	bl	11038 <memcpy@plt>
   16d58:	b	16ac0 <__assert_fail@plt+0x5818>
   16d5c:	lsl	r2, r4, #2
   16d60:	mov	r3, r7
   16d64:	add	r0, r8, r7
   16d68:	ldr	r1, [r5, #12]
   16d6c:	str	r3, [r1, r2]
   16d70:	add	r2, r2, #4
   16d74:	add	r3, r3, #1
   16d78:	cmp	r3, r0
   16d7c:	bne	16d68 <__assert_fail@plt+0x5ac0>
   16d80:	b	16acc <__assert_fail@plt+0x5824>
   16d84:	cmn	fp, #3
   16d88:	bhi	16d9c <__assert_fail@plt+0x5af4>
   16d8c:	ldr	r2, [r5, #36]	; 0x24
   16d90:	ldr	r3, [r5, #48]	; 0x30
   16d94:	cmp	r2, r3
   16d98:	blt	16df4 <__assert_fail@plt+0x5b4c>
   16d9c:	ldr	r3, [r5]
   16da0:	ldr	r2, [r5, #24]
   16da4:	add	r3, r3, r7
   16da8:	ldrb	r3, [r3, r2]
   16dac:	ldr	r2, [r5, #64]	; 0x40
   16db0:	cmp	r2, #0
   16db4:	ldrbne	r3, [r2, r3]
   16db8:	mov	r1, r4
   16dbc:	ldr	r2, [r5, #4]
   16dc0:	strb	r3, [r2, r4]
   16dc4:	ldrb	r2, [r5, #76]	; 0x4c
   16dc8:	cmp	r2, #0
   16dcc:	ldrne	r2, [r5, #12]
   16dd0:	strne	r7, [r2, r4, lsl #2]
   16dd4:	add	r7, r7, #1
   16dd8:	add	r4, r4, #1
   16ddc:	ldr	r2, [r5, #8]
   16de0:	str	r3, [r2, r1, lsl #2]
   16de4:	cmn	r8, #1
   16de8:	ldrdeq	r2, [sp, #80]	; 0x50
   16dec:	strdeq	r2, [r5, #16]
   16df0:	b	168d0 <__assert_fail@plt+0x5628>
   16df4:	ldrd	r2, [sp, #80]	; 0x50
   16df8:	strd	r2, [r5, #16]
   16dfc:	b	168d8 <__assert_fail@plt+0x5630>
   16e00:	mov	r4, r3
   16e04:	b	168d0 <__assert_fail@plt+0x5628>
   16e08:	strd	r4, [sp, #-16]!
   16e0c:	str	r6, [sp, #8]
   16e10:	str	lr, [sp, #12]
   16e14:	mov	r5, r0
   16e18:	ldr	r6, [r0, #36]	; 0x24
   16e1c:	ldr	r3, [r0, #48]	; 0x30
   16e20:	cmp	r6, r3
   16e24:	movge	r6, r3
   16e28:	ldr	r4, [r0, #28]
   16e2c:	cmp	r6, r4
   16e30:	ble	16e88 <__assert_fail@plt+0x5be0>
   16e34:	bl	1114c <__ctype_toupper_loc@plt>
   16e38:	ldr	r3, [r5]
   16e3c:	ldr	r2, [r5, #24]
   16e40:	add	r3, r3, r4
   16e44:	ldrb	r3, [r3, r2]
   16e48:	ldr	r2, [r5, #64]	; 0x40
   16e4c:	cmp	r2, #0
   16e50:	ldrbne	r3, [r2, r3]
   16e54:	ldr	r2, [r5, #4]
   16e58:	ldr	r1, [r0]
   16e5c:	ldr	r3, [r1, r3, lsl #2]
   16e60:	strb	r3, [r2, r4]
   16e64:	add	r4, r4, #1
   16e68:	cmp	r6, r4
   16e6c:	bne	16e38 <__assert_fail@plt+0x5b90>
   16e70:	str	r6, [r5, #28]
   16e74:	str	r6, [r5, #32]
   16e78:	ldrd	r4, [sp]
   16e7c:	ldr	r6, [sp, #8]
   16e80:	add	sp, sp, #12
   16e84:	pop	{pc}		; (ldr pc, [sp], #4)
   16e88:	mov	r6, r4
   16e8c:	b	16e70 <__assert_fail@plt+0x5bc8>
   16e90:	strd	r4, [sp, #-16]!
   16e94:	str	r6, [sp, #8]
   16e98:	str	lr, [sp, #12]
   16e9c:	ldr	r3, [r0, #36]	; 0x24
   16ea0:	cmn	r3, #-536870910	; 0xe0000002
   16ea4:	bhi	16f6c <__assert_fail@plt+0x5cc4>
   16ea8:	mov	r4, r0
   16eac:	lsl	r3, r3, #1
   16eb0:	ldr	r2, [r0, #48]	; 0x30
   16eb4:	cmp	r3, r2
   16eb8:	movge	r3, r2
   16ebc:	cmp	r3, r1
   16ec0:	movge	r1, r3
   16ec4:	bl	15c20 <__assert_fail@plt+0x4978>
   16ec8:	subs	r5, r0, #0
   16ecc:	bne	16f1c <__assert_fail@plt+0x5c74>
   16ed0:	ldr	r0, [r4, #100]	; 0x64
   16ed4:	cmp	r0, #0
   16ed8:	beq	16ef8 <__assert_fail@plt+0x5c50>
   16edc:	ldr	r1, [r4, #36]	; 0x24
   16ee0:	add	r1, r1, #1
   16ee4:	lsl	r1, r1, #2
   16ee8:	bl	23d84 <__assert_fail@plt+0x12adc>
   16eec:	cmp	r0, #0
   16ef0:	beq	16f74 <__assert_fail@plt+0x5ccc>
   16ef4:	str	r0, [r4, #100]	; 0x64
   16ef8:	ldrb	r3, [r4, #72]	; 0x48
   16efc:	cmp	r3, #0
   16f00:	beq	16f3c <__assert_fail@plt+0x5c94>
   16f04:	ldr	r3, [r4, #80]	; 0x50
   16f08:	cmp	r3, #1
   16f0c:	ble	16f30 <__assert_fail@plt+0x5c88>
   16f10:	mov	r0, r4
   16f14:	bl	16884 <__assert_fail@plt+0x55dc>
   16f18:	mov	r5, r0
   16f1c:	mov	r0, r5
   16f20:	ldrd	r4, [sp]
   16f24:	ldr	r6, [sp, #8]
   16f28:	add	sp, sp, #12
   16f2c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f30:	mov	r0, r4
   16f34:	bl	16e08 <__assert_fail@plt+0x5b60>
   16f38:	b	16f1c <__assert_fail@plt+0x5c74>
   16f3c:	ldr	r3, [r4, #80]	; 0x50
   16f40:	cmp	r3, #1
   16f44:	bgt	16f60 <__assert_fail@plt+0x5cb8>
   16f48:	ldr	r3, [r4, #64]	; 0x40
   16f4c:	cmp	r3, #0
   16f50:	beq	16f1c <__assert_fail@plt+0x5c74>
   16f54:	mov	r0, r4
   16f58:	bl	14fa8 <__assert_fail@plt+0x3d00>
   16f5c:	b	16f1c <__assert_fail@plt+0x5c74>
   16f60:	mov	r0, r4
   16f64:	bl	162ec <__assert_fail@plt+0x5044>
   16f68:	b	16f1c <__assert_fail@plt+0x5c74>
   16f6c:	mov	r5, #12
   16f70:	b	16f1c <__assert_fail@plt+0x5c74>
   16f74:	mov	r5, #12
   16f78:	b	16f1c <__assert_fail@plt+0x5c74>
   16f7c:	ldr	r3, [r1, #40]	; 0x28
   16f80:	ldr	ip, [r1, #56]	; 0x38
   16f84:	cmp	ip, r3
   16f88:	ble	17220 <__assert_fail@plt+0x5f78>
   16f8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16f90:	strd	r6, [sp, #8]
   16f94:	str	r8, [sp, #16]
   16f98:	str	lr, [sp, #20]
   16f9c:	sub	sp, sp, #8
   16fa0:	ldr	ip, [r1, #4]
   16fa4:	ldrb	r6, [ip, r3]
   16fa8:	strb	r6, [r0]
   16fac:	ldrb	r3, [r0, #6]
   16fb0:	and	r3, r3, #191	; 0xbf
   16fb4:	bfc	r3, #5, #1
   16fb8:	strb	r3, [r0, #6]
   16fbc:	ldr	r3, [r1, #80]	; 0x50
   16fc0:	cmp	r3, #1
   16fc4:	ble	16fe8 <__assert_fail@plt+0x5d40>
   16fc8:	ldr	ip, [r1, #40]	; 0x28
   16fcc:	ldr	lr, [r1, #28]
   16fd0:	cmp	ip, lr
   16fd4:	beq	16fe8 <__assert_fail@plt+0x5d40>
   16fd8:	ldr	lr, [r1, #8]
   16fdc:	ldr	ip, [lr, ip, lsl #2]
   16fe0:	cmn	ip, #1
   16fe4:	beq	17230 <__assert_fail@plt+0x5f88>
   16fe8:	mov	r7, r2
   16fec:	mov	r4, r1
   16ff0:	mov	r5, r0
   16ff4:	cmp	r6, #92	; 0x5c
   16ff8:	beq	1724c <__assert_fail@plt+0x5fa4>
   16ffc:	mov	r3, #1
   17000:	strb	r3, [r0, #4]
   17004:	ldr	r3, [r1, #80]	; 0x50
   17008:	cmp	r3, #1
   1700c:	ble	17730 <__assert_fail@plt+0x6488>
   17010:	ldr	r1, [r1, #40]	; 0x28
   17014:	mov	r0, r4
   17018:	bl	14f8c <__assert_fail@plt+0x3ce4>
   1701c:	mov	r8, r0
   17020:	bl	111ac <iswalnum@plt>
   17024:	adds	r0, r0, #0
   17028:	movne	r0, #1
   1702c:	cmp	r8, #95	; 0x5f
   17030:	orreq	r0, r0, #1
   17034:	ldrb	r3, [r5, #6]
   17038:	bfi	r3, r0, #6, #1
   1703c:	strb	r3, [r5, #6]
   17040:	sub	r3, r6, #10
   17044:	cmp	r3, #115	; 0x73
   17048:	ldrls	pc, [pc, r3, lsl #2]
   1704c:	b	17948 <__assert_fail@plt+0x66a0>
   17050:	andeq	r7, r1, ip, asr r7
   17054:	andeq	r7, r1, r8, asr #18
   17058:	andeq	r7, r1, r8, asr #18
   1705c:	andeq	r7, r1, r8, asr #18
   17060:	andeq	r7, r1, r8, asr #18
   17064:	andeq	r7, r1, r8, asr #18
   17068:	andeq	r7, r1, r8, asr #18
   1706c:	andeq	r7, r1, r8, asr #18
   17070:	andeq	r7, r1, r8, asr #18
   17074:	andeq	r7, r1, r8, asr #18
   17078:	andeq	r7, r1, r8, asr #18
   1707c:	andeq	r7, r1, r8, asr #18
   17080:	andeq	r7, r1, r8, asr #18
   17084:	andeq	r7, r1, r8, asr #18
   17088:	andeq	r7, r1, r8, asr #18
   1708c:	andeq	r7, r1, r8, asr #18
   17090:	andeq	r7, r1, r8, asr #18
   17094:	andeq	r7, r1, r8, asr #18
   17098:	andeq	r7, r1, r8, asr #18
   1709c:	andeq	r7, r1, r8, asr #18
   170a0:	andeq	r7, r1, r8, asr #18
   170a4:	andeq	r7, r1, r8, asr #18
   170a8:	andeq	r7, r1, r8, asr #18
   170ac:	andeq	r7, r1, r8, asr #18
   170b0:	andeq	r7, r1, r8, asr #18
   170b4:	andeq	r7, r1, r8, asr #18
   170b8:	ldrdeq	r7, [r1], -r0
   170bc:	andeq	r7, r1, r8, asr #18
   170c0:	andeq	r7, r1, r8, asr #18
   170c4:	andeq	r7, r1, r8, asr #18
   170c8:	andeq	r7, r1, ip, lsl r8
   170cc:	andeq	r7, r1, r8, lsr r8
   170d0:	muleq	r1, r4, r7
   170d4:	andeq	r7, r1, r4, lsr #15
   170d8:	andeq	r7, r1, r8, asr #18
   170dc:	andeq	r7, r1, r8, asr #18
   170e0:	andeq	r7, r1, r4, ror #16
   170e4:	andeq	r7, r1, r8, asr #18
   170e8:	andeq	r7, r1, r8, asr #18
   170ec:	andeq	r7, r1, r8, asr #18
   170f0:	andeq	r7, r1, r8, asr #18
   170f4:	andeq	r7, r1, r8, asr #18
   170f8:	andeq	r7, r1, r8, asr #18
   170fc:	andeq	r7, r1, r8, asr #18
   17100:	andeq	r7, r1, r8, asr #18
   17104:	andeq	r7, r1, r8, asr #18
   17108:	andeq	r7, r1, r8, asr #18
   1710c:	andeq	r7, r1, r8, asr #18
   17110:	andeq	r7, r1, r8, asr #18
   17114:	andeq	r7, r1, r8, asr #18
   17118:	andeq	r7, r1, r8, asr #18
   1711c:	andeq	r7, r1, r8, asr #18
   17120:	andeq	r7, r1, r8, asr #18
   17124:	andeq	r7, r1, r4, asr #15
   17128:	andeq	r7, r1, r8, asr #18
   1712c:	andeq	r7, r1, r8, asr #18
   17130:	andeq	r7, r1, r8, asr #18
   17134:	andeq	r7, r1, r8, asr #18
   17138:	andeq	r7, r1, r8, asr #18
   1713c:	andeq	r7, r1, r8, asr #18
   17140:	andeq	r7, r1, r8, asr #18
   17144:	andeq	r7, r1, r8, asr #18
   17148:	andeq	r7, r1, r8, asr #18
   1714c:	andeq	r7, r1, r8, asr #18
   17150:	andeq	r7, r1, r8, asr #18
   17154:	andeq	r7, r1, r8, asr #18
   17158:	andeq	r7, r1, r8, asr #18
   1715c:	andeq	r7, r1, r8, asr #18
   17160:	andeq	r7, r1, r8, asr #18
   17164:	andeq	r7, r1, r8, asr #18
   17168:	andeq	r7, r1, r8, asr #18
   1716c:	andeq	r7, r1, r8, asr #18
   17170:	andeq	r7, r1, r8, asr #18
   17174:	andeq	r7, r1, r8, asr #18
   17178:	andeq	r7, r1, r8, asr #18
   1717c:	andeq	r7, r1, r8, asr #18
   17180:	andeq	r7, r1, r8, asr #18
   17184:	andeq	r7, r1, r8, asr #18
   17188:	andeq	r7, r1, r8, asr #18
   1718c:	andeq	r7, r1, r8, asr #18
   17190:	andeq	r7, r1, r8, asr #18
   17194:	andeq	r7, r1, r4, asr r8
   17198:	andeq	r7, r1, r8, asr #18
   1719c:	andeq	r7, r1, r8, asr #18
   171a0:	andeq	r7, r1, r4, ror r8
   171a4:	andeq	r7, r1, r8, asr #18
   171a8:	andeq	r7, r1, r8, asr #18
   171ac:	andeq	r7, r1, r8, asr #18
   171b0:	andeq	r7, r1, r8, asr #18
   171b4:	andeq	r7, r1, r8, asr #18
   171b8:	andeq	r7, r1, r8, asr #18
   171bc:	andeq	r7, r1, r8, asr #18
   171c0:	andeq	r7, r1, r8, asr #18
   171c4:	andeq	r7, r1, r8, asr #18
   171c8:	andeq	r7, r1, r8, asr #18
   171cc:	andeq	r7, r1, r8, asr #18
   171d0:	andeq	r7, r1, r8, asr #18
   171d4:	andeq	r7, r1, r8, asr #18
   171d8:	andeq	r7, r1, r8, asr #18
   171dc:	andeq	r7, r1, r8, asr #18
   171e0:	andeq	r7, r1, r8, asr #18
   171e4:	andeq	r7, r1, r8, asr #18
   171e8:	andeq	r7, r1, r8, asr #18
   171ec:	andeq	r7, r1, r8, asr #18
   171f0:	andeq	r7, r1, r8, asr #18
   171f4:	andeq	r7, r1, r8, asr #18
   171f8:	andeq	r7, r1, r8, asr #18
   171fc:	andeq	r7, r1, r8, asr #18
   17200:	andeq	r7, r1, r8, asr #18
   17204:	andeq	r7, r1, r8, asr #18
   17208:	andeq	r7, r1, r8, asr #18
   1720c:	andeq	r7, r1, r8, asr #18
   17210:	andeq	r7, r1, r8, asr #18
   17214:	andeq	r7, r1, r4, ror #15
   17218:	andeq	r7, r1, r8, ror r7
   1721c:	andeq	r7, r1, r0, lsl #16
   17220:	mov	r3, #2
   17224:	strb	r3, [r0, #4]
   17228:	mov	r0, #0
   1722c:	bx	lr
   17230:	mov	r3, #1
   17234:	strb	r3, [r0, #4]
   17238:	ldrb	r2, [r0, #6]
   1723c:	orr	r2, r2, #32
   17240:	strb	r2, [r0, #6]
   17244:	mov	r0, r3
   17248:	b	1726c <__assert_fail@plt+0x5fc4>
   1724c:	ldr	r1, [r1, #40]	; 0x28
   17250:	add	r2, r1, #1
   17254:	ldr	r0, [r4, #48]	; 0x30
   17258:	cmp	r2, r0
   1725c:	blt	17284 <__assert_fail@plt+0x5fdc>
   17260:	mov	r3, #36	; 0x24
   17264:	strb	r3, [r5, #4]
   17268:	mov	r0, #1
   1726c:	add	sp, sp, #8
   17270:	ldrd	r4, [sp]
   17274:	ldrd	r6, [sp, #8]
   17278:	ldr	r8, [sp, #16]
   1727c:	add	sp, sp, #20
   17280:	pop	{pc}		; (ldr pc, [sp], #4)
   17284:	ldrb	r0, [r4, #75]	; 0x4b
   17288:	cmp	r0, #0
   1728c:	bne	17450 <__assert_fail@plt+0x61a8>
   17290:	ldr	r3, [r4, #4]
   17294:	ldrb	r6, [r3, r2]
   17298:	strb	r6, [r5]
   1729c:	mov	r3, #1
   172a0:	strb	r3, [r5, #4]
   172a4:	ldr	r3, [r4, #80]	; 0x50
   172a8:	cmp	r3, #1
   172ac:	ble	174cc <__assert_fail@plt+0x6224>
   172b0:	ldr	r1, [r4, #40]	; 0x28
   172b4:	add	r1, r1, #1
   172b8:	mov	r0, r4
   172bc:	bl	14f8c <__assert_fail@plt+0x3ce4>
   172c0:	mov	r4, r0
   172c4:	bl	111ac <iswalnum@plt>
   172c8:	adds	r0, r0, #0
   172cc:	movne	r0, #1
   172d0:	cmp	r4, #95	; 0x5f
   172d4:	orreq	r0, r0, #1
   172d8:	ldrb	r3, [r5, #6]
   172dc:	bfi	r3, r0, #6, #1
   172e0:	strb	r3, [r5, #6]
   172e4:	sub	r3, r6, #39	; 0x27
   172e8:	cmp	r3, #86	; 0x56
   172ec:	ldrls	pc, [pc, r3, lsl #2]
   172f0:	b	17940 <__assert_fail@plt+0x6698>
   172f4:	andeq	r7, r1, ip, asr r6
   172f8:	andeq	r7, r1, r0, lsl #13
   172fc:	muleq	r1, ip, r6
   17300:	andeq	r7, r1, r0, asr #18
   17304:			; <UNDEFINED> instruction: 0x000176b8
   17308:	andeq	r7, r1, r0, asr #18
   1730c:	andeq	r7, r1, r0, asr #18
   17310:	andeq	r7, r1, r0, asr #18
   17314:	andeq	r7, r1, r0, asr #18
   17318:	andeq	r7, r1, r0, asr #18
   1731c:	andeq	r7, r1, r4, lsl r5
   17320:	andeq	r7, r1, r4, lsl r5
   17324:	andeq	r7, r1, r4, lsl r5
   17328:	andeq	r7, r1, r4, lsl r5
   1732c:	andeq	r7, r1, r4, lsl r5
   17330:	andeq	r7, r1, r4, lsl r5
   17334:	andeq	r7, r1, r4, lsl r5
   17338:	andeq	r7, r1, r4, lsl r5
   1733c:	andeq	r7, r1, r4, lsl r5
   17340:	andeq	r7, r1, r0, asr #18
   17344:	andeq	r7, r1, r0, asr #18
   17348:	andeq	r7, r1, r8, lsr r5
   1734c:	andeq	r7, r1, r0, asr #18
   17350:	andeq	r7, r1, ip, asr r5
   17354:	ldrdeq	r7, [r1], -r8
   17358:	andeq	r7, r1, r0, asr #18
   1735c:	andeq	r7, r1, r0, asr #18
   17360:	andeq	r7, r1, r4, lsr #11
   17364:	andeq	r7, r1, r0, asr #18
   17368:	andeq	r7, r1, r0, asr #18
   1736c:	andeq	r7, r1, r0, asr #18
   17370:	andeq	r7, r1, r0, asr #18
   17374:	andeq	r7, r1, r0, asr #18
   17378:	andeq	r7, r1, r0, asr #18
   1737c:	andeq	r7, r1, r0, asr #18
   17380:	andeq	r7, r1, r0, asr #18
   17384:	andeq	r7, r1, r0, asr #18
   17388:	andeq	r7, r1, r0, asr #18
   1738c:	andeq	r7, r1, r0, asr #18
   17390:	andeq	r7, r1, r0, asr #18
   17394:	andeq	r7, r1, r0, asr #18
   17398:	andeq	r7, r1, r0, asr #18
   1739c:	andeq	r7, r1, r0, asr #18
   173a0:	andeq	r7, r1, r0, asr #18
   173a4:	andeq	r7, r1, ip, lsl r6
   173a8:	andeq	r7, r1, r0, asr #18
   173ac:	andeq	r7, r1, r0, asr #18
   173b0:	andeq	r7, r1, r0, asr #18
   173b4:	andeq	r7, r1, r4, ror #11
   173b8:	andeq	r7, r1, r0, asr #18
   173bc:	andeq	r7, r1, r0, asr #18
   173c0:	andeq	r7, r1, r0, asr #18
   173c4:	andeq	r7, r1, r0, asr #18
   173c8:	andeq	r7, r1, r0, asr #18
   173cc:	andeq	r7, r1, r0, asr #18
   173d0:	andeq	r7, r1, r0, asr #18
   173d4:	andeq	r7, r1, r0, asr #18
   173d8:	andeq	r7, r1, r8, lsr r6
   173dc:	andeq	r7, r1, r0, asr #18
   173e0:	andeq	r7, r1, r0, lsl #11
   173e4:	andeq	r7, r1, r0, asr #18
   173e8:	andeq	r7, r1, r0, asr #18
   173ec:	andeq	r7, r1, r0, asr #18
   173f0:	andeq	r7, r1, r0, asr #18
   173f4:	andeq	r7, r1, r0, asr #18
   173f8:	andeq	r7, r1, r0, asr #18
   173fc:	andeq	r7, r1, r0, asr #18
   17400:	andeq	r7, r1, r0, asr #18
   17404:	andeq	r7, r1, r0, asr #18
   17408:	andeq	r7, r1, r0, asr #18
   1740c:	andeq	r7, r1, r0, asr #18
   17410:	andeq	r7, r1, r0, asr #18
   17414:	andeq	r7, r1, r0, asr #18
   17418:	andeq	r7, r1, r0, asr #18
   1741c:	andeq	r7, r1, r0, asr #18
   17420:	andeq	r7, r1, r0, asr #18
   17424:	andeq	r7, r1, r0, lsl #12
   17428:	andeq	r7, r1, r0, asr #18
   1742c:	andeq	r7, r1, r0, asr #18
   17430:	andeq	r7, r1, r0, asr #18
   17434:	andeq	r7, r1, r8, asr #11
   17438:	andeq	r7, r1, r0, asr #18
   1743c:	andeq	r7, r1, r0, asr #18
   17440:	andeq	r7, r1, r0, asr #18
   17444:	strdeq	r7, [r1], -r8
   17448:	strdeq	r7, [r1], -r8
   1744c:	andeq	r7, r1, r4, lsl r7
   17450:	cmp	r3, #1
   17454:	ble	1748c <__assert_fail@plt+0x61e4>
   17458:	ldr	r3, [r4, #8]
   1745c:	lsl	ip, r2, #2
   17460:	ldr	r0, [r3, r2, lsl #2]
   17464:	cmn	r0, #1
   17468:	beq	174c0 <__assert_fail@plt+0x6218>
   1746c:	add	r1, r1, #2
   17470:	ldr	r0, [r4, #28]
   17474:	cmp	r0, r1
   17478:	beq	1748c <__assert_fail@plt+0x61e4>
   1747c:	add	r3, r3, ip
   17480:	ldr	r3, [r3, #4]
   17484:	cmn	r3, #1
   17488:	beq	174c0 <__assert_fail@plt+0x6218>
   1748c:	ldrb	r3, [r4, #76]	; 0x4c
   17490:	cmp	r3, #0
   17494:	beq	17950 <__assert_fail@plt+0x66a8>
   17498:	ldr	r1, [r4, #12]
   1749c:	ldr	r3, [r4]
   174a0:	ldr	r0, [r1, r2, lsl #2]
   174a4:	ldr	r1, [r4, #24]
   174a8:	add	r3, r3, r0
   174ac:	ldrb	r6, [r3, r1]
   174b0:	bics	r3, r6, #127	; 0x7f
   174b4:	ldrne	r3, [r4, #4]
   174b8:	ldrbne	r6, [r3, r2]
   174bc:	b	17298 <__assert_fail@plt+0x5ff0>
   174c0:	ldr	r3, [r4, #4]
   174c4:	ldrb	r6, [r3, r2]
   174c8:	b	17298 <__assert_fail@plt+0x5ff0>
   174cc:	bl	11170 <__ctype_b_loc@plt>
   174d0:	ldr	r2, [r0]
   174d4:	lsl	r3, r6, #1
   174d8:	ldrh	r3, [r2, r3]
   174dc:	ubfx	r3, r3, #3, #1
   174e0:	cmp	r6, #95	; 0x5f
   174e4:	orreq	r3, r3, #1
   174e8:	ldrb	r2, [r5, #6]
   174ec:	bfi	r2, r3, #6, #1
   174f0:	strb	r2, [r5, #6]
   174f4:	b	172e4 <__assert_fail@plt+0x603c>
   174f8:	tst	r7, #33792	; 0x8400
   174fc:	movne	r0, #2
   17500:	bne	1726c <__assert_fail@plt+0x5fc4>
   17504:	mov	r3, #10
   17508:	strb	r3, [r5, #4]
   1750c:	mov	r0, #2
   17510:	b	1726c <__assert_fail@plt+0x5fc4>
   17514:	tst	r7, #16384	; 0x4000
   17518:	movne	r0, #2
   1751c:	bne	1726c <__assert_fail@plt+0x5fc4>
   17520:	mov	r3, #4
   17524:	strb	r3, [r5, #4]
   17528:	sub	r6, r6, #49	; 0x31
   1752c:	str	r6, [r5]
   17530:	mov	r0, #2
   17534:	b	1726c <__assert_fail@plt+0x5fc4>
   17538:	tst	r7, #524288	; 0x80000
   1753c:	movne	r0, #2
   17540:	bne	1726c <__assert_fail@plt+0x5fc4>
   17544:	mov	r3, #12
   17548:	strb	r3, [r5, #4]
   1754c:	mov	r3, #6
   17550:	str	r3, [r5]
   17554:	mov	r0, #2
   17558:	b	1726c <__assert_fail@plt+0x5fc4>
   1755c:	tst	r7, #524288	; 0x80000
   17560:	movne	r0, #2
   17564:	bne	1726c <__assert_fail@plt+0x5fc4>
   17568:	mov	r3, #12
   1756c:	strb	r3, [r5, #4]
   17570:	mov	r3, #9
   17574:	str	r3, [r5]
   17578:	mov	r0, #2
   1757c:	b	1726c <__assert_fail@plt+0x5fc4>
   17580:	tst	r7, #524288	; 0x80000
   17584:	movne	r0, #2
   17588:	bne	1726c <__assert_fail@plt+0x5fc4>
   1758c:	mov	r3, #12
   17590:	strb	r3, [r5, #4]
   17594:	mov	r3, #256	; 0x100
   17598:	str	r3, [r5]
   1759c:	mov	r0, #2
   175a0:	b	1726c <__assert_fail@plt+0x5fc4>
   175a4:	tst	r7, #524288	; 0x80000
   175a8:	movne	r0, #2
   175ac:	bne	1726c <__assert_fail@plt+0x5fc4>
   175b0:	mov	r3, #12
   175b4:	strb	r3, [r5, #4]
   175b8:	mov	r3, #512	; 0x200
   175bc:	str	r3, [r5]
   175c0:	mov	r0, #2
   175c4:	b	1726c <__assert_fail@plt+0x5fc4>
   175c8:	tst	r7, #524288	; 0x80000
   175cc:	movne	r0, #2
   175d0:	bne	1726c <__assert_fail@plt+0x5fc4>
   175d4:	mov	r3, #32
   175d8:	strb	r3, [r5, #4]
   175dc:	mov	r0, #2
   175e0:	b	1726c <__assert_fail@plt+0x5fc4>
   175e4:	tst	r7, #524288	; 0x80000
   175e8:	movne	r0, #2
   175ec:	bne	1726c <__assert_fail@plt+0x5fc4>
   175f0:	mov	r3, #33	; 0x21
   175f4:	strb	r3, [r5, #4]
   175f8:	mov	r0, #2
   175fc:	b	1726c <__assert_fail@plt+0x5fc4>
   17600:	tst	r7, #524288	; 0x80000
   17604:	movne	r0, #2
   17608:	bne	1726c <__assert_fail@plt+0x5fc4>
   1760c:	mov	r3, #34	; 0x22
   17610:	strb	r3, [r5, #4]
   17614:	mov	r0, #2
   17618:	b	1726c <__assert_fail@plt+0x5fc4>
   1761c:	tst	r7, #524288	; 0x80000
   17620:	movne	r0, #2
   17624:	bne	1726c <__assert_fail@plt+0x5fc4>
   17628:	mov	r3, #35	; 0x23
   1762c:	strb	r3, [r5, #4]
   17630:	mov	r0, #2
   17634:	b	1726c <__assert_fail@plt+0x5fc4>
   17638:	tst	r7, #524288	; 0x80000
   1763c:	movne	r0, #2
   17640:	bne	1726c <__assert_fail@plt+0x5fc4>
   17644:	mov	r3, #12
   17648:	strb	r3, [r5, #4]
   1764c:	mov	r3, #64	; 0x40
   17650:	str	r3, [r5]
   17654:	mov	r0, #2
   17658:	b	1726c <__assert_fail@plt+0x5fc4>
   1765c:	tst	r7, #524288	; 0x80000
   17660:	movne	r0, #2
   17664:	bne	1726c <__assert_fail@plt+0x5fc4>
   17668:	mov	r3, #12
   1766c:	strb	r3, [r5, #4]
   17670:	mov	r3, #128	; 0x80
   17674:	str	r3, [r5]
   17678:	mov	r0, #2
   1767c:	b	1726c <__assert_fail@plt+0x5fc4>
   17680:	tst	r7, #8192	; 0x2000
   17684:	movne	r0, #2
   17688:	bne	1726c <__assert_fail@plt+0x5fc4>
   1768c:	mov	r3, #8
   17690:	strb	r3, [r5, #4]
   17694:	mov	r0, #2
   17698:	b	1726c <__assert_fail@plt+0x5fc4>
   1769c:	tst	r7, #8192	; 0x2000
   176a0:	movne	r0, #2
   176a4:	bne	1726c <__assert_fail@plt+0x5fc4>
   176a8:	mov	r3, #9
   176ac:	strb	r3, [r5, #4]
   176b0:	mov	r0, #2
   176b4:	b	1726c <__assert_fail@plt+0x5fc4>
   176b8:	movw	r2, #1026	; 0x402
   176bc:	and	r2, r7, r2
   176c0:	cmp	r2, #2
   176c4:	moveq	r3, #18
   176c8:	strbeq	r3, [r5, #4]
   176cc:	moveq	r0, #2
   176d0:	movne	r0, #2
   176d4:	b	1726c <__assert_fail@plt+0x5fc4>
   176d8:	movw	r2, #1026	; 0x402
   176dc:	and	r2, r7, r2
   176e0:	cmp	r2, #2
   176e4:	moveq	r3, #19
   176e8:	strbeq	r3, [r5, #4]
   176ec:	moveq	r0, #2
   176f0:	movne	r0, #2
   176f4:	b	1726c <__assert_fail@plt+0x5fc4>
   176f8:	and	r2, r7, #4608	; 0x1200
   176fc:	cmp	r2, #512	; 0x200
   17700:	moveq	r3, #23
   17704:	strbeq	r3, [r5, #4]
   17708:	moveq	r0, #2
   1770c:	movne	r0, #2
   17710:	b	1726c <__assert_fail@plt+0x5fc4>
   17714:	and	r2, r7, #4608	; 0x1200
   17718:	cmp	r2, #512	; 0x200
   1771c:	moveq	r3, #24
   17720:	strbeq	r3, [r5, #4]
   17724:	moveq	r0, #2
   17728:	movne	r0, #2
   1772c:	b	1726c <__assert_fail@plt+0x5fc4>
   17730:	bl	11170 <__ctype_b_loc@plt>
   17734:	ldr	r2, [r0]
   17738:	lsl	r3, r6, #1
   1773c:	ldrh	r3, [r2, r3]
   17740:	ubfx	r3, r3, #3, #1
   17744:	cmp	r6, #95	; 0x5f
   17748:	orreq	r3, r3, #1
   1774c:	ldrb	r2, [r5, #6]
   17750:	bfi	r2, r3, #6, #1
   17754:	strb	r2, [r5, #6]
   17758:	b	17040 <__assert_fail@plt+0x5d98>
   1775c:	tst	r7, #2048	; 0x800
   17760:	moveq	r0, #1
   17764:	beq	1726c <__assert_fail@plt+0x5fc4>
   17768:	mov	r3, #10
   1776c:	strb	r3, [r5, #4]
   17770:	mov	r0, #1
   17774:	b	1726c <__assert_fail@plt+0x5fc4>
   17778:	and	r2, r7, #33792	; 0x8400
   1777c:	cmp	r2, #32768	; 0x8000
   17780:	moveq	r3, #10
   17784:	strbeq	r3, [r5, #4]
   17788:	moveq	r0, #1
   1778c:	movne	r0, #1
   17790:	b	1726c <__assert_fail@plt+0x5fc4>
   17794:	mov	r3, #11
   17798:	strb	r3, [r5, #4]
   1779c:	mov	r0, #1
   177a0:	b	1726c <__assert_fail@plt+0x5fc4>
   177a4:	movw	r3, #1026	; 0x402
   177a8:	tst	r7, r3
   177ac:	movne	r0, #1
   177b0:	bne	1726c <__assert_fail@plt+0x5fc4>
   177b4:	mov	r3, #18
   177b8:	strb	r3, [r5, #4]
   177bc:	mov	r0, #1
   177c0:	b	1726c <__assert_fail@plt+0x5fc4>
   177c4:	movw	r3, #1026	; 0x402
   177c8:	tst	r7, r3
   177cc:	movne	r0, #1
   177d0:	bne	1726c <__assert_fail@plt+0x5fc4>
   177d4:	mov	r3, #19
   177d8:	strb	r3, [r5, #4]
   177dc:	mov	r0, #1
   177e0:	b	1726c <__assert_fail@plt+0x5fc4>
   177e4:	and	r2, r7, #4608	; 0x1200
   177e8:	cmp	r2, #4608	; 0x1200
   177ec:	moveq	r3, #23
   177f0:	strbeq	r3, [r5, #4]
   177f4:	moveq	r0, #1
   177f8:	movne	r0, #1
   177fc:	b	1726c <__assert_fail@plt+0x5fc4>
   17800:	and	r2, r7, #4608	; 0x1200
   17804:	cmp	r2, #4608	; 0x1200
   17808:	moveq	r3, #24
   1780c:	strbeq	r3, [r5, #4]
   17810:	moveq	r0, #1
   17814:	movne	r0, #1
   17818:	b	1726c <__assert_fail@plt+0x5fc4>
   1781c:	tst	r7, #8192	; 0x2000
   17820:	moveq	r0, #1
   17824:	beq	1726c <__assert_fail@plt+0x5fc4>
   17828:	mov	r3, #8
   1782c:	strb	r3, [r5, #4]
   17830:	mov	r0, #1
   17834:	b	1726c <__assert_fail@plt+0x5fc4>
   17838:	tst	r7, #8192	; 0x2000
   1783c:	moveq	r0, #1
   17840:	beq	1726c <__assert_fail@plt+0x5fc4>
   17844:	mov	r3, #9
   17848:	strb	r3, [r5, #4]
   1784c:	mov	r0, #1
   17850:	b	1726c <__assert_fail@plt+0x5fc4>
   17854:	mov	r3, #20
   17858:	strb	r3, [r5, #4]
   1785c:	mov	r0, #1
   17860:	b	1726c <__assert_fail@plt+0x5fc4>
   17864:	mov	r3, #5
   17868:	strb	r3, [r5, #4]
   1786c:	mov	r0, #1
   17870:	b	1726c <__assert_fail@plt+0x5fc4>
   17874:	mov	r3, #8
   17878:	movt	r3, #128	; 0x80
   1787c:	tst	r7, r3
   17880:	bne	178b8 <__assert_fail@plt+0x6610>
   17884:	ldr	r3, [r4, #40]	; 0x28
   17888:	cmp	r3, #0
   1788c:	beq	178b8 <__assert_fail@plt+0x6610>
   17890:	ldr	r2, [r4, #4]
   17894:	add	r3, r2, r3
   17898:	ldrb	r2, [r3, #-1]
   1789c:	eor	r3, r7, #2048	; 0x800
   178a0:	ubfx	r3, r3, #11, #1
   178a4:	cmp	r2, #10
   178a8:	orrne	r3, r3, #1
   178ac:	cmp	r3, #0
   178b0:	movne	r0, #1
   178b4:	bne	1726c <__assert_fail@plt+0x5fc4>
   178b8:	mov	r3, #12
   178bc:	strb	r3, [r5, #4]
   178c0:	mov	r3, #16
   178c4:	str	r3, [r5]
   178c8:	mov	r0, #1
   178cc:	b	1726c <__assert_fail@plt+0x5fc4>
   178d0:	tst	r7, #8
   178d4:	bne	178ec <__assert_fail@plt+0x6644>
   178d8:	ldr	r3, [r4, #40]	; 0x28
   178dc:	add	r3, r3, #1
   178e0:	ldr	r2, [r4, #48]	; 0x30
   178e4:	cmp	r3, r2
   178e8:	bne	17904 <__assert_fail@plt+0x665c>
   178ec:	mov	r3, #12
   178f0:	strb	r3, [r5, #4]
   178f4:	mov	r3, #32
   178f8:	str	r3, [r5]
   178fc:	mov	r0, #1
   17900:	b	1726c <__assert_fail@plt+0x5fc4>
   17904:	str	r3, [r4, #40]	; 0x28
   17908:	mov	r2, r7
   1790c:	mov	r1, r4
   17910:	mov	r0, sp
   17914:	bl	16f7c <__assert_fail@plt+0x5cd4>
   17918:	ldr	r3, [r4, #40]	; 0x28
   1791c:	sub	r3, r3, #1
   17920:	str	r3, [r4, #40]	; 0x28
   17924:	ldrb	r3, [sp, #4]
   17928:	sub	r3, r3, #9
   1792c:	uxtb	r3, r3
   17930:	cmp	r3, #1
   17934:	movhi	r0, #1
   17938:	bhi	1726c <__assert_fail@plt+0x5fc4>
   1793c:	b	178ec <__assert_fail@plt+0x6644>
   17940:	mov	r0, #2
   17944:	b	1726c <__assert_fail@plt+0x5fc4>
   17948:	mov	r0, #1
   1794c:	b	1726c <__assert_fail@plt+0x5fc4>
   17950:	ldr	r3, [r4]
   17954:	ldr	r1, [r4, #24]
   17958:	add	r2, r3, r2
   1795c:	ldrb	r6, [r2, r1]
   17960:	b	17298 <__assert_fail@plt+0x5ff0>
   17964:	str	r4, [sp, #-8]!
   17968:	str	lr, [sp, #4]
   1796c:	mov	r4, r1
   17970:	bl	16f7c <__assert_fail@plt+0x5cd4>
   17974:	ldr	r3, [r4, #40]	; 0x28
   17978:	add	r0, r3, r0
   1797c:	str	r0, [r4, #40]	; 0x28
   17980:	ldr	r4, [sp]
   17984:	add	sp, sp, #4
   17988:	pop	{pc}		; (ldr pc, [sp], #4)
   1798c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17990:	strd	r6, [sp, #8]
   17994:	strd	r8, [sp, #16]
   17998:	str	sl, [sp, #24]
   1799c:	str	lr, [sp, #28]
   179a0:	mov	r6, r0
   179a4:	mov	r4, r1
   179a8:	mov	r5, r2
   179ac:	mvn	r9, #0
   179b0:	movw	r8, #32816	; 0x8030
   179b4:	mvn	r7, #1
   179b8:	mov	r2, r5
   179bc:	mov	r1, r6
   179c0:	mov	r0, r4
   179c4:	bl	17964 <__assert_fail@plt+0x66bc>
   179c8:	ldrb	r2, [r4]
   179cc:	ldrb	r3, [r4, #4]
   179d0:	cmp	r3, #2
   179d4:	beq	17a3c <__assert_fail@plt+0x6794>
   179d8:	cmp	r3, #24
   179dc:	cmpne	r2, #44	; 0x2c
   179e0:	beq	17a40 <__assert_fail@plt+0x6798>
   179e4:	cmp	r3, #1
   179e8:	movne	r9, r7
   179ec:	bne	179b8 <__assert_fail@plt+0x6710>
   179f0:	sub	r3, r2, #48	; 0x30
   179f4:	uxtb	r1, r3
   179f8:	cmp	r1, #9
   179fc:	movhi	r3, #0
   17a00:	movls	r3, #1
   17a04:	cmn	r9, #2
   17a08:	moveq	r3, #0
   17a0c:	cmp	r3, #0
   17a10:	moveq	r9, r7
   17a14:	beq	179b8 <__assert_fail@plt+0x6710>
   17a18:	cmn	r9, #1
   17a1c:	subeq	r9, r2, #48	; 0x30
   17a20:	beq	179b8 <__assert_fail@plt+0x6710>
   17a24:	add	r9, r9, r9, lsl #2
   17a28:	add	r2, r2, r9, lsl #1
   17a2c:	cmp	r2, r8
   17a30:	movge	r2, r8
   17a34:	sub	r9, r2, #48	; 0x30
   17a38:	b	179b8 <__assert_fail@plt+0x6710>
   17a3c:	mvn	r9, #1
   17a40:	mov	r0, r9
   17a44:	ldrd	r4, [sp]
   17a48:	ldrd	r6, [sp, #8]
   17a4c:	ldrd	r8, [sp, #16]
   17a50:	ldr	sl, [sp, #24]
   17a54:	add	sp, sp, #28
   17a58:	pop	{pc}		; (ldr pc, [sp], #4)
   17a5c:	str	r4, [sp, #-8]!
   17a60:	str	lr, [sp, #4]
   17a64:	mov	r4, r0
   17a68:	ldr	r0, [r0]
   17a6c:	bl	23f40 <__assert_fail@plt+0x12c98>
   17a70:	ldr	r0, [r4, #4]
   17a74:	bl	23f40 <__assert_fail@plt+0x12c98>
   17a78:	ldr	r0, [r4, #8]
   17a7c:	bl	23f40 <__assert_fail@plt+0x12c98>
   17a80:	ldr	r0, [r4, #12]
   17a84:	bl	23f40 <__assert_fail@plt+0x12c98>
   17a88:	mov	r0, r4
   17a8c:	bl	23f40 <__assert_fail@plt+0x12c98>
   17a90:	ldr	r4, [sp]
   17a94:	add	sp, sp, #4
   17a98:	pop	{pc}		; (ldr pc, [sp], #4)
   17a9c:	str	r4, [sp, #-8]!
   17aa0:	str	lr, [sp, #4]
   17aa4:	ldr	r2, [r0, #4]
   17aa8:	mov	r3, #255	; 0xff
   17aac:	movt	r3, #4
   17ab0:	and	r3, r3, r2
   17ab4:	cmp	r3, #6
   17ab8:	beq	17ad0 <__assert_fail@plt+0x6828>
   17abc:	cmp	r3, #3
   17ac0:	beq	17adc <__assert_fail@plt+0x6834>
   17ac4:	ldr	r4, [sp]
   17ac8:	add	sp, sp, #4
   17acc:	pop	{pc}		; (ldr pc, [sp], #4)
   17ad0:	ldr	r0, [r0]
   17ad4:	bl	17a5c <__assert_fail@plt+0x67b4>
   17ad8:	b	17ac4 <__assert_fail@plt+0x681c>
   17adc:	ldr	r0, [r0]
   17ae0:	bl	23f40 <__assert_fail@plt+0x12c98>
   17ae4:	b	17ac4 <__assert_fail@plt+0x681c>
   17ae8:	str	r4, [sp, #-8]!
   17aec:	str	lr, [sp, #4]
   17af0:	add	r0, r1, #20
   17af4:	bl	17a9c <__assert_fail@plt+0x67f4>
   17af8:	mov	r0, #0
   17afc:	ldr	r4, [sp]
   17b00:	add	sp, sp, #4
   17b04:	pop	{pc}		; (ldr pc, [sp], #4)
   17b08:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17b0c:	strd	r6, [sp, #8]
   17b10:	strd	r8, [sp, #16]
   17b14:	str	sl, [sp, #24]
   17b18:	str	lr, [sp, #28]
   17b1c:	sub	sp, sp, #8
   17b20:	mov	r4, r0
   17b24:	add	r3, sp, #8
   17b28:	stmdb	r3, {r1, r2}
   17b2c:	ldrb	r5, [sp, #4]
   17b30:	ldr	r6, [r0, #4]
   17b34:	ldr	r3, [r0, #8]
   17b38:	cmp	r3, r6
   17b3c:	bcs	17c14 <__assert_fail@plt+0x696c>
   17b40:	ldr	r1, [r4, #8]
   17b44:	ldr	r0, [r4]
   17b48:	lsl	r1, r1, #3
   17b4c:	ldrd	r2, [sp]
   17b50:	strd	r2, [r0, r1]
   17b54:	ldr	r2, [r4, #8]
   17b58:	ldr	r3, [r4]
   17b5c:	add	r3, r3, r2, lsl #3
   17b60:	ldr	r2, [r3, #4]
   17b64:	bfc	r2, #8, #10
   17b68:	str	r2, [r3, #4]
   17b6c:	cmp	r5, #5
   17b70:	beq	17ce4 <__assert_fail@plt+0x6a3c>
   17b74:	cmp	r5, #6
   17b78:	movne	r5, #0
   17b7c:	moveq	r5, #1
   17b80:	ldr	r2, [r4, #8]
   17b84:	ldr	r3, [r4]
   17b88:	add	r3, r3, r2, lsl #3
   17b8c:	ldrb	r2, [r3, #6]
   17b90:	bfi	r2, r5, #4, #1
   17b94:	strb	r2, [r3, #6]
   17b98:	ldr	r2, [r4, #8]
   17b9c:	ldr	r3, [r4, #12]
   17ba0:	mvn	r1, #0
   17ba4:	str	r1, [r3, r2, lsl #2]
   17ba8:	ldr	r3, [r4, #8]
   17bac:	add	r3, r3, r3, lsl #1
   17bb0:	lsl	r3, r3, #2
   17bb4:	ldr	r0, [r4, #20]
   17bb8:	add	r1, r0, r3
   17bbc:	mov	r2, #0
   17bc0:	str	r2, [r0, r3]
   17bc4:	str	r2, [r1, #4]
   17bc8:	str	r2, [r1, #8]
   17bcc:	ldr	r3, [r4, #8]
   17bd0:	add	r3, r3, r3, lsl #1
   17bd4:	lsl	r3, r3, #2
   17bd8:	ldr	r0, [r4, #24]
   17bdc:	add	r1, r0, r3
   17be0:	str	r2, [r0, r3]
   17be4:	str	r2, [r1, #4]
   17be8:	str	r2, [r1, #8]
   17bec:	ldr	r0, [r4, #8]
   17bf0:	add	r3, r0, #1
   17bf4:	str	r3, [r4, #8]
   17bf8:	add	sp, sp, #8
   17bfc:	ldrd	r4, [sp]
   17c00:	ldrd	r6, [sp, #8]
   17c04:	ldrd	r8, [sp, #16]
   17c08:	ldr	sl, [sp, #24]
   17c0c:	add	sp, sp, #28
   17c10:	pop	{pc}		; (ldr pc, [sp], #4)
   17c14:	lsl	r7, r6, #1
   17c18:	movw	r3, #21845	; 0x5555
   17c1c:	movt	r3, #5461	; 0x1555
   17c20:	cmp	r7, r3
   17c24:	bhi	17cf8 <__assert_fail@plt+0x6a50>
   17c28:	lsl	r1, r6, #4
   17c2c:	ldr	r0, [r0]
   17c30:	bl	23d84 <__assert_fail@plt+0x12adc>
   17c34:	cmp	r0, #0
   17c38:	beq	17d00 <__assert_fail@plt+0x6a58>
   17c3c:	str	r0, [r4]
   17c40:	lsl	r8, r6, #3
   17c44:	mov	r1, r8
   17c48:	ldr	r0, [r4, #12]
   17c4c:	bl	23d84 <__assert_fail@plt+0x12adc>
   17c50:	mov	r9, r0
   17c54:	mov	r1, r8
   17c58:	ldr	r0, [r4, #16]
   17c5c:	bl	23d84 <__assert_fail@plt+0x12adc>
   17c60:	mov	r8, r0
   17c64:	add	r6, r6, r6, lsl #1
   17c68:	lsl	r6, r6, #3
   17c6c:	mov	r1, r6
   17c70:	ldr	r0, [r4, #20]
   17c74:	bl	23d84 <__assert_fail@plt+0x12adc>
   17c78:	mov	sl, r0
   17c7c:	mov	r1, r6
   17c80:	ldr	r0, [r4, #24]
   17c84:	bl	23d84 <__assert_fail@plt+0x12adc>
   17c88:	mov	r6, r0
   17c8c:	cmp	r8, #0
   17c90:	cmpne	r9, #0
   17c94:	beq	17cbc <__assert_fail@plt+0x6a14>
   17c98:	cmp	r0, #0
   17c9c:	cmpne	sl, #0
   17ca0:	beq	17cbc <__assert_fail@plt+0x6a14>
   17ca4:	str	r9, [r4, #12]
   17ca8:	str	r8, [r4, #16]
   17cac:	str	sl, [r4, #20]
   17cb0:	str	r0, [r4, #24]
   17cb4:	str	r7, [r4, #4]
   17cb8:	b	17b40 <__assert_fail@plt+0x6898>
   17cbc:	mov	r0, r9
   17cc0:	bl	23f40 <__assert_fail@plt+0x12c98>
   17cc4:	mov	r0, r8
   17cc8:	bl	23f40 <__assert_fail@plt+0x12c98>
   17ccc:	mov	r0, sl
   17cd0:	bl	23f40 <__assert_fail@plt+0x12c98>
   17cd4:	mov	r0, r6
   17cd8:	bl	23f40 <__assert_fail@plt+0x12c98>
   17cdc:	mvn	r0, #0
   17ce0:	b	17bf8 <__assert_fail@plt+0x6950>
   17ce4:	ldr	r3, [r4, #92]	; 0x5c
   17ce8:	cmp	r3, #1
   17cec:	movgt	r5, #1
   17cf0:	bgt	17b80 <__assert_fail@plt+0x68d8>
   17cf4:	b	17b74 <__assert_fail@plt+0x68cc>
   17cf8:	mvn	r0, #0
   17cfc:	b	17bf8 <__assert_fail@plt+0x6950>
   17d00:	mvn	r0, #0
   17d04:	b	17bf8 <__assert_fail@plt+0x6950>
   17d08:	ldrb	r3, [r1, #24]
   17d0c:	cmp	r3, #16
   17d10:	bne	17d30 <__assert_fail@plt+0x6a88>
   17d14:	ldr	r3, [r1, #4]
   17d18:	ldr	r2, [r3, #12]
   17d1c:	str	r2, [r1, #12]
   17d20:	ldr	r3, [r3, #28]
   17d24:	str	r3, [r1, #28]
   17d28:	mov	r0, #0
   17d2c:	bx	lr
   17d30:	strd	r4, [sp, #-16]!
   17d34:	str	r6, [sp, #8]
   17d38:	str	lr, [sp, #12]
   17d3c:	mov	r4, r1
   17d40:	mov	r5, r0
   17d44:	str	r1, [r4, #12]
   17d48:	add	r3, r1, #20
   17d4c:	ldm	r3, {r1, r2}
   17d50:	bl	17b08 <__assert_fail@plt+0x6860>
   17d54:	str	r0, [r4, #28]
   17d58:	cmn	r0, #1
   17d5c:	beq	17da0 <__assert_fail@plt+0x6af8>
   17d60:	ldrb	r3, [r4, #24]
   17d64:	cmp	r3, #12
   17d68:	movne	r0, #0
   17d6c:	beq	17d80 <__assert_fail@plt+0x6ad8>
   17d70:	ldrd	r4, [sp]
   17d74:	ldr	r6, [sp, #8]
   17d78:	add	sp, sp, #12
   17d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d80:	ldr	r3, [r5]
   17d84:	add	r0, r3, r0, lsl #3
   17d88:	ldr	r3, [r0, #4]
   17d8c:	ldr	r2, [r4, #20]
   17d90:	bfi	r3, r2, #8, #10
   17d94:	str	r3, [r0, #4]
   17d98:	mov	r0, #0
   17d9c:	b	17d70 <__assert_fail@plt+0x6ac8>
   17da0:	mov	r0, #12
   17da4:	b	17d70 <__assert_fail@plt+0x6ac8>
   17da8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17dac:	strd	r6, [sp, #8]
   17db0:	str	r8, [sp, #16]
   17db4:	str	lr, [sp, #20]
   17db8:	mov	r4, r0
   17dbc:	mov	r5, r1
   17dc0:	mov	r7, r2
   17dc4:	lsl	r6, r1, #3
   17dc8:	ldr	r3, [r0]
   17dcc:	add	r3, r3, r6
   17dd0:	ldm	r3, {r1, r2}
   17dd4:	bl	17b08 <__assert_fail@plt+0x6860>
   17dd8:	cmn	r0, #1
   17ddc:	beq	17e38 <__assert_fail@plt+0x6b90>
   17de0:	lsl	r3, r0, #3
   17de4:	ldr	r2, [r4]
   17de8:	add	r2, r2, r3
   17dec:	ldr	r1, [r2, #4]
   17df0:	bfi	r1, r7, #8, #10
   17df4:	str	r1, [r2, #4]
   17df8:	ldr	r2, [r4]
   17dfc:	add	ip, r2, r3
   17e00:	add	r2, r2, r6
   17e04:	ldr	r1, [r2, #4]
   17e08:	ldr	r2, [ip, #4]
   17e0c:	orr	r1, r2, r1
   17e10:	ubfx	r1, r1, #8, #10
   17e14:	bfi	r2, r1, #8, #10
   17e18:	str	r2, [ip, #4]
   17e1c:	ldr	r2, [r4]
   17e20:	add	r3, r2, r3
   17e24:	ldrb	r2, [r3, #6]
   17e28:	orr	r2, r2, #4
   17e2c:	strb	r2, [r3, #6]
   17e30:	ldr	r3, [r4, #16]
   17e34:	str	r5, [r3, r0, lsl #2]
   17e38:	ldrd	r4, [sp]
   17e3c:	ldrd	r6, [sp, #8]
   17e40:	ldr	r8, [sp, #16]
   17e44:	add	sp, sp, #20
   17e48:	pop	{pc}		; (ldr pc, [sp], #4)
   17e4c:	str	r4, [sp, #-8]!
   17e50:	str	lr, [sp, #4]
   17e54:	mov	r4, r0
   17e58:	ldr	r0, [r0, #24]
   17e5c:	bl	23f40 <__assert_fail@plt+0x12c98>
   17e60:	ldr	r0, [r4, #36]	; 0x24
   17e64:	bl	23f40 <__assert_fail@plt+0x12c98>
   17e68:	ldr	r3, [r4, #40]	; 0x28
   17e6c:	add	r2, r4, #4
   17e70:	cmp	r3, r2
   17e74:	beq	17e88 <__assert_fail@plt+0x6be0>
   17e78:	ldr	r0, [r3, #8]
   17e7c:	bl	23f40 <__assert_fail@plt+0x12c98>
   17e80:	ldr	r0, [r4, #40]	; 0x28
   17e84:	bl	23f40 <__assert_fail@plt+0x12c98>
   17e88:	ldr	r0, [r4, #12]
   17e8c:	bl	23f40 <__assert_fail@plt+0x12c98>
   17e90:	ldr	r0, [r4, #48]	; 0x30
   17e94:	bl	23f40 <__assert_fail@plt+0x12c98>
   17e98:	ldr	r0, [r4, #44]	; 0x2c
   17e9c:	bl	23f40 <__assert_fail@plt+0x12c98>
   17ea0:	mov	r0, r4
   17ea4:	bl	23f40 <__assert_fail@plt+0x12c98>
   17ea8:	ldr	r4, [sp]
   17eac:	add	sp, sp, #4
   17eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   17eb4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17eb8:	strd	r6, [sp, #8]
   17ebc:	strd	r8, [sp, #16]
   17ec0:	strd	sl, [sp, #24]
   17ec4:	str	lr, [sp, #32]
   17ec8:	sub	sp, sp, #20
   17ecc:	mov	ip, #0
   17ed0:	str	ip, [r0]
   17ed4:	ldr	r5, [r2, #4]
   17ed8:	cmp	r5, ip
   17edc:	moveq	r5, #0
   17ee0:	beq	18178 <__assert_fail@plt+0x6ed0>
   17ee4:	add	r8, r3, r5
   17ee8:	ble	17f04 <__assert_fail@plt+0x6c5c>
   17eec:	ldr	ip, [r2, #8]
   17ef0:	add	r5, ip, r5, lsl #2
   17ef4:	ldr	lr, [ip], #4
   17ef8:	add	r8, r8, lr
   17efc:	cmp	r5, ip
   17f00:	bne	17ef4 <__assert_fail@plt+0x6c4c>
   17f04:	mov	r4, r3
   17f08:	mov	r7, r2
   17f0c:	mov	r9, r1
   17f10:	str	r0, [sp, #12]
   17f14:	ldr	r3, [r1, #68]	; 0x44
   17f18:	and	r3, r3, r8
   17f1c:	add	r3, r3, r3, lsl #1
   17f20:	lsl	r3, r3, #2
   17f24:	ldr	r2, [r1, #32]
   17f28:	add	r1, r2, r3
   17f2c:	ldr	fp, [r2, r3]
   17f30:	cmp	fp, #0
   17f34:	ble	17f8c <__assert_fail@plt+0x6ce4>
   17f38:	ldr	sl, [r1, #8]
   17f3c:	sub	sl, sl, #4
   17f40:	mov	r6, #0
   17f44:	b	17f54 <__assert_fail@plt+0x6cac>
   17f48:	add	r6, r6, #1
   17f4c:	cmp	r6, fp
   17f50:	beq	17f8c <__assert_fail@plt+0x6ce4>
   17f54:	ldr	r5, [sl, #4]!
   17f58:	ldr	r3, [r5]
   17f5c:	cmp	r3, r8
   17f60:	bne	17f48 <__assert_fail@plt+0x6ca0>
   17f64:	ldrb	r3, [r5, #52]	; 0x34
   17f68:	and	r3, r3, #15
   17f6c:	cmp	r3, r4
   17f70:	bne	17f48 <__assert_fail@plt+0x6ca0>
   17f74:	mov	r1, r7
   17f78:	ldr	r0, [r5, #40]	; 0x28
   17f7c:	bl	15004 <__assert_fail@plt+0x3d5c>
   17f80:	cmp	r0, #0
   17f84:	beq	17f48 <__assert_fail@plt+0x6ca0>
   17f88:	b	18178 <__assert_fail@plt+0x6ed0>
   17f8c:	mov	r1, #1
   17f90:	mov	r0, #56	; 0x38
   17f94:	bl	23cd4 <__assert_fail@plt+0x12a2c>
   17f98:	subs	r5, r0, #0
   17f9c:	beq	18050 <__assert_fail@plt+0x6da8>
   17fa0:	add	fp, r5, #4
   17fa4:	mov	r1, r7
   17fa8:	mov	r0, fp
   17fac:	bl	16658 <__assert_fail@plt+0x53b0>
   17fb0:	subs	r6, r0, #0
   17fb4:	bne	17ff8 <__assert_fail@plt+0x6d50>
   17fb8:	ldrb	r3, [r5, #52]	; 0x34
   17fbc:	bfi	r3, r4, #0, #4
   17fc0:	strb	r3, [r5, #52]	; 0x34
   17fc4:	str	fp, [r5, #40]	; 0x28
   17fc8:	ldr	r3, [r7, #4]
   17fcc:	cmp	r3, #0
   17fd0:	ble	18160 <__assert_fail@plt+0x6eb8>
   17fd4:	mov	sl, r6
   17fd8:	and	r3, r4, #4
   17fdc:	str	r3, [sp, #4]
   17fe0:	and	r3, r4, #2
   17fe4:	str	r3, [sp]
   17fe8:	and	r3, r4, #1
   17fec:	str	r8, [sp, #8]
   17ff0:	mov	r8, r3
   17ff4:	b	180c8 <__assert_fail@plt+0x6e20>
   17ff8:	mov	r0, r5
   17ffc:	bl	23f40 <__assert_fail@plt+0x12c98>
   18000:	b	18050 <__assert_fail@plt+0x6da8>
   18004:	ldrb	r3, [r5, #52]	; 0x34
   18008:	orr	r3, r3, #64	; 0x40
   1800c:	strb	r3, [r5, #52]	; 0x34
   18010:	b	1812c <__assert_fail@plt+0x6e84>
   18014:	mov	r0, #12
   18018:	bl	23d48 <__assert_fail@plt+0x12aa0>
   1801c:	cmp	r0, #0
   18020:	beq	18048 <__assert_fail@plt+0x6da0>
   18024:	str	r0, [r5, #40]	; 0x28
   18028:	mov	r1, r7
   1802c:	bl	16658 <__assert_fail@plt+0x53b0>
   18030:	subs	sl, r0, #0
   18034:	bne	18064 <__assert_fail@plt+0x6dbc>
   18038:	ldrb	r3, [r5, #52]	; 0x34
   1803c:	orr	r3, r3, #128	; 0x80
   18040:	strb	r3, [r5, #52]	; 0x34
   18044:	b	18140 <__assert_fail@plt+0x6e98>
   18048:	mov	r0, r5
   1804c:	bl	17e4c <__assert_fail@plt+0x6ba4>
   18050:	mov	r3, #12
   18054:	ldr	r2, [sp, #12]
   18058:	str	r3, [r2]
   1805c:	mov	r5, #0
   18060:	b	18178 <__assert_fail@plt+0x6ed0>
   18064:	mov	r0, r5
   18068:	bl	17e4c <__assert_fail@plt+0x6ba4>
   1806c:	b	18050 <__assert_fail@plt+0x6da8>
   18070:	tst	r4, #2
   18074:	beq	18080 <__assert_fail@plt+0x6dd8>
   18078:	cmp	r8, #0
   1807c:	bne	180a8 <__assert_fail@plt+0x6e00>
   18080:	tst	r4, #16
   18084:	beq	18094 <__assert_fail@plt+0x6dec>
   18088:	ldr	r3, [sp]
   1808c:	cmp	r3, #0
   18090:	beq	180a8 <__assert_fail@plt+0x6e00>
   18094:	tst	r4, #64	; 0x40
   18098:	beq	180b8 <__assert_fail@plt+0x6e10>
   1809c:	ldr	r3, [sp, #4]
   180a0:	cmp	r3, #0
   180a4:	bne	180b8 <__assert_fail@plt+0x6e10>
   180a8:	sub	r1, r6, sl
   180ac:	mov	r0, fp
   180b0:	bl	15104 <__assert_fail@plt+0x3e5c>
   180b4:	add	sl, sl, #1
   180b8:	add	r6, r6, #1
   180bc:	ldr	r3, [r7, #4]
   180c0:	cmp	r6, r3
   180c4:	bge	1815c <__assert_fail@plt+0x6eb4>
   180c8:	ldr	r3, [r7, #8]
   180cc:	ldr	r2, [r3, r6, lsl #2]
   180d0:	ldr	r3, [r9]
   180d4:	add	r3, r3, r2, lsl #3
   180d8:	ldrb	r1, [r3, #4]
   180dc:	ldr	r4, [r3, #4]
   180e0:	ubfx	r4, r4, #8, #10
   180e4:	cmp	r1, #1
   180e8:	cmpeq	r4, #0
   180ec:	beq	180b8 <__assert_fail@plt+0x6e10>
   180f0:	ldrb	r2, [r5, #52]	; 0x34
   180f4:	ubfx	r0, r2, #5, #1
   180f8:	ldrb	r3, [r3, #6]
   180fc:	ubfx	r3, r3, #4, #1
   18100:	orr	r0, r0, r3
   18104:	mov	r3, r2
   18108:	bfi	r3, r0, #5, #1
   1810c:	strb	r3, [r5, #52]	; 0x34
   18110:	cmp	r1, #2
   18114:	uxtbeq	r3, r3
   18118:	orreq	r3, r3, #16
   1811c:	strbeq	r3, [r5, #52]	; 0x34
   18120:	beq	1812c <__assert_fail@plt+0x6e84>
   18124:	cmp	r1, #4
   18128:	beq	18004 <__assert_fail@plt+0x6d5c>
   1812c:	cmp	r4, #0
   18130:	beq	180b8 <__assert_fail@plt+0x6e10>
   18134:	ldr	r3, [r5, #40]	; 0x28
   18138:	cmp	fp, r3
   1813c:	beq	18014 <__assert_fail@plt+0x6d6c>
   18140:	tst	r4, #1
   18144:	beq	18070 <__assert_fail@plt+0x6dc8>
   18148:	cmp	r8, #0
   1814c:	beq	180a8 <__assert_fail@plt+0x6e00>
   18150:	tst	r4, #2
   18154:	bne	180a8 <__assert_fail@plt+0x6e00>
   18158:	b	18080 <__assert_fail@plt+0x6dd8>
   1815c:	ldr	r8, [sp, #8]
   18160:	mov	r2, r8
   18164:	mov	r1, r5
   18168:	mov	r0, r9
   1816c:	bl	161c8 <__assert_fail@plt+0x4f20>
   18170:	cmp	r0, #0
   18174:	bne	18198 <__assert_fail@plt+0x6ef0>
   18178:	mov	r0, r5
   1817c:	add	sp, sp, #20
   18180:	ldrd	r4, [sp]
   18184:	ldrd	r6, [sp, #8]
   18188:	ldrd	r8, [sp, #16]
   1818c:	ldrd	sl, [sp, #24]
   18190:	add	sp, sp, #32
   18194:	pop	{pc}		; (ldr pc, [sp], #4)
   18198:	mov	r0, r5
   1819c:	bl	17e4c <__assert_fail@plt+0x6ba4>
   181a0:	b	18050 <__assert_fail@plt+0x6da8>
   181a4:	strd	r4, [sp, #-16]!
   181a8:	str	r6, [sp, #8]
   181ac:	str	lr, [sp, #12]
   181b0:	ldr	r5, [r0]
   181b4:	ldr	r0, [r5, #56]	; 0x38
   181b8:	cmp	r0, #0
   181bc:	beq	181d4 <__assert_fail@plt+0x6f2c>
   181c0:	ldr	r4, [r0]
   181c4:	bl	23f40 <__assert_fail@plt+0x12c98>
   181c8:	mov	r0, r4
   181cc:	cmp	r4, #0
   181d0:	bne	181c0 <__assert_fail@plt+0x6f18>
   181d4:	mov	r4, #0
   181d8:	str	r4, [r5, #56]	; 0x38
   181dc:	mov	r3, #31
   181e0:	str	r3, [r5, #64]	; 0x40
   181e4:	str	r4, [r5, #52]	; 0x34
   181e8:	ldr	r0, [r5, #16]
   181ec:	bl	23f40 <__assert_fail@plt+0x12c98>
   181f0:	str	r4, [r5, #16]
   181f4:	ldrd	r4, [sp]
   181f8:	ldr	r6, [sp, #8]
   181fc:	add	sp, sp, #12
   18200:	pop	{pc}		; (ldr pc, [sp], #4)
   18204:	str	r4, [sp, #-8]!
   18208:	str	lr, [sp, #4]
   1820c:	mov	r4, r0
   18210:	ldr	r0, [r0, #8]
   18214:	bl	23f40 <__assert_fail@plt+0x12c98>
   18218:	ldr	r0, [r4, #12]
   1821c:	bl	23f40 <__assert_fail@plt+0x12c98>
   18220:	ldrb	r3, [r4, #75]	; 0x4b
   18224:	cmp	r3, #0
   18228:	bne	18238 <__assert_fail@plt+0x6f90>
   1822c:	ldr	r4, [sp]
   18230:	add	sp, sp, #4
   18234:	pop	{pc}		; (ldr pc, [sp], #4)
   18238:	ldr	r0, [r4, #4]
   1823c:	bl	23f40 <__assert_fail@plt+0x12c98>
   18240:	b	1822c <__assert_fail@plt+0x6f84>
   18244:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18248:	strd	r6, [sp, #8]
   1824c:	str	r8, [sp, #16]
   18250:	str	lr, [sp, #20]
   18254:	mov	r6, r0
   18258:	ldr	r3, [r0]
   1825c:	cmp	r3, #0
   18260:	beq	18290 <__assert_fail@plt+0x6fe8>
   18264:	ldr	r3, [r0, #8]
   18268:	cmp	r3, #0
   1826c:	beq	18290 <__assert_fail@plt+0x6fe8>
   18270:	mov	r4, #0
   18274:	ldr	r0, [r6]
   18278:	add	r0, r0, r4, lsl #3
   1827c:	bl	17a9c <__assert_fail@plt+0x67f4>
   18280:	add	r4, r4, #1
   18284:	ldr	r3, [r6, #8]
   18288:	cmp	r3, r4
   1828c:	bhi	18274 <__assert_fail@plt+0x6fcc>
   18290:	ldr	r0, [r6, #12]
   18294:	bl	23f40 <__assert_fail@plt+0x12c98>
   18298:	ldr	r3, [r6, #8]
   1829c:	cmp	r3, #0
   182a0:	beq	18310 <__assert_fail@plt+0x7068>
   182a4:	mov	r4, #0
   182a8:	mov	r5, r4
   182ac:	b	182c4 <__assert_fail@plt+0x701c>
   182b0:	add	r5, r5, #1
   182b4:	add	r4, r4, #12
   182b8:	ldr	r3, [r6, #8]
   182bc:	cmp	r3, r5
   182c0:	bls	18310 <__assert_fail@plt+0x7068>
   182c4:	ldr	r3, [r6, #24]
   182c8:	cmp	r3, #0
   182cc:	beq	182dc <__assert_fail@plt+0x7034>
   182d0:	add	r3, r3, r4
   182d4:	ldr	r0, [r3, #8]
   182d8:	bl	23f40 <__assert_fail@plt+0x12c98>
   182dc:	ldr	r3, [r6, #28]
   182e0:	cmp	r3, #0
   182e4:	beq	182f4 <__assert_fail@plt+0x704c>
   182e8:	add	r3, r3, r4
   182ec:	ldr	r0, [r3, #8]
   182f0:	bl	23f40 <__assert_fail@plt+0x12c98>
   182f4:	ldr	r3, [r6, #20]
   182f8:	cmp	r3, #0
   182fc:	beq	182b0 <__assert_fail@plt+0x7008>
   18300:	add	r3, r3, r4
   18304:	ldr	r0, [r3, #8]
   18308:	bl	23f40 <__assert_fail@plt+0x12c98>
   1830c:	b	182b0 <__assert_fail@plt+0x7008>
   18310:	ldr	r0, [r6, #20]
   18314:	bl	23f40 <__assert_fail@plt+0x12c98>
   18318:	ldr	r0, [r6, #24]
   1831c:	bl	23f40 <__assert_fail@plt+0x12c98>
   18320:	ldr	r0, [r6, #28]
   18324:	bl	23f40 <__assert_fail@plt+0x12c98>
   18328:	ldr	r0, [r6]
   1832c:	bl	23f40 <__assert_fail@plt+0x12c98>
   18330:	ldr	r3, [r6, #32]
   18334:	cmp	r3, #0
   18338:	beq	1839c <__assert_fail@plt+0x70f4>
   1833c:	mov	r7, #0
   18340:	mov	r8, r7
   18344:	b	18364 <__assert_fail@plt+0x70bc>
   18348:	ldr	r0, [r5, #8]
   1834c:	bl	23f40 <__assert_fail@plt+0x12c98>
   18350:	add	r8, r8, #1
   18354:	add	r7, r7, #12
   18358:	ldr	r3, [r6, #68]	; 0x44
   1835c:	cmp	r3, r8
   18360:	bcc	1839c <__assert_fail@plt+0x70f4>
   18364:	ldr	r3, [r6, #32]
   18368:	add	r5, r3, r7
   1836c:	ldr	r3, [r3, r7]
   18370:	cmp	r3, #0
   18374:	ble	18348 <__assert_fail@plt+0x70a0>
   18378:	mov	r4, #0
   1837c:	ldr	r3, [r5, #8]
   18380:	ldr	r0, [r3, r4, lsl #2]
   18384:	bl	17e4c <__assert_fail@plt+0x6ba4>
   18388:	add	r4, r4, #1
   1838c:	ldr	r3, [r5]
   18390:	cmp	r3, r4
   18394:	bgt	1837c <__assert_fail@plt+0x70d4>
   18398:	b	18348 <__assert_fail@plt+0x70a0>
   1839c:	ldr	r0, [r6, #32]
   183a0:	bl	23f40 <__assert_fail@plt+0x12c98>
   183a4:	ldr	r0, [r6, #60]	; 0x3c
   183a8:	movw	r3, #20428	; 0x4fcc
   183ac:	movt	r3, #2
   183b0:	cmp	r0, r3
   183b4:	beq	183bc <__assert_fail@plt+0x7114>
   183b8:	bl	23f40 <__assert_fail@plt+0x12c98>
   183bc:	ldr	r0, [r6, #132]	; 0x84
   183c0:	bl	23f40 <__assert_fail@plt+0x12c98>
   183c4:	mov	r0, r6
   183c8:	bl	23f40 <__assert_fail@plt+0x12c98>
   183cc:	ldrd	r4, [sp]
   183d0:	ldrd	r6, [sp, #8]
   183d4:	ldr	r8, [sp, #16]
   183d8:	add	sp, sp, #20
   183dc:	pop	{pc}		; (ldr pc, [sp], #4)
   183e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   183e4:	strd	r6, [sp, #8]
   183e8:	str	r8, [sp, #16]
   183ec:	str	lr, [sp, #20]
   183f0:	mov	r8, r0
   183f4:	ldr	r3, [r0, #124]	; 0x7c
   183f8:	cmp	r3, #0
   183fc:	ble	18488 <__assert_fail@plt+0x71e0>
   18400:	mov	r7, #0
   18404:	b	18420 <__assert_fail@plt+0x7178>
   18408:	mov	r0, r6
   1840c:	bl	23f40 <__assert_fail@plt+0x12c98>
   18410:	add	r7, r7, #1
   18414:	ldr	r3, [r8, #124]	; 0x7c
   18418:	cmp	r3, r7
   1841c:	ble	18488 <__assert_fail@plt+0x71e0>
   18420:	ldr	r3, [r8, #132]	; 0x84
   18424:	ldr	r6, [r3, r7, lsl #2]
   18428:	ldr	r3, [r6, #16]
   1842c:	cmp	r3, #0
   18430:	ble	18460 <__assert_fail@plt+0x71b8>
   18434:	mov	r4, #0
   18438:	ldr	r3, [r6, #20]
   1843c:	ldr	r5, [r3, r4, lsl #2]
   18440:	ldr	r0, [r5, #16]
   18444:	bl	23f40 <__assert_fail@plt+0x12c98>
   18448:	mov	r0, r5
   1844c:	bl	23f40 <__assert_fail@plt+0x12c98>
   18450:	add	r4, r4, #1
   18454:	ldr	r3, [r6, #16]
   18458:	cmp	r3, r4
   1845c:	bgt	18438 <__assert_fail@plt+0x7190>
   18460:	ldr	r0, [r6, #20]
   18464:	bl	23f40 <__assert_fail@plt+0x12c98>
   18468:	ldr	r3, [r6, #8]
   1846c:	cmp	r3, #0
   18470:	beq	18408 <__assert_fail@plt+0x7160>
   18474:	ldr	r0, [r3, #8]
   18478:	bl	23f40 <__assert_fail@plt+0x12c98>
   1847c:	ldr	r0, [r6, #8]
   18480:	bl	23f40 <__assert_fail@plt+0x12c98>
   18484:	b	18408 <__assert_fail@plt+0x7160>
   18488:	mov	r3, #0
   1848c:	str	r3, [r8, #124]	; 0x7c
   18490:	str	r3, [r8, #108]	; 0x6c
   18494:	ldrd	r4, [sp]
   18498:	ldrd	r6, [sp, #8]
   1849c:	ldr	r8, [sp, #16]
   184a0:	add	sp, sp, #20
   184a4:	pop	{pc}		; (ldr pc, [sp], #4)
   184a8:	strd	r4, [sp, #-16]!
   184ac:	str	r6, [sp, #8]
   184b0:	str	lr, [sp, #12]
   184b4:	mov	r4, r0
   184b8:	ldr	r0, [r0, #8]
   184bc:	add	r5, r4, #12
   184c0:	cmp	r0, r5
   184c4:	beq	184cc <__assert_fail@plt+0x7224>
   184c8:	bl	23f40 <__assert_fail@plt+0x12c98>
   184cc:	mov	r3, #0
   184d0:	str	r3, [r4]
   184d4:	mov	r3, #16
   184d8:	str	r3, [r4, #4]
   184dc:	str	r5, [r4, #8]
   184e0:	ldrd	r4, [sp]
   184e4:	ldr	r6, [sp, #8]
   184e8:	add	sp, sp, #12
   184ec:	pop	{pc}		; (ldr pc, [sp], #4)
   184f0:	strd	r4, [sp, #-16]!
   184f4:	str	r6, [sp, #8]
   184f8:	str	lr, [sp, #12]
   184fc:	subs	r5, r0, #0
   18500:	beq	18554 <__assert_fail@plt+0x72ac>
   18504:	ldr	r3, [r5]
   18508:	cmp	r3, #0
   1850c:	ble	1854c <__assert_fail@plt+0x72a4>
   18510:	mov	r4, #0
   18514:	mov	r6, r4
   18518:	ldr	r3, [r5, #8]
   1851c:	add	r3, r3, r4
   18520:	ldr	r0, [r3, #20]
   18524:	bl	23f40 <__assert_fail@plt+0x12c98>
   18528:	ldr	r3, [r5, #8]
   1852c:	add	r3, r3, r4
   18530:	ldr	r0, [r3, #8]
   18534:	bl	23f40 <__assert_fail@plt+0x12c98>
   18538:	add	r6, r6, #1
   1853c:	add	r4, r4, #24
   18540:	ldr	r3, [r5]
   18544:	cmp	r3, r6
   18548:	bgt	18518 <__assert_fail@plt+0x7270>
   1854c:	ldr	r0, [r5, #8]
   18550:	bl	23f40 <__assert_fail@plt+0x12c98>
   18554:	mov	r0, #0
   18558:	ldrd	r4, [sp]
   1855c:	ldr	r6, [sp, #8]
   18560:	add	sp, sp, #12
   18564:	pop	{pc}		; (ldr pc, [sp], #4)
   18568:	strd	r4, [sp, #-16]!
   1856c:	str	r6, [sp, #8]
   18570:	str	lr, [sp, #12]
   18574:	ldr	r2, [r1, #28]
   18578:	ldrb	r3, [r1, #24]
   1857c:	sub	r3, r3, #2
   18580:	cmp	r3, #14
   18584:	ldrls	pc, [pc, r3, lsl #2]
   18588:	b	186c0 <__assert_fail@plt+0x7418>
   1858c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18590:	andeq	r8, r1, r0, asr #13
   18594:	andeq	r8, r1, r4, lsl #13
   18598:	andeq	r8, r1, r0, asr #13
   1859c:	andeq	r8, r1, r0, asr #13
   185a0:	andeq	r8, r1, r0, asr #13
   185a4:	andeq	r8, r1, r8, ror #12
   185a8:	andeq	r8, r1, r8, ror #12
   185ac:	andeq	r8, r1, r8, asr #11
   185b0:	andeq	r8, r1, r8, asr #11
   185b4:	andeq	r8, r1, r8, ror #12
   185b8:	andeq	r8, r1, r0, asr #13
   185bc:	andeq	r8, r1, r0, asr #13
   185c0:	andeq	r8, r1, r0, asr #13
   185c4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185c8:	ldrb	r3, [r0, #88]	; 0x58
   185cc:	orr	r3, r3, #1
   185d0:	strb	r3, [r0, #88]	; 0x58
   185d4:	ldr	r3, [r1, #4]
   185d8:	cmp	r3, #0
   185dc:	ldrne	r3, [r3, #12]
   185e0:	ldreq	r3, [r1, #16]
   185e4:	ldr	r4, [r3, #28]
   185e8:	ldr	r3, [r1, #8]
   185ec:	cmp	r3, #0
   185f0:	ldrne	r3, [r3, #12]
   185f4:	ldreq	r3, [r1, #16]
   185f8:	ldr	r5, [r3, #28]
   185fc:	add	r2, r2, r2, lsl #1
   18600:	lsl	r2, r2, #2
   18604:	ldr	r3, [r0, #20]
   18608:	add	r6, r3, r2
   1860c:	mov	r1, #2
   18610:	str	r1, [r3, r2]
   18614:	mov	r0, #8
   18618:	bl	23d48 <__assert_fail@plt+0x12aa0>
   1861c:	str	r0, [r6, #8]
   18620:	cmp	r0, #0
   18624:	beq	186ec <__assert_fail@plt+0x7444>
   18628:	cmp	r4, r5
   1862c:	beq	18654 <__assert_fail@plt+0x73ac>
   18630:	mov	r3, #2
   18634:	str	r3, [r6, #4]
   18638:	cmp	r4, r5
   1863c:	strlt	r4, [r0]
   18640:	strlt	r5, [r0, #4]
   18644:	strge	r5, [r0]
   18648:	strge	r4, [r0, #4]
   1864c:	mov	r0, #0
   18650:	b	186dc <__assert_fail@plt+0x7434>
   18654:	mov	r3, #1
   18658:	str	r3, [r6, #4]
   1865c:	str	r4, [r0]
   18660:	mov	r0, #0
   18664:	b	186dc <__assert_fail@plt+0x7434>
   18668:	ldr	r1, [r1, #16]
   1866c:	add	r2, r2, r2, lsl #1
   18670:	ldr	r0, [r0, #20]
   18674:	ldr	r1, [r1, #28]
   18678:	add	r0, r0, r2, lsl #2
   1867c:	bl	16134 <__assert_fail@plt+0x4e8c>
   18680:	b	186dc <__assert_fail@plt+0x7434>
   18684:	ldr	r3, [r1, #16]
   18688:	ldr	ip, [r3, #28]
   1868c:	ldr	r3, [r0, #12]
   18690:	str	ip, [r3, r2, lsl #2]
   18694:	ldrb	r3, [r1, #24]
   18698:	cmp	r3, #4
   1869c:	movne	r0, #0
   186a0:	bne	186dc <__assert_fail@plt+0x7434>
   186a4:	ldr	r1, [r0, #12]
   186a8:	add	ip, r2, r2, lsl #1
   186ac:	ldr	r0, [r0, #20]
   186b0:	ldr	r1, [r1, r2, lsl #2]
   186b4:	add	r0, r0, ip, lsl #2
   186b8:	bl	16134 <__assert_fail@plt+0x4e8c>
   186bc:	b	186dc <__assert_fail@plt+0x7434>
   186c0:	ldr	r3, [r1, #16]
   186c4:	ldr	r1, [r3, #28]
   186c8:	ldr	r3, [r0, #12]
   186cc:	str	r1, [r3, r2, lsl #2]
   186d0:	mov	r0, #0
   186d4:	b	186dc <__assert_fail@plt+0x7434>
   186d8:	mov	r0, #0
   186dc:	ldrd	r4, [sp]
   186e0:	ldr	r6, [sp, #8]
   186e4:	add	sp, sp, #12
   186e8:	pop	{pc}		; (ldr pc, [sp], #4)
   186ec:	mov	r0, #12
   186f0:	b	186dc <__assert_fail@plt+0x7434>
   186f4:	strd	r4, [sp, #-16]!
   186f8:	str	r6, [sp, #8]
   186fc:	str	lr, [sp, #12]
   18700:	mov	r4, r0
   18704:	mov	r5, r1
   18708:	ldr	r1, [r0]
   1870c:	cmp	r1, #0
   18710:	beq	18748 <__assert_fail@plt+0x74a0>
   18714:	ldr	r3, [r0, #4]
   18718:	cmp	r3, #0
   1871c:	bne	1875c <__assert_fail@plt+0x74b4>
   18720:	ldr	r3, [r0, #8]
   18724:	str	r5, [r3]
   18728:	ldr	r3, [r0, #4]
   1872c:	add	r3, r3, #1
   18730:	str	r3, [r0, #4]
   18734:	mov	r0, #1
   18738:	ldrd	r4, [sp]
   1873c:	ldr	r6, [sp, #8]
   18740:	add	sp, sp, #12
   18744:	pop	{pc}		; (ldr pc, [sp], #4)
   18748:	mov	r1, r5
   1874c:	bl	16134 <__assert_fail@plt+0x4e8c>
   18750:	clz	r0, r0
   18754:	lsr	r0, r0, #5
   18758:	b	18738 <__assert_fail@plt+0x7490>
   1875c:	cmp	r1, r3
   18760:	beq	187bc <__assert_fail@plt+0x7514>
   18764:	ldr	r1, [r4, #8]
   18768:	ldr	r3, [r1]
   1876c:	cmp	r3, r5
   18770:	ble	187e0 <__assert_fail@plt+0x7538>
   18774:	ldr	r3, [r4, #4]
   18778:	cmp	r3, #0
   1877c:	ble	187a0 <__assert_fail@plt+0x74f8>
   18780:	sub	r2, r3, #-1073741823	; 0xc0000001
   18784:	lsl	r2, r2, #2
   18788:	ldr	r1, [r4, #8]
   1878c:	ldr	r0, [r1, r2]
   18790:	str	r0, [r1, r3, lsl #2]
   18794:	sub	r2, r2, #4
   18798:	subs	r3, r3, #1
   1879c:	bne	18788 <__assert_fail@plt+0x74e0>
   187a0:	ldr	r2, [r4, #8]
   187a4:	str	r5, [r2, r3, lsl #2]
   187a8:	ldr	r3, [r4, #4]
   187ac:	add	r3, r3, #1
   187b0:	str	r3, [r4, #4]
   187b4:	mov	r0, #1
   187b8:	b	18738 <__assert_fail@plt+0x7490>
   187bc:	lsl	r3, r1, #1
   187c0:	str	r3, [r0]
   187c4:	lsl	r1, r1, #3
   187c8:	ldr	r0, [r0, #8]
   187cc:	bl	23d84 <__assert_fail@plt+0x12adc>
   187d0:	cmp	r0, #0
   187d4:	beq	18820 <__assert_fail@plt+0x7578>
   187d8:	str	r0, [r4, #8]
   187dc:	b	18764 <__assert_fail@plt+0x74bc>
   187e0:	ldr	r3, [r4, #4]
   187e4:	sub	r0, r3, #-1073741823	; 0xc0000001
   187e8:	lsl	r2, r0, #2
   187ec:	ldr	r0, [r1, r0, lsl #2]
   187f0:	cmp	r5, r0
   187f4:	bge	187a0 <__assert_fail@plt+0x74f8>
   187f8:	add	r2, r2, #4
   187fc:	str	r0, [r1, r2]
   18800:	sub	r3, r3, #1
   18804:	ldr	r1, [r4, #8]
   18808:	add	r0, r1, r2
   1880c:	ldr	r0, [r0, #-8]
   18810:	sub	r2, r2, #4
   18814:	cmp	r0, r5
   18818:	bgt	187fc <__assert_fail@plt+0x7554>
   1881c:	b	187a0 <__assert_fail@plt+0x74f8>
   18820:	mov	r0, #0
   18824:	b	18738 <__assert_fail@plt+0x7490>
   18828:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1882c:	strd	r6, [sp, #8]
   18830:	strd	r8, [sp, #16]
   18834:	strd	sl, [sp, #24]
   18838:	str	lr, [sp, #32]
   1883c:	sub	sp, sp, #20
   18840:	mov	r4, r0
   18844:	mov	r5, r1
   18848:	mov	r6, r2
   1884c:	mov	r9, r3
   18850:	ldr	r7, [sp, #56]	; 0x38
   18854:	mov	r8, #0
   18858:	b	18a28 <__assert_fail@plt+0x7780>
   1885c:	lsl	fp, r5, #2
   18860:	ldr	r3, [r4, #12]
   18864:	ldr	r5, [r3, r5, lsl #2]
   18868:	str	r6, [sp, #12]
   1886c:	add	r6, r6, r6, lsl #1
   18870:	lsl	sl, r6, #2
   18874:	ldr	r3, [r4, #20]
   18878:	add	r3, r3, sl
   1887c:	str	r8, [r3, #4]
   18880:	mov	r2, r7
   18884:	mov	r1, r5
   18888:	mov	r0, r4
   1888c:	bl	17da8 <__assert_fail@plt+0x6b00>
   18890:	mov	r6, r0
   18894:	cmn	r0, #1
   18898:	beq	18b20 <__assert_fail@plt+0x7878>
   1889c:	ldr	r3, [r4, #12]
   188a0:	ldr	r2, [r3, fp]
   188a4:	ldr	r1, [sp, #12]
   188a8:	str	r2, [r3, r1, lsl #2]
   188ac:	ldr	r0, [r4, #20]
   188b0:	mov	r1, r6
   188b4:	add	r0, r0, sl
   188b8:	bl	186f4 <__assert_fail@plt+0x744c>
   188bc:	cmp	r0, #0
   188c0:	bne	18a28 <__assert_fail@plt+0x7780>
   188c4:	mov	r0, #12
   188c8:	b	18b4c <__assert_fail@plt+0x78a4>
   188cc:	ldr	r3, [r4, #12]
   188d0:	ldr	r2, [r3, r5, lsl #2]
   188d4:	str	r2, [r3, r6, lsl #2]
   188d8:	b	18b4c <__assert_fail@plt+0x78a4>
   188dc:	ldr	r2, [r2, #8]
   188e0:	ldr	fp, [r2]
   188e4:	add	sl, r6, r6, lsl #1
   188e8:	lsl	sl, sl, #2
   188ec:	add	r3, r3, sl
   188f0:	str	r8, [r3, #4]
   188f4:	cmp	r5, r9
   188f8:	movne	r3, #0
   188fc:	moveq	r3, #1
   18900:	cmp	r5, r6
   18904:	moveq	r3, #0
   18908:	cmp	r3, #0
   1890c:	bne	18960 <__assert_fail@plt+0x76b8>
   18910:	ldr	r3, [r4]
   18914:	add	r1, r3, r1
   18918:	ldr	r3, [r1, #4]
   1891c:	ubfx	r3, r3, #8, #10
   18920:	orr	r7, r7, r3
   18924:	mov	r2, r7
   18928:	mov	r1, fp
   1892c:	mov	r0, r4
   18930:	bl	17da8 <__assert_fail@plt+0x6b00>
   18934:	mov	r6, r0
   18938:	cmn	r0, #1
   1893c:	beq	18b28 <__assert_fail@plt+0x7880>
   18940:	ldr	r0, [r4, #20]
   18944:	mov	r1, r6
   18948:	add	r0, r0, sl
   1894c:	bl	186f4 <__assert_fail@plt+0x744c>
   18950:	cmp	r0, #0
   18954:	beq	18980 <__assert_fail@plt+0x76d8>
   18958:	mov	r5, fp
   1895c:	b	18a28 <__assert_fail@plt+0x7780>
   18960:	ldr	r0, [r4, #20]
   18964:	mov	r1, fp
   18968:	add	r0, r0, sl
   1896c:	bl	186f4 <__assert_fail@plt+0x744c>
   18970:	cmp	r0, #0
   18974:	movne	r0, #0
   18978:	moveq	r0, #12
   1897c:	b	18b4c <__assert_fail@plt+0x78a4>
   18980:	mov	r0, #12
   18984:	b	18b4c <__assert_fail@plt+0x78a4>
   18988:	sub	r1, r1, #1
   1898c:	add	r2, r2, r0
   18990:	ldrb	r3, [r2, #6]
   18994:	ubfx	r3, r3, #2, #1
   18998:	cmp	r1, #0
   1899c:	movle	r3, #0
   189a0:	andgt	r3, r3, #1
   189a4:	cmp	r3, #0
   189a8:	beq	18ac0 <__assert_fail@plt+0x7818>
   189ac:	ldr	r3, [ip, #-4]!
   189b0:	cmp	r5, r3
   189b4:	bne	18988 <__assert_fail@plt+0x76e0>
   189b8:	ldr	r3, [r2, #4]
   189bc:	ubfx	r3, r3, #8, #10
   189c0:	cmp	r7, r3
   189c4:	bne	18988 <__assert_fail@plt+0x76e0>
   189c8:	cmn	r1, #1
   189cc:	beq	18ac0 <__assert_fail@plt+0x7818>
   189d0:	ldr	r0, [r4, #20]
   189d4:	add	r0, r0, fp
   189d8:	bl	186f4 <__assert_fail@plt+0x744c>
   189dc:	cmp	r0, #0
   189e0:	beq	18b40 <__assert_fail@plt+0x7898>
   189e4:	ldr	r3, [r4, #20]
   189e8:	add	sl, r3, sl
   189ec:	ldr	r3, [sl, #8]
   189f0:	ldr	r5, [r3, #4]
   189f4:	mov	r2, r7
   189f8:	mov	r1, r5
   189fc:	mov	r0, r4
   18a00:	bl	17da8 <__assert_fail@plt+0x6b00>
   18a04:	mov	r6, r0
   18a08:	cmn	r0, #1
   18a0c:	beq	18b48 <__assert_fail@plt+0x78a0>
   18a10:	ldr	r0, [r4, #20]
   18a14:	mov	r1, r6
   18a18:	add	r0, r0, fp
   18a1c:	bl	186f4 <__assert_fail@plt+0x744c>
   18a20:	cmp	r0, #0
   18a24:	beq	18b18 <__assert_fail@plt+0x7870>
   18a28:	lsl	r1, r5, #3
   18a2c:	ldr	r3, [r4]
   18a30:	add	r3, r3, r1
   18a34:	ldrb	r3, [r3, #4]
   18a38:	cmp	r3, #4
   18a3c:	beq	1885c <__assert_fail@plt+0x75b4>
   18a40:	ldr	r3, [r4, #20]
   18a44:	add	sl, r5, r5, lsl #1
   18a48:	lsl	sl, sl, #2
   18a4c:	add	r2, r3, sl
   18a50:	ldr	r0, [r2, #4]
   18a54:	cmp	r0, #0
   18a58:	beq	188cc <__assert_fail@plt+0x7624>
   18a5c:	cmp	r0, #1
   18a60:	beq	188dc <__assert_fail@plt+0x7634>
   18a64:	ldr	r2, [r2, #8]
   18a68:	ldr	r5, [r2]
   18a6c:	add	r6, r6, r6, lsl #1
   18a70:	lsl	fp, r6, #2
   18a74:	add	r3, r3, fp
   18a78:	str	r8, [r3, #4]
   18a7c:	ldr	lr, [r4, #8]
   18a80:	sub	r1, lr, #1
   18a84:	ldr	r0, [r4]
   18a88:	add	r2, r0, r1, lsl #3
   18a8c:	ldrb	r3, [r2, #6]
   18a90:	ubfx	r3, r3, #2, #1
   18a94:	cmp	r1, #0
   18a98:	movle	r3, #0
   18a9c:	andgt	r3, r3, #1
   18aa0:	cmp	r3, #0
   18aa4:	beq	18ac0 <__assert_fail@plt+0x7818>
   18aa8:	ldr	ip, [r4, #16]
   18aac:	add	ip, ip, lr, lsl #2
   18ab0:	add	r0, r0, lr, lsl #3
   18ab4:	sub	r0, r0, r2
   18ab8:	sub	r0, r0, #16
   18abc:	b	189ac <__assert_fail@plt+0x7704>
   18ac0:	mov	r2, r7
   18ac4:	mov	r1, r5
   18ac8:	mov	r0, r4
   18acc:	bl	17da8 <__assert_fail@plt+0x6b00>
   18ad0:	mov	r6, r0
   18ad4:	cmn	r0, #1
   18ad8:	beq	18b30 <__assert_fail@plt+0x7888>
   18adc:	ldr	r0, [r4, #20]
   18ae0:	mov	r1, r6
   18ae4:	add	r0, r0, fp
   18ae8:	bl	186f4 <__assert_fail@plt+0x744c>
   18aec:	cmp	r0, #0
   18af0:	beq	18b38 <__assert_fail@plt+0x7890>
   18af4:	str	r7, [sp]
   18af8:	mov	r3, r9
   18afc:	mov	r2, r6
   18b00:	mov	r1, r5
   18b04:	mov	r0, r4
   18b08:	bl	18828 <__assert_fail@plt+0x7580>
   18b0c:	cmp	r0, #0
   18b10:	beq	189e4 <__assert_fail@plt+0x773c>
   18b14:	b	18b4c <__assert_fail@plt+0x78a4>
   18b18:	mov	r0, #12
   18b1c:	b	18b4c <__assert_fail@plt+0x78a4>
   18b20:	mov	r0, #12
   18b24:	b	18b4c <__assert_fail@plt+0x78a4>
   18b28:	mov	r0, #12
   18b2c:	b	18b4c <__assert_fail@plt+0x78a4>
   18b30:	mov	r0, #12
   18b34:	b	18b4c <__assert_fail@plt+0x78a4>
   18b38:	mov	r0, #12
   18b3c:	b	18b4c <__assert_fail@plt+0x78a4>
   18b40:	mov	r0, #12
   18b44:	b	18b4c <__assert_fail@plt+0x78a4>
   18b48:	mov	r0, #12
   18b4c:	add	sp, sp, #20
   18b50:	ldrd	r4, [sp]
   18b54:	ldrd	r6, [sp, #8]
   18b58:	ldrd	r8, [sp, #16]
   18b5c:	ldrd	sl, [sp, #24]
   18b60:	add	sp, sp, #32
   18b64:	pop	{pc}		; (ldr pc, [sp], #4)
   18b68:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18b6c:	strd	r6, [sp, #8]
   18b70:	strd	r8, [sp, #16]
   18b74:	str	sl, [sp, #24]
   18b78:	str	lr, [sp, #28]
   18b7c:	sub	sp, sp, #8
   18b80:	mov	r6, r0
   18b84:	mov	r7, r1
   18b88:	mov	r4, r2
   18b8c:	mov	r9, r3
   18b90:	ldr	r8, [sp, #40]	; 0x28
   18b94:	b	18be0 <__assert_fail@plt+0x7938>
   18b98:	mov	r1, r4
   18b9c:	mov	r0, r7
   18ba0:	bl	186f4 <__assert_fail@plt+0x744c>
   18ba4:	cmp	r0, #0
   18ba8:	beq	18c68 <__assert_fail@plt+0x79c0>
   18bac:	add	r5, r5, r5, lsl #1
   18bb0:	lsl	r5, r5, #2
   18bb4:	ldr	r3, [r6, #20]
   18bb8:	add	r3, r3, r5
   18bbc:	ldr	sl, [r3, #4]
   18bc0:	cmp	sl, #0
   18bc4:	beq	18c6c <__assert_fail@plt+0x79c4>
   18bc8:	cmp	sl, #2
   18bcc:	beq	18c38 <__assert_fail@plt+0x7990>
   18bd0:	ldr	r3, [r6, #20]
   18bd4:	add	r5, r3, r5
   18bd8:	ldr	r3, [r5, #8]
   18bdc:	ldr	r4, [r3]
   18be0:	mov	r1, r4
   18be4:	mov	r0, r7
   18be8:	bl	1506c <__assert_fail@plt+0x3dc4>
   18bec:	subs	sl, r0, #0
   18bf0:	bne	18c60 <__assert_fail@plt+0x79b8>
   18bf4:	mov	r5, r4
   18bf8:	ldr	r3, [r6]
   18bfc:	add	r2, r3, r4, lsl #3
   18c00:	ldrb	r2, [r2, #4]
   18c04:	cmp	r2, r8
   18c08:	bne	18b98 <__assert_fail@plt+0x78f0>
   18c0c:	ldr	r3, [r3, r4, lsl #3]
   18c10:	cmp	r3, r9
   18c14:	bne	18b98 <__assert_fail@plt+0x78f0>
   18c18:	cmp	r8, #9
   18c1c:	bne	18c6c <__assert_fail@plt+0x79c4>
   18c20:	mov	r1, r4
   18c24:	mov	r0, r7
   18c28:	bl	186f4 <__assert_fail@plt+0x744c>
   18c2c:	cmp	r0, #0
   18c30:	moveq	sl, #12
   18c34:	b	18c6c <__assert_fail@plt+0x79c4>
   18c38:	ldr	r3, [r3, #8]
   18c3c:	ldr	r2, [r3, #4]
   18c40:	str	r8, [sp]
   18c44:	mov	r3, r9
   18c48:	mov	r1, r7
   18c4c:	mov	r0, r6
   18c50:	bl	18b68 <__assert_fail@plt+0x78c0>
   18c54:	subs	sl, r0, #0
   18c58:	beq	18bd0 <__assert_fail@plt+0x7928>
   18c5c:	b	18c6c <__assert_fail@plt+0x79c4>
   18c60:	mov	sl, #0
   18c64:	b	18c6c <__assert_fail@plt+0x79c4>
   18c68:	mov	sl, #12
   18c6c:	mov	r0, sl
   18c70:	add	sp, sp, #8
   18c74:	ldrd	r4, [sp]
   18c78:	ldrd	r6, [sp, #8]
   18c7c:	ldrd	r8, [sp, #16]
   18c80:	ldr	sl, [sp, #24]
   18c84:	add	sp, sp, #28
   18c88:	pop	{pc}		; (ldr pc, [sp], #4)
   18c8c:	strd	r4, [sp, #-16]!
   18c90:	str	r6, [sp, #8]
   18c94:	str	lr, [sp, #12]
   18c98:	subs	r6, r1, #0
   18c9c:	moveq	r2, #0
   18ca0:	beq	18e08 <__assert_fail@plt+0x7b60>
   18ca4:	ldr	r2, [r6, #4]
   18ca8:	cmp	r2, #0
   18cac:	beq	18e08 <__assert_fail@plt+0x7b60>
   18cb0:	mov	r4, r0
   18cb4:	ldr	r1, [r0]
   18cb8:	ldr	r3, [r0, #4]
   18cbc:	add	r0, r3, r2, lsl #1
   18cc0:	cmp	r1, r0
   18cc4:	blt	18ce4 <__assert_fail@plt+0x7a3c>
   18cc8:	cmp	r3, #0
   18ccc:	beq	18d18 <__assert_fail@plt+0x7a70>
   18cd0:	ldr	r2, [r6, #4]
   18cd4:	add	r5, r3, r2, lsl #1
   18cd8:	sub	r2, r2, #1
   18cdc:	sub	r3, r3, #1
   18ce0:	b	18d50 <__assert_fail@plt+0x7aa8>
   18ce4:	add	r1, r2, r1
   18ce8:	lsl	r5, r1, #1
   18cec:	lsl	r1, r1, #3
   18cf0:	ldr	r0, [r4, #8]
   18cf4:	bl	23d84 <__assert_fail@plt+0x12adc>
   18cf8:	cmp	r0, #0
   18cfc:	beq	18e34 <__assert_fail@plt+0x7b8c>
   18d00:	str	r0, [r4, #8]
   18d04:	str	r5, [r4]
   18d08:	ldr	r3, [r4, #4]
   18d0c:	cmp	r3, #0
   18d10:	bne	18cd0 <__assert_fail@plt+0x7a28>
   18d14:	b	18d1c <__assert_fail@plt+0x7a74>
   18d18:	ldr	r0, [r4, #8]
   18d1c:	ldr	r3, [r6, #4]
   18d20:	str	r3, [r4, #4]
   18d24:	ldr	r2, [r6, #4]
   18d28:	lsl	r2, r2, #2
   18d2c:	ldr	r1, [r6, #8]
   18d30:	bl	11038 <memcpy@plt>
   18d34:	mov	r2, #0
   18d38:	b	18e08 <__assert_fail@plt+0x7b60>
   18d3c:	cmp	r0, r1
   18d40:	sublt	r2, r2, #1
   18d44:	sublt	r5, r5, #1
   18d48:	strlt	r1, [ip, r5, lsl #2]
   18d4c:	subge	r3, r3, #1
   18d50:	cmp	r2, #0
   18d54:	cmpge	r3, #0
   18d58:	blt	18d80 <__assert_fail@plt+0x7ad8>
   18d5c:	ldr	ip, [r4, #8]
   18d60:	ldr	r0, [ip, r3, lsl #2]
   18d64:	ldr	r1, [r6, #8]
   18d68:	ldr	r1, [r1, r2, lsl #2]
   18d6c:	cmp	r0, r1
   18d70:	subeq	r2, r2, #1
   18d74:	subeq	r3, r3, #1
   18d78:	bne	18d3c <__assert_fail@plt+0x7a94>
   18d7c:	b	18d50 <__assert_fail@plt+0x7aa8>
   18d80:	cmp	r2, #0
   18d84:	bge	18db0 <__assert_fail@plt+0x7b08>
   18d88:	ldr	r3, [r4, #4]
   18d8c:	ldr	r2, [r6, #4]
   18d90:	add	r2, r3, r2, lsl #1
   18d94:	sub	lr, r2, #1
   18d98:	subs	r2, r2, r5
   18d9c:	beq	18e08 <__assert_fail@plt+0x7b60>
   18da0:	sub	ip, r3, #1
   18da4:	add	r3, r3, r2
   18da8:	str	r3, [r4, #4]
   18dac:	b	18de0 <__assert_fail@plt+0x7b38>
   18db0:	add	r2, r2, #1
   18db4:	sub	r5, r5, r2
   18db8:	ldr	r0, [r4, #8]
   18dbc:	lsl	r2, r2, #2
   18dc0:	ldr	r1, [r6, #8]
   18dc4:	add	r0, r0, r5, lsl #2
   18dc8:	bl	11038 <memcpy@plt>
   18dcc:	b	18d88 <__assert_fail@plt+0x7ae0>
   18dd0:	add	r0, ip, r2
   18dd4:	str	r1, [r3, r0, lsl #2]
   18dd8:	subs	ip, ip, #1
   18ddc:	bmi	18e1c <__assert_fail@plt+0x7b74>
   18de0:	ldr	r3, [r4, #8]
   18de4:	ldr	r0, [r3, lr, lsl #2]
   18de8:	ldr	r1, [r3, ip, lsl #2]
   18dec:	cmp	r0, r1
   18df0:	ble	18dd0 <__assert_fail@plt+0x7b28>
   18df4:	sub	lr, lr, #1
   18df8:	add	r1, ip, r2
   18dfc:	str	r0, [r3, r1, lsl #2]
   18e00:	subs	r2, r2, #1
   18e04:	bne	18de0 <__assert_fail@plt+0x7b38>
   18e08:	mov	r0, r2
   18e0c:	ldrd	r4, [sp]
   18e10:	ldr	r6, [sp, #8]
   18e14:	add	sp, sp, #12
   18e18:	pop	{pc}		; (ldr pc, [sp], #4)
   18e1c:	ldr	r0, [r4, #8]
   18e20:	lsl	r2, r2, #2
   18e24:	add	r1, r0, r5, lsl #2
   18e28:	bl	11038 <memcpy@plt>
   18e2c:	mov	r2, #0
   18e30:	b	18e08 <__assert_fail@plt+0x7b60>
   18e34:	mov	r2, #12
   18e38:	b	18e08 <__assert_fail@plt+0x7b60>
   18e3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18e40:	strd	r6, [sp, #8]
   18e44:	strd	r8, [sp, #16]
   18e48:	strd	sl, [sp, #24]
   18e4c:	str	lr, [sp, #32]
   18e50:	sub	sp, sp, #44	; 0x2c
   18e54:	mov	sl, r0
   18e58:	mov	r4, r1
   18e5c:	mov	r5, r2
   18e60:	mov	fp, r3
   18e64:	add	r7, r2, r2, lsl #1
   18e68:	lsl	r7, r7, #2
   18e6c:	ldr	r3, [r1, #20]
   18e70:	add	r3, r3, r7
   18e74:	ldr	r1, [r3, #4]
   18e78:	add	r1, r1, #1
   18e7c:	add	r0, sp, #28
   18e80:	bl	1618c <__assert_fail@plt+0x4ee4>
   18e84:	subs	r9, r0, #0
   18e88:	bne	19050 <__assert_fail@plt+0x7da8>
   18e8c:	mov	r8, r7
   18e90:	ldr	r3, [sp, #32]
   18e94:	add	r2, r3, #1
   18e98:	str	r2, [sp, #32]
   18e9c:	ldr	r2, [sp, #36]	; 0x24
   18ea0:	str	r5, [r2, r3, lsl #2]
   18ea4:	ldr	r3, [r4, #24]
   18ea8:	add	r3, r3, r7
   18eac:	mvn	r2, #0
   18eb0:	str	r2, [r3, #4]
   18eb4:	ldr	r2, [r4]
   18eb8:	lsl	r6, r5, #3
   18ebc:	add	r1, r2, r6
   18ec0:	ldr	r0, [r1, #4]
   18ec4:	mov	r3, #65280	; 0xff00
   18ec8:	movt	r3, #3
   18ecc:	and	r3, r3, r0
   18ed0:	cmp	r3, #0
   18ed4:	beq	18f04 <__assert_fail@plt+0x7c5c>
   18ed8:	ldr	r3, [r4, #20]
   18edc:	add	r3, r3, r7
   18ee0:	ldr	r0, [r3, #4]
   18ee4:	cmp	r0, #0
   18ee8:	beq	19070 <__assert_fail@plt+0x7dc8>
   18eec:	ldr	r3, [r3, #8]
   18ef0:	ldr	r3, [r3]
   18ef4:	add	r2, r2, r3, lsl #3
   18ef8:	ldrb	r3, [r2, #6]
   18efc:	tst	r3, #4
   18f00:	beq	18f3c <__assert_fail@plt+0x7c94>
   18f04:	ldr	r3, [r4]
   18f08:	add	r6, r3, r6
   18f0c:	ldrb	r3, [r6, #4]
   18f10:	tst	r3, #8
   18f14:	beq	19070 <__assert_fail@plt+0x7dc8>
   18f18:	ldr	r3, [r4, #20]
   18f1c:	add	r3, r3, r7
   18f20:	ldr	r2, [r3, #4]
   18f24:	cmp	r2, #0
   18f28:	ble	19070 <__assert_fail@plt+0x7dc8>
   18f2c:	mov	r6, r9
   18f30:	mov	r2, #0
   18f34:	str	r2, [sp, #12]
   18f38:	b	18fb0 <__assert_fail@plt+0x7d08>
   18f3c:	ldr	r3, [r1, #4]
   18f40:	ubfx	r3, r3, #8, #10
   18f44:	str	r3, [sp]
   18f48:	mov	r3, r5
   18f4c:	mov	r2, r5
   18f50:	mov	r1, r5
   18f54:	mov	r0, r4
   18f58:	bl	18828 <__assert_fail@plt+0x7580>
   18f5c:	cmp	r0, #0
   18f60:	beq	18f04 <__assert_fail@plt+0x7c5c>
   18f64:	mov	r9, r0
   18f68:	b	19050 <__assert_fail@plt+0x7da8>
   18f6c:	mov	r1, r4
   18f70:	add	r0, sp, #16
   18f74:	bl	18e3c <__assert_fail@plt+0x7b94>
   18f78:	cmp	r0, #0
   18f7c:	beq	18ff4 <__assert_fail@plt+0x7d4c>
   18f80:	mov	r9, r0
   18f84:	b	19050 <__assert_fail@plt+0x7da8>
   18f88:	ldr	r0, [sp, #24]
   18f8c:	bl	23f40 <__assert_fail@plt+0x12c98>
   18f90:	mov	r3, #1
   18f94:	str	r3, [sp, #12]
   18f98:	add	r6, r6, #1
   18f9c:	ldr	r3, [r4, #20]
   18fa0:	add	r3, r3, r8
   18fa4:	ldr	r2, [r3, #4]
   18fa8:	cmp	r2, r6
   18fac:	ble	19020 <__assert_fail@plt+0x7d78>
   18fb0:	ldr	r3, [r3, #8]
   18fb4:	ldr	r2, [r3, r6, lsl #2]
   18fb8:	add	r5, r2, r2, lsl #1
   18fbc:	lsl	r5, r5, #2
   18fc0:	ldr	r0, [r4, #24]
   18fc4:	add	r1, r0, r5
   18fc8:	ldr	r3, [r1, #4]
   18fcc:	cmn	r3, #1
   18fd0:	moveq	r3, #1
   18fd4:	streq	r3, [sp, #12]
   18fd8:	beq	18f98 <__assert_fail@plt+0x7cf0>
   18fdc:	cmp	r3, #0
   18fe0:	beq	18f6c <__assert_fail@plt+0x7cc4>
   18fe4:	ldrd	r2, [r0, r5]
   18fe8:	strd	r2, [sp, #16]
   18fec:	ldr	r3, [r1, #8]
   18ff0:	str	r3, [sp, #24]
   18ff4:	add	r1, sp, #16
   18ff8:	add	r0, sp, #28
   18ffc:	bl	18c8c <__assert_fail@plt+0x79e4>
   19000:	cmp	r0, #0
   19004:	bne	18f80 <__assert_fail@plt+0x7cd8>
   19008:	ldr	r3, [r4, #24]
   1900c:	add	r5, r3, r5
   19010:	ldr	r3, [r5, #4]
   19014:	cmp	r3, #0
   19018:	bne	18f98 <__assert_fail@plt+0x7cf0>
   1901c:	b	18f88 <__assert_fail@plt+0x7ce0>
   19020:	eor	fp, fp, #1
   19024:	ldr	r3, [sp, #12]
   19028:	tst	r3, fp
   1902c:	beq	19070 <__assert_fail@plt+0x7dc8>
   19030:	ldr	r3, [r4, #24]
   19034:	add	r7, r3, r7
   19038:	mov	r3, #0
   1903c:	str	r3, [r7, #4]
   19040:	ldrd	r2, [sp, #28]
   19044:	strd	r2, [sl]
   19048:	ldr	r3, [sp, #36]	; 0x24
   1904c:	str	r3, [sl, #8]
   19050:	mov	r0, r9
   19054:	add	sp, sp, #44	; 0x2c
   19058:	ldrd	r4, [sp]
   1905c:	ldrd	r6, [sp, #8]
   19060:	ldrd	r8, [sp, #16]
   19064:	ldrd	sl, [sp, #24]
   19068:	add	sp, sp, #32
   1906c:	pop	{pc}		; (ldr pc, [sp], #4)
   19070:	ldr	r1, [r4, #24]
   19074:	add	r0, r1, r7
   19078:	ldrd	r2, [sp, #28]
   1907c:	strd	r2, [r1, r7]
   19080:	ldr	r3, [sp, #36]	; 0x24
   19084:	str	r3, [r0, #8]
   19088:	b	19040 <__assert_fail@plt+0x7d98>
   1908c:	strd	r4, [sp, #-16]!
   19090:	str	r6, [sp, #8]
   19094:	str	lr, [sp, #12]
   19098:	mov	r5, r0
   1909c:	cmp	r1, #0
   190a0:	ldrlt	r0, [r0, #60]	; 0x3c
   190a4:	blt	190e4 <__assert_fail@plt+0x7e3c>
   190a8:	ldr	r3, [r5, #48]	; 0x30
   190ac:	cmp	r3, r1
   190b0:	beq	190f4 <__assert_fail@plt+0x7e4c>
   190b4:	ldr	r3, [r5, #80]	; 0x50
   190b8:	cmp	r3, #1
   190bc:	ble	1915c <__assert_fail@plt+0x7eb4>
   190c0:	ldr	r3, [r5, #8]
   190c4:	add	r3, r3, r1, lsl #2
   190c8:	ldr	r4, [r3], #-4
   190cc:	cmn	r4, #1
   190d0:	bne	19108 <__assert_fail@plt+0x7e60>
   190d4:	sub	r1, r1, #1
   190d8:	cmn	r1, #1
   190dc:	bne	190c8 <__assert_fail@plt+0x7e20>
   190e0:	ldr	r0, [r5, #60]	; 0x3c
   190e4:	ldrd	r4, [sp]
   190e8:	ldr	r6, [sp, #8]
   190ec:	add	sp, sp, #12
   190f0:	pop	{pc}		; (ldr pc, [sp], #4)
   190f4:	and	r2, r2, #2
   190f8:	cmp	r2, #0
   190fc:	movne	r0, #8
   19100:	moveq	r0, #10
   19104:	b	190e4 <__assert_fail@plt+0x7e3c>
   19108:	ldrb	r3, [r5, #78]	; 0x4e
   1910c:	cmp	r3, #0
   19110:	bne	19134 <__assert_fail@plt+0x7e8c>
   19114:	cmp	r4, #10
   19118:	movne	r0, #0
   1911c:	bne	190e4 <__assert_fail@plt+0x7e3c>
   19120:	ldrb	r3, [r5, #77]	; 0x4d
   19124:	cmp	r3, #0
   19128:	moveq	r0, #0
   1912c:	movne	r0, #2
   19130:	b	190e4 <__assert_fail@plt+0x7e3c>
   19134:	mov	r0, r4
   19138:	bl	111ac <iswalnum@plt>
   1913c:	adds	r3, r0, #0
   19140:	movne	r3, #1
   19144:	cmp	r4, #95	; 0x5f
   19148:	orreq	r3, r3, #1
   1914c:	cmp	r3, #0
   19150:	movne	r0, #1
   19154:	bne	190e4 <__assert_fail@plt+0x7e3c>
   19158:	b	19114 <__assert_fail@plt+0x7e6c>
   1915c:	ldr	r3, [r5, #4]
   19160:	ldrb	r3, [r3, r1]
   19164:	asr	r0, r3, #5
   19168:	ldr	r1, [r5, #68]	; 0x44
   1916c:	and	r2, r3, #31
   19170:	ldr	r0, [r1, r0, lsl #2]
   19174:	lsr	r0, r0, r2
   19178:	ands	r0, r0, #1
   1917c:	bne	190e4 <__assert_fail@plt+0x7e3c>
   19180:	cmp	r3, #10
   19184:	bne	190e4 <__assert_fail@plt+0x7e3c>
   19188:	ldrb	r3, [r5, #77]	; 0x4d
   1918c:	cmp	r3, #0
   19190:	movne	r0, #2
   19194:	b	190e4 <__assert_fail@plt+0x7e3c>
   19198:	str	r4, [sp, #-8]!
   1919c:	str	lr, [sp, #4]
   191a0:	ldr	r3, [r0, #4]
   191a4:	ldrb	ip, [r3, r2]
   191a8:	ldrb	r3, [r1, #4]
   191ac:	sub	r3, r3, #1
   191b0:	cmp	r3, #6
   191b4:	ldrls	pc, [pc, r3, lsl #2]
   191b8:	b	192e0 <__assert_fail@plt+0x8038>
   191bc:	ldrdeq	r9, [r1], -r8
   191c0:	andeq	r9, r1, r0, ror #5
   191c4:	andeq	r9, r1, ip, ror #3
   191c8:	andeq	r9, r1, r0, ror #5
   191cc:	andeq	r9, r1, ip, ror #4
   191d0:	andeq	r9, r1, r0, ror #5
   191d4:	andeq	r9, r1, r0, ror #4
   191d8:	ldrb	r3, [r1]
   191dc:	cmp	r3, ip
   191e0:	movne	r0, #0
   191e4:	bne	192e4 <__assert_fail@plt+0x803c>
   191e8:	b	19208 <__assert_fail@plt+0x7f60>
   191ec:	lsr	lr, ip, #5
   191f0:	ldr	r3, [r1]
   191f4:	and	ip, ip, #31
   191f8:	ldr	r3, [r3, lr, lsl #2]
   191fc:	lsr	ip, r3, ip
   19200:	tst	ip, #1
   19204:	beq	192f0 <__assert_fail@plt+0x8048>
   19208:	ldr	ip, [r1, #4]
   1920c:	mov	r3, #65280	; 0xff00
   19210:	movt	r3, #3
   19214:	and	r3, r3, ip
   19218:	cmp	r3, #0
   1921c:	moveq	r0, #1
   19220:	beq	192e4 <__assert_fail@plt+0x803c>
   19224:	mov	r3, r2
   19228:	mov	r4, r1
   1922c:	ldr	r2, [r0, #88]	; 0x58
   19230:	mov	r1, r3
   19234:	bl	1908c <__assert_fail@plt+0x7de4>
   19238:	ldr	r3, [r4, #4]
   1923c:	ubfx	r3, r3, #8, #10
   19240:	tst	r3, #4
   19244:	beq	192ac <__assert_fail@plt+0x8004>
   19248:	tst	r0, #1
   1924c:	beq	192f8 <__assert_fail@plt+0x8050>
   19250:	tst	r3, #8
   19254:	beq	192bc <__assert_fail@plt+0x8014>
   19258:	mov	r0, #0
   1925c:	b	192e4 <__assert_fail@plt+0x803c>
   19260:	tst	ip, #128	; 0x80
   19264:	movne	r0, #0
   19268:	bne	192e4 <__assert_fail@plt+0x803c>
   1926c:	cmp	ip, #10
   19270:	beq	19294 <__assert_fail@plt+0x7fec>
   19274:	cmp	ip, #0
   19278:	bne	19208 <__assert_fail@plt+0x7f60>
   1927c:	ldr	r3, [r0, #84]	; 0x54
   19280:	ldr	r3, [r3, #128]	; 0x80
   19284:	tst	r3, #128	; 0x80
   19288:	movne	r0, #0
   1928c:	beq	19208 <__assert_fail@plt+0x7f60>
   19290:	b	192e4 <__assert_fail@plt+0x803c>
   19294:	ldr	r3, [r0, #84]	; 0x54
   19298:	ldr	r3, [r3, #128]	; 0x80
   1929c:	tst	r3, #64	; 0x40
   192a0:	bne	19208 <__assert_fail@plt+0x7f60>
   192a4:	mov	r0, #0
   192a8:	b	192e4 <__assert_fail@plt+0x803c>
   192ac:	tst	r3, #8
   192b0:	beq	192bc <__assert_fail@plt+0x8014>
   192b4:	tst	r0, #1
   192b8:	bne	19300 <__assert_fail@plt+0x8058>
   192bc:	tst	r3, #32
   192c0:	beq	192d0 <__assert_fail@plt+0x8028>
   192c4:	tst	r0, #2
   192c8:	moveq	r0, #0
   192cc:	beq	192e4 <__assert_fail@plt+0x803c>
   192d0:	tst	r3, #128	; 0x80
   192d4:	ubfxne	r0, r0, #3, #1
   192d8:	moveq	r0, #1
   192dc:	b	192e4 <__assert_fail@plt+0x803c>
   192e0:	mov	r0, #0
   192e4:	ldr	r4, [sp]
   192e8:	add	sp, sp, #4
   192ec:	pop	{pc}		; (ldr pc, [sp], #4)
   192f0:	mov	r0, #0
   192f4:	b	192e4 <__assert_fail@plt+0x803c>
   192f8:	mov	r0, #0
   192fc:	b	192e4 <__assert_fail@plt+0x803c>
   19300:	mov	r0, #0
   19304:	b	192e4 <__assert_fail@plt+0x803c>
   19308:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1930c:	strd	r6, [sp, #8]
   19310:	strd	r8, [sp, #16]
   19314:	strd	sl, [sp, #24]
   19318:	str	lr, [sp, #32]
   1931c:	sub	sp, sp, #4
   19320:	ldr	r7, [r0, #84]	; 0x54
   19324:	ldr	r3, [r1, #4]
   19328:	cmp	r3, #0
   1932c:	ble	1942c <__assert_fail@plt+0x8184>
   19330:	mov	r9, r2
   19334:	mov	r6, r1
   19338:	mov	r8, r0
   1933c:	mov	r4, #0
   19340:	b	19374 <__assert_fail@plt+0x80cc>
   19344:	lsl	sl, r1, #1
   19348:	lsl	r1, r1, #3
   1934c:	bl	23d84 <__assert_fail@plt+0x12adc>
   19350:	cmp	r0, #0
   19354:	beq	19434 <__assert_fail@plt+0x818c>
   19358:	str	r0, [r8, #132]	; 0x84
   1935c:	str	sl, [r8, #128]	; 0x80
   19360:	b	193c0 <__assert_fail@plt+0x8118>
   19364:	add	r4, r4, #1
   19368:	ldr	r3, [r6, #4]
   1936c:	cmp	r3, r4
   19370:	ble	1940c <__assert_fail@plt+0x8164>
   19374:	ldr	r3, [r6, #8]
   19378:	ldr	r5, [r3, r4, lsl #2]
   1937c:	ldr	r3, [r7]
   19380:	add	r2, r3, r5, lsl #3
   19384:	ldrb	r2, [r2, #4]
   19388:	cmp	r2, #8
   1938c:	bne	19364 <__assert_fail@plt+0x80bc>
   19390:	ldr	r3, [r3, r5, lsl #3]
   19394:	cmp	r3, #31
   19398:	bgt	19364 <__assert_fail@plt+0x80bc>
   1939c:	ldr	r2, [r7, #80]	; 0x50
   193a0:	lsr	r3, r2, r3
   193a4:	tst	r3, #1
   193a8:	beq	19364 <__assert_fail@plt+0x80bc>
   193ac:	ldr	r0, [r8, #132]	; 0x84
   193b0:	ldr	r1, [r8, #128]	; 0x80
   193b4:	ldr	r3, [r8, #124]	; 0x7c
   193b8:	cmp	r1, r3
   193bc:	beq	19344 <__assert_fail@plt+0x809c>
   193c0:	ldr	fp, [r8, #124]	; 0x7c
   193c4:	ldr	sl, [r8, #132]	; 0x84
   193c8:	mov	r1, #24
   193cc:	mov	r0, #1
   193d0:	bl	23cd4 <__assert_fail@plt+0x12a2c>
   193d4:	str	r0, [sl, fp, lsl #2]
   193d8:	ldr	r2, [r8, #124]	; 0x7c
   193dc:	ldr	r3, [r8, #132]	; 0x84
   193e0:	ldr	r3, [r3, r2, lsl #2]
   193e4:	cmp	r3, #0
   193e8:	beq	19434 <__assert_fail@plt+0x818c>
   193ec:	str	r5, [r3, #4]
   193f0:	ldr	r2, [r8, #132]	; 0x84
   193f4:	ldr	r3, [r8, #124]	; 0x7c
   193f8:	add	r1, r3, #1
   193fc:	str	r1, [r8, #124]	; 0x7c
   19400:	ldr	r3, [r2, r3, lsl #2]
   19404:	str	r9, [r3]
   19408:	b	19364 <__assert_fail@plt+0x80bc>
   1940c:	mov	r0, #0
   19410:	add	sp, sp, #4
   19414:	ldrd	r4, [sp]
   19418:	ldrd	r6, [sp, #8]
   1941c:	ldrd	r8, [sp, #16]
   19420:	ldrd	sl, [sp, #24]
   19424:	add	sp, sp, #32
   19428:	pop	{pc}		; (ldr pc, [sp], #4)
   1942c:	mov	r0, #0
   19430:	b	19410 <__assert_fail@plt+0x8168>
   19434:	mov	r0, #12
   19438:	b	19410 <__assert_fail@plt+0x8168>
   1943c:	strd	r4, [sp, #-16]!
   19440:	str	r6, [sp, #8]
   19444:	str	lr, [sp, #12]
   19448:	mov	r4, r0
   1944c:	mov	r5, r1
   19450:	ldr	r6, [r0, #104]	; 0x68
   19454:	ldr	r3, [r0, #36]	; 0x24
   19458:	cmp	r3, r1
   1945c:	bgt	1946c <__assert_fail@plt+0x81c4>
   19460:	ldr	r2, [r0, #48]	; 0x30
   19464:	cmp	r3, r2
   19468:	blt	19484 <__assert_fail@plt+0x81dc>
   1946c:	ldr	r3, [r4, #28]
   19470:	cmp	r3, r5
   19474:	bgt	19498 <__assert_fail@plt+0x81f0>
   19478:	ldr	r2, [r4, #48]	; 0x30
   1947c:	cmp	r3, r2
   19480:	bge	19498 <__assert_fail@plt+0x81f0>
   19484:	add	r1, r5, #1
   19488:	mov	r0, r4
   1948c:	bl	16e90 <__assert_fail@plt+0x5be8>
   19490:	cmp	r0, #0
   19494:	bne	194c8 <__assert_fail@plt+0x8220>
   19498:	cmp	r6, r5
   1949c:	movge	r0, #0
   194a0:	bge	194c8 <__assert_fail@plt+0x8220>
   194a4:	sub	r2, r5, r6
   194a8:	add	r6, r6, #1
   194ac:	ldr	r0, [r4, #100]	; 0x64
   194b0:	lsl	r2, r2, #2
   194b4:	mov	r1, #0
   194b8:	add	r0, r0, r6, lsl #2
   194bc:	bl	111c4 <memset@plt>
   194c0:	str	r5, [r4, #104]	; 0x68
   194c4:	mov	r0, #0
   194c8:	ldrd	r4, [sp]
   194cc:	ldr	r6, [sp, #8]
   194d0:	add	sp, sp, #12
   194d4:	pop	{pc}		; (ldr pc, [sp], #4)
   194d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   194dc:	strd	r6, [sp, #8]
   194e0:	strd	r8, [sp, #16]
   194e4:	strd	sl, [sp, #24]
   194e8:	str	lr, [sp, #32]
   194ec:	sub	sp, sp, #28
   194f0:	mov	r5, r0
   194f4:	mov	r6, r1
   194f8:	mov	r7, r2
   194fc:	mov	r8, r3
   19500:	ldr	r1, [r1, #4]
   19504:	add	r0, sp, #12
   19508:	bl	1618c <__assert_fail@plt+0x4ee4>
   1950c:	subs	r9, r0, #0
   19510:	bne	195e8 <__assert_fail@plt+0x8340>
   19514:	ldr	r3, [r6, #4]
   19518:	cmp	r3, #0
   1951c:	ble	19608 <__assert_fail@plt+0x8360>
   19520:	mov	r4, r9
   19524:	b	19588 <__assert_fail@plt+0x82e0>
   19528:	add	r0, r0, #1
   1952c:	cmp	lr, r0
   19530:	beq	195bc <__assert_fail@plt+0x8314>
   19534:	ldr	ip, [r3, #4]!
   19538:	add	fp, sl, ip, lsl #3
   1953c:	ldrb	fp, [fp, #4]
   19540:	cmp	r8, fp
   19544:	bne	19528 <__assert_fail@plt+0x8280>
   19548:	ldr	fp, [sl, ip, lsl #3]
   1954c:	cmp	r7, fp
   19550:	bne	19528 <__assert_fail@plt+0x8280>
   19554:	cmn	ip, #1
   19558:	beq	195bc <__assert_fail@plt+0x8314>
   1955c:	str	r8, [sp]
   19560:	mov	r3, r7
   19564:	add	r1, sp, #12
   19568:	mov	r0, r5
   1956c:	bl	18b68 <__assert_fail@plt+0x78c0>
   19570:	subs	sl, r0, #0
   19574:	bne	195dc <__assert_fail@plt+0x8334>
   19578:	add	r4, r4, #1
   1957c:	ldr	r3, [r6, #4]
   19580:	cmp	r3, r4
   19584:	ble	19608 <__assert_fail@plt+0x8360>
   19588:	ldr	r3, [r6, #8]
   1958c:	ldr	r2, [r3, r4, lsl #2]
   19590:	add	r3, r2, r2, lsl #1
   19594:	ldr	r1, [r5, #24]
   19598:	add	r1, r1, r3, lsl #2
   1959c:	ldr	lr, [r1, #4]
   195a0:	cmp	lr, #0
   195a4:	ble	195bc <__assert_fail@plt+0x8314>
   195a8:	ldr	sl, [r5]
   195ac:	ldr	r3, [r1, #8]
   195b0:	sub	r3, r3, #4
   195b4:	mov	r0, r9
   195b8:	b	19534 <__assert_fail@plt+0x828c>
   195bc:	add	r0, sp, #12
   195c0:	bl	18c8c <__assert_fail@plt+0x79e4>
   195c4:	subs	sl, r0, #0
   195c8:	beq	19578 <__assert_fail@plt+0x82d0>
   195cc:	ldr	r0, [sp, #20]
   195d0:	bl	23f40 <__assert_fail@plt+0x12c98>
   195d4:	mov	r9, sl
   195d8:	b	195e8 <__assert_fail@plt+0x8340>
   195dc:	ldr	r0, [sp, #20]
   195e0:	bl	23f40 <__assert_fail@plt+0x12c98>
   195e4:	mov	r9, sl
   195e8:	mov	r0, r9
   195ec:	add	sp, sp, #28
   195f0:	ldrd	r4, [sp]
   195f4:	ldrd	r6, [sp, #8]
   195f8:	ldrd	r8, [sp, #16]
   195fc:	ldrd	sl, [sp, #24]
   19600:	add	sp, sp, #32
   19604:	pop	{pc}		; (ldr pc, [sp], #4)
   19608:	ldr	r0, [r6, #8]
   1960c:	bl	23f40 <__assert_fail@plt+0x12c98>
   19610:	ldrd	r2, [sp, #12]
   19614:	strd	r2, [r6]
   19618:	ldr	r3, [sp, #20]
   1961c:	str	r3, [r6, #8]
   19620:	b	195e8 <__assert_fail@plt+0x8340>
   19624:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19628:	strd	r6, [sp, #8]
   1962c:	str	r8, [sp, #16]
   19630:	str	lr, [sp, #20]
   19634:	mov	r4, r0
   19638:	mov	r5, r1
   1963c:	mov	r1, r2
   19640:	ldr	r2, [r0, #88]	; 0x58
   19644:	bl	1908c <__assert_fail@plt+0x7de4>
   19648:	ldr	lr, [r5, #8]
   1964c:	cmp	lr, #0
   19650:	ble	196bc <__assert_fail@plt+0x8414>
   19654:	ldr	r3, [r4, #84]	; 0x54
   19658:	ldr	r4, [r3]
   1965c:	ldr	ip, [r5, #12]
   19660:	sub	ip, ip, #4
   19664:	mov	r1, #0
   19668:	and	r7, r0, #8
   1966c:	and	r6, r0, #2
   19670:	and	r5, r0, #1
   19674:	b	196d0 <__assert_fail@plt+0x8428>
   19678:	tst	r3, #8
   1967c:	beq	19688 <__assert_fail@plt+0x83e0>
   19680:	cmp	r5, #0
   19684:	bne	196c4 <__assert_fail@plt+0x841c>
   19688:	tst	r3, #32
   1968c:	beq	19698 <__assert_fail@plt+0x83f0>
   19690:	cmp	r6, #0
   19694:	beq	196c4 <__assert_fail@plt+0x841c>
   19698:	tst	r3, #128	; 0x80
   1969c:	beq	196a8 <__assert_fail@plt+0x8400>
   196a0:	cmp	r7, #0
   196a4:	beq	196c4 <__assert_fail@plt+0x841c>
   196a8:	ldrd	r4, [sp]
   196ac:	ldrd	r6, [sp, #8]
   196b0:	ldr	r8, [sp, #16]
   196b4:	add	sp, sp, #20
   196b8:	pop	{pc}		; (ldr pc, [sp], #4)
   196bc:	mov	r0, #0
   196c0:	b	196a8 <__assert_fail@plt+0x8400>
   196c4:	add	r1, r1, #1
   196c8:	cmp	lr, r1
   196cc:	beq	19710 <__assert_fail@plt+0x8468>
   196d0:	ldr	r0, [ip, #4]!
   196d4:	add	r2, r4, r0, lsl #3
   196d8:	ldr	r3, [r2, #4]
   196dc:	ubfx	r3, r3, #8, #10
   196e0:	ldrb	r2, [r2, #4]
   196e4:	cmp	r2, #2
   196e8:	bne	196c4 <__assert_fail@plt+0x841c>
   196ec:	cmp	r3, #0
   196f0:	beq	196a8 <__assert_fail@plt+0x8400>
   196f4:	tst	r3, #4
   196f8:	beq	19678 <__assert_fail@plt+0x83d0>
   196fc:	cmp	r5, #0
   19700:	beq	196c4 <__assert_fail@plt+0x841c>
   19704:	tst	r3, #8
   19708:	beq	19688 <__assert_fail@plt+0x83e0>
   1970c:	b	196c4 <__assert_fail@plt+0x841c>
   19710:	mov	r0, #0
   19714:	b	196a8 <__assert_fail@plt+0x8400>
   19718:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1971c:	strd	r6, [sp, #8]
   19720:	str	r8, [sp, #16]
   19724:	str	lr, [sp, #20]
   19728:	ldr	r7, [sp, #28]
   1972c:	subs	r5, r0, #0
   19730:	beq	197e4 <__assert_fail@plt+0x853c>
   19734:	ldr	r4, [r5]
   19738:	cmp	r4, #0
   1973c:	beq	197ec <__assert_fail@plt+0x8544>
   19740:	mov	r0, r3
   19744:	sub	r4, r4, #1
   19748:	str	r4, [r5]
   1974c:	add	r4, r4, r4, lsl #1
   19750:	lsl	r4, r4, #3
   19754:	ldr	r3, [r5, #8]
   19758:	ldr	r3, [r3, r4]
   1975c:	str	r3, [r1]
   19760:	lsl	r6, r2, #3
   19764:	ldr	r3, [r5, #8]
   19768:	add	r3, r3, r4
   1976c:	mov	r2, r6
   19770:	ldr	r1, [r3, #8]
   19774:	bl	11038 <memcpy@plt>
   19778:	ldr	r3, [r5, #8]
   1977c:	add	r3, r3, r4
   19780:	ldr	r1, [r3, #8]
   19784:	mov	r2, r6
   19788:	add	r1, r1, r6
   1978c:	ldr	r0, [sp, #24]
   19790:	bl	11038 <memcpy@plt>
   19794:	ldr	r0, [r7, #8]
   19798:	bl	23f40 <__assert_fail@plt+0x12c98>
   1979c:	ldr	r3, [r5, #8]
   197a0:	add	r3, r3, r4
   197a4:	ldr	r0, [r3, #8]
   197a8:	bl	23f40 <__assert_fail@plt+0x12c98>
   197ac:	ldr	r1, [r5, #8]
   197b0:	add	r1, r1, r4
   197b4:	ldrd	r2, [r1, #12]
   197b8:	strd	r2, [r7]
   197bc:	ldr	r3, [r1, #20]
   197c0:	str	r3, [r7, #8]
   197c4:	ldr	r3, [r5, #8]
   197c8:	add	r4, r3, r4
   197cc:	ldr	r0, [r4, #4]
   197d0:	ldrd	r4, [sp]
   197d4:	ldrd	r6, [sp, #8]
   197d8:	ldr	r8, [sp, #16]
   197dc:	add	sp, sp, #20
   197e0:	pop	{pc}		; (ldr pc, [sp], #4)
   197e4:	mvn	r0, #0
   197e8:	b	197d0 <__assert_fail@plt+0x8528>
   197ec:	mvn	r0, #0
   197f0:	b	197d0 <__assert_fail@plt+0x8528>
   197f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   197f8:	strd	r6, [sp, #8]
   197fc:	strd	r8, [sp, #16]
   19800:	str	sl, [sp, #24]
   19804:	str	lr, [sp, #28]
   19808:	mov	r6, r0
   1980c:	mov	r4, r1
   19810:	mov	r5, r2
   19814:	mov	r9, r3
   19818:	ldr	r7, [sp, #32]
   1981c:	ldr	r3, [sp, #36]	; 0x24
   19820:	tst	r3, #4194304	; 0x400000
   19824:	beq	19868 <__assert_fail@plt+0x85c0>
   19828:	movw	r1, #20920	; 0x51b8
   1982c:	movt	r1, #2
   19830:	mov	r0, r7
   19834:	bl	10fd8 <strcmp@plt>
   19838:	cmp	r0, #0
   1983c:	movweq	r7, #20912	; 0x51b0
   19840:	movteq	r7, #2
   19844:	beq	19868 <__assert_fail@plt+0x85c0>
   19848:	movw	r1, #20928	; 0x51c0
   1984c:	movt	r1, #2
   19850:	mov	r0, r7
   19854:	bl	10fd8 <strcmp@plt>
   19858:	movw	r3, #20912	; 0x51b0
   1985c:	movt	r3, #2
   19860:	cmp	r0, #0
   19864:	moveq	r7, r3
   19868:	ldr	r3, [r5, #36]	; 0x24
   1986c:	ldr	r2, [r9]
   19870:	cmp	r2, r3
   19874:	beq	198c4 <__assert_fail@plt+0x861c>
   19878:	ldr	r9, [r5, #12]
   1987c:	ldr	r8, [r5, #36]	; 0x24
   19880:	add	r3, r8, #1
   19884:	str	r3, [r5, #36]	; 0x24
   19888:	mov	r0, r7
   1988c:	bl	10fb4 <wctype@plt>
   19890:	str	r0, [r9, r8, lsl #2]
   19894:	movw	r1, #20936	; 0x51c8
   19898:	movt	r1, #2
   1989c:	mov	r0, r7
   198a0:	bl	10fd8 <strcmp@plt>
   198a4:	subs	r5, r0, #0
   198a8:	bne	19988 <__assert_fail@plt+0x86e0>
   198ac:	cmp	r6, #0
   198b0:	bne	198ec <__assert_fail@plt+0x8644>
   198b4:	bl	11170 <__ctype_b_loc@plt>
   198b8:	mov	r3, r5
   198bc:	mov	lr, #1
   198c0:	b	19944 <__assert_fail@plt+0x869c>
   198c4:	lsl	r3, r3, #1
   198c8:	add	r8, r3, #1
   198cc:	lsl	r1, r8, #2
   198d0:	ldr	r0, [r5, #12]
   198d4:	bl	23d84 <__assert_fail@plt+0x12adc>
   198d8:	cmp	r0, #0
   198dc:	beq	1a250 <__assert_fail@plt+0x8fa8>
   198e0:	str	r0, [r5, #12]
   198e4:	str	r8, [r9]
   198e8:	b	19878 <__assert_fail@plt+0x85d0>
   198ec:	bl	11170 <__ctype_b_loc@plt>
   198f0:	mov	r3, r5
   198f4:	mov	lr, #1
   198f8:	b	19908 <__assert_fail@plt+0x8660>
   198fc:	add	r3, r3, #1
   19900:	cmp	r3, #256	; 0x100
   19904:	beq	1a254 <__assert_fail@plt+0x8fac>
   19908:	ldr	r1, [r0]
   1990c:	lsl	r2, r3, #1
   19910:	ldrh	r2, [r1, r2]
   19914:	tst	r2, #8
   19918:	beq	198fc <__assert_fail@plt+0x8654>
   1991c:	ldrb	r2, [r6, r3]
   19920:	asr	ip, r2, #5
   19924:	and	r2, r2, #31
   19928:	ldr	r1, [r4, ip, lsl #2]
   1992c:	orr	r2, r1, lr, lsl r2
   19930:	str	r2, [r4, ip, lsl #2]
   19934:	b	198fc <__assert_fail@plt+0x8654>
   19938:	add	r3, r3, #1
   1993c:	cmp	r3, #256	; 0x100
   19940:	beq	1a254 <__assert_fail@plt+0x8fac>
   19944:	ldr	r1, [r0]
   19948:	lsl	r2, r3, #1
   1994c:	ldrh	r2, [r1, r2]
   19950:	tst	r2, #8
   19954:	beq	19938 <__assert_fail@plt+0x8690>
   19958:	add	r2, r3, #31
   1995c:	cmp	r3, #0
   19960:	movge	r2, r3
   19964:	asr	r2, r2, #5
   19968:	rsbs	r1, r3, #0
   1996c:	and	ip, r3, #31
   19970:	and	r1, r1, #31
   19974:	rsbpl	ip, r1, #0
   19978:	ldr	r1, [r4, r2, lsl #2]
   1997c:	orr	r1, r1, lr, lsl ip
   19980:	str	r1, [r4, r2, lsl #2]
   19984:	b	19938 <__assert_fail@plt+0x8690>
   19988:	movw	r1, #20944	; 0x51d0
   1998c:	movt	r1, #2
   19990:	mov	r0, r7
   19994:	bl	10fd8 <strcmp@plt>
   19998:	subs	r5, r0, #0
   1999c:	bne	19a54 <__assert_fail@plt+0x87ac>
   199a0:	cmp	r6, #0
   199a4:	bne	199b8 <__assert_fail@plt+0x8710>
   199a8:	bl	11170 <__ctype_b_loc@plt>
   199ac:	mov	r3, r5
   199b0:	mov	lr, #1
   199b4:	b	19a10 <__assert_fail@plt+0x8768>
   199b8:	bl	11170 <__ctype_b_loc@plt>
   199bc:	mov	r3, r5
   199c0:	mov	lr, #1
   199c4:	b	199d4 <__assert_fail@plt+0x872c>
   199c8:	add	r3, r3, #1
   199cc:	cmp	r3, #256	; 0x100
   199d0:	beq	1a254 <__assert_fail@plt+0x8fac>
   199d4:	ldr	r1, [r0]
   199d8:	lsl	r2, r3, #1
   199dc:	ldrh	r2, [r1, r2]
   199e0:	tst	r2, #2
   199e4:	beq	199c8 <__assert_fail@plt+0x8720>
   199e8:	ldrb	r2, [r6, r3]
   199ec:	asr	ip, r2, #5
   199f0:	and	r2, r2, #31
   199f4:	ldr	r1, [r4, ip, lsl #2]
   199f8:	orr	r2, r1, lr, lsl r2
   199fc:	str	r2, [r4, ip, lsl #2]
   19a00:	b	199c8 <__assert_fail@plt+0x8720>
   19a04:	add	r3, r3, #1
   19a08:	cmp	r3, #256	; 0x100
   19a0c:	beq	1a254 <__assert_fail@plt+0x8fac>
   19a10:	ldr	r1, [r0]
   19a14:	lsl	r2, r3, #1
   19a18:	ldrh	r2, [r1, r2]
   19a1c:	tst	r2, #2
   19a20:	beq	19a04 <__assert_fail@plt+0x875c>
   19a24:	add	r2, r3, #31
   19a28:	cmp	r3, #0
   19a2c:	movge	r2, r3
   19a30:	asr	r2, r2, #5
   19a34:	rsbs	r1, r3, #0
   19a38:	and	ip, r3, #31
   19a3c:	and	r1, r1, #31
   19a40:	rsbpl	ip, r1, #0
   19a44:	ldr	r1, [r4, r2, lsl #2]
   19a48:	orr	r1, r1, lr, lsl ip
   19a4c:	str	r1, [r4, r2, lsl #2]
   19a50:	b	19a04 <__assert_fail@plt+0x875c>
   19a54:	movw	r1, #20928	; 0x51c0
   19a58:	movt	r1, #2
   19a5c:	mov	r0, r7
   19a60:	bl	10fd8 <strcmp@plt>
   19a64:	subs	r5, r0, #0
   19a68:	bne	19b20 <__assert_fail@plt+0x8878>
   19a6c:	cmp	r6, #0
   19a70:	bne	19a84 <__assert_fail@plt+0x87dc>
   19a74:	bl	11170 <__ctype_b_loc@plt>
   19a78:	mov	r3, r5
   19a7c:	mov	lr, #1
   19a80:	b	19adc <__assert_fail@plt+0x8834>
   19a84:	bl	11170 <__ctype_b_loc@plt>
   19a88:	mov	r3, r5
   19a8c:	mov	lr, #1
   19a90:	b	19aa0 <__assert_fail@plt+0x87f8>
   19a94:	add	r3, r3, #1
   19a98:	cmp	r3, #256	; 0x100
   19a9c:	beq	1a254 <__assert_fail@plt+0x8fac>
   19aa0:	ldr	r1, [r0]
   19aa4:	lsl	r2, r3, #1
   19aa8:	ldrh	r2, [r1, r2]
   19aac:	tst	r2, #512	; 0x200
   19ab0:	beq	19a94 <__assert_fail@plt+0x87ec>
   19ab4:	ldrb	r2, [r6, r3]
   19ab8:	asr	ip, r2, #5
   19abc:	and	r2, r2, #31
   19ac0:	ldr	r1, [r4, ip, lsl #2]
   19ac4:	orr	r2, r1, lr, lsl r2
   19ac8:	str	r2, [r4, ip, lsl #2]
   19acc:	b	19a94 <__assert_fail@plt+0x87ec>
   19ad0:	add	r3, r3, #1
   19ad4:	cmp	r3, #256	; 0x100
   19ad8:	beq	1a254 <__assert_fail@plt+0x8fac>
   19adc:	ldr	r1, [r0]
   19ae0:	lsl	r2, r3, #1
   19ae4:	ldrh	r2, [r1, r2]
   19ae8:	tst	r2, #512	; 0x200
   19aec:	beq	19ad0 <__assert_fail@plt+0x8828>
   19af0:	add	r2, r3, #31
   19af4:	cmp	r3, #0
   19af8:	movge	r2, r3
   19afc:	asr	r2, r2, #5
   19b00:	rsbs	r1, r3, #0
   19b04:	and	ip, r3, #31
   19b08:	and	r1, r1, #31
   19b0c:	rsbpl	ip, r1, #0
   19b10:	ldr	r1, [r4, r2, lsl #2]
   19b14:	orr	r1, r1, lr, lsl ip
   19b18:	str	r1, [r4, r2, lsl #2]
   19b1c:	b	19ad0 <__assert_fail@plt+0x8828>
   19b20:	movw	r1, #20952	; 0x51d8
   19b24:	movt	r1, #2
   19b28:	mov	r0, r7
   19b2c:	bl	10fd8 <strcmp@plt>
   19b30:	subs	r5, r0, #0
   19b34:	bne	19bec <__assert_fail@plt+0x8944>
   19b38:	cmp	r6, #0
   19b3c:	bne	19b50 <__assert_fail@plt+0x88a8>
   19b40:	bl	11170 <__ctype_b_loc@plt>
   19b44:	mov	r3, r5
   19b48:	mov	lr, #1
   19b4c:	b	19ba8 <__assert_fail@plt+0x8900>
   19b50:	bl	11170 <__ctype_b_loc@plt>
   19b54:	mov	r3, r5
   19b58:	mov	lr, #1
   19b5c:	b	19b6c <__assert_fail@plt+0x88c4>
   19b60:	add	r3, r3, #1
   19b64:	cmp	r3, #256	; 0x100
   19b68:	beq	1a254 <__assert_fail@plt+0x8fac>
   19b6c:	ldr	r1, [r0]
   19b70:	lsl	r2, r3, #1
   19b74:	ldrh	r2, [r1, r2]
   19b78:	tst	r2, #8192	; 0x2000
   19b7c:	beq	19b60 <__assert_fail@plt+0x88b8>
   19b80:	ldrb	r2, [r6, r3]
   19b84:	asr	ip, r2, #5
   19b88:	and	r2, r2, #31
   19b8c:	ldr	r1, [r4, ip, lsl #2]
   19b90:	orr	r2, r1, lr, lsl r2
   19b94:	str	r2, [r4, ip, lsl #2]
   19b98:	b	19b60 <__assert_fail@plt+0x88b8>
   19b9c:	add	r3, r3, #1
   19ba0:	cmp	r3, #256	; 0x100
   19ba4:	beq	1a254 <__assert_fail@plt+0x8fac>
   19ba8:	ldr	r1, [r0]
   19bac:	lsl	r2, r3, #1
   19bb0:	ldrh	r2, [r1, r2]
   19bb4:	tst	r2, #8192	; 0x2000
   19bb8:	beq	19b9c <__assert_fail@plt+0x88f4>
   19bbc:	add	r2, r3, #31
   19bc0:	cmp	r3, #0
   19bc4:	movge	r2, r3
   19bc8:	asr	r2, r2, #5
   19bcc:	rsbs	r1, r3, #0
   19bd0:	and	ip, r3, #31
   19bd4:	and	r1, r1, #31
   19bd8:	rsbpl	ip, r1, #0
   19bdc:	ldr	r1, [r4, r2, lsl #2]
   19be0:	orr	r1, r1, lr, lsl ip
   19be4:	str	r1, [r4, r2, lsl #2]
   19be8:	b	19b9c <__assert_fail@plt+0x88f4>
   19bec:	movw	r1, #20912	; 0x51b0
   19bf0:	movt	r1, #2
   19bf4:	mov	r0, r7
   19bf8:	bl	10fd8 <strcmp@plt>
   19bfc:	subs	r5, r0, #0
   19c00:	bne	19cb8 <__assert_fail@plt+0x8a10>
   19c04:	cmp	r6, #0
   19c08:	bne	19c1c <__assert_fail@plt+0x8974>
   19c0c:	bl	11170 <__ctype_b_loc@plt>
   19c10:	mov	r3, r5
   19c14:	mov	lr, #1
   19c18:	b	19c74 <__assert_fail@plt+0x89cc>
   19c1c:	bl	11170 <__ctype_b_loc@plt>
   19c20:	mov	r3, r5
   19c24:	mov	lr, #1
   19c28:	b	19c38 <__assert_fail@plt+0x8990>
   19c2c:	add	r3, r3, #1
   19c30:	cmp	r3, #256	; 0x100
   19c34:	beq	1a254 <__assert_fail@plt+0x8fac>
   19c38:	ldr	r1, [r0]
   19c3c:	lsl	r2, r3, #1
   19c40:	ldrh	r2, [r1, r2]
   19c44:	tst	r2, #1024	; 0x400
   19c48:	beq	19c2c <__assert_fail@plt+0x8984>
   19c4c:	ldrb	r2, [r6, r3]
   19c50:	asr	ip, r2, #5
   19c54:	and	r2, r2, #31
   19c58:	ldr	r1, [r4, ip, lsl #2]
   19c5c:	orr	r2, r1, lr, lsl r2
   19c60:	str	r2, [r4, ip, lsl #2]
   19c64:	b	19c2c <__assert_fail@plt+0x8984>
   19c68:	add	r3, r3, #1
   19c6c:	cmp	r3, #256	; 0x100
   19c70:	beq	1a254 <__assert_fail@plt+0x8fac>
   19c74:	ldr	r1, [r0]
   19c78:	lsl	r2, r3, #1
   19c7c:	ldrh	r2, [r1, r2]
   19c80:	tst	r2, #1024	; 0x400
   19c84:	beq	19c68 <__assert_fail@plt+0x89c0>
   19c88:	add	r2, r3, #31
   19c8c:	cmp	r3, #0
   19c90:	movge	r2, r3
   19c94:	asr	r2, r2, #5
   19c98:	rsbs	r1, r3, #0
   19c9c:	and	ip, r3, #31
   19ca0:	and	r1, r1, #31
   19ca4:	rsbpl	ip, r1, #0
   19ca8:	ldr	r1, [r4, r2, lsl #2]
   19cac:	orr	r1, r1, lr, lsl ip
   19cb0:	str	r1, [r4, r2, lsl #2]
   19cb4:	b	19c68 <__assert_fail@plt+0x89c0>
   19cb8:	movw	r1, #20960	; 0x51e0
   19cbc:	movt	r1, #2
   19cc0:	mov	r0, r7
   19cc4:	bl	10fd8 <strcmp@plt>
   19cc8:	subs	r5, r0, #0
   19ccc:	bne	19d84 <__assert_fail@plt+0x8adc>
   19cd0:	cmp	r6, #0
   19cd4:	bne	19ce8 <__assert_fail@plt+0x8a40>
   19cd8:	bl	11170 <__ctype_b_loc@plt>
   19cdc:	mov	r3, r5
   19ce0:	mov	lr, #1
   19ce4:	b	19d40 <__assert_fail@plt+0x8a98>
   19ce8:	bl	11170 <__ctype_b_loc@plt>
   19cec:	mov	r3, r5
   19cf0:	mov	lr, #1
   19cf4:	b	19d04 <__assert_fail@plt+0x8a5c>
   19cf8:	add	r3, r3, #1
   19cfc:	cmp	r3, #256	; 0x100
   19d00:	beq	1a254 <__assert_fail@plt+0x8fac>
   19d04:	ldr	r1, [r0]
   19d08:	lsl	r2, r3, #1
   19d0c:	ldrh	r2, [r1, r2]
   19d10:	tst	r2, #2048	; 0x800
   19d14:	beq	19cf8 <__assert_fail@plt+0x8a50>
   19d18:	ldrb	r2, [r6, r3]
   19d1c:	asr	ip, r2, #5
   19d20:	and	r2, r2, #31
   19d24:	ldr	r1, [r4, ip, lsl #2]
   19d28:	orr	r2, r1, lr, lsl r2
   19d2c:	str	r2, [r4, ip, lsl #2]
   19d30:	b	19cf8 <__assert_fail@plt+0x8a50>
   19d34:	add	r3, r3, #1
   19d38:	cmp	r3, #256	; 0x100
   19d3c:	beq	1a254 <__assert_fail@plt+0x8fac>
   19d40:	ldr	r1, [r0]
   19d44:	lsl	r2, r3, #1
   19d48:	ldrh	r2, [r1, r2]
   19d4c:	tst	r2, #2048	; 0x800
   19d50:	beq	19d34 <__assert_fail@plt+0x8a8c>
   19d54:	add	r2, r3, #31
   19d58:	cmp	r3, #0
   19d5c:	movge	r2, r3
   19d60:	asr	r2, r2, #5
   19d64:	rsbs	r1, r3, #0
   19d68:	and	ip, r3, #31
   19d6c:	and	r1, r1, #31
   19d70:	rsbpl	ip, r1, #0
   19d74:	ldr	r1, [r4, r2, lsl #2]
   19d78:	orr	r1, r1, lr, lsl ip
   19d7c:	str	r1, [r4, r2, lsl #2]
   19d80:	b	19d34 <__assert_fail@plt+0x8a8c>
   19d84:	movw	r1, #20968	; 0x51e8
   19d88:	movt	r1, #2
   19d8c:	mov	r0, r7
   19d90:	bl	10fd8 <strcmp@plt>
   19d94:	subs	r5, r0, #0
   19d98:	bne	19e50 <__assert_fail@plt+0x8ba8>
   19d9c:	cmp	r6, #0
   19da0:	bne	19db4 <__assert_fail@plt+0x8b0c>
   19da4:	bl	11170 <__ctype_b_loc@plt>
   19da8:	mov	r3, r5
   19dac:	mov	lr, #1
   19db0:	b	19e0c <__assert_fail@plt+0x8b64>
   19db4:	bl	11170 <__ctype_b_loc@plt>
   19db8:	mov	r3, r5
   19dbc:	mov	lr, #1
   19dc0:	b	19dd0 <__assert_fail@plt+0x8b28>
   19dc4:	add	r3, r3, #1
   19dc8:	cmp	r3, #256	; 0x100
   19dcc:	beq	1a254 <__assert_fail@plt+0x8fac>
   19dd0:	ldr	r1, [r0]
   19dd4:	lsl	r2, r3, #1
   19dd8:	ldrh	r2, [r1, r2]
   19ddc:	tst	r2, #16384	; 0x4000
   19de0:	beq	19dc4 <__assert_fail@plt+0x8b1c>
   19de4:	ldrb	r2, [r6, r3]
   19de8:	asr	ip, r2, #5
   19dec:	and	r2, r2, #31
   19df0:	ldr	r1, [r4, ip, lsl #2]
   19df4:	orr	r2, r1, lr, lsl r2
   19df8:	str	r2, [r4, ip, lsl #2]
   19dfc:	b	19dc4 <__assert_fail@plt+0x8b1c>
   19e00:	add	r3, r3, #1
   19e04:	cmp	r3, #256	; 0x100
   19e08:	beq	1a254 <__assert_fail@plt+0x8fac>
   19e0c:	ldr	r1, [r0]
   19e10:	lsl	r2, r3, #1
   19e14:	ldrh	r2, [r1, r2]
   19e18:	tst	r2, #16384	; 0x4000
   19e1c:	beq	19e00 <__assert_fail@plt+0x8b58>
   19e20:	add	r2, r3, #31
   19e24:	cmp	r3, #0
   19e28:	movge	r2, r3
   19e2c:	asr	r2, r2, #5
   19e30:	rsbs	r1, r3, #0
   19e34:	and	ip, r3, #31
   19e38:	and	r1, r1, #31
   19e3c:	rsbpl	ip, r1, #0
   19e40:	ldr	r1, [r4, r2, lsl #2]
   19e44:	orr	r1, r1, lr, lsl ip
   19e48:	str	r1, [r4, r2, lsl #2]
   19e4c:	b	19e00 <__assert_fail@plt+0x8b58>
   19e50:	movw	r1, #20920	; 0x51b8
   19e54:	movt	r1, #2
   19e58:	mov	r0, r7
   19e5c:	bl	10fd8 <strcmp@plt>
   19e60:	subs	r5, r0, #0
   19e64:	bne	19f1c <__assert_fail@plt+0x8c74>
   19e68:	cmp	r6, #0
   19e6c:	bne	19e80 <__assert_fail@plt+0x8bd8>
   19e70:	bl	11170 <__ctype_b_loc@plt>
   19e74:	mov	r3, r5
   19e78:	mov	lr, #1
   19e7c:	b	19ed8 <__assert_fail@plt+0x8c30>
   19e80:	bl	11170 <__ctype_b_loc@plt>
   19e84:	mov	r3, r5
   19e88:	mov	lr, #1
   19e8c:	b	19e9c <__assert_fail@plt+0x8bf4>
   19e90:	add	r3, r3, #1
   19e94:	cmp	r3, #256	; 0x100
   19e98:	beq	1a254 <__assert_fail@plt+0x8fac>
   19e9c:	ldr	r1, [r0]
   19ea0:	lsl	r2, r3, #1
   19ea4:	ldrh	r2, [r1, r2]
   19ea8:	tst	r2, #256	; 0x100
   19eac:	beq	19e90 <__assert_fail@plt+0x8be8>
   19eb0:	ldrb	r2, [r6, r3]
   19eb4:	asr	ip, r2, #5
   19eb8:	and	r2, r2, #31
   19ebc:	ldr	r1, [r4, ip, lsl #2]
   19ec0:	orr	r2, r1, lr, lsl r2
   19ec4:	str	r2, [r4, ip, lsl #2]
   19ec8:	b	19e90 <__assert_fail@plt+0x8be8>
   19ecc:	add	r3, r3, #1
   19ed0:	cmp	r3, #256	; 0x100
   19ed4:	beq	1a254 <__assert_fail@plt+0x8fac>
   19ed8:	ldr	r1, [r0]
   19edc:	lsl	r2, r3, #1
   19ee0:	ldrh	r2, [r1, r2]
   19ee4:	tst	r2, #256	; 0x100
   19ee8:	beq	19ecc <__assert_fail@plt+0x8c24>
   19eec:	add	r2, r3, #31
   19ef0:	cmp	r3, #0
   19ef4:	movge	r2, r3
   19ef8:	asr	r2, r2, #5
   19efc:	rsbs	r1, r3, #0
   19f00:	and	ip, r3, #31
   19f04:	and	r1, r1, #31
   19f08:	rsbpl	ip, r1, #0
   19f0c:	ldr	r1, [r4, r2, lsl #2]
   19f10:	orr	r1, r1, lr, lsl ip
   19f14:	str	r1, [r4, r2, lsl #2]
   19f18:	b	19ecc <__assert_fail@plt+0x8c24>
   19f1c:	movw	r1, #20976	; 0x51f0
   19f20:	movt	r1, #2
   19f24:	mov	r0, r7
   19f28:	bl	10fd8 <strcmp@plt>
   19f2c:	subs	r5, r0, #0
   19f30:	bne	19fe8 <__assert_fail@plt+0x8d40>
   19f34:	cmp	r6, #0
   19f38:	bne	19f4c <__assert_fail@plt+0x8ca4>
   19f3c:	bl	11170 <__ctype_b_loc@plt>
   19f40:	mov	r3, r5
   19f44:	mov	lr, #1
   19f48:	b	19fa4 <__assert_fail@plt+0x8cfc>
   19f4c:	bl	11170 <__ctype_b_loc@plt>
   19f50:	mov	r3, r5
   19f54:	mov	lr, #1
   19f58:	b	19f68 <__assert_fail@plt+0x8cc0>
   19f5c:	add	r3, r3, #1
   19f60:	cmp	r3, #256	; 0x100
   19f64:	beq	1a254 <__assert_fail@plt+0x8fac>
   19f68:	ldr	r1, [r0]
   19f6c:	lsl	r2, r3, #1
   19f70:	ldrh	r2, [r1, r2]
   19f74:	tst	r2, #1
   19f78:	beq	19f5c <__assert_fail@plt+0x8cb4>
   19f7c:	ldrb	r2, [r6, r3]
   19f80:	asr	ip, r2, #5
   19f84:	and	r2, r2, #31
   19f88:	ldr	r1, [r4, ip, lsl #2]
   19f8c:	orr	r2, r1, lr, lsl r2
   19f90:	str	r2, [r4, ip, lsl #2]
   19f94:	b	19f5c <__assert_fail@plt+0x8cb4>
   19f98:	add	r3, r3, #1
   19f9c:	cmp	r3, #256	; 0x100
   19fa0:	beq	1a254 <__assert_fail@plt+0x8fac>
   19fa4:	ldr	r1, [r0]
   19fa8:	lsl	r2, r3, #1
   19fac:	ldrh	r2, [r1, r2]
   19fb0:	tst	r2, #1
   19fb4:	beq	19f98 <__assert_fail@plt+0x8cf0>
   19fb8:	add	r2, r3, #31
   19fbc:	cmp	r3, #0
   19fc0:	movge	r2, r3
   19fc4:	asr	r2, r2, #5
   19fc8:	rsbs	r1, r3, #0
   19fcc:	and	ip, r3, #31
   19fd0:	and	r1, r1, #31
   19fd4:	rsbpl	ip, r1, #0
   19fd8:	ldr	r1, [r4, r2, lsl #2]
   19fdc:	orr	r1, r1, lr, lsl ip
   19fe0:	str	r1, [r4, r2, lsl #2]
   19fe4:	b	19f98 <__assert_fail@plt+0x8cf0>
   19fe8:	movw	r1, #20984	; 0x51f8
   19fec:	movt	r1, #2
   19ff0:	mov	r0, r7
   19ff4:	bl	10fd8 <strcmp@plt>
   19ff8:	subs	r5, r0, #0
   19ffc:	bne	1a0b4 <__assert_fail@plt+0x8e0c>
   1a000:	cmp	r6, #0
   1a004:	bne	1a018 <__assert_fail@plt+0x8d70>
   1a008:	bl	11170 <__ctype_b_loc@plt>
   1a00c:	mov	r3, r5
   1a010:	mov	lr, #1
   1a014:	b	1a070 <__assert_fail@plt+0x8dc8>
   1a018:	bl	11170 <__ctype_b_loc@plt>
   1a01c:	mov	r3, r5
   1a020:	mov	lr, #1
   1a024:	b	1a034 <__assert_fail@plt+0x8d8c>
   1a028:	add	r3, r3, #1
   1a02c:	cmp	r3, #256	; 0x100
   1a030:	beq	1a254 <__assert_fail@plt+0x8fac>
   1a034:	ldr	r1, [r0]
   1a038:	lsl	r2, r3, #1
   1a03c:	ldrsh	r2, [r1, r2]
   1a040:	cmp	r2, #0
   1a044:	bge	1a028 <__assert_fail@plt+0x8d80>
   1a048:	ldrb	r2, [r6, r3]
   1a04c:	asr	ip, r2, #5
   1a050:	and	r2, r2, #31
   1a054:	ldr	r1, [r4, ip, lsl #2]
   1a058:	orr	r2, r1, lr, lsl r2
   1a05c:	str	r2, [r4, ip, lsl #2]
   1a060:	b	1a028 <__assert_fail@plt+0x8d80>
   1a064:	add	r3, r3, #1
   1a068:	cmp	r3, #256	; 0x100
   1a06c:	beq	1a254 <__assert_fail@plt+0x8fac>
   1a070:	ldr	r1, [r0]
   1a074:	lsl	r2, r3, #1
   1a078:	ldrsh	r2, [r1, r2]
   1a07c:	cmp	r2, #0
   1a080:	bge	1a064 <__assert_fail@plt+0x8dbc>
   1a084:	add	r2, r3, #31
   1a088:	cmp	r3, #0
   1a08c:	movge	r2, r3
   1a090:	asr	r2, r2, #5
   1a094:	rsbs	r1, r3, #0
   1a098:	and	ip, r3, #31
   1a09c:	and	r1, r1, #31
   1a0a0:	rsbpl	ip, r1, #0
   1a0a4:	ldr	r1, [r4, r2, lsl #2]
   1a0a8:	orr	r1, r1, lr, lsl ip
   1a0ac:	str	r1, [r4, r2, lsl #2]
   1a0b0:	b	1a064 <__assert_fail@plt+0x8dbc>
   1a0b4:	movw	r1, #20992	; 0x5200
   1a0b8:	movt	r1, #2
   1a0bc:	mov	r0, r7
   1a0c0:	bl	10fd8 <strcmp@plt>
   1a0c4:	subs	r5, r0, #0
   1a0c8:	bne	1a180 <__assert_fail@plt+0x8ed8>
   1a0cc:	cmp	r6, #0
   1a0d0:	bne	1a0e4 <__assert_fail@plt+0x8e3c>
   1a0d4:	bl	11170 <__ctype_b_loc@plt>
   1a0d8:	mov	r3, r5
   1a0dc:	mov	lr, #1
   1a0e0:	b	1a13c <__assert_fail@plt+0x8e94>
   1a0e4:	bl	11170 <__ctype_b_loc@plt>
   1a0e8:	mov	r3, #0
   1a0ec:	mov	lr, #1
   1a0f0:	b	1a104 <__assert_fail@plt+0x8e5c>
   1a0f4:	add	r3, r3, #2
   1a0f8:	add	r6, r6, #1
   1a0fc:	cmp	r3, #512	; 0x200
   1a100:	beq	1a254 <__assert_fail@plt+0x8fac>
   1a104:	ldr	r2, [r0]
   1a108:	ldrh	r2, [r2, r3]
   1a10c:	tst	r2, #4
   1a110:	beq	1a0f4 <__assert_fail@plt+0x8e4c>
   1a114:	ldrb	r2, [r6]
   1a118:	asr	ip, r2, #5
   1a11c:	and	r2, r2, #31
   1a120:	ldr	r1, [r4, ip, lsl #2]
   1a124:	orr	r2, r1, lr, lsl r2
   1a128:	str	r2, [r4, ip, lsl #2]
   1a12c:	b	1a0f4 <__assert_fail@plt+0x8e4c>
   1a130:	add	r3, r3, #1
   1a134:	cmp	r3, #256	; 0x100
   1a138:	beq	1a254 <__assert_fail@plt+0x8fac>
   1a13c:	ldr	r1, [r0]
   1a140:	lsl	r2, r3, #1
   1a144:	ldrh	r2, [r1, r2]
   1a148:	tst	r2, #4
   1a14c:	beq	1a130 <__assert_fail@plt+0x8e88>
   1a150:	add	r2, r3, #31
   1a154:	cmp	r3, #0
   1a158:	movge	r2, r3
   1a15c:	asr	r2, r2, #5
   1a160:	rsbs	r1, r3, #0
   1a164:	and	ip, r3, #31
   1a168:	and	r1, r1, #31
   1a16c:	rsbpl	ip, r1, #0
   1a170:	ldr	r1, [r4, r2, lsl #2]
   1a174:	orr	r1, r1, lr, lsl ip
   1a178:	str	r1, [r4, r2, lsl #2]
   1a17c:	b	1a130 <__assert_fail@plt+0x8e88>
   1a180:	movw	r1, #21000	; 0x5208
   1a184:	movt	r1, #2
   1a188:	mov	r0, r7
   1a18c:	bl	10fd8 <strcmp@plt>
   1a190:	subs	r5, r0, #0
   1a194:	movne	r5, #4
   1a198:	bne	1a254 <__assert_fail@plt+0x8fac>
   1a19c:	cmp	r6, #0
   1a1a0:	bne	1a1b4 <__assert_fail@plt+0x8f0c>
   1a1a4:	bl	11170 <__ctype_b_loc@plt>
   1a1a8:	mov	r3, r5
   1a1ac:	mov	lr, #1
   1a1b0:	b	1a20c <__assert_fail@plt+0x8f64>
   1a1b4:	bl	11170 <__ctype_b_loc@plt>
   1a1b8:	mov	r3, r5
   1a1bc:	mov	lr, #1
   1a1c0:	b	1a1d0 <__assert_fail@plt+0x8f28>
   1a1c4:	add	r3, r3, #1
   1a1c8:	cmp	r3, #256	; 0x100
   1a1cc:	beq	1a254 <__assert_fail@plt+0x8fac>
   1a1d0:	ldr	r1, [r0]
   1a1d4:	lsl	r2, r3, #1
   1a1d8:	ldrh	r2, [r1, r2]
   1a1dc:	tst	r2, #4096	; 0x1000
   1a1e0:	beq	1a1c4 <__assert_fail@plt+0x8f1c>
   1a1e4:	ldrb	r2, [r6, r3]
   1a1e8:	asr	ip, r2, #5
   1a1ec:	and	r2, r2, #31
   1a1f0:	ldr	r1, [r4, ip, lsl #2]
   1a1f4:	orr	r2, r1, lr, lsl r2
   1a1f8:	str	r2, [r4, ip, lsl #2]
   1a1fc:	b	1a1c4 <__assert_fail@plt+0x8f1c>
   1a200:	add	r3, r3, #1
   1a204:	cmp	r3, #256	; 0x100
   1a208:	beq	1a254 <__assert_fail@plt+0x8fac>
   1a20c:	ldr	r1, [r0]
   1a210:	lsl	r2, r3, #1
   1a214:	ldrh	r2, [r1, r2]
   1a218:	tst	r2, #4096	; 0x1000
   1a21c:	beq	1a200 <__assert_fail@plt+0x8f58>
   1a220:	add	r2, r3, #31
   1a224:	cmp	r3, #0
   1a228:	movge	r2, r3
   1a22c:	asr	r2, r2, #5
   1a230:	rsbs	r1, r3, #0
   1a234:	and	ip, r3, #31
   1a238:	and	r1, r1, #31
   1a23c:	rsbpl	ip, r1, #0
   1a240:	ldr	r1, [r4, r2, lsl #2]
   1a244:	orr	r1, r1, lr, lsl ip
   1a248:	str	r1, [r4, r2, lsl #2]
   1a24c:	b	1a200 <__assert_fail@plt+0x8f58>
   1a250:	mov	r5, #12
   1a254:	mov	r0, r5
   1a258:	ldrd	r4, [sp]
   1a25c:	ldrd	r6, [sp, #8]
   1a260:	ldrd	r8, [sp, #16]
   1a264:	ldr	sl, [sp, #24]
   1a268:	add	sp, sp, #28
   1a26c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a270:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a274:	strd	r6, [sp, #8]
   1a278:	strd	r8, [sp, #16]
   1a27c:	str	sl, [sp, #24]
   1a280:	str	lr, [sp, #28]
   1a284:	sub	sp, sp, #24
   1a288:	mov	r6, r0
   1a28c:	mov	r9, r1
   1a290:	mov	sl, r2
   1a294:	mov	r5, r3
   1a298:	ldrb	r8, [sp, #56]	; 0x38
   1a29c:	mov	r3, #0
   1a2a0:	str	r3, [sp, #20]
   1a2a4:	mov	r1, #1
   1a2a8:	mov	r0, #32
   1a2ac:	bl	23cd4 <__assert_fail@plt+0x12a2c>
   1a2b0:	subs	r4, r0, #0
   1a2b4:	beq	1a428 <__assert_fail@plt+0x9180>
   1a2b8:	mov	r1, #1
   1a2bc:	mov	r0, #40	; 0x28
   1a2c0:	bl	23cd4 <__assert_fail@plt+0x12a2c>
   1a2c4:	subs	r7, r0, #0
   1a2c8:	beq	1a43c <__assert_fail@plt+0x9194>
   1a2cc:	ldrb	r3, [r7, #16]
   1a2d0:	bfi	r3, r8, #0, #1
   1a2d4:	strb	r3, [r7, #16]
   1a2d8:	mov	r3, #0
   1a2dc:	str	r3, [sp, #4]
   1a2e0:	str	sl, [sp]
   1a2e4:	add	r3, sp, #20
   1a2e8:	mov	r2, r7
   1a2ec:	mov	r1, r4
   1a2f0:	mov	r0, r9
   1a2f4:	bl	197f4 <__assert_fail@plt+0x854c>
   1a2f8:	subs	r9, r0, #0
   1a2fc:	bne	1a458 <__assert_fail@plt+0x91b0>
   1a300:	ldrb	r3, [r5]
   1a304:	cmp	r3, #0
   1a308:	beq	1a330 <__assert_fail@plt+0x9088>
   1a30c:	mov	r0, #1
   1a310:	lsr	r1, r3, #5
   1a314:	and	r3, r3, #31
   1a318:	ldr	r2, [r4, r1, lsl #2]
   1a31c:	orr	r3, r2, r0, lsl r3
   1a320:	str	r3, [r4, r1, lsl #2]
   1a324:	ldrb	r3, [r5, #1]!
   1a328:	cmp	r3, #0
   1a32c:	bne	1a310 <__assert_fail@plt+0x9068>
   1a330:	cmp	r8, #0
   1a334:	beq	1a354 <__assert_fail@plt+0x90ac>
   1a338:	sub	r3, r4, #4
   1a33c:	add	r1, r4, #28
   1a340:	ldr	r2, [r3, #4]!
   1a344:	mvn	r2, r2
   1a348:	str	r2, [r3]
   1a34c:	cmp	r3, r1
   1a350:	bne	1a340 <__assert_fail@plt+0x9098>
   1a354:	ldr	r3, [r6, #92]	; 0x5c
   1a358:	cmp	r3, #1
   1a35c:	ble	1a388 <__assert_fail@plt+0x90e0>
   1a360:	sub	r3, r4, #4
   1a364:	ldr	r1, [r6, #60]	; 0x3c
   1a368:	sub	r1, r1, #4
   1a36c:	add	ip, r4, #28
   1a370:	ldr	r2, [r3, #4]!
   1a374:	ldr	r0, [r1, #4]!
   1a378:	and	r2, r2, r0
   1a37c:	str	r2, [r3]
   1a380:	cmp	r3, ip
   1a384:	bne	1a370 <__assert_fail@plt+0x90c8>
   1a388:	mov	r1, #0
   1a38c:	str	r1, [sp, #16]
   1a390:	str	r4, [sp, #12]
   1a394:	mov	r3, #3
   1a398:	strb	r3, [sp, #16]
   1a39c:	add	r3, sp, #12
   1a3a0:	mov	r2, r1
   1a3a4:	mov	r0, r6
   1a3a8:	bl	15d60 <__assert_fail@plt+0x4ab8>
   1a3ac:	subs	r5, r0, #0
   1a3b0:	beq	1a484 <__assert_fail@plt+0x91dc>
   1a3b4:	ldr	r3, [r6, #92]	; 0x5c
   1a3b8:	cmp	r3, #1
   1a3bc:	ble	1a478 <__assert_fail@plt+0x91d0>
   1a3c0:	mov	r3, #6
   1a3c4:	strb	r3, [sp, #16]
   1a3c8:	str	r7, [sp, #12]
   1a3cc:	ldrb	r3, [r6, #88]	; 0x58
   1a3d0:	orr	r3, r3, #2
   1a3d4:	strb	r3, [r6, #88]	; 0x58
   1a3d8:	add	r3, sp, #12
   1a3dc:	mov	r2, #0
   1a3e0:	mov	r1, r2
   1a3e4:	mov	r0, r6
   1a3e8:	bl	15d60 <__assert_fail@plt+0x4ab8>
   1a3ec:	subs	r2, r0, #0
   1a3f0:	beq	1a484 <__assert_fail@plt+0x91dc>
   1a3f4:	mov	r3, #10
   1a3f8:	mov	r1, r5
   1a3fc:	mov	r0, r6
   1a400:	bl	15efc <__assert_fail@plt+0x4c54>
   1a404:	mov	r5, r0
   1a408:	mov	r0, r5
   1a40c:	add	sp, sp, #24
   1a410:	ldrd	r4, [sp]
   1a414:	ldrd	r6, [sp, #8]
   1a418:	ldrd	r8, [sp, #16]
   1a41c:	ldr	sl, [sp, #24]
   1a420:	add	sp, sp, #28
   1a424:	pop	{pc}		; (ldr pc, [sp], #4)
   1a428:	mov	r3, #12
   1a42c:	ldr	r2, [sp, #60]	; 0x3c
   1a430:	str	r3, [r2]
   1a434:	mov	r5, r4
   1a438:	b	1a408 <__assert_fail@plt+0x9160>
   1a43c:	mov	r0, r4
   1a440:	bl	23f40 <__assert_fail@plt+0x12c98>
   1a444:	mov	r3, #12
   1a448:	ldr	r2, [sp, #60]	; 0x3c
   1a44c:	str	r3, [r2]
   1a450:	mov	r5, r7
   1a454:	b	1a408 <__assert_fail@plt+0x9160>
   1a458:	mov	r0, r4
   1a45c:	bl	23f40 <__assert_fail@plt+0x12c98>
   1a460:	mov	r0, r7
   1a464:	bl	17a5c <__assert_fail@plt+0x67b4>
   1a468:	ldr	r3, [sp, #60]	; 0x3c
   1a46c:	str	r9, [r3]
   1a470:	mov	r5, #0
   1a474:	b	1a408 <__assert_fail@plt+0x9160>
   1a478:	mov	r0, r7
   1a47c:	bl	17a5c <__assert_fail@plt+0x67b4>
   1a480:	b	1a408 <__assert_fail@plt+0x9160>
   1a484:	mov	r0, r4
   1a488:	bl	23f40 <__assert_fail@plt+0x12c98>
   1a48c:	mov	r0, r7
   1a490:	bl	17a5c <__assert_fail@plt+0x67b4>
   1a494:	mov	r3, #12
   1a498:	ldr	r2, [sp, #60]	; 0x3c
   1a49c:	str	r3, [r2]
   1a4a0:	mov	r5, #0
   1a4a4:	b	1a408 <__assert_fail@plt+0x9160>
   1a4a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a4ac:	strd	r6, [sp, #8]
   1a4b0:	strd	r8, [sp, #16]
   1a4b4:	strd	sl, [sp, #24]
   1a4b8:	str	lr, [sp, #32]
   1a4bc:	sub	sp, sp, #4
   1a4c0:	ldr	r9, [r0]
   1a4c4:	add	ip, r9, r1, lsl #3
   1a4c8:	ldrb	fp, [ip, #4]
   1a4cc:	cmp	fp, #7
   1a4d0:	beq	1a53c <__assert_fail@plt+0x9294>
   1a4d4:	mov	r5, r3
   1a4d8:	mov	r6, r2
   1a4dc:	mov	r8, r1
   1a4e0:	mov	r7, r0
   1a4e4:	mov	r1, r3
   1a4e8:	mov	r0, r2
   1a4ec:	bl	14f1c <__assert_fail@plt+0x3c74>
   1a4f0:	mov	sl, r0
   1a4f4:	cmp	fp, #5
   1a4f8:	beq	1a650 <__assert_fail@plt+0x93a8>
   1a4fc:	cmp	fp, #6
   1a500:	movne	r4, #0
   1a504:	moveq	r4, #1
   1a508:	cmp	r0, #1
   1a50c:	movle	r4, #0
   1a510:	cmp	r4, #0
   1a514:	moveq	sl, #0
   1a518:	bne	1a698 <__assert_fail@plt+0x93f0>
   1a51c:	mov	r0, sl
   1a520:	add	sp, sp, #4
   1a524:	ldrd	r4, [sp]
   1a528:	ldrd	r6, [sp, #8]
   1a52c:	ldrd	r8, [sp, #16]
   1a530:	ldrd	sl, [sp, #24]
   1a534:	add	sp, sp, #32
   1a538:	pop	{pc}		; (ldr pc, [sp], #4)
   1a53c:	ldr	r1, [r2, #4]
   1a540:	ldrb	r0, [r1, r3]
   1a544:	cmp	r0, #193	; 0xc1
   1a548:	movls	sl, #0
   1a54c:	bls	1a51c <__assert_fail@plt+0x9274>
   1a550:	add	ip, r3, #1
   1a554:	ldr	r2, [r2, #48]	; 0x30
   1a558:	cmp	ip, r2
   1a55c:	movge	sl, #0
   1a560:	bge	1a51c <__assert_fail@plt+0x9274>
   1a564:	add	lr, r1, r3
   1a568:	ldrb	lr, [lr, #1]
   1a56c:	cmp	r0, #223	; 0xdf
   1a570:	bls	1a5d8 <__assert_fail@plt+0x9330>
   1a574:	cmp	r0, #239	; 0xef
   1a578:	bhi	1a5ec <__assert_fail@plt+0x9344>
   1a57c:	cmp	lr, #159	; 0x9f
   1a580:	cmpls	r0, #224	; 0xe0
   1a584:	movne	sl, #3
   1a588:	beq	1a7c0 <__assert_fail@plt+0x9518>
   1a58c:	add	r0, sl, r3
   1a590:	cmp	r2, r0
   1a594:	movlt	sl, #0
   1a598:	blt	1a51c <__assert_fail@plt+0x9274>
   1a59c:	ldrb	r2, [r1, ip]
   1a5a0:	eor	r2, r2, #128	; 0x80
   1a5a4:	cmp	r2, #63	; 0x3f
   1a5a8:	bhi	1a7c8 <__assert_fail@plt+0x9520>
   1a5ac:	add	r0, r3, #2
   1a5b0:	add	r0, r1, r0
   1a5b4:	add	r3, r1, r3
   1a5b8:	add	r3, r3, sl
   1a5bc:	ldrb	r2, [r0], #1
   1a5c0:	eor	r2, r2, #128	; 0x80
   1a5c4:	cmp	r2, #63	; 0x3f
   1a5c8:	bhi	1a7d0 <__assert_fail@plt+0x9528>
   1a5cc:	cmp	r3, r0
   1a5d0:	bne	1a5bc <__assert_fail@plt+0x9314>
   1a5d4:	b	1a51c <__assert_fail@plt+0x9274>
   1a5d8:	eor	lr, lr, #128	; 0x80
   1a5dc:	cmp	lr, #63	; 0x3f
   1a5e0:	movhi	sl, #0
   1a5e4:	movls	sl, #2
   1a5e8:	b	1a51c <__assert_fail@plt+0x9274>
   1a5ec:	cmp	r0, #247	; 0xf7
   1a5f0:	bhi	1a60c <__assert_fail@plt+0x9364>
   1a5f4:	cmp	lr, #143	; 0x8f
   1a5f8:	cmpls	r0, #240	; 0xf0
   1a5fc:	movne	sl, #4
   1a600:	bne	1a58c <__assert_fail@plt+0x92e4>
   1a604:	mov	sl, #0
   1a608:	b	1a51c <__assert_fail@plt+0x9274>
   1a60c:	cmp	r0, #251	; 0xfb
   1a610:	bhi	1a62c <__assert_fail@plt+0x9384>
   1a614:	cmp	lr, #135	; 0x87
   1a618:	cmpls	r0, #248	; 0xf8
   1a61c:	movne	sl, #5
   1a620:	bne	1a58c <__assert_fail@plt+0x92e4>
   1a624:	mov	sl, #0
   1a628:	b	1a51c <__assert_fail@plt+0x9274>
   1a62c:	cmp	r0, #253	; 0xfd
   1a630:	movhi	sl, #0
   1a634:	bhi	1a51c <__assert_fail@plt+0x9274>
   1a638:	cmp	lr, #131	; 0x83
   1a63c:	cmpls	r0, #252	; 0xfc
   1a640:	moveq	sl, #0
   1a644:	beq	1a51c <__assert_fail@plt+0x9274>
   1a648:	mov	sl, #6
   1a64c:	b	1a58c <__assert_fail@plt+0x92e4>
   1a650:	cmp	r0, #1
   1a654:	movle	sl, #0
   1a658:	ble	1a51c <__assert_fail@plt+0x9274>
   1a65c:	ldr	r3, [r7, #128]	; 0x80
   1a660:	tst	r3, #64	; 0x40
   1a664:	bne	1a67c <__assert_fail@plt+0x93d4>
   1a668:	ldr	r2, [r6, #4]
   1a66c:	ldrb	r2, [r2, r5]
   1a670:	cmp	r2, #10
   1a674:	moveq	sl, #0
   1a678:	beq	1a51c <__assert_fail@plt+0x9274>
   1a67c:	tst	r3, #128	; 0x80
   1a680:	beq	1a51c <__assert_fail@plt+0x9274>
   1a684:	ldr	r3, [r6, #4]
   1a688:	ldrb	r3, [r3, r5]
   1a68c:	cmp	r3, #0
   1a690:	moveq	sl, #0
   1a694:	b	1a51c <__assert_fail@plt+0x9274>
   1a698:	ldr	r7, [r9, r8, lsl #3]
   1a69c:	ldr	r3, [r7, #32]
   1a6a0:	cmp	r3, #0
   1a6a4:	bne	1a6e4 <__assert_fail@plt+0x943c>
   1a6a8:	ldr	r3, [r7, #36]	; 0x24
   1a6ac:	cmp	r3, #0
   1a6b0:	bne	1a6e4 <__assert_fail@plt+0x943c>
   1a6b4:	ldr	r3, [r7, #20]
   1a6b8:	cmp	r3, #0
   1a6bc:	moveq	r4, #0
   1a6c0:	beq	1a778 <__assert_fail@plt+0x94d0>
   1a6c4:	mov	r1, r5
   1a6c8:	mov	r0, r6
   1a6cc:	bl	14f8c <__assert_fail@plt+0x3ce4>
   1a6d0:	mov	r4, r0
   1a6d4:	ldr	r0, [r7, #20]
   1a6d8:	cmp	r0, #0
   1a6dc:	bgt	1a700 <__assert_fail@plt+0x9458>
   1a6e0:	b	1a778 <__assert_fail@plt+0x94d0>
   1a6e4:	mov	r1, r5
   1a6e8:	mov	r0, r6
   1a6ec:	bl	14f8c <__assert_fail@plt+0x3ce4>
   1a6f0:	mov	r4, r0
   1a6f4:	ldr	r0, [r7, #20]
   1a6f8:	cmp	r0, #0
   1a6fc:	ble	1a740 <__assert_fail@plt+0x9498>
   1a700:	ldr	r2, [r7]
   1a704:	ldr	r3, [r2]
   1a708:	cmp	r3, r4
   1a70c:	beq	1a72c <__assert_fail@plt+0x9484>
   1a710:	mov	r3, #0
   1a714:	add	r3, r3, #1
   1a718:	cmp	r0, r3
   1a71c:	beq	1a740 <__assert_fail@plt+0x9498>
   1a720:	ldr	r1, [r2, #4]!
   1a724:	cmp	r1, r4
   1a728:	bne	1a714 <__assert_fail@plt+0x946c>
   1a72c:	ldrb	r3, [r7, #16]
   1a730:	and	r3, r3, #1
   1a734:	cmp	r3, #0
   1a738:	movne	sl, #0
   1a73c:	b	1a51c <__assert_fail@plt+0x9274>
   1a740:	ldr	r3, [r7, #36]	; 0x24
   1a744:	cmp	r3, #0
   1a748:	ble	1a778 <__assert_fail@plt+0x94d0>
   1a74c:	mov	r5, #0
   1a750:	ldr	r3, [r7, #12]
   1a754:	ldr	r1, [r3, r5, lsl #2]
   1a758:	mov	r0, r4
   1a75c:	bl	10fcc <iswctype@plt>
   1a760:	cmp	r0, #0
   1a764:	bne	1a72c <__assert_fail@plt+0x9484>
   1a768:	add	r5, r5, #1
   1a76c:	ldr	r3, [r7, #36]	; 0x24
   1a770:	cmp	r3, r5
   1a774:	bgt	1a750 <__assert_fail@plt+0x94a8>
   1a778:	ldr	r0, [r7, #32]
   1a77c:	cmp	r0, #0
   1a780:	ble	1a7e0 <__assert_fail@plt+0x9538>
   1a784:	ldr	r2, [r7, #4]
   1a788:	sub	r2, r2, #4
   1a78c:	mov	r3, #0
   1a790:	b	1a7a0 <__assert_fail@plt+0x94f8>
   1a794:	add	r3, r3, #1
   1a798:	cmp	r0, r3
   1a79c:	beq	1a7e0 <__assert_fail@plt+0x9538>
   1a7a0:	ldr	r1, [r2, #4]!
   1a7a4:	cmp	r4, r1
   1a7a8:	bcc	1a794 <__assert_fail@plt+0x94ec>
   1a7ac:	ldr	r1, [r7, #8]
   1a7b0:	ldr	r1, [r1, r3, lsl #2]
   1a7b4:	cmp	r4, r1
   1a7b8:	bhi	1a794 <__assert_fail@plt+0x94ec>
   1a7bc:	b	1a72c <__assert_fail@plt+0x9484>
   1a7c0:	mov	sl, #0
   1a7c4:	b	1a51c <__assert_fail@plt+0x9274>
   1a7c8:	mov	sl, #0
   1a7cc:	b	1a51c <__assert_fail@plt+0x9274>
   1a7d0:	mov	sl, #0
   1a7d4:	b	1a51c <__assert_fail@plt+0x9274>
   1a7d8:	mov	sl, #0
   1a7dc:	b	1a51c <__assert_fail@plt+0x9274>
   1a7e0:	ldrb	r3, [r7, #16]
   1a7e4:	tst	r3, #1
   1a7e8:	beq	1a7d8 <__assert_fail@plt+0x9530>
   1a7ec:	cmp	sl, #1
   1a7f0:	movlt	sl, #1
   1a7f4:	b	1a51c <__assert_fail@plt+0x9274>
   1a7f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a7fc:	strd	r6, [sp, #8]
   1a800:	strd	r8, [sp, #16]
   1a804:	strd	sl, [sp, #24]
   1a808:	str	lr, [sp, #32]
   1a80c:	sub	sp, sp, #28
   1a810:	str	r3, [sp, #4]
   1a814:	add	r3, r1, r1, lsl #1
   1a818:	ldr	r6, [r0, #28]
   1a81c:	add	r6, r6, r3, lsl #2
   1a820:	mov	r3, #0
   1a824:	str	r3, [sp, #12]
   1a828:	str	r3, [sp, #16]
   1a82c:	str	r3, [sp, #20]
   1a830:	ldr	r3, [r6, #4]
   1a834:	cmp	r3, #0
   1a838:	ble	1a8b4 <__assert_fail@plt+0x960c>
   1a83c:	mov	r7, r0
   1a840:	mov	r8, r1
   1a844:	mov	fp, r2
   1a848:	mov	r5, #0
   1a84c:	b	1a934 <__assert_fail@plt+0x968c>
   1a850:	ldr	r0, [sp, #20]
   1a854:	bl	23f40 <__assert_fail@plt+0x12c98>
   1a858:	b	1a8c0 <__assert_fail@plt+0x9618>
   1a85c:	cmp	r3, #0
   1a860:	ble	1a8b4 <__assert_fail@plt+0x960c>
   1a864:	mov	r4, #0
   1a868:	b	1a894 <__assert_fail@plt+0x95ec>
   1a86c:	mov	r1, r5
   1a870:	mov	r0, fp
   1a874:	bl	1506c <__assert_fail@plt+0x3dc4>
   1a878:	sub	r1, r0, #1
   1a87c:	mov	r0, fp
   1a880:	bl	15104 <__assert_fail@plt+0x3e5c>
   1a884:	add	r4, r4, #1
   1a888:	ldr	r3, [r6, #4]
   1a88c:	cmp	r3, r4
   1a890:	ble	1a8b4 <__assert_fail@plt+0x960c>
   1a894:	ldr	r3, [r6, #8]
   1a898:	ldr	r5, [r3, r4, lsl #2]
   1a89c:	mov	r1, r5
   1a8a0:	add	r0, sp, #12
   1a8a4:	bl	1506c <__assert_fail@plt+0x3dc4>
   1a8a8:	cmp	r0, #0
   1a8ac:	bne	1a884 <__assert_fail@plt+0x95dc>
   1a8b0:	b	1a86c <__assert_fail@plt+0x95c4>
   1a8b4:	ldr	r0, [sp, #20]
   1a8b8:	bl	23f40 <__assert_fail@plt+0x12c98>
   1a8bc:	mov	r4, #0
   1a8c0:	mov	r0, r4
   1a8c4:	add	sp, sp, #28
   1a8c8:	ldrd	r4, [sp]
   1a8cc:	ldrd	r6, [sp, #8]
   1a8d0:	ldrd	r8, [sp, #16]
   1a8d4:	ldrd	sl, [sp, #24]
   1a8d8:	add	sp, sp, #32
   1a8dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8e0:	mov	r1, r9
   1a8e4:	mov	r0, r6
   1a8e8:	bl	1506c <__assert_fail@plt+0x3dc4>
   1a8ec:	cmp	r0, #0
   1a8f0:	bne	1a924 <__assert_fail@plt+0x967c>
   1a8f4:	mov	r1, r9
   1a8f8:	mov	r0, fp
   1a8fc:	bl	1506c <__assert_fail@plt+0x3dc4>
   1a900:	cmp	r0, #0
   1a904:	beq	1a924 <__assert_fail@plt+0x967c>
   1a908:	ldr	r2, [r7, #28]
   1a90c:	add	r2, r2, r4
   1a910:	ldr	r1, [sp, #4]
   1a914:	add	r0, sp, #12
   1a918:	bl	16484 <__assert_fail@plt+0x51dc>
   1a91c:	subs	r4, r0, #0
   1a920:	bne	1a850 <__assert_fail@plt+0x95a8>
   1a924:	add	r5, r5, #1
   1a928:	ldr	r3, [r6, #4]
   1a92c:	cmp	r3, r5
   1a930:	ble	1a85c <__assert_fail@plt+0x95b4>
   1a934:	ldr	r3, [r6, #8]
   1a938:	ldr	r4, [r3, r5, lsl #2]
   1a93c:	cmp	r8, r4
   1a940:	beq	1a924 <__assert_fail@plt+0x967c>
   1a944:	ldr	r3, [r7]
   1a948:	add	r3, r3, r4, lsl #3
   1a94c:	ldrb	r3, [r3, #4]
   1a950:	tst	r3, #8
   1a954:	beq	1a924 <__assert_fail@plt+0x967c>
   1a958:	add	r4, r4, r4, lsl #1
   1a95c:	lsl	r4, r4, #2
   1a960:	ldr	r3, [r7, #20]
   1a964:	add	r3, r3, r4
   1a968:	ldr	r2, [r3, #8]
   1a96c:	ldr	r9, [r2]
   1a970:	ldr	r3, [r3, #4]
   1a974:	cmp	r3, #1
   1a978:	ble	1a8e0 <__assert_fail@plt+0x9638>
   1a97c:	ldr	sl, [r2, #4]
   1a980:	mov	r1, r9
   1a984:	mov	r0, r6
   1a988:	bl	1506c <__assert_fail@plt+0x3dc4>
   1a98c:	cmp	r0, #0
   1a990:	bne	1a9a8 <__assert_fail@plt+0x9700>
   1a994:	mov	r1, r9
   1a998:	mov	r0, fp
   1a99c:	bl	1506c <__assert_fail@plt+0x3dc4>
   1a9a0:	cmp	r0, #0
   1a9a4:	bne	1a908 <__assert_fail@plt+0x9660>
   1a9a8:	cmp	sl, #0
   1a9ac:	ble	1a924 <__assert_fail@plt+0x967c>
   1a9b0:	mov	r1, sl
   1a9b4:	mov	r0, r6
   1a9b8:	bl	1506c <__assert_fail@plt+0x3dc4>
   1a9bc:	cmp	r0, #0
   1a9c0:	bne	1a924 <__assert_fail@plt+0x967c>
   1a9c4:	mov	r1, sl
   1a9c8:	mov	r0, fp
   1a9cc:	bl	1506c <__assert_fail@plt+0x3dc4>
   1a9d0:	cmp	r0, #0
   1a9d4:	beq	1a924 <__assert_fail@plt+0x967c>
   1a9d8:	b	1a908 <__assert_fail@plt+0x9660>
   1a9dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a9e0:	strd	r6, [sp, #8]
   1a9e4:	strd	r8, [sp, #16]
   1a9e8:	strd	sl, [sp, #24]
   1a9ec:	str	lr, [sp, #32]
   1a9f0:	sub	sp, sp, #28
   1a9f4:	mov	r4, r0
   1a9f8:	mov	r6, r1
   1a9fc:	mov	r7, r2
   1aa00:	ldr	r5, [r0, #24]
   1aa04:	cmp	r5, r1
   1aa08:	suble	r5, r1, r5
   1aa0c:	ble	1aa68 <__assert_fail@plt+0x97c0>
   1aa10:	ldr	r3, [r0, #80]	; 0x50
   1aa14:	cmp	r3, #1
   1aa18:	bgt	1ab2c <__assert_fail@plt+0x9884>
   1aa1c:	ldr	r3, [r4, #44]	; 0x2c
   1aa20:	str	r3, [r4, #48]	; 0x30
   1aa24:	ldr	r3, [r4, #52]	; 0x34
   1aa28:	str	r3, [r4, #56]	; 0x38
   1aa2c:	mov	r3, #0
   1aa30:	str	r3, [r4, #28]
   1aa34:	str	r3, [r4, #24]
   1aa38:	str	r3, [r4, #32]
   1aa3c:	strb	r3, [r4, #76]	; 0x4c
   1aa40:	and	r3, r7, #1
   1aa44:	cmp	r3, #0
   1aa48:	movne	r3, #4
   1aa4c:	moveq	r3, #6
   1aa50:	str	r3, [r4, #60]	; 0x3c
   1aa54:	ldrb	r3, [r4, #75]	; 0x4b
   1aa58:	cmp	r3, #0
   1aa5c:	ldreq	r3, [r4]
   1aa60:	streq	r3, [r4, #4]
   1aa64:	mov	r5, r6
   1aa68:	cmp	r5, #0
   1aa6c:	beq	1aae4 <__assert_fail@plt+0x983c>
   1aa70:	ldr	r3, [r4, #32]
   1aa74:	cmp	r3, r5
   1aa78:	ble	1ad60 <__assert_fail@plt+0x9ab8>
   1aa7c:	ldrb	r3, [r4, #76]	; 0x4c
   1aa80:	cmp	r3, #0
   1aa84:	bne	1ab3c <__assert_fail@plt+0x9894>
   1aa88:	mov	r2, r7
   1aa8c:	sub	r1, r5, #1
   1aa90:	mov	r0, r4
   1aa94:	bl	1908c <__assert_fail@plt+0x7de4>
   1aa98:	str	r0, [r4, #60]	; 0x3c
   1aa9c:	ldr	r3, [r4, #80]	; 0x50
   1aaa0:	cmp	r3, #1
   1aaa4:	bgt	1ad2c <__assert_fail@plt+0x9a84>
   1aaa8:	ldrb	r3, [r4, #75]	; 0x4b
   1aaac:	cmp	r3, #0
   1aab0:	bne	1ad48 <__assert_fail@plt+0x9aa0>
   1aab4:	ldr	r3, [r4, #28]
   1aab8:	sub	r3, r3, r5
   1aabc:	str	r3, [r4, #28]
   1aac0:	ldr	r3, [r4, #32]
   1aac4:	sub	r3, r3, r5
   1aac8:	str	r3, [r4, #32]
   1aacc:	ldrb	r3, [r4, #75]	; 0x4b
   1aad0:	cmp	r3, #0
   1aad4:	bne	1aae4 <__assert_fail@plt+0x983c>
   1aad8:	ldr	r3, [r4, #4]
   1aadc:	add	r3, r3, r5
   1aae0:	str	r3, [r4, #4]
   1aae4:	str	r6, [r4, #24]
   1aae8:	ldr	r3, [r4, #48]	; 0x30
   1aaec:	sub	r3, r3, r5
   1aaf0:	str	r3, [r4, #48]	; 0x30
   1aaf4:	ldr	r2, [r4, #56]	; 0x38
   1aaf8:	sub	r5, r2, r5
   1aafc:	str	r5, [r4, #56]	; 0x38
   1ab00:	ldr	r2, [r4, #80]	; 0x50
   1ab04:	cmp	r2, #1
   1ab08:	ble	1b0a4 <__assert_fail@plt+0x9dfc>
   1ab0c:	ldrb	r3, [r4, #72]	; 0x48
   1ab10:	cmp	r3, #0
   1ab14:	beq	1b098 <__assert_fail@plt+0x9df0>
   1ab18:	mov	r0, r4
   1ab1c:	bl	16884 <__assert_fail@plt+0x55dc>
   1ab20:	cmp	r0, #0
   1ab24:	beq	1b0b4 <__assert_fail@plt+0x9e0c>
   1ab28:	b	1b0bc <__assert_fail@plt+0x9e14>
   1ab2c:	mov	r3, #0
   1ab30:	str	r3, [r0, #16]
   1ab34:	str	r3, [r0, #20]
   1ab38:	b	1aa1c <__assert_fail@plt+0x9774>
   1ab3c:	ldr	sl, [r4, #28]
   1ab40:	ldr	r9, [r4, #12]
   1ab44:	mov	r2, sl
   1ab48:	mov	r1, #0
   1ab4c:	b	1ab5c <__assert_fail@plt+0x98b4>
   1ab50:	mov	r2, r8
   1ab54:	cmp	r1, r2
   1ab58:	bge	1ab80 <__assert_fail@plt+0x98d8>
   1ab5c:	add	r3, r1, r2
   1ab60:	add	r3, r3, r3, lsr #31
   1ab64:	asr	r8, r3, #1
   1ab68:	ldr	r3, [r9, r8, lsl #2]
   1ab6c:	cmp	r3, r5
   1ab70:	bgt	1ab50 <__assert_fail@plt+0x98a8>
   1ab74:	bge	1ab88 <__assert_fail@plt+0x98e0>
   1ab78:	add	r1, r8, #1
   1ab7c:	b	1ab54 <__assert_fail@plt+0x98ac>
   1ab80:	cmp	r3, r5
   1ab84:	addlt	r8, r8, #1
   1ab88:	mov	r2, r7
   1ab8c:	sub	r1, r8, #1
   1ab90:	mov	r0, r4
   1ab94:	bl	1908c <__assert_fail@plt+0x7de4>
   1ab98:	str	r0, [r4, #60]	; 0x3c
   1ab9c:	cmp	r5, sl
   1aba0:	movge	r3, #0
   1aba4:	movlt	r3, #1
   1aba8:	cmp	r5, r8
   1abac:	movne	r3, #0
   1abb0:	cmp	r3, #0
   1abb4:	bne	1ac8c <__assert_fail@plt+0x99e4>
   1abb8:	ldr	r3, [r4, #44]	; 0x2c
   1abbc:	sub	r3, r3, r6
   1abc0:	add	r3, r3, r5
   1abc4:	str	r3, [r4, #48]	; 0x30
   1abc8:	ldr	r3, [r4, #52]	; 0x34
   1abcc:	sub	r3, r3, r6
   1abd0:	add	r3, r3, r5
   1abd4:	str	r3, [r4, #56]	; 0x38
   1abd8:	mov	r3, #0
   1abdc:	strb	r3, [r4, #76]	; 0x4c
   1abe0:	cmp	r8, r3
   1abe4:	ble	1ac10 <__assert_fail@plt+0x9968>
   1abe8:	sub	r2, r8, #-1073741823	; 0xc0000001
   1abec:	add	r3, r9, r2, lsl #2
   1abf0:	ldr	r2, [r9, r2, lsl #2]
   1abf4:	cmp	r5, r2
   1abf8:	bne	1ac10 <__assert_fail@plt+0x9968>
   1abfc:	subs	r8, r8, #1
   1ac00:	beq	1ac10 <__assert_fail@plt+0x9968>
   1ac04:	ldr	r2, [r3, #-4]!
   1ac08:	cmp	r2, r5
   1ac0c:	beq	1abfc <__assert_fail@plt+0x9954>
   1ac10:	cmp	r8, sl
   1ac14:	bge	1ad10 <__assert_fail@plt+0x9a68>
   1ac18:	ldr	r2, [r4, #8]
   1ac1c:	add	r3, r2, r8, lsl #2
   1ac20:	ldr	r2, [r2, r8, lsl #2]
   1ac24:	cmn	r2, #1
   1ac28:	bne	1ac44 <__assert_fail@plt+0x999c>
   1ac2c:	add	r8, r8, #1
   1ac30:	cmp	sl, r8
   1ac34:	beq	1ad18 <__assert_fail@plt+0x9a70>
   1ac38:	ldr	r2, [r3, #4]!
   1ac3c:	cmn	r2, #1
   1ac40:	beq	1ac2c <__assert_fail@plt+0x9984>
   1ac44:	ldr	r2, [r9, r8, lsl #2]
   1ac48:	sub	r2, r2, r5
   1ac4c:	str	r2, [r4, #28]
   1ac50:	cmp	r2, #0
   1ac54:	beq	1ad20 <__assert_fail@plt+0x9a78>
   1ac58:	ble	1ac7c <__assert_fail@plt+0x99d4>
   1ac5c:	mov	r3, #0
   1ac60:	mvn	r1, #0
   1ac64:	ldr	r2, [r4, #8]
   1ac68:	str	r1, [r2, r3, lsl #2]
   1ac6c:	add	r3, r3, #1
   1ac70:	ldr	r2, [r4, #28]
   1ac74:	cmp	r2, r3
   1ac78:	bgt	1ac64 <__assert_fail@plt+0x99bc>
   1ac7c:	mov	r1, #255	; 0xff
   1ac80:	ldr	r0, [r4, #4]
   1ac84:	bl	111c4 <memset@plt>
   1ac88:	b	1ad20 <__assert_fail@plt+0x9a78>
   1ac8c:	ldr	r3, [r9, r8, lsl #2]
   1ac90:	cmp	r3, r5
   1ac94:	bne	1abb8 <__assert_fail@plt+0x9910>
   1ac98:	ldr	r0, [r4, #8]
   1ac9c:	lsl	r7, r5, #2
   1aca0:	sub	r2, sl, r5
   1aca4:	lsl	r2, r2, #2
   1aca8:	add	r1, r0, r7
   1acac:	bl	11008 <memmove@plt>
   1acb0:	ldr	r0, [r4, #4]
   1acb4:	ldr	r2, [r4, #28]
   1acb8:	sub	r2, r2, r5
   1acbc:	add	r1, r0, r5
   1acc0:	bl	11008 <memmove@plt>
   1acc4:	ldr	r3, [r4, #28]
   1acc8:	sub	r3, r3, r5
   1accc:	str	r3, [r4, #28]
   1acd0:	ldr	r2, [r4, #32]
   1acd4:	sub	r2, r2, r5
   1acd8:	str	r2, [r4, #32]
   1acdc:	cmp	r3, #0
   1ace0:	ble	1aacc <__assert_fail@plt+0x9824>
   1ace4:	mov	r3, #0
   1ace8:	ldr	r1, [r4, #12]
   1acec:	ldr	r2, [r1, r7]
   1acf0:	sub	r2, r2, r5
   1acf4:	str	r2, [r1, r3, lsl #2]
   1acf8:	add	r3, r3, #1
   1acfc:	add	r7, r7, #4
   1ad00:	ldr	r2, [r4, #28]
   1ad04:	cmp	r2, r3
   1ad08:	bgt	1ace8 <__assert_fail@plt+0x9a40>
   1ad0c:	b	1aacc <__assert_fail@plt+0x9824>
   1ad10:	cmp	r8, sl
   1ad14:	bne	1ac44 <__assert_fail@plt+0x999c>
   1ad18:	mov	r3, #0
   1ad1c:	str	r3, [r4, #28]
   1ad20:	ldr	r3, [r4, #28]
   1ad24:	str	r3, [r4, #32]
   1ad28:	b	1aacc <__assert_fail@plt+0x9824>
   1ad2c:	ldr	r0, [r4, #8]
   1ad30:	ldr	r2, [r4, #28]
   1ad34:	sub	r2, r2, r5
   1ad38:	lsl	r2, r2, #2
   1ad3c:	add	r1, r0, r5, lsl #2
   1ad40:	bl	11008 <memmove@plt>
   1ad44:	b	1aaa8 <__assert_fail@plt+0x9800>
   1ad48:	ldr	r0, [r4, #4]
   1ad4c:	ldr	r2, [r4, #28]
   1ad50:	sub	r2, r2, r5
   1ad54:	add	r1, r0, r5
   1ad58:	bl	11008 <memmove@plt>
   1ad5c:	b	1aab4 <__assert_fail@plt+0x980c>
   1ad60:	ldr	fp, [r4, #28]
   1ad64:	ldrb	r3, [r4, #76]	; 0x4c
   1ad68:	cmp	r3, #0
   1ad6c:	bne	1aecc <__assert_fail@plt+0x9c24>
   1ad70:	mov	r3, #0
   1ad74:	str	r3, [r4, #28]
   1ad78:	ldr	r3, [r4, #80]	; 0x50
   1ad7c:	cmp	r3, #1
   1ad80:	ble	1b034 <__assert_fail@plt+0x9d8c>
   1ad84:	ldrb	r2, [r4, #73]	; 0x49
   1ad88:	cmp	r2, #0
   1ad8c:	beq	1ae44 <__assert_fail@plt+0x9b9c>
   1ad90:	ldr	r1, [r4]
   1ad94:	ldr	r9, [r4, #24]
   1ad98:	add	r9, r1, r9
   1ad9c:	sub	r3, r5, r3
   1ada0:	add	r3, r9, r3
   1ada4:	cmp	r1, r3
   1ada8:	movcc	r1, r3
   1adac:	mov	sl, r5
   1adb0:	sub	r3, r5, #1
   1adb4:	add	r8, r9, r3
   1adb8:	cmp	r1, r8
   1adbc:	bhi	1ae44 <__assert_fail@plt+0x9b9c>
   1adc0:	ldrb	r3, [r9, r3]
   1adc4:	and	r3, r3, #192	; 0xc0
   1adc8:	cmp	r3, #128	; 0x80
   1adcc:	subeq	r3, r8, #1
   1add0:	subeq	r1, r1, #1
   1add4:	bne	1adf8 <__assert_fail@plt+0x9b50>
   1add8:	mov	r8, r3
   1addc:	cmp	r3, r1
   1ade0:	beq	1ae44 <__assert_fail@plt+0x9b9c>
   1ade4:	sub	r3, r3, #1
   1ade8:	ldrb	r2, [r8]
   1adec:	and	r2, r2, #192	; 0xc0
   1adf0:	cmp	r2, #128	; 0x80
   1adf4:	beq	1add8 <__assert_fail@plt+0x9b30>
   1adf8:	ldr	r2, [r4, #48]	; 0x30
   1adfc:	add	r2, r9, r2
   1ae00:	sub	r2, r2, r8
   1ae04:	ldr	r3, [r4, #64]	; 0x40
   1ae08:	cmp	r3, #0
   1ae0c:	moveq	ip, r8
   1ae10:	bne	1aef8 <__assert_fail@plt+0x9c50>
   1ae14:	mov	r0, #0
   1ae18:	mov	r1, #0
   1ae1c:	strd	r0, [sp, #16]
   1ae20:	add	r3, sp, #16
   1ae24:	mov	r1, ip
   1ae28:	add	r0, sp, #4
   1ae2c:	bl	23fe4 <__assert_fail@plt+0x12d3c>
   1ae30:	add	r9, r9, sl
   1ae34:	sub	r8, r9, r8
   1ae38:	cmp	r8, r0
   1ae3c:	cmnls	r0, #3
   1ae40:	bls	1af40 <__assert_fail@plt+0x9c98>
   1ae44:	ldr	r0, [r4, #24]
   1ae48:	ldr	r3, [r4, #32]
   1ae4c:	add	r0, r0, r3
   1ae50:	cmp	r6, r0
   1ae54:	ble	1b108 <__assert_fail@plt+0x9e60>
   1ae58:	add	r9, r4, #16
   1ae5c:	ldr	r8, [r4, #44]	; 0x2c
   1ae60:	sub	r8, r8, r0
   1ae64:	ldrd	r2, [r9]
   1ae68:	strd	r2, [sp, #16]
   1ae6c:	mov	sl, r0
   1ae70:	ldr	r1, [r4]
   1ae74:	mov	r3, r9
   1ae78:	mov	r2, r8
   1ae7c:	add	r1, r1, r0
   1ae80:	add	r0, sp, #8
   1ae84:	bl	23fe4 <__assert_fail@plt+0x12d3c>
   1ae88:	sub	r3, r0, #1
   1ae8c:	cmn	r3, #4
   1ae90:	ldrls	r8, [sp, #8]
   1ae94:	bhi	1af94 <__assert_fail@plt+0x9cec>
   1ae98:	add	r0, sl, r0
   1ae9c:	cmp	r6, r0
   1aea0:	bgt	1ae5c <__assert_fail@plt+0x9bb4>
   1aea4:	sub	r0, r0, r6
   1aea8:	str	r0, [r4, #28]
   1aeac:	cmn	r8, #1
   1aeb0:	bne	1af60 <__assert_fail@plt+0x9cb8>
   1aeb4:	mov	r2, r7
   1aeb8:	sub	r1, fp, #1
   1aebc:	mov	r0, r4
   1aec0:	bl	1908c <__assert_fail@plt+0x7de4>
   1aec4:	str	r0, [r4, #60]	; 0x3c
   1aec8:	b	1af7c <__assert_fail@plt+0x9cd4>
   1aecc:	ldr	r3, [r4, #44]	; 0x2c
   1aed0:	sub	r3, r3, r6
   1aed4:	add	r3, r3, r5
   1aed8:	str	r3, [r4, #48]	; 0x30
   1aedc:	ldr	r3, [r4, #52]	; 0x34
   1aee0:	sub	r3, r3, r6
   1aee4:	add	r3, r3, r5
   1aee8:	str	r3, [r4, #56]	; 0x38
   1aeec:	mov	r3, #0
   1aef0:	strb	r3, [r4, #76]	; 0x4c
   1aef4:	b	1ad70 <__assert_fail@plt+0x9ac8>
   1aef8:	cmp	r2, #6
   1aefc:	movlt	r0, r2
   1af00:	movge	r0, #6
   1af04:	cmp	r2, #0
   1af08:	addle	ip, sp, #8
   1af0c:	ble	1ae14 <__assert_fail@plt+0x9b6c>
   1af10:	add	r1, r8, r0
   1af14:	add	ip, sp, #24
   1af18:	add	r0, ip, r0
   1af1c:	sub	r0, r0, #17
   1af20:	mov	lr, r8
   1af24:	ldrb	ip, [r1, #-1]!
   1af28:	ldrb	ip, [r3, ip]
   1af2c:	strb	ip, [r0], #-1
   1af30:	cmp	r1, lr
   1af34:	bne	1af24 <__assert_fail@plt+0x9c7c>
   1af38:	add	ip, sp, #8
   1af3c:	b	1ae14 <__assert_fail@plt+0x9b6c>
   1af40:	mov	r3, #0
   1af44:	str	r3, [r4, #16]
   1af48:	str	r3, [r4, #20]
   1af4c:	sub	r0, r0, r8
   1af50:	str	r0, [r4, #28]
   1af54:	ldr	r8, [sp, #4]
   1af58:	cmn	r8, #1
   1af5c:	beq	1ae44 <__assert_fail@plt+0x9b9c>
   1af60:	ldrb	r3, [r4, #78]	; 0x4e
   1af64:	cmp	r3, #0
   1af68:	bne	1afb8 <__assert_fail@plt+0x9d10>
   1af6c:	cmp	r8, #10
   1af70:	movne	r3, #0
   1af74:	beq	1afe0 <__assert_fail@plt+0x9d38>
   1af78:	str	r3, [r4, #60]	; 0x3c
   1af7c:	ldr	r2, [r4, #28]
   1af80:	cmp	r2, #0
   1af84:	bne	1aff4 <__assert_fail@plt+0x9d4c>
   1af88:	ldr	r3, [r4, #28]
   1af8c:	str	r3, [r4, #32]
   1af90:	b	1aacc <__assert_fail@plt+0x9824>
   1af94:	cmp	r8, #0
   1af98:	cmpne	r0, #0
   1af9c:	ldrne	r3, [r4]
   1afa0:	ldrbne	r8, [r3, sl]
   1afa4:	moveq	r8, #0
   1afa8:	ldrd	r2, [sp, #16]
   1afac:	strd	r2, [r9]
   1afb0:	mov	r0, #1
   1afb4:	b	1ae98 <__assert_fail@plt+0x9bf0>
   1afb8:	mov	r0, r8
   1afbc:	bl	111ac <iswalnum@plt>
   1afc0:	subs	r3, r8, #95	; 0x5f
   1afc4:	movne	r3, #1
   1afc8:	cmp	r0, #0
   1afcc:	movne	r3, #0
   1afd0:	cmp	r3, #0
   1afd4:	moveq	r3, #1
   1afd8:	beq	1af78 <__assert_fail@plt+0x9cd0>
   1afdc:	b	1af6c <__assert_fail@plt+0x9cc4>
   1afe0:	ldrb	r3, [r4, #77]	; 0x4d
   1afe4:	cmp	r3, #0
   1afe8:	moveq	r3, #0
   1afec:	movne	r3, #2
   1aff0:	b	1af78 <__assert_fail@plt+0x9cd0>
   1aff4:	ble	1b018 <__assert_fail@plt+0x9d70>
   1aff8:	mov	r3, #0
   1affc:	mvn	r1, #0
   1b000:	ldr	r2, [r4, #8]
   1b004:	str	r1, [r2, r3, lsl #2]
   1b008:	add	r3, r3, #1
   1b00c:	ldr	r2, [r4, #28]
   1b010:	cmp	r2, r3
   1b014:	bgt	1b000 <__assert_fail@plt+0x9d58>
   1b018:	ldrb	r3, [r4, #75]	; 0x4b
   1b01c:	cmp	r3, #0
   1b020:	beq	1af88 <__assert_fail@plt+0x9ce0>
   1b024:	mov	r1, #255	; 0xff
   1b028:	ldr	r0, [r4, #4]
   1b02c:	bl	111c4 <memset@plt>
   1b030:	b	1af88 <__assert_fail@plt+0x9ce0>
   1b034:	ldr	r3, [r4]
   1b038:	ldr	r2, [r4, #24]
   1b03c:	add	r3, r3, r5
   1b040:	add	r3, r3, r2
   1b044:	ldrb	r1, [r3, #-1]
   1b048:	mov	r3, #0
   1b04c:	str	r3, [r4, #32]
   1b050:	ldr	r3, [r4, #64]	; 0x40
   1b054:	cmp	r3, #0
   1b058:	ldrbne	r1, [r3, r1]
   1b05c:	lsr	r2, r1, #5
   1b060:	ldr	r0, [r4, #68]	; 0x44
   1b064:	and	r3, r1, #31
   1b068:	ldr	r2, [r0, r2, lsl #2]
   1b06c:	lsr	r3, r2, r3
   1b070:	ands	r3, r3, #1
   1b074:	bne	1b080 <__assert_fail@plt+0x9dd8>
   1b078:	cmp	r1, #10
   1b07c:	beq	1b088 <__assert_fail@plt+0x9de0>
   1b080:	str	r3, [r4, #60]	; 0x3c
   1b084:	b	1aacc <__assert_fail@plt+0x9824>
   1b088:	ldrb	r2, [r4, #77]	; 0x4d
   1b08c:	cmp	r2, #0
   1b090:	movne	r3, #2
   1b094:	b	1b080 <__assert_fail@plt+0x9dd8>
   1b098:	mov	r0, r4
   1b09c:	bl	162ec <__assert_fail@plt+0x5044>
   1b0a0:	b	1b0b4 <__assert_fail@plt+0x9e0c>
   1b0a4:	ldrb	r2, [r4, #75]	; 0x4b
   1b0a8:	cmp	r2, #0
   1b0ac:	streq	r3, [r4, #28]
   1b0b0:	bne	1b0d8 <__assert_fail@plt+0x9e30>
   1b0b4:	mov	r0, #0
   1b0b8:	str	r0, [r4, #40]	; 0x28
   1b0bc:	add	sp, sp, #28
   1b0c0:	ldrd	r4, [sp]
   1b0c4:	ldrd	r6, [sp, #8]
   1b0c8:	ldrd	r8, [sp, #16]
   1b0cc:	ldrd	sl, [sp, #24]
   1b0d0:	add	sp, sp, #32
   1b0d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0d8:	ldrb	r3, [r4, #72]	; 0x48
   1b0dc:	cmp	r3, #0
   1b0e0:	bne	1b0fc <__assert_fail@plt+0x9e54>
   1b0e4:	ldr	r3, [r4, #64]	; 0x40
   1b0e8:	cmp	r3, #0
   1b0ec:	beq	1b0b4 <__assert_fail@plt+0x9e0c>
   1b0f0:	mov	r0, r4
   1b0f4:	bl	14fa8 <__assert_fail@plt+0x3d00>
   1b0f8:	b	1b0b4 <__assert_fail@plt+0x9e0c>
   1b0fc:	mov	r0, r4
   1b100:	bl	16e08 <__assert_fail@plt+0x5b60>
   1b104:	b	1b0b4 <__assert_fail@plt+0x9e0c>
   1b108:	sub	r0, r0, r6
   1b10c:	str	r0, [r4, #28]
   1b110:	b	1aeb4 <__assert_fail@plt+0x9c0c>
   1b114:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b118:	strd	r6, [sp, #8]
   1b11c:	strd	r8, [sp, #16]
   1b120:	strd	sl, [sp, #24]
   1b124:	str	lr, [sp, #32]
   1b128:	sub	sp, sp, #14464	; 0x3880
   1b12c:	sub	sp, sp, #44	; 0x2c
   1b130:	str	r1, [sp, #16]
   1b134:	mov	r3, #0
   1b138:	str	r3, [r1, #44]	; 0x2c
   1b13c:	str	r3, [r1, #48]	; 0x30
   1b140:	mov	r2, #0
   1b144:	mov	r3, #0
   1b148:	strd	r2, [sp, #24]
   1b14c:	strd	r2, [sp, #32]
   1b150:	strd	r2, [sp, #40]	; 0x28
   1b154:	strd	r2, [sp, #48]	; 0x30
   1b158:	ldr	r3, [r1, #8]
   1b15c:	cmp	r3, #0
   1b160:	ble	1b7b0 <__assert_fail@plt+0xa508>
   1b164:	mov	r9, r1
   1b168:	mov	sl, #0
   1b16c:	str	sl, [sp, #4]
   1b170:	str	r0, [sp, #8]
   1b174:	b	1b5ec <__assert_fail@plt+0xa344>
   1b178:	ldrb	r3, [r3, r1, lsl #3]
   1b17c:	asr	r0, r3, #5
   1b180:	and	r3, r3, #31
   1b184:	add	r1, sp, #24
   1b188:	ldr	r1, [r1, r0, lsl #2]
   1b18c:	mov	ip, #1
   1b190:	orr	r3, r1, ip, lsl r3
   1b194:	add	r1, sp, #24
   1b198:	str	r3, [r1, r0, lsl #2]
   1b19c:	cmp	r2, #0
   1b1a0:	beq	1b280 <__assert_fail@plt+0x9fd8>
   1b1a4:	tst	r2, #32
   1b1a8:	bne	1b34c <__assert_fail@plt+0xa0a4>
   1b1ac:	tst	r2, #128	; 0x80
   1b1b0:	bne	1b37c <__assert_fail@plt+0xa0d4>
   1b1b4:	tst	r2, #4
   1b1b8:	beq	1b21c <__assert_fail@plt+0x9f74>
   1b1bc:	cmp	r7, #1
   1b1c0:	beq	1b398 <__assert_fail@plt+0xa0f0>
   1b1c4:	ldr	r1, [sp, #8]
   1b1c8:	ldr	r3, [r1, #92]	; 0x5c
   1b1cc:	cmp	r3, #1
   1b1d0:	ble	1b3c0 <__assert_fail@plt+0xa118>
   1b1d4:	add	ip, sp, #20
   1b1d8:	add	r0, r1, #96	; 0x60
   1b1dc:	ldr	lr, [r1, #60]	; 0x3c
   1b1e0:	sub	lr, lr, #4
   1b1e4:	add	r4, r1, #128	; 0x80
   1b1e8:	mov	r1, #0
   1b1ec:	ldr	r5, [r0], #4
   1b1f0:	ldr	r3, [lr, #4]!
   1b1f4:	mvn	r3, r3
   1b1f8:	orr	r3, r3, r5
   1b1fc:	ldr	r5, [ip, #4]!
   1b200:	and	r3, r3, r5
   1b204:	str	r3, [ip]
   1b208:	orr	r1, r1, r3
   1b20c:	cmp	r0, r4
   1b210:	bne	1b1ec <__assert_fail@plt+0x9f44>
   1b214:	cmp	r1, #0
   1b218:	beq	1b5d0 <__assert_fail@plt+0xa328>
   1b21c:	tst	r2, #8
   1b220:	beq	1b280 <__assert_fail@plt+0x9fd8>
   1b224:	cmp	r7, #1
   1b228:	beq	1b3f4 <__assert_fail@plt+0xa14c>
   1b22c:	ldr	r2, [sp, #8]
   1b230:	ldr	r3, [r2, #92]	; 0x5c
   1b234:	cmp	r3, #1
   1b238:	ble	1b41c <__assert_fail@plt+0xa174>
   1b23c:	add	r0, sp, #20
   1b240:	add	r1, r2, #96	; 0x60
   1b244:	ldr	ip, [r2, #60]	; 0x3c
   1b248:	sub	ip, ip, #4
   1b24c:	add	lr, r2, #128	; 0x80
   1b250:	mov	r2, #0
   1b254:	ldr	r3, [r1], #4
   1b258:	ldr	r4, [ip, #4]!
   1b25c:	and	r4, r4, r3
   1b260:	ldr	r3, [r0, #4]!
   1b264:	bic	r3, r3, r4
   1b268:	str	r3, [r0]
   1b26c:	orr	r2, r2, r3
   1b270:	cmp	r1, lr
   1b274:	bne	1b254 <__assert_fail@plt+0x9fac>
   1b278:	cmp	r2, #0
   1b27c:	beq	1b5d0 <__assert_fail@plt+0xa328>
   1b280:	cmp	sl, #0
   1b284:	addgt	r4, sp, #148	; 0x94
   1b288:	movgt	r5, #0
   1b28c:	bgt	1b49c <__assert_fail@plt+0xa1f4>
   1b290:	mov	r5, #0
   1b294:	b	1b5c8 <__assert_fail@plt+0xa320>
   1b298:	ldr	lr, [r3, r1, lsl #3]
   1b29c:	add	r0, sp, #20
   1b2a0:	sub	r1, lr, #4
   1b2a4:	add	lr, lr, #28
   1b2a8:	ldr	r3, [r0, #4]!
   1b2ac:	ldr	ip, [r1, #4]!
   1b2b0:	orr	r3, r3, ip
   1b2b4:	str	r3, [r0]
   1b2b8:	cmp	r1, lr
   1b2bc:	bne	1b2a8 <__assert_fail@plt+0xa000>
   1b2c0:	b	1b19c <__assert_fail@plt+0x9ef4>
   1b2c4:	ldr	r1, [sp, #8]
   1b2c8:	ldr	r3, [r1, #92]	; 0x5c
   1b2cc:	cmp	r3, #1
   1b2d0:	ble	1b300 <__assert_fail@plt+0xa058>
   1b2d4:	ldr	lr, [r1, #60]	; 0x3c
   1b2d8:	add	r0, sp, #20
   1b2dc:	sub	r1, lr, #4
   1b2e0:	add	lr, lr, #28
   1b2e4:	ldr	r3, [r0, #4]!
   1b2e8:	ldr	ip, [r1, #4]!
   1b2ec:	orr	r3, r3, ip
   1b2f0:	str	r3, [r0]
   1b2f4:	cmp	r1, lr
   1b2f8:	bne	1b2e4 <__assert_fail@plt+0xa03c>
   1b2fc:	b	1b318 <__assert_fail@plt+0xa070>
   1b300:	mvn	r0, #0
   1b304:	mvn	r1, #0
   1b308:	strd	r0, [sp, #24]
   1b30c:	strd	r0, [sp, #32]
   1b310:	strd	r0, [sp, #40]	; 0x28
   1b314:	strd	r0, [sp, #48]	; 0x30
   1b318:	ldr	r3, [sp, #8]
   1b31c:	ldr	r3, [r3, #128]	; 0x80
   1b320:	tst	r3, #64	; 0x40
   1b324:	bne	1b334 <__assert_fail@plt+0xa08c>
   1b328:	ldr	r1, [sp, #24]
   1b32c:	bic	r1, r1, #1024	; 0x400
   1b330:	str	r1, [sp, #24]
   1b334:	tst	r3, #128	; 0x80
   1b338:	beq	1b19c <__assert_fail@plt+0x9ef4>
   1b33c:	ldr	r3, [sp, #24]
   1b340:	bic	r3, r3, #1
   1b344:	str	r3, [sp, #24]
   1b348:	b	1b19c <__assert_fail@plt+0x9ef4>
   1b34c:	ldr	r3, [sp, #24]
   1b350:	mov	r0, #0
   1b354:	mov	r1, #0
   1b358:	strd	r0, [sp, #24]
   1b35c:	strd	r0, [sp, #32]
   1b360:	strd	r0, [sp, #40]	; 0x28
   1b364:	strd	r0, [sp, #48]	; 0x30
   1b368:	tst	r3, #1024	; 0x400
   1b36c:	beq	1b5d0 <__assert_fail@plt+0xa328>
   1b370:	mov	r3, #1024	; 0x400
   1b374:	str	r3, [sp, #24]
   1b378:	b	1b1ac <__assert_fail@plt+0x9f04>
   1b37c:	mov	r2, #0
   1b380:	mov	r3, #0
   1b384:	strd	r2, [sp, #24]
   1b388:	strd	r2, [sp, #32]
   1b38c:	strd	r2, [sp, #40]	; 0x28
   1b390:	strd	r2, [sp, #48]	; 0x30
   1b394:	b	1b5d0 <__assert_fail@plt+0xa328>
   1b398:	ldrb	r3, [r8, #6]
   1b39c:	tst	r3, #64	; 0x40
   1b3a0:	bne	1b1c4 <__assert_fail@plt+0x9f1c>
   1b3a4:	mov	r2, #0
   1b3a8:	mov	r3, #0
   1b3ac:	strd	r2, [sp, #24]
   1b3b0:	strd	r2, [sp, #32]
   1b3b4:	strd	r2, [sp, #40]	; 0x28
   1b3b8:	strd	r2, [sp, #48]	; 0x30
   1b3bc:	b	1b5d0 <__assert_fail@plt+0xa328>
   1b3c0:	add	ip, sp, #20
   1b3c4:	ldr	r3, [sp, #8]
   1b3c8:	add	r0, r3, #96	; 0x60
   1b3cc:	add	lr, r3, #128	; 0x80
   1b3d0:	mov	r1, #0
   1b3d4:	ldr	r3, [r0], #4
   1b3d8:	ldr	r4, [ip, #4]!
   1b3dc:	and	r3, r3, r4
   1b3e0:	str	r3, [ip]
   1b3e4:	orr	r1, r1, r3
   1b3e8:	cmp	r0, lr
   1b3ec:	bne	1b3d4 <__assert_fail@plt+0xa12c>
   1b3f0:	b	1b214 <__assert_fail@plt+0x9f6c>
   1b3f4:	ldrb	r3, [r8, #6]
   1b3f8:	tst	r3, #64	; 0x40
   1b3fc:	beq	1b22c <__assert_fail@plt+0x9f84>
   1b400:	mov	r2, #0
   1b404:	mov	r3, #0
   1b408:	strd	r2, [sp, #24]
   1b40c:	strd	r2, [sp, #32]
   1b410:	strd	r2, [sp, #40]	; 0x28
   1b414:	strd	r2, [sp, #48]	; 0x30
   1b418:	b	1b5d0 <__assert_fail@plt+0xa328>
   1b41c:	add	r0, sp, #20
   1b420:	ldr	r3, [sp, #8]
   1b424:	add	r1, r3, #96	; 0x60
   1b428:	add	lr, r3, #128	; 0x80
   1b42c:	mov	r2, #0
   1b430:	ldr	ip, [r1], #4
   1b434:	ldr	r3, [r0, #4]!
   1b438:	bic	r3, r3, ip
   1b43c:	str	r3, [r0]
   1b440:	orr	r2, r2, r3
   1b444:	cmp	r1, lr
   1b448:	bne	1b430 <__assert_fail@plt+0xa188>
   1b44c:	b	1b278 <__assert_fail@plt+0x9fd0>
   1b450:	add	r2, sp, #20
   1b454:	sub	r1, r4, #32
   1b458:	add	r6, sp, #52	; 0x34
   1b45c:	mov	ip, r1
   1b460:	mov	lr, r2
   1b464:	mov	r0, #0
   1b468:	ldr	r3, [lr, #4]!
   1b46c:	ldr	fp, [ip, #4]!
   1b470:	and	r3, r3, fp
   1b474:	str	r3, [r6, #4]!
   1b478:	orr	r0, r0, r3
   1b47c:	cmp	ip, r4
   1b480:	bne	1b468 <__assert_fail@plt+0xa1c0>
   1b484:	cmp	r0, #0
   1b488:	bne	1b4dc <__assert_fail@plt+0xa234>
   1b48c:	add	r5, r5, #1
   1b490:	add	r4, r4, #32
   1b494:	cmp	r5, sl
   1b498:	bge	1b5c8 <__assert_fail@plt+0xa320>
   1b49c:	cmp	r7, #1
   1b4a0:	bne	1b450 <__assert_fail@plt+0xa1a8>
   1b4a4:	ldrb	r2, [r8]
   1b4a8:	asr	r1, r2, #5
   1b4ac:	lsl	r3, r5, #5
   1b4b0:	add	r3, r3, r1, lsl #2
   1b4b4:	add	r1, sp, #14464	; 0x3880
   1b4b8:	add	r1, r1, #40	; 0x28
   1b4bc:	add	r3, r1, r3
   1b4c0:	sub	r3, r3, #14336	; 0x3800
   1b4c4:	and	r2, r2, #31
   1b4c8:	ldr	r3, [r3, #-48]	; 0xffffffd0
   1b4cc:	lsr	r2, r3, r2
   1b4d0:	tst	r2, #1
   1b4d4:	beq	1b48c <__assert_fail@plt+0xa1e4>
   1b4d8:	b	1b450 <__assert_fail@plt+0xa1a8>
   1b4dc:	add	fp, sp, #84	; 0x54
   1b4e0:	mov	r6, #0
   1b4e4:	mov	lr, r6
   1b4e8:	ldr	r3, [r2, #4]!
   1b4ec:	ldr	r0, [r1, #4]!
   1b4f0:	bic	ip, r0, r3
   1b4f4:	str	ip, [fp, #4]!
   1b4f8:	orr	lr, lr, ip
   1b4fc:	bic	r3, r3, r0
   1b500:	str	r3, [r2]
   1b504:	orr	r6, r6, r3
   1b508:	cmp	r1, r4
   1b50c:	bne	1b4e8 <__assert_fail@plt+0xa240>
   1b510:	cmp	lr, #0
   1b514:	beq	1b598 <__assert_fail@plt+0xa2f0>
   1b518:	add	r3, sp, #14464	; 0x3880
   1b51c:	add	r3, r3, #40	; 0x28
   1b520:	add	ip, r3, sl, lsl #5
   1b524:	sub	ip, ip, #14336	; 0x3800
   1b528:	add	r1, sp, #88	; 0x58
   1b52c:	ldrd	r2, [r1]
   1b530:	strd	r2, [ip, #-48]	; 0xffffffd0
   1b534:	ldrd	r2, [r1, #8]
   1b538:	strd	r2, [ip, #-40]	; 0xffffffd8
   1b53c:	ldrd	r2, [r1, #16]
   1b540:	strd	r2, [ip, #-32]	; 0xffffffe0
   1b544:	ldrd	r2, [r1, #24]
   1b548:	strd	r2, [ip, #-24]	; 0xffffffe8
   1b54c:	add	r1, sp, #56	; 0x38
   1b550:	ldrd	r2, [r1]
   1b554:	strd	r2, [r4, #-28]	; 0xffffffe4
   1b558:	ldrd	r2, [r1, #8]
   1b55c:	strd	r2, [r4, #-20]	; 0xffffffec
   1b560:	ldrd	r2, [r1, #16]
   1b564:	strd	r2, [r4, #-12]
   1b568:	ldrd	r2, [r1, #24]
   1b56c:	strd	r2, [r4, #-4]
   1b570:	add	r1, r5, r5, lsl #1
   1b574:	add	r0, sl, sl, lsl #1
   1b578:	add	r3, sp, #8256	; 0x2040
   1b57c:	add	r3, r3, #56	; 0x38
   1b580:	add	r1, r3, r1, lsl #2
   1b584:	add	r0, r3, r0, lsl #2
   1b588:	bl	16658 <__assert_fail@plt+0x53b0>
   1b58c:	cmp	r0, #0
   1b590:	bne	1b6f4 <__assert_fail@plt+0xa44c>
   1b594:	add	sl, sl, #1
   1b598:	ldr	r3, [r9, #12]
   1b59c:	add	r0, r5, r5, lsl #1
   1b5a0:	ldr	r2, [sp, #12]
   1b5a4:	ldr	r1, [r3, r2]
   1b5a8:	add	r3, sp, #8256	; 0x2040
   1b5ac:	add	r3, r3, #56	; 0x38
   1b5b0:	add	r0, r3, r0, lsl #2
   1b5b4:	bl	186f4 <__assert_fail@plt+0x744c>
   1b5b8:	cmp	r0, #0
   1b5bc:	beq	1b6f4 <__assert_fail@plt+0xa44c>
   1b5c0:	cmp	r6, #0
   1b5c4:	bne	1b48c <__assert_fail@plt+0xa1e4>
   1b5c8:	cmp	sl, r5
   1b5cc:	beq	1b67c <__assert_fail@plt+0xa3d4>
   1b5d0:	ldr	r3, [sp, #4]
   1b5d4:	add	r3, r3, #1
   1b5d8:	mov	r2, r3
   1b5dc:	str	r3, [sp, #4]
   1b5e0:	ldr	r3, [r9, #8]
   1b5e4:	cmp	r2, r3
   1b5e8:	bge	1b728 <__assert_fail@plt+0xa480>
   1b5ec:	ldr	r2, [sp, #4]
   1b5f0:	lsl	r3, r2, #2
   1b5f4:	str	r3, [sp, #12]
   1b5f8:	ldr	r3, [r9, #12]
   1b5fc:	ldr	r1, [r3, r2, lsl #2]
   1b600:	ldr	r3, [sp, #8]
   1b604:	ldr	r3, [r3]
   1b608:	add	r8, r3, r1, lsl #3
   1b60c:	ldrb	r7, [r8, #4]
   1b610:	ldr	r2, [r8, #4]
   1b614:	ubfx	r2, r2, #8, #10
   1b618:	cmp	r7, #1
   1b61c:	beq	1b178 <__assert_fail@plt+0x9ed0>
   1b620:	cmp	r7, #3
   1b624:	beq	1b298 <__assert_fail@plt+0x9ff0>
   1b628:	cmp	r7, #5
   1b62c:	beq	1b2c4 <__assert_fail@plt+0xa01c>
   1b630:	cmp	r7, #7
   1b634:	bne	1b5d0 <__assert_fail@plt+0xa328>
   1b638:	mvn	r0, #0
   1b63c:	mvn	r1, #0
   1b640:	strd	r0, [sp, #24]
   1b644:	strd	r0, [sp, #32]
   1b648:	ldr	r3, [sp, #8]
   1b64c:	ldr	r3, [r3, #128]	; 0x80
   1b650:	tst	r3, #64	; 0x40
   1b654:	bne	1b664 <__assert_fail@plt+0xa3bc>
   1b658:	ldr	r1, [sp, #24]
   1b65c:	bic	r1, r1, #1024	; 0x400
   1b660:	str	r1, [sp, #24]
   1b664:	tst	r3, #128	; 0x80
   1b668:	beq	1b19c <__assert_fail@plt+0x9ef4>
   1b66c:	ldr	r3, [sp, #24]
   1b670:	bic	r3, r3, #1
   1b674:	str	r3, [sp, #24]
   1b678:	b	1b19c <__assert_fail@plt+0x9ef4>
   1b67c:	add	r3, sp, #14464	; 0x3880
   1b680:	add	r3, r3, #40	; 0x28
   1b684:	add	r1, r3, sl, lsl #5
   1b688:	sub	r1, r1, #14336	; 0x3800
   1b68c:	ldrd	r2, [sp, #24]
   1b690:	strd	r2, [r1, #-48]	; 0xffffffd0
   1b694:	ldrd	r2, [sp, #32]
   1b698:	strd	r2, [r1, #-40]	; 0xffffffd8
   1b69c:	ldrd	r2, [sp, #40]	; 0x28
   1b6a0:	strd	r2, [r1, #-32]	; 0xffffffe0
   1b6a4:	ldrd	r2, [sp, #48]	; 0x30
   1b6a8:	strd	r2, [r1, #-24]	; 0xffffffe8
   1b6ac:	ldr	r3, [r9, #12]
   1b6b0:	add	r0, sl, sl, lsl #1
   1b6b4:	ldr	r2, [sp, #12]
   1b6b8:	ldr	r1, [r3, r2]
   1b6bc:	add	r3, sp, #8256	; 0x2040
   1b6c0:	add	r3, r3, #56	; 0x38
   1b6c4:	add	r0, r3, r0, lsl #2
   1b6c8:	bl	16134 <__assert_fail@plt+0x4e8c>
   1b6cc:	cmp	r0, #0
   1b6d0:	bne	1b6f4 <__assert_fail@plt+0xa44c>
   1b6d4:	add	sl, sl, #1
   1b6d8:	mov	r2, #0
   1b6dc:	mov	r3, #0
   1b6e0:	strd	r2, [sp, #24]
   1b6e4:	strd	r2, [sp, #32]
   1b6e8:	strd	r2, [sp, #40]	; 0x28
   1b6ec:	strd	r2, [sp, #48]	; 0x30
   1b6f0:	b	1b5d0 <__assert_fail@plt+0xa328>
   1b6f4:	cmp	sl, #0
   1b6f8:	ble	1b720 <__assert_fail@plt+0xa478>
   1b6fc:	add	r4, sp, #8256	; 0x2040
   1b700:	add	r4, r4, #56	; 0x38
   1b704:	add	r5, sl, sl, lsl #1
   1b708:	add	r5, r4, r5, lsl #2
   1b70c:	ldr	r0, [r4, #8]
   1b710:	bl	23f40 <__assert_fail@plt+0x12c98>
   1b714:	add	r4, r4, #12
   1b718:	cmp	r4, r5
   1b71c:	bne	1b70c <__assert_fail@plt+0xa464>
   1b720:	mov	r0, #0
   1b724:	b	1b85c <__assert_fail@plt+0xa5b4>
   1b728:	ldr	r7, [sp, #8]
   1b72c:	cmp	sl, #0
   1b730:	ble	1b7ac <__assert_fail@plt+0xa504>
   1b734:	add	r1, sl, #1
   1b738:	add	r0, sp, #11392	; 0x2c80
   1b73c:	add	r0, r0, #24
   1b740:	bl	1618c <__assert_fail@plt+0x4ee4>
   1b744:	str	r0, [sp, #4]
   1b748:	add	r2, sp, #14464	; 0x3880
   1b74c:	add	r2, r2, #36	; 0x24
   1b750:	str	r0, [r2]
   1b754:	cmp	r0, #0
   1b758:	bne	1b824 <__assert_fail@plt+0xa57c>
   1b75c:	add	r3, sp, #11328	; 0x2c40
   1b760:	add	r3, r3, #56	; 0x38
   1b764:	mov	r0, #0
   1b768:	mov	r1, #0
   1b76c:	strd	r0, [r3]
   1b770:	strd	r0, [r3, #8]
   1b774:	strd	r0, [r3, #16]
   1b778:	strd	r0, [r3, #24]
   1b77c:	add	r8, sp, #8256	; 0x2040
   1b780:	add	r8, r8, #56	; 0x38
   1b784:	str	r8, [sp, #20]
   1b788:	add	r3, sp, #120	; 0x78
   1b78c:	str	r3, [sp, #12]
   1b790:	add	r6, sp, #148	; 0x94
   1b794:	add	fp, sp, #13440	; 0x3480
   1b798:	add	fp, fp, #36	; 0x24
   1b79c:	ldr	r9, [sp, #4]
   1b7a0:	mov	r3, #0
   1b7a4:	str	r3, [sp, #8]
   1b7a8:	b	1b908 <__assert_fail@plt+0xa660>
   1b7ac:	bne	1bc1c <__assert_fail@plt+0xa974>
   1b7b0:	mov	r1, #256	; 0x100
   1b7b4:	mov	r0, #4
   1b7b8:	bl	23cd4 <__assert_fail@plt+0x12a2c>
   1b7bc:	ldr	r3, [sp, #16]
   1b7c0:	str	r0, [r3, #44]	; 0x2c
   1b7c4:	adds	r0, r0, #0
   1b7c8:	movne	r0, #1
   1b7cc:	b	1b85c <__assert_fail@plt+0xa5b4>
   1b7d0:	add	r4, r4, #1
   1b7d4:	ldr	r3, [r5, #4]
   1b7d8:	cmp	r3, r4
   1b7dc:	ble	1b87c <__assert_fail@plt+0xa5d4>
   1b7e0:	ldr	r3, [r5, #8]
   1b7e4:	ldr	r2, [r3, r4, lsl #2]
   1b7e8:	ldr	r3, [r7, #12]
   1b7ec:	ldr	r1, [r3, r2, lsl #2]
   1b7f0:	cmn	r1, #1
   1b7f4:	beq	1b7d0 <__assert_fail@plt+0xa528>
   1b7f8:	add	r1, r1, r1, lsl #1
   1b7fc:	ldr	r3, [r7, #24]
   1b800:	add	r1, r3, r1, lsl #2
   1b804:	add	r0, sp, #11392	; 0x2c80
   1b808:	add	r0, r0, #24
   1b80c:	bl	18c8c <__assert_fail@plt+0x79e4>
   1b810:	add	r3, sp, #14464	; 0x3880
   1b814:	add	r3, r3, #36	; 0x24
   1b818:	str	r0, [r3]
   1b81c:	cmp	r0, #0
   1b820:	beq	1b7d0 <__assert_fail@plt+0xa528>
   1b824:	add	r3, sp, #11392	; 0x2c80
   1b828:	add	r3, r3, #32
   1b82c:	ldr	r0, [r3]
   1b830:	bl	23f40 <__assert_fail@plt+0x12c98>
   1b834:	add	r4, sp, #8256	; 0x2040
   1b838:	add	r4, r4, #56	; 0x38
   1b83c:	add	r5, sl, sl, lsl #1
   1b840:	add	r5, r4, r5, lsl #2
   1b844:	ldr	r0, [r4, #8]
   1b848:	bl	23f40 <__assert_fail@plt+0x12c98>
   1b84c:	add	r4, r4, #12
   1b850:	cmp	r5, r4
   1b854:	bne	1b844 <__assert_fail@plt+0xa59c>
   1b858:	mov	r0, #0
   1b85c:	add	sp, sp, #14464	; 0x3880
   1b860:	add	sp, sp, #44	; 0x2c
   1b864:	ldrd	r4, [sp]
   1b868:	ldrd	r6, [sp, #8]
   1b86c:	ldrd	r8, [sp, #16]
   1b870:	ldrd	sl, [sp, #24]
   1b874:	add	sp, sp, #32
   1b878:	pop	{pc}		; (ldr pc, [sp], #4)
   1b87c:	mov	r3, #0
   1b880:	add	r2, sp, #11392	; 0x2c80
   1b884:	add	r2, r2, #24
   1b888:	mov	r1, r7
   1b88c:	add	r0, sp, #14464	; 0x3880
   1b890:	add	r0, r0, #36	; 0x24
   1b894:	bl	17eb4 <__assert_fail@plt+0x6c0c>
   1b898:	mov	r4, r0
   1b89c:	str	r0, [fp], #4
   1b8a0:	cmp	r0, #0
   1b8a4:	beq	1b930 <__assert_fail@plt+0xa688>
   1b8a8:	ldrsb	r3, [r4, #52]	; 0x34
   1b8ac:	cmp	r3, #0
   1b8b0:	blt	1b948 <__assert_fail@plt+0xa6a0>
   1b8b4:	add	r3, sp, #12416	; 0x3080
   1b8b8:	add	r3, r3, #36	; 0x24
   1b8bc:	str	r4, [r3, r9, lsl #2]
   1b8c0:	add	r3, sp, #11392	; 0x2c80
   1b8c4:	add	r3, r3, #36	; 0x24
   1b8c8:	str	r4, [r3, r9, lsl #2]
   1b8cc:	add	r4, sp, #11328	; 0x2c40
   1b8d0:	add	r4, r4, #52	; 0x34
   1b8d4:	sub	r1, r6, #32
   1b8d8:	mov	r2, r4
   1b8dc:	ldr	r3, [r2, #4]!
   1b8e0:	ldr	r0, [r1, #4]!
   1b8e4:	orr	r3, r3, r0
   1b8e8:	str	r3, [r2]
   1b8ec:	cmp	r6, r1
   1b8f0:	bne	1b8dc <__assert_fail@plt+0xa634>
   1b8f4:	add	r9, r9, #1
   1b8f8:	add	r8, r8, #12
   1b8fc:	add	r6, r6, #32
   1b900:	cmp	r9, sl
   1b904:	beq	1b9f8 <__assert_fail@plt+0xa750>
   1b908:	add	r3, sp, #11392	; 0x2c80
   1b90c:	add	r3, r3, #28
   1b910:	mov	r2, #0
   1b914:	str	r2, [r3]
   1b918:	mov	r5, r8
   1b91c:	ldr	r3, [r8, #4]
   1b920:	cmp	r3, r2
   1b924:	ble	1b87c <__assert_fail@plt+0xa5d4>
   1b928:	ldr	r4, [sp, #4]
   1b92c:	b	1b7e0 <__assert_fail@plt+0xa538>
   1b930:	add	r3, sp, #14464	; 0x3880
   1b934:	add	r3, r3, #36	; 0x24
   1b938:	ldr	r3, [r3]
   1b93c:	cmp	r3, #0
   1b940:	beq	1b8a8 <__assert_fail@plt+0xa600>
   1b944:	b	1b824 <__assert_fail@plt+0xa57c>
   1b948:	mov	r3, #1
   1b94c:	add	r2, sp, #11392	; 0x2c80
   1b950:	add	r2, r2, #24
   1b954:	mov	r1, r7
   1b958:	add	r0, sp, #14464	; 0x3880
   1b95c:	add	r0, r0, #36	; 0x24
   1b960:	bl	17eb4 <__assert_fail@plt+0x6c0c>
   1b964:	mov	r5, r9
   1b968:	add	r3, sp, #12416	; 0x3080
   1b96c:	add	r3, r3, #36	; 0x24
   1b970:	str	r0, [r3, r9, lsl #2]
   1b974:	cmp	r0, #0
   1b978:	beq	1b9e0 <__assert_fail@plt+0xa738>
   1b97c:	cmp	r4, r0
   1b980:	beq	1b998 <__assert_fail@plt+0xa6f0>
   1b984:	ldr	r3, [r7, #92]	; 0x5c
   1b988:	cmp	r3, #2
   1b98c:	ldr	r3, [sp, #8]
   1b990:	movge	r3, #1
   1b994:	str	r3, [sp, #8]
   1b998:	mov	r3, #2
   1b99c:	add	r2, sp, #11392	; 0x2c80
   1b9a0:	add	r2, r2, #24
   1b9a4:	mov	r1, r7
   1b9a8:	add	r0, sp, #14464	; 0x3880
   1b9ac:	add	r0, r0, #36	; 0x24
   1b9b0:	bl	17eb4 <__assert_fail@plt+0x6c0c>
   1b9b4:	add	r3, sp, #11392	; 0x2c80
   1b9b8:	add	r3, r3, #36	; 0x24
   1b9bc:	str	r0, [r3, r5, lsl #2]
   1b9c0:	cmp	r0, #0
   1b9c4:	bne	1b8cc <__assert_fail@plt+0xa624>
   1b9c8:	add	r3, sp, #14464	; 0x3880
   1b9cc:	add	r3, r3, #36	; 0x24
   1b9d0:	ldr	r3, [r3]
   1b9d4:	cmp	r3, #0
   1b9d8:	beq	1b8cc <__assert_fail@plt+0xa624>
   1b9dc:	b	1b824 <__assert_fail@plt+0xa57c>
   1b9e0:	add	r3, sp, #14464	; 0x3880
   1b9e4:	add	r3, r3, #36	; 0x24
   1b9e8:	ldr	r3, [r3]
   1b9ec:	cmp	r3, #0
   1b9f0:	beq	1b984 <__assert_fail@plt+0xa6dc>
   1b9f4:	b	1b824 <__assert_fail@plt+0xa57c>
   1b9f8:	ldr	r3, [sp, #8]
   1b9fc:	cmp	r3, #0
   1ba00:	bne	1bb64 <__assert_fail@plt+0xa8bc>
   1ba04:	mov	r1, #256	; 0x100
   1ba08:	mov	r0, #4
   1ba0c:	bl	23cd4 <__assert_fail@plt+0x12a2c>
   1ba10:	mov	r9, r0
   1ba14:	ldr	r3, [sp, #16]
   1ba18:	str	r0, [r3, #44]	; 0x2c
   1ba1c:	cmp	r0, #0
   1ba20:	beq	1b824 <__assert_fail@plt+0xa57c>
   1ba24:	mov	r5, r0
   1ba28:	add	r7, r7, #96	; 0x60
   1ba2c:	add	r8, r0, #1024	; 0x400
   1ba30:	ldr	r6, [sp, #12]
   1ba34:	ldr	r3, [r4, #4]!
   1ba38:	cmp	r3, #0
   1ba3c:	beq	1ba64 <__assert_fail@plt+0xa7bc>
   1ba40:	mov	r0, r5
   1ba44:	mov	r2, #1
   1ba48:	mov	ip, r6
   1ba4c:	tst	r3, #1
   1ba50:	bne	1bb18 <__assert_fail@plt+0xa870>
   1ba54:	lsl	r2, r2, #1
   1ba58:	add	r0, r0, #4
   1ba5c:	lsrs	r3, r3, #1
   1ba60:	bne	1ba4c <__assert_fail@plt+0xa7a4>
   1ba64:	add	r5, r5, #128	; 0x80
   1ba68:	add	r7, r7, #4
   1ba6c:	add	r6, r6, #4
   1ba70:	cmp	r8, r5
   1ba74:	bne	1ba34 <__assert_fail@plt+0xa78c>
   1ba78:	add	r3, sp, #11328	; 0x2c40
   1ba7c:	add	r3, r3, #56	; 0x38
   1ba80:	ldr	r3, [r3]
   1ba84:	tst	r3, #1024	; 0x400
   1ba88:	beq	1bae0 <__assert_fail@plt+0xa838>
   1ba8c:	ldr	r3, [sp, #120]	; 0x78
   1ba90:	tst	r3, #1024	; 0x400
   1ba94:	bne	1babc <__assert_fail@plt+0xa814>
   1ba98:	ldr	r2, [sp, #12]
   1ba9c:	ldr	r3, [sp, #4]
   1baa0:	add	r3, r3, #1
   1baa4:	cmp	r3, sl
   1baa8:	beq	1bae0 <__assert_fail@plt+0xa838>
   1baac:	ldr	r1, [r2, #32]!
   1bab0:	tst	r1, #1024	; 0x400
   1bab4:	beq	1baa0 <__assert_fail@plt+0xa7f8>
   1bab8:	str	r3, [sp, #4]
   1babc:	add	r3, sp, #14464	; 0x3880
   1bac0:	add	r3, r3, #40	; 0x28
   1bac4:	ldr	r2, [sp, #4]
   1bac8:	add	r3, r3, r2, lsl #2
   1bacc:	ldr	r3, [r3, #-3076]	; 0xfffff3fc
   1bad0:	str	r3, [r9, #40]	; 0x28
   1bad4:	ldr	r2, [sp, #8]
   1bad8:	cmp	r2, #0
   1badc:	strne	r3, [r9, #1064]	; 0x428
   1bae0:	add	r3, sp, #11392	; 0x2c80
   1bae4:	add	r3, r3, #32
   1bae8:	ldr	r0, [r3]
   1baec:	bl	23f40 <__assert_fail@plt+0x12c98>
   1baf0:	add	r4, sl, sl, lsl #1
   1baf4:	ldr	r5, [sp, #20]
   1baf8:	add	r4, r5, r4, lsl #2
   1bafc:	ldr	r0, [r5, #8]
   1bb00:	bl	23f40 <__assert_fail@plt+0x12c98>
   1bb04:	add	r5, r5, #12
   1bb08:	cmp	r4, r5
   1bb0c:	bne	1bafc <__assert_fail@plt+0xa854>
   1bb10:	mov	r0, #1
   1bb14:	b	1b85c <__assert_fail@plt+0xa5b4>
   1bb18:	ldr	r1, [r6]
   1bb1c:	tst	r2, r1
   1bb20:	bne	1bb5c <__assert_fail@plt+0xa8b4>
   1bb24:	ldr	r1, [sp, #4]
   1bb28:	add	r1, r1, #1
   1bb2c:	ldr	lr, [ip, r1, lsl #5]
   1bb30:	tst	r2, lr
   1bb34:	beq	1bb28 <__assert_fail@plt+0xa880>
   1bb38:	ldr	lr, [r7]
   1bb3c:	tst	r2, lr
   1bb40:	add	lr, sp, #14464	; 0x3880
   1bb44:	add	lr, lr, #40	; 0x28
   1bb48:	add	r1, lr, r1, lsl #2
   1bb4c:	ldrne	r1, [r1, #-2052]	; 0xfffff7fc
   1bb50:	ldreq	r1, [r1, #-1028]	; 0xfffffbfc
   1bb54:	str	r1, [r0]
   1bb58:	b	1ba54 <__assert_fail@plt+0xa7ac>
   1bb5c:	ldr	r1, [sp, #4]
   1bb60:	b	1bb38 <__assert_fail@plt+0xa890>
   1bb64:	mov	r1, #512	; 0x200
   1bb68:	mov	r0, #4
   1bb6c:	bl	23cd4 <__assert_fail@plt+0x12a2c>
   1bb70:	mov	r9, r0
   1bb74:	ldr	r3, [sp, #16]
   1bb78:	str	r0, [r3, #48]	; 0x30
   1bb7c:	cmp	r0, #0
   1bb80:	beq	1b824 <__assert_fail@plt+0xa57c>
   1bb84:	mov	r6, r0
   1bb88:	add	r7, r0, #1024	; 0x400
   1bb8c:	ldr	r5, [sp, #12]
   1bb90:	ldr	r3, [r4, #4]!
   1bb94:	cmp	r3, #0
   1bb98:	beq	1bbc0 <__assert_fail@plt+0xa918>
   1bb9c:	mov	r0, r6
   1bba0:	mov	r2, #1
   1bba4:	mov	lr, r5
   1bba8:	tst	r3, #1
   1bbac:	bne	1bbd4 <__assert_fail@plt+0xa92c>
   1bbb0:	lsl	r2, r2, #1
   1bbb4:	add	r0, r0, #4
   1bbb8:	lsrs	r3, r3, #1
   1bbbc:	bne	1bba8 <__assert_fail@plt+0xa900>
   1bbc0:	add	r6, r6, #128	; 0x80
   1bbc4:	add	r5, r5, #4
   1bbc8:	cmp	r7, r6
   1bbcc:	bne	1bb90 <__assert_fail@plt+0xa8e8>
   1bbd0:	b	1ba78 <__assert_fail@plt+0xa7d0>
   1bbd4:	ldr	r1, [r5]
   1bbd8:	tst	r2, r1
   1bbdc:	bne	1bc14 <__assert_fail@plt+0xa96c>
   1bbe0:	ldr	r1, [sp, #4]
   1bbe4:	add	r1, r1, #1
   1bbe8:	ldr	ip, [lr, r1, lsl #5]
   1bbec:	tst	r2, ip
   1bbf0:	beq	1bbe4 <__assert_fail@plt+0xa93c>
   1bbf4:	add	ip, sp, #14464	; 0x3880
   1bbf8:	add	ip, ip, #40	; 0x28
   1bbfc:	add	r1, ip, r1, lsl #2
   1bc00:	ldr	ip, [r1, #-1028]	; 0xfffffbfc
   1bc04:	str	ip, [r0]
   1bc08:	ldr	r1, [r1, #-2052]	; 0xfffff7fc
   1bc0c:	str	r1, [r0, #1024]	; 0x400
   1bc10:	b	1bbb0 <__assert_fail@plt+0xa908>
   1bc14:	ldr	r1, [sp, #4]
   1bc18:	b	1bbf4 <__assert_fail@plt+0xa94c>
   1bc1c:	mov	r0, #0
   1bc20:	b	1b85c <__assert_fail@plt+0xa5b4>
   1bc24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bc28:	strd	r6, [sp, #8]
   1bc2c:	strd	r8, [sp, #16]
   1bc30:	strd	sl, [sp, #24]
   1bc34:	str	lr, [sp, #32]
   1bc38:	sub	sp, sp, #316	; 0x13c
   1bc3c:	ldr	fp, [r0]
   1bc40:	ldr	r3, [fp, #92]	; 0x5c
   1bc44:	cmp	r3, #1
   1bc48:	ldreq	r3, [r0, #12]
   1bc4c:	ubfxeq	r3, r3, #22, #1
   1bc50:	movne	r3, #0
   1bc54:	mov	r9, r3
   1bc58:	ldr	r3, [r1, #8]
   1bc5c:	cmp	r3, #0
   1bc60:	ble	1bd64 <__assert_fail@plt+0xaabc>
   1bc64:	mov	r7, r2
   1bc68:	str	r1, [sp, #8]
   1bc6c:	str	r0, [sp, #28]
   1bc70:	mov	r3, #0
   1bc74:	str	r3, [sp, #4]
   1bc78:	str	r3, [sp, #20]
   1bc7c:	str	r3, [sp, #24]
   1bc80:	mov	r3, #255	; 0xff
   1bc84:	movt	r3, #32
   1bc88:	str	r3, [sp, #32]
   1bc8c:	mov	r3, #1
   1bc90:	movt	r3, #32
   1bc94:	str	r3, [sp, #36]	; 0x24
   1bc98:	mov	sl, fp
   1bc9c:	b	1bcfc <__assert_fail@plt+0xaa54>
   1bca0:	ldrb	r5, [r2, r4, lsl #3]
   1bca4:	strb	r3, [r7, r5]
   1bca8:	cmp	r9, #0
   1bcac:	beq	1bcc4 <__assert_fail@plt+0xaa1c>
   1bcb0:	bl	11140 <__ctype_tolower_loc@plt>
   1bcb4:	ldr	r3, [r0]
   1bcb8:	ldr	r3, [r3, r5, lsl #2]
   1bcbc:	mov	r2, #1
   1bcc0:	strb	r2, [r7, r3]
   1bcc4:	ldr	r3, [sp, #28]
   1bcc8:	ldr	r3, [r3, #12]
   1bccc:	tst	r3, #4194304	; 0x400000
   1bcd0:	beq	1bce0 <__assert_fail@plt+0xaa38>
   1bcd4:	ldr	r3, [sl, #92]	; 0x5c
   1bcd8:	cmp	r3, #1
   1bcdc:	bgt	1bd80 <__assert_fail@plt+0xaad8>
   1bce0:	ldr	r3, [sp, #4]
   1bce4:	add	r2, r3, #1
   1bce8:	str	r2, [sp, #4]
   1bcec:	ldr	r3, [sp, #8]
   1bcf0:	ldr	r3, [r3, #8]
   1bcf4:	cmp	r3, r2
   1bcf8:	ble	1bd64 <__assert_fail@plt+0xaabc>
   1bcfc:	ldr	r3, [sp, #8]
   1bd00:	ldr	r3, [r3, #12]
   1bd04:	ldr	r2, [sp, #4]
   1bd08:	ldr	r4, [r3, r2, lsl #2]
   1bd0c:	lsl	r3, r4, #3
   1bd10:	str	r3, [sp, #12]
   1bd14:	ldr	r2, [sl]
   1bd18:	add	r3, r2, r3
   1bd1c:	ldrb	r3, [r3, #4]
   1bd20:	mov	r5, r3
   1bd24:	cmp	r3, #1
   1bd28:	beq	1bca0 <__assert_fail@plt+0xa9f8>
   1bd2c:	cmp	r3, #3
   1bd30:	beq	1be64 <__assert_fail@plt+0xabbc>
   1bd34:	cmp	r3, #6
   1bd38:	beq	1bef4 <__assert_fail@plt+0xac4c>
   1bd3c:	and	r2, r3, #253	; 0xfd
   1bd40:	cmp	r3, #2
   1bd44:	cmpne	r2, #5
   1bd48:	bne	1bce0 <__assert_fail@plt+0xaa38>
   1bd4c:	mov	r2, #256	; 0x100
   1bd50:	mov	r1, #1
   1bd54:	mov	r0, r7
   1bd58:	bl	111c4 <memset@plt>
   1bd5c:	cmp	r5, #2
   1bd60:	beq	1c054 <__assert_fail@plt+0xadac>
   1bd64:	add	sp, sp, #316	; 0x13c
   1bd68:	ldrd	r4, [sp]
   1bd6c:	ldrd	r6, [sp, #8]
   1bd70:	ldrd	r8, [sp, #16]
   1bd74:	ldrd	sl, [sp, #24]
   1bd78:	add	sp, sp, #32
   1bd7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd80:	ldr	r3, [sl]
   1bd84:	ldrb	r3, [r3, r4, lsl #3]
   1bd88:	strb	r3, [sp, #56]	; 0x38
   1bd8c:	add	r2, r4, #1
   1bd90:	ldr	r3, [sl, #8]
   1bd94:	cmp	r2, r3
   1bd98:	bcs	1be54 <__assert_fail@plt+0xabac>
   1bd9c:	ldr	r3, [sp, #12]
   1bda0:	add	r3, r3, #8
   1bda4:	ldr	r1, [sl]
   1bda8:	add	r3, r1, r3
   1bdac:	ldr	r1, [r3, #4]
   1bdb0:	ldr	r0, [sp, #32]
   1bdb4:	and	r1, r1, r0
   1bdb8:	ldr	ip, [sp, #36]	; 0x24
   1bdbc:	cmp	r1, ip
   1bdc0:	bne	1be5c <__assert_fail@plt+0xabb4>
   1bdc4:	add	r4, sp, #57	; 0x39
   1bdc8:	ldrb	r3, [r3]
   1bdcc:	strb	r3, [r4], #1
   1bdd0:	add	r2, r2, #1
   1bdd4:	ldr	r3, [sl, #8]
   1bdd8:	cmp	r3, r2
   1bddc:	bls	1bdf8 <__assert_fail@plt+0xab50>
   1bde0:	ldr	r3, [sl]
   1bde4:	add	r3, r3, r2, lsl #3
   1bde8:	ldr	r1, [r3, #4]
   1bdec:	and	r1, r1, r0
   1bdf0:	cmp	r1, ip
   1bdf4:	beq	1bdc8 <__assert_fail@plt+0xab20>
   1bdf8:	mov	r3, #0
   1bdfc:	str	r3, [sp, #48]	; 0x30
   1be00:	str	r3, [sp, #52]	; 0x34
   1be04:	add	r1, sp, #56	; 0x38
   1be08:	sub	r4, r4, r1
   1be0c:	add	r3, sp, #48	; 0x30
   1be10:	mov	r2, r4
   1be14:	add	r0, sp, #44	; 0x2c
   1be18:	bl	23fe4 <__assert_fail@plt+0x12d3c>
   1be1c:	cmp	r4, r0
   1be20:	bne	1bce0 <__assert_fail@plt+0xaa38>
   1be24:	ldr	r0, [sp, #44]	; 0x2c
   1be28:	bl	11050 <towlower@plt>
   1be2c:	add	r2, sp, #48	; 0x30
   1be30:	mov	r1, r0
   1be34:	add	r0, sp, #56	; 0x38
   1be38:	bl	10fc0 <wcrtomb@plt>
   1be3c:	cmn	r0, #1
   1be40:	beq	1bce0 <__assert_fail@plt+0xaa38>
   1be44:	ldrb	r3, [sp, #56]	; 0x38
   1be48:	mov	r2, #1
   1be4c:	strb	r2, [r7, r3]
   1be50:	b	1bce0 <__assert_fail@plt+0xaa38>
   1be54:	add	r4, sp, #57	; 0x39
   1be58:	b	1bdf8 <__assert_fail@plt+0xab50>
   1be5c:	add	r4, sp, #57	; 0x39
   1be60:	b	1bdf8 <__assert_fail@plt+0xab50>
   1be64:	mov	fp, #0
   1be68:	mov	r8, #1
   1be6c:	str	sl, [sp, #16]
   1be70:	b	1becc <__assert_fail@plt+0xac24>
   1be74:	strb	r8, [r7, r3]
   1be78:	add	r4, r4, #1
   1be7c:	add	r5, r5, #1
   1be80:	cmp	r4, #32
   1be84:	beq	1bec0 <__assert_fail@plt+0xac18>
   1be88:	lsr	r3, r6, r4
   1be8c:	tst	r3, #1
   1be90:	beq	1be78 <__assert_fail@plt+0xabd0>
   1be94:	strb	r8, [r7, r5]
   1be98:	cmp	r9, #0
   1be9c:	beq	1be78 <__assert_fail@plt+0xabd0>
   1bea0:	add	r3, r5, #128	; 0x80
   1bea4:	cmp	r3, #384	; 0x180
   1bea8:	movcs	r3, r5
   1beac:	bcs	1be74 <__assert_fail@plt+0xabcc>
   1beb0:	bl	11140 <__ctype_tolower_loc@plt>
   1beb4:	ldr	r3, [r0]
   1beb8:	ldr	r3, [r3, r5, lsl #2]
   1bebc:	b	1be74 <__assert_fail@plt+0xabcc>
   1bec0:	add	fp, fp, #4
   1bec4:	cmp	fp, #32
   1bec8:	beq	1beec <__assert_fail@plt+0xac44>
   1becc:	lsl	r5, fp, #3
   1bed0:	ldr	r3, [sp, #16]
   1bed4:	ldr	r3, [r3]
   1bed8:	ldr	r2, [sp, #12]
   1bedc:	ldr	r3, [r3, r2]
   1bee0:	ldr	r6, [r3, fp]
   1bee4:	mov	r4, #0
   1bee8:	b	1be88 <__assert_fail@plt+0xabe0>
   1beec:	ldr	sl, [sp, #16]
   1bef0:	b	1bce0 <__assert_fail@plt+0xaa38>
   1bef4:	ldr	r5, [r2, r4, lsl #3]
   1bef8:	ldr	r3, [sl, #92]	; 0x5c
   1befc:	cmp	r3, #1
   1bf00:	ble	1bf3c <__assert_fail@plt+0xac94>
   1bf04:	ldr	r3, [r5, #36]	; 0x24
   1bf08:	cmp	r3, #0
   1bf0c:	bne	1bf28 <__assert_fail@plt+0xac80>
   1bf10:	ldrb	r3, [r5, #16]
   1bf14:	tst	r3, #1
   1bf18:	bne	1bf28 <__assert_fail@plt+0xac80>
   1bf1c:	ldr	r3, [r5, #32]
   1bf20:	cmp	r3, #0
   1bf24:	beq	1bf3c <__assert_fail@plt+0xac94>
   1bf28:	mov	r3, #0
   1bf2c:	strb	r3, [sp, #48]	; 0x30
   1bf30:	ldr	r4, [sp, #20]
   1bf34:	ldr	r5, [sp, #24]
   1bf38:	b	1bf6c <__assert_fail@plt+0xacc4>
   1bf3c:	ldr	r3, [r5, #20]
   1bf40:	cmp	r3, #0
   1bf44:	ble	1bce0 <__assert_fail@plt+0xaa38>
   1bf48:	mov	r4, #0
   1bf4c:	ldr	fp, [sp, #28]
   1bf50:	b	1bfb0 <__assert_fail@plt+0xad08>
   1bf54:	ldrb	r3, [sp, #48]	; 0x30
   1bf58:	add	r3, r3, #1
   1bf5c:	uxtb	r3, r3
   1bf60:	strb	r3, [sp, #48]	; 0x30
   1bf64:	cmp	r3, #0
   1bf68:	beq	1bce0 <__assert_fail@plt+0xaa38>
   1bf6c:	str	r4, [sp, #56]	; 0x38
   1bf70:	str	r5, [sp, #60]	; 0x3c
   1bf74:	add	r3, sp, #56	; 0x38
   1bf78:	mov	r2, #1
   1bf7c:	add	r1, sp, #48	; 0x30
   1bf80:	mov	r0, #0
   1bf84:	bl	23fe4 <__assert_fail@plt+0x12d3c>
   1bf88:	cmn	r0, #2
   1bf8c:	bne	1bf54 <__assert_fail@plt+0xacac>
   1bf90:	ldrb	r3, [sp, #48]	; 0x30
   1bf94:	mov	r2, #1
   1bf98:	strb	r2, [r7, r3]
   1bf9c:	b	1bf54 <__assert_fail@plt+0xacac>
   1bfa0:	add	r4, r4, #1
   1bfa4:	ldr	r3, [r5, #20]
   1bfa8:	cmp	r3, r4
   1bfac:	ble	1bce0 <__assert_fail@plt+0xaa38>
   1bfb0:	ldr	r3, [sp, #20]
   1bfb4:	str	r3, [sp, #48]	; 0x30
   1bfb8:	ldr	r3, [sp, #24]
   1bfbc:	str	r3, [sp, #52]	; 0x34
   1bfc0:	lsl	r8, r4, #2
   1bfc4:	ldr	r3, [r5]
   1bfc8:	add	r2, sp, #48	; 0x30
   1bfcc:	ldr	r1, [r3, r4, lsl #2]
   1bfd0:	add	r0, sp, #56	; 0x38
   1bfd4:	bl	10fc0 <wcrtomb@plt>
   1bfd8:	cmn	r0, #1
   1bfdc:	beq	1c008 <__assert_fail@plt+0xad60>
   1bfe0:	ldrb	r6, [sp, #56]	; 0x38
   1bfe4:	mov	r3, #1
   1bfe8:	strb	r3, [r7, r6]
   1bfec:	cmp	r9, #0
   1bff0:	beq	1c008 <__assert_fail@plt+0xad60>
   1bff4:	bl	11140 <__ctype_tolower_loc@plt>
   1bff8:	ldr	r3, [r0]
   1bffc:	ldr	r3, [r3, r6, lsl #2]
   1c000:	mov	r2, #1
   1c004:	strb	r2, [r7, r3]
   1c008:	ldr	r3, [fp, #12]
   1c00c:	tst	r3, #4194304	; 0x400000
   1c010:	beq	1bfa0 <__assert_fail@plt+0xacf8>
   1c014:	ldr	r3, [sl, #92]	; 0x5c
   1c018:	cmp	r3, #1
   1c01c:	ble	1bfa0 <__assert_fail@plt+0xacf8>
   1c020:	ldr	r3, [r5]
   1c024:	ldr	r0, [r3, r8]
   1c028:	bl	11050 <towlower@plt>
   1c02c:	add	r2, sp, #48	; 0x30
   1c030:	mov	r1, r0
   1c034:	add	r0, sp, #56	; 0x38
   1c038:	bl	10fc0 <wcrtomb@plt>
   1c03c:	cmn	r0, #1
   1c040:	beq	1bfa0 <__assert_fail@plt+0xacf8>
   1c044:	ldrb	r3, [sp, #56]	; 0x38
   1c048:	mov	r2, #1
   1c04c:	strb	r2, [r7, r3]
   1c050:	b	1bfa0 <__assert_fail@plt+0xacf8>
   1c054:	ldr	r2, [sp, #28]
   1c058:	ldrb	r3, [r2, #28]
   1c05c:	orr	r3, r3, #1
   1c060:	strb	r3, [r2, #28]
   1c064:	b	1bd64 <__assert_fail@plt+0xaabc>
   1c068:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c06c:	strd	r6, [sp, #8]
   1c070:	strd	r8, [sp, #16]
   1c074:	strd	sl, [sp, #24]
   1c078:	str	lr, [sp, #32]
   1c07c:	sub	sp, sp, #164	; 0xa4
   1c080:	mov	r9, r0
   1c084:	mov	r4, r1
   1c088:	mov	r8, r2
   1c08c:	str	r3, [sp, #24]
   1c090:	ldr	fp, [sp, #204]	; 0xcc
   1c094:	ldr	r3, [r1]
   1c098:	str	r3, [sp, #20]
   1c09c:	ldrb	r2, [r2, #4]
   1c0a0:	sub	r3, r2, #1
   1c0a4:	cmp	r3, #35	; 0x23
   1c0a8:	ldrls	pc, [pc, r3, lsl #2]
   1c0ac:	b	1cf68 <__assert_fail@plt+0xbcc0>
   1c0b0:	andeq	ip, r1, r0, asr #2
   1c0b4:	andeq	sp, r1, ip, asr #7
   1c0b8:	andeq	ip, r1, r8, ror #30
   1c0bc:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c0c0:	andeq	ip, r1, r4, ror lr
   1c0c4:	andeq	ip, r1, r8, ror #30
   1c0c8:	andeq	ip, r1, r8, ror #30
   1c0cc:	andeq	ip, r1, r8, lsl #4
   1c0d0:			; <UNDEFINED> instruction: 0x0001cbb0
   1c0d4:	andeq	sp, r1, ip, asr #7
   1c0d8:	andeq	ip, r1, ip, lsl #23
   1c0dc:	andeq	ip, r1, r8, ror #24
   1c0e0:	andeq	ip, r1, r8, ror #30
   1c0e4:	andeq	ip, r1, r8, ror #30
   1c0e8:	andeq	ip, r1, r8, ror #30
   1c0ec:	andeq	ip, r1, r8, ror #30
   1c0f0:	andeq	ip, r1, r8, ror #30
   1c0f4:	andeq	ip, r1, ip, lsl #23
   1c0f8:	andeq	ip, r1, ip, lsl #23
   1c0fc:	andeq	ip, r1, r8, ror #5
   1c100:	andeq	ip, r1, r8, ror #30
   1c104:	andeq	ip, r1, r8, ror #30
   1c108:	andeq	ip, r1, r4, ror fp
   1c10c:			; <UNDEFINED> instruction: 0x0001cbb8
   1c110:	andeq	ip, r1, r8, ror #30
   1c114:	andeq	ip, r1, r8, ror #30
   1c118:	andeq	ip, r1, r8, ror #30
   1c11c:	andeq	ip, r1, r8, ror #30
   1c120:	andeq	ip, r1, r8, ror #30
   1c124:	andeq	ip, r1, r8, ror #30
   1c128:	andeq	ip, r1, r8, ror #30
   1c12c:			; <UNDEFINED> instruction: 0x0001ceb8
   1c130:			; <UNDEFINED> instruction: 0x0001ceb8
   1c134:	andeq	ip, r1, r0, lsl pc
   1c138:	andeq	ip, r1, r0, lsl pc
   1c13c:	andeq	ip, r1, r8, ror #30
   1c140:	mov	r3, r8
   1c144:	mov	r2, #0
   1c148:	mov	r1, r2
   1c14c:	ldr	r0, [sp, #20]
   1c150:	bl	15d60 <__assert_fail@plt+0x4ab8>
   1c154:	subs	sl, r0, #0
   1c158:	moveq	r3, #12
   1c15c:	streq	r3, [fp]
   1c160:	beq	1d1f0 <__assert_fail@plt+0xbf48>
   1c164:	ldr	r3, [sp, #20]
   1c168:	ldr	r3, [r3, #92]	; 0x5c
   1c16c:	cmp	r3, #1
   1c170:	movgt	r6, #0
   1c174:	movgt	r5, #16
   1c178:	ble	1cbe4 <__assert_fail@plt+0xb93c>
   1c17c:	ldr	r3, [r9, #40]	; 0x28
   1c180:	ldr	r2, [r9, #56]	; 0x38
   1c184:	cmp	r2, r3
   1c188:	ble	1cbe4 <__assert_fail@plt+0xb93c>
   1c18c:	ldr	r2, [r9, #28]
   1c190:	cmp	r3, r2
   1c194:	beq	1cbe4 <__assert_fail@plt+0xb93c>
   1c198:	ldr	r2, [r9, #8]
   1c19c:	ldr	r3, [r2, r3, lsl #2]
   1c1a0:	cmn	r3, #1
   1c1a4:	bne	1cbe4 <__assert_fail@plt+0xb93c>
   1c1a8:	ldr	r2, [sp, #24]
   1c1ac:	mov	r1, r9
   1c1b0:	mov	r0, r8
   1c1b4:	bl	17964 <__assert_fail@plt+0x66bc>
   1c1b8:	mov	r3, r8
   1c1bc:	mov	r2, r6
   1c1c0:	mov	r1, r6
   1c1c4:	ldr	r7, [sp, #20]
   1c1c8:	mov	r0, r7
   1c1cc:	bl	15d60 <__assert_fail@plt+0x4ab8>
   1c1d0:	mov	r4, r0
   1c1d4:	mov	r3, r5
   1c1d8:	mov	r2, r0
   1c1dc:	mov	r1, sl
   1c1e0:	mov	r0, r7
   1c1e4:	bl	15efc <__assert_fail@plt+0x4c54>
   1c1e8:	mov	sl, r0
   1c1ec:	cmp	r0, #0
   1c1f0:	cmpne	r4, #0
   1c1f4:	bne	1c17c <__assert_fail@plt+0xaed4>
   1c1f8:	mov	r3, #12
   1c1fc:	str	r3, [fp]
   1c200:	mov	sl, #0
   1c204:	b	1d1f0 <__assert_fail@plt+0xbf48>
   1c208:	ldr	r5, [r1, #24]
   1c20c:	add	r3, r5, #1
   1c210:	str	r3, [r1, #24]
   1c214:	ldr	r6, [sp, #24]
   1c218:	orr	r2, r6, #8388608	; 0x800000
   1c21c:	mov	r1, r0
   1c220:	mov	r0, r8
   1c224:	bl	17964 <__assert_fail@plt+0x66bc>
   1c228:	ldrb	r3, [r8, #4]
   1c22c:	cmp	r3, #9
   1c230:	moveq	r0, #0
   1c234:	bne	1c280 <__assert_fail@plt+0xafd8>
   1c238:	cmp	r5, #8
   1c23c:	bhi	1c254 <__assert_fail@plt+0xafac>
   1c240:	ldr	r1, [sp, #20]
   1c244:	ldr	r3, [r1, #84]	; 0x54
   1c248:	mov	r2, #1
   1c24c:	orr	r3, r3, r2, lsl r5
   1c250:	str	r3, [r1, #84]	; 0x54
   1c254:	mov	r3, #17
   1c258:	mov	r2, #0
   1c25c:	mov	r1, r0
   1c260:	ldr	r0, [sp, #20]
   1c264:	bl	15efc <__assert_fail@plt+0x4c54>
   1c268:	subs	sl, r0, #0
   1c26c:	moveq	r3, #12
   1c270:	streq	r3, [fp]
   1c274:	beq	1c2b0 <__assert_fail@plt+0xb008>
   1c278:	str	r5, [sl, #20]
   1c27c:	b	1cbe4 <__assert_fail@plt+0xb93c>
   1c280:	str	fp, [sp, #4]
   1c284:	ldr	r3, [sp, #200]	; 0xc8
   1c288:	add	r3, r3, #1
   1c28c:	str	r3, [sp]
   1c290:	mov	r3, r6
   1c294:	mov	r2, r8
   1c298:	mov	r1, r4
   1c29c:	mov	r0, r9
   1c2a0:	bl	1d650 <__assert_fail@plt+0xc3a8>
   1c2a4:	ldr	r3, [fp]
   1c2a8:	cmp	r3, #0
   1c2ac:	beq	1c2b8 <__assert_fail@plt+0xb010>
   1c2b0:	mov	sl, #0
   1c2b4:	b	1d1f0 <__assert_fail@plt+0xbf48>
   1c2b8:	ldrb	r3, [r8, #4]
   1c2bc:	cmp	r3, #9
   1c2c0:	beq	1c238 <__assert_fail@plt+0xaf90>
   1c2c4:	cmp	r0, #0
   1c2c8:	beq	1c2dc <__assert_fail@plt+0xb034>
   1c2cc:	mov	r2, #0
   1c2d0:	movw	r1, #31464	; 0x7ae8
   1c2d4:	movt	r1, #1
   1c2d8:	bl	15154 <__assert_fail@plt+0x3eac>
   1c2dc:	mov	r3, #8
   1c2e0:	str	r3, [fp]
   1c2e4:	b	1c2b0 <__assert_fail@plt+0xb008>
   1c2e8:	mov	r3, #0
   1c2ec:	str	r3, [sp, #68]	; 0x44
   1c2f0:	mov	r1, #1
   1c2f4:	mov	r0, #32
   1c2f8:	bl	23cd4 <__assert_fail@plt+0x12a2c>
   1c2fc:	mov	r4, r0
   1c300:	str	r0, [sp, #32]
   1c304:	mov	r1, #1
   1c308:	mov	r0, #40	; 0x28
   1c30c:	bl	23cd4 <__assert_fail@plt+0x12a2c>
   1c310:	str	r0, [sp, #36]	; 0x24
   1c314:	clz	r0, r0
   1c318:	lsr	r0, r0, #5
   1c31c:	cmp	r4, #0
   1c320:	movne	r7, r0
   1c324:	moveq	r7, #1
   1c328:	cmp	r7, #0
   1c32c:	bne	1c3a4 <__assert_fail@plt+0xb0fc>
   1c330:	ldr	r2, [sp, #24]
   1c334:	mov	r1, r9
   1c338:	mov	r0, r8
   1c33c:	bl	1536c <__assert_fail@plt+0x40c4>
   1c340:	str	r0, [sp, #28]
   1c344:	ldrb	r3, [r8, #4]
   1c348:	cmp	r3, #2
   1c34c:	streq	r3, [fp]
   1c350:	beq	1c434 <__assert_fail@plt+0xb18c>
   1c354:	cmp	r3, #25
   1c358:	strne	r7, [sp, #52]	; 0x34
   1c35c:	beq	1c3c0 <__assert_fail@plt+0xb118>
   1c360:	ldrb	r3, [r8, #4]
   1c364:	cmp	r3, #21
   1c368:	moveq	r3, #1
   1c36c:	strbeq	r3, [r8, #4]
   1c370:	mov	r3, #0
   1c374:	str	r3, [sp, #48]	; 0x30
   1c378:	mov	r2, #1
   1c37c:	str	r3, [sp, #44]	; 0x2c
   1c380:	add	sl, sp, #96	; 0x60
   1c384:	ldr	r3, [sp, #24]
   1c388:	ubfx	r3, r3, #16, #1
   1c38c:	str	r3, [sp, #60]	; 0x3c
   1c390:	ldr	r4, [sp, #32]
   1c394:	str	r7, [sp, #40]	; 0x28
   1c398:	str	fp, [sp, #204]	; 0xcc
   1c39c:	ldr	fp, [sp, #36]	; 0x24
   1c3a0:	b	1c7c4 <__assert_fail@plt+0xb51c>
   1c3a4:	ldr	r0, [sp, #32]
   1c3a8:	bl	23f40 <__assert_fail@plt+0x12c98>
   1c3ac:	ldr	r0, [sp, #36]	; 0x24
   1c3b0:	bl	23f40 <__assert_fail@plt+0x12c98>
   1c3b4:	mov	r3, #12
   1c3b8:	str	r3, [fp]
   1c3bc:	b	1c444 <__assert_fail@plt+0xb19c>
   1c3c0:	ldr	r2, [sp, #36]	; 0x24
   1c3c4:	ldrb	r3, [r2, #16]
   1c3c8:	orr	r3, r3, #1
   1c3cc:	strb	r3, [r2, #16]
   1c3d0:	ldr	r3, [sp, #24]
   1c3d4:	tst	r3, #256	; 0x100
   1c3d8:	beq	1c3ec <__assert_fail@plt+0xb144>
   1c3dc:	ldr	r2, [sp, #32]
   1c3e0:	ldr	r3, [r2]
   1c3e4:	orr	r3, r3, #1024	; 0x400
   1c3e8:	str	r3, [r2]
   1c3ec:	ldr	r3, [r9, #40]	; 0x28
   1c3f0:	ldr	r2, [sp, #28]
   1c3f4:	add	r3, r3, r2
   1c3f8:	str	r3, [r9, #40]	; 0x28
   1c3fc:	ldr	r2, [sp, #24]
   1c400:	mov	r1, r9
   1c404:	mov	r0, r8
   1c408:	bl	1536c <__assert_fail@plt+0x40c4>
   1c40c:	str	r0, [sp, #28]
   1c410:	ldrb	r3, [r8, #4]
   1c414:	cmp	r3, #2
   1c418:	streq	r3, [fp]
   1c41c:	beq	1c434 <__assert_fail@plt+0xb18c>
   1c420:	mov	r3, #1
   1c424:	str	r3, [sp, #52]	; 0x34
   1c428:	b	1c360 <__assert_fail@plt+0xb0b8>
   1c42c:	ldr	fp, [sp, #204]	; 0xcc
   1c430:	str	r0, [fp]
   1c434:	ldr	r0, [sp, #32]
   1c438:	bl	23f40 <__assert_fail@plt+0x12c98>
   1c43c:	ldr	r0, [sp, #36]	; 0x24
   1c440:	bl	17a5c <__assert_fail@plt+0x67b4>
   1c444:	ldr	r3, [fp]
   1c448:	cmp	r3, #0
   1c44c:	bne	1d3d4 <__assert_fail@plt+0xc12c>
   1c450:	mov	sl, #0
   1c454:	b	1cbe4 <__assert_fail@plt+0xb93c>
   1c458:	ldr	fp, [sp, #204]	; 0xcc
   1c45c:	mov	r3, #7
   1c460:	str	r3, [fp]
   1c464:	b	1c434 <__assert_fail@plt+0xb18c>
   1c468:	ldr	r3, [r9, #40]	; 0x28
   1c46c:	ldr	r2, [sp, #28]
   1c470:	add	r3, r3, r2
   1c474:	str	r3, [r9, #40]	; 0x28
   1c478:	ldr	r2, [sp, #24]
   1c47c:	mov	r1, r9
   1c480:	add	r0, sp, #88	; 0x58
   1c484:	bl	1536c <__assert_fail@plt+0x40c4>
   1c488:	mov	r3, r0
   1c48c:	ldrb	r2, [sp, #92]	; 0x5c
   1c490:	cmp	r2, #2
   1c494:	beq	1c4bc <__assert_fail@plt+0xb214>
   1c498:	cmp	r2, #21
   1c49c:	bne	1c4cc <__assert_fail@plt+0xb224>
   1c4a0:	ldr	r3, [r9, #40]	; 0x28
   1c4a4:	ldr	r2, [sp, #28]
   1c4a8:	sub	r3, r3, r2
   1c4ac:	str	r3, [r9, #40]	; 0x28
   1c4b0:	mov	r3, #1
   1c4b4:	strb	r3, [r8, #4]
   1c4b8:	b	1c838 <__assert_fail@plt+0xb590>
   1c4bc:	ldr	fp, [sp, #204]	; 0xcc
   1c4c0:	mov	r3, #7
   1c4c4:	str	r3, [fp]
   1c4c8:	b	1c434 <__assert_fail@plt+0xb18c>
   1c4cc:	add	r2, sp, #128	; 0x80
   1c4d0:	str	r2, [sp, #84]	; 0x54
   1c4d4:	mov	r2, #3
   1c4d8:	str	r2, [sp, #80]	; 0x50
   1c4dc:	mov	r2, #1
   1c4e0:	str	r2, [sp, #8]
   1c4e4:	ldr	r2, [sp, #24]
   1c4e8:	str	r2, [sp, #4]
   1c4ec:	ldr	r2, [sp, #20]
   1c4f0:	str	r2, [sp]
   1c4f4:	add	r2, sp, #88	; 0x58
   1c4f8:	mov	r1, r9
   1c4fc:	add	r0, sp, #80	; 0x50
   1c500:	bl	15500 <__assert_fail@plt+0x4258>
   1c504:	cmp	r0, #0
   1c508:	bne	1c614 <__assert_fail@plt+0xb36c>
   1c50c:	ldr	r2, [sp, #24]
   1c510:	mov	r1, r9
   1c514:	mov	r0, r8
   1c518:	bl	1536c <__assert_fail@plt+0x40c4>
   1c51c:	str	r0, [sp, #28]
   1c520:	ldr	r6, [sp, #72]	; 0x48
   1c524:	sub	r3, r6, #2
   1c528:	bics	r3, r3, #2
   1c52c:	beq	1d454 <__assert_fail@plt+0xc1ac>
   1c530:	ldr	r7, [sp, #80]	; 0x50
   1c534:	sub	r3, r7, #2
   1c538:	bics	r3, r3, #2
   1c53c:	beq	1d460 <__assert_fail@plt+0xc1b8>
   1c540:	cmp	r6, #3
   1c544:	moveq	r3, #1
   1c548:	movne	r3, #0
   1c54c:	str	r3, [sp, #56]	; 0x38
   1c550:	beq	1c620 <__assert_fail@plt+0xb378>
   1c554:	cmp	r7, #3
   1c558:	beq	1c650 <__assert_fail@plt+0xb3a8>
   1c55c:	cmp	r6, #0
   1c560:	movne	r5, #0
   1c564:	bne	1c56c <__assert_fail@plt+0xb2c4>
   1c568:	ldrb	r5, [sp, #76]	; 0x4c
   1c56c:	cmp	r7, #0
   1c570:	bne	1c678 <__assert_fail@plt+0xb3d0>
   1c574:	ldrb	r7, [sp, #84]	; 0x54
   1c578:	ldr	r3, [sp, #56]	; 0x38
   1c57c:	cmp	r6, #0
   1c580:	moveq	r3, #1
   1c584:	cmp	r3, #0
   1c588:	bne	1c68c <__assert_fail@plt+0xb3e4>
   1c58c:	ldr	r5, [sp, #76]	; 0x4c
   1c590:	ldr	r3, [sp, #80]	; 0x50
   1c594:	cmp	r3, #3
   1c598:	cmpne	r3, #0
   1c59c:	beq	1c6ac <__assert_fail@plt+0xb404>
   1c5a0:	ldr	r7, [sp, #84]	; 0x54
   1c5a4:	cmn	r5, #1
   1c5a8:	cmnne	r7, #1
   1c5ac:	beq	1d47c <__assert_fail@plt+0xc1d4>
   1c5b0:	ldr	r3, [sp, #60]	; 0x3c
   1c5b4:	cmp	r7, r5
   1c5b8:	movcs	r3, #0
   1c5bc:	andcc	r3, r3, #1
   1c5c0:	cmp	r3, #0
   1c5c4:	bne	1d488 <__assert_fail@plt+0xc1e0>
   1c5c8:	ldr	r3, [sp, #20]
   1c5cc:	ldr	r3, [r3, #92]	; 0x5c
   1c5d0:	cmp	r3, #1
   1c5d4:	ble	1c608 <__assert_fail@plt+0xb360>
   1c5d8:	ldr	r3, [fp, #32]
   1c5dc:	ldr	r2, [sp, #48]	; 0x30
   1c5e0:	cmp	r3, r2
   1c5e4:	beq	1c6cc <__assert_fail@plt+0xb424>
   1c5e8:	ldr	r2, [fp, #32]
   1c5ec:	ldr	r3, [fp, #4]
   1c5f0:	str	r5, [r3, r2, lsl #2]
   1c5f4:	ldr	r2, [fp, #8]
   1c5f8:	ldr	r3, [fp, #32]
   1c5fc:	add	r1, r3, #1
   1c600:	str	r1, [fp, #32]
   1c604:	str	r7, [r2, r3, lsl #2]
   1c608:	mov	r3, #0
   1c60c:	mov	ip, #1
   1c610:	b	1c744 <__assert_fail@plt+0xb49c>
   1c614:	ldr	fp, [sp, #204]	; 0xcc
   1c618:	str	r0, [fp]
   1c61c:	b	1c434 <__assert_fail@plt+0xb18c>
   1c620:	ldr	r0, [sp, #76]	; 0x4c
   1c624:	bl	11188 <strlen@plt>
   1c628:	cmp	r0, #1
   1c62c:	bhi	1c644 <__assert_fail@plt+0xb39c>
   1c630:	cmp	r7, #3
   1c634:	beq	1d4b0 <__assert_fail@plt+0xc208>
   1c638:	ldr	r3, [sp, #76]	; 0x4c
   1c63c:	ldrb	r5, [r3]
   1c640:	b	1c56c <__assert_fail@plt+0xb2c4>
   1c644:	ldr	fp, [sp, #204]	; 0xcc
   1c648:	mov	r3, #3
   1c64c:	b	1d468 <__assert_fail@plt+0xc1c0>
   1c650:	ldr	r0, [sp, #84]	; 0x54
   1c654:	bl	11188 <strlen@plt>
   1c658:	cmp	r0, #1
   1c65c:	bhi	1d470 <__assert_fail@plt+0xc1c8>
   1c660:	cmp	r6, #0
   1c664:	beq	1c568 <__assert_fail@plt+0xb2c0>
   1c668:	cmp	r6, #3
   1c66c:	beq	1c638 <__assert_fail@plt+0xb390>
   1c670:	mov	r5, #0
   1c674:	b	1c56c <__assert_fail@plt+0xb2c4>
   1c678:	cmp	r7, #3
   1c67c:	ldreq	r3, [sp, #84]	; 0x54
   1c680:	ldrbeq	r7, [r3]
   1c684:	movne	r7, #0
   1c688:	b	1c578 <__assert_fail@plt+0xb2d0>
   1c68c:	ldr	r3, [sp, #20]
   1c690:	ldr	r3, [r3, #92]	; 0x5c
   1c694:	cmp	r3, #1
   1c698:	ble	1d49c <__assert_fail@plt+0xc1f4>
   1c69c:	mov	r0, r5
   1c6a0:	bl	111d0 <btowc@plt>
   1c6a4:	mov	r5, r0
   1c6a8:	b	1c590 <__assert_fail@plt+0xb2e8>
   1c6ac:	ldr	r3, [sp, #20]
   1c6b0:	ldr	r3, [r3, #92]	; 0x5c
   1c6b4:	cmp	r3, #1
   1c6b8:	ble	1c5a4 <__assert_fail@plt+0xb2fc>
   1c6bc:	mov	r0, r7
   1c6c0:	bl	111d0 <btowc@plt>
   1c6c4:	mov	r7, r0
   1c6c8:	b	1c5a4 <__assert_fail@plt+0xb2fc>
   1c6cc:	lsl	r3, r2, #1
   1c6d0:	add	r3, r3, #1
   1c6d4:	str	r3, [sp, #48]	; 0x30
   1c6d8:	lsl	r6, r3, #2
   1c6dc:	mov	r1, r6
   1c6e0:	ldr	r0, [fp, #4]
   1c6e4:	bl	23d84 <__assert_fail@plt+0x12adc>
   1c6e8:	str	r0, [sp, #56]	; 0x38
   1c6ec:	mov	r1, r6
   1c6f0:	ldr	r0, [fp, #8]
   1c6f4:	bl	23d84 <__assert_fail@plt+0x12adc>
   1c6f8:	mov	r6, r0
   1c6fc:	ldr	r3, [sp, #56]	; 0x38
   1c700:	cmp	r0, #0
   1c704:	cmpne	r3, #0
   1c708:	beq	1c71c <__assert_fail@plt+0xb474>
   1c70c:	ldr	r3, [sp, #56]	; 0x38
   1c710:	str	r3, [fp, #4]
   1c714:	str	r0, [fp, #8]
   1c718:	b	1c5e8 <__assert_fail@plt+0xb340>
   1c71c:	ldr	fp, [sp, #204]	; 0xcc
   1c720:	mov	r0, r3
   1c724:	bl	23f40 <__assert_fail@plt+0x12c98>
   1c728:	mov	r0, r6
   1c72c:	bl	23f40 <__assert_fail@plt+0x12c98>
   1c730:	mov	r3, #12
   1c734:	b	1d468 <__assert_fail@plt+0xc1c0>
   1c738:	add	r3, r3, #1
   1c73c:	cmp	r3, #256	; 0x100
   1c740:	beq	1d444 <__assert_fail@plt+0xc19c>
   1c744:	cmp	r3, r5
   1c748:	movcc	r2, #0
   1c74c:	movcs	r2, #1
   1c750:	cmp	r3, r7
   1c754:	movhi	r2, #0
   1c758:	cmp	r2, #0
   1c75c:	beq	1c738 <__assert_fail@plt+0xb490>
   1c760:	add	r2, r3, #31
   1c764:	cmp	r3, #0
   1c768:	movge	r2, r3
   1c76c:	asr	r2, r2, #5
   1c770:	rsbs	r1, r3, #0
   1c774:	and	r0, r3, #31
   1c778:	and	r1, r1, #31
   1c77c:	rsbpl	r0, r1, #0
   1c780:	ldr	r1, [r4, r2, lsl #2]
   1c784:	orr	r1, r1, ip, lsl r0
   1c788:	str	r1, [r4, r2, lsl #2]
   1c78c:	b	1c738 <__assert_fail@plt+0xb490>
   1c790:	ldrb	r3, [sp, #76]	; 0x4c
   1c794:	asr	r1, r3, #5
   1c798:	and	r3, r3, #31
   1c79c:	ldr	r2, [r4, r1, lsl #2]
   1c7a0:	mov	r0, #1
   1c7a4:	orr	r3, r2, r0, lsl r3
   1c7a8:	str	r3, [r4, r1, lsl #2]
   1c7ac:	ldrb	r3, [r8, #4]
   1c7b0:	cmp	r3, #2
   1c7b4:	beq	1c964 <__assert_fail@plt+0xb6bc>
   1c7b8:	cmp	r3, #21
   1c7bc:	beq	1c974 <__assert_fail@plt+0xb6cc>
   1c7c0:	ldr	r2, [sp, #40]	; 0x28
   1c7c4:	str	sl, [sp, #76]	; 0x4c
   1c7c8:	mov	r3, #3
   1c7cc:	str	r3, [sp, #72]	; 0x48
   1c7d0:	str	r2, [sp, #8]
   1c7d4:	ldr	r3, [sp, #24]
   1c7d8:	str	r3, [sp, #4]
   1c7dc:	ldr	r3, [sp, #20]
   1c7e0:	str	r3, [sp]
   1c7e4:	ldr	r3, [sp, #28]
   1c7e8:	mov	r2, r8
   1c7ec:	mov	r1, r9
   1c7f0:	add	r0, sp, #72	; 0x48
   1c7f4:	bl	15500 <__assert_fail@plt+0x4258>
   1c7f8:	cmp	r0, #0
   1c7fc:	bne	1c42c <__assert_fail@plt+0xb184>
   1c800:	ldr	r2, [sp, #24]
   1c804:	mov	r1, r9
   1c808:	mov	r0, r8
   1c80c:	bl	1536c <__assert_fail@plt+0x40c4>
   1c810:	str	r0, [sp, #28]
   1c814:	ldr	r3, [sp, #72]	; 0x48
   1c818:	sub	r3, r3, #2
   1c81c:	bics	r3, r3, #2
   1c820:	beq	1c838 <__assert_fail@plt+0xb590>
   1c824:	ldrb	r3, [r8, #4]
   1c828:	cmp	r3, #2
   1c82c:	beq	1c458 <__assert_fail@plt+0xb1b0>
   1c830:	cmp	r3, #22
   1c834:	beq	1c468 <__assert_fail@plt+0xb1c0>
   1c838:	ldr	r3, [sp, #72]	; 0x48
   1c83c:	cmp	r3, #4
   1c840:	ldrls	pc, [pc, r3, lsl #2]
   1c844:	b	1c928 <__assert_fail@plt+0xb680>
   1c848:	muleq	r1, r0, r7
   1c84c:	andeq	ip, r1, ip, asr r8
   1c850:			; <UNDEFINED> instruction: 0x0001c8b0
   1c854:	andeq	ip, r1, ip, ror #17
   1c858:	andeq	ip, r1, r8, lsr #18
   1c85c:	ldr	r3, [fp, #20]
   1c860:	ldr	r2, [sp, #44]	; 0x2c
   1c864:	cmp	r3, r2
   1c868:	beq	1c888 <__assert_fail@plt+0xb5e0>
   1c86c:	ldr	r2, [fp]
   1c870:	ldr	r3, [fp, #20]
   1c874:	add	r1, r3, #1
   1c878:	str	r1, [fp, #20]
   1c87c:	ldr	r1, [sp, #76]	; 0x4c
   1c880:	str	r1, [r2, r3, lsl #2]
   1c884:	b	1c7ac <__assert_fail@plt+0xb504>
   1c888:	lsl	r3, r2, #1
   1c88c:	add	r3, r3, #1
   1c890:	str	r3, [sp, #44]	; 0x2c
   1c894:	lsl	r1, r3, #2
   1c898:	ldr	r0, [fp]
   1c89c:	bl	23d84 <__assert_fail@plt+0x12adc>
   1c8a0:	cmp	r0, #0
   1c8a4:	beq	1caec <__assert_fail@plt+0xb844>
   1c8a8:	str	r0, [fp]
   1c8ac:	b	1c86c <__assert_fail@plt+0xb5c4>
   1c8b0:	ldr	r5, [sp, #76]	; 0x4c
   1c8b4:	mov	r0, r5
   1c8b8:	bl	11188 <strlen@plt>
   1c8bc:	cmp	r0, #1
   1c8c0:	bne	1d424 <__assert_fail@plt+0xc17c>
   1c8c4:	ldrb	r3, [r5]
   1c8c8:	asr	r1, r3, #5
   1c8cc:	and	r3, r3, #31
   1c8d0:	ldr	r2, [r4, r1, lsl #2]
   1c8d4:	orr	r3, r2, r0, lsl r3
   1c8d8:	str	r3, [r4, r1, lsl #2]
   1c8dc:	mov	r3, #0
   1c8e0:	ldr	r2, [sp, #204]	; 0xcc
   1c8e4:	str	r3, [r2]
   1c8e8:	b	1c7ac <__assert_fail@plt+0xb504>
   1c8ec:	ldr	r5, [sp, #76]	; 0x4c
   1c8f0:	mov	r0, r5
   1c8f4:	bl	11188 <strlen@plt>
   1c8f8:	cmp	r0, #1
   1c8fc:	bne	1d434 <__assert_fail@plt+0xc18c>
   1c900:	ldrb	r3, [r5]
   1c904:	asr	r1, r3, #5
   1c908:	and	r3, r3, #31
   1c90c:	ldr	r2, [r4, r1, lsl #2]
   1c910:	orr	r3, r2, r0, lsl r3
   1c914:	str	r3, [r4, r1, lsl #2]
   1c918:	mov	r3, #0
   1c91c:	ldr	r2, [sp, #204]	; 0xcc
   1c920:	str	r3, [r2]
   1c924:	b	1c7ac <__assert_fail@plt+0xb504>
   1c928:	ldr	r3, [sp, #24]
   1c92c:	str	r3, [sp, #4]
   1c930:	ldr	r3, [sp, #76]	; 0x4c
   1c934:	str	r3, [sp]
   1c938:	add	r3, sp, #68	; 0x44
   1c93c:	mov	r2, fp
   1c940:	mov	r1, r4
   1c944:	ldr	r0, [r9, #64]	; 0x40
   1c948:	bl	197f4 <__assert_fail@plt+0x854c>
   1c94c:	ldr	r3, [sp, #204]	; 0xcc
   1c950:	str	r0, [r3]
   1c954:	cmp	r0, #0
   1c958:	beq	1c7ac <__assert_fail@plt+0xb504>
   1c95c:	ldr	fp, [sp, #204]	; 0xcc
   1c960:	b	1c434 <__assert_fail@plt+0xb18c>
   1c964:	ldr	fp, [sp, #204]	; 0xcc
   1c968:	mov	r3, #7
   1c96c:	str	r3, [fp]
   1c970:	b	1c434 <__assert_fail@plt+0xb18c>
   1c974:	ldr	fp, [sp, #204]	; 0xcc
   1c978:	ldr	r3, [r9, #40]	; 0x28
   1c97c:	ldr	r2, [sp, #28]
   1c980:	add	r3, r3, r2
   1c984:	str	r3, [r9, #40]	; 0x28
   1c988:	ldr	r3, [sp, #52]	; 0x34
   1c98c:	cmp	r3, #0
   1c990:	beq	1c9b4 <__assert_fail@plt+0xb70c>
   1c994:	ldr	r2, [sp, #32]
   1c998:	sub	r3, r2, #4
   1c99c:	add	r1, r2, #28
   1c9a0:	ldr	r2, [r3, #4]!
   1c9a4:	mvn	r2, r2
   1c9a8:	str	r2, [r3]
   1c9ac:	cmp	r3, r1
   1c9b0:	bne	1c9a0 <__assert_fail@plt+0xb6f8>
   1c9b4:	ldr	r3, [sp, #20]
   1c9b8:	ldr	r0, [r3, #92]	; 0x5c
   1c9bc:	cmp	r0, #1
   1c9c0:	ble	1c9f0 <__assert_fail@plt+0xb748>
   1c9c4:	ldr	r1, [sp, #32]
   1c9c8:	sub	r2, r1, #4
   1c9cc:	ldr	r3, [r3, #60]	; 0x3c
   1c9d0:	sub	r3, r3, #4
   1c9d4:	add	ip, r1, #28
   1c9d8:	ldr	r1, [r2, #4]!
   1c9dc:	ldr	lr, [r3, #4]!
   1c9e0:	and	r1, r1, lr
   1c9e4:	str	r1, [r2]
   1c9e8:	cmp	ip, r2
   1c9ec:	bne	1c9d8 <__assert_fail@plt+0xb730>
   1c9f0:	ldr	r2, [sp, #36]	; 0x24
   1c9f4:	ldr	r3, [r2, #20]
   1c9f8:	cmp	r3, #0
   1c9fc:	bne	1ca44 <__assert_fail@plt+0xb79c>
   1ca00:	ldr	r3, [r2, #24]
   1ca04:	cmp	r3, #0
   1ca08:	bne	1ca44 <__assert_fail@plt+0xb79c>
   1ca0c:	ldr	r3, [r2, #28]
   1ca10:	cmp	r3, #0
   1ca14:	bne	1ca44 <__assert_fail@plt+0xb79c>
   1ca18:	ldr	r3, [r2, #32]
   1ca1c:	cmp	r3, #0
   1ca20:	bne	1ca44 <__assert_fail@plt+0xb79c>
   1ca24:	cmp	r0, #1
   1ca28:	ble	1cab4 <__assert_fail@plt+0xb80c>
   1ca2c:	ldr	r3, [r2, #36]	; 0x24
   1ca30:	cmp	r3, #0
   1ca34:	bne	1ca44 <__assert_fail@plt+0xb79c>
   1ca38:	ldrb	r3, [r2, #16]
   1ca3c:	tst	r3, #1
   1ca40:	beq	1cab4 <__assert_fail@plt+0xb80c>
   1ca44:	ldr	r0, [sp, #20]
   1ca48:	ldrb	r3, [r0, #88]	; 0x58
   1ca4c:	orr	r3, r3, #2
   1ca50:	strb	r3, [r0, #88]	; 0x58
   1ca54:	mov	r3, #6
   1ca58:	strb	r3, [sp, #132]	; 0x84
   1ca5c:	ldr	r3, [sp, #36]	; 0x24
   1ca60:	str	r3, [sp, #128]	; 0x80
   1ca64:	add	r3, sp, #128	; 0x80
   1ca68:	mov	r2, #0
   1ca6c:	mov	r1, r2
   1ca70:	bl	15d60 <__assert_fail@plt+0x4ab8>
   1ca74:	subs	sl, r0, #0
   1ca78:	beq	1caf0 <__assert_fail@plt+0xb848>
   1ca7c:	ldr	r2, [sp, #32]
   1ca80:	ldr	r3, [r2]
   1ca84:	cmp	r3, #0
   1ca88:	bne	1d3dc <__assert_fail@plt+0xc134>
   1ca8c:	mov	r3, r2
   1ca90:	add	r2, r2, #28
   1ca94:	ldr	r1, [r3, #4]!
   1ca98:	cmp	r1, #0
   1ca9c:	bne	1d3dc <__assert_fail@plt+0xc134>
   1caa0:	cmp	r3, r2
   1caa4:	bne	1ca94 <__assert_fail@plt+0xb7ec>
   1caa8:	ldr	r0, [sp, #32]
   1caac:	bl	23f40 <__assert_fail@plt+0x12c98>
   1cab0:	b	1cbe4 <__assert_fail@plt+0xb93c>
   1cab4:	ldr	r0, [sp, #36]	; 0x24
   1cab8:	bl	17a5c <__assert_fail@plt+0x67b4>
   1cabc:	mov	r3, #3
   1cac0:	strb	r3, [sp, #132]	; 0x84
   1cac4:	ldr	r3, [sp, #32]
   1cac8:	str	r3, [sp, #128]	; 0x80
   1cacc:	add	r3, sp, #128	; 0x80
   1cad0:	mov	r2, #0
   1cad4:	mov	r1, r2
   1cad8:	ldr	r0, [sp, #20]
   1cadc:	bl	15d60 <__assert_fail@plt+0x4ab8>
   1cae0:	subs	sl, r0, #0
   1cae4:	bne	1cbe4 <__assert_fail@plt+0xb93c>
   1cae8:	b	1caf0 <__assert_fail@plt+0xb848>
   1caec:	ldr	fp, [sp, #204]	; 0xcc
   1caf0:	mov	r3, #12
   1caf4:	str	r3, [fp]
   1caf8:	b	1c434 <__assert_fail@plt+0xb18c>
   1cafc:	ldr	r2, [r8]
   1cb00:	mov	r3, #1
   1cb04:	lsl	r3, r3, r2
   1cb08:	ldr	r2, [sp, #20]
   1cb0c:	ldr	r2, [r2, #84]	; 0x54
   1cb10:	tst	r3, r2
   1cb14:	moveq	r3, #6
   1cb18:	streq	r3, [fp]
   1cb1c:	moveq	sl, #0
   1cb20:	beq	1d1f0 <__assert_fail@plt+0xbf48>
   1cb24:	ldr	r0, [sp, #20]
   1cb28:	ldr	r2, [r0, #80]	; 0x50
   1cb2c:	orr	r3, r2, r3
   1cb30:	str	r3, [r0, #80]	; 0x50
   1cb34:	mov	r3, r8
   1cb38:	mov	r2, #0
   1cb3c:	mov	r1, r2
   1cb40:	bl	15d60 <__assert_fail@plt+0x4ab8>
   1cb44:	subs	sl, r0, #0
   1cb48:	moveq	r3, #12
   1cb4c:	streq	r3, [fp]
   1cb50:	beq	1d1f0 <__assert_fail@plt+0xbf48>
   1cb54:	ldr	r2, [sp, #20]
   1cb58:	ldr	r3, [r2, #76]	; 0x4c
   1cb5c:	add	r3, r3, #1
   1cb60:	str	r3, [r2, #76]	; 0x4c
   1cb64:	ldrb	r3, [r2, #88]	; 0x58
   1cb68:	orr	r3, r3, #2
   1cb6c:	strb	r3, [r2, #88]	; 0x58
   1cb70:	b	1cbe4 <__assert_fail@plt+0xb93c>
   1cb74:	ldr	r3, [sp, #24]
   1cb78:	tst	r3, #16777216	; 0x1000000
   1cb7c:	movne	r3, #13
   1cb80:	strne	r3, [fp]
   1cb84:	movne	sl, #0
   1cb88:	bne	1d1f0 <__assert_fail@plt+0xbf48>
   1cb8c:	ldr	r3, [sp, #24]
   1cb90:	tst	r3, #32
   1cb94:	movne	r3, #13
   1cb98:	strne	r3, [fp]
   1cb9c:	movne	sl, #0
   1cba0:	bne	1d1f0 <__assert_fail@plt+0xbf48>
   1cba4:	ldr	r3, [sp, #24]
   1cba8:	tst	r3, #16
   1cbac:	bne	1cc10 <__assert_fail@plt+0xb968>
   1cbb0:	cmp	r2, #9
   1cbb4:	beq	1cc4c <__assert_fail@plt+0xb9a4>
   1cbb8:	mov	r3, #1
   1cbbc:	strb	r3, [r8, #4]
   1cbc0:	mov	r3, r8
   1cbc4:	mov	r2, #0
   1cbc8:	mov	r1, r2
   1cbcc:	ldr	r0, [sp, #20]
   1cbd0:	bl	15d60 <__assert_fail@plt+0x4ab8>
   1cbd4:	subs	sl, r0, #0
   1cbd8:	moveq	r3, #12
   1cbdc:	streq	r3, [fp]
   1cbe0:	beq	1d1f0 <__assert_fail@plt+0xbf48>
   1cbe4:	ldr	r2, [sp, #24]
   1cbe8:	mov	r1, r9
   1cbec:	mov	r0, r8
   1cbf0:	bl	17964 <__assert_fail@plt+0x66bc>
   1cbf4:	movw	r3, #22444	; 0x57ac
   1cbf8:	movt	r3, #1
   1cbfc:	str	r3, [sp, #32]
   1cc00:	movw	r3, #31464	; 0x7ae8
   1cc04:	movt	r3, #1
   1cc08:	str	r3, [sp, #36]	; 0x24
   1cc0c:	b	1d288 <__assert_fail@plt+0xbfe0>
   1cc10:	mov	r5, r3
   1cc14:	mov	r2, r3
   1cc18:	mov	r1, r9
   1cc1c:	mov	r0, r8
   1cc20:	bl	17964 <__assert_fail@plt+0x66bc>
   1cc24:	str	fp, [sp, #4]
   1cc28:	ldr	r3, [sp, #200]	; 0xc8
   1cc2c:	str	r3, [sp]
   1cc30:	mov	r3, r5
   1cc34:	mov	r2, r8
   1cc38:	mov	r1, r4
   1cc3c:	mov	r0, r9
   1cc40:	bl	1c068 <__assert_fail@plt+0xadc0>
   1cc44:	mov	sl, r0
   1cc48:	b	1d1f0 <__assert_fail@plt+0xbf48>
   1cc4c:	ldr	r3, [sp, #24]
   1cc50:	tst	r3, #131072	; 0x20000
   1cc54:	moveq	r3, #16
   1cc58:	streq	r3, [fp]
   1cc5c:	moveq	sl, #0
   1cc60:	bne	1cbb8 <__assert_fail@plt+0xb910>
   1cc64:	b	1d1f0 <__assert_fail@plt+0xbf48>
   1cc68:	ldr	r3, [r8]
   1cc6c:	movw	r2, #783	; 0x30f
   1cc70:	tst	r2, r3
   1cc74:	beq	1cc88 <__assert_fail@plt+0xb9e0>
   1cc78:	ldr	r3, [sp, #20]
   1cc7c:	ldrb	r3, [r3, #88]	; 0x58
   1cc80:	tst	r3, #16
   1cc84:	beq	1cd3c <__assert_fail@plt+0xba94>
   1cc88:	ldr	r3, [r8]
   1cc8c:	sub	r2, r3, #256	; 0x100
   1cc90:	bics	r2, r2, #256	; 0x100
   1cc94:	bne	1ce4c <__assert_fail@plt+0xbba4>
   1cc98:	cmp	r3, #256	; 0x100
   1cc9c:	beq	1ce20 <__assert_fail@plt+0xbb78>
   1cca0:	mov	r3, #5
   1cca4:	str	r3, [r8]
   1cca8:	mov	r3, r8
   1ccac:	mov	r2, #0
   1ccb0:	mov	r1, r2
   1ccb4:	ldr	r0, [sp, #20]
   1ccb8:	bl	15d60 <__assert_fail@plt+0x4ab8>
   1ccbc:	mov	r5, r0
   1ccc0:	mov	r3, #10
   1ccc4:	str	r3, [r8]
   1ccc8:	mov	r3, r8
   1cccc:	mov	r2, #0
   1ccd0:	mov	r1, r2
   1ccd4:	ldr	r6, [sp, #20]
   1ccd8:	mov	r0, r6
   1ccdc:	bl	15d60 <__assert_fail@plt+0x4ab8>
   1cce0:	mov	r4, r0
   1cce4:	mov	r3, #10
   1cce8:	mov	r2, r0
   1ccec:	mov	r1, r5
   1ccf0:	mov	r0, r6
   1ccf4:	bl	15efc <__assert_fail@plt+0x4c54>
   1ccf8:	clz	r3, r4
   1ccfc:	lsr	r3, r3, #5
   1cd00:	cmp	r5, #0
   1cd04:	moveq	r3, #1
   1cd08:	mov	sl, r0
   1cd0c:	cmp	r0, #0
   1cd10:	moveq	r3, #1
   1cd14:	cmp	r3, #0
   1cd18:	movne	r3, #12
   1cd1c:	strne	r3, [fp]
   1cd20:	movne	sl, #0
   1cd24:	bne	1d1f0 <__assert_fail@plt+0xbf48>
   1cd28:	ldr	r2, [sp, #24]
   1cd2c:	mov	r1, r9
   1cd30:	mov	r0, r8
   1cd34:	bl	17964 <__assert_fail@plt+0x66bc>
   1cd38:	b	1d1f0 <__assert_fail@plt+0xbf48>
   1cd3c:	ldr	r2, [sp, #20]
   1cd40:	orr	r3, r3, #16
   1cd44:	strb	r3, [r2, #88]	; 0x58
   1cd48:	tst	r3, #8
   1cd4c:	bne	1cda0 <__assert_fail@plt+0xbaf8>
   1cd50:	mov	r3, #0
   1cd54:	str	r3, [r2, #96]	; 0x60
   1cd58:	movt	r3, #1023	; 0x3ff
   1cd5c:	str	r3, [r2, #100]	; 0x64
   1cd60:	mvn	r3, #2013265921	; 0x78000001
   1cd64:	str	r3, [r2, #104]	; 0x68
   1cd68:	mvn	r3, #-134217727	; 0xf8000001
   1cd6c:	str	r3, [r2, #108]	; 0x6c
   1cd70:	ldrb	r3, [r2, #88]	; 0x58
   1cd74:	tst	r3, #4
   1cd78:	moveq	r5, #128	; 0x80
   1cd7c:	moveq	r3, #4
   1cd80:	beq	1cda8 <__assert_fail@plt+0xbb00>
   1cd84:	ldr	r1, [sp, #20]
   1cd88:	mov	r2, #0
   1cd8c:	str	r2, [r1, #112]	; 0x70
   1cd90:	str	r2, [r1, #116]	; 0x74
   1cd94:	str	r2, [r1, #120]	; 0x78
   1cd98:	str	r2, [r1, #124]	; 0x7c
   1cd9c:	b	1cc88 <__assert_fail@plt+0xb9e0>
   1cda0:	mov	r5, #0
   1cda4:	mov	r3, r5
   1cda8:	add	r3, r3, #24
   1cdac:	ldr	r2, [sp, #20]
   1cdb0:	add	r4, r2, r3, lsl #2
   1cdb4:	add	r6, r2, #128	; 0x80
   1cdb8:	bl	11170 <__ctype_b_loc@plt>
   1cdbc:	mov	ip, #1
   1cdc0:	b	1ce14 <__assert_fail@plt+0xbb6c>
   1cdc4:	ldr	r3, [r4]
   1cdc8:	orr	r3, r3, ip, lsl r1
   1cdcc:	str	r3, [r4]
   1cdd0:	add	r1, r1, #1
   1cdd4:	add	r2, r2, #1
   1cdd8:	cmp	r1, #32
   1cddc:	beq	1ce04 <__assert_fail@plt+0xbb5c>
   1cde0:	ldr	lr, [r0]
   1cde4:	lsl	r3, r2, #1
   1cde8:	ldrh	r3, [lr, r3]
   1cdec:	ubfx	r3, r3, #3, #1
   1cdf0:	cmp	r2, #95	; 0x5f
   1cdf4:	orreq	r3, r3, #1
   1cdf8:	cmp	r3, #0
   1cdfc:	bne	1cdc4 <__assert_fail@plt+0xbb1c>
   1ce00:	b	1cdd0 <__assert_fail@plt+0xbb28>
   1ce04:	add	r5, r5, #32
   1ce08:	add	r4, r4, #4
   1ce0c:	cmp	r6, r4
   1ce10:	beq	1cc88 <__assert_fail@plt+0xb9e0>
   1ce14:	mov	r2, r5
   1ce18:	mov	r1, #0
   1ce1c:	b	1cde0 <__assert_fail@plt+0xbb38>
   1ce20:	mov	r3, #6
   1ce24:	str	r3, [r8]
   1ce28:	mov	r3, r8
   1ce2c:	mov	r2, #0
   1ce30:	mov	r1, r2
   1ce34:	ldr	r0, [sp, #20]
   1ce38:	bl	15d60 <__assert_fail@plt+0x4ab8>
   1ce3c:	mov	r5, r0
   1ce40:	mov	r3, #9
   1ce44:	str	r3, [r8]
   1ce48:	b	1ccc8 <__assert_fail@plt+0xba20>
   1ce4c:	mov	r3, r8
   1ce50:	mov	r2, #0
   1ce54:	mov	r1, r2
   1ce58:	ldr	r0, [sp, #20]
   1ce5c:	bl	15d60 <__assert_fail@plt+0x4ab8>
   1ce60:	subs	sl, r0, #0
   1ce64:	moveq	r3, #12
   1ce68:	streq	r3, [fp]
   1ce6c:	bne	1cd28 <__assert_fail@plt+0xba80>
   1ce70:	b	1d1f0 <__assert_fail@plt+0xbf48>
   1ce74:	mov	r3, r8
   1ce78:	mov	r2, #0
   1ce7c:	mov	r1, r2
   1ce80:	ldr	r0, [sp, #20]
   1ce84:	bl	15d60 <__assert_fail@plt+0x4ab8>
   1ce88:	subs	sl, r0, #0
   1ce8c:	moveq	r3, #12
   1ce90:	streq	r3, [fp]
   1ce94:	beq	1d1f0 <__assert_fail@plt+0xbf48>
   1ce98:	ldr	r2, [sp, #20]
   1ce9c:	ldr	r3, [r2, #92]	; 0x5c
   1cea0:	cmp	r3, #1
   1cea4:	ble	1cbe4 <__assert_fail@plt+0xb93c>
   1cea8:	ldrb	r3, [r2, #88]	; 0x58
   1ceac:	orr	r3, r3, #2
   1ceb0:	strb	r3, [r2, #88]	; 0x58
   1ceb4:	b	1cbe4 <__assert_fail@plt+0xb93c>
   1ceb8:	str	fp, [sp, #4]
   1cebc:	cmp	r2, #33	; 0x21
   1cec0:	movne	r2, #0
   1cec4:	moveq	r2, #1
   1cec8:	str	r2, [sp]
   1cecc:	movw	r3, #21008	; 0x5210
   1ced0:	movt	r3, #2
   1ced4:	movw	r2, #20936	; 0x51c8
   1ced8:	movt	r2, #2
   1cedc:	ldr	r1, [r0, #64]	; 0x40
   1cee0:	ldr	r0, [sp, #20]
   1cee4:	bl	1a270 <__assert_fail@plt+0x8fc8>
   1cee8:	ldr	r3, [fp]
   1ceec:	mov	sl, r0
   1cef0:	clz	r0, r0
   1cef4:	lsr	r0, r0, #5
   1cef8:	cmp	r3, #0
   1cefc:	moveq	r0, #0
   1cf00:	cmp	r0, #0
   1cf04:	beq	1cbe4 <__assert_fail@plt+0xb93c>
   1cf08:	mov	sl, #0
   1cf0c:	b	1d1f0 <__assert_fail@plt+0xbf48>
   1cf10:	str	fp, [sp, #4]
   1cf14:	cmp	r2, #35	; 0x23
   1cf18:	movne	r2, #0
   1cf1c:	moveq	r2, #1
   1cf20:	str	r2, [sp]
   1cf24:	movw	r3, #17400	; 0x43f8
   1cf28:	movt	r3, #2
   1cf2c:	movw	r2, #20952	; 0x51d8
   1cf30:	movt	r2, #2
   1cf34:	ldr	r1, [r0, #64]	; 0x40
   1cf38:	ldr	r0, [sp, #20]
   1cf3c:	bl	1a270 <__assert_fail@plt+0x8fc8>
   1cf40:	ldr	r3, [fp]
   1cf44:	mov	sl, r0
   1cf48:	clz	r0, r0
   1cf4c:	lsr	r0, r0, #5
   1cf50:	cmp	r3, #0
   1cf54:	moveq	r0, #0
   1cf58:	cmp	r0, #0
   1cf5c:	beq	1cbe4 <__assert_fail@plt+0xb93c>
   1cf60:	mov	sl, #0
   1cf64:	b	1d1f0 <__assert_fail@plt+0xbf48>
   1cf68:	mov	r3, #5
   1cf6c:	str	r3, [fp]
   1cf70:	mov	sl, #0
   1cf74:	b	1d1f0 <__assert_fail@plt+0xbf48>
   1cf78:	ldr	r2, [sp, #24]
   1cf7c:	mov	r1, r8
   1cf80:	mov	r0, r9
   1cf84:	bl	1798c <__assert_fail@plt+0x66e4>
   1cf88:	mov	r4, r0
   1cf8c:	cmn	r0, #1
   1cf90:	beq	1cfd8 <__assert_fail@plt+0xbd30>
   1cf94:	cmn	r0, #2
   1cf98:	beq	1cfb0 <__assert_fail@plt+0xbd08>
   1cf9c:	ldrb	r3, [r8, #4]
   1cfa0:	cmp	r3, #24
   1cfa4:	beq	1d0e0 <__assert_fail@plt+0xbe38>
   1cfa8:	cmp	r3, #1
   1cfac:	beq	1cff4 <__assert_fail@plt+0xbd4c>
   1cfb0:	ldr	r3, [sp, #24]
   1cfb4:	tst	r3, #2097152	; 0x200000
   1cfb8:	bne	1d00c <__assert_fail@plt+0xbd64>
   1cfbc:	ldrb	r3, [r8, #4]
   1cfc0:	cmp	r3, #2
   1cfc4:	bne	1d0d0 <__assert_fail@plt+0xbe28>
   1cfc8:	mov	r3, #9
   1cfcc:	str	r3, [fp]
   1cfd0:	mov	r6, #0
   1cfd4:	b	1d18c <__assert_fail@plt+0xbee4>
   1cfd8:	ldrb	r3, [r8, #4]
   1cfdc:	cmp	r3, #1
   1cfe0:	bne	1d028 <__assert_fail@plt+0xbd80>
   1cfe4:	ldrb	r3, [r8]
   1cfe8:	cmp	r3, #44	; 0x2c
   1cfec:	moveq	r4, #0
   1cff0:	bne	1d028 <__assert_fail@plt+0xbd80>
   1cff4:	ldrb	r3, [r8]
   1cff8:	cmp	r3, #44	; 0x2c
   1cffc:	beq	1d038 <__assert_fail@plt+0xbd90>
   1d000:	ldr	r3, [sp, #24]
   1d004:	tst	r3, #2097152	; 0x200000
   1d008:	beq	1d0d0 <__assert_fail@plt+0xbe28>
   1d00c:	str	r6, [r9, #40]	; 0x28
   1d010:	ldrd	r2, [sp, #128]	; 0x80
   1d014:	strd	r2, [r8]
   1d018:	mov	r3, #1
   1d01c:	strb	r3, [r8, #4]
   1d020:	mov	r6, sl
   1d024:	b	1d18c <__assert_fail@plt+0xbee4>
   1d028:	mov	r3, #10
   1d02c:	str	r3, [fp]
   1d030:	mov	r6, #0
   1d034:	b	1d18c <__assert_fail@plt+0xbee4>
   1d038:	ldr	r2, [sp, #24]
   1d03c:	mov	r1, r8
   1d040:	mov	r0, r9
   1d044:	bl	1798c <__assert_fail@plt+0x66e4>
   1d048:	mov	r7, r0
   1d04c:	cmn	r4, #2
   1d050:	cmnne	r0, #2
   1d054:	beq	1cfb0 <__assert_fail@plt+0xbd08>
   1d058:	cmn	r0, #1
   1d05c:	cmpne	r4, r0
   1d060:	bgt	1d0e8 <__assert_fail@plt+0xbe40>
   1d064:	ldrb	r3, [r8, #4]
   1d068:	cmp	r3, #24
   1d06c:	bne	1d0e8 <__assert_fail@plt+0xbe40>
   1d070:	cmn	r7, #1
   1d074:	beq	1d0f8 <__assert_fail@plt+0xbe50>
   1d078:	cmp	r7, #32768	; 0x8000
   1d07c:	movlt	r3, #0
   1d080:	movge	r3, #1
   1d084:	cmp	r3, #0
   1d088:	movne	r3, #15
   1d08c:	strne	r3, [fp]
   1d090:	movne	r6, #0
   1d094:	bne	1d18c <__assert_fail@plt+0xbee4>
   1d098:	ldr	r2, [sp, #24]
   1d09c:	mov	r1, r9
   1d0a0:	mov	r0, r8
   1d0a4:	bl	17964 <__assert_fail@plt+0x66bc>
   1d0a8:	cmp	sl, #0
   1d0ac:	beq	1d248 <__assert_fail@plt+0xbfa0>
   1d0b0:	orrs	r3, r4, r7
   1d0b4:	bne	1d108 <__assert_fail@plt+0xbe60>
   1d0b8:	mov	r2, #0
   1d0bc:	ldr	r1, [sp, #36]	; 0x24
   1d0c0:	mov	r0, sl
   1d0c4:	bl	15154 <__assert_fail@plt+0x3eac>
   1d0c8:	mov	r6, #0
   1d0cc:	b	1d18c <__assert_fail@plt+0xbee4>
   1d0d0:	mov	r3, #10
   1d0d4:	str	r3, [fp]
   1d0d8:	mov	r6, #0
   1d0dc:	b	1d18c <__assert_fail@plt+0xbee4>
   1d0e0:	mov	r7, r0
   1d0e4:	b	1d064 <__assert_fail@plt+0xbdbc>
   1d0e8:	mov	r3, #10
   1d0ec:	str	r3, [fp]
   1d0f0:	mov	r6, #0
   1d0f4:	b	1d18c <__assert_fail@plt+0xbee4>
   1d0f8:	cmp	r4, #32768	; 0x8000
   1d0fc:	movlt	r3, #0
   1d100:	movge	r3, #1
   1d104:	b	1d084 <__assert_fail@plt+0xbddc>
   1d108:	cmp	r4, #0
   1d10c:	ble	1d224 <__assert_fail@plt+0xbf7c>
   1d110:	cmp	r4, #1
   1d114:	ble	1d210 <__assert_fail@plt+0xbf68>
   1d118:	str	sl, [sp, #28]
   1d11c:	mov	r5, sl
   1d120:	mov	r6, #2
   1d124:	ldr	r1, [sp, #20]
   1d128:	mov	r0, r5
   1d12c:	bl	15e30 <__assert_fail@plt+0x4b88>
   1d130:	mov	r5, r0
   1d134:	mov	r3, #16
   1d138:	mov	r2, r0
   1d13c:	ldr	r1, [sp, #28]
   1d140:	ldr	r0, [sp, #20]
   1d144:	bl	15efc <__assert_fail@plt+0x4c54>
   1d148:	str	r0, [sp, #28]
   1d14c:	cmp	r0, #0
   1d150:	cmpne	r5, #0
   1d154:	beq	1d180 <__assert_fail@plt+0xbed8>
   1d158:	add	r6, r6, #1
   1d15c:	cmp	r4, r6
   1d160:	bge	1d124 <__assert_fail@plt+0xbe7c>
   1d164:	cmp	r4, r7
   1d168:	beq	1d494 <__assert_fail@plt+0xc1ec>
   1d16c:	ldr	r1, [sp, #20]
   1d170:	mov	r0, r5
   1d174:	bl	15e30 <__assert_fail@plt+0x4b88>
   1d178:	subs	r5, r0, #0
   1d17c:	bne	1d30c <__assert_fail@plt+0xc064>
   1d180:	mov	r3, #12
   1d184:	str	r3, [fp]
   1d188:	mov	r6, #0
   1d18c:	ldr	r2, [fp]
   1d190:	clz	r3, r6
   1d194:	lsr	r3, r3, #5
   1d198:	cmp	r2, #0
   1d19c:	moveq	r3, #0
   1d1a0:	cmp	r3, #0
   1d1a4:	bne	1d260 <__assert_fail@plt+0xbfb8>
   1d1a8:	ldr	r3, [sp, #24]
   1d1ac:	tst	r3, #16777216	; 0x1000000
   1d1b0:	beq	1d284 <__assert_fail@plt+0xbfdc>
   1d1b4:	ldrb	r3, [r8, #4]
   1d1b8:	mov	sl, r6
   1d1bc:	cmp	r3, #23
   1d1c0:	cmpne	r3, #11
   1d1c4:	bne	1d288 <__assert_fail@plt+0xbfe0>
   1d1c8:	cmp	r6, #0
   1d1cc:	beq	1d1e4 <__assert_fail@plt+0xbf3c>
   1d1d0:	mov	r2, #0
   1d1d4:	movw	r1, #31464	; 0x7ae8
   1d1d8:	movt	r1, #1
   1d1dc:	mov	r0, r6
   1d1e0:	bl	15154 <__assert_fail@plt+0x3eac>
   1d1e4:	mov	r3, #13
   1d1e8:	str	r3, [fp]
   1d1ec:	mov	sl, #0
   1d1f0:	mov	r0, sl
   1d1f4:	add	sp, sp, #164	; 0xa4
   1d1f8:	ldrd	r4, [sp]
   1d1fc:	ldrd	r6, [sp, #8]
   1d200:	ldrd	r8, [sp, #16]
   1d204:	ldrd	sl, [sp, #24]
   1d208:	add	sp, sp, #32
   1d20c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d210:	cmp	r4, r7
   1d214:	beq	1d250 <__assert_fail@plt+0xbfa8>
   1d218:	str	sl, [sp, #28]
   1d21c:	mov	r5, sl
   1d220:	b	1d16c <__assert_fail@plt+0xbec4>
   1d224:	mov	r5, sl
   1d228:	mov	r3, #0
   1d22c:	str	r3, [sp, #28]
   1d230:	b	1d30c <__assert_fail@plt+0xc064>
   1d234:	ldr	r2, [r5, #20]
   1d238:	ldr	r1, [sp, #32]
   1d23c:	mov	r0, r5
   1d240:	bl	15154 <__assert_fail@plt+0x3eac>
   1d244:	b	1d318 <__assert_fail@plt+0xc070>
   1d248:	mov	r6, sl
   1d24c:	b	1d18c <__assert_fail@plt+0xbee4>
   1d250:	mov	r6, sl
   1d254:	b	1d18c <__assert_fail@plt+0xbee4>
   1d258:	mov	r6, sl
   1d25c:	b	1d18c <__assert_fail@plt+0xbee4>
   1d260:	cmp	sl, #0
   1d264:	beq	1d1f0 <__assert_fail@plt+0xbf48>
   1d268:	mov	r2, #0
   1d26c:	movw	r1, #31464	; 0x7ae8
   1d270:	movt	r1, #1
   1d274:	mov	r0, sl
   1d278:	bl	15154 <__assert_fail@plt+0x3eac>
   1d27c:	mov	sl, #0
   1d280:	b	1d1f0 <__assert_fail@plt+0xbf48>
   1d284:	mov	sl, r6
   1d288:	ldrb	r5, [r8, #4]
   1d28c:	cmp	r5, #18
   1d290:	movne	r4, #0
   1d294:	moveq	r4, #1
   1d298:	cmp	r5, #11
   1d29c:	cmpne	r5, #23
   1d2a0:	moveq	r3, #1
   1d2a4:	movne	r3, #0
   1d2a8:	sub	r2, r5, #18
   1d2ac:	uxtb	r2, r2
   1d2b0:	cmp	r2, #1
   1d2b4:	orrls	r3, r3, #1
   1d2b8:	cmp	r3, #0
   1d2bc:	beq	1d1f0 <__assert_fail@plt+0xbf48>
   1d2c0:	ldr	r6, [r9, #40]	; 0x28
   1d2c4:	ldrd	r2, [r8]
   1d2c8:	strd	r2, [sp, #128]	; 0x80
   1d2cc:	cmp	r5, #23
   1d2d0:	beq	1cf78 <__assert_fail@plt+0xbcd0>
   1d2d4:	cmp	r5, #19
   1d2d8:	moveq	r7, #1
   1d2dc:	mvnne	r7, #0
   1d2e0:	ldr	r2, [sp, #24]
   1d2e4:	mov	r1, r9
   1d2e8:	mov	r0, r8
   1d2ec:	bl	17964 <__assert_fail@plt+0x66bc>
   1d2f0:	cmp	sl, #0
   1d2f4:	beq	1d258 <__assert_fail@plt+0xbfb0>
   1d2f8:	cmp	r5, #18
   1d2fc:	beq	1d210 <__assert_fail@plt+0xbf68>
   1d300:	mov	r5, sl
   1d304:	mov	r3, #0
   1d308:	str	r3, [sp, #28]
   1d30c:	ldrb	r3, [r5, #24]
   1d310:	cmp	r3, #17
   1d314:	beq	1d234 <__assert_fail@plt+0xbf8c>
   1d318:	cmn	r7, #1
   1d31c:	moveq	r3, #11
   1d320:	movne	r3, #10
   1d324:	mov	r2, #0
   1d328:	mov	r1, r5
   1d32c:	ldr	r0, [sp, #20]
   1d330:	bl	15efc <__assert_fail@plt+0x4c54>
   1d334:	subs	r6, r0, #0
   1d338:	beq	1d180 <__assert_fail@plt+0xbed8>
   1d33c:	add	r4, r4, #2
   1d340:	cmp	r7, r4
   1d344:	blt	1d3a4 <__assert_fail@plt+0xc0fc>
   1d348:	ldr	r1, [sp, #20]
   1d34c:	mov	r0, r5
   1d350:	bl	15e30 <__assert_fail@plt+0x4b88>
   1d354:	mov	r5, r0
   1d358:	mov	r3, #16
   1d35c:	mov	r2, r0
   1d360:	mov	r1, r6
   1d364:	ldr	r6, [sp, #20]
   1d368:	mov	r0, r6
   1d36c:	bl	15efc <__assert_fail@plt+0x4c54>
   1d370:	mov	r1, r0
   1d374:	cmp	r0, #0
   1d378:	cmpne	r5, #0
   1d37c:	beq	1d180 <__assert_fail@plt+0xbed8>
   1d380:	mov	r3, #10
   1d384:	mov	r2, #0
   1d388:	mov	r0, r6
   1d38c:	bl	15efc <__assert_fail@plt+0x4c54>
   1d390:	subs	r6, r0, #0
   1d394:	beq	1d180 <__assert_fail@plt+0xbed8>
   1d398:	add	r4, r4, #1
   1d39c:	cmp	r7, r4
   1d3a0:	bge	1d348 <__assert_fail@plt+0xc0a0>
   1d3a4:	ldr	r3, [sp, #28]
   1d3a8:	cmp	r3, #0
   1d3ac:	beq	1d1a8 <__assert_fail@plt+0xbf00>
   1d3b0:	mov	r3, #16
   1d3b4:	mov	r2, r6
   1d3b8:	ldr	r1, [sp, #28]
   1d3bc:	ldr	r0, [sp, #20]
   1d3c0:	bl	15efc <__assert_fail@plt+0x4c54>
   1d3c4:	mov	r6, r0
   1d3c8:	b	1d18c <__assert_fail@plt+0xbee4>
   1d3cc:	mov	sl, #0
   1d3d0:	b	1d1f0 <__assert_fail@plt+0xbf48>
   1d3d4:	mov	sl, #0
   1d3d8:	b	1d1f0 <__assert_fail@plt+0xbf48>
   1d3dc:	mov	r3, #3
   1d3e0:	strb	r3, [sp, #132]	; 0x84
   1d3e4:	ldr	r3, [sp, #32]
   1d3e8:	str	r3, [sp, #128]	; 0x80
   1d3ec:	add	r3, sp, #128	; 0x80
   1d3f0:	mov	r2, #0
   1d3f4:	mov	r1, r2
   1d3f8:	ldr	r0, [sp, #20]
   1d3fc:	bl	15d60 <__assert_fail@plt+0x4ab8>
   1d400:	subs	r1, r0, #0
   1d404:	beq	1caf0 <__assert_fail@plt+0xb848>
   1d408:	mov	r3, #10
   1d40c:	mov	r2, sl
   1d410:	ldr	r0, [sp, #20]
   1d414:	bl	15efc <__assert_fail@plt+0x4c54>
   1d418:	subs	sl, r0, #0
   1d41c:	bne	1cbe4 <__assert_fail@plt+0xb93c>
   1d420:	b	1caf0 <__assert_fail@plt+0xb848>
   1d424:	ldr	fp, [sp, #204]	; 0xcc
   1d428:	mov	r3, #3
   1d42c:	str	r3, [fp]
   1d430:	b	1c434 <__assert_fail@plt+0xb18c>
   1d434:	ldr	fp, [sp, #204]	; 0xcc
   1d438:	mov	r3, #3
   1d43c:	str	r3, [fp]
   1d440:	b	1c434 <__assert_fail@plt+0xb18c>
   1d444:	mov	r3, #0
   1d448:	ldr	r2, [sp, #204]	; 0xcc
   1d44c:	str	r3, [r2]
   1d450:	b	1c7ac <__assert_fail@plt+0xb504>
   1d454:	ldr	fp, [sp, #204]	; 0xcc
   1d458:	mov	r3, #11
   1d45c:	b	1d468 <__assert_fail@plt+0xc1c0>
   1d460:	ldr	fp, [sp, #204]	; 0xcc
   1d464:	mov	r3, #11
   1d468:	str	r3, [fp]
   1d46c:	b	1c434 <__assert_fail@plt+0xb18c>
   1d470:	ldr	fp, [sp, #204]	; 0xcc
   1d474:	mov	r3, #3
   1d478:	b	1d468 <__assert_fail@plt+0xc1c0>
   1d47c:	ldr	fp, [sp, #204]	; 0xcc
   1d480:	mov	r3, #3
   1d484:	b	1d468 <__assert_fail@plt+0xc1c0>
   1d488:	ldr	fp, [sp, #204]	; 0xcc
   1d48c:	mov	r3, #11
   1d490:	b	1d468 <__assert_fail@plt+0xc1c0>
   1d494:	ldr	r6, [sp, #28]
   1d498:	b	1d1a8 <__assert_fail@plt+0xbf00>
   1d49c:	ldr	r3, [sp, #80]	; 0x50
   1d4a0:	cmp	r3, #3
   1d4a4:	cmpne	r3, #0
   1d4a8:	bne	1c5a0 <__assert_fail@plt+0xb2f8>
   1d4ac:	b	1c5a4 <__assert_fail@plt+0xb2fc>
   1d4b0:	ldr	r0, [sp, #84]	; 0x54
   1d4b4:	bl	11188 <strlen@plt>
   1d4b8:	cmp	r0, #1
   1d4bc:	bls	1c638 <__assert_fail@plt+0xb390>
   1d4c0:	ldr	fp, [sp, #204]	; 0xcc
   1d4c4:	mov	r3, #3
   1d4c8:	b	1d468 <__assert_fail@plt+0xc1c0>
   1d4cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d4d0:	strd	r6, [sp, #8]
   1d4d4:	strd	r8, [sp, #16]
   1d4d8:	strd	sl, [sp, #24]
   1d4dc:	str	lr, [sp, #32]
   1d4e0:	sub	sp, sp, #20
   1d4e4:	mov	fp, r0
   1d4e8:	mov	r9, r1
   1d4ec:	mov	r8, r2
   1d4f0:	mov	sl, r3
   1d4f4:	ldr	r7, [sp, #56]	; 0x38
   1d4f8:	ldr	r6, [sp, #60]	; 0x3c
   1d4fc:	ldr	ip, [r1]
   1d500:	str	ip, [sp, #12]
   1d504:	str	r6, [sp, #4]
   1d508:	str	r7, [sp]
   1d50c:	bl	1c068 <__assert_fail@plt+0xadc0>
   1d510:	ldr	r3, [r6]
   1d514:	mov	r4, r0
   1d518:	clz	r0, r0
   1d51c:	lsr	r0, r0, #5
   1d520:	cmp	r3, #0
   1d524:	moveq	r0, #0
   1d528:	cmp	r0, #0
   1d52c:	beq	1d57c <__assert_fail@plt+0xc2d4>
   1d530:	mov	r4, #0
   1d534:	b	1d630 <__assert_fail@plt+0xc388>
   1d538:	cmp	r4, #0
   1d53c:	beq	1d630 <__assert_fail@plt+0xc388>
   1d540:	mov	r2, #0
   1d544:	movw	r1, #31464	; 0x7ae8
   1d548:	movt	r1, #1
   1d54c:	mov	r0, r4
   1d550:	bl	15154 <__assert_fail@plt+0x3eac>
   1d554:	mov	r4, #0
   1d558:	b	1d630 <__assert_fail@plt+0xc388>
   1d55c:	mov	r3, #16
   1d560:	mov	r2, r5
   1d564:	mov	r1, r4
   1d568:	ldr	r0, [sp, #12]
   1d56c:	bl	15efc <__assert_fail@plt+0x4c54>
   1d570:	cmp	r0, #0
   1d574:	beq	1d5f8 <__assert_fail@plt+0xc350>
   1d578:	mov	r4, r0
   1d57c:	ldrb	r2, [r8, #4]
   1d580:	and	r3, r2, #247	; 0xf7
   1d584:	cmp	r3, #2
   1d588:	beq	1d630 <__assert_fail@plt+0xc388>
   1d58c:	clz	r3, r7
   1d590:	lsr	r3, r3, #5
   1d594:	cmp	r2, #9
   1d598:	orrne	r3, r3, #1
   1d59c:	cmp	r3, #0
   1d5a0:	beq	1d630 <__assert_fail@plt+0xc388>
   1d5a4:	str	r6, [sp, #4]
   1d5a8:	str	r7, [sp]
   1d5ac:	mov	r3, sl
   1d5b0:	mov	r2, r8
   1d5b4:	mov	r1, r9
   1d5b8:	mov	r0, fp
   1d5bc:	bl	1c068 <__assert_fail@plt+0xadc0>
   1d5c0:	ldr	r3, [r6]
   1d5c4:	mov	r5, r0
   1d5c8:	clz	r0, r0
   1d5cc:	lsr	r0, r0, #5
   1d5d0:	cmp	r3, #0
   1d5d4:	moveq	r0, #0
   1d5d8:	cmp	r0, #0
   1d5dc:	bne	1d538 <__assert_fail@plt+0xc290>
   1d5e0:	cmp	r4, #0
   1d5e4:	cmpne	r5, #0
   1d5e8:	bne	1d55c <__assert_fail@plt+0xc2b4>
   1d5ec:	cmp	r4, #0
   1d5f0:	moveq	r4, r5
   1d5f4:	b	1d57c <__assert_fail@plt+0xc2d4>
   1d5f8:	mov	fp, r0
   1d5fc:	movw	r7, #31464	; 0x7ae8
   1d600:	movt	r7, #1
   1d604:	mov	r2, #0
   1d608:	mov	r1, r7
   1d60c:	mov	r0, r5
   1d610:	bl	15154 <__assert_fail@plt+0x3eac>
   1d614:	mov	r2, #0
   1d618:	mov	r1, r7
   1d61c:	mov	r0, r4
   1d620:	bl	15154 <__assert_fail@plt+0x3eac>
   1d624:	mov	r3, #12
   1d628:	str	r3, [r6]
   1d62c:	mov	r4, fp
   1d630:	mov	r0, r4
   1d634:	add	sp, sp, #20
   1d638:	ldrd	r4, [sp]
   1d63c:	ldrd	r6, [sp, #8]
   1d640:	ldrd	r8, [sp, #16]
   1d644:	ldrd	sl, [sp, #24]
   1d648:	add	sp, sp, #32
   1d64c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d650:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d654:	strd	r6, [sp, #8]
   1d658:	strd	r8, [sp, #16]
   1d65c:	strd	sl, [sp, #24]
   1d660:	str	lr, [sp, #32]
   1d664:	sub	sp, sp, #28
   1d668:	str	r0, [sp, #12]
   1d66c:	str	r1, [sp, #16]
   1d670:	mov	r4, r2
   1d674:	mov	r9, r3
   1d678:	str	r3, [sp, #20]
   1d67c:	ldr	r8, [sp, #64]	; 0x40
   1d680:	ldr	r7, [sp, #68]	; 0x44
   1d684:	ldr	r5, [r1]
   1d688:	ldr	fp, [r5, #84]	; 0x54
   1d68c:	str	r7, [sp, #4]
   1d690:	str	r8, [sp]
   1d694:	bl	1d4cc <__assert_fail@plt+0xc224>
   1d698:	ldr	r3, [r7]
   1d69c:	mov	r6, r0
   1d6a0:	clz	r0, r0
   1d6a4:	lsr	r0, r0, #5
   1d6a8:	cmp	r3, #0
   1d6ac:	moveq	r0, #0
   1d6b0:	cmp	r0, #0
   1d6b4:	bne	1d7c8 <__assert_fail@plt+0xc520>
   1d6b8:	orr	r9, r9, #8388608	; 0x800000
   1d6bc:	b	1d700 <__assert_fail@plt+0xc458>
   1d6c0:	cmp	r6, #0
   1d6c4:	beq	1d7a8 <__assert_fail@plt+0xc500>
   1d6c8:	mov	r2, #0
   1d6cc:	movw	r1, #31464	; 0x7ae8
   1d6d0:	movt	r1, #1
   1d6d4:	mov	r0, r6
   1d6d8:	bl	15154 <__assert_fail@plt+0x3eac>
   1d6dc:	mov	r6, #0
   1d6e0:	b	1d7a8 <__assert_fail@plt+0xc500>
   1d6e4:	mov	r2, #0
   1d6e8:	mov	r3, #10
   1d6ec:	mov	r1, r6
   1d6f0:	mov	r0, r5
   1d6f4:	bl	15efc <__assert_fail@plt+0x4c54>
   1d6f8:	subs	r6, r0, #0
   1d6fc:	beq	1d7a0 <__assert_fail@plt+0xc4f8>
   1d700:	ldrb	r3, [r4, #4]
   1d704:	cmp	r3, #10
   1d708:	bne	1d7a8 <__assert_fail@plt+0xc500>
   1d70c:	mov	r2, r9
   1d710:	ldr	r1, [sp, #12]
   1d714:	mov	r0, r4
   1d718:	bl	17964 <__assert_fail@plt+0x66bc>
   1d71c:	ldrb	r2, [r4, #4]
   1d720:	and	r3, r2, #247	; 0xf7
   1d724:	cmp	r3, #2
   1d728:	beq	1d6e4 <__assert_fail@plt+0xc43c>
   1d72c:	clz	r3, r8
   1d730:	lsr	r3, r3, #5
   1d734:	cmp	r2, #9
   1d738:	orrne	r3, r3, #1
   1d73c:	cmp	r3, #0
   1d740:	beq	1d798 <__assert_fail@plt+0xc4f0>
   1d744:	ldr	sl, [r5, #84]	; 0x54
   1d748:	str	fp, [r5, #84]	; 0x54
   1d74c:	str	r7, [sp, #4]
   1d750:	str	r8, [sp]
   1d754:	ldr	r3, [sp, #20]
   1d758:	mov	r2, r4
   1d75c:	ldr	r1, [sp, #16]
   1d760:	ldr	r0, [sp, #12]
   1d764:	bl	1d4cc <__assert_fail@plt+0xc224>
   1d768:	ldr	r3, [r7]
   1d76c:	mov	r2, r0
   1d770:	clz	r0, r0
   1d774:	lsr	r0, r0, #5
   1d778:	cmp	r3, #0
   1d77c:	moveq	r0, #0
   1d780:	cmp	r0, #0
   1d784:	bne	1d6c0 <__assert_fail@plt+0xc418>
   1d788:	ldr	r3, [r5, #84]	; 0x54
   1d78c:	orr	sl, r3, sl
   1d790:	str	sl, [r5, #84]	; 0x54
   1d794:	b	1d6e8 <__assert_fail@plt+0xc440>
   1d798:	mov	r2, #0
   1d79c:	b	1d6e8 <__assert_fail@plt+0xc440>
   1d7a0:	mov	r3, #12
   1d7a4:	str	r3, [r7]
   1d7a8:	mov	r0, r6
   1d7ac:	add	sp, sp, #28
   1d7b0:	ldrd	r4, [sp]
   1d7b4:	ldrd	r6, [sp, #8]
   1d7b8:	ldrd	r8, [sp, #16]
   1d7bc:	ldrd	sl, [sp, #24]
   1d7c0:	add	sp, sp, #32
   1d7c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d7c8:	mov	r6, #0
   1d7cc:	b	1d7a8 <__assert_fail@plt+0xc500>
   1d7d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d7d4:	strd	r6, [sp, #8]
   1d7d8:	strd	r8, [sp, #16]
   1d7dc:	strd	sl, [sp, #24]
   1d7e0:	str	lr, [sp, #32]
   1d7e4:	sub	sp, sp, #4
   1d7e8:	mov	r3, #0
   1d7ec:	str	r3, [r0]
   1d7f0:	ldr	lr, [r2, #4]
   1d7f4:	cmp	lr, r3
   1d7f8:	beq	1d9f4 <__assert_fail@plt+0xc74c>
   1d7fc:	mov	r6, lr
   1d800:	ble	1d81c <__assert_fail@plt+0xc574>
   1d804:	ldr	r3, [r2, #8]
   1d808:	add	lr, r3, lr, lsl #2
   1d80c:	ldr	ip, [r3], #4
   1d810:	add	r6, r6, ip
   1d814:	cmp	r3, lr
   1d818:	bne	1d80c <__assert_fail@plt+0xc564>
   1d81c:	mov	fp, r2
   1d820:	mov	r9, r1
   1d824:	mov	sl, r0
   1d828:	ldr	r3, [r1, #68]	; 0x44
   1d82c:	and	r3, r3, r6
   1d830:	add	r3, r3, r3, lsl #1
   1d834:	lsl	r3, r3, #2
   1d838:	ldr	r2, [r1, #32]
   1d83c:	add	r1, r2, r3
   1d840:	ldr	r8, [r2, r3]
   1d844:	cmp	r8, #0
   1d848:	ble	1d890 <__assert_fail@plt+0xc5e8>
   1d84c:	ldr	r7, [r1, #8]
   1d850:	sub	r7, r7, #4
   1d854:	mov	r5, #0
   1d858:	b	1d868 <__assert_fail@plt+0xc5c0>
   1d85c:	add	r5, r5, #1
   1d860:	cmp	r8, r5
   1d864:	beq	1d890 <__assert_fail@plt+0xc5e8>
   1d868:	ldr	r4, [r7, #4]!
   1d86c:	ldr	r3, [r4]
   1d870:	cmp	r6, r3
   1d874:	bne	1d85c <__assert_fail@plt+0xc5b4>
   1d878:	mov	r1, fp
   1d87c:	add	r0, r4, #4
   1d880:	bl	15004 <__assert_fail@plt+0x3d5c>
   1d884:	cmp	r0, #0
   1d888:	beq	1d85c <__assert_fail@plt+0xc5b4>
   1d88c:	b	1d9c8 <__assert_fail@plt+0xc720>
   1d890:	mov	r1, #1
   1d894:	mov	r0, #56	; 0x38
   1d898:	bl	23cd4 <__assert_fail@plt+0x12a2c>
   1d89c:	subs	r4, r0, #0
   1d8a0:	beq	1d8ec <__assert_fail@plt+0xc644>
   1d8a4:	add	r5, r4, #4
   1d8a8:	mov	r1, fp
   1d8ac:	mov	r0, r5
   1d8b0:	bl	16658 <__assert_fail@plt+0x53b0>
   1d8b4:	cmp	r0, #0
   1d8b8:	bne	1d8e4 <__assert_fail@plt+0xc63c>
   1d8bc:	str	r5, [r4, #40]	; 0x28
   1d8c0:	ldr	lr, [fp, #4]
   1d8c4:	cmp	lr, #0
   1d8c8:	ble	1d9b0 <__assert_fail@plt+0xc708>
   1d8cc:	ldr	r5, [r9]
   1d8d0:	ldr	r1, [fp, #8]
   1d8d4:	add	lr, r1, lr, lsl #2
   1d8d8:	mov	r7, #65280	; 0xff00
   1d8dc:	movt	r7, #3
   1d8e0:	b	1d948 <__assert_fail@plt+0xc6a0>
   1d8e4:	mov	r0, r4
   1d8e8:	bl	23f40 <__assert_fail@plt+0x12c98>
   1d8ec:	mov	r3, #12
   1d8f0:	str	r3, [sl]
   1d8f4:	mov	r4, #0
   1d8f8:	b	1d9c8 <__assert_fail@plt+0xc720>
   1d8fc:	ldr	r2, [r3, #4]
   1d900:	tst	r7, r2
   1d904:	beq	1d940 <__assert_fail@plt+0xc698>
   1d908:	ldrb	r2, [r4, #52]	; 0x34
   1d90c:	ubfx	r0, r2, #5, #1
   1d910:	ldrb	ip, [r3, #6]
   1d914:	ubfx	ip, ip, #4, #1
   1d918:	orr	r0, r0, ip
   1d91c:	bfi	r2, r0, #5, #1
   1d920:	strb	r2, [r4, #52]	; 0x34
   1d924:	ldr	r3, [r3, #4]
   1d928:	tst	r7, r3
   1d92c:	beq	1d940 <__assert_fail@plt+0xc698>
   1d930:	b	1d9a0 <__assert_fail@plt+0xc6f8>
   1d934:	uxtb	r3, r2
   1d938:	orr	r3, r3, #16
   1d93c:	strb	r3, [r4, #52]	; 0x34
   1d940:	cmp	r1, lr
   1d944:	beq	1d9b0 <__assert_fail@plt+0xc708>
   1d948:	ldr	r3, [r1], #4
   1d94c:	add	r3, r5, r3, lsl #3
   1d950:	ldrb	r0, [r3, #4]
   1d954:	cmp	r0, #1
   1d958:	beq	1d8fc <__assert_fail@plt+0xc654>
   1d95c:	ldrb	r2, [r4, #52]	; 0x34
   1d960:	ubfx	ip, r2, #5, #1
   1d964:	ldrb	r8, [r3, #6]
   1d968:	ubfx	r8, r8, #4, #1
   1d96c:	orr	ip, ip, r8
   1d970:	bfi	r2, ip, #5, #1
   1d974:	strb	r2, [r4, #52]	; 0x34
   1d978:	cmp	r0, #2
   1d97c:	beq	1d934 <__assert_fail@plt+0xc68c>
   1d980:	cmp	r0, #4
   1d984:	bne	1d998 <__assert_fail@plt+0xc6f0>
   1d988:	ldrb	r3, [r4, #52]	; 0x34
   1d98c:	orr	r3, r3, #64	; 0x40
   1d990:	strb	r3, [r4, #52]	; 0x34
   1d994:	b	1d940 <__assert_fail@plt+0xc698>
   1d998:	cmp	r0, #12
   1d99c:	bne	1d924 <__assert_fail@plt+0xc67c>
   1d9a0:	ldrb	r3, [r4, #52]	; 0x34
   1d9a4:	orr	r3, r3, #128	; 0x80
   1d9a8:	strb	r3, [r4, #52]	; 0x34
   1d9ac:	b	1d940 <__assert_fail@plt+0xc698>
   1d9b0:	mov	r2, r6
   1d9b4:	mov	r1, r4
   1d9b8:	mov	r0, r9
   1d9bc:	bl	161c8 <__assert_fail@plt+0x4f20>
   1d9c0:	cmp	r0, #0
   1d9c4:	bne	1d9e8 <__assert_fail@plt+0xc740>
   1d9c8:	mov	r0, r4
   1d9cc:	add	sp, sp, #4
   1d9d0:	ldrd	r4, [sp]
   1d9d4:	ldrd	r6, [sp, #8]
   1d9d8:	ldrd	r8, [sp, #16]
   1d9dc:	ldrd	sl, [sp, #24]
   1d9e0:	add	sp, sp, #32
   1d9e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d9e8:	mov	r0, r4
   1d9ec:	bl	17e4c <__assert_fail@plt+0x6ba4>
   1d9f0:	b	1d8ec <__assert_fail@plt+0xc644>
   1d9f4:	mov	r4, #0
   1d9f8:	b	1d9c8 <__assert_fail@plt+0xc720>
   1d9fc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1da00:	strd	r6, [sp, #8]
   1da04:	strd	r8, [sp, #16]
   1da08:	str	lr, [sp, #24]
   1da0c:	sub	sp, sp, #20
   1da10:	subs	r8, r3, #0
   1da14:	ble	1dac0 <__assert_fail@plt+0xc818>
   1da18:	mov	r7, r2
   1da1c:	mov	r9, r0
   1da20:	sub	r4, r1, #4
   1da24:	mov	r5, #0
   1da28:	b	1da40 <__assert_fail@plt+0xc798>
   1da2c:	ldr	r3, [r7, r5, lsl #2]
   1da30:	str	r3, [r4]
   1da34:	add	r5, r5, #1
   1da38:	cmp	r8, r5
   1da3c:	beq	1daa4 <__assert_fail@plt+0xc7fc>
   1da40:	add	r4, r4, #4
   1da44:	ldr	r1, [r4]
   1da48:	cmp	r1, #0
   1da4c:	beq	1da2c <__assert_fail@plt+0xc784>
   1da50:	ldr	r2, [r7, r5, lsl #2]
   1da54:	cmp	r2, #0
   1da58:	beq	1da34 <__assert_fail@plt+0xc78c>
   1da5c:	add	r2, r2, #4
   1da60:	add	r1, r1, #4
   1da64:	mov	r0, sp
   1da68:	bl	166e0 <__assert_fail@plt+0x5438>
   1da6c:	str	r0, [sp, #12]
   1da70:	cmp	r0, #0
   1da74:	bne	1daa8 <__assert_fail@plt+0xc800>
   1da78:	mov	r2, sp
   1da7c:	mov	r1, r9
   1da80:	add	r0, sp, #12
   1da84:	bl	1d7d0 <__assert_fail@plt+0xc528>
   1da88:	str	r0, [r4]
   1da8c:	ldr	r0, [sp, #8]
   1da90:	bl	23f40 <__assert_fail@plt+0x12c98>
   1da94:	ldr	r0, [sp, #12]
   1da98:	cmp	r0, #0
   1da9c:	beq	1da34 <__assert_fail@plt+0xc78c>
   1daa0:	b	1daa8 <__assert_fail@plt+0xc800>
   1daa4:	mov	r0, #0
   1daa8:	add	sp, sp, #20
   1daac:	ldrd	r4, [sp]
   1dab0:	ldrd	r6, [sp, #8]
   1dab4:	ldrd	r8, [sp, #16]
   1dab8:	add	sp, sp, #24
   1dabc:	pop	{pc}		; (ldr pc, [sp], #4)
   1dac0:	mov	r0, #0
   1dac4:	b	1daa8 <__assert_fail@plt+0xc800>
   1dac8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1dacc:	strd	r6, [sp, #8]
   1dad0:	strd	r8, [sp, #16]
   1dad4:	strd	sl, [sp, #24]
   1dad8:	str	lr, [sp, #32]
   1dadc:	sub	sp, sp, #28
   1dae0:	mov	r8, r0
   1dae4:	str	r1, [sp]
   1dae8:	mov	r7, r2
   1daec:	str	r3, [sp, #4]
   1daf0:	mov	r1, r2
   1daf4:	bl	15a64 <__assert_fail@plt+0x47bc>
   1daf8:	cmn	r0, #1
   1dafc:	moveq	r0, #0
   1db00:	beq	1dcd0 <__assert_fail@plt+0xca28>
   1db04:	ldr	r9, [r8, #84]	; 0x54
   1db08:	add	r0, r0, #1
   1db0c:	add	r0, r0, r0, lsl #1
   1db10:	lsl	fp, r0, #3
   1db14:	b	1db94 <__assert_fail@plt+0xc8ec>
   1db18:	ldr	r3, [r9, #20]
   1db1c:	add	r6, r6, r6, lsl #1
   1db20:	add	r6, r3, r6, lsl #2
   1db24:	ldr	r3, [r6, #8]
   1db28:	ldr	r5, [r3]
   1db2c:	mov	r1, r5
   1db30:	ldr	r6, [sp]
   1db34:	mov	r0, r6
   1db38:	bl	1506c <__assert_fail@plt+0x3dc4>
   1db3c:	cmp	r0, #0
   1db40:	bne	1dc00 <__assert_fail@plt+0xc958>
   1db44:	mov	r1, r5
   1db48:	add	r0, sp, #8
   1db4c:	bl	16134 <__assert_fail@plt+0x4e8c>
   1db50:	str	r0, [sp, #20]
   1db54:	ldr	r3, [sp, #64]	; 0x40
   1db58:	ldr	r2, [sp, #4]
   1db5c:	add	r1, sp, #8
   1db60:	mov	r0, r9
   1db64:	bl	194d8 <__assert_fail@plt+0x8230>
   1db68:	mov	r4, r0
   1db6c:	add	r1, sp, #8
   1db70:	mov	r0, r6
   1db74:	bl	18c8c <__assert_fail@plt+0x79e4>
   1db78:	mov	r5, r0
   1db7c:	ldr	r0, [sp, #16]
   1db80:	bl	23f40 <__assert_fail@plt+0x12c98>
   1db84:	ldr	r0, [sp, #20]
   1db88:	orr	r3, r4, r5
   1db8c:	orrs	r3, r3, r0
   1db90:	bne	1dba0 <__assert_fail@plt+0xc8f8>
   1db94:	ldr	r4, [r8, #116]	; 0x74
   1db98:	add	r4, r4, fp
   1db9c:	b	1dc10 <__assert_fail@plt+0xc968>
   1dba0:	cmp	r0, #0
   1dba4:	bne	1dcd0 <__assert_fail@plt+0xca28>
   1dba8:	cmp	r4, #0
   1dbac:	movne	r0, r4
   1dbb0:	moveq	r0, r5
   1dbb4:	b	1dcd0 <__assert_fail@plt+0xca28>
   1dbb8:	mov	r1, sl
   1dbbc:	add	r0, sp, #8
   1dbc0:	bl	16134 <__assert_fail@plt+0x4e8c>
   1dbc4:	str	r0, [sp, #20]
   1dbc8:	cmp	r0, #0
   1dbcc:	bne	1dcd0 <__assert_fail@plt+0xca28>
   1dbd0:	ldr	r6, [r8, #100]	; 0x64
   1dbd4:	add	r2, sp, #8
   1dbd8:	mov	r1, r9
   1dbdc:	add	r0, sp, #20
   1dbe0:	bl	1d7d0 <__assert_fail@plt+0xc528>
   1dbe4:	str	r0, [r6, r5, lsl #2]
   1dbe8:	ldr	r0, [sp, #16]
   1dbec:	bl	23f40 <__assert_fail@plt+0x12c98>
   1dbf0:	ldr	r3, [r8, #100]	; 0x64
   1dbf4:	ldr	r3, [r3, r5, lsl #2]
   1dbf8:	cmp	r3, #0
   1dbfc:	beq	1dcbc <__assert_fail@plt+0xca14>
   1dc00:	add	r4, r4, #24
   1dc04:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1dc08:	cmp	r3, #0
   1dc0c:	beq	1dccc <__assert_fail@plt+0xca24>
   1dc10:	ldr	r6, [r4, #-24]	; 0xffffffe8
   1dc14:	mov	r1, r6
   1dc18:	ldr	r0, [sp]
   1dc1c:	bl	1506c <__assert_fail@plt+0x3dc4>
   1dc20:	cmp	r0, #0
   1dc24:	beq	1dc00 <__assert_fail@plt+0xc958>
   1dc28:	ldr	r5, [r4, #-12]
   1dc2c:	add	r5, r7, r5
   1dc30:	ldr	r3, [r4, #-16]
   1dc34:	sub	r5, r5, r3
   1dc38:	cmp	r7, r5
   1dc3c:	beq	1db18 <__assert_fail@plt+0xc870>
   1dc40:	ldr	r3, [r9, #12]
   1dc44:	ldr	sl, [r3, r6, lsl #2]
   1dc48:	ldr	r3, [r8, #100]	; 0x64
   1dc4c:	ldr	r6, [r3, r5, lsl #2]
   1dc50:	cmp	r6, #0
   1dc54:	beq	1dbb8 <__assert_fail@plt+0xc910>
   1dc58:	add	r6, r6, #4
   1dc5c:	mov	r1, sl
   1dc60:	mov	r0, r6
   1dc64:	bl	1506c <__assert_fail@plt+0x3dc4>
   1dc68:	cmp	r0, #0
   1dc6c:	bne	1dc00 <__assert_fail@plt+0xc958>
   1dc70:	mov	r1, r6
   1dc74:	add	r0, sp, #8
   1dc78:	bl	16658 <__assert_fail@plt+0x53b0>
   1dc7c:	str	r0, [sp, #20]
   1dc80:	mov	r1, sl
   1dc84:	add	r0, sp, #8
   1dc88:	bl	186f4 <__assert_fail@plt+0x744c>
   1dc8c:	eor	r0, r0, #1
   1dc90:	ldr	r3, [sp, #20]
   1dc94:	cmp	r3, #0
   1dc98:	orrne	r0, r0, #1
   1dc9c:	tst	r0, #255	; 0xff
   1dca0:	beq	1dbd0 <__assert_fail@plt+0xc928>
   1dca4:	ldr	r0, [sp, #16]
   1dca8:	bl	23f40 <__assert_fail@plt+0x12c98>
   1dcac:	ldr	r0, [sp, #20]
   1dcb0:	cmp	r0, #0
   1dcb4:	moveq	r0, #12
   1dcb8:	b	1dcd0 <__assert_fail@plt+0xca28>
   1dcbc:	ldr	r0, [sp, #20]
   1dcc0:	cmp	r0, #0
   1dcc4:	beq	1dc00 <__assert_fail@plt+0xc958>
   1dcc8:	b	1dcd0 <__assert_fail@plt+0xca28>
   1dccc:	mov	r0, #0
   1dcd0:	add	sp, sp, #28
   1dcd4:	ldrd	r4, [sp]
   1dcd8:	ldrd	r6, [sp, #8]
   1dcdc:	ldrd	r8, [sp, #16]
   1dce0:	ldrd	sl, [sp, #24]
   1dce4:	add	sp, sp, #32
   1dce8:	pop	{pc}		; (ldr pc, [sp], #4)
   1dcec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1dcf0:	strd	r6, [sp, #8]
   1dcf4:	strd	r8, [sp, #16]
   1dcf8:	strd	sl, [sp, #24]
   1dcfc:	str	lr, [sp, #32]
   1dd00:	sub	sp, sp, #84	; 0x54
   1dd04:	mov	r4, r0
   1dd08:	str	r1, [sp, #32]
   1dd0c:	mov	r7, r2
   1dd10:	mov	r6, r3
   1dd14:	ldr	r3, [r0, #84]	; 0x54
   1dd18:	mov	r2, r3
   1dd1c:	str	r3, [sp, #24]
   1dd20:	mov	r3, #0
   1dd24:	str	r3, [sp, #76]	; 0x4c
   1dd28:	ldr	r3, [r2]
   1dd2c:	ldr	r3, [r3, r7, lsl #3]
   1dd30:	str	r3, [sp, #28]
   1dd34:	ldr	r5, [r0, #120]	; 0x78
   1dd38:	ldr	r3, [sp, #124]	; 0x7c
   1dd3c:	add	r5, r3, r5
   1dd40:	ldr	r8, [r1, #4]
   1dd44:	cmp	r5, r8
   1dd48:	bge	1de98 <__assert_fail@plt+0xcbf0>
   1dd4c:	ldr	r3, [sp, #32]
   1dd50:	ldr	r5, [r3]
   1dd54:	cmp	r5, #0
   1dd58:	beq	1e2c4 <__assert_fail@plt+0xd01c>
   1dd5c:	ldr	r2, [r4, #100]	; 0x64
   1dd60:	str	r2, [sp, #40]	; 0x28
   1dd64:	ldr	r2, [r4, #40]	; 0x28
   1dd68:	str	r2, [sp, #44]	; 0x2c
   1dd6c:	ldr	r9, [r3, #8]
   1dd70:	str	r9, [r4, #100]	; 0x64
   1dd74:	str	r5, [r4, #40]	; 0x28
   1dd78:	str	r4, [sp, #12]
   1dd7c:	ldr	r2, [r4, #88]	; 0x58
   1dd80:	sub	r1, r5, #1
   1dd84:	mov	r0, r4
   1dd88:	bl	1908c <__assert_fail@plt+0x7de4>
   1dd8c:	mov	r8, r0
   1dd90:	cmp	r5, r6
   1dd94:	beq	1e2fc <__assert_fail@plt+0xd054>
   1dd98:	ldr	sl, [r9, r5, lsl #2]
   1dd9c:	cmp	sl, #0
   1dda0:	beq	1e348 <__assert_fail@plt+0xd0a0>
   1dda4:	ldrb	r3, [sl, #52]	; 0x34
   1dda8:	tst	r3, #64	; 0x40
   1ddac:	bne	1def0 <__assert_fail@plt+0xcc48>
   1ddb0:	mov	r3, #0
   1ddb4:	str	r3, [sp, #64]	; 0x40
   1ddb8:	str	r3, [sp, #68]	; 0x44
   1ddbc:	str	r3, [sp, #72]	; 0x48
   1ddc0:	ldrb	r3, [sl, #52]	; 0x34
   1ddc4:	tst	r3, #64	; 0x40
   1ddc8:	beq	1de24 <__assert_fail@plt+0xcb7c>
   1ddcc:	ldr	r3, [sp, #68]	; 0x44
   1ddd0:	cmp	r3, #0
   1ddd4:	beq	1de00 <__assert_fail@plt+0xcb58>
   1ddd8:	ldr	r3, [sp, #128]	; 0x80
   1dddc:	str	r3, [sp]
   1dde0:	ldr	r3, [sp, #28]
   1dde4:	mov	r2, r5
   1dde8:	add	r1, sp, #64	; 0x40
   1ddec:	mov	r0, r4
   1ddf0:	bl	1dac8 <__assert_fail@plt+0xc820>
   1ddf4:	str	r0, [sp, #76]	; 0x4c
   1ddf8:	cmp	r0, #0
   1ddfc:	bne	1df0c <__assert_fail@plt+0xcc64>
   1de00:	mov	r3, r8
   1de04:	add	r2, sp, #64	; 0x40
   1de08:	ldr	r1, [sp, #24]
   1de0c:	add	r0, sp, #76	; 0x4c
   1de10:	bl	17eb4 <__assert_fail@plt+0x6c0c>
   1de14:	subs	sl, r0, #0
   1de18:	beq	1df1c <__assert_fail@plt+0xcc74>
   1de1c:	ldr	r3, [r4, #100]	; 0x64
   1de20:	str	sl, [r3, r5, lsl #2]
   1de24:	ldr	r3, [sp, #124]	; 0x7c
   1de28:	cmp	r3, r5
   1de2c:	ble	1de4c <__assert_fail@plt+0xcba4>
   1de30:	ldr	r3, [r4, #120]	; 0x78
   1de34:	cmp	r3, #0
   1de38:	addge	r7, r5, #1
   1de3c:	movge	r3, #0
   1de40:	strge	r3, [sp, #16]
   1de44:	movge	r9, r3
   1de48:	bge	1e130 <__assert_fail@plt+0xce88>
   1de4c:	ldr	r0, [sp, #72]	; 0x48
   1de50:	bl	23f40 <__assert_fail@plt+0x12c98>
   1de54:	ldr	r3, [r4, #100]	; 0x64
   1de58:	ldr	r2, [sp, #124]	; 0x7c
   1de5c:	ldr	r0, [r3, r2, lsl #2]
   1de60:	cmp	r0, #0
   1de64:	beq	1e294 <__assert_fail@plt+0xcfec>
   1de68:	ldr	r3, [sp, #32]
   1de6c:	str	r5, [r3]
   1de70:	ldr	r3, [sp, #40]	; 0x28
   1de74:	str	r3, [r4, #100]	; 0x64
   1de78:	ldr	r3, [sp, #44]	; 0x2c
   1de7c:	str	r3, [r4, #40]	; 0x28
   1de80:	ldr	r1, [sp, #120]	; 0x78
   1de84:	add	r0, r0, #4
   1de88:	bl	1506c <__assert_fail@plt+0x3dc4>
   1de8c:	clz	r0, r0
   1de90:	lsr	r0, r0, #5
   1de94:	b	1df44 <__assert_fail@plt+0xcc9c>
   1de98:	add	r5, r5, #1
   1de9c:	movw	r3, #65535	; 0xffff
   1dea0:	movt	r3, #32767	; 0x7fff
   1dea4:	sub	r3, r3, r8
   1dea8:	cmp	r3, r5
   1deac:	blt	1e27c <__assert_fail@plt+0xcfd4>
   1deb0:	add	r9, r8, r5
   1deb4:	cmn	r9, #-1073741823	; 0xc0000001
   1deb8:	bhi	1e284 <__assert_fail@plt+0xcfdc>
   1debc:	lsl	r1, r9, #2
   1dec0:	ldr	sl, [sp, #32]
   1dec4:	ldr	r0, [sl, #8]
   1dec8:	bl	23d84 <__assert_fail@plt+0x12adc>
   1decc:	cmp	r0, #0
   1ded0:	beq	1e28c <__assert_fail@plt+0xcfe4>
   1ded4:	str	r0, [sl, #8]
   1ded8:	str	r9, [sl, #4]
   1dedc:	lsl	r2, r5, #2
   1dee0:	mov	r1, #0
   1dee4:	add	r0, r0, r8, lsl #2
   1dee8:	bl	111c4 <memset@plt>
   1deec:	b	1dd4c <__assert_fail@plt+0xcaa4>
   1def0:	add	r1, sl, #4
   1def4:	add	r0, sp, #64	; 0x40
   1def8:	bl	16658 <__assert_fail@plt+0x53b0>
   1defc:	str	r0, [sp, #76]	; 0x4c
   1df00:	cmp	r0, #0
   1df04:	beq	1ddc0 <__assert_fail@plt+0xcb18>
   1df08:	b	1df44 <__assert_fail@plt+0xcc9c>
   1df0c:	ldr	r0, [sp, #72]	; 0x48
   1df10:	bl	23f40 <__assert_fail@plt+0x12c98>
   1df14:	ldr	r0, [sp, #76]	; 0x4c
   1df18:	b	1df44 <__assert_fail@plt+0xcc9c>
   1df1c:	ldr	r3, [sp, #76]	; 0x4c
   1df20:	cmp	r3, #0
   1df24:	beq	1de1c <__assert_fail@plt+0xcb74>
   1df28:	ldr	r0, [sp, #72]	; 0x48
   1df2c:	bl	23f40 <__assert_fail@plt+0x12c98>
   1df30:	ldr	r0, [sp, #76]	; 0x4c
   1df34:	b	1df44 <__assert_fail@plt+0xcc9c>
   1df38:	ldr	r0, [sp, #72]	; 0x48
   1df3c:	bl	23f40 <__assert_fail@plt+0x12c98>
   1df40:	ldr	r0, [sp, #76]	; 0x4c
   1df44:	add	sp, sp, #84	; 0x54
   1df48:	ldrd	r4, [sp]
   1df4c:	ldrd	r6, [sp, #8]
   1df50:	ldrd	r8, [sp, #16]
   1df54:	ldrd	sl, [sp, #24]
   1df58:	add	sp, sp, #32
   1df5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1df60:	ldr	r5, [sp, #8]
   1df64:	mov	r3, r5
   1df68:	ldr	r2, [sp, #12]
   1df6c:	mov	r0, r6
   1df70:	bl	1a4a8 <__assert_fail@plt+0x9200>
   1df74:	cmp	r0, #1
   1df78:	ble	1e1e4 <__assert_fail@plt+0xcf3c>
   1df7c:	ldr	r3, [r6, #12]
   1df80:	ldr	fp, [r3, r7, lsl #2]
   1df84:	add	r5, r5, r0
   1df88:	ldr	r3, [r4, #100]	; 0x64
   1df8c:	ldr	r1, [r3, r5, lsl #2]
   1df90:	str	r9, [sp, #56]	; 0x38
   1df94:	cmp	r1, #0
   1df98:	beq	1dfb4 <__assert_fail@plt+0xcd0c>
   1df9c:	add	r1, r1, #4
   1dfa0:	add	r0, sp, #52	; 0x34
   1dfa4:	bl	18c8c <__assert_fail@plt+0x79e4>
   1dfa8:	str	r0, [sp, #48]	; 0x30
   1dfac:	cmp	r0, #0
   1dfb0:	bne	1e05c <__assert_fail@plt+0xcdb4>
   1dfb4:	mov	r1, fp
   1dfb8:	add	r0, sp, #52	; 0x34
   1dfbc:	bl	186f4 <__assert_fail@plt+0x744c>
   1dfc0:	cmp	r0, #0
   1dfc4:	beq	1e1b8 <__assert_fail@plt+0xcf10>
   1dfc8:	ldr	fp, [r4, #100]	; 0x64
   1dfcc:	add	r2, sp, #52	; 0x34
   1dfd0:	mov	r1, r6
   1dfd4:	add	r0, sp, #48	; 0x30
   1dfd8:	bl	1d7d0 <__assert_fail@plt+0xc528>
   1dfdc:	str	r0, [fp, r5, lsl #2]
   1dfe0:	ldr	r3, [r4, #100]	; 0x64
   1dfe4:	ldr	r3, [r3, r5, lsl #2]
   1dfe8:	cmp	r3, #0
   1dfec:	beq	1e1c4 <__assert_fail@plt+0xcf1c>
   1dff0:	ldr	r3, [r6, #12]
   1dff4:	ldr	r1, [r3, r7, lsl #2]
   1dff8:	add	r0, sp, #64	; 0x40
   1dffc:	bl	186f4 <__assert_fail@plt+0x744c>
   1e000:	cmp	r0, #0
   1e004:	beq	1e1f0 <__assert_fail@plt+0xcf48>
   1e008:	add	r8, r8, #1
   1e00c:	ldr	r3, [sl, #20]
   1e010:	cmp	r8, r3
   1e014:	bge	1e210 <__assert_fail@plt+0xcf68>
   1e018:	ldr	r3, [sl, #24]
   1e01c:	ldr	r1, [r3, r8, lsl #2]
   1e020:	mov	r7, r1
   1e024:	lsl	fp, r1, #3
   1e028:	ldr	r3, [r6]
   1e02c:	add	r3, r3, fp
   1e030:	ldrb	r3, [r3, #6]
   1e034:	tst	r3, #16
   1e038:	bne	1df60 <__assert_fail@plt+0xccb8>
   1e03c:	ldr	r1, [r6]
   1e040:	ldr	r2, [sp, #8]
   1e044:	add	r1, r1, fp
   1e048:	mov	r0, r4
   1e04c:	bl	19198 <__assert_fail@plt+0x7ef0>
   1e050:	cmp	r0, #0
   1e054:	beq	1e008 <__assert_fail@plt+0xcd60>
   1e058:	b	1dff0 <__assert_fail@plt+0xcd48>
   1e05c:	ldr	r7, [sp, #36]	; 0x24
   1e060:	ldr	r0, [sp, #60]	; 0x3c
   1e064:	bl	23f40 <__assert_fail@plt+0x12c98>
   1e068:	ldr	r3, [sp, #48]	; 0x30
   1e06c:	str	r3, [sp, #76]	; 0x4c
   1e070:	cmp	r3, #0
   1e074:	bne	1e200 <__assert_fail@plt+0xcf58>
   1e078:	mov	r5, r7
   1e07c:	ldr	r3, [sp, #68]	; 0x44
   1e080:	cmp	r3, #0
   1e084:	beq	1e0d0 <__assert_fail@plt+0xce28>
   1e088:	ldr	r3, [sp, #128]	; 0x80
   1e08c:	ldr	r2, [sp, #28]
   1e090:	add	r1, sp, #64	; 0x40
   1e094:	ldr	r0, [sp, #24]
   1e098:	bl	194d8 <__assert_fail@plt+0x8230>
   1e09c:	str	r0, [sp, #76]	; 0x4c
   1e0a0:	cmp	r0, #0
   1e0a4:	bne	1e224 <__assert_fail@plt+0xcf7c>
   1e0a8:	ldr	r3, [sp, #128]	; 0x80
   1e0ac:	str	r3, [sp]
   1e0b0:	ldr	r3, [sp, #28]
   1e0b4:	mov	r2, r7
   1e0b8:	add	r1, sp, #64	; 0x40
   1e0bc:	mov	r0, r4
   1e0c0:	bl	1dac8 <__assert_fail@plt+0xc820>
   1e0c4:	str	r0, [sp, #76]	; 0x4c
   1e0c8:	cmp	r0, #0
   1e0cc:	bne	1e234 <__assert_fail@plt+0xcf8c>
   1e0d0:	ldr	r2, [r4, #88]	; 0x58
   1e0d4:	ldr	r1, [sp, #8]
   1e0d8:	ldr	r0, [sp, #12]
   1e0dc:	bl	1908c <__assert_fail@plt+0x7de4>
   1e0e0:	mov	r3, r0
   1e0e4:	add	r2, sp, #64	; 0x40
   1e0e8:	ldr	r1, [sp, #24]
   1e0ec:	add	r0, sp, #76	; 0x4c
   1e0f0:	bl	17eb4 <__assert_fail@plt+0x6c0c>
   1e0f4:	subs	sl, r0, #0
   1e0f8:	beq	1e244 <__assert_fail@plt+0xcf9c>
   1e0fc:	ldr	r3, [r4, #100]	; 0x64
   1e100:	ldr	r2, [sp, #20]
   1e104:	str	sl, [r3, r2]
   1e108:	mov	r3, #0
   1e10c:	str	r3, [sp, #16]
   1e110:	ldr	r3, [sp, #124]	; 0x7c
   1e114:	cmp	r3, r5
   1e118:	ble	1de4c <__assert_fail@plt+0xcba4>
   1e11c:	add	r7, r7, #1
   1e120:	ldr	r3, [r4, #120]	; 0x78
   1e124:	ldr	r2, [sp, #16]
   1e128:	cmp	r2, r3
   1e12c:	bgt	1de4c <__assert_fail@plt+0xcba4>
   1e130:	sub	r3, r7, #1
   1e134:	str	r3, [sp, #8]
   1e138:	str	r9, [sp, #68]	; 0x44
   1e13c:	lsl	r3, r7, #2
   1e140:	str	r3, [sp, #20]
   1e144:	ldr	r3, [r4, #100]	; 0x64
   1e148:	ldr	r1, [r3, r7, lsl #2]
   1e14c:	cmp	r1, #0
   1e150:	beq	1e2b4 <__assert_fail@plt+0xd00c>
   1e154:	add	r1, r1, #4
   1e158:	add	r0, sp, #64	; 0x40
   1e15c:	bl	18c8c <__assert_fail@plt+0x79e4>
   1e160:	str	r0, [sp, #76]	; 0x4c
   1e164:	cmp	r0, #0
   1e168:	bne	1df38 <__assert_fail@plt+0xcc90>
   1e16c:	cmp	sl, #0
   1e170:	beq	1e078 <__assert_fail@plt+0xcdd0>
   1e174:	ldr	r6, [r4, #84]	; 0x54
   1e178:	str	r9, [sp, #48]	; 0x30
   1e17c:	str	r9, [sp, #52]	; 0x34
   1e180:	str	r9, [sp, #56]	; 0x38
   1e184:	str	r9, [sp, #60]	; 0x3c
   1e188:	ldr	r3, [sl, #20]
   1e18c:	cmp	r3, #0
   1e190:	ble	1e214 <__assert_fail@plt+0xcf6c>
   1e194:	ldr	r3, [sl, #24]
   1e198:	ldr	r1, [r3]
   1e19c:	lsl	fp, r1, #3
   1e1a0:	ldr	r3, [r6]
   1e1a4:	add	r3, r3, fp
   1e1a8:	mov	r8, #0
   1e1ac:	str	r7, [sp, #36]	; 0x24
   1e1b0:	mov	r7, r1
   1e1b4:	b	1e030 <__assert_fail@plt+0xcd88>
   1e1b8:	ldr	r0, [sp, #60]	; 0x3c
   1e1bc:	bl	23f40 <__assert_fail@plt+0x12c98>
   1e1c0:	b	1e1f8 <__assert_fail@plt+0xcf50>
   1e1c4:	ldr	r3, [sp, #48]	; 0x30
   1e1c8:	cmp	r3, #0
   1e1cc:	beq	1dff0 <__assert_fail@plt+0xcd48>
   1e1d0:	ldr	r7, [sp, #36]	; 0x24
   1e1d4:	ldr	r0, [sp, #60]	; 0x3c
   1e1d8:	bl	23f40 <__assert_fail@plt+0x12c98>
   1e1dc:	ldr	r3, [sp, #48]	; 0x30
   1e1e0:	b	1e06c <__assert_fail@plt+0xcdc4>
   1e1e4:	cmp	r0, #0
   1e1e8:	beq	1e03c <__assert_fail@plt+0xcd94>
   1e1ec:	b	1dff0 <__assert_fail@plt+0xcd48>
   1e1f0:	ldr	r0, [sp, #60]	; 0x3c
   1e1f4:	bl	23f40 <__assert_fail@plt+0x12c98>
   1e1f8:	mov	r3, #12
   1e1fc:	str	r3, [sp, #76]	; 0x4c
   1e200:	ldr	r0, [sp, #72]	; 0x48
   1e204:	bl	23f40 <__assert_fail@plt+0x12c98>
   1e208:	ldr	r0, [sp, #76]	; 0x4c
   1e20c:	b	1df44 <__assert_fail@plt+0xcc9c>
   1e210:	ldr	r7, [sp, #36]	; 0x24
   1e214:	ldr	r0, [sp, #60]	; 0x3c
   1e218:	bl	23f40 <__assert_fail@plt+0x12c98>
   1e21c:	str	r9, [sp, #76]	; 0x4c
   1e220:	b	1e078 <__assert_fail@plt+0xcdd0>
   1e224:	ldr	r0, [sp, #72]	; 0x48
   1e228:	bl	23f40 <__assert_fail@plt+0x12c98>
   1e22c:	ldr	r0, [sp, #76]	; 0x4c
   1e230:	b	1df44 <__assert_fail@plt+0xcc9c>
   1e234:	ldr	r0, [sp, #72]	; 0x48
   1e238:	bl	23f40 <__assert_fail@plt+0x12c98>
   1e23c:	ldr	r0, [sp, #76]	; 0x4c
   1e240:	b	1df44 <__assert_fail@plt+0xcc9c>
   1e244:	ldr	r3, [sp, #76]	; 0x4c
   1e248:	cmp	r3, #0
   1e24c:	bne	1e26c <__assert_fail@plt+0xcfc4>
   1e250:	ldr	r3, [r4, #100]	; 0x64
   1e254:	ldr	r2, [sp, #20]
   1e258:	str	r9, [r3, r2]
   1e25c:	ldr	r3, [sp, #16]
   1e260:	add	r3, r3, #1
   1e264:	str	r3, [sp, #16]
   1e268:	b	1e110 <__assert_fail@plt+0xce68>
   1e26c:	ldr	r0, [sp, #72]	; 0x48
   1e270:	bl	23f40 <__assert_fail@plt+0x12c98>
   1e274:	ldr	r0, [sp, #76]	; 0x4c
   1e278:	b	1df44 <__assert_fail@plt+0xcc9c>
   1e27c:	mov	r0, #12
   1e280:	b	1df44 <__assert_fail@plt+0xcc9c>
   1e284:	mov	r0, #12
   1e288:	b	1df44 <__assert_fail@plt+0xcc9c>
   1e28c:	mov	r0, #12
   1e290:	b	1df44 <__assert_fail@plt+0xcc9c>
   1e294:	ldr	r3, [sp, #32]
   1e298:	str	r5, [r3]
   1e29c:	ldr	r3, [sp, #40]	; 0x28
   1e2a0:	str	r3, [r4, #100]	; 0x64
   1e2a4:	ldr	r3, [sp, #44]	; 0x2c
   1e2a8:	str	r3, [r4, #40]	; 0x28
   1e2ac:	mov	r0, #1
   1e2b0:	b	1df44 <__assert_fail@plt+0xcc9c>
   1e2b4:	cmp	sl, #0
   1e2b8:	bne	1e174 <__assert_fail@plt+0xcecc>
   1e2bc:	mov	r5, r7
   1e2c0:	b	1e0d0 <__assert_fail@plt+0xce28>
   1e2c4:	ldr	r3, [r4, #100]	; 0x64
   1e2c8:	str	r3, [sp, #40]	; 0x28
   1e2cc:	ldr	r3, [r4, #40]	; 0x28
   1e2d0:	str	r3, [sp, #44]	; 0x2c
   1e2d4:	ldr	r3, [sp, #32]
   1e2d8:	ldr	r3, [r3, #8]
   1e2dc:	str	r3, [r4, #100]	; 0x64
   1e2e0:	str	r6, [r4, #40]	; 0x28
   1e2e4:	str	r4, [sp, #12]
   1e2e8:	ldr	r2, [r4, #88]	; 0x58
   1e2ec:	sub	r1, r6, #1
   1e2f0:	mov	r0, r4
   1e2f4:	bl	1908c <__assert_fail@plt+0x7de4>
   1e2f8:	mov	r8, r0
   1e2fc:	mov	r1, r7
   1e300:	add	r0, sp, #64	; 0x40
   1e304:	bl	16134 <__assert_fail@plt+0x4e8c>
   1e308:	str	r0, [sp, #76]	; 0x4c
   1e30c:	cmp	r0, #0
   1e310:	bne	1df44 <__assert_fail@plt+0xcc9c>
   1e314:	ldr	r3, [sp, #128]	; 0x80
   1e318:	ldr	r2, [sp, #28]
   1e31c:	add	r1, sp, #64	; 0x40
   1e320:	ldr	r0, [sp, #24]
   1e324:	bl	194d8 <__assert_fail@plt+0x8230>
   1e328:	str	r0, [sp, #76]	; 0x4c
   1e32c:	cmp	r0, #0
   1e330:	moveq	r5, r6
   1e334:	beq	1ddcc <__assert_fail@plt+0xcb24>
   1e338:	ldr	r0, [sp, #72]	; 0x48
   1e33c:	bl	23f40 <__assert_fail@plt+0x12c98>
   1e340:	ldr	r0, [sp, #76]	; 0x4c
   1e344:	b	1df44 <__assert_fail@plt+0xcc9c>
   1e348:	mov	r3, #0
   1e34c:	str	r3, [sp, #64]	; 0x40
   1e350:	str	r3, [sp, #68]	; 0x44
   1e354:	str	r3, [sp, #72]	; 0x48
   1e358:	b	1de24 <__assert_fail@plt+0xcb7c>
   1e35c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1e360:	strd	r6, [sp, #8]
   1e364:	strd	r8, [sp, #16]
   1e368:	str	sl, [sp, #24]
   1e36c:	str	lr, [sp, #28]
   1e370:	sub	sp, sp, #16
   1e374:	mov	r4, r0
   1e378:	mov	r8, r1
   1e37c:	mov	r6, r2
   1e380:	mov	r9, r3
   1e384:	ldr	r5, [sp, #48]	; 0x30
   1e388:	mov	r1, r2
   1e38c:	mov	r3, #8
   1e390:	str	r3, [sp, #8]
   1e394:	str	r5, [sp, #4]
   1e398:	str	r9, [sp]
   1e39c:	ldr	r3, [r2, #4]
   1e3a0:	ldr	r2, [r1], #8
   1e3a4:	bl	1dcec <__assert_fail@plt+0xca44>
   1e3a8:	cmp	r0, #0
   1e3ac:	beq	1e3cc <__assert_fail@plt+0xd124>
   1e3b0:	add	sp, sp, #16
   1e3b4:	ldrd	r4, [sp]
   1e3b8:	ldrd	r6, [sp, #8]
   1e3bc:	ldrd	r8, [sp, #16]
   1e3c0:	ldr	sl, [sp, #24]
   1e3c4:	add	sp, sp, #28
   1e3c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e3cc:	ldr	sl, [r8]
   1e3d0:	ldr	r7, [r6, #4]
   1e3d4:	ldr	r1, [r4, #112]	; 0x70
   1e3d8:	ldr	r3, [r4, #108]	; 0x6c
   1e3dc:	cmp	r3, r1
   1e3e0:	bge	1e4cc <__assert_fail@plt+0xd224>
   1e3e4:	ldr	r3, [r4, #108]	; 0x6c
   1e3e8:	cmp	r3, #0
   1e3ec:	ble	1e414 <__assert_fail@plt+0xd16c>
   1e3f0:	add	r3, r3, r3, lsl #1
   1e3f4:	lsl	r3, r3, #3
   1e3f8:	sub	r3, r3, #24
   1e3fc:	ldr	r2, [r4, #116]	; 0x74
   1e400:	add	r3, r2, r3
   1e404:	ldr	r2, [r3, #4]
   1e408:	cmp	r5, r2
   1e40c:	moveq	r2, #1
   1e410:	strbeq	r2, [r3, #20]
   1e414:	ldr	r3, [r4, #108]	; 0x6c
   1e418:	ldr	r2, [r4, #116]	; 0x74
   1e41c:	add	r3, r3, r3, lsl #1
   1e420:	str	r9, [r2, r3, lsl #3]
   1e424:	ldr	r3, [r4, #108]	; 0x6c
   1e428:	ldr	r2, [r4, #116]	; 0x74
   1e42c:	add	r3, r3, r3, lsl #1
   1e430:	add	r3, r2, r3, lsl #3
   1e434:	str	r5, [r3, #4]
   1e438:	ldr	r3, [r4, #108]	; 0x6c
   1e43c:	ldr	r2, [r4, #116]	; 0x74
   1e440:	add	r3, r3, r3, lsl #1
   1e444:	add	r3, r2, r3, lsl #3
   1e448:	str	sl, [r3, #8]
   1e44c:	ldr	r3, [r4, #108]	; 0x6c
   1e450:	ldr	r2, [r4, #116]	; 0x74
   1e454:	add	r3, r3, r3, lsl #1
   1e458:	add	r3, r2, r3, lsl #3
   1e45c:	str	r7, [r3, #12]
   1e460:	ldr	r3, [r4, #108]	; 0x6c
   1e464:	ldr	r2, [r4, #116]	; 0x74
   1e468:	add	r3, r3, r3, lsl #1
   1e46c:	add	r3, r2, r3, lsl #3
   1e470:	cmp	sl, r7
   1e474:	movne	r2, #0
   1e478:	mvneq	r2, #0
   1e47c:	str	r2, [r3, #16]
   1e480:	ldr	r2, [r4, #116]	; 0x74
   1e484:	ldr	r3, [r4, #108]	; 0x6c
   1e488:	add	r1, r3, #1
   1e48c:	str	r1, [r4, #108]	; 0x6c
   1e490:	add	r3, r3, r3, lsl #1
   1e494:	add	r3, r2, r3, lsl #3
   1e498:	mov	r2, #0
   1e49c:	strb	r2, [r3, #20]
   1e4a0:	sub	r7, r7, sl
   1e4a4:	ldr	r3, [r4, #120]	; 0x78
   1e4a8:	cmp	r3, r7
   1e4ac:	strlt	r7, [r4, #120]	; 0x78
   1e4b0:	ldr	r1, [r6, #4]
   1e4b4:	add	r5, r5, r1
   1e4b8:	ldr	r1, [r8]
   1e4bc:	sub	r1, r5, r1
   1e4c0:	mov	r0, r4
   1e4c4:	bl	1943c <__assert_fail@plt+0x8194>
   1e4c8:	b	1e3b0 <__assert_fail@plt+0xd108>
   1e4cc:	add	r1, r1, r1, lsl #1
   1e4d0:	lsl	r1, r1, #4
   1e4d4:	ldr	r0, [r4, #116]	; 0x74
   1e4d8:	bl	23d84 <__assert_fail@plt+0x12adc>
   1e4dc:	cmp	r0, #0
   1e4e0:	beq	1e518 <__assert_fail@plt+0xd270>
   1e4e4:	str	r0, [r4, #116]	; 0x74
   1e4e8:	ldr	r2, [r4, #112]	; 0x70
   1e4ec:	add	r2, r2, r2, lsl #1
   1e4f0:	ldr	r3, [r4, #108]	; 0x6c
   1e4f4:	add	r3, r3, r3, lsl #1
   1e4f8:	lsl	r2, r2, #3
   1e4fc:	mov	r1, #0
   1e500:	add	r0, r0, r3, lsl #3
   1e504:	bl	111c4 <memset@plt>
   1e508:	ldr	r3, [r4, #112]	; 0x70
   1e50c:	lsl	r3, r3, #1
   1e510:	str	r3, [r4, #112]	; 0x70
   1e514:	b	1e3e4 <__assert_fail@plt+0xd13c>
   1e518:	ldr	r0, [r4, #116]	; 0x74
   1e51c:	bl	23f40 <__assert_fail@plt+0x12c98>
   1e520:	mov	r0, #12
   1e524:	b	1e3b0 <__assert_fail@plt+0xd108>
   1e528:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e52c:	strd	r6, [sp, #8]
   1e530:	strd	r8, [sp, #16]
   1e534:	strd	sl, [sp, #24]
   1e538:	str	lr, [sp, #32]
   1e53c:	sub	sp, sp, #84	; 0x54
   1e540:	ldr	fp, [r0, #84]	; 0x54
   1e544:	ldr	r2, [r0, #40]	; 0x28
   1e548:	str	r2, [sp, #28]
   1e54c:	ldr	r3, [r1, #4]
   1e550:	cmp	r3, #0
   1e554:	ble	1ec10 <__assert_fail@plt+0xd968>
   1e558:	mov	sl, r0
   1e55c:	lsl	r3, r2, #2
   1e560:	str	r3, [sp, #40]	; 0x28
   1e564:	mov	r3, #0
   1e568:	str	r3, [sp, #20]
   1e56c:	mov	r7, r1
   1e570:	b	1e5c0 <__assert_fail@plt+0xd318>
   1e574:	tst	r3, #8
   1e578:	beq	1e584 <__assert_fail@plt+0xd2dc>
   1e57c:	tst	r0, #1
   1e580:	bne	1e5a4 <__assert_fail@plt+0xd2fc>
   1e584:	tst	r3, #32
   1e588:	beq	1e594 <__assert_fail@plt+0xd2ec>
   1e58c:	tst	r0, #2
   1e590:	beq	1e5a4 <__assert_fail@plt+0xd2fc>
   1e594:	tst	r3, #128	; 0x80
   1e598:	beq	1e62c <__assert_fail@plt+0xd384>
   1e59c:	tst	r0, #8
   1e5a0:	bne	1e62c <__assert_fail@plt+0xd384>
   1e5a4:	ldr	r3, [sp, #20]
   1e5a8:	add	r3, r3, #1
   1e5ac:	mov	r2, r3
   1e5b0:	str	r3, [sp, #20]
   1e5b4:	ldr	r3, [r7, #4]
   1e5b8:	cmp	r3, r2
   1e5bc:	ble	1ec10 <__assert_fail@plt+0xd968>
   1e5c0:	ldr	r3, [r7, #8]
   1e5c4:	ldr	r2, [sp, #20]
   1e5c8:	ldr	r8, [r3, r2, lsl #2]
   1e5cc:	ldr	r4, [fp]
   1e5d0:	add	r4, r4, r8, lsl #3
   1e5d4:	ldrb	r3, [r4, #4]
   1e5d8:	cmp	r3, #4
   1e5dc:	bne	1e5a4 <__assert_fail@plt+0xd2fc>
   1e5e0:	ldr	r2, [r4, #4]
   1e5e4:	mov	r3, #65280	; 0xff00
   1e5e8:	movt	r3, #3
   1e5ec:	and	r3, r3, r2
   1e5f0:	cmp	r3, #0
   1e5f4:	beq	1e62c <__assert_fail@plt+0xd384>
   1e5f8:	ldr	r2, [sl, #88]	; 0x58
   1e5fc:	ldr	r1, [sp, #28]
   1e600:	mov	r0, sl
   1e604:	bl	1908c <__assert_fail@plt+0x7de4>
   1e608:	ldr	r3, [r4, #4]
   1e60c:	ubfx	r3, r3, #8, #10
   1e610:	tst	r3, #4
   1e614:	beq	1e574 <__assert_fail@plt+0xd2cc>
   1e618:	tst	r0, #1
   1e61c:	beq	1e5a4 <__assert_fail@plt+0xd2fc>
   1e620:	tst	r3, #8
   1e624:	beq	1e584 <__assert_fail@plt+0xd2dc>
   1e628:	b	1e5a4 <__assert_fail@plt+0xd2fc>
   1e62c:	ldr	r9, [sl, #108]	; 0x6c
   1e630:	ldr	r1, [sp, #28]
   1e634:	mov	r0, sl
   1e638:	bl	15a64 <__assert_fail@plt+0x47bc>
   1e63c:	cmn	r0, #1
   1e640:	beq	1e670 <__assert_fail@plt+0xd3c8>
   1e644:	add	r0, r0, #1
   1e648:	add	r0, r0, r0, lsl #1
   1e64c:	ldr	r3, [sl, #116]	; 0x74
   1e650:	add	r3, r3, r0, lsl #3
   1e654:	ldr	r2, [r3, #-24]	; 0xffffffe8
   1e658:	cmp	r8, r2
   1e65c:	beq	1e9e0 <__assert_fail@plt+0xd738>
   1e660:	add	r3, r3, #24
   1e664:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   1e668:	cmp	r2, #0
   1e66c:	bne	1e654 <__assert_fail@plt+0xd3ac>
   1e670:	ldr	r3, [sl, #84]	; 0x54
   1e674:	str	r3, [sp, #44]	; 0x2c
   1e678:	ldr	r3, [r3]
   1e67c:	ldr	r3, [r3, r8, lsl #3]
   1e680:	str	r3, [sp, #48]	; 0x30
   1e684:	ldr	r3, [sl, #124]	; 0x7c
   1e688:	cmp	r3, #0
   1e68c:	ble	1e9e0 <__assert_fail@plt+0xd738>
   1e690:	ldr	r3, [sl, #4]
   1e694:	mov	r2, #0
   1e698:	str	r2, [sp, #32]
   1e69c:	str	fp, [sp, #52]	; 0x34
   1e6a0:	str	r8, [sp, #36]	; 0x24
   1e6a4:	str	r9, [sp, #56]	; 0x38
   1e6a8:	mov	fp, r3
   1e6ac:	str	r7, [sp, #60]	; 0x3c
   1e6b0:	b	1e788 <__assert_fail@plt+0xd4e0>
   1e6b4:	mov	r2, r5
   1e6b8:	ldr	r3, [sp, #24]
   1e6bc:	add	r1, fp, r3
   1e6c0:	add	r0, fp, r7
   1e6c4:	bl	11074 <memcmp@plt>
   1e6c8:	cmp	r0, #0
   1e6cc:	bne	1e760 <__assert_fail@plt+0xd4b8>
   1e6d0:	add	r7, r7, r5
   1e6d4:	ldr	r3, [sp, #28]
   1e6d8:	str	r3, [sp]
   1e6dc:	ldr	r3, [sp, #36]	; 0x24
   1e6e0:	mov	r2, r8
   1e6e4:	mov	r1, r4
   1e6e8:	mov	r0, sl
   1e6ec:	bl	1e35c <__assert_fail@plt+0xd0b4>
   1e6f0:	ldr	fp, [sl, #4]
   1e6f4:	cmp	r0, #1
   1e6f8:	bhi	1ea14 <__assert_fail@plt+0xd76c>
   1e6fc:	add	r6, r6, #1
   1e700:	str	r9, [sp, #24]
   1e704:	ldr	r3, [r4, #16]
   1e708:	cmp	r6, r3
   1e70c:	bge	1e7d4 <__assert_fail@plt+0xd52c>
   1e710:	ldr	r3, [r4, #20]
   1e714:	ldr	r8, [r3, r6, lsl #2]
   1e718:	ldr	r9, [r8, #4]
   1e71c:	ldr	r3, [sp, #24]
   1e720:	sub	r5, r9, r3
   1e724:	cmp	r5, #0
   1e728:	ble	1e6d0 <__assert_fail@plt+0xd428>
   1e72c:	add	r1, r5, r7
   1e730:	ldr	r3, [sl, #28]
   1e734:	cmp	r1, r3
   1e738:	ble	1e6b4 <__assert_fail@plt+0xd40c>
   1e73c:	ldr	r3, [sl, #48]	; 0x30
   1e740:	cmp	r1, r3
   1e744:	bgt	1e760 <__assert_fail@plt+0xd4b8>
   1e748:	mov	r0, sl
   1e74c:	bl	1943c <__assert_fail@plt+0x8194>
   1e750:	cmp	r0, #0
   1e754:	bne	1ec20 <__assert_fail@plt+0xd978>
   1e758:	ldr	fp, [sl, #4]
   1e75c:	b	1e6b4 <__assert_fail@plt+0xd40c>
   1e760:	ldr	r3, [r4, #16]
   1e764:	cmp	r3, r6
   1e768:	ble	1e7d0 <__assert_fail@plt+0xd528>
   1e76c:	ldr	r3, [sp, #32]
   1e770:	add	r3, r3, #1
   1e774:	mov	r2, r3
   1e778:	str	r3, [sp, #32]
   1e77c:	ldr	r3, [sl, #124]	; 0x7c
   1e780:	cmp	r2, r3
   1e784:	bge	1e9d0 <__assert_fail@plt+0xd728>
   1e788:	ldr	r3, [sl, #132]	; 0x84
   1e78c:	ldr	r2, [sp, #32]
   1e790:	ldr	r4, [r3, r2, lsl #2]
   1e794:	ldr	r2, [r4, #4]
   1e798:	ldr	r3, [sp, #44]	; 0x2c
   1e79c:	ldr	r3, [r3]
   1e7a0:	ldr	r3, [r3, r2, lsl #3]
   1e7a4:	ldr	r2, [sp, #48]	; 0x30
   1e7a8:	cmp	r2, r3
   1e7ac:	bne	1e76c <__assert_fail@plt+0xd4c4>
   1e7b0:	ldr	r3, [r4]
   1e7b4:	str	r3, [sp, #24]
   1e7b8:	ldr	r3, [r4, #16]
   1e7bc:	cmp	r3, #0
   1e7c0:	ble	1e7f4 <__assert_fail@plt+0xd54c>
   1e7c4:	ldr	r7, [sp, #28]
   1e7c8:	mov	r6, #0
   1e7cc:	b	1e710 <__assert_fail@plt+0xd468>
   1e7d0:	ldr	r9, [sp, #24]
   1e7d4:	cmp	r6, #0
   1e7d8:	addgt	r9, r9, #1
   1e7dc:	ldr	r3, [sp, #28]
   1e7e0:	cmp	r3, r9
   1e7e4:	blt	1e76c <__assert_fail@plt+0xd4c4>
   1e7e8:	mov	r8, #1
   1e7ec:	ldr	r6, [sp, #48]	; 0x30
   1e7f0:	b	1e914 <__assert_fail@plt+0xd66c>
   1e7f4:	ldr	r7, [sp, #28]
   1e7f8:	ldr	r9, [sp, #24]
   1e7fc:	b	1e7dc <__assert_fail@plt+0xd534>
   1e800:	ldr	r3, [sl, #48]	; 0x30
   1e804:	cmp	r3, r7
   1e808:	ble	1e76c <__assert_fail@plt+0xd4c4>
   1e80c:	add	r1, r7, #1
   1e810:	mov	r0, sl
   1e814:	bl	16e90 <__assert_fail@plt+0x5be8>
   1e818:	cmp	r0, #0
   1e81c:	bne	1ec20 <__assert_fail@plt+0xd978>
   1e820:	ldr	fp, [sl, #4]
   1e824:	b	1e930 <__assert_fail@plt+0xd688>
   1e828:	add	r3, r3, #1
   1e82c:	cmp	ip, r3
   1e830:	beq	1e904 <__assert_fail@plt+0xd65c>
   1e834:	ldr	r5, [r2, #4]!
   1e838:	add	r1, r0, r5, lsl #3
   1e83c:	ldrb	r1, [r1, #4]
   1e840:	cmp	r1, #9
   1e844:	bne	1e828 <__assert_fail@plt+0xd580>
   1e848:	ldr	r1, [r0, r5, lsl #3]
   1e84c:	cmp	r6, r1
   1e850:	bne	1e828 <__assert_fail@plt+0xd580>
   1e854:	cmn	r5, #1
   1e858:	beq	1e904 <__assert_fail@plt+0xd65c>
   1e85c:	ldr	r3, [r4, #8]
   1e860:	cmp	r3, #0
   1e864:	beq	1e980 <__assert_fail@plt+0xd6d8>
   1e868:	ldr	r3, [r4]
   1e86c:	ldr	r2, [r4, #4]
   1e870:	ldr	r1, [r4, #8]
   1e874:	mov	r0, #9
   1e878:	str	r0, [sp, #8]
   1e87c:	str	r9, [sp, #4]
   1e880:	str	r5, [sp]
   1e884:	mov	r0, sl
   1e888:	bl	1dcec <__assert_fail@plt+0xca44>
   1e88c:	cmp	r0, #1
   1e890:	beq	1e904 <__assert_fail@plt+0xd65c>
   1e894:	cmp	r0, #0
   1e898:	bne	1ec20 <__assert_fail@plt+0xd978>
   1e89c:	ldr	r3, [r4, #12]
   1e8a0:	ldr	r2, [r4, #16]
   1e8a4:	cmp	r2, r3
   1e8a8:	beq	1e9a8 <__assert_fail@plt+0xd700>
   1e8ac:	mov	r1, #20
   1e8b0:	mov	r0, r8
   1e8b4:	bl	23cd4 <__assert_fail@plt+0x12a2c>
   1e8b8:	subs	r2, r0, #0
   1e8bc:	beq	1ec1c <__assert_fail@plt+0xd974>
   1e8c0:	ldr	r1, [r4, #16]
   1e8c4:	ldr	r3, [r4, #20]
   1e8c8:	str	r2, [r3, r1, lsl #2]
   1e8cc:	str	r5, [r2]
   1e8d0:	str	r9, [r2, #4]
   1e8d4:	ldr	r3, [r4, #16]
   1e8d8:	add	r3, r3, #1
   1e8dc:	str	r3, [r4, #16]
   1e8e0:	ldr	r3, [sp, #28]
   1e8e4:	str	r3, [sp]
   1e8e8:	ldr	r3, [sp, #36]	; 0x24
   1e8ec:	mov	r1, r4
   1e8f0:	mov	r0, sl
   1e8f4:	bl	1e35c <__assert_fail@plt+0xd0b4>
   1e8f8:	ldr	fp, [sl, #4]
   1e8fc:	cmp	r0, #1
   1e900:	bhi	1ea14 <__assert_fail@plt+0xd76c>
   1e904:	add	r9, r9, #1
   1e908:	ldr	r3, [sp, #28]
   1e90c:	cmp	r3, r9
   1e910:	blt	1e76c <__assert_fail@plt+0xd4c4>
   1e914:	ldr	r3, [r4]
   1e918:	sub	r3, r9, r3
   1e91c:	cmp	r3, #0
   1e920:	ble	1e94c <__assert_fail@plt+0xd6a4>
   1e924:	ldr	r3, [sl, #28]
   1e928:	cmp	r3, r7
   1e92c:	ble	1e800 <__assert_fail@plt+0xd558>
   1e930:	add	r1, r7, #1
   1e934:	add	r3, fp, r9
   1e938:	ldrb	r2, [fp, r7]
   1e93c:	ldrb	r3, [r3, #-1]
   1e940:	cmp	r2, r3
   1e944:	bne	1e76c <__assert_fail@plt+0xd4c4>
   1e948:	mov	r7, r1
   1e94c:	ldr	r3, [sl, #100]	; 0x64
   1e950:	ldr	r3, [r3, r9, lsl #2]
   1e954:	cmp	r3, #0
   1e958:	beq	1e904 <__assert_fail@plt+0xd65c>
   1e95c:	ldr	ip, [r3, #8]
   1e960:	cmp	ip, #0
   1e964:	ble	1e904 <__assert_fail@plt+0xd65c>
   1e968:	ldr	r2, [sp, #44]	; 0x2c
   1e96c:	ldr	r0, [r2]
   1e970:	ldr	r2, [r3, #12]
   1e974:	sub	r2, r2, #4
   1e978:	mov	r3, #0
   1e97c:	b	1e834 <__assert_fail@plt+0xd58c>
   1e980:	ldr	r1, [r4]
   1e984:	sub	r1, r9, r1
   1e988:	add	r1, r1, #1
   1e98c:	mov	r0, #12
   1e990:	bl	23cd4 <__assert_fail@plt+0x12a2c>
   1e994:	str	r0, [r4, #8]
   1e998:	cmp	r0, #0
   1e99c:	bne	1e868 <__assert_fail@plt+0xd5c0>
   1e9a0:	mov	r0, #12
   1e9a4:	b	1ec20 <__assert_fail@plt+0xd978>
   1e9a8:	lsl	r3, r3, #1
   1e9ac:	add	fp, r3, #1
   1e9b0:	lsl	r1, fp, #2
   1e9b4:	ldr	r0, [r4, #20]
   1e9b8:	bl	23d84 <__assert_fail@plt+0x12adc>
   1e9bc:	cmp	r0, #0
   1e9c0:	beq	1ec1c <__assert_fail@plt+0xd974>
   1e9c4:	str	r0, [r4, #20]
   1e9c8:	str	fp, [r4, #12]
   1e9cc:	b	1e8ac <__assert_fail@plt+0xd604>
   1e9d0:	ldr	fp, [sp, #52]	; 0x34
   1e9d4:	ldr	r8, [sp, #36]	; 0x24
   1e9d8:	ldr	r9, [sp, #56]	; 0x38
   1e9dc:	ldr	r7, [sp, #60]	; 0x3c
   1e9e0:	mov	r3, #0
   1e9e4:	str	r3, [sp, #76]	; 0x4c
   1e9e8:	lsl	r3, r8, #2
   1e9ec:	str	r3, [sp, #44]	; 0x2c
   1e9f0:	ldr	r3, [sl, #108]	; 0x6c
   1e9f4:	cmp	r3, r9
   1e9f8:	ble	1e5a4 <__assert_fail@plt+0xd2fc>
   1e9fc:	add	r3, r8, r8, lsl #1
   1ea00:	lsl	r3, r3, #2
   1ea04:	str	r3, [sp, #48]	; 0x30
   1ea08:	ldr	r6, [sp, #28]
   1ea0c:	str	r7, [sp, #52]	; 0x34
   1ea10:	b	1eabc <__assert_fail@plt+0xd814>
   1ea14:	str	r0, [sp, #76]	; 0x4c
   1ea18:	ldr	r0, [sp, #76]	; 0x4c
   1ea1c:	add	sp, sp, #84	; 0x54
   1ea20:	ldrd	r4, [sp]
   1ea24:	ldrd	r6, [sp, #8]
   1ea28:	ldrd	r8, [sp, #16]
   1ea2c:	ldrd	sl, [sp, #24]
   1ea30:	add	sp, sp, #32
   1ea34:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea38:	ldr	r2, [fp, #12]
   1ea3c:	ldr	r1, [sp, #44]	; 0x2c
   1ea40:	ldr	r2, [r2, r1]
   1ea44:	add	r2, r2, r2, lsl #1
   1ea48:	ldr	r1, [fp, #24]
   1ea4c:	add	r2, r1, r2, lsl #2
   1ea50:	str	r2, [sp, #24]
   1ea54:	b	1eb14 <__assert_fail@plt+0xd86c>
   1ea58:	ldr	r3, [sp, #32]
   1ea5c:	ldr	r2, [sp, #24]
   1ea60:	mov	r1, fp
   1ea64:	add	r0, sp, #76	; 0x4c
   1ea68:	bl	17eb4 <__assert_fail@plt+0x6c0c>
   1ea6c:	str	r0, [r5, r4, lsl #2]
   1ea70:	ldr	r3, [sl, #100]	; 0x64
   1ea74:	ldr	r3, [r3, r4, lsl #2]
   1ea78:	cmp	r3, #0
   1ea7c:	bne	1eba8 <__assert_fail@plt+0xd900>
   1ea80:	ldr	r3, [sp, #76]	; 0x4c
   1ea84:	cmp	r3, #0
   1ea88:	beq	1eba8 <__assert_fail@plt+0xd900>
   1ea8c:	b	1ea18 <__assert_fail@plt+0xd770>
   1ea90:	ldr	r0, [sp, #72]	; 0x48
   1ea94:	bl	23f40 <__assert_fail@plt+0x12c98>
   1ea98:	b	1ea18 <__assert_fail@plt+0xd770>
   1ea9c:	ldr	r3, [sp, #76]	; 0x4c
   1eaa0:	cmp	r3, #0
   1eaa4:	beq	1eba8 <__assert_fail@plt+0xd900>
   1eaa8:	b	1ea18 <__assert_fail@plt+0xd770>
   1eaac:	add	r9, r9, #1
   1eab0:	ldr	r3, [sl, #108]	; 0x6c
   1eab4:	cmp	r3, r9
   1eab8:	ble	1ec08 <__assert_fail@plt+0xd960>
   1eabc:	add	r3, r9, r9, lsl #1
   1eac0:	ldr	r2, [sl, #116]	; 0x74
   1eac4:	add	r1, r2, r3, lsl #3
   1eac8:	ldr	r3, [r2, r3, lsl #3]
   1eacc:	cmp	r3, r8
   1ead0:	bne	1eaac <__assert_fail@plt+0xd804>
   1ead4:	ldr	r3, [r1, #4]
   1ead8:	cmp	r3, r6
   1eadc:	bne	1eaac <__assert_fail@plt+0xd804>
   1eae0:	ldr	r3, [r1, #12]
   1eae4:	ldr	r4, [r1, #8]
   1eae8:	subs	r7, r3, r4
   1eaec:	bne	1ea38 <__assert_fail@plt+0xd790>
   1eaf0:	ldr	r2, [fp, #20]
   1eaf4:	ldr	r1, [sp, #48]	; 0x30
   1eaf8:	add	r2, r2, r1
   1eafc:	ldr	r2, [r2, #8]
   1eb00:	ldr	r2, [r2]
   1eb04:	add	r2, r2, r2, lsl #1
   1eb08:	ldr	r1, [fp, #24]
   1eb0c:	add	r2, r1, r2, lsl #2
   1eb10:	str	r2, [sp, #24]
   1eb14:	add	r3, r3, r6
   1eb18:	sub	r4, r3, r4
   1eb1c:	ldr	r2, [sl, #88]	; 0x58
   1eb20:	sub	r1, r4, #1
   1eb24:	mov	r0, sl
   1eb28:	bl	1908c <__assert_fail@plt+0x7de4>
   1eb2c:	str	r0, [sp, #32]
   1eb30:	ldr	r5, [sl, #100]	; 0x64
   1eb34:	ldr	r3, [r5, r4, lsl #2]
   1eb38:	ldr	r2, [sp, #40]	; 0x28
   1eb3c:	ldr	r2, [r5, r2]
   1eb40:	cmp	r2, #0
   1eb44:	ldrne	r2, [r2, #8]
   1eb48:	moveq	r2, #0
   1eb4c:	str	r2, [sp, #36]	; 0x24
   1eb50:	cmp	r3, #0
   1eb54:	beq	1ea58 <__assert_fail@plt+0xd7b0>
   1eb58:	ldr	r2, [sp, #24]
   1eb5c:	ldr	r1, [r3, #40]	; 0x28
   1eb60:	add	r0, sp, #64	; 0x40
   1eb64:	bl	166e0 <__assert_fail@plt+0x5438>
   1eb68:	str	r0, [sp, #76]	; 0x4c
   1eb6c:	cmp	r0, #0
   1eb70:	bne	1ea90 <__assert_fail@plt+0xd7e8>
   1eb74:	ldr	r5, [sl, #100]	; 0x64
   1eb78:	ldr	r3, [sp, #32]
   1eb7c:	add	r2, sp, #64	; 0x40
   1eb80:	mov	r1, fp
   1eb84:	add	r0, sp, #76	; 0x4c
   1eb88:	bl	17eb4 <__assert_fail@plt+0x6c0c>
   1eb8c:	str	r0, [r5, r4, lsl #2]
   1eb90:	ldr	r0, [sp, #72]	; 0x48
   1eb94:	bl	23f40 <__assert_fail@plt+0x12c98>
   1eb98:	ldr	r3, [sl, #100]	; 0x64
   1eb9c:	ldr	r3, [r3, r4, lsl #2]
   1eba0:	cmp	r3, #0
   1eba4:	beq	1ea9c <__assert_fail@plt+0xd7f4>
   1eba8:	cmp	r7, #0
   1ebac:	bne	1eaac <__assert_fail@plt+0xd804>
   1ebb0:	ldr	r3, [sl, #100]	; 0x64
   1ebb4:	ldr	r2, [sp, #40]	; 0x28
   1ebb8:	ldr	r3, [r3, r2]
   1ebbc:	ldr	r3, [r3, #8]
   1ebc0:	ldr	r2, [sp, #36]	; 0x24
   1ebc4:	cmp	r3, r2
   1ebc8:	ble	1eaac <__assert_fail@plt+0xd804>
   1ebcc:	mov	r2, r6
   1ebd0:	ldr	r4, [sp, #24]
   1ebd4:	mov	r1, r4
   1ebd8:	mov	r0, sl
   1ebdc:	bl	19308 <__assert_fail@plt+0x8060>
   1ebe0:	str	r0, [sp, #76]	; 0x4c
   1ebe4:	cmp	r0, #0
   1ebe8:	bne	1ea18 <__assert_fail@plt+0xd770>
   1ebec:	mov	r1, r4
   1ebf0:	mov	r0, sl
   1ebf4:	bl	1e528 <__assert_fail@plt+0xd280>
   1ebf8:	str	r0, [sp, #76]	; 0x4c
   1ebfc:	cmp	r0, #0
   1ec00:	beq	1eaac <__assert_fail@plt+0xd804>
   1ec04:	b	1ea18 <__assert_fail@plt+0xd770>
   1ec08:	ldr	r7, [sp, #52]	; 0x34
   1ec0c:	b	1e5a4 <__assert_fail@plt+0xd2fc>
   1ec10:	mov	r3, #0
   1ec14:	str	r3, [sp, #76]	; 0x4c
   1ec18:	b	1ea18 <__assert_fail@plt+0xd770>
   1ec1c:	mov	r0, #12
   1ec20:	str	r0, [sp, #76]	; 0x4c
   1ec24:	b	1ea18 <__assert_fail@plt+0xd770>
   1ec28:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1ec2c:	strd	r6, [sp, #8]
   1ec30:	strd	r8, [sp, #16]
   1ec34:	str	sl, [sp, #24]
   1ec38:	str	lr, [sp, #28]
   1ec3c:	sub	sp, sp, #16
   1ec40:	mov	r8, r0
   1ec44:	mov	r4, r1
   1ec48:	ldr	r7, [r1, #84]	; 0x54
   1ec4c:	ldr	r6, [r1, #40]	; 0x28
   1ec50:	ldr	r3, [r1, #104]	; 0x68
   1ec54:	cmp	r3, r6
   1ec58:	bge	1ec9c <__assert_fail@plt+0xd9f4>
   1ec5c:	ldr	r3, [r1, #100]	; 0x64
   1ec60:	str	r2, [r3, r6, lsl #2]
   1ec64:	str	r6, [r1, #104]	; 0x68
   1ec68:	mov	r5, r2
   1ec6c:	ldr	r3, [r7, #76]	; 0x4c
   1ec70:	cmp	r3, #0
   1ec74:	cmpne	r5, #0
   1ec78:	bne	1ed6c <__assert_fail@plt+0xdac4>
   1ec7c:	mov	r0, r5
   1ec80:	add	sp, sp, #16
   1ec84:	ldrd	r4, [sp]
   1ec88:	ldrd	r6, [sp, #8]
   1ec8c:	ldrd	r8, [sp, #16]
   1ec90:	ldr	sl, [sp, #24]
   1ec94:	add	sp, sp, #28
   1ec98:	pop	{pc}		; (ldr pc, [sp], #4)
   1ec9c:	ldr	r9, [r1, #100]	; 0x64
   1eca0:	ldr	r3, [r9, r6, lsl #2]
   1eca4:	cmp	r3, #0
   1eca8:	streq	r2, [r9, r6, lsl #2]
   1ecac:	moveq	r5, r2
   1ecb0:	beq	1ec6c <__assert_fail@plt+0xd9c4>
   1ecb4:	ldr	r3, [r3, #40]	; 0x28
   1ecb8:	cmp	r2, #0
   1ecbc:	beq	1ed2c <__assert_fail@plt+0xda84>
   1ecc0:	ldr	r9, [r2, #40]	; 0x28
   1ecc4:	mov	r2, r3
   1ecc8:	mov	r1, r9
   1eccc:	add	r0, sp, #4
   1ecd0:	bl	166e0 <__assert_fail@plt+0x5438>
   1ecd4:	str	r0, [r8]
   1ecd8:	cmp	r0, #0
   1ecdc:	movne	r5, #0
   1ece0:	bne	1ec7c <__assert_fail@plt+0xd9d4>
   1ece4:	ldr	r1, [r4, #40]	; 0x28
   1ece8:	ldr	r2, [r4, #88]	; 0x58
   1ecec:	sub	r1, r1, #1
   1ecf0:	mov	r0, r4
   1ecf4:	bl	1908c <__assert_fail@plt+0x7de4>
   1ecf8:	ldr	sl, [r4, #100]	; 0x64
   1ecfc:	mov	r3, r0
   1ed00:	add	r2, sp, #4
   1ed04:	mov	r1, r7
   1ed08:	mov	r0, r8
   1ed0c:	bl	17eb4 <__assert_fail@plt+0x6c0c>
   1ed10:	mov	r5, r0
   1ed14:	str	r0, [sl, r6, lsl #2]
   1ed18:	cmp	r9, #0
   1ed1c:	beq	1ec6c <__assert_fail@plt+0xd9c4>
   1ed20:	ldr	r0, [sp, #12]
   1ed24:	bl	23f40 <__assert_fail@plt+0x12c98>
   1ed28:	b	1ec6c <__assert_fail@plt+0xd9c4>
   1ed2c:	ldrd	r0, [r3]
   1ed30:	strd	r0, [sp, #4]
   1ed34:	ldr	r3, [r3, #8]
   1ed38:	str	r3, [sp, #12]
   1ed3c:	ldr	r2, [r4, #88]	; 0x58
   1ed40:	sub	r1, r6, #1
   1ed44:	mov	r0, r4
   1ed48:	bl	1908c <__assert_fail@plt+0x7de4>
   1ed4c:	mov	r3, r0
   1ed50:	add	r2, sp, #4
   1ed54:	mov	r1, r7
   1ed58:	mov	r0, r8
   1ed5c:	bl	17eb4 <__assert_fail@plt+0x6c0c>
   1ed60:	mov	r5, r0
   1ed64:	str	r0, [r9, r6, lsl #2]
   1ed68:	b	1ec6c <__assert_fail@plt+0xd9c4>
   1ed6c:	add	r7, r5, #4
   1ed70:	mov	r2, r6
   1ed74:	mov	r1, r7
   1ed78:	mov	r0, r4
   1ed7c:	bl	19308 <__assert_fail@plt+0x8060>
   1ed80:	str	r0, [r8]
   1ed84:	cmp	r0, #0
   1ed88:	bne	1edbc <__assert_fail@plt+0xdb14>
   1ed8c:	ldrb	r3, [r5, #52]	; 0x34
   1ed90:	tst	r3, #64	; 0x40
   1ed94:	beq	1ec7c <__assert_fail@plt+0xd9d4>
   1ed98:	mov	r1, r7
   1ed9c:	mov	r0, r4
   1eda0:	bl	1e528 <__assert_fail@plt+0xd280>
   1eda4:	str	r0, [r8]
   1eda8:	cmp	r0, #0
   1edac:	bne	1edc4 <__assert_fail@plt+0xdb1c>
   1edb0:	ldr	r3, [r4, #100]	; 0x64
   1edb4:	ldr	r5, [r3, r6, lsl #2]
   1edb8:	b	1ec7c <__assert_fail@plt+0xd9d4>
   1edbc:	mov	r5, #0
   1edc0:	b	1ec7c <__assert_fail@plt+0xd9d4>
   1edc4:	mov	r5, #0
   1edc8:	b	1ec7c <__assert_fail@plt+0xd9d4>
   1edcc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1edd0:	strd	r6, [sp, #8]
   1edd4:	strd	r8, [sp, #16]
   1edd8:	strd	sl, [sp, #24]
   1eddc:	str	lr, [sp, #32]
   1ede0:	sub	sp, sp, #84	; 0x54
   1ede4:	str	r0, [sp, #8]
   1ede8:	mov	r4, r1
   1edec:	mov	sl, r2
   1edf0:	mov	r5, r3
   1edf4:	ldr	r6, [r0, #84]	; 0x54
   1edf8:	mov	r3, #0
   1edfc:	str	r3, [sp, #76]	; 0x4c
   1ee00:	lsl	r3, sl, #2
   1ee04:	str	r3, [sp, #12]
   1ee08:	ldr	r3, [r0, #100]	; 0x64
   1ee0c:	ldr	fp, [r3, sl, lsl #2]
   1ee10:	cmp	fp, #0
   1ee14:	beq	1ef14 <__assert_fail@plt+0xdc6c>
   1ee18:	add	fp, fp, #4
   1ee1c:	ldr	r3, [r5, #4]
   1ee20:	cmp	r3, #0
   1ee24:	beq	1ef20 <__assert_fail@plt+0xdc78>
   1ee28:	mov	r3, #0
   1ee2c:	str	r3, [sp, #48]	; 0x30
   1ee30:	mov	r2, r5
   1ee34:	mov	r1, r6
   1ee38:	add	r0, sp, #48	; 0x30
   1ee3c:	bl	1d7d0 <__assert_fail@plt+0xc528>
   1ee40:	mov	r9, r0
   1ee44:	ldr	r8, [sp, #48]	; 0x30
   1ee48:	cmp	r8, #0
   1ee4c:	bne	1ef54 <__assert_fail@plt+0xdcac>
   1ee50:	ldr	r3, [r0, #28]
   1ee54:	cmp	r3, #0
   1ee58:	bne	1eec0 <__assert_fail@plt+0xdc18>
   1ee5c:	add	r8, r0, #28
   1ee60:	ldr	r1, [r5, #4]
   1ee64:	mov	r0, r8
   1ee68:	bl	1618c <__assert_fail@plt+0x4ee4>
   1ee6c:	mov	r7, r0
   1ee70:	str	r0, [sp, #48]	; 0x30
   1ee74:	cmp	r0, #0
   1ee78:	bne	1f468 <__assert_fail@plt+0xe1c0>
   1ee7c:	ldr	r3, [r5, #4]
   1ee80:	cmp	r3, #0
   1ee84:	ble	1eec0 <__assert_fail@plt+0xdc18>
   1ee88:	ldr	r3, [r5, #8]
   1ee8c:	ldr	r1, [r3, r7, lsl #2]
   1ee90:	add	r1, r1, r1, lsl #1
   1ee94:	ldr	r3, [r6, #28]
   1ee98:	add	r1, r3, r1, lsl #2
   1ee9c:	mov	r0, r8
   1eea0:	bl	18c8c <__assert_fail@plt+0x79e4>
   1eea4:	str	r0, [sp, #48]	; 0x30
   1eea8:	cmp	r0, #0
   1eeac:	bne	1f470 <__assert_fail@plt+0xe1c8>
   1eeb0:	add	r7, r7, #1
   1eeb4:	ldr	r3, [r5, #4]
   1eeb8:	cmp	r7, r3
   1eebc:	blt	1ee88 <__assert_fail@plt+0xdbe0>
   1eec0:	add	r2, r9, #28
   1eec4:	mov	r1, fp
   1eec8:	mov	r0, r5
   1eecc:	bl	16484 <__assert_fail@plt+0x51dc>
   1eed0:	str	r0, [sp, #28]
   1eed4:	str	r0, [sp, #76]	; 0x4c
   1eed8:	cmp	r0, #0
   1eedc:	bne	1f460 <__assert_fail@plt+0xe1b8>
   1eee0:	ldr	r3, [r4, #20]
   1eee4:	cmp	r3, #0
   1eee8:	bne	1ef74 <__assert_fail@plt+0xdccc>
   1eeec:	ldr	r7, [r4]
   1eef0:	mov	r2, r5
   1eef4:	mov	r1, r6
   1eef8:	add	r0, sp, #76	; 0x4c
   1eefc:	bl	1d7d0 <__assert_fail@plt+0xc528>
   1ef00:	str	r0, [r7, sl, lsl #2]
   1ef04:	ldr	r8, [sp, #76]	; 0x4c
   1ef08:	cmp	r8, #0
   1ef0c:	beq	1ef38 <__assert_fail@plt+0xdc90>
   1ef10:	b	1ef54 <__assert_fail@plt+0xdcac>
   1ef14:	ldr	r3, [r5, #4]
   1ef18:	cmp	r3, #0
   1ef1c:	bne	1f184 <__assert_fail@plt+0xdedc>
   1ef20:	ldr	r3, [r4]
   1ef24:	mov	r2, #0
   1ef28:	str	r2, [r3, sl, lsl #2]
   1ef2c:	cmp	fp, r2
   1ef30:	moveq	r8, r2
   1ef34:	beq	1ef54 <__assert_fail@plt+0xdcac>
   1ef38:	ldr	r3, [sp, #8]
   1ef3c:	ldr	r3, [r3, #100]	; 0x64
   1ef40:	ldr	r3, [r3, sl, lsl #2]
   1ef44:	ldrb	r3, [r3, #52]	; 0x34
   1ef48:	tst	r3, #64	; 0x40
   1ef4c:	moveq	r8, #0
   1ef50:	bne	1f1a4 <__assert_fail@plt+0xdefc>
   1ef54:	mov	r0, r8
   1ef58:	add	sp, sp, #84	; 0x54
   1ef5c:	ldrd	r4, [sp]
   1ef60:	ldrd	r6, [sp, #8]
   1ef64:	ldrd	r8, [sp, #16]
   1ef68:	ldrd	sl, [sp, #24]
   1ef6c:	add	sp, sp, #32
   1ef70:	pop	{pc}		; (ldr pc, [sp], #4)
   1ef74:	ldr	r3, [sp, #8]
   1ef78:	ldr	r3, [r3, #116]	; 0x74
   1ef7c:	str	r3, [sp, #20]
   1ef80:	ble	1f178 <__assert_fail@plt+0xded0>
   1ef84:	mov	r7, r0
   1ef88:	str	fp, [sp, #24]
   1ef8c:	b	1f018 <__assert_fail@plt+0xdd70>
   1ef90:	ldr	lr, [r5, #4]
   1ef94:	cmp	lr, #0
   1ef98:	ble	1f008 <__assert_fail@plt+0xdd60>
   1ef9c:	ldr	r2, [r5, #8]
   1efa0:	add	lr, r2, lr, lsl #2
   1efa4:	mvn	r8, #0
   1efa8:	mov	r1, r8
   1efac:	b	1efc4 <__assert_fail@plt+0xdd1c>
   1efb0:	ldr	ip, [r0, r3, lsl #3]
   1efb4:	cmp	r9, ip
   1efb8:	moveq	r1, r3
   1efbc:	cmp	r2, lr
   1efc0:	beq	1eff0 <__assert_fail@plt+0xdd48>
   1efc4:	ldr	r3, [r2], #4
   1efc8:	add	ip, r0, r3, lsl #3
   1efcc:	ldrb	ip, [ip, #4]
   1efd0:	cmp	ip, #8
   1efd4:	beq	1efb0 <__assert_fail@plt+0xdd08>
   1efd8:	cmp	ip, #9
   1efdc:	bne	1efbc <__assert_fail@plt+0xdd14>
   1efe0:	ldr	ip, [r0, r3, lsl #3]
   1efe4:	cmp	r9, ip
   1efe8:	moveq	r8, r3
   1efec:	b	1efbc <__assert_fail@plt+0xdd14>
   1eff0:	str	r8, [sp, #16]
   1eff4:	cmp	r1, #0
   1eff8:	bge	1f070 <__assert_fail@plt+0xddc8>
   1effc:	ldr	r3, [sp, #16]
   1f000:	cmp	r3, #0
   1f004:	bge	1f09c <__assert_fail@plt+0xddf4>
   1f008:	add	r7, r7, #1
   1f00c:	ldr	r3, [r4, #20]
   1f010:	cmp	r7, r3
   1f014:	bge	1f174 <__assert_fail@plt+0xdecc>
   1f018:	ldr	r3, [r4, #24]
   1f01c:	ldr	r3, [r3, r7, lsl #2]
   1f020:	add	r3, r3, r3, lsl #1
   1f024:	ldr	ip, [sp, #20]
   1f028:	add	r2, ip, r3, lsl #3
   1f02c:	ldr	r1, [r2, #8]
   1f030:	cmp	sl, r1
   1f034:	ble	1f008 <__assert_fail@plt+0xdd60>
   1f038:	ldr	r1, [r2, #4]
   1f03c:	cmp	sl, r1
   1f040:	bgt	1f008 <__assert_fail@plt+0xdd60>
   1f044:	ldr	r0, [r6]
   1f048:	ldr	r3, [ip, r3, lsl #3]
   1f04c:	ldr	r9, [r0, r3, lsl #3]
   1f050:	ldr	r3, [r2, #12]
   1f054:	cmp	sl, r3
   1f058:	beq	1ef90 <__assert_fail@plt+0xdce8>
   1f05c:	ldr	r3, [r5, #4]
   1f060:	cmp	r3, #0
   1f064:	ldrgt	fp, [sp, #28]
   1f068:	bgt	1f128 <__assert_fail@plt+0xde80>
   1f06c:	b	1f008 <__assert_fail@plt+0xdd60>
   1f070:	ldr	r3, [sp, #24]
   1f074:	mov	r2, r5
   1f078:	mov	r0, r6
   1f07c:	bl	1a7f8 <__assert_fail@plt+0x9550>
   1f080:	cmp	r0, #0
   1f084:	bne	1f478 <__assert_fail@plt+0xe1d0>
   1f088:	cmp	r8, #0
   1f08c:	blt	1f008 <__assert_fail@plt+0xdd60>
   1f090:	ldr	r3, [r5, #4]
   1f094:	cmp	r3, #0
   1f098:	ble	1f008 <__assert_fail@plt+0xdd60>
   1f09c:	ldr	r9, [sp, #28]
   1f0a0:	b	1f0b4 <__assert_fail@plt+0xde0c>
   1f0a4:	add	r9, r9, #1
   1f0a8:	ldr	r3, [r5, #4]
   1f0ac:	cmp	r9, r3
   1f0b0:	bge	1f008 <__assert_fail@plt+0xdd60>
   1f0b4:	ldr	r3, [r5, #8]
   1f0b8:	ldr	fp, [r3, r9, lsl #2]
   1f0bc:	add	r8, fp, fp, lsl #1
   1f0c0:	lsl	r8, r8, #2
   1f0c4:	ldr	r0, [r6, #28]
   1f0c8:	ldr	r1, [sp, #16]
   1f0cc:	add	r0, r0, r8
   1f0d0:	bl	1506c <__assert_fail@plt+0x3dc4>
   1f0d4:	cmp	r0, #0
   1f0d8:	bne	1f0a4 <__assert_fail@plt+0xddfc>
   1f0dc:	ldr	r0, [r6, #24]
   1f0e0:	ldr	r1, [sp, #16]
   1f0e4:	add	r0, r0, r8
   1f0e8:	bl	1506c <__assert_fail@plt+0x3dc4>
   1f0ec:	cmp	r0, #0
   1f0f0:	bne	1f0a4 <__assert_fail@plt+0xddfc>
   1f0f4:	ldr	r3, [sp, #24]
   1f0f8:	mov	r2, r5
   1f0fc:	mov	r1, fp
   1f100:	mov	r0, r6
   1f104:	bl	1a7f8 <__assert_fail@plt+0x9550>
   1f108:	cmp	r0, #0
   1f10c:	bne	1f480 <__assert_fail@plt+0xe1d8>
   1f110:	sub	r9, r9, #1
   1f114:	b	1f0a4 <__assert_fail@plt+0xddfc>
   1f118:	add	fp, fp, #1
   1f11c:	ldr	r3, [r5, #4]
   1f120:	cmp	fp, r3
   1f124:	bge	1f008 <__assert_fail@plt+0xdd60>
   1f128:	ldr	r3, [r5, #8]
   1f12c:	ldr	r1, [r3, fp, lsl #2]
   1f130:	ldr	r2, [r6]
   1f134:	add	r3, r2, r1, lsl #3
   1f138:	ldrb	r3, [r3, #4]
   1f13c:	sub	r3, r3, #8
   1f140:	cmp	r3, #1
   1f144:	bhi	1f118 <__assert_fail@plt+0xde70>
   1f148:	ldr	r3, [r2, r1, lsl #3]
   1f14c:	cmp	r9, r3
   1f150:	bne	1f118 <__assert_fail@plt+0xde70>
   1f154:	ldr	r3, [sp, #24]
   1f158:	mov	r2, r5
   1f15c:	mov	r0, r6
   1f160:	bl	1a7f8 <__assert_fail@plt+0x9550>
   1f164:	cmp	r0, #0
   1f168:	beq	1f118 <__assert_fail@plt+0xde70>
   1f16c:	mov	r8, r0
   1f170:	b	1ef54 <__assert_fail@plt+0xdcac>
   1f174:	ldr	fp, [sp, #24]
   1f178:	mov	r3, #0
   1f17c:	str	r3, [sp, #76]	; 0x4c
   1f180:	b	1eeec <__assert_fail@plt+0xdc44>
   1f184:	ldr	r4, [r1]
   1f188:	mov	r2, r5
   1f18c:	mov	r1, r6
   1f190:	add	r0, sp, #76	; 0x4c
   1f194:	bl	1d7d0 <__assert_fail@plt+0xc528>
   1f198:	str	r0, [r4, sl, lsl #2]
   1f19c:	ldr	r8, [sp, #76]	; 0x4c
   1f1a0:	b	1ef54 <__assert_fail@plt+0xdcac>
   1f1a4:	mov	r1, sl
   1f1a8:	ldr	r5, [sp, #8]
   1f1ac:	mov	r0, r5
   1f1b0:	bl	15a64 <__assert_fail@plt+0x47bc>
   1f1b4:	str	r0, [sp, #32]
   1f1b8:	cmn	r0, #1
   1f1bc:	moveq	r8, #0
   1f1c0:	beq	1ef54 <__assert_fail@plt+0xdcac>
   1f1c4:	ldr	r7, [r5, #84]	; 0x54
   1f1c8:	mov	r3, #0
   1f1cc:	str	r3, [sp, #48]	; 0x30
   1f1d0:	ldr	r3, [fp, #4]
   1f1d4:	cmp	r3, #0
   1f1d8:	ble	1f458 <__assert_fail@plt+0xe1b0>
   1f1dc:	add	r3, r0, r0, lsl #1
   1f1e0:	lsl	r3, r3, #3
   1f1e4:	str	r3, [sp, #36]	; 0x24
   1f1e8:	mov	r3, #0
   1f1ec:	add	r2, r4, #16
   1f1f0:	str	r2, [sp, #24]
   1f1f4:	str	sl, [sp, #28]
   1f1f8:	mov	sl, r3
   1f1fc:	b	1f218 <__assert_fail@plt+0xdf70>
   1f200:	cmp	r2, #4
   1f204:	beq	1f24c <__assert_fail@plt+0xdfa4>
   1f208:	add	sl, sl, #1
   1f20c:	ldr	r3, [fp, #4]
   1f210:	cmp	sl, r3
   1f214:	bge	1f42c <__assert_fail@plt+0xe184>
   1f218:	ldr	r3, [fp, #8]
   1f21c:	ldr	r6, [r3, sl, lsl #2]
   1f220:	ldr	r3, [r7]
   1f224:	add	r3, r3, r6, lsl #3
   1f228:	ldrb	r2, [r3, #4]
   1f22c:	ldr	r3, [r4, #8]
   1f230:	cmp	r6, r3
   1f234:	bne	1f200 <__assert_fail@plt+0xdf58>
   1f238:	ldr	r3, [r4, #12]
   1f23c:	ldr	r1, [sp, #28]
   1f240:	cmp	r1, r3
   1f244:	bne	1f200 <__assert_fail@plt+0xdf58>
   1f248:	b	1f208 <__assert_fail@plt+0xdf60>
   1f24c:	ldr	r3, [sp, #8]
   1f250:	ldr	r5, [r3, #116]	; 0x74
   1f254:	ldr	r3, [sp, #36]	; 0x24
   1f258:	add	r5, r5, r3
   1f25c:	add	r3, r6, r6, lsl #1
   1f260:	lsl	r3, r3, #2
   1f264:	str	r3, [sp, #20]
   1f268:	lsl	r3, r6, #2
   1f26c:	str	r3, [sp, #16]
   1f270:	ldr	r3, [sp, #32]
   1f274:	str	fp, [sp, #40]	; 0x28
   1f278:	str	sl, [sp, #44]	; 0x2c
   1f27c:	mov	sl, r3
   1f280:	ldr	fp, [sp, #28]
   1f284:	b	1f328 <__assert_fail@plt+0xe080>
   1f288:	ldr	r3, [r7, #20]
   1f28c:	ldr	r2, [sp, #20]
   1f290:	add	r3, r3, r2
   1f294:	ldr	r3, [r3, #8]
   1f298:	ldr	r8, [r3]
   1f29c:	b	1f358 <__assert_fail@plt+0xe0b0>
   1f2a0:	ldrd	r2, [r4]
   1f2a4:	strd	r2, [sp, #48]	; 0x30
   1f2a8:	ldrd	r2, [r4, #8]
   1f2ac:	strd	r2, [sp, #56]	; 0x38
   1f2b0:	ldrd	r2, [r4, #16]
   1f2b4:	strd	r2, [sp, #64]	; 0x40
   1f2b8:	ldr	r3, [r4, #24]
   1f2bc:	str	r3, [sp, #72]	; 0x48
   1f2c0:	ldr	r1, [sp, #24]
   1f2c4:	add	r0, sp, #64	; 0x40
   1f2c8:	bl	16658 <__assert_fail@plt+0x53b0>
   1f2cc:	cmp	r0, #0
   1f2d0:	beq	1f3b8 <__assert_fail@plt+0xe110>
   1f2d4:	mov	r8, r0
   1f2d8:	b	1f438 <__assert_fail@plt+0xe190>
   1f2dc:	ldr	r3, [sp, #48]	; 0x30
   1f2e0:	ldr	r2, [sp, #12]
   1f2e4:	str	r5, [r3, r2]
   1f2e8:	mov	r1, sl
   1f2ec:	add	r0, sp, #64	; 0x40
   1f2f0:	bl	1506c <__assert_fail@plt+0x3dc4>
   1f2f4:	sub	r1, r0, #1
   1f2f8:	add	r0, sp, #64	; 0x40
   1f2fc:	bl	15104 <__assert_fail@plt+0x3e5c>
   1f300:	add	r5, sl, sl, lsl #1
   1f304:	ldr	r3, [sp, #8]
   1f308:	ldr	r3, [r3, #116]	; 0x74
   1f30c:	add	r5, r3, r5, lsl #3
   1f310:	add	sl, sl, #1
   1f314:	add	r2, r5, #24
   1f318:	ldrb	r3, [r5, #20]
   1f31c:	cmp	r3, #0
   1f320:	beq	1f420 <__assert_fail@plt+0xe178>
   1f324:	mov	r5, r2
   1f328:	ldr	r3, [r5]
   1f32c:	cmp	r6, r3
   1f330:	bne	1f310 <__assert_fail@plt+0xe068>
   1f334:	ldr	r3, [r5, #12]
   1f338:	ldr	r2, [r5, #8]
   1f33c:	sub	r3, r3, r2
   1f340:	add	r9, fp, r3
   1f344:	cmp	r3, #0
   1f348:	beq	1f288 <__assert_fail@plt+0xdfe0>
   1f34c:	ldr	r3, [r7, #12]
   1f350:	ldr	r2, [sp, #16]
   1f354:	ldr	r8, [r3, r2]
   1f358:	ldr	r3, [r4, #12]
   1f35c:	cmp	r9, r3
   1f360:	bgt	1f310 <__assert_fail@plt+0xe068>
   1f364:	ldr	r3, [r4]
   1f368:	ldr	r0, [r3, r9, lsl #2]
   1f36c:	cmp	r0, #0
   1f370:	beq	1f310 <__assert_fail@plt+0xe068>
   1f374:	mov	r1, r8
   1f378:	add	r0, r0, #4
   1f37c:	bl	1506c <__assert_fail@plt+0x3dc4>
   1f380:	cmp	r0, #0
   1f384:	beq	1f310 <__assert_fail@plt+0xe068>
   1f388:	str	r9, [sp, #4]
   1f38c:	str	r8, [sp]
   1f390:	mov	r3, fp
   1f394:	mov	r2, r6
   1f398:	ldr	r1, [sp, #24]
   1f39c:	ldr	r0, [sp, #8]
   1f3a0:	bl	15b20 <__assert_fail@plt+0x4878>
   1f3a4:	cmp	r0, #0
   1f3a8:	bne	1f310 <__assert_fail@plt+0xe068>
   1f3ac:	ldr	r3, [sp, #48]	; 0x30
   1f3b0:	cmp	r3, #0
   1f3b4:	beq	1f2a0 <__assert_fail@plt+0xdff8>
   1f3b8:	str	r6, [sp, #56]	; 0x38
   1f3bc:	str	fp, [sp, #60]	; 0x3c
   1f3c0:	mov	r1, sl
   1f3c4:	add	r0, sp, #64	; 0x40
   1f3c8:	bl	186f4 <__assert_fail@plt+0x744c>
   1f3cc:	cmp	r0, #0
   1f3d0:	beq	1f434 <__assert_fail@plt+0xe18c>
   1f3d4:	ldr	r3, [sp, #48]	; 0x30
   1f3d8:	ldr	r2, [sp, #12]
   1f3dc:	ldr	r5, [r3, r2]
   1f3e0:	add	r1, sp, #48	; 0x30
   1f3e4:	ldr	r0, [sp, #8]
   1f3e8:	bl	1f488 <__assert_fail@plt+0xe1e0>
   1f3ec:	cmp	r0, #0
   1f3f0:	bne	1f450 <__assert_fail@plt+0xe1a8>
   1f3f4:	ldr	r1, [r4, #4]
   1f3f8:	cmp	r1, #0
   1f3fc:	beq	1f2dc <__assert_fail@plt+0xe034>
   1f400:	add	r3, fp, #1
   1f404:	ldr	r2, [sp, #48]	; 0x30
   1f408:	mov	r0, r7
   1f40c:	bl	1d9fc <__assert_fail@plt+0xc754>
   1f410:	cmp	r0, #0
   1f414:	beq	1f2dc <__assert_fail@plt+0xe034>
   1f418:	mov	r8, r0
   1f41c:	b	1f438 <__assert_fail@plt+0xe190>
   1f420:	ldr	fp, [sp, #40]	; 0x28
   1f424:	ldr	sl, [sp, #44]	; 0x2c
   1f428:	b	1f208 <__assert_fail@plt+0xdf60>
   1f42c:	mov	r8, #0
   1f430:	b	1f438 <__assert_fail@plt+0xe190>
   1f434:	mov	r8, #12
   1f438:	ldr	r3, [sp, #48]	; 0x30
   1f43c:	cmp	r3, #0
   1f440:	beq	1ef54 <__assert_fail@plt+0xdcac>
   1f444:	ldr	r0, [sp, #72]	; 0x48
   1f448:	bl	23f40 <__assert_fail@plt+0x12c98>
   1f44c:	b	1ef54 <__assert_fail@plt+0xdcac>
   1f450:	mov	r8, r0
   1f454:	b	1f438 <__assert_fail@plt+0xe190>
   1f458:	mov	r8, #0
   1f45c:	b	1ef54 <__assert_fail@plt+0xdcac>
   1f460:	ldr	r8, [sp, #28]
   1f464:	b	1ef54 <__assert_fail@plt+0xdcac>
   1f468:	mov	r8, #12
   1f46c:	b	1ef54 <__assert_fail@plt+0xdcac>
   1f470:	mov	r8, #12
   1f474:	b	1ef54 <__assert_fail@plt+0xdcac>
   1f478:	mov	r8, r0
   1f47c:	b	1ef54 <__assert_fail@plt+0xdcac>
   1f480:	mov	r8, r0
   1f484:	b	1ef54 <__assert_fail@plt+0xdcac>
   1f488:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f48c:	strd	r6, [sp, #8]
   1f490:	strd	r8, [sp, #16]
   1f494:	strd	sl, [sp, #24]
   1f498:	str	lr, [sp, #32]
   1f49c:	sub	sp, sp, #60	; 0x3c
   1f4a0:	mov	sl, r0
   1f4a4:	mov	r7, r1
   1f4a8:	ldr	fp, [r1, #12]
   1f4ac:	ldr	r1, [r1, #8]
   1f4b0:	add	r0, sp, #44	; 0x2c
   1f4b4:	bl	16134 <__assert_fail@plt+0x4e8c>
   1f4b8:	subs	r4, r0, #0
   1f4bc:	bne	1f748 <__assert_fail@plt+0xe4a0>
   1f4c0:	add	r3, sp, #44	; 0x2c
   1f4c4:	mov	r2, fp
   1f4c8:	mov	r1, r7
   1f4cc:	mov	r0, sl
   1f4d0:	bl	1edcc <__assert_fail@plt+0xdb24>
   1f4d4:	subs	r3, r0, #0
   1f4d8:	str	r3, [sp, #32]
   1f4dc:	bne	1f72c <__assert_fail@plt+0xe484>
   1f4e0:	cmp	fp, #0
   1f4e4:	ble	1f734 <__assert_fail@plt+0xe48c>
   1f4e8:	str	r3, [sp, #20]
   1f4ec:	mov	r9, sl
   1f4f0:	b	1f688 <__assert_fail@plt+0xe3e0>
   1f4f4:	ldr	r2, [sp, #16]
   1f4f8:	mov	r1, #0
   1f4fc:	bl	111c4 <memset@plt>
   1f500:	ldr	r0, [sp, #52]	; 0x34
   1f504:	bl	23f40 <__assert_fail@plt+0x12c98>
   1f508:	ldr	r4, [sp, #32]
   1f50c:	b	1f748 <__assert_fail@plt+0xe4a0>
   1f510:	ldr	r3, [r7, #12]
   1f514:	str	r3, [sp, #24]
   1f518:	ldr	r2, [sp, #12]
   1f51c:	ldr	r3, [r2, #84]	; 0x54
   1f520:	mov	r0, r3
   1f524:	mov	r3, r9
   1f528:	mov	r1, fp
   1f52c:	str	r0, [sp, #36]	; 0x24
   1f530:	bl	1a4a8 <__assert_fail@plt+0x9200>
   1f534:	subs	r6, r0, #0
   1f538:	ble	1f650 <__assert_fail@plt+0xe3a8>
   1f53c:	add	r3, r9, r6
   1f540:	ldr	r2, [sp, #24]
   1f544:	cmp	r2, r3
   1f548:	blt	1f57c <__assert_fail@plt+0xe2d4>
   1f54c:	ldr	r2, [r7]
   1f550:	ldr	r0, [r2, r3, lsl #2]
   1f554:	cmp	r0, #0
   1f558:	beq	1f5fc <__assert_fail@plt+0xe354>
   1f55c:	ldr	r3, [sp, #36]	; 0x24
   1f560:	ldr	r3, [r3, #12]
   1f564:	ldr	r2, [sp, #8]
   1f568:	ldr	r1, [r3, r2, lsl #2]
   1f56c:	add	r0, r0, #4
   1f570:	bl	1506c <__assert_fail@plt+0x3dc4>
   1f574:	cmp	r0, #0
   1f578:	beq	1f5fc <__assert_fail@plt+0xe354>
   1f57c:	ldr	r3, [r7, #20]
   1f580:	cmp	r3, #0
   1f584:	beq	1f5b4 <__assert_fail@plt+0xe30c>
   1f588:	ldr	r3, [r4, #12]
   1f58c:	ldr	r2, [sp, #8]
   1f590:	ldr	r2, [r3, r2, lsl #2]
   1f594:	str	r9, [sp, #4]
   1f598:	str	fp, [sp]
   1f59c:	add	r3, r9, r6
   1f5a0:	ldr	r1, [sp, #28]
   1f5a4:	ldr	r0, [sp, #12]
   1f5a8:	bl	15b20 <__assert_fail@plt+0x4878>
   1f5ac:	cmp	r0, #0
   1f5b0:	bne	1f5c8 <__assert_fail@plt+0xe320>
   1f5b4:	mov	r1, fp
   1f5b8:	add	r0, sp, #44	; 0x2c
   1f5bc:	bl	186f4 <__assert_fail@plt+0x744c>
   1f5c0:	cmp	r0, #0
   1f5c4:	beq	1f73c <__assert_fail@plt+0xe494>
   1f5c8:	add	sl, sl, #1
   1f5cc:	ldr	r3, [r5, #20]
   1f5d0:	cmp	sl, r3
   1f5d4:	bge	1f65c <__assert_fail@plt+0xe3b4>
   1f5d8:	ldr	r3, [r5, #24]
   1f5dc:	ldr	fp, [r3, sl, lsl #2]
   1f5e0:	str	fp, [sp, #8]
   1f5e4:	lsl	r8, fp, #3
   1f5e8:	ldr	r3, [r4]
   1f5ec:	add	r3, r3, r8
   1f5f0:	ldrb	r3, [r3, #6]
   1f5f4:	tst	r3, #16
   1f5f8:	bne	1f510 <__assert_fail@plt+0xe268>
   1f5fc:	ldr	r1, [r4]
   1f600:	mov	r2, r9
   1f604:	add	r1, r1, r8
   1f608:	ldr	r0, [sp, #12]
   1f60c:	bl	19198 <__assert_fail@plt+0x7ef0>
   1f610:	cmp	r0, #0
   1f614:	beq	1f5c8 <__assert_fail@plt+0xe320>
   1f618:	ldr	r3, [r7]
   1f61c:	ldr	r2, [sp, #16]
   1f620:	ldr	r0, [r3, r2]
   1f624:	cmp	r0, #0
   1f628:	beq	1f5c8 <__assert_fail@plt+0xe320>
   1f62c:	ldr	r3, [r4, #12]
   1f630:	ldr	r2, [sp, #8]
   1f634:	ldr	r1, [r3, r2, lsl #2]
   1f638:	add	r0, r0, #4
   1f63c:	bl	1506c <__assert_fail@plt+0x3dc4>
   1f640:	cmp	r0, #0
   1f644:	beq	1f5c8 <__assert_fail@plt+0xe320>
   1f648:	mov	r6, #1
   1f64c:	b	1f57c <__assert_fail@plt+0xe2d4>
   1f650:	cmp	r6, #0
   1f654:	beq	1f5fc <__assert_fail@plt+0xe354>
   1f658:	b	1f57c <__assert_fail@plt+0xe2d4>
   1f65c:	mov	fp, r9
   1f660:	ldr	r9, [sp, #12]
   1f664:	add	r3, sp, #44	; 0x2c
   1f668:	mov	r2, fp
   1f66c:	mov	r1, r7
   1f670:	mov	r0, r9
   1f674:	bl	1edcc <__assert_fail@plt+0xdb24>
   1f678:	cmp	r0, #0
   1f67c:	bne	1f768 <__assert_fail@plt+0xe4c0>
   1f680:	cmp	fp, #0
   1f684:	beq	1f724 <__assert_fail@plt+0xe47c>
   1f688:	ldr	r0, [r7]
   1f68c:	lsl	r3, fp, #2
   1f690:	str	r3, [sp, #16]
   1f694:	ldr	r3, [r0, fp, lsl #2]
   1f698:	cmp	r3, #0
   1f69c:	ldreq	r3, [sp, #20]
   1f6a0:	addeq	r3, r3, #1
   1f6a4:	ldrne	r3, [sp, #32]
   1f6a8:	str	r3, [sp, #20]
   1f6ac:	ldr	r3, [r9, #120]	; 0x78
   1f6b0:	ldr	r2, [sp, #20]
   1f6b4:	cmp	r3, r2
   1f6b8:	blt	1f4f4 <__assert_fail@plt+0xe24c>
   1f6bc:	mov	r3, #0
   1f6c0:	str	r3, [sp, #48]	; 0x30
   1f6c4:	sub	fp, fp, #1
   1f6c8:	ldr	r3, [r9, #100]	; 0x64
   1f6cc:	ldr	r2, [sp, #16]
   1f6d0:	add	r3, r3, r2
   1f6d4:	ldr	r5, [r3, #-4]
   1f6d8:	cmp	r5, #0
   1f6dc:	beq	1f664 <__assert_fail@plt+0xe3bc>
   1f6e0:	ldr	r4, [r9, #84]	; 0x54
   1f6e4:	ldr	r3, [r5, #20]
   1f6e8:	cmp	r3, #0
   1f6ec:	ble	1f664 <__assert_fail@plt+0xe3bc>
   1f6f0:	ldr	r3, [r5, #24]
   1f6f4:	ldr	r6, [r3]
   1f6f8:	str	r6, [sp, #8]
   1f6fc:	lsl	r8, r6, #3
   1f700:	ldr	r3, [r4]
   1f704:	add	r3, r3, r8
   1f708:	ldr	sl, [sp, #32]
   1f70c:	add	r2, r7, #16
   1f710:	str	r2, [sp, #28]
   1f714:	str	r9, [sp, #12]
   1f718:	mov	r9, fp
   1f71c:	mov	fp, r6
   1f720:	b	1f5f0 <__assert_fail@plt+0xe348>
   1f724:	mov	r4, fp
   1f728:	b	1f740 <__assert_fail@plt+0xe498>
   1f72c:	ldr	r4, [sp, #32]
   1f730:	b	1f740 <__assert_fail@plt+0xe498>
   1f734:	ldr	r4, [sp, #32]
   1f738:	b	1f740 <__assert_fail@plt+0xe498>
   1f73c:	mov	r4, #12
   1f740:	ldr	r0, [sp, #52]	; 0x34
   1f744:	bl	23f40 <__assert_fail@plt+0x12c98>
   1f748:	mov	r0, r4
   1f74c:	add	sp, sp, #60	; 0x3c
   1f750:	ldrd	r4, [sp]
   1f754:	ldrd	r6, [sp, #8]
   1f758:	ldrd	r8, [sp, #16]
   1f75c:	ldrd	sl, [sp, #24]
   1f760:	add	sp, sp, #32
   1f764:	pop	{pc}		; (ldr pc, [sp], #4)
   1f768:	mov	r4, r0
   1f76c:	b	1f740 <__assert_fail@plt+0xe498>
   1f770:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f774:	strd	r6, [sp, #8]
   1f778:	strd	r8, [sp, #16]
   1f77c:	strd	sl, [sp, #24]
   1f780:	str	lr, [sp, #32]
   1f784:	sub	sp, sp, #420	; 0x1a4
   1f788:	mov	r5, r0
   1f78c:	str	r0, [sp, #20]
   1f790:	str	r1, [sp, #44]	; 0x2c
   1f794:	str	r2, [sp, #60]	; 0x3c
   1f798:	mov	r4, r3
   1f79c:	ldr	r6, [sp, #456]	; 0x1c8
   1f7a0:	ldr	sl, [r0]
   1f7a4:	mov	r2, #136	; 0x88
   1f7a8:	mov	r1, #0
   1f7ac:	add	r0, sp, #276	; 0x114
   1f7b0:	bl	111c4 <memset@plt>
   1f7b4:	str	sl, [sp, #360]	; 0x168
   1f7b8:	ldr	r2, [r5, #16]
   1f7bc:	str	r2, [sp, #32]
   1f7c0:	cmp	r2, #0
   1f7c4:	beq	1f7ec <__assert_fail@plt+0xe544>
   1f7c8:	ldrb	r2, [r5, #28]
   1f7cc:	ubfx	r3, r2, #3, #1
   1f7d0:	cmp	r4, r6
   1f7d4:	moveq	r3, #0
   1f7d8:	andne	r3, r3, #1
   1f7dc:	cmp	r3, #0
   1f7e0:	moveq	r3, #0
   1f7e4:	streq	r3, [sp, #32]
   1f7e8:	bne	1fb38 <__assert_fail@plt+0xe890>
   1f7ec:	ldr	r3, [sp, #20]
   1f7f0:	ldr	r3, [r3, #24]
   1f7f4:	ldr	r2, [sp, #464]	; 0x1d0
   1f7f8:	cmp	r3, r2
   1f7fc:	subcc	r2, r2, #1
   1f800:	subcc	r3, r2, r3
   1f804:	movcs	r3, #0
   1f808:	str	r3, [sp, #72]	; 0x48
   1f80c:	ldr	ip, [sp, #20]
   1f810:	ldr	r3, [ip, #8]
   1f814:	cmp	r3, #0
   1f818:	beq	20d34 <__assert_fail@plt+0xfa8c>
   1f81c:	ldr	r3, [sl, #36]	; 0x24
   1f820:	cmp	r3, #0
   1f824:	beq	20d40 <__assert_fail@plt+0xfa98>
   1f828:	ldr	r2, [sl, #40]	; 0x28
   1f82c:	cmp	r2, #0
   1f830:	beq	20d4c <__assert_fail@plt+0xfaa4>
   1f834:	ldr	r1, [sl, #44]	; 0x2c
   1f838:	cmp	r1, #0
   1f83c:	beq	20d58 <__assert_fail@plt+0xfab0>
   1f840:	ldr	r0, [sl, #48]	; 0x30
   1f844:	cmp	r0, #0
   1f848:	beq	20d64 <__assert_fail@plt+0xfabc>
   1f84c:	ldr	r3, [r3, #8]
   1f850:	cmp	r3, #0
   1f854:	bne	1f890 <__assert_fail@plt+0xe5e8>
   1f858:	ldr	r3, [r2, #8]
   1f85c:	cmp	r3, #0
   1f860:	bne	1f890 <__assert_fail@plt+0xe5e8>
   1f864:	ldr	r2, [r1, #8]
   1f868:	cmp	r2, #0
   1f86c:	beq	1f87c <__assert_fail@plt+0xe5d4>
   1f870:	ldrsb	r2, [ip, #28]
   1f874:	cmp	r2, #0
   1f878:	blt	1f890 <__assert_fail@plt+0xe5e8>
   1f87c:	cmp	r4, #0
   1f880:	cmpne	r6, #0
   1f884:	bne	20d70 <__assert_fail@plt+0xfac8>
   1f888:	mov	r6, r3
   1f88c:	mov	r4, r3
   1f890:	ldr	r3, [sp, #464]	; 0x1d0
   1f894:	ldr	r2, [sp, #72]	; 0x48
   1f898:	subs	r3, r3, r2
   1f89c:	str	r3, [sp, #64]	; 0x40
   1f8a0:	movne	r5, #1
   1f8a4:	bne	1f8b4 <__assert_fail@plt+0xe60c>
   1f8a8:	ldr	r5, [sl, #76]	; 0x4c
   1f8ac:	adds	r5, r5, #0
   1f8b0:	movne	r5, #1
   1f8b4:	ldr	r3, [sp, #20]
   1f8b8:	ldr	ip, [r3, #20]
   1f8bc:	str	ip, [sp, #68]	; 0x44
   1f8c0:	ldr	r2, [r3, #12]
   1f8c4:	ldr	r0, [sl, #92]	; 0x5c
   1f8c8:	ldr	r3, [sl, #8]
   1f8cc:	add	r3, r3, #1
   1f8d0:	cmp	r3, r0
   1f8d4:	movlt	r3, r0
   1f8d8:	ldr	lr, [sp, #60]	; 0x3c
   1f8dc:	add	r1, lr, #1
   1f8e0:	ldr	r7, [sp, #44]	; 0x2c
   1f8e4:	str	r7, [sp, #276]	; 0x114
   1f8e8:	str	lr, [sp, #324]	; 0x144
   1f8ec:	str	lr, [sp, #320]	; 0x140
   1f8f0:	mov	r7, ip
   1f8f4:	str	ip, [sp, #340]	; 0x154
   1f8f8:	and	ip, r2, #4194304	; 0x400000
   1f8fc:	ubfx	r2, r2, #22, #1
   1f900:	strb	r2, [sp, #348]	; 0x15c
   1f904:	orrs	r2, r7, ip
   1f908:	movne	r2, #1
   1f90c:	moveq	r2, #0
   1f910:	strb	r2, [sp, #351]	; 0x15f
   1f914:	str	r0, [sp, #356]	; 0x164
   1f918:	ldrb	r2, [sl, #88]	; 0x58
   1f91c:	ubfx	r0, r2, #2, #1
   1f920:	strb	r0, [sp, #349]	; 0x15d
   1f924:	ubfx	r2, r2, #3, #1
   1f928:	strb	r2, [sp, #350]	; 0x15e
   1f92c:	str	lr, [sp, #332]	; 0x14c
   1f930:	str	lr, [sp, #328]	; 0x148
   1f934:	cmp	r3, r1
   1f938:	movlt	r1, r3
   1f93c:	add	r0, sp, #276	; 0x114
   1f940:	bl	15c20 <__assert_fail@plt+0x4978>
   1f944:	subs	r2, r0, #0
   1f948:	str	r2, [sp, #76]	; 0x4c
   1f94c:	bne	20cc8 <__assert_fail@plt+0xfa20>
   1f950:	add	r3, sl, #96	; 0x60
   1f954:	str	r3, [sp, #344]	; 0x158
   1f958:	ldrb	r3, [sl, #88]	; 0x58
   1f95c:	ubfx	r3, r3, #4, #1
   1f960:	strb	r3, [sp, #354]	; 0x162
   1f964:	ldrb	r3, [sp, #351]	; 0x15f
   1f968:	cmp	r3, #0
   1f96c:	beq	20e78 <__assert_fail@plt+0xfbd0>
   1f970:	mov	r3, r2
   1f974:	str	r3, [sp, #304]	; 0x130
   1f978:	str	r3, [sp, #308]	; 0x134
   1f97c:	ldr	r3, [sp, #460]	; 0x1cc
   1f980:	str	r3, [sp, #332]	; 0x14c
   1f984:	str	r3, [sp, #328]	; 0x148
   1f988:	ldr	r3, [sp, #20]
   1f98c:	ldrb	r3, [r3, #28]
   1f990:	ubfx	r3, r3, #7, #1
   1f994:	strb	r3, [sp, #353]	; 0x161
   1f998:	ldr	r7, [sl, #76]	; 0x4c
   1f99c:	lsl	r7, r7, #1
   1f9a0:	ldr	r3, [sp, #472]	; 0x1d8
   1f9a4:	str	r3, [sp, #364]	; 0x16c
   1f9a8:	mvn	r3, #0
   1f9ac:	str	r3, [sp, #368]	; 0x170
   1f9b0:	cmp	r7, #0
   1f9b4:	ble	1f9f4 <__assert_fail@plt+0xe74c>
   1f9b8:	movw	r3, #43690	; 0xaaaa
   1f9bc:	movt	r3, #2730	; 0xaaa
   1f9c0:	cmp	r7, r3
   1f9c4:	bhi	20e6c <__assert_fail@plt+0xfbc4>
   1f9c8:	add	r0, r7, r7, lsl #1
   1f9cc:	lsl	r0, r0, #3
   1f9d0:	bl	23d48 <__assert_fail@plt+0x12aa0>
   1f9d4:	str	r0, [sp, #392]	; 0x188
   1f9d8:	lsl	r0, r7, #2
   1f9dc:	bl	23d48 <__assert_fail@plt+0x12aa0>
   1f9e0:	str	r0, [sp, #408]	; 0x198
   1f9e4:	ldr	r3, [sp, #392]	; 0x188
   1f9e8:	cmp	r0, #0
   1f9ec:	cmpne	r3, #0
   1f9f0:	beq	20e6c <__assert_fail@plt+0xfbc4>
   1f9f4:	str	r7, [sp, #388]	; 0x184
   1f9f8:	mov	r3, #1
   1f9fc:	str	r3, [sp, #396]	; 0x18c
   1fa00:	str	r7, [sp, #404]	; 0x194
   1fa04:	ldr	r3, [sp, #64]	; 0x40
   1fa08:	cmp	r3, #1
   1fa0c:	bls	1fb50 <__assert_fail@plt+0xe8a8>
   1fa10:	ldr	r0, [sp, #312]	; 0x138
   1fa14:	cmn	r0, #-1073741822	; 0xc0000002
   1fa18:	bhi	20cd4 <__assert_fail@plt+0xfa2c>
   1fa1c:	add	r0, r0, #1
   1fa20:	lsl	r0, r0, #2
   1fa24:	bl	23d48 <__assert_fail@plt+0x12aa0>
   1fa28:	str	r0, [sp, #376]	; 0x178
   1fa2c:	cmp	r0, #0
   1fa30:	beq	20ce0 <__assert_fail@plt+0xfa38>
   1fa34:	str	r4, [sp, #412]	; 0x19c
   1fa38:	ldr	r3, [sp, #472]	; 0x1d8
   1fa3c:	and	r3, r3, #1
   1fa40:	cmp	r3, #0
   1fa44:	movne	r3, #4
   1fa48:	moveq	r3, #6
   1fa4c:	str	r3, [sp, #336]	; 0x150
   1fa50:	cmp	r4, r6
   1fa54:	mvngt	r3, #0
   1fa58:	movle	r3, #1
   1fa5c:	str	r3, [sp, #92]	; 0x5c
   1fa60:	movlt	r3, r4
   1fa64:	movge	r3, r6
   1fa68:	str	r3, [sp, #56]	; 0x38
   1fa6c:	movge	r3, r4
   1fa70:	movlt	r3, r6
   1fa74:	str	r3, [sp, #48]	; 0x30
   1fa78:	ldr	r3, [sl, #92]	; 0x5c
   1fa7c:	str	r3, [sp, #88]	; 0x58
   1fa80:	ldr	r2, [sp, #32]
   1fa84:	cmp	r2, #0
   1fa88:	beq	1fb60 <__assert_fail@plt+0xe8b8>
   1fa8c:	cmp	r3, #1
   1fa90:	moveq	r3, #4
   1fa94:	beq	1fab8 <__assert_fail@plt+0xe810>
   1fa98:	ldr	r3, [sp, #20]
   1fa9c:	ldr	r3, [r3, #12]
   1faa0:	and	r3, r3, #4194304	; 0x400000
   1faa4:	ldr	r2, [sp, #68]	; 0x44
   1faa8:	orr	r3, r2, r3
   1faac:	cmp	r3, #0
   1fab0:	ldr	r3, [sp, #76]	; 0x4c
   1fab4:	moveq	r3, #4
   1fab8:	ldr	r2, [sp, #76]	; 0x4c
   1fabc:	cmp	r4, r6
   1fac0:	movle	r2, #2
   1fac4:	ldr	r1, [sp, #68]	; 0x44
   1fac8:	cmp	r1, #0
   1facc:	orrne	r3, r3, #1
   1fad0:	orr	r3, r3, r2
   1fad4:	str	r3, [sp, #80]	; 0x50
   1fad8:	ldr	r3, [sp, #48]	; 0x30
   1fadc:	cmp	r4, r3
   1fae0:	movle	r3, #0
   1fae4:	movgt	r3, #1
   1fae8:	ldr	r2, [sp, #56]	; 0x38
   1faec:	cmp	r4, r2
   1faf0:	orrlt	r3, r3, #1
   1faf4:	str	r3, [sp, #84]	; 0x54
   1faf8:	cmp	r3, #0
   1fafc:	bne	20cec <__assert_fail@plt+0xfa44>
   1fb00:	str	r5, [sp, #16]
   1fb04:	add	r3, sp, #416	; 0x1a0
   1fb08:	cmp	r4, r6
   1fb0c:	suble	r3, r3, #4
   1fb10:	movgt	r3, #0
   1fb14:	str	r3, [sp, #96]	; 0x60
   1fb18:	adds	r3, r3, #0
   1fb1c:	movne	r3, #1
   1fb20:	str	r3, [sp, #100]	; 0x64
   1fb24:	mov	r3, #65280	; 0xff00
   1fb28:	movt	r3, #3
   1fb2c:	str	r3, [sp, #40]	; 0x28
   1fb30:	str	sl, [sp, #52]	; 0x34
   1fb34:	b	20f0c <__assert_fail@plt+0xfc64>
   1fb38:	and	r2, r2, #1
   1fb3c:	cmp	r2, #0
   1fb40:	ldr	r3, [sp, #32]
   1fb44:	movne	r3, #0
   1fb48:	str	r3, [sp, #32]
   1fb4c:	b	1f7ec <__assert_fail@plt+0xe544>
   1fb50:	ldrb	r3, [sl, #88]	; 0x58
   1fb54:	tst	r3, #2
   1fb58:	beq	1fa34 <__assert_fail@plt+0xe78c>
   1fb5c:	b	1fa10 <__assert_fail@plt+0xe768>
   1fb60:	mov	r3, #8
   1fb64:	str	r3, [sp, #80]	; 0x50
   1fb68:	b	1fad8 <__assert_fail@plt+0xe830>
   1fb6c:	ldr	r5, [sp, #76]	; 0x4c
   1fb70:	ldr	r4, [sp, #412]	; 0x19c
   1fb74:	ldr	r3, [sp, #300]	; 0x12c
   1fb78:	sub	r3, r4, r3
   1fb7c:	ldr	r2, [sp, #308]	; 0x134
   1fb80:	cmp	r2, r3
   1fb84:	bhi	1fbac <__assert_fail@plt+0xe904>
   1fb88:	ldr	r2, [sp, #472]	; 0x1d8
   1fb8c:	mov	r1, r4
   1fb90:	add	r0, sp, #276	; 0x114
   1fb94:	bl	1a9dc <__assert_fail@plt+0x9734>
   1fb98:	subs	r3, r0, #0
   1fb9c:	str	r3, [sp, #24]
   1fba0:	bne	20d08 <__assert_fail@plt+0xfa60>
   1fba4:	ldr	r3, [sp, #300]	; 0x12c
   1fba8:	sub	r3, r4, r3
   1fbac:	ldr	r2, [sp, #304]	; 0x130
   1fbb0:	cmp	r2, r3
   1fbb4:	ldrhi	r2, [sp, #280]	; 0x118
   1fbb8:	ldrbhi	r3, [r2, r3]
   1fbbc:	movls	r3, r5
   1fbc0:	ldr	r2, [sp, #32]
   1fbc4:	ldrb	r3, [r2, r3]
   1fbc8:	cmp	r3, #0
   1fbcc:	bne	1fdc4 <__assert_fail@plt+0xeb1c>
   1fbd0:	ldr	r3, [sp, #92]	; 0x5c
   1fbd4:	add	r4, r4, r3
   1fbd8:	str	r4, [sp, #412]	; 0x19c
   1fbdc:	ldr	r3, [sp, #48]	; 0x30
   1fbe0:	cmp	r4, r3
   1fbe4:	movle	r3, #0
   1fbe8:	movgt	r3, #1
   1fbec:	ldr	r2, [sp, #56]	; 0x38
   1fbf0:	cmp	r4, r2
   1fbf4:	movge	r4, r3
   1fbf8:	orrlt	r4, r3, #1
   1fbfc:	cmp	r4, #0
   1fc00:	beq	1fb70 <__assert_fail@plt+0xe8c8>
   1fc04:	ldr	sl, [sp, #52]	; 0x34
   1fc08:	mov	r3, #1
   1fc0c:	str	r3, [sp, #24]
   1fc10:	b	1fd64 <__assert_fail@plt+0xeabc>
   1fc14:	ldr	r2, [sp, #412]	; 0x19c
   1fc18:	ldr	r3, [sp, #48]	; 0x30
   1fc1c:	cmp	r3, r2
   1fc20:	ble	1fdb4 <__assert_fail@plt+0xeb0c>
   1fc24:	ldr	r1, [sp, #44]	; 0x2c
   1fc28:	add	r3, r1, r2
   1fc2c:	ldrb	r2, [r1, r2]
   1fc30:	ldr	r1, [sp, #68]	; 0x44
   1fc34:	ldrb	r2, [r1, r2]
   1fc38:	ldr	r1, [sp, #32]
   1fc3c:	ldrb	r2, [r1, r2]
   1fc40:	cmp	r2, #0
   1fc44:	bne	1fdc4 <__assert_fail@plt+0xeb1c>
   1fc48:	ldr	r2, [sp, #44]	; 0x2c
   1fc4c:	sub	r1, r2, #1
   1fc50:	ldr	r0, [sp, #48]	; 0x30
   1fc54:	add	r1, r1, r0
   1fc58:	rsb	ip, r2, #1
   1fc5c:	ldr	lr, [sp, #32]
   1fc60:	ldr	r4, [sp, #68]	; 0x44
   1fc64:	add	r0, ip, r3
   1fc68:	cmp	r3, r1
   1fc6c:	beq	1fe98 <__assert_fail@plt+0xebf0>
   1fc70:	ldrb	r2, [r3, #1]!
   1fc74:	ldrb	r2, [r4, r2]
   1fc78:	ldrb	r2, [lr, r2]
   1fc7c:	cmp	r2, #0
   1fc80:	beq	1fc64 <__assert_fail@plt+0xe9bc>
   1fc84:	str	r0, [sp, #412]	; 0x19c
   1fc88:	b	1fdc4 <__assert_fail@plt+0xeb1c>
   1fc8c:	ldr	r2, [sp, #412]	; 0x19c
   1fc90:	ldr	r3, [sp, #48]	; 0x30
   1fc94:	cmp	r3, r2
   1fc98:	ble	1fdb4 <__assert_fail@plt+0xeb0c>
   1fc9c:	ldr	r1, [sp, #44]	; 0x2c
   1fca0:	add	r3, r1, r2
   1fca4:	ldrb	r2, [r1, r2]
   1fca8:	ldr	r1, [sp, #32]
   1fcac:	ldrb	r2, [r1, r2]
   1fcb0:	cmp	r2, #0
   1fcb4:	bne	1fdc4 <__assert_fail@plt+0xeb1c>
   1fcb8:	ldr	r2, [sp, #44]	; 0x2c
   1fcbc:	sub	r1, r2, #1
   1fcc0:	ldr	r0, [sp, #48]	; 0x30
   1fcc4:	add	r1, r1, r0
   1fcc8:	rsb	ip, r2, #1
   1fccc:	ldr	lr, [sp, #32]
   1fcd0:	add	r0, ip, r3
   1fcd4:	cmp	r1, r3
   1fcd8:	beq	1fdb0 <__assert_fail@plt+0xeb08>
   1fcdc:	ldrb	r2, [r3, #1]!
   1fce0:	ldrb	r2, [lr, r2]
   1fce4:	cmp	r2, #0
   1fce8:	beq	1fcd0 <__assert_fail@plt+0xea28>
   1fcec:	str	r0, [sp, #412]	; 0x19c
   1fcf0:	b	1fdc4 <__assert_fail@plt+0xeb1c>
   1fcf4:	ldr	r3, [sp, #412]	; 0x19c
   1fcf8:	ldr	r2, [sp, #56]	; 0x38
   1fcfc:	cmp	r2, r3
   1fd00:	bgt	1fda0 <__assert_fail@plt+0xeaf8>
   1fd04:	ldr	r1, [sp, #84]	; 0x54
   1fd08:	ldr	ip, [sp, #76]	; 0x4c
   1fd0c:	mov	r0, #1
   1fd10:	ldr	r4, [sp, #32]
   1fd14:	ldr	lr, [sp, #68]	; 0x44
   1fd18:	ldr	r6, [sp, #56]	; 0x38
   1fd1c:	ldr	r7, [sp, #44]	; 0x2c
   1fd20:	ldr	r5, [sp, #60]	; 0x3c
   1fd24:	cmp	r5, r3
   1fd28:	ldrbgt	r2, [r7, r3]
   1fd2c:	movle	r2, ip
   1fd30:	cmp	lr, #0
   1fd34:	ldrbne	r2, [lr, r2]
   1fd38:	ldrb	r2, [r4, r2]
   1fd3c:	cmp	r2, #0
   1fd40:	bne	1fee0 <__assert_fail@plt+0xec38>
   1fd44:	sub	r3, r3, #1
   1fd48:	mov	r1, r0
   1fd4c:	cmp	r3, r6
   1fd50:	bge	1fd24 <__assert_fail@plt+0xea7c>
   1fd54:	ldr	sl, [sp, #52]	; 0x34
   1fd58:	str	r3, [sp, #412]	; 0x19c
   1fd5c:	mov	r3, #1
   1fd60:	str	r3, [sp, #24]
   1fd64:	ldr	r0, [sp, #376]	; 0x178
   1fd68:	bl	23f40 <__assert_fail@plt+0x12c98>
   1fd6c:	ldr	r3, [sl, #76]	; 0x4c
   1fd70:	cmp	r3, #0
   1fd74:	bne	20d18 <__assert_fail@plt+0xfa70>
   1fd78:	add	r0, sp, #276	; 0x114
   1fd7c:	bl	18204 <__assert_fail@plt+0x6f5c>
   1fd80:	ldr	r0, [sp, #24]
   1fd84:	add	sp, sp, #420	; 0x1a4
   1fd88:	ldrd	r4, [sp]
   1fd8c:	ldrd	r6, [sp, #8]
   1fd90:	ldrd	r8, [sp, #16]
   1fd94:	ldrd	sl, [sp, #24]
   1fd98:	add	sp, sp, #32
   1fd9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1fda0:	ldr	sl, [sp, #52]	; 0x34
   1fda4:	mov	r3, #1
   1fda8:	str	r3, [sp, #24]
   1fdac:	b	1fd64 <__assert_fail@plt+0xeabc>
   1fdb0:	str	r0, [sp, #412]	; 0x19c
   1fdb4:	ldr	r3, [sp, #412]	; 0x19c
   1fdb8:	ldr	r2, [sp, #48]	; 0x30
   1fdbc:	cmp	r3, r2
   1fdc0:	beq	1fea0 <__assert_fail@plt+0xebf8>
   1fdc4:	ldr	r2, [sp, #472]	; 0x1d8
   1fdc8:	ldr	r1, [sp, #412]	; 0x19c
   1fdcc:	add	r0, sp, #276	; 0x114
   1fdd0:	bl	1a9dc <__assert_fail@plt+0x9734>
   1fdd4:	subs	r3, r0, #0
   1fdd8:	str	r3, [sp, #24]
   1fddc:	bne	20d10 <__assert_fail@plt+0xfa68>
   1fde0:	ldr	r3, [sp, #88]	; 0x58
   1fde4:	cmp	r3, #1
   1fde8:	beq	1fe08 <__assert_fail@plt+0xeb60>
   1fdec:	ldr	r3, [sp, #304]	; 0x130
   1fdf0:	cmp	r3, #0
   1fdf4:	beq	1fe08 <__assert_fail@plt+0xeb60>
   1fdf8:	ldr	r3, [sp, #284]	; 0x11c
   1fdfc:	ldr	r3, [r3]
   1fe00:	cmn	r3, #1
   1fe04:	beq	20ed4 <__assert_fail@plt+0xfc2c>
   1fe08:	mov	r3, #0
   1fe0c:	str	r3, [sp, #396]	; 0x18c
   1fe10:	str	r3, [sp, #384]	; 0x180
   1fe14:	str	r3, [sp, #380]	; 0x17c
   1fe18:	ldr	r4, [sp, #360]	; 0x168
   1fe1c:	ldr	r1, [sp, #316]	; 0x13c
   1fe20:	str	r1, [sp, #36]	; 0x24
   1fe24:	str	r3, [sp, #112]	; 0x70
   1fe28:	ldr	r5, [r4, #36]	; 0x24
   1fe2c:	ldrsb	r3, [r5, #52]	; 0x34
   1fe30:	cmp	r3, #0
   1fe34:	bge	1ff08 <__assert_fail@plt+0xec60>
   1fe38:	ldr	r2, [sp, #364]	; 0x16c
   1fe3c:	sub	r1, r1, #1
   1fe40:	add	r0, sp, #276	; 0x114
   1fe44:	bl	1908c <__assert_fail@plt+0x7de4>
   1fe48:	tst	r0, #1
   1fe4c:	bne	1ff04 <__assert_fail@plt+0xec5c>
   1fe50:	cmp	r0, #0
   1fe54:	beq	1ff08 <__assert_fail@plt+0xec60>
   1fe58:	and	r3, r0, #6
   1fe5c:	cmp	r3, #6
   1fe60:	beq	1ff50 <__assert_fail@plt+0xeca8>
   1fe64:	tst	r0, #2
   1fe68:	bne	1ff58 <__assert_fail@plt+0xecb0>
   1fe6c:	tst	r0, #4
   1fe70:	beq	1ff08 <__assert_fail@plt+0xec60>
   1fe74:	mov	r3, r0
   1fe78:	ldr	r2, [r5, #40]	; 0x28
   1fe7c:	mov	r1, r4
   1fe80:	add	r0, sp, #112	; 0x70
   1fe84:	bl	17eb4 <__assert_fail@plt+0x6c0c>
   1fe88:	subs	r5, r0, #0
   1fe8c:	bne	1ff08 <__assert_fail@plt+0xec60>
   1fe90:	ldr	sl, [sp, #52]	; 0x34
   1fe94:	b	20e54 <__assert_fail@plt+0xfbac>
   1fe98:	str	r0, [sp, #412]	; 0x19c
   1fe9c:	b	1fdb4 <__assert_fail@plt+0xeb0c>
   1fea0:	ldr	r2, [sp, #60]	; 0x3c
   1fea4:	cmp	r3, r2
   1fea8:	ldrlt	r2, [sp, #44]	; 0x2c
   1feac:	ldrblt	r3, [r2, r3]
   1feb0:	ldrge	r3, [sp, #76]	; 0x4c
   1feb4:	ldr	r2, [sp, #68]	; 0x44
   1feb8:	cmp	r2, #0
   1febc:	ldrbne	r3, [r2, r3]
   1fec0:	ldr	r2, [sp, #32]
   1fec4:	ldrb	r3, [r2, r3]
   1fec8:	cmp	r3, #0
   1fecc:	bne	1fdc4 <__assert_fail@plt+0xeb1c>
   1fed0:	ldr	sl, [sp, #52]	; 0x34
   1fed4:	mov	r3, #1
   1fed8:	str	r3, [sp, #24]
   1fedc:	b	1fd64 <__assert_fail@plt+0xeabc>
   1fee0:	cmp	r1, #0
   1fee4:	strne	r3, [sp, #412]	; 0x19c
   1fee8:	ldr	r2, [sp, #56]	; 0x38
   1feec:	cmp	r2, r3
   1fef0:	ble	1fdc4 <__assert_fail@plt+0xeb1c>
   1fef4:	ldr	sl, [sp, #52]	; 0x34
   1fef8:	mov	r3, #1
   1fefc:	str	r3, [sp, #24]
   1ff00:	b	1fd64 <__assert_fail@plt+0xeabc>
   1ff04:	ldr	r5, [r4, #40]	; 0x28
   1ff08:	ldr	r3, [sp, #376]	; 0x178
   1ff0c:	cmp	r3, #0
   1ff10:	beq	1ffbc <__assert_fail@plt+0xed14>
   1ff14:	ldr	r2, [sp, #36]	; 0x24
   1ff18:	str	r5, [r3, r2, lsl #2]
   1ff1c:	ldr	r3, [r4, #76]	; 0x4c
   1ff20:	cmp	r3, #0
   1ff24:	ldreq	sl, [sp, #100]	; 0x64
   1ff28:	bne	1ff60 <__assert_fail@plt+0xecb8>
   1ff2c:	ldrb	r3, [r5, #52]	; 0x34
   1ff30:	tst	r3, #16
   1ff34:	bne	1ffc4 <__assert_fail@plt+0xed1c>
   1ff38:	ldr	r3, [sp, #24]
   1ff3c:	str	r3, [sp, #12]
   1ff40:	mvn	fp, #0
   1ff44:	ldr	r3, [sp, #96]	; 0x60
   1ff48:	str	r3, [sp, #28]
   1ff4c:	b	20368 <__assert_fail@plt+0xf0c0>
   1ff50:	ldr	r5, [r4, #48]	; 0x30
   1ff54:	b	1ff08 <__assert_fail@plt+0xec60>
   1ff58:	ldr	r5, [r4, #44]	; 0x2c
   1ff5c:	b	1ff08 <__assert_fail@plt+0xec60>
   1ff60:	add	r4, r5, #4
   1ff64:	mov	r2, #0
   1ff68:	mov	r1, r4
   1ff6c:	add	r0, sp, #276	; 0x114
   1ff70:	bl	19308 <__assert_fail@plt+0x8060>
   1ff74:	mov	fp, r0
   1ff78:	str	r0, [sp, #112]	; 0x70
   1ff7c:	cmp	r0, #0
   1ff80:	bne	210d8 <__assert_fail@plt+0xfe30>
   1ff84:	ldrb	r3, [r5, #52]	; 0x34
   1ff88:	tst	r3, #64	; 0x40
   1ff8c:	bne	1ff98 <__assert_fail@plt+0xecf0>
   1ff90:	ldr	sl, [sp, #84]	; 0x54
   1ff94:	b	1ff2c <__assert_fail@plt+0xec84>
   1ff98:	mov	r1, r4
   1ff9c:	add	r0, sp, #276	; 0x114
   1ffa0:	bl	1e528 <__assert_fail@plt+0xd280>
   1ffa4:	mov	fp, r0
   1ffa8:	str	r0, [sp, #112]	; 0x70
   1ffac:	cmp	r0, #0
   1ffb0:	bne	210d8 <__assert_fail@plt+0xfe30>
   1ffb4:	ldr	sl, [sp, #84]	; 0x54
   1ffb8:	b	1ff2c <__assert_fail@plt+0xec84>
   1ffbc:	ldr	sl, [sp, #100]	; 0x64
   1ffc0:	b	1ff2c <__assert_fail@plt+0xec84>
   1ffc4:	ldrsb	r3, [r5, #52]	; 0x34
   1ffc8:	cmp	r3, #0
   1ffcc:	blt	1ffec <__assert_fail@plt+0xed44>
   1ffd0:	ldr	r3, [sp, #16]
   1ffd4:	cmp	r3, #0
   1ffd8:	beq	20010 <__assert_fail@plt+0xed68>
   1ffdc:	ldr	fp, [sp, #36]	; 0x24
   1ffe0:	mov	r3, #1
   1ffe4:	str	r3, [sp, #12]
   1ffe8:	b	1ff44 <__assert_fail@plt+0xec9c>
   1ffec:	ldr	r2, [sp, #36]	; 0x24
   1fff0:	mov	r1, r5
   1fff4:	add	r0, sp, #276	; 0x114
   1fff8:	bl	19624 <__assert_fail@plt+0x837c>
   1fffc:	subs	r3, r0, #0
   20000:	str	r3, [sp, #12]
   20004:	bne	1ffd0 <__assert_fail@plt+0xed28>
   20008:	mvn	fp, #0
   2000c:	b	1ff44 <__assert_fail@plt+0xec9c>
   20010:	ldr	fp, [sp, #36]	; 0x24
   20014:	b	210d8 <__assert_fail@plt+0xfe30>
   20018:	ldr	r2, [sp, #324]	; 0x144
   2001c:	cmp	r3, r2
   20020:	bge	20388 <__assert_fail@plt+0xf0e0>
   20024:	add	r1, r1, #2
   20028:	add	r0, sp, #276	; 0x114
   2002c:	bl	16e90 <__assert_fail@plt+0x5be8>
   20030:	str	r0, [sp, #112]	; 0x70
   20034:	cmp	r0, #0
   20038:	beq	20394 <__assert_fail@plt+0xf0ec>
   2003c:	ldr	sl, [sp, #52]	; 0x34
   20040:	b	20e54 <__assert_fail@plt+0xfbac>
   20044:	ldr	r2, [sp, #324]	; 0x144
   20048:	cmp	r3, r2
   2004c:	bge	20394 <__assert_fail@plt+0xf0ec>
   20050:	b	20024 <__assert_fail@plt+0xed7c>
   20054:	ldr	r6, [sp, #360]	; 0x168
   20058:	ldr	r3, [r5, #8]
   2005c:	cmp	r3, #0
   20060:	ble	20e60 <__assert_fail@plt+0xfbb8>
   20064:	ldr	r7, [sp, #24]
   20068:	b	2017c <__assert_fail@plt+0xeed4>
   2006c:	tst	r3, #8
   20070:	beq	2007c <__assert_fail@plt+0xedd4>
   20074:	tst	r0, #1
   20078:	bne	2016c <__assert_fail@plt+0xeec4>
   2007c:	tst	r3, #32
   20080:	beq	2008c <__assert_fail@plt+0xede4>
   20084:	tst	r0, #2
   20088:	beq	2016c <__assert_fail@plt+0xeec4>
   2008c:	tst	r3, #128	; 0x80
   20090:	beq	2009c <__assert_fail@plt+0xedf4>
   20094:	tst	r0, #8
   20098:	beq	2016c <__assert_fail@plt+0xeec4>
   2009c:	ldr	r3, [sp, #316]	; 0x13c
   200a0:	add	r2, sp, #276	; 0x114
   200a4:	mov	r1, r8
   200a8:	mov	r0, r6
   200ac:	bl	1a4a8 <__assert_fail@plt+0x9200>
   200b0:	cmp	r0, #0
   200b4:	beq	2016c <__assert_fail@plt+0xeec4>
   200b8:	ldr	r4, [sp, #316]	; 0x13c
   200bc:	add	r4, r0, r4
   200c0:	ldr	r3, [sp, #396]	; 0x18c
   200c4:	cmp	r3, r0
   200c8:	movlt	r3, r0
   200cc:	str	r3, [sp, #396]	; 0x18c
   200d0:	mov	r1, r4
   200d4:	add	r0, sp, #276	; 0x114
   200d8:	bl	1943c <__assert_fail@plt+0x8194>
   200dc:	str	r0, [sp, #124]	; 0x7c
   200e0:	cmp	r0, #0
   200e4:	bne	20224 <__assert_fail@plt+0xef7c>
   200e8:	ldr	r3, [r6, #12]
   200ec:	ldr	r3, [r3, r8, lsl #2]
   200f0:	add	r3, r3, r3, lsl #1
   200f4:	lsl	r3, r3, #2
   200f8:	ldr	r0, [r6, #24]
   200fc:	add	r2, r0, r3
   20100:	ldr	r8, [sp, #376]	; 0x178
   20104:	ldr	r1, [r8, r4, lsl #2]
   20108:	cmp	r1, #0
   2010c:	beq	201dc <__assert_fail@plt+0xef34>
   20110:	ldr	r1, [r1, #40]	; 0x28
   20114:	add	r0, sp, #136	; 0x88
   20118:	bl	166e0 <__assert_fail@plt+0x5438>
   2011c:	str	r0, [sp, #124]	; 0x7c
   20120:	cmp	r0, #0
   20124:	bne	20224 <__assert_fail@plt+0xef7c>
   20128:	ldr	r2, [sp, #364]	; 0x16c
   2012c:	sub	r1, r4, #1
   20130:	add	r0, sp, #276	; 0x114
   20134:	bl	1908c <__assert_fail@plt+0x7de4>
   20138:	ldr	r8, [sp, #376]	; 0x178
   2013c:	mov	r3, r0
   20140:	add	r2, sp, #136	; 0x88
   20144:	mov	r1, r6
   20148:	add	r0, sp, #124	; 0x7c
   2014c:	bl	17eb4 <__assert_fail@plt+0x6c0c>
   20150:	str	r0, [r8, r4, lsl #2]
   20154:	ldr	r0, [sp, #144]	; 0x90
   20158:	bl	23f40 <__assert_fail@plt+0x12c98>
   2015c:	ldr	r3, [sp, #376]	; 0x178
   20160:	ldr	r3, [r3, r4, lsl #2]
   20164:	cmp	r3, #0
   20168:	beq	20218 <__assert_fail@plt+0xef70>
   2016c:	add	r7, r7, #1
   20170:	ldr	r3, [r5, #8]
   20174:	cmp	r7, r3
   20178:	bge	20e60 <__assert_fail@plt+0xfbb8>
   2017c:	ldr	r3, [r5, #12]
   20180:	ldr	r8, [r3, r7, lsl #2]
   20184:	ldr	r4, [r6]
   20188:	add	r4, r4, r8, lsl #3
   2018c:	ldrb	r3, [r4, #6]
   20190:	tst	r3, #16
   20194:	beq	2016c <__assert_fail@plt+0xeec4>
   20198:	ldr	r3, [r4, #4]
   2019c:	ldr	r2, [sp, #40]	; 0x28
   201a0:	tst	r2, r3
   201a4:	beq	2009c <__assert_fail@plt+0xedf4>
   201a8:	ldr	r2, [sp, #364]	; 0x16c
   201ac:	ldr	r1, [sp, #316]	; 0x13c
   201b0:	add	r0, sp, #276	; 0x114
   201b4:	bl	1908c <__assert_fail@plt+0x7de4>
   201b8:	ldr	r3, [r4, #4]
   201bc:	ubfx	r3, r3, #8, #10
   201c0:	tst	r3, #4
   201c4:	beq	2006c <__assert_fail@plt+0xedc4>
   201c8:	tst	r0, #1
   201cc:	beq	2016c <__assert_fail@plt+0xeec4>
   201d0:	tst	r3, #8
   201d4:	beq	2007c <__assert_fail@plt+0xedd4>
   201d8:	b	2016c <__assert_fail@plt+0xeec4>
   201dc:	ldrd	r0, [r0, r3]
   201e0:	strd	r0, [sp, #136]	; 0x88
   201e4:	ldr	r3, [r2, #8]
   201e8:	str	r3, [sp, #144]	; 0x90
   201ec:	ldr	r2, [sp, #364]	; 0x16c
   201f0:	sub	r1, r4, #1
   201f4:	add	r0, sp, #276	; 0x114
   201f8:	bl	1908c <__assert_fail@plt+0x7de4>
   201fc:	mov	r3, r0
   20200:	add	r2, sp, #136	; 0x88
   20204:	mov	r1, r6
   20208:	add	r0, sp, #124	; 0x7c
   2020c:	bl	17eb4 <__assert_fail@plt+0x6c0c>
   20210:	str	r0, [r8, r4, lsl #2]
   20214:	b	2015c <__assert_fail@plt+0xeeb4>
   20218:	ldr	r0, [sp, #124]	; 0x7c
   2021c:	cmp	r0, #0
   20220:	beq	2016c <__assert_fail@plt+0xeec4>
   20224:	str	r0, [sp, #112]	; 0x70
   20228:	ldr	r3, [sp, #376]	; 0x178
   2022c:	cmp	r3, #0
   20230:	beq	210b0 <__assert_fail@plt+0xfe08>
   20234:	mov	r4, #0
   20238:	b	203d0 <__assert_fail@plt+0xf128>
   2023c:	ldr	r6, [r5, #48]	; 0x30
   20240:	cmp	r6, #0
   20244:	beq	2026c <__assert_fail@plt+0xefc4>
   20248:	ldr	r2, [sp, #364]	; 0x16c
   2024c:	ldr	r1, [sp, #316]	; 0x13c
   20250:	sub	r1, r1, #1
   20254:	add	r0, sp, #276	; 0x114
   20258:	bl	1908c <__assert_fail@plt+0x7de4>
   2025c:	tst	r0, #1
   20260:	addne	r4, r4, #256	; 0x100
   20264:	ldr	r4, [r6, r4, lsl #2]
   20268:	b	203c4 <__assert_fail@plt+0xf11c>
   2026c:	mov	r1, r5
   20270:	ldr	r0, [sp, #360]	; 0x168
   20274:	bl	1b114 <__assert_fail@plt+0x9e6c>
   20278:	cmp	r0, #0
   2027c:	bne	203b4 <__assert_fail@plt+0xf10c>
   20280:	mov	r3, #12
   20284:	str	r3, [sp, #112]	; 0x70
   20288:	b	20228 <__assert_fail@plt+0xef80>
   2028c:	ldr	r3, [sp, #112]	; 0x70
   20290:	cmp	r3, #0
   20294:	bne	20e50 <__assert_fail@plt+0xfba8>
   20298:	ldr	r3, [sp, #376]	; 0x178
   2029c:	cmp	r3, #0
   202a0:	beq	210bc <__assert_fail@plt+0xfe14>
   202a4:	ldr	r3, [sp, #12]
   202a8:	ldr	r2, [sp, #16]
   202ac:	cmp	r3, #0
   202b0:	eorne	r3, r2, #1
   202b4:	moveq	r3, #0
   202b8:	cmp	r3, #0
   202bc:	bne	210bc <__assert_fail@plt+0xfe14>
   202c0:	mov	r6, #0
   202c4:	ldr	r0, [sp, #380]	; 0x17c
   202c8:	ldr	r2, [sp, #316]	; 0x13c
   202cc:	ldr	r3, [sp, #376]	; 0x178
   202d0:	add	r3, r3, r2, lsl #2
   202d4:	add	r2, r2, #1
   202d8:	cmp	r0, r2
   202dc:	blt	210bc <__assert_fail@plt+0xfe14>
   202e0:	ldr	r1, [sp, #316]	; 0x13c
   202e4:	add	r1, r1, #1
   202e8:	str	r1, [sp, #316]	; 0x13c
   202ec:	ldr	r1, [r3, #4]!
   202f0:	cmp	r1, #0
   202f4:	beq	202d4 <__assert_fail@plt+0xf02c>
   202f8:	mov	r2, r6
   202fc:	add	r1, sp, #276	; 0x114
   20300:	add	r0, sp, #112	; 0x70
   20304:	bl	1ec28 <__assert_fail@plt+0xd980>
   20308:	ldr	r3, [sp, #112]	; 0x70
   2030c:	orrs	r3, r0, r3
   20310:	beq	202c4 <__assert_fail@plt+0xf01c>
   20314:	mov	r4, r0
   20318:	cmp	r0, #0
   2031c:	bne	203ec <__assert_fail@plt+0xf144>
   20320:	b	210bc <__assert_fail@plt+0xfe14>
   20324:	ldr	r3, [sp, #84]	; 0x54
   20328:	cmp	r5, r4
   2032c:	movne	sl, r3
   20330:	ldr	r3, [sp, #36]	; 0x24
   20334:	cmp	r5, r4
   20338:	moveq	r3, r9
   2033c:	str	r3, [sp, #36]	; 0x24
   20340:	b	203f4 <__assert_fail@plt+0xf14c>
   20344:	ldr	fp, [sp, #316]	; 0x13c
   20348:	ldr	r3, [sp, #16]
   2034c:	cmp	r3, #0
   20350:	beq	210d8 <__assert_fail@plt+0xfe30>
   20354:	mov	r3, #1
   20358:	str	r3, [sp, #12]
   2035c:	mov	r3, #0
   20360:	str	r3, [sp, #28]
   20364:	mov	r5, r4
   20368:	ldr	r1, [sp, #316]	; 0x13c
   2036c:	ldr	r3, [sp, #332]	; 0x14c
   20370:	cmp	r1, r3
   20374:	bge	210bc <__assert_fail@plt+0xfe14>
   20378:	add	r9, r1, #1
   2037c:	ldr	r3, [sp, #312]	; 0x138
   20380:	cmp	r9, r3
   20384:	bge	20018 <__assert_fail@plt+0xed70>
   20388:	ldr	r3, [sp, #304]	; 0x130
   2038c:	cmp	r9, r3
   20390:	bge	20044 <__assert_fail@plt+0xed9c>
   20394:	ldrb	r3, [r5, #52]	; 0x34
   20398:	tst	r3, #32
   2039c:	bne	20054 <__assert_fail@plt+0xedac>
   203a0:	ldr	r3, [sp, #316]	; 0x13c
   203a4:	add	r2, r3, #1
   203a8:	str	r2, [sp, #316]	; 0x13c
   203ac:	ldr	r2, [sp, #280]	; 0x118
   203b0:	ldrb	r4, [r2, r3]
   203b4:	ldr	r3, [r5, #44]	; 0x2c
   203b8:	cmp	r3, #0
   203bc:	beq	2023c <__assert_fail@plt+0xef94>
   203c0:	ldr	r4, [r3, r4, lsl #2]
   203c4:	ldr	r3, [sp, #376]	; 0x178
   203c8:	cmp	r3, #0
   203cc:	beq	203e4 <__assert_fail@plt+0xf13c>
   203d0:	mov	r2, r4
   203d4:	add	r1, sp, #276	; 0x114
   203d8:	add	r0, sp, #112	; 0x70
   203dc:	bl	1ec28 <__assert_fail@plt+0xd980>
   203e0:	mov	r4, r0
   203e4:	cmp	r4, #0
   203e8:	beq	2028c <__assert_fail@plt+0xefe4>
   203ec:	cmp	sl, #0
   203f0:	bne	20324 <__assert_fail@plt+0xf07c>
   203f4:	ldrb	r3, [r4, #52]	; 0x34
   203f8:	tst	r3, #16
   203fc:	beq	20364 <__assert_fail@plt+0xf0bc>
   20400:	tst	r3, #128	; 0x80
   20404:	beq	20344 <__assert_fail@plt+0xf09c>
   20408:	ldr	r2, [sp, #316]	; 0x13c
   2040c:	mov	r1, r4
   20410:	add	r0, sp, #276	; 0x114
   20414:	bl	19624 <__assert_fail@plt+0x837c>
   20418:	cmp	r0, #0
   2041c:	beq	20364 <__assert_fail@plt+0xf0bc>
   20420:	b	20344 <__assert_fail@plt+0xf09c>
   20424:	ldr	r9, [sp, #28]
   20428:	mov	r3, sl
   2042c:	ldr	sl, [sp, #12]
   20430:	mov	r2, r5
   20434:	mov	r1, r4
   20438:	mov	r0, r9
   2043c:	bl	1d9fc <__assert_fail@plt+0xc754>
   20440:	mov	r8, r0
   20444:	mov	r0, r5
   20448:	bl	23f40 <__assert_fail@plt+0x12c98>
   2044c:	cmp	r8, #0
   20450:	beq	204a8 <__assert_fail@plt+0xf200>
   20454:	mov	r5, #0
   20458:	b	20eb4 <__assert_fail@plt+0xfc0c>
   2045c:	str	r4, [sp, #136]	; 0x88
   20460:	mov	r3, #0
   20464:	str	r3, [sp, #140]	; 0x8c
   20468:	str	r7, [sp, #144]	; 0x90
   2046c:	str	fp, [sp, #148]	; 0x94
   20470:	str	r3, [sp, #152]	; 0x98
   20474:	str	r3, [sp, #156]	; 0x9c
   20478:	str	r3, [sp, #160]	; 0xa0
   2047c:	add	r1, sp, #136	; 0x88
   20480:	add	r0, sp, #276	; 0x114
   20484:	bl	1f488 <__assert_fail@plt+0xe1e0>
   20488:	mov	r8, r0
   2048c:	ldr	r0, [sp, #160]	; 0xa0
   20490:	bl	23f40 <__assert_fail@plt+0x12c98>
   20494:	cmp	r8, #0
   20498:	bne	20eb0 <__assert_fail@plt+0xfc08>
   2049c:	ldr	r5, [r4]
   204a0:	cmp	r5, #0
   204a4:	beq	20e9c <__assert_fail@plt+0xfbf4>
   204a8:	mov	r8, sl
   204ac:	ldr	sl, [sp, #52]	; 0x34
   204b0:	ldr	r0, [sp, #376]	; 0x178
   204b4:	bl	23f40 <__assert_fail@plt+0x12c98>
   204b8:	str	r4, [sp, #376]	; 0x178
   204bc:	str	r7, [sp, #372]	; 0x174
   204c0:	str	fp, [sp, #368]	; 0x170
   204c4:	mov	r0, #0
   204c8:	bl	23f40 <__assert_fail@plt+0x12c98>
   204cc:	mov	r0, #0
   204d0:	bl	23f40 <__assert_fail@plt+0x12c98>
   204d4:	b	2112c <__assert_fail@plt+0xfe84>
   204d8:	ldr	sl, [sp, #52]	; 0x34
   204dc:	mov	r3, #1
   204e0:	str	r3, [sp, #24]
   204e4:	b	1fd64 <__assert_fail@plt+0xeabc>
   204e8:	mov	r8, sl
   204ec:	ldr	sl, [sp, #52]	; 0x34
   204f0:	b	2112c <__assert_fail@plt+0xfe84>
   204f4:	ldrb	r3, [sl, #88]	; 0x58
   204f8:	tst	r3, #1
   204fc:	beq	20d88 <__assert_fail@plt+0xfae0>
   20500:	ldr	r3, [sl, #76]	; 0x4c
   20504:	cmp	r3, #0
   20508:	ble	20d88 <__assert_fail@plt+0xfae0>
   2050c:	ldr	r3, [sp, #20]
   20510:	ldr	r3, [r3]
   20514:	str	r3, [sp, #16]
   20518:	mov	r3, #0
   2051c:	str	r3, [sp, #124]	; 0x7c
   20520:	mov	r2, #2
   20524:	str	r2, [sp, #128]	; 0x80
   20528:	str	r3, [sp, #132]	; 0x84
   2052c:	str	r3, [sp, #136]	; 0x88
   20530:	mov	r3, #16
   20534:	str	r3, [sp, #140]	; 0x8c
   20538:	add	r3, sp, #148	; 0x94
   2053c:	str	r3, [sp, #144]	; 0x90
   20540:	mov	r0, #48	; 0x30
   20544:	bl	23d48 <__assert_fail@plt+0x12aa0>
   20548:	str	r0, [sp, #132]	; 0x84
   2054c:	cmp	r0, #0
   20550:	beq	20d7c <__assert_fail@plt+0xfad4>
   20554:	add	fp, sp, #124	; 0x7c
   20558:	b	20dbc <__assert_fail@plt+0xfb14>
   2055c:	mov	r3, #8
   20560:	add	r2, sp, #148	; 0x94
   20564:	ldr	r1, [sp, #64]	; 0x40
   20568:	add	r0, sp, #136	; 0x88
   2056c:	bl	23e6c <__assert_fail@plt+0x12bc4>
   20570:	cmp	r0, #0
   20574:	bne	20dec <__assert_fail@plt+0xfb44>
   20578:	ldr	r0, [sp, #144]	; 0x90
   2057c:	add	r3, sp, #148	; 0x94
   20580:	cmp	r0, r3
   20584:	beq	2058c <__assert_fail@plt+0xf2e4>
   20588:	bl	23f40 <__assert_fail@plt+0x12c98>
   2058c:	add	r3, sp, #148	; 0x94
   20590:	str	r3, [sp, #144]	; 0x90
   20594:	mov	r3, #0
   20598:	str	r3, [sp, #136]	; 0x88
   2059c:	mvn	r3, #0
   205a0:	str	r3, [sp, #140]	; 0x8c
   205a4:	add	r0, sp, #136	; 0x88
   205a8:	bl	184a8 <__assert_fail@plt+0x7200>
   205ac:	mov	r0, fp
   205b0:	bl	184f0 <__assert_fail@plt+0x7248>
   205b4:	mov	r3, #12
   205b8:	str	r3, [sp, #24]
   205bc:	b	1fd64 <__assert_fail@plt+0xeabc>
   205c0:	ldr	r3, [r2, r7, lsl #3]
   205c4:	add	r3, r3, #1
   205c8:	ldr	r2, [sp, #64]	; 0x40
   205cc:	cmp	r2, r3
   205d0:	ble	2094c <__assert_fail@plt+0xf6a4>
   205d4:	ldr	r2, [sp, #468]	; 0x1d4
   205d8:	add	r2, r2, r3, lsl #3
   205dc:	ldr	r0, [sp, #468]	; 0x1d4
   205e0:	str	r1, [r0, r3, lsl #3]
   205e4:	mvn	r3, #0
   205e8:	str	r3, [r2, #4]
   205ec:	b	2094c <__assert_fail@plt+0xf6a4>
   205f0:	ldr	r3, [r2, r0]
   205f4:	add	r3, r3, #1
   205f8:	ldr	r2, [sp, #64]	; 0x40
   205fc:	cmp	r2, r3
   20600:	ble	2094c <__assert_fail@plt+0xf6a4>
   20604:	ldr	r2, [sp, #468]	; 0x1d4
   20608:	add	r2, r2, r3, lsl #3
   2060c:	ldr	r0, [sp, #468]	; 0x1d4
   20610:	ldr	r0, [r0, r3, lsl #3]
   20614:	cmp	r1, r0
   20618:	bgt	20640 <__assert_fail@plt+0xf398>
   2061c:	ldrb	r0, [ip, #6]
   20620:	tst	r0, #8
   20624:	beq	20638 <__assert_fail@plt+0xf390>
   20628:	ldr	r0, [sp, #32]
   2062c:	ldr	r3, [r0, r3, lsl #3]
   20630:	cmn	r3, #1
   20634:	bne	20658 <__assert_fail@plt+0xf3b0>
   20638:	str	r1, [r2, #4]
   2063c:	b	2094c <__assert_fail@plt+0xf6a4>
   20640:	str	r1, [r2, #4]
   20644:	ldr	r2, [sp, #36]	; 0x24
   20648:	ldr	r1, [sp, #468]	; 0x1d4
   2064c:	ldr	r0, [sp, #32]
   20650:	bl	11038 <memcpy@plt>
   20654:	b	2094c <__assert_fail@plt+0xf6a4>
   20658:	ldr	r2, [sp, #36]	; 0x24
   2065c:	mov	r1, r0
   20660:	ldr	r0, [sp, #468]	; 0x1d4
   20664:	bl	11038 <memcpy@plt>
   20668:	b	2094c <__assert_fail@plt+0xf6a4>
   2066c:	ldr	r3, [sp, #372]	; 0x174
   20670:	cmp	r7, r3
   20674:	bne	20960 <__assert_fail@plt+0xf6b8>
   20678:	cmp	fp, #0
   2067c:	beq	20710 <__assert_fail@plt+0xf468>
   20680:	ldr	r3, [sp, #24]
   20684:	b	2068c <__assert_fail@plt+0xf3e4>
   20688:	ldr	r3, [sp, #24]
   2068c:	ldr	r1, [sp, #12]
   20690:	b	206a0 <__assert_fail@plt+0xf3f8>
   20694:	add	r3, r3, #1
   20698:	cmp	r1, r3
   2069c:	beq	206f0 <__assert_fail@plt+0xf448>
   206a0:	ldr	r2, [sp, #468]	; 0x1d4
   206a4:	ldr	r2, [r2, r3, lsl #3]
   206a8:	cmp	r2, #0
   206ac:	blt	20694 <__assert_fail@plt+0xf3ec>
   206b0:	ldr	r2, [r9, r3, lsl #3]
   206b4:	cmn	r2, #1
   206b8:	bne	20694 <__assert_fail@plt+0xf3ec>
   206bc:	add	r3, sp, #112	; 0x70
   206c0:	str	r3, [sp, #4]
   206c4:	ldr	r3, [sp, #32]
   206c8:	str	r3, [sp]
   206cc:	ldr	r3, [sp, #468]	; 0x1d4
   206d0:	ldr	r2, [sp, #12]
   206d4:	add	r1, sp, #108	; 0x6c
   206d8:	mov	r0, fp
   206dc:	bl	19718 <__assert_fail@plt+0x8470>
   206e0:	subs	r7, r0, #0
   206e4:	bge	2097c <__assert_fail@plt+0xf6d4>
   206e8:	ldr	sl, [sp, #28]
   206ec:	b	206f4 <__assert_fail@plt+0xf44c>
   206f0:	ldr	sl, [sp, #28]
   206f4:	ldr	r0, [sp, #120]	; 0x78
   206f8:	bl	23f40 <__assert_fail@plt+0x12c98>
   206fc:	add	r0, sp, #136	; 0x88
   20700:	bl	184a8 <__assert_fail@plt+0x7200>
   20704:	mov	r0, fp
   20708:	bl	184f0 <__assert_fail@plt+0x7248>
   2070c:	b	20bb4 <__assert_fail@plt+0xf90c>
   20710:	ldr	sl, [sp, #28]
   20714:	b	206f4 <__assert_fail@plt+0xf44c>
   20718:	mov	r1, r7
   2071c:	add	r0, sp, #112	; 0x70
   20720:	bl	186f4 <__assert_fail@plt+0x744c>
   20724:	cmp	r0, #0
   20728:	bne	209cc <__assert_fail@plt+0xf724>
   2072c:	ldr	sl, [sp, #28]
   20730:	ldr	r0, [sp, #120]	; 0x78
   20734:	bl	23f40 <__assert_fail@plt+0x12c98>
   20738:	add	r0, sp, #136	; 0x88
   2073c:	bl	184a8 <__assert_fail@plt+0x7200>
   20740:	mov	r0, fp
   20744:	bl	184f0 <__assert_fail@plt+0x7248>
   20748:	mov	r3, #12
   2074c:	str	r3, [sp, #24]
   20750:	b	1fd64 <__assert_fail@plt+0xeabc>
   20754:	mov	r1, r7
   20758:	add	r0, sp, #112	; 0x70
   2075c:	bl	1506c <__assert_fail@plt+0x3dc4>
   20760:	cmp	r0, #0
   20764:	bne	20b70 <__assert_fail@plt+0xf8c8>
   20768:	cmp	fp, #0
   2076c:	beq	20904 <__assert_fail@plt+0xf65c>
   20770:	ldr	r8, [sp, #108]	; 0x6c
   20774:	ldr	r4, [fp]
   20778:	add	r3, r4, #1
   2077c:	str	r3, [fp]
   20780:	ldr	r1, [fp, #4]
   20784:	cmp	r3, r1
   20788:	beq	20820 <__assert_fail@plt+0xf578>
   2078c:	add	r4, r4, r4, lsl #1
   20790:	lsl	r6, r4, #3
   20794:	ldr	r3, [fp, #8]
   20798:	str	r8, [r3, r4, lsl #3]
   2079c:	ldr	r3, [fp, #8]
   207a0:	add	r3, r3, r6
   207a4:	str	r5, [r3, #4]
   207a8:	ldr	r4, [fp, #8]
   207ac:	add	r4, r4, r6
   207b0:	ldr	r0, [sp, #40]	; 0x28
   207b4:	bl	23d48 <__assert_fail@plt+0x12aa0>
   207b8:	str	r0, [r4, #8]
   207bc:	ldr	r3, [fp, #8]
   207c0:	add	r3, r3, r6
   207c4:	ldr	r0, [r3, #8]
   207c8:	cmp	r0, #0
   207cc:	beq	20b88 <__assert_fail@plt+0xf8e0>
   207d0:	ldr	r4, [sp, #36]	; 0x24
   207d4:	mov	r2, r4
   207d8:	ldr	r1, [sp, #468]	; 0x1d4
   207dc:	bl	11038 <memcpy@plt>
   207e0:	ldr	r3, [fp, #8]
   207e4:	add	r3, r3, r6
   207e8:	ldr	r0, [r3, #8]
   207ec:	mov	r2, r4
   207f0:	ldr	r1, [sp, #32]
   207f4:	add	r0, r0, r4
   207f8:	bl	11038 <memcpy@plt>
   207fc:	ldr	r0, [fp, #8]
   20800:	add	r0, r0, r6
   20804:	add	r1, sp, #112	; 0x70
   20808:	add	r0, r0, #12
   2080c:	bl	16658 <__assert_fail@plt+0x53b0>
   20810:	cmp	r0, #0
   20814:	beq	20904 <__assert_fail@plt+0xf65c>
   20818:	ldr	sl, [sp, #28]
   2081c:	b	20730 <__assert_fail@plt+0xf488>
   20820:	add	r1, r1, r1, lsl #1
   20824:	lsl	r1, r1, #4
   20828:	ldr	r0, [fp, #8]
   2082c:	bl	23d84 <__assert_fail@plt+0x12adc>
   20830:	cmp	r0, #0
   20834:	beq	20b80 <__assert_fail@plt+0xf8d8>
   20838:	ldr	r3, [fp, #4]
   2083c:	lsl	r3, r3, #1
   20840:	str	r3, [fp, #4]
   20844:	str	r0, [fp, #8]
   20848:	b	2078c <__assert_fail@plt+0xf4e4>
   2084c:	add	r4, r4, #1
   20850:	cmp	sl, r4
   20854:	beq	20904 <__assert_fail@plt+0xf65c>
   20858:	ldr	r5, [r6, #4]!
   2085c:	mov	r1, r5
   20860:	mov	r0, r8
   20864:	bl	1506c <__assert_fail@plt+0x3dc4>
   20868:	cmp	r0, #0
   2086c:	beq	2084c <__assert_fail@plt+0xf5a4>
   20870:	cmn	r7, #1
   20874:	bne	20754 <__assert_fail@plt+0xf4ac>
   20878:	mov	r7, r5
   2087c:	b	2084c <__assert_fail@plt+0xf5a4>
   20880:	ldrb	r3, [r3, #6]
   20884:	tst	r3, #16
   20888:	bne	209ec <__assert_fail@plt+0xf744>
   2088c:	cmp	r2, #4
   20890:	beq	20a1c <__assert_fail@plt+0xf774>
   20894:	ldr	r5, [sp, #108]	; 0x6c
   20898:	ldr	r1, [r4]
   2089c:	mov	r2, r5
   208a0:	add	r1, r1, r6
   208a4:	add	r0, sp, #276	; 0x114
   208a8:	bl	19198 <__assert_fail@plt+0x7ef0>
   208ac:	cmp	r0, #0
   208b0:	beq	20aac <__assert_fail@plt+0xf804>
   208b4:	ldr	r3, [r4, #12]
   208b8:	ldr	r7, [r3, r8, lsl #2]
   208bc:	add	r5, r5, #1
   208c0:	str	r5, [sp, #108]	; 0x6c
   208c4:	cmp	fp, #0
   208c8:	beq	208fc <__assert_fail@plt+0xf654>
   208cc:	ldr	r3, [sp, #368]	; 0x170
   208d0:	cmp	r5, r3
   208d4:	bgt	20aac <__assert_fail@plt+0xf804>
   208d8:	ldr	r3, [sp, #376]	; 0x178
   208dc:	ldr	r0, [r3, r5, lsl #2]
   208e0:	cmp	r0, #0
   208e4:	beq	20aac <__assert_fail@plt+0xf804>
   208e8:	mov	r1, r7
   208ec:	add	r0, r0, #4
   208f0:	bl	1506c <__assert_fail@plt+0x3dc4>
   208f4:	cmp	r0, #0
   208f8:	beq	20aac <__assert_fail@plt+0xf804>
   208fc:	mov	r3, #0
   20900:	str	r3, [sp, #116]	; 0x74
   20904:	cmp	r7, #0
   20908:	blt	20ab0 <__assert_fail@plt+0xf808>
   2090c:	ldr	r1, [sp, #108]	; 0x6c
   20910:	ldr	r3, [sp, #468]	; 0x1d4
   20914:	ldr	r3, [r3, #4]
   20918:	cmp	r1, r3
   2091c:	bgt	20b98 <__assert_fail@plt+0xf8f0>
   20920:	ldr	r3, [sp, #12]
   20924:	str	r3, [sp, #20]
   20928:	lsl	r0, r7, #3
   2092c:	ldr	r3, [sp, #16]
   20930:	ldr	r2, [r3]
   20934:	add	ip, r2, r0
   20938:	ldrb	r3, [ip, #4]
   2093c:	cmp	r3, #8
   20940:	beq	205c0 <__assert_fail@plt+0xf318>
   20944:	cmp	r3, #9
   20948:	beq	205f0 <__assert_fail@plt+0xf348>
   2094c:	ldr	r3, [sp, #468]	; 0x1d4
   20950:	ldr	r2, [r3, #4]
   20954:	ldr	r3, [sp, #108]	; 0x6c
   20958:	cmp	r2, r3
   2095c:	beq	2066c <__assert_fail@plt+0xf3c4>
   20960:	cmp	fp, #0
   20964:	beq	2097c <__assert_fail@plt+0xf6d4>
   20968:	mov	r1, r7
   2096c:	add	r0, sp, #112	; 0x70
   20970:	bl	1506c <__assert_fail@plt+0x3dc4>
   20974:	cmp	r0, #0
   20978:	bne	20688 <__assert_fail@plt+0xf3e0>
   2097c:	ldr	r4, [sp, #360]	; 0x168
   20980:	mov	r8, r7
   20984:	lsl	r6, r7, #3
   20988:	ldr	r1, [r4]
   2098c:	add	r3, r1, r6
   20990:	ldrb	r2, [r3, #4]
   20994:	tst	r2, #8
   20998:	beq	20880 <__assert_fail@plt+0xf5d8>
   2099c:	ldr	r2, [sp, #108]	; 0x6c
   209a0:	ldr	r3, [sp, #376]	; 0x178
   209a4:	ldr	r8, [r3, r2, lsl #2]
   209a8:	add	r8, r8, #4
   209ac:	add	r3, r7, r7, lsl #1
   209b0:	ldr	r4, [r4, #20]
   209b4:	add	r4, r4, r3, lsl #2
   209b8:	mov	r1, r7
   209bc:	add	r0, sp, #112	; 0x70
   209c0:	bl	1506c <__assert_fail@plt+0x3dc4>
   209c4:	cmp	r0, #0
   209c8:	beq	20718 <__assert_fail@plt+0xf470>
   209cc:	ldr	sl, [r4, #4]
   209d0:	cmp	sl, #0
   209d4:	ble	20aac <__assert_fail@plt+0xf804>
   209d8:	ldr	r6, [r4, #8]
   209dc:	sub	r6, r6, #4
   209e0:	ldr	r4, [sp, #24]
   209e4:	mvn	r7, #0
   209e8:	b	20858 <__assert_fail@plt+0xf5b0>
   209ec:	ldr	r3, [sp, #108]	; 0x6c
   209f0:	add	r2, sp, #276	; 0x114
   209f4:	mov	r1, r7
   209f8:	mov	r0, r4
   209fc:	bl	1a4a8 <__assert_fail@plt+0x9200>
   20a00:	subs	r5, r0, #0
   20a04:	beq	20894 <__assert_fail@plt+0xf5ec>
   20a08:	ldr	r3, [r4, #12]
   20a0c:	ldr	r7, [r3, r8, lsl #2]
   20a10:	ldr	r3, [sp, #108]	; 0x6c
   20a14:	add	r5, r5, r3
   20a18:	b	208c0 <__assert_fail@plt+0xf618>
   20a1c:	ldr	r3, [r1, r6]
   20a20:	add	r3, r3, #1
   20a24:	ldr	r2, [sp, #64]	; 0x40
   20a28:	cmp	r2, r3
   20a2c:	ble	20b0c <__assert_fail@plt+0xf864>
   20a30:	ldr	r2, [sp, #468]	; 0x1d4
   20a34:	add	r2, r2, r3, lsl #3
   20a38:	ldr	r5, [r2, #4]
   20a3c:	ldr	r2, [sp, #468]	; 0x1d4
   20a40:	ldr	r2, [r2, r3, lsl #3]
   20a44:	sub	r5, r5, r2
   20a48:	cmp	fp, #0
   20a4c:	beq	20b64 <__assert_fail@plt+0xf8bc>
   20a50:	ldr	r2, [sp, #468]	; 0x1d4
   20a54:	add	r2, r2, r3, lsl #3
   20a58:	ldr	r1, [sp, #468]	; 0x1d4
   20a5c:	ldr	r0, [r1, r3, lsl #3]
   20a60:	cmn	r0, #1
   20a64:	beq	20aac <__assert_fail@plt+0xf804>
   20a68:	ldr	r3, [r2, #4]
   20a6c:	cmn	r3, #1
   20a70:	beq	20aac <__assert_fail@plt+0xf804>
   20a74:	cmp	r5, #0
   20a78:	beq	20b18 <__assert_fail@plt+0xf870>
   20a7c:	ldr	ip, [sp, #280]	; 0x118
   20a80:	ldr	r1, [sp, #108]	; 0x6c
   20a84:	ldr	r3, [sp, #304]	; 0x130
   20a88:	sub	r3, r3, r1
   20a8c:	cmp	r5, r3
   20a90:	bgt	20aac <__assert_fail@plt+0xf804>
   20a94:	mov	r2, r5
   20a98:	add	r1, ip, r1
   20a9c:	add	r0, ip, r0
   20aa0:	bl	11074 <memcmp@plt>
   20aa4:	cmp	r0, #0
   20aa8:	beq	20a08 <__assert_fail@plt+0xf760>
   20aac:	mvn	r7, #0
   20ab0:	cmn	r7, #2
   20ab4:	beq	20b78 <__assert_fail@plt+0xf8d0>
   20ab8:	add	r3, sp, #112	; 0x70
   20abc:	str	r3, [sp, #4]
   20ac0:	ldr	r3, [sp, #32]
   20ac4:	str	r3, [sp]
   20ac8:	ldr	r3, [sp, #468]	; 0x1d4
   20acc:	ldr	r2, [sp, #20]
   20ad0:	add	r1, sp, #108	; 0x6c
   20ad4:	mov	r0, fp
   20ad8:	bl	19718 <__assert_fail@plt+0x8470>
   20adc:	subs	r7, r0, #0
   20ae0:	bge	2090c <__assert_fail@plt+0xf664>
   20ae4:	ldr	sl, [sp, #28]
   20ae8:	ldr	r0, [sp, #120]	; 0x78
   20aec:	bl	23f40 <__assert_fail@plt+0x12c98>
   20af0:	add	r0, sp, #136	; 0x88
   20af4:	bl	184a8 <__assert_fail@plt+0x7200>
   20af8:	mov	r0, fp
   20afc:	bl	184f0 <__assert_fail@plt+0x7248>
   20b00:	mov	r3, #1
   20b04:	str	r3, [sp, #24]
   20b08:	b	1fd64 <__assert_fail@plt+0xeabc>
   20b0c:	cmp	fp, #0
   20b10:	mvnne	r7, #0
   20b14:	bne	20904 <__assert_fail@plt+0xf65c>
   20b18:	mov	r1, r7
   20b1c:	add	r0, sp, #112	; 0x70
   20b20:	bl	186f4 <__assert_fail@plt+0x744c>
   20b24:	cmp	r0, #0
   20b28:	beq	20b90 <__assert_fail@plt+0xf8e8>
   20b2c:	ldr	r3, [r4, #20]
   20b30:	add	r2, r8, r8, lsl #1
   20b34:	add	r3, r3, r2, lsl #2
   20b38:	ldr	r3, [r3, #8]
   20b3c:	ldr	r7, [r3]
   20b40:	ldr	r2, [sp, #108]	; 0x6c
   20b44:	ldr	r3, [sp, #376]	; 0x178
   20b48:	ldr	r0, [r3, r2, lsl #2]
   20b4c:	mov	r1, r7
   20b50:	add	r0, r0, #4
   20b54:	bl	1506c <__assert_fail@plt+0x3dc4>
   20b58:	cmp	r0, #0
   20b5c:	beq	20894 <__assert_fail@plt+0xf5ec>
   20b60:	b	20904 <__assert_fail@plt+0xf65c>
   20b64:	cmp	r5, #0
   20b68:	bne	20a08 <__assert_fail@plt+0xf760>
   20b6c:	b	20b18 <__assert_fail@plt+0xf870>
   20b70:	mov	r7, r5
   20b74:	b	20904 <__assert_fail@plt+0xf65c>
   20b78:	ldr	sl, [sp, #28]
   20b7c:	b	20730 <__assert_fail@plt+0xf488>
   20b80:	ldr	sl, [sp, #28]
   20b84:	b	20730 <__assert_fail@plt+0xf488>
   20b88:	ldr	sl, [sp, #28]
   20b8c:	b	20730 <__assert_fail@plt+0xf488>
   20b90:	ldr	sl, [sp, #28]
   20b94:	b	20730 <__assert_fail@plt+0xf488>
   20b98:	ldr	sl, [sp, #28]
   20b9c:	ldr	r0, [sp, #120]	; 0x78
   20ba0:	bl	23f40 <__assert_fail@plt+0x12c98>
   20ba4:	add	r0, sp, #136	; 0x88
   20ba8:	bl	184a8 <__assert_fail@plt+0x7200>
   20bac:	mov	r0, fp
   20bb0:	bl	184f0 <__assert_fail@plt+0x7248>
   20bb4:	cmp	r0, #0
   20bb8:	beq	21194 <__assert_fail@plt+0xfeec>
   20bbc:	str	r0, [sp, #24]
   20bc0:	b	1fd64 <__assert_fail@plt+0xeabc>
   20bc4:	ldr	r0, [r1, #-4]
   20bc8:	add	r0, r0, ip
   20bcc:	str	r0, [r1, #-4]
   20bd0:	ldr	r0, [r1]
   20bd4:	add	r0, r0, ip
   20bd8:	str	r0, [r1]
   20bdc:	add	r2, r2, #8
   20be0:	cmp	r2, lr
   20be4:	beq	20c28 <__assert_fail@plt+0xf980>
   20be8:	mov	r1, r2
   20bec:	ldr	r0, [r2, #-4]
   20bf0:	cmn	r0, #1
   20bf4:	beq	20bdc <__assert_fail@plt+0xf934>
   20bf8:	cmp	r4, #0
   20bfc:	beq	20bc4 <__assert_fail@plt+0xf91c>
   20c00:	cmp	r0, r5
   20c04:	ldrne	r0, [r6, r0, lsl #2]
   20c08:	moveq	r0, r7
   20c0c:	str	r0, [r2, #-4]
   20c10:	ldr	r0, [r2]
   20c14:	cmp	r5, r0
   20c18:	ldrne	r0, [r6, r0, lsl #2]
   20c1c:	moveq	r0, r7
   20c20:	str	r0, [r2]
   20c24:	b	20bc4 <__assert_fail@plt+0xf91c>
   20c28:	ldr	r2, [sp, #72]	; 0x48
   20c2c:	cmp	r2, #0
   20c30:	ble	20c5c <__assert_fail@plt+0xf9b4>
   20c34:	ldr	r2, [sp, #468]	; 0x1d4
   20c38:	add	r3, r2, r3
   20c3c:	ldr	r1, [sp, #464]	; 0x1d0
   20c40:	add	r1, r2, r1, lsl #3
   20c44:	mvn	r2, #0
   20c48:	str	r2, [r3]
   20c4c:	str	r2, [r3, #4]
   20c50:	add	r3, r3, #8
   20c54:	cmp	r1, r3
   20c58:	bne	20c48 <__assert_fail@plt+0xf9a0>
   20c5c:	ldr	r3, [sl, #132]	; 0x84
   20c60:	cmp	r3, #0
   20c64:	beq	1fd64 <__assert_fail@plt+0xeabc>
   20c68:	ldr	r3, [sp, #64]	; 0x40
   20c6c:	sub	r1, r3, #1
   20c70:	mov	r3, #0
   20c74:	ldr	r2, [sp, #468]	; 0x1d4
   20c78:	add	ip, r2, #8
   20c7c:	add	r0, r2, #12
   20c80:	b	20cac <__assert_fail@plt+0xfa04>
   20c84:	add	r2, r2, #1
   20c88:	ldr	lr, [sp, #468]	; 0x1d4
   20c8c:	ldr	r2, [lr, r2, lsl #3]
   20c90:	str	r2, [ip, r3, lsl #3]
   20c94:	ldr	r2, [sl, #132]	; 0x84
   20c98:	ldr	r2, [r2, r3, lsl #2]
   20c9c:	add	r2, lr, r2, lsl #3
   20ca0:	ldr	r2, [r2, #12]
   20ca4:	str	r2, [r0, r3, lsl #3]
   20ca8:	add	r3, r3, #1
   20cac:	cmp	r3, r1
   20cb0:	beq	1fd64 <__assert_fail@plt+0xeabc>
   20cb4:	ldr	r2, [sl, #132]	; 0x84
   20cb8:	ldr	r2, [r2, r3, lsl #2]
   20cbc:	cmp	r3, r2
   20cc0:	bne	20c84 <__assert_fail@plt+0xf9dc>
   20cc4:	b	20ca8 <__assert_fail@plt+0xfa00>
   20cc8:	ldr	r3, [sp, #76]	; 0x4c
   20ccc:	str	r3, [sp, #24]
   20cd0:	b	1fd64 <__assert_fail@plt+0xeabc>
   20cd4:	mov	r3, #12
   20cd8:	str	r3, [sp, #24]
   20cdc:	b	1fd64 <__assert_fail@plt+0xeabc>
   20ce0:	mov	r3, #12
   20ce4:	str	r3, [sp, #24]
   20ce8:	b	1fd64 <__assert_fail@plt+0xeabc>
   20cec:	mov	r3, #1
   20cf0:	str	r3, [sp, #24]
   20cf4:	b	1fd64 <__assert_fail@plt+0xeabc>
   20cf8:	ldr	sl, [sp, #52]	; 0x34
   20cfc:	mov	r3, #12
   20d00:	str	r3, [sp, #24]
   20d04:	b	1fd64 <__assert_fail@plt+0xeabc>
   20d08:	ldr	sl, [sp, #52]	; 0x34
   20d0c:	b	1fd64 <__assert_fail@plt+0xeabc>
   20d10:	ldr	sl, [sp, #52]	; 0x34
   20d14:	b	1fd64 <__assert_fail@plt+0xeabc>
   20d18:	add	r0, sp, #276	; 0x114
   20d1c:	bl	183e0 <__assert_fail@plt+0x7138>
   20d20:	ldr	r0, [sp, #408]	; 0x198
   20d24:	bl	23f40 <__assert_fail@plt+0x12c98>
   20d28:	ldr	r0, [sp, #392]	; 0x188
   20d2c:	bl	23f40 <__assert_fail@plt+0x12c98>
   20d30:	b	1fd78 <__assert_fail@plt+0xead0>
   20d34:	mov	r3, #1
   20d38:	str	r3, [sp, #24]
   20d3c:	b	1fd80 <__assert_fail@plt+0xead8>
   20d40:	mov	r3, #1
   20d44:	str	r3, [sp, #24]
   20d48:	b	1fd80 <__assert_fail@plt+0xead8>
   20d4c:	mov	r3, #1
   20d50:	str	r3, [sp, #24]
   20d54:	b	1fd80 <__assert_fail@plt+0xead8>
   20d58:	mov	r3, #1
   20d5c:	str	r3, [sp, #24]
   20d60:	b	1fd80 <__assert_fail@plt+0xead8>
   20d64:	mov	r3, #1
   20d68:	str	r3, [sp, #24]
   20d6c:	b	1fd80 <__assert_fail@plt+0xead8>
   20d70:	mov	r3, #1
   20d74:	str	r3, [sp, #24]
   20d78:	b	1fd80 <__assert_fail@plt+0xead8>
   20d7c:	mov	r3, #12
   20d80:	str	r3, [sp, #24]
   20d84:	b	1fd64 <__assert_fail@plt+0xeabc>
   20d88:	ldr	r3, [sp, #20]
   20d8c:	ldr	r3, [r3]
   20d90:	str	r3, [sp, #16]
   20d94:	mov	fp, #0
   20d98:	str	fp, [sp, #124]	; 0x7c
   20d9c:	mov	r3, #2
   20da0:	str	r3, [sp, #128]	; 0x80
   20da4:	str	fp, [sp, #132]	; 0x84
   20da8:	str	fp, [sp, #136]	; 0x88
   20dac:	mov	r3, #16
   20db0:	str	r3, [sp, #140]	; 0x8c
   20db4:	add	r3, sp, #148	; 0x94
   20db8:	str	r3, [sp, #144]	; 0x90
   20dbc:	ldr	r3, [sp, #16]
   20dc0:	ldr	r7, [r3, #72]	; 0x48
   20dc4:	mov	r3, #0
   20dc8:	str	r3, [sp, #112]	; 0x70
   20dcc:	str	r3, [sp, #116]	; 0x74
   20dd0:	str	r3, [sp, #120]	; 0x78
   20dd4:	ldr	r3, [sp, #136]	; 0x88
   20dd8:	ldr	r2, [sp, #64]	; 0x40
   20ddc:	cmp	r2, r3
   20de0:	bhi	2055c <__assert_fail@plt+0xf2b4>
   20de4:	ldr	r3, [sp, #64]	; 0x40
   20de8:	str	r3, [sp, #136]	; 0x88
   20dec:	ldr	r3, [sp, #144]	; 0x90
   20df0:	str	r3, [sp, #32]
   20df4:	ldr	r2, [sp, #36]	; 0x24
   20df8:	ldr	r1, [sp, #468]	; 0x1d4
   20dfc:	mov	r0, r3
   20e00:	bl	11038 <memcpy@plt>
   20e04:	ldr	r9, [sp, #468]	; 0x1d4
   20e08:	ldr	r3, [r9], #4
   20e0c:	str	r3, [sp, #108]	; 0x6c
   20e10:	ldr	r3, [sp, #64]	; 0x40
   20e14:	lsl	r2, r3, #4
   20e18:	str	r2, [sp, #40]	; 0x28
   20e1c:	str	r3, [sp, #12]
   20e20:	str	sl, [sp, #28]
   20e24:	b	2090c <__assert_fail@plt+0xf664>
   20e28:	mov	r3, #0
   20e2c:	ldr	r2, [sp, #468]	; 0x1d4
   20e30:	str	r3, [r2]
   20e34:	ldr	r3, [sp, #368]	; 0x170
   20e38:	str	r3, [r2, #4]
   20e3c:	b	21194 <__assert_fail@plt+0xfeec>
   20e40:	ldr	sl, [sp, #52]	; 0x34
   20e44:	mov	r3, #12
   20e48:	str	r3, [sp, #24]
   20e4c:	b	1fd64 <__assert_fail@plt+0xeabc>
   20e50:	ldr	sl, [sp, #52]	; 0x34
   20e54:	mov	r3, #12
   20e58:	str	r3, [sp, #24]
   20e5c:	b	1fd64 <__assert_fail@plt+0xeabc>
   20e60:	mov	r3, #0
   20e64:	str	r3, [sp, #112]	; 0x70
   20e68:	b	203a0 <__assert_fail@plt+0xf0f8>
   20e6c:	mov	r3, #12
   20e70:	str	r3, [sp, #24]
   20e74:	b	1fd64 <__assert_fail@plt+0xeabc>
   20e78:	ldr	r3, [sp, #44]	; 0x2c
   20e7c:	str	r3, [sp, #280]	; 0x118
   20e80:	ldr	r3, [sl, #92]	; 0x5c
   20e84:	ldr	r2, [sp, #60]	; 0x3c
   20e88:	ldr	r1, [sp, #76]	; 0x4c
   20e8c:	cmp	r3, #1
   20e90:	movgt	r2, r1
   20e94:	mov	r3, r2
   20e98:	b	1f974 <__assert_fail@plt+0xe6cc>
   20e9c:	mov	r0, r4
   20ea0:	bl	23f40 <__assert_fail@plt+0x12c98>
   20ea4:	mov	r0, r5
   20ea8:	bl	23f40 <__assert_fail@plt+0x12c98>
   20eac:	b	20ecc <__assert_fail@plt+0xfc24>
   20eb0:	mov	r5, #0
   20eb4:	mov	r0, r4
   20eb8:	bl	23f40 <__assert_fail@plt+0x12c98>
   20ebc:	mov	r0, r5
   20ec0:	bl	23f40 <__assert_fail@plt+0x12c98>
   20ec4:	cmp	r8, #1
   20ec8:	bne	20f34 <__assert_fail@plt+0xfc8c>
   20ecc:	add	r0, sp, #276	; 0x114
   20ed0:	bl	183e0 <__assert_fail@plt+0x7138>
   20ed4:	ldr	r3, [sp, #412]	; 0x19c
   20ed8:	ldr	r2, [sp, #92]	; 0x5c
   20edc:	add	r3, r2, r3
   20ee0:	str	r3, [sp, #412]	; 0x19c
   20ee4:	ldr	r2, [sp, #48]	; 0x30
   20ee8:	cmp	r3, r2
   20eec:	movle	r2, #0
   20ef0:	movgt	r2, #1
   20ef4:	ldr	r1, [sp, #56]	; 0x38
   20ef8:	cmp	r3, r1
   20efc:	movge	r3, r2
   20f00:	orrlt	r3, r2, #1
   20f04:	cmp	r3, #0
   20f08:	bne	204d8 <__assert_fail@plt+0xf230>
   20f0c:	ldr	r3, [sp, #80]	; 0x50
   20f10:	sub	r3, r3, #4
   20f14:	cmp	r3, #4
   20f18:	ldrls	pc, [pc, r3, lsl #2]
   20f1c:	b	1fb6c <__assert_fail@plt+0xe8c4>
   20f20:	strdeq	pc, [r1], -r4
   20f24:	strdeq	pc, [r1], -r4
   20f28:	andeq	pc, r1, ip, lsl #25
   20f2c:	andeq	pc, r1, r4, lsl ip	; <UNPREDICTABLE>
   20f30:	andeq	pc, r1, r4, asr #27
   20f34:	mov	r3, r8
   20f38:	ldr	sl, [sp, #52]	; 0x34
   20f3c:	str	r3, [sp, #24]
   20f40:	b	1fd64 <__assert_fail@plt+0xeabc>
   20f44:	ldr	sl, [sp, #52]	; 0x34
   20f48:	mov	r0, r4
   20f4c:	bl	23f40 <__assert_fail@plt+0x12c98>
   20f50:	mov	r0, #0
   20f54:	bl	23f40 <__assert_fail@plt+0x12c98>
   20f58:	mov	r3, #12
   20f5c:	b	20f3c <__assert_fail@plt+0xfc94>
   20f60:	mov	r2, fp
   20f64:	ldr	r3, [sp, #376]	; 0x178
   20f68:	ldr	r1, [r3, fp, lsl #2]
   20f6c:	add	r0, sp, #276	; 0x114
   20f70:	bl	19624 <__assert_fail@plt+0x837c>
   20f74:	str	r0, [sp, #372]	; 0x174
   20f78:	ldr	r3, [sp, #52]	; 0x34
   20f7c:	ldrb	r3, [r3, #88]	; 0x58
   20f80:	tst	r3, #1
   20f84:	bne	20fb4 <__assert_fail@plt+0xfd0c>
   20f88:	b	20fa4 <__assert_fail@plt+0xfcfc>
   20f8c:	mov	r2, fp
   20f90:	ldr	r3, [sp, #376]	; 0x178
   20f94:	ldr	r1, [r3, fp, lsl #2]
   20f98:	add	r0, sp, #276	; 0x114
   20f9c:	bl	19624 <__assert_fail@plt+0x837c>
   20fa0:	str	r0, [sp, #372]	; 0x174
   20fa4:	ldr	r3, [sp, #52]	; 0x34
   20fa8:	ldr	r3, [r3, #76]	; 0x4c
   20fac:	cmp	r3, #0
   20fb0:	beq	204e8 <__assert_fail@plt+0xf240>
   20fb4:	ldr	r9, [sp, #360]	; 0x168
   20fb8:	ldr	r7, [sp, #372]	; 0x174
   20fbc:	cmn	fp, #-1073741822	; 0xc0000002
   20fc0:	bhi	20e40 <__assert_fail@plt+0xfb98>
   20fc4:	add	r5, fp, #1
   20fc8:	lsl	r5, r5, #2
   20fcc:	mov	r0, r5
   20fd0:	bl	23d48 <__assert_fail@plt+0x12aa0>
   20fd4:	subs	r4, r0, #0
   20fd8:	beq	20f44 <__assert_fail@plt+0xfc9c>
   20fdc:	ldr	r3, [r9, #76]	; 0x4c
   20fe0:	cmp	r3, #0
   20fe4:	beq	2045c <__assert_fail@plt+0xf1b4>
   20fe8:	mov	r0, r5
   20fec:	bl	23d48 <__assert_fail@plt+0x12aa0>
   20ff0:	subs	r5, r0, #0
   20ff4:	beq	20f44 <__assert_fail@plt+0xfc9c>
   20ff8:	mov	r6, #0
   20ffc:	str	sl, [sp, #12]
   21000:	str	r9, [sp, #28]
   21004:	add	sl, fp, #1
   21008:	lsl	r9, sl, #2
   2100c:	mov	r2, r9
   21010:	mov	r1, r6
   21014:	mov	r0, r5
   21018:	bl	111c4 <memset@plt>
   2101c:	str	r4, [sp, #136]	; 0x88
   21020:	str	r5, [sp, #140]	; 0x8c
   21024:	str	r7, [sp, #144]	; 0x90
   21028:	str	fp, [sp, #148]	; 0x94
   2102c:	str	r6, [sp, #152]	; 0x98
   21030:	str	r6, [sp, #156]	; 0x9c
   21034:	str	r6, [sp, #160]	; 0xa0
   21038:	add	r1, sp, #136	; 0x88
   2103c:	add	r0, sp, #276	; 0x114
   21040:	bl	1f488 <__assert_fail@plt+0xe1e0>
   21044:	mov	r8, r0
   21048:	ldr	r0, [sp, #160]	; 0xa0
   2104c:	bl	23f40 <__assert_fail@plt+0x12c98>
   21050:	cmp	r8, #0
   21054:	bne	20eb4 <__assert_fail@plt+0xfc0c>
   21058:	ldr	r3, [r4]
   2105c:	cmp	r3, #0
   21060:	bne	20424 <__assert_fail@plt+0xf17c>
   21064:	ldr	r3, [r5]
   21068:	cmp	r3, #0
   2106c:	bne	20424 <__assert_fail@plt+0xf17c>
   21070:	sub	r9, r9, #4
   21074:	ldr	r3, [sp, #376]	; 0x178
   21078:	add	r9, r3, r9
   2107c:	subs	fp, fp, #1
   21080:	bmi	20e9c <__assert_fail@plt+0xfbf4>
   21084:	ldr	r1, [r9, #-4]!
   21088:	cmp	r1, #0
   2108c:	beq	2107c <__assert_fail@plt+0xfdd4>
   21090:	ldrb	r3, [r1, #52]	; 0x34
   21094:	tst	r3, #16
   21098:	beq	2107c <__assert_fail@plt+0xfdd4>
   2109c:	mov	r2, fp
   210a0:	add	r0, sp, #276	; 0x114
   210a4:	bl	19624 <__assert_fail@plt+0x837c>
   210a8:	mov	r7, r0
   210ac:	b	21004 <__assert_fail@plt+0xfd5c>
   210b0:	ldr	r3, [sp, #112]	; 0x70
   210b4:	cmp	r3, #0
   210b8:	bne	211c0 <__assert_fail@plt+0xff18>
   210bc:	ldr	r2, [sp, #28]
   210c0:	cmp	r2, #0
   210c4:	beq	210d8 <__assert_fail@plt+0xfe30>
   210c8:	ldr	r3, [r2]
   210cc:	ldr	r1, [sp, #36]	; 0x24
   210d0:	add	r3, r3, r1
   210d4:	str	r3, [r2]
   210d8:	cmn	fp, #1
   210dc:	beq	20ecc <__assert_fail@plt+0xfc24>
   210e0:	cmn	fp, #2
   210e4:	beq	20cf8 <__assert_fail@plt+0xfa50>
   210e8:	str	fp, [sp, #368]	; 0x170
   210ec:	ldr	r3, [sp, #64]	; 0x40
   210f0:	cmp	r3, #1
   210f4:	movls	sl, #0
   210f8:	movhi	sl, #1
   210fc:	ldr	r3, [sp, #20]
   21100:	ldrb	r3, [r3, #28]
   21104:	eor	r3, r3, #16
   21108:	ubfx	r3, r3, #4, #1
   2110c:	tst	sl, r3
   21110:	bne	20f60 <__assert_fail@plt+0xfcb8>
   21114:	ldr	r2, [sp, #52]	; 0x34
   21118:	ldr	r3, [r2, #76]	; 0x4c
   2111c:	cmp	r3, #0
   21120:	bne	20f8c <__assert_fail@plt+0xfce4>
   21124:	mov	r8, sl
   21128:	mov	sl, r2
   2112c:	ldr	r2, [sp, #64]	; 0x40
   21130:	cmp	r2, #0
   21134:	beq	1fd64 <__assert_fail@plt+0xeabc>
   21138:	cmp	r2, #1
   2113c:	bls	20e28 <__assert_fail@plt+0xfb80>
   21140:	ldr	r3, [sp, #468]	; 0x1d4
   21144:	lsl	r2, r2, #3
   21148:	str	r2, [sp, #36]	; 0x24
   2114c:	sub	r1, r3, #8
   21150:	add	r1, r1, r2
   21154:	mvn	r2, #0
   21158:	str	r2, [r3, #12]
   2115c:	str	r2, [r3, #8]!
   21160:	cmp	r3, r1
   21164:	bne	21158 <__assert_fail@plt+0xfeb0>
   21168:	mov	r3, #0
   2116c:	ldr	r2, [sp, #468]	; 0x1d4
   21170:	str	r3, [r2]
   21174:	ldr	r3, [sp, #368]	; 0x170
   21178:	str	r3, [r2, #4]
   2117c:	ldr	r3, [sp, #20]
   21180:	ldrb	r3, [r3, #28]
   21184:	eor	r3, r3, #16
   21188:	ubfx	r3, r3, #4, #1
   2118c:	tst	r8, r3
   21190:	bne	204f4 <__assert_fail@plt+0xf24c>
   21194:	ldrb	r4, [sp, #352]	; 0x160
   21198:	ldr	r5, [sp, #304]	; 0x130
   2119c:	ldr	r6, [sp, #288]	; 0x120
   211a0:	ldr	ip, [sp, #412]	; 0x19c
   211a4:	ldr	r3, [sp, #468]	; 0x1d4
   211a8:	add	r2, r3, #4
   211ac:	ldr	r3, [sp, #64]	; 0x40
   211b0:	lsl	r3, r3, #3
   211b4:	add	lr, r2, r3
   211b8:	ldr	r7, [sp, #308]	; 0x134
   211bc:	b	20be8 <__assert_fail@plt+0xf940>
   211c0:	ldr	sl, [sp, #52]	; 0x34
   211c4:	b	20e54 <__assert_fail@plt+0xfbac>
   211c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   211cc:	strd	r6, [sp, #8]
   211d0:	strd	r8, [sp, #16]
   211d4:	strd	sl, [sp, #24]
   211d8:	str	lr, [sp, #32]
   211dc:	sub	sp, sp, #132	; 0x84
   211e0:	mov	r5, r0
   211e4:	mov	fp, r1
   211e8:	mov	r6, r2
   211ec:	mov	r9, r3
   211f0:	mov	r2, #0
   211f4:	str	r2, [sp, #124]	; 0x7c
   211f8:	ldrb	r3, [r0, #28]
   211fc:	str	r9, [r0, #12]
   21200:	str	r2, [r0, #8]
   21204:	str	r2, [r0, #24]
   21208:	and	r3, r3, #150	; 0x96
   2120c:	bfi	r3, r2, #1, #2
   21210:	strb	r3, [r0, #28]
   21214:	ldr	r4, [r0]
   21218:	ldr	r3, [r0, #4]
   2121c:	cmp	r3, #159	; 0x9f
   21220:	bls	214e4 <__assert_fail@plt+0x1023c>
   21224:	mov	r2, #160	; 0xa0
   21228:	str	r2, [r5, #8]
   2122c:	mov	r1, #0
   21230:	mov	r0, r4
   21234:	bl	111c4 <memset@plt>
   21238:	mov	r3, #31
   2123c:	str	r3, [r4, #64]	; 0x40
   21240:	movw	r3, #43689	; 0xaaa9
   21244:	movt	r3, #2730	; 0xaaa
   21248:	cmp	r6, r3
   2124c:	bhi	21e1c <__assert_fail@plt+0x10b74>
   21250:	add	r0, r6, #1
   21254:	str	r0, [r4, #4]
   21258:	lsl	r0, r0, #3
   2125c:	bl	23d48 <__assert_fail@plt+0x12aa0>
   21260:	str	r0, [r4]
   21264:	cmp	r6, #0
   21268:	beq	21508 <__assert_fail@plt+0x10260>
   2126c:	mov	r7, #1
   21270:	lsl	r7, r7, #1
   21274:	cmp	r6, r7
   21278:	bcs	21270 <__assert_fail@plt+0xffc8>
   2127c:	mov	r1, r7
   21280:	mov	r0, #12
   21284:	bl	23cd4 <__assert_fail@plt+0x12a2c>
   21288:	str	r0, [r4, #32]
   2128c:	sub	r7, r7, #1
   21290:	str	r7, [r4, #68]	; 0x44
   21294:	bl	110e0 <__ctype_get_mb_cur_max@plt>
   21298:	str	r0, [r4, #92]	; 0x5c
   2129c:	mov	r0, #14
   212a0:	bl	11248 <nl_langinfo@plt>
   212a4:	ldrb	r3, [r0]
   212a8:	and	r3, r3, #223	; 0xdf
   212ac:	cmp	r3, #85	; 0x55
   212b0:	bne	21308 <__assert_fail@plt+0x10060>
   212b4:	ldrb	r3, [r0, #1]
   212b8:	and	r3, r3, #223	; 0xdf
   212bc:	cmp	r3, #84	; 0x54
   212c0:	bne	21308 <__assert_fail@plt+0x10060>
   212c4:	ldrb	r3, [r0, #2]
   212c8:	and	r3, r3, #223	; 0xdf
   212cc:	cmp	r3, #70	; 0x46
   212d0:	bne	21308 <__assert_fail@plt+0x10060>
   212d4:	ldrb	r3, [r0, #3]
   212d8:	cmp	r3, #45	; 0x2d
   212dc:	moveq	r3, #4
   212e0:	movne	r3, #3
   212e4:	movw	r1, #21012	; 0x5214
   212e8:	movt	r1, #2
   212ec:	add	r0, r0, r3
   212f0:	bl	10fd8 <strcmp@plt>
   212f4:	cmp	r0, #0
   212f8:	bne	21308 <__assert_fail@plt+0x10060>
   212fc:	ldrb	r3, [r4, #88]	; 0x58
   21300:	orr	r3, r3, #4
   21304:	strb	r3, [r4, #88]	; 0x58
   21308:	ldrb	r3, [r4, #88]	; 0x58
   2130c:	bfc	r3, #3, #1
   21310:	strb	r3, [r4, #88]	; 0x58
   21314:	ldr	r3, [r4, #92]	; 0x5c
   21318:	cmp	r3, #1
   2131c:	ble	21338 <__assert_fail@plt+0x10090>
   21320:	ldrb	r3, [r4, #88]	; 0x58
   21324:	tst	r3, #4
   21328:	beq	21510 <__assert_fail@plt+0x10268>
   2132c:	movw	r3, #20428	; 0x4fcc
   21330:	movt	r3, #2
   21334:	str	r3, [r4, #60]	; 0x3c
   21338:	ldr	r3, [r4]
   2133c:	cmp	r3, #0
   21340:	beq	21e1c <__assert_fail@plt+0x10b74>
   21344:	ldr	r3, [r4, #32]
   21348:	cmp	r3, #0
   2134c:	beq	21e1c <__assert_fail@plt+0x10b74>
   21350:	mov	r3, #0
   21354:	str	r3, [sp, #124]	; 0x7c
   21358:	movw	r3, #0
   2135c:	movt	r3, #0
   21360:	cmp	r3, #0
   21364:	movne	r3, #1
   21368:	moveq	r3, #0
   2136c:	mov	r2, r3
   21370:	movw	r3, #0
   21374:	movt	r3, #0
   21378:	cmp	r3, #0
   2137c:	movne	r3, #1
   21380:	moveq	r3, #0
   21384:	orr	r3, r2, r3
   21388:	ands	r3, r3, #255	; 0xff
   2138c:	str	r3, [sp, #16]
   21390:	beq	213bc <__assert_fail@plt+0x10114>
   21394:	mov	r1, #0
   21398:	add	r0, r4, #136	; 0x88
   2139c:	bl	11044 <pthread_mutex_init@plt>
   213a0:	cmp	r0, #0
   213a4:	movne	r3, #12
   213a8:	strne	r3, [sp, #124]	; 0x7c
   213ac:	bne	21e24 <__assert_fail@plt+0x10b7c>
   213b0:	ldr	r3, [sp, #124]	; 0x7c
   213b4:	cmp	r3, #0
   213b8:	bne	21e24 <__assert_fail@plt+0x10b7c>
   213bc:	str	r6, [sp, #12]
   213c0:	ldr	r8, [r5, #20]
   213c4:	and	r7, r9, #4194304	; 0x400000
   213c8:	orr	sl, r8, r7
   213cc:	mov	r2, #76	; 0x4c
   213d0:	mov	r1, #0
   213d4:	add	r0, sp, #44	; 0x2c
   213d8:	bl	111c4 <memset@plt>
   213dc:	str	fp, [sp, #40]	; 0x28
   213e0:	str	r6, [sp, #88]	; 0x58
   213e4:	str	r6, [sp, #84]	; 0x54
   213e8:	str	r8, [sp, #104]	; 0x68
   213ec:	adds	r3, r7, #0
   213f0:	movne	r3, #1
   213f4:	strb	r3, [sp, #112]	; 0x70
   213f8:	adds	r3, sl, #0
   213fc:	movne	r3, #1
   21400:	strb	r3, [sp, #115]	; 0x73
   21404:	ldr	r3, [r4, #92]	; 0x5c
   21408:	str	r3, [sp, #120]	; 0x78
   2140c:	ldrb	r3, [r4, #88]	; 0x58
   21410:	ubfx	r2, r3, #2, #1
   21414:	strb	r2, [sp, #113]	; 0x71
   21418:	ubfx	r3, r3, #3, #1
   2141c:	strb	r3, [sp, #114]	; 0x72
   21420:	str	r6, [sp, #96]	; 0x60
   21424:	str	r6, [sp, #92]	; 0x5c
   21428:	cmp	r6, #0
   2142c:	bgt	2159c <__assert_fail@plt+0x102f4>
   21430:	ldrb	r3, [sp, #115]	; 0x73
   21434:	cmp	r3, #0
   21438:	ldrne	fp, [sp, #44]	; 0x2c
   2143c:	str	fp, [sp, #44]	; 0x2c
   21440:	cmp	r7, #0
   21444:	beq	215c0 <__assert_fail@plt+0x10318>
   21448:	ldr	r3, [r4, #92]	; 0x5c
   2144c:	cmp	r3, #1
   21450:	ble	215b4 <__assert_fail@plt+0x1030c>
   21454:	ldr	r6, [sp, #12]
   21458:	add	r0, sp, #40	; 0x28
   2145c:	bl	16884 <__assert_fail@plt+0x55dc>
   21460:	cmp	r0, #0
   21464:	bne	214a0 <__assert_fail@plt+0x101f8>
   21468:	ldr	r3, [sp, #72]	; 0x48
   2146c:	cmp	r6, r3
   21470:	ble	215e8 <__assert_fail@plt+0x10340>
   21474:	ldr	r1, [sp, #76]	; 0x4c
   21478:	ldr	r2, [r4, #92]	; 0x5c
   2147c:	ldr	r3, [sp, #68]	; 0x44
   21480:	add	r3, r3, r2
   21484:	cmp	r1, r3
   21488:	bgt	215e8 <__assert_fail@plt+0x10340>
   2148c:	lsl	r1, r1, #1
   21490:	add	r0, sp, #40	; 0x28
   21494:	bl	15c20 <__assert_fail@plt+0x4978>
   21498:	cmp	r0, #0
   2149c:	beq	21458 <__assert_fail@plt+0x101b0>
   214a0:	str	r0, [sp, #124]	; 0x7c
   214a4:	mov	r0, r5
   214a8:	bl	181a4 <__assert_fail@plt+0x6efc>
   214ac:	add	r0, sp, #40	; 0x28
   214b0:	bl	18204 <__assert_fail@plt+0x6f5c>
   214b4:	ldr	r3, [sp, #16]
   214b8:	cmp	r3, #0
   214bc:	beq	214c8 <__assert_fail@plt+0x10220>
   214c0:	add	r0, r4, #136	; 0x88
   214c4:	bl	10ff0 <pthread_mutex_destroy@plt>
   214c8:	mov	r0, r4
   214cc:	bl	18244 <__assert_fail@plt+0x6f9c>
   214d0:	mov	r3, #0
   214d4:	str	r3, [r5]
   214d8:	str	r3, [r5, #4]
   214dc:	ldr	r0, [sp, #124]	; 0x7c
   214e0:	b	21d20 <__assert_fail@plt+0x10a78>
   214e4:	mov	r1, #160	; 0xa0
   214e8:	mov	r0, r4
   214ec:	bl	23d84 <__assert_fail@plt+0x12adc>
   214f0:	subs	r4, r0, #0
   214f4:	beq	21dd4 <__assert_fail@plt+0x10b2c>
   214f8:	mov	r3, #160	; 0xa0
   214fc:	str	r3, [r5, #4]
   21500:	str	r4, [r5]
   21504:	b	21224 <__assert_fail@plt+0xff7c>
   21508:	mov	r7, #1
   2150c:	b	2127c <__assert_fail@plt+0xffd4>
   21510:	mov	r1, #1
   21514:	mov	r0, #32
   21518:	bl	23cd4 <__assert_fail@plt+0x12a2c>
   2151c:	str	r0, [r4, #60]	; 0x3c
   21520:	cmp	r0, #0
   21524:	beq	21e1c <__assert_fail@plt+0x10b74>
   21528:	mov	r7, #0
   2152c:	b	21590 <__assert_fail@plt+0x102e8>
   21530:	ldrb	r3, [r4, #88]	; 0x58
   21534:	orr	r3, r3, #8
   21538:	strb	r3, [r4, #88]	; 0x58
   2153c:	add	sl, sl, #1
   21540:	add	r8, r8, #1
   21544:	cmp	sl, #32
   21548:	beq	21584 <__assert_fail@plt+0x102dc>
   2154c:	mov	r0, r8
   21550:	bl	111d0 <btowc@plt>
   21554:	cmn	r0, #1
   21558:	beq	21570 <__assert_fail@plt+0x102c8>
   2155c:	ldr	r2, [r4, #60]	; 0x3c
   21560:	ldr	r3, [r2, r7]
   21564:	mov	r1, #1
   21568:	orr	r3, r3, r1, lsl sl
   2156c:	str	r3, [r2, r7]
   21570:	bics	r3, r8, #127	; 0x7f
   21574:	bne	2153c <__assert_fail@plt+0x10294>
   21578:	cmp	r0, r8
   2157c:	bne	21530 <__assert_fail@plt+0x10288>
   21580:	b	2153c <__assert_fail@plt+0x10294>
   21584:	add	r7, r7, #4
   21588:	cmp	r7, #32
   2158c:	beq	21338 <__assert_fail@plt+0x10090>
   21590:	lsl	r8, r7, #3
   21594:	mov	sl, #0
   21598:	b	2154c <__assert_fail@plt+0x102a4>
   2159c:	add	r1, r6, #1
   215a0:	add	r0, sp, #40	; 0x28
   215a4:	bl	15c20 <__assert_fail@plt+0x4978>
   215a8:	cmp	r0, #0
   215ac:	beq	21430 <__assert_fail@plt+0x10188>
   215b0:	b	214a0 <__assert_fail@plt+0x101f8>
   215b4:	add	r0, sp, #40	; 0x28
   215b8:	bl	16e08 <__assert_fail@plt+0x5b60>
   215bc:	b	215e8 <__assert_fail@plt+0x10340>
   215c0:	ldr	r3, [r4, #92]	; 0x5c
   215c4:	cmp	r3, #1
   215c8:	bgt	215e0 <__assert_fail@plt+0x10338>
   215cc:	cmp	sl, #0
   215d0:	beq	2181c <__assert_fail@plt+0x10574>
   215d4:	add	r0, sp, #40	; 0x28
   215d8:	bl	14fa8 <__assert_fail@plt+0x3d00>
   215dc:	b	215e8 <__assert_fail@plt+0x10340>
   215e0:	add	r0, sp, #40	; 0x28
   215e4:	bl	162ec <__assert_fail@plt+0x5044>
   215e8:	mov	r8, #0
   215ec:	str	r8, [sp, #124]	; 0x7c
   215f0:	str	r8, [r5, #24]
   215f4:	ldr	r6, [r5]
   215f8:	str	r9, [r6, #128]	; 0x80
   215fc:	orr	r2, r9, #8388608	; 0x800000
   21600:	add	r1, sp, #40	; 0x28
   21604:	add	r0, sp, #28
   21608:	bl	17964 <__assert_fail@plt+0x66bc>
   2160c:	add	r3, sp, #124	; 0x7c
   21610:	str	r3, [sp, #4]
   21614:	str	r8, [sp]
   21618:	mov	r3, r9
   2161c:	add	r2, sp, #28
   21620:	mov	r1, r5
   21624:	add	r0, sp, #40	; 0x28
   21628:	bl	1d650 <__assert_fail@plt+0xc3a8>
   2162c:	mov	r8, r0
   21630:	clz	r0, r0
   21634:	lsr	r0, r0, #5
   21638:	ldr	r3, [sp, #124]	; 0x7c
   2163c:	cmp	r3, #0
   21640:	moveq	r0, #0
   21644:	cmp	r0, #0
   21648:	bne	21e10 <__assert_fail@plt+0x10b68>
   2164c:	mov	r3, #2
   21650:	mov	r2, #0
   21654:	mov	r1, r2
   21658:	mov	r0, r6
   2165c:	bl	15efc <__assert_fail@plt+0x4c54>
   21660:	mov	r9, r0
   21664:	cmp	r8, #0
   21668:	beq	21680 <__assert_fail@plt+0x103d8>
   2166c:	mov	r3, #16
   21670:	mov	r2, r9
   21674:	mov	r1, r8
   21678:	mov	r0, r6
   2167c:	bl	15efc <__assert_fail@plt+0x4c54>
   21680:	cmp	r0, #0
   21684:	cmpne	r9, #0
   21688:	moveq	r3, #12
   2168c:	streq	r3, [sp, #124]	; 0x7c
   21690:	beq	21e10 <__assert_fail@plt+0x10b68>
   21694:	str	r0, [r4, #52]	; 0x34
   21698:	ldr	r6, [r5]
   2169c:	ldr	r0, [r6, #4]
   216a0:	lsl	r0, r0, #2
   216a4:	bl	23d48 <__assert_fail@plt+0x12aa0>
   216a8:	str	r0, [r6, #12]
   216ac:	ldr	r0, [r6, #4]
   216b0:	lsl	r0, r0, #2
   216b4:	bl	23d48 <__assert_fail@plt+0x12aa0>
   216b8:	str	r0, [r6, #16]
   216bc:	ldr	r0, [r6, #4]
   216c0:	add	r0, r0, r0, lsl #1
   216c4:	lsl	r0, r0, #2
   216c8:	bl	23d48 <__assert_fail@plt+0x12aa0>
   216cc:	str	r0, [r6, #20]
   216d0:	ldr	r0, [r6, #4]
   216d4:	add	r0, r0, r0, lsl #1
   216d8:	lsl	r0, r0, #2
   216dc:	bl	23d48 <__assert_fail@plt+0x12aa0>
   216e0:	str	r0, [r6, #24]
   216e4:	ldr	r3, [r6, #12]
   216e8:	cmp	r3, #0
   216ec:	beq	21e08 <__assert_fail@plt+0x10b60>
   216f0:	ldr	r3, [r6, #16]
   216f4:	cmp	r3, #0
   216f8:	beq	21ddc <__assert_fail@plt+0x10b34>
   216fc:	ldr	r3, [r6, #20]
   21700:	clz	sl, r0
   21704:	lsr	sl, sl, #5
   21708:	cmp	r3, #0
   2170c:	moveq	sl, #1
   21710:	cmp	sl, #0
   21714:	bne	21de4 <__assert_fail@plt+0x10b3c>
   21718:	ldr	r0, [r5, #24]
   2171c:	lsl	r0, r0, #2
   21720:	bl	23d48 <__assert_fail@plt+0x12aa0>
   21724:	str	r0, [r6, #132]	; 0x84
   21728:	cmp	r0, #0
   2172c:	beq	217a4 <__assert_fail@plt+0x104fc>
   21730:	ldr	r3, [r5, #24]
   21734:	cmp	r3, #0
   21738:	beq	21758 <__assert_fail@plt+0x104b0>
   2173c:	mov	r3, #0
   21740:	ldr	r2, [r6, #132]	; 0x84
   21744:	str	r3, [r2, r3, lsl #2]
   21748:	add	r3, r3, #1
   2174c:	ldr	r2, [r5, #24]
   21750:	cmp	r2, r3
   21754:	bhi	21740 <__assert_fail@plt+0x10498>
   21758:	mov	r2, r6
   2175c:	movw	r1, #21092	; 0x5264
   21760:	movt	r1, #1
   21764:	ldr	r0, [r6, #52]	; 0x34
   21768:	bl	151e8 <__assert_fail@plt+0x3f40>
   2176c:	ldr	ip, [r5, #24]
   21770:	cmp	ip, #0
   21774:	beq	21834 <__assert_fail@plt+0x1058c>
   21778:	ldr	r2, [r6, #132]	; 0x84
   2177c:	ldr	r3, [r2]
   21780:	cmp	r3, #0
   21784:	bne	217a4 <__assert_fail@plt+0x104fc>
   21788:	mov	r0, ip
   2178c:	add	r3, r3, #1
   21790:	cmp	r0, r3
   21794:	beq	2182c <__assert_fail@plt+0x10584>
   21798:	ldr	r1, [r2, #4]!
   2179c:	cmp	r1, r3
   217a0:	beq	2178c <__assert_fail@plt+0x104e4>
   217a4:	mov	r2, r5
   217a8:	movw	r1, #24732	; 0x609c
   217ac:	movt	r1, #1
   217b0:	ldr	r0, [r6, #52]	; 0x34
   217b4:	bl	15154 <__assert_fail@plt+0x3eac>
   217b8:	cmp	r0, #0
   217bc:	bne	21e00 <__assert_fail@plt+0x10b58>
   217c0:	mov	r2, r6
   217c4:	movw	r1, #32008	; 0x7d08
   217c8:	movt	r1, #1
   217cc:	ldr	r0, [r6, #52]	; 0x34
   217d0:	bl	15154 <__assert_fail@plt+0x3eac>
   217d4:	cmp	r0, #0
   217d8:	bne	21e00 <__assert_fail@plt+0x10b58>
   217dc:	mov	r2, r6
   217e0:	movw	r1, #21252	; 0x5304
   217e4:	movt	r1, #1
   217e8:	ldr	r0, [r6, #52]	; 0x34
   217ec:	bl	151e8 <__assert_fail@plt+0x3f40>
   217f0:	mov	r2, r6
   217f4:	movw	r1, #34152	; 0x8568
   217f8:	movt	r1, #1
   217fc:	ldr	r0, [r6, #52]	; 0x34
   21800:	bl	151e8 <__assert_fail@plt+0x3f40>
   21804:	subs	r3, r0, #0
   21808:	str	r3, [sp, #12]
   2180c:	bne	21dec <__assert_fail@plt+0x10b44>
   21810:	mov	r8, sl
   21814:	mov	r9, r3
   21818:	b	21878 <__assert_fail@plt+0x105d0>
   2181c:	ldr	r3, [sp, #76]	; 0x4c
   21820:	str	r3, [sp, #68]	; 0x44
   21824:	str	r3, [sp, #72]	; 0x48
   21828:	b	215e8 <__assert_fail@plt+0x10340>
   2182c:	cmp	ip, r3
   21830:	bne	217a4 <__assert_fail@plt+0x104fc>
   21834:	ldr	r0, [r6, #132]	; 0x84
   21838:	bl	23f40 <__assert_fail@plt+0x12c98>
   2183c:	mov	r3, #0
   21840:	str	r3, [r6, #132]	; 0x84
   21844:	b	217a4 <__assert_fail@plt+0x104fc>
   21848:	cmp	r8, #0
   2184c:	beq	218c8 <__assert_fail@plt+0x10620>
   21850:	mov	r8, sl
   21854:	ldr	r9, [sp, #12]
   21858:	b	21878 <__assert_fail@plt+0x105d0>
   2185c:	ldr	r0, [sp, #36]	; 0x24
   21860:	bl	23f40 <__assert_fail@plt+0x12c98>
   21864:	mov	r8, #1
   21868:	add	r9, r9, #1
   2186c:	ldr	r3, [r6, #8]
   21870:	cmp	r3, r9
   21874:	beq	21848 <__assert_fail@plt+0x105a0>
   21878:	add	fp, r9, r9, lsl #1
   2187c:	lsl	fp, fp, #2
   21880:	ldr	r3, [r6, #24]
   21884:	add	r3, r3, fp
   21888:	ldr	r3, [r3, #4]
   2188c:	cmp	r3, #0
   21890:	bne	21868 <__assert_fail@plt+0x105c0>
   21894:	mov	r3, #1
   21898:	mov	r2, r9
   2189c:	mov	r1, r6
   218a0:	add	r0, sp, #28
   218a4:	bl	18e3c <__assert_fail@plt+0x7b94>
   218a8:	cmp	r0, #0
   218ac:	bne	21e00 <__assert_fail@plt+0x10b58>
   218b0:	ldr	r3, [r6, #24]
   218b4:	add	fp, r3, fp
   218b8:	ldr	r3, [fp, #4]
   218bc:	cmp	r3, #0
   218c0:	bne	21868 <__assert_fail@plt+0x105c0>
   218c4:	b	2185c <__assert_fail@plt+0x105b4>
   218c8:	ldrb	r3, [r5, #28]
   218cc:	tst	r3, #16
   218d0:	beq	21a3c <__assert_fail@plt+0x10794>
   218d4:	ldr	r3, [r6, #76]	; 0x4c
   218d8:	cmp	r3, #0
   218dc:	beq	219c4 <__assert_fail@plt+0x1071c>
   218e0:	ldr	r0, [r6, #8]
   218e4:	add	r0, r0, r0, lsl #1
   218e8:	lsl	r0, r0, #2
   218ec:	bl	23d48 <__assert_fail@plt+0x12aa0>
   218f0:	str	r0, [r6, #28]
   218f4:	cmp	r0, #0
   218f8:	beq	21df4 <__assert_fail@plt+0x10b4c>
   218fc:	ldr	r3, [r6, #8]
   21900:	cmp	r3, #0
   21904:	beq	219c4 <__assert_fail@plt+0x1071c>
   21908:	ldr	r1, [sp, #12]
   2190c:	mov	r3, #0
   21910:	mov	r2, r3
   21914:	ldr	ip, [r6, #28]
   21918:	add	r0, ip, r3
   2191c:	str	r2, [ip, r3]
   21920:	str	r2, [r0, #4]
   21924:	str	r2, [r0, #8]
   21928:	add	r1, r1, #1
   2192c:	ldr	r0, [r6, #8]
   21930:	add	r3, r3, #12
   21934:	cmp	r1, r0
   21938:	bcc	21914 <__assert_fail@plt+0x1066c>
   2193c:	cmp	r0, #0
   21940:	beq	219c4 <__assert_fail@plt+0x1071c>
   21944:	ldr	r3, [sp, #12]
   21948:	mov	fp, #0
   2194c:	str	r7, [sp, #20]
   21950:	mov	r7, r3
   21954:	ldr	r3, [r6, #24]
   21958:	add	r3, r3, fp
   2195c:	ldr	sl, [r3, #8]
   21960:	ldr	r3, [r3, #4]
   21964:	cmp	r3, #0
   21968:	ble	219ac <__assert_fail@plt+0x10704>
   2196c:	sub	sl, sl, #4
   21970:	ldr	r9, [sp, #12]
   21974:	ldr	r0, [sl, #4]!
   21978:	add	r0, r0, r0, lsl #1
   2197c:	ldr	r3, [r6, #28]
   21980:	mov	r1, r7
   21984:	add	r0, r3, r0, lsl #2
   21988:	bl	15ce4 <__assert_fail@plt+0x4a3c>
   2198c:	cmp	r0, #0
   21990:	beq	21dfc <__assert_fail@plt+0x10b54>
   21994:	add	r9, r9, #1
   21998:	ldr	r3, [r6, #24]
   2199c:	add	r3, r3, fp
   219a0:	ldr	r3, [r3, #4]
   219a4:	cmp	r9, r3
   219a8:	blt	21974 <__assert_fail@plt+0x106cc>
   219ac:	add	r7, r7, #1
   219b0:	add	fp, fp, #12
   219b4:	ldr	r3, [r6, #8]
   219b8:	cmp	r7, r3
   219bc:	bcc	21954 <__assert_fail@plt+0x106ac>
   219c0:	ldr	r7, [sp, #20]
   219c4:	mov	r3, #0
   219c8:	str	r3, [sp, #124]	; 0x7c
   219cc:	ldrb	r3, [r4, #88]	; 0x58
   219d0:	ubfx	r3, r3, #2, #1
   219d4:	cmp	r7, #0
   219d8:	moveq	r7, r3
   219dc:	movne	r7, #0
   219e0:	cmp	r7, #0
   219e4:	bne	21a58 <__assert_fail@plt+0x107b0>
   219e8:	ldr	r3, [r4, #52]	; 0x34
   219ec:	ldr	r3, [r3, #12]
   219f0:	ldr	r1, [r3, #28]
   219f4:	str	r1, [r4, #72]	; 0x48
   219f8:	add	r1, r1, r1, lsl #1
   219fc:	ldr	r3, [r4, #24]
   21a00:	add	r1, r3, r1, lsl #2
   21a04:	add	r0, sp, #28
   21a08:	bl	16658 <__assert_fail@plt+0x53b0>
   21a0c:	mov	r7, r0
   21a10:	str	r0, [sp, #24]
   21a14:	cmp	r0, #0
   21a18:	bne	21cfc <__assert_fail@plt+0x10a54>
   21a1c:	ldr	r3, [r4, #76]	; 0x4c
   21a20:	cmp	r3, #0
   21a24:	ble	21cb8 <__assert_fail@plt+0x10a10>
   21a28:	ldr	r0, [sp, #32]
   21a2c:	cmp	r0, #0
   21a30:	ble	21cb8 <__assert_fail@plt+0x10a10>
   21a34:	mov	r6, r7
   21a38:	b	21c5c <__assert_fail@plt+0x109b4>
   21a3c:	ldr	r3, [r5, #24]
   21a40:	cmp	r3, #0
   21a44:	beq	218d4 <__assert_fail@plt+0x1062c>
   21a48:	ldrb	r3, [r6, #88]	; 0x58
   21a4c:	tst	r3, #1
   21a50:	bne	218e0 <__assert_fail@plt+0x10638>
   21a54:	b	218d4 <__assert_fail@plt+0x1062c>
   21a58:	ldr	r3, [r5, #20]
   21a5c:	cmp	r3, #0
   21a60:	bne	219e8 <__assert_fail@plt+0x10740>
   21a64:	ldr	r0, [r4, #8]
   21a68:	cmp	r0, #0
   21a6c:	beq	21bc0 <__assert_fail@plt+0x10918>
   21a70:	ldr	r2, [r4]
   21a74:	mov	ip, r8
   21a78:	ldr	r1, [sp, #12]
   21a7c:	mov	lr, r7
   21a80:	b	21ae0 <__assert_fail@plt+0x10838>
   21a84:	mov	ip, lr
   21a88:	b	21ad0 <__assert_fail@plt+0x10828>
   21a8c:	ldr	r3, [r2]
   21a90:	ldr	r6, [r3, #16]
   21a94:	cmp	r6, #0
   21a98:	bne	219e8 <__assert_fail@plt+0x10740>
   21a9c:	ldr	r6, [r3, #20]
   21aa0:	cmp	r6, #0
   21aa4:	bne	219e8 <__assert_fail@plt+0x10740>
   21aa8:	ldr	r6, [r3, #24]
   21aac:	cmp	r6, #0
   21ab0:	bne	219e8 <__assert_fail@plt+0x10740>
   21ab4:	ldr	r3, [r3, #28]
   21ab8:	cmp	r3, #0
   21abc:	beq	21ad0 <__assert_fail@plt+0x10828>
   21ac0:	b	219e8 <__assert_fail@plt+0x10740>
   21ac4:	ldrsb	r3, [r2]
   21ac8:	cmp	r3, #0
   21acc:	movlt	r8, r7
   21ad0:	add	r1, r1, #1
   21ad4:	add	r2, r2, #8
   21ad8:	cmp	r1, r0
   21adc:	beq	21b58 <__assert_fail@plt+0x108b0>
   21ae0:	ldrb	r3, [r2, #4]
   21ae4:	sub	r3, r3, #1
   21ae8:	cmp	r3, #11
   21aec:	ldrls	pc, [pc, r3, lsl #2]
   21af0:	b	21b54 <__assert_fail@plt+0x108ac>
   21af4:	andeq	r1, r2, r4, asr #21
   21af8:	ldrdeq	r1, [r2], -r0
   21afc:	andeq	r1, r2, ip, lsl #21
   21b00:	ldrdeq	r1, [r2], -r0
   21b04:	andeq	r1, r2, r4, lsl #21
   21b08:	andeq	r1, r2, r8, ror #19
   21b0c:	andeq	r1, r2, r4, asr fp
   21b10:	ldrdeq	r1, [r2], -r0
   21b14:	ldrdeq	r1, [r2], -r0
   21b18:	ldrdeq	r1, [r2], -r0
   21b1c:	ldrdeq	r1, [r2], -r0
   21b20:	andeq	r1, r2, r4, lsr #22
   21b24:	ldr	r3, [r2]
   21b28:	cmp	r3, #32
   21b2c:	beq	21ad0 <__assert_fail@plt+0x10828>
   21b30:	bls	21b48 <__assert_fail@plt+0x108a0>
   21b34:	cmp	r3, #64	; 0x40
   21b38:	beq	21ad0 <__assert_fail@plt+0x10828>
   21b3c:	cmp	r3, #128	; 0x80
   21b40:	beq	21ad0 <__assert_fail@plt+0x10828>
   21b44:	b	219e8 <__assert_fail@plt+0x10740>
   21b48:	cmp	r3, #16
   21b4c:	beq	21ad0 <__assert_fail@plt+0x10828>
   21b50:	b	219e8 <__assert_fail@plt+0x10740>
   21b54:	bl	1129c <abort@plt>
   21b58:	orr	r8, r8, ip
   21b5c:	tst	r8, #255	; 0xff
   21b60:	beq	21bc4 <__assert_fail@plt+0x1091c>
   21b64:	mov	lr, #7
   21b68:	ldr	r3, [sp, #12]
   21b6c:	b	21b8c <__assert_fail@plt+0x108e4>
   21b70:	ldrsb	r2, [r6, r0]
   21b74:	cmp	r2, #0
   21b78:	blt	21bb0 <__assert_fail@plt+0x10908>
   21b7c:	add	r3, r3, #1
   21b80:	ldr	r2, [r4, #8]
   21b84:	cmp	r3, r2
   21b88:	bcs	21bc4 <__assert_fail@plt+0x1091c>
   21b8c:	lsl	r0, r3, #3
   21b90:	ldr	r6, [r4]
   21b94:	add	r1, r6, r0
   21b98:	ldrb	r2, [r1, #4]
   21b9c:	cmp	r2, #1
   21ba0:	beq	21b70 <__assert_fail@plt+0x108c8>
   21ba4:	cmp	r2, #5
   21ba8:	strbeq	lr, [r1, #4]
   21bac:	b	21b7c <__assert_fail@plt+0x108d4>
   21bb0:	ldrb	r2, [r1, #6]
   21bb4:	bfc	r2, #5, #1
   21bb8:	strb	r2, [r1, #6]
   21bbc:	b	21b7c <__assert_fail@plt+0x108d4>
   21bc0:	mov	ip, r8
   21bc4:	mov	r3, #1
   21bc8:	str	r3, [r4, #92]	; 0x5c
   21bcc:	ldrb	r3, [r4, #88]	; 0x58
   21bd0:	ldr	r2, [r4, #76]	; 0x4c
   21bd4:	cmp	r2, #0
   21bd8:	orrgt	ip, ip, #1
   21bdc:	and	r3, r3, #251	; 0xfb
   21be0:	bfi	r3, ip, #1, #1
   21be4:	strb	r3, [r4, #88]	; 0x58
   21be8:	b	219e8 <__assert_fail@plt+0x10740>
   21bec:	add	r1, r1, #1
   21bf0:	cmp	r0, r1
   21bf4:	beq	21c4c <__assert_fail@plt+0x109a4>
   21bf8:	ldr	r8, [r2, #4]!
   21bfc:	add	r9, ip, r8, lsl #3
   21c00:	ldrb	r9, [r9, #4]
   21c04:	cmp	r9, #9
   21c08:	bne	21bec <__assert_fail@plt+0x10944>
   21c0c:	ldr	r9, [ip, r8, lsl #3]
   21c10:	ldr	r8, [lr]
   21c14:	cmp	r9, r8
   21c18:	bne	21bec <__assert_fail@plt+0x10944>
   21c1c:	cmp	r1, r0
   21c20:	beq	21c4c <__assert_fail@plt+0x109a4>
   21c24:	ldr	r2, [r4, #20]
   21c28:	add	r3, r3, r3, lsl #1
   21c2c:	add	r3, r2, r3, lsl #2
   21c30:	ldr	r3, [r3, #8]
   21c34:	ldr	r8, [r3]
   21c38:	mov	r1, r8
   21c3c:	add	r0, sp, #28
   21c40:	bl	1506c <__assert_fail@plt+0x3dc4>
   21c44:	cmp	r0, #0
   21c48:	beq	21c94 <__assert_fail@plt+0x109ec>
   21c4c:	add	r6, r6, #1
   21c50:	ldr	r0, [sp, #32]
   21c54:	cmp	r0, r6
   21c58:	ble	21cb8 <__assert_fail@plt+0x10a10>
   21c5c:	ldr	r2, [sp, #36]	; 0x24
   21c60:	ldr	ip, [r4]
   21c64:	ldr	r3, [r2, r6, lsl #2]
   21c68:	add	lr, ip, r3, lsl #3
   21c6c:	ldrb	r1, [lr, #4]
   21c70:	cmp	r1, #4
   21c74:	bne	21c4c <__assert_fail@plt+0x109a4>
   21c78:	cmp	r0, #0
   21c7c:	ble	21c8c <__assert_fail@plt+0x109e4>
   21c80:	sub	r2, r2, #4
   21c84:	mov	r1, r7
   21c88:	b	21bf8 <__assert_fail@plt+0x10950>
   21c8c:	mov	r1, r7
   21c90:	b	21c1c <__assert_fail@plt+0x10974>
   21c94:	add	r8, r8, r8, lsl #1
   21c98:	ldr	r1, [r4, #24]
   21c9c:	add	r1, r1, r8, lsl #2
   21ca0:	add	r0, sp, #28
   21ca4:	bl	18c8c <__assert_fail@plt+0x79e4>
   21ca8:	subs	r6, r0, #0
   21cac:	beq	21c4c <__assert_fail@plt+0x109a4>
   21cb0:	mov	r7, r6
   21cb4:	b	21cfc <__assert_fail@plt+0x10a54>
   21cb8:	mov	r3, #0
   21cbc:	add	r2, sp, #28
   21cc0:	mov	r1, r4
   21cc4:	add	r0, sp, #24
   21cc8:	bl	17eb4 <__assert_fail@plt+0x6c0c>
   21ccc:	str	r0, [r4, #36]	; 0x24
   21cd0:	cmp	r0, #0
   21cd4:	ldreq	r7, [sp, #24]
   21cd8:	beq	21cfc <__assert_fail@plt+0x10a54>
   21cdc:	ldrsb	r3, [r0, #52]	; 0x34
   21ce0:	cmp	r3, #0
   21ce4:	strge	r0, [r4, #48]	; 0x30
   21ce8:	strge	r0, [r4, #44]	; 0x2c
   21cec:	strge	r0, [r4, #40]	; 0x28
   21cf0:	blt	21d3c <__assert_fail@plt+0x10a94>
   21cf4:	ldr	r0, [sp, #36]	; 0x24
   21cf8:	bl	23f40 <__assert_fail@plt+0x12c98>
   21cfc:	str	r7, [sp, #124]	; 0x7c
   21d00:	mov	r0, r5
   21d04:	bl	181a4 <__assert_fail@plt+0x6efc>
   21d08:	add	r0, sp, #40	; 0x28
   21d0c:	bl	18204 <__assert_fail@plt+0x6f5c>
   21d10:	ldr	r3, [sp, #124]	; 0x7c
   21d14:	cmp	r3, #0
   21d18:	bne	21da8 <__assert_fail@plt+0x10b00>
   21d1c:	ldr	r0, [sp, #124]	; 0x7c
   21d20:	add	sp, sp, #132	; 0x84
   21d24:	ldrd	r4, [sp]
   21d28:	ldrd	r6, [sp, #8]
   21d2c:	ldrd	r8, [sp, #16]
   21d30:	ldrd	sl, [sp, #24]
   21d34:	add	sp, sp, #32
   21d38:	pop	{pc}		; (ldr pc, [sp], #4)
   21d3c:	mov	r3, #1
   21d40:	add	r2, sp, #28
   21d44:	mov	r1, r4
   21d48:	add	r0, sp, #24
   21d4c:	bl	17eb4 <__assert_fail@plt+0x6c0c>
   21d50:	str	r0, [r4, #40]	; 0x28
   21d54:	mov	r3, #2
   21d58:	add	r2, sp, #28
   21d5c:	mov	r1, r4
   21d60:	add	r0, sp, #24
   21d64:	bl	17eb4 <__assert_fail@plt+0x6c0c>
   21d68:	str	r0, [r4, #44]	; 0x2c
   21d6c:	mov	r3, #6
   21d70:	add	r2, sp, #28
   21d74:	mov	r1, r4
   21d78:	add	r0, sp, #24
   21d7c:	bl	17eb4 <__assert_fail@plt+0x6c0c>
   21d80:	str	r0, [r4, #48]	; 0x30
   21d84:	ldr	r3, [r4, #40]	; 0x28
   21d88:	cmp	r3, #0
   21d8c:	beq	21da0 <__assert_fail@plt+0x10af8>
   21d90:	ldr	r3, [r4, #44]	; 0x2c
   21d94:	cmp	r0, #0
   21d98:	cmpne	r3, #0
   21d9c:	bne	21cf4 <__assert_fail@plt+0x10a4c>
   21da0:	ldr	r7, [sp, #24]
   21da4:	b	21cfc <__assert_fail@plt+0x10a54>
   21da8:	ldr	r3, [sp, #16]
   21dac:	cmp	r3, #0
   21db0:	beq	21dbc <__assert_fail@plt+0x10b14>
   21db4:	add	r0, r4, #136	; 0x88
   21db8:	bl	10ff0 <pthread_mutex_destroy@plt>
   21dbc:	mov	r0, r4
   21dc0:	bl	18244 <__assert_fail@plt+0x6f9c>
   21dc4:	mov	r3, #0
   21dc8:	str	r3, [r5]
   21dcc:	str	r3, [r5, #4]
   21dd0:	b	21d1c <__assert_fail@plt+0x10a74>
   21dd4:	mov	r0, #12
   21dd8:	b	21d20 <__assert_fail@plt+0x10a78>
   21ddc:	mov	r0, #12
   21de0:	b	21e00 <__assert_fail@plt+0x10b58>
   21de4:	mov	r0, #12
   21de8:	b	21e00 <__assert_fail@plt+0x10b58>
   21dec:	ldr	r0, [sp, #12]
   21df0:	b	21e00 <__assert_fail@plt+0x10b58>
   21df4:	mov	r0, #12
   21df8:	b	21e00 <__assert_fail@plt+0x10b58>
   21dfc:	mov	r0, #12
   21e00:	str	r0, [sp, #124]	; 0x7c
   21e04:	b	214a4 <__assert_fail@plt+0x101fc>
   21e08:	mov	r0, #12
   21e0c:	b	21e00 <__assert_fail@plt+0x10b58>
   21e10:	mov	r3, #0
   21e14:	str	r3, [r4, #52]	; 0x34
   21e18:	b	214a4 <__assert_fail@plt+0x101fc>
   21e1c:	mov	r3, #12
   21e20:	str	r3, [sp, #124]	; 0x7c
   21e24:	mov	r0, r4
   21e28:	bl	18244 <__assert_fail@plt+0x6f9c>
   21e2c:	mov	r3, #0
   21e30:	str	r3, [r5]
   21e34:	str	r3, [r5, #4]
   21e38:	ldr	r0, [sp, #124]	; 0x7c
   21e3c:	b	21d20 <__assert_fail@plt+0x10a78>
   21e40:	str	r4, [sp, #-8]!
   21e44:	str	lr, [sp, #4]
   21e48:	mov	ip, r2
   21e4c:	movw	r3, #26304	; 0x66c0
   21e50:	movt	r3, #3
   21e54:	ldr	r3, [r3]
   21e58:	ubfx	lr, r3, #25, #1
   21e5c:	ldrb	r2, [r2, #28]
   21e60:	bfi	r2, lr, #4, #1
   21e64:	mvn	r2, r2, lsl #25
   21e68:	mvn	r2, r2, lsr #25
   21e6c:	strb	r2, [ip, #28]
   21e70:	mov	r2, r1
   21e74:	mov	r1, r0
   21e78:	mov	r0, ip
   21e7c:	bl	211c8 <__assert_fail@plt+0xff20>
   21e80:	cmp	r0, #0
   21e84:	moveq	r0, #0
   21e88:	beq	21eb0 <__assert_fail@plt+0x10c08>
   21e8c:	movw	r3, #20428	; 0x4fcc
   21e90:	movt	r3, #2
   21e94:	add	r1, r3, #32
   21e98:	add	r3, r3, r0, lsl #2
   21e9c:	ldr	r3, [r3, #416]	; 0x1a0
   21ea0:	mov	r2, #5
   21ea4:	add	r1, r1, r3
   21ea8:	mov	r0, #0
   21eac:	bl	11098 <dcgettext@plt>
   21eb0:	ldr	r4, [sp]
   21eb4:	add	sp, sp, #4
   21eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   21ebc:	movw	r3, #26304	; 0x66c0
   21ec0:	movt	r3, #3
   21ec4:	ldr	r2, [r3]
   21ec8:	str	r0, [r3]
   21ecc:	mov	r0, r2
   21ed0:	bx	lr
   21ed4:	strd	r4, [sp, #-16]!
   21ed8:	str	r6, [sp, #8]
   21edc:	str	lr, [sp, #12]
   21ee0:	mov	r5, r0
   21ee4:	ldr	r4, [r0]
   21ee8:	ldr	r6, [r0, #16]
   21eec:	mov	r2, #256	; 0x100
   21ef0:	mov	r1, #0
   21ef4:	mov	r0, r6
   21ef8:	bl	111c4 <memset@plt>
   21efc:	mov	r2, r6
   21f00:	ldr	r1, [r4, #36]	; 0x24
   21f04:	mov	r0, r5
   21f08:	bl	1bc24 <__assert_fail@plt+0xa97c>
   21f0c:	ldr	r1, [r4, #40]	; 0x28
   21f10:	ldr	r3, [r4, #36]	; 0x24
   21f14:	cmp	r3, r1
   21f18:	beq	21f28 <__assert_fail@plt+0x10c80>
   21f1c:	mov	r2, r6
   21f20:	mov	r0, r5
   21f24:	bl	1bc24 <__assert_fail@plt+0xa97c>
   21f28:	ldr	r1, [r4, #44]	; 0x2c
   21f2c:	ldr	r3, [r4, #36]	; 0x24
   21f30:	cmp	r3, r1
   21f34:	beq	21f44 <__assert_fail@plt+0x10c9c>
   21f38:	mov	r2, r6
   21f3c:	mov	r0, r5
   21f40:	bl	1bc24 <__assert_fail@plt+0xa97c>
   21f44:	ldr	r1, [r4, #48]	; 0x30
   21f48:	ldr	r3, [r4, #36]	; 0x24
   21f4c:	cmp	r3, r1
   21f50:	beq	21f60 <__assert_fail@plt+0x10cb8>
   21f54:	mov	r2, r6
   21f58:	mov	r0, r5
   21f5c:	bl	1bc24 <__assert_fail@plt+0xa97c>
   21f60:	ldrb	r3, [r5, #28]
   21f64:	orr	r3, r3, #8
   21f68:	strb	r3, [r5, #28]
   21f6c:	mov	r0, #0
   21f70:	ldrd	r4, [sp]
   21f74:	ldr	r6, [sp, #8]
   21f78:	add	sp, sp, #12
   21f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   21f80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21f84:	strd	r6, [sp, #8]
   21f88:	strd	r8, [sp, #16]
   21f8c:	strd	sl, [sp, #24]
   21f90:	str	lr, [sp, #32]
   21f94:	sub	sp, sp, #52	; 0x34
   21f98:	ldr	ip, [sp, #88]	; 0x58
   21f9c:	ldr	r7, [sp, #96]	; 0x60
   21fa0:	ldr	r9, [r0]
   21fa4:	add	r8, r3, ip
   21fa8:	cmp	r3, r2
   21fac:	movle	lr, #0
   21fb0:	movgt	lr, #1
   21fb4:	orrs	lr, lr, r3, lsr #31
   21fb8:	bne	2231c <__assert_fail@plt+0x11074>
   21fbc:	mov	r5, r3
   21fc0:	str	r2, [sp, #32]
   21fc4:	str	r1, [sp, #36]	; 0x24
   21fc8:	mov	r6, r0
   21fcc:	cmp	r8, r2
   21fd0:	bgt	22128 <__assert_fail@plt+0x10e80>
   21fd4:	cmp	ip, #0
   21fd8:	cmpge	r3, r8
   21fdc:	bgt	22130 <__assert_fail@plt+0x10e88>
   21fe0:	cmp	r8, #0
   21fe4:	blt	2232c <__assert_fail@plt+0x11084>
   21fe8:	cmp	r3, r8
   21fec:	movgt	r3, #0
   21ff0:	movle	r3, #1
   21ff4:	ands	r3, r3, ip, lsr #31
   21ff8:	bne	2232c <__assert_fail@plt+0x11084>
   21ffc:	movw	r3, #0
   22000:	movt	r3, #0
   22004:	cmp	r3, #0
   22008:	movne	r3, #1
   2200c:	moveq	r3, #0
   22010:	mov	r2, r3
   22014:	movw	r3, #0
   22018:	movt	r3, #0
   2201c:	cmp	r3, #0
   22020:	movne	r3, #1
   22024:	moveq	r3, #0
   22028:	orr	r3, r2, r3
   2202c:	ands	r3, r3, #255	; 0xff
   22030:	str	r3, [sp, #28]
   22034:	beq	22048 <__assert_fail@plt+0x10da0>
   22038:	add	r0, r9, #136	; 0x88
   2203c:	bl	11020 <pthread_mutex_lock@plt>
   22040:	mov	r3, #1
   22044:	str	r3, [sp, #28]
   22048:	ldrb	r3, [r6, #28]
   2204c:	ubfx	fp, r3, #5, #2
   22050:	cmp	r8, r5
   22054:	ble	2206c <__assert_fail@plt+0x10dc4>
   22058:	ldr	r2, [r6, #16]
   2205c:	cmp	r2, #0
   22060:	beq	2206c <__assert_fail@plt+0x10dc4>
   22064:	tst	r3, #8
   22068:	beq	22138 <__assert_fail@plt+0x10e90>
   2206c:	ldrb	r3, [r6, #28]
   22070:	tst	r3, #16
   22074:	bne	22168 <__assert_fail@plt+0x10ec0>
   22078:	cmp	r7, #0
   2207c:	moveq	r4, #1
   22080:	beq	22098 <__assert_fail@plt+0x10df0>
   22084:	and	r3, r3, #6
   22088:	cmp	r3, #4
   2208c:	beq	22144 <__assert_fail@plt+0x10e9c>
   22090:	ldr	r4, [r6, #24]
   22094:	add	r4, r4, #1
   22098:	str	r4, [sp, #40]	; 0x28
   2209c:	lsl	r0, r4, #3
   220a0:	bl	23d48 <__assert_fail@plt+0x12aa0>
   220a4:	subs	sl, r0, #0
   220a8:	beq	22314 <__assert_fail@plt+0x1106c>
   220ac:	str	fp, [sp, #16]
   220b0:	str	sl, [sp, #12]
   220b4:	str	r4, [sp, #8]
   220b8:	ldr	r3, [sp, #92]	; 0x5c
   220bc:	str	r3, [sp, #4]
   220c0:	str	r8, [sp]
   220c4:	mov	r3, r5
   220c8:	ldr	r2, [sp, #32]
   220cc:	ldr	r1, [sp, #36]	; 0x24
   220d0:	mov	r0, r6
   220d4:	bl	1f770 <__assert_fail@plt+0xe4c8>
   220d8:	subs	r8, r0, #0
   220dc:	beq	22174 <__assert_fail@plt+0x10ecc>
   220e0:	cmp	r8, #1
   220e4:	mvneq	r5, #0
   220e8:	mvnne	r5, #1
   220ec:	mov	r0, sl
   220f0:	bl	23f40 <__assert_fail@plt+0x12c98>
   220f4:	ldr	r3, [sp, #28]
   220f8:	cmp	r3, #0
   220fc:	beq	22108 <__assert_fail@plt+0x10e60>
   22100:	add	r0, r9, #136	; 0x88
   22104:	bl	10f90 <pthread_mutex_unlock@plt>
   22108:	mov	r0, r5
   2210c:	add	sp, sp, #52	; 0x34
   22110:	ldrd	r4, [sp]
   22114:	ldrd	r6, [sp, #8]
   22118:	ldrd	r8, [sp, #16]
   2211c:	ldrd	sl, [sp, #24]
   22120:	add	sp, sp, #32
   22124:	pop	{pc}		; (ldr pc, [sp], #4)
   22128:	ldr	r8, [sp, #32]
   2212c:	b	21ffc <__assert_fail@plt+0x10d54>
   22130:	ldr	r8, [sp, #32]
   22134:	b	21ffc <__assert_fail@plt+0x10d54>
   22138:	mov	r0, r6
   2213c:	bl	21ed4 <__assert_fail@plt+0x10c2c>
   22140:	b	2206c <__assert_fail@plt+0x10dc4>
   22144:	ldr	r3, [r7]
   22148:	ldr	r2, [r6, #24]
   2214c:	cmp	r3, r2
   22150:	bhi	22090 <__assert_fail@plt+0x10de8>
   22154:	cmp	r3, #0
   22158:	movgt	r4, r3
   2215c:	movle	r4, #1
   22160:	movle	r7, #0
   22164:	b	22098 <__assert_fail@plt+0x10df0>
   22168:	mov	r4, #1
   2216c:	mov	r7, #0
   22170:	b	22098 <__assert_fail@plt+0x10df0>
   22174:	cmp	r7, #0
   22178:	beq	22224 <__assert_fail@plt+0x10f7c>
   2217c:	ldrb	fp, [r6, #28]
   22180:	ubfx	fp, fp, #1, #2
   22184:	add	r3, r4, #1
   22188:	str	r3, [sp, #32]
   2218c:	cmp	fp, #0
   22190:	beq	22238 <__assert_fail@plt+0x10f90>
   22194:	cmp	fp, #1
   22198:	movne	fp, #2
   2219c:	beq	22284 <__assert_fail@plt+0x10fdc>
   221a0:	cmp	r4, #0
   221a4:	ble	222f0 <__assert_fail@plt+0x11048>
   221a8:	ldr	r3, [sp, #40]	; 0x28
   221ac:	lsl	ip, r3, #2
   221b0:	mov	r3, #0
   221b4:	add	r0, sl, #4
   221b8:	ldr	r1, [sl, r3, lsl #1]
   221bc:	ldr	r2, [r7, #4]
   221c0:	str	r1, [r2, r3]
   221c4:	ldr	r1, [r0, r3, lsl #1]
   221c8:	ldr	r2, [r7, #8]
   221cc:	str	r1, [r2, r3]
   221d0:	add	r3, r3, #4
   221d4:	cmp	ip, r3
   221d8:	bne	221b8 <__assert_fail@plt+0x10f10>
   221dc:	ldr	r3, [r7]
   221e0:	cmp	r4, r3
   221e4:	bcs	2220c <__assert_fail@plt+0x10f64>
   221e8:	mvn	r3, #0
   221ec:	ldr	r2, [r7, #8]
   221f0:	str	r3, [r2, r4, lsl #2]
   221f4:	ldr	r2, [r7, #4]
   221f8:	str	r3, [r2, r4, lsl #2]
   221fc:	add	r4, r4, #1
   22200:	ldr	r2, [r7]
   22204:	cmp	r4, r2
   22208:	bcc	221ec <__assert_fail@plt+0x10f44>
   2220c:	ldrb	r3, [r6, #28]
   22210:	bfi	r3, fp, #1, #2
   22214:	strb	r3, [r6, #28]
   22218:	and	r3, r3, #6
   2221c:	cmp	r3, #0
   22220:	beq	22324 <__assert_fail@plt+0x1107c>
   22224:	ldrb	r3, [sp, #100]	; 0x64
   22228:	cmp	r3, #0
   2222c:	bne	22308 <__assert_fail@plt+0x11060>
   22230:	ldr	r5, [sl]
   22234:	b	220ec <__assert_fail@plt+0x10e44>
   22238:	lsl	fp, r3, #2
   2223c:	mov	r0, fp
   22240:	bl	23d48 <__assert_fail@plt+0x12aa0>
   22244:	str	r0, [r7, #4]
   22248:	cmp	r0, #0
   2224c:	beq	222f8 <__assert_fail@plt+0x11050>
   22250:	mov	r0, fp
   22254:	bl	23d48 <__assert_fail@plt+0x12aa0>
   22258:	str	r0, [r7, #8]
   2225c:	cmp	r0, #0
   22260:	beq	22274 <__assert_fail@plt+0x10fcc>
   22264:	ldr	r3, [sp, #32]
   22268:	str	r3, [r7]
   2226c:	mov	fp, #1
   22270:	b	221a0 <__assert_fail@plt+0x10ef8>
   22274:	ldr	r0, [r7, #4]
   22278:	bl	23f40 <__assert_fail@plt+0x12c98>
   2227c:	mov	fp, #0
   22280:	b	2220c <__assert_fail@plt+0x10f64>
   22284:	ldr	r3, [r7]
   22288:	ldr	r2, [sp, #32]
   2228c:	cmp	r3, r2
   22290:	bcs	221a0 <__assert_fail@plt+0x10ef8>
   22294:	lsl	r3, r2, #2
   22298:	str	r3, [sp, #44]	; 0x2c
   2229c:	mov	r1, r3
   222a0:	ldr	r0, [r7, #4]
   222a4:	bl	23d84 <__assert_fail@plt+0x12adc>
   222a8:	subs	r2, r0, #0
   222ac:	str	r2, [sp, #36]	; 0x24
   222b0:	beq	22300 <__assert_fail@plt+0x11058>
   222b4:	ldr	r1, [sp, #44]	; 0x2c
   222b8:	ldr	r0, [r7, #8]
   222bc:	bl	23d84 <__assert_fail@plt+0x12adc>
   222c0:	cmp	r0, #0
   222c4:	beq	222e0 <__assert_fail@plt+0x11038>
   222c8:	ldr	r3, [sp, #36]	; 0x24
   222cc:	str	r3, [r7, #4]
   222d0:	str	r0, [r7, #8]
   222d4:	ldr	r3, [sp, #32]
   222d8:	str	r3, [r7]
   222dc:	b	221a0 <__assert_fail@plt+0x10ef8>
   222e0:	ldr	r0, [sp, #36]	; 0x24
   222e4:	bl	23f40 <__assert_fail@plt+0x12c98>
   222e8:	mov	fp, #0
   222ec:	b	2220c <__assert_fail@plt+0x10f64>
   222f0:	mov	r4, r8
   222f4:	b	221dc <__assert_fail@plt+0x10f34>
   222f8:	mov	fp, #0
   222fc:	b	2220c <__assert_fail@plt+0x10f64>
   22300:	mov	fp, #0
   22304:	b	2220c <__assert_fail@plt+0x10f64>
   22308:	ldr	r3, [sl, #4]
   2230c:	sub	r5, r3, r5
   22310:	b	220ec <__assert_fail@plt+0x10e44>
   22314:	mvn	r5, #1
   22318:	b	220f4 <__assert_fail@plt+0x10e4c>
   2231c:	mvn	r5, #0
   22320:	b	22108 <__assert_fail@plt+0x10e60>
   22324:	mvn	r5, #1
   22328:	b	220ec <__assert_fail@plt+0x10e44>
   2232c:	movw	r3, #0
   22330:	movt	r3, #0
   22334:	cmp	r3, #0
   22338:	movne	r3, #1
   2233c:	moveq	r3, #0
   22340:	mov	r2, r3
   22344:	movw	r3, #0
   22348:	movt	r3, #0
   2234c:	cmp	r3, #0
   22350:	movne	r3, #1
   22354:	moveq	r3, #0
   22358:	orr	r3, r2, r3
   2235c:	ands	r3, r3, #255	; 0xff
   22360:	str	r3, [sp, #28]
   22364:	movne	r8, #0
   22368:	bne	22038 <__assert_fail@plt+0x10d90>
   2236c:	ldrb	fp, [r6, #28]
   22370:	ubfx	fp, fp, #5, #2
   22374:	mov	r8, #0
   22378:	b	2206c <__assert_fail@plt+0x10dc4>
   2237c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   22380:	strd	r6, [sp, #8]
   22384:	strd	r8, [sp, #16]
   22388:	strd	sl, [sp, #24]
   2238c:	str	lr, [sp, #32]
   22390:	sub	sp, sp, #20
   22394:	mov	r7, r3
   22398:	ldr	r5, [sp, #56]	; 0x38
   2239c:	ldr	r6, [sp, #72]	; 0x48
   223a0:	orr	r3, r5, r2
   223a4:	orrs	r3, r3, r6
   223a8:	mvnmi	r4, #1
   223ac:	bmi	22414 <__assert_fail@plt+0x1116c>
   223b0:	mov	r9, r0
   223b4:	mov	sl, r1
   223b8:	mov	r4, r2
   223bc:	adds	fp, r2, r5
   223c0:	bvs	22478 <__assert_fail@plt+0x111d0>
   223c4:	cmp	r5, #0
   223c8:	ble	2246c <__assert_fail@plt+0x111c4>
   223cc:	cmp	r2, #0
   223d0:	movle	r8, #0
   223d4:	bgt	22434 <__assert_fail@plt+0x1118c>
   223d8:	ldrb	r3, [sp, #76]	; 0x4c
   223dc:	str	r3, [sp, #12]
   223e0:	ldr	r3, [sp, #68]	; 0x44
   223e4:	str	r3, [sp, #8]
   223e8:	str	r6, [sp, #4]
   223ec:	ldr	r3, [sp, #64]	; 0x40
   223f0:	str	r3, [sp]
   223f4:	ldr	r3, [sp, #60]	; 0x3c
   223f8:	mov	r2, fp
   223fc:	mov	r1, r7
   22400:	mov	r0, r9
   22404:	bl	21f80 <__assert_fail@plt+0x10cd8>
   22408:	mov	r4, r0
   2240c:	mov	r0, r8
   22410:	bl	23f40 <__assert_fail@plt+0x12c98>
   22414:	mov	r0, r4
   22418:	add	sp, sp, #20
   2241c:	ldrd	r4, [sp]
   22420:	ldrd	r6, [sp, #8]
   22424:	ldrd	r8, [sp, #16]
   22428:	ldrd	sl, [sp, #24]
   2242c:	add	sp, sp, #32
   22430:	pop	{pc}		; (ldr pc, [sp], #4)
   22434:	mov	r0, fp
   22438:	bl	23d48 <__assert_fail@plt+0x12aa0>
   2243c:	subs	r8, r0, #0
   22440:	beq	22480 <__assert_fail@plt+0x111d8>
   22444:	mov	r2, r4
   22448:	mov	r1, sl
   2244c:	mov	r0, r8
   22450:	bl	11038 <memcpy@plt>
   22454:	mov	r2, r5
   22458:	mov	r1, r7
   2245c:	add	r0, r8, r4
   22460:	bl	11038 <memcpy@plt>
   22464:	mov	r7, r8
   22468:	b	223d8 <__assert_fail@plt+0x11130>
   2246c:	mov	r7, r1
   22470:	mov	r8, #0
   22474:	b	223d8 <__assert_fail@plt+0x11130>
   22478:	mvn	r4, #1
   2247c:	b	22414 <__assert_fail@plt+0x1116c>
   22480:	mvn	r4, #1
   22484:	b	22414 <__assert_fail@plt+0x1116c>
   22488:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2248c:	strd	r6, [sp, #8]
   22490:	str	r8, [sp, #16]
   22494:	str	lr, [sp, #20]
   22498:	mov	r4, r0
   2249c:	mov	r7, r1
   224a0:	mov	r6, r2
   224a4:	and	r2, r2, #1
   224a8:	movw	r5, #45820	; 0xb2fc
   224ac:	movt	r5, #3
   224b0:	movw	r3, #710	; 0x2c6
   224b4:	movt	r3, #257	; 0x101
   224b8:	cmp	r2, #0
   224bc:	moveq	r5, r3
   224c0:	mov	r3, #0
   224c4:	str	r3, [r0]
   224c8:	str	r3, [r0, #4]
   224cc:	str	r3, [r0, #8]
   224d0:	mov	r0, #256	; 0x100
   224d4:	bl	23d48 <__assert_fail@plt+0x12aa0>
   224d8:	str	r0, [r4, #16]
   224dc:	cmp	r0, #0
   224e0:	beq	22588 <__assert_fail@plt+0x112e0>
   224e4:	lsl	r3, r6, #21
   224e8:	and	r3, r3, #4194304	; 0x400000
   224ec:	orr	r5, r3, r5
   224f0:	tst	r6, #4
   224f4:	bicne	r5, r5, #64	; 0x40
   224f8:	orrne	r5, r5, #256	; 0x100
   224fc:	movne	r2, #1
   22500:	moveq	r2, #0
   22504:	ldrb	r3, [r4, #28]
   22508:	bfi	r3, r2, #7, #1
   2250c:	ubfx	r6, r6, #3, #1
   22510:	bfi	r3, r6, #4, #1
   22514:	strb	r3, [r4, #28]
   22518:	mov	r3, #0
   2251c:	str	r3, [r4, #20]
   22520:	mov	r0, r7
   22524:	bl	11188 <strlen@plt>
   22528:	mov	r3, r5
   2252c:	mov	r2, r0
   22530:	mov	r1, r7
   22534:	mov	r0, r4
   22538:	bl	211c8 <__assert_fail@plt+0xff20>
   2253c:	mov	r5, r0
   22540:	cmp	r0, #16
   22544:	beq	22570 <__assert_fail@plt+0x112c8>
   22548:	cmp	r0, #0
   2254c:	bne	22574 <__assert_fail@plt+0x112cc>
   22550:	mov	r0, r4
   22554:	bl	21ed4 <__assert_fail@plt+0x10c2c>
   22558:	mov	r0, r5
   2255c:	ldrd	r4, [sp]
   22560:	ldrd	r6, [sp, #8]
   22564:	ldr	r8, [sp, #16]
   22568:	add	sp, sp, #20
   2256c:	pop	{pc}		; (ldr pc, [sp], #4)
   22570:	mov	r5, #8
   22574:	ldr	r0, [r4, #16]
   22578:	bl	23f40 <__assert_fail@plt+0x12c98>
   2257c:	mov	r3, #0
   22580:	str	r3, [r4, #16]
   22584:	b	22558 <__assert_fail@plt+0x112b0>
   22588:	mov	r5, #12
   2258c:	b	22558 <__assert_fail@plt+0x112b0>
   22590:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22594:	strd	r6, [sp, #8]
   22598:	str	r8, [sp, #16]
   2259c:	str	lr, [sp, #20]
   225a0:	cmp	r0, #16
   225a4:	bhi	22620 <__assert_fail@plt+0x11378>
   225a8:	mov	r6, r2
   225ac:	mov	r4, r3
   225b0:	movw	r3, #20428	; 0x4fcc
   225b4:	movt	r3, #2
   225b8:	add	r1, r3, #32
   225bc:	add	r3, r3, r0, lsl #2
   225c0:	ldr	r3, [r3, #416]	; 0x1a0
   225c4:	mov	r2, #5
   225c8:	add	r1, r1, r3
   225cc:	mov	r0, #0
   225d0:	bl	11098 <dcgettext@plt>
   225d4:	mov	r7, r0
   225d8:	bl	11188 <strlen@plt>
   225dc:	add	r5, r0, #1
   225e0:	cmp	r4, #0
   225e4:	beq	22608 <__assert_fail@plt+0x11360>
   225e8:	cmp	r5, r4
   225ec:	subhi	r2, r4, #1
   225f0:	movhi	r3, #0
   225f4:	strbhi	r3, [r6, r2]
   225f8:	movls	r2, r5
   225fc:	mov	r1, r7
   22600:	mov	r0, r6
   22604:	bl	11038 <memcpy@plt>
   22608:	mov	r0, r5
   2260c:	ldrd	r4, [sp]
   22610:	ldrd	r6, [sp, #8]
   22614:	ldr	r8, [sp, #16]
   22618:	add	sp, sp, #20
   2261c:	pop	{pc}		; (ldr pc, [sp], #4)
   22620:	bl	1129c <abort@plt>
   22624:	strd	r4, [sp, #-16]!
   22628:	str	r6, [sp, #8]
   2262c:	str	lr, [sp, #12]
   22630:	mov	r4, r0
   22634:	ldr	r5, [r0]
   22638:	cmp	r5, #0
   2263c:	beq	22684 <__assert_fail@plt+0x113dc>
   22640:	movw	r3, #0
   22644:	movt	r3, #0
   22648:	cmp	r3, #0
   2264c:	movne	r3, #1
   22650:	moveq	r3, #0
   22654:	movw	r2, #0
   22658:	movt	r2, #0
   2265c:	cmp	r2, #0
   22660:	movne	r2, #1
   22664:	moveq	r2, #0
   22668:	orr	r3, r3, r2
   2266c:	tst	r3, #255	; 0xff
   22670:	beq	2267c <__assert_fail@plt+0x113d4>
   22674:	add	r0, r5, #136	; 0x88
   22678:	bl	10ff0 <pthread_mutex_destroy@plt>
   2267c:	mov	r0, r5
   22680:	bl	18244 <__assert_fail@plt+0x6f9c>
   22684:	mov	r5, #0
   22688:	str	r5, [r4]
   2268c:	str	r5, [r4, #4]
   22690:	ldr	r0, [r4, #16]
   22694:	bl	23f40 <__assert_fail@plt+0x12c98>
   22698:	str	r5, [r4, #16]
   2269c:	ldr	r0, [r4, #20]
   226a0:	bl	23f40 <__assert_fail@plt+0x12c98>
   226a4:	str	r5, [r4, #20]
   226a8:	ldrd	r4, [sp]
   226ac:	ldr	r6, [sp, #8]
   226b0:	add	sp, sp, #12
   226b4:	pop	{pc}		; (ldr pc, [sp], #4)
   226b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   226bc:	strd	r6, [sp, #8]
   226c0:	strd	r8, [sp, #16]
   226c4:	strd	sl, [sp, #24]
   226c8:	str	lr, [sp, #32]
   226cc:	sub	sp, sp, #36	; 0x24
   226d0:	ldr	r6, [sp, #72]	; 0x48
   226d4:	bics	ip, r6, #7
   226d8:	movne	r0, #2
   226dc:	bne	2279c <__assert_fail@plt+0x114f4>
   226e0:	mov	r7, r3
   226e4:	mov	r9, r2
   226e8:	str	r1, [sp, #28]
   226ec:	mov	r5, r0
   226f0:	ands	fp, r6, #4
   226f4:	beq	227b8 <__assert_fail@plt+0x11510>
   226f8:	ldr	fp, [r3]
   226fc:	ldr	r8, [r3, #4]
   22700:	ldr	sl, [r5]
   22704:	movw	r3, #0
   22708:	movt	r3, #0
   2270c:	cmp	r3, #0
   22710:	movne	r4, #1
   22714:	moveq	r4, #0
   22718:	mov	r3, r4
   2271c:	mov	r4, #1
   22720:	movw	r2, #0
   22724:	movt	r2, #0
   22728:	cmp	r2, #0
   2272c:	movne	r4, #1
   22730:	moveq	r4, #0
   22734:	orr	r4, r3, r4
   22738:	ands	r4, r4, #255	; 0xff
   2273c:	beq	22748 <__assert_fail@plt+0x114a0>
   22740:	add	r0, sl, #136	; 0x88
   22744:	bl	11020 <pthread_mutex_lock@plt>
   22748:	ldrb	r3, [r5, #28]
   2274c:	tst	r3, #16
   22750:	beq	227c8 <__assert_fail@plt+0x11520>
   22754:	str	r6, [sp, #16]
   22758:	mov	r3, #0
   2275c:	str	r3, [sp, #12]
   22760:	str	r3, [sp, #8]
   22764:	str	r8, [sp, #4]
   22768:	str	r8, [sp]
   2276c:	mov	r3, fp
   22770:	mov	r2, r8
   22774:	ldr	r1, [sp, #28]
   22778:	mov	r0, r5
   2277c:	bl	1f770 <__assert_fail@plt+0xe4c8>
   22780:	mov	r5, r0
   22784:	cmp	r4, #0
   22788:	beq	22794 <__assert_fail@plt+0x114ec>
   2278c:	add	r0, sl, #136	; 0x88
   22790:	bl	10f90 <pthread_mutex_unlock@plt>
   22794:	adds	r0, r5, #0
   22798:	movne	r0, #1
   2279c:	add	sp, sp, #36	; 0x24
   227a0:	ldrd	r4, [sp]
   227a4:	ldrd	r6, [sp, #8]
   227a8:	ldrd	r8, [sp, #16]
   227ac:	ldrd	sl, [sp, #24]
   227b0:	add	sp, sp, #32
   227b4:	pop	{pc}		; (ldr pc, [sp], #4)
   227b8:	ldr	r0, [sp, #28]
   227bc:	bl	11188 <strlen@plt>
   227c0:	mov	r8, r0
   227c4:	b	22700 <__assert_fail@plt+0x11458>
   227c8:	str	r6, [sp, #16]
   227cc:	str	r7, [sp, #12]
   227d0:	str	r9, [sp, #8]
   227d4:	str	r8, [sp, #4]
   227d8:	str	r8, [sp]
   227dc:	mov	r3, fp
   227e0:	mov	r2, r8
   227e4:	ldr	r1, [sp, #28]
   227e8:	mov	r0, r5
   227ec:	bl	1f770 <__assert_fail@plt+0xe4c8>
   227f0:	mov	r5, r0
   227f4:	b	22784 <__assert_fail@plt+0x114dc>
   227f8:	push	{lr}		; (str lr, [sp, #-4]!)
   227fc:	sub	sp, sp, #20
   22800:	mov	ip, #1
   22804:	str	ip, [sp, #12]
   22808:	ldr	ip, [sp, #24]
   2280c:	str	ip, [sp, #8]
   22810:	str	r2, [sp, #4]
   22814:	mov	ip, #0
   22818:	str	ip, [sp]
   2281c:	bl	21f80 <__assert_fail@plt+0x10cd8>
   22820:	add	sp, sp, #20
   22824:	pop	{pc}		; (ldr pc, [sp], #4)
   22828:	push	{lr}		; (str lr, [sp, #-4]!)
   2282c:	sub	sp, sp, #20
   22830:	mov	ip, #0
   22834:	str	ip, [sp, #12]
   22838:	ldr	ip, [sp, #28]
   2283c:	str	ip, [sp, #8]
   22840:	str	r2, [sp, #4]
   22844:	ldr	ip, [sp, #24]
   22848:	str	ip, [sp]
   2284c:	bl	21f80 <__assert_fail@plt+0x10cd8>
   22850:	add	sp, sp, #20
   22854:	pop	{pc}		; (ldr pc, [sp], #4)
   22858:	push	{lr}		; (str lr, [sp, #-4]!)
   2285c:	sub	sp, sp, #28
   22860:	mov	ip, #1
   22864:	str	ip, [sp, #20]
   22868:	ldr	ip, [sp, #44]	; 0x2c
   2286c:	str	ip, [sp, #16]
   22870:	ldr	ip, [sp, #40]	; 0x28
   22874:	str	ip, [sp, #12]
   22878:	mov	ip, #0
   2287c:	str	ip, [sp, #8]
   22880:	ldr	ip, [sp, #36]	; 0x24
   22884:	str	ip, [sp, #4]
   22888:	ldr	ip, [sp, #32]
   2288c:	str	ip, [sp]
   22890:	bl	2237c <__assert_fail@plt+0x110d4>
   22894:	add	sp, sp, #28
   22898:	pop	{pc}		; (ldr pc, [sp], #4)
   2289c:	push	{lr}		; (str lr, [sp, #-4]!)
   228a0:	sub	sp, sp, #28
   228a4:	mov	ip, #0
   228a8:	str	ip, [sp, #20]
   228ac:	ldr	ip, [sp, #48]	; 0x30
   228b0:	str	ip, [sp, #16]
   228b4:	ldr	ip, [sp, #44]	; 0x2c
   228b8:	str	ip, [sp, #12]
   228bc:	ldr	ip, [sp, #40]	; 0x28
   228c0:	str	ip, [sp, #8]
   228c4:	ldr	ip, [sp, #36]	; 0x24
   228c8:	str	ip, [sp, #4]
   228cc:	ldr	ip, [sp, #32]
   228d0:	str	ip, [sp]
   228d4:	bl	2237c <__assert_fail@plt+0x110d4>
   228d8:	add	sp, sp, #28
   228dc:	pop	{pc}		; (ldr pc, [sp], #4)
   228e0:	cmp	r2, #0
   228e4:	beq	22910 <__assert_fail@plt+0x11668>
   228e8:	push	{lr}		; (str lr, [sp, #-4]!)
   228ec:	ldrb	ip, [r0, #28]
   228f0:	mov	lr, #1
   228f4:	bfi	ip, lr, #1, #2
   228f8:	strb	ip, [r0, #28]
   228fc:	str	r2, [r1]
   22900:	str	r3, [r1, #4]
   22904:	ldr	r3, [sp, #4]
   22908:	str	r3, [r1, #8]
   2290c:	pop	{pc}		; (ldr pc, [sp], #4)
   22910:	ldrb	r3, [r0, #28]
   22914:	bfc	r3, #1, #2
   22918:	strb	r3, [r0, #28]
   2291c:	mov	r3, #0
   22920:	str	r3, [r1]
   22924:	str	r3, [r1, #8]
   22928:	str	r3, [r1, #4]
   2292c:	bx	lr
   22930:	strd	r4, [sp, #-16]!
   22934:	str	r6, [sp, #8]
   22938:	str	lr, [sp, #12]
   2293c:	sub	sp, sp, #32
   22940:	mov	r4, r0
   22944:	ldr	r5, [sp, #48]	; 0x30
   22948:	ldr	r6, [sp, #52]	; 0x34
   2294c:	cmp	r1, #0
   22950:	beq	22a1c <__assert_fail@plt+0x11774>
   22954:	str	r3, [sp, #4]
   22958:	str	r2, [sp]
   2295c:	mov	r3, r1
   22960:	movw	r2, #21016	; 0x5218
   22964:	movt	r2, #2
   22968:	mov	r1, #1
   2296c:	bl	111f4 <__fprintf_chk@plt>
   22970:	mov	r2, #5
   22974:	movw	r1, #21036	; 0x522c
   22978:	movt	r1, #2
   2297c:	mov	r0, #0
   22980:	bl	11098 <dcgettext@plt>
   22984:	movw	r3, #2022	; 0x7e6
   22988:	str	r3, [sp]
   2298c:	mov	r3, r0
   22990:	movw	r2, #21764	; 0x5504
   22994:	movt	r2, #2
   22998:	mov	r1, #1
   2299c:	mov	r0, r4
   229a0:	bl	111f4 <__fprintf_chk@plt>
   229a4:	mov	r1, r4
   229a8:	mov	r0, #10
   229ac:	bl	1108c <fputc_unlocked@plt>
   229b0:	mov	r2, #5
   229b4:	movw	r1, #21040	; 0x5230
   229b8:	movt	r1, #2
   229bc:	mov	r0, #0
   229c0:	bl	11098 <dcgettext@plt>
   229c4:	movw	r3, #21212	; 0x52dc
   229c8:	movt	r3, #2
   229cc:	mov	r2, r0
   229d0:	mov	r1, #1
   229d4:	mov	r0, r4
   229d8:	bl	111f4 <__fprintf_chk@plt>
   229dc:	mov	r1, r4
   229e0:	mov	r0, #10
   229e4:	bl	1108c <fputc_unlocked@plt>
   229e8:	cmp	r6, #9
   229ec:	ldrls	pc, [pc, r6, lsl #2]
   229f0:	b	22cf4 <__assert_fail@plt+0x11a4c>
   229f4:	andeq	r2, r2, r0, ror #20
   229f8:	andeq	r2, r2, r8, lsr sl
   229fc:	andeq	r2, r2, r4, ror sl
   22a00:	andeq	r2, r2, r8, lsr #21
   22a04:	andeq	r2, r2, r4, ror #21
   22a08:	andeq	r2, r2, r8, lsr #22
   22a0c:	andeq	r2, r2, r4, ror fp
   22a10:	andeq	r2, r2, r8, asr #23
   22a14:	andeq	r2, r2, r4, lsr #24
   22a18:	andeq	r2, r2, r8, lsl #25
   22a1c:	str	r3, [sp]
   22a20:	mov	r3, r2
   22a24:	movw	r2, #21028	; 0x5224
   22a28:	movt	r2, #2
   22a2c:	mov	r1, #1
   22a30:	bl	111f4 <__fprintf_chk@plt>
   22a34:	b	22970 <__assert_fail@plt+0x116c8>
   22a38:	mov	r2, #5
   22a3c:	movw	r1, #21248	; 0x5300
   22a40:	movt	r1, #2
   22a44:	mov	r0, #0
   22a48:	bl	11098 <dcgettext@plt>
   22a4c:	ldr	r3, [r5]
   22a50:	mov	r2, r0
   22a54:	mov	r1, #1
   22a58:	mov	r0, r4
   22a5c:	bl	111f4 <__fprintf_chk@plt>
   22a60:	add	sp, sp, #32
   22a64:	ldrd	r4, [sp]
   22a68:	ldr	r6, [sp, #8]
   22a6c:	add	sp, sp, #12
   22a70:	pop	{pc}		; (ldr pc, [sp], #4)
   22a74:	mov	r2, #5
   22a78:	movw	r1, #21264	; 0x5310
   22a7c:	movt	r1, #2
   22a80:	mov	r0, #0
   22a84:	bl	11098 <dcgettext@plt>
   22a88:	ldr	r3, [r5, #4]
   22a8c:	str	r3, [sp]
   22a90:	ldr	r3, [r5]
   22a94:	mov	r2, r0
   22a98:	mov	r1, #1
   22a9c:	mov	r0, r4
   22aa0:	bl	111f4 <__fprintf_chk@plt>
   22aa4:	b	22a60 <__assert_fail@plt+0x117b8>
   22aa8:	mov	r2, #5
   22aac:	movw	r1, #21288	; 0x5328
   22ab0:	movt	r1, #2
   22ab4:	mov	r0, #0
   22ab8:	bl	11098 <dcgettext@plt>
   22abc:	ldr	r3, [r5, #8]
   22ac0:	str	r3, [sp, #4]
   22ac4:	ldr	r3, [r5, #4]
   22ac8:	str	r3, [sp]
   22acc:	ldr	r3, [r5]
   22ad0:	mov	r2, r0
   22ad4:	mov	r1, #1
   22ad8:	mov	r0, r4
   22adc:	bl	111f4 <__fprintf_chk@plt>
   22ae0:	b	22a60 <__assert_fail@plt+0x117b8>
   22ae4:	mov	r2, #5
   22ae8:	movw	r1, #21316	; 0x5344
   22aec:	movt	r1, #2
   22af0:	mov	r0, #0
   22af4:	bl	11098 <dcgettext@plt>
   22af8:	ldr	r3, [r5, #12]
   22afc:	str	r3, [sp, #8]
   22b00:	ldr	r3, [r5, #8]
   22b04:	str	r3, [sp, #4]
   22b08:	ldr	r3, [r5, #4]
   22b0c:	str	r3, [sp]
   22b10:	ldr	r3, [r5]
   22b14:	mov	r2, r0
   22b18:	mov	r1, #1
   22b1c:	mov	r0, r4
   22b20:	bl	111f4 <__fprintf_chk@plt>
   22b24:	b	22a60 <__assert_fail@plt+0x117b8>
   22b28:	mov	r2, #5
   22b2c:	movw	r1, #21348	; 0x5364
   22b30:	movt	r1, #2
   22b34:	mov	r0, #0
   22b38:	bl	11098 <dcgettext@plt>
   22b3c:	ldr	r3, [r5, #16]
   22b40:	str	r3, [sp, #12]
   22b44:	ldr	r3, [r5, #12]
   22b48:	str	r3, [sp, #8]
   22b4c:	ldr	r3, [r5, #8]
   22b50:	str	r3, [sp, #4]
   22b54:	ldr	r3, [r5, #4]
   22b58:	str	r3, [sp]
   22b5c:	ldr	r3, [r5]
   22b60:	mov	r2, r0
   22b64:	mov	r1, #1
   22b68:	mov	r0, r4
   22b6c:	bl	111f4 <__fprintf_chk@plt>
   22b70:	b	22a60 <__assert_fail@plt+0x117b8>
   22b74:	mov	r2, #5
   22b78:	movw	r1, #21384	; 0x5388
   22b7c:	movt	r1, #2
   22b80:	mov	r0, #0
   22b84:	bl	11098 <dcgettext@plt>
   22b88:	ldr	r3, [r5, #20]
   22b8c:	str	r3, [sp, #16]
   22b90:	ldr	r3, [r5, #16]
   22b94:	str	r3, [sp, #12]
   22b98:	ldr	r3, [r5, #12]
   22b9c:	str	r3, [sp, #8]
   22ba0:	ldr	r3, [r5, #8]
   22ba4:	str	r3, [sp, #4]
   22ba8:	ldr	r3, [r5, #4]
   22bac:	str	r3, [sp]
   22bb0:	ldr	r3, [r5]
   22bb4:	mov	r2, r0
   22bb8:	mov	r1, #1
   22bbc:	mov	r0, r4
   22bc0:	bl	111f4 <__fprintf_chk@plt>
   22bc4:	b	22a60 <__assert_fail@plt+0x117b8>
   22bc8:	mov	r2, #5
   22bcc:	movw	r1, #21424	; 0x53b0
   22bd0:	movt	r1, #2
   22bd4:	mov	r0, #0
   22bd8:	bl	11098 <dcgettext@plt>
   22bdc:	ldr	r3, [r5, #24]
   22be0:	str	r3, [sp, #20]
   22be4:	ldr	r3, [r5, #20]
   22be8:	str	r3, [sp, #16]
   22bec:	ldr	r3, [r5, #16]
   22bf0:	str	r3, [sp, #12]
   22bf4:	ldr	r3, [r5, #12]
   22bf8:	str	r3, [sp, #8]
   22bfc:	ldr	r3, [r5, #8]
   22c00:	str	r3, [sp, #4]
   22c04:	ldr	r3, [r5, #4]
   22c08:	str	r3, [sp]
   22c0c:	ldr	r3, [r5]
   22c10:	mov	r2, r0
   22c14:	mov	r1, #1
   22c18:	mov	r0, r4
   22c1c:	bl	111f4 <__fprintf_chk@plt>
   22c20:	b	22a60 <__assert_fail@plt+0x117b8>
   22c24:	mov	r2, #5
   22c28:	movw	r1, #21468	; 0x53dc
   22c2c:	movt	r1, #2
   22c30:	mov	r0, #0
   22c34:	bl	11098 <dcgettext@plt>
   22c38:	ldr	r3, [r5, #28]
   22c3c:	str	r3, [sp, #24]
   22c40:	ldr	r3, [r5, #24]
   22c44:	str	r3, [sp, #20]
   22c48:	ldr	r3, [r5, #20]
   22c4c:	str	r3, [sp, #16]
   22c50:	ldr	r3, [r5, #16]
   22c54:	str	r3, [sp, #12]
   22c58:	ldr	r3, [r5, #12]
   22c5c:	str	r3, [sp, #8]
   22c60:	ldr	r3, [r5, #8]
   22c64:	str	r3, [sp, #4]
   22c68:	ldr	r3, [r5, #4]
   22c6c:	str	r3, [sp]
   22c70:	ldr	r3, [r5]
   22c74:	mov	r2, r0
   22c78:	mov	r1, #1
   22c7c:	mov	r0, r4
   22c80:	bl	111f4 <__fprintf_chk@plt>
   22c84:	b	22a60 <__assert_fail@plt+0x117b8>
   22c88:	mov	r2, #5
   22c8c:	movw	r1, #21516	; 0x540c
   22c90:	movt	r1, #2
   22c94:	mov	r0, #0
   22c98:	bl	11098 <dcgettext@plt>
   22c9c:	ldr	r3, [r5, #32]
   22ca0:	str	r3, [sp, #28]
   22ca4:	ldr	r3, [r5, #28]
   22ca8:	str	r3, [sp, #24]
   22cac:	ldr	r3, [r5, #24]
   22cb0:	str	r3, [sp, #20]
   22cb4:	ldr	r3, [r5, #20]
   22cb8:	str	r3, [sp, #16]
   22cbc:	ldr	r3, [r5, #16]
   22cc0:	str	r3, [sp, #12]
   22cc4:	ldr	r3, [r5, #12]
   22cc8:	str	r3, [sp, #8]
   22ccc:	ldr	r3, [r5, #8]
   22cd0:	str	r3, [sp, #4]
   22cd4:	ldr	r3, [r5, #4]
   22cd8:	str	r3, [sp]
   22cdc:	ldr	r3, [r5]
   22ce0:	mov	r2, r0
   22ce4:	mov	r1, #1
   22ce8:	mov	r0, r4
   22cec:	bl	111f4 <__fprintf_chk@plt>
   22cf0:	b	22a60 <__assert_fail@plt+0x117b8>
   22cf4:	mov	r2, #5
   22cf8:	movw	r1, #21568	; 0x5440
   22cfc:	movt	r1, #2
   22d00:	mov	r0, #0
   22d04:	bl	11098 <dcgettext@plt>
   22d08:	ldr	r3, [r5, #32]
   22d0c:	str	r3, [sp, #28]
   22d10:	ldr	r3, [r5, #28]
   22d14:	str	r3, [sp, #24]
   22d18:	ldr	r3, [r5, #24]
   22d1c:	str	r3, [sp, #20]
   22d20:	ldr	r3, [r5, #20]
   22d24:	str	r3, [sp, #16]
   22d28:	ldr	r3, [r5, #16]
   22d2c:	str	r3, [sp, #12]
   22d30:	ldr	r3, [r5, #12]
   22d34:	str	r3, [sp, #8]
   22d38:	ldr	r3, [r5, #8]
   22d3c:	str	r3, [sp, #4]
   22d40:	ldr	r3, [r5, #4]
   22d44:	str	r3, [sp]
   22d48:	ldr	r3, [r5]
   22d4c:	mov	r2, r0
   22d50:	mov	r1, #1
   22d54:	mov	r0, r4
   22d58:	bl	111f4 <__fprintf_chk@plt>
   22d5c:	b	22a60 <__assert_fail@plt+0x117b8>
   22d60:	strd	r4, [sp, #-12]!
   22d64:	str	lr, [sp, #8]
   22d68:	sub	sp, sp, #12
   22d6c:	ldr	r5, [sp, #24]
   22d70:	ldr	ip, [r5]
   22d74:	cmp	ip, #0
   22d78:	beq	22db0 <__assert_fail@plt+0x11b08>
   22d7c:	mov	lr, r5
   22d80:	mov	ip, #0
   22d84:	add	ip, ip, #1
   22d88:	ldr	r4, [lr, #4]!
   22d8c:	cmp	r4, #0
   22d90:	bne	22d84 <__assert_fail@plt+0x11adc>
   22d94:	str	ip, [sp, #4]
   22d98:	str	r5, [sp]
   22d9c:	bl	22930 <__assert_fail@plt+0x11688>
   22da0:	add	sp, sp, #12
   22da4:	ldrd	r4, [sp]
   22da8:	add	sp, sp, #8
   22dac:	pop	{pc}		; (ldr pc, [sp], #4)
   22db0:	mov	ip, #0
   22db4:	b	22d94 <__assert_fail@plt+0x11aec>
   22db8:	strd	r4, [sp, #-12]!
   22dbc:	str	lr, [sp, #8]
   22dc0:	sub	sp, sp, #52	; 0x34
   22dc4:	ldr	r5, [sp, #64]	; 0x40
   22dc8:	add	r4, sp, #8
   22dcc:	mov	ip, #0
   22dd0:	ldr	lr, [r5], #4
   22dd4:	str	lr, [r4], #4
   22dd8:	cmp	lr, #0
   22ddc:	beq	22dec <__assert_fail@plt+0x11b44>
   22de0:	add	ip, ip, #1
   22de4:	cmp	ip, #10
   22de8:	bne	22dd0 <__assert_fail@plt+0x11b28>
   22dec:	str	ip, [sp, #4]
   22df0:	add	ip, sp, #8
   22df4:	str	ip, [sp]
   22df8:	bl	22930 <__assert_fail@plt+0x11688>
   22dfc:	add	sp, sp, #52	; 0x34
   22e00:	ldrd	r4, [sp]
   22e04:	add	sp, sp, #8
   22e08:	pop	{pc}		; (ldr pc, [sp], #4)
   22e0c:	push	{r3}		; (str r3, [sp, #-4]!)
   22e10:	push	{lr}		; (str lr, [sp, #-4]!)
   22e14:	sub	sp, sp, #16
   22e18:	add	r3, sp, #24
   22e1c:	str	r3, [sp, #12]
   22e20:	str	r3, [sp]
   22e24:	ldr	r3, [sp, #20]
   22e28:	bl	22db8 <__assert_fail@plt+0x11b10>
   22e2c:	add	sp, sp, #16
   22e30:	pop	{lr}		; (ldr lr, [sp], #4)
   22e34:	add	sp, sp, #4
   22e38:	bx	lr
   22e3c:	str	r4, [sp, #-8]!
   22e40:	str	lr, [sp, #4]
   22e44:	movw	r3, #25044	; 0x61d4
   22e48:	movt	r3, #3
   22e4c:	ldr	r1, [r3]
   22e50:	mov	r0, #10
   22e54:	bl	1108c <fputc_unlocked@plt>
   22e58:	mov	r2, #5
   22e5c:	movw	r1, #21628	; 0x547c
   22e60:	movt	r1, #2
   22e64:	mov	r0, #0
   22e68:	bl	11098 <dcgettext@plt>
   22e6c:	movw	r2, #21648	; 0x5490
   22e70:	movt	r2, #2
   22e74:	mov	r1, r0
   22e78:	mov	r0, #1
   22e7c:	bl	111dc <__printf_chk@plt>
   22e80:	mov	r2, #5
   22e84:	movw	r1, #21672	; 0x54a8
   22e88:	movt	r1, #2
   22e8c:	mov	r0, #0
   22e90:	bl	11098 <dcgettext@plt>
   22e94:	movw	r3, #19204	; 0x4b04
   22e98:	movt	r3, #2
   22e9c:	movw	r2, #19244	; 0x4b2c
   22ea0:	movt	r2, #2
   22ea4:	mov	r1, r0
   22ea8:	mov	r0, #1
   22eac:	bl	111dc <__printf_chk@plt>
   22eb0:	mov	r2, #5
   22eb4:	movw	r1, #21692	; 0x54bc
   22eb8:	movt	r1, #2
   22ebc:	mov	r0, #0
   22ec0:	bl	11098 <dcgettext@plt>
   22ec4:	movw	r2, #21732	; 0x54e4
   22ec8:	movt	r2, #2
   22ecc:	mov	r1, r0
   22ed0:	mov	r0, #1
   22ed4:	bl	111dc <__printf_chk@plt>
   22ed8:	ldr	r4, [sp]
   22edc:	add	sp, sp, #4
   22ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   22ee4:	str	r4, [sp, #-8]!
   22ee8:	str	lr, [sp, #4]
   22eec:	bl	23d48 <__assert_fail@plt+0x12aa0>
   22ef0:	cmp	r0, #0
   22ef4:	beq	22f04 <__assert_fail@plt+0x11c5c>
   22ef8:	ldr	r4, [sp]
   22efc:	add	sp, sp, #4
   22f00:	pop	{pc}		; (ldr pc, [sp], #4)
   22f04:	bl	23378 <__assert_fail@plt+0x120d0>
   22f08:	str	r4, [sp, #-8]!
   22f0c:	str	lr, [sp, #4]
   22f10:	bl	23d48 <__assert_fail@plt+0x12aa0>
   22f14:	cmp	r0, #0
   22f18:	beq	22f28 <__assert_fail@plt+0x11c80>
   22f1c:	ldr	r4, [sp]
   22f20:	add	sp, sp, #4
   22f24:	pop	{pc}		; (ldr pc, [sp], #4)
   22f28:	bl	23378 <__assert_fail@plt+0x120d0>
   22f2c:	str	r4, [sp, #-8]!
   22f30:	str	lr, [sp, #4]
   22f34:	bl	22ee4 <__assert_fail@plt+0x11c3c>
   22f38:	ldr	r4, [sp]
   22f3c:	add	sp, sp, #4
   22f40:	pop	{pc}		; (ldr pc, [sp], #4)
   22f44:	strd	r4, [sp, #-16]!
   22f48:	str	r6, [sp, #8]
   22f4c:	str	lr, [sp, #12]
   22f50:	mov	r5, r0
   22f54:	mov	r4, r1
   22f58:	bl	23d84 <__assert_fail@plt+0x12adc>
   22f5c:	cmp	r0, #0
   22f60:	beq	22f74 <__assert_fail@plt+0x11ccc>
   22f64:	ldrd	r4, [sp]
   22f68:	ldr	r6, [sp, #8]
   22f6c:	add	sp, sp, #12
   22f70:	pop	{pc}		; (ldr pc, [sp], #4)
   22f74:	adds	r4, r4, #0
   22f78:	movne	r4, #1
   22f7c:	cmp	r5, #0
   22f80:	moveq	r4, #1
   22f84:	cmp	r4, #0
   22f88:	beq	22f64 <__assert_fail@plt+0x11cbc>
   22f8c:	bl	23378 <__assert_fail@plt+0x120d0>
   22f90:	str	r4, [sp, #-8]!
   22f94:	str	lr, [sp, #4]
   22f98:	cmp	r1, #0
   22f9c:	orreq	r1, r1, #1
   22fa0:	bl	23d84 <__assert_fail@plt+0x12adc>
   22fa4:	cmp	r0, #0
   22fa8:	beq	22fb8 <__assert_fail@plt+0x11d10>
   22fac:	ldr	r4, [sp]
   22fb0:	add	sp, sp, #4
   22fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   22fb8:	bl	23378 <__assert_fail@plt+0x120d0>
   22fbc:	strd	r4, [sp, #-16]!
   22fc0:	str	r6, [sp, #8]
   22fc4:	str	lr, [sp, #12]
   22fc8:	mov	r4, r0
   22fcc:	mov	r6, r1
   22fd0:	mov	r5, r2
   22fd4:	bl	24054 <__assert_fail@plt+0x12dac>
   22fd8:	cmp	r0, #0
   22fdc:	beq	22ff0 <__assert_fail@plt+0x11d48>
   22fe0:	ldrd	r4, [sp]
   22fe4:	ldr	r6, [sp, #8]
   22fe8:	add	sp, sp, #12
   22fec:	pop	{pc}		; (ldr pc, [sp], #4)
   22ff0:	cmp	r4, #0
   22ff4:	beq	23004 <__assert_fail@plt+0x11d5c>
   22ff8:	cmp	r6, #0
   22ffc:	cmpne	r5, #0
   23000:	beq	22fe0 <__assert_fail@plt+0x11d38>
   23004:	bl	23378 <__assert_fail@plt+0x120d0>
   23008:	str	r4, [sp, #-8]!
   2300c:	str	lr, [sp, #4]
   23010:	bl	22fbc <__assert_fail@plt+0x11d14>
   23014:	ldr	r4, [sp]
   23018:	add	sp, sp, #4
   2301c:	pop	{pc}		; (ldr pc, [sp], #4)
   23020:	str	r4, [sp, #-8]!
   23024:	str	lr, [sp, #4]
   23028:	mov	ip, r1
   2302c:	mov	r3, r2
   23030:	cmp	r2, #0
   23034:	cmpne	r1, #0
   23038:	moveq	r3, #1
   2303c:	moveq	ip, r3
   23040:	mov	r2, r3
   23044:	mov	r1, ip
   23048:	bl	24054 <__assert_fail@plt+0x12dac>
   2304c:	cmp	r0, #0
   23050:	beq	23060 <__assert_fail@plt+0x11db8>
   23054:	ldr	r4, [sp]
   23058:	add	sp, sp, #4
   2305c:	pop	{pc}		; (ldr pc, [sp], #4)
   23060:	bl	23378 <__assert_fail@plt+0x120d0>
   23064:	str	r4, [sp, #-8]!
   23068:	str	lr, [sp, #4]
   2306c:	mov	r2, r1
   23070:	mov	r1, r0
   23074:	mov	r0, #0
   23078:	bl	22fbc <__assert_fail@plt+0x11d14>
   2307c:	ldr	r4, [sp]
   23080:	add	sp, sp, #4
   23084:	pop	{pc}		; (ldr pc, [sp], #4)
   23088:	str	r4, [sp, #-8]!
   2308c:	str	lr, [sp, #4]
   23090:	mov	r2, r1
   23094:	mov	r1, r0
   23098:	mov	r0, #0
   2309c:	bl	23020 <__assert_fail@plt+0x11d78>
   230a0:	ldr	r4, [sp]
   230a4:	add	sp, sp, #4
   230a8:	pop	{pc}		; (ldr pc, [sp], #4)
   230ac:	strd	r4, [sp, #-16]!
   230b0:	str	r6, [sp, #8]
   230b4:	str	lr, [sp, #12]
   230b8:	mov	r5, r1
   230bc:	ldr	r4, [r1]
   230c0:	cmp	r0, #0
   230c4:	beq	230f4 <__assert_fail@plt+0x11e4c>
   230c8:	lsr	r3, r4, #1
   230cc:	add	r3, r3, #1
   230d0:	adds	r4, r4, r3
   230d4:	bcs	23110 <__assert_fail@plt+0x11e68>
   230d8:	mov	r1, r4
   230dc:	bl	22fbc <__assert_fail@plt+0x11d14>
   230e0:	str	r4, [r5]
   230e4:	ldrd	r4, [sp]
   230e8:	ldr	r6, [sp, #8]
   230ec:	add	sp, sp, #12
   230f0:	pop	{pc}		; (ldr pc, [sp], #4)
   230f4:	cmp	r4, #0
   230f8:	bne	230d8 <__assert_fail@plt+0x11e30>
   230fc:	mov	r4, #64	; 0x40
   23100:	udiv	r4, r4, r2
   23104:	cmp	r2, #64	; 0x40
   23108:	addhi	r4, r4, #1
   2310c:	b	230d8 <__assert_fail@plt+0x11e30>
   23110:	bl	23378 <__assert_fail@plt+0x120d0>
   23114:	str	r4, [sp, #-8]!
   23118:	str	lr, [sp, #4]
   2311c:	mov	r2, #1
   23120:	bl	230ac <__assert_fail@plt+0x11e04>
   23124:	ldr	r4, [sp]
   23128:	add	sp, sp, #4
   2312c:	pop	{pc}		; (ldr pc, [sp], #4)
   23130:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23134:	strd	r6, [sp, #8]
   23138:	str	r8, [sp, #16]
   2313c:	str	lr, [sp, #20]
   23140:	mov	r5, r1
   23144:	ldr	lr, [sp, #24]
   23148:	ldr	ip, [r1]
   2314c:	asr	r4, ip, #1
   23150:	adds	r4, ip, r4
   23154:	movvs	r1, #1
   23158:	movvc	r1, #0
   2315c:	cmp	r1, #0
   23160:	mvnne	r4, #-2147483648	; 0x80000000
   23164:	mvn	r8, r3
   23168:	lsr	r8, r8, #31
   2316c:	cmp	r3, r4
   23170:	movge	r1, #0
   23174:	andlt	r1, r8, #1
   23178:	cmp	r1, #0
   2317c:	movne	r4, r3
   23180:	smull	r6, r7, r4, lr
   23184:	asr	r1, r6, #31
   23188:	cmp	r1, r7
   2318c:	bne	231a4 <__assert_fail@plt+0x11efc>
   23190:	mov	r1, r6
   23194:	cmp	r6, #63	; 0x3f
   23198:	movle	r1, #64	; 0x40
   2319c:	ble	231a8 <__assert_fail@plt+0x11f00>
   231a0:	b	231b4 <__assert_fail@plt+0x11f0c>
   231a4:	mvn	r1, #-2147483648	; 0x80000000
   231a8:	sdiv	r4, r1, lr
   231ac:	mls	r6, lr, r4, r1
   231b0:	sub	r1, r1, r6
   231b4:	cmp	r0, #0
   231b8:	moveq	r6, #0
   231bc:	streq	r6, [r5]
   231c0:	sub	r6, r4, ip
   231c4:	cmp	r6, r2
   231c8:	bge	23200 <__assert_fail@plt+0x11f58>
   231cc:	adds	r2, ip, r2
   231d0:	mov	r4, r2
   231d4:	bvs	2321c <__assert_fail@plt+0x11f74>
   231d8:	cmp	r2, r3
   231dc:	movle	r3, #0
   231e0:	andgt	r3, r8, #1
   231e4:	cmp	r3, #0
   231e8:	bne	2321c <__assert_fail@plt+0x11f74>
   231ec:	smull	r2, r3, r2, lr
   231f0:	asr	ip, r2, #31
   231f4:	mov	r1, r2
   231f8:	cmp	ip, r3
   231fc:	bne	2321c <__assert_fail@plt+0x11f74>
   23200:	bl	22f44 <__assert_fail@plt+0x11c9c>
   23204:	str	r4, [r5]
   23208:	ldrd	r4, [sp]
   2320c:	ldrd	r6, [sp, #8]
   23210:	ldr	r8, [sp, #16]
   23214:	add	sp, sp, #20
   23218:	pop	{pc}		; (ldr pc, [sp], #4)
   2321c:	bl	23378 <__assert_fail@plt+0x120d0>
   23220:	str	r4, [sp, #-8]!
   23224:	str	lr, [sp, #4]
   23228:	bl	23cd4 <__assert_fail@plt+0x12a2c>
   2322c:	cmp	r0, #0
   23230:	beq	23240 <__assert_fail@plt+0x11f98>
   23234:	ldr	r4, [sp]
   23238:	add	sp, sp, #4
   2323c:	pop	{pc}		; (ldr pc, [sp], #4)
   23240:	bl	23378 <__assert_fail@plt+0x120d0>
   23244:	str	r4, [sp, #-8]!
   23248:	str	lr, [sp, #4]
   2324c:	mov	r1, #1
   23250:	bl	23220 <__assert_fail@plt+0x11f78>
   23254:	ldr	r4, [sp]
   23258:	add	sp, sp, #4
   2325c:	pop	{pc}		; (ldr pc, [sp], #4)
   23260:	str	r4, [sp, #-8]!
   23264:	str	lr, [sp, #4]
   23268:	bl	23cd4 <__assert_fail@plt+0x12a2c>
   2326c:	cmp	r0, #0
   23270:	beq	23280 <__assert_fail@plt+0x11fd8>
   23274:	ldr	r4, [sp]
   23278:	add	sp, sp, #4
   2327c:	pop	{pc}		; (ldr pc, [sp], #4)
   23280:	bl	23378 <__assert_fail@plt+0x120d0>
   23284:	str	r4, [sp, #-8]!
   23288:	str	lr, [sp, #4]
   2328c:	mov	r1, #1
   23290:	bl	23260 <__assert_fail@plt+0x11fb8>
   23294:	ldr	r4, [sp]
   23298:	add	sp, sp, #4
   2329c:	pop	{pc}		; (ldr pc, [sp], #4)
   232a0:	strd	r4, [sp, #-16]!
   232a4:	str	r6, [sp, #8]
   232a8:	str	lr, [sp, #12]
   232ac:	mov	r5, r0
   232b0:	mov	r4, r1
   232b4:	mov	r0, r1
   232b8:	bl	22ee4 <__assert_fail@plt+0x11c3c>
   232bc:	mov	r2, r4
   232c0:	mov	r1, r5
   232c4:	bl	11038 <memcpy@plt>
   232c8:	ldrd	r4, [sp]
   232cc:	ldr	r6, [sp, #8]
   232d0:	add	sp, sp, #12
   232d4:	pop	{pc}		; (ldr pc, [sp], #4)
   232d8:	strd	r4, [sp, #-16]!
   232dc:	str	r6, [sp, #8]
   232e0:	str	lr, [sp, #12]
   232e4:	mov	r5, r0
   232e8:	mov	r4, r1
   232ec:	mov	r0, r1
   232f0:	bl	22f08 <__assert_fail@plt+0x11c60>
   232f4:	mov	r2, r4
   232f8:	mov	r1, r5
   232fc:	bl	11038 <memcpy@plt>
   23300:	ldrd	r4, [sp]
   23304:	ldr	r6, [sp, #8]
   23308:	add	sp, sp, #12
   2330c:	pop	{pc}		; (ldr pc, [sp], #4)
   23310:	strd	r4, [sp, #-16]!
   23314:	str	r6, [sp, #8]
   23318:	str	lr, [sp, #12]
   2331c:	mov	r5, r0
   23320:	mov	r4, r1
   23324:	add	r0, r1, #1
   23328:	bl	22f08 <__assert_fail@plt+0x11c60>
   2332c:	mov	r2, #0
   23330:	strb	r2, [r0, r4]
   23334:	mov	r2, r4
   23338:	mov	r1, r5
   2333c:	bl	11038 <memcpy@plt>
   23340:	ldrd	r4, [sp]
   23344:	ldr	r6, [sp, #8]
   23348:	add	sp, sp, #12
   2334c:	pop	{pc}		; (ldr pc, [sp], #4)
   23350:	str	r4, [sp, #-8]!
   23354:	str	lr, [sp, #4]
   23358:	mov	r4, r0
   2335c:	bl	11188 <strlen@plt>
   23360:	add	r1, r0, #1
   23364:	mov	r0, r4
   23368:	bl	232a0 <__assert_fail@plt+0x11ff8>
   2336c:	ldr	r4, [sp]
   23370:	add	sp, sp, #4
   23374:	pop	{pc}		; (ldr pc, [sp], #4)
   23378:	str	r4, [sp, #-8]!
   2337c:	str	lr, [sp, #4]
   23380:	movw	r3, #24948	; 0x6174
   23384:	movt	r3, #3
   23388:	ldr	r4, [r3]
   2338c:	mov	r2, #5
   23390:	movw	r1, #21812	; 0x5534
   23394:	movt	r1, #2
   23398:	mov	r0, #0
   2339c:	bl	11098 <dcgettext@plt>
   233a0:	mov	r3, r0
   233a4:	movw	r2, #19472	; 0x4c10
   233a8:	movt	r2, #2
   233ac:	mov	r1, #0
   233b0:	mov	r0, r4
   233b4:	bl	11110 <error@plt>
   233b8:	bl	1129c <abort@plt>
   233bc:	strd	r4, [sp, #-16]!
   233c0:	str	r6, [sp, #8]
   233c4:	str	lr, [sp, #12]
   233c8:	sub	sp, sp, #16
   233cc:	mov	r6, r0
   233d0:	mov	r4, r2
   233d4:	mov	r5, r3
   233d8:	ldr	r3, [sp, #40]	; 0x28
   233dc:	str	r3, [sp]
   233e0:	add	r3, sp, #8
   233e4:	mov	r2, r1
   233e8:	mov	r1, #0
   233ec:	bl	23698 <__assert_fail@plt+0x123f0>
   233f0:	cmp	r0, #0
   233f4:	bne	23488 <__assert_fail@plt+0x121e0>
   233f8:	ldrd	r0, [sp, #8]
   233fc:	ldrd	r2, [sp, #32]
   23400:	cmp	r2, r0
   23404:	sbcs	r3, r3, r1
   23408:	movlt	r3, #1
   2340c:	movge	r3, #0
   23410:	cmp	r0, r4
   23414:	sbcs	r2, r1, r5
   23418:	orrlt	r3, r3, #1
   2341c:	cmp	r3, #0
   23420:	bne	23438 <__assert_fail@plt+0x12190>
   23424:	add	sp, sp, #16
   23428:	ldrd	r4, [sp]
   2342c:	ldr	r6, [sp, #8]
   23430:	add	sp, sp, #12
   23434:	pop	{pc}		; (ldr pc, [sp], #4)
   23438:	cmp	r0, #1073741824	; 0x40000000
   2343c:	sbcs	r3, r1, #0
   23440:	blt	23454 <__assert_fail@plt+0x121ac>
   23444:	bl	111a0 <__errno_location@plt>
   23448:	mov	r3, #75	; 0x4b
   2344c:	str	r3, [r0]
   23450:	b	23498 <__assert_fail@plt+0x121f0>
   23454:	mov	r2, #-1073741824	; 0xc0000000
   23458:	mvn	r3, #0
   2345c:	cmp	r0, r2
   23460:	sbcs	r3, r1, r3
   23464:	bge	23478 <__assert_fail@plt+0x121d0>
   23468:	bl	111a0 <__errno_location@plt>
   2346c:	mov	r3, #75	; 0x4b
   23470:	str	r3, [r0]
   23474:	b	23498 <__assert_fail@plt+0x121f0>
   23478:	bl	111a0 <__errno_location@plt>
   2347c:	mov	r3, #34	; 0x22
   23480:	str	r3, [r0]
   23484:	b	23498 <__assert_fail@plt+0x121f0>
   23488:	cmp	r0, #1
   2348c:	beq	234dc <__assert_fail@plt+0x12234>
   23490:	cmp	r0, #3
   23494:	beq	234ec <__assert_fail@plt+0x12244>
   23498:	ldr	r3, [sp, #48]	; 0x30
   2349c:	cmp	r3, #0
   234a0:	moveq	r3, #1
   234a4:	str	r3, [sp, #48]	; 0x30
   234a8:	bl	111a0 <__errno_location@plt>
   234ac:	ldr	r4, [r0]
   234b0:	cmp	r4, #22
   234b4:	moveq	r4, #0
   234b8:	mov	r0, r6
   234bc:	bl	14efc <__assert_fail@plt+0x3c54>
   234c0:	str	r0, [sp]
   234c4:	ldr	r3, [sp, #44]	; 0x2c
   234c8:	movw	r2, #20140	; 0x4eac
   234cc:	movt	r2, #2
   234d0:	mov	r1, r4
   234d4:	ldr	r0, [sp, #48]	; 0x30
   234d8:	bl	11110 <error@plt>
   234dc:	bl	111a0 <__errno_location@plt>
   234e0:	mov	r3, #75	; 0x4b
   234e4:	str	r3, [r0]
   234e8:	b	23498 <__assert_fail@plt+0x121f0>
   234ec:	bl	111a0 <__errno_location@plt>
   234f0:	mov	r3, #0
   234f4:	str	r3, [r0]
   234f8:	b	23498 <__assert_fail@plt+0x121f0>
   234fc:	strd	r4, [sp, #-12]!
   23500:	str	lr, [sp, #8]
   23504:	sub	sp, sp, #28
   23508:	ldr	r1, [sp, #56]	; 0x38
   2350c:	str	r1, [sp, #16]
   23510:	ldr	r1, [sp, #52]	; 0x34
   23514:	str	r1, [sp, #12]
   23518:	ldr	r1, [sp, #48]	; 0x30
   2351c:	str	r1, [sp, #8]
   23520:	ldrd	r4, [sp, #40]	; 0x28
   23524:	strd	r4, [sp]
   23528:	mov	r1, #10
   2352c:	bl	233bc <__assert_fail@plt+0x12114>
   23530:	add	sp, sp, #28
   23534:	ldrd	r4, [sp]
   23538:	add	sp, sp, #8
   2353c:	pop	{pc}		; (ldr pc, [sp], #4)
   23540:	strd	r4, [sp, #-36]!	; 0xffffffdc
   23544:	strd	r6, [sp, #8]
   23548:	strd	r8, [sp, #16]
   2354c:	strd	sl, [sp, #24]
   23550:	str	lr, [sp, #32]
   23554:	sub	sp, sp, #20
   23558:	cmp	r2, #0
   2355c:	beq	23674 <__assert_fail@plt+0x123cc>
   23560:	sub	ip, r2, #1
   23564:	mov	lr, #0
   23568:	mov	r2, r1
   2356c:	asr	r3, r1, #31
   23570:	strd	r2, [sp, #8]
   23574:	mov	r8, lr
   23578:	b	2361c <__assert_fail@plt+0x12374>
   2357c:	umull	r4, r5, r2, r1
   23580:	umull	r6, r7, r1, r3
   23584:	strd	r6, [sp]
   23588:	cmp	r3, #0
   2358c:	bge	235a8 <__assert_fail@plt+0x12300>
   23590:	mov	sl, #0
   23594:	subs	r6, r6, sl
   23598:	str	r6, [sp]
   2359c:	ldr	r6, [sp, #4]
   235a0:	sbc	r6, r6, r1
   235a4:	str	r6, [sp, #4]
   235a8:	cmp	r1, #0
   235ac:	bge	235c8 <__assert_fail@plt+0x12320>
   235b0:	ldr	r6, [sp]
   235b4:	subs	r6, r6, r2
   235b8:	str	r6, [sp]
   235bc:	ldr	r6, [sp, #4]
   235c0:	sbc	r6, r6, r3
   235c4:	str	r6, [sp, #4]
   235c8:	mov	sl, #0
   235cc:	ldr	r6, [sp]
   235d0:	adds	r6, r6, r5
   235d4:	ldr	r7, [sp, #4]
   235d8:	adc	sl, r7, sl
   235dc:	cmp	sl, r6, asr #31
   235e0:	bne	235ec <__assert_fail@plt+0x12344>
   235e4:	mov	r5, r6
   235e8:	b	23638 <__assert_fail@plt+0x12390>
   235ec:	ldr	r4, [sp, #12]
   235f0:	mul	r5, r2, r4
   235f4:	mla	r6, r1, r3, r5
   235f8:	umull	sl, fp, r2, r1
   235fc:	add	r5, r6, fp
   23600:	mov	r4, sl
   23604:	mov	r9, #1
   23608:	b	23638 <__assert_fail@plt+0x12390>
   2360c:	orr	lr, lr, r3
   23610:	sub	ip, ip, #1
   23614:	cmn	ip, #1
   23618:	beq	23678 <__assert_fail@plt+0x123d0>
   2361c:	ldrd	r2, [r0]
   23620:	mov	r9, r8
   23624:	cmp	r3, r2, asr #31
   23628:	bne	2357c <__assert_fail@plt+0x122d4>
   2362c:	smull	r6, r7, r2, r1
   23630:	mov	r4, r6
   23634:	mov	r5, r7
   23638:	cmp	r9, #0
   2363c:	streq	r4, [r0]
   23640:	streq	r5, [r0, #4]
   23644:	moveq	r3, r8
   23648:	beq	2360c <__assert_fail@plt+0x12364>
   2364c:	cmp	r2, #0
   23650:	sbcs	r3, r3, #0
   23654:	mvnge	r2, #0
   23658:	mvnge	r3, #-2147483648	; 0x80000000
   2365c:	movlt	r2, #0
   23660:	movlt	r3, #-2147483648	; 0x80000000
   23664:	str	r2, [r0]
   23668:	str	r3, [r0, #4]
   2366c:	mov	r3, #1
   23670:	b	2360c <__assert_fail@plt+0x12364>
   23674:	mov	lr, #0
   23678:	mov	r0, lr
   2367c:	add	sp, sp, #20
   23680:	ldrd	r4, [sp]
   23684:	ldrd	r6, [sp, #8]
   23688:	ldrd	r8, [sp, #16]
   2368c:	ldrd	sl, [sp, #24]
   23690:	add	sp, sp, #32
   23694:	pop	{pc}		; (ldr pc, [sp], #4)
   23698:	strd	r4, [sp, #-36]!	; 0xffffffdc
   2369c:	strd	r6, [sp, #8]
   236a0:	strd	r8, [sp, #16]
   236a4:	strd	sl, [sp, #24]
   236a8:	str	lr, [sp, #32]
   236ac:	sub	sp, sp, #20
   236b0:	cmp	r2, #36	; 0x24
   236b4:	bhi	23720 <__assert_fail@plt+0x12478>
   236b8:	mov	r5, r0
   236bc:	mov	r4, r1
   236c0:	mov	r6, r2
   236c4:	mov	r8, r3
   236c8:	cmp	r1, #0
   236cc:	addeq	r4, sp, #12
   236d0:	bl	111a0 <__errno_location@plt>
   236d4:	mov	r7, r0
   236d8:	mov	r3, #0
   236dc:	str	r3, [r0]
   236e0:	mov	r2, r6
   236e4:	mov	r1, r4
   236e8:	mov	r0, r5
   236ec:	bl	11260 <__strtoll_internal@plt>
   236f0:	strd	r0, [sp]
   236f4:	ldr	r6, [r4]
   236f8:	cmp	r6, r5
   236fc:	beq	23740 <__assert_fail@plt+0x12498>
   23700:	ldr	r3, [r7]
   23704:	cmp	r3, #0
   23708:	beq	23864 <__assert_fail@plt+0x125bc>
   2370c:	cmp	r3, #34	; 0x22
   23710:	moveq	r5, #1
   23714:	beq	23868 <__assert_fail@plt+0x125c0>
   23718:	mov	r5, #4
   2371c:	b	2388c <__assert_fail@plt+0x125e4>
   23720:	movw	r3, #21832	; 0x5548
   23724:	movt	r3, #2
   23728:	mov	r2, #85	; 0x55
   2372c:	movw	r1, #21844	; 0x5554
   23730:	movt	r1, #2
   23734:	movw	r0, #21860	; 0x5564
   23738:	movt	r0, #2
   2373c:	bl	112a8 <__assert_fail@plt>
   23740:	ldr	r3, [sp, #56]	; 0x38
   23744:	cmp	r3, #0
   23748:	beq	23cc4 <__assert_fail@plt+0x12a1c>
   2374c:	ldrb	r1, [r5]
   23750:	cmp	r1, #0
   23754:	moveq	r5, #4
   23758:	beq	2388c <__assert_fail@plt+0x125e4>
   2375c:	mov	r0, r3
   23760:	bl	11194 <strchr@plt>
   23764:	cmp	r0, #0
   23768:	beq	23ccc <__assert_fail@plt+0x12a24>
   2376c:	mov	r2, #1
   23770:	mov	r3, #0
   23774:	strd	r2, [sp]
   23778:	ldrb	r7, [r6]
   2377c:	mov	r5, #0
   23780:	mov	r1, r7
   23784:	ldr	r0, [sp, #56]	; 0x38
   23788:	bl	11194 <strchr@plt>
   2378c:	cmp	r0, #0
   23790:	beq	238ac <__assert_fail@plt+0x12604>
   23794:	sub	r3, r7, #69	; 0x45
   23798:	cmp	r3, #47	; 0x2f
   2379c:	ldrls	pc, [pc, r3, lsl #2]
   237a0:	b	239f8 <__assert_fail@plt+0x12750>
   237a4:			; <UNDEFINED> instruction: 0x000238bc
   237a8:	strdeq	r3, [r2], -r8
   237ac:			; <UNDEFINED> instruction: 0x000238bc
   237b0:	strdeq	r3, [r2], -r8
   237b4:	strdeq	r3, [r2], -r8
   237b8:	strdeq	r3, [r2], -r8
   237bc:			; <UNDEFINED> instruction: 0x000238bc
   237c0:	strdeq	r3, [r2], -r8
   237c4:			; <UNDEFINED> instruction: 0x000238bc
   237c8:	strdeq	r3, [r2], -r8
   237cc:	strdeq	r3, [r2], -r8
   237d0:			; <UNDEFINED> instruction: 0x000238bc
   237d4:	strdeq	r3, [r2], -r8
   237d8:	strdeq	r3, [r2], -r8
   237dc:	strdeq	r3, [r2], -r8
   237e0:			; <UNDEFINED> instruction: 0x000238bc
   237e4:	strdeq	r3, [r2], -r8
   237e8:	strdeq	r3, [r2], -r8
   237ec:	strdeq	r3, [r2], -r8
   237f0:	strdeq	r3, [r2], -r8
   237f4:			; <UNDEFINED> instruction: 0x000238bc
   237f8:			; <UNDEFINED> instruction: 0x000238bc
   237fc:	strdeq	r3, [r2], -r8
   23800:	strdeq	r3, [r2], -r8
   23804:	strdeq	r3, [r2], -r8
   23808:	strdeq	r3, [r2], -r8
   2380c:	strdeq	r3, [r2], -r8
   23810:	strdeq	r3, [r2], -r8
   23814:	strdeq	r3, [r2], -r8
   23818:	strdeq	r3, [r2], -r8
   2381c:	strdeq	r3, [r2], -r8
   23820:	strdeq	r3, [r2], -r8
   23824:	strdeq	r3, [r2], -r8
   23828:	strdeq	r3, [r2], -r8
   2382c:			; <UNDEFINED> instruction: 0x000238bc
   23830:	strdeq	r3, [r2], -r8
   23834:	strdeq	r3, [r2], -r8
   23838:	strdeq	r3, [r2], -r8
   2383c:			; <UNDEFINED> instruction: 0x000238bc
   23840:	strdeq	r3, [r2], -r8
   23844:			; <UNDEFINED> instruction: 0x000238bc
   23848:	strdeq	r3, [r2], -r8
   2384c:	strdeq	r3, [r2], -r8
   23850:	strdeq	r3, [r2], -r8
   23854:	strdeq	r3, [r2], -r8
   23858:	strdeq	r3, [r2], -r8
   2385c:	strdeq	r3, [r2], -r8
   23860:			; <UNDEFINED> instruction: 0x000238bc
   23864:	mov	r5, #0
   23868:	ldr	r3, [sp, #56]	; 0x38
   2386c:	cmp	r3, #0
   23870:	strdeq	r0, [r8]
   23874:	beq	2388c <__assert_fail@plt+0x125e4>
   23878:	ldrb	r7, [r6]
   2387c:	cmp	r7, #0
   23880:	bne	23780 <__assert_fail@plt+0x124d8>
   23884:	ldrd	r2, [sp]
   23888:	strd	r2, [r8]
   2388c:	mov	r0, r5
   23890:	add	sp, sp, #20
   23894:	ldrd	r4, [sp]
   23898:	ldrd	r6, [sp, #8]
   2389c:	ldrd	r8, [sp, #16]
   238a0:	ldrd	sl, [sp, #24]
   238a4:	add	sp, sp, #32
   238a8:	pop	{pc}		; (ldr pc, [sp], #4)
   238ac:	ldrd	r2, [sp]
   238b0:	strd	r2, [r8]
   238b4:	orr	r5, r5, #2
   238b8:	b	2388c <__assert_fail@plt+0x125e4>
   238bc:	mov	r1, #48	; 0x30
   238c0:	ldr	r0, [sp, #56]	; 0x38
   238c4:	bl	11194 <strchr@plt>
   238c8:	cmp	r0, #0
   238cc:	beq	23a04 <__assert_fail@plt+0x1275c>
   238d0:	ldrb	r3, [r6, #1]
   238d4:	cmp	r3, #68	; 0x44
   238d8:	beq	23a10 <__assert_fail@plt+0x12768>
   238dc:	cmp	r3, #105	; 0x69
   238e0:	beq	239e0 <__assert_fail@plt+0x12738>
   238e4:	cmp	r3, #66	; 0x42
   238e8:	moveq	r6, #2
   238ec:	movne	r6, #1
   238f0:	moveq	r1, #1000	; 0x3e8
   238f4:	movne	r1, #1024	; 0x400
   238f8:	sub	r7, r7, #66	; 0x42
   238fc:	cmp	r7, #53	; 0x35
   23900:	ldrls	pc, [pc, r7, lsl #2]
   23904:	b	23c90 <__assert_fail@plt+0x129e8>
   23908:	andeq	r3, r2, r0, asr #21
   2390c:	muleq	r2, r0, ip
   23910:	muleq	r2, r0, ip
   23914:	andeq	r3, r2, r4, ror #22
   23918:	muleq	r2, r0, ip
   2391c:	andeq	r3, r2, r4, ror fp
   23920:	muleq	r2, r0, ip
   23924:	muleq	r2, r0, ip
   23928:	muleq	r2, r0, ip
   2392c:	andeq	r3, r2, r4, lsl #23
   23930:	muleq	r2, r0, ip
   23934:	muleq	r2, r4, fp
   23938:	muleq	r2, r0, ip
   2393c:	muleq	r2, r0, ip
   23940:	andeq	r3, r2, r4, lsr #23
   23944:	muleq	r2, r0, ip
   23948:	muleq	r2, r0, ip
   2394c:	muleq	r2, r0, ip
   23950:			; <UNDEFINED> instruction: 0x00023bb4
   23954:	muleq	r2, r0, ip
   23958:	muleq	r2, r0, ip
   2395c:	muleq	r2, r0, ip
   23960:	muleq	r2, r0, ip
   23964:	andeq	r3, r2, r0, ror ip
   23968:	andeq	r3, r2, r0, lsl #25
   2396c:	muleq	r2, r0, ip
   23970:	muleq	r2, r0, ip
   23974:	muleq	r2, r0, ip
   23978:	muleq	r2, r0, ip
   2397c:	muleq	r2, r0, ip
   23980:	muleq	r2, r0, ip
   23984:	muleq	r2, r0, ip
   23988:	andeq	r3, r2, ip, lsl sl
   2398c:	andeq	r3, r2, r0, lsr #25
   23990:	muleq	r2, r0, ip
   23994:	muleq	r2, r0, ip
   23998:	muleq	r2, r0, ip
   2399c:	andeq	r3, r2, r4, ror fp
   239a0:	muleq	r2, r0, ip
   239a4:	muleq	r2, r0, ip
   239a8:	muleq	r2, r0, ip
   239ac:	andeq	r3, r2, r4, lsl #23
   239b0:	muleq	r2, r0, ip
   239b4:	muleq	r2, r4, fp
   239b8:	muleq	r2, r0, ip
   239bc:	muleq	r2, r0, ip
   239c0:	muleq	r2, r0, ip
   239c4:	muleq	r2, r0, ip
   239c8:	muleq	r2, r0, ip
   239cc:	muleq	r2, r0, ip
   239d0:			; <UNDEFINED> instruction: 0x00023bb4
   239d4:	muleq	r2, r0, ip
   239d8:	muleq	r2, r0, ip
   239dc:	andeq	r3, r2, r4, asr #23
   239e0:	ldrb	r3, [r6, #2]
   239e4:	cmp	r3, #66	; 0x42
   239e8:	movne	r6, #1
   239ec:	moveq	r6, #3
   239f0:	mov	r1, #1024	; 0x400
   239f4:	b	238f8 <__assert_fail@plt+0x12650>
   239f8:	mov	r6, #1
   239fc:	mov	r1, #1024	; 0x400
   23a00:	b	238f8 <__assert_fail@plt+0x12650>
   23a04:	mov	r6, #1
   23a08:	mov	r1, #1024	; 0x400
   23a0c:	b	238f8 <__assert_fail@plt+0x12650>
   23a10:	mov	r6, #2
   23a14:	mov	r1, #1000	; 0x3e8
   23a18:	b	238f8 <__assert_fail@plt+0x12650>
   23a1c:	ldrd	r2, [sp]
   23a20:	mov	ip, #0
   23a24:	cmp	r3, r2, asr #31
   23a28:	bne	23a70 <__assert_fail@plt+0x127c8>
   23a2c:	lsl	r1, r3, #9
   23a30:	lsl	r0, r2, #9
   23a34:	orr	r1, r1, r2, lsr #23
   23a38:	cmp	ip, #0
   23a3c:	streq	r0, [sp]
   23a40:	streq	r1, [sp, #4]
   23a44:	moveq	r0, #0
   23a48:	beq	23ca4 <__assert_fail@plt+0x129fc>
   23a4c:	cmp	r2, #0
   23a50:	sbcs	r3, r3, #0
   23a54:	mvnge	r2, #0
   23a58:	mvnge	r3, #-2147483648	; 0x80000000
   23a5c:	movlt	r2, #0
   23a60:	movlt	r3, #-2147483648	; 0x80000000
   23a64:	strd	r2, [sp]
   23a68:	mov	r0, #1
   23a6c:	b	23ca4 <__assert_fail@plt+0x129fc>
   23a70:	mov	lr, #512	; 0x200
   23a74:	lsr	r7, r2, #23
   23a78:	lsl	r0, r2, #9
   23a7c:	umull	sl, fp, lr, r3
   23a80:	cmp	r3, #0
   23a84:	bge	23a94 <__assert_fail@plt+0x127ec>
   23a88:	mov	r1, #0
   23a8c:	subs	sl, sl, r1
   23a90:	sbc	fp, fp, lr
   23a94:	mov	r1, #0
   23a98:	mov	lr, r1
   23a9c:	adds	r1, sl, r7
   23aa0:	adc	lr, fp, lr
   23aa4:	cmp	lr, r1, asr #31
   23aa8:	beq	23a38 <__assert_fail@plt+0x12790>
   23aac:	lsl	r1, r3, #9
   23ab0:	lsl	r0, r2, #9
   23ab4:	orr	r1, r1, r2, lsr #23
   23ab8:	mov	ip, #1
   23abc:	b	23a38 <__assert_fail@plt+0x12790>
   23ac0:	ldrd	r2, [sp]
   23ac4:	mov	ip, #0
   23ac8:	cmp	r3, r2, asr #31
   23acc:	bne	23b14 <__assert_fail@plt+0x1286c>
   23ad0:	lsl	r1, r3, #10
   23ad4:	lsl	r0, r2, #10
   23ad8:	orr	r1, r1, r2, lsr #22
   23adc:	cmp	ip, #0
   23ae0:	streq	r0, [sp]
   23ae4:	streq	r1, [sp, #4]
   23ae8:	moveq	r0, #0
   23aec:	beq	23ca4 <__assert_fail@plt+0x129fc>
   23af0:	cmp	r2, #0
   23af4:	sbcs	r3, r3, #0
   23af8:	mvnge	r2, #0
   23afc:	mvnge	r3, #-2147483648	; 0x80000000
   23b00:	movlt	r2, #0
   23b04:	movlt	r3, #-2147483648	; 0x80000000
   23b08:	strd	r2, [sp]
   23b0c:	mov	r0, #1
   23b10:	b	23ca4 <__assert_fail@plt+0x129fc>
   23b14:	mov	lr, #1024	; 0x400
   23b18:	lsr	r7, r2, #22
   23b1c:	lsl	r0, r2, #10
   23b20:	umull	sl, fp, lr, r3
   23b24:	cmp	r3, #0
   23b28:	bge	23b38 <__assert_fail@plt+0x12890>
   23b2c:	mov	r1, #0
   23b30:	subs	sl, sl, r1
   23b34:	sbc	fp, fp, lr
   23b38:	mov	r1, #0
   23b3c:	mov	lr, r1
   23b40:	adds	r1, sl, r7
   23b44:	adc	lr, fp, lr
   23b48:	cmp	lr, r1, asr #31
   23b4c:	beq	23adc <__assert_fail@plt+0x12834>
   23b50:	lsl	r1, r3, #10
   23b54:	lsl	r0, r2, #10
   23b58:	orr	r1, r1, r2, lsr #22
   23b5c:	mov	ip, #1
   23b60:	b	23adc <__assert_fail@plt+0x12834>
   23b64:	mov	r2, #6
   23b68:	mov	r0, sp
   23b6c:	bl	23540 <__assert_fail@plt+0x12298>
   23b70:	b	23ca4 <__assert_fail@plt+0x129fc>
   23b74:	mov	r2, #3
   23b78:	mov	r0, sp
   23b7c:	bl	23540 <__assert_fail@plt+0x12298>
   23b80:	b	23ca4 <__assert_fail@plt+0x129fc>
   23b84:	mov	r2, #1
   23b88:	mov	r0, sp
   23b8c:	bl	23540 <__assert_fail@plt+0x12298>
   23b90:	b	23ca4 <__assert_fail@plt+0x129fc>
   23b94:	mov	r2, #2
   23b98:	mov	r0, sp
   23b9c:	bl	23540 <__assert_fail@plt+0x12298>
   23ba0:	b	23ca4 <__assert_fail@plt+0x129fc>
   23ba4:	mov	r2, #5
   23ba8:	mov	r0, sp
   23bac:	bl	23540 <__assert_fail@plt+0x12298>
   23bb0:	b	23ca4 <__assert_fail@plt+0x129fc>
   23bb4:	mov	r2, #4
   23bb8:	mov	r0, sp
   23bbc:	bl	23540 <__assert_fail@plt+0x12298>
   23bc0:	b	23ca4 <__assert_fail@plt+0x129fc>
   23bc4:	ldrd	r2, [sp]
   23bc8:	mov	lr, #0
   23bcc:	cmp	r3, r2, asr #31
   23bd0:	bne	23c14 <__assert_fail@plt+0x1296c>
   23bd4:	adds	r0, r2, r2
   23bd8:	adc	r1, r3, r3
   23bdc:	cmp	lr, #0
   23be0:	streq	r0, [sp]
   23be4:	streq	r1, [sp, #4]
   23be8:	moveq	r0, #0
   23bec:	beq	23ca4 <__assert_fail@plt+0x129fc>
   23bf0:	cmp	r2, #0
   23bf4:	sbcs	r3, r3, #0
   23bf8:	mvnge	r2, #0
   23bfc:	mvnge	r3, #-2147483648	; 0x80000000
   23c00:	movlt	r2, #0
   23c04:	movlt	r3, #-2147483648	; 0x80000000
   23c08:	strd	r2, [sp]
   23c0c:	mov	r0, #1
   23c10:	b	23ca4 <__assert_fail@plt+0x129fc>
   23c14:	mov	ip, #2
   23c18:	mov	r1, #0
   23c1c:	adds	r7, r2, r2
   23c20:	adc	sl, r1, r1
   23c24:	umull	r0, r1, ip, r3
   23c28:	cmp	r3, #0
   23c2c:	bge	23c3c <__assert_fail@plt+0x12994>
   23c30:	mov	r9, #0
   23c34:	subs	r0, r0, r9
   23c38:	sbc	r1, r1, ip
   23c3c:	mov	ip, #0
   23c40:	mov	r9, ip
   23c44:	adds	ip, r0, sl
   23c48:	adc	r9, r1, r9
   23c4c:	cmp	r9, ip, asr #31
   23c50:	bne	23c60 <__assert_fail@plt+0x129b8>
   23c54:	mov	r0, r7
   23c58:	mov	r1, ip
   23c5c:	b	23bdc <__assert_fail@plt+0x12934>
   23c60:	adds	r0, r2, r2
   23c64:	adc	r1, r3, r3
   23c68:	mov	lr, #1
   23c6c:	b	23bdc <__assert_fail@plt+0x12934>
   23c70:	mov	r2, #8
   23c74:	mov	r0, sp
   23c78:	bl	23540 <__assert_fail@plt+0x12298>
   23c7c:	b	23ca4 <__assert_fail@plt+0x129fc>
   23c80:	mov	r2, #7
   23c84:	mov	r0, sp
   23c88:	bl	23540 <__assert_fail@plt+0x12298>
   23c8c:	b	23ca4 <__assert_fail@plt+0x129fc>
   23c90:	ldrd	r2, [sp]
   23c94:	strd	r2, [r8]
   23c98:	orr	r5, r5, #2
   23c9c:	b	2388c <__assert_fail@plt+0x125e4>
   23ca0:	mov	r0, #0
   23ca4:	orr	r5, r5, r0
   23ca8:	ldr	r3, [r4]
   23cac:	add	r2, r3, r6
   23cb0:	str	r2, [r4]
   23cb4:	ldrb	r3, [r3, r6]
   23cb8:	cmp	r3, #0
   23cbc:	orrne	r5, r5, #2
   23cc0:	b	23884 <__assert_fail@plt+0x125dc>
   23cc4:	mov	r5, #4
   23cc8:	b	2388c <__assert_fail@plt+0x125e4>
   23ccc:	mov	r5, #4
   23cd0:	b	2388c <__assert_fail@plt+0x125e4>
   23cd4:	strd	r4, [sp, #-16]!
   23cd8:	str	r6, [sp, #8]
   23cdc:	str	lr, [sp, #12]
   23ce0:	cmp	r1, #0
   23ce4:	cmpne	r0, #0
   23ce8:	beq	23d24 <__assert_fail@plt+0x12a7c>
   23cec:	mov	r2, r0
   23cf0:	mov	r3, r1
   23cf4:	umull	r4, r5, r0, r1
   23cf8:	adds	r1, r5, #0
   23cfc:	movne	r1, #1
   23d00:	cmp	r4, #0
   23d04:	movlt	r1, #1
   23d08:	cmp	r1, #0
   23d0c:	beq	23d2c <__assert_fail@plt+0x12a84>
   23d10:	bl	111a0 <__errno_location@plt>
   23d14:	mov	r3, #12
   23d18:	str	r3, [r0]
   23d1c:	mov	r0, #0
   23d20:	b	23d38 <__assert_fail@plt+0x12a90>
   23d24:	mov	r3, #1
   23d28:	mov	r2, r3
   23d2c:	mov	r1, r3
   23d30:	mov	r0, r2
   23d34:	bl	10f9c <calloc@plt>
   23d38:	ldrd	r4, [sp]
   23d3c:	ldr	r6, [sp, #8]
   23d40:	add	sp, sp, #12
   23d44:	pop	{pc}		; (ldr pc, [sp], #4)
   23d48:	str	r4, [sp, #-8]!
   23d4c:	str	lr, [sp, #4]
   23d50:	cmp	r0, #0
   23d54:	beq	23d70 <__assert_fail@plt+0x12ac8>
   23d58:	bge	23d74 <__assert_fail@plt+0x12acc>
   23d5c:	bl	111a0 <__errno_location@plt>
   23d60:	mov	r3, #12
   23d64:	str	r3, [r0]
   23d68:	mov	r0, #0
   23d6c:	b	23d78 <__assert_fail@plt+0x12ad0>
   23d70:	mov	r0, #1
   23d74:	bl	1111c <malloc@plt>
   23d78:	ldr	r4, [sp]
   23d7c:	add	sp, sp, #4
   23d80:	pop	{pc}		; (ldr pc, [sp], #4)
   23d84:	str	r4, [sp, #-8]!
   23d88:	str	lr, [sp, #4]
   23d8c:	cmp	r0, #0
   23d90:	beq	23db4 <__assert_fail@plt+0x12b0c>
   23d94:	cmp	r1, #0
   23d98:	beq	23dc0 <__assert_fail@plt+0x12b18>
   23d9c:	cmp	r1, #0
   23da0:	blt	23dcc <__assert_fail@plt+0x12b24>
   23da4:	bl	110a4 <realloc@plt>
   23da8:	ldr	r4, [sp]
   23dac:	add	sp, sp, #4
   23db0:	pop	{pc}		; (ldr pc, [sp], #4)
   23db4:	mov	r0, r1
   23db8:	bl	23d48 <__assert_fail@plt+0x12aa0>
   23dbc:	b	23da8 <__assert_fail@plt+0x12b00>
   23dc0:	bl	23f40 <__assert_fail@plt+0x12c98>
   23dc4:	mov	r0, #0
   23dc8:	b	23da8 <__assert_fail@plt+0x12b00>
   23dcc:	bl	111a0 <__errno_location@plt>
   23dd0:	mov	r3, #12
   23dd4:	str	r3, [r0]
   23dd8:	mov	r0, #0
   23ddc:	b	23da8 <__assert_fail@plt+0x12b00>
   23de0:	strd	r4, [sp, #-16]!
   23de4:	str	r6, [sp, #8]
   23de8:	str	lr, [sp, #12]
   23dec:	mov	r5, r0
   23df0:	bl	110f8 <__fpending@plt>
   23df4:	mov	r6, r0
   23df8:	ldr	r4, [r5]
   23dfc:	and	r4, r4, #32
   23e00:	mov	r0, r5
   23e04:	bl	12898 <__assert_fail@plt+0x15f0>
   23e08:	cmp	r4, #0
   23e0c:	bne	23e40 <__assert_fail@plt+0x12b98>
   23e10:	cmp	r0, #0
   23e14:	beq	23e30 <__assert_fail@plt+0x12b88>
   23e18:	cmp	r6, #0
   23e1c:	bne	23e5c <__assert_fail@plt+0x12bb4>
   23e20:	bl	111a0 <__errno_location@plt>
   23e24:	ldr	r0, [r0]
   23e28:	subs	r0, r0, #9
   23e2c:	mvnne	r0, #0
   23e30:	ldrd	r4, [sp]
   23e34:	ldr	r6, [sp, #8]
   23e38:	add	sp, sp, #12
   23e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   23e40:	cmp	r0, #0
   23e44:	bne	23e64 <__assert_fail@plt+0x12bbc>
   23e48:	bl	111a0 <__errno_location@plt>
   23e4c:	mov	r3, #0
   23e50:	str	r3, [r0]
   23e54:	mvn	r0, #0
   23e58:	b	23e30 <__assert_fail@plt+0x12b88>
   23e5c:	mvn	r0, #0
   23e60:	b	23e30 <__assert_fail@plt+0x12b88>
   23e64:	mvn	r0, #0
   23e68:	b	23e30 <__assert_fail@plt+0x12b88>
   23e6c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   23e70:	strd	r6, [sp, #8]
   23e74:	strd	r8, [sp, #16]
   23e78:	str	sl, [sp, #24]
   23e7c:	str	lr, [sp, #28]
   23e80:	ldr	ip, [r0, #4]
   23e84:	cmp	ip, r1
   23e88:	strcs	r1, [r0]
   23e8c:	movcs	r4, #1
   23e90:	bcs	23ee0 <__assert_fail@plt+0x12c38>
   23e94:	mov	r7, r3
   23e98:	mov	r6, r1
   23e9c:	mov	r5, r0
   23ea0:	umull	r8, r9, r1, r3
   23ea4:	adds	r4, r9, #0
   23ea8:	movne	r4, #1
   23eac:	cmp	r4, #0
   23eb0:	bne	23efc <__assert_fail@plt+0x12c54>
   23eb4:	ldr	r0, [r0, #8]
   23eb8:	cmp	r0, r2
   23ebc:	beq	23f10 <__assert_fail@plt+0x12c68>
   23ec0:	mov	r1, r8
   23ec4:	bl	23d84 <__assert_fail@plt+0x12adc>
   23ec8:	subs	r8, r0, #0
   23ecc:	beq	23ee0 <__assert_fail@plt+0x12c38>
   23ed0:	str	r8, [r5, #8]
   23ed4:	str	r6, [r5, #4]
   23ed8:	str	r6, [r5]
   23edc:	mov	r4, #1
   23ee0:	mov	r0, r4
   23ee4:	ldrd	r4, [sp]
   23ee8:	ldrd	r6, [sp, #8]
   23eec:	ldrd	r8, [sp, #16]
   23ef0:	ldr	sl, [sp, #24]
   23ef4:	add	sp, sp, #28
   23ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   23efc:	bl	111a0 <__errno_location@plt>
   23f00:	mov	r3, #12
   23f04:	str	r3, [r0]
   23f08:	mov	r4, #0
   23f0c:	b	23ee0 <__assert_fail@plt+0x12c38>
   23f10:	mov	r0, r8
   23f14:	bl	23d48 <__assert_fail@plt+0x12aa0>
   23f18:	subs	r8, r0, #0
   23f1c:	beq	23ee0 <__assert_fail@plt+0x12c38>
   23f20:	ldr	r1, [r5, #8]
   23f24:	cmp	r1, #0
   23f28:	beq	23ed0 <__assert_fail@plt+0x12c28>
   23f2c:	ldr	r2, [r5]
   23f30:	mul	r2, r2, r7
   23f34:	mov	r0, r8
   23f38:	bl	11038 <memcpy@plt>
   23f3c:	b	23ed0 <__assert_fail@plt+0x12c28>
   23f40:	strd	r4, [sp, #-12]!
   23f44:	str	lr, [sp, #8]
   23f48:	sub	sp, sp, #12
   23f4c:	mov	r5, r0
   23f50:	bl	111a0 <__errno_location@plt>
   23f54:	mov	r4, r0
   23f58:	ldr	r3, [r0]
   23f5c:	str	r3, [sp]
   23f60:	str	r3, [sp, #4]
   23f64:	mov	r3, #0
   23f68:	str	r3, [r0]
   23f6c:	mov	r0, r5
   23f70:	bl	11014 <free@plt>
   23f74:	ldr	r3, [r4]
   23f78:	clz	r3, r3
   23f7c:	lsr	r3, r3, #5
   23f80:	add	r2, sp, #8
   23f84:	add	r3, r2, r3, lsl #2
   23f88:	ldr	r3, [r3, #-8]
   23f8c:	str	r3, [r4]
   23f90:	add	sp, sp, #12
   23f94:	ldrd	r4, [sp]
   23f98:	add	sp, sp, #8
   23f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   23fa0:	str	r4, [sp, #-8]!
   23fa4:	str	lr, [sp, #4]
   23fa8:	mov	r0, #14
   23fac:	bl	11248 <nl_langinfo@plt>
   23fb0:	cmp	r0, #0
   23fb4:	beq	23fd8 <__assert_fail@plt+0x12d30>
   23fb8:	ldrb	r2, [r0]
   23fbc:	movw	r3, #21900	; 0x558c
   23fc0:	movt	r3, #2
   23fc4:	cmp	r2, #0
   23fc8:	moveq	r0, r3
   23fcc:	ldr	r4, [sp]
   23fd0:	add	sp, sp, #4
   23fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   23fd8:	movw	r0, #21900	; 0x558c
   23fdc:	movt	r0, #2
   23fe0:	b	23fcc <__assert_fail@plt+0x12d24>
   23fe4:	strd	r4, [sp, #-20]!	; 0xffffffec
   23fe8:	strd	r6, [sp, #8]
   23fec:	str	lr, [sp, #16]
   23ff0:	sub	sp, sp, #12
   23ff4:	mov	r7, r1
   23ff8:	mov	r5, r2
   23ffc:	subs	r6, r0, #0
   24000:	addeq	r6, sp, #4
   24004:	mov	r0, r6
   24008:	bl	11104 <mbrtowc@plt>
   2400c:	mov	r4, r0
   24010:	cmp	r5, #0
   24014:	cmnne	r0, #3
   24018:	bhi	24034 <__assert_fail@plt+0x12d8c>
   2401c:	mov	r0, r4
   24020:	add	sp, sp, #12
   24024:	ldrd	r4, [sp]
   24028:	ldrd	r6, [sp, #8]
   2402c:	add	sp, sp, #16
   24030:	pop	{pc}		; (ldr pc, [sp], #4)
   24034:	mov	r0, #0
   24038:	bl	24090 <__assert_fail@plt+0x12de8>
   2403c:	cmp	r0, #0
   24040:	bne	2401c <__assert_fail@plt+0x12d74>
   24044:	ldrb	r3, [r7]
   24048:	str	r3, [r6]
   2404c:	mov	r4, #1
   24050:	b	2401c <__assert_fail@plt+0x12d74>
   24054:	str	r4, [sp, #-8]!
   24058:	str	lr, [sp, #4]
   2405c:	umull	r2, r3, r1, r2
   24060:	cmp	r3, #0
   24064:	bne	2407c <__assert_fail@plt+0x12dd4>
   24068:	mov	r1, r2
   2406c:	bl	23d84 <__assert_fail@plt+0x12adc>
   24070:	ldr	r4, [sp]
   24074:	add	sp, sp, #4
   24078:	pop	{pc}		; (ldr pc, [sp], #4)
   2407c:	bl	111a0 <__errno_location@plt>
   24080:	mov	r3, #12
   24084:	str	r3, [r0]
   24088:	mov	r0, #0
   2408c:	b	24070 <__assert_fail@plt+0x12dc8>
   24090:	push	{lr}		; (str lr, [sp, #-4]!)
   24094:	sub	sp, sp, #268	; 0x10c
   24098:	movw	r2, #257	; 0x101
   2409c:	add	r1, sp, #4
   240a0:	bl	240ec <__assert_fail@plt+0x12e44>
   240a4:	cmp	r0, #0
   240a8:	movne	r0, #0
   240ac:	bne	240e4 <__assert_fail@plt+0x12e3c>
   240b0:	movw	r1, #21908	; 0x5594
   240b4:	movt	r1, #2
   240b8:	add	r0, sp, #4
   240bc:	bl	10fd8 <strcmp@plt>
   240c0:	cmp	r0, #0
   240c4:	beq	240e0 <__assert_fail@plt+0x12e38>
   240c8:	movw	r1, #21912	; 0x5598
   240cc:	movt	r1, #2
   240d0:	add	r0, sp, #4
   240d4:	bl	10fd8 <strcmp@plt>
   240d8:	adds	r0, r0, #0
   240dc:	movne	r0, #1
   240e0:	and	r0, r0, #1
   240e4:	add	sp, sp, #268	; 0x10c
   240e8:	pop	{pc}		; (ldr pc, [sp], #4)
   240ec:	strd	r4, [sp, #-16]!
   240f0:	str	r6, [sp, #8]
   240f4:	str	lr, [sp, #12]
   240f8:	mov	r6, r1
   240fc:	mov	r4, r2
   24100:	mov	r1, #0
   24104:	bl	11230 <setlocale@plt>
   24108:	subs	r5, r0, #0
   2410c:	beq	24150 <__assert_fail@plt+0x12ea8>
   24110:	mov	r0, r5
   24114:	bl	11188 <strlen@plt>
   24118:	cmp	r4, r0
   2411c:	bhi	2416c <__assert_fail@plt+0x12ec4>
   24120:	cmp	r4, #0
   24124:	moveq	r0, #34	; 0x22
   24128:	beq	24180 <__assert_fail@plt+0x12ed8>
   2412c:	sub	r4, r4, #1
   24130:	mov	r2, r4
   24134:	mov	r1, r5
   24138:	mov	r0, r6
   2413c:	bl	11038 <memcpy@plt>
   24140:	mov	r3, #0
   24144:	strb	r3, [r6, r4]
   24148:	mov	r0, #34	; 0x22
   2414c:	b	24180 <__assert_fail@plt+0x12ed8>
   24150:	cmp	r4, #0
   24154:	moveq	r0, #22
   24158:	beq	24180 <__assert_fail@plt+0x12ed8>
   2415c:	mov	r3, #0
   24160:	strb	r3, [r6]
   24164:	mov	r0, #22
   24168:	b	24180 <__assert_fail@plt+0x12ed8>
   2416c:	add	r2, r0, #1
   24170:	mov	r1, r5
   24174:	mov	r0, r6
   24178:	bl	11038 <memcpy@plt>
   2417c:	mov	r0, #0
   24180:	ldrd	r4, [sp]
   24184:	ldr	r6, [sp, #8]
   24188:	add	sp, sp, #12
   2418c:	pop	{pc}		; (ldr pc, [sp], #4)
   24190:	str	r4, [sp, #-8]!
   24194:	str	lr, [sp, #4]
   24198:	mov	r1, #0
   2419c:	bl	11230 <setlocale@plt>
   241a0:	ldr	r4, [sp]
   241a4:	add	sp, sp, #4
   241a8:	pop	{pc}		; (ldr pc, [sp], #4)
   241ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   241b0:	mov	r7, r0
   241b4:	ldr	r6, [pc, #72]	; 24204 <__assert_fail@plt+0x12f5c>
   241b8:	ldr	r5, [pc, #72]	; 24208 <__assert_fail@plt+0x12f60>
   241bc:	add	r6, pc, r6
   241c0:	add	r5, pc, r5
   241c4:	sub	r6, r6, r5
   241c8:	mov	r8, r1
   241cc:	mov	r9, r2
   241d0:	bl	10f70 <pthread_mutex_unlock@plt-0x20>
   241d4:	asrs	r6, r6, #2
   241d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   241dc:	mov	r4, #0
   241e0:	add	r4, r4, #1
   241e4:	ldr	r3, [r5], #4
   241e8:	mov	r2, r9
   241ec:	mov	r1, r8
   241f0:	mov	r0, r7
   241f4:	blx	r3
   241f8:	cmp	r6, r4
   241fc:	bne	241e0 <__assert_fail@plt+0x12f38>
   24200:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24204:	andeq	r1, r1, r0, asr sp
   24208:	andeq	r1, r1, r8, asr #26
   2420c:	bx	lr
   24210:	ldr	r3, [pc, #12]	; 24224 <__assert_fail@plt+0x12f7c>
   24214:	mov	r1, #0
   24218:	add	r3, pc, r3
   2421c:	ldr	r2, [r3]
   24220:	b	111b8 <__cxa_atexit@plt>
   24224:	andeq	r1, r1, r4, lsl #30

Disassembly of section .fini:

00024228 <.fini>:
   24228:	push	{r3, lr}
   2422c:	pop	{r3, pc}
