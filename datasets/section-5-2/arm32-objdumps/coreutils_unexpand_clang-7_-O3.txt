
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010dac <.init>:
   10dac:	push	{r3, lr}
   10db0:	bl	11060 <__assert_fail@plt+0x48>
   10db4:	pop	{r3, pc}

Disassembly of section .plt:

00010db8 <calloc@plt-0x14>:
   10db8:	push	{lr}		; (str lr, [sp, #-4]!)
   10dbc:	ldr	lr, [pc, #4]	; 10dc8 <calloc@plt-0x4>
   10dc0:	add	lr, pc, lr
   10dc4:	ldr	pc, [lr, #8]!
   10dc8:	andeq	r6, r1, r8, lsr r2

00010dcc <calloc@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #90112	; 0x16000
   10dd4:	ldr	pc, [ip, #568]!	; 0x238

00010dd8 <fputs_unlocked@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #90112	; 0x16000
   10de0:	ldr	pc, [ip, #560]!	; 0x230

00010de4 <raise@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #90112	; 0x16000
   10dec:	ldr	pc, [ip, #552]!	; 0x228

00010df0 <strcmp@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #90112	; 0x16000
   10df8:	ldr	pc, [ip, #544]!	; 0x220

00010dfc <posix_fadvise64@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #90112	; 0x16000
   10e04:	ldr	pc, [ip, #536]!	; 0x218

00010e08 <fflush@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #90112	; 0x16000
   10e10:	ldr	pc, [ip, #528]!	; 0x210

00010e14 <free@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #90112	; 0x16000
   10e1c:	ldr	pc, [ip, #520]!	; 0x208

00010e20 <_exit@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #90112	; 0x16000
   10e28:	ldr	pc, [ip, #512]!	; 0x200

00010e2c <memcpy@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #504]!	; 0x1f8

00010e38 <mbsinit@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #496]!	; 0x1f0

00010e44 <fwrite_unlocked@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #488]!	; 0x1e8

00010e50 <memcmp@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #480]!	; 0x1e0

00010e5c <dcgettext@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #472]!	; 0x1d8

00010e68 <realloc@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #464]!	; 0x1d0

00010e74 <textdomain@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #456]!	; 0x1c8

00010e80 <iswprint@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #448]!	; 0x1c0

00010e8c <fwrite@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #440]!	; 0x1b8

00010e98 <lseek64@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #432]!	; 0x1b0

00010ea4 <__ctype_get_mb_cur_max@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #424]!	; 0x1a8

00010eb0 <__fpending@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #416]!	; 0x1a0

00010ebc <mbrtowc@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #408]!	; 0x198

00010ec8 <error@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #400]!	; 0x190

00010ed4 <malloc@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #392]!	; 0x188

00010ee0 <__libc_start_main@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #384]!	; 0x180

00010eec <__freading@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #376]!	; 0x178

00010ef8 <__gmon_start__@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #368]!	; 0x170

00010f04 <getopt_long@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #360]!	; 0x168

00010f10 <__ctype_b_loc@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #352]!	; 0x160

00010f1c <exit@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #344]!	; 0x158

00010f28 <strlen@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #336]!	; 0x150

00010f34 <__errno_location@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #328]!	; 0x148

00010f40 <__cxa_atexit@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #320]!	; 0x140

00010f4c <memset@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #312]!	; 0x138

00010f58 <__printf_chk@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #304]!	; 0x130

00010f64 <fileno@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #296]!	; 0x128

00010f70 <__fprintf_chk@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #288]!	; 0x120

00010f7c <fclose@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #280]!	; 0x118

00010f88 <fseeko64@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #272]!	; 0x110

00010f94 <__uflow@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #264]!	; 0x108

00010fa0 <__overflow@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #256]!	; 0x100

00010fac <setlocale@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #248]!	; 0xf8

00010fb8 <strrchr@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #240]!	; 0xf0

00010fc4 <nl_langinfo@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #232]!	; 0xe8

00010fd0 <clearerr_unlocked@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #224]!	; 0xe0

00010fdc <fopen64@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #216]!	; 0xd8

00010fe8 <bindtextdomain@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #208]!	; 0xd0

00010ff4 <strncmp@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #200]!	; 0xc8

00011000 <abort@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #192]!	; 0xc0

0001100c <strspn@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #184]!	; 0xb8

00011018 <__assert_fail@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #176]!	; 0xb0

Disassembly of section .text:

00011024 <.text>:
   11024:	mov	fp, #0
   11028:	mov	lr, #0
   1102c:	pop	{r1}		; (ldr r1, [sp], #4)
   11030:	mov	r2, sp
   11034:	push	{r2}		; (str r2, [sp, #-4]!)
   11038:	push	{r0}		; (str r0, [sp, #-4]!)
   1103c:	ldr	ip, [pc, #16]	; 11054 <__assert_fail@plt+0x3c>
   11040:	push	{ip}		; (str ip, [sp, #-4]!)
   11044:	ldr	r0, [pc, #12]	; 11058 <__assert_fail@plt+0x40>
   11048:	ldr	r3, [pc, #12]	; 1105c <__assert_fail@plt+0x44>
   1104c:	bl	10ee0 <__libc_start_main@plt>
   11050:	bl	11000 <abort@plt>
   11054:	andeq	r5, r1, ip, lsr #18
   11058:			; <UNDEFINED> instruction: 0x000113b0
   1105c:	andeq	r5, r1, ip, asr #17
   11060:	ldr	r3, [pc, #20]	; 1107c <__assert_fail@plt+0x64>
   11064:	ldr	r2, [pc, #20]	; 11080 <__assert_fail@plt+0x68>
   11068:	add	r3, pc, r3
   1106c:	ldr	r2, [r3, r2]
   11070:	cmp	r2, #0
   11074:	bxeq	lr
   11078:	b	10ef8 <__gmon_start__@plt>
   1107c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11080:	ldrdeq	r0, [r0], -r4
   11084:	ldr	r0, [pc, #24]	; 110a4 <__assert_fail@plt+0x8c>
   11088:	ldr	r3, [pc, #24]	; 110a8 <__assert_fail@plt+0x90>
   1108c:	cmp	r3, r0
   11090:	bxeq	lr
   11094:	ldr	r3, [pc, #16]	; 110ac <__assert_fail@plt+0x94>
   11098:	cmp	r3, #0
   1109c:	bxeq	lr
   110a0:	bx	r3
   110a4:	andeq	r7, r2, r0, lsr r1
   110a8:	andeq	r7, r2, r0, lsr r1
   110ac:	andeq	r0, r0, r0
   110b0:	ldr	r0, [pc, #36]	; 110dc <__assert_fail@plt+0xc4>
   110b4:	ldr	r1, [pc, #36]	; 110e0 <__assert_fail@plt+0xc8>
   110b8:	sub	r1, r1, r0
   110bc:	asr	r1, r1, #2
   110c0:	add	r1, r1, r1, lsr #31
   110c4:	asrs	r1, r1, #1
   110c8:	bxeq	lr
   110cc:	ldr	r3, [pc, #16]	; 110e4 <__assert_fail@plt+0xcc>
   110d0:	cmp	r3, #0
   110d4:	bxeq	lr
   110d8:	bx	r3
   110dc:	andeq	r7, r2, r0, lsr r1
   110e0:	andeq	r7, r2, r0, lsr r1
   110e4:	andeq	r0, r0, r0
   110e8:	push	{r4, lr}
   110ec:	ldr	r4, [pc, #24]	; 1110c <__assert_fail@plt+0xf4>
   110f0:	ldrb	r3, [r4]
   110f4:	cmp	r3, #0
   110f8:	popne	{r4, pc}
   110fc:	bl	11084 <__assert_fail@plt+0x6c>
   11100:	mov	r3, #1
   11104:	strb	r3, [r4]
   11108:	pop	{r4, pc}
   1110c:	andeq	r7, r2, r4, asr r1
   11110:	b	110b0 <__assert_fail@plt+0x98>
   11114:	push	{fp, lr}
   11118:	mov	fp, sp
   1111c:	sub	sp, sp, #56	; 0x38
   11120:	mov	r4, r0
   11124:	cmp	r0, #0
   11128:	bne	1136c <__assert_fail@plt+0x354>
   1112c:	movw	r1, #22907	; 0x597b
   11130:	mov	r0, #0
   11134:	mov	r2, #5
   11138:	movt	r1, #1
   1113c:	bl	10e5c <dcgettext@plt>
   11140:	mov	r1, r0
   11144:	movw	r0, #29080	; 0x7198
   11148:	movt	r0, #2
   1114c:	ldr	r2, [r0]
   11150:	mov	r0, #1
   11154:	bl	10f58 <__printf_chk@plt>
   11158:	movw	r1, #22940	; 0x599c
   1115c:	mov	r0, #0
   11160:	mov	r2, #5
   11164:	movt	r1, #1
   11168:	bl	10e5c <dcgettext@plt>
   1116c:	movw	r7, #29004	; 0x714c
   11170:	movt	r7, #2
   11174:	ldr	r1, [r7]
   11178:	bl	10dd8 <fputs_unlocked@plt>
   1117c:	movw	r1, #23432	; 0x5b88
   11180:	mov	r0, #0
   11184:	mov	r2, #5
   11188:	movt	r1, #1
   1118c:	bl	10e5c <dcgettext@plt>
   11190:	ldr	r1, [r7]
   11194:	bl	10dd8 <fputs_unlocked@plt>
   11198:	movw	r1, #23488	; 0x5bc0
   1119c:	mov	r0, #0
   111a0:	mov	r2, #5
   111a4:	movt	r1, #1
   111a8:	bl	10e5c <dcgettext@plt>
   111ac:	ldr	r1, [r7]
   111b0:	bl	10dd8 <fputs_unlocked@plt>
   111b4:	movw	r1, #23006	; 0x59de
   111b8:	mov	r0, #0
   111bc:	mov	r2, #5
   111c0:	movt	r1, #1
   111c4:	bl	10e5c <dcgettext@plt>
   111c8:	ldr	r1, [r7]
   111cc:	bl	10dd8 <fputs_unlocked@plt>
   111d0:	bl	124c0 <__assert_fail@plt+0x14a8>
   111d4:	movw	r1, #23227	; 0x5abb
   111d8:	mov	r0, #0
   111dc:	mov	r2, #5
   111e0:	movt	r1, #1
   111e4:	bl	10e5c <dcgettext@plt>
   111e8:	ldr	r1, [r7]
   111ec:	bl	10dd8 <fputs_unlocked@plt>
   111f0:	movw	r1, #23272	; 0x5ae8
   111f4:	mov	r0, #0
   111f8:	mov	r2, #5
   111fc:	movt	r1, #1
   11200:	bl	10e5c <dcgettext@plt>
   11204:	ldr	r1, [r7]
   11208:	bl	10dd8 <fputs_unlocked@plt>
   1120c:	movw	r0, #24040	; 0x5de8
   11210:	mov	r2, #48	; 0x30
   11214:	mov	r6, sp
   11218:	movw	r5, #23326	; 0x5b1e
   1121c:	movt	r0, #1
   11220:	movt	r5, #1
   11224:	add	r1, r0, #32
   11228:	add	r3, r0, #16
   1122c:	vld1.64	{d18-d19}, [r0], r2
   11230:	vld1.64	{d16-d17}, [r1]
   11234:	vld1.64	{d20-d21}, [r3]
   11238:	add	r1, r6, #32
   1123c:	vldr	d22, [r0]
   11240:	add	r0, r6, #16
   11244:	vst1.64	{d16-d17}, [r1]
   11248:	movw	r1, #23563	; 0x5c0b
   1124c:	vst1.64	{d20-d21}, [r0]
   11250:	mov	r0, r6
   11254:	vst1.64	{d18-d19}, [r0], r2
   11258:	movt	r1, #1
   1125c:	vstr	d22, [r0]
   11260:	mov	r0, r5
   11264:	bl	10df0 <strcmp@plt>
   11268:	cmp	r0, #0
   1126c:	ldrne	r1, [r6, #8]!
   11270:	cmpne	r1, #0
   11274:	bne	11260 <__assert_fail@plt+0x248>
   11278:	ldr	r6, [r6, #4]
   1127c:	movw	r1, #23658	; 0x5c6a
   11280:	mov	r0, #0
   11284:	mov	r2, #5
   11288:	movt	r1, #1
   1128c:	bl	10e5c <dcgettext@plt>
   11290:	movw	r2, #23374	; 0x5b4e
   11294:	movw	r3, #23681	; 0x5c81
   11298:	mov	r1, r0
   1129c:	mov	r0, #1
   112a0:	movt	r2, #1
   112a4:	movt	r3, #1
   112a8:	bl	10f58 <__printf_chk@plt>
   112ac:	cmp	r6, #0
   112b0:	mov	r0, #5
   112b4:	mov	r1, #0
   112b8:	moveq	r6, r5
   112bc:	bl	10fac <setlocale@plt>
   112c0:	cmp	r0, #0
   112c4:	beq	112fc <__assert_fail@plt+0x2e4>
   112c8:	movw	r1, #23721	; 0x5ca9
   112cc:	mov	r2, #3
   112d0:	movt	r1, #1
   112d4:	bl	10ff4 <strncmp@plt>
   112d8:	cmp	r0, #0
   112dc:	beq	112fc <__assert_fail@plt+0x2e4>
   112e0:	movw	r1, #23725	; 0x5cad
   112e4:	mov	r0, #0
   112e8:	mov	r2, #5
   112ec:	movt	r1, #1
   112f0:	bl	10e5c <dcgettext@plt>
   112f4:	ldr	r1, [r7]
   112f8:	bl	10dd8 <fputs_unlocked@plt>
   112fc:	movw	r1, #23796	; 0x5cf4
   11300:	mov	r0, #0
   11304:	mov	r2, #5
   11308:	movt	r1, #1
   1130c:	bl	10e5c <dcgettext@plt>
   11310:	movw	r2, #23681	; 0x5c81
   11314:	mov	r1, r0
   11318:	mov	r0, #1
   1131c:	mov	r3, r5
   11320:	movt	r2, #1
   11324:	bl	10f58 <__printf_chk@plt>
   11328:	movw	r1, #23823	; 0x5d0f
   1132c:	mov	r0, #0
   11330:	mov	r2, #5
   11334:	movt	r1, #1
   11338:	bl	10e5c <dcgettext@plt>
   1133c:	movw	r3, #23873	; 0x5d41
   11340:	mov	r1, r0
   11344:	movw	r0, #23591	; 0x5c27
   11348:	cmp	r6, r5
   1134c:	mov	r2, r6
   11350:	movt	r0, #1
   11354:	movt	r3, #1
   11358:	moveq	r3, r0
   1135c:	mov	r0, #1
   11360:	bl	10f58 <__printf_chk@plt>
   11364:	mov	r0, r4
   11368:	bl	10f1c <exit@plt>
   1136c:	movw	r0, #28992	; 0x7140
   11370:	movw	r1, #22868	; 0x5954
   11374:	mov	r2, #5
   11378:	movt	r0, #2
   1137c:	movt	r1, #1
   11380:	ldr	r5, [r0]
   11384:	mov	r0, #0
   11388:	bl	10e5c <dcgettext@plt>
   1138c:	mov	r2, r0
   11390:	movw	r0, #29080	; 0x7198
   11394:	mov	r1, #1
   11398:	movt	r0, #2
   1139c:	ldr	r3, [r0]
   113a0:	mov	r0, r5
   113a4:	bl	10f70 <__fprintf_chk@plt>
   113a8:	mov	r0, r4
   113ac:	bl	10f1c <exit@plt>
   113b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113b4:	add	fp, sp, #28
   113b8:	sub	sp, sp, #36	; 0x24
   113bc:	mov	r5, r0
   113c0:	ldr	r0, [r1]
   113c4:	mov	r4, r1
   113c8:	bl	12828 <__assert_fail@plt+0x1810>
   113cc:	movw	r1, #23873	; 0x5d41
   113d0:	mov	r0, #6
   113d4:	movt	r1, #1
   113d8:	bl	10fac <setlocale@plt>
   113dc:	movw	r6, #23378	; 0x5b52
   113e0:	movw	r1, #23335	; 0x5b27
   113e4:	movt	r6, #1
   113e8:	movt	r1, #1
   113ec:	mov	r0, r6
   113f0:	bl	10fe8 <bindtextdomain@plt>
   113f4:	mov	r0, r6
   113f8:	bl	10e74 <textdomain@plt>
   113fc:	movw	r0, #9516	; 0x252c
   11400:	movt	r0, #1
   11404:	bl	15930 <__assert_fail@plt+0x4918>
   11408:	movw	r8, #23359	; 0x5b3f
   1140c:	movw	r9, #23944	; 0x5d88
   11410:	mov	sl, #0
   11414:	mov	r0, #0
   11418:	movt	r8, #1
   1141c:	movt	r9, #1
   11420:	b	11428 <__assert_fail@plt+0x410>
   11424:	mov	r0, #1
   11428:	str	r0, [sp, #24]
   1142c:	b	11440 <__assert_fail@plt+0x428>
   11430:	movw	r0, #29016	; 0x7158
   11434:	mov	r1, #1
   11438:	movt	r0, #2
   1143c:	strb	r1, [r0]
   11440:	mov	r0, #0
   11444:	mov	r1, r4
   11448:	mov	r2, r8
   1144c:	mov	r3, r9
   11450:	str	r0, [sp]
   11454:	mov	r0, r5
   11458:	bl	10f04 <getopt_long@plt>
   1145c:	cmp	r0, #96	; 0x60
   11460:	ble	11480 <__assert_fail@plt+0x468>
   11464:	cmp	r0, #97	; 0x61
   11468:	beq	11430 <__assert_fail@plt+0x418>
   1146c:	cmp	r0, #116	; 0x74
   11470:	beq	114cc <__assert_fail@plt+0x4b4>
   11474:	cmp	r0, #256	; 0x100
   11478:	beq	11424 <__assert_fail@plt+0x40c>
   1147c:	b	114f8 <__assert_fail@plt+0x4e0>
   11480:	cmp	r0, #43	; 0x2b
   11484:	bgt	114a4 <__assert_fail@plt+0x48c>
   11488:	cmn	r0, #1
   1148c:	beq	11560 <__assert_fail@plt+0x548>
   11490:	cmn	r0, #3
   11494:	beq	11960 <__assert_fail@plt+0x948>
   11498:	cmn	r0, #2
   1149c:	bne	114f8 <__assert_fail@plt+0x4e0>
   114a0:	b	119a8 <__assert_fail@plt+0x990>
   114a4:	cmp	r0, #44	; 0x2c
   114a8:	bne	114f0 <__assert_fail@plt+0x4d8>
   114ac:	tst	sl, #1
   114b0:	mov	sl, #0
   114b4:	beq	11440 <__assert_fail@plt+0x428>
   114b8:	mov	r0, r6
   114bc:	mov	r1, r7
   114c0:	bl	119dc <__assert_fail@plt+0x9c4>
   114c4:	mov	sl, #0
   114c8:	b	11440 <__assert_fail@plt+0x428>
   114cc:	movw	r0, #29016	; 0x7158
   114d0:	mov	r1, #1
   114d4:	movt	r0, #2
   114d8:	strb	r1, [r0]
   114dc:	movw	r0, #29008	; 0x7150
   114e0:	movt	r0, #2
   114e4:	ldr	r0, [r0]
   114e8:	bl	11acc <__assert_fail@plt+0xab4>
   114ec:	b	11440 <__assert_fail@plt+0x428>
   114f0:	cmp	r0, #63	; 0x3f
   114f4:	beq	119b0 <__assert_fail@plt+0x998>
   114f8:	ands	r1, sl, #1
   114fc:	moveq	r7, r1
   11500:	moveq	r6, r1
   11504:	movw	r1, #39321	; 0x9999
   11508:	movt	r1, #39321	; 0x9999
   1150c:	subs	r1, r1, r6
   11510:	movw	r1, #39321	; 0x9999
   11514:	movt	r1, #6553	; 0x1999
   11518:	sbcs	r1, r1, r7
   1151c:	bcc	11554 <__assert_fail@plt+0x53c>
   11520:	mov	r1, #10
   11524:	add	r3, r7, r7, lsl #2
   11528:	sub	r0, r0, #48	; 0x30
   1152c:	mov	sl, #1
   11530:	umull	r1, r2, r6, r1
   11534:	add	r2, r2, r3, lsl #1
   11538:	adds	r1, r1, r0
   1153c:	adc	r0, r2, r0, asr #31
   11540:	subs	r2, r1, r6
   11544:	mov	r6, r1
   11548:	sbcs	r2, r0, r7
   1154c:	mov	r7, r0
   11550:	bcs	11440 <__assert_fail@plt+0x428>
   11554:	movw	r1, #23404	; 0x5b6c
   11558:	movt	r1, #1
   1155c:	b	119c0 <__assert_fail@plt+0x9a8>
   11560:	ldr	r0, [sp, #24]
   11564:	tst	r0, #1
   11568:	movwne	r1, #29016	; 0x7158
   1156c:	movne	r0, #0
   11570:	movtne	r1, #2
   11574:	strbne	r0, [r1]
   11578:	tst	sl, #1
   1157c:	beq	1158c <__assert_fail@plt+0x574>
   11580:	mov	r0, r6
   11584:	mov	r1, r7
   11588:	bl	119dc <__assert_fail@plt+0x9c4>
   1158c:	bl	1205c <__assert_fail@plt+0x1044>
   11590:	movw	r0, #28984	; 0x7138
   11594:	movt	r0, #2
   11598:	ldr	r1, [r0]
   1159c:	mov	r0, #0
   115a0:	cmp	r1, r5
   115a4:	addlt	r0, r4, r1, lsl #2
   115a8:	bl	12260 <__assert_fail@plt+0x1248>
   115ac:	mov	r0, #0
   115b0:	bl	12288 <__assert_fail@plt+0x1270>
   115b4:	cmp	r0, #0
   115b8:	beq	11948 <__assert_fail@plt+0x930>
   115bc:	mov	r1, r0
   115c0:	movw	r0, #29392	; 0x72d0
   115c4:	movt	r0, #2
   115c8:	mov	r4, r1
   115cc:	ldr	r0, [r0]
   115d0:	bl	14e7c <__assert_fail@plt+0x3e64>
   115d4:	mov	r3, r4
   115d8:	str	r0, [sp, #12]
   115dc:	mov	r8, #0
   115e0:	mov	r0, #0
   115e4:	mov	r4, #1
   115e8:	mov	sl, #0
   115ec:	mov	r6, #1
   115f0:	mov	ip, #0
   115f4:	str	r8, [sp, #32]
   115f8:	str	r0, [sp, #20]
   115fc:	ldmib	r3, {r0, r1}
   11600:	cmp	r0, r1
   11604:	bcs	1183c <__assert_fail@plt+0x824>
   11608:	add	r1, r0, #1
   1160c:	str	r1, [r3, #4]
   11610:	ldrb	r7, [r0]
   11614:	tst	r4, #1
   11618:	beq	1189c <__assert_fail@plt+0x884>
   1161c:	str	r6, [sp, #16]
   11620:	mov	r4, ip
   11624:	str	r3, [sp, #24]
   11628:	bl	10f10 <__ctype_b_loc@plt>
   1162c:	ldr	r0, [r0]
   11630:	add	r0, r0, r7, lsl #1
   11634:	ldrh	r0, [r0]
   11638:	ands	r6, r0, #1
   1163c:	beq	11688 <__assert_fail@plt+0x670>
   11640:	mov	r0, r8
   11644:	mov	r1, sl
   11648:	add	r2, sp, #32
   1164c:	add	r3, sp, #31
   11650:	bl	1217c <__assert_fail@plt+0x1164>
   11654:	mov	r5, r0
   11658:	ldrb	r0, [sp, #31]
   1165c:	cmp	r0, #0
   11660:	beq	11770 <__assert_fail@plt+0x758>
   11664:	ldr	r3, [sp, #24]
   11668:	mov	r5, r8
   1166c:	mov	r9, sl
   11670:	mov	r2, r4
   11674:	clz	r0, r0
   11678:	lsr	r8, r0, #5
   1167c:	cmp	r2, #0
   11680:	bne	116f4 <__assert_fail@plt+0x6dc>
   11684:	b	11748 <__assert_fail@plt+0x730>
   11688:	cmp	r7, #8
   1168c:	mov	r2, r4
   11690:	bne	116d4 <__assert_fail@plt+0x6bc>
   11694:	ldr	r0, [sp, #32]
   11698:	ldr	r3, [sp, #24]
   1169c:	mov	r7, #8
   116a0:	cmp	r0, #0
   116a4:	subne	r0, r0, #1
   116a8:	subs	r5, r8, #1
   116ac:	str	r0, [sp, #32]
   116b0:	orr	r0, r8, sl
   116b4:	sbc	r9, sl, #0
   116b8:	cmp	r0, #0
   116bc:	moveq	r5, r8
   116c0:	moveq	r9, sl
   116c4:	mov	r8, #1
   116c8:	cmp	r2, #0
   116cc:	bne	116f4 <__assert_fail@plt+0x6dc>
   116d0:	b	11748 <__assert_fail@plt+0x730>
   116d4:	ldr	r3, [sp, #24]
   116d8:	adds	r5, r8, #1
   116dc:	mov	r8, #1
   116e0:	adc	r9, sl, #0
   116e4:	orrs	r0, r5, r9
   116e8:	beq	119b8 <__assert_fail@plt+0x9a0>
   116ec:	cmp	r2, #0
   116f0:	beq	11748 <__assert_fail@plt+0x730>
   116f4:	mov	r4, r6
   116f8:	cmp	r2, #1
   116fc:	beq	11714 <__assert_fail@plt+0x6fc>
   11700:	ldr	r0, [sp, #20]
   11704:	tst	r0, #1
   11708:	ldrne	r0, [sp, #12]
   1170c:	movne	r1, #9
   11710:	strbne	r1, [r0]
   11714:	movw	r0, #29004	; 0x714c
   11718:	mov	r1, #1
   1171c:	mov	r6, r2
   11720:	movt	r0, #2
   11724:	ldr	r3, [r0]
   11728:	ldr	r0, [sp, #12]
   1172c:	bl	10e44 <fwrite_unlocked@plt>
   11730:	ldr	r3, [sp, #24]
   11734:	mov	r1, #0
   11738:	cmp	r0, r6
   1173c:	mov	r6, r4
   11740:	str	r1, [sp, #20]
   11744:	bne	11914 <__assert_fail@plt+0x8fc>
   11748:	movw	r0, #29016	; 0x7158
   1174c:	mov	ip, #0
   11750:	movt	r0, #2
   11754:	ldrb	r0, [r0]
   11758:	orrs	r0, r6, r0
   1175c:	movwne	r0, #1
   11760:	and	r4, r8, r0
   11764:	cmn	r7, #1
   11768:	bgt	118b0 <__assert_fail@plt+0x898>
   1176c:	b	11940 <__assert_fail@plt+0x928>
   11770:	mov	r9, r1
   11774:	subs	r1, r5, r8
   11778:	sbcs	r1, r9, sl
   1177c:	bcc	119b8 <__assert_fail@plt+0x9a0>
   11780:	mov	ip, r4
   11784:	cmp	r7, #9
   11788:	bne	1179c <__assert_fail@plt+0x784>
   1178c:	ldr	r3, [sp, #24]
   11790:	cmp	ip, #0
   11794:	bne	117d8 <__assert_fail@plt+0x7c0>
   11798:	b	117e4 <__assert_fail@plt+0x7cc>
   1179c:	adds	r8, r8, #1
   117a0:	ldr	r3, [sp, #16]
   117a4:	adc	sl, sl, #0
   117a8:	eor	r1, r8, r5
   117ac:	eor	r2, sl, r9
   117b0:	orrs	r1, r1, r2
   117b4:	mov	r2, r1
   117b8:	mvn	r3, r3
   117bc:	movwne	r2, #1
   117c0:	orr	r2, r3, r2
   117c4:	tst	r2, #1
   117c8:	bne	11804 <__assert_fail@plt+0x7ec>
   117cc:	ldr	r3, [sp, #24]
   117d0:	mov	r5, r8
   117d4:	mov	r9, sl
   117d8:	ldr	r1, [sp, #12]
   117dc:	mov	r2, #9
   117e0:	strb	r2, [r1]
   117e4:	ldr	r1, [sp, #20]
   117e8:	mov	r7, #9
   117ec:	and	r2, r1, #1
   117f0:	clz	r0, r0
   117f4:	lsr	r8, r0, #5
   117f8:	cmp	r2, #0
   117fc:	bne	116f4 <__assert_fail@plt+0x6dc>
   11800:	b	11748 <__assert_fail@plt+0x730>
   11804:	ldr	r0, [sp, #12]
   11808:	ldr	r3, [sp, #24]
   1180c:	mov	r4, #1
   11810:	mov	r6, #1
   11814:	strb	r7, [r0, ip]
   11818:	clz	r0, r1
   1181c:	ldr	r1, [sp, #20]
   11820:	add	ip, ip, #1
   11824:	lsr	r0, r0, #5
   11828:	orr	r1, r1, r0
   1182c:	str	r1, [sp, #20]
   11830:	cmp	r7, #10
   11834:	bne	115fc <__assert_fail@plt+0x5e4>
   11838:	b	115dc <__assert_fail@plt+0x5c4>
   1183c:	mov	r0, r3
   11840:	mov	r9, r6
   11844:	mov	r6, ip
   11848:	mov	r5, r3
   1184c:	bl	10f94 <__uflow@plt>
   11850:	mov	r7, r0
   11854:	cmn	r0, #1
   11858:	bgt	11888 <__assert_fail@plt+0x870>
   1185c:	mov	r0, r5
   11860:	bl	12288 <__assert_fail@plt+0x1270>
   11864:	mov	ip, r6
   11868:	mov	r3, r0
   1186c:	cmp	r0, #0
   11870:	mov	r6, r9
   11874:	bne	115fc <__assert_fail@plt+0x5e4>
   11878:	mov	r3, #0
   1187c:	tst	r4, #1
   11880:	bne	1161c <__assert_fail@plt+0x604>
   11884:	b	1189c <__assert_fail@plt+0x884>
   11888:	mov	ip, r6
   1188c:	mov	r3, r5
   11890:	mov	r6, r9
   11894:	tst	r4, #1
   11898:	bne	1161c <__assert_fail@plt+0x604>
   1189c:	mov	r4, #0
   118a0:	mov	r5, r8
   118a4:	mov	r9, sl
   118a8:	cmn	r7, #1
   118ac:	ble	11940 <__assert_fail@plt+0x928>
   118b0:	movw	r0, #29004	; 0x714c
   118b4:	movt	r0, #2
   118b8:	ldr	r0, [r0]
   118bc:	ldr	r1, [r0, #20]
   118c0:	ldr	r2, [r0, #24]
   118c4:	cmp	r1, r2
   118c8:	bcs	118ec <__assert_fail@plt+0x8d4>
   118cc:	add	r2, r1, #1
   118d0:	mov	r8, r5
   118d4:	mov	sl, r9
   118d8:	str	r2, [r0, #20]
   118dc:	strb	r7, [r1]
   118e0:	cmp	r7, #10
   118e4:	bne	115fc <__assert_fail@plt+0x5e4>
   118e8:	b	115dc <__assert_fail@plt+0x5c4>
   118ec:	uxtb	r1, r7
   118f0:	mov	r8, r3
   118f4:	mov	sl, ip
   118f8:	bl	10fa0 <__overflow@plt>
   118fc:	mov	ip, sl
   11900:	mov	r3, r8
   11904:	cmn	r0, #1
   11908:	mov	r8, r5
   1190c:	mov	sl, r9
   11910:	bgt	118e0 <__assert_fail@plt+0x8c8>
   11914:	bl	10f34 <__errno_location@plt>
   11918:	ldr	r4, [r0]
   1191c:	movw	r1, #23930	; 0x5d7a
   11920:	mov	r0, #0
   11924:	mov	r2, #5
   11928:	movt	r1, #1
   1192c:	bl	10e5c <dcgettext@plt>
   11930:	mov	r2, r0
   11934:	mov	r0, #1
   11938:	mov	r1, r4
   1193c:	bl	10ec8 <error@plt>
   11940:	ldr	r0, [sp, #12]
   11944:	bl	1275c <__assert_fail@plt+0x1744>
   11948:	bl	12470 <__assert_fail@plt+0x1458>
   1194c:	movw	r0, #29020	; 0x715c
   11950:	movt	r0, #2
   11954:	ldr	r0, [r0]
   11958:	sub	sp, fp, #28
   1195c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11960:	movw	r0, #28904	; 0x70e8
   11964:	movw	r2, #23388	; 0x5b5c
   11968:	mov	r1, #0
   1196c:	movt	r0, #2
   11970:	movt	r2, #1
   11974:	str	r1, [sp, #4]
   11978:	movw	r1, #23326	; 0x5b1e
   1197c:	ldr	r3, [r0]
   11980:	movw	r0, #29004	; 0x714c
   11984:	str	r2, [sp]
   11988:	movw	r2, #23374	; 0x5b4e
   1198c:	movt	r1, #1
   11990:	movt	r0, #2
   11994:	movt	r2, #1
   11998:	ldr	r0, [r0]
   1199c:	bl	14c48 <__assert_fail@plt+0x3c30>
   119a0:	mov	r0, #0
   119a4:	bl	10f1c <exit@plt>
   119a8:	mov	r0, #0
   119ac:	bl	11114 <__assert_fail@plt+0xfc>
   119b0:	mov	r0, #1
   119b4:	bl	11114 <__assert_fail@plt+0xfc>
   119b8:	movw	r1, #23907	; 0x5d63
   119bc:	movt	r1, #1
   119c0:	mov	r0, #0
   119c4:	mov	r2, #5
   119c8:	bl	10e5c <dcgettext@plt>
   119cc:	mov	r2, r0
   119d0:	mov	r0, #1
   119d4:	mov	r1, #0
   119d8:	bl	10ec8 <error@plt>
   119dc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   119e0:	add	fp, sp, #24
   119e4:	movw	r9, #29024	; 0x7160
   119e8:	mov	r4, r1
   119ec:	mov	r6, r0
   119f0:	mov	r0, #0
   119f4:	movt	r9, #2
   119f8:	ldr	r1, [r9, #4]
   119fc:	cmp	r1, #0
   11a00:	beq	11a14 <__assert_fail@plt+0x9fc>
   11a04:	ldr	r2, [r9, #8]
   11a08:	add	r2, r2, r1, lsl #3
   11a0c:	ldrd	r2, [r2, #-8]
   11a10:	b	11a1c <__assert_fail@plt+0xa04>
   11a14:	mov	r2, #0
   11a18:	mov	r3, #0
   11a1c:	subs	r7, r6, r2
   11a20:	mov	r5, r6
   11a24:	sbcs	r7, r4, r3
   11a28:	movwcc	r0, #1
   11a2c:	cmp	r0, #0
   11a30:	mov	r0, r4
   11a34:	movne	r5, r2
   11a38:	movne	r0, r3
   11a3c:	subs	r8, r5, r2
   11a40:	sbc	r7, r0, r3
   11a44:	ldr	r0, [r9, #12]
   11a48:	cmp	r1, r0
   11a4c:	bne	11a6c <__assert_fail@plt+0xa54>
   11a50:	ldr	r0, [r9, #8]
   11a54:	add	r1, r9, #12
   11a58:	mov	r2, #8
   11a5c:	bl	15028 <__assert_fail@plt+0x4010>
   11a60:	str	r0, [r9, #8]
   11a64:	ldr	r1, [r9, #4]
   11a68:	b	11a70 <__assert_fail@plt+0xa58>
   11a6c:	ldr	r0, [r9, #8]
   11a70:	add	r2, r1, #1
   11a74:	str	r2, [r9, #4]
   11a78:	str	r6, [r0, r1, lsl #3]!
   11a7c:	str	r4, [r0, #4]
   11a80:	movw	r0, #29392	; 0x72d0
   11a84:	movt	r0, #2
   11a88:	ldr	r1, [r0]
   11a8c:	subs	r1, r1, r8
   11a90:	rscs	r1, r7, #0
   11a94:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   11a98:	cmp	r7, #0
   11a9c:	bne	11aa8 <__assert_fail@plt+0xa90>
   11aa0:	str	r8, [r0]
   11aa4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11aa8:	movw	r1, #24096	; 0x5e20
   11aac:	mov	r0, #0
   11ab0:	mov	r2, #5
   11ab4:	movt	r1, #1
   11ab8:	bl	10e5c <dcgettext@plt>
   11abc:	mov	r2, r0
   11ac0:	mov	r0, #1
   11ac4:	mov	r1, #0
   11ac8:	bl	10ec8 <error@plt>
   11acc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ad0:	add	fp, sp, #28
   11ad4:	sub	sp, sp, #12
   11ad8:	mov	r5, r0
   11adc:	mov	r0, #0
   11ae0:	movw	r8, #29024	; 0x7160
   11ae4:	mov	ip, #1
   11ae8:	mov	sl, #0
   11aec:	mov	r9, #0
   11af0:	mov	r6, #0
   11af4:	str	r0, [sp, #8]
   11af8:	mov	r0, #0
   11afc:	movt	r8, #2
   11b00:	str	r0, [sp, #4]
   11b04:	mov	r0, #0
   11b08:	str	r0, [sp]
   11b0c:	ldrb	r4, [r5]
   11b10:	cmp	r4, #44	; 0x2c
   11b14:	bne	11b30 <__assert_fail@plt+0xb18>
   11b18:	b	11d04 <__assert_fail@plt+0xcec>
   11b1c:	mov	r6, #0
   11b20:	add	r5, r5, #1
   11b24:	ldrb	r4, [r5]
   11b28:	cmp	r4, #44	; 0x2c
   11b2c:	beq	11d04 <__assert_fail@plt+0xcec>
   11b30:	cmp	r4, #0
   11b34:	beq	11e54 <__assert_fail@plt+0xe3c>
   11b38:	mov	r7, ip
   11b3c:	bl	10f10 <__ctype_b_loc@plt>
   11b40:	ldr	r0, [r0]
   11b44:	mov	ip, r7
   11b48:	ldrb	r0, [r0, r4, lsl #1]
   11b4c:	tst	r0, #1
   11b50:	bne	11d04 <__assert_fail@plt+0xcec>
   11b54:	cmp	r4, #43	; 0x2b
   11b58:	beq	11bb0 <__assert_fail@plt+0xb98>
   11b5c:	cmp	r4, #47	; 0x2f
   11b60:	bne	11bfc <__assert_fail@plt+0xbe4>
   11b64:	mov	r9, #0
   11b68:	tst	r6, #1
   11b6c:	beq	11d2c <__assert_fail@plt+0xd14>
   11b70:	movw	r1, #24119	; 0x5e37
   11b74:	mov	r0, #0
   11b78:	mov	r2, #5
   11b7c:	movt	r1, #1
   11b80:	bl	10e5c <dcgettext@plt>
   11b84:	mov	r6, r0
   11b88:	mov	r0, r5
   11b8c:	bl	147a4 <__assert_fail@plt+0x378c>
   11b90:	mov	r3, r0
   11b94:	mov	r0, #0
   11b98:	mov	r1, #0
   11b9c:	mov	r2, r6
   11ba0:	bl	10ec8 <error@plt>
   11ba4:	mov	sl, #1
   11ba8:	mov	ip, #0
   11bac:	b	11cf0 <__assert_fail@plt+0xcd8>
   11bb0:	tst	r6, #1
   11bb4:	beq	11d54 <__assert_fail@plt+0xd3c>
   11bb8:	movw	r1, #24160	; 0x5e60
   11bbc:	mov	r0, #0
   11bc0:	mov	r2, #5
   11bc4:	mov	sl, #0
   11bc8:	movt	r1, #1
   11bcc:	bl	10e5c <dcgettext@plt>
   11bd0:	mov	r6, r0
   11bd4:	mov	r0, r5
   11bd8:	bl	147a4 <__assert_fail@plt+0x378c>
   11bdc:	mov	r3, r0
   11be0:	mov	r0, #0
   11be4:	mov	r1, #0
   11be8:	mov	r2, r6
   11bec:	bl	10ec8 <error@plt>
   11bf0:	mov	r9, #1
   11bf4:	mov	ip, #0
   11bf8:	b	11cf0 <__assert_fail@plt+0xcd8>
   11bfc:	sub	r0, r4, #48	; 0x30
   11c00:	cmp	r0, #9
   11c04:	bhi	12020 <__assert_fail@plt+0x1008>
   11c08:	ldr	r2, [sp]
   11c0c:	ldr	r3, [sp, #4]
   11c10:	ands	r1, r6, #1
   11c14:	moveq	r2, r5
   11c18:	str	r2, [sp]
   11c1c:	mov	r2, r1
   11c20:	movne	r2, r3
   11c24:	ldr	r3, [sp, #8]
   11c28:	movne	r1, r3
   11c2c:	movw	r3, #39321	; 0x9999
   11c30:	movt	r3, #39321	; 0x9999
   11c34:	subs	r3, r3, r1
   11c38:	movw	r3, #39321	; 0x9999
   11c3c:	movt	r3, #6553	; 0x1999
   11c40:	sbcs	r3, r3, r2
   11c44:	bcc	11c78 <__assert_fail@plt+0xc60>
   11c48:	mov	r3, #10
   11c4c:	add	r6, r2, r2, lsl #2
   11c50:	str	r1, [sp, #8]
   11c54:	str	r2, [sp, #4]
   11c58:	umull	r3, r7, r1, r3
   11c5c:	add	r7, r7, r6, lsl #1
   11c60:	adds	r3, r3, r0
   11c64:	mov	r6, #1
   11c68:	adc	r0, r7, r0, asr #31
   11c6c:	subs	r7, r3, r1
   11c70:	sbcs	r7, r0, r2
   11c74:	bcs	11e3c <__assert_fail@plt+0xe24>
   11c78:	ldr	r7, [sp]
   11c7c:	movw	r1, #24201	; 0x5e89
   11c80:	movt	r1, #1
   11c84:	mov	r0, r7
   11c88:	bl	1100c <strspn@plt>
   11c8c:	mov	r5, r0
   11c90:	mov	r0, r7
   11c94:	mov	r1, r5
   11c98:	bl	15354 <__assert_fail@plt+0x433c>
   11c9c:	movw	r1, #24212	; 0x5e94
   11ca0:	mov	r6, r0
   11ca4:	mov	r0, #0
   11ca8:	mov	r2, #5
   11cac:	movt	r1, #1
   11cb0:	bl	10e5c <dcgettext@plt>
   11cb4:	mov	r4, r8
   11cb8:	mov	r8, r0
   11cbc:	mov	r0, r6
   11cc0:	bl	147a4 <__assert_fail@plt+0x378c>
   11cc4:	mov	r3, r0
   11cc8:	mov	r2, r8
   11ccc:	mov	r0, #0
   11cd0:	mov	r1, #0
   11cd4:	mov	r8, r4
   11cd8:	bl	10ec8 <error@plt>
   11cdc:	mov	r0, r6
   11ce0:	bl	1275c <__assert_fail@plt+0x1744>
   11ce4:	add	r0, r7, r5
   11ce8:	mov	ip, #0
   11cec:	sub	r5, r0, #1
   11cf0:	mov	r6, #1
   11cf4:	add	r5, r5, #1
   11cf8:	ldrb	r4, [r5]
   11cfc:	cmp	r4, #44	; 0x2c
   11d00:	bne	11b30 <__assert_fail@plt+0xb18>
   11d04:	tst	r6, #1
   11d08:	beq	11b1c <__assert_fail@plt+0xb04>
   11d0c:	tst	sl, #1
   11d10:	beq	11d34 <__assert_fail@plt+0xd1c>
   11d14:	ldrd	r0, [r8, #24]
   11d18:	orrs	r0, r0, r1
   11d1c:	bne	11e84 <__assert_fail@plt+0xe6c>
   11d20:	ldr	r0, [sp, #8]
   11d24:	ldr	r1, [sp, #4]
   11d28:	strd	r0, [r8, #24]
   11d2c:	mov	sl, #1
   11d30:	b	11b1c <__assert_fail@plt+0xb04>
   11d34:	tst	r9, #1
   11d38:	beq	11d60 <__assert_fail@plt+0xd48>
   11d3c:	ldrd	r0, [r8, #32]
   11d40:	orrs	r0, r0, r1
   11d44:	bne	11ee0 <__assert_fail@plt+0xec8>
   11d48:	ldr	r0, [sp, #8]
   11d4c:	ldr	r1, [sp, #4]
   11d50:	strd	r0, [r8, #32]
   11d54:	mov	r9, #1
   11d58:	mov	sl, #0
   11d5c:	b	11b1c <__assert_fail@plt+0xb04>
   11d60:	ldr	r1, [r8, #4]
   11d64:	cmp	r1, #0
   11d68:	beq	11d80 <__assert_fail@plt+0xd68>
   11d6c:	ldr	r0, [r8, #8]
   11d70:	add	r0, r0, r1, lsl #3
   11d74:	ldr	r3, [r0, #-4]
   11d78:	ldr	r0, [r0, #-8]
   11d7c:	b	11d88 <__assert_fail@plt+0xd70>
   11d80:	mov	r0, #0
   11d84:	mov	r3, #0
   11d88:	ldr	r6, [sp, #8]
   11d8c:	ldr	r7, [sp, #4]
   11d90:	subs	r2, r6, r0
   11d94:	sbcs	r2, r7, r3
   11d98:	mov	r2, #0
   11d9c:	movwcc	r2, #1
   11da0:	cmp	r2, #0
   11da4:	mov	r2, r7
   11da8:	movne	r6, r0
   11dac:	movne	r2, r3
   11db0:	subs	r6, r6, r0
   11db4:	ldr	r0, [r8, #12]
   11db8:	sbc	r4, r2, r3
   11dbc:	cmp	r1, r0
   11dc0:	bne	11de8 <__assert_fail@plt+0xdd0>
   11dc4:	ldr	r0, [r8, #8]
   11dc8:	add	r1, r8, #12
   11dcc:	mov	r2, #8
   11dd0:	mov	r7, ip
   11dd4:	bl	15028 <__assert_fail@plt+0x4010>
   11dd8:	str	r0, [r8, #8]
   11ddc:	mov	ip, r7
   11de0:	ldr	r1, [r8, #4]
   11de4:	b	11dec <__assert_fail@plt+0xdd4>
   11de8:	ldr	r0, [r8, #8]
   11dec:	add	r2, r1, #1
   11df0:	mov	sl, #0
   11df4:	str	r2, [r8, #4]
   11df8:	ldr	r2, [sp, #8]
   11dfc:	str	r2, [r0, r1, lsl #3]!
   11e00:	ldr	r1, [sp, #4]
   11e04:	str	r1, [r0, #4]
   11e08:	movw	r0, #29392	; 0x72d0
   11e0c:	movt	r0, #2
   11e10:	ldr	r0, [r0]
   11e14:	subs	r0, r0, r6
   11e18:	rscs	r0, r4, #0
   11e1c:	bcs	11e34 <__assert_fail@plt+0xe1c>
   11e20:	cmp	r4, #0
   11e24:	bne	11fe8 <__assert_fail@plt+0xfd0>
   11e28:	movw	r0, #29392	; 0x72d0
   11e2c:	movt	r0, #2
   11e30:	str	r6, [r0]
   11e34:	mov	r9, #0
   11e38:	b	11b1c <__assert_fail@plt+0xb04>
   11e3c:	stmib	sp, {r0, r3}
   11e40:	add	r5, r5, #1
   11e44:	ldrb	r4, [r5]
   11e48:	cmp	r4, #44	; 0x2c
   11e4c:	bne	11b30 <__assert_fail@plt+0xb18>
   11e50:	b	11d04 <__assert_fail@plt+0xcec>
   11e54:	and	r0, ip, r6
   11e58:	tst	r0, #1
   11e5c:	beq	1200c <__assert_fail@plt+0xff4>
   11e60:	tst	sl, #1
   11e64:	beq	11ebc <__assert_fail@plt+0xea4>
   11e68:	ldrd	r0, [r8, #24]
   11e6c:	orrs	r0, r0, r1
   11e70:	ldreq	r0, [sp, #8]
   11e74:	ldreq	r1, [sp, #4]
   11e78:	strdeq	r0, [r8, #24]
   11e7c:	subeq	sp, fp, #28
   11e80:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e84:	movw	r1, #24762	; 0x60ba
   11e88:	mov	r0, #0
   11e8c:	mov	r2, #5
   11e90:	movt	r1, #1
   11e94:	bl	10e5c <dcgettext@plt>
   11e98:	mov	r2, r0
   11e9c:	mov	r0, #0
   11ea0:	mov	r1, #0
   11ea4:	bl	10ec8 <error@plt>
   11ea8:	ldr	r0, [sp, #8]
   11eac:	ldr	r1, [sp, #4]
   11eb0:	strd	r0, [r8, #24]
   11eb4:	mov	r0, #1
   11eb8:	bl	10f1c <exit@plt>
   11ebc:	tst	r9, #1
   11ec0:	beq	11f18 <__assert_fail@plt+0xf00>
   11ec4:	ldrd	r0, [r8, #32]
   11ec8:	orrs	r0, r0, r1
   11ecc:	ldreq	r0, [sp, #8]
   11ed0:	ldreq	r1, [sp, #4]
   11ed4:	strdeq	r0, [r8, #32]
   11ed8:	subeq	sp, fp, #28
   11edc:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ee0:	movw	r1, #24809	; 0x60e9
   11ee4:	mov	r0, #0
   11ee8:	mov	r2, #5
   11eec:	movt	r1, #1
   11ef0:	bl	10e5c <dcgettext@plt>
   11ef4:	mov	r2, r0
   11ef8:	mov	r0, #0
   11efc:	mov	r1, #0
   11f00:	bl	10ec8 <error@plt>
   11f04:	ldr	r0, [sp, #8]
   11f08:	ldr	r1, [sp, #4]
   11f0c:	strd	r0, [r8, #32]
   11f10:	mov	r0, #1
   11f14:	bl	10f1c <exit@plt>
   11f18:	ldr	r1, [r8, #4]
   11f1c:	mov	r7, #0
   11f20:	cmp	r1, #0
   11f24:	beq	11f38 <__assert_fail@plt+0xf20>
   11f28:	ldr	r2, [r8, #8]
   11f2c:	add	r2, r2, r1, lsl #3
   11f30:	ldrd	r2, [r2, #-8]
   11f34:	b	11f40 <__assert_fail@plt+0xf28>
   11f38:	mov	r2, #0
   11f3c:	mov	r3, #0
   11f40:	ldr	r5, [sp, #8]
   11f44:	ldr	r0, [sp, #4]
   11f48:	subs	r6, r5, r2
   11f4c:	sbcs	r6, r0, r3
   11f50:	movwcc	r7, #1
   11f54:	mov	r6, r5
   11f58:	cmp	r7, #0
   11f5c:	movne	r6, r2
   11f60:	movne	r0, r3
   11f64:	subs	r5, r6, r2
   11f68:	sbc	r6, r0, r3
   11f6c:	ldr	r0, [r8, #12]
   11f70:	cmp	r1, r0
   11f74:	bne	11f9c <__assert_fail@plt+0xf84>
   11f78:	ldr	r0, [r8, #8]
   11f7c:	add	r1, r8, #12
   11f80:	mov	r2, #8
   11f84:	mov	r4, ip
   11f88:	bl	15028 <__assert_fail@plt+0x4010>
   11f8c:	str	r0, [r8, #8]
   11f90:	mov	ip, r4
   11f94:	ldr	r1, [r8, #4]
   11f98:	b	11fa0 <__assert_fail@plt+0xf88>
   11f9c:	ldr	r0, [r8, #8]
   11fa0:	add	r2, r1, #1
   11fa4:	str	r2, [r8, #4]
   11fa8:	ldr	r2, [sp, #8]
   11fac:	str	r2, [r0, r1, lsl #3]!
   11fb0:	ldr	r1, [sp, #4]
   11fb4:	str	r1, [r0, #4]
   11fb8:	movw	r0, #29392	; 0x72d0
   11fbc:	movt	r0, #2
   11fc0:	ldr	r0, [r0]
   11fc4:	subs	r0, r0, r5
   11fc8:	rscs	r0, r6, #0
   11fcc:	bcs	1200c <__assert_fail@plt+0xff4>
   11fd0:	cmp	r6, #0
   11fd4:	movweq	r0, #29392	; 0x72d0
   11fd8:	movteq	r0, #2
   11fdc:	streq	r5, [r0]
   11fe0:	subeq	sp, fp, #28
   11fe4:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fe8:	movw	r1, #24096	; 0x5e20
   11fec:	mov	r0, #0
   11ff0:	mov	r2, #5
   11ff4:	movt	r1, #1
   11ff8:	bl	10e5c <dcgettext@plt>
   11ffc:	mov	r2, r0
   12000:	mov	r0, #1
   12004:	mov	r1, #0
   12008:	bl	10ec8 <error@plt>
   1200c:	tst	ip, #1
   12010:	subne	sp, fp, #28
   12014:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12018:	mov	r0, #1
   1201c:	bl	10f1c <exit@plt>
   12020:	movw	r1, #24237	; 0x5ead
   12024:	mov	r0, #0
   12028:	mov	r2, #5
   1202c:	movt	r1, #1
   12030:	bl	10e5c <dcgettext@plt>
   12034:	mov	r4, r0
   12038:	mov	r0, r5
   1203c:	bl	147a4 <__assert_fail@plt+0x378c>
   12040:	mov	r3, r0
   12044:	mov	r0, #0
   12048:	mov	r1, #0
   1204c:	mov	r2, r4
   12050:	bl	10ec8 <error@plt>
   12054:	mov	r0, #1
   12058:	bl	10f1c <exit@plt>
   1205c:	push	{r4, r5, r6, r7, fp, lr}
   12060:	add	fp, sp, #16
   12064:	movw	lr, #29024	; 0x7160
   12068:	movt	lr, #2
   1206c:	ldmib	lr, {r2, ip}
   12070:	cmp	r2, #0
   12074:	beq	120bc <__assert_fail@plt+0x10a4>
   12078:	mov	r3, #0
   1207c:	mov	r1, ip
   12080:	mov	r0, #0
   12084:	mov	r4, #0
   12088:	ldr	r6, [r1]
   1208c:	ldr	r5, [r1, #4]
   12090:	orrs	r7, r6, r5
   12094:	beq	12140 <__assert_fail@plt+0x1128>
   12098:	subs	r0, r0, r6
   1209c:	sbcs	r0, r4, r5
   120a0:	bcs	1214c <__assert_fail@plt+0x1134>
   120a4:	add	r3, r3, #1
   120a8:	add	r1, r1, #8
   120ac:	mov	r0, r6
   120b0:	mov	r4, r5
   120b4:	cmp	r3, r2
   120b8:	bcc	12088 <__assert_fail@plt+0x1070>
   120bc:	add	r5, lr, #28
   120c0:	ldr	r1, [lr, #24]
   120c4:	ldm	r5, {r0, r3, r5}
   120c8:	orrs	r4, r3, r5
   120cc:	orrsne	r6, r1, r0
   120d0:	bne	12170 <__assert_fail@plt+0x1158>
   120d4:	cmp	r2, #0
   120d8:	beq	12104 <__assert_fail@plt+0x10ec>
   120dc:	mov	r4, #0
   120e0:	cmp	r2, #1
   120e4:	bne	12134 <__assert_fail@plt+0x111c>
   120e8:	orr	r0, r0, r5
   120ec:	orr	r1, r1, r3
   120f0:	mov	r5, #0
   120f4:	orrs	r0, r1, r0
   120f8:	ldrdeq	r4, [ip]
   120fc:	strd	r4, [lr, #40]	; 0x28
   12100:	pop	{r4, r5, r6, r7, fp, pc}
   12104:	cmp	r4, #0
   12108:	orr	r0, r1, r0
   1210c:	mov	r5, #0
   12110:	movweq	r3, #8
   12114:	cmp	r0, #0
   12118:	movw	r0, #29392	; 0x72d0
   1211c:	movne	r3, r1
   12120:	movt	r0, #2
   12124:	mov	r4, r3
   12128:	str	r3, [r0]
   1212c:	strd	r4, [lr, #40]	; 0x28
   12130:	pop	{r4, r5, r6, r7, fp, pc}
   12134:	mov	r5, #0
   12138:	strd	r4, [lr, #40]	; 0x28
   1213c:	pop	{r4, r5, r6, r7, fp, pc}
   12140:	movw	r1, #24856	; 0x6118
   12144:	movt	r1, #1
   12148:	b	12154 <__assert_fail@plt+0x113c>
   1214c:	movw	r1, #24877	; 0x612d
   12150:	movt	r1, #1
   12154:	mov	r0, #0
   12158:	mov	r2, #5
   1215c:	bl	10e5c <dcgettext@plt>
   12160:	mov	r2, r0
   12164:	mov	r0, #1
   12168:	mov	r1, #0
   1216c:	bl	10ec8 <error@plt>
   12170:	movw	r1, #24905	; 0x6149
   12174:	movt	r1, #1
   12178:	b	12154 <__assert_fail@plt+0x113c>
   1217c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12180:	add	fp, sp, #24
   12184:	movw	ip, #29024	; 0x7160
   12188:	mov	r9, r0
   1218c:	mov	r0, #0
   12190:	mov	r8, r1
   12194:	strb	r0, [r3]
   12198:	movt	ip, #2
   1219c:	ldrd	r6, [ip, #40]	; 0x28
   121a0:	orrs	r0, r6, r7
   121a4:	bne	121f0 <__assert_fail@plt+0x11d8>
   121a8:	ldr	r1, [ip, #4]
   121ac:	ldr	r0, [r2]
   121b0:	cmp	r0, r1
   121b4:	bcs	121e4 <__assert_fail@plt+0x11cc>
   121b8:	ldr	r7, [ip, #8]
   121bc:	add	r4, r7, r0, lsl #3
   121c0:	ldrd	r6, [r4]
   121c4:	subs	r5, r9, r6
   121c8:	sbcs	r5, r8, r7
   121cc:	bcc	12214 <__assert_fail@plt+0x11fc>
   121d0:	add	r0, r0, #1
   121d4:	add	r4, r4, #8
   121d8:	cmp	r0, r1
   121dc:	str	r0, [r2]
   121e0:	bcc	121c0 <__assert_fail@plt+0x11a8>
   121e4:	ldrd	r6, [ip, #24]
   121e8:	orrs	r0, r6, r7
   121ec:	beq	12220 <__assert_fail@plt+0x1208>
   121f0:	mov	r0, r9
   121f4:	mov	r1, r8
   121f8:	mov	r2, r6
   121fc:	mov	r3, r7
   12200:	bl	15758 <__assert_fail@plt+0x4740>
   12204:	adds	r0, r6, r9
   12208:	adc	r1, r7, r8
   1220c:	subs	r6, r0, r2
   12210:	sbc	r7, r1, r3
   12214:	mov	r0, r6
   12218:	mov	r1, r7
   1221c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12220:	ldrd	r6, [ip, #32]
   12224:	orrs	r0, r6, r7
   12228:	beq	12244 <__assert_fail@plt+0x122c>
   1222c:	ldr	r0, [ip, #8]
   12230:	add	r0, r0, r1, lsl #3
   12234:	ldrd	r0, [r0, #-8]
   12238:	subs	r0, r9, r0
   1223c:	sbc	r1, r8, r1
   12240:	b	121f8 <__assert_fail@plt+0x11e0>
   12244:	mov	r0, #1
   12248:	mov	r6, #0
   1224c:	mov	r7, #0
   12250:	strb	r0, [r3]
   12254:	mov	r0, r6
   12258:	mov	r1, r7
   1225c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12260:	movw	r1, #29024	; 0x7160
   12264:	mov	r2, #0
   12268:	cmp	r0, #0
   1226c:	movt	r1, #2
   12270:	strb	r2, [r1]
   12274:	movw	r2, #28896	; 0x70e0
   12278:	movt	r2, #2
   1227c:	movne	r2, r0
   12280:	str	r2, [r1, #16]
   12284:	bx	lr
   12288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1228c:	add	fp, sp, #28
   12290:	sub	sp, sp, #4
   12294:	cmp	r0, #0
   12298:	beq	12334 <__assert_fail@plt+0x131c>
   1229c:	movw	r8, #29024	; 0x7160
   122a0:	movt	r8, #2
   122a4:	ldr	r7, [r8, #20]
   122a8:	cmp	r7, #0
   122ac:	beq	12450 <__assert_fail@plt+0x1438>
   122b0:	mov	r5, r0
   122b4:	bl	10f34 <__errno_location@plt>
   122b8:	ldr	r1, [r5]
   122bc:	mov	r6, r0
   122c0:	ldr	r0, [r0]
   122c4:	lsl	r1, r1, #26
   122c8:	and	r4, r0, r1, asr #31
   122cc:	movw	r1, #25038	; 0x61ce
   122d0:	mov	r0, r7
   122d4:	movt	r1, #1
   122d8:	bl	10df0 <strcmp@plt>
   122dc:	cmp	r0, #0
   122e0:	beq	1243c <__assert_fail@plt+0x1424>
   122e4:	mov	r0, r5
   122e8:	bl	12658 <__assert_fail@plt+0x1640>
   122ec:	cmp	r0, #0
   122f0:	ldrne	r4, [r6]
   122f4:	cmp	r4, #0
   122f8:	beq	12334 <__assert_fail@plt+0x131c>
   122fc:	ldr	r2, [r8, #20]
   12300:	mov	r0, #0
   12304:	mov	r1, #3
   12308:	bl	144f8 <__assert_fail@plt+0x34e0>
   1230c:	movw	r2, #24277	; 0x5ed5
   12310:	mov	r3, r0
   12314:	mov	r0, #0
   12318:	mov	r1, r4
   1231c:	movt	r2, #1
   12320:	bl	10ec8 <error@plt>
   12324:	movw	r0, #29020	; 0x715c
   12328:	mov	r1, #1
   1232c:	movt	r0, #2
   12330:	str	r1, [r0]
   12334:	movw	r5, #29024	; 0x7160
   12338:	movt	r5, #2
   1233c:	ldr	r0, [r5, #16]
   12340:	add	r1, r0, #4
   12344:	str	r1, [r5, #16]
   12348:	ldr	r7, [r0]
   1234c:	cmp	r7, #0
   12350:	beq	12410 <__assert_fail@plt+0x13f8>
   12354:	movw	sl, #24277	; 0x5ed5
   12358:	movw	r9, #29020	; 0x715c
   1235c:	mov	r8, #1
   12360:	movt	sl, #1
   12364:	movt	r9, #2
   12368:	movw	r1, #25038	; 0x61ce
   1236c:	mov	r0, r7
   12370:	movt	r1, #1
   12374:	bl	10df0 <strcmp@plt>
   12378:	cmp	r0, #0
   1237c:	beq	123a0 <__assert_fail@plt+0x1388>
   12380:	movw	r1, #23940	; 0x5d84
   12384:	mov	r0, r7
   12388:	movt	r1, #1
   1238c:	bl	10fdc <fopen64@plt>
   12390:	mov	r6, r0
   12394:	cmp	r6, #0
   12398:	beq	123b8 <__assert_fail@plt+0x13a0>
   1239c:	b	12420 <__assert_fail@plt+0x1408>
   123a0:	movw	r0, #29000	; 0x7148
   123a4:	strb	r8, [r5]
   123a8:	movt	r0, #2
   123ac:	ldr	r6, [r0]
   123b0:	cmp	r6, #0
   123b4:	bne	12420 <__assert_fail@plt+0x1408>
   123b8:	bl	10f34 <__errno_location@plt>
   123bc:	ldr	r4, [r0]
   123c0:	mov	r0, #0
   123c4:	mov	r1, #3
   123c8:	mov	r2, r7
   123cc:	mov	r6, #0
   123d0:	bl	144f8 <__assert_fail@plt+0x34e0>
   123d4:	mov	r3, r0
   123d8:	mov	r0, #0
   123dc:	mov	r1, r4
   123e0:	mov	r2, sl
   123e4:	bl	10ec8 <error@plt>
   123e8:	ldr	r0, [r5, #16]
   123ec:	str	r8, [r9]
   123f0:	add	r1, r0, #4
   123f4:	str	r1, [r5, #16]
   123f8:	ldr	r7, [r0]
   123fc:	cmp	r7, #0
   12400:	bne	12368 <__assert_fail@plt+0x1350>
   12404:	mov	r0, r6
   12408:	sub	sp, fp, #28
   1240c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12410:	mov	r6, #0
   12414:	mov	r0, r6
   12418:	sub	sp, fp, #28
   1241c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12420:	mov	r0, r6
   12424:	mov	r1, #2
   12428:	str	r7, [r5, #20]
   1242c:	bl	1261c <__assert_fail@plt+0x1604>
   12430:	mov	r0, r6
   12434:	sub	sp, fp, #28
   12438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1243c:	mov	r0, r5
   12440:	bl	10fd0 <clearerr_unlocked@plt>
   12444:	cmp	r4, #0
   12448:	bne	122fc <__assert_fail@plt+0x12e4>
   1244c:	b	12334 <__assert_fail@plt+0x131c>
   12450:	movw	r0, #24280	; 0x5ed8
   12454:	movw	r1, #24290	; 0x5ee2
   12458:	movw	r3, #24310	; 0x5ef6
   1245c:	mov	r2, #340	; 0x154
   12460:	movt	r0, #1
   12464:	movt	r1, #1
   12468:	movt	r3, #1
   1246c:	bl	11018 <__assert_fail@plt>
   12470:	push	{fp, lr}
   12474:	mov	fp, sp
   12478:	movw	r0, #29024	; 0x7160
   1247c:	movt	r0, #2
   12480:	ldrb	r0, [r0]
   12484:	cmp	r0, #1
   12488:	popne	{fp, pc}
   1248c:	movw	r0, #29000	; 0x7148
   12490:	movt	r0, #2
   12494:	ldr	r0, [r0]
   12498:	bl	12658 <__assert_fail@plt+0x1640>
   1249c:	cmp	r0, #0
   124a0:	bne	124a8 <__assert_fail@plt+0x1490>
   124a4:	pop	{fp, pc}
   124a8:	bl	10f34 <__errno_location@plt>
   124ac:	ldr	r1, [r0]
   124b0:	movw	r2, #25038	; 0x61ce
   124b4:	mov	r0, #1
   124b8:	movt	r2, #1
   124bc:	bl	10ec8 <error@plt>
   124c0:	push	{r4, sl, fp, lr}
   124c4:	add	fp, sp, #8
   124c8:	movw	r1, #24334	; 0x5f0e
   124cc:	mov	r0, #0
   124d0:	mov	r2, #5
   124d4:	movt	r1, #1
   124d8:	bl	10e5c <dcgettext@plt>
   124dc:	movw	r4, #29004	; 0x714c
   124e0:	movt	r4, #2
   124e4:	ldr	r1, [r4]
   124e8:	bl	10dd8 <fputs_unlocked@plt>
   124ec:	movw	r1, #24397	; 0x5f4d
   124f0:	mov	r0, #0
   124f4:	mov	r2, #5
   124f8:	movt	r1, #1
   124fc:	bl	10e5c <dcgettext@plt>
   12500:	ldr	r1, [r4]
   12504:	pop	{r4, sl, fp, lr}
   12508:	b	10dd8 <fputs_unlocked@plt>
   1250c:	movw	r1, #29072	; 0x7190
   12510:	movt	r1, #2
   12514:	str	r0, [r1, #4]
   12518:	bx	lr
   1251c:	movw	r1, #29072	; 0x7190
   12520:	movt	r1, #2
   12524:	strb	r0, [r1]
   12528:	bx	lr
   1252c:	push	{r4, r5, r6, sl, fp, lr}
   12530:	add	fp, sp, #16
   12534:	sub	sp, sp, #8
   12538:	movw	r0, #29004	; 0x714c
   1253c:	movt	r0, #2
   12540:	ldr	r0, [r0]
   12544:	bl	154f8 <__assert_fail@plt+0x44e0>
   12548:	cmp	r0, #0
   1254c:	beq	12574 <__assert_fail@plt+0x155c>
   12550:	movw	r5, #29072	; 0x7190
   12554:	movt	r5, #2
   12558:	ldrb	r0, [r5]
   1255c:	cmp	r0, #0
   12560:	beq	125a0 <__assert_fail@plt+0x1588>
   12564:	bl	10f34 <__errno_location@plt>
   12568:	ldr	r0, [r0]
   1256c:	cmp	r0, #32
   12570:	bne	125a0 <__assert_fail@plt+0x1588>
   12574:	movw	r0, #28992	; 0x7140
   12578:	movt	r0, #2
   1257c:	ldr	r0, [r0]
   12580:	bl	154f8 <__assert_fail@plt+0x44e0>
   12584:	cmp	r0, #0
   12588:	subeq	sp, fp, #16
   1258c:	popeq	{r4, r5, r6, sl, fp, pc}
   12590:	movw	r0, #28908	; 0x70ec
   12594:	movt	r0, #2
   12598:	ldr	r0, [r0]
   1259c:	bl	10e20 <_exit@plt>
   125a0:	movw	r1, #23930	; 0x5d7a
   125a4:	mov	r0, #0
   125a8:	mov	r2, #5
   125ac:	movt	r1, #1
   125b0:	bl	10e5c <dcgettext@plt>
   125b4:	ldr	r6, [r5, #4]
   125b8:	mov	r4, r0
   125bc:	bl	10f34 <__errno_location@plt>
   125c0:	ldr	r5, [r0]
   125c4:	cmp	r6, #0
   125c8:	bne	125e4 <__assert_fail@plt+0x15cc>
   125cc:	movw	r2, #24277	; 0x5ed5
   125d0:	mov	r0, #0
   125d4:	mov	r1, r5
   125d8:	mov	r3, r4
   125dc:	movt	r2, #1
   125e0:	b	12604 <__assert_fail@plt+0x15ec>
   125e4:	mov	r0, r6
   125e8:	bl	1441c <__assert_fail@plt+0x3404>
   125ec:	movw	r2, #24965	; 0x6185
   125f0:	mov	r3, r0
   125f4:	str	r4, [sp]
   125f8:	mov	r0, #0
   125fc:	mov	r1, r5
   12600:	movt	r2, #1
   12604:	bl	10ec8 <error@plt>
   12608:	movw	r0, #28908	; 0x70ec
   1260c:	movt	r0, #2
   12610:	ldr	r0, [r0]
   12614:	bl	10e20 <_exit@plt>
   12618:	b	10dfc <posix_fadvise64@plt>
   1261c:	cmp	r0, #0
   12620:	bxeq	lr
   12624:	push	{r4, sl, fp, lr}
   12628:	add	fp, sp, #8
   1262c:	sub	sp, sp, #16
   12630:	mov	r4, r1
   12634:	bl	10f64 <fileno@plt>
   12638:	mov	r1, #0
   1263c:	mov	r2, #0
   12640:	mov	r3, #0
   12644:	str	r1, [sp]
   12648:	stmib	sp, {r1, r4}
   1264c:	bl	10dfc <posix_fadvise64@plt>
   12650:	sub	sp, fp, #8
   12654:	pop	{r4, sl, fp, pc}
   12658:	push	{r4, r5, r6, sl, fp, lr}
   1265c:	add	fp, sp, #16
   12660:	sub	sp, sp, #8
   12664:	mov	r4, r0
   12668:	bl	10f64 <fileno@plt>
   1266c:	cmn	r0, #1
   12670:	ble	126e4 <__assert_fail@plt+0x16cc>
   12674:	mov	r0, r4
   12678:	bl	10eec <__freading@plt>
   1267c:	cmp	r0, #0
   12680:	beq	126ac <__assert_fail@plt+0x1694>
   12684:	mov	r0, r4
   12688:	bl	10f64 <fileno@plt>
   1268c:	mov	r1, #1
   12690:	mov	r2, #0
   12694:	mov	r3, #0
   12698:	str	r1, [sp]
   1269c:	bl	10e98 <lseek64@plt>
   126a0:	and	r0, r0, r1
   126a4:	cmn	r0, #1
   126a8:	beq	126e4 <__assert_fail@plt+0x16cc>
   126ac:	mov	r0, r4
   126b0:	bl	126f4 <__assert_fail@plt+0x16dc>
   126b4:	cmp	r0, #0
   126b8:	beq	126e4 <__assert_fail@plt+0x16cc>
   126bc:	bl	10f34 <__errno_location@plt>
   126c0:	ldr	r6, [r0]
   126c4:	mov	r5, r0
   126c8:	mov	r0, r4
   126cc:	bl	10f7c <fclose@plt>
   126d0:	cmp	r6, #0
   126d4:	strne	r6, [r5]
   126d8:	mvnne	r0, #0
   126dc:	sub	sp, fp, #16
   126e0:	pop	{r4, r5, r6, sl, fp, pc}
   126e4:	mov	r0, r4
   126e8:	sub	sp, fp, #16
   126ec:	pop	{r4, r5, r6, sl, fp, lr}
   126f0:	b	10f7c <fclose@plt>
   126f4:	push	{r4, sl, fp, lr}
   126f8:	add	fp, sp, #8
   126fc:	sub	sp, sp, #8
   12700:	mov	r4, r0
   12704:	cmp	r0, #0
   12708:	beq	12724 <__assert_fail@plt+0x170c>
   1270c:	mov	r0, r4
   12710:	bl	10eec <__freading@plt>
   12714:	cmp	r0, #0
   12718:	ldrbne	r0, [r4, #1]
   1271c:	tstne	r0, #1
   12720:	bne	12734 <__assert_fail@plt+0x171c>
   12724:	mov	r0, r4
   12728:	sub	sp, fp, #8
   1272c:	pop	{r4, sl, fp, lr}
   12730:	b	10e08 <fflush@plt>
   12734:	mov	r0, #1
   12738:	mov	r2, #0
   1273c:	mov	r3, #0
   12740:	str	r0, [sp]
   12744:	mov	r0, r4
   12748:	bl	12784 <__assert_fail@plt+0x176c>
   1274c:	mov	r0, r4
   12750:	sub	sp, fp, #8
   12754:	pop	{r4, sl, fp, lr}
   12758:	b	10e08 <fflush@plt>
   1275c:	push	{r4, r5, r6, sl, fp, lr}
   12760:	add	fp, sp, #16
   12764:	mov	r4, r0
   12768:	bl	10f34 <__errno_location@plt>
   1276c:	ldr	r6, [r0]
   12770:	mov	r5, r0
   12774:	mov	r0, r4
   12778:	bl	10e14 <free@plt>
   1277c:	str	r6, [r5]
   12780:	pop	{r4, r5, r6, sl, fp, pc}
   12784:	push	{r4, r5, r6, r7, fp, lr}
   12788:	add	fp, sp, #16
   1278c:	sub	sp, sp, #8
   12790:	mov	r4, r0
   12794:	ldr	r0, [r0, #4]
   12798:	mov	r5, r3
   1279c:	mov	r6, r2
   127a0:	ldr	r1, [r4, #8]
   127a4:	cmp	r1, r0
   127a8:	bne	127c4 <__assert_fail@plt+0x17ac>
   127ac:	ldrd	r0, [r4, #16]
   127b0:	cmp	r1, r0
   127b4:	bne	127c4 <__assert_fail@plt+0x17ac>
   127b8:	ldr	r0, [r4, #36]	; 0x24
   127bc:	cmp	r0, #0
   127c0:	beq	127dc <__assert_fail@plt+0x17c4>
   127c4:	mov	r0, r4
   127c8:	mov	r2, r6
   127cc:	mov	r3, r5
   127d0:	sub	sp, fp, #16
   127d4:	pop	{r4, r5, r6, r7, fp, lr}
   127d8:	b	10f88 <fseeko64@plt>
   127dc:	ldr	r7, [fp, #8]
   127e0:	mov	r0, r4
   127e4:	bl	10f64 <fileno@plt>
   127e8:	mov	r2, r6
   127ec:	mov	r3, r5
   127f0:	str	r7, [sp]
   127f4:	bl	10e98 <lseek64@plt>
   127f8:	and	r2, r0, r1
   127fc:	cmn	r2, #1
   12800:	mvneq	r0, #0
   12804:	subeq	sp, fp, #16
   12808:	popeq	{r4, r5, r6, r7, fp, pc}
   1280c:	strd	r0, [r4, #80]	; 0x50
   12810:	ldr	r0, [r4]
   12814:	bic	r0, r0, #16
   12818:	str	r0, [r4]
   1281c:	mov	r0, #0
   12820:	sub	sp, fp, #16
   12824:	pop	{r4, r5, r6, r7, fp, pc}
   12828:	push	{r4, r5, fp, lr}
   1282c:	add	fp, sp, #8
   12830:	cmp	r0, #0
   12834:	beq	128c8 <__assert_fail@plt+0x18b0>
   12838:	mov	r1, #47	; 0x2f
   1283c:	mov	r4, r0
   12840:	bl	10fb8 <strrchr@plt>
   12844:	cmp	r0, #0
   12848:	mov	r5, r4
   1284c:	addne	r5, r0, #1
   12850:	sub	r0, r5, r4
   12854:	cmp	r0, #7
   12858:	blt	128ac <__assert_fail@plt+0x1894>
   1285c:	movw	r1, #25028	; 0x61c4
   12860:	sub	r0, r5, #7
   12864:	mov	r2, #7
   12868:	movt	r1, #1
   1286c:	bl	10ff4 <strncmp@plt>
   12870:	cmp	r0, #0
   12874:	bne	128ac <__assert_fail@plt+0x1894>
   12878:	movw	r1, #25036	; 0x61cc
   1287c:	mov	r0, r5
   12880:	mov	r2, #3
   12884:	movt	r1, #1
   12888:	bl	10ff4 <strncmp@plt>
   1288c:	cmp	r0, #0
   12890:	beq	1289c <__assert_fail@plt+0x1884>
   12894:	mov	r4, r5
   12898:	b	128ac <__assert_fail@plt+0x1894>
   1289c:	movw	r0, #28976	; 0x7130
   128a0:	add	r4, r5, #3
   128a4:	movt	r0, #2
   128a8:	str	r4, [r0]
   128ac:	movw	r0, #28980	; 0x7134
   128b0:	movt	r0, #2
   128b4:	str	r4, [r0]
   128b8:	movw	r0, #29080	; 0x7198
   128bc:	movt	r0, #2
   128c0:	str	r4, [r0]
   128c4:	pop	{r4, r5, fp, pc}
   128c8:	movw	r0, #28992	; 0x7140
   128cc:	mov	r1, #55	; 0x37
   128d0:	mov	r2, #1
   128d4:	movt	r0, #2
   128d8:	ldr	r3, [r0]
   128dc:	movw	r0, #24972	; 0x618c
   128e0:	movt	r0, #1
   128e4:	bl	10e8c <fwrite@plt>
   128e8:	bl	11000 <abort@plt>
   128ec:	push	{r4, r5, r6, sl, fp, lr}
   128f0:	add	fp, sp, #16
   128f4:	mov	r4, r0
   128f8:	movw	r0, #29088	; 0x71a0
   128fc:	movt	r0, #2
   12900:	cmp	r4, #0
   12904:	moveq	r4, r0
   12908:	bl	10f34 <__errno_location@plt>
   1290c:	ldr	r6, [r0]
   12910:	mov	r5, r0
   12914:	mov	r0, r4
   12918:	mov	r1, #48	; 0x30
   1291c:	bl	152dc <__assert_fail@plt+0x42c4>
   12920:	str	r6, [r5]
   12924:	pop	{r4, r5, r6, sl, fp, pc}
   12928:	movw	r1, #29088	; 0x71a0
   1292c:	cmp	r0, #0
   12930:	movt	r1, #2
   12934:	movne	r1, r0
   12938:	ldr	r0, [r1]
   1293c:	bx	lr
   12940:	movw	r2, #29088	; 0x71a0
   12944:	cmp	r0, #0
   12948:	movt	r2, #2
   1294c:	movne	r2, r0
   12950:	str	r1, [r2]
   12954:	bx	lr
   12958:	movw	r3, #29088	; 0x71a0
   1295c:	cmp	r0, #0
   12960:	movt	r3, #2
   12964:	movne	r3, r0
   12968:	ubfx	r0, r1, #5, #3
   1296c:	and	r1, r1, #31
   12970:	add	r0, r3, r0, lsl #2
   12974:	ldr	r3, [r0, #8]
   12978:	eor	r2, r2, r3, lsr r1
   1297c:	and	r2, r2, #1
   12980:	eor	r2, r3, r2, lsl r1
   12984:	str	r2, [r0, #8]
   12988:	mov	r0, #1
   1298c:	and	r0, r0, r3, lsr r1
   12990:	bx	lr
   12994:	movw	r2, #29088	; 0x71a0
   12998:	cmp	r0, #0
   1299c:	movt	r2, #2
   129a0:	movne	r2, r0
   129a4:	ldr	r0, [r2, #4]
   129a8:	str	r1, [r2, #4]
   129ac:	bx	lr
   129b0:	movw	r3, #29088	; 0x71a0
   129b4:	cmp	r0, #0
   129b8:	movt	r3, #2
   129bc:	movne	r3, r0
   129c0:	cmp	r1, #0
   129c4:	mov	r0, #10
   129c8:	cmpne	r2, #0
   129cc:	str	r0, [r3]
   129d0:	bne	129e0 <__assert_fail@plt+0x19c8>
   129d4:	push	{fp, lr}
   129d8:	mov	fp, sp
   129dc:	bl	11000 <abort@plt>
   129e0:	str	r1, [r3, #40]	; 0x28
   129e4:	str	r2, [r3, #44]	; 0x2c
   129e8:	bx	lr
   129ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129f0:	add	fp, sp, #28
   129f4:	sub	sp, sp, #20
   129f8:	mov	r7, r0
   129fc:	ldr	r0, [fp, #8]
   12a00:	movw	r5, #29088	; 0x71a0
   12a04:	mov	r8, r3
   12a08:	mov	r9, r2
   12a0c:	mov	sl, r1
   12a10:	movt	r5, #2
   12a14:	cmp	r0, #0
   12a18:	movne	r5, r0
   12a1c:	bl	10f34 <__errno_location@plt>
   12a20:	mov	r4, r0
   12a24:	ldm	r5, {r0, r1}
   12a28:	ldr	r2, [r5, #40]	; 0x28
   12a2c:	ldr	r3, [r5, #44]	; 0x2c
   12a30:	add	r5, r5, #8
   12a34:	ldr	r6, [r4]
   12a38:	stm	sp, {r0, r1, r5}
   12a3c:	str	r2, [sp, #12]
   12a40:	str	r3, [sp, #16]
   12a44:	mov	r0, r7
   12a48:	mov	r1, sl
   12a4c:	mov	r2, r9
   12a50:	mov	r3, r8
   12a54:	bl	12a64 <__assert_fail@plt+0x1a4c>
   12a58:	str	r6, [r4]
   12a5c:	sub	sp, fp, #28
   12a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a68:	add	fp, sp, #28
   12a6c:	sub	sp, sp, #156	; 0x9c
   12a70:	str	r0, [sp, #76]	; 0x4c
   12a74:	ldr	r0, [fp, #12]
   12a78:	mov	r6, r1
   12a7c:	str	r3, [sp, #84]	; 0x54
   12a80:	str	r2, [fp, #-84]	; 0xffffffac
   12a84:	and	r1, r0, #4
   12a88:	str	r1, [sp, #24]
   12a8c:	and	r1, r0, #1
   12a90:	str	r1, [sp, #28]
   12a94:	ubfx	r8, r0, #1, #1
   12a98:	bl	10ea4 <__ctype_get_mb_cur_max@plt>
   12a9c:	str	r0, [sp, #32]
   12aa0:	ldr	r0, [fp, #24]
   12aa4:	ldr	r7, [fp, #8]
   12aa8:	mov	r1, #0
   12aac:	mov	r2, #0
   12ab0:	mov	r4, #1
   12ab4:	str	r1, [sp, #52]	; 0x34
   12ab8:	str	r0, [sp, #72]	; 0x48
   12abc:	ldr	r0, [fp, #20]
   12ac0:	str	r0, [sp, #68]	; 0x44
   12ac4:	mov	r0, #0
   12ac8:	str	r0, [sp, #48]	; 0x30
   12acc:	mov	r0, #0
   12ad0:	str	r0, [sp, #92]	; 0x5c
   12ad4:	mov	r0, #0
   12ad8:	str	r0, [fp, #-76]	; 0xffffffb4
   12adc:	mov	r0, #0
   12ae0:	cmp	r7, #10
   12ae4:	bhi	13dcc <__assert_fail@plt+0x2db4>
   12ae8:	add	r1, pc, #28
   12aec:	mov	sl, r6
   12af0:	ldr	r6, [sp, #76]	; 0x4c
   12af4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12af8:	ldr	lr, [sp, #84]	; 0x54
   12afc:	mov	r9, #0
   12b00:	mov	r3, #1
   12b04:	mov	r5, #0
   12b08:	ldr	pc, [r1, r7, lsl #2]
   12b0c:	ldrdeq	r2, [r1], -ip
   12b10:	andeq	r2, r1, r8, lsl ip
   12b14:	andeq	r2, r1, ip, ror #23
   12b18:	ldrdeq	r2, [r1], -r4
   12b1c:	andeq	r2, r1, ip, lsl #24
   12b20:	andeq	r2, r1, r0, asr #24
   12b24:	strdeq	r2, [r1], -ip
   12b28:	andeq	r2, r1, ip, asr #28
   12b2c:	andeq	r2, r1, r8, lsr fp
   12b30:	andeq	r2, r1, r8, lsr fp
   12b34:	andeq	r2, r1, r0, ror #27
   12b38:	mov	r9, r4
   12b3c:	movw	r4, #25118	; 0x621e
   12b40:	mov	r5, r8
   12b44:	mov	r8, r2
   12b48:	mov	r0, #0
   12b4c:	mov	r2, #5
   12b50:	movt	r4, #1
   12b54:	mov	r1, r4
   12b58:	bl	10e5c <dcgettext@plt>
   12b5c:	cmp	r0, r4
   12b60:	str	r0, [sp, #68]	; 0x44
   12b64:	bne	12cf4 <__assert_fail@plt+0x1cdc>
   12b68:	bl	1557c <__assert_fail@plt+0x4564>
   12b6c:	ldrb	r1, [r0]
   12b70:	and	r1, r1, #223	; 0xdf
   12b74:	cmp	r1, #71	; 0x47
   12b78:	beq	12cc0 <__assert_fail@plt+0x1ca8>
   12b7c:	cmp	r1, #85	; 0x55
   12b80:	bne	12cd8 <__assert_fail@plt+0x1cc0>
   12b84:	ldrb	r1, [r0, #1]
   12b88:	and	r1, r1, #223	; 0xdf
   12b8c:	cmp	r1, #84	; 0x54
   12b90:	bne	12cd8 <__assert_fail@plt+0x1cc0>
   12b94:	ldrb	r1, [r0, #2]
   12b98:	and	r1, r1, #223	; 0xdf
   12b9c:	cmp	r1, #70	; 0x46
   12ba0:	bne	12cd8 <__assert_fail@plt+0x1cc0>
   12ba4:	ldrb	r1, [r0, #3]
   12ba8:	cmp	r1, #45	; 0x2d
   12bac:	ldrbeq	r1, [r0, #4]
   12bb0:	cmpeq	r1, #56	; 0x38
   12bb4:	bne	12cd8 <__assert_fail@plt+0x1cc0>
   12bb8:	ldrb	r0, [r0, #5]
   12bbc:	cmp	r0, #0
   12bc0:	movw	r0, #25120	; 0x6220
   12bc4:	movt	r0, #1
   12bc8:	str	r0, [sp, #68]	; 0x44
   12bcc:	bne	12cd8 <__assert_fail@plt+0x1cc0>
   12bd0:	b	12cf4 <__assert_fail@plt+0x1cdc>
   12bd4:	mov	r0, #1
   12bd8:	b	12c18 <__assert_fail@plt+0x1c00>
   12bdc:	mov	r7, #0
   12be0:	mov	r9, #0
   12be4:	mov	r3, r0
   12be8:	b	12cb8 <__assert_fail@plt+0x1ca0>
   12bec:	tst	r8, #1
   12bf0:	bne	12c18 <__assert_fail@plt+0x1c00>
   12bf4:	mov	r3, r0
   12bf8:	b	12c70 <__assert_fail@plt+0x1c58>
   12bfc:	mov	r0, #1
   12c00:	mov	r9, #0
   12c04:	mov	r7, #5
   12c08:	b	12c54 <__assert_fail@plt+0x1c3c>
   12c0c:	mov	r3, #1
   12c10:	tst	r8, #1
   12c14:	beq	12c70 <__assert_fail@plt+0x1c58>
   12c18:	mov	r1, #1
   12c1c:	mov	r9, #0
   12c20:	mov	r7, #2
   12c24:	mov	r3, r0
   12c28:	mov	r5, #1
   12c2c:	str	r1, [fp, #-76]	; 0xffffffb4
   12c30:	movw	r1, #24948	; 0x6174
   12c34:	movt	r1, #1
   12c38:	str	r1, [sp, #92]	; 0x5c
   12c3c:	b	12e4c <__assert_fail@plt+0x1e34>
   12c40:	mov	r7, #5
   12c44:	tst	r8, #1
   12c48:	beq	12c90 <__assert_fail@plt+0x1c78>
   12c4c:	mov	r0, #1
   12c50:	mov	r9, #0
   12c54:	str	r0, [fp, #-76]	; 0xffffffb4
   12c58:	movw	r0, #25116	; 0x621c
   12c5c:	mov	r3, #1
   12c60:	mov	r5, #1
   12c64:	movt	r0, #1
   12c68:	str	r0, [sp, #92]	; 0x5c
   12c6c:	b	12e4c <__assert_fail@plt+0x1e34>
   12c70:	cmp	sl, #0
   12c74:	mov	r9, #1
   12c78:	mov	r7, #2
   12c7c:	movne	r0, #39	; 0x27
   12c80:	strbne	r0, [r6]
   12c84:	movw	r0, #24948	; 0x6174
   12c88:	movt	r0, #1
   12c8c:	b	12cac <__assert_fail@plt+0x1c94>
   12c90:	cmp	sl, #0
   12c94:	mov	r9, #1
   12c98:	mov	r3, #1
   12c9c:	movne	r0, #34	; 0x22
   12ca0:	strbne	r0, [r6]
   12ca4:	movw	r0, #25116	; 0x621c
   12ca8:	movt	r0, #1
   12cac:	str	r0, [sp, #92]	; 0x5c
   12cb0:	mov	r0, #1
   12cb4:	str	r0, [fp, #-76]	; 0xffffffb4
   12cb8:	mov	r5, #0
   12cbc:	b	12e4c <__assert_fail@plt+0x1e34>
   12cc0:	ldrb	r1, [r0, #1]
   12cc4:	and	r1, r1, #223	; 0xdf
   12cc8:	cmp	r1, #66	; 0x42
   12ccc:	ldrbeq	r1, [r0, #2]
   12cd0:	cmpeq	r1, #49	; 0x31
   12cd4:	beq	13bf4 <__assert_fail@plt+0x2bdc>
   12cd8:	movw	r0, #24948	; 0x6174
   12cdc:	movw	r1, #25116	; 0x621c
   12ce0:	cmp	r7, #9
   12ce4:	movt	r0, #1
   12ce8:	movt	r1, #1
   12cec:	moveq	r0, r1
   12cf0:	str	r0, [sp, #68]	; 0x44
   12cf4:	movw	r4, #24948	; 0x6174
   12cf8:	mov	r0, #0
   12cfc:	mov	r2, #5
   12d00:	movt	r4, #1
   12d04:	mov	r1, r4
   12d08:	bl	10e5c <dcgettext@plt>
   12d0c:	cmp	r0, r4
   12d10:	str	r0, [sp, #72]	; 0x48
   12d14:	beq	12d24 <__assert_fail@plt+0x1d0c>
   12d18:	mov	r4, r9
   12d1c:	mov	r2, r8
   12d20:	b	12ddc <__assert_fail@plt+0x1dc4>
   12d24:	bl	1557c <__assert_fail@plt+0x4564>
   12d28:	ldrb	r1, [r0]
   12d2c:	mov	r4, r9
   12d30:	and	r1, r1, #223	; 0xdf
   12d34:	cmp	r1, #71	; 0x47
   12d38:	beq	12d94 <__assert_fail@plt+0x1d7c>
   12d3c:	cmp	r1, #85	; 0x55
   12d40:	mov	r2, r8
   12d44:	bne	12dbc <__assert_fail@plt+0x1da4>
   12d48:	ldrb	r1, [r0, #1]
   12d4c:	and	r1, r1, #223	; 0xdf
   12d50:	cmp	r1, #84	; 0x54
   12d54:	bne	12dbc <__assert_fail@plt+0x1da4>
   12d58:	ldrb	r1, [r0, #2]
   12d5c:	and	r1, r1, #223	; 0xdf
   12d60:	cmp	r1, #70	; 0x46
   12d64:	ldrbeq	r1, [r0, #3]
   12d68:	cmpeq	r1, #45	; 0x2d
   12d6c:	bne	12dbc <__assert_fail@plt+0x1da4>
   12d70:	ldrb	r1, [r0, #4]
   12d74:	cmp	r1, #56	; 0x38
   12d78:	ldrbeq	r0, [r0, #5]
   12d7c:	cmpeq	r0, #0
   12d80:	bne	12dbc <__assert_fail@plt+0x1da4>
   12d84:	movw	r0, #25124	; 0x6224
   12d88:	movt	r0, #1
   12d8c:	str	r0, [sp, #72]	; 0x48
   12d90:	b	12ddc <__assert_fail@plt+0x1dc4>
   12d94:	ldrb	r1, [r0, #1]
   12d98:	mov	r2, r8
   12d9c:	and	r1, r1, #223	; 0xdf
   12da0:	cmp	r1, #66	; 0x42
   12da4:	bne	12dbc <__assert_fail@plt+0x1da4>
   12da8:	ldrb	r1, [r0, #2]
   12dac:	cmp	r1, #49	; 0x31
   12db0:	ldrbeq	r1, [r0, #3]
   12db4:	cmpeq	r1, #56	; 0x38
   12db8:	beq	13c38 <__assert_fail@plt+0x2c20>
   12dbc:	movw	r0, #24948	; 0x6174
   12dc0:	cmp	r7, #9
   12dc4:	movt	r0, #1
   12dc8:	mov	r1, r0
   12dcc:	movw	r0, #25116	; 0x621c
   12dd0:	movt	r0, #1
   12dd4:	moveq	r1, r0
   12dd8:	str	r1, [sp, #72]	; 0x48
   12ddc:	mov	r8, r5
   12de0:	mov	r9, #0
   12de4:	tst	r8, #1
   12de8:	mov	r5, r8
   12dec:	str	r2, [fp, #-48]	; 0xffffffd0
   12df0:	bne	12e28 <__assert_fail@plt+0x1e10>
   12df4:	ldr	r0, [sp, #68]	; 0x44
   12df8:	ldrb	r0, [r0]
   12dfc:	cmp	r0, #0
   12e00:	beq	12e28 <__assert_fail@plt+0x1e10>
   12e04:	ldr	r1, [sp, #68]	; 0x44
   12e08:	mov	r9, #0
   12e0c:	add	r1, r1, #1
   12e10:	cmp	r9, sl
   12e14:	strbcc	r0, [r6, r9]
   12e18:	ldrb	r0, [r1, r9]
   12e1c:	add	r9, r9, #1
   12e20:	cmp	r0, #0
   12e24:	bne	12e10 <__assert_fail@plt+0x1df8>
   12e28:	ldr	r8, [sp, #72]	; 0x48
   12e2c:	mov	r0, r8
   12e30:	bl	10f28 <strlen@plt>
   12e34:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e38:	ldr	lr, [sp, #84]	; 0x54
   12e3c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12e40:	str	r0, [fp, #-76]	; 0xffffffb4
   12e44:	str	r8, [sp, #92]	; 0x5c
   12e48:	mov	r3, #1
   12e4c:	ldr	r0, [fp, #16]
   12e50:	str	r7, [fp, #-64]	; 0xffffffc0
   12e54:	str	r5, [fp, #-72]	; 0xffffffb8
   12e58:	str	r3, [sp, #80]	; 0x50
   12e5c:	cmp	r0, #0
   12e60:	movwne	r0, #1
   12e64:	and	r0, r0, r5
   12e68:	str	r0, [fp, #-88]	; 0xffffffa8
   12e6c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e70:	cmp	r0, #0
   12e74:	movwne	r0, #1
   12e78:	subs	r7, r7, #2
   12e7c:	and	r1, r0, r5
   12e80:	str	r7, [fp, #-80]	; 0xffffffb0
   12e84:	and	r1, r3, r1
   12e88:	str	r1, [sp, #40]	; 0x28
   12e8c:	clz	r1, r7
   12e90:	lsr	r1, r1, #5
   12e94:	and	r1, r1, r5
   12e98:	eor	r5, r5, #1
   12e9c:	str	r1, [sp, #36]	; 0x24
   12ea0:	mov	r1, r7
   12ea4:	str	r5, [sp, #88]	; 0x58
   12ea8:	mov	r7, #0
   12eac:	movwne	r1, #1
   12eb0:	orr	r5, r1, r5
   12eb4:	and	r1, r1, r3
   12eb8:	and	r0, r0, r1
   12ebc:	str	r5, [sp, #60]	; 0x3c
   12ec0:	str	r1, [fp, #-68]	; 0xffffffbc
   12ec4:	str	r0, [fp, #-60]	; 0xffffffc4
   12ec8:	eor	r0, r3, #1
   12ecc:	str	r0, [sp, #44]	; 0x2c
   12ed0:	cmn	lr, #1
   12ed4:	beq	12ee4 <__assert_fail@plt+0x1ecc>
   12ed8:	cmp	r7, lr
   12edc:	bne	12ef0 <__assert_fail@plt+0x1ed8>
   12ee0:	b	13b68 <__assert_fail@plt+0x2b50>
   12ee4:	ldrb	r0, [ip, r7]
   12ee8:	cmp	r0, #0
   12eec:	beq	13b70 <__assert_fail@plt+0x2b58>
   12ef0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12ef4:	mov	r8, #0
   12ef8:	str	r4, [fp, #-52]	; 0xffffffcc
   12efc:	str	r2, [fp, #-48]	; 0xffffffd0
   12f00:	cmp	r0, #0
   12f04:	beq	12f38 <__assert_fail@plt+0x1f20>
   12f08:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12f0c:	add	r4, r7, r0
   12f10:	cmp	r0, #2
   12f14:	bcc	12f30 <__assert_fail@plt+0x1f18>
   12f18:	cmn	lr, #1
   12f1c:	bne	12f30 <__assert_fail@plt+0x1f18>
   12f20:	mov	r0, ip
   12f24:	bl	10f28 <strlen@plt>
   12f28:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f2c:	mov	lr, r0
   12f30:	cmp	r4, lr
   12f34:	bls	12f50 <__assert_fail@plt+0x1f38>
   12f38:	mov	r0, #0
   12f3c:	str	r0, [fp, #-56]	; 0xffffffc8
   12f40:	ldrb	r5, [ip, r7]
   12f44:	cmp	r5, #126	; 0x7e
   12f48:	bls	12fa0 <__assert_fail@plt+0x1f88>
   12f4c:	b	133a8 <__assert_fail@plt+0x2390>
   12f50:	ldr	r1, [sp, #92]	; 0x5c
   12f54:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12f58:	add	r0, ip, r7
   12f5c:	mov	r4, lr
   12f60:	bl	10e50 <memcmp@plt>
   12f64:	ldr	r2, [sp, #88]	; 0x58
   12f68:	cmp	r0, #0
   12f6c:	mov	r1, r0
   12f70:	movwne	r1, #1
   12f74:	orr	r1, r1, r2
   12f78:	tst	r1, #1
   12f7c:	beq	13c7c <__assert_fail@plt+0x2c64>
   12f80:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f84:	clz	r0, r0
   12f88:	mov	lr, r4
   12f8c:	lsr	r0, r0, #5
   12f90:	str	r0, [fp, #-56]	; 0xffffffc8
   12f94:	ldrb	r5, [ip, r7]
   12f98:	cmp	r5, #126	; 0x7e
   12f9c:	bhi	133a8 <__assert_fail@plt+0x2390>
   12fa0:	add	r3, pc, #16
   12fa4:	mov	r4, #1
   12fa8:	mov	r2, #110	; 0x6e
   12fac:	mov	r0, #97	; 0x61
   12fb0:	mov	r1, #0
   12fb4:	ldr	pc, [r3, r5, lsl #2]
   12fb8:	andeq	r3, r1, r8, lsl #5
   12fbc:	andeq	r3, r1, r8, lsr #7
   12fc0:	andeq	r3, r1, r8, lsr #7
   12fc4:	andeq	r3, r1, r8, lsr #7
   12fc8:	andeq	r3, r1, r8, lsr #7
   12fcc:	andeq	r3, r1, r8, lsr #7
   12fd0:	andeq	r3, r1, r8, lsr #7
   12fd4:	andeq	r3, r1, r4, lsl #9
   12fd8:	andeq	r3, r1, r8, ror #4
   12fdc:	andeq	r3, r1, r0, asr r2
   12fe0:	andeq	r3, r1, r4, ror r2
   12fe4:	andeq	r3, r1, r4, lsl #6
   12fe8:	andeq	r3, r1, r8, asr #4
   12fec:	andeq	r3, r1, r0, ror r2
   12ff0:	andeq	r3, r1, r8, lsr #7
   12ff4:	andeq	r3, r1, r8, lsr #7
   12ff8:	andeq	r3, r1, r8, lsr #7
   12ffc:	andeq	r3, r1, r8, lsr #7
   13000:	andeq	r3, r1, r8, lsr #7
   13004:	andeq	r3, r1, r8, lsr #7
   13008:	andeq	r3, r1, r8, lsr #7
   1300c:	andeq	r3, r1, r8, lsr #7
   13010:	andeq	r3, r1, r8, lsr #7
   13014:	andeq	r3, r1, r8, lsr #7
   13018:	andeq	r3, r1, r8, lsr #7
   1301c:	andeq	r3, r1, r8, lsr #7
   13020:	andeq	r3, r1, r8, lsr #7
   13024:	andeq	r3, r1, r8, lsr #7
   13028:	andeq	r3, r1, r8, lsr #7
   1302c:	andeq	r3, r1, r8, lsr #7
   13030:	andeq	r3, r1, r8, lsr #7
   13034:	andeq	r3, r1, r8, lsr #7
   13038:	andeq	r3, r1, r0, lsl #8
   1303c:	andeq	r3, r1, r4, lsl #8
   13040:	andeq	r3, r1, r4, lsl #8
   13044:	ldrdeq	r3, [r1], -r4
   13048:	andeq	r3, r1, r4, lsl #8
   1304c:			; <UNDEFINED> instruction: 0x000131b4
   13050:	andeq	r3, r1, r4, lsl #8
   13054:	andeq	r3, r1, ip, lsl #6
   13058:	andeq	r3, r1, r4, lsl #8
   1305c:	andeq	r3, r1, r4, lsl #8
   13060:	andeq	r3, r1, r4, lsl #8
   13064:			; <UNDEFINED> instruction: 0x000131b4
   13068:			; <UNDEFINED> instruction: 0x000131b4
   1306c:			; <UNDEFINED> instruction: 0x000131b4
   13070:			; <UNDEFINED> instruction: 0x000131b4
   13074:			; <UNDEFINED> instruction: 0x000131b4
   13078:			; <UNDEFINED> instruction: 0x000131b4
   1307c:			; <UNDEFINED> instruction: 0x000131b4
   13080:			; <UNDEFINED> instruction: 0x000131b4
   13084:			; <UNDEFINED> instruction: 0x000131b4
   13088:			; <UNDEFINED> instruction: 0x000131b4
   1308c:			; <UNDEFINED> instruction: 0x000131b4
   13090:			; <UNDEFINED> instruction: 0x000131b4
   13094:			; <UNDEFINED> instruction: 0x000131b4
   13098:			; <UNDEFINED> instruction: 0x000131b4
   1309c:			; <UNDEFINED> instruction: 0x000131b4
   130a0:			; <UNDEFINED> instruction: 0x000131b4
   130a4:	andeq	r3, r1, r4, lsl #8
   130a8:	andeq	r3, r1, r4, lsl #8
   130ac:	andeq	r3, r1, r4, lsl #8
   130b0:	andeq	r3, r1, r4, lsl #8
   130b4:	andeq	r3, r1, r8, asr #5
   130b8:	andeq	r3, r1, r8, lsr #7
   130bc:			; <UNDEFINED> instruction: 0x000131b4
   130c0:			; <UNDEFINED> instruction: 0x000131b4
   130c4:			; <UNDEFINED> instruction: 0x000131b4
   130c8:			; <UNDEFINED> instruction: 0x000131b4
   130cc:			; <UNDEFINED> instruction: 0x000131b4
   130d0:			; <UNDEFINED> instruction: 0x000131b4
   130d4:			; <UNDEFINED> instruction: 0x000131b4
   130d8:			; <UNDEFINED> instruction: 0x000131b4
   130dc:			; <UNDEFINED> instruction: 0x000131b4
   130e0:			; <UNDEFINED> instruction: 0x000131b4
   130e4:			; <UNDEFINED> instruction: 0x000131b4
   130e8:			; <UNDEFINED> instruction: 0x000131b4
   130ec:			; <UNDEFINED> instruction: 0x000131b4
   130f0:			; <UNDEFINED> instruction: 0x000131b4
   130f4:			; <UNDEFINED> instruction: 0x000131b4
   130f8:			; <UNDEFINED> instruction: 0x000131b4
   130fc:			; <UNDEFINED> instruction: 0x000131b4
   13100:			; <UNDEFINED> instruction: 0x000131b4
   13104:			; <UNDEFINED> instruction: 0x000131b4
   13108:			; <UNDEFINED> instruction: 0x000131b4
   1310c:			; <UNDEFINED> instruction: 0x000131b4
   13110:			; <UNDEFINED> instruction: 0x000131b4
   13114:			; <UNDEFINED> instruction: 0x000131b4
   13118:			; <UNDEFINED> instruction: 0x000131b4
   1311c:			; <UNDEFINED> instruction: 0x000131b4
   13120:			; <UNDEFINED> instruction: 0x000131b4
   13124:	andeq	r3, r1, r4, lsl #8
   13128:	andeq	r3, r1, r4, lsl r2
   1312c:			; <UNDEFINED> instruction: 0x000131b4
   13130:	andeq	r3, r1, r4, lsl #8
   13134:			; <UNDEFINED> instruction: 0x000131b4
   13138:	andeq	r3, r1, r4, lsl #8
   1313c:			; <UNDEFINED> instruction: 0x000131b4
   13140:			; <UNDEFINED> instruction: 0x000131b4
   13144:			; <UNDEFINED> instruction: 0x000131b4
   13148:			; <UNDEFINED> instruction: 0x000131b4
   1314c:			; <UNDEFINED> instruction: 0x000131b4
   13150:			; <UNDEFINED> instruction: 0x000131b4
   13154:			; <UNDEFINED> instruction: 0x000131b4
   13158:			; <UNDEFINED> instruction: 0x000131b4
   1315c:			; <UNDEFINED> instruction: 0x000131b4
   13160:			; <UNDEFINED> instruction: 0x000131b4
   13164:			; <UNDEFINED> instruction: 0x000131b4
   13168:			; <UNDEFINED> instruction: 0x000131b4
   1316c:			; <UNDEFINED> instruction: 0x000131b4
   13170:			; <UNDEFINED> instruction: 0x000131b4
   13174:			; <UNDEFINED> instruction: 0x000131b4
   13178:			; <UNDEFINED> instruction: 0x000131b4
   1317c:			; <UNDEFINED> instruction: 0x000131b4
   13180:			; <UNDEFINED> instruction: 0x000131b4
   13184:			; <UNDEFINED> instruction: 0x000131b4
   13188:			; <UNDEFINED> instruction: 0x000131b4
   1318c:			; <UNDEFINED> instruction: 0x000131b4
   13190:			; <UNDEFINED> instruction: 0x000131b4
   13194:			; <UNDEFINED> instruction: 0x000131b4
   13198:			; <UNDEFINED> instruction: 0x000131b4
   1319c:			; <UNDEFINED> instruction: 0x000131b4
   131a0:			; <UNDEFINED> instruction: 0x000131b4
   131a4:	strdeq	r3, [r1], -r4
   131a8:	andeq	r3, r1, r4, lsl #8
   131ac:	strdeq	r3, [r1], -r4
   131b0:	ldrdeq	r3, [r1], -r4
   131b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   131b8:	cmp	r0, #0
   131bc:	beq	13498 <__assert_fail@plt+0x2480>
   131c0:	ldr	r0, [fp, #16]
   131c4:	cmp	r0, #0
   131c8:	mov	r0, r5
   131cc:	bne	134a8 <__assert_fail@plt+0x2490>
   131d0:	b	134c8 <__assert_fail@plt+0x24b0>
   131d4:	mov	r4, #0
   131d8:	cmp	r7, #0
   131dc:	beq	13400 <__assert_fail@plt+0x23e8>
   131e0:	mov	r8, #0
   131e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   131e8:	cmp	r0, #0
   131ec:	bne	131c0 <__assert_fail@plt+0x21a8>
   131f0:	b	13498 <__assert_fail@plt+0x2480>
   131f4:	mov	r4, #0
   131f8:	cmn	lr, #1
   131fc:	beq	133d8 <__assert_fail@plt+0x23c0>
   13200:	cmp	r7, #0
   13204:	bne	131e0 <__assert_fail@plt+0x21c8>
   13208:	cmp	lr, #1
   1320c:	beq	13400 <__assert_fail@plt+0x23e8>
   13210:	b	131e0 <__assert_fail@plt+0x21c8>
   13214:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13218:	cmp	r0, #2
   1321c:	bne	13430 <__assert_fail@plt+0x2418>
   13220:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13224:	tst	r0, #1
   13228:	bne	13c90 <__assert_fail@plt+0x2c78>
   1322c:	mov	r8, #0
   13230:	mov	r0, #92	; 0x5c
   13234:	mov	r4, #0
   13238:	cmp	r8, #0
   1323c:	beq	13450 <__assert_fail@plt+0x2438>
   13240:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13244:	b	13544 <__assert_fail@plt+0x252c>
   13248:	mov	r0, #102	; 0x66
   1324c:	b	13484 <__assert_fail@plt+0x246c>
   13250:	mov	r2, #116	; 0x74
   13254:	ldr	r0, [sp, #60]	; 0x3c
   13258:	tst	r0, #1
   1325c:	mov	r0, r2
   13260:	bne	13484 <__assert_fail@plt+0x246c>
   13264:	b	13c90 <__assert_fail@plt+0x2c78>
   13268:	mov	r0, #98	; 0x62
   1326c:	b	13484 <__assert_fail@plt+0x246c>
   13270:	mov	r2, #114	; 0x72
   13274:	ldr	r0, [sp, #60]	; 0x3c
   13278:	tst	r0, #1
   1327c:	mov	r0, r2
   13280:	bne	13484 <__assert_fail@plt+0x246c>
   13284:	b	13c90 <__assert_fail@plt+0x2c78>
   13288:	ldr	r0, [sp, #80]	; 0x50
   1328c:	tst	r0, #1
   13290:	beq	1356c <__assert_fail@plt+0x2554>
   13294:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13298:	tst	r0, #1
   1329c:	bne	13db8 <__assert_fail@plt+0x2da0>
   132a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   132a4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   132a8:	cmp	r0, #2
   132ac:	ldr	r0, [fp, #-80]	; 0xffffffb0
   132b0:	movwne	r0, #1
   132b4:	orr	r0, r0, r2
   132b8:	tst	r0, #1
   132bc:	beq	13864 <__assert_fail@plt+0x284c>
   132c0:	mov	r0, r9
   132c4:	b	13898 <__assert_fail@plt+0x2880>
   132c8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   132cc:	mov	r8, #0
   132d0:	mov	r5, #63	; 0x3f
   132d4:	cmp	r0, #5
   132d8:	beq	13720 <__assert_fail@plt+0x2708>
   132dc:	cmp	r0, #2
   132e0:	bne	137d0 <__assert_fail@plt+0x27b8>
   132e4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132e8:	tst	r0, #1
   132ec:	bne	13c90 <__assert_fail@plt+0x2c78>
   132f0:	mov	r4, #0
   132f4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   132f8:	cmp	r0, #0
   132fc:	bne	131c0 <__assert_fail@plt+0x21a8>
   13300:	b	13498 <__assert_fail@plt+0x2480>
   13304:	mov	r0, #118	; 0x76
   13308:	b	13484 <__assert_fail@plt+0x246c>
   1330c:	mov	r0, #1
   13310:	mov	r5, #39	; 0x27
   13314:	str	r0, [sp, #52]	; 0x34
   13318:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1331c:	cmp	r0, #2
   13320:	bne	13394 <__assert_fail@plt+0x237c>
   13324:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13328:	tst	r0, #1
   1332c:	bne	13c90 <__assert_fail@plt+0x2c78>
   13330:	ldr	r2, [sp, #48]	; 0x30
   13334:	clz	r1, sl
   13338:	mov	r8, #0
   1333c:	lsr	r1, r1, #5
   13340:	cmp	r2, #0
   13344:	mov	r0, r2
   13348:	movwne	r0, #1
   1334c:	orrs	r0, r0, r1
   13350:	moveq	r2, sl
   13354:	moveq	sl, r0
   13358:	cmp	r9, sl
   1335c:	str	r2, [sp, #48]	; 0x30
   13360:	movcc	r0, #39	; 0x27
   13364:	strbcc	r0, [r6, r9]
   13368:	add	r0, r9, #1
   1336c:	cmp	r0, sl
   13370:	movcc	r1, #92	; 0x5c
   13374:	strbcc	r1, [r6, r0]
   13378:	add	r0, r9, #2
   1337c:	add	r9, r9, #3
   13380:	cmp	r0, sl
   13384:	movcc	r1, #39	; 0x27
   13388:	strbcc	r1, [r6, r0]
   1338c:	mov	r0, #0
   13390:	str	r0, [fp, #-48]	; 0xffffffd0
   13394:	mov	r4, #1
   13398:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1339c:	cmp	r0, #0
   133a0:	bne	131c0 <__assert_fail@plt+0x21a8>
   133a4:	b	13498 <__assert_fail@plt+0x2480>
   133a8:	ldr	r0, [sp, #32]
   133ac:	cmp	r0, #1
   133b0:	bne	1359c <__assert_fail@plt+0x2584>
   133b4:	str	lr, [sp, #84]	; 0x54
   133b8:	bl	10f10 <__ctype_b_loc@plt>
   133bc:	ldr	r0, [r0]
   133c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   133c4:	mov	r1, #1
   133c8:	add	r0, r0, r5, lsl #1
   133cc:	ldrb	r0, [r0, #1]
   133d0:	ubfx	r4, r0, #6, #1
   133d4:	b	13994 <__assert_fail@plt+0x297c>
   133d8:	cmp	r7, #0
   133dc:	ldrbeq	r0, [ip, #1]
   133e0:	cmpeq	r0, #0
   133e4:	beq	13400 <__assert_fail@plt+0x23e8>
   133e8:	mvn	lr, #0
   133ec:	mov	r8, #0
   133f0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   133f4:	cmp	r0, #0
   133f8:	bne	131c0 <__assert_fail@plt+0x21a8>
   133fc:	b	13498 <__assert_fail@plt+0x2480>
   13400:	mov	r1, #1
   13404:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13408:	cmp	r0, #2
   1340c:	bne	1341c <__assert_fail@plt+0x2404>
   13410:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13414:	tst	r0, #1
   13418:	bne	13c90 <__assert_fail@plt+0x2c78>
   1341c:	mov	r4, r1
   13420:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13424:	cmp	r0, #0
   13428:	bne	131c0 <__assert_fail@plt+0x21a8>
   1342c:	b	13498 <__assert_fail@plt+0x2480>
   13430:	ldr	r1, [sp, #40]	; 0x28
   13434:	mov	r8, #0
   13438:	mov	r0, #92	; 0x5c
   1343c:	cmp	r1, #0
   13440:	beq	13484 <__assert_fail@plt+0x246c>
   13444:	mov	r4, #0
   13448:	cmp	r8, #0
   1344c:	bne	13240 <__assert_fail@plt+0x2228>
   13450:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13454:	tst	r2, #1
   13458:	beq	13544 <__assert_fail@plt+0x252c>
   1345c:	cmp	r9, sl
   13460:	movcc	r1, #39	; 0x27
   13464:	strbcc	r1, [r6, r9]
   13468:	add	r1, r9, #1
   1346c:	add	r9, r9, #2
   13470:	cmp	r1, sl
   13474:	movcc	r2, #39	; 0x27
   13478:	strbcc	r2, [r6, r1]
   1347c:	mov	r2, #0
   13480:	b	13544 <__assert_fail@plt+0x252c>
   13484:	ldr	r1, [sp, #80]	; 0x50
   13488:	mov	r4, #0
   1348c:	mov	r8, #0
   13490:	tst	r1, #1
   13494:	bne	134d4 <__assert_fail@plt+0x24bc>
   13498:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1349c:	cmp	r0, #0
   134a0:	mov	r0, r5
   134a4:	beq	134c8 <__assert_fail@plt+0x24b0>
   134a8:	ldr	r1, [fp, #16]
   134ac:	ubfx	r0, r5, #5, #3
   134b0:	mov	r2, #1
   134b4:	ldr	r0, [r1, r0, lsl #2]
   134b8:	and	r1, r5, #31
   134bc:	tst	r0, r2, lsl r1
   134c0:	mov	r0, r5
   134c4:	bne	134d4 <__assert_fail@plt+0x24bc>
   134c8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   134cc:	cmp	r1, #0
   134d0:	beq	1392c <__assert_fail@plt+0x2914>
   134d4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   134d8:	tst	r1, #1
   134dc:	bne	13c70 <__assert_fail@plt+0x2c58>
   134e0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   134e4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   134e8:	cmp	r1, #2
   134ec:	ldr	r1, [fp, #-80]	; 0xffffffb0
   134f0:	movwne	r1, #1
   134f4:	orr	r1, r1, r2
   134f8:	tst	r1, #1
   134fc:	bne	13534 <__assert_fail@plt+0x251c>
   13500:	cmp	r9, sl
   13504:	movcc	r1, #39	; 0x27
   13508:	strbcc	r1, [r6, r9]
   1350c:	add	r1, r9, #1
   13510:	cmp	r1, sl
   13514:	movcc	r2, #36	; 0x24
   13518:	strbcc	r2, [r6, r1]
   1351c:	add	r1, r9, #2
   13520:	add	r9, r9, #3
   13524:	cmp	r1, sl
   13528:	movcc	r2, #39	; 0x27
   1352c:	strbcc	r2, [r6, r1]
   13530:	mov	r2, #1
   13534:	cmp	r9, sl
   13538:	movcc	r1, #92	; 0x5c
   1353c:	strbcc	r1, [r6, r9]
   13540:	add	r9, r9, #1
   13544:	cmp	r9, sl
   13548:	add	r7, r7, #1
   1354c:	strbcc	r0, [r6, r9]
   13550:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13554:	add	r9, r9, #1
   13558:	and	r0, r0, r4
   1355c:	mov	r4, r0
   13560:	cmn	lr, #1
   13564:	bne	12ed8 <__assert_fail@plt+0x1ec0>
   13568:	b	12ee4 <__assert_fail@plt+0x1ecc>
   1356c:	ldr	r0, [sp, #28]
   13570:	mov	r4, #0
   13574:	mov	r8, #0
   13578:	mov	r5, #0
   1357c:	cmp	r0, #0
   13580:	beq	13498 <__assert_fail@plt+0x2480>
   13584:	ldr	r4, [fp, #-52]	; 0xffffffcc
   13588:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1358c:	add	r7, r7, #1
   13590:	cmn	lr, #1
   13594:	bne	12ed8 <__assert_fail@plt+0x1ec0>
   13598:	b	12ee4 <__assert_fail@plt+0x1ecc>
   1359c:	mov	r0, #0
   135a0:	cmn	lr, #1
   135a4:	str	r0, [fp, #-36]	; 0xffffffdc
   135a8:	str	r0, [fp, #-40]	; 0xffffffd8
   135ac:	bne	135c0 <__assert_fail@plt+0x25a8>
   135b0:	mov	r0, ip
   135b4:	bl	10f28 <strlen@plt>
   135b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   135bc:	mov	lr, r0
   135c0:	ldr	r0, [sp, #36]	; 0x24
   135c4:	str	sl, [sp, #56]	; 0x38
   135c8:	str	lr, [sp, #84]	; 0x54
   135cc:	cmp	r0, #0
   135d0:	beq	137e8 <__assert_fail@plt+0x27d0>
   135d4:	add	r0, ip, r7
   135d8:	mov	r4, #1
   135dc:	mov	r6, #0
   135e0:	sub	sl, fp, #40	; 0x28
   135e4:	str	r0, [sp, #20]
   135e8:	str	r6, [sp, #64]	; 0x40
   135ec:	add	r6, r6, r7
   135f0:	sub	r0, fp, #44	; 0x2c
   135f4:	mov	r3, sl
   135f8:	add	r1, ip, r6
   135fc:	sub	r2, lr, r6
   13600:	bl	155b4 <__assert_fail@plt+0x459c>
   13604:	cmn	r0, #2
   13608:	beq	13944 <__assert_fail@plt+0x292c>
   1360c:	ldr	sl, [sp, #56]	; 0x38
   13610:	cmn	r0, #1
   13614:	beq	13938 <__assert_fail@plt+0x2920>
   13618:	cmp	r0, #0
   1361c:	beq	1393c <__assert_fail@plt+0x2924>
   13620:	cmp	r0, #2
   13624:	bcc	136e4 <__assert_fail@plt+0x26cc>
   13628:	ldr	r1, [sp, #64]	; 0x40
   1362c:	ldr	r2, [sp, #20]
   13630:	add	r1, r2, r1
   13634:	mov	r2, #1
   13638:	ldrb	r3, [r1, r2]
   1363c:	sub	r3, r3, #91	; 0x5b
   13640:	cmp	r3, #33	; 0x21
   13644:	bhi	136d8 <__assert_fail@plt+0x26c0>
   13648:	add	r6, pc, #0
   1364c:	ldr	pc, [r6, r3, lsl #2]
   13650:	muleq	r1, ip, ip
   13654:	muleq	r1, ip, ip
   13658:	ldrdeq	r3, [r1], -r8
   1365c:	muleq	r1, ip, ip
   13660:	ldrdeq	r3, [r1], -r8
   13664:	muleq	r1, ip, ip
   13668:	ldrdeq	r3, [r1], -r8
   1366c:	ldrdeq	r3, [r1], -r8
   13670:	ldrdeq	r3, [r1], -r8
   13674:	ldrdeq	r3, [r1], -r8
   13678:	ldrdeq	r3, [r1], -r8
   1367c:	ldrdeq	r3, [r1], -r8
   13680:	ldrdeq	r3, [r1], -r8
   13684:	ldrdeq	r3, [r1], -r8
   13688:	ldrdeq	r3, [r1], -r8
   1368c:	ldrdeq	r3, [r1], -r8
   13690:	ldrdeq	r3, [r1], -r8
   13694:	ldrdeq	r3, [r1], -r8
   13698:	ldrdeq	r3, [r1], -r8
   1369c:	ldrdeq	r3, [r1], -r8
   136a0:	ldrdeq	r3, [r1], -r8
   136a4:	ldrdeq	r3, [r1], -r8
   136a8:	ldrdeq	r3, [r1], -r8
   136ac:	ldrdeq	r3, [r1], -r8
   136b0:	ldrdeq	r3, [r1], -r8
   136b4:	ldrdeq	r3, [r1], -r8
   136b8:	ldrdeq	r3, [r1], -r8
   136bc:	ldrdeq	r3, [r1], -r8
   136c0:	ldrdeq	r3, [r1], -r8
   136c4:	ldrdeq	r3, [r1], -r8
   136c8:	ldrdeq	r3, [r1], -r8
   136cc:	ldrdeq	r3, [r1], -r8
   136d0:	ldrdeq	r3, [r1], -r8
   136d4:	muleq	r1, ip, ip
   136d8:	add	r2, r2, #1
   136dc:	cmp	r2, r0
   136e0:	bcc	13638 <__assert_fail@plt+0x2620>
   136e4:	ldr	r6, [sp, #64]	; 0x40
   136e8:	add	r6, r0, r6
   136ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   136f0:	bl	10e80 <iswprint@plt>
   136f4:	cmp	r0, #0
   136f8:	sub	sl, fp, #40	; 0x28
   136fc:	movwne	r0, #1
   13700:	and	r4, r4, r0
   13704:	mov	r0, sl
   13708:	bl	10e38 <mbsinit@plt>
   1370c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13710:	ldr	lr, [sp, #84]	; 0x54
   13714:	cmp	r0, #0
   13718:	beq	135e8 <__assert_fail@plt+0x25d0>
   1371c:	b	13988 <__assert_fail@plt+0x2970>
   13720:	ldr	r0, [sp, #24]
   13724:	cmp	r0, #0
   13728:	beq	137d0 <__assert_fail@plt+0x27b8>
   1372c:	add	r0, r7, #2
   13730:	cmp	r0, lr
   13734:	bcs	137d0 <__assert_fail@plt+0x27b8>
   13738:	add	r1, ip, r7
   1373c:	ldrb	r1, [r1, #1]
   13740:	cmp	r1, #63	; 0x3f
   13744:	bne	137d0 <__assert_fail@plt+0x27b8>
   13748:	ldrb	r5, [ip, r0]
   1374c:	sub	r1, r5, #33	; 0x21
   13750:	cmp	r1, #29
   13754:	bhi	137d0 <__assert_fail@plt+0x27b8>
   13758:	movw	r3, #20929	; 0x51c1
   1375c:	mov	r2, #1
   13760:	movt	r3, #14336	; 0x3800
   13764:	tst	r3, r2, lsl r1
   13768:	beq	137d0 <__assert_fail@plt+0x27b8>
   1376c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13770:	tst	r1, #1
   13774:	bne	13dc0 <__assert_fail@plt+0x2da8>
   13778:	cmp	r9, sl
   1377c:	mov	r7, r0
   13780:	mov	r4, #0
   13784:	movcc	r1, #63	; 0x3f
   13788:	strbcc	r1, [r6, r9]
   1378c:	add	r1, r9, #1
   13790:	cmp	r1, sl
   13794:	movcc	r2, #34	; 0x22
   13798:	strbcc	r2, [r6, r1]
   1379c:	add	r1, r9, #2
   137a0:	cmp	r1, sl
   137a4:	movcc	r2, #34	; 0x22
   137a8:	strbcc	r2, [r6, r1]
   137ac:	add	r1, r9, #3
   137b0:	add	r9, r9, #4
   137b4:	cmp	r1, sl
   137b8:	movcc	r2, #63	; 0x3f
   137bc:	strbcc	r2, [r6, r1]
   137c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   137c4:	cmp	r0, #0
   137c8:	bne	131c0 <__assert_fail@plt+0x21a8>
   137cc:	b	13498 <__assert_fail@plt+0x2480>
   137d0:	mov	r5, #63	; 0x3f
   137d4:	mov	r4, #0
   137d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   137dc:	cmp	r0, #0
   137e0:	bne	131c0 <__assert_fail@plt+0x21a8>
   137e4:	b	13498 <__assert_fail@plt+0x2480>
   137e8:	mov	r4, #1
   137ec:	mov	r6, #0
   137f0:	sub	sl, fp, #40	; 0x28
   137f4:	str	r6, [sp, #64]	; 0x40
   137f8:	add	r6, r6, r7
   137fc:	sub	r0, fp, #44	; 0x2c
   13800:	mov	r3, sl
   13804:	add	r1, ip, r6
   13808:	sub	r2, lr, r6
   1380c:	bl	155b4 <__assert_fail@plt+0x459c>
   13810:	cmn	r0, #2
   13814:	beq	13944 <__assert_fail@plt+0x292c>
   13818:	cmn	r0, #1
   1381c:	beq	13938 <__assert_fail@plt+0x2920>
   13820:	ldr	r6, [sp, #64]	; 0x40
   13824:	cmp	r0, #0
   13828:	beq	13984 <__assert_fail@plt+0x296c>
   1382c:	add	r6, r0, r6
   13830:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13834:	bl	10e80 <iswprint@plt>
   13838:	cmp	r0, #0
   1383c:	sub	sl, fp, #40	; 0x28
   13840:	movwne	r0, #1
   13844:	and	r4, r4, r0
   13848:	mov	r0, sl
   1384c:	bl	10e38 <mbsinit@plt>
   13850:	ldr	ip, [fp, #-84]	; 0xffffffac
   13854:	ldr	lr, [sp, #84]	; 0x54
   13858:	cmp	r0, #0
   1385c:	beq	137f4 <__assert_fail@plt+0x27dc>
   13860:	b	13988 <__assert_fail@plt+0x2970>
   13864:	cmp	r9, sl
   13868:	mov	r2, #1
   1386c:	movcc	r0, #39	; 0x27
   13870:	strbcc	r0, [r6, r9]
   13874:	add	r0, r9, #1
   13878:	cmp	r0, sl
   1387c:	movcc	r1, #36	; 0x24
   13880:	strbcc	r1, [r6, r0]
   13884:	add	r0, r9, #2
   13888:	cmp	r0, sl
   1388c:	movcc	r1, #39	; 0x27
   13890:	strbcc	r1, [r6, r0]
   13894:	add	r0, r9, #3
   13898:	cmp	r0, sl
   1389c:	add	r9, r0, #1
   138a0:	str	r2, [fp, #-48]	; 0xffffffd0
   138a4:	movcc	r1, #92	; 0x5c
   138a8:	strbcc	r1, [r6, r0]
   138ac:	ldr	r1, [fp, #-64]	; 0xffffffc0
   138b0:	cmp	r1, #2
   138b4:	beq	13914 <__assert_fail@plt+0x28fc>
   138b8:	add	r1, r7, #1
   138bc:	mov	r4, #0
   138c0:	mov	r8, #1
   138c4:	mov	r5, #48	; 0x30
   138c8:	cmp	r1, lr
   138cc:	bcs	131b4 <__assert_fail@plt+0x219c>
   138d0:	ldrb	r1, [ip, r1]
   138d4:	sub	r1, r1, #48	; 0x30
   138d8:	uxtb	r1, r1
   138dc:	cmp	r1, #9
   138e0:	bhi	131b4 <__assert_fail@plt+0x219c>
   138e4:	cmp	r9, sl
   138e8:	movcc	r1, #48	; 0x30
   138ec:	strbcc	r1, [r6, r9]
   138f0:	add	r1, r0, #2
   138f4:	add	r9, r0, #3
   138f8:	cmp	r1, sl
   138fc:	movcc	r2, #48	; 0x30
   13900:	strbcc	r2, [r6, r1]
   13904:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13908:	cmp	r0, #0
   1390c:	bne	131c0 <__assert_fail@plt+0x21a8>
   13910:	b	13498 <__assert_fail@plt+0x2480>
   13914:	mov	r0, #48	; 0x30
   13918:	mov	r8, #1
   1391c:	mov	r4, #0
   13920:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13924:	cmp	r1, #0
   13928:	bne	134d4 <__assert_fail@plt+0x24bc>
   1392c:	cmp	r8, #0
   13930:	beq	13450 <__assert_fail@plt+0x2438>
   13934:	b	13240 <__assert_fail@plt+0x2228>
   13938:	mov	r4, #0
   1393c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13940:	b	1397c <__assert_fail@plt+0x2964>
   13944:	ldr	r1, [sp, #84]	; 0x54
   13948:	ldr	ip, [fp, #-84]	; 0xffffffac
   1394c:	mov	r4, #0
   13950:	cmp	r6, r1
   13954:	bcs	1397c <__assert_fail@plt+0x2964>
   13958:	ldrb	r0, [ip, r6]
   1395c:	cmp	r0, #0
   13960:	beq	1397c <__assert_fail@plt+0x2964>
   13964:	ldr	r0, [sp, #64]	; 0x40
   13968:	add	r0, r0, #1
   1396c:	add	r6, r0, r7
   13970:	str	r0, [sp, #64]	; 0x40
   13974:	cmp	r6, r1
   13978:	bcc	13958 <__assert_fail@plt+0x2940>
   1397c:	ldr	r6, [sp, #64]	; 0x40
   13980:	b	13988 <__assert_fail@plt+0x2970>
   13984:	ldr	ip, [fp, #-84]	; 0xffffffac
   13988:	mov	r1, r6
   1398c:	ldr	r6, [sp, #76]	; 0x4c
   13990:	ldr	sl, [sp, #56]	; 0x38
   13994:	ldr	r0, [sp, #44]	; 0x2c
   13998:	cmp	r1, #1
   1399c:	orr	r2, r4, r0
   139a0:	mov	r0, r1
   139a4:	bhi	139c4 <__assert_fail@plt+0x29ac>
   139a8:	tst	r2, #1
   139ac:	beq	139c4 <__assert_fail@plt+0x29ac>
   139b0:	ldr	lr, [sp, #84]	; 0x54
   139b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   139b8:	cmp	r0, #0
   139bc:	bne	131c0 <__assert_fail@plt+0x21a8>
   139c0:	b	13498 <__assert_fail@plt+0x2480>
   139c4:	str	r2, [sp, #64]	; 0x40
   139c8:	add	r0, r0, r7
   139cc:	add	r1, r7, #1
   139d0:	ldr	lr, [sp, #84]	; 0x54
   139d4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   139d8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   139dc:	mov	r3, #0
   139e0:	str	r0, [sp, #56]	; 0x38
   139e4:	ldr	r0, [sp, #64]	; 0x40
   139e8:	tst	r0, #1
   139ec:	bne	13ad4 <__assert_fail@plt+0x2abc>
   139f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   139f4:	tst	r0, #1
   139f8:	bne	13c74 <__assert_fail@plt+0x2c5c>
   139fc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13a00:	cmp	r7, #2
   13a04:	movwne	r3, #1
   13a08:	orr	r3, r3, r2
   13a0c:	tst	r3, #1
   13a10:	bne	13a48 <__assert_fail@plt+0x2a30>
   13a14:	cmp	r9, sl
   13a18:	add	r3, r9, #1
   13a1c:	movcc	r2, #39	; 0x27
   13a20:	strbcc	r2, [r6, r9]
   13a24:	cmp	r3, sl
   13a28:	movcc	r2, #36	; 0x24
   13a2c:	strbcc	r2, [r6, r3]
   13a30:	add	r3, r9, #2
   13a34:	add	r9, r9, #3
   13a38:	cmp	r3, sl
   13a3c:	movcc	r2, #39	; 0x27
   13a40:	strbcc	r2, [r6, r3]
   13a44:	mov	r2, #1
   13a48:	cmp	r9, sl
   13a4c:	mov	r0, r2
   13a50:	movcc	r3, #92	; 0x5c
   13a54:	strbcc	r3, [r6, r9]
   13a58:	add	r3, r9, #1
   13a5c:	cmp	r3, sl
   13a60:	andcc	r7, r5, #192	; 0xc0
   13a64:	movcc	r2, #48	; 0x30
   13a68:	orrcc	r7, r2, r7, lsr #6
   13a6c:	strbcc	r7, [r6, r3]
   13a70:	add	r3, r9, #2
   13a74:	add	r9, r9, #3
   13a78:	cmp	r3, sl
   13a7c:	lsrcc	r7, r5, #3
   13a80:	movcc	r2, #6
   13a84:	bficc	r7, r2, #3, #29
   13a88:	mov	r2, #6
   13a8c:	strbcc	r7, [r6, r3]
   13a90:	bfi	r5, r2, #3, #29
   13a94:	mov	r3, #1
   13a98:	mov	r2, r0
   13a9c:	ldr	r0, [sp, #56]	; 0x38
   13aa0:	and	r8, r3, #1
   13aa4:	cmp	r0, r1
   13aa8:	bhi	13b08 <__assert_fail@plt+0x2af0>
   13aac:	b	13b48 <__assert_fail@plt+0x2b30>
   13ab0:	cmp	r9, sl
   13ab4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13ab8:	strbcc	r5, [r6, r9]
   13abc:	add	r9, r9, #1
   13ac0:	ldrb	r5, [ip, r1]
   13ac4:	add	r1, r1, #1
   13ac8:	ldr	r0, [sp, #64]	; 0x40
   13acc:	tst	r0, #1
   13ad0:	beq	139f0 <__assert_fail@plt+0x29d8>
   13ad4:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13ad8:	tst	r7, #1
   13adc:	beq	13af0 <__assert_fail@plt+0x2ad8>
   13ae0:	cmp	r9, sl
   13ae4:	movcc	r7, #92	; 0x5c
   13ae8:	strbcc	r7, [r6, r9]
   13aec:	add	r9, r9, #1
   13af0:	mov	r7, #0
   13af4:	str	r7, [fp, #-56]	; 0xffffffc8
   13af8:	ldr	r0, [sp, #56]	; 0x38
   13afc:	and	r8, r3, #1
   13b00:	cmp	r0, r1
   13b04:	bls	13b48 <__assert_fail@plt+0x2b30>
   13b08:	cmp	r8, #0
   13b0c:	mvn	r7, r2
   13b10:	movwne	r8, #1
   13b14:	orr	r7, r7, r8
   13b18:	tst	r7, #1
   13b1c:	bne	13ab0 <__assert_fail@plt+0x2a98>
   13b20:	cmp	r9, sl
   13b24:	movcc	r7, #39	; 0x27
   13b28:	strbcc	r7, [r6, r9]
   13b2c:	add	r7, r9, #1
   13b30:	add	r9, r9, #2
   13b34:	cmp	r7, sl
   13b38:	movcc	r2, #39	; 0x27
   13b3c:	strbcc	r2, [r6, r7]
   13b40:	mov	r2, #0
   13b44:	b	13ab0 <__assert_fail@plt+0x2a98>
   13b48:	cmp	r8, #0
   13b4c:	sub	r7, r1, #1
   13b50:	mov	r0, r5
   13b54:	str	r2, [fp, #-48]	; 0xffffffd0
   13b58:	movwne	r8, #1
   13b5c:	cmp	r8, #0
   13b60:	beq	13450 <__assert_fail@plt+0x2438>
   13b64:	b	13240 <__assert_fail@plt+0x2228>
   13b68:	mov	lr, r7
   13b6c:	b	13b74 <__assert_fail@plt+0x2b5c>
   13b70:	mvn	lr, #0
   13b74:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13b78:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13b7c:	eor	r0, r7, #2
   13b80:	orr	r0, r0, r9
   13b84:	clz	r0, r0
   13b88:	lsr	r0, r0, #5
   13b8c:	tst	r1, r0
   13b90:	bne	13c90 <__assert_fail@plt+0x2c78>
   13b94:	mov	r0, r1
   13b98:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13b9c:	cmp	r7, #2
   13ba0:	movwne	r1, #1
   13ba4:	orr	r0, r0, r1
   13ba8:	tst	r0, #1
   13bac:	ldreq	r0, [sp, #52]	; 0x34
   13bb0:	streq	lr, [sp, #84]	; 0x54
   13bb4:	eoreq	r0, r0, #1
   13bb8:	tsteq	r0, #1
   13bbc:	bne	13d54 <__assert_fail@plt+0x2d3c>
   13bc0:	tst	r4, #1
   13bc4:	bne	13d10 <__assert_fail@plt+0x2cf8>
   13bc8:	ldr	r6, [sp, #48]	; 0x30
   13bcc:	mov	r8, #0
   13bd0:	cmp	r6, #0
   13bd4:	beq	13d4c <__assert_fail@plt+0x2d34>
   13bd8:	ldr	r0, [sp, #80]	; 0x50
   13bdc:	mov	r1, #0
   13be0:	cmp	sl, #0
   13be4:	mov	r4, #0
   13be8:	str	r1, [fp, #-72]	; 0xffffffb8
   13bec:	beq	12ae0 <__assert_fail@plt+0x1ac8>
   13bf0:	b	13d54 <__assert_fail@plt+0x2d3c>
   13bf4:	ldrb	r1, [r0, #3]
   13bf8:	cmp	r1, #56	; 0x38
   13bfc:	ldrbeq	r1, [r0, #4]
   13c00:	cmpeq	r1, #48	; 0x30
   13c04:	bne	12cd8 <__assert_fail@plt+0x1cc0>
   13c08:	ldrb	r1, [r0, #5]
   13c0c:	cmp	r1, #51	; 0x33
   13c10:	ldrbeq	r1, [r0, #6]
   13c14:	cmpeq	r1, #48	; 0x30
   13c18:	bne	12cd8 <__assert_fail@plt+0x1cc0>
   13c1c:	ldrb	r0, [r0, #7]
   13c20:	cmp	r0, #0
   13c24:	movw	r0, #25128	; 0x6228
   13c28:	movt	r0, #1
   13c2c:	str	r0, [sp, #68]	; 0x44
   13c30:	bne	12cd8 <__assert_fail@plt+0x1cc0>
   13c34:	b	12cf4 <__assert_fail@plt+0x1cdc>
   13c38:	ldrb	r1, [r0, #4]
   13c3c:	cmp	r1, #48	; 0x30
   13c40:	ldrbeq	r1, [r0, #5]
   13c44:	cmpeq	r1, #51	; 0x33
   13c48:	bne	12dbc <__assert_fail@plt+0x1da4>
   13c4c:	ldrb	r1, [r0, #6]
   13c50:	cmp	r1, #48	; 0x30
   13c54:	ldrbeq	r0, [r0, #7]
   13c58:	cmpeq	r0, #0
   13c5c:	bne	12dbc <__assert_fail@plt+0x1da4>
   13c60:	movw	r0, #25132	; 0x622c
   13c64:	movt	r0, #1
   13c68:	str	r0, [sp, #72]	; 0x48
   13c6c:	b	12ddc <__assert_fail@plt+0x1dc4>
   13c70:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13c74:	ldr	r2, [sp, #80]	; 0x50
   13c78:	b	13cb0 <__assert_fail@plt+0x2c98>
   13c7c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c80:	mov	r2, #1
   13c84:	mov	lr, r4
   13c88:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13c8c:	b	13cb0 <__assert_fail@plt+0x2c98>
   13c90:	ldr	r2, [sp, #80]	; 0x50
   13c94:	mov	r7, #2
   13c98:	b	13cb0 <__assert_fail@plt+0x2c98>
   13c9c:	ldr	r6, [sp, #76]	; 0x4c
   13ca0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ca4:	ldr	lr, [sp, #84]	; 0x54
   13ca8:	ldr	r2, [sp, #80]	; 0x50
   13cac:	mov	r7, #2
   13cb0:	mov	r0, #0
   13cb4:	ldr	r1, [fp, #12]
   13cb8:	tst	r2, #1
   13cbc:	mov	r2, r7
   13cc0:	mov	r3, lr
   13cc4:	str	r0, [sp, #8]
   13cc8:	ldr	r0, [sp, #68]	; 0x44
   13ccc:	movwne	r2, #4
   13cd0:	cmp	r7, #2
   13cd4:	movne	r2, r7
   13cd8:	str	r2, [sp]
   13cdc:	mov	r2, ip
   13ce0:	bic	r1, r1, #2
   13ce4:	str	r0, [sp, #12]
   13ce8:	ldr	r0, [sp, #72]	; 0x48
   13cec:	str	r1, [sp, #4]
   13cf0:	mov	r1, sl
   13cf4:	str	r0, [sp, #16]
   13cf8:	mov	r0, r6
   13cfc:	bl	12a64 <__assert_fail@plt+0x1a4c>
   13d00:	mov	r9, r0
   13d04:	mov	r0, r9
   13d08:	sub	sp, fp, #28
   13d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d10:	mov	r0, #5
   13d14:	ldr	r1, [sp, #48]	; 0x30
   13d18:	ldr	r2, [fp, #-84]	; 0xffffffac
   13d1c:	ldr	r3, [sp, #84]	; 0x54
   13d20:	str	r0, [sp]
   13d24:	ldr	r0, [fp, #12]
   13d28:	str	r0, [sp, #4]
   13d2c:	ldr	r0, [fp, #16]
   13d30:	str	r0, [sp, #8]
   13d34:	ldr	r0, [sp, #68]	; 0x44
   13d38:	str	r0, [sp, #12]
   13d3c:	ldr	r0, [sp, #72]	; 0x48
   13d40:	str	r0, [sp, #16]
   13d44:	ldr	r0, [sp, #76]	; 0x4c
   13d48:	b	13cfc <__assert_fail@plt+0x2ce4>
   13d4c:	mov	r0, #0
   13d50:	str	r0, [fp, #-72]	; 0xffffffb8
   13d54:	ldr	r1, [sp, #92]	; 0x5c
   13d58:	cmp	r1, #0
   13d5c:	beq	13d9c <__assert_fail@plt+0x2d84>
   13d60:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13d64:	ldr	r2, [sp, #76]	; 0x4c
   13d68:	tst	r0, #1
   13d6c:	bne	13da0 <__assert_fail@plt+0x2d88>
   13d70:	ldrb	r0, [r1]
   13d74:	cmp	r0, #0
   13d78:	beq	13da0 <__assert_fail@plt+0x2d88>
   13d7c:	add	r1, r1, #1
   13d80:	cmp	r9, sl
   13d84:	strbcc	r0, [r2, r9]
   13d88:	add	r9, r9, #1
   13d8c:	ldrb	r0, [r1], #1
   13d90:	cmp	r0, #0
   13d94:	bne	13d80 <__assert_fail@plt+0x2d68>
   13d98:	b	13da0 <__assert_fail@plt+0x2d88>
   13d9c:	ldr	r2, [sp, #76]	; 0x4c
   13da0:	cmp	r9, sl
   13da4:	movcc	r0, #0
   13da8:	strbcc	r0, [r2, r9]
   13dac:	mov	r0, r9
   13db0:	sub	sp, fp, #28
   13db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13db8:	mov	r2, #1
   13dbc:	b	13c88 <__assert_fail@plt+0x2c70>
   13dc0:	ldr	r2, [sp, #80]	; 0x50
   13dc4:	mov	r7, #5
   13dc8:	b	13cb0 <__assert_fail@plt+0x2c98>
   13dcc:	bl	11000 <abort@plt>
   13dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dd4:	add	fp, sp, #28
   13dd8:	sub	sp, sp, #28
   13ddc:	movw	r5, #29088	; 0x71a0
   13de0:	cmp	r2, #0
   13de4:	mov	r4, r1
   13de8:	mov	r7, r0
   13dec:	str	r0, [sp, #20]
   13df0:	movt	r5, #2
   13df4:	movne	r5, r2
   13df8:	bl	10f34 <__errno_location@plt>
   13dfc:	mov	sl, r0
   13e00:	ldm	r5, {r0, r1}
   13e04:	ldr	r2, [r5, #40]	; 0x28
   13e08:	ldr	r3, [r5, #44]	; 0x2c
   13e0c:	add	r9, r5, #8
   13e10:	ldr	r6, [sl]
   13e14:	orr	r8, r1, #1
   13e18:	mov	r1, #0
   13e1c:	str	r6, [sp, #24]
   13e20:	stm	sp, {r0, r8, r9}
   13e24:	str	r2, [sp, #12]
   13e28:	str	r3, [sp, #16]
   13e2c:	mov	r0, #0
   13e30:	mov	r2, r7
   13e34:	mov	r3, r4
   13e38:	mov	r6, r4
   13e3c:	bl	12a64 <__assert_fail@plt+0x1a4c>
   13e40:	add	r7, r0, #1
   13e44:	mov	r0, r7
   13e48:	bl	14eac <__assert_fail@plt+0x3e94>
   13e4c:	mov	r4, r0
   13e50:	ldr	r0, [r5]
   13e54:	ldr	r2, [r5, #44]	; 0x2c
   13e58:	ldr	r1, [r5, #40]	; 0x28
   13e5c:	mov	r3, r6
   13e60:	stm	sp, {r0, r8, r9}
   13e64:	str	r2, [sp, #16]
   13e68:	str	r1, [sp, #12]
   13e6c:	mov	r0, r4
   13e70:	mov	r1, r7
   13e74:	ldr	r2, [sp, #20]
   13e78:	bl	12a64 <__assert_fail@plt+0x1a4c>
   13e7c:	ldr	r0, [sp, #24]
   13e80:	str	r0, [sl]
   13e84:	mov	r0, r4
   13e88:	sub	sp, fp, #28
   13e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e94:	add	fp, sp, #28
   13e98:	sub	sp, sp, #36	; 0x24
   13e9c:	movw	r8, #29088	; 0x71a0
   13ea0:	cmp	r3, #0
   13ea4:	mov	r4, r2
   13ea8:	str	r2, [sp, #24]
   13eac:	mov	r5, r1
   13eb0:	mov	r6, r0
   13eb4:	str	r0, [sp, #20]
   13eb8:	movt	r8, #2
   13ebc:	movne	r8, r3
   13ec0:	bl	10f34 <__errno_location@plt>
   13ec4:	str	r0, [sp, #28]
   13ec8:	cmp	r4, #0
   13ecc:	add	sl, r8, #8
   13ed0:	ldm	r8, {r3, r9}
   13ed4:	ldr	r7, [r0]
   13ed8:	ldr	r1, [r8, #40]	; 0x28
   13edc:	ldr	r2, [r8, #44]	; 0x2c
   13ee0:	mov	r0, #0
   13ee4:	orreq	r9, r9, #1
   13ee8:	str	r7, [sp, #32]
   13eec:	mov	r7, r5
   13ef0:	stm	sp, {r3, r9, sl}
   13ef4:	str	r1, [sp, #12]
   13ef8:	str	r2, [sp, #16]
   13efc:	mov	r1, #0
   13f00:	mov	r2, r6
   13f04:	mov	r3, r5
   13f08:	bl	12a64 <__assert_fail@plt+0x1a4c>
   13f0c:	add	r4, r0, #1
   13f10:	mov	r5, r0
   13f14:	mov	r0, r4
   13f18:	bl	14eac <__assert_fail@plt+0x3e94>
   13f1c:	mov	r6, r0
   13f20:	ldr	r0, [r8]
   13f24:	ldr	r2, [r8, #44]	; 0x2c
   13f28:	ldr	r1, [r8, #40]	; 0x28
   13f2c:	mov	r3, r7
   13f30:	stm	sp, {r0, r9, sl}
   13f34:	str	r2, [sp, #16]
   13f38:	str	r1, [sp, #12]
   13f3c:	mov	r0, r6
   13f40:	mov	r1, r4
   13f44:	ldr	r2, [sp, #20]
   13f48:	bl	12a64 <__assert_fail@plt+0x1a4c>
   13f4c:	ldr	r0, [sp, #24]
   13f50:	ldr	r1, [sp, #32]
   13f54:	ldr	r2, [sp, #28]
   13f58:	cmp	r0, #0
   13f5c:	str	r1, [r2]
   13f60:	strne	r5, [r0]
   13f64:	mov	r0, r6
   13f68:	sub	sp, fp, #28
   13f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f70:	push	{r4, r5, r6, r7, fp, lr}
   13f74:	add	fp, sp, #16
   13f78:	movw	r4, #28960	; 0x7120
   13f7c:	movt	r4, #2
   13f80:	ldrd	r6, [r4]
   13f84:	cmp	r7, #2
   13f88:	blt	13fb4 <__assert_fail@plt+0x2f9c>
   13f8c:	add	r5, r6, #12
   13f90:	mov	r7, #0
   13f94:	ldr	r0, [r5, r7, lsl #3]
   13f98:	bl	1275c <__assert_fail@plt+0x1744>
   13f9c:	ldr	r1, [r4, #4]
   13fa0:	add	r2, r7, #2
   13fa4:	add	r0, r7, #1
   13fa8:	mov	r7, r0
   13fac:	cmp	r2, r1
   13fb0:	blt	13f94 <__assert_fail@plt+0x2f7c>
   13fb4:	ldr	r0, [r6, #4]
   13fb8:	movw	r5, #29136	; 0x71d0
   13fbc:	movt	r5, #2
   13fc0:	cmp	r0, r5
   13fc4:	beq	13fd8 <__assert_fail@plt+0x2fc0>
   13fc8:	bl	1275c <__assert_fail@plt+0x1744>
   13fcc:	mov	r0, #256	; 0x100
   13fd0:	str	r0, [r4, #8]
   13fd4:	str	r5, [r4, #12]
   13fd8:	add	r5, r4, #8
   13fdc:	cmp	r6, r5
   13fe0:	beq	13ff0 <__assert_fail@plt+0x2fd8>
   13fe4:	mov	r0, r6
   13fe8:	bl	1275c <__assert_fail@plt+0x1744>
   13fec:	str	r5, [r4]
   13ff0:	mov	r0, #1
   13ff4:	str	r0, [r4, #4]
   13ff8:	pop	{r4, r5, r6, r7, fp, pc}
   13ffc:	movw	r3, #29088	; 0x71a0
   14000:	mvn	r2, #0
   14004:	movt	r3, #2
   14008:	b	1400c <__assert_fail@plt+0x2ff4>
   1400c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14010:	add	fp, sp, #28
   14014:	sub	sp, sp, #44	; 0x2c
   14018:	mov	r7, r3
   1401c:	str	r2, [sp, #36]	; 0x24
   14020:	str	r1, [sp, #32]
   14024:	mov	r5, r0
   14028:	bl	10f34 <__errno_location@plt>
   1402c:	cmp	r5, #0
   14030:	blt	14194 <__assert_fail@plt+0x317c>
   14034:	cmn	r5, #-2147483647	; 0x80000001
   14038:	beq	14194 <__assert_fail@plt+0x317c>
   1403c:	movw	r8, #28960	; 0x7120
   14040:	mov	r4, r0
   14044:	movt	r8, #2
   14048:	ldr	r6, [r8]
   1404c:	ldr	r1, [r8, #4]
   14050:	ldr	r0, [r0]
   14054:	str	r4, [sp, #28]
   14058:	cmp	r1, r5
   1405c:	str	r0, [sp, #24]
   14060:	ble	1406c <__assert_fail@plt+0x3054>
   14064:	mov	sl, r6
   14068:	b	140d0 <__assert_fail@plt+0x30b8>
   1406c:	mov	r0, #8
   14070:	add	r9, r8, #8
   14074:	add	r2, r5, #1
   14078:	str	r1, [fp, #-32]	; 0xffffffe0
   1407c:	mvn	r3, #-2147483648	; 0x80000000
   14080:	str	r0, [sp]
   14084:	subs	r0, r6, r9
   14088:	sub	r2, r2, r1
   1408c:	sub	r1, fp, #32
   14090:	movne	r0, r6
   14094:	bl	150ac <__assert_fail@plt+0x4094>
   14098:	str	r0, [r8]
   1409c:	cmp	r6, r9
   140a0:	mov	sl, r0
   140a4:	ldrdeq	r0, [r8, #8]
   140a8:	stmeq	sl, {r0, r1}
   140ac:	ldr	r1, [r8, #4]
   140b0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   140b4:	add	r0, sl, r1, lsl #3
   140b8:	sub	r1, r2, r1
   140bc:	lsl	r2, r1, #3
   140c0:	mov	r1, #0
   140c4:	bl	10f4c <memset@plt>
   140c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   140cc:	str	r0, [r8, #4]
   140d0:	mov	r9, sl
   140d4:	ldr	r6, [r9, r5, lsl #3]!
   140d8:	ldr	r4, [r9, #4]!
   140dc:	ldm	r7, {r0, r1}
   140e0:	ldr	r2, [r7, #40]	; 0x28
   140e4:	ldr	r3, [r7, #44]	; 0x2c
   140e8:	orr	r8, r1, #1
   140ec:	add	r1, r7, #8
   140f0:	stm	sp, {r0, r8}
   140f4:	add	r0, sp, #8
   140f8:	str	r1, [sp, #20]
   140fc:	stm	r0, {r1, r2, r3}
   14100:	mov	r0, r4
   14104:	mov	r1, r6
   14108:	ldr	r2, [sp, #32]
   1410c:	ldr	r3, [sp, #36]	; 0x24
   14110:	bl	12a64 <__assert_fail@plt+0x1a4c>
   14114:	cmp	r6, r0
   14118:	bhi	1417c <__assert_fail@plt+0x3164>
   1411c:	add	r6, r0, #1
   14120:	movw	r0, #29136	; 0x71d0
   14124:	movt	r0, #2
   14128:	str	r6, [sl, r5, lsl #3]
   1412c:	cmp	r4, r0
   14130:	beq	1413c <__assert_fail@plt+0x3124>
   14134:	mov	r0, r4
   14138:	bl	1275c <__assert_fail@plt+0x1744>
   1413c:	mov	r0, r6
   14140:	bl	14eac <__assert_fail@plt+0x3e94>
   14144:	str	r0, [r9]
   14148:	mov	r4, r0
   1414c:	add	r3, sp, #8
   14150:	ldr	r0, [r7]
   14154:	ldr	r1, [r7, #40]	; 0x28
   14158:	ldr	r2, [r7, #44]	; 0x2c
   1415c:	stm	sp, {r0, r8}
   14160:	ldr	r0, [sp, #20]
   14164:	stm	r3, {r0, r1, r2}
   14168:	mov	r0, r4
   1416c:	mov	r1, r6
   14170:	ldr	r2, [sp, #32]
   14174:	ldr	r3, [sp, #36]	; 0x24
   14178:	bl	12a64 <__assert_fail@plt+0x1a4c>
   1417c:	ldr	r1, [sp, #24]
   14180:	ldr	r0, [sp, #28]
   14184:	str	r1, [r0]
   14188:	mov	r0, r4
   1418c:	sub	sp, fp, #28
   14190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14194:	bl	11000 <abort@plt>
   14198:	movw	r3, #29088	; 0x71a0
   1419c:	movt	r3, #2
   141a0:	b	1400c <__assert_fail@plt+0x2ff4>
   141a4:	movw	r3, #29088	; 0x71a0
   141a8:	mov	r1, r0
   141ac:	mov	r0, #0
   141b0:	mvn	r2, #0
   141b4:	movt	r3, #2
   141b8:	b	1400c <__assert_fail@plt+0x2ff4>
   141bc:	movw	r3, #29088	; 0x71a0
   141c0:	mov	r2, r1
   141c4:	mov	r1, r0
   141c8:	mov	r0, #0
   141cc:	movt	r3, #2
   141d0:	b	1400c <__assert_fail@plt+0x2ff4>
   141d4:	push	{fp, lr}
   141d8:	mov	fp, sp
   141dc:	sub	sp, sp, #48	; 0x30
   141e0:	vmov.i32	q8, #0	; 0x00000000
   141e4:	mov	ip, #32
   141e8:	mov	r3, sp
   141ec:	mov	lr, r2
   141f0:	cmp	r1, #10
   141f4:	add	r2, r3, #16
   141f8:	vst1.64	{d16-d17}, [r3], ip
   141fc:	vst1.64	{d16-d17}, [r3]
   14200:	vst1.64	{d16-d17}, [r2]
   14204:	beq	14224 <__assert_fail@plt+0x320c>
   14208:	str	r1, [sp]
   1420c:	mov	r3, sp
   14210:	mov	r1, lr
   14214:	mvn	r2, #0
   14218:	bl	1400c <__assert_fail@plt+0x2ff4>
   1421c:	mov	sp, fp
   14220:	pop	{fp, pc}
   14224:	bl	11000 <abort@plt>
   14228:	push	{r4, sl, fp, lr}
   1422c:	add	fp, sp, #8
   14230:	sub	sp, sp, #48	; 0x30
   14234:	mov	ip, r3
   14238:	mov	r3, sp
   1423c:	vmov.i32	q8, #0	; 0x00000000
   14240:	mov	lr, #32
   14244:	cmp	r1, #10
   14248:	add	r4, r3, #16
   1424c:	vst1.64	{d16-d17}, [r3], lr
   14250:	vst1.64	{d16-d17}, [r3]
   14254:	vst1.64	{d16-d17}, [r4]
   14258:	beq	14278 <__assert_fail@plt+0x3260>
   1425c:	str	r1, [sp]
   14260:	mov	r1, r2
   14264:	mov	r3, sp
   14268:	mov	r2, ip
   1426c:	bl	1400c <__assert_fail@plt+0x2ff4>
   14270:	sub	sp, fp, #8
   14274:	pop	{r4, sl, fp, pc}
   14278:	bl	11000 <abort@plt>
   1427c:	push	{fp, lr}
   14280:	mov	fp, sp
   14284:	sub	sp, sp, #48	; 0x30
   14288:	mov	r3, sp
   1428c:	vmov.i32	q8, #0	; 0x00000000
   14290:	mov	ip, #32
   14294:	cmp	r0, #10
   14298:	add	r2, r3, #16
   1429c:	vst1.64	{d16-d17}, [r3], ip
   142a0:	vst1.64	{d16-d17}, [r3]
   142a4:	vst1.64	{d16-d17}, [r2]
   142a8:	beq	142c8 <__assert_fail@plt+0x32b0>
   142ac:	str	r0, [sp]
   142b0:	mov	r3, sp
   142b4:	mov	r0, #0
   142b8:	mvn	r2, #0
   142bc:	bl	1400c <__assert_fail@plt+0x2ff4>
   142c0:	mov	sp, fp
   142c4:	pop	{fp, pc}
   142c8:	bl	11000 <abort@plt>
   142cc:	push	{fp, lr}
   142d0:	mov	fp, sp
   142d4:	sub	sp, sp, #48	; 0x30
   142d8:	mov	r3, sp
   142dc:	vmov.i32	q8, #0	; 0x00000000
   142e0:	mov	ip, #32
   142e4:	cmp	r0, #10
   142e8:	add	lr, r3, #16
   142ec:	vst1.64	{d16-d17}, [r3], ip
   142f0:	vst1.64	{d16-d17}, [r3]
   142f4:	vst1.64	{d16-d17}, [lr]
   142f8:	beq	14314 <__assert_fail@plt+0x32fc>
   142fc:	str	r0, [sp]
   14300:	mov	r3, sp
   14304:	mov	r0, #0
   14308:	bl	1400c <__assert_fail@plt+0x2ff4>
   1430c:	mov	sp, fp
   14310:	pop	{fp, pc}
   14314:	bl	11000 <abort@plt>
   14318:	push	{r4, sl, fp, lr}
   1431c:	add	fp, sp, #8
   14320:	sub	sp, sp, #48	; 0x30
   14324:	mov	lr, r0
   14328:	movw	r0, #29088	; 0x71a0
   1432c:	mov	r3, #32
   14330:	mov	ip, r1
   14334:	mov	r4, #1
   14338:	movt	r0, #2
   1433c:	add	r1, r0, #16
   14340:	vld1.64	{d16-d17}, [r0], r3
   14344:	mov	r3, sp
   14348:	vld1.64	{d18-d19}, [r1]
   1434c:	add	r1, r3, #16
   14350:	vld1.64	{d20-d21}, [r0]
   14354:	add	r0, r3, #32
   14358:	vst1.64	{d18-d19}, [r1]
   1435c:	mov	r1, r3
   14360:	vst1.64	{d20-d21}, [r0]
   14364:	mov	r0, #28
   14368:	and	r0, r0, r2, lsr #3
   1436c:	and	r2, r2, #31
   14370:	vst1.64	{d16-d17}, [r1], r0
   14374:	ldr	r0, [r1, #8]
   14378:	bic	r4, r4, r0, lsr r2
   1437c:	eor	r0, r0, r4, lsl r2
   14380:	mov	r2, ip
   14384:	str	r0, [r1, #8]
   14388:	mov	r0, #0
   1438c:	mov	r1, lr
   14390:	bl	1400c <__assert_fail@plt+0x2ff4>
   14394:	sub	sp, fp, #8
   14398:	pop	{r4, sl, fp, pc}
   1439c:	push	{fp, lr}
   143a0:	mov	fp, sp
   143a4:	sub	sp, sp, #48	; 0x30
   143a8:	mov	ip, r0
   143ac:	movw	r0, #29088	; 0x71a0
   143b0:	mov	r3, #32
   143b4:	movt	r0, #2
   143b8:	add	r2, r0, #16
   143bc:	vld1.64	{d16-d17}, [r0], r3
   143c0:	mov	r3, sp
   143c4:	vld1.64	{d18-d19}, [r2]
   143c8:	add	r2, r3, #16
   143cc:	vld1.64	{d20-d21}, [r0]
   143d0:	add	r0, r3, #32
   143d4:	vst1.64	{d18-d19}, [r2]
   143d8:	mov	r2, r3
   143dc:	vst1.64	{d20-d21}, [r0]
   143e0:	mov	r0, #28
   143e4:	and	r0, r0, r1, lsr #3
   143e8:	and	r1, r1, #31
   143ec:	vst1.64	{d16-d17}, [r2], r0
   143f0:	mov	r0, #1
   143f4:	ldr	lr, [r2, #8]
   143f8:	bic	r0, r0, lr, lsr r1
   143fc:	eor	r0, lr, r0, lsl r1
   14400:	mov	r1, ip
   14404:	str	r0, [r2, #8]
   14408:	mov	r0, #0
   1440c:	mvn	r2, #0
   14410:	bl	1400c <__assert_fail@plt+0x2ff4>
   14414:	mov	sp, fp
   14418:	pop	{fp, pc}
   1441c:	push	{fp, lr}
   14420:	mov	fp, sp
   14424:	sub	sp, sp, #48	; 0x30
   14428:	movw	r2, #29088	; 0x71a0
   1442c:	mov	r3, #32
   14430:	mov	r1, r0
   14434:	movt	r2, #2
   14438:	add	r0, r2, #16
   1443c:	vld1.64	{d16-d17}, [r2], r3
   14440:	mov	r3, sp
   14444:	vld1.64	{d18-d19}, [r0]
   14448:	add	r0, r3, #16
   1444c:	vld1.64	{d20-d21}, [r2]
   14450:	mov	r2, r3
   14454:	vst1.64	{d18-d19}, [r0]
   14458:	add	r0, r3, #32
   1445c:	vst1.64	{d20-d21}, [r0]
   14460:	mov	r0, #12
   14464:	vst1.64	{d16-d17}, [r2], r0
   14468:	ldr	r0, [r2]
   1446c:	orr	r0, r0, #67108864	; 0x4000000
   14470:	str	r0, [r2]
   14474:	mov	r0, #0
   14478:	mvn	r2, #0
   1447c:	bl	1400c <__assert_fail@plt+0x2ff4>
   14480:	mov	sp, fp
   14484:	pop	{fp, pc}
   14488:	push	{fp, lr}
   1448c:	mov	fp, sp
   14490:	sub	sp, sp, #48	; 0x30
   14494:	mov	ip, r1
   14498:	mov	r1, r0
   1449c:	movw	r0, #29088	; 0x71a0
   144a0:	mov	r3, #32
   144a4:	movt	r0, #2
   144a8:	add	r2, r0, #16
   144ac:	vld1.64	{d16-d17}, [r0], r3
   144b0:	mov	r3, sp
   144b4:	vld1.64	{d18-d19}, [r2]
   144b8:	add	r2, r3, #16
   144bc:	vld1.64	{d20-d21}, [r0]
   144c0:	add	r0, r3, #32
   144c4:	vst1.64	{d18-d19}, [r2]
   144c8:	mov	r2, r3
   144cc:	vst1.64	{d20-d21}, [r0]
   144d0:	mov	r0, #12
   144d4:	vst1.64	{d16-d17}, [r2], r0
   144d8:	ldr	r0, [r2]
   144dc:	orr	r0, r0, #67108864	; 0x4000000
   144e0:	str	r0, [r2]
   144e4:	mov	r0, #0
   144e8:	mov	r2, ip
   144ec:	bl	1400c <__assert_fail@plt+0x2ff4>
   144f0:	mov	sp, fp
   144f4:	pop	{fp, pc}
   144f8:	push	{r4, sl, fp, lr}
   144fc:	add	fp, sp, #8
   14500:	sub	sp, sp, #96	; 0x60
   14504:	mov	ip, r2
   14508:	mov	r2, sp
   1450c:	vmov.i32	q8, #0	; 0x00000000
   14510:	mov	r4, #28
   14514:	cmp	r1, #10
   14518:	mov	r3, r2
   1451c:	add	lr, r2, #16
   14520:	vst1.64	{d16-d17}, [r3], r4
   14524:	vst1.64	{d16-d17}, [lr]
   14528:	vst1.32	{d16-d17}, [r3]
   1452c:	beq	1457c <__assert_fail@plt+0x3564>
   14530:	vld1.64	{d16-d17}, [r2], r4
   14534:	vld1.64	{d18-d19}, [lr]
   14538:	add	r3, sp, #48	; 0x30
   1453c:	add	r4, r3, #4
   14540:	vld1.32	{d20-d21}, [r2]
   14544:	add	r2, r3, #20
   14548:	vst1.32	{d16-d17}, [r4]
   1454c:	vst1.32	{d18-d19}, [r2]
   14550:	add	r2, r3, #32
   14554:	vst1.32	{d20-d21}, [r2]
   14558:	str	r1, [sp, #48]	; 0x30
   1455c:	mvn	r2, #0
   14560:	ldr	r1, [sp, #60]	; 0x3c
   14564:	orr	r1, r1, #67108864	; 0x4000000
   14568:	str	r1, [sp, #60]	; 0x3c
   1456c:	mov	r1, ip
   14570:	bl	1400c <__assert_fail@plt+0x2ff4>
   14574:	sub	sp, fp, #8
   14578:	pop	{r4, sl, fp, pc}
   1457c:	bl	11000 <abort@plt>
   14580:	push	{r4, r5, fp, lr}
   14584:	add	fp, sp, #8
   14588:	sub	sp, sp, #48	; 0x30
   1458c:	mov	ip, r3
   14590:	movw	r3, #29088	; 0x71a0
   14594:	mov	lr, #32
   14598:	cmp	r1, #0
   1459c:	mov	r5, sp
   145a0:	movt	r3, #2
   145a4:	cmpne	r2, #0
   145a8:	add	r4, r3, #16
   145ac:	vld1.64	{d16-d17}, [r3], lr
   145b0:	vld1.64	{d18-d19}, [r4]
   145b4:	add	r4, r5, #16
   145b8:	vld1.64	{d20-d21}, [r3]
   145bc:	vst1.64	{d16-d17}, [r5], lr
   145c0:	mov	r3, #10
   145c4:	vst1.64	{d18-d19}, [r4]
   145c8:	vst1.64	{d20-d21}, [r5]
   145cc:	str	r3, [sp]
   145d0:	bne	145d8 <__assert_fail@plt+0x35c0>
   145d4:	bl	11000 <abort@plt>
   145d8:	str	r2, [sp, #44]	; 0x2c
   145dc:	str	r1, [sp, #40]	; 0x28
   145e0:	mov	r3, sp
   145e4:	mov	r1, ip
   145e8:	mvn	r2, #0
   145ec:	bl	1400c <__assert_fail@plt+0x2ff4>
   145f0:	sub	sp, fp, #8
   145f4:	pop	{r4, r5, fp, pc}
   145f8:	push	{r4, r5, fp, lr}
   145fc:	add	fp, sp, #8
   14600:	sub	sp, sp, #48	; 0x30
   14604:	mov	lr, r3
   14608:	movw	r3, #29088	; 0x71a0
   1460c:	mov	ip, #32
   14610:	cmp	r1, #0
   14614:	mov	r5, sp
   14618:	movt	r3, #2
   1461c:	cmpne	r2, #0
   14620:	add	r4, r3, #16
   14624:	vld1.64	{d16-d17}, [r3], ip
   14628:	vld1.64	{d18-d19}, [r4]
   1462c:	add	r4, r5, #16
   14630:	vld1.64	{d20-d21}, [r3]
   14634:	vst1.64	{d16-d17}, [r5], ip
   14638:	mov	r3, #10
   1463c:	vst1.64	{d18-d19}, [r4]
   14640:	vst1.64	{d20-d21}, [r5]
   14644:	str	r3, [sp]
   14648:	bne	14650 <__assert_fail@plt+0x3638>
   1464c:	bl	11000 <abort@plt>
   14650:	ldr	ip, [fp, #8]
   14654:	str	r2, [sp, #44]	; 0x2c
   14658:	str	r1, [sp, #40]	; 0x28
   1465c:	mov	r3, sp
   14660:	mov	r1, lr
   14664:	mov	r2, ip
   14668:	bl	1400c <__assert_fail@plt+0x2ff4>
   1466c:	sub	sp, fp, #8
   14670:	pop	{r4, r5, fp, pc}
   14674:	push	{r4, sl, fp, lr}
   14678:	add	fp, sp, #8
   1467c:	sub	sp, sp, #48	; 0x30
   14680:	mov	ip, r2
   14684:	movw	r2, #29088	; 0x71a0
   14688:	mov	lr, #32
   1468c:	cmp	r0, #0
   14690:	mov	r4, sp
   14694:	movt	r2, #2
   14698:	cmpne	r1, #0
   1469c:	add	r3, r2, #16
   146a0:	vld1.64	{d16-d17}, [r2], lr
   146a4:	vld1.64	{d18-d19}, [r3]
   146a8:	add	r3, r4, #16
   146ac:	vld1.64	{d20-d21}, [r2]
   146b0:	vst1.64	{d16-d17}, [r4], lr
   146b4:	mov	r2, #10
   146b8:	vst1.64	{d18-d19}, [r3]
   146bc:	vst1.64	{d20-d21}, [r4]
   146c0:	str	r2, [sp]
   146c4:	bne	146cc <__assert_fail@plt+0x36b4>
   146c8:	bl	11000 <abort@plt>
   146cc:	str	r1, [sp, #44]	; 0x2c
   146d0:	str	r0, [sp, #40]	; 0x28
   146d4:	mov	r3, sp
   146d8:	mov	r0, #0
   146dc:	mov	r1, ip
   146e0:	mvn	r2, #0
   146e4:	bl	1400c <__assert_fail@plt+0x2ff4>
   146e8:	sub	sp, fp, #8
   146ec:	pop	{r4, sl, fp, pc}
   146f0:	push	{r4, r5, fp, lr}
   146f4:	add	fp, sp, #8
   146f8:	sub	sp, sp, #48	; 0x30
   146fc:	mov	lr, r2
   14700:	movw	r2, #29088	; 0x71a0
   14704:	mov	ip, r3
   14708:	mov	r3, #32
   1470c:	cmp	r0, #0
   14710:	mov	r5, sp
   14714:	movt	r2, #2
   14718:	cmpne	r1, #0
   1471c:	add	r4, r2, #16
   14720:	vld1.64	{d16-d17}, [r2], r3
   14724:	vld1.64	{d18-d19}, [r4]
   14728:	add	r4, r5, #16
   1472c:	vld1.64	{d20-d21}, [r2]
   14730:	vst1.64	{d16-d17}, [r5], r3
   14734:	mov	r2, #10
   14738:	vst1.64	{d18-d19}, [r4]
   1473c:	vst1.64	{d20-d21}, [r5]
   14740:	str	r2, [sp]
   14744:	bne	1474c <__assert_fail@plt+0x3734>
   14748:	bl	11000 <abort@plt>
   1474c:	str	r1, [sp, #44]	; 0x2c
   14750:	str	r0, [sp, #40]	; 0x28
   14754:	mov	r3, sp
   14758:	mov	r0, #0
   1475c:	mov	r1, lr
   14760:	mov	r2, ip
   14764:	bl	1400c <__assert_fail@plt+0x2ff4>
   14768:	sub	sp, fp, #8
   1476c:	pop	{r4, r5, fp, pc}
   14770:	movw	r3, #28912	; 0x70f0
   14774:	movt	r3, #2
   14778:	b	1400c <__assert_fail@plt+0x2ff4>
   1477c:	movw	r3, #28912	; 0x70f0
   14780:	mov	r2, r1
   14784:	mov	r1, r0
   14788:	mov	r0, #0
   1478c:	movt	r3, #2
   14790:	b	1400c <__assert_fail@plt+0x2ff4>
   14794:	movw	r3, #28912	; 0x70f0
   14798:	mvn	r2, #0
   1479c:	movt	r3, #2
   147a0:	b	1400c <__assert_fail@plt+0x2ff4>
   147a4:	movw	r3, #28912	; 0x70f0
   147a8:	mov	r1, r0
   147ac:	mov	r0, #0
   147b0:	mvn	r2, #0
   147b4:	movt	r3, #2
   147b8:	b	1400c <__assert_fail@plt+0x2ff4>
   147bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   147c0:	add	fp, sp, #24
   147c4:	sub	sp, sp, #32
   147c8:	ldr	r6, [fp, #12]
   147cc:	ldr	r7, [fp, #8]
   147d0:	mov	r4, r2
   147d4:	mov	r8, r0
   147d8:	cmp	r1, #0
   147dc:	beq	14804 <__assert_fail@plt+0x37ec>
   147e0:	movw	r2, #25220	; 0x6284
   147e4:	mov	r5, r1
   147e8:	str	r3, [sp, #4]
   147ec:	str	r4, [sp]
   147f0:	mov	r0, r8
   147f4:	mov	r1, #1
   147f8:	movt	r2, #1
   147fc:	mov	r3, r5
   14800:	b	1481c <__assert_fail@plt+0x3804>
   14804:	movw	r2, #25232	; 0x6290
   14808:	str	r3, [sp]
   1480c:	mov	r0, r8
   14810:	mov	r1, #1
   14814:	mov	r3, r4
   14818:	movt	r2, #1
   1481c:	bl	10f70 <__fprintf_chk@plt>
   14820:	movw	r1, #25239	; 0x6297
   14824:	mov	r0, #0
   14828:	mov	r2, #5
   1482c:	movt	r1, #1
   14830:	bl	10e5c <dcgettext@plt>
   14834:	movw	r2, #25957	; 0x6565
   14838:	mov	r3, r0
   1483c:	movw	r0, #2022	; 0x7e6
   14840:	mov	r1, #1
   14844:	str	r0, [sp]
   14848:	movt	r2, #1
   1484c:	mov	r0, r8
   14850:	bl	10f70 <__fprintf_chk@plt>
   14854:	movw	r4, #23872	; 0x5d40
   14858:	mov	r1, r8
   1485c:	movt	r4, #1
   14860:	mov	r0, r4
   14864:	bl	10dd8 <fputs_unlocked@plt>
   14868:	movw	r1, #25243	; 0x629b
   1486c:	mov	r0, #0
   14870:	mov	r2, #5
   14874:	movt	r1, #1
   14878:	bl	10e5c <dcgettext@plt>
   1487c:	movw	r3, #25414	; 0x6346
   14880:	mov	r2, r0
   14884:	mov	r0, r8
   14888:	mov	r1, #1
   1488c:	movt	r3, #1
   14890:	bl	10f70 <__fprintf_chk@plt>
   14894:	mov	r0, r4
   14898:	mov	r1, r8
   1489c:	bl	10dd8 <fputs_unlocked@plt>
   148a0:	cmp	r6, #9
   148a4:	bhi	148e0 <__assert_fail@plt+0x38c8>
   148a8:	add	r0, pc, #0
   148ac:	ldr	pc, [r0, r6, lsl #2]
   148b0:	ldrdeq	r4, [r1], -r8
   148b4:	andeq	r4, r1, ip, ror #17
   148b8:	andeq	r4, r1, ip, lsl r9
   148bc:	andeq	r4, r1, r4, asr #18
   148c0:	andeq	r4, r1, ip, ror #18
   148c4:	muleq	r1, r4, r9
   148c8:			; <UNDEFINED> instruction: 0x000149bc
   148cc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   148d0:	muleq	r1, ip, sl
   148d4:	andeq	r4, r1, r4, asr #20
   148d8:	sub	sp, fp, #24
   148dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148e0:	movw	r1, #25767	; 0x64a7
   148e4:	movt	r1, #1
   148e8:	b	14a4c <__assert_fail@plt+0x3a34>
   148ec:	movw	r1, #25448	; 0x6368
   148f0:	mov	r0, #0
   148f4:	mov	r2, #5
   148f8:	movt	r1, #1
   148fc:	bl	10e5c <dcgettext@plt>
   14900:	ldr	r3, [r7]
   14904:	mov	r2, r0
   14908:	mov	r0, r8
   1490c:	mov	r1, #1
   14910:	sub	sp, fp, #24
   14914:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14918:	b	10f70 <__fprintf_chk@plt>
   1491c:	movw	r1, #25464	; 0x6378
   14920:	mov	r0, #0
   14924:	mov	r2, #5
   14928:	movt	r1, #1
   1492c:	bl	10e5c <dcgettext@plt>
   14930:	mov	r2, r0
   14934:	ldr	r3, [r7]
   14938:	ldr	r0, [r7, #4]
   1493c:	str	r0, [sp]
   14940:	b	14a30 <__assert_fail@plt+0x3a18>
   14944:	movw	r1, #25487	; 0x638f
   14948:	mov	r0, #0
   1494c:	mov	r2, #5
   14950:	movt	r1, #1
   14954:	bl	10e5c <dcgettext@plt>
   14958:	ldr	r3, [r7]
   1495c:	mov	r2, r0
   14960:	ldmib	r7, {r0, r1}
   14964:	stm	sp, {r0, r1}
   14968:	b	14a30 <__assert_fail@plt+0x3a18>
   1496c:	movw	r1, #25515	; 0x63ab
   14970:	mov	r0, #0
   14974:	mov	r2, #5
   14978:	movt	r1, #1
   1497c:	bl	10e5c <dcgettext@plt>
   14980:	ldr	r3, [r7]
   14984:	mov	r2, r0
   14988:	ldmib	r7, {r0, r1, r7}
   1498c:	stm	sp, {r0, r1, r7}
   14990:	b	14a30 <__assert_fail@plt+0x3a18>
   14994:	movw	r1, #25547	; 0x63cb
   14998:	mov	r0, #0
   1499c:	mov	r2, #5
   149a0:	movt	r1, #1
   149a4:	bl	10e5c <dcgettext@plt>
   149a8:	ldr	r3, [r7]
   149ac:	mov	r2, r0
   149b0:	ldmib	r7, {r0, r1, r6, r7}
   149b4:	stm	sp, {r0, r1, r6, r7}
   149b8:	b	14a30 <__assert_fail@plt+0x3a18>
   149bc:	movw	r1, #25583	; 0x63ef
   149c0:	mov	r0, #0
   149c4:	mov	r2, #5
   149c8:	movt	r1, #1
   149cc:	bl	10e5c <dcgettext@plt>
   149d0:	ldr	r3, [r7]
   149d4:	mov	r2, r0
   149d8:	ldmib	r7, {r0, r1, r6}
   149dc:	ldr	r5, [r7, #16]
   149e0:	ldr	r7, [r7, #20]
   149e4:	stm	sp, {r0, r1, r6}
   149e8:	str	r5, [sp, #12]
   149ec:	str	r7, [sp, #16]
   149f0:	b	14a30 <__assert_fail@plt+0x3a18>
   149f4:	movw	r1, #25623	; 0x6417
   149f8:	mov	r0, #0
   149fc:	mov	r2, #5
   14a00:	movt	r1, #1
   14a04:	bl	10e5c <dcgettext@plt>
   14a08:	ldr	r3, [r7]
   14a0c:	mov	r2, r0
   14a10:	ldmib	r7, {r0, r1, r6}
   14a14:	ldr	r5, [r7, #16]
   14a18:	ldr	r4, [r7, #20]
   14a1c:	ldr	r7, [r7, #24]
   14a20:	stm	sp, {r0, r1, r6}
   14a24:	str	r5, [sp, #12]
   14a28:	str	r4, [sp, #16]
   14a2c:	str	r7, [sp, #20]
   14a30:	mov	r0, r8
   14a34:	mov	r1, #1
   14a38:	bl	10f70 <__fprintf_chk@plt>
   14a3c:	sub	sp, fp, #24
   14a40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a44:	movw	r1, #25715	; 0x6473
   14a48:	movt	r1, #1
   14a4c:	mov	r0, #0
   14a50:	mov	r2, #5
   14a54:	bl	10e5c <dcgettext@plt>
   14a58:	mov	ip, r0
   14a5c:	ldr	r3, [r7]
   14a60:	ldr	r0, [r7, #4]
   14a64:	ldr	r1, [r7, #8]
   14a68:	ldr	r6, [r7, #12]
   14a6c:	ldr	r5, [r7, #16]
   14a70:	ldr	r4, [r7, #20]
   14a74:	ldr	r2, [r7, #24]
   14a78:	ldr	lr, [r7, #28]
   14a7c:	ldr	r7, [r7, #32]
   14a80:	stm	sp, {r0, r1, r6}
   14a84:	str	r5, [sp, #12]
   14a88:	str	r4, [sp, #16]
   14a8c:	str	r2, [sp, #20]
   14a90:	str	lr, [sp, #24]
   14a94:	str	r7, [sp, #28]
   14a98:	b	14ae0 <__assert_fail@plt+0x3ac8>
   14a9c:	movw	r1, #25667	; 0x6443
   14aa0:	mov	r0, #0
   14aa4:	mov	r2, #5
   14aa8:	movt	r1, #1
   14aac:	bl	10e5c <dcgettext@plt>
   14ab0:	mov	ip, r0
   14ab4:	ldr	r3, [r7]
   14ab8:	ldmib	r7, {r0, r1, r6}
   14abc:	ldr	r5, [r7, #16]
   14ac0:	ldr	r4, [r7, #20]
   14ac4:	ldr	r2, [r7, #24]
   14ac8:	ldr	r7, [r7, #28]
   14acc:	stm	sp, {r0, r1, r6}
   14ad0:	str	r5, [sp, #12]
   14ad4:	str	r4, [sp, #16]
   14ad8:	str	r2, [sp, #20]
   14adc:	str	r7, [sp, #24]
   14ae0:	mov	r0, r8
   14ae4:	mov	r1, #1
   14ae8:	mov	r2, ip
   14aec:	bl	10f70 <__fprintf_chk@plt>
   14af0:	sub	sp, fp, #24
   14af4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14af8:	push	{r4, sl, fp, lr}
   14afc:	add	fp, sp, #8
   14b00:	sub	sp, sp, #8
   14b04:	ldr	ip, [fp, #8]
   14b08:	mov	lr, #0
   14b0c:	ldr	r4, [ip, lr, lsl #2]
   14b10:	add	lr, lr, #1
   14b14:	cmp	r4, #0
   14b18:	bne	14b0c <__assert_fail@plt+0x3af4>
   14b1c:	sub	r4, lr, #1
   14b20:	str	ip, [sp]
   14b24:	str	r4, [sp, #4]
   14b28:	bl	147bc <__assert_fail@plt+0x37a4>
   14b2c:	sub	sp, fp, #8
   14b30:	pop	{r4, sl, fp, pc}
   14b34:	push	{fp, lr}
   14b38:	mov	fp, sp
   14b3c:	sub	sp, sp, #48	; 0x30
   14b40:	ldr	ip, [fp, #8]
   14b44:	ldr	lr, [ip]
   14b48:	cmp	lr, #0
   14b4c:	str	lr, [sp, #8]
   14b50:	beq	14bec <__assert_fail@plt+0x3bd4>
   14b54:	ldr	lr, [ip, #4]
   14b58:	cmp	lr, #0
   14b5c:	str	lr, [sp, #12]
   14b60:	beq	14bf4 <__assert_fail@plt+0x3bdc>
   14b64:	ldr	lr, [ip, #8]
   14b68:	cmp	lr, #0
   14b6c:	str	lr, [sp, #16]
   14b70:	beq	14bfc <__assert_fail@plt+0x3be4>
   14b74:	ldr	lr, [ip, #12]
   14b78:	cmp	lr, #0
   14b7c:	str	lr, [sp, #20]
   14b80:	beq	14c04 <__assert_fail@plt+0x3bec>
   14b84:	ldr	lr, [ip, #16]
   14b88:	cmp	lr, #0
   14b8c:	str	lr, [sp, #24]
   14b90:	beq	14c0c <__assert_fail@plt+0x3bf4>
   14b94:	ldr	lr, [ip, #20]
   14b98:	cmp	lr, #0
   14b9c:	str	lr, [sp, #28]
   14ba0:	beq	14c14 <__assert_fail@plt+0x3bfc>
   14ba4:	ldr	lr, [ip, #24]
   14ba8:	cmp	lr, #0
   14bac:	str	lr, [sp, #32]
   14bb0:	beq	14c1c <__assert_fail@plt+0x3c04>
   14bb4:	ldr	lr, [ip, #28]
   14bb8:	cmp	lr, #0
   14bbc:	str	lr, [sp, #36]	; 0x24
   14bc0:	beq	14c24 <__assert_fail@plt+0x3c0c>
   14bc4:	ldr	lr, [ip, #32]
   14bc8:	cmp	lr, #0
   14bcc:	str	lr, [sp, #40]	; 0x28
   14bd0:	beq	14c2c <__assert_fail@plt+0x3c14>
   14bd4:	ldr	lr, [ip, #36]	; 0x24
   14bd8:	mov	ip, #10
   14bdc:	cmp	lr, #0
   14be0:	str	lr, [sp, #44]	; 0x2c
   14be4:	movweq	ip, #9
   14be8:	b	14c30 <__assert_fail@plt+0x3c18>
   14bec:	mov	ip, #0
   14bf0:	b	14c30 <__assert_fail@plt+0x3c18>
   14bf4:	mov	ip, #1
   14bf8:	b	14c30 <__assert_fail@plt+0x3c18>
   14bfc:	mov	ip, #2
   14c00:	b	14c30 <__assert_fail@plt+0x3c18>
   14c04:	mov	ip, #3
   14c08:	b	14c30 <__assert_fail@plt+0x3c18>
   14c0c:	mov	ip, #4
   14c10:	b	14c30 <__assert_fail@plt+0x3c18>
   14c14:	mov	ip, #5
   14c18:	b	14c30 <__assert_fail@plt+0x3c18>
   14c1c:	mov	ip, #6
   14c20:	b	14c30 <__assert_fail@plt+0x3c18>
   14c24:	mov	ip, #7
   14c28:	b	14c30 <__assert_fail@plt+0x3c18>
   14c2c:	mov	ip, #8
   14c30:	add	lr, sp, #8
   14c34:	str	ip, [sp, #4]
   14c38:	str	lr, [sp]
   14c3c:	bl	147bc <__assert_fail@plt+0x37a4>
   14c40:	mov	sp, fp
   14c44:	pop	{fp, pc}
   14c48:	push	{fp, lr}
   14c4c:	mov	fp, sp
   14c50:	sub	sp, sp, #56	; 0x38
   14c54:	add	ip, fp, #8
   14c58:	str	ip, [sp, #12]
   14c5c:	ldr	lr, [fp, #8]
   14c60:	cmp	lr, #0
   14c64:	str	lr, [sp, #16]
   14c68:	beq	14d04 <__assert_fail@plt+0x3cec>
   14c6c:	ldr	lr, [ip, #4]
   14c70:	cmp	lr, #0
   14c74:	str	lr, [sp, #20]
   14c78:	beq	14d0c <__assert_fail@plt+0x3cf4>
   14c7c:	ldr	lr, [ip, #8]
   14c80:	cmp	lr, #0
   14c84:	str	lr, [sp, #24]
   14c88:	beq	14d14 <__assert_fail@plt+0x3cfc>
   14c8c:	ldr	lr, [ip, #12]
   14c90:	cmp	lr, #0
   14c94:	str	lr, [sp, #28]
   14c98:	beq	14d1c <__assert_fail@plt+0x3d04>
   14c9c:	ldr	lr, [ip, #16]
   14ca0:	cmp	lr, #0
   14ca4:	str	lr, [sp, #32]
   14ca8:	beq	14d24 <__assert_fail@plt+0x3d0c>
   14cac:	ldr	lr, [ip, #20]
   14cb0:	cmp	lr, #0
   14cb4:	str	lr, [sp, #36]	; 0x24
   14cb8:	beq	14d2c <__assert_fail@plt+0x3d14>
   14cbc:	ldr	lr, [ip, #24]
   14cc0:	cmp	lr, #0
   14cc4:	str	lr, [sp, #40]	; 0x28
   14cc8:	beq	14d34 <__assert_fail@plt+0x3d1c>
   14ccc:	ldr	lr, [ip, #28]
   14cd0:	cmp	lr, #0
   14cd4:	str	lr, [sp, #44]	; 0x2c
   14cd8:	beq	14d3c <__assert_fail@plt+0x3d24>
   14cdc:	ldr	lr, [ip, #32]
   14ce0:	cmp	lr, #0
   14ce4:	str	lr, [sp, #48]	; 0x30
   14ce8:	beq	14d44 <__assert_fail@plt+0x3d2c>
   14cec:	ldr	lr, [ip, #36]	; 0x24
   14cf0:	mov	ip, #10
   14cf4:	cmp	lr, #0
   14cf8:	str	lr, [sp, #52]	; 0x34
   14cfc:	movweq	ip, #9
   14d00:	b	14d48 <__assert_fail@plt+0x3d30>
   14d04:	mov	ip, #0
   14d08:	b	14d48 <__assert_fail@plt+0x3d30>
   14d0c:	mov	ip, #1
   14d10:	b	14d48 <__assert_fail@plt+0x3d30>
   14d14:	mov	ip, #2
   14d18:	b	14d48 <__assert_fail@plt+0x3d30>
   14d1c:	mov	ip, #3
   14d20:	b	14d48 <__assert_fail@plt+0x3d30>
   14d24:	mov	ip, #4
   14d28:	b	14d48 <__assert_fail@plt+0x3d30>
   14d2c:	mov	ip, #5
   14d30:	b	14d48 <__assert_fail@plt+0x3d30>
   14d34:	mov	ip, #6
   14d38:	b	14d48 <__assert_fail@plt+0x3d30>
   14d3c:	mov	ip, #7
   14d40:	b	14d48 <__assert_fail@plt+0x3d30>
   14d44:	mov	ip, #8
   14d48:	add	lr, sp, #16
   14d4c:	str	ip, [sp, #4]
   14d50:	str	lr, [sp]
   14d54:	bl	147bc <__assert_fail@plt+0x37a4>
   14d58:	mov	sp, fp
   14d5c:	pop	{fp, pc}
   14d60:	push	{fp, lr}
   14d64:	mov	fp, sp
   14d68:	movw	r0, #29004	; 0x714c
   14d6c:	movt	r0, #2
   14d70:	ldr	r1, [r0]
   14d74:	movw	r0, #23872	; 0x5d40
   14d78:	movt	r0, #1
   14d7c:	bl	10dd8 <fputs_unlocked@plt>
   14d80:	movw	r1, #25827	; 0x64e3
   14d84:	mov	r0, #0
   14d88:	mov	r2, #5
   14d8c:	movt	r1, #1
   14d90:	bl	10e5c <dcgettext@plt>
   14d94:	movw	r2, #25847	; 0x64f7
   14d98:	mov	r1, r0
   14d9c:	mov	r0, #1
   14da0:	movt	r2, #1
   14da4:	bl	10f58 <__printf_chk@plt>
   14da8:	movw	r1, #25869	; 0x650d
   14dac:	mov	r0, #0
   14db0:	mov	r2, #5
   14db4:	movt	r1, #1
   14db8:	bl	10e5c <dcgettext@plt>
   14dbc:	movw	r2, #23374	; 0x5b4e
   14dc0:	movw	r3, #23681	; 0x5c81
   14dc4:	mov	r1, r0
   14dc8:	mov	r0, #1
   14dcc:	movt	r2, #1
   14dd0:	movt	r3, #1
   14dd4:	bl	10f58 <__printf_chk@plt>
   14dd8:	movw	r1, #25889	; 0x6521
   14ddc:	mov	r0, #0
   14de0:	mov	r2, #5
   14de4:	movt	r1, #1
   14de8:	bl	10e5c <dcgettext@plt>
   14dec:	movw	r2, #25928	; 0x6548
   14df0:	mov	r1, r0
   14df4:	mov	r0, #1
   14df8:	movt	r2, #1
   14dfc:	pop	{fp, lr}
   14e00:	b	10f58 <__printf_chk@plt>
   14e04:	push	{r4, r5, r6, sl, fp, lr}
   14e08:	add	fp, sp, #16
   14e0c:	mov	r4, r2
   14e10:	mov	r5, r1
   14e14:	mov	r6, r0
   14e18:	bl	15614 <__assert_fail@plt+0x45fc>
   14e1c:	cmp	r0, #0
   14e20:	popne	{r4, r5, r6, sl, fp, pc}
   14e24:	cmp	r6, #0
   14e28:	beq	14e3c <__assert_fail@plt+0x3e24>
   14e2c:	cmp	r5, #0
   14e30:	cmpne	r4, #0
   14e34:	bne	14e3c <__assert_fail@plt+0x3e24>
   14e38:	pop	{r4, r5, r6, sl, fp, pc}
   14e3c:	bl	153dc <__assert_fail@plt+0x43c4>
   14e40:	push	{r4, r5, r6, sl, fp, lr}
   14e44:	add	fp, sp, #16
   14e48:	mov	r4, r2
   14e4c:	mov	r5, r1
   14e50:	mov	r6, r0
   14e54:	bl	15614 <__assert_fail@plt+0x45fc>
   14e58:	cmp	r0, #0
   14e5c:	popne	{r4, r5, r6, sl, fp, pc}
   14e60:	cmp	r6, #0
   14e64:	beq	14e78 <__assert_fail@plt+0x3e60>
   14e68:	cmp	r5, #0
   14e6c:	cmpne	r4, #0
   14e70:	bne	14e78 <__assert_fail@plt+0x3e60>
   14e74:	pop	{r4, r5, r6, sl, fp, pc}
   14e78:	bl	153dc <__assert_fail@plt+0x43c4>
   14e7c:	push	{fp, lr}
   14e80:	mov	fp, sp
   14e84:	bl	15474 <__assert_fail@plt+0x445c>
   14e88:	cmp	r0, #0
   14e8c:	popne	{fp, pc}
   14e90:	bl	153dc <__assert_fail@plt+0x43c4>
   14e94:	push	{fp, lr}
   14e98:	mov	fp, sp
   14e9c:	bl	15474 <__assert_fail@plt+0x445c>
   14ea0:	cmp	r0, #0
   14ea4:	popne	{fp, pc}
   14ea8:	bl	153dc <__assert_fail@plt+0x43c4>
   14eac:	push	{fp, lr}
   14eb0:	mov	fp, sp
   14eb4:	bl	15474 <__assert_fail@plt+0x445c>
   14eb8:	cmp	r0, #0
   14ebc:	popne	{fp, pc}
   14ec0:	bl	153dc <__assert_fail@plt+0x43c4>
   14ec4:	push	{r4, r5, fp, lr}
   14ec8:	add	fp, sp, #8
   14ecc:	mov	r4, r1
   14ed0:	mov	r5, r0
   14ed4:	bl	154a4 <__assert_fail@plt+0x448c>
   14ed8:	cmp	r0, #0
   14edc:	popne	{r4, r5, fp, pc}
   14ee0:	cmp	r5, #0
   14ee4:	beq	14ef4 <__assert_fail@plt+0x3edc>
   14ee8:	cmp	r4, #0
   14eec:	bne	14ef4 <__assert_fail@plt+0x3edc>
   14ef0:	pop	{r4, r5, fp, pc}
   14ef4:	bl	153dc <__assert_fail@plt+0x43c4>
   14ef8:	push	{fp, lr}
   14efc:	mov	fp, sp
   14f00:	cmp	r1, #0
   14f04:	orreq	r1, r1, #1
   14f08:	bl	154a4 <__assert_fail@plt+0x448c>
   14f0c:	cmp	r0, #0
   14f10:	popne	{fp, pc}
   14f14:	bl	153dc <__assert_fail@plt+0x43c4>
   14f18:	push	{fp, lr}
   14f1c:	mov	fp, sp
   14f20:	clz	r3, r2
   14f24:	lsr	ip, r3, #5
   14f28:	clz	r3, r1
   14f2c:	lsr	r3, r3, #5
   14f30:	orrs	r3, r3, ip
   14f34:	movwne	r1, #1
   14f38:	movwne	r2, #1
   14f3c:	bl	15614 <__assert_fail@plt+0x45fc>
   14f40:	cmp	r0, #0
   14f44:	popne	{fp, pc}
   14f48:	bl	153dc <__assert_fail@plt+0x43c4>
   14f4c:	push	{fp, lr}
   14f50:	mov	fp, sp
   14f54:	mov	r2, r1
   14f58:	mov	r1, r0
   14f5c:	mov	r0, #0
   14f60:	bl	15614 <__assert_fail@plt+0x45fc>
   14f64:	cmp	r0, #0
   14f68:	popne	{fp, pc}
   14f6c:	bl	153dc <__assert_fail@plt+0x43c4>
   14f70:	push	{fp, lr}
   14f74:	mov	fp, sp
   14f78:	mov	r2, r1
   14f7c:	mov	r1, r0
   14f80:	clz	r0, r2
   14f84:	clz	r3, r1
   14f88:	lsr	r0, r0, #5
   14f8c:	lsr	r3, r3, #5
   14f90:	orrs	r0, r3, r0
   14f94:	movwne	r1, #1
   14f98:	movwne	r2, #1
   14f9c:	mov	r0, #0
   14fa0:	bl	15614 <__assert_fail@plt+0x45fc>
   14fa4:	cmp	r0, #0
   14fa8:	popne	{fp, pc}
   14fac:	bl	153dc <__assert_fail@plt+0x43c4>
   14fb0:	push	{r4, r5, r6, sl, fp, lr}
   14fb4:	add	fp, sp, #16
   14fb8:	ldr	r5, [r1]
   14fbc:	mov	r4, r1
   14fc0:	mov	r6, r0
   14fc4:	cmp	r0, #0
   14fc8:	beq	14fe0 <__assert_fail@plt+0x3fc8>
   14fcc:	mov	r0, #1
   14fd0:	add	r0, r0, r5, lsr #1
   14fd4:	adds	r5, r5, r0
   14fd8:	bcc	14fe8 <__assert_fail@plt+0x3fd0>
   14fdc:	b	15024 <__assert_fail@plt+0x400c>
   14fe0:	cmp	r5, #0
   14fe4:	movweq	r5, #64	; 0x40
   14fe8:	mov	r0, r6
   14fec:	mov	r1, r5
   14ff0:	mov	r2, #1
   14ff4:	bl	15614 <__assert_fail@plt+0x45fc>
   14ff8:	cmp	r5, #0
   14ffc:	mov	r1, r5
   15000:	movwne	r1, #1
   15004:	cmp	r0, #0
   15008:	bne	1501c <__assert_fail@plt+0x4004>
   1500c:	clz	r2, r6
   15010:	lsr	r2, r2, #5
   15014:	orrs	r1, r2, r1
   15018:	bne	15024 <__assert_fail@plt+0x400c>
   1501c:	str	r5, [r4]
   15020:	pop	{r4, r5, r6, sl, fp, pc}
   15024:	bl	153dc <__assert_fail@plt+0x43c4>
   15028:	push	{r4, r5, r6, r7, fp, lr}
   1502c:	add	fp, sp, #16
   15030:	ldr	r5, [r1]
   15034:	mov	r6, r2
   15038:	mov	r4, r1
   1503c:	mov	r7, r0
   15040:	cmp	r0, #0
   15044:	beq	1505c <__assert_fail@plt+0x4044>
   15048:	mov	r0, #1
   1504c:	add	r0, r0, r5, lsr #1
   15050:	adds	r5, r5, r0
   15054:	bcc	15074 <__assert_fail@plt+0x405c>
   15058:	b	150a8 <__assert_fail@plt+0x4090>
   1505c:	cmp	r5, #0
   15060:	bne	15074 <__assert_fail@plt+0x405c>
   15064:	mov	r0, #64	; 0x40
   15068:	cmp	r6, #64	; 0x40
   1506c:	udiv	r5, r0, r6
   15070:	addhi	r5, r5, #1
   15074:	mov	r0, r7
   15078:	mov	r1, r5
   1507c:	mov	r2, r6
   15080:	bl	15614 <__assert_fail@plt+0x45fc>
   15084:	cmp	r0, #0
   15088:	bne	150a0 <__assert_fail@plt+0x4088>
   1508c:	cmp	r7, #0
   15090:	beq	150a8 <__assert_fail@plt+0x4090>
   15094:	cmp	r6, #0
   15098:	cmpne	r5, #0
   1509c:	bne	150a8 <__assert_fail@plt+0x4090>
   150a0:	str	r5, [r4]
   150a4:	pop	{r4, r5, r6, r7, fp, pc}
   150a8:	bl	153dc <__assert_fail@plt+0x43c4>
   150ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   150b0:	add	fp, sp, #24
   150b4:	mov	r8, r1
   150b8:	ldr	r1, [r1]
   150bc:	mov	r5, r0
   150c0:	add	r0, r1, r1, asr #1
   150c4:	cmp	r0, r1
   150c8:	mvnvs	r0, #-2147483648	; 0x80000000
   150cc:	cmp	r0, r3
   150d0:	mov	r7, r0
   150d4:	movgt	r7, r3
   150d8:	cmn	r3, #1
   150dc:	movle	r7, r0
   150e0:	ldr	r0, [fp, #8]
   150e4:	cmn	r0, #1
   150e8:	ble	15110 <__assert_fail@plt+0x40f8>
   150ec:	cmp	r0, #0
   150f0:	beq	15164 <__assert_fail@plt+0x414c>
   150f4:	cmn	r7, #1
   150f8:	ble	15138 <__assert_fail@plt+0x4120>
   150fc:	mvn	r4, #-2147483648	; 0x80000000
   15100:	udiv	r6, r4, r0
   15104:	cmp	r6, r7
   15108:	bge	15164 <__assert_fail@plt+0x414c>
   1510c:	b	15174 <__assert_fail@plt+0x415c>
   15110:	cmn	r7, #1
   15114:	ble	15154 <__assert_fail@plt+0x413c>
   15118:	cmn	r0, #1
   1511c:	beq	15164 <__assert_fail@plt+0x414c>
   15120:	mov	r6, #-2147483648	; 0x80000000
   15124:	mvn	r4, #-2147483648	; 0x80000000
   15128:	sdiv	r6, r6, r0
   1512c:	cmp	r6, r7
   15130:	bge	15164 <__assert_fail@plt+0x414c>
   15134:	b	15174 <__assert_fail@plt+0x415c>
   15138:	beq	15164 <__assert_fail@plt+0x414c>
   1513c:	mov	r6, #-2147483648	; 0x80000000
   15140:	mvn	r4, #-2147483648	; 0x80000000
   15144:	sdiv	r6, r6, r7
   15148:	cmp	r6, r0
   1514c:	bge	15164 <__assert_fail@plt+0x414c>
   15150:	b	15174 <__assert_fail@plt+0x415c>
   15154:	mvn	r4, #-2147483648	; 0x80000000
   15158:	sdiv	r6, r4, r0
   1515c:	cmp	r7, r6
   15160:	blt	15174 <__assert_fail@plt+0x415c>
   15164:	mul	r6, r7, r0
   15168:	mov	r4, #64	; 0x40
   1516c:	cmp	r6, #63	; 0x3f
   15170:	bgt	1517c <__assert_fail@plt+0x4164>
   15174:	sdiv	r7, r4, r0
   15178:	mul	r6, r7, r0
   1517c:	cmp	r5, #0
   15180:	moveq	r4, #0
   15184:	streq	r4, [r8]
   15188:	sub	r4, r7, r1
   1518c:	cmp	r4, r2
   15190:	bge	1523c <__assert_fail@plt+0x4224>
   15194:	add	r7, r1, r2
   15198:	mov	r6, #0
   1519c:	mov	r2, #0
   151a0:	cmp	r7, r3
   151a4:	movwgt	r6, #1
   151a8:	cmn	r3, #1
   151ac:	movwgt	r2, #1
   151b0:	cmp	r7, r1
   151b4:	bvs	15270 <__assert_fail@plt+0x4258>
   151b8:	ands	r1, r2, r6
   151bc:	bne	15270 <__assert_fail@plt+0x4258>
   151c0:	cmn	r0, #1
   151c4:	ble	151ec <__assert_fail@plt+0x41d4>
   151c8:	cmp	r0, #0
   151cc:	beq	15238 <__assert_fail@plt+0x4220>
   151d0:	cmn	r7, #1
   151d4:	ble	15210 <__assert_fail@plt+0x41f8>
   151d8:	mvn	r1, #-2147483648	; 0x80000000
   151dc:	udiv	r1, r1, r0
   151e0:	cmp	r1, r7
   151e4:	bge	15238 <__assert_fail@plt+0x4220>
   151e8:	b	15270 <__assert_fail@plt+0x4258>
   151ec:	cmn	r7, #1
   151f0:	ble	15228 <__assert_fail@plt+0x4210>
   151f4:	cmn	r0, #1
   151f8:	beq	15238 <__assert_fail@plt+0x4220>
   151fc:	mov	r1, #-2147483648	; 0x80000000
   15200:	sdiv	r1, r1, r0
   15204:	cmp	r1, r7
   15208:	bge	15238 <__assert_fail@plt+0x4220>
   1520c:	b	15270 <__assert_fail@plt+0x4258>
   15210:	beq	15238 <__assert_fail@plt+0x4220>
   15214:	mov	r1, #-2147483648	; 0x80000000
   15218:	sdiv	r1, r1, r7
   1521c:	cmp	r1, r0
   15220:	bge	15238 <__assert_fail@plt+0x4220>
   15224:	b	15270 <__assert_fail@plt+0x4258>
   15228:	mvn	r1, #-2147483648	; 0x80000000
   1522c:	sdiv	r1, r1, r0
   15230:	cmp	r7, r1
   15234:	blt	15270 <__assert_fail@plt+0x4258>
   15238:	mul	r6, r7, r0
   1523c:	mov	r0, r5
   15240:	mov	r1, r6
   15244:	bl	154a4 <__assert_fail@plt+0x448c>
   15248:	cmp	r6, #0
   1524c:	movwne	r6, #1
   15250:	cmp	r0, #0
   15254:	bne	15268 <__assert_fail@plt+0x4250>
   15258:	clz	r1, r5
   1525c:	lsr	r1, r1, #5
   15260:	orrs	r1, r1, r6
   15264:	bne	15270 <__assert_fail@plt+0x4258>
   15268:	str	r7, [r8]
   1526c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15270:	bl	153dc <__assert_fail@plt+0x43c4>
   15274:	push	{fp, lr}
   15278:	mov	fp, sp
   1527c:	mov	r1, #1
   15280:	bl	15420 <__assert_fail@plt+0x4408>
   15284:	cmp	r0, #0
   15288:	popne	{fp, pc}
   1528c:	bl	153dc <__assert_fail@plt+0x43c4>
   15290:	push	{fp, lr}
   15294:	mov	fp, sp
   15298:	bl	15420 <__assert_fail@plt+0x4408>
   1529c:	cmp	r0, #0
   152a0:	popne	{fp, pc}
   152a4:	bl	153dc <__assert_fail@plt+0x43c4>
   152a8:	push	{fp, lr}
   152ac:	mov	fp, sp
   152b0:	mov	r1, #1
   152b4:	bl	15420 <__assert_fail@plt+0x4408>
   152b8:	cmp	r0, #0
   152bc:	popne	{fp, pc}
   152c0:	bl	153dc <__assert_fail@plt+0x43c4>
   152c4:	push	{fp, lr}
   152c8:	mov	fp, sp
   152cc:	bl	15420 <__assert_fail@plt+0x4408>
   152d0:	cmp	r0, #0
   152d4:	popne	{fp, pc}
   152d8:	bl	153dc <__assert_fail@plt+0x43c4>
   152dc:	push	{r4, r5, r6, sl, fp, lr}
   152e0:	add	fp, sp, #16
   152e4:	mov	r5, r0
   152e8:	mov	r0, r1
   152ec:	mov	r4, r1
   152f0:	bl	15474 <__assert_fail@plt+0x445c>
   152f4:	cmp	r0, #0
   152f8:	beq	15314 <__assert_fail@plt+0x42fc>
   152fc:	mov	r1, r5
   15300:	mov	r2, r4
   15304:	mov	r6, r0
   15308:	bl	10e2c <memcpy@plt>
   1530c:	mov	r0, r6
   15310:	pop	{r4, r5, r6, sl, fp, pc}
   15314:	bl	153dc <__assert_fail@plt+0x43c4>
   15318:	push	{r4, r5, r6, sl, fp, lr}
   1531c:	add	fp, sp, #16
   15320:	mov	r5, r0
   15324:	mov	r0, r1
   15328:	mov	r4, r1
   1532c:	bl	15474 <__assert_fail@plt+0x445c>
   15330:	cmp	r0, #0
   15334:	beq	15350 <__assert_fail@plt+0x4338>
   15338:	mov	r1, r5
   1533c:	mov	r2, r4
   15340:	mov	r6, r0
   15344:	bl	10e2c <memcpy@plt>
   15348:	mov	r0, r6
   1534c:	pop	{r4, r5, r6, sl, fp, pc}
   15350:	bl	153dc <__assert_fail@plt+0x43c4>
   15354:	push	{r4, r5, r6, sl, fp, lr}
   15358:	add	fp, sp, #16
   1535c:	mov	r5, r0
   15360:	add	r0, r1, #1
   15364:	mov	r4, r1
   15368:	bl	15474 <__assert_fail@plt+0x445c>
   1536c:	cmp	r0, #0
   15370:	beq	15398 <__assert_fail@plt+0x4380>
   15374:	mov	r6, r0
   15378:	mov	r0, #0
   1537c:	mov	r1, r5
   15380:	mov	r2, r4
   15384:	strb	r0, [r6, r4]
   15388:	mov	r0, r6
   1538c:	bl	10e2c <memcpy@plt>
   15390:	mov	r0, r6
   15394:	pop	{r4, r5, r6, sl, fp, pc}
   15398:	bl	153dc <__assert_fail@plt+0x43c4>
   1539c:	push	{r4, r5, r6, sl, fp, lr}
   153a0:	add	fp, sp, #16
   153a4:	mov	r4, r0
   153a8:	bl	10f28 <strlen@plt>
   153ac:	add	r5, r0, #1
   153b0:	mov	r0, r5
   153b4:	bl	15474 <__assert_fail@plt+0x445c>
   153b8:	cmp	r0, #0
   153bc:	beq	153d8 <__assert_fail@plt+0x43c0>
   153c0:	mov	r1, r4
   153c4:	mov	r2, r5
   153c8:	mov	r6, r0
   153cc:	bl	10e2c <memcpy@plt>
   153d0:	mov	r0, r6
   153d4:	pop	{r4, r5, r6, sl, fp, pc}
   153d8:	bl	153dc <__assert_fail@plt+0x43c4>
   153dc:	push	{fp, lr}
   153e0:	mov	fp, sp
   153e4:	movw	r0, #28908	; 0x70ec
   153e8:	movw	r1, #26004	; 0x6594
   153ec:	mov	r2, #5
   153f0:	movt	r0, #2
   153f4:	movt	r1, #1
   153f8:	ldr	r4, [r0]
   153fc:	mov	r0, #0
   15400:	bl	10e5c <dcgettext@plt>
   15404:	movw	r2, #24277	; 0x5ed5
   15408:	mov	r3, r0
   1540c:	mov	r0, r4
   15410:	mov	r1, #0
   15414:	movt	r2, #1
   15418:	bl	10ec8 <error@plt>
   1541c:	bl	11000 <abort@plt>
   15420:	clz	r2, r1
   15424:	clz	r3, r0
   15428:	lsr	r2, r2, #5
   1542c:	lsr	r3, r3, #5
   15430:	orrs	r2, r3, r2
   15434:	movwne	r1, #1
   15438:	movwne	r0, #1
   1543c:	cmp	r1, #0
   15440:	beq	15470 <__assert_fail@plt+0x4458>
   15444:	mvn	r2, #-2147483648	; 0x80000000
   15448:	udiv	r2, r2, r1
   1544c:	cmp	r2, r0
   15450:	bcs	15470 <__assert_fail@plt+0x4458>
   15454:	push	{fp, lr}
   15458:	mov	fp, sp
   1545c:	bl	10f34 <__errno_location@plt>
   15460:	mov	r1, #12
   15464:	str	r1, [r0]
   15468:	mov	r0, #0
   1546c:	pop	{fp, pc}
   15470:	b	10dcc <calloc@plt>
   15474:	cmp	r0, #0
   15478:	movweq	r0, #1
   1547c:	cmn	r0, #1
   15480:	ble	15488 <__assert_fail@plt+0x4470>
   15484:	b	10ed4 <malloc@plt>
   15488:	push	{fp, lr}
   1548c:	mov	fp, sp
   15490:	bl	10f34 <__errno_location@plt>
   15494:	mov	r1, #12
   15498:	str	r1, [r0]
   1549c:	mov	r0, #0
   154a0:	pop	{fp, pc}
   154a4:	push	{fp, lr}
   154a8:	mov	fp, sp
   154ac:	cmp	r0, #0
   154b0:	beq	154cc <__assert_fail@plt+0x44b4>
   154b4:	cmp	r1, #0
   154b8:	beq	154d8 <__assert_fail@plt+0x44c0>
   154bc:	cmn	r1, #1
   154c0:	ble	154e4 <__assert_fail@plt+0x44cc>
   154c4:	pop	{fp, lr}
   154c8:	b	10e68 <realloc@plt>
   154cc:	mov	r0, r1
   154d0:	pop	{fp, lr}
   154d4:	b	15474 <__assert_fail@plt+0x445c>
   154d8:	bl	1275c <__assert_fail@plt+0x1744>
   154dc:	mov	r0, #0
   154e0:	pop	{fp, pc}
   154e4:	bl	10f34 <__errno_location@plt>
   154e8:	mov	r1, #12
   154ec:	str	r1, [r0]
   154f0:	mov	r0, #0
   154f4:	pop	{fp, pc}
   154f8:	push	{r4, r5, r6, sl, fp, lr}
   154fc:	add	fp, sp, #16
   15500:	mov	r4, r0
   15504:	bl	10eb0 <__fpending@plt>
   15508:	ldr	r6, [r4]
   1550c:	mov	r5, r0
   15510:	mov	r0, r4
   15514:	bl	12658 <__assert_fail@plt+0x1640>
   15518:	tst	r6, #32
   1551c:	bne	15554 <__assert_fail@plt+0x453c>
   15520:	cmp	r0, #0
   15524:	mov	r4, r0
   15528:	mvnne	r4, #0
   1552c:	cmp	r5, #0
   15530:	bne	15560 <__assert_fail@plt+0x4548>
   15534:	cmp	r0, #0
   15538:	beq	15560 <__assert_fail@plt+0x4548>
   1553c:	bl	10f34 <__errno_location@plt>
   15540:	ldr	r0, [r0]
   15544:	subs	r4, r0, #9
   15548:	mvnne	r4, #0
   1554c:	mov	r0, r4
   15550:	pop	{r4, r5, r6, sl, fp, pc}
   15554:	mvn	r4, #0
   15558:	cmp	r0, #0
   1555c:	beq	15568 <__assert_fail@plt+0x4550>
   15560:	mov	r0, r4
   15564:	pop	{r4, r5, r6, sl, fp, pc}
   15568:	bl	10f34 <__errno_location@plt>
   1556c:	mov	r1, #0
   15570:	str	r1, [r0]
   15574:	mov	r0, r4
   15578:	pop	{r4, r5, r6, sl, fp, pc}
   1557c:	push	{fp, lr}
   15580:	mov	fp, sp
   15584:	mov	r0, #14
   15588:	bl	10fc4 <nl_langinfo@plt>
   1558c:	movw	r1, #23873	; 0x5d41
   15590:	cmp	r0, #0
   15594:	movt	r1, #1
   15598:	movne	r1, r0
   1559c:	movw	r0, #26021	; 0x65a5
   155a0:	ldrb	r2, [r1]
   155a4:	movt	r0, #1
   155a8:	cmp	r2, #0
   155ac:	movne	r0, r1
   155b0:	pop	{fp, pc}
   155b4:	push	{r4, r5, r6, r7, fp, lr}
   155b8:	add	fp, sp, #16
   155bc:	sub	sp, sp, #8
   155c0:	add	r5, sp, #4
   155c4:	cmp	r0, #0
   155c8:	mov	r7, r2
   155cc:	mov	r4, r1
   155d0:	movne	r5, r0
   155d4:	mov	r0, r5
   155d8:	bl	10ebc <mbrtowc@plt>
   155dc:	mov	r6, r0
   155e0:	cmp	r7, #0
   155e4:	beq	15608 <__assert_fail@plt+0x45f0>
   155e8:	cmn	r6, #2
   155ec:	bcc	15608 <__assert_fail@plt+0x45f0>
   155f0:	mov	r0, #0
   155f4:	bl	15650 <__assert_fail@plt+0x4638>
   155f8:	cmp	r0, #0
   155fc:	ldrbeq	r0, [r4]
   15600:	moveq	r6, #1
   15604:	streq	r0, [r5]
   15608:	mov	r0, r6
   1560c:	sub	sp, fp, #16
   15610:	pop	{r4, r5, r6, r7, fp, pc}
   15614:	cmp	r2, #0
   15618:	beq	15648 <__assert_fail@plt+0x4630>
   1561c:	mvn	r3, #0
   15620:	udiv	r3, r3, r2
   15624:	cmp	r3, r1
   15628:	bcs	15648 <__assert_fail@plt+0x4630>
   1562c:	push	{fp, lr}
   15630:	mov	fp, sp
   15634:	bl	10f34 <__errno_location@plt>
   15638:	mov	r1, #12
   1563c:	str	r1, [r0]
   15640:	mov	r0, #0
   15644:	pop	{fp, pc}
   15648:	mul	r1, r2, r1
   1564c:	b	154a4 <__assert_fail@plt+0x448c>
   15650:	push	{r4, sl, fp, lr}
   15654:	add	fp, sp, #8
   15658:	sub	sp, sp, #264	; 0x108
   1565c:	add	r1, sp, #7
   15660:	movw	r2, #257	; 0x101
   15664:	bl	156b4 <__assert_fail@plt+0x469c>
   15668:	mov	r4, #0
   1566c:	cmp	r0, #0
   15670:	bne	156a8 <__assert_fail@plt+0x4690>
   15674:	movw	r1, #26027	; 0x65ab
   15678:	add	r0, sp, #7
   1567c:	movt	r1, #1
   15680:	bl	10df0 <strcmp@plt>
   15684:	cmp	r0, #0
   15688:	beq	156a8 <__assert_fail@plt+0x4690>
   1568c:	movw	r1, #26029	; 0x65ad
   15690:	add	r0, sp, #7
   15694:	movt	r1, #1
   15698:	bl	10df0 <strcmp@plt>
   1569c:	mov	r4, r0
   156a0:	cmp	r0, #0
   156a4:	movwne	r4, #1
   156a8:	mov	r0, r4
   156ac:	sub	sp, fp, #8
   156b0:	pop	{r4, sl, fp, pc}
   156b4:	push	{r4, r5, r6, r7, fp, lr}
   156b8:	add	fp, sp, #16
   156bc:	mov	r4, r1
   156c0:	mov	r1, #0
   156c4:	mov	r6, r2
   156c8:	bl	10fac <setlocale@plt>
   156cc:	cmp	r0, #0
   156d0:	beq	15700 <__assert_fail@plt+0x46e8>
   156d4:	mov	r7, r0
   156d8:	bl	10f28 <strlen@plt>
   156dc:	cmp	r0, r6
   156e0:	bcs	15720 <__assert_fail@plt+0x4708>
   156e4:	add	r2, r0, #1
   156e8:	mov	r0, r4
   156ec:	mov	r1, r7
   156f0:	bl	10e2c <memcpy@plt>
   156f4:	mov	r5, #0
   156f8:	mov	r0, r5
   156fc:	pop	{r4, r5, r6, r7, fp, pc}
   15700:	cmp	r6, #0
   15704:	mov	r5, #22
   15708:	movne	r0, #0
   1570c:	strbne	r0, [r4]
   15710:	movne	r0, r5
   15714:	popne	{r4, r5, r6, r7, fp, pc}
   15718:	mov	r0, r5
   1571c:	pop	{r4, r5, r6, r7, fp, pc}
   15720:	mov	r5, #34	; 0x22
   15724:	cmp	r6, #0
   15728:	beq	15748 <__assert_fail@plt+0x4730>
   1572c:	sub	r6, r6, #1
   15730:	mov	r0, r4
   15734:	mov	r1, r7
   15738:	mov	r2, r6
   1573c:	bl	10e2c <memcpy@plt>
   15740:	mov	r0, #0
   15744:	strb	r0, [r4, r6]
   15748:	mov	r0, r5
   1574c:	pop	{r4, r5, r6, r7, fp, pc}
   15750:	mov	r1, #0
   15754:	b	10fac <setlocale@plt>
   15758:	cmp	r3, #0
   1575c:	cmpeq	r2, #0
   15760:	bne	15778 <__assert_fail@plt+0x4760>
   15764:	cmp	r1, #0
   15768:	cmpeq	r0, #0
   1576c:	mvnne	r1, #0
   15770:	mvnne	r0, #0
   15774:	b	15794 <__assert_fail@plt+0x477c>
   15778:	sub	sp, sp, #8
   1577c:	push	{sp, lr}
   15780:	bl	157a4 <__assert_fail@plt+0x478c>
   15784:	ldr	lr, [sp, #4]
   15788:	add	sp, sp, #8
   1578c:	pop	{r2, r3}
   15790:	bx	lr
   15794:	push	{r1, lr}
   15798:	mov	r0, #8
   1579c:	bl	10de4 <raise@plt>
   157a0:	pop	{r1, pc}
   157a4:	cmp	r1, r3
   157a8:	cmpeq	r0, r2
   157ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157b0:	mov	r4, r0
   157b4:	movcc	r0, #0
   157b8:	mov	r5, r1
   157bc:	ldr	lr, [sp, #36]	; 0x24
   157c0:	movcc	r1, r0
   157c4:	bcc	158c0 <__assert_fail@plt+0x48a8>
   157c8:	cmp	r3, #0
   157cc:	clzeq	ip, r2
   157d0:	clzne	ip, r3
   157d4:	addeq	ip, ip, #32
   157d8:	cmp	r5, #0
   157dc:	clzeq	r1, r4
   157e0:	addeq	r1, r1, #32
   157e4:	clzne	r1, r5
   157e8:	sub	ip, ip, r1
   157ec:	sub	sl, ip, #32
   157f0:	lsl	r9, r3, ip
   157f4:	rsb	fp, ip, #32
   157f8:	orr	r9, r9, r2, lsl sl
   157fc:	orr	r9, r9, r2, lsr fp
   15800:	lsl	r8, r2, ip
   15804:	cmp	r5, r9
   15808:	cmpeq	r4, r8
   1580c:	movcc	r0, #0
   15810:	movcc	r1, r0
   15814:	bcc	15830 <__assert_fail@plt+0x4818>
   15818:	mov	r0, #1
   1581c:	subs	r4, r4, r8
   15820:	lsl	r1, r0, sl
   15824:	orr	r1, r1, r0, lsr fp
   15828:	lsl	r0, r0, ip
   1582c:	sbc	r5, r5, r9
   15830:	cmp	ip, #0
   15834:	beq	158c0 <__assert_fail@plt+0x48a8>
   15838:	lsr	r6, r8, #1
   1583c:	orr	r6, r6, r9, lsl #31
   15840:	lsr	r7, r9, #1
   15844:	mov	r2, ip
   15848:	b	1586c <__assert_fail@plt+0x4854>
   1584c:	subs	r3, r4, r6
   15850:	sbc	r8, r5, r7
   15854:	adds	r3, r3, r3
   15858:	adc	r8, r8, r8
   1585c:	adds	r4, r3, #1
   15860:	adc	r5, r8, #0
   15864:	subs	r2, r2, #1
   15868:	beq	15888 <__assert_fail@plt+0x4870>
   1586c:	cmp	r5, r7
   15870:	cmpeq	r4, r6
   15874:	bcs	1584c <__assert_fail@plt+0x4834>
   15878:	adds	r4, r4, r4
   1587c:	adc	r5, r5, r5
   15880:	subs	r2, r2, #1
   15884:	bne	1586c <__assert_fail@plt+0x4854>
   15888:	lsr	r3, r4, ip
   1588c:	orr	r3, r3, r5, lsl fp
   15890:	lsr	r2, r5, ip
   15894:	orr	r3, r3, r5, lsr sl
   15898:	adds	r0, r0, r4
   1589c:	mov	r4, r3
   158a0:	lsl	r3, r2, ip
   158a4:	orr	r3, r3, r4, lsl sl
   158a8:	lsl	ip, r4, ip
   158ac:	orr	r3, r3, r4, lsr fp
   158b0:	adc	r1, r1, r5
   158b4:	subs	r0, r0, ip
   158b8:	mov	r5, r2
   158bc:	sbc	r1, r1, r3
   158c0:	cmp	lr, #0
   158c4:	strdne	r4, [lr]
   158c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   158d0:	mov	r7, r0
   158d4:	ldr	r6, [pc, #72]	; 15924 <__assert_fail@plt+0x490c>
   158d8:	ldr	r5, [pc, #72]	; 15928 <__assert_fail@plt+0x4910>
   158dc:	add	r6, pc, r6
   158e0:	add	r5, pc, r5
   158e4:	sub	r6, r6, r5
   158e8:	mov	r8, r1
   158ec:	mov	r9, r2
   158f0:	bl	10dac <calloc@plt-0x20>
   158f4:	asrs	r6, r6, #2
   158f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   158fc:	mov	r4, #0
   15900:	add	r4, r4, #1
   15904:	ldr	r3, [r5], #4
   15908:	mov	r2, r9
   1590c:	mov	r1, r8
   15910:	mov	r0, r7
   15914:	blx	r3
   15918:	cmp	r6, r4
   1591c:	bne	15900 <__assert_fail@plt+0x48e8>
   15920:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15924:	andeq	r1, r1, r8, lsr #12
   15928:	andeq	r1, r1, r0, lsr #12
   1592c:	bx	lr
   15930:	ldr	r3, [pc, #12]	; 15944 <__assert_fail@plt+0x492c>
   15934:	mov	r1, #0
   15938:	add	r3, pc, r3
   1593c:	ldr	r2, [r3]
   15940:	b	10f40 <__cxa_atexit@plt>
   15944:	muleq	r1, ip, r7

Disassembly of section .fini:

00015948 <.fini>:
   15948:	push	{r3, lr}
   1594c:	pop	{r3, pc}
