
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uq_off:     file format elf32-littlearm


Disassembly of section .init:

000144fc <.init>:
   144fc:	push	{r3, lr}
   14500:	bl	14664 <_start@@Base+0x3c>
   14504:	pop	{r3, pc}

Disassembly of section .plt:

00014508 <raise@plt-0x14>:
   14508:	push	{lr}		; (str lr, [sp, #-4]!)
   1450c:	ldr	lr, [pc, #4]	; 14518 <raise@plt-0x4>
   14510:	add	lr, pc, lr
   14514:	ldr	pc, [lr, #8]!
   14518:	andeq	lr, r3, r8, ror #21

0001451c <raise@plt>:
   1451c:	add	ip, pc, #0, 12
   14520:	add	ip, ip, #253952	; 0x3e000
   14524:	ldr	pc, [ip, #2792]!	; 0xae8

00014528 <strcmp@plt>:
   14528:	add	ip, pc, #0, 12
   1452c:	add	ip, ip, #253952	; 0x3e000
   14530:	ldr	pc, [ip, #2784]!	; 0xae0

00014534 <memmove@plt>:
   14534:	add	ip, pc, #0, 12
   14538:	add	ip, ip, #253952	; 0x3e000
   1453c:	ldr	pc, [ip, #2776]!	; 0xad8

00014540 <free@plt>:
   14540:	add	ip, pc, #0, 12
   14544:	add	ip, ip, #253952	; 0x3e000
   14548:	ldr	pc, [ip, #2768]!	; 0xad0

0001454c <memcpy@plt>:
   1454c:	add	ip, pc, #0, 12
   14550:	add	ip, ip, #253952	; 0x3e000
   14554:	ldr	pc, [ip, #2760]!	; 0xac8

00014558 <memcmp@plt>:
   14558:	add	ip, pc, #0, 12
   1455c:	add	ip, ip, #253952	; 0x3e000
   14560:	ldr	pc, [ip, #2752]!	; 0xac0

00014564 <realloc@plt>:
   14564:	add	ip, pc, #0, 12
   14568:	add	ip, ip, #253952	; 0x3e000
   1456c:	ldr	pc, [ip, #2744]!	; 0xab8

00014570 <fwrite@plt>:
   14570:	add	ip, pc, #0, 12
   14574:	add	ip, ip, #253952	; 0x3e000
   14578:	ldr	pc, [ip, #2736]!	; 0xab0

0001457c <malloc@plt>:
   1457c:	add	ip, pc, #0, 12
   14580:	add	ip, ip, #253952	; 0x3e000
   14584:	ldr	pc, [ip, #2728]!	; 0xaa8

00014588 <__libc_start_main@plt>:
   14588:	add	ip, pc, #0, 12
   1458c:	add	ip, ip, #253952	; 0x3e000
   14590:	ldr	pc, [ip, #2720]!	; 0xaa0

00014594 <__gmon_start__@plt>:
   14594:	add	ip, pc, #0, 12
   14598:	add	ip, ip, #253952	; 0x3e000
   1459c:	ldr	pc, [ip, #2712]!	; 0xa98

000145a0 <strlen@plt>:
   145a0:	add	ip, pc, #0, 12
   145a4:	add	ip, ip, #253952	; 0x3e000
   145a8:	ldr	pc, [ip, #2704]!	; 0xa90

000145ac <fprintf@plt>:
   145ac:	add	ip, pc, #0, 12
   145b0:	add	ip, ip, #253952	; 0x3e000
   145b4:	ldr	pc, [ip, #2696]!	; 0xa88

000145b8 <posix_memalign@plt>:
   145b8:	add	ip, pc, #0, 12
   145bc:	add	ip, ip, #253952	; 0x3e000
   145c0:	ldr	pc, [ip, #2688]!	; 0xa80

000145c4 <memset@plt>:
   145c4:	add	ip, pc, #0, 12
   145c8:	add	ip, ip, #253952	; 0x3e000
   145cc:	ldr	pc, [ip, #2680]!	; 0xa78

000145d0 <strncpy@plt>:
   145d0:	add	ip, pc, #0, 12
   145d4:	add	ip, ip, #253952	; 0x3e000
   145d8:	ldr	pc, [ip, #2672]!	; 0xa70

000145dc <strtod@plt>:
   145dc:	add	ip, pc, #0, 12
   145e0:	add	ip, ip, #253952	; 0x3e000
   145e4:	ldr	pc, [ip, #2664]!	; 0xa68

000145e8 <memchr@plt>:
   145e8:	add	ip, pc, #0, 12
   145ec:	add	ip, ip, #253952	; 0x3e000
   145f0:	ldr	pc, [ip, #2656]!	; 0xa60

000145f4 <fputc@plt>:
   145f4:	add	ip, pc, #0, 12
   145f8:	add	ip, ip, #253952	; 0x3e000
   145fc:	ldr	pc, [ip, #2648]!	; 0xa58

00014600 <sprintf@plt>:
   14600:	add	ip, pc, #0, 12
   14604:	add	ip, ip, #253952	; 0x3e000
   14608:	ldr	pc, [ip, #2640]!	; 0xa50

0001460c <abort@plt>:
   1460c:	add	ip, pc, #0, 12
   14610:	add	ip, ip, #253952	; 0x3e000
   14614:	ldr	pc, [ip, #2632]!	; 0xa48

00014618 <__assert_fail@plt>:
   14618:	add	ip, pc, #0, 12
   1461c:	add	ip, ip, #253952	; 0x3e000
   14620:	ldr	pc, [ip, #2624]!	; 0xa40

Disassembly of section .text:

00014628 <_start@@Base>:
   14628:	mov	fp, #0
   1462c:	mov	lr, #0
   14630:	pop	{r1}		; (ldr r1, [sp], #4)
   14634:	mov	r2, sp
   14638:	push	{r2}		; (str r2, [sp, #-4]!)
   1463c:	push	{r0}		; (str r0, [sp, #-4]!)
   14640:	ldr	ip, [pc, #16]	; 14658 <_start@@Base+0x30>
   14644:	push	{ip}		; (str ip, [sp, #-4]!)
   14648:	ldr	r0, [pc, #12]	; 1465c <_start@@Base+0x34>
   1464c:	ldr	r3, [pc, #12]	; 14660 <_start@@Base+0x38>
   14650:	bl	14588 <__libc_start_main@plt>
   14654:	bl	1460c <abort@plt>
   14658:	andeq	sp, r3, r4, asr #1
   1465c:	andeq	r4, r2, r0, asr lr
   14660:	andeq	sp, r3, r4, rrx
   14664:	ldr	r3, [pc, #20]	; 14680 <_start@@Base+0x58>
   14668:	ldr	r2, [pc, #20]	; 14684 <_start@@Base+0x5c>
   1466c:	add	r3, pc, r3
   14670:	ldr	r2, [r3, r2]
   14674:	cmp	r2, #0
   14678:	bxeq	lr
   1467c:	b	14594 <__gmon_start__@plt>
   14680:	andeq	lr, r3, ip, lsl #19
   14684:	andeq	r0, r0, r4, rrx
   14688:	ldr	r3, [pc, #28]	; 146ac <_start@@Base+0x84>
   1468c:	ldr	r0, [pc, #28]	; 146b0 <_start@@Base+0x88>
   14690:	sub	r3, r3, r0
   14694:	cmp	r3, #6
   14698:	bxls	lr
   1469c:	ldr	r3, [pc, #16]	; 146b4 <_start@@Base+0x8c>
   146a0:	cmp	r3, #0
   146a4:	bxeq	lr
   146a8:	bx	r3
   146ac:	andeq	r3, r5, pc, lsr r3
   146b0:	andeq	r3, r5, ip, lsr r3
   146b4:	andeq	r0, r0, r0
   146b8:	ldr	r1, [pc, #36]	; 146e4 <_start@@Base+0xbc>
   146bc:	ldr	r0, [pc, #36]	; 146e8 <_start@@Base+0xc0>
   146c0:	sub	r1, r1, r0
   146c4:	asr	r1, r1, #2
   146c8:	add	r1, r1, r1, lsr #31
   146cc:	asrs	r1, r1, #1
   146d0:	bxeq	lr
   146d4:	ldr	r3, [pc, #16]	; 146ec <_start@@Base+0xc4>
   146d8:	cmp	r3, #0
   146dc:	bxeq	lr
   146e0:	bx	r3
   146e4:	andeq	r3, r5, ip, lsr r3
   146e8:	andeq	r3, r5, ip, lsr r3
   146ec:	andeq	r0, r0, r0
   146f0:	push	{r4, lr}
   146f4:	ldr	r4, [pc, #24]	; 14714 <_start@@Base+0xec>
   146f8:	ldrb	r3, [r4]
   146fc:	cmp	r3, #0
   14700:	popne	{r4, pc}
   14704:	bl	14688 <_start@@Base+0x60>
   14708:	mov	r3, #1
   1470c:	strb	r3, [r4]
   14710:	pop	{r4, pc}
   14714:	andeq	r3, r5, r8, asr #6
   14718:	ldr	r0, [pc, #40]	; 14748 <_start@@Base+0x120>
   1471c:	ldr	r3, [r0]
   14720:	cmp	r3, #0
   14724:	bne	1472c <_start@@Base+0x104>
   14728:	b	146b8 <_start@@Base+0x90>
   1472c:	ldr	r3, [pc, #24]	; 1474c <_start@@Base+0x124>
   14730:	cmp	r3, #0
   14734:	beq	14728 <_start@@Base+0x100>
   14738:	push	{r4, lr}
   1473c:	blx	r3
   14740:	pop	{r4, lr}
   14744:	b	146b8 <_start@@Base+0x90>
   14748:	andeq	r2, r5, r4, lsl pc
   1474c:	andeq	r0, r0, r0
   14750:	push	{r4, r5, r6, r7}
   14754:	sub	r1, r1, r0
   14758:	cmp	r1, #8
   1475c:	movcs	r1, #8
   14760:	sub	r1, r1, #1
   14764:	cmp	r1, #7
   14768:	ldrls	pc, [pc, r1, lsl #2]
   1476c:	b	1487c <_start@@Base+0x254>
   14770:	andeq	r4, r1, r0, ror r8
   14774:	andeq	r4, r1, r4, ror #16
   14778:	andeq	r4, r1, r8, asr r8
   1477c:	andeq	r4, r1, ip, asr #16
   14780:	andeq	r4, r1, r0, asr #16
   14784:	andeq	r4, r1, r4, lsr r8
   14788:	muleq	r1, ip, r7
   1478c:	muleq	r1, r0, r7
   14790:	ldrb	r2, [r0, #7]
   14794:	mov	r3, #0
   14798:	b	147a4 <_start@@Base+0x17c>
   1479c:	mov	r2, #0
   147a0:	mov	r3, #0
   147a4:	ldrb	r6, [r0, #6]
   147a8:	mov	r5, #0
   147ac:	lsl	r4, r6, #8
   147b0:	orr	r4, r4, r2
   147b4:	orr	r5, r5, r3
   147b8:	ldrb	r6, [r0, #5]
   147bc:	mov	r3, #0
   147c0:	lsl	r2, r6, #16
   147c4:	orr	r4, r4, r2
   147c8:	orr	r5, r5, r3
   147cc:	ldrb	r6, [r0, #4]
   147d0:	mov	r3, #0
   147d4:	lsl	r2, r6, #24
   147d8:	orr	r4, r4, r2
   147dc:	orr	r5, r5, r3
   147e0:	mov	r2, #0
   147e4:	ldrb	r3, [r0, #3]
   147e8:	orr	r4, r4, r2
   147ec:	orr	r5, r5, r3
   147f0:	ldrb	r6, [r0, #2]
   147f4:	mov	r2, #0
   147f8:	lsl	r3, r6, #8
   147fc:	orr	r4, r4, r2
   14800:	orr	r5, r5, r3
   14804:	ldrb	r6, [r0, #1]
   14808:	mov	r2, #0
   1480c:	lsl	r3, r6, #16
   14810:	orr	r2, r2, r4
   14814:	orr	r3, r3, r5
   14818:	ldrb	r4, [r0]
   1481c:	mov	r0, #0
   14820:	lsl	r1, r4, #24
   14824:	orr	r0, r0, r2
   14828:	orr	r1, r1, r3
   1482c:	pop	{r4, r5, r6, r7}
   14830:	bx	lr
   14834:	mov	r4, #0
   14838:	mov	r5, #0
   1483c:	b	147b8 <_start@@Base+0x190>
   14840:	mov	r4, #0
   14844:	mov	r5, #0
   14848:	b	147cc <_start@@Base+0x1a4>
   1484c:	mov	r4, #0
   14850:	mov	r5, #0
   14854:	b	147e0 <_start@@Base+0x1b8>
   14858:	mov	r4, #0
   1485c:	mov	r5, #0
   14860:	b	147f0 <_start@@Base+0x1c8>
   14864:	mov	r4, #0
   14868:	mov	r5, #0
   1486c:	b	14804 <_start@@Base+0x1dc>
   14870:	mov	r2, #0
   14874:	mov	r3, #0
   14878:	b	14818 <_start@@Base+0x1f0>
   1487c:	mov	r0, #0
   14880:	mov	r1, #0
   14884:	b	1482c <_start@@Base+0x204>
   14888:	cmp	r0, #4
   1488c:	movhi	r0, #0
   14890:	movls	r0, #1
   14894:	bx	lr
   14898:	cmp	r0, #11
   1489c:	bhi	148c0 <_start@@Base+0x298>
   148a0:	cmp	r0, #8
   148a4:	bcs	148c8 <_start@@Base+0x2a0>
   148a8:	cmp	r0, #0
   148ac:	beq	148c8 <_start@@Base+0x2a0>
   148b0:	cmp	r0, #2
   148b4:	beq	148c8 <_start@@Base+0x2a0>
   148b8:	mov	r0, #0
   148bc:	bx	lr
   148c0:	cmp	r0, #255	; 0xff
   148c4:	bne	148b8 <_start@@Base+0x290>
   148c8:	mov	r0, #1
   148cc:	bx	lr
   148d0:	bx	lr
   148d4:	bx	lr
   148d8:	mov	r0, #0
   148dc:	bx	lr
   148e0:	mov	r0, #0
   148e4:	bx	lr
   148e8:	push	{r4, lr}
   148ec:	mov	r3, #4
   148f0:	mov	r2, r3
   148f4:	mov	r1, #0
   148f8:	bl	29f7c <flatcc_verify_field@@Base>
   148fc:	pop	{r4, pc}
   14900:	push	{r4, lr}
   14904:	mov	r4, r0
   14908:	mov	r3, #8
   1490c:	mov	r2, r3
   14910:	mov	r1, #0
   14914:	bl	29f7c <flatcc_verify_field@@Base>
   14918:	cmp	r0, #0
   1491c:	popne	{r4, pc}
   14920:	mov	r3, #4
   14924:	mov	r2, r3
   14928:	mov	r1, #1
   1492c:	mov	r0, r4
   14930:	bl	29f7c <flatcc_verify_field@@Base>
   14934:	pop	{r4, pc}
   14938:	push	{r4, lr}
   1493c:	mov	r4, r0
   14940:	mov	r3, #8
   14944:	mov	r2, r3
   14948:	mov	r1, #0
   1494c:	bl	29f7c <flatcc_verify_field@@Base>
   14950:	cmp	r0, #0
   14954:	popne	{r4, pc}
   14958:	mov	r3, #4
   1495c:	mov	r2, r3
   14960:	mov	r1, #1
   14964:	mov	r0, r4
   14968:	bl	29f7c <flatcc_verify_field@@Base>
   1496c:	pop	{r4, pc}
   14970:	push	{r4, lr}
   14974:	mov	r4, r0
   14978:	mov	r3, #1
   1497c:	mov	r2, r3
   14980:	mov	r1, #0
   14984:	bl	29f7c <flatcc_verify_field@@Base>
   14988:	cmp	r0, #0
   1498c:	popne	{r4, pc}
   14990:	mov	r3, #1
   14994:	mov	r2, r3
   14998:	mov	r1, r3
   1499c:	mov	r0, r4
   149a0:	bl	29f7c <flatcc_verify_field@@Base>
   149a4:	cmp	r0, #0
   149a8:	popne	{r4, pc}
   149ac:	mov	r3, #1
   149b0:	mov	r2, r3
   149b4:	mov	r1, #2
   149b8:	mov	r0, r4
   149bc:	bl	29f7c <flatcc_verify_field@@Base>
   149c0:	cmp	r0, #0
   149c4:	popne	{r4, pc}
   149c8:	mov	r3, #1
   149cc:	mov	r2, r3
   149d0:	mov	r1, #3
   149d4:	mov	r0, r4
   149d8:	bl	29f7c <flatcc_verify_field@@Base>
   149dc:	pop	{r4, pc}
   149e0:	push	{r4, lr}
   149e4:	mov	r4, r0
   149e8:	mov	r2, #0
   149ec:	mov	r1, r2
   149f0:	bl	29ff4 <flatcc_verify_string_field@@Base>
   149f4:	cmp	r0, #0
   149f8:	popne	{r4, pc}
   149fc:	mov	r3, #8
   14a00:	mov	r2, r3
   14a04:	mov	r1, #1
   14a08:	mov	r0, r4
   14a0c:	bl	29f7c <flatcc_verify_field@@Base>
   14a10:	cmp	r0, #0
   14a14:	popne	{r4, pc}
   14a18:	mov	r3, #2
   14a1c:	mov	r2, r3
   14a20:	mov	r1, r3
   14a24:	mov	r0, r4
   14a28:	bl	29f7c <flatcc_verify_field@@Base>
   14a2c:	pop	{r4, pc}
   14a30:	push	{r4, lr}
   14a34:	mov	r4, r0
   14a38:	mov	r2, #0
   14a3c:	mov	r1, r2
   14a40:	bl	29ff4 <flatcc_verify_string_field@@Base>
   14a44:	cmp	r0, #0
   14a48:	popne	{r4, pc}
   14a4c:	mov	r3, #4
   14a50:	mov	r2, r3
   14a54:	mov	r1, #1
   14a58:	mov	r0, r4
   14a5c:	bl	29f7c <flatcc_verify_field@@Base>
   14a60:	cmp	r0, #0
   14a64:	popne	{r4, pc}
   14a68:	mov	r2, #0
   14a6c:	mov	r1, #2
   14a70:	mov	r0, r4
   14a74:	bl	29ff4 <flatcc_verify_string_field@@Base>
   14a78:	cmp	r0, #0
   14a7c:	popne	{r4, pc}
   14a80:	mov	r3, #8
   14a84:	mov	r2, r3
   14a88:	mov	r1, #3
   14a8c:	mov	r0, r4
   14a90:	bl	29f7c <flatcc_verify_field@@Base>
   14a94:	cmp	r0, #0
   14a98:	popne	{r4, pc}
   14a9c:	mov	r2, #0
   14aa0:	mov	r1, #4
   14aa4:	mov	r0, r4
   14aa8:	bl	29ff4 <flatcc_verify_string_field@@Base>
   14aac:	cmp	r0, #0
   14ab0:	popne	{r4, pc}
   14ab4:	mov	r3, #8
   14ab8:	mov	r2, r3
   14abc:	mov	r1, #5
   14ac0:	mov	r0, r4
   14ac4:	bl	29f7c <flatcc_verify_field@@Base>
   14ac8:	cmp	r0, #0
   14acc:	popne	{r4, pc}
   14ad0:	mov	r3, #4
   14ad4:	mov	r2, r3
   14ad8:	mov	r1, #6
   14adc:	mov	r0, r4
   14ae0:	bl	29f7c <flatcc_verify_field@@Base>
   14ae4:	cmp	r0, #0
   14ae8:	popne	{r4, pc}
   14aec:	mov	r3, #8
   14af0:	mov	r2, r3
   14af4:	mov	r1, #7
   14af8:	mov	r0, r4
   14afc:	bl	29f7c <flatcc_verify_field@@Base>
   14b00:	cmp	r0, #0
   14b04:	popne	{r4, pc}
   14b08:	mov	r3, #4
   14b0c:	mov	r2, r3
   14b10:	mov	r1, #8
   14b14:	mov	r0, r4
   14b18:	bl	29f7c <flatcc_verify_field@@Base>
   14b1c:	pop	{r4, pc}
   14b20:	push	{r4, lr}
   14b24:	mov	r4, r0
   14b28:	ldr	r3, [pc, #68]	; 14b74 <_start@@Base+0x54c>
   14b2c:	mov	r2, #0
   14b30:	mov	r1, r2
   14b34:	bl	2a280 <flatcc_verify_table_field@@Base>
   14b38:	cmp	r0, #0
   14b3c:	popne	{r4, pc}
   14b40:	ldr	r3, [pc, #48]	; 14b78 <_start@@Base+0x550>
   14b44:	mov	r2, #0
   14b48:	mov	r1, #1
   14b4c:	mov	r0, r4
   14b50:	bl	2a280 <flatcc_verify_table_field@@Base>
   14b54:	cmp	r0, #0
   14b58:	popne	{r4, pc}
   14b5c:	ldr	r3, [pc, #24]	; 14b7c <_start@@Base+0x554>
   14b60:	mov	r2, #0
   14b64:	mov	r1, #2
   14b68:	mov	r0, r4
   14b6c:	bl	2a280 <flatcc_verify_table_field@@Base>
   14b70:	pop	{r4, pc}
   14b74:	andeq	r4, r1, r0, lsr sl
   14b78:	andeq	r4, r1, r8, lsr r9
   14b7c:	andeq	r4, r1, r0, lsl #18
   14b80:	push	{r4, lr}
   14b84:	sub	sp, sp, #8
   14b88:	mov	r4, r0
   14b8c:	mov	r3, #16
   14b90:	mov	r2, #32
   14b94:	mov	r1, #0
   14b98:	bl	29f7c <flatcc_verify_field@@Base>
   14b9c:	cmp	r0, #0
   14ba0:	beq	14bac <_start@@Base+0x584>
   14ba4:	add	sp, sp, #8
   14ba8:	pop	{r4, pc}
   14bac:	mov	r3, #2
   14bb0:	mov	r2, r3
   14bb4:	mov	r1, r3
   14bb8:	mov	r0, r4
   14bbc:	bl	29f7c <flatcc_verify_field@@Base>
   14bc0:	cmp	r0, #0
   14bc4:	bne	14ba4 <_start@@Base+0x57c>
   14bc8:	mov	r3, #2
   14bcc:	mov	r2, r3
   14bd0:	mov	r1, #1
   14bd4:	mov	r0, r4
   14bd8:	bl	29f7c <flatcc_verify_field@@Base>
   14bdc:	cmp	r0, #0
   14be0:	bne	14ba4 <_start@@Base+0x57c>
   14be4:	mov	r2, #1
   14be8:	mov	r1, #3
   14bec:	mov	r0, r4
   14bf0:	bl	29ff4 <flatcc_verify_string_field@@Base>
   14bf4:	cmp	r0, #0
   14bf8:	bne	14ba4 <_start@@Base+0x57c>
   14bfc:	mov	r3, #1
   14c00:	mov	r2, r3
   14c04:	mov	r1, #6
   14c08:	mov	r0, r4
   14c0c:	bl	29f7c <flatcc_verify_field@@Base>
   14c10:	cmp	r0, #0
   14c14:	bne	14ba4 <_start@@Base+0x57c>
   14c18:	mvn	r3, #0
   14c1c:	str	r3, [sp, #4]
   14c20:	mov	r3, #1
   14c24:	str	r3, [sp]
   14c28:	mov	r2, #0
   14c2c:	mov	r1, #5
   14c30:	mov	r0, r4
   14c34:	bl	2a088 <flatcc_verify_vector_field@@Base>
   14c38:	cmp	r0, #0
   14c3c:	bne	14ba4 <_start@@Base+0x57c>
   14c40:	ldr	r3, [pc, #876]	; 14fb4 <_start@@Base+0x98c>
   14c44:	mov	r2, #0
   14c48:	mov	r1, #11
   14c4c:	mov	r0, r4
   14c50:	bl	2a398 <flatcc_verify_table_vector_field@@Base>
   14c54:	cmp	r0, #0
   14c58:	bne	14ba4 <_start@@Base+0x57c>
   14c5c:	mov	r2, #0
   14c60:	mov	r1, #10
   14c64:	mov	r0, r4
   14c68:	bl	2a138 <flatcc_verify_string_vector_field@@Base>
   14c6c:	cmp	r0, #0
   14c70:	bne	14ba4 <_start@@Base+0x57c>
   14c74:	mov	r2, #0
   14c78:	mov	r1, #28
   14c7c:	mov	r0, r4
   14c80:	bl	2a138 <flatcc_verify_string_vector_field@@Base>
   14c84:	cmp	r0, #0
   14c88:	bne	14ba4 <_start@@Base+0x57c>
   14c8c:	mvn	r3, #0
   14c90:	str	r3, [sp, #4]
   14c94:	mov	r3, #1
   14c98:	str	r3, [sp]
   14c9c:	mov	r2, #0
   14ca0:	mov	r1, #24
   14ca4:	mov	r0, r4
   14ca8:	bl	2a088 <flatcc_verify_vector_field@@Base>
   14cac:	cmp	r0, #0
   14cb0:	bne	14ba4 <_start@@Base+0x57c>
   14cb4:	mvn	r3, #-536870912	; 0xe0000000
   14cb8:	str	r3, [sp, #4]
   14cbc:	mov	r3, #4
   14cc0:	str	r3, [sp]
   14cc4:	mov	r3, #8
   14cc8:	mov	r2, #0
   14ccc:	mov	r1, #29
   14cd0:	mov	r0, r4
   14cd4:	bl	2a088 <flatcc_verify_vector_field@@Base>
   14cd8:	cmp	r0, #0
   14cdc:	bne	14ba4 <_start@@Base+0x57c>
   14ce0:	ldr	r3, [pc, #716]	; 14fb4 <_start@@Base+0x98c>
   14ce4:	mov	r2, #0
   14ce8:	mov	r1, #12
   14cec:	mov	r0, r4
   14cf0:	bl	2a280 <flatcc_verify_table_field@@Base>
   14cf4:	cmp	r0, #0
   14cf8:	bne	14ba4 <_start@@Base+0x57c>
   14cfc:	ldr	r3, [pc, #692]	; 14fb8 <_start@@Base+0x990>
   14d00:	mov	r2, #0
   14d04:	mov	r1, #8
   14d08:	mov	r0, r4
   14d0c:	bl	2ae70 <flatcc_verify_union_field@@Base>
   14d10:	cmp	r0, #0
   14d14:	bne	14ba4 <_start@@Base+0x57c>
   14d18:	mvn	r3, #-1073741824	; 0xc0000000
   14d1c:	str	r3, [sp, #4]
   14d20:	mov	r3, #2
   14d24:	str	r3, [sp]
   14d28:	mov	r3, #4
   14d2c:	mov	r2, #0
   14d30:	mov	r1, #9
   14d34:	mov	r0, r4
   14d38:	bl	2a088 <flatcc_verify_vector_field@@Base>
   14d3c:	cmp	r0, #0
   14d40:	bne	14ba4 <_start@@Base+0x57c>
   14d44:	mvn	r3, #-1073741824	; 0xc0000000
   14d48:	str	r3, [sp, #4]
   14d4c:	mov	r3, #2
   14d50:	str	r3, [sp]
   14d54:	mov	r3, #4
   14d58:	mov	r2, #0
   14d5c:	mov	r1, #31
   14d60:	mov	r0, r4
   14d64:	bl	2a088 <flatcc_verify_vector_field@@Base>
   14d68:	cmp	r0, #0
   14d6c:	bne	14ba4 <_start@@Base+0x57c>
   14d70:	ldr	r3, [pc, #572]	; 14fb4 <_start@@Base+0x98c>
   14d74:	str	r3, [sp, #4]
   14d78:	mov	r3, #1
   14d7c:	str	r3, [sp]
   14d80:	mov	r3, #0
   14d84:	mov	r2, r3
   14d88:	mov	r1, #13
   14d8c:	mov	r0, r4
   14d90:	bl	2acb0 <flatcc_verify_table_as_nested_root@@Base>
   14d94:	cmp	r0, #0
   14d98:	bne	14ba4 <_start@@Base+0x57c>
   14d9c:	ldr	r3, [pc, #536]	; 14fbc <_start@@Base+0x994>
   14da0:	mov	r2, #0
   14da4:	mov	r1, #14
   14da8:	mov	r0, r4
   14dac:	bl	2a280 <flatcc_verify_table_field@@Base>
   14db0:	cmp	r0, #0
   14db4:	bne	14ba4 <_start@@Base+0x57c>
   14db8:	mov	r3, #1
   14dbc:	mov	r2, r3
   14dc0:	mov	r1, #15
   14dc4:	mov	r0, r4
   14dc8:	bl	29f7c <flatcc_verify_field@@Base>
   14dcc:	cmp	r0, #0
   14dd0:	bne	14ba4 <_start@@Base+0x57c>
   14dd4:	mov	r3, #4
   14dd8:	mov	r2, r3
   14ddc:	mov	r1, #16
   14de0:	mov	r0, r4
   14de4:	bl	29f7c <flatcc_verify_field@@Base>
   14de8:	cmp	r0, #0
   14dec:	bne	14ba4 <_start@@Base+0x57c>
   14df0:	mov	r3, #4
   14df4:	mov	r2, r3
   14df8:	mov	r1, #17
   14dfc:	mov	r0, r4
   14e00:	bl	29f7c <flatcc_verify_field@@Base>
   14e04:	cmp	r0, #0
   14e08:	bne	14ba4 <_start@@Base+0x57c>
   14e0c:	mov	r3, #8
   14e10:	mov	r2, r3
   14e14:	mov	r1, #18
   14e18:	mov	r0, r4
   14e1c:	bl	29f7c <flatcc_verify_field@@Base>
   14e20:	cmp	r0, #0
   14e24:	bne	14ba4 <_start@@Base+0x57c>
   14e28:	mov	r3, #8
   14e2c:	mov	r2, r3
   14e30:	mov	r1, #19
   14e34:	mov	r0, r4
   14e38:	bl	29f7c <flatcc_verify_field@@Base>
   14e3c:	cmp	r0, #0
   14e40:	bne	14ba4 <_start@@Base+0x57c>
   14e44:	mov	r3, #4
   14e48:	mov	r2, r3
   14e4c:	mov	r1, #20
   14e50:	mov	r0, r4
   14e54:	bl	29f7c <flatcc_verify_field@@Base>
   14e58:	cmp	r0, #0
   14e5c:	bne	14ba4 <_start@@Base+0x57c>
   14e60:	mov	r3, #4
   14e64:	mov	r2, r3
   14e68:	mov	r1, #21
   14e6c:	mov	r0, r4
   14e70:	bl	29f7c <flatcc_verify_field@@Base>
   14e74:	cmp	r0, #0
   14e78:	bne	14ba4 <_start@@Base+0x57c>
   14e7c:	mov	r3, #8
   14e80:	mov	r2, r3
   14e84:	mov	r1, #22
   14e88:	mov	r0, r4
   14e8c:	bl	29f7c <flatcc_verify_field@@Base>
   14e90:	cmp	r0, #0
   14e94:	bne	14ba4 <_start@@Base+0x57c>
   14e98:	mov	r3, #8
   14e9c:	mov	r2, r3
   14ea0:	mov	r1, #23
   14ea4:	mov	r0, r4
   14ea8:	bl	29f7c <flatcc_verify_field@@Base>
   14eac:	cmp	r0, #0
   14eb0:	bne	14ba4 <_start@@Base+0x57c>
   14eb4:	mov	r3, #4
   14eb8:	mov	r2, r3
   14ebc:	mov	r1, #25
   14ec0:	mov	r0, r4
   14ec4:	bl	29f7c <flatcc_verify_field@@Base>
   14ec8:	cmp	r0, #0
   14ecc:	bne	14ba4 <_start@@Base+0x57c>
   14ed0:	mov	r3, #4
   14ed4:	mov	r2, r3
   14ed8:	mov	r1, #26
   14edc:	mov	r0, r4
   14ee0:	bl	29f7c <flatcc_verify_field@@Base>
   14ee4:	cmp	r0, #0
   14ee8:	bne	14ba4 <_start@@Base+0x57c>
   14eec:	mov	r3, #4
   14ef0:	mov	r2, r3
   14ef4:	mov	r1, #27
   14ef8:	mov	r0, r4
   14efc:	bl	29f7c <flatcc_verify_field@@Base>
   14f00:	cmp	r0, #0
   14f04:	bne	14ba4 <_start@@Base+0x57c>
   14f08:	mvn	r3, #0
   14f0c:	str	r3, [sp, #4]
   14f10:	mov	r3, #1
   14f14:	str	r3, [sp]
   14f18:	mov	r2, #0
   14f1c:	mov	r1, #30
   14f20:	mov	r0, r4
   14f24:	bl	2a088 <flatcc_verify_vector_field@@Base>
   14f28:	cmp	r0, #0
   14f2c:	bne	14ba4 <_start@@Base+0x57c>
   14f30:	mvn	r3, #-536870912	; 0xe0000000
   14f34:	str	r3, [sp, #4]
   14f38:	mov	r3, #8
   14f3c:	str	r3, [sp]
   14f40:	mov	r2, #0
   14f44:	mov	r1, #32
   14f48:	mov	r0, r4
   14f4c:	bl	2a088 <flatcc_verify_vector_field@@Base>
   14f50:	cmp	r0, #0
   14f54:	bne	14ba4 <_start@@Base+0x57c>
   14f58:	mvn	r3, #-536870912	; 0xe0000000
   14f5c:	str	r3, [sp, #4]
   14f60:	mov	r3, #8
   14f64:	str	r3, [sp]
   14f68:	mov	r2, #0
   14f6c:	mov	r1, #33	; 0x21
   14f70:	mov	r0, r4
   14f74:	bl	2a088 <flatcc_verify_vector_field@@Base>
   14f78:	cmp	r0, #0
   14f7c:	bne	14ba4 <_start@@Base+0x57c>
   14f80:	ldr	r3, [pc, #56]	; 14fc0 <_start@@Base+0x998>
   14f84:	mov	r2, #0
   14f88:	mov	r1, #34	; 0x22
   14f8c:	mov	r0, r4
   14f90:	bl	2a280 <flatcc_verify_table_field@@Base>
   14f94:	cmp	r0, #0
   14f98:	bne	14ba4 <_start@@Base+0x57c>
   14f9c:	ldr	r3, [pc, #32]	; 14fc4 <_start@@Base+0x99c>
   14fa0:	mov	r2, #0
   14fa4:	mov	r1, #35	; 0x23
   14fa8:	mov	r0, r4
   14fac:	bl	2a280 <flatcc_verify_table_field@@Base>
   14fb0:	b	14ba4 <_start@@Base+0x57c>
   14fb4:	andeq	r4, r1, r0, lsl #23
   14fb8:	andeq	r5, r1, r4, asr r0
   14fbc:	andeq	r4, r1, r0, ror #19
   14fc0:	ldrdeq	r4, [r1], -r8
   14fc4:	andeq	r4, r1, r8, asr #31
   14fc8:	push	{r4, lr}
   14fcc:	sub	sp, sp, #8
   14fd0:	mov	r4, r0
   14fd4:	mvn	r3, #0
   14fd8:	str	r3, [sp, #4]
   14fdc:	mov	r3, #1
   14fe0:	str	r3, [sp]
   14fe4:	mov	r2, #0
   14fe8:	mov	r1, r2
   14fec:	bl	2a088 <flatcc_verify_vector_field@@Base>
   14ff0:	cmp	r0, #0
   14ff4:	beq	15000 <_start@@Base+0x9d8>
   14ff8:	add	sp, sp, #8
   14ffc:	pop	{r4, pc}
   15000:	mvn	r3, #0
   15004:	str	r3, [sp, #4]
   15008:	mov	r1, #1
   1500c:	str	r1, [sp]
   15010:	mov	r3, r1
   15014:	mov	r2, #0
   15018:	mov	r0, r4
   1501c:	bl	2a088 <flatcc_verify_vector_field@@Base>
   15020:	cmp	r0, #0
   15024:	bne	14ff8 <_start@@Base+0x9d0>
   15028:	ldr	r3, [pc, #32]	; 15050 <_start@@Base+0xa28>
   1502c:	str	r3, [sp, #4]
   15030:	mov	r3, #1
   15034:	str	r3, [sp]
   15038:	mov	r3, #0
   1503c:	mov	r2, r3
   15040:	mov	r1, #2
   15044:	mov	r0, r4
   15048:	bl	2acb0 <flatcc_verify_table_as_nested_root@@Base>
   1504c:	b	14ff8 <_start@@Base+0x9d0>
   15050:	andeq	r4, r1, r0, lsl #23
   15054:	push	{r4, lr}
   15058:	ldrb	r3, [r0, #12]
   1505c:	sub	r3, r3, #1
   15060:	cmp	r3, #3
   15064:	ldrls	pc, [pc, r3, lsl #2]
   15068:	b	150ac <_start@@Base+0xa84>
   1506c:	andeq	r5, r1, ip, ror r0
   15070:	andeq	r5, r1, r8, lsl #1
   15074:	muleq	r1, r4, r0
   15078:	andeq	r5, r1, r0, lsr #1
   1507c:	ldr	r1, [pc, #48]	; 150b4 <_start@@Base+0xa8c>
   15080:	bl	2a628 <flatcc_verify_union_table@@Base>
   15084:	pop	{r4, pc}
   15088:	ldr	r1, [pc, #40]	; 150b8 <_start@@Base+0xa90>
   1508c:	bl	2a628 <flatcc_verify_union_table@@Base>
   15090:	pop	{r4, pc}
   15094:	ldr	r1, [pc, #32]	; 150bc <_start@@Base+0xa94>
   15098:	bl	2a628 <flatcc_verify_union_table@@Base>
   1509c:	pop	{r4, pc}
   150a0:	ldr	r1, [pc, #24]	; 150c0 <_start@@Base+0xa98>
   150a4:	bl	2a628 <flatcc_verify_union_table@@Base>
   150a8:	pop	{r4, pc}
   150ac:	mov	r0, #0
   150b0:	pop	{r4, pc}
   150b4:	andeq	r4, r1, r0, lsl #23
   150b8:	andeq	r4, r1, r0, ror r9
   150bc:	andeq	r4, r1, r0, ror #17
   150c0:	andeq	r5, r1, r4, asr #1
   150c4:	push	{r4, lr}
   150c8:	mov	r4, r0
   150cc:	ldr	r3, [pc, #68]	; 15118 <_start@@Base+0xaf0>
   150d0:	mov	r2, #0
   150d4:	mov	r1, r2
   150d8:	bl	2a280 <flatcc_verify_table_field@@Base>
   150dc:	cmp	r0, #0
   150e0:	popne	{r4, pc}
   150e4:	ldr	r3, [pc, #48]	; 1511c <_start@@Base+0xaf4>
   150e8:	mov	r2, #0
   150ec:	mov	r1, #1
   150f0:	mov	r0, r4
   150f4:	bl	2a280 <flatcc_verify_table_field@@Base>
   150f8:	cmp	r0, #0
   150fc:	popne	{r4, pc}
   15100:	ldr	r3, [pc, #24]	; 15120 <_start@@Base+0xaf8>
   15104:	mov	r2, #0
   15108:	mov	r1, #3
   1510c:	mov	r0, r4
   15110:	bl	2afc0 <flatcc_verify_union_vector_field@@Base>
   15114:	pop	{r4, pc}
   15118:	andeq	r4, r1, r0, lsr #22
   1511c:	andeq	r5, r1, r4, lsr #2
   15120:	andeq	r5, r1, r4, asr r0
   15124:	push	{r4, lr}
   15128:	mov	r4, r0
   1512c:	ldr	r3, [pc, #124]	; 151b0 <_start@@Base+0xb88>
   15130:	mov	r2, #0
   15134:	mov	r1, #1
   15138:	bl	2ae70 <flatcc_verify_union_field@@Base>
   1513c:	cmp	r0, #0
   15140:	popne	{r4, pc}
   15144:	ldr	r3, [pc, #100]	; 151b0 <_start@@Base+0xb88>
   15148:	mov	r2, #0
   1514c:	mov	r1, #3
   15150:	mov	r0, r4
   15154:	bl	2ae70 <flatcc_verify_union_field@@Base>
   15158:	cmp	r0, #0
   1515c:	popne	{r4, pc}
   15160:	ldr	r3, [pc, #72]	; 151b0 <_start@@Base+0xb88>
   15164:	mov	r2, #0
   15168:	mov	r1, #5
   1516c:	mov	r0, r4
   15170:	bl	2ae70 <flatcc_verify_union_field@@Base>
   15174:	cmp	r0, #0
   15178:	popne	{r4, pc}
   1517c:	ldr	r3, [pc, #44]	; 151b0 <_start@@Base+0xb88>
   15180:	mov	r2, #0
   15184:	mov	r1, #7
   15188:	mov	r0, r4
   1518c:	bl	2ae70 <flatcc_verify_union_field@@Base>
   15190:	cmp	r0, #0
   15194:	popne	{r4, pc}
   15198:	ldr	r3, [pc, #16]	; 151b0 <_start@@Base+0xb88>
   1519c:	mov	r2, #0
   151a0:	mov	r1, #9
   151a4:	mov	r0, r4
   151a8:	bl	2afc0 <flatcc_verify_union_vector_field@@Base>
   151ac:	pop	{r4, pc}
   151b0:			; <UNDEFINED> instruction: 0x000151b4
   151b4:	push	{r4, lr}
   151b8:	ldrb	r3, [r0, #12]
   151bc:	cmp	r3, #9
   151c0:	beq	15210 <_start@@Base+0xbe8>
   151c4:	bls	151e4 <_start@@Base+0xbbc>
   151c8:	cmp	r3, #11
   151cc:	beq	15230 <_start@@Base+0xc08>
   151d0:	bcc	15220 <_start@@Base+0xbf8>
   151d4:	cmp	r3, #255	; 0xff
   151d8:	bne	15238 <_start@@Base+0xc10>
   151dc:	bl	2a78c <flatcc_verify_union_string@@Base>
   151e0:	pop	{r4, pc}
   151e4:	cmp	r3, #2
   151e8:	beq	15204 <_start@@Base+0xbdc>
   151ec:	cmp	r3, #8
   151f0:	bne	15238 <_start@@Base+0xc10>
   151f4:	mov	r2, #2
   151f8:	mov	r1, r2
   151fc:	bl	2a720 <flatcc_verify_union_struct@@Base>
   15200:	pop	{r4, pc}
   15204:	ldr	r1, [pc, #52]	; 15240 <_start@@Base+0xc18>
   15208:	bl	2a628 <flatcc_verify_union_table@@Base>
   1520c:	pop	{r4, pc}
   15210:	mov	r2, #4
   15214:	mov	r1, r2
   15218:	bl	2a720 <flatcc_verify_union_struct@@Base>
   1521c:	pop	{r4, pc}
   15220:	mov	r2, #4
   15224:	mov	r1, r2
   15228:	bl	2a720 <flatcc_verify_union_struct@@Base>
   1522c:	pop	{r4, pc}
   15230:	bl	2a78c <flatcc_verify_union_string@@Base>
   15234:	pop	{r4, pc}
   15238:	mov	r0, #0
   1523c:	pop	{r4, pc}
   15240:	andeq	r4, r1, r8, ror #17
   15244:	push	{r4, r5, r6, lr}
   15248:	sub	sp, sp, #8
   1524c:	mov	r4, r0
   15250:	mov	r5, r1
   15254:	ldr	r3, [pc, #96]	; 152bc <_start@@Base+0xc94>
   15258:	str	r3, [sp, #4]
   1525c:	mov	r3, #21
   15260:	str	r3, [sp]
   15264:	ldr	r3, [pc, #84]	; 152c0 <_start@@Base+0xc98>
   15268:	mov	r2, #0
   1526c:	bl	3b368 <flatcc_json_printer_table_field@@Base>
   15270:	ldr	r3, [pc, #76]	; 152c4 <_start@@Base+0xc9c>
   15274:	str	r3, [sp, #4]
   15278:	mov	r6, #22
   1527c:	str	r6, [sp]
   15280:	ldr	r3, [pc, #64]	; 152c8 <_start@@Base+0xca0>
   15284:	mov	r2, #1
   15288:	mov	r1, r5
   1528c:	mov	r0, r4
   15290:	bl	3b368 <flatcc_json_printer_table_field@@Base>
   15294:	ldr	r3, [pc, #48]	; 152cc <_start@@Base+0xca4>
   15298:	str	r3, [sp, #4]
   1529c:	str	r6, [sp]
   152a0:	ldr	r3, [pc, #40]	; 152d0 <_start@@Base+0xca8>
   152a4:	mov	r2, #2
   152a8:	mov	r1, r5
   152ac:	mov	r0, r4
   152b0:	bl	3b368 <flatcc_json_printer_table_field@@Base>
   152b4:	add	sp, sp, #8
   152b8:	pop	{r4, r5, r6, pc}
   152bc:	andeq	r5, r1, r0, asr #7
   152c0:	andeq	sp, r3, r4, lsl #2
   152c4:	andeq	r5, r1, r0, ror #6
   152c8:	andeq	sp, r3, ip, lsl r1
   152cc:	andeq	r5, r1, r0, lsl #6
   152d0:	andeq	sp, r3, r4, lsr r1
   152d4:	push	{lr}		; (str lr, [sp, #-4]!)
   152d8:	sub	sp, sp, #12
   152dc:	mov	r2, #0
   152e0:	str	r2, [sp, #4]
   152e4:	mov	r3, #19
   152e8:	str	r3, [sp]
   152ec:	ldr	r3, [pc, #8]	; 152fc <_start@@Base+0xcd4>
   152f0:	bl	33238 <flatcc_json_printer_int32_field@@Base>
   152f4:	add	sp, sp, #12
   152f8:	pop	{pc}		; (ldr pc, [sp], #4)
   152fc:	andeq	sp, r3, ip, asr #2
   15300:	push	{r4, r5, lr}
   15304:	sub	sp, sp, #20
   15308:	mov	r4, r0
   1530c:	mov	r5, r1
   15310:	mov	r2, #0
   15314:	mov	r3, #0
   15318:	strd	r2, [sp, #8]
   1531c:	mov	r3, #15
   15320:	str	r3, [sp]
   15324:	ldr	r3, [pc, #44]	; 15358 <_start@@Base+0xd30>
   15328:	bl	33420 <flatcc_json_printer_int64_field@@Base>
   1532c:	mov	r3, #0
   15330:	str	r3, [sp, #4]
   15334:	mov	r3, #21
   15338:	str	r3, [sp]
   1533c:	ldr	r3, [pc, #24]	; 1535c <_start@@Base+0xd34>
   15340:	mov	r2, #1
   15344:	mov	r1, r5
   15348:	mov	r0, r4
   1534c:	bl	32a90 <flatcc_json_printer_uint32_field@@Base>
   15350:	add	sp, sp, #20
   15354:	pop	{r4, r5, pc}
   15358:	andeq	sp, r3, r0, ror #2
   1535c:	andeq	sp, r3, r0, ror r1
   15360:	push	{r4, r5, lr}
   15364:	sub	sp, sp, #20
   15368:	mov	r4, r0
   1536c:	mov	r5, r1
   15370:	mov	r2, #0
   15374:	mov	r3, #0
   15378:	strd	r2, [sp, #8]
   1537c:	mov	r3, #15
   15380:	str	r3, [sp]
   15384:	ldr	r3, [pc, #44]	; 153b8 <_start@@Base+0xd90>
   15388:	bl	33420 <flatcc_json_printer_int64_field@@Base>
   1538c:	mov	r3, #0
   15390:	str	r3, [sp, #4]
   15394:	mov	r3, #16
   15398:	str	r3, [sp]
   1539c:	ldr	r3, [pc, #24]	; 153bc <_start@@Base+0xd94>
   153a0:	mov	r2, #1
   153a4:	mov	r1, r5
   153a8:	mov	r0, r4
   153ac:	bl	32a90 <flatcc_json_printer_uint32_field@@Base>
   153b0:	add	sp, sp, #20
   153b4:	pop	{r4, r5, pc}
   153b8:	andeq	sp, r3, r0, ror #2
   153bc:	andeq	sp, r3, r8, lsl #3
   153c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153c4:	sub	sp, sp, #20
   153c8:	mov	r4, r0
   153cc:	mov	r5, r1
   153d0:	mov	r7, #4
   153d4:	str	r7, [sp]
   153d8:	ldr	r3, [pc, #248]	; 154d8 <_start@@Base+0xeb0>
   153dc:	mov	r2, #0
   153e0:	bl	321f8 <flatcc_json_printer_string_field@@Base>
   153e4:	mov	fp, #0
   153e8:	str	fp, [sp, #4]
   153ec:	mov	sl, #9
   153f0:	str	sl, [sp]
   153f4:	ldr	r3, [pc, #224]	; 154dc <_start@@Base+0xeb4>
   153f8:	mov	r2, #1
   153fc:	mov	r1, r5
   15400:	mov	r0, r4
   15404:	bl	32a90 <flatcc_json_printer_uint32_field@@Base>
   15408:	str	r7, [sp]
   1540c:	ldr	r3, [pc, #204]	; 154e0 <_start@@Base+0xeb8>
   15410:	mov	r2, #2
   15414:	mov	r1, r5
   15418:	mov	r0, r4
   1541c:	bl	321f8 <flatcc_json_printer_string_field@@Base>
   15420:	mov	r8, #0
   15424:	mov	r9, #0
   15428:	strd	r8, [sp, #8]
   1542c:	mov	r6, #8
   15430:	str	r6, [sp]
   15434:	ldr	r3, [pc, #168]	; 154e4 <_start@@Base+0xebc>
   15438:	mov	r2, #3
   1543c:	mov	r1, r5
   15440:	mov	r0, r4
   15444:	bl	33420 <flatcc_json_printer_int64_field@@Base>
   15448:	str	r7, [sp]
   1544c:	ldr	r3, [pc, #148]	; 154e8 <_start@@Base+0xec0>
   15450:	mov	r2, r7
   15454:	mov	r1, r5
   15458:	mov	r0, r4
   1545c:	bl	321f8 <flatcc_json_printer_string_field@@Base>
   15460:	strd	r8, [sp, #8]
   15464:	str	r6, [sp]
   15468:	ldr	r3, [pc, #124]	; 154ec <_start@@Base+0xec4>
   1546c:	mov	r2, #5
   15470:	mov	r1, r5
   15474:	mov	r0, r4
   15478:	bl	33420 <flatcc_json_printer_int64_field@@Base>
   1547c:	str	fp, [sp, #4]
   15480:	str	sl, [sp]
   15484:	ldr	r3, [pc, #100]	; 154f0 <_start@@Base+0xec8>
   15488:	mov	r2, #6
   1548c:	mov	r1, r5
   15490:	mov	r0, r4
   15494:	bl	32a90 <flatcc_json_printer_uint32_field@@Base>
   15498:	strd	r8, [sp, #8]
   1549c:	str	r6, [sp]
   154a0:	ldr	r3, [pc, #76]	; 154f4 <_start@@Base+0xecc>
   154a4:	mov	r2, #7
   154a8:	mov	r1, r5
   154ac:	mov	r0, r4
   154b0:	bl	33420 <flatcc_json_printer_int64_field@@Base>
   154b4:	str	fp, [sp, #4]
   154b8:	str	sl, [sp]
   154bc:	ldr	r3, [pc, #52]	; 154f8 <_start@@Base+0xed0>
   154c0:	mov	r2, r6
   154c4:	mov	r1, r5
   154c8:	mov	r0, r4
   154cc:	bl	32a90 <flatcc_json_printer_uint32_field@@Base>
   154d0:	add	sp, sp, #20
   154d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154d8:	muleq	r3, ip, r1
   154dc:	andeq	sp, r3, r4, lsr #3
   154e0:			; <UNDEFINED> instruction: 0x0003d1b0
   154e4:			; <UNDEFINED> instruction: 0x0003d1b8
   154e8:	andeq	sp, r3, r4, asr #3
   154ec:	andeq	sp, r3, ip, asr #3
   154f0:	ldrdeq	sp, [r3], -r8
   154f4:	andeq	sp, r3, r4, ror #3
   154f8:	strdeq	sp, [r3], -r0
   154fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15500:	sub	sp, sp, #20
   15504:	mov	r4, r0
   15508:	mov	r5, r1
   1550c:	ldr	r3, [pc, #1096]	; 1595c <_start@@Base+0x1334>
   15510:	str	r3, [sp, #4]
   15514:	mov	r6, #3
   15518:	str	r6, [sp]
   1551c:	ldr	r3, [pc, #1084]	; 15960 <_start@@Base+0x1338>
   15520:	mov	r2, #0
   15524:	bl	3bcf0 <flatcc_json_printer_struct_field@@Base>
   15528:	mov	r3, #150	; 0x96
   1552c:	str	r3, [sp, #4]
   15530:	mov	r7, #4
   15534:	str	r7, [sp]
   15538:	ldr	r3, [pc, #1060]	; 15964 <_start@@Base+0x133c>
   1553c:	mov	r2, #1
   15540:	mov	r1, r5
   15544:	mov	r0, r4
   15548:	bl	33050 <flatcc_json_printer_int16_field@@Base>
   1554c:	mov	r3, #100	; 0x64
   15550:	str	r3, [sp, #4]
   15554:	mov	r2, #2
   15558:	str	r2, [sp]
   1555c:	ldr	r3, [pc, #1028]	; 15968 <_start@@Base+0x1340>
   15560:	mov	r1, r5
   15564:	mov	r0, r4
   15568:	bl	33050 <flatcc_json_printer_int16_field@@Base>
   1556c:	str	r7, [sp]
   15570:	ldr	r3, [pc, #1012]	; 1596c <_start@@Base+0x1344>
   15574:	mov	r2, r6
   15578:	mov	r1, r5
   1557c:	mov	r0, r4
   15580:	bl	321f8 <flatcc_json_printer_string_field@@Base>
   15584:	mov	r8, #9
   15588:	str	r8, [sp]
   1558c:	ldr	r3, [pc, #988]	; 15970 <_start@@Base+0x1348>
   15590:	mov	r2, #5
   15594:	mov	r1, r5
   15598:	mov	r0, r4
   1559c:	bl	36f4c <flatcc_json_printer_uint8_vector_field@@Base>
   155a0:	ldr	r3, [pc, #972]	; 15974 <_start@@Base+0x134c>
   155a4:	str	r3, [sp, #8]
   155a8:	mov	fp, #8
   155ac:	str	fp, [sp, #4]
   155b0:	mov	r9, #5
   155b4:	str	r9, [sp]
   155b8:	ldr	r3, [pc, #952]	; 15978 <_start@@Base+0x1350>
   155bc:	mov	r2, #6
   155c0:	mov	r1, r5
   155c4:	mov	r0, r4
   155c8:	bl	343fc <flatcc_json_printer_int8_enum_field@@Base>
   155cc:	ldr	r3, [pc, #936]	; 1597c <_start@@Base+0x1354>
   155d0:	str	r3, [sp, #8]
   155d4:	ldr	r3, [pc, #932]	; 15980 <_start@@Base+0x1358>
   155d8:	str	r3, [sp, #4]
   155dc:	str	r7, [sp]
   155e0:	ldr	r3, [pc, #924]	; 15984 <_start@@Base+0x135c>
   155e4:	mov	r2, fp
   155e8:	mov	r1, r5
   155ec:	mov	r0, r4
   155f0:	bl	3b618 <flatcc_json_printer_union_field@@Base>
   155f4:	ldr	r3, [pc, #908]	; 15988 <_start@@Base+0x1360>
   155f8:	str	r3, [sp, #8]
   155fc:	str	r7, [sp, #4]
   15600:	str	r9, [sp]
   15604:	ldr	r3, [pc, #896]	; 1598c <_start@@Base+0x1364>
   15608:	mov	r2, r8
   1560c:	mov	r1, r5
   15610:	mov	r0, r4
   15614:	bl	3a498 <flatcc_json_printer_struct_vector_field@@Base>
   15618:	mov	r6, #17
   1561c:	str	r6, [sp]
   15620:	ldr	r3, [pc, #872]	; 15990 <_start@@Base+0x1368>
   15624:	mov	r2, #10
   15628:	mov	r1, r5
   1562c:	mov	r0, r4
   15630:	bl	3a80c <flatcc_json_printer_string_vector_field@@Base>
   15634:	ldr	sl, [pc, #856]	; 15994 <_start@@Base+0x136c>
   15638:	str	sl, [sp, #4]
   1563c:	str	r6, [sp]
   15640:	ldr	r3, [pc, #848]	; 15998 <_start@@Base+0x1370>
   15644:	mov	r2, #11
   15648:	mov	r1, r5
   1564c:	mov	r0, r4
   15650:	bl	3abf8 <flatcc_json_printer_table_vector_field@@Base>
   15654:	str	sl, [sp, #4]
   15658:	str	r9, [sp]
   1565c:	ldr	r3, [pc, #824]	; 1599c <_start@@Base+0x1374>
   15660:	mov	r2, #12
   15664:	mov	r1, r5
   15668:	mov	r0, r4
   1566c:	bl	3b368 <flatcc_json_printer_table_field@@Base>
   15670:	str	sl, [sp, #8]
   15674:	mov	sl, #0
   15678:	str	sl, [sp, #4]
   1567c:	mov	r3, #20
   15680:	str	r3, [sp]
   15684:	ldr	r3, [pc, #788]	; 159a0 <_start@@Base+0x1378>
   15688:	mov	r2, #13
   1568c:	mov	r1, r5
   15690:	mov	r0, r4
   15694:	bl	3c34c <flatcc_json_printer_table_as_nested_root@@Base>
   15698:	ldr	r3, [pc, #772]	; 159a4 <_start@@Base+0x137c>
   1569c:	str	r3, [sp, #4]
   156a0:	str	r8, [sp]
   156a4:	ldr	r3, [pc, #764]	; 159a8 <_start@@Base+0x1380>
   156a8:	mov	r2, #14
   156ac:	mov	r1, r5
   156b0:	mov	r0, r4
   156b4:	bl	3b368 <flatcc_json_printer_table_field@@Base>
   156b8:	mov	r3, #1
   156bc:	str	r3, [sp, #4]
   156c0:	str	fp, [sp]
   156c4:	ldr	r3, [pc, #736]	; 159ac <_start@@Base+0x1384>
   156c8:	mov	r2, #15
   156cc:	mov	r1, r5
   156d0:	mov	r0, r4
   156d4:	bl	33610 <flatcc_json_printer_bool_field@@Base>
   156d8:	str	sl, [sp, #4]
   156dc:	mov	r8, #16
   156e0:	str	r8, [sp]
   156e4:	ldr	r3, [pc, #708]	; 159b0 <_start@@Base+0x1388>
   156e8:	mov	r2, r8
   156ec:	mov	r1, r5
   156f0:	mov	r0, r4
   156f4:	bl	33238 <flatcc_json_printer_int32_field@@Base>
   156f8:	str	sl, [sp, #4]
   156fc:	str	r8, [sp]
   15700:	ldr	r3, [pc, #684]	; 159b4 <_start@@Base+0x138c>
   15704:	mov	r2, r6
   15708:	mov	r1, r5
   1570c:	mov	r0, r4
   15710:	bl	32a90 <flatcc_json_printer_uint32_field@@Base>
   15714:	mov	r2, #0
   15718:	mov	r3, #0
   1571c:	strd	r2, [sp, #8]
   15720:	str	r8, [sp]
   15724:	ldr	r3, [pc, #652]	; 159b8 <_start@@Base+0x1390>
   15728:	mov	r2, #18
   1572c:	mov	r1, r5
   15730:	mov	r0, r4
   15734:	bl	33420 <flatcc_json_printer_int64_field@@Base>
   15738:	mov	r2, #0
   1573c:	mov	r3, #0
   15740:	strd	r2, [sp, #8]
   15744:	str	r8, [sp]
   15748:	ldr	r3, [pc, #620]	; 159bc <_start@@Base+0x1394>
   1574c:	mov	r2, #19
   15750:	mov	r1, r5
   15754:	mov	r0, r4
   15758:	bl	32c78 <flatcc_json_printer_uint64_field@@Base>
   1575c:	str	sl, [sp, #4]
   15760:	str	r6, [sp]
   15764:	ldr	r3, [pc, #596]	; 159c0 <_start@@Base+0x1398>
   15768:	mov	r2, #20
   1576c:	mov	r1, r5
   15770:	mov	r0, r4
   15774:	bl	33238 <flatcc_json_printer_int32_field@@Base>
   15778:	str	sl, [sp, #4]
   1577c:	str	r6, [sp]
   15780:	ldr	r3, [pc, #572]	; 159c4 <_start@@Base+0x139c>
   15784:	mov	r2, #21
   15788:	mov	r1, r5
   1578c:	mov	r0, r4
   15790:	bl	32a90 <flatcc_json_printer_uint32_field@@Base>
   15794:	mov	r2, #0
   15798:	mov	r3, #0
   1579c:	strd	r2, [sp, #8]
   157a0:	str	r6, [sp]
   157a4:	ldr	r3, [pc, #540]	; 159c8 <_start@@Base+0x13a0>
   157a8:	mov	r2, #22
   157ac:	mov	r1, r5
   157b0:	mov	r0, r4
   157b4:	bl	33420 <flatcc_json_printer_int64_field@@Base>
   157b8:	mov	r2, #0
   157bc:	mov	r3, #0
   157c0:	strd	r2, [sp, #8]
   157c4:	str	r6, [sp]
   157c8:	ldr	r3, [pc, #508]	; 159cc <_start@@Base+0x13a4>
   157cc:	mov	r2, #23
   157d0:	mov	r1, r5
   157d4:	mov	r0, r4
   157d8:	bl	32c78 <flatcc_json_printer_uint64_field@@Base>
   157dc:	str	r8, [sp]
   157e0:	ldr	r3, [pc, #488]	; 159d0 <_start@@Base+0x13a8>
   157e4:	mov	r2, #24
   157e8:	mov	r1, r5
   157ec:	mov	r0, r4
   157f0:	bl	3840c <flatcc_json_printer_bool_vector_field@@Base>
   157f4:	str	r9, [sp]
   157f8:	vldr	s0, [pc, #336]	; 15950 <_start@@Base+0x1328>
   157fc:	ldr	r3, [pc, #464]	; 159d4 <_start@@Base+0x13ac>
   15800:	mov	r2, #25
   15804:	mov	r1, r5
   15808:	mov	r0, r4
   1580c:	bl	337f8 <flatcc_json_printer_float_field@@Base>
   15810:	mov	r8, #6
   15814:	str	r8, [sp]
   15818:	vldr	s0, [pc, #308]	; 15954 <_start@@Base+0x132c>
   1581c:	ldr	r3, [pc, #436]	; 159d8 <_start@@Base+0x13b0>
   15820:	mov	r2, #26
   15824:	mov	r1, r5
   15828:	mov	r0, r4
   1582c:	bl	337f8 <flatcc_json_printer_float_field@@Base>
   15830:	str	r8, [sp]
   15834:	vldr	s0, [pc, #284]	; 15958 <_start@@Base+0x1330>
   15838:	ldr	r3, [pc, #412]	; 159dc <_start@@Base+0x13b4>
   1583c:	mov	r2, #27
   15840:	mov	r1, r5
   15844:	mov	r0, r4
   15848:	bl	337f8 <flatcc_json_printer_float_field@@Base>
   1584c:	mov	r3, #18
   15850:	str	r3, [sp]
   15854:	ldr	r3, [pc, #388]	; 159e0 <_start@@Base+0x13b8>
   15858:	mov	r2, #28
   1585c:	mov	r1, r5
   15860:	mov	r0, r4
   15864:	bl	3a80c <flatcc_json_printer_string_vector_field@@Base>
   15868:	ldr	r3, [pc, #372]	; 159e4 <_start@@Base+0x13bc>
   1586c:	str	r3, [sp, #8]
   15870:	str	fp, [sp, #4]
   15874:	mov	r3, #23
   15878:	str	r3, [sp]
   1587c:	ldr	r3, [pc, #356]	; 159e8 <_start@@Base+0x13c0>
   15880:	mov	r2, #29
   15884:	mov	r1, r5
   15888:	mov	r0, r4
   1588c:	bl	3a498 <flatcc_json_printer_struct_vector_field@@Base>
   15890:	str	r7, [sp]
   15894:	ldr	r3, [pc, #336]	; 159ec <_start@@Base+0x13c4>
   15898:	mov	r2, #30
   1589c:	mov	r1, r5
   158a0:	mov	r0, r4
   158a4:	bl	36f4c <flatcc_json_printer_uint8_vector_field@@Base>
   158a8:	ldr	r3, [pc, #216]	; 15988 <_start@@Base+0x1360>
   158ac:	str	r3, [sp, #8]
   158b0:	str	r7, [sp, #4]
   158b4:	str	r9, [sp]
   158b8:	ldr	r3, [pc, #304]	; 159f0 <_start@@Base+0x13c8>
   158bc:	mov	r2, #31
   158c0:	mov	r1, r5
   158c4:	mov	r0, r4
   158c8:	bl	3a498 <flatcc_json_printer_struct_vector_field@@Base>
   158cc:	mov	r3, #15
   158d0:	str	r3, [sp]
   158d4:	ldr	r3, [pc, #280]	; 159f4 <_start@@Base+0x13cc>
   158d8:	mov	r2, #32
   158dc:	mov	r1, r5
   158e0:	mov	r0, r4
   158e4:	bl	38198 <flatcc_json_printer_int64_vector_field@@Base>
   158e8:	str	r6, [sp]
   158ec:	ldr	r3, [pc, #260]	; 159f8 <_start@@Base+0x13d0>
   158f0:	mov	r2, #33	; 0x21
   158f4:	mov	r1, r5
   158f8:	mov	r0, r4
   158fc:	bl	388f4 <flatcc_json_printer_double_vector_field@@Base>
   15900:	ldr	r3, [pc, #244]	; 159fc <_start@@Base+0x13d4>
   15904:	str	r3, [sp, #4]
   15908:	mov	r3, #21
   1590c:	str	r3, [sp]
   15910:	ldr	r3, [pc, #232]	; 15a00 <_start@@Base+0x13d8>
   15914:	mov	r2, #34	; 0x22
   15918:	mov	r1, r5
   1591c:	mov	r0, r4
   15920:	bl	3b368 <flatcc_json_printer_table_field@@Base>
   15924:	ldr	r3, [pc, #216]	; 15a04 <_start@@Base+0x13dc>
   15928:	str	r3, [sp, #4]
   1592c:	mov	r3, #10
   15930:	str	r3, [sp]
   15934:	ldr	r3, [pc, #204]	; 15a08 <_start@@Base+0x13e0>
   15938:	mov	r2, #35	; 0x23
   1593c:	mov	r1, r5
   15940:	mov	r0, r4
   15944:	bl	3b368 <flatcc_json_printer_table_field@@Base>
   15948:	add	sp, sp, #20
   1594c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15950:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   15954:	submi	r0, r0, r0
   15958:	andeq	r0, r0, r0
   1595c:	andeq	r6, r1, r4, ror r1
   15960:	strdeq	sp, [r3], -ip
   15964:	andeq	sp, r3, r0, lsl #4
   15968:	andeq	sp, r3, r8, lsl #4
   1596c:	andeq	sp, r3, ip, lsl #4
   15970:	andeq	sp, r3, r4, lsl r2
   15974:	andeq	r6, r1, r8, lsr #1
   15978:	andeq	sp, r3, r0, lsr #4
   1597c:	ldrdeq	r5, [r1], -r4
   15980:	andeq	r5, r1, r4, ror pc
   15984:	andeq	sp, r3, r8, lsr #4
   15988:	andeq	r5, r1, r4, ror fp
   1598c:	andeq	sp, r3, r0, lsr r2
   15990:	andeq	sp, r3, r8, lsr r2
   15994:	strdeq	r5, [r1], -ip
   15998:	andeq	sp, r3, ip, asr #4
   1599c:	andeq	sp, r3, r0, ror #4
   159a0:	andeq	sp, r3, r8, ror #4
   159a4:	strdeq	r5, [r1], -r0
   159a8:	andeq	sp, r3, r0, lsl #5
   159ac:	andeq	sp, r3, ip, lsl #5
   159b0:	muleq	r3, r8, r2
   159b4:	andeq	sp, r3, ip, lsr #5
   159b8:	andeq	sp, r3, r0, asr #5
   159bc:	ldrdeq	sp, [r3], -r4
   159c0:	andeq	sp, r3, r8, ror #5
   159c4:	strdeq	sp, [r3], -ip
   159c8:	andeq	sp, r3, r0, lsl r3
   159cc:	andeq	sp, r3, r4, lsr #6
   159d0:	andeq	sp, r3, r8, lsr r3
   159d4:	andeq	sp, r3, ip, asr #6
   159d8:	andeq	sp, r3, r4, asr r3
   159dc:	andeq	sp, r3, ip, asr r3
   159e0:	andeq	sp, r3, r4, ror #6
   159e4:	andeq	r5, r1, ip, lsl #21
   159e8:	andeq	sp, r3, r8, ror r3
   159ec:	muleq	r3, r0, r3
   159f0:	muleq	r3, r8, r3
   159f4:	andeq	sp, r3, r0, lsr #7
   159f8:			; <UNDEFINED> instruction: 0x0003d3b0
   159fc:	ldrdeq	r4, [r1], -r0
   15a00:	andeq	sp, r3, r4, asr #7
   15a04:	andeq	r5, r1, ip, lsl #20
   15a08:	ldrdeq	sp, [r3], -ip
   15a0c:	push	{r4, r5, r6, lr}
   15a10:	sub	sp, sp, #8
   15a14:	mov	r5, r0
   15a18:	mov	r6, r1
   15a1c:	mov	r4, #0
   15a20:	str	r4, [sp, #4]
   15a24:	mov	r3, #4
   15a28:	str	r3, [sp]
   15a2c:	ldr	r3, [pc, #76]	; 15a80 <_start@@Base+0x1458>
   15a30:	mov	r2, r4
   15a34:	bl	323b0 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15a38:	mov	r2, #1
   15a3c:	str	r2, [sp, #4]
   15a40:	mov	r3, #7
   15a44:	str	r3, [sp]
   15a48:	ldr	r3, [pc, #52]	; 15a84 <_start@@Base+0x145c>
   15a4c:	mov	r1, r6
   15a50:	mov	r0, r5
   15a54:	bl	323b0 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15a58:	str	r4, [sp, #4]
   15a5c:	mov	r3, #6
   15a60:	str	r3, [sp]
   15a64:	ldr	r3, [pc, #28]	; 15a88 <_start@@Base+0x1460>
   15a68:	mov	r2, #2
   15a6c:	mov	r1, r6
   15a70:	mov	r0, r5
   15a74:	bl	323b0 <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15a78:	add	sp, sp, #8
   15a7c:	pop	{r4, r5, r6, pc}
   15a80:	andeq	sp, r3, r8, ror #7
   15a84:	strdeq	sp, [r3], -r0
   15a88:	strdeq	sp, [r3], -r8
   15a8c:	push	{r4, r5, lr}
   15a90:	sub	sp, sp, #12
   15a94:	mov	r5, r0
   15a98:	mov	r4, r1
   15a9c:	mov	r3, #2
   15aa0:	str	r3, [sp, #4]
   15aa4:	ldr	r3, [pc, #60]	; 15ae8 <_start@@Base+0x14c0>
   15aa8:	str	r3, [sp]
   15aac:	mov	r3, #0
   15ab0:	mov	r2, r1
   15ab4:	mov	r1, r3
   15ab8:	bl	35120 <flatcc_json_printer_uint32_struct_field@@Base>
   15abc:	mov	r3, #8
   15ac0:	str	r3, [sp, #4]
   15ac4:	ldr	r3, [pc, #32]	; 15aec <_start@@Base+0x14c4>
   15ac8:	str	r3, [sp]
   15acc:	mov	r3, #4
   15ad0:	mov	r2, r4
   15ad4:	mov	r1, #1
   15ad8:	mov	r0, r5
   15adc:	bl	35120 <flatcc_json_printer_uint32_struct_field@@Base>
   15ae0:	add	sp, sp, #12
   15ae4:	pop	{r4, r5, pc}
   15ae8:	andeq	sp, r3, r0, lsl #8
   15aec:	andeq	sp, r3, r4, lsl #8
   15af0:	push	{r4, r5, r6, lr}
   15af4:	sub	sp, sp, #16
   15af8:	mov	r4, r0
   15afc:	mov	r5, r1
   15b00:	mov	r6, #2
   15b04:	str	r6, [sp]
   15b08:	ldr	r3, [pc, #88]	; 15b68 <_start@@Base+0x1540>
   15b0c:	mov	r2, #0
   15b10:	bl	321f8 <flatcc_json_printer_string_field@@Base>
   15b14:	mov	r2, #0
   15b18:	mov	r3, #0
   15b1c:	strd	r2, [sp, #8]
   15b20:	mov	r3, #3
   15b24:	str	r3, [sp]
   15b28:	ldr	r3, [pc, #60]	; 15b6c <_start@@Base+0x1544>
   15b2c:	mov	r2, #1
   15b30:	mov	r1, r5
   15b34:	mov	r0, r4
   15b38:	bl	33420 <flatcc_json_printer_int64_field@@Base>
   15b3c:	mov	r3, #0
   15b40:	str	r3, [sp, #4]
   15b44:	mov	r3, #5
   15b48:	str	r3, [sp]
   15b4c:	ldr	r3, [pc, #28]	; 15b70 <_start@@Base+0x1548>
   15b50:	mov	r2, r6
   15b54:	mov	r1, r5
   15b58:	mov	r0, r4
   15b5c:	bl	328a8 <flatcc_json_printer_uint16_field@@Base>
   15b60:	add	sp, sp, #16
   15b64:	pop	{r4, r5, r6, pc}
   15b68:	andeq	sp, r3, r0, lsl #8
   15b6c:	andeq	sp, r3, r0, lsl r4
   15b70:	andeq	sp, r3, r4, lsl r4
   15b74:	push	{r4, r5, r6, lr}
   15b78:	sub	sp, sp, #8
   15b7c:	mov	r6, r0
   15b80:	mov	r5, r1
   15b84:	mov	r4, #1
   15b88:	str	r4, [sp, #4]
   15b8c:	ldr	r3, [pc, #56]	; 15bcc <_start@@Base+0x15a4>
   15b90:	str	r3, [sp]
   15b94:	mov	r3, #0
   15b98:	mov	r2, r1
   15b9c:	mov	r1, r3
   15ba0:	bl	3558c <flatcc_json_printer_int16_struct_field@@Base>
   15ba4:	str	r4, [sp, #4]
   15ba8:	ldr	r3, [pc, #32]	; 15bd0 <_start@@Base+0x15a8>
   15bac:	str	r3, [sp]
   15bb0:	mov	r3, #2
   15bb4:	mov	r2, r5
   15bb8:	mov	r1, r4
   15bbc:	mov	r0, r6
   15bc0:	bl	35414 <flatcc_json_printer_int8_struct_field@@Base>
   15bc4:	add	sp, sp, #8
   15bc8:	pop	{r4, r5, r6, pc}
   15bcc:	strdeq	sp, [r3], -r8
   15bd0:	andeq	sp, r3, ip, lsl r4
   15bd4:	push	{r4, lr}
   15bd8:	ldrb	r3, [r1, #8]
   15bdc:	sub	r3, r3, #1
   15be0:	cmp	r3, #3
   15be4:	ldrls	pc, [pc, r3, lsl #2]
   15be8:	b	15c28 <_start@@Base+0x1600>
   15bec:	strdeq	r5, [r1], -ip
   15bf0:	andeq	r5, r1, r8, lsl #24
   15bf4:	andeq	r5, r1, r4, lsl ip
   15bf8:	andeq	r5, r1, r0, lsr #24
   15bfc:	ldr	r2, [pc, #40]	; 15c2c <_start@@Base+0x1604>
   15c00:	bl	3b8d8 <flatcc_json_printer_union_table@@Base>
   15c04:	pop	{r4, pc}
   15c08:	ldr	r2, [pc, #32]	; 15c30 <_start@@Base+0x1608>
   15c0c:	bl	3b8d8 <flatcc_json_printer_union_table@@Base>
   15c10:	pop	{r4, pc}
   15c14:	ldr	r2, [pc, #24]	; 15c34 <_start@@Base+0x160c>
   15c18:	bl	3b8d8 <flatcc_json_printer_union_table@@Base>
   15c1c:	pop	{r4, pc}
   15c20:	ldr	r2, [pc, #16]	; 15c38 <_start@@Base+0x1610>
   15c24:	bl	3b8d8 <flatcc_json_printer_union_table@@Base>
   15c28:	pop	{r4, pc}
   15c2c:	strdeq	r5, [r1], -ip
   15c30:	strdeq	r5, [r1], -ip
   15c34:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15c38:	andeq	r5, r1, ip, lsr ip
   15c3c:	push	{r4, r5, lr}
   15c40:	sub	sp, sp, #20
   15c44:	mov	r4, r0
   15c48:	mov	r5, r1
   15c4c:	ldr	r3, [pc, #108]	; 15cc0 <_start@@Base+0x1698>
   15c50:	str	r3, [sp, #4]
   15c54:	mov	r3, #6
   15c58:	str	r3, [sp]
   15c5c:	ldr	r3, [pc, #96]	; 15cc4 <_start@@Base+0x169c>
   15c60:	mov	r2, #0
   15c64:	bl	3b368 <flatcc_json_printer_table_field@@Base>
   15c68:	ldr	r3, [pc, #88]	; 15cc8 <_start@@Base+0x16a0>
   15c6c:	str	r3, [sp, #4]
   15c70:	mov	r3, #5
   15c74:	str	r3, [sp]
   15c78:	ldr	r3, [pc, #76]	; 15ccc <_start@@Base+0x16a4>
   15c7c:	mov	r2, #1
   15c80:	mov	r1, r5
   15c84:	mov	r0, r4
   15c88:	bl	3b368 <flatcc_json_printer_table_field@@Base>
   15c8c:	ldr	r3, [pc, #60]	; 15cd0 <_start@@Base+0x16a8>
   15c90:	str	r3, [sp, #8]
   15c94:	ldr	r3, [pc, #56]	; 15cd4 <_start@@Base+0x16ac>
   15c98:	str	r3, [sp, #4]
   15c9c:	mov	r3, #7
   15ca0:	str	r3, [sp]
   15ca4:	ldr	r3, [pc, #44]	; 15cd8 <_start@@Base+0x16b0>
   15ca8:	mov	r2, #3
   15cac:	mov	r1, r5
   15cb0:	mov	r0, r4
   15cb4:	bl	3b058 <flatcc_json_printer_union_vector_field@@Base>
   15cb8:	add	sp, sp, #20
   15cbc:	pop	{r4, r5, pc}
   15cc0:	andeq	r5, r1, r4, asr #4
   15cc4:	andeq	sp, r3, r0, lsr #8
   15cc8:	ldrdeq	r5, [r1], -ip
   15ccc:	andeq	sp, r3, r8, lsr #8
   15cd0:	ldrdeq	r5, [r1], -r4
   15cd4:	andeq	r5, r1, r4, ror pc
   15cd8:	andeq	sp, r3, r0, lsr r4
   15cdc:	push	{r4, r5, r6, r7, r8, r9, lr}
   15ce0:	sub	sp, sp, #20
   15ce4:	mov	r6, r0
   15ce8:	mov	r7, r1
   15cec:	ldr	r5, [pc, #176]	; 15da4 <_start@@Base+0x177c>
   15cf0:	str	r5, [sp, #8]
   15cf4:	ldr	r4, [pc, #172]	; 15da8 <_start@@Base+0x1780>
   15cf8:	str	r4, [sp, #4]
   15cfc:	mov	r3, #14
   15d00:	str	r3, [sp]
   15d04:	ldr	r3, [pc, #160]	; 15dac <_start@@Base+0x1784>
   15d08:	mov	r2, #1
   15d0c:	bl	3b618 <flatcc_json_printer_union_field@@Base>
   15d10:	str	r5, [sp, #8]
   15d14:	str	r4, [sp, #4]
   15d18:	mov	r9, #10
   15d1c:	str	r9, [sp]
   15d20:	ldr	r3, [pc, #136]	; 15db0 <_start@@Base+0x1788>
   15d24:	mov	r2, #3
   15d28:	mov	r1, r7
   15d2c:	mov	r0, r6
   15d30:	bl	3b618 <flatcc_json_printer_union_field@@Base>
   15d34:	str	r5, [sp, #8]
   15d38:	str	r4, [sp, #4]
   15d3c:	mov	r8, #9
   15d40:	str	r8, [sp]
   15d44:	ldr	r3, [pc, #104]	; 15db4 <_start@@Base+0x178c>
   15d48:	mov	r2, #5
   15d4c:	mov	r1, r7
   15d50:	mov	r0, r6
   15d54:	bl	3b618 <flatcc_json_printer_union_field@@Base>
   15d58:	str	r5, [sp, #8]
   15d5c:	str	r4, [sp, #4]
   15d60:	mov	r3, #5
   15d64:	str	r3, [sp]
   15d68:	ldr	r3, [pc, #72]	; 15db8 <_start@@Base+0x1790>
   15d6c:	mov	r2, #7
   15d70:	mov	r1, r7
   15d74:	mov	r0, r6
   15d78:	bl	3b618 <flatcc_json_printer_union_field@@Base>
   15d7c:	str	r5, [sp, #8]
   15d80:	str	r4, [sp, #4]
   15d84:	str	r9, [sp]
   15d88:	ldr	r3, [pc, #44]	; 15dbc <_start@@Base+0x1794>
   15d8c:	mov	r2, r8
   15d90:	mov	r1, r7
   15d94:	mov	r0, r6
   15d98:	bl	3b058 <flatcc_json_printer_union_vector_field@@Base>
   15d9c:	add	sp, sp, #20
   15da0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15da4:	andeq	r5, r1, r0, asr #27
   15da8:			; <UNDEFINED> instruction: 0x00015eb4
   15dac:	andeq	sp, r3, r8, lsr r4
   15db0:	andeq	sp, r3, r8, asr #8
   15db4:	andeq	sp, r3, r4, asr r4
   15db8:	andeq	sp, r3, r0, ror #8
   15dbc:	andeq	sp, r3, r8, ror #8
   15dc0:	push	{r4, lr}
   15dc4:	ldrb	r3, [r1, #8]
   15dc8:	cmp	r3, #9
   15dcc:	beq	15e20 <_start@@Base+0x17f8>
   15dd0:	bls	15df0 <_start@@Base+0x17c8>
   15dd4:	cmp	r3, #11
   15dd8:	beq	15e38 <_start@@Base+0x1810>
   15ddc:	bcc	15e2c <_start@@Base+0x1804>
   15de0:	cmp	r3, #255	; 0xff
   15de4:	bne	15e10 <_start@@Base+0x17e8>
   15de8:	bl	3bab4 <flatcc_json_printer_union_string@@Base>
   15dec:	pop	{r4, pc}
   15df0:	cmp	r3, #2
   15df4:	beq	15e14 <_start@@Base+0x17ec>
   15df8:	cmp	r3, #8
   15dfc:	bne	15e0c <_start@@Base+0x17e4>
   15e00:	ldr	r2, [pc, #56]	; 15e40 <_start@@Base+0x1818>
   15e04:	bl	3b9f0 <flatcc_json_printer_union_struct@@Base>
   15e08:	pop	{r4, pc}
   15e0c:	pop	{r4, pc}
   15e10:	pop	{r4, pc}
   15e14:	ldr	r2, [pc, #40]	; 15e44 <_start@@Base+0x181c>
   15e18:	bl	3b8d8 <flatcc_json_printer_union_table@@Base>
   15e1c:	pop	{r4, pc}
   15e20:	ldr	r2, [pc, #32]	; 15e48 <_start@@Base+0x1820>
   15e24:	bl	3b9f0 <flatcc_json_printer_union_struct@@Base>
   15e28:	pop	{r4, pc}
   15e2c:	ldr	r2, [pc, #20]	; 15e48 <_start@@Base+0x1820>
   15e30:	bl	3b9f0 <flatcc_json_printer_union_struct@@Base>
   15e34:	pop	{r4, pc}
   15e38:	bl	3bab4 <flatcc_json_printer_union_string@@Base>
   15e3c:	pop	{r4, pc}
   15e40:	andeq	r5, r1, r0, lsl #29
   15e44:	ldrdeq	r5, [r1], -r4
   15e48:	andeq	r5, r1, ip, asr #28
   15e4c:	push	{lr}		; (str lr, [sp, #-4]!)
   15e50:	sub	sp, sp, #12
   15e54:	mov	r3, #10
   15e58:	str	r3, [sp, #4]
   15e5c:	ldr	r3, [pc, #24]	; 15e7c <_start@@Base+0x1854>
   15e60:	str	r3, [sp]
   15e64:	mov	r3, #0
   15e68:	mov	r2, r1
   15e6c:	mov	r1, r3
   15e70:	bl	35704 <flatcc_json_printer_int32_struct_field@@Base>
   15e74:	add	sp, sp, #12
   15e78:	pop	{pc}		; (ldr pc, [sp], #4)
   15e7c:	andeq	sp, r3, r4, ror r4
   15e80:	push	{lr}		; (str lr, [sp, #-4]!)
   15e84:	sub	sp, sp, #12
   15e88:	mov	r3, #11
   15e8c:	str	r3, [sp, #4]
   15e90:	ldr	r3, [pc, #24]	; 15eb0 <_start@@Base+0x1888>
   15e94:	str	r3, [sp]
   15e98:	mov	r3, #0
   15e9c:	mov	r2, r1
   15ea0:	mov	r1, r3
   15ea4:	bl	34fa8 <flatcc_json_printer_uint16_struct_field@@Base>
   15ea8:	add	sp, sp, #12
   15eac:	pop	{pc}		; (ldr pc, [sp], #4)
   15eb0:	andeq	sp, r3, r0, lsl #9
   15eb4:	push	{r4, lr}
   15eb8:	cmp	r1, #9
   15ebc:	beq	15f18 <_start@@Base+0x18f0>
   15ec0:	bls	15ee8 <_start@@Base+0x18c0>
   15ec4:	cmp	r1, #11
   15ec8:	beq	15f38 <_start@@Base+0x1910>
   15ecc:	bcc	15f28 <_start@@Base+0x1900>
   15ed0:	cmp	r1, #255	; 0xff
   15ed4:	bne	15f48 <_start@@Base+0x1920>
   15ed8:	mov	r2, #6
   15edc:	ldr	r1, [pc, #116]	; 15f58 <_start@@Base+0x1930>
   15ee0:	bl	320d4 <flatcc_json_printer_enum@@Base>
   15ee4:	pop	{r4, pc}
   15ee8:	cmp	r1, #2
   15eec:	beq	15f08 <_start@@Base+0x18e0>
   15ef0:	cmp	r1, #8
   15ef4:	bne	15f48 <_start@@Base+0x1920>
   15ef8:	mov	r2, #8
   15efc:	ldr	r1, [pc, #88]	; 15f5c <_start@@Base+0x1934>
   15f00:	bl	320d4 <flatcc_json_printer_enum@@Base>
   15f04:	pop	{r4, pc}
   15f08:	mov	r2, #5
   15f0c:	ldr	r1, [pc, #76]	; 15f60 <_start@@Base+0x1938>
   15f10:	bl	320d4 <flatcc_json_printer_enum@@Base>
   15f14:	pop	{r4, pc}
   15f18:	mov	r2, #5
   15f1c:	ldr	r1, [pc, #64]	; 15f64 <_start@@Base+0x193c>
   15f20:	bl	320d4 <flatcc_json_printer_enum@@Base>
   15f24:	pop	{r4, pc}
   15f28:	mov	r2, #7
   15f2c:	ldr	r1, [pc, #52]	; 15f68 <_start@@Base+0x1940>
   15f30:	bl	320d4 <flatcc_json_printer_enum@@Base>
   15f34:	pop	{r4, pc}
   15f38:	mov	r2, #5
   15f3c:	ldr	r1, [pc, #40]	; 15f6c <_start@@Base+0x1944>
   15f40:	bl	320d4 <flatcc_json_printer_enum@@Base>
   15f44:	pop	{r4, pc}
   15f48:	mov	r2, #4
   15f4c:	ldr	r1, [pc, #28]	; 15f70 <_start@@Base+0x1948>
   15f50:	bl	320d4 <flatcc_json_printer_enum@@Base>
   15f54:	pop	{r4, pc}
   15f58:			; <UNDEFINED> instruction: 0x0003d4b8
   15f5c:	muleq	r3, r4, r4
   15f60:	andeq	sp, r3, ip, lsl #9
   15f64:	andeq	sp, r3, r0, lsr #9
   15f68:	andeq	sp, r3, r8, lsr #9
   15f6c:			; <UNDEFINED> instruction: 0x0003d4b0
   15f70:	strdeq	r0, [r4], -r4
   15f74:	push	{r4, lr}
   15f78:	sub	r1, r1, #1
   15f7c:	cmp	r1, #3
   15f80:	ldrls	pc, [pc, r1, lsl #2]
   15f84:	b	15fd8 <_start@@Base+0x19b0>
   15f88:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15f8c:	andeq	r5, r1, r8, lsr #31
   15f90:			; <UNDEFINED> instruction: 0x00015fb8
   15f94:	andeq	r5, r1, r8, asr #31
   15f98:	mov	r2, #7
   15f9c:	ldr	r1, [pc, #68]	; 15fe8 <_start@@Base+0x19c0>
   15fa0:	bl	320d4 <flatcc_json_printer_enum@@Base>
   15fa4:	pop	{r4, pc}
   15fa8:	mov	r2, #23
   15fac:	ldr	r1, [pc, #56]	; 15fec <_start@@Base+0x19c4>
   15fb0:	bl	320d4 <flatcc_json_printer_enum@@Base>
   15fb4:	pop	{r4, pc}
   15fb8:	mov	r2, #8
   15fbc:	ldr	r1, [pc, #44]	; 15ff0 <_start@@Base+0x19c8>
   15fc0:	bl	320d4 <flatcc_json_printer_enum@@Base>
   15fc4:	pop	{r4, pc}
   15fc8:	mov	r2, #3
   15fcc:	ldr	r1, [pc, #32]	; 15ff4 <_start@@Base+0x19cc>
   15fd0:	bl	320d4 <flatcc_json_printer_enum@@Base>
   15fd4:	pop	{r4, pc}
   15fd8:	mov	r2, #4
   15fdc:	ldr	r1, [pc, #20]	; 15ff8 <_start@@Base+0x19d0>
   15fe0:	bl	320d4 <flatcc_json_printer_enum@@Base>
   15fe4:	pop	{r4, pc}
   15fe8:	andeq	sp, r3, r0, asr #9
   15fec:	andeq	sp, r3, r8, asr #9
   15ff0:	andeq	sp, r3, r0, ror #9
   15ff4:	andeq	sp, r3, ip, ror #9
   15ff8:	strdeq	r0, [r4], -r4
   15ffc:	push	{r4, r5, r6, r7, lr}
   16000:	sub	sp, sp, #20
   16004:	mov	r5, r0
   16008:	mov	r6, r1
   1600c:	ldr	r7, [pc, #128]	; 16094 <_start@@Base+0x1a6c>
   16010:	str	r7, [sp, #8]
   16014:	mov	r4, #2
   16018:	str	r4, [sp, #4]
   1601c:	mov	r3, #5
   16020:	str	r3, [sp]
   16024:	ldr	r3, [pc, #108]	; 16098 <_start@@Base+0x1a70>
   16028:	mov	r2, #0
   1602c:	bl	343fc <flatcc_json_printer_int8_enum_field@@Base>
   16030:	str	r7, [sp, #8]
   16034:	str	r4, [sp, #4]
   16038:	mov	r3, #6
   1603c:	str	r3, [sp]
   16040:	ldr	r3, [pc, #84]	; 1609c <_start@@Base+0x1a74>
   16044:	mov	r2, #1
   16048:	mov	r1, r6
   1604c:	mov	r0, r5
   16050:	bl	343fc <flatcc_json_printer_int8_enum_field@@Base>
   16054:	str	r4, [sp, #4]
   16058:	str	r4, [sp]
   1605c:	ldr	r3, [pc, #60]	; 160a0 <_start@@Base+0x1a78>
   16060:	mov	r2, r4
   16064:	mov	r1, r6
   16068:	mov	r0, r5
   1606c:	bl	326c0 <flatcc_json_printer_uint8_field@@Base>
   16070:	str	r4, [sp, #4]
   16074:	mov	r2, #3
   16078:	str	r2, [sp]
   1607c:	ldr	r3, [pc, #32]	; 160a4 <_start@@Base+0x1a7c>
   16080:	mov	r1, r6
   16084:	mov	r0, r5
   16088:	bl	326c0 <flatcc_json_printer_uint8_field@@Base>
   1608c:	add	sp, sp, #20
   16090:	pop	{r4, r5, r6, r7, pc}
   16094:	andeq	r6, r1, r8, lsr #1
   16098:	andeq	sp, r3, r0, lsr #4
   1609c:	strdeq	sp, [r3], -r0
   160a0:	strdeq	sp, [r3], -r8
   160a4:	strdeq	sp, [r3], -ip
   160a8:	push	{r4, r5, r6, r7, r8, lr}
   160ac:	mov	r5, r0
   160b0:	uxtb	r4, r1
   160b4:	tst	r4, #244	; 0xf4
   160b8:	movne	r3, #1
   160bc:	moveq	r3, #0
   160c0:	cmp	r4, #0
   160c4:	orreq	r3, r3, #1
   160c8:	cmp	r3, #0
   160cc:	beq	160d8 <_start@@Base+0x1ab0>
   160d0:	bl	31ffc <flatcc_json_printer_int8@@Base>
   160d4:	pop	{r4, r5, r6, r7, r8, pc}
   160d8:	sub	r3, r4, #1
   160dc:	tst	r3, r4
   160e0:	movne	r6, #1
   160e4:	moveq	r6, #0
   160e8:	mov	r1, r6
   160ec:	bl	32158 <flatcc_json_printer_delimit_enum_flags@@Base>
   160f0:	tst	r4, #1
   160f4:	moveq	r1, #0
   160f8:	bne	1611c <_start@@Base+0x1af4>
   160fc:	tst	r4, #2
   16100:	bne	16138 <_start@@Base+0x1b10>
   16104:	tst	r4, #8
   16108:	bne	16154 <_start@@Base+0x1b2c>
   1610c:	mov	r1, r6
   16110:	mov	r0, r5
   16114:	bl	32158 <flatcc_json_printer_delimit_enum_flags@@Base>
   16118:	pop	{r4, r5, r6, r7, r8, pc}
   1611c:	mov	r3, #3
   16120:	ldr	r2, [pc, #64]	; 16168 <_start@@Base+0x1b40>
   16124:	mov	r1, #0
   16128:	mov	r0, r5
   1612c:	bl	3218c <flatcc_json_printer_enum_flag@@Base>
   16130:	mov	r1, #1
   16134:	b	160fc <_start@@Base+0x1ad4>
   16138:	add	r7, r1, #1
   1613c:	mov	r3, #5
   16140:	ldr	r2, [pc, #36]	; 1616c <_start@@Base+0x1b44>
   16144:	mov	r0, r5
   16148:	bl	3218c <flatcc_json_printer_enum_flag@@Base>
   1614c:	mov	r1, r7
   16150:	b	16104 <_start@@Base+0x1adc>
   16154:	mov	r3, #4
   16158:	ldr	r2, [pc, #16]	; 16170 <_start@@Base+0x1b48>
   1615c:	mov	r0, r5
   16160:	bl	3218c <flatcc_json_printer_enum_flag@@Base>
   16164:	b	1610c <_start@@Base+0x1ae4>
   16168:	andeq	sp, r3, r0, lsl #10
   1616c:	andeq	sp, r3, r4, lsl #10
   16170:	andeq	sp, r3, ip, lsl #10
   16174:	push	{r4, r5, r6, lr}
   16178:	sub	sp, sp, #16
   1617c:	mov	r5, r0
   16180:	mov	r4, r1
   16184:	mov	r6, #1
   16188:	str	r6, [sp, #4]
   1618c:	ldr	r3, [pc, #204]	; 16260 <_start@@Base+0x1c38>
   16190:	str	r3, [sp]
   16194:	mov	r3, #0
   16198:	mov	r2, r1
   1619c:	mov	r1, r3
   161a0:	bl	35b70 <flatcc_json_printer_float_struct_field@@Base>
   161a4:	str	r6, [sp, #4]
   161a8:	ldr	r3, [pc, #180]	; 16264 <_start@@Base+0x1c3c>
   161ac:	str	r3, [sp]
   161b0:	mov	r3, #4
   161b4:	mov	r2, r4
   161b8:	mov	r1, r6
   161bc:	mov	r0, r5
   161c0:	bl	35b70 <flatcc_json_printer_float_struct_field@@Base>
   161c4:	str	r6, [sp, #4]
   161c8:	ldr	r3, [pc, #152]	; 16268 <_start@@Base+0x1c40>
   161cc:	str	r3, [sp]
   161d0:	mov	r3, #8
   161d4:	mov	r2, r4
   161d8:	mov	r1, #2
   161dc:	mov	r0, r5
   161e0:	bl	35b70 <flatcc_json_printer_float_struct_field@@Base>
   161e4:	mov	r6, #5
   161e8:	str	r6, [sp, #4]
   161ec:	ldr	r3, [pc, #120]	; 1626c <_start@@Base+0x1c44>
   161f0:	str	r3, [sp]
   161f4:	mov	r3, #16
   161f8:	mov	r2, r4
   161fc:	mov	r1, #3
   16200:	mov	r0, r5
   16204:	bl	35cf4 <flatcc_json_printer_double_struct_field@@Base>
   16208:	ldr	r3, [pc, #96]	; 16270 <_start@@Base+0x1c48>
   1620c:	str	r3, [sp, #8]
   16210:	str	r6, [sp, #4]
   16214:	ldr	r3, [pc, #88]	; 16274 <_start@@Base+0x1c4c>
   16218:	str	r3, [sp]
   1621c:	mov	r3, #24
   16220:	mov	r2, r4
   16224:	mov	r1, #4
   16228:	mov	r0, r5
   1622c:	bl	364e0 <flatcc_json_printer_int8_enum_struct_field@@Base>
   16230:	ldr	r3, [pc, #64]	; 16278 <_start@@Base+0x1c50>
   16234:	str	r3, [sp, #8]
   16238:	str	r6, [sp, #4]
   1623c:	ldr	r3, [pc, #56]	; 1627c <_start@@Base+0x1c54>
   16240:	str	r3, [sp]
   16244:	mov	r3, #26
   16248:	mov	r2, r4
   1624c:	mov	r1, r6
   16250:	mov	r0, r5
   16254:	bl	3bad4 <flatcc_json_printer_embedded_struct_field@@Base>
   16258:	add	sp, sp, #16
   1625c:	pop	{r4, r5, r6, pc}
   16260:	ldrdeq	sp, [r3], -ip
   16264:	andeq	sp, r3, r4, ror #4
   16268:	andeq	sp, r3, r4, lsl r5
   1626c:	andeq	sp, r3, r8, lsl r5
   16270:	andeq	r6, r1, r8, lsr #1
   16274:	andeq	sp, r3, r0, lsr #10
   16278:	andeq	r5, r1, r4, ror fp
   1627c:	andeq	sp, r3, r8, lsr #10
   16280:	push	{r4, r5, r6, r7, r8, r9, lr}
   16284:	sub	sp, sp, #12
   16288:	mov	r8, r0
   1628c:	mov	r4, r1
   16290:	mov	r9, r2
   16294:	mov	r5, r3
   16298:	mov	r1, r2
   1629c:	mov	r0, r4
   162a0:	bl	14750 <_start@@Base+0x128>
   162a4:	add	r3, pc, #772	; 0x304
   162a8:	ldrd	r2, [r3]
   162ac:	cmp	r1, r3
   162b0:	cmpeq	r0, r2
   162b4:	bhi	163f8 <_start@@Base+0x1dd0>
   162b8:	add	r3, pc, #760	; 0x2f8
   162bc:	ldrd	r2, [r3]
   162c0:	cmp	r1, r3
   162c4:	cmpeq	r0, r2
   162c8:	bhi	16338 <_start@@Base+0x1d10>
   162cc:	and	r0, r0, #-16777216	; 0xff000000
   162d0:	add	r3, pc, #744	; 0x2e8
   162d4:	ldrd	r2, [r3]
   162d8:	cmp	r1, r3
   162dc:	cmpeq	r0, r2
   162e0:	beq	162f0 <_start@@Base+0x1cc8>
   162e4:	mov	r0, r4
   162e8:	add	sp, sp, #12
   162ec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   162f0:	ldr	r3, [sp, #44]	; 0x2c
   162f4:	str	r3, [sp]
   162f8:	mov	r3, #5
   162fc:	mov	r2, r9
   16300:	mov	r1, r4
   16304:	mov	r0, r8
   16308:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   1630c:	cmp	r4, r0
   16310:	moveq	r4, r0
   16314:	beq	162e4 <_start@@Base+0x1cbc>
   16318:	mov	r2, #9
   1631c:	mov	r3, #0
   16320:	ldr	r1, [sp, #40]	; 0x28
   16324:	strd	r2, [r1]
   16328:	mov	r3, #0
   1632c:	str	r3, [r5]
   16330:	mov	r4, r0
   16334:	b	162e4 <_start@@Base+0x1cbc>
   16338:	and	r6, r0, #-16777216	; 0xff000000
   1633c:	add	r3, pc, #644	; 0x284
   16340:	ldrd	r2, [r3]
   16344:	cmp	r1, r3
   16348:	cmpeq	r6, r2
   1634c:	beq	163b0 <_start@@Base+0x1d88>
   16350:	bic	r0, r0, #255	; 0xff
   16354:	add	r3, pc, #628	; 0x274
   16358:	ldrd	r2, [r3]
   1635c:	cmp	r1, r3
   16360:	cmpeq	r0, r2
   16364:	bne	162e4 <_start@@Base+0x1cbc>
   16368:	ldr	r3, [sp, #44]	; 0x2c
   1636c:	str	r3, [sp]
   16370:	mov	r3, #7
   16374:	mov	r2, r9
   16378:	mov	r1, r4
   1637c:	mov	r0, r8
   16380:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16384:	cmp	r4, r0
   16388:	moveq	r4, r0
   1638c:	beq	162e4 <_start@@Base+0x1cbc>
   16390:	mov	r2, #10
   16394:	mov	r3, #0
   16398:	ldr	r1, [sp, #40]	; 0x28
   1639c:	strd	r2, [r1]
   163a0:	mov	r3, #0
   163a4:	str	r3, [r5]
   163a8:	mov	r4, r0
   163ac:	b	162e4 <_start@@Base+0x1cbc>
   163b0:	ldr	r3, [sp, #44]	; 0x2c
   163b4:	str	r3, [sp]
   163b8:	mov	r3, #5
   163bc:	mov	r2, r9
   163c0:	mov	r1, r4
   163c4:	mov	r0, r8
   163c8:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   163cc:	cmp	r4, r0
   163d0:	moveq	r4, r0
   163d4:	beq	162e4 <_start@@Base+0x1cbc>
   163d8:	mov	r2, #2
   163dc:	mov	r3, #0
   163e0:	ldr	r1, [sp, #40]	; 0x28
   163e4:	strd	r2, [r1]
   163e8:	mov	r3, #0
   163ec:	str	r3, [r5]
   163f0:	mov	r4, r0
   163f4:	b	162e4 <_start@@Base+0x1cbc>
   163f8:	add	r3, pc, #472	; 0x1d8
   163fc:	ldrd	r2, [r3]
   16400:	cmp	r1, r3
   16404:	cmpeq	r0, r2
   16408:	bhi	1646c <_start@@Base+0x1e44>
   1640c:	mov	r0, #0
   16410:	add	r3, pc, #456	; 0x1c8
   16414:	ldrd	r2, [r3]
   16418:	cmp	r1, r3
   1641c:	cmpeq	r0, r2
   16420:	bne	162e4 <_start@@Base+0x1cbc>
   16424:	ldr	r3, [sp, #44]	; 0x2c
   16428:	str	r3, [sp]
   1642c:	mov	r3, #4
   16430:	mov	r2, r9
   16434:	mov	r1, r4
   16438:	mov	r0, r8
   1643c:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16440:	cmp	r4, r0
   16444:	moveq	r4, r0
   16448:	beq	162e4 <_start@@Base+0x1cbc>
   1644c:	mov	r2, #0
   16450:	mov	r3, #0
   16454:	ldr	r1, [sp, #40]	; 0x28
   16458:	strd	r2, [r1]
   1645c:	mov	r3, #0
   16460:	str	r3, [r5]
   16464:	mov	r4, r0
   16468:	b	162e4 <_start@@Base+0x1cbc>
   1646c:	add	r3, pc, #372	; 0x174
   16470:	ldrd	r2, [r3]
   16474:	cmp	r1, r3
   16478:	cmpeq	r0, r2
   1647c:	bhi	164e0 <_start@@Base+0x1eb8>
   16480:	and	r0, r0, #-16777216	; 0xff000000
   16484:	add	r3, pc, #356	; 0x164
   16488:	ldrd	r2, [r3]
   1648c:	cmp	r1, r3
   16490:	cmpeq	r0, r2
   16494:	bne	162e4 <_start@@Base+0x1cbc>
   16498:	ldr	r3, [sp, #44]	; 0x2c
   1649c:	str	r3, [sp]
   164a0:	mov	r3, #5
   164a4:	mov	r2, r9
   164a8:	mov	r1, r4
   164ac:	mov	r0, r8
   164b0:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   164b4:	cmp	r4, r0
   164b8:	moveq	r4, r0
   164bc:	beq	162e4 <_start@@Base+0x1cbc>
   164c0:	mov	r2, #11
   164c4:	mov	r3, #0
   164c8:	ldr	r1, [sp, #40]	; 0x28
   164cc:	strd	r2, [r1]
   164d0:	mov	r3, #0
   164d4:	str	r3, [r5]
   164d8:	mov	r4, r0
   164dc:	b	162e4 <_start@@Base+0x1cbc>
   164e0:	ldr	r2, [pc, #288]	; 16608 <_start@@Base+0x1fe0>
   164e4:	mvn	r3, #0
   164e8:	and	r2, r2, r0
   164ec:	and	r3, r3, r1
   164f0:	add	r7, pc, #256	; 0x100
   164f4:	ldrd	r6, [r7]
   164f8:	cmp	r3, r7
   164fc:	cmpeq	r2, r6
   16500:	beq	1655c <_start@@Base+0x1f34>
   16504:	add	r3, pc, #244	; 0xf4
   16508:	ldrd	r2, [r3]
   1650c:	cmp	r1, r3
   16510:	cmpeq	r0, r2
   16514:	bne	162e4 <_start@@Base+0x1cbc>
   16518:	ldr	r3, [sp, #44]	; 0x2c
   1651c:	str	r3, [sp]
   16520:	mov	r3, #8
   16524:	mov	r2, r9
   16528:	mov	r1, r4
   1652c:	mov	r0, r8
   16530:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16534:	cmp	r4, r0
   16538:	beq	165a4 <_start@@Base+0x1f7c>
   1653c:	mov	r2, #8
   16540:	mov	r3, #0
   16544:	ldr	r1, [sp, #40]	; 0x28
   16548:	strd	r2, [r1]
   1654c:	mov	r3, #0
   16550:	str	r3, [r5]
   16554:	mov	r4, r0
   16558:	b	162e4 <_start@@Base+0x1cbc>
   1655c:	ldr	r3, [sp, #44]	; 0x2c
   16560:	str	r3, [sp]
   16564:	mov	r3, #6
   16568:	mov	r2, r9
   1656c:	mov	r1, r4
   16570:	mov	r0, r8
   16574:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16578:	cmp	r4, r0
   1657c:	moveq	r4, r0
   16580:	beq	162e4 <_start@@Base+0x1cbc>
   16584:	mov	r2, #255	; 0xff
   16588:	mov	r3, #0
   1658c:	ldr	r1, [sp, #40]	; 0x28
   16590:	strd	r2, [r1]
   16594:	mov	r3, #0
   16598:	str	r3, [r5]
   1659c:	mov	r4, r0
   165a0:	b	162e4 <_start@@Base+0x1cbc>
   165a4:	mov	r4, r0
   165a8:	b	162e4 <_start@@Base+0x1cbc>
   165ac:	nop			; (mov r0, r0)
   165b0:			; <UNDEFINED> instruction: 0xffffffff
   165b4:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   165b8:			; <UNDEFINED> instruction: 0x46616dff
   165bc:	rsbmi	r6, pc, #428	; 0x1ac
   165c0:	strvs	r0, [r0, #-0]
   165c4:	rsbmi	r6, r5, #108, 24	; 0x6c00
   165c8:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   165cc:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   165d0:	strbtmi	r6, [r1], -r0, lsl #28
   165d4:	rsbmi	r6, pc, #428	; 0x1ac
   165d8:	ldrshvc	pc, [pc, #255]	; 166df <_start@@Base+0x20b7>	; <UNPREDICTABLE>
   165dc:	svcmi	0x00746865
   165e0:	andeq	r0, r0, r0
   165e4:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   165e8:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   165ec:	rsbpl	r7, r1, #117	; 0x75
   165f0:	andvc	r0, r0, #0
   165f4:	svcmi	0x00746865
   165f8:	strbvs	r0, [r4, #-0]!
   165fc:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   16600:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   16604:	rsbpl	r7, r1, #117	; 0x75
   16608:			; <UNDEFINED> instruction: 0xffff0000
   1660c:	push	{r4, r5, r6, r7, r8, lr}
   16610:	sub	sp, sp, #8
   16614:	mov	r6, r0
   16618:	mov	r4, r1
   1661c:	mov	r5, r2
   16620:	mov	r7, r3
   16624:	mov	r1, r2
   16628:	mov	r0, r4
   1662c:	bl	14750 <_start@@Base+0x128>
   16630:	add	r3, pc, #136	; 0x88
   16634:	ldrd	r2, [r3]
   16638:	cmp	r1, r3
   1663c:	cmpeq	r0, r2
   16640:	beq	16650 <_start@@Base+0x2028>
   16644:	mov	r0, r4
   16648:	add	sp, sp, #8
   1664c:	pop	{r4, r5, r6, r7, r8, pc}
   16650:	add	r8, r4, #8
   16654:	mov	r1, r5
   16658:	mov	r0, r8
   1665c:	bl	14750 <_start@@Base+0x128>
   16660:	mov	r0, #0
   16664:	and	r1, r1, #-16777216	; 0xff000000
   16668:	cmp	r1, #1912602624	; 0x72000000
   1666c:	cmpeq	r0, #0
   16670:	bne	16644 <_start@@Base+0x201c>
   16674:	sub	r3, r5, r8
   16678:	cmp	r3, #1
   1667c:	ble	16644 <_start@@Base+0x201c>
   16680:	ldrb	r3, [r4, #9]
   16684:	cmp	r3, #46	; 0x2e
   16688:	bne	16644 <_start@@Base+0x201c>
   1668c:	add	r1, r4, #10
   16690:	cmp	r8, r1
   16694:	beq	16644 <_start@@Base+0x201c>
   16698:	ldr	r3, [sp, #36]	; 0x24
   1669c:	str	r3, [sp, #4]
   166a0:	ldr	r3, [sp, #32]
   166a4:	str	r3, [sp]
   166a8:	mov	r3, r7
   166ac:	mov	r2, r5
   166b0:	mov	r0, r6
   166b4:	bl	16280 <_start@@Base+0x1c58>
   166b8:	mov	r4, r0
   166bc:	b	16644 <_start@@Base+0x201c>
   166c0:	cmnvs	r3, r5, ror #8
   166c4:	cmnmi	r8, #-2147483620	; 0x8000001c
   166c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   166cc:	sub	sp, sp, #8
   166d0:	mov	r8, r0
   166d4:	mov	r6, r1
   166d8:	mov	r7, r2
   166dc:	mov	r9, r3
   166e0:	mov	r1, r2
   166e4:	mov	r0, r6
   166e8:	bl	14750 <_start@@Base+0x128>
   166ec:	mov	r5, r1
   166f0:	add	r3, pc, #584	; 0x248
   166f4:	ldrd	r2, [r3]
   166f8:	cmp	r1, r3
   166fc:	cmpeq	r0, r2
   16700:	bhi	16774 <_start@@Base+0x214c>
   16704:	mov	r4, #0
   16708:	bic	r5, r1, #255	; 0xff
   1670c:	add	r3, pc, #564	; 0x234
   16710:	ldrd	r2, [r3]
   16714:	cmp	r5, r3
   16718:	cmpeq	r4, r2
   1671c:	beq	1672c <_start@@Base+0x2104>
   16720:	mov	r0, r6
   16724:	add	sp, sp, #8
   16728:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1672c:	ldr	r3, [sp, #44]	; 0x2c
   16730:	str	r3, [sp]
   16734:	mov	r3, #3
   16738:	mov	r2, r7
   1673c:	mov	r1, r6
   16740:	mov	r0, r8
   16744:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16748:	cmp	r6, r0
   1674c:	moveq	r6, r0
   16750:	beq	16720 <_start@@Base+0x20f8>
   16754:	mov	r2, #4
   16758:	mov	r3, #0
   1675c:	ldr	r1, [sp, #40]	; 0x28
   16760:	strd	r2, [r1]
   16764:	mov	r3, #0
   16768:	str	r3, [r9]
   1676c:	mov	r6, r0
   16770:	b	16720 <_start@@Base+0x20f8>
   16774:	mov	r4, r0
   16778:	add	r3, pc, #464	; 0x1d0
   1677c:	ldrd	r2, [r3]
   16780:	cmp	r1, r3
   16784:	cmpeq	r0, r2
   16788:	beq	16860 <_start@@Base+0x2238>
   1678c:	bic	r0, r0, #255	; 0xff
   16790:	add	r3, pc, #448	; 0x1c0
   16794:	ldrd	r2, [r3]
   16798:	cmp	r1, r3
   1679c:	cmpeq	r0, r2
   167a0:	movne	sl, r6
   167a4:	beq	168a8 <_start@@Base+0x2280>
   167a8:	mov	r0, #0
   167ac:	add	r3, pc, #428	; 0x1ac
   167b0:	ldrd	r2, [r3]
   167b4:	cmp	r5, r3
   167b8:	cmpeq	r0, r2
   167bc:	beq	168f0 <_start@@Base+0x22c8>
   167c0:	add	r3, pc, #416	; 0x1a0
   167c4:	ldrd	r2, [r3]
   167c8:	cmp	r5, r3
   167cc:	cmpeq	r4, r2
   167d0:	bne	16720 <_start@@Base+0x20f8>
   167d4:	mov	r1, r7
   167d8:	add	r0, sl, #8
   167dc:	bl	14750 <_start@@Base+0x128>
   167e0:	add	r3, pc, #392	; 0x188
   167e4:	ldrd	r2, [r3]
   167e8:	cmp	r1, r3
   167ec:	cmpeq	r0, r2
   167f0:	bne	16720 <_start@@Base+0x20f8>
   167f4:	add	sl, sl, #16
   167f8:	mov	r1, r7
   167fc:	mov	r0, sl
   16800:	bl	14750 <_start@@Base+0x128>
   16804:	bic	r0, r0, #255	; 0xff
   16808:	add	r3, pc, #360	; 0x168
   1680c:	ldrd	r2, [r3]
   16810:	cmp	r1, r3
   16814:	cmpeq	r0, r2
   16818:	bne	16720 <_start@@Base+0x20f8>
   1681c:	ldr	r3, [sp, #44]	; 0x2c
   16820:	str	r3, [sp]
   16824:	mov	r3, #7
   16828:	mov	r2, r7
   1682c:	mov	r1, sl
   16830:	mov	r0, r8
   16834:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16838:	cmp	sl, r0
   1683c:	beq	16720 <_start@@Base+0x20f8>
   16840:	mov	r2, #2
   16844:	mov	r3, #0
   16848:	ldr	r1, [sp, #40]	; 0x28
   1684c:	strd	r2, [r1]
   16850:	mov	r3, #0
   16854:	str	r3, [r9]
   16858:	mov	r6, r0
   1685c:	b	16720 <_start@@Base+0x20f8>
   16860:	ldr	r3, [sp, #44]	; 0x2c
   16864:	str	r3, [sp]
   16868:	mov	r3, #8
   1686c:	mov	r2, r7
   16870:	mov	r1, r6
   16874:	mov	r0, r8
   16878:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   1687c:	cmp	r6, r0
   16880:	moveq	r6, r0
   16884:	beq	16720 <_start@@Base+0x20f8>
   16888:	mov	r2, #3
   1688c:	mov	r3, #0
   16890:	ldr	r1, [sp, #40]	; 0x28
   16894:	strd	r2, [r1]
   16898:	mov	r3, #0
   1689c:	str	r3, [r9]
   168a0:	mov	r6, r0
   168a4:	b	16720 <_start@@Base+0x20f8>
   168a8:	ldr	r3, [sp, #44]	; 0x2c
   168ac:	str	r3, [sp]
   168b0:	mov	r3, #7
   168b4:	mov	r2, r7
   168b8:	mov	r1, r6
   168bc:	mov	r0, r8
   168c0:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   168c4:	mov	sl, r0
   168c8:	cmp	r6, r0
   168cc:	beq	167a8 <_start@@Base+0x2180>
   168d0:	mov	r2, #1
   168d4:	mov	r3, #0
   168d8:	ldr	r1, [sp, #40]	; 0x28
   168dc:	strd	r2, [r1]
   168e0:	mov	r3, #0
   168e4:	str	r3, [r9]
   168e8:	mov	r6, r0
   168ec:	b	16720 <_start@@Base+0x20f8>
   168f0:	ldr	r3, [sp, #44]	; 0x2c
   168f4:	str	r3, [sp]
   168f8:	mov	r3, #4
   168fc:	mov	r2, r7
   16900:	mov	r1, sl
   16904:	mov	r0, r8
   16908:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   1690c:	cmp	sl, r0
   16910:	beq	16934 <_start@@Base+0x230c>
   16914:	mov	r2, #0
   16918:	mov	r3, #0
   1691c:	ldr	r1, [sp, #40]	; 0x28
   16920:	strd	r2, [r1]
   16924:	mov	r3, #0
   16928:	str	r3, [r9]
   1692c:	mov	r6, r0
   16930:	b	16720 <_start@@Base+0x20f8>
   16934:	mov	sl, r0
   16938:	b	167c0 <_start@@Base+0x2198>
   1693c:	nop			; (mov r0, r0)
   16940:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   16944:	stclmi	14, cr6, [pc, #-460]!	; 16780 <_start@@Base+0x2158>
   16948:	andeq	r0, r0, r0
   1694c:	cmnmi	ip, r0, lsl #8
   16950:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   16954:	stclmi	14, cr6, [pc, #-460]!	; 16790 <_start@@Base+0x2168>
   16958:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   1695c:	stclmi	14, cr6, [pc, #-460]!	; 16798 <_start@@Base+0x2170>
   16960:	andeq	r0, r0, r0
   16964:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16968:	cmnpl	r9, #112, 26	; 0x1c00
   1696c:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   16970:	rsbvs	r6, ip, #364904448	; 0x15c00000
   16974:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   16978:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1697c:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   16980:	push	{r4, r5, r6, r7, r8, lr}
   16984:	sub	sp, sp, #8
   16988:	mov	r6, r0
   1698c:	mov	r4, r1
   16990:	mov	r5, r2
   16994:	mov	r7, r3
   16998:	mov	r1, r2
   1699c:	mov	r0, r4
   169a0:	bl	14750 <_start@@Base+0x128>
   169a4:	add	r3, pc, #260	; 0x104
   169a8:	ldrd	r2, [r3]
   169ac:	cmp	r1, r3
   169b0:	cmpeq	r0, r2
   169b4:	beq	169dc <_start@@Base+0x23b4>
   169b8:	mov	r0, #0
   169bc:	add	r3, pc, #244	; 0xf4
   169c0:	ldrd	r2, [r3]
   169c4:	cmp	r1, r3
   169c8:	cmpeq	r0, r2
   169cc:	beq	16a64 <_start@@Base+0x243c>
   169d0:	mov	r0, r4
   169d4:	add	sp, sp, #8
   169d8:	pop	{r4, r5, r6, r7, r8, pc}
   169dc:	mov	r1, r5
   169e0:	add	r0, r4, #8
   169e4:	bl	14750 <_start@@Base+0x128>
   169e8:	add	r3, pc, #208	; 0xd0
   169ec:	ldrd	r2, [r3]
   169f0:	cmp	r1, r3
   169f4:	cmpeq	r0, r2
   169f8:	bne	169d0 <_start@@Base+0x23a8>
   169fc:	add	r8, r4, #16
   16a00:	mov	r1, r5
   16a04:	mov	r0, r8
   16a08:	bl	14750 <_start@@Base+0x128>
   16a0c:	mov	r0, #0
   16a10:	and	r1, r1, #-16777216	; 0xff000000
   16a14:	cmp	r1, #1694498816	; 0x65000000
   16a18:	cmpeq	r0, #0
   16a1c:	bne	169d0 <_start@@Base+0x23a8>
   16a20:	ldr	r3, [sp, #36]	; 0x24
   16a24:	str	r3, [sp]
   16a28:	mov	r3, #1
   16a2c:	mov	r2, r5
   16a30:	mov	r1, r8
   16a34:	mov	r0, r6
   16a38:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16a3c:	cmp	r8, r0
   16a40:	beq	169d0 <_start@@Base+0x23a8>
   16a44:	mov	r2, #1
   16a48:	mov	r3, #0
   16a4c:	ldr	r1, [sp, #32]
   16a50:	strd	r2, [r1]
   16a54:	mov	r3, #0
   16a58:	str	r3, [r7]
   16a5c:	mov	r4, r0
   16a60:	b	169d0 <_start@@Base+0x23a8>
   16a64:	ldr	r3, [sp, #36]	; 0x24
   16a68:	str	r3, [sp]
   16a6c:	mov	r3, #4
   16a70:	mov	r2, r5
   16a74:	mov	r1, r4
   16a78:	mov	r0, r6
   16a7c:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16a80:	cmp	r4, r0
   16a84:	beq	16aa8 <_start@@Base+0x2480>
   16a88:	mov	r2, #0
   16a8c:	mov	r3, #0
   16a90:	ldr	r1, [sp, #32]
   16a94:	strd	r2, [r1]
   16a98:	mov	r3, #0
   16a9c:	str	r3, [r7]
   16aa0:	mov	r4, r0
   16aa4:	b	169d0 <_start@@Base+0x23a8>
   16aa8:	mov	r4, r0
   16aac:	b	169d0 <_start@@Base+0x23a8>
   16ab0:	rsbvc	r6, r5, #116, 28	; 0x740
   16ab4:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   16ab8:	andeq	r0, r0, r0
   16abc:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16ac0:	cmnvc	r0, #-1073741800	; 0xc0000018
   16ac4:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   16ac8:	push	{r4, r5, r6, r7, r8, r9, lr}
   16acc:	sub	sp, sp, #12
   16ad0:	mov	r8, r0
   16ad4:	mov	r4, r1
   16ad8:	mov	r9, r2
   16adc:	mov	r5, r3
   16ae0:	mov	r1, r2
   16ae4:	mov	r0, r4
   16ae8:	bl	14750 <_start@@Base+0x128>
   16aec:	add	r3, pc, #332	; 0x14c
   16af0:	ldrd	r2, [r3]
   16af4:	cmp	r1, r3
   16af8:	cmpeq	r0, r2
   16afc:	bhi	16b6c <_start@@Base+0x2544>
   16b00:	mov	r0, #0
   16b04:	add	r3, pc, #316	; 0x13c
   16b08:	ldrd	r2, [r3]
   16b0c:	cmp	r1, r3
   16b10:	cmpeq	r0, r2
   16b14:	beq	16b24 <_start@@Base+0x24fc>
   16b18:	mov	r0, r4
   16b1c:	add	sp, sp, #12
   16b20:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16b24:	ldr	r3, [sp, #44]	; 0x2c
   16b28:	str	r3, [sp]
   16b2c:	mov	r3, #4
   16b30:	mov	r2, r9
   16b34:	mov	r1, r4
   16b38:	mov	r0, r8
   16b3c:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16b40:	cmp	r4, r0
   16b44:	moveq	r4, r0
   16b48:	beq	16b18 <_start@@Base+0x24f0>
   16b4c:	mov	r2, #3
   16b50:	mov	r3, #0
   16b54:	ldr	r1, [sp, #40]	; 0x28
   16b58:	strd	r2, [r1]
   16b5c:	mov	r3, #0
   16b60:	str	r3, [r5]
   16b64:	mov	r4, r0
   16b68:	b	16b18 <_start@@Base+0x24f0>
   16b6c:	ldr	r2, [pc, #244]	; 16c68 <_start@@Base+0x2640>
   16b70:	mvn	r3, #0
   16b74:	and	r2, r2, r0
   16b78:	and	r3, r3, r1
   16b7c:	add	r7, pc, #204	; 0xcc
   16b80:	ldrd	r6, [r7]
   16b84:	cmp	r3, r7
   16b88:	cmpeq	r2, r6
   16b8c:	beq	16bec <_start@@Base+0x25c4>
   16b90:	mov	r0, #0
   16b94:	add	r3, pc, #188	; 0xbc
   16b98:	ldrd	r2, [r3]
   16b9c:	cmp	r1, r3
   16ba0:	cmpeq	r0, r2
   16ba4:	bne	16b18 <_start@@Base+0x24f0>
   16ba8:	ldr	r3, [sp, #44]	; 0x2c
   16bac:	str	r3, [sp]
   16bb0:	mov	r3, #4
   16bb4:	mov	r2, r9
   16bb8:	mov	r1, r4
   16bbc:	mov	r0, r8
   16bc0:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16bc4:	cmp	r4, r0
   16bc8:	beq	16c34 <_start@@Base+0x260c>
   16bcc:	add	r3, pc, #140	; 0x8c
   16bd0:	ldrd	r2, [r3]
   16bd4:	ldr	r1, [sp, #40]	; 0x28
   16bd8:	strd	r2, [r1]
   16bdc:	mov	r3, #0
   16be0:	str	r3, [r5]
   16be4:	mov	r4, r0
   16be8:	b	16b18 <_start@@Base+0x24f0>
   16bec:	ldr	r3, [sp, #44]	; 0x2c
   16bf0:	str	r3, [sp]
   16bf4:	mov	r3, #6
   16bf8:	mov	r2, r9
   16bfc:	mov	r1, r4
   16c00:	mov	r0, r8
   16c04:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16c08:	cmp	r4, r0
   16c0c:	moveq	r4, r0
   16c10:	beq	16b18 <_start@@Base+0x24f0>
   16c14:	mvn	r2, #1
   16c18:	mvn	r3, #0
   16c1c:	ldr	r1, [sp, #40]	; 0x28
   16c20:	strd	r2, [r1]
   16c24:	mov	r3, #1
   16c28:	str	r3, [r5]
   16c2c:	mov	r4, r0
   16c30:	b	16b18 <_start@@Base+0x24f0>
   16c34:	mov	r4, r0
   16c38:	b	16b18 <_start@@Base+0x24f0>
   16c3c:	nop			; (mov r0, r0)
   16c40:			; <UNDEFINED> instruction: 0xffffffff
   16c44:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16c48:	andeq	r0, r0, r0
   16c4c:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16c50:	strbvs	r0, [r7, #-0]!
   16c54:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   16c58:	andeq	r0, r0, r0
   16c5c:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   16c60:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   16c64:	andeq	r0, r0, r0
   16c68:			; <UNDEFINED> instruction: 0xffff0000
   16c6c:	push	{r4, r5, r6, r7, r8, r9, lr}
   16c70:	sub	sp, sp, #12
   16c74:	mov	r8, r0
   16c78:	mov	r4, r1
   16c7c:	mov	r9, r2
   16c80:	mov	r5, r3
   16c84:	mov	r1, r2
   16c88:	mov	r0, r4
   16c8c:	bl	14750 <_start@@Base+0x128>
   16c90:	add	r3, pc, #448	; 0x1c0
   16c94:	ldrd	r2, [r3]
   16c98:	cmp	r1, r3
   16c9c:	cmpeq	r0, r2
   16ca0:	bhi	16d10 <_start@@Base+0x26e8>
   16ca4:	mov	r0, #0
   16ca8:	add	r3, pc, #432	; 0x1b0
   16cac:	ldrd	r2, [r3]
   16cb0:	cmp	r1, r3
   16cb4:	cmpeq	r0, r2
   16cb8:	beq	16cc8 <_start@@Base+0x26a0>
   16cbc:	mov	r0, r4
   16cc0:	add	sp, sp, #12
   16cc4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16cc8:	ldr	r3, [sp, #44]	; 0x2c
   16ccc:	str	r3, [sp]
   16cd0:	mov	r3, #4
   16cd4:	mov	r2, r9
   16cd8:	mov	r1, r4
   16cdc:	mov	r0, r8
   16ce0:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16ce4:	cmp	r4, r0
   16ce8:	moveq	r4, r0
   16cec:	beq	16cbc <_start@@Base+0x2694>
   16cf0:	mov	r2, #2
   16cf4:	mov	r3, #0
   16cf8:	ldr	r1, [sp, #40]	; 0x28
   16cfc:	strd	r2, [r1]
   16d00:	mov	r3, #0
   16d04:	str	r3, [r5]
   16d08:	mov	r4, r0
   16d0c:	b	16cbc <_start@@Base+0x2694>
   16d10:	add	r3, pc, #336	; 0x150
   16d14:	ldrd	r2, [r3]
   16d18:	cmp	r1, r3
   16d1c:	cmpeq	r0, r2
   16d20:	bhi	16d84 <_start@@Base+0x275c>
   16d24:	mov	r0, #0
   16d28:	add	r3, pc, #320	; 0x140
   16d2c:	ldrd	r2, [r3]
   16d30:	cmp	r1, r3
   16d34:	cmpeq	r0, r2
   16d38:	bne	16cbc <_start@@Base+0x2694>
   16d3c:	ldr	r3, [sp, #44]	; 0x2c
   16d40:	str	r3, [sp]
   16d44:	mov	r3, #4
   16d48:	mov	r2, r9
   16d4c:	mov	r1, r4
   16d50:	mov	r0, r8
   16d54:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16d58:	cmp	r4, r0
   16d5c:	moveq	r4, r0
   16d60:	beq	16cbc <_start@@Base+0x2694>
   16d64:	mov	r2, #42	; 0x2a
   16d68:	mov	r3, #0
   16d6c:	ldr	r1, [sp, #40]	; 0x28
   16d70:	strd	r2, [r1]
   16d74:	mov	r3, #0
   16d78:	str	r3, [r5]
   16d7c:	mov	r4, r0
   16d80:	b	16cbc <_start@@Base+0x2694>
   16d84:	bic	r6, r0, #255	; 0xff
   16d88:	add	r3, pc, #232	; 0xe8
   16d8c:	ldrd	r2, [r3]
   16d90:	cmp	r1, r3
   16d94:	cmpeq	r6, r2
   16d98:	beq	16e04 <_start@@Base+0x27dc>
   16d9c:	ldr	r2, [pc, #228]	; 16e88 <_start@@Base+0x2860>
   16da0:	mvn	r3, #0
   16da4:	and	r0, r0, r2
   16da8:	and	r1, r1, r3
   16dac:	add	r3, pc, #204	; 0xcc
   16db0:	ldrd	r2, [r3]
   16db4:	cmp	r1, r3
   16db8:	cmpeq	r0, r2
   16dbc:	bne	16cbc <_start@@Base+0x2694>
   16dc0:	ldr	r3, [sp, #44]	; 0x2c
   16dc4:	str	r3, [sp]
   16dc8:	mov	r3, #6
   16dcc:	mov	r2, r9
   16dd0:	mov	r1, r4
   16dd4:	mov	r0, r8
   16dd8:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16ddc:	cmp	r4, r0
   16de0:	beq	16e4c <_start@@Base+0x2824>
   16de4:	mvn	r2, #1
   16de8:	mvn	r3, #0
   16dec:	ldr	r1, [sp, #40]	; 0x28
   16df0:	strd	r2, [r1]
   16df4:	mov	r3, #1
   16df8:	str	r3, [r5]
   16dfc:	mov	r4, r0
   16e00:	b	16cbc <_start@@Base+0x2694>
   16e04:	ldr	r3, [sp, #44]	; 0x2c
   16e08:	str	r3, [sp]
   16e0c:	mov	r3, #7
   16e10:	mov	r2, r9
   16e14:	mov	r1, r4
   16e18:	mov	r0, r8
   16e1c:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16e20:	cmp	r4, r0
   16e24:	moveq	r4, r0
   16e28:	beq	16cbc <_start@@Base+0x2694>
   16e2c:	mvn	r2, #0
   16e30:	mvn	r3, #0
   16e34:	ldr	r1, [sp, #40]	; 0x28
   16e38:	strd	r2, [r1]
   16e3c:	mov	r3, #1
   16e40:	str	r3, [r5]
   16e44:	mov	r4, r0
   16e48:	b	16cbc <_start@@Base+0x2694>
   16e4c:	mov	r4, r0
   16e50:	b	16cbc <_start@@Base+0x2694>
   16e54:	nop			; (mov r0, r0)
   16e58:			; <UNDEFINED> instruction: 0xffffffff
   16e5c:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16e60:	andeq	r0, r0, r0
   16e64:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16e68:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   16e6c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16e70:	andeq	r0, r0, r0
   16e74:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   16e78:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   16e7c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16e80:	strbvs	r0, [r7, #-0]!
   16e84:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   16e88:			; <UNDEFINED> instruction: 0xffff0000
   16e8c:	push	{r4, r5, r6, r7, lr}
   16e90:	sub	sp, sp, #12
   16e94:	mov	r6, r0
   16e98:	mov	r4, r1
   16e9c:	mov	r5, r2
   16ea0:	mov	r7, r3
   16ea4:	mov	r1, r2
   16ea8:	mov	r0, r4
   16eac:	bl	14750 <_start@@Base+0x128>
   16eb0:	add	r3, pc, #312	; 0x138
   16eb4:	ldrd	r2, [r3]
   16eb8:	cmp	r1, r3
   16ebc:	cmpeq	r0, r2
   16ec0:	bhi	16f30 <_start@@Base+0x2908>
   16ec4:	mov	r0, #0
   16ec8:	add	r3, pc, #296	; 0x128
   16ecc:	ldrd	r2, [r3]
   16ed0:	cmp	r1, r3
   16ed4:	cmpeq	r0, r2
   16ed8:	beq	16ee8 <_start@@Base+0x28c0>
   16edc:	mov	r0, r4
   16ee0:	add	sp, sp, #12
   16ee4:	pop	{r4, r5, r6, r7, pc}
   16ee8:	ldr	r3, [sp, #36]	; 0x24
   16eec:	str	r3, [sp]
   16ef0:	mov	r3, #4
   16ef4:	mov	r2, r5
   16ef8:	mov	r1, r4
   16efc:	mov	r0, r6
   16f00:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16f04:	cmp	r4, r0
   16f08:	moveq	r4, r0
   16f0c:	beq	16edc <_start@@Base+0x28b4>
   16f10:	mvn	r2, #11
   16f14:	mvn	r3, #0
   16f18:	ldr	r1, [sp, #32]
   16f1c:	strd	r2, [r1]
   16f20:	mov	r3, #1
   16f24:	str	r3, [r7]
   16f28:	mov	r4, r0
   16f2c:	b	16edc <_start@@Base+0x28b4>
   16f30:	mov	r0, #0
   16f34:	add	r3, pc, #196	; 0xc4
   16f38:	ldrd	r2, [r3]
   16f3c:	cmp	r1, r3
   16f40:	cmpeq	r0, r2
   16f44:	beq	16fa0 <_start@@Base+0x2978>
   16f48:	add	r3, pc, #184	; 0xb8
   16f4c:	ldrd	r2, [r3]
   16f50:	cmp	r1, r3
   16f54:	cmpeq	r0, r2
   16f58:	bne	16edc <_start@@Base+0x28b4>
   16f5c:	ldr	r3, [sp, #36]	; 0x24
   16f60:	str	r3, [sp]
   16f64:	mov	r3, #4
   16f68:	mov	r2, r5
   16f6c:	mov	r1, r4
   16f70:	mov	r0, r6
   16f74:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16f78:	cmp	r4, r0
   16f7c:	beq	16fe8 <_start@@Base+0x29c0>
   16f80:	mvn	r2, #10
   16f84:	mvn	r3, #0
   16f88:	ldr	r1, [sp, #32]
   16f8c:	strd	r2, [r1]
   16f90:	mov	r3, #1
   16f94:	str	r3, [r7]
   16f98:	mov	r4, r0
   16f9c:	b	16edc <_start@@Base+0x28b4>
   16fa0:	ldr	r3, [sp, #36]	; 0x24
   16fa4:	str	r3, [sp]
   16fa8:	mov	r3, #4
   16fac:	mov	r2, r5
   16fb0:	mov	r1, r4
   16fb4:	mov	r0, r6
   16fb8:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   16fbc:	cmp	r4, r0
   16fc0:	moveq	r4, r0
   16fc4:	beq	16edc <_start@@Base+0x28b4>
   16fc8:	mvn	r2, #9
   16fcc:	mvn	r3, #0
   16fd0:	ldr	r1, [sp, #32]
   16fd4:	strd	r2, [r1]
   16fd8:	mov	r3, #1
   16fdc:	str	r3, [r7]
   16fe0:	mov	r4, r0
   16fe4:	b	16edc <_start@@Base+0x28b4>
   16fe8:	mov	r4, r0
   16fec:	b	16edc <_start@@Base+0x28b4>
   16ff0:			; <UNDEFINED> instruction: 0xffffffff
   16ff4:	mcrvs	7, 3, r6, cr5, cr1, {1}
   16ff8:	andeq	r0, r0, r0
   16ffc:	mcrvs	7, 3, r6, cr5, cr1, {1}
   17000:	andeq	r0, r0, r0
   17004:	mcrvs	7, 3, r6, cr5, cr3, {1}
   17008:	andeq	r0, r0, r0
   1700c:	mcrvs	7, 3, r6, cr5, cr2, {1}
   17010:	push	{r4, r5, r6, r7, r8, r9, lr}
   17014:	sub	sp, sp, #12
   17018:	mov	r8, r0
   1701c:	mov	r4, r1
   17020:	mov	r9, r2
   17024:	mov	r5, r3
   17028:	mov	r1, r2
   1702c:	mov	r0, r4
   17030:	bl	14750 <_start@@Base+0x128>
   17034:	add	r3, pc, #324	; 0x144
   17038:	ldrd	r2, [r3]
   1703c:	cmp	r1, r3
   17040:	cmpeq	r0, r2
   17044:	bhi	170b4 <_start@@Base+0x2a8c>
   17048:	mov	r0, #0
   1704c:	add	r3, pc, #308	; 0x134
   17050:	ldrd	r2, [r3]
   17054:	cmp	r1, r3
   17058:	cmpeq	r0, r2
   1705c:	beq	1706c <_start@@Base+0x2a44>
   17060:	mov	r0, r4
   17064:	add	sp, sp, #12
   17068:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1706c:	ldr	r3, [sp, #44]	; 0x2c
   17070:	str	r3, [sp]
   17074:	mov	r3, #4
   17078:	mov	r2, r9
   1707c:	mov	r1, r4
   17080:	mov	r0, r8
   17084:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   17088:	cmp	r4, r0
   1708c:	moveq	r4, r0
   17090:	beq	17060 <_start@@Base+0x2a38>
   17094:	mov	r2, #8
   17098:	mov	r3, #0
   1709c:	ldr	r1, [sp, #40]	; 0x28
   170a0:	strd	r2, [r1]
   170a4:	mov	r3, #0
   170a8:	str	r3, [r5]
   170ac:	mov	r4, r0
   170b0:	b	17060 <_start@@Base+0x2a38>
   170b4:	mov	r6, #0
   170b8:	bic	r7, r1, #255	; 0xff
   170bc:	add	r3, pc, #204	; 0xcc
   170c0:	ldrd	r2, [r3]
   170c4:	cmp	r7, r3
   170c8:	cmpeq	r6, r2
   170cc:	beq	1712c <_start@@Base+0x2b04>
   170d0:	and	r0, r0, #-16777216	; 0xff000000
   170d4:	add	r3, pc, #188	; 0xbc
   170d8:	ldrd	r2, [r3]
   170dc:	cmp	r1, r3
   170e0:	cmpeq	r0, r2
   170e4:	bne	17060 <_start@@Base+0x2a38>
   170e8:	ldr	r3, [sp, #44]	; 0x2c
   170ec:	str	r3, [sp]
   170f0:	mov	r3, #5
   170f4:	mov	r2, r9
   170f8:	mov	r1, r4
   170fc:	mov	r0, r8
   17100:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   17104:	cmp	r4, r0
   17108:	beq	17174 <_start@@Base+0x2b4c>
   1710c:	mov	r2, #2
   17110:	mov	r3, #0
   17114:	ldr	r1, [sp, #40]	; 0x28
   17118:	strd	r2, [r1]
   1711c:	mov	r3, #0
   17120:	str	r3, [r5]
   17124:	mov	r4, r0
   17128:	b	17060 <_start@@Base+0x2a38>
   1712c:	ldr	r3, [sp, #44]	; 0x2c
   17130:	str	r3, [sp]
   17134:	mov	r3, #3
   17138:	mov	r2, r9
   1713c:	mov	r1, r4
   17140:	mov	r0, r8
   17144:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   17148:	cmp	r4, r0
   1714c:	moveq	r4, r0
   17150:	beq	17060 <_start@@Base+0x2a38>
   17154:	mov	r2, #1
   17158:	mov	r3, #0
   1715c:	ldr	r1, [sp, #40]	; 0x28
   17160:	strd	r2, [r1]
   17164:	mov	r3, #0
   17168:	str	r3, [r5]
   1716c:	mov	r4, r0
   17170:	b	17060 <_start@@Base+0x2a38>
   17174:	mov	r4, r0
   17178:	b	17060 <_start@@Base+0x2a38>
   1717c:	nop			; (mov r0, r0)
   17180:	ldclvs	15, cr15, [pc, #1020]!	; 17584 <_start@@Base+0x2f5c>
   17184:	ldrbmi	r6, [r2, -r5, ror #10]!
   17188:	andeq	r0, r0, r0
   1718c:	rsbmi	r7, ip, #423624704	; 0x19400000
   17190:	andeq	r0, r0, r0
   17194:	rsbpl	r6, r5, #0, 8
   17198:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   1719c:	ldrbmi	r6, [r2, -r5, ror #10]!
   171a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171a4:	sub	sp, sp, #12
   171a8:	mov	r7, r0
   171ac:	mov	r4, r1
   171b0:	mov	r5, r2
   171b4:	mov	r6, r3
   171b8:	mov	r1, r2
   171bc:	mov	r0, r4
   171c0:	bl	14750 <_start@@Base+0x128>
   171c4:	add	r3, pc, #924	; 0x39c
   171c8:	ldrd	r2, [r3]
   171cc:	cmp	r1, r3
   171d0:	cmpeq	r0, r2
   171d4:	bhi	17280 <_start@@Base+0x2c58>
   171d8:	add	r3, pc, #912	; 0x390
   171dc:	ldrd	r2, [r3]
   171e0:	cmp	r1, r3
   171e4:	cmpeq	r0, r2
   171e8:	beq	171f8 <_start@@Base+0x2bd0>
   171ec:	mov	r0, r4
   171f0:	add	sp, sp, #12
   171f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171f8:	mov	r1, r5
   171fc:	add	r0, r4, #8
   17200:	bl	14750 <_start@@Base+0x128>
   17204:	add	r3, pc, #876	; 0x36c
   17208:	ldrd	r2, [r3]
   1720c:	cmp	r1, r3
   17210:	cmpeq	r0, r2
   17214:	bne	171ec <_start@@Base+0x2bc4>
   17218:	add	r8, r4, #16
   1721c:	mov	r1, r5
   17220:	mov	r0, r8
   17224:	bl	14750 <_start@@Base+0x128>
   17228:	mov	r0, #0
   1722c:	and	r1, r1, #-16777216	; 0xff000000
   17230:	cmp	r1, #1912602624	; 0x72000000
   17234:	cmpeq	r0, #0
   17238:	bne	171ec <_start@@Base+0x2bc4>
   1723c:	sub	r8, r5, r8
   17240:	cmp	r8, #1
   17244:	ble	171ec <_start@@Base+0x2bc4>
   17248:	ldrb	r3, [r4, #17]
   1724c:	cmp	r3, #46	; 0x2e
   17250:	bne	171ec <_start@@Base+0x2bc4>
   17254:	ldr	r3, [sp, #52]	; 0x34
   17258:	str	r3, [sp, #4]
   1725c:	ldr	r3, [sp, #48]	; 0x30
   17260:	str	r3, [sp]
   17264:	mov	r3, r6
   17268:	mov	r2, r5
   1726c:	add	r1, r4, #18
   17270:	mov	r0, r7
   17274:	bl	16280 <_start@@Base+0x1c58>
   17278:	mov	r4, r0
   1727c:	b	171ec <_start@@Base+0x2bc4>
   17280:	add	r3, pc, #760	; 0x2f8
   17284:	ldrd	r2, [r3]
   17288:	cmp	r1, r3
   1728c:	cmpeq	r0, r2
   17290:	beq	17408 <_start@@Base+0x2de0>
   17294:	add	r3, pc, #748	; 0x2ec
   17298:	ldrd	r2, [r3]
   1729c:	cmp	r1, r3
   172a0:	cmpeq	r0, r2
   172a4:	bne	171ec <_start@@Base+0x2bc4>
   172a8:	mov	r1, r5
   172ac:	add	r0, r4, #8
   172b0:	bl	14750 <_start@@Base+0x128>
   172b4:	add	r3, pc, #724	; 0x2d4
   172b8:	ldrd	r2, [r3]
   172bc:	cmp	r1, r3
   172c0:	cmpeq	r0, r2
   172c4:	bne	171ec <_start@@Base+0x2bc4>
   172c8:	mov	r1, r5
   172cc:	add	r0, r4, #16
   172d0:	bl	14750 <_start@@Base+0x128>
   172d4:	add	r3, pc, #700	; 0x2bc
   172d8:	ldrd	r2, [r3]
   172dc:	cmp	r1, r3
   172e0:	cmpeq	r0, r2
   172e4:	bne	171ec <_start@@Base+0x2bc4>
   172e8:	mov	r1, r5
   172ec:	add	r0, r4, #24
   172f0:	bl	14750 <_start@@Base+0x128>
   172f4:	add	r3, pc, #676	; 0x2a4
   172f8:	ldrd	r2, [r3]
   172fc:	cmp	r1, r3
   17300:	cmpeq	r0, r2
   17304:	bne	171ec <_start@@Base+0x2bc4>
   17308:	add	r8, r4, #32
   1730c:	mov	r1, r5
   17310:	mov	r0, r8
   17314:	bl	14750 <_start@@Base+0x128>
   17318:	mov	r0, #0
   1731c:	and	r1, r1, #-16777216	; 0xff000000
   17320:	cmp	r1, #1694498816	; 0x65000000
   17324:	cmpeq	r0, #0
   17328:	bne	171ec <_start@@Base+0x2bc4>
   1732c:	sub	r8, r5, r8
   17330:	cmp	r8, #1
   17334:	ble	171ec <_start@@Base+0x2bc4>
   17338:	ldrb	r3, [r4, #33]	; 0x21
   1733c:	cmp	r3, #46	; 0x2e
   17340:	bne	171ec <_start@@Base+0x2bc4>
   17344:	add	r4, r4, #34	; 0x22
   17348:	mov	r1, r5
   1734c:	mov	r0, r4
   17350:	bl	14750 <_start@@Base+0x128>
   17354:	mov	r8, r0
   17358:	mov	r9, r1
   1735c:	mov	r0, #0
   17360:	bic	r1, r1, #255	; 0xff
   17364:	add	r3, pc, #572	; 0x23c
   17368:	ldrd	r2, [r3]
   1736c:	cmp	r1, r3
   17370:	cmpeq	r0, r2
   17374:	movne	r0, r4
   17378:	beq	178c0 <_start@@Base+0x3298>
   1737c:	add	r3, pc, #556	; 0x22c
   17380:	ldrd	r2, [r3]
   17384:	cmp	r9, r3
   17388:	cmpeq	r8, r2
   1738c:	bne	171ec <_start@@Base+0x2bc4>
   17390:	add	r8, r0, #8
   17394:	mov	r1, r5
   17398:	mov	r0, r8
   1739c:	bl	14750 <_start@@Base+0x128>
   173a0:	mov	r2, #0
   173a4:	ldr	r3, [pc, #564]	; 175e0 <_start@@Base+0x2fb8>
   173a8:	and	r2, r2, r0
   173ac:	and	r3, r3, r1
   173b0:	mov	r0, #0
   173b4:	ldr	r1, [pc, #552]	; 175e4 <_start@@Base+0x2fbc>
   173b8:	cmp	r3, r1
   173bc:	cmpeq	r2, r0
   173c0:	bne	171ec <_start@@Base+0x2bc4>
   173c4:	ldr	r3, [sp, #52]	; 0x34
   173c8:	str	r3, [sp]
   173cc:	mov	r3, #2
   173d0:	mov	r2, r5
   173d4:	mov	r1, r8
   173d8:	mov	r0, r7
   173dc:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   173e0:	cmp	r8, r0
   173e4:	beq	171ec <_start@@Base+0x2bc4>
   173e8:	mov	r2, #0
   173ec:	mov	r3, #0
   173f0:	ldr	r1, [sp, #48]	; 0x30
   173f4:	strd	r2, [r1]
   173f8:	mov	r3, #0
   173fc:	str	r3, [r6]
   17400:	mov	r4, r0
   17404:	b	171ec <_start@@Base+0x2bc4>
   17408:	mov	r1, r5
   1740c:	add	r0, r4, #8
   17410:	bl	14750 <_start@@Base+0x128>
   17414:	add	r3, pc, #412	; 0x19c
   17418:	ldrd	r2, [r3]
   1741c:	cmp	r1, r3
   17420:	cmpeq	r0, r2
   17424:	bhi	1765c <_start@@Base+0x3034>
   17428:	add	r3, pc, #400	; 0x190
   1742c:	ldrd	r2, [r3]
   17430:	cmp	r1, r3
   17434:	cmpeq	r0, r2
   17438:	bhi	174c8 <_start@@Base+0x2ea0>
   1743c:	add	r3, pc, #388	; 0x184
   17440:	ldrd	r2, [r3]
   17444:	cmp	r1, r3
   17448:	cmpeq	r0, r2
   1744c:	bne	171ec <_start@@Base+0x2bc4>
   17450:	add	r8, r4, #16
   17454:	mov	r1, r5
   17458:	mov	r0, r8
   1745c:	bl	14750 <_start@@Base+0x128>
   17460:	mov	r2, #0
   17464:	ldr	r3, [pc, #372]	; 175e0 <_start@@Base+0x2fb8>
   17468:	and	r2, r2, r0
   1746c:	and	r3, r3, r1
   17470:	mov	r0, #0
   17474:	ldr	r1, [pc, #364]	; 175e8 <_start@@Base+0x2fc0>
   17478:	cmp	r3, r1
   1747c:	cmpeq	r2, r0
   17480:	bne	171ec <_start@@Base+0x2bc4>
   17484:	sub	r8, r5, r8
   17488:	cmp	r8, #2
   1748c:	ble	171ec <_start@@Base+0x2bc4>
   17490:	ldrb	r3, [r4, #18]
   17494:	cmp	r3, #46	; 0x2e
   17498:	bne	171ec <_start@@Base+0x2bc4>
   1749c:	ldr	r3, [sp, #52]	; 0x34
   174a0:	str	r3, [sp, #4]
   174a4:	ldr	r3, [sp, #48]	; 0x30
   174a8:	str	r3, [sp]
   174ac:	mov	r3, r6
   174b0:	mov	r2, r5
   174b4:	add	r1, r4, #19
   174b8:	mov	r0, r7
   174bc:	bl	166c8 <_start@@Base+0x20a0>
   174c0:	mov	r4, r0
   174c4:	b	171ec <_start@@Base+0x2bc4>
   174c8:	add	r3, pc, #256	; 0x100
   174cc:	ldrd	r2, [r3]
   174d0:	cmp	r1, r3
   174d4:	cmpeq	r0, r2
   174d8:	beq	175f0 <_start@@Base+0x2fc8>
   174dc:	add	r3, pc, #244	; 0xf4
   174e0:	ldrd	r2, [r3]
   174e4:	cmp	r1, r3
   174e8:	cmpeq	r0, r2
   174ec:	bne	171ec <_start@@Base+0x2bc4>
   174f0:	add	r8, r4, #16
   174f4:	mov	r1, r5
   174f8:	mov	r0, r8
   174fc:	bl	14750 <_start@@Base+0x128>
   17500:	mov	r2, #0
   17504:	ldr	r3, [pc, #212]	; 175e0 <_start@@Base+0x2fb8>
   17508:	and	r2, r2, r0
   1750c:	and	r3, r3, r1
   17510:	mov	r0, #0
   17514:	ldr	r1, [pc, #208]	; 175ec <_start@@Base+0x2fc4>
   17518:	cmp	r3, r1
   1751c:	cmpeq	r2, r0
   17520:	bne	171ec <_start@@Base+0x2bc4>
   17524:	sub	r8, r5, r8
   17528:	cmp	r8, #2
   1752c:	ble	171ec <_start@@Base+0x2bc4>
   17530:	ldrb	r3, [r4, #18]
   17534:	cmp	r3, #46	; 0x2e
   17538:	bne	171ec <_start@@Base+0x2bc4>
   1753c:	ldr	r3, [sp, #52]	; 0x34
   17540:	str	r3, [sp, #4]
   17544:	ldr	r3, [sp, #48]	; 0x30
   17548:	str	r3, [sp]
   1754c:	mov	r3, r6
   17550:	mov	r2, r5
   17554:	add	r1, r4, #19
   17558:	mov	r0, r7
   1755c:	bl	16980 <_start@@Base+0x2358>
   17560:	mov	r4, r0
   17564:	b	171ec <_start@@Base+0x2bc4>
   17568:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   1756c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17570:	cmnvs	r3, lr, lsr #18
   17574:			; <UNDEFINED> instruction: 0x46616e74
   17578:	cmnvs	r3, r5, ror #8
   1757c:	cmnmi	r8, #-2147483620	; 0x8000001c
   17580:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   17584:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17588:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   1758c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17590:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   17594:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   17598:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   1759c:	cmnpl	r0, #-1073741800	; 0xc0000018
   175a0:	cmnvs	ip, #100, 10	; 0x19000000
   175a4:	svcvs	0x006d496e
   175a8:	andeq	r0, r0, r0
   175ac:	strbtmi	r6, [pc], -r0, lsl #30
   175b0:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   175b4:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   175b8:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   175bc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   175c0:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   175c4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   175c8:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   175cc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   175d0:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   175d4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   175d8:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   175dc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   175e0:			; <UNDEFINED> instruction: 0xffff0000
   175e4:	cmnvs	ip, r0
   175e8:	cdpvs	0, 7, cr0, cr9, cr0, {0}
   175ec:	svcvs	0x006f0000
   175f0:	add	r8, r4, #16
   175f4:	mov	r1, r5
   175f8:	mov	r0, r8
   175fc:	bl	14750 <_start@@Base+0x128>
   17600:	mov	r0, #0
   17604:	add	r3, pc, #764	; 0x2fc
   17608:	ldrd	r2, [r3]
   1760c:	cmp	r1, r3
   17610:	cmpeq	r0, r2
   17614:	bne	171ec <_start@@Base+0x2bc4>
   17618:	sub	r8, r5, r8
   1761c:	cmp	r8, #4
   17620:	ble	171ec <_start@@Base+0x2bc4>
   17624:	ldrb	r3, [r4, #20]
   17628:	cmp	r3, #46	; 0x2e
   1762c:	bne	171ec <_start@@Base+0x2bc4>
   17630:	ldr	r3, [sp, #52]	; 0x34
   17634:	str	r3, [sp, #4]
   17638:	ldr	r3, [sp, #48]	; 0x30
   1763c:	str	r3, [sp]
   17640:	mov	r3, r6
   17644:	mov	r2, r5
   17648:	add	r1, r4, #21
   1764c:	mov	r0, r7
   17650:	bl	17010 <_start@@Base+0x29e8>
   17654:	mov	r4, r0
   17658:	b	171ec <_start@@Base+0x2bc4>
   1765c:	add	r3, pc, #684	; 0x2ac
   17660:	ldrd	r2, [r3]
   17664:	cmp	r1, r3
   17668:	cmpeq	r0, r2
   1766c:	bhi	176e0 <_start@@Base+0x30b8>
   17670:	bne	171ec <_start@@Base+0x2bc4>
   17674:	add	r8, r4, #16
   17678:	mov	r1, r5
   1767c:	mov	r0, r8
   17680:	bl	14750 <_start@@Base+0x128>
   17684:	bic	r0, r0, #255	; 0xff
   17688:	add	r3, pc, #648	; 0x288
   1768c:	ldrd	r2, [r3]
   17690:	cmp	r1, r3
   17694:	cmpeq	r0, r2
   17698:	bne	171ec <_start@@Base+0x2bc4>
   1769c:	sub	r8, r5, r8
   176a0:	cmp	r8, #7
   176a4:	ble	171ec <_start@@Base+0x2bc4>
   176a8:	ldrb	r3, [r4, #23]
   176ac:	cmp	r3, #46	; 0x2e
   176b0:	bne	171ec <_start@@Base+0x2bc4>
   176b4:	ldr	r3, [sp, #52]	; 0x34
   176b8:	str	r3, [sp, #4]
   176bc:	ldr	r3, [sp, #48]	; 0x30
   176c0:	str	r3, [sp]
   176c4:	mov	r3, r6
   176c8:	mov	r2, r5
   176cc:	add	r1, r4, #24
   176d0:	mov	r0, r7
   176d4:	bl	16ac8 <_start@@Base+0x24a0>
   176d8:	mov	r4, r0
   176dc:	b	171ec <_start@@Base+0x2bc4>
   176e0:	add	r3, pc, #568	; 0x238
   176e4:	ldrd	r2, [r3]
   176e8:	cmp	r1, r3
   176ec:	cmpeq	r0, r2
   176f0:	bhi	17774 <_start@@Base+0x314c>
   176f4:	add	r3, pc, #556	; 0x22c
   176f8:	ldrd	r2, [r3]
   176fc:	cmp	r1, r3
   17700:	cmpeq	r0, r2
   17704:	bne	171ec <_start@@Base+0x2bc4>
   17708:	add	r8, r4, #16
   1770c:	mov	r1, r5
   17710:	mov	r0, r8
   17714:	bl	14750 <_start@@Base+0x128>
   17718:	bic	r0, r0, #255	; 0xff
   1771c:	add	r3, pc, #524	; 0x20c
   17720:	ldrd	r2, [r3]
   17724:	cmp	r1, r3
   17728:	cmpeq	r0, r2
   1772c:	bne	171ec <_start@@Base+0x2bc4>
   17730:	sub	r8, r5, r8
   17734:	cmp	r8, #7
   17738:	ble	171ec <_start@@Base+0x2bc4>
   1773c:	ldrb	r3, [r4, #23]
   17740:	cmp	r3, #46	; 0x2e
   17744:	bne	171ec <_start@@Base+0x2bc4>
   17748:	ldr	r3, [sp, #52]	; 0x34
   1774c:	str	r3, [sp, #4]
   17750:	ldr	r3, [sp, #48]	; 0x30
   17754:	str	r3, [sp]
   17758:	mov	r3, r6
   1775c:	mov	r2, r5
   17760:	add	r1, r4, #24
   17764:	mov	r0, r7
   17768:	bl	16c6c <_start@@Base+0x2644>
   1776c:	mov	r4, r0
   17770:	b	171ec <_start@@Base+0x2bc4>
   17774:	add	r3, pc, #444	; 0x1bc
   17778:	ldrd	r2, [r3]
   1777c:	cmp	r1, r3
   17780:	cmpeq	r0, r2
   17784:	bne	171ec <_start@@Base+0x2bc4>
   17788:	add	r8, r4, #16
   1778c:	mov	r1, r5
   17790:	mov	r0, r8
   17794:	bl	14750 <_start@@Base+0x128>
   17798:	mov	sl, r0
   1779c:	mov	fp, r1
   177a0:	bic	r0, r0, #255	; 0xff
   177a4:	add	r3, pc, #404	; 0x194
   177a8:	ldrd	r2, [r3]
   177ac:	cmp	r1, r3
   177b0:	cmpeq	r0, r2
   177b4:	beq	1787c <_start@@Base+0x3254>
   177b8:	add	r3, pc, #392	; 0x188
   177bc:	ldrd	r2, [r3]
   177c0:	cmp	fp, r3
   177c4:	cmpeq	sl, r2
   177c8:	bne	171ec <_start@@Base+0x2bc4>
   177cc:	add	r8, r4, #24
   177d0:	mov	r1, r5
   177d4:	mov	r0, r8
   177d8:	bl	14750 <_start@@Base+0x128>
   177dc:	mov	r0, #0
   177e0:	bic	r1, r1, #255	; 0xff
   177e4:	add	r3, pc, #356	; 0x164
   177e8:	ldrd	r2, [r3]
   177ec:	cmp	r1, r3
   177f0:	cmpeq	r0, r2
   177f4:	bne	171ec <_start@@Base+0x2bc4>
   177f8:	sub	r8, r5, r8
   177fc:	cmp	r8, #3
   17800:	ble	171ec <_start@@Base+0x2bc4>
   17804:	ldrb	r3, [r4, #27]
   17808:	cmp	r3, #46	; 0x2e
   1780c:	bne	171ec <_start@@Base+0x2bc4>
   17810:	add	r8, r4, #28
   17814:	mov	r1, r5
   17818:	mov	r0, r8
   1781c:	bl	14750 <_start@@Base+0x128>
   17820:	mov	r0, #0
   17824:	and	r1, r1, #-16777216	; 0xff000000
   17828:	cmp	r1, #2013265920	; 0x78000000
   1782c:	cmpeq	r0, #0
   17830:	movne	r4, r8
   17834:	bne	171ec <_start@@Base+0x2bc4>
   17838:	ldr	r3, [sp, #52]	; 0x34
   1783c:	str	r3, [sp]
   17840:	mov	r3, #1
   17844:	mov	r2, r5
   17848:	mov	r1, r8
   1784c:	mov	r0, r7
   17850:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   17854:	mov	r4, r0
   17858:	cmp	r8, r0
   1785c:	beq	171ec <_start@@Base+0x2bc4>
   17860:	mov	r2, #0
   17864:	mov	r3, #0
   17868:	ldr	r1, [sp, #48]	; 0x30
   1786c:	strd	r2, [r1]
   17870:	mov	r3, #0
   17874:	str	r3, [r6]
   17878:	b	171ec <_start@@Base+0x2bc4>
   1787c:	sub	r8, r5, r8
   17880:	cmp	r8, #7
   17884:	ble	177b8 <_start@@Base+0x3190>
   17888:	ldrb	r3, [r4, #23]
   1788c:	cmp	r3, #46	; 0x2e
   17890:	bne	177b8 <_start@@Base+0x3190>
   17894:	ldr	r3, [sp, #52]	; 0x34
   17898:	str	r3, [sp, #4]
   1789c:	ldr	r3, [sp, #48]	; 0x30
   178a0:	str	r3, [sp]
   178a4:	mov	r3, r6
   178a8:	mov	r2, r5
   178ac:	add	r1, r4, #24
   178b0:	mov	r0, r7
   178b4:	bl	16e8c <_start@@Base+0x2864>
   178b8:	mov	r4, r0
   178bc:	b	171ec <_start@@Base+0x2bc4>
   178c0:	ldr	r3, [sp, #52]	; 0x34
   178c4:	str	r3, [sp]
   178c8:	mov	r3, #3
   178cc:	mov	r2, r5
   178d0:	mov	r1, r4
   178d4:	mov	r0, r7
   178d8:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   178dc:	cmp	r4, r0
   178e0:	beq	1737c <_start@@Base+0x2d54>
   178e4:	mov	r2, #17
   178e8:	mov	r3, #0
   178ec:	ldr	r1, [sp, #48]	; 0x30
   178f0:	strd	r2, [r1]
   178f4:	mov	r3, #0
   178f8:	str	r3, [r6]
   178fc:	mov	r4, r0
   17900:	b	171ec <_start@@Base+0x2bc4>
   17904:	nop			; (mov r0, r0)
   17908:	andeq	r0, r0, r0
   1790c:	svcvs	0x006c6f72
   17910:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   17914:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17918:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1791c:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   17920:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   17924:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17928:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   1792c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17930:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   17934:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   17938:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   1793c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17940:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   17944:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   17948:	rsbsvc	r7, r4, r5, ror #18
   1794c:	svcvs	0x0074656d
   17950:	andeq	r0, r0, r0
   17954:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   17958:	push	{r4, r5, r6, r7, r8, r9, lr}
   1795c:	sub	sp, sp, #28
   17960:	mov	r4, #0
   17964:	mov	r5, #0
   17968:	strd	r4, [sp, #16]
   1796c:	mov	ip, #0
   17970:	str	ip, [sp, #12]
   17974:	strh	ip, [r3]
   17978:	cmp	r1, r2
   1797c:	moveq	r0, r2
   17980:	beq	17a00 <_start@@Base+0x33d8>
   17984:	mov	r6, r3
   17988:	mov	r5, r2
   1798c:	mov	r4, r1
   17990:	mov	r7, r0
   17994:	add	r3, sp, #16
   17998:	str	r3, [sp]
   1799c:	add	r3, sp, #12
   179a0:	bl	2d678 <flatcc_json_parser_integer@@Base>
   179a4:	cmp	r4, r0
   179a8:	beq	17a00 <_start@@Base+0x33d8>
   179ac:	ldrd	r2, [sp, #16]
   179b0:	ldr	r1, [sp, #12]
   179b4:	cmp	r1, #0
   179b8:	beq	179e8 <_start@@Base+0x33c0>
   179bc:	cmp	r3, #0
   179c0:	cmpeq	r2, #32768	; 0x8000
   179c4:	rsbls	r2, r2, #0
   179c8:	strhls	r2, [r6]
   179cc:	bls	17a00 <_start@@Base+0x33d8>
   179d0:	mov	r3, #8
   179d4:	mov	r2, r5
   179d8:	mov	r1, r0
   179dc:	mov	r0, r7
   179e0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   179e4:	b	17a00 <_start@@Base+0x33d8>
   179e8:	ldr	r8, [pc, #48]	; 17a20 <_start@@Base+0x33f8>
   179ec:	mov	r9, #0
   179f0:	cmp	r3, r9
   179f4:	cmpeq	r2, r8
   179f8:	strhls	r2, [r6]
   179fc:	bhi	17a08 <_start@@Base+0x33e0>
   17a00:	add	sp, sp, #28
   17a04:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17a08:	mov	r3, #7
   17a0c:	mov	r2, r5
   17a10:	mov	r1, r0
   17a14:	mov	r0, r7
   17a18:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   17a1c:	b	17a00 <_start@@Base+0x33d8>
   17a20:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   17a24:	push	{r4, r5, r6, r7, r8, r9, lr}
   17a28:	sub	sp, sp, #28
   17a2c:	mov	r4, #0
   17a30:	mov	r5, #0
   17a34:	strd	r4, [sp, #16]
   17a38:	mov	ip, #0
   17a3c:	str	ip, [sp, #12]
   17a40:	str	ip, [r3]
   17a44:	cmp	r1, r2
   17a48:	moveq	r0, r2
   17a4c:	beq	17acc <_start@@Base+0x34a4>
   17a50:	mov	r6, r3
   17a54:	mov	r5, r2
   17a58:	mov	r4, r1
   17a5c:	mov	r7, r0
   17a60:	add	r3, sp, #16
   17a64:	str	r3, [sp]
   17a68:	add	r3, sp, #12
   17a6c:	bl	2d678 <flatcc_json_parser_integer@@Base>
   17a70:	cmp	r4, r0
   17a74:	beq	17acc <_start@@Base+0x34a4>
   17a78:	ldrd	r2, [sp, #16]
   17a7c:	ldr	r1, [sp, #12]
   17a80:	cmp	r1, #0
   17a84:	beq	17ab4 <_start@@Base+0x348c>
   17a88:	cmp	r3, #0
   17a8c:	cmpeq	r2, #-2147483648	; 0x80000000
   17a90:	rsbls	r2, r2, #0
   17a94:	strls	r2, [r6]
   17a98:	bls	17acc <_start@@Base+0x34a4>
   17a9c:	mov	r3, #8
   17aa0:	mov	r2, r5
   17aa4:	mov	r1, r0
   17aa8:	mov	r0, r7
   17aac:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   17ab0:	b	17acc <_start@@Base+0x34a4>
   17ab4:	mvn	r8, #-2147483648	; 0x80000000
   17ab8:	mov	r9, #0
   17abc:	cmp	r3, r9
   17ac0:	cmpeq	r2, r8
   17ac4:	strls	r2, [r6]
   17ac8:	bhi	17ad4 <_start@@Base+0x34ac>
   17acc:	add	sp, sp, #28
   17ad0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17ad4:	mov	r3, #7
   17ad8:	mov	r2, r5
   17adc:	mov	r1, r0
   17ae0:	mov	r0, r7
   17ae4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   17ae8:	b	17acc <_start@@Base+0x34a4>
   17aec:	push	{r4, r5, r6, r7, r8, r9, lr}
   17af0:	sub	sp, sp, #28
   17af4:	mov	r4, #0
   17af8:	mov	r5, #0
   17afc:	strd	r4, [sp, #16]
   17b00:	mov	ip, #0
   17b04:	str	ip, [sp, #12]
   17b08:	str	ip, [r3]
   17b0c:	cmp	r1, r2
   17b10:	moveq	r0, r2
   17b14:	beq	17b68 <_start@@Base+0x3540>
   17b18:	mov	r7, r3
   17b1c:	mov	r5, r2
   17b20:	mov	r4, r1
   17b24:	mov	r6, r0
   17b28:	add	r3, sp, #16
   17b2c:	str	r3, [sp]
   17b30:	add	r3, sp, #12
   17b34:	bl	2d678 <flatcc_json_parser_integer@@Base>
   17b38:	cmp	r4, r0
   17b3c:	beq	17b68 <_start@@Base+0x3540>
   17b40:	ldr	r3, [sp, #12]
   17b44:	cmp	r3, #0
   17b48:	bne	17b70 <_start@@Base+0x3548>
   17b4c:	ldrd	r2, [sp, #16]
   17b50:	mvn	r8, #0
   17b54:	mov	r9, #0
   17b58:	cmp	r3, r9
   17b5c:	cmpeq	r2, r8
   17b60:	strls	r2, [r7]
   17b64:	bhi	17b88 <_start@@Base+0x3560>
   17b68:	add	sp, sp, #28
   17b6c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17b70:	mov	r3, #8
   17b74:	mov	r2, r5
   17b78:	mov	r1, r0
   17b7c:	mov	r0, r6
   17b80:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   17b84:	b	17b68 <_start@@Base+0x3540>
   17b88:	mov	r3, #7
   17b8c:	mov	r2, r5
   17b90:	mov	r1, r0
   17b94:	mov	r0, r6
   17b98:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   17b9c:	b	17b68 <_start@@Base+0x3540>
   17ba0:	push	{r4, r5, r6, r7, lr}
   17ba4:	sub	sp, sp, #28
   17ba8:	mov	r4, #0
   17bac:	mov	r5, #0
   17bb0:	strd	r4, [sp, #16]
   17bb4:	mov	ip, #0
   17bb8:	str	ip, [sp, #12]
   17bbc:	strd	r4, [r3]
   17bc0:	cmp	r1, r2
   17bc4:	moveq	r0, r2
   17bc8:	beq	17c08 <_start@@Base+0x35e0>
   17bcc:	mov	r7, r3
   17bd0:	mov	r5, r2
   17bd4:	mov	r4, r1
   17bd8:	mov	r6, r0
   17bdc:	add	r3, sp, #16
   17be0:	str	r3, [sp]
   17be4:	add	r3, sp, #12
   17be8:	bl	2d678 <flatcc_json_parser_integer@@Base>
   17bec:	cmp	r4, r0
   17bf0:	beq	17c08 <_start@@Base+0x35e0>
   17bf4:	ldr	r3, [sp, #12]
   17bf8:	cmp	r3, #0
   17bfc:	bne	17c10 <_start@@Base+0x35e8>
   17c00:	ldrd	r2, [sp, #16]
   17c04:	strd	r2, [r7]
   17c08:	add	sp, sp, #28
   17c0c:	pop	{r4, r5, r6, r7, pc}
   17c10:	mov	r3, #8
   17c14:	mov	r2, r5
   17c18:	mov	r1, r0
   17c1c:	mov	r0, r6
   17c20:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   17c24:	b	17c08 <_start@@Base+0x35e0>
   17c28:	push	{r4, r5, r6, r7, lr}
   17c2c:	sub	sp, sp, #28
   17c30:	mov	r4, #0
   17c34:	mov	r5, #0
   17c38:	strd	r4, [sp, #16]
   17c3c:	mov	ip, #0
   17c40:	str	ip, [sp, #12]
   17c44:	strb	ip, [r3]
   17c48:	cmp	r1, r2
   17c4c:	moveq	r0, r2
   17c50:	beq	17c9c <_start@@Base+0x3674>
   17c54:	mov	r7, r3
   17c58:	mov	r5, r2
   17c5c:	mov	r4, r1
   17c60:	mov	r6, r0
   17c64:	add	r3, sp, #16
   17c68:	str	r3, [sp]
   17c6c:	add	r3, sp, #12
   17c70:	bl	2d678 <flatcc_json_parser_integer@@Base>
   17c74:	cmp	r4, r0
   17c78:	beq	17c9c <_start@@Base+0x3674>
   17c7c:	ldr	r3, [sp, #12]
   17c80:	cmp	r3, #0
   17c84:	bne	17ca4 <_start@@Base+0x367c>
   17c88:	ldrd	r2, [sp, #16]
   17c8c:	cmp	r3, #0
   17c90:	cmpeq	r2, #255	; 0xff
   17c94:	strbls	r2, [r7]
   17c98:	bhi	17cbc <_start@@Base+0x3694>
   17c9c:	add	sp, sp, #28
   17ca0:	pop	{r4, r5, r6, r7, pc}
   17ca4:	mov	r3, #8
   17ca8:	mov	r2, r5
   17cac:	mov	r1, r0
   17cb0:	mov	r0, r6
   17cb4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   17cb8:	b	17c9c <_start@@Base+0x3674>
   17cbc:	mov	r3, #7
   17cc0:	mov	r2, r5
   17cc4:	mov	r1, r0
   17cc8:	mov	r0, r6
   17ccc:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   17cd0:	b	17c9c <_start@@Base+0x3674>
   17cd4:	push	{r4, r5, r6, r7, lr}
   17cd8:	sub	sp, sp, #28
   17cdc:	mov	r4, #0
   17ce0:	mov	r5, #0
   17ce4:	strd	r4, [sp, #16]
   17ce8:	mov	ip, #0
   17cec:	str	ip, [sp, #12]
   17cf0:	strd	r4, [r3]
   17cf4:	cmp	r1, r2
   17cf8:	moveq	r0, r2
   17cfc:	beq	17d7c <_start@@Base+0x3754>
   17d00:	mov	r6, r3
   17d04:	mov	r5, r2
   17d08:	mov	r4, r1
   17d0c:	mov	r7, r0
   17d10:	add	r3, sp, #16
   17d14:	str	r3, [sp]
   17d18:	add	r3, sp, #12
   17d1c:	bl	2d678 <flatcc_json_parser_integer@@Base>
   17d20:	cmp	r4, r0
   17d24:	beq	17d7c <_start@@Base+0x3754>
   17d28:	ldrd	r2, [sp, #16]
   17d2c:	ldr	r1, [sp, #12]
   17d30:	cmp	r1, #0
   17d34:	beq	17d6c <_start@@Base+0x3744>
   17d38:	cmp	r3, #-2147483648	; 0x80000000
   17d3c:	cmpeq	r2, #0
   17d40:	bhi	17d54 <_start@@Base+0x372c>
   17d44:	rsbs	r2, r2, #0
   17d48:	rsc	r3, r3, #0
   17d4c:	strd	r2, [r6]
   17d50:	b	17d7c <_start@@Base+0x3754>
   17d54:	mov	r3, #8
   17d58:	mov	r2, r5
   17d5c:	mov	r1, r0
   17d60:	mov	r0, r7
   17d64:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   17d68:	b	17d7c <_start@@Base+0x3754>
   17d6c:	cmp	r2, #0
   17d70:	sbcs	r1, r3, #0
   17d74:	blt	17d84 <_start@@Base+0x375c>
   17d78:	strd	r2, [r6]
   17d7c:	add	sp, sp, #28
   17d80:	pop	{r4, r5, r6, r7, pc}
   17d84:	mov	r3, #7
   17d88:	mov	r2, r5
   17d8c:	mov	r1, r0
   17d90:	mov	r0, r7
   17d94:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   17d98:	b	17d7c <_start@@Base+0x3754>
   17d9c:	sub	r3, r2, r1
   17da0:	cmp	r3, #1
   17da4:	ble	17db8 <_start@@Base+0x3790>
   17da8:	ldrb	r3, [r1]
   17dac:	cmp	r3, #32
   17db0:	bhi	17dd8 <_start@@Base+0x37b0>
   17db4:	beq	17dc4 <_start@@Base+0x379c>
   17db8:	push	{r4, lr}
   17dbc:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   17dc0:	pop	{r4, pc}
   17dc4:	ldrb	r3, [r1, #1]
   17dc8:	cmp	r3, #32
   17dcc:	bls	17db8 <_start@@Base+0x3790>
   17dd0:	add	r0, r1, #1
   17dd4:	bx	lr
   17dd8:	mov	r0, r1
   17ddc:	bx	lr
   17de0:	push	{r4, r5, r6, lr}
   17de4:	mov	r5, r0
   17de8:	mov	r0, r1
   17dec:	mov	r4, r2
   17df0:	sub	r2, r2, r1
   17df4:	cmp	r2, r3
   17df8:	pople	{r4, r5, r6, pc}
   17dfc:	ldrb	r2, [r1, r3]
   17e00:	cmp	r2, #34	; 0x22
   17e04:	popne	{r4, r5, r6, pc}
   17e08:	add	r3, r3, #1
   17e0c:	mov	r2, r4
   17e10:	add	r1, r1, r3
   17e14:	mov	r0, r5
   17e18:	bl	17d9c <_start@@Base+0x3774>
   17e1c:	cmp	r4, r0
   17e20:	beq	17e30 <_start@@Base+0x3808>
   17e24:	ldrb	r3, [r0]
   17e28:	cmp	r3, #58	; 0x3a
   17e2c:	beq	17e48 <_start@@Base+0x3820>
   17e30:	mov	r3, #4
   17e34:	mov	r2, r4
   17e38:	mov	r1, r0
   17e3c:	mov	r0, r5
   17e40:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   17e44:	pop	{r4, r5, r6, pc}
   17e48:	mov	r2, r4
   17e4c:	add	r1, r0, #1
   17e50:	mov	r0, r5
   17e54:	bl	17d9c <_start@@Base+0x3774>
   17e58:	pop	{r4, r5, r6, pc}
   17e5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e60:	sub	sp, sp, #44	; 0x2c
   17e64:	mov	r7, r0
   17e68:	mov	r5, r2
   17e6c:	str	r3, [sp, #20]
   17e70:	ldr	r8, [sp, #80]	; 0x50
   17e74:	mov	r2, #0
   17e78:	mov	r3, #0
   17e7c:	strd	r2, [r8]
   17e80:	cmp	r1, r5
   17e84:	moveq	r4, r5
   17e88:	beq	17eac <_start@@Base+0x3884>
   17e8c:	ldrb	r3, [r1]
   17e90:	cmp	r3, #34	; 0x22
   17e94:	addeq	r4, r1, #1
   17e98:	beq	17eac <_start@@Base+0x3884>
   17e9c:	mov	r3, #5
   17ea0:	mov	r2, r5
   17ea4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   17ea8:	mov	r4, r0
   17eac:	sub	r3, r5, r4
   17eb0:	cmp	r3, #1
   17eb4:	ble	17ed8 <_start@@Base+0x38b0>
   17eb8:	ldrb	r3, [r4]
   17ebc:	cmp	r3, #32
   17ec0:	bhi	17eec <_start@@Base+0x38c4>
   17ec4:	bne	17ed8 <_start@@Base+0x38b0>
   17ec8:	ldrb	r3, [r4, #1]
   17ecc:	cmp	r3, #32
   17ed0:	addhi	r4, r4, #1
   17ed4:	bhi	17eec <_start@@Base+0x38c4>
   17ed8:	mov	r2, r5
   17edc:	mov	r1, r4
   17ee0:	mov	r0, r7
   17ee4:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   17ee8:	mov	r4, r0
   17eec:	cmp	r5, r4
   17ef0:	moveq	r5, r4
   17ef4:	beq	17f64 <_start@@Base+0x393c>
   17ef8:	mov	r2, #0
   17efc:	mov	r3, #0
   17f00:	strd	r2, [sp, #8]
   17f04:	add	fp, sp, #24
   17f08:	add	sl, sp, #32
   17f0c:	ldr	r9, [sp, #20]
   17f10:	str	fp, [sp, #4]
   17f14:	str	sl, [sp]
   17f18:	ldr	r6, [r9]
   17f1c:	add	r3, sp, #28
   17f20:	mov	r2, r5
   17f24:	mov	r1, r4
   17f28:	mov	r0, r7
   17f2c:	blx	r6
   17f30:	cmp	r5, r0
   17f34:	beq	17f64 <_start@@Base+0x393c>
   17f38:	cmp	r4, r0
   17f3c:	bne	17f78 <_start@@Base+0x3950>
   17f40:	ldr	r3, [r9, #4]!
   17f44:	cmp	r3, #0
   17f48:	bne	17f10 <_start@@Base+0x38e8>
   17f4c:	mov	r3, #23
   17f50:	mov	r2, r5
   17f54:	mov	r1, r4
   17f58:	mov	r0, r7
   17f5c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   17f60:	mov	r5, r0
   17f64:	mov	r0, r5
   17f68:	add	sp, sp, #44	; 0x2c
   17f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f70:	mov	r4, r6
   17f74:	b	17f0c <_start@@Base+0x38e4>
   17f78:	mov	r6, r0
   17f7c:	ldr	r3, [sp, #28]
   17f80:	cmp	r3, #0
   17f84:	bne	17fc0 <_start@@Base+0x3998>
   17f88:	ldrd	r2, [sp, #32]
   17f8c:	strd	r2, [sp, #8]
   17f90:	ldrd	r2, [r8]
   17f94:	ldrd	r0, [sp, #8]
   17f98:	adds	r0, r0, r2
   17f9c:	adc	r1, r1, r3
   17fa0:	mov	r2, r0
   17fa4:	mov	r3, r1
   17fa8:	strd	r2, [r8]
   17fac:	ldr	r3, [sp, #24]
   17fb0:	cmp	r3, #0
   17fb4:	bne	17f70 <_start@@Base+0x3948>
   17fb8:	mov	r5, r6
   17fbc:	b	17f64 <_start@@Base+0x393c>
   17fc0:	mov	r3, #8
   17fc4:	mov	r2, r5
   17fc8:	mov	r1, r0
   17fcc:	mov	r0, r7
   17fd0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   17fd4:	cmp	r5, r0
   17fd8:	bne	17f90 <_start@@Base+0x3968>
   17fdc:	b	17f64 <_start@@Base+0x393c>
   17fe0:	push	{r4, r5, r6, lr}
   17fe4:	mov	r5, r0
   17fe8:	mov	r4, r2
   17fec:	mov	r6, r3
   17ff0:	sub	r3, r2, r1
   17ff4:	cmp	r3, #1
   17ff8:	ble	1800c <_start@@Base+0x39e4>
   17ffc:	ldrb	r3, [r1]
   18000:	cmp	r3, #32
   18004:	bhi	1801c <_start@@Base+0x39f4>
   18008:	beq	18058 <_start@@Base+0x3a30>
   1800c:	mov	r2, r4
   18010:	mov	r0, r5
   18014:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   18018:	mov	r1, r0
   1801c:	cmp	r4, r1
   18020:	beq	1806c <_start@@Base+0x3a44>
   18024:	ldrb	r3, [r1]
   18028:	cmp	r3, #44	; 0x2c
   1802c:	beq	18090 <_start@@Base+0x3a68>
   18030:	mov	r3, #0
   18034:	str	r3, [r6]
   18038:	ldrb	r3, [r1]
   1803c:	cmp	r3, #93	; 0x5d
   18040:	beq	1807c <_start@@Base+0x3a54>
   18044:	mov	r3, #9
   18048:	mov	r2, r4
   1804c:	mov	r0, r5
   18050:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18054:	pop	{r4, r5, r6, pc}
   18058:	ldrb	r3, [r1, #1]
   1805c:	cmp	r3, #32
   18060:	addhi	r1, r1, #1
   18064:	bls	1800c <_start@@Base+0x39e4>
   18068:	b	1801c <_start@@Base+0x39f4>
   1806c:	mov	r3, #0
   18070:	str	r3, [r6]
   18074:	mov	r0, r1
   18078:	pop	{r4, r5, r6, pc}
   1807c:	mov	r2, r4
   18080:	add	r1, r1, #1
   18084:	mov	r0, r5
   18088:	bl	17d9c <_start@@Base+0x3774>
   1808c:	pop	{r4, r5, r6, pc}
   18090:	mov	r2, r4
   18094:	add	r1, r1, #1
   18098:	mov	r0, r5
   1809c:	bl	17d9c <_start@@Base+0x3774>
   180a0:	cmp	r4, r0
   180a4:	beq	180c0 <_start@@Base+0x3a98>
   180a8:	ldrb	r3, [r0]
   180ac:	cmp	r3, #93	; 0x5d
   180b0:	beq	180e0 <_start@@Base+0x3ab8>
   180b4:	mov	r3, #1
   180b8:	str	r3, [r6]
   180bc:	pop	{r4, r5, r6, pc}
   180c0:	mov	r3, #0
   180c4:	str	r3, [r6]
   180c8:	mov	r3, #9
   180cc:	mov	r2, r4
   180d0:	mov	r1, r0
   180d4:	mov	r0, r5
   180d8:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   180dc:	pop	{r4, r5, r6, pc}
   180e0:	mov	r3, #0
   180e4:	str	r3, [r6]
   180e8:	mov	r2, r4
   180ec:	add	r1, r0, #1
   180f0:	mov	r0, r5
   180f4:	bl	17d9c <_start@@Base+0x3774>
   180f8:	pop	{r4, r5, r6, pc}
   180fc:	push	{r4, r5, r6, lr}
   18100:	mov	r5, r0
   18104:	mov	r4, r2
   18108:	mov	r6, r3
   1810c:	sub	r3, r2, r1
   18110:	cmp	r3, #1
   18114:	ble	18128 <_start@@Base+0x3b00>
   18118:	ldrb	r3, [r1]
   1811c:	cmp	r3, #32
   18120:	bhi	18138 <_start@@Base+0x3b10>
   18124:	beq	18174 <_start@@Base+0x3b4c>
   18128:	mov	r2, r4
   1812c:	mov	r0, r5
   18130:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   18134:	mov	r1, r0
   18138:	cmp	r4, r1
   1813c:	beq	18188 <_start@@Base+0x3b60>
   18140:	ldrb	r3, [r1]
   18144:	cmp	r3, #44	; 0x2c
   18148:	beq	181ac <_start@@Base+0x3b84>
   1814c:	mov	r3, #0
   18150:	str	r3, [r6]
   18154:	ldrb	r3, [r1]
   18158:	cmp	r3, #125	; 0x7d
   1815c:	beq	18198 <_start@@Base+0x3b70>
   18160:	mov	r3, #10
   18164:	mov	r2, r4
   18168:	mov	r0, r5
   1816c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18170:	pop	{r4, r5, r6, pc}
   18174:	ldrb	r3, [r1, #1]
   18178:	cmp	r3, #32
   1817c:	addhi	r1, r1, #1
   18180:	bls	18128 <_start@@Base+0x3b00>
   18184:	b	18138 <_start@@Base+0x3b10>
   18188:	mov	r3, #0
   1818c:	str	r3, [r6]
   18190:	mov	r0, r1
   18194:	pop	{r4, r5, r6, pc}
   18198:	mov	r2, r4
   1819c:	add	r1, r1, #1
   181a0:	mov	r0, r5
   181a4:	bl	17d9c <_start@@Base+0x3774>
   181a8:	pop	{r4, r5, r6, pc}
   181ac:	mov	r2, r4
   181b0:	add	r1, r1, #1
   181b4:	mov	r0, r5
   181b8:	bl	17d9c <_start@@Base+0x3774>
   181bc:	cmp	r4, r0
   181c0:	beq	181dc <_start@@Base+0x3bb4>
   181c4:	ldrb	r3, [r0]
   181c8:	cmp	r3, #125	; 0x7d
   181cc:	beq	181fc <_start@@Base+0x3bd4>
   181d0:	mov	r3, #1
   181d4:	str	r3, [r6]
   181d8:	pop	{r4, r5, r6, pc}
   181dc:	mov	r3, #0
   181e0:	str	r3, [r6]
   181e4:	mov	r3, #10
   181e8:	mov	r2, r4
   181ec:	mov	r1, r0
   181f0:	mov	r0, r5
   181f4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   181f8:	pop	{r4, r5, r6, pc}
   181fc:	mov	r3, #0
   18200:	str	r3, [r6]
   18204:	mov	r2, r4
   18208:	add	r1, r0, #1
   1820c:	mov	r0, r5
   18210:	bl	17d9c <_start@@Base+0x3774>
   18214:	pop	{r4, r5, r6, pc}
   18218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1821c:	sub	sp, sp, #36	; 0x24
   18220:	mov	r8, r0
   18224:	mov	r7, r2
   18228:	str	r3, [sp, #12]
   1822c:	ldr	fp, [sp, #72]	; 0x48
   18230:	mov	r3, #0
   18234:	str	r3, [fp]
   18238:	cmp	r1, r2
   1823c:	beq	182a0 <_start@@Base+0x3c78>
   18240:	ldrb	r3, [r1]
   18244:	cmp	r3, #34	; 0x22
   18248:	addeq	r6, r1, #1
   1824c:	beq	1825c <_start@@Base+0x3c34>
   18250:	mov	r3, #5
   18254:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18258:	mov	r6, r0
   1825c:	sub	r3, r7, r6
   18260:	cmp	r3, #1
   18264:	ble	18278 <_start@@Base+0x3c50>
   18268:	ldrb	r3, [r6]
   1826c:	cmp	r3, #32
   18270:	bhi	1828c <_start@@Base+0x3c64>
   18274:	beq	182a8 <_start@@Base+0x3c80>
   18278:	mov	r2, r7
   1827c:	mov	r1, r6
   18280:	mov	r0, r8
   18284:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   18288:	mov	r6, r0
   1828c:	cmp	r7, r6
   18290:	beq	18368 <_start@@Base+0x3d40>
   18294:	add	sl, sp, #16
   18298:	add	r9, sp, #24
   1829c:	b	182f8 <_start@@Base+0x3cd0>
   182a0:	mov	r6, r2
   182a4:	b	1825c <_start@@Base+0x3c34>
   182a8:	ldrb	r3, [r6, #1]
   182ac:	cmp	r3, #32
   182b0:	addhi	r6, r6, #1
   182b4:	bls	18278 <_start@@Base+0x3c50>
   182b8:	b	1828c <_start@@Base+0x3c64>
   182bc:	mov	r4, r0
   182c0:	ldrd	r0, [sp, #24]
   182c4:	ldr	r3, [sp, #20]
   182c8:	cmp	r3, #0
   182cc:	beq	18354 <_start@@Base+0x3d2c>
   182d0:	bl	3ce64 <flatcc_json_printer_clear@@Base+0x7c0>
   182d4:	vmov	s15, r0
   182d8:	vneg.f32	s14, s15
   182dc:	vldr	s15, [fp]
   182e0:	vadd.f32	s15, s15, s14
   182e4:	vstr	s15, [fp]
   182e8:	ldr	r3, [sp, #16]
   182ec:	cmp	r3, #0
   182f0:	beq	18360 <_start@@Base+0x3d38>
   182f4:	mov	r6, r4
   182f8:	ldr	r5, [sp, #12]
   182fc:	str	sl, [sp, #4]
   18300:	str	r9, [sp]
   18304:	ldr	r4, [r5]
   18308:	add	r3, sp, #20
   1830c:	mov	r2, r7
   18310:	mov	r1, r6
   18314:	mov	r0, r8
   18318:	blx	r4
   1831c:	cmp	r7, r0
   18320:	beq	1836c <_start@@Base+0x3d44>
   18324:	cmp	r6, r0
   18328:	bne	182bc <_start@@Base+0x3c94>
   1832c:	ldr	r3, [r5, #4]!
   18330:	cmp	r3, #0
   18334:	bne	182fc <_start@@Base+0x3cd4>
   18338:	mov	r3, #23
   1833c:	mov	r2, r7
   18340:	mov	r1, r6
   18344:	mov	r0, r8
   18348:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1834c:	mov	r7, r0
   18350:	b	1836c <_start@@Base+0x3d44>
   18354:	bl	3ce64 <flatcc_json_printer_clear@@Base+0x7c0>
   18358:	vmov	s14, r0
   1835c:	b	182dc <_start@@Base+0x3cb4>
   18360:	mov	r7, r4
   18364:	b	1836c <_start@@Base+0x3d44>
   18368:	mov	r7, r6
   1836c:	mov	r0, r7
   18370:	add	sp, sp, #36	; 0x24
   18374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1837c:	sub	sp, sp, #36	; 0x24
   18380:	mov	r8, r0
   18384:	mov	r7, r2
   18388:	str	r3, [sp, #12]
   1838c:	ldr	fp, [sp, #72]	; 0x48
   18390:	mov	r2, #0
   18394:	mov	r3, #0
   18398:	strd	r2, [fp]
   1839c:	cmp	r1, r7
   183a0:	beq	18408 <_start@@Base+0x3de0>
   183a4:	ldrb	r3, [r1]
   183a8:	cmp	r3, #34	; 0x22
   183ac:	addeq	r6, r1, #1
   183b0:	beq	183c4 <_start@@Base+0x3d9c>
   183b4:	mov	r3, #5
   183b8:	mov	r2, r7
   183bc:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   183c0:	mov	r6, r0
   183c4:	sub	r3, r7, r6
   183c8:	cmp	r3, #1
   183cc:	ble	183e0 <_start@@Base+0x3db8>
   183d0:	ldrb	r3, [r6]
   183d4:	cmp	r3, #32
   183d8:	bhi	183f4 <_start@@Base+0x3dcc>
   183dc:	beq	18410 <_start@@Base+0x3de8>
   183e0:	mov	r2, r7
   183e4:	mov	r1, r6
   183e8:	mov	r0, r8
   183ec:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   183f0:	mov	r6, r0
   183f4:	cmp	r7, r6
   183f8:	beq	184d0 <_start@@Base+0x3ea8>
   183fc:	add	sl, sp, #16
   18400:	add	r9, sp, #24
   18404:	b	18460 <_start@@Base+0x3e38>
   18408:	mov	r6, r7
   1840c:	b	183c4 <_start@@Base+0x3d9c>
   18410:	ldrb	r3, [r6, #1]
   18414:	cmp	r3, #32
   18418:	addhi	r6, r6, #1
   1841c:	bls	183e0 <_start@@Base+0x3db8>
   18420:	b	183f4 <_start@@Base+0x3dcc>
   18424:	mov	r4, r0
   18428:	ldrd	r0, [sp, #24]
   1842c:	ldr	r3, [sp, #20]
   18430:	cmp	r3, #0
   18434:	beq	184bc <_start@@Base+0x3e94>
   18438:	bl	3cc2c <flatcc_json_printer_clear@@Base+0x588>
   1843c:	vmov	d7, r0, r1
   18440:	vneg.f64	d6, d7
   18444:	vldr	d7, [fp]
   18448:	vadd.f64	d7, d7, d6
   1844c:	vstr	d7, [fp]
   18450:	ldr	r3, [sp, #16]
   18454:	cmp	r3, #0
   18458:	beq	184c8 <_start@@Base+0x3ea0>
   1845c:	mov	r6, r4
   18460:	ldr	r5, [sp, #12]
   18464:	str	sl, [sp, #4]
   18468:	str	r9, [sp]
   1846c:	ldr	r4, [r5]
   18470:	add	r3, sp, #20
   18474:	mov	r2, r7
   18478:	mov	r1, r6
   1847c:	mov	r0, r8
   18480:	blx	r4
   18484:	cmp	r7, r0
   18488:	beq	184d4 <_start@@Base+0x3eac>
   1848c:	cmp	r6, r0
   18490:	bne	18424 <_start@@Base+0x3dfc>
   18494:	ldr	r3, [r5, #4]!
   18498:	cmp	r3, #0
   1849c:	bne	18464 <_start@@Base+0x3e3c>
   184a0:	mov	r3, #23
   184a4:	mov	r2, r7
   184a8:	mov	r1, r6
   184ac:	mov	r0, r8
   184b0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   184b4:	mov	r7, r0
   184b8:	b	184d4 <_start@@Base+0x3eac>
   184bc:	bl	3cc2c <flatcc_json_printer_clear@@Base+0x588>
   184c0:	vmov	d6, r0, r1
   184c4:	b	18444 <_start@@Base+0x3e1c>
   184c8:	mov	r7, r4
   184cc:	b	184d4 <_start@@Base+0x3eac>
   184d0:	mov	r7, r6
   184d4:	mov	r0, r7
   184d8:	add	sp, sp, #36	; 0x24
   184dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184e4:	sub	sp, sp, #36	; 0x24
   184e8:	mov	r8, r0
   184ec:	mov	r7, r2
   184f0:	str	r3, [sp, #12]
   184f4:	mov	r3, #0
   184f8:	ldr	r2, [sp, #72]	; 0x48
   184fc:	strb	r3, [r2]
   18500:	cmp	r1, r7
   18504:	beq	18570 <_start@@Base+0x3f48>
   18508:	ldrb	r3, [r1]
   1850c:	cmp	r3, #34	; 0x22
   18510:	addeq	r6, r1, #1
   18514:	beq	18528 <_start@@Base+0x3f00>
   18518:	mov	r3, #5
   1851c:	mov	r2, r7
   18520:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18524:	mov	r6, r0
   18528:	sub	r3, r7, r6
   1852c:	cmp	r3, #1
   18530:	ble	18544 <_start@@Base+0x3f1c>
   18534:	ldrb	r3, [r6]
   18538:	cmp	r3, #32
   1853c:	bhi	18558 <_start@@Base+0x3f30>
   18540:	beq	18578 <_start@@Base+0x3f50>
   18544:	mov	r2, r7
   18548:	mov	r1, r6
   1854c:	mov	r0, r8
   18550:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   18554:	mov	r6, r0
   18558:	cmp	r7, r6
   1855c:	beq	18658 <_start@@Base+0x4030>
   18560:	mov	fp, #0
   18564:	add	sl, sp, #16
   18568:	add	r9, sp, #24
   1856c:	b	185d4 <_start@@Base+0x3fac>
   18570:	mov	r6, r7
   18574:	b	18528 <_start@@Base+0x3f00>
   18578:	ldrb	r3, [r6, #1]
   1857c:	cmp	r3, #32
   18580:	addhi	r6, r6, #1
   18584:	bls	18544 <_start@@Base+0x3f1c>
   18588:	b	18558 <_start@@Base+0x3f30>
   1858c:	mov	r4, r0
   18590:	ldr	r3, [sp, #20]
   18594:	cmp	r3, #0
   18598:	bne	18630 <_start@@Base+0x4008>
   1859c:	ldr	r3, [sp, #28]
   185a0:	ldr	r2, [sp, #24]
   185a4:	orrs	r3, r2, r3
   185a8:	movne	fp, #1
   185ac:	moveq	fp, #0
   185b0:	ldr	r3, [sp, #72]	; 0x48
   185b4:	ldrb	r3, [r3]
   185b8:	add	r3, fp, r3
   185bc:	ldr	r2, [sp, #72]	; 0x48
   185c0:	strb	r3, [r2]
   185c4:	ldr	r3, [sp, #16]
   185c8:	cmp	r3, #0
   185cc:	beq	18650 <_start@@Base+0x4028>
   185d0:	mov	r6, r4
   185d4:	ldr	r5, [sp, #12]
   185d8:	str	sl, [sp, #4]
   185dc:	str	r9, [sp]
   185e0:	ldr	r4, [r5]
   185e4:	add	r3, sp, #20
   185e8:	mov	r2, r7
   185ec:	mov	r1, r6
   185f0:	mov	r0, r8
   185f4:	blx	r4
   185f8:	cmp	r7, r0
   185fc:	beq	1865c <_start@@Base+0x4034>
   18600:	cmp	r6, r0
   18604:	bne	1858c <_start@@Base+0x3f64>
   18608:	ldr	r3, [r5, #4]!
   1860c:	cmp	r3, #0
   18610:	bne	185d8 <_start@@Base+0x3fb0>
   18614:	mov	r3, #23
   18618:	mov	r2, r7
   1861c:	mov	r1, r6
   18620:	mov	r0, r8
   18624:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18628:	mov	r7, r0
   1862c:	b	1865c <_start@@Base+0x4034>
   18630:	mov	r3, #8
   18634:	mov	r2, r7
   18638:	mov	r1, r0
   1863c:	mov	r0, r8
   18640:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18644:	cmp	r7, r0
   18648:	bne	185b0 <_start@@Base+0x3f88>
   1864c:	b	1865c <_start@@Base+0x4034>
   18650:	mov	r7, r4
   18654:	b	1865c <_start@@Base+0x4034>
   18658:	mov	r7, r6
   1865c:	mov	r0, r7
   18660:	add	sp, sp, #36	; 0x24
   18664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1866c:	sub	sp, sp, #36	; 0x24
   18670:	mov	r8, r0
   18674:	mov	r7, r2
   18678:	str	r3, [sp, #8]
   1867c:	ldr	fp, [sp, #72]	; 0x48
   18680:	mov	r3, #0
   18684:	strb	r3, [fp]
   18688:	cmp	r1, r2
   1868c:	beq	186f8 <_start@@Base+0x40d0>
   18690:	ldrb	r3, [r1]
   18694:	cmp	r3, #34	; 0x22
   18698:	addeq	r6, r1, #1
   1869c:	beq	186ac <_start@@Base+0x4084>
   186a0:	mov	r3, #5
   186a4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   186a8:	mov	r6, r0
   186ac:	sub	r3, r7, r6
   186b0:	cmp	r3, #1
   186b4:	ble	186c8 <_start@@Base+0x40a0>
   186b8:	ldrb	r3, [r6]
   186bc:	cmp	r3, #32
   186c0:	bhi	186dc <_start@@Base+0x40b4>
   186c4:	beq	18700 <_start@@Base+0x40d8>
   186c8:	mov	r2, r7
   186cc:	mov	r1, r6
   186d0:	mov	r0, r8
   186d4:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   186d8:	mov	r6, r0
   186dc:	cmp	r7, r6
   186e0:	beq	187f8 <_start@@Base+0x41d0>
   186e4:	mov	r3, #0
   186e8:	str	r3, [sp, #12]
   186ec:	add	sl, sp, #16
   186f0:	add	r9, sp, #24
   186f4:	b	1875c <_start@@Base+0x4134>
   186f8:	mov	r6, r2
   186fc:	b	186ac <_start@@Base+0x4084>
   18700:	ldrb	r3, [r6, #1]
   18704:	cmp	r3, #32
   18708:	addhi	r6, r6, #1
   1870c:	bls	186c8 <_start@@Base+0x40a0>
   18710:	b	186dc <_start@@Base+0x40b4>
   18714:	mov	r4, r0
   18718:	ldr	r3, [sp, #20]
   1871c:	cmp	r3, #0
   18720:	bne	187b8 <_start@@Base+0x4190>
   18724:	ldrd	r2, [sp, #24]
   18728:	cmp	r3, #0
   1872c:	cmpeq	r2, #255	; 0xff
   18730:	uxtbls	r3, r2
   18734:	strls	r3, [sp, #12]
   18738:	bhi	187d8 <_start@@Base+0x41b0>
   1873c:	ldrb	r3, [fp]
   18740:	ldr	r2, [sp, #12]
   18744:	add	r3, r2, r3
   18748:	strb	r3, [fp]
   1874c:	ldr	r3, [sp, #16]
   18750:	cmp	r3, #0
   18754:	beq	187f0 <_start@@Base+0x41c8>
   18758:	mov	r6, r4
   1875c:	ldr	r5, [sp, #8]
   18760:	str	sl, [sp, #4]
   18764:	str	r9, [sp]
   18768:	ldr	r4, [r5]
   1876c:	add	r3, sp, #20
   18770:	mov	r2, r7
   18774:	mov	r1, r6
   18778:	mov	r0, r8
   1877c:	blx	r4
   18780:	cmp	r7, r0
   18784:	beq	187fc <_start@@Base+0x41d4>
   18788:	cmp	r6, r0
   1878c:	bne	18714 <_start@@Base+0x40ec>
   18790:	ldr	r3, [r5, #4]!
   18794:	cmp	r3, #0
   18798:	bne	18760 <_start@@Base+0x4138>
   1879c:	mov	r3, #23
   187a0:	mov	r2, r7
   187a4:	mov	r1, r6
   187a8:	mov	r0, r8
   187ac:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   187b0:	mov	r7, r0
   187b4:	b	187fc <_start@@Base+0x41d4>
   187b8:	mov	r3, #8
   187bc:	mov	r2, r7
   187c0:	mov	r1, r0
   187c4:	mov	r0, r8
   187c8:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   187cc:	cmp	r7, r0
   187d0:	bne	1873c <_start@@Base+0x4114>
   187d4:	b	187fc <_start@@Base+0x41d4>
   187d8:	mov	r3, #7
   187dc:	mov	r2, r7
   187e0:	mov	r1, r0
   187e4:	mov	r0, r8
   187e8:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   187ec:	b	187cc <_start@@Base+0x41a4>
   187f0:	mov	r7, r4
   187f4:	b	187fc <_start@@Base+0x41d4>
   187f8:	mov	r7, r6
   187fc:	mov	r0, r7
   18800:	add	sp, sp, #36	; 0x24
   18804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1880c:	sub	sp, sp, #36	; 0x24
   18810:	mov	r8, r0
   18814:	mov	r7, r2
   18818:	str	r3, [sp, #8]
   1881c:	ldr	fp, [sp, #72]	; 0x48
   18820:	mov	r3, #0
   18824:	str	r3, [fp]
   18828:	cmp	r1, r2
   1882c:	beq	18898 <_start@@Base+0x4270>
   18830:	ldrb	r3, [r1]
   18834:	cmp	r3, #34	; 0x22
   18838:	addeq	r6, r1, #1
   1883c:	beq	1884c <_start@@Base+0x4224>
   18840:	mov	r3, #5
   18844:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18848:	mov	r6, r0
   1884c:	sub	r3, r7, r6
   18850:	cmp	r3, #1
   18854:	ble	18868 <_start@@Base+0x4240>
   18858:	ldrb	r3, [r6]
   1885c:	cmp	r3, #32
   18860:	bhi	1887c <_start@@Base+0x4254>
   18864:	beq	188a0 <_start@@Base+0x4278>
   18868:	mov	r2, r7
   1886c:	mov	r1, r6
   18870:	mov	r0, r8
   18874:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   18878:	mov	r6, r0
   1887c:	cmp	r7, r6
   18880:	beq	1899c <_start@@Base+0x4374>
   18884:	mov	r3, #0
   18888:	str	r3, [sp, #12]
   1888c:	add	sl, sp, #16
   18890:	add	r9, sp, #24
   18894:	b	18900 <_start@@Base+0x42d8>
   18898:	mov	r6, r2
   1889c:	b	1884c <_start@@Base+0x4224>
   188a0:	ldrb	r3, [r6, #1]
   188a4:	cmp	r3, #32
   188a8:	addhi	r6, r6, #1
   188ac:	bls	18868 <_start@@Base+0x4240>
   188b0:	b	1887c <_start@@Base+0x4254>
   188b4:	mov	r4, r0
   188b8:	ldr	r3, [sp, #20]
   188bc:	cmp	r3, #0
   188c0:	bne	1895c <_start@@Base+0x4334>
   188c4:	ldrd	r2, [sp, #24]
   188c8:	mvn	r0, #0
   188cc:	mov	r1, #0
   188d0:	cmp	r3, r1
   188d4:	cmpeq	r2, r0
   188d8:	strls	r2, [sp, #12]
   188dc:	bhi	1897c <_start@@Base+0x4354>
   188e0:	ldr	r3, [fp]
   188e4:	ldr	r2, [sp, #12]
   188e8:	add	r3, r3, r2
   188ec:	str	r3, [fp]
   188f0:	ldr	r3, [sp, #16]
   188f4:	cmp	r3, #0
   188f8:	beq	18994 <_start@@Base+0x436c>
   188fc:	mov	r6, r4
   18900:	ldr	r5, [sp, #8]
   18904:	str	sl, [sp, #4]
   18908:	str	r9, [sp]
   1890c:	ldr	r4, [r5]
   18910:	add	r3, sp, #20
   18914:	mov	r2, r7
   18918:	mov	r1, r6
   1891c:	mov	r0, r8
   18920:	blx	r4
   18924:	cmp	r7, r0
   18928:	beq	189a0 <_start@@Base+0x4378>
   1892c:	cmp	r6, r0
   18930:	bne	188b4 <_start@@Base+0x428c>
   18934:	ldr	r3, [r5, #4]!
   18938:	cmp	r3, #0
   1893c:	bne	18904 <_start@@Base+0x42dc>
   18940:	mov	r3, #23
   18944:	mov	r2, r7
   18948:	mov	r1, r6
   1894c:	mov	r0, r8
   18950:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18954:	mov	r7, r0
   18958:	b	189a0 <_start@@Base+0x4378>
   1895c:	mov	r3, #8
   18960:	mov	r2, r7
   18964:	mov	r1, r0
   18968:	mov	r0, r8
   1896c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18970:	cmp	r7, r0
   18974:	bne	188e0 <_start@@Base+0x42b8>
   18978:	b	189a0 <_start@@Base+0x4378>
   1897c:	mov	r3, #7
   18980:	mov	r2, r7
   18984:	mov	r1, r4
   18988:	mov	r0, r8
   1898c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18990:	b	18970 <_start@@Base+0x4348>
   18994:	mov	r7, r4
   18998:	b	189a0 <_start@@Base+0x4378>
   1899c:	mov	r7, r6
   189a0:	mov	r0, r7
   189a4:	add	sp, sp, #36	; 0x24
   189a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189b0:	sub	sp, sp, #36	; 0x24
   189b4:	mov	r8, r0
   189b8:	mov	r7, r2
   189bc:	str	r3, [sp, #8]
   189c0:	ldr	fp, [sp, #72]	; 0x48
   189c4:	mov	r3, #0
   189c8:	strh	r3, [fp]
   189cc:	cmp	r1, r2
   189d0:	beq	18a3c <_start@@Base+0x4414>
   189d4:	ldrb	r3, [r1]
   189d8:	cmp	r3, #34	; 0x22
   189dc:	addeq	r6, r1, #1
   189e0:	beq	189f0 <_start@@Base+0x43c8>
   189e4:	mov	r3, #5
   189e8:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   189ec:	mov	r6, r0
   189f0:	sub	r3, r7, r6
   189f4:	cmp	r3, #1
   189f8:	ble	18a0c <_start@@Base+0x43e4>
   189fc:	ldrb	r3, [r6]
   18a00:	cmp	r3, #32
   18a04:	bhi	18a20 <_start@@Base+0x43f8>
   18a08:	beq	18a44 <_start@@Base+0x441c>
   18a0c:	mov	r2, r7
   18a10:	mov	r1, r6
   18a14:	mov	r0, r8
   18a18:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   18a1c:	mov	r6, r0
   18a20:	cmp	r7, r6
   18a24:	beq	18b44 <_start@@Base+0x451c>
   18a28:	mov	r3, #0
   18a2c:	str	r3, [sp, #12]
   18a30:	add	sl, sp, #16
   18a34:	add	r9, sp, #24
   18a38:	b	18aa8 <_start@@Base+0x4480>
   18a3c:	mov	r6, r2
   18a40:	b	189f0 <_start@@Base+0x43c8>
   18a44:	ldrb	r3, [r6, #1]
   18a48:	cmp	r3, #32
   18a4c:	addhi	r6, r6, #1
   18a50:	bls	18a0c <_start@@Base+0x43e4>
   18a54:	b	18a20 <_start@@Base+0x43f8>
   18a58:	mov	r4, r0
   18a5c:	ldr	r3, [sp, #20]
   18a60:	cmp	r3, #0
   18a64:	bne	18b04 <_start@@Base+0x44dc>
   18a68:	ldrd	r2, [sp, #24]
   18a6c:	ldr	r0, [pc, #224]	; 18b54 <_start@@Base+0x452c>
   18a70:	mov	r1, #0
   18a74:	cmp	r3, r1
   18a78:	cmpeq	r2, r0
   18a7c:	uxthls	r3, r2
   18a80:	strls	r3, [sp, #12]
   18a84:	bhi	18b24 <_start@@Base+0x44fc>
   18a88:	ldrh	r3, [fp]
   18a8c:	ldr	r2, [sp, #12]
   18a90:	add	r3, r2, r3
   18a94:	strh	r3, [fp]
   18a98:	ldr	r3, [sp, #16]
   18a9c:	cmp	r3, #0
   18aa0:	beq	18b3c <_start@@Base+0x4514>
   18aa4:	mov	r6, r4
   18aa8:	ldr	r5, [sp, #8]
   18aac:	str	sl, [sp, #4]
   18ab0:	str	r9, [sp]
   18ab4:	ldr	r4, [r5]
   18ab8:	add	r3, sp, #20
   18abc:	mov	r2, r7
   18ac0:	mov	r1, r6
   18ac4:	mov	r0, r8
   18ac8:	blx	r4
   18acc:	cmp	r7, r0
   18ad0:	beq	18b48 <_start@@Base+0x4520>
   18ad4:	cmp	r6, r0
   18ad8:	bne	18a58 <_start@@Base+0x4430>
   18adc:	ldr	r3, [r5, #4]!
   18ae0:	cmp	r3, #0
   18ae4:	bne	18aac <_start@@Base+0x4484>
   18ae8:	mov	r3, #23
   18aec:	mov	r2, r7
   18af0:	mov	r1, r6
   18af4:	mov	r0, r8
   18af8:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18afc:	mov	r7, r0
   18b00:	b	18b48 <_start@@Base+0x4520>
   18b04:	mov	r3, #8
   18b08:	mov	r2, r7
   18b0c:	mov	r1, r0
   18b10:	mov	r0, r8
   18b14:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18b18:	cmp	r7, r0
   18b1c:	bne	18a88 <_start@@Base+0x4460>
   18b20:	b	18b48 <_start@@Base+0x4520>
   18b24:	mov	r3, #7
   18b28:	mov	r2, r7
   18b2c:	mov	r1, r4
   18b30:	mov	r0, r8
   18b34:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18b38:	b	18b18 <_start@@Base+0x44f0>
   18b3c:	mov	r7, r4
   18b40:	b	18b48 <_start@@Base+0x4520>
   18b44:	mov	r7, r6
   18b48:	mov	r0, r7
   18b4c:	add	sp, sp, #36	; 0x24
   18b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b54:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   18b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b5c:	sub	sp, sp, #36	; 0x24
   18b60:	mov	r8, r0
   18b64:	mov	r7, r2
   18b68:	str	r3, [sp, #12]
   18b6c:	ldr	fp, [sp, #72]	; 0x48
   18b70:	mov	r3, #0
   18b74:	str	r3, [fp]
   18b78:	cmp	r1, r2
   18b7c:	beq	18be8 <_start@@Base+0x45c0>
   18b80:	ldrb	r3, [r1]
   18b84:	cmp	r3, #34	; 0x22
   18b88:	addeq	r6, r1, #1
   18b8c:	beq	18b9c <_start@@Base+0x4574>
   18b90:	mov	r3, #5
   18b94:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18b98:	mov	r6, r0
   18b9c:	sub	r3, r7, r6
   18ba0:	cmp	r3, #1
   18ba4:	ble	18bb8 <_start@@Base+0x4590>
   18ba8:	ldrb	r3, [r6]
   18bac:	cmp	r3, #32
   18bb0:	bhi	18bcc <_start@@Base+0x45a4>
   18bb4:	beq	18bf0 <_start@@Base+0x45c8>
   18bb8:	mov	r2, r7
   18bbc:	mov	r1, r6
   18bc0:	mov	r0, r8
   18bc4:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   18bc8:	mov	r6, r0
   18bcc:	cmp	r7, r6
   18bd0:	beq	18d00 <_start@@Base+0x46d8>
   18bd4:	mov	r3, #0
   18bd8:	str	r3, [sp, #8]
   18bdc:	add	sl, sp, #16
   18be0:	add	r9, sp, #24
   18be4:	b	18c84 <_start@@Base+0x465c>
   18be8:	mov	r6, r2
   18bec:	b	18b9c <_start@@Base+0x4574>
   18bf0:	ldrb	r3, [r6, #1]
   18bf4:	cmp	r3, #32
   18bf8:	addhi	r6, r6, #1
   18bfc:	bls	18bb8 <_start@@Base+0x4590>
   18c00:	b	18bcc <_start@@Base+0x45a4>
   18c04:	mov	r4, r0
   18c08:	ldrd	r2, [sp, #24]
   18c0c:	ldr	r1, [sp, #20]
   18c10:	cmp	r1, #0
   18c14:	beq	18c4c <_start@@Base+0x4624>
   18c18:	cmp	r3, #0
   18c1c:	cmpeq	r2, #-2147483648	; 0x80000000
   18c20:	rsbls	r3, r2, #0
   18c24:	strls	r3, [sp, #8]
   18c28:	bls	18c64 <_start@@Base+0x463c>
   18c2c:	mov	r3, #8
   18c30:	mov	r2, r7
   18c34:	mov	r1, r0
   18c38:	mov	r0, r8
   18c3c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18c40:	cmp	r7, r0
   18c44:	bne	18c64 <_start@@Base+0x463c>
   18c48:	b	18d04 <_start@@Base+0x46dc>
   18c4c:	mvn	r0, #-2147483648	; 0x80000000
   18c50:	mov	r1, #0
   18c54:	cmp	r3, r1
   18c58:	cmpeq	r2, r0
   18c5c:	strls	r2, [sp, #8]
   18c60:	bhi	18ce0 <_start@@Base+0x46b8>
   18c64:	ldr	r3, [fp]
   18c68:	ldr	r2, [sp, #8]
   18c6c:	add	r3, r3, r2
   18c70:	str	r3, [fp]
   18c74:	ldr	r3, [sp, #16]
   18c78:	cmp	r3, #0
   18c7c:	beq	18cf8 <_start@@Base+0x46d0>
   18c80:	mov	r6, r4
   18c84:	ldr	r5, [sp, #12]
   18c88:	str	sl, [sp, #4]
   18c8c:	str	r9, [sp]
   18c90:	ldr	r4, [r5]
   18c94:	add	r3, sp, #20
   18c98:	mov	r2, r7
   18c9c:	mov	r1, r6
   18ca0:	mov	r0, r8
   18ca4:	blx	r4
   18ca8:	cmp	r7, r0
   18cac:	beq	18d04 <_start@@Base+0x46dc>
   18cb0:	cmp	r6, r0
   18cb4:	bne	18c04 <_start@@Base+0x45dc>
   18cb8:	ldr	r3, [r5, #4]!
   18cbc:	cmp	r3, #0
   18cc0:	bne	18c88 <_start@@Base+0x4660>
   18cc4:	mov	r3, #23
   18cc8:	mov	r2, r7
   18ccc:	mov	r1, r6
   18cd0:	mov	r0, r8
   18cd4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18cd8:	mov	r7, r0
   18cdc:	b	18d04 <_start@@Base+0x46dc>
   18ce0:	mov	r3, #7
   18ce4:	mov	r2, r7
   18ce8:	mov	r1, r4
   18cec:	mov	r0, r8
   18cf0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18cf4:	b	18c40 <_start@@Base+0x4618>
   18cf8:	mov	r7, r4
   18cfc:	b	18d04 <_start@@Base+0x46dc>
   18d00:	mov	r7, r6
   18d04:	mov	r0, r7
   18d08:	add	sp, sp, #36	; 0x24
   18d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d14:	sub	sp, sp, #36	; 0x24
   18d18:	mov	r8, r0
   18d1c:	mov	r7, r2
   18d20:	str	r3, [sp, #12]
   18d24:	mov	r3, #0
   18d28:	ldr	r2, [sp, #72]	; 0x48
   18d2c:	strh	r3, [r2]
   18d30:	cmp	r1, r7
   18d34:	beq	18da0 <_start@@Base+0x4778>
   18d38:	ldrb	r3, [r1]
   18d3c:	cmp	r3, #34	; 0x22
   18d40:	addeq	r6, r1, #1
   18d44:	beq	18d58 <_start@@Base+0x4730>
   18d48:	mov	r3, #5
   18d4c:	mov	r2, r7
   18d50:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18d54:	mov	r6, r0
   18d58:	sub	r3, r7, r6
   18d5c:	cmp	r3, #1
   18d60:	ble	18d74 <_start@@Base+0x474c>
   18d64:	ldrb	r3, [r6]
   18d68:	cmp	r3, #32
   18d6c:	bhi	18d88 <_start@@Base+0x4760>
   18d70:	beq	18da8 <_start@@Base+0x4780>
   18d74:	mov	r2, r7
   18d78:	mov	r1, r6
   18d7c:	mov	r0, r8
   18d80:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   18d84:	mov	r6, r0
   18d88:	cmp	r7, r6
   18d8c:	beq	18ebc <_start@@Base+0x4894>
   18d90:	mov	fp, #0
   18d94:	add	sl, sp, #16
   18d98:	add	r9, sp, #24
   18d9c:	b	18e40 <_start@@Base+0x4818>
   18da0:	mov	r6, r7
   18da4:	b	18d58 <_start@@Base+0x4730>
   18da8:	ldrb	r3, [r6, #1]
   18dac:	cmp	r3, #32
   18db0:	addhi	r6, r6, #1
   18db4:	bls	18d74 <_start@@Base+0x474c>
   18db8:	b	18d88 <_start@@Base+0x4760>
   18dbc:	mov	r4, r0
   18dc0:	ldrd	r2, [sp, #24]
   18dc4:	ldr	r1, [sp, #20]
   18dc8:	cmp	r1, #0
   18dcc:	beq	18e04 <_start@@Base+0x47dc>
   18dd0:	cmp	r3, #0
   18dd4:	cmpeq	r2, #32768	; 0x8000
   18dd8:	rsbls	fp, r2, #0
   18ddc:	sxthls	fp, fp
   18de0:	bls	18e1c <_start@@Base+0x47f4>
   18de4:	mov	r3, #8
   18de8:	mov	r2, r7
   18dec:	mov	r1, r0
   18df0:	mov	r0, r8
   18df4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18df8:	cmp	r7, r0
   18dfc:	bne	18e1c <_start@@Base+0x47f4>
   18e00:	b	18ec0 <_start@@Base+0x4898>
   18e04:	ldr	r0, [pc, #192]	; 18ecc <_start@@Base+0x48a4>
   18e08:	mov	r1, #0
   18e0c:	cmp	r3, r1
   18e10:	cmpeq	r2, r0
   18e14:	sxthls	fp, r2
   18e18:	bhi	18e9c <_start@@Base+0x4874>
   18e1c:	ldr	r3, [sp, #72]	; 0x48
   18e20:	ldrh	r3, [r3]
   18e24:	add	r3, r3, fp
   18e28:	ldr	r2, [sp, #72]	; 0x48
   18e2c:	strh	r3, [r2]
   18e30:	ldr	r3, [sp, #16]
   18e34:	cmp	r3, #0
   18e38:	beq	18eb4 <_start@@Base+0x488c>
   18e3c:	mov	r6, r4
   18e40:	ldr	r5, [sp, #12]
   18e44:	str	sl, [sp, #4]
   18e48:	str	r9, [sp]
   18e4c:	ldr	r4, [r5]
   18e50:	add	r3, sp, #20
   18e54:	mov	r2, r7
   18e58:	mov	r1, r6
   18e5c:	mov	r0, r8
   18e60:	blx	r4
   18e64:	cmp	r7, r0
   18e68:	beq	18ec0 <_start@@Base+0x4898>
   18e6c:	cmp	r6, r0
   18e70:	bne	18dbc <_start@@Base+0x4794>
   18e74:	ldr	r3, [r5, #4]!
   18e78:	cmp	r3, #0
   18e7c:	bne	18e44 <_start@@Base+0x481c>
   18e80:	mov	r3, #23
   18e84:	mov	r2, r7
   18e88:	mov	r1, r6
   18e8c:	mov	r0, r8
   18e90:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18e94:	mov	r7, r0
   18e98:	b	18ec0 <_start@@Base+0x4898>
   18e9c:	mov	r3, #7
   18ea0:	mov	r2, r7
   18ea4:	mov	r1, r4
   18ea8:	mov	r0, r8
   18eac:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18eb0:	b	18df8 <_start@@Base+0x47d0>
   18eb4:	mov	r7, r4
   18eb8:	b	18ec0 <_start@@Base+0x4898>
   18ebc:	mov	r7, r6
   18ec0:	mov	r0, r7
   18ec4:	add	sp, sp, #36	; 0x24
   18ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ecc:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   18ed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ed4:	sub	sp, sp, #36	; 0x24
   18ed8:	mov	r8, r0
   18edc:	mov	r7, r2
   18ee0:	str	r3, [sp, #12]
   18ee4:	mov	r3, #0
   18ee8:	ldr	r2, [sp, #72]	; 0x48
   18eec:	strb	r3, [r2]
   18ef0:	cmp	r1, r7
   18ef4:	beq	18f60 <_start@@Base+0x4938>
   18ef8:	ldrb	r3, [r1]
   18efc:	cmp	r3, #34	; 0x22
   18f00:	addeq	r6, r1, #1
   18f04:	beq	18f18 <_start@@Base+0x48f0>
   18f08:	mov	r3, #5
   18f0c:	mov	r2, r7
   18f10:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18f14:	mov	r6, r0
   18f18:	sub	r3, r7, r6
   18f1c:	cmp	r3, #1
   18f20:	ble	18f34 <_start@@Base+0x490c>
   18f24:	ldrb	r3, [r6]
   18f28:	cmp	r3, #32
   18f2c:	bhi	18f48 <_start@@Base+0x4920>
   18f30:	beq	18f68 <_start@@Base+0x4940>
   18f34:	mov	r2, r7
   18f38:	mov	r1, r6
   18f3c:	mov	r0, r8
   18f40:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   18f44:	mov	r6, r0
   18f48:	cmp	r7, r6
   18f4c:	beq	19074 <_start@@Base+0x4a4c>
   18f50:	mov	fp, #0
   18f54:	add	sl, sp, #16
   18f58:	add	r9, sp, #24
   18f5c:	b	18ff8 <_start@@Base+0x49d0>
   18f60:	mov	r6, r7
   18f64:	b	18f18 <_start@@Base+0x48f0>
   18f68:	ldrb	r3, [r6, #1]
   18f6c:	cmp	r3, #32
   18f70:	addhi	r6, r6, #1
   18f74:	bls	18f34 <_start@@Base+0x490c>
   18f78:	b	18f48 <_start@@Base+0x4920>
   18f7c:	mov	r4, r0
   18f80:	ldrd	r2, [sp, #24]
   18f84:	ldr	r1, [sp, #20]
   18f88:	cmp	r1, #0
   18f8c:	beq	18fc4 <_start@@Base+0x499c>
   18f90:	cmp	r3, #0
   18f94:	cmpeq	r2, #128	; 0x80
   18f98:	rsbls	fp, r2, #0
   18f9c:	sxtbls	fp, fp
   18fa0:	bls	18fd4 <_start@@Base+0x49ac>
   18fa4:	mov	r3, #8
   18fa8:	mov	r2, r7
   18fac:	mov	r1, r0
   18fb0:	mov	r0, r8
   18fb4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   18fb8:	cmp	r7, r0
   18fbc:	bne	18fd4 <_start@@Base+0x49ac>
   18fc0:	b	19078 <_start@@Base+0x4a50>
   18fc4:	cmp	r3, #0
   18fc8:	cmpeq	r2, #127	; 0x7f
   18fcc:	sxtbls	fp, r2
   18fd0:	bhi	19054 <_start@@Base+0x4a2c>
   18fd4:	ldr	r3, [sp, #72]	; 0x48
   18fd8:	ldrb	r3, [r3]
   18fdc:	add	r3, r3, fp
   18fe0:	ldr	r2, [sp, #72]	; 0x48
   18fe4:	strb	r3, [r2]
   18fe8:	ldr	r3, [sp, #16]
   18fec:	cmp	r3, #0
   18ff0:	beq	1906c <_start@@Base+0x4a44>
   18ff4:	mov	r6, r4
   18ff8:	ldr	r5, [sp, #12]
   18ffc:	str	sl, [sp, #4]
   19000:	str	r9, [sp]
   19004:	ldr	r4, [r5]
   19008:	add	r3, sp, #20
   1900c:	mov	r2, r7
   19010:	mov	r1, r6
   19014:	mov	r0, r8
   19018:	blx	r4
   1901c:	cmp	r7, r0
   19020:	beq	19078 <_start@@Base+0x4a50>
   19024:	cmp	r6, r0
   19028:	bne	18f7c <_start@@Base+0x4954>
   1902c:	ldr	r3, [r5, #4]!
   19030:	cmp	r3, #0
   19034:	bne	18ffc <_start@@Base+0x49d4>
   19038:	mov	r3, #23
   1903c:	mov	r2, r7
   19040:	mov	r1, r6
   19044:	mov	r0, r8
   19048:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1904c:	mov	r7, r0
   19050:	b	19078 <_start@@Base+0x4a50>
   19054:	mov	r3, #7
   19058:	mov	r2, r7
   1905c:	mov	r1, r0
   19060:	mov	r0, r8
   19064:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   19068:	b	18fb8 <_start@@Base+0x4990>
   1906c:	mov	r7, r4
   19070:	b	19078 <_start@@Base+0x4a50>
   19074:	mov	r7, r6
   19078:	mov	r0, r7
   1907c:	add	sp, sp, #36	; 0x24
   19080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19088:	sub	sp, sp, #44	; 0x2c
   1908c:	mov	r8, r0
   19090:	mov	r7, r2
   19094:	str	r3, [sp, #20]
   19098:	ldr	fp, [sp, #80]	; 0x50
   1909c:	mov	r2, #0
   190a0:	mov	r3, #0
   190a4:	strd	r2, [fp]
   190a8:	cmp	r1, r7
   190ac:	beq	19120 <_start@@Base+0x4af8>
   190b0:	ldrb	r3, [r1]
   190b4:	cmp	r3, #34	; 0x22
   190b8:	addeq	r6, r1, #1
   190bc:	beq	190d0 <_start@@Base+0x4aa8>
   190c0:	mov	r3, #5
   190c4:	mov	r2, r7
   190c8:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   190cc:	mov	r6, r0
   190d0:	sub	r3, r7, r6
   190d4:	cmp	r3, #1
   190d8:	ble	190ec <_start@@Base+0x4ac4>
   190dc:	ldrb	r3, [r6]
   190e0:	cmp	r3, #32
   190e4:	bhi	19100 <_start@@Base+0x4ad8>
   190e8:	beq	19128 <_start@@Base+0x4b00>
   190ec:	mov	r2, r7
   190f0:	mov	r1, r6
   190f4:	mov	r0, r8
   190f8:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   190fc:	mov	r6, r0
   19100:	cmp	r7, r6
   19104:	beq	19244 <_start@@Base+0x4c1c>
   19108:	mov	r2, #0
   1910c:	mov	r3, #0
   19110:	strd	r2, [sp, #8]
   19114:	add	sl, sp, #24
   19118:	add	r9, sp, #32
   1911c:	b	191c8 <_start@@Base+0x4ba0>
   19120:	mov	r6, r7
   19124:	b	190d0 <_start@@Base+0x4aa8>
   19128:	ldrb	r3, [r6, #1]
   1912c:	cmp	r3, #32
   19130:	addhi	r6, r6, #1
   19134:	bls	190ec <_start@@Base+0x4ac4>
   19138:	b	19100 <_start@@Base+0x4ad8>
   1913c:	mov	r4, r0
   19140:	ldrd	r2, [sp, #32]
   19144:	ldr	r1, [sp, #28]
   19148:	cmp	r1, #0
   1914c:	beq	1918c <_start@@Base+0x4b64>
   19150:	cmp	r3, #-2147483648	; 0x80000000
   19154:	cmpeq	r2, #0
   19158:	bhi	1916c <_start@@Base+0x4b44>
   1915c:	rsbs	r2, r2, #0
   19160:	rsc	r3, r3, #0
   19164:	strd	r2, [sp, #8]
   19168:	b	1919c <_start@@Base+0x4b74>
   1916c:	mov	r3, #8
   19170:	mov	r2, r7
   19174:	mov	r1, r0
   19178:	mov	r0, r8
   1917c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   19180:	cmp	r7, r0
   19184:	bne	1919c <_start@@Base+0x4b74>
   19188:	b	19248 <_start@@Base+0x4c20>
   1918c:	cmp	r2, #0
   19190:	sbcs	r1, r3, #0
   19194:	blt	19224 <_start@@Base+0x4bfc>
   19198:	strd	r2, [sp, #8]
   1919c:	ldrd	r2, [fp]
   191a0:	ldrd	r0, [sp, #8]
   191a4:	adds	r0, r0, r2
   191a8:	adc	r1, r1, r3
   191ac:	mov	r2, r0
   191b0:	mov	r3, r1
   191b4:	strd	r2, [fp]
   191b8:	ldr	r3, [sp, #24]
   191bc:	cmp	r3, #0
   191c0:	beq	1923c <_start@@Base+0x4c14>
   191c4:	mov	r6, r4
   191c8:	ldr	r5, [sp, #20]
   191cc:	str	sl, [sp, #4]
   191d0:	str	r9, [sp]
   191d4:	ldr	r4, [r5]
   191d8:	add	r3, sp, #28
   191dc:	mov	r2, r7
   191e0:	mov	r1, r6
   191e4:	mov	r0, r8
   191e8:	blx	r4
   191ec:	cmp	r7, r0
   191f0:	beq	19248 <_start@@Base+0x4c20>
   191f4:	cmp	r6, r0
   191f8:	bne	1913c <_start@@Base+0x4b14>
   191fc:	ldr	r3, [r5, #4]!
   19200:	cmp	r3, #0
   19204:	bne	191cc <_start@@Base+0x4ba4>
   19208:	mov	r3, #23
   1920c:	mov	r2, r7
   19210:	mov	r1, r6
   19214:	mov	r0, r8
   19218:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1921c:	mov	r7, r0
   19220:	b	19248 <_start@@Base+0x4c20>
   19224:	mov	r3, #7
   19228:	mov	r2, r7
   1922c:	mov	r1, r0
   19230:	mov	r0, r8
   19234:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   19238:	b	19180 <_start@@Base+0x4b58>
   1923c:	mov	r7, r4
   19240:	b	19248 <_start@@Base+0x4c20>
   19244:	mov	r7, r6
   19248:	mov	r0, r7
   1924c:	add	sp, sp, #44	; 0x2c
   19250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19254:	push	{r4, r5, r6, r7, r8, lr}
   19258:	sub	sp, sp, #24
   1925c:	mov	r8, r0
   19260:	mov	r4, r1
   19264:	mov	r5, r2
   19268:	mov	r7, r3
   1926c:	sub	r6, r2, r1
   19270:	cmp	r6, #3
   19274:	ble	19290 <_start@@Base+0x4c68>
   19278:	mov	r2, #4
   1927c:	ldr	r1, [pc, #264]	; 1938c <_start@@Base+0x4d64>
   19280:	mov	r0, r4
   19284:	bl	14558 <memcmp@plt>
   19288:	cmp	r0, #0
   1928c:	beq	19328 <_start@@Base+0x4d00>
   19290:	cmp	r6, #4
   19294:	ble	192b0 <_start@@Base+0x4c88>
   19298:	mov	r2, #5
   1929c:	ldr	r1, [pc, #236]	; 19390 <_start@@Base+0x4d68>
   192a0:	mov	r0, r4
   192a4:	bl	14558 <memcmp@plt>
   192a8:	cmp	r0, #0
   192ac:	beq	19338 <_start@@Base+0x4d10>
   192b0:	mov	r2, #0
   192b4:	mov	r3, #0
   192b8:	strd	r2, [sp, #16]
   192bc:	mov	r3, #0
   192c0:	str	r3, [sp, #12]
   192c4:	cmp	r4, r5
   192c8:	beq	19380 <_start@@Base+0x4d58>
   192cc:	add	r3, sp, #16
   192d0:	str	r3, [sp]
   192d4:	add	r3, sp, #12
   192d8:	mov	r2, r5
   192dc:	mov	r1, r4
   192e0:	mov	r0, r8
   192e4:	bl	2d678 <flatcc_json_parser_integer@@Base>
   192e8:	cmp	r4, r0
   192ec:	moveq	r2, #0
   192f0:	beq	19314 <_start@@Base+0x4cec>
   192f4:	ldr	r3, [sp, #12]
   192f8:	cmp	r3, #0
   192fc:	bne	19348 <_start@@Base+0x4d20>
   19300:	ldrd	r2, [sp, #16]
   19304:	cmp	r3, #0
   19308:	cmpeq	r2, #255	; 0xff
   1930c:	uxtbls	r2, r2
   19310:	bhi	19364 <_start@@Base+0x4d3c>
   19314:	adds	r2, r2, #0
   19318:	movne	r2, #1
   1931c:	strb	r2, [r7]
   19320:	add	sp, sp, #24
   19324:	pop	{r4, r5, r6, r7, r8, pc}
   19328:	mov	r3, #1
   1932c:	strb	r3, [r7]
   19330:	add	r0, r4, #4
   19334:	b	19320 <_start@@Base+0x4cf8>
   19338:	mov	r3, #0
   1933c:	strb	r3, [r7]
   19340:	add	r0, r4, #5
   19344:	b	19320 <_start@@Base+0x4cf8>
   19348:	mov	r3, #8
   1934c:	mov	r2, r5
   19350:	mov	r1, r0
   19354:	mov	r0, r8
   19358:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1935c:	mov	r2, #0
   19360:	b	19314 <_start@@Base+0x4cec>
   19364:	mov	r3, #7
   19368:	mov	r2, r5
   1936c:	mov	r1, r0
   19370:	mov	r0, r8
   19374:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   19378:	mov	r2, #0
   1937c:	b	19314 <_start@@Base+0x4cec>
   19380:	mov	r0, r5
   19384:	mov	r2, #0
   19388:	b	19314 <_start@@Base+0x4cec>
   1938c:	andeq	sp, r3, r0, lsr r5
   19390:	andeq	sp, r3, r8, lsr r5
   19394:	push	{r4, r5, r6, lr}
   19398:	mov	r6, r0
   1939c:	mov	r4, r2
   193a0:	mov	r5, r3
   193a4:	cmp	r1, r2
   193a8:	beq	193b8 <_start@@Base+0x4d90>
   193ac:	ldrb	r3, [r1]
   193b0:	cmp	r3, #123	; 0x7b
   193b4:	beq	193d4 <_start@@Base+0x4dac>
   193b8:	mov	r3, #0
   193bc:	str	r3, [r5]
   193c0:	mov	r3, #21
   193c4:	mov	r2, r4
   193c8:	mov	r0, r6
   193cc:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   193d0:	pop	{r4, r5, r6, pc}
   193d4:	add	r0, r1, #1
   193d8:	sub	r3, r2, r0
   193dc:	cmp	r3, #1
   193e0:	ble	193f4 <_start@@Base+0x4dcc>
   193e4:	ldrb	r3, [r1, #1]
   193e8:	cmp	r3, #32
   193ec:	bhi	19404 <_start@@Base+0x4ddc>
   193f0:	beq	19424 <_start@@Base+0x4dfc>
   193f4:	mov	r2, r4
   193f8:	mov	r1, r0
   193fc:	mov	r0, r6
   19400:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   19404:	cmp	r4, r0
   19408:	beq	19418 <_start@@Base+0x4df0>
   1940c:	ldrb	r3, [r0]
   19410:	cmp	r3, #125	; 0x7d
   19414:	beq	19438 <_start@@Base+0x4e10>
   19418:	mov	r3, #1
   1941c:	str	r3, [r5]
   19420:	pop	{r4, r5, r6, pc}
   19424:	ldrb	r3, [r1, #2]
   19428:	cmp	r3, #32
   1942c:	addhi	r0, r1, #2
   19430:	bls	193f4 <_start@@Base+0x4dcc>
   19434:	b	19404 <_start@@Base+0x4ddc>
   19438:	mov	r3, #0
   1943c:	str	r3, [r5]
   19440:	mov	r2, r4
   19444:	add	r1, r0, #1
   19448:	mov	r0, r6
   1944c:	bl	17d9c <_start@@Base+0x3774>
   19450:	pop	{r4, r5, r6, pc}
   19454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19458:	sub	sp, sp, #44	; 0x2c
   1945c:	mov	r8, r0
   19460:	mov	r4, r1
   19464:	mov	r5, r2
   19468:	mov	r9, r3
   1946c:	mov	r3, #0
   19470:	str	r3, [r9]
   19474:	mov	r1, #10
   19478:	ldr	r0, [r0]
   1947c:	bl	27424 <flatcc_builder_start_table@@Base>
   19480:	cmp	r0, #0
   19484:	bne	19ce4 <_start@@Base+0x56bc>
   19488:	add	r3, sp, #32
   1948c:	str	r3, [sp]
   19490:	mov	r3, #5
   19494:	mov	r2, r5
   19498:	mov	r1, r4
   1949c:	mov	r0, r8
   194a0:	bl	2eca4 <flatcc_json_parser_prepare_unions@@Base>
   194a4:	cmp	r5, r0
   194a8:	beq	19ce4 <_start@@Base+0x56bc>
   194ac:	add	r3, sp, #36	; 0x24
   194b0:	mov	r2, r5
   194b4:	mov	r1, r4
   194b8:	mov	r0, r8
   194bc:	bl	19394 <_start@@Base+0x4d6c>
   194c0:	mov	r4, r0
   194c4:	ldr	r3, [sp, #36]	; 0x24
   194c8:	cmp	r3, #0
   194cc:	beq	19cd8 <_start@@Base+0x56b0>
   194d0:	add	fp, pc, #976	; 0x3d0
   194d4:	ldrd	sl, [fp]
   194d8:	ldr	r3, [pc, #1052]	; 198fc <_start@@Base+0x52d4>
   194dc:	add	r3, r3, #64	; 0x40
   194e0:	str	r3, [sp, #28]
   194e4:	b	197a4 <_start@@Base+0x517c>
   194e8:	add	r4, r4, #8
   194ec:	mov	r1, r5
   194f0:	mov	r0, r4
   194f4:	bl	14750 <_start@@Base+0x128>
   194f8:	bic	r6, r0, #255	; 0xff
   194fc:	add	r3, pc, #940	; 0x3ac
   19500:	ldrd	r2, [r3]
   19504:	cmp	r1, r3
   19508:	cmpeq	r6, r2
   1950c:	beq	1954c <_start@@Base+0x4f24>
   19510:	mov	r2, #0
   19514:	ldr	r3, [pc, #972]	; 198e8 <_start@@Base+0x52c0>
   19518:	and	r0, r0, r2
   1951c:	and	r1, r1, r3
   19520:	mov	r2, #0
   19524:	ldr	r3, [pc, #960]	; 198ec <_start@@Base+0x52c4>
   19528:	cmp	r1, r3
   1952c:	cmpeq	r0, r2
   19530:	beq	195bc <_start@@Base+0x4f94>
   19534:	mov	r2, r5
   19538:	mov	r1, r4
   1953c:	mov	r0, r8
   19540:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   19544:	mov	r1, r0
   19548:	b	19784 <_start@@Base+0x515c>
   1954c:	mov	r3, #7
   19550:	mov	r2, r5
   19554:	mov	r1, r4
   19558:	mov	r0, r8
   1955c:	bl	17de0 <_start@@Base+0x37b8>
   19560:	cmp	r4, r0
   19564:	beq	195a4 <_start@@Base+0x4f7c>
   19568:	ldr	r3, [pc, #912]	; 19900 <_start@@Base+0x52d8>
   1956c:	str	r3, [sp, #12]
   19570:	ldr	r3, [pc, #900]	; 198fc <_start@@Base+0x52d4>
   19574:	str	r3, [sp, #8]
   19578:	ldr	r3, [sp, #32]
   1957c:	str	r3, [sp, #4]
   19580:	mov	r3, #3
   19584:	str	r3, [sp]
   19588:	mov	r3, #1
   1958c:	mov	r2, r5
   19590:	mov	r1, r0
   19594:	mov	r0, r8
   19598:	bl	2eebc <flatcc_json_parser_union_type@@Base>
   1959c:	mov	r1, r0
   195a0:	b	19784 <_start@@Base+0x515c>
   195a4:	mov	r2, r5
   195a8:	mov	r1, r0
   195ac:	mov	r0, r8
   195b0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   195b4:	mov	r1, r0
   195b8:	b	19784 <_start@@Base+0x515c>
   195bc:	mov	r3, #2
   195c0:	mov	r2, r5
   195c4:	mov	r1, r4
   195c8:	mov	r0, r8
   195cc:	bl	17de0 <_start@@Base+0x37b8>
   195d0:	mov	r1, r0
   195d4:	cmp	r4, r0
   195d8:	beq	1960c <_start@@Base+0x4fe4>
   195dc:	ldr	r3, [pc, #796]	; 19900 <_start@@Base+0x52d8>
   195e0:	str	r3, [sp, #8]
   195e4:	ldr	r3, [sp, #32]
   195e8:	str	r3, [sp, #4]
   195ec:	mov	r3, #3
   195f0:	str	r3, [sp]
   195f4:	mov	r3, #1
   195f8:	mov	r2, r5
   195fc:	mov	r0, r8
   19600:	bl	2ed68 <flatcc_json_parser_union@@Base>
   19604:	mov	r1, r0
   19608:	b	19784 <_start@@Base+0x515c>
   1960c:	mov	r2, r5
   19610:	mov	r0, r8
   19614:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   19618:	mov	r1, r0
   1961c:	b	19784 <_start@@Base+0x515c>
   19620:	add	r4, r4, #8
   19624:	mov	r1, r5
   19628:	mov	r0, r4
   1962c:	bl	14750 <_start@@Base+0x128>
   19630:	mov	r2, #0
   19634:	ldr	r3, [pc, #684]	; 198e8 <_start@@Base+0x52c0>
   19638:	and	r0, r0, r2
   1963c:	and	r1, r1, r3
   19640:	mov	r2, #0
   19644:	ldr	r3, [pc, #676]	; 198f0 <_start@@Base+0x52c8>
   19648:	cmp	r1, r3
   1964c:	cmpeq	r0, r2
   19650:	beq	1966c <_start@@Base+0x5044>
   19654:	mov	r2, r5
   19658:	mov	r1, r4
   1965c:	mov	r0, r8
   19660:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   19664:	mov	r1, r0
   19668:	b	19784 <_start@@Base+0x515c>
   1966c:	mov	r3, #2
   19670:	mov	r2, r5
   19674:	mov	r1, r4
   19678:	mov	r0, r8
   1967c:	bl	17de0 <_start@@Base+0x37b8>
   19680:	cmp	r4, r0
   19684:	beq	196c8 <_start@@Base+0x50a0>
   19688:	ldr	r3, [pc, #624]	; 19900 <_start@@Base+0x52d8>
   1968c:	str	r3, [sp, #12]
   19690:	ldr	r3, [pc, #612]	; 198fc <_start@@Base+0x52d4>
   19694:	add	r3, r3, #16
   19698:	str	r3, [sp, #8]
   1969c:	ldr	r3, [sp, #32]
   196a0:	str	r3, [sp, #4]
   196a4:	mov	r3, #7
   196a8:	str	r3, [sp]
   196ac:	mov	r3, #3
   196b0:	mov	r2, r5
   196b4:	mov	r1, r0
   196b8:	mov	r0, r8
   196bc:	bl	2eebc <flatcc_json_parser_union_type@@Base>
   196c0:	mov	r1, r0
   196c4:	b	19784 <_start@@Base+0x515c>
   196c8:	mov	r2, r5
   196cc:	mov	r1, r0
   196d0:	mov	r0, r8
   196d4:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   196d8:	mov	r1, r0
   196dc:	b	19784 <_start@@Base+0x515c>
   196e0:	mov	r3, #5
   196e4:	mov	r2, r5
   196e8:	mov	r1, r4
   196ec:	mov	r0, r8
   196f0:	bl	17de0 <_start@@Base+0x37b8>
   196f4:	cmp	r4, r0
   196f8:	beq	19730 <_start@@Base+0x5108>
   196fc:	ldr	r3, [pc, #508]	; 19900 <_start@@Base+0x52d8>
   19700:	str	r3, [sp, #8]
   19704:	ldr	r3, [sp, #32]
   19708:	str	r3, [sp, #4]
   1970c:	mov	r3, #7
   19710:	str	r3, [sp]
   19714:	mov	r3, #3
   19718:	mov	r2, r5
   1971c:	mov	r1, r0
   19720:	mov	r0, r8
   19724:	bl	2ed68 <flatcc_json_parser_union@@Base>
   19728:	mov	r1, r0
   1972c:	b	19784 <_start@@Base+0x515c>
   19730:	mov	r2, r5
   19734:	mov	r1, r0
   19738:	mov	r0, r8
   1973c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   19740:	mov	r1, r0
   19744:	b	19784 <_start@@Base+0x515c>
   19748:	add	r3, pc, #360	; 0x168
   1974c:	ldrd	r2, [r3]
   19750:	cmp	r1, r3
   19754:	cmpeq	r0, r2
   19758:	bhi	199e4 <_start@@Base+0x53bc>
   1975c:	add	r3, pc, #348	; 0x15c
   19760:	ldrd	r2, [r3]
   19764:	cmp	r1, r3
   19768:	cmpeq	r0, r2
   1976c:	beq	19844 <_start@@Base+0x521c>
   19770:	mov	r2, r5
   19774:	mov	r1, r4
   19778:	mov	r0, r8
   1977c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   19780:	mov	r1, r0
   19784:	add	r3, sp, #36	; 0x24
   19788:	mov	r2, r5
   1978c:	mov	r0, r8
   19790:	bl	180fc <_start@@Base+0x3ad4>
   19794:	mov	r4, r0
   19798:	ldr	r3, [sp, #36]	; 0x24
   1979c:	cmp	r3, #0
   197a0:	beq	19cd8 <_start@@Base+0x56b0>
   197a4:	cmp	r5, r4
   197a8:	beq	197d4 <_start@@Base+0x51ac>
   197ac:	ldrb	r3, [r4]
   197b0:	cmp	r3, #34	; 0x22
   197b4:	addeq	r4, r4, #1
   197b8:	beq	197d4 <_start@@Base+0x51ac>
   197bc:	mov	r3, #5
   197c0:	mov	r2, r5
   197c4:	mov	r1, r4
   197c8:	mov	r0, r8
   197cc:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   197d0:	mov	r4, r0
   197d4:	mov	r1, r5
   197d8:	mov	r0, r4
   197dc:	bl	14750 <_start@@Base+0x128>
   197e0:	cmp	r1, fp
   197e4:	cmpeq	r0, sl
   197e8:	bhi	19748 <_start@@Base+0x5120>
   197ec:	add	r3, pc, #212	; 0xd4
   197f0:	ldrd	r2, [r3]
   197f4:	cmp	r1, r3
   197f8:	cmpeq	r0, r2
   197fc:	beq	194e8 <_start@@Base+0x4ec0>
   19800:	add	r3, pc, #200	; 0xc8
   19804:	ldrd	r2, [r3]
   19808:	cmp	r1, r3
   1980c:	cmpeq	r0, r2
   19810:	beq	19620 <_start@@Base+0x4ff8>
   19814:	and	r0, r0, #-16777216	; 0xff000000
   19818:	add	r3, pc, #184	; 0xb8
   1981c:	ldrd	r2, [r3]
   19820:	cmp	r1, r3
   19824:	cmpeq	r0, r2
   19828:	beq	196e0 <_start@@Base+0x50b8>
   1982c:	mov	r2, r5
   19830:	mov	r1, r4
   19834:	mov	r0, r8
   19838:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1983c:	mov	r1, r0
   19840:	b	19784 <_start@@Base+0x515c>
   19844:	add	r4, r4, #8
   19848:	mov	r1, r5
   1984c:	mov	r0, r4
   19850:	bl	14750 <_start@@Base+0x128>
   19854:	bic	r6, r0, #255	; 0xff
   19858:	add	r3, pc, #128	; 0x80
   1985c:	ldrd	r2, [r3]
   19860:	cmp	r1, r3
   19864:	cmpeq	r6, r2
   19868:	beq	19904 <_start@@Base+0x52dc>
   1986c:	mov	r2, #0
   19870:	ldr	r3, [pc, #112]	; 198e8 <_start@@Base+0x52c0>
   19874:	and	r0, r0, r2
   19878:	and	r1, r1, r3
   1987c:	mov	r2, #0
   19880:	ldr	r3, [pc, #108]	; 198f4 <_start@@Base+0x52cc>
   19884:	cmp	r1, r3
   19888:	cmpeq	r0, r2
   1988c:	beq	19980 <_start@@Base+0x5358>
   19890:	mov	r2, r5
   19894:	mov	r1, r4
   19898:	mov	r0, r8
   1989c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   198a0:	mov	r1, r0
   198a4:	b	19784 <_start@@Base+0x515c>
   198a8:	cmnvs	r3, r4, ror #8
   198ac:	cmnvs	r8, #-2147483620	; 0x8000001c
   198b0:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   198b4:	cmnvc	r4, #116, 30	; 0x1d0
   198b8:	svcpl	0x00636860
   198bc:			; <UNDEFINED> instruction: 0x6d61696e
   198c0:	cmnvs	r3, r5, ror #8
   198c4:	cmnvs	r8, #-2147483620	; 0x8000001c
   198c8:	strbvs	r6, [pc, -r9, ror #28]!
   198cc:	cmnvs	lr, r1, ror #8
   198d0:	svcvs	0x005f7479
   198d4:	cmnvs	r1, #6464	; 0x1940
   198d8:	svcvs	0x00000000
   198dc:	cmnvs	r1, #6464	; 0x1940
   198e0:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   198e4:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   198e8:			; <UNDEFINED> instruction: 0xffff0000
   198ec:	cmnvc	r4, #0
   198f0:	rsbvc	r0, r5, r0
   198f4:	rsbsvc	r0, r3, #0
   198f8:	muleq	r1, r8, r8
   198fc:	andeq	r3, r5, r0, ror r0
   19900:	andeq	ip, r1, ip, asr #25
   19904:	mov	r3, #7
   19908:	mov	r2, r5
   1990c:	mov	r1, r4
   19910:	mov	r0, r8
   19914:	bl	17de0 <_start@@Base+0x37b8>
   19918:	cmp	r4, r0
   1991c:	beq	19968 <_start@@Base+0x5340>
   19920:	ldr	r3, [pc, #-48]	; 198f8 <_start@@Base+0x52d0>
   19924:	str	r3, [sp, #16]
   19928:	ldr	r3, [pc, #-48]	; 19900 <_start@@Base+0x52d8>
   1992c:	str	r3, [sp, #12]
   19930:	ldr	r3, [pc, #-60]	; 198fc <_start@@Base+0x52d4>
   19934:	add	r3, r3, #32
   19938:	str	r3, [sp, #8]
   1993c:	ldr	r3, [sp, #32]
   19940:	str	r3, [sp, #4]
   19944:	mov	r3, #9
   19948:	str	r3, [sp]
   1994c:	mov	r3, #4
   19950:	mov	r2, r5
   19954:	mov	r1, r0
   19958:	mov	r0, r8
   1995c:	bl	2f1b0 <flatcc_json_parser_union_type_vector@@Base>
   19960:	mov	r1, r0
   19964:	b	19784 <_start@@Base+0x515c>
   19968:	mov	r2, r5
   1996c:	mov	r1, r0
   19970:	mov	r0, r8
   19974:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   19978:	mov	r1, r0
   1997c:	b	19784 <_start@@Base+0x515c>
   19980:	mov	r3, #2
   19984:	mov	r2, r5
   19988:	mov	r1, r4
   1998c:	mov	r0, r8
   19990:	bl	17de0 <_start@@Base+0x37b8>
   19994:	mov	r1, r0
   19998:	cmp	r4, r0
   1999c:	beq	199d0 <_start@@Base+0x53a8>
   199a0:	ldr	r3, [pc, #-168]	; 19900 <_start@@Base+0x52d8>
   199a4:	str	r3, [sp, #8]
   199a8:	ldr	r3, [sp, #32]
   199ac:	str	r3, [sp, #4]
   199b0:	mov	r3, #9
   199b4:	str	r3, [sp]
   199b8:	mov	r3, #4
   199bc:	mov	r2, r5
   199c0:	mov	r0, r8
   199c4:	bl	2f0d8 <flatcc_json_parser_union_vector@@Base>
   199c8:	mov	r1, r0
   199cc:	b	19784 <_start@@Base+0x515c>
   199d0:	mov	r2, r5
   199d4:	mov	r0, r8
   199d8:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   199dc:	mov	r1, r0
   199e0:	b	19784 <_start@@Base+0x515c>
   199e4:	add	r3, pc, #844	; 0x34c
   199e8:	ldrd	r2, [r3]
   199ec:	cmp	r1, r3
   199f0:	cmpeq	r0, r2
   199f4:	beq	19a24 <_start@@Base+0x53fc>
   199f8:	add	r3, pc, #832	; 0x340
   199fc:	ldrd	r2, [r3]
   19a00:	cmp	r1, r3
   19a04:	cmpeq	r0, r2
   19a08:	beq	19ba0 <_start@@Base+0x5578>
   19a0c:	mov	r2, r5
   19a10:	mov	r1, r4
   19a14:	mov	r0, r8
   19a18:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   19a1c:	mov	r1, r0
   19a20:	b	19784 <_start@@Base+0x515c>
   19a24:	add	r6, r4, #8
   19a28:	mov	r1, r5
   19a2c:	mov	r0, r6
   19a30:	bl	14750 <_start@@Base+0x128>
   19a34:	add	r3, pc, #780	; 0x30c
   19a38:	ldrd	r2, [r3]
   19a3c:	cmp	r1, r3
   19a40:	cmpeq	r0, r2
   19a44:	beq	19a84 <_start@@Base+0x545c>
   19a48:	ldr	r2, [pc, #792]	; 19d68 <_start@@Base+0x5740>
   19a4c:	mvn	r3, #0
   19a50:	and	r0, r0, r2
   19a54:	and	r1, r1, r3
   19a58:	add	r3, pc, #752	; 0x2f0
   19a5c:	ldrd	r2, [r3]
   19a60:	cmp	r1, r3
   19a64:	cmpeq	r0, r2
   19a68:	beq	19b38 <_start@@Base+0x5510>
   19a6c:	mov	r2, r5
   19a70:	mov	r1, r6
   19a74:	mov	r0, r8
   19a78:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   19a7c:	mov	r1, r0
   19a80:	b	19784 <_start@@Base+0x515c>
   19a84:	add	r4, r4, #16
   19a88:	mov	r1, r5
   19a8c:	mov	r0, r4
   19a90:	bl	14750 <_start@@Base+0x128>
   19a94:	mov	r0, #0
   19a98:	bic	r1, r1, #255	; 0xff
   19a9c:	add	r3, pc, #692	; 0x2b4
   19aa0:	ldrd	r2, [r3]
   19aa4:	cmp	r1, r3
   19aa8:	cmpeq	r0, r2
   19aac:	beq	19ac8 <_start@@Base+0x54a0>
   19ab0:	mov	r2, r5
   19ab4:	mov	r1, r4
   19ab8:	mov	r0, r8
   19abc:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   19ac0:	mov	r1, r0
   19ac4:	b	19784 <_start@@Base+0x515c>
   19ac8:	mov	r3, #3
   19acc:	mov	r2, r5
   19ad0:	mov	r1, r4
   19ad4:	mov	r0, r8
   19ad8:	bl	17de0 <_start@@Base+0x37b8>
   19adc:	mov	r1, r0
   19ae0:	cmp	r4, r0
   19ae4:	beq	19b24 <_start@@Base+0x54fc>
   19ae8:	ldr	r3, [pc, #636]	; 19d6c <_start@@Base+0x5744>
   19aec:	str	r3, [sp, #12]
   19af0:	ldr	r3, [pc, #632]	; 19d70 <_start@@Base+0x5748>
   19af4:	add	r3, r3, #48	; 0x30
   19af8:	str	r3, [sp, #8]
   19afc:	ldr	r3, [sp, #32]
   19b00:	str	r3, [sp, #4]
   19b04:	mov	r3, #1
   19b08:	str	r3, [sp]
   19b0c:	mov	r3, #0
   19b10:	mov	r2, r5
   19b14:	mov	r0, r8
   19b18:	bl	2eebc <flatcc_json_parser_union_type@@Base>
   19b1c:	mov	r1, r0
   19b20:	b	19784 <_start@@Base+0x515c>
   19b24:	mov	r2, r5
   19b28:	mov	r0, r8
   19b2c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   19b30:	mov	r1, r0
   19b34:	b	19784 <_start@@Base+0x515c>
   19b38:	mov	r3, #6
   19b3c:	mov	r2, r5
   19b40:	mov	r1, r6
   19b44:	mov	r0, r8
   19b48:	bl	17de0 <_start@@Base+0x37b8>
   19b4c:	cmp	r6, r0
   19b50:	beq	19b88 <_start@@Base+0x5560>
   19b54:	ldr	r3, [pc, #528]	; 19d6c <_start@@Base+0x5744>
   19b58:	str	r3, [sp, #8]
   19b5c:	ldr	r3, [sp, #32]
   19b60:	str	r3, [sp, #4]
   19b64:	mov	r3, #1
   19b68:	str	r3, [sp]
   19b6c:	mov	r3, #0
   19b70:	mov	r2, r5
   19b74:	mov	r1, r0
   19b78:	mov	r0, r8
   19b7c:	bl	2ed68 <flatcc_json_parser_union@@Base>
   19b80:	mov	r1, r0
   19b84:	b	19784 <_start@@Base+0x515c>
   19b88:	mov	r2, r5
   19b8c:	mov	r1, r0
   19b90:	mov	r0, r8
   19b94:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   19b98:	mov	r1, r0
   19b9c:	b	19784 <_start@@Base+0x515c>
   19ba0:	add	r4, r4, #8
   19ba4:	mov	r1, r5
   19ba8:	mov	r0, r4
   19bac:	bl	14750 <_start@@Base+0x128>
   19bb0:	ldr	r2, [pc, #432]	; 19d68 <_start@@Base+0x5740>
   19bb4:	mvn	r3, #0
   19bb8:	and	r2, r2, r0
   19bbc:	and	r3, r3, r1
   19bc0:	add	r7, pc, #408	; 0x198
   19bc4:	ldrd	r6, [r7]
   19bc8:	cmp	r3, r7
   19bcc:	cmpeq	r2, r6
   19bd0:	beq	19c00 <_start@@Base+0x55d8>
   19bd4:	mov	r0, #0
   19bd8:	and	r1, r1, #-16777216	; 0xff000000
   19bdc:	cmp	r1, #1795162112	; 0x6b000000
   19be0:	cmpeq	r0, #0
   19be4:	beq	19c70 <_start@@Base+0x5648>
   19be8:	mov	r2, r5
   19bec:	mov	r1, r4
   19bf0:	mov	r0, r8
   19bf4:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   19bf8:	mov	r1, r0
   19bfc:	b	19784 <_start@@Base+0x515c>
   19c00:	mov	r3, #6
   19c04:	mov	r2, r5
   19c08:	mov	r1, r4
   19c0c:	mov	r0, r8
   19c10:	bl	17de0 <_start@@Base+0x37b8>
   19c14:	cmp	r4, r0
   19c18:	beq	19c58 <_start@@Base+0x5630>
   19c1c:	ldr	r3, [pc, #328]	; 19d6c <_start@@Base+0x5744>
   19c20:	str	r3, [sp, #12]
   19c24:	ldr	r3, [sp, #28]
   19c28:	str	r3, [sp, #8]
   19c2c:	ldr	r3, [sp, #32]
   19c30:	str	r3, [sp, #4]
   19c34:	mov	r3, #5
   19c38:	str	r3, [sp]
   19c3c:	mov	r3, #2
   19c40:	mov	r2, r5
   19c44:	mov	r1, r0
   19c48:	mov	r0, r8
   19c4c:	bl	2eebc <flatcc_json_parser_union_type@@Base>
   19c50:	mov	r1, r0
   19c54:	b	19784 <_start@@Base+0x515c>
   19c58:	mov	r2, r5
   19c5c:	mov	r1, r0
   19c60:	mov	r0, r8
   19c64:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   19c68:	mov	r1, r0
   19c6c:	b	19784 <_start@@Base+0x515c>
   19c70:	mov	r3, #1
   19c74:	mov	r2, r5
   19c78:	mov	r1, r4
   19c7c:	mov	r0, r8
   19c80:	bl	17de0 <_start@@Base+0x37b8>
   19c84:	cmp	r4, r0
   19c88:	beq	19cc0 <_start@@Base+0x5698>
   19c8c:	ldr	r3, [pc, #216]	; 19d6c <_start@@Base+0x5744>
   19c90:	str	r3, [sp, #8]
   19c94:	ldr	r3, [sp, #32]
   19c98:	str	r3, [sp, #4]
   19c9c:	mov	r3, #5
   19ca0:	str	r3, [sp]
   19ca4:	mov	r3, #2
   19ca8:	mov	r2, r5
   19cac:	mov	r1, r0
   19cb0:	mov	r0, r8
   19cb4:	bl	2ed68 <flatcc_json_parser_union@@Base>
   19cb8:	mov	r1, r0
   19cbc:	b	19784 <_start@@Base+0x515c>
   19cc0:	mov	r2, r5
   19cc4:	mov	r1, r0
   19cc8:	mov	r0, r8
   19ccc:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   19cd0:	mov	r1, r0
   19cd4:	b	19784 <_start@@Base+0x515c>
   19cd8:	ldr	r3, [r8, #20]
   19cdc:	cmp	r3, #0
   19ce0:	beq	19d00 <_start@@Base+0x56d8>
   19ce4:	mov	r3, #33	; 0x21
   19ce8:	mov	r2, r5
   19cec:	mov	r1, r4
   19cf0:	mov	r0, r8
   19cf4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   19cf8:	add	sp, sp, #44	; 0x2c
   19cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d00:	ldr	r3, [sp, #32]
   19d04:	mov	r2, r5
   19d08:	mov	r1, r4
   19d0c:	mov	r0, r8
   19d10:	bl	2ed0c <flatcc_json_parser_finalize_unions@@Base>
   19d14:	mov	r4, r0
   19d18:	ldr	r0, [r8]
   19d1c:	bl	27e74 <flatcc_builder_end_table@@Base>
   19d20:	str	r0, [r9]
   19d24:	cmp	r0, #0
   19d28:	movne	r0, r4
   19d2c:	beq	19ce4 <_start@@Base+0x56bc>
   19d30:	b	19cf8 <_start@@Base+0x56d0>
   19d34:	nop			; (mov r0, r0)
   19d38:	svcpl	0x00636861
   19d3c:			; <UNDEFINED> instruction: 0x6d61696e
   19d40:	svcpl	0x006b6963
   19d44:	cmnvc	r9, #1694498816	; 0x65000000
   19d48:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   19d4c:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   19d50:	ldrbvs	r0, [r2, #-0]!
   19d54:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   19d58:	andeq	r0, r0, r0
   19d5c:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   19d60:	rsbvc	r0, r5, r0
   19d64:	blvs	17f6f50 <__bss_end__@@Base+0x17a3c04>
   19d68:			; <UNDEFINED> instruction: 0xffff0000
   19d6c:	andeq	ip, r1, ip, asr #25
   19d70:	andeq	r3, r5, r0, ror r0
   19d74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d78:	sub	sp, sp, #476	; 0x1dc
   19d7c:	mov	r9, r0
   19d80:	mov	r7, r1
   19d84:	mov	r8, r2
   19d88:	mov	r2, r3
   19d8c:	str	r3, [sp, #424]	; 0x1a8
   19d90:	mov	r3, #0
   19d94:	str	r3, [r2]
   19d98:	mov	r1, #4
   19d9c:	ldr	r0, [r0]
   19da0:	bl	27424 <flatcc_builder_start_table@@Base>
   19da4:	cmp	r0, #0
   19da8:	bne	1c428 <_start@@Base+0x7e00>
   19dac:	add	r3, sp, #460	; 0x1cc
   19db0:	str	r3, [sp]
   19db4:	mov	r3, #1
   19db8:	mov	r2, r8
   19dbc:	mov	r1, r7
   19dc0:	mov	r0, r9
   19dc4:	bl	2eca4 <flatcc_json_parser_prepare_unions@@Base>
   19dc8:	cmp	r8, r0
   19dcc:	beq	1c428 <_start@@Base+0x7e00>
   19dd0:	add	r3, sp, #468	; 0x1d4
   19dd4:	mov	r2, r8
   19dd8:	mov	r1, r7
   19ddc:	mov	r0, r9
   19de0:	bl	19394 <_start@@Base+0x4d6c>
   19de4:	mov	r7, r0
   19de8:	ldr	r3, [sp, #468]	; 0x1d4
   19dec:	cmp	r3, #0
   19df0:	beq	1c41c <_start@@Base+0x7df4>
   19df4:	ldr	r3, [pc, #1092]	; 1a240 <_start@@Base+0x5c18>
   19df8:	add	r3, r3, #204	; 0xcc
   19dfc:	str	r3, [sp, #428]	; 0x1ac
   19e00:	str	r9, [sp, #28]
   19e04:	mov	fp, r8
   19e08:	mov	r8, r4
   19e0c:	mov	r9, r5
   19e10:	b	19fe4 <_start@@Base+0x59bc>
   19e14:	ldrb	r4, [r7, #7]
   19e18:	mov	r5, #0
   19e1c:	b	19e28 <_start@@Base+0x5800>
   19e20:	mov	r4, #0
   19e24:	mov	r5, #0
   19e28:	ldrb	r2, [r7, #6]
   19e2c:	mov	r1, #0
   19e30:	str	r1, [sp, #356]	; 0x164
   19e34:	lsl	r3, r2, #8
   19e38:	str	r3, [sp, #352]	; 0x160
   19e3c:	add	r3, sp, #352	; 0x160
   19e40:	ldrd	r2, [r3]
   19e44:	orr	r2, r2, r4
   19e48:	orr	r3, r3, r5
   19e4c:	mov	r4, r2
   19e50:	mov	r5, r3
   19e54:	ldrb	r2, [r7, #5]
   19e58:	mov	r1, #0
   19e5c:	str	r1, [sp, #308]	; 0x134
   19e60:	lsl	r3, r2, #16
   19e64:	str	r3, [sp, #304]	; 0x130
   19e68:	add	r3, sp, #304	; 0x130
   19e6c:	ldrd	r2, [r3]
   19e70:	orr	r2, r2, r4
   19e74:	orr	r3, r3, r5
   19e78:	mov	r4, r2
   19e7c:	mov	r5, r3
   19e80:	ldrb	r2, [r7, #4]
   19e84:	mov	r1, #0
   19e88:	str	r1, [sp, #228]	; 0xe4
   19e8c:	lsl	r3, r2, #24
   19e90:	str	r3, [sp, #224]	; 0xe0
   19e94:	ldrd	r2, [sp, #224]	; 0xe0
   19e98:	orr	r2, r2, r4
   19e9c:	orr	r3, r3, r5
   19ea0:	mov	r4, r2
   19ea4:	mov	r5, r3
   19ea8:	ldrb	r3, [r7, #3]
   19eac:	str	r3, [sp, #180]	; 0xb4
   19eb0:	mov	r3, #0
   19eb4:	str	r3, [sp, #176]	; 0xb0
   19eb8:	ldrd	r2, [sp, #176]	; 0xb0
   19ebc:	orr	r2, r2, r4
   19ec0:	orr	r3, r3, r5
   19ec4:	mov	r4, r2
   19ec8:	mov	r5, r3
   19ecc:	ldrb	r2, [r7, #2]
   19ed0:	lsl	r3, r2, #8
   19ed4:	str	r3, [sp, #148]	; 0x94
   19ed8:	mov	r3, #0
   19edc:	str	r3, [sp, #144]	; 0x90
   19ee0:	ldrd	r2, [sp, #144]	; 0x90
   19ee4:	orr	r2, r2, r4
   19ee8:	orr	r3, r3, r5
   19eec:	mov	r4, r2
   19ef0:	mov	r5, r3
   19ef4:	ldrb	r2, [r7, #1]
   19ef8:	lsl	r3, r2, #16
   19efc:	str	r3, [sp, #100]	; 0x64
   19f00:	mov	r3, #0
   19f04:	str	r3, [sp, #96]	; 0x60
   19f08:	ldrd	r2, [sp, #96]	; 0x60
   19f0c:	orr	r2, r2, r4
   19f10:	orr	r3, r3, r5
   19f14:	mov	r4, r2
   19f18:	mov	r5, r3
   19f1c:	ldrb	r2, [r7]
   19f20:	lsl	r3, r2, #24
   19f24:	str	r3, [sp, #84]	; 0x54
   19f28:	mov	r3, #0
   19f2c:	str	r3, [sp, #80]	; 0x50
   19f30:	ldrd	r2, [sp, #80]	; 0x50
   19f34:	orr	r2, r2, r4
   19f38:	orr	r3, r3, r5
   19f3c:	mov	r4, r2
   19f40:	mov	r5, r3
   19f44:	add	r3, pc, #716	; 0x2cc
   19f48:	ldrd	r2, [r3]
   19f4c:	cmp	r5, r3
   19f50:	cmpeq	r4, r2
   19f54:	beq	1a09c <_start@@Base+0x5a74>
   19f58:	bic	r0, r4, #255	; 0xff
   19f5c:	add	r3, pc, #700	; 0x2bc
   19f60:	ldrd	r2, [r3]
   19f64:	cmp	r5, r3
   19f68:	cmpeq	r0, r2
   19f6c:	beq	1a15c <_start@@Base+0x5b34>
   19f70:	ldr	r2, [pc, #716]	; 1a244 <_start@@Base+0x5c1c>
   19f74:	mvn	r3, #0
   19f78:	and	r2, r2, r4
   19f7c:	and	r3, r3, r5
   19f80:	add	r1, pc, #672	; 0x2a0
   19f84:	ldrd	r0, [r1]
   19f88:	cmp	r3, r1
   19f8c:	cmpeq	r2, r0
   19f90:	beq	1a1bc <_start@@Base+0x5b94>
   19f94:	and	r4, r4, #-16777216	; 0xff000000
   19f98:	add	r3, pc, #656	; 0x290
   19f9c:	ldrd	r2, [r3]
   19fa0:	cmp	r5, r3
   19fa4:	cmpeq	r4, r2
   19fa8:	beq	1c39c <_start@@Base+0x7d74>
   19fac:	mov	r2, fp
   19fb0:	mov	r1, r7
   19fb4:	ldr	r0, [sp, #28]
   19fb8:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   19fbc:	mov	r7, r0
   19fc0:	add	r3, sp, #468	; 0x1d4
   19fc4:	mov	r2, fp
   19fc8:	mov	r1, r7
   19fcc:	ldr	r0, [sp, #28]
   19fd0:	bl	180fc <_start@@Base+0x3ad4>
   19fd4:	mov	r7, r0
   19fd8:	ldr	r3, [sp, #468]	; 0x1d4
   19fdc:	cmp	r3, #0
   19fe0:	beq	1c414 <_start@@Base+0x7dec>
   19fe4:	cmp	fp, r7
   19fe8:	beq	1a014 <_start@@Base+0x59ec>
   19fec:	ldrb	r3, [r7]
   19ff0:	cmp	r3, #34	; 0x22
   19ff4:	addeq	r7, r7, #1
   19ff8:	beq	1a014 <_start@@Base+0x59ec>
   19ffc:	mov	r3, #5
   1a000:	mov	r2, fp
   1a004:	mov	r1, r7
   1a008:	ldr	r0, [sp, #28]
   1a00c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1a010:	mov	r7, r0
   1a014:	mov	sl, fp
   1a018:	sub	r3, fp, r7
   1a01c:	cmp	r3, #8
   1a020:	movcs	r3, #8
   1a024:	sub	r3, r3, #1
   1a028:	cmp	r3, #7
   1a02c:	ldrls	pc, [pc, r3, lsl #2]
   1a030:	b	1a1b0 <_start@@Base+0x5b88>
   1a034:	muleq	r1, r0, r0
   1a038:	andeq	sl, r1, r4, lsl #1
   1a03c:	andeq	sl, r1, r8, ror r0
   1a040:	andeq	sl, r1, ip, rrx
   1a044:	andeq	sl, r1, r0, rrx
   1a048:	andeq	sl, r1, r4, asr r0
   1a04c:	andeq	r9, r1, r0, lsr #28
   1a050:	andeq	r9, r1, r4, lsl lr
   1a054:	mov	r4, #0
   1a058:	mov	r5, #0
   1a05c:	b	19e54 <_start@@Base+0x582c>
   1a060:	mov	r4, #0
   1a064:	mov	r5, #0
   1a068:	b	19e80 <_start@@Base+0x5858>
   1a06c:	mov	r4, #0
   1a070:	mov	r5, #0
   1a074:	b	19ea8 <_start@@Base+0x5880>
   1a078:	mov	r4, #0
   1a07c:	mov	r5, #0
   1a080:	b	19ecc <_start@@Base+0x58a4>
   1a084:	mov	r4, #0
   1a088:	mov	r5, #0
   1a08c:	b	19ef4 <_start@@Base+0x58cc>
   1a090:	mov	r4, #0
   1a094:	mov	r5, #0
   1a098:	b	19f1c <_start@@Base+0x58f4>
   1a09c:	add	r7, r7, #8
   1a0a0:	mov	r1, fp
   1a0a4:	mov	r0, r7
   1a0a8:	bl	14750 <_start@@Base+0x128>
   1a0ac:	mov	r0, #0
   1a0b0:	add	r3, pc, #384	; 0x180
   1a0b4:	ldrd	r2, [r3]
   1a0b8:	cmp	r1, r3
   1a0bc:	cmpeq	r0, r2
   1a0c0:	beq	1a0dc <_start@@Base+0x5ab4>
   1a0c4:	mov	r2, fp
   1a0c8:	mov	r1, r7
   1a0cc:	ldr	r0, [sp, #28]
   1a0d0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1a0d4:	mov	r7, r0
   1a0d8:	b	19fc0 <_start@@Base+0x5998>
   1a0dc:	mov	r3, #4
   1a0e0:	mov	r2, fp
   1a0e4:	mov	r1, r7
   1a0e8:	ldr	r4, [sp, #28]
   1a0ec:	mov	r0, r4
   1a0f0:	bl	17de0 <_start@@Base+0x37b8>
   1a0f4:	cmp	r7, r0
   1a0f8:	beq	1a144 <_start@@Base+0x5b1c>
   1a0fc:	ldr	r3, [pc, #324]	; 1a248 <_start@@Base+0x5c20>
   1a100:	str	r3, [sp, #16]
   1a104:	ldr	r3, [pc, #320]	; 1a24c <_start@@Base+0x5c24>
   1a108:	str	r3, [sp, #12]
   1a10c:	ldr	r3, [pc, #300]	; 1a240 <_start@@Base+0x5c18>
   1a110:	add	r3, r3, #80	; 0x50
   1a114:	str	r3, [sp, #8]
   1a118:	ldr	r3, [sp, #460]	; 0x1cc
   1a11c:	str	r3, [sp, #4]
   1a120:	mov	r3, #3
   1a124:	str	r3, [sp]
   1a128:	mov	r3, #0
   1a12c:	mov	r2, fp
   1a130:	mov	r1, r0
   1a134:	mov	r0, r4
   1a138:	bl	2f1b0 <flatcc_json_parser_union_type_vector@@Base>
   1a13c:	mov	r7, r0
   1a140:	b	19fc0 <_start@@Base+0x5998>
   1a144:	mov	r2, fp
   1a148:	mov	r1, r0
   1a14c:	ldr	r0, [sp, #28]
   1a150:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1a154:	mov	r7, r0
   1a158:	b	19fc0 <_start@@Base+0x5998>
   1a15c:	mov	r3, #7
   1a160:	mov	r2, fp
   1a164:	mov	r1, r7
   1a168:	ldr	r6, [sp, #28]
   1a16c:	mov	r0, r6
   1a170:	bl	17de0 <_start@@Base+0x37b8>
   1a174:	cmp	r0, r7
   1a178:	beq	19f70 <_start@@Base+0x5948>
   1a17c:	ldr	r3, [pc, #200]	; 1a24c <_start@@Base+0x5c24>
   1a180:	str	r3, [sp, #8]
   1a184:	ldr	r3, [sp, #460]	; 0x1cc
   1a188:	str	r3, [sp, #4]
   1a18c:	mov	r3, #3
   1a190:	str	r3, [sp]
   1a194:	mov	r3, #0
   1a198:	mov	r2, fp
   1a19c:	mov	r1, r0
   1a1a0:	mov	r0, r6
   1a1a4:	bl	2f0d8 <flatcc_json_parser_union_vector@@Base>
   1a1a8:	mov	r7, r0
   1a1ac:	b	19fc0 <_start@@Base+0x5998>
   1a1b0:	mov	r4, #0
   1a1b4:	mov	r5, #0
   1a1b8:	b	19f70 <_start@@Base+0x5948>
   1a1bc:	mov	r3, #6
   1a1c0:	mov	r2, fp
   1a1c4:	mov	r1, r7
   1a1c8:	ldr	r4, [sp, #28]
   1a1cc:	mov	r0, r4
   1a1d0:	bl	17de0 <_start@@Base+0x37b8>
   1a1d4:	mov	r6, r0
   1a1d8:	cmp	r0, r7
   1a1dc:	beq	1c384 <_start@@Base+0x7d5c>
   1a1e0:	mov	r3, #0
   1a1e4:	str	r3, [sp, #464]	; 0x1d0
   1a1e8:	mov	r1, #3
   1a1ec:	ldr	r0, [r4]
   1a1f0:	bl	27424 <flatcc_builder_start_table@@Base>
   1a1f4:	cmp	r0, #0
   1a1f8:	bne	1c0a4 <_start@@Base+0x7a7c>
   1a1fc:	add	r3, sp, #436	; 0x1b4
   1a200:	mov	r2, fp
   1a204:	mov	r1, r6
   1a208:	mov	r0, r4
   1a20c:	bl	19394 <_start@@Base+0x4d6c>
   1a210:	b	1c1cc <_start@@Base+0x7ba4>
   1a214:	nop			; (mov r0, r0)
   1a218:	cmnvs	lr, pc, asr r9
   1a21c:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1a220:	cmnvs	lr, r0, lsl #18
   1a224:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1a228:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   1a22c:	rsbsvc	r6, r2, r6, ror #10
   1a230:	strvs	r0, [r0, #-0]
   1a234:	stclvs	6, cr7, [pc, #-420]!	; 1a098 <_start@@Base+0x5a70>
   1a238:	andeq	r0, r0, r0
   1a23c:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   1a240:	andeq	r3, r5, r0, ror r0
   1a244:			; <UNDEFINED> instruction: 0xffff0000
   1a248:	andeq	r4, r1, r8, lsl #17
   1a24c:	andeq	r3, r2, r0, lsl #5
   1a250:	ldrb	r2, [r0, #7]
   1a254:	mov	r3, #0
   1a258:	ldrb	r4, [r0, #6]
   1a25c:	mov	r1, #0
   1a260:	str	r1, [sp, #276]	; 0x114
   1a264:	lsl	r1, r4, #8
   1a268:	str	r1, [sp, #272]	; 0x110
   1a26c:	add	r1, sp, #272	; 0x110
   1a270:	ldrd	r4, [r1]
   1a274:	orr	r4, r4, r2
   1a278:	orr	r5, r5, r3
   1a27c:	mov	r2, r4
   1a280:	mov	r3, r5
   1a284:	ldrb	r4, [r0, #5]
   1a288:	mov	r1, #0
   1a28c:	str	r1, [sp, #204]	; 0xcc
   1a290:	lsl	r1, r4, #16
   1a294:	str	r1, [sp, #200]	; 0xc8
   1a298:	ldrd	r4, [sp, #200]	; 0xc8
   1a29c:	orr	r4, r4, r2
   1a2a0:	orr	r5, r5, r3
   1a2a4:	mov	r2, r4
   1a2a8:	mov	r3, r5
   1a2ac:	ldrb	r4, [r0, #4]
   1a2b0:	mov	r1, #0
   1a2b4:	str	r1, [sp, #124]	; 0x7c
   1a2b8:	lsl	r1, r4, #24
   1a2bc:	str	r1, [sp, #120]	; 0x78
   1a2c0:	ldrd	r4, [sp, #120]	; 0x78
   1a2c4:	orr	r4, r4, r2
   1a2c8:	orr	r5, r5, r3
   1a2cc:	mov	r2, r4
   1a2d0:	mov	r3, r5
   1a2d4:	ldrb	r1, [r0, #3]
   1a2d8:	str	r1, [sp, #92]	; 0x5c
   1a2dc:	mov	r1, #0
   1a2e0:	str	r1, [sp, #88]	; 0x58
   1a2e4:	ldrd	r4, [sp, #88]	; 0x58
   1a2e8:	orr	r4, r4, r2
   1a2ec:	orr	r5, r5, r3
   1a2f0:	mov	r2, r4
   1a2f4:	mov	r3, r5
   1a2f8:	ldrb	r4, [r0, #2]
   1a2fc:	lsl	r1, r4, #8
   1a300:	str	r1, [sp, #68]	; 0x44
   1a304:	mov	r1, #0
   1a308:	str	r1, [sp, #64]	; 0x40
   1a30c:	ldrd	r4, [sp, #64]	; 0x40
   1a310:	orr	r4, r4, r2
   1a314:	orr	r5, r5, r3
   1a318:	mov	r2, r4
   1a31c:	mov	r3, r5
   1a320:	ldrb	r4, [r0, #1]
   1a324:	lsl	r1, r4, #16
   1a328:	str	r1, [sp, #52]	; 0x34
   1a32c:	mov	r1, #0
   1a330:	str	r1, [sp, #48]	; 0x30
   1a334:	ldrd	r4, [sp, #48]	; 0x30
   1a338:	orr	r4, r4, r2
   1a33c:	orr	r5, r5, r3
   1a340:	mov	r2, r4
   1a344:	mov	r3, r5
   1a348:	ldrb	r4, [r0]
   1a34c:	lsl	r1, r4, #24
   1a350:	str	r1, [sp, #36]	; 0x24
   1a354:	mov	r1, #0
   1a358:	str	r1, [sp, #32]
   1a35c:	ldrd	r4, [sp, #32]
   1a360:	orr	r4, r4, r2
   1a364:	orr	r5, r5, r3
   1a368:	mov	r2, r4
   1a36c:	mov	r3, r5
   1a370:	add	r5, pc, #808	; 0x328
   1a374:	ldrd	r4, [r5]
   1a378:	cmp	r3, r5
   1a37c:	cmpeq	r2, r4
   1a380:	bne	1c140 <_start@@Base+0x7b18>
   1a384:	add	r1, r0, #8
   1a388:	sub	r3, sl, r1
   1a38c:	cmp	r3, #8
   1a390:	movcs	r3, #8
   1a394:	sub	r3, r3, #1
   1a398:	cmp	r3, #7
   1a39c:	ldrls	pc, [pc, r3, lsl #2]
   1a3a0:	b	1a5bc <_start@@Base+0x5f94>
   1a3a4:			; <UNDEFINED> instruction: 0x0001a5b0
   1a3a8:	andeq	sl, r1, r4, lsr #11
   1a3ac:	muleq	r1, r8, r5
   1a3b0:	andeq	sl, r1, ip, lsl #11
   1a3b4:	andeq	sl, r1, r0, lsl #11
   1a3b8:	andeq	sl, r1, r4, ror r5
   1a3bc:	andeq	sl, r1, r4, lsr #8
   1a3c0:	andeq	sl, r1, r8, lsl r4
   1a3c4:	mov	r2, #0
   1a3c8:	mov	r3, #0
   1a3cc:	b	1a258 <_start@@Base+0x5c30>
   1a3d0:	mov	r2, #0
   1a3d4:	mov	r3, #0
   1a3d8:	b	1a284 <_start@@Base+0x5c5c>
   1a3dc:	mov	r2, #0
   1a3e0:	mov	r3, #0
   1a3e4:	b	1a2ac <_start@@Base+0x5c84>
   1a3e8:	mov	r2, #0
   1a3ec:	mov	r3, #0
   1a3f0:	b	1a2d4 <_start@@Base+0x5cac>
   1a3f4:	mov	r2, #0
   1a3f8:	mov	r3, #0
   1a3fc:	b	1a2f8 <_start@@Base+0x5cd0>
   1a400:	mov	r2, #0
   1a404:	mov	r3, #0
   1a408:	b	1a320 <_start@@Base+0x5cf8>
   1a40c:	mov	r2, #0
   1a410:	mov	r3, #0
   1a414:	b	1a348 <_start@@Base+0x5d20>
   1a418:	ldrb	r2, [r0, #15]
   1a41c:	mov	r3, #0
   1a420:	b	1a42c <_start@@Base+0x5e04>
   1a424:	mov	r2, #0
   1a428:	mov	r3, #0
   1a42c:	ldrb	r4, [r0, #14]
   1a430:	mov	ip, #0
   1a434:	str	ip, [sp, #388]	; 0x184
   1a438:	lsl	ip, r4, #8
   1a43c:	str	ip, [sp, #384]	; 0x180
   1a440:	add	ip, sp, #384	; 0x180
   1a444:	ldrd	r4, [ip]
   1a448:	orr	r4, r4, r2
   1a44c:	orr	r5, r5, r3
   1a450:	mov	r2, r4
   1a454:	mov	r3, r5
   1a458:	ldrb	r4, [r0, #13]
   1a45c:	mov	ip, #0
   1a460:	str	ip, [sp, #340]	; 0x154
   1a464:	lsl	ip, r4, #16
   1a468:	str	ip, [sp, #336]	; 0x150
   1a46c:	add	ip, sp, #336	; 0x150
   1a470:	ldrd	r4, [ip]
   1a474:	orr	r4, r4, r2
   1a478:	orr	r5, r5, r3
   1a47c:	mov	r2, r4
   1a480:	mov	r3, r5
   1a484:	ldrb	r4, [r0, #12]
   1a488:	mov	ip, #0
   1a48c:	str	ip, [sp, #292]	; 0x124
   1a490:	lsl	ip, r4, #24
   1a494:	str	ip, [sp, #288]	; 0x120
   1a498:	add	ip, sp, #288	; 0x120
   1a49c:	ldrd	r4, [ip]
   1a4a0:	orr	r4, r4, r2
   1a4a4:	orr	r5, r5, r3
   1a4a8:	mov	r2, r4
   1a4ac:	mov	r3, r5
   1a4b0:	ldrb	ip, [r0, #11]
   1a4b4:	str	ip, [sp, #252]	; 0xfc
   1a4b8:	mov	ip, #0
   1a4bc:	str	ip, [sp, #248]	; 0xf8
   1a4c0:	ldrd	r4, [sp, #248]	; 0xf8
   1a4c4:	orr	r4, r4, r2
   1a4c8:	orr	r5, r5, r3
   1a4cc:	mov	r2, r4
   1a4d0:	mov	r3, r5
   1a4d4:	ldrb	r4, [r0, #10]
   1a4d8:	lsl	ip, r4, #8
   1a4dc:	str	ip, [sp, #220]	; 0xdc
   1a4e0:	mov	ip, #0
   1a4e4:	str	ip, [sp, #216]	; 0xd8
   1a4e8:	ldrd	r4, [sp, #216]	; 0xd8
   1a4ec:	orr	r4, r4, r2
   1a4f0:	orr	r5, r5, r3
   1a4f4:	mov	r2, r4
   1a4f8:	mov	r3, r5
   1a4fc:	ldrb	r4, [r0, #9]
   1a500:	lsl	ip, r4, #16
   1a504:	str	ip, [sp, #172]	; 0xac
   1a508:	mov	ip, #0
   1a50c:	str	ip, [sp, #168]	; 0xa8
   1a510:	ldrd	r4, [sp, #168]	; 0xa8
   1a514:	orr	r4, r4, r2
   1a518:	orr	r5, r5, r3
   1a51c:	mov	r2, r4
   1a520:	mov	r3, r5
   1a524:	ldrb	r4, [r0, #8]
   1a528:	lsl	ip, r4, #24
   1a52c:	str	ip, [sp, #140]	; 0x8c
   1a530:	mov	ip, #0
   1a534:	str	ip, [sp, #136]	; 0x88
   1a538:	ldrd	r4, [sp, #136]	; 0x88
   1a53c:	orr	r4, r4, r2
   1a540:	orr	r5, r5, r3
   1a544:	mov	r2, r4
   1a548:	mov	r3, r5
   1a54c:	add	r5, pc, #340	; 0x154
   1a550:	ldrd	r4, [r5]
   1a554:	cmp	r3, r5
   1a558:	cmpeq	r2, r4
   1a55c:	beq	1a5c8 <_start@@Base+0x5fa0>
   1a560:	mov	r2, fp
   1a564:	ldr	r0, [sp, #28]
   1a568:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1a56c:	mov	r7, r0
   1a570:	b	1c154 <_start@@Base+0x7b2c>
   1a574:	mov	r2, #0
   1a578:	mov	r3, #0
   1a57c:	b	1a458 <_start@@Base+0x5e30>
   1a580:	mov	r2, #0
   1a584:	mov	r3, #0
   1a588:	b	1a484 <_start@@Base+0x5e5c>
   1a58c:	mov	r2, #0
   1a590:	mov	r3, #0
   1a594:	b	1a4b0 <_start@@Base+0x5e88>
   1a598:	mov	r2, #0
   1a59c:	mov	r3, #0
   1a5a0:	b	1a4d4 <_start@@Base+0x5eac>
   1a5a4:	mov	r2, #0
   1a5a8:	mov	r3, #0
   1a5ac:	b	1a4fc <_start@@Base+0x5ed4>
   1a5b0:	mov	r2, #0
   1a5b4:	mov	r3, #0
   1a5b8:	b	1a524 <_start@@Base+0x5efc>
   1a5bc:	mov	r2, #0
   1a5c0:	mov	r3, #0
   1a5c4:	b	1a54c <_start@@Base+0x5f24>
   1a5c8:	add	r6, r0, #16
   1a5cc:	mov	r1, fp
   1a5d0:	mov	r0, r6
   1a5d4:	bl	14750 <_start@@Base+0x128>
   1a5d8:	ldr	r4, [pc, #232]	; 1a6c8 <_start@@Base+0x60a0>
   1a5dc:	mvn	r5, #0
   1a5e0:	and	r4, r4, r0
   1a5e4:	and	r5, r5, r1
   1a5e8:	add	r3, pc, #192	; 0xc0
   1a5ec:	ldrd	r2, [r3]
   1a5f0:	cmp	r5, r3
   1a5f4:	cmpeq	r4, r2
   1a5f8:	beq	1a640 <_start@@Base+0x6018>
   1a5fc:	and	r0, r0, #-16777216	; 0xff000000
   1a600:	add	r3, pc, #176	; 0xb0
   1a604:	ldrd	r2, [r3]
   1a608:	cmp	r1, r3
   1a60c:	cmpeq	r0, r2
   1a610:	beq	1aecc <_start@@Base+0x68a4>
   1a614:	add	r3, pc, #164	; 0xa4
   1a618:	ldrd	r2, [r3]
   1a61c:	cmp	r5, r3
   1a620:	cmpeq	r4, r2
   1a624:	beq	1b874 <_start@@Base+0x724c>
   1a628:	mov	r2, fp
   1a62c:	mov	r1, r6
   1a630:	ldr	r0, [sp, #28]
   1a634:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1a638:	mov	r7, r0
   1a63c:	b	1c154 <_start@@Base+0x7b2c>
   1a640:	mov	r3, #6
   1a644:	mov	r2, fp
   1a648:	mov	r1, r6
   1a64c:	ldr	r4, [sp, #28]
   1a650:	mov	r0, r4
   1a654:	bl	17de0 <_start@@Base+0x37b8>
   1a658:	mov	r7, r0
   1a65c:	cmp	r6, r0
   1a660:	beq	1c138 <_start@@Base+0x7b10>
   1a664:	mov	r1, #2
   1a668:	ldr	r0, [r4]
   1a66c:	bl	27424 <flatcc_builder_start_table@@Base>
   1a670:	cmp	r0, #0
   1a674:	bne	1ae7c <_start@@Base+0x6854>
   1a678:	add	r3, sp, #444	; 0x1bc
   1a67c:	mov	r2, fp
   1a680:	mov	r1, r7
   1a684:	mov	r0, r4
   1a688:	bl	19394 <_start@@Base+0x4d6c>
   1a68c:	ldr	r3, [pc, #56]	; 1a6cc <_start@@Base+0x60a4>
   1a690:	add	r3, r3, #108	; 0x6c
   1a694:	str	r3, [sp, #416]	; 0x1a0
   1a698:	b	1acfc <_start@@Base+0x66d4>
   1a69c:	nop			; (mov r0, r0)
   1a6a0:	bvs	1cf6460 <__bss_end__@@Base+0x1ca3114>
   1a6a4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a6a8:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   1a6ac:	rsbsvc	r6, r2, r6, ror #10
   1a6b0:	ldrvs	r0, [r2, -r0]!
   1a6b4:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1a6b8:	strvs	r0, [r0, -r0]
   1a6bc:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1a6c0:	ldrvs	r0, [r3, -r0]!
   1a6c4:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1a6c8:			; <UNDEFINED> instruction: 0xffff0000
   1a6cc:	andeq	r3, r5, r0, ror r0
   1a6d0:	ldrb	r2, [r0, #7]
   1a6d4:	mov	r3, #0
   1a6d8:	ldrb	r4, [r0, #6]
   1a6dc:	mov	r1, #0
   1a6e0:	str	r1, [sp, #380]	; 0x17c
   1a6e4:	lsl	r1, r4, #8
   1a6e8:	str	r1, [sp, #376]	; 0x178
   1a6ec:	add	r1, sp, #376	; 0x178
   1a6f0:	ldrd	r4, [r1]
   1a6f4:	orr	r4, r4, r2
   1a6f8:	orr	r5, r5, r3
   1a6fc:	mov	r2, r4
   1a700:	mov	r3, r5
   1a704:	ldrb	r4, [r0, #5]
   1a708:	mov	r1, #0
   1a70c:	str	r1, [sp, #332]	; 0x14c
   1a710:	lsl	r1, r4, #16
   1a714:	str	r1, [sp, #328]	; 0x148
   1a718:	add	r1, sp, #328	; 0x148
   1a71c:	ldrd	r4, [r1]
   1a720:	orr	r4, r4, r2
   1a724:	orr	r5, r5, r3
   1a728:	mov	r2, r4
   1a72c:	mov	r3, r5
   1a730:	ldrb	r4, [r0, #4]
   1a734:	mov	r1, #0
   1a738:	str	r1, [sp, #284]	; 0x11c
   1a73c:	lsl	r1, r4, #24
   1a740:	str	r1, [sp, #280]	; 0x118
   1a744:	add	r1, sp, #280	; 0x118
   1a748:	ldrd	r4, [r1]
   1a74c:	orr	r4, r4, r2
   1a750:	orr	r5, r5, r3
   1a754:	mov	r2, r4
   1a758:	mov	r3, r5
   1a75c:	ldrb	r1, [r0, #3]
   1a760:	str	r1, [sp, #244]	; 0xf4
   1a764:	mov	r1, #0
   1a768:	str	r1, [sp, #240]	; 0xf0
   1a76c:	ldrd	r4, [sp, #240]	; 0xf0
   1a770:	orr	r4, r4, r2
   1a774:	orr	r5, r5, r3
   1a778:	mov	r2, r4
   1a77c:	mov	r3, r5
   1a780:	ldrb	r4, [r0, #2]
   1a784:	lsl	r1, r4, #8
   1a788:	str	r1, [sp, #212]	; 0xd4
   1a78c:	mov	r1, #0
   1a790:	str	r1, [sp, #208]	; 0xd0
   1a794:	ldrd	r4, [sp, #208]	; 0xd0
   1a798:	orr	r4, r4, r2
   1a79c:	orr	r5, r5, r3
   1a7a0:	mov	r2, r4
   1a7a4:	mov	r3, r5
   1a7a8:	ldrb	r4, [r0, #1]
   1a7ac:	lsl	r1, r4, #16
   1a7b0:	str	r1, [sp, #164]	; 0xa4
   1a7b4:	mov	r1, #0
   1a7b8:	str	r1, [sp, #160]	; 0xa0
   1a7bc:	ldrd	r4, [sp, #160]	; 0xa0
   1a7c0:	orr	r4, r4, r2
   1a7c4:	orr	r5, r5, r3
   1a7c8:	mov	r2, r4
   1a7cc:	mov	r3, r5
   1a7d0:	ldrb	r4, [r0]
   1a7d4:	lsl	r1, r4, #24
   1a7d8:	str	r1, [sp, #132]	; 0x84
   1a7dc:	mov	r1, #0
   1a7e0:	str	r1, [sp, #128]	; 0x80
   1a7e4:	ldrd	r4, [sp, #128]	; 0x80
   1a7e8:	orr	r4, r4, r2
   1a7ec:	orr	r5, r5, r3
   1a7f0:	mov	r2, r4
   1a7f4:	mov	r3, r5
   1a7f8:	add	r5, pc, #880	; 0x370
   1a7fc:	ldrd	r4, [r5]
   1a800:	cmp	r3, r5
   1a804:	cmpeq	r2, r4
   1a808:	bne	1ac70 <_start@@Base+0x6648>
   1a80c:	add	r4, r0, #8
   1a810:	sub	r3, sl, r4
   1a814:	cmp	r3, #8
   1a818:	movcs	r3, #8
   1a81c:	sub	r3, r3, #1
   1a820:	cmp	r3, #7
   1a824:	ldrls	pc, [pc, r3, lsl #2]
   1a828:	b	1aa68 <_start@@Base+0x6440>
   1a82c:	andeq	sl, r1, ip, asr sl
   1a830:	andeq	sl, r1, r0, asr sl
   1a834:	andeq	sl, r1, r4, asr #20
   1a838:	andeq	sl, r1, r8, lsr sl
   1a83c:	andeq	sl, r1, ip, lsr #20
   1a840:	andeq	sl, r1, r0, lsr #20
   1a844:	andeq	sl, r1, ip, lsr #17
   1a848:	andeq	sl, r1, r0, lsr #17
   1a84c:	mov	r2, #0
   1a850:	mov	r3, #0
   1a854:	b	1a6d8 <_start@@Base+0x60b0>
   1a858:	mov	r2, #0
   1a85c:	mov	r3, #0
   1a860:	b	1a704 <_start@@Base+0x60dc>
   1a864:	mov	r2, #0
   1a868:	mov	r3, #0
   1a86c:	b	1a730 <_start@@Base+0x6108>
   1a870:	mov	r2, #0
   1a874:	mov	r3, #0
   1a878:	b	1a75c <_start@@Base+0x6134>
   1a87c:	mov	r2, #0
   1a880:	mov	r3, #0
   1a884:	b	1a780 <_start@@Base+0x6158>
   1a888:	mov	r2, #0
   1a88c:	mov	r3, #0
   1a890:	b	1a7a8 <_start@@Base+0x6180>
   1a894:	mov	r2, #0
   1a898:	mov	r3, #0
   1a89c:	b	1a7d0 <_start@@Base+0x61a8>
   1a8a0:	ldrb	r6, [r0, #15]
   1a8a4:	mov	r7, #0
   1a8a8:	b	1a8b4 <_start@@Base+0x628c>
   1a8ac:	mov	r6, #0
   1a8b0:	mov	r7, #0
   1a8b4:	ldrb	r2, [r0, #14]
   1a8b8:	mov	r1, #0
   1a8bc:	str	r1, [sp, #412]	; 0x19c
   1a8c0:	lsl	r3, r2, #8
   1a8c4:	str	r3, [sp, #408]	; 0x198
   1a8c8:	add	r3, sp, #408	; 0x198
   1a8cc:	ldrd	r2, [r3]
   1a8d0:	orr	r2, r2, r6
   1a8d4:	orr	r3, r3, r7
   1a8d8:	mov	r6, r2
   1a8dc:	mov	r7, r3
   1a8e0:	ldrb	r2, [r0, #13]
   1a8e4:	mov	r1, #0
   1a8e8:	str	r1, [sp, #404]	; 0x194
   1a8ec:	lsl	r3, r2, #16
   1a8f0:	str	r3, [sp, #400]	; 0x190
   1a8f4:	add	r3, sp, #400	; 0x190
   1a8f8:	ldrd	r2, [r3]
   1a8fc:	orr	r2, r2, r6
   1a900:	orr	r3, r3, r7
   1a904:	ldrb	r6, [r0, #12]
   1a908:	mov	r1, #0
   1a90c:	str	r1, [sp, #396]	; 0x18c
   1a910:	lsl	r1, r6, #24
   1a914:	str	r1, [sp, #392]	; 0x188
   1a918:	add	r1, sp, #392	; 0x188
   1a91c:	ldrd	r6, [r1]
   1a920:	orr	r6, r6, r2
   1a924:	orr	r7, r7, r3
   1a928:	mov	r2, r6
   1a92c:	mov	r3, r7
   1a930:	ldrb	r1, [r0, #11]
   1a934:	str	r1, [sp, #364]	; 0x16c
   1a938:	mov	r1, #0
   1a93c:	str	r1, [sp, #360]	; 0x168
   1a940:	add	r1, sp, #360	; 0x168
   1a944:	ldrd	r6, [r1]
   1a948:	orr	r6, r6, r2
   1a94c:	orr	r7, r7, r3
   1a950:	mov	r2, r6
   1a954:	mov	r3, r7
   1a958:	ldrb	r6, [r0, #10]
   1a95c:	lsl	r1, r6, #8
   1a960:	str	r1, [sp, #348]	; 0x15c
   1a964:	mov	r1, #0
   1a968:	str	r1, [sp, #344]	; 0x158
   1a96c:	add	r1, sp, #344	; 0x158
   1a970:	ldrd	r6, [r1]
   1a974:	orr	r6, r6, r2
   1a978:	orr	r7, r7, r3
   1a97c:	mov	r2, r6
   1a980:	mov	r3, r7
   1a984:	ldrb	r6, [r0, #9]
   1a988:	lsl	r1, r6, #16
   1a98c:	str	r1, [sp, #316]	; 0x13c
   1a990:	mov	r1, #0
   1a994:	str	r1, [sp, #312]	; 0x138
   1a998:	add	r1, sp, #312	; 0x138
   1a99c:	ldrd	r6, [r1]
   1a9a0:	orr	r6, r6, r2
   1a9a4:	orr	r7, r7, r3
   1a9a8:	mov	r2, r6
   1a9ac:	mov	r3, r7
   1a9b0:	ldrb	r0, [r0, #8]
   1a9b4:	lsl	r1, r0, #24
   1a9b8:	str	r1, [sp, #300]	; 0x12c
   1a9bc:	mov	r1, #0
   1a9c0:	str	r1, [sp, #296]	; 0x128
   1a9c4:	add	r1, sp, #296	; 0x128
   1a9c8:	ldrd	r0, [r1]
   1a9cc:	orr	r0, r0, r2
   1a9d0:	orr	r1, r1, r3
   1a9d4:	mov	r2, r0
   1a9d8:	mov	r3, r1
   1a9dc:	bic	r0, r2, #255	; 0xff
   1a9e0:	add	r7, pc, #400	; 0x190
   1a9e4:	ldrd	r6, [r7]
   1a9e8:	cmp	r3, r7
   1a9ec:	cmpeq	r0, r6
   1a9f0:	beq	1aa74 <_start@@Base+0x644c>
   1a9f4:	add	r1, pc, #388	; 0x184
   1a9f8:	ldrd	r0, [r1]
   1a9fc:	cmp	r3, r1
   1aa00:	cmpeq	r2, r0
   1aa04:	beq	1ab8c <_start@@Base+0x6564>
   1aa08:	mov	r2, fp
   1aa0c:	mov	r1, r4
   1aa10:	ldr	r0, [sp, #28]
   1aa14:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1aa18:	mov	r6, r0
   1aa1c:	b	1ac84 <_start@@Base+0x665c>
   1aa20:	mov	r6, #0
   1aa24:	mov	r7, #0
   1aa28:	b	1a8e0 <_start@@Base+0x62b8>
   1aa2c:	mov	r2, #0
   1aa30:	mov	r3, #0
   1aa34:	b	1a904 <_start@@Base+0x62dc>
   1aa38:	mov	r2, #0
   1aa3c:	mov	r3, #0
   1aa40:	b	1a930 <_start@@Base+0x6308>
   1aa44:	mov	r2, #0
   1aa48:	mov	r3, #0
   1aa4c:	b	1a958 <_start@@Base+0x6330>
   1aa50:	mov	r2, #0
   1aa54:	mov	r3, #0
   1aa58:	b	1a984 <_start@@Base+0x635c>
   1aa5c:	mov	r2, #0
   1aa60:	mov	r3, #0
   1aa64:	b	1a9b0 <_start@@Base+0x6388>
   1aa68:	mov	r2, #0
   1aa6c:	mov	r3, #0
   1aa70:	b	1a9dc <_start@@Base+0x63b4>
   1aa74:	mov	r3, #7
   1aa78:	mov	r2, fp
   1aa7c:	mov	r1, r4
   1aa80:	ldr	r6, [sp, #28]
   1aa84:	mov	r0, r6
   1aa88:	bl	17de0 <_start@@Base+0x37b8>
   1aa8c:	mov	r5, r0
   1aa90:	cmp	r4, r0
   1aa94:	beq	1ab54 <_start@@Base+0x652c>
   1aa98:	add	r1, sp, #472	; 0x1d8
   1aa9c:	mov	r2, #0
   1aaa0:	mov	r3, #0
   1aaa4:	strd	r2, [r1, #-24]!	; 0xffffffe8
   1aaa8:	mov	r3, r1
   1aaac:	mov	r2, fp
   1aab0:	mov	r1, r0
   1aab4:	mov	r0, r6
   1aab8:	bl	17cd4 <_start@@Base+0x36ac>
   1aabc:	mov	r6, r0
   1aac0:	cmp	r5, r0
   1aac4:	beq	1ab18 <_start@@Base+0x64f0>
   1aac8:	add	r3, sp, #448	; 0x1c0
   1aacc:	ldrd	r2, [r3]
   1aad0:	orrs	r3, r2, r3
   1aad4:	bne	1aae8 <_start@@Base+0x64c0>
   1aad8:	ldr	r3, [sp, #28]
   1aadc:	ldr	r3, [r3, #8]
   1aae0:	tst	r3, #2
   1aae4:	beq	1ac84 <_start@@Base+0x665c>
   1aae8:	mov	r3, #8
   1aaec:	mov	r2, r3
   1aaf0:	mov	r1, #0
   1aaf4:	ldr	r0, [sp, #28]
   1aaf8:	ldr	r0, [r0]
   1aafc:	bl	28e20 <flatcc_builder_table_add@@Base>
   1ab00:	cmp	r0, #0
   1ab04:	beq	1ab4c <_start@@Base+0x6524>
   1ab08:	add	r3, sp, #448	; 0x1c0
   1ab0c:	ldrd	r2, [r3]
   1ab10:	strd	r2, [r0]
   1ab14:	b	1ac84 <_start@@Base+0x665c>
   1ab18:	add	r3, sp, #448	; 0x1c0
   1ab1c:	str	r3, [sp]
   1ab20:	ldr	r3, [pc, #96]	; 1ab88 <_start@@Base+0x6560>
   1ab24:	add	r3, r3, #96	; 0x60
   1ab28:	mov	r2, fp
   1ab2c:	mov	r1, r0
   1ab30:	ldr	r0, [sp, #28]
   1ab34:	bl	19084 <_start@@Base+0x4a5c>
   1ab38:	cmp	fp, r0
   1ab3c:	cmpne	r6, r0
   1ab40:	movne	r6, r0
   1ab44:	bne	1aac8 <_start@@Base+0x64a0>
   1ab48:	mov	r6, r0
   1ab4c:	mov	r7, r6
   1ab50:	b	1ae7c <_start@@Base+0x6854>
   1ab54:	mov	r2, fp
   1ab58:	mov	r1, r0
   1ab5c:	ldr	r0, [sp, #28]
   1ab60:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1ab64:	mov	r6, r0
   1ab68:	b	1ac84 <_start@@Base+0x665c>
   1ab6c:	nop			; (mov r0, r0)
   1ab70:	svcpl	0x00626262
   1ab74:	cmnvs	r1, r1, ror #2
   1ab78:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1ab7c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1ab80:	cmnvs	r2, pc, asr r4
   1ab84:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1ab88:	andeq	r3, r5, r0, ror r0
   1ab8c:	mov	r3, #8
   1ab90:	mov	r2, fp
   1ab94:	mov	r1, r4
   1ab98:	ldr	r6, [sp, #28]
   1ab9c:	mov	r0, r6
   1aba0:	bl	17de0 <_start@@Base+0x37b8>
   1aba4:	mov	r5, r0
   1aba8:	cmp	r4, r0
   1abac:	beq	1ac58 <_start@@Base+0x6630>
   1abb0:	add	r3, sp, #472	; 0x1d8
   1abb4:	mov	r2, #0
   1abb8:	str	r2, [r3, #-24]!	; 0xffffffe8
   1abbc:	mov	r2, fp
   1abc0:	mov	r1, r0
   1abc4:	mov	r0, r6
   1abc8:	bl	17aec <_start@@Base+0x34c4>
   1abcc:	mov	r6, r0
   1abd0:	cmp	r5, r0
   1abd4:	beq	1ac20 <_start@@Base+0x65f8>
   1abd8:	ldr	r3, [sp, #448]	; 0x1c0
   1abdc:	cmp	r3, #0
   1abe0:	bne	1abf4 <_start@@Base+0x65cc>
   1abe4:	ldr	r3, [sp, #28]
   1abe8:	ldr	r3, [r3, #8]
   1abec:	tst	r3, #2
   1abf0:	beq	1ac84 <_start@@Base+0x665c>
   1abf4:	mov	r3, #4
   1abf8:	mov	r2, r3
   1abfc:	mov	r1, #1
   1ac00:	ldr	r0, [sp, #28]
   1ac04:	ldr	r0, [r0]
   1ac08:	bl	28e20 <flatcc_builder_table_add@@Base>
   1ac0c:	cmp	r0, #0
   1ac10:	beq	1ac50 <_start@@Base+0x6628>
   1ac14:	ldr	r3, [sp, #448]	; 0x1c0
   1ac18:	str	r3, [r0]
   1ac1c:	b	1ac84 <_start@@Base+0x665c>
   1ac20:	add	r3, sp, #448	; 0x1c0
   1ac24:	str	r3, [sp]
   1ac28:	ldr	r3, [sp, #416]	; 0x1a0
   1ac2c:	mov	r2, fp
   1ac30:	mov	r1, r0
   1ac34:	ldr	r0, [sp, #28]
   1ac38:	bl	18808 <_start@@Base+0x41e0>
   1ac3c:	cmp	fp, r0
   1ac40:	cmpne	r6, r0
   1ac44:	movne	r6, r0
   1ac48:	bne	1abd8 <_start@@Base+0x65b0>
   1ac4c:	mov	r6, r0
   1ac50:	mov	r7, r6
   1ac54:	b	1ae7c <_start@@Base+0x6854>
   1ac58:	mov	r2, fp
   1ac5c:	mov	r1, r0
   1ac60:	ldr	r0, [sp, #28]
   1ac64:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1ac68:	mov	r6, r0
   1ac6c:	b	1ac84 <_start@@Base+0x665c>
   1ac70:	mov	r2, fp
   1ac74:	mov	r1, r0
   1ac78:	ldr	r0, [sp, #28]
   1ac7c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1ac80:	mov	r6, r0
   1ac84:	sub	r3, sl, r6
   1ac88:	cmp	r3, #1
   1ac8c:	ble	1aca0 <_start@@Base+0x6678>
   1ac90:	ldrb	r3, [r6]
   1ac94:	cmp	r3, #32
   1ac98:	bhi	1acb4 <_start@@Base+0x668c>
   1ac9c:	beq	1ad70 <_start@@Base+0x6748>
   1aca0:	mov	r2, fp
   1aca4:	mov	r1, r6
   1aca8:	ldr	r0, [sp, #28]
   1acac:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1acb0:	mov	r6, r0
   1acb4:	cmp	fp, r6
   1acb8:	moveq	r3, #0
   1acbc:	streq	r3, [sp, #444]	; 0x1bc
   1acc0:	moveq	r0, r6
   1acc4:	beq	1acfc <_start@@Base+0x66d4>
   1acc8:	ldrb	r3, [r6]
   1accc:	cmp	r3, #44	; 0x2c
   1acd0:	beq	1adcc <_start@@Base+0x67a4>
   1acd4:	mov	r3, #0
   1acd8:	str	r3, [sp, #444]	; 0x1bc
   1acdc:	ldrb	r3, [r6]
   1ace0:	cmp	r3, #125	; 0x7d
   1ace4:	beq	1ad84 <_start@@Base+0x675c>
   1ace8:	mov	r3, #10
   1acec:	mov	r2, fp
   1acf0:	mov	r1, r6
   1acf4:	ldr	r0, [sp, #28]
   1acf8:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1acfc:	ldr	r3, [sp, #444]	; 0x1bc
   1ad00:	cmp	r3, #0
   1ad04:	beq	1ae68 <_start@@Base+0x6840>
   1ad08:	cmp	fp, r0
   1ad0c:	beq	1ac70 <_start@@Base+0x6648>
   1ad10:	ldrb	r3, [r0]
   1ad14:	cmp	r3, #34	; 0x22
   1ad18:	addeq	r0, r0, #1
   1ad1c:	beq	1ad34 <_start@@Base+0x670c>
   1ad20:	mov	r3, #5
   1ad24:	mov	r2, fp
   1ad28:	mov	r1, r0
   1ad2c:	ldr	r0, [sp, #28]
   1ad30:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1ad34:	sub	r3, sl, r0
   1ad38:	cmp	r3, #8
   1ad3c:	movcs	r3, #8
   1ad40:	sub	r3, r3, #1
   1ad44:	cmp	r3, #7
   1ad48:	ldrls	pc, [pc, r3, lsl #2]
   1ad4c:	b	1ac70 <_start@@Base+0x6648>
   1ad50:	muleq	r1, r4, r8
   1ad54:	andeq	sl, r1, r8, lsl #17
   1ad58:	andeq	sl, r1, ip, ror r8
   1ad5c:	andeq	sl, r1, r0, ror r8
   1ad60:	andeq	sl, r1, r4, ror #16
   1ad64:	andeq	sl, r1, r8, asr r8
   1ad68:	andeq	sl, r1, ip, asr #16
   1ad6c:	ldrdeq	sl, [r1], -r0
   1ad70:	ldrb	r3, [r6, #1]
   1ad74:	cmp	r3, #32
   1ad78:	addhi	r6, r6, #1
   1ad7c:	bls	1aca0 <_start@@Base+0x6678>
   1ad80:	b	1acb4 <_start@@Base+0x668c>
   1ad84:	add	r0, r6, #1
   1ad88:	sub	r3, sl, r0
   1ad8c:	cmp	r3, #1
   1ad90:	ble	1ada4 <_start@@Base+0x677c>
   1ad94:	ldrb	r3, [r6, #1]
   1ad98:	cmp	r3, #32
   1ad9c:	bhi	1acfc <_start@@Base+0x66d4>
   1ada0:	beq	1adb8 <_start@@Base+0x6790>
   1ada4:	mov	r2, fp
   1ada8:	mov	r1, r0
   1adac:	ldr	r0, [sp, #28]
   1adb0:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1adb4:	b	1acfc <_start@@Base+0x66d4>
   1adb8:	ldrb	r3, [r6, #2]
   1adbc:	cmp	r3, #32
   1adc0:	addhi	r0, r6, #2
   1adc4:	bls	1ada4 <_start@@Base+0x677c>
   1adc8:	b	1acfc <_start@@Base+0x66d4>
   1adcc:	add	r0, r6, #1
   1add0:	sub	r3, sl, r0
   1add4:	cmp	r3, #1
   1add8:	ble	1adec <_start@@Base+0x67c4>
   1addc:	ldrb	r3, [r6, #1]
   1ade0:	cmp	r3, #32
   1ade4:	bhi	1adfc <_start@@Base+0x67d4>
   1ade8:	beq	1ae34 <_start@@Base+0x680c>
   1adec:	mov	r2, fp
   1adf0:	mov	r1, r0
   1adf4:	ldr	r0, [sp, #28]
   1adf8:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1adfc:	cmp	fp, r0
   1ae00:	beq	1ae48 <_start@@Base+0x6820>
   1ae04:	ldrb	r3, [r0]
   1ae08:	cmp	r3, #125	; 0x7d
   1ae0c:	movne	r3, #1
   1ae10:	strne	r3, [sp, #444]	; 0x1bc
   1ae14:	bne	1acfc <_start@@Base+0x66d4>
   1ae18:	mov	r3, #0
   1ae1c:	str	r3, [sp, #444]	; 0x1bc
   1ae20:	mov	r2, fp
   1ae24:	add	r1, r0, #1
   1ae28:	ldr	r0, [sp, #28]
   1ae2c:	bl	17d9c <_start@@Base+0x3774>
   1ae30:	b	1acfc <_start@@Base+0x66d4>
   1ae34:	ldrb	r3, [r6, #2]
   1ae38:	cmp	r3, #32
   1ae3c:	addhi	r0, r6, #2
   1ae40:	bls	1adec <_start@@Base+0x67c4>
   1ae44:	b	1adfc <_start@@Base+0x67d4>
   1ae48:	mov	r3, #0
   1ae4c:	str	r3, [sp, #444]	; 0x1bc
   1ae50:	mov	r3, #10
   1ae54:	mov	r2, fp
   1ae58:	mov	r1, r0
   1ae5c:	ldr	r0, [sp, #28]
   1ae60:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1ae64:	b	1acfc <_start@@Base+0x66d4>
   1ae68:	mov	r7, r0
   1ae6c:	ldr	r3, [sp, #28]
   1ae70:	ldr	r3, [r3, #20]
   1ae74:	cmp	r3, #0
   1ae78:	beq	1ae98 <_start@@Base+0x6870>
   1ae7c:	mov	r3, #33	; 0x21
   1ae80:	mov	r2, fp
   1ae84:	mov	r1, r7
   1ae88:	ldr	r0, [sp, #28]
   1ae8c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1ae90:	mov	r6, r0
   1ae94:	b	1c0a4 <_start@@Base+0x7a7c>
   1ae98:	ldr	r3, [sp, #28]
   1ae9c:	ldr	r0, [r3]
   1aea0:	bl	27e74 <flatcc_builder_end_table@@Base>
   1aea4:	subs	r4, r0, #0
   1aea8:	beq	1ae7c <_start@@Base+0x6854>
   1aeac:	mov	r1, #1
   1aeb0:	ldr	r3, [sp, #28]
   1aeb4:	ldr	r0, [r3]
   1aeb8:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   1aebc:	cmp	r0, #0
   1aec0:	beq	1c36c <_start@@Base+0x7d44>
   1aec4:	str	r4, [r0]
   1aec8:	b	1c154 <_start@@Base+0x7b2c>
   1aecc:	mov	r3, #5
   1aed0:	mov	r2, fp
   1aed4:	mov	r1, r6
   1aed8:	ldr	r0, [sp, #28]
   1aedc:	bl	17de0 <_start@@Base+0x37b8>
   1aee0:	mov	r7, r0
   1aee4:	cmp	r6, r0
   1aee8:	beq	1b86c <_start@@Base+0x7244>
   1aeec:	mov	r1, #9
   1aef0:	ldr	r4, [sp, #28]
   1aef4:	ldr	r0, [r4]
   1aef8:	bl	27424 <flatcc_builder_start_table@@Base>
   1aefc:	cmp	r0, #0
   1af00:	bne	1b7b0 <_start@@Base+0x7188>
   1af04:	add	r3, sp, #440	; 0x1b8
   1af08:	mov	r2, fp
   1af0c:	mov	r1, r7
   1af10:	mov	r0, r4
   1af14:	bl	19394 <_start@@Base+0x4d6c>
   1af18:	mov	r7, r0
   1af1c:	ldr	r3, [sp, #440]	; 0x1b8
   1af20:	cmp	r3, #0
   1af24:	beq	1b7a0 <_start@@Base+0x7178>
   1af28:	ldr	r3, [pc, #-936]	; 1ab88 <_start@@Base+0x6560>
   1af2c:	add	r6, r3, #180	; 0xb4
   1af30:	add	r3, sp, #416	; 0x1a0
   1af34:	strd	r8, [r3]
   1af38:	mov	r9, sl
   1af3c:	mov	sl, r6
   1af40:	mov	r6, r4
   1af44:	b	1b21c <_start@@Base+0x6bf4>
   1af48:	add	r7, r7, #8
   1af4c:	mov	r1, fp
   1af50:	mov	r0, r7
   1af54:	bl	14750 <_start@@Base+0x128>
   1af58:	mov	r0, #0
   1af5c:	and	r1, r1, #-16777216	; 0xff000000
   1af60:	cmp	r1, #889192448	; 0x35000000
   1af64:	cmpeq	r0, #0
   1af68:	beq	1af84 <_start@@Base+0x695c>
   1af6c:	mov	r2, fp
   1af70:	mov	r1, r7
   1af74:	mov	r0, r6
   1af78:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1af7c:	mov	r7, r0
   1af80:	b	1b1f8 <_start@@Base+0x6bd0>
   1af84:	mov	r3, #1
   1af88:	mov	r2, fp
   1af8c:	mov	r1, r7
   1af90:	mov	r0, r6
   1af94:	bl	17de0 <_start@@Base+0x37b8>
   1af98:	mov	r4, r0
   1af9c:	cmp	r7, r0
   1afa0:	beq	1b060 <_start@@Base+0x6a38>
   1afa4:	add	r3, sp, #472	; 0x1d8
   1afa8:	mov	r2, #0
   1afac:	str	r2, [r3, #-24]!	; 0xffffffe8
   1afb0:	mov	r2, fp
   1afb4:	mov	r1, r0
   1afb8:	mov	r0, r6
   1afbc:	bl	17aec <_start@@Base+0x34c4>
   1afc0:	mov	r7, r0
   1afc4:	cmp	r4, r0
   1afc8:	beq	1b00c <_start@@Base+0x69e4>
   1afcc:	ldr	r3, [sp, #448]	; 0x1c0
   1afd0:	cmp	r3, #0
   1afd4:	bne	1afe4 <_start@@Base+0x69bc>
   1afd8:	ldr	r3, [r6, #8]
   1afdc:	tst	r3, #2
   1afe0:	beq	1b1f8 <_start@@Base+0x6bd0>
   1afe4:	mov	r3, #4
   1afe8:	mov	r2, r3
   1afec:	mov	r1, #1
   1aff0:	ldr	r0, [r6]
   1aff4:	bl	28e20 <flatcc_builder_table_add@@Base>
   1aff8:	cmp	r0, #0
   1affc:	beq	1b040 <_start@@Base+0x6a18>
   1b000:	ldr	r3, [sp, #448]	; 0x1c0
   1b004:	str	r3, [r0]
   1b008:	b	1b1f8 <_start@@Base+0x6bd0>
   1b00c:	add	r3, sp, #448	; 0x1c0
   1b010:	str	r3, [sp]
   1b014:	ldr	r3, [pc, #-1172]	; 1ab88 <_start@@Base+0x6560>
   1b018:	add	r3, r3, #120	; 0x78
   1b01c:	mov	r2, fp
   1b020:	mov	r1, r0
   1b024:	mov	r0, r6
   1b028:	bl	18808 <_start@@Base+0x41e0>
   1b02c:	cmp	fp, r0
   1b030:	cmpne	r7, r0
   1b034:	beq	1b054 <_start@@Base+0x6a2c>
   1b038:	mov	r7, r0
   1b03c:	b	1afcc <_start@@Base+0x69a4>
   1b040:	add	r3, sp, #416	; 0x1a0
   1b044:	ldrd	r8, [r3]
   1b048:	mov	r0, r7
   1b04c:	mov	r7, r0
   1b050:	b	1b7b0 <_start@@Base+0x7188>
   1b054:	add	r3, sp, #416	; 0x1a0
   1b058:	ldrd	r8, [r3]
   1b05c:	b	1b04c <_start@@Base+0x6a24>
   1b060:	mov	r2, fp
   1b064:	mov	r1, r0
   1b068:	mov	r0, r6
   1b06c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1b070:	mov	r7, r0
   1b074:	b	1b1f8 <_start@@Base+0x6bd0>
   1b078:	mov	r3, #4
   1b07c:	mov	r2, fp
   1b080:	mov	r1, r7
   1b084:	mov	r0, r6
   1b088:	bl	17de0 <_start@@Base+0x37b8>
   1b08c:	cmp	r7, r0
   1b090:	beq	1c4ac <_start@@Base+0x7e84>
   1b094:	add	r3, sp, #444	; 0x1bc
   1b098:	mov	r2, fp
   1b09c:	mov	r1, r0
   1b0a0:	mov	r0, r6
   1b0a4:	bl	2eb0c <flatcc_json_parser_build_string@@Base>
   1b0a8:	mov	r7, r0
   1b0ac:	ldr	r3, [sp, #444]	; 0x1bc
   1b0b0:	cmp	r3, #0
   1b0b4:	beq	1b800 <_start@@Base+0x71d8>
   1b0b8:	mov	r1, #0
   1b0bc:	ldr	r0, [r6]
   1b0c0:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   1b0c4:	cmp	r0, #0
   1b0c8:	beq	1b80c <_start@@Base+0x71e4>
   1b0cc:	ldr	r3, [sp, #444]	; 0x1bc
   1b0d0:	str	r3, [r0]
   1b0d4:	b	1b1f8 <_start@@Base+0x6bd0>
   1b0d8:	add	r3, sp, #448	; 0x1c0
   1b0dc:	str	r3, [sp]
   1b0e0:	ldr	r3, [pc, #-1376]	; 1ab88 <_start@@Base+0x6560>
   1b0e4:	add	r3, r3, #132	; 0x84
   1b0e8:	mov	r2, fp
   1b0ec:	mov	r1, r0
   1b0f0:	mov	r0, r6
   1b0f4:	bl	19084 <_start@@Base+0x4a5c>
   1b0f8:	cmp	fp, r0
   1b0fc:	cmpne	r7, r0
   1b100:	movne	r7, r0
   1b104:	bne	1c50c <_start@@Base+0x7ee4>
   1b108:	add	r3, sp, #416	; 0x1a0
   1b10c:	ldrd	r8, [r3]
   1b110:	mov	r7, r0
   1b114:	b	1b7b0 <_start@@Base+0x7188>
   1b118:	mov	r2, fp
   1b11c:	mov	r1, r7
   1b120:	mov	r0, r6
   1b124:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1b128:	mov	r7, r0
   1b12c:	b	1b1f8 <_start@@Base+0x6bd0>
   1b130:	mov	r3, #4
   1b134:	mov	r2, fp
   1b138:	mov	r1, r7
   1b13c:	mov	r0, r6
   1b140:	bl	17de0 <_start@@Base+0x37b8>
   1b144:	mov	r1, r0
   1b148:	cmp	r7, r0
   1b14c:	beq	1b190 <_start@@Base+0x6b68>
   1b150:	add	r3, sp, #444	; 0x1bc
   1b154:	mov	r2, fp
   1b158:	mov	r0, r6
   1b15c:	bl	2eb0c <flatcc_json_parser_build_string@@Base>
   1b160:	mov	r7, r0
   1b164:	ldr	r3, [sp, #444]	; 0x1bc
   1b168:	cmp	r3, #0
   1b16c:	beq	1b824 <_start@@Base+0x71fc>
   1b170:	mov	r1, #2
   1b174:	ldr	r0, [r6]
   1b178:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   1b17c:	cmp	r0, #0
   1b180:	beq	1b830 <_start@@Base+0x7208>
   1b184:	ldr	r3, [sp, #444]	; 0x1bc
   1b188:	str	r3, [r0]
   1b18c:	b	1b1f8 <_start@@Base+0x6bd0>
   1b190:	mov	r2, fp
   1b194:	mov	r0, r6
   1b198:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1b19c:	mov	r7, r0
   1b1a0:	b	1b1f8 <_start@@Base+0x6bd0>
   1b1a4:	add	r3, pc, #932	; 0x3a4
   1b1a8:	ldrd	r2, [r3]
   1b1ac:	cmp	r1, r3
   1b1b0:	cmpeq	r0, r2
   1b1b4:	beq	1b2e0 <_start@@Base+0x6cb8>
   1b1b8:	mov	r0, #0
   1b1bc:	add	r3, pc, #916	; 0x394
   1b1c0:	ldrd	r2, [r3]
   1b1c4:	cmp	r1, r3
   1b1c8:	cmpeq	r0, r2
   1b1cc:	beq	1b4e4 <_start@@Base+0x6ebc>
   1b1d0:	add	r3, pc, #904	; 0x388
   1b1d4:	ldrd	r2, [r3]
   1b1d8:	cmp	r5, r3
   1b1dc:	cmpeq	r4, r2
   1b1e0:	beq	1b594 <_start@@Base+0x6f6c>
   1b1e4:	mov	r2, fp
   1b1e8:	mov	r1, r7
   1b1ec:	mov	r0, r6
   1b1f0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1b1f4:	mov	r7, r0
   1b1f8:	add	r3, sp, #440	; 0x1b8
   1b1fc:	mov	r2, fp
   1b200:	mov	r1, r7
   1b204:	mov	r0, r6
   1b208:	bl	180fc <_start@@Base+0x3ad4>
   1b20c:	mov	r7, r0
   1b210:	ldr	r3, [sp, #440]	; 0x1b8
   1b214:	cmp	r3, #0
   1b218:	beq	1b794 <_start@@Base+0x716c>
   1b21c:	cmp	fp, r7
   1b220:	beq	1b24c <_start@@Base+0x6c24>
   1b224:	ldrb	r3, [r7]
   1b228:	cmp	r3, #34	; 0x22
   1b22c:	addeq	r7, r7, #1
   1b230:	beq	1b24c <_start@@Base+0x6c24>
   1b234:	mov	r3, #5
   1b238:	mov	r2, fp
   1b23c:	mov	r1, r7
   1b240:	mov	r0, r6
   1b244:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1b248:	mov	r7, r0
   1b24c:	mov	r1, fp
   1b250:	mov	r0, r7
   1b254:	bl	14750 <_start@@Base+0x128>
   1b258:	mov	r4, r0
   1b25c:	mov	r5, r1
   1b260:	add	r3, pc, #768	; 0x300
   1b264:	ldrd	r2, [r3]
   1b268:	cmp	r1, r3
   1b26c:	cmpeq	r0, r2
   1b270:	bhi	1b1a4 <_start@@Base+0x6b7c>
   1b274:	add	r3, pc, #756	; 0x2f4
   1b278:	ldrd	r2, [r3]
   1b27c:	cmp	r1, r3
   1b280:	cmpeq	r0, r2
   1b284:	beq	1af48 <_start@@Base+0x6920>
   1b288:	mov	r2, #0
   1b28c:	add	r1, pc, #740	; 0x2e4
   1b290:	ldrd	r0, [r1]
   1b294:	cmp	r5, r1
   1b298:	cmpeq	r2, r0
   1b29c:	beq	1b078 <_start@@Base+0x6a50>
   1b2a0:	add	r1, pc, #728	; 0x2d8
   1b2a4:	ldrd	r0, [r1]
   1b2a8:	cmp	r5, r1
   1b2ac:	cmpeq	r4, r0
   1b2b0:	beq	1c4c0 <_start@@Base+0x7e98>
   1b2b4:	add	r1, pc, #716	; 0x2cc
   1b2b8:	ldrd	r0, [r1]
   1b2bc:	cmp	r5, r1
   1b2c0:	cmpeq	r2, r0
   1b2c4:	beq	1b130 <_start@@Base+0x6b08>
   1b2c8:	mov	r2, fp
   1b2cc:	mov	r1, r7
   1b2d0:	mov	r0, r6
   1b2d4:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1b2d8:	mov	r7, r0
   1b2dc:	b	1b1f8 <_start@@Base+0x6bd0>
   1b2e0:	mov	r3, #8
   1b2e4:	mov	r2, fp
   1b2e8:	mov	r1, r7
   1b2ec:	mov	r0, r6
   1b2f0:	bl	17de0 <_start@@Base+0x37b8>
   1b2f4:	mov	r4, r0
   1b2f8:	cmp	r7, r0
   1b2fc:	beq	1b3b4 <_start@@Base+0x6d8c>
   1b300:	add	r3, sp, #472	; 0x1d8
   1b304:	mov	r0, #0
   1b308:	mov	r1, #0
   1b30c:	strd	r0, [r3, #-24]!	; 0xffffffe8
   1b310:	mov	r2, fp
   1b314:	mov	r1, r4
   1b318:	mov	r0, r6
   1b31c:	bl	17cd4 <_start@@Base+0x36ac>
   1b320:	mov	r7, r0
   1b324:	cmp	r4, r0
   1b328:	beq	1b374 <_start@@Base+0x6d4c>
   1b32c:	add	r3, sp, #448	; 0x1c0
   1b330:	ldrd	r2, [r3]
   1b334:	orrs	r3, r2, r3
   1b338:	bne	1b348 <_start@@Base+0x6d20>
   1b33c:	ldr	r3, [r6, #8]
   1b340:	tst	r3, #2
   1b344:	beq	1b1f8 <_start@@Base+0x6bd0>
   1b348:	mov	r3, #8
   1b34c:	mov	r2, r3
   1b350:	mov	r1, #5
   1b354:	ldr	r0, [r6]
   1b358:	bl	28e20 <flatcc_builder_table_add@@Base>
   1b35c:	cmp	r0, #0
   1b360:	beq	1b83c <_start@@Base+0x7214>
   1b364:	add	r3, sp, #448	; 0x1c0
   1b368:	ldrd	r2, [r3]
   1b36c:	strd	r2, [r0]
   1b370:	b	1b1f8 <_start@@Base+0x6bd0>
   1b374:	add	r3, sp, #448	; 0x1c0
   1b378:	str	r3, [sp]
   1b37c:	ldr	r3, [pc, #524]	; 1b590 <_start@@Base+0x6f68>
   1b380:	add	r3, r3, #144	; 0x90
   1b384:	mov	r2, fp
   1b388:	mov	r1, r0
   1b38c:	mov	r0, r6
   1b390:	bl	19084 <_start@@Base+0x4a5c>
   1b394:	cmp	fp, r0
   1b398:	cmpne	r7, r0
   1b39c:	movne	r7, r0
   1b3a0:	bne	1b32c <_start@@Base+0x6d04>
   1b3a4:	add	r3, sp, #416	; 0x1a0
   1b3a8:	ldrd	r8, [r3]
   1b3ac:	mov	r7, r0
   1b3b0:	b	1b7b0 <_start@@Base+0x7188>
   1b3b4:	add	r4, r0, #8
   1b3b8:	mov	r1, fp
   1b3bc:	mov	r0, r4
   1b3c0:	bl	14750 <_start@@Base+0x128>
   1b3c4:	mov	r0, #0
   1b3c8:	and	r1, r1, #-16777216	; 0xff000000
   1b3cc:	cmp	r1, #889192448	; 0x35000000
   1b3d0:	cmpeq	r0, #0
   1b3d4:	beq	1b3f0 <_start@@Base+0x6dc8>
   1b3d8:	mov	r2, fp
   1b3dc:	mov	r1, r4
   1b3e0:	mov	r0, r6
   1b3e4:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1b3e8:	mov	r7, r0
   1b3ec:	b	1b1f8 <_start@@Base+0x6bd0>
   1b3f0:	mov	r3, #1
   1b3f4:	mov	r2, fp
   1b3f8:	mov	r1, r4
   1b3fc:	mov	r0, r6
   1b400:	bl	17de0 <_start@@Base+0x37b8>
   1b404:	mov	r5, r0
   1b408:	cmp	r4, r0
   1b40c:	beq	1b4cc <_start@@Base+0x6ea4>
   1b410:	add	r3, sp, #472	; 0x1d8
   1b414:	mov	r2, #0
   1b418:	str	r2, [r3, #-24]!	; 0xffffffe8
   1b41c:	mov	r2, fp
   1b420:	mov	r1, r0
   1b424:	mov	r0, r6
   1b428:	bl	17aec <_start@@Base+0x34c4>
   1b42c:	mov	r7, r0
   1b430:	cmp	r5, r0
   1b434:	beq	1b478 <_start@@Base+0x6e50>
   1b438:	ldr	r3, [sp, #448]	; 0x1c0
   1b43c:	cmp	r3, #0
   1b440:	bne	1b450 <_start@@Base+0x6e28>
   1b444:	ldr	r3, [r6, #8]
   1b448:	tst	r3, #2
   1b44c:	beq	1b1f8 <_start@@Base+0x6bd0>
   1b450:	mov	r3, #4
   1b454:	mov	r2, r3
   1b458:	mov	r1, #6
   1b45c:	ldr	r0, [r6]
   1b460:	bl	28e20 <flatcc_builder_table_add@@Base>
   1b464:	cmp	r0, #0
   1b468:	beq	1b4ac <_start@@Base+0x6e84>
   1b46c:	ldr	r3, [sp, #448]	; 0x1c0
   1b470:	str	r3, [r0]
   1b474:	b	1b1f8 <_start@@Base+0x6bd0>
   1b478:	add	r3, sp, #448	; 0x1c0
   1b47c:	str	r3, [sp]
   1b480:	ldr	r3, [pc, #264]	; 1b590 <_start@@Base+0x6f68>
   1b484:	add	r3, r3, #156	; 0x9c
   1b488:	mov	r2, fp
   1b48c:	mov	r1, r0
   1b490:	mov	r0, r6
   1b494:	bl	18808 <_start@@Base+0x41e0>
   1b498:	cmp	fp, r0
   1b49c:	cmpne	r7, r0
   1b4a0:	beq	1b4c0 <_start@@Base+0x6e98>
   1b4a4:	mov	r7, r0
   1b4a8:	b	1b438 <_start@@Base+0x6e10>
   1b4ac:	add	r3, sp, #416	; 0x1a0
   1b4b0:	ldrd	r8, [r3]
   1b4b4:	mov	r0, r7
   1b4b8:	mov	r7, r0
   1b4bc:	b	1b7b0 <_start@@Base+0x7188>
   1b4c0:	add	r3, sp, #416	; 0x1a0
   1b4c4:	ldrd	r8, [r3]
   1b4c8:	b	1b4b8 <_start@@Base+0x6e90>
   1b4cc:	mov	r2, fp
   1b4d0:	mov	r1, r0
   1b4d4:	mov	r0, r6
   1b4d8:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1b4dc:	mov	r7, r0
   1b4e0:	b	1b1f8 <_start@@Base+0x6bd0>
   1b4e4:	mov	r3, #4
   1b4e8:	mov	r2, fp
   1b4ec:	mov	r1, r7
   1b4f0:	mov	r0, r6
   1b4f4:	bl	17de0 <_start@@Base+0x37b8>
   1b4f8:	cmp	r7, r0
   1b4fc:	beq	1b544 <_start@@Base+0x6f1c>
   1b500:	add	r3, sp, #444	; 0x1bc
   1b504:	mov	r2, fp
   1b508:	mov	r1, r0
   1b50c:	mov	r0, r6
   1b510:	bl	2eb0c <flatcc_json_parser_build_string@@Base>
   1b514:	mov	r7, r0
   1b518:	ldr	r3, [sp, #444]	; 0x1bc
   1b51c:	cmp	r3, #0
   1b520:	beq	1b848 <_start@@Base+0x7220>
   1b524:	mov	r1, #4
   1b528:	ldr	r0, [r6]
   1b52c:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   1b530:	cmp	r0, #0
   1b534:	beq	1b854 <_start@@Base+0x722c>
   1b538:	ldr	r3, [sp, #444]	; 0x1bc
   1b53c:	str	r3, [r0]
   1b540:	b	1b1f8 <_start@@Base+0x6bd0>
   1b544:	mov	r7, r0
   1b548:	b	1b1d0 <_start@@Base+0x6ba8>
   1b54c:	nop			; (mov r0, r0)
   1b550:	teqcc	r2, r4, lsr r3
   1b554:	cmnvs	r3, #-1946157055	; 0x8c000001
   1b558:	andeq	r0, r0, r0
   1b55c:	cmnvs	r3, #-1946157055	; 0x8c000001
   1b560:	teqcc	r2, r4, lsr r3
   1b564:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   1b568:			; <UNDEFINED> instruction: 0xffffffff
   1b56c:	cmnvs	r3, #-2013265919	; 0x88000001
   1b570:	teqcc	r2, r4, lsr r3
   1b574:	cmnvs	r1, r1, ror #2
   1b578:	andeq	r0, r0, r0
   1b57c:	cmnvs	r1, r1, ror #2
   1b580:	teqcc	r2, r4, lsr r3
   1b584:	rsbvs	r6, r2, #536870918	; 0x20000006
   1b588:	andeq	r0, r0, r0
   1b58c:	rsbvs	r6, r2, #536870918	; 0x20000006
   1b590:	andeq	r3, r5, r0, ror r0
   1b594:	mov	r3, #8
   1b598:	mov	r2, fp
   1b59c:	mov	r1, r7
   1b5a0:	mov	r0, r6
   1b5a4:	bl	17de0 <_start@@Base+0x37b8>
   1b5a8:	mov	r4, r0
   1b5ac:	cmp	r7, r0
   1b5b0:	beq	1b668 <_start@@Base+0x7040>
   1b5b4:	add	r3, sp, #472	; 0x1d8
   1b5b8:	mov	r0, #0
   1b5bc:	mov	r1, #0
   1b5c0:	strd	r0, [r3, #-24]!	; 0xffffffe8
   1b5c4:	mov	r2, fp
   1b5c8:	mov	r1, r4
   1b5cc:	mov	r0, r6
   1b5d0:	bl	17cd4 <_start@@Base+0x36ac>
   1b5d4:	mov	r7, r0
   1b5d8:	cmp	r4, r0
   1b5dc:	beq	1b628 <_start@@Base+0x7000>
   1b5e0:	add	r3, sp, #448	; 0x1c0
   1b5e4:	ldrd	r2, [r3]
   1b5e8:	orrs	r3, r2, r3
   1b5ec:	bne	1b5fc <_start@@Base+0x6fd4>
   1b5f0:	ldr	r3, [r6, #8]
   1b5f4:	tst	r3, #2
   1b5f8:	beq	1b1f8 <_start@@Base+0x6bd0>
   1b5fc:	mov	r3, #8
   1b600:	mov	r2, r3
   1b604:	mov	r1, #7
   1b608:	ldr	r0, [r6]
   1b60c:	bl	28e20 <flatcc_builder_table_add@@Base>
   1b610:	cmp	r0, #0
   1b614:	beq	1b860 <_start@@Base+0x7238>
   1b618:	add	r3, sp, #448	; 0x1c0
   1b61c:	ldrd	r2, [r3]
   1b620:	strd	r2, [r0]
   1b624:	b	1b1f8 <_start@@Base+0x6bd0>
   1b628:	add	r3, sp, #448	; 0x1c0
   1b62c:	str	r3, [sp]
   1b630:	ldr	r3, [pc, #-168]	; 1b590 <_start@@Base+0x6f68>
   1b634:	add	r3, r3, #168	; 0xa8
   1b638:	mov	r2, fp
   1b63c:	mov	r1, r0
   1b640:	mov	r0, r6
   1b644:	bl	19084 <_start@@Base+0x4a5c>
   1b648:	cmp	fp, r0
   1b64c:	cmpne	r7, r0
   1b650:	movne	r7, r0
   1b654:	bne	1b5e0 <_start@@Base+0x6fb8>
   1b658:	add	r3, sp, #416	; 0x1a0
   1b65c:	ldrd	r8, [r3]
   1b660:	mov	r7, r0
   1b664:	b	1b7b0 <_start@@Base+0x7188>
   1b668:	add	r4, r0, #8
   1b66c:	mov	r1, fp
   1b670:	mov	r0, r4
   1b674:	bl	14750 <_start@@Base+0x128>
   1b678:	mov	r0, #0
   1b67c:	and	r1, r1, #-16777216	; 0xff000000
   1b680:	cmp	r1, #889192448	; 0x35000000
   1b684:	cmpeq	r0, #0
   1b688:	beq	1b6a4 <_start@@Base+0x707c>
   1b68c:	mov	r2, fp
   1b690:	mov	r1, r4
   1b694:	mov	r0, r6
   1b698:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1b69c:	mov	r7, r0
   1b6a0:	b	1b1f8 <_start@@Base+0x6bd0>
   1b6a4:	mov	r3, #1
   1b6a8:	mov	r2, fp
   1b6ac:	mov	r1, r4
   1b6b0:	mov	r0, r6
   1b6b4:	bl	17de0 <_start@@Base+0x37b8>
   1b6b8:	mov	r5, r0
   1b6bc:	cmp	r4, r0
   1b6c0:	beq	1b77c <_start@@Base+0x7154>
   1b6c4:	add	r3, sp, #472	; 0x1d8
   1b6c8:	mov	r2, #0
   1b6cc:	str	r2, [r3, #-24]!	; 0xffffffe8
   1b6d0:	mov	r2, fp
   1b6d4:	mov	r1, r0
   1b6d8:	mov	r0, r6
   1b6dc:	bl	17aec <_start@@Base+0x34c4>
   1b6e0:	mov	r7, r0
   1b6e4:	cmp	r5, r0
   1b6e8:	beq	1b72c <_start@@Base+0x7104>
   1b6ec:	ldr	r3, [sp, #448]	; 0x1c0
   1b6f0:	cmp	r3, #0
   1b6f4:	bne	1b704 <_start@@Base+0x70dc>
   1b6f8:	ldr	r3, [r6, #8]
   1b6fc:	tst	r3, #2
   1b700:	beq	1b1f8 <_start@@Base+0x6bd0>
   1b704:	mov	r3, #4
   1b708:	mov	r2, r3
   1b70c:	mov	r1, #8
   1b710:	ldr	r0, [r6]
   1b714:	bl	28e20 <flatcc_builder_table_add@@Base>
   1b718:	cmp	r0, #0
   1b71c:	beq	1b75c <_start@@Base+0x7134>
   1b720:	ldr	r3, [sp, #448]	; 0x1c0
   1b724:	str	r3, [r0]
   1b728:	b	1b1f8 <_start@@Base+0x6bd0>
   1b72c:	add	r3, sp, #448	; 0x1c0
   1b730:	str	r3, [sp]
   1b734:	mov	r3, sl
   1b738:	mov	r2, fp
   1b73c:	mov	r1, r0
   1b740:	mov	r0, r6
   1b744:	bl	18808 <_start@@Base+0x41e0>
   1b748:	cmp	fp, r0
   1b74c:	cmpne	r7, r0
   1b750:	beq	1b770 <_start@@Base+0x7148>
   1b754:	mov	r7, r0
   1b758:	b	1b6ec <_start@@Base+0x70c4>
   1b75c:	add	r3, sp, #416	; 0x1a0
   1b760:	ldrd	r8, [r3]
   1b764:	mov	r0, r7
   1b768:	mov	r7, r0
   1b76c:	b	1b7b0 <_start@@Base+0x7188>
   1b770:	add	r3, sp, #416	; 0x1a0
   1b774:	ldrd	r8, [r3]
   1b778:	b	1b768 <_start@@Base+0x7140>
   1b77c:	mov	r2, fp
   1b780:	mov	r1, r0
   1b784:	mov	r0, r6
   1b788:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1b78c:	mov	r7, r0
   1b790:	b	1b1f8 <_start@@Base+0x6bd0>
   1b794:	mov	sl, r9
   1b798:	add	r3, sp, #416	; 0x1a0
   1b79c:	ldrd	r8, [r3]
   1b7a0:	ldr	r3, [sp, #28]
   1b7a4:	ldr	r3, [r3, #20]
   1b7a8:	cmp	r3, #0
   1b7ac:	beq	1b7cc <_start@@Base+0x71a4>
   1b7b0:	mov	r3, #33	; 0x21
   1b7b4:	mov	r2, fp
   1b7b8:	mov	r1, r7
   1b7bc:	ldr	r0, [sp, #28]
   1b7c0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1b7c4:	mov	r6, r0
   1b7c8:	b	1c0a4 <_start@@Base+0x7a7c>
   1b7cc:	ldr	r3, [sp, #28]
   1b7d0:	ldr	r0, [r3]
   1b7d4:	bl	27e74 <flatcc_builder_end_table@@Base>
   1b7d8:	subs	r4, r0, #0
   1b7dc:	beq	1b7b0 <_start@@Base+0x7188>
   1b7e0:	mov	r1, #0
   1b7e4:	ldr	r3, [sp, #28]
   1b7e8:	ldr	r0, [r3]
   1b7ec:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   1b7f0:	cmp	r0, #0
   1b7f4:	beq	1c374 <_start@@Base+0x7d4c>
   1b7f8:	str	r4, [r0]
   1b7fc:	b	1c154 <_start@@Base+0x7b2c>
   1b800:	add	r3, sp, #416	; 0x1a0
   1b804:	ldrd	r8, [r3]
   1b808:	b	1b7b0 <_start@@Base+0x7188>
   1b80c:	add	r3, sp, #416	; 0x1a0
   1b810:	ldrd	r8, [r3]
   1b814:	b	1b7b0 <_start@@Base+0x7188>
   1b818:	add	r3, sp, #416	; 0x1a0
   1b81c:	ldrd	r8, [r3]
   1b820:	b	1b7b0 <_start@@Base+0x7188>
   1b824:	add	r3, sp, #416	; 0x1a0
   1b828:	ldrd	r8, [r3]
   1b82c:	b	1b7b0 <_start@@Base+0x7188>
   1b830:	add	r3, sp, #416	; 0x1a0
   1b834:	ldrd	r8, [r3]
   1b838:	b	1b7b0 <_start@@Base+0x7188>
   1b83c:	add	r3, sp, #416	; 0x1a0
   1b840:	ldrd	r8, [r3]
   1b844:	b	1b7b0 <_start@@Base+0x7188>
   1b848:	add	r3, sp, #416	; 0x1a0
   1b84c:	ldrd	r8, [r3]
   1b850:	b	1b7b0 <_start@@Base+0x7188>
   1b854:	add	r3, sp, #416	; 0x1a0
   1b858:	ldrd	r8, [r3]
   1b85c:	b	1b7b0 <_start@@Base+0x7188>
   1b860:	add	r3, sp, #416	; 0x1a0
   1b864:	ldrd	r8, [r3]
   1b868:	b	1b7b0 <_start@@Base+0x7188>
   1b86c:	mov	r6, r0
   1b870:	b	1a614 <_start@@Base+0x5fec>
   1b874:	mov	r3, #6
   1b878:	mov	r2, fp
   1b87c:	mov	r1, r6
   1b880:	ldr	r4, [sp, #28]
   1b884:	mov	r0, r4
   1b888:	bl	17de0 <_start@@Base+0x37b8>
   1b88c:	mov	r7, r0
   1b890:	cmp	r6, r0
   1b894:	beq	1c120 <_start@@Base+0x7af8>
   1b898:	mov	r1, #2
   1b89c:	ldr	r0, [r4]
   1b8a0:	bl	27424 <flatcc_builder_start_table@@Base>
   1b8a4:	cmp	r0, #0
   1b8a8:	bne	1c08c <_start@@Base+0x7a64>
   1b8ac:	add	r3, sp, #444	; 0x1bc
   1b8b0:	mov	r2, fp
   1b8b4:	mov	r1, r7
   1b8b8:	mov	r0, r4
   1b8bc:	bl	19394 <_start@@Base+0x4d6c>
   1b8c0:	b	1bf0c <_start@@Base+0x78e4>
   1b8c4:	ldrb	r2, [r0, #7]
   1b8c8:	mov	r3, #0
   1b8cc:	ldrb	r4, [r0, #6]
   1b8d0:	mov	r1, #0
   1b8d4:	str	r1, [sp, #260]	; 0x104
   1b8d8:	lsl	r1, r4, #8
   1b8dc:	str	r1, [sp, #256]	; 0x100
   1b8e0:	add	r1, sp, #256	; 0x100
   1b8e4:	ldrd	r4, [r1]
   1b8e8:	orr	r4, r4, r2
   1b8ec:	orr	r5, r5, r3
   1b8f0:	mov	r2, r4
   1b8f4:	mov	r3, r5
   1b8f8:	ldrb	r4, [r0, #5]
   1b8fc:	mov	r1, #0
   1b900:	str	r1, [sp, #188]	; 0xbc
   1b904:	lsl	r1, r4, #16
   1b908:	str	r1, [sp, #184]	; 0xb8
   1b90c:	ldrd	r4, [sp, #184]	; 0xb8
   1b910:	orr	r4, r4, r2
   1b914:	orr	r5, r5, r3
   1b918:	mov	r2, r4
   1b91c:	mov	r3, r5
   1b920:	ldrb	r4, [r0, #4]
   1b924:	mov	r1, #0
   1b928:	str	r1, [sp, #108]	; 0x6c
   1b92c:	lsl	r1, r4, #24
   1b930:	str	r1, [sp, #104]	; 0x68
   1b934:	ldrd	r4, [sp, #104]	; 0x68
   1b938:	orr	r4, r4, r2
   1b93c:	orr	r5, r5, r3
   1b940:	mov	r2, r4
   1b944:	mov	r3, r5
   1b948:	ldrb	r1, [r0, #3]
   1b94c:	str	r1, [sp, #76]	; 0x4c
   1b950:	mov	r1, #0
   1b954:	str	r1, [sp, #72]	; 0x48
   1b958:	ldrd	r4, [sp, #72]	; 0x48
   1b95c:	orr	r4, r4, r2
   1b960:	orr	r5, r5, r3
   1b964:	mov	r2, r4
   1b968:	mov	r3, r5
   1b96c:	ldrb	r4, [r0, #2]
   1b970:	lsl	r1, r4, #8
   1b974:	str	r1, [sp, #60]	; 0x3c
   1b978:	mov	r1, #0
   1b97c:	str	r1, [sp, #56]	; 0x38
   1b980:	ldrd	r4, [sp, #56]	; 0x38
   1b984:	orr	r4, r4, r2
   1b988:	orr	r5, r5, r3
   1b98c:	mov	r2, r4
   1b990:	mov	r3, r5
   1b994:	ldrb	r4, [r0, #1]
   1b998:	lsl	r1, r4, #16
   1b99c:	str	r1, [sp, #44]	; 0x2c
   1b9a0:	mov	r1, #0
   1b9a4:	str	r1, [sp, #40]	; 0x28
   1b9a8:	ldrd	r4, [sp, #40]	; 0x28
   1b9ac:	orr	r4, r4, r2
   1b9b0:	orr	r5, r5, r3
   1b9b4:	mov	r2, r4
   1b9b8:	mov	r3, r5
   1b9bc:	ldrb	r4, [r0]
   1b9c0:	lsl	r9, r4, #24
   1b9c4:	mov	r8, #0
   1b9c8:	orr	r2, r2, r8
   1b9cc:	orr	r3, r3, r9
   1b9d0:	add	r5, pc, #912	; 0x390
   1b9d4:	ldrd	r4, [r5]
   1b9d8:	cmp	r3, r5
   1b9dc:	cmpeq	r2, r4
   1b9e0:	bne	1be80 <_start@@Base+0x7858>
   1b9e4:	add	r4, r0, #8
   1b9e8:	sub	r3, sl, r4
   1b9ec:	cmp	r3, #8
   1b9f0:	movcs	r3, #8
   1b9f4:	sub	r3, r3, #1
   1b9f8:	cmp	r3, #7
   1b9fc:	ldrls	pc, [pc, r3, lsl #2]
   1ba00:	b	1bc30 <_start@@Base+0x7608>
   1ba04:	andeq	fp, r1, r4, lsr #24
   1ba08:	andeq	fp, r1, r8, lsl ip
   1ba0c:	andeq	fp, r1, ip, lsl #24
   1ba10:	andeq	fp, r1, r0, lsl #24
   1ba14:	strdeq	fp, [r1], -r4
   1ba18:	andeq	fp, r1, r8, ror #23
   1ba1c:	andeq	fp, r1, r4, lsl #21
   1ba20:	andeq	fp, r1, r8, ror sl
   1ba24:	mov	r2, #0
   1ba28:	mov	r3, #0
   1ba2c:	b	1b8cc <_start@@Base+0x72a4>
   1ba30:	mov	r2, #0
   1ba34:	mov	r3, #0
   1ba38:	b	1b8f8 <_start@@Base+0x72d0>
   1ba3c:	mov	r2, #0
   1ba40:	mov	r3, #0
   1ba44:	b	1b920 <_start@@Base+0x72f8>
   1ba48:	mov	r2, #0
   1ba4c:	mov	r3, #0
   1ba50:	b	1b948 <_start@@Base+0x7320>
   1ba54:	mov	r2, #0
   1ba58:	mov	r3, #0
   1ba5c:	b	1b96c <_start@@Base+0x7344>
   1ba60:	mov	r2, #0
   1ba64:	mov	r3, #0
   1ba68:	b	1b994 <_start@@Base+0x736c>
   1ba6c:	mov	r2, #0
   1ba70:	mov	r3, #0
   1ba74:	b	1b9bc <_start@@Base+0x7394>
   1ba78:	ldrb	r6, [r0, #15]
   1ba7c:	mov	r7, #0
   1ba80:	b	1ba8c <_start@@Base+0x7464>
   1ba84:	mov	r6, #0
   1ba88:	mov	r7, #0
   1ba8c:	ldrb	r2, [r0, #14]
   1ba90:	mov	r1, #0
   1ba94:	str	r1, [sp, #372]	; 0x174
   1ba98:	lsl	r3, r2, #8
   1ba9c:	str	r3, [sp, #368]	; 0x170
   1baa0:	add	r3, sp, #368	; 0x170
   1baa4:	ldrd	r2, [r3]
   1baa8:	orr	r2, r2, r6
   1baac:	orr	r3, r3, r7
   1bab0:	mov	r6, r2
   1bab4:	mov	r7, r3
   1bab8:	ldrb	r2, [r0, #13]
   1babc:	mov	r1, #0
   1bac0:	str	r1, [sp, #324]	; 0x144
   1bac4:	lsl	r3, r2, #16
   1bac8:	str	r3, [sp, #320]	; 0x140
   1bacc:	add	r3, sp, #320	; 0x140
   1bad0:	ldrd	r2, [r3]
   1bad4:	orr	r2, r2, r6
   1bad8:	orr	r3, r3, r7
   1badc:	ldrb	r6, [r0, #12]
   1bae0:	mov	r1, #0
   1bae4:	str	r1, [sp, #268]	; 0x10c
   1bae8:	lsl	r1, r6, #24
   1baec:	str	r1, [sp, #264]	; 0x108
   1baf0:	add	r1, sp, #264	; 0x108
   1baf4:	ldrd	r6, [r1]
   1baf8:	orr	r6, r6, r2
   1bafc:	orr	r7, r7, r3
   1bb00:	mov	r2, r6
   1bb04:	mov	r3, r7
   1bb08:	ldrb	r1, [r0, #11]
   1bb0c:	str	r1, [sp, #236]	; 0xec
   1bb10:	mov	r1, #0
   1bb14:	str	r1, [sp, #232]	; 0xe8
   1bb18:	ldrd	r6, [sp, #232]	; 0xe8
   1bb1c:	orr	r6, r6, r2
   1bb20:	orr	r7, r7, r3
   1bb24:	mov	r2, r6
   1bb28:	mov	r3, r7
   1bb2c:	ldrb	r6, [r0, #10]
   1bb30:	lsl	r1, r6, #8
   1bb34:	str	r1, [sp, #196]	; 0xc4
   1bb38:	mov	r1, #0
   1bb3c:	str	r1, [sp, #192]	; 0xc0
   1bb40:	ldrd	r6, [sp, #192]	; 0xc0
   1bb44:	orr	r6, r6, r2
   1bb48:	orr	r7, r7, r3
   1bb4c:	mov	r2, r6
   1bb50:	mov	r3, r7
   1bb54:	ldrb	r6, [r0, #9]
   1bb58:	lsl	r1, r6, #16
   1bb5c:	str	r1, [sp, #156]	; 0x9c
   1bb60:	mov	r1, #0
   1bb64:	str	r1, [sp, #152]	; 0x98
   1bb68:	ldrd	r6, [sp, #152]	; 0x98
   1bb6c:	orr	r6, r6, r2
   1bb70:	orr	r7, r7, r3
   1bb74:	mov	r2, r6
   1bb78:	mov	r3, r7
   1bb7c:	ldrb	r6, [r0, #8]
   1bb80:	lsl	r1, r6, #24
   1bb84:	str	r1, [sp, #116]	; 0x74
   1bb88:	mov	r1, #0
   1bb8c:	str	r1, [sp, #112]	; 0x70
   1bb90:	ldrd	r6, [sp, #112]	; 0x70
   1bb94:	orr	r6, r6, r2
   1bb98:	orr	r7, r7, r3
   1bb9c:	mov	r2, r6
   1bba0:	mov	r3, r7
   1bba4:	add	r7, pc, #452	; 0x1c4
   1bba8:	ldrd	r6, [r7]
   1bbac:	cmp	r3, r7
   1bbb0:	cmpeq	r2, r6
   1bbb4:	beq	1bc3c <_start@@Base+0x7614>
   1bbb8:	bic	r2, r2, #255	; 0xff
   1bbbc:	add	r1, pc, #436	; 0x1b4
   1bbc0:	ldrd	r0, [r1]
   1bbc4:	cmp	r3, r1
   1bbc8:	cmpeq	r2, r0
   1bbcc:	beq	1bd8c <_start@@Base+0x7764>
   1bbd0:	mov	r2, fp
   1bbd4:	mov	r1, r4
   1bbd8:	ldr	r0, [sp, #28]
   1bbdc:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1bbe0:	mov	r6, r0
   1bbe4:	b	1be94 <_start@@Base+0x786c>
   1bbe8:	mov	r6, #0
   1bbec:	mov	r7, #0
   1bbf0:	b	1bab8 <_start@@Base+0x7490>
   1bbf4:	mov	r2, #0
   1bbf8:	mov	r3, #0
   1bbfc:	b	1badc <_start@@Base+0x74b4>
   1bc00:	mov	r2, #0
   1bc04:	mov	r3, #0
   1bc08:	b	1bb08 <_start@@Base+0x74e0>
   1bc0c:	mov	r2, #0
   1bc10:	mov	r3, #0
   1bc14:	b	1bb2c <_start@@Base+0x7504>
   1bc18:	mov	r2, #0
   1bc1c:	mov	r3, #0
   1bc20:	b	1bb54 <_start@@Base+0x752c>
   1bc24:	mov	r2, #0
   1bc28:	mov	r3, #0
   1bc2c:	b	1bb7c <_start@@Base+0x7554>
   1bc30:	mov	r2, #0
   1bc34:	mov	r3, #0
   1bc38:	b	1bba4 <_start@@Base+0x757c>
   1bc3c:	add	r4, r0, #16
   1bc40:	mov	r1, fp
   1bc44:	mov	r0, r4
   1bc48:	bl	14750 <_start@@Base+0x128>
   1bc4c:	and	r0, r0, #-16777216	; 0xff000000
   1bc50:	add	r3, pc, #296	; 0x128
   1bc54:	ldrd	r2, [r3]
   1bc58:	cmp	r1, r3
   1bc5c:	cmpeq	r0, r2
   1bc60:	beq	1bc7c <_start@@Base+0x7654>
   1bc64:	mov	r2, fp
   1bc68:	mov	r1, r4
   1bc6c:	ldr	r0, [sp, #28]
   1bc70:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1bc74:	mov	r6, r0
   1bc78:	b	1be94 <_start@@Base+0x786c>
   1bc7c:	mov	r3, #5
   1bc80:	mov	r2, fp
   1bc84:	mov	r1, r4
   1bc88:	ldr	r6, [sp, #28]
   1bc8c:	mov	r0, r6
   1bc90:	bl	17de0 <_start@@Base+0x37b8>
   1bc94:	mov	r5, r0
   1bc98:	cmp	r4, r0
   1bc9c:	beq	1bd4c <_start@@Base+0x7724>
   1bca0:	add	r3, sp, #472	; 0x1d8
   1bca4:	mov	r2, #0
   1bca8:	str	r2, [r3, #-24]!	; 0xffffffe8
   1bcac:	mov	r2, fp
   1bcb0:	mov	r1, r0
   1bcb4:	mov	r0, r6
   1bcb8:	bl	17aec <_start@@Base+0x34c4>
   1bcbc:	mov	r6, r0
   1bcc0:	cmp	r5, r0
   1bcc4:	beq	1bd10 <_start@@Base+0x76e8>
   1bcc8:	ldr	r3, [sp, #448]	; 0x1c0
   1bccc:	cmp	r3, #0
   1bcd0:	bne	1bce4 <_start@@Base+0x76bc>
   1bcd4:	ldr	r3, [sp, #28]
   1bcd8:	ldr	r3, [r3, #8]
   1bcdc:	tst	r3, #2
   1bce0:	beq	1be94 <_start@@Base+0x786c>
   1bce4:	mov	r3, #4
   1bce8:	mov	r2, r3
   1bcec:	mov	r1, #1
   1bcf0:	ldr	r0, [sp, #28]
   1bcf4:	ldr	r0, [r0]
   1bcf8:	bl	28e20 <flatcc_builder_table_add@@Base>
   1bcfc:	cmp	r0, #0
   1bd00:	beq	1bd44 <_start@@Base+0x771c>
   1bd04:	ldr	r3, [sp, #448]	; 0x1c0
   1bd08:	str	r3, [r0]
   1bd0c:	b	1be94 <_start@@Base+0x786c>
   1bd10:	add	r3, sp, #448	; 0x1c0
   1bd14:	str	r3, [sp]
   1bd18:	ldr	r3, [pc, #104]	; 1bd88 <_start@@Base+0x7760>
   1bd1c:	add	r3, r3, #192	; 0xc0
   1bd20:	mov	r2, fp
   1bd24:	mov	r1, r0
   1bd28:	ldr	r0, [sp, #28]
   1bd2c:	bl	18808 <_start@@Base+0x41e0>
   1bd30:	cmp	fp, r0
   1bd34:	cmpne	r6, r0
   1bd38:	movne	r6, r0
   1bd3c:	bne	1bcc8 <_start@@Base+0x76a0>
   1bd40:	mov	r6, r0
   1bd44:	mov	r7, r6
   1bd48:	b	1c08c <_start@@Base+0x7a64>
   1bd4c:	mov	r2, fp
   1bd50:	mov	r1, r0
   1bd54:	ldr	r0, [sp, #28]
   1bd58:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1bd5c:	mov	r6, r0
   1bd60:	b	1be94 <_start@@Base+0x786c>
   1bd64:	nop			; (mov r0, r0)
   1bd68:	svcpl	0x00626262
   1bd6c:	cmnvs	r1, r1, ror #2
   1bd70:	cmnvs	r2, pc, asr r4
   1bd74:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1bd78:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1bd7c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1bd80:	movwvc	r0, #0
   1bd84:	cmnvc	r4, #112, 10	; 0x1c000000
   1bd88:	andeq	r3, r5, r0, ror r0
   1bd8c:	mov	r3, #7
   1bd90:	mov	r2, fp
   1bd94:	mov	r1, r4
   1bd98:	ldr	r6, [sp, #28]
   1bd9c:	mov	r0, r6
   1bda0:	bl	17de0 <_start@@Base+0x37b8>
   1bda4:	mov	r5, r0
   1bda8:	cmp	r4, r0
   1bdac:	beq	1be68 <_start@@Base+0x7840>
   1bdb0:	add	r1, sp, #472	; 0x1d8
   1bdb4:	mov	r2, #0
   1bdb8:	mov	r3, #0
   1bdbc:	strd	r2, [r1, #-24]!	; 0xffffffe8
   1bdc0:	mov	r3, r1
   1bdc4:	mov	r2, fp
   1bdc8:	mov	r1, r0
   1bdcc:	mov	r0, r6
   1bdd0:	bl	17cd4 <_start@@Base+0x36ac>
   1bdd4:	mov	r6, r0
   1bdd8:	cmp	r5, r0
   1bddc:	beq	1be30 <_start@@Base+0x7808>
   1bde0:	add	r3, sp, #448	; 0x1c0
   1bde4:	ldrd	r2, [r3]
   1bde8:	orrs	r3, r2, r3
   1bdec:	bne	1be00 <_start@@Base+0x77d8>
   1bdf0:	ldr	r3, [sp, #28]
   1bdf4:	ldr	r3, [r3, #8]
   1bdf8:	tst	r3, #2
   1bdfc:	beq	1be94 <_start@@Base+0x786c>
   1be00:	mov	r3, #8
   1be04:	mov	r2, r3
   1be08:	mov	r1, #0
   1be0c:	ldr	r0, [sp, #28]
   1be10:	ldr	r0, [r0]
   1be14:	bl	28e20 <flatcc_builder_table_add@@Base>
   1be18:	cmp	r0, #0
   1be1c:	beq	1be60 <_start@@Base+0x7838>
   1be20:	add	r3, sp, #448	; 0x1c0
   1be24:	ldrd	r2, [r3]
   1be28:	strd	r2, [r0]
   1be2c:	b	1be94 <_start@@Base+0x786c>
   1be30:	add	r3, sp, #448	; 0x1c0
   1be34:	str	r3, [sp]
   1be38:	ldr	r3, [sp, #428]	; 0x1ac
   1be3c:	mov	r2, fp
   1be40:	mov	r1, r0
   1be44:	ldr	r0, [sp, #28]
   1be48:	bl	19084 <_start@@Base+0x4a5c>
   1be4c:	cmp	fp, r0
   1be50:	cmpne	r6, r0
   1be54:	movne	r6, r0
   1be58:	bne	1bde0 <_start@@Base+0x77b8>
   1be5c:	mov	r6, r0
   1be60:	mov	r7, r6
   1be64:	b	1c08c <_start@@Base+0x7a64>
   1be68:	mov	r2, fp
   1be6c:	mov	r1, r0
   1be70:	ldr	r0, [sp, #28]
   1be74:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1be78:	mov	r6, r0
   1be7c:	b	1be94 <_start@@Base+0x786c>
   1be80:	mov	r2, fp
   1be84:	mov	r1, r0
   1be88:	ldr	r0, [sp, #28]
   1be8c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1be90:	mov	r6, r0
   1be94:	sub	r3, sl, r6
   1be98:	cmp	r3, #1
   1be9c:	ble	1beb0 <_start@@Base+0x7888>
   1bea0:	ldrb	r3, [r6]
   1bea4:	cmp	r3, #32
   1bea8:	bhi	1bec4 <_start@@Base+0x789c>
   1beac:	beq	1bf80 <_start@@Base+0x7958>
   1beb0:	mov	r2, fp
   1beb4:	mov	r1, r6
   1beb8:	ldr	r0, [sp, #28]
   1bebc:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1bec0:	mov	r6, r0
   1bec4:	cmp	fp, r6
   1bec8:	moveq	r3, #0
   1becc:	streq	r3, [sp, #444]	; 0x1bc
   1bed0:	moveq	r0, r6
   1bed4:	beq	1bf0c <_start@@Base+0x78e4>
   1bed8:	ldrb	r3, [r6]
   1bedc:	cmp	r3, #44	; 0x2c
   1bee0:	beq	1bfdc <_start@@Base+0x79b4>
   1bee4:	mov	r3, #0
   1bee8:	str	r3, [sp, #444]	; 0x1bc
   1beec:	ldrb	r3, [r6]
   1bef0:	cmp	r3, #125	; 0x7d
   1bef4:	beq	1bf94 <_start@@Base+0x796c>
   1bef8:	mov	r3, #10
   1befc:	mov	r2, fp
   1bf00:	mov	r1, r6
   1bf04:	ldr	r0, [sp, #28]
   1bf08:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1bf0c:	ldr	r3, [sp, #444]	; 0x1bc
   1bf10:	cmp	r3, #0
   1bf14:	beq	1c078 <_start@@Base+0x7a50>
   1bf18:	cmp	fp, r0
   1bf1c:	beq	1be80 <_start@@Base+0x7858>
   1bf20:	ldrb	r3, [r0]
   1bf24:	cmp	r3, #34	; 0x22
   1bf28:	addeq	r0, r0, #1
   1bf2c:	beq	1bf44 <_start@@Base+0x791c>
   1bf30:	mov	r3, #5
   1bf34:	mov	r2, fp
   1bf38:	mov	r1, r0
   1bf3c:	ldr	r0, [sp, #28]
   1bf40:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1bf44:	sub	r3, sl, r0
   1bf48:	cmp	r3, #8
   1bf4c:	movcs	r3, #8
   1bf50:	sub	r3, r3, #1
   1bf54:	cmp	r3, #7
   1bf58:	ldrls	pc, [pc, r3, lsl #2]
   1bf5c:	b	1be80 <_start@@Base+0x7858>
   1bf60:	andeq	fp, r1, ip, ror #20
   1bf64:	andeq	fp, r1, r0, ror #20
   1bf68:	andeq	fp, r1, r4, asr sl
   1bf6c:	andeq	fp, r1, r8, asr #20
   1bf70:	andeq	fp, r1, ip, lsr sl
   1bf74:	andeq	fp, r1, r0, lsr sl
   1bf78:	andeq	fp, r1, r4, lsr #20
   1bf7c:	andeq	fp, r1, r4, asr #17
   1bf80:	ldrb	r3, [r6, #1]
   1bf84:	cmp	r3, #32
   1bf88:	addhi	r6, r6, #1
   1bf8c:	bls	1beb0 <_start@@Base+0x7888>
   1bf90:	b	1bec4 <_start@@Base+0x789c>
   1bf94:	add	r0, r6, #1
   1bf98:	sub	r3, sl, r0
   1bf9c:	cmp	r3, #1
   1bfa0:	ble	1bfb4 <_start@@Base+0x798c>
   1bfa4:	ldrb	r3, [r6, #1]
   1bfa8:	cmp	r3, #32
   1bfac:	bhi	1bf0c <_start@@Base+0x78e4>
   1bfb0:	beq	1bfc8 <_start@@Base+0x79a0>
   1bfb4:	mov	r2, fp
   1bfb8:	mov	r1, r0
   1bfbc:	ldr	r0, [sp, #28]
   1bfc0:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1bfc4:	b	1bf0c <_start@@Base+0x78e4>
   1bfc8:	ldrb	r3, [r6, #2]
   1bfcc:	cmp	r3, #32
   1bfd0:	addhi	r0, r6, #2
   1bfd4:	bls	1bfb4 <_start@@Base+0x798c>
   1bfd8:	b	1bf0c <_start@@Base+0x78e4>
   1bfdc:	add	r0, r6, #1
   1bfe0:	sub	r3, sl, r0
   1bfe4:	cmp	r3, #1
   1bfe8:	ble	1bffc <_start@@Base+0x79d4>
   1bfec:	ldrb	r3, [r6, #1]
   1bff0:	cmp	r3, #32
   1bff4:	bhi	1c00c <_start@@Base+0x79e4>
   1bff8:	beq	1c044 <_start@@Base+0x7a1c>
   1bffc:	mov	r2, fp
   1c000:	mov	r1, r0
   1c004:	ldr	r0, [sp, #28]
   1c008:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1c00c:	cmp	fp, r0
   1c010:	beq	1c058 <_start@@Base+0x7a30>
   1c014:	ldrb	r3, [r0]
   1c018:	cmp	r3, #125	; 0x7d
   1c01c:	movne	r3, #1
   1c020:	strne	r3, [sp, #444]	; 0x1bc
   1c024:	bne	1bf0c <_start@@Base+0x78e4>
   1c028:	mov	r3, #0
   1c02c:	str	r3, [sp, #444]	; 0x1bc
   1c030:	mov	r2, fp
   1c034:	add	r1, r0, #1
   1c038:	ldr	r0, [sp, #28]
   1c03c:	bl	17d9c <_start@@Base+0x3774>
   1c040:	b	1bf0c <_start@@Base+0x78e4>
   1c044:	ldrb	r3, [r6, #2]
   1c048:	cmp	r3, #32
   1c04c:	addhi	r0, r6, #2
   1c050:	bls	1bffc <_start@@Base+0x79d4>
   1c054:	b	1c00c <_start@@Base+0x79e4>
   1c058:	mov	r3, #0
   1c05c:	str	r3, [sp, #444]	; 0x1bc
   1c060:	mov	r3, #10
   1c064:	mov	r2, fp
   1c068:	mov	r1, r0
   1c06c:	ldr	r0, [sp, #28]
   1c070:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1c074:	b	1bf0c <_start@@Base+0x78e4>
   1c078:	mov	r7, r0
   1c07c:	ldr	r3, [sp, #28]
   1c080:	ldr	r3, [r3, #20]
   1c084:	cmp	r3, #0
   1c088:	beq	1c0ec <_start@@Base+0x7ac4>
   1c08c:	mov	r3, #33	; 0x21
   1c090:	mov	r2, fp
   1c094:	mov	r1, r7
   1c098:	ldr	r0, [sp, #28]
   1c09c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1c0a0:	mov	r6, r0
   1c0a4:	mov	r3, #33	; 0x21
   1c0a8:	mov	r2, fp
   1c0ac:	mov	r1, r6
   1c0b0:	ldr	r0, [sp, #28]
   1c0b4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1c0b8:	mov	r7, r0
   1c0bc:	ldr	r3, [sp, #464]	; 0x1d0
   1c0c0:	cmp	r3, #0
   1c0c4:	beq	1c47c <_start@@Base+0x7e54>
   1c0c8:	mov	r1, #0
   1c0cc:	ldr	r3, [sp, #28]
   1c0d0:	ldr	r0, [r3]
   1c0d4:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   1c0d8:	cmp	r0, #0
   1c0dc:	beq	1c488 <_start@@Base+0x7e60>
   1c0e0:	ldr	r3, [sp, #464]	; 0x1d0
   1c0e4:	str	r3, [r0]
   1c0e8:	b	19fc0 <_start@@Base+0x5998>
   1c0ec:	ldr	r3, [sp, #28]
   1c0f0:	ldr	r0, [r3]
   1c0f4:	bl	27e74 <flatcc_builder_end_table@@Base>
   1c0f8:	subs	r4, r0, #0
   1c0fc:	beq	1c08c <_start@@Base+0x7a64>
   1c100:	mov	r1, #2
   1c104:	ldr	r3, [sp, #28]
   1c108:	ldr	r0, [r3]
   1c10c:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   1c110:	cmp	r0, #0
   1c114:	beq	1c37c <_start@@Base+0x7d54>
   1c118:	str	r4, [r0]
   1c11c:	b	1c154 <_start@@Base+0x7b2c>
   1c120:	mov	r2, fp
   1c124:	mov	r1, r0
   1c128:	ldr	r0, [sp, #28]
   1c12c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1c130:	mov	r7, r0
   1c134:	b	1c154 <_start@@Base+0x7b2c>
   1c138:	mov	r6, r0
   1c13c:	b	1a628 <_start@@Base+0x6000>
   1c140:	mov	r2, fp
   1c144:	mov	r1, r0
   1c148:	ldr	r0, [sp, #28]
   1c14c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1c150:	mov	r7, r0
   1c154:	sub	r3, sl, r7
   1c158:	cmp	r3, #1
   1c15c:	ble	1c170 <_start@@Base+0x7b48>
   1c160:	ldrb	r3, [r7]
   1c164:	cmp	r3, #32
   1c168:	bhi	1c184 <_start@@Base+0x7b5c>
   1c16c:	beq	1c240 <_start@@Base+0x7c18>
   1c170:	mov	r2, fp
   1c174:	mov	r1, r7
   1c178:	ldr	r0, [sp, #28]
   1c17c:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1c180:	mov	r7, r0
   1c184:	cmp	fp, r7
   1c188:	moveq	r3, #0
   1c18c:	streq	r3, [sp, #436]	; 0x1b4
   1c190:	moveq	r0, r7
   1c194:	beq	1c1cc <_start@@Base+0x7ba4>
   1c198:	ldrb	r3, [r7]
   1c19c:	cmp	r3, #44	; 0x2c
   1c1a0:	beq	1c29c <_start@@Base+0x7c74>
   1c1a4:	mov	r3, #0
   1c1a8:	str	r3, [sp, #436]	; 0x1b4
   1c1ac:	ldrb	r3, [r7]
   1c1b0:	cmp	r3, #125	; 0x7d
   1c1b4:	beq	1c254 <_start@@Base+0x7c2c>
   1c1b8:	mov	r3, #10
   1c1bc:	mov	r2, fp
   1c1c0:	mov	r1, r7
   1c1c4:	ldr	r0, [sp, #28]
   1c1c8:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1c1cc:	ldr	r3, [sp, #436]	; 0x1b4
   1c1d0:	cmp	r3, #0
   1c1d4:	beq	1c338 <_start@@Base+0x7d10>
   1c1d8:	cmp	fp, r0
   1c1dc:	beq	1c140 <_start@@Base+0x7b18>
   1c1e0:	ldrb	r3, [r0]
   1c1e4:	cmp	r3, #34	; 0x22
   1c1e8:	addeq	r0, r0, #1
   1c1ec:	beq	1c204 <_start@@Base+0x7bdc>
   1c1f0:	mov	r3, #5
   1c1f4:	mov	r2, fp
   1c1f8:	mov	r1, r0
   1c1fc:	ldr	r0, [sp, #28]
   1c200:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1c204:	sub	r3, sl, r0
   1c208:	cmp	r3, #8
   1c20c:	movcs	r3, #8
   1c210:	sub	r3, r3, #1
   1c214:	cmp	r3, #7
   1c218:	ldrls	pc, [pc, r3, lsl #2]
   1c21c:	b	1c140 <_start@@Base+0x7b18>
   1c220:	andeq	sl, r1, ip, lsl #8
   1c224:	andeq	sl, r1, r0, lsl #8
   1c228:	strdeq	sl, [r1], -r4
   1c22c:	andeq	sl, r1, r8, ror #7
   1c230:	ldrdeq	sl, [r1], -ip
   1c234:	ldrdeq	sl, [r1], -r0
   1c238:	andeq	sl, r1, r4, asr #7
   1c23c:	andeq	sl, r1, r0, asr r2
   1c240:	ldrb	r3, [r7, #1]
   1c244:	cmp	r3, #32
   1c248:	addhi	r7, r7, #1
   1c24c:	bls	1c170 <_start@@Base+0x7b48>
   1c250:	b	1c184 <_start@@Base+0x7b5c>
   1c254:	add	r0, r7, #1
   1c258:	sub	r3, sl, r0
   1c25c:	cmp	r3, #1
   1c260:	ble	1c274 <_start@@Base+0x7c4c>
   1c264:	ldrb	r3, [r7, #1]
   1c268:	cmp	r3, #32
   1c26c:	bhi	1c1cc <_start@@Base+0x7ba4>
   1c270:	beq	1c288 <_start@@Base+0x7c60>
   1c274:	mov	r2, fp
   1c278:	mov	r1, r0
   1c27c:	ldr	r0, [sp, #28]
   1c280:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1c284:	b	1c1cc <_start@@Base+0x7ba4>
   1c288:	ldrb	r3, [r7, #2]
   1c28c:	cmp	r3, #32
   1c290:	addhi	r0, r7, #2
   1c294:	bls	1c274 <_start@@Base+0x7c4c>
   1c298:	b	1c1cc <_start@@Base+0x7ba4>
   1c29c:	add	r0, r7, #1
   1c2a0:	sub	r3, sl, r0
   1c2a4:	cmp	r3, #1
   1c2a8:	ble	1c2bc <_start@@Base+0x7c94>
   1c2ac:	ldrb	r3, [r7, #1]
   1c2b0:	cmp	r3, #32
   1c2b4:	bhi	1c2cc <_start@@Base+0x7ca4>
   1c2b8:	beq	1c304 <_start@@Base+0x7cdc>
   1c2bc:	mov	r2, fp
   1c2c0:	mov	r1, r0
   1c2c4:	ldr	r0, [sp, #28]
   1c2c8:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1c2cc:	cmp	fp, r0
   1c2d0:	beq	1c318 <_start@@Base+0x7cf0>
   1c2d4:	ldrb	r3, [r0]
   1c2d8:	cmp	r3, #125	; 0x7d
   1c2dc:	movne	r3, #1
   1c2e0:	strne	r3, [sp, #436]	; 0x1b4
   1c2e4:	bne	1c1cc <_start@@Base+0x7ba4>
   1c2e8:	mov	r3, #0
   1c2ec:	str	r3, [sp, #436]	; 0x1b4
   1c2f0:	mov	r2, fp
   1c2f4:	add	r1, r0, #1
   1c2f8:	ldr	r0, [sp, #28]
   1c2fc:	bl	17d9c <_start@@Base+0x3774>
   1c300:	b	1c1cc <_start@@Base+0x7ba4>
   1c304:	ldrb	r3, [r7, #2]
   1c308:	cmp	r3, #32
   1c30c:	addhi	r0, r7, #2
   1c310:	bls	1c2bc <_start@@Base+0x7c94>
   1c314:	b	1c2cc <_start@@Base+0x7ca4>
   1c318:	mov	r3, #0
   1c31c:	str	r3, [sp, #436]	; 0x1b4
   1c320:	mov	r3, #10
   1c324:	mov	r2, fp
   1c328:	mov	r1, r0
   1c32c:	ldr	r0, [sp, #28]
   1c330:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1c334:	b	1c1cc <_start@@Base+0x7ba4>
   1c338:	mov	r6, r0
   1c33c:	ldr	r3, [sp, #28]
   1c340:	ldr	r3, [r3, #20]
   1c344:	cmp	r3, #0
   1c348:	bne	1c0a4 <_start@@Base+0x7a7c>
   1c34c:	ldr	r3, [sp, #28]
   1c350:	ldr	r0, [r3]
   1c354:	bl	27e74 <flatcc_builder_end_table@@Base>
   1c358:	str	r0, [sp, #464]	; 0x1d0
   1c35c:	cmp	r0, #0
   1c360:	beq	1c0a4 <_start@@Base+0x7a7c>
   1c364:	mov	r7, r6
   1c368:	b	1c0bc <_start@@Base+0x7a94>
   1c36c:	mov	r6, r7
   1c370:	b	1c0a4 <_start@@Base+0x7a7c>
   1c374:	mov	r6, r7
   1c378:	b	1c0a4 <_start@@Base+0x7a7c>
   1c37c:	mov	r6, r7
   1c380:	b	1c0a4 <_start@@Base+0x7a7c>
   1c384:	mov	r2, fp
   1c388:	mov	r1, r0
   1c38c:	ldr	r0, [sp, #28]
   1c390:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1c394:	mov	r7, r0
   1c398:	b	19fc0 <_start@@Base+0x5998>
   1c39c:	mov	r3, #5
   1c3a0:	mov	r2, fp
   1c3a4:	mov	r1, r7
   1c3a8:	ldr	r4, [sp, #28]
   1c3ac:	mov	r0, r4
   1c3b0:	bl	17de0 <_start@@Base+0x37b8>
   1c3b4:	mov	r1, r0
   1c3b8:	cmp	r0, r7
   1c3bc:	beq	1c400 <_start@@Base+0x7dd8>
   1c3c0:	add	r3, sp, #464	; 0x1d0
   1c3c4:	mov	r2, fp
   1c3c8:	mov	r0, r4
   1c3cc:	bl	19454 <_start@@Base+0x4e2c>
   1c3d0:	mov	r7, r0
   1c3d4:	ldr	r3, [sp, #464]	; 0x1d0
   1c3d8:	cmp	r3, #0
   1c3dc:	beq	1c494 <_start@@Base+0x7e6c>
   1c3e0:	mov	r1, #1
   1c3e4:	ldr	r0, [r4]
   1c3e8:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   1c3ec:	cmp	r0, #0
   1c3f0:	beq	1c4a0 <_start@@Base+0x7e78>
   1c3f4:	ldr	r3, [sp, #464]	; 0x1d0
   1c3f8:	str	r3, [r0]
   1c3fc:	b	19fc0 <_start@@Base+0x5998>
   1c400:	mov	r2, fp
   1c404:	ldr	r0, [sp, #28]
   1c408:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1c40c:	mov	r7, r0
   1c410:	b	19fc0 <_start@@Base+0x5998>
   1c414:	ldr	r9, [sp, #28]
   1c418:	mov	r8, fp
   1c41c:	ldr	r3, [r9, #20]
   1c420:	cmp	r3, #0
   1c424:	beq	1c444 <_start@@Base+0x7e1c>
   1c428:	mov	r3, #33	; 0x21
   1c42c:	mov	r2, r8
   1c430:	mov	r1, r7
   1c434:	mov	r0, r9
   1c438:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1c43c:	add	sp, sp, #476	; 0x1dc
   1c440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c444:	ldr	r3, [sp, #460]	; 0x1cc
   1c448:	mov	r2, r8
   1c44c:	mov	r1, r7
   1c450:	mov	r0, r9
   1c454:	bl	2ed0c <flatcc_json_parser_finalize_unions@@Base>
   1c458:	mov	r7, r0
   1c45c:	ldr	r0, [r9]
   1c460:	bl	27e74 <flatcc_builder_end_table@@Base>
   1c464:	ldr	r3, [sp, #424]	; 0x1a8
   1c468:	str	r0, [r3]
   1c46c:	cmp	r0, #0
   1c470:	movne	r0, r7
   1c474:	beq	1c428 <_start@@Base+0x7e00>
   1c478:	b	1c43c <_start@@Base+0x7e14>
   1c47c:	ldr	r9, [sp, #28]
   1c480:	mov	r8, fp
   1c484:	b	1c428 <_start@@Base+0x7e00>
   1c488:	ldr	r9, [sp, #28]
   1c48c:	mov	r8, fp
   1c490:	b	1c428 <_start@@Base+0x7e00>
   1c494:	ldr	r9, [sp, #28]
   1c498:	mov	r8, fp
   1c49c:	b	1c428 <_start@@Base+0x7e00>
   1c4a0:	ldr	r9, [sp, #28]
   1c4a4:	mov	r8, fp
   1c4a8:	b	1c428 <_start@@Base+0x7e00>
   1c4ac:	add	r3, pc, #164	; 0xa4
   1c4b0:	ldrd	r2, [r3]
   1c4b4:	cmp	r5, r3
   1c4b8:	cmpeq	r4, r2
   1c4bc:	bne	1b2c8 <_start@@Base+0x6ca0>
   1c4c0:	mov	r3, #8
   1c4c4:	mov	r2, fp
   1c4c8:	mov	r1, r7
   1c4cc:	mov	r0, r6
   1c4d0:	bl	17de0 <_start@@Base+0x37b8>
   1c4d4:	mov	r4, r0
   1c4d8:	cmp	r7, r0
   1c4dc:	beq	1b118 <_start@@Base+0x6af0>
   1c4e0:	add	r3, sp, #472	; 0x1d8
   1c4e4:	mov	r0, #0
   1c4e8:	mov	r1, #0
   1c4ec:	strd	r0, [r3, #-24]!	; 0xffffffe8
   1c4f0:	mov	r2, fp
   1c4f4:	mov	r1, r4
   1c4f8:	mov	r0, r6
   1c4fc:	bl	17cd4 <_start@@Base+0x36ac>
   1c500:	mov	r7, r0
   1c504:	cmp	r4, r0
   1c508:	beq	1b0d8 <_start@@Base+0x6ab0>
   1c50c:	add	r3, sp, #448	; 0x1c0
   1c510:	ldrd	r2, [r3]
   1c514:	orrs	r3, r2, r3
   1c518:	bne	1c528 <_start@@Base+0x7f00>
   1c51c:	ldr	r3, [r6, #8]
   1c520:	tst	r3, #2
   1c524:	beq	1b1f8 <_start@@Base+0x6bd0>
   1c528:	mov	r3, #8
   1c52c:	mov	r2, r3
   1c530:	mov	r1, #3
   1c534:	ldr	r0, [r6]
   1c538:	bl	28e20 <flatcc_builder_table_add@@Base>
   1c53c:	cmp	r0, #0
   1c540:	beq	1b818 <_start@@Base+0x71f0>
   1c544:	add	r3, sp, #448	; 0x1c0
   1c548:	ldrd	r2, [r3]
   1c54c:	strd	r2, [r0]
   1c550:	b	1b1f8 <_start@@Base+0x6bd0>
   1c554:	nop			; (mov r0, r0)
   1c558:	teqcc	r2, r4, lsr r3
   1c55c:	rsbvs	r6, r2, #536870918	; 0x20000006
   1c560:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c564:	sub	sp, sp, #148	; 0x94
   1c568:	mov	r4, r1
   1c56c:	mov	r5, r2
   1c570:	mov	r2, r3
   1c574:	str	r3, [sp, #116]	; 0x74
   1c578:	mov	r3, #0
   1c57c:	str	r3, [r2]
   1c580:	mov	r2, #4
   1c584:	mov	r1, r2
   1c588:	str	r0, [sp, #104]	; 0x68
   1c58c:	ldr	r0, [r0]
   1c590:	bl	267ec <flatcc_builder_start_struct@@Base>
   1c594:	subs	r2, r0, #0
   1c598:	str	r2, [sp, #112]	; 0x70
   1c59c:	beq	1cca8 <_start@@Base+0x8680>
   1c5a0:	add	r3, sp, #124	; 0x7c
   1c5a4:	mov	r2, r5
   1c5a8:	mov	r1, r4
   1c5ac:	ldr	r0, [sp, #104]	; 0x68
   1c5b0:	bl	19394 <_start@@Base+0x4d6c>
   1c5b4:	mov	ip, r0
   1c5b8:	mov	r4, r5
   1c5bc:	strd	sl, [sp, #8]
   1c5c0:	b	1cafc <_start@@Base+0x84d4>
   1c5c4:	ldrb	r2, [ip, #7]
   1c5c8:	mov	r3, #0
   1c5cc:	b	1c5d8 <_start@@Base+0x7fb0>
   1c5d0:	mov	r2, #0
   1c5d4:	mov	r3, #0
   1c5d8:	ldrb	r0, [ip, #6]
   1c5dc:	mov	lr, #0
   1c5e0:	str	lr, [sp, #76]	; 0x4c
   1c5e4:	lsl	r1, r0, #8
   1c5e8:	str	r1, [sp, #72]	; 0x48
   1c5ec:	ldrd	r0, [sp, #72]	; 0x48
   1c5f0:	orr	r0, r0, r2
   1c5f4:	orr	r1, r1, r3
   1c5f8:	mov	r2, r0
   1c5fc:	mov	r3, r1
   1c600:	ldrb	r0, [ip, #5]
   1c604:	mov	lr, #0
   1c608:	str	lr, [sp, #52]	; 0x34
   1c60c:	lsl	r1, r0, #16
   1c610:	str	r1, [sp, #48]	; 0x30
   1c614:	ldrd	r0, [sp, #48]	; 0x30
   1c618:	orr	r0, r0, r2
   1c61c:	orr	r1, r1, r3
   1c620:	mov	r2, r0
   1c624:	mov	r3, r1
   1c628:	ldrb	r0, [ip, #4]
   1c62c:	mov	lr, #0
   1c630:	str	lr, [sp, #28]
   1c634:	lsl	r1, r0, #24
   1c638:	str	r1, [sp, #24]
   1c63c:	ldrd	r0, [sp, #24]
   1c640:	orr	r0, r0, r2
   1c644:	orr	r1, r1, r3
   1c648:	mov	r2, r0
   1c64c:	mov	r3, r1
   1c650:	ldrb	r1, [ip, #3]
   1c654:	str	r1, [sp, #20]
   1c658:	mov	r1, #0
   1c65c:	str	r1, [sp, #16]
   1c660:	ldrd	r0, [sp, #16]
   1c664:	orr	r0, r0, r2
   1c668:	orr	r1, r1, r3
   1c66c:	mov	r2, r0
   1c670:	mov	r3, r1
   1c674:	ldrb	r0, [ip, #2]
   1c678:	lsl	r1, r0, #8
   1c67c:	str	r1, [sp, #12]
   1c680:	mov	r1, #0
   1c684:	str	r1, [sp, #8]
   1c688:	ldrd	r0, [sp, #8]
   1c68c:	orr	r0, r0, r2
   1c690:	orr	r1, r1, r3
   1c694:	mov	r2, r0
   1c698:	mov	r3, r1
   1c69c:	ldrb	r0, [ip, #1]
   1c6a0:	lsl	r7, r0, #16
   1c6a4:	mov	r6, #0
   1c6a8:	orr	r2, r2, r6
   1c6ac:	orr	r3, r3, r7
   1c6b0:	ldrb	r0, [ip]
   1c6b4:	lsl	r9, r0, #24
   1c6b8:	mov	r8, #0
   1c6bc:	orr	r2, r2, r8
   1c6c0:	orr	r3, r3, r9
   1c6c4:	add	r1, pc, #916	; 0x394
   1c6c8:	ldrd	r0, [r1]
   1c6cc:	cmp	r3, r1
   1c6d0:	cmpeq	r2, r0
   1c6d4:	bne	1ca74 <_start@@Base+0x844c>
   1c6d8:	add	r5, ip, #8
   1c6dc:	sub	r3, r4, r5
   1c6e0:	cmp	r3, #8
   1c6e4:	movcs	r3, #8
   1c6e8:	sub	r3, r3, #1
   1c6ec:	cmp	r3, #7
   1c6f0:	ldrls	pc, [pc, r3, lsl #2]
   1c6f4:	b	1c900 <_start@@Base+0x82d8>
   1c6f8:	strdeq	ip, [r1], -r4
   1c6fc:	andeq	ip, r1, r8, ror #17
   1c700:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c704:	ldrdeq	ip, [r1], -r0
   1c708:	andeq	ip, r1, r4, asr #17
   1c70c:			; <UNDEFINED> instruction: 0x0001c8b8
   1c710:	andeq	ip, r1, ip, ror #14
   1c714:	andeq	ip, r1, r0, ror #14
   1c718:	mov	r2, #0
   1c71c:	mov	r3, #0
   1c720:	b	1c600 <_start@@Base+0x7fd8>
   1c724:	mov	r2, #0
   1c728:	mov	r3, #0
   1c72c:	b	1c628 <_start@@Base+0x8000>
   1c730:	mov	r2, #0
   1c734:	mov	r3, #0
   1c738:	b	1c650 <_start@@Base+0x8028>
   1c73c:	mov	r2, #0
   1c740:	mov	r3, #0
   1c744:	b	1c674 <_start@@Base+0x804c>
   1c748:	mov	r2, #0
   1c74c:	mov	r3, #0
   1c750:	b	1c69c <_start@@Base+0x8074>
   1c754:	mov	r2, #0
   1c758:	mov	r3, #0
   1c75c:	b	1c6b0 <_start@@Base+0x8088>
   1c760:	ldrb	r2, [ip, #15]
   1c764:	mov	r3, #0
   1c768:	b	1c774 <_start@@Base+0x814c>
   1c76c:	mov	r2, #0
   1c770:	mov	r3, #0
   1c774:	ldrb	r0, [ip, #14]
   1c778:	mov	lr, #0
   1c77c:	str	lr, [sp, #100]	; 0x64
   1c780:	lsl	r1, r0, #8
   1c784:	str	r1, [sp, #96]	; 0x60
   1c788:	ldrd	r0, [sp, #96]	; 0x60
   1c78c:	orr	r0, r0, r2
   1c790:	orr	r1, r1, r3
   1c794:	mov	r2, r0
   1c798:	mov	r3, r1
   1c79c:	ldrb	r0, [ip, #13]
   1c7a0:	mov	lr, #0
   1c7a4:	str	lr, [sp, #92]	; 0x5c
   1c7a8:	lsl	r1, r0, #16
   1c7ac:	str	r1, [sp, #88]	; 0x58
   1c7b0:	ldrd	r0, [sp, #88]	; 0x58
   1c7b4:	orr	r0, r0, r2
   1c7b8:	orr	r1, r1, r3
   1c7bc:	mov	r2, r0
   1c7c0:	mov	r3, r1
   1c7c4:	ldrb	r0, [ip, #12]
   1c7c8:	mov	lr, #0
   1c7cc:	str	lr, [sp, #84]	; 0x54
   1c7d0:	lsl	r1, r0, #24
   1c7d4:	str	r1, [sp, #80]	; 0x50
   1c7d8:	ldrd	r0, [sp, #80]	; 0x50
   1c7dc:	orr	r0, r0, r2
   1c7e0:	orr	r1, r1, r3
   1c7e4:	mov	r2, r0
   1c7e8:	mov	r3, r1
   1c7ec:	ldrb	r1, [ip, #11]
   1c7f0:	str	r1, [sp, #68]	; 0x44
   1c7f4:	mov	r1, #0
   1c7f8:	str	r1, [sp, #64]	; 0x40
   1c7fc:	ldrd	r0, [sp, #64]	; 0x40
   1c800:	orr	r0, r0, r2
   1c804:	orr	r1, r1, r3
   1c808:	mov	r2, r0
   1c80c:	mov	r3, r1
   1c810:	ldrb	r0, [ip, #10]
   1c814:	lsl	r1, r0, #8
   1c818:	str	r1, [sp, #60]	; 0x3c
   1c81c:	mov	r1, #0
   1c820:	str	r1, [sp, #56]	; 0x38
   1c824:	ldrd	r0, [sp, #56]	; 0x38
   1c828:	orr	r0, r0, r2
   1c82c:	orr	r1, r1, r3
   1c830:	mov	r2, r0
   1c834:	mov	r3, r1
   1c838:	ldrb	r0, [ip, #9]
   1c83c:	lsl	r1, r0, #16
   1c840:	str	r1, [sp, #44]	; 0x2c
   1c844:	mov	r1, #0
   1c848:	str	r1, [sp, #40]	; 0x28
   1c84c:	ldrd	r0, [sp, #40]	; 0x28
   1c850:	orr	r0, r0, r2
   1c854:	orr	r1, r1, r3
   1c858:	mov	r2, r0
   1c85c:	mov	r3, r1
   1c860:	ldrb	r0, [ip, #8]
   1c864:	lsl	r1, r0, #24
   1c868:	str	r1, [sp, #36]	; 0x24
   1c86c:	mov	r1, #0
   1c870:	str	r1, [sp, #32]
   1c874:	ldrd	r0, [sp, #32]
   1c878:	orr	r0, r0, r2
   1c87c:	orr	r1, r1, r3
   1c880:	mov	r2, #0
   1c884:	ldr	r3, [pc, #476]	; 1ca68 <_start@@Base+0x8440>
   1c888:	and	r2, r2, r0
   1c88c:	and	r3, r3, r1
   1c890:	mov	r0, #0
   1c894:	ldr	r1, [pc, #464]	; 1ca6c <_start@@Base+0x8444>
   1c898:	cmp	r3, r1
   1c89c:	cmpeq	r2, r0
   1c8a0:	beq	1c90c <_start@@Base+0x82e4>
   1c8a4:	mov	r2, r4
   1c8a8:	mov	r1, r5
   1c8ac:	ldr	r0, [sp, #104]	; 0x68
   1c8b0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1c8b4:	b	1ca84 <_start@@Base+0x845c>
   1c8b8:	mov	r2, #0
   1c8bc:	mov	r3, #0
   1c8c0:	b	1c79c <_start@@Base+0x8174>
   1c8c4:	mov	r2, #0
   1c8c8:	mov	r3, #0
   1c8cc:	b	1c7c4 <_start@@Base+0x819c>
   1c8d0:	mov	r2, #0
   1c8d4:	mov	r3, #0
   1c8d8:	b	1c7ec <_start@@Base+0x81c4>
   1c8dc:	mov	r2, #0
   1c8e0:	mov	r3, #0
   1c8e4:	b	1c810 <_start@@Base+0x81e8>
   1c8e8:	mov	r2, #0
   1c8ec:	mov	r3, #0
   1c8f0:	b	1c838 <_start@@Base+0x8210>
   1c8f4:	mov	r2, #0
   1c8f8:	mov	r3, #0
   1c8fc:	b	1c860 <_start@@Base+0x8238>
   1c900:	mov	r0, #0
   1c904:	mov	r1, #0
   1c908:	b	1c880 <_start@@Base+0x8258>
   1c90c:	mov	r3, #2
   1c910:	mov	r2, r4
   1c914:	mov	r1, r5
   1c918:	ldr	sl, [sp, #104]	; 0x68
   1c91c:	mov	r0, sl
   1c920:	bl	17de0 <_start@@Base+0x37b8>
   1c924:	mov	r1, r0
   1c928:	str	r0, [sp, #108]	; 0x6c
   1c92c:	cmp	r5, r0
   1c930:	beq	1ca4c <_start@@Base+0x8424>
   1c934:	mov	r3, #0
   1c938:	str	r3, [sp, #128]	; 0x80
   1c93c:	mov	r2, #0
   1c940:	mov	r3, #0
   1c944:	strd	r2, [sp, #136]	; 0x88
   1c948:	mov	r3, #0
   1c94c:	str	r3, [sp, #132]	; 0x84
   1c950:	mov	r5, r0
   1c954:	cmp	r4, r0
   1c958:	beq	1c9c0 <_start@@Base+0x8398>
   1c95c:	add	r3, sp, #136	; 0x88
   1c960:	str	r3, [sp]
   1c964:	add	r3, sp, #132	; 0x84
   1c968:	mov	r2, r4
   1c96c:	mov	r0, sl
   1c970:	bl	2d678 <flatcc_json_parser_integer@@Base>
   1c974:	cmp	r5, r0
   1c978:	beq	1c9c0 <_start@@Base+0x8398>
   1c97c:	ldrd	r2, [sp, #136]	; 0x88
   1c980:	ldr	r1, [sp, #132]	; 0x84
   1c984:	cmp	r1, #0
   1c988:	beq	1ca0c <_start@@Base+0x83e4>
   1c98c:	cmp	r3, #0
   1c990:	cmpeq	r2, #-2147483648	; 0x80000000
   1c994:	rsbls	r2, r2, #0
   1c998:	strls	r2, [sp, #128]	; 0x80
   1c99c:	bls	1ca24 <_start@@Base+0x83fc>
   1c9a0:	mov	r3, #8
   1c9a4:	mov	r2, r4
   1c9a8:	mov	r1, r0
   1c9ac:	ldr	r0, [sp, #104]	; 0x68
   1c9b0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1c9b4:	ldr	r3, [sp, #108]	; 0x6c
   1c9b8:	cmp	r3, r0
   1c9bc:	bne	1ca24 <_start@@Base+0x83fc>
   1c9c0:	add	r3, sp, #128	; 0x80
   1c9c4:	str	r3, [sp]
   1c9c8:	ldr	r3, [pc, #160]	; 1ca70 <_start@@Base+0x8448>
   1c9cc:	mov	r2, r4
   1c9d0:	ldr	r5, [sp, #108]	; 0x6c
   1c9d4:	mov	r1, r5
   1c9d8:	ldr	r0, [sp, #104]	; 0x68
   1c9dc:	bl	18b58 <_start@@Base+0x4530>
   1c9e0:	cmp	r4, r0
   1c9e4:	cmpne	r5, r0
   1c9e8:	bne	1ca24 <_start@@Base+0x83fc>
   1c9ec:	mov	r5, r4
   1c9f0:	mov	r3, #33	; 0x21
   1c9f4:	mov	r2, r4
   1c9f8:	mov	r1, r0
   1c9fc:	ldr	r0, [sp, #104]	; 0x68
   1ca00:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1ca04:	mov	r4, r0
   1ca08:	b	1cc84 <_start@@Base+0x865c>
   1ca0c:	mvn	sl, #-2147483648	; 0x80000000
   1ca10:	mov	fp, #0
   1ca14:	cmp	r3, fp
   1ca18:	cmpeq	r2, sl
   1ca1c:	strls	r2, [sp, #128]	; 0x80
   1ca20:	bhi	1ca34 <_start@@Base+0x840c>
   1ca24:	ldr	r3, [sp, #128]	; 0x80
   1ca28:	ldr	r2, [sp, #112]	; 0x70
   1ca2c:	str	r3, [r2]
   1ca30:	b	1ca84 <_start@@Base+0x845c>
   1ca34:	mov	r3, #7
   1ca38:	mov	r2, r4
   1ca3c:	mov	r1, r0
   1ca40:	ldr	r0, [sp, #104]	; 0x68
   1ca44:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1ca48:	b	1c9b4 <_start@@Base+0x838c>
   1ca4c:	mov	r2, r4
   1ca50:	ldr	r1, [sp, #108]	; 0x6c
   1ca54:	ldr	r0, [sp, #104]	; 0x68
   1ca58:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1ca5c:	b	1ca84 <_start@@Base+0x845c>
   1ca60:	cmpvc	pc, #1342177286	; 0x50000006
   1ca64:	rsbvs	r6, pc, #428	; 0x1ac
   1ca68:			; <UNDEFINED> instruction: 0xffff0000
   1ca6c:	cmnvs	r4, r0
   1ca70:	andeq	r3, r5, r8, asr #2
   1ca74:	mov	r2, r4
   1ca78:	mov	r1, ip
   1ca7c:	ldr	r0, [sp, #104]	; 0x68
   1ca80:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1ca84:	sub	r3, r4, r0
   1ca88:	cmp	r3, #1
   1ca8c:	ble	1caa0 <_start@@Base+0x8478>
   1ca90:	ldrb	r3, [r0]
   1ca94:	cmp	r3, #32
   1ca98:	bhi	1cab0 <_start@@Base+0x8488>
   1ca9c:	beq	1cb74 <_start@@Base+0x854c>
   1caa0:	mov	r2, r4
   1caa4:	mov	r1, r0
   1caa8:	ldr	r0, [sp, #104]	; 0x68
   1caac:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1cab0:	cmp	r4, r0
   1cab4:	moveq	r3, #0
   1cab8:	streq	r3, [sp, #124]	; 0x7c
   1cabc:	moveq	ip, r0
   1cac0:	beq	1cafc <_start@@Base+0x84d4>
   1cac4:	ldrb	r3, [r0]
   1cac8:	cmp	r3, #44	; 0x2c
   1cacc:	beq	1cbd4 <_start@@Base+0x85ac>
   1cad0:	mov	r3, #0
   1cad4:	str	r3, [sp, #124]	; 0x7c
   1cad8:	ldrb	r3, [r0]
   1cadc:	cmp	r3, #125	; 0x7d
   1cae0:	beq	1cb88 <_start@@Base+0x8560>
   1cae4:	mov	r3, #10
   1cae8:	mov	r2, r4
   1caec:	mov	r1, r0
   1caf0:	ldr	r0, [sp, #104]	; 0x68
   1caf4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1caf8:	mov	ip, r0
   1cafc:	ldr	r3, [sp, #124]	; 0x7c
   1cb00:	cmp	r3, #0
   1cb04:	beq	1cc7c <_start@@Base+0x8654>
   1cb08:	cmp	r4, ip
   1cb0c:	beq	1cb38 <_start@@Base+0x8510>
   1cb10:	ldrb	r3, [ip]
   1cb14:	cmp	r3, #34	; 0x22
   1cb18:	addeq	ip, ip, #1
   1cb1c:	beq	1cb38 <_start@@Base+0x8510>
   1cb20:	mov	r3, #5
   1cb24:	mov	r2, r4
   1cb28:	mov	r1, ip
   1cb2c:	ldr	r0, [sp, #104]	; 0x68
   1cb30:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1cb34:	mov	ip, r0
   1cb38:	sub	r3, r4, ip
   1cb3c:	cmp	r3, #8
   1cb40:	movcs	r3, #8
   1cb44:	sub	r3, r3, #1
   1cb48:	cmp	r3, #7
   1cb4c:	ldrls	pc, [pc, r3, lsl #2]
   1cb50:	b	1ca74 <_start@@Base+0x844c>
   1cb54:	andeq	ip, r1, r4, asr r7
   1cb58:	andeq	ip, r1, r8, asr #14
   1cb5c:	andeq	ip, r1, ip, lsr r7
   1cb60:	andeq	ip, r1, r0, lsr r7
   1cb64:	andeq	ip, r1, r4, lsr #14
   1cb68:	andeq	ip, r1, r8, lsl r7
   1cb6c:	ldrdeq	ip, [r1], -r0
   1cb70:	andeq	ip, r1, r4, asr #11
   1cb74:	ldrb	r3, [r0, #1]
   1cb78:	cmp	r3, #32
   1cb7c:	addhi	r0, r0, #1
   1cb80:	bls	1caa0 <_start@@Base+0x8478>
   1cb84:	b	1cab0 <_start@@Base+0x8488>
   1cb88:	add	ip, r0, #1
   1cb8c:	sub	r3, r4, ip
   1cb90:	cmp	r3, #1
   1cb94:	ble	1cba8 <_start@@Base+0x8580>
   1cb98:	ldrb	r3, [r0, #1]
   1cb9c:	cmp	r3, #32
   1cba0:	bhi	1cafc <_start@@Base+0x84d4>
   1cba4:	beq	1cbc0 <_start@@Base+0x8598>
   1cba8:	mov	r2, r4
   1cbac:	mov	r1, ip
   1cbb0:	ldr	r0, [sp, #104]	; 0x68
   1cbb4:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1cbb8:	mov	ip, r0
   1cbbc:	b	1cafc <_start@@Base+0x84d4>
   1cbc0:	ldrb	r3, [r0, #2]
   1cbc4:	cmp	r3, #32
   1cbc8:	addhi	ip, r0, #2
   1cbcc:	bls	1cba8 <_start@@Base+0x8580>
   1cbd0:	b	1cafc <_start@@Base+0x84d4>
   1cbd4:	add	ip, r0, #1
   1cbd8:	sub	r3, r4, ip
   1cbdc:	cmp	r3, #1
   1cbe0:	ble	1cbf4 <_start@@Base+0x85cc>
   1cbe4:	ldrb	r3, [r0, #1]
   1cbe8:	cmp	r3, #32
   1cbec:	bhi	1cc08 <_start@@Base+0x85e0>
   1cbf0:	beq	1cc44 <_start@@Base+0x861c>
   1cbf4:	mov	r2, r4
   1cbf8:	mov	r1, ip
   1cbfc:	ldr	r0, [sp, #104]	; 0x68
   1cc00:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1cc04:	mov	ip, r0
   1cc08:	cmp	r4, ip
   1cc0c:	beq	1cc58 <_start@@Base+0x8630>
   1cc10:	ldrb	r3, [ip]
   1cc14:	cmp	r3, #125	; 0x7d
   1cc18:	movne	r3, #1
   1cc1c:	strne	r3, [sp, #124]	; 0x7c
   1cc20:	bne	1cafc <_start@@Base+0x84d4>
   1cc24:	mov	r3, #0
   1cc28:	str	r3, [sp, #124]	; 0x7c
   1cc2c:	mov	r2, r4
   1cc30:	add	r1, ip, #1
   1cc34:	ldr	r0, [sp, #104]	; 0x68
   1cc38:	bl	17d9c <_start@@Base+0x3774>
   1cc3c:	mov	ip, r0
   1cc40:	b	1cafc <_start@@Base+0x84d4>
   1cc44:	ldrb	r3, [r0, #2]
   1cc48:	cmp	r3, #32
   1cc4c:	addhi	ip, r0, #2
   1cc50:	bls	1cbf4 <_start@@Base+0x85cc>
   1cc54:	b	1cc08 <_start@@Base+0x85e0>
   1cc58:	mov	r3, #0
   1cc5c:	str	r3, [sp, #124]	; 0x7c
   1cc60:	mov	r3, #10
   1cc64:	mov	r2, r4
   1cc68:	mov	r1, ip
   1cc6c:	ldr	r0, [sp, #104]	; 0x68
   1cc70:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1cc74:	mov	ip, r0
   1cc78:	b	1cafc <_start@@Base+0x84d4>
   1cc7c:	mov	r5, r4
   1cc80:	mov	r4, ip
   1cc84:	cmp	r5, r4
   1cc88:	beq	1cca8 <_start@@Base+0x8680>
   1cc8c:	ldr	r3, [sp, #104]	; 0x68
   1cc90:	ldr	r0, [r3]
   1cc94:	bl	26894 <flatcc_builder_end_struct@@Base>
   1cc98:	ldr	r3, [sp, #116]	; 0x74
   1cc9c:	str	r0, [r3]
   1cca0:	cmp	r0, #0
   1cca4:	bne	1ccc0 <_start@@Base+0x8698>
   1cca8:	mov	r3, #33	; 0x21
   1ccac:	mov	r2, r5
   1ccb0:	mov	r1, r4
   1ccb4:	ldr	r0, [sp, #104]	; 0x68
   1ccb8:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1ccbc:	mov	r4, r0
   1ccc0:	mov	r0, r4
   1ccc4:	add	sp, sp, #148	; 0x94
   1ccc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cccc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ccd0:	sub	sp, sp, #244	; 0xf4
   1ccd4:	str	r0, [sp, #12]
   1ccd8:	mov	r4, r1
   1ccdc:	mov	r5, r2
   1cce0:	mov	r2, #0
   1cce4:	ldr	r1, [sp, #280]	; 0x118
   1cce8:	str	r2, [r1]
   1ccec:	cmp	r3, #9
   1ccf0:	beq	1dc14 <_start@@Base+0x95ec>
   1ccf4:	bhi	1cd38 <_start@@Base+0x8710>
   1ccf8:	cmp	r3, #2
   1ccfc:	beq	1cdac <_start@@Base+0x8784>
   1cd00:	cmp	r3, #8
   1cd04:	beq	1d558 <_start@@Base+0x8f30>
   1cd08:	cmp	r3, r2
   1cd0c:	beq	1cd68 <_start@@Base+0x8740>
   1cd10:	ldr	r0, [sp, #12]
   1cd14:	ldr	r3, [r0, #8]
   1cd18:	tst	r3, #1
   1cd1c:	bne	1dc90 <_start@@Base+0x9668>
   1cd20:	mov	r3, #15
   1cd24:	mov	r2, r5
   1cd28:	mov	r1, r4
   1cd2c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1cd30:	mov	r4, r0
   1cd34:	b	1dc4c <_start@@Base+0x9624>
   1cd38:	cmp	r3, #11
   1cd3c:	beq	1dc74 <_start@@Base+0x964c>
   1cd40:	bcc	1dc58 <_start@@Base+0x9630>
   1cd44:	cmp	r3, #255	; 0xff
   1cd48:	bne	1cd10 <_start@@Base+0x86e8>
   1cd4c:	ldr	r3, [sp, #280]	; 0x118
   1cd50:	mov	r2, r5
   1cd54:	mov	r1, r4
   1cd58:	ldr	r0, [sp, #12]
   1cd5c:	bl	2eb0c <flatcc_json_parser_build_string@@Base>
   1cd60:	mov	r4, r0
   1cd64:	b	1dc2c <_start@@Base+0x9604>
   1cd68:	sub	r3, r5, r4
   1cd6c:	cmp	r3, #3
   1cd70:	ble	1cd90 <_start@@Base+0x8768>
   1cd74:	mov	r2, #4
   1cd78:	ldr	r1, [pc, #1040]	; 1d190 <_start@@Base+0x8b68>
   1cd7c:	mov	r0, r4
   1cd80:	bl	14558 <memcmp@plt>
   1cd84:	cmp	r0, #0
   1cd88:	addeq	r4, r4, #4
   1cd8c:	beq	1dc4c <_start@@Base+0x9624>
   1cd90:	mov	r3, #26
   1cd94:	mov	r2, r5
   1cd98:	mov	r1, r4
   1cd9c:	ldr	r0, [sp, #12]
   1cda0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1cda4:	mov	r4, r0
   1cda8:	b	1dc4c <_start@@Base+0x9624>
   1cdac:	mov	r1, #1
   1cdb0:	ldr	r6, [sp, #12]
   1cdb4:	ldr	r0, [r6]
   1cdb8:	bl	27424 <flatcc_builder_start_table@@Base>
   1cdbc:	cmp	r0, #0
   1cdc0:	bne	1d51c <_start@@Base+0x8ef4>
   1cdc4:	add	r3, sp, #220	; 0xdc
   1cdc8:	mov	r2, r5
   1cdcc:	mov	r1, r4
   1cdd0:	mov	r0, r6
   1cdd4:	bl	19394 <_start@@Base+0x4d6c>
   1cdd8:	add	r9, pc, #920	; 0x398
   1cddc:	ldrd	r8, [r9]
   1cde0:	b	1d39c <_start@@Base+0x8d74>
   1cde4:	ldrb	r2, [r0, #7]
   1cde8:	mov	r3, #0
   1cdec:	b	1cdf8 <_start@@Base+0x87d0>
   1cdf0:	mov	r2, #0
   1cdf4:	mov	r3, #0
   1cdf8:	ldrb	r6, [r0, #6]
   1cdfc:	mov	r1, #0
   1ce00:	str	r1, [sp, #172]	; 0xac
   1ce04:	lsl	r1, r6, #8
   1ce08:	str	r1, [sp, #168]	; 0xa8
   1ce0c:	ldrd	r6, [sp, #168]	; 0xa8
   1ce10:	orr	r6, r6, r2
   1ce14:	orr	r7, r7, r3
   1ce18:	mov	r2, r6
   1ce1c:	mov	r3, r7
   1ce20:	ldrb	r6, [r0, #5]
   1ce24:	mov	r1, #0
   1ce28:	str	r1, [sp, #124]	; 0x7c
   1ce2c:	lsl	r1, r6, #16
   1ce30:	str	r1, [sp, #120]	; 0x78
   1ce34:	ldrd	r6, [sp, #120]	; 0x78
   1ce38:	orr	r6, r6, r2
   1ce3c:	orr	r7, r7, r3
   1ce40:	mov	r2, r6
   1ce44:	mov	r3, r7
   1ce48:	ldrb	r6, [r0, #4]
   1ce4c:	mov	r1, #0
   1ce50:	str	r1, [sp, #76]	; 0x4c
   1ce54:	lsl	r1, r6, #24
   1ce58:	str	r1, [sp, #72]	; 0x48
   1ce5c:	ldrd	r6, [sp, #72]	; 0x48
   1ce60:	orr	r6, r6, r2
   1ce64:	orr	r7, r7, r3
   1ce68:	mov	r2, r6
   1ce6c:	mov	r3, r7
   1ce70:	ldrb	r1, [r0, #3]
   1ce74:	str	r1, [sp, #52]	; 0x34
   1ce78:	mov	r1, #0
   1ce7c:	str	r1, [sp, #48]	; 0x30
   1ce80:	ldrd	r6, [sp, #48]	; 0x30
   1ce84:	orr	r6, r6, r2
   1ce88:	orr	r7, r7, r3
   1ce8c:	mov	r2, r6
   1ce90:	mov	r3, r7
   1ce94:	ldrb	r6, [r0, #2]
   1ce98:	lsl	r1, r6, #8
   1ce9c:	str	r1, [sp, #36]	; 0x24
   1cea0:	mov	r1, #0
   1cea4:	str	r1, [sp, #32]
   1cea8:	ldrd	r6, [sp, #32]
   1ceac:	orr	r6, r6, r2
   1ceb0:	orr	r7, r7, r3
   1ceb4:	mov	r2, r6
   1ceb8:	mov	r3, r7
   1cebc:	ldrb	r6, [r0, #1]
   1cec0:	lsl	r1, r6, #16
   1cec4:	str	r1, [sp, #20]
   1cec8:	mov	r1, #0
   1cecc:	str	r1, [sp, #16]
   1ced0:	ldrd	r6, [sp, #16]
   1ced4:	orr	r6, r6, r2
   1ced8:	orr	r7, r7, r3
   1cedc:	mov	r2, r6
   1cee0:	mov	r3, r7
   1cee4:	ldrb	r6, [r0]
   1cee8:	lsl	fp, r6, #24
   1ceec:	mov	sl, #0
   1cef0:	orr	r2, r2, sl
   1cef4:	orr	r3, r3, fp
   1cef8:	cmp	r3, r9
   1cefc:	cmpeq	r2, r8
   1cf00:	bne	1d310 <_start@@Base+0x8ce8>
   1cf04:	add	r1, r0, #8
   1cf08:	sub	r3, r5, r1
   1cf0c:	cmp	r3, #8
   1cf10:	movcs	r3, #8
   1cf14:	sub	r3, r3, #1
   1cf18:	cmp	r3, #7
   1cf1c:	ldrls	pc, [pc, r3, lsl #2]
   1cf20:	b	1d124 <_start@@Base+0x8afc>
   1cf24:	andeq	sp, r1, r8, lsl r1
   1cf28:	andeq	sp, r1, ip, lsl #2
   1cf2c:	andeq	sp, r1, r0, lsl #2
   1cf30:	strdeq	sp, [r1], -r4
   1cf34:	andeq	sp, r1, r8, ror #1
   1cf38:	ldrdeq	sp, [r1], -ip
   1cf3c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1cf40:	andeq	ip, r1, ip, lsl #31
   1cf44:	mov	r2, #0
   1cf48:	mov	r3, #0
   1cf4c:	b	1ce20 <_start@@Base+0x87f8>
   1cf50:	mov	r2, #0
   1cf54:	mov	r3, #0
   1cf58:	b	1ce48 <_start@@Base+0x8820>
   1cf5c:	mov	r2, #0
   1cf60:	mov	r3, #0
   1cf64:	b	1ce70 <_start@@Base+0x8848>
   1cf68:	mov	r2, #0
   1cf6c:	mov	r3, #0
   1cf70:	b	1ce94 <_start@@Base+0x886c>
   1cf74:	mov	r2, #0
   1cf78:	mov	r3, #0
   1cf7c:	b	1cebc <_start@@Base+0x8894>
   1cf80:	mov	r2, #0
   1cf84:	mov	r3, #0
   1cf88:	b	1cee4 <_start@@Base+0x88bc>
   1cf8c:	ldrb	r2, [r0, #15]
   1cf90:	mov	r3, #0
   1cf94:	b	1cfa0 <_start@@Base+0x8978>
   1cf98:	mov	r2, #0
   1cf9c:	mov	r3, #0
   1cfa0:	ldrb	r6, [r0, #14]
   1cfa4:	mov	ip, #0
   1cfa8:	str	ip, [sp, #212]	; 0xd4
   1cfac:	lsl	ip, r6, #8
   1cfb0:	str	ip, [sp, #208]	; 0xd0
   1cfb4:	ldrd	r6, [sp, #208]	; 0xd0
   1cfb8:	orr	r6, r6, r2
   1cfbc:	orr	r7, r7, r3
   1cfc0:	mov	r2, r6
   1cfc4:	mov	r3, r7
   1cfc8:	ldrb	r6, [r0, #13]
   1cfcc:	mov	ip, #0
   1cfd0:	str	ip, [sp, #196]	; 0xc4
   1cfd4:	lsl	ip, r6, #16
   1cfd8:	str	ip, [sp, #192]	; 0xc0
   1cfdc:	ldrd	r6, [sp, #192]	; 0xc0
   1cfe0:	orr	r6, r6, r2
   1cfe4:	orr	r7, r7, r3
   1cfe8:	mov	r2, r6
   1cfec:	mov	r3, r7
   1cff0:	ldrb	r6, [r0, #12]
   1cff4:	mov	ip, #0
   1cff8:	str	ip, [sp, #180]	; 0xb4
   1cffc:	lsl	ip, r6, #24
   1d000:	str	ip, [sp, #176]	; 0xb0
   1d004:	ldrd	r6, [sp, #176]	; 0xb0
   1d008:	orr	r6, r6, r2
   1d00c:	orr	r7, r7, r3
   1d010:	mov	r2, r6
   1d014:	mov	r3, r7
   1d018:	ldrb	ip, [r0, #11]
   1d01c:	str	ip, [sp, #148]	; 0x94
   1d020:	mov	ip, #0
   1d024:	str	ip, [sp, #144]	; 0x90
   1d028:	ldrd	r6, [sp, #144]	; 0x90
   1d02c:	orr	r6, r6, r2
   1d030:	orr	r7, r7, r3
   1d034:	mov	r2, r6
   1d038:	mov	r3, r7
   1d03c:	ldrb	r6, [r0, #10]
   1d040:	lsl	ip, r6, #8
   1d044:	str	ip, [sp, #132]	; 0x84
   1d048:	mov	ip, #0
   1d04c:	str	ip, [sp, #128]	; 0x80
   1d050:	ldrd	r6, [sp, #128]	; 0x80
   1d054:	orr	r6, r6, r2
   1d058:	orr	r7, r7, r3
   1d05c:	mov	r2, r6
   1d060:	mov	r3, r7
   1d064:	ldrb	r6, [r0, #9]
   1d068:	lsl	ip, r6, #16
   1d06c:	str	ip, [sp, #108]	; 0x6c
   1d070:	mov	ip, #0
   1d074:	str	ip, [sp, #104]	; 0x68
   1d078:	ldrd	r6, [sp, #104]	; 0x68
   1d07c:	orr	r6, r6, r2
   1d080:	orr	r7, r7, r3
   1d084:	mov	r2, r6
   1d088:	mov	r3, r7
   1d08c:	ldrb	r6, [r0, #8]
   1d090:	lsl	ip, r6, #24
   1d094:	str	ip, [sp, #92]	; 0x5c
   1d098:	mov	ip, #0
   1d09c:	str	ip, [sp, #88]	; 0x58
   1d0a0:	ldrd	r6, [sp, #88]	; 0x58
   1d0a4:	orr	r6, r6, r2
   1d0a8:	orr	r7, r7, r3
   1d0ac:	mov	r2, r6
   1d0b0:	mov	r3, r7
   1d0b4:	add	r7, pc, #196	; 0xc4
   1d0b8:	ldrd	r6, [r7]
   1d0bc:	cmp	r3, r7
   1d0c0:	cmpeq	r2, r6
   1d0c4:	beq	1d130 <_start@@Base+0x8b08>
   1d0c8:	mov	r2, r5
   1d0cc:	ldr	r0, [sp, #12]
   1d0d0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1d0d4:	mov	r6, r0
   1d0d8:	b	1d324 <_start@@Base+0x8cfc>
   1d0dc:	mov	r2, #0
   1d0e0:	mov	r3, #0
   1d0e4:	b	1cfc8 <_start@@Base+0x89a0>
   1d0e8:	mov	r2, #0
   1d0ec:	mov	r3, #0
   1d0f0:	b	1cff0 <_start@@Base+0x89c8>
   1d0f4:	mov	r2, #0
   1d0f8:	mov	r3, #0
   1d0fc:	b	1d018 <_start@@Base+0x89f0>
   1d100:	mov	r2, #0
   1d104:	mov	r3, #0
   1d108:	b	1d03c <_start@@Base+0x8a14>
   1d10c:	mov	r2, #0
   1d110:	mov	r3, #0
   1d114:	b	1d064 <_start@@Base+0x8a3c>
   1d118:	mov	r2, #0
   1d11c:	mov	r3, #0
   1d120:	b	1d08c <_start@@Base+0x8a64>
   1d124:	mov	r2, #0
   1d128:	mov	r3, #0
   1d12c:	b	1d0b4 <_start@@Base+0x8a8c>
   1d130:	add	r6, r0, #16
   1d134:	mov	r1, r5
   1d138:	mov	r0, r6
   1d13c:	bl	14750 <_start@@Base+0x128>
   1d140:	mov	r0, #0
   1d144:	bic	r1, r1, #255	; 0xff
   1d148:	add	r3, pc, #56	; 0x38
   1d14c:	ldrd	r2, [r3]
   1d150:	cmp	r1, r3
   1d154:	cmpeq	r0, r2
   1d158:	beq	1d198 <_start@@Base+0x8b70>
   1d15c:	mov	r2, r5
   1d160:	mov	r1, r6
   1d164:	ldr	r0, [sp, #12]
   1d168:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1d16c:	mov	r6, r0
   1d170:	b	1d324 <_start@@Base+0x8cfc>
   1d174:	nop			; (mov r0, r0)
   1d178:	ldrbvs	r6, [pc], #-372	; 1d180 <_start@@Base+0x8b58>
   1d17c:	cmnvc	r7, #456	; 0x1c8
   1d180:	svcpl	0x0064616d
   1d184:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   1d188:	andeq	r0, r0, r0
   1d18c:	cmnvs	r7, r0, lsl #10
   1d190:	andeq	sp, r3, r0, asr #10
   1d194:	andeq	r3, r5, r4, asr r1
   1d198:	mov	r3, #3
   1d19c:	mov	r2, r5
   1d1a0:	mov	r1, r6
   1d1a4:	ldr	r7, [sp, #12]
   1d1a8:	mov	r0, r7
   1d1ac:	bl	17de0 <_start@@Base+0x37b8>
   1d1b0:	mov	r4, r0
   1d1b4:	cmp	r6, r0
   1d1b8:	beq	1d2f8 <_start@@Base+0x8cd0>
   1d1bc:	mov	r1, #0
   1d1c0:	str	r1, [sp, #224]	; 0xe0
   1d1c4:	mov	r2, #0
   1d1c8:	mov	r3, #0
   1d1cc:	strd	r2, [sp, #232]	; 0xe8
   1d1d0:	str	r1, [sp, #228]	; 0xe4
   1d1d4:	cmp	r5, r0
   1d1d8:	beq	1d248 <_start@@Base+0x8c20>
   1d1dc:	add	r3, sp, #232	; 0xe8
   1d1e0:	str	r3, [sp]
   1d1e4:	add	r3, sp, #228	; 0xe4
   1d1e8:	mov	r2, r5
   1d1ec:	mov	r1, r0
   1d1f0:	mov	r0, r7
   1d1f4:	bl	2d678 <flatcc_json_parser_integer@@Base>
   1d1f8:	mov	r6, r0
   1d1fc:	cmp	r4, r0
   1d200:	beq	1d248 <_start@@Base+0x8c20>
   1d204:	ldrd	r0, [sp, #232]	; 0xe8
   1d208:	ldr	r3, [sp, #228]	; 0xe4
   1d20c:	cmp	r3, #0
   1d210:	beq	1d27c <_start@@Base+0x8c54>
   1d214:	cmp	r1, #0
   1d218:	cmpeq	r0, #-2147483648	; 0x80000000
   1d21c:	rsbls	r0, r0, #0
   1d220:	strls	r0, [sp, #224]	; 0xe0
   1d224:	bls	1d294 <_start@@Base+0x8c6c>
   1d228:	mov	r3, #8
   1d22c:	mov	r2, r5
   1d230:	mov	r1, r6
   1d234:	ldr	r0, [sp, #12]
   1d238:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1d23c:	mov	r6, r0
   1d240:	cmp	r4, r6
   1d244:	bne	1d294 <_start@@Base+0x8c6c>
   1d248:	add	r3, sp, #224	; 0xe0
   1d24c:	str	r3, [sp]
   1d250:	ldr	r3, [pc, #-196]	; 1d194 <_start@@Base+0x8b6c>
   1d254:	mov	r2, r5
   1d258:	mov	r1, r4
   1d25c:	ldr	r0, [sp, #12]
   1d260:	bl	18b58 <_start@@Base+0x4530>
   1d264:	mov	r6, r0
   1d268:	cmp	r5, r0
   1d26c:	cmpne	r4, r0
   1d270:	bne	1d294 <_start@@Base+0x8c6c>
   1d274:	mov	r4, r6
   1d278:	b	1d51c <_start@@Base+0x8ef4>
   1d27c:	mvn	r2, #-2147483648	; 0x80000000
   1d280:	mov	r3, #0
   1d284:	cmp	r1, r3
   1d288:	cmpeq	r0, r2
   1d28c:	strls	r0, [sp, #224]	; 0xe0
   1d290:	bhi	1d2dc <_start@@Base+0x8cb4>
   1d294:	ldr	r3, [sp, #224]	; 0xe0
   1d298:	cmp	r3, #0
   1d29c:	bne	1d2b0 <_start@@Base+0x8c88>
   1d2a0:	ldr	r3, [sp, #12]
   1d2a4:	ldr	r3, [r3, #8]
   1d2a8:	tst	r3, #2
   1d2ac:	beq	1d324 <_start@@Base+0x8cfc>
   1d2b0:	mov	r3, #4
   1d2b4:	mov	r2, r3
   1d2b8:	mov	r1, #0
   1d2bc:	ldr	r0, [sp, #12]
   1d2c0:	ldr	r0, [r0]
   1d2c4:	bl	28e20 <flatcc_builder_table_add@@Base>
   1d2c8:	cmp	r0, #0
   1d2cc:	beq	1d274 <_start@@Base+0x8c4c>
   1d2d0:	ldr	r3, [sp, #224]	; 0xe0
   1d2d4:	str	r3, [r0]
   1d2d8:	b	1d324 <_start@@Base+0x8cfc>
   1d2dc:	mov	r3, #7
   1d2e0:	mov	r2, r5
   1d2e4:	mov	r1, r6
   1d2e8:	ldr	r0, [sp, #12]
   1d2ec:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1d2f0:	mov	r6, r0
   1d2f4:	b	1d240 <_start@@Base+0x8c18>
   1d2f8:	mov	r2, r5
   1d2fc:	mov	r1, r0
   1d300:	ldr	r0, [sp, #12]
   1d304:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1d308:	mov	r6, r0
   1d30c:	b	1d324 <_start@@Base+0x8cfc>
   1d310:	mov	r2, r5
   1d314:	mov	r1, r0
   1d318:	ldr	r0, [sp, #12]
   1d31c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1d320:	mov	r6, r0
   1d324:	sub	r3, r5, r6
   1d328:	cmp	r3, #1
   1d32c:	ble	1d340 <_start@@Base+0x8d18>
   1d330:	ldrb	r3, [r6]
   1d334:	cmp	r3, #32
   1d338:	bhi	1d354 <_start@@Base+0x8d2c>
   1d33c:	beq	1d410 <_start@@Base+0x8de8>
   1d340:	mov	r2, r5
   1d344:	mov	r1, r6
   1d348:	ldr	r0, [sp, #12]
   1d34c:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1d350:	mov	r6, r0
   1d354:	cmp	r5, r6
   1d358:	moveq	r3, #0
   1d35c:	streq	r3, [sp, #220]	; 0xdc
   1d360:	moveq	r0, r6
   1d364:	beq	1d39c <_start@@Base+0x8d74>
   1d368:	ldrb	r3, [r6]
   1d36c:	cmp	r3, #44	; 0x2c
   1d370:	beq	1d46c <_start@@Base+0x8e44>
   1d374:	mov	r3, #0
   1d378:	str	r3, [sp, #220]	; 0xdc
   1d37c:	ldrb	r3, [r6]
   1d380:	cmp	r3, #125	; 0x7d
   1d384:	beq	1d424 <_start@@Base+0x8dfc>
   1d388:	mov	r3, #10
   1d38c:	mov	r2, r5
   1d390:	mov	r1, r6
   1d394:	ldr	r0, [sp, #12]
   1d398:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1d39c:	ldr	r3, [sp, #220]	; 0xdc
   1d3a0:	cmp	r3, #0
   1d3a4:	beq	1d508 <_start@@Base+0x8ee0>
   1d3a8:	cmp	r5, r0
   1d3ac:	beq	1d3d4 <_start@@Base+0x8dac>
   1d3b0:	ldrb	r3, [r0]
   1d3b4:	cmp	r3, #34	; 0x22
   1d3b8:	addeq	r0, r0, #1
   1d3bc:	beq	1d3d4 <_start@@Base+0x8dac>
   1d3c0:	mov	r3, #5
   1d3c4:	mov	r2, r5
   1d3c8:	mov	r1, r0
   1d3cc:	ldr	r0, [sp, #12]
   1d3d0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1d3d4:	sub	r3, r5, r0
   1d3d8:	cmp	r3, #8
   1d3dc:	movcs	r3, #8
   1d3e0:	sub	r3, r3, #1
   1d3e4:	cmp	r3, #7
   1d3e8:	ldrls	pc, [pc, r3, lsl #2]
   1d3ec:	b	1d310 <_start@@Base+0x8ce8>
   1d3f0:	andeq	ip, r1, r0, lsl #31
   1d3f4:	andeq	ip, r1, r4, ror pc
   1d3f8:	andeq	ip, r1, r8, ror #30
   1d3fc:	andeq	ip, r1, ip, asr pc
   1d400:	andeq	ip, r1, r0, asr pc
   1d404:	andeq	ip, r1, r4, asr #30
   1d408:	strdeq	ip, [r1], -r0
   1d40c:	andeq	ip, r1, r4, ror #27
   1d410:	ldrb	r3, [r6, #1]
   1d414:	cmp	r3, #32
   1d418:	addhi	r6, r6, #1
   1d41c:	bls	1d340 <_start@@Base+0x8d18>
   1d420:	b	1d354 <_start@@Base+0x8d2c>
   1d424:	add	r0, r6, #1
   1d428:	sub	r3, r5, r0
   1d42c:	cmp	r3, #1
   1d430:	ble	1d444 <_start@@Base+0x8e1c>
   1d434:	ldrb	r3, [r6, #1]
   1d438:	cmp	r3, #32
   1d43c:	bhi	1d39c <_start@@Base+0x8d74>
   1d440:	beq	1d458 <_start@@Base+0x8e30>
   1d444:	mov	r2, r5
   1d448:	mov	r1, r0
   1d44c:	ldr	r0, [sp, #12]
   1d450:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1d454:	b	1d39c <_start@@Base+0x8d74>
   1d458:	ldrb	r3, [r6, #2]
   1d45c:	cmp	r3, #32
   1d460:	addhi	r0, r6, #2
   1d464:	bls	1d444 <_start@@Base+0x8e1c>
   1d468:	b	1d39c <_start@@Base+0x8d74>
   1d46c:	add	r0, r6, #1
   1d470:	sub	r3, r5, r0
   1d474:	cmp	r3, #1
   1d478:	ble	1d48c <_start@@Base+0x8e64>
   1d47c:	ldrb	r3, [r6, #1]
   1d480:	cmp	r3, #32
   1d484:	bhi	1d49c <_start@@Base+0x8e74>
   1d488:	beq	1d4d4 <_start@@Base+0x8eac>
   1d48c:	mov	r2, r5
   1d490:	mov	r1, r0
   1d494:	ldr	r0, [sp, #12]
   1d498:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1d49c:	cmp	r5, r0
   1d4a0:	beq	1d4e8 <_start@@Base+0x8ec0>
   1d4a4:	ldrb	r3, [r0]
   1d4a8:	cmp	r3, #125	; 0x7d
   1d4ac:	movne	r3, #1
   1d4b0:	strne	r3, [sp, #220]	; 0xdc
   1d4b4:	bne	1d39c <_start@@Base+0x8d74>
   1d4b8:	mov	r3, #0
   1d4bc:	str	r3, [sp, #220]	; 0xdc
   1d4c0:	mov	r2, r5
   1d4c4:	add	r1, r0, #1
   1d4c8:	ldr	r0, [sp, #12]
   1d4cc:	bl	17d9c <_start@@Base+0x3774>
   1d4d0:	b	1d39c <_start@@Base+0x8d74>
   1d4d4:	ldrb	r3, [r6, #2]
   1d4d8:	cmp	r3, #32
   1d4dc:	addhi	r0, r6, #2
   1d4e0:	bls	1d48c <_start@@Base+0x8e64>
   1d4e4:	b	1d49c <_start@@Base+0x8e74>
   1d4e8:	mov	r3, #0
   1d4ec:	str	r3, [sp, #220]	; 0xdc
   1d4f0:	mov	r3, #10
   1d4f4:	mov	r2, r5
   1d4f8:	mov	r1, r0
   1d4fc:	ldr	r0, [sp, #12]
   1d500:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1d504:	b	1d39c <_start@@Base+0x8d74>
   1d508:	mov	r4, r0
   1d50c:	ldr	r3, [sp, #12]
   1d510:	ldr	r3, [r3, #20]
   1d514:	cmp	r3, #0
   1d518:	beq	1d538 <_start@@Base+0x8f10>
   1d51c:	mov	r3, #33	; 0x21
   1d520:	mov	r2, r5
   1d524:	mov	r1, r4
   1d528:	ldr	r0, [sp, #12]
   1d52c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1d530:	mov	r4, r0
   1d534:	b	1dc2c <_start@@Base+0x9604>
   1d538:	ldr	r3, [sp, #12]
   1d53c:	ldr	r0, [r3]
   1d540:	bl	27e74 <flatcc_builder_end_table@@Base>
   1d544:	ldr	r3, [sp, #280]	; 0x118
   1d548:	str	r0, [r3]
   1d54c:	cmp	r0, #0
   1d550:	beq	1d51c <_start@@Base+0x8ef4>
   1d554:	b	1dc2c <_start@@Base+0x9604>
   1d558:	mov	r2, #2
   1d55c:	mov	r1, r2
   1d560:	ldr	sl, [sp, #12]
   1d564:	ldr	r0, [sl]
   1d568:	bl	267ec <flatcc_builder_start_struct@@Base>
   1d56c:	subs	r3, r0, #0
   1d570:	str	r3, [sp, #32]
   1d574:	beq	1dbf8 <_start@@Base+0x95d0>
   1d578:	add	r3, sp, #224	; 0xe0
   1d57c:	mov	r2, r5
   1d580:	mov	r1, r4
   1d584:	mov	r0, sl
   1d588:	bl	19394 <_start@@Base+0x4d6c>
   1d58c:	mov	r1, r0
   1d590:	mov	sl, r5
   1d594:	b	1da5c <_start@@Base+0x9434>
   1d598:	ldrb	r2, [r1, #7]
   1d59c:	mov	r3, #0
   1d5a0:	b	1d5ac <_start@@Base+0x8f84>
   1d5a4:	mov	r2, #0
   1d5a8:	mov	r3, #0
   1d5ac:	ldrb	r4, [r1, #6]
   1d5b0:	mov	r0, #0
   1d5b4:	str	r0, [sp, #156]	; 0x9c
   1d5b8:	lsl	r0, r4, #8
   1d5bc:	str	r0, [sp, #152]	; 0x98
   1d5c0:	ldrd	r4, [sp, #152]	; 0x98
   1d5c4:	orr	r4, r4, r2
   1d5c8:	orr	r5, r5, r3
   1d5cc:	mov	r2, r4
   1d5d0:	mov	r3, r5
   1d5d4:	ldrb	r4, [r1, #5]
   1d5d8:	mov	r0, #0
   1d5dc:	str	r0, [sp, #100]	; 0x64
   1d5e0:	lsl	r0, r4, #16
   1d5e4:	str	r0, [sp, #96]	; 0x60
   1d5e8:	ldrd	r4, [sp, #96]	; 0x60
   1d5ec:	orr	r4, r4, r2
   1d5f0:	orr	r5, r5, r3
   1d5f4:	mov	r2, r4
   1d5f8:	mov	r3, r5
   1d5fc:	ldrb	r4, [r1, #4]
   1d600:	mov	r0, #0
   1d604:	str	r0, [sp, #60]	; 0x3c
   1d608:	lsl	r0, r4, #24
   1d60c:	str	r0, [sp, #56]	; 0x38
   1d610:	ldrd	r4, [sp, #56]	; 0x38
   1d614:	orr	r4, r4, r2
   1d618:	orr	r5, r5, r3
   1d61c:	mov	r2, r4
   1d620:	mov	r3, r5
   1d624:	ldrb	r0, [r1, #3]
   1d628:	str	r0, [sp, #44]	; 0x2c
   1d62c:	mov	r0, #0
   1d630:	str	r0, [sp, #40]	; 0x28
   1d634:	ldrd	r4, [sp, #40]	; 0x28
   1d638:	orr	r4, r4, r2
   1d63c:	orr	r5, r5, r3
   1d640:	mov	r2, r4
   1d644:	mov	r3, r5
   1d648:	ldrb	r4, [r1, #2]
   1d64c:	lsl	r0, r4, #8
   1d650:	str	r0, [sp, #28]
   1d654:	mov	r0, #0
   1d658:	str	r0, [sp, #24]
   1d65c:	ldrd	r4, [sp, #24]
   1d660:	orr	r4, r4, r2
   1d664:	orr	r5, r5, r3
   1d668:	mov	r2, r4
   1d66c:	mov	r3, r5
   1d670:	ldrb	r4, [r1, #1]
   1d674:	lsl	r9, r4, #16
   1d678:	mov	r8, #0
   1d67c:	orr	r2, r2, r8
   1d680:	orr	r3, r3, r9
   1d684:	ldrb	r4, [r1]
   1d688:	lsl	r7, r4, #24
   1d68c:	mov	r6, #0
   1d690:	orr	r2, r2, r6
   1d694:	orr	r3, r3, r7
   1d698:	add	r5, pc, #800	; 0x320
   1d69c:	ldrd	r4, [r5]
   1d6a0:	cmp	r3, r5
   1d6a4:	cmpeq	r2, r4
   1d6a8:	bne	1d9d8 <_start@@Base+0x93b0>
   1d6ac:	add	fp, r1, #8
   1d6b0:	sub	r3, sl, fp
   1d6b4:	cmp	r3, #8
   1d6b8:	movcs	r3, #8
   1d6bc:	sub	r3, r3, #1
   1d6c0:	cmp	r3, #7
   1d6c4:	ldrls	pc, [pc, r3, lsl #2]
   1d6c8:	b	1d87c <_start@@Base+0x9254>
   1d6cc:	andeq	sp, r1, r4, ror r8
   1d6d0:	andeq	sp, r1, ip, ror #16
   1d6d4:	andeq	sp, r1, r4, ror #16
   1d6d8:	andeq	sp, r1, ip, asr r8
   1d6dc:	andeq	sp, r1, r4, asr r8
   1d6e0:	andeq	sp, r1, ip, asr #16
   1d6e4:	andeq	sp, r1, ip, lsr r7
   1d6e8:	andeq	sp, r1, r4, lsr r7
   1d6ec:	mov	r2, #0
   1d6f0:	mov	r3, #0
   1d6f4:	b	1d5d4 <_start@@Base+0x8fac>
   1d6f8:	mov	r2, #0
   1d6fc:	mov	r3, #0
   1d700:	b	1d5fc <_start@@Base+0x8fd4>
   1d704:	mov	r2, #0
   1d708:	mov	r3, #0
   1d70c:	b	1d624 <_start@@Base+0x8ffc>
   1d710:	mov	r2, #0
   1d714:	mov	r3, #0
   1d718:	b	1d648 <_start@@Base+0x9020>
   1d71c:	mov	r2, #0
   1d720:	mov	r3, #0
   1d724:	b	1d670 <_start@@Base+0x9048>
   1d728:	mov	r2, #0
   1d72c:	mov	r3, #0
   1d730:	b	1d684 <_start@@Base+0x905c>
   1d734:	mov	r3, #0
   1d738:	b	1d740 <_start@@Base+0x9118>
   1d73c:	mov	r3, #0
   1d740:	ldrb	r4, [r1, #14]
   1d744:	mov	r0, #0
   1d748:	str	r0, [sp, #204]	; 0xcc
   1d74c:	lsl	r0, r4, #8
   1d750:	str	r0, [sp, #200]	; 0xc8
   1d754:	ldrd	r4, [sp, #200]	; 0xc8
   1d758:	orr	r5, r5, r3
   1d75c:	mov	r3, r5
   1d760:	ldrb	r4, [r1, #13]
   1d764:	mov	r0, #0
   1d768:	str	r0, [sp, #188]	; 0xbc
   1d76c:	lsl	r0, r4, #16
   1d770:	str	r0, [sp, #184]	; 0xb8
   1d774:	ldrd	r4, [sp, #184]	; 0xb8
   1d778:	orr	r5, r5, r3
   1d77c:	mov	r3, r5
   1d780:	ldrb	r4, [r1, #12]
   1d784:	mov	r0, #0
   1d788:	str	r0, [sp, #164]	; 0xa4
   1d78c:	lsl	r0, r4, #24
   1d790:	str	r0, [sp, #160]	; 0xa0
   1d794:	ldrd	r4, [sp, #160]	; 0xa0
   1d798:	orr	r5, r5, r3
   1d79c:	mov	r3, r5
   1d7a0:	ldrb	r0, [r1, #11]
   1d7a4:	str	r0, [sp, #140]	; 0x8c
   1d7a8:	mov	r0, #0
   1d7ac:	str	r0, [sp, #136]	; 0x88
   1d7b0:	ldrd	r4, [sp, #136]	; 0x88
   1d7b4:	orr	r5, r5, r3
   1d7b8:	mov	r3, r5
   1d7bc:	ldrb	r4, [r1, #10]
   1d7c0:	lsl	r0, r4, #8
   1d7c4:	str	r0, [sp, #116]	; 0x74
   1d7c8:	mov	r0, #0
   1d7cc:	str	r0, [sp, #112]	; 0x70
   1d7d0:	ldrd	r4, [sp, #112]	; 0x70
   1d7d4:	orr	r5, r5, r3
   1d7d8:	mov	r3, r5
   1d7dc:	ldrb	r4, [r1, #9]
   1d7e0:	lsl	r0, r4, #16
   1d7e4:	str	r0, [sp, #84]	; 0x54
   1d7e8:	mov	r0, #0
   1d7ec:	str	r0, [sp, #80]	; 0x50
   1d7f0:	ldrd	r4, [sp, #80]	; 0x50
   1d7f4:	orr	r5, r5, r3
   1d7f8:	mov	r3, r5
   1d7fc:	ldrb	r0, [r1, #8]
   1d800:	lsl	r1, r0, #24
   1d804:	str	r1, [sp, #68]	; 0x44
   1d808:	mov	r1, #0
   1d80c:	str	r1, [sp, #64]	; 0x40
   1d810:	ldrd	r0, [sp, #64]	; 0x40
   1d814:	orr	r1, r1, r3
   1d818:	mov	r3, r1
   1d81c:	mov	r2, #0
   1d820:	bic	r3, r3, #255	; 0xff
   1d824:	add	r1, pc, #412	; 0x19c
   1d828:	ldrd	r0, [r1]
   1d82c:	cmp	r3, r1
   1d830:	cmpeq	r2, r0
   1d834:	beq	1d884 <_start@@Base+0x925c>
   1d838:	mov	r2, sl
   1d83c:	mov	r1, fp
   1d840:	ldr	r0, [sp, #12]
   1d844:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1d848:	b	1d9e4 <_start@@Base+0x93bc>
   1d84c:	mov	r3, #0
   1d850:	b	1d760 <_start@@Base+0x9138>
   1d854:	mov	r3, #0
   1d858:	b	1d780 <_start@@Base+0x9158>
   1d85c:	mov	r3, #0
   1d860:	b	1d7a0 <_start@@Base+0x9178>
   1d864:	mov	r3, #0
   1d868:	b	1d7bc <_start@@Base+0x9194>
   1d86c:	mov	r3, #0
   1d870:	b	1d7dc <_start@@Base+0x91b4>
   1d874:	mov	r3, #0
   1d878:	b	1d7fc <_start@@Base+0x91d4>
   1d87c:	mov	r3, #0
   1d880:	b	1d81c <_start@@Base+0x91f4>
   1d884:	mov	r3, #3
   1d888:	mov	r2, sl
   1d88c:	mov	r1, fp
   1d890:	ldr	r4, [sp, #12]
   1d894:	mov	r0, r4
   1d898:	bl	17de0 <_start@@Base+0x37b8>
   1d89c:	str	r0, [sp, #16]
   1d8a0:	cmp	fp, r0
   1d8a4:	beq	1d9ac <_start@@Base+0x9384>
   1d8a8:	mov	r1, #0
   1d8ac:	strh	r1, [sp, #220]	; 0xdc
   1d8b0:	mov	r2, #0
   1d8b4:	mov	r3, #0
   1d8b8:	strd	r2, [sp, #232]	; 0xe8
   1d8bc:	str	r1, [sp, #228]	; 0xe4
   1d8c0:	mov	r5, r0
   1d8c4:	cmp	sl, r0
   1d8c8:	beq	1d948 <_start@@Base+0x9320>
   1d8cc:	add	r3, sp, #232	; 0xe8
   1d8d0:	str	r3, [sp]
   1d8d4:	add	r3, sp, #228	; 0xe4
   1d8d8:	mov	r2, sl
   1d8dc:	mov	r1, r0
   1d8e0:	mov	r0, r4
   1d8e4:	bl	2d678 <flatcc_json_parser_integer@@Base>
   1d8e8:	cmp	r5, r0
   1d8ec:	beq	1d948 <_start@@Base+0x9320>
   1d8f0:	ldr	r3, [sp, #228]	; 0xe4
   1d8f4:	cmp	r3, #0
   1d8f8:	bne	1d928 <_start@@Base+0x9300>
   1d8fc:	ldrd	r2, [sp, #232]	; 0xe8
   1d900:	ldr	r4, [pc, #200]	; 1d9d0 <_start@@Base+0x93a8>
   1d904:	mov	r5, #0
   1d908:	cmp	r3, r5
   1d90c:	cmpeq	r2, r4
   1d910:	strhls	r2, [sp, #220]	; 0xdc
   1d914:	bhi	1d994 <_start@@Base+0x936c>
   1d918:	ldrh	r3, [sp, #220]	; 0xdc
   1d91c:	ldr	r2, [sp, #32]
   1d920:	strh	r3, [r2]
   1d924:	b	1d9e4 <_start@@Base+0x93bc>
   1d928:	mov	r3, #8
   1d92c:	mov	r2, sl
   1d930:	mov	r1, r0
   1d934:	ldr	r0, [sp, #12]
   1d938:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1d93c:	ldr	r3, [sp, #16]
   1d940:	cmp	r3, r0
   1d944:	bne	1d918 <_start@@Base+0x92f0>
   1d948:	add	r3, sp, #220	; 0xdc
   1d94c:	str	r3, [sp]
   1d950:	ldr	r3, [pc, #124]	; 1d9d4 <_start@@Base+0x93ac>
   1d954:	mov	r2, sl
   1d958:	ldr	r4, [sp, #16]
   1d95c:	mov	r1, r4
   1d960:	ldr	r0, [sp, #12]
   1d964:	bl	189ac <_start@@Base+0x4384>
   1d968:	cmp	sl, r0
   1d96c:	cmpne	r4, r0
   1d970:	bne	1d918 <_start@@Base+0x92f0>
   1d974:	mov	r5, sl
   1d978:	mov	r3, #33	; 0x21
   1d97c:	mov	r2, sl
   1d980:	mov	r1, r0
   1d984:	ldr	r0, [sp, #12]
   1d988:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1d98c:	mov	r4, r0
   1d990:	b	1dbd4 <_start@@Base+0x95ac>
   1d994:	mov	r3, #7
   1d998:	mov	r2, sl
   1d99c:	mov	r1, r0
   1d9a0:	ldr	r0, [sp, #12]
   1d9a4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1d9a8:	b	1d93c <_start@@Base+0x9314>
   1d9ac:	mov	r2, sl
   1d9b0:	ldr	r1, [sp, #16]
   1d9b4:	ldr	r0, [sp, #12]
   1d9b8:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1d9bc:	b	1d9e4 <_start@@Base+0x93bc>
   1d9c0:	svcpl	0x006c656e
   1d9c4:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   1d9c8:	andeq	r0, r0, r0
   1d9cc:	ldrbvs	r6, [r4, -r0, lsl #16]!
   1d9d0:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1d9d4:	andeq	r3, r5, r0, ror #2
   1d9d8:	mov	r2, sl
   1d9dc:	ldr	r0, [sp, #12]
   1d9e0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1d9e4:	sub	r3, sl, r0
   1d9e8:	cmp	r3, #1
   1d9ec:	ble	1da00 <_start@@Base+0x93d8>
   1d9f0:	ldrb	r3, [r0]
   1d9f4:	cmp	r3, #32
   1d9f8:	bhi	1da10 <_start@@Base+0x93e8>
   1d9fc:	beq	1dad0 <_start@@Base+0x94a8>
   1da00:	mov	r2, sl
   1da04:	mov	r1, r0
   1da08:	ldr	r0, [sp, #12]
   1da0c:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1da10:	cmp	sl, r0
   1da14:	moveq	r3, #0
   1da18:	streq	r3, [sp, #224]	; 0xe0
   1da1c:	moveq	r1, r0
   1da20:	beq	1da5c <_start@@Base+0x9434>
   1da24:	ldrb	r3, [r0]
   1da28:	cmp	r3, #44	; 0x2c
   1da2c:	beq	1db2c <_start@@Base+0x9504>
   1da30:	mov	r3, #0
   1da34:	str	r3, [sp, #224]	; 0xe0
   1da38:	ldrb	r3, [r0]
   1da3c:	cmp	r3, #125	; 0x7d
   1da40:	beq	1dae4 <_start@@Base+0x94bc>
   1da44:	mov	r3, #10
   1da48:	mov	r2, sl
   1da4c:	mov	r1, r0
   1da50:	ldr	r0, [sp, #12]
   1da54:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1da58:	mov	r1, r0
   1da5c:	ldr	r3, [sp, #224]	; 0xe0
   1da60:	cmp	r3, #0
   1da64:	beq	1dbcc <_start@@Base+0x95a4>
   1da68:	cmp	sl, r1
   1da6c:	beq	1da94 <_start@@Base+0x946c>
   1da70:	ldrb	r3, [r1]
   1da74:	cmp	r3, #34	; 0x22
   1da78:	addeq	r1, r1, #1
   1da7c:	beq	1da94 <_start@@Base+0x946c>
   1da80:	mov	r3, #5
   1da84:	mov	r2, sl
   1da88:	ldr	r0, [sp, #12]
   1da8c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1da90:	mov	r1, r0
   1da94:	sub	r3, sl, r1
   1da98:	cmp	r3, #8
   1da9c:	movcs	r3, #8
   1daa0:	sub	r3, r3, #1
   1daa4:	cmp	r3, #7
   1daa8:	ldrls	pc, [pc, r3, lsl #2]
   1daac:	b	1d9d8 <_start@@Base+0x93b0>
   1dab0:	andeq	sp, r1, r8, lsr #14
   1dab4:	andeq	sp, r1, ip, lsl r7
   1dab8:	andeq	sp, r1, r0, lsl r7
   1dabc:	andeq	sp, r1, r4, lsl #14
   1dac0:	strdeq	sp, [r1], -r8
   1dac4:	andeq	sp, r1, ip, ror #13
   1dac8:	andeq	sp, r1, r4, lsr #11
   1dacc:	muleq	r1, r8, r5
   1dad0:	ldrb	r3, [r0, #1]
   1dad4:	cmp	r3, #32
   1dad8:	addhi	r0, r0, #1
   1dadc:	bls	1da00 <_start@@Base+0x93d8>
   1dae0:	b	1da10 <_start@@Base+0x93e8>
   1dae4:	add	r1, r0, #1
   1dae8:	sub	r3, sl, r1
   1daec:	cmp	r3, #1
   1daf0:	ble	1db04 <_start@@Base+0x94dc>
   1daf4:	ldrb	r3, [r0, #1]
   1daf8:	cmp	r3, #32
   1dafc:	bhi	1da5c <_start@@Base+0x9434>
   1db00:	beq	1db18 <_start@@Base+0x94f0>
   1db04:	mov	r2, sl
   1db08:	ldr	r0, [sp, #12]
   1db0c:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1db10:	mov	r1, r0
   1db14:	b	1da5c <_start@@Base+0x9434>
   1db18:	ldrb	r3, [r0, #2]
   1db1c:	cmp	r3, #32
   1db20:	addhi	r1, r0, #2
   1db24:	bls	1db04 <_start@@Base+0x94dc>
   1db28:	b	1da5c <_start@@Base+0x9434>
   1db2c:	add	r1, r0, #1
   1db30:	sub	r3, sl, r1
   1db34:	cmp	r3, #1
   1db38:	ble	1db4c <_start@@Base+0x9524>
   1db3c:	ldrb	r3, [r0, #1]
   1db40:	cmp	r3, #32
   1db44:	bhi	1db5c <_start@@Base+0x9534>
   1db48:	beq	1db98 <_start@@Base+0x9570>
   1db4c:	mov	r2, sl
   1db50:	ldr	r0, [sp, #12]
   1db54:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1db58:	mov	r1, r0
   1db5c:	cmp	sl, r1
   1db60:	beq	1dbac <_start@@Base+0x9584>
   1db64:	ldrb	r3, [r1]
   1db68:	cmp	r3, #125	; 0x7d
   1db6c:	movne	r3, #1
   1db70:	strne	r3, [sp, #224]	; 0xe0
   1db74:	bne	1da5c <_start@@Base+0x9434>
   1db78:	mov	r3, #0
   1db7c:	str	r3, [sp, #224]	; 0xe0
   1db80:	mov	r2, sl
   1db84:	add	r1, r1, #1
   1db88:	ldr	r0, [sp, #12]
   1db8c:	bl	17d9c <_start@@Base+0x3774>
   1db90:	mov	r1, r0
   1db94:	b	1da5c <_start@@Base+0x9434>
   1db98:	ldrb	r3, [r0, #2]
   1db9c:	cmp	r3, #32
   1dba0:	addhi	r1, r0, #2
   1dba4:	bls	1db4c <_start@@Base+0x9524>
   1dba8:	b	1db5c <_start@@Base+0x9534>
   1dbac:	mov	r3, #0
   1dbb0:	str	r3, [sp, #224]	; 0xe0
   1dbb4:	mov	r3, #10
   1dbb8:	mov	r2, sl
   1dbbc:	ldr	r0, [sp, #12]
   1dbc0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1dbc4:	mov	r1, r0
   1dbc8:	b	1da5c <_start@@Base+0x9434>
   1dbcc:	mov	r4, r1
   1dbd0:	mov	r5, sl
   1dbd4:	cmp	r5, r4
   1dbd8:	beq	1dbf8 <_start@@Base+0x95d0>
   1dbdc:	ldr	r3, [sp, #12]
   1dbe0:	ldr	r0, [r3]
   1dbe4:	bl	26894 <flatcc_builder_end_struct@@Base>
   1dbe8:	ldr	r3, [sp, #280]	; 0x118
   1dbec:	str	r0, [r3]
   1dbf0:	cmp	r0, #0
   1dbf4:	bne	1dc4c <_start@@Base+0x9624>
   1dbf8:	mov	r3, #33	; 0x21
   1dbfc:	mov	r2, r5
   1dc00:	mov	r1, r4
   1dc04:	ldr	r0, [sp, #12]
   1dc08:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1dc0c:	mov	r4, r0
   1dc10:	b	1dc2c <_start@@Base+0x9604>
   1dc14:	ldr	r3, [sp, #280]	; 0x118
   1dc18:	mov	r2, r5
   1dc1c:	mov	r1, r4
   1dc20:	ldr	r0, [sp, #12]
   1dc24:	bl	1c560 <_start@@Base+0x7f38>
   1dc28:	mov	r4, r0
   1dc2c:	ldr	r0, [sp, #12]
   1dc30:	ldr	r3, [r0, #20]
   1dc34:	cmp	r3, #0
   1dc38:	bne	1dc4c <_start@@Base+0x9624>
   1dc3c:	ldr	r3, [sp, #280]	; 0x118
   1dc40:	ldr	r3, [r3]
   1dc44:	cmp	r3, #0
   1dc48:	beq	1dca8 <_start@@Base+0x9680>
   1dc4c:	mov	r0, r4
   1dc50:	add	sp, sp, #244	; 0xf4
   1dc54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc58:	ldr	r3, [sp, #280]	; 0x118
   1dc5c:	mov	r2, r5
   1dc60:	mov	r1, r4
   1dc64:	ldr	r0, [sp, #12]
   1dc68:	bl	1c560 <_start@@Base+0x7f38>
   1dc6c:	mov	r4, r0
   1dc70:	b	1dc2c <_start@@Base+0x9604>
   1dc74:	ldr	r3, [sp, #280]	; 0x118
   1dc78:	mov	r2, r5
   1dc7c:	mov	r1, r4
   1dc80:	ldr	r0, [sp, #12]
   1dc84:	bl	2eb0c <flatcc_json_parser_build_string@@Base>
   1dc88:	mov	r4, r0
   1dc8c:	b	1dc2c <_start@@Base+0x9604>
   1dc90:	mov	r2, r5
   1dc94:	mov	r1, r4
   1dc98:	ldr	r0, [sp, #12]
   1dc9c:	bl	2d7d4 <flatcc_json_parser_generic_json@@Base>
   1dca0:	mov	r4, r0
   1dca4:	b	1dc4c <_start@@Base+0x9624>
   1dca8:	mov	r3, #33	; 0x21
   1dcac:	mov	r2, r5
   1dcb0:	mov	r1, r4
   1dcb4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1dcb8:	mov	r4, r0
   1dcbc:	b	1dc4c <_start@@Base+0x9624>
   1dcc0:	push	{r4, r5, r6, lr}
   1dcc4:	mov	r6, r0
   1dcc8:	mov	r4, r2
   1dccc:	mov	r5, r3
   1dcd0:	cmp	r1, r2
   1dcd4:	beq	1dce4 <_start@@Base+0x96bc>
   1dcd8:	ldrb	r3, [r1]
   1dcdc:	cmp	r3, #91	; 0x5b
   1dce0:	beq	1dd00 <_start@@Base+0x96d8>
   1dce4:	mov	r3, #0
   1dce8:	str	r3, [r5]
   1dcec:	mov	r3, #22
   1dcf0:	mov	r2, r4
   1dcf4:	mov	r0, r6
   1dcf8:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1dcfc:	pop	{r4, r5, r6, pc}
   1dd00:	add	r0, r1, #1
   1dd04:	sub	r3, r2, r0
   1dd08:	cmp	r3, #1
   1dd0c:	ble	1dd20 <_start@@Base+0x96f8>
   1dd10:	ldrb	r3, [r1, #1]
   1dd14:	cmp	r3, #32
   1dd18:	bhi	1dd30 <_start@@Base+0x9708>
   1dd1c:	beq	1dd50 <_start@@Base+0x9728>
   1dd20:	mov	r2, r4
   1dd24:	mov	r1, r0
   1dd28:	mov	r0, r6
   1dd2c:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1dd30:	cmp	r4, r0
   1dd34:	beq	1dd44 <_start@@Base+0x971c>
   1dd38:	ldrb	r3, [r0]
   1dd3c:	cmp	r3, #93	; 0x5d
   1dd40:	beq	1dd64 <_start@@Base+0x973c>
   1dd44:	mov	r3, #1
   1dd48:	str	r3, [r5]
   1dd4c:	pop	{r4, r5, r6, pc}
   1dd50:	ldrb	r3, [r1, #2]
   1dd54:	cmp	r3, #32
   1dd58:	addhi	r0, r1, #2
   1dd5c:	bls	1dd20 <_start@@Base+0x96f8>
   1dd60:	b	1dd30 <_start@@Base+0x9708>
   1dd64:	mov	r3, #0
   1dd68:	str	r3, [r5]
   1dd6c:	mov	r2, r4
   1dd70:	add	r1, r0, #1
   1dd74:	mov	r0, r6
   1dd78:	bl	17d9c <_start@@Base+0x3774>
   1dd7c:	pop	{r4, r5, r6, pc}
   1dd80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd84:	sub	sp, sp, #92	; 0x5c
   1dd88:	str	r0, [sp, #48]	; 0x30
   1dd8c:	mov	r5, r2
   1dd90:	str	r3, [sp, #52]	; 0x34
   1dd94:	add	r3, sp, #84	; 0x54
   1dd98:	bl	19394 <_start@@Base+0x4d6c>
   1dd9c:	mov	r1, r0
   1dda0:	ldr	r3, [pc, #1704]	; 1e450 <_start@@Base+0x9e28>
   1dda4:	add	r3, r3, #264	; 0x108
   1dda8:	str	r3, [sp, #60]	; 0x3c
   1ddac:	b	1df1c <_start@@Base+0x98f4>
   1ddb0:	mov	r3, #0
   1ddb4:	b	1ddc0 <_start@@Base+0x9798>
   1ddb8:	mov	r2, #0
   1ddbc:	mov	r3, r2
   1ddc0:	ldrb	r0, [r4, #6]
   1ddc4:	mov	lr, #0
   1ddc8:	str	lr, [sp, #44]	; 0x2c
   1ddcc:	lsl	r1, r0, #8
   1ddd0:	str	r1, [sp, #40]	; 0x28
   1ddd4:	ldrd	r0, [sp, #40]	; 0x28
   1ddd8:	orr	r1, r1, r3
   1dddc:	mov	r3, r1
   1dde0:	ldrb	r0, [r4, #5]
   1dde4:	mov	lr, #0
   1dde8:	str	lr, [sp, #36]	; 0x24
   1ddec:	lsl	r1, r0, #16
   1ddf0:	str	r1, [sp, #32]
   1ddf4:	ldrd	r0, [sp, #32]
   1ddf8:	orr	r1, r1, r3
   1ddfc:	mov	r3, r1
   1de00:	ldrb	r0, [r4, #4]
   1de04:	mov	lr, #0
   1de08:	str	lr, [sp, #28]
   1de0c:	lsl	r1, r0, #24
   1de10:	str	r1, [sp, #24]
   1de14:	ldrd	r0, [sp, #24]
   1de18:	orr	r1, r1, r3
   1de1c:	mov	r3, r1
   1de20:	ldrb	r1, [r4, #3]
   1de24:	str	r1, [sp, #20]
   1de28:	mov	r1, #0
   1de2c:	str	r1, [sp, #16]
   1de30:	ldrd	r0, [sp, #16]
   1de34:	orr	r1, r1, r3
   1de38:	mov	r3, r1
   1de3c:	ldrb	r0, [r4, #2]
   1de40:	lsl	r1, r0, #8
   1de44:	str	r1, [sp, #12]
   1de48:	mov	r1, #0
   1de4c:	str	r1, [sp, #8]
   1de50:	ldrd	r0, [sp, #8]
   1de54:	orr	r1, r1, r3
   1de58:	mov	r3, r1
   1de5c:	ldrb	r0, [r4, #1]
   1de60:	lsl	fp, r0, #16
   1de64:	orr	r3, r3, fp
   1de68:	ldrb	r0, [r4]
   1de6c:	lsl	r9, r0, #24
   1de70:	orr	r3, r3, r9
   1de74:	mov	r2, #0
   1de78:	and	r3, r3, #-16777216	; 0xff000000
   1de7c:	cmp	r3, #1644167168	; 0x62000000
   1de80:	cmpeq	r2, #0
   1de84:	beq	1dfe0 <_start@@Base+0x99b8>
   1de88:	cmp	r3, #1627389952	; 0x61000000
   1de8c:	cmpeq	r2, #0
   1de90:	beq	1e180 <_start@@Base+0x9b58>
   1de94:	mov	r2, r5
   1de98:	mov	r1, r4
   1de9c:	ldr	r0, [sp, #48]	; 0x30
   1dea0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1dea4:	sub	r3, r5, r0
   1dea8:	cmp	r3, #1
   1deac:	ble	1dec0 <_start@@Base+0x9898>
   1deb0:	ldrb	r3, [r0]
   1deb4:	cmp	r3, #32
   1deb8:	bhi	1ded0 <_start@@Base+0x98a8>
   1debc:	beq	1e354 <_start@@Base+0x9d2c>
   1dec0:	mov	r2, r5
   1dec4:	mov	r1, r0
   1dec8:	ldr	r0, [sp, #48]	; 0x30
   1decc:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1ded0:	cmp	r5, r0
   1ded4:	moveq	r3, #0
   1ded8:	streq	r3, [sp, #84]	; 0x54
   1dedc:	moveq	r1, r0
   1dee0:	beq	1df1c <_start@@Base+0x98f4>
   1dee4:	ldrb	r3, [r0]
   1dee8:	cmp	r3, #44	; 0x2c
   1deec:	beq	1e3b0 <_start@@Base+0x9d88>
   1def0:	mov	r3, #0
   1def4:	str	r3, [sp, #84]	; 0x54
   1def8:	ldrb	r3, [r0]
   1defc:	cmp	r3, #125	; 0x7d
   1df00:	beq	1e368 <_start@@Base+0x9d40>
   1df04:	mov	r3, #10
   1df08:	mov	r2, r5
   1df0c:	mov	r1, r0
   1df10:	ldr	r0, [sp, #48]	; 0x30
   1df14:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1df18:	mov	r1, r0
   1df1c:	ldr	r3, [sp, #84]	; 0x54
   1df20:	cmp	r3, #0
   1df24:	beq	1e2dc <_start@@Base+0x9cb4>
   1df28:	cmp	r1, r5
   1df2c:	moveq	r4, r5
   1df30:	beq	1df58 <_start@@Base+0x9930>
   1df34:	ldrb	r3, [r1]
   1df38:	cmp	r3, #34	; 0x22
   1df3c:	addeq	r4, r1, #1
   1df40:	beq	1df58 <_start@@Base+0x9930>
   1df44:	mov	r3, #5
   1df48:	mov	r2, r5
   1df4c:	ldr	r0, [sp, #48]	; 0x30
   1df50:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1df54:	mov	r4, r0
   1df58:	sub	ip, r5, r4
   1df5c:	cmp	ip, #8
   1df60:	movcc	r3, ip
   1df64:	movcs	r3, #8
   1df68:	sub	r3, r3, #1
   1df6c:	cmp	r3, #7
   1df70:	ldrls	pc, [pc, r3, lsl #2]
   1df74:	b	1de94 <_start@@Base+0x986c>
   1df78:	ldrdeq	sp, [r1], -r4
   1df7c:	andeq	sp, r1, r8, asr #31
   1df80:			; <UNDEFINED> instruction: 0x0001dfbc
   1df84:			; <UNDEFINED> instruction: 0x0001dfb0
   1df88:	andeq	sp, r1, r4, lsr #31
   1df8c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1df90:			; <UNDEFINED> instruction: 0x0001ddb8
   1df94:			; <UNDEFINED> instruction: 0x0001ddb0
   1df98:	mov	r2, #0
   1df9c:	mov	r3, r2
   1dfa0:	b	1dde0 <_start@@Base+0x97b8>
   1dfa4:	mov	r2, #0
   1dfa8:	mov	r3, r2
   1dfac:	b	1de00 <_start@@Base+0x97d8>
   1dfb0:	mov	r2, #0
   1dfb4:	mov	r3, r2
   1dfb8:	b	1de20 <_start@@Base+0x97f8>
   1dfbc:	mov	r2, #0
   1dfc0:	mov	r3, r2
   1dfc4:	b	1de3c <_start@@Base+0x9814>
   1dfc8:	mov	r2, #0
   1dfcc:	mov	r3, r2
   1dfd0:	b	1de5c <_start@@Base+0x9834>
   1dfd4:	mov	r2, #0
   1dfd8:	mov	r3, r2
   1dfdc:	b	1de68 <_start@@Base+0x9840>
   1dfe0:	cmp	ip, #1
   1dfe4:	ble	1dff4 <_start@@Base+0x99cc>
   1dfe8:	ldrb	r3, [r4, #1]
   1dfec:	cmp	r3, #34	; 0x22
   1dff0:	beq	1e008 <_start@@Base+0x99e0>
   1dff4:	mov	r2, r5
   1dff8:	mov	r1, r4
   1dffc:	ldr	r0, [sp, #48]	; 0x30
   1e000:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1e004:	b	1dea4 <_start@@Base+0x987c>
   1e008:	add	r1, r4, #2
   1e00c:	sub	r3, r5, r1
   1e010:	cmp	r3, #1
   1e014:	ble	1e028 <_start@@Base+0x9a00>
   1e018:	ldrb	r3, [r4, #2]
   1e01c:	cmp	r3, #32
   1e020:	bhi	1e038 <_start@@Base+0x9a10>
   1e024:	beq	1e11c <_start@@Base+0x9af4>
   1e028:	mov	r2, r5
   1e02c:	ldr	r0, [sp, #48]	; 0x30
   1e030:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1e034:	mov	r1, r0
   1e038:	cmp	r5, r1
   1e03c:	beq	1e04c <_start@@Base+0x9a24>
   1e040:	ldrb	r3, [r1]
   1e044:	cmp	r3, #58	; 0x3a
   1e048:	beq	1e130 <_start@@Base+0x9b08>
   1e04c:	mov	r3, #4
   1e050:	mov	r2, r5
   1e054:	ldr	r0, [sp, #48]	; 0x30
   1e058:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1e05c:	mov	r6, r0
   1e060:	cmp	r6, r4
   1e064:	beq	1dff4 <_start@@Base+0x99cc>
   1e068:	mov	r3, #0
   1e06c:	strb	r3, [sp, #66]	; 0x42
   1e070:	mov	r3, #0
   1e074:	str	r3, [sp, #72]	; 0x48
   1e078:	str	r3, [sp, #76]	; 0x4c
   1e07c:	str	r3, [sp, #68]	; 0x44
   1e080:	cmp	r5, r6
   1e084:	beq	1e0ec <_start@@Base+0x9ac4>
   1e088:	add	r3, sp, #72	; 0x48
   1e08c:	str	r3, [sp]
   1e090:	add	r3, sp, #68	; 0x44
   1e094:	mov	r2, r5
   1e098:	mov	r1, r6
   1e09c:	ldr	r0, [sp, #48]	; 0x30
   1e0a0:	bl	2d678 <flatcc_json_parser_integer@@Base>
   1e0a4:	cmp	r6, r0
   1e0a8:	beq	1e0ec <_start@@Base+0x9ac4>
   1e0ac:	ldrd	r2, [sp, #72]	; 0x48
   1e0b0:	ldr	r1, [sp, #68]	; 0x44
   1e0b4:	cmp	r1, #0
   1e0b8:	beq	1e148 <_start@@Base+0x9b20>
   1e0bc:	cmp	r3, #0
   1e0c0:	cmpeq	r2, #128	; 0x80
   1e0c4:	rsbls	r2, r2, #0
   1e0c8:	strbls	r2, [sp, #66]	; 0x42
   1e0cc:	bls	1e158 <_start@@Base+0x9b30>
   1e0d0:	mov	r3, #8
   1e0d4:	mov	r2, r5
   1e0d8:	mov	r1, r0
   1e0dc:	ldr	r0, [sp, #48]	; 0x30
   1e0e0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1e0e4:	cmp	r6, r0
   1e0e8:	bne	1e158 <_start@@Base+0x9b30>
   1e0ec:	add	r3, sp, #66	; 0x42
   1e0f0:	str	r3, [sp]
   1e0f4:	ldr	r3, [pc, #852]	; 1e450 <_start@@Base+0x9e28>
   1e0f8:	add	r3, r3, #252	; 0xfc
   1e0fc:	mov	r2, r5
   1e100:	mov	r1, r6
   1e104:	ldr	r0, [sp, #48]	; 0x30
   1e108:	bl	18ed0 <_start@@Base+0x48a8>
   1e10c:	cmp	r5, r0
   1e110:	cmpne	r0, r6
   1e114:	bne	1e158 <_start@@Base+0x9b30>
   1e118:	b	1e2c4 <_start@@Base+0x9c9c>
   1e11c:	ldrb	r3, [r4, #3]
   1e120:	cmp	r3, #32
   1e124:	addhi	r1, r4, #3
   1e128:	bls	1e028 <_start@@Base+0x9a00>
   1e12c:	b	1e038 <_start@@Base+0x9a10>
   1e130:	mov	r2, r5
   1e134:	add	r1, r1, #1
   1e138:	ldr	r0, [sp, #48]	; 0x30
   1e13c:	bl	17d9c <_start@@Base+0x3774>
   1e140:	mov	r6, r0
   1e144:	b	1e060 <_start@@Base+0x9a38>
   1e148:	cmp	r3, #0
   1e14c:	cmpeq	r2, #127	; 0x7f
   1e150:	strbls	r2, [sp, #66]	; 0x42
   1e154:	bhi	1e168 <_start@@Base+0x9b40>
   1e158:	ldrb	r3, [sp, #66]	; 0x42
   1e15c:	ldr	r2, [sp, #52]	; 0x34
   1e160:	strb	r3, [r2, #2]
   1e164:	b	1dea4 <_start@@Base+0x987c>
   1e168:	mov	r3, #7
   1e16c:	mov	r2, r5
   1e170:	mov	r1, r0
   1e174:	ldr	r0, [sp, #48]	; 0x30
   1e178:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1e17c:	b	1e0e4 <_start@@Base+0x9abc>
   1e180:	cmp	ip, #1
   1e184:	ble	1e194 <_start@@Base+0x9b6c>
   1e188:	ldrb	r3, [r4, #1]
   1e18c:	cmp	r3, #34	; 0x22
   1e190:	beq	1e1a8 <_start@@Base+0x9b80>
   1e194:	mov	r2, r5
   1e198:	mov	r1, r4
   1e19c:	ldr	r0, [sp, #48]	; 0x30
   1e1a0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1e1a4:	b	1dea4 <_start@@Base+0x987c>
   1e1a8:	add	r1, r4, #2
   1e1ac:	sub	r3, r5, r1
   1e1b0:	cmp	r3, #1
   1e1b4:	ble	1e1c8 <_start@@Base+0x9ba0>
   1e1b8:	ldrb	r3, [r4, #2]
   1e1bc:	cmp	r3, #32
   1e1c0:	bhi	1e1d8 <_start@@Base+0x9bb0>
   1e1c4:	beq	1e2e8 <_start@@Base+0x9cc0>
   1e1c8:	mov	r2, r5
   1e1cc:	ldr	r0, [sp, #48]	; 0x30
   1e1d0:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1e1d4:	mov	r1, r0
   1e1d8:	cmp	r5, r1
   1e1dc:	beq	1e1ec <_start@@Base+0x9bc4>
   1e1e0:	ldrb	r3, [r1]
   1e1e4:	cmp	r3, #58	; 0x3a
   1e1e8:	beq	1e2fc <_start@@Base+0x9cd4>
   1e1ec:	mov	r3, #4
   1e1f0:	mov	r2, r5
   1e1f4:	ldr	r0, [sp, #48]	; 0x30
   1e1f8:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1e1fc:	str	r0, [sp, #56]	; 0x38
   1e200:	ldr	r2, [sp, #56]	; 0x38
   1e204:	cmp	r2, r4
   1e208:	beq	1e194 <_start@@Base+0x9b6c>
   1e20c:	mov	r3, #0
   1e210:	strh	r3, [sp, #66]	; 0x42
   1e214:	mov	r3, #0
   1e218:	str	r3, [sp, #72]	; 0x48
   1e21c:	str	r3, [sp, #76]	; 0x4c
   1e220:	str	r3, [sp, #68]	; 0x44
   1e224:	mov	r4, r2
   1e228:	cmp	r5, r2
   1e22c:	beq	1e298 <_start@@Base+0x9c70>
   1e230:	add	r3, sp, #72	; 0x48
   1e234:	str	r3, [sp]
   1e238:	add	r3, sp, #68	; 0x44
   1e23c:	mov	r2, r5
   1e240:	mov	r1, r4
   1e244:	ldr	r0, [sp, #48]	; 0x30
   1e248:	bl	2d678 <flatcc_json_parser_integer@@Base>
   1e24c:	cmp	r4, r0
   1e250:	beq	1e298 <_start@@Base+0x9c70>
   1e254:	ldrd	r2, [sp, #72]	; 0x48
   1e258:	ldr	r1, [sp, #68]	; 0x44
   1e25c:	cmp	r1, #0
   1e260:	beq	1e314 <_start@@Base+0x9cec>
   1e264:	cmp	r3, #0
   1e268:	cmpeq	r2, #32768	; 0x8000
   1e26c:	rsbls	r2, r2, #0
   1e270:	strhls	r2, [sp, #66]	; 0x42
   1e274:	bls	1e32c <_start@@Base+0x9d04>
   1e278:	mov	r3, #8
   1e27c:	mov	r2, r5
   1e280:	mov	r1, r0
   1e284:	ldr	r0, [sp, #48]	; 0x30
   1e288:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1e28c:	ldr	r3, [sp, #56]	; 0x38
   1e290:	cmp	r3, r0
   1e294:	bne	1e32c <_start@@Base+0x9d04>
   1e298:	add	r3, sp, #66	; 0x42
   1e29c:	str	r3, [sp]
   1e2a0:	ldr	r3, [sp, #60]	; 0x3c
   1e2a4:	mov	r2, r5
   1e2a8:	ldr	r4, [sp, #56]	; 0x38
   1e2ac:	mov	r1, r4
   1e2b0:	ldr	r0, [sp, #48]	; 0x30
   1e2b4:	bl	18d10 <_start@@Base+0x46e8>
   1e2b8:	cmp	r5, r0
   1e2bc:	cmpne	r0, r4
   1e2c0:	bne	1e32c <_start@@Base+0x9d04>
   1e2c4:	mov	r3, #33	; 0x21
   1e2c8:	mov	r2, r5
   1e2cc:	mov	r1, r0
   1e2d0:	ldr	r0, [sp, #48]	; 0x30
   1e2d4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1e2d8:	mov	r1, r0
   1e2dc:	mov	r0, r1
   1e2e0:	add	sp, sp, #92	; 0x5c
   1e2e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e2e8:	ldrb	r3, [r4, #3]
   1e2ec:	cmp	r3, #32
   1e2f0:	addhi	r1, r4, #3
   1e2f4:	bls	1e1c8 <_start@@Base+0x9ba0>
   1e2f8:	b	1e1d8 <_start@@Base+0x9bb0>
   1e2fc:	mov	r2, r5
   1e300:	add	r1, r1, #1
   1e304:	ldr	r0, [sp, #48]	; 0x30
   1e308:	bl	17d9c <_start@@Base+0x3774>
   1e30c:	str	r0, [sp, #56]	; 0x38
   1e310:	b	1e200 <_start@@Base+0x9bd8>
   1e314:	ldr	r6, [pc, #312]	; 1e454 <_start@@Base+0x9e2c>
   1e318:	mov	r7, #0
   1e31c:	cmp	r3, r7
   1e320:	cmpeq	r2, r6
   1e324:	strhls	r2, [sp, #66]	; 0x42
   1e328:	bhi	1e33c <_start@@Base+0x9d14>
   1e32c:	ldrh	r3, [sp, #66]	; 0x42
   1e330:	ldr	r2, [sp, #52]	; 0x34
   1e334:	strh	r3, [r2]
   1e338:	b	1dea4 <_start@@Base+0x987c>
   1e33c:	mov	r3, #7
   1e340:	mov	r2, r5
   1e344:	mov	r1, r0
   1e348:	ldr	r0, [sp, #48]	; 0x30
   1e34c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1e350:	b	1e28c <_start@@Base+0x9c64>
   1e354:	ldrb	r3, [r0, #1]
   1e358:	cmp	r3, #32
   1e35c:	addhi	r0, r0, #1
   1e360:	bls	1dec0 <_start@@Base+0x9898>
   1e364:	b	1ded0 <_start@@Base+0x98a8>
   1e368:	add	r1, r0, #1
   1e36c:	sub	r3, r5, r1
   1e370:	cmp	r3, #1
   1e374:	ble	1e388 <_start@@Base+0x9d60>
   1e378:	ldrb	r3, [r0, #1]
   1e37c:	cmp	r3, #32
   1e380:	bhi	1df1c <_start@@Base+0x98f4>
   1e384:	beq	1e39c <_start@@Base+0x9d74>
   1e388:	mov	r2, r5
   1e38c:	ldr	r0, [sp, #48]	; 0x30
   1e390:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1e394:	mov	r1, r0
   1e398:	b	1df1c <_start@@Base+0x98f4>
   1e39c:	ldrb	r3, [r0, #2]
   1e3a0:	cmp	r3, #32
   1e3a4:	addhi	r1, r0, #2
   1e3a8:	bls	1e388 <_start@@Base+0x9d60>
   1e3ac:	b	1df1c <_start@@Base+0x98f4>
   1e3b0:	add	r1, r0, #1
   1e3b4:	sub	r3, r5, r1
   1e3b8:	cmp	r3, #1
   1e3bc:	ble	1e3d0 <_start@@Base+0x9da8>
   1e3c0:	ldrb	r3, [r0, #1]
   1e3c4:	cmp	r3, #32
   1e3c8:	bhi	1e3e0 <_start@@Base+0x9db8>
   1e3cc:	beq	1e41c <_start@@Base+0x9df4>
   1e3d0:	mov	r2, r5
   1e3d4:	ldr	r0, [sp, #48]	; 0x30
   1e3d8:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1e3dc:	mov	r1, r0
   1e3e0:	cmp	r5, r1
   1e3e4:	beq	1e430 <_start@@Base+0x9e08>
   1e3e8:	ldrb	r3, [r1]
   1e3ec:	cmp	r3, #125	; 0x7d
   1e3f0:	movne	r3, #1
   1e3f4:	strne	r3, [sp, #84]	; 0x54
   1e3f8:	bne	1df1c <_start@@Base+0x98f4>
   1e3fc:	mov	r3, #0
   1e400:	str	r3, [sp, #84]	; 0x54
   1e404:	mov	r2, r5
   1e408:	add	r1, r1, #1
   1e40c:	ldr	r0, [sp, #48]	; 0x30
   1e410:	bl	17d9c <_start@@Base+0x3774>
   1e414:	mov	r1, r0
   1e418:	b	1df1c <_start@@Base+0x98f4>
   1e41c:	ldrb	r3, [r0, #2]
   1e420:	cmp	r3, #32
   1e424:	addhi	r1, r0, #2
   1e428:	bls	1e3d0 <_start@@Base+0x9da8>
   1e42c:	b	1e3e0 <_start@@Base+0x9db8>
   1e430:	mov	r3, #0
   1e434:	str	r3, [sp, #84]	; 0x54
   1e438:	mov	r3, #10
   1e43c:	mov	r2, r5
   1e440:	ldr	r0, [sp, #48]	; 0x30
   1e444:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1e448:	mov	r1, r0
   1e44c:	b	1df1c <_start@@Base+0x98f4>
   1e450:	andeq	r3, r5, r0, ror r0
   1e454:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1e458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e45c:	vpush	{d8-d9}
   1e460:	sub	sp, sp, #308	; 0x134
   1e464:	mov	fp, r0
   1e468:	mov	sl, r1
   1e46c:	mov	r9, r2
   1e470:	mov	r2, r3
   1e474:	str	r3, [sp, #192]	; 0xc0
   1e478:	mov	r3, #0
   1e47c:	str	r3, [r2]
   1e480:	mov	r1, #36	; 0x24
   1e484:	ldr	r0, [r0]
   1e488:	bl	27424 <flatcc_builder_start_table@@Base>
   1e48c:	cmp	r0, #0
   1e490:	bne	22ed0 <_start@@Base+0xe8a8>
   1e494:	add	r3, sp, #292	; 0x124
   1e498:	str	r3, [sp]
   1e49c:	mov	r3, #1
   1e4a0:	mov	r2, r9
   1e4a4:	mov	r1, sl
   1e4a8:	mov	r0, fp
   1e4ac:	bl	2eca4 <flatcc_json_parser_prepare_unions@@Base>
   1e4b0:	cmp	r9, r0
   1e4b4:	beq	22ed0 <_start@@Base+0xe8a8>
   1e4b8:	add	r3, sp, #300	; 0x12c
   1e4bc:	mov	r2, r9
   1e4c0:	mov	r1, sl
   1e4c4:	mov	r0, fp
   1e4c8:	bl	19394 <_start@@Base+0x4d6c>
   1e4cc:	mov	sl, r0
   1e4d0:	ldr	r3, [sp, #300]	; 0x12c
   1e4d4:	cmp	r3, #0
   1e4d8:	beq	22ec4 <_start@@Base+0xe89c>
   1e4dc:	ldr	r3, [pc, #1544]	; 1eaec <_start@@Base+0xa4c4>
   1e4e0:	add	r3, r3, #612	; 0x264
   1e4e4:	str	r3, [sp, #248]	; 0xf8
   1e4e8:	mov	r8, r0
   1e4ec:	mov	sl, r9
   1e4f0:	b	21d44 <_start@@Base+0xd71c>
   1e4f4:	mov	r3, #5
   1e4f8:	mov	r2, sl
   1e4fc:	mov	r1, r8
   1e500:	mov	r0, fp
   1e504:	bl	17de0 <_start@@Base+0x37b8>
   1e508:	mov	r1, r0
   1e50c:	cmp	r0, r8
   1e510:	beq	1e554 <_start@@Base+0x9f2c>
   1e514:	add	r3, sp, #296	; 0x128
   1e518:	mov	r2, sl
   1e51c:	mov	r0, fp
   1e520:	bl	1e458 <_start@@Base+0x9e30>
   1e524:	mov	r8, r0
   1e528:	ldr	r3, [sp, #296]	; 0x128
   1e52c:	cmp	r3, #0
   1e530:	beq	22f88 <_start@@Base+0xe960>
   1e534:	mov	r1, #12
   1e538:	ldr	r0, [fp]
   1e53c:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   1e540:	cmp	r0, #0
   1e544:	beq	22f94 <_start@@Base+0xe96c>
   1e548:	ldr	r3, [sp, #296]	; 0x128
   1e54c:	str	r3, [r0]
   1e550:	b	21d20 <_start@@Base+0xd6f8>
   1e554:	mov	r2, sl
   1e558:	mov	r0, fp
   1e55c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1e560:	mov	r8, r0
   1e564:	b	21d20 <_start@@Base+0xd6f8>
   1e568:	mov	r3, #5
   1e56c:	mov	r2, sl
   1e570:	mov	r1, r8
   1e574:	mov	r0, fp
   1e578:	bl	17de0 <_start@@Base+0x37b8>
   1e57c:	mov	r4, r0
   1e580:	cmp	r0, r8
   1e584:	beq	1e6cc <_start@@Base+0xa0a4>
   1e588:	mov	r3, #0
   1e58c:	strb	r3, [sp, #272]	; 0x110
   1e590:	mov	r0, #0
   1e594:	mov	r1, #0
   1e598:	add	r2, sp, #280	; 0x118
   1e59c:	strd	r0, [r2]
   1e5a0:	str	r3, [sp, #276]	; 0x114
   1e5a4:	cmp	sl, r4
   1e5a8:	beq	1e618 <_start@@Base+0x9ff0>
   1e5ac:	str	r2, [sp]
   1e5b0:	add	r3, sp, #276	; 0x114
   1e5b4:	mov	r2, sl
   1e5b8:	mov	r1, r4
   1e5bc:	mov	r0, fp
   1e5c0:	bl	2d678 <flatcc_json_parser_integer@@Base>
   1e5c4:	mov	r8, r0
   1e5c8:	cmp	r4, r0
   1e5cc:	beq	1e618 <_start@@Base+0x9ff0>
   1e5d0:	add	r3, sp, #280	; 0x118
   1e5d4:	ldrd	r2, [r3]
   1e5d8:	ldr	r1, [sp, #276]	; 0x114
   1e5dc:	cmp	r1, #0
   1e5e0:	beq	1e654 <_start@@Base+0xa02c>
   1e5e4:	cmp	r3, #0
   1e5e8:	cmpeq	r2, #128	; 0x80
   1e5ec:	rsbls	r2, r2, #0
   1e5f0:	strbls	r2, [sp, #272]	; 0x110
   1e5f4:	bls	1e664 <_start@@Base+0xa03c>
   1e5f8:	mov	r3, #8
   1e5fc:	mov	r2, sl
   1e600:	mov	r1, r0
   1e604:	mov	r0, fp
   1e608:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1e60c:	mov	r8, r0
   1e610:	cmp	r4, r8
   1e614:	bne	1e664 <_start@@Base+0xa03c>
   1e618:	add	r3, sp, #272	; 0x110
   1e61c:	str	r3, [sp]
   1e620:	ldr	r3, [pc, #1220]	; 1eaec <_start@@Base+0xa4c4>
   1e624:	add	r3, r3, #276	; 0x114
   1e628:	mov	r2, sl
   1e62c:	mov	r1, r4
   1e630:	mov	r0, fp
   1e634:	bl	18ed0 <_start@@Base+0x48a8>
   1e638:	mov	r8, r0
   1e63c:	cmp	sl, r0
   1e640:	cmpne	r4, r0
   1e644:	bne	1e664 <_start@@Base+0xa03c>
   1e648:	mov	r9, sl
   1e64c:	mov	sl, r0
   1e650:	b	22ed0 <_start@@Base+0xe8a8>
   1e654:	cmp	r3, #0
   1e658:	cmpeq	r2, #127	; 0x7f
   1e65c:	strbls	r2, [sp, #272]	; 0x110
   1e660:	bhi	1e6a0 <_start@@Base+0xa078>
   1e664:	add	r3, sp, #272	; 0x110
   1e668:	ldrsb	r3, [r3]
   1e66c:	cmp	r3, #8
   1e670:	beq	1e6bc <_start@@Base+0xa094>
   1e674:	mov	r3, #1
   1e678:	mov	r2, r3
   1e67c:	mov	r1, #6
   1e680:	ldr	r0, [fp]
   1e684:	bl	28e20 <flatcc_builder_table_add@@Base>
   1e688:	cmp	r0, #0
   1e68c:	beq	22fa0 <_start@@Base+0xe978>
   1e690:	add	r3, sp, #272	; 0x110
   1e694:	ldrsb	r3, [r3]
   1e698:	strb	r3, [r0]
   1e69c:	b	21d20 <_start@@Base+0xd6f8>
   1e6a0:	mov	r3, #7
   1e6a4:	mov	r2, sl
   1e6a8:	mov	r1, r0
   1e6ac:	mov	r0, fp
   1e6b0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1e6b4:	mov	r8, r0
   1e6b8:	b	1e610 <_start@@Base+0x9fe8>
   1e6bc:	ldr	r3, [fp, #8]
   1e6c0:	tst	r3, #2
   1e6c4:	beq	21d20 <_start@@Base+0xd6f8>
   1e6c8:	b	1e674 <_start@@Base+0xa04c>
   1e6cc:	mov	r2, sl
   1e6d0:	mov	r1, r0
   1e6d4:	mov	r0, fp
   1e6d8:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1e6dc:	mov	r8, r0
   1e6e0:	b	21d20 <_start@@Base+0xd6f8>
   1e6e4:	mvn	r2, #0
   1e6e8:	ldr	r3, [pc, #1008]	; 1eae0 <_start@@Base+0xa4b8>
   1e6ec:	cmp	r1, r3
   1e6f0:	cmpeq	r0, r2
   1e6f4:	bhi	1e87c <_start@@Base+0xa254>
   1e6f8:	mov	r4, #0
   1e6fc:	add	r3, pc, #956	; 0x3bc
   1e700:	ldrd	r2, [r3]
   1e704:	cmp	r1, r3
   1e708:	cmpeq	r4, r2
   1e70c:	beq	1e728 <_start@@Base+0xa100>
   1e710:	mov	r2, sl
   1e714:	mov	r1, r8
   1e718:	mov	r0, fp
   1e71c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1e720:	mov	r8, r0
   1e724:	b	21d20 <_start@@Base+0xd6f8>
   1e728:	mov	r3, #4
   1e72c:	mov	r2, sl
   1e730:	mov	r1, r8
   1e734:	mov	r0, fp
   1e738:	bl	17de0 <_start@@Base+0x37b8>
   1e73c:	mov	r4, r0
   1e740:	cmp	r0, r8
   1e744:	beq	1e864 <_start@@Base+0xa23c>
   1e748:	mvn	r3, #0
   1e74c:	mov	r2, #1
   1e750:	mov	r1, r2
   1e754:	ldr	r0, [fp]
   1e758:	bl	27174 <flatcc_builder_start_vector@@Base>
   1e75c:	cmp	r0, #0
   1e760:	bne	22f58 <_start@@Base+0xe930>
   1e764:	add	r3, sp, #300	; 0x12c
   1e768:	mov	r2, sl
   1e76c:	mov	r1, r4
   1e770:	mov	r0, fp
   1e774:	bl	1dcc0 <_start@@Base+0x9698>
   1e778:	mov	r8, r0
   1e77c:	ldr	r3, [sp, #300]	; 0x12c
   1e780:	cmp	r3, #0
   1e784:	beq	1e830 <_start@@Base+0xa208>
   1e788:	mov	r7, #0
   1e78c:	mov	r6, #1
   1e790:	add	r5, sp, #280	; 0x118
   1e794:	ldr	r3, [pc, #848]	; 1eaec <_start@@Base+0xa4c4>
   1e798:	add	r9, r3, #292	; 0x124
   1e79c:	b	1e7cc <_start@@Base+0xa1a4>
   1e7a0:	ldrb	r3, [sp, #280]	; 0x118
   1e7a4:	strb	r3, [r4]
   1e7a8:	add	r3, sp, #300	; 0x12c
   1e7ac:	mov	r2, sl
   1e7b0:	mov	r1, r0
   1e7b4:	mov	r0, fp
   1e7b8:	bl	17fe0 <_start@@Base+0x39b8>
   1e7bc:	mov	r8, r0
   1e7c0:	ldr	r3, [sp, #300]	; 0x12c
   1e7c4:	cmp	r3, #0
   1e7c8:	beq	1e830 <_start@@Base+0xa208>
   1e7cc:	strb	r7, [sp, #280]	; 0x118
   1e7d0:	mov	r1, r6
   1e7d4:	ldr	r0, [fp]
   1e7d8:	bl	2696c <flatcc_builder_extend_vector@@Base>
   1e7dc:	subs	r4, r0, #0
   1e7e0:	beq	22fac <_start@@Base+0xe984>
   1e7e4:	mov	r3, r5
   1e7e8:	mov	r2, sl
   1e7ec:	mov	r1, r8
   1e7f0:	mov	r0, fp
   1e7f4:	bl	17c28 <_start@@Base+0x3600>
   1e7f8:	cmp	r0, r8
   1e7fc:	bne	1e7a0 <_start@@Base+0xa178>
   1e800:	str	r5, [sp]
   1e804:	mov	r3, r9
   1e808:	mov	r2, sl
   1e80c:	mov	r1, r8
   1e810:	mov	r0, fp
   1e814:	bl	18668 <_start@@Base+0x4040>
   1e818:	cmp	sl, r0
   1e81c:	cmpne	r0, r8
   1e820:	bne	1e7a0 <_start@@Base+0xa178>
   1e824:	mov	r9, sl
   1e828:	mov	sl, r0
   1e82c:	b	22ed0 <_start@@Base+0xe8a8>
   1e830:	ldr	r0, [fp]
   1e834:	bl	28184 <flatcc_builder_end_vector@@Base>
   1e838:	str	r0, [sp, #296]	; 0x128
   1e83c:	cmp	r0, #0
   1e840:	beq	22fb8 <_start@@Base+0xe990>
   1e844:	mov	r1, #30
   1e848:	ldr	r0, [fp]
   1e84c:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   1e850:	cmp	r0, #0
   1e854:	beq	22fc4 <_start@@Base+0xe99c>
   1e858:	ldr	r3, [sp, #296]	; 0x128
   1e85c:	str	r3, [r0]
   1e860:	b	21d20 <_start@@Base+0xd6f8>
   1e864:	mov	r2, sl
   1e868:	mov	r1, r0
   1e86c:	mov	r0, fp
   1e870:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1e874:	mov	r8, r0
   1e878:	b	21d20 <_start@@Base+0xd6f8>
   1e87c:	add	r3, pc, #580	; 0x244
   1e880:	ldrd	r2, [r3]
   1e884:	cmp	r1, r3
   1e888:	cmpeq	r0, r2
   1e88c:	bhi	1e9c4 <_start@@Base+0xa39c>
   1e890:	mov	r2, #0
   1e894:	ldr	r3, [pc, #584]	; 1eae4 <_start@@Base+0xa4bc>
   1e898:	and	r4, r4, r2
   1e89c:	and	r5, r5, r3
   1e8a0:	mov	r2, #0
   1e8a4:	ldr	r3, [pc, #572]	; 1eae8 <_start@@Base+0xa4c0>
   1e8a8:	cmp	r5, r3
   1e8ac:	cmpeq	r4, r2
   1e8b0:	beq	1e8cc <_start@@Base+0xa2a4>
   1e8b4:	mov	r2, sl
   1e8b8:	mov	r1, r8
   1e8bc:	mov	r0, fp
   1e8c0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1e8c4:	mov	r8, r0
   1e8c8:	b	21d20 <_start@@Base+0xd6f8>
   1e8cc:	mov	r3, #2
   1e8d0:	mov	r2, sl
   1e8d4:	mov	r1, r8
   1e8d8:	mov	r0, fp
   1e8dc:	bl	17de0 <_start@@Base+0x37b8>
   1e8e0:	mov	r4, r0
   1e8e4:	cmp	r0, r8
   1e8e8:	beq	1e9ac <_start@@Base+0xa384>
   1e8ec:	add	r3, sp, #304	; 0x130
   1e8f0:	mov	r2, #0
   1e8f4:	strh	r2, [r3, #-24]!	; 0xffffffe8
   1e8f8:	mov	r2, sl
   1e8fc:	mov	r1, r0
   1e900:	mov	r0, fp
   1e904:	bl	17958 <_start@@Base+0x3330>
   1e908:	mov	r8, r0
   1e90c:	cmp	r4, r0
   1e910:	beq	1e950 <_start@@Base+0xa328>
   1e914:	add	r3, sp, #280	; 0x118
   1e918:	ldrsh	r3, [r3]
   1e91c:	cmp	r3, #100	; 0x64
   1e920:	beq	1e984 <_start@@Base+0xa35c>
   1e924:	mov	r3, #2
   1e928:	mov	r2, r3
   1e92c:	mov	r1, r3
   1e930:	ldr	r0, [fp]
   1e934:	bl	28e20 <flatcc_builder_table_add@@Base>
   1e938:	cmp	r0, #0
   1e93c:	beq	1e994 <_start@@Base+0xa36c>
   1e940:	add	r3, sp, #280	; 0x118
   1e944:	ldrsh	r3, [r3]
   1e948:	strh	r3, [r0]
   1e94c:	b	21d20 <_start@@Base+0xd6f8>
   1e950:	add	r3, sp, #280	; 0x118
   1e954:	str	r3, [sp]
   1e958:	ldr	r3, [pc, #396]	; 1eaec <_start@@Base+0xa4c4>
   1e95c:	add	r3, r3, #304	; 0x130
   1e960:	mov	r2, sl
   1e964:	mov	r1, r0
   1e968:	mov	r0, fp
   1e96c:	bl	18d10 <_start@@Base+0x46e8>
   1e970:	cmp	sl, r0
   1e974:	cmpne	r8, r0
   1e978:	beq	1e9a4 <_start@@Base+0xa37c>
   1e97c:	mov	r8, r0
   1e980:	b	1e914 <_start@@Base+0xa2ec>
   1e984:	ldr	r3, [fp, #8]
   1e988:	tst	r3, #2
   1e98c:	beq	21d20 <_start@@Base+0xd6f8>
   1e990:	b	1e924 <_start@@Base+0xa2fc>
   1e994:	mov	r9, sl
   1e998:	mov	r0, r8
   1e99c:	mov	sl, r0
   1e9a0:	b	22ed0 <_start@@Base+0xe8a8>
   1e9a4:	mov	r9, sl
   1e9a8:	b	1e99c <_start@@Base+0xa374>
   1e9ac:	mov	r2, sl
   1e9b0:	mov	r1, r0
   1e9b4:	mov	r0, fp
   1e9b8:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1e9bc:	mov	r8, r0
   1e9c0:	b	21d20 <_start@@Base+0xd6f8>
   1e9c4:	add	r3, pc, #260	; 0x104
   1e9c8:	ldrd	r2, [r3]
   1e9cc:	cmp	r1, r3
   1e9d0:	cmpeq	r0, r2
   1e9d4:	beq	1ea08 <_start@@Base+0xa3e0>
   1e9d8:	mov	r4, #0
   1e9dc:	add	r3, pc, #244	; 0xf4
   1e9e0:	ldrd	r2, [r3]
   1e9e4:	cmp	r1, r3
   1e9e8:	cmpeq	r4, r2
   1e9ec:	beq	1ebcc <_start@@Base+0xa5a4>
   1e9f0:	mov	r2, sl
   1e9f4:	mov	r1, r8
   1e9f8:	mov	r0, fp
   1e9fc:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1ea00:	mov	r8, r0
   1ea04:	b	21d20 <_start@@Base+0xd6f8>
   1ea08:	add	r4, r8, #8
   1ea0c:	mov	r1, sl
   1ea10:	mov	r0, r4
   1ea14:	bl	14750 <_start@@Base+0x128>
   1ea18:	mov	r0, #0
   1ea1c:	and	r1, r1, #-16777216	; 0xff000000
   1ea20:	cmp	r1, #2030043136	; 0x79000000
   1ea24:	cmpeq	r0, #0
   1ea28:	beq	1ea44 <_start@@Base+0xa41c>
   1ea2c:	mov	r2, sl
   1ea30:	mov	r1, r4
   1ea34:	mov	r0, fp
   1ea38:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1ea3c:	mov	r8, r0
   1ea40:	b	21d20 <_start@@Base+0xd6f8>
   1ea44:	mov	r3, #1
   1ea48:	mov	r2, sl
   1ea4c:	mov	r1, r4
   1ea50:	mov	r0, fp
   1ea54:	bl	17de0 <_start@@Base+0x37b8>
   1ea58:	mov	r8, r0
   1ea5c:	cmp	r4, r0
   1ea60:	beq	1ebb4 <_start@@Base+0xa58c>
   1ea64:	mvn	r3, #0
   1ea68:	mov	r2, #1
   1ea6c:	mov	r1, r2
   1ea70:	ldr	r0, [fp]
   1ea74:	bl	27174 <flatcc_builder_start_vector@@Base>
   1ea78:	cmp	r0, #0
   1ea7c:	bne	22fd0 <_start@@Base+0xe9a8>
   1ea80:	add	r3, sp, #300	; 0x12c
   1ea84:	mov	r2, sl
   1ea88:	mov	r1, r8
   1ea8c:	mov	r0, fp
   1ea90:	bl	1dcc0 <_start@@Base+0x9698>
   1ea94:	mov	r8, r0
   1ea98:	ldr	r3, [sp, #300]	; 0x12c
   1ea9c:	cmp	r3, #0
   1eaa0:	beq	1eb80 <_start@@Base+0xa558>
   1eaa4:	mov	r5, #0
   1eaa8:	mov	r7, #1
   1eaac:	add	r6, sp, #280	; 0x118
   1eab0:	ldr	r3, [pc, #52]	; 1eaec <_start@@Base+0xa4c4>
   1eab4:	add	r9, r3, #316	; 0x13c
   1eab8:	b	1eb1c <_start@@Base+0xa4f4>
   1eabc:	nop			; (mov r0, r0)
   1eac0:	andeq	r0, r0, r0
   1eac4:			; <UNDEFINED> instruction: 0x666c6578
   1eac8:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1eacc:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1ead0:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1ead4:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1ead8:	andeq	r0, r0, r0
   1eadc:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   1eae0:	stmdavs	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
   1eae4:			; <UNDEFINED> instruction: 0xffff0000
   1eae8:	ldmdavs	r0!, {}^	; <UNPREDICTABLE>
   1eaec:	andeq	r3, r5, r0, ror r0
   1eaf0:	ldrb	r3, [sp, #280]	; 0x118
   1eaf4:	strb	r3, [r4]
   1eaf8:	add	r3, sp, #300	; 0x12c
   1eafc:	mov	r2, sl
   1eb00:	mov	r1, r0
   1eb04:	mov	r0, fp
   1eb08:	bl	17fe0 <_start@@Base+0x39b8>
   1eb0c:	mov	r8, r0
   1eb10:	ldr	r3, [sp, #300]	; 0x12c
   1eb14:	cmp	r3, #0
   1eb18:	beq	1eb80 <_start@@Base+0xa558>
   1eb1c:	strb	r5, [sp, #280]	; 0x118
   1eb20:	mov	r1, r7
   1eb24:	ldr	r0, [fp]
   1eb28:	bl	2696c <flatcc_builder_extend_vector@@Base>
   1eb2c:	subs	r4, r0, #0
   1eb30:	beq	22fdc <_start@@Base+0xe9b4>
   1eb34:	mov	r3, r6
   1eb38:	mov	r2, sl
   1eb3c:	mov	r1, r8
   1eb40:	mov	r0, fp
   1eb44:	bl	17c28 <_start@@Base+0x3600>
   1eb48:	cmp	r0, r8
   1eb4c:	bne	1eaf0 <_start@@Base+0xa4c8>
   1eb50:	str	r6, [sp]
   1eb54:	mov	r3, r9
   1eb58:	mov	r2, sl
   1eb5c:	mov	r1, r8
   1eb60:	mov	r0, fp
   1eb64:	bl	18668 <_start@@Base+0x4040>
   1eb68:	cmp	sl, r0
   1eb6c:	cmpne	r0, r8
   1eb70:	bne	1eaf0 <_start@@Base+0xa4c8>
   1eb74:	mov	r9, sl
   1eb78:	mov	sl, r0
   1eb7c:	b	22ed0 <_start@@Base+0xe8a8>
   1eb80:	ldr	r0, [fp]
   1eb84:	bl	28184 <flatcc_builder_end_vector@@Base>
   1eb88:	str	r0, [sp, #296]	; 0x128
   1eb8c:	cmp	r0, #0
   1eb90:	beq	22fe8 <_start@@Base+0xe9c0>
   1eb94:	mov	r1, #5
   1eb98:	ldr	r0, [fp]
   1eb9c:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   1eba0:	cmp	r0, #0
   1eba4:	beq	22ff4 <_start@@Base+0xe9cc>
   1eba8:	ldr	r3, [sp, #296]	; 0x128
   1ebac:	str	r3, [r0]
   1ebb0:	b	21d20 <_start@@Base+0xd6f8>
   1ebb4:	mov	r2, sl
   1ebb8:	mov	r1, r0
   1ebbc:	mov	r0, fp
   1ebc0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1ebc4:	mov	r8, r0
   1ebc8:	b	21d20 <_start@@Base+0xd6f8>
   1ebcc:	mov	r3, #4
   1ebd0:	mov	r2, sl
   1ebd4:	mov	r1, r8
   1ebd8:	mov	r0, fp
   1ebdc:	bl	17de0 <_start@@Base+0x37b8>
   1ebe0:	mov	r4, r0
   1ebe4:	cmp	r0, r8
   1ebe8:	beq	1ecac <_start@@Base+0xa684>
   1ebec:	add	r3, sp, #304	; 0x130
   1ebf0:	mov	r2, #0
   1ebf4:	strh	r2, [r3, #-24]!	; 0xffffffe8
   1ebf8:	mov	r2, sl
   1ebfc:	mov	r1, r0
   1ec00:	mov	r0, fp
   1ec04:	bl	17958 <_start@@Base+0x3330>
   1ec08:	mov	r8, r0
   1ec0c:	cmp	r4, r0
   1ec10:	beq	1ec50 <_start@@Base+0xa628>
   1ec14:	add	r3, sp, #280	; 0x118
   1ec18:	ldrsh	r3, [r3]
   1ec1c:	cmp	r3, #150	; 0x96
   1ec20:	beq	1ec84 <_start@@Base+0xa65c>
   1ec24:	mov	r3, #2
   1ec28:	mov	r2, r3
   1ec2c:	mov	r1, #1
   1ec30:	ldr	r0, [fp]
   1ec34:	bl	28e20 <flatcc_builder_table_add@@Base>
   1ec38:	cmp	r0, #0
   1ec3c:	beq	1ec94 <_start@@Base+0xa66c>
   1ec40:	add	r3, sp, #280	; 0x118
   1ec44:	ldrsh	r3, [r3]
   1ec48:	strh	r3, [r0]
   1ec4c:	b	21d20 <_start@@Base+0xd6f8>
   1ec50:	add	r3, sp, #280	; 0x118
   1ec54:	str	r3, [sp]
   1ec58:	ldr	r3, [pc, #-372]	; 1eaec <_start@@Base+0xa4c4>
   1ec5c:	add	r3, r3, #328	; 0x148
   1ec60:	mov	r2, sl
   1ec64:	mov	r1, r0
   1ec68:	mov	r0, fp
   1ec6c:	bl	18d10 <_start@@Base+0x46e8>
   1ec70:	cmp	sl, r0
   1ec74:	cmpne	r8, r0
   1ec78:	beq	1eca4 <_start@@Base+0xa67c>
   1ec7c:	mov	r8, r0
   1ec80:	b	1ec14 <_start@@Base+0xa5ec>
   1ec84:	ldr	r3, [fp, #8]
   1ec88:	tst	r3, #2
   1ec8c:	beq	21d20 <_start@@Base+0xd6f8>
   1ec90:	b	1ec24 <_start@@Base+0xa5fc>
   1ec94:	mov	r9, sl
   1ec98:	mov	r0, r8
   1ec9c:	mov	sl, r0
   1eca0:	b	22ed0 <_start@@Base+0xe8a8>
   1eca4:	mov	r9, sl
   1eca8:	b	1ec9c <_start@@Base+0xa674>
   1ecac:	mov	r2, sl
   1ecb0:	mov	r1, r0
   1ecb4:	mov	r0, fp
   1ecb8:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1ecbc:	mov	r8, r0
   1ecc0:	b	21d20 <_start@@Base+0xd6f8>
   1ecc4:	add	r3, pc, #852	; 0x354
   1ecc8:	ldrd	r2, [r3]
   1eccc:	cmp	r1, r3
   1ecd0:	cmpeq	r0, r2
   1ecd4:	bhi	1f944 <_start@@Base+0xb31c>
   1ecd8:	add	r3, pc, #840	; 0x348
   1ecdc:	ldrd	r2, [r3]
   1ece0:	cmp	r1, r3
   1ece4:	cmpeq	r0, r2
   1ece8:	bhi	1ed90 <_start@@Base+0xa768>
   1ecec:	mov	r4, #0
   1ecf0:	add	r3, pc, #824	; 0x338
   1ecf4:	ldrd	r2, [r3]
   1ecf8:	cmp	r1, r3
   1ecfc:	cmpeq	r4, r2
   1ed00:	beq	1ed1c <_start@@Base+0xa6f4>
   1ed04:	mov	r2, sl
   1ed08:	mov	r1, r8
   1ed0c:	mov	r0, fp
   1ed10:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1ed14:	mov	r8, r0
   1ed18:	b	21d20 <_start@@Base+0xd6f8>
   1ed1c:	mov	r3, #4
   1ed20:	mov	r2, sl
   1ed24:	mov	r1, r8
   1ed28:	mov	r0, fp
   1ed2c:	bl	17de0 <_start@@Base+0x37b8>
   1ed30:	mov	r1, r0
   1ed34:	cmp	r0, r8
   1ed38:	beq	1ed7c <_start@@Base+0xa754>
   1ed3c:	add	r3, sp, #296	; 0x128
   1ed40:	mov	r2, sl
   1ed44:	mov	r0, fp
   1ed48:	bl	2eb0c <flatcc_json_parser_build_string@@Base>
   1ed4c:	mov	r8, r0
   1ed50:	ldr	r3, [sp, #296]	; 0x128
   1ed54:	cmp	r3, #0
   1ed58:	beq	23000 <_start@@Base+0xe9d8>
   1ed5c:	mov	r1, #3
   1ed60:	ldr	r0, [fp]
   1ed64:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   1ed68:	cmp	r0, #0
   1ed6c:	beq	2300c <_start@@Base+0xe9e4>
   1ed70:	ldr	r3, [sp, #296]	; 0x128
   1ed74:	str	r3, [r0]
   1ed78:	b	21d20 <_start@@Base+0xd6f8>
   1ed7c:	mov	r2, sl
   1ed80:	mov	r0, fp
   1ed84:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1ed88:	mov	r8, r0
   1ed8c:	b	21d20 <_start@@Base+0xd6f8>
   1ed90:	add	r3, pc, #672	; 0x2a0
   1ed94:	ldrd	r2, [r3]
   1ed98:	cmp	r1, r3
   1ed9c:	cmpeq	r0, r2
   1eda0:	beq	1edd8 <_start@@Base+0xa7b0>
   1eda4:	mov	r4, #0
   1eda8:	bic	r5, r1, #255	; 0xff
   1edac:	add	r3, pc, #652	; 0x28c
   1edb0:	ldrd	r2, [r3]
   1edb4:	cmp	r5, r3
   1edb8:	cmpeq	r4, r2
   1edbc:	beq	1efa0 <_start@@Base+0xa978>
   1edc0:	mov	r2, sl
   1edc4:	mov	r1, r8
   1edc8:	mov	r0, fp
   1edcc:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1edd0:	mov	r8, r0
   1edd4:	b	21d20 <_start@@Base+0xd6f8>
   1edd8:	add	r4, r8, #8
   1eddc:	mov	r1, sl
   1ede0:	mov	r0, r4
   1ede4:	bl	14750 <_start@@Base+0x128>
   1ede8:	add	r3, pc, #600	; 0x258
   1edec:	ldrd	r2, [r3]
   1edf0:	cmp	r1, r3
   1edf4:	cmpeq	r0, r2
   1edf8:	beq	1ee14 <_start@@Base+0xa7ec>
   1edfc:	mov	r2, sl
   1ee00:	mov	r1, r4
   1ee04:	mov	r0, fp
   1ee08:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1ee0c:	mov	r8, r0
   1ee10:	b	21d20 <_start@@Base+0xd6f8>
   1ee14:	add	r4, r8, #16
   1ee18:	mov	r1, sl
   1ee1c:	mov	r0, r4
   1ee20:	bl	14750 <_start@@Base+0x128>
   1ee24:	and	r0, r0, #-16777216	; 0xff000000
   1ee28:	add	r3, pc, #544	; 0x220
   1ee2c:	ldrd	r2, [r3]
   1ee30:	cmp	r1, r3
   1ee34:	cmpeq	r0, r2
   1ee38:	beq	1ee54 <_start@@Base+0xa82c>
   1ee3c:	mov	r2, sl
   1ee40:	mov	r1, r4
   1ee44:	mov	r0, fp
   1ee48:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1ee4c:	mov	r8, r0
   1ee50:	b	21d20 <_start@@Base+0xd6f8>
   1ee54:	mov	r3, #5
   1ee58:	mov	r2, sl
   1ee5c:	mov	r1, r4
   1ee60:	mov	r0, fp
   1ee64:	bl	17de0 <_start@@Base+0x37b8>
   1ee68:	mov	r8, r0
   1ee6c:	cmp	r4, r0
   1ee70:	beq	1ef88 <_start@@Base+0xa960>
   1ee74:	mov	r1, #0
   1ee78:	str	r1, [sp, #296]	; 0x128
   1ee7c:	ldr	r0, [fp]
   1ee80:	bl	27424 <flatcc_builder_start_table@@Base>
   1ee84:	cmp	r0, #0
   1ee88:	bne	1ef2c <_start@@Base+0xa904>
   1ee8c:	add	r3, sp, #280	; 0x118
   1ee90:	mov	r2, sl
   1ee94:	mov	r1, r8
   1ee98:	mov	r0, fp
   1ee9c:	bl	19394 <_start@@Base+0x4d6c>
   1eea0:	mov	r8, r0
   1eea4:	ldr	r3, [sp, #280]	; 0x118
   1eea8:	cmp	r3, #0
   1eeac:	beq	1ef20 <_start@@Base+0xa8f8>
   1eeb0:	mov	r4, #5
   1eeb4:	mov	r1, r0
   1eeb8:	b	1eeec <_start@@Base+0xa8c4>
   1eebc:	mov	r2, sl
   1eec0:	mov	r0, fp
   1eec4:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1eec8:	add	r3, sp, #280	; 0x118
   1eecc:	mov	r2, sl
   1eed0:	mov	r1, r0
   1eed4:	mov	r0, fp
   1eed8:	bl	180fc <_start@@Base+0x3ad4>
   1eedc:	mov	r1, r0
   1eee0:	ldr	r3, [sp, #280]	; 0x118
   1eee4:	cmp	r3, #0
   1eee8:	beq	1ef1c <_start@@Base+0xa8f4>
   1eeec:	cmp	sl, r1
   1eef0:	beq	1eebc <_start@@Base+0xa894>
   1eef4:	ldrb	r3, [r1]
   1eef8:	cmp	r3, #34	; 0x22
   1eefc:	addeq	r1, r1, #1
   1ef00:	beq	1eebc <_start@@Base+0xa894>
   1ef04:	mov	r3, r4
   1ef08:	mov	r2, sl
   1ef0c:	mov	r0, fp
   1ef10:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1ef14:	mov	r1, r0
   1ef18:	b	1eebc <_start@@Base+0xa894>
   1ef1c:	mov	r8, r0
   1ef20:	ldr	r3, [fp, #20]
   1ef24:	cmp	r3, #0
   1ef28:	beq	1ef70 <_start@@Base+0xa948>
   1ef2c:	mov	r3, #33	; 0x21
   1ef30:	mov	r2, sl
   1ef34:	mov	r1, r8
   1ef38:	mov	r0, fp
   1ef3c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1ef40:	mov	r8, r0
   1ef44:	ldr	r3, [sp, #296]	; 0x128
   1ef48:	cmp	r3, #0
   1ef4c:	beq	23018 <_start@@Base+0xe9f0>
   1ef50:	mov	r1, #34	; 0x22
   1ef54:	ldr	r0, [fp]
   1ef58:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   1ef5c:	cmp	r0, #0
   1ef60:	beq	23024 <_start@@Base+0xe9fc>
   1ef64:	ldr	r3, [sp, #296]	; 0x128
   1ef68:	str	r3, [r0]
   1ef6c:	b	21d20 <_start@@Base+0xd6f8>
   1ef70:	ldr	r0, [fp]
   1ef74:	bl	27e74 <flatcc_builder_end_table@@Base>
   1ef78:	str	r0, [sp, #296]	; 0x128
   1ef7c:	cmp	r0, #0
   1ef80:	beq	1ef2c <_start@@Base+0xa904>
   1ef84:	b	1ef44 <_start@@Base+0xa91c>
   1ef88:	mov	r2, sl
   1ef8c:	mov	r1, r0
   1ef90:	mov	r0, fp
   1ef94:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1ef98:	mov	r8, r0
   1ef9c:	b	21d20 <_start@@Base+0xd6f8>
   1efa0:	mov	r3, #3
   1efa4:	mov	r2, sl
   1efa8:	mov	r1, r8
   1efac:	mov	r0, fp
   1efb0:	bl	17de0 <_start@@Base+0x37b8>
   1efb4:	mov	r4, r0
   1efb8:	cmp	r0, r8
   1efbc:	beq	1f92c <_start@@Base+0xb304>
   1efc0:	mov	r3, #16
   1efc4:	mov	r2, #32
   1efc8:	mov	r1, #0
   1efcc:	ldr	r0, [fp]
   1efd0:	bl	28e20 <flatcc_builder_table_add@@Base>
   1efd4:	subs	r9, r0, #0
   1efd8:	beq	22f64 <_start@@Base+0xe93c>
   1efdc:	add	r3, sp, #272	; 0x110
   1efe0:	mov	r2, sl
   1efe4:	mov	r1, r4
   1efe8:	mov	r0, fp
   1efec:	bl	19394 <_start@@Base+0x4d6c>
   1eff0:	mov	r8, r0
   1eff4:	add	r7, pc, #92	; 0x5c
   1eff8:	ldrd	r6, [r7]
   1effc:	vldr	s18, [pc, #100]	; 1f068 <_start@@Base+0xaa40>
   1f000:	ldr	r3, [pc, #100]	; 1f06c <_start@@Base+0xaa44>
   1f004:	add	r3, r3, #392	; 0x188
   1f008:	str	r3, [sp, #20]
   1f00c:	vldr	d8, [pc, #76]	; 1f060 <_start@@Base+0xaa38>
   1f010:	b	1f2e4 <_start@@Base+0xacbc>
   1f014:	ldrb	r2, [r8, #7]
   1f018:	mov	r3, #0
   1f01c:	b	1f078 <_start@@Base+0xaa50>
   1f020:			; <UNDEFINED> instruction: 0xffffffff
   1f024:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   1f028:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   1f02c:	rsbvc	r7, r1, r5, ror #4
   1f030:	andeq	r0, r0, r0
   1f034:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   1f038:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1f03c:	rsbvc	r7, r1, r5, ror #4
   1f040:	andeq	r0, r0, r0
   1f044:	rsbvc	r7, pc, r0, lsl #6
   1f048:	rsbvc	r6, r1, r5, ror #6
   1f04c:	smcvs	54867	; 0xd653
   1f050:	strvc	r0, [r0], #-0
   1f054:	svcpl	0x00746573
   1f058:	rscscc	pc, pc, #1020	; 0x3fc
   1f05c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
	...
   1f06c:	andeq	r3, r5, r0, ror r0
   1f070:	mov	r2, #0
   1f074:	mov	r3, #0
   1f078:	ldrb	r0, [r8, #6]
   1f07c:	mov	ip, #0
   1f080:	str	ip, [sp, #132]	; 0x84
   1f084:	lsl	r1, r0, #8
   1f088:	str	r1, [sp, #128]	; 0x80
   1f08c:	ldrd	r0, [sp, #128]	; 0x80
   1f090:	orr	r0, r0, r2
   1f094:	orr	r1, r1, r3
   1f098:	mov	r2, r0
   1f09c:	mov	r3, r1
   1f0a0:	ldrb	r0, [r8, #5]
   1f0a4:	mov	ip, #0
   1f0a8:	str	ip, [sp, #116]	; 0x74
   1f0ac:	lsl	r1, r0, #16
   1f0b0:	str	r1, [sp, #112]	; 0x70
   1f0b4:	ldrd	r0, [sp, #112]	; 0x70
   1f0b8:	orr	r0, r0, r2
   1f0bc:	orr	r1, r1, r3
   1f0c0:	mov	r2, r0
   1f0c4:	mov	r3, r1
   1f0c8:	ldrb	r0, [r8, #4]
   1f0cc:	mov	ip, #0
   1f0d0:	str	ip, [sp, #108]	; 0x6c
   1f0d4:	lsl	r1, r0, #24
   1f0d8:	str	r1, [sp, #104]	; 0x68
   1f0dc:	ldrd	r0, [sp, #104]	; 0x68
   1f0e0:	orr	r0, r0, r2
   1f0e4:	orr	r1, r1, r3
   1f0e8:	mov	r2, r0
   1f0ec:	mov	r3, r1
   1f0f0:	ldrb	r1, [r8, #3]
   1f0f4:	str	r1, [sp, #92]	; 0x5c
   1f0f8:	mov	r1, #0
   1f0fc:	str	r1, [sp, #88]	; 0x58
   1f100:	ldrd	r0, [sp, #88]	; 0x58
   1f104:	orr	r0, r0, r2
   1f108:	orr	r1, r1, r3
   1f10c:	mov	r2, r0
   1f110:	mov	r3, r1
   1f114:	ldrb	r0, [r8, #2]
   1f118:	lsl	r1, r0, #8
   1f11c:	str	r1, [sp, #84]	; 0x54
   1f120:	mov	r1, #0
   1f124:	str	r1, [sp, #80]	; 0x50
   1f128:	ldrd	r0, [sp, #80]	; 0x50
   1f12c:	orr	r0, r0, r2
   1f130:	orr	r1, r1, r3
   1f134:	mov	r2, r0
   1f138:	mov	r3, r1
   1f13c:	ldrb	r0, [r8, #1]
   1f140:	lsl	r1, r0, #16
   1f144:	str	r1, [sp, #68]	; 0x44
   1f148:	mov	r1, #0
   1f14c:	str	r1, [sp, #64]	; 0x40
   1f150:	ldrd	r0, [sp, #64]	; 0x40
   1f154:	orr	r0, r0, r2
   1f158:	orr	r1, r1, r3
   1f15c:	mov	r2, r0
   1f160:	mov	r3, r1
   1f164:	ldrb	r0, [r8]
   1f168:	lsl	r1, r0, #24
   1f16c:	str	r1, [sp, #60]	; 0x3c
   1f170:	mov	r1, #0
   1f174:	str	r1, [sp, #56]	; 0x38
   1f178:	ldrd	r0, [sp, #56]	; 0x38
   1f17c:	orr	r0, r0, r2
   1f180:	orr	r1, r1, r3
   1f184:	mov	r2, r0
   1f188:	mov	r3, r1
   1f18c:	cmp	r1, r7
   1f190:	cmpeq	r0, r6
   1f194:	bls	1f224 <_start@@Base+0xabfc>
   1f198:	mvn	r0, #0
   1f19c:	mvn	r1, #-2013265920	; 0x88000000
   1f1a0:	cmp	r3, r1
   1f1a4:	cmpeq	r2, r0
   1f1a8:	bhi	1f5c4 <_start@@Base+0xaf9c>
   1f1ac:	and	r2, r2, #-16777216	; 0xff000000
   1f1b0:	add	r1, pc, #984	; 0x3d8
   1f1b4:	ldrd	r0, [r1]
   1f1b8:	cmp	r3, r1
   1f1bc:	cmpeq	r2, r0
   1f1c0:	beq	1f554 <_start@@Base+0xaf2c>
   1f1c4:	mov	r2, sl
   1f1c8:	mov	r1, r8
   1f1cc:	mov	r0, fp
   1f1d0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1f1d4:	mov	r4, r0
   1f1d8:	b	1f268 <_start@@Base+0xac40>
   1f1dc:	mov	r2, #0
   1f1e0:	mov	r3, #0
   1f1e4:	b	1f0a0 <_start@@Base+0xaa78>
   1f1e8:	mov	r2, #0
   1f1ec:	mov	r3, #0
   1f1f0:	b	1f0c8 <_start@@Base+0xaaa0>
   1f1f4:	mov	r2, #0
   1f1f8:	mov	r3, #0
   1f1fc:	b	1f0f0 <_start@@Base+0xaac8>
   1f200:	mov	r2, #0
   1f204:	mov	r3, #0
   1f208:	b	1f114 <_start@@Base+0xaaec>
   1f20c:	mov	r2, #0
   1f210:	mov	r3, #0
   1f214:	b	1f13c <_start@@Base+0xab14>
   1f218:	mov	r2, #0
   1f21c:	mov	r3, #0
   1f220:	b	1f164 <_start@@Base+0xab3c>
   1f224:	and	r2, r0, #-16777216	; 0xff000000
   1f228:	mov	r3, r1
   1f22c:	add	r1, pc, #868	; 0x364
   1f230:	ldrd	r0, [r1]
   1f234:	cmp	r3, r1
   1f238:	cmpeq	r2, r0
   1f23c:	beq	1f35c <_start@@Base+0xad34>
   1f240:	add	r1, pc, #856	; 0x358
   1f244:	ldrd	r0, [r1]
   1f248:	cmp	r3, r1
   1f24c:	cmpeq	r2, r0
   1f250:	beq	1f494 <_start@@Base+0xae6c>
   1f254:	mov	r2, sl
   1f258:	mov	r1, r8
   1f25c:	mov	r0, fp
   1f260:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1f264:	mov	r4, r0
   1f268:	sub	r3, sl, r4
   1f26c:	cmp	r3, #1
   1f270:	ble	1f284 <_start@@Base+0xac5c>
   1f274:	ldrb	r3, [r4]
   1f278:	cmp	r3, #32
   1f27c:	bhi	1f298 <_start@@Base+0xac70>
   1f280:	beq	1f824 <_start@@Base+0xb1fc>
   1f284:	mov	r2, sl
   1f288:	mov	r1, r4
   1f28c:	mov	r0, fp
   1f290:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1f294:	mov	r4, r0
   1f298:	cmp	sl, r4
   1f29c:	moveq	r3, #0
   1f2a0:	streq	r3, [sp, #272]	; 0x110
   1f2a4:	moveq	r8, r4
   1f2a8:	beq	1f2e4 <_start@@Base+0xacbc>
   1f2ac:	ldrb	r3, [r4]
   1f2b0:	cmp	r3, #44	; 0x2c
   1f2b4:	beq	1f884 <_start@@Base+0xb25c>
   1f2b8:	mov	r3, #0
   1f2bc:	str	r3, [sp, #272]	; 0x110
   1f2c0:	ldrb	r3, [r4]
   1f2c4:	cmp	r3, #125	; 0x7d
   1f2c8:	beq	1f838 <_start@@Base+0xb210>
   1f2cc:	mov	r3, #10
   1f2d0:	mov	r2, sl
   1f2d4:	mov	r1, r4
   1f2d8:	mov	r0, fp
   1f2dc:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1f2e0:	mov	r8, r0
   1f2e4:	ldr	r3, [sp, #272]	; 0x110
   1f2e8:	cmp	r3, #0
   1f2ec:	beq	21d20 <_start@@Base+0xd6f8>
   1f2f0:	cmp	sl, r8
   1f2f4:	beq	1f320 <_start@@Base+0xacf8>
   1f2f8:	ldrb	r3, [r8]
   1f2fc:	cmp	r3, #34	; 0x22
   1f300:	addeq	r8, r8, #1
   1f304:	beq	1f320 <_start@@Base+0xacf8>
   1f308:	mov	r3, #5
   1f30c:	mov	r2, sl
   1f310:	mov	r1, r8
   1f314:	mov	r0, fp
   1f318:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1f31c:	mov	r8, r0
   1f320:	sub	r3, sl, r8
   1f324:	cmp	r3, #8
   1f328:	movcs	r3, #8
   1f32c:	sub	r3, r3, #1
   1f330:	cmp	r3, #7
   1f334:	ldrls	pc, [pc, r3, lsl #2]
   1f338:	b	1f254 <_start@@Base+0xac2c>
   1f33c:	andeq	pc, r1, r8, lsl r2	; <UNPREDICTABLE>
   1f340:	andeq	pc, r1, ip, lsl #4
   1f344:	andeq	pc, r1, r0, lsl #4
   1f348:	strdeq	pc, [r1], -r4
   1f34c:	andeq	pc, r1, r8, ror #3
   1f350:	ldrdeq	pc, [r1], -ip
   1f354:	andeq	pc, r1, r0, ror r0	; <UNPREDICTABLE>
   1f358:	andeq	pc, r1, r4, lsl r0	; <UNPREDICTABLE>
   1f35c:	mov	r3, #5
   1f360:	mov	r2, sl
   1f364:	mov	r1, r8
   1f368:	mov	r0, fp
   1f36c:	bl	17de0 <_start@@Base+0x37b8>
   1f370:	mov	r5, r0
   1f374:	cmp	r0, r8
   1f378:	beq	1f47c <_start@@Base+0xae54>
   1f37c:	mov	r3, #0
   1f380:	strb	r3, [sp, #268]	; 0x10c
   1f384:	mov	r0, #0
   1f388:	mov	r1, #0
   1f38c:	add	r2, sp, #280	; 0x118
   1f390:	strd	r0, [r2]
   1f394:	str	r3, [sp, #276]	; 0x114
   1f398:	cmp	sl, r5
   1f39c:	beq	1f40c <_start@@Base+0xade4>
   1f3a0:	str	r2, [sp]
   1f3a4:	add	r3, sp, #276	; 0x114
   1f3a8:	mov	r2, sl
   1f3ac:	mov	r1, r5
   1f3b0:	mov	r0, fp
   1f3b4:	bl	2d678 <flatcc_json_parser_integer@@Base>
   1f3b8:	mov	r4, r0
   1f3bc:	cmp	r5, r0
   1f3c0:	beq	1f40c <_start@@Base+0xade4>
   1f3c4:	add	r3, sp, #280	; 0x118
   1f3c8:	ldrd	r2, [r3]
   1f3cc:	ldr	r1, [sp, #276]	; 0x114
   1f3d0:	cmp	r1, #0
   1f3d4:	beq	1f440 <_start@@Base+0xae18>
   1f3d8:	cmp	r3, #0
   1f3dc:	cmpeq	r2, #128	; 0x80
   1f3e0:	rsbls	r2, r2, #0
   1f3e4:	strbls	r2, [sp, #268]	; 0x10c
   1f3e8:	bls	1f450 <_start@@Base+0xae28>
   1f3ec:	mov	r3, #8
   1f3f0:	mov	r2, sl
   1f3f4:	mov	r1, r0
   1f3f8:	mov	r0, fp
   1f3fc:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1f400:	mov	r4, r0
   1f404:	cmp	r5, r4
   1f408:	bne	1f450 <_start@@Base+0xae28>
   1f40c:	add	r3, sp, #268	; 0x10c
   1f410:	str	r3, [sp]
   1f414:	ldr	r3, [pc, #396]	; 1f5a8 <_start@@Base+0xaf80>
   1f418:	add	r3, r3, #340	; 0x154
   1f41c:	mov	r2, sl
   1f420:	mov	r1, r5
   1f424:	mov	r0, fp
   1f428:	bl	18ed0 <_start@@Base+0x48a8>
   1f42c:	mov	r4, r0
   1f430:	cmp	sl, r0
   1f434:	cmpne	r5, r0
   1f438:	bne	1f450 <_start@@Base+0xae28>
   1f43c:	b	1f520 <_start@@Base+0xaef8>
   1f440:	cmp	r3, #0
   1f444:	cmpeq	r2, #127	; 0x7f
   1f448:	strbls	r2, [sp, #268]	; 0x10c
   1f44c:	bhi	1f460 <_start@@Base+0xae38>
   1f450:	add	r3, sp, #268	; 0x10c
   1f454:	ldrsb	r3, [r3]
   1f458:	strb	r3, [r9, #24]
   1f45c:	b	1f268 <_start@@Base+0xac40>
   1f460:	mov	r3, #7
   1f464:	mov	r2, sl
   1f468:	mov	r1, r0
   1f46c:	mov	r0, fp
   1f470:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1f474:	mov	r4, r0
   1f478:	b	1f404 <_start@@Base+0xaddc>
   1f47c:	mov	r2, sl
   1f480:	mov	r1, r0
   1f484:	mov	r0, fp
   1f488:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1f48c:	mov	r4, r0
   1f490:	b	1f268 <_start@@Base+0xac40>
   1f494:	mov	r3, #5
   1f498:	mov	r2, sl
   1f49c:	mov	r1, r8
   1f4a0:	mov	r0, fp
   1f4a4:	bl	17de0 <_start@@Base+0x37b8>
   1f4a8:	mov	r5, r0
   1f4ac:	cmp	r0, r8
   1f4b0:	beq	1f53c <_start@@Base+0xaf14>
   1f4b4:	add	r3, sp, #304	; 0x130
   1f4b8:	vmov	r0, r1, d8
   1f4bc:	strd	r0, [r3, #-24]!	; 0xffffffe8
   1f4c0:	mov	r2, sl
   1f4c4:	mov	r1, r5
   1f4c8:	mov	r0, fp
   1f4cc:	bl	2d468 <flatcc_json_parser_double@@Base>
   1f4d0:	mov	r4, r0
   1f4d4:	cmp	r5, r0
   1f4d8:	beq	1f4ec <_start@@Base+0xaec4>
   1f4dc:	add	r3, sp, #280	; 0x118
   1f4e0:	ldrd	r2, [r3]
   1f4e4:	strd	r2, [r9, #16]
   1f4e8:	b	1f268 <_start@@Base+0xac40>
   1f4ec:	add	r3, sp, #280	; 0x118
   1f4f0:	str	r3, [sp]
   1f4f4:	ldr	r3, [pc, #172]	; 1f5a8 <_start@@Base+0xaf80>
   1f4f8:	add	r3, r3, #356	; 0x164
   1f4fc:	mov	r2, sl
   1f500:	mov	r1, r0
   1f504:	mov	r0, fp
   1f508:	bl	18378 <_start@@Base+0x3d50>
   1f50c:	cmp	sl, r0
   1f510:	cmpne	r4, r0
   1f514:	movne	r4, r0
   1f518:	bne	1f4dc <_start@@Base+0xaeb4>
   1f51c:	mov	r4, r0
   1f520:	mov	r3, #33	; 0x21
   1f524:	mov	r2, sl
   1f528:	mov	r1, r4
   1f52c:	mov	r0, fp
   1f530:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1f534:	mov	r8, r0
   1f538:	b	21d20 <_start@@Base+0xd6f8>
   1f53c:	mov	r2, sl
   1f540:	mov	r1, r0
   1f544:	mov	r0, fp
   1f548:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1f54c:	mov	r4, r0
   1f550:	b	1f268 <_start@@Base+0xac40>
   1f554:	mov	r3, #5
   1f558:	mov	r2, sl
   1f55c:	mov	r1, r8
   1f560:	mov	r0, fp
   1f564:	bl	17de0 <_start@@Base+0x37b8>
   1f568:	cmp	r0, r8
   1f56c:	beq	1f5ac <_start@@Base+0xaf84>
   1f570:	add	r3, r9, #26
   1f574:	mov	r2, sl
   1f578:	mov	r1, r0
   1f57c:	mov	r0, fp
   1f580:	bl	1dd80 <_start@@Base+0x9758>
   1f584:	mov	r4, r0
   1f588:	b	1f268 <_start@@Base+0xac40>
   1f58c:	nop			; (mov r0, r0)
   1f590:	movwcc	r0, #0
   1f594:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f598:	andcc	r0, r0, #0
   1f59c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f5a0:	mrscc	r0, (UNDEF: 0)
   1f5a4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1f5a8:	andeq	r3, r5, r0, ror r0
   1f5ac:	mov	r2, sl
   1f5b0:	mov	r1, r0
   1f5b4:	mov	r0, fp
   1f5b8:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1f5bc:	mov	r4, r0
   1f5c0:	b	1f268 <_start@@Base+0xac40>
   1f5c4:	mvn	r0, #0
   1f5c8:	mvn	r1, #-2030043136	; 0x87000000
   1f5cc:	cmp	r3, r1
   1f5d0:	cmpeq	r2, r0
   1f5d4:	bhi	1f6a8 <_start@@Base+0xb080>
   1f5d8:	mov	r2, #0
   1f5dc:	and	r3, r3, #-16777216	; 0xff000000
   1f5e0:	cmp	r3, #2013265920	; 0x78000000
   1f5e4:	cmpeq	r2, #0
   1f5e8:	beq	1f604 <_start@@Base+0xafdc>
   1f5ec:	mov	r2, sl
   1f5f0:	mov	r1, r8
   1f5f4:	mov	r0, fp
   1f5f8:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1f5fc:	mov	r4, r0
   1f600:	b	1f268 <_start@@Base+0xac40>
   1f604:	mov	r3, #1
   1f608:	mov	r2, sl
   1f60c:	mov	r1, r8
   1f610:	mov	r0, fp
   1f614:	bl	17de0 <_start@@Base+0x37b8>
   1f618:	mov	r5, r0
   1f61c:	cmp	r0, r8
   1f620:	beq	1f690 <_start@@Base+0xb068>
   1f624:	add	r3, sp, #304	; 0x130
   1f628:	vmov	r2, s18
   1f62c:	str	r2, [r3, #-24]!	; 0xffffffe8
   1f630:	mov	r2, sl
   1f634:	mov	r1, r0
   1f638:	mov	r0, fp
   1f63c:	bl	2d548 <flatcc_json_parser_float@@Base>
   1f640:	mov	r4, r0
   1f644:	cmp	r5, r0
   1f648:	beq	1f658 <_start@@Base+0xb030>
   1f64c:	ldr	r3, [sp, #280]	; 0x118
   1f650:	str	r3, [r9]
   1f654:	b	1f268 <_start@@Base+0xac40>
   1f658:	add	r3, sp, #280	; 0x118
   1f65c:	str	r3, [sp]
   1f660:	ldr	r3, [pc, #-192]	; 1f5a8 <_start@@Base+0xaf80>
   1f664:	add	r3, r3, #368	; 0x170
   1f668:	mov	r2, sl
   1f66c:	mov	r1, r0
   1f670:	mov	r0, fp
   1f674:	bl	18218 <_start@@Base+0x3bf0>
   1f678:	cmp	sl, r0
   1f67c:	cmpne	r4, r0
   1f680:	movne	r4, r0
   1f684:	bne	1f64c <_start@@Base+0xb024>
   1f688:	mov	r4, r0
   1f68c:	b	1f520 <_start@@Base+0xaef8>
   1f690:	mov	r2, sl
   1f694:	mov	r1, r0
   1f698:	mov	r0, fp
   1f69c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1f6a0:	mov	r4, r0
   1f6a4:	b	1f268 <_start@@Base+0xac40>
   1f6a8:	mov	r2, #0
   1f6ac:	and	r3, r3, #-16777216	; 0xff000000
   1f6b0:	cmp	r3, #2046820352	; 0x7a000000
   1f6b4:	cmpeq	r2, #0
   1f6b8:	beq	1f6e0 <_start@@Base+0xb0b8>
   1f6bc:	cmp	r3, #2030043136	; 0x79000000
   1f6c0:	cmpeq	r2, #0
   1f6c4:	beq	1f784 <_start@@Base+0xb15c>
   1f6c8:	mov	r2, sl
   1f6cc:	mov	r1, r8
   1f6d0:	mov	r0, fp
   1f6d4:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1f6d8:	mov	r4, r0
   1f6dc:	b	1f268 <_start@@Base+0xac40>
   1f6e0:	mov	r3, #1
   1f6e4:	mov	r2, sl
   1f6e8:	mov	r1, r8
   1f6ec:	mov	r0, fp
   1f6f0:	bl	17de0 <_start@@Base+0x37b8>
   1f6f4:	mov	r5, r0
   1f6f8:	cmp	r0, r8
   1f6fc:	beq	1f76c <_start@@Base+0xb144>
   1f700:	add	r3, sp, #304	; 0x130
   1f704:	vmov	r2, s18
   1f708:	str	r2, [r3, #-24]!	; 0xffffffe8
   1f70c:	mov	r2, sl
   1f710:	mov	r1, r0
   1f714:	mov	r0, fp
   1f718:	bl	2d548 <flatcc_json_parser_float@@Base>
   1f71c:	mov	r4, r0
   1f720:	cmp	r5, r0
   1f724:	beq	1f734 <_start@@Base+0xb10c>
   1f728:	ldr	r3, [sp, #280]	; 0x118
   1f72c:	str	r3, [r9, #8]
   1f730:	b	1f268 <_start@@Base+0xac40>
   1f734:	add	r3, sp, #280	; 0x118
   1f738:	str	r3, [sp]
   1f73c:	ldr	r3, [pc, #-412]	; 1f5a8 <_start@@Base+0xaf80>
   1f740:	add	r3, r3, #380	; 0x17c
   1f744:	mov	r2, sl
   1f748:	mov	r1, r0
   1f74c:	mov	r0, fp
   1f750:	bl	18218 <_start@@Base+0x3bf0>
   1f754:	cmp	sl, r0
   1f758:	cmpne	r4, r0
   1f75c:	movne	r4, r0
   1f760:	bne	1f728 <_start@@Base+0xb100>
   1f764:	mov	r4, r0
   1f768:	b	1f520 <_start@@Base+0xaef8>
   1f76c:	mov	r2, sl
   1f770:	mov	r1, r0
   1f774:	mov	r0, fp
   1f778:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1f77c:	mov	r4, r0
   1f780:	b	1f268 <_start@@Base+0xac40>
   1f784:	mov	r3, #1
   1f788:	mov	r2, sl
   1f78c:	mov	r1, r8
   1f790:	mov	r0, fp
   1f794:	bl	17de0 <_start@@Base+0x37b8>
   1f798:	mov	r5, r0
   1f79c:	cmp	r0, r8
   1f7a0:	beq	1f80c <_start@@Base+0xb1e4>
   1f7a4:	add	r3, sp, #304	; 0x130
   1f7a8:	vmov	r2, s18
   1f7ac:	str	r2, [r3, #-24]!	; 0xffffffe8
   1f7b0:	mov	r2, sl
   1f7b4:	mov	r1, r0
   1f7b8:	mov	r0, fp
   1f7bc:	bl	2d548 <flatcc_json_parser_float@@Base>
   1f7c0:	mov	r4, r0
   1f7c4:	cmp	r5, r0
   1f7c8:	beq	1f7d8 <_start@@Base+0xb1b0>
   1f7cc:	ldr	r3, [sp, #280]	; 0x118
   1f7d0:	str	r3, [r9, #4]
   1f7d4:	b	1f268 <_start@@Base+0xac40>
   1f7d8:	add	r3, sp, #280	; 0x118
   1f7dc:	str	r3, [sp]
   1f7e0:	ldr	r3, [sp, #20]
   1f7e4:	mov	r2, sl
   1f7e8:	mov	r1, r0
   1f7ec:	mov	r0, fp
   1f7f0:	bl	18218 <_start@@Base+0x3bf0>
   1f7f4:	cmp	sl, r0
   1f7f8:	cmpne	r4, r0
   1f7fc:	movne	r4, r0
   1f800:	bne	1f7cc <_start@@Base+0xb1a4>
   1f804:	mov	r4, r0
   1f808:	b	1f520 <_start@@Base+0xaef8>
   1f80c:	mov	r2, sl
   1f810:	mov	r1, r0
   1f814:	mov	r0, fp
   1f818:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1f81c:	mov	r4, r0
   1f820:	b	1f268 <_start@@Base+0xac40>
   1f824:	ldrb	r3, [r4, #1]
   1f828:	cmp	r3, #32
   1f82c:	addhi	r4, r4, #1
   1f830:	bls	1f284 <_start@@Base+0xac5c>
   1f834:	b	1f298 <_start@@Base+0xac70>
   1f838:	add	r8, r4, #1
   1f83c:	sub	r3, sl, r8
   1f840:	cmp	r3, #1
   1f844:	ble	1f858 <_start@@Base+0xb230>
   1f848:	ldrb	r3, [r4, #1]
   1f84c:	cmp	r3, #32
   1f850:	bhi	1f2e4 <_start@@Base+0xacbc>
   1f854:	beq	1f870 <_start@@Base+0xb248>
   1f858:	mov	r2, sl
   1f85c:	mov	r1, r8
   1f860:	mov	r0, fp
   1f864:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1f868:	mov	r8, r0
   1f86c:	b	1f2e4 <_start@@Base+0xacbc>
   1f870:	ldrb	r3, [r4, #2]
   1f874:	cmp	r3, #32
   1f878:	addhi	r8, r4, #2
   1f87c:	bls	1f858 <_start@@Base+0xb230>
   1f880:	b	1f2e4 <_start@@Base+0xacbc>
   1f884:	add	r8, r4, #1
   1f888:	sub	r3, sl, r8
   1f88c:	cmp	r3, #1
   1f890:	ble	1f8a4 <_start@@Base+0xb27c>
   1f894:	ldrb	r3, [r4, #1]
   1f898:	cmp	r3, #32
   1f89c:	bhi	1f8b8 <_start@@Base+0xb290>
   1f8a0:	beq	1f8f4 <_start@@Base+0xb2cc>
   1f8a4:	mov	r2, sl
   1f8a8:	mov	r1, r8
   1f8ac:	mov	r0, fp
   1f8b0:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   1f8b4:	mov	r8, r0
   1f8b8:	cmp	sl, r8
   1f8bc:	beq	1f908 <_start@@Base+0xb2e0>
   1f8c0:	ldrb	r3, [r8]
   1f8c4:	cmp	r3, #125	; 0x7d
   1f8c8:	movne	r3, #1
   1f8cc:	strne	r3, [sp, #272]	; 0x110
   1f8d0:	bne	1f2e4 <_start@@Base+0xacbc>
   1f8d4:	mov	r3, #0
   1f8d8:	str	r3, [sp, #272]	; 0x110
   1f8dc:	mov	r2, sl
   1f8e0:	add	r1, r8, #1
   1f8e4:	mov	r0, fp
   1f8e8:	bl	17d9c <_start@@Base+0x3774>
   1f8ec:	mov	r8, r0
   1f8f0:	b	1f2e4 <_start@@Base+0xacbc>
   1f8f4:	ldrb	r3, [r4, #2]
   1f8f8:	cmp	r3, #32
   1f8fc:	addhi	r8, r4, #2
   1f900:	bls	1f8a4 <_start@@Base+0xb27c>
   1f904:	b	1f8b8 <_start@@Base+0xb290>
   1f908:	mov	r3, #0
   1f90c:	str	r3, [sp, #272]	; 0x110
   1f910:	mov	r3, #10
   1f914:	mov	r2, sl
   1f918:	mov	r1, r8
   1f91c:	mov	r0, fp
   1f920:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   1f924:	mov	r8, r0
   1f928:	b	1f2e4 <_start@@Base+0xacbc>
   1f92c:	mov	r2, sl
   1f930:	mov	r1, r0
   1f934:	mov	r0, fp
   1f938:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1f93c:	mov	r8, r0
   1f940:	b	21d20 <_start@@Base+0xd6f8>
   1f944:	and	r6, r0, #-16777216	; 0xff000000
   1f948:	mov	r7, r1
   1f94c:	add	r3, pc, #924	; 0x39c
   1f950:	ldrd	r2, [r3]
   1f954:	cmp	r1, r3
   1f958:	cmpeq	r6, r2
   1f95c:	beq	1f9b8 <_start@@Base+0xb390>
   1f960:	mov	r0, #0
   1f964:	add	r3, pc, #908	; 0x38c
   1f968:	ldrd	r2, [r3]
   1f96c:	cmp	r1, r3
   1f970:	cmpeq	r0, r2
   1f974:	beq	1fa98 <_start@@Base+0xb470>
   1f978:	add	r3, pc, #896	; 0x380
   1f97c:	ldrd	r2, [r3]
   1f980:	cmp	r7, r3
   1f984:	cmpeq	r6, r2
   1f988:	beq	1fae8 <_start@@Base+0xb4c0>
   1f98c:	add	r3, pc, #884	; 0x374
   1f990:	ldrd	r2, [r3]
   1f994:	cmp	r5, r3
   1f998:	cmpeq	r4, r2
   1f99c:	beq	1fbc8 <_start@@Base+0xb5a0>
   1f9a0:	mov	r2, sl
   1f9a4:	mov	r1, r8
   1f9a8:	mov	r0, fp
   1f9ac:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1f9b0:	mov	r8, r0
   1f9b4:	b	21d20 <_start@@Base+0xd6f8>
   1f9b8:	mov	r3, #5
   1f9bc:	mov	r2, sl
   1f9c0:	mov	r1, r8
   1f9c4:	mov	r0, fp
   1f9c8:	bl	17de0 <_start@@Base+0x37b8>
   1f9cc:	mov	r6, r0
   1f9d0:	cmp	r0, r8
   1f9d4:	beq	1f98c <_start@@Base+0xb364>
   1f9d8:	mvn	r3, #-1073741824	; 0xc0000000
   1f9dc:	mov	r2, #2
   1f9e0:	mov	r1, #4
   1f9e4:	ldr	r0, [fp]
   1f9e8:	bl	27174 <flatcc_builder_start_vector@@Base>
   1f9ec:	cmp	r0, #0
   1f9f0:	bne	22f70 <_start@@Base+0xe948>
   1f9f4:	add	r3, sp, #300	; 0x12c
   1f9f8:	mov	r2, sl
   1f9fc:	mov	r1, r6
   1fa00:	mov	r0, fp
   1fa04:	bl	1dcc0 <_start@@Base+0x9698>
   1fa08:	mov	r8, r0
   1fa0c:	ldr	r3, [sp, #300]	; 0x12c
   1fa10:	cmp	r3, #0
   1fa14:	beq	1fa64 <_start@@Base+0xb43c>
   1fa18:	mov	r4, #1
   1fa1c:	mov	r1, r4
   1fa20:	ldr	r0, [fp]
   1fa24:	bl	2696c <flatcc_builder_extend_vector@@Base>
   1fa28:	subs	r3, r0, #0
   1fa2c:	beq	23030 <_start@@Base+0xea08>
   1fa30:	mov	r2, sl
   1fa34:	mov	r1, r8
   1fa38:	mov	r0, fp
   1fa3c:	bl	1dd80 <_start@@Base+0x9758>
   1fa40:	add	r3, sp, #300	; 0x12c
   1fa44:	mov	r2, sl
   1fa48:	mov	r1, r0
   1fa4c:	mov	r0, fp
   1fa50:	bl	17fe0 <_start@@Base+0x39b8>
   1fa54:	mov	r8, r0
   1fa58:	ldr	r3, [sp, #300]	; 0x12c
   1fa5c:	cmp	r3, #0
   1fa60:	bne	1fa1c <_start@@Base+0xb3f4>
   1fa64:	ldr	r0, [fp]
   1fa68:	bl	28184 <flatcc_builder_end_vector@@Base>
   1fa6c:	str	r0, [sp, #296]	; 0x128
   1fa70:	cmp	r0, #0
   1fa74:	beq	2303c <_start@@Base+0xea14>
   1fa78:	mov	r1, #9
   1fa7c:	ldr	r0, [fp]
   1fa80:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   1fa84:	cmp	r0, #0
   1fa88:	beq	23048 <_start@@Base+0xea20>
   1fa8c:	ldr	r3, [sp, #296]	; 0x128
   1fa90:	str	r3, [r0]
   1fa94:	b	21d20 <_start@@Base+0xd6f8>
   1fa98:	mov	r3, #4
   1fa9c:	mov	r2, sl
   1faa0:	mov	r1, r8
   1faa4:	mov	r0, fp
   1faa8:	bl	17de0 <_start@@Base+0x37b8>
   1faac:	cmp	r0, r8
   1fab0:	beq	1f978 <_start@@Base+0xb350>
   1fab4:	ldr	r3, [pc, #636]	; 1fd38 <_start@@Base+0xb710>
   1fab8:	str	r3, [sp, #8]
   1fabc:	ldr	r3, [sp, #292]	; 0x124
   1fac0:	str	r3, [sp, #4]
   1fac4:	mov	r3, #8
   1fac8:	str	r3, [sp]
   1facc:	mov	r3, #0
   1fad0:	mov	r2, sl
   1fad4:	mov	r1, r0
   1fad8:	mov	r0, fp
   1fadc:	bl	2ed68 <flatcc_json_parser_union@@Base>
   1fae0:	mov	r8, r0
   1fae4:	b	21d20 <_start@@Base+0xd6f8>
   1fae8:	mov	r3, #5
   1faec:	mov	r2, sl
   1faf0:	mov	r1, r8
   1faf4:	mov	r0, fp
   1faf8:	bl	17de0 <_start@@Base+0x37b8>
   1fafc:	mov	r6, r0
   1fb00:	cmp	r0, r8
   1fb04:	beq	1f98c <_start@@Base+0xb364>
   1fb08:	mvn	r3, #-1073741824	; 0xc0000000
   1fb0c:	mov	r2, #2
   1fb10:	mov	r1, #4
   1fb14:	ldr	r0, [fp]
   1fb18:	bl	27174 <flatcc_builder_start_vector@@Base>
   1fb1c:	cmp	r0, #0
   1fb20:	bne	22f7c <_start@@Base+0xe954>
   1fb24:	add	r3, sp, #300	; 0x12c
   1fb28:	mov	r2, sl
   1fb2c:	mov	r1, r6
   1fb30:	mov	r0, fp
   1fb34:	bl	1dcc0 <_start@@Base+0x9698>
   1fb38:	mov	r8, r0
   1fb3c:	ldr	r3, [sp, #300]	; 0x12c
   1fb40:	cmp	r3, #0
   1fb44:	beq	1fb94 <_start@@Base+0xb56c>
   1fb48:	mov	r4, #1
   1fb4c:	mov	r1, r4
   1fb50:	ldr	r0, [fp]
   1fb54:	bl	2696c <flatcc_builder_extend_vector@@Base>
   1fb58:	subs	r3, r0, #0
   1fb5c:	beq	23054 <_start@@Base+0xea2c>
   1fb60:	mov	r2, sl
   1fb64:	mov	r1, r8
   1fb68:	mov	r0, fp
   1fb6c:	bl	1dd80 <_start@@Base+0x9758>
   1fb70:	add	r3, sp, #300	; 0x12c
   1fb74:	mov	r2, sl
   1fb78:	mov	r1, r0
   1fb7c:	mov	r0, fp
   1fb80:	bl	17fe0 <_start@@Base+0x39b8>
   1fb84:	mov	r8, r0
   1fb88:	ldr	r3, [sp, #300]	; 0x12c
   1fb8c:	cmp	r3, #0
   1fb90:	bne	1fb4c <_start@@Base+0xb524>
   1fb94:	ldr	r0, [fp]
   1fb98:	bl	28184 <flatcc_builder_end_vector@@Base>
   1fb9c:	str	r0, [sp, #296]	; 0x128
   1fba0:	cmp	r0, #0
   1fba4:	beq	23060 <_start@@Base+0xea38>
   1fba8:	mov	r1, #31
   1fbac:	ldr	r0, [fp]
   1fbb0:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   1fbb4:	cmp	r0, #0
   1fbb8:	beq	2306c <_start@@Base+0xea44>
   1fbbc:	ldr	r3, [sp, #296]	; 0x128
   1fbc0:	str	r3, [r0]
   1fbc4:	b	21d20 <_start@@Base+0xd6f8>
   1fbc8:	add	r8, r8, #8
   1fbcc:	mov	r1, sl
   1fbd0:	mov	r0, r8
   1fbd4:	bl	14750 <_start@@Base+0x128>
   1fbd8:	mov	r0, #0
   1fbdc:	and	r1, r1, #-16777216	; 0xff000000
   1fbe0:	cmp	r1, #1694498816	; 0x65000000
   1fbe4:	cmpeq	r0, #0
   1fbe8:	beq	1fc04 <_start@@Base+0xb5dc>
   1fbec:	mov	r2, sl
   1fbf0:	mov	r1, r8
   1fbf4:	mov	r0, fp
   1fbf8:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1fbfc:	mov	r8, r0
   1fc00:	b	21d20 <_start@@Base+0xd6f8>
   1fc04:	mov	r3, #1
   1fc08:	mov	r2, sl
   1fc0c:	mov	r1, r8
   1fc10:	mov	r0, fp
   1fc14:	bl	17de0 <_start@@Base+0x37b8>
   1fc18:	mov	r1, r0
   1fc1c:	cmp	r8, r0
   1fc20:	beq	1fc60 <_start@@Base+0xb638>
   1fc24:	ldr	r3, [pc, #268]	; 1fd38 <_start@@Base+0xb710>
   1fc28:	str	r3, [sp, #12]
   1fc2c:	ldr	r3, [pc, #264]	; 1fd3c <_start@@Base+0xb714>
   1fc30:	add	r3, r3, #404	; 0x194
   1fc34:	str	r3, [sp, #8]
   1fc38:	ldr	r3, [sp, #292]	; 0x124
   1fc3c:	str	r3, [sp, #4]
   1fc40:	mov	r3, #8
   1fc44:	str	r3, [sp]
   1fc48:	mov	r3, #0
   1fc4c:	mov	r2, sl
   1fc50:	mov	r0, fp
   1fc54:	bl	2eebc <flatcc_json_parser_union_type@@Base>
   1fc58:	mov	r8, r0
   1fc5c:	b	21d20 <_start@@Base+0xd6f8>
   1fc60:	mov	r2, sl
   1fc64:	mov	r0, fp
   1fc68:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1fc6c:	mov	r8, r0
   1fc70:	b	21d20 <_start@@Base+0xd6f8>
   1fc74:	add	r3, pc, #148	; 0x94
   1fc78:	ldrd	r2, [r3]
   1fc7c:	cmp	r1, r3
   1fc80:	cmpeq	r0, r2
   1fc84:	bhi	21cd4 <_start@@Base+0xd6ac>
   1fc88:	add	r3, pc, #136	; 0x88
   1fc8c:	ldrd	r2, [r3]
   1fc90:	cmp	r1, r3
   1fc94:	cmpeq	r0, r2
   1fc98:	beq	1fd40 <_start@@Base+0xb718>
   1fc9c:	add	r3, pc, #124	; 0x7c
   1fca0:	ldrd	r2, [r3]
   1fca4:	cmp	r1, r3
   1fca8:	cmpeq	r0, r2
   1fcac:	bhi	21344 <_start@@Base+0xcd1c>
   1fcb0:	add	r3, pc, #112	; 0x70
   1fcb4:	ldrd	r2, [r3]
   1fcb8:	cmp	r1, r3
   1fcbc:	cmpeq	r0, r2
   1fcc0:	beq	20b5c <_start@@Base+0xc534>
   1fcc4:	add	r3, pc, #100	; 0x64
   1fcc8:	ldrd	r2, [r3]
   1fccc:	cmp	r1, r3
   1fcd0:	cmpeq	r0, r2
   1fcd4:	beq	21260 <_start@@Base+0xcc38>
   1fcd8:	mov	r2, sl
   1fcdc:	mov	r1, r8
   1fce0:	mov	r0, fp
   1fce4:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1fce8:	mov	r8, r0
   1fcec:	b	21d20 <_start@@Base+0xd6f8>
   1fcf0:	strcc	r0, [r0], #-0
   1fcf4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fcf8:	andeq	r0, r0, r0
   1fcfc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fd00:	strcc	r0, [r0, #-0]
   1fd04:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fd08:	svcpl	0x00747970
   1fd0c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fd10:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1fd14:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fd18:	cmnvs	r2, r1, ror #4
   1fd1c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fd20:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1fd24:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fd28:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1fd2c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fd30:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1fd34:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1fd38:	andeq	r3, r2, r0, lsl #5
   1fd3c:	andeq	r3, r5, r0, ror r0
   1fd40:	add	r4, r8, #8
   1fd44:	mov	r1, sl
   1fd48:	mov	r0, r4
   1fd4c:	bl	14750 <_start@@Base+0x128>
   1fd50:	add	r3, pc, #568	; 0x238
   1fd54:	ldrd	r2, [r3]
   1fd58:	cmp	r1, r3
   1fd5c:	cmpeq	r0, r2
   1fd60:	bhi	20748 <_start@@Base+0xc120>
   1fd64:	add	r3, pc, #556	; 0x22c
   1fd68:	ldrd	r2, [r3]
   1fd6c:	cmp	r1, r3
   1fd70:	cmpeq	r0, r2
   1fd74:	beq	1fdcc <_start@@Base+0xb7a4>
   1fd78:	add	r3, pc, #544	; 0x220
   1fd7c:	ldrd	r2, [r3]
   1fd80:	cmp	r1, r3
   1fd84:	cmpeq	r0, r2
   1fd88:	bne	20730 <_start@@Base+0xc108>
   1fd8c:	add	r4, r8, #16
   1fd90:	mov	r1, sl
   1fd94:	mov	r0, r4
   1fd98:	bl	14750 <_start@@Base+0x128>
   1fd9c:	bic	r0, r0, #255	; 0xff
   1fda0:	add	r3, pc, #512	; 0x200
   1fda4:	ldrd	r2, [r3]
   1fda8:	cmp	r1, r3
   1fdac:	cmpeq	r0, r2
   1fdb0:	beq	1ff08 <_start@@Base+0xb8e0>
   1fdb4:	mov	r2, sl
   1fdb8:	mov	r1, r4
   1fdbc:	mov	r0, fp
   1fdc0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   1fdc4:	mov	r8, r0
   1fdc8:	b	21d20 <_start@@Base+0xd6f8>
   1fdcc:	mov	r3, #8
   1fdd0:	mov	r2, sl
   1fdd4:	mov	r1, r4
   1fdd8:	mov	r0, fp
   1fddc:	bl	17de0 <_start@@Base+0x37b8>
   1fde0:	mov	r8, r0
   1fde4:	cmp	r4, r0
   1fde8:	beq	2072c <_start@@Base+0xc104>
   1fdec:	mvn	r3, #0
   1fdf0:	mov	r2, #1
   1fdf4:	mov	r1, r2
   1fdf8:	ldr	r0, [fp]
   1fdfc:	bl	27174 <flatcc_builder_start_vector@@Base>
   1fe00:	cmp	r0, #0
   1fe04:	bne	23078 <_start@@Base+0xea50>
   1fe08:	add	r3, sp, #300	; 0x12c
   1fe0c:	mov	r2, sl
   1fe10:	mov	r1, r8
   1fe14:	mov	r0, fp
   1fe18:	bl	1dcc0 <_start@@Base+0x9698>
   1fe1c:	mov	r8, r0
   1fe20:	ldr	r3, [sp, #300]	; 0x12c
   1fe24:	cmp	r3, #0
   1fe28:	beq	1fed4 <_start@@Base+0xb8ac>
   1fe2c:	mov	r6, #0
   1fe30:	mov	r7, #1
   1fe34:	add	r5, sp, #280	; 0x118
   1fe38:	ldr	r3, [pc, #368]	; 1ffb0 <_start@@Base+0xb988>
   1fe3c:	add	r9, r3, #420	; 0x1a4
   1fe40:	b	1fe70 <_start@@Base+0xb848>
   1fe44:	ldrb	r3, [sp, #280]	; 0x118
   1fe48:	strb	r3, [r4]
   1fe4c:	add	r3, sp, #300	; 0x12c
   1fe50:	mov	r2, sl
   1fe54:	mov	r1, r0
   1fe58:	mov	r0, fp
   1fe5c:	bl	17fe0 <_start@@Base+0x39b8>
   1fe60:	mov	r8, r0
   1fe64:	ldr	r3, [sp, #300]	; 0x12c
   1fe68:	cmp	r3, #0
   1fe6c:	beq	1fed4 <_start@@Base+0xb8ac>
   1fe70:	strb	r6, [sp, #280]	; 0x118
   1fe74:	mov	r1, r7
   1fe78:	ldr	r0, [fp]
   1fe7c:	bl	2696c <flatcc_builder_extend_vector@@Base>
   1fe80:	subs	r4, r0, #0
   1fe84:	beq	23084 <_start@@Base+0xea5c>
   1fe88:	mov	r3, r5
   1fe8c:	mov	r2, sl
   1fe90:	mov	r1, r8
   1fe94:	mov	r0, fp
   1fe98:	bl	19254 <_start@@Base+0x4c2c>
   1fe9c:	cmp	r0, r8
   1fea0:	bne	1fe44 <_start@@Base+0xb81c>
   1fea4:	str	r5, [sp]
   1fea8:	mov	r3, r9
   1feac:	mov	r2, sl
   1feb0:	mov	r1, r8
   1feb4:	mov	r0, fp
   1feb8:	bl	184e0 <_start@@Base+0x3eb8>
   1febc:	cmp	sl, r0
   1fec0:	cmpne	r0, r8
   1fec4:	bne	1fe44 <_start@@Base+0xb81c>
   1fec8:	mov	r9, sl
   1fecc:	mov	sl, r0
   1fed0:	b	22ed0 <_start@@Base+0xe8a8>
   1fed4:	ldr	r0, [fp]
   1fed8:	bl	28184 <flatcc_builder_end_vector@@Base>
   1fedc:	str	r0, [sp, #296]	; 0x128
   1fee0:	cmp	r0, #0
   1fee4:	beq	23090 <_start@@Base+0xea68>
   1fee8:	mov	r1, #24
   1feec:	ldr	r0, [fp]
   1fef0:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   1fef4:	cmp	r0, #0
   1fef8:	beq	2309c <_start@@Base+0xea74>
   1fefc:	ldr	r3, [sp, #296]	; 0x128
   1ff00:	str	r3, [r0]
   1ff04:	b	21d20 <_start@@Base+0xd6f8>
   1ff08:	mov	r3, #7
   1ff0c:	mov	r2, sl
   1ff10:	mov	r1, r4
   1ff14:	mov	r0, fp
   1ff18:	bl	17de0 <_start@@Base+0x37b8>
   1ff1c:	mov	r8, r0
   1ff20:	cmp	r4, r0
   1ff24:	beq	20714 <_start@@Base+0xc0ec>
   1ff28:	mvn	r3, #-536870912	; 0xe0000000
   1ff2c:	mov	r2, #4
   1ff30:	mov	r1, #8
   1ff34:	ldr	r0, [fp]
   1ff38:	bl	27174 <flatcc_builder_start_vector@@Base>
   1ff3c:	cmp	r0, #0
   1ff40:	bne	230a8 <_start@@Base+0xea80>
   1ff44:	add	r3, sp, #300	; 0x12c
   1ff48:	mov	r2, sl
   1ff4c:	mov	r1, r8
   1ff50:	mov	r0, fp
   1ff54:	bl	1dcc0 <_start@@Base+0x9698>
   1ff58:	mov	r8, r0
   1ff5c:	ldr	r3, [sp, #300]	; 0x12c
   1ff60:	cmp	r3, #0
   1ff64:	beq	206e0 <_start@@Base+0xc0b8>
   1ff68:	ldr	r3, [pc, #64]	; 1ffb0 <_start@@Base+0xb988>
   1ff6c:	add	r3, r3, #444	; 0x1bc
   1ff70:	str	r3, [sp, #252]	; 0xfc
   1ff74:	str	fp, [sp, #20]
   1ff78:	mov	r4, r0
   1ff7c:	ldrd	r8, [sp, #120]	; 0x78
   1ff80:	b	2057c <_start@@Base+0xbf54>
   1ff84:	ldrb	r0, [r4, #7]
   1ff88:	mov	r1, #0
   1ff8c:	b	1ffc4 <_start@@Base+0xb99c>
   1ff90:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1ff94:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1ff98:	svcvs	0x006f6c73
   1ff9c:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1ffa0:	svcvs	0x00727465
   1ffa4:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1ffa8:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1ffac:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1ffb0:	andeq	r3, r5, r0, ror r0
   1ffb4:			; <UNDEFINED> instruction: 0xffff0000
   1ffb8:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1ffbc:	mov	r0, fp
   1ffc0:	mov	r1, #0
   1ffc4:	ldrb	r2, [r4, #6]
   1ffc8:	mov	lr, #0
   1ffcc:	str	lr, [sp, #100]	; 0x64
   1ffd0:	lsl	r3, r2, #8
   1ffd4:	str	r3, [sp, #96]	; 0x60
   1ffd8:	ldrd	r2, [sp, #96]	; 0x60
   1ffdc:	orr	r2, r2, r0
   1ffe0:	orr	r3, r3, r1
   1ffe4:	mov	r0, r2
   1ffe8:	mov	r1, r3
   1ffec:	ldrb	r2, [r4, #5]
   1fff0:	mov	lr, #0
   1fff4:	str	lr, [sp, #76]	; 0x4c
   1fff8:	lsl	r3, r2, #16
   1fffc:	str	r3, [sp, #72]	; 0x48
   20000:	ldrd	r2, [sp, #72]	; 0x48
   20004:	orr	r2, r2, r0
   20008:	orr	r3, r3, r1
   2000c:	ldrb	r0, [r4, #4]
   20010:	mov	lr, #0
   20014:	str	lr, [sp, #52]	; 0x34
   20018:	lsl	r1, r0, #24
   2001c:	str	r1, [sp, #48]	; 0x30
   20020:	ldrd	r0, [sp, #48]	; 0x30
   20024:	orr	r0, r0, r2
   20028:	orr	r1, r1, r3
   2002c:	mov	r2, r0
   20030:	mov	r3, r1
   20034:	ldrb	r1, [r4, #3]
   20038:	str	r1, [sp, #44]	; 0x2c
   2003c:	mov	r1, #0
   20040:	str	r1, [sp, #40]	; 0x28
   20044:	ldrd	r0, [sp, #40]	; 0x28
   20048:	orr	r0, r0, r2
   2004c:	orr	r1, r1, r3
   20050:	mov	r2, r0
   20054:	mov	r3, r1
   20058:	ldrb	r0, [r4, #2]
   2005c:	lsl	r1, r0, #8
   20060:	str	r1, [sp, #36]	; 0x24
   20064:	mov	r1, #0
   20068:	str	r1, [sp, #32]
   2006c:	ldrd	r0, [sp, #32]
   20070:	orr	r0, r0, r2
   20074:	orr	r1, r1, r3
   20078:	mov	r2, r0
   2007c:	mov	r3, r1
   20080:	ldrb	r0, [r4, #1]
   20084:	lsl	r1, r0, #16
   20088:	str	r1, [sp, #28]
   2008c:	mov	r1, #0
   20090:	str	r1, [sp, #24]
   20094:	ldrd	r0, [sp, #24]
   20098:	orr	r0, r0, r2
   2009c:	orr	r1, r1, r3
   200a0:	mov	r2, r0
   200a4:	mov	r3, r1
   200a8:	ldrb	r0, [r4]
   200ac:	lsl	r9, r0, #24
   200b0:	mov	r8, #0
   200b4:	orr	r2, r2, r8
   200b8:	orr	r3, r3, r9
   200bc:	mov	r0, #0
   200c0:	ldr	r1, [pc, #-276]	; 1ffb4 <_start@@Base+0xb98c>
   200c4:	and	r0, r0, r2
   200c8:	and	r1, r1, r3
   200cc:	mov	r6, #0
   200d0:	ldr	r7, [pc, #-288]	; 1ffb8 <_start@@Base+0xb990>
   200d4:	cmp	r1, r7
   200d8:	cmpeq	r0, r6
   200dc:	beq	20238 <_start@@Base+0xbc10>
   200e0:	add	r1, pc, #1000	; 0x3e8
   200e4:	ldrd	r0, [r1]
   200e8:	cmp	r3, r1
   200ec:	cmpeq	r2, r0
   200f0:	beq	203ac <_start@@Base+0xbd84>
   200f4:	mov	r2, sl
   200f8:	mov	r1, r4
   200fc:	ldr	r0, [sp, #20]
   20100:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   20104:	sub	r3, sl, r0
   20108:	cmp	r3, #1
   2010c:	ble	20120 <_start@@Base+0xbaf8>
   20110:	ldrb	r3, [r0]
   20114:	cmp	r3, #32
   20118:	bhi	20130 <_start@@Base+0xbb08>
   2011c:	beq	205d4 <_start@@Base+0xbfac>
   20120:	mov	r2, sl
   20124:	mov	r1, r0
   20128:	ldr	r0, [sp, #20]
   2012c:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   20130:	cmp	sl, r0
   20134:	streq	r5, [sp, #268]	; 0x10c
   20138:	moveq	r4, r0
   2013c:	beq	20174 <_start@@Base+0xbb4c>
   20140:	ldrb	r3, [r0]
   20144:	cmp	r3, #44	; 0x2c
   20148:	beq	20634 <_start@@Base+0xc00c>
   2014c:	str	r5, [sp, #268]	; 0x10c
   20150:	ldrb	r3, [r0]
   20154:	cmp	r3, #125	; 0x7d
   20158:	beq	205e8 <_start@@Base+0xbfc0>
   2015c:	mov	r3, #10
   20160:	mov	r2, sl
   20164:	mov	r1, r0
   20168:	ldr	r0, [sp, #20]
   2016c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   20170:	mov	r4, r0
   20174:	ldr	r3, [sp, #268]	; 0x10c
   20178:	cmp	r3, #0
   2017c:	beq	20558 <_start@@Base+0xbf30>
   20180:	cmp	sl, r4
   20184:	beq	201b0 <_start@@Base+0xbb88>
   20188:	ldrb	r3, [r4]
   2018c:	cmp	r3, #34	; 0x22
   20190:	addeq	r4, r4, #1
   20194:	beq	201b0 <_start@@Base+0xbb88>
   20198:	mov	r3, #5
   2019c:	mov	r2, sl
   201a0:	mov	r1, r4
   201a4:	ldr	r0, [sp, #20]
   201a8:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   201ac:	mov	r4, r0
   201b0:	sub	ip, sl, r4
   201b4:	cmp	ip, #8
   201b8:	movcc	r3, ip
   201bc:	movcs	r3, #8
   201c0:	sub	r3, r3, #1
   201c4:	cmp	r3, #7
   201c8:	ldrls	pc, [pc, r3, lsl #2]
   201cc:	b	200f4 <_start@@Base+0xbacc>
   201d0:	andeq	r0, r2, ip, lsr #4
   201d4:	andeq	r0, r2, r0, lsr #4
   201d8:	andeq	r0, r2, r4, lsl r2
   201dc:	andeq	r0, r2, r8, lsl #4
   201e0:	strdeq	r0, [r2], -ip
   201e4:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   201e8:			; <UNDEFINED> instruction: 0x0001ffbc
   201ec:	andeq	pc, r1, r4, lsl #31
   201f0:	mov	r0, fp
   201f4:	mov	r1, #0
   201f8:	b	1ffec <_start@@Base+0xb9c4>
   201fc:	mov	r2, fp
   20200:	mov	r3, #0
   20204:	b	2000c <_start@@Base+0xb9e4>
   20208:	mov	r2, fp
   2020c:	mov	r3, #0
   20210:	b	20034 <_start@@Base+0xba0c>
   20214:	mov	r2, fp
   20218:	mov	r3, #0
   2021c:	b	20058 <_start@@Base+0xba30>
   20220:	mov	r2, fp
   20224:	mov	r3, #0
   20228:	b	20080 <_start@@Base+0xba58>
   2022c:	mov	r2, fp
   20230:	mov	r3, #0
   20234:	b	200a8 <_start@@Base+0xba80>
   20238:	cmp	ip, #2
   2023c:	ble	2024c <_start@@Base+0xbc24>
   20240:	ldrb	r3, [r4, #2]
   20244:	cmp	r3, #34	; 0x22
   20248:	beq	20260 <_start@@Base+0xbc38>
   2024c:	mov	r2, sl
   20250:	mov	r1, r4
   20254:	ldr	r0, [sp, #20]
   20258:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   2025c:	b	20104 <_start@@Base+0xbadc>
   20260:	mov	r2, sl
   20264:	add	r1, r4, #3
   20268:	ldr	r0, [sp, #20]
   2026c:	bl	17d9c <_start@@Base+0x3774>
   20270:	cmp	sl, r0
   20274:	beq	20284 <_start@@Base+0xbc5c>
   20278:	ldrb	r3, [r0]
   2027c:	cmp	r3, #58	; 0x3a
   20280:	beq	20328 <_start@@Base+0xbd00>
   20284:	mov	r3, #4
   20288:	mov	r2, sl
   2028c:	mov	r1, r0
   20290:	ldr	r0, [sp, #20]
   20294:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   20298:	str	r0, [sp, #196]	; 0xc4
   2029c:	ldr	r2, [sp, #196]	; 0xc4
   202a0:	cmp	r2, r4
   202a4:	beq	2024c <_start@@Base+0xbc24>
   202a8:	str	r5, [sp, #272]	; 0x110
   202ac:	str	fp, [sp, #280]	; 0x118
   202b0:	mov	r3, #0
   202b4:	str	r3, [sp, #284]	; 0x11c
   202b8:	str	r5, [sp, #276]	; 0x114
   202bc:	mov	r4, r2
   202c0:	cmp	sl, r2
   202c4:	beq	20360 <_start@@Base+0xbd38>
   202c8:	add	r3, sp, #280	; 0x118
   202cc:	str	r3, [sp]
   202d0:	add	r3, sp, #276	; 0x114
   202d4:	mov	r2, sl
   202d8:	mov	r1, r4
   202dc:	ldr	r0, [sp, #20]
   202e0:	bl	2d678 <flatcc_json_parser_integer@@Base>
   202e4:	cmp	r4, r0
   202e8:	beq	20360 <_start@@Base+0xbd38>
   202ec:	ldr	r3, [sp, #276]	; 0x114
   202f0:	cmp	r3, #0
   202f4:	bne	20340 <_start@@Base+0xbd18>
   202f8:	add	r3, sp, #280	; 0x118
   202fc:	ldrd	r2, [r3]
   20300:	mvn	r6, #0
   20304:	mov	r7, #0
   20308:	cmp	r3, r7
   2030c:	cmpeq	r2, r6
   20310:	strls	r2, [sp, #272]	; 0x110
   20314:	bhi	20394 <_start@@Base+0xbd6c>
   20318:	ldr	r3, [sp, #272]	; 0x110
   2031c:	ldr	r2, [sp, #120]	; 0x78
   20320:	str	r3, [r2]
   20324:	b	20104 <_start@@Base+0xbadc>
   20328:	mov	r2, sl
   2032c:	add	r1, r0, #1
   20330:	ldr	r0, [sp, #20]
   20334:	bl	17d9c <_start@@Base+0x3774>
   20338:	str	r0, [sp, #196]	; 0xc4
   2033c:	b	2029c <_start@@Base+0xbc74>
   20340:	mov	r3, #8
   20344:	mov	r2, sl
   20348:	mov	r1, r0
   2034c:	ldr	r0, [sp, #20]
   20350:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   20354:	ldr	r3, [sp, #196]	; 0xc4
   20358:	cmp	r3, r0
   2035c:	bne	20318 <_start@@Base+0xbcf0>
   20360:	add	r3, sp, #272	; 0x110
   20364:	str	r3, [sp]
   20368:	ldr	r3, [pc, #360]	; 204d8 <_start@@Base+0xbeb0>
   2036c:	add	r3, r3, #432	; 0x1b0
   20370:	mov	r2, sl
   20374:	ldr	r4, [sp, #196]	; 0xc4
   20378:	mov	r1, r4
   2037c:	ldr	r0, [sp, #20]
   20380:	bl	18808 <_start@@Base+0x41e0>
   20384:	cmp	sl, r0
   20388:	cmpne	r0, r4
   2038c:	bne	20318 <_start@@Base+0xbcf0>
   20390:	b	20540 <_start@@Base+0xbf18>
   20394:	mov	r3, #7
   20398:	mov	r2, sl
   2039c:	mov	r1, r0
   203a0:	ldr	r0, [sp, #20]
   203a4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   203a8:	b	20354 <_start@@Base+0xbd2c>
   203ac:	cmp	ip, #8
   203b0:	ble	203c0 <_start@@Base+0xbd98>
   203b4:	ldrb	r3, [r4, #8]
   203b8:	cmp	r3, #34	; 0x22
   203bc:	beq	203d4 <_start@@Base+0xbdac>
   203c0:	mov	r2, sl
   203c4:	mov	r1, r4
   203c8:	ldr	r0, [sp, #20]
   203cc:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   203d0:	b	20104 <_start@@Base+0xbadc>
   203d4:	add	r1, r4, #9
   203d8:	sub	r3, sl, r1
   203dc:	cmp	r3, #1
   203e0:	ble	203f4 <_start@@Base+0xbdcc>
   203e4:	ldrb	r3, [r4, #9]
   203e8:	cmp	r3, #32
   203ec:	bhi	20404 <_start@@Base+0xbddc>
   203f0:	beq	204b8 <_start@@Base+0xbe90>
   203f4:	mov	r2, sl
   203f8:	ldr	r0, [sp, #20]
   203fc:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   20400:	mov	r1, r0
   20404:	cmp	sl, r1
   20408:	beq	20418 <_start@@Base+0xbdf0>
   2040c:	ldrb	r3, [r1]
   20410:	cmp	r3, #58	; 0x3a
   20414:	beq	204dc <_start@@Base+0xbeb4>
   20418:	mov	r3, #4
   2041c:	mov	r2, sl
   20420:	ldr	r0, [sp, #20]
   20424:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   20428:	str	r0, [sp, #196]	; 0xc4
   2042c:	ldr	r2, [sp, #196]	; 0xc4
   20430:	cmp	r2, r4
   20434:	beq	203c0 <_start@@Base+0xbd98>
   20438:	str	r5, [sp, #272]	; 0x110
   2043c:	str	fp, [sp, #280]	; 0x118
   20440:	mov	r3, #0
   20444:	str	r3, [sp, #284]	; 0x11c
   20448:	str	r5, [sp, #276]	; 0x114
   2044c:	mov	r4, r2
   20450:	cmp	sl, r2
   20454:	beq	20514 <_start@@Base+0xbeec>
   20458:	add	r3, sp, #280	; 0x118
   2045c:	str	r3, [sp]
   20460:	add	r3, sp, #276	; 0x114
   20464:	mov	r2, sl
   20468:	mov	r1, r4
   2046c:	ldr	r0, [sp, #20]
   20470:	bl	2d678 <flatcc_json_parser_integer@@Base>
   20474:	cmp	r4, r0
   20478:	beq	20514 <_start@@Base+0xbeec>
   2047c:	ldr	r3, [sp, #276]	; 0x114
   20480:	cmp	r3, #0
   20484:	bne	204f4 <_start@@Base+0xbecc>
   20488:	add	r3, sp, #280	; 0x118
   2048c:	ldrd	r2, [r3]
   20490:	mvn	r6, #0
   20494:	mov	r7, #0
   20498:	cmp	r3, r7
   2049c:	cmpeq	r2, r6
   204a0:	strls	r2, [sp, #272]	; 0x110
   204a4:	bhi	205bc <_start@@Base+0xbf94>
   204a8:	ldr	r3, [sp, #272]	; 0x110
   204ac:	ldr	r2, [sp, #120]	; 0x78
   204b0:	str	r3, [r2, #4]
   204b4:	b	20104 <_start@@Base+0xbadc>
   204b8:	ldrb	r3, [r4, #10]
   204bc:	cmp	r3, #32
   204c0:	addhi	r1, r4, #10
   204c4:	bls	203f4 <_start@@Base+0xbdcc>
   204c8:	b	20404 <_start@@Base+0xbddc>
   204cc:	nop			; (mov r0, r0)
   204d0:	cmnvs	lr, r5, ror #6
   204d4:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   204d8:	andeq	r3, r5, r0, ror r0
   204dc:	mov	r2, sl
   204e0:	add	r1, r1, #1
   204e4:	ldr	r0, [sp, #20]
   204e8:	bl	17d9c <_start@@Base+0x3774>
   204ec:	str	r0, [sp, #196]	; 0xc4
   204f0:	b	2042c <_start@@Base+0xbe04>
   204f4:	mov	r3, #8
   204f8:	mov	r2, sl
   204fc:	mov	r1, r0
   20500:	ldr	r0, [sp, #20]
   20504:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   20508:	ldr	r3, [sp, #196]	; 0xc4
   2050c:	cmp	r3, r0
   20510:	bne	204a8 <_start@@Base+0xbe80>
   20514:	add	r3, sp, #272	; 0x110
   20518:	str	r3, [sp]
   2051c:	ldr	r3, [sp, #252]	; 0xfc
   20520:	mov	r2, sl
   20524:	ldr	r4, [sp, #196]	; 0xc4
   20528:	mov	r1, r4
   2052c:	ldr	r0, [sp, #20]
   20530:	bl	18808 <_start@@Base+0x41e0>
   20534:	cmp	sl, r0
   20538:	cmpne	r0, r4
   2053c:	bne	204a8 <_start@@Base+0xbe80>
   20540:	mov	r3, #33	; 0x21
   20544:	mov	r2, sl
   20548:	mov	r1, r0
   2054c:	ldr	r0, [sp, #20]
   20550:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   20554:	mov	r4, r0
   20558:	add	r3, sp, #300	; 0x12c
   2055c:	mov	r2, sl
   20560:	mov	r1, r4
   20564:	ldr	r0, [sp, #20]
   20568:	bl	17fe0 <_start@@Base+0x39b8>
   2056c:	mov	r4, r0
   20570:	ldr	r3, [sp, #300]	; 0x12c
   20574:	cmp	r3, #0
   20578:	beq	206d4 <_start@@Base+0xc0ac>
   2057c:	mov	r1, #1
   20580:	ldr	r5, [sp, #20]
   20584:	ldr	r0, [r5]
   20588:	bl	2696c <flatcc_builder_extend_vector@@Base>
   2058c:	subs	r3, r0, #0
   20590:	str	r3, [sp, #120]	; 0x78
   20594:	beq	230b4 <_start@@Base+0xea8c>
   20598:	add	r3, sp, #268	; 0x10c
   2059c:	mov	r2, sl
   205a0:	mov	r1, r4
   205a4:	mov	r0, r5
   205a8:	bl	19394 <_start@@Base+0x4d6c>
   205ac:	mov	r4, r0
   205b0:	mov	r5, #0
   205b4:	mov	fp, r5
   205b8:	b	20174 <_start@@Base+0xbb4c>
   205bc:	mov	r3, #7
   205c0:	mov	r2, sl
   205c4:	mov	r1, r0
   205c8:	ldr	r0, [sp, #20]
   205cc:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   205d0:	b	20508 <_start@@Base+0xbee0>
   205d4:	ldrb	r3, [r0, #1]
   205d8:	cmp	r3, #32
   205dc:	addhi	r0, r0, #1
   205e0:	bls	20120 <_start@@Base+0xbaf8>
   205e4:	b	20130 <_start@@Base+0xbb08>
   205e8:	add	r4, r0, #1
   205ec:	sub	r3, sl, r4
   205f0:	cmp	r3, #1
   205f4:	ble	20608 <_start@@Base+0xbfe0>
   205f8:	ldrb	r3, [r0, #1]
   205fc:	cmp	r3, #32
   20600:	bhi	20174 <_start@@Base+0xbb4c>
   20604:	beq	20620 <_start@@Base+0xbff8>
   20608:	mov	r2, sl
   2060c:	mov	r1, r4
   20610:	ldr	r0, [sp, #20]
   20614:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   20618:	mov	r4, r0
   2061c:	b	20174 <_start@@Base+0xbb4c>
   20620:	ldrb	r3, [r0, #2]
   20624:	cmp	r3, #32
   20628:	addhi	r4, r0, #2
   2062c:	bls	20608 <_start@@Base+0xbfe0>
   20630:	b	20174 <_start@@Base+0xbb4c>
   20634:	add	r4, r0, #1
   20638:	sub	r3, sl, r4
   2063c:	cmp	r3, #1
   20640:	ble	20654 <_start@@Base+0xc02c>
   20644:	ldrb	r3, [r0, #1]
   20648:	cmp	r3, #32
   2064c:	bhi	20668 <_start@@Base+0xc040>
   20650:	beq	206a0 <_start@@Base+0xc078>
   20654:	mov	r2, sl
   20658:	mov	r1, r4
   2065c:	ldr	r0, [sp, #20]
   20660:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   20664:	mov	r4, r0
   20668:	cmp	sl, r4
   2066c:	beq	206b4 <_start@@Base+0xc08c>
   20670:	ldrb	r3, [r4]
   20674:	cmp	r3, #125	; 0x7d
   20678:	movne	r3, #1
   2067c:	strne	r3, [sp, #268]	; 0x10c
   20680:	bne	20174 <_start@@Base+0xbb4c>
   20684:	str	r5, [sp, #268]	; 0x10c
   20688:	mov	r2, sl
   2068c:	add	r1, r4, #1
   20690:	ldr	r0, [sp, #20]
   20694:	bl	17d9c <_start@@Base+0x3774>
   20698:	mov	r4, r0
   2069c:	b	20174 <_start@@Base+0xbb4c>
   206a0:	ldrb	r3, [r0, #2]
   206a4:	cmp	r3, #32
   206a8:	addhi	r4, r0, #2
   206ac:	bls	20654 <_start@@Base+0xc02c>
   206b0:	b	20668 <_start@@Base+0xc040>
   206b4:	str	r5, [sp, #268]	; 0x10c
   206b8:	mov	r3, #10
   206bc:	mov	r2, sl
   206c0:	mov	r1, r4
   206c4:	ldr	r0, [sp, #20]
   206c8:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   206cc:	mov	r4, r0
   206d0:	b	20174 <_start@@Base+0xbb4c>
   206d4:	ldr	fp, [sp, #20]
   206d8:	strd	r8, [sp, #120]	; 0x78
   206dc:	mov	r8, r0
   206e0:	ldr	r0, [fp]
   206e4:	bl	28184 <flatcc_builder_end_vector@@Base>
   206e8:	str	r0, [sp, #296]	; 0x128
   206ec:	cmp	r0, #0
   206f0:	beq	230c4 <_start@@Base+0xea9c>
   206f4:	mov	r1, #29
   206f8:	ldr	r0, [fp]
   206fc:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   20700:	cmp	r0, #0
   20704:	beq	230d0 <_start@@Base+0xeaa8>
   20708:	ldr	r3, [sp, #296]	; 0x128
   2070c:	str	r3, [r0]
   20710:	b	21d20 <_start@@Base+0xd6f8>
   20714:	mov	r2, sl
   20718:	mov	r1, r0
   2071c:	mov	r0, fp
   20720:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   20724:	mov	r8, r0
   20728:	b	21d20 <_start@@Base+0xd6f8>
   2072c:	mov	r4, r0
   20730:	mov	r2, sl
   20734:	mov	r1, r4
   20738:	mov	r0, fp
   2073c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   20740:	mov	r8, r0
   20744:	b	21d20 <_start@@Base+0xd6f8>
   20748:	add	r3, pc, #984	; 0x3d8
   2074c:	ldrd	r2, [r3]
   20750:	cmp	r1, r3
   20754:	cmpeq	r0, r2
   20758:	beq	20788 <_start@@Base+0xc160>
   2075c:	add	r3, pc, #972	; 0x3cc
   20760:	ldrd	r2, [r3]
   20764:	cmp	r1, r3
   20768:	cmpeq	r0, r2
   2076c:	beq	209fc <_start@@Base+0xc3d4>
   20770:	mov	r2, sl
   20774:	mov	r1, r4
   20778:	mov	r0, fp
   2077c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   20780:	mov	r8, r0
   20784:	b	21d20 <_start@@Base+0xd6f8>
   20788:	add	r4, r8, #16
   2078c:	mov	r1, sl
   20790:	mov	r0, r4
   20794:	bl	14750 <_start@@Base+0x128>
   20798:	mov	r7, r1
   2079c:	mov	r2, #0
   207a0:	ldr	r3, [pc, #916]	; 20b3c <_start@@Base+0xc514>
   207a4:	and	r2, r2, r0
   207a8:	and	r3, r3, r1
   207ac:	mov	r0, #0
   207b0:	ldr	r1, [pc, #896]	; 20b38 <_start@@Base+0xc510>
   207b4:	cmp	r3, r1
   207b8:	cmpeq	r2, r0
   207bc:	beq	207ec <_start@@Base+0xc1c4>
   207c0:	mov	r6, #0
   207c4:	and	r7, r7, #-16777216	; 0xff000000
   207c8:	cmp	r7, #1728053248	; 0x67000000
   207cc:	cmpeq	r6, #0
   207d0:	beq	208f4 <_start@@Base+0xc2cc>
   207d4:	mov	r2, sl
   207d8:	mov	r1, r4
   207dc:	mov	r0, fp
   207e0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   207e4:	mov	r8, r0
   207e8:	b	21d20 <_start@@Base+0xd6f8>
   207ec:	mov	r3, #2
   207f0:	mov	r2, sl
   207f4:	mov	r1, r4
   207f8:	mov	r0, fp
   207fc:	bl	17de0 <_start@@Base+0x37b8>
   20800:	mov	r8, r0
   20804:	cmp	r4, r0
   20808:	beq	208dc <_start@@Base+0xc2b4>
   2080c:	ldr	r0, [fp]
   20810:	bl	27200 <flatcc_builder_start_offset_vector@@Base>
   20814:	cmp	r0, #0
   20818:	bne	230dc <_start@@Base+0xeab4>
   2081c:	add	r3, sp, #300	; 0x12c
   20820:	mov	r2, sl
   20824:	mov	r1, r8
   20828:	mov	r0, fp
   2082c:	bl	1dcc0 <_start@@Base+0x9698>
   20830:	mov	r8, r0
   20834:	ldr	r3, [sp, #300]	; 0x12c
   20838:	cmp	r3, #0
   2083c:	beq	208a8 <_start@@Base+0xc280>
   20840:	mov	r4, #1
   20844:	add	r3, sp, #296	; 0x128
   20848:	mov	r2, sl
   2084c:	mov	r1, r8
   20850:	mov	r0, fp
   20854:	bl	2eb0c <flatcc_json_parser_build_string@@Base>
   20858:	mov	r8, r0
   2085c:	ldr	r3, [sp, #296]	; 0x128
   20860:	cmp	r3, #0
   20864:	beq	230e8 <_start@@Base+0xeac0>
   20868:	mov	r1, r4
   2086c:	ldr	r0, [fp]
   20870:	bl	26bd0 <flatcc_builder_extend_offset_vector@@Base>
   20874:	cmp	r0, #0
   20878:	beq	230f4 <_start@@Base+0xeacc>
   2087c:	ldr	r3, [sp, #296]	; 0x128
   20880:	str	r3, [r0]
   20884:	add	r3, sp, #300	; 0x12c
   20888:	mov	r2, sl
   2088c:	mov	r1, r8
   20890:	mov	r0, fp
   20894:	bl	17fe0 <_start@@Base+0x39b8>
   20898:	mov	r8, r0
   2089c:	ldr	r3, [sp, #300]	; 0x12c
   208a0:	cmp	r3, #0
   208a4:	bne	20844 <_start@@Base+0xc21c>
   208a8:	ldr	r0, [fp]
   208ac:	bl	2829c <flatcc_builder_end_offset_vector@@Base>
   208b0:	str	r0, [sp, #296]	; 0x128
   208b4:	cmp	r0, #0
   208b8:	beq	23100 <_start@@Base+0xead8>
   208bc:	mov	r1, #28
   208c0:	ldr	r0, [fp]
   208c4:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   208c8:	cmp	r0, #0
   208cc:	beq	2310c <_start@@Base+0xeae4>
   208d0:	ldr	r3, [sp, #296]	; 0x128
   208d4:	str	r3, [r0]
   208d8:	b	21d20 <_start@@Base+0xd6f8>
   208dc:	mov	r2, sl
   208e0:	mov	r1, r0
   208e4:	mov	r0, fp
   208e8:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   208ec:	mov	r8, r0
   208f0:	b	21d20 <_start@@Base+0xd6f8>
   208f4:	mov	r3, #1
   208f8:	mov	r2, sl
   208fc:	mov	r1, r4
   20900:	mov	r0, fp
   20904:	bl	17de0 <_start@@Base+0x37b8>
   20908:	mov	r8, r0
   2090c:	cmp	r4, r0
   20910:	beq	209e4 <_start@@Base+0xc3bc>
   20914:	ldr	r0, [fp]
   20918:	bl	27200 <flatcc_builder_start_offset_vector@@Base>
   2091c:	cmp	r0, #0
   20920:	bne	23118 <_start@@Base+0xeaf0>
   20924:	add	r3, sp, #300	; 0x12c
   20928:	mov	r2, sl
   2092c:	mov	r1, r8
   20930:	mov	r0, fp
   20934:	bl	1dcc0 <_start@@Base+0x9698>
   20938:	mov	r8, r0
   2093c:	ldr	r3, [sp, #300]	; 0x12c
   20940:	cmp	r3, #0
   20944:	beq	209b0 <_start@@Base+0xc388>
   20948:	mov	r4, #1
   2094c:	add	r3, sp, #296	; 0x128
   20950:	mov	r2, sl
   20954:	mov	r1, r8
   20958:	mov	r0, fp
   2095c:	bl	2eb0c <flatcc_json_parser_build_string@@Base>
   20960:	mov	r8, r0
   20964:	ldr	r3, [sp, #296]	; 0x128
   20968:	cmp	r3, #0
   2096c:	beq	23124 <_start@@Base+0xeafc>
   20970:	mov	r1, r4
   20974:	ldr	r0, [fp]
   20978:	bl	26bd0 <flatcc_builder_extend_offset_vector@@Base>
   2097c:	cmp	r0, #0
   20980:	beq	23130 <_start@@Base+0xeb08>
   20984:	ldr	r3, [sp, #296]	; 0x128
   20988:	str	r3, [r0]
   2098c:	add	r3, sp, #300	; 0x12c
   20990:	mov	r2, sl
   20994:	mov	r1, r8
   20998:	mov	r0, fp
   2099c:	bl	17fe0 <_start@@Base+0x39b8>
   209a0:	mov	r8, r0
   209a4:	ldr	r3, [sp, #300]	; 0x12c
   209a8:	cmp	r3, #0
   209ac:	bne	2094c <_start@@Base+0xc324>
   209b0:	ldr	r0, [fp]
   209b4:	bl	2829c <flatcc_builder_end_offset_vector@@Base>
   209b8:	str	r0, [sp, #296]	; 0x128
   209bc:	cmp	r0, #0
   209c0:	beq	2313c <_start@@Base+0xeb14>
   209c4:	mov	r1, #10
   209c8:	ldr	r0, [fp]
   209cc:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   209d0:	cmp	r0, #0
   209d4:	beq	23148 <_start@@Base+0xeb20>
   209d8:	ldr	r3, [sp, #296]	; 0x128
   209dc:	str	r3, [r0]
   209e0:	b	21d20 <_start@@Base+0xd6f8>
   209e4:	mov	r2, sl
   209e8:	mov	r1, r0
   209ec:	mov	r0, fp
   209f0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   209f4:	mov	r8, r0
   209f8:	b	21d20 <_start@@Base+0xd6f8>
   209fc:	add	r4, r8, #16
   20a00:	mov	r1, sl
   20a04:	mov	r0, r4
   20a08:	bl	14750 <_start@@Base+0x128>
   20a0c:	mov	r0, #0
   20a10:	and	r1, r1, #-16777216	; 0xff000000
   20a14:	cmp	r1, #1929379840	; 0x73000000
   20a18:	cmpeq	r0, #0
   20a1c:	beq	20a38 <_start@@Base+0xc410>
   20a20:	mov	r2, sl
   20a24:	mov	r1, r4
   20a28:	mov	r0, fp
   20a2c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   20a30:	mov	r8, r0
   20a34:	b	21d20 <_start@@Base+0xd6f8>
   20a38:	mov	r3, #1
   20a3c:	mov	r2, sl
   20a40:	mov	r1, r4
   20a44:	mov	r0, fp
   20a48:	bl	17de0 <_start@@Base+0x37b8>
   20a4c:	mov	r8, r0
   20a50:	cmp	r4, r0
   20a54:	beq	20b44 <_start@@Base+0xc51c>
   20a58:	ldr	r0, [fp]
   20a5c:	bl	27200 <flatcc_builder_start_offset_vector@@Base>
   20a60:	cmp	r0, #0
   20a64:	bne	23154 <_start@@Base+0xeb2c>
   20a68:	add	r3, sp, #300	; 0x12c
   20a6c:	mov	r2, sl
   20a70:	mov	r1, r8
   20a74:	mov	r0, fp
   20a78:	bl	1dcc0 <_start@@Base+0x9698>
   20a7c:	mov	r8, r0
   20a80:	ldr	r3, [sp, #300]	; 0x12c
   20a84:	cmp	r3, #0
   20a88:	beq	20af4 <_start@@Base+0xc4cc>
   20a8c:	mov	r4, #1
   20a90:	add	r3, sp, #296	; 0x128
   20a94:	mov	r2, sl
   20a98:	mov	r1, r8
   20a9c:	mov	r0, fp
   20aa0:	bl	1e458 <_start@@Base+0x9e30>
   20aa4:	mov	r8, r0
   20aa8:	ldr	r3, [sp, #296]	; 0x128
   20aac:	cmp	r3, #0
   20ab0:	beq	23160 <_start@@Base+0xeb38>
   20ab4:	mov	r1, r4
   20ab8:	ldr	r0, [fp]
   20abc:	bl	26bd0 <flatcc_builder_extend_offset_vector@@Base>
   20ac0:	cmp	r0, #0
   20ac4:	beq	2316c <_start@@Base+0xeb44>
   20ac8:	ldr	r3, [sp, #296]	; 0x128
   20acc:	str	r3, [r0]
   20ad0:	add	r3, sp, #300	; 0x12c
   20ad4:	mov	r2, sl
   20ad8:	mov	r1, r8
   20adc:	mov	r0, fp
   20ae0:	bl	17fe0 <_start@@Base+0x39b8>
   20ae4:	mov	r8, r0
   20ae8:	ldr	r3, [sp, #300]	; 0x12c
   20aec:	cmp	r3, #0
   20af0:	bne	20a90 <_start@@Base+0xc468>
   20af4:	ldr	r0, [fp]
   20af8:	bl	2829c <flatcc_builder_end_offset_vector@@Base>
   20afc:	str	r0, [sp, #296]	; 0x128
   20b00:	cmp	r0, #0
   20b04:	beq	23178 <_start@@Base+0xeb50>
   20b08:	mov	r1, #11
   20b0c:	ldr	r0, [fp]
   20b10:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   20b14:	cmp	r0, #0
   20b18:	beq	23184 <_start@@Base+0xeb5c>
   20b1c:	ldr	r3, [sp, #296]	; 0x128
   20b20:	str	r3, [r0]
   20b24:	b	21d20 <_start@@Base+0xd6f8>
   20b28:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   20b2c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   20b30:	cmnvs	r2, r5, ror #24
   20b34:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   20b38:	ldrvs	r0, [r2, -r0]!
   20b3c:			; <UNDEFINED> instruction: 0xffff0000
   20b40:	ldrtcc	r0, [r4], -r0
   20b44:	mov	r2, sl
   20b48:	mov	r1, r0
   20b4c:	mov	r0, fp
   20b50:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   20b54:	mov	r8, r0
   20b58:	b	21d20 <_start@@Base+0xd6f8>
   20b5c:	add	r4, r8, #8
   20b60:	mov	r1, sl
   20b64:	mov	r0, r4
   20b68:	bl	14750 <_start@@Base+0x128>
   20b6c:	mov	r2, #0
   20b70:	ldr	r3, [pc, #-60]	; 20b3c <_start@@Base+0xc514>
   20b74:	and	r0, r0, r2
   20b78:	and	r1, r1, r3
   20b7c:	mov	r2, #0
   20b80:	ldr	r3, [pc, #-72]	; 20b40 <_start@@Base+0xc518>
   20b84:	cmp	r1, r3
   20b88:	cmpeq	r0, r2
   20b8c:	beq	20ba8 <_start@@Base+0xc580>
   20b90:	mov	r2, sl
   20b94:	mov	r1, r4
   20b98:	mov	r0, fp
   20b9c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   20ba0:	mov	r8, r0
   20ba4:	b	21d20 <_start@@Base+0xd6f8>
   20ba8:	mov	r3, #2
   20bac:	mov	r2, sl
   20bb0:	mov	r1, r4
   20bb4:	mov	r0, fp
   20bb8:	bl	17de0 <_start@@Base+0x37b8>
   20bbc:	mov	r8, r0
   20bc0:	cmp	r4, r0
   20bc4:	beq	21248 <_start@@Base+0xcc20>
   20bc8:	mov	r3, #0
   20bcc:	str	r3, [sp, #296]	; 0x128
   20bd0:	mov	r1, #3
   20bd4:	ldr	r0, [fp]
   20bd8:	bl	27424 <flatcc_builder_start_table@@Base>
   20bdc:	cmp	r0, #0
   20be0:	bne	211bc <_start@@Base+0xcb94>
   20be4:	add	r3, sp, #276	; 0x114
   20be8:	mov	r2, sl
   20bec:	mov	r1, r8
   20bf0:	mov	r0, fp
   20bf4:	bl	19394 <_start@@Base+0x4d6c>
   20bf8:	mov	r8, r0
   20bfc:	add	r7, pc, #900	; 0x384
   20c00:	ldrd	r6, [r7]
   20c04:	mov	r9, #6
   20c08:	b	20e90 <_start@@Base+0xc868>
   20c0c:	ldrb	r2, [r8, #7]
   20c10:	mov	r3, #0
   20c14:	b	20c20 <_start@@Base+0xc5f8>
   20c18:	mov	r2, #0
   20c1c:	mov	r3, #0
   20c20:	ldrb	r0, [r8, #6]
   20c24:	mov	ip, #0
   20c28:	str	ip, [sp, #244]	; 0xf4
   20c2c:	lsl	r1, r0, #8
   20c30:	str	r1, [sp, #240]	; 0xf0
   20c34:	ldrd	r0, [sp, #240]	; 0xf0
   20c38:	orr	r0, r0, r2
   20c3c:	orr	r1, r1, r3
   20c40:	mov	r2, r0
   20c44:	mov	r3, r1
   20c48:	ldrb	r0, [r8, #5]
   20c4c:	mov	ip, #0
   20c50:	str	ip, [sp, #228]	; 0xe4
   20c54:	lsl	r1, r0, #16
   20c58:	str	r1, [sp, #224]	; 0xe0
   20c5c:	ldrd	r0, [sp, #224]	; 0xe0
   20c60:	orr	r0, r0, r2
   20c64:	orr	r1, r1, r3
   20c68:	mov	r2, r0
   20c6c:	mov	r3, r1
   20c70:	ldrb	r0, [r8, #4]
   20c74:	mov	ip, #0
   20c78:	str	ip, [sp, #212]	; 0xd4
   20c7c:	lsl	r1, r0, #24
   20c80:	str	r1, [sp, #208]	; 0xd0
   20c84:	ldrd	r0, [sp, #208]	; 0xd0
   20c88:	orr	r0, r0, r2
   20c8c:	orr	r1, r1, r3
   20c90:	mov	r2, r0
   20c94:	mov	r3, r1
   20c98:	ldrb	r1, [r8, #3]
   20c9c:	str	r1, [sp, #188]	; 0xbc
   20ca0:	mov	r1, #0
   20ca4:	str	r1, [sp, #184]	; 0xb8
   20ca8:	ldrd	r0, [sp, #184]	; 0xb8
   20cac:	orr	r0, r0, r2
   20cb0:	orr	r1, r1, r3
   20cb4:	mov	r2, r0
   20cb8:	mov	r3, r1
   20cbc:	ldrb	r0, [r8, #2]
   20cc0:	lsl	r1, r0, #8
   20cc4:	str	r1, [sp, #172]	; 0xac
   20cc8:	mov	r1, #0
   20ccc:	str	r1, [sp, #168]	; 0xa8
   20cd0:	ldrd	r0, [sp, #168]	; 0xa8
   20cd4:	orr	r0, r0, r2
   20cd8:	orr	r1, r1, r3
   20cdc:	mov	r2, r0
   20ce0:	mov	r3, r1
   20ce4:	ldrb	r0, [r8, #1]
   20ce8:	lsl	r1, r0, #16
   20cec:	str	r1, [sp, #156]	; 0x9c
   20cf0:	mov	r1, #0
   20cf4:	str	r1, [sp, #152]	; 0x98
   20cf8:	ldrd	r0, [sp, #152]	; 0x98
   20cfc:	orr	r0, r0, r2
   20d00:	orr	r1, r1, r3
   20d04:	mov	r2, r0
   20d08:	mov	r3, r1
   20d0c:	ldrb	r0, [r8]
   20d10:	lsl	r1, r0, #24
   20d14:	str	r1, [sp, #140]	; 0x8c
   20d18:	mov	r1, #0
   20d1c:	str	r1, [sp, #136]	; 0x88
   20d20:	ldrd	r0, [sp, #136]	; 0x88
   20d24:	orr	r0, r0, r2
   20d28:	orr	r1, r1, r3
   20d2c:	mov	r2, r0
   20d30:	mov	r3, r1
   20d34:	cmp	r1, r7
   20d38:	cmpeq	r0, r6
   20d3c:	bls	20de4 <_start@@Base+0xc7bc>
   20d40:	bic	r0, r0, #255	; 0xff
   20d44:	add	r5, pc, #580	; 0x244
   20d48:	ldrd	r4, [r5]
   20d4c:	cmp	r1, r5
   20d50:	cmpeq	r0, r4
   20d54:	beq	20fb0 <_start@@Base+0xc988>
   20d58:	ldr	r0, [pc, #584]	; 20fa8 <_start@@Base+0xc980>
   20d5c:	mvn	r1, #0
   20d60:	and	r0, r0, r2
   20d64:	and	r1, r1, r3
   20d68:	mov	r2, r0
   20d6c:	mov	r3, r1
   20d70:	add	r1, pc, #544	; 0x220
   20d74:	ldrd	r0, [r1]
   20d78:	cmp	r3, r1
   20d7c:	cmpeq	r2, r0
   20d80:	beq	2102c <_start@@Base+0xca04>
   20d84:	mov	r2, sl
   20d88:	mov	r1, r8
   20d8c:	mov	r0, fp
   20d90:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   20d94:	mov	r4, r0
   20d98:	b	20e14 <_start@@Base+0xc7ec>
   20d9c:	mov	r2, #0
   20da0:	mov	r3, #0
   20da4:	b	20c48 <_start@@Base+0xc620>
   20da8:	mov	r2, #0
   20dac:	mov	r3, #0
   20db0:	b	20c70 <_start@@Base+0xc648>
   20db4:	mov	r2, #0
   20db8:	mov	r3, #0
   20dbc:	b	20c98 <_start@@Base+0xc670>
   20dc0:	mov	r2, #0
   20dc4:	mov	r3, #0
   20dc8:	b	20cbc <_start@@Base+0xc694>
   20dcc:	mov	r2, #0
   20dd0:	mov	r3, #0
   20dd4:	b	20ce4 <_start@@Base+0xc6bc>
   20dd8:	mov	r2, #0
   20ddc:	mov	r3, #0
   20de0:	b	20d0c <_start@@Base+0xc6e4>
   20de4:	mov	r2, #0
   20de8:	mov	r3, r1
   20dec:	add	r1, pc, #428	; 0x1ac
   20df0:	ldrd	r0, [r1]
   20df4:	cmp	r3, r1
   20df8:	cmpeq	r2, r0
   20dfc:	beq	20f08 <_start@@Base+0xc8e0>
   20e00:	mov	r2, sl
   20e04:	mov	r1, r8
   20e08:	mov	r0, fp
   20e0c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   20e10:	mov	r4, r0
   20e14:	sub	r3, sl, r4
   20e18:	cmp	r3, #1
   20e1c:	ble	20e30 <_start@@Base+0xc808>
   20e20:	ldrb	r3, [r4]
   20e24:	cmp	r3, #32
   20e28:	bhi	20e44 <_start@@Base+0xc81c>
   20e2c:	beq	210a8 <_start@@Base+0xca80>
   20e30:	mov	r2, sl
   20e34:	mov	r1, r4
   20e38:	mov	r0, fp
   20e3c:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   20e40:	mov	r4, r0
   20e44:	cmp	sl, r4
   20e48:	moveq	r3, #0
   20e4c:	streq	r3, [sp, #276]	; 0x114
   20e50:	moveq	r8, r4
   20e54:	beq	20e90 <_start@@Base+0xc868>
   20e58:	ldrb	r3, [r4]
   20e5c:	cmp	r3, #44	; 0x2c
   20e60:	beq	21108 <_start@@Base+0xcae0>
   20e64:	mov	r3, #0
   20e68:	str	r3, [sp, #276]	; 0x114
   20e6c:	ldrb	r3, [r4]
   20e70:	cmp	r3, #125	; 0x7d
   20e74:	beq	210bc <_start@@Base+0xca94>
   20e78:	mov	r3, #10
   20e7c:	mov	r2, sl
   20e80:	mov	r1, r4
   20e84:	mov	r0, fp
   20e88:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   20e8c:	mov	r8, r0
   20e90:	ldr	r3, [sp, #276]	; 0x114
   20e94:	cmp	r3, #0
   20e98:	beq	211b0 <_start@@Base+0xcb88>
   20e9c:	cmp	sl, r8
   20ea0:	beq	20ecc <_start@@Base+0xc8a4>
   20ea4:	ldrb	r3, [r8]
   20ea8:	cmp	r3, #34	; 0x22
   20eac:	addeq	r8, r8, #1
   20eb0:	beq	20ecc <_start@@Base+0xc8a4>
   20eb4:	mov	r3, #5
   20eb8:	mov	r2, sl
   20ebc:	mov	r1, r8
   20ec0:	mov	r0, fp
   20ec4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   20ec8:	mov	r8, r0
   20ecc:	sub	r3, sl, r8
   20ed0:	cmp	r3, #8
   20ed4:	movcs	r3, #8
   20ed8:	sub	r3, r3, #1
   20edc:	cmp	r3, #7
   20ee0:	ldrls	pc, [pc, r3, lsl #2]
   20ee4:	b	20e00 <_start@@Base+0xc7d8>
   20ee8:	ldrdeq	r0, [r2], -r8
   20eec:	andeq	r0, r2, ip, asr #27
   20ef0:	andeq	r0, r2, r0, asr #27
   20ef4:			; <UNDEFINED> instruction: 0x00020db4
   20ef8:	andeq	r0, r2, r8, lsr #27
   20efc:	muleq	r2, ip, sp
   20f00:	andeq	r0, r2, r8, lsl ip
   20f04:	andeq	r0, r2, ip, lsl #24
   20f08:	mov	r3, #4
   20f0c:	mov	r2, sl
   20f10:	mov	r1, r8
   20f14:	mov	r0, fp
   20f18:	bl	17de0 <_start@@Base+0x37b8>
   20f1c:	cmp	r0, r8
   20f20:	beq	20f70 <_start@@Base+0xc948>
   20f24:	mov	r3, #0
   20f28:	str	r3, [sp]
   20f2c:	add	r3, sp, #280	; 0x118
   20f30:	mov	r2, sl
   20f34:	mov	r1, r0
   20f38:	mov	r0, fp
   20f3c:	bl	2e738 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   20f40:	mov	r4, r0
   20f44:	ldr	r3, [sp, #280]	; 0x118
   20f48:	cmp	r3, #0
   20f4c:	beq	21218 <_start@@Base+0xcbf0>
   20f50:	mov	r1, #0
   20f54:	ldr	r0, [fp]
   20f58:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   20f5c:	cmp	r0, #0
   20f60:	beq	21220 <_start@@Base+0xcbf8>
   20f64:	ldr	r3, [sp, #280]	; 0x118
   20f68:	str	r3, [r0]
   20f6c:	b	20e14 <_start@@Base+0xc7ec>
   20f70:	mov	r2, sl
   20f74:	mov	r1, r0
   20f78:	mov	r0, fp
   20f7c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   20f80:	mov	r4, r0
   20f84:	b	20e14 <_start@@Base+0xc7ec>
   20f88:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   20f8c:	mcrvs	3, 3, r7, cr5, cr4, {3}
   20f90:	cmnvs	r4, r0, lsl #2
   20f94:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   20f98:	strbvs	r0, [r4, #-0]!
   20f9c:	mcrvs	3, 3, r7, cr5, cr4, {3}
   20fa0:	andeq	r0, r0, r0
   20fa4:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   20fa8:			; <UNDEFINED> instruction: 0xffff0000
   20fac:	andeq	r3, r5, r0, ror r0
   20fb0:	mov	r3, #7
   20fb4:	mov	r2, sl
   20fb8:	mov	r1, r8
   20fbc:	mov	r0, fp
   20fc0:	bl	17de0 <_start@@Base+0x37b8>
   20fc4:	mov	r1, r0
   20fc8:	cmp	r0, r8
   20fcc:	beq	21018 <_start@@Base+0xc9f0>
   20fd0:	mov	r3, #1
   20fd4:	str	r3, [sp]
   20fd8:	add	r3, sp, #280	; 0x118
   20fdc:	mov	r2, sl
   20fe0:	mov	r0, fp
   20fe4:	bl	2e738 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   20fe8:	mov	r4, r0
   20fec:	ldr	r3, [sp, #280]	; 0x118
   20ff0:	cmp	r3, #0
   20ff4:	beq	21228 <_start@@Base+0xcc00>
   20ff8:	mov	r1, #1
   20ffc:	ldr	r0, [fp]
   21000:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   21004:	cmp	r0, #0
   21008:	beq	21230 <_start@@Base+0xcc08>
   2100c:	ldr	r3, [sp, #280]	; 0x118
   21010:	str	r3, [r0]
   21014:	b	20e14 <_start@@Base+0xc7ec>
   21018:	mov	r2, sl
   2101c:	mov	r0, fp
   21020:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   21024:	mov	r4, r0
   21028:	b	20e14 <_start@@Base+0xc7ec>
   2102c:	mov	r3, r9
   21030:	mov	r2, sl
   21034:	mov	r1, r8
   21038:	mov	r0, fp
   2103c:	bl	17de0 <_start@@Base+0x37b8>
   21040:	mov	r1, r0
   21044:	cmp	r0, r8
   21048:	beq	21094 <_start@@Base+0xca6c>
   2104c:	mov	r3, #0
   21050:	str	r3, [sp]
   21054:	add	r3, sp, #280	; 0x118
   21058:	mov	r2, sl
   2105c:	mov	r0, fp
   21060:	bl	2e738 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   21064:	mov	r4, r0
   21068:	ldr	r3, [sp, #280]	; 0x118
   2106c:	cmp	r3, #0
   21070:	beq	21238 <_start@@Base+0xcc10>
   21074:	mov	r1, #2
   21078:	ldr	r0, [fp]
   2107c:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   21080:	cmp	r0, #0
   21084:	beq	21240 <_start@@Base+0xcc18>
   21088:	ldr	r3, [sp, #280]	; 0x118
   2108c:	str	r3, [r0]
   21090:	b	20e14 <_start@@Base+0xc7ec>
   21094:	mov	r2, sl
   21098:	mov	r0, fp
   2109c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   210a0:	mov	r4, r0
   210a4:	b	20e14 <_start@@Base+0xc7ec>
   210a8:	ldrb	r3, [r4, #1]
   210ac:	cmp	r3, #32
   210b0:	addhi	r4, r4, #1
   210b4:	bls	20e30 <_start@@Base+0xc808>
   210b8:	b	20e44 <_start@@Base+0xc81c>
   210bc:	add	r8, r4, #1
   210c0:	sub	r3, sl, r8
   210c4:	cmp	r3, #1
   210c8:	ble	210dc <_start@@Base+0xcab4>
   210cc:	ldrb	r3, [r4, #1]
   210d0:	cmp	r3, #32
   210d4:	bhi	20e90 <_start@@Base+0xc868>
   210d8:	beq	210f4 <_start@@Base+0xcacc>
   210dc:	mov	r2, sl
   210e0:	mov	r1, r8
   210e4:	mov	r0, fp
   210e8:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   210ec:	mov	r8, r0
   210f0:	b	20e90 <_start@@Base+0xc868>
   210f4:	ldrb	r3, [r4, #2]
   210f8:	cmp	r3, #32
   210fc:	addhi	r8, r4, #2
   21100:	bls	210dc <_start@@Base+0xcab4>
   21104:	b	20e90 <_start@@Base+0xc868>
   21108:	add	r8, r4, #1
   2110c:	sub	r3, sl, r8
   21110:	cmp	r3, #1
   21114:	ble	21128 <_start@@Base+0xcb00>
   21118:	ldrb	r3, [r4, #1]
   2111c:	cmp	r3, #32
   21120:	bhi	2113c <_start@@Base+0xcb14>
   21124:	beq	21178 <_start@@Base+0xcb50>
   21128:	mov	r2, sl
   2112c:	mov	r1, r8
   21130:	mov	r0, fp
   21134:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   21138:	mov	r8, r0
   2113c:	cmp	sl, r8
   21140:	beq	2118c <_start@@Base+0xcb64>
   21144:	ldrb	r3, [r8]
   21148:	cmp	r3, #125	; 0x7d
   2114c:	movne	r3, #1
   21150:	strne	r3, [sp, #276]	; 0x114
   21154:	bne	20e90 <_start@@Base+0xc868>
   21158:	mov	r3, #0
   2115c:	str	r3, [sp, #276]	; 0x114
   21160:	mov	r2, sl
   21164:	add	r1, r8, #1
   21168:	mov	r0, fp
   2116c:	bl	17d9c <_start@@Base+0x3774>
   21170:	mov	r8, r0
   21174:	b	20e90 <_start@@Base+0xc868>
   21178:	ldrb	r3, [r4, #2]
   2117c:	cmp	r3, #32
   21180:	addhi	r8, r4, #2
   21184:	bls	21128 <_start@@Base+0xcb00>
   21188:	b	2113c <_start@@Base+0xcb14>
   2118c:	mov	r3, #0
   21190:	str	r3, [sp, #276]	; 0x114
   21194:	mov	r3, #10
   21198:	mov	r2, sl
   2119c:	mov	r1, r8
   211a0:	mov	r0, fp
   211a4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   211a8:	mov	r8, r0
   211ac:	b	20e90 <_start@@Base+0xc868>
   211b0:	ldr	r3, [fp, #20]
   211b4:	cmp	r3, #0
   211b8:	beq	21200 <_start@@Base+0xcbd8>
   211bc:	mov	r3, #33	; 0x21
   211c0:	mov	r2, sl
   211c4:	mov	r1, r8
   211c8:	mov	r0, fp
   211cc:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   211d0:	mov	r8, r0
   211d4:	ldr	r3, [sp, #296]	; 0x128
   211d8:	cmp	r3, #0
   211dc:	beq	23190 <_start@@Base+0xeb68>
   211e0:	mov	r1, #35	; 0x23
   211e4:	ldr	r0, [fp]
   211e8:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   211ec:	cmp	r0, #0
   211f0:	beq	2319c <_start@@Base+0xeb74>
   211f4:	ldr	r3, [sp, #296]	; 0x128
   211f8:	str	r3, [r0]
   211fc:	b	21d20 <_start@@Base+0xd6f8>
   21200:	ldr	r0, [fp]
   21204:	bl	27e74 <flatcc_builder_end_table@@Base>
   21208:	str	r0, [sp, #296]	; 0x128
   2120c:	cmp	r0, #0
   21210:	beq	211bc <_start@@Base+0xcb94>
   21214:	b	211d4 <_start@@Base+0xcbac>
   21218:	mov	r8, r0
   2121c:	b	211bc <_start@@Base+0xcb94>
   21220:	mov	r8, r4
   21224:	b	211bc <_start@@Base+0xcb94>
   21228:	mov	r8, r0
   2122c:	b	211bc <_start@@Base+0xcb94>
   21230:	mov	r8, r4
   21234:	b	211bc <_start@@Base+0xcb94>
   21238:	mov	r8, r0
   2123c:	b	211bc <_start@@Base+0xcb94>
   21240:	mov	r8, r4
   21244:	b	211bc <_start@@Base+0xcb94>
   21248:	mov	r2, sl
   2124c:	mov	r1, r0
   21250:	mov	r0, fp
   21254:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   21258:	mov	r8, r0
   2125c:	b	21d20 <_start@@Base+0xd6f8>
   21260:	mov	r3, #8
   21264:	mov	r2, sl
   21268:	mov	r1, r8
   2126c:	mov	r0, fp
   21270:	bl	17de0 <_start@@Base+0x37b8>
   21274:	mov	r4, r0
   21278:	cmp	r0, r8
   2127c:	beq	2132c <_start@@Base+0xcd04>
   21280:	add	r3, sp, #304	; 0x130
   21284:	mov	r2, #0
   21288:	strb	r2, [r3, #-24]!	; 0xffffffe8
   2128c:	mov	r2, sl
   21290:	mov	r1, r0
   21294:	mov	r0, fp
   21298:	bl	19254 <_start@@Base+0x4c2c>
   2129c:	mov	r8, r0
   212a0:	cmp	r4, r0
   212a4:	beq	212dc <_start@@Base+0xccb4>
   212a8:	ldrb	r3, [sp, #280]	; 0x118
   212ac:	cmp	r3, #1
   212b0:	beq	21310 <_start@@Base+0xcce8>
   212b4:	mov	r3, #1
   212b8:	mov	r2, r3
   212bc:	mov	r1, #15
   212c0:	ldr	r0, [fp]
   212c4:	bl	28e20 <flatcc_builder_table_add@@Base>
   212c8:	cmp	r0, #0
   212cc:	beq	231a8 <_start@@Base+0xeb80>
   212d0:	ldrb	r3, [sp, #280]	; 0x118
   212d4:	strb	r3, [r0]
   212d8:	b	21d20 <_start@@Base+0xd6f8>
   212dc:	add	r3, sp, #280	; 0x118
   212e0:	str	r3, [sp]
   212e4:	ldr	r3, [pc, #-832]	; 20fac <_start@@Base+0xc984>
   212e8:	add	r3, r3, #456	; 0x1c8
   212ec:	mov	r2, sl
   212f0:	mov	r1, r0
   212f4:	mov	r0, fp
   212f8:	bl	184e0 <_start@@Base+0x3eb8>
   212fc:	cmp	sl, r0
   21300:	cmpne	r8, r0
   21304:	beq	21320 <_start@@Base+0xccf8>
   21308:	mov	r8, r0
   2130c:	b	212a8 <_start@@Base+0xcc80>
   21310:	ldr	r3, [fp, #8]
   21314:	tst	r3, #2
   21318:	beq	21d20 <_start@@Base+0xd6f8>
   2131c:	b	212b4 <_start@@Base+0xcc8c>
   21320:	mov	r9, sl
   21324:	mov	sl, r0
   21328:	b	22ed0 <_start@@Base+0xe8a8>
   2132c:	mov	r2, sl
   21330:	mov	r1, r0
   21334:	mov	r0, fp
   21338:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   2133c:	mov	r8, r0
   21340:	b	21d20 <_start@@Base+0xd6f8>
   21344:	add	r3, pc, #884	; 0x374
   21348:	ldrd	r2, [r3]
   2134c:	cmp	r1, r3
   21350:	cmpeq	r0, r2
   21354:	bhi	21a98 <_start@@Base+0xd470>
   21358:	add	r3, pc, #872	; 0x368
   2135c:	ldrd	r2, [r3]
   21360:	cmp	r1, r3
   21364:	cmpeq	r0, r2
   21368:	beq	21384 <_start@@Base+0xcd5c>
   2136c:	mov	r2, sl
   21370:	mov	r1, r8
   21374:	mov	r0, fp
   21378:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   2137c:	mov	r8, r0
   21380:	b	21d20 <_start@@Base+0xd6f8>
   21384:	add	r4, r8, #8
   21388:	mov	r1, sl
   2138c:	mov	r0, r4
   21390:	bl	14750 <_start@@Base+0x128>
   21394:	mov	r0, #0
   21398:	and	r1, r1, #-16777216	; 0xff000000
   2139c:	cmp	r1, #2030043136	; 0x79000000
   213a0:	cmpeq	r0, #0
   213a4:	beq	213c0 <_start@@Base+0xcd98>
   213a8:	mov	r2, sl
   213ac:	mov	r1, r4
   213b0:	mov	r0, fp
   213b4:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   213b8:	mov	r8, r0
   213bc:	b	21d20 <_start@@Base+0xd6f8>
   213c0:	mov	r3, #1
   213c4:	mov	r2, sl
   213c8:	mov	r1, r4
   213cc:	mov	r0, fp
   213d0:	bl	17de0 <_start@@Base+0x37b8>
   213d4:	mov	r8, r0
   213d8:	cmp	r4, r0
   213dc:	beq	21a80 <_start@@Base+0xd458>
   213e0:	mov	r3, #0
   213e4:	str	r3, [sp, #296]	; 0x128
   213e8:	mov	r1, #3
   213ec:	ldr	r0, [fp]
   213f0:	bl	27424 <flatcc_builder_start_table@@Base>
   213f4:	cmp	r0, #0
   213f8:	bne	21a00 <_start@@Base+0xd3d8>
   213fc:	add	r3, sp, #268	; 0x10c
   21400:	mov	r2, sl
   21404:	mov	r1, r8
   21408:	mov	r0, fp
   2140c:	bl	19394 <_start@@Base+0x4d6c>
   21410:	mov	r8, r0
   21414:	ldr	r3, [sp, #268]	; 0x10c
   21418:	cmp	r3, #0
   2141c:	beq	219f4 <_start@@Base+0xd3cc>
   21420:	mov	r9, #5
   21424:	ldr	r3, [pc, #704]	; 216ec <_start@@Base+0xd0c4>
   21428:	add	r3, r3, #480	; 0x1e0
   2142c:	str	r3, [sp, #20]
   21430:	add	r3, sp, #256	; 0x100
   21434:	ldrd	r4, [r3]
   21438:	b	21654 <_start@@Base+0xd02c>
   2143c:	ldrb	r2, [r8, #7]
   21440:	mov	r3, #0
   21444:	b	21450 <_start@@Base+0xce28>
   21448:	mov	r2, #0
   2144c:	mov	r3, #0
   21450:	ldrb	r0, [r8, #6]
   21454:	mov	ip, #0
   21458:	str	ip, [sp, #236]	; 0xec
   2145c:	lsl	r1, r0, #8
   21460:	str	r1, [sp, #232]	; 0xe8
   21464:	ldrd	r0, [sp, #232]	; 0xe8
   21468:	orr	r0, r0, r2
   2146c:	orr	r1, r1, r3
   21470:	mov	r2, r0
   21474:	mov	r3, r1
   21478:	ldrb	r0, [r8, #5]
   2147c:	mov	ip, #0
   21480:	str	ip, [sp, #220]	; 0xdc
   21484:	lsl	r1, r0, #16
   21488:	str	r1, [sp, #216]	; 0xd8
   2148c:	ldrd	r0, [sp, #216]	; 0xd8
   21490:	orr	r0, r0, r2
   21494:	orr	r1, r1, r3
   21498:	mov	r2, r0
   2149c:	mov	r3, r1
   214a0:	ldrb	r0, [r8, #4]
   214a4:	mov	ip, #0
   214a8:	str	ip, [sp, #204]	; 0xcc
   214ac:	lsl	r1, r0, #24
   214b0:	str	r1, [sp, #200]	; 0xc8
   214b4:	ldrd	r0, [sp, #200]	; 0xc8
   214b8:	orr	r0, r0, r2
   214bc:	orr	r1, r1, r3
   214c0:	mov	r2, r0
   214c4:	mov	r3, r1
   214c8:	ldrb	r1, [r8, #3]
   214cc:	str	r1, [sp, #180]	; 0xb4
   214d0:	mov	r1, #0
   214d4:	str	r1, [sp, #176]	; 0xb0
   214d8:	ldrd	r0, [sp, #176]	; 0xb0
   214dc:	orr	r0, r0, r2
   214e0:	orr	r1, r1, r3
   214e4:	mov	r2, r0
   214e8:	mov	r3, r1
   214ec:	ldrb	r0, [r8, #2]
   214f0:	lsl	r1, r0, #8
   214f4:	str	r1, [sp, #164]	; 0xa4
   214f8:	mov	r1, #0
   214fc:	str	r1, [sp, #160]	; 0xa0
   21500:	ldrd	r0, [sp, #160]	; 0xa0
   21504:	orr	r0, r0, r2
   21508:	orr	r1, r1, r3
   2150c:	mov	r2, r0
   21510:	mov	r3, r1
   21514:	ldrb	r0, [r8, #1]
   21518:	lsl	r1, r0, #16
   2151c:	str	r1, [sp, #148]	; 0x94
   21520:	mov	r1, #0
   21524:	str	r1, [sp, #144]	; 0x90
   21528:	ldrd	r0, [sp, #144]	; 0x90
   2152c:	orr	r0, r0, r2
   21530:	orr	r1, r1, r3
   21534:	mov	r2, r0
   21538:	mov	r3, r1
   2153c:	ldrb	r0, [r8]
   21540:	lsl	r5, r0, #24
   21544:	mov	r4, #0
   21548:	orr	r2, r2, r4
   2154c:	orr	r3, r3, r5
   21550:	mvn	r0, #0
   21554:	ldr	r1, [pc, #388]	; 216e0 <_start@@Base+0xd0b8>
   21558:	cmp	r3, r1
   2155c:	cmpeq	r2, r0
   21560:	bls	21604 <_start@@Base+0xcfdc>
   21564:	mov	r0, #0
   21568:	bic	r1, r3, #255	; 0xff
   2156c:	add	r7, pc, #348	; 0x15c
   21570:	ldrd	r6, [r7]
   21574:	cmp	r1, r7
   21578:	cmpeq	r0, r6
   2157c:	beq	21878 <_start@@Base+0xd250>
   21580:	mov	r0, #0
   21584:	ldr	r1, [pc, #356]	; 216f0 <_start@@Base+0xd0c8>
   21588:	and	r2, r2, r0
   2158c:	and	r3, r3, r1
   21590:	mov	r0, #0
   21594:	ldr	r1, [pc, #328]	; 216e4 <_start@@Base+0xd0bc>
   21598:	cmp	r3, r1
   2159c:	cmpeq	r2, r0
   215a0:	beq	21978 <_start@@Base+0xd350>
   215a4:	mov	r2, sl
   215a8:	mov	r1, r8
   215ac:	mov	r0, fp
   215b0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   215b4:	mov	r8, r0
   215b8:	b	21630 <_start@@Base+0xd008>
   215bc:	mov	r2, #0
   215c0:	mov	r3, #0
   215c4:	b	21478 <_start@@Base+0xce50>
   215c8:	mov	r2, #0
   215cc:	mov	r3, #0
   215d0:	b	214a0 <_start@@Base+0xce78>
   215d4:	mov	r2, #0
   215d8:	mov	r3, #0
   215dc:	b	214c8 <_start@@Base+0xcea0>
   215e0:	mov	r2, #0
   215e4:	mov	r3, #0
   215e8:	b	214ec <_start@@Base+0xcec4>
   215ec:	mov	r2, #0
   215f0:	mov	r3, #0
   215f4:	b	21514 <_start@@Base+0xceec>
   215f8:	mov	r2, #0
   215fc:	mov	r3, #0
   21600:	b	2153c <_start@@Base+0xcf14>
   21604:	and	r2, r2, #-16777216	; 0xff000000
   21608:	add	r1, pc, #200	; 0xc8
   2160c:	ldrd	r0, [r1]
   21610:	cmp	r3, r1
   21614:	cmpeq	r2, r0
   21618:	beq	216f4 <_start@@Base+0xd0cc>
   2161c:	mov	r2, sl
   21620:	mov	r1, r8
   21624:	mov	r0, fp
   21628:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   2162c:	mov	r8, r0
   21630:	add	r3, sp, #268	; 0x10c
   21634:	mov	r2, sl
   21638:	mov	r1, r8
   2163c:	mov	r0, fp
   21640:	bl	180fc <_start@@Base+0x3ad4>
   21644:	mov	r8, r0
   21648:	ldr	r3, [sp, #268]	; 0x10c
   2164c:	cmp	r3, #0
   21650:	beq	219ec <_start@@Base+0xd3c4>
   21654:	cmp	sl, r8
   21658:	beq	21684 <_start@@Base+0xd05c>
   2165c:	ldrb	r3, [r8]
   21660:	cmp	r3, #34	; 0x22
   21664:	addeq	r8, r8, #1
   21668:	beq	21684 <_start@@Base+0xd05c>
   2166c:	mov	r3, r9
   21670:	mov	r2, sl
   21674:	mov	r1, r8
   21678:	mov	r0, fp
   2167c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   21680:	mov	r8, r0
   21684:	sub	r3, sl, r8
   21688:	cmp	r3, #8
   2168c:	movcs	r3, #8
   21690:	sub	r3, r3, #1
   21694:	cmp	r3, #7
   21698:	ldrls	pc, [pc, r3, lsl #2]
   2169c:	b	2161c <_start@@Base+0xcff4>
   216a0:	strdeq	r1, [r2], -r8
   216a4:	andeq	r1, r2, ip, ror #11
   216a8:	andeq	r1, r2, r0, ror #11
   216ac:	ldrdeq	r1, [r2], -r4
   216b0:	andeq	r1, r2, r8, asr #11
   216b4:			; <UNDEFINED> instruction: 0x000215bc
   216b8:	andeq	r1, r2, r8, asr #8
   216bc:	andeq	r1, r2, ip, lsr r4
   216c0:	ldrbvs	pc, [pc, #4095]!	; 226c7 <_start@@Base+0xe09f>	; <UNPREDICTABLE>
   216c4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   216c8:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   216cc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   216d0:	andeq	r0, r0, r0
   216d4:	strbtvc	r6, [r1], -r0, lsl #24
   216d8:	strvc	r0, [r0], #-0
   216dc:	cmnvs	pc, #461373440	; 0x1b800000
   216e0:	stmdbvs	r3!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   216e4:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   216e8:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   216ec:	andeq	r3, r5, r0, ror r0
   216f0:			; <UNDEFINED> instruction: 0xffff0000
   216f4:	mov	r3, r9
   216f8:	mov	r2, sl
   216fc:	mov	r1, r8
   21700:	mov	r0, fp
   21704:	bl	17de0 <_start@@Base+0x37b8>
   21708:	mov	r6, r0
   2170c:	cmp	r0, r8
   21710:	beq	21860 <_start@@Base+0xd238>
   21714:	add	r3, sp, #264	; 0x108
   21718:	add	r3, r3, #2
   2171c:	strh	r4, [r3]
   21720:	mov	r2, #0
   21724:	mov	r3, #0
   21728:	add	ip, sp, #280	; 0x118
   2172c:	strd	r2, [ip]
   21730:	str	r4, [sp, #276]	; 0x114
   21734:	cmp	sl, r0
   21738:	beq	21804 <_start@@Base+0xd1dc>
   2173c:	str	ip, [sp]
   21740:	add	r3, sp, #276	; 0x114
   21744:	mov	r2, sl
   21748:	mov	r1, r0
   2174c:	mov	r0, fp
   21750:	bl	2d678 <flatcc_json_parser_integer@@Base>
   21754:	mov	r8, r0
   21758:	cmp	r6, r0
   2175c:	beq	21804 <_start@@Base+0xd1dc>
   21760:	ldr	r3, [sp, #276]	; 0x114
   21764:	cmp	r3, r4
   21768:	bne	217e4 <_start@@Base+0xd1bc>
   2176c:	add	r3, sp, #280	; 0x118
   21770:	ldrd	r2, [r3]
   21774:	ldr	r0, [pc, #-148]	; 216e8 <_start@@Base+0xd0c0>
   21778:	mov	r1, #0
   2177c:	cmp	r3, r1
   21780:	cmpeq	r2, r0
   21784:	addls	r1, sp, #264	; 0x108
   21788:	addls	r1, r1, #2
   2178c:	strhls	r2, [r1]
   21790:	bhi	21844 <_start@@Base+0xd21c>
   21794:	add	r3, sp, #264	; 0x108
   21798:	add	r3, r3, #2
   2179c:	ldrh	r3, [r3]
   217a0:	cmp	r3, #0
   217a4:	bne	217b4 <_start@@Base+0xd18c>
   217a8:	ldr	r3, [fp, #8]
   217ac:	tst	r3, #2
   217b0:	beq	21630 <_start@@Base+0xd008>
   217b4:	mov	r3, #2
   217b8:	mov	r2, r3
   217bc:	mov	r1, r3
   217c0:	ldr	r0, [fp]
   217c4:	bl	28e20 <flatcc_builder_table_add@@Base>
   217c8:	cmp	r0, #0
   217cc:	beq	21a5c <_start@@Base+0xd434>
   217d0:	add	r3, sp, #264	; 0x108
   217d4:	add	r3, r3, #2
   217d8:	ldrh	r3, [r3]
   217dc:	strh	r3, [r0]
   217e0:	b	21630 <_start@@Base+0xd008>
   217e4:	mov	r3, #8
   217e8:	mov	r2, sl
   217ec:	mov	r1, r0
   217f0:	mov	r0, fp
   217f4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   217f8:	mov	r8, r0
   217fc:	cmp	r6, r8
   21800:	bne	21794 <_start@@Base+0xd16c>
   21804:	add	r3, sp, #264	; 0x108
   21808:	add	r3, r3, #2
   2180c:	str	r3, [sp]
   21810:	ldr	r3, [pc, #-300]	; 216ec <_start@@Base+0xd0c4>
   21814:	add	r3, r3, #468	; 0x1d4
   21818:	mov	r2, sl
   2181c:	mov	r1, r6
   21820:	mov	r0, fp
   21824:	bl	189ac <_start@@Base+0x4384>
   21828:	mov	r8, r0
   2182c:	cmp	sl, r0
   21830:	cmpne	r6, r0
   21834:	bne	21794 <_start@@Base+0xd16c>
   21838:	add	r3, sp, #256	; 0x100
   2183c:	strd	r4, [r3]
   21840:	b	21a00 <_start@@Base+0xd3d8>
   21844:	mov	r3, #7
   21848:	mov	r2, sl
   2184c:	mov	r1, r8
   21850:	mov	r0, fp
   21854:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   21858:	mov	r8, r0
   2185c:	b	217fc <_start@@Base+0xd1d4>
   21860:	mov	r2, sl
   21864:	mov	r1, r0
   21868:	mov	r0, fp
   2186c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   21870:	mov	r8, r0
   21874:	b	21630 <_start@@Base+0xd008>
   21878:	mov	r3, #3
   2187c:	mov	r2, sl
   21880:	mov	r1, r8
   21884:	mov	r0, fp
   21888:	bl	17de0 <_start@@Base+0x37b8>
   2188c:	mov	r6, r0
   21890:	cmp	r0, r8
   21894:	beq	21960 <_start@@Base+0xd338>
   21898:	add	r1, sp, #304	; 0x130
   2189c:	mov	r2, #0
   218a0:	mov	r3, #0
   218a4:	strd	r2, [r1, #-24]!	; 0xffffffe8
   218a8:	mov	r3, r1
   218ac:	mov	r2, sl
   218b0:	mov	r1, r0
   218b4:	mov	r0, fp
   218b8:	bl	17cd4 <_start@@Base+0x36ac>
   218bc:	mov	r8, r0
   218c0:	cmp	r6, r0
   218c4:	beq	21910 <_start@@Base+0xd2e8>
   218c8:	add	r3, sp, #280	; 0x118
   218cc:	ldrd	r2, [r3]
   218d0:	orrs	r3, r2, r3
   218d4:	bne	218e4 <_start@@Base+0xd2bc>
   218d8:	ldr	r3, [fp, #8]
   218dc:	tst	r3, #2
   218e0:	beq	21630 <_start@@Base+0xd008>
   218e4:	mov	r3, #8
   218e8:	mov	r2, r3
   218ec:	mov	r1, #1
   218f0:	ldr	r0, [fp]
   218f4:	bl	28e20 <flatcc_builder_table_add@@Base>
   218f8:	cmp	r0, #0
   218fc:	beq	21940 <_start@@Base+0xd318>
   21900:	add	r3, sp, #280	; 0x118
   21904:	ldrd	r2, [r3]
   21908:	strd	r2, [r0]
   2190c:	b	21630 <_start@@Base+0xd008>
   21910:	add	r3, sp, #280	; 0x118
   21914:	str	r3, [sp]
   21918:	ldr	r3, [sp, #20]
   2191c:	mov	r2, sl
   21920:	mov	r1, r0
   21924:	mov	r0, fp
   21928:	bl	19084 <_start@@Base+0x4a5c>
   2192c:	cmp	sl, r0
   21930:	cmpne	r8, r0
   21934:	beq	21954 <_start@@Base+0xd32c>
   21938:	mov	r8, r0
   2193c:	b	218c8 <_start@@Base+0xd2a0>
   21940:	add	r3, sp, #256	; 0x100
   21944:	strd	r4, [r3]
   21948:	mov	r0, r8
   2194c:	mov	r8, r0
   21950:	b	21a00 <_start@@Base+0xd3d8>
   21954:	add	r3, sp, #256	; 0x100
   21958:	strd	r4, [r3]
   2195c:	b	2194c <_start@@Base+0xd324>
   21960:	mov	r2, sl
   21964:	mov	r1, r0
   21968:	mov	r0, fp
   2196c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   21970:	mov	r8, r0
   21974:	b	21630 <_start@@Base+0xd008>
   21978:	mov	r3, #2
   2197c:	mov	r2, sl
   21980:	mov	r1, r8
   21984:	mov	r0, fp
   21988:	bl	17de0 <_start@@Base+0x37b8>
   2198c:	mov	r1, r0
   21990:	cmp	r0, r8
   21994:	beq	219d8 <_start@@Base+0xd3b0>
   21998:	add	r3, sp, #272	; 0x110
   2199c:	mov	r2, sl
   219a0:	mov	r0, fp
   219a4:	bl	2eb0c <flatcc_json_parser_build_string@@Base>
   219a8:	mov	r8, r0
   219ac:	ldr	r3, [sp, #272]	; 0x110
   219b0:	cmp	r3, #0
   219b4:	beq	21a68 <_start@@Base+0xd440>
   219b8:	mov	r1, #0
   219bc:	ldr	r0, [fp]
   219c0:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   219c4:	cmp	r0, #0
   219c8:	beq	21a74 <_start@@Base+0xd44c>
   219cc:	ldr	r3, [sp, #272]	; 0x110
   219d0:	str	r3, [r0]
   219d4:	b	21630 <_start@@Base+0xd008>
   219d8:	mov	r2, sl
   219dc:	mov	r0, fp
   219e0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   219e4:	mov	r8, r0
   219e8:	b	21630 <_start@@Base+0xd008>
   219ec:	add	r3, sp, #256	; 0x100
   219f0:	strd	r4, [r3]
   219f4:	ldr	r3, [fp, #20]
   219f8:	cmp	r3, #0
   219fc:	beq	21a44 <_start@@Base+0xd41c>
   21a00:	mov	r3, #33	; 0x21
   21a04:	mov	r2, sl
   21a08:	mov	r1, r8
   21a0c:	mov	r0, fp
   21a10:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   21a14:	mov	r8, r0
   21a18:	ldr	r3, [sp, #296]	; 0x128
   21a1c:	cmp	r3, #0
   21a20:	beq	231b4 <_start@@Base+0xeb8c>
   21a24:	mov	r1, #14
   21a28:	ldr	r0, [fp]
   21a2c:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   21a30:	cmp	r0, #0
   21a34:	beq	231c0 <_start@@Base+0xeb98>
   21a38:	ldr	r3, [sp, #296]	; 0x128
   21a3c:	str	r3, [r0]
   21a40:	b	21d20 <_start@@Base+0xd6f8>
   21a44:	ldr	r0, [fp]
   21a48:	bl	27e74 <flatcc_builder_end_table@@Base>
   21a4c:	str	r0, [sp, #296]	; 0x128
   21a50:	cmp	r0, #0
   21a54:	beq	21a00 <_start@@Base+0xd3d8>
   21a58:	b	21a18 <_start@@Base+0xd3f0>
   21a5c:	add	r3, sp, #256	; 0x100
   21a60:	strd	r4, [r3]
   21a64:	b	21a00 <_start@@Base+0xd3d8>
   21a68:	add	r3, sp, #256	; 0x100
   21a6c:	strd	r4, [r3]
   21a70:	b	21a00 <_start@@Base+0xd3d8>
   21a74:	add	r3, sp, #256	; 0x100
   21a78:	strd	r4, [r3]
   21a7c:	b	21a00 <_start@@Base+0xd3d8>
   21a80:	mov	r2, sl
   21a84:	mov	r1, r0
   21a88:	mov	r0, fp
   21a8c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   21a90:	mov	r8, r0
   21a94:	b	21d20 <_start@@Base+0xd6f8>
   21a98:	ldr	r2, [pc, #-944]	; 216f0 <_start@@Base+0xd0c8>
   21a9c:	mvn	r3, #0
   21aa0:	and	r2, r2, r0
   21aa4:	and	r3, r3, r1
   21aa8:	add	r1, pc, #1000	; 0x3e8
   21aac:	ldrd	r0, [r1]
   21ab0:	cmp	r3, r1
   21ab4:	cmpeq	r2, r0
   21ab8:	beq	21aec <_start@@Base+0xd4c4>
   21abc:	and	r4, r4, #-16777216	; 0xff000000
   21ac0:	add	r3, pc, #984	; 0x3d8
   21ac4:	ldrd	r2, [r3]
   21ac8:	cmp	r5, r3
   21acc:	cmpeq	r4, r2
   21ad0:	beq	21be0 <_start@@Base+0xd5b8>
   21ad4:	mov	r2, sl
   21ad8:	mov	r1, r8
   21adc:	mov	r0, fp
   21ae0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   21ae4:	mov	r8, r0
   21ae8:	b	21d20 <_start@@Base+0xd6f8>
   21aec:	mov	r3, #6
   21af0:	mov	r2, sl
   21af4:	mov	r1, r8
   21af8:	mov	r0, fp
   21afc:	bl	17de0 <_start@@Base+0x37b8>
   21b00:	mov	r4, r0
   21b04:	cmp	r0, r8
   21b08:	beq	21bc8 <_start@@Base+0xd5a0>
   21b0c:	add	r3, sp, #304	; 0x130
   21b10:	mov	r2, #0
   21b14:	str	r2, [r3, #-24]!	; 0xffffffe8
   21b18:	mov	r2, sl
   21b1c:	mov	r1, r0
   21b20:	mov	r0, fp
   21b24:	bl	2d548 <flatcc_json_parser_float@@Base>
   21b28:	mov	r8, r0
   21b2c:	cmp	r4, r0
   21b30:	beq	21b7c <_start@@Base+0xd554>
   21b34:	vldr	s14, [sp, #280]	; 0x118
   21b38:	vldr	s15, [pc, #928]	; 21ee0 <_start@@Base+0xd8b8>
   21b3c:	vcmp.f32	s14, s15
   21b40:	vmrs	APSR_nzcv, fpscr
   21b44:	bne	21b54 <_start@@Base+0xd52c>
   21b48:	ldr	r3, [fp, #8]
   21b4c:	tst	r3, #2
   21b50:	beq	21d20 <_start@@Base+0xd6f8>
   21b54:	mov	r3, #4
   21b58:	mov	r2, r3
   21b5c:	mov	r1, #26
   21b60:	ldr	r0, [fp]
   21b64:	bl	28e20 <flatcc_builder_table_add@@Base>
   21b68:	cmp	r0, #0
   21b6c:	beq	21bb0 <_start@@Base+0xd588>
   21b70:	ldr	r3, [sp, #280]	; 0x118
   21b74:	str	r3, [r0]
   21b78:	b	21d20 <_start@@Base+0xd6f8>
   21b7c:	add	r3, sp, #280	; 0x118
   21b80:	str	r3, [sp]
   21b84:	ldr	r3, [pc, #864]	; 21eec <_start@@Base+0xd8c4>
   21b88:	add	r3, r3, #492	; 0x1ec
   21b8c:	mov	r2, sl
   21b90:	mov	r1, r0
   21b94:	mov	r0, fp
   21b98:	bl	18218 <_start@@Base+0x3bf0>
   21b9c:	cmp	sl, r0
   21ba0:	cmpne	r8, r0
   21ba4:	beq	21bc0 <_start@@Base+0xd598>
   21ba8:	mov	r8, r0
   21bac:	b	21b34 <_start@@Base+0xd50c>
   21bb0:	mov	r9, sl
   21bb4:	mov	r0, r8
   21bb8:	mov	sl, r0
   21bbc:	b	22ed0 <_start@@Base+0xe8a8>
   21bc0:	mov	r9, sl
   21bc4:	b	21bb8 <_start@@Base+0xd590>
   21bc8:	mov	r2, sl
   21bcc:	mov	r1, r0
   21bd0:	mov	r0, fp
   21bd4:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   21bd8:	mov	r8, r0
   21bdc:	b	21d20 <_start@@Base+0xd6f8>
   21be0:	mov	r3, #5
   21be4:	mov	r2, sl
   21be8:	mov	r1, r8
   21bec:	mov	r0, fp
   21bf0:	bl	17de0 <_start@@Base+0x37b8>
   21bf4:	mov	r4, r0
   21bf8:	cmp	r0, r8
   21bfc:	beq	21cbc <_start@@Base+0xd694>
   21c00:	add	r3, sp, #304	; 0x130
   21c04:	mov	r2, #0
   21c08:	str	r2, [r3, #-24]!	; 0xffffffe8
   21c0c:	mov	r2, sl
   21c10:	mov	r1, r0
   21c14:	mov	r0, fp
   21c18:	bl	2d548 <flatcc_json_parser_float@@Base>
   21c1c:	mov	r8, r0
   21c20:	cmp	r4, r0
   21c24:	beq	21c70 <_start@@Base+0xd648>
   21c28:	vldr	s14, [sp, #280]	; 0x118
   21c2c:	vldr	s15, [pc, #688]	; 21ee4 <_start@@Base+0xd8bc>
   21c30:	vcmp.f32	s14, s15
   21c34:	vmrs	APSR_nzcv, fpscr
   21c38:	bne	21c48 <_start@@Base+0xd620>
   21c3c:	ldr	r3, [fp, #8]
   21c40:	tst	r3, #2
   21c44:	beq	21d20 <_start@@Base+0xd6f8>
   21c48:	mov	r3, #4
   21c4c:	mov	r2, r3
   21c50:	mov	r1, #25
   21c54:	ldr	r0, [fp]
   21c58:	bl	28e20 <flatcc_builder_table_add@@Base>
   21c5c:	cmp	r0, #0
   21c60:	beq	21ca4 <_start@@Base+0xd67c>
   21c64:	ldr	r3, [sp, #280]	; 0x118
   21c68:	str	r3, [r0]
   21c6c:	b	21d20 <_start@@Base+0xd6f8>
   21c70:	add	r3, sp, #280	; 0x118
   21c74:	str	r3, [sp]
   21c78:	ldr	r3, [pc, #620]	; 21eec <_start@@Base+0xd8c4>
   21c7c:	add	r3, r3, #504	; 0x1f8
   21c80:	mov	r2, sl
   21c84:	mov	r1, r0
   21c88:	mov	r0, fp
   21c8c:	bl	18218 <_start@@Base+0x3bf0>
   21c90:	cmp	sl, r0
   21c94:	cmpne	r8, r0
   21c98:	beq	21cb4 <_start@@Base+0xd68c>
   21c9c:	mov	r8, r0
   21ca0:	b	21c28 <_start@@Base+0xd600>
   21ca4:	mov	r9, sl
   21ca8:	mov	r0, r8
   21cac:	mov	sl, r0
   21cb0:	b	22ed0 <_start@@Base+0xe8a8>
   21cb4:	mov	r9, sl
   21cb8:	b	21cac <_start@@Base+0xd684>
   21cbc:	mov	r2, sl
   21cc0:	mov	r1, r0
   21cc4:	mov	r0, fp
   21cc8:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   21ccc:	mov	r8, r0
   21cd0:	b	21d20 <_start@@Base+0xd6f8>
   21cd4:	add	r3, pc, #460	; 0x1cc
   21cd8:	ldrd	r2, [r3]
   21cdc:	cmp	r1, r3
   21ce0:	cmpeq	r0, r2
   21ce4:	bhi	21f44 <_start@@Base+0xd91c>
   21ce8:	ldr	r2, [pc, #504]	; 21ee8 <_start@@Base+0xd8c0>
   21cec:	mvn	r3, #0
   21cf0:	and	r4, r4, r2
   21cf4:	and	r5, r5, r3
   21cf8:	add	r3, pc, #432	; 0x1b0
   21cfc:	ldrd	r2, [r3]
   21d00:	cmp	r5, r3
   21d04:	cmpeq	r4, r2
   21d08:	beq	21e08 <_start@@Base+0xd7e0>
   21d0c:	mov	r2, sl
   21d10:	mov	r1, r8
   21d14:	mov	r0, fp
   21d18:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   21d1c:	mov	r8, r0
   21d20:	add	r3, sp, #300	; 0x12c
   21d24:	mov	r2, sl
   21d28:	mov	r1, r8
   21d2c:	mov	r0, fp
   21d30:	bl	180fc <_start@@Base+0x3ad4>
   21d34:	mov	r8, r0
   21d38:	ldr	r3, [sp, #300]	; 0x12c
   21d3c:	cmp	r3, #0
   21d40:	beq	22ebc <_start@@Base+0xe894>
   21d44:	cmp	sl, r8
   21d48:	beq	21d74 <_start@@Base+0xd74c>
   21d4c:	ldrb	r3, [r8]
   21d50:	cmp	r3, #34	; 0x22
   21d54:	addeq	r8, r8, #1
   21d58:	beq	21d74 <_start@@Base+0xd74c>
   21d5c:	mov	r3, #5
   21d60:	mov	r2, sl
   21d64:	mov	r1, r8
   21d68:	mov	r0, fp
   21d6c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   21d70:	mov	r8, r0
   21d74:	mov	r1, sl
   21d78:	mov	r0, r8
   21d7c:	bl	14750 <_start@@Base+0x128>
   21d80:	mov	r4, r0
   21d84:	mov	r5, r1
   21d88:	add	r3, pc, #296	; 0x128
   21d8c:	ldrd	r2, [r3]
   21d90:	cmp	r1, r3
   21d94:	cmpeq	r0, r2
   21d98:	bhi	1fc74 <_start@@Base+0xb64c>
   21d9c:	add	r3, pc, #284	; 0x11c
   21da0:	ldrd	r2, [r3]
   21da4:	cmp	r1, r3
   21da8:	cmpeq	r0, r2
   21dac:	bhi	1ecc4 <_start@@Base+0xa69c>
   21db0:	add	r3, pc, #272	; 0x110
   21db4:	ldrd	r2, [r3]
   21db8:	cmp	r1, r3
   21dbc:	cmpeq	r0, r2
   21dc0:	bhi	1e6e4 <_start@@Base+0xa0bc>
   21dc4:	and	r4, r0, #-16777216	; 0xff000000
   21dc8:	add	r3, pc, #256	; 0x100
   21dcc:	ldrd	r2, [r3]
   21dd0:	cmp	r1, r3
   21dd4:	cmpeq	r4, r2
   21dd8:	beq	1e4f4 <_start@@Base+0x9ecc>
   21ddc:	add	r3, pc, #244	; 0xf4
   21de0:	ldrd	r2, [r3]
   21de4:	cmp	r1, r3
   21de8:	cmpeq	r4, r2
   21dec:	beq	1e568 <_start@@Base+0x9f40>
   21df0:	mov	r2, sl
   21df4:	mov	r1, r8
   21df8:	mov	r0, fp
   21dfc:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   21e00:	mov	r8, r0
   21e04:	b	21d20 <_start@@Base+0xd6f8>
   21e08:	mov	r3, #6
   21e0c:	mov	r2, sl
   21e10:	mov	r1, r8
   21e14:	mov	r0, fp
   21e18:	bl	17de0 <_start@@Base+0x37b8>
   21e1c:	mov	r4, r0
   21e20:	cmp	r0, r8
   21e24:	beq	21f2c <_start@@Base+0xd904>
   21e28:	add	r3, sp, #304	; 0x130
   21e2c:	mov	r2, #0
   21e30:	str	r2, [r3, #-24]!	; 0xffffffe8
   21e34:	mov	r2, sl
   21e38:	mov	r1, r0
   21e3c:	mov	r0, fp
   21e40:	bl	2d548 <flatcc_json_parser_float@@Base>
   21e44:	mov	r8, r0
   21e48:	cmp	r4, r0
   21e4c:	beq	21ef0 <_start@@Base+0xd8c8>
   21e50:	vldr	s15, [sp, #280]	; 0x118
   21e54:	vcmp.f32	s15, #0.0
   21e58:	vmrs	APSR_nzcv, fpscr
   21e5c:	bne	21e6c <_start@@Base+0xd844>
   21e60:	ldr	r3, [fp, #8]
   21e64:	tst	r3, #2
   21e68:	beq	21d20 <_start@@Base+0xd6f8>
   21e6c:	mov	r3, #4
   21e70:	mov	r2, r3
   21e74:	mov	r1, #27
   21e78:	ldr	r0, [fp]
   21e7c:	bl	28e20 <flatcc_builder_table_add@@Base>
   21e80:	cmp	r0, #0
   21e84:	beq	231cc <_start@@Base+0xeba4>
   21e88:	ldr	r3, [sp, #280]	; 0x118
   21e8c:	str	r3, [r0]
   21e90:	b	21d20 <_start@@Base+0xd6f8>
   21e94:	nop			; (mov r0, r0)
   21e98:	ldrtvs	r0, [r2], -r0
   21e9c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21ea0:	strvs	r0, [r0], -r0
   21ea4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21ea8:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   21eac:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21eb0:	ldrtvs	r0, [r3], -r0
   21eb4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21eb8:	cmnvs	r2, r0, ror #4
   21ebc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   21ec0:			; <UNDEFINED> instruction: 0xffffffff
   21ec4:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   21ec8:			; <UNDEFINED> instruction: 0xffffffff
   21ecc:			; <UNDEFINED> instruction: 0x666c6577
   21ed0:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   21ed4:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   21ed8:	andvc	r0, r0, #0
   21edc:	cmnvs	pc, #28416	; 0x6f00
   21ee0:	submi	r0, r0, r0
   21ee4:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   21ee8:			; <UNDEFINED> instruction: 0xffff0000
   21eec:	andeq	r3, r5, r0, ror r0
   21ef0:	add	r3, sp, #280	; 0x118
   21ef4:	str	r3, [sp]
   21ef8:	ldr	r3, [pc, #-20]	; 21eec <_start@@Base+0xd8c4>
   21efc:	add	r3, r3, #516	; 0x204
   21f00:	mov	r2, sl
   21f04:	mov	r1, r0
   21f08:	mov	r0, fp
   21f0c:	bl	18218 <_start@@Base+0x3bf0>
   21f10:	cmp	sl, r0
   21f14:	cmpne	r8, r0
   21f18:	movne	r8, r0
   21f1c:	bne	21e50 <_start@@Base+0xd828>
   21f20:	mov	r9, sl
   21f24:	mov	sl, r0
   21f28:	b	22ed0 <_start@@Base+0xe8a8>
   21f2c:	mov	r2, sl
   21f30:	mov	r1, r0
   21f34:	mov	r0, fp
   21f38:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   21f3c:	mov	r8, r0
   21f40:	b	21d20 <_start@@Base+0xd6f8>
   21f44:	add	r3, pc, #956	; 0x3bc
   21f48:	ldrd	r2, [r3]
   21f4c:	cmp	r1, r3
   21f50:	cmpeq	r0, r2
   21f54:	beq	21f98 <_start@@Base+0xd970>
   21f58:	add	r3, pc, #944	; 0x3b0
   21f5c:	ldrd	r2, [r3]
   21f60:	cmp	r1, r3
   21f64:	cmpeq	r0, r2
   21f68:	bhi	22b10 <_start@@Base+0xe4e8>
   21f6c:	add	r3, pc, #932	; 0x3a4
   21f70:	ldrd	r2, [r3]
   21f74:	cmp	r1, r3
   21f78:	cmpeq	r0, r2
   21f7c:	beq	228d8 <_start@@Base+0xe2b0>
   21f80:	mov	r2, sl
   21f84:	mov	r1, r8
   21f88:	mov	r0, fp
   21f8c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   21f90:	mov	r8, r0
   21f94:	b	21d20 <_start@@Base+0xd6f8>
   21f98:	add	r4, r8, #8
   21f9c:	mov	r1, sl
   21fa0:	mov	r0, r4
   21fa4:	bl	14750 <_start@@Base+0x128>
   21fa8:	add	r3, pc, #880	; 0x370
   21fac:	ldrd	r2, [r3]
   21fb0:	cmp	r1, r3
   21fb4:	cmpeq	r0, r2
   21fb8:	bhi	221e4 <_start@@Base+0xdbbc>
   21fbc:	add	r3, pc, #868	; 0x364
   21fc0:	ldrd	r2, [r3]
   21fc4:	cmp	r1, r3
   21fc8:	cmpeq	r0, r2
   21fcc:	beq	21fe8 <_start@@Base+0xd9c0>
   21fd0:	mov	r2, sl
   21fd4:	mov	r1, r4
   21fd8:	mov	r0, fp
   21fdc:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   21fe0:	mov	r8, r0
   21fe4:	b	21d20 <_start@@Base+0xd6f8>
   21fe8:	mov	r3, #8
   21fec:	mov	r2, sl
   21ff0:	mov	r1, r4
   21ff4:	mov	r0, fp
   21ff8:	bl	17de0 <_start@@Base+0x37b8>
   21ffc:	mov	r5, r0
   22000:	cmp	r4, r0
   22004:	beq	220bc <_start@@Base+0xda94>
   22008:	add	r3, sp, #304	; 0x130
   2200c:	mov	r2, #0
   22010:	str	r2, [r3, #-24]!	; 0xffffffe8
   22014:	mov	r2, sl
   22018:	mov	r1, r0
   2201c:	mov	r0, fp
   22020:	bl	17a24 <_start@@Base+0x33fc>
   22024:	mov	r8, r0
   22028:	cmp	r5, r0
   2202c:	beq	22070 <_start@@Base+0xda48>
   22030:	ldr	r3, [sp, #280]	; 0x118
   22034:	cmp	r3, #0
   22038:	bne	22048 <_start@@Base+0xda20>
   2203c:	ldr	r3, [fp, #8]
   22040:	tst	r3, #2
   22044:	beq	21d20 <_start@@Base+0xd6f8>
   22048:	mov	r3, #4
   2204c:	mov	r2, r3
   22050:	mov	r1, #16
   22054:	ldr	r0, [fp]
   22058:	bl	28e20 <flatcc_builder_table_add@@Base>
   2205c:	cmp	r0, #0
   22060:	beq	220a4 <_start@@Base+0xda7c>
   22064:	ldr	r3, [sp, #280]	; 0x118
   22068:	str	r3, [r0]
   2206c:	b	21d20 <_start@@Base+0xd6f8>
   22070:	add	r3, sp, #280	; 0x118
   22074:	str	r3, [sp]
   22078:	ldr	r3, [pc, #704]	; 22340 <_start@@Base+0xdd18>
   2207c:	add	r3, r3, #528	; 0x210
   22080:	mov	r2, sl
   22084:	mov	r1, r0
   22088:	mov	r0, fp
   2208c:	bl	18b58 <_start@@Base+0x4530>
   22090:	cmp	sl, r0
   22094:	cmpne	r8, r0
   22098:	beq	220b4 <_start@@Base+0xda8c>
   2209c:	mov	r8, r0
   220a0:	b	22030 <_start@@Base+0xda08>
   220a4:	mov	r9, sl
   220a8:	mov	r0, r8
   220ac:	mov	sl, r0
   220b0:	b	22ed0 <_start@@Base+0xe8a8>
   220b4:	mov	r9, sl
   220b8:	b	220ac <_start@@Base+0xda84>
   220bc:	add	r8, r8, #16
   220c0:	mov	r1, sl
   220c4:	mov	r0, r8
   220c8:	bl	14750 <_start@@Base+0x128>
   220cc:	mov	r0, #0
   220d0:	and	r1, r1, #-16777216	; 0xff000000
   220d4:	cmp	r1, #1627389952	; 0x61000000
   220d8:	cmpeq	r0, #0
   220dc:	beq	220f8 <_start@@Base+0xdad0>
   220e0:	mov	r2, sl
   220e4:	mov	r1, r8
   220e8:	mov	r0, fp
   220ec:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   220f0:	mov	r8, r0
   220f4:	b	21d20 <_start@@Base+0xd6f8>
   220f8:	mov	r3, #1
   220fc:	mov	r2, sl
   22100:	mov	r1, r8
   22104:	mov	r0, fp
   22108:	bl	17de0 <_start@@Base+0x37b8>
   2210c:	mov	r4, r0
   22110:	cmp	r8, r0
   22114:	beq	221cc <_start@@Base+0xdba4>
   22118:	add	r3, sp, #304	; 0x130
   2211c:	mov	r2, #0
   22120:	str	r2, [r3, #-24]!	; 0xffffffe8
   22124:	mov	r2, sl
   22128:	mov	r1, r0
   2212c:	mov	r0, fp
   22130:	bl	17a24 <_start@@Base+0x33fc>
   22134:	mov	r8, r0
   22138:	cmp	r4, r0
   2213c:	beq	22180 <_start@@Base+0xdb58>
   22140:	ldr	r3, [sp, #280]	; 0x118
   22144:	cmp	r3, #0
   22148:	bne	22158 <_start@@Base+0xdb30>
   2214c:	ldr	r3, [fp, #8]
   22150:	tst	r3, #2
   22154:	beq	21d20 <_start@@Base+0xd6f8>
   22158:	mov	r3, #4
   2215c:	mov	r2, r3
   22160:	mov	r1, #20
   22164:	ldr	r0, [fp]
   22168:	bl	28e20 <flatcc_builder_table_add@@Base>
   2216c:	cmp	r0, #0
   22170:	beq	221b4 <_start@@Base+0xdb8c>
   22174:	ldr	r3, [sp, #280]	; 0x118
   22178:	str	r3, [r0]
   2217c:	b	21d20 <_start@@Base+0xd6f8>
   22180:	add	r3, sp, #280	; 0x118
   22184:	str	r3, [sp]
   22188:	ldr	r3, [pc, #432]	; 22340 <_start@@Base+0xdd18>
   2218c:	add	r3, r3, #540	; 0x21c
   22190:	mov	r2, sl
   22194:	mov	r1, r0
   22198:	mov	r0, fp
   2219c:	bl	18b58 <_start@@Base+0x4530>
   221a0:	cmp	sl, r0
   221a4:	cmpne	r8, r0
   221a8:	beq	221c4 <_start@@Base+0xdb9c>
   221ac:	mov	r8, r0
   221b0:	b	22140 <_start@@Base+0xdb18>
   221b4:	mov	r9, sl
   221b8:	mov	r0, r8
   221bc:	mov	sl, r0
   221c0:	b	22ed0 <_start@@Base+0xe8a8>
   221c4:	mov	r9, sl
   221c8:	b	221bc <_start@@Base+0xdb94>
   221cc:	mov	r2, sl
   221d0:	mov	r1, r0
   221d4:	mov	r0, fp
   221d8:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   221dc:	mov	r8, r0
   221e0:	b	21d20 <_start@@Base+0xd6f8>
   221e4:	add	r3, pc, #324	; 0x144
   221e8:	ldrd	r2, [r3]
   221ec:	cmp	r1, r3
   221f0:	cmpeq	r0, r2
   221f4:	bhi	22478 <_start@@Base+0xde50>
   221f8:	add	r3, pc, #312	; 0x138
   221fc:	ldrd	r2, [r3]
   22200:	cmp	r1, r3
   22204:	cmpeq	r0, r2
   22208:	beq	22224 <_start@@Base+0xdbfc>
   2220c:	mov	r2, sl
   22210:	mov	r1, r4
   22214:	mov	r0, fp
   22218:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   2221c:	mov	r8, r0
   22220:	b	21d20 <_start@@Base+0xd6f8>
   22224:	mov	r3, #8
   22228:	mov	r2, sl
   2222c:	mov	r1, r4
   22230:	mov	r0, fp
   22234:	bl	17de0 <_start@@Base+0x37b8>
   22238:	mov	r5, r0
   2223c:	cmp	r4, r0
   22240:	beq	22344 <_start@@Base+0xdd1c>
   22244:	add	r3, sp, #304	; 0x130
   22248:	mov	r0, #0
   2224c:	mov	r1, #0
   22250:	strd	r0, [r3, #-24]!	; 0xffffffe8
   22254:	mov	r2, sl
   22258:	mov	r1, r5
   2225c:	mov	r0, fp
   22260:	bl	17cd4 <_start@@Base+0x36ac>
   22264:	mov	r8, r0
   22268:	cmp	r5, r0
   2226c:	beq	222b8 <_start@@Base+0xdc90>
   22270:	add	r3, sp, #280	; 0x118
   22274:	ldrd	r2, [r3]
   22278:	orrs	r3, r2, r3
   2227c:	bne	2228c <_start@@Base+0xdc64>
   22280:	ldr	r3, [fp, #8]
   22284:	tst	r3, #2
   22288:	beq	21d20 <_start@@Base+0xd6f8>
   2228c:	mov	r3, #8
   22290:	mov	r2, r3
   22294:	mov	r1, #18
   22298:	ldr	r0, [fp]
   2229c:	bl	28e20 <flatcc_builder_table_add@@Base>
   222a0:	cmp	r0, #0
   222a4:	beq	222ec <_start@@Base+0xdcc4>
   222a8:	add	r3, sp, #280	; 0x118
   222ac:	ldrd	r2, [r3]
   222b0:	strd	r2, [r0]
   222b4:	b	21d20 <_start@@Base+0xd6f8>
   222b8:	add	r3, sp, #280	; 0x118
   222bc:	str	r3, [sp]
   222c0:	ldr	r3, [pc, #120]	; 22340 <_start@@Base+0xdd18>
   222c4:	add	r3, r3, #552	; 0x228
   222c8:	mov	r2, sl
   222cc:	mov	r1, r0
   222d0:	mov	r0, fp
   222d4:	bl	19084 <_start@@Base+0x4a5c>
   222d8:	cmp	sl, r0
   222dc:	cmpne	r8, r0
   222e0:	beq	222fc <_start@@Base+0xdcd4>
   222e4:	mov	r8, r0
   222e8:	b	22270 <_start@@Base+0xdc48>
   222ec:	mov	r9, sl
   222f0:	mov	r0, r8
   222f4:	mov	sl, r0
   222f8:	b	22ed0 <_start@@Base+0xe8a8>
   222fc:	mov	r9, sl
   22300:	b	222f4 <_start@@Base+0xdccc>
   22304:	nop			; (mov r0, r0)
   22308:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   2230c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   22310:	svcvs	0x00725f6e
   22314:			; <UNDEFINED> instruction: 0x76656374
   22318:	mcrvs	3, 3, r7, cr5, cr4, {3}
   2231c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   22320:			; <UNDEFINED> instruction: 0x666e7630
   22324:	teqvc	r6, #1593835520	; 0x5f000000
   22328:			; <UNDEFINED> instruction: 0x666e7631
   2232c:	teqvc	r3, #-268435451	; 0xf0000005
   22330:			; <UNDEFINED> instruction: 0x666e7630
   22334:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   22338:			; <UNDEFINED> instruction: 0x666e7631
   2233c:	teqvc	r6, #1593835520	; 0x5f000000
   22340:	andeq	r3, r5, r0, ror r0
   22344:	add	r8, r8, #16
   22348:	mov	r1, sl
   2234c:	mov	r0, r8
   22350:	bl	14750 <_start@@Base+0x128>
   22354:	mov	r0, #0
   22358:	and	r1, r1, #-16777216	; 0xff000000
   2235c:	cmp	r1, #1627389952	; 0x61000000
   22360:	cmpeq	r0, #0
   22364:	beq	22380 <_start@@Base+0xdd58>
   22368:	mov	r2, sl
   2236c:	mov	r1, r8
   22370:	mov	r0, fp
   22374:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   22378:	mov	r8, r0
   2237c:	b	21d20 <_start@@Base+0xd6f8>
   22380:	mov	r3, #1
   22384:	mov	r2, sl
   22388:	mov	r1, r8
   2238c:	mov	r0, fp
   22390:	bl	17de0 <_start@@Base+0x37b8>
   22394:	mov	r4, r0
   22398:	cmp	r8, r0
   2239c:	beq	22460 <_start@@Base+0xde38>
   223a0:	add	r3, sp, #304	; 0x130
   223a4:	mov	r0, #0
   223a8:	mov	r1, #0
   223ac:	strd	r0, [r3, #-24]!	; 0xffffffe8
   223b0:	mov	r2, sl
   223b4:	mov	r1, r4
   223b8:	mov	r0, fp
   223bc:	bl	17cd4 <_start@@Base+0x36ac>
   223c0:	mov	r8, r0
   223c4:	cmp	r4, r0
   223c8:	beq	22414 <_start@@Base+0xddec>
   223cc:	add	r3, sp, #280	; 0x118
   223d0:	ldrd	r2, [r3]
   223d4:	orrs	r3, r2, r3
   223d8:	bne	223e8 <_start@@Base+0xddc0>
   223dc:	ldr	r3, [fp, #8]
   223e0:	tst	r3, #2
   223e4:	beq	21d20 <_start@@Base+0xd6f8>
   223e8:	mov	r3, #8
   223ec:	mov	r2, r3
   223f0:	mov	r1, #22
   223f4:	ldr	r0, [fp]
   223f8:	bl	28e20 <flatcc_builder_table_add@@Base>
   223fc:	cmp	r0, #0
   22400:	beq	22448 <_start@@Base+0xde20>
   22404:	add	r3, sp, #280	; 0x118
   22408:	ldrd	r2, [r3]
   2240c:	strd	r2, [r0]
   22410:	b	21d20 <_start@@Base+0xd6f8>
   22414:	add	r3, sp, #280	; 0x118
   22418:	str	r3, [sp]
   2241c:	ldr	r3, [pc, #-228]	; 22340 <_start@@Base+0xdd18>
   22420:	add	r3, r3, #564	; 0x234
   22424:	mov	r2, sl
   22428:	mov	r1, r0
   2242c:	mov	r0, fp
   22430:	bl	19084 <_start@@Base+0x4a5c>
   22434:	cmp	sl, r0
   22438:	cmpne	r8, r0
   2243c:	beq	22458 <_start@@Base+0xde30>
   22440:	mov	r8, r0
   22444:	b	223cc <_start@@Base+0xdda4>
   22448:	mov	r9, sl
   2244c:	mov	r0, r8
   22450:	mov	sl, r0
   22454:	b	22ed0 <_start@@Base+0xe8a8>
   22458:	mov	r9, sl
   2245c:	b	22450 <_start@@Base+0xde28>
   22460:	mov	r2, sl
   22464:	mov	r1, r0
   22468:	mov	r0, fp
   2246c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   22470:	mov	r8, r0
   22474:	b	21d20 <_start@@Base+0xd6f8>
   22478:	add	r3, pc, #848	; 0x350
   2247c:	ldrd	r2, [r3]
   22480:	cmp	r1, r3
   22484:	cmpeq	r0, r2
   22488:	beq	224b8 <_start@@Base+0xde90>
   2248c:	add	r3, pc, #836	; 0x344
   22490:	ldrd	r2, [r3]
   22494:	cmp	r1, r3
   22498:	cmpeq	r0, r2
   2249c:	beq	226b4 <_start@@Base+0xe08c>
   224a0:	mov	r2, sl
   224a4:	mov	r1, r4
   224a8:	mov	r0, fp
   224ac:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   224b0:	mov	r8, r0
   224b4:	b	21d20 <_start@@Base+0xd6f8>
   224b8:	mov	r3, #8
   224bc:	mov	r2, sl
   224c0:	mov	r1, r4
   224c4:	mov	r0, fp
   224c8:	bl	17de0 <_start@@Base+0x37b8>
   224cc:	mov	r5, r0
   224d0:	cmp	r4, r0
   224d4:	beq	2258c <_start@@Base+0xdf64>
   224d8:	add	r3, sp, #304	; 0x130
   224dc:	mov	r2, #0
   224e0:	str	r2, [r3, #-24]!	; 0xffffffe8
   224e4:	mov	r2, sl
   224e8:	mov	r1, r0
   224ec:	mov	r0, fp
   224f0:	bl	17aec <_start@@Base+0x34c4>
   224f4:	mov	r8, r0
   224f8:	cmp	r5, r0
   224fc:	beq	22540 <_start@@Base+0xdf18>
   22500:	ldr	r3, [sp, #280]	; 0x118
   22504:	cmp	r3, #0
   22508:	bne	22518 <_start@@Base+0xdef0>
   2250c:	ldr	r3, [fp, #8]
   22510:	tst	r3, #2
   22514:	beq	21d20 <_start@@Base+0xd6f8>
   22518:	mov	r3, #4
   2251c:	mov	r2, r3
   22520:	mov	r1, #17
   22524:	ldr	r0, [fp]
   22528:	bl	28e20 <flatcc_builder_table_add@@Base>
   2252c:	cmp	r0, #0
   22530:	beq	22574 <_start@@Base+0xdf4c>
   22534:	ldr	r3, [sp, #280]	; 0x118
   22538:	str	r3, [r0]
   2253c:	b	21d20 <_start@@Base+0xd6f8>
   22540:	add	r3, sp, #280	; 0x118
   22544:	str	r3, [sp]
   22548:	ldr	r3, [pc, #656]	; 227e0 <_start@@Base+0xe1b8>
   2254c:	add	r3, r3, #576	; 0x240
   22550:	mov	r2, sl
   22554:	mov	r1, r0
   22558:	mov	r0, fp
   2255c:	bl	18808 <_start@@Base+0x41e0>
   22560:	cmp	sl, r0
   22564:	cmpne	r8, r0
   22568:	beq	22584 <_start@@Base+0xdf5c>
   2256c:	mov	r8, r0
   22570:	b	22500 <_start@@Base+0xded8>
   22574:	mov	r9, sl
   22578:	mov	r0, r8
   2257c:	mov	sl, r0
   22580:	b	22ed0 <_start@@Base+0xe8a8>
   22584:	mov	r9, sl
   22588:	b	2257c <_start@@Base+0xdf54>
   2258c:	add	r8, r8, #16
   22590:	mov	r1, sl
   22594:	mov	r0, r8
   22598:	bl	14750 <_start@@Base+0x128>
   2259c:	mov	r0, #0
   225a0:	and	r1, r1, #-16777216	; 0xff000000
   225a4:	cmp	r1, #1627389952	; 0x61000000
   225a8:	cmpeq	r0, #0
   225ac:	beq	225c8 <_start@@Base+0xdfa0>
   225b0:	mov	r2, sl
   225b4:	mov	r1, r8
   225b8:	mov	r0, fp
   225bc:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   225c0:	mov	r8, r0
   225c4:	b	21d20 <_start@@Base+0xd6f8>
   225c8:	mov	r3, #1
   225cc:	mov	r2, sl
   225d0:	mov	r1, r8
   225d4:	mov	r0, fp
   225d8:	bl	17de0 <_start@@Base+0x37b8>
   225dc:	mov	r4, r0
   225e0:	cmp	r8, r0
   225e4:	beq	2269c <_start@@Base+0xe074>
   225e8:	add	r3, sp, #304	; 0x130
   225ec:	mov	r2, #0
   225f0:	str	r2, [r3, #-24]!	; 0xffffffe8
   225f4:	mov	r2, sl
   225f8:	mov	r1, r0
   225fc:	mov	r0, fp
   22600:	bl	17aec <_start@@Base+0x34c4>
   22604:	mov	r8, r0
   22608:	cmp	r4, r0
   2260c:	beq	22650 <_start@@Base+0xe028>
   22610:	ldr	r3, [sp, #280]	; 0x118
   22614:	cmp	r3, #0
   22618:	bne	22628 <_start@@Base+0xe000>
   2261c:	ldr	r3, [fp, #8]
   22620:	tst	r3, #2
   22624:	beq	21d20 <_start@@Base+0xd6f8>
   22628:	mov	r3, #4
   2262c:	mov	r2, r3
   22630:	mov	r1, #21
   22634:	ldr	r0, [fp]
   22638:	bl	28e20 <flatcc_builder_table_add@@Base>
   2263c:	cmp	r0, #0
   22640:	beq	22684 <_start@@Base+0xe05c>
   22644:	ldr	r3, [sp, #280]	; 0x118
   22648:	str	r3, [r0]
   2264c:	b	21d20 <_start@@Base+0xd6f8>
   22650:	add	r3, sp, #280	; 0x118
   22654:	str	r3, [sp]
   22658:	ldr	r3, [pc, #384]	; 227e0 <_start@@Base+0xe1b8>
   2265c:	add	r3, r3, #588	; 0x24c
   22660:	mov	r2, sl
   22664:	mov	r1, r0
   22668:	mov	r0, fp
   2266c:	bl	18808 <_start@@Base+0x41e0>
   22670:	cmp	sl, r0
   22674:	cmpne	r8, r0
   22678:	beq	22694 <_start@@Base+0xe06c>
   2267c:	mov	r8, r0
   22680:	b	22610 <_start@@Base+0xdfe8>
   22684:	mov	r9, sl
   22688:	mov	r0, r8
   2268c:	mov	sl, r0
   22690:	b	22ed0 <_start@@Base+0xe8a8>
   22694:	mov	r9, sl
   22698:	b	2268c <_start@@Base+0xe064>
   2269c:	mov	r2, sl
   226a0:	mov	r1, r0
   226a4:	mov	r0, fp
   226a8:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   226ac:	mov	r8, r0
   226b0:	b	21d20 <_start@@Base+0xd6f8>
   226b4:	mov	r3, #8
   226b8:	mov	r2, sl
   226bc:	mov	r1, r4
   226c0:	mov	r0, fp
   226c4:	bl	17de0 <_start@@Base+0x37b8>
   226c8:	mov	r5, r0
   226cc:	cmp	r4, r0
   226d0:	beq	22794 <_start@@Base+0xe16c>
   226d4:	add	r3, sp, #304	; 0x130
   226d8:	mov	r0, #0
   226dc:	mov	r1, #0
   226e0:	strd	r0, [r3, #-24]!	; 0xffffffe8
   226e4:	mov	r2, sl
   226e8:	mov	r1, r5
   226ec:	mov	r0, fp
   226f0:	bl	17ba0 <_start@@Base+0x3578>
   226f4:	mov	r8, r0
   226f8:	cmp	r5, r0
   226fc:	beq	22748 <_start@@Base+0xe120>
   22700:	add	r3, sp, #280	; 0x118
   22704:	ldrd	r2, [r3]
   22708:	orrs	r3, r2, r3
   2270c:	bne	2271c <_start@@Base+0xe0f4>
   22710:	ldr	r3, [fp, #8]
   22714:	tst	r3, #2
   22718:	beq	21d20 <_start@@Base+0xd6f8>
   2271c:	mov	r3, #8
   22720:	mov	r2, r3
   22724:	mov	r1, #19
   22728:	ldr	r0, [fp]
   2272c:	bl	28e20 <flatcc_builder_table_add@@Base>
   22730:	cmp	r0, #0
   22734:	beq	2277c <_start@@Base+0xe154>
   22738:	add	r3, sp, #280	; 0x118
   2273c:	ldrd	r2, [r3]
   22740:	strd	r2, [r0]
   22744:	b	21d20 <_start@@Base+0xd6f8>
   22748:	add	r3, sp, #280	; 0x118
   2274c:	str	r3, [sp]
   22750:	ldr	r3, [pc, #136]	; 227e0 <_start@@Base+0xe1b8>
   22754:	add	r3, r3, #600	; 0x258
   22758:	mov	r2, sl
   2275c:	mov	r1, r0
   22760:	mov	r0, fp
   22764:	bl	17e5c <_start@@Base+0x3834>
   22768:	cmp	sl, r0
   2276c:	cmpne	r8, r0
   22770:	beq	2278c <_start@@Base+0xe164>
   22774:	mov	r8, r0
   22778:	b	22700 <_start@@Base+0xe0d8>
   2277c:	mov	r9, sl
   22780:	mov	r0, r8
   22784:	mov	sl, r0
   22788:	b	22ed0 <_start@@Base+0xe8a8>
   2278c:	mov	r9, sl
   22790:	b	22784 <_start@@Base+0xe15c>
   22794:	add	r8, r8, #16
   22798:	mov	r1, sl
   2279c:	mov	r0, r8
   227a0:	bl	14750 <_start@@Base+0x128>
   227a4:	mov	r0, #0
   227a8:	and	r1, r1, #-16777216	; 0xff000000
   227ac:	cmp	r1, #1627389952	; 0x61000000
   227b0:	cmpeq	r0, #0
   227b4:	beq	227e4 <_start@@Base+0xe1bc>
   227b8:	mov	r2, sl
   227bc:	mov	r1, r8
   227c0:	mov	r0, fp
   227c4:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   227c8:	mov	r8, r0
   227cc:	b	21d20 <_start@@Base+0xd6f8>
   227d0:			; <UNDEFINED> instruction: 0x666e7631
   227d4:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   227d8:			; <UNDEFINED> instruction: 0x666e7631
   227dc:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   227e0:	andeq	r3, r5, r0, ror r0
   227e4:	mov	r3, #1
   227e8:	mov	r2, sl
   227ec:	mov	r1, r8
   227f0:	mov	r0, fp
   227f4:	bl	17de0 <_start@@Base+0x37b8>
   227f8:	mov	r4, r0
   227fc:	cmp	r8, r0
   22800:	beq	228c0 <_start@@Base+0xe298>
   22804:	add	r3, sp, #304	; 0x130
   22808:	mov	r0, #0
   2280c:	mov	r1, #0
   22810:	strd	r0, [r3, #-24]!	; 0xffffffe8
   22814:	mov	r2, sl
   22818:	mov	r1, r4
   2281c:	mov	r0, fp
   22820:	bl	17ba0 <_start@@Base+0x3578>
   22824:	mov	r8, r0
   22828:	cmp	r4, r0
   2282c:	beq	22878 <_start@@Base+0xe250>
   22830:	add	r3, sp, #280	; 0x118
   22834:	ldrd	r2, [r3]
   22838:	orrs	r3, r2, r3
   2283c:	bne	2284c <_start@@Base+0xe224>
   22840:	ldr	r3, [fp, #8]
   22844:	tst	r3, #2
   22848:	beq	21d20 <_start@@Base+0xd6f8>
   2284c:	mov	r3, #8
   22850:	mov	r2, r3
   22854:	mov	r1, #23
   22858:	ldr	r0, [fp]
   2285c:	bl	28e20 <flatcc_builder_table_add@@Base>
   22860:	cmp	r0, #0
   22864:	beq	228a8 <_start@@Base+0xe280>
   22868:	add	r3, sp, #280	; 0x118
   2286c:	ldrd	r2, [r3]
   22870:	strd	r2, [r0]
   22874:	b	21d20 <_start@@Base+0xd6f8>
   22878:	add	r3, sp, #280	; 0x118
   2287c:	str	r3, [sp]
   22880:	ldr	r3, [sp, #248]	; 0xf8
   22884:	mov	r2, sl
   22888:	mov	r1, r0
   2288c:	mov	r0, fp
   22890:	bl	17e5c <_start@@Base+0x3834>
   22894:	cmp	sl, r0
   22898:	cmpne	r8, r0
   2289c:	beq	228b8 <_start@@Base+0xe290>
   228a0:	mov	r8, r0
   228a4:	b	22830 <_start@@Base+0xe208>
   228a8:	mov	r9, sl
   228ac:	mov	r0, r8
   228b0:	mov	sl, r0
   228b4:	b	22ed0 <_start@@Base+0xe8a8>
   228b8:	mov	r9, sl
   228bc:	b	228b0 <_start@@Base+0xe288>
   228c0:	mov	r2, sl
   228c4:	mov	r1, r0
   228c8:	mov	r0, fp
   228cc:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   228d0:	mov	r8, r0
   228d4:	b	21d20 <_start@@Base+0xd6f8>
   228d8:	add	r4, r8, #8
   228dc:	mov	r1, sl
   228e0:	mov	r0, r4
   228e4:	bl	14750 <_start@@Base+0x128>
   228e8:	add	r3, pc, #1000	; 0x3e8
   228ec:	ldrd	r2, [r3]
   228f0:	cmp	r1, r3
   228f4:	cmpeq	r0, r2
   228f8:	beq	22914 <_start@@Base+0xe2ec>
   228fc:	mov	r2, sl
   22900:	mov	r1, r4
   22904:	mov	r0, fp
   22908:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   2290c:	mov	r8, r0
   22910:	b	21d20 <_start@@Base+0xd6f8>
   22914:	add	r4, r8, #16
   22918:	mov	r1, sl
   2291c:	mov	r0, r4
   22920:	bl	14750 <_start@@Base+0x128>
   22924:	mov	r0, #0
   22928:	add	r3, pc, #944	; 0x3b0
   2292c:	ldrd	r2, [r3]
   22930:	cmp	r1, r3
   22934:	cmpeq	r0, r2
   22938:	beq	22954 <_start@@Base+0xe32c>
   2293c:	mov	r2, sl
   22940:	mov	r1, r4
   22944:	mov	r0, fp
   22948:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   2294c:	mov	r8, r0
   22950:	b	21d20 <_start@@Base+0xd6f8>
   22954:	mov	r3, #4
   22958:	mov	r2, sl
   2295c:	mov	r1, r4
   22960:	mov	r0, fp
   22964:	bl	17de0 <_start@@Base+0x37b8>
   22968:	mov	r8, r0
   2296c:	cmp	r4, r0
   22970:	beq	22af8 <_start@@Base+0xe4d0>
   22974:	cmp	sl, r0
   22978:	beq	22988 <_start@@Base+0xe360>
   2297c:	ldrb	r3, [r0]
   22980:	cmp	r3, #91	; 0x5b
   22984:	beq	22a00 <_start@@Base+0xe3d8>
   22988:	mov	r3, #0
   2298c:	mov	r2, r3
   22990:	mov	r1, r3
   22994:	ldr	r0, [fp]
   22998:	bl	265f8 <flatcc_builder_start_buffer@@Base>
   2299c:	cmp	r0, #0
   229a0:	bne	231f0 <_start@@Base+0xebc8>
   229a4:	add	r3, sp, #296	; 0x128
   229a8:	mov	r2, sl
   229ac:	mov	r1, r8
   229b0:	mov	r0, fp
   229b4:	bl	1e458 <_start@@Base+0x9e30>
   229b8:	mov	r8, r0
   229bc:	ldr	r1, [sp, #296]	; 0x128
   229c0:	cmp	r1, #0
   229c4:	beq	231fc <_start@@Base+0xebd4>
   229c8:	ldr	r0, [fp]
   229cc:	bl	266b0 <flatcc_builder_end_buffer@@Base>
   229d0:	str	r0, [sp, #296]	; 0x128
   229d4:	ldr	r3, [sp, #296]	; 0x128
   229d8:	cmp	r3, #0
   229dc:	beq	23208 <_start@@Base+0xebe0>
   229e0:	mov	r1, #13
   229e4:	ldr	r0, [fp]
   229e8:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   229ec:	cmp	r0, #0
   229f0:	beq	23214 <_start@@Base+0xebec>
   229f4:	ldr	r3, [sp, #296]	; 0x128
   229f8:	str	r3, [r0]
   229fc:	b	21d20 <_start@@Base+0xd6f8>
   22a00:	mvn	r3, #0
   22a04:	mov	r2, #1
   22a08:	mov	r1, r2
   22a0c:	ldr	r0, [fp]
   22a10:	bl	27174 <flatcc_builder_start_vector@@Base>
   22a14:	cmp	r0, #0
   22a18:	bne	231d8 <_start@@Base+0xebb0>
   22a1c:	add	r3, sp, #300	; 0x12c
   22a20:	mov	r2, sl
   22a24:	mov	r1, r8
   22a28:	mov	r0, fp
   22a2c:	bl	1dcc0 <_start@@Base+0x9698>
   22a30:	mov	r8, r0
   22a34:	ldr	r3, [sp, #300]	; 0x12c
   22a38:	cmp	r3, #0
   22a3c:	beq	22ae8 <_start@@Base+0xe4c0>
   22a40:	mov	r5, #0
   22a44:	mov	r9, #1
   22a48:	add	r6, sp, #280	; 0x118
   22a4c:	ldr	r3, [pc, #692]	; 22d08 <_start@@Base+0xe6e0>
   22a50:	add	r7, r3, #624	; 0x270
   22a54:	b	22a84 <_start@@Base+0xe45c>
   22a58:	ldrb	r3, [sp, #280]	; 0x118
   22a5c:	strb	r3, [r4]
   22a60:	add	r3, sp, #300	; 0x12c
   22a64:	mov	r2, sl
   22a68:	mov	r1, r0
   22a6c:	mov	r0, fp
   22a70:	bl	17fe0 <_start@@Base+0x39b8>
   22a74:	mov	r8, r0
   22a78:	ldr	r3, [sp, #300]	; 0x12c
   22a7c:	cmp	r3, #0
   22a80:	beq	22ae8 <_start@@Base+0xe4c0>
   22a84:	strb	r5, [sp, #280]	; 0x118
   22a88:	mov	r1, r9
   22a8c:	ldr	r0, [fp]
   22a90:	bl	2696c <flatcc_builder_extend_vector@@Base>
   22a94:	subs	r4, r0, #0
   22a98:	beq	231e4 <_start@@Base+0xebbc>
   22a9c:	mov	r3, r6
   22aa0:	mov	r2, sl
   22aa4:	mov	r1, r8
   22aa8:	mov	r0, fp
   22aac:	bl	17c28 <_start@@Base+0x3600>
   22ab0:	cmp	r0, r8
   22ab4:	bne	22a58 <_start@@Base+0xe430>
   22ab8:	str	r6, [sp]
   22abc:	mov	r3, r7
   22ac0:	mov	r2, sl
   22ac4:	mov	r1, r8
   22ac8:	mov	r0, fp
   22acc:	bl	18668 <_start@@Base+0x4040>
   22ad0:	cmp	sl, r0
   22ad4:	cmpne	r0, r8
   22ad8:	bne	22a58 <_start@@Base+0xe430>
   22adc:	mov	r9, sl
   22ae0:	mov	sl, r0
   22ae4:	b	22ed0 <_start@@Base+0xe8a8>
   22ae8:	ldr	r0, [fp]
   22aec:	bl	28184 <flatcc_builder_end_vector@@Base>
   22af0:	str	r0, [sp, #296]	; 0x128
   22af4:	b	229d4 <_start@@Base+0xe3ac>
   22af8:	mov	r2, sl
   22afc:	mov	r1, r0
   22b00:	mov	r0, fp
   22b04:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   22b08:	mov	r8, r0
   22b0c:	b	21d20 <_start@@Base+0xd6f8>
   22b10:	add	r3, pc, #464	; 0x1d0
   22b14:	ldrd	r2, [r3]
   22b18:	cmp	r1, r3
   22b1c:	cmpeq	r0, r2
   22b20:	beq	22b3c <_start@@Base+0xe514>
   22b24:	mov	r2, sl
   22b28:	mov	r1, r8
   22b2c:	mov	r0, fp
   22b30:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   22b34:	mov	r8, r0
   22b38:	b	21d20 <_start@@Base+0xd6f8>
   22b3c:	add	r4, r8, #8
   22b40:	mov	r1, sl
   22b44:	mov	r0, r4
   22b48:	bl	14750 <_start@@Base+0x128>
   22b4c:	add	r3, pc, #412	; 0x19c
   22b50:	ldrd	r2, [r3]
   22b54:	cmp	r1, r3
   22b58:	cmpeq	r0, r2
   22b5c:	beq	22b90 <_start@@Base+0xe568>
   22b60:	bic	r0, r0, #255	; 0xff
   22b64:	add	r3, pc, #396	; 0x18c
   22b68:	ldrd	r2, [r3]
   22b6c:	cmp	r1, r3
   22b70:	cmpeq	r0, r2
   22b74:	beq	22d58 <_start@@Base+0xe730>
   22b78:	mov	r2, sl
   22b7c:	mov	r1, r4
   22b80:	mov	r0, fp
   22b84:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   22b88:	mov	r8, r0
   22b8c:	b	21d20 <_start@@Base+0xd6f8>
   22b90:	add	r4, r8, #16
   22b94:	mov	r1, sl
   22b98:	mov	r0, r4
   22b9c:	bl	14750 <_start@@Base+0x128>
   22ba0:	mov	r0, #0
   22ba4:	and	r1, r1, #-16777216	; 0xff000000
   22ba8:	cmp	r1, #1929379840	; 0x73000000
   22bac:	cmpeq	r0, #0
   22bb0:	beq	22bcc <_start@@Base+0xe5a4>
   22bb4:	mov	r2, sl
   22bb8:	mov	r1, r4
   22bbc:	mov	r0, fp
   22bc0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   22bc4:	mov	r8, r0
   22bc8:	b	21d20 <_start@@Base+0xd6f8>
   22bcc:	mov	r3, #1
   22bd0:	mov	r2, sl
   22bd4:	mov	r1, r4
   22bd8:	mov	r0, fp
   22bdc:	bl	17de0 <_start@@Base+0x37b8>
   22be0:	mov	r8, r0
   22be4:	cmp	r4, r0
   22be8:	beq	22d40 <_start@@Base+0xe718>
   22bec:	mvn	r3, #-536870912	; 0xe0000000
   22bf0:	mov	r2, #8
   22bf4:	mov	r1, r2
   22bf8:	ldr	r0, [fp]
   22bfc:	bl	27174 <flatcc_builder_start_vector@@Base>
   22c00:	cmp	r0, #0
   22c04:	bne	23220 <_start@@Base+0xebf8>
   22c08:	add	r3, sp, #300	; 0x12c
   22c0c:	mov	r2, sl
   22c10:	mov	r1, r8
   22c14:	mov	r0, fp
   22c18:	bl	1dcc0 <_start@@Base+0x9698>
   22c1c:	mov	r8, r0
   22c20:	ldr	r3, [sp, #300]	; 0x12c
   22c24:	cmp	r3, #0
   22c28:	beq	22d0c <_start@@Base+0xe6e4>
   22c2c:	vldr	d8, [pc, #204]	; 22d00 <_start@@Base+0xe6d8>
   22c30:	mov	r6, #1
   22c34:	add	r5, sp, #280	; 0x118
   22c38:	ldr	r3, [pc, #200]	; 22d08 <_start@@Base+0xe6e0>
   22c3c:	add	r7, r3, #636	; 0x27c
   22c40:	b	22c74 <_start@@Base+0xe64c>
   22c44:	add	r3, sp, #280	; 0x118
   22c48:	ldrd	r2, [r3]
   22c4c:	strd	r2, [r4]
   22c50:	add	r3, sp, #300	; 0x12c
   22c54:	mov	r2, sl
   22c58:	mov	r1, r0
   22c5c:	mov	r0, fp
   22c60:	bl	17fe0 <_start@@Base+0x39b8>
   22c64:	mov	r8, r0
   22c68:	ldr	r3, [sp, #300]	; 0x12c
   22c6c:	cmp	r3, #0
   22c70:	beq	22d0c <_start@@Base+0xe6e4>
   22c74:	vstr	d8, [sp, #280]	; 0x118
   22c78:	mov	r1, r6
   22c7c:	ldr	r0, [fp]
   22c80:	bl	2696c <flatcc_builder_extend_vector@@Base>
   22c84:	subs	r4, r0, #0
   22c88:	beq	2322c <_start@@Base+0xec04>
   22c8c:	mov	r3, r5
   22c90:	mov	r2, sl
   22c94:	mov	r1, r8
   22c98:	mov	r0, fp
   22c9c:	bl	2d468 <flatcc_json_parser_double@@Base>
   22ca0:	cmp	r0, r8
   22ca4:	bne	22c44 <_start@@Base+0xe61c>
   22ca8:	str	r5, [sp]
   22cac:	mov	r3, r7
   22cb0:	mov	r2, sl
   22cb4:	mov	r1, r8
   22cb8:	mov	r0, fp
   22cbc:	bl	18378 <_start@@Base+0x3d50>
   22cc0:	cmp	sl, r0
   22cc4:	cmpne	r0, r8
   22cc8:	bne	22c44 <_start@@Base+0xe61c>
   22ccc:	mov	r9, sl
   22cd0:	mov	sl, r0
   22cd4:	b	22ed0 <_start@@Base+0xe8a8>
   22cd8:	cmnvs	r4, r5, ror r2
   22cdc:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   22ce0:	andeq	r0, r0, r0
   22ce4:			; <UNDEFINED> instruction: 0x66666572
   22ce8:	svcvs	0x00725f6f
   22cec:			; <UNDEFINED> instruction: 0x76656374
   22cf0:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   22cf4:	ldrbvs	r6, [pc], -pc, ror #8
   22cf8:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   22cfc:	ldrbvs	r6, [pc], -pc, ror #24
	...
   22d08:	andeq	r3, r5, r0, ror r0
   22d0c:	ldr	r0, [fp]
   22d10:	bl	28184 <flatcc_builder_end_vector@@Base>
   22d14:	str	r0, [sp, #296]	; 0x128
   22d18:	cmp	r0, #0
   22d1c:	beq	23238 <_start@@Base+0xec10>
   22d20:	mov	r1, #33	; 0x21
   22d24:	ldr	r0, [fp]
   22d28:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   22d2c:	cmp	r0, #0
   22d30:	beq	23244 <_start@@Base+0xec1c>
   22d34:	ldr	r3, [sp, #296]	; 0x128
   22d38:	str	r3, [r0]
   22d3c:	b	21d20 <_start@@Base+0xd6f8>
   22d40:	mov	r2, sl
   22d44:	mov	r1, r0
   22d48:	mov	r0, fp
   22d4c:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   22d50:	mov	r8, r0
   22d54:	b	21d20 <_start@@Base+0xd6f8>
   22d58:	mov	r3, #7
   22d5c:	mov	r2, sl
   22d60:	mov	r1, r4
   22d64:	mov	r0, fp
   22d68:	bl	17de0 <_start@@Base+0x37b8>
   22d6c:	mov	r8, r0
   22d70:	cmp	r4, r0
   22d74:	beq	22ea4 <_start@@Base+0xe87c>
   22d78:	mvn	r3, #-536870912	; 0xe0000000
   22d7c:	mov	r2, #8
   22d80:	mov	r1, r2
   22d84:	ldr	r0, [fp]
   22d88:	bl	27174 <flatcc_builder_start_vector@@Base>
   22d8c:	cmp	r0, #0
   22d90:	bne	23250 <_start@@Base+0xec28>
   22d94:	add	r3, sp, #300	; 0x12c
   22d98:	mov	r2, sl
   22d9c:	mov	r1, r8
   22da0:	mov	r0, fp
   22da4:	bl	1dcc0 <_start@@Base+0x9698>
   22da8:	mov	r8, r0
   22dac:	ldr	r3, [sp, #300]	; 0x12c
   22db0:	cmp	r3, #0
   22db4:	beq	22e70 <_start@@Base+0xe848>
   22db8:	mov	r4, #0
   22dbc:	mov	r5, #0
   22dc0:	mov	r9, #1
   22dc4:	add	r7, sp, #280	; 0x118
   22dc8:	ldr	r3, [pc, #-200]	; 22d08 <_start@@Base+0xe6e0>
   22dcc:	add	r3, r3, #648	; 0x288
   22dd0:	str	r3, [sp, #20]
   22dd4:	b	22e08 <_start@@Base+0xe7e0>
   22dd8:	add	r3, sp, #280	; 0x118
   22ddc:	ldrd	r2, [r3]
   22de0:	strd	r2, [r6]
   22de4:	add	r3, sp, #300	; 0x12c
   22de8:	mov	r2, sl
   22dec:	mov	r1, r0
   22df0:	mov	r0, fp
   22df4:	bl	17fe0 <_start@@Base+0x39b8>
   22df8:	mov	r8, r0
   22dfc:	ldr	r3, [sp, #300]	; 0x12c
   22e00:	cmp	r3, #0
   22e04:	beq	22e70 <_start@@Base+0xe848>
   22e08:	add	r3, sp, #280	; 0x118
   22e0c:	strd	r4, [r3]
   22e10:	mov	r1, r9
   22e14:	ldr	r0, [fp]
   22e18:	bl	2696c <flatcc_builder_extend_vector@@Base>
   22e1c:	subs	r6, r0, #0
   22e20:	beq	2325c <_start@@Base+0xec34>
   22e24:	mov	r3, r7
   22e28:	mov	r2, sl
   22e2c:	mov	r1, r8
   22e30:	mov	r0, fp
   22e34:	bl	17cd4 <_start@@Base+0x36ac>
   22e38:	cmp	r0, r8
   22e3c:	bne	22dd8 <_start@@Base+0xe7b0>
   22e40:	str	r7, [sp]
   22e44:	ldr	r3, [sp, #20]
   22e48:	mov	r2, sl
   22e4c:	mov	r1, r8
   22e50:	mov	r0, fp
   22e54:	bl	19084 <_start@@Base+0x4a5c>
   22e58:	cmp	sl, r0
   22e5c:	cmpne	r0, r8
   22e60:	bne	22dd8 <_start@@Base+0xe7b0>
   22e64:	mov	r9, sl
   22e68:	mov	sl, r0
   22e6c:	b	22ed0 <_start@@Base+0xe8a8>
   22e70:	ldr	r0, [fp]
   22e74:	bl	28184 <flatcc_builder_end_vector@@Base>
   22e78:	str	r0, [sp, #296]	; 0x128
   22e7c:	cmp	r0, #0
   22e80:	beq	23268 <_start@@Base+0xec40>
   22e84:	mov	r1, #32
   22e88:	ldr	r0, [fp]
   22e8c:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   22e90:	cmp	r0, #0
   22e94:	beq	23274 <_start@@Base+0xec4c>
   22e98:	ldr	r3, [sp, #296]	; 0x128
   22e9c:	str	r3, [r0]
   22ea0:	b	21d20 <_start@@Base+0xd6f8>
   22ea4:	mov	r2, sl
   22ea8:	mov	r1, r0
   22eac:	mov	r0, fp
   22eb0:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   22eb4:	mov	r8, r0
   22eb8:	b	21d20 <_start@@Base+0xd6f8>
   22ebc:	mov	r9, sl
   22ec0:	mov	sl, r0
   22ec4:	ldr	r3, [fp, #20]
   22ec8:	cmp	r3, #0
   22ecc:	beq	22ef0 <_start@@Base+0xe8c8>
   22ed0:	mov	r3, #33	; 0x21
   22ed4:	mov	r2, r9
   22ed8:	mov	r1, sl
   22edc:	mov	r0, fp
   22ee0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   22ee4:	add	sp, sp, #308	; 0x134
   22ee8:	vpop	{d8-d9}
   22eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ef0:	mov	r1, #3
   22ef4:	ldr	r0, [fp]
   22ef8:	bl	27cb0 <flatcc_builder_check_required_field@@Base>
   22efc:	cmp	r0, #0
   22f00:	bne	22f20 <_start@@Base+0xe8f8>
   22f04:	mov	r3, #29
   22f08:	mov	r2, r9
   22f0c:	mov	r1, sl
   22f10:	mov	r0, fp
   22f14:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   22f18:	mov	sl, r0
   22f1c:	b	22ed0 <_start@@Base+0xe8a8>
   22f20:	ldr	r3, [sp, #292]	; 0x124
   22f24:	mov	r2, r9
   22f28:	mov	r1, sl
   22f2c:	mov	r0, fp
   22f30:	bl	2ed0c <flatcc_json_parser_finalize_unions@@Base>
   22f34:	mov	sl, r0
   22f38:	ldr	r0, [fp]
   22f3c:	bl	27e74 <flatcc_builder_end_table@@Base>
   22f40:	ldr	r3, [sp, #192]	; 0xc0
   22f44:	str	r0, [r3]
   22f48:	cmp	r0, #0
   22f4c:	beq	22ed0 <_start@@Base+0xe8a8>
   22f50:	mov	r0, sl
   22f54:	b	22ee4 <_start@@Base+0xe8bc>
   22f58:	mov	r9, sl
   22f5c:	mov	sl, r4
   22f60:	b	22ed0 <_start@@Base+0xe8a8>
   22f64:	mov	r9, sl
   22f68:	mov	sl, r4
   22f6c:	b	22ed0 <_start@@Base+0xe8a8>
   22f70:	mov	r9, sl
   22f74:	mov	sl, r6
   22f78:	b	22ed0 <_start@@Base+0xe8a8>
   22f7c:	mov	r9, sl
   22f80:	mov	sl, r6
   22f84:	b	22ed0 <_start@@Base+0xe8a8>
   22f88:	mov	r9, sl
   22f8c:	mov	sl, r0
   22f90:	b	22ed0 <_start@@Base+0xe8a8>
   22f94:	mov	r9, sl
   22f98:	mov	sl, r8
   22f9c:	b	22ed0 <_start@@Base+0xe8a8>
   22fa0:	mov	r9, sl
   22fa4:	mov	sl, r8
   22fa8:	b	22ed0 <_start@@Base+0xe8a8>
   22fac:	mov	r9, sl
   22fb0:	mov	sl, r8
   22fb4:	b	22ed0 <_start@@Base+0xe8a8>
   22fb8:	mov	r9, sl
   22fbc:	mov	sl, r8
   22fc0:	b	22ed0 <_start@@Base+0xe8a8>
   22fc4:	mov	r9, sl
   22fc8:	mov	sl, r8
   22fcc:	b	22ed0 <_start@@Base+0xe8a8>
   22fd0:	mov	r9, sl
   22fd4:	mov	sl, r8
   22fd8:	b	22ed0 <_start@@Base+0xe8a8>
   22fdc:	mov	r9, sl
   22fe0:	mov	sl, r8
   22fe4:	b	22ed0 <_start@@Base+0xe8a8>
   22fe8:	mov	r9, sl
   22fec:	mov	sl, r8
   22ff0:	b	22ed0 <_start@@Base+0xe8a8>
   22ff4:	mov	r9, sl
   22ff8:	mov	sl, r8
   22ffc:	b	22ed0 <_start@@Base+0xe8a8>
   23000:	mov	r9, sl
   23004:	mov	sl, r0
   23008:	b	22ed0 <_start@@Base+0xe8a8>
   2300c:	mov	r9, sl
   23010:	mov	sl, r8
   23014:	b	22ed0 <_start@@Base+0xe8a8>
   23018:	mov	r9, sl
   2301c:	mov	sl, r8
   23020:	b	22ed0 <_start@@Base+0xe8a8>
   23024:	mov	r9, sl
   23028:	mov	sl, r8
   2302c:	b	22ed0 <_start@@Base+0xe8a8>
   23030:	mov	r9, sl
   23034:	mov	sl, r8
   23038:	b	22ed0 <_start@@Base+0xe8a8>
   2303c:	mov	r9, sl
   23040:	mov	sl, r8
   23044:	b	22ed0 <_start@@Base+0xe8a8>
   23048:	mov	r9, sl
   2304c:	mov	sl, r8
   23050:	b	22ed0 <_start@@Base+0xe8a8>
   23054:	mov	r9, sl
   23058:	mov	sl, r8
   2305c:	b	22ed0 <_start@@Base+0xe8a8>
   23060:	mov	r9, sl
   23064:	mov	sl, r8
   23068:	b	22ed0 <_start@@Base+0xe8a8>
   2306c:	mov	r9, sl
   23070:	mov	sl, r8
   23074:	b	22ed0 <_start@@Base+0xe8a8>
   23078:	mov	r9, sl
   2307c:	mov	sl, r8
   23080:	b	22ed0 <_start@@Base+0xe8a8>
   23084:	mov	r9, sl
   23088:	mov	sl, r8
   2308c:	b	22ed0 <_start@@Base+0xe8a8>
   23090:	mov	r9, sl
   23094:	mov	sl, r8
   23098:	b	22ed0 <_start@@Base+0xe8a8>
   2309c:	mov	r9, sl
   230a0:	mov	sl, r8
   230a4:	b	22ed0 <_start@@Base+0xe8a8>
   230a8:	mov	r9, sl
   230ac:	mov	sl, r8
   230b0:	b	22ed0 <_start@@Base+0xe8a8>
   230b4:	ldr	fp, [sp, #20]
   230b8:	mov	r9, sl
   230bc:	mov	sl, r4
   230c0:	b	22ed0 <_start@@Base+0xe8a8>
   230c4:	mov	r9, sl
   230c8:	mov	sl, r8
   230cc:	b	22ed0 <_start@@Base+0xe8a8>
   230d0:	mov	r9, sl
   230d4:	mov	sl, r8
   230d8:	b	22ed0 <_start@@Base+0xe8a8>
   230dc:	mov	r9, sl
   230e0:	mov	sl, r8
   230e4:	b	22ed0 <_start@@Base+0xe8a8>
   230e8:	mov	r9, sl
   230ec:	mov	sl, r0
   230f0:	b	22ed0 <_start@@Base+0xe8a8>
   230f4:	mov	r9, sl
   230f8:	mov	sl, r8
   230fc:	b	22ed0 <_start@@Base+0xe8a8>
   23100:	mov	r9, sl
   23104:	mov	sl, r8
   23108:	b	22ed0 <_start@@Base+0xe8a8>
   2310c:	mov	r9, sl
   23110:	mov	sl, r8
   23114:	b	22ed0 <_start@@Base+0xe8a8>
   23118:	mov	r9, sl
   2311c:	mov	sl, r8
   23120:	b	22ed0 <_start@@Base+0xe8a8>
   23124:	mov	r9, sl
   23128:	mov	sl, r0
   2312c:	b	22ed0 <_start@@Base+0xe8a8>
   23130:	mov	r9, sl
   23134:	mov	sl, r8
   23138:	b	22ed0 <_start@@Base+0xe8a8>
   2313c:	mov	r9, sl
   23140:	mov	sl, r8
   23144:	b	22ed0 <_start@@Base+0xe8a8>
   23148:	mov	r9, sl
   2314c:	mov	sl, r8
   23150:	b	22ed0 <_start@@Base+0xe8a8>
   23154:	mov	r9, sl
   23158:	mov	sl, r8
   2315c:	b	22ed0 <_start@@Base+0xe8a8>
   23160:	mov	r9, sl
   23164:	mov	sl, r0
   23168:	b	22ed0 <_start@@Base+0xe8a8>
   2316c:	mov	r9, sl
   23170:	mov	sl, r8
   23174:	b	22ed0 <_start@@Base+0xe8a8>
   23178:	mov	r9, sl
   2317c:	mov	sl, r8
   23180:	b	22ed0 <_start@@Base+0xe8a8>
   23184:	mov	r9, sl
   23188:	mov	sl, r8
   2318c:	b	22ed0 <_start@@Base+0xe8a8>
   23190:	mov	r9, sl
   23194:	mov	sl, r8
   23198:	b	22ed0 <_start@@Base+0xe8a8>
   2319c:	mov	r9, sl
   231a0:	mov	sl, r8
   231a4:	b	22ed0 <_start@@Base+0xe8a8>
   231a8:	mov	r9, sl
   231ac:	mov	sl, r8
   231b0:	b	22ed0 <_start@@Base+0xe8a8>
   231b4:	mov	r9, sl
   231b8:	mov	sl, r8
   231bc:	b	22ed0 <_start@@Base+0xe8a8>
   231c0:	mov	r9, sl
   231c4:	mov	sl, r8
   231c8:	b	22ed0 <_start@@Base+0xe8a8>
   231cc:	mov	r9, sl
   231d0:	mov	sl, r8
   231d4:	b	22ed0 <_start@@Base+0xe8a8>
   231d8:	mov	r9, sl
   231dc:	mov	sl, r8
   231e0:	b	22ed0 <_start@@Base+0xe8a8>
   231e4:	mov	r9, sl
   231e8:	mov	sl, r8
   231ec:	b	22ed0 <_start@@Base+0xe8a8>
   231f0:	mov	r9, sl
   231f4:	mov	sl, r8
   231f8:	b	22ed0 <_start@@Base+0xe8a8>
   231fc:	mov	r9, sl
   23200:	mov	sl, r0
   23204:	b	22ed0 <_start@@Base+0xe8a8>
   23208:	mov	r9, sl
   2320c:	mov	sl, r8
   23210:	b	22ed0 <_start@@Base+0xe8a8>
   23214:	mov	r9, sl
   23218:	mov	sl, r8
   2321c:	b	22ed0 <_start@@Base+0xe8a8>
   23220:	mov	r9, sl
   23224:	mov	sl, r8
   23228:	b	22ed0 <_start@@Base+0xe8a8>
   2322c:	mov	r9, sl
   23230:	mov	sl, r8
   23234:	b	22ed0 <_start@@Base+0xe8a8>
   23238:	mov	r9, sl
   2323c:	mov	sl, r8
   23240:	b	22ed0 <_start@@Base+0xe8a8>
   23244:	mov	r9, sl
   23248:	mov	sl, r8
   2324c:	b	22ed0 <_start@@Base+0xe8a8>
   23250:	mov	r9, sl
   23254:	mov	sl, r8
   23258:	b	22ed0 <_start@@Base+0xe8a8>
   2325c:	mov	r9, sl
   23260:	mov	sl, r8
   23264:	b	22ed0 <_start@@Base+0xe8a8>
   23268:	mov	r9, sl
   2326c:	mov	sl, r8
   23270:	b	22ed0 <_start@@Base+0xe8a8>
   23274:	mov	r9, sl
   23278:	mov	sl, r8
   2327c:	b	22ed0 <_start@@Base+0xe8a8>
   23280:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23284:	sub	sp, sp, #92	; 0x5c
   23288:	mov	sl, r0
   2328c:	mov	r4, r1
   23290:	mov	r5, r2
   23294:	mov	r2, #0
   23298:	ldr	r1, [sp, #128]	; 0x80
   2329c:	str	r2, [r1]
   232a0:	cmp	r3, #4
   232a4:	ldrls	pc, [pc, r3, lsl #2]
   232a8:	b	23d28 <_start@@Base+0xf700>
   232ac:	andeq	r3, r2, r0, asr #5
   232b0:	andeq	r3, r2, r0, lsl #6
   232b4:	andeq	r3, r2, r4, lsr r3
   232b8:	andeq	r3, r2, r8, lsr #24
   232bc:	andeq	r3, r2, r4, lsl sp
   232c0:	sub	r3, r5, r4
   232c4:	cmp	r3, #3
   232c8:	ble	232e8 <_start@@Base+0xecc0>
   232cc:	mov	r2, #4
   232d0:	ldr	r1, [pc, #1408]	; 23858 <_start@@Base+0xf230>
   232d4:	mov	r0, r4
   232d8:	bl	14558 <memcmp@plt>
   232dc:	cmp	r0, #0
   232e0:	addeq	r0, r4, #4
   232e4:	beq	2332c <_start@@Base+0xed04>
   232e8:	mov	r3, #26
   232ec:	mov	r2, r5
   232f0:	mov	r1, r4
   232f4:	mov	r0, sl
   232f8:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   232fc:	b	2332c <_start@@Base+0xed04>
   23300:	ldr	r3, [sp, #128]	; 0x80
   23304:	mov	r2, r5
   23308:	mov	r1, r4
   2330c:	bl	1e458 <_start@@Base+0x9e30>
   23310:	ldr	r3, [sl, #20]
   23314:	cmp	r3, #0
   23318:	bne	2332c <_start@@Base+0xed04>
   2331c:	ldr	r3, [sp, #128]	; 0x80
   23320:	ldr	r3, [r3]
   23324:	cmp	r3, #0
   23328:	beq	23d58 <_start@@Base+0xf730>
   2332c:	add	sp, sp, #92	; 0x5c
   23330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23334:	mov	r1, #4
   23338:	ldr	r0, [r0]
   2333c:	bl	27424 <flatcc_builder_start_table@@Base>
   23340:	cmp	r0, #0
   23344:	bne	23bd0 <_start@@Base+0xf5a8>
   23348:	add	r3, sp, #72	; 0x48
   2334c:	mov	r2, r5
   23350:	mov	r1, r4
   23354:	mov	r0, sl
   23358:	bl	19394 <_start@@Base+0x4d6c>
   2335c:	mov	r4, r0
   23360:	ldr	r3, [sp, #72]	; 0x48
   23364:	cmp	r3, #0
   23368:	beq	23bc4 <_start@@Base+0xf59c>
   2336c:	ldr	r3, [pc, #1264]	; 23864 <_start@@Base+0xf23c>
   23370:	add	r3, r3, #704	; 0x2c0
   23374:	str	r3, [sp, #60]	; 0x3c
   23378:	str	sl, [sp, #12]
   2337c:	b	23534 <_start@@Base+0xef0c>
   23380:	ldrb	r6, [r4, #7]
   23384:	mov	r7, #0
   23388:	b	23394 <_start@@Base+0xed6c>
   2338c:	mov	r6, #0
   23390:	mov	r7, #0
   23394:	ldrb	r2, [r4, #6]
   23398:	mov	r1, #0
   2339c:	str	r1, [sp, #52]	; 0x34
   233a0:	lsl	r3, r2, #8
   233a4:	str	r3, [sp, #48]	; 0x30
   233a8:	ldrd	r2, [sp, #48]	; 0x30
   233ac:	orr	r2, r2, r6
   233b0:	orr	r3, r3, r7
   233b4:	mov	r6, r2
   233b8:	mov	r7, r3
   233bc:	ldrb	r2, [r4, #5]
   233c0:	mov	r1, #0
   233c4:	str	r1, [sp, #44]	; 0x2c
   233c8:	lsl	r3, r2, #16
   233cc:	str	r3, [sp, #40]	; 0x28
   233d0:	ldrd	r2, [sp, #40]	; 0x28
   233d4:	orr	r2, r2, r6
   233d8:	orr	r3, r3, r7
   233dc:	mov	r6, r2
   233e0:	mov	r7, r3
   233e4:	ldrb	r2, [r4, #4]
   233e8:	mov	r1, #0
   233ec:	str	r1, [sp, #36]	; 0x24
   233f0:	lsl	r3, r2, #24
   233f4:	str	r3, [sp, #32]
   233f8:	ldrd	r2, [sp, #32]
   233fc:	orr	r2, r2, r6
   23400:	orr	r3, r3, r7
   23404:	mov	r6, r2
   23408:	mov	r7, r3
   2340c:	ldrb	r3, [r4, #3]
   23410:	str	r3, [sp, #28]
   23414:	mov	r3, #0
   23418:	str	r3, [sp, #24]
   2341c:	ldrd	r2, [sp, #24]
   23420:	orr	r2, r2, r6
   23424:	orr	r3, r3, r7
   23428:	mov	r6, r2
   2342c:	mov	r7, r3
   23430:	ldrb	r2, [r4, #2]
   23434:	lsl	r3, r2, #8
   23438:	str	r3, [sp, #20]
   2343c:	mov	r3, #0
   23440:	str	r3, [sp, #16]
   23444:	ldrd	r2, [sp, #16]
   23448:	orr	r2, r2, r6
   2344c:	orr	r3, r3, r7
   23450:	mov	r6, r2
   23454:	mov	r7, r3
   23458:	ldrb	r2, [r4, #1]
   2345c:	lsl	fp, r2, #16
   23460:	mov	sl, #0
   23464:	orr	r6, r6, sl
   23468:	orr	r7, r7, fp
   2346c:	ldrb	r2, [r4]
   23470:	lsl	r9, r2, #24
   23474:	mov	r8, #0
   23478:	orr	r6, r6, r8
   2347c:	orr	r7, r7, r9
   23480:	ldr	r2, [pc, #980]	; 2385c <_start@@Base+0xf234>
   23484:	mvn	r3, #0
   23488:	and	r2, r2, r6
   2348c:	and	r3, r3, r7
   23490:	add	r1, pc, #936	; 0x3a8
   23494:	ldrd	r0, [r1]
   23498:	cmp	r3, r1
   2349c:	cmpeq	r2, r0
   234a0:	beq	235e8 <_start@@Base+0xefc0>
   234a4:	and	r0, r6, #-16777216	; 0xff000000
   234a8:	add	r3, pc, #920	; 0x398
   234ac:	ldrd	r2, [r3]
   234b0:	cmp	r7, r3
   234b4:	cmpeq	r0, r2
   234b8:	beq	2374c <_start@@Base+0xf124>
   234bc:	mov	r0, #0
   234c0:	bic	r1, r7, #255	; 0xff
   234c4:	add	r3, pc, #900	; 0x384
   234c8:	ldrd	r2, [r3]
   234cc:	cmp	r1, r3
   234d0:	cmpeq	r0, r2
   234d4:	beq	238fc <_start@@Base+0xf2d4>
   234d8:	mov	r2, #0
   234dc:	ldr	r3, [pc, #888]	; 2385c <_start@@Base+0xf234>
   234e0:	and	r6, r6, r2
   234e4:	and	r7, r7, r3
   234e8:	mov	r2, #0
   234ec:	ldr	r3, [pc, #876]	; 23860 <_start@@Base+0xf238>
   234f0:	cmp	r7, r3
   234f4:	cmpeq	r6, r2
   234f8:	beq	23a60 <_start@@Base+0xf438>
   234fc:	mov	r2, r5
   23500:	mov	r1, r4
   23504:	ldr	r0, [sp, #12]
   23508:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   2350c:	mov	r4, r0
   23510:	add	r3, sp, #72	; 0x48
   23514:	mov	r2, r5
   23518:	mov	r1, r4
   2351c:	ldr	r0, [sp, #12]
   23520:	bl	180fc <_start@@Base+0x3ad4>
   23524:	mov	r4, r0
   23528:	ldr	r3, [sp, #72]	; 0x48
   2352c:	cmp	r3, #0
   23530:	beq	23bc0 <_start@@Base+0xf598>
   23534:	cmp	r5, r4
   23538:	beq	23564 <_start@@Base+0xef3c>
   2353c:	ldrb	r3, [r4]
   23540:	cmp	r3, #34	; 0x22
   23544:	addeq	r4, r4, #1
   23548:	beq	23564 <_start@@Base+0xef3c>
   2354c:	mov	r3, #5
   23550:	mov	r2, r5
   23554:	mov	r1, r4
   23558:	ldr	r0, [sp, #12]
   2355c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   23560:	mov	r4, r0
   23564:	sub	r3, r5, r4
   23568:	cmp	r3, #8
   2356c:	movcs	r3, #8
   23570:	sub	r3, r3, #1
   23574:	cmp	r3, #7
   23578:	ldrls	pc, [pc, r3, lsl #2]
   2357c:	b	238f0 <_start@@Base+0xf2c8>
   23580:	ldrdeq	r3, [r2], -ip
   23584:	ldrdeq	r3, [r2], -r0
   23588:	andeq	r3, r2, r4, asr #11
   2358c:			; <UNDEFINED> instruction: 0x000235b8
   23590:	andeq	r3, r2, ip, lsr #11
   23594:	andeq	r3, r2, r0, lsr #11
   23598:	andeq	r3, r2, ip, lsl #7
   2359c:	andeq	r3, r2, r0, lsl #7
   235a0:	mov	r6, #0
   235a4:	mov	r7, #0
   235a8:	b	233bc <_start@@Base+0xed94>
   235ac:	mov	r6, #0
   235b0:	mov	r7, #0
   235b4:	b	233e4 <_start@@Base+0xedbc>
   235b8:	mov	r6, #0
   235bc:	mov	r7, #0
   235c0:	b	2340c <_start@@Base+0xede4>
   235c4:	mov	r6, #0
   235c8:	mov	r7, #0
   235cc:	b	23430 <_start@@Base+0xee08>
   235d0:	mov	r6, #0
   235d4:	mov	r7, #0
   235d8:	b	23458 <_start@@Base+0xee30>
   235dc:	mov	r6, #0
   235e0:	mov	r7, #0
   235e4:	b	2346c <_start@@Base+0xee44>
   235e8:	mov	r3, #6
   235ec:	mov	r2, r5
   235f0:	mov	r1, r4
   235f4:	ldr	r0, [sp, #12]
   235f8:	bl	17de0 <_start@@Base+0x37b8>
   235fc:	str	r0, [sp, #56]	; 0x38
   23600:	cmp	r0, r4
   23604:	beq	238e0 <_start@@Base+0xf2b8>
   23608:	strb	r8, [sp, #71]	; 0x47
   2360c:	mov	r2, #0
   23610:	mov	r3, #0
   23614:	strd	r2, [sp, #80]	; 0x50
   23618:	str	r8, [sp, #76]	; 0x4c
   2361c:	mov	r6, r0
   23620:	cmp	r5, r0
   23624:	beq	23698 <_start@@Base+0xf070>
   23628:	add	r3, sp, #80	; 0x50
   2362c:	str	r3, [sp]
   23630:	add	r3, sp, #76	; 0x4c
   23634:	mov	r2, r5
   23638:	mov	r1, r0
   2363c:	ldr	r0, [sp, #12]
   23640:	bl	2d678 <flatcc_json_parser_integer@@Base>
   23644:	mov	r4, r0
   23648:	cmp	r6, r0
   2364c:	beq	23698 <_start@@Base+0xf070>
   23650:	ldrd	r2, [sp, #80]	; 0x50
   23654:	ldr	r1, [sp, #76]	; 0x4c
   23658:	cmp	r1, r8
   2365c:	beq	236d4 <_start@@Base+0xf0ac>
   23660:	cmp	r3, #0
   23664:	cmpeq	r2, #128	; 0x80
   23668:	rsbls	r2, r2, #0
   2366c:	strbls	r2, [sp, #71]	; 0x47
   23670:	bls	236e4 <_start@@Base+0xf0bc>
   23674:	mov	r3, #8
   23678:	mov	r2, r5
   2367c:	mov	r1, r0
   23680:	ldr	r0, [sp, #12]
   23684:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   23688:	mov	r4, r0
   2368c:	ldr	r3, [sp, #56]	; 0x38
   23690:	cmp	r3, r4
   23694:	bne	236e4 <_start@@Base+0xf0bc>
   23698:	add	r3, sp, #71	; 0x47
   2369c:	str	r3, [sp]
   236a0:	ldr	r3, [pc, #444]	; 23864 <_start@@Base+0xf23c>
   236a4:	add	r3, r3, #660	; 0x294
   236a8:	mov	r2, r5
   236ac:	ldr	r6, [sp, #56]	; 0x38
   236b0:	mov	r1, r6
   236b4:	ldr	r0, [sp, #12]
   236b8:	bl	18ed0 <_start@@Base+0x48a8>
   236bc:	mov	r4, r0
   236c0:	cmp	r5, r0
   236c4:	cmpne	r6, r0
   236c8:	bne	236e4 <_start@@Base+0xf0bc>
   236cc:	ldr	sl, [sp, #12]
   236d0:	b	23bd0 <_start@@Base+0xf5a8>
   236d4:	cmp	r3, #0
   236d8:	cmpeq	r2, #127	; 0x7f
   236dc:	strbls	r2, [sp, #71]	; 0x47
   236e0:	bhi	2371c <_start@@Base+0xf0f4>
   236e4:	ldrsb	r3, [sp, #71]	; 0x47
   236e8:	cmp	r3, #2
   236ec:	beq	23738 <_start@@Base+0xf110>
   236f0:	mov	r3, #1
   236f4:	mov	r2, r3
   236f8:	mov	r1, r3
   236fc:	ldr	r0, [sp, #12]
   23700:	ldr	r0, [r0]
   23704:	bl	28e20 <flatcc_builder_table_add@@Base>
   23708:	cmp	r0, #0
   2370c:	beq	23c08 <_start@@Base+0xf5e0>
   23710:	ldrsb	r3, [sp, #71]	; 0x47
   23714:	strb	r3, [r0]
   23718:	b	23510 <_start@@Base+0xeee8>
   2371c:	mov	r3, #7
   23720:	mov	r2, r5
   23724:	mov	r1, r0
   23728:	ldr	r0, [sp, #12]
   2372c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   23730:	mov	r4, r0
   23734:	b	2368c <_start@@Base+0xf064>
   23738:	ldr	r3, [sp, #12]
   2373c:	ldr	r3, [r3, #8]
   23740:	tst	r3, #2
   23744:	beq	23510 <_start@@Base+0xeee8>
   23748:	b	236f0 <_start@@Base+0xf0c8>
   2374c:	mov	r3, #5
   23750:	mov	r2, r5
   23754:	mov	r1, r4
   23758:	ldr	r0, [sp, #12]
   2375c:	bl	17de0 <_start@@Base+0x37b8>
   23760:	str	r0, [sp, #56]	; 0x38
   23764:	cmp	r0, r4
   23768:	beq	238e8 <_start@@Base+0xf2c0>
   2376c:	mov	r1, #0
   23770:	strb	r1, [sp, #71]	; 0x47
   23774:	mov	r2, #0
   23778:	mov	r3, #0
   2377c:	strd	r2, [sp, #80]	; 0x50
   23780:	str	r1, [sp, #76]	; 0x4c
   23784:	mov	r6, r0
   23788:	cmp	r5, r0
   2378c:	beq	23800 <_start@@Base+0xf1d8>
   23790:	add	r3, sp, #80	; 0x50
   23794:	str	r3, [sp]
   23798:	add	r3, sp, #76	; 0x4c
   2379c:	mov	r2, r5
   237a0:	mov	r1, r0
   237a4:	ldr	r0, [sp, #12]
   237a8:	bl	2d678 <flatcc_json_parser_integer@@Base>
   237ac:	mov	r4, r0
   237b0:	cmp	r6, r0
   237b4:	beq	23800 <_start@@Base+0xf1d8>
   237b8:	ldrd	r2, [sp, #80]	; 0x50
   237bc:	ldr	r1, [sp, #76]	; 0x4c
   237c0:	cmp	r1, #0
   237c4:	beq	23868 <_start@@Base+0xf240>
   237c8:	cmp	r3, #0
   237cc:	cmpeq	r2, #128	; 0x80
   237d0:	rsbls	r2, r2, #0
   237d4:	strbls	r2, [sp, #71]	; 0x47
   237d8:	bls	23878 <_start@@Base+0xf250>
   237dc:	mov	r3, #8
   237e0:	mov	r2, r5
   237e4:	mov	r1, r0
   237e8:	ldr	r0, [sp, #12]
   237ec:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   237f0:	mov	r4, r0
   237f4:	ldr	r3, [sp, #56]	; 0x38
   237f8:	cmp	r3, r4
   237fc:	bne	23878 <_start@@Base+0xf250>
   23800:	add	r3, sp, #71	; 0x47
   23804:	str	r3, [sp]
   23808:	ldr	r3, [pc, #84]	; 23864 <_start@@Base+0xf23c>
   2380c:	add	r3, r3, #676	; 0x2a4
   23810:	mov	r2, r5
   23814:	ldr	r6, [sp, #56]	; 0x38
   23818:	mov	r1, r6
   2381c:	ldr	r0, [sp, #12]
   23820:	bl	18ed0 <_start@@Base+0x48a8>
   23824:	mov	r4, r0
   23828:	cmp	r5, r0
   2382c:	cmpne	r6, r0
   23830:	bne	23878 <_start@@Base+0xf250>
   23834:	ldr	sl, [sp, #12]
   23838:	b	23bd0 <_start@@Base+0xf5a8>
   2383c:	nop			; (mov r0, r0)
   23840:	eorsvc	r0, r2, #0
   23844:	cmnvs	pc, #28416	; 0x6f00
   23848:	andvc	r0, r0, #0
   2384c:	cmnvs	pc, #28416	; 0x6f00
   23850:	andeq	r0, r0, r0
   23854:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   23858:	andeq	sp, r3, r0, asr #10
   2385c:			; <UNDEFINED> instruction: 0xffff0000
   23860:	strbvc	r0, [r3, #-0]!
   23864:	andeq	r3, r5, r0, ror r0
   23868:	cmp	r3, #0
   2386c:	cmpeq	r2, #127	; 0x7f
   23870:	strbls	r2, [sp, #71]	; 0x47
   23874:	bhi	238b0 <_start@@Base+0xf288>
   23878:	ldrsb	r3, [sp, #71]	; 0x47
   2387c:	cmp	r3, #2
   23880:	beq	238cc <_start@@Base+0xf2a4>
   23884:	mov	r3, #1
   23888:	mov	r2, r3
   2388c:	mov	r1, #0
   23890:	ldr	r0, [sp, #12]
   23894:	ldr	r0, [r0]
   23898:	bl	28e20 <flatcc_builder_table_add@@Base>
   2389c:	cmp	r0, #0
   238a0:	beq	23c10 <_start@@Base+0xf5e8>
   238a4:	ldrsb	r3, [sp, #71]	; 0x47
   238a8:	strb	r3, [r0]
   238ac:	b	23510 <_start@@Base+0xeee8>
   238b0:	mov	r3, #7
   238b4:	mov	r2, r5
   238b8:	mov	r1, r0
   238bc:	ldr	r0, [sp, #12]
   238c0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   238c4:	mov	r4, r0
   238c8:	b	237f4 <_start@@Base+0xf1cc>
   238cc:	ldr	r3, [sp, #12]
   238d0:	ldr	r3, [r3, #8]
   238d4:	tst	r3, #2
   238d8:	beq	23510 <_start@@Base+0xeee8>
   238dc:	b	23884 <_start@@Base+0xf25c>
   238e0:	ldr	r4, [sp, #56]	; 0x38
   238e4:	b	234bc <_start@@Base+0xee94>
   238e8:	ldr	r4, [sp, #56]	; 0x38
   238ec:	b	234bc <_start@@Base+0xee94>
   238f0:	mov	r6, #0
   238f4:	mov	r7, #0
   238f8:	b	234bc <_start@@Base+0xee94>
   238fc:	mov	r3, #3
   23900:	mov	r2, r5
   23904:	mov	r1, r4
   23908:	ldr	r7, [sp, #12]
   2390c:	mov	r0, r7
   23910:	bl	17de0 <_start@@Base+0x37b8>
   23914:	mov	r6, r0
   23918:	cmp	r4, r0
   2391c:	beq	23a48 <_start@@Base+0xf420>
   23920:	mov	r1, #0
   23924:	strb	r1, [sp, #71]	; 0x47
   23928:	mov	r2, #0
   2392c:	mov	r3, #0
   23930:	strd	r2, [sp, #80]	; 0x50
   23934:	str	r1, [sp, #76]	; 0x4c
   23938:	cmp	r5, r0
   2393c:	beq	239e0 <_start@@Base+0xf3b8>
   23940:	add	r3, sp, #80	; 0x50
   23944:	str	r3, [sp]
   23948:	add	r3, sp, #76	; 0x4c
   2394c:	mov	r2, r5
   23950:	mov	r1, r0
   23954:	mov	r0, r7
   23958:	bl	2d678 <flatcc_json_parser_integer@@Base>
   2395c:	mov	r4, r0
   23960:	cmp	r6, r0
   23964:	beq	239e0 <_start@@Base+0xf3b8>
   23968:	ldr	r3, [sp, #76]	; 0x4c
   2396c:	cmp	r3, #0
   23970:	bne	239c0 <_start@@Base+0xf398>
   23974:	ldrd	r2, [sp, #80]	; 0x50
   23978:	cmp	r3, #0
   2397c:	cmpeq	r2, #255	; 0xff
   23980:	strbls	r2, [sp, #71]	; 0x47
   23984:	bhi	23a18 <_start@@Base+0xf3f0>
   23988:	ldrb	r3, [sp, #71]	; 0x47
   2398c:	cmp	r3, #2
   23990:	beq	23a34 <_start@@Base+0xf40c>
   23994:	mov	r3, #1
   23998:	mov	r2, r3
   2399c:	mov	r1, #3
   239a0:	ldr	r0, [sp, #12]
   239a4:	ldr	r0, [r0]
   239a8:	bl	28e20 <flatcc_builder_table_add@@Base>
   239ac:	cmp	r0, #0
   239b0:	beq	23c18 <_start@@Base+0xf5f0>
   239b4:	ldrb	r3, [sp, #71]	; 0x47
   239b8:	strb	r3, [r0]
   239bc:	b	23510 <_start@@Base+0xeee8>
   239c0:	mov	r3, #8
   239c4:	mov	r2, r5
   239c8:	mov	r1, r0
   239cc:	ldr	r0, [sp, #12]
   239d0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   239d4:	mov	r4, r0
   239d8:	cmp	r6, r4
   239dc:	bne	23988 <_start@@Base+0xf360>
   239e0:	add	r3, sp, #71	; 0x47
   239e4:	str	r3, [sp]
   239e8:	ldr	r3, [pc, #-396]	; 23864 <_start@@Base+0xf23c>
   239ec:	add	r3, r3, #692	; 0x2b4
   239f0:	mov	r2, r5
   239f4:	mov	r1, r6
   239f8:	ldr	r0, [sp, #12]
   239fc:	bl	18668 <_start@@Base+0x4040>
   23a00:	mov	r4, r0
   23a04:	cmp	r5, r0
   23a08:	cmpne	r6, r0
   23a0c:	bne	23988 <_start@@Base+0xf360>
   23a10:	ldr	sl, [sp, #12]
   23a14:	b	23bd0 <_start@@Base+0xf5a8>
   23a18:	mov	r3, #7
   23a1c:	mov	r2, r5
   23a20:	mov	r1, r0
   23a24:	ldr	r0, [sp, #12]
   23a28:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   23a2c:	mov	r4, r0
   23a30:	b	239d8 <_start@@Base+0xf3b0>
   23a34:	ldr	r3, [sp, #12]
   23a38:	ldr	r3, [r3, #8]
   23a3c:	tst	r3, #2
   23a40:	beq	23510 <_start@@Base+0xeee8>
   23a44:	b	23994 <_start@@Base+0xf36c>
   23a48:	mov	r2, r5
   23a4c:	mov	r1, r0
   23a50:	ldr	r0, [sp, #12]
   23a54:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   23a58:	mov	r4, r0
   23a5c:	b	23510 <_start@@Base+0xeee8>
   23a60:	mov	r3, #2
   23a64:	mov	r2, r5
   23a68:	mov	r1, r4
   23a6c:	ldr	r7, [sp, #12]
   23a70:	mov	r0, r7
   23a74:	bl	17de0 <_start@@Base+0x37b8>
   23a78:	mov	r6, r0
   23a7c:	cmp	r4, r0
   23a80:	beq	23ba8 <_start@@Base+0xf580>
   23a84:	mov	r1, #0
   23a88:	strb	r1, [sp, #71]	; 0x47
   23a8c:	mov	r2, #0
   23a90:	mov	r3, #0
   23a94:	strd	r2, [sp, #80]	; 0x50
   23a98:	str	r1, [sp, #76]	; 0x4c
   23a9c:	cmp	r5, r0
   23aa0:	beq	23b44 <_start@@Base+0xf51c>
   23aa4:	add	r3, sp, #80	; 0x50
   23aa8:	str	r3, [sp]
   23aac:	add	r3, sp, #76	; 0x4c
   23ab0:	mov	r2, r5
   23ab4:	mov	r1, r0
   23ab8:	mov	r0, r7
   23abc:	bl	2d678 <flatcc_json_parser_integer@@Base>
   23ac0:	mov	r4, r0
   23ac4:	cmp	r6, r0
   23ac8:	beq	23b44 <_start@@Base+0xf51c>
   23acc:	ldr	r3, [sp, #76]	; 0x4c
   23ad0:	cmp	r3, #0
   23ad4:	bne	23b24 <_start@@Base+0xf4fc>
   23ad8:	ldrd	r2, [sp, #80]	; 0x50
   23adc:	cmp	r3, #0
   23ae0:	cmpeq	r2, #255	; 0xff
   23ae4:	strbls	r2, [sp, #71]	; 0x47
   23ae8:	bhi	23b78 <_start@@Base+0xf550>
   23aec:	ldrb	r3, [sp, #71]	; 0x47
   23af0:	cmp	r3, #2
   23af4:	beq	23b94 <_start@@Base+0xf56c>
   23af8:	mov	r3, #1
   23afc:	mov	r2, r3
   23b00:	mov	r1, #2
   23b04:	ldr	r0, [sp, #12]
   23b08:	ldr	r0, [r0]
   23b0c:	bl	28e20 <flatcc_builder_table_add@@Base>
   23b10:	cmp	r0, #0
   23b14:	beq	23c20 <_start@@Base+0xf5f8>
   23b18:	ldrb	r3, [sp, #71]	; 0x47
   23b1c:	strb	r3, [r0]
   23b20:	b	23510 <_start@@Base+0xeee8>
   23b24:	mov	r3, #8
   23b28:	mov	r2, r5
   23b2c:	mov	r1, r0
   23b30:	ldr	r0, [sp, #12]
   23b34:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   23b38:	mov	r4, r0
   23b3c:	cmp	r6, r4
   23b40:	bne	23aec <_start@@Base+0xf4c4>
   23b44:	add	r3, sp, #71	; 0x47
   23b48:	str	r3, [sp]
   23b4c:	ldr	r3, [sp, #60]	; 0x3c
   23b50:	mov	r2, r5
   23b54:	mov	r1, r6
   23b58:	ldr	r0, [sp, #12]
   23b5c:	bl	18668 <_start@@Base+0x4040>
   23b60:	mov	r4, r0
   23b64:	cmp	r5, r0
   23b68:	cmpne	r6, r0
   23b6c:	bne	23aec <_start@@Base+0xf4c4>
   23b70:	ldr	sl, [sp, #12]
   23b74:	b	23bd0 <_start@@Base+0xf5a8>
   23b78:	mov	r3, #7
   23b7c:	mov	r2, r5
   23b80:	mov	r1, r0
   23b84:	ldr	r0, [sp, #12]
   23b88:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   23b8c:	mov	r4, r0
   23b90:	b	23b3c <_start@@Base+0xf514>
   23b94:	ldr	r3, [sp, #12]
   23b98:	ldr	r3, [r3, #8]
   23b9c:	tst	r3, #2
   23ba0:	beq	23510 <_start@@Base+0xeee8>
   23ba4:	b	23af8 <_start@@Base+0xf4d0>
   23ba8:	mov	r2, r5
   23bac:	mov	r1, r0
   23bb0:	ldr	r0, [sp, #12]
   23bb4:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   23bb8:	mov	r4, r0
   23bbc:	b	23510 <_start@@Base+0xeee8>
   23bc0:	ldr	sl, [sp, #12]
   23bc4:	ldr	r3, [sl, #20]
   23bc8:	cmp	r3, #0
   23bcc:	beq	23be8 <_start@@Base+0xf5c0>
   23bd0:	mov	r3, #33	; 0x21
   23bd4:	mov	r2, r5
   23bd8:	mov	r1, r4
   23bdc:	mov	r0, sl
   23be0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   23be4:	b	23310 <_start@@Base+0xece8>
   23be8:	ldr	r0, [sl]
   23bec:	bl	27e74 <flatcc_builder_end_table@@Base>
   23bf0:	ldr	r3, [sp, #128]	; 0x80
   23bf4:	str	r0, [r3]
   23bf8:	cmp	r0, #0
   23bfc:	movne	r0, r4
   23c00:	beq	23bd0 <_start@@Base+0xf5a8>
   23c04:	b	23310 <_start@@Base+0xece8>
   23c08:	ldr	sl, [sp, #12]
   23c0c:	b	23bd0 <_start@@Base+0xf5a8>
   23c10:	ldr	sl, [sp, #12]
   23c14:	b	23bd0 <_start@@Base+0xf5a8>
   23c18:	ldr	sl, [sp, #12]
   23c1c:	b	23bd0 <_start@@Base+0xf5a8>
   23c20:	ldr	sl, [sp, #12]
   23c24:	b	23bd0 <_start@@Base+0xf5a8>
   23c28:	mov	r1, #0
   23c2c:	ldr	r0, [r0]
   23c30:	bl	27424 <flatcc_builder_start_table@@Base>
   23c34:	cmp	r0, #0
   23c38:	bne	23cdc <_start@@Base+0xf6b4>
   23c3c:	add	r3, sp, #80	; 0x50
   23c40:	mov	r2, r5
   23c44:	mov	r1, r4
   23c48:	mov	r0, sl
   23c4c:	bl	19394 <_start@@Base+0x4d6c>
   23c50:	mov	r4, r0
   23c54:	ldr	r3, [sp, #80]	; 0x50
   23c58:	cmp	r3, #0
   23c5c:	beq	23cd0 <_start@@Base+0xf6a8>
   23c60:	mov	r6, #5
   23c64:	mov	r1, r0
   23c68:	b	23c9c <_start@@Base+0xf674>
   23c6c:	mov	r2, r5
   23c70:	mov	r0, sl
   23c74:	bl	2e5cc <flatcc_json_parser_unmatched_symbol@@Base>
   23c78:	add	r3, sp, #80	; 0x50
   23c7c:	mov	r2, r5
   23c80:	mov	r1, r0
   23c84:	mov	r0, sl
   23c88:	bl	180fc <_start@@Base+0x3ad4>
   23c8c:	mov	r1, r0
   23c90:	ldr	r3, [sp, #80]	; 0x50
   23c94:	cmp	r3, #0
   23c98:	beq	23ccc <_start@@Base+0xf6a4>
   23c9c:	cmp	r5, r1
   23ca0:	beq	23c6c <_start@@Base+0xf644>
   23ca4:	ldrb	r3, [r1]
   23ca8:	cmp	r3, #34	; 0x22
   23cac:	addeq	r1, r1, #1
   23cb0:	beq	23c6c <_start@@Base+0xf644>
   23cb4:	mov	r3, r6
   23cb8:	mov	r2, r5
   23cbc:	mov	r0, sl
   23cc0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   23cc4:	mov	r1, r0
   23cc8:	b	23c6c <_start@@Base+0xf644>
   23ccc:	mov	r4, r0
   23cd0:	ldr	r3, [sl, #20]
   23cd4:	cmp	r3, #0
   23cd8:	beq	23cf4 <_start@@Base+0xf6cc>
   23cdc:	mov	r3, #33	; 0x21
   23ce0:	mov	r2, r5
   23ce4:	mov	r1, r4
   23ce8:	mov	r0, sl
   23cec:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   23cf0:	b	23310 <_start@@Base+0xece8>
   23cf4:	ldr	r0, [sl]
   23cf8:	bl	27e74 <flatcc_builder_end_table@@Base>
   23cfc:	ldr	r3, [sp, #128]	; 0x80
   23d00:	str	r0, [r3]
   23d04:	cmp	r0, #0
   23d08:	movne	r0, r4
   23d0c:	beq	23cdc <_start@@Base+0xf6b4>
   23d10:	b	23310 <_start@@Base+0xece8>
   23d14:	ldr	r3, [sp, #128]	; 0x80
   23d18:	mov	r2, r5
   23d1c:	mov	r1, r4
   23d20:	bl	19d74 <_start@@Base+0x574c>
   23d24:	b	23310 <_start@@Base+0xece8>
   23d28:	ldr	r3, [r0, #8]
   23d2c:	tst	r3, #1
   23d30:	bne	23d48 <_start@@Base+0xf720>
   23d34:	mov	r3, #15
   23d38:	mov	r2, r5
   23d3c:	mov	r1, r4
   23d40:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   23d44:	b	2332c <_start@@Base+0xed04>
   23d48:	mov	r2, r5
   23d4c:	mov	r1, r4
   23d50:	bl	2d7d4 <flatcc_json_parser_generic_json@@Base>
   23d54:	b	2332c <_start@@Base+0xed04>
   23d58:	mov	r3, #33	; 0x21
   23d5c:	mov	r2, r5
   23d60:	mov	r1, r0
   23d64:	mov	r0, sl
   23d68:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   23d6c:	b	2332c <_start@@Base+0xed04>
   23d70:	push	{r4, r5, r6, r7, r8, r9, lr}
   23d74:	sub	sp, sp, #12
   23d78:	mov	r9, r0
   23d7c:	mov	r4, r1
   23d80:	mov	r5, r2
   23d84:	mov	r8, r3
   23d88:	mov	r1, r2
   23d8c:	mov	r0, r4
   23d90:	bl	14750 <_start@@Base+0x128>
   23d94:	add	r3, pc, #836	; 0x344
   23d98:	ldrd	r2, [r3]
   23d9c:	cmp	r1, r3
   23da0:	cmpeq	r0, r2
   23da4:	bhi	23ee4 <_start@@Base+0xf8bc>
   23da8:	add	r3, pc, #824	; 0x338
   23dac:	ldrd	r2, [r3]
   23db0:	cmp	r1, r3
   23db4:	cmpeq	r0, r2
   23db8:	bhi	23e28 <_start@@Base+0xf800>
   23dbc:	mov	r0, #0
   23dc0:	bic	r1, r1, #255	; 0xff
   23dc4:	add	r3, pc, #804	; 0x324
   23dc8:	ldrd	r2, [r3]
   23dcc:	cmp	r1, r3
   23dd0:	cmpeq	r0, r2
   23dd4:	beq	23de4 <_start@@Base+0xf7bc>
   23dd8:	mov	r0, r4
   23ddc:	add	sp, sp, #12
   23de0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23de4:	sub	r3, r5, r4
   23de8:	cmp	r3, #3
   23dec:	ble	23dd8 <_start@@Base+0xf7b0>
   23df0:	ldrb	r3, [r4, #3]
   23df4:	cmp	r3, #46	; 0x2e
   23df8:	bne	23dd8 <_start@@Base+0xf7b0>
   23dfc:	ldr	r3, [sp, #44]	; 0x2c
   23e00:	str	r3, [sp, #4]
   23e04:	ldr	r3, [sp, #40]	; 0x28
   23e08:	str	r3, [sp]
   23e0c:	mov	r3, r8
   23e10:	mov	r2, r5
   23e14:	add	r1, r4, #4
   23e18:	mov	r0, r9
   23e1c:	bl	166c8 <_start@@Base+0x20a0>
   23e20:	mov	r4, r0
   23e24:	b	23dd8 <_start@@Base+0xf7b0>
   23e28:	mov	r6, #0
   23e2c:	bic	r7, r1, #255	; 0xff
   23e30:	add	r3, pc, #704	; 0x2c0
   23e34:	ldrd	r2, [r3]
   23e38:	cmp	r7, r3
   23e3c:	cmpeq	r6, r2
   23e40:	beq	23ea0 <_start@@Base+0xf878>
   23e44:	and	r0, r0, #-16777216	; 0xff000000
   23e48:	add	r3, pc, #688	; 0x2b0
   23e4c:	ldrd	r2, [r3]
   23e50:	cmp	r1, r3
   23e54:	cmpeq	r0, r2
   23e58:	bne	23dd8 <_start@@Base+0xf7b0>
   23e5c:	sub	r3, r5, r4
   23e60:	cmp	r3, #5
   23e64:	ble	23dd8 <_start@@Base+0xf7b0>
   23e68:	ldrb	r3, [r4, #5]
   23e6c:	cmp	r3, #46	; 0x2e
   23e70:	bne	23dd8 <_start@@Base+0xf7b0>
   23e74:	ldr	r3, [sp, #44]	; 0x2c
   23e78:	str	r3, [sp, #4]
   23e7c:	ldr	r3, [sp, #40]	; 0x28
   23e80:	str	r3, [sp]
   23e84:	mov	r3, r8
   23e88:	mov	r2, r5
   23e8c:	add	r1, r4, #6
   23e90:	mov	r0, r9
   23e94:	bl	17010 <_start@@Base+0x29e8>
   23e98:	mov	r4, r0
   23e9c:	b	23dd8 <_start@@Base+0xf7b0>
   23ea0:	sub	r3, r5, r4
   23ea4:	cmp	r3, #3
   23ea8:	ble	23dd8 <_start@@Base+0xf7b0>
   23eac:	ldrb	r3, [r4, #3]
   23eb0:	cmp	r3, #46	; 0x2e
   23eb4:	bne	23dd8 <_start@@Base+0xf7b0>
   23eb8:	ldr	r3, [sp, #44]	; 0x2c
   23ebc:	str	r3, [sp, #4]
   23ec0:	ldr	r3, [sp, #40]	; 0x28
   23ec4:	str	r3, [sp]
   23ec8:	mov	r3, r8
   23ecc:	mov	r2, r5
   23ed0:	add	r1, r4, #4
   23ed4:	mov	r0, r9
   23ed8:	bl	16980 <_start@@Base+0x2358>
   23edc:	mov	r4, r0
   23ee0:	b	23dd8 <_start@@Base+0xf7b0>
   23ee4:	add	r3, pc, #540	; 0x21c
   23ee8:	ldrd	r2, [r3]
   23eec:	cmp	r1, r3
   23ef0:	cmpeq	r0, r2
   23ef4:	bhi	23f50 <_start@@Base+0xf928>
   23ef8:	add	r3, pc, #528	; 0x210
   23efc:	ldrd	r2, [r3]
   23f00:	cmp	r1, r3
   23f04:	cmpeq	r0, r2
   23f08:	bne	23dd8 <_start@@Base+0xf7b0>
   23f0c:	sub	r3, r5, r4
   23f10:	cmp	r3, #8
   23f14:	ble	23dd8 <_start@@Base+0xf7b0>
   23f18:	ldrb	r3, [r4, #8]
   23f1c:	cmp	r3, #46	; 0x2e
   23f20:	bne	23dd8 <_start@@Base+0xf7b0>
   23f24:	ldr	r3, [sp, #44]	; 0x2c
   23f28:	str	r3, [sp, #4]
   23f2c:	ldr	r3, [sp, #40]	; 0x28
   23f30:	str	r3, [sp]
   23f34:	mov	r3, r8
   23f38:	mov	r2, r5
   23f3c:	add	r1, r4, #9
   23f40:	mov	r0, r9
   23f44:	bl	16ac8 <_start@@Base+0x24a0>
   23f48:	mov	r4, r0
   23f4c:	b	23dd8 <_start@@Base+0xf7b0>
   23f50:	add	r3, pc, #448	; 0x1c0
   23f54:	ldrd	r2, [r3]
   23f58:	cmp	r1, r3
   23f5c:	cmpeq	r0, r2
   23f60:	bhi	23fbc <_start@@Base+0xf994>
   23f64:	add	r3, pc, #436	; 0x1b4
   23f68:	ldrd	r2, [r3]
   23f6c:	cmp	r1, r3
   23f70:	cmpeq	r0, r2
   23f74:	bne	23dd8 <_start@@Base+0xf7b0>
   23f78:	sub	r3, r5, r4
   23f7c:	cmp	r3, #8
   23f80:	ble	23dd8 <_start@@Base+0xf7b0>
   23f84:	ldrb	r3, [r4, #8]
   23f88:	cmp	r3, #46	; 0x2e
   23f8c:	bne	23dd8 <_start@@Base+0xf7b0>
   23f90:	ldr	r3, [sp, #44]	; 0x2c
   23f94:	str	r3, [sp, #4]
   23f98:	ldr	r3, [sp, #40]	; 0x28
   23f9c:	str	r3, [sp]
   23fa0:	mov	r3, r8
   23fa4:	mov	r2, r5
   23fa8:	add	r1, r4, #9
   23fac:	mov	r0, r9
   23fb0:	bl	16c6c <_start@@Base+0x2644>
   23fb4:	mov	r4, r0
   23fb8:	b	23dd8 <_start@@Base+0xf7b0>
   23fbc:	add	r3, pc, #356	; 0x164
   23fc0:	ldrd	r2, [r3]
   23fc4:	cmp	r1, r3
   23fc8:	cmpeq	r0, r2
   23fcc:	beq	24098 <_start@@Base+0xfa70>
   23fd0:	add	r3, pc, #344	; 0x158
   23fd4:	ldrd	r2, [r3]
   23fd8:	cmp	r1, r3
   23fdc:	cmpeq	r0, r2
   23fe0:	bne	23dd8 <_start@@Base+0xf7b0>
   23fe4:	add	r6, r4, #8
   23fe8:	mov	r1, r5
   23fec:	mov	r0, r6
   23ff0:	bl	14750 <_start@@Base+0x128>
   23ff4:	mov	r0, #0
   23ff8:	add	r3, pc, #312	; 0x138
   23ffc:	ldrd	r2, [r3]
   24000:	cmp	r1, r3
   24004:	cmpeq	r0, r2
   24008:	bne	23dd8 <_start@@Base+0xf7b0>
   2400c:	sub	r3, r5, r6
   24010:	cmp	r3, #4
   24014:	ble	23dd8 <_start@@Base+0xf7b0>
   24018:	ldrb	r3, [r4, #12]
   2401c:	cmp	r3, #46	; 0x2e
   24020:	bne	23dd8 <_start@@Base+0xf7b0>
   24024:	add	r7, r4, #13
   24028:	cmp	r6, r7
   2402c:	beq	23dd8 <_start@@Base+0xf7b0>
   24030:	mov	r1, r5
   24034:	mov	r0, r7
   24038:	bl	14750 <_start@@Base+0x128>
   2403c:	mov	r0, #0
   24040:	and	r1, r1, #-16777216	; 0xff000000
   24044:	cmp	r1, #2013265920	; 0x78000000
   24048:	cmpeq	r0, #0
   2404c:	movne	r4, r7
   24050:	bne	23dd8 <_start@@Base+0xf7b0>
   24054:	ldr	r3, [sp, #44]	; 0x2c
   24058:	str	r3, [sp]
   2405c:	mov	r3, #1
   24060:	mov	r2, r5
   24064:	mov	r1, r7
   24068:	mov	r0, r9
   2406c:	bl	2d338 <flatcc_json_parser_match_constant@@Base>
   24070:	mov	r4, r0
   24074:	cmp	r7, r0
   24078:	beq	23dd8 <_start@@Base+0xf7b0>
   2407c:	mov	r2, #0
   24080:	mov	r3, #0
   24084:	ldr	r1, [sp, #40]	; 0x28
   24088:	strd	r2, [r1]
   2408c:	mov	r3, #0
   24090:	str	r3, [r8]
   24094:	b	23dd8 <_start@@Base+0xf7b0>
   24098:	sub	r3, r5, r4
   2409c:	cmp	r3, #8
   240a0:	ble	23dd8 <_start@@Base+0xf7b0>
   240a4:	ldrb	r3, [r4, #8]
   240a8:	cmp	r3, #46	; 0x2e
   240ac:	bne	23dd8 <_start@@Base+0xf7b0>
   240b0:	ldr	r3, [sp, #44]	; 0x2c
   240b4:	str	r3, [sp, #4]
   240b8:	ldr	r3, [sp, #40]	; 0x28
   240bc:	str	r3, [sp]
   240c0:	mov	r3, r8
   240c4:	mov	r2, r5
   240c8:	add	r1, r4, #9
   240cc:	mov	r0, r9
   240d0:	bl	16e8c <_start@@Base+0x2864>
   240d4:	mov	r4, r0
   240d8:	b	23dd8 <_start@@Base+0xf7b0>
   240dc:	nop			; (mov r0, r0)
   240e0:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   240e4:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   240e8:	ldrshvc	pc, [pc, #255]	; 241ef <test_json@@Base+0xaf>	; <UNPREDICTABLE>
   240ec:	cmnmi	pc, #28416	; 0x6f00
   240f0:	andeq	r0, r0, r0
   240f4:	cmnmi	lr, r0, lsl #18
   240f8:	andeq	r0, r0, r0
   240fc:	strbtmi	r6, [pc], -r0, lsl #30
   24100:	andvc	r0, r0, #0
   24104:	cmnmi	pc, #28416	; 0x6f00
   24108:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   2410c:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   24110:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   24114:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   24118:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   2411c:	mcrvs	7, 3, r6, cr5, cr15, {2}
   24120:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   24124:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   24128:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   2412c:	mcrvs	7, 3, r6, cr5, cr15, {2}
   24130:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   24134:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   24138:	andeq	r0, r0, r0
   2413c:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93

00024140 <test_json@@Base>:
   24140:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24144:	sub	sp, sp, #372	; 0x174
   24148:	mov	r6, r0
   2414c:	mov	r5, r1
   24150:	mov	r7, r2
   24154:	mov	r8, r3
   24158:	ldr	r4, [sp, #412]	; 0x19c
   2415c:	add	r0, sp, #128	; 0x80
   24160:	bl	25cc4 <flatcc_builder_init@@Base>
   24164:	mov	r1, #0
   24168:	add	r0, sp, #40	; 0x28
   2416c:	bl	3c5b4 <flatcc_json_printer_init_dynamic_buffer@@Base>
   24170:	and	r3, r4, #1
   24174:	strb	r3, [sp, #66]	; 0x42
   24178:	lsr	r3, r4, #1
   2417c:	and	r3, r3, #1
   24180:	strb	r3, [sp, #67]	; 0x43
   24184:	lsr	r3, r4, #2
   24188:	and	r3, r3, #1
   2418c:	strb	r3, [sp, #68]	; 0x44
   24190:	lsr	r3, r4, #3
   24194:	and	r3, r3, #1
   24198:	strb	r3, [sp, #69]	; 0x45
   2419c:	tst	r4, #16
   241a0:	movne	r3, #2
   241a4:	strbne	r3, [sp, #65]	; 0x41
   241a8:	tst	r4, #32
   241ac:	beq	241c8 <test_json@@Base+0x88>
   241b0:	mov	r3, #2
   241b4:	strb	r3, [sp, #65]	; 0x41
   241b8:	mov	r3, #1
   241bc:	strb	r3, [sp, #66]	; 0x42
   241c0:	mov	r3, #0
   241c4:	strb	r3, [sp, #67]	; 0x43
   241c8:	mov	r0, r5
   241cc:	bl	145a0 <strlen@plt>
   241d0:	ldr	r3, [r6, #4]
   241d4:	str	r3, [sp, #8]
   241d8:	ldr	r3, [r6]
   241dc:	str	r3, [sp, #4]
   241e0:	ldr	r3, [sp, #408]	; 0x198
   241e4:	str	r3, [sp]
   241e8:	mov	r3, r0
   241ec:	mov	r2, r5
   241f0:	add	r1, sp, #88	; 0x58
   241f4:	add	r0, sp, #128	; 0x80
   241f8:	bl	2f73c <flatcc_json_parser_table_as_root@@Base>
   241fc:	cmp	r0, r8
   24200:	beq	2434c <test_json@@Base+0x20c>
   24204:	cmp	r8, #0
   24208:	beq	24318 <test_json@@Base+0x1d8>
   2420c:	cmp	r0, #0
   24210:	beq	242e0 <test_json@@Base+0x1a0>
   24214:	ldr	r4, [pc, #840]	; 24564 <test_json@@Base+0x424>
   24218:	ldr	r6, [r4]
   2421c:	bl	2c330 <flatcc_json_parser_error_string@@Base>
   24220:	mov	r3, r0
   24224:	ldr	r2, [sp, #416]	; 0x1a0
   24228:	ldr	r1, [pc, #824]	; 24568 <test_json@@Base+0x428>
   2422c:	mov	r0, r6
   24230:	bl	145ac <fprintf@plt>
   24234:	ldr	r6, [r4]
   24238:	mov	r0, r8
   2423c:	bl	2c330 <flatcc_json_parser_error_string@@Base>
   24240:	mov	r2, r0
   24244:	ldr	r1, [pc, #800]	; 2456c <test_json@@Base+0x42c>
   24248:	mov	r0, r6
   2424c:	bl	145ac <fprintf@plt>
   24250:	mov	r2, r5
   24254:	ldr	r1, [pc, #788]	; 24570 <test_json@@Base+0x430>
   24258:	ldr	r0, [r4]
   2425c:	bl	145ac <fprintf@plt>
   24260:	ldr	r3, [sp, #104]	; 0x68
   24264:	sub	r3, r3, #1
   24268:	cmp	r3, #0
   2426c:	ble	2429c <test_json@@Base+0x15c>
   24270:	mov	r4, #0
   24274:	ldr	r6, [pc, #744]	; 24564 <test_json@@Base+0x424>
   24278:	mov	r5, #32
   2427c:	ldr	r1, [r6]
   24280:	mov	r0, r5
   24284:	bl	145f4 <fputc@plt>
   24288:	add	r4, r4, #1
   2428c:	ldr	r3, [sp, #104]	; 0x68
   24290:	sub	r3, r3, #1
   24294:	cmp	r3, r4
   24298:	bgt	2427c <test_json@@Base+0x13c>
   2429c:	ldr	r3, [pc, #704]	; 24564 <test_json@@Base+0x424>
   242a0:	ldr	r3, [r3]
   242a4:	mov	r2, #2
   242a8:	mov	r1, #1
   242ac:	ldr	r0, [pc, #704]	; 24574 <test_json@@Base+0x434>
   242b0:	bl	14570 <fwrite@plt>
   242b4:	mov	fp, #0
   242b8:	mvn	r4, #0
   242bc:	mov	r0, fp
   242c0:	bl	29684 <flatcc_builder_aligned_free@@Base>
   242c4:	add	r0, sp, #128	; 0x80
   242c8:	bl	25e6c <flatcc_builder_clear@@Base>
   242cc:	add	r0, sp, #40	; 0x28
   242d0:	bl	3c6a4 <flatcc_json_printer_clear@@Base>
   242d4:	mov	r0, r4
   242d8:	add	sp, sp, #372	; 0x174
   242dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242e0:	ldr	r4, [pc, #636]	; 24564 <test_json@@Base+0x424>
   242e4:	ldr	r6, [r4]
   242e8:	mov	r0, r8
   242ec:	bl	2c330 <flatcc_json_parser_error_string@@Base>
   242f0:	mov	r3, r0
   242f4:	ldr	r2, [sp, #416]	; 0x1a0
   242f8:	ldr	r1, [pc, #632]	; 24578 <test_json@@Base+0x438>
   242fc:	mov	r0, r6
   24300:	bl	145ac <fprintf@plt>
   24304:	mov	r2, r5
   24308:	ldr	r1, [pc, #608]	; 24570 <test_json@@Base+0x430>
   2430c:	ldr	r0, [r4]
   24310:	bl	145ac <fprintf@plt>
   24314:	b	24260 <test_json@@Base+0x120>
   24318:	ldr	r4, [pc, #580]	; 24564 <test_json@@Base+0x424>
   2431c:	ldr	r6, [r4]
   24320:	bl	2c330 <flatcc_json_parser_error_string@@Base>
   24324:	mov	r3, r0
   24328:	ldr	r2, [sp, #416]	; 0x1a0
   2432c:	ldr	r1, [pc, #584]	; 2457c <test_json@@Base+0x43c>
   24330:	mov	r0, r6
   24334:	bl	145ac <fprintf@plt>
   24338:	mov	r2, r5
   2433c:	ldr	r1, [pc, #556]	; 24570 <test_json@@Base+0x430>
   24340:	ldr	r0, [r4]
   24344:	bl	145ac <fprintf@plt>
   24348:	b	24260 <test_json@@Base+0x120>
   2434c:	cmp	r8, #0
   24350:	movne	fp, #0
   24354:	movne	r4, fp
   24358:	bne	242bc <test_json@@Base+0x17c>
   2435c:	add	r1, sp, #364	; 0x16c
   24360:	add	r0, sp, #128	; 0x80
   24364:	bl	29578 <flatcc_builder_finalize_aligned_buffer@@Base>
   24368:	mov	fp, r0
   2436c:	ldr	r3, [r6, #12]
   24370:	ldr	r2, [r6]
   24374:	ldr	r1, [sp, #364]	; 0x16c
   24378:	bl	2a9f4 <flatcc_verify_table_as_root@@Base>
   2437c:	cmp	r0, #0
   24380:	beq	243ec <test_json@@Base+0x2ac>
   24384:	ldr	r3, [pc, #472]	; 24564 <test_json@@Base+0x424>
   24388:	ldr	r4, [r3]
   2438c:	bl	29d14 <flatcc_verify_error_string@@Base>
   24390:	str	r0, [sp]
   24394:	ldr	r3, [sp, #416]	; 0x1a0
   24398:	ldr	r2, [pc, #480]	; 24580 <test_json@@Base+0x440>
   2439c:	ldr	r1, [pc, #480]	; 24584 <test_json@@Base+0x444>
   243a0:	mov	r0, r4
   243a4:	bl	145ac <fprintf@plt>
   243a8:	cmp	fp, #0
   243ac:	mvneq	r4, #0
   243b0:	beq	242bc <test_json@@Base+0x17c>
   243b4:	ldr	r8, [sp, #364]	; 0x16c
   243b8:	ldr	r3, [pc, #420]	; 24564 <test_json@@Base+0x424>
   243bc:	ldr	r6, [r3]
   243c0:	ldr	r2, [pc, #448]	; 24588 <test_json@@Base+0x448>
   243c4:	ldr	r1, [pc, #448]	; 2458c <test_json@@Base+0x44c>
   243c8:	mov	r0, r6
   243cc:	bl	145ac <fprintf@plt>
   243d0:	cmp	r8, #0
   243d4:	beq	2454c <test_json@@Base+0x40c>
   243d8:	sub	r7, fp, #1
   243dc:	mov	r4, #0
   243e0:	ldr	r9, [pc, #424]	; 24590 <test_json@@Base+0x450>
   243e4:	mov	sl, #46	; 0x2e
   243e8:	b	244ec <test_json@@Base+0x3ac>
   243ec:	ldr	r3, [r6]
   243f0:	ldr	r2, [r6, #8]
   243f4:	str	r2, [sp]
   243f8:	ldr	r2, [sp, #364]	; 0x16c
   243fc:	mov	r1, fp
   24400:	add	r0, sp, #40	; 0x28
   24404:	bl	3c084 <flatcc_json_printer_table_as_root@@Base>
   24408:	add	r1, sp, #360	; 0x168
   2440c:	add	r0, sp, #40	; 0x28
   24410:	bl	3c648 <flatcc_json_printer_get_buffer@@Base>
   24414:	subs	r5, r0, #0
   24418:	beq	24430 <test_json@@Base+0x2f0>
   2441c:	mov	r1, r5
   24420:	mov	r0, r7
   24424:	bl	14528 <strcmp@plt>
   24428:	subs	r4, r0, #0
   2442c:	beq	242bc <test_json@@Base+0x17c>
   24430:	ldr	r4, [pc, #300]	; 24564 <test_json@@Base+0x424>
   24434:	ldr	r2, [sp, #416]	; 0x1a0
   24438:	ldr	r1, [pc, #340]	; 24594 <test_json@@Base+0x454>
   2443c:	ldr	r0, [r4]
   24440:	bl	145ac <fprintf@plt>
   24444:	ldr	r6, [pc, #292]	; 24570 <test_json@@Base+0x430>
   24448:	mov	r2, r5
   2444c:	mov	r1, r6
   24450:	ldr	r0, [r4]
   24454:	bl	145ac <fprintf@plt>
   24458:	ldr	r3, [r4]
   2445c:	mov	r2, #10
   24460:	mov	r1, #1
   24464:	ldr	r0, [pc, #300]	; 24598 <test_json@@Base+0x458>
   24468:	bl	14570 <fwrite@plt>
   2446c:	mov	r2, r7
   24470:	mov	r1, r6
   24474:	ldr	r0, [r4]
   24478:	bl	145ac <fprintf@plt>
   2447c:	b	243a8 <test_json@@Base+0x268>
   24480:	add	r2, sp, #20
   24484:	ldr	r1, [pc, #272]	; 2459c <test_json@@Base+0x45c>
   24488:	mov	r0, r6
   2448c:	bl	145ac <fprintf@plt>
   24490:	mov	r2, r4
   24494:	ldr	r1, [pc, #260]	; 245a0 <test_json@@Base+0x460>
   24498:	mov	r0, r6
   2449c:	bl	145ac <fprintf@plt>
   244a0:	ldrb	r2, [r7, #1]
   244a4:	mov	r1, r9
   244a8:	mov	r0, r6
   244ac:	bl	145ac <fprintf@plt>
   244b0:	ldrb	r2, [r7, #1]!
   244b4:	sub	r3, r2, #32
   244b8:	uxtb	r3, r3
   244bc:	cmp	r3, #94	; 0x5e
   244c0:	add	r3, sp, #368	; 0x170
   244c4:	add	r3, r3, r5
   244c8:	strbhi	sl, [r3, #-348]	; 0xfffffea4
   244cc:	strbls	r2, [r3, #-348]	; 0xfffffea4
   244d0:	add	r3, sp, #368	; 0x170
   244d4:	add	r5, r3, r5
   244d8:	mov	r3, #0
   244dc:	strb	r3, [r5, #-347]	; 0xfffffea5
   244e0:	add	r4, r4, #1
   244e4:	cmp	r8, r4
   244e8:	beq	24518 <test_json@@Base+0x3d8>
   244ec:	ands	r5, r4, #15
   244f0:	bne	24500 <test_json@@Base+0x3c0>
   244f4:	cmp	r4, #0
   244f8:	bne	24480 <test_json@@Base+0x340>
   244fc:	b	24490 <test_json@@Base+0x350>
   24500:	tst	r4, #7
   24504:	bne	244a0 <test_json@@Base+0x360>
   24508:	mov	r1, r6
   2450c:	mov	r0, #32
   24510:	bl	145f4 <fputc@plt>
   24514:	b	244a0 <test_json@@Base+0x360>
   24518:	tst	r4, #15
   2451c:	beq	2454c <test_json@@Base+0x40c>
   24520:	ldr	r8, [pc, #124]	; 245a4 <test_json@@Base+0x464>
   24524:	mov	r7, #3
   24528:	mov	r5, #1
   2452c:	mov	r3, r6
   24530:	mov	r2, r7
   24534:	mov	r1, r5
   24538:	mov	r0, r8
   2453c:	bl	14570 <fwrite@plt>
   24540:	add	r4, r4, #1
   24544:	tst	r4, #15
   24548:	bne	2452c <test_json@@Base+0x3ec>
   2454c:	add	r2, sp, #20
   24550:	ldr	r1, [pc, #68]	; 2459c <test_json@@Base+0x45c>
   24554:	mov	r0, r6
   24558:	bl	145ac <fprintf@plt>
   2455c:	mvn	r4, #0
   24560:	b	242bc <test_json@@Base+0x17c>
   24564:	andeq	r3, r5, r0, asr #6
   24568:	andeq	sp, r3, r8, asr #10
   2456c:	andeq	sp, r3, r0, ror r5
   24570:	andeq	sp, r3, ip, asr #11
   24574:	strdeq	sp, [r3], -r4
   24578:	muleq	r3, r0, r5
   2457c:	ldrdeq	sp, [r3], -r0
   24580:	strdeq	sp, [r3], -r8
   24584:	andeq	sp, r3, r4, asr #12
   24588:			; <UNDEFINED> instruction: 0x0003d6b0
   2458c:	andeq	sp, r3, r0, asr #13
   24590:	ldrdeq	sp, [r3], -r8
   24594:	andeq	sp, r3, ip, ror #12
   24598:	andeq	sp, r3, r4, lsr #13
   2459c:	andeq	sp, r3, r8, asr #13
   245a0:	ldrdeq	sp, [r3], -r0
   245a4:	andeq	sp, r3, r0, ror #13

000245a8 <edge_case_tests@@Base>:
   245a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   245ac:	sub	sp, sp, #20
   245b0:	ldr	r6, [pc, #400]	; 24748 <edge_case_tests@@Base+0x1a0>
   245b4:	mov	r3, #158	; 0x9e
   245b8:	str	r3, [sp, #8]
   245bc:	mov	r4, #0
   245c0:	str	r4, [sp, #4]
   245c4:	str	r4, [sp]
   245c8:	mov	r3, r4
   245cc:	ldr	r2, [pc, #376]	; 2474c <edge_case_tests@@Base+0x1a4>
   245d0:	ldr	r1, [pc, #376]	; 24750 <edge_case_tests@@Base+0x1a8>
   245d4:	mov	r0, r6
   245d8:	bl	24140 <test_json@@Base>
   245dc:	mov	r5, r0
   245e0:	ldr	r8, [pc, #364]	; 24754 <edge_case_tests@@Base+0x1ac>
   245e4:	ldr	r9, [pc, #364]	; 24758 <edge_case_tests@@Base+0x1b0>
   245e8:	mov	r3, #168	; 0xa8
   245ec:	str	r3, [sp, #8]
   245f0:	str	r4, [sp, #4]
   245f4:	mov	r7, #2
   245f8:	str	r7, [sp]
   245fc:	mov	r3, r4
   24600:	mov	r2, r8
   24604:	mov	r1, r9
   24608:	mov	r0, r6
   2460c:	bl	24140 <test_json@@Base>
   24610:	orr	r5, r5, r0
   24614:	mov	r3, #172	; 0xac
   24618:	str	r3, [sp, #8]
   2461c:	str	r7, [sp, #4]
   24620:	str	r4, [sp]
   24624:	mov	r3, r4
   24628:	ldr	r2, [pc, #300]	; 2475c <edge_case_tests@@Base+0x1b4>
   2462c:	ldr	r1, [pc, #300]	; 24760 <edge_case_tests@@Base+0x1b8>
   24630:	mov	r0, r6
   24634:	bl	24140 <test_json@@Base>
   24638:	orr	r5, r5, r0
   2463c:	mov	r3, #176	; 0xb0
   24640:	str	r3, [sp, #8]
   24644:	mov	r3, #4
   24648:	str	r3, [sp, #4]
   2464c:	str	r7, [sp]
   24650:	mov	r3, r4
   24654:	ldr	r2, [pc, #264]	; 24764 <edge_case_tests@@Base+0x1bc>
   24658:	mov	r1, r9
   2465c:	mov	r0, r6
   24660:	bl	24140 <test_json@@Base>
   24664:	orr	r5, r5, r0
   24668:	mov	r3, #180	; 0xb4
   2466c:	str	r3, [sp, #8]
   24670:	mov	r3, #8
   24674:	str	r3, [sp, #4]
   24678:	str	r4, [sp]
   2467c:	mov	r3, r4
   24680:	ldr	r2, [pc, #224]	; 24768 <edge_case_tests@@Base+0x1c0>
   24684:	ldr	r1, [pc, #224]	; 2476c <edge_case_tests@@Base+0x1c4>
   24688:	mov	r0, r6
   2468c:	bl	24140 <test_json@@Base>
   24690:	orr	r5, r5, r0
   24694:	mov	r3, #195	; 0xc3
   24698:	str	r3, [sp, #8]
   2469c:	str	r4, [sp, #4]
   246a0:	str	r7, [sp]
   246a4:	mov	r3, r4
   246a8:	mov	r2, r8
   246ac:	ldr	r1, [pc, #188]	; 24770 <edge_case_tests@@Base+0x1c8>
   246b0:	mov	r0, r6
   246b4:	bl	24140 <test_json@@Base>
   246b8:	orr	r5, r5, r0
   246bc:	ldr	r8, [pc, #176]	; 24774 <edge_case_tests@@Base+0x1cc>
   246c0:	ldr	r9, [pc, #176]	; 24778 <edge_case_tests@@Base+0x1d0>
   246c4:	mov	r3, #199	; 0xc7
   246c8:	str	r3, [sp, #8]
   246cc:	str	r4, [sp, #4]
   246d0:	mov	r7, #1
   246d4:	str	r7, [sp]
   246d8:	mov	r3, r4
   246dc:	mov	r2, r8
   246e0:	mov	r1, r9
   246e4:	mov	r0, r6
   246e8:	bl	24140 <test_json@@Base>
   246ec:	orr	r5, r5, r0
   246f0:	mov	r3, #203	; 0xcb
   246f4:	str	r3, [sp, #8]
   246f8:	str	r7, [sp, #4]
   246fc:	str	r7, [sp]
   24700:	mov	r3, r4
   24704:	ldr	r2, [pc, #112]	; 2477c <edge_case_tests@@Base+0x1d4>
   24708:	mov	r1, r9
   2470c:	mov	r0, r6
   24710:	bl	24140 <test_json@@Base>
   24714:	orr	r5, r5, r0
   24718:	mov	r3, #209	; 0xd1
   2471c:	str	r3, [sp, #8]
   24720:	str	r4, [sp, #4]
   24724:	str	r7, [sp]
   24728:	mov	r3, r4
   2472c:	mov	r2, r8
   24730:	ldr	r1, [pc, #72]	; 24780 <edge_case_tests@@Base+0x1d8>
   24734:	mov	r0, r6
   24738:	bl	24140 <test_json@@Base>
   2473c:	orr	r0, r5, r0
   24740:	add	sp, sp, #20
   24744:	pop	{r4, r5, r6, r7, r8, r9, pc}
   24748:	ldrdeq	sp, [r3], -r4
   2474c:	andeq	sp, r3, r4, ror #13
   24750:	andeq	sp, r3, r4, lsl #14
   24754:	andeq	sp, r3, ip, lsr r7
   24758:	andeq	sp, r3, r0, ror #14
   2475c:	andeq	sp, r3, r4, lsl #15
   24760:	andeq	sp, r3, r4, lsr #15
   24764:	andeq	sp, r3, ip, asr #15
   24768:	andeq	sp, r3, r0, ror #15
   2476c:	strdeq	sp, [r3], -r4
   24770:	andeq	sp, r3, r8, lsl r9
   24774:	andeq	sp, r3, r0, asr #18
   24778:	andeq	sp, r3, ip, asr r9
   2477c:	muleq	r3, r0, r9
   24780:	andeq	sp, r3, r8, lsr #19

00024784 <error_case_tests@@Base>:
   24784:	push	{r4, r5, r6, lr}
   24788:	sub	sp, sp, #16
   2478c:	ldr	r6, [pc, #488]	; 2497c <error_case_tests@@Base+0x1f8>
   24790:	ldr	r3, [pc, #488]	; 24980 <error_case_tests@@Base+0x1fc>
   24794:	str	r3, [sp, #8]
   24798:	mov	r4, #0
   2479c:	str	r4, [sp, #4]
   247a0:	str	r4, [sp]
   247a4:	mov	r3, #13
   247a8:	mov	r2, r4
   247ac:	ldr	r1, [pc, #464]	; 24984 <error_case_tests@@Base+0x200>
   247b0:	mov	r0, r6
   247b4:	bl	24140 <test_json@@Base>
   247b8:	mov	r5, r0
   247bc:	ldr	r3, [pc, #452]	; 24988 <error_case_tests@@Base+0x204>
   247c0:	str	r3, [sp, #8]
   247c4:	str	r4, [sp, #4]
   247c8:	str	r4, [sp]
   247cc:	mov	r3, #13
   247d0:	mov	r2, r4
   247d4:	ldr	r1, [pc, #432]	; 2498c <error_case_tests@@Base+0x208>
   247d8:	mov	r0, r6
   247dc:	bl	24140 <test_json@@Base>
   247e0:	orr	r5, r5, r0
   247e4:	ldr	r3, [pc, #420]	; 24990 <error_case_tests@@Base+0x20c>
   247e8:	str	r3, [sp, #8]
   247ec:	str	r4, [sp, #4]
   247f0:	str	r4, [sp]
   247f4:	mov	r3, #13
   247f8:	mov	r2, r4
   247fc:	ldr	r1, [pc, #400]	; 24994 <error_case_tests@@Base+0x210>
   24800:	mov	r0, r6
   24804:	bl	24140 <test_json@@Base>
   24808:	orr	r5, r5, r0
   2480c:	ldr	r3, [pc, #388]	; 24998 <error_case_tests@@Base+0x214>
   24810:	str	r3, [sp, #8]
   24814:	str	r4, [sp, #4]
   24818:	str	r4, [sp]
   2481c:	mov	r3, #13
   24820:	mov	r2, r4
   24824:	ldr	r1, [pc, #368]	; 2499c <error_case_tests@@Base+0x218>
   24828:	mov	r0, r6
   2482c:	bl	24140 <test_json@@Base>
   24830:	orr	r5, r5, r0
   24834:	ldr	r3, [pc, #356]	; 249a0 <error_case_tests@@Base+0x21c>
   24838:	str	r3, [sp, #8]
   2483c:	str	r4, [sp, #4]
   24840:	str	r4, [sp]
   24844:	mov	r3, #13
   24848:	mov	r2, r4
   2484c:	ldr	r1, [pc, #336]	; 249a4 <error_case_tests@@Base+0x220>
   24850:	mov	r0, r6
   24854:	bl	24140 <test_json@@Base>
   24858:	orr	r5, r5, r0
   2485c:	mov	r3, #296	; 0x128
   24860:	str	r3, [sp, #8]
   24864:	str	r4, [sp, #4]
   24868:	str	r4, [sp]
   2486c:	mov	r3, #13
   24870:	mov	r2, r4
   24874:	ldr	r1, [pc, #300]	; 249a8 <error_case_tests@@Base+0x224>
   24878:	mov	r0, r6
   2487c:	bl	24140 <test_json@@Base>
   24880:	orr	r5, r5, r0
   24884:	ldr	r3, [pc, #288]	; 249ac <error_case_tests@@Base+0x228>
   24888:	str	r3, [sp, #8]
   2488c:	str	r4, [sp, #4]
   24890:	str	r4, [sp]
   24894:	mov	r3, #13
   24898:	mov	r2, r4
   2489c:	ldr	r1, [pc, #268]	; 249b0 <error_case_tests@@Base+0x22c>
   248a0:	mov	r0, r6
   248a4:	bl	24140 <test_json@@Base>
   248a8:	orr	r5, r5, r0
   248ac:	ldr	r3, [pc, #256]	; 249b4 <error_case_tests@@Base+0x230>
   248b0:	str	r3, [sp, #8]
   248b4:	str	r4, [sp, #4]
   248b8:	str	r4, [sp]
   248bc:	mov	r3, #13
   248c0:	mov	r2, r4
   248c4:	ldr	r1, [pc, #236]	; 249b8 <error_case_tests@@Base+0x234>
   248c8:	mov	r0, r6
   248cc:	bl	24140 <test_json@@Base>
   248d0:	orr	r5, r5, r0
   248d4:	ldr	r3, [pc, #224]	; 249bc <error_case_tests@@Base+0x238>
   248d8:	str	r3, [sp, #8]
   248dc:	str	r4, [sp, #4]
   248e0:	str	r4, [sp]
   248e4:	mov	r3, #13
   248e8:	mov	r2, r4
   248ec:	ldr	r1, [pc, #204]	; 249c0 <error_case_tests@@Base+0x23c>
   248f0:	mov	r0, r6
   248f4:	bl	24140 <test_json@@Base>
   248f8:	orr	r5, r5, r0
   248fc:	ldr	r3, [pc, #192]	; 249c4 <error_case_tests@@Base+0x240>
   24900:	str	r3, [sp, #8]
   24904:	str	r4, [sp, #4]
   24908:	str	r4, [sp]
   2490c:	mov	r3, #5
   24910:	mov	r2, r4
   24914:	ldr	r1, [pc, #172]	; 249c8 <error_case_tests@@Base+0x244>
   24918:	mov	r0, r6
   2491c:	bl	24140 <test_json@@Base>
   24920:	orr	r5, r5, r0
   24924:	ldr	r3, [pc, #160]	; 249cc <error_case_tests@@Base+0x248>
   24928:	str	r3, [sp, #8]
   2492c:	str	r4, [sp, #4]
   24930:	str	r4, [sp]
   24934:	mov	r3, #5
   24938:	mov	r2, r4
   2493c:	ldr	r1, [pc, #140]	; 249d0 <error_case_tests@@Base+0x24c>
   24940:	mov	r0, r6
   24944:	bl	24140 <test_json@@Base>
   24948:	orr	r5, r5, r0
   2494c:	ldr	r3, [pc, #128]	; 249d4 <error_case_tests@@Base+0x250>
   24950:	str	r3, [sp, #8]
   24954:	str	r4, [sp, #4]
   24958:	str	r4, [sp]
   2495c:	mov	r3, #5
   24960:	mov	r2, r4
   24964:	ldr	r1, [pc, #108]	; 249d8 <error_case_tests@@Base+0x254>
   24968:	mov	r0, r6
   2496c:	bl	24140 <test_json@@Base>
   24970:	orr	r0, r5, r0
   24974:	add	sp, sp, #16
   24978:	pop	{r4, r5, r6, pc}
   2497c:	ldrdeq	sp, [r3], -r4
   24980:	andeq	r0, r0, sp, lsl r1
   24984:	andeq	sp, r3, ip, lsl sl
   24988:	andeq	r0, r0, pc, lsl r1
   2498c:	andeq	sp, r3, r8, lsr sl
   24990:	andeq	r0, r0, r1, lsr #2
   24994:	muleq	r3, ip, sl
   24998:	andeq	r0, r0, r3, lsr #2
   2499c:	strdeq	sp, [r3], -ip
   249a0:	andeq	r0, r0, r5, lsr #2
   249a4:	andeq	sp, r3, r4, asr fp
   249a8:	andeq	sp, r3, ip, lsr #23
   249ac:	andeq	r0, r0, fp, lsr #2
   249b0:	andeq	sp, r3, ip, asr #24
   249b4:	andeq	r0, r0, pc, lsr #2
   249b8:	andeq	sp, r3, r8, ror #25
   249bc:	andeq	r0, r0, r3, lsr r1
   249c0:			; <UNDEFINED> instruction: 0x0003ddb0
   249c4:	andeq	r0, r0, r7, lsr r1
   249c8:	andeq	sp, r3, r8, ror lr
   249cc:	andeq	r0, r0, sl, lsr r1
   249d0:	muleq	r3, r0, lr
   249d4:	andeq	r0, r0, sp, lsr r1
   249d8:			; <UNDEFINED> instruction: 0x0003deb8

000249dc <base64_tests@@Base>:
   249dc:	push	{r4, r5, r6, r7, r8, lr}
   249e0:	sub	sp, sp, #16
   249e4:	ldr	r6, [pc, #336]	; 24b3c <base64_tests@@Base+0x160>
   249e8:	ldr	r3, [pc, #336]	; 24b40 <base64_tests@@Base+0x164>
   249ec:	str	r3, [sp, #8]
   249f0:	mov	r4, #0
   249f4:	str	r4, [sp, #4]
   249f8:	str	r4, [sp]
   249fc:	mov	r3, r4
   24a00:	ldr	r2, [pc, #316]	; 24b44 <base64_tests@@Base+0x168>
   24a04:	ldr	r1, [pc, #316]	; 24b48 <base64_tests@@Base+0x16c>
   24a08:	mov	r0, r6
   24a0c:	bl	24140 <test_json@@Base>
   24a10:	mov	r5, r0
   24a14:	mov	r3, #372	; 0x174
   24a18:	str	r3, [sp, #8]
   24a1c:	str	r4, [sp, #4]
   24a20:	str	r4, [sp]
   24a24:	mov	r3, r4
   24a28:	ldr	r2, [pc, #284]	; 24b4c <base64_tests@@Base+0x170>
   24a2c:	ldr	r1, [pc, #284]	; 24b50 <base64_tests@@Base+0x174>
   24a30:	mov	r0, r6
   24a34:	bl	24140 <test_json@@Base>
   24a38:	orr	r5, r5, r0
   24a3c:	ldr	r8, [pc, #272]	; 24b54 <base64_tests@@Base+0x178>
   24a40:	mov	r3, #376	; 0x178
   24a44:	str	r3, [sp, #8]
   24a48:	str	r4, [sp, #4]
   24a4c:	str	r4, [sp]
   24a50:	mov	r3, r4
   24a54:	mov	r2, r8
   24a58:	ldr	r1, [pc, #248]	; 24b58 <base64_tests@@Base+0x17c>
   24a5c:	mov	r0, r6
   24a60:	bl	24140 <test_json@@Base>
   24a64:	orr	r5, r5, r0
   24a68:	ldr	r7, [pc, #236]	; 24b5c <base64_tests@@Base+0x180>
   24a6c:	ldr	r3, [pc, #236]	; 24b60 <base64_tests@@Base+0x184>
   24a70:	str	r3, [sp, #8]
   24a74:	str	r4, [sp, #4]
   24a78:	str	r4, [sp]
   24a7c:	mov	r3, r4
   24a80:	mov	r2, r7
   24a84:	ldr	r1, [pc, #216]	; 24b64 <base64_tests@@Base+0x188>
   24a88:	mov	r0, r6
   24a8c:	bl	24140 <test_json@@Base>
   24a90:	orr	r5, r5, r0
   24a94:	ldr	r3, [pc, #204]	; 24b68 <base64_tests@@Base+0x18c>
   24a98:	str	r3, [sp, #8]
   24a9c:	str	r4, [sp, #4]
   24aa0:	str	r4, [sp]
   24aa4:	mov	r3, r4
   24aa8:	mov	r2, r8
   24aac:	ldr	r1, [pc, #184]	; 24b6c <base64_tests@@Base+0x190>
   24ab0:	mov	r0, r6
   24ab4:	bl	24140 <test_json@@Base>
   24ab8:	orr	r5, r5, r0
   24abc:	ldr	r3, [pc, #172]	; 24b70 <base64_tests@@Base+0x194>
   24ac0:	str	r3, [sp, #8]
   24ac4:	str	r4, [sp, #4]
   24ac8:	str	r4, [sp]
   24acc:	mov	r3, r4
   24ad0:	mov	r2, r7
   24ad4:	ldr	r1, [pc, #152]	; 24b74 <base64_tests@@Base+0x198>
   24ad8:	mov	r0, r6
   24adc:	bl	24140 <test_json@@Base>
   24ae0:	orr	r5, r5, r0
   24ae4:	mov	r3, #388	; 0x184
   24ae8:	str	r3, [sp, #8]
   24aec:	str	r4, [sp, #4]
   24af0:	str	r4, [sp]
   24af4:	mov	r3, #31
   24af8:	mov	r2, r4
   24afc:	ldr	r1, [pc, #116]	; 24b78 <base64_tests@@Base+0x19c>
   24b00:	mov	r0, r6
   24b04:	bl	24140 <test_json@@Base>
   24b08:	orr	r5, r5, r0
   24b0c:	ldr	r3, [pc, #104]	; 24b7c <base64_tests@@Base+0x1a0>
   24b10:	str	r3, [sp, #8]
   24b14:	str	r4, [sp, #4]
   24b18:	str	r4, [sp]
   24b1c:	mov	r3, #32
   24b20:	mov	r2, r4
   24b24:	ldr	r1, [pc, #84]	; 24b80 <base64_tests@@Base+0x1a4>
   24b28:	mov	r0, r6
   24b2c:	bl	24140 <test_json@@Base>
   24b30:	orr	r0, r5, r0
   24b34:	add	sp, sp, #16
   24b38:	pop	{r4, r5, r6, r7, r8, pc}
   24b3c:	ldrdeq	sp, [r3], -r4
   24b40:	andeq	r0, r0, r1, ror r1
   24b44:	andeq	sp, r3, ip, asr #15
   24b48:	strdeq	sp, [r3], -r0
   24b4c:	andeq	sp, r3, r8, lsl #30
   24b50:	andeq	sp, r3, ip, lsr #30
   24b54:	andeq	sp, r3, r4, asr pc
   24b58:	andeq	lr, r3, r8
   24b5c:	andeq	lr, r3, r4, asr #1
   24b60:	andeq	r0, r0, fp, ror r1
   24b64:	andeq	lr, r3, ip, ror r1
   24b68:	andeq	r0, r0, lr, ror r1
   24b6c:	andeq	lr, r3, r8, lsr r2
   24b70:	andeq	r0, r0, r1, lsl #3
   24b74:	strdeq	lr, [r3], -r0
   24b78:	andeq	lr, r3, ip, lsr #7
   24b7c:	andeq	r0, r0, r7, lsl #3
   24b80:	andeq	lr, r3, r8, ror #8

00024b84 <mixed_type_union_tests@@Base>:
   24b84:	push	{r4, r5, r6, r7, lr}
   24b88:	sub	sp, sp, #20
   24b8c:	ldr	r6, [pc, #292]	; 24cb8 <mixed_type_union_tests@@Base+0x134>
   24b90:	mov	r3, #432	; 0x1b0
   24b94:	str	r3, [sp, #8]
   24b98:	mov	r4, #0
   24b9c:	str	r4, [sp, #4]
   24ba0:	str	r4, [sp]
   24ba4:	mov	r3, r4
   24ba8:	ldr	r2, [pc, #268]	; 24cbc <mixed_type_union_tests@@Base+0x138>
   24bac:	ldr	r1, [pc, #268]	; 24cc0 <mixed_type_union_tests@@Base+0x13c>
   24bb0:	mov	r0, r6
   24bb4:	bl	24140 <test_json@@Base>
   24bb8:	mov	r5, r0
   24bbc:	ldr	r7, [pc, #256]	; 24cc4 <mixed_type_union_tests@@Base+0x140>
   24bc0:	ldr	r3, [pc, #256]	; 24cc8 <mixed_type_union_tests@@Base+0x144>
   24bc4:	str	r3, [sp, #8]
   24bc8:	str	r4, [sp, #4]
   24bcc:	str	r4, [sp]
   24bd0:	mov	r3, r4
   24bd4:	mov	r2, r7
   24bd8:	ldr	r1, [pc, #236]	; 24ccc <mixed_type_union_tests@@Base+0x148>
   24bdc:	mov	r0, r6
   24be0:	bl	24140 <test_json@@Base>
   24be4:	orr	r5, r5, r0
   24be8:	ldr	r3, [pc, #224]	; 24cd0 <mixed_type_union_tests@@Base+0x14c>
   24bec:	str	r3, [sp, #8]
   24bf0:	str	r4, [sp, #4]
   24bf4:	str	r4, [sp]
   24bf8:	mov	r3, r4
   24bfc:	mov	r2, r7
   24c00:	ldr	r1, [pc, #204]	; 24cd4 <mixed_type_union_tests@@Base+0x150>
   24c04:	mov	r0, r6
   24c08:	bl	24140 <test_json@@Base>
   24c0c:	orr	r5, r5, r0
   24c10:	ldr	r3, [pc, #192]	; 24cd8 <mixed_type_union_tests@@Base+0x154>
   24c14:	str	r3, [sp, #8]
   24c18:	str	r4, [sp, #4]
   24c1c:	str	r4, [sp]
   24c20:	mov	r3, r4
   24c24:	ldr	r2, [pc, #176]	; 24cdc <mixed_type_union_tests@@Base+0x158>
   24c28:	ldr	r1, [pc, #176]	; 24ce0 <mixed_type_union_tests@@Base+0x15c>
   24c2c:	mov	r0, r6
   24c30:	bl	24140 <test_json@@Base>
   24c34:	orr	r5, r5, r0
   24c38:	ldr	r3, [pc, #164]	; 24ce4 <mixed_type_union_tests@@Base+0x160>
   24c3c:	str	r3, [sp, #8]
   24c40:	str	r4, [sp, #4]
   24c44:	str	r4, [sp]
   24c48:	mov	r3, r4
   24c4c:	ldr	r2, [pc, #148]	; 24ce8 <mixed_type_union_tests@@Base+0x164>
   24c50:	ldr	r1, [pc, #148]	; 24cec <mixed_type_union_tests@@Base+0x168>
   24c54:	mov	r0, r6
   24c58:	bl	24140 <test_json@@Base>
   24c5c:	orr	r5, r5, r0
   24c60:	ldr	r3, [pc, #136]	; 24cf0 <mixed_type_union_tests@@Base+0x16c>
   24c64:	str	r3, [sp, #8]
   24c68:	str	r4, [sp, #4]
   24c6c:	str	r4, [sp]
   24c70:	mov	r3, r4
   24c74:	ldr	r2, [pc, #120]	; 24cf4 <mixed_type_union_tests@@Base+0x170>
   24c78:	ldr	r1, [pc, #120]	; 24cf8 <mixed_type_union_tests@@Base+0x174>
   24c7c:	mov	r0, r6
   24c80:	bl	24140 <test_json@@Base>
   24c84:	orr	r5, r5, r0
   24c88:	ldr	r3, [pc, #108]	; 24cfc <mixed_type_union_tests@@Base+0x178>
   24c8c:	str	r3, [sp, #8]
   24c90:	str	r4, [sp, #4]
   24c94:	str	r4, [sp]
   24c98:	mov	r3, r4
   24c9c:	mov	r2, r7
   24ca0:	ldr	r1, [pc, #88]	; 24d00 <mixed_type_union_tests@@Base+0x17c>
   24ca4:	mov	r0, r6
   24ca8:	bl	24140 <test_json@@Base>
   24cac:	orr	r0, r5, r0
   24cb0:	add	sp, sp, #20
   24cb4:	pop	{r4, r5, r6, r7, pc}
   24cb8:	andeq	sp, r3, r4, ror #1
   24cbc:	andeq	lr, r3, r4, lsr #10
   24cc0:	andeq	lr, r3, ip, ror #10
   24cc4:			; <UNDEFINED> instruction: 0x0003e5bc
   24cc8:			; <UNDEFINED> instruction: 0x000001b5
   24ccc:	andeq	lr, r3, r4, lsr r6
   24cd0:			; <UNDEFINED> instruction: 0x000001ba
   24cd4:			; <UNDEFINED> instruction: 0x0003e6b8
   24cd8:	andeq	r0, r0, r1, asr #3
   24cdc:	andeq	lr, r3, r0, asr r7
   24ce0:	andeq	lr, r3, ip, lsl #16
   24ce4:	andeq	r0, r0, sl, asr #3
   24ce8:	andeq	lr, r3, ip, ror #17
   24cec:	andeq	lr, r3, ip, asr #19
   24cf0:	ldrdeq	r0, [r0], -r5
   24cf4:	ldrdeq	lr, [r3], -r4
   24cf8:	andeq	lr, r3, ip, lsl ip
   24cfc:	ldrdeq	r0, [r0], -sl
   24d00:	andeq	lr, r3, r0, lsr #27

00024d04 <union_vector_tests@@Base>:
   24d04:	push	{r4, r5, r6, r7, lr}
   24d08:	sub	sp, sp, #20
   24d0c:	ldr	r7, [pc, #252]	; 24e10 <union_vector_tests@@Base+0x10c>
   24d10:	ldr	r6, [pc, #252]	; 24e14 <union_vector_tests@@Base+0x110>
   24d14:	ldr	r3, [pc, #252]	; 24e18 <union_vector_tests@@Base+0x114>
   24d18:	str	r3, [sp, #8]
   24d1c:	mov	r4, #0
   24d20:	str	r4, [sp, #4]
   24d24:	str	r4, [sp]
   24d28:	mov	r3, r4
   24d2c:	mov	r2, r7
   24d30:	ldr	r1, [pc, #228]	; 24e1c <union_vector_tests@@Base+0x118>
   24d34:	mov	r0, r6
   24d38:	bl	24140 <test_json@@Base>
   24d3c:	mov	r5, r0
   24d40:	mov	r3, #488	; 0x1e8
   24d44:	str	r3, [sp, #8]
   24d48:	str	r4, [sp, #4]
   24d4c:	str	r4, [sp]
   24d50:	mov	r3, r4
   24d54:	ldr	r2, [pc, #196]	; 24e20 <union_vector_tests@@Base+0x11c>
   24d58:	ldr	r1, [pc, #196]	; 24e24 <union_vector_tests@@Base+0x120>
   24d5c:	mov	r0, r6
   24d60:	bl	24140 <test_json@@Base>
   24d64:	orr	r5, r5, r0
   24d68:	ldr	r3, [pc, #184]	; 24e28 <union_vector_tests@@Base+0x124>
   24d6c:	str	r3, [sp, #8]
   24d70:	str	r4, [sp, #4]
   24d74:	str	r4, [sp]
   24d78:	mov	r3, r4
   24d7c:	ldr	r2, [pc, #168]	; 24e2c <union_vector_tests@@Base+0x128>
   24d80:	ldr	r1, [pc, #168]	; 24e30 <union_vector_tests@@Base+0x12c>
   24d84:	mov	r0, r6
   24d88:	bl	24140 <test_json@@Base>
   24d8c:	orr	r5, r5, r0
   24d90:	ldr	r3, [pc, #156]	; 24e34 <union_vector_tests@@Base+0x130>
   24d94:	str	r3, [sp, #8]
   24d98:	str	r4, [sp, #4]
   24d9c:	str	r4, [sp]
   24da0:	mov	r3, r4
   24da4:	ldr	r2, [pc, #140]	; 24e38 <union_vector_tests@@Base+0x134>
   24da8:	ldr	r1, [pc, #140]	; 24e3c <union_vector_tests@@Base+0x138>
   24dac:	mov	r0, r6
   24db0:	bl	24140 <test_json@@Base>
   24db4:	orr	r5, r5, r0
   24db8:	ldr	r3, [pc, #128]	; 24e40 <union_vector_tests@@Base+0x13c>
   24dbc:	str	r3, [sp, #8]
   24dc0:	str	r4, [sp, #4]
   24dc4:	str	r4, [sp]
   24dc8:	mov	r3, r4
   24dcc:	mov	r2, r7
   24dd0:	ldr	r1, [pc, #108]	; 24e44 <union_vector_tests@@Base+0x140>
   24dd4:	mov	r0, r6
   24dd8:	bl	24140 <test_json@@Base>
   24ddc:	orr	r5, r5, r0
   24de0:	mov	r3, #500	; 0x1f4
   24de4:	str	r3, [sp, #8]
   24de8:	str	r4, [sp, #4]
   24dec:	str	r4, [sp]
   24df0:	mov	r3, r4
   24df4:	ldr	r2, [pc, #76]	; 24e48 <union_vector_tests@@Base+0x144>
   24df8:	ldr	r1, [pc, #76]	; 24e4c <union_vector_tests@@Base+0x148>
   24dfc:	mov	r0, r6
   24e00:	bl	24140 <test_json@@Base>
   24e04:	orr	r0, r5, r0
   24e08:	add	sp, sp, #20
   24e0c:	pop	{r4, r5, r6, r7, pc}
   24e10:	andeq	lr, r3, r0, lsr lr
   24e14:	strdeq	sp, [r3], -r4
   24e18:	andeq	r0, r0, r5, ror #3
   24e1c:	andeq	lr, r3, r8, ror #28
   24e20:	andeq	lr, r3, r8, lsr #29
   24e24:	ldrdeq	lr, [r3], -r4
   24e28:	andeq	r0, r0, fp, ror #3
   24e2c:	andeq	lr, r3, r8, lsl #30
   24e30:	andeq	lr, r3, ip, asr #30
   24e34:	andeq	r0, r0, lr, ror #3
   24e38:	muleq	r3, ip, pc	; <UNPREDICTABLE>
   24e3c:	andeq	pc, r3, r8
   24e40:	strdeq	r0, [r0], -r1
   24e44:	andeq	pc, r3, r8, lsl #1
   24e48:	andeq	pc, r3, r8, asr #1
   24e4c:	andeq	pc, r3, r4, lsr #2

00024e50 <main@@Base>:
   24e50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24e54:	sub	sp, sp, #16
   24e58:	bl	245a8 <edge_case_tests@@Base>
   24e5c:	mov	r5, r0
   24e60:	bl	24784 <error_case_tests@@Base>
   24e64:	orr	r5, r5, r0
   24e68:	bl	24d04 <union_vector_tests@@Base>
   24e6c:	orr	r5, r5, r0
   24e70:	bl	249dc <base64_tests@@Base>
   24e74:	orr	r5, r5, r0
   24e78:	bl	24b84 <mixed_type_union_tests@@Base>
   24e7c:	orr	r5, r5, r0
   24e80:	ldr	r7, [pc, #1604]	; 254cc <main@@Base+0x67c>
   24e84:	ldr	r6, [pc, #1604]	; 254d0 <main@@Base+0x680>
   24e88:	ldr	r3, [pc, #1604]	; 254d4 <main@@Base+0x684>
   24e8c:	str	r3, [sp, #8]
   24e90:	mov	r4, #0
   24e94:	str	r4, [sp, #4]
   24e98:	str	r4, [sp]
   24e9c:	mov	r3, r4
   24ea0:	mov	r2, r7
   24ea4:	ldr	r1, [pc, #1580]	; 254d8 <main@@Base+0x688>
   24ea8:	mov	r0, r6
   24eac:	bl	24140 <test_json@@Base>
   24eb0:	orr	r5, r5, r0
   24eb4:	ldr	r8, [pc, #1568]	; 254dc <main@@Base+0x68c>
   24eb8:	mov	r3, #528	; 0x210
   24ebc:	str	r3, [sp, #8]
   24ec0:	str	r4, [sp, #4]
   24ec4:	str	r4, [sp]
   24ec8:	mov	r3, r4
   24ecc:	mov	r2, r8
   24ed0:	ldr	r1, [pc, #1544]	; 254e0 <main@@Base+0x690>
   24ed4:	mov	r0, r6
   24ed8:	bl	24140 <test_json@@Base>
   24edc:	orr	r5, r5, r0
   24ee0:	ldr	sl, [pc, #1532]	; 254e4 <main@@Base+0x694>
   24ee4:	ldr	r3, [pc, #1532]	; 254e8 <main@@Base+0x698>
   24ee8:	str	r3, [sp, #8]
   24eec:	str	r4, [sp, #4]
   24ef0:	str	r4, [sp]
   24ef4:	mov	r3, r4
   24ef8:	mov	r2, sl
   24efc:	ldr	r1, [pc, #1512]	; 254ec <main@@Base+0x69c>
   24f00:	mov	r0, r6
   24f04:	bl	24140 <test_json@@Base>
   24f08:	orr	r5, r5, r0
   24f0c:	ldr	r9, [pc, #1500]	; 254f0 <main@@Base+0x6a0>
   24f10:	ldr	r3, [pc, #1500]	; 254f4 <main@@Base+0x6a4>
   24f14:	str	r3, [sp, #8]
   24f18:	str	r4, [sp, #4]
   24f1c:	str	r4, [sp]
   24f20:	mov	r3, r4
   24f24:	mov	r2, r9
   24f28:	ldr	r1, [pc, #1480]	; 254f8 <main@@Base+0x6a8>
   24f2c:	mov	r0, r6
   24f30:	bl	24140 <test_json@@Base>
   24f34:	orr	r5, r5, r0
   24f38:	ldr	r3, [pc, #1468]	; 254fc <main@@Base+0x6ac>
   24f3c:	str	r3, [sp, #8]
   24f40:	str	r4, [sp, #4]
   24f44:	str	r4, [sp]
   24f48:	mov	r3, r4
   24f4c:	mov	r2, r9
   24f50:	ldr	r1, [pc, #1448]	; 25500 <main@@Base+0x6b0>
   24f54:	mov	r0, r6
   24f58:	bl	24140 <test_json@@Base>
   24f5c:	orr	r5, r5, r0
   24f60:	mov	r3, #540	; 0x21c
   24f64:	str	r3, [sp, #8]
   24f68:	str	r4, [sp, #4]
   24f6c:	str	r4, [sp]
   24f70:	mov	r3, r4
   24f74:	mov	r2, r8
   24f78:	ldr	r1, [pc, #1412]	; 25504 <main@@Base+0x6b4>
   24f7c:	mov	r0, r6
   24f80:	bl	24140 <test_json@@Base>
   24f84:	orr	r5, r5, r0
   24f88:	ldr	r3, [pc, #1400]	; 25508 <main@@Base+0x6b8>
   24f8c:	str	r3, [sp, #8]
   24f90:	str	r4, [sp, #4]
   24f94:	str	r4, [sp]
   24f98:	mov	r3, r4
   24f9c:	mov	r2, sl
   24fa0:	ldr	r1, [pc, #1380]	; 2550c <main@@Base+0x6bc>
   24fa4:	mov	r0, r6
   24fa8:	bl	24140 <test_json@@Base>
   24fac:	orr	r5, r5, r0
   24fb0:	ldr	r3, [pc, #1368]	; 25510 <main@@Base+0x6c0>
   24fb4:	str	r3, [sp, #8]
   24fb8:	str	r4, [sp, #4]
   24fbc:	str	r4, [sp]
   24fc0:	mov	r3, r4
   24fc4:	mov	r2, r7
   24fc8:	ldr	r1, [pc, #1348]	; 25514 <main@@Base+0x6c4>
   24fcc:	mov	r0, r6
   24fd0:	bl	24140 <test_json@@Base>
   24fd4:	orr	r5, r5, r0
   24fd8:	ldr	r3, [pc, #1336]	; 25518 <main@@Base+0x6c8>
   24fdc:	str	r3, [sp, #8]
   24fe0:	str	r4, [sp, #4]
   24fe4:	str	r4, [sp]
   24fe8:	mov	r3, r4
   24fec:	mov	r2, r7
   24ff0:	ldr	r1, [pc, #1316]	; 2551c <main@@Base+0x6cc>
   24ff4:	mov	r0, r6
   24ff8:	bl	24140 <test_json@@Base>
   24ffc:	orr	r5, r5, r0
   25000:	ldr	r3, [pc, #1304]	; 25520 <main@@Base+0x6d0>
   25004:	str	r3, [sp, #8]
   25008:	str	r4, [sp, #4]
   2500c:	str	r4, [sp]
   25010:	mov	r3, r4
   25014:	mov	r2, r8
   25018:	ldr	r1, [pc, #1284]	; 25524 <main@@Base+0x6d4>
   2501c:	mov	r0, r6
   25020:	bl	24140 <test_json@@Base>
   25024:	orr	r5, r5, r0
   25028:	mov	r3, #604	; 0x25c
   2502c:	str	r3, [sp, #8]
   25030:	str	r4, [sp, #4]
   25034:	str	r4, [sp]
   25038:	mov	r3, r4
   2503c:	mov	r2, sl
   25040:	ldr	r1, [pc, #1248]	; 25528 <main@@Base+0x6d8>
   25044:	mov	r0, r6
   25048:	bl	24140 <test_json@@Base>
   2504c:	orr	r5, r5, r0
   25050:	ldr	r3, [pc, #1236]	; 2552c <main@@Base+0x6dc>
   25054:	str	r3, [sp, #8]
   25058:	str	r4, [sp, #4]
   2505c:	str	r4, [sp]
   25060:	mov	r3, r4
   25064:	ldr	r2, [pc, #1220]	; 25530 <main@@Base+0x6e0>
   25068:	ldr	r1, [pc, #1220]	; 25534 <main@@Base+0x6e4>
   2506c:	mov	r0, r6
   25070:	bl	24140 <test_json@@Base>
   25074:	orr	r5, r5, r0
   25078:	ldr	r3, [pc, #1208]	; 25538 <main@@Base+0x6e8>
   2507c:	str	r3, [sp, #8]
   25080:	str	r4, [sp, #4]
   25084:	str	r4, [sp]
   25088:	mov	r3, r4
   2508c:	mov	r2, r9
   25090:	ldr	r1, [pc, #1188]	; 2553c <main@@Base+0x6ec>
   25094:	mov	r0, r6
   25098:	bl	24140 <test_json@@Base>
   2509c:	orr	r5, r5, r0
   250a0:	ldr	r3, [pc, #1176]	; 25540 <main@@Base+0x6f0>
   250a4:	str	r3, [sp, #8]
   250a8:	str	r4, [sp, #4]
   250ac:	str	r4, [sp]
   250b0:	mov	r3, r4
   250b4:	ldr	r2, [pc, #1160]	; 25544 <main@@Base+0x6f4>
   250b8:	ldr	r1, [pc, #1160]	; 25548 <main@@Base+0x6f8>
   250bc:	mov	r0, r6
   250c0:	bl	24140 <test_json@@Base>
   250c4:	orr	r5, r5, r0
   250c8:	mov	r3, #616	; 0x268
   250cc:	str	r3, [sp, #8]
   250d0:	str	r4, [sp, #4]
   250d4:	str	r4, [sp]
   250d8:	mov	r3, r4
   250dc:	ldr	r2, [pc, #1128]	; 2554c <main@@Base+0x6fc>
   250e0:	ldr	r1, [pc, #1128]	; 25550 <main@@Base+0x700>
   250e4:	mov	r0, r6
   250e8:	bl	24140 <test_json@@Base>
   250ec:	orr	r5, r5, r0
   250f0:	ldr	r3, [pc, #1116]	; 25554 <main@@Base+0x704>
   250f4:	str	r3, [sp, #8]
   250f8:	str	r4, [sp, #4]
   250fc:	str	r4, [sp]
   25100:	mov	r3, r4
   25104:	ldr	r2, [pc, #1100]	; 25558 <main@@Base+0x708>
   25108:	ldr	r1, [pc, #1100]	; 2555c <main@@Base+0x70c>
   2510c:	mov	r0, r6
   25110:	bl	24140 <test_json@@Base>
   25114:	orr	r5, r5, r0
   25118:	ldr	r3, [pc, #1088]	; 25560 <main@@Base+0x710>
   2511c:	str	r3, [sp, #8]
   25120:	str	r4, [sp, #4]
   25124:	str	r4, [sp]
   25128:	mov	r3, r4
   2512c:	mov	r2, r8
   25130:	ldr	r1, [pc, #1068]	; 25564 <main@@Base+0x714>
   25134:	mov	r0, r6
   25138:	bl	24140 <test_json@@Base>
   2513c:	orr	r5, r5, r0
   25140:	ldr	r3, [pc, #1056]	; 25568 <main@@Base+0x718>
   25144:	str	r3, [sp, #8]
   25148:	str	r4, [sp, #4]
   2514c:	str	r4, [sp]
   25150:	mov	r3, r4
   25154:	mov	r2, r8
   25158:	ldr	r1, [pc, #1036]	; 2556c <main@@Base+0x71c>
   2515c:	mov	r0, r6
   25160:	bl	24140 <test_json@@Base>
   25164:	orr	r5, r5, r0
   25168:	ldr	r9, [pc, #1024]	; 25570 <main@@Base+0x720>
   2516c:	ldr	r8, [pc, #1024]	; 25574 <main@@Base+0x724>
   25170:	mov	r3, #628	; 0x274
   25174:	str	r3, [sp, #8]
   25178:	str	r4, [sp, #4]
   2517c:	str	r4, [sp]
   25180:	mov	r3, r4
   25184:	mov	r2, r9
   25188:	mov	r1, r8
   2518c:	mov	r0, r6
   25190:	bl	24140 <test_json@@Base>
   25194:	orr	r5, r5, r0
   25198:	ldr	r3, [pc, #984]	; 25578 <main@@Base+0x728>
   2519c:	str	r3, [sp, #8]
   251a0:	str	r4, [sp, #4]
   251a4:	str	r4, [sp]
   251a8:	mov	r3, r4
   251ac:	mov	r2, r9
   251b0:	mov	r1, r8
   251b4:	mov	r0, r6
   251b8:	bl	24140 <test_json@@Base>
   251bc:	orr	r5, r5, r0
   251c0:	ldr	r3, [pc, #948]	; 2557c <main@@Base+0x72c>
   251c4:	str	r3, [sp, #8]
   251c8:	str	r4, [sp, #4]
   251cc:	str	r4, [sp]
   251d0:	mov	r3, r4
   251d4:	ldr	r2, [pc, #932]	; 25580 <main@@Base+0x730>
   251d8:	ldr	r1, [pc, #932]	; 25584 <main@@Base+0x734>
   251dc:	mov	r0, r6
   251e0:	bl	24140 <test_json@@Base>
   251e4:	orr	r5, r5, r0
   251e8:	ldr	r3, [pc, #920]	; 25588 <main@@Base+0x738>
   251ec:	str	r3, [sp, #8]
   251f0:	str	r4, [sp, #4]
   251f4:	str	r4, [sp]
   251f8:	mov	r3, r4
   251fc:	ldr	r2, [pc, #904]	; 2558c <main@@Base+0x73c>
   25200:	ldr	r1, [pc, #904]	; 25590 <main@@Base+0x740>
   25204:	mov	r0, r6
   25208:	bl	24140 <test_json@@Base>
   2520c:	orr	r5, r5, r0
   25210:	ldr	r3, [pc, #892]	; 25594 <main@@Base+0x744>
   25214:	str	r3, [sp, #8]
   25218:	str	r4, [sp, #4]
   2521c:	str	r4, [sp]
   25220:	mov	r3, r4
   25224:	ldr	r2, [pc, #876]	; 25598 <main@@Base+0x748>
   25228:	ldr	r1, [pc, #876]	; 2559c <main@@Base+0x74c>
   2522c:	mov	r0, r6
   25230:	bl	24140 <test_json@@Base>
   25234:	orr	r5, r5, r0
   25238:	ldr	r3, [pc, #864]	; 255a0 <main@@Base+0x750>
   2523c:	str	r3, [sp, #8]
   25240:	str	r4, [sp, #4]
   25244:	str	r4, [sp]
   25248:	mov	r3, r4
   2524c:	mov	r2, r7
   25250:	ldr	r1, [pc, #844]	; 255a4 <main@@Base+0x754>
   25254:	mov	r0, r6
   25258:	bl	24140 <test_json@@Base>
   2525c:	orr	r5, r5, r0
   25260:	ldr	r3, [pc, #832]	; 255a8 <main@@Base+0x758>
   25264:	str	r3, [sp, #8]
   25268:	str	r4, [sp, #4]
   2526c:	str	r4, [sp]
   25270:	mov	r3, r4
   25274:	mov	r2, r7
   25278:	ldr	r1, [pc, #812]	; 255ac <main@@Base+0x75c>
   2527c:	mov	r0, r6
   25280:	bl	24140 <test_json@@Base>
   25284:	orr	r5, r5, r0
   25288:	mov	r3, #716	; 0x2cc
   2528c:	str	r3, [sp, #8]
   25290:	str	r4, [sp, #4]
   25294:	str	r4, [sp]
   25298:	mov	r3, r4
   2529c:	ldr	r2, [pc, #780]	; 255b0 <main@@Base+0x760>
   252a0:	ldr	r1, [pc, #780]	; 255b4 <main@@Base+0x764>
   252a4:	mov	r0, r6
   252a8:	bl	24140 <test_json@@Base>
   252ac:	orr	r5, r5, r0
   252b0:	ldr	r3, [pc, #768]	; 255b8 <main@@Base+0x768>
   252b4:	str	r3, [sp, #8]
   252b8:	str	r4, [sp, #4]
   252bc:	str	r4, [sp]
   252c0:	mov	r3, r4
   252c4:	ldr	r2, [pc, #752]	; 255bc <main@@Base+0x76c>
   252c8:	ldr	r1, [pc, #752]	; 255c0 <main@@Base+0x770>
   252cc:	mov	r0, r6
   252d0:	bl	24140 <test_json@@Base>
   252d4:	orr	r5, r5, r0
   252d8:	ldr	r3, [pc, #740]	; 255c4 <main@@Base+0x774>
   252dc:	str	r3, [sp, #8]
   252e0:	str	r4, [sp, #4]
   252e4:	str	r4, [sp]
   252e8:	mov	r3, r4
   252ec:	ldr	r2, [pc, #724]	; 255c8 <main@@Base+0x778>
   252f0:	ldr	r1, [pc, #724]	; 255cc <main@@Base+0x77c>
   252f4:	mov	r0, r6
   252f8:	bl	24140 <test_json@@Base>
   252fc:	orr	r5, r5, r0
   25300:	ldr	r8, [pc, #712]	; 255d0 <main@@Base+0x780>
   25304:	ldr	r3, [pc, #712]	; 255d4 <main@@Base+0x784>
   25308:	str	r3, [sp, #8]
   2530c:	str	r4, [sp, #4]
   25310:	str	r4, [sp]
   25314:	mov	r3, r4
   25318:	mov	r2, r8
   2531c:	ldr	r1, [pc, #692]	; 255d8 <main@@Base+0x788>
   25320:	mov	r0, r6
   25324:	bl	24140 <test_json@@Base>
   25328:	orr	r5, r5, r0
   2532c:	ldr	r3, [pc, #680]	; 255dc <main@@Base+0x78c>
   25330:	str	r3, [sp, #8]
   25334:	str	r4, [sp, #4]
   25338:	str	r4, [sp]
   2533c:	mov	r3, r4
   25340:	mov	r2, r8
   25344:	ldr	r1, [pc, #660]	; 255e0 <main@@Base+0x790>
   25348:	mov	r0, r6
   2534c:	bl	24140 <test_json@@Base>
   25350:	orr	r5, r5, r0
   25354:	ldr	r3, [pc, #648]	; 255e4 <main@@Base+0x794>
   25358:	str	r3, [sp, #8]
   2535c:	str	r4, [sp, #4]
   25360:	str	r4, [sp]
   25364:	mov	r3, r4
   25368:	ldr	r2, [pc, #632]	; 255e8 <main@@Base+0x798>
   2536c:	ldr	r1, [pc, #632]	; 255ec <main@@Base+0x79c>
   25370:	mov	r0, r6
   25374:	bl	24140 <test_json@@Base>
   25378:	orr	r5, r5, r0
   2537c:	ldr	r3, [pc, #620]	; 255f0 <main@@Base+0x7a0>
   25380:	str	r3, [sp, #8]
   25384:	str	r4, [sp, #4]
   25388:	str	r4, [sp]
   2538c:	mov	r3, r4
   25390:	ldr	r2, [pc, #604]	; 255f4 <main@@Base+0x7a4>
   25394:	ldr	r1, [pc, #604]	; 255f8 <main@@Base+0x7a8>
   25398:	mov	r0, r6
   2539c:	bl	24140 <test_json@@Base>
   253a0:	orr	r5, r5, r0
   253a4:	mov	r3, #776	; 0x308
   253a8:	str	r3, [sp, #8]
   253ac:	str	r4, [sp, #4]
   253b0:	str	r4, [sp]
   253b4:	mov	r3, r4
   253b8:	ldr	r2, [pc, #572]	; 255fc <main@@Base+0x7ac>
   253bc:	ldr	r1, [pc, #572]	; 25600 <main@@Base+0x7b0>
   253c0:	mov	r0, r6
   253c4:	bl	24140 <test_json@@Base>
   253c8:	orr	r5, r5, r0
   253cc:	ldr	r3, [pc, #560]	; 25604 <main@@Base+0x7b4>
   253d0:	str	r3, [sp, #8]
   253d4:	str	r4, [sp, #4]
   253d8:	str	r4, [sp]
   253dc:	mov	r3, r4
   253e0:	mov	r2, r7
   253e4:	ldr	r1, [pc, #540]	; 25608 <main@@Base+0x7b8>
   253e8:	mov	r0, r6
   253ec:	bl	24140 <test_json@@Base>
   253f0:	orr	r5, r5, r0
   253f4:	ldr	r3, [pc, #528]	; 2560c <main@@Base+0x7bc>
   253f8:	str	r3, [sp, #8]
   253fc:	str	r4, [sp, #4]
   25400:	str	r4, [sp]
   25404:	mov	r3, r4
   25408:	ldr	r2, [pc, #512]	; 25610 <main@@Base+0x7c0>
   2540c:	ldr	r1, [pc, #512]	; 25614 <main@@Base+0x7c4>
   25410:	mov	r0, r6
   25414:	bl	24140 <test_json@@Base>
   25418:	orr	r5, r5, r0
   2541c:	ldr	r3, [pc, #500]	; 25618 <main@@Base+0x7c8>
   25420:	str	r3, [sp, #8]
   25424:	str	r4, [sp, #4]
   25428:	str	r4, [sp]
   2542c:	mov	r3, r4
   25430:	ldr	r2, [pc, #484]	; 2561c <main@@Base+0x7cc>
   25434:	ldr	r1, [pc, #484]	; 25620 <main@@Base+0x7d0>
   25438:	mov	r0, r6
   2543c:	bl	24140 <test_json@@Base>
   25440:	orr	r5, r5, r0
   25444:	mov	r3, #796	; 0x31c
   25448:	str	r3, [sp, #8]
   2544c:	str	r4, [sp, #4]
   25450:	str	r4, [sp]
   25454:	mov	r3, r4
   25458:	ldr	r2, [pc, #452]	; 25624 <main@@Base+0x7d4>
   2545c:	ldr	r1, [pc, #452]	; 25628 <main@@Base+0x7d8>
   25460:	mov	r0, r6
   25464:	bl	24140 <test_json@@Base>
   25468:	orr	r5, r5, r0
   2546c:	ldr	r3, [pc, #440]	; 2562c <main@@Base+0x7dc>
   25470:	str	r3, [sp, #8]
   25474:	str	r4, [sp, #4]
   25478:	str	r4, [sp]
   2547c:	mov	r3, r4
   25480:	ldr	r2, [pc, #424]	; 25630 <main@@Base+0x7e0>
   25484:	ldr	r1, [pc, #424]	; 25634 <main@@Base+0x7e4>
   25488:	mov	r0, r6
   2548c:	bl	24140 <test_json@@Base>
   25490:	orr	r5, r5, r0
   25494:	ldr	r3, [pc, #412]	; 25638 <main@@Base+0x7e8>
   25498:	str	r3, [sp, #8]
   2549c:	str	r4, [sp, #4]
   254a0:	str	r4, [sp]
   254a4:	mov	r3, r4
   254a8:	ldr	r2, [pc, #396]	; 2563c <main@@Base+0x7ec>
   254ac:	ldr	r1, [pc, #396]	; 25640 <main@@Base+0x7f0>
   254b0:	mov	r0, r6
   254b4:	bl	24140 <test_json@@Base>
   254b8:	orrs	r3, r5, r0
   254bc:	mvnne	r0, #0
   254c0:	moveq	r0, r4
   254c4:	add	sp, sp, #16
   254c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   254cc:	andeq	sp, r3, ip, asr #15
   254d0:	ldrdeq	sp, [r3], -r4
   254d4:	andeq	r0, r0, sp, lsl #4
   254d8:	andeq	pc, r3, ip, lsl #3
   254dc:	andeq	pc, r3, r4, lsr #3
   254e0:	andeq	pc, r3, r8, asr #3
   254e4:	strdeq	pc, [r3], -r0
   254e8:	andeq	r0, r0, r3, lsl r2
   254ec:	andeq	pc, r3, r4, lsl r2	; <UNPREDICTABLE>
   254f0:	andeq	pc, r3, ip, lsr r2	; <UNPREDICTABLE>
   254f4:	andeq	r0, r0, r6, lsl r2
   254f8:	andeq	pc, r3, r8, ror #4
   254fc:	andeq	r0, r0, r9, lsl r2
   25500:	muleq	r3, ip, r2
   25504:	ldrdeq	pc, [r3], -r8
   25508:	andeq	r0, r0, pc, lsl r2
   2550c:	andeq	pc, r3, r0, lsl #6
   25510:	andeq	r0, r0, r3, lsr #4
   25514:	andeq	pc, r3, ip, lsr #6
   25518:	andeq	r0, r0, r7, lsr #4
   2551c:	andeq	sp, r3, r0, ror #14
   25520:	andeq	r0, r0, r9, asr r2
   25524:	andeq	pc, r3, r4, asr r3	; <UNPREDICTABLE>
   25528:	andeq	pc, r3, r8, ror r3	; <UNPREDICTABLE>
   2552c:	andeq	r0, r0, pc, asr r2
   25530:	muleq	r3, ip, r3
   25534:	andeq	pc, r3, r4, asr #7
   25538:	andeq	r0, r0, r2, ror #4
   2553c:	andeq	pc, r3, r8, ror #7
   25540:	andeq	r0, r0, r5, ror #4
   25544:	andeq	pc, r3, ip, lsl #8
   25548:	andeq	pc, r3, ip, lsr #8
   2554c:	andeq	pc, r3, r0, asr r4	; <UNPREDICTABLE>
   25550:	andeq	pc, r3, r0, ror r4	; <UNPREDICTABLE>
   25554:	andeq	r0, r0, fp, ror #4
   25558:	muleq	r3, r4, r4
   2555c:			; <UNDEFINED> instruction: 0x0003f4b4
   25560:	andeq	r0, r0, lr, ror #4
   25564:	ldrdeq	pc, [r3], -r8
   25568:	andeq	r0, r0, r1, ror r2
   2556c:	andeq	pc, r3, r4, lsl #10
   25570:	andeq	pc, r3, r0, asr #10
   25574:	andeq	pc, r3, ip, asr r5	; <UNPREDICTABLE>
   25578:	andeq	r0, r0, r7, ror r2
   2557c:	andeq	r0, r0, sl, ror r2
   25580:	andeq	pc, r3, r8, lsl #11
   25584:	ldrdeq	pc, [r3], -r0
   25588:	andeq	r0, r0, lr, ror r2
   2558c:	andeq	pc, r3, r4, lsr #12
   25590:	andeq	pc, r3, r0, ror r6	; <UNPREDICTABLE>
   25594:	andeq	r0, r0, r2, lsl #5
   25598:	andeq	pc, r3, r8, asr #13
   2559c:	andeq	pc, r3, ip, lsr #14
   255a0:	andeq	r0, r0, r6, lsl #5
   255a4:	muleq	r3, ip, r7
   255a8:	andeq	r0, r0, r9, lsl #5
   255ac:	andeq	pc, r3, r8, asr #15
   255b0:	strdeq	pc, [r3], -r0
   255b4:	andeq	pc, r3, r0, asr r8	; <UNPREDICTABLE>
   255b8:	ldrdeq	r0, [r0], -fp
   255bc:	andeq	pc, r3, r0, asr #17
   255c0:	strdeq	pc, [r3], -r0
   255c4:	ldrdeq	r0, [r0], -lr
   255c8:	andeq	pc, r3, r0, lsr r9	; <UNPREDICTABLE>
   255cc:	andeq	pc, r3, r4, asr #18
   255d0:	andeq	pc, r3, r0, ror #18
   255d4:	andeq	r0, r0, r2, ror #5
   255d8:	andeq	pc, r3, r4, lsr #19
   255dc:	andeq	r0, r0, lr, ror #5
   255e0:	andeq	pc, r3, ip, ror #19
   255e4:	strdeq	r0, [r0], -lr
   255e8:	andeq	pc, r3, ip, lsl #21
   255ec:			; <UNDEFINED> instruction: 0x0003fab0
   255f0:	andeq	r0, r0, r2, lsl #6
   255f4:	ldrdeq	pc, [r3], -r8
   255f8:	andeq	pc, r3, r4, lsl #22
   255fc:	andeq	pc, r3, r4, lsr fp	; <UNPREDICTABLE>
   25600:	andeq	pc, r3, r4, lsr #23
   25604:	andeq	r0, r0, sp, lsl #6
   25608:	andeq	pc, r3, r0, lsr #24
   2560c:	andeq	r0, r0, r2, lsl r3
   25610:	muleq	r3, r8, ip
   25614:	andeq	pc, r3, r8, lsl #26
   25618:	andeq	r0, r0, r7, lsl r3
   2561c:	andeq	pc, r3, r4, lsl #27
   25620:	andeq	pc, r3, r4, lsl #28
   25624:	muleq	r3, r0, lr
   25628:	andeq	pc, r3, r0, lsl #30
   2562c:	andeq	r0, r0, r1, lsr #6
   25630:	andeq	pc, r3, ip, ror pc	; <UNPREDICTABLE>
   25634:	strdeq	pc, [r3], -ip
   25638:	andeq	r0, r0, r6, lsr #6
   2563c:	andeq	r0, r4, r8, lsl #1
   25640:	andeq	r0, r4, ip, lsl #2
   25644:	push	{r4, r5, r6, lr}
   25648:	sub	sp, sp, #8
   2564c:	mov	r4, r0
   25650:	mov	r5, r2
   25654:	ldr	r2, [r0, #28]
   25658:	mov	r3, #1
   2565c:	str	r3, [sp]
   25660:	ldr	r6, [r0, #48]	; 0x30
   25664:	add	r2, r1, r2
   25668:	add	r1, r0, #60	; 0x3c
   2566c:	ldr	r0, [r0, #40]	; 0x28
   25670:	blx	r6
   25674:	cmp	r0, #0
   25678:	bne	256b0 <main@@Base+0x860>
   2567c:	ldr	r1, [r4, #28]
   25680:	ldr	r2, [r4, #60]	; 0x3c
   25684:	add	r2, r2, r1
   25688:	str	r2, [r4, #16]
   2568c:	ldr	r3, [r4, #64]	; 0x40
   25690:	sub	r3, r3, r1
   25694:	cmp	r3, r5
   25698:	movcs	r3, r5
   2569c:	str	r3, [r4, #24]
   256a0:	ldr	r3, [r4, #32]
   256a4:	str	r5, [r3, #4]
   256a8:	add	sp, sp, #8
   256ac:	pop	{r4, r5, r6, pc}
   256b0:	mvn	r0, #0
   256b4:	b	256a8 <main@@Base+0x858>

000256b8 <flatcc_builder_default_alloc@@Base>:
   256b8:	push	{r4, r5, r6, r7, r8, lr}
   256bc:	mov	r5, r1
   256c0:	cmp	r2, #0
   256c4:	bne	256e8 <flatcc_builder_default_alloc@@Base+0x30>
   256c8:	ldr	r0, [r1]
   256cc:	cmp	r0, #0
   256d0:	beq	257b4 <flatcc_builder_default_alloc@@Base+0xfc>
   256d4:	bl	14540 <free@plt>
   256d8:	mov	r0, #0
   256dc:	str	r0, [r5]
   256e0:	str	r0, [r5, #4]
   256e4:	pop	{r4, r5, r6, r7, r8, pc}
   256e8:	mov	r6, r3
   256ec:	ldr	r3, [sp, #24]
   256f0:	sub	r3, r3, #1
   256f4:	cmp	r3, #6
   256f8:	ldrls	pc, [pc, r3, lsl #2]
   256fc:	b	25790 <flatcc_builder_default_alloc@@Base+0xd8>
   25700:	andeq	r5, r2, r4, lsr #14
   25704:	muleq	r2, r0, r7
   25708:	muleq	r2, r0, r7
   2570c:	andeq	r5, r2, ip, lsl r7
   25710:	muleq	r2, r8, r7
   25714:	muleq	r2, r0, r7
   25718:	andeq	r5, r2, r8, lsl #15
   2571c:	mov	r4, #288	; 0x120
   25720:	b	25728 <flatcc_builder_default_alloc@@Base+0x70>
   25724:	mov	r4, #256	; 0x100
   25728:	cmp	r4, r2
   2572c:	bcs	2573c <flatcc_builder_default_alloc@@Base+0x84>
   25730:	lsl	r4, r4, #1
   25734:	cmp	r2, r4
   25738:	bhi	25730 <flatcc_builder_default_alloc@@Base+0x78>
   2573c:	ldr	r3, [r5, #4]
   25740:	cmp	r2, r3
   25744:	bhi	25750 <flatcc_builder_default_alloc@@Base+0x98>
   25748:	cmp	r4, r3, lsr #1
   2574c:	bls	257bc <flatcc_builder_default_alloc@@Base+0x104>
   25750:	mov	r1, r4
   25754:	ldr	r0, [r5]
   25758:	bl	14564 <realloc@plt>
   2575c:	subs	r7, r0, #0
   25760:	beq	257c4 <flatcc_builder_default_alloc@@Base+0x10c>
   25764:	cmp	r6, #0
   25768:	beq	25778 <flatcc_builder_default_alloc@@Base+0xc0>
   2576c:	ldr	r0, [r5, #4]
   25770:	cmp	r0, r4
   25774:	bcc	257a0 <flatcc_builder_default_alloc@@Base+0xe8>
   25778:	str	r7, [r5]
   2577c:	str	r4, [r5, #4]
   25780:	mov	r0, #0
   25784:	pop	{r4, r5, r6, r7, r8, pc}
   25788:	mov	r4, #64	; 0x40
   2578c:	b	25728 <flatcc_builder_default_alloc@@Base+0x70>
   25790:	mov	r4, #32
   25794:	b	25728 <flatcc_builder_default_alloc@@Base+0x70>
   25798:	mov	r4, r2
   2579c:	b	2573c <flatcc_builder_default_alloc@@Base+0x84>
   257a0:	sub	r2, r4, r0
   257a4:	mov	r1, #0
   257a8:	add	r0, r7, r0
   257ac:	bl	145c4 <memset@plt>
   257b0:	b	25778 <flatcc_builder_default_alloc@@Base+0xc0>
   257b4:	mov	r0, #0
   257b8:	pop	{r4, r5, r6, r7, r8, pc}
   257bc:	mov	r0, #0
   257c0:	pop	{r4, r5, r6, r7, r8, pc}
   257c4:	mvn	r0, #0
   257c8:	pop	{r4, r5, r6, r7, r8, pc}
   257cc:	cmp	r2, #0
   257d0:	bne	257e0 <flatcc_builder_default_alloc@@Base+0x128>
   257d4:	ldrh	r2, [r0, #132]	; 0x84
   257d8:	cmp	r2, #0
   257dc:	moveq	r2, #1
   257e0:	ldrh	ip, [r1]
   257e4:	cmp	ip, #3
   257e8:	movls	ip, #4
   257ec:	strhls	ip, [r1]
   257f0:	ldrh	ip, [r1]
   257f4:	cmp	ip, r2
   257f8:	strhcc	r2, [r1]
   257fc:	cmp	r3, #0
   25800:	bne	258bc <flatcc_builder_default_alloc@@Base+0x204>
   25804:	push	{r4, r5, lr}
   25808:	sub	sp, sp, #84	; 0x54
   2580c:	ldr	r4, [r0, #140]	; 0x8c
   25810:	sub	r2, r2, #1
   25814:	ands	r2, r2, r4
   25818:	bne	25828 <flatcc_builder_default_alloc@@Base+0x170>
   2581c:	mov	r0, #0
   25820:	add	sp, sp, #84	; 0x54
   25824:	pop	{r4, r5, pc}
   25828:	str	r2, [sp, #8]
   2582c:	ldr	r3, [pc, #144]	; 258c4 <flatcc_builder_default_alloc@@Base+0x20c>
   25830:	str	r3, [sp, #16]
   25834:	str	r2, [sp, #20]
   25838:	mov	r3, #1
   2583c:	str	r3, [sp, #12]
   25840:	add	r3, r4, r2
   25844:	str	r3, [r0, #140]	; 0x8c
   25848:	cmp	r4, r3
   2584c:	bgt	25894 <flatcc_builder_default_alloc@@Base+0x1dc>
   25850:	ldr	ip, [r0, #36]	; 0x24
   25854:	str	r2, [sp]
   25858:	ldr	r5, [r0, #44]	; 0x2c
   2585c:	mov	r3, r4
   25860:	mov	r2, #1
   25864:	add	r1, sp, #16
   25868:	mov	r0, ip
   2586c:	blx	r5
   25870:	cmp	r0, #0
   25874:	bne	258a8 <flatcc_builder_default_alloc@@Base+0x1f0>
   25878:	cmn	r4, #1
   2587c:	bne	2581c <flatcc_builder_default_alloc@@Base+0x164>
   25880:	ldr	r3, [pc, #64]	; 258c8 <flatcc_builder_default_alloc@@Base+0x210>
   25884:	ldr	r2, [pc, #64]	; 258cc <flatcc_builder_default_alloc@@Base+0x214>
   25888:	ldr	r1, [pc, #64]	; 258d0 <flatcc_builder_default_alloc@@Base+0x218>
   2588c:	ldr	r0, [pc, #64]	; 258d4 <flatcc_builder_default_alloc@@Base+0x21c>
   25890:	bl	14618 <__assert_fail@plt>
   25894:	ldr	r3, [pc, #60]	; 258d8 <flatcc_builder_default_alloc@@Base+0x220>
   25898:	ldr	r2, [pc, #60]	; 258dc <flatcc_builder_default_alloc@@Base+0x224>
   2589c:	ldr	r1, [pc, #44]	; 258d0 <flatcc_builder_default_alloc@@Base+0x218>
   258a0:	ldr	r0, [pc, #44]	; 258d4 <flatcc_builder_default_alloc@@Base+0x21c>
   258a4:	bl	14618 <__assert_fail@plt>
   258a8:	ldr	r3, [pc, #40]	; 258d8 <flatcc_builder_default_alloc@@Base+0x220>
   258ac:	ldr	r2, [pc, #44]	; 258e0 <flatcc_builder_default_alloc@@Base+0x228>
   258b0:	ldr	r1, [pc, #24]	; 258d0 <flatcc_builder_default_alloc@@Base+0x218>
   258b4:	ldr	r0, [pc, #24]	; 258d4 <flatcc_builder_default_alloc@@Base+0x21c>
   258b8:	bl	14618 <__assert_fail@plt>
   258bc:	mov	r0, #0
   258c0:	bx	lr
   258c4:			; <UNDEFINED> instruction: 0x000401b4
   258c8:	andeq	r0, r4, r0, asr #7
   258cc:			; <UNDEFINED> instruction: 0x000002be
   258d0:	andeq	r0, r4, r4, lsl #18
   258d4:	andeq	r0, r4, r8, asr r9
   258d8:			; <UNDEFINED> instruction: 0x000403b4
   258dc:	andeq	r0, r0, r1, lsr #5
   258e0:	andeq	r0, r0, r5, lsr #5
   258e4:	push	{r4, r5, r6, r7, lr}
   258e8:	sub	sp, sp, #12
   258ec:	mov	r4, r0
   258f0:	mov	r6, r1
   258f4:	ldr	r3, [r0, #156]	; 0x9c
   258f8:	add	r2, r3, #1
   258fc:	str	r2, [r0, #156]	; 0x9c
   25900:	ldr	r1, [r0, #160]	; 0xa0
   25904:	cmp	r2, r1
   25908:	ble	259a8 <flatcc_builder_default_alloc@@Base+0x2f0>
   2590c:	ldr	r1, [r0, #176]	; 0xb0
   25910:	cmp	r2, r1
   25914:	cmpgt	r1, #0
   25918:	bgt	25a10 <flatcc_builder_default_alloc@@Base+0x358>
   2591c:	add	r3, r3, r3, lsl #3
   25920:	lsl	r5, r3, #2
   25924:	add	r2, r5, #36	; 0x24
   25928:	ldr	r3, [r0, #88]	; 0x58
   2592c:	cmp	r2, r3
   25930:	bhi	25970 <flatcc_builder_default_alloc@@Base+0x2b8>
   25934:	ldr	r3, [r4, #84]	; 0x54
   25938:	add	r5, r3, r5
   2593c:	str	r5, [r4, #32]
   25940:	cmp	r5, #0
   25944:	beq	25a18 <flatcc_builder_default_alloc@@Base+0x360>
   25948:	ldr	r3, [r4, #88]	; 0x58
   2594c:	ldr	r2, [pc, #204]	; 25a20 <flatcc_builder_default_alloc@@Base+0x368>
   25950:	umull	r2, r3, r2, r3
   25954:	lsr	r3, r3, #3
   25958:	str	r3, [r4, #160]	; 0xa0
   2595c:	ldr	r2, [r4, #176]	; 0xb0
   25960:	cmp	r2, #0
   25964:	cmpgt	r3, r2
   25968:	strgt	r2, [r4, #160]	; 0xa0
   2596c:	b	259b4 <flatcc_builder_default_alloc@@Base+0x2fc>
   25970:	mov	r3, #4
   25974:	str	r3, [sp]
   25978:	ldr	r7, [r0, #48]	; 0x30
   2597c:	mov	r3, #0
   25980:	add	r1, r0, #84	; 0x54
   25984:	ldr	r0, [r0, #40]	; 0x28
   25988:	blx	r7
   2598c:	cmp	r0, #0
   25990:	beq	25934 <flatcc_builder_default_alloc@@Base+0x27c>
   25994:	ldr	r3, [pc, #136]	; 25a24 <flatcc_builder_default_alloc@@Base+0x36c>
   25998:	mov	r2, #308	; 0x134
   2599c:	ldr	r1, [pc, #132]	; 25a28 <flatcc_builder_default_alloc@@Base+0x370>
   259a0:	ldr	r0, [pc, #132]	; 25a2c <flatcc_builder_default_alloc@@Base+0x374>
   259a4:	bl	14618 <__assert_fail@plt>
   259a8:	ldr	r3, [r0, #32]
   259ac:	add	r3, r3, #36	; 0x24
   259b0:	str	r3, [r0, #32]
   259b4:	ldr	r3, [r4, #32]
   259b8:	ldr	r2, [r4, #20]
   259bc:	str	r2, [r3, #8]
   259c0:	ldr	r3, [r4, #32]
   259c4:	ldrh	r2, [r4, #130]	; 0x82
   259c8:	strh	r2, [r3, #12]
   259cc:	strh	r6, [r4, #130]	; 0x82
   259d0:	ldr	r3, [r4, #32]
   259d4:	ldr	r2, [r4, #28]
   259d8:	str	r2, [r3]
   259dc:	ldr	r3, [r4, #32]
   259e0:	mvn	r2, #3
   259e4:	str	r2, [r3, #4]
   259e8:	ldr	r3, [r4, #28]
   259ec:	ldr	r2, [r4, #20]
   259f0:	add	r3, r3, r2
   259f4:	add	r3, r3, #7
   259f8:	bic	r3, r3, #7
   259fc:	str	r3, [r4, #28]
   25a00:	mov	r0, #0
   25a04:	str	r0, [r4, #20]
   25a08:	add	sp, sp, #12
   25a0c:	pop	{r4, r5, r6, r7, pc}
   25a10:	mvn	r0, #0
   25a14:	b	25a08 <flatcc_builder_default_alloc@@Base+0x350>
   25a18:	mvn	r0, #0
   25a1c:	b	25a08 <flatcc_builder_default_alloc@@Base+0x350>
   25a20:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   25a24:	ldrdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   25a28:	andeq	r0, r4, r4, lsl #18
   25a2c:	andeq	r0, r4, r8, asr r9
   25a30:	push	{r4, r5, r6, r7, r8, lr}
   25a34:	sub	sp, sp, #88	; 0x58
   25a38:	cmn	r2, #-1073741823	; 0xc0000001
   25a3c:	bhi	25bf0 <flatcc_builder_default_alloc@@Base+0x538>
   25a40:	ldrh	ip, [r0, #128]	; 0x80
   25a44:	cmp	ip, #3
   25a48:	movls	ip, #4
   25a4c:	strhls	ip, [r0, #128]	; 0x80
   25a50:	str	r2, [sp, #84]	; 0x54
   25a54:	ldr	r7, [r0, #136]	; 0x88
   25a58:	and	lr, r7, #3
   25a5c:	mov	ip, #4
   25a60:	str	ip, [sp, #12]
   25a64:	add	r4, sp, #84	; 0x54
   25a68:	str	r4, [sp, #20]
   25a6c:	str	ip, [sp, #24]
   25a70:	mov	ip, #1
   25a74:	str	ip, [sp, #16]
   25a78:	lsls	r5, r2, #2
   25a7c:	beq	25a98 <flatcc_builder_default_alloc@@Base+0x3e0>
   25a80:	add	ip, r5, #4
   25a84:	str	ip, [sp, #12]
   25a88:	str	r1, [sp, #28]
   25a8c:	str	r5, [sp, #32]
   25a90:	mov	ip, #2
   25a94:	str	ip, [sp, #16]
   25a98:	cmp	lr, #0
   25a9c:	beq	25acc <flatcc_builder_default_alloc@@Base+0x414>
   25aa0:	ldr	ip, [sp, #12]
   25aa4:	add	ip, ip, lr
   25aa8:	str	ip, [sp, #12]
   25aac:	ldr	ip, [sp, #16]
   25ab0:	add	ip, ip, #1
   25ab4:	add	r4, sp, #88	; 0x58
   25ab8:	add	r4, r4, ip, lsl #3
   25abc:	ldr	r6, [pc, #308]	; 25bf8 <flatcc_builder_default_alloc@@Base+0x540>
   25ac0:	str	r6, [r4, #-76]	; 0xffffffb4
   25ac4:	str	lr, [r4, #-72]	; 0xffffffb8
   25ac8:	str	ip, [sp, #16]
   25acc:	mov	r6, r0
   25ad0:	ldr	r8, [sp, #12]
   25ad4:	sub	r7, r7, r8
   25ad8:	cmp	r2, #0
   25adc:	beq	25b84 <flatcc_builder_default_alloc@@Base+0x4cc>
   25ae0:	mov	r2, r1
   25ae4:	mov	ip, r3
   25ae8:	add	r5, r1, r5
   25aec:	mvn	r1, #3
   25af0:	b	25b1c <flatcc_builder_default_alloc@@Base+0x464>
   25af4:	cmp	r3, #0
   25af8:	beq	25b70 <flatcc_builder_default_alloc@@Base+0x4b8>
   25afc:	ldrb	r0, [ip]
   25b00:	cmp	r0, #0
   25b04:	bne	25b5c <flatcc_builder_default_alloc@@Base+0x4a4>
   25b08:	add	r2, r2, #4
   25b0c:	add	ip, ip, #1
   25b10:	sub	r1, r1, #4
   25b14:	cmp	r2, r5
   25b18:	beq	25b84 <flatcc_builder_default_alloc@@Base+0x4cc>
   25b1c:	ldr	lr, [r2]
   25b20:	cmp	lr, #0
   25b24:	beq	25af4 <flatcc_builder_default_alloc@@Base+0x43c>
   25b28:	sub	r4, r1, r7
   25b2c:	add	lr, r4, lr
   25b30:	str	lr, [r2]
   25b34:	cmp	r3, #0
   25b38:	beq	25b08 <flatcc_builder_default_alloc@@Base+0x450>
   25b3c:	ldrb	r0, [ip]
   25b40:	cmp	r0, #0
   25b44:	bne	25b08 <flatcc_builder_default_alloc@@Base+0x450>
   25b48:	ldr	r3, [pc, #172]	; 25bfc <flatcc_builder_default_alloc@@Base+0x544>
   25b4c:	ldr	r2, [pc, #172]	; 25c00 <flatcc_builder_default_alloc@@Base+0x548>
   25b50:	ldr	r1, [pc, #172]	; 25c04 <flatcc_builder_default_alloc@@Base+0x54c>
   25b54:	ldr	r0, [pc, #172]	; 25c08 <flatcc_builder_default_alloc@@Base+0x550>
   25b58:	bl	14618 <__assert_fail@plt>
   25b5c:	ldr	r3, [pc, #152]	; 25bfc <flatcc_builder_default_alloc@@Base+0x544>
   25b60:	ldr	r2, [pc, #164]	; 25c0c <flatcc_builder_default_alloc@@Base+0x554>
   25b64:	ldr	r1, [pc, #152]	; 25c04 <flatcc_builder_default_alloc@@Base+0x54c>
   25b68:	ldr	r0, [pc, #160]	; 25c10 <flatcc_builder_default_alloc@@Base+0x558>
   25b6c:	bl	14618 <__assert_fail@plt>
   25b70:	ldr	r3, [pc, #132]	; 25bfc <flatcc_builder_default_alloc@@Base+0x544>
   25b74:	ldr	r2, [pc, #152]	; 25c14 <flatcc_builder_default_alloc@@Base+0x55c>
   25b78:	ldr	r1, [pc, #132]	; 25c04 <flatcc_builder_default_alloc@@Base+0x54c>
   25b7c:	ldr	r0, [pc, #148]	; 25c18 <flatcc_builder_default_alloc@@Base+0x560>
   25b80:	bl	14618 <__assert_fail@plt>
   25b84:	ldr	r3, [r6, #136]	; 0x88
   25b88:	sub	r4, r3, r8
   25b8c:	cmp	r3, r4
   25b90:	ble	25bc8 <flatcc_builder_default_alloc@@Base+0x510>
   25b94:	str	r8, [sp]
   25b98:	ldr	r5, [r6, #44]	; 0x2c
   25b9c:	mov	r3, r4
   25ba0:	ldr	r2, [sp, #16]
   25ba4:	add	r1, sp, #20
   25ba8:	ldr	r0, [r6, #36]	; 0x24
   25bac:	blx	r5
   25bb0:	cmp	r0, #0
   25bb4:	streq	r4, [r6, #136]	; 0x88
   25bb8:	bne	25bdc <flatcc_builder_default_alloc@@Base+0x524>
   25bbc:	mov	r0, r4
   25bc0:	add	sp, sp, #88	; 0x58
   25bc4:	pop	{r4, r5, r6, r7, r8, pc}
   25bc8:	ldr	r3, [pc, #76]	; 25c1c <flatcc_builder_default_alloc@@Base+0x564>
   25bcc:	ldr	r2, [pc, #76]	; 25c20 <flatcc_builder_default_alloc@@Base+0x568>
   25bd0:	ldr	r1, [pc, #44]	; 25c04 <flatcc_builder_default_alloc@@Base+0x54c>
   25bd4:	ldr	r0, [pc, #60]	; 25c18 <flatcc_builder_default_alloc@@Base+0x560>
   25bd8:	bl	14618 <__assert_fail@plt>
   25bdc:	ldr	r3, [pc, #56]	; 25c1c <flatcc_builder_default_alloc@@Base+0x564>
   25be0:	ldr	r2, [pc, #60]	; 25c24 <flatcc_builder_default_alloc@@Base+0x56c>
   25be4:	ldr	r1, [pc, #24]	; 25c04 <flatcc_builder_default_alloc@@Base+0x54c>
   25be8:	ldr	r0, [pc, #40]	; 25c18 <flatcc_builder_default_alloc@@Base+0x560>
   25bec:	bl	14618 <__assert_fail@plt>
   25bf0:	mov	r4, #0
   25bf4:	b	25bbc <flatcc_builder_default_alloc@@Base+0x504>
   25bf8:			; <UNDEFINED> instruction: 0x000401b4
   25bfc:	andeq	r0, r4, r0, ror #7
   25c00:			; <UNDEFINED> instruction: 0x000005b1
   25c04:	andeq	r0, r4, r4, lsl #18
   25c08:	andeq	r0, r4, ip, asr #18
   25c0c:			; <UNDEFINED> instruction: 0x000005b5
   25c10:	andeq	r0, r4, ip, asr r9
   25c14:			; <UNDEFINED> instruction: 0x000005b7
   25c18:	andeq	r0, r4, r8, asr r9
   25c1c:	andeq	r0, r4, r0, lsl #8
   25c20:	andeq	r0, r0, r7, lsl #5
   25c24:	andeq	r0, r0, fp, lsl #5

00025c28 <flatcc_builder_flush_vtable_cache@@Base>:
   25c28:	ldr	r3, [r0, #116]	; 0x74
   25c2c:	cmp	r3, #0
   25c30:	bxeq	lr
   25c34:	push	{r4, lr}
   25c38:	mov	r4, r0
   25c3c:	ldr	r2, [r0, #96]	; 0x60
   25c40:	mov	r1, #0
   25c44:	ldr	r0, [r0, #92]	; 0x5c
   25c48:	bl	145c4 <memset@plt>
   25c4c:	mov	r3, #16
   25c50:	str	r3, [r4, #124]	; 0x7c
   25c54:	mov	r3, #0
   25c58:	str	r3, [r4, #120]	; 0x78
   25c5c:	pop	{r4, pc}

00025c60 <flatcc_builder_custom_init@@Base>:
   25c60:	push	{r4, r5, r6, r7, r8, lr}
   25c64:	mov	r4, r0
   25c68:	mov	r6, r1
   25c6c:	mov	r7, r2
   25c70:	mov	r5, r3
   25c74:	mov	r2, #232	; 0xe8
   25c78:	mov	r1, #0
   25c7c:	bl	145c4 <memset@plt>
   25c80:	cmp	r6, #0
   25c84:	moveq	r3, #1
   25c88:	streq	r3, [r4, #184]	; 0xb8
   25c8c:	addeq	r7, r4, #188	; 0xbc
   25c90:	ldreq	r6, [pc, #36]	; 25cbc <flatcc_builder_custom_init@@Base+0x5c>
   25c94:	ldr	r3, [pc, #36]	; 25cc0 <flatcc_builder_custom_init@@Base+0x60>
   25c98:	cmp	r5, #0
   25c9c:	moveq	r5, r3
   25ca0:	ldr	r3, [sp, #24]
   25ca4:	str	r3, [r4, #40]	; 0x28
   25ca8:	str	r5, [r4, #48]	; 0x30
   25cac:	str	r7, [r4, #36]	; 0x24
   25cb0:	str	r6, [r4, #44]	; 0x2c
   25cb4:	mov	r0, #0
   25cb8:	pop	{r4, r5, r6, r7, r8, pc}
   25cbc:	andeq	r9, r2, r8, lsr r8
   25cc0:			; <UNDEFINED> instruction: 0x000256b8

00025cc4 <flatcc_builder_init@@Base>:
   25cc4:	push	{r4, lr}
   25cc8:	mov	r4, r0
   25ccc:	mov	r2, #232	; 0xe8
   25cd0:	mov	r1, #0
   25cd4:	bl	145c4 <memset@plt>
   25cd8:	mov	r3, #1
   25cdc:	str	r3, [r4, #184]	; 0xb8
   25ce0:	ldr	r3, [pc, #24]	; 25d00 <flatcc_builder_init@@Base+0x3c>
   25ce4:	str	r3, [r4, #48]	; 0x30
   25ce8:	add	r3, r4, #188	; 0xbc
   25cec:	str	r3, [r4, #36]	; 0x24
   25cf0:	ldr	r3, [pc, #12]	; 25d04 <flatcc_builder_init@@Base+0x40>
   25cf4:	str	r3, [r4, #44]	; 0x2c
   25cf8:	mov	r0, #0
   25cfc:	pop	{r4, pc}
   25d00:			; <UNDEFINED> instruction: 0x000256b8
   25d04:	andeq	r9, r2, r8, lsr r8

00025d08 <flatcc_builder_custom_reset@@Base>:
   25d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d0c:	sub	sp, sp, #12
   25d10:	mov	r6, r0
   25d14:	mov	fp, r1
   25d18:	mov	r8, r2
   25d1c:	mov	r4, r0
   25d20:	mov	r5, #0
   25d24:	mov	r9, r5
   25d28:	mov	sl, #1
   25d2c:	b	25d50 <flatcc_builder_custom_reset@@Base+0x48>
   25d30:	ldr	r2, [r7, #56]	; 0x38
   25d34:	mov	r1, r9
   25d38:	ldr	r0, [r7, #52]	; 0x34
   25d3c:	bl	145c4 <memset@plt>
   25d40:	add	r5, r5, #1
   25d44:	add	r4, r4, #8
   25d48:	cmp	r5, #8
   25d4c:	beq	25db8 <flatcc_builder_custom_reset@@Base+0xb0>
   25d50:	add	r1, r4, #52	; 0x34
   25d54:	mov	r7, r4
   25d58:	ldr	r3, [r4, #52]	; 0x34
   25d5c:	cmp	r3, #0
   25d60:	beq	25d98 <flatcc_builder_custom_reset@@Base+0x90>
   25d64:	cmp	r5, #5
   25d68:	cmpne	r8, #0
   25d6c:	beq	25d30 <flatcc_builder_custom_reset@@Base+0x28>
   25d70:	str	r5, [sp]
   25d74:	mov	r3, sl
   25d78:	mov	r2, sl
   25d7c:	ldr	r0, [r6, #40]	; 0x28
   25d80:	ldr	ip, [r6, #48]	; 0x30
   25d84:	blx	ip
   25d88:	cmp	r0, #0
   25d8c:	beq	25d30 <flatcc_builder_custom_reset@@Base+0x28>
   25d90:	mvn	r0, #0
   25d94:	b	25e30 <flatcc_builder_custom_reset@@Base+0x128>
   25d98:	ldr	r3, [r4, #56]	; 0x38
   25d9c:	cmp	r3, #0
   25da0:	beq	25d40 <flatcc_builder_custom_reset@@Base+0x38>
   25da4:	ldr	r3, [pc, #156]	; 25e48 <flatcc_builder_custom_reset@@Base+0x140>
   25da8:	ldr	r2, [pc, #156]	; 25e4c <flatcc_builder_custom_reset@@Base+0x144>
   25dac:	ldr	r1, [pc, #156]	; 25e50 <flatcc_builder_custom_reset@@Base+0x148>
   25db0:	ldr	r0, [pc, #156]	; 25e54 <flatcc_builder_custom_reset@@Base+0x14c>
   25db4:	bl	14618 <__assert_fail@plt>
   25db8:	mov	r3, #0
   25dbc:	str	r3, [r6, #120]	; 0x78
   25dc0:	ldr	r3, [r6, #124]	; 0x7c
   25dc4:	cmp	r3, #0
   25dc8:	movne	r3, #16
   25dcc:	strne	r3, [r6, #124]	; 0x7c
   25dd0:	mov	r3, #0
   25dd4:	strh	r3, [r6, #128]	; 0x80
   25dd8:	str	r3, [r6, #136]	; 0x88
   25ddc:	str	r3, [r6, #140]	; 0x8c
   25de0:	str	r3, [r6, #156]	; 0x9c
   25de4:	str	r3, [r6, #160]	; 0xa0
   25de8:	str	r3, [r6, #20]
   25dec:	str	r3, [r6, #24]
   25df0:	str	r3, [r6, #148]	; 0x94
   25df4:	str	r3, [r6, #152]	; 0x98
   25df8:	ldr	r2, [r6, #60]	; 0x3c
   25dfc:	str	r2, [r6, #16]
   25e00:	ldr	r2, [r6, #76]	; 0x4c
   25e04:	str	r2, [r6]
   25e08:	ldr	r2, [r6, #52]	; 0x34
   25e0c:	str	r2, [r6, #4]
   25e10:	str	r3, [r6, #32]
   25e14:	cmp	fp, r3
   25e18:	strne	r3, [r6, #172]	; 0xac
   25e1c:	strne	r3, [r6, #176]	; 0xb0
   25e20:	strne	r3, [r6, #180]	; 0xb4
   25e24:	ldr	r0, [r6, #184]	; 0xb8
   25e28:	cmp	r0, #0
   25e2c:	bne	25e38 <flatcc_builder_custom_reset@@Base+0x130>
   25e30:	add	sp, sp, #12
   25e34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25e38:	add	r0, r6, #188	; 0xbc
   25e3c:	bl	29700 <flatcc_emitter_reset@@Base>
   25e40:	mov	r0, #0
   25e44:	b	25e30 <flatcc_builder_custom_reset@@Base+0x128>
   25e48:	andeq	r0, r4, ip, lsl #8
   25e4c:			; <UNDEFINED> instruction: 0x000001b2
   25e50:	andeq	r0, r4, r4, lsl #18
   25e54:	andeq	r0, r4, ip, ror #18

00025e58 <flatcc_builder_reset@@Base>:
   25e58:	push	{r4, lr}
   25e5c:	mov	r2, #0
   25e60:	mov	r1, r2
   25e64:	bl	25d08 <flatcc_builder_custom_reset@@Base>
   25e68:	pop	{r4, pc}

00025e6c <flatcc_builder_clear@@Base>:
   25e6c:	push	{r4, r5, r6, r7, r8, lr}
   25e70:	sub	sp, sp, #8
   25e74:	mov	r6, r0
   25e78:	add	r5, r0, #52	; 0x34
   25e7c:	mov	r4, #0
   25e80:	mov	r8, r4
   25e84:	str	r4, [sp]
   25e88:	ldr	r7, [r6, #48]	; 0x30
   25e8c:	mov	r3, r8
   25e90:	mov	r2, r8
   25e94:	mov	r1, r5
   25e98:	ldr	r0, [r6, #40]	; 0x28
   25e9c:	blx	r7
   25ea0:	add	r4, r4, #1
   25ea4:	add	r5, r5, #8
   25ea8:	cmp	r4, #8
   25eac:	bne	25e84 <flatcc_builder_clear@@Base+0x18>
   25eb0:	ldr	r3, [r6, #184]	; 0xb8
   25eb4:	cmp	r3, #0
   25eb8:	bne	25ed4 <flatcc_builder_clear@@Base+0x68>
   25ebc:	mov	r2, #232	; 0xe8
   25ec0:	mov	r1, #0
   25ec4:	mov	r0, r6
   25ec8:	bl	145c4 <memset@plt>
   25ecc:	add	sp, sp, #8
   25ed0:	pop	{r4, r5, r6, r7, r8, pc}
   25ed4:	add	r0, r6, #188	; 0xbc
   25ed8:	bl	297d0 <flatcc_emitter_clear@@Base>
   25edc:	b	25ebc <flatcc_builder_clear@@Base+0x50>

00025ee0 <flatcc_builder_enter_user_frame_ptr@@Base>:
   25ee0:	push	{r4, r5, r6, r7, r8, lr}
   25ee4:	sub	sp, sp, #8
   25ee8:	mov	r7, r0
   25eec:	add	r4, r1, #3
   25ef0:	bic	r4, r4, #3
   25ef4:	add	r4, r4, #4
   25ef8:	ldr	r5, [r0, #228]	; 0xe4
   25efc:	add	r2, r4, r5
   25f00:	ldr	r3, [r0, #112]	; 0x70
   25f04:	cmp	r2, r3
   25f08:	bhi	25f50 <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   25f0c:	ldr	r8, [r7, #108]	; 0x6c
   25f10:	adds	r6, r8, r5
   25f14:	beq	25f88 <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   25f18:	mov	r2, r4
   25f1c:	mov	r1, #0
   25f20:	mov	r0, r6
   25f24:	bl	145c4 <memset@plt>
   25f28:	ldr	r3, [r7, #224]	; 0xe0
   25f2c:	str	r3, [r8, r5]
   25f30:	ldr	r1, [r7, #228]	; 0xe4
   25f34:	add	r3, r1, #4
   25f38:	str	r3, [r7, #224]	; 0xe0
   25f3c:	add	r4, r4, r1
   25f40:	str	r4, [r7, #228]	; 0xe4
   25f44:	add	r0, r6, #4
   25f48:	add	sp, sp, #8
   25f4c:	pop	{r4, r5, r6, r7, r8, pc}
   25f50:	mov	r3, #7
   25f54:	str	r3, [sp]
   25f58:	ldr	r6, [r0, #48]	; 0x30
   25f5c:	mov	r3, #0
   25f60:	add	r1, r0, #108	; 0x6c
   25f64:	ldr	r0, [r0, #40]	; 0x28
   25f68:	blx	r6
   25f6c:	cmp	r0, #0
   25f70:	beq	25f0c <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   25f74:	ldr	r3, [pc, #20]	; 25f90 <flatcc_builder_enter_user_frame_ptr@@Base+0xb0>
   25f78:	mov	r2, #308	; 0x134
   25f7c:	ldr	r1, [pc, #16]	; 25f94 <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   25f80:	ldr	r0, [pc, #16]	; 25f98 <flatcc_builder_enter_user_frame_ptr@@Base+0xb8>
   25f84:	bl	14618 <__assert_fail@plt>
   25f88:	mov	r0, #0
   25f8c:	b	25f48 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>
   25f90:	ldrdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   25f94:	andeq	r0, r4, r4, lsl #18
   25f98:	andeq	r0, r4, r8, asr r9

00025f9c <flatcc_builder_enter_user_frame@@Base>:
   25f9c:	push	{r4, r5, r6, r7, lr}
   25fa0:	sub	sp, sp, #12
   25fa4:	mov	r6, r0
   25fa8:	add	r4, r1, #3
   25fac:	bic	r4, r4, #3
   25fb0:	add	r4, r4, #4
   25fb4:	ldr	r5, [r0, #228]	; 0xe4
   25fb8:	add	r2, r4, r5
   25fbc:	ldr	r3, [r0, #112]	; 0x70
   25fc0:	cmp	r2, r3
   25fc4:	bhi	26008 <flatcc_builder_enter_user_frame@@Base+0x6c>
   25fc8:	ldr	r7, [r6, #108]	; 0x6c
   25fcc:	adds	r0, r7, r5
   25fd0:	moveq	r0, #0
   25fd4:	beq	26000 <flatcc_builder_enter_user_frame@@Base+0x64>
   25fd8:	mov	r2, r4
   25fdc:	mov	r1, #0
   25fe0:	bl	145c4 <memset@plt>
   25fe4:	ldr	r3, [r6, #224]	; 0xe0
   25fe8:	str	r3, [r7, r5]
   25fec:	ldr	r1, [r6, #228]	; 0xe4
   25ff0:	add	r0, r1, #4
   25ff4:	str	r0, [r6, #224]	; 0xe0
   25ff8:	add	r4, r4, r1
   25ffc:	str	r4, [r6, #228]	; 0xe4
   26000:	add	sp, sp, #12
   26004:	pop	{r4, r5, r6, r7, pc}
   26008:	mov	r3, #7
   2600c:	str	r3, [sp]
   26010:	ldr	r7, [r0, #48]	; 0x30
   26014:	mov	r3, #0
   26018:	add	r1, r0, #108	; 0x6c
   2601c:	ldr	r0, [r0, #40]	; 0x28
   26020:	blx	r7
   26024:	cmp	r0, #0
   26028:	beq	25fc8 <flatcc_builder_enter_user_frame@@Base+0x2c>
   2602c:	ldr	r3, [pc, #12]	; 26040 <flatcc_builder_enter_user_frame@@Base+0xa4>
   26030:	mov	r2, #308	; 0x134
   26034:	ldr	r1, [pc, #8]	; 26044 <flatcc_builder_enter_user_frame@@Base+0xa8>
   26038:	ldr	r0, [pc, #8]	; 26048 <flatcc_builder_enter_user_frame@@Base+0xac>
   2603c:	bl	14618 <__assert_fail@plt>
   26040:	ldrdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   26044:	andeq	r0, r4, r4, lsl #18
   26048:	andeq	r0, r4, r8, asr r9

0002604c <flatcc_builder_exit_user_frame@@Base>:
   2604c:	ldr	r3, [r0, #224]	; 0xe0
   26050:	cmp	r3, #0
   26054:	beq	26078 <flatcc_builder_exit_user_frame@@Base+0x2c>
   26058:	ldr	r2, [r0, #108]	; 0x6c
   2605c:	add	r2, r2, r3
   26060:	sub	r3, r3, #4
   26064:	str	r3, [r0, #228]	; 0xe4
   26068:	ldr	r3, [r2, #-4]
   2606c:	str	r3, [r0, #224]	; 0xe0
   26070:	mov	r0, r3
   26074:	bx	lr
   26078:	push	{r4, lr}
   2607c:	ldr	r3, [pc, #12]	; 26090 <flatcc_builder_exit_user_frame@@Base+0x44>
   26080:	ldr	r2, [pc, #12]	; 26094 <flatcc_builder_exit_user_frame@@Base+0x48>
   26084:	ldr	r1, [pc, #12]	; 26098 <flatcc_builder_exit_user_frame@@Base+0x4c>
   26088:	ldr	r0, [pc, #12]	; 2609c <flatcc_builder_exit_user_frame@@Base+0x50>
   2608c:	bl	14618 <__assert_fail@plt>
   26090:	andeq	r0, r4, r8, lsr #8
   26094:	andeq	r0, r0, lr, lsl r2
   26098:	andeq	r0, r4, r4, lsl #18
   2609c:	andeq	r0, r4, r0, lsl #19

000260a0 <flatcc_builder_exit_user_frame_at@@Base>:
   260a0:	push	{r4, lr}
   260a4:	ldr	r3, [r0, #224]	; 0xe0
   260a8:	cmp	r3, r1
   260ac:	bcc	260bc <flatcc_builder_exit_user_frame_at@@Base+0x1c>
   260b0:	str	r1, [r0, #224]	; 0xe0
   260b4:	bl	2604c <flatcc_builder_exit_user_frame@@Base>
   260b8:	pop	{r4, pc}
   260bc:	ldr	r3, [pc, #12]	; 260d0 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   260c0:	ldr	r2, [pc, #12]	; 260d4 <flatcc_builder_exit_user_frame_at@@Base+0x34>
   260c4:	ldr	r1, [pc, #12]	; 260d8 <flatcc_builder_exit_user_frame_at@@Base+0x38>
   260c8:	ldr	r0, [pc, #12]	; 260dc <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   260cc:	bl	14618 <__assert_fail@plt>
   260d0:	andeq	r0, r4, r8, asr #8
   260d4:	andeq	r0, r0, r7, lsr #4
   260d8:	andeq	r0, r4, r4, lsl #18
   260dc:	muleq	r4, ip, r9

000260e0 <flatcc_builder_get_current_user_frame@@Base>:
   260e0:	ldr	r0, [r0, #224]	; 0xe0
   260e4:	bx	lr

000260e8 <flatcc_builder_get_user_frame_ptr@@Base>:
   260e8:	ldr	r0, [r0, #108]	; 0x6c
   260ec:	add	r0, r0, r1
   260f0:	bx	lr

000260f4 <flatcc_builder_embed_buffer@@Base>:
   260f4:	push	{r4, r5, r6, lr}
   260f8:	sub	sp, sp, #88	; 0x58
   260fc:	mov	r4, r0
   26100:	mov	r6, r2
   26104:	mov	r5, r3
   26108:	ldr	r3, [r0, #152]	; 0x98
   2610c:	adds	r3, r3, #0
   26110:	movne	r3, #1
   26114:	mov	r2, r1
   26118:	add	r1, sp, #104	; 0x68
   2611c:	bl	257cc <flatcc_builder_default_alloc@@Base+0x114>
   26120:	cmp	r0, #0
   26124:	bne	26260 <flatcc_builder_embed_buffer@@Base+0x16c>
   26128:	ldr	r3, [sp, #108]	; 0x6c
   2612c:	and	r3, r3, #2
   26130:	cmp	r3, #0
   26134:	movne	r3, #4
   26138:	moveq	r3, #0
   2613c:	ldr	r1, [r4, #136]	; 0x88
   26140:	sub	r2, r1, r5
   26144:	sub	r3, r2, r3
   26148:	ldrh	r2, [sp, #104]	; 0x68
   2614c:	sub	r2, r2, #1
   26150:	and	r3, r3, r2
   26154:	add	r2, r5, r3
   26158:	str	r2, [sp, #84]	; 0x54
   2615c:	mov	r2, #0
   26160:	str	r2, [sp, #12]
   26164:	str	r2, [sp, #16]
   26168:	ldr	r2, [r4, #152]	; 0x98
   2616c:	cmp	r2, #0
   26170:	beq	26190 <flatcc_builder_embed_buffer@@Base+0x9c>
   26174:	mov	r2, #4
   26178:	str	r2, [sp, #12]
   2617c:	add	r0, sp, #84	; 0x54
   26180:	str	r0, [sp, #20]
   26184:	str	r2, [sp, #24]
   26188:	mov	r2, #1
   2618c:	str	r2, [sp, #16]
   26190:	cmp	r5, #0
   26194:	beq	261c0 <flatcc_builder_embed_buffer@@Base+0xcc>
   26198:	ldr	r2, [sp, #12]
   2619c:	add	r2, r2, r5
   261a0:	str	r2, [sp, #12]
   261a4:	ldr	r2, [sp, #16]
   261a8:	add	r2, r2, #1
   261ac:	add	r0, sp, #88	; 0x58
   261b0:	add	r0, r0, r2, lsl #3
   261b4:	str	r6, [r0, #-76]	; 0xffffffb4
   261b8:	str	r5, [r0, #-72]	; 0xffffffb8
   261bc:	str	r2, [sp, #16]
   261c0:	cmp	r3, #0
   261c4:	beq	261f4 <flatcc_builder_embed_buffer@@Base+0x100>
   261c8:	ldr	r2, [sp, #12]
   261cc:	add	r2, r2, r3
   261d0:	str	r2, [sp, #12]
   261d4:	ldr	r2, [sp, #16]
   261d8:	add	r2, r2, #1
   261dc:	add	r0, sp, #88	; 0x58
   261e0:	add	r0, r0, r2, lsl #3
   261e4:	ldr	ip, [pc, #124]	; 26268 <flatcc_builder_embed_buffer@@Base+0x174>
   261e8:	str	ip, [r0, #-76]	; 0xffffffb4
   261ec:	str	r3, [r0, #-72]	; 0xffffffb8
   261f0:	str	r2, [sp, #16]
   261f4:	ldr	r3, [sp, #12]
   261f8:	sub	r5, r1, r3
   261fc:	cmp	r1, r5
   26200:	ble	26238 <flatcc_builder_embed_buffer@@Base+0x144>
   26204:	str	r3, [sp]
   26208:	ldr	r6, [r4, #44]	; 0x2c
   2620c:	mov	r3, r5
   26210:	ldr	r2, [sp, #16]
   26214:	add	r1, sp, #20
   26218:	ldr	r0, [r4, #36]	; 0x24
   2621c:	blx	r6
   26220:	cmp	r0, #0
   26224:	streq	r5, [r4, #136]	; 0x88
   26228:	bne	2624c <flatcc_builder_embed_buffer@@Base+0x158>
   2622c:	mov	r0, r5
   26230:	add	sp, sp, #88	; 0x58
   26234:	pop	{r4, r5, r6, pc}
   26238:	ldr	r3, [pc, #44]	; 2626c <flatcc_builder_embed_buffer@@Base+0x178>
   2623c:	ldr	r2, [pc, #44]	; 26270 <flatcc_builder_embed_buffer@@Base+0x17c>
   26240:	ldr	r1, [pc, #44]	; 26274 <flatcc_builder_embed_buffer@@Base+0x180>
   26244:	ldr	r0, [pc, #44]	; 26278 <flatcc_builder_embed_buffer@@Base+0x184>
   26248:	bl	14618 <__assert_fail@plt>
   2624c:	ldr	r3, [pc, #24]	; 2626c <flatcc_builder_embed_buffer@@Base+0x178>
   26250:	ldr	r2, [pc, #36]	; 2627c <flatcc_builder_embed_buffer@@Base+0x188>
   26254:	ldr	r1, [pc, #24]	; 26274 <flatcc_builder_embed_buffer@@Base+0x180>
   26258:	ldr	r0, [pc, #24]	; 26278 <flatcc_builder_embed_buffer@@Base+0x184>
   2625c:	bl	14618 <__assert_fail@plt>
   26260:	mov	r5, #0
   26264:	b	2622c <flatcc_builder_embed_buffer@@Base+0x138>
   26268:			; <UNDEFINED> instruction: 0x000401b4
   2626c:	andeq	r0, r4, r0, lsl #8
   26270:	andeq	r0, r0, r7, lsl #5
   26274:	andeq	r0, r4, r4, lsl #18
   26278:	andeq	r0, r4, r8, asr r9
   2627c:	andeq	r0, r0, fp, lsl #5

00026280 <flatcc_builder_create_buffer@@Base>:
   26280:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   26284:	sub	sp, sp, #96	; 0x60
   26288:	mov	r5, r0
   2628c:	mov	r9, r1
   26290:	mov	r6, r3
   26294:	ldr	r8, [sp, #132]	; 0x84
   26298:	mov	r3, #0
   2629c:	str	r3, [sp, #12]
   262a0:	and	r4, r8, #1
   262a4:	uxtb	r7, r4
   262a8:	mov	r3, r7
   262ac:	add	r1, sp, #128	; 0x80
   262b0:	bl	257cc <flatcc_builder_default_alloc@@Base+0x114>
   262b4:	cmp	r0, #0
   262b8:	bne	2645c <flatcc_builder_create_buffer@@Base+0x1dc>
   262bc:	ldrh	r0, [sp, #128]	; 0x80
   262c0:	ldrh	r3, [r5, #128]	; 0x80
   262c4:	cmp	r3, r0
   262c8:	strhcc	r0, [r5, #128]	; 0x80
   262cc:	cmp	r9, #0
   262d0:	ldrne	r3, [r9]
   262d4:	strne	r3, [sp, #12]
   262d8:	ldr	r1, [sp, #12]
   262dc:	cmp	r1, #0
   262e0:	movne	r1, #4
   262e4:	moveq	r1, #0
   262e8:	tst	r8, #2
   262ec:	bne	26464 <flatcc_builder_create_buffer@@Base+0x1e4>
   262f0:	ldr	ip, [r5, #136]	; 0x88
   262f4:	mov	r2, ip
   262f8:	sub	r3, ip, #4
   262fc:	sub	r3, r3, r1
   26300:	sub	r0, r0, #1
   26304:	and	r3, r3, r0
   26308:	mov	r0, #0
   2630c:	str	r0, [sp, #16]
   26310:	str	r0, [sp, #20]
   26314:	cmp	r4, r0
   26318:	bne	26480 <flatcc_builder_create_buffer@@Base+0x200>
   2631c:	ldr	lr, [sp, #16]
   26320:	add	lr, lr, #4
   26324:	str	lr, [sp, #16]
   26328:	ldr	r8, [sp, #20]
   2632c:	add	r0, r8, #1
   26330:	add	r9, sp, #96	; 0x60
   26334:	add	r9, r9, r0, lsl #3
   26338:	add	sl, sp, #92	; 0x5c
   2633c:	str	sl, [r9, #-80]	; 0xffffffb0
   26340:	mov	sl, #4
   26344:	str	sl, [r9, #-76]	; 0xffffffb4
   26348:	str	r0, [sp, #20]
   2634c:	cmp	r1, #0
   26350:	beq	2637c <flatcc_builder_create_buffer@@Base+0xfc>
   26354:	add	lr, r1, lr
   26358:	str	lr, [sp, #16]
   2635c:	add	r0, r8, #2
   26360:	add	lr, sp, #96	; 0x60
   26364:	add	r0, lr, r0, lsl #3
   26368:	add	lr, sp, #12
   2636c:	str	lr, [r0, #-80]	; 0xffffffb0
   26370:	str	r1, [r0, #-76]	; 0xffffffb4
   26374:	add	r8, r8, #2
   26378:	str	r8, [sp, #20]
   2637c:	cmp	r3, #0
   26380:	beq	263b0 <flatcc_builder_create_buffer@@Base+0x130>
   26384:	ldr	r1, [sp, #16]
   26388:	add	r1, r1, r3
   2638c:	str	r1, [sp, #16]
   26390:	ldr	r1, [sp, #20]
   26394:	add	r1, r1, #1
   26398:	add	r0, sp, #96	; 0x60
   2639c:	add	r0, r0, r1, lsl #3
   263a0:	ldr	lr, [pc, #248]	; 264a0 <flatcc_builder_create_buffer@@Base+0x220>
   263a4:	str	lr, [r0, #-80]	; 0xffffffb0
   263a8:	str	r3, [r0, #-76]	; 0xffffffb4
   263ac:	str	r1, [sp, #20]
   263b0:	ldr	r1, [sp, #16]
   263b4:	sub	r3, r2, r1
   263b8:	add	r3, r3, r7, lsl #2
   263bc:	cmp	r4, #0
   263c0:	ldrne	r2, [r5, #144]	; 0x90
   263c4:	ldreq	r2, [r5, #140]	; 0x8c
   263c8:	sub	r2, r2, r3
   263cc:	str	r2, [sp, #88]	; 0x58
   263d0:	sub	r3, r6, r3
   263d4:	str	r3, [sp, #92]	; 0x5c
   263d8:	sub	r4, ip, r1
   263dc:	cmp	r4, ip
   263e0:	bge	26420 <flatcc_builder_create_buffer@@Base+0x1a0>
   263e4:	str	r1, [sp]
   263e8:	ldr	r6, [r5, #44]	; 0x2c
   263ec:	mov	r3, r4
   263f0:	ldr	r2, [sp, #20]
   263f4:	add	r1, sp, #24
   263f8:	ldr	r0, [r5, #36]	; 0x24
   263fc:	blx	r6
   26400:	cmp	r0, #0
   26404:	bne	26434 <flatcc_builder_create_buffer@@Base+0x1b4>
   26408:	str	r4, [r5, #136]	; 0x88
   2640c:	cmp	r4, #0
   26410:	beq	26448 <flatcc_builder_create_buffer@@Base+0x1c8>
   26414:	mov	r0, r4
   26418:	add	sp, sp, #96	; 0x60
   2641c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26420:	ldr	r3, [pc, #124]	; 264a4 <flatcc_builder_create_buffer@@Base+0x224>
   26424:	ldr	r2, [pc, #124]	; 264a8 <flatcc_builder_create_buffer@@Base+0x228>
   26428:	ldr	r1, [pc, #124]	; 264ac <flatcc_builder_create_buffer@@Base+0x22c>
   2642c:	ldr	r0, [pc, #124]	; 264b0 <flatcc_builder_create_buffer@@Base+0x230>
   26430:	bl	14618 <__assert_fail@plt>
   26434:	ldr	r3, [pc, #104]	; 264a4 <flatcc_builder_create_buffer@@Base+0x224>
   26438:	ldr	r2, [pc, #116]	; 264b4 <flatcc_builder_create_buffer@@Base+0x234>
   2643c:	ldr	r1, [pc, #104]	; 264ac <flatcc_builder_create_buffer@@Base+0x22c>
   26440:	ldr	r0, [pc, #104]	; 264b0 <flatcc_builder_create_buffer@@Base+0x230>
   26444:	bl	14618 <__assert_fail@plt>
   26448:	ldr	r3, [pc, #104]	; 264b8 <flatcc_builder_create_buffer@@Base+0x238>
   2644c:	mov	r2, #772	; 0x304
   26450:	ldr	r1, [pc, #84]	; 264ac <flatcc_builder_create_buffer@@Base+0x22c>
   26454:	ldr	r0, [pc, #84]	; 264b0 <flatcc_builder_create_buffer@@Base+0x230>
   26458:	bl	14618 <__assert_fail@plt>
   2645c:	mov	r4, #0
   26460:	b	26414 <flatcc_builder_create_buffer@@Base+0x194>
   26464:	ldr	ip, [r5, #136]	; 0x88
   26468:	mov	r2, ip
   2646c:	sub	r3, ip, #8
   26470:	sub	r3, r3, r1
   26474:	sub	r0, r0, #1
   26478:	and	r3, r3, r0
   2647c:	mov	r7, #1
   26480:	mov	r0, #4
   26484:	str	r0, [sp, #16]
   26488:	add	lr, sp, #88	; 0x58
   2648c:	str	lr, [sp, #24]
   26490:	str	r0, [sp, #28]
   26494:	mov	r0, #1
   26498:	str	r0, [sp, #20]
   2649c:	b	2631c <flatcc_builder_create_buffer@@Base+0x9c>
   264a0:			; <UNDEFINED> instruction: 0x000401b4
   264a4:	andeq	r0, r4, r0, lsl #8
   264a8:	andeq	r0, r0, r7, lsl #5
   264ac:	andeq	r0, r4, r4, lsl #18
   264b0:	andeq	r0, r4, r8, asr r9
   264b4:	andeq	r0, r0, fp, lsl #5
   264b8:	andeq	r0, r4, ip, ror #8

000264bc <flatcc_builder_create_struct@@Base>:
   264bc:	push	{r4, r5, r6, lr}
   264c0:	sub	sp, sp, #80	; 0x50
   264c4:	cmp	r3, #0
   264c8:	beq	26520 <flatcc_builder_create_struct@@Base+0x64>
   264cc:	mov	r4, r0
   264d0:	ldrh	r0, [r0, #128]	; 0x80
   264d4:	cmp	r0, r3
   264d8:	strhcc	r3, [r4, #128]	; 0x80
   264dc:	ldr	ip, [r4, #136]	; 0x88
   264e0:	sub	r0, ip, r2
   264e4:	sub	r3, r3, #1
   264e8:	and	r3, r3, r0
   264ec:	mov	r0, #0
   264f0:	str	r0, [sp, #8]
   264f4:	str	r0, [sp, #12]
   264f8:	cmp	r2, r0
   264fc:	beq	2655c <flatcc_builder_create_struct@@Base+0xa0>
   26500:	str	r2, [sp, #8]
   26504:	str	r1, [sp, #16]
   26508:	str	r2, [sp, #20]
   2650c:	mov	r2, #1
   26510:	str	r2, [sp, #12]
   26514:	cmp	r3, r0
   26518:	beq	26590 <flatcc_builder_create_struct@@Base+0xd4>
   2651c:	b	26564 <flatcc_builder_create_struct@@Base+0xa8>
   26520:	ldr	r3, [pc, #172]	; 265d4 <flatcc_builder_create_struct@@Base+0x118>
   26524:	ldr	r2, [pc, #172]	; 265d8 <flatcc_builder_create_struct@@Base+0x11c>
   26528:	ldr	r1, [pc, #172]	; 265dc <flatcc_builder_create_struct@@Base+0x120>
   2652c:	ldr	r0, [pc, #172]	; 265e0 <flatcc_builder_create_struct@@Base+0x124>
   26530:	bl	14618 <__assert_fail@plt>
   26534:	ldr	r3, [pc, #168]	; 265e4 <flatcc_builder_create_struct@@Base+0x128>
   26538:	ldr	r2, [pc, #168]	; 265e8 <flatcc_builder_create_struct@@Base+0x12c>
   2653c:	ldr	r1, [pc, #152]	; 265dc <flatcc_builder_create_struct@@Base+0x120>
   26540:	ldr	r0, [pc, #164]	; 265ec <flatcc_builder_create_struct@@Base+0x130>
   26544:	bl	14618 <__assert_fail@plt>
   26548:	ldr	r3, [pc, #148]	; 265e4 <flatcc_builder_create_struct@@Base+0x128>
   2654c:	ldr	r2, [pc, #156]	; 265f0 <flatcc_builder_create_struct@@Base+0x134>
   26550:	ldr	r1, [pc, #132]	; 265dc <flatcc_builder_create_struct@@Base+0x120>
   26554:	ldr	r0, [pc, #144]	; 265ec <flatcc_builder_create_struct@@Base+0x130>
   26558:	bl	14618 <__assert_fail@plt>
   2655c:	cmp	r3, #0
   26560:	beq	26534 <flatcc_builder_create_struct@@Base+0x78>
   26564:	ldr	r2, [sp, #8]
   26568:	add	r2, r2, r3
   2656c:	str	r2, [sp, #8]
   26570:	ldr	r2, [sp, #12]
   26574:	add	r2, r2, #1
   26578:	add	r1, sp, #80	; 0x50
   2657c:	add	r1, r1, r2, lsl #3
   26580:	ldr	r0, [pc, #108]	; 265f4 <flatcc_builder_create_struct@@Base+0x138>
   26584:	str	r0, [r1, #-72]	; 0xffffffb8
   26588:	str	r3, [r1, #-68]	; 0xffffffbc
   2658c:	str	r2, [sp, #12]
   26590:	ldr	r3, [sp, #8]
   26594:	sub	r5, ip, r3
   26598:	cmp	ip, r5
   2659c:	ble	26534 <flatcc_builder_create_struct@@Base+0x78>
   265a0:	str	r3, [sp]
   265a4:	ldr	r6, [r4, #44]	; 0x2c
   265a8:	mov	r3, r5
   265ac:	ldr	r2, [sp, #12]
   265b0:	add	r1, sp, #16
   265b4:	ldr	r0, [r4, #36]	; 0x24
   265b8:	blx	r6
   265bc:	cmp	r0, #0
   265c0:	bne	26548 <flatcc_builder_create_struct@@Base+0x8c>
   265c4:	str	r5, [r4, #136]	; 0x88
   265c8:	mov	r0, r5
   265cc:	add	sp, sp, #80	; 0x50
   265d0:	pop	{r4, r5, r6, pc}
   265d4:	andeq	r0, r4, ip, lsl #9
   265d8:	andeq	r0, r0, pc, lsl #6
   265dc:	andeq	r0, r4, r4, lsl #18
   265e0:			; <UNDEFINED> instruction: 0x000409bc
   265e4:	andeq	r0, r4, r0, lsl #8
   265e8:	andeq	r0, r0, r7, lsl #5
   265ec:	andeq	r0, r4, r8, asr r9
   265f0:	andeq	r0, r0, fp, lsl #5
   265f4:			; <UNDEFINED> instruction: 0x000401b4

000265f8 <flatcc_builder_start_buffer@@Base>:
   265f8:	push	{r4, r5, r6, r7, r8, lr}
   265fc:	mov	r4, r0
   26600:	mov	r5, r1
   26604:	mov	r7, r2
   26608:	mov	r6, r3
   2660c:	ldrh	r1, [r0, #128]	; 0x80
   26610:	bl	258e4 <flatcc_builder_default_alloc@@Base+0x22c>
   26614:	cmp	r0, #0
   26618:	bne	266a4 <flatcc_builder_start_buffer@@Base+0xac>
   2661c:	mov	r3, #1
   26620:	strh	r3, [r4, #128]	; 0x80
   26624:	ldr	r3, [r4, #32]
   26628:	ldrh	r2, [r4, #132]	; 0x84
   2662c:	strh	r2, [r3, #34]	; 0x22
   26630:	strh	r7, [r4, #132]	; 0x84
   26634:	ldr	r3, [r4, #32]
   26638:	ldrh	r2, [r4, #164]	; 0xa4
   2663c:	strh	r2, [r3, #32]
   26640:	strh	r6, [r4, #164]	; 0xa4
   26644:	ldr	r3, [r4, #32]
   26648:	ldr	r2, [r4, #144]	; 0x90
   2664c:	str	r2, [r3, #20]
   26650:	ldr	r3, [r4, #32]
   26654:	ldr	r2, [r4, #152]	; 0x98
   26658:	str	r2, [r3, #28]
   2665c:	ldr	r3, [r4, #136]	; 0x88
   26660:	str	r3, [r4, #144]	; 0x90
   26664:	ldr	r3, [r4, #148]	; 0x94
   26668:	add	r2, r3, #1
   2666c:	str	r2, [r4, #148]	; 0x94
   26670:	str	r3, [r4, #152]	; 0x98
   26674:	ldr	r3, [r4, #32]
   26678:	ldr	r2, [r4, #168]	; 0xa8
   2667c:	str	r2, [r3, #16]
   26680:	ldr	r3, [pc, #36]	; 266ac <flatcc_builder_start_buffer@@Base+0xb4>
   26684:	cmp	r5, #0
   26688:	moveq	r5, r3
   2668c:	ldr	r3, [r5]
   26690:	str	r3, [r4, #168]	; 0xa8
   26694:	ldr	r3, [r4, #32]
   26698:	mov	r2, #1
   2669c:	strh	r2, [r3, #14]
   266a0:	pop	{r4, r5, r6, r7, r8, pc}
   266a4:	mvn	r0, #0
   266a8:	pop	{r4, r5, r6, r7, r8, pc}
   266ac:			; <UNDEFINED> instruction: 0x000401b4

000266b0 <flatcc_builder_end_buffer@@Base>:
   266b0:	push	{r4, r5, lr}
   266b4:	sub	sp, sp, #12
   266b8:	mov	r4, r0
   266bc:	ldrh	r2, [r0, #164]	; 0xa4
   266c0:	and	r2, r2, #2
   266c4:	ldr	r0, [r0, #152]	; 0x98
   266c8:	cmp	r0, #0
   266cc:	moveq	r0, r2
   266d0:	orrne	r0, r2, #1
   266d4:	ldr	r2, [r4, #32]
   266d8:	ldrh	r2, [r2, #14]
   266dc:	cmp	r2, #1
   266e0:	bne	26724 <flatcc_builder_end_buffer@@Base+0x74>
   266e4:	ldrh	r2, [r4, #132]	; 0x84
   266e8:	ldrh	r3, [r4, #128]	; 0x80
   266ec:	cmp	r3, r2
   266f0:	strhcc	r2, [r4, #128]	; 0x80
   266f4:	str	r0, [sp, #4]
   266f8:	ldrh	r3, [r4, #128]	; 0x80
   266fc:	str	r3, [sp]
   26700:	mov	r3, r1
   26704:	add	r1, r4, #168	; 0xa8
   26708:	mov	r0, r4
   2670c:	bl	26280 <flatcc_builder_create_buffer@@Base>
   26710:	subs	r5, r0, #0
   26714:	bne	26738 <flatcc_builder_end_buffer@@Base+0x88>
   26718:	mov	r0, r5
   2671c:	add	sp, sp, #12
   26720:	pop	{r4, r5, pc}
   26724:	ldr	r3, [pc, #176]	; 267dc <flatcc_builder_end_buffer@@Base+0x12c>
   26728:	ldr	r2, [pc, #176]	; 267e0 <flatcc_builder_end_buffer@@Base+0x130>
   2672c:	ldr	r1, [pc, #176]	; 267e4 <flatcc_builder_end_buffer@@Base+0x134>
   26730:	ldr	r0, [pc, #176]	; 267e8 <flatcc_builder_end_buffer@@Base+0x138>
   26734:	bl	14618 <__assert_fail@plt>
   26738:	ldr	r3, [r4, #32]
   2673c:	ldr	r2, [r3, #20]
   26740:	str	r2, [r4, #144]	; 0x90
   26744:	ldr	r2, [r3, #28]
   26748:	str	r2, [r4, #152]	; 0x98
   2674c:	ldr	r2, [r3, #16]
   26750:	str	r2, [r4, #168]	; 0xa8
   26754:	ldrh	r3, [r3, #32]
   26758:	strh	r3, [r4, #164]	; 0xa4
   2675c:	ldr	r2, [r4, #20]
   26760:	mov	r1, #0
   26764:	ldr	r0, [r4, #16]
   26768:	bl	145c4 <memset@plt>
   2676c:	ldr	r2, [r4, #32]
   26770:	ldr	r3, [r2, #8]
   26774:	str	r3, [r4, #20]
   26778:	ldr	r0, [r2]
   2677c:	str	r0, [r4, #28]
   26780:	ldr	r1, [r2, #4]
   26784:	ldr	r3, [r4, #60]	; 0x3c
   26788:	add	r3, r3, r0
   2678c:	str	r3, [r4, #16]
   26790:	ldr	r3, [r4, #64]	; 0x40
   26794:	sub	r3, r3, r0
   26798:	cmp	r3, r1
   2679c:	movcs	r3, r1
   267a0:	str	r3, [r4, #24]
   267a4:	str	r1, [r2, #4]
   267a8:	ldrh	r3, [r4, #130]	; 0x82
   267ac:	ldrh	r2, [r4, #128]	; 0x80
   267b0:	cmp	r2, r3
   267b4:	strhcc	r3, [r4, #128]	; 0x80
   267b8:	ldr	r3, [r4, #32]
   267bc:	ldrh	r2, [r3, #12]
   267c0:	strh	r2, [r4, #130]	; 0x82
   267c4:	sub	r3, r3, #36	; 0x24
   267c8:	str	r3, [r4, #32]
   267cc:	ldr	r3, [r4, #156]	; 0x9c
   267d0:	sub	r3, r3, #1
   267d4:	str	r3, [r4, #156]	; 0x9c
   267d8:	b	26718 <flatcc_builder_end_buffer@@Base+0x68>
   267dc:	andeq	r0, r4, ip, lsr #9
   267e0:	andeq	r0, r0, r6, asr #6
   267e4:	andeq	r0, r4, r4, lsl #18
   267e8:	andeq	r0, r4, r8, asr #19

000267ec <flatcc_builder_start_struct@@Base>:
   267ec:	push	{r4, r5, r6, lr}
   267f0:	mov	r4, r0
   267f4:	mov	r5, r1
   267f8:	mov	r1, r2
   267fc:	bl	258e4 <flatcc_builder_default_alloc@@Base+0x22c>
   26800:	cmp	r0, #0
   26804:	bne	26884 <flatcc_builder_start_struct@@Base+0x98>
   26808:	ldr	r3, [r4, #32]
   2680c:	mov	r2, #2
   26810:	strh	r2, [r3, #14]
   26814:	ldr	r1, [r4, #28]
   26818:	ldr	r2, [r4, #60]	; 0x3c
   2681c:	add	r2, r2, r1
   26820:	str	r2, [r4, #16]
   26824:	ldr	r3, [r4, #64]	; 0x40
   26828:	sub	r3, r3, r1
   2682c:	cmn	r3, #4
   26830:	mvnhi	r3, #3
   26834:	str	r3, [r4, #24]
   26838:	ldr	r3, [r4, #32]
   2683c:	mvn	r2, #3
   26840:	str	r2, [r3, #4]
   26844:	ldr	r6, [r4, #20]
   26848:	add	r5, r5, r6
   2684c:	str	r5, [r4, #20]
   26850:	ldr	r3, [r4, #24]
   26854:	cmp	r5, r3
   26858:	bcs	26868 <flatcc_builder_start_struct@@Base+0x7c>
   2685c:	ldr	r0, [r4, #16]
   26860:	add	r0, r0, r6
   26864:	pop	{r4, r5, r6, pc}
   26868:	add	r1, r5, #1
   2686c:	mov	r0, r4
   26870:	bl	25644 <main@@Base+0x7f4>
   26874:	cmp	r0, #0
   26878:	beq	2685c <flatcc_builder_start_struct@@Base+0x70>
   2687c:	mov	r0, #0
   26880:	pop	{r4, r5, r6, pc}
   26884:	mov	r0, #0
   26888:	pop	{r4, r5, r6, pc}

0002688c <flatcc_builder_struct_edit@@Base>:
   2688c:	ldr	r0, [r0, #16]
   26890:	bx	lr

00026894 <flatcc_builder_end_struct@@Base>:
   26894:	push	{r4, r5, r6, lr}
   26898:	ldr	r3, [r0, #32]
   2689c:	ldrh	r3, [r3, #14]
   268a0:	cmp	r3, #2
   268a4:	bne	268cc <flatcc_builder_end_struct@@Base+0x38>
   268a8:	mov	r4, r0
   268ac:	ldrh	r3, [r0, #130]	; 0x82
   268b0:	ldr	r2, [r0, #20]
   268b4:	ldr	r1, [r0, #16]
   268b8:	bl	264bc <flatcc_builder_create_struct@@Base>
   268bc:	subs	r5, r0, #0
   268c0:	bne	268e0 <flatcc_builder_end_struct@@Base+0x4c>
   268c4:	mov	r0, r5
   268c8:	pop	{r4, r5, r6, pc}
   268cc:	ldr	r3, [pc, #140]	; 26960 <flatcc_builder_end_struct@@Base+0xcc>
   268d0:	mov	r2, #872	; 0x368
   268d4:	ldr	r1, [pc, #136]	; 26964 <flatcc_builder_end_struct@@Base+0xd0>
   268d8:	ldr	r0, [pc, #136]	; 26968 <flatcc_builder_end_struct@@Base+0xd4>
   268dc:	bl	14618 <__assert_fail@plt>
   268e0:	ldr	r2, [r4, #20]
   268e4:	mov	r1, #0
   268e8:	ldr	r0, [r4, #16]
   268ec:	bl	145c4 <memset@plt>
   268f0:	ldr	r2, [r4, #32]
   268f4:	ldr	r3, [r2, #8]
   268f8:	str	r3, [r4, #20]
   268fc:	ldr	r0, [r2]
   26900:	str	r0, [r4, #28]
   26904:	ldr	r1, [r2, #4]
   26908:	ldr	r3, [r4, #60]	; 0x3c
   2690c:	add	r3, r3, r0
   26910:	str	r3, [r4, #16]
   26914:	ldr	r3, [r4, #64]	; 0x40
   26918:	sub	r3, r3, r0
   2691c:	cmp	r3, r1
   26920:	movcs	r3, r1
   26924:	str	r3, [r4, #24]
   26928:	str	r1, [r2, #4]
   2692c:	ldrh	r3, [r4, #130]	; 0x82
   26930:	ldrh	r2, [r4, #128]	; 0x80
   26934:	cmp	r2, r3
   26938:	strhcc	r3, [r4, #128]	; 0x80
   2693c:	ldr	r3, [r4, #32]
   26940:	ldrh	r2, [r3, #12]
   26944:	strh	r2, [r4, #130]	; 0x82
   26948:	sub	r3, r3, #36	; 0x24
   2694c:	str	r3, [r4, #32]
   26950:	ldr	r3, [r4, #156]	; 0x9c
   26954:	sub	r3, r3, #1
   26958:	str	r3, [r4, #156]	; 0x9c
   2695c:	b	268c4 <flatcc_builder_end_struct@@Base+0x30>
   26960:	andeq	r0, r4, r8, asr #9
   26964:	andeq	r0, r4, r4, lsl #18
   26968:	strdeq	r0, [r4], -r4

0002696c <flatcc_builder_extend_vector@@Base>:
   2696c:	push	{r4, r5, r6, lr}
   26970:	mov	r4, r0
   26974:	ldr	r2, [r0, #32]
   26978:	ldr	r3, [r2, #20]
   2697c:	add	r0, r1, r3
   26980:	ldr	ip, [r2, #24]
   26984:	cmp	r3, r0
   26988:	movls	r3, #0
   2698c:	movhi	r3, #1
   26990:	cmp	ip, r0
   26994:	orrcc	r3, r3, #1
   26998:	cmp	r3, #0
   2699c:	bne	269d0 <flatcc_builder_extend_vector@@Base+0x64>
   269a0:	str	r0, [r2, #20]
   269a4:	ldr	r5, [r4, #20]
   269a8:	ldr	r3, [r4, #32]
   269ac:	ldr	r3, [r3, #16]
   269b0:	mla	r1, r3, r1, r5
   269b4:	str	r1, [r4, #20]
   269b8:	ldr	r3, [r4, #24]
   269bc:	cmp	r1, r3
   269c0:	bcs	269e4 <flatcc_builder_extend_vector@@Base+0x78>
   269c4:	ldr	r0, [r4, #16]
   269c8:	add	r0, r0, r5
   269cc:	pop	{r4, r5, r6, pc}
   269d0:	ldr	r3, [pc, #44]	; 26a04 <flatcc_builder_extend_vector@@Base+0x98>
   269d4:	mov	r2, #892	; 0x37c
   269d8:	ldr	r1, [pc, #40]	; 26a08 <flatcc_builder_extend_vector@@Base+0x9c>
   269dc:	ldr	r0, [pc, #40]	; 26a0c <flatcc_builder_extend_vector@@Base+0xa0>
   269e0:	bl	14618 <__assert_fail@plt>
   269e4:	mvn	r2, #3
   269e8:	add	r1, r1, #1
   269ec:	mov	r0, r4
   269f0:	bl	25644 <main@@Base+0x7f4>
   269f4:	cmp	r0, #0
   269f8:	beq	269c4 <flatcc_builder_extend_vector@@Base+0x58>
   269fc:	mov	r0, #0
   26a00:	pop	{r4, r5, r6, pc}
   26a04:	andeq	r0, r4, r4, ror #9
   26a08:	andeq	r0, r4, r4, lsl #18
   26a0c:	andeq	r0, r4, r0, lsr #20

00026a10 <flatcc_builder_vector_push@@Base>:
   26a10:	push	{r4, r5, r6, r7, r8, lr}
   26a14:	ldr	r3, [r0, #32]
   26a18:	ldrh	r2, [r3, #14]
   26a1c:	cmp	r2, #4
   26a20:	bne	26a88 <flatcc_builder_vector_push@@Base+0x78>
   26a24:	mov	r4, r0
   26a28:	mov	r6, r1
   26a2c:	ldr	r2, [r3, #20]
   26a30:	ldr	r1, [r3, #24]
   26a34:	cmp	r2, r1
   26a38:	bhi	26a9c <flatcc_builder_vector_push@@Base+0x8c>
   26a3c:	add	r2, r2, #1
   26a40:	str	r2, [r3, #20]
   26a44:	ldr	r3, [r0, #32]
   26a48:	ldr	r7, [r3, #16]
   26a4c:	ldr	r5, [r0, #20]
   26a50:	add	r1, r7, r5
   26a54:	str	r1, [r0, #20]
   26a58:	ldr	r3, [r0, #24]
   26a5c:	cmp	r1, r3
   26a60:	bcs	26ab0 <flatcc_builder_vector_push@@Base+0xa0>
   26a64:	ldr	r4, [r4, #16]
   26a68:	adds	r4, r4, r5
   26a6c:	beq	26a80 <flatcc_builder_vector_push@@Base+0x70>
   26a70:	mov	r2, r7
   26a74:	mov	r1, r6
   26a78:	mov	r0, r4
   26a7c:	bl	1454c <memcpy@plt>
   26a80:	mov	r0, r4
   26a84:	pop	{r4, r5, r6, r7, r8, pc}
   26a88:	ldr	r3, [pc, #60]	; 26acc <flatcc_builder_vector_push@@Base+0xbc>
   26a8c:	ldr	r2, [pc, #60]	; 26ad0 <flatcc_builder_vector_push@@Base+0xc0>
   26a90:	ldr	r1, [pc, #60]	; 26ad4 <flatcc_builder_vector_push@@Base+0xc4>
   26a94:	ldr	r0, [pc, #60]	; 26ad8 <flatcc_builder_vector_push@@Base+0xc8>
   26a98:	bl	14618 <__assert_fail@plt>
   26a9c:	ldr	r3, [pc, #40]	; 26acc <flatcc_builder_vector_push@@Base+0xbc>
   26aa0:	mov	r2, #908	; 0x38c
   26aa4:	ldr	r1, [pc, #40]	; 26ad4 <flatcc_builder_vector_push@@Base+0xc4>
   26aa8:	ldr	r0, [pc, #44]	; 26adc <flatcc_builder_vector_push@@Base+0xcc>
   26aac:	bl	14618 <__assert_fail@plt>
   26ab0:	mvn	r2, #3
   26ab4:	add	r1, r1, #1
   26ab8:	bl	25644 <main@@Base+0x7f4>
   26abc:	cmp	r0, #0
   26ac0:	beq	26a64 <flatcc_builder_vector_push@@Base+0x54>
   26ac4:	mov	r4, #0
   26ac8:	b	26a80 <flatcc_builder_vector_push@@Base+0x70>
   26acc:	strdeq	r0, [r4], -r8
   26ad0:	andeq	r0, r0, fp, lsl #7
   26ad4:	andeq	r0, r4, r4, lsl #18
   26ad8:	andeq	r0, r4, ip, lsr sl
   26adc:	andeq	r0, r4, r8, ror #20

00026ae0 <flatcc_builder_append_vector@@Base>:
   26ae0:	push	{r4, r5, r6, r7, r8, lr}
   26ae4:	mov	r5, r1
   26ae8:	ldr	r1, [r0, #32]
   26aec:	ldrh	r3, [r1, #14]
   26af0:	cmp	r3, #4
   26af4:	bne	26b70 <flatcc_builder_append_vector@@Base+0x90>
   26af8:	mov	r4, r0
   26afc:	ldr	r3, [r1, #20]
   26b00:	add	r0, r2, r3
   26b04:	ldr	ip, [r1, #24]
   26b08:	cmp	r3, r0
   26b0c:	movls	r3, #0
   26b10:	movhi	r3, #1
   26b14:	cmp	ip, r0
   26b18:	orrcc	r3, r3, #1
   26b1c:	cmp	r3, #0
   26b20:	bne	26b84 <flatcc_builder_append_vector@@Base+0xa4>
   26b24:	str	r0, [r1, #20]
   26b28:	ldr	r3, [r4, #32]
   26b2c:	ldr	r6, [r3, #16]
   26b30:	mul	r6, r6, r2
   26b34:	ldr	r7, [r4, #20]
   26b38:	add	r1, r6, r7
   26b3c:	str	r1, [r4, #20]
   26b40:	ldr	r3, [r4, #24]
   26b44:	cmp	r1, r3
   26b48:	bcs	26b98 <flatcc_builder_append_vector@@Base+0xb8>
   26b4c:	ldr	r4, [r4, #16]
   26b50:	adds	r4, r4, r7
   26b54:	beq	26b68 <flatcc_builder_append_vector@@Base+0x88>
   26b58:	mov	r2, r6
   26b5c:	mov	r1, r5
   26b60:	mov	r0, r4
   26b64:	bl	1454c <memcpy@plt>
   26b68:	mov	r0, r4
   26b6c:	pop	{r4, r5, r6, r7, r8, pc}
   26b70:	ldr	r3, [pc, #64]	; 26bb8 <flatcc_builder_append_vector@@Base+0xd8>
   26b74:	ldr	r2, [pc, #64]	; 26bbc <flatcc_builder_append_vector@@Base+0xdc>
   26b78:	ldr	r1, [pc, #64]	; 26bc0 <flatcc_builder_append_vector@@Base+0xe0>
   26b7c:	ldr	r0, [pc, #64]	; 26bc4 <flatcc_builder_append_vector@@Base+0xe4>
   26b80:	bl	14618 <__assert_fail@plt>
   26b84:	ldr	r3, [pc, #60]	; 26bc8 <flatcc_builder_append_vector@@Base+0xe8>
   26b88:	mov	r2, #892	; 0x37c
   26b8c:	ldr	r1, [pc, #44]	; 26bc0 <flatcc_builder_append_vector@@Base+0xe0>
   26b90:	ldr	r0, [pc, #52]	; 26bcc <flatcc_builder_append_vector@@Base+0xec>
   26b94:	bl	14618 <__assert_fail@plt>
   26b98:	mvn	r2, #3
   26b9c:	add	r1, r1, #1
   26ba0:	mov	r0, r4
   26ba4:	bl	25644 <main@@Base+0x7f4>
   26ba8:	cmp	r0, #0
   26bac:	beq	26b4c <flatcc_builder_append_vector@@Base+0x6c>
   26bb0:	mov	r4, #0
   26bb4:	b	26b68 <flatcc_builder_append_vector@@Base+0x88>
   26bb8:	andeq	r0, r4, r4, lsl r5
   26bbc:	muleq	r0, r3, r3
   26bc0:	andeq	r0, r4, r4, lsl #18
   26bc4:	andeq	r0, r4, ip, lsr sl
   26bc8:	andeq	r0, r4, r4, ror #9
   26bcc:	andeq	r0, r4, r0, lsr #20

00026bd0 <flatcc_builder_extend_offset_vector@@Base>:
   26bd0:	push	{r4, r5, r6, lr}
   26bd4:	mov	r4, r0
   26bd8:	ldr	r2, [r0, #32]
   26bdc:	ldr	r3, [r2, #20]
   26be0:	adds	r3, r1, r3
   26be4:	movcs	ip, #1
   26be8:	movcc	ip, #0
   26bec:	cmn	r3, #-1073741823	; 0xc0000001
   26bf0:	movls	r0, #0
   26bf4:	movhi	r0, #1
   26bf8:	orrs	r0, ip, r0
   26bfc:	bne	26c28 <flatcc_builder_extend_offset_vector@@Base+0x58>
   26c00:	str	r3, [r2, #20]
   26c04:	ldr	r5, [r4, #20]
   26c08:	add	r1, r5, r1, lsl #2
   26c0c:	str	r1, [r4, #20]
   26c10:	ldr	r3, [r4, #24]
   26c14:	cmp	r1, r3
   26c18:	bcs	26c3c <flatcc_builder_extend_offset_vector@@Base+0x6c>
   26c1c:	ldr	r0, [r4, #16]
   26c20:	add	r0, r0, r5
   26c24:	pop	{r4, r5, r6, pc}
   26c28:	ldr	r3, [pc, #44]	; 26c5c <flatcc_builder_extend_offset_vector@@Base+0x8c>
   26c2c:	mov	r2, #892	; 0x37c
   26c30:	ldr	r1, [pc, #40]	; 26c60 <flatcc_builder_extend_offset_vector@@Base+0x90>
   26c34:	ldr	r0, [pc, #40]	; 26c64 <flatcc_builder_extend_offset_vector@@Base+0x94>
   26c38:	bl	14618 <__assert_fail@plt>
   26c3c:	mvn	r2, #3
   26c40:	add	r1, r1, #1
   26c44:	mov	r0, r4
   26c48:	bl	25644 <main@@Base+0x7f4>
   26c4c:	cmp	r0, #0
   26c50:	beq	26c1c <flatcc_builder_extend_offset_vector@@Base+0x4c>
   26c54:	mov	r0, #0
   26c58:	pop	{r4, r5, r6, pc}
   26c5c:	andeq	r0, r4, r4, ror #9
   26c60:	andeq	r0, r4, r4, lsl #18
   26c64:	andeq	r0, r4, r0, lsr #20

00026c68 <flatcc_builder_offset_vector_push@@Base>:
   26c68:	push	{r4, r5, r6, lr}
   26c6c:	ldr	r2, [r0, #32]
   26c70:	ldrh	r3, [r2, #14]
   26c74:	cmp	r3, #5
   26c78:	bne	26cc0 <flatcc_builder_offset_vector_push@@Base+0x58>
   26c7c:	mov	r4, r0
   26c80:	mov	r6, r1
   26c84:	ldr	r3, [r2, #20]
   26c88:	cmn	r3, #-1073741823	; 0xc0000001
   26c8c:	beq	26cf0 <flatcc_builder_offset_vector_push@@Base+0x88>
   26c90:	add	r3, r3, #1
   26c94:	str	r3, [r2, #20]
   26c98:	ldr	r5, [r0, #20]
   26c9c:	add	r3, r5, #4
   26ca0:	str	r3, [r0, #20]
   26ca4:	ldr	r2, [r0, #24]
   26ca8:	cmp	r3, r2
   26cac:	bcs	26cd4 <flatcc_builder_offset_vector_push@@Base+0x6c>
   26cb0:	ldr	r3, [r4, #16]
   26cb4:	adds	r0, r3, r5
   26cb8:	strne	r6, [r3, r5]
   26cbc:	pop	{r4, r5, r6, pc}
   26cc0:	ldr	r3, [pc, #48]	; 26cf8 <flatcc_builder_offset_vector_push@@Base+0x90>
   26cc4:	ldr	r2, [pc, #48]	; 26cfc <flatcc_builder_offset_vector_push@@Base+0x94>
   26cc8:	ldr	r1, [pc, #48]	; 26d00 <flatcc_builder_offset_vector_push@@Base+0x98>
   26ccc:	ldr	r0, [pc, #48]	; 26d04 <flatcc_builder_offset_vector_push@@Base+0x9c>
   26cd0:	bl	14618 <__assert_fail@plt>
   26cd4:	mvn	r2, #3
   26cd8:	add	r1, r5, #5
   26cdc:	bl	25644 <main@@Base+0x7f4>
   26ce0:	cmp	r0, #0
   26ce4:	beq	26cb0 <flatcc_builder_offset_vector_push@@Base+0x48>
   26ce8:	mov	r0, #0
   26cec:	pop	{r4, r5, r6, pc}
   26cf0:	mov	r0, #0
   26cf4:	pop	{r4, r5, r6, pc}
   26cf8:	andeq	r0, r4, r4, lsr r5
   26cfc:	andeq	r0, r0, r6, lsr #7
   26d00:	andeq	r0, r4, r4, lsl #18
   26d04:	andeq	r0, r4, r8, lsr #21

00026d08 <flatcc_builder_append_offset_vector@@Base>:
   26d08:	push	{r4, r5, r6, r7, r8, lr}
   26d0c:	mov	r6, r1
   26d10:	ldr	r1, [r0, #32]
   26d14:	ldrh	r3, [r1, #14]
   26d18:	cmp	r3, #5
   26d1c:	bne	26d8c <flatcc_builder_append_offset_vector@@Base+0x84>
   26d20:	mov	r5, r0
   26d24:	ldr	r3, [r1, #20]
   26d28:	adds	r3, r2, r3
   26d2c:	movcs	ip, #1
   26d30:	movcc	ip, #0
   26d34:	cmn	r3, #-1073741823	; 0xc0000001
   26d38:	movls	r0, #0
   26d3c:	movhi	r0, #1
   26d40:	orrs	r0, ip, r0
   26d44:	bne	26da0 <flatcc_builder_append_offset_vector@@Base+0x98>
   26d48:	str	r3, [r1, #20]
   26d4c:	lsl	r4, r2, #2
   26d50:	ldr	r7, [r5, #20]
   26d54:	add	r1, r4, r7
   26d58:	str	r1, [r5, #20]
   26d5c:	ldr	r3, [r5, #24]
   26d60:	cmp	r1, r3
   26d64:	bcs	26db4 <flatcc_builder_append_offset_vector@@Base+0xac>
   26d68:	ldr	r5, [r5, #16]
   26d6c:	adds	r5, r5, r7
   26d70:	beq	26d84 <flatcc_builder_append_offset_vector@@Base+0x7c>
   26d74:	mov	r2, r4
   26d78:	mov	r1, r6
   26d7c:	mov	r0, r5
   26d80:	bl	1454c <memcpy@plt>
   26d84:	mov	r0, r5
   26d88:	pop	{r4, r5, r6, r7, r8, pc}
   26d8c:	ldr	r3, [pc, #64]	; 26dd4 <flatcc_builder_append_offset_vector@@Base+0xcc>
   26d90:	mov	r2, #948	; 0x3b4
   26d94:	ldr	r1, [pc, #60]	; 26dd8 <flatcc_builder_append_offset_vector@@Base+0xd0>
   26d98:	ldr	r0, [pc, #60]	; 26ddc <flatcc_builder_append_offset_vector@@Base+0xd4>
   26d9c:	bl	14618 <__assert_fail@plt>
   26da0:	ldr	r3, [pc, #56]	; 26de0 <flatcc_builder_append_offset_vector@@Base+0xd8>
   26da4:	mov	r2, #892	; 0x37c
   26da8:	ldr	r1, [pc, #40]	; 26dd8 <flatcc_builder_append_offset_vector@@Base+0xd0>
   26dac:	ldr	r0, [pc, #48]	; 26de4 <flatcc_builder_append_offset_vector@@Base+0xdc>
   26db0:	bl	14618 <__assert_fail@plt>
   26db4:	mvn	r2, #3
   26db8:	add	r1, r1, #1
   26dbc:	mov	r0, r5
   26dc0:	bl	25644 <main@@Base+0x7f4>
   26dc4:	cmp	r0, #0
   26dc8:	beq	26d68 <flatcc_builder_append_offset_vector@@Base+0x60>
   26dcc:	mov	r5, #0
   26dd0:	b	26d84 <flatcc_builder_append_offset_vector@@Base+0x7c>
   26dd4:	andeq	r0, r4, r8, asr r5
   26dd8:	andeq	r0, r4, r4, lsl #18
   26ddc:	andeq	r0, r4, r8, lsr #21
   26de0:	andeq	r0, r4, r4, ror #9
   26de4:	andeq	r0, r4, r0, lsr #20

00026de8 <flatcc_builder_extend_string@@Base>:
   26de8:	push	{r4, r5, r6, lr}
   26dec:	ldr	r2, [r0, #32]
   26df0:	ldrh	r3, [r2, #14]
   26df4:	cmp	r3, #6
   26df8:	bne	26e34 <flatcc_builder_extend_string@@Base+0x4c>
   26dfc:	mov	r4, r0
   26e00:	ldr	r3, [r2, #20]
   26e04:	adds	r3, r1, r3
   26e08:	bcs	26e48 <flatcc_builder_extend_string@@Base+0x60>
   26e0c:	str	r3, [r2, #20]
   26e10:	ldr	r5, [r0, #20]
   26e14:	add	r1, r1, r5
   26e18:	str	r1, [r0, #20]
   26e1c:	ldr	r3, [r0, #24]
   26e20:	cmp	r1, r3
   26e24:	bcs	26e5c <flatcc_builder_extend_string@@Base+0x74>
   26e28:	ldr	r0, [r4, #16]
   26e2c:	add	r0, r0, r5
   26e30:	pop	{r4, r5, r6, pc}
   26e34:	ldr	r3, [pc, #60]	; 26e78 <flatcc_builder_extend_string@@Base+0x90>
   26e38:	ldr	r2, [pc, #60]	; 26e7c <flatcc_builder_extend_string@@Base+0x94>
   26e3c:	ldr	r1, [pc, #60]	; 26e80 <flatcc_builder_extend_string@@Base+0x98>
   26e40:	ldr	r0, [pc, #60]	; 26e84 <flatcc_builder_extend_string@@Base+0x9c>
   26e44:	bl	14618 <__assert_fail@plt>
   26e48:	ldr	r3, [pc, #56]	; 26e88 <flatcc_builder_extend_string@@Base+0xa0>
   26e4c:	mov	r2, #892	; 0x37c
   26e50:	ldr	r1, [pc, #40]	; 26e80 <flatcc_builder_extend_string@@Base+0x98>
   26e54:	ldr	r0, [pc, #48]	; 26e8c <flatcc_builder_extend_string@@Base+0xa4>
   26e58:	bl	14618 <__assert_fail@plt>
   26e5c:	mvn	r2, #3
   26e60:	add	r1, r1, #1
   26e64:	bl	25644 <main@@Base+0x7f4>
   26e68:	cmp	r0, #0
   26e6c:	beq	26e28 <flatcc_builder_extend_string@@Base+0x40>
   26e70:	mov	r0, #0
   26e74:	pop	{r4, r5, r6, pc}
   26e78:	andeq	r0, r4, ip, ror r5
   26e7c:			; <UNDEFINED> instruction: 0x000003bd
   26e80:	andeq	r0, r4, r4, lsl #18
   26e84:	ldrdeq	r0, [r4], -ip
   26e88:	andeq	r0, r4, r4, ror #9
   26e8c:	andeq	r0, r4, r0, lsr #20

00026e90 <flatcc_builder_append_string@@Base>:
   26e90:	push	{r4, r5, r6, r7, r8, lr}
   26e94:	mov	r5, r2
   26e98:	ldr	r2, [r0, #32]
   26e9c:	ldrh	r3, [r2, #14]
   26ea0:	cmp	r3, #6
   26ea4:	bne	26efc <flatcc_builder_append_string@@Base+0x6c>
   26ea8:	mov	r4, r0
   26eac:	mov	r6, r1
   26eb0:	ldr	r3, [r2, #20]
   26eb4:	adds	r3, r5, r3
   26eb8:	bcs	26f10 <flatcc_builder_append_string@@Base+0x80>
   26ebc:	str	r3, [r2, #20]
   26ec0:	ldr	r7, [r0, #20]
   26ec4:	add	r1, r5, r7
   26ec8:	str	r1, [r0, #20]
   26ecc:	ldr	r3, [r0, #24]
   26ed0:	cmp	r1, r3
   26ed4:	bcs	26f24 <flatcc_builder_append_string@@Base+0x94>
   26ed8:	ldr	r4, [r4, #16]
   26edc:	adds	r4, r4, r7
   26ee0:	beq	26ef4 <flatcc_builder_append_string@@Base+0x64>
   26ee4:	mov	r2, r5
   26ee8:	mov	r1, r6
   26eec:	mov	r0, r4
   26ef0:	bl	1454c <memcpy@plt>
   26ef4:	mov	r0, r4
   26ef8:	pop	{r4, r5, r6, r7, r8, pc}
   26efc:	ldr	r3, [pc, #60]	; 26f40 <flatcc_builder_append_string@@Base+0xb0>
   26f00:	ldr	r2, [pc, #60]	; 26f44 <flatcc_builder_append_string@@Base+0xb4>
   26f04:	ldr	r1, [pc, #60]	; 26f48 <flatcc_builder_append_string@@Base+0xb8>
   26f08:	ldr	r0, [pc, #60]	; 26f4c <flatcc_builder_append_string@@Base+0xbc>
   26f0c:	bl	14618 <__assert_fail@plt>
   26f10:	ldr	r3, [pc, #56]	; 26f50 <flatcc_builder_append_string@@Base+0xc0>
   26f14:	mov	r2, #892	; 0x37c
   26f18:	ldr	r1, [pc, #40]	; 26f48 <flatcc_builder_append_string@@Base+0xb8>
   26f1c:	ldr	r0, [pc, #48]	; 26f54 <flatcc_builder_append_string@@Base+0xc4>
   26f20:	bl	14618 <__assert_fail@plt>
   26f24:	mvn	r2, #3
   26f28:	add	r1, r1, #1
   26f2c:	bl	25644 <main@@Base+0x7f4>
   26f30:	cmp	r0, #0
   26f34:	beq	26ed8 <flatcc_builder_append_string@@Base+0x48>
   26f38:	mov	r4, #0
   26f3c:	b	26ef4 <flatcc_builder_append_string@@Base+0x64>
   26f40:	muleq	r4, ip, r5
   26f44:	andeq	r0, r0, r6, asr #7
   26f48:	andeq	r0, r4, r4, lsl #18
   26f4c:	ldrdeq	r0, [r4], -ip
   26f50:	andeq	r0, r4, r4, ror #9
   26f54:	andeq	r0, r4, r0, lsr #20

00026f58 <flatcc_builder_append_string_str@@Base>:
   26f58:	push	{r4, r5, r6, lr}
   26f5c:	mov	r5, r0
   26f60:	mov	r4, r1
   26f64:	mov	r0, r1
   26f68:	bl	145a0 <strlen@plt>
   26f6c:	mov	r2, r0
   26f70:	mov	r1, r4
   26f74:	mov	r0, r5
   26f78:	bl	26e90 <flatcc_builder_append_string@@Base>
   26f7c:	pop	{r4, r5, r6, pc}

00026f80 <flatcc_builder_append_string_strn@@Base>:
   26f80:	push	{r4, r5, r6, lr}
   26f84:	mov	r6, r0
   26f88:	mov	r4, r1
   26f8c:	mov	r5, r2
   26f90:	mov	r1, #0
   26f94:	mov	r0, r4
   26f98:	bl	145e8 <memchr@plt>
   26f9c:	cmp	r0, #0
   26fa0:	subne	r5, r0, r4
   26fa4:	mov	r2, r5
   26fa8:	mov	r1, r4
   26fac:	mov	r0, r6
   26fb0:	bl	26e90 <flatcc_builder_append_string@@Base>
   26fb4:	pop	{r4, r5, r6, pc}

00026fb8 <flatcc_builder_truncate_vector@@Base>:
   26fb8:	push	{r4, lr}
   26fbc:	ldr	ip, [r0, #32]
   26fc0:	ldrh	r3, [ip, #14]
   26fc4:	cmp	r3, #4
   26fc8:	bne	27010 <flatcc_builder_truncate_vector@@Base+0x58>
   26fcc:	ldr	r3, [ip, #20]
   26fd0:	cmp	r3, r1
   26fd4:	bcc	27024 <flatcc_builder_truncate_vector@@Base+0x6c>
   26fd8:	sub	r3, r3, r1
   26fdc:	str	r3, [ip, #20]
   26fe0:	ldr	r3, [r0, #32]
   26fe4:	ldr	r2, [r3, #16]
   26fe8:	mul	r2, r2, r1
   26fec:	ldr	r3, [r0, #20]
   26ff0:	sub	r3, r3, r2
   26ff4:	str	r3, [r0, #20]
   26ff8:	ldr	r0, [r0, #16]
   26ffc:	mov	r1, #0
   27000:	add	r0, r0, r3
   27004:	bl	145c4 <memset@plt>
   27008:	mov	r0, #0
   2700c:	pop	{r4, pc}
   27010:	ldr	r3, [pc, #32]	; 27038 <flatcc_builder_truncate_vector@@Base+0x80>
   27014:	ldr	r2, [pc, #32]	; 2703c <flatcc_builder_truncate_vector@@Base+0x84>
   27018:	ldr	r1, [pc, #32]	; 27040 <flatcc_builder_truncate_vector@@Base+0x88>
   2701c:	ldr	r0, [pc, #32]	; 27044 <flatcc_builder_truncate_vector@@Base+0x8c>
   27020:	bl	14618 <__assert_fail@plt>
   27024:	ldr	r3, [pc, #12]	; 27038 <flatcc_builder_truncate_vector@@Base+0x80>
   27028:	ldr	r2, [pc, #24]	; 27048 <flatcc_builder_truncate_vector@@Base+0x90>
   2702c:	ldr	r1, [pc, #12]	; 27040 <flatcc_builder_truncate_vector@@Base+0x88>
   27030:	ldr	r0, [pc, #20]	; 2704c <flatcc_builder_truncate_vector@@Base+0x94>
   27034:	bl	14618 <__assert_fail@plt>
   27038:			; <UNDEFINED> instruction: 0x000405bc
   2703c:	ldrdeq	r0, [r0], -r9
   27040:	andeq	r0, r4, r4, lsl #18
   27044:	andeq	r0, r4, ip, lsr sl
   27048:	ldrdeq	r0, [r0], -sl
   2704c:	andeq	r0, r4, r8, lsl #22

00027050 <flatcc_builder_truncate_offset_vector@@Base>:
   27050:	push	{r4, lr}
   27054:	ldr	ip, [r0, #32]
   27058:	ldrh	r3, [ip, #14]
   2705c:	cmp	r3, #5
   27060:	bne	270a8 <flatcc_builder_truncate_offset_vector@@Base+0x58>
   27064:	ldr	r3, [ip, #20]
   27068:	cmp	r3, r1
   2706c:	bcc	270bc <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   27070:	sub	r3, r3, r1
   27074:	str	r3, [ip, #20]
   27078:	ldr	r3, [r0, #32]
   2707c:	ldr	r2, [r3, #16]
   27080:	mul	r2, r2, r1
   27084:	ldr	r3, [r0, #20]
   27088:	sub	r3, r3, r2
   2708c:	str	r3, [r0, #20]
   27090:	ldr	r0, [r0, #16]
   27094:	mov	r1, #0
   27098:	add	r0, r0, r3
   2709c:	bl	145c4 <memset@plt>
   270a0:	mov	r0, #0
   270a4:	pop	{r4, pc}
   270a8:	ldr	r3, [pc, #32]	; 270d0 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   270ac:	ldr	r2, [pc, #32]	; 270d4 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   270b0:	ldr	r1, [pc, #32]	; 270d8 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   270b4:	ldr	r0, [pc, #32]	; 270dc <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   270b8:	bl	14618 <__assert_fail@plt>
   270bc:	ldr	r3, [pc, #12]	; 270d0 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   270c0:	ldr	r2, [pc, #24]	; 270e0 <flatcc_builder_truncate_offset_vector@@Base+0x90>
   270c4:	ldr	r1, [pc, #12]	; 270d8 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   270c8:	ldr	r0, [pc, #20]	; 270e4 <flatcc_builder_truncate_offset_vector@@Base+0x94>
   270cc:	bl	14618 <__assert_fail@plt>
   270d0:	ldrdeq	r0, [r4], -ip
   270d4:	andeq	r0, r0, r2, ror #7
   270d8:	andeq	r0, r4, r4, lsl #18
   270dc:	andeq	r0, r4, r8, lsr #21
   270e0:	andeq	r0, r0, r3, ror #7
   270e4:	andeq	r0, r4, ip, lsr #22

000270e8 <flatcc_builder_truncate_string@@Base>:
   270e8:	push	{r4, lr}
   270ec:	ldr	r2, [r0, #32]
   270f0:	ldrh	r3, [r2, #14]
   270f4:	cmp	r3, #6
   270f8:	bne	27138 <flatcc_builder_truncate_string@@Base+0x50>
   270fc:	ldr	r3, [r2, #20]
   27100:	cmp	r3, r1
   27104:	bcc	2714c <flatcc_builder_truncate_string@@Base+0x64>
   27108:	sub	r3, r3, r1
   2710c:	str	r3, [r2, #20]
   27110:	ldr	r3, [r0, #20]
   27114:	sub	r3, r3, r1
   27118:	str	r3, [r0, #20]
   2711c:	ldr	r0, [r0, #16]
   27120:	mov	r2, r1
   27124:	mov	r1, #0
   27128:	add	r0, r0, r3
   2712c:	bl	145c4 <memset@plt>
   27130:	mov	r0, #0
   27134:	pop	{r4, pc}
   27138:	ldr	r3, [pc, #32]	; 27160 <flatcc_builder_truncate_string@@Base+0x78>
   2713c:	ldr	r2, [pc, #32]	; 27164 <flatcc_builder_truncate_string@@Base+0x7c>
   27140:	ldr	r1, [pc, #32]	; 27168 <flatcc_builder_truncate_string@@Base+0x80>
   27144:	ldr	r0, [pc, #32]	; 2716c <flatcc_builder_truncate_string@@Base+0x84>
   27148:	bl	14618 <__assert_fail@plt>
   2714c:	ldr	r3, [pc, #12]	; 27160 <flatcc_builder_truncate_string@@Base+0x78>
   27150:	mov	r2, #1004	; 0x3ec
   27154:	ldr	r1, [pc, #12]	; 27168 <flatcc_builder_truncate_string@@Base+0x80>
   27158:	ldr	r0, [pc, #16]	; 27170 <flatcc_builder_truncate_string@@Base+0x88>
   2715c:	bl	14618 <__assert_fail@plt>
   27160:	andeq	r0, r4, r4, lsl #12
   27164:	andeq	r0, r0, fp, ror #7
   27168:	andeq	r0, r4, r4, lsl #18
   2716c:	ldrdeq	r0, [r4], -ip
   27170:	andeq	r0, r4, r8, ror #22

00027174 <flatcc_builder_start_vector@@Base>:
   27174:	push	{r4, r5, r6, lr}
   27178:	mov	r4, r0
   2717c:	mov	r6, r1
   27180:	mov	r5, r3
   27184:	cmp	r2, #4
   27188:	movcs	r1, r2
   2718c:	movcc	r1, #4
   27190:	bl	258e4 <flatcc_builder_default_alloc@@Base+0x22c>
   27194:	cmp	r0, #0
   27198:	bne	271f8 <flatcc_builder_start_vector@@Base+0x84>
   2719c:	ldr	r3, [r4, #32]
   271a0:	str	r6, [r3, #16]
   271a4:	ldr	r3, [r4, #32]
   271a8:	mov	r2, #0
   271ac:	str	r2, [r3, #20]
   271b0:	ldr	r3, [r4, #32]
   271b4:	str	r5, [r3, #24]
   271b8:	ldr	r3, [r4, #32]
   271bc:	mov	r2, #4
   271c0:	strh	r2, [r3, #14]
   271c4:	ldr	r1, [r4, #28]
   271c8:	ldr	r2, [r4, #60]	; 0x3c
   271cc:	add	r2, r2, r1
   271d0:	str	r2, [r4, #16]
   271d4:	ldr	r3, [r4, #64]	; 0x40
   271d8:	sub	r3, r3, r1
   271dc:	cmn	r3, #4
   271e0:	mvnhi	r3, #3
   271e4:	str	r3, [r4, #24]
   271e8:	ldr	r3, [r4, #32]
   271ec:	mvn	r2, #3
   271f0:	str	r2, [r3, #4]
   271f4:	pop	{r4, r5, r6, pc}
   271f8:	mvn	r0, #0
   271fc:	pop	{r4, r5, r6, pc}

00027200 <flatcc_builder_start_offset_vector@@Base>:
   27200:	push	{r4, lr}
   27204:	mov	r4, r0
   27208:	mov	r1, #4
   2720c:	bl	258e4 <flatcc_builder_default_alloc@@Base+0x22c>
   27210:	cmp	r0, #0
   27214:	bne	27270 <flatcc_builder_start_offset_vector@@Base+0x70>
   27218:	ldr	r3, [r4, #32]
   2721c:	mov	r2, #4
   27220:	str	r2, [r3, #16]
   27224:	ldr	r3, [r4, #32]
   27228:	mov	r2, #0
   2722c:	str	r2, [r3, #20]
   27230:	ldr	r3, [r4, #32]
   27234:	mov	r2, #5
   27238:	strh	r2, [r3, #14]
   2723c:	ldr	r1, [r4, #28]
   27240:	ldr	r2, [r4, #60]	; 0x3c
   27244:	add	r2, r2, r1
   27248:	str	r2, [r4, #16]
   2724c:	ldr	r3, [r4, #64]	; 0x40
   27250:	sub	r3, r3, r1
   27254:	cmn	r3, #4
   27258:	mvnhi	r3, #3
   2725c:	str	r3, [r4, #24]
   27260:	ldr	r3, [r4, #32]
   27264:	mvn	r2, #3
   27268:	str	r2, [r3, #4]
   2726c:	pop	{r4, pc}
   27270:	mvn	r0, #0
   27274:	pop	{r4, pc}

00027278 <flatcc_builder_start_string@@Base>:
   27278:	push	{r4, lr}
   2727c:	mov	r4, r0
   27280:	mov	r1, #1
   27284:	bl	258e4 <flatcc_builder_default_alloc@@Base+0x22c>
   27288:	cmp	r0, #0
   2728c:	bne	272e8 <flatcc_builder_start_string@@Base+0x70>
   27290:	ldr	r3, [r4, #32]
   27294:	mov	r2, #1
   27298:	str	r2, [r3, #16]
   2729c:	ldr	r3, [r4, #32]
   272a0:	mov	r2, #0
   272a4:	str	r2, [r3, #20]
   272a8:	ldr	r3, [r4, #32]
   272ac:	mov	r2, #6
   272b0:	strh	r2, [r3, #14]
   272b4:	ldr	r1, [r4, #28]
   272b8:	ldr	r2, [r4, #60]	; 0x3c
   272bc:	add	r2, r2, r1
   272c0:	str	r2, [r4, #16]
   272c4:	ldr	r3, [r4, #64]	; 0x40
   272c8:	sub	r3, r3, r1
   272cc:	cmn	r3, #4
   272d0:	mvnhi	r3, #3
   272d4:	str	r3, [r4, #24]
   272d8:	ldr	r3, [r4, #32]
   272dc:	mvn	r2, #3
   272e0:	str	r2, [r3, #4]
   272e4:	pop	{r4, pc}
   272e8:	mvn	r0, #0
   272ec:	pop	{r4, pc}

000272f0 <flatcc_builder_reserve_table@@Base>:
   272f0:	push	{r4, r5, r6, r7, lr}
   272f4:	sub	sp, sp, #12
   272f8:	cmp	r1, #0
   272fc:	blt	27388 <flatcc_builder_reserve_table@@Base+0x98>
   27300:	mov	r5, r0
   27304:	ldr	r2, [r0, #32]
   27308:	ldrh	r6, [r2, #28]
   2730c:	ldr	r3, [r2, #16]
   27310:	add	r6, r3, r6, lsl #1
   27314:	add	r1, r1, #2
   27318:	lsl	r4, r1, #1
   2731c:	add	r2, r6, r4
   27320:	ldr	r3, [r0, #56]	; 0x38
   27324:	cmp	r2, r3
   27328:	bhi	2739c <flatcc_builder_reserve_table@@Base+0xac>
   2732c:	ldr	r3, [r5, #52]	; 0x34
   27330:	adds	r3, r3, r6
   27334:	moveq	r3, #0
   27338:	streq	r3, [r5, #4]
   2733c:	mvneq	r0, #0
   27340:	beq	27380 <flatcc_builder_reserve_table@@Base+0x90>
   27344:	add	r3, r3, #4
   27348:	str	r3, [r5, #4]
   2734c:	ldr	r3, [r5, #32]
   27350:	ldr	r6, [r3, #20]
   27354:	add	r2, r4, r6
   27358:	sub	r2, r2, #3
   2735c:	ldr	r3, [r5, #80]	; 0x50
   27360:	cmp	r2, r3
   27364:	bhi	273d4 <flatcc_builder_reserve_table@@Base+0xe4>
   27368:	ldr	r0, [r5, #76]	; 0x4c
   2736c:	add	r0, r0, r6
   27370:	str	r0, [r5]
   27374:	cmp	r0, #0
   27378:	movne	r0, #0
   2737c:	mvneq	r0, #0
   27380:	add	sp, sp, #12
   27384:	pop	{r4, r5, r6, r7, pc}
   27388:	ldr	r3, [pc, #124]	; 2740c <flatcc_builder_reserve_table@@Base+0x11c>
   2738c:	ldr	r2, [pc, #124]	; 27410 <flatcc_builder_reserve_table@@Base+0x120>
   27390:	ldr	r1, [pc, #124]	; 27414 <flatcc_builder_reserve_table@@Base+0x124>
   27394:	ldr	r0, [pc, #124]	; 27418 <flatcc_builder_reserve_table@@Base+0x128>
   27398:	bl	14618 <__assert_fail@plt>
   2739c:	mov	r3, #0
   273a0:	str	r3, [sp]
   273a4:	ldr	r7, [r0, #48]	; 0x30
   273a8:	mov	r3, #1
   273ac:	add	r1, r0, #52	; 0x34
   273b0:	ldr	r0, [r0, #40]	; 0x28
   273b4:	blx	r7
   273b8:	cmp	r0, #0
   273bc:	beq	2732c <flatcc_builder_reserve_table@@Base+0x3c>
   273c0:	ldr	r3, [pc, #84]	; 2741c <flatcc_builder_reserve_table@@Base+0x12c>
   273c4:	mov	r2, #308	; 0x134
   273c8:	ldr	r1, [pc, #68]	; 27414 <flatcc_builder_reserve_table@@Base+0x124>
   273cc:	ldr	r0, [pc, #76]	; 27420 <flatcc_builder_reserve_table@@Base+0x130>
   273d0:	bl	14618 <__assert_fail@plt>
   273d4:	mov	r3, #3
   273d8:	str	r3, [sp]
   273dc:	ldr	r4, [r5, #48]	; 0x30
   273e0:	mov	r3, #0
   273e4:	add	r1, r5, #76	; 0x4c
   273e8:	ldr	r0, [r5, #40]	; 0x28
   273ec:	blx	r4
   273f0:	cmp	r0, #0
   273f4:	beq	27368 <flatcc_builder_reserve_table@@Base+0x78>
   273f8:	ldr	r3, [pc, #28]	; 2741c <flatcc_builder_reserve_table@@Base+0x12c>
   273fc:	mov	r2, #308	; 0x134
   27400:	ldr	r1, [pc, #12]	; 27414 <flatcc_builder_reserve_table@@Base+0x124>
   27404:	ldr	r0, [pc, #20]	; 27420 <flatcc_builder_reserve_table@@Base+0x130>
   27408:	bl	14618 <__assert_fail@plt>
   2740c:	andeq	r0, r4, r4, lsr #12
   27410:	andeq	r0, r0, r9, lsr #8
   27414:	andeq	r0, r4, r4, lsl #18
   27418:	andeq	r0, r4, ip, lsl #23
   2741c:	ldrdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   27420:	andeq	r0, r4, r8, asr r9

00027424 <flatcc_builder_start_table@@Base>:
   27424:	push	{r4, r5, r6, r7, lr}
   27428:	sub	sp, sp, #12
   2742c:	mov	r4, r0
   27430:	mov	r5, r1
   27434:	mov	r1, #4
   27438:	bl	258e4 <flatcc_builder_default_alloc@@Base+0x22c>
   2743c:	cmp	r0, #0
   27440:	bne	275d0 <flatcc_builder_start_table@@Base+0x1ac>
   27444:	ldr	r2, [r4, #32]
   27448:	ldr	r3, [r4, #4]
   2744c:	ldr	r1, [r4, #52]	; 0x34
   27450:	sub	r3, r3, r1
   27454:	str	r3, [r2, #16]
   27458:	ldr	r2, [r4, #32]
   2745c:	ldr	r3, [r4]
   27460:	ldr	r1, [r4, #76]	; 0x4c
   27464:	sub	r3, r3, r1
   27468:	str	r3, [r2, #20]
   2746c:	ldr	r3, [r4, #32]
   27470:	ldr	r2, [r4, #12]
   27474:	str	r2, [r3, #24]
   27478:	ldr	r3, [r4, #32]
   2747c:	ldrh	r2, [r4, #8]
   27480:	strh	r2, [r3, #28]
   27484:	ldr	r3, [pc, #340]	; 275e0 <flatcc_builder_start_table@@Base+0x1bc>
   27488:	str	r3, [r4, #12]
   2748c:	mov	r3, #0
   27490:	strh	r3, [r4, #8]
   27494:	ldr	r3, [r4, #32]
   27498:	mov	r2, #3
   2749c:	strh	r2, [r3, #14]
   274a0:	ldr	r2, [r4, #32]
   274a4:	ldrh	r6, [r2, #28]
   274a8:	ldr	r3, [r2, #16]
   274ac:	add	r6, r3, r6, lsl #1
   274b0:	add	r5, r5, #2
   274b4:	lsl	r5, r5, #1
   274b8:	add	r2, r6, r5
   274bc:	ldr	r3, [r4, #56]	; 0x38
   274c0:	cmp	r2, r3
   274c4:	bhi	27560 <flatcc_builder_start_table@@Base+0x13c>
   274c8:	ldr	r3, [r4, #52]	; 0x34
   274cc:	adds	r3, r3, r6
   274d0:	moveq	r3, #0
   274d4:	streq	r3, [r4, #4]
   274d8:	mvneq	r0, #0
   274dc:	beq	27558 <flatcc_builder_start_table@@Base+0x134>
   274e0:	add	r3, r3, #4
   274e4:	str	r3, [r4, #4]
   274e8:	ldr	r3, [r4, #32]
   274ec:	ldr	r6, [r3, #20]
   274f0:	sub	r2, r5, #3
   274f4:	add	r2, r2, r6
   274f8:	ldr	r3, [r4, #80]	; 0x50
   274fc:	cmp	r2, r3
   27500:	bhi	27598 <flatcc_builder_start_table@@Base+0x174>
   27504:	ldr	r0, [r4, #76]	; 0x4c
   27508:	add	r0, r0, r6
   2750c:	str	r0, [r4]
   27510:	cmp	r0, #0
   27514:	movne	r0, #0
   27518:	mvneq	r0, #0
   2751c:	cmp	r0, #0
   27520:	bne	275d8 <flatcc_builder_start_table@@Base+0x1b4>
   27524:	ldr	r1, [r4, #28]
   27528:	ldr	r2, [r4, #60]	; 0x3c
   2752c:	add	r2, r2, r1
   27530:	str	r2, [r4, #16]
   27534:	ldr	r3, [r4, #64]	; 0x40
   27538:	sub	r3, r3, r1
   2753c:	ldr	r2, [pc, #160]	; 275e4 <flatcc_builder_start_table@@Base+0x1c0>
   27540:	cmp	r3, r2
   27544:	ldrhi	r3, [pc, #152]	; 275e4 <flatcc_builder_start_table@@Base+0x1c0>
   27548:	str	r3, [r4, #24]
   2754c:	ldr	r3, [r4, #32]
   27550:	ldr	r2, [pc, #140]	; 275e4 <flatcc_builder_start_table@@Base+0x1c0>
   27554:	str	r2, [r3, #4]
   27558:	add	sp, sp, #12
   2755c:	pop	{r4, r5, r6, r7, pc}
   27560:	mov	r3, #0
   27564:	str	r3, [sp]
   27568:	ldr	r7, [r4, #48]	; 0x30
   2756c:	mov	r3, #1
   27570:	add	r1, r4, #52	; 0x34
   27574:	ldr	r0, [r4, #40]	; 0x28
   27578:	blx	r7
   2757c:	cmp	r0, #0
   27580:	beq	274c8 <flatcc_builder_start_table@@Base+0xa4>
   27584:	ldr	r3, [pc, #92]	; 275e8 <flatcc_builder_start_table@@Base+0x1c4>
   27588:	mov	r2, #308	; 0x134
   2758c:	ldr	r1, [pc, #88]	; 275ec <flatcc_builder_start_table@@Base+0x1c8>
   27590:	ldr	r0, [pc, #88]	; 275f0 <flatcc_builder_start_table@@Base+0x1cc>
   27594:	bl	14618 <__assert_fail@plt>
   27598:	mov	r3, #3
   2759c:	str	r3, [sp]
   275a0:	ldr	r5, [r4, #48]	; 0x30
   275a4:	mov	r3, #0
   275a8:	add	r1, r4, #76	; 0x4c
   275ac:	ldr	r0, [r4, #40]	; 0x28
   275b0:	blx	r5
   275b4:	cmp	r0, #0
   275b8:	beq	27504 <flatcc_builder_start_table@@Base+0xe0>
   275bc:	ldr	r3, [pc, #36]	; 275e8 <flatcc_builder_start_table@@Base+0x1c4>
   275c0:	mov	r2, #308	; 0x134
   275c4:	ldr	r1, [pc, #32]	; 275ec <flatcc_builder_start_table@@Base+0x1c8>
   275c8:	ldr	r0, [pc, #32]	; 275f0 <flatcc_builder_start_table@@Base+0x1cc>
   275cc:	bl	14618 <__assert_fail@plt>
   275d0:	mvn	r0, #0
   275d4:	b	27558 <flatcc_builder_start_table@@Base+0x134>
   275d8:	mvn	r0, #0
   275dc:	b	27558 <flatcc_builder_start_table@@Base+0x134>
   275e0:	svccs	0x00693b52
   275e4:	strdeq	pc, [r0], -ip
   275e8:	ldrdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   275ec:	andeq	r0, r4, r4, lsl #18
   275f0:	andeq	r0, r4, r8, asr r9

000275f4 <flatcc_builder_create_vtable@@Base>:
   275f4:	push	{r4, r5, r6, lr}
   275f8:	sub	sp, sp, #80	; 0x50
   275fc:	mov	r5, r0
   27600:	mov	r3, #0
   27604:	str	r3, [sp, #8]
   27608:	str	r3, [sp, #12]
   2760c:	cmp	r2, #0
   27610:	beq	27694 <flatcc_builder_create_vtable@@Base+0xa0>
   27614:	str	r2, [sp, #8]
   27618:	str	r1, [sp, #16]
   2761c:	str	r2, [sp, #20]
   27620:	mov	r3, #1
   27624:	str	r3, [sp, #12]
   27628:	ldr	r3, [r0, #152]	; 0x98
   2762c:	cmp	r3, #0
   27630:	bne	276ac <flatcc_builder_create_vtable@@Base+0xb8>
   27634:	ldr	r3, [r0, #180]	; 0xb4
   27638:	cmp	r3, #0
   2763c:	bne	276ac <flatcc_builder_create_vtable@@Base+0xb8>
   27640:	ldr	r4, [r0, #140]	; 0x8c
   27644:	mov	r3, r2
   27648:	add	r2, r2, r4
   2764c:	str	r2, [r0, #140]	; 0x8c
   27650:	cmp	r4, r2
   27654:	ble	2770c <flatcc_builder_create_vtable@@Base+0x118>
   27658:	ldr	r3, [pc, #232]	; 27748 <flatcc_builder_create_vtable@@Base+0x154>
   2765c:	ldr	r2, [pc, #232]	; 2774c <flatcc_builder_create_vtable@@Base+0x158>
   27660:	ldr	r1, [pc, #232]	; 27750 <flatcc_builder_create_vtable@@Base+0x15c>
   27664:	ldr	r0, [pc, #232]	; 27754 <flatcc_builder_create_vtable@@Base+0x160>
   27668:	bl	14618 <__assert_fail@plt>
   2766c:	ldr	r3, [pc, #228]	; 27758 <flatcc_builder_create_vtable@@Base+0x164>
   27670:	ldr	r2, [pc, #228]	; 2775c <flatcc_builder_create_vtable@@Base+0x168>
   27674:	ldr	r1, [pc, #212]	; 27750 <flatcc_builder_create_vtable@@Base+0x15c>
   27678:	ldr	r0, [pc, #212]	; 27754 <flatcc_builder_create_vtable@@Base+0x160>
   2767c:	bl	14618 <__assert_fail@plt>
   27680:	ldr	r3, [pc, #208]	; 27758 <flatcc_builder_create_vtable@@Base+0x164>
   27684:	ldr	r2, [pc, #212]	; 27760 <flatcc_builder_create_vtable@@Base+0x16c>
   27688:	ldr	r1, [pc, #192]	; 27750 <flatcc_builder_create_vtable@@Base+0x15c>
   2768c:	ldr	r0, [pc, #192]	; 27754 <flatcc_builder_create_vtable@@Base+0x160>
   27690:	bl	14618 <__assert_fail@plt>
   27694:	ldr	r3, [r0, #152]	; 0x98
   27698:	cmp	r3, #0
   2769c:	bne	2766c <flatcc_builder_create_vtable@@Base+0x78>
   276a0:	ldr	r3, [r0, #180]	; 0xb4
   276a4:	cmp	r3, #0
   276a8:	beq	276fc <flatcc_builder_create_vtable@@Base+0x108>
   276ac:	ldr	r2, [r5, #136]	; 0x88
   276b0:	ldr	r3, [sp, #8]
   276b4:	sub	r4, r2, r3
   276b8:	cmp	r2, r4
   276bc:	ble	2766c <flatcc_builder_create_vtable@@Base+0x78>
   276c0:	str	r3, [sp]
   276c4:	ldr	r6, [r5, #44]	; 0x2c
   276c8:	mov	r3, r4
   276cc:	ldr	r2, [sp, #12]
   276d0:	add	r1, sp, #16
   276d4:	ldr	r0, [r5, #36]	; 0x24
   276d8:	blx	r6
   276dc:	cmp	r0, #0
   276e0:	bne	27680 <flatcc_builder_create_vtable@@Base+0x8c>
   276e4:	str	r4, [r5, #136]	; 0x88
   276e8:	cmp	r4, #0
   276ec:	addne	r4, r4, #1
   276f0:	mov	r0, r4
   276f4:	add	sp, sp, #80	; 0x50
   276f8:	pop	{r4, r5, r6, pc}
   276fc:	ldr	r4, [r5, #140]	; 0x8c
   27700:	ldr	r3, [sp, #8]
   27704:	add	r2, r3, r4
   27708:	str	r2, [r5, #140]	; 0x8c
   2770c:	ldr	r0, [r5, #36]	; 0x24
   27710:	str	r3, [sp]
   27714:	ldr	r5, [r5, #44]	; 0x2c
   27718:	mov	r3, r4
   2771c:	ldr	r2, [sp, #12]
   27720:	add	r1, sp, #16
   27724:	blx	r5
   27728:	cmp	r0, #0
   2772c:	addeq	r4, r4, #1
   27730:	beq	276f0 <flatcc_builder_create_vtable@@Base+0xfc>
   27734:	ldr	r3, [pc, #12]	; 27748 <flatcc_builder_create_vtable@@Base+0x154>
   27738:	ldr	r2, [pc, #36]	; 27764 <flatcc_builder_create_vtable@@Base+0x170>
   2773c:	ldr	r1, [pc, #12]	; 27750 <flatcc_builder_create_vtable@@Base+0x15c>
   27740:	ldr	r0, [pc, #12]	; 27754 <flatcc_builder_create_vtable@@Base+0x160>
   27744:	bl	14618 <__assert_fail@plt>
   27748:			; <UNDEFINED> instruction: 0x000403b4
   2774c:	andeq	r0, r0, r1, lsr #5
   27750:	andeq	r0, r4, r4, lsl #18
   27754:	andeq	r0, r4, r8, asr r9
   27758:	andeq	r0, r4, r0, lsl #8
   2775c:	andeq	r0, r0, r7, lsl #5
   27760:	andeq	r0, r0, fp, lsl #5
   27764:	andeq	r0, r0, r5, lsr #5

00027768 <flatcc_builder_create_cached_vtable@@Base>:
   27768:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2776c:	sub	sp, sp, #28
   27770:	mov	r8, r0
   27774:	str	r1, [sp, #8]
   27778:	mov	r7, r2
   2777c:	mov	fp, r3
   27780:	ldr	r4, [r0, #116]	; 0x74
   27784:	cmp	r4, #0
   27788:	beq	277d0 <flatcc_builder_create_cached_vtable@@Base+0x68>
   2778c:	ldr	r3, [r8, #116]	; 0x74
   27790:	rsb	r3, r3, #32
   27794:	lsr	fp, fp, r3
   27798:	ldr	r3, [r8, #92]	; 0x5c
   2779c:	str	r3, [sp, #16]
   277a0:	adds	r2, r3, fp, lsl #2
   277a4:	str	r2, [sp, #20]
   277a8:	beq	27aa0 <flatcc_builder_create_cached_vtable@@Base+0x338>
   277ac:	ldr	r5, [r3, fp, lsl #2]
   277b0:	cmp	r5, #0
   277b4:	beq	27940 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   277b8:	ldr	sl, [r8, #100]	; 0x64
   277bc:	ldr	r6, [r8, #68]	; 0x44
   277c0:	mov	r9, r2
   277c4:	mov	r3, #0
   277c8:	str	r3, [sp, #12]
   277cc:	b	278c8 <flatcc_builder_create_cached_vtable@@Base+0x160>
   277d0:	add	r6, r0, #92	; 0x5c
   277d4:	ldr	r3, [r0, #124]	; 0x7c
   277d8:	cmp	r3, #0
   277dc:	bne	27834 <flatcc_builder_create_cached_vtable@@Base+0xcc>
   277e0:	ldr	r3, [r0, #104]	; 0x68
   277e4:	cmp	r3, #15
   277e8:	bls	27848 <flatcc_builder_create_cached_vtable@@Base+0xe0>
   277ec:	ldr	r3, [r8, #100]	; 0x64
   277f0:	cmp	r3, #0
   277f4:	beq	27ac0 <flatcc_builder_create_cached_vtable@@Base+0x358>
   277f8:	mov	r3, #16
   277fc:	str	r3, [r8, #124]	; 0x7c
   27800:	mov	r3, #5
   27804:	str	r3, [sp]
   27808:	ldr	r5, [r8, #48]	; 0x30
   2780c:	mov	r3, #1
   27810:	mov	r2, #256	; 0x100
   27814:	mov	r1, r6
   27818:	ldr	r0, [r8, #40]	; 0x28
   2781c:	blx	r5
   27820:	cmp	r0, #0
   27824:	bne	27ac0 <flatcc_builder_create_cached_vtable@@Base+0x358>
   27828:	ldr	r1, [r8, #96]	; 0x60
   2782c:	mov	r3, #256	; 0x100
   27830:	b	27888 <flatcc_builder_create_cached_vtable@@Base+0x120>
   27834:	ldr	r3, [pc, #652]	; 27ac8 <flatcc_builder_create_cached_vtable@@Base+0x360>
   27838:	ldr	r2, [pc, #652]	; 27acc <flatcc_builder_create_cached_vtable@@Base+0x364>
   2783c:	ldr	r1, [pc, #652]	; 27ad0 <flatcc_builder_create_cached_vtable@@Base+0x368>
   27840:	ldr	r0, [pc, #652]	; 27ad4 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   27844:	bl	14618 <__assert_fail@plt>
   27848:	mov	r3, #6
   2784c:	str	r3, [sp]
   27850:	ldr	r5, [r0, #48]	; 0x30
   27854:	mov	r3, #0
   27858:	mov	r2, #16
   2785c:	add	r1, r0, #100	; 0x64
   27860:	ldr	r0, [r0, #40]	; 0x28
   27864:	blx	r5
   27868:	cmp	r0, #0
   2786c:	beq	277ec <flatcc_builder_create_cached_vtable@@Base+0x84>
   27870:	ldr	r3, [pc, #608]	; 27ad8 <flatcc_builder_create_cached_vtable@@Base+0x370>
   27874:	mov	r2, #308	; 0x134
   27878:	ldr	r1, [pc, #592]	; 27ad0 <flatcc_builder_create_cached_vtable@@Base+0x368>
   2787c:	ldr	r0, [pc, #600]	; 27adc <flatcc_builder_create_cached_vtable@@Base+0x374>
   27880:	bl	14618 <__assert_fail@plt>
   27884:	mov	r3, r2
   27888:	lsl	r2, r3, #1
   2788c:	cmp	r2, r1
   27890:	bls	27884 <flatcc_builder_create_cached_vtable@@Base+0x11c>
   27894:	lsr	r3, r3, #2
   27898:	cmp	r3, #1
   2789c:	bls	278b0 <flatcc_builder_create_cached_vtable@@Base+0x148>
   278a0:	mov	r2, #1
   278a4:	add	r4, r4, #1
   278a8:	cmp	r3, r2, lsl r4
   278ac:	bhi	278a4 <flatcc_builder_create_cached_vtable@@Base+0x13c>
   278b0:	str	r4, [r8, #116]	; 0x74
   278b4:	b	2778c <flatcc_builder_create_cached_vtable@@Base+0x24>
   278b8:	add	r9, r4, #12
   278bc:	ldr	r5, [r4, #12]
   278c0:	cmp	r5, #0
   278c4:	beq	27948 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   278c8:	add	r4, sl, r5
   278cc:	ldr	r3, [r4, #8]
   278d0:	add	r1, r6, r3
   278d4:	ldrh	r3, [r6, r3]
   278d8:	cmp	r3, r7
   278dc:	bne	278b8 <flatcc_builder_create_cached_vtable@@Base+0x150>
   278e0:	mov	r2, r7
   278e4:	ldr	r0, [sp, #8]
   278e8:	bl	14558 <memcmp@plt>
   278ec:	cmp	r0, #0
   278f0:	bne	278b8 <flatcc_builder_create_cached_vtable@@Base+0x150>
   278f4:	ldr	r2, [r4, #4]
   278f8:	ldr	r3, [r8, #152]	; 0x98
   278fc:	cmp	r2, r3
   27900:	addne	r9, r4, #12
   27904:	ldrne	r5, [r4, #12]
   27908:	strne	r4, [sp, #12]
   2790c:	bne	278c0 <flatcc_builder_create_cached_vtable@@Base+0x158>
   27910:	ldr	r3, [sp, #20]
   27914:	cmp	r3, r9
   27918:	beq	27934 <flatcc_builder_create_cached_vtable@@Base+0x1cc>
   2791c:	ldr	r3, [r4, #12]
   27920:	str	r3, [r9]
   27924:	ldr	r2, [sp, #16]
   27928:	ldr	r3, [r2, fp, lsl #2]
   2792c:	str	r3, [r4, #12]
   27930:	str	r5, [r2, fp, lsl #2]
   27934:	ldr	r0, [r4]
   27938:	add	sp, sp, #28
   2793c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27940:	mov	r3, #0
   27944:	str	r3, [sp, #12]
   27948:	ldr	r4, [r8, #124]	; 0x7c
   2794c:	add	r2, r4, #16
   27950:	ldr	r3, [r8, #104]	; 0x68
   27954:	cmp	r2, r3
   27958:	bhi	279c4 <flatcc_builder_create_cached_vtable@@Base+0x25c>
   2795c:	ldr	r5, [r8, #100]	; 0x64
   27960:	adds	r6, r5, r4
   27964:	beq	27aa8 <flatcc_builder_create_cached_vtable@@Base+0x340>
   27968:	ldr	r3, [r8, #124]	; 0x7c
   2796c:	add	r2, r3, #16
   27970:	str	r2, [r8, #124]	; 0x7c
   27974:	ldr	r2, [r8, #152]	; 0x98
   27978:	str	r2, [r6, #4]
   2797c:	ldr	r1, [sp, #16]
   27980:	ldr	r2, [r1, fp, lsl #2]
   27984:	str	r2, [r6, #12]
   27988:	str	r3, [r1, fp, lsl #2]
   2798c:	mov	r2, r7
   27990:	ldr	r1, [sp, #8]
   27994:	mov	r0, r8
   27998:	bl	275f4 <flatcc_builder_create_vtable@@Base>
   2799c:	str	r0, [r5, r4]
   279a0:	cmp	r0, #0
   279a4:	beq	27ab0 <flatcc_builder_create_cached_vtable@@Base+0x348>
   279a8:	ldr	r3, [sp, #12]
   279ac:	cmp	r3, #0
   279b0:	beq	279fc <flatcc_builder_create_cached_vtable@@Base+0x294>
   279b4:	ldr	r3, [r3, #8]
   279b8:	str	r3, [r6, #8]
   279bc:	ldr	r0, [r5, r4]
   279c0:	b	27938 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   279c4:	mov	r3, #6
   279c8:	str	r3, [sp]
   279cc:	ldr	r5, [r8, #48]	; 0x30
   279d0:	mov	r3, #0
   279d4:	add	r1, r8, #100	; 0x64
   279d8:	ldr	r0, [r8, #40]	; 0x28
   279dc:	blx	r5
   279e0:	cmp	r0, #0
   279e4:	beq	2795c <flatcc_builder_create_cached_vtable@@Base+0x1f4>
   279e8:	ldr	r3, [pc, #232]	; 27ad8 <flatcc_builder_create_cached_vtable@@Base+0x370>
   279ec:	mov	r2, #308	; 0x134
   279f0:	ldr	r1, [pc, #216]	; 27ad0 <flatcc_builder_create_cached_vtable@@Base+0x368>
   279f4:	ldr	r0, [pc, #224]	; 27adc <flatcc_builder_create_cached_vtable@@Base+0x374>
   279f8:	bl	14618 <__assert_fail@plt>
   279fc:	ldr	r2, [r8, #172]	; 0xac
   27a00:	cmp	r2, #0
   27a04:	beq	27a18 <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   27a08:	ldr	r3, [r8, #120]	; 0x78
   27a0c:	add	r3, r7, r3
   27a10:	cmp	r2, r3
   27a14:	bcc	27a5c <flatcc_builder_create_cached_vtable@@Base+0x2f4>
   27a18:	ldr	r9, [r8, #120]	; 0x78
   27a1c:	add	r2, r9, r7
   27a20:	ldr	r3, [r8, #72]	; 0x48
   27a24:	cmp	r2, r3
   27a28:	bhi	27a68 <flatcc_builder_create_cached_vtable@@Base+0x300>
   27a2c:	ldr	r3, [r8, #68]	; 0x44
   27a30:	adds	r0, r3, r9
   27a34:	beq	27ab8 <flatcc_builder_create_cached_vtable@@Base+0x350>
   27a38:	ldr	r3, [r8, #120]	; 0x78
   27a3c:	str	r3, [r6, #8]
   27a40:	ldr	r3, [r8, #120]	; 0x78
   27a44:	add	r3, r3, r7
   27a48:	str	r3, [r8, #120]	; 0x78
   27a4c:	mov	r2, r7
   27a50:	ldr	r1, [sp, #8]
   27a54:	bl	1454c <memcpy@plt>
   27a58:	b	279bc <flatcc_builder_create_cached_vtable@@Base+0x254>
   27a5c:	mov	r0, r8
   27a60:	bl	25c28 <flatcc_builder_flush_vtable_cache@@Base>
   27a64:	b	279bc <flatcc_builder_create_cached_vtable@@Base+0x254>
   27a68:	mov	r3, #2
   27a6c:	str	r3, [sp]
   27a70:	ldr	sl, [r8, #48]	; 0x30
   27a74:	mov	r3, #0
   27a78:	add	r1, r8, #68	; 0x44
   27a7c:	ldr	r0, [r8, #40]	; 0x28
   27a80:	blx	sl
   27a84:	cmp	r0, #0
   27a88:	beq	27a2c <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   27a8c:	ldr	r3, [pc, #68]	; 27ad8 <flatcc_builder_create_cached_vtable@@Base+0x370>
   27a90:	mov	r2, #308	; 0x134
   27a94:	ldr	r1, [pc, #52]	; 27ad0 <flatcc_builder_create_cached_vtable@@Base+0x368>
   27a98:	ldr	r0, [pc, #60]	; 27adc <flatcc_builder_create_cached_vtable@@Base+0x374>
   27a9c:	bl	14618 <__assert_fail@plt>
   27aa0:	mov	r0, #0
   27aa4:	b	27938 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   27aa8:	mov	r0, #0
   27aac:	b	27938 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   27ab0:	mov	r0, #0
   27ab4:	b	27938 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   27ab8:	mvn	r0, #0
   27abc:	b	27938 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   27ac0:	mov	r0, #0
   27ac4:	b	27938 <flatcc_builder_create_cached_vtable@@Base+0x1d0>
   27ac8:	andeq	r0, r4, r4, asr #12
   27acc:	andeq	r0, r0, r6, asr r1
   27ad0:	andeq	r0, r4, r4, lsl #18
   27ad4:	muleq	r4, r8, fp
   27ad8:	ldrdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   27adc:	andeq	r0, r4, r8, asr r9

00027ae0 <flatcc_builder_create_table@@Base>:
   27ae0:	push	{r4, r5, r6, r7, lr}
   27ae4:	sub	sp, sp, #92	; 0x5c
   27ae8:	ldr	r4, [sp, #116]	; 0x74
   27aec:	ldr	ip, [sp, #120]	; 0x78
   27af0:	cmp	r4, #0
   27af4:	blt	27c34 <flatcc_builder_create_table@@Base+0x154>
   27af8:	mov	r5, r0
   27afc:	tst	ip, #1
   27b00:	beq	27c48 <flatcc_builder_create_table@@Base+0x168>
   27b04:	cmp	r3, #4
   27b08:	movcs	r0, r3
   27b0c:	movcc	r0, #4
   27b10:	ldrh	r3, [r5, #128]	; 0x80
   27b14:	cmp	r3, r0
   27b18:	strhcc	r0, [r5, #128]	; 0x80
   27b1c:	ldr	lr, [r5, #136]	; 0x88
   27b20:	sub	r7, lr, r2
   27b24:	sub	r0, r0, #1
   27b28:	and	r7, r7, r0
   27b2c:	mvn	r3, #3
   27b30:	sub	r3, r3, r2
   27b34:	add	r3, r3, lr
   27b38:	sub	r3, r3, r7
   27b3c:	sub	ip, ip, #1
   27b40:	sub	ip, r3, ip
   27b44:	str	ip, [sp, #84]	; 0x54
   27b48:	cmp	r4, #0
   27b4c:	ble	27b7c <flatcc_builder_create_table@@Base+0x9c>
   27b50:	ldr	ip, [sp, #112]	; 0x70
   27b54:	add	r4, ip, r4, lsl #1
   27b58:	mvn	r6, #3
   27b5c:	sub	r6, r6, r3
   27b60:	ldrh	r3, [ip], #2
   27b64:	sub	lr, r6, r3
   27b68:	ldr	r0, [r1, r3]
   27b6c:	add	r0, r0, lr
   27b70:	str	r0, [r1, r3]
   27b74:	cmp	ip, r4
   27b78:	bne	27b60 <flatcc_builder_create_table@@Base+0x80>
   27b7c:	mov	r3, #4
   27b80:	str	r3, [sp, #12]
   27b84:	add	r0, sp, #84	; 0x54
   27b88:	str	r0, [sp, #20]
   27b8c:	str	r3, [sp, #24]
   27b90:	mov	r3, #1
   27b94:	str	r3, [sp, #16]
   27b98:	cmp	r2, #0
   27b9c:	beq	27bb8 <flatcc_builder_create_table@@Base+0xd8>
   27ba0:	add	r3, r2, #4
   27ba4:	str	r3, [sp, #12]
   27ba8:	str	r1, [sp, #28]
   27bac:	str	r2, [sp, #32]
   27bb0:	mov	r3, #2
   27bb4:	str	r3, [sp, #16]
   27bb8:	cmp	r7, #0
   27bbc:	beq	27bec <flatcc_builder_create_table@@Base+0x10c>
   27bc0:	ldr	r3, [sp, #12]
   27bc4:	add	r3, r3, r7
   27bc8:	str	r3, [sp, #12]
   27bcc:	ldr	r3, [sp, #16]
   27bd0:	add	r3, r3, #1
   27bd4:	add	r2, sp, #88	; 0x58
   27bd8:	add	r2, r2, r3, lsl #3
   27bdc:	ldr	r1, [pc, #160]	; 27c84 <flatcc_builder_create_table@@Base+0x1a4>
   27be0:	str	r1, [r2, #-76]	; 0xffffffb4
   27be4:	str	r7, [r2, #-72]	; 0xffffffb8
   27be8:	str	r3, [sp, #16]
   27bec:	ldr	r2, [r5, #136]	; 0x88
   27bf0:	ldr	r3, [sp, #12]
   27bf4:	sub	r4, r2, r3
   27bf8:	cmp	r2, r4
   27bfc:	ble	27c5c <flatcc_builder_create_table@@Base+0x17c>
   27c00:	str	r3, [sp]
   27c04:	ldr	r6, [r5, #44]	; 0x2c
   27c08:	mov	r3, r4
   27c0c:	ldr	r2, [sp, #16]
   27c10:	add	r1, sp, #20
   27c14:	ldr	r0, [r5, #36]	; 0x24
   27c18:	blx	r6
   27c1c:	cmp	r0, #0
   27c20:	bne	27c70 <flatcc_builder_create_table@@Base+0x190>
   27c24:	str	r4, [r5, #136]	; 0x88
   27c28:	mov	r0, r4
   27c2c:	add	sp, sp, #92	; 0x5c
   27c30:	pop	{r4, r5, r6, r7, pc}
   27c34:	ldr	r3, [pc, #76]	; 27c88 <flatcc_builder_create_table@@Base+0x1a8>
   27c38:	ldr	r2, [pc, #76]	; 27c8c <flatcc_builder_create_table@@Base+0x1ac>
   27c3c:	ldr	r1, [pc, #76]	; 27c90 <flatcc_builder_create_table@@Base+0x1b0>
   27c40:	ldr	r0, [pc, #76]	; 27c94 <flatcc_builder_create_table@@Base+0x1b4>
   27c44:	bl	14618 <__assert_fail@plt>
   27c48:	ldr	r3, [pc, #56]	; 27c88 <flatcc_builder_create_table@@Base+0x1a8>
   27c4c:	ldr	r2, [pc, #68]	; 27c98 <flatcc_builder_create_table@@Base+0x1b8>
   27c50:	ldr	r1, [pc, #56]	; 27c90 <flatcc_builder_create_table@@Base+0x1b0>
   27c54:	ldr	r0, [pc, #64]	; 27c9c <flatcc_builder_create_table@@Base+0x1bc>
   27c58:	bl	14618 <__assert_fail@plt>
   27c5c:	ldr	r3, [pc, #60]	; 27ca0 <flatcc_builder_create_table@@Base+0x1c0>
   27c60:	ldr	r2, [pc, #60]	; 27ca4 <flatcc_builder_create_table@@Base+0x1c4>
   27c64:	ldr	r1, [pc, #36]	; 27c90 <flatcc_builder_create_table@@Base+0x1b0>
   27c68:	ldr	r0, [pc, #56]	; 27ca8 <flatcc_builder_create_table@@Base+0x1c8>
   27c6c:	bl	14618 <__assert_fail@plt>
   27c70:	ldr	r3, [pc, #40]	; 27ca0 <flatcc_builder_create_table@@Base+0x1c0>
   27c74:	ldr	r2, [pc, #48]	; 27cac <flatcc_builder_create_table@@Base+0x1cc>
   27c78:	ldr	r1, [pc, #16]	; 27c90 <flatcc_builder_create_table@@Base+0x1b0>
   27c7c:	ldr	r0, [pc, #36]	; 27ca8 <flatcc_builder_create_table@@Base+0x1c8>
   27c80:	bl	14618 <__assert_fail@plt>
   27c84:			; <UNDEFINED> instruction: 0x000401b4
   27c88:	andeq	r0, r4, r0, asr r6
   27c8c:	ldrdeq	r0, [r0], -r5
   27c90:	andeq	r0, r4, r4, lsl #18
   27c94:	andeq	r0, r4, r8, lsr #23
   27c98:	ldrdeq	r0, [r0], -fp
   27c9c:			; <UNDEFINED> instruction: 0x00040bbc
   27ca0:	andeq	r0, r4, r0, lsl #8
   27ca4:	andeq	r0, r0, r7, lsl #5
   27ca8:	andeq	r0, r4, r8, asr r9
   27cac:	andeq	r0, r0, fp, lsl #5

00027cb0 <flatcc_builder_check_required_field@@Base>:
   27cb0:	ldr	r3, [r0, #32]
   27cb4:	ldrh	r3, [r3, #14]
   27cb8:	cmp	r3, #3
   27cbc:	bne	27ce8 <flatcc_builder_check_required_field@@Base+0x38>
   27cc0:	ldrh	r3, [r0, #8]
   27cc4:	cmp	r3, r1
   27cc8:	movls	r0, #0
   27ccc:	bls	27ce4 <flatcc_builder_check_required_field@@Base+0x34>
   27cd0:	ldr	r3, [r0, #4]
   27cd4:	lsl	r1, r1, #1
   27cd8:	ldrh	r0, [r3, r1]
   27cdc:	adds	r0, r0, #0
   27ce0:	movne	r0, #1
   27ce4:	bx	lr
   27ce8:	push	{r4, lr}
   27cec:	ldr	r3, [pc, #12]	; 27d00 <flatcc_builder_check_required_field@@Base+0x50>
   27cf0:	ldr	r2, [pc, #12]	; 27d04 <flatcc_builder_check_required_field@@Base+0x54>
   27cf4:	ldr	r1, [pc, #12]	; 27d08 <flatcc_builder_check_required_field@@Base+0x58>
   27cf8:	ldr	r0, [pc, #12]	; 27d0c <flatcc_builder_check_required_field@@Base+0x5c>
   27cfc:	bl	14618 <__assert_fail@plt>
   27d00:	andeq	r0, r4, ip, ror #12
   27d04:	strdeq	r0, [r0], -r8
   27d08:	andeq	r0, r4, r4, lsl #18
   27d0c:	andeq	r0, r4, r8, asr #23

00027d10 <flatcc_builder_check_union_field@@Base>:
   27d10:	ldr	r3, [r0, #32]
   27d14:	ldrh	r3, [r3, #14]
   27d18:	cmp	r3, #3
   27d1c:	bne	27d78 <flatcc_builder_check_union_field@@Base+0x68>
   27d20:	cmp	r1, #0
   27d24:	moveq	r0, #0
   27d28:	beq	27da0 <flatcc_builder_check_union_field@@Base+0x90>
   27d2c:	ldrh	r3, [r0, #8]
   27d30:	cmp	r3, r1
   27d34:	movls	r0, #0
   27d38:	bls	27da0 <flatcc_builder_check_union_field@@Base+0x90>
   27d3c:	ldr	r3, [r0, #4]
   27d40:	sub	r1, r1, #-2147483647	; 0x80000001
   27d44:	lsl	r1, r1, #1
   27d48:	ldrh	r2, [r3, r1]
   27d4c:	cmp	r2, #0
   27d50:	beq	27d90 <flatcc_builder_check_union_field@@Base+0x80>
   27d54:	ldr	r0, [r0, #16]
   27d58:	ldrb	r2, [r0, r2]
   27d5c:	cmp	r2, #0
   27d60:	bne	27da4 <flatcc_builder_check_union_field@@Base+0x94>
   27d64:	add	r1, r3, r1
   27d68:	ldrh	r0, [r1, #2]
   27d6c:	clz	r0, r0
   27d70:	lsr	r0, r0, #5
   27d74:	b	27da0 <flatcc_builder_check_union_field@@Base+0x90>
   27d78:	push	{r4, lr}
   27d7c:	ldr	r3, [pc, #52]	; 27db8 <flatcc_builder_check_union_field@@Base+0xa8>
   27d80:	ldr	r2, [pc, #52]	; 27dbc <flatcc_builder_check_union_field@@Base+0xac>
   27d84:	ldr	r1, [pc, #52]	; 27dc0 <flatcc_builder_check_union_field@@Base+0xb0>
   27d88:	ldr	r0, [pc, #52]	; 27dc4 <flatcc_builder_check_union_field@@Base+0xb4>
   27d8c:	bl	14618 <__assert_fail@plt>
   27d90:	add	r1, r3, r1
   27d94:	ldrh	r0, [r1, #2]
   27d98:	clz	r0, r0
   27d9c:	lsr	r0, r0, #5
   27da0:	bx	lr
   27da4:	add	r1, r3, r1
   27da8:	ldrh	r0, [r1, #2]
   27dac:	adds	r0, r0, #0
   27db0:	movne	r0, #1
   27db4:	b	27da0 <flatcc_builder_check_union_field@@Base+0x90>
   27db8:	muleq	r4, r0, r6
   27dbc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   27dc0:	andeq	r0, r4, r4, lsl #18
   27dc4:	andeq	r0, r4, r8, asr #23

00027dc8 <flatcc_builder_check_required@@Base>:
   27dc8:	ldr	r3, [r0, #32]
   27dcc:	ldrh	r3, [r3, #14]
   27dd0:	cmp	r3, #3
   27dd4:	bne	27e34 <flatcc_builder_check_required@@Base+0x6c>
   27dd8:	ldrh	r3, [r0, #8]
   27ddc:	cmp	r3, r2
   27de0:	movlt	r0, #0
   27de4:	blt	27e50 <flatcc_builder_check_required@@Base+0x88>
   27de8:	cmp	r2, #0
   27dec:	ble	27e54 <flatcc_builder_check_required@@Base+0x8c>
   27df0:	ldr	ip, [r0, #4]
   27df4:	ldrh	r3, [r1]
   27df8:	lsl	r3, r3, #1
   27dfc:	ldrh	r3, [ip, r3]
   27e00:	cmp	r3, #0
   27e04:	beq	27e5c <flatcc_builder_check_required@@Base+0x94>
   27e08:	add	r0, r1, #2
   27e0c:	add	r2, r1, r2, lsl #1
   27e10:	cmp	r0, r2
   27e14:	beq	27e4c <flatcc_builder_check_required@@Base+0x84>
   27e18:	ldrh	r3, [r0], #2
   27e1c:	lsl	r3, r3, #1
   27e20:	ldrh	r3, [ip, r3]
   27e24:	cmp	r3, #0
   27e28:	bne	27e10 <flatcc_builder_check_required@@Base+0x48>
   27e2c:	mov	r0, #0
   27e30:	b	27e50 <flatcc_builder_check_required@@Base+0x88>
   27e34:	push	{r4, lr}
   27e38:	ldr	r3, [pc, #36]	; 27e64 <flatcc_builder_check_required@@Base+0x9c>
   27e3c:	ldr	r2, [pc, #36]	; 27e68 <flatcc_builder_check_required@@Base+0xa0>
   27e40:	ldr	r1, [pc, #36]	; 27e6c <flatcc_builder_check_required@@Base+0xa4>
   27e44:	ldr	r0, [pc, #36]	; 27e70 <flatcc_builder_check_required@@Base+0xa8>
   27e48:	bl	14618 <__assert_fail@plt>
   27e4c:	mov	r0, #1
   27e50:	bx	lr
   27e54:	mov	r0, #1
   27e58:	b	27e50 <flatcc_builder_check_required@@Base+0x88>
   27e5c:	mov	r0, #0
   27e60:	b	27e50 <flatcc_builder_check_required@@Base+0x88>
   27e64:			; <UNDEFINED> instruction: 0x000406b4
   27e68:	andeq	r0, r0, r1, lsl r5
   27e6c:	andeq	r0, r4, r4, lsl #18
   27e70:	andeq	r0, r4, r8, asr #23

00027e74 <flatcc_builder_end_table@@Base>:
   27e74:	push	{r4, r5, r6, r7, lr}
   27e78:	sub	sp, sp, #20
   27e7c:	ldr	r3, [r0, #32]
   27e80:	ldrh	r3, [r3, #14]
   27e84:	cmp	r3, #3
   27e88:	bne	27ef8 <flatcc_builder_end_table@@Base+0x84>
   27e8c:	mov	r4, r0
   27e90:	ldr	r1, [r0, #4]
   27e94:	sub	r6, r1, #4
   27e98:	ldrh	r5, [r0, #8]
   27e9c:	add	r5, r5, #2
   27ea0:	lsl	r5, r5, #1
   27ea4:	uxth	r5, r5
   27ea8:	strh	r5, [r1, #-4]
   27eac:	ldr	r3, [r0, #20]
   27eb0:	add	r3, r3, #4
   27eb4:	uxth	r2, r3
   27eb8:	strh	r2, [r1, #-2]
   27ebc:	ldr	r3, [r0, #12]
   27ec0:	eor	r3, r3, r5
   27ec4:	ldr	r1, [pc, #328]	; 28014 <flatcc_builder_end_table@@Base+0x1a0>
   27ec8:	mul	r3, r1, r3
   27ecc:	eor	r3, r3, r2
   27ed0:	mul	r3, r1, r3
   27ed4:	str	r3, [r0, #12]
   27ed8:	mov	r2, r5
   27edc:	mov	r1, r6
   27ee0:	bl	27768 <flatcc_builder_create_cached_vtable@@Base>
   27ee4:	subs	r7, r0, #0
   27ee8:	bne	27f0c <flatcc_builder_end_table@@Base+0x98>
   27eec:	mov	r0, r7
   27ef0:	add	sp, sp, #20
   27ef4:	pop	{r4, r5, r6, r7, pc}
   27ef8:	ldr	r3, [pc, #280]	; 28018 <flatcc_builder_end_table@@Base+0x1a4>
   27efc:	ldr	r2, [pc, #280]	; 2801c <flatcc_builder_end_table@@Base+0x1a8>
   27f00:	ldr	r1, [pc, #280]	; 28020 <flatcc_builder_end_table@@Base+0x1ac>
   27f04:	ldr	r0, [pc, #280]	; 28024 <flatcc_builder_end_table@@Base+0x1b0>
   27f08:	bl	14618 <__assert_fail@plt>
   27f0c:	mov	r2, r5
   27f10:	mov	r1, #0
   27f14:	mov	r0, r6
   27f18:	bl	145c4 <memset@plt>
   27f1c:	ldr	r3, [r4, #32]
   27f20:	ldr	r1, [r4, #76]	; 0x4c
   27f24:	ldr	r3, [r3, #20]
   27f28:	add	r1, r1, r3
   27f2c:	ldrh	r3, [r4, #130]	; 0x82
   27f30:	str	r7, [sp, #8]
   27f34:	ldr	r2, [r4]
   27f38:	sub	r2, r2, r1
   27f3c:	asr	r2, r2, #1
   27f40:	str	r2, [sp, #4]
   27f44:	str	r1, [sp]
   27f48:	ldr	r2, [r4, #20]
   27f4c:	ldr	r1, [r4, #16]
   27f50:	mov	r0, r4
   27f54:	bl	27ae0 <flatcc_builder_create_table@@Base>
   27f58:	subs	r7, r0, #0
   27f5c:	beq	27eec <flatcc_builder_end_table@@Base+0x78>
   27f60:	ldr	r3, [r4, #32]
   27f64:	ldr	r2, [r3, #24]
   27f68:	str	r2, [r4, #12]
   27f6c:	ldrh	r2, [r3, #28]
   27f70:	strh	r2, [r4, #8]
   27f74:	ldr	r2, [r4, #52]	; 0x34
   27f78:	ldr	r1, [r3, #16]
   27f7c:	add	r2, r2, r1
   27f80:	str	r2, [r4, #4]
   27f84:	ldr	r2, [r4, #76]	; 0x4c
   27f88:	ldr	r3, [r3, #20]
   27f8c:	add	r3, r2, r3
   27f90:	str	r3, [r4]
   27f94:	ldr	r2, [r4, #20]
   27f98:	mov	r1, #0
   27f9c:	ldr	r0, [r4, #16]
   27fa0:	bl	145c4 <memset@plt>
   27fa4:	ldr	r2, [r4, #32]
   27fa8:	ldr	r3, [r2, #8]
   27fac:	str	r3, [r4, #20]
   27fb0:	ldr	r0, [r2]
   27fb4:	str	r0, [r4, #28]
   27fb8:	ldr	r1, [r2, #4]
   27fbc:	ldr	r3, [r4, #60]	; 0x3c
   27fc0:	add	r3, r3, r0
   27fc4:	str	r3, [r4, #16]
   27fc8:	ldr	r3, [r4, #64]	; 0x40
   27fcc:	sub	r3, r3, r0
   27fd0:	cmp	r3, r1
   27fd4:	movcs	r3, r1
   27fd8:	str	r3, [r4, #24]
   27fdc:	str	r1, [r2, #4]
   27fe0:	ldrh	r3, [r4, #130]	; 0x82
   27fe4:	ldrh	r2, [r4, #128]	; 0x80
   27fe8:	cmp	r2, r3
   27fec:	strhcc	r3, [r4, #128]	; 0x80
   27ff0:	ldr	r3, [r4, #32]
   27ff4:	ldrh	r2, [r3, #12]
   27ff8:	strh	r2, [r4, #130]	; 0x82
   27ffc:	sub	r3, r3, #36	; 0x24
   28000:	str	r3, [r4, #32]
   28004:	ldr	r3, [r4, #156]	; 0x9c
   28008:	sub	r3, r3, #1
   2800c:	str	r3, [r4, #156]	; 0x9c
   28010:	b	27eec <flatcc_builder_end_table@@Base+0x78>
   28014:			; <UNDEFINED> instruction: 0x9e3779b1
   28018:	ldrdeq	r0, [r4], -r4
   2801c:	andeq	r0, r0, r5, lsr #10
   28020:	andeq	r0, r4, r4, lsl #18
   28024:	andeq	r0, r4, r8, asr #23

00028028 <flatcc_builder_create_vector@@Base>:
   28028:	push	{r4, r5, r6, lr}
   2802c:	sub	sp, sp, #88	; 0x58
   28030:	mov	r4, r0
   28034:	ldrh	r0, [sp, #104]	; 0x68
   28038:	ldr	ip, [sp, #108]	; 0x6c
   2803c:	cmp	r2, ip
   28040:	bhi	28124 <flatcc_builder_create_vector@@Base+0xfc>
   28044:	cmp	r0, #4
   28048:	movcc	r0, #4
   2804c:	ldrh	ip, [r4, #128]	; 0x80
   28050:	cmp	ip, r0
   28054:	strhcc	r0, [r4, #128]	; 0x80
   28058:	mul	r3, r3, r2
   2805c:	str	r2, [sp, #84]	; 0x54
   28060:	ldr	r2, [r4, #136]	; 0x88
   28064:	sub	ip, r2, r3
   28068:	sub	r0, r0, #1
   2806c:	and	r0, r0, ip
   28070:	mov	ip, #4
   28074:	str	ip, [sp, #12]
   28078:	add	lr, sp, #84	; 0x54
   2807c:	str	lr, [sp, #20]
   28080:	str	ip, [sp, #24]
   28084:	mov	ip, #1
   28088:	str	ip, [sp, #16]
   2808c:	cmp	r3, #0
   28090:	beq	280ac <flatcc_builder_create_vector@@Base+0x84>
   28094:	add	ip, r3, #4
   28098:	str	ip, [sp, #12]
   2809c:	str	r1, [sp, #28]
   280a0:	str	r3, [sp, #32]
   280a4:	mov	r3, #2
   280a8:	str	r3, [sp, #16]
   280ac:	cmp	r0, #0
   280b0:	beq	280e0 <flatcc_builder_create_vector@@Base+0xb8>
   280b4:	ldr	r3, [sp, #12]
   280b8:	add	r3, r3, r0
   280bc:	str	r3, [sp, #12]
   280c0:	ldr	r3, [sp, #16]
   280c4:	add	r3, r3, #1
   280c8:	add	r1, sp, #88	; 0x58
   280cc:	add	r1, r1, r3, lsl #3
   280d0:	ldr	ip, [pc, #136]	; 28160 <flatcc_builder_create_vector@@Base+0x138>
   280d4:	str	ip, [r1, #-76]	; 0xffffffb4
   280d8:	str	r0, [r1, #-72]	; 0xffffffb8
   280dc:	str	r3, [sp, #16]
   280e0:	ldr	r3, [sp, #12]
   280e4:	sub	r5, r2, r3
   280e8:	cmp	r2, r5
   280ec:	ble	28138 <flatcc_builder_create_vector@@Base+0x110>
   280f0:	str	r3, [sp]
   280f4:	ldr	r6, [r4, #44]	; 0x2c
   280f8:	mov	r3, r5
   280fc:	ldr	r2, [sp, #16]
   28100:	add	r1, sp, #20
   28104:	ldr	r0, [r4, #36]	; 0x24
   28108:	blx	r6
   2810c:	cmp	r0, #0
   28110:	bne	2814c <flatcc_builder_create_vector@@Base+0x124>
   28114:	str	r5, [r4, #136]	; 0x88
   28118:	mov	r0, r5
   2811c:	add	sp, sp, #88	; 0x58
   28120:	pop	{r4, r5, r6, pc}
   28124:	ldr	r3, [pc, #56]	; 28164 <flatcc_builder_create_vector@@Base+0x13c>
   28128:	ldr	r2, [pc, #56]	; 28168 <flatcc_builder_create_vector@@Base+0x140>
   2812c:	ldr	r1, [pc, #56]	; 2816c <flatcc_builder_create_vector@@Base+0x144>
   28130:	ldr	r0, [pc, #56]	; 28170 <flatcc_builder_create_vector@@Base+0x148>
   28134:	bl	14618 <__assert_fail@plt>
   28138:	ldr	r3, [pc, #52]	; 28174 <flatcc_builder_create_vector@@Base+0x14c>
   2813c:	ldr	r2, [pc, #52]	; 28178 <flatcc_builder_create_vector@@Base+0x150>
   28140:	ldr	r1, [pc, #36]	; 2816c <flatcc_builder_create_vector@@Base+0x144>
   28144:	ldr	r0, [pc, #48]	; 2817c <flatcc_builder_create_vector@@Base+0x154>
   28148:	bl	14618 <__assert_fail@plt>
   2814c:	ldr	r3, [pc, #32]	; 28174 <flatcc_builder_create_vector@@Base+0x14c>
   28150:	ldr	r2, [pc, #40]	; 28180 <flatcc_builder_create_vector@@Base+0x158>
   28154:	ldr	r1, [pc, #16]	; 2816c <flatcc_builder_create_vector@@Base+0x144>
   28158:	ldr	r0, [pc, #28]	; 2817c <flatcc_builder_create_vector@@Base+0x154>
   2815c:	bl	14618 <__assert_fail@plt>
   28160:			; <UNDEFINED> instruction: 0x000401b4
   28164:	strdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   28168:	andeq	r0, r0, r5, asr r5
   2816c:	andeq	r0, r4, r4, lsl #18
   28170:	strdeq	r0, [r4], -r4
   28174:	andeq	r0, r4, r0, lsl #8
   28178:	andeq	r0, r0, r7, lsl #5
   2817c:	andeq	r0, r4, r8, asr r9
   28180:	andeq	r0, r0, fp, lsl #5

00028184 <flatcc_builder_end_vector@@Base>:
   28184:	push	{r4, r5, lr}
   28188:	sub	sp, sp, #12
   2818c:	ldr	r1, [r0, #32]
   28190:	ldrh	r3, [r1, #14]
   28194:	cmp	r3, #4
   28198:	bne	281d4 <flatcc_builder_end_vector@@Base+0x50>
   2819c:	mov	r4, r0
   281a0:	ldr	r3, [r1, #16]
   281a4:	ldr	r2, [r1, #20]
   281a8:	ldr	r1, [r1, #24]
   281ac:	str	r1, [sp, #4]
   281b0:	ldrh	r1, [r0, #130]	; 0x82
   281b4:	str	r1, [sp]
   281b8:	ldr	r1, [r0, #16]
   281bc:	bl	28028 <flatcc_builder_create_vector@@Base>
   281c0:	subs	r5, r0, #0
   281c4:	bne	281e8 <flatcc_builder_end_vector@@Base+0x64>
   281c8:	mov	r0, r5
   281cc:	add	sp, sp, #12
   281d0:	pop	{r4, r5, pc}
   281d4:	ldr	r3, [pc, #140]	; 28268 <flatcc_builder_end_vector@@Base+0xe4>
   281d8:	ldr	r2, [pc, #140]	; 2826c <flatcc_builder_end_vector@@Base+0xe8>
   281dc:	ldr	r1, [pc, #140]	; 28270 <flatcc_builder_end_vector@@Base+0xec>
   281e0:	ldr	r0, [pc, #140]	; 28274 <flatcc_builder_end_vector@@Base+0xf0>
   281e4:	bl	14618 <__assert_fail@plt>
   281e8:	ldr	r2, [r4, #20]
   281ec:	mov	r1, #0
   281f0:	ldr	r0, [r4, #16]
   281f4:	bl	145c4 <memset@plt>
   281f8:	ldr	r2, [r4, #32]
   281fc:	ldr	r3, [r2, #8]
   28200:	str	r3, [r4, #20]
   28204:	ldr	r0, [r2]
   28208:	str	r0, [r4, #28]
   2820c:	ldr	r1, [r2, #4]
   28210:	ldr	r3, [r4, #60]	; 0x3c
   28214:	add	r3, r3, r0
   28218:	str	r3, [r4, #16]
   2821c:	ldr	r3, [r4, #64]	; 0x40
   28220:	sub	r3, r3, r0
   28224:	cmp	r3, r1
   28228:	movcs	r3, r1
   2822c:	str	r3, [r4, #24]
   28230:	str	r1, [r2, #4]
   28234:	ldrh	r3, [r4, #130]	; 0x82
   28238:	ldrh	r2, [r4, #128]	; 0x80
   2823c:	cmp	r2, r3
   28240:	strhcc	r3, [r4, #128]	; 0x80
   28244:	ldr	r3, [r4, #32]
   28248:	ldrh	r2, [r3, #12]
   2824c:	strh	r2, [r4, #130]	; 0x82
   28250:	sub	r3, r3, #36	; 0x24
   28254:	str	r3, [r4, #32]
   28258:	ldr	r3, [r4, #156]	; 0x9c
   2825c:	sub	r3, r3, #1
   28260:	str	r3, [r4, #156]	; 0x9c
   28264:	b	281c8 <flatcc_builder_end_vector@@Base+0x44>
   28268:	andeq	r0, r4, r0, lsl r7
   2826c:	andeq	r0, r0, r8, ror r5
   28270:	andeq	r0, r4, r4, lsl #18
   28274:	andeq	r0, r4, ip, lsr sl

00028278 <flatcc_builder_vector_count@@Base>:
   28278:	ldr	r3, [r0, #32]
   2827c:	ldr	r0, [r3, #20]
   28280:	bx	lr

00028284 <flatcc_builder_vector_edit@@Base>:
   28284:	ldr	r0, [r0, #16]
   28288:	bx	lr

0002828c <flatcc_builder_create_offset_vector_direct@@Base>:
   2828c:	push	{r4, lr}
   28290:	mov	r3, #0
   28294:	bl	25a30 <flatcc_builder_default_alloc@@Base+0x378>
   28298:	pop	{r4, pc}

0002829c <flatcc_builder_end_offset_vector@@Base>:
   2829c:	push	{r4, r5, r6, lr}
   282a0:	ldr	r3, [r0, #32]
   282a4:	ldrh	r2, [r3, #14]
   282a8:	cmp	r2, #5
   282ac:	bne	282d0 <flatcc_builder_end_offset_vector@@Base+0x34>
   282b0:	mov	r4, r0
   282b4:	ldr	r2, [r3, #20]
   282b8:	ldr	r1, [r0, #16]
   282bc:	bl	2828c <flatcc_builder_create_offset_vector_direct@@Base>
   282c0:	subs	r5, r0, #0
   282c4:	bne	282e4 <flatcc_builder_end_offset_vector@@Base+0x48>
   282c8:	mov	r0, r5
   282cc:	pop	{r4, r5, r6, pc}
   282d0:	ldr	r3, [pc, #140]	; 28364 <flatcc_builder_end_offset_vector@@Base+0xc8>
   282d4:	ldr	r2, [pc, #140]	; 28368 <flatcc_builder_end_offset_vector@@Base+0xcc>
   282d8:	ldr	r1, [pc, #140]	; 2836c <flatcc_builder_end_offset_vector@@Base+0xd0>
   282dc:	ldr	r0, [pc, #140]	; 28370 <flatcc_builder_end_offset_vector@@Base+0xd4>
   282e0:	bl	14618 <__assert_fail@plt>
   282e4:	ldr	r2, [r4, #20]
   282e8:	mov	r1, #0
   282ec:	ldr	r0, [r4, #16]
   282f0:	bl	145c4 <memset@plt>
   282f4:	ldr	r2, [r4, #32]
   282f8:	ldr	r3, [r2, #8]
   282fc:	str	r3, [r4, #20]
   28300:	ldr	r0, [r2]
   28304:	str	r0, [r4, #28]
   28308:	ldr	r1, [r2, #4]
   2830c:	ldr	r3, [r4, #60]	; 0x3c
   28310:	add	r3, r3, r0
   28314:	str	r3, [r4, #16]
   28318:	ldr	r3, [r4, #64]	; 0x40
   2831c:	sub	r3, r3, r0
   28320:	cmp	r3, r1
   28324:	movcs	r3, r1
   28328:	str	r3, [r4, #24]
   2832c:	str	r1, [r2, #4]
   28330:	ldrh	r3, [r4, #130]	; 0x82
   28334:	ldrh	r2, [r4, #128]	; 0x80
   28338:	cmp	r2, r3
   2833c:	strhcc	r3, [r4, #128]	; 0x80
   28340:	ldr	r3, [r4, #32]
   28344:	ldrh	r2, [r3, #12]
   28348:	strh	r2, [r4, #130]	; 0x82
   2834c:	sub	r3, r3, #36	; 0x24
   28350:	str	r3, [r4, #32]
   28354:	ldr	r3, [r4, #156]	; 0x9c
   28358:	sub	r3, r3, #1
   2835c:	str	r3, [r4, #156]	; 0x9c
   28360:	b	282c8 <flatcc_builder_end_offset_vector@@Base+0x2c>
   28364:	andeq	r0, r4, ip, lsr #14
   28368:	andeq	r0, r0, r8, asr #11
   2836c:	andeq	r0, r4, r4, lsl #18
   28370:	andeq	r0, r4, r8, lsr #21

00028374 <flatcc_builder_create_offset_vector@@Base>:
   28374:	push	{r4, r5, r6, lr}
   28378:	mov	r4, r0
   2837c:	mov	r6, r1
   28380:	mov	r5, r2
   28384:	bl	27200 <flatcc_builder_start_offset_vector@@Base>
   28388:	cmp	r0, #0
   2838c:	beq	28398 <flatcc_builder_create_offset_vector@@Base+0x24>
   28390:	mov	r0, #0
   28394:	pop	{r4, r5, r6, pc}
   28398:	mov	r1, r5
   2839c:	mov	r0, r4
   283a0:	bl	26bd0 <flatcc_builder_extend_offset_vector@@Base>
   283a4:	cmp	r0, #0
   283a8:	beq	283c4 <flatcc_builder_create_offset_vector@@Base+0x50>
   283ac:	lsl	r2, r5, #2
   283b0:	mov	r1, r6
   283b4:	bl	1454c <memcpy@plt>
   283b8:	mov	r0, r4
   283bc:	bl	2829c <flatcc_builder_end_offset_vector@@Base>
   283c0:	pop	{r4, r5, r6, pc}
   283c4:	mov	r0, #0
   283c8:	pop	{r4, r5, r6, pc}

000283cc <flatcc_builder_end_offset_vector_for_unions@@Base>:
   283cc:	push	{r4, r5, r6, lr}
   283d0:	mov	r4, r0
   283d4:	ldr	r2, [r0, #32]
   283d8:	ldrh	r0, [r2, #14]
   283dc:	cmp	r0, #5
   283e0:	bne	28408 <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   283e4:	mov	r3, r1
   283e8:	ldr	r2, [r2, #20]
   283ec:	ldr	r1, [r4, #16]
   283f0:	mov	r0, r4
   283f4:	bl	25a30 <flatcc_builder_default_alloc@@Base+0x378>
   283f8:	subs	r5, r0, #0
   283fc:	bne	2841c <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   28400:	mov	r0, r5
   28404:	pop	{r4, r5, r6, pc}
   28408:	ldr	r3, [pc, #140]	; 2849c <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   2840c:	ldr	r2, [pc, #140]	; 284a0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd4>
   28410:	ldr	r1, [pc, #140]	; 284a4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   28414:	ldr	r0, [pc, #140]	; 284a8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   28418:	bl	14618 <__assert_fail@plt>
   2841c:	ldr	r2, [r4, #20]
   28420:	mov	r1, #0
   28424:	ldr	r0, [r4, #16]
   28428:	bl	145c4 <memset@plt>
   2842c:	ldr	r2, [r4, #32]
   28430:	ldr	r3, [r2, #8]
   28434:	str	r3, [r4, #20]
   28438:	ldr	r0, [r2]
   2843c:	str	r0, [r4, #28]
   28440:	ldr	r1, [r2, #4]
   28444:	ldr	r3, [r4, #60]	; 0x3c
   28448:	add	r3, r3, r0
   2844c:	str	r3, [r4, #16]
   28450:	ldr	r3, [r4, #64]	; 0x40
   28454:	sub	r3, r3, r0
   28458:	cmp	r3, r1
   2845c:	movcs	r3, r1
   28460:	str	r3, [r4, #24]
   28464:	str	r1, [r2, #4]
   28468:	ldrh	r3, [r4, #130]	; 0x82
   2846c:	ldrh	r2, [r4, #128]	; 0x80
   28470:	cmp	r2, r3
   28474:	strhcc	r3, [r4, #128]	; 0x80
   28478:	ldr	r3, [r4, #32]
   2847c:	ldrh	r2, [r3, #12]
   28480:	strh	r2, [r4, #130]	; 0x82
   28484:	sub	r3, r3, #36	; 0x24
   28488:	str	r3, [r4, #32]
   2848c:	ldr	r3, [r4, #156]	; 0x9c
   28490:	sub	r3, r3, #1
   28494:	str	r3, [r4, #156]	; 0x9c
   28498:	b	28400 <flatcc_builder_end_offset_vector_for_unions@@Base+0x34>
   2849c:	andeq	r0, r4, r0, asr r7
   284a0:	ldrdeq	r0, [r0], -r5
   284a4:	andeq	r0, r4, r4, lsl #18
   284a8:	andeq	r0, r4, r8, lsr #21

000284ac <flatcc_builder_offset_vector_edit@@Base>:
   284ac:	ldr	r0, [r0, #16]
   284b0:	bx	lr

000284b4 <flatcc_builder_offset_vector_count@@Base>:
   284b4:	ldr	r3, [r0, #32]
   284b8:	ldr	r0, [r3, #20]
   284bc:	bx	lr

000284c0 <flatcc_builder_create_union_vector_direct@@Base>:
   284c0:	push	{r4, r5, r6, r7, lr}
   284c4:	sub	sp, sp, #12
   284c8:	mov	r4, r0
   284cc:	mov	r5, r1
   284d0:	mov	r6, r2
   284d4:	mov	r1, r3
   284d8:	mov	r3, r2
   284dc:	ldr	r2, [sp, #32]
   284e0:	mov	r0, r5
   284e4:	bl	25a30 <flatcc_builder_default_alloc@@Base+0x378>
   284e8:	subs	r7, r0, #0
   284ec:	bne	28508 <flatcc_builder_create_union_vector_direct@@Base+0x48>
   284f0:	mov	r3, #0
   284f4:	str	r3, [r4]
   284f8:	str	r3, [r4, #4]
   284fc:	mov	r0, r4
   28500:	add	sp, sp, #12
   28504:	pop	{r4, r5, r6, r7, pc}
   28508:	mvn	r3, #0
   2850c:	str	r3, [sp, #4]
   28510:	mov	r3, #1
   28514:	str	r3, [sp]
   28518:	ldr	r2, [sp, #32]
   2851c:	mov	r1, r6
   28520:	mov	r0, r5
   28524:	bl	28028 <flatcc_builder_create_vector@@Base>
   28528:	cmp	r0, #0
   2852c:	moveq	r3, #0
   28530:	streq	r3, [r4]
   28534:	strne	r0, [r4]
   28538:	str	r7, [r4, #4]
   2853c:	b	284fc <flatcc_builder_create_union_vector_direct@@Base+0x3c>

00028540 <flatcc_builder_create_union_vector@@Base>:
   28540:	push	{r4, r5, r6, r7, r8, lr}
   28544:	sub	sp, sp, #16
   28548:	mov	r5, r0
   2854c:	mov	r4, r1
   28550:	mov	r7, r2
   28554:	mov	r6, r3
   28558:	mov	r0, r1
   2855c:	bl	27200 <flatcc_builder_start_offset_vector@@Base>
   28560:	cmp	r0, #0
   28564:	beq	28580 <flatcc_builder_create_union_vector@@Base+0x40>
   28568:	mov	r3, #0
   2856c:	str	r3, [r5]
   28570:	str	r3, [r5, #4]
   28574:	mov	r0, r5
   28578:	add	sp, sp, #16
   2857c:	pop	{r4, r5, r6, r7, r8, pc}
   28580:	mov	r1, r6
   28584:	mov	r0, r4
   28588:	bl	26bd0 <flatcc_builder_extend_offset_vector@@Base>
   2858c:	cmp	r0, #0
   28590:	moveq	r3, #0
   28594:	streq	r3, [r5]
   28598:	streq	r3, [r5, #4]
   2859c:	beq	28574 <flatcc_builder_create_union_vector@@Base+0x34>
   285a0:	ldr	r8, [r4, #20]
   285a4:	add	r1, r6, r8
   285a8:	str	r1, [r4, #20]
   285ac:	ldr	r3, [r4, #24]
   285b0:	cmp	r1, r3
   285b4:	bcs	28698 <flatcc_builder_create_union_vector@@Base+0x158>
   285b8:	ldr	r3, [r4, #16]
   285bc:	adds	r2, r3, r8
   285c0:	beq	286b0 <flatcc_builder_create_union_vector@@Base+0x170>
   285c4:	cmp	r6, #0
   285c8:	beq	285f8 <flatcc_builder_create_union_vector@@Base+0xb8>
   285cc:	mov	r1, r7
   285d0:	sub	ip, r2, #1
   285d4:	sub	r0, r3, #4
   285d8:	add	r7, r7, r6, lsl #3
   285dc:	ldrb	lr, [r1]
   285e0:	strb	lr, [ip, #1]!
   285e4:	ldr	lr, [r1, #4]
   285e8:	str	lr, [r0, #4]!
   285ec:	add	r1, r1, #8
   285f0:	cmp	r1, r7
   285f4:	bne	285dc <flatcc_builder_create_union_vector@@Base+0x9c>
   285f8:	str	r6, [sp]
   285fc:	mov	r1, r4
   28600:	add	r0, sp, #8
   28604:	bl	284c0 <flatcc_builder_create_union_vector_direct@@Base>
   28608:	ldr	r7, [sp, #8]
   2860c:	ldr	r6, [sp, #12]
   28610:	ldr	r2, [r4, #20]
   28614:	mov	r1, #0
   28618:	ldr	r0, [r4, #16]
   2861c:	bl	145c4 <memset@plt>
   28620:	ldr	r2, [r4, #32]
   28624:	ldr	r3, [r2, #8]
   28628:	str	r3, [r4, #20]
   2862c:	ldr	r0, [r2]
   28630:	str	r0, [r4, #28]
   28634:	ldr	r1, [r2, #4]
   28638:	ldr	r3, [r4, #60]	; 0x3c
   2863c:	add	r3, r3, r0
   28640:	str	r3, [r4, #16]
   28644:	ldr	r3, [r4, #64]	; 0x40
   28648:	sub	r3, r3, r0
   2864c:	cmp	r3, r1
   28650:	movcs	r3, r1
   28654:	str	r3, [r4, #24]
   28658:	str	r1, [r2, #4]
   2865c:	ldrh	r3, [r4, #130]	; 0x82
   28660:	ldrh	r2, [r4, #128]	; 0x80
   28664:	cmp	r2, r3
   28668:	strhcc	r3, [r4, #128]	; 0x80
   2866c:	ldr	r3, [r4, #32]
   28670:	ldrh	r2, [r3, #12]
   28674:	strh	r2, [r4, #130]	; 0x82
   28678:	sub	r3, r3, #36	; 0x24
   2867c:	str	r3, [r4, #32]
   28680:	ldr	r3, [r4, #156]	; 0x9c
   28684:	sub	r3, r3, #1
   28688:	str	r3, [r4, #156]	; 0x9c
   2868c:	str	r7, [r5]
   28690:	str	r6, [r5, #4]
   28694:	b	28574 <flatcc_builder_create_union_vector@@Base+0x34>
   28698:	mvn	r2, #3
   2869c:	add	r1, r1, #1
   286a0:	mov	r0, r4
   286a4:	bl	25644 <main@@Base+0x7f4>
   286a8:	cmp	r0, #0
   286ac:	beq	285b8 <flatcc_builder_create_union_vector@@Base+0x78>
   286b0:	mov	r3, #0
   286b4:	str	r3, [r5]
   286b8:	str	r3, [r5, #4]
   286bc:	b	28574 <flatcc_builder_create_union_vector@@Base+0x34>

000286c0 <flatcc_builder_start_union_vector@@Base>:
   286c0:	push	{r4, lr}
   286c4:	mov	r4, r0
   286c8:	mov	r1, #4
   286cc:	bl	258e4 <flatcc_builder_default_alloc@@Base+0x22c>
   286d0:	cmp	r0, #0
   286d4:	bne	28730 <flatcc_builder_start_union_vector@@Base+0x70>
   286d8:	ldr	r3, [r4, #32]
   286dc:	mov	r2, #8
   286e0:	str	r2, [r3, #16]
   286e4:	ldr	r3, [r4, #32]
   286e8:	mov	r2, #0
   286ec:	str	r2, [r3, #20]
   286f0:	ldr	r3, [r4, #32]
   286f4:	mov	r2, #7
   286f8:	strh	r2, [r3, #14]
   286fc:	ldr	r1, [r4, #28]
   28700:	ldr	r2, [r4, #60]	; 0x3c
   28704:	add	r2, r2, r1
   28708:	str	r2, [r4, #16]
   2870c:	ldr	r3, [r4, #64]	; 0x40
   28710:	sub	r3, r3, r1
   28714:	cmn	r3, #4
   28718:	mvnhi	r3, #3
   2871c:	str	r3, [r4, #24]
   28720:	ldr	r3, [r4, #32]
   28724:	mvn	r2, #3
   28728:	str	r2, [r3, #4]
   2872c:	pop	{r4, pc}
   28730:	mvn	r0, #0
   28734:	pop	{r4, pc}

00028738 <flatcc_builder_end_union_vector@@Base>:
   28738:	push	{r4, r5, r6, r7, r8, lr}
   2873c:	sub	sp, sp, #16
   28740:	ldr	r3, [r1, #32]
   28744:	ldrh	r2, [r3, #14]
   28748:	cmp	r2, #7
   2874c:	bne	28864 <flatcc_builder_end_union_vector@@Base+0x12c>
   28750:	mov	r6, r0
   28754:	mov	r4, r1
   28758:	ldr	r5, [r3, #20]
   2875c:	ldr	r8, [r1, #20]
   28760:	add	r1, r5, r5, lsl #2
   28764:	add	r1, r1, r8
   28768:	str	r1, [r4, #20]
   2876c:	ldr	r3, [r4, #24]
   28770:	cmp	r1, r3
   28774:	bcs	28878 <flatcc_builder_end_union_vector@@Base+0x140>
   28778:	ldr	r7, [r4, #16]
   2877c:	adds	r3, r7, r8
   28780:	beq	28890 <flatcc_builder_end_union_vector@@Base+0x158>
   28784:	add	r2, r3, r5, lsl #2
   28788:	cmp	r5, #0
   2878c:	beq	287bc <flatcc_builder_end_union_vector@@Base+0x84>
   28790:	mov	r1, r7
   28794:	sub	ip, r2, #1
   28798:	sub	r0, r3, #4
   2879c:	add	r7, r7, r5, lsl #3
   287a0:	ldrb	lr, [r1]
   287a4:	strb	lr, [ip, #1]!
   287a8:	ldr	lr, [r1, #4]
   287ac:	str	lr, [r0, #4]!
   287b0:	add	r1, r1, #8
   287b4:	cmp	r1, r7
   287b8:	bne	287a0 <flatcc_builder_end_union_vector@@Base+0x68>
   287bc:	str	r5, [sp]
   287c0:	mov	r1, r4
   287c4:	add	r0, sp, #8
   287c8:	bl	284c0 <flatcc_builder_create_union_vector_direct@@Base>
   287cc:	ldr	r7, [sp, #8]
   287d0:	ldr	r5, [sp, #12]
   287d4:	ldr	r2, [r4, #20]
   287d8:	mov	r1, #0
   287dc:	ldr	r0, [r4, #16]
   287e0:	bl	145c4 <memset@plt>
   287e4:	ldr	r2, [r4, #32]
   287e8:	ldr	r3, [r2, #8]
   287ec:	str	r3, [r4, #20]
   287f0:	ldr	r0, [r2]
   287f4:	str	r0, [r4, #28]
   287f8:	ldr	r1, [r2, #4]
   287fc:	ldr	r3, [r4, #60]	; 0x3c
   28800:	add	r3, r3, r0
   28804:	str	r3, [r4, #16]
   28808:	ldr	r3, [r4, #64]	; 0x40
   2880c:	sub	r3, r3, r0
   28810:	cmp	r3, r1
   28814:	movcs	r3, r1
   28818:	str	r3, [r4, #24]
   2881c:	str	r1, [r2, #4]
   28820:	ldrh	r3, [r4, #130]	; 0x82
   28824:	ldrh	r2, [r4, #128]	; 0x80
   28828:	cmp	r2, r3
   2882c:	strhcc	r3, [r4, #128]	; 0x80
   28830:	ldr	r3, [r4, #32]
   28834:	ldrh	r2, [r3, #12]
   28838:	strh	r2, [r4, #130]	; 0x82
   2883c:	sub	r3, r3, #36	; 0x24
   28840:	str	r3, [r4, #32]
   28844:	ldr	r3, [r4, #156]	; 0x9c
   28848:	sub	r3, r3, #1
   2884c:	str	r3, [r4, #156]	; 0x9c
   28850:	str	r7, [r6]
   28854:	str	r5, [r6, #4]
   28858:	mov	r0, r6
   2885c:	add	sp, sp, #16
   28860:	pop	{r4, r5, r6, r7, r8, pc}
   28864:	ldr	r3, [pc, #52]	; 288a0 <flatcc_builder_end_union_vector@@Base+0x168>
   28868:	ldr	r2, [pc, #52]	; 288a4 <flatcc_builder_end_union_vector@@Base+0x16c>
   2886c:	ldr	r1, [pc, #52]	; 288a8 <flatcc_builder_end_union_vector@@Base+0x170>
   28870:	ldr	r0, [pc, #52]	; 288ac <flatcc_builder_end_union_vector@@Base+0x174>
   28874:	bl	14618 <__assert_fail@plt>
   28878:	mvn	r2, #3
   2887c:	add	r1, r1, #1
   28880:	mov	r0, r4
   28884:	bl	25644 <main@@Base+0x7f4>
   28888:	cmp	r0, #0
   2888c:	beq	28778 <flatcc_builder_end_union_vector@@Base+0x40>
   28890:	mov	r3, #0
   28894:	str	r3, [r6]
   28898:	str	r3, [r6, #4]
   2889c:	b	28858 <flatcc_builder_end_union_vector@@Base+0x120>
   288a0:	andeq	r0, r4, ip, ror r7
   288a4:	andeq	r0, r0, r1, asr r6
   288a8:	andeq	r0, r4, r4, lsl #18
   288ac:	andeq	r0, r4, r8, lsl #24

000288b0 <flatcc_builder_union_vector_edit@@Base>:
   288b0:	ldr	r0, [r0, #16]
   288b4:	bx	lr

000288b8 <flatcc_builder_union_vector_count@@Base>:
   288b8:	ldr	r3, [r0, #32]
   288bc:	ldr	r0, [r3, #20]
   288c0:	bx	lr

000288c4 <flatcc_builder_extend_union_vector@@Base>:
   288c4:	push	{r4, r5, r6, lr}
   288c8:	mov	r4, r0
   288cc:	ldr	r2, [r0, #32]
   288d0:	ldr	r3, [r2, #20]
   288d4:	adds	r3, r1, r3
   288d8:	movcs	ip, #1
   288dc:	movcc	ip, #0
   288e0:	cmn	r3, #-536870911	; 0xe0000001
   288e4:	movls	r0, #0
   288e8:	movhi	r0, #1
   288ec:	orrs	r0, ip, r0
   288f0:	bne	2891c <flatcc_builder_extend_union_vector@@Base+0x58>
   288f4:	str	r3, [r2, #20]
   288f8:	ldr	r5, [r4, #20]
   288fc:	add	r1, r5, r1, lsl #3
   28900:	str	r1, [r4, #20]
   28904:	ldr	r3, [r4, #24]
   28908:	cmp	r1, r3
   2890c:	bcs	28930 <flatcc_builder_extend_union_vector@@Base+0x6c>
   28910:	ldr	r0, [r4, #16]
   28914:	add	r0, r0, r5
   28918:	pop	{r4, r5, r6, pc}
   2891c:	ldr	r3, [pc, #44]	; 28950 <flatcc_builder_extend_union_vector@@Base+0x8c>
   28920:	mov	r2, #892	; 0x37c
   28924:	ldr	r1, [pc, #40]	; 28954 <flatcc_builder_extend_union_vector@@Base+0x90>
   28928:	ldr	r0, [pc, #40]	; 28958 <flatcc_builder_extend_union_vector@@Base+0x94>
   2892c:	bl	14618 <__assert_fail@plt>
   28930:	mvn	r2, #3
   28934:	add	r1, r1, #1
   28938:	mov	r0, r4
   2893c:	bl	25644 <main@@Base+0x7f4>
   28940:	cmp	r0, #0
   28944:	beq	28910 <flatcc_builder_extend_union_vector@@Base+0x4c>
   28948:	mov	r0, #0
   2894c:	pop	{r4, r5, r6, pc}
   28950:	andeq	r0, r4, r4, ror #9
   28954:	andeq	r0, r4, r4, lsl #18
   28958:	andeq	r0, r4, r0, lsr #20

0002895c <flatcc_builder_truncate_union_vector@@Base>:
   2895c:	push	{r4, lr}
   28960:	ldr	ip, [r0, #32]
   28964:	ldrh	r3, [ip, #14]
   28968:	cmp	r3, #7
   2896c:	bne	289b4 <flatcc_builder_truncate_union_vector@@Base+0x58>
   28970:	ldr	r3, [ip, #20]
   28974:	cmp	r3, r1
   28978:	bcc	289c8 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   2897c:	sub	r3, r3, r1
   28980:	str	r3, [ip, #20]
   28984:	ldr	r3, [r0, #32]
   28988:	ldr	r2, [r3, #16]
   2898c:	mul	r2, r2, r1
   28990:	ldr	r3, [r0, #20]
   28994:	sub	r3, r3, r2
   28998:	str	r3, [r0, #20]
   2899c:	ldr	r0, [r0, #16]
   289a0:	mov	r1, #0
   289a4:	add	r0, r0, r3
   289a8:	bl	145c4 <memset@plt>
   289ac:	mov	r0, #0
   289b0:	pop	{r4, pc}
   289b4:	ldr	r3, [pc, #32]	; 289dc <flatcc_builder_truncate_union_vector@@Base+0x80>
   289b8:	ldr	r2, [pc, #32]	; 289e0 <flatcc_builder_truncate_union_vector@@Base+0x84>
   289bc:	ldr	r1, [pc, #32]	; 289e4 <flatcc_builder_truncate_union_vector@@Base+0x88>
   289c0:	ldr	r0, [pc, #32]	; 289e8 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   289c4:	bl	14618 <__assert_fail@plt>
   289c8:	ldr	r3, [pc, #12]	; 289dc <flatcc_builder_truncate_union_vector@@Base+0x80>
   289cc:	ldr	r2, [pc, #24]	; 289ec <flatcc_builder_truncate_union_vector@@Base+0x90>
   289d0:	ldr	r1, [pc, #12]	; 289e4 <flatcc_builder_truncate_union_vector@@Base+0x88>
   289d4:	ldr	r0, [pc, #20]	; 289f0 <flatcc_builder_truncate_union_vector@@Base+0x94>
   289d8:	bl	14618 <__assert_fail@plt>
   289dc:	muleq	r4, ip, r7
   289e0:	andeq	r0, r0, r1, lsl #13
   289e4:	andeq	r0, r4, r4, lsl #18
   289e8:	andeq	r0, r4, r8, lsl #24
   289ec:	andeq	r0, r0, r2, lsl #13
   289f0:	andeq	r0, r4, ip, lsr #22

000289f4 <flatcc_builder_union_vector_push@@Base>:
   289f4:	push	{r4, r5, lr}
   289f8:	sub	sp, sp, #12
   289fc:	add	r3, sp, #8
   28a00:	stmdb	r3, {r1, r2}
   28a04:	ldr	r2, [r0, #32]
   28a08:	ldrh	r3, [r2, #14]
   28a0c:	cmp	r3, #7
   28a10:	bne	28a68 <flatcc_builder_union_vector_push@@Base+0x74>
   28a14:	mov	r4, r0
   28a18:	ldr	r3, [r2, #20]
   28a1c:	cmn	r3, #-536870911	; 0xe0000001
   28a20:	beq	28a98 <flatcc_builder_union_vector_push@@Base+0xa4>
   28a24:	add	r3, r3, #1
   28a28:	str	r3, [r2, #20]
   28a2c:	ldr	r5, [r0, #20]
   28a30:	add	r3, r5, #8
   28a34:	str	r3, [r0, #20]
   28a38:	ldr	r2, [r0, #24]
   28a3c:	cmp	r3, r2
   28a40:	bcs	28a7c <flatcc_builder_union_vector_push@@Base+0x88>
   28a44:	ldr	r3, [r4, #16]
   28a48:	adds	r3, r3, r5
   28a4c:	moveq	r0, r3
   28a50:	addne	r2, sp, #8
   28a54:	ldmdbne	r2, {r0, r1}
   28a58:	stmne	r3, {r0, r1}
   28a5c:	movne	r0, r3
   28a60:	add	sp, sp, #12
   28a64:	pop	{r4, r5, pc}
   28a68:	ldr	r3, [pc, #48]	; 28aa0 <flatcc_builder_union_vector_push@@Base+0xac>
   28a6c:	ldr	r2, [pc, #48]	; 28aa4 <flatcc_builder_union_vector_push@@Base+0xb0>
   28a70:	ldr	r1, [pc, #48]	; 28aa8 <flatcc_builder_union_vector_push@@Base+0xb4>
   28a74:	ldr	r0, [pc, #48]	; 28aac <flatcc_builder_union_vector_push@@Base+0xb8>
   28a78:	bl	14618 <__assert_fail@plt>
   28a7c:	mvn	r2, #3
   28a80:	add	r1, r5, #9
   28a84:	bl	25644 <main@@Base+0x7f4>
   28a88:	cmp	r0, #0
   28a8c:	beq	28a44 <flatcc_builder_union_vector_push@@Base+0x50>
   28a90:	mov	r0, #0
   28a94:	b	28a60 <flatcc_builder_union_vector_push@@Base+0x6c>
   28a98:	mov	r0, #0
   28a9c:	b	28a60 <flatcc_builder_union_vector_push@@Base+0x6c>
   28aa0:	andeq	r0, r4, r4, asr #15
   28aa4:	andeq	r0, r0, sp, lsl #13
   28aa8:	andeq	r0, r4, r4, lsl #18
   28aac:	andeq	r0, r4, r8, lsl #24

00028ab0 <flatcc_builder_append_union_vector@@Base>:
   28ab0:	push	{r4, r5, r6, r7, r8, lr}
   28ab4:	mov	r6, r1
   28ab8:	ldr	r1, [r0, #32]
   28abc:	ldrh	r3, [r1, #14]
   28ac0:	cmp	r3, #7
   28ac4:	bne	28b34 <flatcc_builder_append_union_vector@@Base+0x84>
   28ac8:	mov	r5, r0
   28acc:	ldr	r3, [r1, #20]
   28ad0:	adds	r3, r2, r3
   28ad4:	movcs	ip, #1
   28ad8:	movcc	ip, #0
   28adc:	cmn	r3, #-536870911	; 0xe0000001
   28ae0:	movls	r0, #0
   28ae4:	movhi	r0, #1
   28ae8:	orrs	r0, ip, r0
   28aec:	bne	28b48 <flatcc_builder_append_union_vector@@Base+0x98>
   28af0:	str	r3, [r1, #20]
   28af4:	lsl	r4, r2, #3
   28af8:	ldr	r7, [r5, #20]
   28afc:	add	r1, r4, r7
   28b00:	str	r1, [r5, #20]
   28b04:	ldr	r3, [r5, #24]
   28b08:	cmp	r1, r3
   28b0c:	bcs	28b5c <flatcc_builder_append_union_vector@@Base+0xac>
   28b10:	ldr	r5, [r5, #16]
   28b14:	adds	r5, r5, r7
   28b18:	beq	28b2c <flatcc_builder_append_union_vector@@Base+0x7c>
   28b1c:	mov	r2, r4
   28b20:	mov	r1, r6
   28b24:	mov	r0, r5
   28b28:	bl	1454c <memcpy@plt>
   28b2c:	mov	r0, r5
   28b30:	pop	{r4, r5, r6, r7, r8, pc}
   28b34:	ldr	r3, [pc, #64]	; 28b7c <flatcc_builder_append_union_vector@@Base+0xcc>
   28b38:	ldr	r2, [pc, #64]	; 28b80 <flatcc_builder_append_union_vector@@Base+0xd0>
   28b3c:	ldr	r1, [pc, #64]	; 28b84 <flatcc_builder_append_union_vector@@Base+0xd4>
   28b40:	ldr	r0, [pc, #64]	; 28b88 <flatcc_builder_append_union_vector@@Base+0xd8>
   28b44:	bl	14618 <__assert_fail@plt>
   28b48:	ldr	r3, [pc, #60]	; 28b8c <flatcc_builder_append_union_vector@@Base+0xdc>
   28b4c:	mov	r2, #892	; 0x37c
   28b50:	ldr	r1, [pc, #44]	; 28b84 <flatcc_builder_append_union_vector@@Base+0xd4>
   28b54:	ldr	r0, [pc, #52]	; 28b90 <flatcc_builder_append_union_vector@@Base+0xe0>
   28b58:	bl	14618 <__assert_fail@plt>
   28b5c:	mvn	r2, #3
   28b60:	add	r1, r1, #1
   28b64:	mov	r0, r5
   28b68:	bl	25644 <main@@Base+0x7f4>
   28b6c:	cmp	r0, #0
   28b70:	beq	28b10 <flatcc_builder_append_union_vector@@Base+0x60>
   28b74:	mov	r5, #0
   28b78:	b	28b2c <flatcc_builder_append_union_vector@@Base+0x7c>
   28b7c:	andeq	r0, r4, r8, ror #15
   28b80:	muleq	r0, ip, r6
   28b84:	andeq	r0, r4, r4, lsl #18
   28b88:	andeq	r0, r4, r8, lsl #24
   28b8c:	andeq	r0, r4, r4, ror #9
   28b90:	andeq	r0, r4, r0, lsr #20

00028b94 <flatcc_builder_create_string@@Base>:
   28b94:	push	{r4, r5, r6, lr}
   28b98:	sub	sp, sp, #88	; 0x58
   28b9c:	mov	r5, r0
   28ba0:	str	r2, [sp, #84]	; 0x54
   28ba4:	ldr	r0, [r0, #136]	; 0x88
   28ba8:	sub	r3, r0, r2
   28bac:	sub	r3, r3, #1
   28bb0:	and	r3, r3, #3
   28bb4:	add	r3, r3, #1
   28bb8:	mov	ip, #4
   28bbc:	str	ip, [sp, #12]
   28bc0:	add	lr, sp, #84	; 0x54
   28bc4:	str	lr, [sp, #20]
   28bc8:	str	ip, [sp, #24]
   28bcc:	mov	ip, #1
   28bd0:	str	ip, [sp, #16]
   28bd4:	cmp	r2, #0
   28bd8:	beq	28bf4 <flatcc_builder_create_string@@Base+0x60>
   28bdc:	add	ip, r2, #4
   28be0:	str	ip, [sp, #12]
   28be4:	str	r1, [sp, #28]
   28be8:	str	r2, [sp, #32]
   28bec:	mov	r2, #2
   28bf0:	str	r2, [sp, #16]
   28bf4:	cmp	r3, #0
   28bf8:	beq	28c28 <flatcc_builder_create_string@@Base+0x94>
   28bfc:	ldr	r2, [sp, #12]
   28c00:	add	r2, r2, r3
   28c04:	str	r2, [sp, #12]
   28c08:	ldr	r2, [sp, #16]
   28c0c:	add	r2, r2, #1
   28c10:	add	r1, sp, #88	; 0x58
   28c14:	add	r1, r1, r2, lsl #3
   28c18:	ldr	ip, [pc, #116]	; 28c94 <flatcc_builder_create_string@@Base+0x100>
   28c1c:	str	ip, [r1, #-76]	; 0xffffffb4
   28c20:	str	r3, [r1, #-72]	; 0xffffffb8
   28c24:	str	r2, [sp, #16]
   28c28:	ldr	r3, [sp, #12]
   28c2c:	sub	r4, r0, r3
   28c30:	cmp	r0, r4
   28c34:	ble	28c6c <flatcc_builder_create_string@@Base+0xd8>
   28c38:	str	r3, [sp]
   28c3c:	ldr	r6, [r5, #44]	; 0x2c
   28c40:	mov	r3, r4
   28c44:	ldr	r2, [sp, #16]
   28c48:	add	r1, sp, #20
   28c4c:	ldr	r0, [r5, #36]	; 0x24
   28c50:	blx	r6
   28c54:	cmp	r0, #0
   28c58:	bne	28c80 <flatcc_builder_create_string@@Base+0xec>
   28c5c:	str	r4, [r5, #136]	; 0x88
   28c60:	mov	r0, r4
   28c64:	add	sp, sp, #88	; 0x58
   28c68:	pop	{r4, r5, r6, pc}
   28c6c:	ldr	r3, [pc, #36]	; 28c98 <flatcc_builder_create_string@@Base+0x104>
   28c70:	ldr	r2, [pc, #36]	; 28c9c <flatcc_builder_create_string@@Base+0x108>
   28c74:	ldr	r1, [pc, #36]	; 28ca0 <flatcc_builder_create_string@@Base+0x10c>
   28c78:	ldr	r0, [pc, #36]	; 28ca4 <flatcc_builder_create_string@@Base+0x110>
   28c7c:	bl	14618 <__assert_fail@plt>
   28c80:	ldr	r3, [pc, #16]	; 28c98 <flatcc_builder_create_string@@Base+0x104>
   28c84:	ldr	r2, [pc, #28]	; 28ca8 <flatcc_builder_create_string@@Base+0x114>
   28c88:	ldr	r1, [pc, #16]	; 28ca0 <flatcc_builder_create_string@@Base+0x10c>
   28c8c:	ldr	r0, [pc, #16]	; 28ca4 <flatcc_builder_create_string@@Base+0x110>
   28c90:	bl	14618 <__assert_fail@plt>
   28c94:			; <UNDEFINED> instruction: 0x000401b4
   28c98:	andeq	r0, r4, r0, lsl #8
   28c9c:	andeq	r0, r0, r7, lsl #5
   28ca0:	andeq	r0, r4, r4, lsl #18
   28ca4:	andeq	r0, r4, r8, asr r9
   28ca8:	andeq	r0, r0, fp, lsl #5

00028cac <flatcc_builder_create_string_str@@Base>:
   28cac:	push	{r4, r5, r6, lr}
   28cb0:	mov	r5, r0
   28cb4:	mov	r4, r1
   28cb8:	mov	r0, r1
   28cbc:	bl	145a0 <strlen@plt>
   28cc0:	mov	r2, r0
   28cc4:	mov	r1, r4
   28cc8:	mov	r0, r5
   28ccc:	bl	28b94 <flatcc_builder_create_string@@Base>
   28cd0:	pop	{r4, r5, r6, pc}

00028cd4 <flatcc_builder_create_string_strn@@Base>:
   28cd4:	push	{r4, r5, r6, lr}
   28cd8:	mov	r6, r0
   28cdc:	mov	r4, r1
   28ce0:	mov	r5, r2
   28ce4:	mov	r1, #0
   28ce8:	mov	r0, r4
   28cec:	bl	145e8 <memchr@plt>
   28cf0:	cmp	r0, #0
   28cf4:	subne	r5, r0, r4
   28cf8:	mov	r2, r5
   28cfc:	mov	r1, r4
   28d00:	mov	r0, r6
   28d04:	bl	28b94 <flatcc_builder_create_string@@Base>
   28d08:	pop	{r4, r5, r6, pc}

00028d0c <flatcc_builder_end_string@@Base>:
   28d0c:	push	{r4, r5, r6, lr}
   28d10:	ldr	r3, [r0, #32]
   28d14:	ldrh	r2, [r3, #14]
   28d18:	cmp	r2, #6
   28d1c:	bne	28d4c <flatcc_builder_end_string@@Base+0x40>
   28d20:	mov	r4, r0
   28d24:	ldr	r2, [r3, #20]
   28d28:	ldr	r3, [r0, #20]
   28d2c:	cmp	r2, r3
   28d30:	bne	28d60 <flatcc_builder_end_string@@Base+0x54>
   28d34:	ldr	r1, [r0, #16]
   28d38:	bl	28b94 <flatcc_builder_create_string@@Base>
   28d3c:	subs	r5, r0, #0
   28d40:	bne	28d74 <flatcc_builder_end_string@@Base+0x68>
   28d44:	mov	r0, r5
   28d48:	pop	{r4, r5, r6, pc}
   28d4c:	ldr	r3, [pc, #160]	; 28df4 <flatcc_builder_end_string@@Base+0xe8>
   28d50:	ldr	r2, [pc, #160]	; 28df8 <flatcc_builder_end_string@@Base+0xec>
   28d54:	ldr	r1, [pc, #160]	; 28dfc <flatcc_builder_end_string@@Base+0xf0>
   28d58:	ldr	r0, [pc, #160]	; 28e00 <flatcc_builder_end_string@@Base+0xf4>
   28d5c:	bl	14618 <__assert_fail@plt>
   28d60:	ldr	r3, [pc, #140]	; 28df4 <flatcc_builder_end_string@@Base+0xe8>
   28d64:	ldr	r2, [pc, #152]	; 28e04 <flatcc_builder_end_string@@Base+0xf8>
   28d68:	ldr	r1, [pc, #140]	; 28dfc <flatcc_builder_end_string@@Base+0xf0>
   28d6c:	ldr	r0, [pc, #148]	; 28e08 <flatcc_builder_end_string@@Base+0xfc>
   28d70:	bl	14618 <__assert_fail@plt>
   28d74:	ldr	r2, [r4, #20]
   28d78:	mov	r1, #0
   28d7c:	ldr	r0, [r4, #16]
   28d80:	bl	145c4 <memset@plt>
   28d84:	ldr	r2, [r4, #32]
   28d88:	ldr	r3, [r2, #8]
   28d8c:	str	r3, [r4, #20]
   28d90:	ldr	r0, [r2]
   28d94:	str	r0, [r4, #28]
   28d98:	ldr	r1, [r2, #4]
   28d9c:	ldr	r3, [r4, #60]	; 0x3c
   28da0:	add	r3, r3, r0
   28da4:	str	r3, [r4, #16]
   28da8:	ldr	r3, [r4, #64]	; 0x40
   28dac:	sub	r3, r3, r0
   28db0:	cmp	r3, r1
   28db4:	movcs	r3, r1
   28db8:	str	r3, [r4, #24]
   28dbc:	str	r1, [r2, #4]
   28dc0:	ldrh	r3, [r4, #130]	; 0x82
   28dc4:	ldrh	r2, [r4, #128]	; 0x80
   28dc8:	cmp	r2, r3
   28dcc:	strhcc	r3, [r4, #128]	; 0x80
   28dd0:	ldr	r3, [r4, #32]
   28dd4:	ldrh	r2, [r3, #12]
   28dd8:	strh	r2, [r4, #130]	; 0x82
   28ddc:	sub	r3, r3, #36	; 0x24
   28de0:	str	r3, [r4, #32]
   28de4:	ldr	r3, [r4, #156]	; 0x9c
   28de8:	sub	r3, r3, #1
   28dec:	str	r3, [r4, #156]	; 0x9c
   28df0:	b	28d44 <flatcc_builder_end_string@@Base+0x38>
   28df4:	andeq	r0, r4, ip, lsl #16
   28df8:	andeq	r0, r0, r4, asr #13
   28dfc:	andeq	r0, r4, r4, lsl #18
   28e00:	ldrdeq	r0, [r4], -ip
   28e04:	andeq	r0, r0, r5, asr #13
   28e08:	andeq	r0, r4, ip, lsr ip

00028e0c <flatcc_builder_string_edit@@Base>:
   28e0c:	ldr	r0, [r0, #16]
   28e10:	bx	lr

00028e14 <flatcc_builder_string_len@@Base>:
   28e14:	ldr	r3, [r0, #32]
   28e18:	ldr	r0, [r3, #20]
   28e1c:	bx	lr

00028e20 <flatcc_builder_table_add@@Base>:
   28e20:	push	{r4, r5, r6, r7, r8, lr}
   28e24:	mov	r5, r1
   28e28:	ldr	r1, [r0, #32]
   28e2c:	ldrh	r1, [r1, #14]
   28e30:	cmp	r1, #3
   28e34:	bne	28ee0 <flatcc_builder_table_add@@Base+0xc0>
   28e38:	mov	r4, r0
   28e3c:	ldr	r1, [pc, #248]	; 28f3c <flatcc_builder_table_add@@Base+0x11c>
   28e40:	cmp	r5, r1
   28e44:	bhi	28ef4 <flatcc_builder_table_add@@Base+0xd4>
   28e48:	ldrh	r1, [r0, #130]	; 0x82
   28e4c:	cmp	r1, r3
   28e50:	strhcc	r3, [r0, #130]	; 0x82
   28e54:	ldr	r0, [r0, #4]
   28e58:	lsl	r1, r5, #1
   28e5c:	ldrh	r1, [r0, r1]
   28e60:	cmp	r1, #0
   28e64:	bne	28f08 <flatcc_builder_table_add@@Base+0xe8>
   28e68:	ldr	r0, [r4, #12]
   28e6c:	eor	r0, r0, r5
   28e70:	ldr	r1, [pc, #200]	; 28f40 <flatcc_builder_table_add@@Base+0x120>
   28e74:	mul	r0, r1, r0
   28e78:	eor	r0, r0, r2
   28e7c:	mul	r0, r1, r0
   28e80:	str	r0, [r4, #12]
   28e84:	uxth	r7, r5
   28e88:	sub	r6, r3, #1
   28e8c:	ldr	r0, [r4, #20]
   28e90:	add	r6, r6, r0
   28e94:	rsb	r3, r3, #0
   28e98:	and	r6, r6, r3
   28e9c:	add	r1, r2, r6
   28ea0:	str	r1, [r4, #20]
   28ea4:	ldr	r3, [r4, #24]
   28ea8:	cmp	r1, r3
   28eac:	bcs	28f1c <flatcc_builder_table_add@@Base+0xfc>
   28eb0:	uxth	r5, r5
   28eb4:	ldr	r3, [r4, #4]
   28eb8:	lsl	r5, r5, #1
   28ebc:	add	r2, r6, #4
   28ec0:	strh	r2, [r3, r5]
   28ec4:	ldrh	r3, [r4, #8]
   28ec8:	cmp	r3, r7
   28ecc:	addls	r7, r7, #1
   28ed0:	strhls	r7, [r4, #8]
   28ed4:	ldr	r0, [r4, #16]
   28ed8:	add	r0, r0, r6
   28edc:	pop	{r4, r5, r6, r7, r8, pc}
   28ee0:	ldr	r3, [pc, #92]	; 28f44 <flatcc_builder_table_add@@Base+0x124>
   28ee4:	ldr	r2, [pc, #92]	; 28f48 <flatcc_builder_table_add@@Base+0x128>
   28ee8:	ldr	r1, [pc, #92]	; 28f4c <flatcc_builder_table_add@@Base+0x12c>
   28eec:	ldr	r0, [pc, #92]	; 28f50 <flatcc_builder_table_add@@Base+0x130>
   28ef0:	bl	14618 <__assert_fail@plt>
   28ef4:	ldr	r3, [pc, #72]	; 28f44 <flatcc_builder_table_add@@Base+0x124>
   28ef8:	ldr	r2, [pc, #84]	; 28f54 <flatcc_builder_table_add@@Base+0x134>
   28efc:	ldr	r1, [pc, #72]	; 28f4c <flatcc_builder_table_add@@Base+0x12c>
   28f00:	ldr	r0, [pc, #80]	; 28f58 <flatcc_builder_table_add@@Base+0x138>
   28f04:	bl	14618 <__assert_fail@plt>
   28f08:	ldr	r3, [pc, #52]	; 28f44 <flatcc_builder_table_add@@Base+0x124>
   28f0c:	ldr	r2, [pc, #72]	; 28f5c <flatcc_builder_table_add@@Base+0x13c>
   28f10:	ldr	r1, [pc, #52]	; 28f4c <flatcc_builder_table_add@@Base+0x12c>
   28f14:	ldr	r0, [pc, #68]	; 28f60 <flatcc_builder_table_add@@Base+0x140>
   28f18:	bl	14618 <__assert_fail@plt>
   28f1c:	ldr	r2, [pc, #64]	; 28f64 <flatcc_builder_table_add@@Base+0x144>
   28f20:	add	r1, r1, #1
   28f24:	mov	r0, r4
   28f28:	bl	25644 <main@@Base+0x7f4>
   28f2c:	cmp	r0, #0
   28f30:	beq	28eb0 <flatcc_builder_table_add@@Base+0x90>
   28f34:	mov	r0, #0
   28f38:	pop	{r4, r5, r6, r7, r8, pc}
   28f3c:	strdeq	r7, [r0], -ip
   28f40:			; <UNDEFINED> instruction: 0x9e3779b1
   28f44:	andeq	r0, r4, r8, lsr #16
   28f48:	andeq	r0, r0, sp, ror #13
   28f4c:	andeq	r0, r4, r4, lsl #18
   28f50:	andeq	r0, r4, r8, asr #23
   28f54:	andeq	r0, r0, lr, ror #13
   28f58:	andeq	r0, r4, r0, ror #24
   28f5c:	strdeq	r0, [r0], -r8
   28f60:	andeq	r0, r4, r8, asr r9
   28f64:	strdeq	pc, [r0], -ip

00028f68 <flatcc_builder_table_edit@@Base>:
   28f68:	ldr	r3, [r0, #32]
   28f6c:	ldrh	r3, [r3, #14]
   28f70:	cmp	r3, #3
   28f74:	bne	28f8c <flatcc_builder_table_edit@@Base+0x24>
   28f78:	ldr	r3, [r0, #20]
   28f7c:	sub	r1, r3, r1
   28f80:	ldr	r0, [r0, #16]
   28f84:	add	r0, r0, r1
   28f88:	bx	lr
   28f8c:	push	{r4, lr}
   28f90:	ldr	r3, [pc, #12]	; 28fa4 <flatcc_builder_table_edit@@Base+0x3c>
   28f94:	ldr	r2, [pc, #12]	; 28fa8 <flatcc_builder_table_edit@@Base+0x40>
   28f98:	ldr	r1, [pc, #12]	; 28fac <flatcc_builder_table_edit@@Base+0x44>
   28f9c:	ldr	r0, [pc, #12]	; 28fb0 <flatcc_builder_table_edit@@Base+0x48>
   28fa0:	bl	14618 <__assert_fail@plt>
   28fa4:	andeq	r0, r4, r4, asr #16
   28fa8:	andeq	r0, r0, r2, lsl #14
   28fac:	andeq	r0, r4, r4, lsl #18
   28fb0:	andeq	r0, r4, r8, asr #23

00028fb4 <flatcc_builder_table_add_copy@@Base>:
   28fb4:	push	{r4, r5, r6, lr}
   28fb8:	mov	r6, r2
   28fbc:	mov	r5, r3
   28fc0:	ldrh	r3, [sp, #16]
   28fc4:	mov	r2, r5
   28fc8:	bl	28e20 <flatcc_builder_table_add@@Base>
   28fcc:	subs	r4, r0, #0
   28fd0:	beq	28fe4 <flatcc_builder_table_add_copy@@Base+0x30>
   28fd4:	mov	r2, r5
   28fd8:	mov	r1, r6
   28fdc:	mov	r0, r4
   28fe0:	bl	1454c <memcpy@plt>
   28fe4:	mov	r0, r4
   28fe8:	pop	{r4, r5, r6, pc}

00028fec <flatcc_builder_table_add_offset@@Base>:
   28fec:	push	{r4, r5, r6, r7, r8, lr}
   28ff0:	ldr	r3, [r0, #32]
   28ff4:	ldrh	r3, [r3, #14]
   28ff8:	cmp	r3, #3
   28ffc:	bne	290ac <flatcc_builder_table_add_offset@@Base+0xc0>
   29000:	mov	r4, r0
   29004:	mov	r5, r1
   29008:	ldr	r3, [pc, #240]	; 29100 <flatcc_builder_table_add_offset@@Base+0x114>
   2900c:	cmp	r1, r3
   29010:	bhi	290c0 <flatcc_builder_table_add_offset@@Base+0xd4>
   29014:	ldr	r2, [r0, #4]
   29018:	lsl	r3, r1, #1
   2901c:	ldrh	r3, [r2, r3]
   29020:	cmp	r3, #0
   29024:	bne	290d4 <flatcc_builder_table_add_offset@@Base+0xe8>
   29028:	ldr	r3, [r0, #12]
   2902c:	eor	r3, r3, r1
   29030:	ldr	r2, [pc, #204]	; 29104 <flatcc_builder_table_add_offset@@Base+0x118>
   29034:	mul	r3, r2, r3
   29038:	eor	r3, r3, #4
   2903c:	mul	r3, r2, r3
   29040:	str	r3, [r0, #12]
   29044:	uxth	r7, r1
   29048:	ldr	r6, [r0, #20]
   2904c:	add	r6, r6, #3
   29050:	bic	r6, r6, #3
   29054:	add	r1, r6, #4
   29058:	str	r1, [r0, #20]
   2905c:	ldr	r3, [r0, #24]
   29060:	cmp	r1, r3
   29064:	bhi	290e8 <flatcc_builder_table_add_offset@@Base+0xfc>
   29068:	uxth	r2, r6
   2906c:	uxth	r5, r5
   29070:	ldr	r3, [r4, #4]
   29074:	lsl	r5, r5, #1
   29078:	add	r1, r2, #4
   2907c:	strh	r1, [r3, r5]
   29080:	ldrh	r3, [r4, #8]
   29084:	cmp	r3, r7
   29088:	addls	r7, r7, #1
   2908c:	strhls	r7, [r4, #8]
   29090:	ldr	r3, [r4]
   29094:	add	r1, r3, #2
   29098:	str	r1, [r4]
   2909c:	strh	r2, [r3]
   290a0:	ldr	r0, [r4, #16]
   290a4:	add	r0, r0, r6
   290a8:	pop	{r4, r5, r6, r7, r8, pc}
   290ac:	ldr	r3, [pc, #84]	; 29108 <flatcc_builder_table_add_offset@@Base+0x11c>
   290b0:	ldr	r2, [pc, #84]	; 2910c <flatcc_builder_table_add_offset@@Base+0x120>
   290b4:	ldr	r1, [pc, #84]	; 29110 <flatcc_builder_table_add_offset@@Base+0x124>
   290b8:	ldr	r0, [pc, #84]	; 29114 <flatcc_builder_table_add_offset@@Base+0x128>
   290bc:	bl	14618 <__assert_fail@plt>
   290c0:	ldr	r3, [pc, #64]	; 29108 <flatcc_builder_table_add_offset@@Base+0x11c>
   290c4:	ldr	r2, [pc, #76]	; 29118 <flatcc_builder_table_add_offset@@Base+0x12c>
   290c8:	ldr	r1, [pc, #64]	; 29110 <flatcc_builder_table_add_offset@@Base+0x124>
   290cc:	ldr	r0, [pc, #72]	; 2911c <flatcc_builder_table_add_offset@@Base+0x130>
   290d0:	bl	14618 <__assert_fail@plt>
   290d4:	ldr	r3, [pc, #44]	; 29108 <flatcc_builder_table_add_offset@@Base+0x11c>
   290d8:	ldr	r2, [pc, #64]	; 29120 <flatcc_builder_table_add_offset@@Base+0x134>
   290dc:	ldr	r1, [pc, #44]	; 29110 <flatcc_builder_table_add_offset@@Base+0x124>
   290e0:	ldr	r0, [pc, #60]	; 29124 <flatcc_builder_table_add_offset@@Base+0x138>
   290e4:	bl	14618 <__assert_fail@plt>
   290e8:	ldr	r2, [pc, #56]	; 29128 <flatcc_builder_table_add_offset@@Base+0x13c>
   290ec:	bl	25644 <main@@Base+0x7f4>
   290f0:	cmp	r0, #0
   290f4:	beq	29068 <flatcc_builder_table_add_offset@@Base+0x7c>
   290f8:	mov	r0, #0
   290fc:	pop	{r4, r5, r6, r7, r8, pc}
   29100:	strdeq	r7, [r0], -ip
   29104:			; <UNDEFINED> instruction: 0x9e3779b1
   29108:	andeq	r0, r4, r0, ror #16
   2910c:	andeq	r0, r0, r3, lsl r7
   29110:	andeq	r0, r4, r4, lsl #18
   29114:	andeq	r0, r4, r8, asr #23
   29118:	andeq	r0, r0, r4, lsl r7
   2911c:	andeq	r0, r4, r0, ror #24
   29120:	andeq	r0, r0, fp, lsl r7
   29124:	andeq	r0, r4, r8, asr r9
   29128:	strdeq	pc, [r0], -ip

0002912c <flatcc_builder_table_add_union@@Base>:
   2912c:	push	{r4, r5, r6, r7, lr}
   29130:	sub	sp, sp, #12
   29134:	mov	r5, r1
   29138:	add	r1, sp, #8
   2913c:	stmdb	r1, {r2, r3}
   29140:	ldr	r3, [r0, #32]
   29144:	ldrh	r3, [r3, #14]
   29148:	cmp	r3, #3
   2914c:	bne	291bc <flatcc_builder_table_add_union@@Base+0x90>
   29150:	mov	r4, r0
   29154:	ldrb	r7, [sp]
   29158:	ldr	r6, [sp, #4]
   2915c:	adds	r3, r6, #0
   29160:	movne	r3, #1
   29164:	cmp	r7, #0
   29168:	movne	r3, #0
   2916c:	cmp	r3, #0
   29170:	bne	291d0 <flatcc_builder_table_add_union@@Base+0xa4>
   29174:	cmp	r6, #0
   29178:	beq	29190 <flatcc_builder_table_add_union@@Base+0x64>
   2917c:	mov	r1, r5
   29180:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   29184:	cmp	r0, #0
   29188:	strne	r6, [r0]
   2918c:	beq	291e4 <flatcc_builder_table_add_union@@Base+0xb8>
   29190:	mov	r3, #1
   29194:	mov	r2, r3
   29198:	sub	r1, r5, #1
   2919c:	mov	r0, r4
   291a0:	bl	28e20 <flatcc_builder_table_add@@Base>
   291a4:	cmp	r0, #0
   291a8:	beq	291f8 <flatcc_builder_table_add_union@@Base+0xcc>
   291ac:	strb	r7, [r0]
   291b0:	mov	r0, #0
   291b4:	add	sp, sp, #12
   291b8:	pop	{r4, r5, r6, r7, pc}
   291bc:	ldr	r3, [pc, #72]	; 2920c <flatcc_builder_table_add_union@@Base+0xe0>
   291c0:	ldr	r2, [pc, #72]	; 29210 <flatcc_builder_table_add_union@@Base+0xe4>
   291c4:	ldr	r1, [pc, #72]	; 29214 <flatcc_builder_table_add_union@@Base+0xe8>
   291c8:	ldr	r0, [pc, #72]	; 29218 <flatcc_builder_table_add_union@@Base+0xec>
   291cc:	bl	14618 <__assert_fail@plt>
   291d0:	ldr	r3, [pc, #52]	; 2920c <flatcc_builder_table_add_union@@Base+0xe0>
   291d4:	ldr	r2, [pc, #64]	; 2921c <flatcc_builder_table_add_union@@Base+0xf0>
   291d8:	ldr	r1, [pc, #52]	; 29214 <flatcc_builder_table_add_union@@Base+0xe8>
   291dc:	ldr	r0, [pc, #60]	; 29220 <flatcc_builder_table_add_union@@Base+0xf4>
   291e0:	bl	14618 <__assert_fail@plt>
   291e4:	ldr	r3, [pc, #32]	; 2920c <flatcc_builder_table_add_union@@Base+0xe0>
   291e8:	ldr	r2, [pc, #52]	; 29224 <flatcc_builder_table_add_union@@Base+0xf8>
   291ec:	ldr	r1, [pc, #32]	; 29214 <flatcc_builder_table_add_union@@Base+0xe8>
   291f0:	ldr	r0, [pc, #48]	; 29228 <flatcc_builder_table_add_union@@Base+0xfc>
   291f4:	bl	14618 <__assert_fail@plt>
   291f8:	ldr	r3, [pc, #12]	; 2920c <flatcc_builder_table_add_union@@Base+0xe0>
   291fc:	ldr	r2, [pc, #40]	; 2922c <flatcc_builder_table_add_union@@Base+0x100>
   29200:	ldr	r1, [pc, #12]	; 29214 <flatcc_builder_table_add_union@@Base+0xe8>
   29204:	ldr	r0, [pc, #36]	; 29230 <flatcc_builder_table_add_union@@Base+0x104>
   29208:	bl	14618 <__assert_fail@plt>
   2920c:	andeq	r0, r4, r0, lsl #17
   29210:	andeq	r0, r0, lr, ror #11
   29214:	andeq	r0, r4, r4, lsl #18
   29218:	andeq	r0, r4, r8, asr #23
   2921c:	andeq	r0, r0, pc, ror #11
   29220:	andeq	r0, r4, r4, lsr #25
   29224:	strdeq	r0, [r0], -r2
   29228:	andeq	r0, r4, r8, asr #25
   2922c:	strdeq	r0, [r0], -r6
   29230:	ldrdeq	r0, [r4], -r4

00029234 <flatcc_builder_table_add_union_vector@@Base>:
   29234:	push	{r4, r5, r6, r7, lr}
   29238:	sub	sp, sp, #12
   2923c:	mov	r7, r1
   29240:	add	r1, sp, #8
   29244:	stmdb	r1, {r2, r3}
   29248:	ldr	r4, [sp]
   2924c:	ldr	r6, [sp, #4]
   29250:	ldr	r3, [r0, #32]
   29254:	ldrh	r3, [r3, #14]
   29258:	cmp	r3, #3
   2925c:	bne	29298 <flatcc_builder_table_add_union_vector@@Base+0x64>
   29260:	mov	r5, r0
   29264:	clz	r3, r6
   29268:	lsr	r3, r3, #5
   2926c:	clz	r2, r4
   29270:	lsr	r2, r2, #5
   29274:	cmp	r2, r3
   29278:	beq	292c0 <flatcc_builder_table_add_union_vector@@Base+0x8c>
   2927c:	adds	r4, r4, #0
   29280:	movne	r4, #1
   29284:	cmp	r4, r3
   29288:	mvnne	r0, #0
   2928c:	beq	292ac <flatcc_builder_table_add_union_vector@@Base+0x78>
   29290:	add	sp, sp, #12
   29294:	pop	{r4, r5, r6, r7, pc}
   29298:	ldr	r3, [pc, #136]	; 29328 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   2929c:	mov	r2, #1536	; 0x600
   292a0:	ldr	r1, [pc, #132]	; 2932c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   292a4:	ldr	r0, [pc, #132]	; 29330 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   292a8:	bl	14618 <__assert_fail@plt>
   292ac:	ldr	r3, [pc, #116]	; 29328 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   292b0:	ldr	r2, [pc, #124]	; 29334 <flatcc_builder_table_add_union_vector@@Base+0x100>
   292b4:	ldr	r1, [pc, #112]	; 2932c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   292b8:	ldr	r0, [pc, #120]	; 29338 <flatcc_builder_table_add_union_vector@@Base+0x104>
   292bc:	bl	14618 <__assert_fail@plt>
   292c0:	cmp	r4, #0
   292c4:	moveq	r0, #0
   292c8:	beq	29290 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   292cc:	sub	r1, r7, #1
   292d0:	mov	r0, r5
   292d4:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   292d8:	cmp	r0, #0
   292dc:	beq	29314 <flatcc_builder_table_add_union_vector@@Base+0xe0>
   292e0:	str	r4, [r0]
   292e4:	mov	r1, r7
   292e8:	mov	r0, r5
   292ec:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   292f0:	cmp	r0, #0
   292f4:	strne	r6, [r0]
   292f8:	movne	r0, #0
   292fc:	bne	29290 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   29300:	ldr	r3, [pc, #32]	; 29328 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   29304:	ldr	r2, [pc, #48]	; 2933c <flatcc_builder_table_add_union_vector@@Base+0x108>
   29308:	ldr	r1, [pc, #28]	; 2932c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   2930c:	ldr	r0, [pc, #44]	; 29340 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   29310:	bl	14618 <__assert_fail@plt>
   29314:	ldr	r3, [pc, #12]	; 29328 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   29318:	ldr	r2, [pc, #36]	; 29344 <flatcc_builder_table_add_union_vector@@Base+0x110>
   2931c:	ldr	r1, [pc, #8]	; 2932c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   29320:	ldr	r0, [pc, #24]	; 29340 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   29324:	bl	14618 <__assert_fail@plt>
   29328:	andeq	r0, r4, r0, lsr #17
   2932c:	andeq	r0, r4, r4, lsl #18
   29330:	andeq	r0, r4, r8, asr #23
   29334:	andeq	r0, r0, r1, lsl #12
   29338:	andeq	r0, r4, r0, ror #25
   2933c:	andeq	r0, r0, r8, lsl #12
   29340:	andeq	r0, r4, r8, asr #25
   29344:	andeq	r0, r0, r4, lsl #12

00029348 <flatcc_builder_push_buffer_alignment@@Base>:
   29348:	mov	r3, r0
   2934c:	ldrh	r0, [r0, #128]	; 0x80
   29350:	mov	r2, #4
   29354:	strh	r2, [r3, #128]	; 0x80
   29358:	bx	lr

0002935c <flatcc_builder_pop_buffer_alignment@@Base>:
   2935c:	ldrh	r3, [r0, #128]	; 0x80
   29360:	cmp	r3, r1
   29364:	strhcc	r1, [r0, #128]	; 0x80
   29368:	bx	lr

0002936c <flatcc_builder_get_buffer_alignment@@Base>:
   2936c:	ldrh	r0, [r0, #128]	; 0x80
   29370:	bx	lr

00029374 <flatcc_builder_set_vtable_clustering@@Base>:
   29374:	clz	r1, r1
   29378:	lsr	r1, r1, #5
   2937c:	str	r1, [r0, #180]	; 0xb4
   29380:	bx	lr

00029384 <flatcc_builder_set_block_align@@Base>:
   29384:	strh	r1, [r0, #132]	; 0x84
   29388:	bx	lr

0002938c <flatcc_builder_get_level@@Base>:
   2938c:	ldr	r0, [r0, #156]	; 0x9c
   29390:	bx	lr

00029394 <flatcc_builder_set_max_level@@Base>:
   29394:	str	r1, [r0, #176]	; 0xb0
   29398:	ldr	r3, [r0, #160]	; 0xa0
   2939c:	cmp	r1, r3
   293a0:	strgt	r1, [r0, #160]	; 0xa0
   293a4:	bx	lr

000293a8 <flatcc_builder_get_buffer_size@@Base>:
   293a8:	ldr	r2, [r0, #140]	; 0x8c
   293ac:	ldr	r0, [r0, #136]	; 0x88
   293b0:	sub	r0, r2, r0
   293b4:	bx	lr

000293b8 <flatcc_builder_get_buffer_start@@Base>:
   293b8:	ldr	r0, [r0, #136]	; 0x88
   293bc:	bx	lr

000293c0 <flatcc_builder_get_buffer_end@@Base>:
   293c0:	ldr	r0, [r0, #140]	; 0x8c
   293c4:	bx	lr

000293c8 <flatcc_builder_set_vtable_cache_limit@@Base>:
   293c8:	str	r1, [r0, #172]	; 0xac
   293cc:	bx	lr

000293d0 <flatcc_builder_set_identifier@@Base>:
   293d0:	ldr	r3, [pc, #16]	; 293e8 <flatcc_builder_set_identifier@@Base+0x18>
   293d4:	cmp	r1, #0
   293d8:	moveq	r1, r3
   293dc:	ldr	r3, [r1]
   293e0:	str	r3, [r0, #168]	; 0xa8
   293e4:	bx	lr
   293e8:			; <UNDEFINED> instruction: 0x000401b4

000293ec <flatcc_builder_get_type@@Base>:
   293ec:	ldr	r3, [r0, #32]
   293f0:	cmp	r3, #0
   293f4:	ldrhne	r0, [r3, #14]
   293f8:	moveq	r0, #0
   293fc:	bx	lr

00029400 <flatcc_builder_get_type_at@@Base>:
   29400:	cmp	r1, #0
   29404:	ble	2942c <flatcc_builder_get_type_at@@Base+0x2c>
   29408:	ldr	r3, [r0, #156]	; 0x9c
   2940c:	cmp	r1, r3
   29410:	bgt	29434 <flatcc_builder_get_type_at@@Base+0x34>
   29414:	sub	r1, r1, r3
   29418:	ldr	r3, [r0, #32]
   2941c:	add	r1, r1, r1, lsl #3
   29420:	add	r1, r3, r1, lsl #2
   29424:	ldrh	r0, [r1, #14]
   29428:	bx	lr
   2942c:	mov	r0, #0
   29430:	bx	lr
   29434:	mov	r0, #0
   29438:	bx	lr

0002943c <flatcc_builder_get_direct_buffer@@Base>:
   2943c:	ldr	r3, [r0, #184]	; 0xb8
   29440:	cmp	r3, #0
   29444:	beq	29480 <flatcc_builder_get_direct_buffer@@Base+0x44>
   29448:	ldr	r2, [r0, #188]	; 0xbc
   2944c:	ldr	r3, [r0, #192]	; 0xc0
   29450:	cmp	r2, r3
   29454:	beq	2946c <flatcc_builder_get_direct_buffer@@Base+0x30>
   29458:	cmp	r1, #0
   2945c:	beq	29494 <flatcc_builder_get_direct_buffer@@Base+0x58>
   29460:	mov	r0, #0
   29464:	str	r0, [r1]
   29468:	bx	lr
   2946c:	cmp	r1, #0
   29470:	ldrne	r3, [r0, #212]	; 0xd4
   29474:	strne	r3, [r1]
   29478:	ldr	r0, [r0, #196]	; 0xc4
   2947c:	bx	lr
   29480:	cmp	r1, #0
   29484:	beq	2949c <flatcc_builder_get_direct_buffer@@Base+0x60>
   29488:	mov	r0, #0
   2948c:	str	r0, [r1]
   29490:	bx	lr
   29494:	mov	r0, #0
   29498:	bx	lr
   2949c:	mov	r0, #0
   294a0:	bx	lr

000294a4 <flatcc_builder_copy_buffer@@Base>:
   294a4:	ldr	r3, [r0, #184]	; 0xb8
   294a8:	cmp	r3, #0
   294ac:	beq	294d8 <flatcc_builder_copy_buffer@@Base+0x34>
   294b0:	push	{r4, lr}
   294b4:	add	r0, r0, #188	; 0xbc
   294b8:	bl	29bd4 <flatcc_emitter_copy_buffer@@Base>
   294bc:	cmp	r0, #0
   294c0:	popne	{r4, pc}
   294c4:	ldr	r3, [pc, #20]	; 294e0 <flatcc_builder_copy_buffer@@Base+0x3c>
   294c8:	ldr	r2, [pc, #20]	; 294e4 <flatcc_builder_copy_buffer@@Base+0x40>
   294cc:	ldr	r1, [pc, #20]	; 294e8 <flatcc_builder_copy_buffer@@Base+0x44>
   294d0:	ldr	r0, [pc, #20]	; 294ec <flatcc_builder_copy_buffer@@Base+0x48>
   294d4:	bl	14618 <__assert_fail@plt>
   294d8:	mov	r0, #0
   294dc:	bx	lr
   294e0:	andeq	r0, r4, r8, asr #17
   294e4:	andeq	r0, r0, r6, lsl #15
   294e8:	andeq	r0, r4, r4, lsl #18
   294ec:	andeq	r0, r4, r8, lsl #26

000294f0 <flatcc_builder_finalize_buffer@@Base>:
   294f0:	push	{r4, r5, r6, lr}
   294f4:	mov	r5, r0
   294f8:	ldr	r4, [r0, #140]	; 0x8c
   294fc:	ldr	r3, [r0, #136]	; 0x88
   29500:	sub	r4, r4, r3
   29504:	cmp	r1, #0
   29508:	strne	r4, [r1]
   2950c:	mov	r0, r4
   29510:	bl	1457c <malloc@plt>
   29514:	subs	r6, r0, #0
   29518:	beq	2953c <flatcc_builder_finalize_buffer@@Base+0x4c>
   2951c:	mov	r2, r4
   29520:	mov	r1, r6
   29524:	mov	r0, r5
   29528:	bl	294a4 <flatcc_builder_copy_buffer@@Base>
   2952c:	cmp	r0, #0
   29530:	beq	29550 <flatcc_builder_finalize_buffer@@Base+0x60>
   29534:	mov	r0, r6
   29538:	pop	{r4, r5, r6, pc}
   2953c:	ldr	r3, [pc, #32]	; 29564 <flatcc_builder_finalize_buffer@@Base+0x74>
   29540:	ldr	r2, [pc, #32]	; 29568 <flatcc_builder_finalize_buffer@@Base+0x78>
   29544:	ldr	r1, [pc, #32]	; 2956c <flatcc_builder_finalize_buffer@@Base+0x7c>
   29548:	ldr	r0, [pc, #32]	; 29570 <flatcc_builder_finalize_buffer@@Base+0x80>
   2954c:	bl	14618 <__assert_fail@plt>
   29550:	ldr	r3, [pc, #12]	; 29564 <flatcc_builder_finalize_buffer@@Base+0x74>
   29554:	ldr	r2, [pc, #24]	; 29574 <flatcc_builder_finalize_buffer@@Base+0x84>
   29558:	ldr	r1, [pc, #12]	; 2956c <flatcc_builder_finalize_buffer@@Base+0x7c>
   2955c:	ldr	r0, [pc, #12]	; 29570 <flatcc_builder_finalize_buffer@@Base+0x80>
   29560:	bl	14618 <__assert_fail@plt>
   29564:	andeq	r0, r4, r4, ror #17
   29568:	muleq	r0, r8, r7
   2956c:	andeq	r0, r4, r4, lsl #18
   29570:	andeq	r0, r4, r8, asr r9
   29574:	muleq	r0, ip, r7

00029578 <flatcc_builder_finalize_aligned_buffer@@Base>:
   29578:	push	{r4, r5, r6, r7, lr}
   2957c:	sub	sp, sp, #12
   29580:	mov	r7, r0
   29584:	ldr	r4, [r0, #140]	; 0x8c
   29588:	ldr	r3, [r0, #136]	; 0x88
   2958c:	sub	r3, r4, r3
   29590:	subs	r6, r1, #0
   29594:	strne	r3, [r6]
   29598:	ldrh	r1, [r0, #128]	; 0x80
   2959c:	sub	r4, r1, #1
   295a0:	add	r4, r4, r3
   295a4:	rsb	r3, r1, #0
   295a8:	and	r4, r4, r3
   295ac:	add	r0, sp, #8
   295b0:	mov	r3, #0
   295b4:	str	r3, [r0, #-4]!
   295b8:	mov	r2, r4
   295bc:	cmp	r1, #4
   295c0:	movcc	r1, #4
   295c4:	bl	145b8 <posix_memalign@plt>
   295c8:	cmp	r0, #0
   295cc:	beq	295f0 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   295d0:	ldr	r0, [sp, #4]
   295d4:	cmp	r0, #0
   295d8:	beq	295e0 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   295dc:	bl	14540 <free@plt>
   295e0:	cmp	r6, #0
   295e4:	mov	r5, #0
   295e8:	strne	r5, [r6]
   295ec:	b	29614 <flatcc_builder_finalize_aligned_buffer@@Base+0x9c>
   295f0:	ldr	r5, [sp, #4]
   295f4:	cmp	r5, #0
   295f8:	beq	295e0 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   295fc:	mov	r2, r4
   29600:	mov	r1, r5
   29604:	mov	r0, r7
   29608:	bl	294a4 <flatcc_builder_copy_buffer@@Base>
   2960c:	cmp	r0, #0
   29610:	beq	29620 <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   29614:	mov	r0, r5
   29618:	add	sp, sp, #12
   2961c:	pop	{r4, r5, r6, r7, pc}
   29620:	mov	r0, r5
   29624:	bl	14540 <free@plt>
   29628:	b	295e0 <flatcc_builder_finalize_aligned_buffer@@Base+0x68>

0002962c <flatcc_builder_aligned_alloc@@Base>:
   2962c:	push	{lr}		; (str lr, [sp, #-4]!)
   29630:	sub	sp, sp, #12
   29634:	add	r3, sp, #8
   29638:	mov	r2, #0
   2963c:	str	r2, [r3, #-4]!
   29640:	mov	r2, r1
   29644:	cmp	r0, #4
   29648:	movcs	r1, r0
   2964c:	movcc	r1, #4
   29650:	mov	r0, r3
   29654:	bl	145b8 <posix_memalign@plt>
   29658:	cmp	r0, #0
   2965c:	beq	29678 <flatcc_builder_aligned_alloc@@Base+0x4c>
   29660:	ldr	r0, [sp, #4]
   29664:	cmp	r0, #0
   29668:	beq	29678 <flatcc_builder_aligned_alloc@@Base+0x4c>
   2966c:	bl	14540 <free@plt>
   29670:	mov	r3, #0
   29674:	str	r3, [sp, #4]
   29678:	ldr	r0, [sp, #4]
   2967c:	add	sp, sp, #12
   29680:	pop	{pc}		; (ldr pc, [sp], #4)

00029684 <flatcc_builder_aligned_free@@Base>:
   29684:	push	{r4, lr}
   29688:	bl	14540 <free@plt>
   2968c:	pop	{r4, pc}

00029690 <flatcc_builder_get_emit_context@@Base>:
   29690:	ldr	r0, [r0, #36]	; 0x24
   29694:	bx	lr

00029698 <flatcc_emitter_recycle_page@@Base>:
   29698:	ldr	r3, [r0]
   2969c:	cmp	r3, r1
   296a0:	beq	296f0 <flatcc_emitter_recycle_page@@Base+0x58>
   296a4:	ldr	r3, [r0, #4]
   296a8:	cmp	r1, r3
   296ac:	beq	296f8 <flatcc_emitter_recycle_page@@Base+0x60>
   296b0:	ldr	r3, [r1, #2944]	; 0xb80
   296b4:	ldr	r2, [r1, #2948]	; 0xb84
   296b8:	str	r2, [r3, #2948]	; 0xb84
   296bc:	ldr	r3, [r1, #2948]	; 0xb84
   296c0:	ldr	r2, [r1, #2944]	; 0xb80
   296c4:	str	r2, [r3, #2944]	; 0xb80
   296c8:	ldr	r3, [r0]
   296cc:	ldr	r3, [r3, #2948]	; 0xb84
   296d0:	str	r3, [r1, #2948]	; 0xb84
   296d4:	ldr	r2, [r0]
   296d8:	str	r2, [r1, #2944]	; 0xb80
   296dc:	str	r1, [r3, #2944]	; 0xb80
   296e0:	ldr	r3, [r1, #2944]	; 0xb80
   296e4:	str	r1, [r3, #2948]	; 0xb84
   296e8:	mov	r0, #0
   296ec:	bx	lr
   296f0:	mvn	r0, #0
   296f4:	bx	lr
   296f8:	mvn	r0, #0
   296fc:	bx	lr

00029700 <flatcc_emitter_reset@@Base>:
   29700:	ldr	r3, [r0]
   29704:	cmp	r3, #0
   29708:	bxeq	lr
   2970c:	str	r3, [r0, #4]
   29710:	add	r2, r3, #1472	; 0x5c0
   29714:	str	r2, [r0, #8]
   29718:	str	r2, [r0, #16]
   2971c:	mov	r2, #1472	; 0x5c0
   29720:	str	r2, [r0, #12]
   29724:	str	r2, [r0, #20]
   29728:	sub	r2, r2, #2944	; 0xb80
   2972c:	str	r2, [r3, #2952]	; 0xb88
   29730:	ldr	r3, [r0, #32]
   29734:	cmp	r3, #0
   29738:	ldreq	r3, [r0, #24]
   2973c:	streq	r3, [r0, #32]
   29740:	ldr	r3, [r0, #32]
   29744:	add	r2, r3, r3, lsl #1
   29748:	ldr	r3, [r0, #24]
   2974c:	lsr	r3, r3, #2
   29750:	add	r3, r3, r2, lsr #2
   29754:	str	r3, [r0, #32]
   29758:	mov	r2, #0
   2975c:	str	r2, [r0, #24]
   29760:	ldr	r2, [r0, #28]
   29764:	cmp	r2, r3, lsl #1
   29768:	bxls	lr
   2976c:	push	{r4, lr}
   29770:	mov	r4, r0
   29774:	ldr	r3, [r0, #4]
   29778:	ldr	r0, [r3, #2944]	; 0xb80
   2977c:	ldr	r2, [r4]
   29780:	cmp	r0, r2
   29784:	popeq	{r4, pc}
   29788:	ldr	r2, [r0, #2944]	; 0xb80
   2978c:	str	r2, [r3, #2944]	; 0xb80
   29790:	ldr	r3, [r0, #2944]	; 0xb80
   29794:	ldr	r2, [r4, #4]
   29798:	str	r2, [r3, #2948]	; 0xb84
   2979c:	bl	14540 <free@plt>
   297a0:	ldr	r3, [r4, #28]
   297a4:	sub	r3, r3, #2944	; 0xb80
   297a8:	str	r3, [r4, #28]
   297ac:	ldr	r2, [r4, #32]
   297b0:	cmp	r3, r2, lsl #1
   297b4:	popls	{r4, pc}
   297b8:	ldr	r3, [r4, #4]
   297bc:	ldr	r0, [r3, #2944]	; 0xb80
   297c0:	ldr	r2, [r4]
   297c4:	cmp	r0, r2
   297c8:	bne	29788 <flatcc_emitter_reset@@Base+0x88>
   297cc:	pop	{r4, pc}

000297d0 <flatcc_emitter_clear@@Base>:
   297d0:	ldr	r3, [r0]
   297d4:	cmp	r3, #0
   297d8:	bxeq	lr
   297dc:	push	{r4, r5, r6, lr}
   297e0:	mov	r5, r0
   297e4:	ldr	r2, [r3, #2948]	; 0xb84
   297e8:	mov	r1, #0
   297ec:	str	r1, [r2, #2944]	; 0xb80
   297f0:	ldr	r4, [r3, #2944]	; 0xb80
   297f4:	cmp	r4, r1
   297f8:	bne	29808 <flatcc_emitter_clear@@Base+0x38>
   297fc:	mov	r4, r3
   29800:	b	2981c <flatcc_emitter_clear@@Base+0x4c>
   29804:	mov	r4, r3
   29808:	ldr	r0, [r4, #2948]	; 0xb84
   2980c:	bl	14540 <free@plt>
   29810:	ldr	r3, [r4, #2944]	; 0xb80
   29814:	cmp	r3, #0
   29818:	bne	29804 <flatcc_emitter_clear@@Base+0x34>
   2981c:	mov	r0, r4
   29820:	bl	14540 <free@plt>
   29824:	mov	r2, #36	; 0x24
   29828:	mov	r1, #0
   2982c:	mov	r0, r5
   29830:	bl	145c4 <memset@plt>
   29834:	pop	{r4, r5, r6, pc}

00029838 <flatcc_emitter@@Base>:
   29838:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2983c:	mov	r4, r0
   29840:	ldr	ip, [sp, #40]	; 0x28
   29844:	ldr	r0, [r0, #24]
   29848:	add	r0, r0, ip
   2984c:	str	r0, [r4, #24]
   29850:	cmp	r3, #0
   29854:	blt	29880 <flatcc_emitter@@Base+0x48>
   29858:	ldr	r3, [r4, #20]
   2985c:	cmp	ip, r3
   29860:	bls	2996c <flatcc_emitter@@Base+0x134>
   29864:	cmp	r2, #0
   29868:	addne	r7, r1, #8
   2986c:	movne	sl, r2
   29870:	movne	fp, #2944	; 0xb80
   29874:	bne	29b20 <flatcc_emitter@@Base+0x2e8>
   29878:	mov	r0, r2
   2987c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29880:	ldr	r3, [r4, #12]
   29884:	cmp	ip, r3
   29888:	bhi	298ac <flatcc_emitter@@Base+0x74>
   2988c:	ldr	r5, [r4, #8]
   29890:	sub	r5, r5, ip
   29894:	str	r5, [r4, #8]
   29898:	sub	r3, r3, ip
   2989c:	str	r3, [r4, #12]
   298a0:	b	29980 <flatcc_emitter@@Base+0x148>
   298a4:	mov	r0, r2
   298a8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   298ac:	add	r7, r1, r2, lsl #3
   298b0:	mov	r8, r2
   298b4:	mov	fp, #1472	; 0x5c0
   298b8:	mov	sl, #2944	; 0xb80
   298bc:	b	29a9c <flatcc_emitter@@Base+0x264>
   298c0:	mov	r2, r5
   298c4:	rsb	r1, r2, #0
   298c8:	ldr	r0, [r4, #8]
   298cc:	add	r0, r0, r1
   298d0:	str	r0, [r4, #8]
   298d4:	sub	r3, r3, r2
   298d8:	str	r3, [r4, #12]
   298dc:	add	r6, r6, r1
   298e0:	sub	r5, r5, r2
   298e4:	mov	r1, r6
   298e8:	bl	1454c <memcpy@plt>
   298ec:	cmp	r5, #0
   298f0:	beq	29a94 <flatcc_emitter@@Base+0x25c>
   298f4:	ldr	r3, [r4, #12]
   298f8:	cmp	r3, r5
   298fc:	bcs	298c0 <flatcc_emitter@@Base+0x88>
   29900:	cmp	r3, #0
   29904:	movne	r2, r3
   29908:	bne	298c4 <flatcc_emitter@@Base+0x8c>
   2990c:	ldr	r9, [r4]
   29910:	cmp	r9, #0
   29914:	beq	29bb4 <flatcc_emitter@@Base+0x37c>
   29918:	ldr	r2, [r9, #2948]	; 0xb84
   2991c:	ldr	r3, [r4, #4]
   29920:	cmp	r2, r3
   29924:	beq	29b3c <flatcc_emitter@@Base+0x304>
   29928:	ldr	r3, [r9, #2952]	; 0xb88
   2992c:	sub	r3, r3, #2944	; 0xb80
   29930:	str	r3, [r2, #2952]	; 0xb88
   29934:	ldr	r3, [r4]
   29938:	ldr	r3, [r3, #2948]	; 0xb84
   2993c:	str	r3, [r4]
   29940:	ldr	r3, [r4]
   29944:	add	r2, r3, #2944	; 0xb80
   29948:	str	r2, [r4, #8]
   2994c:	str	sl, [r4, #12]
   29950:	ldr	r2, [r3, #2944]	; 0xb80
   29954:	ldr	r2, [r2, #2952]	; 0xb88
   29958:	sub	r2, r2, #2944	; 0xb80
   2995c:	str	r2, [r3, #2952]	; 0xb88
   29960:	b	298ec <flatcc_emitter@@Base+0xb4>
   29964:	mov	r0, #0
   29968:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2996c:	ldr	r5, [r4, #16]
   29970:	add	r0, r5, ip
   29974:	str	r0, [r4, #16]
   29978:	sub	r3, r3, ip
   2997c:	str	r3, [r4, #20]
   29980:	cmp	r2, #0
   29984:	addne	r4, r1, #8
   29988:	movne	r8, r2
   2998c:	beq	298a4 <flatcc_emitter@@Base+0x6c>
   29990:	ldr	r2, [r4, #-4]
   29994:	ldr	r1, [r4, #-8]
   29998:	mov	r0, r5
   2999c:	bl	1454c <memcpy@plt>
   299a0:	ldr	r3, [r4, #-4]
   299a4:	add	r5, r5, r3
   299a8:	add	r4, r4, #8
   299ac:	subs	r8, r8, #1
   299b0:	bne	29990 <flatcc_emitter@@Base+0x158>
   299b4:	mov	r0, #0
   299b8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   299bc:	ldr	r0, [pc, #520]	; 29bcc <flatcc_emitter@@Base+0x394>
   299c0:	bl	1457c <malloc@plt>
   299c4:	cmp	r0, #0
   299c8:	beq	29a84 <flatcc_emitter@@Base+0x24c>
   299cc:	ldr	r3, [r4, #28]
   299d0:	add	r3, r3, #2944	; 0xb80
   299d4:	str	r3, [r4, #28]
   299d8:	str	r5, [r0, #2948]	; 0xb84
   299dc:	str	r9, [r0, #2944]	; 0xb80
   299e0:	str	r0, [r9, #2948]	; 0xb84
   299e4:	ldr	r3, [r4, #4]
   299e8:	str	r0, [r3, #2944]	; 0xb80
   299ec:	str	r0, [r4, #4]
   299f0:	b	29a64 <flatcc_emitter@@Base+0x22c>
   299f4:	mov	r5, r6
   299f8:	mov	r2, r5
   299fc:	mov	r1, r8
   29a00:	ldr	r0, [r4, #16]
   29a04:	bl	1454c <memcpy@plt>
   29a08:	sub	r6, r6, r5
   29a0c:	add	r8, r8, r5
   29a10:	ldr	r3, [r4, #16]
   29a14:	add	r3, r3, r5
   29a18:	str	r3, [r4, #16]
   29a1c:	ldr	r3, [r4, #20]
   29a20:	sub	r5, r3, r5
   29a24:	str	r5, [r4, #20]
   29a28:	cmp	r6, #0
   29a2c:	beq	29b14 <flatcc_emitter@@Base+0x2dc>
   29a30:	ldr	r5, [r4, #20]
   29a34:	cmp	r5, r6
   29a38:	bcs	299f4 <flatcc_emitter@@Base+0x1bc>
   29a3c:	cmp	r5, #0
   29a40:	bne	299f8 <flatcc_emitter@@Base+0x1c0>
   29a44:	ldr	r5, [r4, #4]
   29a48:	cmp	r5, #0
   29a4c:	beq	29afc <flatcc_emitter@@Base+0x2c4>
   29a50:	ldr	r9, [r5, #2944]	; 0xb80
   29a54:	ldr	r3, [r4]
   29a58:	cmp	r9, r3
   29a5c:	strne	r9, [r4, #4]
   29a60:	beq	299bc <flatcc_emitter@@Base+0x184>
   29a64:	ldr	r3, [r4, #4]
   29a68:	str	r3, [r4, #16]
   29a6c:	str	fp, [r4, #20]
   29a70:	ldr	r2, [r3, #2948]	; 0xb84
   29a74:	ldr	r2, [r2, #2952]	; 0xb88
   29a78:	add	r2, r2, #2944	; 0xb80
   29a7c:	str	r2, [r3, #2952]	; 0xb88
   29a80:	b	29a28 <flatcc_emitter@@Base+0x1f0>
   29a84:	mvn	r0, #0
   29a88:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29a8c:	mvn	r0, #0
   29a90:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29a94:	sub	r7, r7, #8
   29a98:	sub	r8, r8, #1
   29a9c:	cmp	r8, #0
   29aa0:	beq	29964 <flatcc_emitter@@Base+0x12c>
   29aa4:	ldr	r5, [r7, #-4]
   29aa8:	ldr	r6, [r7, #-8]
   29aac:	add	r6, r6, r5
   29ab0:	cmp	r5, #0
   29ab4:	bne	298f4 <flatcc_emitter@@Base+0xbc>
   29ab8:	b	29a94 <flatcc_emitter@@Base+0x25c>
   29abc:	ldr	r3, [r4, #28]
   29ac0:	add	r3, r3, #2944	; 0xb80
   29ac4:	str	r3, [r4, #28]
   29ac8:	str	r0, [r4]
   29acc:	str	r0, [r4, #4]
   29ad0:	str	r0, [r0, #2944]	; 0xb80
   29ad4:	str	r0, [r0, #2948]	; 0xb84
   29ad8:	add	r3, r0, #1472	; 0x5c0
   29adc:	str	r3, [r4, #8]
   29ae0:	str	r3, [r4, #16]
   29ae4:	mov	r3, #1472	; 0x5c0
   29ae8:	str	r3, [r4, #12]
   29aec:	str	r3, [r4, #20]
   29af0:	sub	r3, r3, #2944	; 0xb80
   29af4:	str	r3, [r0, #2952]	; 0xb88
   29af8:	b	29a28 <flatcc_emitter@@Base+0x1f0>
   29afc:	ldr	r0, [pc, #200]	; 29bcc <flatcc_emitter@@Base+0x394>
   29b00:	bl	1457c <malloc@plt>
   29b04:	cmp	r0, #0
   29b08:	bne	29abc <flatcc_emitter@@Base+0x284>
   29b0c:	mvn	r0, #0
   29b10:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b14:	add	r7, r7, #8
   29b18:	subs	sl, sl, #1
   29b1c:	beq	29b34 <flatcc_emitter@@Base+0x2fc>
   29b20:	ldr	r8, [r7, #-8]
   29b24:	ldr	r6, [r7, #-4]
   29b28:	cmp	r6, #0
   29b2c:	bne	29a30 <flatcc_emitter@@Base+0x1f8>
   29b30:	b	29b14 <flatcc_emitter@@Base+0x2dc>
   29b34:	mov	r0, #0
   29b38:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b3c:	ldr	r0, [pc, #136]	; 29bcc <flatcc_emitter@@Base+0x394>
   29b40:	bl	1457c <malloc@plt>
   29b44:	cmp	r0, #0
   29b48:	beq	29a8c <flatcc_emitter@@Base+0x254>
   29b4c:	ldr	r3, [r4, #28]
   29b50:	add	r3, r3, #2944	; 0xb80
   29b54:	str	r3, [r4, #28]
   29b58:	ldr	r3, [r4, #4]
   29b5c:	str	r3, [r0, #2948]	; 0xb84
   29b60:	str	r9, [r0, #2944]	; 0xb80
   29b64:	str	r0, [r9, #2948]	; 0xb84
   29b68:	ldr	r3, [r4, #4]
   29b6c:	str	r0, [r3, #2944]	; 0xb80
   29b70:	str	r0, [r4]
   29b74:	b	29940 <flatcc_emitter@@Base+0x108>
   29b78:	ldr	r3, [r4, #28]
   29b7c:	add	r3, r3, #2944	; 0xb80
   29b80:	str	r3, [r4, #28]
   29b84:	str	r0, [r4]
   29b88:	str	r0, [r4, #4]
   29b8c:	str	r0, [r0, #2944]	; 0xb80
   29b90:	str	r0, [r0, #2948]	; 0xb84
   29b94:	add	r3, r0, #1472	; 0x5c0
   29b98:	str	r3, [r4, #8]
   29b9c:	str	r3, [r4, #16]
   29ba0:	str	fp, [r4, #12]
   29ba4:	str	fp, [r4, #20]
   29ba8:	ldr	r3, [pc, #32]	; 29bd0 <flatcc_emitter@@Base+0x398>
   29bac:	str	r3, [r0, #2952]	; 0xb88
   29bb0:	b	298ec <flatcc_emitter@@Base+0xb4>
   29bb4:	ldr	r0, [pc, #16]	; 29bcc <flatcc_emitter@@Base+0x394>
   29bb8:	bl	1457c <malloc@plt>
   29bbc:	cmp	r0, #0
   29bc0:	bne	29b78 <flatcc_emitter@@Base+0x340>
   29bc4:	mvn	r0, #0
   29bc8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29bcc:	andeq	r0, r0, ip, lsl #23
   29bd0:			; <UNDEFINED> instruction: 0xfffffa40

00029bd4 <flatcc_emitter_copy_buffer@@Base>:
   29bd4:	push	{r4, r5, r6, r7, r8, lr}
   29bd8:	mov	r5, r1
   29bdc:	ldr	r1, [r0, #24]
   29be0:	cmp	r1, r2
   29be4:	bhi	29c88 <flatcc_emitter_copy_buffer@@Base+0xb4>
   29be8:	ldr	r3, [r0]
   29bec:	cmp	r3, #0
   29bf0:	beq	29c90 <flatcc_emitter_copy_buffer@@Base+0xbc>
   29bf4:	mov	r6, r0
   29bf8:	ldr	r2, [r0, #4]
   29bfc:	cmp	r3, r2
   29c00:	beq	29c74 <flatcc_emitter_copy_buffer@@Base+0xa0>
   29c04:	ldr	r4, [r0, #12]
   29c08:	rsb	r4, r4, #2944	; 0xb80
   29c0c:	mov	r2, r4
   29c10:	ldr	r1, [r0, #8]
   29c14:	mov	r0, r5
   29c18:	bl	1454c <memcpy@plt>
   29c1c:	add	r5, r5, r4
   29c20:	ldr	r3, [r6]
   29c24:	ldr	r4, [r3, #2944]	; 0xb80
   29c28:	ldr	r1, [r6, #4]
   29c2c:	cmp	r4, r1
   29c30:	beq	29c5c <flatcc_emitter_copy_buffer@@Base+0x88>
   29c34:	mov	r7, #2944	; 0xb80
   29c38:	mov	r2, r7
   29c3c:	mov	r1, r4
   29c40:	mov	r0, r5
   29c44:	bl	1454c <memcpy@plt>
   29c48:	add	r5, r5, #2944	; 0xb80
   29c4c:	ldr	r4, [r4, #2944]	; 0xb80
   29c50:	ldr	r1, [r6, #4]
   29c54:	cmp	r1, r4
   29c58:	bne	29c38 <flatcc_emitter_copy_buffer@@Base+0x64>
   29c5c:	ldr	r2, [r6, #20]
   29c60:	rsb	r2, r2, #2944	; 0xb80
   29c64:	mov	r0, r5
   29c68:	bl	1454c <memcpy@plt>
   29c6c:	mov	r0, r5
   29c70:	pop	{r4, r5, r6, r7, r8, pc}
   29c74:	mov	r2, r1
   29c78:	ldr	r1, [r0, #8]
   29c7c:	mov	r0, r5
   29c80:	bl	1454c <memcpy@plt>
   29c84:	b	29c6c <flatcc_emitter_copy_buffer@@Base+0x98>
   29c88:	mov	r5, #0
   29c8c:	b	29c6c <flatcc_emitter_copy_buffer@@Base+0x98>
   29c90:	mov	r5, #0
   29c94:	b	29c6c <flatcc_emitter_copy_buffer@@Base+0x98>
   29c98:	add	r1, r1, #2
   29c9c:	lsl	r1, r1, #1
   29ca0:	uxth	r1, r1
   29ca4:	ldrh	ip, [r0, #22]
   29ca8:	cmp	ip, r1
   29cac:	bls	29cd8 <flatcc_emitter_copy_buffer@@Base+0x104>
   29cb0:	ldr	ip, [r0, #12]
   29cb4:	ldrh	r1, [ip, r1]
   29cb8:	cmp	r1, #0
   29cbc:	beq	29cd8 <flatcc_emitter_copy_buffer@@Base+0x104>
   29cc0:	add	r2, r1, #4
   29cc4:	ldrh	ip, [r0, #20]
   29cc8:	cmp	r2, ip
   29ccc:	bls	29cf0 <flatcc_emitter_copy_buffer@@Base+0x11c>
   29cd0:	mov	r0, #13
   29cd4:	bx	lr
   29cd8:	mov	r1, #0
   29cdc:	str	r1, [r3]
   29ce0:	cmp	r2, r1
   29ce4:	moveq	r0, r2
   29ce8:	movne	r0, #4
   29cec:	bx	lr
   29cf0:	ldr	r2, [r0, #16]
   29cf4:	add	r1, r1, r2
   29cf8:	tst	r1, #3
   29cfc:	beq	29d08 <flatcc_emitter_copy_buffer@@Base+0x134>
   29d00:	mov	r0, #12
   29d04:	bx	lr
   29d08:	str	r1, [r3]
   29d0c:	mov	r0, #0
   29d10:	bx	lr

00029d14 <flatcc_verify_error_string@@Base>:
   29d14:	cmp	r0, #36	; 0x24
   29d18:	ldrls	pc, [pc, r0, lsl #2]
   29d1c:	b	29ed4 <flatcc_verify_error_string@@Base+0x1c0>
   29d20:	ldrdeq	r9, [r2], -ip
   29d24:			; <UNDEFINED> instruction: 0x00029db4
   29d28:			; <UNDEFINED> instruction: 0x00029dbc
   29d2c:	andeq	r9, r2, r4, asr #27
   29d30:	andeq	r9, r2, ip, asr #27
   29d34:	ldrdeq	r9, [r2], -r4
   29d38:	ldrdeq	r9, [r2], -ip
   29d3c:	andeq	r9, r2, r4, ror #27
   29d40:	andeq	r9, r2, ip, ror #27
   29d44:	strdeq	r9, [r2], -r4
   29d48:	strdeq	r9, [r2], -ip
   29d4c:	andeq	r9, r2, r4, lsl #28
   29d50:	andeq	r9, r2, ip, lsl #28
   29d54:	andeq	r9, r2, r4, lsl lr
   29d58:	andeq	r9, r2, ip, lsl lr
   29d5c:	andeq	r9, r2, r4, lsr #28
   29d60:	andeq	r9, r2, ip, lsr #28
   29d64:	andeq	r9, r2, r4, lsr lr
   29d68:	andeq	r9, r2, ip, lsr lr
   29d6c:	andeq	r9, r2, r4, asr #28
   29d70:	andeq	r9, r2, ip, asr #28
   29d74:	andeq	r9, r2, r4, asr lr
   29d78:	andeq	r9, r2, ip, asr lr
   29d7c:	andeq	r9, r2, r4, ror #28
   29d80:	andeq	r9, r2, ip, ror #28
   29d84:	andeq	r9, r2, r4, ror lr
   29d88:	andeq	r9, r2, ip, ror lr
   29d8c:	andeq	r9, r2, r4, lsl #29
   29d90:	andeq	r9, r2, ip, lsl #29
   29d94:	muleq	r2, r4, lr
   29d98:	muleq	r2, ip, lr
   29d9c:	andeq	r9, r2, r4, lsr #29
   29da0:	andeq	r9, r2, ip, lsr #29
   29da4:			; <UNDEFINED> instruction: 0x00029eb4
   29da8:			; <UNDEFINED> instruction: 0x00029ebc
   29dac:	andeq	r9, r2, r4, asr #29
   29db0:	andeq	r9, r2, ip, asr #29
   29db4:	ldr	r0, [pc, #296]	; 29ee4 <flatcc_verify_error_string@@Base+0x1d0>
   29db8:	bx	lr
   29dbc:	ldr	r0, [pc, #292]	; 29ee8 <flatcc_verify_error_string@@Base+0x1d4>
   29dc0:	bx	lr
   29dc4:	ldr	r0, [pc, #288]	; 29eec <flatcc_verify_error_string@@Base+0x1d8>
   29dc8:	bx	lr
   29dcc:	ldr	r0, [pc, #284]	; 29ef0 <flatcc_verify_error_string@@Base+0x1dc>
   29dd0:	bx	lr
   29dd4:	ldr	r0, [pc, #280]	; 29ef4 <flatcc_verify_error_string@@Base+0x1e0>
   29dd8:	bx	lr
   29ddc:	ldr	r0, [pc, #276]	; 29ef8 <flatcc_verify_error_string@@Base+0x1e4>
   29de0:	bx	lr
   29de4:	ldr	r0, [pc, #272]	; 29efc <flatcc_verify_error_string@@Base+0x1e8>
   29de8:	bx	lr
   29dec:	ldr	r0, [pc, #268]	; 29f00 <flatcc_verify_error_string@@Base+0x1ec>
   29df0:	bx	lr
   29df4:	ldr	r0, [pc, #264]	; 29f04 <flatcc_verify_error_string@@Base+0x1f0>
   29df8:	bx	lr
   29dfc:	ldr	r0, [pc, #260]	; 29f08 <flatcc_verify_error_string@@Base+0x1f4>
   29e00:	bx	lr
   29e04:	ldr	r0, [pc, #256]	; 29f0c <flatcc_verify_error_string@@Base+0x1f8>
   29e08:	bx	lr
   29e0c:	ldr	r0, [pc, #252]	; 29f10 <flatcc_verify_error_string@@Base+0x1fc>
   29e10:	bx	lr
   29e14:	ldr	r0, [pc, #248]	; 29f14 <flatcc_verify_error_string@@Base+0x200>
   29e18:	bx	lr
   29e1c:	ldr	r0, [pc, #244]	; 29f18 <flatcc_verify_error_string@@Base+0x204>
   29e20:	bx	lr
   29e24:	ldr	r0, [pc, #240]	; 29f1c <flatcc_verify_error_string@@Base+0x208>
   29e28:	bx	lr
   29e2c:	ldr	r0, [pc, #236]	; 29f20 <flatcc_verify_error_string@@Base+0x20c>
   29e30:	bx	lr
   29e34:	ldr	r0, [pc, #232]	; 29f24 <flatcc_verify_error_string@@Base+0x210>
   29e38:	bx	lr
   29e3c:	ldr	r0, [pc, #228]	; 29f28 <flatcc_verify_error_string@@Base+0x214>
   29e40:	bx	lr
   29e44:	ldr	r0, [pc, #224]	; 29f2c <flatcc_verify_error_string@@Base+0x218>
   29e48:	bx	lr
   29e4c:	ldr	r0, [pc, #220]	; 29f30 <flatcc_verify_error_string@@Base+0x21c>
   29e50:	bx	lr
   29e54:	ldr	r0, [pc, #216]	; 29f34 <flatcc_verify_error_string@@Base+0x220>
   29e58:	bx	lr
   29e5c:	ldr	r0, [pc, #212]	; 29f38 <flatcc_verify_error_string@@Base+0x224>
   29e60:	bx	lr
   29e64:	ldr	r0, [pc, #208]	; 29f3c <flatcc_verify_error_string@@Base+0x228>
   29e68:	bx	lr
   29e6c:	ldr	r0, [pc, #204]	; 29f40 <flatcc_verify_error_string@@Base+0x22c>
   29e70:	bx	lr
   29e74:	ldr	r0, [pc, #200]	; 29f44 <flatcc_verify_error_string@@Base+0x230>
   29e78:	bx	lr
   29e7c:	ldr	r0, [pc, #196]	; 29f48 <flatcc_verify_error_string@@Base+0x234>
   29e80:	bx	lr
   29e84:	ldr	r0, [pc, #192]	; 29f4c <flatcc_verify_error_string@@Base+0x238>
   29e88:	bx	lr
   29e8c:	ldr	r0, [pc, #188]	; 29f50 <flatcc_verify_error_string@@Base+0x23c>
   29e90:	bx	lr
   29e94:	ldr	r0, [pc, #184]	; 29f54 <flatcc_verify_error_string@@Base+0x240>
   29e98:	bx	lr
   29e9c:	ldr	r0, [pc, #180]	; 29f58 <flatcc_verify_error_string@@Base+0x244>
   29ea0:	bx	lr
   29ea4:	ldr	r0, [pc, #176]	; 29f5c <flatcc_verify_error_string@@Base+0x248>
   29ea8:	bx	lr
   29eac:	ldr	r0, [pc, #172]	; 29f60 <flatcc_verify_error_string@@Base+0x24c>
   29eb0:	bx	lr
   29eb4:	ldr	r0, [pc, #168]	; 29f64 <flatcc_verify_error_string@@Base+0x250>
   29eb8:	bx	lr
   29ebc:	ldr	r0, [pc, #164]	; 29f68 <flatcc_verify_error_string@@Base+0x254>
   29ec0:	bx	lr
   29ec4:	ldr	r0, [pc, #160]	; 29f6c <flatcc_verify_error_string@@Base+0x258>
   29ec8:	bx	lr
   29ecc:	ldr	r0, [pc, #156]	; 29f70 <flatcc_verify_error_string@@Base+0x25c>
   29ed0:	bx	lr
   29ed4:	ldr	r0, [pc, #152]	; 29f74 <flatcc_verify_error_string@@Base+0x260>
   29ed8:	bx	lr
   29edc:	ldr	r0, [pc, #148]	; 29f78 <flatcc_verify_error_string@@Base+0x264>
   29ee0:	bx	lr
   29ee4:	andeq	r0, r4, r4, lsl sp
   29ee8:	andeq	r0, r4, ip, lsr #26
   29eec:	andeq	r0, r4, r0, asr #26
   29ef0:	andeq	r0, r4, ip, asr sp
   29ef4:	andeq	r0, r4, r4, ror sp
   29ef8:	muleq	r4, r8, sp
   29efc:			; <UNDEFINED> instruction: 0x00040db8
   29f00:	ldrdeq	r0, [r4], -r4
   29f04:	andeq	r0, r4, r8, ror #27
   29f08:	strdeq	r0, [r4], -ip
   29f0c:	andeq	r0, r4, r4, lsl lr
   29f10:	andeq	r0, r4, r8, lsr #28
   29f14:	andeq	r0, r4, r0, asr #28
   29f18:	andeq	r0, r4, ip, asr lr
   29f1c:	andeq	r0, r4, r8, ror lr
   29f20:	andeq	r0, r4, r0, lsr #29
   29f24:	andeq	r0, r4, r8, asr #29
   29f28:	strdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   29f2c:	andeq	r0, r4, r4, lsl #30
   29f30:	andeq	r0, r4, ip, lsr #30
   29f34:	andeq	r0, r4, r4, asr #30
   29f38:	andeq	r0, r4, r0, ror pc
   29f3c:	andeq	r0, r4, r4, lsr #31
   29f40:	ldrdeq	r0, [r4], -r0	; <UNPREDICTABLE>
   29f44:	strdeq	r0, [r4], -ip
   29f48:	andeq	r1, r4, ip, lsr #32
   29f4c:	andeq	r1, r4, r0, asr #32
   29f50:	andeq	r1, r4, ip, asr r0
   29f54:	andeq	r1, r4, r4, ror r0
   29f58:	muleq	r4, ip, r0
   29f5c:	andeq	r1, r4, r4, asr #1
   29f60:	ldrdeq	r1, [r4], -ip
   29f64:	andeq	r1, r4, r4, lsl #2
   29f68:	andeq	r1, r4, ip, lsr #2
   29f6c:	andeq	r1, r4, r0, ror #2
   29f70:	andeq	r1, r4, r8, lsl #3
   29f74:	muleq	r4, r8, r1
   29f78:	andeq	r0, r4, r0, lsl sp

00029f7c <flatcc_verify_field@@Base>:
   29f7c:	add	r1, r1, #2
   29f80:	lsl	r1, r1, #1
   29f84:	uxth	r1, r1
   29f88:	ldrh	ip, [r0, #22]
   29f8c:	cmp	ip, r1
   29f90:	bls	29fe4 <flatcc_verify_field@@Base+0x68>
   29f94:	ldr	ip, [r0, #12]
   29f98:	ldrh	r1, [ip, r1]
   29f9c:	cmp	r1, #0
   29fa0:	beq	29fec <flatcc_verify_field@@Base+0x70>
   29fa4:	add	r2, r2, r1
   29fa8:	ldrh	ip, [r0, #20]
   29fac:	cmp	r2, ip
   29fb0:	bls	29fbc <flatcc_verify_field@@Base+0x40>
   29fb4:	mov	r0, #13
   29fb8:	bx	lr
   29fbc:	ldr	r2, [r0]
   29fc0:	ldr	r0, [r0, #16]
   29fc4:	add	r0, r2, r0
   29fc8:	add	r0, r0, r1
   29fcc:	sub	r3, r3, #1
   29fd0:	and	r0, r0, r3
   29fd4:	cmp	r0, #0
   29fd8:	movne	r0, #12
   29fdc:	moveq	r0, #0
   29fe0:	bx	lr
   29fe4:	mov	r0, #0
   29fe8:	bx	lr
   29fec:	mov	r0, #0
   29ff0:	bx	lr

00029ff4 <flatcc_verify_string_field@@Base>:
   29ff4:	push	{r4, lr}
   29ff8:	sub	sp, sp, #8
   29ffc:	mov	r4, r0
   2a000:	add	r3, sp, #4
   2a004:	bl	29c98 <flatcc_emitter_copy_buffer@@Base+0xc4>
   2a008:	cmp	r0, #0
   2a00c:	bne	2a06c <flatcc_verify_string_field@@Base+0x78>
   2a010:	ldr	r3, [sp, #4]
   2a014:	cmp	r3, #0
   2a018:	beq	2a06c <flatcc_verify_string_field@@Base+0x78>
   2a01c:	ldr	r1, [r4]
   2a020:	ldr	r2, [r1, r3]
   2a024:	add	r2, r3, r2
   2a028:	cmp	r3, r2
   2a02c:	movcs	r0, #17
   2a030:	bcs	2a06c <flatcc_verify_string_field@@Base+0x78>
   2a034:	ldr	r3, [r4, #4]
   2a038:	add	ip, r2, #4
   2a03c:	cmp	r3, ip
   2a040:	movcc	r0, #17
   2a044:	bcc	2a06c <flatcc_verify_string_field@@Base+0x78>
   2a048:	tst	r2, #3
   2a04c:	movne	r0, #17
   2a050:	bne	2a06c <flatcc_verify_string_field@@Base+0x78>
   2a054:	ldr	r2, [r1, r2]
   2a058:	sub	r3, r3, ip
   2a05c:	add	lr, r2, #1
   2a060:	cmp	r3, lr
   2a064:	movcc	r0, #8
   2a068:	bcs	2a074 <flatcc_verify_string_field@@Base+0x80>
   2a06c:	add	sp, sp, #8
   2a070:	pop	{r4, pc}
   2a074:	add	r1, r1, ip
   2a078:	ldrb	r3, [r1, r2]
   2a07c:	cmp	r3, #0
   2a080:	movne	r0, #7
   2a084:	b	2a06c <flatcc_verify_string_field@@Base+0x78>

0002a088 <flatcc_verify_vector_field@@Base>:
   2a088:	push	{r4, r5, r6, lr}
   2a08c:	sub	sp, sp, #8
   2a090:	mov	r4, r0
   2a094:	mov	r5, r3
   2a098:	ldrh	r6, [sp, #24]
   2a09c:	add	r3, sp, #4
   2a0a0:	bl	29c98 <flatcc_emitter_copy_buffer@@Base+0xc4>
   2a0a4:	cmp	r0, #0
   2a0a8:	bne	2a118 <flatcc_verify_vector_field@@Base+0x90>
   2a0ac:	ldr	r3, [sp, #4]
   2a0b0:	cmp	r3, #0
   2a0b4:	beq	2a118 <flatcc_verify_vector_field@@Base+0x90>
   2a0b8:	ldr	r1, [r4]
   2a0bc:	ldr	r2, [r1, r3]
   2a0c0:	add	r2, r3, r2
   2a0c4:	cmp	r3, r2
   2a0c8:	movcs	r0, #16
   2a0cc:	bcs	2a118 <flatcc_verify_vector_field@@Base+0x90>
   2a0d0:	ldr	ip, [r4, #4]
   2a0d4:	add	lr, r2, #4
   2a0d8:	cmp	ip, lr
   2a0dc:	movcc	r0, #16
   2a0e0:	bcc	2a118 <flatcc_verify_vector_field@@Base+0x90>
   2a0e4:	cmp	r6, #4
   2a0e8:	movcs	r3, r6
   2a0ec:	movcc	r3, #4
   2a0f0:	sub	r3, r3, #1
   2a0f4:	orr	r3, r3, #3
   2a0f8:	tst	r3, lr
   2a0fc:	movne	r0, #16
   2a100:	bne	2a118 <flatcc_verify_vector_field@@Base+0x90>
   2a104:	ldr	r3, [r1, r2]
   2a108:	ldr	r1, [sp, #28]
   2a10c:	cmp	r1, r3
   2a110:	movcc	r0, #25
   2a114:	bcs	2a120 <flatcc_verify_vector_field@@Base+0x98>
   2a118:	add	sp, sp, #8
   2a11c:	pop	{r4, r5, r6, pc}
   2a120:	mul	r5, r3, r5
   2a124:	sub	ip, ip, #4
   2a128:	sub	r2, ip, r2
   2a12c:	cmp	r5, r2
   2a130:	movhi	r0, #26
   2a134:	b	2a118 <flatcc_verify_vector_field@@Base+0x90>

0002a138 <flatcc_verify_string_vector_field@@Base>:
   2a138:	push	{r4, r5, r6, r7, r8, lr}
   2a13c:	sub	sp, sp, #8
   2a140:	mov	r4, r0
   2a144:	add	r3, sp, #4
   2a148:	bl	29c98 <flatcc_emitter_copy_buffer@@Base+0xc4>
   2a14c:	cmp	r0, #0
   2a150:	bne	2a228 <flatcc_verify_string_vector_field@@Base+0xf0>
   2a154:	ldr	r3, [sp, #4]
   2a158:	cmp	r3, #0
   2a15c:	beq	2a228 <flatcc_verify_string_vector_field@@Base+0xf0>
   2a160:	ldr	r6, [r4]
   2a164:	ldr	r5, [r4, #4]
   2a168:	ldr	lr, [r6, r3]
   2a16c:	add	lr, r3, lr
   2a170:	cmp	r3, lr
   2a174:	movcs	r0, #16
   2a178:	bcs	2a228 <flatcc_verify_string_vector_field@@Base+0xf0>
   2a17c:	add	r2, lr, #4
   2a180:	cmp	r5, r2
   2a184:	bcc	2a190 <flatcc_verify_string_vector_field@@Base+0x58>
   2a188:	ands	r1, r2, #3
   2a18c:	beq	2a238 <flatcc_verify_string_vector_field@@Base+0x100>
   2a190:	add	r3, lr, #4
   2a194:	cmp	r5, r3
   2a198:	movcc	r0, #16
   2a19c:	bcc	2a228 <flatcc_verify_string_vector_field@@Base+0xf0>
   2a1a0:	tst	r3, #3
   2a1a4:	movne	r0, #16
   2a1a8:	bne	2a228 <flatcc_verify_string_vector_field@@Base+0xf0>
   2a1ac:	ldr	r3, [r6, lr]
   2a1b0:	cmn	r3, #-1073741823	; 0xc0000001
   2a1b4:	movhi	r0, #25
   2a1b8:	bhi	2a228 <flatcc_verify_string_vector_field@@Base+0xf0>
   2a1bc:	sub	r5, r5, #4
   2a1c0:	sub	lr, r5, lr
   2a1c4:	lsl	r3, r3, #2
   2a1c8:	cmp	lr, r3
   2a1cc:	movcc	r0, #26
   2a1d0:	b	2a228 <flatcc_verify_string_vector_field@@Base+0xf0>
   2a1d4:	add	lr, r6, lr
   2a1d8:	ldrb	r3, [lr, r7]
   2a1dc:	cmp	r3, #0
   2a1e0:	movne	r0, #7
   2a1e4:	bne	2a228 <flatcc_verify_string_vector_field@@Base+0xf0>
   2a1e8:	add	r1, r1, #1
   2a1ec:	add	r2, r2, #4
   2a1f0:	cmp	r4, r1
   2a1f4:	beq	2a228 <flatcc_verify_string_vector_field@@Base+0xf0>
   2a1f8:	ldr	r3, [ip, #4]!
   2a1fc:	add	r3, r2, r3
   2a200:	cmp	r2, r3
   2a204:	bcs	2a224 <flatcc_verify_string_vector_field@@Base+0xec>
   2a208:	add	lr, r3, #4
   2a20c:	cmp	r5, lr
   2a210:	bcc	2a230 <flatcc_verify_string_vector_field@@Base+0xf8>
   2a214:	tst	r3, #3
   2a218:	beq	2a264 <flatcc_verify_string_vector_field@@Base+0x12c>
   2a21c:	mov	r0, #17
   2a220:	b	2a228 <flatcc_verify_string_vector_field@@Base+0xf0>
   2a224:	mov	r0, #17
   2a228:	add	sp, sp, #8
   2a22c:	pop	{r4, r5, r6, r7, r8, pc}
   2a230:	mov	r0, #17
   2a234:	b	2a228 <flatcc_verify_string_vector_field@@Base+0xf0>
   2a238:	add	ip, r6, lr
   2a23c:	ldr	r4, [r6, lr]
   2a240:	cmn	r4, #-1073741823	; 0xc0000001
   2a244:	bhi	2a190 <flatcc_verify_string_vector_field@@Base+0x58>
   2a248:	sub	r3, r5, #4
   2a24c:	sub	r3, r3, lr
   2a250:	cmp	r3, r4, lsl #2
   2a254:	bcc	2a190 <flatcc_verify_string_vector_field@@Base+0x58>
   2a258:	cmp	r4, #0
   2a25c:	bne	2a1f8 <flatcc_verify_string_vector_field@@Base+0xc0>
   2a260:	b	2a228 <flatcc_verify_string_vector_field@@Base+0xf0>
   2a264:	ldr	r7, [r6, r3]
   2a268:	sub	r3, r5, lr
   2a26c:	add	r8, r7, #1
   2a270:	cmp	r3, r8
   2a274:	bcs	2a1d4 <flatcc_verify_string_vector_field@@Base+0x9c>
   2a278:	mov	r0, #8
   2a27c:	b	2a228 <flatcc_verify_string_vector_field@@Base+0xf0>

0002a280 <flatcc_verify_table_field@@Base>:
   2a280:	push	{r4, r5, lr}
   2a284:	sub	sp, sp, #36	; 0x24
   2a288:	mov	r4, r0
   2a28c:	mov	r5, r3
   2a290:	add	r3, sp, #28
   2a294:	bl	29c98 <flatcc_emitter_copy_buffer@@Base+0xc4>
   2a298:	cmp	r0, #0
   2a29c:	bne	2a2ac <flatcc_verify_table_field@@Base+0x2c>
   2a2a0:	ldr	r3, [sp, #28]
   2a2a4:	cmp	r3, #0
   2a2a8:	bne	2a2b4 <flatcc_verify_table_field@@Base+0x34>
   2a2ac:	add	sp, sp, #36	; 0x24
   2a2b0:	pop	{r4, r5, pc}
   2a2b4:	ldr	r0, [r4]
   2a2b8:	ldr	ip, [r4, #4]
   2a2bc:	ldr	r1, [r0, r3]
   2a2c0:	ldr	r2, [r4, #8]
   2a2c4:	sub	r2, r2, #1
   2a2c8:	str	r2, [sp, #12]
   2a2cc:	cmp	r2, #0
   2a2d0:	moveq	r0, #3
   2a2d4:	beq	2a2ac <flatcc_verify_table_field@@Base+0x2c>
   2a2d8:	add	r2, r3, r1
   2a2dc:	cmp	r3, r2
   2a2e0:	movcs	r0, #15
   2a2e4:	bcs	2a2ac <flatcc_verify_table_field@@Base+0x2c>
   2a2e8:	add	r3, r2, #4
   2a2ec:	cmp	ip, r3
   2a2f0:	movcc	r0, #15
   2a2f4:	bcc	2a2ac <flatcc_verify_table_field@@Base+0x2c>
   2a2f8:	tst	r2, #3
   2a2fc:	movne	r0, #15
   2a300:	bne	2a2ac <flatcc_verify_table_field@@Base+0x2c>
   2a304:	str	r2, [sp, #20]
   2a308:	ldr	r3, [r0, r2]
   2a30c:	subs	r3, r2, r3
   2a310:	movmi	r0, #29
   2a314:	bmi	2a2ac <flatcc_verify_table_field@@Base+0x2c>
   2a318:	tst	r3, #1
   2a31c:	movne	r0, #29
   2a320:	bne	2a2ac <flatcc_verify_table_field@@Base+0x2c>
   2a324:	add	r1, r3, #2
   2a328:	cmp	ip, r1
   2a32c:	movcc	r0, #27
   2a330:	bcc	2a2ac <flatcc_verify_table_field@@Base+0x2c>
   2a334:	add	r4, r0, r3
   2a338:	ldrh	lr, [r0, r3]
   2a33c:	strh	lr, [sp, #26]
   2a340:	add	r3, lr, r3
   2a344:	cmp	ip, r3
   2a348:	movcc	r0, #30
   2a34c:	bcc	2a2ac <flatcc_verify_table_field@@Base+0x2c>
   2a350:	tst	lr, #1
   2a354:	movne	r0, #30
   2a358:	bne	2a2ac <flatcc_verify_table_field@@Base+0x2c>
   2a35c:	cmp	lr, #3
   2a360:	movls	r0, #28
   2a364:	bls	2a2ac <flatcc_verify_table_field@@Base+0x2c>
   2a368:	ldrh	r3, [r0, r1]
   2a36c:	strh	r3, [sp, #24]
   2a370:	sub	r2, ip, r2
   2a374:	cmp	r2, r3
   2a378:	movcc	r0, #20
   2a37c:	bcc	2a2ac <flatcc_verify_table_field@@Base+0x2c>
   2a380:	str	r4, [sp, #16]
   2a384:	str	r0, [sp, #4]
   2a388:	str	ip, [sp, #8]
   2a38c:	add	r0, sp, #4
   2a390:	blx	r5
   2a394:	b	2a2ac <flatcc_verify_table_field@@Base+0x2c>

0002a398 <flatcc_verify_table_vector_field@@Base>:
   2a398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a39c:	sub	sp, sp, #44	; 0x2c
   2a3a0:	mov	r5, r0
   2a3a4:	str	r3, [sp, #4]
   2a3a8:	add	r3, sp, #36	; 0x24
   2a3ac:	bl	29c98 <flatcc_emitter_copy_buffer@@Base+0xc4>
   2a3b0:	cmp	r0, #0
   2a3b4:	bne	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a3b8:	ldr	r3, [sp, #36]	; 0x24
   2a3bc:	cmp	r3, #0
   2a3c0:	bne	2a3cc <flatcc_verify_table_vector_field@@Base+0x34>
   2a3c4:	add	sp, sp, #44	; 0x2c
   2a3c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3cc:	ldr	r4, [r5, #8]
   2a3d0:	cmp	r4, #0
   2a3d4:	movle	r0, #3
   2a3d8:	ble	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a3dc:	ldr	fp, [r5]
   2a3e0:	ldr	r9, [r5, #4]
   2a3e4:	ldr	r2, [fp, r3]
   2a3e8:	add	r2, r3, r2
   2a3ec:	cmp	r3, r2
   2a3f0:	movcs	r0, #16
   2a3f4:	bcs	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a3f8:	add	r6, r2, #4
   2a3fc:	cmp	r9, r6
   2a400:	bcc	2a40c <flatcc_verify_table_vector_field@@Base+0x74>
   2a404:	ands	r7, r6, #3
   2a408:	beq	2a47c <flatcc_verify_table_vector_field@@Base+0xe4>
   2a40c:	add	r3, r2, #4
   2a410:	cmp	r9, r3
   2a414:	movcc	r0, #16
   2a418:	bcc	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a41c:	tst	r3, #3
   2a420:	movne	r0, #16
   2a424:	bne	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a428:	ldr	r3, [fp, r2]
   2a42c:	cmn	r3, #-1073741823	; 0xc0000001
   2a430:	movhi	r0, #25
   2a434:	bhi	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a438:	lsl	r3, r3, #2
   2a43c:	sub	r1, r9, #4
   2a440:	sub	r2, r1, r2
   2a444:	cmp	r3, r2
   2a448:	movhi	r0, #26
   2a44c:	b	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a450:	add	r3, r3, r6
   2a454:	cmp	r3, r6
   2a458:	bls	2a470 <flatcc_verify_table_vector_field@@Base+0xd8>
   2a45c:	add	r2, r3, #4
   2a460:	cmp	r9, r2
   2a464:	bcc	2a470 <flatcc_verify_table_vector_field@@Base+0xd8>
   2a468:	tst	r3, #3
   2a46c:	beq	2a4ac <flatcc_verify_table_vector_field@@Base+0x114>
   2a470:	ldr	r3, [r8]
   2a474:	str	r4, [sp, #20]
   2a478:	b	2a564 <flatcc_verify_table_vector_field@@Base+0x1cc>
   2a47c:	ldr	sl, [fp, r2]
   2a480:	cmn	sl, #-1073741823	; 0xc0000001
   2a484:	bhi	2a40c <flatcc_verify_table_vector_field@@Base+0x74>
   2a488:	sub	r3, r9, #4
   2a48c:	sub	r3, r3, r2
   2a490:	cmp	r3, sl, lsl #2
   2a494:	bcc	2a40c <flatcc_verify_table_vector_field@@Base+0x74>
   2a498:	cmp	sl, #0
   2a49c:	beq	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a4a0:	add	r5, fp, r6
   2a4a4:	sub	r4, r4, #2
   2a4a8:	b	2a53c <flatcc_verify_table_vector_field@@Base+0x1a4>
   2a4ac:	str	r3, [sp, #28]
   2a4b0:	ldr	r2, [fp, r3]
   2a4b4:	subs	r2, r3, r2
   2a4b8:	bmi	2a470 <flatcc_verify_table_vector_field@@Base+0xd8>
   2a4bc:	tst	r2, #1
   2a4c0:	bne	2a470 <flatcc_verify_table_vector_field@@Base+0xd8>
   2a4c4:	add	r1, r2, #2
   2a4c8:	cmp	r9, r1
   2a4cc:	bcc	2a550 <flatcc_verify_table_vector_field@@Base+0x1b8>
   2a4d0:	add	ip, fp, r2
   2a4d4:	ldrh	r0, [fp, r2]
   2a4d8:	strh	r0, [sp, #34]	; 0x22
   2a4dc:	add	r2, r0, r2
   2a4e0:	cmp	r9, r2
   2a4e4:	bcc	2a470 <flatcc_verify_table_vector_field@@Base+0xd8>
   2a4e8:	tst	r0, #1
   2a4ec:	bne	2a470 <flatcc_verify_table_vector_field@@Base+0xd8>
   2a4f0:	cmp	r0, #3
   2a4f4:	bls	2a550 <flatcc_verify_table_vector_field@@Base+0x1b8>
   2a4f8:	ldrh	r2, [fp, r1]
   2a4fc:	strh	r2, [sp, #32]
   2a500:	sub	r3, r9, r3
   2a504:	cmp	r3, r2
   2a508:	bcc	2a550 <flatcc_verify_table_vector_field@@Base+0x1b8>
   2a50c:	str	ip, [sp, #24]
   2a510:	str	fp, [sp, #12]
   2a514:	str	r9, [sp, #16]
   2a518:	add	r0, sp, #12
   2a51c:	ldr	r3, [sp, #4]
   2a520:	blx	r3
   2a524:	cmp	r0, #0
   2a528:	bne	2a470 <flatcc_verify_table_vector_field@@Base+0xd8>
   2a52c:	add	r7, r7, #1
   2a530:	add	r6, r6, #4
   2a534:	cmp	sl, r7
   2a538:	beq	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a53c:	mov	r8, r5
   2a540:	ldr	r3, [r5], #4
   2a544:	str	r4, [sp, #20]
   2a548:	cmp	r4, #0
   2a54c:	bne	2a450 <flatcc_verify_table_vector_field@@Base+0xb8>
   2a550:	ldr	r3, [r8]
   2a554:	str	r4, [sp, #20]
   2a558:	cmp	r4, #0
   2a55c:	moveq	r0, #3
   2a560:	beq	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a564:	add	r3, r6, r3
   2a568:	cmp	r6, r3
   2a56c:	movcs	r0, #15
   2a570:	bcs	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a574:	add	r2, r3, #4
   2a578:	cmp	r9, r2
   2a57c:	movcc	r0, #15
   2a580:	bcc	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a584:	tst	r3, #3
   2a588:	movne	r0, #15
   2a58c:	bne	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a590:	str	r3, [sp, #28]
   2a594:	ldr	r2, [fp, r3]
   2a598:	subs	r2, r3, r2
   2a59c:	movmi	r0, #29
   2a5a0:	bmi	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a5a4:	tst	r2, #1
   2a5a8:	movne	r0, #29
   2a5ac:	bne	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a5b0:	add	r0, r2, #2
   2a5b4:	cmp	r9, r0
   2a5b8:	movcc	r0, #27
   2a5bc:	bcc	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a5c0:	add	ip, fp, r2
   2a5c4:	ldrh	r1, [fp, r2]
   2a5c8:	strh	r1, [sp, #34]	; 0x22
   2a5cc:	add	r2, r1, r2
   2a5d0:	cmp	r9, r2
   2a5d4:	movcc	r0, #30
   2a5d8:	bcc	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a5dc:	tst	r1, #1
   2a5e0:	movne	r0, #30
   2a5e4:	bne	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a5e8:	cmp	r1, #3
   2a5ec:	movls	r0, #28
   2a5f0:	bls	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a5f4:	ldrh	r2, [fp, r0]
   2a5f8:	strh	r2, [sp, #32]
   2a5fc:	sub	r3, r9, r3
   2a600:	cmp	r3, r2
   2a604:	movcc	r0, #20
   2a608:	bcc	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>
   2a60c:	str	ip, [sp, #24]
   2a610:	str	fp, [sp, #12]
   2a614:	str	r9, [sp, #16]
   2a618:	add	r0, sp, #12
   2a61c:	ldr	r3, [sp, #4]
   2a620:	blx	r3
   2a624:	b	2a3c4 <flatcc_verify_table_vector_field@@Base+0x2c>

0002a628 <flatcc_verify_union_table@@Base>:
   2a628:	push	{r4, r5, lr}
   2a62c:	sub	sp, sp, #28
   2a630:	ldr	r4, [r0]
   2a634:	ldr	lr, [r0, #4]
   2a638:	ldr	ip, [r0, #16]
   2a63c:	ldr	r2, [r0, #20]
   2a640:	ldr	r3, [r0, #8]
   2a644:	sub	r3, r3, #1
   2a648:	str	r3, [sp, #8]
   2a64c:	cmp	r3, #0
   2a650:	moveq	r0, #3
   2a654:	bne	2a660 <flatcc_verify_union_table@@Base+0x38>
   2a658:	add	sp, sp, #28
   2a65c:	pop	{r4, r5, pc}
   2a660:	add	r3, ip, r2
   2a664:	cmp	ip, r3
   2a668:	movcs	r0, #15
   2a66c:	bcs	2a658 <flatcc_verify_union_table@@Base+0x30>
   2a670:	add	r2, r3, #4
   2a674:	cmp	lr, r2
   2a678:	movcc	r0, #15
   2a67c:	bcc	2a658 <flatcc_verify_union_table@@Base+0x30>
   2a680:	tst	r3, #3
   2a684:	movne	r0, #15
   2a688:	bne	2a658 <flatcc_verify_union_table@@Base+0x30>
   2a68c:	str	r3, [sp, #16]
   2a690:	ldr	r2, [r4, r3]
   2a694:	subs	r2, r3, r2
   2a698:	movmi	r0, #29
   2a69c:	bmi	2a658 <flatcc_verify_union_table@@Base+0x30>
   2a6a0:	tst	r2, #1
   2a6a4:	movne	r0, #29
   2a6a8:	bne	2a658 <flatcc_verify_union_table@@Base+0x30>
   2a6ac:	add	r0, r2, #2
   2a6b0:	cmp	lr, r0
   2a6b4:	movcc	r0, #27
   2a6b8:	bcc	2a658 <flatcc_verify_union_table@@Base+0x30>
   2a6bc:	add	r5, r4, r2
   2a6c0:	ldrh	ip, [r4, r2]
   2a6c4:	strh	ip, [sp, #22]
   2a6c8:	add	r2, ip, r2
   2a6cc:	cmp	lr, r2
   2a6d0:	movcc	r0, #30
   2a6d4:	bcc	2a658 <flatcc_verify_union_table@@Base+0x30>
   2a6d8:	tst	ip, #1
   2a6dc:	movne	r0, #30
   2a6e0:	bne	2a658 <flatcc_verify_union_table@@Base+0x30>
   2a6e4:	cmp	ip, #3
   2a6e8:	movls	r0, #28
   2a6ec:	bls	2a658 <flatcc_verify_union_table@@Base+0x30>
   2a6f0:	ldrh	r2, [r4, r0]
   2a6f4:	strh	r2, [sp, #20]
   2a6f8:	sub	r3, lr, r3
   2a6fc:	cmp	r3, r2
   2a700:	movcc	r0, #20
   2a704:	bcc	2a658 <flatcc_verify_union_table@@Base+0x30>
   2a708:	str	r5, [sp, #12]
   2a70c:	str	r4, [sp]
   2a710:	str	lr, [sp, #4]
   2a714:	mov	r0, sp
   2a718:	blx	r1
   2a71c:	b	2a658 <flatcc_verify_union_table@@Base+0x30>

0002a720 <flatcc_verify_union_struct@@Base>:
   2a720:	push	{lr}		; (str lr, [sp, #-4]!)
   2a724:	ldr	lr, [r0, #4]
   2a728:	ldr	ip, [r0, #16]
   2a72c:	ldr	r3, [r0, #20]
   2a730:	cmp	r3, #0
   2a734:	bne	2a740 <flatcc_verify_union_struct@@Base+0x20>
   2a738:	mov	r0, #18
   2a73c:	pop	{pc}		; (ldr pc, [sp], #4)
   2a740:	add	r3, ip, r3
   2a744:	cmp	lr, r3
   2a748:	bcs	2a754 <flatcc_verify_union_struct@@Base+0x34>
   2a74c:	mov	r0, #18
   2a750:	pop	{pc}		; (ldr pc, [sp], #4)
   2a754:	adds	r1, r1, r3
   2a758:	bcc	2a764 <flatcc_verify_union_struct@@Base+0x44>
   2a75c:	mov	r0, #10
   2a760:	pop	{pc}		; (ldr pc, [sp], #4)
   2a764:	cmp	lr, r1
   2a768:	bcs	2a774 <flatcc_verify_union_struct@@Base+0x54>
   2a76c:	mov	r0, #9
   2a770:	pop	{pc}		; (ldr pc, [sp], #4)
   2a774:	sub	r0, r2, #1
   2a778:	and	r0, r0, r3
   2a77c:	cmp	r0, #0
   2a780:	movne	r0, #11
   2a784:	moveq	r0, #0
   2a788:	pop	{pc}		; (ldr pc, [sp], #4)

0002a78c <flatcc_verify_union_string@@Base>:
   2a78c:	ldr	r2, [r0, #16]
   2a790:	ldr	r3, [r0, #20]
   2a794:	add	r3, r2, r3
   2a798:	cmp	r2, r3
   2a79c:	bcs	2a7d8 <flatcc_verify_union_string@@Base+0x4c>
   2a7a0:	ldr	r2, [r0, #4]
   2a7a4:	add	r1, r3, #4
   2a7a8:	cmp	r2, r1
   2a7ac:	bcc	2a7e0 <flatcc_verify_union_string@@Base+0x54>
   2a7b0:	tst	r3, #3
   2a7b4:	beq	2a7e8 <flatcc_verify_union_string@@Base+0x5c>
   2a7b8:	mov	r0, #17
   2a7bc:	bx	lr
   2a7c0:	add	r1, r0, r1
   2a7c4:	ldrb	r0, [r1, r3]
   2a7c8:	cmp	r0, #0
   2a7cc:	movne	r0, #7
   2a7d0:	moveq	r0, #0
   2a7d4:	bx	lr
   2a7d8:	mov	r0, #17
   2a7dc:	bx	lr
   2a7e0:	mov	r0, #17
   2a7e4:	bx	lr
   2a7e8:	ldr	r0, [r0]
   2a7ec:	ldr	r3, [r0, r3]
   2a7f0:	sub	r2, r2, r1
   2a7f4:	add	ip, r3, #1
   2a7f8:	cmp	r2, ip
   2a7fc:	bcs	2a7c0 <flatcc_verify_union_string@@Base+0x34>
   2a800:	mov	r0, #8
   2a804:	bx	lr

0002a808 <flatcc_verify_buffer_header@@Base>:
   2a808:	tst	r0, #3
   2a80c:	beq	2a818 <flatcc_verify_buffer_header@@Base+0x10>
   2a810:	mov	r0, #5
   2a814:	bx	lr
   2a818:	cmn	r1, #9
   2a81c:	bls	2a828 <flatcc_verify_buffer_header@@Base+0x20>
   2a820:	mov	r0, #6
   2a824:	bx	lr
   2a828:	cmp	r1, #7
   2a82c:	bls	2a888 <flatcc_verify_buffer_header@@Base+0x80>
   2a830:	cmp	r2, #0
   2a834:	beq	2a890 <flatcc_verify_buffer_header@@Base+0x88>
   2a838:	push	{r4, lr}
   2a83c:	sub	sp, sp, #8
   2a840:	mov	r1, r2
   2a844:	mov	r4, r0
   2a848:	add	r0, sp, #8
   2a84c:	mov	r3, #0
   2a850:	str	r3, [r0, #-4]!
   2a854:	mov	r2, #4
   2a858:	bl	145d0 <strncpy@plt>
   2a85c:	ldr	r3, [sp, #4]
   2a860:	ldr	r0, [r4, #4]
   2a864:	cmp	r3, #0
   2a868:	cmpne	r0, r3
   2a86c:	moveq	r3, #1
   2a870:	movne	r3, #0
   2a874:	cmp	r3, #0
   2a878:	moveq	r0, #2
   2a87c:	movne	r0, #0
   2a880:	add	sp, sp, #8
   2a884:	pop	{r4, pc}
   2a888:	mov	r0, #1
   2a88c:	bx	lr
   2a890:	mov	r0, #0
   2a894:	bx	lr

0002a898 <flatcc_verify_typed_buffer_header@@Base>:
   2a898:	tst	r0, #3
   2a89c:	beq	2a8a8 <flatcc_verify_typed_buffer_header@@Base+0x10>
   2a8a0:	mov	r0, #5
   2a8a4:	bx	lr
   2a8a8:	cmn	r1, #9
   2a8ac:	bls	2a8b8 <flatcc_verify_typed_buffer_header@@Base+0x20>
   2a8b0:	mov	r0, #6
   2a8b4:	bx	lr
   2a8b8:	cmp	r1, #7
   2a8bc:	bls	2a8dc <flatcc_verify_typed_buffer_header@@Base+0x44>
   2a8c0:	cmp	r2, #0
   2a8c4:	beq	2a8e4 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   2a8c8:	ldr	r0, [r0, #4]
   2a8cc:	cmp	r2, r0
   2a8d0:	movne	r0, #2
   2a8d4:	moveq	r0, #0
   2a8d8:	bx	lr
   2a8dc:	mov	r0, #1
   2a8e0:	bx	lr
   2a8e4:	mov	r0, #0
   2a8e8:	bx	lr

0002a8ec <flatcc_verify_struct_as_root@@Base>:
   2a8ec:	push	{r4, r5, r6, r7, r8, lr}
   2a8f0:	mov	r5, r0
   2a8f4:	mov	r4, r1
   2a8f8:	mov	r7, r2
   2a8fc:	mov	r6, r3
   2a900:	bl	2a808 <flatcc_verify_buffer_header@@Base>
   2a904:	cmp	r0, #0
   2a908:	bne	2a930 <flatcc_verify_struct_as_root@@Base+0x44>
   2a90c:	ldr	r2, [r5]
   2a910:	clz	r3, r2
   2a914:	lsr	r3, r3, #5
   2a918:	cmp	r4, r2
   2a91c:	orrcc	r3, r3, #1
   2a920:	cmp	r3, #0
   2a924:	beq	2a944 <flatcc_verify_struct_as_root@@Base+0x58>
   2a928:	mov	r0, #18
   2a92c:	pop	{r4, r5, r6, r7, r8, pc}
   2a930:	mov	r2, r7
   2a934:	mov	r1, r4
   2a938:	mov	r0, r5
   2a93c:	bl	2a808 <flatcc_verify_buffer_header@@Base>
   2a940:	pop	{r4, r5, r6, r7, r8, pc}
   2a944:	adds	r6, r6, r2
   2a948:	bcc	2a954 <flatcc_verify_struct_as_root@@Base+0x68>
   2a94c:	mov	r0, #10
   2a950:	pop	{r4, r5, r6, r7, r8, pc}
   2a954:	cmp	r4, r6
   2a958:	bcs	2a964 <flatcc_verify_struct_as_root@@Base+0x78>
   2a95c:	mov	r0, #9
   2a960:	pop	{r4, r5, r6, r7, r8, pc}
   2a964:	ldrh	r3, [sp, #24]
   2a968:	sub	r3, r3, #1
   2a96c:	and	r2, r2, r3
   2a970:	cmp	r2, #0
   2a974:	movne	r0, #11
   2a978:	pop	{r4, r5, r6, r7, r8, pc}

0002a97c <flatcc_verify_struct_as_typed_root@@Base>:
   2a97c:	push	{r4, r5, r6, lr}
   2a980:	mov	r5, r0
   2a984:	mov	r4, r1
   2a988:	mov	r6, r3
   2a98c:	bl	2a898 <flatcc_verify_typed_buffer_header@@Base>
   2a990:	cmp	r0, #0
   2a994:	popne	{r4, r5, r6, pc}
   2a998:	ldr	r2, [r5]
   2a99c:	clz	r3, r2
   2a9a0:	lsr	r3, r3, #5
   2a9a4:	cmp	r4, r2
   2a9a8:	orrcc	r3, r3, #1
   2a9ac:	cmp	r3, #0
   2a9b0:	beq	2a9bc <flatcc_verify_struct_as_typed_root@@Base+0x40>
   2a9b4:	mov	r0, #18
   2a9b8:	pop	{r4, r5, r6, pc}
   2a9bc:	adds	r6, r6, r2
   2a9c0:	bcc	2a9cc <flatcc_verify_struct_as_typed_root@@Base+0x50>
   2a9c4:	mov	r0, #10
   2a9c8:	pop	{r4, r5, r6, pc}
   2a9cc:	cmp	r4, r6
   2a9d0:	bcs	2a9dc <flatcc_verify_struct_as_typed_root@@Base+0x60>
   2a9d4:	mov	r0, #9
   2a9d8:	pop	{r4, r5, r6, pc}
   2a9dc:	ldrh	r3, [sp, #16]
   2a9e0:	sub	r3, r3, #1
   2a9e4:	and	r2, r2, r3
   2a9e8:	cmp	r2, #0
   2a9ec:	movne	r0, #11
   2a9f0:	pop	{r4, r5, r6, pc}

0002a9f4 <flatcc_verify_table_as_root@@Base>:
   2a9f4:	push	{r4, r5, r6, r7, lr}
   2a9f8:	sub	sp, sp, #28
   2a9fc:	mov	r4, r0
   2aa00:	mov	r5, r1
   2aa04:	mov	r6, r2
   2aa08:	mov	r7, r3
   2aa0c:	bl	2a808 <flatcc_verify_buffer_header@@Base>
   2aa10:	cmp	r0, #0
   2aa14:	bne	2aae0 <flatcc_verify_table_as_root@@Base+0xec>
   2aa18:	ldr	r3, [r4]
   2aa1c:	mov	r2, #99	; 0x63
   2aa20:	str	r2, [sp, #8]
   2aa24:	cmp	r3, #0
   2aa28:	moveq	r0, #15
   2aa2c:	beq	2aaf0 <flatcc_verify_table_as_root@@Base+0xfc>
   2aa30:	add	r2, r3, #4
   2aa34:	cmp	r5, r2
   2aa38:	movcc	r0, #15
   2aa3c:	bcc	2aaf0 <flatcc_verify_table_as_root@@Base+0xfc>
   2aa40:	tst	r3, #3
   2aa44:	movne	r0, #15
   2aa48:	bne	2aaf0 <flatcc_verify_table_as_root@@Base+0xfc>
   2aa4c:	str	r3, [sp, #16]
   2aa50:	ldr	r2, [r4, r3]
   2aa54:	subs	r2, r3, r2
   2aa58:	movmi	r0, #29
   2aa5c:	bmi	2aaf0 <flatcc_verify_table_as_root@@Base+0xfc>
   2aa60:	tst	r2, #1
   2aa64:	movne	r0, #29
   2aa68:	bne	2aaf0 <flatcc_verify_table_as_root@@Base+0xfc>
   2aa6c:	add	r1, r2, #2
   2aa70:	cmp	r5, r1
   2aa74:	movcc	r0, #27
   2aa78:	bcc	2aaf0 <flatcc_verify_table_as_root@@Base+0xfc>
   2aa7c:	add	ip, r4, r2
   2aa80:	ldrh	r0, [r4, r2]
   2aa84:	strh	r0, [sp, #22]
   2aa88:	add	r2, r0, r2
   2aa8c:	cmp	r5, r2
   2aa90:	movcc	r0, #30
   2aa94:	bcc	2aaf0 <flatcc_verify_table_as_root@@Base+0xfc>
   2aa98:	tst	r0, #1
   2aa9c:	movne	r0, #30
   2aaa0:	bne	2aaf0 <flatcc_verify_table_as_root@@Base+0xfc>
   2aaa4:	cmp	r0, #3
   2aaa8:	movls	r0, #28
   2aaac:	bls	2aaf0 <flatcc_verify_table_as_root@@Base+0xfc>
   2aab0:	ldrh	r2, [r4, r1]
   2aab4:	strh	r2, [sp, #20]
   2aab8:	sub	r3, r5, r3
   2aabc:	cmp	r3, r2
   2aac0:	movcc	r0, #20
   2aac4:	bcc	2aaf0 <flatcc_verify_table_as_root@@Base+0xfc>
   2aac8:	str	ip, [sp, #12]
   2aacc:	str	r4, [sp]
   2aad0:	str	r5, [sp, #4]
   2aad4:	mov	r0, sp
   2aad8:	blx	r7
   2aadc:	b	2aaf0 <flatcc_verify_table_as_root@@Base+0xfc>
   2aae0:	mov	r2, r6
   2aae4:	mov	r1, r5
   2aae8:	mov	r0, r4
   2aaec:	bl	2a808 <flatcc_verify_buffer_header@@Base>
   2aaf0:	add	sp, sp, #28
   2aaf4:	pop	{r4, r5, r6, r7, pc}

0002aaf8 <flatcc_verify_table_as_typed_root@@Base>:
   2aaf8:	push	{r4, r5, r6, lr}
   2aafc:	sub	sp, sp, #24
   2ab00:	mov	r4, r0
   2ab04:	mov	r5, r1
   2ab08:	mov	r6, r3
   2ab0c:	bl	2a898 <flatcc_verify_typed_buffer_header@@Base>
   2ab10:	cmp	r0, #0
   2ab14:	beq	2ab20 <flatcc_verify_table_as_typed_root@@Base+0x28>
   2ab18:	add	sp, sp, #24
   2ab1c:	pop	{r4, r5, r6, pc}
   2ab20:	ldr	r3, [r4]
   2ab24:	mov	r2, #99	; 0x63
   2ab28:	str	r2, [sp, #8]
   2ab2c:	cmp	r3, #0
   2ab30:	moveq	r0, #15
   2ab34:	beq	2ab18 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2ab38:	add	r2, r3, #4
   2ab3c:	cmp	r5, r2
   2ab40:	movcc	r0, #15
   2ab44:	bcc	2ab18 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2ab48:	tst	r3, #3
   2ab4c:	movne	r0, #15
   2ab50:	bne	2ab18 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2ab54:	str	r3, [sp, #16]
   2ab58:	ldr	r2, [r4, r3]
   2ab5c:	subs	r2, r3, r2
   2ab60:	movmi	r0, #29
   2ab64:	bmi	2ab18 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2ab68:	tst	r2, #1
   2ab6c:	movne	r0, #29
   2ab70:	bne	2ab18 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2ab74:	add	r1, r2, #2
   2ab78:	cmp	r5, r1
   2ab7c:	movcc	r0, #27
   2ab80:	bcc	2ab18 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2ab84:	add	ip, r4, r2
   2ab88:	ldrh	r0, [r4, r2]
   2ab8c:	strh	r0, [sp, #22]
   2ab90:	add	r2, r0, r2
   2ab94:	cmp	r5, r2
   2ab98:	movcc	r0, #30
   2ab9c:	bcc	2ab18 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2aba0:	tst	r0, #1
   2aba4:	movne	r0, #30
   2aba8:	bne	2ab18 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2abac:	cmp	r0, #3
   2abb0:	movls	r0, #28
   2abb4:	bls	2ab18 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2abb8:	ldrh	r2, [r4, r1]
   2abbc:	strh	r2, [sp, #20]
   2abc0:	sub	r3, r5, r3
   2abc4:	cmp	r3, r2
   2abc8:	movcc	r0, #20
   2abcc:	bcc	2ab18 <flatcc_verify_table_as_typed_root@@Base+0x20>
   2abd0:	str	ip, [sp, #12]
   2abd4:	str	r4, [sp]
   2abd8:	str	r5, [sp, #4]
   2abdc:	mov	r0, sp
   2abe0:	blx	r6
   2abe4:	b	2ab18 <flatcc_verify_table_as_typed_root@@Base+0x20>

0002abe8 <flatcc_verify_struct_as_nested_root@@Base>:
   2abe8:	push	{r4, r5, r6, r7, r8, lr}
   2abec:	sub	sp, sp, #8
   2abf0:	mov	r5, r0
   2abf4:	mov	r4, r1
   2abf8:	mov	r8, r2
   2abfc:	mov	r7, r3
   2ac00:	ldrh	r6, [sp, #36]	; 0x24
   2ac04:	mvn	r3, #0
   2ac08:	str	r3, [sp, #4]
   2ac0c:	mov	r3, #1
   2ac10:	str	r3, [sp]
   2ac14:	mov	r3, r6
   2ac18:	bl	2a088 <flatcc_verify_vector_field@@Base>
   2ac1c:	cmp	r0, #0
   2ac20:	bne	2ac88 <flatcc_verify_struct_as_nested_root@@Base+0xa0>
   2ac24:	add	r4, r4, #2
   2ac28:	lsl	r4, r4, #1
   2ac2c:	uxth	r4, r4
   2ac30:	ldrh	r3, [r5, #22]
   2ac34:	cmp	r3, r4
   2ac38:	bls	2ac80 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   2ac3c:	ldr	r3, [r5, #12]
   2ac40:	ldrh	r3, [r3, r4]
   2ac44:	cmp	r3, #0
   2ac48:	beq	2ac80 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   2ac4c:	ldr	r2, [r5, #16]
   2ac50:	add	r3, r3, r2
   2ac54:	ldr	r2, [r5]
   2ac58:	adds	r1, r2, r3
   2ac5c:	beq	2ac80 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   2ac60:	ldr	r3, [r2, r3]
   2ac64:	add	r0, r1, r3
   2ac68:	ldr	r1, [r1, r3]
   2ac6c:	str	r6, [sp]
   2ac70:	ldr	r3, [sp, #32]
   2ac74:	mov	r2, r7
   2ac78:	add	r0, r0, #4
   2ac7c:	bl	2a8ec <flatcc_verify_struct_as_root@@Base>
   2ac80:	add	sp, sp, #8
   2ac84:	pop	{r4, r5, r6, r7, r8, pc}
   2ac88:	mvn	r3, #0
   2ac8c:	str	r3, [sp, #4]
   2ac90:	mov	r3, #1
   2ac94:	str	r3, [sp]
   2ac98:	mov	r3, r6
   2ac9c:	mov	r2, r8
   2aca0:	mov	r1, r4
   2aca4:	mov	r0, r5
   2aca8:	bl	2a088 <flatcc_verify_vector_field@@Base>
   2acac:	b	2ac80 <flatcc_verify_struct_as_nested_root@@Base+0x98>

0002acb0 <flatcc_verify_table_as_nested_root@@Base>:
   2acb0:	push	{r4, r5, r6, r7, r8, lr}
   2acb4:	sub	sp, sp, #32
   2acb8:	mov	r5, r0
   2acbc:	mov	r4, r1
   2acc0:	mov	r8, r2
   2acc4:	mov	r6, r3
   2acc8:	ldrh	r7, [sp, #56]	; 0x38
   2accc:	mvn	r3, #0
   2acd0:	str	r3, [sp, #4]
   2acd4:	mov	r3, #1
   2acd8:	str	r3, [sp]
   2acdc:	mov	r3, r7
   2ace0:	bl	2a088 <flatcc_verify_vector_field@@Base>
   2ace4:	cmp	r0, #0
   2ace8:	bne	2ad74 <flatcc_verify_table_as_nested_root@@Base+0xc4>
   2acec:	add	r4, r4, #2
   2acf0:	lsl	r4, r4, #1
   2acf4:	uxth	r4, r4
   2acf8:	ldrh	r3, [r5, #22]
   2acfc:	cmp	r3, r4
   2ad00:	bls	2ad6c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2ad04:	ldr	r3, [r5, #12]
   2ad08:	ldrh	r3, [r3, r4]
   2ad0c:	cmp	r3, #0
   2ad10:	beq	2ad6c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2ad14:	ldr	r2, [r5, #16]
   2ad18:	add	r3, r3, r2
   2ad1c:	ldr	r2, [r5]
   2ad20:	adds	r1, r2, r3
   2ad24:	beq	2ad6c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2ad28:	ldr	r3, [r2, r3]
   2ad2c:	add	r4, r1, r3
   2ad30:	ldr	r7, [r1, r3]
   2ad34:	add	r8, r4, #4
   2ad38:	mov	r2, r6
   2ad3c:	mov	r1, r7
   2ad40:	mov	r0, r8
   2ad44:	bl	2a808 <flatcc_verify_buffer_header@@Base>
   2ad48:	cmp	r0, #0
   2ad4c:	bne	2ad9c <flatcc_verify_table_as_nested_root@@Base+0xec>
   2ad50:	ldr	r2, [r4, #4]
   2ad54:	ldr	r3, [r5, #8]
   2ad58:	sub	r3, r3, #1
   2ad5c:	str	r3, [sp, #16]
   2ad60:	cmp	r3, #0
   2ad64:	moveq	r0, #3
   2ad68:	bne	2adb0 <flatcc_verify_table_as_nested_root@@Base+0x100>
   2ad6c:	add	sp, sp, #32
   2ad70:	pop	{r4, r5, r6, r7, r8, pc}
   2ad74:	mvn	r3, #0
   2ad78:	str	r3, [sp, #4]
   2ad7c:	mov	r3, #1
   2ad80:	str	r3, [sp]
   2ad84:	mov	r3, r7
   2ad88:	mov	r2, r8
   2ad8c:	mov	r1, r4
   2ad90:	mov	r0, r5
   2ad94:	bl	2a088 <flatcc_verify_vector_field@@Base>
   2ad98:	b	2ad6c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2ad9c:	mov	r2, r6
   2ada0:	mov	r1, r7
   2ada4:	mov	r0, r8
   2ada8:	bl	2a808 <flatcc_verify_buffer_header@@Base>
   2adac:	b	2ad6c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2adb0:	cmp	r2, #0
   2adb4:	moveq	r0, #15
   2adb8:	beq	2ad6c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2adbc:	add	r3, r2, #4
   2adc0:	cmp	r7, r3
   2adc4:	movcc	r0, #15
   2adc8:	bcc	2ad6c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2adcc:	tst	r2, #3
   2add0:	movne	r0, #15
   2add4:	bne	2ad6c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2add8:	str	r2, [sp, #24]
   2addc:	ldr	r3, [r8, r2]
   2ade0:	subs	r3, r2, r3
   2ade4:	movmi	r0, #29
   2ade8:	bmi	2ad6c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2adec:	tst	r3, #1
   2adf0:	movne	r0, #29
   2adf4:	bne	2ad6c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2adf8:	add	r1, r3, #2
   2adfc:	cmp	r7, r1
   2ae00:	movcc	r0, #27
   2ae04:	bcc	2ad6c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2ae08:	add	ip, r8, r3
   2ae0c:	ldrh	r0, [r8, r3]
   2ae10:	strh	r0, [sp, #30]
   2ae14:	add	r3, r0, r3
   2ae18:	cmp	r7, r3
   2ae1c:	movcc	r0, #30
   2ae20:	bcc	2ad6c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2ae24:	tst	r0, #1
   2ae28:	movne	r0, #30
   2ae2c:	bne	2ad6c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2ae30:	cmp	r0, #3
   2ae34:	movls	r0, #28
   2ae38:	bls	2ad6c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2ae3c:	ldrh	r3, [r8, r1]
   2ae40:	strh	r3, [sp, #28]
   2ae44:	sub	r2, r7, r2
   2ae48:	cmp	r2, r3
   2ae4c:	movcc	r0, #20
   2ae50:	bcc	2ad6c <flatcc_verify_table_as_nested_root@@Base+0xbc>
   2ae54:	str	ip, [sp, #20]
   2ae58:	str	r8, [sp, #8]
   2ae5c:	str	r7, [sp, #12]
   2ae60:	add	r0, sp, #8
   2ae64:	ldr	r3, [sp, #60]	; 0x3c
   2ae68:	blx	r3
   2ae6c:	b	2ad6c <flatcc_verify_table_as_nested_root@@Base+0xbc>

0002ae70 <flatcc_verify_union_field@@Base>:
   2ae70:	push	{r4, r5, r6, r7, lr}
   2ae74:	sub	sp, sp, #36	; 0x24
   2ae78:	sub	ip, r1, #1
   2ae7c:	uxth	ip, ip
   2ae80:	add	ip, ip, #2
   2ae84:	lsl	ip, ip, #1
   2ae88:	uxth	ip, ip
   2ae8c:	ldrh	lr, [r0, #22]
   2ae90:	cmp	lr, ip
   2ae94:	bls	2aec4 <flatcc_verify_union_field@@Base+0x54>
   2ae98:	ldr	r6, [r0, #12]
   2ae9c:	ldrh	ip, [r6, ip]
   2aea0:	cmp	ip, #0
   2aea4:	beq	2aec4 <flatcc_verify_union_field@@Base+0x54>
   2aea8:	add	r4, ip, #1
   2aeac:	ldrh	r5, [r0, #20]
   2aeb0:	cmp	r4, r5
   2aeb4:	movhi	r0, #13
   2aeb8:	bls	2af30 <flatcc_verify_union_field@@Base+0xc0>
   2aebc:	add	sp, sp, #36	; 0x24
   2aec0:	pop	{r4, r5, r6, r7, pc}
   2aec4:	add	r1, r1, #2
   2aec8:	lsl	r1, r1, #1
   2aecc:	uxth	r1, r1
   2aed0:	cmp	lr, r1
   2aed4:	bls	2aeec <flatcc_verify_union_field@@Base+0x7c>
   2aed8:	ldr	r3, [r0, #12]
   2aedc:	ldrh	r3, [r3, r1]
   2aee0:	cmp	r3, #0
   2aee4:	movne	r0, #23
   2aee8:	bne	2aebc <flatcc_verify_union_field@@Base+0x4c>
   2aeec:	cmp	r2, #0
   2aef0:	moveq	r0, r2
   2aef4:	movne	r0, #21
   2aef8:	b	2aebc <flatcc_verify_union_field@@Base+0x4c>
   2aefc:	ldr	lr, [r0, #16]
   2af00:	add	ip, ip, lr
   2af04:	add	r5, r7, ip
   2af08:	ldrb	lr, [r7, ip]
   2af0c:	ldrh	r4, [r6, r4]
   2af10:	adds	ip, lr, #0
   2af14:	movne	ip, #1
   2af18:	cmp	r4, #0
   2af1c:	orreq	ip, ip, #1
   2af20:	cmp	ip, #0
   2af24:	moveq	r0, #24
   2af28:	beq	2aebc <flatcc_verify_union_field@@Base+0x4c>
   2af2c:	b	2af58 <flatcc_verify_union_field@@Base+0xe8>
   2af30:	ldr	r7, [r0]
   2af34:	add	r4, r1, #2
   2af38:	lsl	r4, r4, #1
   2af3c:	uxth	r4, r4
   2af40:	cmp	lr, r4
   2af44:	bhi	2aefc <flatcc_verify_union_field@@Base+0x8c>
   2af48:	ldr	lr, [r0, #16]
   2af4c:	add	ip, ip, lr
   2af50:	add	r5, r7, ip
   2af54:	ldrb	lr, [r7, ip]
   2af58:	cmp	lr, #0
   2af5c:	moveq	r0, #0
   2af60:	beq	2aebc <flatcc_verify_union_field@@Base+0x4c>
   2af64:	mov	r6, r3
   2af68:	mov	r4, r0
   2af6c:	add	r3, sp, #28
   2af70:	bl	29c98 <flatcc_emitter_copy_buffer@@Base+0xc4>
   2af74:	cmp	r0, #0
   2af78:	bne	2aebc <flatcc_verify_union_field@@Base+0x4c>
   2af7c:	ldr	r3, [sp, #28]
   2af80:	cmp	r3, #0
   2af84:	beq	2aebc <flatcc_verify_union_field@@Base+0x4c>
   2af88:	ldr	r2, [r4]
   2af8c:	str	r2, [sp, #4]
   2af90:	ldr	r1, [r4, #4]
   2af94:	str	r1, [sp, #8]
   2af98:	ldr	r1, [r4, #8]
   2af9c:	str	r1, [sp, #12]
   2afa0:	str	r3, [sp, #20]
   2afa4:	ldr	r3, [r2, r3]
   2afa8:	str	r3, [sp, #24]
   2afac:	ldrb	r3, [r5]
   2afb0:	strb	r3, [sp, #16]
   2afb4:	add	r0, sp, #4
   2afb8:	blx	r6
   2afbc:	b	2aebc <flatcc_verify_union_field@@Base+0x4c>

0002afc0 <flatcc_verify_union_vector_field@@Base>:
   2afc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2afc4:	sub	sp, sp, #40	; 0x28
   2afc8:	sub	r4, r1, #1
   2afcc:	uxth	r4, r4
   2afd0:	add	ip, r4, #2
   2afd4:	lsl	ip, ip, #1
   2afd8:	uxth	r6, ip
   2afdc:	ldrh	lr, [r0, #22]
   2afe0:	cmp	lr, r6
   2afe4:	bls	2b110 <flatcc_verify_union_vector_field@@Base+0x150>
   2afe8:	ldr	ip, [r0, #12]
   2afec:	ldrh	ip, [ip, r6]
   2aff0:	cmp	ip, #0
   2aff4:	beq	2b110 <flatcc_verify_union_vector_field@@Base+0x150>
   2aff8:	mov	r8, r3
   2affc:	mov	r9, r2
   2b000:	mov	sl, r1
   2b004:	mov	r5, r0
   2b008:	mvn	r3, #0
   2b00c:	str	r3, [sp, #4]
   2b010:	mov	r3, #1
   2b014:	str	r3, [sp]
   2b018:	mov	r1, r4
   2b01c:	bl	2a088 <flatcc_verify_vector_field@@Base>
   2b020:	subs	r7, r0, #0
   2b024:	bne	2b154 <flatcc_verify_union_vector_field@@Base+0x194>
   2b028:	ldrh	r3, [r5, #22]
   2b02c:	cmp	r3, r6
   2b030:	bls	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b034:	ldr	r3, [r5, #12]
   2b038:	ldrh	r3, [r3, r6]
   2b03c:	cmp	r3, #0
   2b040:	beq	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b044:	ldr	r2, [r5, #16]
   2b048:	add	r3, r3, r2
   2b04c:	ldr	r2, [r5]
   2b050:	adds	r1, r2, r3
   2b054:	beq	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b058:	ldr	r3, [r2, r3]
   2b05c:	add	r4, r1, r3
   2b060:	ldr	r6, [r1, r3]
   2b064:	add	r3, sp, #36	; 0x24
   2b068:	mov	r2, r9
   2b06c:	mov	r1, sl
   2b070:	mov	r0, r5
   2b074:	bl	29c98 <flatcc_emitter_copy_buffer@@Base+0xc4>
   2b078:	subs	r7, r0, #0
   2b07c:	bne	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b080:	ldr	r3, [sp, #36]	; 0x24
   2b084:	cmp	r3, #0
   2b088:	beq	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b08c:	ldr	r1, [r5, #8]
   2b090:	cmp	r1, #0
   2b094:	movle	r7, #3
   2b098:	ble	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b09c:	ldr	r0, [r5]
   2b0a0:	ldr	ip, [r5, #4]
   2b0a4:	ldr	r2, [r0, r3]
   2b0a8:	add	r2, r3, r2
   2b0ac:	cmp	r3, r2
   2b0b0:	movcs	r7, #16
   2b0b4:	bcs	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b0b8:	add	r5, r2, #4
   2b0bc:	cmp	ip, r5
   2b0c0:	bcc	2b0cc <flatcc_verify_union_vector_field@@Base+0x10c>
   2b0c4:	tst	r5, #3
   2b0c8:	beq	2b1ec <flatcc_verify_union_vector_field@@Base+0x22c>
   2b0cc:	add	r3, r2, #4
   2b0d0:	cmp	ip, r3
   2b0d4:	movcc	r7, #16
   2b0d8:	bcc	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b0dc:	tst	r3, #3
   2b0e0:	movne	r7, #16
   2b0e4:	bne	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b0e8:	ldr	r3, [r0, r2]
   2b0ec:	cmn	r3, #-1073741823	; 0xc0000001
   2b0f0:	movhi	r7, #25
   2b0f4:	bhi	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b0f8:	sub	ip, ip, #4
   2b0fc:	sub	r2, ip, r2
   2b100:	lsl	r3, r3, #2
   2b104:	cmp	r2, r3
   2b108:	movcc	r7, #26
   2b10c:	b	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b110:	add	ip, r1, #2
   2b114:	lsl	ip, ip, #1
   2b118:	uxth	ip, ip
   2b11c:	cmp	lr, ip
   2b120:	ldrhi	lr, [r0, #12]
   2b124:	ldrhhi	ip, [lr, ip]
   2b128:	movls	ip, #0
   2b12c:	clz	ip, ip
   2b130:	lsr	ip, ip, #5
   2b134:	cmp	r2, #0
   2b138:	moveq	ip, #0
   2b13c:	cmp	ip, #0
   2b140:	movne	r7, #22
   2b144:	beq	2aff8 <flatcc_verify_union_vector_field@@Base+0x38>
   2b148:	mov	r0, r7
   2b14c:	add	sp, sp, #40	; 0x28
   2b150:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b154:	mvn	r3, #0
   2b158:	str	r3, [sp, #4]
   2b15c:	mov	r3, #1
   2b160:	str	r3, [sp]
   2b164:	mov	r2, r9
   2b168:	mov	r1, r4
   2b16c:	mov	r0, r5
   2b170:	bl	2a088 <flatcc_verify_vector_field@@Base>
   2b174:	mov	r7, r0
   2b178:	b	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b17c:	ldrb	r2, [r4]
   2b180:	cmp	r2, #0
   2b184:	beq	2b1e4 <flatcc_verify_union_vector_field@@Base+0x224>
   2b188:	strb	r2, [sp, #24]
   2b18c:	str	r5, [sp, #28]
   2b190:	str	r3, [sp, #32]
   2b194:	add	r0, sp, #12
   2b198:	blx	r8
   2b19c:	cmp	r0, #0
   2b1a0:	bne	2b1d4 <flatcc_verify_union_vector_field@@Base+0x214>
   2b1a4:	add	r5, r5, #4
   2b1a8:	add	r4, r4, #1
   2b1ac:	cmp	r4, r9
   2b1b0:	beq	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b1b4:	ldr	r3, [r6, #4]!
   2b1b8:	cmp	r3, #0
   2b1bc:	bne	2b17c <flatcc_verify_union_vector_field@@Base+0x1bc>
   2b1c0:	ldrb	r3, [r4]
   2b1c4:	cmp	r3, #0
   2b1c8:	beq	2b1a4 <flatcc_verify_union_vector_field@@Base+0x1e4>
   2b1cc:	mov	r7, #32
   2b1d0:	b	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b1d4:	add	r0, sp, #12
   2b1d8:	blx	r8
   2b1dc:	mov	r7, r0
   2b1e0:	b	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b1e4:	mov	r7, #33	; 0x21
   2b1e8:	b	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b1ec:	add	r3, r0, r2
   2b1f0:	ldr	lr, [r0, r2]
   2b1f4:	cmn	lr, #-1073741823	; 0xc0000001
   2b1f8:	bhi	2b0cc <flatcc_verify_union_vector_field@@Base+0x10c>
   2b1fc:	sub	r9, ip, #4
   2b200:	sub	r9, r9, r2
   2b204:	cmp	r9, lr, lsl #2
   2b208:	bcc	2b0cc <flatcc_verify_union_vector_field@@Base+0x10c>
   2b20c:	cmp	r6, lr
   2b210:	movne	r7, #34	; 0x22
   2b214:	bne	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b218:	str	r0, [sp, #12]
   2b21c:	str	ip, [sp, #16]
   2b220:	sub	r1, r1, #1
   2b224:	str	r1, [sp, #20]
   2b228:	cmp	lr, #0
   2b22c:	beq	2b148 <flatcc_verify_union_vector_field@@Base+0x188>
   2b230:	mov	r6, r3
   2b234:	add	r4, r4, #4
   2b238:	add	r9, r4, lr
   2b23c:	b	2b1b4 <flatcc_verify_union_vector_field@@Base+0x1f4>
   2b240:	sub	sp, sp, #8
   2b244:	push	{r4, r5, r6, lr}
   2b248:	add	r1, sp, #12
   2b24c:	stmib	r1, {r2, r3}
   2b250:	ldrd	r2, [sp, #16]
   2b254:	ldr	r6, [sp, #24]
   2b258:	orrs	r1, r2, r3
   2b25c:	beq	2b30c <flatcc_verify_union_vector_field@@Base+0x34c>
   2b260:	mov	lr, r0
   2b264:	mov	r0, #0
   2b268:	ldr	r1, [pc, #176]	; 2b320 <flatcc_verify_union_vector_field@@Base+0x360>
   2b26c:	and	r0, r0, r2
   2b270:	and	r1, r1, r3
   2b274:	orrs	r1, r0, r1
   2b278:	subeq	ip, r6, #10
   2b27c:	bne	2b2b4 <flatcc_verify_union_vector_field@@Base+0x2f4>
   2b280:	lsl	r1, r3, #10
   2b284:	orr	r1, r1, r2, lsr #22
   2b288:	lsl	r0, r2, #10
   2b28c:	mov	r2, r0
   2b290:	mov	r3, r1
   2b294:	mov	r6, ip
   2b298:	mov	r0, #0
   2b29c:	ldr	r1, [pc, #124]	; 2b320 <flatcc_verify_union_vector_field@@Base+0x360>
   2b2a0:	and	r0, r0, r2
   2b2a4:	and	r1, r1, r3
   2b2a8:	sub	ip, ip, #10
   2b2ac:	orrs	r1, r0, r1
   2b2b0:	beq	2b280 <flatcc_verify_union_vector_field@@Base+0x2c0>
   2b2b4:	cmp	r2, #0
   2b2b8:	sbcs	r1, r3, #0
   2b2bc:	blt	2b2e8 <flatcc_verify_union_vector_field@@Base+0x328>
   2b2c0:	sub	r1, r6, #1
   2b2c4:	adds	r4, r2, r2
   2b2c8:	adc	r5, r3, r3
   2b2cc:	mov	r2, r4
   2b2d0:	mov	r3, r5
   2b2d4:	mov	r6, r1
   2b2d8:	sub	r1, r1, #1
   2b2dc:	cmp	r4, #0
   2b2e0:	sbcs	r0, r5, #0
   2b2e4:	bge	2b2c4 <flatcc_verify_union_vector_field@@Base+0x304>
   2b2e8:	strd	r2, [sp, #16]
   2b2ec:	str	r6, [sp, #24]
   2b2f0:	add	r3, sp, #12
   2b2f4:	ldmib	r3, {r0, r1, r2, r3}
   2b2f8:	stm	lr, {r0, r1, r2, r3}
   2b2fc:	mov	r0, lr
   2b300:	pop	{r4, r5, r6, lr}
   2b304:	add	sp, sp, #8
   2b308:	bx	lr
   2b30c:	ldr	r3, [pc, #16]	; 2b324 <flatcc_verify_union_vector_field@@Base+0x364>
   2b310:	mov	r2, #260	; 0x104
   2b314:	ldr	r1, [pc, #12]	; 2b328 <flatcc_verify_union_vector_field@@Base+0x368>
   2b318:	ldr	r0, [pc, #12]	; 2b32c <flatcc_verify_union_vector_field@@Base+0x36c>
   2b31c:	bl	14618 <__assert_fail@plt>
   2b320:			; <UNDEFINED> instruction: 0xffc00000
   2b324:	andeq	r1, r4, r0, lsr #3
   2b328:	andeq	r1, r4, r0, lsr #20
   2b32c:	andeq	r1, r4, r8, ror sl

0002b330 <grisu3_diy_fp_encode_double@@Base>:
   2b330:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b334:	sub	sp, sp, #76	; 0x4c
   2b338:	mov	r4, r3
   2b33c:	ldr	sl, [sp, #112]	; 0x70
   2b340:	cmp	sl, #0
   2b344:	movne	sl, #4
   2b348:	sub	r5, r2, r3
   2b34c:	strd	r0, [sp, #56]	; 0x38
   2b350:	mov	r3, #0
   2b354:	str	r3, [sp, #64]	; 0x40
   2b358:	add	ip, sp, #56	; 0x38
   2b35c:	add	r3, sp, #72	; 0x48
   2b360:	ldmdb	r3, {r0, r1}
   2b364:	stm	sp, {r0, r1}
   2b368:	ldm	ip, {r2, r3}
   2b36c:	mov	r0, ip
   2b370:	bl	2b240 <flatcc_verify_union_vector_field@@Base+0x280>
   2b374:	ldrd	r6, [sp, #56]	; 0x38
   2b378:	ldr	lr, [sp, #64]	; 0x40
   2b37c:	rsb	r0, lr, #0
   2b380:	lsl	r3, sl, r0
   2b384:	str	r3, [sp, #32]
   2b388:	cmn	r5, #348	; 0x15c
   2b38c:	blt	2b74c <grisu3_diy_fp_encode_double@@Base+0x41c>
   2b390:	cmp	r5, #348	; 0x15c
   2b394:	bge	2b760 <grisu3_diy_fp_encode_double@@Base+0x430>
   2b398:	add	r3, r5, #348	; 0x15c
   2b39c:	add	r2, r3, #7
   2b3a0:	cmp	r3, #0
   2b3a4:	movlt	r3, r2
   2b3a8:	asr	r3, r3, #3
   2b3ac:	ldr	r2, [pc, #1068]	; 2b7e0 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   2b3b0:	add	r3, r2, r3, lsl #4
   2b3b4:	ldrsh	ip, [r3, #66]	; 0x42
   2b3b8:	ldrd	r0, [r3, #56]	; 0x38
   2b3bc:	strd	r0, [sp, #24]
   2b3c0:	ldrsh	r3, [r3, #64]	; 0x40
   2b3c4:	str	r3, [sp, #36]	; 0x24
   2b3c8:	cmp	r5, ip
   2b3cc:	blt	2b774 <grisu3_diy_fp_encode_double@@Base+0x444>
   2b3d0:	add	r3, ip, #8
   2b3d4:	cmp	r5, r3
   2b3d8:	bge	2b788 <grisu3_diy_fp_encode_double@@Base+0x458>
   2b3dc:	cmp	r5, ip
   2b3e0:	beq	2b4c4 <grisu3_diy_fp_encode_double@@Base+0x194>
   2b3e4:	sub	ip, r5, ip
   2b3e8:	sub	ip, ip, #1
   2b3ec:	cmp	ip, #6
   2b3f0:	bhi	2b79c <grisu3_diy_fp_encode_double@@Base+0x46c>
   2b3f4:	ldr	r2, [pc, #1000]	; 2b7e4 <grisu3_diy_fp_encode_double@@Base+0x4b4>
   2b3f8:	lsl	r3, ip, #4
   2b3fc:	add	r5, r2, r3
   2b400:	ldrd	r8, [r2, r3]
   2b404:	mov	r3, #0
   2b408:	mov	r0, r8
   2b40c:	mov	r1, #0
   2b410:	umull	sl, fp, r6, r9
   2b414:	strd	sl, [sp, #16]
   2b418:	mla	sl, r9, r3, fp
   2b41c:	str	sl, [sp, #20]
   2b420:	umull	sl, fp, r7, r8
   2b424:	strd	sl, [sp, #8]
   2b428:	mla	sl, r7, r1, fp
   2b42c:	str	sl, [sp, #12]
   2b430:	mul	r1, r6, r1
   2b434:	mla	r3, r8, r3, r1
   2b438:	umull	r0, r1, r6, r0
   2b43c:	add	r1, r3, r1
   2b440:	mov	r2, r1
   2b444:	mov	r3, #0
   2b448:	ldr	r1, [sp, #8]
   2b44c:	adds	r2, r2, r1
   2b450:	adc	r3, r3, #0
   2b454:	adds	r2, r2, #-2147483648	; 0x80000000
   2b458:	adc	r3, r3, #0
   2b45c:	ldrd	sl, [sp, #16]
   2b460:	adds	r2, r2, sl
   2b464:	adc	r3, r3, #0
   2b468:	mov	r0, r3
   2b46c:	mov	r1, #0
   2b470:	ldr	r3, [sp, #12]
   2b474:	str	r3, [sp, #16]
   2b478:	str	r1, [sp, #20]
   2b47c:	mov	r2, fp
   2b480:	ldrd	sl, [sp, #16]
   2b484:	adds	sl, sl, r2
   2b488:	adc	fp, fp, r1
   2b48c:	mov	r2, sl
   2b490:	mov	r3, fp
   2b494:	umlal	r2, r3, r9, r7
   2b498:	adds	r6, r0, r2
   2b49c:	adc	r7, r1, r3
   2b4a0:	ldr	r3, [r5, #8]
   2b4a4:	add	lr, lr, r3
   2b4a8:	add	lr, lr, #64	; 0x40
   2b4ac:	add	r4, r4, #1
   2b4b0:	add	ip, r4, ip
   2b4b4:	cmp	ip, #19
   2b4b8:	ldrgt	r3, [sp, #32]
   2b4bc:	addgt	r3, r3, #4
   2b4c0:	strgt	r3, [sp, #32]
   2b4c4:	mov	ip, #0
   2b4c8:	mov	r2, r6
   2b4cc:	mov	r3, #0
   2b4d0:	ldrd	sl, [sp, #24]
   2b4d4:	mov	r8, sl
   2b4d8:	mov	r9, #0
   2b4dc:	umull	r0, r1, r6, fp
   2b4e0:	mla	r1, fp, r3, r1
   2b4e4:	umull	r4, r5, r7, sl
   2b4e8:	mla	r5, r7, r9, r5
   2b4ec:	mul	r6, r6, r9
   2b4f0:	mla	r3, sl, r3, r6
   2b4f4:	umull	r8, r9, r2, r8
   2b4f8:	add	r9, r3, r9
   2b4fc:	adds	r2, r9, r4
   2b500:	adc	r3, ip, #0
   2b504:	adds	r2, r2, #-2147483648	; 0x80000000
   2b508:	adc	r3, r3, #0
   2b50c:	adds	r2, r2, r0
   2b510:	adc	r3, r3, #0
   2b514:	mov	r8, r3
   2b518:	mov	r2, r5
   2b51c:	adds	r2, r2, r1
   2b520:	adc	r3, ip, ip
   2b524:	umlal	r2, r3, fp, r7
   2b528:	adds	r8, r8, r2
   2b52c:	adc	r9, ip, r3
   2b530:	ldr	r3, [sp, #36]	; 0x24
   2b534:	add	fp, lr, r3
   2b538:	add	fp, fp, #64	; 0x40
   2b53c:	ldr	r3, [sp, #32]
   2b540:	cmp	r3, ip
   2b544:	movne	r0, #9
   2b548:	moveq	r0, #8
   2b54c:	add	sl, r3, r0
   2b550:	strd	r8, [sp, #56]	; 0x38
   2b554:	str	fp, [sp, #64]	; 0x40
   2b558:	add	r5, sp, #40	; 0x28
   2b55c:	add	r3, sp, #72	; 0x48
   2b560:	ldmdb	r3, {r0, r1}
   2b564:	stm	sp, {r0, r1}
   2b568:	add	r4, sp, #56	; 0x38
   2b56c:	ldm	r4, {r2, r3}
   2b570:	mov	r0, r5
   2b574:	bl	2b240 <flatcc_verify_union_vector_field@@Base+0x280>
   2b578:	ldm	r5, {r0, r1, r2, r3}
   2b57c:	stm	r4, {r0, r1, r2, r3}
   2b580:	ldrd	r4, [sp, #56]	; 0x38
   2b584:	ldr	r1, [sp, #64]	; 0x40
   2b588:	sub	r0, fp, r1
   2b58c:	lsl	r0, sl, r0
   2b590:	add	r3, r1, #64	; 0x40
   2b594:	ldr	r2, [pc, #588]	; 2b7e8 <grisu3_diy_fp_encode_double@@Base+0x4b8>
   2b598:	cmp	r3, r2
   2b59c:	movge	r8, #0
   2b5a0:	bge	2b5fc <grisu3_diy_fp_encode_double@@Base+0x2cc>
   2b5a4:	mvn	r2, #1072	; 0x430
   2b5a8:	cmp	r3, r2
   2b5ac:	blt	2b7b0 <grisu3_diy_fp_encode_double@@Base+0x480>
   2b5b0:	add	r8, r1, #1136	; 0x470
   2b5b4:	add	r8, r8, #2
   2b5b8:	rsb	r3, r8, #67	; 0x43
   2b5bc:	cmp	r3, #63	; 0x3f
   2b5c0:	rsble	r8, r8, #64	; 0x40
   2b5c4:	ble	2b5fc <grisu3_diy_fp_encode_double@@Base+0x2cc>
   2b5c8:	rsb	r3, r8, #2
   2b5cc:	rsb	lr, r3, #32
   2b5d0:	sub	ip, r3, #32
   2b5d4:	lsr	r2, r4, r3
   2b5d8:	orr	r2, r2, r5, lsl lr
   2b5dc:	orr	r2, r2, r5, lsr ip
   2b5e0:	lsr	ip, r5, r3
   2b5e4:	mov	r4, r2
   2b5e8:	mov	r5, ip
   2b5ec:	add	r1, r1, r3
   2b5f0:	asr	r0, r0, r3
   2b5f4:	add	r0, r0, #9
   2b5f8:	mov	r8, #62	; 0x3e
   2b5fc:	rsb	lr, r8, #32
   2b600:	sub	ip, r8, #32
   2b604:	lsr	r2, r4, r8
   2b608:	orr	r2, r2, r5, lsl lr
   2b60c:	orr	r2, r2, r5, lsr ip
   2b610:	lsr	r3, r5, r8
   2b614:	add	r1, r8, r1
   2b618:	sub	lr, r8, #1
   2b61c:	mov	ip, #1
   2b620:	lsl	r6, ip, lr
   2b624:	and	r4, r4, r6
   2b628:	lsl	ip, r4, #3
   2b62c:	mov	r4, #8
   2b630:	lsl	lr, r4, lr
   2b634:	add	r6, r0, lr
   2b638:	cmp	r8, r6
   2b63c:	blt	2b664 <grisu3_diy_fp_encode_double@@Base+0x334>
   2b640:	adds	r2, r2, #1
   2b644:	adc	r3, r3, #0
   2b648:	mov	r4, #0
   2b64c:	and	r5, r3, #2097152	; 0x200000
   2b650:	orrs	r4, r4, r5
   2b654:	beq	2b664 <grisu3_diy_fp_encode_double@@Base+0x334>
   2b658:	lsrs	r3, r3, #1
   2b65c:	rrx	r2, r2
   2b660:	add	r1, r1, #1
   2b664:	mvn	r4, #0
   2b668:	ldr	r5, [pc, #380]	; 2b7ec <grisu3_diy_fp_encode_double@@Base+0x4bc>
   2b66c:	cmp	r3, r5
   2b670:	cmpeq	r2, r4
   2b674:	bls	2b690 <grisu3_diy_fp_encode_double@@Base+0x360>
   2b678:	lsrs	r3, r3, #1
   2b67c:	rrx	r2, r2
   2b680:	add	r1, r1, #1
   2b684:	cmp	r3, r5
   2b688:	cmpeq	r2, r4
   2b68c:	bhi	2b678 <grisu3_diy_fp_encode_double@@Base+0x348>
   2b690:	ldr	r4, [pc, #344]	; 2b7f0 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   2b694:	cmp	r1, r4
   2b698:	movlt	r2, #0
   2b69c:	movlt	r3, #0
   2b6a0:	blt	2b720 <grisu3_diy_fp_encode_double@@Base+0x3f0>
   2b6a4:	mvn	r4, #1072	; 0x430
   2b6a8:	cmp	r1, r4
   2b6ac:	blt	2b7b8 <grisu3_diy_fp_encode_double@@Base+0x488>
   2b6b0:	mov	r4, #0
   2b6b4:	and	r5, r3, #1048576	; 0x100000
   2b6b8:	orrs	r4, r4, r5
   2b6bc:	bne	2b6f8 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   2b6c0:	sub	r7, r1, #1
   2b6c4:	ldr	r8, [pc, #292]	; 2b7f0 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   2b6c8:	adds	r4, r2, r2
   2b6cc:	adc	r5, r3, r3
   2b6d0:	mov	r2, r4
   2b6d4:	mov	r3, r5
   2b6d8:	mov	r1, r7
   2b6dc:	cmp	r7, r8
   2b6e0:	beq	2b7c4 <grisu3_diy_fp_encode_double@@Base+0x494>
   2b6e4:	mov	r4, #0
   2b6e8:	and	r5, r5, #1048576	; 0x100000
   2b6ec:	sub	r7, r7, #1
   2b6f0:	orrs	r4, r4, r5
   2b6f4:	beq	2b6c8 <grisu3_diy_fp_encode_double@@Base+0x398>
   2b6f8:	add	r8, r1, #1072	; 0x430
   2b6fc:	add	r8, r8, #3
   2b700:	mvn	r4, #0
   2b704:	ldr	r5, [pc, #232]	; 2b7f4 <grisu3_diy_fp_encode_double@@Base+0x4c4>
   2b708:	and	r2, r2, r4
   2b70c:	and	r3, r3, r5
   2b710:	mov	r4, #0
   2b714:	lsl	r5, r8, #20
   2b718:	orr	r2, r2, r4
   2b71c:	orr	r3, r3, r5
   2b720:	ldr	r1, [sp, #116]	; 0x74
   2b724:	strd	r2, [r1]
   2b728:	sub	r0, lr, r0
   2b72c:	cmp	ip, r6
   2b730:	movlt	r6, #0
   2b734:	movge	r6, #1
   2b738:	cmp	ip, r0
   2b73c:	movgt	r0, r6
   2b740:	orrle	r0, r6, #1
   2b744:	add	sp, sp, #76	; 0x4c
   2b748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b74c:	ldr	r3, [pc, #164]	; 2b7f8 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   2b750:	mov	r2, #80	; 0x50
   2b754:	ldr	r1, [pc, #160]	; 2b7fc <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2b758:	ldr	r0, [pc, #160]	; 2b800 <grisu3_diy_fp_encode_double@@Base+0x4d0>
   2b75c:	bl	14618 <__assert_fail@plt>
   2b760:	ldr	r3, [pc, #144]	; 2b7f8 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   2b764:	mov	r2, #81	; 0x51
   2b768:	ldr	r1, [pc, #140]	; 2b7fc <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2b76c:	ldr	r0, [pc, #144]	; 2b804 <grisu3_diy_fp_encode_double@@Base+0x4d4>
   2b770:	bl	14618 <__assert_fail@plt>
   2b774:	add	r3, r2, #24
   2b778:	mov	r2, #88	; 0x58
   2b77c:	ldr	r1, [pc, #120]	; 2b7fc <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2b780:	ldr	r0, [pc, #128]	; 2b808 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   2b784:	bl	14618 <__assert_fail@plt>
   2b788:	ldr	r3, [pc, #104]	; 2b7f8 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   2b78c:	mov	r2, #89	; 0x59
   2b790:	ldr	r1, [pc, #100]	; 2b7fc <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2b794:	ldr	r0, [pc, #112]	; 2b80c <grisu3_diy_fp_encode_double@@Base+0x4dc>
   2b798:	bl	14618 <__assert_fail@plt>
   2b79c:	ldr	r3, [pc, #108]	; 2b810 <grisu3_diy_fp_encode_double@@Base+0x4e0>
   2b7a0:	mov	r2, #185	; 0xb9
   2b7a4:	ldr	r1, [pc, #80]	; 2b7fc <grisu3_diy_fp_encode_double@@Base+0x4cc>
   2b7a8:	ldr	r0, [pc, #100]	; 2b814 <grisu3_diy_fp_encode_double@@Base+0x4e4>
   2b7ac:	bl	14618 <__assert_fail@plt>
   2b7b0:	mov	r8, #0
   2b7b4:	b	2b5c8 <grisu3_diy_fp_encode_double@@Base+0x298>
   2b7b8:	ldr	r4, [pc, #48]	; 2b7f0 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   2b7bc:	cmp	r1, r4
   2b7c0:	bne	2b6f8 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   2b7c4:	mov	r4, #0
   2b7c8:	and	r5, r3, #1048576	; 0x100000
   2b7cc:	orrs	r1, r4, r5
   2b7d0:	moveq	r8, #0
   2b7d4:	beq	2b700 <grisu3_diy_fp_encode_double@@Base+0x3d0>
   2b7d8:	ldr	r1, [pc, #16]	; 2b7f0 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   2b7dc:	b	2b6f8 <grisu3_diy_fp_encode_double@@Base+0x3c8>
   2b7e0:	andeq	r1, r4, r0, lsr #3
   2b7e4:	andeq	r1, r4, r8, ror #14
   2b7e8:			; <UNDEFINED> instruction: 0xfffffc0e
   2b7ec:			; <UNDEFINED> instruction: 0x001fffff
   2b7f0:			; <UNDEFINED> instruction: 0xfffffbce
   2b7f4:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   2b7f8:			; <UNDEFINED> instruction: 0x000411b8
   2b7fc:	andeq	r1, r4, r4, lsl #21
   2b800:	ldrdeq	r1, [r4], -ip
   2b804:	strdeq	r1, [r4], -ip
   2b808:	andeq	r1, r4, r8, lsr #22
   2b80c:	andeq	r1, r4, r8, lsr fp
   2b810:	andeq	r1, r4, r8, asr #14
   2b814:	andeq	r1, r4, r4, asr fp
   2b818:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b81c:	sub	sp, sp, #44	; 0x2c
   2b820:	str	r0, [sp, #12]
   2b824:	mov	ip, r2
   2b828:	str	r2, [sp, #20]
   2b82c:	mov	r2, #0
   2b830:	mov	r3, #0
   2b834:	strd	r2, [ip]
   2b838:	cmp	r1, #1000	; 0x3e8
   2b83c:	addle	r1, r1, #1
   2b840:	movle	r3, r0
   2b844:	addle	r9, r3, r1
   2b848:	ldrgt	r3, [sp, #12]
   2b84c:	addgt	r9, r3, #1000	; 0x3e8
   2b850:	addgt	r9, r9, #1
   2b854:	ldr	r3, [sp, #12]
   2b858:	cmp	r9, r3
   2b85c:	beq	2c144 <grisu3_diy_fp_encode_double@@Base+0xe14>
   2b860:	ldrb	r3, [r3]
   2b864:	cmp	r3, #45	; 0x2d
   2b868:	beq	2b8b0 <grisu3_diy_fp_encode_double@@Base+0x580>
   2b86c:	ldr	r3, [sp, #12]
   2b870:	mov	r2, #0
   2b874:	str	r2, [sp, #16]
   2b878:	ldrb	r0, [r3]
   2b87c:	cmp	r0, #48	; 0x30
   2b880:	beq	2b8cc <grisu3_diy_fp_encode_double@@Base+0x59c>
   2b884:	sub	r2, r0, #49	; 0x31
   2b888:	uxtb	r2, r2
   2b88c:	cmp	r2, #8
   2b890:	bls	2b940 <grisu3_diy_fp_encode_double@@Base+0x610>
   2b894:	ldr	r4, [sp, #12]
   2b898:	ldr	r3, [sp, #16]
   2b89c:	cmp	r3, #0
   2b8a0:	movne	r4, #0
   2b8a4:	mov	r0, r4
   2b8a8:	add	sp, sp, #44	; 0x2c
   2b8ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b8b0:	ldr	r3, [sp, #12]
   2b8b4:	add	r3, r3, #1
   2b8b8:	cmp	r9, r3
   2b8bc:	beq	2c14c <grisu3_diy_fp_encode_double@@Base+0xe1c>
   2b8c0:	mov	r2, #1
   2b8c4:	str	r2, [sp, #16]
   2b8c8:	b	2b878 <grisu3_diy_fp_encode_double@@Base+0x548>
   2b8cc:	add	r5, r3, #1
   2b8d0:	cmp	r9, r5
   2b8d4:	beq	2c1c4 <grisu3_diy_fp_encode_double@@Base+0xe94>
   2b8d8:	ldrb	r2, [r3, #1]
   2b8dc:	orr	r1, r2, #32
   2b8e0:	cmp	r1, #120	; 0x78
   2b8e4:	beq	2c154 <grisu3_diy_fp_encode_double@@Base+0xe24>
   2b8e8:	cmp	r2, #48	; 0x30
   2b8ec:	bne	2b914 <grisu3_diy_fp_encode_double@@Base+0x5e4>
   2b8f0:	add	r3, r3, #2
   2b8f4:	mov	r1, r9
   2b8f8:	mov	r5, r3
   2b8fc:	cmp	r3, r1
   2b900:	beq	2c15c <grisu3_diy_fp_encode_double@@Base+0xe2c>
   2b904:	add	r3, r3, #1
   2b908:	ldrb	r2, [r5]
   2b90c:	cmp	r2, #48	; 0x30
   2b910:	beq	2b8f8 <grisu3_diy_fp_encode_double@@Base+0x5c8>
   2b914:	ldrb	r2, [r5]
   2b918:	sub	r3, r2, #48	; 0x30
   2b91c:	uxtb	r3, r3
   2b920:	cmp	r3, #9
   2b924:	movhi	r4, r5
   2b928:	movhi	sl, #0
   2b92c:	movhi	fp, #0
   2b930:	bhi	2c1f4 <grisu3_diy_fp_encode_double@@Base+0xec4>
   2b934:	mov	sl, #0
   2b938:	mov	fp, #0
   2b93c:	b	2b984 <grisu3_diy_fp_encode_double@@Base+0x654>
   2b940:	add	r5, r3, #1
   2b944:	sub	r0, r0, #48	; 0x30
   2b948:	mov	sl, r0
   2b94c:	asr	fp, r0, #31
   2b950:	cmp	r9, r5
   2b954:	moveq	r4, #0
   2b958:	beq	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2b95c:	ldrb	r2, [r3, #1]
   2b960:	sub	r3, r2, #48	; 0x30
   2b964:	uxtb	r3, r3
   2b968:	cmp	r3, #9
   2b96c:	bhi	2c1f0 <grisu3_diy_fp_encode_double@@Base+0xec0>
   2b970:	add	r1, pc, #896	; 0x380
   2b974:	ldrd	r0, [r1]
   2b978:	cmp	fp, r1
   2b97c:	cmpeq	sl, r0
   2b980:	bhi	2bb4c <grisu3_diy_fp_encode_double@@Base+0x81c>
   2b984:	add	ip, r5, #1
   2b988:	mov	r8, r9
   2b98c:	mov	lr, #10
   2b990:	add	r7, pc, #864	; 0x360
   2b994:	ldrd	r6, [r7]
   2b998:	mov	r4, ip
   2b99c:	umull	r0, r1, sl, lr
   2b9a0:	mla	r1, lr, fp, r1
   2b9a4:	uxtb	sl, r2
   2b9a8:	mov	fp, #0
   2b9ac:	adds	sl, sl, r0
   2b9b0:	adc	fp, fp, r1
   2b9b4:	subs	sl, sl, #48	; 0x30
   2b9b8:	sbc	fp, fp, #0
   2b9bc:	cmp	ip, r8
   2b9c0:	beq	2c1d4 <grisu3_diy_fp_encode_double@@Base+0xea4>
   2b9c4:	ldrb	r2, [ip], #1
   2b9c8:	sub	r3, r2, #48	; 0x30
   2b9cc:	uxtb	r3, r3
   2b9d0:	cmp	r3, #9
   2b9d4:	bhi	2c1f4 <grisu3_diy_fp_encode_double@@Base+0xec4>
   2b9d8:	cmp	fp, r7
   2b9dc:	cmpeq	sl, r6
   2b9e0:	bls	2b998 <grisu3_diy_fp_encode_double@@Base+0x668>
   2b9e4:	mov	r1, r4
   2b9e8:	cmp	r2, #52	; 0x34
   2b9ec:	movls	r2, #0
   2b9f0:	movhi	r2, #1
   2b9f4:	adds	sl, sl, r2
   2b9f8:	adc	fp, fp, #0
   2b9fc:	sub	r8, r1, r5
   2ba00:	cmp	r9, r1
   2ba04:	moveq	r4, #0
   2ba08:	beq	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2ba0c:	mov	r3, #1
   2ba10:	str	r3, [sp, #24]
   2ba14:	ldrb	r3, [r1]
   2ba18:	cmp	r3, #48	; 0x30
   2ba1c:	bne	2c208 <grisu3_diy_fp_encode_double@@Base+0xed8>
   2ba20:	add	r2, r1, #1
   2ba24:	mov	ip, r9
   2ba28:	sub	r3, r2, r1
   2ba2c:	mov	r4, r2
   2ba30:	cmp	r2, ip
   2ba34:	beq	2c164 <grisu3_diy_fp_encode_double@@Base+0xe34>
   2ba38:	add	r2, r2, #1
   2ba3c:	ldrb	r0, [r4]
   2ba40:	cmp	r0, #48	; 0x30
   2ba44:	beq	2ba28 <grisu3_diy_fp_encode_double@@Base+0x6f8>
   2ba48:	ldrb	r2, [r4]
   2ba4c:	sub	r2, r2, #49	; 0x31
   2ba50:	uxtb	r2, r2
   2ba54:	cmp	r2, #8
   2ba58:	bhi	2babc <grisu3_diy_fp_encode_double@@Base+0x78c>
   2ba5c:	add	r0, r3, #1
   2ba60:	add	r1, r4, #1
   2ba64:	cmp	r9, r1
   2ba68:	beq	2c16c <grisu3_diy_fp_encode_double@@Base+0xe3c>
   2ba6c:	ldrb	r2, [r4, #1]
   2ba70:	sub	r2, r2, #48	; 0x30
   2ba74:	uxtb	r2, r2
   2ba78:	cmp	r2, #9
   2ba7c:	bhi	2c214 <grisu3_diy_fp_encode_double@@Base+0xee4>
   2ba80:	add	r1, r4, #2
   2ba84:	mov	r0, r9
   2ba88:	sub	ip, r3, r4
   2ba8c:	add	r3, ip, r1
   2ba90:	mov	r4, r1
   2ba94:	cmp	r1, r0
   2ba98:	beq	2c174 <grisu3_diy_fp_encode_double@@Base+0xe44>
   2ba9c:	add	r1, r1, #1
   2baa0:	ldrb	r2, [r4]
   2baa4:	sub	r2, r2, #48	; 0x30
   2baa8:	uxtb	r2, r2
   2baac:	cmp	r2, #9
   2bab0:	bls	2ba8c <grisu3_diy_fp_encode_double@@Base+0x75c>
   2bab4:	mov	r2, #1
   2bab8:	str	r2, [sp, #24]
   2babc:	ldrb	r2, [r4]
   2bac0:	cmp	r2, #46	; 0x2e
   2bac4:	beq	2bb54 <grisu3_diy_fp_encode_double@@Base+0x824>
   2bac8:	add	r3, r3, r8
   2bacc:	ldrb	r2, [r4]
   2bad0:	orr	r2, r2, #32
   2bad4:	cmp	r2, #101	; 0x65
   2bad8:	movne	r2, #0
   2badc:	beq	2bd10 <grisu3_diy_fp_encode_double@@Base+0x9e0>
   2bae0:	add	r5, r2, r3
   2bae4:	cmp	r9, r4
   2bae8:	moveq	r4, #0
   2baec:	beq	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2baf0:	ldr	r6, [sp, #20]
   2baf4:	ldr	r7, [sp, #12]
   2baf8:	orrs	r3, sl, fp
   2bafc:	moveq	r2, #1
   2bb00:	movne	r2, #0
   2bb04:	cmn	r5, #324	; 0x144
   2bb08:	movge	r3, #0
   2bb0c:	movlt	r3, #1
   2bb10:	orrs	r3, r2, r3
   2bb14:	bne	2bb34 <grisu3_diy_fp_encode_double@@Base+0x804>
   2bb18:	sub	r2, r5, #1
   2bb1c:	ldr	r3, [pc, #476]	; 2bd00 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   2bb20:	cmp	r2, r3
   2bb24:	ble	2bde4 <grisu3_diy_fp_encode_double@@Base+0xab4>
   2bb28:	mov	r2, #0
   2bb2c:	ldr	r3, [pc, #464]	; 2bd04 <grisu3_diy_fp_encode_double@@Base+0x9d4>
   2bb30:	strd	r2, [r6]
   2bb34:	ldr	r3, [sp, #16]
   2bb38:	cmp	r3, #0
   2bb3c:	vldrne	d7, [r6]
   2bb40:	vnegne.f64	d7, d7
   2bb44:	vstrne	d7, [r6]
   2bb48:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2bb4c:	mov	r1, r5
   2bb50:	b	2b9e8 <grisu3_diy_fp_encode_double@@Base+0x6b8>
   2bb54:	add	r2, r4, #1
   2bb58:	mov	r1, r2
   2bb5c:	str	r2, [sp, #28]
   2bb60:	ldrb	r5, [r4, #1]
   2bb64:	sub	r2, r5, #48	; 0x30
   2bb68:	uxtb	r2, r2
   2bb6c:	cmp	r2, #9
   2bb70:	bhi	2c17c <grisu3_diy_fp_encode_double@@Base+0xe4c>
   2bb74:	cmp	r9, r1
   2bb78:	beq	2c184 <grisu3_diy_fp_encode_double@@Base+0xe54>
   2bb7c:	add	r7, pc, #372	; 0x174
   2bb80:	ldrd	r6, [r7]
   2bb84:	cmp	fp, r7
   2bb88:	cmpeq	sl, r6
   2bb8c:	bhi	2c268 <grisu3_diy_fp_encode_double@@Base+0xf38>
   2bb90:	add	ip, r4, #2
   2bb94:	mov	lr, r9
   2bb98:	mov	r2, #10
   2bb9c:	add	r7, pc, #340	; 0x154
   2bba0:	ldrd	r6, [r7]
   2bba4:	mov	r4, ip
   2bba8:	umull	r0, r1, sl, r2
   2bbac:	mla	r1, r2, fp, r1
   2bbb0:	uxtb	sl, r5
   2bbb4:	mov	fp, #0
   2bbb8:	adds	sl, sl, r0
   2bbbc:	adc	fp, fp, r1
   2bbc0:	subs	sl, sl, #48	; 0x30
   2bbc4:	sbc	fp, fp, #0
   2bbc8:	sub	r3, r3, #1
   2bbcc:	cmp	lr, ip
   2bbd0:	beq	2c228 <grisu3_diy_fp_encode_double@@Base+0xef8>
   2bbd4:	mov	r0, ip
   2bbd8:	ldrb	r5, [r0], #1
   2bbdc:	sub	r1, r5, #48	; 0x30
   2bbe0:	uxtb	r1, r1
   2bbe4:	cmp	r1, #9
   2bbe8:	bhi	2bce8 <grisu3_diy_fp_encode_double@@Base+0x9b8>
   2bbec:	cmp	fp, r7
   2bbf0:	cmpeq	sl, r6
   2bbf4:	movls	ip, r0
   2bbf8:	bls	2bba4 <grisu3_diy_fp_encode_double@@Base+0x874>
   2bbfc:	ldr	r2, [sp, #24]
   2bc00:	cmp	r2, #0
   2bc04:	bne	2bc1c <grisu3_diy_fp_encode_double@@Base+0x8ec>
   2bc08:	cmp	r5, #52	; 0x34
   2bc0c:	movls	r5, #0
   2bc10:	movhi	r5, #1
   2bc14:	adds	sl, sl, r5
   2bc18:	adc	fp, fp, #0
   2bc1c:	ldr	r2, [sp, #28]
   2bc20:	sub	r2, r4, r2
   2bc24:	add	r8, r8, r2
   2bc28:	cmp	r9, r4
   2bc2c:	moveq	r4, #0
   2bc30:	beq	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2bc34:	mov	r2, #1
   2bc38:	str	r2, [sp, #24]
   2bc3c:	ldrb	r2, [r4]
   2bc40:	cmp	r2, #48	; 0x30
   2bc44:	bne	2bc74 <grisu3_diy_fp_encode_double@@Base+0x944>
   2bc48:	add	r2, r4, #1
   2bc4c:	mov	ip, r9
   2bc50:	sub	r0, r3, r4
   2bc54:	add	r3, r0, r2
   2bc58:	mov	r4, r2
   2bc5c:	cmp	r2, ip
   2bc60:	beq	2c18c <grisu3_diy_fp_encode_double@@Base+0xe5c>
   2bc64:	add	r2, r2, #1
   2bc68:	ldrb	r1, [r4]
   2bc6c:	cmp	r1, #48	; 0x30
   2bc70:	beq	2bc54 <grisu3_diy_fp_encode_double@@Base+0x924>
   2bc74:	ldrb	r2, [r4]
   2bc78:	sub	r2, r2, #49	; 0x31
   2bc7c:	uxtb	r2, r2
   2bc80:	cmp	r2, #8
   2bc84:	bhi	2bac8 <grisu3_diy_fp_encode_double@@Base+0x798>
   2bc88:	add	r1, r4, #1
   2bc8c:	cmp	r9, r1
   2bc90:	beq	2c194 <grisu3_diy_fp_encode_double@@Base+0xe64>
   2bc94:	ldrb	r2, [r4, #1]
   2bc98:	sub	r2, r2, #48	; 0x30
   2bc9c:	uxtb	r2, r2
   2bca0:	cmp	r2, #9
   2bca4:	bhi	2c244 <grisu3_diy_fp_encode_double@@Base+0xf14>
   2bca8:	add	r1, r4, #2
   2bcac:	mov	r0, r9
   2bcb0:	mov	r4, r1
   2bcb4:	cmp	r0, r1
   2bcb8:	beq	2c19c <grisu3_diy_fp_encode_double@@Base+0xe6c>
   2bcbc:	add	r1, r1, #1
   2bcc0:	ldrb	r2, [r4]
   2bcc4:	sub	r2, r2, #48	; 0x30
   2bcc8:	uxtb	r2, r2
   2bccc:	cmp	r2, #9
   2bcd0:	bls	2bcb0 <grisu3_diy_fp_encode_double@@Base+0x980>
   2bcd4:	mov	r2, #1
   2bcd8:	str	r2, [sp, #24]
   2bcdc:	b	2bac8 <grisu3_diy_fp_encode_double@@Base+0x798>
   2bce0:	ldr	r4, [sp, #28]
   2bce4:	b	2bc08 <grisu3_diy_fp_encode_double@@Base+0x8d8>
   2bce8:	ldr	r2, [sp, #28]
   2bcec:	sub	ip, ip, r2
   2bcf0:	add	r8, r8, ip
   2bcf4:	b	2bc3c <grisu3_diy_fp_encode_double@@Base+0x90c>
   2bcf8:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2bcfc:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   2bd00:	andeq	r0, r0, r5, lsr r1
   2bd04:	svcvc	0x00f00000	; IMB
   2bd08:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   2bd0c:			; <UNDEFINED> instruction: 0x001fffff
   2bd10:	sub	r2, r9, r4
   2bd14:	cmp	r2, #1
   2bd18:	ble	2c1a4 <grisu3_diy_fp_encode_double@@Base+0xe74>
   2bd1c:	ldrb	r2, [r4, #1]
   2bd20:	cmp	r2, #43	; 0x2b
   2bd24:	beq	2bdbc <grisu3_diy_fp_encode_double@@Base+0xa8c>
   2bd28:	cmp	r2, #45	; 0x2d
   2bd2c:	beq	2bdd0 <grisu3_diy_fp_encode_double@@Base+0xaa0>
   2bd30:	add	r1, r4, #1
   2bd34:	mov	r6, #0
   2bd38:	ldrb	r2, [r1]
   2bd3c:	sub	r0, r2, #48	; 0x30
   2bd40:	uxtb	r0, r0
   2bd44:	cmp	r0, #9
   2bd48:	bhi	2c1bc <grisu3_diy_fp_encode_double@@Base+0xe8c>
   2bd4c:	add	r4, r1, #1
   2bd50:	sub	r2, r2, #48	; 0x30
   2bd54:	cmp	r9, r4
   2bd58:	beq	2c254 <grisu3_diy_fp_encode_double@@Base+0xf24>
   2bd5c:	ldrb	ip, [r1, #1]
   2bd60:	sub	r0, ip, #48	; 0x30
   2bd64:	uxtb	r0, r0
   2bd68:	cmp	r0, #9
   2bd6c:	bhi	2bdac <grisu3_diy_fp_encode_double@@Base+0xa7c>
   2bd70:	add	r1, r1, #2
   2bd74:	mov	lr, r9
   2bd78:	ldr	r5, [pc, #-120]	; 2bd08 <grisu3_diy_fp_encode_double@@Base+0x9d8>
   2bd7c:	cmp	r2, r5
   2bd80:	addle	r2, r2, r2, lsl #2
   2bd84:	addle	r2, ip, r2, lsl #1
   2bd88:	suble	r2, r2, #48	; 0x30
   2bd8c:	mov	r4, r1
   2bd90:	cmp	lr, r1
   2bd94:	beq	2c254 <grisu3_diy_fp_encode_double@@Base+0xf24>
   2bd98:	ldrb	ip, [r1], #1
   2bd9c:	sub	r0, ip, #48	; 0x30
   2bda0:	uxtb	r0, r0
   2bda4:	cmp	r0, #9
   2bda8:	bls	2bd7c <grisu3_diy_fp_encode_double@@Base+0xa4c>
   2bdac:	cmp	r6, #0
   2bdb0:	bne	2c260 <grisu3_diy_fp_encode_double@@Base+0xf30>
   2bdb4:	add	r5, r3, r2
   2bdb8:	b	2baf0 <grisu3_diy_fp_encode_double@@Base+0x7c0>
   2bdbc:	add	r1, r4, #2
   2bdc0:	cmp	r9, r1
   2bdc4:	beq	2c1ac <grisu3_diy_fp_encode_double@@Base+0xe7c>
   2bdc8:	mov	r6, #0
   2bdcc:	b	2bd38 <grisu3_diy_fp_encode_double@@Base+0xa08>
   2bdd0:	add	r1, r4, #2
   2bdd4:	cmp	r9, r1
   2bdd8:	beq	2c1b4 <grisu3_diy_fp_encode_double@@Base+0xe84>
   2bddc:	mov	r6, #1
   2bde0:	b	2bd38 <grisu3_diy_fp_encode_double@@Base+0xa08>
   2bde4:	mvn	r2, #0
   2bde8:	ldr	r3, [pc, #-228]	; 2bd0c <grisu3_diy_fp_encode_double@@Base+0x9dc>
   2bdec:	cmp	fp, r3
   2bdf0:	cmpeq	sl, r2
   2bdf4:	movls	r3, #1
   2bdf8:	movhi	r3, #0
   2bdfc:	cmp	r5, #22
   2be00:	movhi	r3, #0
   2be04:	andls	r3, r3, #1
   2be08:	cmp	r3, #0
   2be0c:	beq	2c0fc <grisu3_diy_fp_encode_double@@Base+0xdcc>
   2be10:	mov	r0, sl
   2be14:	mov	r1, fp
   2be18:	bl	3cc2c <flatcc_json_printer_clear@@Base+0x588>
   2be1c:	vmov	d7, r0, r1
   2be20:	sub	r3, r5, r8
   2be24:	add	r3, r3, #22
   2be28:	cmp	r3, #44	; 0x2c
   2be2c:	ldrls	pc, [pc, r3, lsl #2]
   2be30:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2be34:	andeq	fp, r2, r8, ror #29
   2be38:	strdeq	fp, [r2], -r8
   2be3c:	andeq	fp, r2, r4, lsl #30
   2be40:	andeq	fp, r2, r0, lsl pc
   2be44:	andeq	fp, r2, ip, lsl pc
   2be48:	andeq	fp, r2, r8, lsr #30
   2be4c:	andeq	fp, r2, r4, lsr pc
   2be50:	andeq	fp, r2, r0, asr #30
   2be54:	andeq	fp, r2, ip, asr #30
   2be58:	andeq	fp, r2, r8, asr pc
   2be5c:	andeq	fp, r2, r4, ror #30
   2be60:	andeq	fp, r2, r0, ror pc
   2be64:	andeq	fp, r2, ip, ror pc
   2be68:	andeq	fp, r2, r8, lsl #31
   2be6c:	muleq	r2, r4, pc	; <UNPREDICTABLE>
   2be70:	andeq	fp, r2, r0, lsr #31
   2be74:	andeq	fp, r2, ip, lsr #31
   2be78:			; <UNDEFINED> instruction: 0x0002bfb8
   2be7c:	andeq	fp, r2, r4, asr #31
   2be80:	ldrdeq	fp, [r2], -r0
   2be84:	ldrdeq	fp, [r2], -ip
   2be88:	andeq	fp, r2, r8, ror #31
   2be8c:	strdeq	fp, [r2], -r0
   2be90:	strdeq	fp, [r2], -r4
   2be94:	andeq	ip, r2, r0
   2be98:	andeq	ip, r2, ip
   2be9c:	andeq	ip, r2, r8, lsl r0
   2bea0:	andeq	ip, r2, r4, lsr #32
   2bea4:	andeq	ip, r2, r0, lsr r0
   2bea8:	andeq	ip, r2, ip, lsr r0
   2beac:	andeq	ip, r2, r8, asr #32
   2beb0:	andeq	ip, r2, r4, asr r0
   2beb4:	andeq	ip, r2, r0, rrx
   2beb8:	andeq	ip, r2, ip, rrx
   2bebc:	andeq	ip, r2, r8, ror r0
   2bec0:	andeq	ip, r2, r4, lsl #1
   2bec4:	muleq	r2, r0, r0
   2bec8:	muleq	r2, ip, r0
   2becc:	andeq	ip, r2, r8, lsr #1
   2bed0:	strheq	ip, [r2], -r4
   2bed4:	andeq	ip, r2, r0, asr #1
   2bed8:	andeq	ip, r2, ip, asr #1
   2bedc:	ldrdeq	ip, [r2], -r8
   2bee0:	andeq	ip, r2, r4, ror #1
   2bee4:	strdeq	ip, [r2], -r0
   2bee8:	vldr	d6, [pc, #912]	; 2c280 <grisu3_diy_fp_encode_double@@Base+0xf50>
   2beec:	vdiv.f64	d7, d7, d6
   2bef0:	vstr	d7, [r6]
   2bef4:	b	2bb34 <grisu3_diy_fp_encode_double@@Base+0x804>
   2bef8:	vldr	d6, [pc, #904]	; 2c288 <grisu3_diy_fp_encode_double@@Base+0xf58>
   2befc:	vdiv.f64	d7, d7, d6
   2bf00:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bf04:	vldr	d6, [pc, #900]	; 2c290 <grisu3_diy_fp_encode_double@@Base+0xf60>
   2bf08:	vdiv.f64	d7, d7, d6
   2bf0c:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bf10:	vldr	d6, [pc, #896]	; 2c298 <grisu3_diy_fp_encode_double@@Base+0xf68>
   2bf14:	vdiv.f64	d7, d7, d6
   2bf18:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bf1c:	vldr	d6, [pc, #892]	; 2c2a0 <grisu3_diy_fp_encode_double@@Base+0xf70>
   2bf20:	vdiv.f64	d7, d7, d6
   2bf24:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bf28:	vldr	d6, [pc, #888]	; 2c2a8 <grisu3_diy_fp_encode_double@@Base+0xf78>
   2bf2c:	vdiv.f64	d7, d7, d6
   2bf30:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bf34:	vldr	d6, [pc, #884]	; 2c2b0 <grisu3_diy_fp_encode_double@@Base+0xf80>
   2bf38:	vdiv.f64	d7, d7, d6
   2bf3c:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bf40:	vldr	d6, [pc, #880]	; 2c2b8 <grisu3_diy_fp_encode_double@@Base+0xf88>
   2bf44:	vdiv.f64	d7, d7, d6
   2bf48:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bf4c:	vldr	d6, [pc, #876]	; 2c2c0 <grisu3_diy_fp_encode_double@@Base+0xf90>
   2bf50:	vdiv.f64	d7, d7, d6
   2bf54:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bf58:	vldr	d6, [pc, #872]	; 2c2c8 <grisu3_diy_fp_encode_double@@Base+0xf98>
   2bf5c:	vdiv.f64	d7, d7, d6
   2bf60:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bf64:	vldr	d6, [pc, #868]	; 2c2d0 <grisu3_diy_fp_encode_double@@Base+0xfa0>
   2bf68:	vdiv.f64	d7, d7, d6
   2bf6c:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bf70:	vldr	d6, [pc, #864]	; 2c2d8 <grisu3_diy_fp_encode_double@@Base+0xfa8>
   2bf74:	vdiv.f64	d7, d7, d6
   2bf78:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bf7c:	vldr	d6, [pc, #860]	; 2c2e0 <grisu3_diy_fp_encode_double@@Base+0xfb0>
   2bf80:	vdiv.f64	d7, d7, d6
   2bf84:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bf88:	vldr	d6, [pc, #856]	; 2c2e8 <grisu3_diy_fp_encode_double@@Base+0xfb8>
   2bf8c:	vdiv.f64	d7, d7, d6
   2bf90:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bf94:	vldr	d6, [pc, #852]	; 2c2f0 <grisu3_diy_fp_encode_double@@Base+0xfc0>
   2bf98:	vdiv.f64	d7, d7, d6
   2bf9c:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bfa0:	vldr	d6, [pc, #848]	; 2c2f8 <grisu3_diy_fp_encode_double@@Base+0xfc8>
   2bfa4:	vdiv.f64	d7, d7, d6
   2bfa8:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bfac:	vldr	d6, [pc, #844]	; 2c300 <grisu3_diy_fp_encode_double@@Base+0xfd0>
   2bfb0:	vdiv.f64	d7, d7, d6
   2bfb4:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bfb8:	vldr	d6, [pc, #840]	; 2c308 <grisu3_diy_fp_encode_double@@Base+0xfd8>
   2bfbc:	vdiv.f64	d7, d7, d6
   2bfc0:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bfc4:	vldr	d6, [pc, #836]	; 2c310 <grisu3_diy_fp_encode_double@@Base+0xfe0>
   2bfc8:	vdiv.f64	d7, d7, d6
   2bfcc:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bfd0:	vldr	d6, [pc, #832]	; 2c318 <grisu3_diy_fp_encode_double@@Base+0xfe8>
   2bfd4:	vdiv.f64	d7, d7, d6
   2bfd8:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bfdc:	vldr	d6, [pc, #828]	; 2c320 <grisu3_diy_fp_encode_double@@Base+0xff0>
   2bfe0:	vdiv.f64	d7, d7, d6
   2bfe4:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bfe8:	vldr	d6, [pc, #824]	; 2c328 <grisu3_diy_fp_encode_double@@Base+0xff8>
   2bfec:	vdiv.f64	d7, d7, d6
   2bff0:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2bff4:	vldr	d6, [pc, #812]	; 2c328 <grisu3_diy_fp_encode_double@@Base+0xff8>
   2bff8:	vmul.f64	d7, d7, d6
   2bffc:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c000:	vldr	d6, [pc, #792]	; 2c320 <grisu3_diy_fp_encode_double@@Base+0xff0>
   2c004:	vmul.f64	d7, d7, d6
   2c008:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c00c:	vldr	d6, [pc, #772]	; 2c318 <grisu3_diy_fp_encode_double@@Base+0xfe8>
   2c010:	vmul.f64	d7, d7, d6
   2c014:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c018:	vldr	d6, [pc, #752]	; 2c310 <grisu3_diy_fp_encode_double@@Base+0xfe0>
   2c01c:	vmul.f64	d7, d7, d6
   2c020:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c024:	vldr	d6, [pc, #732]	; 2c308 <grisu3_diy_fp_encode_double@@Base+0xfd8>
   2c028:	vmul.f64	d7, d7, d6
   2c02c:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c030:	vldr	d6, [pc, #712]	; 2c300 <grisu3_diy_fp_encode_double@@Base+0xfd0>
   2c034:	vmul.f64	d7, d7, d6
   2c038:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c03c:	vldr	d6, [pc, #692]	; 2c2f8 <grisu3_diy_fp_encode_double@@Base+0xfc8>
   2c040:	vmul.f64	d7, d7, d6
   2c044:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c048:	vldr	d6, [pc, #672]	; 2c2f0 <grisu3_diy_fp_encode_double@@Base+0xfc0>
   2c04c:	vmul.f64	d7, d7, d6
   2c050:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c054:	vldr	d6, [pc, #652]	; 2c2e8 <grisu3_diy_fp_encode_double@@Base+0xfb8>
   2c058:	vmul.f64	d7, d7, d6
   2c05c:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c060:	vldr	d6, [pc, #632]	; 2c2e0 <grisu3_diy_fp_encode_double@@Base+0xfb0>
   2c064:	vmul.f64	d7, d7, d6
   2c068:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c06c:	vldr	d6, [pc, #612]	; 2c2d8 <grisu3_diy_fp_encode_double@@Base+0xfa8>
   2c070:	vmul.f64	d7, d7, d6
   2c074:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c078:	vldr	d6, [pc, #592]	; 2c2d0 <grisu3_diy_fp_encode_double@@Base+0xfa0>
   2c07c:	vmul.f64	d7, d7, d6
   2c080:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c084:	vldr	d6, [pc, #572]	; 2c2c8 <grisu3_diy_fp_encode_double@@Base+0xf98>
   2c088:	vmul.f64	d7, d7, d6
   2c08c:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c090:	vldr	d6, [pc, #552]	; 2c2c0 <grisu3_diy_fp_encode_double@@Base+0xf90>
   2c094:	vmul.f64	d7, d7, d6
   2c098:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c09c:	vldr	d6, [pc, #532]	; 2c2b8 <grisu3_diy_fp_encode_double@@Base+0xf88>
   2c0a0:	vmul.f64	d7, d7, d6
   2c0a4:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c0a8:	vldr	d6, [pc, #512]	; 2c2b0 <grisu3_diy_fp_encode_double@@Base+0xf80>
   2c0ac:	vmul.f64	d7, d7, d6
   2c0b0:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c0b4:	vldr	d6, [pc, #492]	; 2c2a8 <grisu3_diy_fp_encode_double@@Base+0xf78>
   2c0b8:	vmul.f64	d7, d7, d6
   2c0bc:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c0c0:	vldr	d6, [pc, #472]	; 2c2a0 <grisu3_diy_fp_encode_double@@Base+0xf70>
   2c0c4:	vmul.f64	d7, d7, d6
   2c0c8:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c0cc:	vldr	d6, [pc, #452]	; 2c298 <grisu3_diy_fp_encode_double@@Base+0xf68>
   2c0d0:	vmul.f64	d7, d7, d6
   2c0d4:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c0d8:	vldr	d6, [pc, #432]	; 2c290 <grisu3_diy_fp_encode_double@@Base+0xf60>
   2c0dc:	vmul.f64	d7, d7, d6
   2c0e0:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c0e4:	vldr	d6, [pc, #412]	; 2c288 <grisu3_diy_fp_encode_double@@Base+0xf58>
   2c0e8:	vmul.f64	d7, d7, d6
   2c0ec:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c0f0:	vldr	d6, [pc, #392]	; 2c280 <grisu3_diy_fp_encode_double@@Base+0xf50>
   2c0f4:	vmul.f64	d7, d7, d6
   2c0f8:	b	2bef0 <grisu3_diy_fp_encode_double@@Base+0xbc0>
   2c0fc:	str	r6, [sp, #4]
   2c100:	ldr	r3, [sp, #24]
   2c104:	str	r3, [sp]
   2c108:	mov	r3, r8
   2c10c:	mov	r2, r5
   2c110:	mov	r0, sl
   2c114:	mov	r1, fp
   2c118:	bl	2b330 <grisu3_diy_fp_encode_double@@Base>
   2c11c:	cmp	r0, #0
   2c120:	bne	2bb34 <grisu3_diy_fp_encode_double@@Base+0x804>
   2c124:	add	r1, sp, #36	; 0x24
   2c128:	mov	r0, r7
   2c12c:	bl	145dc <strtod@plt>
   2c130:	vstr	d0, [r6]
   2c134:	ldr	r3, [sp, #36]	; 0x24
   2c138:	cmp	r4, r3
   2c13c:	movcs	r4, r3
   2c140:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c144:	ldr	r4, [sp, #12]
   2c148:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c14c:	mov	r4, #0
   2c150:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c154:	ldr	r4, [sp, #12]
   2c158:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c15c:	mov	r4, #0
   2c160:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c164:	mov	r4, #0
   2c168:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c16c:	mov	r4, #0
   2c170:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c174:	mov	r4, #0
   2c178:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c17c:	mov	r4, #0
   2c180:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c184:	mov	r4, #0
   2c188:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c18c:	mov	r4, #0
   2c190:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c194:	mov	r4, #0
   2c198:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c19c:	mov	r4, #0
   2c1a0:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c1a4:	mov	r4, #0
   2c1a8:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c1ac:	mov	r4, #0
   2c1b0:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c1b4:	mov	r4, #0
   2c1b8:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c1bc:	mov	r4, #0
   2c1c0:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c1c4:	mov	r5, r9
   2c1c8:	mov	r4, r9
   2c1cc:	mov	sl, #0
   2c1d0:	mov	fp, #0
   2c1d4:	sub	r8, r4, r5
   2c1d8:	cmp	r9, r4
   2c1dc:	moveq	r4, #0
   2c1e0:	beq	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c1e4:	mov	r3, #0
   2c1e8:	str	r3, [sp, #24]
   2c1ec:	b	2ba48 <grisu3_diy_fp_encode_double@@Base+0x718>
   2c1f0:	mov	r4, r5
   2c1f4:	sub	r8, r4, r5
   2c1f8:	mov	r1, r4
   2c1fc:	mov	r3, #0
   2c200:	str	r3, [sp, #24]
   2c204:	b	2ba14 <grisu3_diy_fp_encode_double@@Base+0x6e4>
   2c208:	mov	r4, r1
   2c20c:	mov	r3, #0
   2c210:	b	2ba48 <grisu3_diy_fp_encode_double@@Base+0x718>
   2c214:	mov	r3, r0
   2c218:	mov	r4, r1
   2c21c:	mov	r2, #1
   2c220:	str	r2, [sp, #24]
   2c224:	b	2babc <grisu3_diy_fp_encode_double@@Base+0x78c>
   2c228:	ldr	r2, [sp, #28]
   2c22c:	sub	ip, ip, r2
   2c230:	add	r8, r8, ip
   2c234:	cmp	r9, r4
   2c238:	moveq	r4, #0
   2c23c:	bne	2bc74 <grisu3_diy_fp_encode_double@@Base+0x944>
   2c240:	b	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c244:	mov	r4, r1
   2c248:	mov	r2, #1
   2c24c:	str	r2, [sp, #24]
   2c250:	b	2bac8 <grisu3_diy_fp_encode_double@@Base+0x798>
   2c254:	cmp	r6, #0
   2c258:	moveq	r4, #0
   2c25c:	beq	2b8a4 <grisu3_diy_fp_encode_double@@Base+0x574>
   2c260:	rsb	r2, r2, #0
   2c264:	b	2bae0 <grisu3_diy_fp_encode_double@@Base+0x7b0>
   2c268:	ldr	r2, [sp, #24]
   2c26c:	cmp	r2, #0
   2c270:	beq	2bce0 <grisu3_diy_fp_encode_double@@Base+0x9b0>
   2c274:	ldr	r4, [sp, #28]
   2c278:	b	2bc3c <grisu3_diy_fp_encode_double@@Base+0x90c>
   2c27c:	nop			; (mov r0, r0)
   2c280:			; <UNDEFINED> instruction: 0x064dd592
   2c284:	strmi	pc, [r0], #207	; 0xcf
   2c288:	usatle	lr, #2, r0, asr #30
   2c28c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   2c290:	ldmvc	r5!, {r6, sl, fp, pc}
   2c294:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   2c298:	addsvs	r3, r1, r0, lsl #26
   2c29c:	mvnmi	r5, #228, 16	; 0xe40000
   2c2a0:	strbvs	ip, [lr, -r0, lsl #16]
   2c2a4:			; <UNDEFINED> instruction: 0x43abc16d
   2c2a8:	ldrbhi	sl, [r8]
   2c2ac:	cmnmi	r6, #1459617792	; 0x57000000
   2c2b0:	strbcc	r8, [r0, r0]!
   2c2b4:	movtmi	ip, #4985	; 0x1379
   2c2b8:	ldrtcs	r0, [r4], -r0
   2c2bc:	movwmi	r6, #52213	; 0xcbf5
   2c2c0:	cdpne	0, 9, cr0, cr0, cr0, {0}
   2c2c4:	sbcsmi	fp, r6, #196, 24	; 0xc400
   2c2c8:	strb	r0, [r0, #-0]
   2c2cc:	adcmi	r3, r2, #156	; 0x9c
   2c2d0:	andge	r0, r0, #0
   2c2d4:	rsbmi	r1, sp, #148, 20	; 0x94000
   2c2d8:	stmda	r0, {}	; <UNPREDICTABLE>
   2c2dc:	eorsmi	r4, r7, #7733248	; 0x760000
   2c2e0:	andcs	r0, r0, r0
   2c2e4:	andmi	sl, r2, #95	; 0x5f
   2c2e8:	andeq	r0, r0, r0
   2c2ec:	bicmi	ip, sp, r5, ror #26
   2c2f0:	andeq	r0, r0, r0
   2c2f4:	orrsmi	sp, r7, r4, lsl #15
   2c2f8:	andeq	r0, r0, r0
   2c2fc:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   2c300:	andeq	r0, r0, r0
   2c304:	smlawbmi	lr, r0, r4, r8
   2c308:	andeq	r0, r0, r0
   2c30c:	rscsmi	r6, r8, r0, lsl #20
   2c310:	andeq	r0, r0, r0
   2c314:	sbcmi	r8, r3, r0, lsl #16
   2c318:	andeq	r0, r0, r0
   2c31c:	addmi	r4, pc, r0
   2c320:	andeq	r0, r0, r0
   2c324:	subsmi	r0, r9, r0
   2c328:	andeq	r0, r0, r0
   2c32c:	eormi	r0, r4, r0

0002c330 <flatcc_json_parser_error_string@@Base>:
   2c330:	cmp	r0, #34	; 0x22
   2c334:	ldrls	pc, [pc, r0, lsl #2]
   2c338:	b	2c4d8 <flatcc_json_parser_error_string@@Base+0x1a8>
   2c33c:	andeq	ip, r2, r0, ror #9
   2c340:	andeq	ip, r2, r8, asr #7
   2c344:	ldrdeq	ip, [r2], -r0
   2c348:	ldrdeq	ip, [r2], -r8
   2c34c:	andeq	ip, r2, r0, ror #7
   2c350:	andeq	ip, r2, r8, ror #7
   2c354:	strdeq	ip, [r2], -r0
   2c358:	strdeq	ip, [r2], -r8
   2c35c:	andeq	ip, r2, r0, lsl #8
   2c360:	andeq	ip, r2, r8, lsl #8
   2c364:	andeq	ip, r2, r0, lsl r4
   2c368:	andeq	ip, r2, r8, lsl r4
   2c36c:	andeq	ip, r2, r0, lsr #8
   2c370:	andeq	ip, r2, r8, lsr #8
   2c374:	andeq	ip, r2, r0, lsr r4
   2c378:	andeq	ip, r2, r8, lsr r4
   2c37c:	andeq	ip, r2, r0, asr #8
   2c380:	andeq	ip, r2, r8, asr #8
   2c384:	andeq	ip, r2, r0, asr r4
   2c388:	andeq	ip, r2, r8, asr r4
   2c38c:	andeq	ip, r2, r0, ror #8
   2c390:	andeq	ip, r2, r8, ror #8
   2c394:	andeq	ip, r2, r0, ror r4
   2c398:	andeq	ip, r2, r8, ror r4
   2c39c:	andeq	ip, r2, r0, lsl #9
   2c3a0:	andeq	ip, r2, r8, lsl #9
   2c3a4:	muleq	r2, r0, r4
   2c3a8:	muleq	r2, r8, r4
   2c3ac:	andeq	ip, r2, r0, lsr #9
   2c3b0:	andeq	ip, r2, r8, lsr #9
   2c3b4:			; <UNDEFINED> instruction: 0x0002c4b0
   2c3b8:			; <UNDEFINED> instruction: 0x0002c4b8
   2c3bc:	andeq	ip, r2, r0, asr #9
   2c3c0:	andeq	ip, r2, r8, asr #9
   2c3c4:	ldrdeq	ip, [r2], -r0
   2c3c8:	ldr	r0, [pc, #280]	; 2c4e8 <flatcc_json_parser_error_string@@Base+0x1b8>
   2c3cc:	bx	lr
   2c3d0:	ldr	r0, [pc, #276]	; 2c4ec <flatcc_json_parser_error_string@@Base+0x1bc>
   2c3d4:	bx	lr
   2c3d8:	ldr	r0, [pc, #272]	; 2c4f0 <flatcc_json_parser_error_string@@Base+0x1c0>
   2c3dc:	bx	lr
   2c3e0:	ldr	r0, [pc, #268]	; 2c4f4 <flatcc_json_parser_error_string@@Base+0x1c4>
   2c3e4:	bx	lr
   2c3e8:	ldr	r0, [pc, #264]	; 2c4f8 <flatcc_json_parser_error_string@@Base+0x1c8>
   2c3ec:	bx	lr
   2c3f0:	ldr	r0, [pc, #260]	; 2c4fc <flatcc_json_parser_error_string@@Base+0x1cc>
   2c3f4:	bx	lr
   2c3f8:	ldr	r0, [pc, #256]	; 2c500 <flatcc_json_parser_error_string@@Base+0x1d0>
   2c3fc:	bx	lr
   2c400:	ldr	r0, [pc, #252]	; 2c504 <flatcc_json_parser_error_string@@Base+0x1d4>
   2c404:	bx	lr
   2c408:	ldr	r0, [pc, #248]	; 2c508 <flatcc_json_parser_error_string@@Base+0x1d8>
   2c40c:	bx	lr
   2c410:	ldr	r0, [pc, #244]	; 2c50c <flatcc_json_parser_error_string@@Base+0x1dc>
   2c414:	bx	lr
   2c418:	ldr	r0, [pc, #240]	; 2c510 <flatcc_json_parser_error_string@@Base+0x1e0>
   2c41c:	bx	lr
   2c420:	ldr	r0, [pc, #236]	; 2c514 <flatcc_json_parser_error_string@@Base+0x1e4>
   2c424:	bx	lr
   2c428:	ldr	r0, [pc, #232]	; 2c518 <flatcc_json_parser_error_string@@Base+0x1e8>
   2c42c:	bx	lr
   2c430:	ldr	r0, [pc, #228]	; 2c51c <flatcc_json_parser_error_string@@Base+0x1ec>
   2c434:	bx	lr
   2c438:	ldr	r0, [pc, #224]	; 2c520 <flatcc_json_parser_error_string@@Base+0x1f0>
   2c43c:	bx	lr
   2c440:	ldr	r0, [pc, #220]	; 2c524 <flatcc_json_parser_error_string@@Base+0x1f4>
   2c444:	bx	lr
   2c448:	ldr	r0, [pc, #216]	; 2c528 <flatcc_json_parser_error_string@@Base+0x1f8>
   2c44c:	bx	lr
   2c450:	ldr	r0, [pc, #212]	; 2c52c <flatcc_json_parser_error_string@@Base+0x1fc>
   2c454:	bx	lr
   2c458:	ldr	r0, [pc, #208]	; 2c530 <flatcc_json_parser_error_string@@Base+0x200>
   2c45c:	bx	lr
   2c460:	ldr	r0, [pc, #204]	; 2c534 <flatcc_json_parser_error_string@@Base+0x204>
   2c464:	bx	lr
   2c468:	ldr	r0, [pc, #200]	; 2c538 <flatcc_json_parser_error_string@@Base+0x208>
   2c46c:	bx	lr
   2c470:	ldr	r0, [pc, #196]	; 2c53c <flatcc_json_parser_error_string@@Base+0x20c>
   2c474:	bx	lr
   2c478:	ldr	r0, [pc, #192]	; 2c540 <flatcc_json_parser_error_string@@Base+0x210>
   2c47c:	bx	lr
   2c480:	ldr	r0, [pc, #188]	; 2c544 <flatcc_json_parser_error_string@@Base+0x214>
   2c484:	bx	lr
   2c488:	ldr	r0, [pc, #184]	; 2c548 <flatcc_json_parser_error_string@@Base+0x218>
   2c48c:	bx	lr
   2c490:	ldr	r0, [pc, #180]	; 2c54c <flatcc_json_parser_error_string@@Base+0x21c>
   2c494:	bx	lr
   2c498:	ldr	r0, [pc, #176]	; 2c550 <flatcc_json_parser_error_string@@Base+0x220>
   2c49c:	bx	lr
   2c4a0:	ldr	r0, [pc, #172]	; 2c554 <flatcc_json_parser_error_string@@Base+0x224>
   2c4a4:	bx	lr
   2c4a8:	ldr	r0, [pc, #168]	; 2c558 <flatcc_json_parser_error_string@@Base+0x228>
   2c4ac:	bx	lr
   2c4b0:	ldr	r0, [pc, #164]	; 2c55c <flatcc_json_parser_error_string@@Base+0x22c>
   2c4b4:	bx	lr
   2c4b8:	ldr	r0, [pc, #160]	; 2c560 <flatcc_json_parser_error_string@@Base+0x230>
   2c4bc:	bx	lr
   2c4c0:	ldr	r0, [pc, #156]	; 2c564 <flatcc_json_parser_error_string@@Base+0x234>
   2c4c4:	bx	lr
   2c4c8:	ldr	r0, [pc, #152]	; 2c568 <flatcc_json_parser_error_string@@Base+0x238>
   2c4cc:	bx	lr
   2c4d0:	ldr	r0, [pc, #148]	; 2c56c <flatcc_json_parser_error_string@@Base+0x23c>
   2c4d4:	bx	lr
   2c4d8:	ldr	r0, [pc, #144]	; 2c570 <flatcc_json_parser_error_string@@Base+0x240>
   2c4dc:	bx	lr
   2c4e0:	ldr	r0, [pc, #140]	; 2c574 <flatcc_json_parser_error_string@@Base+0x244>
   2c4e4:	bx	lr
   2c4e8:	andeq	r1, r4, r0, ror fp
   2c4ec:	andeq	r1, r4, r4, ror fp
   2c4f0:	andeq	r1, r4, r4, lsl #23
   2c4f4:	muleq	r4, r4, fp
   2c4f8:	andeq	r1, r4, r4, lsr #23
   2c4fc:			; <UNDEFINED> instruction: 0x00041bbc
   2c500:	ldrdeq	r1, [r4], -r0
   2c504:	andeq	r1, r4, ip, asr #23
   2c508:	ldrdeq	r1, [r4], -r8
   2c50c:	andeq	r1, r4, ip, ror #23
   2c510:	andeq	r1, r4, r0, lsl #24
   2c514:	andeq	r1, r4, r0, lsl ip
   2c518:	andeq	r1, r4, r4, lsr #24
   2c51c:	andeq	r1, r4, r4, lsr ip
   2c520:	andeq	r1, r4, r0, asr ip
   2c524:	andeq	r1, r4, r4, ror #24
   2c528:	andeq	r1, r4, r4, ror ip
   2c52c:	andeq	r1, r4, r8, lsl #25
   2c530:	muleq	r4, r8, ip
   2c534:	andeq	r1, r4, r8, lsr #25
   2c538:			; <UNDEFINED> instruction: 0x00041cbc
   2c53c:	andeq	r1, r4, ip, asr #25
   2c540:	ldrdeq	r1, [r4], -ip
   2c544:	andeq	r1, r4, r0, lsl #26
   2c548:	andeq	r1, r4, r4, lsl sp
   2c54c:	andeq	r1, r4, r4, lsr sp
   2c550:	andeq	r1, r4, r4, asr sp
   2c554:	andeq	r1, r4, r0, ror sp
   2c558:	andeq	r0, r4, ip, asr sp
   2c55c:	andeq	r1, r4, ip, lsl #27
   2c560:	andeq	r1, r4, ip, lsr #27
   2c564:	andeq	r1, r4, r4, asr #27
   2c568:	andeq	r1, r4, r0, ror #27
   2c56c:	andeq	r1, r4, r8, lsl #3
   2c570:	muleq	r4, r8, r1
   2c574:	andeq	r0, r4, r0, lsl sp

0002c578 <flatcc_json_parser_set_error@@Base>:
   2c578:	ldr	ip, [r0, #20]
   2c57c:	cmp	ip, #0
   2c580:	bne	2c59c <flatcc_json_parser_set_error@@Base+0x24>
   2c584:	str	r3, [r0, #20]
   2c588:	ldr	r3, [r0, #4]
   2c58c:	sub	r3, r1, r3
   2c590:	add	r3, r3, #1
   2c594:	str	r3, [r0, #16]
   2c598:	str	r1, [r0, #32]
   2c59c:	mov	r0, r2
   2c5a0:	bx	lr

0002c5a4 <flatcc_json_parser_string_part@@Base>:
   2c5a4:	push	{r4, lr}
   2c5a8:	cmp	r1, r2
   2c5ac:	beq	2c638 <flatcc_json_parser_string_part@@Base+0x94>
   2c5b0:	ldrb	ip, [r1]
   2c5b4:	cmp	ip, #34	; 0x22
   2c5b8:	cmpne	ip, #31
   2c5bc:	movhi	r3, #1
   2c5c0:	movls	r3, #0
   2c5c4:	cmp	ip, #92	; 0x5c
   2c5c8:	moveq	r3, #0
   2c5cc:	andne	r3, r3, #1
   2c5d0:	cmp	r3, #0
   2c5d4:	beq	2c614 <flatcc_json_parser_string_part@@Base+0x70>
   2c5d8:	add	r3, r1, #1
   2c5dc:	mov	r4, r2
   2c5e0:	mov	r1, r3
   2c5e4:	cmp	r3, r4
   2c5e8:	beq	2c63c <flatcc_json_parser_string_part@@Base+0x98>
   2c5ec:	ldrb	lr, [r3], #1
   2c5f0:	cmp	lr, #34	; 0x22
   2c5f4:	cmpne	lr, #31
   2c5f8:	movhi	ip, #1
   2c5fc:	movls	ip, #0
   2c600:	cmp	lr, #92	; 0x5c
   2c604:	moveq	ip, #0
   2c608:	andne	ip, ip, #1
   2c60c:	cmp	ip, #0
   2c610:	bne	2c5e0 <flatcc_json_parser_string_part@@Base+0x3c>
   2c614:	ldrb	r3, [r1]
   2c618:	cmp	r3, #31
   2c61c:	bls	2c628 <flatcc_json_parser_string_part@@Base+0x84>
   2c620:	mov	r0, r1
   2c624:	pop	{r4, pc}
   2c628:	mov	r3, #17
   2c62c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2c630:	mov	r1, r0
   2c634:	b	2c620 <flatcc_json_parser_string_part@@Base+0x7c>
   2c638:	mov	r1, r2
   2c63c:	mov	r3, #20
   2c640:	mov	r2, r1
   2c644:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2c648:	mov	r1, r0
   2c64c:	b	2c620 <flatcc_json_parser_string_part@@Base+0x7c>

0002c650 <flatcc_json_parser_space_ext@@Base>:
   2c650:	push	{r4, lr}
   2c654:	mov	r4, #0
   2c658:	cmp	r1, r2
   2c65c:	beq	2c784 <flatcc_json_parser_space_ext@@Base+0x134>
   2c660:	ldrb	r3, [r1]
   2c664:	cmp	r3, #32
   2c668:	bne	2c690 <flatcc_json_parser_space_ext@@Base+0x40>
   2c66c:	add	r3, r1, #1
   2c670:	mov	lr, r2
   2c674:	mov	r1, r3
   2c678:	cmp	r3, lr
   2c67c:	beq	2c788 <flatcc_json_parser_space_ext@@Base+0x138>
   2c680:	add	r3, r3, #1
   2c684:	ldrb	ip, [r1]
   2c688:	cmp	ip, #32
   2c68c:	beq	2c674 <flatcc_json_parser_space_ext@@Base+0x24>
   2c690:	ldrb	r3, [r1]
   2c694:	cmp	r3, #32
   2c698:	bls	2c6f0 <flatcc_json_parser_space_ext@@Base+0xa0>
   2c69c:	mov	r0, r1
   2c6a0:	pop	{r4, pc}
   2c6a4:	sub	r3, r2, r1
   2c6a8:	cmp	r3, #1
   2c6ac:	movle	r3, r4
   2c6b0:	ble	2c6c4 <flatcc_json_parser_space_ext@@Base+0x74>
   2c6b4:	ldrb	r3, [r1, #1]
   2c6b8:	cmp	r3, #10
   2c6bc:	movne	r3, #0
   2c6c0:	moveq	r3, #1
   2c6c4:	add	r1, r1, r3
   2c6c8:	ldr	r3, [r0, #12]
   2c6cc:	add	r3, r3, #1
   2c6d0:	str	r3, [r0, #12]
   2c6d4:	add	r1, r1, #1
   2c6d8:	str	r1, [r0, #4]
   2c6dc:	cmp	r2, r1
   2c6e0:	beq	2c77c <flatcc_json_parser_space_ext@@Base+0x12c>
   2c6e4:	ldrb	r3, [r1]
   2c6e8:	cmp	r3, #32
   2c6ec:	bhi	2c774 <flatcc_json_parser_space_ext@@Base+0x124>
   2c6f0:	sub	r3, r3, #9
   2c6f4:	cmp	r3, #23
   2c6f8:	ldrls	pc, [pc, r3, lsl #2]
   2c6fc:	b	2c768 <flatcc_json_parser_space_ext@@Base+0x118>
   2c700:	andeq	ip, r2, r0, ror #14
   2c704:	andeq	ip, r2, r8, asr #13
   2c708:	andeq	ip, r2, r8, ror #14
   2c70c:	andeq	ip, r2, r8, ror #14
   2c710:	andeq	ip, r2, r4, lsr #13
   2c714:	andeq	ip, r2, r8, ror #14
   2c718:	andeq	ip, r2, r8, ror #14
   2c71c:	andeq	ip, r2, r8, ror #14
   2c720:	andeq	ip, r2, r8, ror #14
   2c724:	andeq	ip, r2, r8, ror #14
   2c728:	andeq	ip, r2, r8, ror #14
   2c72c:	andeq	ip, r2, r8, ror #14
   2c730:	andeq	ip, r2, r8, ror #14
   2c734:	andeq	ip, r2, r8, ror #14
   2c738:	andeq	ip, r2, r8, ror #14
   2c73c:	andeq	ip, r2, r8, ror #14
   2c740:	andeq	ip, r2, r8, ror #14
   2c744:	andeq	ip, r2, r8, ror #14
   2c748:	andeq	ip, r2, r8, ror #14
   2c74c:	andeq	ip, r2, r8, ror #14
   2c750:	andeq	ip, r2, r8, ror #14
   2c754:	andeq	ip, r2, r8, ror #14
   2c758:	andeq	ip, r2, r8, ror #14
   2c75c:	andeq	ip, r2, r8, asr r6
   2c760:	add	r1, r1, #1
   2c764:	b	2c6dc <flatcc_json_parser_space_ext@@Base+0x8c>
   2c768:	mov	r3, #5
   2c76c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2c770:	pop	{r4, pc}
   2c774:	mov	r0, r1
   2c778:	pop	{r4, pc}
   2c77c:	mov	r0, r2
   2c780:	pop	{r4, pc}
   2c784:	mov	r1, r2
   2c788:	mov	r0, r1
   2c78c:	pop	{r4, pc}
   2c790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c794:	sub	sp, sp, #36	; 0x24
   2c798:	mov	r8, r0
   2c79c:	mov	r7, r2
   2c7a0:	str	r3, [sp, #8]
   2c7a4:	ldr	fp, [sp, #72]	; 0x48
   2c7a8:	mov	r3, #0
   2c7ac:	strb	r3, [fp]
   2c7b0:	cmp	r1, r2
   2c7b4:	beq	2c820 <flatcc_json_parser_space_ext@@Base+0x1d0>
   2c7b8:	ldrb	r3, [r1]
   2c7bc:	cmp	r3, #34	; 0x22
   2c7c0:	addeq	r6, r1, #1
   2c7c4:	beq	2c7d4 <flatcc_json_parser_space_ext@@Base+0x184>
   2c7c8:	mov	r3, #5
   2c7cc:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2c7d0:	mov	r6, r0
   2c7d4:	sub	r3, r7, r6
   2c7d8:	cmp	r3, #1
   2c7dc:	ble	2c7f0 <flatcc_json_parser_space_ext@@Base+0x1a0>
   2c7e0:	ldrb	r3, [r6]
   2c7e4:	cmp	r3, #32
   2c7e8:	bhi	2c804 <flatcc_json_parser_space_ext@@Base+0x1b4>
   2c7ec:	beq	2c828 <flatcc_json_parser_space_ext@@Base+0x1d8>
   2c7f0:	mov	r2, r7
   2c7f4:	mov	r1, r6
   2c7f8:	mov	r0, r8
   2c7fc:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2c800:	mov	r6, r0
   2c804:	cmp	r7, r6
   2c808:	beq	2c920 <flatcc_json_parser_space_ext@@Base+0x2d0>
   2c80c:	mov	r3, #0
   2c810:	str	r3, [sp, #12]
   2c814:	add	sl, sp, #16
   2c818:	add	r9, sp, #24
   2c81c:	b	2c884 <flatcc_json_parser_space_ext@@Base+0x234>
   2c820:	mov	r6, r2
   2c824:	b	2c7d4 <flatcc_json_parser_space_ext@@Base+0x184>
   2c828:	ldrb	r3, [r6, #1]
   2c82c:	cmp	r3, #32
   2c830:	addhi	r6, r6, #1
   2c834:	bls	2c7f0 <flatcc_json_parser_space_ext@@Base+0x1a0>
   2c838:	b	2c804 <flatcc_json_parser_space_ext@@Base+0x1b4>
   2c83c:	mov	r4, r0
   2c840:	ldr	r3, [sp, #20]
   2c844:	cmp	r3, #0
   2c848:	bne	2c8e0 <flatcc_json_parser_space_ext@@Base+0x290>
   2c84c:	ldrd	r2, [sp, #24]
   2c850:	cmp	r3, #0
   2c854:	cmpeq	r2, #255	; 0xff
   2c858:	uxtbls	r3, r2
   2c85c:	strls	r3, [sp, #12]
   2c860:	bhi	2c900 <flatcc_json_parser_space_ext@@Base+0x2b0>
   2c864:	ldrb	r3, [fp]
   2c868:	ldr	r2, [sp, #12]
   2c86c:	add	r3, r2, r3
   2c870:	strb	r3, [fp]
   2c874:	ldr	r3, [sp, #16]
   2c878:	cmp	r3, #0
   2c87c:	beq	2c918 <flatcc_json_parser_space_ext@@Base+0x2c8>
   2c880:	mov	r6, r4
   2c884:	ldr	r5, [sp, #8]
   2c888:	str	sl, [sp, #4]
   2c88c:	str	r9, [sp]
   2c890:	ldr	r4, [r5]
   2c894:	add	r3, sp, #20
   2c898:	mov	r2, r7
   2c89c:	mov	r1, r6
   2c8a0:	mov	r0, r8
   2c8a4:	blx	r4
   2c8a8:	cmp	r7, r0
   2c8ac:	beq	2c924 <flatcc_json_parser_space_ext@@Base+0x2d4>
   2c8b0:	cmp	r6, r0
   2c8b4:	bne	2c83c <flatcc_json_parser_space_ext@@Base+0x1ec>
   2c8b8:	ldr	r3, [r5, #4]!
   2c8bc:	cmp	r3, #0
   2c8c0:	bne	2c888 <flatcc_json_parser_space_ext@@Base+0x238>
   2c8c4:	mov	r3, #23
   2c8c8:	mov	r2, r7
   2c8cc:	mov	r1, r6
   2c8d0:	mov	r0, r8
   2c8d4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2c8d8:	mov	r7, r0
   2c8dc:	b	2c924 <flatcc_json_parser_space_ext@@Base+0x2d4>
   2c8e0:	mov	r3, #8
   2c8e4:	mov	r2, r7
   2c8e8:	mov	r1, r0
   2c8ec:	mov	r0, r8
   2c8f0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2c8f4:	cmp	r7, r0
   2c8f8:	bne	2c864 <flatcc_json_parser_space_ext@@Base+0x214>
   2c8fc:	b	2c924 <flatcc_json_parser_space_ext@@Base+0x2d4>
   2c900:	mov	r3, #7
   2c904:	mov	r2, r7
   2c908:	mov	r1, r0
   2c90c:	mov	r0, r8
   2c910:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2c914:	b	2c8f4 <flatcc_json_parser_space_ext@@Base+0x2a4>
   2c918:	mov	r7, r4
   2c91c:	b	2c924 <flatcc_json_parser_space_ext@@Base+0x2d4>
   2c920:	mov	r7, r6
   2c924:	mov	r0, r7
   2c928:	add	sp, sp, #36	; 0x24
   2c92c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c934:	sub	sp, sp, #28
   2c938:	mov	r7, r0
   2c93c:	mov	r4, r1
   2c940:	mov	r6, r2
   2c944:	str	r3, [sp, #12]
   2c948:	ldr	r9, [sp, #64]	; 0x40
   2c94c:	ldr	r8, [sp, #72]	; 0x48
   2c950:	mov	r3, #0
   2c954:	str	r3, [sp, #20]
   2c958:	ldr	r0, [r0]
   2c95c:	bl	27200 <flatcc_builder_start_offset_vector@@Base>
   2c960:	cmp	r0, #0
   2c964:	bne	2ccd4 <flatcc_json_parser_space_ext@@Base+0x684>
   2c968:	cmp	r4, r6
   2c96c:	beq	2c97c <flatcc_json_parser_space_ext@@Base+0x32c>
   2c970:	ldrb	r3, [r4]
   2c974:	cmp	r3, #91	; 0x5b
   2c978:	beq	2c99c <flatcc_json_parser_space_ext@@Base+0x34c>
   2c97c:	mov	r3, #22
   2c980:	mov	r2, r6
   2c984:	mov	r1, r4
   2c988:	mov	r0, r7
   2c98c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2c990:	mov	sl, r0
   2c994:	mov	r5, #0
   2c998:	b	2cc00 <flatcc_json_parser_space_ext@@Base+0x5b0>
   2c99c:	add	r3, r4, #1
   2c9a0:	str	r3, [sp, #8]
   2c9a4:	mov	sl, r6
   2c9a8:	sub	r3, r6, r3
   2c9ac:	cmp	r3, #1
   2c9b0:	ble	2c9c4 <flatcc_json_parser_space_ext@@Base+0x374>
   2c9b4:	ldrb	r3, [r4, #1]
   2c9b8:	cmp	r3, #32
   2c9bc:	bhi	2c9d8 <flatcc_json_parser_space_ext@@Base+0x388>
   2c9c0:	beq	2ca04 <flatcc_json_parser_space_ext@@Base+0x3b4>
   2c9c4:	mov	r2, r6
   2c9c8:	ldr	r1, [sp, #8]
   2c9cc:	mov	r0, r7
   2c9d0:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2c9d4:	str	r0, [sp, #8]
   2c9d8:	ldr	r3, [sp, #8]
   2c9dc:	cmp	r6, r3
   2c9e0:	beq	2c9f0 <flatcc_json_parser_space_ext@@Base+0x3a0>
   2c9e4:	ldrb	r3, [r3]
   2c9e8:	cmp	r3, #93	; 0x5d
   2c9ec:	beq	2ca1c <flatcc_json_parser_space_ext@@Base+0x3cc>
   2c9f0:	cmp	r9, #0
   2c9f4:	beq	2ca70 <flatcc_json_parser_space_ext@@Base+0x420>
   2c9f8:	mov	r5, #0
   2c9fc:	add	fp, sp, #20
   2ca00:	b	2cb4c <flatcc_json_parser_space_ext@@Base+0x4fc>
   2ca04:	ldrb	r3, [r4, #2]
   2ca08:	cmp	r3, #32
   2ca0c:	addhi	r3, r4, #2
   2ca10:	strhi	r3, [sp, #8]
   2ca14:	bls	2c9c4 <flatcc_json_parser_space_ext@@Base+0x374>
   2ca18:	b	2c9d8 <flatcc_json_parser_space_ext@@Base+0x388>
   2ca1c:	ldr	r2, [sp, #8]
   2ca20:	add	sl, r2, #1
   2ca24:	sub	r3, r6, sl
   2ca28:	cmp	r3, #1
   2ca2c:	ble	2ca40 <flatcc_json_parser_space_ext@@Base+0x3f0>
   2ca30:	ldrb	r3, [r2, #1]
   2ca34:	cmp	r3, #32
   2ca38:	bhi	2c994 <flatcc_json_parser_space_ext@@Base+0x344>
   2ca3c:	beq	2ca58 <flatcc_json_parser_space_ext@@Base+0x408>
   2ca40:	mov	r2, r6
   2ca44:	mov	r1, sl
   2ca48:	mov	r0, r7
   2ca4c:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2ca50:	mov	sl, r0
   2ca54:	b	2c994 <flatcc_json_parser_space_ext@@Base+0x344>
   2ca58:	ldrb	r3, [r2, #2]
   2ca5c:	cmp	r3, #32
   2ca60:	movhi	r3, r2
   2ca64:	addhi	sl, r3, #2
   2ca68:	bls	2ca40 <flatcc_json_parser_space_ext@@Base+0x3f0>
   2ca6c:	b	2c994 <flatcc_json_parser_space_ext@@Base+0x344>
   2ca70:	mov	r3, #30
   2ca74:	mov	r2, r6
   2ca78:	ldr	r1, [sp, #8]
   2ca7c:	mov	r0, r7
   2ca80:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2ca84:	mov	sl, r0
   2ca88:	b	2ccec <flatcc_json_parser_space_ext@@Base+0x69c>
   2ca8c:	ldrb	r3, [r4, #1]
   2ca90:	cmp	r3, #32
   2ca94:	addhi	r4, r4, #1
   2ca98:	bls	2cbb4 <flatcc_json_parser_space_ext@@Base+0x564>
   2ca9c:	b	2cbc8 <flatcc_json_parser_space_ext@@Base+0x578>
   2caa0:	add	sl, r4, #1
   2caa4:	sub	r3, r6, sl
   2caa8:	cmp	r3, #1
   2caac:	ble	2cac0 <flatcc_json_parser_space_ext@@Base+0x470>
   2cab0:	ldrb	r3, [r4, #1]
   2cab4:	cmp	r3, #32
   2cab8:	bhi	2cbfc <flatcc_json_parser_space_ext@@Base+0x5ac>
   2cabc:	beq	2cad8 <flatcc_json_parser_space_ext@@Base+0x488>
   2cac0:	mov	r2, r6
   2cac4:	mov	r1, sl
   2cac8:	mov	r0, r7
   2cacc:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2cad0:	mov	sl, r0
   2cad4:	b	2cbfc <flatcc_json_parser_space_ext@@Base+0x5ac>
   2cad8:	ldrb	r3, [r4, #2]
   2cadc:	cmp	r3, #32
   2cae0:	addhi	sl, r4, #2
   2cae4:	bls	2cac0 <flatcc_json_parser_space_ext@@Base+0x470>
   2cae8:	b	2cbfc <flatcc_json_parser_space_ext@@Base+0x5ac>
   2caec:	add	r3, r4, #1
   2caf0:	str	r3, [sp, #8]
   2caf4:	sub	r3, sl, r3
   2caf8:	cmp	r3, #1
   2cafc:	ble	2cb10 <flatcc_json_parser_space_ext@@Base+0x4c0>
   2cb00:	ldrb	r3, [r4, #1]
   2cb04:	cmp	r3, #32
   2cb08:	bhi	2cb24 <flatcc_json_parser_space_ext@@Base+0x4d4>
   2cb0c:	beq	2cc24 <flatcc_json_parser_space_ext@@Base+0x5d4>
   2cb10:	mov	r2, r6
   2cb14:	ldr	r1, [sp, #8]
   2cb18:	mov	r0, r7
   2cb1c:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2cb20:	str	r0, [sp, #8]
   2cb24:	ldr	r3, [sp, #8]
   2cb28:	cmp	r6, r3
   2cb2c:	beq	2cc3c <flatcc_json_parser_space_ext@@Base+0x5ec>
   2cb30:	ldr	r3, [sp, #8]
   2cb34:	ldrb	r3, [r3]
   2cb38:	cmp	r3, #93	; 0x5d
   2cb3c:	beq	2cc58 <flatcc_json_parser_space_ext@@Base+0x608>
   2cb40:	add	r5, r5, #1
   2cb44:	cmp	r9, r5
   2cb48:	beq	2ca70 <flatcc_json_parser_space_ext@@Base+0x420>
   2cb4c:	ldr	r1, [sp, #12]
   2cb50:	ldr	r0, [r7]
   2cb54:	bl	260e8 <flatcc_builder_get_user_frame_ptr@@Base>
   2cb58:	ldrb	r3, [r0, r5]
   2cb5c:	str	fp, [sp]
   2cb60:	mov	r2, r6
   2cb64:	ldr	r1, [sp, #8]
   2cb68:	mov	r0, r7
   2cb6c:	blx	r8
   2cb70:	mov	r4, r0
   2cb74:	cmp	r6, r0
   2cb78:	beq	2cd1c <flatcc_json_parser_space_ext@@Base+0x6cc>
   2cb7c:	mov	r1, #1
   2cb80:	ldr	r0, [r7]
   2cb84:	bl	26bd0 <flatcc_builder_extend_offset_vector@@Base>
   2cb88:	cmp	r0, #0
   2cb8c:	beq	2ccd4 <flatcc_json_parser_space_ext@@Base+0x684>
   2cb90:	ldr	r3, [sp, #20]
   2cb94:	str	r3, [r0]
   2cb98:	sub	r3, sl, r4
   2cb9c:	cmp	r3, #1
   2cba0:	ble	2cbb4 <flatcc_json_parser_space_ext@@Base+0x564>
   2cba4:	ldrb	r3, [r4]
   2cba8:	cmp	r3, #32
   2cbac:	bhi	2cbd0 <flatcc_json_parser_space_ext@@Base+0x580>
   2cbb0:	beq	2ca8c <flatcc_json_parser_space_ext@@Base+0x43c>
   2cbb4:	mov	r2, r6
   2cbb8:	mov	r1, r4
   2cbbc:	mov	r0, r7
   2cbc0:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2cbc4:	mov	r4, r0
   2cbc8:	cmp	r6, r4
   2cbcc:	beq	2cd24 <flatcc_json_parser_space_ext@@Base+0x6d4>
   2cbd0:	ldrb	r3, [r4]
   2cbd4:	cmp	r3, #44	; 0x2c
   2cbd8:	beq	2caec <flatcc_json_parser_space_ext@@Base+0x49c>
   2cbdc:	cmp	r3, #93	; 0x5d
   2cbe0:	beq	2caa0 <flatcc_json_parser_space_ext@@Base+0x450>
   2cbe4:	mov	r3, #9
   2cbe8:	mov	r2, r6
   2cbec:	mov	r1, r4
   2cbf0:	mov	r0, r7
   2cbf4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2cbf8:	mov	sl, r0
   2cbfc:	add	r5, r5, #1
   2cc00:	cmp	r9, r5
   2cc04:	beq	2ccac <flatcc_json_parser_space_ext@@Base+0x65c>
   2cc08:	mov	r3, #30
   2cc0c:	mov	r2, r6
   2cc10:	mov	r1, sl
   2cc14:	mov	r0, r7
   2cc18:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2cc1c:	mov	sl, r0
   2cc20:	b	2ccec <flatcc_json_parser_space_ext@@Base+0x69c>
   2cc24:	ldrb	r3, [r4, #2]
   2cc28:	cmp	r3, #32
   2cc2c:	addhi	r3, r4, #2
   2cc30:	strhi	r3, [sp, #8]
   2cc34:	bls	2cb10 <flatcc_json_parser_space_ext@@Base+0x4c0>
   2cc38:	b	2cb24 <flatcc_json_parser_space_ext@@Base+0x4d4>
   2cc3c:	mov	r3, #9
   2cc40:	mov	r2, r6
   2cc44:	ldr	r1, [sp, #8]
   2cc48:	mov	r0, r7
   2cc4c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2cc50:	mov	sl, r0
   2cc54:	b	2cbfc <flatcc_json_parser_space_ext@@Base+0x5ac>
   2cc58:	ldr	r2, [sp, #8]
   2cc5c:	add	sl, r2, #1
   2cc60:	sub	r3, r6, sl
   2cc64:	cmp	r3, #1
   2cc68:	ble	2cc7c <flatcc_json_parser_space_ext@@Base+0x62c>
   2cc6c:	ldrb	r3, [r2, #1]
   2cc70:	cmp	r3, #32
   2cc74:	bhi	2cbfc <flatcc_json_parser_space_ext@@Base+0x5ac>
   2cc78:	beq	2cc94 <flatcc_json_parser_space_ext@@Base+0x644>
   2cc7c:	mov	r2, r6
   2cc80:	mov	r1, sl
   2cc84:	mov	r0, r7
   2cc88:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2cc8c:	mov	sl, r0
   2cc90:	b	2cbfc <flatcc_json_parser_space_ext@@Base+0x5ac>
   2cc94:	ldrb	r3, [r2, #2]
   2cc98:	cmp	r3, #32
   2cc9c:	movhi	r3, r2
   2cca0:	addhi	sl, r3, #2
   2cca4:	bls	2cc7c <flatcc_json_parser_space_ext@@Base+0x62c>
   2cca8:	b	2cbfc <flatcc_json_parser_space_ext@@Base+0x5ac>
   2ccac:	ldr	r1, [sp, #12]
   2ccb0:	ldr	r0, [r7]
   2ccb4:	bl	260e8 <flatcc_builder_get_user_frame_ptr@@Base>
   2ccb8:	mov	r1, r0
   2ccbc:	ldr	r0, [r7]
   2ccc0:	bl	283cc <flatcc_builder_end_offset_vector_for_unions@@Base>
   2ccc4:	str	r0, [sp, #20]
   2ccc8:	cmp	r0, #0
   2cccc:	moveq	r4, sl
   2ccd0:	bne	2ccf8 <flatcc_json_parser_space_ext@@Base+0x6a8>
   2ccd4:	mov	r3, #33	; 0x21
   2ccd8:	mov	r2, r6
   2ccdc:	mov	r1, r4
   2cce0:	mov	r0, r7
   2cce4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2cce8:	mov	sl, r0
   2ccec:	mov	r0, sl
   2ccf0:	add	sp, sp, #28
   2ccf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ccf8:	ldrh	r1, [sp, #68]	; 0x44
   2ccfc:	ldr	r0, [r7]
   2cd00:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   2cd04:	cmp	r0, #0
   2cd08:	ldrne	r3, [sp, #20]
   2cd0c:	strne	r3, [r0]
   2cd10:	bne	2ccec <flatcc_json_parser_space_ext@@Base+0x69c>
   2cd14:	mov	r4, sl
   2cd18:	b	2ccd4 <flatcc_json_parser_space_ext@@Base+0x684>
   2cd1c:	mov	sl, r6
   2cd20:	b	2ccec <flatcc_json_parser_space_ext@@Base+0x69c>
   2cd24:	mov	sl, r6
   2cd28:	b	2cbfc <flatcc_json_parser_space_ext@@Base+0x5ac>

0002cd2c <flatcc_json_parser_string_escape@@Base>:
   2cd2c:	push	{r4, lr}
   2cd30:	sub	ip, r2, r1
   2cd34:	cmp	ip, #1
   2cd38:	ble	2cd48 <flatcc_json_parser_string_escape@@Base+0x1c>
   2cd3c:	ldrb	lr, [r1]
   2cd40:	cmp	lr, #92	; 0x5c
   2cd44:	beq	2cd5c <flatcc_json_parser_string_escape@@Base+0x30>
   2cd48:	mov	ip, #0
   2cd4c:	strb	ip, [r3]
   2cd50:	mov	r3, #18
   2cd54:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2cd58:	pop	{r4, pc}
   2cd5c:	ldrb	lr, [r1, #1]
   2cd60:	sub	lr, lr, #34	; 0x22
   2cd64:	cmp	lr, #86	; 0x56
   2cd68:	ldrls	pc, [pc, lr, lsl #2]
   2cd6c:	b	2d258 <flatcc_json_parser_string_escape@@Base+0x52c>
   2cd70:	andeq	sp, r2, r0, lsl r2
   2cd74:	andeq	sp, r2, r8, asr r2
   2cd78:	andeq	sp, r2, r8, asr r2
   2cd7c:	andeq	sp, r2, r8, asr r2
   2cd80:	andeq	sp, r2, r8, asr r2
   2cd84:	andeq	sp, r2, r8, asr r2
   2cd88:	andeq	sp, r2, r8, asr r2
   2cd8c:	andeq	sp, r2, r8, asr r2
   2cd90:	andeq	sp, r2, r8, asr r2
   2cd94:	andeq	sp, r2, r8, asr r2
   2cd98:	andeq	sp, r2, r8, asr r2
   2cd9c:	andeq	sp, r2, r8, asr r2
   2cda0:	andeq	sp, r2, r8, asr r2
   2cda4:	andeq	sp, r2, r0, asr #4
   2cda8:	andeq	sp, r2, r8, asr r2
   2cdac:	andeq	sp, r2, r8, asr r2
   2cdb0:	andeq	sp, r2, r8, asr r2
   2cdb4:	andeq	sp, r2, r8, asr r2
   2cdb8:	andeq	sp, r2, r8, asr r2
   2cdbc:	andeq	sp, r2, r8, asr r2
   2cdc0:	andeq	sp, r2, r8, asr r2
   2cdc4:	andeq	sp, r2, r8, asr r2
   2cdc8:	andeq	sp, r2, r8, asr r2
   2cdcc:	andeq	sp, r2, r8, asr r2
   2cdd0:	andeq	sp, r2, r8, asr r2
   2cdd4:	andeq	sp, r2, r8, asr r2
   2cdd8:	andeq	sp, r2, r8, asr r2
   2cddc:	andeq	sp, r2, r8, asr r2
   2cde0:	andeq	sp, r2, r8, asr r2
   2cde4:	andeq	sp, r2, r8, asr r2
   2cde8:	andeq	sp, r2, r8, asr r2
   2cdec:	andeq	sp, r2, r8, asr r2
   2cdf0:	andeq	sp, r2, r8, asr r2
   2cdf4:	andeq	sp, r2, r8, asr r2
   2cdf8:	andeq	sp, r2, r8, asr r2
   2cdfc:	andeq	sp, r2, r8, asr r2
   2ce00:	andeq	sp, r2, r8, asr r2
   2ce04:	andeq	sp, r2, r8, asr r2
   2ce08:	andeq	sp, r2, r8, asr r2
   2ce0c:	andeq	sp, r2, r8, asr r2
   2ce10:	andeq	sp, r2, r8, asr r2
   2ce14:	andeq	sp, r2, r8, asr r2
   2ce18:	andeq	sp, r2, r8, asr r2
   2ce1c:	andeq	sp, r2, r8, asr r2
   2ce20:	andeq	sp, r2, r8, asr r2
   2ce24:	andeq	sp, r2, r8, asr r2
   2ce28:	andeq	sp, r2, r8, asr r2
   2ce2c:	andeq	sp, r2, r8, asr r2
   2ce30:	andeq	sp, r2, r8, asr r2
   2ce34:	andeq	sp, r2, r8, asr r2
   2ce38:	andeq	sp, r2, r8, asr r2
   2ce3c:	andeq	sp, r2, r8, asr r2
   2ce40:	andeq	sp, r2, r8, asr r2
   2ce44:	andeq	sp, r2, r8, asr r2
   2ce48:	andeq	sp, r2, r8, asr r2
   2ce4c:	andeq	sp, r2, r8, asr r2
   2ce50:	andeq	sp, r2, r8, asr r2
   2ce54:	andeq	sp, r2, r8, asr r2
   2ce58:	andeq	sp, r2, r8, lsr #4
   2ce5c:	andeq	sp, r2, r8, asr r2
   2ce60:	andeq	sp, r2, r8, asr r2
   2ce64:	andeq	sp, r2, r8, asr r2
   2ce68:	andeq	sp, r2, r8, asr r2
   2ce6c:	andeq	sp, r2, r8, asr r2
   2ce70:	andeq	sp, r2, r0, ror #3
   2ce74:	andeq	sp, r2, r8, asr r2
   2ce78:	andeq	sp, r2, r8, asr r2
   2ce7c:	andeq	sp, r2, r8, asr r2
   2ce80:	strdeq	sp, [r2], -r8
   2ce84:	andeq	sp, r2, r8, asr r2
   2ce88:	andeq	sp, r2, r8, asr r2
   2ce8c:	andeq	sp, r2, r8, asr r2
   2ce90:	andeq	sp, r2, r8, asr r2
   2ce94:	andeq	sp, r2, r8, asr r2
   2ce98:	andeq	sp, r2, r8, asr r2
   2ce9c:	andeq	sp, r2, r8, asr r2
   2cea0:			; <UNDEFINED> instruction: 0x0002d1b0
   2cea4:	andeq	sp, r2, r8, asr r2
   2cea8:	andeq	sp, r2, r8, asr r2
   2ceac:	andeq	sp, r2, r8, asr r2
   2ceb0:	andeq	sp, r2, r8, asr #3
   2ceb4:	andeq	sp, r2, r8, asr r2
   2ceb8:	muleq	r2, r8, r1
   2cebc:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   2cec0:	andeq	sp, r2, r8, asr r2
   2cec4:	andeq	sp, r2, r8, asr r2
   2cec8:	andeq	ip, r2, ip, asr #29
   2cecc:	mov	lr, #1
   2ced0:	strb	lr, [r3]
   2ced4:	cmp	ip, #3
   2ced8:	ble	2cf5c <flatcc_json_parser_string_escape@@Base+0x230>
   2cedc:	ldrb	ip, [r1, #2]
   2cee0:	sub	lr, ip, #48	; 0x30
   2cee4:	uxtb	lr, lr
   2cee8:	cmp	lr, #9
   2ceec:	lslls	ip, ip, #4
   2cef0:	andls	ip, ip, #240	; 0xf0
   2cef4:	bls	2cf18 <flatcc_json_parser_string_escape@@Base+0x1ec>
   2cef8:	orr	ip, ip, #32
   2cefc:	sub	lr, ip, #97	; 0x61
   2cf00:	uxtb	lr, lr
   2cf04:	cmp	lr, #5
   2cf08:	bhi	2cf70 <flatcc_json_parser_string_escape@@Base+0x244>
   2cf0c:	sub	ip, ip, #87	; 0x57
   2cf10:	lsl	ip, ip, #4
   2cf14:	uxtb	ip, ip
   2cf18:	ldrb	lr, [r1, #3]
   2cf1c:	sub	r4, lr, #48	; 0x30
   2cf20:	uxtb	r4, r4
   2cf24:	cmp	r4, #9
   2cf28:	orrls	ip, r4, ip
   2cf2c:	bls	2cf50 <flatcc_json_parser_string_escape@@Base+0x224>
   2cf30:	orr	lr, lr, #32
   2cf34:	sub	r4, lr, #97	; 0x61
   2cf38:	uxtb	r4, r4
   2cf3c:	cmp	r4, #5
   2cf40:	bhi	2cf84 <flatcc_json_parser_string_escape@@Base+0x258>
   2cf44:	sub	lr, lr, #87	; 0x57
   2cf48:	orr	ip, lr, ip
   2cf4c:	uxtb	ip, ip
   2cf50:	strb	ip, [r3, #1]
   2cf54:	add	r0, r1, #4
   2cf58:	pop	{r4, pc}
   2cf5c:	mov	ip, #0
   2cf60:	strb	ip, [r3]
   2cf64:	mov	r3, #18
   2cf68:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2cf6c:	pop	{r4, pc}
   2cf70:	mov	ip, #0
   2cf74:	strb	ip, [r3]
   2cf78:	mov	r3, #18
   2cf7c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2cf80:	pop	{r4, pc}
   2cf84:	mov	ip, #0
   2cf88:	strb	ip, [r3]
   2cf8c:	mov	r3, #18
   2cf90:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2cf94:	pop	{r4, pc}
   2cf98:	cmp	ip, #5
   2cf9c:	ble	2d060 <flatcc_json_parser_string_escape@@Base+0x334>
   2cfa0:	ldrb	ip, [r1, #2]
   2cfa4:	sub	lr, ip, #48	; 0x30
   2cfa8:	uxtb	lr, lr
   2cfac:	cmp	lr, #9
   2cfb0:	lslls	ip, ip, #12
   2cfb4:	andls	lr, ip, #61440	; 0xf000
   2cfb8:	bls	2cfdc <flatcc_json_parser_string_escape@@Base+0x2b0>
   2cfbc:	orr	ip, ip, #32
   2cfc0:	sub	lr, ip, #97	; 0x61
   2cfc4:	uxtb	lr, lr
   2cfc8:	cmp	lr, #5
   2cfcc:	bhi	2d074 <flatcc_json_parser_string_escape@@Base+0x348>
   2cfd0:	sub	ip, ip, #87	; 0x57
   2cfd4:	lsl	ip, ip, #12
   2cfd8:	and	lr, ip, #61440	; 0xf000
   2cfdc:	ldrb	ip, [r1, #3]
   2cfe0:	sub	r4, ip, #48	; 0x30
   2cfe4:	uxtb	r4, r4
   2cfe8:	cmp	r4, #9
   2cfec:	bhi	2d088 <flatcc_json_parser_string_escape@@Base+0x35c>
   2cff0:	sub	ip, ip, #48	; 0x30
   2cff4:	uxth	ip, ip
   2cff8:	orr	ip, lr, ip, lsl #8
   2cffc:	and	ip, ip, #65280	; 0xff00
   2d000:	ldrb	lr, [r1, #4]
   2d004:	sub	r4, lr, #48	; 0x30
   2d008:	uxtb	r4, r4
   2d00c:	cmp	r4, #9
   2d010:	bhi	2d0c4 <flatcc_json_parser_string_escape@@Base+0x398>
   2d014:	sub	lr, lr, #48	; 0x30
   2d018:	uxth	lr, lr
   2d01c:	orr	ip, ip, lr, lsl #4
   2d020:	uxth	ip, ip
   2d024:	ldrb	lr, [r1, #5]
   2d028:	sub	r4, lr, #48	; 0x30
   2d02c:	uxtb	r4, r4
   2d030:	cmp	r4, #9
   2d034:	bhi	2d100 <flatcc_json_parser_string_escape@@Base+0x3d4>
   2d038:	sub	r2, lr, #48	; 0x30
   2d03c:	orr	r2, ip, r2
   2d040:	uxth	r2, r2
   2d044:	cmp	r2, #127	; 0x7f
   2d048:	bhi	2d134 <flatcc_json_parser_string_escape@@Base+0x408>
   2d04c:	mov	r0, #1
   2d050:	strb	r0, [r3]
   2d054:	strb	r2, [r3, #1]
   2d058:	add	r0, r1, #6
   2d05c:	pop	{r4, pc}
   2d060:	mov	ip, #0
   2d064:	strb	ip, [r3]
   2d068:	mov	r3, #18
   2d06c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2d070:	pop	{r4, pc}
   2d074:	mov	ip, #0
   2d078:	strb	ip, [r3]
   2d07c:	mov	r3, #18
   2d080:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2d084:	pop	{r4, pc}
   2d088:	orr	ip, ip, #32
   2d08c:	sub	r4, ip, #97	; 0x61
   2d090:	uxtb	r4, r4
   2d094:	cmp	r4, #5
   2d098:	bhi	2d0b0 <flatcc_json_parser_string_escape@@Base+0x384>
   2d09c:	sub	ip, ip, #87	; 0x57
   2d0a0:	uxth	ip, ip
   2d0a4:	orr	ip, lr, ip, lsl #8
   2d0a8:	and	ip, ip, #65280	; 0xff00
   2d0ac:	b	2d000 <flatcc_json_parser_string_escape@@Base+0x2d4>
   2d0b0:	mov	ip, #0
   2d0b4:	strb	ip, [r3]
   2d0b8:	mov	r3, #18
   2d0bc:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2d0c0:	pop	{r4, pc}
   2d0c4:	orr	lr, lr, #32
   2d0c8:	sub	r4, lr, #97	; 0x61
   2d0cc:	uxtb	r4, r4
   2d0d0:	cmp	r4, #5
   2d0d4:	bhi	2d0ec <flatcc_json_parser_string_escape@@Base+0x3c0>
   2d0d8:	sub	lr, lr, #87	; 0x57
   2d0dc:	uxth	lr, lr
   2d0e0:	orr	ip, ip, lr, lsl #4
   2d0e4:	uxth	ip, ip
   2d0e8:	b	2d024 <flatcc_json_parser_string_escape@@Base+0x2f8>
   2d0ec:	mov	ip, #0
   2d0f0:	strb	ip, [r3]
   2d0f4:	mov	r3, #18
   2d0f8:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2d0fc:	pop	{r4, pc}
   2d100:	orr	lr, lr, #32
   2d104:	sub	r4, lr, #97	; 0x61
   2d108:	uxtb	r4, r4
   2d10c:	cmp	r4, #5
   2d110:	subls	r2, lr, #87	; 0x57
   2d114:	orrls	r2, ip, r2
   2d118:	uxthls	r2, r2
   2d11c:	bls	2d044 <flatcc_json_parser_string_escape@@Base+0x318>
   2d120:	mov	ip, #0
   2d124:	strb	ip, [r3]
   2d128:	mov	r3, #18
   2d12c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2d130:	pop	{r4, pc}
   2d134:	cmp	r2, #2048	; 0x800
   2d138:	bcs	2d164 <flatcc_json_parser_string_escape@@Base+0x438>
   2d13c:	mov	r0, #2
   2d140:	strb	r0, [r3]
   2d144:	mvn	r0, #63	; 0x3f
   2d148:	orr	r0, r0, r2, lsr #6
   2d14c:	strb	r0, [r3, #1]
   2d150:	and	r2, r2, #63	; 0x3f
   2d154:	mvn	r2, r2, lsl #25
   2d158:	mvn	r2, r2, lsr #25
   2d15c:	strb	r2, [r3, #2]
   2d160:	b	2d058 <flatcc_json_parser_string_escape@@Base+0x32c>
   2d164:	mov	r0, #3
   2d168:	strb	r0, [r3]
   2d16c:	mvn	r0, #31
   2d170:	orr	r0, r0, r2, lsr #12
   2d174:	strb	r0, [r3, #1]
   2d178:	lsl	r0, r2, #20
   2d17c:	mvn	ip, #127	; 0x7f
   2d180:	orr	r0, ip, r0, lsr #26
   2d184:	strb	r0, [r3, #2]
   2d188:	and	r2, r2, #63	; 0x3f
   2d18c:	orr	r2, r2, ip
   2d190:	strb	r2, [r3, #3]
   2d194:	b	2d058 <flatcc_json_parser_string_escape@@Base+0x32c>
   2d198:	mov	r2, #1
   2d19c:	strb	r2, [r3]
   2d1a0:	mov	r2, #9
   2d1a4:	strb	r2, [r3, #1]
   2d1a8:	add	r0, r1, #2
   2d1ac:	pop	{r4, pc}
   2d1b0:	mov	r2, #1
   2d1b4:	strb	r2, [r3]
   2d1b8:	mov	r2, #10
   2d1bc:	strb	r2, [r3, #1]
   2d1c0:	add	r0, r1, #2
   2d1c4:	pop	{r4, pc}
   2d1c8:	mov	r2, #1
   2d1cc:	strb	r2, [r3]
   2d1d0:	mov	r2, #13
   2d1d4:	strb	r2, [r3, #1]
   2d1d8:	add	r0, r1, #2
   2d1dc:	pop	{r4, pc}
   2d1e0:	mov	r2, #1
   2d1e4:	strb	r2, [r3]
   2d1e8:	mov	r2, #8
   2d1ec:	strb	r2, [r3, #1]
   2d1f0:	add	r0, r1, #2
   2d1f4:	pop	{r4, pc}
   2d1f8:	mov	r2, #1
   2d1fc:	strb	r2, [r3]
   2d200:	mov	r2, #12
   2d204:	strb	r2, [r3, #1]
   2d208:	add	r0, r1, #2
   2d20c:	pop	{r4, pc}
   2d210:	mov	r2, #1
   2d214:	strb	r2, [r3]
   2d218:	mov	r2, #34	; 0x22
   2d21c:	strb	r2, [r3, #1]
   2d220:	add	r0, r1, #2
   2d224:	pop	{r4, pc}
   2d228:	mov	r2, #1
   2d22c:	strb	r2, [r3]
   2d230:	mov	r2, #92	; 0x5c
   2d234:	strb	r2, [r3, #1]
   2d238:	add	r0, r1, #2
   2d23c:	pop	{r4, pc}
   2d240:	mov	r2, #1
   2d244:	strb	r2, [r3]
   2d248:	mov	r2, #47	; 0x2f
   2d24c:	strb	r2, [r3, #1]
   2d250:	add	r0, r1, #2
   2d254:	pop	{r4, pc}
   2d258:	mov	ip, #0
   2d25c:	strb	ip, [r3]
   2d260:	mov	r3, #18
   2d264:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2d268:	pop	{r4, pc}

0002d26c <flatcc_json_parser_skip_constant@@Base>:
   2d26c:	push	{r4, r5, r6, lr}
   2d270:	mov	r6, r0
   2d274:	mov	r4, r1
   2d278:	mov	r5, r2
   2d27c:	cmp	r1, r2
   2d280:	bne	2d294 <flatcc_json_parser_skip_constant@@Base+0x28>
   2d284:	b	2d328 <flatcc_json_parser_skip_constant@@Base+0xbc>
   2d288:	add	r4, r4, #1
   2d28c:	cmp	r5, r4
   2d290:	beq	2d328 <flatcc_json_parser_skip_constant@@Base+0xbc>
   2d294:	ldrb	r3, [r4]
   2d298:	cmp	r3, #95	; 0x5f
   2d29c:	movne	r2, #0
   2d2a0:	moveq	r2, #1
   2d2a4:	orrs	r2, r2, r3, lsr #7
   2d2a8:	bne	2d288 <flatcc_json_parser_skip_constant@@Base+0x1c>
   2d2ac:	sub	r2, r3, #48	; 0x30
   2d2b0:	uxtb	r2, r2
   2d2b4:	cmp	r3, #46	; 0x2e
   2d2b8:	cmpne	r2, #9
   2d2bc:	bls	2d288 <flatcc_json_parser_skip_constant@@Base+0x1c>
   2d2c0:	orr	r2, r3, #32
   2d2c4:	sub	r2, r2, #97	; 0x61
   2d2c8:	uxtb	r2, r2
   2d2cc:	cmp	r2, #25
   2d2d0:	addls	r4, r4, #1
   2d2d4:	bls	2d28c <flatcc_json_parser_skip_constant@@Base+0x20>
   2d2d8:	sub	r2, r5, r4
   2d2dc:	cmp	r2, #1
   2d2e0:	ble	2d2f0 <flatcc_json_parser_skip_constant@@Base+0x84>
   2d2e4:	cmp	r3, #32
   2d2e8:	bhi	2d324 <flatcc_json_parser_skip_constant@@Base+0xb8>
   2d2ec:	beq	2d310 <flatcc_json_parser_skip_constant@@Base+0xa4>
   2d2f0:	mov	r2, r5
   2d2f4:	mov	r1, r4
   2d2f8:	mov	r0, r6
   2d2fc:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2d300:	cmp	r0, r4
   2d304:	beq	2d330 <flatcc_json_parser_skip_constant@@Base+0xc4>
   2d308:	mov	r4, r0
   2d30c:	b	2d28c <flatcc_json_parser_skip_constant@@Base+0x20>
   2d310:	ldrb	r3, [r4, #1]
   2d314:	cmp	r3, #32
   2d318:	addhi	r0, r4, #1
   2d31c:	bls	2d2f0 <flatcc_json_parser_skip_constant@@Base+0x84>
   2d320:	b	2d300 <flatcc_json_parser_skip_constant@@Base+0x94>
   2d324:	mov	r5, r4
   2d328:	mov	r0, r5
   2d32c:	pop	{r4, r5, r6, pc}
   2d330:	mov	r5, r0
   2d334:	b	2d328 <flatcc_json_parser_skip_constant@@Base+0xbc>

0002d338 <flatcc_json_parser_match_constant@@Base>:
   2d338:	push	{r4, lr}
   2d33c:	ldr	r4, [sp, #8]
   2d340:	sub	ip, r2, r1
   2d344:	cmp	r3, ip
   2d348:	bge	2d388 <flatcc_json_parser_match_constant@@Base+0x50>
   2d34c:	mov	lr, r0
   2d350:	add	ip, r1, r3
   2d354:	ldrb	r3, [r1, r3]
   2d358:	cmp	r3, #32
   2d35c:	beq	2d398 <flatcc_json_parser_match_constant@@Base+0x60>
   2d360:	cmp	r3, #34	; 0x22
   2d364:	beq	2d3ec <flatcc_json_parser_match_constant@@Base+0xb4>
   2d368:	cmp	r3, #92	; 0x5c
   2d36c:	bne	2d43c <flatcc_json_parser_match_constant@@Base+0x104>
   2d370:	mov	r3, #0
   2d374:	str	r3, [r4]
   2d378:	mov	r3, #18
   2d37c:	mov	r1, ip
   2d380:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2d384:	pop	{r4, pc}
   2d388:	mov	r3, #0
   2d38c:	str	r3, [r4]
   2d390:	mov	r0, r1
   2d394:	pop	{r4, pc}
   2d398:	add	r3, ip, #1
   2d39c:	cmp	r2, r3
   2d3a0:	beq	2d44c <flatcc_json_parser_match_constant@@Base+0x114>
   2d3a4:	ldrb	r1, [ip, #1]
   2d3a8:	cmp	r1, #32
   2d3ac:	bne	2d460 <flatcc_json_parser_match_constant@@Base+0x128>
   2d3b0:	add	r3, ip, #2
   2d3b4:	mov	ip, r3
   2d3b8:	cmp	r3, r2
   2d3bc:	beq	2d450 <flatcc_json_parser_match_constant@@Base+0x118>
   2d3c0:	add	r3, r3, #1
   2d3c4:	ldrb	r1, [ip]
   2d3c8:	cmp	r1, #32
   2d3cc:	beq	2d3b4 <flatcc_json_parser_match_constant@@Base+0x7c>
   2d3d0:	ldrb	r3, [ip]
   2d3d4:	cmp	r3, #34	; 0x22
   2d3d8:	beq	2d3ec <flatcc_json_parser_match_constant@@Base+0xb4>
   2d3dc:	mov	r3, #1
   2d3e0:	str	r3, [r4]
   2d3e4:	mov	r0, ip
   2d3e8:	pop	{r4, pc}
   2d3ec:	add	r0, ip, #1
   2d3f0:	rsb	r3, r0, #0
   2d3f4:	cmp	r3, #1
   2d3f8:	ble	2d40c <flatcc_json_parser_match_constant@@Base+0xd4>
   2d3fc:	ldrb	r3, [ip, #1]
   2d400:	cmp	r3, #32
   2d404:	bhi	2d41c <flatcc_json_parser_match_constant@@Base+0xe4>
   2d408:	beq	2d428 <flatcc_json_parser_match_constant@@Base+0xf0>
   2d40c:	mov	r2, #0
   2d410:	mov	r1, r0
   2d414:	mov	r0, lr
   2d418:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2d41c:	mov	r3, #0
   2d420:	str	r3, [r4]
   2d424:	pop	{r4, pc}
   2d428:	ldrb	r3, [ip, #2]
   2d42c:	cmp	r3, #32
   2d430:	addhi	r0, ip, #2
   2d434:	bls	2d40c <flatcc_json_parser_match_constant@@Base+0xd4>
   2d438:	b	2d41c <flatcc_json_parser_match_constant@@Base+0xe4>
   2d43c:	mov	r3, #0
   2d440:	str	r3, [r4]
   2d444:	mov	r0, r1
   2d448:	pop	{r4, pc}
   2d44c:	mov	ip, r3
   2d450:	mov	r3, #0
   2d454:	str	r3, [r4]
   2d458:	mov	r0, ip
   2d45c:	pop	{r4, pc}
   2d460:	mov	ip, r3
   2d464:	b	2d3d0 <flatcc_json_parser_match_constant@@Base+0x98>

0002d468 <flatcc_json_parser_double@@Base>:
   2d468:	push	{r4, r5, r6, r7, r8, lr}
   2d46c:	mov	r4, #0
   2d470:	mov	r5, #0
   2d474:	strd	r4, [r3]
   2d478:	cmp	r1, r2
   2d47c:	beq	2d510 <flatcc_json_parser_double@@Base+0xa8>
   2d480:	ldrb	ip, [r1]
   2d484:	cmp	ip, #45	; 0x2d
   2d488:	addeq	ip, r1, #1
   2d48c:	movne	ip, r1
   2d490:	mov	r6, r3
   2d494:	mov	r5, r2
   2d498:	mov	r4, r1
   2d49c:	mov	r7, r0
   2d4a0:	sub	r3, r2, ip
   2d4a4:	cmp	r3, #1
   2d4a8:	ble	2d4c0 <flatcc_json_parser_double@@Base+0x58>
   2d4ac:	ldrb	r3, [ip]
   2d4b0:	cmp	r3, #46	; 0x2e
   2d4b4:	beq	2d524 <flatcc_json_parser_double@@Base+0xbc>
   2d4b8:	cmp	r3, #48	; 0x30
   2d4bc:	beq	2d518 <flatcc_json_parser_double@@Base+0xb0>
   2d4c0:	mov	r2, r6
   2d4c4:	sub	r1, r5, r4
   2d4c8:	mov	r0, r4
   2d4cc:	bl	2b818 <grisu3_diy_fp_encode_double@@Base+0x4e8>
   2d4d0:	mov	r2, r0
   2d4d4:	cmp	r4, r0
   2d4d8:	cmpne	r0, #0
   2d4dc:	bne	2d510 <flatcc_json_parser_double@@Base+0xa8>
   2d4e0:	vldr	d7, [r6]
   2d4e4:	vabs.f64	d7, d7
   2d4e8:	vldr	d6, [pc, #80]	; 2d540 <flatcc_json_parser_double@@Base+0xd8>
   2d4ec:	vcmp.f64	d7, d6
   2d4f0:	vmrs	APSR_nzcv, fpscr
   2d4f4:	movgt	r3, #7
   2d4f8:	movle	r3, #6
   2d4fc:	mov	r2, r5
   2d500:	mov	r1, r4
   2d504:	mov	r0, r7
   2d508:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2d50c:	mov	r2, r0
   2d510:	mov	r0, r2
   2d514:	pop	{r4, r5, r6, r7, r8, pc}
   2d518:	ldrb	r3, [ip, #1]
   2d51c:	cmp	r3, #48	; 0x30
   2d520:	bne	2d4c0 <flatcc_json_parser_double@@Base+0x58>
   2d524:	mov	r3, #6
   2d528:	mov	r2, r5
   2d52c:	mov	r1, r4
   2d530:	mov	r0, r7
   2d534:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2d538:	mov	r2, r0
   2d53c:	b	2d510 <flatcc_json_parser_double@@Base+0xa8>
   2d540:			; <UNDEFINED> instruction: 0xffffffff
   2d544:	svcvc	0x00efffff

0002d548 <flatcc_json_parser_float@@Base>:
   2d548:	mov	ip, #0
   2d54c:	str	ip, [r3]
   2d550:	cmp	r1, r2
   2d554:	beq	2d664 <flatcc_json_parser_float@@Base+0x11c>
   2d558:	push	{r4, r5, r6, r7, lr}
   2d55c:	sub	sp, sp, #12
   2d560:	ldrb	ip, [r1]
   2d564:	cmp	ip, #45	; 0x2d
   2d568:	addeq	ip, r1, #1
   2d56c:	movne	ip, r1
   2d570:	mov	r6, r3
   2d574:	mov	r5, r2
   2d578:	mov	r4, r1
   2d57c:	mov	r7, r0
   2d580:	sub	r3, r2, ip
   2d584:	cmp	r3, #1
   2d588:	ble	2d5a0 <flatcc_json_parser_float@@Base+0x58>
   2d58c:	ldrb	r3, [ip]
   2d590:	cmp	r3, #46	; 0x2e
   2d594:	beq	2d620 <flatcc_json_parser_float@@Base+0xd8>
   2d598:	cmp	r3, #48	; 0x30
   2d59c:	beq	2d614 <flatcc_json_parser_float@@Base+0xcc>
   2d5a0:	mov	r2, sp
   2d5a4:	sub	r1, r5, r4
   2d5a8:	mov	r0, r4
   2d5ac:	bl	2b818 <grisu3_diy_fp_encode_double@@Base+0x4e8>
   2d5b0:	vldr	d6, [sp]
   2d5b4:	vcvt.f32.f64	s15, d6
   2d5b8:	vstr	s15, [r6]
   2d5bc:	vabs.f32	s15, s15
   2d5c0:	vldr	s14, [pc, #164]	; 2d66c <flatcc_json_parser_float@@Base+0x124>
   2d5c4:	vcmp.f32	s15, s14
   2d5c8:	vmrs	APSR_nzcv, fpscr
   2d5cc:	ble	2d638 <flatcc_json_parser_float@@Base+0xf0>
   2d5d0:	vcmpe.f64	d6, #0.0
   2d5d4:	vmrs	APSR_nzcv, fpscr
   2d5d8:	vldr	s14, [pc, #144]	; 2d670 <flatcc_json_parser_float@@Base+0x128>
   2d5dc:	vldr	s15, [pc, #144]	; 2d674 <flatcc_json_parser_float@@Base+0x12c>
   2d5e0:	vmovpl.f32	s15, s14
   2d5e4:	vstr	s15, [r6]
   2d5e8:	vabs.f32	s15, s15
   2d5ec:	vldr	s14, [pc, #120]	; 2d66c <flatcc_json_parser_float@@Base+0x124>
   2d5f0:	vcmp.f32	s15, s14
   2d5f4:	vmrs	APSR_nzcv, fpscr
   2d5f8:	bgt	2d64c <flatcc_json_parser_float@@Base+0x104>
   2d5fc:	mov	r3, #6
   2d600:	mov	r2, r5
   2d604:	mov	r1, r4
   2d608:	mov	r0, r7
   2d60c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2d610:	b	2d644 <flatcc_json_parser_float@@Base+0xfc>
   2d614:	ldrb	r3, [ip, #1]
   2d618:	cmp	r3, #48	; 0x30
   2d61c:	bne	2d5a0 <flatcc_json_parser_float@@Base+0x58>
   2d620:	mov	r3, #6
   2d624:	mov	r2, r5
   2d628:	mov	r1, r4
   2d62c:	mov	r0, r7
   2d630:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2d634:	b	2d644 <flatcc_json_parser_float@@Base+0xfc>
   2d638:	cmp	r4, r0
   2d63c:	cmpne	r0, #0
   2d640:	beq	2d5fc <flatcc_json_parser_float@@Base+0xb4>
   2d644:	add	sp, sp, #12
   2d648:	pop	{r4, r5, r6, r7, pc}
   2d64c:	mov	r3, #7
   2d650:	mov	r2, r5
   2d654:	mov	r1, r4
   2d658:	mov	r0, r7
   2d65c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2d660:	b	2d644 <flatcc_json_parser_float@@Base+0xfc>
   2d664:	mov	r0, r2
   2d668:	bx	lr
   2d66c:	svcvc	0x007fffff
   2d670:	svcvc	0x00800000
   2d674:			; <UNDEFINED> instruction: 0xff800000

0002d678 <flatcc_json_parser_integer@@Base>:
   2d678:	cmp	r1, r2
   2d67c:	beq	2d7cc <flatcc_json_parser_integer@@Base+0x154>
   2d680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d684:	sub	sp, sp, #12
   2d688:	mov	r8, r1
   2d68c:	ldrb	ip, [r1]
   2d690:	cmp	ip, #45	; 0x2d
   2d694:	movne	ip, #0
   2d698:	moveq	ip, #1
   2d69c:	str	ip, [r3]
   2d6a0:	add	r1, r1, ip
   2d6a4:	cmp	r2, r1
   2d6a8:	beq	2d7b8 <flatcc_json_parser_integer@@Base+0x140>
   2d6ac:	mov	fp, r3
   2d6b0:	mov	sl, r2
   2d6b4:	mov	r9, r8
   2d6b8:	str	r0, [sp, #4]
   2d6bc:	ldrb	r6, [r8, ip]
   2d6c0:	sub	r3, r6, #48	; 0x30
   2d6c4:	uxtb	r3, r3
   2d6c8:	cmp	r3, #9
   2d6cc:	bhi	2d780 <flatcc_json_parser_integer@@Base+0x108>
   2d6d0:	uxtb	r6, r6
   2d6d4:	mov	r7, #0
   2d6d8:	subs	r6, r6, #48	; 0x30
   2d6dc:	sbc	r7, r7, #0
   2d6e0:	add	ip, r1, #1
   2d6e4:	mov	lr, r2
   2d6e8:	mov	r0, #10
   2d6ec:	mov	r1, ip
   2d6f0:	cmp	ip, lr
   2d6f4:	beq	2d7c0 <flatcc_json_parser_integer@@Base+0x148>
   2d6f8:	ldrb	r2, [ip], #1
   2d6fc:	sub	r3, r2, #48	; 0x30
   2d700:	uxtb	r3, r3
   2d704:	cmp	r3, #9
   2d708:	bhi	2d788 <flatcc_json_parser_integer@@Base+0x110>
   2d70c:	umull	r4, r5, r6, r0
   2d710:	mla	r5, r0, r7, r5
   2d714:	subs	r4, r4, #48	; 0x30
   2d718:	sbc	r5, r5, #0
   2d71c:	uxtb	r2, r2
   2d720:	mov	r3, #0
   2d724:	adds	r2, r2, r4
   2d728:	adc	r3, r3, r5
   2d72c:	cmp	r3, r7
   2d730:	cmpeq	r2, r6
   2d734:	movcs	r6, r2
   2d738:	movcs	r7, r3
   2d73c:	bcs	2d6ec <flatcc_json_parser_integer@@Base+0x74>
   2d740:	cmp	fp, #0
   2d744:	movne	r3, #8
   2d748:	moveq	r3, #7
   2d74c:	mov	r2, sl
   2d750:	ldr	r0, [sp, #4]
   2d754:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2d758:	mov	r1, r0
   2d75c:	b	2d7ac <flatcc_json_parser_integer@@Base+0x134>
   2d760:	mov	r3, #12
   2d764:	mov	r2, sl
   2d768:	ldr	r0, [sp, #4]
   2d76c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2d770:	mov	r1, r0
   2d774:	b	2d7ac <flatcc_json_parser_integer@@Base+0x134>
   2d778:	mov	r1, r9
   2d77c:	b	2d7ac <flatcc_json_parser_integer@@Base+0x134>
   2d780:	mov	r6, #0
   2d784:	mov	r7, #0
   2d788:	cmp	r1, r9
   2d78c:	beq	2d778 <flatcc_json_parser_integer@@Base+0x100>
   2d790:	ldrb	r3, [r1]
   2d794:	and	r2, r3, #223	; 0xdf
   2d798:	cmp	r3, #46	; 0x2e
   2d79c:	cmpne	r2, #69	; 0x45
   2d7a0:	beq	2d760 <flatcc_json_parser_integer@@Base+0xe8>
   2d7a4:	ldr	r3, [sp, #48]	; 0x30
   2d7a8:	strd	r6, [r3]
   2d7ac:	mov	r0, r1
   2d7b0:	add	sp, sp, #12
   2d7b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d7b8:	mov	r6, #0
   2d7bc:	mov	r7, #0
   2d7c0:	cmp	r8, r1
   2d7c4:	beq	2d7ac <flatcc_json_parser_integer@@Base+0x134>
   2d7c8:	b	2d7a4 <flatcc_json_parser_integer@@Base+0x12c>
   2d7cc:	mov	r0, r2
   2d7d0:	bx	lr

0002d7d4 <flatcc_json_parser_generic_json@@Base>:
   2d7d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d7d8:	sub	sp, sp, #548	; 0x224
   2d7dc:	mov	r5, r2
   2d7e0:	cmp	r1, r2
   2d7e4:	beq	2e3bc <flatcc_json_parser_generic_json@@Base+0xbe8>
   2d7e8:	mov	r8, r0
   2d7ec:	mov	r4, r1
   2d7f0:	add	r6, sp, #32
   2d7f4:	mov	r7, r6
   2d7f8:	mov	sl, #10
   2d7fc:	mov	fp, #9
   2d800:	cmp	r6, r7
   2d804:	beq	2e3d4 <flatcc_json_parser_generic_json@@Base+0xc00>
   2d808:	ldrb	r3, [r6, #-1]
   2d80c:	cmp	r3, #125	; 0x7d
   2d810:	beq	2d990 <flatcc_json_parser_generic_json@@Base+0x1bc>
   2d814:	ldrb	r2, [r4]
   2d818:	sub	r3, r2, #34	; 0x22
   2d81c:	cmp	r3, #89	; 0x59
   2d820:	ldrls	pc, [pc, r3, lsl #2]
   2d824:	b	2e04c <flatcc_json_parser_generic_json@@Base+0x878>
   2d828:	strdeq	sp, [r2], -ip
   2d82c:	andeq	lr, r2, ip, asr #32
   2d830:	andeq	lr, r2, ip, asr #32
   2d834:	andeq	lr, r2, ip, asr #32
   2d838:	andeq	lr, r2, ip, asr #32
   2d83c:	andeq	lr, r2, ip, asr #32
   2d840:	andeq	lr, r2, ip, asr #32
   2d844:	andeq	lr, r2, ip, asr #32
   2d848:	andeq	lr, r2, ip, asr #32
   2d84c:	andeq	lr, r2, ip, asr #32
   2d850:	andeq	lr, r2, ip, asr #32
   2d854:	andeq	sp, r2, r8, lsl #23
   2d858:	andeq	lr, r2, ip, asr #32
   2d85c:	andeq	lr, r2, ip, asr #32
   2d860:	andeq	sp, r2, r8, lsl #23
   2d864:	andeq	sp, r2, r8, lsl #23
   2d868:	andeq	sp, r2, r8, lsl #23
   2d86c:	andeq	sp, r2, r8, lsl #23
   2d870:	andeq	sp, r2, r8, lsl #23
   2d874:	andeq	sp, r2, r8, lsl #23
   2d878:	andeq	sp, r2, r8, lsl #23
   2d87c:	andeq	sp, r2, r8, lsl #23
   2d880:	andeq	sp, r2, r8, lsl #23
   2d884:	andeq	sp, r2, r8, lsl #23
   2d888:	andeq	lr, r2, ip, asr #32
   2d88c:	andeq	lr, r2, ip, asr #32
   2d890:	andeq	lr, r2, ip, asr #32
   2d894:	andeq	lr, r2, ip, asr #32
   2d898:	andeq	lr, r2, ip, asr #32
   2d89c:	andeq	lr, r2, ip, asr #32
   2d8a0:	andeq	lr, r2, ip, asr #32
   2d8a4:	andeq	lr, r2, ip, asr #32
   2d8a8:	andeq	lr, r2, ip, asr #32
   2d8ac:	andeq	lr, r2, ip, asr #32
   2d8b0:	andeq	lr, r2, ip, asr #32
   2d8b4:	andeq	lr, r2, ip, asr #32
   2d8b8:	andeq	lr, r2, ip, asr #32
   2d8bc:	andeq	lr, r2, ip, asr #32
   2d8c0:	andeq	lr, r2, ip, asr #32
   2d8c4:	andeq	lr, r2, ip, asr #32
   2d8c8:	andeq	lr, r2, ip, asr #32
   2d8cc:	andeq	lr, r2, ip, asr #32
   2d8d0:	andeq	lr, r2, ip, asr #32
   2d8d4:	andeq	lr, r2, ip, asr #32
   2d8d8:	andeq	lr, r2, ip, asr #32
   2d8dc:	andeq	lr, r2, ip, asr #32
   2d8e0:	andeq	lr, r2, ip, asr #32
   2d8e4:	andeq	lr, r2, ip, asr #32
   2d8e8:	andeq	lr, r2, ip, asr #32
   2d8ec:	andeq	lr, r2, ip, asr #32
   2d8f0:	andeq	lr, r2, ip, asr #32
   2d8f4:	andeq	lr, r2, ip, asr #32
   2d8f8:	andeq	lr, r2, ip, asr #32
   2d8fc:	andeq	lr, r2, ip, asr #32
   2d900:	andeq	lr, r2, ip, asr #32
   2d904:	andeq	lr, r2, ip, asr #32
   2d908:	andeq	lr, r2, ip, asr #32
   2d90c:	andeq	sp, r2, r4, lsl pc
   2d910:	andeq	lr, r2, ip, asr #32
   2d914:	andeq	lr, r2, ip, asr #32
   2d918:	andeq	lr, r2, ip, asr #32
   2d91c:	andeq	lr, r2, ip, asr #32
   2d920:	andeq	lr, r2, ip, asr #32
   2d924:	andeq	lr, r2, ip, asr #32
   2d928:	andeq	lr, r2, ip, asr #32
   2d92c:	andeq	lr, r2, ip, asr #32
   2d930:	andeq	lr, r2, ip, asr #32
   2d934:	andeq	lr, r2, ip, asr #32
   2d938:	ldrdeq	sp, [r2], -r4
   2d93c:	andeq	lr, r2, ip, asr #32
   2d940:	andeq	lr, r2, ip, asr #32
   2d944:	andeq	lr, r2, ip, asr #32
   2d948:	andeq	lr, r2, ip, asr #32
   2d94c:	andeq	lr, r2, ip, asr #32
   2d950:	andeq	lr, r2, ip, asr #32
   2d954:	andeq	lr, r2, ip, asr #32
   2d958:	ldrdeq	sp, [r2], -r4
   2d95c:	andeq	lr, r2, ip, asr #32
   2d960:	andeq	lr, r2, ip, asr #32
   2d964:	andeq	lr, r2, ip, asr #32
   2d968:	andeq	lr, r2, ip, asr #32
   2d96c:	andeq	lr, r2, ip, asr #32
   2d970:	ldrdeq	sp, [r2], -r4
   2d974:	andeq	lr, r2, ip, asr #32
   2d978:	andeq	lr, r2, ip, asr #32
   2d97c:	andeq	lr, r2, ip, asr #32
   2d980:	andeq	lr, r2, ip, asr #32
   2d984:	andeq	lr, r2, ip, asr #32
   2d988:	andeq	lr, r2, ip, asr #32
   2d98c:			; <UNDEFINED> instruction: 0x0002dfb0
   2d990:	ldrb	r3, [r4]
   2d994:	cmp	r3, #34	; 0x22
   2d998:	addeq	r1, r4, #1
   2d99c:	beq	2d9b8 <flatcc_json_parser_generic_json@@Base+0x1e4>
   2d9a0:	mov	r3, #5
   2d9a4:	mov	r2, r5
   2d9a8:	mov	r1, r4
   2d9ac:	mov	r0, r8
   2d9b0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2d9b4:	mov	r1, r0
   2d9b8:	cmp	r5, r1
   2d9bc:	beq	2da1c <flatcc_json_parser_generic_json@@Base+0x248>
   2d9c0:	ldrb	r3, [r1]
   2d9c4:	cmp	r3, #34	; 0x22
   2d9c8:	bne	2d9ec <flatcc_json_parser_generic_json@@Base+0x218>
   2d9cc:	add	r0, r1, #1
   2d9d0:	b	2da2c <flatcc_json_parser_generic_json@@Base+0x258>
   2d9d4:	add	r1, r3, #1
   2d9d8:	cmp	r5, r1
   2d9dc:	beq	2e3cc <flatcc_json_parser_generic_json@@Base+0xbf8>
   2d9e0:	ldrb	r3, [r3, #1]
   2d9e4:	cmp	r3, #34	; 0x22
   2d9e8:	beq	2da10 <flatcc_json_parser_generic_json@@Base+0x23c>
   2d9ec:	cmp	r3, #92	; 0x5c
   2d9f0:	movne	r3, r1
   2d9f4:	bne	2d9d4 <flatcc_json_parser_generic_json@@Base+0x200>
   2d9f8:	sub	r3, r5, r1
   2d9fc:	cmp	r3, #1
   2da00:	addgt	r3, r1, #1
   2da04:	bgt	2d9d4 <flatcc_json_parser_generic_json@@Base+0x200>
   2da08:	cmp	r5, r1
   2da0c:	beq	2da1c <flatcc_json_parser_generic_json@@Base+0x248>
   2da10:	ldrb	r3, [r1]
   2da14:	cmp	r3, #34	; 0x22
   2da18:	beq	2d9cc <flatcc_json_parser_generic_json@@Base+0x1f8>
   2da1c:	mov	r3, #20
   2da20:	mov	r2, r5
   2da24:	mov	r0, r8
   2da28:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2da2c:	sub	r3, r5, r0
   2da30:	cmp	r3, #1
   2da34:	ble	2da48 <flatcc_json_parser_generic_json@@Base+0x274>
   2da38:	ldrb	r3, [r0]
   2da3c:	cmp	r3, #32
   2da40:	bhi	2da58 <flatcc_json_parser_generic_json@@Base+0x284>
   2da44:	beq	2daa4 <flatcc_json_parser_generic_json@@Base+0x2d0>
   2da48:	mov	r2, r5
   2da4c:	mov	r1, r0
   2da50:	mov	r0, r8
   2da54:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2da58:	cmp	r5, r0
   2da5c:	beq	2dab8 <flatcc_json_parser_generic_json@@Base+0x2e4>
   2da60:	ldrb	r3, [r0]
   2da64:	cmp	r3, #58	; 0x3a
   2da68:	bne	2dad0 <flatcc_json_parser_generic_json@@Base+0x2fc>
   2da6c:	add	r4, r0, #1
   2da70:	sub	r3, r5, r4
   2da74:	cmp	r3, #1
   2da78:	ble	2da8c <flatcc_json_parser_generic_json@@Base+0x2b8>
   2da7c:	ldrb	r3, [r0, #1]
   2da80:	cmp	r3, #32
   2da84:	bhi	2d814 <flatcc_json_parser_generic_json@@Base+0x40>
   2da88:	beq	2dae8 <flatcc_json_parser_generic_json@@Base+0x314>
   2da8c:	mov	r2, r5
   2da90:	mov	r1, r4
   2da94:	mov	r0, r8
   2da98:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2da9c:	mov	r4, r0
   2daa0:	b	2d814 <flatcc_json_parser_generic_json@@Base+0x40>
   2daa4:	ldrb	r3, [r0, #1]
   2daa8:	cmp	r3, #32
   2daac:	addhi	r0, r0, #1
   2dab0:	bls	2da48 <flatcc_json_parser_generic_json@@Base+0x274>
   2dab4:	b	2da58 <flatcc_json_parser_generic_json@@Base+0x284>
   2dab8:	mov	r3, #10
   2dabc:	mov	r2, r5
   2dac0:	mov	r1, r0
   2dac4:	mov	r0, r8
   2dac8:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2dacc:	b	2e060 <flatcc_json_parser_generic_json@@Base+0x88c>
   2dad0:	mov	r3, #4
   2dad4:	mov	r2, r5
   2dad8:	mov	r1, r0
   2dadc:	mov	r0, r8
   2dae0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2dae4:	b	2e060 <flatcc_json_parser_generic_json@@Base+0x88c>
   2dae8:	ldrb	r3, [r0, #2]
   2daec:	cmp	r3, #32
   2daf0:	addhi	r4, r0, #2
   2daf4:	bls	2da8c <flatcc_json_parser_generic_json@@Base+0x2b8>
   2daf8:	b	2d814 <flatcc_json_parser_generic_json@@Base+0x40>
   2dafc:	cmp	r5, r4
   2db00:	addne	r0, r4, #1
   2db04:	bne	2db1c <flatcc_json_parser_generic_json@@Base+0x348>
   2db08:	mov	r3, #16
   2db0c:	mov	r2, r4
   2db10:	mov	r1, r5
   2db14:	mov	r0, r8
   2db18:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2db1c:	cmp	r5, r0
   2db20:	beq	2e554 <flatcc_json_parser_generic_json@@Base+0xd80>
   2db24:	ldrb	r3, [r0]
   2db28:	cmp	r3, #34	; 0x22
   2db2c:	bne	2db5c <flatcc_json_parser_generic_json@@Base+0x388>
   2db30:	b	2db80 <flatcc_json_parser_generic_json@@Base+0x3ac>
   2db34:	add	r3, sp, #28
   2db38:	mov	r2, r5
   2db3c:	mov	r1, r0
   2db40:	mov	r0, r8
   2db44:	bl	2cd2c <flatcc_json_parser_string_escape@@Base>
   2db48:	cmp	r5, r0
   2db4c:	beq	2e550 <flatcc_json_parser_generic_json@@Base+0xd7c>
   2db50:	ldrb	r3, [r0]
   2db54:	cmp	r3, #34	; 0x22
   2db58:	beq	2db80 <flatcc_json_parser_generic_json@@Base+0x3ac>
   2db5c:	mov	r2, r5
   2db60:	mov	r1, r0
   2db64:	mov	r0, r8
   2db68:	bl	2c5a4 <flatcc_json_parser_string_part@@Base>
   2db6c:	cmp	r5, r0
   2db70:	beq	2db34 <flatcc_json_parser_generic_json@@Base+0x360>
   2db74:	ldrb	r3, [r0]
   2db78:	cmp	r3, #34	; 0x22
   2db7c:	bne	2db34 <flatcc_json_parser_generic_json@@Base+0x360>
   2db80:	add	r0, r0, #1
   2db84:	b	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2db88:	cmp	r5, r4
   2db8c:	beq	2e37c <flatcc_json_parser_generic_json@@Base+0xba8>
   2db90:	cmp	r2, #45	; 0x2d
   2db94:	beq	2dc04 <flatcc_json_parser_generic_json@@Base+0x430>
   2db98:	ldrb	r3, [r4]
   2db9c:	cmp	r3, #48	; 0x30
   2dba0:	beq	2dc28 <flatcc_json_parser_generic_json@@Base+0x454>
   2dba4:	sub	r3, r3, #49	; 0x31
   2dba8:	uxtb	r3, r3
   2dbac:	cmp	r3, #8
   2dbb0:	bhi	2dcdc <flatcc_json_parser_generic_json@@Base+0x508>
   2dbb4:	add	r0, r4, #1
   2dbb8:	cmp	r5, r0
   2dbbc:	beq	2ddb0 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2dbc0:	ldrb	r3, [r4, #1]
   2dbc4:	sub	r3, r3, #48	; 0x30
   2dbc8:	uxtb	r3, r3
   2dbcc:	cmp	r3, #9
   2dbd0:	bhi	2dc34 <flatcc_json_parser_generic_json@@Base+0x460>
   2dbd4:	add	r4, r4, #2
   2dbd8:	mov	r2, r5
   2dbdc:	mov	r0, r4
   2dbe0:	cmp	r2, r4
   2dbe4:	beq	2e56c <flatcc_json_parser_generic_json@@Base+0xd98>
   2dbe8:	add	r4, r4, #1
   2dbec:	ldrb	r3, [r0]
   2dbf0:	sub	r3, r3, #48	; 0x30
   2dbf4:	uxtb	r3, r3
   2dbf8:	cmp	r3, #9
   2dbfc:	bls	2dbdc <flatcc_json_parser_generic_json@@Base+0x408>
   2dc00:	b	2dc34 <flatcc_json_parser_generic_json@@Base+0x460>
   2dc04:	add	r4, r4, #1
   2dc08:	cmp	r5, r4
   2dc0c:	bne	2db98 <flatcc_json_parser_generic_json@@Base+0x3c4>
   2dc10:	mov	r3, #6
   2dc14:	mov	r2, r5
   2dc18:	mov	r1, r4
   2dc1c:	mov	r0, r8
   2dc20:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2dc24:	b	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2dc28:	add	r0, r4, #1
   2dc2c:	cmp	r5, r0
   2dc30:	beq	2ddb0 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2dc34:	ldrb	r3, [r0]
   2dc38:	cmp	r3, #46	; 0x2e
   2dc3c:	beq	2dcf4 <flatcc_json_parser_generic_json@@Base+0x520>
   2dc40:	ldrb	r3, [r0]
   2dc44:	and	r3, r3, #223	; 0xdf
   2dc48:	cmp	r3, #69	; 0x45
   2dc4c:	bne	2e588 <flatcc_json_parser_generic_json@@Base+0xdb4>
   2dc50:	add	r1, r0, #1
   2dc54:	cmp	r5, r1
   2dc58:	beq	2dd70 <flatcc_json_parser_generic_json@@Base+0x59c>
   2dc5c:	ldrb	r3, [r0, #1]
   2dc60:	sub	r3, r3, #43	; 0x2b
   2dc64:	tst	r3, #253	; 0xfd
   2dc68:	bne	2dc78 <flatcc_json_parser_generic_json@@Base+0x4a4>
   2dc6c:	add	r1, r0, #2
   2dc70:	cmp	r5, r1
   2dc74:	beq	2dd84 <flatcc_json_parser_generic_json@@Base+0x5b0>
   2dc78:	ldrb	r3, [r1]
   2dc7c:	sub	r3, r3, #48	; 0x30
   2dc80:	uxtb	r3, r3
   2dc84:	cmp	r3, #9
   2dc88:	bhi	2dd84 <flatcc_json_parser_generic_json@@Base+0x5b0>
   2dc8c:	add	r0, r1, #1
   2dc90:	cmp	r5, r0
   2dc94:	beq	2ddb0 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2dc98:	ldrb	r3, [r1, #1]
   2dc9c:	sub	r3, r3, #48	; 0x30
   2dca0:	uxtb	r3, r3
   2dca4:	cmp	r3, #9
   2dca8:	bhi	2e588 <flatcc_json_parser_generic_json@@Base+0xdb4>
   2dcac:	add	r2, r1, #2
   2dcb0:	mov	r1, r5
   2dcb4:	mov	r0, r2
   2dcb8:	cmp	r2, r1
   2dcbc:	beq	2ddb0 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2dcc0:	add	r2, r2, #1
   2dcc4:	ldrb	r3, [r0]
   2dcc8:	sub	r3, r3, #48	; 0x30
   2dccc:	uxtb	r3, r3
   2dcd0:	cmp	r3, #9
   2dcd4:	bls	2dcb4 <flatcc_json_parser_generic_json@@Base+0x4e0>
   2dcd8:	b	2e588 <flatcc_json_parser_generic_json@@Base+0xdb4>
   2dcdc:	mov	r3, #6
   2dce0:	mov	r2, r5
   2dce4:	mov	r1, r4
   2dce8:	mov	r0, r8
   2dcec:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2dcf0:	b	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2dcf4:	ldrb	r3, [r0, #1]
   2dcf8:	sub	r3, r3, #48	; 0x30
   2dcfc:	uxtb	r3, r3
   2dd00:	cmp	r3, #9
   2dd04:	bhi	2dd58 <flatcc_json_parser_generic_json@@Base+0x584>
   2dd08:	add	r2, r0, #2
   2dd0c:	cmp	r5, r2
   2dd10:	beq	2e5b8 <flatcc_json_parser_generic_json@@Base+0xde4>
   2dd14:	ldrb	r3, [r0, #2]
   2dd18:	sub	r3, r3, #48	; 0x30
   2dd1c:	uxtb	r3, r3
   2dd20:	cmp	r3, #9
   2dd24:	bhi	2e578 <flatcc_json_parser_generic_json@@Base+0xda4>
   2dd28:	add	r2, r0, #3
   2dd2c:	mov	r1, r5
   2dd30:	mov	r0, r2
   2dd34:	cmp	r2, r1
   2dd38:	beq	2e580 <flatcc_json_parser_generic_json@@Base+0xdac>
   2dd3c:	add	r2, r2, #1
   2dd40:	ldrb	r3, [r0]
   2dd44:	sub	r3, r3, #48	; 0x30
   2dd48:	uxtb	r3, r3
   2dd4c:	cmp	r3, #9
   2dd50:	bls	2dd30 <flatcc_json_parser_generic_json@@Base+0x55c>
   2dd54:	b	2dc40 <flatcc_json_parser_generic_json@@Base+0x46c>
   2dd58:	mov	r3, #6
   2dd5c:	mov	r2, r5
   2dd60:	add	r1, r0, #1
   2dd64:	mov	r0, r8
   2dd68:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2dd6c:	b	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2dd70:	mov	r3, #6
   2dd74:	mov	r2, r5
   2dd78:	mov	r0, r8
   2dd7c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2dd80:	b	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2dd84:	mov	r3, #6
   2dd88:	mov	r2, r5
   2dd8c:	mov	r0, r8
   2dd90:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2dd94:	b	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2dd98:	cmp	r3, #9
   2dd9c:	bcc	2ddb0 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2dda0:	cmp	r3, #11
   2dda4:	bls	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2dda8:	cmp	r3, #13
   2ddac:	beq	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2ddb0:	mov	r3, #6
   2ddb4:	mov	r2, r5
   2ddb8:	mov	r1, r0
   2ddbc:	mov	r0, r8
   2ddc0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2ddc4:	b	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2ddc8:	cmp	r3, #44	; 0x2c
   2ddcc:	bne	2ddb0 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2ddd0:	b	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2ddd4:	sub	r9, r5, r4
   2ddd8:	cmp	r9, #3
   2dddc:	ble	2ddfc <flatcc_json_parser_generic_json@@Base+0x628>
   2dde0:	mov	r2, #4
   2dde4:	ldr	r1, [pc, #2004]	; 2e5c0 <flatcc_json_parser_generic_json@@Base+0xdec>
   2dde8:	mov	r0, r4
   2ddec:	bl	14558 <memcmp@plt>
   2ddf0:	cmp	r0, #0
   2ddf4:	addeq	r0, r4, #4
   2ddf8:	beq	2de84 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2ddfc:	cmp	r9, #4
   2de00:	ble	2de20 <flatcc_json_parser_generic_json@@Base+0x64c>
   2de04:	mov	r2, #5
   2de08:	ldr	r1, [pc, #1972]	; 2e5c4 <flatcc_json_parser_generic_json@@Base+0xdf0>
   2de0c:	mov	r0, r4
   2de10:	bl	14558 <memcmp@plt>
   2de14:	cmp	r0, #0
   2de18:	addeq	r0, r4, #5
   2de1c:	beq	2de84 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2de20:	mov	r2, #0
   2de24:	mov	r3, #0
   2de28:	strd	r2, [sp, #16]
   2de2c:	mov	r3, #0
   2de30:	str	r3, [sp, #12]
   2de34:	cmp	r5, r4
   2de38:	moveq	r0, r4
   2de3c:	beq	2de84 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2de40:	add	r3, sp, #16
   2de44:	str	r3, [sp]
   2de48:	add	r3, sp, #12
   2de4c:	mov	r2, r5
   2de50:	mov	r1, r4
   2de54:	mov	r0, r8
   2de58:	bl	2d678 <flatcc_json_parser_integer@@Base>
   2de5c:	cmp	r0, r4
   2de60:	moveq	r0, r4
   2de64:	beq	2de84 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2de68:	ldr	r3, [sp, #12]
   2de6c:	cmp	r3, #0
   2de70:	bne	2dea4 <flatcc_json_parser_generic_json@@Base+0x6d0>
   2de74:	ldrd	r2, [sp, #16]
   2de78:	cmp	r3, #0
   2de7c:	cmpeq	r2, #255	; 0xff
   2de80:	bhi	2debc <flatcc_json_parser_generic_json@@Base+0x6e8>
   2de84:	cmp	r0, r4
   2de88:	bne	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2de8c:	mov	r3, #5
   2de90:	mov	r2, r5
   2de94:	mov	r1, r0
   2de98:	mov	r0, r8
   2de9c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2dea0:	b	2e060 <flatcc_json_parser_generic_json@@Base+0x88c>
   2dea4:	mov	r3, #8
   2dea8:	mov	r2, r5
   2deac:	mov	r1, r0
   2deb0:	mov	r0, r8
   2deb4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2deb8:	b	2de84 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2debc:	mov	r3, #7
   2dec0:	mov	r2, r5
   2dec4:	mov	r1, r0
   2dec8:	mov	r0, r8
   2decc:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2ded0:	b	2de84 <flatcc_json_parser_generic_json@@Base+0x6b0>
   2ded4:	sub	r3, r5, r4
   2ded8:	cmp	r3, #3
   2dedc:	ble	2defc <flatcc_json_parser_generic_json@@Base+0x728>
   2dee0:	mov	r2, #4
   2dee4:	ldr	r1, [pc, #1756]	; 2e5c8 <flatcc_json_parser_generic_json@@Base+0xdf4>
   2dee8:	mov	r0, r4
   2deec:	bl	14558 <memcmp@plt>
   2def0:	cmp	r0, #0
   2def4:	addeq	r0, r4, #4
   2def8:	beq	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2defc:	mov	r3, #5
   2df00:	mov	r2, r5
   2df04:	mov	r1, r4
   2df08:	mov	r0, r8
   2df0c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2df10:	b	2e060 <flatcc_json_parser_generic_json@@Base+0x88c>
   2df14:	add	r3, sp, #544	; 0x220
   2df18:	cmp	r6, r3
   2df1c:	beq	2df84 <flatcc_json_parser_generic_json@@Base+0x7b0>
   2df20:	add	r9, r6, #1
   2df24:	mov	r3, #93	; 0x5d
   2df28:	strb	r3, [r6]
   2df2c:	add	r1, r4, #1
   2df30:	sub	r3, r5, r1
   2df34:	cmp	r3, #1
   2df38:	ble	2df50 <flatcc_json_parser_generic_json@@Base+0x77c>
   2df3c:	ldrb	r3, [r4, #1]
   2df40:	cmp	r3, #32
   2df44:	movhi	r4, r1
   2df48:	bhi	2df60 <flatcc_json_parser_generic_json@@Base+0x78c>
   2df4c:	beq	2df9c <flatcc_json_parser_generic_json@@Base+0x7c8>
   2df50:	mov	r2, r5
   2df54:	mov	r0, r8
   2df58:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2df5c:	mov	r4, r0
   2df60:	cmp	r5, r4
   2df64:	beq	2e3c4 <flatcc_json_parser_generic_json@@Base+0xbf0>
   2df68:	ldrb	r3, [r4]
   2df6c:	cmp	r3, #93	; 0x5d
   2df70:	movne	r6, r9
   2df74:	bne	2d800 <flatcc_json_parser_generic_json@@Base+0x2c>
   2df78:	mov	r6, r9
   2df7c:	mov	r0, r4
   2df80:	b	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2df84:	mov	r3, #2
   2df88:	mov	r2, r5
   2df8c:	mov	r1, r4
   2df90:	mov	r0, r8
   2df94:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2df98:	b	2e060 <flatcc_json_parser_generic_json@@Base+0x88c>
   2df9c:	ldrb	r3, [r4, #2]
   2dfa0:	cmp	r3, #32
   2dfa4:	addhi	r4, r4, #2
   2dfa8:	bls	2df50 <flatcc_json_parser_generic_json@@Base+0x77c>
   2dfac:	b	2df60 <flatcc_json_parser_generic_json@@Base+0x78c>
   2dfb0:	add	r3, sp, #544	; 0x220
   2dfb4:	cmp	r6, r3
   2dfb8:	beq	2e020 <flatcc_json_parser_generic_json@@Base+0x84c>
   2dfbc:	add	r9, r6, #1
   2dfc0:	mov	r3, #125	; 0x7d
   2dfc4:	strb	r3, [r6]
   2dfc8:	add	r1, r4, #1
   2dfcc:	sub	r3, r5, r1
   2dfd0:	cmp	r3, #1
   2dfd4:	ble	2dfec <flatcc_json_parser_generic_json@@Base+0x818>
   2dfd8:	ldrb	r3, [r4, #1]
   2dfdc:	cmp	r3, #32
   2dfe0:	movhi	r4, r1
   2dfe4:	bhi	2dffc <flatcc_json_parser_generic_json@@Base+0x828>
   2dfe8:	beq	2e038 <flatcc_json_parser_generic_json@@Base+0x864>
   2dfec:	mov	r2, r5
   2dff0:	mov	r0, r8
   2dff4:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2dff8:	mov	r4, r0
   2dffc:	cmp	r5, r4
   2e000:	beq	2e3c4 <flatcc_json_parser_generic_json@@Base+0xbf0>
   2e004:	ldrb	r3, [r4]
   2e008:	cmp	r3, #125	; 0x7d
   2e00c:	movne	r6, r9
   2e010:	bne	2d800 <flatcc_json_parser_generic_json@@Base+0x2c>
   2e014:	mov	r6, r9
   2e018:	mov	r0, r4
   2e01c:	b	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2e020:	mov	r3, #2
   2e024:	mov	r2, r5
   2e028:	mov	r1, r4
   2e02c:	mov	r0, r8
   2e030:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2e034:	b	2e060 <flatcc_json_parser_generic_json@@Base+0x88c>
   2e038:	ldrb	r3, [r4, #2]
   2e03c:	cmp	r3, #32
   2e040:	addhi	r4, r4, #2
   2e044:	bls	2dfec <flatcc_json_parser_generic_json@@Base+0x818>
   2e048:	b	2dffc <flatcc_json_parser_generic_json@@Base+0x828>
   2e04c:	mov	r3, #5
   2e050:	mov	r2, r5
   2e054:	mov	r1, r4
   2e058:	mov	r0, r8
   2e05c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2e060:	add	sp, sp, #548	; 0x224
   2e064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e068:	sub	r3, r5, r0
   2e06c:	cmp	r3, #1
   2e070:	ble	2e084 <flatcc_json_parser_generic_json@@Base+0x8b0>
   2e074:	ldrb	r3, [r0]
   2e078:	cmp	r3, #32
   2e07c:	bhi	2e094 <flatcc_json_parser_generic_json@@Base+0x8c0>
   2e080:	beq	2e0c8 <flatcc_json_parser_generic_json@@Base+0x8f4>
   2e084:	mov	r2, r5
   2e088:	mov	r1, r0
   2e08c:	mov	r0, r8
   2e090:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2e094:	cmp	r5, r0
   2e098:	beq	2e220 <flatcc_json_parser_generic_json@@Base+0xa4c>
   2e09c:	ldrb	r3, [r0]
   2e0a0:	cmp	r3, #44	; 0x2c
   2e0a4:	beq	2e124 <flatcc_json_parser_generic_json@@Base+0x950>
   2e0a8:	cmp	r3, #93	; 0x5d
   2e0ac:	beq	2e0dc <flatcc_json_parser_generic_json@@Base+0x908>
   2e0b0:	mov	r3, fp
   2e0b4:	mov	r2, r5
   2e0b8:	mov	r1, r0
   2e0bc:	mov	r0, r8
   2e0c0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2e0c4:	b	2e220 <flatcc_json_parser_generic_json@@Base+0xa4c>
   2e0c8:	ldrb	r3, [r0, #1]
   2e0cc:	cmp	r3, #32
   2e0d0:	addhi	r0, r0, #1
   2e0d4:	bls	2e084 <flatcc_json_parser_generic_json@@Base+0x8b0>
   2e0d8:	b	2e094 <flatcc_json_parser_generic_json@@Base+0x8c0>
   2e0dc:	add	r1, r0, #1
   2e0e0:	sub	r3, r5, r1
   2e0e4:	cmp	r3, #1
   2e0e8:	ble	2e100 <flatcc_json_parser_generic_json@@Base+0x92c>
   2e0ec:	ldrb	r3, [r0, #1]
   2e0f0:	cmp	r3, #32
   2e0f4:	movhi	r0, r1
   2e0f8:	bhi	2e220 <flatcc_json_parser_generic_json@@Base+0xa4c>
   2e0fc:	beq	2e110 <flatcc_json_parser_generic_json@@Base+0x93c>
   2e100:	mov	r2, r5
   2e104:	mov	r0, r8
   2e108:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2e10c:	b	2e220 <flatcc_json_parser_generic_json@@Base+0xa4c>
   2e110:	ldrb	r3, [r0, #2]
   2e114:	cmp	r3, #32
   2e118:	addhi	r0, r0, #2
   2e11c:	bls	2e100 <flatcc_json_parser_generic_json@@Base+0x92c>
   2e120:	b	2e220 <flatcc_json_parser_generic_json@@Base+0xa4c>
   2e124:	add	r1, r0, #1
   2e128:	sub	r3, r5, r1
   2e12c:	cmp	r3, #1
   2e130:	ble	2e144 <flatcc_json_parser_generic_json@@Base+0x970>
   2e134:	ldrb	r3, [r0, #1]
   2e138:	cmp	r3, #32
   2e13c:	bhi	2e154 <flatcc_json_parser_generic_json@@Base+0x980>
   2e140:	beq	2e170 <flatcc_json_parser_generic_json@@Base+0x99c>
   2e144:	mov	r2, r5
   2e148:	mov	r0, r8
   2e14c:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2e150:	mov	r1, r0
   2e154:	cmp	r5, r1
   2e158:	beq	2e184 <flatcc_json_parser_generic_json@@Base+0x9b0>
   2e15c:	ldrb	r3, [r1]
   2e160:	cmp	r3, #93	; 0x5d
   2e164:	beq	2e198 <flatcc_json_parser_generic_json@@Base+0x9c4>
   2e168:	mov	r4, r1
   2e16c:	b	2d800 <flatcc_json_parser_generic_json@@Base+0x2c>
   2e170:	ldrb	r3, [r0, #2]
   2e174:	cmp	r3, #32
   2e178:	addhi	r1, r0, #2
   2e17c:	bls	2e144 <flatcc_json_parser_generic_json@@Base+0x970>
   2e180:	b	2e154 <flatcc_json_parser_generic_json@@Base+0x980>
   2e184:	mov	r3, fp
   2e188:	mov	r2, r5
   2e18c:	mov	r0, r8
   2e190:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2e194:	b	2e220 <flatcc_json_parser_generic_json@@Base+0xa4c>
   2e198:	add	r0, r1, #1
   2e19c:	sub	r3, r5, r0
   2e1a0:	cmp	r3, #1
   2e1a4:	ble	2e1b8 <flatcc_json_parser_generic_json@@Base+0x9e4>
   2e1a8:	ldrb	r3, [r1, #1]
   2e1ac:	cmp	r3, #32
   2e1b0:	bhi	2e220 <flatcc_json_parser_generic_json@@Base+0xa4c>
   2e1b4:	beq	2e1cc <flatcc_json_parser_generic_json@@Base+0x9f8>
   2e1b8:	mov	r2, r5
   2e1bc:	mov	r1, r0
   2e1c0:	mov	r0, r8
   2e1c4:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2e1c8:	b	2e220 <flatcc_json_parser_generic_json@@Base+0xa4c>
   2e1cc:	ldrb	r3, [r1, #2]
   2e1d0:	cmp	r3, #32
   2e1d4:	addhi	r0, r1, #2
   2e1d8:	bls	2e1b8 <flatcc_json_parser_generic_json@@Base+0x9e4>
   2e1dc:	b	2e220 <flatcc_json_parser_generic_json@@Base+0xa4c>
   2e1e0:	mov	r2, r5
   2e1e4:	mov	r1, r0
   2e1e8:	mov	r0, r8
   2e1ec:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2e1f0:	cmp	r5, r0
   2e1f4:	beq	2e220 <flatcc_json_parser_generic_json@@Base+0xa4c>
   2e1f8:	ldrb	r3, [r0]
   2e1fc:	cmp	r3, #44	; 0x2c
   2e200:	beq	2e2c0 <flatcc_json_parser_generic_json@@Base+0xaec>
   2e204:	cmp	r3, #125	; 0x7d
   2e208:	beq	2e278 <flatcc_json_parser_generic_json@@Base+0xaa4>
   2e20c:	mov	r3, sl
   2e210:	mov	r2, r5
   2e214:	mov	r1, r0
   2e218:	mov	r0, r8
   2e21c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2e220:	mov	r6, r9
   2e224:	subs	r3, r6, r7
   2e228:	movne	r3, #1
   2e22c:	cmp	r0, r5
   2e230:	cmpne	r6, r7
   2e234:	beq	2e384 <flatcc_json_parser_generic_json@@Base+0xbb0>
   2e238:	sub	r9, r6, #1
   2e23c:	ldrb	r3, [r6, #-1]
   2e240:	cmp	r3, #93	; 0x5d
   2e244:	beq	2e068 <flatcc_json_parser_generic_json@@Base+0x894>
   2e248:	sub	r3, r5, r0
   2e24c:	cmp	r3, #1
   2e250:	ble	2e1e0 <flatcc_json_parser_generic_json@@Base+0xa0c>
   2e254:	ldrb	r3, [r0]
   2e258:	cmp	r3, #32
   2e25c:	bhi	2e1f0 <flatcc_json_parser_generic_json@@Base+0xa1c>
   2e260:	bne	2e1e0 <flatcc_json_parser_generic_json@@Base+0xa0c>
   2e264:	ldrb	r3, [r0, #1]
   2e268:	cmp	r3, #32
   2e26c:	addhi	r0, r0, #1
   2e270:	bls	2e1e0 <flatcc_json_parser_generic_json@@Base+0xa0c>
   2e274:	b	2e1f0 <flatcc_json_parser_generic_json@@Base+0xa1c>
   2e278:	add	r1, r0, #1
   2e27c:	sub	r3, r5, r1
   2e280:	cmp	r3, #1
   2e284:	ble	2e29c <flatcc_json_parser_generic_json@@Base+0xac8>
   2e288:	ldrb	r3, [r0, #1]
   2e28c:	cmp	r3, #32
   2e290:	movhi	r0, r1
   2e294:	bhi	2e220 <flatcc_json_parser_generic_json@@Base+0xa4c>
   2e298:	beq	2e2ac <flatcc_json_parser_generic_json@@Base+0xad8>
   2e29c:	mov	r2, r5
   2e2a0:	mov	r0, r8
   2e2a4:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2e2a8:	b	2e220 <flatcc_json_parser_generic_json@@Base+0xa4c>
   2e2ac:	ldrb	r3, [r0, #2]
   2e2b0:	cmp	r3, #32
   2e2b4:	addhi	r0, r0, #2
   2e2b8:	bls	2e29c <flatcc_json_parser_generic_json@@Base+0xac8>
   2e2bc:	b	2e220 <flatcc_json_parser_generic_json@@Base+0xa4c>
   2e2c0:	add	r1, r0, #1
   2e2c4:	sub	r3, r5, r1
   2e2c8:	cmp	r3, #1
   2e2cc:	ble	2e2e0 <flatcc_json_parser_generic_json@@Base+0xb0c>
   2e2d0:	ldrb	r3, [r0, #1]
   2e2d4:	cmp	r3, #32
   2e2d8:	bhi	2e2f0 <flatcc_json_parser_generic_json@@Base+0xb1c>
   2e2dc:	beq	2e30c <flatcc_json_parser_generic_json@@Base+0xb38>
   2e2e0:	mov	r2, r5
   2e2e4:	mov	r0, r8
   2e2e8:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2e2ec:	mov	r1, r0
   2e2f0:	cmp	r5, r1
   2e2f4:	beq	2e320 <flatcc_json_parser_generic_json@@Base+0xb4c>
   2e2f8:	ldrb	r3, [r1]
   2e2fc:	cmp	r3, #125	; 0x7d
   2e300:	beq	2e334 <flatcc_json_parser_generic_json@@Base+0xb60>
   2e304:	mov	r4, r1
   2e308:	b	2d800 <flatcc_json_parser_generic_json@@Base+0x2c>
   2e30c:	ldrb	r3, [r0, #2]
   2e310:	cmp	r3, #32
   2e314:	addhi	r1, r0, #2
   2e318:	bls	2e2e0 <flatcc_json_parser_generic_json@@Base+0xb0c>
   2e31c:	b	2e2f0 <flatcc_json_parser_generic_json@@Base+0xb1c>
   2e320:	mov	r3, sl
   2e324:	mov	r2, r5
   2e328:	mov	r0, r8
   2e32c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2e330:	b	2e220 <flatcc_json_parser_generic_json@@Base+0xa4c>
   2e334:	add	r0, r1, #1
   2e338:	sub	r3, r5, r0
   2e33c:	cmp	r3, #1
   2e340:	ble	2e354 <flatcc_json_parser_generic_json@@Base+0xb80>
   2e344:	ldrb	r3, [r1, #1]
   2e348:	cmp	r3, #32
   2e34c:	bhi	2e220 <flatcc_json_parser_generic_json@@Base+0xa4c>
   2e350:	beq	2e368 <flatcc_json_parser_generic_json@@Base+0xb94>
   2e354:	mov	r2, r5
   2e358:	mov	r1, r0
   2e35c:	mov	r0, r8
   2e360:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2e364:	b	2e220 <flatcc_json_parser_generic_json@@Base+0xa4c>
   2e368:	ldrb	r3, [r1, #2]
   2e36c:	cmp	r3, #32
   2e370:	addhi	r0, r1, #2
   2e374:	bls	2e354 <flatcc_json_parser_generic_json@@Base+0xb80>
   2e378:	b	2e220 <flatcc_json_parser_generic_json@@Base+0xa4c>
   2e37c:	mov	r0, r4
   2e380:	b	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2e384:	cmp	r0, r5
   2e388:	movne	r3, #0
   2e38c:	andeq	r3, r3, #1
   2e390:	cmp	r3, #0
   2e394:	beq	2e060 <flatcc_json_parser_generic_json@@Base+0x88c>
   2e398:	ldrb	r3, [r6, #-1]
   2e39c:	cmp	r3, #93	; 0x5d
   2e3a0:	moveq	r3, #9
   2e3a4:	movne	r3, #10
   2e3a8:	mov	r2, r5
   2e3ac:	mov	r1, r0
   2e3b0:	mov	r0, r8
   2e3b4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2e3b8:	b	2e060 <flatcc_json_parser_generic_json@@Base+0x88c>
   2e3bc:	mov	r0, r2
   2e3c0:	b	2e060 <flatcc_json_parser_generic_json@@Base+0x88c>
   2e3c4:	mov	r0, r5
   2e3c8:	b	2e060 <flatcc_json_parser_generic_json@@Base+0x88c>
   2e3cc:	mov	r1, r5
   2e3d0:	b	2da1c <flatcc_json_parser_generic_json@@Base+0x248>
   2e3d4:	ldrb	r2, [r4]
   2e3d8:	sub	r3, r2, #34	; 0x22
   2e3dc:	cmp	r3, #89	; 0x59
   2e3e0:	ldrls	pc, [pc, r3, lsl #2]
   2e3e4:	b	2e04c <flatcc_json_parser_generic_json@@Base+0x878>
   2e3e8:	strdeq	sp, [r2], -ip
   2e3ec:	andeq	lr, r2, ip, asr #32
   2e3f0:	andeq	lr, r2, ip, asr #32
   2e3f4:	andeq	lr, r2, ip, asr #32
   2e3f8:	andeq	lr, r2, ip, asr #32
   2e3fc:	andeq	lr, r2, ip, asr #32
   2e400:	andeq	lr, r2, ip, asr #32
   2e404:	andeq	lr, r2, ip, asr #32
   2e408:	andeq	lr, r2, ip, asr #32
   2e40c:	andeq	lr, r2, ip, asr #32
   2e410:	andeq	lr, r2, ip, asr #32
   2e414:	andeq	sp, r2, r8, lsl #23
   2e418:	andeq	lr, r2, ip, asr #32
   2e41c:	andeq	lr, r2, ip, asr #32
   2e420:	andeq	sp, r2, r8, lsl #23
   2e424:	andeq	sp, r2, r8, lsl #23
   2e428:	andeq	sp, r2, r8, lsl #23
   2e42c:	andeq	sp, r2, r8, lsl #23
   2e430:	andeq	sp, r2, r8, lsl #23
   2e434:	andeq	sp, r2, r8, lsl #23
   2e438:	andeq	sp, r2, r8, lsl #23
   2e43c:	andeq	sp, r2, r8, lsl #23
   2e440:	andeq	sp, r2, r8, lsl #23
   2e444:	andeq	sp, r2, r8, lsl #23
   2e448:	andeq	lr, r2, ip, asr #32
   2e44c:	andeq	lr, r2, ip, asr #32
   2e450:	andeq	lr, r2, ip, asr #32
   2e454:	andeq	lr, r2, ip, asr #32
   2e458:	andeq	lr, r2, ip, asr #32
   2e45c:	andeq	lr, r2, ip, asr #32
   2e460:	andeq	lr, r2, ip, asr #32
   2e464:	andeq	lr, r2, ip, asr #32
   2e468:	andeq	lr, r2, ip, asr #32
   2e46c:	andeq	lr, r2, ip, asr #32
   2e470:	andeq	lr, r2, ip, asr #32
   2e474:	andeq	lr, r2, ip, asr #32
   2e478:	andeq	lr, r2, ip, asr #32
   2e47c:	andeq	lr, r2, ip, asr #32
   2e480:	andeq	lr, r2, ip, asr #32
   2e484:	andeq	lr, r2, ip, asr #32
   2e488:	andeq	lr, r2, ip, asr #32
   2e48c:	andeq	lr, r2, ip, asr #32
   2e490:	andeq	lr, r2, ip, asr #32
   2e494:	andeq	lr, r2, ip, asr #32
   2e498:	andeq	lr, r2, ip, asr #32
   2e49c:	andeq	lr, r2, ip, asr #32
   2e4a0:	andeq	lr, r2, ip, asr #32
   2e4a4:	andeq	lr, r2, ip, asr #32
   2e4a8:	andeq	lr, r2, ip, asr #32
   2e4ac:	andeq	lr, r2, ip, asr #32
   2e4b0:	andeq	lr, r2, ip, asr #32
   2e4b4:	andeq	lr, r2, ip, asr #32
   2e4b8:	andeq	lr, r2, ip, asr #32
   2e4bc:	andeq	lr, r2, ip, asr #32
   2e4c0:	andeq	lr, r2, ip, asr #32
   2e4c4:	andeq	lr, r2, ip, asr #32
   2e4c8:	andeq	lr, r2, ip, asr #32
   2e4cc:	andeq	sp, r2, r0, lsr #30
   2e4d0:	andeq	lr, r2, ip, asr #32
   2e4d4:	andeq	lr, r2, ip, asr #32
   2e4d8:	andeq	lr, r2, ip, asr #32
   2e4dc:	andeq	lr, r2, ip, asr #32
   2e4e0:	andeq	lr, r2, ip, asr #32
   2e4e4:	andeq	lr, r2, ip, asr #32
   2e4e8:	andeq	lr, r2, ip, asr #32
   2e4ec:	andeq	lr, r2, ip, asr #32
   2e4f0:	andeq	lr, r2, ip, asr #32
   2e4f4:	andeq	lr, r2, ip, asr #32
   2e4f8:	ldrdeq	sp, [r2], -r4
   2e4fc:	andeq	lr, r2, ip, asr #32
   2e500:	andeq	lr, r2, ip, asr #32
   2e504:	andeq	lr, r2, ip, asr #32
   2e508:	andeq	lr, r2, ip, asr #32
   2e50c:	andeq	lr, r2, ip, asr #32
   2e510:	andeq	lr, r2, ip, asr #32
   2e514:	andeq	lr, r2, ip, asr #32
   2e518:	ldrdeq	sp, [r2], -r4
   2e51c:	andeq	lr, r2, ip, asr #32
   2e520:	andeq	lr, r2, ip, asr #32
   2e524:	andeq	lr, r2, ip, asr #32
   2e528:	andeq	lr, r2, ip, asr #32
   2e52c:	andeq	lr, r2, ip, asr #32
   2e530:	ldrdeq	sp, [r2], -r4
   2e534:	andeq	lr, r2, ip, asr #32
   2e538:	andeq	lr, r2, ip, asr #32
   2e53c:	andeq	lr, r2, ip, asr #32
   2e540:	andeq	lr, r2, ip, asr #32
   2e544:	andeq	lr, r2, ip, asr #32
   2e548:	andeq	lr, r2, ip, asr #32
   2e54c:			; <UNDEFINED> instruction: 0x0002dfb0
   2e550:	mov	r0, r5
   2e554:	mov	r3, #20
   2e558:	mov	r2, r5
   2e55c:	mov	r1, r0
   2e560:	mov	r0, r8
   2e564:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2e568:	b	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2e56c:	cmp	r5, r4
   2e570:	bne	2dc40 <flatcc_json_parser_generic_json@@Base+0x46c>
   2e574:	b	2ddb0 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2e578:	mov	r0, r2
   2e57c:	b	2dc40 <flatcc_json_parser_generic_json@@Base+0x46c>
   2e580:	cmp	r5, r2
   2e584:	beq	2ddb0 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2e588:	ldrb	r3, [r0]
   2e58c:	cmp	r3, #32
   2e590:	beq	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2e594:	bls	2dd98 <flatcc_json_parser_generic_json@@Base+0x5c4>
   2e598:	cmp	r3, #58	; 0x3a
   2e59c:	beq	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2e5a0:	bls	2ddc8 <flatcc_json_parser_generic_json@@Base+0x5f4>
   2e5a4:	cmp	r3, #93	; 0x5d
   2e5a8:	beq	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2e5ac:	cmp	r3, #125	; 0x7d
   2e5b0:	bne	2ddb0 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2e5b4:	b	2e224 <flatcc_json_parser_generic_json@@Base+0xa50>
   2e5b8:	mov	r0, r2
   2e5bc:	b	2ddb0 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2e5c0:	andeq	sp, r3, r0, lsr r5
   2e5c4:	andeq	sp, r3, r8, lsr r5
   2e5c8:	andeq	sp, r3, r0, asr #10

0002e5cc <flatcc_json_parser_unmatched_symbol@@Base>:
   2e5cc:	push	{r4, r5, r6, lr}
   2e5d0:	mov	r5, r0
   2e5d4:	mov	r4, r2
   2e5d8:	ldr	r3, [r0, #8]
   2e5dc:	tst	r3, #1
   2e5e0:	beq	2e72c <flatcc_json_parser_unmatched_symbol@@Base+0x160>
   2e5e4:	cmp	r1, r2
   2e5e8:	beq	2e6b0 <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
   2e5ec:	ldrb	r3, [r1]
   2e5f0:	cmp	r3, #34	; 0x22
   2e5f4:	bne	2e618 <flatcc_json_parser_unmatched_symbol@@Base+0x4c>
   2e5f8:	add	r1, r1, #1
   2e5fc:	b	2e65c <flatcc_json_parser_unmatched_symbol@@Base+0x90>
   2e600:	add	r1, r3, #1
   2e604:	cmp	r4, r1
   2e608:	beq	2e6b8 <flatcc_json_parser_unmatched_symbol@@Base+0xec>
   2e60c:	ldrb	r3, [r3, #1]
   2e610:	cmp	r3, #34	; 0x22
   2e614:	beq	2e63c <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   2e618:	cmp	r3, #92	; 0x5c
   2e61c:	movne	r3, r1
   2e620:	bne	2e600 <flatcc_json_parser_unmatched_symbol@@Base+0x34>
   2e624:	sub	r3, r4, r1
   2e628:	cmp	r3, #1
   2e62c:	addgt	r3, r1, #1
   2e630:	bgt	2e600 <flatcc_json_parser_unmatched_symbol@@Base+0x34>
   2e634:	cmp	r4, r1
   2e638:	beq	2e648 <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   2e63c:	ldrb	r3, [r1]
   2e640:	cmp	r3, #34	; 0x22
   2e644:	beq	2e5f8 <flatcc_json_parser_unmatched_symbol@@Base+0x2c>
   2e648:	mov	r3, #20
   2e64c:	mov	r2, r4
   2e650:	mov	r0, r5
   2e654:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2e658:	mov	r1, r0
   2e65c:	sub	r3, r4, r1
   2e660:	cmp	r3, #1
   2e664:	ble	2e678 <flatcc_json_parser_unmatched_symbol@@Base+0xac>
   2e668:	ldrb	r3, [r1]
   2e66c:	cmp	r3, #32
   2e670:	bhi	2e688 <flatcc_json_parser_unmatched_symbol@@Base+0xbc>
   2e674:	beq	2e6c0 <flatcc_json_parser_unmatched_symbol@@Base+0xf4>
   2e678:	mov	r2, r4
   2e67c:	mov	r0, r5
   2e680:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2e684:	mov	r1, r0
   2e688:	cmp	r4, r1
   2e68c:	beq	2e69c <flatcc_json_parser_unmatched_symbol@@Base+0xd0>
   2e690:	ldrb	r3, [r1]
   2e694:	cmp	r3, #58	; 0x3a
   2e698:	beq	2e6d4 <flatcc_json_parser_unmatched_symbol@@Base+0x108>
   2e69c:	mov	r3, #4
   2e6a0:	mov	r2, r4
   2e6a4:	mov	r0, r5
   2e6a8:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2e6ac:	pop	{r4, r5, r6, pc}
   2e6b0:	mov	r1, r2
   2e6b4:	b	2e648 <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   2e6b8:	mov	r1, r4
   2e6bc:	b	2e648 <flatcc_json_parser_unmatched_symbol@@Base+0x7c>
   2e6c0:	ldrb	r3, [r1, #1]
   2e6c4:	cmp	r3, #32
   2e6c8:	addhi	r1, r1, #1
   2e6cc:	bls	2e678 <flatcc_json_parser_unmatched_symbol@@Base+0xac>
   2e6d0:	b	2e688 <flatcc_json_parser_unmatched_symbol@@Base+0xbc>
   2e6d4:	add	r0, r1, #1
   2e6d8:	sub	r3, r4, r0
   2e6dc:	cmp	r3, #1
   2e6e0:	ble	2e6f4 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   2e6e4:	ldrb	r3, [r1, #1]
   2e6e8:	cmp	r3, #32
   2e6ec:	bhi	2e704 <flatcc_json_parser_unmatched_symbol@@Base+0x138>
   2e6f0:	beq	2e718 <flatcc_json_parser_unmatched_symbol@@Base+0x14c>
   2e6f4:	mov	r2, r4
   2e6f8:	mov	r1, r0
   2e6fc:	mov	r0, r5
   2e700:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2e704:	mov	r2, r4
   2e708:	mov	r1, r0
   2e70c:	mov	r0, r5
   2e710:	bl	2d7d4 <flatcc_json_parser_generic_json@@Base>
   2e714:	pop	{r4, r5, r6, pc}
   2e718:	ldrb	r3, [r1, #2]
   2e71c:	cmp	r3, #32
   2e720:	addhi	r0, r1, #2
   2e724:	bls	2e6f4 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   2e728:	b	2e704 <flatcc_json_parser_unmatched_symbol@@Base+0x138>
   2e72c:	mov	r3, #13
   2e730:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2e734:	pop	{r4, r5, r6, pc}

0002e738 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   2e738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e73c:	sub	sp, sp, #28
   2e740:	mov	r7, r0
   2e744:	mov	r6, r2
   2e748:	mov	r8, r3
   2e74c:	cmp	r1, r2
   2e750:	beq	2e764 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c>
   2e754:	ldrb	r3, [r1]
   2e758:	cmp	r3, #34	; 0x22
   2e75c:	addeq	r4, r1, #1
   2e760:	beq	2e778 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   2e764:	mov	r3, #16
   2e768:	mov	r2, r6
   2e76c:	mov	r0, r7
   2e770:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2e774:	mov	r4, r0
   2e778:	mov	r2, r6
   2e77c:	mov	r1, r4
   2e780:	mov	r0, r7
   2e784:	bl	2c5a4 <flatcc_json_parser_string_part@@Base>
   2e788:	mov	r5, r0
   2e78c:	cmp	r6, r0
   2e790:	beq	2e7a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   2e794:	ldrb	r3, [r0]
   2e798:	cmp	r3, #34	; 0x22
   2e79c:	beq	2e7d0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x98>
   2e7a0:	mov	r3, #0
   2e7a4:	str	r3, [r8]
   2e7a8:	ldr	r3, [sp, #64]	; 0x40
   2e7ac:	cmp	r3, #0
   2e7b0:	movne	r3, #32
   2e7b4:	moveq	r3, #31
   2e7b8:	mov	r2, r6
   2e7bc:	mov	r1, r5
   2e7c0:	mov	r0, r7
   2e7c4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2e7c8:	add	sp, sp, #28
   2e7cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e7d0:	sub	sl, r0, r4
   2e7d4:	lsr	r9, sl, #2
   2e7d8:	add	r9, r9, r9, lsl #1
   2e7dc:	and	r3, sl, #3
   2e7e0:	cmp	r3, #2
   2e7e4:	addeq	r9, r9, #1
   2e7e8:	beq	2e7f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xbc>
   2e7ec:	cmp	r3, #3
   2e7f0:	addeq	r9, r9, #2
   2e7f4:	mvn	r3, #0
   2e7f8:	mov	r2, #1
   2e7fc:	mov	r1, r2
   2e800:	ldr	r0, [r7]
   2e804:	bl	27174 <flatcc_builder_start_vector@@Base>
   2e808:	cmp	r0, #0
   2e80c:	bne	2eae4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3ac>
   2e810:	mov	r1, r9
   2e814:	ldr	r0, [r7]
   2e818:	bl	2696c <flatcc_builder_extend_vector@@Base>
   2e81c:	cmp	r0, #0
   2e820:	beq	2eae4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3ac>
   2e824:	ldr	r3, [sp, #64]	; 0x40
   2e828:	adds	r3, r3, #0
   2e82c:	movne	r3, #1
   2e830:	cmp	r3, #0
   2e834:	beq	2e878 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x140>
   2e838:	cmp	r3, #1
   2e83c:	bne	2e9e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a8>
   2e840:	ldr	lr, [pc, #700]	; 2eb04 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3cc>
   2e844:	cmp	r9, #0
   2e848:	movne	r3, r9
   2e84c:	mvneq	r3, #0
   2e850:	str	r3, [sp, #12]
   2e854:	str	r0, [sp, #8]
   2e858:	str	sl, [sp, #4]
   2e85c:	mov	r1, r4
   2e860:	ldr	r3, [sp, #4]
   2e864:	cmp	r3, #0
   2e868:	beq	2e880 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x148>
   2e86c:	mov	ip, r3
   2e870:	mov	r2, #0
   2e874:	b	2e8c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x188>
   2e878:	ldr	lr, [pc, #648]	; 2eb08 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3d0>
   2e87c:	b	2e844 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x10c>
   2e880:	ldr	r2, [sp, #4]
   2e884:	cmp	r2, #2
   2e888:	beq	2e9ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b4>
   2e88c:	cmp	r2, #3
   2e890:	beq	2ea94 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x35c>
   2e894:	cmp	r2, #0
   2e898:	bne	2e90c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d4>
   2e89c:	b	2ea34 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   2e8a0:	add	r1, r1, #1
   2e8a4:	sub	ip, ip, #1
   2e8a8:	sub	r2, r2, #1
   2e8ac:	add	r2, r2, #1
   2e8b0:	cmp	r2, #3
   2e8b4:	bhi	2e970 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x238>
   2e8b8:	cmp	r2, ip
   2e8bc:	beq	2e884 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   2e8c0:	ldrb	r3, [r1, r2]
   2e8c4:	ldrb	r3, [lr, r3]
   2e8c8:	add	fp, sp, #24
   2e8cc:	add	fp, fp, r2
   2e8d0:	strb	r3, [fp, #-4]
   2e8d4:	cmp	r3, #63	; 0x3f
   2e8d8:	bls	2e8ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x174>
   2e8dc:	cmp	r3, #65	; 0x41
   2e8e0:	beq	2e8a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x168>
   2e8e4:	cmp	r3, #66	; 0x42
   2e8e8:	movne	r3, r2
   2e8ec:	beq	2e918 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e0>
   2e8f0:	sub	r3, ip, r3
   2e8f4:	cmp	r2, #2
   2e8f8:	beq	2e9f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b8>
   2e8fc:	cmp	r2, #3
   2e900:	beq	2ea98 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
   2e904:	cmp	r2, #0
   2e908:	beq	2ea24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ec>
   2e90c:	ldr	r3, [sp, #4]
   2e910:	sub	r5, sl, r3
   2e914:	b	2e9e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ac>
   2e918:	add	r3, r2, #1
   2e91c:	cmp	r3, #7
   2e920:	cmpls	r3, ip
   2e924:	bcs	2e8f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2e928:	add	fp, r1, r3
   2e92c:	ldrb	r1, [r1, r3]
   2e930:	ldrb	r1, [lr, r1]
   2e934:	sub	r1, r1, #65	; 0x41
   2e938:	uxtb	r1, r1
   2e93c:	cmp	r1, #1
   2e940:	bhi	2e8f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2e944:	add	r3, r3, #1
   2e948:	cmp	r3, #7
   2e94c:	cmpls	r3, ip
   2e950:	bcs	2e8f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2e954:	ldrb	r1, [fp, #1]!
   2e958:	ldrb	r1, [lr, r1]
   2e95c:	sub	r1, r1, #65	; 0x41
   2e960:	uxtb	r1, r1
   2e964:	cmp	r1, #1
   2e968:	bls	2e944 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x20c>
   2e96c:	b	2e8f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   2e970:	ldr	r3, [sp, #12]
   2e974:	cmp	r3, #2
   2e978:	bls	2ea00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c8>
   2e97c:	ldrb	fp, [sp, #21]
   2e980:	ldrb	r2, [sp, #20]
   2e984:	lsr	r3, fp, #4
   2e988:	orr	r3, r3, r2, lsl #2
   2e98c:	ldr	r2, [sp, #8]
   2e990:	strb	r3, [r2]
   2e994:	ldrb	r2, [sp, #22]
   2e998:	lsr	r3, r2, #2
   2e99c:	orr	r3, r3, fp, lsl #4
   2e9a0:	ldr	fp, [sp, #8]
   2e9a4:	strb	r3, [fp, #1]
   2e9a8:	ldrb	r3, [sp, #23]
   2e9ac:	orr	r3, r3, r2, lsl #6
   2e9b0:	strb	r3, [fp, #2]
   2e9b4:	add	r2, fp, #3
   2e9b8:	str	r2, [sp, #8]
   2e9bc:	add	r1, r1, #4
   2e9c0:	sub	r2, ip, #4
   2e9c4:	str	r2, [sp, #4]
   2e9c8:	ldr	r3, [sp, #12]
   2e9cc:	subs	r3, r3, #3
   2e9d0:	str	r3, [sp, #12]
   2e9d4:	bne	2e860 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x128>
   2e9d8:	ldr	r3, [sp, #4]
   2e9dc:	b	2ea24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ec>
   2e9e0:	mov	r5, #0
   2e9e4:	add	r5, r4, r5
   2e9e8:	b	2e7a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   2e9ec:	mov	r3, #0
   2e9f0:	ldrb	r2, [sp, #21]
   2e9f4:	lsl	r1, r2, #4
   2e9f8:	tst	r1, #255	; 0xff
   2e9fc:	beq	2ea0c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d4>
   2ea00:	ldr	r3, [sp, #4]
   2ea04:	sub	r5, sl, r3
   2ea08:	b	2e9e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ac>
   2ea0c:	ldrb	r1, [sp, #20]
   2ea10:	lsr	r2, r2, #4
   2ea14:	orr	r2, r2, r1, lsl #2
   2ea18:	ldr	r1, [sp, #8]
   2ea1c:	strb	r2, [r1], #1
   2ea20:	str	r1, [sp, #8]
   2ea24:	sub	r3, sl, r3
   2ea28:	cmp	sl, r3
   2ea2c:	addne	r5, r4, r3
   2ea30:	bne	2e7a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x68>
   2ea34:	ldr	r3, [sp, #8]
   2ea38:	sub	r1, r3, r0
   2ea3c:	cmp	r9, r1
   2ea40:	bls	2ea58 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x320>
   2ea44:	sub	r1, r9, r1
   2ea48:	ldr	r0, [r7]
   2ea4c:	bl	26fb8 <flatcc_builder_truncate_vector@@Base>
   2ea50:	cmp	r0, #0
   2ea54:	bne	2eae4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3ac>
   2ea58:	ldr	r0, [r7]
   2ea5c:	bl	28184 <flatcc_builder_end_vector@@Base>
   2ea60:	str	r0, [r8]
   2ea64:	cmp	r0, #0
   2ea68:	beq	2eae4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3ac>
   2ea6c:	ldrb	r3, [r5]
   2ea70:	cmp	r3, #34	; 0x22
   2ea74:	addeq	r0, r5, #1
   2ea78:	beq	2e7c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   2ea7c:	mov	r3, #20
   2ea80:	mov	r2, r6
   2ea84:	mov	r1, r5
   2ea88:	mov	r0, r7
   2ea8c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2ea90:	b	2e7c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   2ea94:	mov	r3, #0
   2ea98:	ldrb	r2, [sp, #22]
   2ea9c:	lsl	r1, r2, #6
   2eaa0:	tst	r1, #255	; 0xff
   2eaa4:	bne	2ea00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c8>
   2eaa8:	ldr	r1, [sp, #12]
   2eaac:	cmp	r1, #1
   2eab0:	bls	2ea00 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2c8>
   2eab4:	ldrb	ip, [sp, #21]
   2eab8:	ldrb	lr, [sp, #20]
   2eabc:	lsr	r1, ip, #4
   2eac0:	orr	r1, r1, lr, lsl #2
   2eac4:	ldr	lr, [sp, #8]
   2eac8:	strb	r1, [lr]
   2eacc:	lsr	r2, r2, #2
   2ead0:	orr	r2, r2, ip, lsl #4
   2ead4:	strb	r2, [lr, #1]
   2ead8:	add	r2, lr, #2
   2eadc:	str	r2, [sp, #8]
   2eae0:	b	2ea24 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ec>
   2eae4:	mov	r3, #0
   2eae8:	str	r3, [r8]
   2eaec:	mov	r3, #33	; 0x21
   2eaf0:	mov	r2, r6
   2eaf4:	mov	r1, r5
   2eaf8:	mov	r0, r7
   2eafc:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2eb00:	b	2e7c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x90>
   2eb04:	ldrdeq	r1, [r4], -r8
   2eb08:	ldrdeq	r1, [r4], -r8

0002eb0c <flatcc_json_parser_build_string@@Base>:
   2eb0c:	push	{r4, r5, r6, r7, r8, lr}
   2eb10:	sub	sp, sp, #8
   2eb14:	mov	r5, r0
   2eb18:	mov	r6, r2
   2eb1c:	mov	r8, r3
   2eb20:	cmp	r1, r2
   2eb24:	beq	2eb38 <flatcc_json_parser_build_string@@Base+0x2c>
   2eb28:	ldrb	r3, [r1]
   2eb2c:	cmp	r3, #34	; 0x22
   2eb30:	addeq	r7, r1, #1
   2eb34:	beq	2eb4c <flatcc_json_parser_build_string@@Base+0x40>
   2eb38:	mov	r3, #16
   2eb3c:	mov	r2, r6
   2eb40:	mov	r0, r5
   2eb44:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2eb48:	mov	r7, r0
   2eb4c:	mov	r2, r6
   2eb50:	mov	r1, r7
   2eb54:	mov	r0, r5
   2eb58:	bl	2c5a4 <flatcc_json_parser_string_part@@Base>
   2eb5c:	mov	r4, r0
   2eb60:	cmp	r6, r0
   2eb64:	beq	2eb74 <flatcc_json_parser_build_string@@Base+0x68>
   2eb68:	ldrb	r3, [r0]
   2eb6c:	cmp	r3, #34	; 0x22
   2eb70:	beq	2eb98 <flatcc_json_parser_build_string@@Base+0x8c>
   2eb74:	ldr	r0, [r5]
   2eb78:	bl	27278 <flatcc_builder_start_string@@Base>
   2eb7c:	cmp	r0, #0
   2eb80:	beq	2ebc0 <flatcc_json_parser_build_string@@Base+0xb4>
   2eb84:	mov	r3, #0
   2eb88:	str	r3, [r8]
   2eb8c:	mov	r0, r4
   2eb90:	add	sp, sp, #8
   2eb94:	pop	{r4, r5, r6, r7, r8, pc}
   2eb98:	sub	r2, r0, r7
   2eb9c:	mov	r1, r7
   2eba0:	ldr	r0, [r5]
   2eba4:	bl	28b94 <flatcc_builder_create_string@@Base>
   2eba8:	str	r0, [r8]
   2ebac:	ldrb	r3, [r4]
   2ebb0:	cmp	r3, #34	; 0x22
   2ebb4:	addeq	r4, r4, #1
   2ebb8:	bne	2ec88 <flatcc_json_parser_build_string@@Base+0x17c>
   2ebbc:	b	2eb8c <flatcc_json_parser_build_string@@Base+0x80>
   2ebc0:	sub	r2, r4, r7
   2ebc4:	mov	r1, r7
   2ebc8:	ldr	r0, [r5]
   2ebcc:	bl	26e90 <flatcc_builder_append_string@@Base>
   2ebd0:	cmp	r0, #0
   2ebd4:	beq	2eb84 <flatcc_json_parser_build_string@@Base+0x78>
   2ebd8:	cmp	r6, r4
   2ebdc:	beq	2ec7c <flatcc_json_parser_build_string@@Base+0x170>
   2ebe0:	ldrb	r3, [r4]
   2ebe4:	cmp	r3, #34	; 0x22
   2ebe8:	bne	2ec10 <flatcc_json_parser_build_string@@Base+0x104>
   2ebec:	ldr	r0, [r5]
   2ebf0:	bl	28d0c <flatcc_builder_end_string@@Base>
   2ebf4:	str	r0, [r8]
   2ebf8:	b	2ebac <flatcc_json_parser_build_string@@Base+0xa0>
   2ebfc:	mov	r4, r7
   2ec00:	b	2eb84 <flatcc_json_parser_build_string@@Base+0x78>
   2ec04:	ldrb	r3, [r4]
   2ec08:	cmp	r3, #34	; 0x22
   2ec0c:	beq	2ebec <flatcc_json_parser_build_string@@Base+0xe0>
   2ec10:	add	r3, sp, #4
   2ec14:	mov	r2, r6
   2ec18:	mov	r1, r4
   2ec1c:	mov	r0, r5
   2ec20:	bl	2cd2c <flatcc_json_parser_string_escape@@Base>
   2ec24:	mov	r7, r0
   2ec28:	ldrb	r2, [sp, #4]
   2ec2c:	add	r1, sp, #5
   2ec30:	ldr	r0, [r5]
   2ec34:	bl	26e90 <flatcc_builder_append_string@@Base>
   2ec38:	cmp	r0, #0
   2ec3c:	beq	2ebfc <flatcc_json_parser_build_string@@Base+0xf0>
   2ec40:	mov	r2, r6
   2ec44:	mov	r1, r7
   2ec48:	mov	r0, r5
   2ec4c:	bl	2c5a4 <flatcc_json_parser_string_part@@Base>
   2ec50:	mov	r4, r0
   2ec54:	cmp	r6, r0
   2ec58:	beq	2ec78 <flatcc_json_parser_build_string@@Base+0x16c>
   2ec5c:	sub	r2, r0, r7
   2ec60:	mov	r1, r7
   2ec64:	ldr	r0, [r5]
   2ec68:	bl	26e90 <flatcc_builder_append_string@@Base>
   2ec6c:	cmp	r0, #0
   2ec70:	bne	2ec04 <flatcc_json_parser_build_string@@Base+0xf8>
   2ec74:	b	2eb84 <flatcc_json_parser_build_string@@Base+0x78>
   2ec78:	mov	r4, r6
   2ec7c:	ldr	r0, [r5]
   2ec80:	bl	28d0c <flatcc_builder_end_string@@Base>
   2ec84:	str	r0, [r8]
   2ec88:	mov	r3, #20
   2ec8c:	mov	r2, r6
   2ec90:	mov	r1, r4
   2ec94:	mov	r0, r5
   2ec98:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2ec9c:	mov	r4, r0
   2eca0:	b	2eb8c <flatcc_json_parser_build_string@@Base+0x80>

0002eca4 <flatcc_json_parser_prepare_unions@@Base>:
   2eca4:	push	{r4, r5, r6, r7, r8, lr}
   2eca8:	mov	r6, r0
   2ecac:	mov	r4, r1
   2ecb0:	mov	r7, r2
   2ecb4:	mov	r5, r3
   2ecb8:	add	r1, r3, r3, lsl #1
   2ecbc:	lsl	r1, r1, #3
   2ecc0:	add	r1, r1, #8
   2ecc4:	ldr	r0, [r0]
   2ecc8:	bl	25f9c <flatcc_builder_enter_user_frame@@Base>
   2eccc:	ldr	r3, [sp, #24]
   2ecd0:	str	r0, [r3]
   2ecd4:	cmp	r0, #0
   2ecd8:	beq	2ecf4 <flatcc_json_parser_prepare_unions@@Base+0x50>
   2ecdc:	mov	r1, r0
   2ece0:	ldr	r0, [r6]
   2ece4:	bl	260e8 <flatcc_builder_get_user_frame_ptr@@Base>
   2ece8:	str	r5, [r0]
   2ecec:	mov	r0, r4
   2ecf0:	pop	{r4, r5, r6, r7, r8, pc}
   2ecf4:	mov	r3, #33	; 0x21
   2ecf8:	mov	r2, r7
   2ecfc:	mov	r1, r4
   2ed00:	mov	r0, r6
   2ed04:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2ed08:	pop	{r4, r5, r6, r7, r8, pc}

0002ed0c <flatcc_json_parser_finalize_unions@@Base>:
   2ed0c:	push	{r4, r5, r6, r7, r8, lr}
   2ed10:	mov	r4, r0
   2ed14:	mov	r6, r1
   2ed18:	mov	r7, r2
   2ed1c:	mov	r5, r3
   2ed20:	mov	r1, r3
   2ed24:	ldr	r0, [r0]
   2ed28:	bl	260e8 <flatcc_builder_get_user_frame_ptr@@Base>
   2ed2c:	ldr	r3, [r0, #4]
   2ed30:	cmp	r3, #0
   2ed34:	bne	2ed4c <flatcc_json_parser_finalize_unions@@Base+0x40>
   2ed38:	mov	r1, r5
   2ed3c:	ldr	r0, [r4]
   2ed40:	bl	260a0 <flatcc_builder_exit_user_frame_at@@Base>
   2ed44:	mov	r0, r6
   2ed48:	pop	{r4, r5, r6, r7, r8, pc}
   2ed4c:	mov	r3, #27
   2ed50:	mov	r2, r7
   2ed54:	mov	r1, r6
   2ed58:	mov	r0, r4
   2ed5c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2ed60:	mov	r6, r0
   2ed64:	b	2ed38 <flatcc_json_parser_finalize_unions@@Base+0x2c>

0002ed68 <flatcc_json_parser_union@@Base>:
   2ed68:	push	{r4, r5, r6, r7, lr}
   2ed6c:	sub	sp, sp, #20
   2ed70:	mov	r5, r0
   2ed74:	mov	r7, r1
   2ed78:	mov	r6, r2
   2ed7c:	mov	r4, r3
   2ed80:	ldr	r1, [sp, #44]	; 0x2c
   2ed84:	ldr	r0, [r0]
   2ed88:	bl	260e8 <flatcc_builder_get_user_frame_ptr@@Base>
   2ed8c:	add	r3, r4, r4, lsl #1
   2ed90:	add	r3, r0, r3, lsl #3
   2ed94:	ldr	r3, [r3, #8]
   2ed98:	cmp	r3, #0
   2ed9c:	beq	2edc4 <flatcc_json_parser_union@@Base+0x5c>
   2eda0:	mov	r3, #28
   2eda4:	mov	r2, r6
   2eda8:	mov	r1, r7
   2edac:	mov	r0, r5
   2edb0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2edb4:	mov	r4, r0
   2edb8:	mov	r0, r4
   2edbc:	add	sp, sp, #20
   2edc0:	pop	{r4, r5, r6, r7, pc}
   2edc4:	add	r3, r4, r4, lsl #1
   2edc8:	add	r3, r0, r3, lsl #3
   2edcc:	ldrb	r3, [r3, #20]
   2edd0:	cmp	r3, #0
   2edd4:	beq	2ee5c <flatcc_json_parser_union@@Base+0xf4>
   2edd8:	add	r4, r4, r4, lsl #1
   2eddc:	add	r4, r0, r4, lsl #3
   2ede0:	ldrb	r3, [r4, #21]
   2ede4:	strb	r3, [sp, #8]
   2ede8:	cmp	r3, #0
   2edec:	beq	2eea0 <flatcc_json_parser_union@@Base+0x138>
   2edf0:	ldr	r2, [r0, #4]
   2edf4:	sub	r2, r2, #1
   2edf8:	str	r2, [r0, #4]
   2edfc:	add	r2, sp, #12
   2ee00:	str	r2, [sp]
   2ee04:	mov	r2, r6
   2ee08:	mov	r1, r7
   2ee0c:	mov	r0, r5
   2ee10:	ldr	r4, [sp, #48]	; 0x30
   2ee14:	blx	r4
   2ee18:	mov	r4, r0
   2ee1c:	cmp	r6, r0
   2ee20:	beq	2edb8 <flatcc_json_parser_union@@Base+0x50>
   2ee24:	add	r3, sp, #16
   2ee28:	ldmdb	r3, {r2, r3}
   2ee2c:	ldrh	r1, [sp, #40]	; 0x28
   2ee30:	ldr	r0, [r5]
   2ee34:	bl	2912c <flatcc_builder_table_add_union@@Base>
   2ee38:	cmp	r0, #0
   2ee3c:	beq	2edb8 <flatcc_json_parser_union@@Base+0x50>
   2ee40:	mov	r3, #28
   2ee44:	mov	r2, r6
   2ee48:	mov	r1, r4
   2ee4c:	mov	r0, r5
   2ee50:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2ee54:	mov	r4, r0
   2ee58:	b	2edb8 <flatcc_json_parser_union@@Base+0x50>
   2ee5c:	ldr	r3, [r0, #4]
   2ee60:	add	r3, r3, #1
   2ee64:	str	r3, [r0, #4]
   2ee68:	ldr	r1, [r5, #12]
   2ee6c:	lsl	r3, r4, #1
   2ee70:	add	r2, r3, r4
   2ee74:	add	r2, r0, r2, lsl #3
   2ee78:	str	r1, [r2, #16]
   2ee7c:	ldr	r1, [r5, #4]
   2ee80:	str	r1, [r2, #12]
   2ee84:	str	r7, [r2, #8]
   2ee88:	mov	r2, r6
   2ee8c:	mov	r1, r7
   2ee90:	mov	r0, r5
   2ee94:	bl	2d7d4 <flatcc_json_parser_generic_json@@Base>
   2ee98:	mov	r4, r0
   2ee9c:	b	2edb8 <flatcc_json_parser_union@@Base+0x50>
   2eea0:	mov	r3, #25
   2eea4:	mov	r2, r6
   2eea8:	mov	r1, r7
   2eeac:	mov	r0, r5
   2eeb0:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2eeb4:	mov	r4, r0
   2eeb8:	b	2edb8 <flatcc_json_parser_union@@Base+0x50>

0002eebc <flatcc_json_parser_union_type@@Base>:
   2eebc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eec0:	sub	sp, sp, #36	; 0x24
   2eec4:	mov	r5, r0
   2eec8:	mov	r9, r1
   2eecc:	mov	r6, r2
   2eed0:	mov	r4, r3
   2eed4:	ldr	r1, [sp, #76]	; 0x4c
   2eed8:	ldr	r0, [r0]
   2eedc:	bl	260e8 <flatcc_builder_get_user_frame_ptr@@Base>
   2eee0:	add	r8, r0, #8
   2eee4:	add	r4, r4, r4, lsl #1
   2eee8:	lsl	r4, r4, #3
   2eeec:	add	sl, r8, r4
   2eef0:	ldrb	r3, [sl, #12]
   2eef4:	cmp	r3, #0
   2eef8:	bne	2f018 <flatcc_json_parser_union_type@@Base+0x15c>
   2eefc:	mov	r7, r0
   2ef00:	mov	r3, #1
   2ef04:	strb	r3, [sl, #12]
   2ef08:	mov	r2, #0
   2ef0c:	mov	r3, #0
   2ef10:	strd	r2, [sp, #16]
   2ef14:	mov	r3, #0
   2ef18:	str	r3, [sp, #12]
   2ef1c:	strb	r3, [sl, #13]
   2ef20:	cmp	r9, r6
   2ef24:	beq	2f05c <flatcc_json_parser_union_type@@Base+0x1a0>
   2ef28:	add	r3, sp, #16
   2ef2c:	str	r3, [sp]
   2ef30:	add	r3, sp, #12
   2ef34:	mov	r2, r6
   2ef38:	mov	r1, r9
   2ef3c:	mov	r0, r5
   2ef40:	bl	2d678 <flatcc_json_parser_integer@@Base>
   2ef44:	mov	fp, r0
   2ef48:	cmp	r9, r0
   2ef4c:	beq	2f05c <flatcc_json_parser_union_type@@Base+0x1a0>
   2ef50:	ldr	r3, [sp, #12]
   2ef54:	cmp	r3, #0
   2ef58:	bne	2f03c <flatcc_json_parser_union_type@@Base+0x180>
   2ef5c:	ldrd	r2, [sp, #16]
   2ef60:	cmp	r3, #0
   2ef64:	cmpeq	r2, #255	; 0xff
   2ef68:	strbls	r2, [sl, #13]
   2ef6c:	bhi	2f080 <flatcc_json_parser_union_type@@Base+0x1c4>
   2ef70:	ldr	r3, [r8, r4]
   2ef74:	cmp	r3, #0
   2ef78:	beq	2f09c <flatcc_json_parser_union_type@@Base+0x1e0>
   2ef7c:	ldr	r3, [r7, #4]
   2ef80:	cmp	r3, #0
   2ef84:	beq	2f0b4 <flatcc_json_parser_union_type@@Base+0x1f8>
   2ef88:	sub	r3, r3, #1
   2ef8c:	str	r3, [r7, #4]
   2ef90:	ldr	r9, [r5, #12]
   2ef94:	ldr	r7, [r5, #4]
   2ef98:	ldr	r3, [sl, #8]
   2ef9c:	str	r3, [r5, #12]
   2efa0:	ldr	r3, [sl, #4]
   2efa4:	str	r3, [r5, #4]
   2efa8:	ldrb	r3, [sl, #13]
   2efac:	strb	r3, [sp, #24]
   2efb0:	ldr	r1, [r8, r4]
   2efb4:	add	r2, sp, #28
   2efb8:	str	r2, [sp]
   2efbc:	mov	r2, r6
   2efc0:	mov	r0, r5
   2efc4:	ldr	r4, [sp, #84]	; 0x54
   2efc8:	blx	r4
   2efcc:	cmp	r6, r0
   2efd0:	moveq	fp, r0
   2efd4:	beq	2f030 <flatcc_json_parser_union_type@@Base+0x174>
   2efd8:	add	r3, sp, #32
   2efdc:	ldmdb	r3, {r2, r3}
   2efe0:	ldrh	r1, [sp, #72]	; 0x48
   2efe4:	ldr	r0, [r5]
   2efe8:	bl	2912c <flatcc_builder_table_add_union@@Base>
   2efec:	cmp	r0, #0
   2eff0:	streq	r9, [r5, #12]
   2eff4:	streq	r7, [r5, #4]
   2eff8:	beq	2f030 <flatcc_json_parser_union_type@@Base+0x174>
   2effc:	mov	r3, #28
   2f000:	mov	r2, r6
   2f004:	mov	r1, fp
   2f008:	mov	r0, r5
   2f00c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2f010:	mov	fp, r0
   2f014:	b	2f030 <flatcc_json_parser_union_type@@Base+0x174>
   2f018:	mov	r3, #28
   2f01c:	mov	r2, r6
   2f020:	mov	r1, r9
   2f024:	mov	r0, r5
   2f028:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2f02c:	mov	fp, r0
   2f030:	mov	r0, fp
   2f034:	add	sp, sp, #36	; 0x24
   2f038:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f03c:	mov	r3, #8
   2f040:	mov	r2, r6
   2f044:	mov	r1, r0
   2f048:	mov	r0, r5
   2f04c:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2f050:	mov	fp, r0
   2f054:	cmp	r9, fp
   2f058:	bne	2ef70 <flatcc_json_parser_union_type@@Base+0xb4>
   2f05c:	add	r3, sl, #13
   2f060:	str	r3, [sp]
   2f064:	ldr	r3, [sp, #80]	; 0x50
   2f068:	mov	r2, r6
   2f06c:	mov	r1, r9
   2f070:	mov	r0, r5
   2f074:	bl	2c790 <flatcc_json_parser_space_ext@@Base+0x140>
   2f078:	mov	fp, r0
   2f07c:	b	2ef70 <flatcc_json_parser_union_type@@Base+0xb4>
   2f080:	mov	r3, #7
   2f084:	mov	r2, r6
   2f088:	mov	r1, r0
   2f08c:	mov	r0, r5
   2f090:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2f094:	mov	fp, r0
   2f098:	b	2f054 <flatcc_json_parser_union_type@@Base+0x198>
   2f09c:	ldrb	r2, [sl, #13]
   2f0a0:	ldr	r3, [r7, #4]
   2f0a4:	cmp	r2, #0
   2f0a8:	addne	r3, r3, #1
   2f0ac:	str	r3, [r7, #4]
   2f0b0:	b	2f030 <flatcc_json_parser_union_type@@Base+0x174>
   2f0b4:	ldr	r3, [pc, #12]	; 2f0c8 <flatcc_json_parser_union_type@@Base+0x20c>
   2f0b8:	ldr	r2, [pc, #12]	; 2f0cc <flatcc_json_parser_union_type@@Base+0x210>
   2f0bc:	ldr	r1, [pc, #12]	; 2f0d0 <flatcc_json_parser_union_type@@Base+0x214>
   2f0c0:	ldr	r0, [pc, #12]	; 2f0d4 <flatcc_json_parser_union_type@@Base+0x218>
   2f0c4:	bl	14618 <__assert_fail@plt>
   2f0c8:	ldrdeq	r1, [r4], -r8
   2f0cc:	andeq	r0, r0, r5, asr #7
   2f0d0:	strdeq	r1, [r4], -r0
   2f0d4:	andeq	r1, r4, ip, lsr lr

0002f0d8 <flatcc_json_parser_union_vector@@Base>:
   2f0d8:	push	{r4, r5, r6, r7, lr}
   2f0dc:	sub	sp, sp, #20
   2f0e0:	mov	r5, r0
   2f0e4:	mov	r6, r1
   2f0e8:	mov	r7, r2
   2f0ec:	mov	r4, r3
   2f0f0:	ldr	r1, [sp, #44]	; 0x2c
   2f0f4:	ldr	r0, [r0]
   2f0f8:	bl	260e8 <flatcc_builder_get_user_frame_ptr@@Base>
   2f0fc:	add	r2, r0, #8
   2f100:	add	r4, r4, r4, lsl #1
   2f104:	lsl	r3, r4, #3
   2f108:	add	r1, r2, r3
   2f10c:	ldr	ip, [r2, r3]
   2f110:	cmp	ip, #0
   2f114:	beq	2f134 <flatcc_json_parser_union_vector@@Base+0x5c>
   2f118:	mov	r3, #28
   2f11c:	mov	r2, r7
   2f120:	mov	r1, r6
   2f124:	mov	r0, r5
   2f128:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2f12c:	add	sp, sp, #20
   2f130:	pop	{r4, r5, r6, r7, pc}
   2f134:	ldrb	ip, [r1, #12]
   2f138:	cmp	ip, #0
   2f13c:	beq	2f17c <flatcc_json_parser_union_vector@@Base+0xa4>
   2f140:	ldr	r3, [r0, #4]
   2f144:	sub	r3, r3, #1
   2f148:	str	r3, [r0, #4]
   2f14c:	ldr	r3, [r1, #20]
   2f150:	ldr	r2, [sp, #48]	; 0x30
   2f154:	str	r2, [sp, #8]
   2f158:	ldrh	r2, [sp, #40]	; 0x28
   2f15c:	str	r2, [sp, #4]
   2f160:	ldr	r2, [r1, #16]
   2f164:	str	r2, [sp]
   2f168:	mov	r2, r7
   2f16c:	mov	r1, r6
   2f170:	mov	r0, r5
   2f174:	bl	2c930 <flatcc_json_parser_space_ext@@Base+0x2e0>
   2f178:	b	2f12c <flatcc_json_parser_union_vector@@Base+0x54>
   2f17c:	ldr	ip, [r0, #4]
   2f180:	add	ip, ip, #1
   2f184:	str	ip, [r0, #4]
   2f188:	ldr	r0, [r5, #12]
   2f18c:	str	r0, [r1, #8]
   2f190:	ldr	r0, [r5, #4]
   2f194:	str	r0, [r1, #4]
   2f198:	str	r6, [r2, r3]
   2f19c:	mov	r2, r7
   2f1a0:	mov	r1, r6
   2f1a4:	mov	r0, r5
   2f1a8:	bl	2d7d4 <flatcc_json_parser_generic_json@@Base>
   2f1ac:	b	2f12c <flatcc_json_parser_union_vector@@Base+0x54>

0002f1b0 <flatcc_json_parser_union_type_vector@@Base>:
   2f1b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f1b4:	sub	sp, sp, #60	; 0x3c
   2f1b8:	mov	r7, r0
   2f1bc:	mov	r5, r1
   2f1c0:	mov	r6, r2
   2f1c4:	mov	r4, r3
   2f1c8:	ldrh	r3, [sp, #96]	; 0x60
   2f1cc:	str	r3, [sp, #24]
   2f1d0:	ldr	r1, [sp, #100]	; 0x64
   2f1d4:	ldr	r0, [r0]
   2f1d8:	bl	260e8 <flatcc_builder_get_user_frame_ptr@@Base>
   2f1dc:	add	r4, r4, r4, lsl #1
   2f1e0:	lsl	r3, r4, #3
   2f1e4:	str	r3, [sp, #28]
   2f1e8:	add	r0, r0, #8
   2f1ec:	add	r3, r0, r3
   2f1f0:	str	r3, [sp, #20]
   2f1f4:	ldrb	r3, [r3, #12]
   2f1f8:	cmp	r3, #0
   2f1fc:	bne	2f254 <flatcc_json_parser_union_type_vector@@Base+0xa4>
   2f200:	mov	r1, #1
   2f204:	ldr	r3, [sp, #20]
   2f208:	strb	r1, [r3, #12]
   2f20c:	mvn	r3, #0
   2f210:	mov	r2, r1
   2f214:	ldr	r0, [r7]
   2f218:	bl	27174 <flatcc_builder_start_vector@@Base>
   2f21c:	cmp	r0, #0
   2f220:	bne	2f5b4 <flatcc_json_parser_union_type_vector@@Base+0x404>
   2f224:	cmp	r5, r6
   2f228:	beq	2f238 <flatcc_json_parser_union_type_vector@@Base+0x88>
   2f22c:	ldrb	r3, [r5]
   2f230:	cmp	r3, #91	; 0x5b
   2f234:	beq	2f26c <flatcc_json_parser_union_type_vector@@Base+0xbc>
   2f238:	mov	r3, #22
   2f23c:	mov	r2, r6
   2f240:	mov	r1, r5
   2f244:	mov	r0, r7
   2f248:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2f24c:	mov	r5, r0
   2f250:	b	2f558 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2f254:	mov	r3, #28
   2f258:	mov	r2, r6
   2f25c:	mov	r1, r5
   2f260:	mov	r0, r7
   2f264:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2f268:	b	2f5c8 <flatcc_json_parser_union_type_vector@@Base+0x418>
   2f26c:	add	r1, r5, #1
   2f270:	mov	sl, r6
   2f274:	sub	r3, r6, r1
   2f278:	cmp	r3, #1
   2f27c:	ble	2f294 <flatcc_json_parser_union_type_vector@@Base+0xe4>
   2f280:	ldrb	r3, [r5, #1]
   2f284:	cmp	r3, #32
   2f288:	movhi	r5, r1
   2f28c:	bhi	2f2a4 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2f290:	beq	2f2c4 <flatcc_json_parser_union_type_vector@@Base+0x114>
   2f294:	mov	r2, r6
   2f298:	mov	r0, r7
   2f29c:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2f2a0:	mov	r5, r0
   2f2a4:	cmp	r6, r5
   2f2a8:	beq	2f2b8 <flatcc_json_parser_union_type_vector@@Base+0x108>
   2f2ac:	ldrb	r3, [r5]
   2f2b0:	cmp	r3, #93	; 0x5d
   2f2b4:	beq	2f2d8 <flatcc_json_parser_union_type_vector@@Base+0x128>
   2f2b8:	mov	r8, #0
   2f2bc:	add	fp, sp, #40	; 0x28
   2f2c0:	b	2f454 <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   2f2c4:	ldrb	r3, [r5, #2]
   2f2c8:	cmp	r3, #32
   2f2cc:	addhi	r5, r5, #2
   2f2d0:	bls	2f294 <flatcc_json_parser_union_type_vector@@Base+0xe4>
   2f2d4:	b	2f2a4 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   2f2d8:	add	r1, r5, #1
   2f2dc:	sub	r3, r6, r1
   2f2e0:	cmp	r3, #1
   2f2e4:	ble	2f2fc <flatcc_json_parser_union_type_vector@@Base+0x14c>
   2f2e8:	ldrb	r3, [r5, #1]
   2f2ec:	cmp	r3, #32
   2f2f0:	movhi	r5, r1
   2f2f4:	bhi	2f558 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2f2f8:	beq	2f310 <flatcc_json_parser_union_type_vector@@Base+0x160>
   2f2fc:	mov	r2, r6
   2f300:	mov	r0, r7
   2f304:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2f308:	mov	r5, r0
   2f30c:	b	2f558 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2f310:	ldrb	r3, [r5, #2]
   2f314:	cmp	r3, #32
   2f318:	addhi	r5, r5, #2
   2f31c:	bls	2f2fc <flatcc_json_parser_union_type_vector@@Base+0x14c>
   2f320:	b	2f558 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2f324:	mov	r3, #8
   2f328:	mov	r2, r6
   2f32c:	mov	r1, r0
   2f330:	mov	r0, r7
   2f334:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2f338:	mov	r4, r0
   2f33c:	cmp	r4, r5
   2f340:	bne	2f4c8 <flatcc_json_parser_union_type_vector@@Base+0x318>
   2f344:	add	r3, sp, #55	; 0x37
   2f348:	str	r3, [sp]
   2f34c:	ldr	r3, [sp, #104]	; 0x68
   2f350:	mov	r2, r6
   2f354:	mov	r1, r5
   2f358:	mov	r0, r7
   2f35c:	bl	2c790 <flatcc_json_parser_space_ext@@Base+0x140>
   2f360:	mov	r4, r0
   2f364:	cmp	r6, r0
   2f368:	cmpne	r0, r5
   2f36c:	bne	2f4c8 <flatcc_json_parser_union_type_vector@@Base+0x318>
   2f370:	mov	r5, r0
   2f374:	b	2f5b4 <flatcc_json_parser_union_type_vector@@Base+0x404>
   2f378:	mov	r3, #7
   2f37c:	mov	r2, r6
   2f380:	mov	r1, r0
   2f384:	mov	r0, r7
   2f388:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2f38c:	mov	r4, r0
   2f390:	b	2f33c <flatcc_json_parser_union_type_vector@@Base+0x18c>
   2f394:	mov	r3, #15
   2f398:	mov	r2, r6
   2f39c:	mov	r1, r4
   2f3a0:	mov	r0, r7
   2f3a4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2f3a8:	b	2f5c8 <flatcc_json_parser_union_type_vector@@Base+0x418>
   2f3ac:	ldrb	r3, [r4, #1]
   2f3b0:	cmp	r3, #32
   2f3b4:	addhi	r4, r4, #1
   2f3b8:	bls	2f510 <flatcc_json_parser_union_type_vector@@Base+0x360>
   2f3bc:	b	2f524 <flatcc_json_parser_union_type_vector@@Base+0x374>
   2f3c0:	add	r5, r4, #1
   2f3c4:	sub	r3, r6, r5
   2f3c8:	cmp	r3, #1
   2f3cc:	ble	2f3e0 <flatcc_json_parser_union_type_vector@@Base+0x230>
   2f3d0:	ldrb	r3, [r4, #1]
   2f3d4:	cmp	r3, #32
   2f3d8:	bhi	2f558 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2f3dc:	beq	2f3f8 <flatcc_json_parser_union_type_vector@@Base+0x248>
   2f3e0:	mov	r2, r6
   2f3e4:	mov	r1, r5
   2f3e8:	mov	r0, r7
   2f3ec:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2f3f0:	mov	r5, r0
   2f3f4:	b	2f558 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2f3f8:	ldrb	r3, [r4, #2]
   2f3fc:	cmp	r3, #32
   2f400:	addhi	r5, r4, #2
   2f404:	bls	2f3e0 <flatcc_json_parser_union_type_vector@@Base+0x230>
   2f408:	b	2f558 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2f40c:	add	r5, r4, #1
   2f410:	sub	r3, sl, r5
   2f414:	cmp	r3, #1
   2f418:	ble	2f42c <flatcc_json_parser_union_type_vector@@Base+0x27c>
   2f41c:	ldrb	r3, [r4, #1]
   2f420:	cmp	r3, #32
   2f424:	bhi	2f440 <flatcc_json_parser_union_type_vector@@Base+0x290>
   2f428:	beq	2f5d0 <flatcc_json_parser_union_type_vector@@Base+0x420>
   2f42c:	mov	r2, r6
   2f430:	mov	r1, r5
   2f434:	mov	r0, r7
   2f438:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2f43c:	mov	r5, r0
   2f440:	cmp	r6, r5
   2f444:	beq	2f5e4 <flatcc_json_parser_union_type_vector@@Base+0x434>
   2f448:	ldrb	r3, [r5]
   2f44c:	cmp	r3, #93	; 0x5d
   2f450:	beq	2f600 <flatcc_json_parser_union_type_vector@@Base+0x450>
   2f454:	mov	r1, #1
   2f458:	ldr	r0, [r7]
   2f45c:	bl	2696c <flatcc_builder_extend_vector@@Base>
   2f460:	subs	r9, r0, #0
   2f464:	beq	2f5b4 <flatcc_json_parser_union_type_vector@@Base+0x404>
   2f468:	mov	r2, #0
   2f46c:	mov	r3, #0
   2f470:	strd	r2, [sp, #40]	; 0x28
   2f474:	str	r8, [sp, #36]	; 0x24
   2f478:	strb	r8, [sp, #55]	; 0x37
   2f47c:	cmp	r6, r5
   2f480:	beq	2f344 <flatcc_json_parser_union_type_vector@@Base+0x194>
   2f484:	str	fp, [sp]
   2f488:	add	r3, sp, #36	; 0x24
   2f48c:	mov	r2, r6
   2f490:	mov	r1, r5
   2f494:	mov	r0, r7
   2f498:	bl	2d678 <flatcc_json_parser_integer@@Base>
   2f49c:	mov	r4, r0
   2f4a0:	cmp	r0, r5
   2f4a4:	beq	2f344 <flatcc_json_parser_union_type_vector@@Base+0x194>
   2f4a8:	ldr	r3, [sp, #36]	; 0x24
   2f4ac:	cmp	r3, #0
   2f4b0:	bne	2f324 <flatcc_json_parser_union_type_vector@@Base+0x174>
   2f4b4:	ldrd	r2, [sp, #40]	; 0x28
   2f4b8:	cmp	r3, #0
   2f4bc:	cmpeq	r2, #255	; 0xff
   2f4c0:	strbls	r2, [sp, #55]	; 0x37
   2f4c4:	bhi	2f378 <flatcc_json_parser_union_type_vector@@Base+0x1c8>
   2f4c8:	ldrb	r0, [sp, #55]	; 0x37
   2f4cc:	ldr	r3, [sp, #112]	; 0x70
   2f4d0:	blx	r3
   2f4d4:	cmp	r0, #0
   2f4d8:	bne	2f4ec <flatcc_json_parser_union_type_vector@@Base+0x33c>
   2f4dc:	ldr	r3, [r7, #8]
   2f4e0:	tst	r3, #1
   2f4e4:	beq	2f394 <flatcc_json_parser_union_type_vector@@Base+0x1e4>
   2f4e8:	strb	r8, [sp, #55]	; 0x37
   2f4ec:	ldrb	r3, [sp, #55]	; 0x37
   2f4f0:	strb	r3, [r9]
   2f4f4:	sub	r3, sl, r4
   2f4f8:	cmp	r3, #1
   2f4fc:	ble	2f510 <flatcc_json_parser_union_type_vector@@Base+0x360>
   2f500:	ldrb	r3, [r4]
   2f504:	cmp	r3, #32
   2f508:	bhi	2f524 <flatcc_json_parser_union_type_vector@@Base+0x374>
   2f50c:	beq	2f3ac <flatcc_json_parser_union_type_vector@@Base+0x1fc>
   2f510:	mov	r2, r6
   2f514:	mov	r1, r4
   2f518:	mov	r0, r7
   2f51c:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2f520:	mov	r4, r0
   2f524:	cmp	r6, r4
   2f528:	beq	2f724 <flatcc_json_parser_union_type_vector@@Base+0x574>
   2f52c:	ldrb	r3, [r4]
   2f530:	cmp	r3, #44	; 0x2c
   2f534:	beq	2f40c <flatcc_json_parser_union_type_vector@@Base+0x25c>
   2f538:	cmp	r3, #93	; 0x5d
   2f53c:	beq	2f3c0 <flatcc_json_parser_union_type_vector@@Base+0x210>
   2f540:	mov	r3, #9
   2f544:	mov	r2, r6
   2f548:	mov	r1, r4
   2f54c:	mov	r0, r7
   2f550:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2f554:	mov	r5, r0
   2f558:	ldr	r0, [r7]
   2f55c:	bl	28278 <flatcc_builder_vector_count@@Base>
   2f560:	mov	r4, r0
   2f564:	ldr	r3, [sp, #20]
   2f568:	str	r0, [r3, #16]
   2f56c:	mov	r1, r0
   2f570:	ldr	r0, [r7]
   2f574:	bl	25f9c <flatcc_builder_enter_user_frame@@Base>
   2f578:	mov	r8, r0
   2f57c:	mov	r1, r0
   2f580:	ldr	r0, [r7]
   2f584:	bl	260e8 <flatcc_builder_get_user_frame_ptr@@Base>
   2f588:	mov	r9, r0
   2f58c:	ldr	r0, [r7]
   2f590:	bl	28284 <flatcc_builder_vector_edit@@Base>
   2f594:	mov	r2, r4
   2f598:	mov	r1, r0
   2f59c:	mov	r0, r9
   2f5a0:	bl	1454c <memcpy@plt>
   2f5a4:	ldr	r0, [r7]
   2f5a8:	bl	28184 <flatcc_builder_end_vector@@Base>
   2f5ac:	subs	r9, r0, #0
   2f5b0:	bne	2f64c <flatcc_json_parser_union_type_vector@@Base+0x49c>
   2f5b4:	mov	r3, #33	; 0x21
   2f5b8:	mov	r2, r6
   2f5bc:	mov	r1, r5
   2f5c0:	mov	r0, r7
   2f5c4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2f5c8:	add	sp, sp, #60	; 0x3c
   2f5cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f5d0:	ldrb	r3, [r4, #2]
   2f5d4:	cmp	r3, #32
   2f5d8:	addhi	r5, r4, #2
   2f5dc:	bls	2f42c <flatcc_json_parser_union_type_vector@@Base+0x27c>
   2f5e0:	b	2f440 <flatcc_json_parser_union_type_vector@@Base+0x290>
   2f5e4:	mov	r3, #9
   2f5e8:	mov	r2, r6
   2f5ec:	mov	r1, r5
   2f5f0:	mov	r0, r7
   2f5f4:	bl	2c578 <flatcc_json_parser_set_error@@Base>
   2f5f8:	mov	r5, r0
   2f5fc:	b	2f558 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2f600:	add	r1, r5, #1
   2f604:	sub	r3, r6, r1
   2f608:	cmp	r3, #1
   2f60c:	ble	2f624 <flatcc_json_parser_union_type_vector@@Base+0x474>
   2f610:	ldrb	r3, [r5, #1]
   2f614:	cmp	r3, #32
   2f618:	movhi	r5, r1
   2f61c:	bhi	2f558 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2f620:	beq	2f638 <flatcc_json_parser_union_type_vector@@Base+0x488>
   2f624:	mov	r2, r6
   2f628:	mov	r0, r7
   2f62c:	bl	2c650 <flatcc_json_parser_space_ext@@Base>
   2f630:	mov	r5, r0
   2f634:	b	2f558 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2f638:	ldrb	r3, [r5, #2]
   2f63c:	cmp	r3, #32
   2f640:	addhi	r5, r5, #2
   2f644:	bls	2f624 <flatcc_json_parser_union_type_vector@@Base+0x474>
   2f648:	b	2f558 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2f64c:	ldr	r3, [sp, #24]
   2f650:	sub	r1, r3, #1
   2f654:	ldr	r0, [r7]
   2f658:	bl	28fec <flatcc_builder_table_add_offset@@Base>
   2f65c:	cmp	r0, #0
   2f660:	beq	2f5b4 <flatcc_json_parser_union_type_vector@@Base+0x404>
   2f664:	str	r9, [r0]
   2f668:	ldr	r1, [sp, #100]	; 0x64
   2f66c:	ldr	r0, [r7]
   2f670:	bl	260e8 <flatcc_builder_get_user_frame_ptr@@Base>
   2f674:	add	r2, r0, #8
   2f678:	ldr	r3, [sp, #28]
   2f67c:	add	r1, r2, r3
   2f680:	str	r8, [r1, #20]
   2f684:	ldr	r3, [r2, r3]
   2f688:	cmp	r3, #0
   2f68c:	beq	2f6fc <flatcc_json_parser_union_type_vector@@Base+0x54c>
   2f690:	ldr	r3, [r0, #4]
   2f694:	cmp	r3, #0
   2f698:	beq	2f710 <flatcc_json_parser_union_type_vector@@Base+0x560>
   2f69c:	sub	r3, r3, #1
   2f6a0:	str	r3, [r0, #4]
   2f6a4:	ldr	sl, [r7, #12]
   2f6a8:	ldr	r9, [r7, #4]
   2f6ac:	ldr	r3, [r1, #8]
   2f6b0:	str	r3, [r7, #12]
   2f6b4:	ldr	r3, [r1, #4]
   2f6b8:	str	r3, [r7, #4]
   2f6bc:	ldr	r3, [sp, #28]
   2f6c0:	ldr	r1, [r2, r3]
   2f6c4:	ldr	r3, [sp, #108]	; 0x6c
   2f6c8:	str	r3, [sp, #8]
   2f6cc:	ldr	r3, [sp, #24]
   2f6d0:	str	r3, [sp, #4]
   2f6d4:	str	r4, [sp]
   2f6d8:	mov	r3, r8
   2f6dc:	mov	r2, r6
   2f6e0:	mov	r0, r7
   2f6e4:	bl	2c930 <flatcc_json_parser_space_ext@@Base+0x2e0>
   2f6e8:	cmp	r6, r0
   2f6ec:	strne	sl, [r7, #12]
   2f6f0:	strne	r9, [r7, #4]
   2f6f4:	movne	r0, r5
   2f6f8:	b	2f5c8 <flatcc_json_parser_union_type_vector@@Base+0x418>
   2f6fc:	ldr	r3, [r0, #4]
   2f700:	add	r3, r3, #1
   2f704:	str	r3, [r0, #4]
   2f708:	mov	r0, r5
   2f70c:	b	2f5c8 <flatcc_json_parser_union_type_vector@@Base+0x418>
   2f710:	ldr	r3, [pc, #20]	; 2f72c <flatcc_json_parser_union_type_vector@@Base+0x57c>
   2f714:	ldr	r2, [pc, #20]	; 2f730 <flatcc_json_parser_union_type_vector@@Base+0x580>
   2f718:	ldr	r1, [pc, #20]	; 2f734 <flatcc_json_parser_union_type_vector@@Base+0x584>
   2f71c:	ldr	r0, [pc, #20]	; 2f738 <flatcc_json_parser_union_type_vector@@Base+0x588>
   2f720:	bl	14618 <__assert_fail@plt>
   2f724:	mov	r5, r6
   2f728:	b	2f558 <flatcc_json_parser_union_type_vector@@Base+0x3a8>
   2f72c:	strdeq	r1, [r4], -r8
   2f730:	andeq	r0, r0, r2, ror #8
   2f734:	strdeq	r1, [r4], -r0
   2f738:	andeq	r1, r4, ip, lsr lr

0002f73c <flatcc_json_parser_table_as_root@@Base>:
   2f73c:	push	{r4, r5, r6, r7, r8, r9, lr}
   2f740:	sub	sp, sp, #52	; 0x34
   2f744:	mov	r8, r0
   2f748:	mov	r5, r2
   2f74c:	ldr	r9, [sp, #80]	; 0x50
   2f750:	and	r6, r9, #4
   2f754:	cmp	r6, #0
   2f758:	movne	r6, #2
   2f75c:	subs	r4, r1, #0
   2f760:	addeq	r4, sp, #8
   2f764:	add	r7, r2, r3
   2f768:	mov	r2, #40	; 0x28
   2f76c:	mov	r1, #0
   2f770:	mov	r0, r4
   2f774:	bl	145c4 <memset@plt>
   2f778:	str	r8, [r4]
   2f77c:	str	r5, [r4, #4]
   2f780:	mov	r3, #1
   2f784:	str	r3, [r4, #12]
   2f788:	str	r9, [r4, #8]
   2f78c:	str	r5, [r4, #24]
   2f790:	str	r7, [r4, #28]
   2f794:	str	r5, [r4, #32]
   2f798:	mov	r3, r6
   2f79c:	mov	r2, #0
   2f7a0:	ldr	r1, [sp, #84]	; 0x54
   2f7a4:	mov	r0, r8
   2f7a8:	bl	265f8 <flatcc_builder_start_buffer@@Base>
   2f7ac:	cmp	r0, #0
   2f7b0:	bne	2f800 <flatcc_json_parser_table_as_root@@Base+0xc4>
   2f7b4:	add	r3, sp, #4
   2f7b8:	mov	r2, r7
   2f7bc:	mov	r1, r5
   2f7c0:	mov	r0, r4
   2f7c4:	ldr	r6, [sp, #88]	; 0x58
   2f7c8:	blx	r6
   2f7cc:	ldr	r6, [r4, #20]
   2f7d0:	cmp	r6, #0
   2f7d4:	beq	2f7e4 <flatcc_json_parser_table_as_root@@Base+0xa8>
   2f7d8:	mov	r0, r6
   2f7dc:	add	sp, sp, #52	; 0x34
   2f7e0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2f7e4:	ldr	r1, [sp, #4]
   2f7e8:	mov	r0, r8
   2f7ec:	bl	266b0 <flatcc_builder_end_buffer@@Base>
   2f7f0:	cmp	r0, #0
   2f7f4:	beq	2f808 <flatcc_json_parser_table_as_root@@Base+0xcc>
   2f7f8:	str	r5, [r4, #36]	; 0x24
   2f7fc:	b	2f7d8 <flatcc_json_parser_table_as_root@@Base+0x9c>
   2f800:	mvn	r6, #0
   2f804:	b	2f7d8 <flatcc_json_parser_table_as_root@@Base+0x9c>
   2f808:	mvn	r6, #0
   2f80c:	b	2f7d8 <flatcc_json_parser_table_as_root@@Base+0x9c>

0002f810 <flatcc_json_parser_struct_as_root@@Base>:
   2f810:	push	{r4, r5, r6, r7, r8, r9, lr}
   2f814:	sub	sp, sp, #52	; 0x34
   2f818:	mov	r8, r0
   2f81c:	mov	r5, r2
   2f820:	ldr	r9, [sp, #80]	; 0x50
   2f824:	and	r6, r9, #4
   2f828:	cmp	r6, #0
   2f82c:	movne	r6, #2
   2f830:	subs	r4, r1, #0
   2f834:	addeq	r4, sp, #8
   2f838:	add	r7, r2, r3
   2f83c:	mov	r2, #40	; 0x28
   2f840:	mov	r1, #0
   2f844:	mov	r0, r4
   2f848:	bl	145c4 <memset@plt>
   2f84c:	str	r8, [r4]
   2f850:	str	r5, [r4, #4]
   2f854:	mov	r3, #1
   2f858:	str	r3, [r4, #12]
   2f85c:	str	r9, [r4, #8]
   2f860:	str	r5, [r4, #24]
   2f864:	str	r7, [r4, #28]
   2f868:	str	r5, [r4, #32]
   2f86c:	mov	r3, r6
   2f870:	mov	r2, #0
   2f874:	ldr	r1, [sp, #84]	; 0x54
   2f878:	mov	r0, r8
   2f87c:	bl	265f8 <flatcc_builder_start_buffer@@Base>
   2f880:	cmp	r0, #0
   2f884:	bne	2f8d4 <flatcc_json_parser_struct_as_root@@Base+0xc4>
   2f888:	add	r3, sp, #4
   2f88c:	mov	r2, r7
   2f890:	mov	r1, r5
   2f894:	mov	r0, r4
   2f898:	ldr	r6, [sp, #88]	; 0x58
   2f89c:	blx	r6
   2f8a0:	ldr	r6, [r4, #20]
   2f8a4:	cmp	r6, #0
   2f8a8:	beq	2f8b8 <flatcc_json_parser_struct_as_root@@Base+0xa8>
   2f8ac:	mov	r0, r6
   2f8b0:	add	sp, sp, #52	; 0x34
   2f8b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2f8b8:	ldr	r1, [sp, #4]
   2f8bc:	mov	r0, r8
   2f8c0:	bl	266b0 <flatcc_builder_end_buffer@@Base>
   2f8c4:	cmp	r0, #0
   2f8c8:	beq	2f8dc <flatcc_json_parser_struct_as_root@@Base+0xcc>
   2f8cc:	str	r5, [r4, #36]	; 0x24
   2f8d0:	b	2f8ac <flatcc_json_parser_struct_as_root@@Base+0x9c>
   2f8d4:	mvn	r6, #0
   2f8d8:	b	2f8ac <flatcc_json_parser_struct_as_root@@Base+0x9c>
   2f8dc:	mvn	r6, #0
   2f8e0:	b	2f8ac <flatcc_json_parser_struct_as_root@@Base+0x9c>
   2f8e4:	andeq	r0, r0, r0
   2f8e8:	cmp	r0, #99	; 0x63
   2f8ec:	bls	2f93c <flatcc_json_parser_struct_as_root@@Base+0x12c>
   2f8f0:	mov	r3, #0
   2f8f4:	strb	r3, [r1, #3]
   2f8f8:	ldr	ip, [pc, #160]	; 2f9a0 <flatcc_json_parser_struct_as_root@@Base+0x190>
   2f8fc:	ldr	r3, [pc, #160]	; 2f9a4 <flatcc_json_parser_struct_as_root@@Base+0x194>
   2f900:	umull	r2, r3, r3, r0
   2f904:	lsr	r3, r3, #5
   2f908:	mov	r2, #100	; 0x64
   2f90c:	mul	r2, r2, r3
   2f910:	sub	r0, r0, r2
   2f914:	uxtb	r0, r0
   2f918:	add	r2, ip, r0, lsl #1
   2f91c:	ldrb	r0, [ip, r0, lsl #1]
   2f920:	strb	r0, [r1, #1]
   2f924:	ldrb	r2, [r2, #1]
   2f928:	strb	r2, [r1, #2]
   2f92c:	add	r3, r3, #48	; 0x30
   2f930:	strb	r3, [r1]
   2f934:	mov	r0, #3
   2f938:	bx	lr
   2f93c:	cmp	r0, #9
   2f940:	bls	2f988 <flatcc_json_parser_struct_as_root@@Base+0x178>
   2f944:	mov	r3, #0
   2f948:	strb	r3, [r1, #2]
   2f94c:	ldr	ip, [pc, #76]	; 2f9a0 <flatcc_json_parser_struct_as_root@@Base+0x190>
   2f950:	ldr	r3, [pc, #76]	; 2f9a4 <flatcc_json_parser_struct_as_root@@Base+0x194>
   2f954:	umull	r2, r3, r3, r0
   2f958:	lsr	r2, r3, #5
   2f95c:	mov	r3, #100	; 0x64
   2f960:	mul	r3, r3, r2
   2f964:	sub	r0, r0, r3
   2f968:	uxtb	r0, r0
   2f96c:	add	r3, ip, r0, lsl #1
   2f970:	ldrb	r2, [ip, r0, lsl #1]
   2f974:	strb	r2, [r1]
   2f978:	ldrb	r3, [r3, #1]
   2f97c:	strb	r3, [r1, #1]
   2f980:	mov	r0, #2
   2f984:	bx	lr
   2f988:	mov	r3, #0
   2f98c:	strb	r3, [r1, #1]
   2f990:	add	r0, r0, #48	; 0x30
   2f994:	strb	r0, [r1]
   2f998:	mov	r0, #1
   2f99c:	bx	lr
   2f9a0:	andeq	r1, r4, r0, asr lr
   2f9a4:	mvnpl	r8, pc, lsl r5
   2f9a8:	push	{r4, r5, lr}
   2f9ac:	mov	r3, r0
   2f9b0:	cmp	r0, #1000	; 0x3e8
   2f9b4:	bcc	2fa44 <flatcc_json_parser_struct_as_root@@Base+0x234>
   2f9b8:	ldr	r2, [pc, #352]	; 2fb20 <flatcc_json_parser_struct_as_root@@Base+0x310>
   2f9bc:	cmp	r0, r2
   2f9c0:	bhi	2fac0 <flatcc_json_parser_struct_as_root@@Base+0x2b0>
   2f9c4:	mov	r2, #0
   2f9c8:	strb	r2, [r1, #4]
   2f9cc:	add	ip, r1, #2
   2f9d0:	ldr	lr, [pc, #332]	; 2fb24 <flatcc_json_parser_struct_as_root@@Base+0x314>
   2f9d4:	ldr	r2, [pc, #332]	; 2fb28 <flatcc_json_parser_struct_as_root@@Base+0x318>
   2f9d8:	umull	r0, r2, r2, r3
   2f9dc:	lsr	r2, r2, #5
   2f9e0:	mov	r0, #100	; 0x64
   2f9e4:	mul	r0, r0, r2
   2f9e8:	sub	r0, r3, r0
   2f9ec:	uxth	r0, r0
   2f9f0:	add	r4, lr, r0, lsl #1
   2f9f4:	uxth	r3, r2
   2f9f8:	ldrb	r2, [lr, r0, lsl #1]
   2f9fc:	strb	r2, [r1, #2]
   2fa00:	ldrb	r2, [r4, #1]
   2fa04:	strb	r2, [r1, #3]
   2fa08:	mov	r0, #4
   2fa0c:	ldr	lr, [pc, #272]	; 2fb24 <flatcc_json_parser_struct_as_root@@Base+0x314>
   2fa10:	ldr	r2, [pc, #272]	; 2fb28 <flatcc_json_parser_struct_as_root@@Base+0x318>
   2fa14:	umull	r1, r2, r2, r3
   2fa18:	lsr	r1, r2, #5
   2fa1c:	mov	r2, #100	; 0x64
   2fa20:	mul	r2, r2, r1
   2fa24:	sub	r3, r3, r2
   2fa28:	uxth	r3, r3
   2fa2c:	add	r2, lr, r3, lsl #1
   2fa30:	ldrb	r3, [lr, r3, lsl #1]
   2fa34:	strb	r3, [ip, #-2]
   2fa38:	ldrb	r3, [r2, #1]
   2fa3c:	strb	r3, [ip, #-1]
   2fa40:	pop	{r4, r5, pc}
   2fa44:	cmp	r0, #99	; 0x63
   2fa48:	bls	2faa4 <flatcc_json_parser_struct_as_root@@Base+0x294>
   2fa4c:	add	ip, r1, #3
   2fa50:	mov	r2, #0
   2fa54:	strb	r2, [r1, #3]
   2fa58:	mov	r0, #3
   2fa5c:	sub	r4, ip, #2
   2fa60:	ldr	lr, [pc, #188]	; 2fb24 <flatcc_json_parser_struct_as_root@@Base+0x314>
   2fa64:	ldr	r1, [pc, #188]	; 2fb28 <flatcc_json_parser_struct_as_root@@Base+0x318>
   2fa68:	umull	r2, r1, r1, r3
   2fa6c:	lsr	r1, r1, #5
   2fa70:	mov	r2, #100	; 0x64
   2fa74:	mul	r2, r2, r1
   2fa78:	sub	r3, r3, r2
   2fa7c:	uxth	r2, r3
   2fa80:	add	r5, lr, r2, lsl #1
   2fa84:	uxth	r3, r1
   2fa88:	ldrb	r2, [lr, r2, lsl #1]
   2fa8c:	strb	r2, [ip, #-2]
   2fa90:	ldrb	r2, [r5, #1]
   2fa94:	strb	r2, [ip, #-1]
   2fa98:	add	r3, r3, #48	; 0x30
   2fa9c:	strb	r3, [r4, #-1]
   2faa0:	pop	{r4, r5, pc}
   2faa4:	cmp	r0, #9
   2faa8:	bls	2fb0c <flatcc_json_parser_struct_as_root@@Base+0x2fc>
   2faac:	add	ip, r1, #2
   2fab0:	mov	r2, #0
   2fab4:	strb	r2, [r1, #2]
   2fab8:	mov	r0, #2
   2fabc:	b	2fa0c <flatcc_json_parser_struct_as_root@@Base+0x1fc>
   2fac0:	mov	r2, #0
   2fac4:	strb	r2, [r1, #5]
   2fac8:	add	ip, r1, #3
   2facc:	ldr	lr, [pc, #80]	; 2fb24 <flatcc_json_parser_struct_as_root@@Base+0x314>
   2fad0:	ldr	r2, [pc, #80]	; 2fb28 <flatcc_json_parser_struct_as_root@@Base+0x318>
   2fad4:	umull	r0, r2, r2, r3
   2fad8:	lsr	r2, r2, #5
   2fadc:	mov	r0, #100	; 0x64
   2fae0:	mul	r0, r0, r2
   2fae4:	sub	r0, r3, r0
   2fae8:	uxth	r0, r0
   2faec:	add	r4, lr, r0, lsl #1
   2faf0:	uxth	r3, r2
   2faf4:	ldrb	r2, [lr, r0, lsl #1]
   2faf8:	strb	r2, [r1, #3]
   2fafc:	ldrb	r2, [r4, #1]
   2fb00:	strb	r2, [r1, #4]
   2fb04:	mov	r0, #5
   2fb08:	b	2fa5c <flatcc_json_parser_struct_as_root@@Base+0x24c>
   2fb0c:	add	r4, r1, #1
   2fb10:	mov	r2, #0
   2fb14:	strb	r2, [r1, #1]
   2fb18:	mov	r0, #1
   2fb1c:	b	2fa98 <flatcc_json_parser_struct_as_root@@Base+0x288>
   2fb20:	andeq	r2, r0, pc, lsl #14
   2fb24:	andeq	r1, r4, r0, asr lr
   2fb28:	mvnpl	r8, pc, lsl r5
   2fb2c:	push	{r4, r5, lr}
   2fb30:	mov	r3, r0
   2fb34:	ldr	r2, [pc, #784]	; 2fe4c <flatcc_json_parser_struct_as_root@@Base+0x63c>
   2fb38:	cmp	r0, r2
   2fb3c:	bls	2fd88 <flatcc_json_parser_struct_as_root@@Base+0x578>
   2fb40:	ldr	r2, [pc, #776]	; 2fe50 <flatcc_json_parser_struct_as_root@@Base+0x640>
   2fb44:	cmp	r0, r2
   2fb48:	bls	2fc98 <flatcc_json_parser_struct_as_root@@Base+0x488>
   2fb4c:	ldr	r2, [pc, #768]	; 2fe54 <flatcc_json_parser_struct_as_root@@Base+0x644>
   2fb50:	cmp	r0, r2
   2fb54:	bls	2fc78 <flatcc_json_parser_struct_as_root@@Base+0x468>
   2fb58:	mov	r2, #0
   2fb5c:	strb	r2, [r1, #10]
   2fb60:	add	lr, r1, #8
   2fb64:	ldr	ip, [pc, #748]	; 2fe58 <flatcc_json_parser_struct_as_root@@Base+0x648>
   2fb68:	ldr	r0, [pc, #748]	; 2fe5c <flatcc_json_parser_struct_as_root@@Base+0x64c>
   2fb6c:	umull	r2, r0, r0, r3
   2fb70:	lsr	r0, r0, #5
   2fb74:	mov	r2, #100	; 0x64
   2fb78:	mul	r2, r2, r0
   2fb7c:	sub	r2, r3, r2
   2fb80:	add	r4, ip, r2, lsl #1
   2fb84:	mov	r3, r0
   2fb88:	ldrb	r2, [ip, r2, lsl #1]
   2fb8c:	strb	r2, [r1, #8]
   2fb90:	ldrb	r2, [r4, #1]
   2fb94:	strb	r2, [r1, #9]
   2fb98:	mov	r0, #10
   2fb9c:	sub	ip, lr, #2
   2fba0:	ldr	r4, [pc, #688]	; 2fe58 <flatcc_json_parser_struct_as_root@@Base+0x648>
   2fba4:	ldr	r1, [pc, #688]	; 2fe5c <flatcc_json_parser_struct_as_root@@Base+0x64c>
   2fba8:	umull	r2, r1, r1, r3
   2fbac:	lsr	r1, r1, #5
   2fbb0:	mov	r2, #100	; 0x64
   2fbb4:	mul	r2, r2, r1
   2fbb8:	sub	r2, r3, r2
   2fbbc:	add	r5, r4, r2, lsl #1
   2fbc0:	mov	r3, r1
   2fbc4:	ldrb	r2, [r4, r2, lsl #1]
   2fbc8:	strb	r2, [lr, #-2]
   2fbcc:	ldrb	r2, [r5, #1]
   2fbd0:	strb	r2, [lr, #-1]
   2fbd4:	sub	lr, ip, #2
   2fbd8:	ldr	r4, [pc, #632]	; 2fe58 <flatcc_json_parser_struct_as_root@@Base+0x648>
   2fbdc:	ldr	r1, [pc, #632]	; 2fe5c <flatcc_json_parser_struct_as_root@@Base+0x64c>
   2fbe0:	umull	r2, r1, r1, r3
   2fbe4:	lsr	r1, r1, #5
   2fbe8:	mov	r2, #100	; 0x64
   2fbec:	mul	r2, r2, r1
   2fbf0:	sub	r2, r3, r2
   2fbf4:	add	r5, r4, r2, lsl #1
   2fbf8:	mov	r3, r1
   2fbfc:	ldrb	r2, [r4, r2, lsl #1]
   2fc00:	strb	r2, [ip, #-2]
   2fc04:	ldrb	r2, [r5, #1]
   2fc08:	strb	r2, [ip, #-1]
   2fc0c:	sub	ip, lr, #2
   2fc10:	ldr	r4, [pc, #576]	; 2fe58 <flatcc_json_parser_struct_as_root@@Base+0x648>
   2fc14:	ldr	r1, [pc, #576]	; 2fe5c <flatcc_json_parser_struct_as_root@@Base+0x64c>
   2fc18:	umull	r2, r1, r1, r3
   2fc1c:	lsr	r1, r1, #5
   2fc20:	mov	r2, #100	; 0x64
   2fc24:	mul	r2, r2, r1
   2fc28:	sub	r2, r3, r2
   2fc2c:	add	r5, r4, r2, lsl #1
   2fc30:	mov	r3, r1
   2fc34:	ldrb	r2, [r4, r2, lsl #1]
   2fc38:	strb	r2, [lr, #-2]
   2fc3c:	ldrb	r2, [r5, #1]
   2fc40:	strb	r2, [lr, #-1]
   2fc44:	ldr	lr, [pc, #524]	; 2fe58 <flatcc_json_parser_struct_as_root@@Base+0x648>
   2fc48:	ldr	r2, [pc, #524]	; 2fe5c <flatcc_json_parser_struct_as_root@@Base+0x64c>
   2fc4c:	umull	r1, r2, r2, r3
   2fc50:	lsr	r1, r2, #5
   2fc54:	mov	r2, #100	; 0x64
   2fc58:	mul	r2, r2, r1
   2fc5c:	sub	r3, r3, r2
   2fc60:	add	r2, lr, r3, lsl #1
   2fc64:	ldrb	r3, [lr, r3, lsl #1]
   2fc68:	strb	r3, [ip, #-2]
   2fc6c:	ldrb	r3, [r2, #1]
   2fc70:	strb	r3, [ip, #-1]
   2fc74:	pop	{r4, r5, pc}
   2fc78:	ldr	r2, [pc, #480]	; 2fe60 <flatcc_json_parser_struct_as_root@@Base+0x650>
   2fc7c:	cmp	r0, r2
   2fc80:	bhi	2fddc <flatcc_json_parser_struct_as_root@@Base+0x5cc>
   2fc84:	add	lr, r1, #8
   2fc88:	mov	r2, #0
   2fc8c:	strb	r2, [r1, #8]
   2fc90:	mov	r0, #8
   2fc94:	b	2fb9c <flatcc_json_parser_struct_as_root@@Base+0x38c>
   2fc98:	ldr	r2, [pc, #452]	; 2fe64 <flatcc_json_parser_struct_as_root@@Base+0x654>
   2fc9c:	cmp	r0, r2
   2fca0:	bls	2fd68 <flatcc_json_parser_struct_as_root@@Base+0x558>
   2fca4:	add	ip, r1, #7
   2fca8:	mov	r2, #0
   2fcac:	strb	r2, [r1, #7]
   2fcb0:	mov	r0, #7
   2fcb4:	sub	lr, ip, #2
   2fcb8:	ldr	r4, [pc, #408]	; 2fe58 <flatcc_json_parser_struct_as_root@@Base+0x648>
   2fcbc:	ldr	r1, [pc, #408]	; 2fe5c <flatcc_json_parser_struct_as_root@@Base+0x64c>
   2fcc0:	umull	r2, r1, r1, r3
   2fcc4:	lsr	r1, r1, #5
   2fcc8:	mov	r2, #100	; 0x64
   2fccc:	mul	r2, r2, r1
   2fcd0:	sub	r2, r3, r2
   2fcd4:	add	r5, r4, r2, lsl #1
   2fcd8:	mov	r3, r1
   2fcdc:	ldrb	r2, [r4, r2, lsl #1]
   2fce0:	strb	r2, [ip, #-2]
   2fce4:	ldrb	r2, [r5, #1]
   2fce8:	strb	r2, [ip, #-1]
   2fcec:	sub	ip, lr, #2
   2fcf0:	ldr	r4, [pc, #352]	; 2fe58 <flatcc_json_parser_struct_as_root@@Base+0x648>
   2fcf4:	ldr	r1, [pc, #352]	; 2fe5c <flatcc_json_parser_struct_as_root@@Base+0x64c>
   2fcf8:	umull	r2, r1, r1, r3
   2fcfc:	lsr	r1, r1, #5
   2fd00:	mov	r2, #100	; 0x64
   2fd04:	mul	r2, r2, r1
   2fd08:	sub	r2, r3, r2
   2fd0c:	add	r5, r4, r2, lsl #1
   2fd10:	mov	r3, r1
   2fd14:	ldrb	r2, [r4, r2, lsl #1]
   2fd18:	strb	r2, [lr, #-2]
   2fd1c:	ldrb	r2, [r5, #1]
   2fd20:	strb	r2, [lr, #-1]
   2fd24:	sub	r4, ip, #2
   2fd28:	ldr	lr, [pc, #296]	; 2fe58 <flatcc_json_parser_struct_as_root@@Base+0x648>
   2fd2c:	ldr	r1, [pc, #296]	; 2fe5c <flatcc_json_parser_struct_as_root@@Base+0x64c>
   2fd30:	umull	r2, r1, r1, r3
   2fd34:	lsr	r1, r1, #5
   2fd38:	mov	r2, #100	; 0x64
   2fd3c:	mul	r2, r2, r1
   2fd40:	sub	r2, r3, r2
   2fd44:	add	r5, lr, r2, lsl #1
   2fd48:	mov	r3, r1
   2fd4c:	ldrb	r2, [lr, r2, lsl #1]
   2fd50:	strb	r2, [ip, #-2]
   2fd54:	ldrb	r2, [r5, #1]
   2fd58:	strb	r2, [ip, #-1]
   2fd5c:	add	r3, r3, #48	; 0x30
   2fd60:	strb	r3, [r4, #-1]
   2fd64:	pop	{r4, r5, pc}
   2fd68:	ldr	r2, [pc, #248]	; 2fe68 <flatcc_json_parser_struct_as_root@@Base+0x658>
   2fd6c:	cmp	r0, r2
   2fd70:	bhi	2fe38 <flatcc_json_parser_struct_as_root@@Base+0x628>
   2fd74:	add	lr, r1, #5
   2fd78:	mov	r2, #0
   2fd7c:	strb	r2, [r1, #5]
   2fd80:	mov	r0, #5
   2fd84:	b	2fcec <flatcc_json_parser_struct_as_root@@Base+0x4dc>
   2fd88:	cmp	r0, #99	; 0x63
   2fd8c:	bls	2fdac <flatcc_json_parser_struct_as_root@@Base+0x59c>
   2fd90:	cmp	r0, #1000	; 0x3e8
   2fd94:	bcs	2fdc8 <flatcc_json_parser_struct_as_root@@Base+0x5b8>
   2fd98:	add	ip, r1, #3
   2fd9c:	mov	r2, #0
   2fda0:	strb	r2, [r1, #3]
   2fda4:	mov	r0, #3
   2fda8:	b	2fd24 <flatcc_json_parser_struct_as_root@@Base+0x514>
   2fdac:	cmp	r0, #9
   2fdb0:	bls	2fe24 <flatcc_json_parser_struct_as_root@@Base+0x614>
   2fdb4:	add	ip, r1, #2
   2fdb8:	mov	r2, #0
   2fdbc:	strb	r2, [r1, #2]
   2fdc0:	mov	r0, #2
   2fdc4:	b	2fc44 <flatcc_json_parser_struct_as_root@@Base+0x434>
   2fdc8:	add	lr, r1, #4
   2fdcc:	mov	r2, #0
   2fdd0:	strb	r2, [r1, #4]
   2fdd4:	mov	r0, #4
   2fdd8:	b	2fc0c <flatcc_json_parser_struct_as_root@@Base+0x3fc>
   2fddc:	mov	r2, #0
   2fde0:	strb	r2, [r1, #9]
   2fde4:	add	ip, r1, #7
   2fde8:	ldr	lr, [pc, #104]	; 2fe58 <flatcc_json_parser_struct_as_root@@Base+0x648>
   2fdec:	ldr	r0, [pc, #104]	; 2fe5c <flatcc_json_parser_struct_as_root@@Base+0x64c>
   2fdf0:	umull	r2, r0, r0, r3
   2fdf4:	lsr	r0, r0, #5
   2fdf8:	mov	r2, #100	; 0x64
   2fdfc:	mul	r2, r2, r0
   2fe00:	sub	r2, r3, r2
   2fe04:	add	r4, lr, r2, lsl #1
   2fe08:	mov	r3, r0
   2fe0c:	ldrb	r2, [lr, r2, lsl #1]
   2fe10:	strb	r2, [r1, #7]
   2fe14:	ldrb	r2, [r4, #1]
   2fe18:	strb	r2, [r1, #8]
   2fe1c:	mov	r0, #9
   2fe20:	b	2fcb4 <flatcc_json_parser_struct_as_root@@Base+0x4a4>
   2fe24:	add	r4, r1, #1
   2fe28:	mov	r2, #0
   2fe2c:	strb	r2, [r1, #1]
   2fe30:	mov	r0, #1
   2fe34:	b	2fd5c <flatcc_json_parser_struct_as_root@@Base+0x54c>
   2fe38:	add	ip, r1, #6
   2fe3c:	mov	r2, #0
   2fe40:	strb	r2, [r1, #6]
   2fe44:	mov	r0, #6
   2fe48:	b	2fbd4 <flatcc_json_parser_struct_as_root@@Base+0x3c4>
   2fe4c:	andeq	r2, r0, pc, lsl #14
   2fe50:	addseq	r9, r8, pc, ror r6
   2fe54:	blcc	fe6e2658 <__bss_end__@@Base+0xfe68f30c>
   2fe58:	andeq	r1, r4, r0, asr lr
   2fe5c:	mvnpl	r8, pc, lsl r5
   2fe60:	ldrbeq	lr, [r5, #255]!	; 0xff
   2fe64:	andeq	r4, pc, pc, lsr r2	; <UNPREDICTABLE>
   2fe68:	muleq	r1, pc, r6	; <UNPREDICTABLE>
   2fe6c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fe70:	mov	r4, r0
   2fe74:	mov	r6, r2
   2fe78:	add	r3, pc, #816	; 0x330
   2fe7c:	ldrd	r2, [r3]
   2fe80:	cmp	r1, r3
   2fe84:	cmpeq	r0, r2
   2fe88:	bls	3009c <flatcc_json_parser_struct_as_root@@Base+0x88c>
   2fe8c:	mov	r5, r1
   2fe90:	add	r3, pc, #800	; 0x320
   2fe94:	ldrd	r2, [r3]
   2fe98:	cmp	r1, r3
   2fe9c:	cmpeq	r0, r2
   2fea0:	bls	30110 <flatcc_json_parser_struct_as_root@@Base+0x900>
   2fea4:	add	r3, pc, #788	; 0x314
   2fea8:	ldrd	r2, [r3]
   2feac:	cmp	r1, r3
   2feb0:	cmpeq	r0, r2
   2feb4:	bls	300d4 <flatcc_json_parser_struct_as_root@@Base+0x8c4>
   2feb8:	add	r3, pc, #776	; 0x308
   2febc:	ldrd	r2, [r3]
   2fec0:	cmp	r1, r3
   2fec4:	cmpeq	r0, r2
   2fec8:	bls	300ac <flatcc_json_parser_struct_as_root@@Base+0x89c>
   2fecc:	add	r3, pc, #764	; 0x2fc
   2fed0:	ldrd	r2, [r3]
   2fed4:	cmp	r1, r3
   2fed8:	cmpeq	r0, r2
   2fedc:	bhi	30214 <flatcc_json_parser_struct_as_root@@Base+0xa04>
   2fee0:	mov	r3, #0
   2fee4:	strb	r3, [r6, #19]
   2fee8:	add	r9, r6, #17
   2feec:	ldr	r7, [pc, #788]	; 30208 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   2fef0:	mov	r2, #100	; 0x64
   2fef4:	mov	r3, #0
   2fef8:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   2fefc:	mov	r8, r2
   2ff00:	add	sl, r7, r2, lsl #1
   2ff04:	mov	r2, #100	; 0x64
   2ff08:	mov	r3, #0
   2ff0c:	mov	r0, r4
   2ff10:	mov	r1, r5
   2ff14:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   2ff18:	mov	r4, r0
   2ff1c:	mov	r5, r1
   2ff20:	ldrb	r3, [r7, r8, lsl #1]
   2ff24:	strb	r3, [r6, #17]
   2ff28:	ldrb	r3, [sl, #1]
   2ff2c:	strb	r3, [r6, #18]
   2ff30:	mov	r7, #19
   2ff34:	sub	r8, r9, #2
   2ff38:	ldr	r6, [pc, #712]	; 30208 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   2ff3c:	mov	r2, #100	; 0x64
   2ff40:	mov	r3, #0
   2ff44:	mov	r0, r4
   2ff48:	mov	r1, r5
   2ff4c:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   2ff50:	mov	sl, r2
   2ff54:	add	fp, r6, r2, lsl #1
   2ff58:	mov	r2, #100	; 0x64
   2ff5c:	mov	r3, #0
   2ff60:	mov	r0, r4
   2ff64:	mov	r1, r5
   2ff68:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   2ff6c:	mov	r4, r0
   2ff70:	mov	r5, r1
   2ff74:	ldrb	r3, [r6, sl, lsl #1]
   2ff78:	strb	r3, [r9, #-2]
   2ff7c:	ldrb	r3, [fp, #1]
   2ff80:	strb	r3, [r9, #-1]
   2ff84:	sub	r9, r8, #2
   2ff88:	ldr	r6, [pc, #632]	; 30208 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   2ff8c:	mov	r2, #100	; 0x64
   2ff90:	mov	r3, #0
   2ff94:	mov	r0, r4
   2ff98:	mov	r1, r5
   2ff9c:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   2ffa0:	mov	sl, r2
   2ffa4:	add	fp, r6, r2, lsl #1
   2ffa8:	mov	r2, #100	; 0x64
   2ffac:	mov	r3, #0
   2ffb0:	mov	r0, r4
   2ffb4:	mov	r1, r5
   2ffb8:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   2ffbc:	mov	r4, r0
   2ffc0:	mov	r5, r1
   2ffc4:	ldrb	r3, [r6, sl, lsl #1]
   2ffc8:	strb	r3, [r8, #-2]
   2ffcc:	ldrb	r3, [fp, #1]
   2ffd0:	strb	r3, [r8, #-1]
   2ffd4:	sub	r8, r9, #2
   2ffd8:	ldr	r6, [pc, #552]	; 30208 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   2ffdc:	mov	r2, #100	; 0x64
   2ffe0:	mov	r3, #0
   2ffe4:	mov	r0, r4
   2ffe8:	mov	r1, r5
   2ffec:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   2fff0:	mov	sl, r2
   2fff4:	add	fp, r6, r2, lsl #1
   2fff8:	mov	r2, #100	; 0x64
   2fffc:	mov	r3, #0
   30000:	mov	r0, r4
   30004:	mov	r1, r5
   30008:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   3000c:	mov	r4, r0
   30010:	mov	r5, r1
   30014:	ldrb	r3, [r6, sl, lsl #1]
   30018:	strb	r3, [r9, #-2]
   3001c:	ldrb	r3, [fp, #1]
   30020:	strb	r3, [r9, #-1]
   30024:	ldr	r6, [pc, #476]	; 30208 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   30028:	mov	r2, #100	; 0x64
   3002c:	mov	r3, #0
   30030:	mov	r0, r4
   30034:	mov	r1, r5
   30038:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   3003c:	add	r3, r6, r2, lsl #1
   30040:	ldrb	r2, [r6, r2, lsl #1]
   30044:	strb	r2, [r8, #-2]
   30048:	ldrb	r3, [r3, #1]
   3004c:	strb	r3, [r8, #-1]
   30050:	sub	r6, r8, #3
   30054:	mov	r2, #100	; 0x64
   30058:	mov	r3, #0
   3005c:	mov	r0, r4
   30060:	mov	r1, r5
   30064:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   30068:	mov	r2, #10
   3006c:	mov	r3, #0
   30070:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   30074:	add	r2, r2, #48	; 0x30
   30078:	strb	r2, [r8, #-3]
   3007c:	mov	r2, #1000	; 0x3e8
   30080:	mov	r3, #0
   30084:	mov	r0, r4
   30088:	mov	r1, r5
   3008c:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   30090:	mov	r4, r0
   30094:	mov	r5, r1
   30098:	b	303f8 <flatcc_json_parser_struct_as_root@@Base+0xbe8>
   3009c:	mov	r1, r6
   300a0:	bl	2fb2c <flatcc_json_parser_struct_as_root@@Base+0x31c>
   300a4:	mov	r7, r0
   300a8:	b	304c0 <flatcc_json_parser_struct_as_root@@Base+0xcb0>
   300ac:	add	r3, pc, #292	; 0x124
   300b0:	ldrd	r2, [r3]
   300b4:	cmp	r1, r3
   300b8:	cmpeq	r0, r2
   300bc:	bhi	304c8 <flatcc_json_parser_struct_as_root@@Base+0xcb8>
   300c0:	add	r9, r6, #17
   300c4:	mov	r3, #0
   300c8:	strb	r3, [r6, #17]
   300cc:	mov	r7, #17
   300d0:	b	2ff34 <flatcc_json_parser_struct_as_root@@Base+0x724>
   300d4:	add	r3, pc, #260	; 0x104
   300d8:	ldrd	r2, [r3]
   300dc:	cmp	r1, r3
   300e0:	cmpeq	r0, r2
   300e4:	bhi	304dc <flatcc_json_parser_struct_as_root@@Base+0xccc>
   300e8:	add	r3, pc, #248	; 0xf8
   300ec:	ldrd	r2, [r3]
   300f0:	cmp	r1, r3
   300f4:	cmpeq	r0, r2
   300f8:	bhi	30174 <flatcc_json_parser_struct_as_root@@Base+0x964>
   300fc:	add	r8, r6, #14
   30100:	mov	r3, #0
   30104:	strb	r3, [r6, #14]
   30108:	mov	r7, #14
   3010c:	b	30308 <flatcc_json_parser_struct_as_root@@Base+0xaf8>
   30110:	add	r3, pc, #216	; 0xd8
   30114:	ldrd	r2, [r3]
   30118:	cmp	r1, r3
   3011c:	cmpeq	r0, r2
   30120:	bls	3014c <flatcc_json_parser_struct_as_root@@Base+0x93c>
   30124:	add	r3, pc, #204	; 0xcc
   30128:	ldrd	r2, [r3]
   3012c:	cmp	r1, r3
   30130:	cmpeq	r0, r2
   30134:	bhi	30188 <flatcc_json_parser_struct_as_root@@Base+0x978>
   30138:	add	r9, r6, #12
   3013c:	mov	r3, #0
   30140:	strb	r3, [r6, #12]
   30144:	mov	r7, #12
   30148:	b	30358 <flatcc_json_parser_struct_as_root@@Base+0xb48>
   3014c:	add	r3, pc, #172	; 0xac
   30150:	ldrd	r2, [r3]
   30154:	cmp	r1, r3
   30158:	cmpeq	r0, r2
   3015c:	bhi	3019c <flatcc_json_parser_struct_as_root@@Base+0x98c>
   30160:	add	r8, r6, #10
   30164:	mov	r3, #0
   30168:	strb	r3, [r6, #10]
   3016c:	mov	r7, #10
   30170:	b	303a8 <flatcc_json_parser_struct_as_root@@Base+0xb98>
   30174:	add	r8, r6, #15
   30178:	mov	r3, #0
   3017c:	strb	r3, [r6, #15]
   30180:	mov	r7, #15
   30184:	b	2ff84 <flatcc_json_parser_struct_as_root@@Base+0x774>
   30188:	add	r9, r6, #13
   3018c:	mov	r3, #0
   30190:	strb	r3, [r6, #13]
   30194:	mov	r7, #13
   30198:	b	2ffd4 <flatcc_json_parser_struct_as_root@@Base+0x7c4>
   3019c:	add	r8, r6, #11
   301a0:	mov	r3, #0
   301a4:	strb	r3, [r6, #11]
   301a8:	mov	r7, #11
   301ac:	b	30024 <flatcc_json_parser_struct_as_root@@Base+0x814>
   301b0:	blcc	fe6e29b4 <__bss_end__@@Base+0xfe68f668>
   301b4:	andeq	r0, r0, r0
   301b8:	mrcmi	15, 3, r9, cr2, cr15, {7}
   301bc:	andeq	r0, r0, r8, lsl r9
   301c0:	svcvs	0x00c0ffff
   301c4:	strdeq	r8, [r3], -r2	; <UNPREDICTABLE>
   301c8:			; <UNDEFINED> instruction: 0xa763ffff
   301cc:	stcleq	6, cr11, [r0, #716]!	; 0x2cc
   301d0:	stmibhi	r7!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   301d4:	bhi	ff1f8dec <__bss_end__@@Base+0xff1a5aa0>
   301d8:	stcpl	15, cr15, [r9, #1020]	; 0x3fc
   301dc:	smceq	13400	; 0x3458
   301e0:	strbge	r7, [r6], #4095	; 0xfff
   301e4:	andeq	r8, r3, lr, ror sp
   301e8:	ldrshtne	r3, [sl], #-255	; 0xffffff01
   301ec:	strdeq	r5, [r0], -r3
   301f0:	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}^
   301f4:	andeq	r0, r0, r7, lsl r0
   301f8:	strtle	r0, [r5], #4095	; 0xfff
   301fc:	andeq	r0, r0, r8, ror #1
   30200:	strpl	lr, [fp], #-1023	; 0xfffffc01
   30204:	andeq	r0, r0, r2
   30208:	andeq	r1, r4, r0, asr lr
   3020c:	andeq	r2, r0, r0, lsl r7
   30210:	andeq	r4, pc, r0, asr #4
   30214:	mov	r3, #0
   30218:	strb	r3, [r6, #20]
   3021c:	add	r8, r6, #18
   30220:	ldr	r7, [pc, #-32]	; 30208 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   30224:	mov	r2, #100	; 0x64
   30228:	mov	r3, #0
   3022c:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   30230:	mov	r9, r2
   30234:	add	sl, r7, r2, lsl #1
   30238:	mov	r2, #100	; 0x64
   3023c:	mov	r3, #0
   30240:	mov	r0, r4
   30244:	mov	r1, r5
   30248:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   3024c:	mov	r4, r0
   30250:	mov	r5, r1
   30254:	ldrb	r3, [r7, r9, lsl #1]
   30258:	strb	r3, [r6, #18]
   3025c:	ldrb	r3, [sl, #1]
   30260:	strb	r3, [r6, #19]
   30264:	mov	r7, #20
   30268:	sub	r9, r8, #2
   3026c:	ldr	r6, [pc, #-108]	; 30208 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   30270:	mov	r2, #100	; 0x64
   30274:	mov	r3, #0
   30278:	mov	r0, r4
   3027c:	mov	r1, r5
   30280:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   30284:	mov	sl, r2
   30288:	add	fp, r6, r2, lsl #1
   3028c:	mov	r2, #100	; 0x64
   30290:	mov	r3, #0
   30294:	mov	r0, r4
   30298:	mov	r1, r5
   3029c:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   302a0:	mov	r4, r0
   302a4:	mov	r5, r1
   302a8:	ldrb	r3, [r6, sl, lsl #1]
   302ac:	strb	r3, [r8, #-2]
   302b0:	ldrb	r3, [fp, #1]
   302b4:	strb	r3, [r8, #-1]
   302b8:	sub	r8, r9, #2
   302bc:	ldr	r6, [pc, #-188]	; 30208 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   302c0:	mov	r2, #100	; 0x64
   302c4:	mov	r3, #0
   302c8:	mov	r0, r4
   302cc:	mov	r1, r5
   302d0:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   302d4:	mov	sl, r2
   302d8:	add	fp, r6, r2, lsl #1
   302dc:	mov	r2, #100	; 0x64
   302e0:	mov	r3, #0
   302e4:	mov	r0, r4
   302e8:	mov	r1, r5
   302ec:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   302f0:	mov	r4, r0
   302f4:	mov	r5, r1
   302f8:	ldrb	r3, [r6, sl, lsl #1]
   302fc:	strb	r3, [r9, #-2]
   30300:	ldrb	r3, [fp, #1]
   30304:	strb	r3, [r9, #-1]
   30308:	sub	r9, r8, #2
   3030c:	ldr	r6, [pc, #-268]	; 30208 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   30310:	mov	r2, #100	; 0x64
   30314:	mov	r3, #0
   30318:	mov	r0, r4
   3031c:	mov	r1, r5
   30320:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   30324:	mov	sl, r2
   30328:	add	fp, r6, r2, lsl #1
   3032c:	mov	r2, #100	; 0x64
   30330:	mov	r3, #0
   30334:	mov	r0, r4
   30338:	mov	r1, r5
   3033c:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   30340:	mov	r4, r0
   30344:	mov	r5, r1
   30348:	ldrb	r3, [r6, sl, lsl #1]
   3034c:	strb	r3, [r8, #-2]
   30350:	ldrb	r3, [fp, #1]
   30354:	strb	r3, [r8, #-1]
   30358:	sub	r8, r9, #2
   3035c:	ldr	r6, [pc, #-348]	; 30208 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   30360:	mov	r2, #100	; 0x64
   30364:	mov	r3, #0
   30368:	mov	r0, r4
   3036c:	mov	r1, r5
   30370:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   30374:	mov	sl, r2
   30378:	add	fp, r6, r2, lsl #1
   3037c:	mov	r2, #100	; 0x64
   30380:	mov	r3, #0
   30384:	mov	r0, r4
   30388:	mov	r1, r5
   3038c:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   30390:	mov	r4, r0
   30394:	mov	r5, r1
   30398:	ldrb	r3, [r6, sl, lsl #1]
   3039c:	strb	r3, [r9, #-2]
   303a0:	ldrb	r3, [fp, #1]
   303a4:	strb	r3, [r9, #-1]
   303a8:	sub	r6, r8, #2
   303ac:	ldr	sl, [pc, #-428]	; 30208 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   303b0:	mov	r2, #100	; 0x64
   303b4:	mov	r3, #0
   303b8:	mov	r0, r4
   303bc:	mov	r1, r5
   303c0:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   303c4:	mov	r9, r2
   303c8:	add	fp, sl, r2, lsl #1
   303cc:	mov	r2, #100	; 0x64
   303d0:	mov	r3, #0
   303d4:	mov	r0, r4
   303d8:	mov	r1, r5
   303dc:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   303e0:	mov	r4, r0
   303e4:	mov	r5, r1
   303e8:	ldrb	r3, [sl, r9, lsl #1]
   303ec:	strb	r3, [r8, #-2]
   303f0:	ldrb	r3, [fp, #1]
   303f4:	strb	r3, [r8, #-1]
   303f8:	ldr	r8, [pc, #-504]	; 30208 <flatcc_json_parser_struct_as_root@@Base+0x9f8>
   303fc:	mov	r2, #100	; 0x64
   30400:	mov	r3, #0
   30404:	mov	r0, r4
   30408:	mov	r1, r5
   3040c:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   30410:	add	r3, r8, r2, lsl #1
   30414:	ldrb	r2, [r8, r2, lsl #1]
   30418:	strb	r2, [r6, #-2]
   3041c:	ldrb	r3, [r3, #1]
   30420:	strb	r3, [r6, #-1]
   30424:	mov	r2, #100	; 0x64
   30428:	mov	r3, #0
   3042c:	mov	r0, r4
   30430:	mov	r1, r5
   30434:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   30438:	mov	r2, #100	; 0x64
   3043c:	mov	r3, #0
   30440:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   30444:	add	r3, r8, r2, lsl #1
   30448:	ldrb	r2, [r8, r2, lsl #1]
   3044c:	strb	r2, [r6, #-4]
   30450:	ldrb	r3, [r3, #1]
   30454:	strb	r3, [r6, #-3]
   30458:	ldr	r2, [pc, #-596]	; 3020c <flatcc_json_parser_struct_as_root@@Base+0x9fc>
   3045c:	mov	r3, #0
   30460:	mov	r0, r4
   30464:	mov	r1, r5
   30468:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   3046c:	mov	r2, #100	; 0x64
   30470:	mov	r3, #0
   30474:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   30478:	add	r3, r8, r2, lsl #1
   3047c:	ldrb	r2, [r8, r2, lsl #1]
   30480:	strb	r2, [r6, #-6]
   30484:	ldrb	r3, [r3, #1]
   30488:	strb	r3, [r6, #-5]
   3048c:	ldr	r2, [pc, #-644]	; 30210 <flatcc_json_parser_struct_as_root@@Base+0xa00>
   30490:	mov	r3, #0
   30494:	mov	r0, r4
   30498:	mov	r1, r5
   3049c:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   304a0:	mov	r2, #100	; 0x64
   304a4:	mov	r3, #0
   304a8:	bl	3cef0 <flatcc_json_printer_clear@@Base+0x84c>
   304ac:	add	r3, r8, r2, lsl #1
   304b0:	ldrb	r2, [r8, r2, lsl #1]
   304b4:	strb	r2, [r6, #-8]
   304b8:	ldrb	r3, [r3, #1]
   304bc:	strb	r3, [r6, #-7]
   304c0:	mov	r0, r7
   304c4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   304c8:	add	r8, r6, #18
   304cc:	mov	r3, #0
   304d0:	strb	r3, [r6, #18]
   304d4:	mov	r7, #18
   304d8:	b	30268 <flatcc_json_parser_struct_as_root@@Base+0xa58>
   304dc:	add	r9, r6, #16
   304e0:	mov	r3, #0
   304e4:	strb	r3, [r6, #16]
   304e8:	mov	r7, #16
   304ec:	b	302b8 <flatcc_json_parser_struct_as_root@@Base+0xaa8>
   304f0:	push	{r4, lr}
   304f4:	lsr	r4, r0, #31
   304f8:	cmp	r0, #0
   304fc:	movlt	r3, #45	; 0x2d
   30500:	strblt	r3, [r1]
   30504:	rsblt	r0, r0, #0
   30508:	sxtblt	r0, r0
   3050c:	addlt	r1, r1, #1
   30510:	uxtb	r0, r0
   30514:	bl	2f8e8 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   30518:	add	r0, r4, r0
   3051c:	pop	{r4, pc}
   30520:	push	{r4, lr}
   30524:	lsr	r4, r0, #31
   30528:	cmp	r0, #0
   3052c:	movlt	r3, #45	; 0x2d
   30530:	strblt	r3, [r1]
   30534:	rsblt	r0, r0, #0
   30538:	sxthlt	r0, r0
   3053c:	addlt	r1, r1, #1
   30540:	uxth	r0, r0
   30544:	bl	2f9a8 <flatcc_json_parser_struct_as_root@@Base+0x198>
   30548:	add	r0, r4, r0
   3054c:	pop	{r4, pc}
   30550:	push	{r4, lr}
   30554:	lsr	r4, r0, #31
   30558:	cmp	r0, #0
   3055c:	movlt	r3, #45	; 0x2d
   30560:	strblt	r3, [r1]
   30564:	rsblt	r0, r0, #0
   30568:	addlt	r1, r1, #1
   3056c:	bl	2fb2c <flatcc_json_parser_struct_as_root@@Base+0x31c>
   30570:	add	r0, r4, r0
   30574:	pop	{r4, pc}
   30578:	push	{r4, lr}
   3057c:	lsr	r4, r1, #31
   30580:	cmp	r0, #0
   30584:	sbcs	r3, r1, #0
   30588:	blt	30598 <flatcc_json_parser_struct_as_root@@Base+0xd88>
   3058c:	bl	2fe6c <flatcc_json_parser_struct_as_root@@Base+0x65c>
   30590:	add	r0, r4, r0
   30594:	pop	{r4, pc}
   30598:	mov	r3, #45	; 0x2d
   3059c:	strb	r3, [r2]
   305a0:	rsbs	r0, r0, #0
   305a4:	rsc	r1, r1, #0
   305a8:	add	r2, r2, #1
   305ac:	b	3058c <flatcc_json_parser_struct_as_root@@Base+0xd7c>
   305b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   305b4:	sub	sp, sp, #20
   305b8:	str	r0, [sp]
   305bc:	str	r1, [sp, #4]
   305c0:	strd	r2, [sp, #8]
   305c4:	ldrd	sl, [sp, #64]	; 0x40
   305c8:	ldrd	r4, [sp, #72]	; 0x48
   305cc:	ldrd	r6, [sp, #80]	; 0x50
   305d0:	subs	r2, r2, r6
   305d4:	sbc	r3, r3, r7
   305d8:	cmp	r3, fp
   305dc:	cmpeq	r2, sl
   305e0:	bls	3062c <flatcc_json_parser_struct_as_root@@Base+0xe1c>
   305e4:	mov	lr, r0
   305e8:	mov	ip, r1
   305ec:	mov	r0, r2
   305f0:	mov	r1, r3
   305f4:	ldrd	r2, [sp, #56]	; 0x38
   305f8:	subs	r2, r2, sl
   305fc:	sbc	r3, r3, fp
   30600:	cmp	r5, r3
   30604:	cmpeq	r4, r2
   30608:	bhi	3077c <flatcc_json_parser_struct_as_root@@Base+0xf6c>
   3060c:	ldrd	r6, [sp, #56]	; 0x38
   30610:	subs	r6, r6, r4
   30614:	sbc	r7, r7, r5
   30618:	subs	r6, r6, sl
   3061c:	sbc	r7, r7, fp
   30620:	sub	ip, ip, #1
   30624:	add	ip, lr, ip
   30628:	b	30668 <flatcc_json_parser_struct_as_root@@Base+0xe58>
   3062c:	mov	r2, sl
   30630:	mov	r3, fp
   30634:	b	306b8 <flatcc_json_parser_struct_as_root@@Base+0xea8>
   30638:	ldrb	lr, [ip]
   3063c:	sub	lr, lr, #1
   30640:	strb	lr, [ip]
   30644:	subs	r8, r6, r4
   30648:	sbc	r9, r7, r5
   3064c:	mov	sl, r2
   30650:	mov	fp, r3
   30654:	cmp	r5, r7
   30658:	cmpeq	r4, r6
   3065c:	bhi	30724 <flatcc_json_parser_struct_as_root@@Base+0xf14>
   30660:	mov	r6, r8
   30664:	mov	r7, r9
   30668:	adds	r2, r4, sl
   3066c:	adc	r3, r5, fp
   30670:	cmp	r1, r3
   30674:	cmpeq	r0, r2
   30678:	bhi	30638 <flatcc_json_parser_struct_as_root@@Base+0xe28>
   3067c:	subs	r8, r0, sl
   30680:	sbc	r9, r1, fp
   30684:	subs	r6, r2, r0
   30688:	sbc	r7, r3, r1
   3068c:	cmp	r9, r7
   30690:	cmpeq	r8, r6
   30694:	movcc	r2, sl
   30698:	movcc	r3, fp
   3069c:	bcc	306b8 <flatcc_json_parser_struct_as_root@@Base+0xea8>
   306a0:	ldr	r1, [sp, #4]
   306a4:	sub	r1, r1, #1
   306a8:	ldr	r0, [sp]
   306ac:	ldrb	ip, [r0, r1]
   306b0:	sub	ip, ip, #1
   306b4:	strb	ip, [r0, r1]
   306b8:	ldrd	r0, [sp, #8]
   306bc:	ldrd	r6, [sp, #80]	; 0x50
   306c0:	adds	r0, r0, r6
   306c4:	adc	r1, r1, r7
   306c8:	cmp	r1, r3
   306cc:	cmpeq	r0, r2
   306d0:	bls	30724 <flatcc_json_parser_struct_as_root@@Base+0xf14>
   306d4:	ldrd	r6, [sp, #56]	; 0x38
   306d8:	subs	r6, r6, r2
   306dc:	sbc	r7, r7, r3
   306e0:	cmp	r5, r7
   306e4:	cmpeq	r4, r6
   306e8:	bhi	30724 <flatcc_json_parser_struct_as_root@@Base+0xf14>
   306ec:	adds	r4, r4, r2
   306f0:	adc	r5, r5, r3
   306f4:	cmp	r1, r5
   306f8:	cmpeq	r0, r4
   306fc:	movhi	r0, #0
   30700:	bhi	30774 <flatcc_json_parser_struct_as_root@@Base+0xf64>
   30704:	subs	r6, r0, r2
   30708:	sbc	r7, r1, r3
   3070c:	subs	r4, r4, r0
   30710:	sbc	r5, r5, r1
   30714:	cmp	r7, r5
   30718:	cmpeq	r6, r4
   3071c:	movhi	r0, #0
   30720:	bhi	30774 <flatcc_json_parser_struct_as_root@@Base+0xf64>
   30724:	ldrd	r0, [sp, #80]	; 0x50
   30728:	adds	r0, r0, r0
   3072c:	adc	r1, r1, r1
   30730:	cmp	r1, r3
   30734:	cmpeq	r0, r2
   30738:	movhi	r0, #0
   3073c:	bhi	30774 <flatcc_json_parser_struct_as_root@@Base+0xf64>
   30740:	ldr	ip, [sp, #84]	; 0x54
   30744:	lsl	r1, ip, #2
   30748:	ldr	ip, [sp, #80]	; 0x50
   3074c:	orr	r1, r1, ip, lsr #30
   30750:	lsl	r0, ip, #2
   30754:	ldrd	r4, [sp, #56]	; 0x38
   30758:	subs	r4, r4, r0
   3075c:	sbc	r5, r5, r1
   30760:	mov	r0, r4
   30764:	cmp	r5, r3
   30768:	cmpeq	r4, r2
   3076c:	movcs	r0, #1
   30770:	movcc	r0, #0
   30774:	add	sp, sp, #20
   30778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3077c:	mov	r2, sl
   30780:	mov	r3, fp
   30784:	b	30724 <flatcc_json_parser_struct_as_root@@Base+0xf14>
   30788:	push	{r4, r5, lr}
   3078c:	cmp	r0, #0
   30790:	addlt	r4, r1, #1
   30794:	movlt	r3, #45	; 0x2d
   30798:	strblt	r3, [r1]
   3079c:	rsblt	r0, r0, #0
   307a0:	movge	r4, r1
   307a4:	mov	r2, r4
   307a8:	ldr	r5, [pc, #108]	; 3081c <flatcc_json_parser_struct_as_root@@Base+0x100c>
   307ac:	mvn	lr, #9
   307b0:	smull	r3, ip, r5, r0
   307b4:	asr	r3, r0, #31
   307b8:	rsb	r3, r3, ip, asr #2
   307bc:	mla	r0, lr, r3, r0
   307c0:	add	r0, r0, #48	; 0x30
   307c4:	strb	r0, [r2], #1
   307c8:	mov	r0, r3
   307cc:	cmp	r3, #0
   307d0:	bne	307b0 <flatcc_json_parser_struct_as_root@@Base+0xfa0>
   307d4:	strb	r3, [r2]
   307d8:	mov	r0, r2
   307dc:	sub	r3, r2, r4
   307e0:	add	r3, r3, r3, lsr #31
   307e4:	asr	lr, r3, #1
   307e8:	cmp	lr, #0
   307ec:	ble	30814 <flatcc_json_parser_struct_as_root@@Base+0x1004>
   307f0:	mov	ip, r4
   307f4:	mov	r3, r2
   307f8:	add	r4, r4, lr
   307fc:	ldrb	r2, [ip]
   30800:	ldrb	lr, [r3, #-1]
   30804:	strb	lr, [ip], #1
   30808:	strb	r2, [r3, #-1]!
   3080c:	cmp	ip, r4
   30810:	bne	307fc <flatcc_json_parser_struct_as_root@@Base+0xfec>
   30814:	sub	r0, r0, r1
   30818:	pop	{r4, r5, pc}
   3081c:	strbtvs	r6, [r6], -r7, ror #12
   30820:	lsl	r3, r0, #2
   30824:	ldr	r2, [pc, #68]	; 30870 <flatcc_json_parser_struct_as_root@@Base+0x1060>
   30828:	umull	r2, r3, r2, r3
   3082c:	lsr	r3, r3, #1
   30830:	add	r3, r3, #3
   30834:	bic	r3, r3, #3
   30838:	tst	r1, #128	; 0x80
   3083c:	bne	30868 <flatcc_json_parser_struct_as_root@@Base+0x1058>
   30840:	ldr	r2, [pc, #40]	; 30870 <flatcc_json_parser_struct_as_root@@Base+0x1060>
   30844:	umull	r1, r2, r2, r0
   30848:	lsr	r2, r2, #1
   3084c:	add	r2, r2, r2, lsl #1
   30850:	sub	r2, r0, r2
   30854:	cmp	r2, #1
   30858:	subeq	r3, r3, #2
   3085c:	beq	30868 <flatcc_json_parser_struct_as_root@@Base+0x1058>
   30860:	cmp	r2, #2
   30864:	subeq	r3, r3, #1
   30868:	mov	r0, r3
   3086c:	bx	lr
   30870:	bge	feadb324 <__bss_end__@@Base+0xfea87fd8>
   30874:	push	{r4, r5, r6, r7, r8, r9, lr}
   30878:	mov	r8, r0
   3087c:	ldr	r9, [sp, #28]
   30880:	cmp	r3, #0
   30884:	beq	30a28 <flatcc_json_parser_struct_as_root@@Base+0x1218>
   30888:	ldr	r6, [r3]
   3088c:	bics	r0, r9, #224	; 0xe0
   30890:	beq	30988 <flatcc_json_parser_struct_as_root@@Base+0x1178>
   30894:	cmp	r0, #1
   30898:	bne	309ec <flatcc_json_parser_struct_as_root@@Base+0x11dc>
   3089c:	ldr	r5, [pc, #416]	; 30a44 <flatcc_json_parser_struct_as_root@@Base+0x1234>
   308a0:	cmp	r6, #2
   308a4:	bls	30990 <flatcc_json_parser_struct_as_root@@Base+0x1180>
   308a8:	add	r4, r8, #4
   308ac:	add	ip, r1, #3
   308b0:	mov	r1, ip
   308b4:	mov	r7, r4
   308b8:	ldrb	r0, [ip, #-3]
   308bc:	ldrb	r0, [r5, r0, lsr #2]
   308c0:	strb	r0, [r4, #-4]
   308c4:	ldrb	r0, [ip, #-3]
   308c8:	lsl	r0, r0, #4
   308cc:	and	r0, r0, #48	; 0x30
   308d0:	ldrb	lr, [ip, #-2]
   308d4:	orr	r0, r0, lr, lsr #4
   308d8:	ldrb	r0, [r5, r0]
   308dc:	strb	r0, [r4, #-3]
   308e0:	ldrb	lr, [ip, #-2]
   308e4:	lsl	lr, lr, #2
   308e8:	and	lr, lr, #60	; 0x3c
   308ec:	ldrb	r0, [ip, #-1]
   308f0:	orr	lr, lr, r0, lsr #6
   308f4:	ldrb	r0, [r5, lr]
   308f8:	strb	r0, [r4, #-2]
   308fc:	ldrb	r0, [ip, #-1]
   30900:	and	r0, r0, #63	; 0x3f
   30904:	ldrb	r0, [r5, r0]
   30908:	strb	r0, [r4, #-1]
   3090c:	sub	r6, r6, #3
   30910:	add	r4, r4, #4
   30914:	add	ip, ip, #3
   30918:	cmp	r6, #2
   3091c:	bhi	308b0 <flatcc_json_parser_struct_as_root@@Base+0x10a0>
   30920:	and	r9, r9, #128	; 0x80
   30924:	cmp	r6, #1
   30928:	beq	30998 <flatcc_json_parser_struct_as_root@@Base+0x1188>
   3092c:	cmp	r6, #2
   30930:	bne	30a1c <flatcc_json_parser_struct_as_root@@Base+0x120c>
   30934:	ldrb	r0, [r1]
   30938:	ldrb	r0, [r5, r0, lsr #2]
   3093c:	strb	r0, [r7]
   30940:	ldrb	r0, [r1]
   30944:	lsl	r0, r0, #4
   30948:	and	r0, r0, #48	; 0x30
   3094c:	ldrb	ip, [r1, #1]
   30950:	orr	r0, r0, ip, lsr #4
   30954:	ldrb	r0, [r5, r0]
   30958:	strb	r0, [r7, #1]
   3095c:	ldrb	r1, [r1, #1]
   30960:	lsl	r1, r1, #2
   30964:	and	r1, r1, #60	; 0x3c
   30968:	ldrb	r1, [r5, r1]
   3096c:	strb	r1, [r7, #2]
   30970:	cmp	r9, #0
   30974:	addeq	r7, r7, #3
   30978:	movne	r1, #61	; 0x3d
   3097c:	strbne	r1, [r7, #3]
   30980:	addne	r7, r7, #4
   30984:	b	309d0 <flatcc_json_parser_struct_as_root@@Base+0x11c0>
   30988:	ldr	r5, [pc, #184]	; 30a48 <flatcc_json_parser_struct_as_root@@Base+0x1238>
   3098c:	b	308a0 <flatcc_json_parser_struct_as_root@@Base+0x1090>
   30990:	mov	r7, r8
   30994:	b	30920 <flatcc_json_parser_struct_as_root@@Base+0x1110>
   30998:	ldrb	r0, [r1]
   3099c:	ldrb	r0, [r5, r0, lsr #2]
   309a0:	strb	r0, [r7]
   309a4:	ldrb	r1, [r1]
   309a8:	lsl	r1, r1, #4
   309ac:	and	r1, r1, #48	; 0x30
   309b0:	ldrb	r1, [r5, r1]
   309b4:	strb	r1, [r7, #1]
   309b8:	cmp	r9, #0
   309bc:	addeq	r7, r7, #2
   309c0:	movne	r1, #61	; 0x3d
   309c4:	strbne	r1, [r7, #2]
   309c8:	strbne	r1, [r7, #3]
   309cc:	addne	r7, r7, #4
   309d0:	cmp	r2, #0
   309d4:	moveq	r0, #0
   309d8:	moveq	r6, r0
   309dc:	beq	30a0c <flatcc_json_parser_struct_as_root@@Base+0x11fc>
   309e0:	mov	r0, #0
   309e4:	mov	r6, r0
   309e8:	b	309fc <flatcc_json_parser_struct_as_root@@Base+0x11ec>
   309ec:	mov	r7, r8
   309f0:	mov	r0, #3
   309f4:	cmp	r2, #0
   309f8:	beq	30a0c <flatcc_json_parser_struct_as_root@@Base+0x11fc>
   309fc:	sub	r7, r7, r8
   30a00:	str	r7, [r2]
   30a04:	cmp	r3, #0
   30a08:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   30a0c:	ldr	r2, [r3]
   30a10:	sub	r6, r2, r6
   30a14:	str	r6, [r3]
   30a18:	pop	{r4, r5, r6, r7, r8, r9, pc}
   30a1c:	mov	r0, #0
   30a20:	mov	r6, r0
   30a24:	b	309f4 <flatcc_json_parser_struct_as_root@@Base+0x11e4>
   30a28:	cmp	r2, #0
   30a2c:	movne	r7, r0
   30a30:	movne	r0, #2
   30a34:	movne	r6, #0
   30a38:	bne	309fc <flatcc_json_parser_struct_as_root@@Base+0x11ec>
   30a3c:	mov	r0, #2
   30a40:	pop	{r4, r5, r6, r7, r8, r9, pc}
   30a44:	ldrdeq	r2, [r4], -r0
   30a48:	andeq	r2, r4, ip, lsl #11
   30a4c:	ldr	r3, [r0, #20]
   30a50:	ldr	r2, [r0, #16]
   30a54:	cmp	r3, r2
   30a58:	bcc	30a84 <flatcc_json_parser_struct_as_root@@Base+0x1274>
   30a5c:	ldr	r2, [r0, #36]	; 0x24
   30a60:	cmp	r2, #0
   30a64:	moveq	r2, #3
   30a68:	streq	r2, [r0, #36]	; 0x24
   30a6c:	ldr	r1, [r0]
   30a70:	sub	r3, r3, r1
   30a74:	ldr	r2, [r0, #12]
   30a78:	add	r3, r2, r3
   30a7c:	str	r3, [r0, #12]
   30a80:	str	r1, [r0, #20]
   30a84:	ldr	r3, [r0, #20]
   30a88:	mov	r2, #0
   30a8c:	strb	r2, [r3]
   30a90:	bx	lr
   30a94:	sub	sp, sp, #8
   30a98:	push	{r4, r5, r6, lr}
   30a9c:	add	r1, sp, #12
   30aa0:	stmib	r1, {r2, r3}
   30aa4:	ldrd	r2, [sp, #16]
   30aa8:	ldr	r6, [sp, #24]
   30aac:	orrs	r1, r2, r3
   30ab0:	beq	30b60 <flatcc_json_parser_struct_as_root@@Base+0x1350>
   30ab4:	mov	lr, r0
   30ab8:	mov	r0, #0
   30abc:	ldr	r1, [pc, #176]	; 30b74 <flatcc_json_parser_struct_as_root@@Base+0x1364>
   30ac0:	and	r0, r0, r2
   30ac4:	and	r1, r1, r3
   30ac8:	orrs	r1, r0, r1
   30acc:	subeq	ip, r6, #10
   30ad0:	bne	30b08 <flatcc_json_parser_struct_as_root@@Base+0x12f8>
   30ad4:	lsl	r1, r3, #10
   30ad8:	orr	r1, r1, r2, lsr #22
   30adc:	lsl	r0, r2, #10
   30ae0:	mov	r2, r0
   30ae4:	mov	r3, r1
   30ae8:	mov	r6, ip
   30aec:	mov	r0, #0
   30af0:	ldr	r1, [pc, #124]	; 30b74 <flatcc_json_parser_struct_as_root@@Base+0x1364>
   30af4:	and	r0, r0, r2
   30af8:	and	r1, r1, r3
   30afc:	sub	ip, ip, #10
   30b00:	orrs	r1, r0, r1
   30b04:	beq	30ad4 <flatcc_json_parser_struct_as_root@@Base+0x12c4>
   30b08:	cmp	r2, #0
   30b0c:	sbcs	r1, r3, #0
   30b10:	blt	30b3c <flatcc_json_parser_struct_as_root@@Base+0x132c>
   30b14:	sub	r1, r6, #1
   30b18:	adds	r4, r2, r2
   30b1c:	adc	r5, r3, r3
   30b20:	mov	r2, r4
   30b24:	mov	r3, r5
   30b28:	mov	r6, r1
   30b2c:	sub	r1, r1, #1
   30b30:	cmp	r4, #0
   30b34:	sbcs	r0, r5, #0
   30b38:	bge	30b18 <flatcc_json_parser_struct_as_root@@Base+0x1308>
   30b3c:	strd	r2, [sp, #16]
   30b40:	str	r6, [sp, #24]
   30b44:	add	r3, sp, #12
   30b48:	ldmib	r3, {r0, r1, r2, r3}
   30b4c:	stm	lr, {r0, r1, r2, r3}
   30b50:	mov	r0, lr
   30b54:	pop	{r4, r5, r6, lr}
   30b58:	add	sp, sp, #8
   30b5c:	bx	lr
   30b60:	ldr	r3, [pc, #16]	; 30b78 <flatcc_json_parser_struct_as_root@@Base+0x1368>
   30b64:	mov	r2, #260	; 0x104
   30b68:	ldr	r1, [pc, #12]	; 30b7c <flatcc_json_parser_struct_as_root@@Base+0x136c>
   30b6c:	ldr	r0, [pc, #12]	; 30b80 <flatcc_json_parser_struct_as_root@@Base+0x1370>
   30b70:	bl	14618 <__assert_fail@plt>
   30b74:			; <UNDEFINED> instruction: 0xffc00000
   30b78:	andeq	r1, r4, ip, lsl pc
   30b7c:	andeq	r1, r4, r0, lsr #20
   30b80:	andeq	r1, r4, r8, ror sl
   30b84:	push	{r4, r5, r6, r7, r8, lr}
   30b88:	mov	r5, r0
   30b8c:	mov	r7, r1
   30b90:	mov	r6, r2
   30b94:	ldr	r2, [r0, #20]
   30b98:	ldr	r3, [r0, #16]
   30b9c:	cmp	r2, r3
   30ba0:	bcs	30c24 <flatcc_json_parser_struct_as_root@@Base+0x1414>
   30ba4:	ldr	r4, [r5, #16]
   30ba8:	ldr	r3, [r5, #20]
   30bac:	sub	r4, r4, r3
   30bb0:	cmp	r4, r6
   30bb4:	bcs	30c04 <flatcc_json_parser_struct_as_root@@Base+0x13f4>
   30bb8:	mov	r8, #0
   30bbc:	mov	r2, r4
   30bc0:	mov	r1, r7
   30bc4:	ldr	r0, [r5, #20]
   30bc8:	bl	1454c <memcpy@plt>
   30bcc:	ldr	r3, [r5, #20]
   30bd0:	add	r3, r3, r4
   30bd4:	str	r3, [r5, #20]
   30bd8:	add	r7, r7, r4
   30bdc:	sub	r6, r6, r4
   30be0:	ldr	r3, [r5, #44]	; 0x2c
   30be4:	mov	r1, r8
   30be8:	mov	r0, r5
   30bec:	blx	r3
   30bf0:	ldr	r4, [r5, #16]
   30bf4:	ldr	r3, [r5, #20]
   30bf8:	sub	r4, r4, r3
   30bfc:	cmp	r6, r4
   30c00:	bhi	30bbc <flatcc_json_parser_struct_as_root@@Base+0x13ac>
   30c04:	mov	r2, r6
   30c08:	mov	r1, r7
   30c0c:	ldr	r0, [r5, #20]
   30c10:	bl	1454c <memcpy@plt>
   30c14:	ldr	r3, [r5, #20]
   30c18:	add	r6, r3, r6
   30c1c:	str	r6, [r5, #20]
   30c20:	pop	{r4, r5, r6, r7, r8, pc}
   30c24:	ldr	r3, [r0, #44]	; 0x2c
   30c28:	mov	r1, #0
   30c2c:	blx	r3
   30c30:	b	30ba4 <flatcc_json_parser_struct_as_root@@Base+0x1394>
   30c34:	cmp	r0, #0
   30c38:	ldr	r3, [pc, #40]	; 30c68 <flatcc_json_parser_struct_as_root@@Base+0x1458>
   30c3c:	ldrne	r0, [r3, #228]	; 0xe4
   30c40:	strne	r0, [r1]
   30c44:	ldrbne	r3, [r3, #232]	; 0xe8
   30c48:	strbne	r3, [r1, #4]
   30c4c:	movne	r0, #4
   30c50:	ldreq	r0, [r3, #236]	; 0xec
   30c54:	streq	r0, [r1]
   30c58:	ldrheq	r3, [r3, #240]	; 0xf0
   30c5c:	strheq	r3, [r1, #4]
   30c60:	moveq	r0, #5
   30c64:	bx	lr
   30c68:	andeq	r1, r4, r0, asr lr
   30c6c:	push	{r4, r5, r6, r7, r8, lr}
   30c70:	mov	r4, r0
   30c74:	mov	r6, r1
   30c78:	ldr	r2, [r0, #20]
   30c7c:	ldr	r3, [r0, #16]
   30c80:	cmp	r2, r3
   30c84:	bcs	30d08 <flatcc_json_parser_struct_as_root@@Base+0x14f8>
   30c88:	ldr	r5, [r4, #16]
   30c8c:	ldr	r3, [r4, #20]
   30c90:	sub	r5, r5, r3
   30c94:	cmp	r5, r6
   30c98:	bcs	30ce8 <flatcc_json_parser_struct_as_root@@Base+0x14d8>
   30c9c:	mov	r8, #32
   30ca0:	mov	r7, #0
   30ca4:	mov	r2, r5
   30ca8:	mov	r1, r8
   30cac:	ldr	r0, [r4, #20]
   30cb0:	bl	145c4 <memset@plt>
   30cb4:	ldr	r3, [r4, #20]
   30cb8:	add	r3, r3, r5
   30cbc:	str	r3, [r4, #20]
   30cc0:	sub	r6, r6, r5
   30cc4:	ldr	r3, [r4, #44]	; 0x2c
   30cc8:	mov	r1, r7
   30ccc:	mov	r0, r4
   30cd0:	blx	r3
   30cd4:	ldr	r5, [r4, #16]
   30cd8:	ldr	r3, [r4, #20]
   30cdc:	sub	r5, r5, r3
   30ce0:	cmp	r6, r5
   30ce4:	bhi	30ca4 <flatcc_json_parser_struct_as_root@@Base+0x1494>
   30ce8:	mov	r2, r6
   30cec:	mov	r1, #32
   30cf0:	ldr	r0, [r4, #20]
   30cf4:	bl	145c4 <memset@plt>
   30cf8:	ldr	r3, [r4, #20]
   30cfc:	add	r6, r3, r6
   30d00:	str	r6, [r4, #20]
   30d04:	pop	{r4, r5, r6, r7, r8, pc}
   30d08:	ldr	r3, [r0, #44]	; 0x2c
   30d0c:	mov	r1, #0
   30d10:	blx	r3
   30d14:	b	30c88 <flatcc_json_parser_struct_as_root@@Base+0x1478>
   30d18:	push	{r4, r5, r6, lr}
   30d1c:	mov	r4, r0
   30d20:	ldrb	r3, [r0, #25]
   30d24:	ldr	r5, [r0, #32]
   30d28:	mul	r5, r5, r3
   30d2c:	ldr	r0, [r0, #20]
   30d30:	add	r3, r0, r5
   30d34:	ldr	r2, [r4, #16]
   30d38:	cmp	r2, r3
   30d3c:	bcc	30d5c <flatcc_json_parser_struct_as_root@@Base+0x154c>
   30d40:	mov	r2, r5
   30d44:	mov	r1, #32
   30d48:	bl	145c4 <memset@plt>
   30d4c:	ldr	r3, [r4, #20]
   30d50:	add	r5, r3, r5
   30d54:	str	r5, [r4, #20]
   30d58:	pop	{r4, r5, r6, pc}
   30d5c:	mov	r1, r5
   30d60:	mov	r0, r4
   30d64:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   30d68:	pop	{r4, r5, r6, pc}
   30d6c:	push	{r4, r5, lr}
   30d70:	sub	sp, sp, #12
   30d74:	mov	r5, r0
   30d78:	mov	r0, #0
   30d7c:	str	r0, [sp, #4]
   30d80:	cmp	r1, r0
   30d84:	cmpne	r2, #7
   30d88:	bls	30dc8 <flatcc_json_parser_struct_as_root@@Base+0x15b8>
   30d8c:	mov	r4, r1
   30d90:	cmp	r3, #0
   30d94:	beq	30dbc <flatcc_json_parser_struct_as_root@@Base+0x15ac>
   30d98:	mov	r2, #4
   30d9c:	mov	r1, r3
   30da0:	add	r0, sp, r2
   30da4:	bl	145d0 <strncpy@plt>
   30da8:	ldr	r3, [sp, #4]
   30dac:	ldr	r2, [r4, #4]
   30db0:	cmp	r2, r3
   30db4:	cmpne	r3, #0
   30db8:	bne	30dec <flatcc_json_parser_struct_as_root@@Base+0x15dc>
   30dbc:	mov	r0, #1
   30dc0:	add	sp, sp, #12
   30dc4:	pop	{r4, r5, pc}
   30dc8:	ldr	r3, [r5, #36]	; 0x24
   30dcc:	cmp	r3, r0
   30dd0:	moveq	r3, #1
   30dd4:	streq	r3, [r5, #36]	; 0x24
   30dd8:	ldr	r3, [pc, #48]	; 30e10 <flatcc_json_parser_struct_as_root@@Base+0x1600>
   30ddc:	ldr	r2, [pc, #48]	; 30e14 <flatcc_json_parser_struct_as_root@@Base+0x1604>
   30de0:	ldr	r1, [pc, #48]	; 30e18 <flatcc_json_parser_struct_as_root@@Base+0x1608>
   30de4:	ldr	r0, [pc, #48]	; 30e1c <flatcc_json_parser_struct_as_root@@Base+0x160c>
   30de8:	bl	14618 <__assert_fail@plt>
   30dec:	ldr	r3, [r5, #36]	; 0x24
   30df0:	cmp	r3, #0
   30df4:	moveq	r3, #1
   30df8:	streq	r3, [r5, #36]	; 0x24
   30dfc:	ldr	r3, [pc, #12]	; 30e10 <flatcc_json_parser_struct_as_root@@Base+0x1600>
   30e00:	ldr	r2, [pc, #24]	; 30e20 <flatcc_json_parser_struct_as_root@@Base+0x1610>
   30e04:	ldr	r1, [pc, #12]	; 30e18 <flatcc_json_parser_struct_as_root@@Base+0x1608>
   30e08:	ldr	r0, [pc, #20]	; 30e24 <flatcc_json_parser_struct_as_root@@Base+0x1614>
   30e0c:	bl	14618 <__assert_fail@plt>
   30e10:	andeq	r1, r4, r4, asr #30
   30e14:	strdeq	r0, [r0], -fp
   30e18:	andeq	r2, r4, r4, lsl r6
   30e1c:	andeq	r2, r4, r0, ror #12
   30e20:	andeq	r0, r0, r4, lsl #8
   30e24:	andeq	r2, r4, r0, lsl #13
   30e28:	push	{r4, r5, r6, lr}
   30e2c:	mov	r4, r0
   30e30:	cmp	r1, #0
   30e34:	bne	30e48 <flatcc_json_parser_struct_as_root@@Base+0x1638>
   30e38:	ldr	r3, [r0, #20]
   30e3c:	ldr	r5, [r0, #16]
   30e40:	cmp	r3, r5
   30e44:	bcs	30e88 <flatcc_json_parser_struct_as_root@@Base+0x1678>
   30e48:	ldr	r0, [r4]
   30e4c:	ldr	r5, [r4, #20]
   30e50:	sub	r5, r5, r0
   30e54:	ldr	r3, [r4, #40]	; 0x28
   30e58:	mov	r2, #1
   30e5c:	mov	r1, r5
   30e60:	bl	14570 <fwrite@plt>
   30e64:	ldr	r3, [r4]
   30e68:	str	r3, [r4, #20]
   30e6c:	ldr	r3, [r4, #12]
   30e70:	add	r5, r3, r5
   30e74:	str	r5, [r4, #12]
   30e78:	ldr	r3, [r4, #20]
   30e7c:	mov	r2, #0
   30e80:	strb	r2, [r3]
   30e84:	pop	{r4, r5, r6, pc}
   30e88:	sub	r5, r3, r5
   30e8c:	ldr	r3, [r0, #40]	; 0x28
   30e90:	mov	r2, #1
   30e94:	ldr	r1, [r0, #8]
   30e98:	ldr	r0, [r0]
   30e9c:	bl	14570 <fwrite@plt>
   30ea0:	ldr	r0, [r4]
   30ea4:	ldr	r1, [r4, #8]
   30ea8:	mov	r2, r5
   30eac:	add	r1, r0, r1
   30eb0:	bl	1454c <memcpy@plt>
   30eb4:	ldr	r3, [r4]
   30eb8:	add	r3, r3, r5
   30ebc:	str	r3, [r4, #20]
   30ec0:	ldr	r3, [r4, #12]
   30ec4:	ldr	r2, [r4, #8]
   30ec8:	add	r3, r3, r2
   30ecc:	str	r3, [r4, #12]
   30ed0:	b	30e78 <flatcc_json_parser_struct_as_root@@Base+0x1668>
   30ed4:	push	{r4, r5, r6, lr}
   30ed8:	ldr	r3, [r0, #20]
   30edc:	ldr	r5, [r0]
   30ee0:	mov	r2, #0
   30ee4:	strb	r2, [r3]
   30ee8:	ldr	r1, [r0, #20]
   30eec:	ldr	r2, [r0, #16]
   30ef0:	cmp	r1, r2
   30ef4:	popcc	{r4, r5, r6, pc}
   30ef8:	mov	r4, r0
   30efc:	sub	r5, r3, r5
   30f00:	ldr	r1, [r0, #4]
   30f04:	lsl	r1, r1, #1
   30f08:	ldr	r0, [r0]
   30f0c:	bl	14564 <realloc@plt>
   30f10:	cmp	r0, #0
   30f14:	beq	30f50 <flatcc_json_parser_struct_as_root@@Base+0x1740>
   30f18:	ldr	r3, [r4, #4]
   30f1c:	lsl	r3, r3, #1
   30f20:	str	r3, [r4, #4]
   30f24:	sub	r3, r3, #64	; 0x40
   30f28:	str	r3, [r4, #8]
   30f2c:	str	r0, [r4]
   30f30:	add	r5, r0, r5
   30f34:	str	r5, [r4, #20]
   30f38:	add	r0, r0, r3
   30f3c:	str	r0, [r4, #16]
   30f40:	ldr	r3, [r4, #20]
   30f44:	mov	r2, #0
   30f48:	strb	r2, [r3]
   30f4c:	pop	{r4, r5, r6, pc}
   30f50:	ldr	r3, [r4, #36]	; 0x24
   30f54:	cmp	r3, #0
   30f58:	moveq	r3, #3
   30f5c:	streq	r3, [r4, #36]	; 0x24
   30f60:	ldr	r3, [r4, #12]
   30f64:	add	r3, r3, r5
   30f68:	str	r3, [r4, #12]
   30f6c:	ldr	r3, [r4]
   30f70:	str	r3, [r4, #20]
   30f74:	b	30f40 <flatcc_json_parser_struct_as_root@@Base+0x1730>
   30f78:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30f7c:	mov	r8, r0
   30f80:	mov	r7, r2
   30f84:	ldr	r3, [r0, #20]
   30f88:	add	r2, r3, #1
   30f8c:	str	r2, [r0, #20]
   30f90:	mov	r2, #34	; 0x22
   30f94:	strb	r2, [r3]
   30f98:	mov	r9, #92	; 0x5c
   30f9c:	mov	fp, #102	; 0x66
   30fa0:	mov	sl, #48	; 0x30
   30fa4:	b	3100c <flatcc_json_parser_struct_as_root@@Base+0x17fc>
   30fa8:	mov	r5, r1
   30fac:	b	31060 <flatcc_json_parser_struct_as_root@@Base+0x1850>
   30fb0:	mov	r2, r6
   30fb4:	mov	r0, r8
   30fb8:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   30fbc:	b	3108c <flatcc_json_parser_struct_as_root@@Base+0x187c>
   30fc0:	cmp	r4, #34	; 0x22
   30fc4:	beq	30ff0 <flatcc_json_parser_struct_as_root@@Base+0x17e0>
   30fc8:	cmp	r4, #92	; 0x5c
   30fcc:	beq	31148 <flatcc_json_parser_struct_as_root@@Base+0x1938>
   30fd0:	cmp	r4, #13
   30fd4:	bne	310c8 <flatcc_json_parser_struct_as_root@@Base+0x18b8>
   30fd8:	ldr	r3, [r8, #20]
   30fdc:	add	r2, r3, #1
   30fe0:	str	r2, [r8, #20]
   30fe4:	mov	r2, #114	; 0x72
   30fe8:	strb	r2, [r3]
   30fec:	b	31004 <flatcc_json_parser_struct_as_root@@Base+0x17f4>
   30ff0:	ldr	r3, [r8, #20]
   30ff4:	add	r2, r3, #1
   30ff8:	str	r2, [r8, #20]
   30ffc:	mov	r2, #34	; 0x22
   31000:	strb	r2, [r3]
   31004:	sub	r7, r7, #1
   31008:	add	r1, r5, #1
   3100c:	ldrb	r4, [r1]
   31010:	cmp	r4, #34	; 0x22
   31014:	cmpne	r4, #31
   31018:	movhi	r3, #1
   3101c:	movls	r3, #0
   31020:	cmp	r4, #92	; 0x5c
   31024:	moveq	r3, #0
   31028:	andne	r3, r3, #1
   3102c:	cmp	r3, #0
   31030:	beq	30fa8 <flatcc_json_parser_struct_as_root@@Base+0x1798>
   31034:	mov	r5, r1
   31038:	ldrb	r4, [r5, #1]!
   3103c:	cmp	r4, #34	; 0x22
   31040:	cmpne	r4, #31
   31044:	movhi	r3, #1
   31048:	movls	r3, #0
   3104c:	cmp	r4, #92	; 0x5c
   31050:	moveq	r3, #0
   31054:	andne	r3, r3, #1
   31058:	cmp	r3, #0
   3105c:	bne	31038 <flatcc_json_parser_struct_as_root@@Base+0x1828>
   31060:	sub	r6, r5, r1
   31064:	ldr	r0, [r8, #20]
   31068:	add	r3, r0, r6
   3106c:	ldr	r2, [r8, #16]
   31070:	cmp	r2, r3
   31074:	bls	30fb0 <flatcc_json_parser_struct_as_root@@Base+0x17a0>
   31078:	mov	r2, r6
   3107c:	bl	1454c <memcpy@plt>
   31080:	ldr	r3, [r8, #20]
   31084:	add	r3, r3, r6
   31088:	str	r3, [r8, #20]
   3108c:	subs	r7, r7, r6
   31090:	beq	311b8 <flatcc_json_parser_struct_as_root@@Base+0x19a8>
   31094:	ldr	r3, [r8, #20]
   31098:	add	r2, r3, #1
   3109c:	str	r2, [r8, #20]
   310a0:	strb	r9, [r3]
   310a4:	cmp	r4, #12
   310a8:	beq	31174 <flatcc_json_parser_struct_as_root@@Base+0x1964>
   310ac:	bhi	30fc0 <flatcc_json_parser_struct_as_root@@Base+0x17b0>
   310b0:	cmp	r4, #9
   310b4:	beq	3115c <flatcc_json_parser_struct_as_root@@Base+0x194c>
   310b8:	cmp	r4, #10
   310bc:	beq	31188 <flatcc_json_parser_struct_as_root@@Base+0x1978>
   310c0:	cmp	r4, #8
   310c4:	beq	311a0 <flatcc_json_parser_struct_as_root@@Base+0x1990>
   310c8:	ldr	r3, [r8, #20]
   310cc:	add	r2, r3, #1
   310d0:	str	r2, [r8, #20]
   310d4:	mov	r2, #117	; 0x75
   310d8:	strb	r2, [r3]
   310dc:	ldr	r3, [r8, #20]
   310e0:	add	r2, r3, #1
   310e4:	str	r2, [r8, #20]
   310e8:	strb	sl, [r3]
   310ec:	ldr	r3, [r8, #20]
   310f0:	add	r2, r3, #1
   310f4:	str	r2, [r8, #20]
   310f8:	strb	sl, [r3]
   310fc:	lsr	r1, r4, #4
   31100:	cmp	r1, #9
   31104:	movls	r3, #48	; 0x30
   31108:	movhi	r3, #87	; 0x57
   3110c:	ldr	r2, [r8, #20]
   31110:	add	r0, r2, #1
   31114:	str	r0, [r8, #20]
   31118:	add	r3, r3, r1
   3111c:	strb	r3, [r2]
   31120:	and	r4, r4, #15
   31124:	cmp	r4, #9
   31128:	movls	r3, #48	; 0x30
   3112c:	movhi	r3, #87	; 0x57
   31130:	ldr	r2, [r8, #20]
   31134:	add	r1, r2, #1
   31138:	str	r1, [r8, #20]
   3113c:	add	r4, r3, r4
   31140:	strb	r4, [r2]
   31144:	b	31004 <flatcc_json_parser_struct_as_root@@Base+0x17f4>
   31148:	ldr	r3, [r8, #20]
   3114c:	add	r2, r3, #1
   31150:	str	r2, [r8, #20]
   31154:	strb	r9, [r3]
   31158:	b	31004 <flatcc_json_parser_struct_as_root@@Base+0x17f4>
   3115c:	ldr	r3, [r8, #20]
   31160:	add	r2, r3, #1
   31164:	str	r2, [r8, #20]
   31168:	mov	r2, #116	; 0x74
   3116c:	strb	r2, [r3]
   31170:	b	31004 <flatcc_json_parser_struct_as_root@@Base+0x17f4>
   31174:	ldr	r3, [r8, #20]
   31178:	add	r2, r3, #1
   3117c:	str	r2, [r8, #20]
   31180:	strb	fp, [r3]
   31184:	b	31004 <flatcc_json_parser_struct_as_root@@Base+0x17f4>
   31188:	ldr	r3, [r8, #20]
   3118c:	add	r2, r3, #1
   31190:	str	r2, [r8, #20]
   31194:	mov	r2, #110	; 0x6e
   31198:	strb	r2, [r3]
   3119c:	b	31004 <flatcc_json_parser_struct_as_root@@Base+0x17f4>
   311a0:	ldr	r3, [r8, #20]
   311a4:	add	r2, r3, #1
   311a8:	str	r2, [r8, #20]
   311ac:	mov	r2, #98	; 0x62
   311b0:	strb	r2, [r3]
   311b4:	b	31004 <flatcc_json_parser_struct_as_root@@Base+0x17f4>
   311b8:	ldr	r3, [r8, #20]
   311bc:	add	r2, r3, #1
   311c0:	str	r2, [r8, #20]
   311c4:	mov	r2, #34	; 0x22
   311c8:	strb	r2, [r3]
   311cc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   311d0:	push	{r4, r5, r6, r7, r8, lr}
   311d4:	mov	r4, r0
   311d8:	mov	r6, r1
   311dc:	mov	r5, r2
   311e0:	ldrb	r3, [r0, #25]
   311e4:	cmp	r3, #0
   311e8:	bne	31240 <flatcc_json_parser_struct_as_root@@Base+0x1a30>
   311ec:	ldr	r2, [r0, #20]
   311f0:	ldr	r3, [r0, #16]
   311f4:	cmp	r2, r3
   311f8:	bcs	312a0 <flatcc_json_parser_struct_as_root@@Base+0x1a90>
   311fc:	ldr	r3, [r4, #20]
   31200:	mov	r2, #34	; 0x22
   31204:	strb	r2, [r3]
   31208:	ldrb	r3, [r4, #26]
   3120c:	ldr	r0, [r4, #20]
   31210:	cmp	r3, #0
   31214:	addeq	r0, r0, #1
   31218:	str	r0, [r4, #20]
   3121c:	add	r3, r0, r5
   31220:	ldr	r2, [r4, #16]
   31224:	cmp	r2, r3
   31228:	bhi	312b0 <flatcc_json_parser_struct_as_root@@Base+0x1aa0>
   3122c:	mov	r2, r5
   31230:	mov	r1, r6
   31234:	mov	r0, r4
   31238:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3123c:	b	312c8 <flatcc_json_parser_struct_as_root@@Base+0x1ab8>
   31240:	ldr	r3, [r0, #20]
   31244:	add	r2, r3, #1
   31248:	str	r2, [r0, #20]
   3124c:	mov	r2, #10
   31250:	strb	r2, [r3]
   31254:	ldrb	r3, [r0, #25]
   31258:	ldr	r7, [r0, #32]
   3125c:	mul	r7, r7, r3
   31260:	ldr	r0, [r0, #20]
   31264:	add	r3, r0, r7
   31268:	ldr	r2, [r4, #16]
   3126c:	cmp	r2, r3
   31270:	bcc	31290 <flatcc_json_parser_struct_as_root@@Base+0x1a80>
   31274:	mov	r2, r7
   31278:	mov	r1, #32
   3127c:	bl	145c4 <memset@plt>
   31280:	ldr	r3, [r4, #20]
   31284:	add	r7, r3, r7
   31288:	str	r7, [r4, #20]
   3128c:	b	311fc <flatcc_json_parser_struct_as_root@@Base+0x19ec>
   31290:	mov	r1, r7
   31294:	mov	r0, r4
   31298:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3129c:	b	311fc <flatcc_json_parser_struct_as_root@@Base+0x19ec>
   312a0:	ldr	r3, [r0, #44]	; 0x2c
   312a4:	mov	r1, #0
   312a8:	blx	r3
   312ac:	b	311fc <flatcc_json_parser_struct_as_root@@Base+0x19ec>
   312b0:	mov	r2, r5
   312b4:	mov	r1, r6
   312b8:	bl	1454c <memcpy@plt>
   312bc:	ldr	r3, [r4, #20]
   312c0:	add	r5, r3, r5
   312c4:	str	r5, [r4, #20]
   312c8:	ldr	r3, [r4, #20]
   312cc:	mov	r2, #34	; 0x22
   312d0:	strb	r2, [r3]
   312d4:	ldrb	r3, [r4, #26]
   312d8:	clz	r3, r3
   312dc:	lsr	r3, r3, #5
   312e0:	ldr	r1, [r4, #20]
   312e4:	add	r2, r1, r3
   312e8:	add	r2, r2, #1
   312ec:	str	r2, [r4, #20]
   312f0:	mov	r2, #58	; 0x3a
   312f4:	strb	r2, [r1, r3]
   312f8:	ldr	r3, [r4, #20]
   312fc:	mov	r2, #32
   31300:	strb	r2, [r3]
   31304:	ldrb	r2, [r4, #25]
   31308:	ldr	r3, [r4, #20]
   3130c:	cmp	r2, #0
   31310:	addne	r3, r3, #1
   31314:	str	r3, [r4, #20]
   31318:	pop	{r4, r5, r6, r7, r8, pc}
   3131c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31320:	sub	sp, sp, #212	; 0xd4
   31324:	vmov	r2, r3, d0
   31328:	vstr	d0, [sp, #80]	; 0x50
   3132c:	mov	r5, r3
   31330:	subs	r3, r0, #0
   31334:	str	r3, [sp, #112]	; 0x70
   31338:	beq	319c8 <flatcc_json_parser_struct_as_root@@Base+0x21b8>
   3133c:	vmov	r4, s0
   31340:	adds	r0, r4, r4
   31344:	adc	r1, r5, r5
   31348:	mov	r2, #0
   3134c:	ldr	r3, [pc, #1188]	; 317f8 <flatcc_json_parser_struct_as_root@@Base+0x1fe8>
   31350:	cmp	r1, r3
   31354:	cmpeq	r0, r2
   31358:	bhi	319dc <flatcc_json_parser_struct_as_root@@Base+0x21cc>
   3135c:	cmp	r4, #0
   31360:	sbcs	r3, r5, #0
   31364:	blt	319f4 <flatcc_json_parser_struct_as_root@@Base+0x21e4>
   31368:	ldr	r3, [sp, #112]	; 0x70
   3136c:	str	r3, [sp, #76]	; 0x4c
   31370:	orrs	r3, r4, r5
   31374:	beq	31a1c <flatcc_json_parser_struct_as_root@@Base+0x220c>
   31378:	mov	r2, #0
   3137c:	ldr	r3, [pc, #1144]	; 317fc <flatcc_json_parser_struct_as_root@@Base+0x1fec>
   31380:	cmp	r5, r3
   31384:	cmpeq	r4, r2
   31388:	beq	31a40 <flatcc_json_parser_struct_as_root@@Base+0x2230>
   3138c:	ldrd	r8, [sp, #80]	; 0x50
   31390:	mov	sl, #0
   31394:	ldr	fp, [pc, #1120]	; 317fc <flatcc_json_parser_struct_as_root@@Base+0x1fec>
   31398:	and	sl, sl, r8
   3139c:	and	fp, fp, r9
   313a0:	orrs	r3, sl, fp
   313a4:	beq	31a70 <flatcc_json_parser_struct_as_root@@Base+0x2260>
   313a8:	mvn	r6, #0
   313ac:	ldr	r7, [pc, #1124]	; 31818 <flatcc_json_parser_struct_as_root@@Base+0x2008>
   313b0:	and	r6, r6, r8
   313b4:	and	r7, r7, r9
   313b8:	adds	r6, r6, #0
   313bc:	adc	r7, r7, #1048576	; 0x100000
   313c0:	lsl	r5, r9, #1
   313c4:	lsr	r5, r5, #21
   313c8:	sub	r5, r5, #1072	; 0x430
   313cc:	sub	r5, r5, #3
   313d0:	strd	r6, [sp, #144]	; 0x90
   313d4:	str	r5, [sp, #152]	; 0x98
   313d8:	add	r3, sp, #152	; 0x98
   313dc:	ldm	r3, {r0, r1}
   313e0:	stm	sp, {r0, r1}
   313e4:	add	r3, sp, #144	; 0x90
   313e8:	ldm	r3, {r2, r3}
   313ec:	add	r0, sp, #160	; 0xa0
   313f0:	bl	30a94 <flatcc_json_parser_struct_as_root@@Base+0x1284>
   313f4:	ldrd	r2, [sp, #160]	; 0xa0
   313f8:	strd	r2, [sp, #40]	; 0x28
   313fc:	ldr	r3, [sp, #168]	; 0xa8
   31400:	str	r3, [sp, #56]	; 0x38
   31404:	adds	r2, r6, r6
   31408:	adc	r3, r7, r7
   3140c:	strd	r2, [sp, #32]
   31410:	adds	r2, r2, #1
   31414:	adc	r3, r3, #0
   31418:	strd	r2, [sp, #176]	; 0xb0
   3141c:	sub	r4, r5, #1
   31420:	str	r4, [sp, #184]	; 0xb8
   31424:	add	r3, sp, #184	; 0xb8
   31428:	ldm	r3, {r0, r1}
   3142c:	stm	sp, {r0, r1}
   31430:	add	r3, sp, #176	; 0xb0
   31434:	ldm	r3, {r2, r3}
   31438:	add	r0, sp, #192	; 0xc0
   3143c:	bl	30a94 <flatcc_json_parser_struct_as_root@@Base+0x1284>
   31440:	ldr	ip, [sp, #200]	; 0xc8
   31444:	vldr	d7, [sp, #80]	; 0x50
   31448:	vcmpe.f64	d7, #0.0
   3144c:	vmrs	APSR_nzcv, fpscr
   31450:	ble	31a88 <flatcc_json_parser_struct_as_root@@Base+0x2278>
   31454:	vldr	d7, [pc, #908]	; 317e8 <flatcc_json_parser_struct_as_root@@Base+0x1fd8>
   31458:	vldr	d6, [sp, #80]	; 0x50
   3145c:	vcmpe.f64	d6, d7
   31460:	vmrs	APSR_nzcv, fpscr
   31464:	bhi	31a88 <flatcc_json_parser_struct_as_root@@Base+0x2278>
   31468:	mvn	r2, #0
   3146c:	ldr	r3, [pc, #932]	; 31818 <flatcc_json_parser_struct_as_root@@Base+0x2008>
   31470:	and	r2, r2, r8
   31474:	and	r3, r3, r9
   31478:	orrs	r3, r2, r3
   3147c:	moveq	r3, #1
   31480:	movne	r3, #0
   31484:	orrs	r2, sl, fp
   31488:	moveq	r3, #0
   3148c:	andne	r3, r3, #1
   31490:	cmp	r3, #0
   31494:	bne	31a9c <flatcc_json_parser_struct_as_root@@Base+0x228c>
   31498:	ldrd	r2, [sp, #32]
   3149c:	subs	r2, r2, #1
   314a0:	sbc	r3, r3, #0
   314a4:	sub	r4, r4, ip
   314a8:	sub	r0, r4, #32
   314ac:	rsb	r1, r4, #32
   314b0:	lsl	fp, r3, r4
   314b4:	orr	fp, fp, r2, lsl r0
   314b8:	orr	fp, fp, r2, lsr r1
   314bc:	lsl	sl, r2, r4
   314c0:	mvn	r3, #60	; 0x3c
   314c4:	ldr	r2, [sp, #56]	; 0x38
   314c8:	sub	r3, r3, r2
   314cc:	vmov	s15, r3
   314d0:	vcvt.f64.s32	d7, s15
   314d4:	vldr	d6, [pc, #788]	; 317f0 <flatcc_json_parser_struct_as_root@@Base+0x1fe0>
   314d8:	vmul.f64	d7, d7, d6
   314dc:	vcvt.s32.f64	s13, d7
   314e0:	vmov	r3, s13
   314e4:	vcmpe.f64	d7, #0.0
   314e8:	vmrs	APSR_nzcv, fpscr
   314ec:	bmi	31504 <flatcc_json_parser_struct_as_root@@Base+0x1cf4>
   314f0:	vcvt.f64.s32	d6, s13
   314f4:	vsub.f64	d7, d7, d6
   314f8:	vcmp.f64	d7, #0.0
   314fc:	vmrs	APSR_nzcv, fpscr
   31500:	addne	r3, r3, #1
   31504:	add	r3, r3, #344	; 0x158
   31508:	adds	r2, r3, #3
   3150c:	addmi	r2, r3, #10
   31510:	asr	r2, r2, #3
   31514:	add	r2, r2, #1
   31518:	ldr	r1, [pc, #736]	; 31800 <flatcc_json_parser_struct_as_root@@Base+0x1ff0>
   3151c:	lsl	r2, r2, #4
   31520:	add	r3, r1, r2
   31524:	ldrd	r8, [r1, r2]
   31528:	ldrsh	lr, [r3, #8]
   3152c:	ldrsh	r3, [r3, #10]
   31530:	str	r3, [sp, #132]	; 0x84
   31534:	ldrd	r0, [sp, #40]	; 0x28
   31538:	mov	r4, r0
   3153c:	mov	r5, #0
   31540:	mov	r2, r8
   31544:	mov	r3, #0
   31548:	umull	r6, r7, r0, r9
   3154c:	strd	r6, [sp, #32]
   31550:	mla	r6, r9, r5, r7
   31554:	str	r6, [sp, #36]	; 0x24
   31558:	umull	r6, r7, r1, r8
   3155c:	mla	r7, r1, r3, r7
   31560:	mul	r1, r0, r3
   31564:	mla	r1, r8, r5, r1
   31568:	umull	r4, r5, r4, r8
   3156c:	add	r5, r1, r5
   31570:	mov	r1, #0
   31574:	adds	r0, r5, r6
   31578:	adc	r1, r1, #0
   3157c:	adds	r0, r0, #-2147483648	; 0x80000000
   31580:	adc	r1, r1, #0
   31584:	ldr	r5, [sp, #32]
   31588:	adds	r0, r0, r5
   3158c:	adc	r1, r1, #0
   31590:	str	r1, [sp, #48]	; 0x30
   31594:	mov	r1, #0
   31598:	str	r1, [sp, #52]	; 0x34
   3159c:	ldr	r0, [sp, #36]	; 0x24
   315a0:	adds	r0, r0, r7
   315a4:	adc	r1, r1, r1
   315a8:	ldr	r4, [sp, #44]	; 0x2c
   315ac:	umlal	r0, r1, r9, r4
   315b0:	ldrd	r4, [sp, #48]	; 0x30
   315b4:	adds	r4, r4, r0
   315b8:	adc	r5, r5, r1
   315bc:	strd	r4, [sp, #120]	; 0x78
   315c0:	ldr	r1, [sp, #56]	; 0x38
   315c4:	add	r8, r1, lr
   315c8:	add	r1, r8, #64	; 0x40
   315cc:	str	r1, [sp, #128]	; 0x80
   315d0:	mov	r0, sl
   315d4:	mov	r1, #0
   315d8:	umull	r4, r5, sl, r9
   315dc:	strd	r4, [sp, #40]	; 0x28
   315e0:	mla	r4, r9, r1, r5
   315e4:	str	r4, [sp, #44]	; 0x2c
   315e8:	umull	r4, r5, fp, r2
   315ec:	strd	r4, [sp, #48]	; 0x30
   315f0:	mla	r4, fp, r3, r5
   315f4:	str	r4, [sp, #52]	; 0x34
   315f8:	add	ip, ip, lr
   315fc:	add	ip, ip, #64	; 0x40
   31600:	str	ip, [sp, #116]	; 0x74
   31604:	ldrd	r6, [sp, #192]	; 0xc0
   31608:	mov	r7, #0
   3160c:	umull	r4, r5, r6, r9
   31610:	strd	r4, [sp, #64]	; 0x40
   31614:	mla	ip, r9, r7, r5
   31618:	str	ip, [sp, #68]	; 0x44
   3161c:	ldr	ip, [sp, #196]	; 0xc4
   31620:	umull	r4, r5, ip, r2
   31624:	strd	r4, [sp, #32]
   31628:	mla	ip, ip, r3, r5
   3162c:	str	ip, [sp, #36]	; 0x24
   31630:	mul	ip, sl, r3
   31634:	mla	ip, r2, r1, ip
   31638:	umull	r0, r1, r0, r2
   3163c:	add	r1, ip, r1
   31640:	mov	r4, r1
   31644:	mov	r5, #0
   31648:	ldr	r1, [sp, #48]	; 0x30
   3164c:	adds	r4, r4, r1
   31650:	adc	r5, r5, #0
   31654:	adds	r4, r4, #-2147483648	; 0x80000000
   31658:	adc	r5, r5, #0
   3165c:	ldr	r1, [sp, #40]	; 0x28
   31660:	adds	r4, r4, r1
   31664:	adc	r5, r5, #0
   31668:	str	r5, [sp, #56]	; 0x38
   3166c:	mov	r1, #0
   31670:	str	r1, [sp, #60]	; 0x3c
   31674:	umull	r4, r5, fp, r9
   31678:	subs	r4, r4, #1
   3167c:	sbc	r5, r5, #0
   31680:	ldr	r0, [sp, #52]	; 0x34
   31684:	mov	r1, #0
   31688:	adds	r0, r0, r4
   3168c:	adc	r1, r1, r5
   31690:	ldr	r4, [sp, #44]	; 0x2c
   31694:	mov	r5, #0
   31698:	adds	r4, r4, r0
   3169c:	adc	r5, r5, r1
   316a0:	ldrd	r0, [sp, #56]	; 0x38
   316a4:	adds	r0, r0, r4
   316a8:	adc	r1, r1, r5
   316ac:	mov	r4, r0
   316b0:	mov	r5, r1
   316b4:	mul	r1, r6, r3
   316b8:	mla	r1, r2, r7, r1
   316bc:	umull	r2, r3, r6, r2
   316c0:	add	r3, r1, r3
   316c4:	mov	r0, r3
   316c8:	mov	r1, #0
   316cc:	ldr	r3, [sp, #32]
   316d0:	adds	r0, r0, r3
   316d4:	adc	r1, r1, #0
   316d8:	adds	r0, r0, #-2147483648	; 0x80000000
   316dc:	adc	r1, r1, #0
   316e0:	ldrd	sl, [sp, #64]	; 0x40
   316e4:	adds	r0, r0, sl
   316e8:	adc	r1, r1, #0
   316ec:	mov	r6, r1
   316f0:	mov	r7, #0
   316f4:	ldr	r3, [sp, #196]	; 0xc4
   316f8:	umull	r0, r1, r3, r9
   316fc:	adds	r0, r0, #1
   31700:	adc	r1, r1, #0
   31704:	ldr	r2, [sp, #36]	; 0x24
   31708:	adds	r2, r2, r0
   3170c:	adc	r3, r7, r1
   31710:	adds	r2, r2, fp
   31714:	adc	r3, r3, r7
   31718:	adds	r0, r6, r2
   3171c:	adc	r1, r7, r3
   31720:	strd	r0, [sp, #104]	; 0x68
   31724:	subs	sl, r0, r4
   31728:	sbc	fp, r1, r5
   3172c:	cmp	r5, r1
   31730:	cmpeq	r4, r0
   31734:	bhi	31ab8 <flatcc_json_parser_struct_as_root@@Base+0x22a8>
   31738:	mvn	r9, #63	; 0x3f
   3173c:	sub	r9, r9, r8
   31740:	mov	r3, #1
   31744:	sub	r2, r9, #32
   31748:	rsb	r1, r9, #32
   3174c:	lsl	r0, r3, r2
   31750:	orr	r0, r0, r3, lsr r1
   31754:	str	r0, [sp, #100]	; 0x64
   31758:	lsl	r3, r3, r9
   3175c:	str	r3, [sp, #96]	; 0x60
   31760:	ldrd	r6, [sp, #104]	; 0x68
   31764:	lsr	r5, r6, r9
   31768:	orr	r5, r5, r7, lsl r1
   3176c:	mov	r0, r6
   31770:	mov	r1, r7
   31774:	orr	r5, r5, r7, lsr r2
   31778:	ldrd	r2, [sp, #96]	; 0x60
   3177c:	subs	r2, r2, #1
   31780:	sbc	r3, r3, #0
   31784:	mov	r6, r2
   31788:	mov	r7, r3
   3178c:	strd	r6, [sp, #88]	; 0x58
   31790:	mov	r2, r0
   31794:	mov	r3, r1
   31798:	and	r2, r2, r6
   3179c:	and	r3, r3, r7
   317a0:	strd	r2, [sp, #40]	; 0x28
   317a4:	add	r8, r8, #129	; 0x81
   317a8:	add	r3, r8, r8, lsl #4
   317ac:	add	r8, r8, r3, lsl #3
   317b0:	add	r8, r8, r8, lsl #3
   317b4:	asr	r8, r8, #12
   317b8:	add	r6, r8, #1
   317bc:	ldr	r3, [pc, #64]	; 31804 <flatcc_json_parser_struct_as_root@@Base+0x1ff4>
   317c0:	add	r3, r3, r6, lsl #2
   317c4:	ldr	r3, [r3, #1700]	; 0x6a4
   317c8:	cmp	r5, r3
   317cc:	movcc	r6, r8
   317d0:	ldr	r3, [pc, #44]	; 31804 <flatcc_json_parser_struct_as_root@@Base+0x1ff4>
   317d4:	add	r3, r3, r6, lsl #2
   317d8:	ldr	r4, [r3, #1700]	; 0x6a4
   317dc:	cmp	r6, #0
   317e0:	ble	31c4c <flatcc_json_parser_struct_as_root@@Base+0x243c>
   317e4:	b	3183c <flatcc_json_parser_struct_as_root@@Base+0x202c>
   317e8:			; <UNDEFINED> instruction: 0xffffffff
   317ec:	svcvc	0x00efffff
   317f0:			; <UNDEFINED> instruction: 0x509f79fe
   317f4:	svccc	0x00d34413
   317f8:			; <UNDEFINED> instruction: 0xffe00000
   317fc:	svcvc	0x00f00000	; IMB
   31800:	andeq	r1, r4, r0, ror pc
   31804:	andeq	r1, r4, r0, asr lr
   31808:	stclgt	12, cr12, [ip], {205}	; 0xcd
   3180c:	andeq	r1, r4, r4, asr pc
   31810:	strdeq	r2, [r4], -r4
   31814:	strdeq	r2, [r4], -r8
   31818:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   3181c:			; <UNDEFINED> instruction: 0xfffffbce
   31820:	andeq	r1, r4, r8, ror #30
   31824:	muleq	r4, ip, r6
   31828:	andeq	r2, r4, r8, lsl #14
   3182c:	andeq	r2, r4, r0, ror #9
   31830:	andeq	r1, r4, r0, lsr #20
   31834:	andeq	r2, r4, r0, lsr r7
   31838:	andeq	r2, r4, ip, asr #14
   3183c:	mov	r1, r4
   31840:	mov	r0, r5
   31844:	bl	3c6dc <flatcc_json_printer_clear@@Base+0x38>
   31848:	add	r0, r0, #48	; 0x30
   3184c:	ldr	r3, [sp, #76]	; 0x4c
   31850:	strb	r0, [r3]
   31854:	mov	r1, r4
   31858:	mov	r0, r5
   3185c:	bl	3c8c8 <flatcc_json_printer_clear@@Base+0x224>
   31860:	mov	r5, r1
   31864:	sub	r6, r6, #1
   31868:	sub	r0, r9, #32
   3186c:	rsb	r1, r9, #32
   31870:	lsl	r3, r5, r0
   31874:	orr	r3, r3, r5, lsr r1
   31878:	lsl	r2, r5, r9
   3187c:	ldrd	r0, [sp, #40]	; 0x28
   31880:	adds	r0, r0, r2
   31884:	adc	r1, r1, r3
   31888:	mov	r2, r0
   3188c:	mov	r3, r1
   31890:	strd	r2, [sp, #32]
   31894:	cmp	r1, fp
   31898:	cmpeq	r0, sl
   3189c:	bcc	31acc <flatcc_json_parser_struct_as_root@@Base+0x22bc>
   318a0:	ldr	r8, [sp, #76]	; 0x4c
   318a4:	mov	r7, #1
   318a8:	sub	r3, r9, #32
   318ac:	str	r3, [sp, #56]	; 0x38
   318b0:	rsb	r3, r9, #32
   318b4:	str	r3, [sp, #64]	; 0x40
   318b8:	str	r8, [sp, #32]
   318bc:	str	r9, [sp, #48]	; 0x30
   318c0:	ldr	r3, [pc, #-192]	; 31808 <flatcc_json_parser_struct_as_root@@Base+0x1ff8>
   318c4:	umull	r3, r4, r3, r4
   318c8:	lsr	r4, r4, #3
   318cc:	cmp	r6, #0
   318d0:	beq	31ae8 <flatcc_json_parser_struct_as_root@@Base+0x22d8>
   318d4:	mov	r1, r4
   318d8:	mov	r0, r5
   318dc:	bl	3c6dc <flatcc_json_printer_clear@@Base+0x38>
   318e0:	add	r0, r0, #48	; 0x30
   318e4:	ldr	r3, [sp, #32]
   318e8:	strb	r0, [r3, #1]!
   318ec:	str	r3, [sp, #32]
   318f0:	add	r7, r7, #1
   318f4:	mov	r1, r4
   318f8:	mov	r0, r5
   318fc:	bl	3c8c8 <flatcc_json_printer_clear@@Base+0x224>
   31900:	mov	r5, r1
   31904:	sub	r6, r6, #1
   31908:	ldr	r3, [sp, #56]	; 0x38
   3190c:	lsl	r9, r1, r3
   31910:	ldr	r3, [sp, #64]	; 0x40
   31914:	orr	r9, r9, r1, lsr r3
   31918:	ldr	r3, [sp, #48]	; 0x30
   3191c:	lsl	r8, r1, r3
   31920:	ldrd	r2, [sp, #40]	; 0x28
   31924:	adds	r2, r2, r8
   31928:	adc	r3, r3, r9
   3192c:	cmp	r3, fp
   31930:	cmpeq	r2, sl
   31934:	bcs	318c0 <flatcc_json_parser_struct_as_root@@Base+0x20b0>
   31938:	ldr	r9, [sp, #48]	; 0x30
   3193c:	strd	r2, [sp, #32]
   31940:	ldrd	r0, [sp, #104]	; 0x68
   31944:	ldrd	r2, [sp, #120]	; 0x78
   31948:	subs	r0, r0, r2
   3194c:	sbc	r1, r1, r3
   31950:	strd	r0, [sp, #40]	; 0x28
   31954:	ldrd	r0, [sp, #104]	; 0x68
   31958:	cmp	r1, r3
   3195c:	cmpeq	r0, r2
   31960:	movcc	ip, #1
   31964:	movcs	ip, #0
   31968:	ldr	r3, [sp, #116]	; 0x74
   3196c:	ldr	r2, [sp, #128]	; 0x80
   31970:	cmp	r3, r2
   31974:	orrne	ip, ip, #1
   31978:	cmp	ip, #0
   3197c:	bne	31ad4 <flatcc_json_parser_struct_as_root@@Base+0x22c4>
   31980:	mov	r0, #1
   31984:	mov	r1, #0
   31988:	strd	r0, [sp, #24]
   3198c:	sub	r1, r9, #32
   31990:	rsb	r0, r9, #32
   31994:	lsl	r1, r4, r1
   31998:	orr	r1, r1, r4, lsr r0
   3199c:	lsl	r4, r4, r9
   319a0:	str	r4, [sp, #16]
   319a4:	str	r1, [sp, #20]
   319a8:	ldrd	r2, [sp, #32]
   319ac:	strd	r2, [sp, #8]
   319b0:	strd	sl, [sp]
   319b4:	ldrd	r2, [sp, #40]	; 0x28
   319b8:	mov	r1, r7
   319bc:	ldr	r0, [sp, #76]	; 0x4c
   319c0:	bl	305b0 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   319c4:	b	31bdc <flatcc_json_parser_struct_as_root@@Base+0x23cc>
   319c8:	ldr	r3, [pc, #-452]	; 3180c <flatcc_json_parser_struct_as_root@@Base+0x1ffc>
   319cc:	mov	r2, #189	; 0xbd
   319d0:	ldr	r1, [pc, #-436]	; 31824 <flatcc_json_parser_struct_as_root@@Base+0x2014>
   319d4:	ldr	r0, [pc, #-460]	; 31810 <flatcc_json_parser_struct_as_root@@Base+0x2000>
   319d8:	bl	14618 <__assert_fail@plt>
   319dc:	vmov	r3, s0
   319e0:	mov	r2, r5
   319e4:	ldr	r1, [pc, #-472]	; 31814 <flatcc_json_parser_struct_as_root@@Base+0x2004>
   319e8:	ldr	r0, [sp, #112]	; 0x70
   319ec:	bl	14600 <sprintf@plt>
   319f0:	b	31a38 <flatcc_json_parser_struct_as_root@@Base+0x2228>
   319f4:	ldr	r2, [sp, #112]	; 0x70
   319f8:	add	r3, r2, #1
   319fc:	str	r3, [sp, #76]	; 0x4c
   31a00:	mov	r3, #45	; 0x2d
   31a04:	strb	r3, [r2]
   31a08:	vldr	d7, [sp, #80]	; 0x50
   31a0c:	vneg.f64	d7, d7
   31a10:	vstr	d7, [sp, #80]	; 0x50
   31a14:	add	r5, r5, #-2147483648	; 0x80000000
   31a18:	b	31370 <flatcc_json_parser_struct_as_root@@Base+0x1b60>
   31a1c:	mov	r3, #48	; 0x30
   31a20:	ldr	r0, [sp, #76]	; 0x4c
   31a24:	strb	r3, [r0]
   31a28:	mov	r3, #0
   31a2c:	strb	r3, [r0, #1]!
   31a30:	ldr	r3, [sp, #112]	; 0x70
   31a34:	sub	r0, r0, r3
   31a38:	add	sp, sp, #212	; 0xd4
   31a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31a40:	mov	r3, #105	; 0x69
   31a44:	ldr	r0, [sp, #76]	; 0x4c
   31a48:	strb	r3, [r0]
   31a4c:	mov	r3, #110	; 0x6e
   31a50:	strb	r3, [r0, #1]
   31a54:	mov	r3, #102	; 0x66
   31a58:	strb	r3, [r0, #2]
   31a5c:	mov	r3, #0
   31a60:	strb	r3, [r0, #3]!
   31a64:	ldr	r3, [sp, #112]	; 0x70
   31a68:	sub	r0, r0, r3
   31a6c:	b	31a38 <flatcc_json_parser_struct_as_root@@Base+0x2228>
   31a70:	mvn	r6, #0
   31a74:	ldr	r7, [pc, #-612]	; 31818 <flatcc_json_parser_struct_as_root@@Base+0x2008>
   31a78:	and	r6, r6, r8
   31a7c:	and	r7, r7, r9
   31a80:	ldr	r5, [pc, #-620]	; 3181c <flatcc_json_parser_struct_as_root@@Base+0x200c>
   31a84:	b	313d0 <flatcc_json_parser_struct_as_root@@Base+0x1bc0>
   31a88:	ldr	r3, [pc, #-624]	; 31820 <flatcc_json_parser_struct_as_root@@Base+0x2010>
   31a8c:	mov	r2, #138	; 0x8a
   31a90:	ldr	r1, [pc, #-628]	; 31824 <flatcc_json_parser_struct_as_root@@Base+0x2014>
   31a94:	ldr	r0, [pc, #-628]	; 31828 <flatcc_json_parser_struct_as_root@@Base+0x2018>
   31a98:	bl	14618 <__assert_fail@plt>
   31a9c:	lsl	r3, r7, #2
   31aa0:	orr	r3, r3, r6, lsr #30
   31aa4:	lsl	r2, r6, #2
   31aa8:	subs	r2, r2, #1
   31aac:	sbc	r3, r3, #0
   31ab0:	sub	r4, r5, #2
   31ab4:	b	314a4 <flatcc_json_parser_struct_as_root@@Base+0x1c94>
   31ab8:	ldr	r3, [pc, #-660]	; 3182c <flatcc_json_parser_struct_as_root@@Base+0x201c>
   31abc:	mov	r2, #239	; 0xef
   31ac0:	ldr	r1, [pc, #-664]	; 31830 <flatcc_json_parser_struct_as_root@@Base+0x2020>
   31ac4:	ldr	r0, [pc, #-664]	; 31834 <flatcc_json_parser_struct_as_root@@Base+0x2024>
   31ac8:	bl	14618 <__assert_fail@plt>
   31acc:	mov	r7, #1
   31ad0:	b	31940 <flatcc_json_parser_struct_as_root@@Base+0x2130>
   31ad4:	ldr	r3, [pc, #-688]	; 3182c <flatcc_json_parser_struct_as_root@@Base+0x201c>
   31ad8:	mov	r2, #239	; 0xef
   31adc:	ldr	r1, [pc, #-692]	; 31830 <flatcc_json_parser_struct_as_root@@Base+0x2020>
   31ae0:	ldr	r0, [pc, #-692]	; 31834 <flatcc_json_parser_struct_as_root@@Base+0x2024>
   31ae4:	bl	14618 <__assert_fail@plt>
   31ae8:	ldr	r9, [sp, #48]	; 0x30
   31aec:	ldr	r3, [sp, #76]	; 0x4c
   31af0:	add	lr, r3, r7
   31af4:	mov	r0, #1
   31af8:	mov	r1, #0
   31afc:	mov	ip, #10
   31b00:	rsb	r5, r9, #32
   31b04:	sub	r4, r9, #32
   31b08:	str	r4, [sp, #32]
   31b0c:	mov	r4, r9
   31b10:	ldrd	r8, [sp, #40]	; 0x28
   31b14:	umull	r2, r3, r8, ip
   31b18:	mla	r3, ip, r9, r3
   31b1c:	mul	r8, ip, r1
   31b20:	umull	r0, r1, r0, ip
   31b24:	add	r1, r8, r1
   31b28:	mul	r8, ip, fp
   31b2c:	umull	sl, fp, sl, ip
   31b30:	add	fp, r8, fp
   31b34:	lsr	r8, r2, r4
   31b38:	orr	r8, r8, r3, lsl r5
   31b3c:	ldr	r9, [sp, #32]
   31b40:	orr	r8, r8, r3, lsr r9
   31b44:	add	r8, r8, #48	; 0x30
   31b48:	strb	r8, [lr], #1
   31b4c:	add	r7, r7, #1
   31b50:	ldrd	r8, [sp, #88]	; 0x58
   31b54:	and	r8, r8, r2
   31b58:	and	r9, r9, r3
   31b5c:	sub	r6, r6, #1
   31b60:	cmp	fp, r9
   31b64:	cmpeq	sl, r8
   31b68:	bls	31b14 <flatcc_json_parser_struct_as_root@@Base+0x2304>
   31b6c:	strd	r8, [sp, #40]	; 0x28
   31b70:	ldrd	r4, [sp, #104]	; 0x68
   31b74:	ldrd	r8, [sp, #120]	; 0x78
   31b78:	subs	r2, r4, r8
   31b7c:	sbc	r3, r5, r9
   31b80:	cmp	r5, r9
   31b84:	cmpeq	r4, r8
   31b88:	movcc	ip, #1
   31b8c:	movcs	ip, #0
   31b90:	ldr	lr, [sp, #116]	; 0x74
   31b94:	ldr	r4, [sp, #128]	; 0x80
   31b98:	cmp	lr, r4
   31b9c:	orrne	ip, ip, #1
   31ba0:	cmp	ip, #0
   31ba4:	bne	31c54 <flatcc_json_parser_struct_as_root@@Base+0x2444>
   31ba8:	mul	ip, r0, r3
   31bac:	mla	ip, r2, r1, ip
   31bb0:	umull	r2, r3, r0, r2
   31bb4:	add	r3, ip, r3
   31bb8:	strd	r0, [sp, #24]
   31bbc:	ldrd	r0, [sp, #96]	; 0x60
   31bc0:	strd	r0, [sp, #16]
   31bc4:	ldrd	r0, [sp, #40]	; 0x28
   31bc8:	strd	r0, [sp, #8]
   31bcc:	strd	sl, [sp]
   31bd0:	mov	r1, r7
   31bd4:	ldr	r0, [sp, #76]	; 0x4c
   31bd8:	bl	305b0 <flatcc_json_parser_struct_as_root@@Base+0xda0>
   31bdc:	ldr	r3, [sp, #132]	; 0x84
   31be0:	sub	r6, r6, r3
   31be4:	cmp	r0, #0
   31be8:	beq	31c68 <flatcc_json_parser_struct_as_root@@Base+0x2458>
   31bec:	cmp	r6, #0
   31bf0:	blt	31c8c <flatcc_json_parser_struct_as_root@@Base+0x247c>
   31bf4:	cmp	r6, #2
   31bf8:	bhi	31d88 <flatcc_json_parser_struct_as_root@@Base+0x2578>
   31bfc:	cmp	r6, #0
   31c00:	ble	31c30 <flatcc_json_parser_struct_as_root@@Base+0x2420>
   31c04:	sub	r1, r6, #1
   31c08:	ldr	r2, [sp, #76]	; 0x4c
   31c0c:	add	r3, r2, r7
   31c10:	add	r6, r6, r7
   31c14:	add	r6, r2, r6
   31c18:	mov	r2, #48	; 0x30
   31c1c:	strb	r2, [r3], #1
   31c20:	cmp	r6, r3
   31c24:	bne	31c1c <flatcc_json_parser_struct_as_root@@Base+0x240c>
   31c28:	add	r7, r7, #1
   31c2c:	add	r7, r7, r1
   31c30:	ldr	r2, [sp, #76]	; 0x4c
   31c34:	add	r0, r2, r7
   31c38:	mov	r3, #0
   31c3c:	strb	r3, [r2, r7]
   31c40:	ldr	r3, [sp, #112]	; 0x70
   31c44:	sub	r0, r0, r3
   31c48:	b	31a38 <flatcc_json_parser_struct_as_root@@Base+0x2228>
   31c4c:	mov	r7, #0
   31c50:	b	31aec <flatcc_json_parser_struct_as_root@@Base+0x22dc>
   31c54:	ldr	r3, [pc, #-1072]	; 3182c <flatcc_json_parser_struct_as_root@@Base+0x201c>
   31c58:	mov	r2, #239	; 0xef
   31c5c:	ldr	r1, [pc, #-1076]	; 31830 <flatcc_json_parser_struct_as_root@@Base+0x2020>
   31c60:	ldr	r0, [pc, #-1076]	; 31834 <flatcc_json_parser_struct_as_root@@Base+0x2024>
   31c64:	bl	14618 <__assert_fail@plt>
   31c68:	ldrd	r2, [sp, #80]	; 0x50
   31c6c:	ldr	r1, [pc, #-1084]	; 31838 <flatcc_json_parser_struct_as_root@@Base+0x2028>
   31c70:	ldr	r4, [sp, #76]	; 0x4c
   31c74:	mov	r0, r4
   31c78:	bl	14600 <sprintf@plt>
   31c7c:	ldr	r2, [sp, #112]	; 0x70
   31c80:	sub	r3, r4, r2
   31c84:	add	r0, r3, r0
   31c88:	b	31a38 <flatcc_json_parser_struct_as_root@@Base+0x2228>
   31c8c:	rsb	r1, r6, #0
   31c90:	add	r3, r6, r7
   31c94:	cmp	r1, r7
   31c98:	cmnge	r3, #2
   31c9c:	bge	31d24 <flatcc_json_parser_struct_as_root@@Base+0x2514>
   31ca0:	cmp	r7, #1
   31ca4:	ble	31bf4 <flatcc_json_parser_struct_as_root@@Base+0x23e4>
   31ca8:	sub	r3, r7, #1
   31cac:	cmp	r3, #1
   31cb0:	movlt	r3, #1
   31cb4:	cmp	r3, r1
   31cb8:	movlt	r1, r3
   31cbc:	cmp	r1, #0
   31cc0:	ble	31ce4 <flatcc_json_parser_struct_as_root@@Base+0x24d4>
   31cc4:	ldr	r2, [sp, #76]	; 0x4c
   31cc8:	add	r3, r2, r7
   31ccc:	sub	r0, r7, r1
   31cd0:	add	r0, r2, r0
   31cd4:	ldrb	r2, [r3, #-1]
   31cd8:	strb	r2, [r3], #-1
   31cdc:	cmp	r0, r3
   31ce0:	bne	31cd4 <flatcc_json_parser_struct_as_root@@Base+0x24c4>
   31ce4:	add	ip, r7, #1
   31ce8:	sub	r3, r7, r1
   31cec:	mov	r2, #46	; 0x2e
   31cf0:	ldr	r0, [sp, #76]	; 0x4c
   31cf4:	strb	r2, [r0, r3]
   31cf8:	adds	r0, r1, r6
   31cfc:	moveq	r7, ip
   31d00:	beq	31c30 <flatcc_json_parser_struct_as_root@@Base+0x2420>
   31d04:	add	r7, r7, #2
   31d08:	mov	r3, #101	; 0x65
   31d0c:	ldr	r2, [sp, #76]	; 0x4c
   31d10:	strb	r3, [r2, ip]
   31d14:	add	r1, r2, r7
   31d18:	bl	30788 <flatcc_json_parser_struct_as_root@@Base+0xf78>
   31d1c:	add	r7, r7, r0
   31d20:	b	31c30 <flatcc_json_parser_struct_as_root@@Base+0x2420>
   31d24:	rsb	r0, r7, #2
   31d28:	sub	r0, r0, r6
   31d2c:	mov	r2, r7
   31d30:	ldr	r4, [sp, #76]	; 0x4c
   31d34:	mov	r1, r4
   31d38:	add	r0, r4, r0
   31d3c:	bl	14534 <memmove@plt>
   31d40:	mov	r3, #48	; 0x30
   31d44:	strb	r3, [r4]
   31d48:	mov	r3, #46	; 0x2e
   31d4c:	strb	r3, [r4, #1]
   31d50:	rsb	r6, r6, #2
   31d54:	sub	r0, r6, r7
   31d58:	cmp	r0, #2
   31d5c:	ble	31d80 <flatcc_json_parser_struct_as_root@@Base+0x2570>
   31d60:	add	r3, r4, #2
   31d64:	add	r1, r4, r0
   31d68:	mov	r2, #48	; 0x30
   31d6c:	strb	r2, [r3], #1
   31d70:	cmp	r3, r1
   31d74:	bne	31d6c <flatcc_json_parser_struct_as_root@@Base+0x255c>
   31d78:	add	r7, r7, r0
   31d7c:	b	31c30 <flatcc_json_parser_struct_as_root@@Base+0x2420>
   31d80:	mov	r0, #2
   31d84:	b	31d78 <flatcc_json_parser_struct_as_root@@Base+0x2568>
   31d88:	add	r4, r7, #1
   31d8c:	mov	r3, #101	; 0x65
   31d90:	ldr	r2, [sp, #76]	; 0x4c
   31d94:	strb	r3, [r2, r7]
   31d98:	add	r1, r2, r4
   31d9c:	mov	r0, r6
   31da0:	bl	30788 <flatcc_json_parser_struct_as_root@@Base+0xf78>
   31da4:	add	r7, r4, r0
   31da8:	b	31c30 <flatcc_json_parser_struct_as_root@@Base+0x2420>

00031dac <flatcc_json_printer_error_string@@Base>:
   31dac:	cmp	r0, #3
   31db0:	ldrls	pc, [pc, r0, lsl #2]
   31db4:	b	31de0 <flatcc_json_printer_error_string@@Base+0x34>
   31db8:	andeq	r1, r3, r8, ror #27
   31dbc:	andeq	r1, r3, r8, asr #27
   31dc0:	ldrdeq	r1, [r3], -r0
   31dc4:	ldrdeq	r1, [r3], -r8
   31dc8:	ldr	r0, [pc, #32]	; 31df0 <flatcc_json_printer_error_string@@Base+0x44>
   31dcc:	bx	lr
   31dd0:	ldr	r0, [pc, #28]	; 31df4 <flatcc_json_printer_error_string@@Base+0x48>
   31dd4:	bx	lr
   31dd8:	ldr	r0, [pc, #24]	; 31df8 <flatcc_json_printer_error_string@@Base+0x4c>
   31ddc:	bx	lr
   31de0:	ldr	r0, [pc, #20]	; 31dfc <flatcc_json_printer_error_string@@Base+0x50>
   31de4:	bx	lr
   31de8:	ldr	r0, [pc, #16]	; 31e00 <flatcc_json_printer_error_string@@Base+0x54>
   31dec:	bx	lr
   31df0:	andeq	r2, r4, r4, asr r7
   31df4:	andeq	r2, r4, r0, ror #14
   31df8:	ldrdeq	r1, [r4], -r0
   31dfc:	muleq	r4, r8, r1
   31e00:	andeq	r0, r4, r0, lsl sp

00031e04 <flatcc_json_printer_fmt_float@@Base>:
   31e04:	push	{r4, lr}
   31e08:	vcvt.f64.f32	d0, s0
   31e0c:	bl	3131c <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   31e10:	pop	{r4, pc}

00031e14 <flatcc_json_printer_fmt_double@@Base>:
   31e14:	push	{r4, lr}
   31e18:	bl	3131c <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   31e1c:	pop	{r4, pc}

00031e20 <flatcc_json_printer_fmt_bool@@Base>:
   31e20:	mov	r3, r0
   31e24:	cmp	r1, #0
   31e28:	ldrne	r2, [pc, #36]	; 31e54 <flatcc_json_printer_fmt_bool@@Base+0x34>
   31e2c:	ldrne	r0, [r2]
   31e30:	strne	r0, [r3]
   31e34:	movne	r0, #4
   31e38:	ldreq	r2, [pc, #24]	; 31e58 <flatcc_json_printer_fmt_bool@@Base+0x38>
   31e3c:	ldreq	r0, [r2]
   31e40:	streq	r0, [r3]
   31e44:	ldrbeq	r2, [r2, #4]
   31e48:	strbeq	r2, [r3, #4]
   31e4c:	moveq	r0, #5
   31e50:	bx	lr
   31e54:	andeq	sp, r3, r0, lsr r5
   31e58:	andeq	sp, r3, r8, lsr r5

00031e5c <flatcc_json_printer_string@@Base>:
   31e5c:	push	{r4, lr}
   31e60:	bl	30f78 <flatcc_json_parser_struct_as_root@@Base+0x1768>
   31e64:	pop	{r4, pc}

00031e68 <flatcc_json_printer_write@@Base>:
   31e68:	push	{r4, r5, r6, lr}
   31e6c:	mov	r4, r0
   31e70:	mov	r5, r2
   31e74:	ldr	r0, [r0, #20]
   31e78:	add	r3, r0, r2
   31e7c:	ldr	r2, [r4, #16]
   31e80:	cmp	r2, r3
   31e84:	bls	31ea0 <flatcc_json_printer_write@@Base+0x38>
   31e88:	mov	r2, r5
   31e8c:	bl	1454c <memcpy@plt>
   31e90:	ldr	r3, [r4, #20]
   31e94:	add	r5, r3, r5
   31e98:	str	r5, [r4, #20]
   31e9c:	pop	{r4, r5, r6, pc}
   31ea0:	mov	r2, r5
   31ea4:	mov	r0, r4
   31ea8:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   31eac:	pop	{r4, r5, r6, pc}

00031eb0 <flatcc_json_printer_nl@@Base>:
   31eb0:	ldr	r3, [r0, #20]
   31eb4:	add	r2, r3, #1
   31eb8:	str	r2, [r0, #20]
   31ebc:	mov	r2, #10
   31ec0:	strb	r2, [r3]
   31ec4:	ldr	r2, [r0, #20]
   31ec8:	ldr	r3, [r0, #16]
   31ecc:	cmp	r2, r3
   31ed0:	bxcc	lr
   31ed4:	push	{r4, lr}
   31ed8:	ldr	r3, [r0, #44]	; 0x2c
   31edc:	mov	r1, #0
   31ee0:	blx	r3
   31ee4:	pop	{r4, pc}

00031ee8 <flatcc_json_printer_char@@Base>:
   31ee8:	ldr	r3, [r0, #20]
   31eec:	add	r2, r3, #1
   31ef0:	str	r2, [r0, #20]
   31ef4:	strb	r1, [r3]
   31ef8:	bx	lr

00031efc <flatcc_json_printer_indent@@Base>:
   31efc:	push	{r4, r5, r6, lr}
   31f00:	mov	r4, r0
   31f04:	ldrb	r3, [r0, #25]
   31f08:	ldr	r5, [r0, #32]
   31f0c:	mul	r5, r5, r3
   31f10:	ldr	r0, [r0, #20]
   31f14:	add	r3, r0, r5
   31f18:	ldr	r2, [r4, #16]
   31f1c:	cmp	r2, r3
   31f20:	bcc	31f40 <flatcc_json_printer_indent@@Base+0x44>
   31f24:	mov	r2, r5
   31f28:	mov	r1, #32
   31f2c:	bl	145c4 <memset@plt>
   31f30:	ldr	r3, [r4, #20]
   31f34:	add	r5, r3, r5
   31f38:	str	r5, [r4, #20]
   31f3c:	pop	{r4, r5, r6, pc}
   31f40:	mov	r1, r5
   31f44:	mov	r0, r4
   31f48:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   31f4c:	pop	{r4, r5, r6, pc}

00031f50 <flatcc_json_printer_add_level@@Base>:
   31f50:	ldr	r3, [r0, #32]
   31f54:	add	r1, r3, r1
   31f58:	str	r1, [r0, #32]
   31f5c:	bx	lr

00031f60 <flatcc_json_printer_get_level@@Base>:
   31f60:	ldr	r0, [r0, #32]
   31f64:	bx	lr

00031f68 <flatcc_json_printer_uint8@@Base>:
   31f68:	push	{r4, lr}
   31f6c:	mov	r4, r0
   31f70:	mov	r0, r1
   31f74:	ldr	r1, [r4, #20]
   31f78:	bl	2f8e8 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   31f7c:	ldr	r3, [r4, #20]
   31f80:	add	r0, r3, r0
   31f84:	str	r0, [r4, #20]
   31f88:	pop	{r4, pc}

00031f8c <flatcc_json_printer_uint16@@Base>:
   31f8c:	push	{r4, lr}
   31f90:	mov	r4, r0
   31f94:	mov	r0, r1
   31f98:	ldr	r1, [r4, #20]
   31f9c:	bl	2f9a8 <flatcc_json_parser_struct_as_root@@Base+0x198>
   31fa0:	ldr	r3, [r4, #20]
   31fa4:	add	r0, r3, r0
   31fa8:	str	r0, [r4, #20]
   31fac:	pop	{r4, pc}

00031fb0 <flatcc_json_printer_uint32@@Base>:
   31fb0:	push	{r4, lr}
   31fb4:	mov	r4, r0
   31fb8:	mov	r0, r1
   31fbc:	ldr	r1, [r4, #20]
   31fc0:	bl	2fb2c <flatcc_json_parser_struct_as_root@@Base+0x31c>
   31fc4:	ldr	r3, [r4, #20]
   31fc8:	add	r0, r3, r0
   31fcc:	str	r0, [r4, #20]
   31fd0:	pop	{r4, pc}

00031fd4 <flatcc_json_printer_uint64@@Base>:
   31fd4:	push	{r4, lr}
   31fd8:	mov	r4, r0
   31fdc:	mov	r0, r2
   31fe0:	mov	r1, r3
   31fe4:	ldr	r2, [r4, #20]
   31fe8:	bl	2fe6c <flatcc_json_parser_struct_as_root@@Base+0x65c>
   31fec:	ldr	r3, [r4, #20]
   31ff0:	add	r0, r3, r0
   31ff4:	str	r0, [r4, #20]
   31ff8:	pop	{r4, pc}

00031ffc <flatcc_json_printer_int8@@Base>:
   31ffc:	push	{r4, lr}
   32000:	mov	r4, r0
   32004:	mov	r0, r1
   32008:	ldr	r1, [r4, #20]
   3200c:	bl	304f0 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   32010:	ldr	r3, [r4, #20]
   32014:	add	r0, r3, r0
   32018:	str	r0, [r4, #20]
   3201c:	pop	{r4, pc}

00032020 <flatcc_json_printer_int16@@Base>:
   32020:	push	{r4, lr}
   32024:	mov	r4, r0
   32028:	mov	r0, r1
   3202c:	ldr	r1, [r4, #20]
   32030:	bl	30520 <flatcc_json_parser_struct_as_root@@Base+0xd10>
   32034:	ldr	r3, [r4, #20]
   32038:	add	r0, r3, r0
   3203c:	str	r0, [r4, #20]
   32040:	pop	{r4, pc}

00032044 <flatcc_json_printer_int32@@Base>:
   32044:	push	{r4, lr}
   32048:	mov	r4, r0
   3204c:	mov	r0, r1
   32050:	ldr	r1, [r4, #20]
   32054:	bl	30550 <flatcc_json_parser_struct_as_root@@Base+0xd40>
   32058:	ldr	r3, [r4, #20]
   3205c:	add	r0, r3, r0
   32060:	str	r0, [r4, #20]
   32064:	pop	{r4, pc}

00032068 <flatcc_json_printer_int64@@Base>:
   32068:	push	{r4, lr}
   3206c:	mov	r4, r0
   32070:	mov	r0, r2
   32074:	mov	r1, r3
   32078:	ldr	r2, [r4, #20]
   3207c:	bl	30578 <flatcc_json_parser_struct_as_root@@Base+0xd68>
   32080:	ldr	r3, [r4, #20]
   32084:	add	r0, r3, r0
   32088:	str	r0, [r4, #20]
   3208c:	pop	{r4, pc}

00032090 <flatcc_json_printer_float@@Base>:
   32090:	push	{r4, lr}
   32094:	mov	r4, r0
   32098:	ldr	r0, [r0, #20]
   3209c:	vcvt.f64.f32	d0, s0
   320a0:	bl	3131c <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   320a4:	ldr	r3, [r4, #20]
   320a8:	add	r0, r3, r0
   320ac:	str	r0, [r4, #20]
   320b0:	pop	{r4, pc}

000320b4 <flatcc_json_printer_double@@Base>:
   320b4:	push	{r4, lr}
   320b8:	mov	r4, r0
   320bc:	ldr	r0, [r0, #20]
   320c0:	bl	3131c <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   320c4:	ldr	r3, [r4, #20]
   320c8:	add	r0, r3, r0
   320cc:	str	r0, [r4, #20]
   320d0:	pop	{r4, pc}

000320d4 <flatcc_json_printer_enum@@Base>:
   320d4:	push	{r4, r5, r6, lr}
   320d8:	mov	r4, r0
   320dc:	mov	r5, r2
   320e0:	ldr	r3, [r0, #20]
   320e4:	mov	r2, #34	; 0x22
   320e8:	strb	r2, [r3]
   320ec:	ldrb	r3, [r0, #26]
   320f0:	ldr	r0, [r0, #20]
   320f4:	cmp	r3, #0
   320f8:	addeq	r0, r0, #1
   320fc:	str	r0, [r4, #20]
   32100:	add	r3, r0, r5
   32104:	ldr	r2, [r4, #16]
   32108:	cmp	r2, r3
   3210c:	bhi	32120 <flatcc_json_printer_enum@@Base+0x4c>
   32110:	mov	r2, r5
   32114:	mov	r0, r4
   32118:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3211c:	b	32134 <flatcc_json_printer_enum@@Base+0x60>
   32120:	mov	r2, r5
   32124:	bl	1454c <memcpy@plt>
   32128:	ldr	r3, [r4, #20]
   3212c:	add	r5, r3, r5
   32130:	str	r5, [r4, #20]
   32134:	ldr	r3, [r4, #20]
   32138:	mov	r2, #34	; 0x22
   3213c:	strb	r2, [r3]
   32140:	ldrb	r2, [r4, #26]
   32144:	ldr	r3, [r4, #20]
   32148:	cmp	r2, #0
   3214c:	addeq	r3, r3, #1
   32150:	str	r3, [r4, #20]
   32154:	pop	{r4, r5, r6, pc}

00032158 <flatcc_json_printer_delimit_enum_flags@@Base>:
   32158:	ldrb	r3, [r0, #26]
   3215c:	adds	r1, r1, #0
   32160:	movne	r1, #1
   32164:	cmp	r3, #0
   32168:	movne	r3, r1
   3216c:	orreq	r3, r1, #1
   32170:	ldr	r2, [r0, #20]
   32174:	mov	r1, #34	; 0x22
   32178:	strb	r1, [r2]
   3217c:	ldr	r1, [r0, #20]
   32180:	add	r1, r1, r3
   32184:	str	r1, [r0, #20]
   32188:	bx	lr

0003218c <flatcc_json_printer_enum_flag@@Base>:
   3218c:	push	{r4, r5, r6, lr}
   32190:	mov	r4, r0
   32194:	mov	ip, r2
   32198:	mov	r5, r3
   3219c:	ldr	r3, [r0, #20]
   321a0:	mov	r2, #32
   321a4:	strb	r2, [r3]
   321a8:	ldr	r0, [r0, #20]
   321ac:	cmp	r1, #0
   321b0:	addgt	r0, r0, #1
   321b4:	str	r0, [r4, #20]
   321b8:	add	r3, r0, r5
   321bc:	ldr	r2, [r4, #16]
   321c0:	cmp	r2, r3
   321c4:	bls	321e4 <flatcc_json_printer_enum_flag@@Base+0x58>
   321c8:	mov	r2, r5
   321cc:	mov	r1, ip
   321d0:	bl	1454c <memcpy@plt>
   321d4:	ldr	r3, [r4, #20]
   321d8:	add	r5, r3, r5
   321dc:	str	r5, [r4, #20]
   321e0:	pop	{r4, r5, r6, pc}
   321e4:	mov	r2, r5
   321e8:	mov	r1, ip
   321ec:	mov	r0, r4
   321f0:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   321f4:	pop	{r4, r5, r6, pc}

000321f8 <flatcc_json_printer_string_field@@Base>:
   321f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   321fc:	ldr	r8, [sp, #32]
   32200:	add	r2, r2, #2
   32204:	lsl	r2, r2, #1
   32208:	ldr	ip, [r1, #8]
   3220c:	cmp	r2, ip
   32210:	popge	{r4, r5, r6, r7, r8, r9, sl, pc}
   32214:	ldr	ip, [r1, #4]
   32218:	ldrh	r5, [ip, r2]
   3221c:	cmp	r5, #0
   32220:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   32224:	ldr	r7, [r1]
   32228:	adds	r6, r7, r5
   3222c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   32230:	ldr	r2, [r1, #16]
   32234:	add	ip, r2, #1
   32238:	str	ip, [r1, #16]
   3223c:	cmp	r2, #0
   32240:	ldrne	r2, [r0, #20]
   32244:	addne	r1, r2, #1
   32248:	strne	r1, [r0, #20]
   3224c:	movne	r1, #44	; 0x2c
   32250:	strbne	r1, [r2]
   32254:	mov	r9, r3
   32258:	mov	r4, r0
   3225c:	ldrb	r3, [r0, #25]
   32260:	cmp	r3, #0
   32264:	bne	322bc <flatcc_json_printer_string_field@@Base+0xc4>
   32268:	ldr	r2, [r0, #20]
   3226c:	ldr	r3, [r0, #16]
   32270:	cmp	r2, r3
   32274:	bcs	3231c <flatcc_json_printer_string_field@@Base+0x124>
   32278:	ldr	r3, [r4, #20]
   3227c:	mov	r2, #34	; 0x22
   32280:	strb	r2, [r3]
   32284:	ldrb	r3, [r4, #26]
   32288:	ldr	r0, [r4, #20]
   3228c:	cmp	r3, #0
   32290:	addeq	r0, r0, #1
   32294:	str	r0, [r4, #20]
   32298:	add	r3, r0, r8
   3229c:	ldr	r2, [r4, #16]
   322a0:	cmp	r2, r3
   322a4:	bhi	3232c <flatcc_json_printer_string_field@@Base+0x134>
   322a8:	mov	r2, r8
   322ac:	mov	r1, r9
   322b0:	mov	r0, r4
   322b4:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   322b8:	b	32344 <flatcc_json_printer_string_field@@Base+0x14c>
   322bc:	ldr	r3, [r0, #20]
   322c0:	add	r2, r3, #1
   322c4:	str	r2, [r0, #20]
   322c8:	mov	r2, #10
   322cc:	strb	r2, [r3]
   322d0:	ldrb	r3, [r0, #25]
   322d4:	ldr	sl, [r0, #32]
   322d8:	mul	sl, sl, r3
   322dc:	ldr	r0, [r0, #20]
   322e0:	add	r3, r0, sl
   322e4:	ldr	r2, [r4, #16]
   322e8:	cmp	r2, r3
   322ec:	bcc	3230c <flatcc_json_printer_string_field@@Base+0x114>
   322f0:	mov	r2, sl
   322f4:	mov	r1, #32
   322f8:	bl	145c4 <memset@plt>
   322fc:	ldr	r3, [r4, #20]
   32300:	add	sl, r3, sl
   32304:	str	sl, [r4, #20]
   32308:	b	32278 <flatcc_json_printer_string_field@@Base+0x80>
   3230c:	mov	r1, sl
   32310:	mov	r0, r4
   32314:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   32318:	b	32278 <flatcc_json_printer_string_field@@Base+0x80>
   3231c:	ldr	r3, [r0, #44]	; 0x2c
   32320:	mov	r1, #0
   32324:	blx	r3
   32328:	b	32278 <flatcc_json_printer_string_field@@Base+0x80>
   3232c:	mov	r2, r8
   32330:	mov	r1, r9
   32334:	bl	1454c <memcpy@plt>
   32338:	ldr	r3, [r4, #20]
   3233c:	add	r8, r3, r8
   32340:	str	r8, [r4, #20]
   32344:	ldr	r3, [r4, #20]
   32348:	mov	r2, #34	; 0x22
   3234c:	strb	r2, [r3]
   32350:	ldrb	r3, [r4, #26]
   32354:	clz	r3, r3
   32358:	lsr	r3, r3, #5
   3235c:	ldr	r1, [r4, #20]
   32360:	add	r2, r1, r3
   32364:	add	r2, r2, #1
   32368:	str	r2, [r4, #20]
   3236c:	mov	r2, #58	; 0x3a
   32370:	strb	r2, [r1, r3]
   32374:	ldr	r3, [r4, #20]
   32378:	mov	r2, #32
   3237c:	strb	r2, [r3]
   32380:	ldrb	r2, [r4, #25]
   32384:	ldr	r3, [r4, #20]
   32388:	cmp	r2, #0
   3238c:	addne	r3, r3, #1
   32390:	str	r3, [r4, #20]
   32394:	ldr	r3, [r7, r5]
   32398:	add	r1, r6, r3
   3239c:	ldr	r2, [r6, r3]
   323a0:	add	r1, r1, #4
   323a4:	mov	r0, r4
   323a8:	bl	30f78 <flatcc_json_parser_struct_as_root@@Base+0x1768>
   323ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000323b0 <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   323b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   323b4:	sub	sp, sp, #28
   323b8:	ldr	r7, [sp, #64]	; 0x40
   323bc:	add	r2, r2, #2
   323c0:	lsl	r2, r2, #1
   323c4:	ldr	ip, [r1, #8]
   323c8:	cmp	r2, ip
   323cc:	bge	326a8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2f8>
   323d0:	ldr	ip, [r1, #4]
   323d4:	ldrh	r8, [ip, r2]
   323d8:	cmp	r8, #0
   323dc:	beq	326a8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2f8>
   323e0:	ldr	sl, [r1]
   323e4:	ldr	r5, [sp, #68]	; 0x44
   323e8:	adds	r5, r5, #0
   323ec:	movne	r5, #1
   323f0:	orr	r6, r5, #128	; 0x80
   323f4:	adds	r9, sl, r8
   323f8:	beq	326a8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2f8>
   323fc:	ldr	r2, [r1, #16]
   32400:	add	ip, r2, #1
   32404:	str	ip, [r1, #16]
   32408:	cmp	r2, #0
   3240c:	ldrne	r2, [r0, #20]
   32410:	addne	r1, r2, #1
   32414:	strne	r1, [r0, #20]
   32418:	movne	r1, #44	; 0x2c
   3241c:	strbne	r1, [r2]
   32420:	str	r3, [sp, #12]
   32424:	mov	r4, r0
   32428:	ldrb	r3, [r0, #25]
   3242c:	cmp	r3, #0
   32430:	bne	32488 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xd8>
   32434:	ldr	r2, [r0, #20]
   32438:	ldr	r3, [r0, #16]
   3243c:	cmp	r2, r3
   32440:	bcs	324e8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x138>
   32444:	ldr	r3, [r4, #20]
   32448:	mov	r2, #34	; 0x22
   3244c:	strb	r2, [r3]
   32450:	ldrb	r3, [r4, #26]
   32454:	ldr	r0, [r4, #20]
   32458:	cmp	r3, #0
   3245c:	addeq	r0, r0, #1
   32460:	str	r0, [r4, #20]
   32464:	add	r3, r0, r7
   32468:	ldr	r2, [r4, #16]
   3246c:	cmp	r2, r3
   32470:	bhi	324f8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x148>
   32474:	mov	r2, r7
   32478:	ldr	r1, [sp, #12]
   3247c:	mov	r0, r4
   32480:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   32484:	b	32510 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x160>
   32488:	ldr	r3, [r0, #20]
   3248c:	add	r2, r3, #1
   32490:	str	r2, [r0, #20]
   32494:	mov	r2, #10
   32498:	strb	r2, [r3]
   3249c:	ldrb	r3, [r0, #25]
   324a0:	ldr	fp, [r0, #32]
   324a4:	mul	fp, fp, r3
   324a8:	ldr	r0, [r0, #20]
   324ac:	add	r3, r0, fp
   324b0:	ldr	r2, [r4, #16]
   324b4:	cmp	r2, r3
   324b8:	bcc	324d8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x128>
   324bc:	mov	r2, fp
   324c0:	mov	r1, #32
   324c4:	bl	145c4 <memset@plt>
   324c8:	ldr	r3, [r4, #20]
   324cc:	add	fp, r3, fp
   324d0:	str	fp, [r4, #20]
   324d4:	b	32444 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x94>
   324d8:	mov	r1, fp
   324dc:	mov	r0, r4
   324e0:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   324e4:	b	32444 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x94>
   324e8:	ldr	r3, [r0, #44]	; 0x2c
   324ec:	mov	r1, #0
   324f0:	blx	r3
   324f4:	b	32444 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x94>
   324f8:	mov	r2, r7
   324fc:	ldr	r1, [sp, #12]
   32500:	bl	1454c <memcpy@plt>
   32504:	ldr	r3, [r4, #20]
   32508:	add	r7, r3, r7
   3250c:	str	r7, [r4, #20]
   32510:	ldr	r3, [r4, #20]
   32514:	mov	r1, #34	; 0x22
   32518:	strb	r1, [r3]
   3251c:	ldrb	r3, [r4, #26]
   32520:	clz	r3, r3
   32524:	lsr	r3, r3, #5
   32528:	ldr	r0, [r4, #20]
   3252c:	add	r2, r0, r3
   32530:	add	r2, r2, #1
   32534:	str	r2, [r4, #20]
   32538:	mov	r2, #58	; 0x3a
   3253c:	strb	r2, [r0, r3]
   32540:	ldr	r3, [r4, #20]
   32544:	mov	r2, #32
   32548:	strb	r2, [r3]
   3254c:	ldrb	r3, [r4, #25]
   32550:	adds	r3, r3, #0
   32554:	movne	r3, #1
   32558:	ldr	r0, [r4, #20]
   3255c:	add	r2, r0, r3
   32560:	str	r2, [r4, #20]
   32564:	ldr	ip, [sl, r8]
   32568:	add	r8, r9, ip
   3256c:	bic	r5, r5, #128	; 0x80
   32570:	ldr	ip, [r9, ip]
   32574:	str	ip, [sp, #16]
   32578:	add	r8, r8, #4
   3257c:	add	r2, r2, #1
   32580:	str	r2, [r4, #20]
   32584:	strb	r1, [r0, r3]
   32588:	mov	r1, r6
   3258c:	ldr	r0, [sp, #16]
   32590:	bl	30820 <flatcc_json_parser_struct_as_root@@Base+0x1010>
   32594:	mov	sl, r0
   32598:	ldr	r3, [r4, #20]
   3259c:	add	r3, r3, r0
   325a0:	ldr	r2, [r4, #16]
   325a4:	cmp	r2, r3
   325a8:	bls	32668 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2b8>
   325ac:	ldr	r0, [r4, #20]
   325b0:	ldr	r7, [r4, #16]
   325b4:	add	r3, r0, sl
   325b8:	cmp	r7, r3
   325bc:	bcs	3267c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2cc>
   325c0:	sub	r7, r7, r0
   325c4:	bic	r7, r7, #3
   325c8:	add	sl, r7, r7, lsl #1
   325cc:	lsrs	sl, sl, #2
   325d0:	beq	32654 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2a4>
   325d4:	mov	r9, #0
   325d8:	str	sl, [sp, #20]
   325dc:	str	r5, [sp]
   325e0:	add	r3, sp, #20
   325e4:	mov	r2, r9
   325e8:	mov	r1, r8
   325ec:	bl	30874 <flatcc_json_parser_struct_as_root@@Base+0x1064>
   325f0:	ldr	r3, [r4, #20]
   325f4:	add	r7, r3, r7
   325f8:	str	r7, [r4, #20]
   325fc:	add	r8, r8, sl
   32600:	ldr	r3, [sp, #16]
   32604:	sub	sl, r3, sl
   32608:	str	sl, [sp, #16]
   3260c:	ldr	r3, [r4, #44]	; 0x2c
   32610:	mov	r1, r9
   32614:	mov	r0, r4
   32618:	blx	r3
   3261c:	mov	r1, r6
   32620:	ldr	r0, [sp, #16]
   32624:	bl	30820 <flatcc_json_parser_struct_as_root@@Base+0x1010>
   32628:	mov	sl, r0
   3262c:	ldr	r0, [r4, #20]
   32630:	ldr	r7, [r4, #16]
   32634:	add	r3, r0, sl
   32638:	cmp	r7, r3
   3263c:	bcs	3267c <flatcc_json_printer_uint8_vector_base64_field@@Base+0x2cc>
   32640:	sub	r7, r7, r0
   32644:	bic	r7, r7, #3
   32648:	add	sl, r7, r7, lsl #1
   3264c:	lsrs	sl, sl, #2
   32650:	bne	325d8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x228>
   32654:	ldr	r3, [pc, #84]	; 326b0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x300>
   32658:	ldr	r2, [pc, #84]	; 326b4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x304>
   3265c:	ldr	r1, [pc, #84]	; 326b8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x308>
   32660:	ldr	r0, [pc, #84]	; 326bc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x30c>
   32664:	bl	14618 <__assert_fail@plt>
   32668:	ldr	r3, [r4, #44]	; 0x2c
   3266c:	mov	r1, #0
   32670:	mov	r0, r4
   32674:	blx	r3
   32678:	b	325ac <flatcc_json_printer_uint8_vector_base64_field@@Base+0x1fc>
   3267c:	str	r6, [sp]
   32680:	add	r3, sp, #16
   32684:	mov	r2, #0
   32688:	mov	r1, r8
   3268c:	bl	30874 <flatcc_json_parser_struct_as_root@@Base+0x1064>
   32690:	ldr	r2, [r4, #20]
   32694:	add	r3, r2, sl
   32698:	add	r3, r3, #1
   3269c:	str	r3, [r4, #20]
   326a0:	mov	r3, #34	; 0x22
   326a4:	strb	r3, [r2, sl]
   326a8:	add	sp, sp, #28
   326ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   326b0:	andeq	r2, r4, r0, lsr #10
   326b4:	andeq	r0, r0, r5, lsl r1
   326b8:	andeq	r2, r4, r4, lsl r6
   326bc:	andeq	r2, r4, r0, ror r7

000326c0 <flatcc_json_printer_uint8_field@@Base>:
   326c0:	push	{r4, r5, r6, r7, r8, lr}
   326c4:	ldr	r6, [sp, #24]
   326c8:	ldrb	lr, [sp, #28]
   326cc:	add	r2, r2, #2
   326d0:	lsl	r2, r2, #1
   326d4:	ldr	ip, [r1, #8]
   326d8:	cmp	r2, ip
   326dc:	bge	327a4 <flatcc_json_printer_uint8_field@@Base+0xe4>
   326e0:	ldr	ip, [r1, #4]
   326e4:	ldrh	r2, [ip, r2]
   326e8:	cmp	r2, #0
   326ec:	beq	327a4 <flatcc_json_printer_uint8_field@@Base+0xe4>
   326f0:	ldr	ip, [r1]
   326f4:	cmn	ip, r2
   326f8:	beq	327a4 <flatcc_json_printer_uint8_field@@Base+0xe4>
   326fc:	ldrb	r5, [ip, r2]
   32700:	cmp	lr, r5
   32704:	beq	32794 <flatcc_json_printer_uint8_field@@Base+0xd4>
   32708:	ldr	r2, [r1, #16]
   3270c:	add	ip, r2, #1
   32710:	str	ip, [r1, #16]
   32714:	cmp	r2, #0
   32718:	ldrne	r2, [r0, #20]
   3271c:	addne	r1, r2, #1
   32720:	strne	r1, [r0, #20]
   32724:	movne	r1, #44	; 0x2c
   32728:	strbne	r1, [r2]
   3272c:	mov	r7, r3
   32730:	mov	r4, r0
   32734:	ldrb	r3, [r0, #25]
   32738:	cmp	r3, #0
   3273c:	bne	327b8 <flatcc_json_printer_uint8_field@@Base+0xf8>
   32740:	ldr	r2, [r0, #20]
   32744:	ldr	r3, [r0, #16]
   32748:	cmp	r2, r3
   3274c:	bcs	32818 <flatcc_json_printer_uint8_field@@Base+0x158>
   32750:	ldr	r3, [r4, #20]
   32754:	mov	r2, #34	; 0x22
   32758:	strb	r2, [r3]
   3275c:	ldrb	r3, [r4, #26]
   32760:	ldr	r0, [r4, #20]
   32764:	cmp	r3, #0
   32768:	addeq	r0, r0, #1
   3276c:	str	r0, [r4, #20]
   32770:	add	r3, r0, r6
   32774:	ldr	r2, [r4, #16]
   32778:	cmp	r2, r3
   3277c:	bhi	32828 <flatcc_json_printer_uint8_field@@Base+0x168>
   32780:	mov	r2, r6
   32784:	mov	r1, r7
   32788:	mov	r0, r4
   3278c:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   32790:	b	32840 <flatcc_json_printer_uint8_field@@Base+0x180>
   32794:	ldrb	r2, [r0, #28]
   32798:	cmp	r2, #0
   3279c:	beq	32708 <flatcc_json_printer_uint8_field@@Base+0x48>
   327a0:	pop	{r4, r5, r6, r7, r8, pc}
   327a4:	ldrb	r2, [r0, #29]
   327a8:	cmp	r2, #0
   327ac:	popeq	{r4, r5, r6, r7, r8, pc}
   327b0:	mov	r5, lr
   327b4:	b	32708 <flatcc_json_printer_uint8_field@@Base+0x48>
   327b8:	ldr	r3, [r0, #20]
   327bc:	add	r2, r3, #1
   327c0:	str	r2, [r0, #20]
   327c4:	mov	r2, #10
   327c8:	strb	r2, [r3]
   327cc:	ldrb	r3, [r0, #25]
   327d0:	ldr	r8, [r0, #32]
   327d4:	mul	r8, r8, r3
   327d8:	ldr	r0, [r0, #20]
   327dc:	add	r3, r0, r8
   327e0:	ldr	r2, [r4, #16]
   327e4:	cmp	r2, r3
   327e8:	bcc	32808 <flatcc_json_printer_uint8_field@@Base+0x148>
   327ec:	mov	r2, r8
   327f0:	mov	r1, #32
   327f4:	bl	145c4 <memset@plt>
   327f8:	ldr	r3, [r4, #20]
   327fc:	add	r8, r3, r8
   32800:	str	r8, [r4, #20]
   32804:	b	32750 <flatcc_json_printer_uint8_field@@Base+0x90>
   32808:	mov	r1, r8
   3280c:	mov	r0, r4
   32810:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   32814:	b	32750 <flatcc_json_printer_uint8_field@@Base+0x90>
   32818:	ldr	r3, [r0, #44]	; 0x2c
   3281c:	mov	r1, #0
   32820:	blx	r3
   32824:	b	32750 <flatcc_json_printer_uint8_field@@Base+0x90>
   32828:	mov	r2, r6
   3282c:	mov	r1, r7
   32830:	bl	1454c <memcpy@plt>
   32834:	ldr	r3, [r4, #20]
   32838:	add	r6, r3, r6
   3283c:	str	r6, [r4, #20]
   32840:	ldr	r3, [r4, #20]
   32844:	mov	r2, #34	; 0x22
   32848:	strb	r2, [r3]
   3284c:	ldrb	r3, [r4, #26]
   32850:	clz	r3, r3
   32854:	lsr	r3, r3, #5
   32858:	ldr	r1, [r4, #20]
   3285c:	add	r2, r1, r3
   32860:	add	r2, r2, #1
   32864:	str	r2, [r4, #20]
   32868:	mov	r2, #58	; 0x3a
   3286c:	strb	r2, [r1, r3]
   32870:	ldr	r3, [r4, #20]
   32874:	mov	r2, #32
   32878:	strb	r2, [r3]
   3287c:	ldrb	r3, [r4, #25]
   32880:	ldr	r1, [r4, #20]
   32884:	cmp	r3, #0
   32888:	addne	r1, r1, #1
   3288c:	str	r1, [r4, #20]
   32890:	mov	r0, r5
   32894:	bl	2f8e8 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   32898:	ldr	r3, [r4, #20]
   3289c:	add	r0, r3, r0
   328a0:	str	r0, [r4, #20]
   328a4:	pop	{r4, r5, r6, r7, r8, pc}

000328a8 <flatcc_json_printer_uint16_field@@Base>:
   328a8:	push	{r4, r5, r6, r7, r8, lr}
   328ac:	ldr	r6, [sp, #24]
   328b0:	ldrh	lr, [sp, #28]
   328b4:	add	r2, r2, #2
   328b8:	lsl	r2, r2, #1
   328bc:	ldr	ip, [r1, #8]
   328c0:	cmp	r2, ip
   328c4:	bge	3298c <flatcc_json_printer_uint16_field@@Base+0xe4>
   328c8:	ldr	ip, [r1, #4]
   328cc:	ldrh	r2, [ip, r2]
   328d0:	cmp	r2, #0
   328d4:	beq	3298c <flatcc_json_printer_uint16_field@@Base+0xe4>
   328d8:	ldr	ip, [r1]
   328dc:	cmn	ip, r2
   328e0:	beq	3298c <flatcc_json_printer_uint16_field@@Base+0xe4>
   328e4:	ldrh	r5, [ip, r2]
   328e8:	cmp	lr, r5
   328ec:	beq	3297c <flatcc_json_printer_uint16_field@@Base+0xd4>
   328f0:	ldr	r2, [r1, #16]
   328f4:	add	ip, r2, #1
   328f8:	str	ip, [r1, #16]
   328fc:	cmp	r2, #0
   32900:	ldrne	r2, [r0, #20]
   32904:	addne	r1, r2, #1
   32908:	strne	r1, [r0, #20]
   3290c:	movne	r1, #44	; 0x2c
   32910:	strbne	r1, [r2]
   32914:	mov	r7, r3
   32918:	mov	r4, r0
   3291c:	ldrb	r3, [r0, #25]
   32920:	cmp	r3, #0
   32924:	bne	329a0 <flatcc_json_printer_uint16_field@@Base+0xf8>
   32928:	ldr	r2, [r0, #20]
   3292c:	ldr	r3, [r0, #16]
   32930:	cmp	r2, r3
   32934:	bcs	32a00 <flatcc_json_printer_uint16_field@@Base+0x158>
   32938:	ldr	r3, [r4, #20]
   3293c:	mov	r2, #34	; 0x22
   32940:	strb	r2, [r3]
   32944:	ldrb	r3, [r4, #26]
   32948:	ldr	r0, [r4, #20]
   3294c:	cmp	r3, #0
   32950:	addeq	r0, r0, #1
   32954:	str	r0, [r4, #20]
   32958:	add	r3, r0, r6
   3295c:	ldr	r2, [r4, #16]
   32960:	cmp	r2, r3
   32964:	bhi	32a10 <flatcc_json_printer_uint16_field@@Base+0x168>
   32968:	mov	r2, r6
   3296c:	mov	r1, r7
   32970:	mov	r0, r4
   32974:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   32978:	b	32a28 <flatcc_json_printer_uint16_field@@Base+0x180>
   3297c:	ldrb	r2, [r0, #28]
   32980:	cmp	r2, #0
   32984:	beq	328f0 <flatcc_json_printer_uint16_field@@Base+0x48>
   32988:	pop	{r4, r5, r6, r7, r8, pc}
   3298c:	ldrb	r2, [r0, #29]
   32990:	cmp	r2, #0
   32994:	popeq	{r4, r5, r6, r7, r8, pc}
   32998:	mov	r5, lr
   3299c:	b	328f0 <flatcc_json_printer_uint16_field@@Base+0x48>
   329a0:	ldr	r3, [r0, #20]
   329a4:	add	r2, r3, #1
   329a8:	str	r2, [r0, #20]
   329ac:	mov	r2, #10
   329b0:	strb	r2, [r3]
   329b4:	ldrb	r3, [r0, #25]
   329b8:	ldr	r8, [r0, #32]
   329bc:	mul	r8, r8, r3
   329c0:	ldr	r0, [r0, #20]
   329c4:	add	r3, r0, r8
   329c8:	ldr	r2, [r4, #16]
   329cc:	cmp	r2, r3
   329d0:	bcc	329f0 <flatcc_json_printer_uint16_field@@Base+0x148>
   329d4:	mov	r2, r8
   329d8:	mov	r1, #32
   329dc:	bl	145c4 <memset@plt>
   329e0:	ldr	r3, [r4, #20]
   329e4:	add	r8, r3, r8
   329e8:	str	r8, [r4, #20]
   329ec:	b	32938 <flatcc_json_printer_uint16_field@@Base+0x90>
   329f0:	mov	r1, r8
   329f4:	mov	r0, r4
   329f8:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   329fc:	b	32938 <flatcc_json_printer_uint16_field@@Base+0x90>
   32a00:	ldr	r3, [r0, #44]	; 0x2c
   32a04:	mov	r1, #0
   32a08:	blx	r3
   32a0c:	b	32938 <flatcc_json_printer_uint16_field@@Base+0x90>
   32a10:	mov	r2, r6
   32a14:	mov	r1, r7
   32a18:	bl	1454c <memcpy@plt>
   32a1c:	ldr	r3, [r4, #20]
   32a20:	add	r6, r3, r6
   32a24:	str	r6, [r4, #20]
   32a28:	ldr	r3, [r4, #20]
   32a2c:	mov	r2, #34	; 0x22
   32a30:	strb	r2, [r3]
   32a34:	ldrb	r3, [r4, #26]
   32a38:	clz	r3, r3
   32a3c:	lsr	r3, r3, #5
   32a40:	ldr	r1, [r4, #20]
   32a44:	add	r2, r1, r3
   32a48:	add	r2, r2, #1
   32a4c:	str	r2, [r4, #20]
   32a50:	mov	r2, #58	; 0x3a
   32a54:	strb	r2, [r1, r3]
   32a58:	ldr	r3, [r4, #20]
   32a5c:	mov	r2, #32
   32a60:	strb	r2, [r3]
   32a64:	ldrb	r3, [r4, #25]
   32a68:	ldr	r1, [r4, #20]
   32a6c:	cmp	r3, #0
   32a70:	addne	r1, r1, #1
   32a74:	str	r1, [r4, #20]
   32a78:	mov	r0, r5
   32a7c:	bl	2f9a8 <flatcc_json_parser_struct_as_root@@Base+0x198>
   32a80:	ldr	r3, [r4, #20]
   32a84:	add	r0, r3, r0
   32a88:	str	r0, [r4, #20]
   32a8c:	pop	{r4, r5, r6, r7, r8, pc}

00032a90 <flatcc_json_printer_uint32_field@@Base>:
   32a90:	push	{r4, r5, r6, r7, r8, lr}
   32a94:	ldr	r6, [sp, #24]
   32a98:	add	r2, r2, #2
   32a9c:	lsl	r2, r2, #1
   32aa0:	ldr	ip, [r1, #8]
   32aa4:	cmp	r2, ip
   32aa8:	bge	32b74 <flatcc_json_printer_uint32_field@@Base+0xe4>
   32aac:	ldr	ip, [r1, #4]
   32ab0:	ldrh	r2, [ip, r2]
   32ab4:	cmp	r2, #0
   32ab8:	beq	32b74 <flatcc_json_printer_uint32_field@@Base+0xe4>
   32abc:	ldr	ip, [r1]
   32ac0:	cmn	ip, r2
   32ac4:	beq	32b74 <flatcc_json_printer_uint32_field@@Base+0xe4>
   32ac8:	ldr	r5, [ip, r2]
   32acc:	ldr	r2, [sp, #28]
   32ad0:	cmp	r2, r5
   32ad4:	beq	32b64 <flatcc_json_printer_uint32_field@@Base+0xd4>
   32ad8:	ldr	r2, [r1, #16]
   32adc:	add	ip, r2, #1
   32ae0:	str	ip, [r1, #16]
   32ae4:	cmp	r2, #0
   32ae8:	ldrne	r2, [r0, #20]
   32aec:	addne	r1, r2, #1
   32af0:	strne	r1, [r0, #20]
   32af4:	movne	r1, #44	; 0x2c
   32af8:	strbne	r1, [r2]
   32afc:	mov	r7, r3
   32b00:	mov	r4, r0
   32b04:	ldrb	r3, [r0, #25]
   32b08:	cmp	r3, #0
   32b0c:	bne	32b88 <flatcc_json_printer_uint32_field@@Base+0xf8>
   32b10:	ldr	r2, [r0, #20]
   32b14:	ldr	r3, [r0, #16]
   32b18:	cmp	r2, r3
   32b1c:	bcs	32be8 <flatcc_json_printer_uint32_field@@Base+0x158>
   32b20:	ldr	r3, [r4, #20]
   32b24:	mov	r2, #34	; 0x22
   32b28:	strb	r2, [r3]
   32b2c:	ldrb	r3, [r4, #26]
   32b30:	ldr	r0, [r4, #20]
   32b34:	cmp	r3, #0
   32b38:	addeq	r0, r0, #1
   32b3c:	str	r0, [r4, #20]
   32b40:	add	r3, r0, r6
   32b44:	ldr	r2, [r4, #16]
   32b48:	cmp	r2, r3
   32b4c:	bhi	32bf8 <flatcc_json_printer_uint32_field@@Base+0x168>
   32b50:	mov	r2, r6
   32b54:	mov	r1, r7
   32b58:	mov	r0, r4
   32b5c:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   32b60:	b	32c10 <flatcc_json_printer_uint32_field@@Base+0x180>
   32b64:	ldrb	r2, [r0, #28]
   32b68:	cmp	r2, #0
   32b6c:	beq	32ad8 <flatcc_json_printer_uint32_field@@Base+0x48>
   32b70:	pop	{r4, r5, r6, r7, r8, pc}
   32b74:	ldrb	r2, [r0, #29]
   32b78:	cmp	r2, #0
   32b7c:	popeq	{r4, r5, r6, r7, r8, pc}
   32b80:	ldr	r5, [sp, #28]
   32b84:	b	32ad8 <flatcc_json_printer_uint32_field@@Base+0x48>
   32b88:	ldr	r3, [r0, #20]
   32b8c:	add	r2, r3, #1
   32b90:	str	r2, [r0, #20]
   32b94:	mov	r2, #10
   32b98:	strb	r2, [r3]
   32b9c:	ldrb	r3, [r0, #25]
   32ba0:	ldr	r8, [r0, #32]
   32ba4:	mul	r8, r8, r3
   32ba8:	ldr	r0, [r0, #20]
   32bac:	add	r3, r0, r8
   32bb0:	ldr	r2, [r4, #16]
   32bb4:	cmp	r2, r3
   32bb8:	bcc	32bd8 <flatcc_json_printer_uint32_field@@Base+0x148>
   32bbc:	mov	r2, r8
   32bc0:	mov	r1, #32
   32bc4:	bl	145c4 <memset@plt>
   32bc8:	ldr	r3, [r4, #20]
   32bcc:	add	r8, r3, r8
   32bd0:	str	r8, [r4, #20]
   32bd4:	b	32b20 <flatcc_json_printer_uint32_field@@Base+0x90>
   32bd8:	mov	r1, r8
   32bdc:	mov	r0, r4
   32be0:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   32be4:	b	32b20 <flatcc_json_printer_uint32_field@@Base+0x90>
   32be8:	ldr	r3, [r0, #44]	; 0x2c
   32bec:	mov	r1, #0
   32bf0:	blx	r3
   32bf4:	b	32b20 <flatcc_json_printer_uint32_field@@Base+0x90>
   32bf8:	mov	r2, r6
   32bfc:	mov	r1, r7
   32c00:	bl	1454c <memcpy@plt>
   32c04:	ldr	r3, [r4, #20]
   32c08:	add	r6, r3, r6
   32c0c:	str	r6, [r4, #20]
   32c10:	ldr	r3, [r4, #20]
   32c14:	mov	r2, #34	; 0x22
   32c18:	strb	r2, [r3]
   32c1c:	ldrb	r3, [r4, #26]
   32c20:	clz	r3, r3
   32c24:	lsr	r3, r3, #5
   32c28:	ldr	r1, [r4, #20]
   32c2c:	add	r2, r1, r3
   32c30:	add	r2, r2, #1
   32c34:	str	r2, [r4, #20]
   32c38:	mov	r2, #58	; 0x3a
   32c3c:	strb	r2, [r1, r3]
   32c40:	ldr	r3, [r4, #20]
   32c44:	mov	r2, #32
   32c48:	strb	r2, [r3]
   32c4c:	ldrb	r3, [r4, #25]
   32c50:	ldr	r1, [r4, #20]
   32c54:	cmp	r3, #0
   32c58:	addne	r1, r1, #1
   32c5c:	str	r1, [r4, #20]
   32c60:	mov	r0, r5
   32c64:	bl	2fb2c <flatcc_json_parser_struct_as_root@@Base+0x31c>
   32c68:	ldr	r3, [r4, #20]
   32c6c:	add	r0, r3, r0
   32c70:	str	r0, [r4, #20]
   32c74:	pop	{r4, r5, r6, r7, r8, pc}

00032c78 <flatcc_json_printer_uint64_field@@Base>:
   32c78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32c7c:	ldr	r5, [sp, #32]
   32c80:	add	r2, r2, #2
   32c84:	lsl	r2, r2, #1
   32c88:	ldr	ip, [r1, #8]
   32c8c:	cmp	r2, ip
   32c90:	bge	32d60 <flatcc_json_printer_uint64_field@@Base+0xe8>
   32c94:	ldr	ip, [r1, #4]
   32c98:	ldrh	r2, [ip, r2]
   32c9c:	cmp	r2, #0
   32ca0:	beq	32d60 <flatcc_json_printer_uint64_field@@Base+0xe8>
   32ca4:	ldr	ip, [r1]
   32ca8:	cmn	ip, r2
   32cac:	beq	32d60 <flatcc_json_printer_uint64_field@@Base+0xe8>
   32cb0:	ldrd	r6, [ip, r2]
   32cb4:	ldrd	r8, [sp, #40]	; 0x28
   32cb8:	cmp	r9, r7
   32cbc:	cmpeq	r8, r6
   32cc0:	beq	32d50 <flatcc_json_printer_uint64_field@@Base+0xd8>
   32cc4:	ldr	r2, [r1, #16]
   32cc8:	add	ip, r2, #1
   32ccc:	str	ip, [r1, #16]
   32cd0:	cmp	r2, #0
   32cd4:	ldrne	r2, [r0, #20]
   32cd8:	addne	r1, r2, #1
   32cdc:	strne	r1, [r0, #20]
   32ce0:	movne	r1, #44	; 0x2c
   32ce4:	strbne	r1, [r2]
   32ce8:	mov	r8, r3
   32cec:	mov	r4, r0
   32cf0:	ldrb	r3, [r0, #25]
   32cf4:	cmp	r3, #0
   32cf8:	bne	32d74 <flatcc_json_printer_uint64_field@@Base+0xfc>
   32cfc:	ldr	r2, [r0, #20]
   32d00:	ldr	r3, [r0, #16]
   32d04:	cmp	r2, r3
   32d08:	bcs	32dd4 <flatcc_json_printer_uint64_field@@Base+0x15c>
   32d0c:	ldr	r3, [r4, #20]
   32d10:	mov	r2, #34	; 0x22
   32d14:	strb	r2, [r3]
   32d18:	ldrb	r3, [r4, #26]
   32d1c:	ldr	r0, [r4, #20]
   32d20:	cmp	r3, #0
   32d24:	addeq	r0, r0, #1
   32d28:	str	r0, [r4, #20]
   32d2c:	add	r3, r0, r5
   32d30:	ldr	r2, [r4, #16]
   32d34:	cmp	r2, r3
   32d38:	bhi	32de4 <flatcc_json_printer_uint64_field@@Base+0x16c>
   32d3c:	mov	r2, r5
   32d40:	mov	r1, r8
   32d44:	mov	r0, r4
   32d48:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   32d4c:	b	32dfc <flatcc_json_printer_uint64_field@@Base+0x184>
   32d50:	ldrb	r2, [r0, #28]
   32d54:	cmp	r2, #0
   32d58:	beq	32cc4 <flatcc_json_printer_uint64_field@@Base+0x4c>
   32d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32d60:	ldrb	r2, [r0, #29]
   32d64:	cmp	r2, #0
   32d68:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   32d6c:	ldrd	r6, [sp, #40]	; 0x28
   32d70:	b	32cc4 <flatcc_json_printer_uint64_field@@Base+0x4c>
   32d74:	ldr	r3, [r0, #20]
   32d78:	add	r2, r3, #1
   32d7c:	str	r2, [r0, #20]
   32d80:	mov	r2, #10
   32d84:	strb	r2, [r3]
   32d88:	ldrb	r3, [r0, #25]
   32d8c:	ldr	r9, [r0, #32]
   32d90:	mul	r9, r9, r3
   32d94:	ldr	r0, [r0, #20]
   32d98:	add	r3, r0, r9
   32d9c:	ldr	r2, [r4, #16]
   32da0:	cmp	r2, r3
   32da4:	bcc	32dc4 <flatcc_json_printer_uint64_field@@Base+0x14c>
   32da8:	mov	r2, r9
   32dac:	mov	r1, #32
   32db0:	bl	145c4 <memset@plt>
   32db4:	ldr	r3, [r4, #20]
   32db8:	add	r9, r3, r9
   32dbc:	str	r9, [r4, #20]
   32dc0:	b	32d0c <flatcc_json_printer_uint64_field@@Base+0x94>
   32dc4:	mov	r1, r9
   32dc8:	mov	r0, r4
   32dcc:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   32dd0:	b	32d0c <flatcc_json_printer_uint64_field@@Base+0x94>
   32dd4:	ldr	r3, [r0, #44]	; 0x2c
   32dd8:	mov	r1, #0
   32ddc:	blx	r3
   32de0:	b	32d0c <flatcc_json_printer_uint64_field@@Base+0x94>
   32de4:	mov	r2, r5
   32de8:	mov	r1, r8
   32dec:	bl	1454c <memcpy@plt>
   32df0:	ldr	r3, [r4, #20]
   32df4:	add	r5, r3, r5
   32df8:	str	r5, [r4, #20]
   32dfc:	ldr	r3, [r4, #20]
   32e00:	mov	r2, #34	; 0x22
   32e04:	strb	r2, [r3]
   32e08:	ldrb	r3, [r4, #26]
   32e0c:	clz	r3, r3
   32e10:	lsr	r3, r3, #5
   32e14:	ldr	r1, [r4, #20]
   32e18:	add	r2, r1, r3
   32e1c:	add	r2, r2, #1
   32e20:	str	r2, [r4, #20]
   32e24:	mov	r2, #58	; 0x3a
   32e28:	strb	r2, [r1, r3]
   32e2c:	ldr	r3, [r4, #20]
   32e30:	mov	r2, #32
   32e34:	strb	r2, [r3]
   32e38:	ldrb	r3, [r4, #25]
   32e3c:	ldr	r2, [r4, #20]
   32e40:	cmp	r3, #0
   32e44:	addne	r2, r2, #1
   32e48:	str	r2, [r4, #20]
   32e4c:	mov	r0, r6
   32e50:	mov	r1, r7
   32e54:	bl	2fe6c <flatcc_json_parser_struct_as_root@@Base+0x65c>
   32e58:	ldr	r3, [r4, #20]
   32e5c:	add	r0, r3, r0
   32e60:	str	r0, [r4, #20]
   32e64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00032e68 <flatcc_json_printer_int8_field@@Base>:
   32e68:	push	{r4, r5, r6, r7, r8, lr}
   32e6c:	ldr	r6, [sp, #24]
   32e70:	ldrsb	lr, [sp, #28]
   32e74:	add	r2, r2, #2
   32e78:	lsl	r2, r2, #1
   32e7c:	ldr	ip, [r1, #8]
   32e80:	cmp	r2, ip
   32e84:	bge	32f4c <flatcc_json_printer_int8_field@@Base+0xe4>
   32e88:	ldr	ip, [r1, #4]
   32e8c:	ldrh	r2, [ip, r2]
   32e90:	cmp	r2, #0
   32e94:	beq	32f4c <flatcc_json_printer_int8_field@@Base+0xe4>
   32e98:	ldr	ip, [r1]
   32e9c:	cmn	ip, r2
   32ea0:	beq	32f4c <flatcc_json_printer_int8_field@@Base+0xe4>
   32ea4:	ldrsb	r5, [ip, r2]
   32ea8:	cmp	lr, r5
   32eac:	beq	32f3c <flatcc_json_printer_int8_field@@Base+0xd4>
   32eb0:	ldr	r2, [r1, #16]
   32eb4:	add	ip, r2, #1
   32eb8:	str	ip, [r1, #16]
   32ebc:	cmp	r2, #0
   32ec0:	ldrne	r2, [r0, #20]
   32ec4:	addne	r1, r2, #1
   32ec8:	strne	r1, [r0, #20]
   32ecc:	movne	r1, #44	; 0x2c
   32ed0:	strbne	r1, [r2]
   32ed4:	mov	r7, r3
   32ed8:	mov	r4, r0
   32edc:	ldrb	r3, [r0, #25]
   32ee0:	cmp	r3, #0
   32ee4:	bne	32f60 <flatcc_json_printer_int8_field@@Base+0xf8>
   32ee8:	ldr	r2, [r0, #20]
   32eec:	ldr	r3, [r0, #16]
   32ef0:	cmp	r2, r3
   32ef4:	bcs	32fc0 <flatcc_json_printer_int8_field@@Base+0x158>
   32ef8:	ldr	r3, [r4, #20]
   32efc:	mov	r2, #34	; 0x22
   32f00:	strb	r2, [r3]
   32f04:	ldrb	r3, [r4, #26]
   32f08:	ldr	r0, [r4, #20]
   32f0c:	cmp	r3, #0
   32f10:	addeq	r0, r0, #1
   32f14:	str	r0, [r4, #20]
   32f18:	add	r3, r0, r6
   32f1c:	ldr	r2, [r4, #16]
   32f20:	cmp	r2, r3
   32f24:	bhi	32fd0 <flatcc_json_printer_int8_field@@Base+0x168>
   32f28:	mov	r2, r6
   32f2c:	mov	r1, r7
   32f30:	mov	r0, r4
   32f34:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   32f38:	b	32fe8 <flatcc_json_printer_int8_field@@Base+0x180>
   32f3c:	ldrb	r2, [r0, #28]
   32f40:	cmp	r2, #0
   32f44:	beq	32eb0 <flatcc_json_printer_int8_field@@Base+0x48>
   32f48:	pop	{r4, r5, r6, r7, r8, pc}
   32f4c:	ldrb	r2, [r0, #29]
   32f50:	cmp	r2, #0
   32f54:	popeq	{r4, r5, r6, r7, r8, pc}
   32f58:	mov	r5, lr
   32f5c:	b	32eb0 <flatcc_json_printer_int8_field@@Base+0x48>
   32f60:	ldr	r3, [r0, #20]
   32f64:	add	r2, r3, #1
   32f68:	str	r2, [r0, #20]
   32f6c:	mov	r2, #10
   32f70:	strb	r2, [r3]
   32f74:	ldrb	r3, [r0, #25]
   32f78:	ldr	r8, [r0, #32]
   32f7c:	mul	r8, r8, r3
   32f80:	ldr	r0, [r0, #20]
   32f84:	add	r3, r0, r8
   32f88:	ldr	r2, [r4, #16]
   32f8c:	cmp	r2, r3
   32f90:	bcc	32fb0 <flatcc_json_printer_int8_field@@Base+0x148>
   32f94:	mov	r2, r8
   32f98:	mov	r1, #32
   32f9c:	bl	145c4 <memset@plt>
   32fa0:	ldr	r3, [r4, #20]
   32fa4:	add	r8, r3, r8
   32fa8:	str	r8, [r4, #20]
   32fac:	b	32ef8 <flatcc_json_printer_int8_field@@Base+0x90>
   32fb0:	mov	r1, r8
   32fb4:	mov	r0, r4
   32fb8:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   32fbc:	b	32ef8 <flatcc_json_printer_int8_field@@Base+0x90>
   32fc0:	ldr	r3, [r0, #44]	; 0x2c
   32fc4:	mov	r1, #0
   32fc8:	blx	r3
   32fcc:	b	32ef8 <flatcc_json_printer_int8_field@@Base+0x90>
   32fd0:	mov	r2, r6
   32fd4:	mov	r1, r7
   32fd8:	bl	1454c <memcpy@plt>
   32fdc:	ldr	r3, [r4, #20]
   32fe0:	add	r6, r3, r6
   32fe4:	str	r6, [r4, #20]
   32fe8:	ldr	r3, [r4, #20]
   32fec:	mov	r2, #34	; 0x22
   32ff0:	strb	r2, [r3]
   32ff4:	ldrb	r3, [r4, #26]
   32ff8:	clz	r3, r3
   32ffc:	lsr	r3, r3, #5
   33000:	ldr	r1, [r4, #20]
   33004:	add	r2, r1, r3
   33008:	add	r2, r2, #1
   3300c:	str	r2, [r4, #20]
   33010:	mov	r2, #58	; 0x3a
   33014:	strb	r2, [r1, r3]
   33018:	ldr	r3, [r4, #20]
   3301c:	mov	r2, #32
   33020:	strb	r2, [r3]
   33024:	ldrb	r3, [r4, #25]
   33028:	ldr	r1, [r4, #20]
   3302c:	cmp	r3, #0
   33030:	addne	r1, r1, #1
   33034:	str	r1, [r4, #20]
   33038:	mov	r0, r5
   3303c:	bl	304f0 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   33040:	ldr	r3, [r4, #20]
   33044:	add	r0, r3, r0
   33048:	str	r0, [r4, #20]
   3304c:	pop	{r4, r5, r6, r7, r8, pc}

00033050 <flatcc_json_printer_int16_field@@Base>:
   33050:	push	{r4, r5, r6, r7, r8, lr}
   33054:	ldr	r6, [sp, #24]
   33058:	ldrsh	lr, [sp, #28]
   3305c:	add	r2, r2, #2
   33060:	lsl	r2, r2, #1
   33064:	ldr	ip, [r1, #8]
   33068:	cmp	r2, ip
   3306c:	bge	33134 <flatcc_json_printer_int16_field@@Base+0xe4>
   33070:	ldr	ip, [r1, #4]
   33074:	ldrh	r2, [ip, r2]
   33078:	cmp	r2, #0
   3307c:	beq	33134 <flatcc_json_printer_int16_field@@Base+0xe4>
   33080:	ldr	ip, [r1]
   33084:	cmn	ip, r2
   33088:	beq	33134 <flatcc_json_printer_int16_field@@Base+0xe4>
   3308c:	ldrsh	r5, [ip, r2]
   33090:	cmp	lr, r5
   33094:	beq	33124 <flatcc_json_printer_int16_field@@Base+0xd4>
   33098:	ldr	r2, [r1, #16]
   3309c:	add	ip, r2, #1
   330a0:	str	ip, [r1, #16]
   330a4:	cmp	r2, #0
   330a8:	ldrne	r2, [r0, #20]
   330ac:	addne	r1, r2, #1
   330b0:	strne	r1, [r0, #20]
   330b4:	movne	r1, #44	; 0x2c
   330b8:	strbne	r1, [r2]
   330bc:	mov	r7, r3
   330c0:	mov	r4, r0
   330c4:	ldrb	r3, [r0, #25]
   330c8:	cmp	r3, #0
   330cc:	bne	33148 <flatcc_json_printer_int16_field@@Base+0xf8>
   330d0:	ldr	r2, [r0, #20]
   330d4:	ldr	r3, [r0, #16]
   330d8:	cmp	r2, r3
   330dc:	bcs	331a8 <flatcc_json_printer_int16_field@@Base+0x158>
   330e0:	ldr	r3, [r4, #20]
   330e4:	mov	r2, #34	; 0x22
   330e8:	strb	r2, [r3]
   330ec:	ldrb	r3, [r4, #26]
   330f0:	ldr	r0, [r4, #20]
   330f4:	cmp	r3, #0
   330f8:	addeq	r0, r0, #1
   330fc:	str	r0, [r4, #20]
   33100:	add	r3, r0, r6
   33104:	ldr	r2, [r4, #16]
   33108:	cmp	r2, r3
   3310c:	bhi	331b8 <flatcc_json_printer_int16_field@@Base+0x168>
   33110:	mov	r2, r6
   33114:	mov	r1, r7
   33118:	mov	r0, r4
   3311c:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   33120:	b	331d0 <flatcc_json_printer_int16_field@@Base+0x180>
   33124:	ldrb	r2, [r0, #28]
   33128:	cmp	r2, #0
   3312c:	beq	33098 <flatcc_json_printer_int16_field@@Base+0x48>
   33130:	pop	{r4, r5, r6, r7, r8, pc}
   33134:	ldrb	r2, [r0, #29]
   33138:	cmp	r2, #0
   3313c:	popeq	{r4, r5, r6, r7, r8, pc}
   33140:	mov	r5, lr
   33144:	b	33098 <flatcc_json_printer_int16_field@@Base+0x48>
   33148:	ldr	r3, [r0, #20]
   3314c:	add	r2, r3, #1
   33150:	str	r2, [r0, #20]
   33154:	mov	r2, #10
   33158:	strb	r2, [r3]
   3315c:	ldrb	r3, [r0, #25]
   33160:	ldr	r8, [r0, #32]
   33164:	mul	r8, r8, r3
   33168:	ldr	r0, [r0, #20]
   3316c:	add	r3, r0, r8
   33170:	ldr	r2, [r4, #16]
   33174:	cmp	r2, r3
   33178:	bcc	33198 <flatcc_json_printer_int16_field@@Base+0x148>
   3317c:	mov	r2, r8
   33180:	mov	r1, #32
   33184:	bl	145c4 <memset@plt>
   33188:	ldr	r3, [r4, #20]
   3318c:	add	r8, r3, r8
   33190:	str	r8, [r4, #20]
   33194:	b	330e0 <flatcc_json_printer_int16_field@@Base+0x90>
   33198:	mov	r1, r8
   3319c:	mov	r0, r4
   331a0:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   331a4:	b	330e0 <flatcc_json_printer_int16_field@@Base+0x90>
   331a8:	ldr	r3, [r0, #44]	; 0x2c
   331ac:	mov	r1, #0
   331b0:	blx	r3
   331b4:	b	330e0 <flatcc_json_printer_int16_field@@Base+0x90>
   331b8:	mov	r2, r6
   331bc:	mov	r1, r7
   331c0:	bl	1454c <memcpy@plt>
   331c4:	ldr	r3, [r4, #20]
   331c8:	add	r6, r3, r6
   331cc:	str	r6, [r4, #20]
   331d0:	ldr	r3, [r4, #20]
   331d4:	mov	r2, #34	; 0x22
   331d8:	strb	r2, [r3]
   331dc:	ldrb	r3, [r4, #26]
   331e0:	clz	r3, r3
   331e4:	lsr	r3, r3, #5
   331e8:	ldr	r1, [r4, #20]
   331ec:	add	r2, r1, r3
   331f0:	add	r2, r2, #1
   331f4:	str	r2, [r4, #20]
   331f8:	mov	r2, #58	; 0x3a
   331fc:	strb	r2, [r1, r3]
   33200:	ldr	r3, [r4, #20]
   33204:	mov	r2, #32
   33208:	strb	r2, [r3]
   3320c:	ldrb	r3, [r4, #25]
   33210:	ldr	r1, [r4, #20]
   33214:	cmp	r3, #0
   33218:	addne	r1, r1, #1
   3321c:	str	r1, [r4, #20]
   33220:	mov	r0, r5
   33224:	bl	30520 <flatcc_json_parser_struct_as_root@@Base+0xd10>
   33228:	ldr	r3, [r4, #20]
   3322c:	add	r0, r3, r0
   33230:	str	r0, [r4, #20]
   33234:	pop	{r4, r5, r6, r7, r8, pc}

00033238 <flatcc_json_printer_int32_field@@Base>:
   33238:	push	{r4, r5, r6, r7, r8, lr}
   3323c:	ldr	r6, [sp, #24]
   33240:	add	r2, r2, #2
   33244:	lsl	r2, r2, #1
   33248:	ldr	ip, [r1, #8]
   3324c:	cmp	r2, ip
   33250:	bge	3331c <flatcc_json_printer_int32_field@@Base+0xe4>
   33254:	ldr	ip, [r1, #4]
   33258:	ldrh	r2, [ip, r2]
   3325c:	cmp	r2, #0
   33260:	beq	3331c <flatcc_json_printer_int32_field@@Base+0xe4>
   33264:	ldr	ip, [r1]
   33268:	cmn	ip, r2
   3326c:	beq	3331c <flatcc_json_printer_int32_field@@Base+0xe4>
   33270:	ldr	r5, [ip, r2]
   33274:	ldr	r2, [sp, #28]
   33278:	cmp	r2, r5
   3327c:	beq	3330c <flatcc_json_printer_int32_field@@Base+0xd4>
   33280:	ldr	r2, [r1, #16]
   33284:	add	ip, r2, #1
   33288:	str	ip, [r1, #16]
   3328c:	cmp	r2, #0
   33290:	ldrne	r2, [r0, #20]
   33294:	addne	r1, r2, #1
   33298:	strne	r1, [r0, #20]
   3329c:	movne	r1, #44	; 0x2c
   332a0:	strbne	r1, [r2]
   332a4:	mov	r7, r3
   332a8:	mov	r4, r0
   332ac:	ldrb	r3, [r0, #25]
   332b0:	cmp	r3, #0
   332b4:	bne	33330 <flatcc_json_printer_int32_field@@Base+0xf8>
   332b8:	ldr	r2, [r0, #20]
   332bc:	ldr	r3, [r0, #16]
   332c0:	cmp	r2, r3
   332c4:	bcs	33390 <flatcc_json_printer_int32_field@@Base+0x158>
   332c8:	ldr	r3, [r4, #20]
   332cc:	mov	r2, #34	; 0x22
   332d0:	strb	r2, [r3]
   332d4:	ldrb	r3, [r4, #26]
   332d8:	ldr	r0, [r4, #20]
   332dc:	cmp	r3, #0
   332e0:	addeq	r0, r0, #1
   332e4:	str	r0, [r4, #20]
   332e8:	add	r3, r0, r6
   332ec:	ldr	r2, [r4, #16]
   332f0:	cmp	r2, r3
   332f4:	bhi	333a0 <flatcc_json_printer_int32_field@@Base+0x168>
   332f8:	mov	r2, r6
   332fc:	mov	r1, r7
   33300:	mov	r0, r4
   33304:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   33308:	b	333b8 <flatcc_json_printer_int32_field@@Base+0x180>
   3330c:	ldrb	r2, [r0, #28]
   33310:	cmp	r2, #0
   33314:	beq	33280 <flatcc_json_printer_int32_field@@Base+0x48>
   33318:	pop	{r4, r5, r6, r7, r8, pc}
   3331c:	ldrb	r2, [r0, #29]
   33320:	cmp	r2, #0
   33324:	popeq	{r4, r5, r6, r7, r8, pc}
   33328:	ldr	r5, [sp, #28]
   3332c:	b	33280 <flatcc_json_printer_int32_field@@Base+0x48>
   33330:	ldr	r3, [r0, #20]
   33334:	add	r2, r3, #1
   33338:	str	r2, [r0, #20]
   3333c:	mov	r2, #10
   33340:	strb	r2, [r3]
   33344:	ldrb	r3, [r0, #25]
   33348:	ldr	r8, [r0, #32]
   3334c:	mul	r8, r8, r3
   33350:	ldr	r0, [r0, #20]
   33354:	add	r3, r0, r8
   33358:	ldr	r2, [r4, #16]
   3335c:	cmp	r2, r3
   33360:	bcc	33380 <flatcc_json_printer_int32_field@@Base+0x148>
   33364:	mov	r2, r8
   33368:	mov	r1, #32
   3336c:	bl	145c4 <memset@plt>
   33370:	ldr	r3, [r4, #20]
   33374:	add	r8, r3, r8
   33378:	str	r8, [r4, #20]
   3337c:	b	332c8 <flatcc_json_printer_int32_field@@Base+0x90>
   33380:	mov	r1, r8
   33384:	mov	r0, r4
   33388:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3338c:	b	332c8 <flatcc_json_printer_int32_field@@Base+0x90>
   33390:	ldr	r3, [r0, #44]	; 0x2c
   33394:	mov	r1, #0
   33398:	blx	r3
   3339c:	b	332c8 <flatcc_json_printer_int32_field@@Base+0x90>
   333a0:	mov	r2, r6
   333a4:	mov	r1, r7
   333a8:	bl	1454c <memcpy@plt>
   333ac:	ldr	r3, [r4, #20]
   333b0:	add	r6, r3, r6
   333b4:	str	r6, [r4, #20]
   333b8:	ldr	r3, [r4, #20]
   333bc:	mov	r2, #34	; 0x22
   333c0:	strb	r2, [r3]
   333c4:	ldrb	r3, [r4, #26]
   333c8:	clz	r3, r3
   333cc:	lsr	r3, r3, #5
   333d0:	ldr	r1, [r4, #20]
   333d4:	add	r2, r1, r3
   333d8:	add	r2, r2, #1
   333dc:	str	r2, [r4, #20]
   333e0:	mov	r2, #58	; 0x3a
   333e4:	strb	r2, [r1, r3]
   333e8:	ldr	r3, [r4, #20]
   333ec:	mov	r2, #32
   333f0:	strb	r2, [r3]
   333f4:	ldrb	r3, [r4, #25]
   333f8:	ldr	r1, [r4, #20]
   333fc:	cmp	r3, #0
   33400:	addne	r1, r1, #1
   33404:	str	r1, [r4, #20]
   33408:	mov	r0, r5
   3340c:	bl	30550 <flatcc_json_parser_struct_as_root@@Base+0xd40>
   33410:	ldr	r3, [r4, #20]
   33414:	add	r0, r3, r0
   33418:	str	r0, [r4, #20]
   3341c:	pop	{r4, r5, r6, r7, r8, pc}

00033420 <flatcc_json_printer_int64_field@@Base>:
   33420:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33424:	ldr	r5, [sp, #32]
   33428:	add	r2, r2, #2
   3342c:	lsl	r2, r2, #1
   33430:	ldr	ip, [r1, #8]
   33434:	cmp	r2, ip
   33438:	bge	33508 <flatcc_json_printer_int64_field@@Base+0xe8>
   3343c:	ldr	ip, [r1, #4]
   33440:	ldrh	r2, [ip, r2]
   33444:	cmp	r2, #0
   33448:	beq	33508 <flatcc_json_printer_int64_field@@Base+0xe8>
   3344c:	ldr	ip, [r1]
   33450:	cmn	ip, r2
   33454:	beq	33508 <flatcc_json_printer_int64_field@@Base+0xe8>
   33458:	ldrd	r6, [ip, r2]
   3345c:	ldrd	r8, [sp, #40]	; 0x28
   33460:	cmp	r9, r7
   33464:	cmpeq	r8, r6
   33468:	beq	334f8 <flatcc_json_printer_int64_field@@Base+0xd8>
   3346c:	ldr	r2, [r1, #16]
   33470:	add	ip, r2, #1
   33474:	str	ip, [r1, #16]
   33478:	cmp	r2, #0
   3347c:	ldrne	r2, [r0, #20]
   33480:	addne	r1, r2, #1
   33484:	strne	r1, [r0, #20]
   33488:	movne	r1, #44	; 0x2c
   3348c:	strbne	r1, [r2]
   33490:	mov	r8, r3
   33494:	mov	r4, r0
   33498:	ldrb	r3, [r0, #25]
   3349c:	cmp	r3, #0
   334a0:	bne	3351c <flatcc_json_printer_int64_field@@Base+0xfc>
   334a4:	ldr	r2, [r0, #20]
   334a8:	ldr	r3, [r0, #16]
   334ac:	cmp	r2, r3
   334b0:	bcs	3357c <flatcc_json_printer_int64_field@@Base+0x15c>
   334b4:	ldr	r3, [r4, #20]
   334b8:	mov	r2, #34	; 0x22
   334bc:	strb	r2, [r3]
   334c0:	ldrb	r3, [r4, #26]
   334c4:	ldr	r0, [r4, #20]
   334c8:	cmp	r3, #0
   334cc:	addeq	r0, r0, #1
   334d0:	str	r0, [r4, #20]
   334d4:	add	r3, r0, r5
   334d8:	ldr	r2, [r4, #16]
   334dc:	cmp	r2, r3
   334e0:	bhi	3358c <flatcc_json_printer_int64_field@@Base+0x16c>
   334e4:	mov	r2, r5
   334e8:	mov	r1, r8
   334ec:	mov	r0, r4
   334f0:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   334f4:	b	335a4 <flatcc_json_printer_int64_field@@Base+0x184>
   334f8:	ldrb	r2, [r0, #28]
   334fc:	cmp	r2, #0
   33500:	beq	3346c <flatcc_json_printer_int64_field@@Base+0x4c>
   33504:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33508:	ldrb	r2, [r0, #29]
   3350c:	cmp	r2, #0
   33510:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   33514:	ldrd	r6, [sp, #40]	; 0x28
   33518:	b	3346c <flatcc_json_printer_int64_field@@Base+0x4c>
   3351c:	ldr	r3, [r0, #20]
   33520:	add	r2, r3, #1
   33524:	str	r2, [r0, #20]
   33528:	mov	r2, #10
   3352c:	strb	r2, [r3]
   33530:	ldrb	r3, [r0, #25]
   33534:	ldr	r9, [r0, #32]
   33538:	mul	r9, r9, r3
   3353c:	ldr	r0, [r0, #20]
   33540:	add	r3, r0, r9
   33544:	ldr	r2, [r4, #16]
   33548:	cmp	r2, r3
   3354c:	bcc	3356c <flatcc_json_printer_int64_field@@Base+0x14c>
   33550:	mov	r2, r9
   33554:	mov	r1, #32
   33558:	bl	145c4 <memset@plt>
   3355c:	ldr	r3, [r4, #20]
   33560:	add	r9, r3, r9
   33564:	str	r9, [r4, #20]
   33568:	b	334b4 <flatcc_json_printer_int64_field@@Base+0x94>
   3356c:	mov	r1, r9
   33570:	mov	r0, r4
   33574:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   33578:	b	334b4 <flatcc_json_printer_int64_field@@Base+0x94>
   3357c:	ldr	r3, [r0, #44]	; 0x2c
   33580:	mov	r1, #0
   33584:	blx	r3
   33588:	b	334b4 <flatcc_json_printer_int64_field@@Base+0x94>
   3358c:	mov	r2, r5
   33590:	mov	r1, r8
   33594:	bl	1454c <memcpy@plt>
   33598:	ldr	r3, [r4, #20]
   3359c:	add	r5, r3, r5
   335a0:	str	r5, [r4, #20]
   335a4:	ldr	r3, [r4, #20]
   335a8:	mov	r2, #34	; 0x22
   335ac:	strb	r2, [r3]
   335b0:	ldrb	r3, [r4, #26]
   335b4:	clz	r3, r3
   335b8:	lsr	r3, r3, #5
   335bc:	ldr	r1, [r4, #20]
   335c0:	add	r2, r1, r3
   335c4:	add	r2, r2, #1
   335c8:	str	r2, [r4, #20]
   335cc:	mov	r2, #58	; 0x3a
   335d0:	strb	r2, [r1, r3]
   335d4:	ldr	r3, [r4, #20]
   335d8:	mov	r2, #32
   335dc:	strb	r2, [r3]
   335e0:	ldrb	r3, [r4, #25]
   335e4:	ldr	r2, [r4, #20]
   335e8:	cmp	r3, #0
   335ec:	addne	r2, r2, #1
   335f0:	str	r2, [r4, #20]
   335f4:	mov	r0, r6
   335f8:	mov	r1, r7
   335fc:	bl	30578 <flatcc_json_parser_struct_as_root@@Base+0xd68>
   33600:	ldr	r3, [r4, #20]
   33604:	add	r0, r3, r0
   33608:	str	r0, [r4, #20]
   3360c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00033610 <flatcc_json_printer_bool_field@@Base>:
   33610:	push	{r4, r5, r6, r7, r8, lr}
   33614:	ldr	r6, [sp, #24]
   33618:	ldrb	lr, [sp, #28]
   3361c:	add	r2, r2, #2
   33620:	lsl	r2, r2, #1
   33624:	ldr	ip, [r1, #8]
   33628:	cmp	r2, ip
   3362c:	bge	336f4 <flatcc_json_printer_bool_field@@Base+0xe4>
   33630:	ldr	ip, [r1, #4]
   33634:	ldrh	r2, [ip, r2]
   33638:	cmp	r2, #0
   3363c:	beq	336f4 <flatcc_json_printer_bool_field@@Base+0xe4>
   33640:	ldr	ip, [r1]
   33644:	cmn	ip, r2
   33648:	beq	336f4 <flatcc_json_printer_bool_field@@Base+0xe4>
   3364c:	ldrb	r5, [ip, r2]
   33650:	cmp	lr, r5
   33654:	beq	336e4 <flatcc_json_printer_bool_field@@Base+0xd4>
   33658:	ldr	r2, [r1, #16]
   3365c:	add	ip, r2, #1
   33660:	str	ip, [r1, #16]
   33664:	cmp	r2, #0
   33668:	ldrne	r2, [r0, #20]
   3366c:	addne	r1, r2, #1
   33670:	strne	r1, [r0, #20]
   33674:	movne	r1, #44	; 0x2c
   33678:	strbne	r1, [r2]
   3367c:	mov	r7, r3
   33680:	mov	r4, r0
   33684:	ldrb	r3, [r0, #25]
   33688:	cmp	r3, #0
   3368c:	bne	33708 <flatcc_json_printer_bool_field@@Base+0xf8>
   33690:	ldr	r2, [r0, #20]
   33694:	ldr	r3, [r0, #16]
   33698:	cmp	r2, r3
   3369c:	bcs	33768 <flatcc_json_printer_bool_field@@Base+0x158>
   336a0:	ldr	r3, [r4, #20]
   336a4:	mov	r2, #34	; 0x22
   336a8:	strb	r2, [r3]
   336ac:	ldrb	r3, [r4, #26]
   336b0:	ldr	r0, [r4, #20]
   336b4:	cmp	r3, #0
   336b8:	addeq	r0, r0, #1
   336bc:	str	r0, [r4, #20]
   336c0:	add	r3, r0, r6
   336c4:	ldr	r2, [r4, #16]
   336c8:	cmp	r2, r3
   336cc:	bhi	33778 <flatcc_json_printer_bool_field@@Base+0x168>
   336d0:	mov	r2, r6
   336d4:	mov	r1, r7
   336d8:	mov	r0, r4
   336dc:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   336e0:	b	33790 <flatcc_json_printer_bool_field@@Base+0x180>
   336e4:	ldrb	r2, [r0, #28]
   336e8:	cmp	r2, #0
   336ec:	beq	33658 <flatcc_json_printer_bool_field@@Base+0x48>
   336f0:	pop	{r4, r5, r6, r7, r8, pc}
   336f4:	ldrb	r2, [r0, #29]
   336f8:	cmp	r2, #0
   336fc:	popeq	{r4, r5, r6, r7, r8, pc}
   33700:	mov	r5, lr
   33704:	b	33658 <flatcc_json_printer_bool_field@@Base+0x48>
   33708:	ldr	r3, [r0, #20]
   3370c:	add	r2, r3, #1
   33710:	str	r2, [r0, #20]
   33714:	mov	r2, #10
   33718:	strb	r2, [r3]
   3371c:	ldrb	r3, [r0, #25]
   33720:	ldr	r8, [r0, #32]
   33724:	mul	r8, r8, r3
   33728:	ldr	r0, [r0, #20]
   3372c:	add	r3, r0, r8
   33730:	ldr	r2, [r4, #16]
   33734:	cmp	r2, r3
   33738:	bcc	33758 <flatcc_json_printer_bool_field@@Base+0x148>
   3373c:	mov	r2, r8
   33740:	mov	r1, #32
   33744:	bl	145c4 <memset@plt>
   33748:	ldr	r3, [r4, #20]
   3374c:	add	r8, r3, r8
   33750:	str	r8, [r4, #20]
   33754:	b	336a0 <flatcc_json_printer_bool_field@@Base+0x90>
   33758:	mov	r1, r8
   3375c:	mov	r0, r4
   33760:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   33764:	b	336a0 <flatcc_json_printer_bool_field@@Base+0x90>
   33768:	ldr	r3, [r0, #44]	; 0x2c
   3376c:	mov	r1, #0
   33770:	blx	r3
   33774:	b	336a0 <flatcc_json_printer_bool_field@@Base+0x90>
   33778:	mov	r2, r6
   3377c:	mov	r1, r7
   33780:	bl	1454c <memcpy@plt>
   33784:	ldr	r3, [r4, #20]
   33788:	add	r6, r3, r6
   3378c:	str	r6, [r4, #20]
   33790:	ldr	r3, [r4, #20]
   33794:	mov	r2, #34	; 0x22
   33798:	strb	r2, [r3]
   3379c:	ldrb	r3, [r4, #26]
   337a0:	clz	r3, r3
   337a4:	lsr	r3, r3, #5
   337a8:	ldr	r1, [r4, #20]
   337ac:	add	r2, r1, r3
   337b0:	add	r2, r2, #1
   337b4:	str	r2, [r4, #20]
   337b8:	mov	r2, #58	; 0x3a
   337bc:	strb	r2, [r1, r3]
   337c0:	ldr	r3, [r4, #20]
   337c4:	mov	r2, #32
   337c8:	strb	r2, [r3]
   337cc:	ldrb	r3, [r4, #25]
   337d0:	ldr	r1, [r4, #20]
   337d4:	cmp	r3, #0
   337d8:	addne	r1, r1, #1
   337dc:	str	r1, [r4, #20]
   337e0:	mov	r0, r5
   337e4:	bl	30c34 <flatcc_json_parser_struct_as_root@@Base+0x1424>
   337e8:	ldr	r3, [r4, #20]
   337ec:	add	r0, r3, r0
   337f0:	str	r0, [r4, #20]
   337f4:	pop	{r4, r5, r6, r7, r8, pc}

000337f8 <flatcc_json_printer_float_field@@Base>:
   337f8:	push	{r4, r5, r6, r7, r8, lr}
   337fc:	vpush	{d8}
   33800:	ldr	r5, [sp, #32]
   33804:	add	r2, r2, #2
   33808:	lsl	r2, r2, #1
   3380c:	ldr	ip, [r1, #8]
   33810:	cmp	r2, ip
   33814:	bge	338dc <flatcc_json_printer_float_field@@Base+0xe4>
   33818:	ldr	ip, [r1, #4]
   3381c:	ldrh	ip, [ip, r2]
   33820:	cmp	ip, #0
   33824:	beq	338dc <flatcc_json_printer_float_field@@Base+0xe4>
   33828:	ldr	r2, [r1]
   3382c:	adds	r2, r2, ip
   33830:	beq	338dc <flatcc_json_printer_float_field@@Base+0xe4>
   33834:	vldr	s16, [r2]
   33838:	vcmp.f32	s0, s16
   3383c:	vmrs	APSR_nzcv, fpscr
   33840:	bne	33850 <flatcc_json_printer_float_field@@Base+0x58>
   33844:	ldrb	r2, [r0, #28]
   33848:	cmp	r2, #0
   3384c:	bne	339dc <flatcc_json_printer_float_field@@Base+0x1e4>
   33850:	ldr	r2, [r1, #16]
   33854:	add	ip, r2, #1
   33858:	str	ip, [r1, #16]
   3385c:	cmp	r2, #0
   33860:	ldrne	r2, [r0, #20]
   33864:	addne	r1, r2, #1
   33868:	strne	r1, [r0, #20]
   3386c:	movne	r1, #44	; 0x2c
   33870:	strbne	r1, [r2]
   33874:	mov	r6, r3
   33878:	mov	r4, r0
   3387c:	ldrb	r3, [r0, #25]
   33880:	cmp	r3, #0
   33884:	bne	338f0 <flatcc_json_printer_float_field@@Base+0xf8>
   33888:	ldr	r2, [r0, #20]
   3388c:	ldr	r3, [r0, #16]
   33890:	cmp	r2, r3
   33894:	bcs	33950 <flatcc_json_printer_float_field@@Base+0x158>
   33898:	ldr	r3, [r4, #20]
   3389c:	mov	r2, #34	; 0x22
   338a0:	strb	r2, [r3]
   338a4:	ldrb	r3, [r4, #26]
   338a8:	ldr	r0, [r4, #20]
   338ac:	cmp	r3, #0
   338b0:	addeq	r0, r0, #1
   338b4:	str	r0, [r4, #20]
   338b8:	add	r3, r0, r5
   338bc:	ldr	r2, [r4, #16]
   338c0:	cmp	r2, r3
   338c4:	bhi	33960 <flatcc_json_printer_float_field@@Base+0x168>
   338c8:	mov	r2, r5
   338cc:	mov	r1, r6
   338d0:	mov	r0, r4
   338d4:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   338d8:	b	33978 <flatcc_json_printer_float_field@@Base+0x180>
   338dc:	ldrb	r2, [r0, #29]
   338e0:	cmp	r2, #0
   338e4:	beq	339dc <flatcc_json_printer_float_field@@Base+0x1e4>
   338e8:	vmov.f32	s16, s0
   338ec:	b	33850 <flatcc_json_printer_float_field@@Base+0x58>
   338f0:	ldr	r3, [r0, #20]
   338f4:	add	r2, r3, #1
   338f8:	str	r2, [r0, #20]
   338fc:	mov	r2, #10
   33900:	strb	r2, [r3]
   33904:	ldrb	r3, [r0, #25]
   33908:	ldr	r7, [r0, #32]
   3390c:	mul	r7, r7, r3
   33910:	ldr	r0, [r0, #20]
   33914:	add	r3, r0, r7
   33918:	ldr	r2, [r4, #16]
   3391c:	cmp	r2, r3
   33920:	bcc	33940 <flatcc_json_printer_float_field@@Base+0x148>
   33924:	mov	r2, r7
   33928:	mov	r1, #32
   3392c:	bl	145c4 <memset@plt>
   33930:	ldr	r3, [r4, #20]
   33934:	add	r7, r3, r7
   33938:	str	r7, [r4, #20]
   3393c:	b	33898 <flatcc_json_printer_float_field@@Base+0xa0>
   33940:	mov	r1, r7
   33944:	mov	r0, r4
   33948:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3394c:	b	33898 <flatcc_json_printer_float_field@@Base+0xa0>
   33950:	ldr	r3, [r0, #44]	; 0x2c
   33954:	mov	r1, #0
   33958:	blx	r3
   3395c:	b	33898 <flatcc_json_printer_float_field@@Base+0xa0>
   33960:	mov	r2, r5
   33964:	mov	r1, r6
   33968:	bl	1454c <memcpy@plt>
   3396c:	ldr	r3, [r4, #20]
   33970:	add	r5, r3, r5
   33974:	str	r5, [r4, #20]
   33978:	ldr	r3, [r4, #20]
   3397c:	mov	r2, #34	; 0x22
   33980:	strb	r2, [r3]
   33984:	ldrb	r3, [r4, #26]
   33988:	clz	r3, r3
   3398c:	lsr	r3, r3, #5
   33990:	ldr	r1, [r4, #20]
   33994:	add	r2, r1, r3
   33998:	add	r2, r2, #1
   3399c:	str	r2, [r4, #20]
   339a0:	mov	r2, #58	; 0x3a
   339a4:	strb	r2, [r1, r3]
   339a8:	ldr	r3, [r4, #20]
   339ac:	mov	r2, #32
   339b0:	strb	r2, [r3]
   339b4:	ldrb	r3, [r4, #25]
   339b8:	ldr	r0, [r4, #20]
   339bc:	cmp	r3, #0
   339c0:	addne	r0, r0, #1
   339c4:	str	r0, [r4, #20]
   339c8:	vcvt.f64.f32	d0, s16
   339cc:	bl	3131c <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   339d0:	ldr	r3, [r4, #20]
   339d4:	add	r0, r3, r0
   339d8:	str	r0, [r4, #20]
   339dc:	vpop	{d8}
   339e0:	pop	{r4, r5, r6, r7, r8, pc}

000339e4 <flatcc_json_printer_double_field@@Base>:
   339e4:	push	{r4, r5, r6, r7, r8, lr}
   339e8:	vpush	{d8}
   339ec:	ldr	r5, [sp, #32]
   339f0:	add	r2, r2, #2
   339f4:	lsl	r2, r2, #1
   339f8:	ldr	ip, [r1, #8]
   339fc:	cmp	r2, ip
   33a00:	bge	33ac8 <flatcc_json_printer_double_field@@Base+0xe4>
   33a04:	ldr	ip, [r1, #4]
   33a08:	ldrh	ip, [ip, r2]
   33a0c:	cmp	ip, #0
   33a10:	beq	33ac8 <flatcc_json_printer_double_field@@Base+0xe4>
   33a14:	ldr	r2, [r1]
   33a18:	adds	r2, r2, ip
   33a1c:	beq	33ac8 <flatcc_json_printer_double_field@@Base+0xe4>
   33a20:	vldr	d8, [r2]
   33a24:	vcmp.f64	d0, d8
   33a28:	vmrs	APSR_nzcv, fpscr
   33a2c:	bne	33a3c <flatcc_json_printer_double_field@@Base+0x58>
   33a30:	ldrb	r2, [r0, #28]
   33a34:	cmp	r2, #0
   33a38:	bne	33bc8 <flatcc_json_printer_double_field@@Base+0x1e4>
   33a3c:	ldr	r2, [r1, #16]
   33a40:	add	ip, r2, #1
   33a44:	str	ip, [r1, #16]
   33a48:	cmp	r2, #0
   33a4c:	ldrne	r2, [r0, #20]
   33a50:	addne	r1, r2, #1
   33a54:	strne	r1, [r0, #20]
   33a58:	movne	r1, #44	; 0x2c
   33a5c:	strbne	r1, [r2]
   33a60:	mov	r6, r3
   33a64:	mov	r4, r0
   33a68:	ldrb	r3, [r0, #25]
   33a6c:	cmp	r3, #0
   33a70:	bne	33adc <flatcc_json_printer_double_field@@Base+0xf8>
   33a74:	ldr	r2, [r0, #20]
   33a78:	ldr	r3, [r0, #16]
   33a7c:	cmp	r2, r3
   33a80:	bcs	33b3c <flatcc_json_printer_double_field@@Base+0x158>
   33a84:	ldr	r3, [r4, #20]
   33a88:	mov	r2, #34	; 0x22
   33a8c:	strb	r2, [r3]
   33a90:	ldrb	r3, [r4, #26]
   33a94:	ldr	r0, [r4, #20]
   33a98:	cmp	r3, #0
   33a9c:	addeq	r0, r0, #1
   33aa0:	str	r0, [r4, #20]
   33aa4:	add	r3, r0, r5
   33aa8:	ldr	r2, [r4, #16]
   33aac:	cmp	r2, r3
   33ab0:	bhi	33b4c <flatcc_json_printer_double_field@@Base+0x168>
   33ab4:	mov	r2, r5
   33ab8:	mov	r1, r6
   33abc:	mov	r0, r4
   33ac0:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   33ac4:	b	33b64 <flatcc_json_printer_double_field@@Base+0x180>
   33ac8:	ldrb	r2, [r0, #29]
   33acc:	cmp	r2, #0
   33ad0:	beq	33bc8 <flatcc_json_printer_double_field@@Base+0x1e4>
   33ad4:	vmov.f64	d8, d0
   33ad8:	b	33a3c <flatcc_json_printer_double_field@@Base+0x58>
   33adc:	ldr	r3, [r0, #20]
   33ae0:	add	r2, r3, #1
   33ae4:	str	r2, [r0, #20]
   33ae8:	mov	r2, #10
   33aec:	strb	r2, [r3]
   33af0:	ldrb	r3, [r0, #25]
   33af4:	ldr	r7, [r0, #32]
   33af8:	mul	r7, r7, r3
   33afc:	ldr	r0, [r0, #20]
   33b00:	add	r3, r0, r7
   33b04:	ldr	r2, [r4, #16]
   33b08:	cmp	r2, r3
   33b0c:	bcc	33b2c <flatcc_json_printer_double_field@@Base+0x148>
   33b10:	mov	r2, r7
   33b14:	mov	r1, #32
   33b18:	bl	145c4 <memset@plt>
   33b1c:	ldr	r3, [r4, #20]
   33b20:	add	r7, r3, r7
   33b24:	str	r7, [r4, #20]
   33b28:	b	33a84 <flatcc_json_printer_double_field@@Base+0xa0>
   33b2c:	mov	r1, r7
   33b30:	mov	r0, r4
   33b34:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   33b38:	b	33a84 <flatcc_json_printer_double_field@@Base+0xa0>
   33b3c:	ldr	r3, [r0, #44]	; 0x2c
   33b40:	mov	r1, #0
   33b44:	blx	r3
   33b48:	b	33a84 <flatcc_json_printer_double_field@@Base+0xa0>
   33b4c:	mov	r2, r5
   33b50:	mov	r1, r6
   33b54:	bl	1454c <memcpy@plt>
   33b58:	ldr	r3, [r4, #20]
   33b5c:	add	r5, r3, r5
   33b60:	str	r5, [r4, #20]
   33b64:	ldr	r3, [r4, #20]
   33b68:	mov	r2, #34	; 0x22
   33b6c:	strb	r2, [r3]
   33b70:	ldrb	r3, [r4, #26]
   33b74:	clz	r3, r3
   33b78:	lsr	r3, r3, #5
   33b7c:	ldr	r1, [r4, #20]
   33b80:	add	r2, r1, r3
   33b84:	add	r2, r2, #1
   33b88:	str	r2, [r4, #20]
   33b8c:	mov	r2, #58	; 0x3a
   33b90:	strb	r2, [r1, r3]
   33b94:	ldr	r3, [r4, #20]
   33b98:	mov	r2, #32
   33b9c:	strb	r2, [r3]
   33ba0:	ldrb	r3, [r4, #25]
   33ba4:	ldr	r0, [r4, #20]
   33ba8:	cmp	r3, #0
   33bac:	addne	r0, r0, #1
   33bb0:	str	r0, [r4, #20]
   33bb4:	vmov.f64	d0, d8
   33bb8:	bl	3131c <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   33bbc:	ldr	r3, [r4, #20]
   33bc0:	add	r0, r3, r0
   33bc4:	str	r0, [r4, #20]
   33bc8:	vpop	{d8}
   33bcc:	pop	{r4, r5, r6, r7, r8, pc}

00033bd0 <flatcc_json_printer_uint8_enum_field@@Base>:
   33bd0:	push	{r4, r5, r6, r7, r8, lr}
   33bd4:	ldr	r6, [sp, #24]
   33bd8:	ldrb	lr, [sp, #28]
   33bdc:	add	r2, r2, #2
   33be0:	lsl	r2, r2, #1
   33be4:	ldr	ip, [r1, #8]
   33be8:	cmp	r2, ip
   33bec:	bge	33cb4 <flatcc_json_printer_uint8_enum_field@@Base+0xe4>
   33bf0:	ldr	ip, [r1, #4]
   33bf4:	ldrh	r2, [ip, r2]
   33bf8:	cmp	r2, #0
   33bfc:	beq	33cb4 <flatcc_json_printer_uint8_enum_field@@Base+0xe4>
   33c00:	ldr	ip, [r1]
   33c04:	cmn	ip, r2
   33c08:	beq	33cb4 <flatcc_json_printer_uint8_enum_field@@Base+0xe4>
   33c0c:	ldrb	r5, [ip, r2]
   33c10:	cmp	lr, r5
   33c14:	beq	33ca4 <flatcc_json_printer_uint8_enum_field@@Base+0xd4>
   33c18:	ldr	r2, [r1, #16]
   33c1c:	add	ip, r2, #1
   33c20:	str	ip, [r1, #16]
   33c24:	cmp	r2, #0
   33c28:	ldrne	r2, [r0, #20]
   33c2c:	addne	r1, r2, #1
   33c30:	strne	r1, [r0, #20]
   33c34:	movne	r1, #44	; 0x2c
   33c38:	strbne	r1, [r2]
   33c3c:	mov	r7, r3
   33c40:	mov	r4, r0
   33c44:	ldrb	r3, [r0, #25]
   33c48:	cmp	r3, #0
   33c4c:	bne	33cc8 <flatcc_json_printer_uint8_enum_field@@Base+0xf8>
   33c50:	ldr	r2, [r0, #20]
   33c54:	ldr	r3, [r0, #16]
   33c58:	cmp	r2, r3
   33c5c:	bcs	33d28 <flatcc_json_printer_uint8_enum_field@@Base+0x158>
   33c60:	ldr	r3, [r4, #20]
   33c64:	mov	r2, #34	; 0x22
   33c68:	strb	r2, [r3]
   33c6c:	ldrb	r3, [r4, #26]
   33c70:	ldr	r0, [r4, #20]
   33c74:	cmp	r3, #0
   33c78:	addeq	r0, r0, #1
   33c7c:	str	r0, [r4, #20]
   33c80:	add	r3, r0, r6
   33c84:	ldr	r2, [r4, #16]
   33c88:	cmp	r2, r3
   33c8c:	bhi	33d38 <flatcc_json_printer_uint8_enum_field@@Base+0x168>
   33c90:	mov	r2, r6
   33c94:	mov	r1, r7
   33c98:	mov	r0, r4
   33c9c:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   33ca0:	b	33d50 <flatcc_json_printer_uint8_enum_field@@Base+0x180>
   33ca4:	ldrb	r2, [r0, #28]
   33ca8:	cmp	r2, #0
   33cac:	beq	33c18 <flatcc_json_printer_uint8_enum_field@@Base+0x48>
   33cb0:	pop	{r4, r5, r6, r7, r8, pc}
   33cb4:	ldrb	r2, [r0, #29]
   33cb8:	cmp	r2, #0
   33cbc:	popeq	{r4, r5, r6, r7, r8, pc}
   33cc0:	mov	r5, lr
   33cc4:	b	33c18 <flatcc_json_printer_uint8_enum_field@@Base+0x48>
   33cc8:	ldr	r3, [r0, #20]
   33ccc:	add	r2, r3, #1
   33cd0:	str	r2, [r0, #20]
   33cd4:	mov	r2, #10
   33cd8:	strb	r2, [r3]
   33cdc:	ldrb	r3, [r0, #25]
   33ce0:	ldr	r8, [r0, #32]
   33ce4:	mul	r8, r8, r3
   33ce8:	ldr	r0, [r0, #20]
   33cec:	add	r3, r0, r8
   33cf0:	ldr	r2, [r4, #16]
   33cf4:	cmp	r2, r3
   33cf8:	bcc	33d18 <flatcc_json_printer_uint8_enum_field@@Base+0x148>
   33cfc:	mov	r2, r8
   33d00:	mov	r1, #32
   33d04:	bl	145c4 <memset@plt>
   33d08:	ldr	r3, [r4, #20]
   33d0c:	add	r8, r3, r8
   33d10:	str	r8, [r4, #20]
   33d14:	b	33c60 <flatcc_json_printer_uint8_enum_field@@Base+0x90>
   33d18:	mov	r1, r8
   33d1c:	mov	r0, r4
   33d20:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   33d24:	b	33c60 <flatcc_json_printer_uint8_enum_field@@Base+0x90>
   33d28:	ldr	r3, [r0, #44]	; 0x2c
   33d2c:	mov	r1, #0
   33d30:	blx	r3
   33d34:	b	33c60 <flatcc_json_printer_uint8_enum_field@@Base+0x90>
   33d38:	mov	r2, r6
   33d3c:	mov	r1, r7
   33d40:	bl	1454c <memcpy@plt>
   33d44:	ldr	r3, [r4, #20]
   33d48:	add	r6, r3, r6
   33d4c:	str	r6, [r4, #20]
   33d50:	ldr	r3, [r4, #20]
   33d54:	mov	r2, #34	; 0x22
   33d58:	strb	r2, [r3]
   33d5c:	ldrb	r3, [r4, #26]
   33d60:	clz	r3, r3
   33d64:	lsr	r3, r3, #5
   33d68:	ldr	r1, [r4, #20]
   33d6c:	add	r2, r1, r3
   33d70:	add	r2, r2, #1
   33d74:	str	r2, [r4, #20]
   33d78:	mov	r2, #58	; 0x3a
   33d7c:	strb	r2, [r1, r3]
   33d80:	ldr	r3, [r4, #20]
   33d84:	mov	r2, #32
   33d88:	strb	r2, [r3]
   33d8c:	ldrb	r3, [r4, #25]
   33d90:	ldr	r1, [r4, #20]
   33d94:	cmp	r3, #0
   33d98:	addne	r1, r1, #1
   33d9c:	str	r1, [r4, #20]
   33da0:	ldrb	r3, [r4, #27]
   33da4:	cmp	r3, #0
   33da8:	bne	33dc0 <flatcc_json_printer_uint8_enum_field@@Base+0x1f0>
   33dac:	mov	r1, r5
   33db0:	mov	r0, r4
   33db4:	ldr	r3, [sp, #32]
   33db8:	blx	r3
   33dbc:	pop	{r4, r5, r6, r7, r8, pc}
   33dc0:	mov	r0, r5
   33dc4:	bl	2f8e8 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   33dc8:	ldr	r3, [r4, #20]
   33dcc:	add	r0, r3, r0
   33dd0:	str	r0, [r4, #20]
   33dd4:	pop	{r4, r5, r6, r7, r8, pc}

00033dd8 <flatcc_json_printer_uint16_enum_field@@Base>:
   33dd8:	push	{r4, r5, r6, r7, r8, lr}
   33ddc:	ldr	r6, [sp, #24]
   33de0:	ldrh	lr, [sp, #28]
   33de4:	add	r2, r2, #2
   33de8:	lsl	r2, r2, #1
   33dec:	ldr	ip, [r1, #8]
   33df0:	cmp	r2, ip
   33df4:	bge	33ebc <flatcc_json_printer_uint16_enum_field@@Base+0xe4>
   33df8:	ldr	ip, [r1, #4]
   33dfc:	ldrh	r2, [ip, r2]
   33e00:	cmp	r2, #0
   33e04:	beq	33ebc <flatcc_json_printer_uint16_enum_field@@Base+0xe4>
   33e08:	ldr	ip, [r1]
   33e0c:	cmn	ip, r2
   33e10:	beq	33ebc <flatcc_json_printer_uint16_enum_field@@Base+0xe4>
   33e14:	ldrh	r5, [ip, r2]
   33e18:	cmp	lr, r5
   33e1c:	beq	33eac <flatcc_json_printer_uint16_enum_field@@Base+0xd4>
   33e20:	ldr	r2, [r1, #16]
   33e24:	add	ip, r2, #1
   33e28:	str	ip, [r1, #16]
   33e2c:	cmp	r2, #0
   33e30:	ldrne	r2, [r0, #20]
   33e34:	addne	r1, r2, #1
   33e38:	strne	r1, [r0, #20]
   33e3c:	movne	r1, #44	; 0x2c
   33e40:	strbne	r1, [r2]
   33e44:	mov	r7, r3
   33e48:	mov	r4, r0
   33e4c:	ldrb	r3, [r0, #25]
   33e50:	cmp	r3, #0
   33e54:	bne	33ed0 <flatcc_json_printer_uint16_enum_field@@Base+0xf8>
   33e58:	ldr	r2, [r0, #20]
   33e5c:	ldr	r3, [r0, #16]
   33e60:	cmp	r2, r3
   33e64:	bcs	33f30 <flatcc_json_printer_uint16_enum_field@@Base+0x158>
   33e68:	ldr	r3, [r4, #20]
   33e6c:	mov	r2, #34	; 0x22
   33e70:	strb	r2, [r3]
   33e74:	ldrb	r3, [r4, #26]
   33e78:	ldr	r0, [r4, #20]
   33e7c:	cmp	r3, #0
   33e80:	addeq	r0, r0, #1
   33e84:	str	r0, [r4, #20]
   33e88:	add	r3, r0, r6
   33e8c:	ldr	r2, [r4, #16]
   33e90:	cmp	r2, r3
   33e94:	bhi	33f40 <flatcc_json_printer_uint16_enum_field@@Base+0x168>
   33e98:	mov	r2, r6
   33e9c:	mov	r1, r7
   33ea0:	mov	r0, r4
   33ea4:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   33ea8:	b	33f58 <flatcc_json_printer_uint16_enum_field@@Base+0x180>
   33eac:	ldrb	r2, [r0, #28]
   33eb0:	cmp	r2, #0
   33eb4:	beq	33e20 <flatcc_json_printer_uint16_enum_field@@Base+0x48>
   33eb8:	pop	{r4, r5, r6, r7, r8, pc}
   33ebc:	ldrb	r2, [r0, #29]
   33ec0:	cmp	r2, #0
   33ec4:	popeq	{r4, r5, r6, r7, r8, pc}
   33ec8:	mov	r5, lr
   33ecc:	b	33e20 <flatcc_json_printer_uint16_enum_field@@Base+0x48>
   33ed0:	ldr	r3, [r0, #20]
   33ed4:	add	r2, r3, #1
   33ed8:	str	r2, [r0, #20]
   33edc:	mov	r2, #10
   33ee0:	strb	r2, [r3]
   33ee4:	ldrb	r3, [r0, #25]
   33ee8:	ldr	r8, [r0, #32]
   33eec:	mul	r8, r8, r3
   33ef0:	ldr	r0, [r0, #20]
   33ef4:	add	r3, r0, r8
   33ef8:	ldr	r2, [r4, #16]
   33efc:	cmp	r2, r3
   33f00:	bcc	33f20 <flatcc_json_printer_uint16_enum_field@@Base+0x148>
   33f04:	mov	r2, r8
   33f08:	mov	r1, #32
   33f0c:	bl	145c4 <memset@plt>
   33f10:	ldr	r3, [r4, #20]
   33f14:	add	r8, r3, r8
   33f18:	str	r8, [r4, #20]
   33f1c:	b	33e68 <flatcc_json_printer_uint16_enum_field@@Base+0x90>
   33f20:	mov	r1, r8
   33f24:	mov	r0, r4
   33f28:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   33f2c:	b	33e68 <flatcc_json_printer_uint16_enum_field@@Base+0x90>
   33f30:	ldr	r3, [r0, #44]	; 0x2c
   33f34:	mov	r1, #0
   33f38:	blx	r3
   33f3c:	b	33e68 <flatcc_json_printer_uint16_enum_field@@Base+0x90>
   33f40:	mov	r2, r6
   33f44:	mov	r1, r7
   33f48:	bl	1454c <memcpy@plt>
   33f4c:	ldr	r3, [r4, #20]
   33f50:	add	r6, r3, r6
   33f54:	str	r6, [r4, #20]
   33f58:	ldr	r3, [r4, #20]
   33f5c:	mov	r2, #34	; 0x22
   33f60:	strb	r2, [r3]
   33f64:	ldrb	r3, [r4, #26]
   33f68:	clz	r3, r3
   33f6c:	lsr	r3, r3, #5
   33f70:	ldr	r1, [r4, #20]
   33f74:	add	r2, r1, r3
   33f78:	add	r2, r2, #1
   33f7c:	str	r2, [r4, #20]
   33f80:	mov	r2, #58	; 0x3a
   33f84:	strb	r2, [r1, r3]
   33f88:	ldr	r3, [r4, #20]
   33f8c:	mov	r2, #32
   33f90:	strb	r2, [r3]
   33f94:	ldrb	r3, [r4, #25]
   33f98:	ldr	r1, [r4, #20]
   33f9c:	cmp	r3, #0
   33fa0:	addne	r1, r1, #1
   33fa4:	str	r1, [r4, #20]
   33fa8:	ldrb	r3, [r4, #27]
   33fac:	cmp	r3, #0
   33fb0:	bne	33fc8 <flatcc_json_printer_uint16_enum_field@@Base+0x1f0>
   33fb4:	mov	r1, r5
   33fb8:	mov	r0, r4
   33fbc:	ldr	r3, [sp, #32]
   33fc0:	blx	r3
   33fc4:	pop	{r4, r5, r6, r7, r8, pc}
   33fc8:	mov	r0, r5
   33fcc:	bl	2f9a8 <flatcc_json_parser_struct_as_root@@Base+0x198>
   33fd0:	ldr	r3, [r4, #20]
   33fd4:	add	r0, r3, r0
   33fd8:	str	r0, [r4, #20]
   33fdc:	pop	{r4, r5, r6, r7, r8, pc}

00033fe0 <flatcc_json_printer_uint32_enum_field@@Base>:
   33fe0:	push	{r4, r5, r6, r7, r8, lr}
   33fe4:	ldr	r6, [sp, #24]
   33fe8:	add	r2, r2, #2
   33fec:	lsl	r2, r2, #1
   33ff0:	ldr	ip, [r1, #8]
   33ff4:	cmp	r2, ip
   33ff8:	bge	340c4 <flatcc_json_printer_uint32_enum_field@@Base+0xe4>
   33ffc:	ldr	ip, [r1, #4]
   34000:	ldrh	r2, [ip, r2]
   34004:	cmp	r2, #0
   34008:	beq	340c4 <flatcc_json_printer_uint32_enum_field@@Base+0xe4>
   3400c:	ldr	ip, [r1]
   34010:	cmn	ip, r2
   34014:	beq	340c4 <flatcc_json_printer_uint32_enum_field@@Base+0xe4>
   34018:	ldr	r5, [ip, r2]
   3401c:	ldr	r2, [sp, #28]
   34020:	cmp	r2, r5
   34024:	beq	340b4 <flatcc_json_printer_uint32_enum_field@@Base+0xd4>
   34028:	ldr	r2, [r1, #16]
   3402c:	add	ip, r2, #1
   34030:	str	ip, [r1, #16]
   34034:	cmp	r2, #0
   34038:	ldrne	r2, [r0, #20]
   3403c:	addne	r1, r2, #1
   34040:	strne	r1, [r0, #20]
   34044:	movne	r1, #44	; 0x2c
   34048:	strbne	r1, [r2]
   3404c:	mov	r7, r3
   34050:	mov	r4, r0
   34054:	ldrb	r3, [r0, #25]
   34058:	cmp	r3, #0
   3405c:	bne	340d8 <flatcc_json_printer_uint32_enum_field@@Base+0xf8>
   34060:	ldr	r2, [r0, #20]
   34064:	ldr	r3, [r0, #16]
   34068:	cmp	r2, r3
   3406c:	bcs	34138 <flatcc_json_printer_uint32_enum_field@@Base+0x158>
   34070:	ldr	r3, [r4, #20]
   34074:	mov	r2, #34	; 0x22
   34078:	strb	r2, [r3]
   3407c:	ldrb	r3, [r4, #26]
   34080:	ldr	r0, [r4, #20]
   34084:	cmp	r3, #0
   34088:	addeq	r0, r0, #1
   3408c:	str	r0, [r4, #20]
   34090:	add	r3, r0, r6
   34094:	ldr	r2, [r4, #16]
   34098:	cmp	r2, r3
   3409c:	bhi	34148 <flatcc_json_printer_uint32_enum_field@@Base+0x168>
   340a0:	mov	r2, r6
   340a4:	mov	r1, r7
   340a8:	mov	r0, r4
   340ac:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   340b0:	b	34160 <flatcc_json_printer_uint32_enum_field@@Base+0x180>
   340b4:	ldrb	r2, [r0, #28]
   340b8:	cmp	r2, #0
   340bc:	beq	34028 <flatcc_json_printer_uint32_enum_field@@Base+0x48>
   340c0:	pop	{r4, r5, r6, r7, r8, pc}
   340c4:	ldrb	r2, [r0, #29]
   340c8:	cmp	r2, #0
   340cc:	popeq	{r4, r5, r6, r7, r8, pc}
   340d0:	ldr	r5, [sp, #28]
   340d4:	b	34028 <flatcc_json_printer_uint32_enum_field@@Base+0x48>
   340d8:	ldr	r3, [r0, #20]
   340dc:	add	r2, r3, #1
   340e0:	str	r2, [r0, #20]
   340e4:	mov	r2, #10
   340e8:	strb	r2, [r3]
   340ec:	ldrb	r3, [r0, #25]
   340f0:	ldr	r8, [r0, #32]
   340f4:	mul	r8, r8, r3
   340f8:	ldr	r0, [r0, #20]
   340fc:	add	r3, r0, r8
   34100:	ldr	r2, [r4, #16]
   34104:	cmp	r2, r3
   34108:	bcc	34128 <flatcc_json_printer_uint32_enum_field@@Base+0x148>
   3410c:	mov	r2, r8
   34110:	mov	r1, #32
   34114:	bl	145c4 <memset@plt>
   34118:	ldr	r3, [r4, #20]
   3411c:	add	r8, r3, r8
   34120:	str	r8, [r4, #20]
   34124:	b	34070 <flatcc_json_printer_uint32_enum_field@@Base+0x90>
   34128:	mov	r1, r8
   3412c:	mov	r0, r4
   34130:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   34134:	b	34070 <flatcc_json_printer_uint32_enum_field@@Base+0x90>
   34138:	ldr	r3, [r0, #44]	; 0x2c
   3413c:	mov	r1, #0
   34140:	blx	r3
   34144:	b	34070 <flatcc_json_printer_uint32_enum_field@@Base+0x90>
   34148:	mov	r2, r6
   3414c:	mov	r1, r7
   34150:	bl	1454c <memcpy@plt>
   34154:	ldr	r3, [r4, #20]
   34158:	add	r6, r3, r6
   3415c:	str	r6, [r4, #20]
   34160:	ldr	r3, [r4, #20]
   34164:	mov	r2, #34	; 0x22
   34168:	strb	r2, [r3]
   3416c:	ldrb	r3, [r4, #26]
   34170:	clz	r3, r3
   34174:	lsr	r3, r3, #5
   34178:	ldr	r1, [r4, #20]
   3417c:	add	r2, r1, r3
   34180:	add	r2, r2, #1
   34184:	str	r2, [r4, #20]
   34188:	mov	r2, #58	; 0x3a
   3418c:	strb	r2, [r1, r3]
   34190:	ldr	r3, [r4, #20]
   34194:	mov	r2, #32
   34198:	strb	r2, [r3]
   3419c:	ldrb	r3, [r4, #25]
   341a0:	ldr	r1, [r4, #20]
   341a4:	cmp	r3, #0
   341a8:	addne	r1, r1, #1
   341ac:	str	r1, [r4, #20]
   341b0:	ldrb	r3, [r4, #27]
   341b4:	cmp	r3, #0
   341b8:	bne	341d0 <flatcc_json_printer_uint32_enum_field@@Base+0x1f0>
   341bc:	mov	r1, r5
   341c0:	mov	r0, r4
   341c4:	ldr	r3, [sp, #32]
   341c8:	blx	r3
   341cc:	pop	{r4, r5, r6, r7, r8, pc}
   341d0:	mov	r0, r5
   341d4:	bl	2fb2c <flatcc_json_parser_struct_as_root@@Base+0x31c>
   341d8:	ldr	r3, [r4, #20]
   341dc:	add	r0, r3, r0
   341e0:	str	r0, [r4, #20]
   341e4:	pop	{r4, r5, r6, r7, r8, pc}

000341e8 <flatcc_json_printer_uint64_enum_field@@Base>:
   341e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   341ec:	ldr	r5, [sp, #32]
   341f0:	add	r2, r2, #2
   341f4:	lsl	r2, r2, #1
   341f8:	ldr	ip, [r1, #8]
   341fc:	cmp	r2, ip
   34200:	bge	342d0 <flatcc_json_printer_uint64_enum_field@@Base+0xe8>
   34204:	ldr	ip, [r1, #4]
   34208:	ldrh	r2, [ip, r2]
   3420c:	cmp	r2, #0
   34210:	beq	342d0 <flatcc_json_printer_uint64_enum_field@@Base+0xe8>
   34214:	ldr	ip, [r1]
   34218:	cmn	ip, r2
   3421c:	beq	342d0 <flatcc_json_printer_uint64_enum_field@@Base+0xe8>
   34220:	ldrd	r6, [ip, r2]
   34224:	ldrd	r8, [sp, #40]	; 0x28
   34228:	cmp	r9, r7
   3422c:	cmpeq	r8, r6
   34230:	beq	342c0 <flatcc_json_printer_uint64_enum_field@@Base+0xd8>
   34234:	ldr	r2, [r1, #16]
   34238:	add	ip, r2, #1
   3423c:	str	ip, [r1, #16]
   34240:	cmp	r2, #0
   34244:	ldrne	r2, [r0, #20]
   34248:	addne	r1, r2, #1
   3424c:	strne	r1, [r0, #20]
   34250:	movne	r1, #44	; 0x2c
   34254:	strbne	r1, [r2]
   34258:	mov	r8, r3
   3425c:	mov	r4, r0
   34260:	ldrb	r3, [r0, #25]
   34264:	cmp	r3, #0
   34268:	bne	342e4 <flatcc_json_printer_uint64_enum_field@@Base+0xfc>
   3426c:	ldr	r2, [r0, #20]
   34270:	ldr	r3, [r0, #16]
   34274:	cmp	r2, r3
   34278:	bcs	34344 <flatcc_json_printer_uint64_enum_field@@Base+0x15c>
   3427c:	ldr	r3, [r4, #20]
   34280:	mov	r2, #34	; 0x22
   34284:	strb	r2, [r3]
   34288:	ldrb	r3, [r4, #26]
   3428c:	ldr	r0, [r4, #20]
   34290:	cmp	r3, #0
   34294:	addeq	r0, r0, #1
   34298:	str	r0, [r4, #20]
   3429c:	add	r3, r0, r5
   342a0:	ldr	r2, [r4, #16]
   342a4:	cmp	r2, r3
   342a8:	bhi	34354 <flatcc_json_printer_uint64_enum_field@@Base+0x16c>
   342ac:	mov	r2, r5
   342b0:	mov	r1, r8
   342b4:	mov	r0, r4
   342b8:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   342bc:	b	3436c <flatcc_json_printer_uint64_enum_field@@Base+0x184>
   342c0:	ldrb	r2, [r0, #28]
   342c4:	cmp	r2, #0
   342c8:	beq	34234 <flatcc_json_printer_uint64_enum_field@@Base+0x4c>
   342cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   342d0:	ldrb	r2, [r0, #29]
   342d4:	cmp	r2, #0
   342d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   342dc:	ldrd	r6, [sp, #40]	; 0x28
   342e0:	b	34234 <flatcc_json_printer_uint64_enum_field@@Base+0x4c>
   342e4:	ldr	r3, [r0, #20]
   342e8:	add	r2, r3, #1
   342ec:	str	r2, [r0, #20]
   342f0:	mov	r2, #10
   342f4:	strb	r2, [r3]
   342f8:	ldrb	r3, [r0, #25]
   342fc:	ldr	r9, [r0, #32]
   34300:	mul	r9, r9, r3
   34304:	ldr	r0, [r0, #20]
   34308:	add	r3, r0, r9
   3430c:	ldr	r2, [r4, #16]
   34310:	cmp	r2, r3
   34314:	bcc	34334 <flatcc_json_printer_uint64_enum_field@@Base+0x14c>
   34318:	mov	r2, r9
   3431c:	mov	r1, #32
   34320:	bl	145c4 <memset@plt>
   34324:	ldr	r3, [r4, #20]
   34328:	add	r9, r3, r9
   3432c:	str	r9, [r4, #20]
   34330:	b	3427c <flatcc_json_printer_uint64_enum_field@@Base+0x94>
   34334:	mov	r1, r9
   34338:	mov	r0, r4
   3433c:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   34340:	b	3427c <flatcc_json_printer_uint64_enum_field@@Base+0x94>
   34344:	ldr	r3, [r0, #44]	; 0x2c
   34348:	mov	r1, #0
   3434c:	blx	r3
   34350:	b	3427c <flatcc_json_printer_uint64_enum_field@@Base+0x94>
   34354:	mov	r2, r5
   34358:	mov	r1, r8
   3435c:	bl	1454c <memcpy@plt>
   34360:	ldr	r3, [r4, #20]
   34364:	add	r5, r3, r5
   34368:	str	r5, [r4, #20]
   3436c:	ldr	r3, [r4, #20]
   34370:	mov	r2, #34	; 0x22
   34374:	strb	r2, [r3]
   34378:	ldrb	r3, [r4, #26]
   3437c:	clz	r3, r3
   34380:	lsr	r3, r3, #5
   34384:	ldr	r1, [r4, #20]
   34388:	add	r2, r1, r3
   3438c:	add	r2, r2, #1
   34390:	str	r2, [r4, #20]
   34394:	mov	r2, #58	; 0x3a
   34398:	strb	r2, [r1, r3]
   3439c:	ldr	r3, [r4, #20]
   343a0:	mov	r2, #32
   343a4:	strb	r2, [r3]
   343a8:	ldrb	r3, [r4, #25]
   343ac:	ldr	r2, [r4, #20]
   343b0:	cmp	r3, #0
   343b4:	addne	r2, r2, #1
   343b8:	str	r2, [r4, #20]
   343bc:	ldrb	r3, [r4, #27]
   343c0:	cmp	r3, #0
   343c4:	bne	343e0 <flatcc_json_printer_uint64_enum_field@@Base+0x1f8>
   343c8:	mov	r2, r6
   343cc:	mov	r3, r7
   343d0:	mov	r0, r4
   343d4:	ldr	r1, [sp, #48]	; 0x30
   343d8:	blx	r1
   343dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   343e0:	mov	r0, r6
   343e4:	mov	r1, r7
   343e8:	bl	2fe6c <flatcc_json_parser_struct_as_root@@Base+0x65c>
   343ec:	ldr	r3, [r4, #20]
   343f0:	add	r0, r3, r0
   343f4:	str	r0, [r4, #20]
   343f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000343fc <flatcc_json_printer_int8_enum_field@@Base>:
   343fc:	push	{r4, r5, r6, r7, r8, lr}
   34400:	ldr	r6, [sp, #24]
   34404:	ldrsb	lr, [sp, #28]
   34408:	add	r2, r2, #2
   3440c:	lsl	r2, r2, #1
   34410:	ldr	ip, [r1, #8]
   34414:	cmp	r2, ip
   34418:	bge	344e0 <flatcc_json_printer_int8_enum_field@@Base+0xe4>
   3441c:	ldr	ip, [r1, #4]
   34420:	ldrh	r2, [ip, r2]
   34424:	cmp	r2, #0
   34428:	beq	344e0 <flatcc_json_printer_int8_enum_field@@Base+0xe4>
   3442c:	ldr	ip, [r1]
   34430:	cmn	ip, r2
   34434:	beq	344e0 <flatcc_json_printer_int8_enum_field@@Base+0xe4>
   34438:	ldrsb	r5, [ip, r2]
   3443c:	cmp	lr, r5
   34440:	beq	344d0 <flatcc_json_printer_int8_enum_field@@Base+0xd4>
   34444:	ldr	r2, [r1, #16]
   34448:	add	ip, r2, #1
   3444c:	str	ip, [r1, #16]
   34450:	cmp	r2, #0
   34454:	ldrne	r2, [r0, #20]
   34458:	addne	r1, r2, #1
   3445c:	strne	r1, [r0, #20]
   34460:	movne	r1, #44	; 0x2c
   34464:	strbne	r1, [r2]
   34468:	mov	r7, r3
   3446c:	mov	r4, r0
   34470:	ldrb	r3, [r0, #25]
   34474:	cmp	r3, #0
   34478:	bne	344f4 <flatcc_json_printer_int8_enum_field@@Base+0xf8>
   3447c:	ldr	r2, [r0, #20]
   34480:	ldr	r3, [r0, #16]
   34484:	cmp	r2, r3
   34488:	bcs	34554 <flatcc_json_printer_int8_enum_field@@Base+0x158>
   3448c:	ldr	r3, [r4, #20]
   34490:	mov	r2, #34	; 0x22
   34494:	strb	r2, [r3]
   34498:	ldrb	r3, [r4, #26]
   3449c:	ldr	r0, [r4, #20]
   344a0:	cmp	r3, #0
   344a4:	addeq	r0, r0, #1
   344a8:	str	r0, [r4, #20]
   344ac:	add	r3, r0, r6
   344b0:	ldr	r2, [r4, #16]
   344b4:	cmp	r2, r3
   344b8:	bhi	34564 <flatcc_json_printer_int8_enum_field@@Base+0x168>
   344bc:	mov	r2, r6
   344c0:	mov	r1, r7
   344c4:	mov	r0, r4
   344c8:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   344cc:	b	3457c <flatcc_json_printer_int8_enum_field@@Base+0x180>
   344d0:	ldrb	r2, [r0, #28]
   344d4:	cmp	r2, #0
   344d8:	beq	34444 <flatcc_json_printer_int8_enum_field@@Base+0x48>
   344dc:	pop	{r4, r5, r6, r7, r8, pc}
   344e0:	ldrb	r2, [r0, #29]
   344e4:	cmp	r2, #0
   344e8:	popeq	{r4, r5, r6, r7, r8, pc}
   344ec:	mov	r5, lr
   344f0:	b	34444 <flatcc_json_printer_int8_enum_field@@Base+0x48>
   344f4:	ldr	r3, [r0, #20]
   344f8:	add	r2, r3, #1
   344fc:	str	r2, [r0, #20]
   34500:	mov	r2, #10
   34504:	strb	r2, [r3]
   34508:	ldrb	r3, [r0, #25]
   3450c:	ldr	r8, [r0, #32]
   34510:	mul	r8, r8, r3
   34514:	ldr	r0, [r0, #20]
   34518:	add	r3, r0, r8
   3451c:	ldr	r2, [r4, #16]
   34520:	cmp	r2, r3
   34524:	bcc	34544 <flatcc_json_printer_int8_enum_field@@Base+0x148>
   34528:	mov	r2, r8
   3452c:	mov	r1, #32
   34530:	bl	145c4 <memset@plt>
   34534:	ldr	r3, [r4, #20]
   34538:	add	r8, r3, r8
   3453c:	str	r8, [r4, #20]
   34540:	b	3448c <flatcc_json_printer_int8_enum_field@@Base+0x90>
   34544:	mov	r1, r8
   34548:	mov	r0, r4
   3454c:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   34550:	b	3448c <flatcc_json_printer_int8_enum_field@@Base+0x90>
   34554:	ldr	r3, [r0, #44]	; 0x2c
   34558:	mov	r1, #0
   3455c:	blx	r3
   34560:	b	3448c <flatcc_json_printer_int8_enum_field@@Base+0x90>
   34564:	mov	r2, r6
   34568:	mov	r1, r7
   3456c:	bl	1454c <memcpy@plt>
   34570:	ldr	r3, [r4, #20]
   34574:	add	r6, r3, r6
   34578:	str	r6, [r4, #20]
   3457c:	ldr	r3, [r4, #20]
   34580:	mov	r2, #34	; 0x22
   34584:	strb	r2, [r3]
   34588:	ldrb	r3, [r4, #26]
   3458c:	clz	r3, r3
   34590:	lsr	r3, r3, #5
   34594:	ldr	r1, [r4, #20]
   34598:	add	r2, r1, r3
   3459c:	add	r2, r2, #1
   345a0:	str	r2, [r4, #20]
   345a4:	mov	r2, #58	; 0x3a
   345a8:	strb	r2, [r1, r3]
   345ac:	ldr	r3, [r4, #20]
   345b0:	mov	r2, #32
   345b4:	strb	r2, [r3]
   345b8:	ldrb	r3, [r4, #25]
   345bc:	ldr	r1, [r4, #20]
   345c0:	cmp	r3, #0
   345c4:	addne	r1, r1, #1
   345c8:	str	r1, [r4, #20]
   345cc:	ldrb	r3, [r4, #27]
   345d0:	cmp	r3, #0
   345d4:	bne	345ec <flatcc_json_printer_int8_enum_field@@Base+0x1f0>
   345d8:	mov	r1, r5
   345dc:	mov	r0, r4
   345e0:	ldr	r3, [sp, #32]
   345e4:	blx	r3
   345e8:	pop	{r4, r5, r6, r7, r8, pc}
   345ec:	mov	r0, r5
   345f0:	bl	304f0 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   345f4:	ldr	r3, [r4, #20]
   345f8:	add	r0, r3, r0
   345fc:	str	r0, [r4, #20]
   34600:	pop	{r4, r5, r6, r7, r8, pc}

00034604 <flatcc_json_printer_int16_enum_field@@Base>:
   34604:	push	{r4, r5, r6, r7, r8, lr}
   34608:	ldr	r6, [sp, #24]
   3460c:	ldrsh	lr, [sp, #28]
   34610:	add	r2, r2, #2
   34614:	lsl	r2, r2, #1
   34618:	ldr	ip, [r1, #8]
   3461c:	cmp	r2, ip
   34620:	bge	346e8 <flatcc_json_printer_int16_enum_field@@Base+0xe4>
   34624:	ldr	ip, [r1, #4]
   34628:	ldrh	r2, [ip, r2]
   3462c:	cmp	r2, #0
   34630:	beq	346e8 <flatcc_json_printer_int16_enum_field@@Base+0xe4>
   34634:	ldr	ip, [r1]
   34638:	cmn	ip, r2
   3463c:	beq	346e8 <flatcc_json_printer_int16_enum_field@@Base+0xe4>
   34640:	ldrsh	r5, [ip, r2]
   34644:	cmp	lr, r5
   34648:	beq	346d8 <flatcc_json_printer_int16_enum_field@@Base+0xd4>
   3464c:	ldr	r2, [r1, #16]
   34650:	add	ip, r2, #1
   34654:	str	ip, [r1, #16]
   34658:	cmp	r2, #0
   3465c:	ldrne	r2, [r0, #20]
   34660:	addne	r1, r2, #1
   34664:	strne	r1, [r0, #20]
   34668:	movne	r1, #44	; 0x2c
   3466c:	strbne	r1, [r2]
   34670:	mov	r7, r3
   34674:	mov	r4, r0
   34678:	ldrb	r3, [r0, #25]
   3467c:	cmp	r3, #0
   34680:	bne	346fc <flatcc_json_printer_int16_enum_field@@Base+0xf8>
   34684:	ldr	r2, [r0, #20]
   34688:	ldr	r3, [r0, #16]
   3468c:	cmp	r2, r3
   34690:	bcs	3475c <flatcc_json_printer_int16_enum_field@@Base+0x158>
   34694:	ldr	r3, [r4, #20]
   34698:	mov	r2, #34	; 0x22
   3469c:	strb	r2, [r3]
   346a0:	ldrb	r3, [r4, #26]
   346a4:	ldr	r0, [r4, #20]
   346a8:	cmp	r3, #0
   346ac:	addeq	r0, r0, #1
   346b0:	str	r0, [r4, #20]
   346b4:	add	r3, r0, r6
   346b8:	ldr	r2, [r4, #16]
   346bc:	cmp	r2, r3
   346c0:	bhi	3476c <flatcc_json_printer_int16_enum_field@@Base+0x168>
   346c4:	mov	r2, r6
   346c8:	mov	r1, r7
   346cc:	mov	r0, r4
   346d0:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   346d4:	b	34784 <flatcc_json_printer_int16_enum_field@@Base+0x180>
   346d8:	ldrb	r2, [r0, #28]
   346dc:	cmp	r2, #0
   346e0:	beq	3464c <flatcc_json_printer_int16_enum_field@@Base+0x48>
   346e4:	pop	{r4, r5, r6, r7, r8, pc}
   346e8:	ldrb	r2, [r0, #29]
   346ec:	cmp	r2, #0
   346f0:	popeq	{r4, r5, r6, r7, r8, pc}
   346f4:	mov	r5, lr
   346f8:	b	3464c <flatcc_json_printer_int16_enum_field@@Base+0x48>
   346fc:	ldr	r3, [r0, #20]
   34700:	add	r2, r3, #1
   34704:	str	r2, [r0, #20]
   34708:	mov	r2, #10
   3470c:	strb	r2, [r3]
   34710:	ldrb	r3, [r0, #25]
   34714:	ldr	r8, [r0, #32]
   34718:	mul	r8, r8, r3
   3471c:	ldr	r0, [r0, #20]
   34720:	add	r3, r0, r8
   34724:	ldr	r2, [r4, #16]
   34728:	cmp	r2, r3
   3472c:	bcc	3474c <flatcc_json_printer_int16_enum_field@@Base+0x148>
   34730:	mov	r2, r8
   34734:	mov	r1, #32
   34738:	bl	145c4 <memset@plt>
   3473c:	ldr	r3, [r4, #20]
   34740:	add	r8, r3, r8
   34744:	str	r8, [r4, #20]
   34748:	b	34694 <flatcc_json_printer_int16_enum_field@@Base+0x90>
   3474c:	mov	r1, r8
   34750:	mov	r0, r4
   34754:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   34758:	b	34694 <flatcc_json_printer_int16_enum_field@@Base+0x90>
   3475c:	ldr	r3, [r0, #44]	; 0x2c
   34760:	mov	r1, #0
   34764:	blx	r3
   34768:	b	34694 <flatcc_json_printer_int16_enum_field@@Base+0x90>
   3476c:	mov	r2, r6
   34770:	mov	r1, r7
   34774:	bl	1454c <memcpy@plt>
   34778:	ldr	r3, [r4, #20]
   3477c:	add	r6, r3, r6
   34780:	str	r6, [r4, #20]
   34784:	ldr	r3, [r4, #20]
   34788:	mov	r2, #34	; 0x22
   3478c:	strb	r2, [r3]
   34790:	ldrb	r3, [r4, #26]
   34794:	clz	r3, r3
   34798:	lsr	r3, r3, #5
   3479c:	ldr	r1, [r4, #20]
   347a0:	add	r2, r1, r3
   347a4:	add	r2, r2, #1
   347a8:	str	r2, [r4, #20]
   347ac:	mov	r2, #58	; 0x3a
   347b0:	strb	r2, [r1, r3]
   347b4:	ldr	r3, [r4, #20]
   347b8:	mov	r2, #32
   347bc:	strb	r2, [r3]
   347c0:	ldrb	r3, [r4, #25]
   347c4:	ldr	r1, [r4, #20]
   347c8:	cmp	r3, #0
   347cc:	addne	r1, r1, #1
   347d0:	str	r1, [r4, #20]
   347d4:	ldrb	r3, [r4, #27]
   347d8:	cmp	r3, #0
   347dc:	bne	347f4 <flatcc_json_printer_int16_enum_field@@Base+0x1f0>
   347e0:	mov	r1, r5
   347e4:	mov	r0, r4
   347e8:	ldr	r3, [sp, #32]
   347ec:	blx	r3
   347f0:	pop	{r4, r5, r6, r7, r8, pc}
   347f4:	mov	r0, r5
   347f8:	bl	30520 <flatcc_json_parser_struct_as_root@@Base+0xd10>
   347fc:	ldr	r3, [r4, #20]
   34800:	add	r0, r3, r0
   34804:	str	r0, [r4, #20]
   34808:	pop	{r4, r5, r6, r7, r8, pc}

0003480c <flatcc_json_printer_int32_enum_field@@Base>:
   3480c:	push	{r4, r5, r6, r7, r8, lr}
   34810:	ldr	r6, [sp, #24]
   34814:	add	r2, r2, #2
   34818:	lsl	r2, r2, #1
   3481c:	ldr	ip, [r1, #8]
   34820:	cmp	r2, ip
   34824:	bge	348f0 <flatcc_json_printer_int32_enum_field@@Base+0xe4>
   34828:	ldr	ip, [r1, #4]
   3482c:	ldrh	r2, [ip, r2]
   34830:	cmp	r2, #0
   34834:	beq	348f0 <flatcc_json_printer_int32_enum_field@@Base+0xe4>
   34838:	ldr	ip, [r1]
   3483c:	cmn	ip, r2
   34840:	beq	348f0 <flatcc_json_printer_int32_enum_field@@Base+0xe4>
   34844:	ldr	r5, [ip, r2]
   34848:	ldr	r2, [sp, #28]
   3484c:	cmp	r2, r5
   34850:	beq	348e0 <flatcc_json_printer_int32_enum_field@@Base+0xd4>
   34854:	ldr	r2, [r1, #16]
   34858:	add	ip, r2, #1
   3485c:	str	ip, [r1, #16]
   34860:	cmp	r2, #0
   34864:	ldrne	r2, [r0, #20]
   34868:	addne	r1, r2, #1
   3486c:	strne	r1, [r0, #20]
   34870:	movne	r1, #44	; 0x2c
   34874:	strbne	r1, [r2]
   34878:	mov	r7, r3
   3487c:	mov	r4, r0
   34880:	ldrb	r3, [r0, #25]
   34884:	cmp	r3, #0
   34888:	bne	34904 <flatcc_json_printer_int32_enum_field@@Base+0xf8>
   3488c:	ldr	r2, [r0, #20]
   34890:	ldr	r3, [r0, #16]
   34894:	cmp	r2, r3
   34898:	bcs	34964 <flatcc_json_printer_int32_enum_field@@Base+0x158>
   3489c:	ldr	r3, [r4, #20]
   348a0:	mov	r2, #34	; 0x22
   348a4:	strb	r2, [r3]
   348a8:	ldrb	r3, [r4, #26]
   348ac:	ldr	r0, [r4, #20]
   348b0:	cmp	r3, #0
   348b4:	addeq	r0, r0, #1
   348b8:	str	r0, [r4, #20]
   348bc:	add	r3, r0, r6
   348c0:	ldr	r2, [r4, #16]
   348c4:	cmp	r2, r3
   348c8:	bhi	34974 <flatcc_json_printer_int32_enum_field@@Base+0x168>
   348cc:	mov	r2, r6
   348d0:	mov	r1, r7
   348d4:	mov	r0, r4
   348d8:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   348dc:	b	3498c <flatcc_json_printer_int32_enum_field@@Base+0x180>
   348e0:	ldrb	r2, [r0, #28]
   348e4:	cmp	r2, #0
   348e8:	beq	34854 <flatcc_json_printer_int32_enum_field@@Base+0x48>
   348ec:	pop	{r4, r5, r6, r7, r8, pc}
   348f0:	ldrb	r2, [r0, #29]
   348f4:	cmp	r2, #0
   348f8:	popeq	{r4, r5, r6, r7, r8, pc}
   348fc:	ldr	r5, [sp, #28]
   34900:	b	34854 <flatcc_json_printer_int32_enum_field@@Base+0x48>
   34904:	ldr	r3, [r0, #20]
   34908:	add	r2, r3, #1
   3490c:	str	r2, [r0, #20]
   34910:	mov	r2, #10
   34914:	strb	r2, [r3]
   34918:	ldrb	r3, [r0, #25]
   3491c:	ldr	r8, [r0, #32]
   34920:	mul	r8, r8, r3
   34924:	ldr	r0, [r0, #20]
   34928:	add	r3, r0, r8
   3492c:	ldr	r2, [r4, #16]
   34930:	cmp	r2, r3
   34934:	bcc	34954 <flatcc_json_printer_int32_enum_field@@Base+0x148>
   34938:	mov	r2, r8
   3493c:	mov	r1, #32
   34940:	bl	145c4 <memset@plt>
   34944:	ldr	r3, [r4, #20]
   34948:	add	r8, r3, r8
   3494c:	str	r8, [r4, #20]
   34950:	b	3489c <flatcc_json_printer_int32_enum_field@@Base+0x90>
   34954:	mov	r1, r8
   34958:	mov	r0, r4
   3495c:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   34960:	b	3489c <flatcc_json_printer_int32_enum_field@@Base+0x90>
   34964:	ldr	r3, [r0, #44]	; 0x2c
   34968:	mov	r1, #0
   3496c:	blx	r3
   34970:	b	3489c <flatcc_json_printer_int32_enum_field@@Base+0x90>
   34974:	mov	r2, r6
   34978:	mov	r1, r7
   3497c:	bl	1454c <memcpy@plt>
   34980:	ldr	r3, [r4, #20]
   34984:	add	r6, r3, r6
   34988:	str	r6, [r4, #20]
   3498c:	ldr	r3, [r4, #20]
   34990:	mov	r2, #34	; 0x22
   34994:	strb	r2, [r3]
   34998:	ldrb	r3, [r4, #26]
   3499c:	clz	r3, r3
   349a0:	lsr	r3, r3, #5
   349a4:	ldr	r1, [r4, #20]
   349a8:	add	r2, r1, r3
   349ac:	add	r2, r2, #1
   349b0:	str	r2, [r4, #20]
   349b4:	mov	r2, #58	; 0x3a
   349b8:	strb	r2, [r1, r3]
   349bc:	ldr	r3, [r4, #20]
   349c0:	mov	r2, #32
   349c4:	strb	r2, [r3]
   349c8:	ldrb	r3, [r4, #25]
   349cc:	ldr	r1, [r4, #20]
   349d0:	cmp	r3, #0
   349d4:	addne	r1, r1, #1
   349d8:	str	r1, [r4, #20]
   349dc:	ldrb	r3, [r4, #27]
   349e0:	cmp	r3, #0
   349e4:	bne	349fc <flatcc_json_printer_int32_enum_field@@Base+0x1f0>
   349e8:	mov	r1, r5
   349ec:	mov	r0, r4
   349f0:	ldr	r3, [sp, #32]
   349f4:	blx	r3
   349f8:	pop	{r4, r5, r6, r7, r8, pc}
   349fc:	mov	r0, r5
   34a00:	bl	30550 <flatcc_json_parser_struct_as_root@@Base+0xd40>
   34a04:	ldr	r3, [r4, #20]
   34a08:	add	r0, r3, r0
   34a0c:	str	r0, [r4, #20]
   34a10:	pop	{r4, r5, r6, r7, r8, pc}

00034a14 <flatcc_json_printer_int64_enum_field@@Base>:
   34a14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   34a18:	ldr	r5, [sp, #32]
   34a1c:	add	r2, r2, #2
   34a20:	lsl	r2, r2, #1
   34a24:	ldr	ip, [r1, #8]
   34a28:	cmp	r2, ip
   34a2c:	bge	34afc <flatcc_json_printer_int64_enum_field@@Base+0xe8>
   34a30:	ldr	ip, [r1, #4]
   34a34:	ldrh	r2, [ip, r2]
   34a38:	cmp	r2, #0
   34a3c:	beq	34afc <flatcc_json_printer_int64_enum_field@@Base+0xe8>
   34a40:	ldr	ip, [r1]
   34a44:	cmn	ip, r2
   34a48:	beq	34afc <flatcc_json_printer_int64_enum_field@@Base+0xe8>
   34a4c:	ldrd	r6, [ip, r2]
   34a50:	ldrd	r8, [sp, #40]	; 0x28
   34a54:	cmp	r9, r7
   34a58:	cmpeq	r8, r6
   34a5c:	beq	34aec <flatcc_json_printer_int64_enum_field@@Base+0xd8>
   34a60:	ldr	r2, [r1, #16]
   34a64:	add	ip, r2, #1
   34a68:	str	ip, [r1, #16]
   34a6c:	cmp	r2, #0
   34a70:	ldrne	r2, [r0, #20]
   34a74:	addne	r1, r2, #1
   34a78:	strne	r1, [r0, #20]
   34a7c:	movne	r1, #44	; 0x2c
   34a80:	strbne	r1, [r2]
   34a84:	mov	r8, r3
   34a88:	mov	r4, r0
   34a8c:	ldrb	r3, [r0, #25]
   34a90:	cmp	r3, #0
   34a94:	bne	34b10 <flatcc_json_printer_int64_enum_field@@Base+0xfc>
   34a98:	ldr	r2, [r0, #20]
   34a9c:	ldr	r3, [r0, #16]
   34aa0:	cmp	r2, r3
   34aa4:	bcs	34b70 <flatcc_json_printer_int64_enum_field@@Base+0x15c>
   34aa8:	ldr	r3, [r4, #20]
   34aac:	mov	r2, #34	; 0x22
   34ab0:	strb	r2, [r3]
   34ab4:	ldrb	r3, [r4, #26]
   34ab8:	ldr	r0, [r4, #20]
   34abc:	cmp	r3, #0
   34ac0:	addeq	r0, r0, #1
   34ac4:	str	r0, [r4, #20]
   34ac8:	add	r3, r0, r5
   34acc:	ldr	r2, [r4, #16]
   34ad0:	cmp	r2, r3
   34ad4:	bhi	34b80 <flatcc_json_printer_int64_enum_field@@Base+0x16c>
   34ad8:	mov	r2, r5
   34adc:	mov	r1, r8
   34ae0:	mov	r0, r4
   34ae4:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   34ae8:	b	34b98 <flatcc_json_printer_int64_enum_field@@Base+0x184>
   34aec:	ldrb	r2, [r0, #28]
   34af0:	cmp	r2, #0
   34af4:	beq	34a60 <flatcc_json_printer_int64_enum_field@@Base+0x4c>
   34af8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34afc:	ldrb	r2, [r0, #29]
   34b00:	cmp	r2, #0
   34b04:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   34b08:	ldrd	r6, [sp, #40]	; 0x28
   34b0c:	b	34a60 <flatcc_json_printer_int64_enum_field@@Base+0x4c>
   34b10:	ldr	r3, [r0, #20]
   34b14:	add	r2, r3, #1
   34b18:	str	r2, [r0, #20]
   34b1c:	mov	r2, #10
   34b20:	strb	r2, [r3]
   34b24:	ldrb	r3, [r0, #25]
   34b28:	ldr	r9, [r0, #32]
   34b2c:	mul	r9, r9, r3
   34b30:	ldr	r0, [r0, #20]
   34b34:	add	r3, r0, r9
   34b38:	ldr	r2, [r4, #16]
   34b3c:	cmp	r2, r3
   34b40:	bcc	34b60 <flatcc_json_printer_int64_enum_field@@Base+0x14c>
   34b44:	mov	r2, r9
   34b48:	mov	r1, #32
   34b4c:	bl	145c4 <memset@plt>
   34b50:	ldr	r3, [r4, #20]
   34b54:	add	r9, r3, r9
   34b58:	str	r9, [r4, #20]
   34b5c:	b	34aa8 <flatcc_json_printer_int64_enum_field@@Base+0x94>
   34b60:	mov	r1, r9
   34b64:	mov	r0, r4
   34b68:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   34b6c:	b	34aa8 <flatcc_json_printer_int64_enum_field@@Base+0x94>
   34b70:	ldr	r3, [r0, #44]	; 0x2c
   34b74:	mov	r1, #0
   34b78:	blx	r3
   34b7c:	b	34aa8 <flatcc_json_printer_int64_enum_field@@Base+0x94>
   34b80:	mov	r2, r5
   34b84:	mov	r1, r8
   34b88:	bl	1454c <memcpy@plt>
   34b8c:	ldr	r3, [r4, #20]
   34b90:	add	r5, r3, r5
   34b94:	str	r5, [r4, #20]
   34b98:	ldr	r3, [r4, #20]
   34b9c:	mov	r2, #34	; 0x22
   34ba0:	strb	r2, [r3]
   34ba4:	ldrb	r3, [r4, #26]
   34ba8:	clz	r3, r3
   34bac:	lsr	r3, r3, #5
   34bb0:	ldr	r1, [r4, #20]
   34bb4:	add	r2, r1, r3
   34bb8:	add	r2, r2, #1
   34bbc:	str	r2, [r4, #20]
   34bc0:	mov	r2, #58	; 0x3a
   34bc4:	strb	r2, [r1, r3]
   34bc8:	ldr	r3, [r4, #20]
   34bcc:	mov	r2, #32
   34bd0:	strb	r2, [r3]
   34bd4:	ldrb	r3, [r4, #25]
   34bd8:	ldr	r2, [r4, #20]
   34bdc:	cmp	r3, #0
   34be0:	addne	r2, r2, #1
   34be4:	str	r2, [r4, #20]
   34be8:	ldrb	r3, [r4, #27]
   34bec:	cmp	r3, #0
   34bf0:	bne	34c0c <flatcc_json_printer_int64_enum_field@@Base+0x1f8>
   34bf4:	mov	r2, r6
   34bf8:	mov	r3, r7
   34bfc:	mov	r0, r4
   34c00:	ldr	r1, [sp, #48]	; 0x30
   34c04:	blx	r1
   34c08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   34c0c:	mov	r0, r6
   34c10:	mov	r1, r7
   34c14:	bl	30578 <flatcc_json_parser_struct_as_root@@Base+0xd68>
   34c18:	ldr	r3, [r4, #20]
   34c1c:	add	r0, r3, r0
   34c20:	str	r0, [r4, #20]
   34c24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00034c28 <flatcc_json_printer_bool_enum_field@@Base>:
   34c28:	push	{r4, r5, r6, r7, r8, lr}
   34c2c:	ldr	r6, [sp, #24]
   34c30:	ldrb	lr, [sp, #28]
   34c34:	add	r2, r2, #2
   34c38:	lsl	r2, r2, #1
   34c3c:	ldr	ip, [r1, #8]
   34c40:	cmp	r2, ip
   34c44:	bge	34d0c <flatcc_json_printer_bool_enum_field@@Base+0xe4>
   34c48:	ldr	ip, [r1, #4]
   34c4c:	ldrh	r2, [ip, r2]
   34c50:	cmp	r2, #0
   34c54:	beq	34d0c <flatcc_json_printer_bool_enum_field@@Base+0xe4>
   34c58:	ldr	ip, [r1]
   34c5c:	cmn	ip, r2
   34c60:	beq	34d0c <flatcc_json_printer_bool_enum_field@@Base+0xe4>
   34c64:	ldrb	r5, [ip, r2]
   34c68:	cmp	lr, r5
   34c6c:	beq	34cfc <flatcc_json_printer_bool_enum_field@@Base+0xd4>
   34c70:	ldr	r2, [r1, #16]
   34c74:	add	ip, r2, #1
   34c78:	str	ip, [r1, #16]
   34c7c:	cmp	r2, #0
   34c80:	ldrne	r2, [r0, #20]
   34c84:	addne	r1, r2, #1
   34c88:	strne	r1, [r0, #20]
   34c8c:	movne	r1, #44	; 0x2c
   34c90:	strbne	r1, [r2]
   34c94:	mov	r7, r3
   34c98:	mov	r4, r0
   34c9c:	ldrb	r3, [r0, #25]
   34ca0:	cmp	r3, #0
   34ca4:	bne	34d20 <flatcc_json_printer_bool_enum_field@@Base+0xf8>
   34ca8:	ldr	r2, [r0, #20]
   34cac:	ldr	r3, [r0, #16]
   34cb0:	cmp	r2, r3
   34cb4:	bcs	34d80 <flatcc_json_printer_bool_enum_field@@Base+0x158>
   34cb8:	ldr	r3, [r4, #20]
   34cbc:	mov	r2, #34	; 0x22
   34cc0:	strb	r2, [r3]
   34cc4:	ldrb	r3, [r4, #26]
   34cc8:	ldr	r0, [r4, #20]
   34ccc:	cmp	r3, #0
   34cd0:	addeq	r0, r0, #1
   34cd4:	str	r0, [r4, #20]
   34cd8:	add	r3, r0, r6
   34cdc:	ldr	r2, [r4, #16]
   34ce0:	cmp	r2, r3
   34ce4:	bhi	34d90 <flatcc_json_printer_bool_enum_field@@Base+0x168>
   34ce8:	mov	r2, r6
   34cec:	mov	r1, r7
   34cf0:	mov	r0, r4
   34cf4:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   34cf8:	b	34da8 <flatcc_json_printer_bool_enum_field@@Base+0x180>
   34cfc:	ldrb	r2, [r0, #28]
   34d00:	cmp	r2, #0
   34d04:	beq	34c70 <flatcc_json_printer_bool_enum_field@@Base+0x48>
   34d08:	pop	{r4, r5, r6, r7, r8, pc}
   34d0c:	ldrb	r2, [r0, #29]
   34d10:	cmp	r2, #0
   34d14:	popeq	{r4, r5, r6, r7, r8, pc}
   34d18:	mov	r5, lr
   34d1c:	b	34c70 <flatcc_json_printer_bool_enum_field@@Base+0x48>
   34d20:	ldr	r3, [r0, #20]
   34d24:	add	r2, r3, #1
   34d28:	str	r2, [r0, #20]
   34d2c:	mov	r2, #10
   34d30:	strb	r2, [r3]
   34d34:	ldrb	r3, [r0, #25]
   34d38:	ldr	r8, [r0, #32]
   34d3c:	mul	r8, r8, r3
   34d40:	ldr	r0, [r0, #20]
   34d44:	add	r3, r0, r8
   34d48:	ldr	r2, [r4, #16]
   34d4c:	cmp	r2, r3
   34d50:	bcc	34d70 <flatcc_json_printer_bool_enum_field@@Base+0x148>
   34d54:	mov	r2, r8
   34d58:	mov	r1, #32
   34d5c:	bl	145c4 <memset@plt>
   34d60:	ldr	r3, [r4, #20]
   34d64:	add	r8, r3, r8
   34d68:	str	r8, [r4, #20]
   34d6c:	b	34cb8 <flatcc_json_printer_bool_enum_field@@Base+0x90>
   34d70:	mov	r1, r8
   34d74:	mov	r0, r4
   34d78:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   34d7c:	b	34cb8 <flatcc_json_printer_bool_enum_field@@Base+0x90>
   34d80:	ldr	r3, [r0, #44]	; 0x2c
   34d84:	mov	r1, #0
   34d88:	blx	r3
   34d8c:	b	34cb8 <flatcc_json_printer_bool_enum_field@@Base+0x90>
   34d90:	mov	r2, r6
   34d94:	mov	r1, r7
   34d98:	bl	1454c <memcpy@plt>
   34d9c:	ldr	r3, [r4, #20]
   34da0:	add	r6, r3, r6
   34da4:	str	r6, [r4, #20]
   34da8:	ldr	r3, [r4, #20]
   34dac:	mov	r2, #34	; 0x22
   34db0:	strb	r2, [r3]
   34db4:	ldrb	r3, [r4, #26]
   34db8:	clz	r3, r3
   34dbc:	lsr	r3, r3, #5
   34dc0:	ldr	r1, [r4, #20]
   34dc4:	add	r2, r1, r3
   34dc8:	add	r2, r2, #1
   34dcc:	str	r2, [r4, #20]
   34dd0:	mov	r2, #58	; 0x3a
   34dd4:	strb	r2, [r1, r3]
   34dd8:	ldr	r3, [r4, #20]
   34ddc:	mov	r2, #32
   34de0:	strb	r2, [r3]
   34de4:	ldrb	r3, [r4, #25]
   34de8:	ldr	r1, [r4, #20]
   34dec:	cmp	r3, #0
   34df0:	addne	r1, r1, #1
   34df4:	str	r1, [r4, #20]
   34df8:	ldrb	r3, [r4, #27]
   34dfc:	cmp	r3, #0
   34e00:	bne	34e18 <flatcc_json_printer_bool_enum_field@@Base+0x1f0>
   34e04:	mov	r1, r5
   34e08:	mov	r0, r4
   34e0c:	ldr	r3, [sp, #32]
   34e10:	blx	r3
   34e14:	pop	{r4, r5, r6, r7, r8, pc}
   34e18:	mov	r0, r5
   34e1c:	bl	30c34 <flatcc_json_parser_struct_as_root@@Base+0x1424>
   34e20:	ldr	r3, [r4, #20]
   34e24:	add	r0, r3, r0
   34e28:	str	r0, [r4, #20]
   34e2c:	pop	{r4, r5, r6, r7, r8, pc}

00034e30 <flatcc_json_printer_uint8_struct_field@@Base>:
   34e30:	push	{r4, r5, r6, r7, r8, lr}
   34e34:	mov	r4, r0
   34e38:	ldr	r6, [sp, #28]
   34e3c:	ldrb	r5, [r2, r3]
   34e40:	cmp	r1, #0
   34e44:	ldrne	r3, [r0, #20]
   34e48:	addne	r2, r3, #1
   34e4c:	strne	r2, [r0, #20]
   34e50:	movne	r2, #44	; 0x2c
   34e54:	strbne	r2, [r3]
   34e58:	ldrb	r3, [r0, #25]
   34e5c:	cmp	r3, #0
   34e60:	bne	34eb8 <flatcc_json_printer_uint8_struct_field@@Base+0x88>
   34e64:	ldr	r2, [r0, #20]
   34e68:	ldr	r3, [r0, #16]
   34e6c:	cmp	r2, r3
   34e70:	bcs	34f18 <flatcc_json_printer_uint8_struct_field@@Base+0xe8>
   34e74:	ldr	r3, [r4, #20]
   34e78:	mov	r2, #34	; 0x22
   34e7c:	strb	r2, [r3]
   34e80:	ldrb	r3, [r4, #26]
   34e84:	ldr	r0, [r4, #20]
   34e88:	cmp	r3, #0
   34e8c:	addeq	r0, r0, #1
   34e90:	str	r0, [r4, #20]
   34e94:	add	r3, r0, r6
   34e98:	ldr	r2, [r4, #16]
   34e9c:	cmp	r2, r3
   34ea0:	bhi	34f28 <flatcc_json_printer_uint8_struct_field@@Base+0xf8>
   34ea4:	mov	r2, r6
   34ea8:	ldr	r1, [sp, #24]
   34eac:	mov	r0, r4
   34eb0:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   34eb4:	b	34f40 <flatcc_json_printer_uint8_struct_field@@Base+0x110>
   34eb8:	ldr	r3, [r0, #20]
   34ebc:	add	r2, r3, #1
   34ec0:	str	r2, [r0, #20]
   34ec4:	mov	r2, #10
   34ec8:	strb	r2, [r3]
   34ecc:	ldrb	r3, [r0, #25]
   34ed0:	ldr	r7, [r0, #32]
   34ed4:	mul	r7, r7, r3
   34ed8:	ldr	r0, [r0, #20]
   34edc:	add	r3, r0, r7
   34ee0:	ldr	r2, [r4, #16]
   34ee4:	cmp	r2, r3
   34ee8:	bcc	34f08 <flatcc_json_printer_uint8_struct_field@@Base+0xd8>
   34eec:	mov	r2, r7
   34ef0:	mov	r1, #32
   34ef4:	bl	145c4 <memset@plt>
   34ef8:	ldr	r3, [r4, #20]
   34efc:	add	r7, r3, r7
   34f00:	str	r7, [r4, #20]
   34f04:	b	34e74 <flatcc_json_printer_uint8_struct_field@@Base+0x44>
   34f08:	mov	r1, r7
   34f0c:	mov	r0, r4
   34f10:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   34f14:	b	34e74 <flatcc_json_printer_uint8_struct_field@@Base+0x44>
   34f18:	ldr	r3, [r0, #44]	; 0x2c
   34f1c:	mov	r1, #0
   34f20:	blx	r3
   34f24:	b	34e74 <flatcc_json_printer_uint8_struct_field@@Base+0x44>
   34f28:	mov	r2, r6
   34f2c:	ldr	r1, [sp, #24]
   34f30:	bl	1454c <memcpy@plt>
   34f34:	ldr	r3, [r4, #20]
   34f38:	add	r6, r3, r6
   34f3c:	str	r6, [r4, #20]
   34f40:	ldr	r3, [r4, #20]
   34f44:	mov	r2, #34	; 0x22
   34f48:	strb	r2, [r3]
   34f4c:	ldrb	r3, [r4, #26]
   34f50:	clz	r3, r3
   34f54:	lsr	r3, r3, #5
   34f58:	ldr	r1, [r4, #20]
   34f5c:	add	r2, r1, r3
   34f60:	add	r2, r2, #1
   34f64:	str	r2, [r4, #20]
   34f68:	mov	r2, #58	; 0x3a
   34f6c:	strb	r2, [r1, r3]
   34f70:	ldr	r3, [r4, #20]
   34f74:	mov	r2, #32
   34f78:	strb	r2, [r3]
   34f7c:	ldrb	r3, [r4, #25]
   34f80:	ldr	r1, [r4, #20]
   34f84:	cmp	r3, #0
   34f88:	addne	r1, r1, #1
   34f8c:	str	r1, [r4, #20]
   34f90:	mov	r0, r5
   34f94:	bl	2f8e8 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   34f98:	ldr	r3, [r4, #20]
   34f9c:	add	r0, r3, r0
   34fa0:	str	r0, [r4, #20]
   34fa4:	pop	{r4, r5, r6, r7, r8, pc}

00034fa8 <flatcc_json_printer_uint16_struct_field@@Base>:
   34fa8:	push	{r4, r5, r6, r7, r8, lr}
   34fac:	mov	r4, r0
   34fb0:	ldr	r6, [sp, #28]
   34fb4:	ldrh	r5, [r2, r3]
   34fb8:	cmp	r1, #0
   34fbc:	ldrne	r3, [r0, #20]
   34fc0:	addne	r2, r3, #1
   34fc4:	strne	r2, [r0, #20]
   34fc8:	movne	r2, #44	; 0x2c
   34fcc:	strbne	r2, [r3]
   34fd0:	ldrb	r3, [r0, #25]
   34fd4:	cmp	r3, #0
   34fd8:	bne	35030 <flatcc_json_printer_uint16_struct_field@@Base+0x88>
   34fdc:	ldr	r2, [r0, #20]
   34fe0:	ldr	r3, [r0, #16]
   34fe4:	cmp	r2, r3
   34fe8:	bcs	35090 <flatcc_json_printer_uint16_struct_field@@Base+0xe8>
   34fec:	ldr	r3, [r4, #20]
   34ff0:	mov	r2, #34	; 0x22
   34ff4:	strb	r2, [r3]
   34ff8:	ldrb	r3, [r4, #26]
   34ffc:	ldr	r0, [r4, #20]
   35000:	cmp	r3, #0
   35004:	addeq	r0, r0, #1
   35008:	str	r0, [r4, #20]
   3500c:	add	r3, r0, r6
   35010:	ldr	r2, [r4, #16]
   35014:	cmp	r2, r3
   35018:	bhi	350a0 <flatcc_json_printer_uint16_struct_field@@Base+0xf8>
   3501c:	mov	r2, r6
   35020:	ldr	r1, [sp, #24]
   35024:	mov	r0, r4
   35028:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3502c:	b	350b8 <flatcc_json_printer_uint16_struct_field@@Base+0x110>
   35030:	ldr	r3, [r0, #20]
   35034:	add	r2, r3, #1
   35038:	str	r2, [r0, #20]
   3503c:	mov	r2, #10
   35040:	strb	r2, [r3]
   35044:	ldrb	r3, [r0, #25]
   35048:	ldr	r7, [r0, #32]
   3504c:	mul	r7, r7, r3
   35050:	ldr	r0, [r0, #20]
   35054:	add	r3, r0, r7
   35058:	ldr	r2, [r4, #16]
   3505c:	cmp	r2, r3
   35060:	bcc	35080 <flatcc_json_printer_uint16_struct_field@@Base+0xd8>
   35064:	mov	r2, r7
   35068:	mov	r1, #32
   3506c:	bl	145c4 <memset@plt>
   35070:	ldr	r3, [r4, #20]
   35074:	add	r7, r3, r7
   35078:	str	r7, [r4, #20]
   3507c:	b	34fec <flatcc_json_printer_uint16_struct_field@@Base+0x44>
   35080:	mov	r1, r7
   35084:	mov	r0, r4
   35088:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3508c:	b	34fec <flatcc_json_printer_uint16_struct_field@@Base+0x44>
   35090:	ldr	r3, [r0, #44]	; 0x2c
   35094:	mov	r1, #0
   35098:	blx	r3
   3509c:	b	34fec <flatcc_json_printer_uint16_struct_field@@Base+0x44>
   350a0:	mov	r2, r6
   350a4:	ldr	r1, [sp, #24]
   350a8:	bl	1454c <memcpy@plt>
   350ac:	ldr	r3, [r4, #20]
   350b0:	add	r6, r3, r6
   350b4:	str	r6, [r4, #20]
   350b8:	ldr	r3, [r4, #20]
   350bc:	mov	r2, #34	; 0x22
   350c0:	strb	r2, [r3]
   350c4:	ldrb	r3, [r4, #26]
   350c8:	clz	r3, r3
   350cc:	lsr	r3, r3, #5
   350d0:	ldr	r1, [r4, #20]
   350d4:	add	r2, r1, r3
   350d8:	add	r2, r2, #1
   350dc:	str	r2, [r4, #20]
   350e0:	mov	r2, #58	; 0x3a
   350e4:	strb	r2, [r1, r3]
   350e8:	ldr	r3, [r4, #20]
   350ec:	mov	r2, #32
   350f0:	strb	r2, [r3]
   350f4:	ldrb	r3, [r4, #25]
   350f8:	ldr	r1, [r4, #20]
   350fc:	cmp	r3, #0
   35100:	addne	r1, r1, #1
   35104:	str	r1, [r4, #20]
   35108:	mov	r0, r5
   3510c:	bl	2f9a8 <flatcc_json_parser_struct_as_root@@Base+0x198>
   35110:	ldr	r3, [r4, #20]
   35114:	add	r0, r3, r0
   35118:	str	r0, [r4, #20]
   3511c:	pop	{r4, r5, r6, r7, r8, pc}

00035120 <flatcc_json_printer_uint32_struct_field@@Base>:
   35120:	push	{r4, r5, r6, r7, r8, lr}
   35124:	mov	r4, r0
   35128:	ldr	r6, [sp, #28]
   3512c:	ldr	r5, [r2, r3]
   35130:	cmp	r1, #0
   35134:	ldrne	r3, [r0, #20]
   35138:	addne	r2, r3, #1
   3513c:	strne	r2, [r0, #20]
   35140:	movne	r2, #44	; 0x2c
   35144:	strbne	r2, [r3]
   35148:	ldrb	r3, [r0, #25]
   3514c:	cmp	r3, #0
   35150:	bne	351a8 <flatcc_json_printer_uint32_struct_field@@Base+0x88>
   35154:	ldr	r2, [r0, #20]
   35158:	ldr	r3, [r0, #16]
   3515c:	cmp	r2, r3
   35160:	bcs	35208 <flatcc_json_printer_uint32_struct_field@@Base+0xe8>
   35164:	ldr	r3, [r4, #20]
   35168:	mov	r2, #34	; 0x22
   3516c:	strb	r2, [r3]
   35170:	ldrb	r3, [r4, #26]
   35174:	ldr	r0, [r4, #20]
   35178:	cmp	r3, #0
   3517c:	addeq	r0, r0, #1
   35180:	str	r0, [r4, #20]
   35184:	add	r3, r0, r6
   35188:	ldr	r2, [r4, #16]
   3518c:	cmp	r2, r3
   35190:	bhi	35218 <flatcc_json_printer_uint32_struct_field@@Base+0xf8>
   35194:	mov	r2, r6
   35198:	ldr	r1, [sp, #24]
   3519c:	mov	r0, r4
   351a0:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   351a4:	b	35230 <flatcc_json_printer_uint32_struct_field@@Base+0x110>
   351a8:	ldr	r3, [r0, #20]
   351ac:	add	r2, r3, #1
   351b0:	str	r2, [r0, #20]
   351b4:	mov	r2, #10
   351b8:	strb	r2, [r3]
   351bc:	ldrb	r3, [r0, #25]
   351c0:	ldr	r7, [r0, #32]
   351c4:	mul	r7, r7, r3
   351c8:	ldr	r0, [r0, #20]
   351cc:	add	r3, r0, r7
   351d0:	ldr	r2, [r4, #16]
   351d4:	cmp	r2, r3
   351d8:	bcc	351f8 <flatcc_json_printer_uint32_struct_field@@Base+0xd8>
   351dc:	mov	r2, r7
   351e0:	mov	r1, #32
   351e4:	bl	145c4 <memset@plt>
   351e8:	ldr	r3, [r4, #20]
   351ec:	add	r7, r3, r7
   351f0:	str	r7, [r4, #20]
   351f4:	b	35164 <flatcc_json_printer_uint32_struct_field@@Base+0x44>
   351f8:	mov	r1, r7
   351fc:	mov	r0, r4
   35200:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   35204:	b	35164 <flatcc_json_printer_uint32_struct_field@@Base+0x44>
   35208:	ldr	r3, [r0, #44]	; 0x2c
   3520c:	mov	r1, #0
   35210:	blx	r3
   35214:	b	35164 <flatcc_json_printer_uint32_struct_field@@Base+0x44>
   35218:	mov	r2, r6
   3521c:	ldr	r1, [sp, #24]
   35220:	bl	1454c <memcpy@plt>
   35224:	ldr	r3, [r4, #20]
   35228:	add	r6, r3, r6
   3522c:	str	r6, [r4, #20]
   35230:	ldr	r3, [r4, #20]
   35234:	mov	r2, #34	; 0x22
   35238:	strb	r2, [r3]
   3523c:	ldrb	r3, [r4, #26]
   35240:	clz	r3, r3
   35244:	lsr	r3, r3, #5
   35248:	ldr	r1, [r4, #20]
   3524c:	add	r2, r1, r3
   35250:	add	r2, r2, #1
   35254:	str	r2, [r4, #20]
   35258:	mov	r2, #58	; 0x3a
   3525c:	strb	r2, [r1, r3]
   35260:	ldr	r3, [r4, #20]
   35264:	mov	r2, #32
   35268:	strb	r2, [r3]
   3526c:	ldrb	r3, [r4, #25]
   35270:	ldr	r1, [r4, #20]
   35274:	cmp	r3, #0
   35278:	addne	r1, r1, #1
   3527c:	str	r1, [r4, #20]
   35280:	mov	r0, r5
   35284:	bl	2fb2c <flatcc_json_parser_struct_as_root@@Base+0x31c>
   35288:	ldr	r3, [r4, #20]
   3528c:	add	r0, r3, r0
   35290:	str	r0, [r4, #20]
   35294:	pop	{r4, r5, r6, r7, r8, pc}

00035298 <flatcc_json_printer_uint64_struct_field@@Base>:
   35298:	push	{r4, r5, r6, r7, r8, lr}
   3529c:	mov	r4, r0
   352a0:	ldr	r5, [sp, #28]
   352a4:	ldrd	r6, [r2, r3]
   352a8:	cmp	r1, #0
   352ac:	ldrne	r3, [r0, #20]
   352b0:	addne	r2, r3, #1
   352b4:	strne	r2, [r0, #20]
   352b8:	movne	r2, #44	; 0x2c
   352bc:	strbne	r2, [r3]
   352c0:	ldrb	r3, [r0, #25]
   352c4:	cmp	r3, #0
   352c8:	bne	35320 <flatcc_json_printer_uint64_struct_field@@Base+0x88>
   352cc:	ldr	r2, [r0, #20]
   352d0:	ldr	r3, [r0, #16]
   352d4:	cmp	r2, r3
   352d8:	bcs	35380 <flatcc_json_printer_uint64_struct_field@@Base+0xe8>
   352dc:	ldr	r3, [r4, #20]
   352e0:	mov	r2, #34	; 0x22
   352e4:	strb	r2, [r3]
   352e8:	ldrb	r3, [r4, #26]
   352ec:	ldr	r0, [r4, #20]
   352f0:	cmp	r3, #0
   352f4:	addeq	r0, r0, #1
   352f8:	str	r0, [r4, #20]
   352fc:	add	r3, r0, r5
   35300:	ldr	r2, [r4, #16]
   35304:	cmp	r2, r3
   35308:	bhi	35390 <flatcc_json_printer_uint64_struct_field@@Base+0xf8>
   3530c:	mov	r2, r5
   35310:	ldr	r1, [sp, #24]
   35314:	mov	r0, r4
   35318:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3531c:	b	353a8 <flatcc_json_printer_uint64_struct_field@@Base+0x110>
   35320:	ldr	r3, [r0, #20]
   35324:	add	r2, r3, #1
   35328:	str	r2, [r0, #20]
   3532c:	mov	r2, #10
   35330:	strb	r2, [r3]
   35334:	ldrb	r3, [r0, #25]
   35338:	ldr	r8, [r0, #32]
   3533c:	mul	r8, r8, r3
   35340:	ldr	r0, [r0, #20]
   35344:	add	r3, r0, r8
   35348:	ldr	r2, [r4, #16]
   3534c:	cmp	r2, r3
   35350:	bcc	35370 <flatcc_json_printer_uint64_struct_field@@Base+0xd8>
   35354:	mov	r2, r8
   35358:	mov	r1, #32
   3535c:	bl	145c4 <memset@plt>
   35360:	ldr	r3, [r4, #20]
   35364:	add	r8, r3, r8
   35368:	str	r8, [r4, #20]
   3536c:	b	352dc <flatcc_json_printer_uint64_struct_field@@Base+0x44>
   35370:	mov	r1, r8
   35374:	mov	r0, r4
   35378:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3537c:	b	352dc <flatcc_json_printer_uint64_struct_field@@Base+0x44>
   35380:	ldr	r3, [r0, #44]	; 0x2c
   35384:	mov	r1, #0
   35388:	blx	r3
   3538c:	b	352dc <flatcc_json_printer_uint64_struct_field@@Base+0x44>
   35390:	mov	r2, r5
   35394:	ldr	r1, [sp, #24]
   35398:	bl	1454c <memcpy@plt>
   3539c:	ldr	r3, [r4, #20]
   353a0:	add	r5, r3, r5
   353a4:	str	r5, [r4, #20]
   353a8:	ldr	r3, [r4, #20]
   353ac:	mov	r2, #34	; 0x22
   353b0:	strb	r2, [r3]
   353b4:	ldrb	r3, [r4, #26]
   353b8:	clz	r3, r3
   353bc:	lsr	r3, r3, #5
   353c0:	ldr	r1, [r4, #20]
   353c4:	add	r2, r1, r3
   353c8:	add	r2, r2, #1
   353cc:	str	r2, [r4, #20]
   353d0:	mov	r2, #58	; 0x3a
   353d4:	strb	r2, [r1, r3]
   353d8:	ldr	r3, [r4, #20]
   353dc:	mov	r2, #32
   353e0:	strb	r2, [r3]
   353e4:	ldrb	r3, [r4, #25]
   353e8:	ldr	r2, [r4, #20]
   353ec:	cmp	r3, #0
   353f0:	addne	r2, r2, #1
   353f4:	str	r2, [r4, #20]
   353f8:	mov	r0, r6
   353fc:	mov	r1, r7
   35400:	bl	2fe6c <flatcc_json_parser_struct_as_root@@Base+0x65c>
   35404:	ldr	r3, [r4, #20]
   35408:	add	r0, r3, r0
   3540c:	str	r0, [r4, #20]
   35410:	pop	{r4, r5, r6, r7, r8, pc}

00035414 <flatcc_json_printer_int8_struct_field@@Base>:
   35414:	push	{r4, r5, r6, r7, r8, lr}
   35418:	mov	r4, r0
   3541c:	ldr	r6, [sp, #28]
   35420:	ldrsb	r5, [r2, r3]
   35424:	cmp	r1, #0
   35428:	ldrne	r3, [r0, #20]
   3542c:	addne	r2, r3, #1
   35430:	strne	r2, [r0, #20]
   35434:	movne	r2, #44	; 0x2c
   35438:	strbne	r2, [r3]
   3543c:	ldrb	r3, [r0, #25]
   35440:	cmp	r3, #0
   35444:	bne	3549c <flatcc_json_printer_int8_struct_field@@Base+0x88>
   35448:	ldr	r2, [r0, #20]
   3544c:	ldr	r3, [r0, #16]
   35450:	cmp	r2, r3
   35454:	bcs	354fc <flatcc_json_printer_int8_struct_field@@Base+0xe8>
   35458:	ldr	r3, [r4, #20]
   3545c:	mov	r2, #34	; 0x22
   35460:	strb	r2, [r3]
   35464:	ldrb	r3, [r4, #26]
   35468:	ldr	r0, [r4, #20]
   3546c:	cmp	r3, #0
   35470:	addeq	r0, r0, #1
   35474:	str	r0, [r4, #20]
   35478:	add	r3, r0, r6
   3547c:	ldr	r2, [r4, #16]
   35480:	cmp	r2, r3
   35484:	bhi	3550c <flatcc_json_printer_int8_struct_field@@Base+0xf8>
   35488:	mov	r2, r6
   3548c:	ldr	r1, [sp, #24]
   35490:	mov	r0, r4
   35494:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   35498:	b	35524 <flatcc_json_printer_int8_struct_field@@Base+0x110>
   3549c:	ldr	r3, [r0, #20]
   354a0:	add	r2, r3, #1
   354a4:	str	r2, [r0, #20]
   354a8:	mov	r2, #10
   354ac:	strb	r2, [r3]
   354b0:	ldrb	r3, [r0, #25]
   354b4:	ldr	r7, [r0, #32]
   354b8:	mul	r7, r7, r3
   354bc:	ldr	r0, [r0, #20]
   354c0:	add	r3, r0, r7
   354c4:	ldr	r2, [r4, #16]
   354c8:	cmp	r2, r3
   354cc:	bcc	354ec <flatcc_json_printer_int8_struct_field@@Base+0xd8>
   354d0:	mov	r2, r7
   354d4:	mov	r1, #32
   354d8:	bl	145c4 <memset@plt>
   354dc:	ldr	r3, [r4, #20]
   354e0:	add	r7, r3, r7
   354e4:	str	r7, [r4, #20]
   354e8:	b	35458 <flatcc_json_printer_int8_struct_field@@Base+0x44>
   354ec:	mov	r1, r7
   354f0:	mov	r0, r4
   354f4:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   354f8:	b	35458 <flatcc_json_printer_int8_struct_field@@Base+0x44>
   354fc:	ldr	r3, [r0, #44]	; 0x2c
   35500:	mov	r1, #0
   35504:	blx	r3
   35508:	b	35458 <flatcc_json_printer_int8_struct_field@@Base+0x44>
   3550c:	mov	r2, r6
   35510:	ldr	r1, [sp, #24]
   35514:	bl	1454c <memcpy@plt>
   35518:	ldr	r3, [r4, #20]
   3551c:	add	r6, r3, r6
   35520:	str	r6, [r4, #20]
   35524:	ldr	r3, [r4, #20]
   35528:	mov	r2, #34	; 0x22
   3552c:	strb	r2, [r3]
   35530:	ldrb	r3, [r4, #26]
   35534:	clz	r3, r3
   35538:	lsr	r3, r3, #5
   3553c:	ldr	r1, [r4, #20]
   35540:	add	r2, r1, r3
   35544:	add	r2, r2, #1
   35548:	str	r2, [r4, #20]
   3554c:	mov	r2, #58	; 0x3a
   35550:	strb	r2, [r1, r3]
   35554:	ldr	r3, [r4, #20]
   35558:	mov	r2, #32
   3555c:	strb	r2, [r3]
   35560:	ldrb	r3, [r4, #25]
   35564:	ldr	r1, [r4, #20]
   35568:	cmp	r3, #0
   3556c:	addne	r1, r1, #1
   35570:	str	r1, [r4, #20]
   35574:	mov	r0, r5
   35578:	bl	304f0 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   3557c:	ldr	r3, [r4, #20]
   35580:	add	r0, r3, r0
   35584:	str	r0, [r4, #20]
   35588:	pop	{r4, r5, r6, r7, r8, pc}

0003558c <flatcc_json_printer_int16_struct_field@@Base>:
   3558c:	push	{r4, r5, r6, r7, r8, lr}
   35590:	mov	r4, r0
   35594:	ldr	r6, [sp, #28]
   35598:	ldrsh	r5, [r2, r3]
   3559c:	cmp	r1, #0
   355a0:	ldrne	r3, [r0, #20]
   355a4:	addne	r2, r3, #1
   355a8:	strne	r2, [r0, #20]
   355ac:	movne	r2, #44	; 0x2c
   355b0:	strbne	r2, [r3]
   355b4:	ldrb	r3, [r0, #25]
   355b8:	cmp	r3, #0
   355bc:	bne	35614 <flatcc_json_printer_int16_struct_field@@Base+0x88>
   355c0:	ldr	r2, [r0, #20]
   355c4:	ldr	r3, [r0, #16]
   355c8:	cmp	r2, r3
   355cc:	bcs	35674 <flatcc_json_printer_int16_struct_field@@Base+0xe8>
   355d0:	ldr	r3, [r4, #20]
   355d4:	mov	r2, #34	; 0x22
   355d8:	strb	r2, [r3]
   355dc:	ldrb	r3, [r4, #26]
   355e0:	ldr	r0, [r4, #20]
   355e4:	cmp	r3, #0
   355e8:	addeq	r0, r0, #1
   355ec:	str	r0, [r4, #20]
   355f0:	add	r3, r0, r6
   355f4:	ldr	r2, [r4, #16]
   355f8:	cmp	r2, r3
   355fc:	bhi	35684 <flatcc_json_printer_int16_struct_field@@Base+0xf8>
   35600:	mov	r2, r6
   35604:	ldr	r1, [sp, #24]
   35608:	mov	r0, r4
   3560c:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   35610:	b	3569c <flatcc_json_printer_int16_struct_field@@Base+0x110>
   35614:	ldr	r3, [r0, #20]
   35618:	add	r2, r3, #1
   3561c:	str	r2, [r0, #20]
   35620:	mov	r2, #10
   35624:	strb	r2, [r3]
   35628:	ldrb	r3, [r0, #25]
   3562c:	ldr	r7, [r0, #32]
   35630:	mul	r7, r7, r3
   35634:	ldr	r0, [r0, #20]
   35638:	add	r3, r0, r7
   3563c:	ldr	r2, [r4, #16]
   35640:	cmp	r2, r3
   35644:	bcc	35664 <flatcc_json_printer_int16_struct_field@@Base+0xd8>
   35648:	mov	r2, r7
   3564c:	mov	r1, #32
   35650:	bl	145c4 <memset@plt>
   35654:	ldr	r3, [r4, #20]
   35658:	add	r7, r3, r7
   3565c:	str	r7, [r4, #20]
   35660:	b	355d0 <flatcc_json_printer_int16_struct_field@@Base+0x44>
   35664:	mov	r1, r7
   35668:	mov	r0, r4
   3566c:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   35670:	b	355d0 <flatcc_json_printer_int16_struct_field@@Base+0x44>
   35674:	ldr	r3, [r0, #44]	; 0x2c
   35678:	mov	r1, #0
   3567c:	blx	r3
   35680:	b	355d0 <flatcc_json_printer_int16_struct_field@@Base+0x44>
   35684:	mov	r2, r6
   35688:	ldr	r1, [sp, #24]
   3568c:	bl	1454c <memcpy@plt>
   35690:	ldr	r3, [r4, #20]
   35694:	add	r6, r3, r6
   35698:	str	r6, [r4, #20]
   3569c:	ldr	r3, [r4, #20]
   356a0:	mov	r2, #34	; 0x22
   356a4:	strb	r2, [r3]
   356a8:	ldrb	r3, [r4, #26]
   356ac:	clz	r3, r3
   356b0:	lsr	r3, r3, #5
   356b4:	ldr	r1, [r4, #20]
   356b8:	add	r2, r1, r3
   356bc:	add	r2, r2, #1
   356c0:	str	r2, [r4, #20]
   356c4:	mov	r2, #58	; 0x3a
   356c8:	strb	r2, [r1, r3]
   356cc:	ldr	r3, [r4, #20]
   356d0:	mov	r2, #32
   356d4:	strb	r2, [r3]
   356d8:	ldrb	r3, [r4, #25]
   356dc:	ldr	r1, [r4, #20]
   356e0:	cmp	r3, #0
   356e4:	addne	r1, r1, #1
   356e8:	str	r1, [r4, #20]
   356ec:	mov	r0, r5
   356f0:	bl	30520 <flatcc_json_parser_struct_as_root@@Base+0xd10>
   356f4:	ldr	r3, [r4, #20]
   356f8:	add	r0, r3, r0
   356fc:	str	r0, [r4, #20]
   35700:	pop	{r4, r5, r6, r7, r8, pc}

00035704 <flatcc_json_printer_int32_struct_field@@Base>:
   35704:	push	{r4, r5, r6, r7, r8, lr}
   35708:	mov	r4, r0
   3570c:	ldr	r6, [sp, #28]
   35710:	ldr	r5, [r2, r3]
   35714:	cmp	r1, #0
   35718:	ldrne	r3, [r0, #20]
   3571c:	addne	r2, r3, #1
   35720:	strne	r2, [r0, #20]
   35724:	movne	r2, #44	; 0x2c
   35728:	strbne	r2, [r3]
   3572c:	ldrb	r3, [r0, #25]
   35730:	cmp	r3, #0
   35734:	bne	3578c <flatcc_json_printer_int32_struct_field@@Base+0x88>
   35738:	ldr	r2, [r0, #20]
   3573c:	ldr	r3, [r0, #16]
   35740:	cmp	r2, r3
   35744:	bcs	357ec <flatcc_json_printer_int32_struct_field@@Base+0xe8>
   35748:	ldr	r3, [r4, #20]
   3574c:	mov	r2, #34	; 0x22
   35750:	strb	r2, [r3]
   35754:	ldrb	r3, [r4, #26]
   35758:	ldr	r0, [r4, #20]
   3575c:	cmp	r3, #0
   35760:	addeq	r0, r0, #1
   35764:	str	r0, [r4, #20]
   35768:	add	r3, r0, r6
   3576c:	ldr	r2, [r4, #16]
   35770:	cmp	r2, r3
   35774:	bhi	357fc <flatcc_json_printer_int32_struct_field@@Base+0xf8>
   35778:	mov	r2, r6
   3577c:	ldr	r1, [sp, #24]
   35780:	mov	r0, r4
   35784:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   35788:	b	35814 <flatcc_json_printer_int32_struct_field@@Base+0x110>
   3578c:	ldr	r3, [r0, #20]
   35790:	add	r2, r3, #1
   35794:	str	r2, [r0, #20]
   35798:	mov	r2, #10
   3579c:	strb	r2, [r3]
   357a0:	ldrb	r3, [r0, #25]
   357a4:	ldr	r7, [r0, #32]
   357a8:	mul	r7, r7, r3
   357ac:	ldr	r0, [r0, #20]
   357b0:	add	r3, r0, r7
   357b4:	ldr	r2, [r4, #16]
   357b8:	cmp	r2, r3
   357bc:	bcc	357dc <flatcc_json_printer_int32_struct_field@@Base+0xd8>
   357c0:	mov	r2, r7
   357c4:	mov	r1, #32
   357c8:	bl	145c4 <memset@plt>
   357cc:	ldr	r3, [r4, #20]
   357d0:	add	r7, r3, r7
   357d4:	str	r7, [r4, #20]
   357d8:	b	35748 <flatcc_json_printer_int32_struct_field@@Base+0x44>
   357dc:	mov	r1, r7
   357e0:	mov	r0, r4
   357e4:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   357e8:	b	35748 <flatcc_json_printer_int32_struct_field@@Base+0x44>
   357ec:	ldr	r3, [r0, #44]	; 0x2c
   357f0:	mov	r1, #0
   357f4:	blx	r3
   357f8:	b	35748 <flatcc_json_printer_int32_struct_field@@Base+0x44>
   357fc:	mov	r2, r6
   35800:	ldr	r1, [sp, #24]
   35804:	bl	1454c <memcpy@plt>
   35808:	ldr	r3, [r4, #20]
   3580c:	add	r6, r3, r6
   35810:	str	r6, [r4, #20]
   35814:	ldr	r3, [r4, #20]
   35818:	mov	r2, #34	; 0x22
   3581c:	strb	r2, [r3]
   35820:	ldrb	r3, [r4, #26]
   35824:	clz	r3, r3
   35828:	lsr	r3, r3, #5
   3582c:	ldr	r1, [r4, #20]
   35830:	add	r2, r1, r3
   35834:	add	r2, r2, #1
   35838:	str	r2, [r4, #20]
   3583c:	mov	r2, #58	; 0x3a
   35840:	strb	r2, [r1, r3]
   35844:	ldr	r3, [r4, #20]
   35848:	mov	r2, #32
   3584c:	strb	r2, [r3]
   35850:	ldrb	r3, [r4, #25]
   35854:	ldr	r1, [r4, #20]
   35858:	cmp	r3, #0
   3585c:	addne	r1, r1, #1
   35860:	str	r1, [r4, #20]
   35864:	mov	r0, r5
   35868:	bl	30550 <flatcc_json_parser_struct_as_root@@Base+0xd40>
   3586c:	ldr	r3, [r4, #20]
   35870:	add	r0, r3, r0
   35874:	str	r0, [r4, #20]
   35878:	pop	{r4, r5, r6, r7, r8, pc}

0003587c <flatcc_json_printer_int64_struct_field@@Base>:
   3587c:	push	{r4, r5, r6, r7, r8, lr}
   35880:	mov	r4, r0
   35884:	ldr	r5, [sp, #28]
   35888:	ldrd	r6, [r2, r3]
   3588c:	cmp	r1, #0
   35890:	ldrne	r3, [r0, #20]
   35894:	addne	r2, r3, #1
   35898:	strne	r2, [r0, #20]
   3589c:	movne	r2, #44	; 0x2c
   358a0:	strbne	r2, [r3]
   358a4:	ldrb	r3, [r0, #25]
   358a8:	cmp	r3, #0
   358ac:	bne	35904 <flatcc_json_printer_int64_struct_field@@Base+0x88>
   358b0:	ldr	r2, [r0, #20]
   358b4:	ldr	r3, [r0, #16]
   358b8:	cmp	r2, r3
   358bc:	bcs	35964 <flatcc_json_printer_int64_struct_field@@Base+0xe8>
   358c0:	ldr	r3, [r4, #20]
   358c4:	mov	r2, #34	; 0x22
   358c8:	strb	r2, [r3]
   358cc:	ldrb	r3, [r4, #26]
   358d0:	ldr	r0, [r4, #20]
   358d4:	cmp	r3, #0
   358d8:	addeq	r0, r0, #1
   358dc:	str	r0, [r4, #20]
   358e0:	add	r3, r0, r5
   358e4:	ldr	r2, [r4, #16]
   358e8:	cmp	r2, r3
   358ec:	bhi	35974 <flatcc_json_printer_int64_struct_field@@Base+0xf8>
   358f0:	mov	r2, r5
   358f4:	ldr	r1, [sp, #24]
   358f8:	mov	r0, r4
   358fc:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   35900:	b	3598c <flatcc_json_printer_int64_struct_field@@Base+0x110>
   35904:	ldr	r3, [r0, #20]
   35908:	add	r2, r3, #1
   3590c:	str	r2, [r0, #20]
   35910:	mov	r2, #10
   35914:	strb	r2, [r3]
   35918:	ldrb	r3, [r0, #25]
   3591c:	ldr	r8, [r0, #32]
   35920:	mul	r8, r8, r3
   35924:	ldr	r0, [r0, #20]
   35928:	add	r3, r0, r8
   3592c:	ldr	r2, [r4, #16]
   35930:	cmp	r2, r3
   35934:	bcc	35954 <flatcc_json_printer_int64_struct_field@@Base+0xd8>
   35938:	mov	r2, r8
   3593c:	mov	r1, #32
   35940:	bl	145c4 <memset@plt>
   35944:	ldr	r3, [r4, #20]
   35948:	add	r8, r3, r8
   3594c:	str	r8, [r4, #20]
   35950:	b	358c0 <flatcc_json_printer_int64_struct_field@@Base+0x44>
   35954:	mov	r1, r8
   35958:	mov	r0, r4
   3595c:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   35960:	b	358c0 <flatcc_json_printer_int64_struct_field@@Base+0x44>
   35964:	ldr	r3, [r0, #44]	; 0x2c
   35968:	mov	r1, #0
   3596c:	blx	r3
   35970:	b	358c0 <flatcc_json_printer_int64_struct_field@@Base+0x44>
   35974:	mov	r2, r5
   35978:	ldr	r1, [sp, #24]
   3597c:	bl	1454c <memcpy@plt>
   35980:	ldr	r3, [r4, #20]
   35984:	add	r5, r3, r5
   35988:	str	r5, [r4, #20]
   3598c:	ldr	r3, [r4, #20]
   35990:	mov	r2, #34	; 0x22
   35994:	strb	r2, [r3]
   35998:	ldrb	r3, [r4, #26]
   3599c:	clz	r3, r3
   359a0:	lsr	r3, r3, #5
   359a4:	ldr	r1, [r4, #20]
   359a8:	add	r2, r1, r3
   359ac:	add	r2, r2, #1
   359b0:	str	r2, [r4, #20]
   359b4:	mov	r2, #58	; 0x3a
   359b8:	strb	r2, [r1, r3]
   359bc:	ldr	r3, [r4, #20]
   359c0:	mov	r2, #32
   359c4:	strb	r2, [r3]
   359c8:	ldrb	r3, [r4, #25]
   359cc:	ldr	r2, [r4, #20]
   359d0:	cmp	r3, #0
   359d4:	addne	r2, r2, #1
   359d8:	str	r2, [r4, #20]
   359dc:	mov	r0, r6
   359e0:	mov	r1, r7
   359e4:	bl	30578 <flatcc_json_parser_struct_as_root@@Base+0xd68>
   359e8:	ldr	r3, [r4, #20]
   359ec:	add	r0, r3, r0
   359f0:	str	r0, [r4, #20]
   359f4:	pop	{r4, r5, r6, r7, r8, pc}

000359f8 <flatcc_json_printer_bool_struct_field@@Base>:
   359f8:	push	{r4, r5, r6, r7, r8, lr}
   359fc:	mov	r4, r0
   35a00:	ldr	r6, [sp, #28]
   35a04:	ldrb	r5, [r2, r3]
   35a08:	cmp	r1, #0
   35a0c:	ldrne	r3, [r0, #20]
   35a10:	addne	r2, r3, #1
   35a14:	strne	r2, [r0, #20]
   35a18:	movne	r2, #44	; 0x2c
   35a1c:	strbne	r2, [r3]
   35a20:	ldrb	r3, [r0, #25]
   35a24:	cmp	r3, #0
   35a28:	bne	35a80 <flatcc_json_printer_bool_struct_field@@Base+0x88>
   35a2c:	ldr	r2, [r0, #20]
   35a30:	ldr	r3, [r0, #16]
   35a34:	cmp	r2, r3
   35a38:	bcs	35ae0 <flatcc_json_printer_bool_struct_field@@Base+0xe8>
   35a3c:	ldr	r3, [r4, #20]
   35a40:	mov	r2, #34	; 0x22
   35a44:	strb	r2, [r3]
   35a48:	ldrb	r3, [r4, #26]
   35a4c:	ldr	r0, [r4, #20]
   35a50:	cmp	r3, #0
   35a54:	addeq	r0, r0, #1
   35a58:	str	r0, [r4, #20]
   35a5c:	add	r3, r0, r6
   35a60:	ldr	r2, [r4, #16]
   35a64:	cmp	r2, r3
   35a68:	bhi	35af0 <flatcc_json_printer_bool_struct_field@@Base+0xf8>
   35a6c:	mov	r2, r6
   35a70:	ldr	r1, [sp, #24]
   35a74:	mov	r0, r4
   35a78:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   35a7c:	b	35b08 <flatcc_json_printer_bool_struct_field@@Base+0x110>
   35a80:	ldr	r3, [r0, #20]
   35a84:	add	r2, r3, #1
   35a88:	str	r2, [r0, #20]
   35a8c:	mov	r2, #10
   35a90:	strb	r2, [r3]
   35a94:	ldrb	r3, [r0, #25]
   35a98:	ldr	r7, [r0, #32]
   35a9c:	mul	r7, r7, r3
   35aa0:	ldr	r0, [r0, #20]
   35aa4:	add	r3, r0, r7
   35aa8:	ldr	r2, [r4, #16]
   35aac:	cmp	r2, r3
   35ab0:	bcc	35ad0 <flatcc_json_printer_bool_struct_field@@Base+0xd8>
   35ab4:	mov	r2, r7
   35ab8:	mov	r1, #32
   35abc:	bl	145c4 <memset@plt>
   35ac0:	ldr	r3, [r4, #20]
   35ac4:	add	r7, r3, r7
   35ac8:	str	r7, [r4, #20]
   35acc:	b	35a3c <flatcc_json_printer_bool_struct_field@@Base+0x44>
   35ad0:	mov	r1, r7
   35ad4:	mov	r0, r4
   35ad8:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   35adc:	b	35a3c <flatcc_json_printer_bool_struct_field@@Base+0x44>
   35ae0:	ldr	r3, [r0, #44]	; 0x2c
   35ae4:	mov	r1, #0
   35ae8:	blx	r3
   35aec:	b	35a3c <flatcc_json_printer_bool_struct_field@@Base+0x44>
   35af0:	mov	r2, r6
   35af4:	ldr	r1, [sp, #24]
   35af8:	bl	1454c <memcpy@plt>
   35afc:	ldr	r3, [r4, #20]
   35b00:	add	r6, r3, r6
   35b04:	str	r6, [r4, #20]
   35b08:	ldr	r3, [r4, #20]
   35b0c:	mov	r2, #34	; 0x22
   35b10:	strb	r2, [r3]
   35b14:	ldrb	r3, [r4, #26]
   35b18:	clz	r3, r3
   35b1c:	lsr	r3, r3, #5
   35b20:	ldr	r1, [r4, #20]
   35b24:	add	r2, r1, r3
   35b28:	add	r2, r2, #1
   35b2c:	str	r2, [r4, #20]
   35b30:	mov	r2, #58	; 0x3a
   35b34:	strb	r2, [r1, r3]
   35b38:	ldr	r3, [r4, #20]
   35b3c:	mov	r2, #32
   35b40:	strb	r2, [r3]
   35b44:	ldrb	r3, [r4, #25]
   35b48:	ldr	r1, [r4, #20]
   35b4c:	cmp	r3, #0
   35b50:	addne	r1, r1, #1
   35b54:	str	r1, [r4, #20]
   35b58:	mov	r0, r5
   35b5c:	bl	30c34 <flatcc_json_parser_struct_as_root@@Base+0x1424>
   35b60:	ldr	r3, [r4, #20]
   35b64:	add	r0, r3, r0
   35b68:	str	r0, [r4, #20]
   35b6c:	pop	{r4, r5, r6, r7, r8, pc}

00035b70 <flatcc_json_printer_float_struct_field@@Base>:
   35b70:	push	{r4, r5, r6, lr}
   35b74:	vpush	{d8}
   35b78:	mov	r4, r0
   35b7c:	ldr	r5, [sp, #28]
   35b80:	add	r3, r2, r3
   35b84:	vldr	s16, [r3]
   35b88:	cmp	r1, #0
   35b8c:	ldrne	r3, [r0, #20]
   35b90:	addne	r2, r3, #1
   35b94:	strne	r2, [r0, #20]
   35b98:	movne	r2, #44	; 0x2c
   35b9c:	strbne	r2, [r3]
   35ba0:	ldrb	r3, [r0, #25]
   35ba4:	cmp	r3, #0
   35ba8:	bne	35c00 <flatcc_json_printer_float_struct_field@@Base+0x90>
   35bac:	ldr	r2, [r0, #20]
   35bb0:	ldr	r3, [r0, #16]
   35bb4:	cmp	r2, r3
   35bb8:	bcs	35c60 <flatcc_json_printer_float_struct_field@@Base+0xf0>
   35bbc:	ldr	r3, [r4, #20]
   35bc0:	mov	r2, #34	; 0x22
   35bc4:	strb	r2, [r3]
   35bc8:	ldrb	r3, [r4, #26]
   35bcc:	ldr	r0, [r4, #20]
   35bd0:	cmp	r3, #0
   35bd4:	addeq	r0, r0, #1
   35bd8:	str	r0, [r4, #20]
   35bdc:	add	r3, r0, r5
   35be0:	ldr	r2, [r4, #16]
   35be4:	cmp	r2, r3
   35be8:	bhi	35c70 <flatcc_json_printer_float_struct_field@@Base+0x100>
   35bec:	mov	r2, r5
   35bf0:	ldr	r1, [sp, #24]
   35bf4:	mov	r0, r4
   35bf8:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   35bfc:	b	35c88 <flatcc_json_printer_float_struct_field@@Base+0x118>
   35c00:	ldr	r3, [r0, #20]
   35c04:	add	r2, r3, #1
   35c08:	str	r2, [r0, #20]
   35c0c:	mov	r2, #10
   35c10:	strb	r2, [r3]
   35c14:	ldrb	r3, [r0, #25]
   35c18:	ldr	r6, [r0, #32]
   35c1c:	mul	r6, r6, r3
   35c20:	ldr	r0, [r0, #20]
   35c24:	add	r3, r0, r6
   35c28:	ldr	r2, [r4, #16]
   35c2c:	cmp	r2, r3
   35c30:	bcc	35c50 <flatcc_json_printer_float_struct_field@@Base+0xe0>
   35c34:	mov	r2, r6
   35c38:	mov	r1, #32
   35c3c:	bl	145c4 <memset@plt>
   35c40:	ldr	r3, [r4, #20]
   35c44:	add	r6, r3, r6
   35c48:	str	r6, [r4, #20]
   35c4c:	b	35bbc <flatcc_json_printer_float_struct_field@@Base+0x4c>
   35c50:	mov	r1, r6
   35c54:	mov	r0, r4
   35c58:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   35c5c:	b	35bbc <flatcc_json_printer_float_struct_field@@Base+0x4c>
   35c60:	ldr	r3, [r0, #44]	; 0x2c
   35c64:	mov	r1, #0
   35c68:	blx	r3
   35c6c:	b	35bbc <flatcc_json_printer_float_struct_field@@Base+0x4c>
   35c70:	mov	r2, r5
   35c74:	ldr	r1, [sp, #24]
   35c78:	bl	1454c <memcpy@plt>
   35c7c:	ldr	r3, [r4, #20]
   35c80:	add	r5, r3, r5
   35c84:	str	r5, [r4, #20]
   35c88:	ldr	r3, [r4, #20]
   35c8c:	mov	r2, #34	; 0x22
   35c90:	strb	r2, [r3]
   35c94:	ldrb	r3, [r4, #26]
   35c98:	clz	r3, r3
   35c9c:	lsr	r3, r3, #5
   35ca0:	ldr	r1, [r4, #20]
   35ca4:	add	r2, r1, r3
   35ca8:	add	r2, r2, #1
   35cac:	str	r2, [r4, #20]
   35cb0:	mov	r2, #58	; 0x3a
   35cb4:	strb	r2, [r1, r3]
   35cb8:	ldr	r3, [r4, #20]
   35cbc:	mov	r2, #32
   35cc0:	strb	r2, [r3]
   35cc4:	ldrb	r3, [r4, #25]
   35cc8:	ldr	r0, [r4, #20]
   35ccc:	cmp	r3, #0
   35cd0:	addne	r0, r0, #1
   35cd4:	str	r0, [r4, #20]
   35cd8:	vcvt.f64.f32	d0, s16
   35cdc:	bl	3131c <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   35ce0:	ldr	r3, [r4, #20]
   35ce4:	add	r0, r3, r0
   35ce8:	str	r0, [r4, #20]
   35cec:	vpop	{d8}
   35cf0:	pop	{r4, r5, r6, pc}

00035cf4 <flatcc_json_printer_double_struct_field@@Base>:
   35cf4:	push	{r4, r5, r6, lr}
   35cf8:	vpush	{d8}
   35cfc:	mov	r4, r0
   35d00:	ldr	r5, [sp, #28]
   35d04:	add	r3, r2, r3
   35d08:	vldr	d8, [r3]
   35d0c:	cmp	r1, #0
   35d10:	ldrne	r3, [r0, #20]
   35d14:	addne	r2, r3, #1
   35d18:	strne	r2, [r0, #20]
   35d1c:	movne	r2, #44	; 0x2c
   35d20:	strbne	r2, [r3]
   35d24:	ldrb	r3, [r0, #25]
   35d28:	cmp	r3, #0
   35d2c:	bne	35d84 <flatcc_json_printer_double_struct_field@@Base+0x90>
   35d30:	ldr	r2, [r0, #20]
   35d34:	ldr	r3, [r0, #16]
   35d38:	cmp	r2, r3
   35d3c:	bcs	35de4 <flatcc_json_printer_double_struct_field@@Base+0xf0>
   35d40:	ldr	r3, [r4, #20]
   35d44:	mov	r2, #34	; 0x22
   35d48:	strb	r2, [r3]
   35d4c:	ldrb	r3, [r4, #26]
   35d50:	ldr	r0, [r4, #20]
   35d54:	cmp	r3, #0
   35d58:	addeq	r0, r0, #1
   35d5c:	str	r0, [r4, #20]
   35d60:	add	r3, r0, r5
   35d64:	ldr	r2, [r4, #16]
   35d68:	cmp	r2, r3
   35d6c:	bhi	35df4 <flatcc_json_printer_double_struct_field@@Base+0x100>
   35d70:	mov	r2, r5
   35d74:	ldr	r1, [sp, #24]
   35d78:	mov	r0, r4
   35d7c:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   35d80:	b	35e0c <flatcc_json_printer_double_struct_field@@Base+0x118>
   35d84:	ldr	r3, [r0, #20]
   35d88:	add	r2, r3, #1
   35d8c:	str	r2, [r0, #20]
   35d90:	mov	r2, #10
   35d94:	strb	r2, [r3]
   35d98:	ldrb	r3, [r0, #25]
   35d9c:	ldr	r6, [r0, #32]
   35da0:	mul	r6, r6, r3
   35da4:	ldr	r0, [r0, #20]
   35da8:	add	r3, r0, r6
   35dac:	ldr	r2, [r4, #16]
   35db0:	cmp	r2, r3
   35db4:	bcc	35dd4 <flatcc_json_printer_double_struct_field@@Base+0xe0>
   35db8:	mov	r2, r6
   35dbc:	mov	r1, #32
   35dc0:	bl	145c4 <memset@plt>
   35dc4:	ldr	r3, [r4, #20]
   35dc8:	add	r6, r3, r6
   35dcc:	str	r6, [r4, #20]
   35dd0:	b	35d40 <flatcc_json_printer_double_struct_field@@Base+0x4c>
   35dd4:	mov	r1, r6
   35dd8:	mov	r0, r4
   35ddc:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   35de0:	b	35d40 <flatcc_json_printer_double_struct_field@@Base+0x4c>
   35de4:	ldr	r3, [r0, #44]	; 0x2c
   35de8:	mov	r1, #0
   35dec:	blx	r3
   35df0:	b	35d40 <flatcc_json_printer_double_struct_field@@Base+0x4c>
   35df4:	mov	r2, r5
   35df8:	ldr	r1, [sp, #24]
   35dfc:	bl	1454c <memcpy@plt>
   35e00:	ldr	r3, [r4, #20]
   35e04:	add	r5, r3, r5
   35e08:	str	r5, [r4, #20]
   35e0c:	ldr	r3, [r4, #20]
   35e10:	mov	r2, #34	; 0x22
   35e14:	strb	r2, [r3]
   35e18:	ldrb	r3, [r4, #26]
   35e1c:	clz	r3, r3
   35e20:	lsr	r3, r3, #5
   35e24:	ldr	r1, [r4, #20]
   35e28:	add	r2, r1, r3
   35e2c:	add	r2, r2, #1
   35e30:	str	r2, [r4, #20]
   35e34:	mov	r2, #58	; 0x3a
   35e38:	strb	r2, [r1, r3]
   35e3c:	ldr	r3, [r4, #20]
   35e40:	mov	r2, #32
   35e44:	strb	r2, [r3]
   35e48:	ldrb	r3, [r4, #25]
   35e4c:	ldr	r0, [r4, #20]
   35e50:	cmp	r3, #0
   35e54:	addne	r0, r0, #1
   35e58:	str	r0, [r4, #20]
   35e5c:	vmov.f64	d0, d8
   35e60:	bl	3131c <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   35e64:	ldr	r3, [r4, #20]
   35e68:	add	r0, r3, r0
   35e6c:	str	r0, [r4, #20]
   35e70:	vpop	{d8}
   35e74:	pop	{r4, r5, r6, pc}

00035e78 <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   35e78:	push	{r4, r5, r6, r7, r8, lr}
   35e7c:	mov	r4, r0
   35e80:	ldr	r6, [sp, #28]
   35e84:	ldrb	r5, [r2, r3]
   35e88:	cmp	r1, #0
   35e8c:	ldrne	r3, [r0, #20]
   35e90:	addne	r2, r3, #1
   35e94:	strne	r2, [r0, #20]
   35e98:	movne	r2, #44	; 0x2c
   35e9c:	strbne	r2, [r3]
   35ea0:	ldrb	r3, [r0, #25]
   35ea4:	cmp	r3, #0
   35ea8:	bne	35f00 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x88>
   35eac:	ldr	r2, [r0, #20]
   35eb0:	ldr	r3, [r0, #16]
   35eb4:	cmp	r2, r3
   35eb8:	bcs	35f60 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xe8>
   35ebc:	ldr	r3, [r4, #20]
   35ec0:	mov	r2, #34	; 0x22
   35ec4:	strb	r2, [r3]
   35ec8:	ldrb	r3, [r4, #26]
   35ecc:	ldr	r0, [r4, #20]
   35ed0:	cmp	r3, #0
   35ed4:	addeq	r0, r0, #1
   35ed8:	str	r0, [r4, #20]
   35edc:	add	r3, r0, r6
   35ee0:	ldr	r2, [r4, #16]
   35ee4:	cmp	r2, r3
   35ee8:	bhi	35f70 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xf8>
   35eec:	mov	r2, r6
   35ef0:	ldr	r1, [sp, #24]
   35ef4:	mov	r0, r4
   35ef8:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   35efc:	b	35f88 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x110>
   35f00:	ldr	r3, [r0, #20]
   35f04:	add	r2, r3, #1
   35f08:	str	r2, [r0, #20]
   35f0c:	mov	r2, #10
   35f10:	strb	r2, [r3]
   35f14:	ldrb	r3, [r0, #25]
   35f18:	ldr	r7, [r0, #32]
   35f1c:	mul	r7, r7, r3
   35f20:	ldr	r0, [r0, #20]
   35f24:	add	r3, r0, r7
   35f28:	ldr	r2, [r4, #16]
   35f2c:	cmp	r2, r3
   35f30:	bcc	35f50 <flatcc_json_printer_uint8_enum_struct_field@@Base+0xd8>
   35f34:	mov	r2, r7
   35f38:	mov	r1, #32
   35f3c:	bl	145c4 <memset@plt>
   35f40:	ldr	r3, [r4, #20]
   35f44:	add	r7, r3, r7
   35f48:	str	r7, [r4, #20]
   35f4c:	b	35ebc <flatcc_json_printer_uint8_enum_struct_field@@Base+0x44>
   35f50:	mov	r1, r7
   35f54:	mov	r0, r4
   35f58:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   35f5c:	b	35ebc <flatcc_json_printer_uint8_enum_struct_field@@Base+0x44>
   35f60:	ldr	r3, [r0, #44]	; 0x2c
   35f64:	mov	r1, #0
   35f68:	blx	r3
   35f6c:	b	35ebc <flatcc_json_printer_uint8_enum_struct_field@@Base+0x44>
   35f70:	mov	r2, r6
   35f74:	ldr	r1, [sp, #24]
   35f78:	bl	1454c <memcpy@plt>
   35f7c:	ldr	r3, [r4, #20]
   35f80:	add	r6, r3, r6
   35f84:	str	r6, [r4, #20]
   35f88:	ldr	r3, [r4, #20]
   35f8c:	mov	r2, #34	; 0x22
   35f90:	strb	r2, [r3]
   35f94:	ldrb	r3, [r4, #26]
   35f98:	clz	r3, r3
   35f9c:	lsr	r3, r3, #5
   35fa0:	ldr	r1, [r4, #20]
   35fa4:	add	r2, r1, r3
   35fa8:	add	r2, r2, #1
   35fac:	str	r2, [r4, #20]
   35fb0:	mov	r2, #58	; 0x3a
   35fb4:	strb	r2, [r1, r3]
   35fb8:	ldr	r3, [r4, #20]
   35fbc:	mov	r2, #32
   35fc0:	strb	r2, [r3]
   35fc4:	ldrb	r3, [r4, #25]
   35fc8:	ldr	r1, [r4, #20]
   35fcc:	cmp	r3, #0
   35fd0:	addne	r1, r1, #1
   35fd4:	str	r1, [r4, #20]
   35fd8:	ldrb	r3, [r4, #27]
   35fdc:	cmp	r3, #0
   35fe0:	bne	35ff8 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x180>
   35fe4:	mov	r1, r5
   35fe8:	mov	r0, r4
   35fec:	ldr	r3, [sp, #32]
   35ff0:	blx	r3
   35ff4:	pop	{r4, r5, r6, r7, r8, pc}
   35ff8:	mov	r0, r5
   35ffc:	bl	2f8e8 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   36000:	ldr	r3, [r4, #20]
   36004:	add	r0, r3, r0
   36008:	str	r0, [r4, #20]
   3600c:	pop	{r4, r5, r6, r7, r8, pc}

00036010 <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   36010:	push	{r4, r5, r6, r7, r8, lr}
   36014:	mov	r4, r0
   36018:	ldr	r6, [sp, #28]
   3601c:	ldrh	r5, [r2, r3]
   36020:	cmp	r1, #0
   36024:	ldrne	r3, [r0, #20]
   36028:	addne	r2, r3, #1
   3602c:	strne	r2, [r0, #20]
   36030:	movne	r2, #44	; 0x2c
   36034:	strbne	r2, [r3]
   36038:	ldrb	r3, [r0, #25]
   3603c:	cmp	r3, #0
   36040:	bne	36098 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x88>
   36044:	ldr	r2, [r0, #20]
   36048:	ldr	r3, [r0, #16]
   3604c:	cmp	r2, r3
   36050:	bcs	360f8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xe8>
   36054:	ldr	r3, [r4, #20]
   36058:	mov	r2, #34	; 0x22
   3605c:	strb	r2, [r3]
   36060:	ldrb	r3, [r4, #26]
   36064:	ldr	r0, [r4, #20]
   36068:	cmp	r3, #0
   3606c:	addeq	r0, r0, #1
   36070:	str	r0, [r4, #20]
   36074:	add	r3, r0, r6
   36078:	ldr	r2, [r4, #16]
   3607c:	cmp	r2, r3
   36080:	bhi	36108 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xf8>
   36084:	mov	r2, r6
   36088:	ldr	r1, [sp, #24]
   3608c:	mov	r0, r4
   36090:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   36094:	b	36120 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x110>
   36098:	ldr	r3, [r0, #20]
   3609c:	add	r2, r3, #1
   360a0:	str	r2, [r0, #20]
   360a4:	mov	r2, #10
   360a8:	strb	r2, [r3]
   360ac:	ldrb	r3, [r0, #25]
   360b0:	ldr	r7, [r0, #32]
   360b4:	mul	r7, r7, r3
   360b8:	ldr	r0, [r0, #20]
   360bc:	add	r3, r0, r7
   360c0:	ldr	r2, [r4, #16]
   360c4:	cmp	r2, r3
   360c8:	bcc	360e8 <flatcc_json_printer_uint16_enum_struct_field@@Base+0xd8>
   360cc:	mov	r2, r7
   360d0:	mov	r1, #32
   360d4:	bl	145c4 <memset@plt>
   360d8:	ldr	r3, [r4, #20]
   360dc:	add	r7, r3, r7
   360e0:	str	r7, [r4, #20]
   360e4:	b	36054 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x44>
   360e8:	mov	r1, r7
   360ec:	mov	r0, r4
   360f0:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   360f4:	b	36054 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x44>
   360f8:	ldr	r3, [r0, #44]	; 0x2c
   360fc:	mov	r1, #0
   36100:	blx	r3
   36104:	b	36054 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x44>
   36108:	mov	r2, r6
   3610c:	ldr	r1, [sp, #24]
   36110:	bl	1454c <memcpy@plt>
   36114:	ldr	r3, [r4, #20]
   36118:	add	r6, r3, r6
   3611c:	str	r6, [r4, #20]
   36120:	ldr	r3, [r4, #20]
   36124:	mov	r2, #34	; 0x22
   36128:	strb	r2, [r3]
   3612c:	ldrb	r3, [r4, #26]
   36130:	clz	r3, r3
   36134:	lsr	r3, r3, #5
   36138:	ldr	r1, [r4, #20]
   3613c:	add	r2, r1, r3
   36140:	add	r2, r2, #1
   36144:	str	r2, [r4, #20]
   36148:	mov	r2, #58	; 0x3a
   3614c:	strb	r2, [r1, r3]
   36150:	ldr	r3, [r4, #20]
   36154:	mov	r2, #32
   36158:	strb	r2, [r3]
   3615c:	ldrb	r3, [r4, #25]
   36160:	ldr	r1, [r4, #20]
   36164:	cmp	r3, #0
   36168:	addne	r1, r1, #1
   3616c:	str	r1, [r4, #20]
   36170:	ldrb	r3, [r4, #27]
   36174:	cmp	r3, #0
   36178:	bne	36190 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x180>
   3617c:	mov	r1, r5
   36180:	mov	r0, r4
   36184:	ldr	r3, [sp, #32]
   36188:	blx	r3
   3618c:	pop	{r4, r5, r6, r7, r8, pc}
   36190:	mov	r0, r5
   36194:	bl	2f9a8 <flatcc_json_parser_struct_as_root@@Base+0x198>
   36198:	ldr	r3, [r4, #20]
   3619c:	add	r0, r3, r0
   361a0:	str	r0, [r4, #20]
   361a4:	pop	{r4, r5, r6, r7, r8, pc}

000361a8 <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   361a8:	push	{r4, r5, r6, r7, r8, lr}
   361ac:	mov	r4, r0
   361b0:	ldr	r6, [sp, #28]
   361b4:	ldr	r5, [r2, r3]
   361b8:	cmp	r1, #0
   361bc:	ldrne	r3, [r0, #20]
   361c0:	addne	r2, r3, #1
   361c4:	strne	r2, [r0, #20]
   361c8:	movne	r2, #44	; 0x2c
   361cc:	strbne	r2, [r3]
   361d0:	ldrb	r3, [r0, #25]
   361d4:	cmp	r3, #0
   361d8:	bne	36230 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x88>
   361dc:	ldr	r2, [r0, #20]
   361e0:	ldr	r3, [r0, #16]
   361e4:	cmp	r2, r3
   361e8:	bcs	36290 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xe8>
   361ec:	ldr	r3, [r4, #20]
   361f0:	mov	r2, #34	; 0x22
   361f4:	strb	r2, [r3]
   361f8:	ldrb	r3, [r4, #26]
   361fc:	ldr	r0, [r4, #20]
   36200:	cmp	r3, #0
   36204:	addeq	r0, r0, #1
   36208:	str	r0, [r4, #20]
   3620c:	add	r3, r0, r6
   36210:	ldr	r2, [r4, #16]
   36214:	cmp	r2, r3
   36218:	bhi	362a0 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xf8>
   3621c:	mov	r2, r6
   36220:	ldr	r1, [sp, #24]
   36224:	mov	r0, r4
   36228:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3622c:	b	362b8 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x110>
   36230:	ldr	r3, [r0, #20]
   36234:	add	r2, r3, #1
   36238:	str	r2, [r0, #20]
   3623c:	mov	r2, #10
   36240:	strb	r2, [r3]
   36244:	ldrb	r3, [r0, #25]
   36248:	ldr	r7, [r0, #32]
   3624c:	mul	r7, r7, r3
   36250:	ldr	r0, [r0, #20]
   36254:	add	r3, r0, r7
   36258:	ldr	r2, [r4, #16]
   3625c:	cmp	r2, r3
   36260:	bcc	36280 <flatcc_json_printer_uint32_enum_struct_field@@Base+0xd8>
   36264:	mov	r2, r7
   36268:	mov	r1, #32
   3626c:	bl	145c4 <memset@plt>
   36270:	ldr	r3, [r4, #20]
   36274:	add	r7, r3, r7
   36278:	str	r7, [r4, #20]
   3627c:	b	361ec <flatcc_json_printer_uint32_enum_struct_field@@Base+0x44>
   36280:	mov	r1, r7
   36284:	mov	r0, r4
   36288:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3628c:	b	361ec <flatcc_json_printer_uint32_enum_struct_field@@Base+0x44>
   36290:	ldr	r3, [r0, #44]	; 0x2c
   36294:	mov	r1, #0
   36298:	blx	r3
   3629c:	b	361ec <flatcc_json_printer_uint32_enum_struct_field@@Base+0x44>
   362a0:	mov	r2, r6
   362a4:	ldr	r1, [sp, #24]
   362a8:	bl	1454c <memcpy@plt>
   362ac:	ldr	r3, [r4, #20]
   362b0:	add	r6, r3, r6
   362b4:	str	r6, [r4, #20]
   362b8:	ldr	r3, [r4, #20]
   362bc:	mov	r2, #34	; 0x22
   362c0:	strb	r2, [r3]
   362c4:	ldrb	r3, [r4, #26]
   362c8:	clz	r3, r3
   362cc:	lsr	r3, r3, #5
   362d0:	ldr	r1, [r4, #20]
   362d4:	add	r2, r1, r3
   362d8:	add	r2, r2, #1
   362dc:	str	r2, [r4, #20]
   362e0:	mov	r2, #58	; 0x3a
   362e4:	strb	r2, [r1, r3]
   362e8:	ldr	r3, [r4, #20]
   362ec:	mov	r2, #32
   362f0:	strb	r2, [r3]
   362f4:	ldrb	r3, [r4, #25]
   362f8:	ldr	r1, [r4, #20]
   362fc:	cmp	r3, #0
   36300:	addne	r1, r1, #1
   36304:	str	r1, [r4, #20]
   36308:	ldrb	r3, [r4, #27]
   3630c:	cmp	r3, #0
   36310:	bne	36328 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x180>
   36314:	mov	r1, r5
   36318:	mov	r0, r4
   3631c:	ldr	r3, [sp, #32]
   36320:	blx	r3
   36324:	pop	{r4, r5, r6, r7, r8, pc}
   36328:	mov	r0, r5
   3632c:	bl	2fb2c <flatcc_json_parser_struct_as_root@@Base+0x31c>
   36330:	ldr	r3, [r4, #20]
   36334:	add	r0, r3, r0
   36338:	str	r0, [r4, #20]
   3633c:	pop	{r4, r5, r6, r7, r8, pc}

00036340 <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   36340:	push	{r4, r5, r6, r7, r8, lr}
   36344:	mov	r4, r0
   36348:	ldr	r5, [sp, #28]
   3634c:	ldrd	r6, [r2, r3]
   36350:	cmp	r1, #0
   36354:	ldrne	r3, [r0, #20]
   36358:	addne	r2, r3, #1
   3635c:	strne	r2, [r0, #20]
   36360:	movne	r2, #44	; 0x2c
   36364:	strbne	r2, [r3]
   36368:	ldrb	r3, [r0, #25]
   3636c:	cmp	r3, #0
   36370:	bne	363c8 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x88>
   36374:	ldr	r2, [r0, #20]
   36378:	ldr	r3, [r0, #16]
   3637c:	cmp	r2, r3
   36380:	bcs	36428 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xe8>
   36384:	ldr	r3, [r4, #20]
   36388:	mov	r2, #34	; 0x22
   3638c:	strb	r2, [r3]
   36390:	ldrb	r3, [r4, #26]
   36394:	ldr	r0, [r4, #20]
   36398:	cmp	r3, #0
   3639c:	addeq	r0, r0, #1
   363a0:	str	r0, [r4, #20]
   363a4:	add	r3, r0, r5
   363a8:	ldr	r2, [r4, #16]
   363ac:	cmp	r2, r3
   363b0:	bhi	36438 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xf8>
   363b4:	mov	r2, r5
   363b8:	ldr	r1, [sp, #24]
   363bc:	mov	r0, r4
   363c0:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   363c4:	b	36450 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x110>
   363c8:	ldr	r3, [r0, #20]
   363cc:	add	r2, r3, #1
   363d0:	str	r2, [r0, #20]
   363d4:	mov	r2, #10
   363d8:	strb	r2, [r3]
   363dc:	ldrb	r3, [r0, #25]
   363e0:	ldr	r8, [r0, #32]
   363e4:	mul	r8, r8, r3
   363e8:	ldr	r0, [r0, #20]
   363ec:	add	r3, r0, r8
   363f0:	ldr	r2, [r4, #16]
   363f4:	cmp	r2, r3
   363f8:	bcc	36418 <flatcc_json_printer_uint64_enum_struct_field@@Base+0xd8>
   363fc:	mov	r2, r8
   36400:	mov	r1, #32
   36404:	bl	145c4 <memset@plt>
   36408:	ldr	r3, [r4, #20]
   3640c:	add	r8, r3, r8
   36410:	str	r8, [r4, #20]
   36414:	b	36384 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x44>
   36418:	mov	r1, r8
   3641c:	mov	r0, r4
   36420:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   36424:	b	36384 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x44>
   36428:	ldr	r3, [r0, #44]	; 0x2c
   3642c:	mov	r1, #0
   36430:	blx	r3
   36434:	b	36384 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x44>
   36438:	mov	r2, r5
   3643c:	ldr	r1, [sp, #24]
   36440:	bl	1454c <memcpy@plt>
   36444:	ldr	r3, [r4, #20]
   36448:	add	r5, r3, r5
   3644c:	str	r5, [r4, #20]
   36450:	ldr	r3, [r4, #20]
   36454:	mov	r2, #34	; 0x22
   36458:	strb	r2, [r3]
   3645c:	ldrb	r3, [r4, #26]
   36460:	clz	r3, r3
   36464:	lsr	r3, r3, #5
   36468:	ldr	r1, [r4, #20]
   3646c:	add	r2, r1, r3
   36470:	add	r2, r2, #1
   36474:	str	r2, [r4, #20]
   36478:	mov	r2, #58	; 0x3a
   3647c:	strb	r2, [r1, r3]
   36480:	ldr	r3, [r4, #20]
   36484:	mov	r2, #32
   36488:	strb	r2, [r3]
   3648c:	ldrb	r3, [r4, #25]
   36490:	ldr	r2, [r4, #20]
   36494:	cmp	r3, #0
   36498:	addne	r2, r2, #1
   3649c:	str	r2, [r4, #20]
   364a0:	ldrb	r3, [r4, #27]
   364a4:	cmp	r3, #0
   364a8:	bne	364c4 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x184>
   364ac:	mov	r2, r6
   364b0:	mov	r3, r7
   364b4:	mov	r0, r4
   364b8:	ldr	r1, [sp, #32]
   364bc:	blx	r1
   364c0:	pop	{r4, r5, r6, r7, r8, pc}
   364c4:	mov	r0, r6
   364c8:	mov	r1, r7
   364cc:	bl	2fe6c <flatcc_json_parser_struct_as_root@@Base+0x65c>
   364d0:	ldr	r3, [r4, #20]
   364d4:	add	r0, r3, r0
   364d8:	str	r0, [r4, #20]
   364dc:	pop	{r4, r5, r6, r7, r8, pc}

000364e0 <flatcc_json_printer_int8_enum_struct_field@@Base>:
   364e0:	push	{r4, r5, r6, r7, r8, lr}
   364e4:	mov	r4, r0
   364e8:	ldr	r6, [sp, #28]
   364ec:	ldrsb	r5, [r2, r3]
   364f0:	cmp	r1, #0
   364f4:	ldrne	r3, [r0, #20]
   364f8:	addne	r2, r3, #1
   364fc:	strne	r2, [r0, #20]
   36500:	movne	r2, #44	; 0x2c
   36504:	strbne	r2, [r3]
   36508:	ldrb	r3, [r0, #25]
   3650c:	cmp	r3, #0
   36510:	bne	36568 <flatcc_json_printer_int8_enum_struct_field@@Base+0x88>
   36514:	ldr	r2, [r0, #20]
   36518:	ldr	r3, [r0, #16]
   3651c:	cmp	r2, r3
   36520:	bcs	365c8 <flatcc_json_printer_int8_enum_struct_field@@Base+0xe8>
   36524:	ldr	r3, [r4, #20]
   36528:	mov	r2, #34	; 0x22
   3652c:	strb	r2, [r3]
   36530:	ldrb	r3, [r4, #26]
   36534:	ldr	r0, [r4, #20]
   36538:	cmp	r3, #0
   3653c:	addeq	r0, r0, #1
   36540:	str	r0, [r4, #20]
   36544:	add	r3, r0, r6
   36548:	ldr	r2, [r4, #16]
   3654c:	cmp	r2, r3
   36550:	bhi	365d8 <flatcc_json_printer_int8_enum_struct_field@@Base+0xf8>
   36554:	mov	r2, r6
   36558:	ldr	r1, [sp, #24]
   3655c:	mov	r0, r4
   36560:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   36564:	b	365f0 <flatcc_json_printer_int8_enum_struct_field@@Base+0x110>
   36568:	ldr	r3, [r0, #20]
   3656c:	add	r2, r3, #1
   36570:	str	r2, [r0, #20]
   36574:	mov	r2, #10
   36578:	strb	r2, [r3]
   3657c:	ldrb	r3, [r0, #25]
   36580:	ldr	r7, [r0, #32]
   36584:	mul	r7, r7, r3
   36588:	ldr	r0, [r0, #20]
   3658c:	add	r3, r0, r7
   36590:	ldr	r2, [r4, #16]
   36594:	cmp	r2, r3
   36598:	bcc	365b8 <flatcc_json_printer_int8_enum_struct_field@@Base+0xd8>
   3659c:	mov	r2, r7
   365a0:	mov	r1, #32
   365a4:	bl	145c4 <memset@plt>
   365a8:	ldr	r3, [r4, #20]
   365ac:	add	r7, r3, r7
   365b0:	str	r7, [r4, #20]
   365b4:	b	36524 <flatcc_json_printer_int8_enum_struct_field@@Base+0x44>
   365b8:	mov	r1, r7
   365bc:	mov	r0, r4
   365c0:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   365c4:	b	36524 <flatcc_json_printer_int8_enum_struct_field@@Base+0x44>
   365c8:	ldr	r3, [r0, #44]	; 0x2c
   365cc:	mov	r1, #0
   365d0:	blx	r3
   365d4:	b	36524 <flatcc_json_printer_int8_enum_struct_field@@Base+0x44>
   365d8:	mov	r2, r6
   365dc:	ldr	r1, [sp, #24]
   365e0:	bl	1454c <memcpy@plt>
   365e4:	ldr	r3, [r4, #20]
   365e8:	add	r6, r3, r6
   365ec:	str	r6, [r4, #20]
   365f0:	ldr	r3, [r4, #20]
   365f4:	mov	r2, #34	; 0x22
   365f8:	strb	r2, [r3]
   365fc:	ldrb	r3, [r4, #26]
   36600:	clz	r3, r3
   36604:	lsr	r3, r3, #5
   36608:	ldr	r1, [r4, #20]
   3660c:	add	r2, r1, r3
   36610:	add	r2, r2, #1
   36614:	str	r2, [r4, #20]
   36618:	mov	r2, #58	; 0x3a
   3661c:	strb	r2, [r1, r3]
   36620:	ldr	r3, [r4, #20]
   36624:	mov	r2, #32
   36628:	strb	r2, [r3]
   3662c:	ldrb	r3, [r4, #25]
   36630:	ldr	r1, [r4, #20]
   36634:	cmp	r3, #0
   36638:	addne	r1, r1, #1
   3663c:	str	r1, [r4, #20]
   36640:	ldrb	r3, [r4, #27]
   36644:	cmp	r3, #0
   36648:	bne	36660 <flatcc_json_printer_int8_enum_struct_field@@Base+0x180>
   3664c:	mov	r1, r5
   36650:	mov	r0, r4
   36654:	ldr	r3, [sp, #32]
   36658:	blx	r3
   3665c:	pop	{r4, r5, r6, r7, r8, pc}
   36660:	mov	r0, r5
   36664:	bl	304f0 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   36668:	ldr	r3, [r4, #20]
   3666c:	add	r0, r3, r0
   36670:	str	r0, [r4, #20]
   36674:	pop	{r4, r5, r6, r7, r8, pc}

00036678 <flatcc_json_printer_int16_enum_struct_field@@Base>:
   36678:	push	{r4, r5, r6, r7, r8, lr}
   3667c:	mov	r4, r0
   36680:	ldr	r6, [sp, #28]
   36684:	ldrsh	r5, [r2, r3]
   36688:	cmp	r1, #0
   3668c:	ldrne	r3, [r0, #20]
   36690:	addne	r2, r3, #1
   36694:	strne	r2, [r0, #20]
   36698:	movne	r2, #44	; 0x2c
   3669c:	strbne	r2, [r3]
   366a0:	ldrb	r3, [r0, #25]
   366a4:	cmp	r3, #0
   366a8:	bne	36700 <flatcc_json_printer_int16_enum_struct_field@@Base+0x88>
   366ac:	ldr	r2, [r0, #20]
   366b0:	ldr	r3, [r0, #16]
   366b4:	cmp	r2, r3
   366b8:	bcs	36760 <flatcc_json_printer_int16_enum_struct_field@@Base+0xe8>
   366bc:	ldr	r3, [r4, #20]
   366c0:	mov	r2, #34	; 0x22
   366c4:	strb	r2, [r3]
   366c8:	ldrb	r3, [r4, #26]
   366cc:	ldr	r0, [r4, #20]
   366d0:	cmp	r3, #0
   366d4:	addeq	r0, r0, #1
   366d8:	str	r0, [r4, #20]
   366dc:	add	r3, r0, r6
   366e0:	ldr	r2, [r4, #16]
   366e4:	cmp	r2, r3
   366e8:	bhi	36770 <flatcc_json_printer_int16_enum_struct_field@@Base+0xf8>
   366ec:	mov	r2, r6
   366f0:	ldr	r1, [sp, #24]
   366f4:	mov	r0, r4
   366f8:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   366fc:	b	36788 <flatcc_json_printer_int16_enum_struct_field@@Base+0x110>
   36700:	ldr	r3, [r0, #20]
   36704:	add	r2, r3, #1
   36708:	str	r2, [r0, #20]
   3670c:	mov	r2, #10
   36710:	strb	r2, [r3]
   36714:	ldrb	r3, [r0, #25]
   36718:	ldr	r7, [r0, #32]
   3671c:	mul	r7, r7, r3
   36720:	ldr	r0, [r0, #20]
   36724:	add	r3, r0, r7
   36728:	ldr	r2, [r4, #16]
   3672c:	cmp	r2, r3
   36730:	bcc	36750 <flatcc_json_printer_int16_enum_struct_field@@Base+0xd8>
   36734:	mov	r2, r7
   36738:	mov	r1, #32
   3673c:	bl	145c4 <memset@plt>
   36740:	ldr	r3, [r4, #20]
   36744:	add	r7, r3, r7
   36748:	str	r7, [r4, #20]
   3674c:	b	366bc <flatcc_json_printer_int16_enum_struct_field@@Base+0x44>
   36750:	mov	r1, r7
   36754:	mov	r0, r4
   36758:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3675c:	b	366bc <flatcc_json_printer_int16_enum_struct_field@@Base+0x44>
   36760:	ldr	r3, [r0, #44]	; 0x2c
   36764:	mov	r1, #0
   36768:	blx	r3
   3676c:	b	366bc <flatcc_json_printer_int16_enum_struct_field@@Base+0x44>
   36770:	mov	r2, r6
   36774:	ldr	r1, [sp, #24]
   36778:	bl	1454c <memcpy@plt>
   3677c:	ldr	r3, [r4, #20]
   36780:	add	r6, r3, r6
   36784:	str	r6, [r4, #20]
   36788:	ldr	r3, [r4, #20]
   3678c:	mov	r2, #34	; 0x22
   36790:	strb	r2, [r3]
   36794:	ldrb	r3, [r4, #26]
   36798:	clz	r3, r3
   3679c:	lsr	r3, r3, #5
   367a0:	ldr	r1, [r4, #20]
   367a4:	add	r2, r1, r3
   367a8:	add	r2, r2, #1
   367ac:	str	r2, [r4, #20]
   367b0:	mov	r2, #58	; 0x3a
   367b4:	strb	r2, [r1, r3]
   367b8:	ldr	r3, [r4, #20]
   367bc:	mov	r2, #32
   367c0:	strb	r2, [r3]
   367c4:	ldrb	r3, [r4, #25]
   367c8:	ldr	r1, [r4, #20]
   367cc:	cmp	r3, #0
   367d0:	addne	r1, r1, #1
   367d4:	str	r1, [r4, #20]
   367d8:	ldrb	r3, [r4, #27]
   367dc:	cmp	r3, #0
   367e0:	bne	367f8 <flatcc_json_printer_int16_enum_struct_field@@Base+0x180>
   367e4:	mov	r1, r5
   367e8:	mov	r0, r4
   367ec:	ldr	r3, [sp, #32]
   367f0:	blx	r3
   367f4:	pop	{r4, r5, r6, r7, r8, pc}
   367f8:	mov	r0, r5
   367fc:	bl	30520 <flatcc_json_parser_struct_as_root@@Base+0xd10>
   36800:	ldr	r3, [r4, #20]
   36804:	add	r0, r3, r0
   36808:	str	r0, [r4, #20]
   3680c:	pop	{r4, r5, r6, r7, r8, pc}

00036810 <flatcc_json_printer_int32_enum_struct_field@@Base>:
   36810:	push	{r4, r5, r6, r7, r8, lr}
   36814:	mov	r4, r0
   36818:	ldr	r6, [sp, #28]
   3681c:	ldr	r5, [r2, r3]
   36820:	cmp	r1, #0
   36824:	ldrne	r3, [r0, #20]
   36828:	addne	r2, r3, #1
   3682c:	strne	r2, [r0, #20]
   36830:	movne	r2, #44	; 0x2c
   36834:	strbne	r2, [r3]
   36838:	ldrb	r3, [r0, #25]
   3683c:	cmp	r3, #0
   36840:	bne	36898 <flatcc_json_printer_int32_enum_struct_field@@Base+0x88>
   36844:	ldr	r2, [r0, #20]
   36848:	ldr	r3, [r0, #16]
   3684c:	cmp	r2, r3
   36850:	bcs	368f8 <flatcc_json_printer_int32_enum_struct_field@@Base+0xe8>
   36854:	ldr	r3, [r4, #20]
   36858:	mov	r2, #34	; 0x22
   3685c:	strb	r2, [r3]
   36860:	ldrb	r3, [r4, #26]
   36864:	ldr	r0, [r4, #20]
   36868:	cmp	r3, #0
   3686c:	addeq	r0, r0, #1
   36870:	str	r0, [r4, #20]
   36874:	add	r3, r0, r6
   36878:	ldr	r2, [r4, #16]
   3687c:	cmp	r2, r3
   36880:	bhi	36908 <flatcc_json_printer_int32_enum_struct_field@@Base+0xf8>
   36884:	mov	r2, r6
   36888:	ldr	r1, [sp, #24]
   3688c:	mov	r0, r4
   36890:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   36894:	b	36920 <flatcc_json_printer_int32_enum_struct_field@@Base+0x110>
   36898:	ldr	r3, [r0, #20]
   3689c:	add	r2, r3, #1
   368a0:	str	r2, [r0, #20]
   368a4:	mov	r2, #10
   368a8:	strb	r2, [r3]
   368ac:	ldrb	r3, [r0, #25]
   368b0:	ldr	r7, [r0, #32]
   368b4:	mul	r7, r7, r3
   368b8:	ldr	r0, [r0, #20]
   368bc:	add	r3, r0, r7
   368c0:	ldr	r2, [r4, #16]
   368c4:	cmp	r2, r3
   368c8:	bcc	368e8 <flatcc_json_printer_int32_enum_struct_field@@Base+0xd8>
   368cc:	mov	r2, r7
   368d0:	mov	r1, #32
   368d4:	bl	145c4 <memset@plt>
   368d8:	ldr	r3, [r4, #20]
   368dc:	add	r7, r3, r7
   368e0:	str	r7, [r4, #20]
   368e4:	b	36854 <flatcc_json_printer_int32_enum_struct_field@@Base+0x44>
   368e8:	mov	r1, r7
   368ec:	mov	r0, r4
   368f0:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   368f4:	b	36854 <flatcc_json_printer_int32_enum_struct_field@@Base+0x44>
   368f8:	ldr	r3, [r0, #44]	; 0x2c
   368fc:	mov	r1, #0
   36900:	blx	r3
   36904:	b	36854 <flatcc_json_printer_int32_enum_struct_field@@Base+0x44>
   36908:	mov	r2, r6
   3690c:	ldr	r1, [sp, #24]
   36910:	bl	1454c <memcpy@plt>
   36914:	ldr	r3, [r4, #20]
   36918:	add	r6, r3, r6
   3691c:	str	r6, [r4, #20]
   36920:	ldr	r3, [r4, #20]
   36924:	mov	r2, #34	; 0x22
   36928:	strb	r2, [r3]
   3692c:	ldrb	r3, [r4, #26]
   36930:	clz	r3, r3
   36934:	lsr	r3, r3, #5
   36938:	ldr	r1, [r4, #20]
   3693c:	add	r2, r1, r3
   36940:	add	r2, r2, #1
   36944:	str	r2, [r4, #20]
   36948:	mov	r2, #58	; 0x3a
   3694c:	strb	r2, [r1, r3]
   36950:	ldr	r3, [r4, #20]
   36954:	mov	r2, #32
   36958:	strb	r2, [r3]
   3695c:	ldrb	r3, [r4, #25]
   36960:	ldr	r1, [r4, #20]
   36964:	cmp	r3, #0
   36968:	addne	r1, r1, #1
   3696c:	str	r1, [r4, #20]
   36970:	ldrb	r3, [r4, #27]
   36974:	cmp	r3, #0
   36978:	bne	36990 <flatcc_json_printer_int32_enum_struct_field@@Base+0x180>
   3697c:	mov	r1, r5
   36980:	mov	r0, r4
   36984:	ldr	r3, [sp, #32]
   36988:	blx	r3
   3698c:	pop	{r4, r5, r6, r7, r8, pc}
   36990:	mov	r0, r5
   36994:	bl	30550 <flatcc_json_parser_struct_as_root@@Base+0xd40>
   36998:	ldr	r3, [r4, #20]
   3699c:	add	r0, r3, r0
   369a0:	str	r0, [r4, #20]
   369a4:	pop	{r4, r5, r6, r7, r8, pc}

000369a8 <flatcc_json_printer_int64_enum_struct_field@@Base>:
   369a8:	push	{r4, r5, r6, r7, r8, lr}
   369ac:	mov	r4, r0
   369b0:	ldr	r5, [sp, #28]
   369b4:	ldrd	r6, [r2, r3]
   369b8:	cmp	r1, #0
   369bc:	ldrne	r3, [r0, #20]
   369c0:	addne	r2, r3, #1
   369c4:	strne	r2, [r0, #20]
   369c8:	movne	r2, #44	; 0x2c
   369cc:	strbne	r2, [r3]
   369d0:	ldrb	r3, [r0, #25]
   369d4:	cmp	r3, #0
   369d8:	bne	36a30 <flatcc_json_printer_int64_enum_struct_field@@Base+0x88>
   369dc:	ldr	r2, [r0, #20]
   369e0:	ldr	r3, [r0, #16]
   369e4:	cmp	r2, r3
   369e8:	bcs	36a90 <flatcc_json_printer_int64_enum_struct_field@@Base+0xe8>
   369ec:	ldr	r3, [r4, #20]
   369f0:	mov	r2, #34	; 0x22
   369f4:	strb	r2, [r3]
   369f8:	ldrb	r3, [r4, #26]
   369fc:	ldr	r0, [r4, #20]
   36a00:	cmp	r3, #0
   36a04:	addeq	r0, r0, #1
   36a08:	str	r0, [r4, #20]
   36a0c:	add	r3, r0, r5
   36a10:	ldr	r2, [r4, #16]
   36a14:	cmp	r2, r3
   36a18:	bhi	36aa0 <flatcc_json_printer_int64_enum_struct_field@@Base+0xf8>
   36a1c:	mov	r2, r5
   36a20:	ldr	r1, [sp, #24]
   36a24:	mov	r0, r4
   36a28:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   36a2c:	b	36ab8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x110>
   36a30:	ldr	r3, [r0, #20]
   36a34:	add	r2, r3, #1
   36a38:	str	r2, [r0, #20]
   36a3c:	mov	r2, #10
   36a40:	strb	r2, [r3]
   36a44:	ldrb	r3, [r0, #25]
   36a48:	ldr	r8, [r0, #32]
   36a4c:	mul	r8, r8, r3
   36a50:	ldr	r0, [r0, #20]
   36a54:	add	r3, r0, r8
   36a58:	ldr	r2, [r4, #16]
   36a5c:	cmp	r2, r3
   36a60:	bcc	36a80 <flatcc_json_printer_int64_enum_struct_field@@Base+0xd8>
   36a64:	mov	r2, r8
   36a68:	mov	r1, #32
   36a6c:	bl	145c4 <memset@plt>
   36a70:	ldr	r3, [r4, #20]
   36a74:	add	r8, r3, r8
   36a78:	str	r8, [r4, #20]
   36a7c:	b	369ec <flatcc_json_printer_int64_enum_struct_field@@Base+0x44>
   36a80:	mov	r1, r8
   36a84:	mov	r0, r4
   36a88:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   36a8c:	b	369ec <flatcc_json_printer_int64_enum_struct_field@@Base+0x44>
   36a90:	ldr	r3, [r0, #44]	; 0x2c
   36a94:	mov	r1, #0
   36a98:	blx	r3
   36a9c:	b	369ec <flatcc_json_printer_int64_enum_struct_field@@Base+0x44>
   36aa0:	mov	r2, r5
   36aa4:	ldr	r1, [sp, #24]
   36aa8:	bl	1454c <memcpy@plt>
   36aac:	ldr	r3, [r4, #20]
   36ab0:	add	r5, r3, r5
   36ab4:	str	r5, [r4, #20]
   36ab8:	ldr	r3, [r4, #20]
   36abc:	mov	r2, #34	; 0x22
   36ac0:	strb	r2, [r3]
   36ac4:	ldrb	r3, [r4, #26]
   36ac8:	clz	r3, r3
   36acc:	lsr	r3, r3, #5
   36ad0:	ldr	r1, [r4, #20]
   36ad4:	add	r2, r1, r3
   36ad8:	add	r2, r2, #1
   36adc:	str	r2, [r4, #20]
   36ae0:	mov	r2, #58	; 0x3a
   36ae4:	strb	r2, [r1, r3]
   36ae8:	ldr	r3, [r4, #20]
   36aec:	mov	r2, #32
   36af0:	strb	r2, [r3]
   36af4:	ldrb	r3, [r4, #25]
   36af8:	ldr	r2, [r4, #20]
   36afc:	cmp	r3, #0
   36b00:	addne	r2, r2, #1
   36b04:	str	r2, [r4, #20]
   36b08:	ldrb	r3, [r4, #27]
   36b0c:	cmp	r3, #0
   36b10:	bne	36b2c <flatcc_json_printer_int64_enum_struct_field@@Base+0x184>
   36b14:	mov	r2, r6
   36b18:	mov	r3, r7
   36b1c:	mov	r0, r4
   36b20:	ldr	r1, [sp, #32]
   36b24:	blx	r1
   36b28:	pop	{r4, r5, r6, r7, r8, pc}
   36b2c:	mov	r0, r6
   36b30:	mov	r1, r7
   36b34:	bl	30578 <flatcc_json_parser_struct_as_root@@Base+0xd68>
   36b38:	ldr	r3, [r4, #20]
   36b3c:	add	r0, r3, r0
   36b40:	str	r0, [r4, #20]
   36b44:	pop	{r4, r5, r6, r7, r8, pc}

00036b48 <flatcc_json_printer_bool_enum_struct_field@@Base>:
   36b48:	push	{r4, r5, r6, r7, r8, lr}
   36b4c:	mov	r4, r0
   36b50:	ldr	r6, [sp, #28]
   36b54:	ldrb	r5, [r2, r3]
   36b58:	cmp	r1, #0
   36b5c:	ldrne	r3, [r0, #20]
   36b60:	addne	r2, r3, #1
   36b64:	strne	r2, [r0, #20]
   36b68:	movne	r2, #44	; 0x2c
   36b6c:	strbne	r2, [r3]
   36b70:	ldrb	r3, [r0, #25]
   36b74:	cmp	r3, #0
   36b78:	bne	36bd0 <flatcc_json_printer_bool_enum_struct_field@@Base+0x88>
   36b7c:	ldr	r2, [r0, #20]
   36b80:	ldr	r3, [r0, #16]
   36b84:	cmp	r2, r3
   36b88:	bcs	36c30 <flatcc_json_printer_bool_enum_struct_field@@Base+0xe8>
   36b8c:	ldr	r3, [r4, #20]
   36b90:	mov	r2, #34	; 0x22
   36b94:	strb	r2, [r3]
   36b98:	ldrb	r3, [r4, #26]
   36b9c:	ldr	r0, [r4, #20]
   36ba0:	cmp	r3, #0
   36ba4:	addeq	r0, r0, #1
   36ba8:	str	r0, [r4, #20]
   36bac:	add	r3, r0, r6
   36bb0:	ldr	r2, [r4, #16]
   36bb4:	cmp	r2, r3
   36bb8:	bhi	36c40 <flatcc_json_printer_bool_enum_struct_field@@Base+0xf8>
   36bbc:	mov	r2, r6
   36bc0:	ldr	r1, [sp, #24]
   36bc4:	mov	r0, r4
   36bc8:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   36bcc:	b	36c58 <flatcc_json_printer_bool_enum_struct_field@@Base+0x110>
   36bd0:	ldr	r3, [r0, #20]
   36bd4:	add	r2, r3, #1
   36bd8:	str	r2, [r0, #20]
   36bdc:	mov	r2, #10
   36be0:	strb	r2, [r3]
   36be4:	ldrb	r3, [r0, #25]
   36be8:	ldr	r7, [r0, #32]
   36bec:	mul	r7, r7, r3
   36bf0:	ldr	r0, [r0, #20]
   36bf4:	add	r3, r0, r7
   36bf8:	ldr	r2, [r4, #16]
   36bfc:	cmp	r2, r3
   36c00:	bcc	36c20 <flatcc_json_printer_bool_enum_struct_field@@Base+0xd8>
   36c04:	mov	r2, r7
   36c08:	mov	r1, #32
   36c0c:	bl	145c4 <memset@plt>
   36c10:	ldr	r3, [r4, #20]
   36c14:	add	r7, r3, r7
   36c18:	str	r7, [r4, #20]
   36c1c:	b	36b8c <flatcc_json_printer_bool_enum_struct_field@@Base+0x44>
   36c20:	mov	r1, r7
   36c24:	mov	r0, r4
   36c28:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   36c2c:	b	36b8c <flatcc_json_printer_bool_enum_struct_field@@Base+0x44>
   36c30:	ldr	r3, [r0, #44]	; 0x2c
   36c34:	mov	r1, #0
   36c38:	blx	r3
   36c3c:	b	36b8c <flatcc_json_printer_bool_enum_struct_field@@Base+0x44>
   36c40:	mov	r2, r6
   36c44:	ldr	r1, [sp, #24]
   36c48:	bl	1454c <memcpy@plt>
   36c4c:	ldr	r3, [r4, #20]
   36c50:	add	r6, r3, r6
   36c54:	str	r6, [r4, #20]
   36c58:	ldr	r3, [r4, #20]
   36c5c:	mov	r2, #34	; 0x22
   36c60:	strb	r2, [r3]
   36c64:	ldrb	r3, [r4, #26]
   36c68:	clz	r3, r3
   36c6c:	lsr	r3, r3, #5
   36c70:	ldr	r1, [r4, #20]
   36c74:	add	r2, r1, r3
   36c78:	add	r2, r2, #1
   36c7c:	str	r2, [r4, #20]
   36c80:	mov	r2, #58	; 0x3a
   36c84:	strb	r2, [r1, r3]
   36c88:	ldr	r3, [r4, #20]
   36c8c:	mov	r2, #32
   36c90:	strb	r2, [r3]
   36c94:	ldrb	r3, [r4, #25]
   36c98:	ldr	r1, [r4, #20]
   36c9c:	cmp	r3, #0
   36ca0:	addne	r1, r1, #1
   36ca4:	str	r1, [r4, #20]
   36ca8:	ldrb	r3, [r4, #27]
   36cac:	cmp	r3, #0
   36cb0:	bne	36cc8 <flatcc_json_printer_bool_enum_struct_field@@Base+0x180>
   36cb4:	mov	r1, r5
   36cb8:	mov	r0, r4
   36cbc:	ldr	r3, [sp, #32]
   36cc0:	blx	r3
   36cc4:	pop	{r4, r5, r6, r7, r8, pc}
   36cc8:	mov	r0, r5
   36ccc:	bl	30c34 <flatcc_json_parser_struct_as_root@@Base+0x1424>
   36cd0:	ldr	r3, [r4, #20]
   36cd4:	add	r0, r3, r0
   36cd8:	str	r0, [r4, #20]
   36cdc:	pop	{r4, r5, r6, r7, r8, pc}

00036ce0 <flatcc_json_printer_utype_vector_field@@Base>:
   36ce0:	add	r2, r2, #2
   36ce4:	lsl	r2, r2, #1
   36ce8:	ldr	ip, [r1, #8]
   36cec:	cmp	ip, r2
   36cf0:	bxle	lr
   36cf4:	ldr	ip, [r1, #4]
   36cf8:	ldrh	ip, [ip, r2]
   36cfc:	cmp	ip, #0
   36d00:	bxeq	lr
   36d04:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36d08:	ldr	r5, [r1]
   36d0c:	adds	lr, r5, ip
   36d10:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36d14:	ldr	r2, [r1, #16]
   36d18:	add	r4, r2, #1
   36d1c:	str	r4, [r1, #16]
   36d20:	cmp	r2, #0
   36d24:	ldrne	r2, [r0, #20]
   36d28:	addne	r1, r2, #1
   36d2c:	strne	r1, [r0, #20]
   36d30:	movne	r1, #44	; 0x2c
   36d34:	strbne	r1, [r2]
   36d38:	mov	r1, r3
   36d3c:	mov	r4, r0
   36d40:	ldr	r3, [r5, ip]
   36d44:	add	r8, lr, r3
   36d48:	ldr	r7, [lr, r3]
   36d4c:	ldr	r2, [sp, #40]	; 0x28
   36d50:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   36d54:	ldr	r3, [r4, #32]
   36d58:	add	r3, r3, #1
   36d5c:	str	r3, [r4, #32]
   36d60:	ldr	r3, [r4, #20]
   36d64:	add	r2, r3, #1
   36d68:	str	r2, [r4, #20]
   36d6c:	mov	r2, #91	; 0x5b
   36d70:	strb	r2, [r3]
   36d74:	cmp	r7, #0
   36d78:	beq	36ec0 <flatcc_json_printer_utype_vector_field@@Base+0x1e0>
   36d7c:	ldrb	r3, [r4, #25]
   36d80:	cmp	r3, #0
   36d84:	bne	36dd0 <flatcc_json_printer_utype_vector_field@@Base+0xf0>
   36d88:	ldr	r2, [r4, #20]
   36d8c:	ldr	r3, [r4, #16]
   36d90:	cmp	r2, r3
   36d94:	bcs	36df0 <flatcc_json_printer_utype_vector_field@@Base+0x110>
   36d98:	ldr	r1, [r4, #20]
   36d9c:	ldrb	r0, [r8, #4]
   36da0:	bl	2f8e8 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   36da4:	ldr	r3, [r4, #20]
   36da8:	add	r0, r3, r0
   36dac:	str	r0, [r4, #20]
   36db0:	add	r5, r8, #5
   36db4:	cmp	r7, #1
   36db8:	beq	36ec0 <flatcc_json_printer_utype_vector_field@@Base+0x1e0>
   36dbc:	mov	r9, #44	; 0x2c
   36dc0:	mov	sl, #10
   36dc4:	mov	fp, #0
   36dc8:	add	r7, r7, #4
   36dcc:	b	36e70 <flatcc_json_printer_utype_vector_field@@Base+0x190>
   36dd0:	ldr	r3, [r4, #20]
   36dd4:	add	r2, r3, #1
   36dd8:	str	r2, [r4, #20]
   36ddc:	mov	r2, #10
   36de0:	strb	r2, [r3]
   36de4:	mov	r0, r4
   36de8:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   36dec:	b	36d98 <flatcc_json_printer_utype_vector_field@@Base+0xb8>
   36df0:	ldr	r3, [r4, #44]	; 0x2c
   36df4:	mov	r1, #0
   36df8:	mov	r0, r4
   36dfc:	blx	r3
   36e00:	b	36d98 <flatcc_json_printer_utype_vector_field@@Base+0xb8>
   36e04:	ldr	r3, [r4, #20]
   36e08:	add	r2, r3, #1
   36e0c:	str	r2, [r4, #20]
   36e10:	strb	sl, [r3]
   36e14:	ldrb	r3, [r4, #25]
   36e18:	ldr	r6, [r4, #32]
   36e1c:	mul	r6, r6, r3
   36e20:	ldr	r0, [r4, #20]
   36e24:	add	r3, r0, r6
   36e28:	ldr	r2, [r4, #16]
   36e2c:	cmp	r2, r3
   36e30:	bcc	36eb0 <flatcc_json_printer_utype_vector_field@@Base+0x1d0>
   36e34:	mov	r2, r6
   36e38:	mov	r1, #32
   36e3c:	bl	145c4 <memset@plt>
   36e40:	ldr	r3, [r4, #20]
   36e44:	add	r6, r3, r6
   36e48:	str	r6, [r4, #20]
   36e4c:	ldr	r1, [r4, #20]
   36e50:	ldrb	r0, [r5], #1
   36e54:	bl	2f8e8 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   36e58:	ldr	r3, [r4, #20]
   36e5c:	add	r0, r3, r0
   36e60:	str	r0, [r4, #20]
   36e64:	sub	r3, r7, r5
   36e68:	cmn	r8, r3
   36e6c:	beq	36ec0 <flatcc_json_printer_utype_vector_field@@Base+0x1e0>
   36e70:	ldr	r3, [r4, #20]
   36e74:	add	r2, r3, #1
   36e78:	str	r2, [r4, #20]
   36e7c:	strb	r9, [r3]
   36e80:	ldrb	r3, [r4, #25]
   36e84:	cmp	r3, #0
   36e88:	bne	36e04 <flatcc_json_printer_utype_vector_field@@Base+0x124>
   36e8c:	ldr	r2, [r4, #20]
   36e90:	ldr	r3, [r4, #16]
   36e94:	cmp	r2, r3
   36e98:	bcc	36e4c <flatcc_json_printer_utype_vector_field@@Base+0x16c>
   36e9c:	ldr	r3, [r4, #44]	; 0x2c
   36ea0:	mov	r1, fp
   36ea4:	mov	r0, r4
   36ea8:	blx	r3
   36eac:	b	36e4c <flatcc_json_printer_utype_vector_field@@Base+0x16c>
   36eb0:	mov	r1, r6
   36eb4:	mov	r0, r4
   36eb8:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   36ebc:	b	36e4c <flatcc_json_printer_utype_vector_field@@Base+0x16c>
   36ec0:	ldrb	r3, [r4, #25]
   36ec4:	cmp	r3, #0
   36ec8:	bne	36ee4 <flatcc_json_printer_utype_vector_field@@Base+0x204>
   36ecc:	ldr	r3, [r4, #20]
   36ed0:	add	r2, r3, #1
   36ed4:	str	r2, [r4, #20]
   36ed8:	mov	r2, #93	; 0x5d
   36edc:	strb	r2, [r3]
   36ee0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36ee4:	ldr	r3, [r4, #20]
   36ee8:	add	r2, r3, #1
   36eec:	str	r2, [r4, #20]
   36ef0:	mov	r2, #10
   36ef4:	strb	r2, [r3]
   36ef8:	ldr	r5, [r4, #32]
   36efc:	sub	r5, r5, #1
   36f00:	str	r5, [r4, #32]
   36f04:	ldrb	r3, [r4, #25]
   36f08:	mul	r5, r5, r3
   36f0c:	ldr	r0, [r4, #20]
   36f10:	add	r3, r0, r5
   36f14:	ldr	r2, [r4, #16]
   36f18:	cmp	r2, r3
   36f1c:	bcc	36f3c <flatcc_json_printer_utype_vector_field@@Base+0x25c>
   36f20:	mov	r2, r5
   36f24:	mov	r1, #32
   36f28:	bl	145c4 <memset@plt>
   36f2c:	ldr	r3, [r4, #20]
   36f30:	add	r5, r3, r5
   36f34:	str	r5, [r4, #20]
   36f38:	b	36ecc <flatcc_json_printer_utype_vector_field@@Base+0x1ec>
   36f3c:	mov	r1, r5
   36f40:	mov	r0, r4
   36f44:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   36f48:	b	36ecc <flatcc_json_printer_utype_vector_field@@Base+0x1ec>

00036f4c <flatcc_json_printer_uint8_vector_field@@Base>:
   36f4c:	add	r2, r2, #2
   36f50:	lsl	r2, r2, #1
   36f54:	ldr	ip, [r1, #8]
   36f58:	cmp	ip, r2
   36f5c:	bxle	lr
   36f60:	ldr	ip, [r1, #4]
   36f64:	ldrh	ip, [ip, r2]
   36f68:	cmp	ip, #0
   36f6c:	bxeq	lr
   36f70:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36f74:	ldr	r5, [r1]
   36f78:	adds	lr, r5, ip
   36f7c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36f80:	ldr	r2, [r1, #16]
   36f84:	add	r4, r2, #1
   36f88:	str	r4, [r1, #16]
   36f8c:	cmp	r2, #0
   36f90:	ldrne	r2, [r0, #20]
   36f94:	addne	r1, r2, #1
   36f98:	strne	r1, [r0, #20]
   36f9c:	movne	r1, #44	; 0x2c
   36fa0:	strbne	r1, [r2]
   36fa4:	mov	r1, r3
   36fa8:	mov	r4, r0
   36fac:	ldr	r3, [r5, ip]
   36fb0:	add	r8, lr, r3
   36fb4:	ldr	r7, [lr, r3]
   36fb8:	ldr	r2, [sp, #40]	; 0x28
   36fbc:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   36fc0:	ldr	r3, [r4, #32]
   36fc4:	add	r3, r3, #1
   36fc8:	str	r3, [r4, #32]
   36fcc:	ldr	r3, [r4, #20]
   36fd0:	add	r2, r3, #1
   36fd4:	str	r2, [r4, #20]
   36fd8:	mov	r2, #91	; 0x5b
   36fdc:	strb	r2, [r3]
   36fe0:	cmp	r7, #0
   36fe4:	beq	3712c <flatcc_json_printer_uint8_vector_field@@Base+0x1e0>
   36fe8:	ldrb	r3, [r4, #25]
   36fec:	cmp	r3, #0
   36ff0:	bne	3703c <flatcc_json_printer_uint8_vector_field@@Base+0xf0>
   36ff4:	ldr	r2, [r4, #20]
   36ff8:	ldr	r3, [r4, #16]
   36ffc:	cmp	r2, r3
   37000:	bcs	3705c <flatcc_json_printer_uint8_vector_field@@Base+0x110>
   37004:	ldr	r1, [r4, #20]
   37008:	ldrb	r0, [r8, #4]
   3700c:	bl	2f8e8 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   37010:	ldr	r3, [r4, #20]
   37014:	add	r0, r3, r0
   37018:	str	r0, [r4, #20]
   3701c:	add	r5, r8, #5
   37020:	cmp	r7, #1
   37024:	beq	3712c <flatcc_json_printer_uint8_vector_field@@Base+0x1e0>
   37028:	mov	r9, #44	; 0x2c
   3702c:	mov	sl, #10
   37030:	mov	fp, #0
   37034:	add	r7, r7, #4
   37038:	b	370dc <flatcc_json_printer_uint8_vector_field@@Base+0x190>
   3703c:	ldr	r3, [r4, #20]
   37040:	add	r2, r3, #1
   37044:	str	r2, [r4, #20]
   37048:	mov	r2, #10
   3704c:	strb	r2, [r3]
   37050:	mov	r0, r4
   37054:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   37058:	b	37004 <flatcc_json_printer_uint8_vector_field@@Base+0xb8>
   3705c:	ldr	r3, [r4, #44]	; 0x2c
   37060:	mov	r1, #0
   37064:	mov	r0, r4
   37068:	blx	r3
   3706c:	b	37004 <flatcc_json_printer_uint8_vector_field@@Base+0xb8>
   37070:	ldr	r3, [r4, #20]
   37074:	add	r2, r3, #1
   37078:	str	r2, [r4, #20]
   3707c:	strb	sl, [r3]
   37080:	ldrb	r3, [r4, #25]
   37084:	ldr	r6, [r4, #32]
   37088:	mul	r6, r6, r3
   3708c:	ldr	r0, [r4, #20]
   37090:	add	r3, r0, r6
   37094:	ldr	r2, [r4, #16]
   37098:	cmp	r2, r3
   3709c:	bcc	3711c <flatcc_json_printer_uint8_vector_field@@Base+0x1d0>
   370a0:	mov	r2, r6
   370a4:	mov	r1, #32
   370a8:	bl	145c4 <memset@plt>
   370ac:	ldr	r3, [r4, #20]
   370b0:	add	r6, r3, r6
   370b4:	str	r6, [r4, #20]
   370b8:	ldr	r1, [r4, #20]
   370bc:	ldrb	r0, [r5], #1
   370c0:	bl	2f8e8 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   370c4:	ldr	r3, [r4, #20]
   370c8:	add	r0, r3, r0
   370cc:	str	r0, [r4, #20]
   370d0:	sub	r3, r7, r5
   370d4:	cmn	r8, r3
   370d8:	beq	3712c <flatcc_json_printer_uint8_vector_field@@Base+0x1e0>
   370dc:	ldr	r3, [r4, #20]
   370e0:	add	r2, r3, #1
   370e4:	str	r2, [r4, #20]
   370e8:	strb	r9, [r3]
   370ec:	ldrb	r3, [r4, #25]
   370f0:	cmp	r3, #0
   370f4:	bne	37070 <flatcc_json_printer_uint8_vector_field@@Base+0x124>
   370f8:	ldr	r2, [r4, #20]
   370fc:	ldr	r3, [r4, #16]
   37100:	cmp	r2, r3
   37104:	bcc	370b8 <flatcc_json_printer_uint8_vector_field@@Base+0x16c>
   37108:	ldr	r3, [r4, #44]	; 0x2c
   3710c:	mov	r1, fp
   37110:	mov	r0, r4
   37114:	blx	r3
   37118:	b	370b8 <flatcc_json_printer_uint8_vector_field@@Base+0x16c>
   3711c:	mov	r1, r6
   37120:	mov	r0, r4
   37124:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   37128:	b	370b8 <flatcc_json_printer_uint8_vector_field@@Base+0x16c>
   3712c:	ldrb	r3, [r4, #25]
   37130:	cmp	r3, #0
   37134:	bne	37150 <flatcc_json_printer_uint8_vector_field@@Base+0x204>
   37138:	ldr	r3, [r4, #20]
   3713c:	add	r2, r3, #1
   37140:	str	r2, [r4, #20]
   37144:	mov	r2, #93	; 0x5d
   37148:	strb	r2, [r3]
   3714c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37150:	ldr	r3, [r4, #20]
   37154:	add	r2, r3, #1
   37158:	str	r2, [r4, #20]
   3715c:	mov	r2, #10
   37160:	strb	r2, [r3]
   37164:	ldr	r5, [r4, #32]
   37168:	sub	r5, r5, #1
   3716c:	str	r5, [r4, #32]
   37170:	ldrb	r3, [r4, #25]
   37174:	mul	r5, r5, r3
   37178:	ldr	r0, [r4, #20]
   3717c:	add	r3, r0, r5
   37180:	ldr	r2, [r4, #16]
   37184:	cmp	r2, r3
   37188:	bcc	371a8 <flatcc_json_printer_uint8_vector_field@@Base+0x25c>
   3718c:	mov	r2, r5
   37190:	mov	r1, #32
   37194:	bl	145c4 <memset@plt>
   37198:	ldr	r3, [r4, #20]
   3719c:	add	r5, r3, r5
   371a0:	str	r5, [r4, #20]
   371a4:	b	37138 <flatcc_json_printer_uint8_vector_field@@Base+0x1ec>
   371a8:	mov	r1, r5
   371ac:	mov	r0, r4
   371b0:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   371b4:	b	37138 <flatcc_json_printer_uint8_vector_field@@Base+0x1ec>

000371b8 <flatcc_json_printer_uint16_vector_field@@Base>:
   371b8:	add	r2, r2, #2
   371bc:	lsl	r2, r2, #1
   371c0:	ldr	ip, [r1, #8]
   371c4:	cmp	ip, r2
   371c8:	bxle	lr
   371cc:	ldr	ip, [r1, #4]
   371d0:	ldrh	ip, [ip, r2]
   371d4:	cmp	ip, #0
   371d8:	bxeq	lr
   371dc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   371e0:	ldr	r5, [r1]
   371e4:	adds	lr, r5, ip
   371e8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   371ec:	ldr	r2, [r1, #16]
   371f0:	add	r4, r2, #1
   371f4:	str	r4, [r1, #16]
   371f8:	cmp	r2, #0
   371fc:	ldrne	r2, [r0, #20]
   37200:	addne	r1, r2, #1
   37204:	strne	r1, [r0, #20]
   37208:	movne	r1, #44	; 0x2c
   3720c:	strbne	r1, [r2]
   37210:	mov	r1, r3
   37214:	mov	r4, r0
   37218:	ldr	r3, [r5, ip]
   3721c:	add	r6, lr, r3
   37220:	ldr	r7, [lr, r3]
   37224:	ldr	r2, [sp, #40]	; 0x28
   37228:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3722c:	ldr	r3, [r4, #32]
   37230:	add	r3, r3, #1
   37234:	str	r3, [r4, #32]
   37238:	ldr	r3, [r4, #20]
   3723c:	add	r2, r3, #1
   37240:	str	r2, [r4, #20]
   37244:	mov	r2, #91	; 0x5b
   37248:	strb	r2, [r3]
   3724c:	cmp	r7, #0
   37250:	beq	373a0 <flatcc_json_printer_uint16_vector_field@@Base+0x1e8>
   37254:	ldrb	r3, [r4, #25]
   37258:	cmp	r3, #0
   3725c:	bne	372ac <flatcc_json_printer_uint16_vector_field@@Base+0xf4>
   37260:	ldr	r2, [r4, #20]
   37264:	ldr	r3, [r4, #16]
   37268:	cmp	r2, r3
   3726c:	bcs	372cc <flatcc_json_printer_uint16_vector_field@@Base+0x114>
   37270:	ldr	r1, [r4, #20]
   37274:	ldrh	r0, [r6, #4]
   37278:	bl	2f9a8 <flatcc_json_parser_struct_as_root@@Base+0x198>
   3727c:	ldr	r3, [r4, #20]
   37280:	add	r0, r3, r0
   37284:	str	r0, [r4, #20]
   37288:	add	r6, r6, #6
   3728c:	sub	r5, r7, #2
   37290:	cmp	r7, #1
   37294:	beq	373a0 <flatcc_json_printer_uint16_vector_field@@Base+0x1e8>
   37298:	mov	r7, #44	; 0x2c
   3729c:	mov	r9, #0
   372a0:	mov	r8, #10
   372a4:	mov	sl, #32
   372a8:	b	37350 <flatcc_json_printer_uint16_vector_field@@Base+0x198>
   372ac:	ldr	r3, [r4, #20]
   372b0:	add	r2, r3, #1
   372b4:	str	r2, [r4, #20]
   372b8:	mov	r2, #10
   372bc:	strb	r2, [r3]
   372c0:	mov	r0, r4
   372c4:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   372c8:	b	37270 <flatcc_json_printer_uint16_vector_field@@Base+0xb8>
   372cc:	ldr	r3, [r4, #44]	; 0x2c
   372d0:	mov	r1, #0
   372d4:	mov	r0, r4
   372d8:	blx	r3
   372dc:	b	37270 <flatcc_json_printer_uint16_vector_field@@Base+0xb8>
   372e0:	ldr	r3, [r4, #20]
   372e4:	add	r2, r3, #1
   372e8:	str	r2, [r4, #20]
   372ec:	strb	r8, [r3]
   372f0:	ldrb	r3, [r4, #25]
   372f4:	ldr	fp, [r4, #32]
   372f8:	mul	fp, fp, r3
   372fc:	ldr	r0, [r4, #20]
   37300:	add	r3, r0, fp
   37304:	ldr	r2, [r4, #16]
   37308:	cmp	r2, r3
   3730c:	bcc	37390 <flatcc_json_printer_uint16_vector_field@@Base+0x1d8>
   37310:	mov	r2, fp
   37314:	mov	r1, sl
   37318:	bl	145c4 <memset@plt>
   3731c:	ldr	r3, [r4, #20]
   37320:	add	fp, r3, fp
   37324:	str	fp, [r4, #20]
   37328:	ldr	r1, [r4, #20]
   3732c:	ldrh	r0, [r6], #2
   37330:	bl	2f9a8 <flatcc_json_parser_struct_as_root@@Base+0x198>
   37334:	ldr	r3, [r4, #20]
   37338:	add	r0, r3, r0
   3733c:	str	r0, [r4, #20]
   37340:	sub	r3, r5, #1
   37344:	cmp	r5, #0
   37348:	beq	373a0 <flatcc_json_printer_uint16_vector_field@@Base+0x1e8>
   3734c:	mov	r5, r3
   37350:	ldr	r3, [r4, #20]
   37354:	add	r2, r3, #1
   37358:	str	r2, [r4, #20]
   3735c:	strb	r7, [r3]
   37360:	ldrb	r3, [r4, #25]
   37364:	cmp	r3, #0
   37368:	bne	372e0 <flatcc_json_printer_uint16_vector_field@@Base+0x128>
   3736c:	ldr	r2, [r4, #20]
   37370:	ldr	r3, [r4, #16]
   37374:	cmp	r2, r3
   37378:	bcc	37328 <flatcc_json_printer_uint16_vector_field@@Base+0x170>
   3737c:	ldr	r3, [r4, #44]	; 0x2c
   37380:	mov	r1, r9
   37384:	mov	r0, r4
   37388:	blx	r3
   3738c:	b	37328 <flatcc_json_printer_uint16_vector_field@@Base+0x170>
   37390:	mov	r1, fp
   37394:	mov	r0, r4
   37398:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3739c:	b	37328 <flatcc_json_printer_uint16_vector_field@@Base+0x170>
   373a0:	ldrb	r3, [r4, #25]
   373a4:	cmp	r3, #0
   373a8:	bne	373c4 <flatcc_json_printer_uint16_vector_field@@Base+0x20c>
   373ac:	ldr	r3, [r4, #20]
   373b0:	add	r2, r3, #1
   373b4:	str	r2, [r4, #20]
   373b8:	mov	r2, #93	; 0x5d
   373bc:	strb	r2, [r3]
   373c0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   373c4:	ldr	r3, [r4, #20]
   373c8:	add	r2, r3, #1
   373cc:	str	r2, [r4, #20]
   373d0:	mov	r2, #10
   373d4:	strb	r2, [r3]
   373d8:	ldr	r5, [r4, #32]
   373dc:	sub	r5, r5, #1
   373e0:	str	r5, [r4, #32]
   373e4:	ldrb	r3, [r4, #25]
   373e8:	mul	r5, r5, r3
   373ec:	ldr	r0, [r4, #20]
   373f0:	add	r3, r0, r5
   373f4:	ldr	r2, [r4, #16]
   373f8:	cmp	r2, r3
   373fc:	bcc	3741c <flatcc_json_printer_uint16_vector_field@@Base+0x264>
   37400:	mov	r2, r5
   37404:	mov	r1, #32
   37408:	bl	145c4 <memset@plt>
   3740c:	ldr	r3, [r4, #20]
   37410:	add	r5, r3, r5
   37414:	str	r5, [r4, #20]
   37418:	b	373ac <flatcc_json_printer_uint16_vector_field@@Base+0x1f4>
   3741c:	mov	r1, r5
   37420:	mov	r0, r4
   37424:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   37428:	b	373ac <flatcc_json_printer_uint16_vector_field@@Base+0x1f4>

0003742c <flatcc_json_printer_uint32_vector_field@@Base>:
   3742c:	add	r2, r2, #2
   37430:	lsl	r2, r2, #1
   37434:	ldr	ip, [r1, #8]
   37438:	cmp	ip, r2
   3743c:	bxle	lr
   37440:	ldr	ip, [r1, #4]
   37444:	ldrh	ip, [ip, r2]
   37448:	cmp	ip, #0
   3744c:	bxeq	lr
   37450:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37454:	ldr	r5, [r1]
   37458:	adds	lr, r5, ip
   3745c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37460:	ldr	r2, [r1, #16]
   37464:	add	r4, r2, #1
   37468:	str	r4, [r1, #16]
   3746c:	cmp	r2, #0
   37470:	ldrne	r2, [r0, #20]
   37474:	addne	r1, r2, #1
   37478:	strne	r1, [r0, #20]
   3747c:	movne	r1, #44	; 0x2c
   37480:	strbne	r1, [r2]
   37484:	mov	r1, r3
   37488:	mov	r4, r0
   3748c:	ldr	r3, [r5, ip]
   37490:	add	r6, lr, r3
   37494:	ldr	r7, [lr, r3]
   37498:	ldr	r2, [sp, #40]	; 0x28
   3749c:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   374a0:	ldr	r3, [r4, #32]
   374a4:	add	r3, r3, #1
   374a8:	str	r3, [r4, #32]
   374ac:	ldr	r3, [r4, #20]
   374b0:	add	r2, r3, #1
   374b4:	str	r2, [r4, #20]
   374b8:	mov	r2, #91	; 0x5b
   374bc:	strb	r2, [r3]
   374c0:	cmp	r7, #0
   374c4:	beq	37614 <flatcc_json_printer_uint32_vector_field@@Base+0x1e8>
   374c8:	ldrb	r3, [r4, #25]
   374cc:	cmp	r3, #0
   374d0:	bne	37520 <flatcc_json_printer_uint32_vector_field@@Base+0xf4>
   374d4:	ldr	r2, [r4, #20]
   374d8:	ldr	r3, [r4, #16]
   374dc:	cmp	r2, r3
   374e0:	bcs	37540 <flatcc_json_printer_uint32_vector_field@@Base+0x114>
   374e4:	ldr	r1, [r4, #20]
   374e8:	ldr	r0, [r6, #4]
   374ec:	bl	2fb2c <flatcc_json_parser_struct_as_root@@Base+0x31c>
   374f0:	ldr	r3, [r4, #20]
   374f4:	add	r0, r3, r0
   374f8:	str	r0, [r4, #20]
   374fc:	add	r6, r6, #8
   37500:	sub	r5, r7, #2
   37504:	cmp	r7, #1
   37508:	beq	37614 <flatcc_json_printer_uint32_vector_field@@Base+0x1e8>
   3750c:	mov	r7, #44	; 0x2c
   37510:	mov	r9, #0
   37514:	mov	r8, #10
   37518:	mov	sl, #32
   3751c:	b	375c4 <flatcc_json_printer_uint32_vector_field@@Base+0x198>
   37520:	ldr	r3, [r4, #20]
   37524:	add	r2, r3, #1
   37528:	str	r2, [r4, #20]
   3752c:	mov	r2, #10
   37530:	strb	r2, [r3]
   37534:	mov	r0, r4
   37538:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3753c:	b	374e4 <flatcc_json_printer_uint32_vector_field@@Base+0xb8>
   37540:	ldr	r3, [r4, #44]	; 0x2c
   37544:	mov	r1, #0
   37548:	mov	r0, r4
   3754c:	blx	r3
   37550:	b	374e4 <flatcc_json_printer_uint32_vector_field@@Base+0xb8>
   37554:	ldr	r3, [r4, #20]
   37558:	add	r2, r3, #1
   3755c:	str	r2, [r4, #20]
   37560:	strb	r8, [r3]
   37564:	ldrb	r3, [r4, #25]
   37568:	ldr	fp, [r4, #32]
   3756c:	mul	fp, fp, r3
   37570:	ldr	r0, [r4, #20]
   37574:	add	r3, r0, fp
   37578:	ldr	r2, [r4, #16]
   3757c:	cmp	r2, r3
   37580:	bcc	37604 <flatcc_json_printer_uint32_vector_field@@Base+0x1d8>
   37584:	mov	r2, fp
   37588:	mov	r1, sl
   3758c:	bl	145c4 <memset@plt>
   37590:	ldr	r3, [r4, #20]
   37594:	add	fp, r3, fp
   37598:	str	fp, [r4, #20]
   3759c:	ldr	r1, [r4, #20]
   375a0:	ldr	r0, [r6], #4
   375a4:	bl	2fb2c <flatcc_json_parser_struct_as_root@@Base+0x31c>
   375a8:	ldr	r3, [r4, #20]
   375ac:	add	r0, r3, r0
   375b0:	str	r0, [r4, #20]
   375b4:	sub	r3, r5, #1
   375b8:	cmp	r5, #0
   375bc:	beq	37614 <flatcc_json_printer_uint32_vector_field@@Base+0x1e8>
   375c0:	mov	r5, r3
   375c4:	ldr	r3, [r4, #20]
   375c8:	add	r2, r3, #1
   375cc:	str	r2, [r4, #20]
   375d0:	strb	r7, [r3]
   375d4:	ldrb	r3, [r4, #25]
   375d8:	cmp	r3, #0
   375dc:	bne	37554 <flatcc_json_printer_uint32_vector_field@@Base+0x128>
   375e0:	ldr	r2, [r4, #20]
   375e4:	ldr	r3, [r4, #16]
   375e8:	cmp	r2, r3
   375ec:	bcc	3759c <flatcc_json_printer_uint32_vector_field@@Base+0x170>
   375f0:	ldr	r3, [r4, #44]	; 0x2c
   375f4:	mov	r1, r9
   375f8:	mov	r0, r4
   375fc:	blx	r3
   37600:	b	3759c <flatcc_json_printer_uint32_vector_field@@Base+0x170>
   37604:	mov	r1, fp
   37608:	mov	r0, r4
   3760c:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   37610:	b	3759c <flatcc_json_printer_uint32_vector_field@@Base+0x170>
   37614:	ldrb	r3, [r4, #25]
   37618:	cmp	r3, #0
   3761c:	bne	37638 <flatcc_json_printer_uint32_vector_field@@Base+0x20c>
   37620:	ldr	r3, [r4, #20]
   37624:	add	r2, r3, #1
   37628:	str	r2, [r4, #20]
   3762c:	mov	r2, #93	; 0x5d
   37630:	strb	r2, [r3]
   37634:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37638:	ldr	r3, [r4, #20]
   3763c:	add	r2, r3, #1
   37640:	str	r2, [r4, #20]
   37644:	mov	r2, #10
   37648:	strb	r2, [r3]
   3764c:	ldr	r5, [r4, #32]
   37650:	sub	r5, r5, #1
   37654:	str	r5, [r4, #32]
   37658:	ldrb	r3, [r4, #25]
   3765c:	mul	r5, r5, r3
   37660:	ldr	r0, [r4, #20]
   37664:	add	r3, r0, r5
   37668:	ldr	r2, [r4, #16]
   3766c:	cmp	r2, r3
   37670:	bcc	37690 <flatcc_json_printer_uint32_vector_field@@Base+0x264>
   37674:	mov	r2, r5
   37678:	mov	r1, #32
   3767c:	bl	145c4 <memset@plt>
   37680:	ldr	r3, [r4, #20]
   37684:	add	r5, r3, r5
   37688:	str	r5, [r4, #20]
   3768c:	b	37620 <flatcc_json_printer_uint32_vector_field@@Base+0x1f4>
   37690:	mov	r1, r5
   37694:	mov	r0, r4
   37698:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3769c:	b	37620 <flatcc_json_printer_uint32_vector_field@@Base+0x1f4>

000376a0 <flatcc_json_printer_uint64_vector_field@@Base>:
   376a0:	add	r2, r2, #2
   376a4:	lsl	r2, r2, #1
   376a8:	ldr	ip, [r1, #8]
   376ac:	cmp	ip, r2
   376b0:	bxle	lr
   376b4:	ldr	ip, [r1, #4]
   376b8:	ldrh	ip, [ip, r2]
   376bc:	cmp	ip, #0
   376c0:	bxeq	lr
   376c4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   376c8:	ldr	r5, [r1]
   376cc:	adds	lr, r5, ip
   376d0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   376d4:	ldr	r2, [r1, #16]
   376d8:	add	r4, r2, #1
   376dc:	str	r4, [r1, #16]
   376e0:	cmp	r2, #0
   376e4:	ldrne	r2, [r0, #20]
   376e8:	addne	r1, r2, #1
   376ec:	strne	r1, [r0, #20]
   376f0:	movne	r1, #44	; 0x2c
   376f4:	strbne	r1, [r2]
   376f8:	mov	r1, r3
   376fc:	mov	r4, r0
   37700:	ldr	r3, [r5, ip]
   37704:	add	r6, lr, r3
   37708:	ldr	r7, [lr, r3]
   3770c:	ldr	r2, [sp, #40]	; 0x28
   37710:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   37714:	ldr	r3, [r4, #32]
   37718:	add	r3, r3, #1
   3771c:	str	r3, [r4, #32]
   37720:	ldr	r3, [r4, #20]
   37724:	add	r2, r3, #1
   37728:	str	r2, [r4, #20]
   3772c:	mov	r2, #91	; 0x5b
   37730:	strb	r2, [r3]
   37734:	cmp	r7, #0
   37738:	beq	37888 <flatcc_json_printer_uint64_vector_field@@Base+0x1e8>
   3773c:	ldrb	r3, [r4, #25]
   37740:	cmp	r3, #0
   37744:	bne	37794 <flatcc_json_printer_uint64_vector_field@@Base+0xf4>
   37748:	ldr	r2, [r4, #20]
   3774c:	ldr	r3, [r4, #16]
   37750:	cmp	r2, r3
   37754:	bcs	377b4 <flatcc_json_printer_uint64_vector_field@@Base+0x114>
   37758:	ldr	r2, [r4, #20]
   3775c:	ldrd	r0, [r6, #4]
   37760:	bl	2fe6c <flatcc_json_parser_struct_as_root@@Base+0x65c>
   37764:	ldr	r3, [r4, #20]
   37768:	add	r0, r3, r0
   3776c:	str	r0, [r4, #20]
   37770:	add	r6, r6, #12
   37774:	sub	r5, r7, #2
   37778:	cmp	r7, #1
   3777c:	beq	37888 <flatcc_json_printer_uint64_vector_field@@Base+0x1e8>
   37780:	mov	r7, #44	; 0x2c
   37784:	mov	r9, #0
   37788:	mov	r8, #10
   3778c:	mov	sl, #32
   37790:	b	37838 <flatcc_json_printer_uint64_vector_field@@Base+0x198>
   37794:	ldr	r3, [r4, #20]
   37798:	add	r2, r3, #1
   3779c:	str	r2, [r4, #20]
   377a0:	mov	r2, #10
   377a4:	strb	r2, [r3]
   377a8:	mov	r0, r4
   377ac:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   377b0:	b	37758 <flatcc_json_printer_uint64_vector_field@@Base+0xb8>
   377b4:	ldr	r3, [r4, #44]	; 0x2c
   377b8:	mov	r1, #0
   377bc:	mov	r0, r4
   377c0:	blx	r3
   377c4:	b	37758 <flatcc_json_printer_uint64_vector_field@@Base+0xb8>
   377c8:	ldr	r3, [r4, #20]
   377cc:	add	r2, r3, #1
   377d0:	str	r2, [r4, #20]
   377d4:	strb	r8, [r3]
   377d8:	ldrb	r3, [r4, #25]
   377dc:	ldr	fp, [r4, #32]
   377e0:	mul	fp, fp, r3
   377e4:	ldr	r0, [r4, #20]
   377e8:	add	r3, r0, fp
   377ec:	ldr	r2, [r4, #16]
   377f0:	cmp	r2, r3
   377f4:	bcc	37878 <flatcc_json_printer_uint64_vector_field@@Base+0x1d8>
   377f8:	mov	r2, fp
   377fc:	mov	r1, sl
   37800:	bl	145c4 <memset@plt>
   37804:	ldr	r3, [r4, #20]
   37808:	add	fp, r3, fp
   3780c:	str	fp, [r4, #20]
   37810:	ldr	r2, [r4, #20]
   37814:	ldrd	r0, [r6], #8
   37818:	bl	2fe6c <flatcc_json_parser_struct_as_root@@Base+0x65c>
   3781c:	ldr	r3, [r4, #20]
   37820:	add	r0, r3, r0
   37824:	str	r0, [r4, #20]
   37828:	sub	r3, r5, #1
   3782c:	cmp	r5, #0
   37830:	beq	37888 <flatcc_json_printer_uint64_vector_field@@Base+0x1e8>
   37834:	mov	r5, r3
   37838:	ldr	r3, [r4, #20]
   3783c:	add	r2, r3, #1
   37840:	str	r2, [r4, #20]
   37844:	strb	r7, [r3]
   37848:	ldrb	r3, [r4, #25]
   3784c:	cmp	r3, #0
   37850:	bne	377c8 <flatcc_json_printer_uint64_vector_field@@Base+0x128>
   37854:	ldr	r2, [r4, #20]
   37858:	ldr	r3, [r4, #16]
   3785c:	cmp	r2, r3
   37860:	bcc	37810 <flatcc_json_printer_uint64_vector_field@@Base+0x170>
   37864:	ldr	r3, [r4, #44]	; 0x2c
   37868:	mov	r1, r9
   3786c:	mov	r0, r4
   37870:	blx	r3
   37874:	b	37810 <flatcc_json_printer_uint64_vector_field@@Base+0x170>
   37878:	mov	r1, fp
   3787c:	mov	r0, r4
   37880:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   37884:	b	37810 <flatcc_json_printer_uint64_vector_field@@Base+0x170>
   37888:	ldrb	r3, [r4, #25]
   3788c:	cmp	r3, #0
   37890:	bne	378ac <flatcc_json_printer_uint64_vector_field@@Base+0x20c>
   37894:	ldr	r3, [r4, #20]
   37898:	add	r2, r3, #1
   3789c:	str	r2, [r4, #20]
   378a0:	mov	r2, #93	; 0x5d
   378a4:	strb	r2, [r3]
   378a8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   378ac:	ldr	r3, [r4, #20]
   378b0:	add	r2, r3, #1
   378b4:	str	r2, [r4, #20]
   378b8:	mov	r2, #10
   378bc:	strb	r2, [r3]
   378c0:	ldr	r5, [r4, #32]
   378c4:	sub	r5, r5, #1
   378c8:	str	r5, [r4, #32]
   378cc:	ldrb	r3, [r4, #25]
   378d0:	mul	r5, r5, r3
   378d4:	ldr	r0, [r4, #20]
   378d8:	add	r3, r0, r5
   378dc:	ldr	r2, [r4, #16]
   378e0:	cmp	r2, r3
   378e4:	bcc	37904 <flatcc_json_printer_uint64_vector_field@@Base+0x264>
   378e8:	mov	r2, r5
   378ec:	mov	r1, #32
   378f0:	bl	145c4 <memset@plt>
   378f4:	ldr	r3, [r4, #20]
   378f8:	add	r5, r3, r5
   378fc:	str	r5, [r4, #20]
   37900:	b	37894 <flatcc_json_printer_uint64_vector_field@@Base+0x1f4>
   37904:	mov	r1, r5
   37908:	mov	r0, r4
   3790c:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   37910:	b	37894 <flatcc_json_printer_uint64_vector_field@@Base+0x1f4>

00037914 <flatcc_json_printer_int8_vector_field@@Base>:
   37914:	add	r2, r2, #2
   37918:	lsl	r2, r2, #1
   3791c:	ldr	ip, [r1, #8]
   37920:	cmp	ip, r2
   37924:	bxle	lr
   37928:	ldr	ip, [r1, #4]
   3792c:	ldrh	ip, [ip, r2]
   37930:	cmp	ip, #0
   37934:	bxeq	lr
   37938:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3793c:	ldr	r5, [r1]
   37940:	adds	lr, r5, ip
   37944:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37948:	ldr	r2, [r1, #16]
   3794c:	add	r4, r2, #1
   37950:	str	r4, [r1, #16]
   37954:	cmp	r2, #0
   37958:	ldrne	r2, [r0, #20]
   3795c:	addne	r1, r2, #1
   37960:	strne	r1, [r0, #20]
   37964:	movne	r1, #44	; 0x2c
   37968:	strbne	r1, [r2]
   3796c:	mov	r1, r3
   37970:	mov	r4, r0
   37974:	ldr	r3, [r5, ip]
   37978:	add	r8, lr, r3
   3797c:	ldr	r7, [lr, r3]
   37980:	ldr	r2, [sp, #40]	; 0x28
   37984:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   37988:	ldr	r3, [r4, #32]
   3798c:	add	r3, r3, #1
   37990:	str	r3, [r4, #32]
   37994:	ldr	r3, [r4, #20]
   37998:	add	r2, r3, #1
   3799c:	str	r2, [r4, #20]
   379a0:	mov	r2, #91	; 0x5b
   379a4:	strb	r2, [r3]
   379a8:	cmp	r7, #0
   379ac:	beq	37af4 <flatcc_json_printer_int8_vector_field@@Base+0x1e0>
   379b0:	ldrb	r3, [r4, #25]
   379b4:	cmp	r3, #0
   379b8:	bne	37a04 <flatcc_json_printer_int8_vector_field@@Base+0xf0>
   379bc:	ldr	r2, [r4, #20]
   379c0:	ldr	r3, [r4, #16]
   379c4:	cmp	r2, r3
   379c8:	bcs	37a24 <flatcc_json_printer_int8_vector_field@@Base+0x110>
   379cc:	ldr	r1, [r4, #20]
   379d0:	ldrsb	r0, [r8, #4]
   379d4:	bl	304f0 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   379d8:	ldr	r3, [r4, #20]
   379dc:	add	r0, r3, r0
   379e0:	str	r0, [r4, #20]
   379e4:	add	r5, r8, #5
   379e8:	cmp	r7, #1
   379ec:	beq	37af4 <flatcc_json_printer_int8_vector_field@@Base+0x1e0>
   379f0:	mov	r9, #44	; 0x2c
   379f4:	mov	sl, #10
   379f8:	mov	fp, #0
   379fc:	add	r7, r7, #4
   37a00:	b	37aa4 <flatcc_json_printer_int8_vector_field@@Base+0x190>
   37a04:	ldr	r3, [r4, #20]
   37a08:	add	r2, r3, #1
   37a0c:	str	r2, [r4, #20]
   37a10:	mov	r2, #10
   37a14:	strb	r2, [r3]
   37a18:	mov	r0, r4
   37a1c:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   37a20:	b	379cc <flatcc_json_printer_int8_vector_field@@Base+0xb8>
   37a24:	ldr	r3, [r4, #44]	; 0x2c
   37a28:	mov	r1, #0
   37a2c:	mov	r0, r4
   37a30:	blx	r3
   37a34:	b	379cc <flatcc_json_printer_int8_vector_field@@Base+0xb8>
   37a38:	ldr	r3, [r4, #20]
   37a3c:	add	r2, r3, #1
   37a40:	str	r2, [r4, #20]
   37a44:	strb	sl, [r3]
   37a48:	ldrb	r3, [r4, #25]
   37a4c:	ldr	r6, [r4, #32]
   37a50:	mul	r6, r6, r3
   37a54:	ldr	r0, [r4, #20]
   37a58:	add	r3, r0, r6
   37a5c:	ldr	r2, [r4, #16]
   37a60:	cmp	r2, r3
   37a64:	bcc	37ae4 <flatcc_json_printer_int8_vector_field@@Base+0x1d0>
   37a68:	mov	r2, r6
   37a6c:	mov	r1, #32
   37a70:	bl	145c4 <memset@plt>
   37a74:	ldr	r3, [r4, #20]
   37a78:	add	r6, r3, r6
   37a7c:	str	r6, [r4, #20]
   37a80:	ldr	r1, [r4, #20]
   37a84:	ldrsb	r0, [r5], #1
   37a88:	bl	304f0 <flatcc_json_parser_struct_as_root@@Base+0xce0>
   37a8c:	ldr	r3, [r4, #20]
   37a90:	add	r0, r3, r0
   37a94:	str	r0, [r4, #20]
   37a98:	sub	r3, r7, r5
   37a9c:	cmn	r8, r3
   37aa0:	beq	37af4 <flatcc_json_printer_int8_vector_field@@Base+0x1e0>
   37aa4:	ldr	r3, [r4, #20]
   37aa8:	add	r2, r3, #1
   37aac:	str	r2, [r4, #20]
   37ab0:	strb	r9, [r3]
   37ab4:	ldrb	r3, [r4, #25]
   37ab8:	cmp	r3, #0
   37abc:	bne	37a38 <flatcc_json_printer_int8_vector_field@@Base+0x124>
   37ac0:	ldr	r2, [r4, #20]
   37ac4:	ldr	r3, [r4, #16]
   37ac8:	cmp	r2, r3
   37acc:	bcc	37a80 <flatcc_json_printer_int8_vector_field@@Base+0x16c>
   37ad0:	ldr	r3, [r4, #44]	; 0x2c
   37ad4:	mov	r1, fp
   37ad8:	mov	r0, r4
   37adc:	blx	r3
   37ae0:	b	37a80 <flatcc_json_printer_int8_vector_field@@Base+0x16c>
   37ae4:	mov	r1, r6
   37ae8:	mov	r0, r4
   37aec:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   37af0:	b	37a80 <flatcc_json_printer_int8_vector_field@@Base+0x16c>
   37af4:	ldrb	r3, [r4, #25]
   37af8:	cmp	r3, #0
   37afc:	bne	37b18 <flatcc_json_printer_int8_vector_field@@Base+0x204>
   37b00:	ldr	r3, [r4, #20]
   37b04:	add	r2, r3, #1
   37b08:	str	r2, [r4, #20]
   37b0c:	mov	r2, #93	; 0x5d
   37b10:	strb	r2, [r3]
   37b14:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37b18:	ldr	r3, [r4, #20]
   37b1c:	add	r2, r3, #1
   37b20:	str	r2, [r4, #20]
   37b24:	mov	r2, #10
   37b28:	strb	r2, [r3]
   37b2c:	ldr	r5, [r4, #32]
   37b30:	sub	r5, r5, #1
   37b34:	str	r5, [r4, #32]
   37b38:	ldrb	r3, [r4, #25]
   37b3c:	mul	r5, r5, r3
   37b40:	ldr	r0, [r4, #20]
   37b44:	add	r3, r0, r5
   37b48:	ldr	r2, [r4, #16]
   37b4c:	cmp	r2, r3
   37b50:	bcc	37b70 <flatcc_json_printer_int8_vector_field@@Base+0x25c>
   37b54:	mov	r2, r5
   37b58:	mov	r1, #32
   37b5c:	bl	145c4 <memset@plt>
   37b60:	ldr	r3, [r4, #20]
   37b64:	add	r5, r3, r5
   37b68:	str	r5, [r4, #20]
   37b6c:	b	37b00 <flatcc_json_printer_int8_vector_field@@Base+0x1ec>
   37b70:	mov	r1, r5
   37b74:	mov	r0, r4
   37b78:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   37b7c:	b	37b00 <flatcc_json_printer_int8_vector_field@@Base+0x1ec>

00037b80 <flatcc_json_printer_int16_vector_field@@Base>:
   37b80:	add	r2, r2, #2
   37b84:	lsl	r2, r2, #1
   37b88:	ldr	ip, [r1, #8]
   37b8c:	cmp	ip, r2
   37b90:	bxle	lr
   37b94:	ldr	ip, [r1, #4]
   37b98:	ldrh	ip, [ip, r2]
   37b9c:	cmp	ip, #0
   37ba0:	bxeq	lr
   37ba4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37ba8:	ldr	r5, [r1]
   37bac:	adds	lr, r5, ip
   37bb0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37bb4:	ldr	r2, [r1, #16]
   37bb8:	add	r4, r2, #1
   37bbc:	str	r4, [r1, #16]
   37bc0:	cmp	r2, #0
   37bc4:	ldrne	r2, [r0, #20]
   37bc8:	addne	r1, r2, #1
   37bcc:	strne	r1, [r0, #20]
   37bd0:	movne	r1, #44	; 0x2c
   37bd4:	strbne	r1, [r2]
   37bd8:	mov	r1, r3
   37bdc:	mov	r4, r0
   37be0:	ldr	r3, [r5, ip]
   37be4:	add	r6, lr, r3
   37be8:	ldr	r7, [lr, r3]
   37bec:	ldr	r2, [sp, #40]	; 0x28
   37bf0:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   37bf4:	ldr	r3, [r4, #32]
   37bf8:	add	r3, r3, #1
   37bfc:	str	r3, [r4, #32]
   37c00:	ldr	r3, [r4, #20]
   37c04:	add	r2, r3, #1
   37c08:	str	r2, [r4, #20]
   37c0c:	mov	r2, #91	; 0x5b
   37c10:	strb	r2, [r3]
   37c14:	cmp	r7, #0
   37c18:	beq	37d68 <flatcc_json_printer_int16_vector_field@@Base+0x1e8>
   37c1c:	ldrb	r3, [r4, #25]
   37c20:	cmp	r3, #0
   37c24:	bne	37c74 <flatcc_json_printer_int16_vector_field@@Base+0xf4>
   37c28:	ldr	r2, [r4, #20]
   37c2c:	ldr	r3, [r4, #16]
   37c30:	cmp	r2, r3
   37c34:	bcs	37c94 <flatcc_json_printer_int16_vector_field@@Base+0x114>
   37c38:	ldr	r1, [r4, #20]
   37c3c:	ldrsh	r0, [r6, #4]
   37c40:	bl	30520 <flatcc_json_parser_struct_as_root@@Base+0xd10>
   37c44:	ldr	r3, [r4, #20]
   37c48:	add	r0, r3, r0
   37c4c:	str	r0, [r4, #20]
   37c50:	add	r6, r6, #6
   37c54:	sub	r5, r7, #2
   37c58:	cmp	r7, #1
   37c5c:	beq	37d68 <flatcc_json_printer_int16_vector_field@@Base+0x1e8>
   37c60:	mov	r7, #44	; 0x2c
   37c64:	mov	r9, #0
   37c68:	mov	r8, #10
   37c6c:	mov	sl, #32
   37c70:	b	37d18 <flatcc_json_printer_int16_vector_field@@Base+0x198>
   37c74:	ldr	r3, [r4, #20]
   37c78:	add	r2, r3, #1
   37c7c:	str	r2, [r4, #20]
   37c80:	mov	r2, #10
   37c84:	strb	r2, [r3]
   37c88:	mov	r0, r4
   37c8c:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   37c90:	b	37c38 <flatcc_json_printer_int16_vector_field@@Base+0xb8>
   37c94:	ldr	r3, [r4, #44]	; 0x2c
   37c98:	mov	r1, #0
   37c9c:	mov	r0, r4
   37ca0:	blx	r3
   37ca4:	b	37c38 <flatcc_json_printer_int16_vector_field@@Base+0xb8>
   37ca8:	ldr	r3, [r4, #20]
   37cac:	add	r2, r3, #1
   37cb0:	str	r2, [r4, #20]
   37cb4:	strb	r8, [r3]
   37cb8:	ldrb	r3, [r4, #25]
   37cbc:	ldr	fp, [r4, #32]
   37cc0:	mul	fp, fp, r3
   37cc4:	ldr	r0, [r4, #20]
   37cc8:	add	r3, r0, fp
   37ccc:	ldr	r2, [r4, #16]
   37cd0:	cmp	r2, r3
   37cd4:	bcc	37d58 <flatcc_json_printer_int16_vector_field@@Base+0x1d8>
   37cd8:	mov	r2, fp
   37cdc:	mov	r1, sl
   37ce0:	bl	145c4 <memset@plt>
   37ce4:	ldr	r3, [r4, #20]
   37ce8:	add	fp, r3, fp
   37cec:	str	fp, [r4, #20]
   37cf0:	ldr	r1, [r4, #20]
   37cf4:	ldrsh	r0, [r6], #2
   37cf8:	bl	30520 <flatcc_json_parser_struct_as_root@@Base+0xd10>
   37cfc:	ldr	r3, [r4, #20]
   37d00:	add	r0, r3, r0
   37d04:	str	r0, [r4, #20]
   37d08:	sub	r3, r5, #1
   37d0c:	cmp	r5, #0
   37d10:	beq	37d68 <flatcc_json_printer_int16_vector_field@@Base+0x1e8>
   37d14:	mov	r5, r3
   37d18:	ldr	r3, [r4, #20]
   37d1c:	add	r2, r3, #1
   37d20:	str	r2, [r4, #20]
   37d24:	strb	r7, [r3]
   37d28:	ldrb	r3, [r4, #25]
   37d2c:	cmp	r3, #0
   37d30:	bne	37ca8 <flatcc_json_printer_int16_vector_field@@Base+0x128>
   37d34:	ldr	r2, [r4, #20]
   37d38:	ldr	r3, [r4, #16]
   37d3c:	cmp	r2, r3
   37d40:	bcc	37cf0 <flatcc_json_printer_int16_vector_field@@Base+0x170>
   37d44:	ldr	r3, [r4, #44]	; 0x2c
   37d48:	mov	r1, r9
   37d4c:	mov	r0, r4
   37d50:	blx	r3
   37d54:	b	37cf0 <flatcc_json_printer_int16_vector_field@@Base+0x170>
   37d58:	mov	r1, fp
   37d5c:	mov	r0, r4
   37d60:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   37d64:	b	37cf0 <flatcc_json_printer_int16_vector_field@@Base+0x170>
   37d68:	ldrb	r3, [r4, #25]
   37d6c:	cmp	r3, #0
   37d70:	bne	37d8c <flatcc_json_printer_int16_vector_field@@Base+0x20c>
   37d74:	ldr	r3, [r4, #20]
   37d78:	add	r2, r3, #1
   37d7c:	str	r2, [r4, #20]
   37d80:	mov	r2, #93	; 0x5d
   37d84:	strb	r2, [r3]
   37d88:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37d8c:	ldr	r3, [r4, #20]
   37d90:	add	r2, r3, #1
   37d94:	str	r2, [r4, #20]
   37d98:	mov	r2, #10
   37d9c:	strb	r2, [r3]
   37da0:	ldr	r5, [r4, #32]
   37da4:	sub	r5, r5, #1
   37da8:	str	r5, [r4, #32]
   37dac:	ldrb	r3, [r4, #25]
   37db0:	mul	r5, r5, r3
   37db4:	ldr	r0, [r4, #20]
   37db8:	add	r3, r0, r5
   37dbc:	ldr	r2, [r4, #16]
   37dc0:	cmp	r2, r3
   37dc4:	bcc	37de4 <flatcc_json_printer_int16_vector_field@@Base+0x264>
   37dc8:	mov	r2, r5
   37dcc:	mov	r1, #32
   37dd0:	bl	145c4 <memset@plt>
   37dd4:	ldr	r3, [r4, #20]
   37dd8:	add	r5, r3, r5
   37ddc:	str	r5, [r4, #20]
   37de0:	b	37d74 <flatcc_json_printer_int16_vector_field@@Base+0x1f4>
   37de4:	mov	r1, r5
   37de8:	mov	r0, r4
   37dec:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   37df0:	b	37d74 <flatcc_json_printer_int16_vector_field@@Base+0x1f4>

00037df4 <flatcc_json_printer_int32_vector_field@@Base>:
   37df4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37df8:	ldr	r5, [sp, #40]	; 0x28
   37dfc:	add	r2, r2, #2
   37e00:	lsl	r2, r2, #1
   37e04:	ldr	ip, [r1, #8]
   37e08:	cmp	ip, r2
   37e0c:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37e10:	ldr	ip, [r1, #4]
   37e14:	ldrh	ip, [ip, r2]
   37e18:	cmp	ip, #0
   37e1c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37e20:	ldr	r6, [r1]
   37e24:	adds	lr, r6, ip
   37e28:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37e2c:	ldr	r2, [r1, #16]
   37e30:	add	r4, r2, #1
   37e34:	str	r4, [r1, #16]
   37e38:	cmp	r2, #0
   37e3c:	ldrne	r2, [r0, #20]
   37e40:	addne	r1, r2, #1
   37e44:	strne	r1, [r0, #20]
   37e48:	movne	r1, #44	; 0x2c
   37e4c:	strbne	r1, [r2]
   37e50:	mov	r8, r3
   37e54:	mov	r4, r0
   37e58:	ldr	r3, [r6, ip]
   37e5c:	add	r6, lr, r3
   37e60:	ldr	r7, [lr, r3]
   37e64:	ldrb	r3, [r0, #25]
   37e68:	cmp	r3, #0
   37e6c:	bne	37ec4 <flatcc_json_printer_int32_vector_field@@Base+0xd0>
   37e70:	ldr	r2, [r0, #20]
   37e74:	ldr	r3, [r0, #16]
   37e78:	cmp	r2, r3
   37e7c:	bcs	37f24 <flatcc_json_printer_int32_vector_field@@Base+0x130>
   37e80:	ldr	r3, [r4, #20]
   37e84:	mov	r2, #34	; 0x22
   37e88:	strb	r2, [r3]
   37e8c:	ldrb	r3, [r4, #26]
   37e90:	ldr	r0, [r4, #20]
   37e94:	cmp	r3, #0
   37e98:	addeq	r0, r0, #1
   37e9c:	str	r0, [r4, #20]
   37ea0:	add	r3, r0, r5
   37ea4:	ldr	r2, [r4, #16]
   37ea8:	cmp	r2, r3
   37eac:	bhi	37f34 <flatcc_json_printer_int32_vector_field@@Base+0x140>
   37eb0:	mov	r2, r5
   37eb4:	mov	r1, r8
   37eb8:	mov	r0, r4
   37ebc:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   37ec0:	b	37f4c <flatcc_json_printer_int32_vector_field@@Base+0x158>
   37ec4:	ldr	r3, [r0, #20]
   37ec8:	add	r2, r3, #1
   37ecc:	str	r2, [r0, #20]
   37ed0:	mov	r2, #10
   37ed4:	strb	r2, [r3]
   37ed8:	ldrb	r3, [r0, #25]
   37edc:	ldr	r9, [r0, #32]
   37ee0:	mul	r9, r9, r3
   37ee4:	ldr	r0, [r0, #20]
   37ee8:	add	r3, r0, r9
   37eec:	ldr	r2, [r4, #16]
   37ef0:	cmp	r2, r3
   37ef4:	bcc	37f14 <flatcc_json_printer_int32_vector_field@@Base+0x120>
   37ef8:	mov	r2, r9
   37efc:	mov	r1, #32
   37f00:	bl	145c4 <memset@plt>
   37f04:	ldr	r3, [r4, #20]
   37f08:	add	r9, r3, r9
   37f0c:	str	r9, [r4, #20]
   37f10:	b	37e80 <flatcc_json_printer_int32_vector_field@@Base+0x8c>
   37f14:	mov	r1, r9
   37f18:	mov	r0, r4
   37f1c:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   37f20:	b	37e80 <flatcc_json_printer_int32_vector_field@@Base+0x8c>
   37f24:	ldr	r3, [r0, #44]	; 0x2c
   37f28:	mov	r1, #0
   37f2c:	blx	r3
   37f30:	b	37e80 <flatcc_json_printer_int32_vector_field@@Base+0x8c>
   37f34:	mov	r2, r5
   37f38:	mov	r1, r8
   37f3c:	bl	1454c <memcpy@plt>
   37f40:	ldr	r3, [r4, #20]
   37f44:	add	r5, r3, r5
   37f48:	str	r5, [r4, #20]
   37f4c:	ldr	r3, [r4, #20]
   37f50:	mov	r2, #34	; 0x22
   37f54:	strb	r2, [r3]
   37f58:	ldrb	r3, [r4, #26]
   37f5c:	clz	r3, r3
   37f60:	lsr	r3, r3, #5
   37f64:	ldr	r1, [r4, #20]
   37f68:	add	r2, r1, r3
   37f6c:	add	r2, r2, #1
   37f70:	str	r2, [r4, #20]
   37f74:	mov	r2, #58	; 0x3a
   37f78:	strb	r2, [r1, r3]
   37f7c:	ldr	r3, [r4, #20]
   37f80:	mov	r2, #32
   37f84:	strb	r2, [r3]
   37f88:	ldrb	r3, [r4, #25]
   37f8c:	adds	r3, r3, #0
   37f90:	movne	r3, #1
   37f94:	ldr	r0, [r4, #20]
   37f98:	add	r2, r0, r3
   37f9c:	ldr	r1, [r4, #32]
   37fa0:	add	r1, r1, #1
   37fa4:	str	r1, [r4, #32]
   37fa8:	add	r2, r2, #1
   37fac:	str	r2, [r4, #20]
   37fb0:	mov	r2, #91	; 0x5b
   37fb4:	strb	r2, [r0, r3]
   37fb8:	cmp	r7, #0
   37fbc:	beq	3810c <flatcc_json_printer_int32_vector_field@@Base+0x318>
   37fc0:	ldrb	r3, [r4, #25]
   37fc4:	cmp	r3, #0
   37fc8:	bne	38018 <flatcc_json_printer_int32_vector_field@@Base+0x224>
   37fcc:	ldr	r2, [r4, #20]
   37fd0:	ldr	r3, [r4, #16]
   37fd4:	cmp	r2, r3
   37fd8:	bcs	38038 <flatcc_json_printer_int32_vector_field@@Base+0x244>
   37fdc:	ldr	r1, [r4, #20]
   37fe0:	ldr	r0, [r6, #4]
   37fe4:	bl	30550 <flatcc_json_parser_struct_as_root@@Base+0xd40>
   37fe8:	ldr	r3, [r4, #20]
   37fec:	add	r0, r3, r0
   37ff0:	str	r0, [r4, #20]
   37ff4:	add	r6, r6, #8
   37ff8:	sub	r5, r7, #2
   37ffc:	cmp	r7, #1
   38000:	beq	3810c <flatcc_json_printer_int32_vector_field@@Base+0x318>
   38004:	mov	r7, #44	; 0x2c
   38008:	mov	r9, #0
   3800c:	mov	r8, #10
   38010:	mov	sl, #32
   38014:	b	380bc <flatcc_json_printer_int32_vector_field@@Base+0x2c8>
   38018:	ldr	r3, [r4, #20]
   3801c:	add	r2, r3, #1
   38020:	str	r2, [r4, #20]
   38024:	mov	r2, #10
   38028:	strb	r2, [r3]
   3802c:	mov	r0, r4
   38030:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   38034:	b	37fdc <flatcc_json_printer_int32_vector_field@@Base+0x1e8>
   38038:	ldr	r3, [r4, #44]	; 0x2c
   3803c:	mov	r1, #0
   38040:	mov	r0, r4
   38044:	blx	r3
   38048:	b	37fdc <flatcc_json_printer_int32_vector_field@@Base+0x1e8>
   3804c:	ldr	r3, [r4, #20]
   38050:	add	r2, r3, #1
   38054:	str	r2, [r4, #20]
   38058:	strb	r8, [r3]
   3805c:	ldrb	r3, [r4, #25]
   38060:	ldr	fp, [r4, #32]
   38064:	mul	fp, fp, r3
   38068:	ldr	r0, [r4, #20]
   3806c:	add	r3, r0, fp
   38070:	ldr	r2, [r4, #16]
   38074:	cmp	r2, r3
   38078:	bcc	380fc <flatcc_json_printer_int32_vector_field@@Base+0x308>
   3807c:	mov	r2, fp
   38080:	mov	r1, sl
   38084:	bl	145c4 <memset@plt>
   38088:	ldr	r3, [r4, #20]
   3808c:	add	fp, r3, fp
   38090:	str	fp, [r4, #20]
   38094:	ldr	r1, [r4, #20]
   38098:	ldr	r0, [r6], #4
   3809c:	bl	30550 <flatcc_json_parser_struct_as_root@@Base+0xd40>
   380a0:	ldr	r3, [r4, #20]
   380a4:	add	r0, r3, r0
   380a8:	str	r0, [r4, #20]
   380ac:	sub	r3, r5, #1
   380b0:	cmp	r5, #0
   380b4:	beq	3810c <flatcc_json_printer_int32_vector_field@@Base+0x318>
   380b8:	mov	r5, r3
   380bc:	ldr	r3, [r4, #20]
   380c0:	add	r2, r3, #1
   380c4:	str	r2, [r4, #20]
   380c8:	strb	r7, [r3]
   380cc:	ldrb	r3, [r4, #25]
   380d0:	cmp	r3, #0
   380d4:	bne	3804c <flatcc_json_printer_int32_vector_field@@Base+0x258>
   380d8:	ldr	r2, [r4, #20]
   380dc:	ldr	r3, [r4, #16]
   380e0:	cmp	r2, r3
   380e4:	bcc	38094 <flatcc_json_printer_int32_vector_field@@Base+0x2a0>
   380e8:	ldr	r3, [r4, #44]	; 0x2c
   380ec:	mov	r1, r9
   380f0:	mov	r0, r4
   380f4:	blx	r3
   380f8:	b	38094 <flatcc_json_printer_int32_vector_field@@Base+0x2a0>
   380fc:	mov	r1, fp
   38100:	mov	r0, r4
   38104:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   38108:	b	38094 <flatcc_json_printer_int32_vector_field@@Base+0x2a0>
   3810c:	ldrb	r3, [r4, #25]
   38110:	cmp	r3, #0
   38114:	bne	38130 <flatcc_json_printer_int32_vector_field@@Base+0x33c>
   38118:	ldr	r3, [r4, #20]
   3811c:	add	r2, r3, #1
   38120:	str	r2, [r4, #20]
   38124:	mov	r2, #93	; 0x5d
   38128:	strb	r2, [r3]
   3812c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38130:	ldr	r3, [r4, #20]
   38134:	add	r2, r3, #1
   38138:	str	r2, [r4, #20]
   3813c:	mov	r2, #10
   38140:	strb	r2, [r3]
   38144:	ldr	r5, [r4, #32]
   38148:	sub	r5, r5, #1
   3814c:	str	r5, [r4, #32]
   38150:	ldrb	r3, [r4, #25]
   38154:	mul	r5, r5, r3
   38158:	ldr	r0, [r4, #20]
   3815c:	add	r3, r0, r5
   38160:	ldr	r2, [r4, #16]
   38164:	cmp	r2, r3
   38168:	bcc	38188 <flatcc_json_printer_int32_vector_field@@Base+0x394>
   3816c:	mov	r2, r5
   38170:	mov	r1, #32
   38174:	bl	145c4 <memset@plt>
   38178:	ldr	r3, [r4, #20]
   3817c:	add	r5, r3, r5
   38180:	str	r5, [r4, #20]
   38184:	b	38118 <flatcc_json_printer_int32_vector_field@@Base+0x324>
   38188:	mov	r1, r5
   3818c:	mov	r0, r4
   38190:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   38194:	b	38118 <flatcc_json_printer_int32_vector_field@@Base+0x324>

00038198 <flatcc_json_printer_int64_vector_field@@Base>:
   38198:	add	r2, r2, #2
   3819c:	lsl	r2, r2, #1
   381a0:	ldr	ip, [r1, #8]
   381a4:	cmp	ip, r2
   381a8:	bxle	lr
   381ac:	ldr	ip, [r1, #4]
   381b0:	ldrh	ip, [ip, r2]
   381b4:	cmp	ip, #0
   381b8:	bxeq	lr
   381bc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   381c0:	ldr	r5, [r1]
   381c4:	adds	lr, r5, ip
   381c8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   381cc:	ldr	r2, [r1, #16]
   381d0:	add	r4, r2, #1
   381d4:	str	r4, [r1, #16]
   381d8:	cmp	r2, #0
   381dc:	ldrne	r2, [r0, #20]
   381e0:	addne	r1, r2, #1
   381e4:	strne	r1, [r0, #20]
   381e8:	movne	r1, #44	; 0x2c
   381ec:	strbne	r1, [r2]
   381f0:	mov	r1, r3
   381f4:	mov	r4, r0
   381f8:	ldr	r3, [r5, ip]
   381fc:	add	r6, lr, r3
   38200:	ldr	r7, [lr, r3]
   38204:	ldr	r2, [sp, #40]	; 0x28
   38208:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3820c:	ldr	r3, [r4, #32]
   38210:	add	r3, r3, #1
   38214:	str	r3, [r4, #32]
   38218:	ldr	r3, [r4, #20]
   3821c:	add	r2, r3, #1
   38220:	str	r2, [r4, #20]
   38224:	mov	r2, #91	; 0x5b
   38228:	strb	r2, [r3]
   3822c:	cmp	r7, #0
   38230:	beq	38380 <flatcc_json_printer_int64_vector_field@@Base+0x1e8>
   38234:	ldrb	r3, [r4, #25]
   38238:	cmp	r3, #0
   3823c:	bne	3828c <flatcc_json_printer_int64_vector_field@@Base+0xf4>
   38240:	ldr	r2, [r4, #20]
   38244:	ldr	r3, [r4, #16]
   38248:	cmp	r2, r3
   3824c:	bcs	382ac <flatcc_json_printer_int64_vector_field@@Base+0x114>
   38250:	ldr	r2, [r4, #20]
   38254:	ldrd	r0, [r6, #4]
   38258:	bl	30578 <flatcc_json_parser_struct_as_root@@Base+0xd68>
   3825c:	ldr	r3, [r4, #20]
   38260:	add	r0, r3, r0
   38264:	str	r0, [r4, #20]
   38268:	add	r6, r6, #12
   3826c:	sub	r5, r7, #2
   38270:	cmp	r7, #1
   38274:	beq	38380 <flatcc_json_printer_int64_vector_field@@Base+0x1e8>
   38278:	mov	r7, #44	; 0x2c
   3827c:	mov	r9, #0
   38280:	mov	r8, #10
   38284:	mov	sl, #32
   38288:	b	38330 <flatcc_json_printer_int64_vector_field@@Base+0x198>
   3828c:	ldr	r3, [r4, #20]
   38290:	add	r2, r3, #1
   38294:	str	r2, [r4, #20]
   38298:	mov	r2, #10
   3829c:	strb	r2, [r3]
   382a0:	mov	r0, r4
   382a4:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   382a8:	b	38250 <flatcc_json_printer_int64_vector_field@@Base+0xb8>
   382ac:	ldr	r3, [r4, #44]	; 0x2c
   382b0:	mov	r1, #0
   382b4:	mov	r0, r4
   382b8:	blx	r3
   382bc:	b	38250 <flatcc_json_printer_int64_vector_field@@Base+0xb8>
   382c0:	ldr	r3, [r4, #20]
   382c4:	add	r2, r3, #1
   382c8:	str	r2, [r4, #20]
   382cc:	strb	r8, [r3]
   382d0:	ldrb	r3, [r4, #25]
   382d4:	ldr	fp, [r4, #32]
   382d8:	mul	fp, fp, r3
   382dc:	ldr	r0, [r4, #20]
   382e0:	add	r3, r0, fp
   382e4:	ldr	r2, [r4, #16]
   382e8:	cmp	r2, r3
   382ec:	bcc	38370 <flatcc_json_printer_int64_vector_field@@Base+0x1d8>
   382f0:	mov	r2, fp
   382f4:	mov	r1, sl
   382f8:	bl	145c4 <memset@plt>
   382fc:	ldr	r3, [r4, #20]
   38300:	add	fp, r3, fp
   38304:	str	fp, [r4, #20]
   38308:	ldr	r2, [r4, #20]
   3830c:	ldrd	r0, [r6], #8
   38310:	bl	30578 <flatcc_json_parser_struct_as_root@@Base+0xd68>
   38314:	ldr	r3, [r4, #20]
   38318:	add	r0, r3, r0
   3831c:	str	r0, [r4, #20]
   38320:	sub	r3, r5, #1
   38324:	cmp	r5, #0
   38328:	beq	38380 <flatcc_json_printer_int64_vector_field@@Base+0x1e8>
   3832c:	mov	r5, r3
   38330:	ldr	r3, [r4, #20]
   38334:	add	r2, r3, #1
   38338:	str	r2, [r4, #20]
   3833c:	strb	r7, [r3]
   38340:	ldrb	r3, [r4, #25]
   38344:	cmp	r3, #0
   38348:	bne	382c0 <flatcc_json_printer_int64_vector_field@@Base+0x128>
   3834c:	ldr	r2, [r4, #20]
   38350:	ldr	r3, [r4, #16]
   38354:	cmp	r2, r3
   38358:	bcc	38308 <flatcc_json_printer_int64_vector_field@@Base+0x170>
   3835c:	ldr	r3, [r4, #44]	; 0x2c
   38360:	mov	r1, r9
   38364:	mov	r0, r4
   38368:	blx	r3
   3836c:	b	38308 <flatcc_json_printer_int64_vector_field@@Base+0x170>
   38370:	mov	r1, fp
   38374:	mov	r0, r4
   38378:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3837c:	b	38308 <flatcc_json_printer_int64_vector_field@@Base+0x170>
   38380:	ldrb	r3, [r4, #25]
   38384:	cmp	r3, #0
   38388:	bne	383a4 <flatcc_json_printer_int64_vector_field@@Base+0x20c>
   3838c:	ldr	r3, [r4, #20]
   38390:	add	r2, r3, #1
   38394:	str	r2, [r4, #20]
   38398:	mov	r2, #93	; 0x5d
   3839c:	strb	r2, [r3]
   383a0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   383a4:	ldr	r3, [r4, #20]
   383a8:	add	r2, r3, #1
   383ac:	str	r2, [r4, #20]
   383b0:	mov	r2, #10
   383b4:	strb	r2, [r3]
   383b8:	ldr	r5, [r4, #32]
   383bc:	sub	r5, r5, #1
   383c0:	str	r5, [r4, #32]
   383c4:	ldrb	r3, [r4, #25]
   383c8:	mul	r5, r5, r3
   383cc:	ldr	r0, [r4, #20]
   383d0:	add	r3, r0, r5
   383d4:	ldr	r2, [r4, #16]
   383d8:	cmp	r2, r3
   383dc:	bcc	383fc <flatcc_json_printer_int64_vector_field@@Base+0x264>
   383e0:	mov	r2, r5
   383e4:	mov	r1, #32
   383e8:	bl	145c4 <memset@plt>
   383ec:	ldr	r3, [r4, #20]
   383f0:	add	r5, r3, r5
   383f4:	str	r5, [r4, #20]
   383f8:	b	3838c <flatcc_json_printer_int64_vector_field@@Base+0x1f4>
   383fc:	mov	r1, r5
   38400:	mov	r0, r4
   38404:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   38408:	b	3838c <flatcc_json_printer_int64_vector_field@@Base+0x1f4>

0003840c <flatcc_json_printer_bool_vector_field@@Base>:
   3840c:	add	r2, r2, #2
   38410:	lsl	r2, r2, #1
   38414:	ldr	ip, [r1, #8]
   38418:	cmp	ip, r2
   3841c:	bxle	lr
   38420:	ldr	ip, [r1, #4]
   38424:	ldrh	ip, [ip, r2]
   38428:	cmp	ip, #0
   3842c:	bxeq	lr
   38430:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38434:	ldr	r5, [r1]
   38438:	adds	lr, r5, ip
   3843c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38440:	ldr	r2, [r1, #16]
   38444:	add	r4, r2, #1
   38448:	str	r4, [r1, #16]
   3844c:	cmp	r2, #0
   38450:	ldrne	r2, [r0, #20]
   38454:	addne	r1, r2, #1
   38458:	strne	r1, [r0, #20]
   3845c:	movne	r1, #44	; 0x2c
   38460:	strbne	r1, [r2]
   38464:	mov	r1, r3
   38468:	mov	r4, r0
   3846c:	ldr	r3, [r5, ip]
   38470:	add	r8, lr, r3
   38474:	ldr	r7, [lr, r3]
   38478:	ldr	r2, [sp, #40]	; 0x28
   3847c:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   38480:	ldr	r3, [r4, #32]
   38484:	add	r3, r3, #1
   38488:	str	r3, [r4, #32]
   3848c:	ldr	r3, [r4, #20]
   38490:	add	r2, r3, #1
   38494:	str	r2, [r4, #20]
   38498:	mov	r2, #91	; 0x5b
   3849c:	strb	r2, [r3]
   384a0:	cmp	r7, #0
   384a4:	beq	385ec <flatcc_json_printer_bool_vector_field@@Base+0x1e0>
   384a8:	ldrb	r3, [r4, #25]
   384ac:	cmp	r3, #0
   384b0:	bne	384fc <flatcc_json_printer_bool_vector_field@@Base+0xf0>
   384b4:	ldr	r2, [r4, #20]
   384b8:	ldr	r3, [r4, #16]
   384bc:	cmp	r2, r3
   384c0:	bcs	3851c <flatcc_json_printer_bool_vector_field@@Base+0x110>
   384c4:	ldr	r1, [r4, #20]
   384c8:	ldrb	r0, [r8, #4]
   384cc:	bl	30c34 <flatcc_json_parser_struct_as_root@@Base+0x1424>
   384d0:	ldr	r3, [r4, #20]
   384d4:	add	r0, r3, r0
   384d8:	str	r0, [r4, #20]
   384dc:	add	r5, r8, #5
   384e0:	cmp	r7, #1
   384e4:	beq	385ec <flatcc_json_printer_bool_vector_field@@Base+0x1e0>
   384e8:	mov	r9, #44	; 0x2c
   384ec:	mov	sl, #10
   384f0:	mov	fp, #0
   384f4:	add	r7, r7, #4
   384f8:	b	3859c <flatcc_json_printer_bool_vector_field@@Base+0x190>
   384fc:	ldr	r3, [r4, #20]
   38500:	add	r2, r3, #1
   38504:	str	r2, [r4, #20]
   38508:	mov	r2, #10
   3850c:	strb	r2, [r3]
   38510:	mov	r0, r4
   38514:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   38518:	b	384c4 <flatcc_json_printer_bool_vector_field@@Base+0xb8>
   3851c:	ldr	r3, [r4, #44]	; 0x2c
   38520:	mov	r1, #0
   38524:	mov	r0, r4
   38528:	blx	r3
   3852c:	b	384c4 <flatcc_json_printer_bool_vector_field@@Base+0xb8>
   38530:	ldr	r3, [r4, #20]
   38534:	add	r2, r3, #1
   38538:	str	r2, [r4, #20]
   3853c:	strb	sl, [r3]
   38540:	ldrb	r3, [r4, #25]
   38544:	ldr	r6, [r4, #32]
   38548:	mul	r6, r6, r3
   3854c:	ldr	r0, [r4, #20]
   38550:	add	r3, r0, r6
   38554:	ldr	r2, [r4, #16]
   38558:	cmp	r2, r3
   3855c:	bcc	385dc <flatcc_json_printer_bool_vector_field@@Base+0x1d0>
   38560:	mov	r2, r6
   38564:	mov	r1, #32
   38568:	bl	145c4 <memset@plt>
   3856c:	ldr	r3, [r4, #20]
   38570:	add	r6, r3, r6
   38574:	str	r6, [r4, #20]
   38578:	ldr	r1, [r4, #20]
   3857c:	ldrb	r0, [r5], #1
   38580:	bl	30c34 <flatcc_json_parser_struct_as_root@@Base+0x1424>
   38584:	ldr	r3, [r4, #20]
   38588:	add	r0, r3, r0
   3858c:	str	r0, [r4, #20]
   38590:	sub	r3, r7, r5
   38594:	cmn	r8, r3
   38598:	beq	385ec <flatcc_json_printer_bool_vector_field@@Base+0x1e0>
   3859c:	ldr	r3, [r4, #20]
   385a0:	add	r2, r3, #1
   385a4:	str	r2, [r4, #20]
   385a8:	strb	r9, [r3]
   385ac:	ldrb	r3, [r4, #25]
   385b0:	cmp	r3, #0
   385b4:	bne	38530 <flatcc_json_printer_bool_vector_field@@Base+0x124>
   385b8:	ldr	r2, [r4, #20]
   385bc:	ldr	r3, [r4, #16]
   385c0:	cmp	r2, r3
   385c4:	bcc	38578 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   385c8:	ldr	r3, [r4, #44]	; 0x2c
   385cc:	mov	r1, fp
   385d0:	mov	r0, r4
   385d4:	blx	r3
   385d8:	b	38578 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   385dc:	mov	r1, r6
   385e0:	mov	r0, r4
   385e4:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   385e8:	b	38578 <flatcc_json_printer_bool_vector_field@@Base+0x16c>
   385ec:	ldrb	r3, [r4, #25]
   385f0:	cmp	r3, #0
   385f4:	bne	38610 <flatcc_json_printer_bool_vector_field@@Base+0x204>
   385f8:	ldr	r3, [r4, #20]
   385fc:	add	r2, r3, #1
   38600:	str	r2, [r4, #20]
   38604:	mov	r2, #93	; 0x5d
   38608:	strb	r2, [r3]
   3860c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38610:	ldr	r3, [r4, #20]
   38614:	add	r2, r3, #1
   38618:	str	r2, [r4, #20]
   3861c:	mov	r2, #10
   38620:	strb	r2, [r3]
   38624:	ldr	r5, [r4, #32]
   38628:	sub	r5, r5, #1
   3862c:	str	r5, [r4, #32]
   38630:	ldrb	r3, [r4, #25]
   38634:	mul	r5, r5, r3
   38638:	ldr	r0, [r4, #20]
   3863c:	add	r3, r0, r5
   38640:	ldr	r2, [r4, #16]
   38644:	cmp	r2, r3
   38648:	bcc	38668 <flatcc_json_printer_bool_vector_field@@Base+0x25c>
   3864c:	mov	r2, r5
   38650:	mov	r1, #32
   38654:	bl	145c4 <memset@plt>
   38658:	ldr	r3, [r4, #20]
   3865c:	add	r5, r3, r5
   38660:	str	r5, [r4, #20]
   38664:	b	385f8 <flatcc_json_printer_bool_vector_field@@Base+0x1ec>
   38668:	mov	r1, r5
   3866c:	mov	r0, r4
   38670:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   38674:	b	385f8 <flatcc_json_printer_bool_vector_field@@Base+0x1ec>

00038678 <flatcc_json_printer_float_vector_field@@Base>:
   38678:	add	r2, r2, #2
   3867c:	lsl	r2, r2, #1
   38680:	ldr	ip, [r1, #8]
   38684:	cmp	ip, r2
   38688:	bxle	lr
   3868c:	ldr	ip, [r1, #4]
   38690:	ldrh	ip, [ip, r2]
   38694:	cmp	ip, #0
   38698:	bxeq	lr
   3869c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   386a0:	ldr	r5, [r1]
   386a4:	adds	lr, r5, ip
   386a8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   386ac:	ldr	r2, [r1, #16]
   386b0:	add	r4, r2, #1
   386b4:	str	r4, [r1, #16]
   386b8:	cmp	r2, #0
   386bc:	ldrne	r2, [r0, #20]
   386c0:	addne	r1, r2, #1
   386c4:	strne	r1, [r0, #20]
   386c8:	movne	r1, #44	; 0x2c
   386cc:	strbne	r1, [r2]
   386d0:	mov	r1, r3
   386d4:	mov	r4, r0
   386d8:	ldr	r3, [r5, ip]
   386dc:	add	r6, lr, r3
   386e0:	ldr	r7, [lr, r3]
   386e4:	ldr	r2, [sp, #40]	; 0x28
   386e8:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   386ec:	ldr	r3, [r4, #32]
   386f0:	add	r3, r3, #1
   386f4:	str	r3, [r4, #32]
   386f8:	ldr	r3, [r4, #20]
   386fc:	add	r2, r3, #1
   38700:	str	r2, [r4, #20]
   38704:	mov	r2, #91	; 0x5b
   38708:	strb	r2, [r3]
   3870c:	cmp	r7, #0
   38710:	beq	38868 <flatcc_json_printer_float_vector_field@@Base+0x1f0>
   38714:	ldrb	r3, [r4, #25]
   38718:	cmp	r3, #0
   3871c:	bne	38770 <flatcc_json_printer_float_vector_field@@Base+0xf8>
   38720:	ldr	r2, [r4, #20]
   38724:	ldr	r3, [r4, #16]
   38728:	cmp	r2, r3
   3872c:	bcs	38790 <flatcc_json_printer_float_vector_field@@Base+0x118>
   38730:	vldr	s0, [r6, #4]
   38734:	ldr	r0, [r4, #20]
   38738:	vcvt.f64.f32	d0, s0
   3873c:	bl	3131c <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   38740:	ldr	r3, [r4, #20]
   38744:	add	r0, r3, r0
   38748:	str	r0, [r4, #20]
   3874c:	add	r6, r6, #8
   38750:	sub	r5, r7, #2
   38754:	cmp	r7, #1
   38758:	beq	38868 <flatcc_json_printer_float_vector_field@@Base+0x1f0>
   3875c:	mov	r7, #44	; 0x2c
   38760:	mov	r9, #0
   38764:	mov	r8, #10
   38768:	mov	sl, #32
   3876c:	b	38818 <flatcc_json_printer_float_vector_field@@Base+0x1a0>
   38770:	ldr	r3, [r4, #20]
   38774:	add	r2, r3, #1
   38778:	str	r2, [r4, #20]
   3877c:	mov	r2, #10
   38780:	strb	r2, [r3]
   38784:	mov	r0, r4
   38788:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3878c:	b	38730 <flatcc_json_printer_float_vector_field@@Base+0xb8>
   38790:	ldr	r3, [r4, #44]	; 0x2c
   38794:	mov	r1, #0
   38798:	mov	r0, r4
   3879c:	blx	r3
   387a0:	b	38730 <flatcc_json_printer_float_vector_field@@Base+0xb8>
   387a4:	ldr	r3, [r4, #20]
   387a8:	add	r2, r3, #1
   387ac:	str	r2, [r4, #20]
   387b0:	strb	r8, [r3]
   387b4:	ldrb	r3, [r4, #25]
   387b8:	ldr	fp, [r4, #32]
   387bc:	mul	fp, fp, r3
   387c0:	ldr	r0, [r4, #20]
   387c4:	add	r3, r0, fp
   387c8:	ldr	r2, [r4, #16]
   387cc:	cmp	r2, r3
   387d0:	bcc	38858 <flatcc_json_printer_float_vector_field@@Base+0x1e0>
   387d4:	mov	r2, fp
   387d8:	mov	r1, sl
   387dc:	bl	145c4 <memset@plt>
   387e0:	ldr	r3, [r4, #20]
   387e4:	add	fp, r3, fp
   387e8:	str	fp, [r4, #20]
   387ec:	vldmia	r6!, {s0}
   387f0:	ldr	r0, [r4, #20]
   387f4:	vcvt.f64.f32	d0, s0
   387f8:	bl	3131c <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   387fc:	ldr	r3, [r4, #20]
   38800:	add	r0, r3, r0
   38804:	str	r0, [r4, #20]
   38808:	sub	r3, r5, #1
   3880c:	cmp	r5, #0
   38810:	beq	38868 <flatcc_json_printer_float_vector_field@@Base+0x1f0>
   38814:	mov	r5, r3
   38818:	ldr	r3, [r4, #20]
   3881c:	add	r2, r3, #1
   38820:	str	r2, [r4, #20]
   38824:	strb	r7, [r3]
   38828:	ldrb	r3, [r4, #25]
   3882c:	cmp	r3, #0
   38830:	bne	387a4 <flatcc_json_printer_float_vector_field@@Base+0x12c>
   38834:	ldr	r2, [r4, #20]
   38838:	ldr	r3, [r4, #16]
   3883c:	cmp	r2, r3
   38840:	bcc	387ec <flatcc_json_printer_float_vector_field@@Base+0x174>
   38844:	ldr	r3, [r4, #44]	; 0x2c
   38848:	mov	r1, r9
   3884c:	mov	r0, r4
   38850:	blx	r3
   38854:	b	387ec <flatcc_json_printer_float_vector_field@@Base+0x174>
   38858:	mov	r1, fp
   3885c:	mov	r0, r4
   38860:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   38864:	b	387ec <flatcc_json_printer_float_vector_field@@Base+0x174>
   38868:	ldrb	r3, [r4, #25]
   3886c:	cmp	r3, #0
   38870:	bne	3888c <flatcc_json_printer_float_vector_field@@Base+0x214>
   38874:	ldr	r3, [r4, #20]
   38878:	add	r2, r3, #1
   3887c:	str	r2, [r4, #20]
   38880:	mov	r2, #93	; 0x5d
   38884:	strb	r2, [r3]
   38888:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3888c:	ldr	r3, [r4, #20]
   38890:	add	r2, r3, #1
   38894:	str	r2, [r4, #20]
   38898:	mov	r2, #10
   3889c:	strb	r2, [r3]
   388a0:	ldr	r5, [r4, #32]
   388a4:	sub	r5, r5, #1
   388a8:	str	r5, [r4, #32]
   388ac:	ldrb	r3, [r4, #25]
   388b0:	mul	r5, r5, r3
   388b4:	ldr	r0, [r4, #20]
   388b8:	add	r3, r0, r5
   388bc:	ldr	r2, [r4, #16]
   388c0:	cmp	r2, r3
   388c4:	bcc	388e4 <flatcc_json_printer_float_vector_field@@Base+0x26c>
   388c8:	mov	r2, r5
   388cc:	mov	r1, #32
   388d0:	bl	145c4 <memset@plt>
   388d4:	ldr	r3, [r4, #20]
   388d8:	add	r5, r3, r5
   388dc:	str	r5, [r4, #20]
   388e0:	b	38874 <flatcc_json_printer_float_vector_field@@Base+0x1fc>
   388e4:	mov	r1, r5
   388e8:	mov	r0, r4
   388ec:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   388f0:	b	38874 <flatcc_json_printer_float_vector_field@@Base+0x1fc>

000388f4 <flatcc_json_printer_double_vector_field@@Base>:
   388f4:	add	r2, r2, #2
   388f8:	lsl	r2, r2, #1
   388fc:	ldr	ip, [r1, #8]
   38900:	cmp	ip, r2
   38904:	bxle	lr
   38908:	ldr	ip, [r1, #4]
   3890c:	ldrh	ip, [ip, r2]
   38910:	cmp	ip, #0
   38914:	bxeq	lr
   38918:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3891c:	ldr	r5, [r1]
   38920:	adds	lr, r5, ip
   38924:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38928:	ldr	r2, [r1, #16]
   3892c:	add	r4, r2, #1
   38930:	str	r4, [r1, #16]
   38934:	cmp	r2, #0
   38938:	ldrne	r2, [r0, #20]
   3893c:	addne	r1, r2, #1
   38940:	strne	r1, [r0, #20]
   38944:	movne	r1, #44	; 0x2c
   38948:	strbne	r1, [r2]
   3894c:	mov	r1, r3
   38950:	mov	r4, r0
   38954:	ldr	r3, [r5, ip]
   38958:	add	r6, lr, r3
   3895c:	ldr	r7, [lr, r3]
   38960:	ldr	r2, [sp, #40]	; 0x28
   38964:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   38968:	ldr	r3, [r4, #32]
   3896c:	add	r3, r3, #1
   38970:	str	r3, [r4, #32]
   38974:	ldr	r3, [r4, #20]
   38978:	add	r2, r3, #1
   3897c:	str	r2, [r4, #20]
   38980:	mov	r2, #91	; 0x5b
   38984:	strb	r2, [r3]
   38988:	cmp	r7, #0
   3898c:	beq	38adc <flatcc_json_printer_double_vector_field@@Base+0x1e8>
   38990:	ldrb	r3, [r4, #25]
   38994:	cmp	r3, #0
   38998:	bne	389e8 <flatcc_json_printer_double_vector_field@@Base+0xf4>
   3899c:	ldr	r2, [r4, #20]
   389a0:	ldr	r3, [r4, #16]
   389a4:	cmp	r2, r3
   389a8:	bcs	38a08 <flatcc_json_printer_double_vector_field@@Base+0x114>
   389ac:	ldr	r0, [r4, #20]
   389b0:	vldr	d0, [r6, #4]
   389b4:	bl	3131c <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   389b8:	ldr	r3, [r4, #20]
   389bc:	add	r0, r3, r0
   389c0:	str	r0, [r4, #20]
   389c4:	add	r6, r6, #12
   389c8:	sub	r5, r7, #2
   389cc:	cmp	r7, #1
   389d0:	beq	38adc <flatcc_json_printer_double_vector_field@@Base+0x1e8>
   389d4:	mov	r7, #44	; 0x2c
   389d8:	mov	r9, #0
   389dc:	mov	r8, #10
   389e0:	mov	sl, #32
   389e4:	b	38a8c <flatcc_json_printer_double_vector_field@@Base+0x198>
   389e8:	ldr	r3, [r4, #20]
   389ec:	add	r2, r3, #1
   389f0:	str	r2, [r4, #20]
   389f4:	mov	r2, #10
   389f8:	strb	r2, [r3]
   389fc:	mov	r0, r4
   38a00:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   38a04:	b	389ac <flatcc_json_printer_double_vector_field@@Base+0xb8>
   38a08:	ldr	r3, [r4, #44]	; 0x2c
   38a0c:	mov	r1, #0
   38a10:	mov	r0, r4
   38a14:	blx	r3
   38a18:	b	389ac <flatcc_json_printer_double_vector_field@@Base+0xb8>
   38a1c:	ldr	r3, [r4, #20]
   38a20:	add	r2, r3, #1
   38a24:	str	r2, [r4, #20]
   38a28:	strb	r8, [r3]
   38a2c:	ldrb	r3, [r4, #25]
   38a30:	ldr	fp, [r4, #32]
   38a34:	mul	fp, fp, r3
   38a38:	ldr	r0, [r4, #20]
   38a3c:	add	r3, r0, fp
   38a40:	ldr	r2, [r4, #16]
   38a44:	cmp	r2, r3
   38a48:	bcc	38acc <flatcc_json_printer_double_vector_field@@Base+0x1d8>
   38a4c:	mov	r2, fp
   38a50:	mov	r1, sl
   38a54:	bl	145c4 <memset@plt>
   38a58:	ldr	r3, [r4, #20]
   38a5c:	add	fp, r3, fp
   38a60:	str	fp, [r4, #20]
   38a64:	ldr	r0, [r4, #20]
   38a68:	vldmia	r6!, {d0}
   38a6c:	bl	3131c <flatcc_json_parser_struct_as_root@@Base+0x1b0c>
   38a70:	ldr	r3, [r4, #20]
   38a74:	add	r0, r3, r0
   38a78:	str	r0, [r4, #20]
   38a7c:	sub	r3, r5, #1
   38a80:	cmp	r5, #0
   38a84:	beq	38adc <flatcc_json_printer_double_vector_field@@Base+0x1e8>
   38a88:	mov	r5, r3
   38a8c:	ldr	r3, [r4, #20]
   38a90:	add	r2, r3, #1
   38a94:	str	r2, [r4, #20]
   38a98:	strb	r7, [r3]
   38a9c:	ldrb	r3, [r4, #25]
   38aa0:	cmp	r3, #0
   38aa4:	bne	38a1c <flatcc_json_printer_double_vector_field@@Base+0x128>
   38aa8:	ldr	r2, [r4, #20]
   38aac:	ldr	r3, [r4, #16]
   38ab0:	cmp	r2, r3
   38ab4:	bcc	38a64 <flatcc_json_printer_double_vector_field@@Base+0x170>
   38ab8:	ldr	r3, [r4, #44]	; 0x2c
   38abc:	mov	r1, r9
   38ac0:	mov	r0, r4
   38ac4:	blx	r3
   38ac8:	b	38a64 <flatcc_json_printer_double_vector_field@@Base+0x170>
   38acc:	mov	r1, fp
   38ad0:	mov	r0, r4
   38ad4:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   38ad8:	b	38a64 <flatcc_json_printer_double_vector_field@@Base+0x170>
   38adc:	ldrb	r3, [r4, #25]
   38ae0:	cmp	r3, #0
   38ae4:	bne	38b00 <flatcc_json_printer_double_vector_field@@Base+0x20c>
   38ae8:	ldr	r3, [r4, #20]
   38aec:	add	r2, r3, #1
   38af0:	str	r2, [r4, #20]
   38af4:	mov	r2, #93	; 0x5d
   38af8:	strb	r2, [r3]
   38afc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38b00:	ldr	r3, [r4, #20]
   38b04:	add	r2, r3, #1
   38b08:	str	r2, [r4, #20]
   38b0c:	mov	r2, #10
   38b10:	strb	r2, [r3]
   38b14:	ldr	r5, [r4, #32]
   38b18:	sub	r5, r5, #1
   38b1c:	str	r5, [r4, #32]
   38b20:	ldrb	r3, [r4, #25]
   38b24:	mul	r5, r5, r3
   38b28:	ldr	r0, [r4, #20]
   38b2c:	add	r3, r0, r5
   38b30:	ldr	r2, [r4, #16]
   38b34:	cmp	r2, r3
   38b38:	bcc	38b58 <flatcc_json_printer_double_vector_field@@Base+0x264>
   38b3c:	mov	r2, r5
   38b40:	mov	r1, #32
   38b44:	bl	145c4 <memset@plt>
   38b48:	ldr	r3, [r4, #20]
   38b4c:	add	r5, r3, r5
   38b50:	str	r5, [r4, #20]
   38b54:	b	38ae8 <flatcc_json_printer_double_vector_field@@Base+0x1f4>
   38b58:	mov	r1, r5
   38b5c:	mov	r0, r4
   38b60:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   38b64:	b	38ae8 <flatcc_json_printer_double_vector_field@@Base+0x1f4>

00038b68 <flatcc_json_printer_utype_enum_vector_field@@Base>:
   38b68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38b6c:	sub	sp, sp, #12
   38b70:	mov	r4, r0
   38b74:	ldr	r9, [sp, #52]	; 0x34
   38b78:	ldrb	r0, [r0, #27]
   38b7c:	cmp	r0, #0
   38b80:	bne	38c60 <flatcc_json_printer_utype_enum_vector_field@@Base+0xf8>
   38b84:	add	r2, r2, #2
   38b88:	lsl	r2, r2, #1
   38b8c:	ldr	r0, [r1, #8]
   38b90:	cmp	r0, r2
   38b94:	ble	38d78 <flatcc_json_printer_utype_enum_vector_field@@Base+0x210>
   38b98:	ldr	r0, [r1, #4]
   38b9c:	ldrh	r0, [r0, r2]
   38ba0:	cmp	r0, #0
   38ba4:	beq	38d78 <flatcc_json_printer_utype_enum_vector_field@@Base+0x210>
   38ba8:	ldr	r5, [r1]
   38bac:	adds	ip, r5, r0
   38bb0:	beq	38d78 <flatcc_json_printer_utype_enum_vector_field@@Base+0x210>
   38bb4:	ldr	r2, [r1, #16]
   38bb8:	add	lr, r2, #1
   38bbc:	str	lr, [r1, #16]
   38bc0:	cmp	r2, #0
   38bc4:	ldrne	r2, [r4, #20]
   38bc8:	addne	r1, r2, #1
   38bcc:	strne	r1, [r4, #20]
   38bd0:	movne	r1, #44	; 0x2c
   38bd4:	strbne	r1, [r2]
   38bd8:	ldr	r2, [r5, r0]
   38bdc:	add	r8, ip, r2
   38be0:	ldr	r7, [ip, r2]
   38be4:	ldr	r2, [sp, #48]	; 0x30
   38be8:	mov	r1, r3
   38bec:	mov	r0, r4
   38bf0:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   38bf4:	ldr	r3, [r4, #32]
   38bf8:	add	r3, r3, #1
   38bfc:	str	r3, [r4, #32]
   38c00:	ldr	r3, [r4, #20]
   38c04:	add	r2, r3, #1
   38c08:	str	r2, [r4, #20]
   38c0c:	mov	r2, #91	; 0x5b
   38c10:	strb	r2, [r3]
   38c14:	cmp	r7, #0
   38c18:	beq	38d58 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1f0>
   38c1c:	ldrb	r3, [r4, #25]
   38c20:	cmp	r3, #0
   38c24:	bne	38c74 <flatcc_json_printer_utype_enum_vector_field@@Base+0x10c>
   38c28:	ldr	r2, [r4, #20]
   38c2c:	ldr	r3, [r4, #16]
   38c30:	cmp	r2, r3
   38c34:	bcs	38c94 <flatcc_json_printer_utype_enum_vector_field@@Base+0x12c>
   38c38:	ldrb	r1, [r8, #4]
   38c3c:	mov	r0, r4
   38c40:	blx	r9
   38c44:	add	r5, r8, #5
   38c48:	cmp	r7, #1
   38c4c:	beq	38d58 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1f0>
   38c50:	mov	sl, #44	; 0x2c
   38c54:	mov	fp, #10
   38c58:	add	r7, r7, #4
   38c5c:	b	38d08 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1a0>
   38c60:	ldr	r0, [sp, #48]	; 0x30
   38c64:	str	r0, [sp]
   38c68:	mov	r0, r4
   38c6c:	bl	36ce0 <flatcc_json_printer_utype_vector_field@@Base>
   38c70:	b	38d78 <flatcc_json_printer_utype_enum_vector_field@@Base+0x210>
   38c74:	ldr	r3, [r4, #20]
   38c78:	add	r2, r3, #1
   38c7c:	str	r2, [r4, #20]
   38c80:	mov	r2, #10
   38c84:	strb	r2, [r3]
   38c88:	mov	r0, r4
   38c8c:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   38c90:	b	38c38 <flatcc_json_printer_utype_enum_vector_field@@Base+0xd0>
   38c94:	ldr	r3, [r4, #44]	; 0x2c
   38c98:	mov	r1, #0
   38c9c:	mov	r0, r4
   38ca0:	blx	r3
   38ca4:	b	38c38 <flatcc_json_printer_utype_enum_vector_field@@Base+0xd0>
   38ca8:	ldr	r3, [r4, #20]
   38cac:	add	r2, r3, #1
   38cb0:	str	r2, [r4, #20]
   38cb4:	strb	fp, [r3]
   38cb8:	ldrb	r3, [r4, #25]
   38cbc:	ldr	r6, [r4, #32]
   38cc0:	mul	r6, r6, r3
   38cc4:	ldr	r0, [r4, #20]
   38cc8:	add	r3, r0, r6
   38ccc:	ldr	r2, [r4, #16]
   38cd0:	cmp	r2, r3
   38cd4:	bcc	38d48 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1e0>
   38cd8:	mov	r2, r6
   38cdc:	mov	r1, #32
   38ce0:	bl	145c4 <memset@plt>
   38ce4:	ldr	r3, [r4, #20]
   38ce8:	add	r6, r3, r6
   38cec:	str	r6, [r4, #20]
   38cf0:	ldrb	r1, [r5], #1
   38cf4:	mov	r0, r4
   38cf8:	blx	r9
   38cfc:	sub	r3, r7, r5
   38d00:	cmn	r8, r3
   38d04:	beq	38d58 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1f0>
   38d08:	ldr	r3, [r4, #20]
   38d0c:	add	r2, r3, #1
   38d10:	str	r2, [r4, #20]
   38d14:	strb	sl, [r3]
   38d18:	ldrb	r3, [r4, #25]
   38d1c:	cmp	r3, #0
   38d20:	bne	38ca8 <flatcc_json_printer_utype_enum_vector_field@@Base+0x140>
   38d24:	ldr	r2, [r4, #20]
   38d28:	ldr	r3, [r4, #16]
   38d2c:	cmp	r2, r3
   38d30:	bcc	38cf0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x188>
   38d34:	ldr	r3, [r4, #44]	; 0x2c
   38d38:	mov	r1, #0
   38d3c:	mov	r0, r4
   38d40:	blx	r3
   38d44:	b	38cf0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x188>
   38d48:	mov	r1, r6
   38d4c:	mov	r0, r4
   38d50:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   38d54:	b	38cf0 <flatcc_json_printer_utype_enum_vector_field@@Base+0x188>
   38d58:	ldrb	r3, [r4, #25]
   38d5c:	cmp	r3, #0
   38d60:	bne	38d80 <flatcc_json_printer_utype_enum_vector_field@@Base+0x218>
   38d64:	ldr	r3, [r4, #20]
   38d68:	add	r2, r3, #1
   38d6c:	str	r2, [r4, #20]
   38d70:	mov	r2, #93	; 0x5d
   38d74:	strb	r2, [r3]
   38d78:	add	sp, sp, #12
   38d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38d80:	ldr	r3, [r4, #20]
   38d84:	add	r2, r3, #1
   38d88:	str	r2, [r4, #20]
   38d8c:	mov	r2, #10
   38d90:	strb	r2, [r3]
   38d94:	ldr	r5, [r4, #32]
   38d98:	sub	r5, r5, #1
   38d9c:	str	r5, [r4, #32]
   38da0:	ldrb	r3, [r4, #25]
   38da4:	mul	r5, r5, r3
   38da8:	ldr	r0, [r4, #20]
   38dac:	add	r3, r0, r5
   38db0:	ldr	r2, [r4, #16]
   38db4:	cmp	r2, r3
   38db8:	bcc	38dd8 <flatcc_json_printer_utype_enum_vector_field@@Base+0x270>
   38dbc:	mov	r2, r5
   38dc0:	mov	r1, #32
   38dc4:	bl	145c4 <memset@plt>
   38dc8:	ldr	r3, [r4, #20]
   38dcc:	add	r5, r3, r5
   38dd0:	str	r5, [r4, #20]
   38dd4:	b	38d64 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1fc>
   38dd8:	mov	r1, r5
   38ddc:	mov	r0, r4
   38de0:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   38de4:	b	38d64 <flatcc_json_printer_utype_enum_vector_field@@Base+0x1fc>

00038de8 <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   38de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38dec:	sub	sp, sp, #12
   38df0:	mov	r4, r0
   38df4:	ldr	r9, [sp, #52]	; 0x34
   38df8:	ldrb	r0, [r0, #27]
   38dfc:	cmp	r0, #0
   38e00:	bne	38ee0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf8>
   38e04:	add	r2, r2, #2
   38e08:	lsl	r2, r2, #1
   38e0c:	ldr	r0, [r1, #8]
   38e10:	cmp	r0, r2
   38e14:	ble	38ff8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x210>
   38e18:	ldr	r0, [r1, #4]
   38e1c:	ldrh	r0, [r0, r2]
   38e20:	cmp	r0, #0
   38e24:	beq	38ff8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x210>
   38e28:	ldr	r5, [r1]
   38e2c:	adds	ip, r5, r0
   38e30:	beq	38ff8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x210>
   38e34:	ldr	r2, [r1, #16]
   38e38:	add	lr, r2, #1
   38e3c:	str	lr, [r1, #16]
   38e40:	cmp	r2, #0
   38e44:	ldrne	r2, [r4, #20]
   38e48:	addne	r1, r2, #1
   38e4c:	strne	r1, [r4, #20]
   38e50:	movne	r1, #44	; 0x2c
   38e54:	strbne	r1, [r2]
   38e58:	ldr	r2, [r5, r0]
   38e5c:	add	r8, ip, r2
   38e60:	ldr	r7, [ip, r2]
   38e64:	ldr	r2, [sp, #48]	; 0x30
   38e68:	mov	r1, r3
   38e6c:	mov	r0, r4
   38e70:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   38e74:	ldr	r3, [r4, #32]
   38e78:	add	r3, r3, #1
   38e7c:	str	r3, [r4, #32]
   38e80:	ldr	r3, [r4, #20]
   38e84:	add	r2, r3, #1
   38e88:	str	r2, [r4, #20]
   38e8c:	mov	r2, #91	; 0x5b
   38e90:	strb	r2, [r3]
   38e94:	cmp	r7, #0
   38e98:	beq	38fd8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1f0>
   38e9c:	ldrb	r3, [r4, #25]
   38ea0:	cmp	r3, #0
   38ea4:	bne	38ef4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x10c>
   38ea8:	ldr	r2, [r4, #20]
   38eac:	ldr	r3, [r4, #16]
   38eb0:	cmp	r2, r3
   38eb4:	bcs	38f14 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x12c>
   38eb8:	ldrb	r1, [r8, #4]
   38ebc:	mov	r0, r4
   38ec0:	blx	r9
   38ec4:	add	r5, r8, #5
   38ec8:	cmp	r7, #1
   38ecc:	beq	38fd8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1f0>
   38ed0:	mov	sl, #44	; 0x2c
   38ed4:	mov	fp, #10
   38ed8:	add	r7, r7, #4
   38edc:	b	38f88 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1a0>
   38ee0:	ldr	r0, [sp, #48]	; 0x30
   38ee4:	str	r0, [sp]
   38ee8:	mov	r0, r4
   38eec:	bl	36f4c <flatcc_json_printer_uint8_vector_field@@Base>
   38ef0:	b	38ff8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x210>
   38ef4:	ldr	r3, [r4, #20]
   38ef8:	add	r2, r3, #1
   38efc:	str	r2, [r4, #20]
   38f00:	mov	r2, #10
   38f04:	strb	r2, [r3]
   38f08:	mov	r0, r4
   38f0c:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   38f10:	b	38eb8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xd0>
   38f14:	ldr	r3, [r4, #44]	; 0x2c
   38f18:	mov	r1, #0
   38f1c:	mov	r0, r4
   38f20:	blx	r3
   38f24:	b	38eb8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xd0>
   38f28:	ldr	r3, [r4, #20]
   38f2c:	add	r2, r3, #1
   38f30:	str	r2, [r4, #20]
   38f34:	strb	fp, [r3]
   38f38:	ldrb	r3, [r4, #25]
   38f3c:	ldr	r6, [r4, #32]
   38f40:	mul	r6, r6, r3
   38f44:	ldr	r0, [r4, #20]
   38f48:	add	r3, r0, r6
   38f4c:	ldr	r2, [r4, #16]
   38f50:	cmp	r2, r3
   38f54:	bcc	38fc8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1e0>
   38f58:	mov	r2, r6
   38f5c:	mov	r1, #32
   38f60:	bl	145c4 <memset@plt>
   38f64:	ldr	r3, [r4, #20]
   38f68:	add	r6, r3, r6
   38f6c:	str	r6, [r4, #20]
   38f70:	ldrb	r1, [r5], #1
   38f74:	mov	r0, r4
   38f78:	blx	r9
   38f7c:	sub	r3, r7, r5
   38f80:	cmn	r8, r3
   38f84:	beq	38fd8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1f0>
   38f88:	ldr	r3, [r4, #20]
   38f8c:	add	r2, r3, #1
   38f90:	str	r2, [r4, #20]
   38f94:	strb	sl, [r3]
   38f98:	ldrb	r3, [r4, #25]
   38f9c:	cmp	r3, #0
   38fa0:	bne	38f28 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x140>
   38fa4:	ldr	r2, [r4, #20]
   38fa8:	ldr	r3, [r4, #16]
   38fac:	cmp	r2, r3
   38fb0:	bcc	38f70 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x188>
   38fb4:	ldr	r3, [r4, #44]	; 0x2c
   38fb8:	mov	r1, #0
   38fbc:	mov	r0, r4
   38fc0:	blx	r3
   38fc4:	b	38f70 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x188>
   38fc8:	mov	r1, r6
   38fcc:	mov	r0, r4
   38fd0:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   38fd4:	b	38f70 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x188>
   38fd8:	ldrb	r3, [r4, #25]
   38fdc:	cmp	r3, #0
   38fe0:	bne	39000 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x218>
   38fe4:	ldr	r3, [r4, #20]
   38fe8:	add	r2, r3, #1
   38fec:	str	r2, [r4, #20]
   38ff0:	mov	r2, #93	; 0x5d
   38ff4:	strb	r2, [r3]
   38ff8:	add	sp, sp, #12
   38ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39000:	ldr	r3, [r4, #20]
   39004:	add	r2, r3, #1
   39008:	str	r2, [r4, #20]
   3900c:	mov	r2, #10
   39010:	strb	r2, [r3]
   39014:	ldr	r5, [r4, #32]
   39018:	sub	r5, r5, #1
   3901c:	str	r5, [r4, #32]
   39020:	ldrb	r3, [r4, #25]
   39024:	mul	r5, r5, r3
   39028:	ldr	r0, [r4, #20]
   3902c:	add	r3, r0, r5
   39030:	ldr	r2, [r4, #16]
   39034:	cmp	r2, r3
   39038:	bcc	39058 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x270>
   3903c:	mov	r2, r5
   39040:	mov	r1, #32
   39044:	bl	145c4 <memset@plt>
   39048:	ldr	r3, [r4, #20]
   3904c:	add	r5, r3, r5
   39050:	str	r5, [r4, #20]
   39054:	b	38fe4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1fc>
   39058:	mov	r1, r5
   3905c:	mov	r0, r4
   39060:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   39064:	b	38fe4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x1fc>

00039068 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   39068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3906c:	sub	sp, sp, #12
   39070:	mov	r4, r0
   39074:	ldr	r8, [sp, #52]	; 0x34
   39078:	ldrb	r0, [r0, #27]
   3907c:	cmp	r0, #0
   39080:	bne	39164 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xfc>
   39084:	add	r2, r2, #2
   39088:	lsl	r2, r2, #1
   3908c:	ldr	r0, [r1, #8]
   39090:	cmp	r0, r2
   39094:	ble	39280 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x218>
   39098:	ldr	r0, [r1, #4]
   3909c:	ldrh	r0, [r0, r2]
   390a0:	cmp	r0, #0
   390a4:	beq	39280 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x218>
   390a8:	ldr	r5, [r1]
   390ac:	adds	ip, r5, r0
   390b0:	beq	39280 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x218>
   390b4:	ldr	r2, [r1, #16]
   390b8:	add	lr, r2, #1
   390bc:	str	lr, [r1, #16]
   390c0:	cmp	r2, #0
   390c4:	ldrne	r2, [r4, #20]
   390c8:	addne	r1, r2, #1
   390cc:	strne	r1, [r4, #20]
   390d0:	movne	r1, #44	; 0x2c
   390d4:	strbne	r1, [r2]
   390d8:	ldr	r2, [r5, r0]
   390dc:	add	r6, ip, r2
   390e0:	ldr	r7, [ip, r2]
   390e4:	ldr	r2, [sp, #48]	; 0x30
   390e8:	mov	r1, r3
   390ec:	mov	r0, r4
   390f0:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   390f4:	ldr	r3, [r4, #32]
   390f8:	add	r3, r3, #1
   390fc:	str	r3, [r4, #32]
   39100:	ldr	r3, [r4, #20]
   39104:	add	r2, r3, #1
   39108:	str	r2, [r4, #20]
   3910c:	mov	r2, #91	; 0x5b
   39110:	strb	r2, [r3]
   39114:	cmp	r7, #0
   39118:	beq	39260 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1f8>
   3911c:	ldrb	r3, [r4, #25]
   39120:	cmp	r3, #0
   39124:	bne	39178 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x110>
   39128:	ldr	r2, [r4, #20]
   3912c:	ldr	r3, [r4, #16]
   39130:	cmp	r2, r3
   39134:	bcs	39198 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x130>
   39138:	ldrh	r1, [r6, #4]
   3913c:	mov	r0, r4
   39140:	blx	r8
   39144:	add	r6, r6, #6
   39148:	sub	r5, r7, #2
   3914c:	cmp	r7, #1
   39150:	beq	39260 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1f8>
   39154:	mov	r9, #44	; 0x2c
   39158:	mov	fp, #0
   3915c:	mov	sl, #10
   39160:	b	39210 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1a8>
   39164:	ldr	r0, [sp, #48]	; 0x30
   39168:	str	r0, [sp]
   3916c:	mov	r0, r4
   39170:	bl	371b8 <flatcc_json_printer_uint16_vector_field@@Base>
   39174:	b	39280 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x218>
   39178:	ldr	r3, [r4, #20]
   3917c:	add	r2, r3, #1
   39180:	str	r2, [r4, #20]
   39184:	mov	r2, #10
   39188:	strb	r2, [r3]
   3918c:	mov	r0, r4
   39190:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   39194:	b	39138 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xd0>
   39198:	ldr	r3, [r4, #44]	; 0x2c
   3919c:	mov	r1, #0
   391a0:	mov	r0, r4
   391a4:	blx	r3
   391a8:	b	39138 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xd0>
   391ac:	ldr	r3, [r4, #20]
   391b0:	add	r2, r3, #1
   391b4:	str	r2, [r4, #20]
   391b8:	strb	sl, [r3]
   391bc:	ldrb	r3, [r4, #25]
   391c0:	ldr	r7, [r4, #32]
   391c4:	mul	r7, r7, r3
   391c8:	ldr	r0, [r4, #20]
   391cc:	add	r3, r0, r7
   391d0:	ldr	r2, [r4, #16]
   391d4:	cmp	r2, r3
   391d8:	bcc	39250 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1e8>
   391dc:	mov	r2, r7
   391e0:	mov	r1, #32
   391e4:	bl	145c4 <memset@plt>
   391e8:	ldr	r3, [r4, #20]
   391ec:	add	r7, r3, r7
   391f0:	str	r7, [r4, #20]
   391f4:	ldrh	r1, [r6], #2
   391f8:	mov	r0, r4
   391fc:	blx	r8
   39200:	sub	r3, r5, #1
   39204:	cmp	r5, #0
   39208:	beq	39260 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x1f8>
   3920c:	mov	r5, r3
   39210:	ldr	r3, [r4, #20]
   39214:	add	r2, r3, #1
   39218:	str	r2, [r4, #20]
   3921c:	strb	r9, [r3]
   39220:	ldrb	r3, [r4, #25]
   39224:	cmp	r3, #0
   39228:	bne	391ac <flatcc_json_printer_uint16_enum_vector_field@@Base+0x144>
   3922c:	ldr	r2, [r4, #20]
   39230:	ldr	r3, [r4, #16]
   39234:	cmp	r2, r3
   39238:	bcc	391f4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x18c>
   3923c:	ldr	r3, [r4, #44]	; 0x2c
   39240:	mov	r1, fp
   39244:	mov	r0, r4
   39248:	blx	r3
   3924c:	b	391f4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x18c>
   39250:	mov	r1, r7
   39254:	mov	r0, r4
   39258:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3925c:	b	391f4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x18c>
   39260:	ldrb	r3, [r4, #25]
   39264:	cmp	r3, #0
   39268:	bne	39288 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x220>
   3926c:	ldr	r3, [r4, #20]
   39270:	add	r2, r3, #1
   39274:	str	r2, [r4, #20]
   39278:	mov	r2, #93	; 0x5d
   3927c:	strb	r2, [r3]
   39280:	add	sp, sp, #12
   39284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39288:	ldr	r3, [r4, #20]
   3928c:	add	r2, r3, #1
   39290:	str	r2, [r4, #20]
   39294:	mov	r2, #10
   39298:	strb	r2, [r3]
   3929c:	ldr	r5, [r4, #32]
   392a0:	sub	r5, r5, #1
   392a4:	str	r5, [r4, #32]
   392a8:	ldrb	r3, [r4, #25]
   392ac:	mul	r5, r5, r3
   392b0:	ldr	r0, [r4, #20]
   392b4:	add	r3, r0, r5
   392b8:	ldr	r2, [r4, #16]
   392bc:	cmp	r2, r3
   392c0:	bcc	392e0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x278>
   392c4:	mov	r2, r5
   392c8:	mov	r1, #32
   392cc:	bl	145c4 <memset@plt>
   392d0:	ldr	r3, [r4, #20]
   392d4:	add	r5, r3, r5
   392d8:	str	r5, [r4, #20]
   392dc:	b	3926c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x204>
   392e0:	mov	r1, r5
   392e4:	mov	r0, r4
   392e8:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   392ec:	b	3926c <flatcc_json_printer_uint16_enum_vector_field@@Base+0x204>

000392f0 <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   392f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   392f4:	sub	sp, sp, #12
   392f8:	mov	r4, r0
   392fc:	ldr	r8, [sp, #52]	; 0x34
   39300:	ldrb	r0, [r0, #27]
   39304:	cmp	r0, #0
   39308:	bne	393ec <flatcc_json_printer_uint32_enum_vector_field@@Base+0xfc>
   3930c:	add	r2, r2, #2
   39310:	lsl	r2, r2, #1
   39314:	ldr	r0, [r1, #8]
   39318:	cmp	r0, r2
   3931c:	ble	39508 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x218>
   39320:	ldr	r0, [r1, #4]
   39324:	ldrh	r0, [r0, r2]
   39328:	cmp	r0, #0
   3932c:	beq	39508 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x218>
   39330:	ldr	r5, [r1]
   39334:	adds	ip, r5, r0
   39338:	beq	39508 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x218>
   3933c:	ldr	r2, [r1, #16]
   39340:	add	lr, r2, #1
   39344:	str	lr, [r1, #16]
   39348:	cmp	r2, #0
   3934c:	ldrne	r2, [r4, #20]
   39350:	addne	r1, r2, #1
   39354:	strne	r1, [r4, #20]
   39358:	movne	r1, #44	; 0x2c
   3935c:	strbne	r1, [r2]
   39360:	ldr	r2, [r5, r0]
   39364:	add	r6, ip, r2
   39368:	ldr	r7, [ip, r2]
   3936c:	ldr	r2, [sp, #48]	; 0x30
   39370:	mov	r1, r3
   39374:	mov	r0, r4
   39378:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3937c:	ldr	r3, [r4, #32]
   39380:	add	r3, r3, #1
   39384:	str	r3, [r4, #32]
   39388:	ldr	r3, [r4, #20]
   3938c:	add	r2, r3, #1
   39390:	str	r2, [r4, #20]
   39394:	mov	r2, #91	; 0x5b
   39398:	strb	r2, [r3]
   3939c:	cmp	r7, #0
   393a0:	beq	394e8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1f8>
   393a4:	ldrb	r3, [r4, #25]
   393a8:	cmp	r3, #0
   393ac:	bne	39400 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x110>
   393b0:	ldr	r2, [r4, #20]
   393b4:	ldr	r3, [r4, #16]
   393b8:	cmp	r2, r3
   393bc:	bcs	39420 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x130>
   393c0:	ldr	r1, [r6, #4]
   393c4:	mov	r0, r4
   393c8:	blx	r8
   393cc:	add	r6, r6, #8
   393d0:	sub	r5, r7, #2
   393d4:	cmp	r7, #1
   393d8:	beq	394e8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1f8>
   393dc:	mov	r9, #44	; 0x2c
   393e0:	mov	fp, #0
   393e4:	mov	sl, #10
   393e8:	b	39498 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1a8>
   393ec:	ldr	r0, [sp, #48]	; 0x30
   393f0:	str	r0, [sp]
   393f4:	mov	r0, r4
   393f8:	bl	3742c <flatcc_json_printer_uint32_vector_field@@Base>
   393fc:	b	39508 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x218>
   39400:	ldr	r3, [r4, #20]
   39404:	add	r2, r3, #1
   39408:	str	r2, [r4, #20]
   3940c:	mov	r2, #10
   39410:	strb	r2, [r3]
   39414:	mov	r0, r4
   39418:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3941c:	b	393c0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xd0>
   39420:	ldr	r3, [r4, #44]	; 0x2c
   39424:	mov	r1, #0
   39428:	mov	r0, r4
   3942c:	blx	r3
   39430:	b	393c0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xd0>
   39434:	ldr	r3, [r4, #20]
   39438:	add	r2, r3, #1
   3943c:	str	r2, [r4, #20]
   39440:	strb	sl, [r3]
   39444:	ldrb	r3, [r4, #25]
   39448:	ldr	r7, [r4, #32]
   3944c:	mul	r7, r7, r3
   39450:	ldr	r0, [r4, #20]
   39454:	add	r3, r0, r7
   39458:	ldr	r2, [r4, #16]
   3945c:	cmp	r2, r3
   39460:	bcc	394d8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1e8>
   39464:	mov	r2, r7
   39468:	mov	r1, #32
   3946c:	bl	145c4 <memset@plt>
   39470:	ldr	r3, [r4, #20]
   39474:	add	r7, r3, r7
   39478:	str	r7, [r4, #20]
   3947c:	ldr	r1, [r6], #4
   39480:	mov	r0, r4
   39484:	blx	r8
   39488:	sub	r3, r5, #1
   3948c:	cmp	r5, #0
   39490:	beq	394e8 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x1f8>
   39494:	mov	r5, r3
   39498:	ldr	r3, [r4, #20]
   3949c:	add	r2, r3, #1
   394a0:	str	r2, [r4, #20]
   394a4:	strb	r9, [r3]
   394a8:	ldrb	r3, [r4, #25]
   394ac:	cmp	r3, #0
   394b0:	bne	39434 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x144>
   394b4:	ldr	r2, [r4, #20]
   394b8:	ldr	r3, [r4, #16]
   394bc:	cmp	r2, r3
   394c0:	bcc	3947c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x18c>
   394c4:	ldr	r3, [r4, #44]	; 0x2c
   394c8:	mov	r1, fp
   394cc:	mov	r0, r4
   394d0:	blx	r3
   394d4:	b	3947c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x18c>
   394d8:	mov	r1, r7
   394dc:	mov	r0, r4
   394e0:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   394e4:	b	3947c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x18c>
   394e8:	ldrb	r3, [r4, #25]
   394ec:	cmp	r3, #0
   394f0:	bne	39510 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x220>
   394f4:	ldr	r3, [r4, #20]
   394f8:	add	r2, r3, #1
   394fc:	str	r2, [r4, #20]
   39500:	mov	r2, #93	; 0x5d
   39504:	strb	r2, [r3]
   39508:	add	sp, sp, #12
   3950c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39510:	ldr	r3, [r4, #20]
   39514:	add	r2, r3, #1
   39518:	str	r2, [r4, #20]
   3951c:	mov	r2, #10
   39520:	strb	r2, [r3]
   39524:	ldr	r5, [r4, #32]
   39528:	sub	r5, r5, #1
   3952c:	str	r5, [r4, #32]
   39530:	ldrb	r3, [r4, #25]
   39534:	mul	r5, r5, r3
   39538:	ldr	r0, [r4, #20]
   3953c:	add	r3, r0, r5
   39540:	ldr	r2, [r4, #16]
   39544:	cmp	r2, r3
   39548:	bcc	39568 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x278>
   3954c:	mov	r2, r5
   39550:	mov	r1, #32
   39554:	bl	145c4 <memset@plt>
   39558:	ldr	r3, [r4, #20]
   3955c:	add	r5, r3, r5
   39560:	str	r5, [r4, #20]
   39564:	b	394f4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x204>
   39568:	mov	r1, r5
   3956c:	mov	r0, r4
   39570:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   39574:	b	394f4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x204>

00039578 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   39578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3957c:	sub	sp, sp, #12
   39580:	mov	r4, r0
   39584:	ldr	r8, [sp, #52]	; 0x34
   39588:	ldrb	r0, [r0, #27]
   3958c:	cmp	r0, #0
   39590:	bne	39674 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xfc>
   39594:	add	r2, r2, #2
   39598:	lsl	r2, r2, #1
   3959c:	ldr	r0, [r1, #8]
   395a0:	cmp	r0, r2
   395a4:	ble	39790 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x218>
   395a8:	ldr	r0, [r1, #4]
   395ac:	ldrh	r0, [r0, r2]
   395b0:	cmp	r0, #0
   395b4:	beq	39790 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x218>
   395b8:	ldr	r5, [r1]
   395bc:	adds	ip, r5, r0
   395c0:	beq	39790 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x218>
   395c4:	ldr	r2, [r1, #16]
   395c8:	add	lr, r2, #1
   395cc:	str	lr, [r1, #16]
   395d0:	cmp	r2, #0
   395d4:	ldrne	r2, [r4, #20]
   395d8:	addne	r1, r2, #1
   395dc:	strne	r1, [r4, #20]
   395e0:	movne	r1, #44	; 0x2c
   395e4:	strbne	r1, [r2]
   395e8:	ldr	r2, [r5, r0]
   395ec:	add	r6, ip, r2
   395f0:	ldr	r7, [ip, r2]
   395f4:	ldr	r2, [sp, #48]	; 0x30
   395f8:	mov	r1, r3
   395fc:	mov	r0, r4
   39600:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   39604:	ldr	r3, [r4, #32]
   39608:	add	r3, r3, #1
   3960c:	str	r3, [r4, #32]
   39610:	ldr	r3, [r4, #20]
   39614:	add	r2, r3, #1
   39618:	str	r2, [r4, #20]
   3961c:	mov	r2, #91	; 0x5b
   39620:	strb	r2, [r3]
   39624:	cmp	r7, #0
   39628:	beq	39770 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1f8>
   3962c:	ldrb	r3, [r4, #25]
   39630:	cmp	r3, #0
   39634:	bne	39688 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x110>
   39638:	ldr	r2, [r4, #20]
   3963c:	ldr	r3, [r4, #16]
   39640:	cmp	r2, r3
   39644:	bcs	396a8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x130>
   39648:	ldrd	r2, [r6, #4]
   3964c:	mov	r0, r4
   39650:	blx	r8
   39654:	add	r6, r6, #12
   39658:	sub	r5, r7, #2
   3965c:	cmp	r7, #1
   39660:	beq	39770 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1f8>
   39664:	mov	r9, #44	; 0x2c
   39668:	mov	fp, #0
   3966c:	mov	sl, #10
   39670:	b	39720 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1a8>
   39674:	ldr	r0, [sp, #48]	; 0x30
   39678:	str	r0, [sp]
   3967c:	mov	r0, r4
   39680:	bl	376a0 <flatcc_json_printer_uint64_vector_field@@Base>
   39684:	b	39790 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x218>
   39688:	ldr	r3, [r4, #20]
   3968c:	add	r2, r3, #1
   39690:	str	r2, [r4, #20]
   39694:	mov	r2, #10
   39698:	strb	r2, [r3]
   3969c:	mov	r0, r4
   396a0:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   396a4:	b	39648 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xd0>
   396a8:	ldr	r3, [r4, #44]	; 0x2c
   396ac:	mov	r1, #0
   396b0:	mov	r0, r4
   396b4:	blx	r3
   396b8:	b	39648 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xd0>
   396bc:	ldr	r3, [r4, #20]
   396c0:	add	r2, r3, #1
   396c4:	str	r2, [r4, #20]
   396c8:	strb	sl, [r3]
   396cc:	ldrb	r3, [r4, #25]
   396d0:	ldr	r7, [r4, #32]
   396d4:	mul	r7, r7, r3
   396d8:	ldr	r0, [r4, #20]
   396dc:	add	r3, r0, r7
   396e0:	ldr	r2, [r4, #16]
   396e4:	cmp	r2, r3
   396e8:	bcc	39760 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1e8>
   396ec:	mov	r2, r7
   396f0:	mov	r1, #32
   396f4:	bl	145c4 <memset@plt>
   396f8:	ldr	r3, [r4, #20]
   396fc:	add	r7, r3, r7
   39700:	str	r7, [r4, #20]
   39704:	ldrd	r2, [r6], #8
   39708:	mov	r0, r4
   3970c:	blx	r8
   39710:	sub	r3, r5, #1
   39714:	cmp	r5, #0
   39718:	beq	39770 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x1f8>
   3971c:	mov	r5, r3
   39720:	ldr	r3, [r4, #20]
   39724:	add	r2, r3, #1
   39728:	str	r2, [r4, #20]
   3972c:	strb	r9, [r3]
   39730:	ldrb	r3, [r4, #25]
   39734:	cmp	r3, #0
   39738:	bne	396bc <flatcc_json_printer_uint64_enum_vector_field@@Base+0x144>
   3973c:	ldr	r2, [r4, #20]
   39740:	ldr	r3, [r4, #16]
   39744:	cmp	r2, r3
   39748:	bcc	39704 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x18c>
   3974c:	ldr	r3, [r4, #44]	; 0x2c
   39750:	mov	r1, fp
   39754:	mov	r0, r4
   39758:	blx	r3
   3975c:	b	39704 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x18c>
   39760:	mov	r1, r7
   39764:	mov	r0, r4
   39768:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3976c:	b	39704 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x18c>
   39770:	ldrb	r3, [r4, #25]
   39774:	cmp	r3, #0
   39778:	bne	39798 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x220>
   3977c:	ldr	r3, [r4, #20]
   39780:	add	r2, r3, #1
   39784:	str	r2, [r4, #20]
   39788:	mov	r2, #93	; 0x5d
   3978c:	strb	r2, [r3]
   39790:	add	sp, sp, #12
   39794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39798:	ldr	r3, [r4, #20]
   3979c:	add	r2, r3, #1
   397a0:	str	r2, [r4, #20]
   397a4:	mov	r2, #10
   397a8:	strb	r2, [r3]
   397ac:	ldr	r5, [r4, #32]
   397b0:	sub	r5, r5, #1
   397b4:	str	r5, [r4, #32]
   397b8:	ldrb	r3, [r4, #25]
   397bc:	mul	r5, r5, r3
   397c0:	ldr	r0, [r4, #20]
   397c4:	add	r3, r0, r5
   397c8:	ldr	r2, [r4, #16]
   397cc:	cmp	r2, r3
   397d0:	bcc	397f0 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x278>
   397d4:	mov	r2, r5
   397d8:	mov	r1, #32
   397dc:	bl	145c4 <memset@plt>
   397e0:	ldr	r3, [r4, #20]
   397e4:	add	r5, r3, r5
   397e8:	str	r5, [r4, #20]
   397ec:	b	3977c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x204>
   397f0:	mov	r1, r5
   397f4:	mov	r0, r4
   397f8:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   397fc:	b	3977c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x204>

00039800 <flatcc_json_printer_int8_enum_vector_field@@Base>:
   39800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39804:	sub	sp, sp, #12
   39808:	mov	r4, r0
   3980c:	ldr	r9, [sp, #52]	; 0x34
   39810:	ldrb	r0, [r0, #27]
   39814:	cmp	r0, #0
   39818:	bne	398f8 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf8>
   3981c:	add	r2, r2, #2
   39820:	lsl	r2, r2, #1
   39824:	ldr	r0, [r1, #8]
   39828:	cmp	r0, r2
   3982c:	ble	39a10 <flatcc_json_printer_int8_enum_vector_field@@Base+0x210>
   39830:	ldr	r0, [r1, #4]
   39834:	ldrh	r0, [r0, r2]
   39838:	cmp	r0, #0
   3983c:	beq	39a10 <flatcc_json_printer_int8_enum_vector_field@@Base+0x210>
   39840:	ldr	r5, [r1]
   39844:	adds	ip, r5, r0
   39848:	beq	39a10 <flatcc_json_printer_int8_enum_vector_field@@Base+0x210>
   3984c:	ldr	r2, [r1, #16]
   39850:	add	lr, r2, #1
   39854:	str	lr, [r1, #16]
   39858:	cmp	r2, #0
   3985c:	ldrne	r2, [r4, #20]
   39860:	addne	r1, r2, #1
   39864:	strne	r1, [r4, #20]
   39868:	movne	r1, #44	; 0x2c
   3986c:	strbne	r1, [r2]
   39870:	ldr	r2, [r5, r0]
   39874:	add	r8, ip, r2
   39878:	ldr	r7, [ip, r2]
   3987c:	ldr	r2, [sp, #48]	; 0x30
   39880:	mov	r1, r3
   39884:	mov	r0, r4
   39888:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3988c:	ldr	r3, [r4, #32]
   39890:	add	r3, r3, #1
   39894:	str	r3, [r4, #32]
   39898:	ldr	r3, [r4, #20]
   3989c:	add	r2, r3, #1
   398a0:	str	r2, [r4, #20]
   398a4:	mov	r2, #91	; 0x5b
   398a8:	strb	r2, [r3]
   398ac:	cmp	r7, #0
   398b0:	beq	399f0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1f0>
   398b4:	ldrb	r3, [r4, #25]
   398b8:	cmp	r3, #0
   398bc:	bne	3990c <flatcc_json_printer_int8_enum_vector_field@@Base+0x10c>
   398c0:	ldr	r2, [r4, #20]
   398c4:	ldr	r3, [r4, #16]
   398c8:	cmp	r2, r3
   398cc:	bcs	3992c <flatcc_json_printer_int8_enum_vector_field@@Base+0x12c>
   398d0:	ldrsb	r1, [r8, #4]
   398d4:	mov	r0, r4
   398d8:	blx	r9
   398dc:	add	r5, r8, #5
   398e0:	cmp	r7, #1
   398e4:	beq	399f0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1f0>
   398e8:	mov	sl, #44	; 0x2c
   398ec:	mov	fp, #10
   398f0:	add	r7, r7, #4
   398f4:	b	399a0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1a0>
   398f8:	ldr	r0, [sp, #48]	; 0x30
   398fc:	str	r0, [sp]
   39900:	mov	r0, r4
   39904:	bl	37914 <flatcc_json_printer_int8_vector_field@@Base>
   39908:	b	39a10 <flatcc_json_printer_int8_enum_vector_field@@Base+0x210>
   3990c:	ldr	r3, [r4, #20]
   39910:	add	r2, r3, #1
   39914:	str	r2, [r4, #20]
   39918:	mov	r2, #10
   3991c:	strb	r2, [r3]
   39920:	mov	r0, r4
   39924:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   39928:	b	398d0 <flatcc_json_printer_int8_enum_vector_field@@Base+0xd0>
   3992c:	ldr	r3, [r4, #44]	; 0x2c
   39930:	mov	r1, #0
   39934:	mov	r0, r4
   39938:	blx	r3
   3993c:	b	398d0 <flatcc_json_printer_int8_enum_vector_field@@Base+0xd0>
   39940:	ldr	r3, [r4, #20]
   39944:	add	r2, r3, #1
   39948:	str	r2, [r4, #20]
   3994c:	strb	fp, [r3]
   39950:	ldrb	r3, [r4, #25]
   39954:	ldr	r6, [r4, #32]
   39958:	mul	r6, r6, r3
   3995c:	ldr	r0, [r4, #20]
   39960:	add	r3, r0, r6
   39964:	ldr	r2, [r4, #16]
   39968:	cmp	r2, r3
   3996c:	bcc	399e0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1e0>
   39970:	mov	r2, r6
   39974:	mov	r1, #32
   39978:	bl	145c4 <memset@plt>
   3997c:	ldr	r3, [r4, #20]
   39980:	add	r6, r3, r6
   39984:	str	r6, [r4, #20]
   39988:	ldrsb	r1, [r5], #1
   3998c:	mov	r0, r4
   39990:	blx	r9
   39994:	sub	r3, r7, r5
   39998:	cmn	r8, r3
   3999c:	beq	399f0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x1f0>
   399a0:	ldr	r3, [r4, #20]
   399a4:	add	r2, r3, #1
   399a8:	str	r2, [r4, #20]
   399ac:	strb	sl, [r3]
   399b0:	ldrb	r3, [r4, #25]
   399b4:	cmp	r3, #0
   399b8:	bne	39940 <flatcc_json_printer_int8_enum_vector_field@@Base+0x140>
   399bc:	ldr	r2, [r4, #20]
   399c0:	ldr	r3, [r4, #16]
   399c4:	cmp	r2, r3
   399c8:	bcc	39988 <flatcc_json_printer_int8_enum_vector_field@@Base+0x188>
   399cc:	ldr	r3, [r4, #44]	; 0x2c
   399d0:	mov	r1, #0
   399d4:	mov	r0, r4
   399d8:	blx	r3
   399dc:	b	39988 <flatcc_json_printer_int8_enum_vector_field@@Base+0x188>
   399e0:	mov	r1, r6
   399e4:	mov	r0, r4
   399e8:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   399ec:	b	39988 <flatcc_json_printer_int8_enum_vector_field@@Base+0x188>
   399f0:	ldrb	r3, [r4, #25]
   399f4:	cmp	r3, #0
   399f8:	bne	39a18 <flatcc_json_printer_int8_enum_vector_field@@Base+0x218>
   399fc:	ldr	r3, [r4, #20]
   39a00:	add	r2, r3, #1
   39a04:	str	r2, [r4, #20]
   39a08:	mov	r2, #93	; 0x5d
   39a0c:	strb	r2, [r3]
   39a10:	add	sp, sp, #12
   39a14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39a18:	ldr	r3, [r4, #20]
   39a1c:	add	r2, r3, #1
   39a20:	str	r2, [r4, #20]
   39a24:	mov	r2, #10
   39a28:	strb	r2, [r3]
   39a2c:	ldr	r5, [r4, #32]
   39a30:	sub	r5, r5, #1
   39a34:	str	r5, [r4, #32]
   39a38:	ldrb	r3, [r4, #25]
   39a3c:	mul	r5, r5, r3
   39a40:	ldr	r0, [r4, #20]
   39a44:	add	r3, r0, r5
   39a48:	ldr	r2, [r4, #16]
   39a4c:	cmp	r2, r3
   39a50:	bcc	39a70 <flatcc_json_printer_int8_enum_vector_field@@Base+0x270>
   39a54:	mov	r2, r5
   39a58:	mov	r1, #32
   39a5c:	bl	145c4 <memset@plt>
   39a60:	ldr	r3, [r4, #20]
   39a64:	add	r5, r3, r5
   39a68:	str	r5, [r4, #20]
   39a6c:	b	399fc <flatcc_json_printer_int8_enum_vector_field@@Base+0x1fc>
   39a70:	mov	r1, r5
   39a74:	mov	r0, r4
   39a78:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   39a7c:	b	399fc <flatcc_json_printer_int8_enum_vector_field@@Base+0x1fc>

00039a80 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   39a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39a84:	sub	sp, sp, #12
   39a88:	mov	r4, r0
   39a8c:	ldr	r8, [sp, #52]	; 0x34
   39a90:	ldrb	r0, [r0, #27]
   39a94:	cmp	r0, #0
   39a98:	bne	39b7c <flatcc_json_printer_int16_enum_vector_field@@Base+0xfc>
   39a9c:	add	r2, r2, #2
   39aa0:	lsl	r2, r2, #1
   39aa4:	ldr	r0, [r1, #8]
   39aa8:	cmp	r0, r2
   39aac:	ble	39c98 <flatcc_json_printer_int16_enum_vector_field@@Base+0x218>
   39ab0:	ldr	r0, [r1, #4]
   39ab4:	ldrh	r0, [r0, r2]
   39ab8:	cmp	r0, #0
   39abc:	beq	39c98 <flatcc_json_printer_int16_enum_vector_field@@Base+0x218>
   39ac0:	ldr	r5, [r1]
   39ac4:	adds	ip, r5, r0
   39ac8:	beq	39c98 <flatcc_json_printer_int16_enum_vector_field@@Base+0x218>
   39acc:	ldr	r2, [r1, #16]
   39ad0:	add	lr, r2, #1
   39ad4:	str	lr, [r1, #16]
   39ad8:	cmp	r2, #0
   39adc:	ldrne	r2, [r4, #20]
   39ae0:	addne	r1, r2, #1
   39ae4:	strne	r1, [r4, #20]
   39ae8:	movne	r1, #44	; 0x2c
   39aec:	strbne	r1, [r2]
   39af0:	ldr	r2, [r5, r0]
   39af4:	add	r6, ip, r2
   39af8:	ldr	r7, [ip, r2]
   39afc:	ldr	r2, [sp, #48]	; 0x30
   39b00:	mov	r1, r3
   39b04:	mov	r0, r4
   39b08:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   39b0c:	ldr	r3, [r4, #32]
   39b10:	add	r3, r3, #1
   39b14:	str	r3, [r4, #32]
   39b18:	ldr	r3, [r4, #20]
   39b1c:	add	r2, r3, #1
   39b20:	str	r2, [r4, #20]
   39b24:	mov	r2, #91	; 0x5b
   39b28:	strb	r2, [r3]
   39b2c:	cmp	r7, #0
   39b30:	beq	39c78 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1f8>
   39b34:	ldrb	r3, [r4, #25]
   39b38:	cmp	r3, #0
   39b3c:	bne	39b90 <flatcc_json_printer_int16_enum_vector_field@@Base+0x110>
   39b40:	ldr	r2, [r4, #20]
   39b44:	ldr	r3, [r4, #16]
   39b48:	cmp	r2, r3
   39b4c:	bcs	39bb0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x130>
   39b50:	ldrsh	r1, [r6, #4]
   39b54:	mov	r0, r4
   39b58:	blx	r8
   39b5c:	add	r6, r6, #6
   39b60:	sub	r5, r7, #2
   39b64:	cmp	r7, #1
   39b68:	beq	39c78 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1f8>
   39b6c:	mov	r9, #44	; 0x2c
   39b70:	mov	fp, #0
   39b74:	mov	sl, #10
   39b78:	b	39c28 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1a8>
   39b7c:	ldr	r0, [sp, #48]	; 0x30
   39b80:	str	r0, [sp]
   39b84:	mov	r0, r4
   39b88:	bl	37b80 <flatcc_json_printer_int16_vector_field@@Base>
   39b8c:	b	39c98 <flatcc_json_printer_int16_enum_vector_field@@Base+0x218>
   39b90:	ldr	r3, [r4, #20]
   39b94:	add	r2, r3, #1
   39b98:	str	r2, [r4, #20]
   39b9c:	mov	r2, #10
   39ba0:	strb	r2, [r3]
   39ba4:	mov	r0, r4
   39ba8:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   39bac:	b	39b50 <flatcc_json_printer_int16_enum_vector_field@@Base+0xd0>
   39bb0:	ldr	r3, [r4, #44]	; 0x2c
   39bb4:	mov	r1, #0
   39bb8:	mov	r0, r4
   39bbc:	blx	r3
   39bc0:	b	39b50 <flatcc_json_printer_int16_enum_vector_field@@Base+0xd0>
   39bc4:	ldr	r3, [r4, #20]
   39bc8:	add	r2, r3, #1
   39bcc:	str	r2, [r4, #20]
   39bd0:	strb	sl, [r3]
   39bd4:	ldrb	r3, [r4, #25]
   39bd8:	ldr	r7, [r4, #32]
   39bdc:	mul	r7, r7, r3
   39be0:	ldr	r0, [r4, #20]
   39be4:	add	r3, r0, r7
   39be8:	ldr	r2, [r4, #16]
   39bec:	cmp	r2, r3
   39bf0:	bcc	39c68 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1e8>
   39bf4:	mov	r2, r7
   39bf8:	mov	r1, #32
   39bfc:	bl	145c4 <memset@plt>
   39c00:	ldr	r3, [r4, #20]
   39c04:	add	r7, r3, r7
   39c08:	str	r7, [r4, #20]
   39c0c:	ldrsh	r1, [r6], #2
   39c10:	mov	r0, r4
   39c14:	blx	r8
   39c18:	sub	r3, r5, #1
   39c1c:	cmp	r5, #0
   39c20:	beq	39c78 <flatcc_json_printer_int16_enum_vector_field@@Base+0x1f8>
   39c24:	mov	r5, r3
   39c28:	ldr	r3, [r4, #20]
   39c2c:	add	r2, r3, #1
   39c30:	str	r2, [r4, #20]
   39c34:	strb	r9, [r3]
   39c38:	ldrb	r3, [r4, #25]
   39c3c:	cmp	r3, #0
   39c40:	bne	39bc4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x144>
   39c44:	ldr	r2, [r4, #20]
   39c48:	ldr	r3, [r4, #16]
   39c4c:	cmp	r2, r3
   39c50:	bcc	39c0c <flatcc_json_printer_int16_enum_vector_field@@Base+0x18c>
   39c54:	ldr	r3, [r4, #44]	; 0x2c
   39c58:	mov	r1, fp
   39c5c:	mov	r0, r4
   39c60:	blx	r3
   39c64:	b	39c0c <flatcc_json_printer_int16_enum_vector_field@@Base+0x18c>
   39c68:	mov	r1, r7
   39c6c:	mov	r0, r4
   39c70:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   39c74:	b	39c0c <flatcc_json_printer_int16_enum_vector_field@@Base+0x18c>
   39c78:	ldrb	r3, [r4, #25]
   39c7c:	cmp	r3, #0
   39c80:	bne	39ca0 <flatcc_json_printer_int16_enum_vector_field@@Base+0x220>
   39c84:	ldr	r3, [r4, #20]
   39c88:	add	r2, r3, #1
   39c8c:	str	r2, [r4, #20]
   39c90:	mov	r2, #93	; 0x5d
   39c94:	strb	r2, [r3]
   39c98:	add	sp, sp, #12
   39c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39ca0:	ldr	r3, [r4, #20]
   39ca4:	add	r2, r3, #1
   39ca8:	str	r2, [r4, #20]
   39cac:	mov	r2, #10
   39cb0:	strb	r2, [r3]
   39cb4:	ldr	r5, [r4, #32]
   39cb8:	sub	r5, r5, #1
   39cbc:	str	r5, [r4, #32]
   39cc0:	ldrb	r3, [r4, #25]
   39cc4:	mul	r5, r5, r3
   39cc8:	ldr	r0, [r4, #20]
   39ccc:	add	r3, r0, r5
   39cd0:	ldr	r2, [r4, #16]
   39cd4:	cmp	r2, r3
   39cd8:	bcc	39cf8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x278>
   39cdc:	mov	r2, r5
   39ce0:	mov	r1, #32
   39ce4:	bl	145c4 <memset@plt>
   39ce8:	ldr	r3, [r4, #20]
   39cec:	add	r5, r3, r5
   39cf0:	str	r5, [r4, #20]
   39cf4:	b	39c84 <flatcc_json_printer_int16_enum_vector_field@@Base+0x204>
   39cf8:	mov	r1, r5
   39cfc:	mov	r0, r4
   39d00:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   39d04:	b	39c84 <flatcc_json_printer_int16_enum_vector_field@@Base+0x204>

00039d08 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   39d08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39d0c:	sub	sp, sp, #12
   39d10:	mov	r4, r0
   39d14:	ldr	r8, [sp, #52]	; 0x34
   39d18:	ldrb	r0, [r0, #27]
   39d1c:	cmp	r0, #0
   39d20:	bne	39e04 <flatcc_json_printer_int32_enum_vector_field@@Base+0xfc>
   39d24:	add	r2, r2, #2
   39d28:	lsl	r2, r2, #1
   39d2c:	ldr	r0, [r1, #8]
   39d30:	cmp	r0, r2
   39d34:	ble	39f20 <flatcc_json_printer_int32_enum_vector_field@@Base+0x218>
   39d38:	ldr	r0, [r1, #4]
   39d3c:	ldrh	r0, [r0, r2]
   39d40:	cmp	r0, #0
   39d44:	beq	39f20 <flatcc_json_printer_int32_enum_vector_field@@Base+0x218>
   39d48:	ldr	r5, [r1]
   39d4c:	adds	ip, r5, r0
   39d50:	beq	39f20 <flatcc_json_printer_int32_enum_vector_field@@Base+0x218>
   39d54:	ldr	r2, [r1, #16]
   39d58:	add	lr, r2, #1
   39d5c:	str	lr, [r1, #16]
   39d60:	cmp	r2, #0
   39d64:	ldrne	r2, [r4, #20]
   39d68:	addne	r1, r2, #1
   39d6c:	strne	r1, [r4, #20]
   39d70:	movne	r1, #44	; 0x2c
   39d74:	strbne	r1, [r2]
   39d78:	ldr	r2, [r5, r0]
   39d7c:	add	r6, ip, r2
   39d80:	ldr	r7, [ip, r2]
   39d84:	ldr	r2, [sp, #48]	; 0x30
   39d88:	mov	r1, r3
   39d8c:	mov	r0, r4
   39d90:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   39d94:	ldr	r3, [r4, #32]
   39d98:	add	r3, r3, #1
   39d9c:	str	r3, [r4, #32]
   39da0:	ldr	r3, [r4, #20]
   39da4:	add	r2, r3, #1
   39da8:	str	r2, [r4, #20]
   39dac:	mov	r2, #91	; 0x5b
   39db0:	strb	r2, [r3]
   39db4:	cmp	r7, #0
   39db8:	beq	39f00 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1f8>
   39dbc:	ldrb	r3, [r4, #25]
   39dc0:	cmp	r3, #0
   39dc4:	bne	39e18 <flatcc_json_printer_int32_enum_vector_field@@Base+0x110>
   39dc8:	ldr	r2, [r4, #20]
   39dcc:	ldr	r3, [r4, #16]
   39dd0:	cmp	r2, r3
   39dd4:	bcs	39e38 <flatcc_json_printer_int32_enum_vector_field@@Base+0x130>
   39dd8:	ldr	r1, [r6, #4]
   39ddc:	mov	r0, r4
   39de0:	blx	r8
   39de4:	add	r6, r6, #8
   39de8:	sub	r5, r7, #2
   39dec:	cmp	r7, #1
   39df0:	beq	39f00 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1f8>
   39df4:	mov	r9, #44	; 0x2c
   39df8:	mov	fp, #0
   39dfc:	mov	sl, #10
   39e00:	b	39eb0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1a8>
   39e04:	ldr	r0, [sp, #48]	; 0x30
   39e08:	str	r0, [sp]
   39e0c:	mov	r0, r4
   39e10:	bl	37df4 <flatcc_json_printer_int32_vector_field@@Base>
   39e14:	b	39f20 <flatcc_json_printer_int32_enum_vector_field@@Base+0x218>
   39e18:	ldr	r3, [r4, #20]
   39e1c:	add	r2, r3, #1
   39e20:	str	r2, [r4, #20]
   39e24:	mov	r2, #10
   39e28:	strb	r2, [r3]
   39e2c:	mov	r0, r4
   39e30:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   39e34:	b	39dd8 <flatcc_json_printer_int32_enum_vector_field@@Base+0xd0>
   39e38:	ldr	r3, [r4, #44]	; 0x2c
   39e3c:	mov	r1, #0
   39e40:	mov	r0, r4
   39e44:	blx	r3
   39e48:	b	39dd8 <flatcc_json_printer_int32_enum_vector_field@@Base+0xd0>
   39e4c:	ldr	r3, [r4, #20]
   39e50:	add	r2, r3, #1
   39e54:	str	r2, [r4, #20]
   39e58:	strb	sl, [r3]
   39e5c:	ldrb	r3, [r4, #25]
   39e60:	ldr	r7, [r4, #32]
   39e64:	mul	r7, r7, r3
   39e68:	ldr	r0, [r4, #20]
   39e6c:	add	r3, r0, r7
   39e70:	ldr	r2, [r4, #16]
   39e74:	cmp	r2, r3
   39e78:	bcc	39ef0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1e8>
   39e7c:	mov	r2, r7
   39e80:	mov	r1, #32
   39e84:	bl	145c4 <memset@plt>
   39e88:	ldr	r3, [r4, #20]
   39e8c:	add	r7, r3, r7
   39e90:	str	r7, [r4, #20]
   39e94:	ldr	r1, [r6], #4
   39e98:	mov	r0, r4
   39e9c:	blx	r8
   39ea0:	sub	r3, r5, #1
   39ea4:	cmp	r5, #0
   39ea8:	beq	39f00 <flatcc_json_printer_int32_enum_vector_field@@Base+0x1f8>
   39eac:	mov	r5, r3
   39eb0:	ldr	r3, [r4, #20]
   39eb4:	add	r2, r3, #1
   39eb8:	str	r2, [r4, #20]
   39ebc:	strb	r9, [r3]
   39ec0:	ldrb	r3, [r4, #25]
   39ec4:	cmp	r3, #0
   39ec8:	bne	39e4c <flatcc_json_printer_int32_enum_vector_field@@Base+0x144>
   39ecc:	ldr	r2, [r4, #20]
   39ed0:	ldr	r3, [r4, #16]
   39ed4:	cmp	r2, r3
   39ed8:	bcc	39e94 <flatcc_json_printer_int32_enum_vector_field@@Base+0x18c>
   39edc:	ldr	r3, [r4, #44]	; 0x2c
   39ee0:	mov	r1, fp
   39ee4:	mov	r0, r4
   39ee8:	blx	r3
   39eec:	b	39e94 <flatcc_json_printer_int32_enum_vector_field@@Base+0x18c>
   39ef0:	mov	r1, r7
   39ef4:	mov	r0, r4
   39ef8:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   39efc:	b	39e94 <flatcc_json_printer_int32_enum_vector_field@@Base+0x18c>
   39f00:	ldrb	r3, [r4, #25]
   39f04:	cmp	r3, #0
   39f08:	bne	39f28 <flatcc_json_printer_int32_enum_vector_field@@Base+0x220>
   39f0c:	ldr	r3, [r4, #20]
   39f10:	add	r2, r3, #1
   39f14:	str	r2, [r4, #20]
   39f18:	mov	r2, #93	; 0x5d
   39f1c:	strb	r2, [r3]
   39f20:	add	sp, sp, #12
   39f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39f28:	ldr	r3, [r4, #20]
   39f2c:	add	r2, r3, #1
   39f30:	str	r2, [r4, #20]
   39f34:	mov	r2, #10
   39f38:	strb	r2, [r3]
   39f3c:	ldr	r5, [r4, #32]
   39f40:	sub	r5, r5, #1
   39f44:	str	r5, [r4, #32]
   39f48:	ldrb	r3, [r4, #25]
   39f4c:	mul	r5, r5, r3
   39f50:	ldr	r0, [r4, #20]
   39f54:	add	r3, r0, r5
   39f58:	ldr	r2, [r4, #16]
   39f5c:	cmp	r2, r3
   39f60:	bcc	39f80 <flatcc_json_printer_int32_enum_vector_field@@Base+0x278>
   39f64:	mov	r2, r5
   39f68:	mov	r1, #32
   39f6c:	bl	145c4 <memset@plt>
   39f70:	ldr	r3, [r4, #20]
   39f74:	add	r5, r3, r5
   39f78:	str	r5, [r4, #20]
   39f7c:	b	39f0c <flatcc_json_printer_int32_enum_vector_field@@Base+0x204>
   39f80:	mov	r1, r5
   39f84:	mov	r0, r4
   39f88:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   39f8c:	b	39f0c <flatcc_json_printer_int32_enum_vector_field@@Base+0x204>

00039f90 <flatcc_json_printer_int64_enum_vector_field@@Base>:
   39f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39f94:	sub	sp, sp, #12
   39f98:	mov	r4, r0
   39f9c:	ldr	r8, [sp, #52]	; 0x34
   39fa0:	ldrb	r0, [r0, #27]
   39fa4:	cmp	r0, #0
   39fa8:	bne	3a08c <flatcc_json_printer_int64_enum_vector_field@@Base+0xfc>
   39fac:	add	r2, r2, #2
   39fb0:	lsl	r2, r2, #1
   39fb4:	ldr	r0, [r1, #8]
   39fb8:	cmp	r0, r2
   39fbc:	ble	3a1a8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x218>
   39fc0:	ldr	r0, [r1, #4]
   39fc4:	ldrh	r0, [r0, r2]
   39fc8:	cmp	r0, #0
   39fcc:	beq	3a1a8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x218>
   39fd0:	ldr	r5, [r1]
   39fd4:	adds	ip, r5, r0
   39fd8:	beq	3a1a8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x218>
   39fdc:	ldr	r2, [r1, #16]
   39fe0:	add	lr, r2, #1
   39fe4:	str	lr, [r1, #16]
   39fe8:	cmp	r2, #0
   39fec:	ldrne	r2, [r4, #20]
   39ff0:	addne	r1, r2, #1
   39ff4:	strne	r1, [r4, #20]
   39ff8:	movne	r1, #44	; 0x2c
   39ffc:	strbne	r1, [r2]
   3a000:	ldr	r2, [r5, r0]
   3a004:	add	r6, ip, r2
   3a008:	ldr	r7, [ip, r2]
   3a00c:	ldr	r2, [sp, #48]	; 0x30
   3a010:	mov	r1, r3
   3a014:	mov	r0, r4
   3a018:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3a01c:	ldr	r3, [r4, #32]
   3a020:	add	r3, r3, #1
   3a024:	str	r3, [r4, #32]
   3a028:	ldr	r3, [r4, #20]
   3a02c:	add	r2, r3, #1
   3a030:	str	r2, [r4, #20]
   3a034:	mov	r2, #91	; 0x5b
   3a038:	strb	r2, [r3]
   3a03c:	cmp	r7, #0
   3a040:	beq	3a188 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1f8>
   3a044:	ldrb	r3, [r4, #25]
   3a048:	cmp	r3, #0
   3a04c:	bne	3a0a0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x110>
   3a050:	ldr	r2, [r4, #20]
   3a054:	ldr	r3, [r4, #16]
   3a058:	cmp	r2, r3
   3a05c:	bcs	3a0c0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x130>
   3a060:	ldrd	r2, [r6, #4]
   3a064:	mov	r0, r4
   3a068:	blx	r8
   3a06c:	add	r6, r6, #12
   3a070:	sub	r5, r7, #2
   3a074:	cmp	r7, #1
   3a078:	beq	3a188 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1f8>
   3a07c:	mov	r9, #44	; 0x2c
   3a080:	mov	fp, #0
   3a084:	mov	sl, #10
   3a088:	b	3a138 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1a8>
   3a08c:	ldr	r0, [sp, #48]	; 0x30
   3a090:	str	r0, [sp]
   3a094:	mov	r0, r4
   3a098:	bl	38198 <flatcc_json_printer_int64_vector_field@@Base>
   3a09c:	b	3a1a8 <flatcc_json_printer_int64_enum_vector_field@@Base+0x218>
   3a0a0:	ldr	r3, [r4, #20]
   3a0a4:	add	r2, r3, #1
   3a0a8:	str	r2, [r4, #20]
   3a0ac:	mov	r2, #10
   3a0b0:	strb	r2, [r3]
   3a0b4:	mov	r0, r4
   3a0b8:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3a0bc:	b	3a060 <flatcc_json_printer_int64_enum_vector_field@@Base+0xd0>
   3a0c0:	ldr	r3, [r4, #44]	; 0x2c
   3a0c4:	mov	r1, #0
   3a0c8:	mov	r0, r4
   3a0cc:	blx	r3
   3a0d0:	b	3a060 <flatcc_json_printer_int64_enum_vector_field@@Base+0xd0>
   3a0d4:	ldr	r3, [r4, #20]
   3a0d8:	add	r2, r3, #1
   3a0dc:	str	r2, [r4, #20]
   3a0e0:	strb	sl, [r3]
   3a0e4:	ldrb	r3, [r4, #25]
   3a0e8:	ldr	r7, [r4, #32]
   3a0ec:	mul	r7, r7, r3
   3a0f0:	ldr	r0, [r4, #20]
   3a0f4:	add	r3, r0, r7
   3a0f8:	ldr	r2, [r4, #16]
   3a0fc:	cmp	r2, r3
   3a100:	bcc	3a178 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1e8>
   3a104:	mov	r2, r7
   3a108:	mov	r1, #32
   3a10c:	bl	145c4 <memset@plt>
   3a110:	ldr	r3, [r4, #20]
   3a114:	add	r7, r3, r7
   3a118:	str	r7, [r4, #20]
   3a11c:	ldrd	r2, [r6], #8
   3a120:	mov	r0, r4
   3a124:	blx	r8
   3a128:	sub	r3, r5, #1
   3a12c:	cmp	r5, #0
   3a130:	beq	3a188 <flatcc_json_printer_int64_enum_vector_field@@Base+0x1f8>
   3a134:	mov	r5, r3
   3a138:	ldr	r3, [r4, #20]
   3a13c:	add	r2, r3, #1
   3a140:	str	r2, [r4, #20]
   3a144:	strb	r9, [r3]
   3a148:	ldrb	r3, [r4, #25]
   3a14c:	cmp	r3, #0
   3a150:	bne	3a0d4 <flatcc_json_printer_int64_enum_vector_field@@Base+0x144>
   3a154:	ldr	r2, [r4, #20]
   3a158:	ldr	r3, [r4, #16]
   3a15c:	cmp	r2, r3
   3a160:	bcc	3a11c <flatcc_json_printer_int64_enum_vector_field@@Base+0x18c>
   3a164:	ldr	r3, [r4, #44]	; 0x2c
   3a168:	mov	r1, fp
   3a16c:	mov	r0, r4
   3a170:	blx	r3
   3a174:	b	3a11c <flatcc_json_printer_int64_enum_vector_field@@Base+0x18c>
   3a178:	mov	r1, r7
   3a17c:	mov	r0, r4
   3a180:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3a184:	b	3a11c <flatcc_json_printer_int64_enum_vector_field@@Base+0x18c>
   3a188:	ldrb	r3, [r4, #25]
   3a18c:	cmp	r3, #0
   3a190:	bne	3a1b0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x220>
   3a194:	ldr	r3, [r4, #20]
   3a198:	add	r2, r3, #1
   3a19c:	str	r2, [r4, #20]
   3a1a0:	mov	r2, #93	; 0x5d
   3a1a4:	strb	r2, [r3]
   3a1a8:	add	sp, sp, #12
   3a1ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a1b0:	ldr	r3, [r4, #20]
   3a1b4:	add	r2, r3, #1
   3a1b8:	str	r2, [r4, #20]
   3a1bc:	mov	r2, #10
   3a1c0:	strb	r2, [r3]
   3a1c4:	ldr	r5, [r4, #32]
   3a1c8:	sub	r5, r5, #1
   3a1cc:	str	r5, [r4, #32]
   3a1d0:	ldrb	r3, [r4, #25]
   3a1d4:	mul	r5, r5, r3
   3a1d8:	ldr	r0, [r4, #20]
   3a1dc:	add	r3, r0, r5
   3a1e0:	ldr	r2, [r4, #16]
   3a1e4:	cmp	r2, r3
   3a1e8:	bcc	3a208 <flatcc_json_printer_int64_enum_vector_field@@Base+0x278>
   3a1ec:	mov	r2, r5
   3a1f0:	mov	r1, #32
   3a1f4:	bl	145c4 <memset@plt>
   3a1f8:	ldr	r3, [r4, #20]
   3a1fc:	add	r5, r3, r5
   3a200:	str	r5, [r4, #20]
   3a204:	b	3a194 <flatcc_json_printer_int64_enum_vector_field@@Base+0x204>
   3a208:	mov	r1, r5
   3a20c:	mov	r0, r4
   3a210:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3a214:	b	3a194 <flatcc_json_printer_int64_enum_vector_field@@Base+0x204>

0003a218 <flatcc_json_printer_bool_enum_vector_field@@Base>:
   3a218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a21c:	sub	sp, sp, #12
   3a220:	mov	r4, r0
   3a224:	ldr	r9, [sp, #52]	; 0x34
   3a228:	ldrb	r0, [r0, #27]
   3a22c:	cmp	r0, #0
   3a230:	bne	3a310 <flatcc_json_printer_bool_enum_vector_field@@Base+0xf8>
   3a234:	add	r2, r2, #2
   3a238:	lsl	r2, r2, #1
   3a23c:	ldr	r0, [r1, #8]
   3a240:	cmp	r0, r2
   3a244:	ble	3a428 <flatcc_json_printer_bool_enum_vector_field@@Base+0x210>
   3a248:	ldr	r0, [r1, #4]
   3a24c:	ldrh	r0, [r0, r2]
   3a250:	cmp	r0, #0
   3a254:	beq	3a428 <flatcc_json_printer_bool_enum_vector_field@@Base+0x210>
   3a258:	ldr	r5, [r1]
   3a25c:	adds	ip, r5, r0
   3a260:	beq	3a428 <flatcc_json_printer_bool_enum_vector_field@@Base+0x210>
   3a264:	ldr	r2, [r1, #16]
   3a268:	add	lr, r2, #1
   3a26c:	str	lr, [r1, #16]
   3a270:	cmp	r2, #0
   3a274:	ldrne	r2, [r4, #20]
   3a278:	addne	r1, r2, #1
   3a27c:	strne	r1, [r4, #20]
   3a280:	movne	r1, #44	; 0x2c
   3a284:	strbne	r1, [r2]
   3a288:	ldr	r2, [r5, r0]
   3a28c:	add	r8, ip, r2
   3a290:	ldr	r7, [ip, r2]
   3a294:	ldr	r2, [sp, #48]	; 0x30
   3a298:	mov	r1, r3
   3a29c:	mov	r0, r4
   3a2a0:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3a2a4:	ldr	r3, [r4, #32]
   3a2a8:	add	r3, r3, #1
   3a2ac:	str	r3, [r4, #32]
   3a2b0:	ldr	r3, [r4, #20]
   3a2b4:	add	r2, r3, #1
   3a2b8:	str	r2, [r4, #20]
   3a2bc:	mov	r2, #91	; 0x5b
   3a2c0:	strb	r2, [r3]
   3a2c4:	cmp	r7, #0
   3a2c8:	beq	3a408 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1f0>
   3a2cc:	ldrb	r3, [r4, #25]
   3a2d0:	cmp	r3, #0
   3a2d4:	bne	3a324 <flatcc_json_printer_bool_enum_vector_field@@Base+0x10c>
   3a2d8:	ldr	r2, [r4, #20]
   3a2dc:	ldr	r3, [r4, #16]
   3a2e0:	cmp	r2, r3
   3a2e4:	bcs	3a344 <flatcc_json_printer_bool_enum_vector_field@@Base+0x12c>
   3a2e8:	ldrb	r1, [r8, #4]
   3a2ec:	mov	r0, r4
   3a2f0:	blx	r9
   3a2f4:	add	r5, r8, #5
   3a2f8:	cmp	r7, #1
   3a2fc:	beq	3a408 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1f0>
   3a300:	mov	sl, #44	; 0x2c
   3a304:	mov	fp, #10
   3a308:	add	r7, r7, #4
   3a30c:	b	3a3b8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1a0>
   3a310:	ldr	r0, [sp, #48]	; 0x30
   3a314:	str	r0, [sp]
   3a318:	mov	r0, r4
   3a31c:	bl	3840c <flatcc_json_printer_bool_vector_field@@Base>
   3a320:	b	3a428 <flatcc_json_printer_bool_enum_vector_field@@Base+0x210>
   3a324:	ldr	r3, [r4, #20]
   3a328:	add	r2, r3, #1
   3a32c:	str	r2, [r4, #20]
   3a330:	mov	r2, #10
   3a334:	strb	r2, [r3]
   3a338:	mov	r0, r4
   3a33c:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3a340:	b	3a2e8 <flatcc_json_printer_bool_enum_vector_field@@Base+0xd0>
   3a344:	ldr	r3, [r4, #44]	; 0x2c
   3a348:	mov	r1, #0
   3a34c:	mov	r0, r4
   3a350:	blx	r3
   3a354:	b	3a2e8 <flatcc_json_printer_bool_enum_vector_field@@Base+0xd0>
   3a358:	ldr	r3, [r4, #20]
   3a35c:	add	r2, r3, #1
   3a360:	str	r2, [r4, #20]
   3a364:	strb	fp, [r3]
   3a368:	ldrb	r3, [r4, #25]
   3a36c:	ldr	r6, [r4, #32]
   3a370:	mul	r6, r6, r3
   3a374:	ldr	r0, [r4, #20]
   3a378:	add	r3, r0, r6
   3a37c:	ldr	r2, [r4, #16]
   3a380:	cmp	r2, r3
   3a384:	bcc	3a3f8 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1e0>
   3a388:	mov	r2, r6
   3a38c:	mov	r1, #32
   3a390:	bl	145c4 <memset@plt>
   3a394:	ldr	r3, [r4, #20]
   3a398:	add	r6, r3, r6
   3a39c:	str	r6, [r4, #20]
   3a3a0:	ldrb	r1, [r5], #1
   3a3a4:	mov	r0, r4
   3a3a8:	blx	r9
   3a3ac:	sub	r3, r7, r5
   3a3b0:	cmn	r8, r3
   3a3b4:	beq	3a408 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1f0>
   3a3b8:	ldr	r3, [r4, #20]
   3a3bc:	add	r2, r3, #1
   3a3c0:	str	r2, [r4, #20]
   3a3c4:	strb	sl, [r3]
   3a3c8:	ldrb	r3, [r4, #25]
   3a3cc:	cmp	r3, #0
   3a3d0:	bne	3a358 <flatcc_json_printer_bool_enum_vector_field@@Base+0x140>
   3a3d4:	ldr	r2, [r4, #20]
   3a3d8:	ldr	r3, [r4, #16]
   3a3dc:	cmp	r2, r3
   3a3e0:	bcc	3a3a0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x188>
   3a3e4:	ldr	r3, [r4, #44]	; 0x2c
   3a3e8:	mov	r1, #0
   3a3ec:	mov	r0, r4
   3a3f0:	blx	r3
   3a3f4:	b	3a3a0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x188>
   3a3f8:	mov	r1, r6
   3a3fc:	mov	r0, r4
   3a400:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3a404:	b	3a3a0 <flatcc_json_printer_bool_enum_vector_field@@Base+0x188>
   3a408:	ldrb	r3, [r4, #25]
   3a40c:	cmp	r3, #0
   3a410:	bne	3a430 <flatcc_json_printer_bool_enum_vector_field@@Base+0x218>
   3a414:	ldr	r3, [r4, #20]
   3a418:	add	r2, r3, #1
   3a41c:	str	r2, [r4, #20]
   3a420:	mov	r2, #93	; 0x5d
   3a424:	strb	r2, [r3]
   3a428:	add	sp, sp, #12
   3a42c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a430:	ldr	r3, [r4, #20]
   3a434:	add	r2, r3, #1
   3a438:	str	r2, [r4, #20]
   3a43c:	mov	r2, #10
   3a440:	strb	r2, [r3]
   3a444:	ldr	r5, [r4, #32]
   3a448:	sub	r5, r5, #1
   3a44c:	str	r5, [r4, #32]
   3a450:	ldrb	r3, [r4, #25]
   3a454:	mul	r5, r5, r3
   3a458:	ldr	r0, [r4, #20]
   3a45c:	add	r3, r0, r5
   3a460:	ldr	r2, [r4, #16]
   3a464:	cmp	r2, r3
   3a468:	bcc	3a488 <flatcc_json_printer_bool_enum_vector_field@@Base+0x270>
   3a46c:	mov	r2, r5
   3a470:	mov	r1, #32
   3a474:	bl	145c4 <memset@plt>
   3a478:	ldr	r3, [r4, #20]
   3a47c:	add	r5, r3, r5
   3a480:	str	r5, [r4, #20]
   3a484:	b	3a414 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1fc>
   3a488:	mov	r1, r5
   3a48c:	mov	r0, r4
   3a490:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3a494:	b	3a414 <flatcc_json_printer_bool_enum_vector_field@@Base+0x1fc>

0003a498 <flatcc_json_printer_struct_vector_field@@Base>:
   3a498:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a49c:	ldr	r8, [sp, #48]	; 0x30
   3a4a0:	add	r2, r2, #2
   3a4a4:	lsl	r2, r2, #1
   3a4a8:	ldr	ip, [r1, #8]
   3a4ac:	cmp	r2, ip
   3a4b0:	popge	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a4b4:	ldr	ip, [r1, #4]
   3a4b8:	ldrh	ip, [ip, r2]
   3a4bc:	cmp	ip, #0
   3a4c0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a4c4:	ldr	r5, [r1]
   3a4c8:	adds	lr, r5, ip
   3a4cc:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a4d0:	ldr	r2, [r1, #16]
   3a4d4:	add	r4, r2, #1
   3a4d8:	str	r4, [r1, #16]
   3a4dc:	cmp	r2, #0
   3a4e0:	ldrne	r2, [r0, #20]
   3a4e4:	addne	r1, r2, #1
   3a4e8:	strne	r1, [r0, #20]
   3a4ec:	movne	r1, #44	; 0x2c
   3a4f0:	strbne	r1, [r2]
   3a4f4:	mov	r1, r3
   3a4f8:	mov	r4, r0
   3a4fc:	ldr	r3, [r5, ip]
   3a500:	add	r6, lr, r3
   3a504:	ldr	r5, [lr, r3]
   3a508:	ldr	r2, [sp, #40]	; 0x28
   3a50c:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3a510:	ldr	r3, [r4, #32]
   3a514:	add	r3, r3, #1
   3a518:	str	r3, [r4, #32]
   3a51c:	ldr	r3, [r4, #20]
   3a520:	add	r2, r3, #1
   3a524:	str	r2, [r4, #20]
   3a528:	mov	r2, #91	; 0x5b
   3a52c:	strb	r2, [r3]
   3a530:	cmp	r5, #0
   3a534:	beq	3a780 <flatcc_json_printer_struct_vector_field@@Base+0x2e8>
   3a538:	ldrb	r3, [r4, #25]
   3a53c:	cmp	r3, #0
   3a540:	bne	3a5c0 <flatcc_json_printer_struct_vector_field@@Base+0x128>
   3a544:	ldr	r2, [r4, #20]
   3a548:	ldr	r3, [r4, #16]
   3a54c:	cmp	r2, r3
   3a550:	bcs	3a5e0 <flatcc_json_printer_struct_vector_field@@Base+0x148>
   3a554:	add	r6, r6, #4
   3a558:	ldr	r3, [r4, #32]
   3a55c:	add	r3, r3, #1
   3a560:	str	r3, [r4, #32]
   3a564:	ldr	r3, [r4, #20]
   3a568:	add	r2, r3, #1
   3a56c:	str	r2, [r4, #20]
   3a570:	mov	r2, #123	; 0x7b
   3a574:	strb	r2, [r3]
   3a578:	mov	r1, r6
   3a57c:	mov	r0, r4
   3a580:	blx	r8
   3a584:	ldrb	r3, [r4, #25]
   3a588:	cmp	r3, #0
   3a58c:	bne	3a5f4 <flatcc_json_printer_struct_vector_field@@Base+0x15c>
   3a590:	ldr	r3, [r4, #20]
   3a594:	add	r2, r3, #1
   3a598:	str	r2, [r4, #20]
   3a59c:	mov	r2, #125	; 0x7d
   3a5a0:	strb	r2, [r3]
   3a5a4:	sub	r7, r5, #2
   3a5a8:	cmp	r5, #1
   3a5ac:	beq	3a780 <flatcc_json_printer_struct_vector_field@@Base+0x2e8>
   3a5b0:	mov	fp, #44	; 0x2c
   3a5b4:	mov	sl, #123	; 0x7b
   3a5b8:	mov	r9, r2
   3a5bc:	b	3a6c0 <flatcc_json_printer_struct_vector_field@@Base+0x228>
   3a5c0:	ldr	r3, [r4, #20]
   3a5c4:	add	r2, r3, #1
   3a5c8:	str	r2, [r4, #20]
   3a5cc:	mov	r2, #10
   3a5d0:	strb	r2, [r3]
   3a5d4:	mov	r0, r4
   3a5d8:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3a5dc:	b	3a554 <flatcc_json_printer_struct_vector_field@@Base+0xbc>
   3a5e0:	ldr	r3, [r4, #44]	; 0x2c
   3a5e4:	mov	r1, #0
   3a5e8:	mov	r0, r4
   3a5ec:	blx	r3
   3a5f0:	b	3a554 <flatcc_json_printer_struct_vector_field@@Base+0xbc>
   3a5f4:	ldr	r3, [r4, #20]
   3a5f8:	add	r2, r3, #1
   3a5fc:	str	r2, [r4, #20]
   3a600:	mov	r2, #10
   3a604:	strb	r2, [r3]
   3a608:	ldr	r3, [r4, #32]
   3a60c:	sub	r3, r3, #1
   3a610:	str	r3, [r4, #32]
   3a614:	mov	r0, r4
   3a618:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3a61c:	b	3a590 <flatcc_json_printer_struct_vector_field@@Base+0xf8>
   3a620:	ldr	r3, [r4, #20]
   3a624:	add	r2, r3, #1
   3a628:	str	r2, [r4, #20]
   3a62c:	mov	r2, #10
   3a630:	strb	r2, [r3]
   3a634:	ldrb	r3, [r4, #25]
   3a638:	ldr	r5, [r4, #32]
   3a63c:	mul	r5, r5, r3
   3a640:	ldr	r0, [r4, #20]
   3a644:	add	r3, r0, r5
   3a648:	ldr	r2, [r4, #16]
   3a64c:	cmp	r2, r3
   3a650:	bcc	3a708 <flatcc_json_printer_struct_vector_field@@Base+0x270>
   3a654:	mov	r2, r5
   3a658:	mov	r1, #32
   3a65c:	bl	145c4 <memset@plt>
   3a660:	ldr	r3, [r4, #20]
   3a664:	add	r5, r3, r5
   3a668:	str	r5, [r4, #20]
   3a66c:	ldr	r3, [r4, #32]
   3a670:	add	r3, r3, #1
   3a674:	str	r3, [r4, #32]
   3a678:	ldr	r3, [r4, #20]
   3a67c:	add	r2, r3, #1
   3a680:	str	r2, [r4, #20]
   3a684:	strb	sl, [r3]
   3a688:	mov	r1, r6
   3a68c:	mov	r0, r4
   3a690:	blx	r8
   3a694:	ldrb	r3, [r4, #25]
   3a698:	cmp	r3, #0
   3a69c:	bne	3a718 <flatcc_json_printer_struct_vector_field@@Base+0x280>
   3a6a0:	ldr	r3, [r4, #20]
   3a6a4:	add	r2, r3, #1
   3a6a8:	str	r2, [r4, #20]
   3a6ac:	strb	r9, [r3]
   3a6b0:	sub	r3, r7, #1
   3a6b4:	cmp	r7, #0
   3a6b8:	beq	3a780 <flatcc_json_printer_struct_vector_field@@Base+0x2e8>
   3a6bc:	mov	r7, r3
   3a6c0:	ldr	r3, [sp, #44]	; 0x2c
   3a6c4:	add	r6, r6, r3
   3a6c8:	ldr	r3, [r4, #20]
   3a6cc:	add	r2, r3, #1
   3a6d0:	str	r2, [r4, #20]
   3a6d4:	strb	fp, [r3]
   3a6d8:	ldrb	r3, [r4, #25]
   3a6dc:	cmp	r3, #0
   3a6e0:	bne	3a620 <flatcc_json_printer_struct_vector_field@@Base+0x188>
   3a6e4:	ldr	r2, [r4, #20]
   3a6e8:	ldr	r3, [r4, #16]
   3a6ec:	cmp	r2, r3
   3a6f0:	bcc	3a66c <flatcc_json_printer_struct_vector_field@@Base+0x1d4>
   3a6f4:	ldr	r3, [r4, #44]	; 0x2c
   3a6f8:	mov	r1, #0
   3a6fc:	mov	r0, r4
   3a700:	blx	r3
   3a704:	b	3a66c <flatcc_json_printer_struct_vector_field@@Base+0x1d4>
   3a708:	mov	r1, r5
   3a70c:	mov	r0, r4
   3a710:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3a714:	b	3a66c <flatcc_json_printer_struct_vector_field@@Base+0x1d4>
   3a718:	ldr	r3, [r4, #20]
   3a71c:	add	r2, r3, #1
   3a720:	str	r2, [r4, #20]
   3a724:	mov	r2, #10
   3a728:	strb	r2, [r3]
   3a72c:	ldr	r5, [r4, #32]
   3a730:	sub	r5, r5, #1
   3a734:	str	r5, [r4, #32]
   3a738:	ldrb	r3, [r4, #25]
   3a73c:	mul	r5, r5, r3
   3a740:	ldr	r0, [r4, #20]
   3a744:	add	r3, r0, r5
   3a748:	ldr	r2, [r4, #16]
   3a74c:	cmp	r2, r3
   3a750:	bcc	3a770 <flatcc_json_printer_struct_vector_field@@Base+0x2d8>
   3a754:	mov	r2, r5
   3a758:	mov	r1, #32
   3a75c:	bl	145c4 <memset@plt>
   3a760:	ldr	r3, [r4, #20]
   3a764:	add	r5, r3, r5
   3a768:	str	r5, [r4, #20]
   3a76c:	b	3a6a0 <flatcc_json_printer_struct_vector_field@@Base+0x208>
   3a770:	mov	r1, r5
   3a774:	mov	r0, r4
   3a778:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3a77c:	b	3a6a0 <flatcc_json_printer_struct_vector_field@@Base+0x208>
   3a780:	ldrb	r3, [r4, #25]
   3a784:	cmp	r3, #0
   3a788:	bne	3a7a4 <flatcc_json_printer_struct_vector_field@@Base+0x30c>
   3a78c:	ldr	r3, [r4, #20]
   3a790:	add	r2, r3, #1
   3a794:	str	r2, [r4, #20]
   3a798:	mov	r2, #93	; 0x5d
   3a79c:	strb	r2, [r3]
   3a7a0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a7a4:	ldr	r3, [r4, #20]
   3a7a8:	add	r2, r3, #1
   3a7ac:	str	r2, [r4, #20]
   3a7b0:	mov	r2, #10
   3a7b4:	strb	r2, [r3]
   3a7b8:	ldr	r5, [r4, #32]
   3a7bc:	sub	r5, r5, #1
   3a7c0:	str	r5, [r4, #32]
   3a7c4:	ldrb	r3, [r4, #25]
   3a7c8:	mul	r5, r5, r3
   3a7cc:	ldr	r0, [r4, #20]
   3a7d0:	add	r3, r0, r5
   3a7d4:	ldr	r2, [r4, #16]
   3a7d8:	cmp	r2, r3
   3a7dc:	bcc	3a7fc <flatcc_json_printer_struct_vector_field@@Base+0x364>
   3a7e0:	mov	r2, r5
   3a7e4:	mov	r1, #32
   3a7e8:	bl	145c4 <memset@plt>
   3a7ec:	ldr	r3, [r4, #20]
   3a7f0:	add	r5, r3, r5
   3a7f4:	str	r5, [r4, #20]
   3a7f8:	b	3a78c <flatcc_json_printer_struct_vector_field@@Base+0x2f4>
   3a7fc:	mov	r1, r5
   3a800:	mov	r0, r4
   3a804:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3a808:	b	3a78c <flatcc_json_printer_struct_vector_field@@Base+0x2f4>

0003a80c <flatcc_json_printer_string_vector_field@@Base>:
   3a80c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a810:	ldr	r7, [sp, #40]	; 0x28
   3a814:	add	r2, r2, #2
   3a818:	lsl	r2, r2, #1
   3a81c:	ldr	ip, [r1, #8]
   3a820:	cmp	ip, r2
   3a824:	pople	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a828:	ldr	ip, [r1, #4]
   3a82c:	ldrh	ip, [ip, r2]
   3a830:	cmp	ip, #0
   3a834:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a838:	ldr	r5, [r1]
   3a83c:	adds	lr, r5, ip
   3a840:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a844:	ldr	r2, [r1, #16]
   3a848:	add	r4, r2, #1
   3a84c:	str	r4, [r1, #16]
   3a850:	cmp	r2, #0
   3a854:	ldrne	r2, [r0, #20]
   3a858:	addne	r1, r2, #1
   3a85c:	strne	r1, [r0, #20]
   3a860:	movne	r1, #44	; 0x2c
   3a864:	strbne	r1, [r2]
   3a868:	mov	r8, r3
   3a86c:	mov	r4, r0
   3a870:	ldr	r3, [r5, ip]
   3a874:	add	r6, lr, r3
   3a878:	ldr	r5, [lr, r3]
   3a87c:	ldrb	r3, [r0, #25]
   3a880:	cmp	r3, #0
   3a884:	bne	3a8dc <flatcc_json_printer_string_vector_field@@Base+0xd0>
   3a888:	ldr	r2, [r0, #20]
   3a88c:	ldr	r3, [r0, #16]
   3a890:	cmp	r2, r3
   3a894:	bcs	3a93c <flatcc_json_printer_string_vector_field@@Base+0x130>
   3a898:	ldr	r3, [r4, #20]
   3a89c:	mov	r2, #34	; 0x22
   3a8a0:	strb	r2, [r3]
   3a8a4:	ldrb	r3, [r4, #26]
   3a8a8:	ldr	r0, [r4, #20]
   3a8ac:	cmp	r3, #0
   3a8b0:	addeq	r0, r0, #1
   3a8b4:	str	r0, [r4, #20]
   3a8b8:	add	r3, r0, r7
   3a8bc:	ldr	r2, [r4, #16]
   3a8c0:	cmp	r2, r3
   3a8c4:	bhi	3a94c <flatcc_json_printer_string_vector_field@@Base+0x140>
   3a8c8:	mov	r2, r7
   3a8cc:	mov	r1, r8
   3a8d0:	mov	r0, r4
   3a8d4:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3a8d8:	b	3a964 <flatcc_json_printer_string_vector_field@@Base+0x158>
   3a8dc:	ldr	r3, [r0, #20]
   3a8e0:	add	r2, r3, #1
   3a8e4:	str	r2, [r0, #20]
   3a8e8:	mov	r2, #10
   3a8ec:	strb	r2, [r3]
   3a8f0:	ldrb	r3, [r0, #25]
   3a8f4:	ldr	r9, [r0, #32]
   3a8f8:	mul	r9, r9, r3
   3a8fc:	ldr	r0, [r0, #20]
   3a900:	add	r3, r0, r9
   3a904:	ldr	r2, [r4, #16]
   3a908:	cmp	r2, r3
   3a90c:	bcc	3a92c <flatcc_json_printer_string_vector_field@@Base+0x120>
   3a910:	mov	r2, r9
   3a914:	mov	r1, #32
   3a918:	bl	145c4 <memset@plt>
   3a91c:	ldr	r3, [r4, #20]
   3a920:	add	r9, r3, r9
   3a924:	str	r9, [r4, #20]
   3a928:	b	3a898 <flatcc_json_printer_string_vector_field@@Base+0x8c>
   3a92c:	mov	r1, r9
   3a930:	mov	r0, r4
   3a934:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3a938:	b	3a898 <flatcc_json_printer_string_vector_field@@Base+0x8c>
   3a93c:	ldr	r3, [r0, #44]	; 0x2c
   3a940:	mov	r1, #0
   3a944:	blx	r3
   3a948:	b	3a898 <flatcc_json_printer_string_vector_field@@Base+0x8c>
   3a94c:	mov	r2, r7
   3a950:	mov	r1, r8
   3a954:	bl	1454c <memcpy@plt>
   3a958:	ldr	r3, [r4, #20]
   3a95c:	add	r7, r3, r7
   3a960:	str	r7, [r4, #20]
   3a964:	ldr	r3, [r4, #20]
   3a968:	mov	r2, #34	; 0x22
   3a96c:	strb	r2, [r3]
   3a970:	ldrb	r3, [r4, #26]
   3a974:	clz	r3, r3
   3a978:	lsr	r3, r3, #5
   3a97c:	ldr	r1, [r4, #20]
   3a980:	add	r2, r1, r3
   3a984:	add	r2, r2, #1
   3a988:	str	r2, [r4, #20]
   3a98c:	mov	r2, #58	; 0x3a
   3a990:	strb	r2, [r1, r3]
   3a994:	ldr	r3, [r4, #20]
   3a998:	mov	r2, #32
   3a99c:	strb	r2, [r3]
   3a9a0:	ldrb	r3, [r4, #25]
   3a9a4:	adds	r3, r3, #0
   3a9a8:	movne	r3, #1
   3a9ac:	ldr	r0, [r4, #20]
   3a9b0:	add	r2, r0, r3
   3a9b4:	ldr	r1, [r4, #32]
   3a9b8:	add	r1, r1, #1
   3a9bc:	str	r1, [r4, #32]
   3a9c0:	add	r2, r2, #1
   3a9c4:	str	r2, [r4, #20]
   3a9c8:	mov	r2, #91	; 0x5b
   3a9cc:	strb	r2, [r0, r3]
   3a9d0:	cmp	r5, #0
   3a9d4:	beq	3ab6c <flatcc_json_printer_string_vector_field@@Base+0x360>
   3a9d8:	ldrb	r3, [r4, #25]
   3a9dc:	cmp	r3, #0
   3a9e0:	bne	3aa30 <flatcc_json_printer_string_vector_field@@Base+0x224>
   3a9e4:	ldr	r2, [r4, #20]
   3a9e8:	ldr	r3, [r4, #16]
   3a9ec:	cmp	r2, r3
   3a9f0:	bcs	3aa90 <flatcc_json_printer_string_vector_field@@Base+0x284>
   3a9f4:	ldr	r3, [r6, #4]
   3a9f8:	add	r3, r3, #4
   3a9fc:	add	r1, r6, r3
   3aa00:	ldr	r2, [r6, r3]
   3aa04:	add	r1, r1, #4
   3aa08:	mov	r0, r4
   3aa0c:	bl	30f78 <flatcc_json_parser_struct_as_root@@Base+0x1768>
   3aa10:	sub	r7, r5, #2
   3aa14:	cmp	r5, #1
   3aa18:	beq	3ab6c <flatcc_json_printer_string_vector_field@@Base+0x360>
   3aa1c:	add	r6, r6, #8
   3aa20:	mov	r9, #44	; 0x2c
   3aa24:	mov	fp, #0
   3aa28:	mov	sl, #10
   3aa2c:	b	3ab18 <flatcc_json_printer_string_vector_field@@Base+0x30c>
   3aa30:	ldr	r3, [r4, #20]
   3aa34:	add	r2, r3, #1
   3aa38:	str	r2, [r4, #20]
   3aa3c:	mov	r2, #10
   3aa40:	strb	r2, [r3]
   3aa44:	ldrb	r3, [r4, #25]
   3aa48:	ldr	r7, [r4, #32]
   3aa4c:	mul	r7, r7, r3
   3aa50:	ldr	r0, [r4, #20]
   3aa54:	add	r3, r0, r7
   3aa58:	ldr	r2, [r4, #16]
   3aa5c:	cmp	r2, r3
   3aa60:	bcc	3aa80 <flatcc_json_printer_string_vector_field@@Base+0x274>
   3aa64:	mov	r2, r7
   3aa68:	mov	r1, #32
   3aa6c:	bl	145c4 <memset@plt>
   3aa70:	ldr	r3, [r4, #20]
   3aa74:	add	r7, r3, r7
   3aa78:	str	r7, [r4, #20]
   3aa7c:	b	3a9f4 <flatcc_json_printer_string_vector_field@@Base+0x1e8>
   3aa80:	mov	r1, r7
   3aa84:	mov	r0, r4
   3aa88:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3aa8c:	b	3a9f4 <flatcc_json_printer_string_vector_field@@Base+0x1e8>
   3aa90:	ldr	r3, [r4, #44]	; 0x2c
   3aa94:	mov	r1, #0
   3aa98:	mov	r0, r4
   3aa9c:	blx	r3
   3aaa0:	b	3a9f4 <flatcc_json_printer_string_vector_field@@Base+0x1e8>
   3aaa4:	ldr	r3, [r4, #20]
   3aaa8:	add	r2, r3, #1
   3aaac:	str	r2, [r4, #20]
   3aab0:	strb	sl, [r3]
   3aab4:	ldrb	r3, [r4, #25]
   3aab8:	ldr	r8, [r4, #32]
   3aabc:	mul	r8, r8, r3
   3aac0:	ldr	r0, [r4, #20]
   3aac4:	add	r3, r0, r8
   3aac8:	ldr	r2, [r4, #16]
   3aacc:	cmp	r2, r3
   3aad0:	bcc	3ab5c <flatcc_json_printer_string_vector_field@@Base+0x350>
   3aad4:	mov	r2, r8
   3aad8:	mov	r1, #32
   3aadc:	bl	145c4 <memset@plt>
   3aae0:	ldr	r3, [r4, #20]
   3aae4:	add	r8, r3, r8
   3aae8:	str	r8, [r4, #20]
   3aaec:	add	r6, r6, #4
   3aaf0:	ldr	r3, [r5]
   3aaf4:	add	r1, r5, r3
   3aaf8:	ldr	r2, [r5, r3]
   3aafc:	add	r1, r1, #4
   3ab00:	mov	r0, r4
   3ab04:	bl	30f78 <flatcc_json_parser_struct_as_root@@Base+0x1768>
   3ab08:	sub	r3, r7, #1
   3ab0c:	cmp	r7, #0
   3ab10:	beq	3ab6c <flatcc_json_printer_string_vector_field@@Base+0x360>
   3ab14:	mov	r7, r3
   3ab18:	mov	r5, r6
   3ab1c:	ldr	r3, [r4, #20]
   3ab20:	add	r2, r3, #1
   3ab24:	str	r2, [r4, #20]
   3ab28:	strb	r9, [r3]
   3ab2c:	ldrb	r3, [r4, #25]
   3ab30:	cmp	r3, #0
   3ab34:	bne	3aaa4 <flatcc_json_printer_string_vector_field@@Base+0x298>
   3ab38:	ldr	r2, [r4, #20]
   3ab3c:	ldr	r3, [r4, #16]
   3ab40:	cmp	r2, r3
   3ab44:	bcc	3aaec <flatcc_json_printer_string_vector_field@@Base+0x2e0>
   3ab48:	ldr	r3, [r4, #44]	; 0x2c
   3ab4c:	mov	r1, fp
   3ab50:	mov	r0, r4
   3ab54:	blx	r3
   3ab58:	b	3aaec <flatcc_json_printer_string_vector_field@@Base+0x2e0>
   3ab5c:	mov	r1, r8
   3ab60:	mov	r0, r4
   3ab64:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3ab68:	b	3aaec <flatcc_json_printer_string_vector_field@@Base+0x2e0>
   3ab6c:	ldrb	r3, [r4, #25]
   3ab70:	cmp	r3, #0
   3ab74:	bne	3ab90 <flatcc_json_printer_string_vector_field@@Base+0x384>
   3ab78:	ldr	r3, [r4, #20]
   3ab7c:	add	r2, r3, #1
   3ab80:	str	r2, [r4, #20]
   3ab84:	mov	r2, #93	; 0x5d
   3ab88:	strb	r2, [r3]
   3ab8c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ab90:	ldr	r3, [r4, #20]
   3ab94:	add	r2, r3, #1
   3ab98:	str	r2, [r4, #20]
   3ab9c:	mov	r2, #10
   3aba0:	strb	r2, [r3]
   3aba4:	ldr	r5, [r4, #32]
   3aba8:	sub	r5, r5, #1
   3abac:	str	r5, [r4, #32]
   3abb0:	ldrb	r3, [r4, #25]
   3abb4:	mul	r5, r5, r3
   3abb8:	ldr	r0, [r4, #20]
   3abbc:	add	r3, r0, r5
   3abc0:	ldr	r2, [r4, #16]
   3abc4:	cmp	r2, r3
   3abc8:	bcc	3abe8 <flatcc_json_printer_string_vector_field@@Base+0x3dc>
   3abcc:	mov	r2, r5
   3abd0:	mov	r1, #32
   3abd4:	bl	145c4 <memset@plt>
   3abd8:	ldr	r3, [r4, #20]
   3abdc:	add	r5, r3, r5
   3abe0:	str	r5, [r4, #20]
   3abe4:	b	3ab78 <flatcc_json_printer_string_vector_field@@Base+0x36c>
   3abe8:	mov	r1, r5
   3abec:	mov	r0, r4
   3abf0:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3abf4:	b	3ab78 <flatcc_json_printer_string_vector_field@@Base+0x36c>

0003abf8 <flatcc_json_printer_table_vector_field@@Base>:
   3abf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3abfc:	sub	sp, sp, #28
   3ac00:	ldr	r9, [sp, #64]	; 0x40
   3ac04:	add	r2, r2, #2
   3ac08:	lsl	r2, r2, #1
   3ac0c:	ldr	ip, [r1, #8]
   3ac10:	cmp	ip, r2
   3ac14:	ble	3adec <flatcc_json_printer_table_vector_field@@Base+0x1f4>
   3ac18:	ldr	ip, [r1, #4]
   3ac1c:	ldrh	ip, [ip, r2]
   3ac20:	cmp	ip, #0
   3ac24:	beq	3adec <flatcc_json_printer_table_vector_field@@Base+0x1f4>
   3ac28:	ldr	r5, [r1]
   3ac2c:	adds	lr, r5, ip
   3ac30:	beq	3adec <flatcc_json_printer_table_vector_field@@Base+0x1f4>
   3ac34:	ldr	r2, [r1, #16]
   3ac38:	add	r4, r2, #1
   3ac3c:	str	r4, [r1, #16]
   3ac40:	cmp	r2, #0
   3ac44:	ldrne	r2, [r0, #20]
   3ac48:	addne	r4, r2, #1
   3ac4c:	strne	r4, [r0, #20]
   3ac50:	movne	r4, #44	; 0x2c
   3ac54:	strbne	r4, [r2]
   3ac58:	mov	r6, r3
   3ac5c:	mov	r7, r1
   3ac60:	mov	r4, r0
   3ac64:	ldr	r3, [r5, ip]
   3ac68:	add	r8, lr, r3
   3ac6c:	ldr	r5, [lr, r3]
   3ac70:	ldrb	r3, [r0, #25]
   3ac74:	cmp	r3, #0
   3ac78:	bne	3acd0 <flatcc_json_printer_table_vector_field@@Base+0xd8>
   3ac7c:	ldr	r2, [r0, #20]
   3ac80:	ldr	r3, [r0, #16]
   3ac84:	cmp	r2, r3
   3ac88:	bcs	3ad30 <flatcc_json_printer_table_vector_field@@Base+0x138>
   3ac8c:	ldr	r3, [r4, #20]
   3ac90:	mov	r2, #34	; 0x22
   3ac94:	strb	r2, [r3]
   3ac98:	ldrb	r3, [r4, #26]
   3ac9c:	ldr	r0, [r4, #20]
   3aca0:	cmp	r3, #0
   3aca4:	addeq	r0, r0, #1
   3aca8:	str	r0, [r4, #20]
   3acac:	add	r3, r0, r9
   3acb0:	ldr	r2, [r4, #16]
   3acb4:	cmp	r2, r3
   3acb8:	bhi	3ad40 <flatcc_json_printer_table_vector_field@@Base+0x148>
   3acbc:	mov	r2, r9
   3acc0:	mov	r1, r6
   3acc4:	mov	r0, r4
   3acc8:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3accc:	b	3ad58 <flatcc_json_printer_table_vector_field@@Base+0x160>
   3acd0:	ldr	r3, [r0, #20]
   3acd4:	add	r2, r3, #1
   3acd8:	str	r2, [r0, #20]
   3acdc:	mov	r2, #10
   3ace0:	strb	r2, [r3]
   3ace4:	ldrb	r3, [r0, #25]
   3ace8:	ldr	sl, [r0, #32]
   3acec:	mul	sl, sl, r3
   3acf0:	ldr	r0, [r0, #20]
   3acf4:	add	r3, r0, sl
   3acf8:	ldr	r2, [r4, #16]
   3acfc:	cmp	r2, r3
   3ad00:	bcc	3ad20 <flatcc_json_printer_table_vector_field@@Base+0x128>
   3ad04:	mov	r2, sl
   3ad08:	mov	r1, #32
   3ad0c:	bl	145c4 <memset@plt>
   3ad10:	ldr	r3, [r4, #20]
   3ad14:	add	sl, r3, sl
   3ad18:	str	sl, [r4, #20]
   3ad1c:	b	3ac8c <flatcc_json_printer_table_vector_field@@Base+0x94>
   3ad20:	mov	r1, sl
   3ad24:	mov	r0, r4
   3ad28:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3ad2c:	b	3ac8c <flatcc_json_printer_table_vector_field@@Base+0x94>
   3ad30:	ldr	r3, [r0, #44]	; 0x2c
   3ad34:	mov	r1, #0
   3ad38:	blx	r3
   3ad3c:	b	3ac8c <flatcc_json_printer_table_vector_field@@Base+0x94>
   3ad40:	mov	r2, r9
   3ad44:	mov	r1, r6
   3ad48:	bl	1454c <memcpy@plt>
   3ad4c:	ldr	r3, [r4, #20]
   3ad50:	add	r9, r3, r9
   3ad54:	str	r9, [r4, #20]
   3ad58:	ldr	r3, [r4, #20]
   3ad5c:	mov	r2, #34	; 0x22
   3ad60:	strb	r2, [r3]
   3ad64:	ldrb	r3, [r4, #26]
   3ad68:	clz	r3, r3
   3ad6c:	lsr	r3, r3, #5
   3ad70:	ldr	r1, [r4, #20]
   3ad74:	add	r2, r1, r3
   3ad78:	add	r2, r2, #1
   3ad7c:	str	r2, [r4, #20]
   3ad80:	mov	r2, #58	; 0x3a
   3ad84:	strb	r2, [r1, r3]
   3ad88:	ldr	r3, [r4, #20]
   3ad8c:	mov	r2, #32
   3ad90:	strb	r2, [r3]
   3ad94:	ldrb	r3, [r4, #25]
   3ad98:	adds	r3, r3, #0
   3ad9c:	movne	r3, #1
   3ada0:	ldr	r0, [r4, #20]
   3ada4:	add	r2, r0, r3
   3ada8:	ldr	r1, [r4, #32]
   3adac:	add	r1, r1, #1
   3adb0:	str	r1, [r4, #32]
   3adb4:	add	r2, r2, #1
   3adb8:	str	r2, [r4, #20]
   3adbc:	mov	r2, #91	; 0x5b
   3adc0:	strb	r2, [r0, r3]
   3adc4:	cmp	r5, #0
   3adc8:	bne	3adf4 <flatcc_json_printer_table_vector_field@@Base+0x1fc>
   3adcc:	ldrb	r3, [r4, #25]
   3add0:	cmp	r3, #0
   3add4:	bne	3aff0 <flatcc_json_printer_table_vector_field@@Base+0x3f8>
   3add8:	ldr	r3, [r4, #20]
   3addc:	add	r2, r3, #1
   3ade0:	str	r2, [r4, #20]
   3ade4:	mov	r2, #93	; 0x5d
   3ade8:	strb	r2, [r3]
   3adec:	add	sp, sp, #28
   3adf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3adf4:	add	r6, r8, #4
   3adf8:	ldr	r3, [r7, #12]
   3adfc:	subs	r3, r3, #1
   3ae00:	bne	3ae28 <flatcc_json_printer_table_vector_field@@Base+0x230>
   3ae04:	ldr	r3, [r4, #36]	; 0x24
   3ae08:	cmp	r3, #0
   3ae0c:	moveq	r3, #2
   3ae10:	streq	r3, [r4, #36]	; 0x24
   3ae14:	sub	r5, r5, #1
   3ae18:	mov	r9, #44	; 0x2c
   3ae1c:	mov	fp, #123	; 0x7b
   3ae20:	mov	sl, #0
   3ae24:	b	3af48 <flatcc_json_printer_table_vector_field@@Base+0x350>
   3ae28:	ldr	r0, [r8, #4]
   3ae2c:	add	r2, r6, r0
   3ae30:	ldr	r1, [r4, #32]
   3ae34:	add	r1, r1, #1
   3ae38:	str	r1, [r4, #32]
   3ae3c:	ldr	r1, [r4, #20]
   3ae40:	add	ip, r1, #1
   3ae44:	str	ip, [r4, #20]
   3ae48:	mov	ip, #123	; 0x7b
   3ae4c:	strb	ip, [r1]
   3ae50:	mov	r1, #0
   3ae54:	str	r1, [sp, #20]
   3ae58:	str	r3, [sp, #16]
   3ae5c:	str	r2, [sp, #4]
   3ae60:	ldr	r3, [r6, r0]
   3ae64:	sub	r3, r2, r3
   3ae68:	str	r3, [sp, #8]
   3ae6c:	ldrh	r3, [r3]
   3ae70:	str	r3, [sp, #12]
   3ae74:	add	r1, sp, #4
   3ae78:	mov	r0, r4
   3ae7c:	ldr	r3, [sp, #68]	; 0x44
   3ae80:	blx	r3
   3ae84:	ldrb	r3, [r4, #25]
   3ae88:	cmp	r3, #0
   3ae8c:	bne	3aea8 <flatcc_json_printer_table_vector_field@@Base+0x2b0>
   3ae90:	ldr	r3, [r4, #20]
   3ae94:	add	r2, r3, #1
   3ae98:	str	r2, [r4, #20]
   3ae9c:	mov	r2, #125	; 0x7d
   3aea0:	strb	r2, [r3]
   3aea4:	b	3ae14 <flatcc_json_printer_table_vector_field@@Base+0x21c>
   3aea8:	ldr	r3, [r4, #20]
   3aeac:	add	r2, r3, #1
   3aeb0:	str	r2, [r4, #20]
   3aeb4:	mov	r2, #10
   3aeb8:	strb	r2, [r3]
   3aebc:	ldr	r3, [r4, #32]
   3aec0:	sub	r3, r3, #1
   3aec4:	str	r3, [r4, #32]
   3aec8:	mov	r0, r4
   3aecc:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3aed0:	b	3ae90 <flatcc_json_printer_table_vector_field@@Base+0x298>
   3aed4:	ldr	r0, [r6]
   3aed8:	add	r2, r6, r0
   3aedc:	ldr	r1, [r4, #32]
   3aee0:	add	r1, r1, #1
   3aee4:	str	r1, [r4, #32]
   3aee8:	ldr	r1, [r4, #20]
   3aeec:	add	ip, r1, #1
   3aef0:	str	ip, [r4, #20]
   3aef4:	strb	fp, [r1]
   3aef8:	str	sl, [sp, #20]
   3aefc:	str	r3, [sp, #16]
   3af00:	str	r2, [sp, #4]
   3af04:	ldr	r3, [r6, r0]
   3af08:	sub	r3, r2, r3
   3af0c:	str	r3, [sp, #8]
   3af10:	ldrh	r3, [r3]
   3af14:	str	r3, [sp, #12]
   3af18:	add	r1, sp, #4
   3af1c:	mov	r0, r4
   3af20:	ldr	r3, [sp, #68]	; 0x44
   3af24:	blx	r3
   3af28:	ldrb	r3, [r4, #25]
   3af2c:	cmp	r3, #0
   3af30:	bne	3af88 <flatcc_json_printer_table_vector_field@@Base+0x390>
   3af34:	ldr	r3, [r4, #20]
   3af38:	add	r2, r3, #1
   3af3c:	str	r2, [r4, #20]
   3af40:	mov	r2, #125	; 0x7d
   3af44:	strb	r2, [r3]
   3af48:	sub	r5, r5, #1
   3af4c:	cmn	r5, #1
   3af50:	beq	3adcc <flatcc_json_printer_table_vector_field@@Base+0x1d4>
   3af54:	add	r6, r6, #4
   3af58:	ldr	r3, [r4, #20]
   3af5c:	add	r2, r3, #1
   3af60:	str	r2, [r4, #20]
   3af64:	strb	r9, [r3]
   3af68:	ldr	r3, [r7, #12]
   3af6c:	subs	r3, r3, #1
   3af70:	bne	3aed4 <flatcc_json_printer_table_vector_field@@Base+0x2dc>
   3af74:	ldr	r3, [r4, #36]	; 0x24
   3af78:	cmp	r3, #0
   3af7c:	moveq	r3, #2
   3af80:	streq	r3, [r4, #36]	; 0x24
   3af84:	b	3af48 <flatcc_json_printer_table_vector_field@@Base+0x350>
   3af88:	ldr	r3, [r4, #20]
   3af8c:	add	r2, r3, #1
   3af90:	str	r2, [r4, #20]
   3af94:	mov	r2, #10
   3af98:	strb	r2, [r3]
   3af9c:	ldr	r8, [r4, #32]
   3afa0:	sub	r8, r8, #1
   3afa4:	str	r8, [r4, #32]
   3afa8:	ldrb	r3, [r4, #25]
   3afac:	mul	r8, r8, r3
   3afb0:	ldr	r0, [r4, #20]
   3afb4:	add	r3, r0, r8
   3afb8:	ldr	r2, [r4, #16]
   3afbc:	cmp	r2, r3
   3afc0:	bcc	3afe0 <flatcc_json_printer_table_vector_field@@Base+0x3e8>
   3afc4:	mov	r2, r8
   3afc8:	mov	r1, #32
   3afcc:	bl	145c4 <memset@plt>
   3afd0:	ldr	r3, [r4, #20]
   3afd4:	add	r8, r3, r8
   3afd8:	str	r8, [r4, #20]
   3afdc:	b	3af34 <flatcc_json_printer_table_vector_field@@Base+0x33c>
   3afe0:	mov	r1, r8
   3afe4:	mov	r0, r4
   3afe8:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3afec:	b	3af34 <flatcc_json_printer_table_vector_field@@Base+0x33c>
   3aff0:	ldr	r3, [r4, #20]
   3aff4:	add	r2, r3, #1
   3aff8:	str	r2, [r4, #20]
   3affc:	mov	r2, #10
   3b000:	strb	r2, [r3]
   3b004:	ldr	r5, [r4, #32]
   3b008:	sub	r5, r5, #1
   3b00c:	str	r5, [r4, #32]
   3b010:	ldrb	r3, [r4, #25]
   3b014:	mul	r5, r5, r3
   3b018:	ldr	r0, [r4, #20]
   3b01c:	add	r3, r0, r5
   3b020:	ldr	r2, [r4, #16]
   3b024:	cmp	r2, r3
   3b028:	bcc	3b048 <flatcc_json_printer_table_vector_field@@Base+0x450>
   3b02c:	mov	r2, r5
   3b030:	mov	r1, #32
   3b034:	bl	145c4 <memset@plt>
   3b038:	ldr	r3, [r4, #20]
   3b03c:	add	r5, r3, r5
   3b040:	str	r5, [r4, #20]
   3b044:	b	3add8 <flatcc_json_printer_table_vector_field@@Base+0x1e0>
   3b048:	mov	r1, r5
   3b04c:	mov	r0, r4
   3b050:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3b054:	b	3add8 <flatcc_json_printer_table_vector_field@@Base+0x1e0>

0003b058 <flatcc_json_printer_union_vector_field@@Base>:
   3b058:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b05c:	sub	sp, sp, #140	; 0x8c
   3b060:	mov	r4, r0
   3b064:	mov	r5, r1
   3b068:	mov	r8, r2
   3b06c:	str	r3, [sp, #8]
   3b070:	ldr	r6, [sp, #176]	; 0xb0
   3b074:	add	r3, r2, #1
   3b078:	lsl	r3, r3, #1
   3b07c:	ldr	r2, [r1, #8]
   3b080:	cmp	r3, r2
   3b084:	movge	r7, #0
   3b088:	bge	3b0a4 <flatcc_json_printer_union_vector_field@@Base+0x4c>
   3b08c:	ldr	r1, [r1, #4]
   3b090:	ldrh	r1, [r1, r3]
   3b094:	cmp	r1, #0
   3b098:	ldrne	r7, [r5]
   3b09c:	addne	r7, r7, r1
   3b0a0:	moveq	r7, #0
   3b0a4:	add	r3, r3, #2
   3b0a8:	cmp	r3, r2
   3b0ac:	bge	3b33c <flatcc_json_printer_union_vector_field@@Base+0x2e4>
   3b0b0:	ldr	r2, [r5, #4]
   3b0b4:	ldrh	r9, [r2, r3]
   3b0b8:	cmp	r9, #0
   3b0bc:	beq	3b33c <flatcc_json_printer_union_vector_field@@Base+0x2e4>
   3b0c0:	ldr	r3, [r5]
   3b0c4:	str	r3, [sp, #12]
   3b0c8:	add	fp, r3, r9
   3b0cc:	ldr	r3, [r5, #12]
   3b0d0:	str	r3, [sp, #20]
   3b0d4:	cmp	r6, #100	; 0x64
   3b0d8:	bgt	3b228 <flatcc_json_printer_union_vector_field@@Base+0x1d0>
   3b0dc:	add	sl, sp, #28
   3b0e0:	mov	r2, r6
   3b0e4:	ldr	r1, [sp, #8]
   3b0e8:	mov	r0, sl
   3b0ec:	bl	1454c <memcpy@plt>
   3b0f0:	add	r2, sl, r6
   3b0f4:	ldr	r3, [pc, #600]	; 3b354 <flatcc_json_printer_union_vector_field@@Base+0x2fc>
   3b0f8:	ldr	r0, [r3]
   3b0fc:	str	r0, [sl, r6]
   3b100:	ldrb	r3, [r3, #4]
   3b104:	strb	r3, [r2, #4]
   3b108:	cmp	fp, #0
   3b10c:	cmpne	r7, #0
   3b110:	beq	3b34c <flatcc_json_printer_union_vector_field@@Base+0x2f4>
   3b114:	ldr	r3, [sp, #180]	; 0xb4
   3b118:	str	r3, [sp, #4]
   3b11c:	add	r3, r6, #5
   3b120:	str	r3, [sp]
   3b124:	add	r3, sp, #28
   3b128:	sub	r2, r8, #1
   3b12c:	mov	r1, r5
   3b130:	mov	r0, r4
   3b134:	bl	38b68 <flatcc_json_printer_utype_enum_vector_field@@Base>
   3b138:	ldr	r3, [r5, #16]
   3b13c:	add	r2, r3, #1
   3b140:	str	r2, [r5, #16]
   3b144:	cmp	r3, #0
   3b148:	ldrne	r3, [r4, #20]
   3b14c:	addne	r2, r3, #1
   3b150:	strne	r2, [r4, #20]
   3b154:	movne	r2, #44	; 0x2c
   3b158:	strbne	r2, [r3]
   3b15c:	ldr	r3, [sp, #12]
   3b160:	ldr	r3, [r3, r9]
   3b164:	add	r9, fp, r3
   3b168:	ldr	r5, [r7]
   3b16c:	ldr	r8, [fp, r3]
   3b170:	mov	r2, r6
   3b174:	ldr	r1, [sp, #8]
   3b178:	mov	r0, r4
   3b17c:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3b180:	ldr	r3, [r4, #32]
   3b184:	add	r3, r3, #1
   3b188:	str	r3, [r4, #32]
   3b18c:	ldr	r3, [r4, #20]
   3b190:	add	r2, r3, #1
   3b194:	str	r2, [r4, #20]
   3b198:	mov	r2, #91	; 0x5b
   3b19c:	strb	r2, [r3]
   3b1a0:	cmp	r8, #0
   3b1a4:	beq	3b2ec <flatcc_json_printer_union_vector_field@@Base+0x294>
   3b1a8:	add	r7, r7, r5
   3b1ac:	add	r6, r9, #4
   3b1b0:	ldrb	r3, [r7, #4]
   3b1b4:	cmp	r3, #0
   3b1b8:	bne	3b24c <flatcc_json_printer_union_vector_field@@Base+0x1f4>
   3b1bc:	ldr	r3, [r4, #20]
   3b1c0:	add	r2, r3, #1
   3b1c4:	str	r2, [r4, #20]
   3b1c8:	mov	r2, #110	; 0x6e
   3b1cc:	strb	r2, [r3]
   3b1d0:	ldr	r3, [r4, #20]
   3b1d4:	add	r2, r3, #1
   3b1d8:	str	r2, [r4, #20]
   3b1dc:	mov	r2, #117	; 0x75
   3b1e0:	strb	r2, [r3]
   3b1e4:	ldr	r3, [r4, #20]
   3b1e8:	add	r2, r3, #1
   3b1ec:	str	r2, [r4, #20]
   3b1f0:	mov	r2, #108	; 0x6c
   3b1f4:	strb	r2, [r3]
   3b1f8:	ldr	r3, [r4, #20]
   3b1fc:	add	r1, r3, #1
   3b200:	str	r1, [r4, #20]
   3b204:	strb	r2, [r3]
   3b208:	add	r8, r8, #3
   3b20c:	add	r8, r7, r8
   3b210:	add	r7, r7, #4
   3b214:	mov	r9, #44	; 0x2c
   3b218:	mov	fp, #110	; 0x6e
   3b21c:	mov	sl, #117	; 0x75
   3b220:	mov	r5, #108	; 0x6c
   3b224:	b	3b280 <flatcc_json_printer_union_vector_field@@Base+0x228>
   3b228:	ldr	r3, [r4, #36]	; 0x24
   3b22c:	cmp	r3, #0
   3b230:	moveq	r3, #1
   3b234:	streq	r3, [r4, #36]	; 0x24
   3b238:	ldr	r3, [pc, #280]	; 3b358 <flatcc_json_printer_union_vector_field@@Base+0x300>
   3b23c:	ldr	r2, [pc, #280]	; 3b35c <flatcc_json_printer_union_vector_field@@Base+0x304>
   3b240:	ldr	r1, [pc, #280]	; 3b360 <flatcc_json_printer_union_vector_field@@Base+0x308>
   3b244:	ldr	r0, [pc, #280]	; 3b364 <flatcc_json_printer_union_vector_field@@Base+0x30c>
   3b248:	bl	14618 <__assert_fail@plt>
   3b24c:	strb	r3, [sp, #24]
   3b250:	add	r1, sp, #136	; 0x88
   3b254:	str	r6, [r1, #-120]!	; 0xffffff88
   3b258:	mov	r0, r4
   3b25c:	ldr	r3, [sp, #184]	; 0xb8
   3b260:	blx	r3
   3b264:	b	3b208 <flatcc_json_printer_union_vector_field@@Base+0x1b0>
   3b268:	strb	r2, [sp, #24]
   3b26c:	str	r6, [sp, #16]
   3b270:	add	r1, sp, #16
   3b274:	mov	r0, r4
   3b278:	ldr	r3, [sp, #184]	; 0xb8
   3b27c:	blx	r3
   3b280:	cmp	r7, r8
   3b284:	beq	3b2ec <flatcc_json_printer_union_vector_field@@Base+0x294>
   3b288:	add	r6, r6, #4
   3b28c:	ldrb	r2, [r7, #1]!
   3b290:	ldr	r3, [r4, #20]
   3b294:	add	r1, r3, #1
   3b298:	str	r1, [r4, #20]
   3b29c:	strb	r9, [r3]
   3b2a0:	cmp	r2, #0
   3b2a4:	bne	3b268 <flatcc_json_printer_union_vector_field@@Base+0x210>
   3b2a8:	ldr	r3, [r4, #20]
   3b2ac:	add	r2, r3, #1
   3b2b0:	str	r2, [r4, #20]
   3b2b4:	strb	fp, [r3]
   3b2b8:	ldr	r3, [r4, #20]
   3b2bc:	add	r2, r3, #1
   3b2c0:	str	r2, [r4, #20]
   3b2c4:	strb	sl, [r3]
   3b2c8:	ldr	r3, [r4, #20]
   3b2cc:	add	r2, r3, #1
   3b2d0:	str	r2, [r4, #20]
   3b2d4:	strb	r5, [r3]
   3b2d8:	ldr	r3, [r4, #20]
   3b2dc:	add	r2, r3, #1
   3b2e0:	str	r2, [r4, #20]
   3b2e4:	strb	r5, [r3]
   3b2e8:	b	3b280 <flatcc_json_printer_union_vector_field@@Base+0x228>
   3b2ec:	ldrb	r3, [r4, #25]
   3b2f0:	cmp	r3, #0
   3b2f4:	bne	3b310 <flatcc_json_printer_union_vector_field@@Base+0x2b8>
   3b2f8:	ldr	r3, [r4, #20]
   3b2fc:	add	r2, r3, #1
   3b300:	str	r2, [r4, #20]
   3b304:	mov	r2, #93	; 0x5d
   3b308:	strb	r2, [r3]
   3b30c:	b	3b34c <flatcc_json_printer_union_vector_field@@Base+0x2f4>
   3b310:	ldr	r3, [r4, #20]
   3b314:	add	r2, r3, #1
   3b318:	str	r2, [r4, #20]
   3b31c:	mov	r2, #10
   3b320:	strb	r2, [r3]
   3b324:	ldr	r3, [r4, #32]
   3b328:	sub	r3, r3, #1
   3b32c:	str	r3, [r4, #32]
   3b330:	mov	r0, r4
   3b334:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3b338:	b	3b2f8 <flatcc_json_printer_union_vector_field@@Base+0x2a0>
   3b33c:	ldr	r3, [r5, #12]
   3b340:	str	r3, [sp, #20]
   3b344:	cmp	r6, #100	; 0x64
   3b348:	bgt	3b228 <flatcc_json_printer_union_vector_field@@Base+0x1d0>
   3b34c:	add	sp, sp, #140	; 0x8c
   3b350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b354:	muleq	r4, r4, r7
   3b358:	andeq	r2, r4, r4, asr #10
   3b35c:	andeq	r0, r0, fp, asr #6
   3b360:	andeq	r2, r4, r4, lsl r6
   3b364:	andeq	r2, r4, r8, ror r7

0003b368 <flatcc_json_printer_table_field@@Base>:
   3b368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b36c:	sub	sp, sp, #28
   3b370:	ldr	sl, [sp, #64]	; 0x40
   3b374:	add	r2, r2, #2
   3b378:	lsl	r2, r2, #1
   3b37c:	ldr	ip, [r1, #8]
   3b380:	cmp	r2, ip
   3b384:	bge	3b52c <flatcc_json_printer_table_field@@Base+0x1c4>
   3b388:	ldr	ip, [r1, #4]
   3b38c:	ldrh	r6, [ip, r2]
   3b390:	cmp	r6, #0
   3b394:	beq	3b52c <flatcc_json_printer_table_field@@Base+0x1c4>
   3b398:	ldr	r7, [r1]
   3b39c:	adds	r8, r7, r6
   3b3a0:	beq	3b52c <flatcc_json_printer_table_field@@Base+0x1c4>
   3b3a4:	ldr	r2, [r1, #16]
   3b3a8:	add	ip, r2, #1
   3b3ac:	str	ip, [r1, #16]
   3b3b0:	cmp	r2, #0
   3b3b4:	ldrne	r2, [r0, #20]
   3b3b8:	addne	ip, r2, #1
   3b3bc:	strne	ip, [r0, #20]
   3b3c0:	movne	ip, #44	; 0x2c
   3b3c4:	strbne	ip, [r2]
   3b3c8:	mov	r9, r3
   3b3cc:	mov	r5, r1
   3b3d0:	mov	r4, r0
   3b3d4:	ldrb	r3, [r0, #25]
   3b3d8:	cmp	r3, #0
   3b3dc:	bne	3b434 <flatcc_json_printer_table_field@@Base+0xcc>
   3b3e0:	ldr	r2, [r0, #20]
   3b3e4:	ldr	r3, [r0, #16]
   3b3e8:	cmp	r2, r3
   3b3ec:	bcs	3b494 <flatcc_json_printer_table_field@@Base+0x12c>
   3b3f0:	ldr	r3, [r4, #20]
   3b3f4:	mov	r2, #34	; 0x22
   3b3f8:	strb	r2, [r3]
   3b3fc:	ldrb	r3, [r4, #26]
   3b400:	ldr	r0, [r4, #20]
   3b404:	cmp	r3, #0
   3b408:	addeq	r0, r0, #1
   3b40c:	str	r0, [r4, #20]
   3b410:	add	r3, r0, sl
   3b414:	ldr	r2, [r4, #16]
   3b418:	cmp	r2, r3
   3b41c:	bhi	3b4a4 <flatcc_json_printer_table_field@@Base+0x13c>
   3b420:	mov	r2, sl
   3b424:	mov	r1, r9
   3b428:	mov	r0, r4
   3b42c:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3b430:	b	3b4bc <flatcc_json_printer_table_field@@Base+0x154>
   3b434:	ldr	r3, [r0, #20]
   3b438:	add	r2, r3, #1
   3b43c:	str	r2, [r0, #20]
   3b440:	mov	r2, #10
   3b444:	strb	r2, [r3]
   3b448:	ldrb	r3, [r0, #25]
   3b44c:	ldr	fp, [r0, #32]
   3b450:	mul	fp, fp, r3
   3b454:	ldr	r0, [r0, #20]
   3b458:	add	r3, r0, fp
   3b45c:	ldr	r2, [r4, #16]
   3b460:	cmp	r2, r3
   3b464:	bcc	3b484 <flatcc_json_printer_table_field@@Base+0x11c>
   3b468:	mov	r2, fp
   3b46c:	mov	r1, #32
   3b470:	bl	145c4 <memset@plt>
   3b474:	ldr	r3, [r4, #20]
   3b478:	add	fp, r3, fp
   3b47c:	str	fp, [r4, #20]
   3b480:	b	3b3f0 <flatcc_json_printer_table_field@@Base+0x88>
   3b484:	mov	r1, fp
   3b488:	mov	r0, r4
   3b48c:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3b490:	b	3b3f0 <flatcc_json_printer_table_field@@Base+0x88>
   3b494:	ldr	r3, [r0, #44]	; 0x2c
   3b498:	mov	r1, #0
   3b49c:	blx	r3
   3b4a0:	b	3b3f0 <flatcc_json_printer_table_field@@Base+0x88>
   3b4a4:	mov	r2, sl
   3b4a8:	mov	r1, r9
   3b4ac:	bl	1454c <memcpy@plt>
   3b4b0:	ldr	r3, [r4, #20]
   3b4b4:	add	sl, r3, sl
   3b4b8:	str	sl, [r4, #20]
   3b4bc:	ldr	r3, [r4, #20]
   3b4c0:	mov	r2, #34	; 0x22
   3b4c4:	strb	r2, [r3]
   3b4c8:	ldrb	r3, [r4, #26]
   3b4cc:	clz	r3, r3
   3b4d0:	lsr	r3, r3, #5
   3b4d4:	ldr	r1, [r4, #20]
   3b4d8:	add	r2, r1, r3
   3b4dc:	add	r2, r2, #1
   3b4e0:	str	r2, [r4, #20]
   3b4e4:	mov	r2, #58	; 0x3a
   3b4e8:	strb	r2, [r1, r3]
   3b4ec:	ldr	r3, [r4, #20]
   3b4f0:	mov	r2, #32
   3b4f4:	strb	r2, [r3]
   3b4f8:	ldrb	r2, [r4, #25]
   3b4fc:	adds	r2, r2, #0
   3b500:	movne	r2, #1
   3b504:	ldr	r0, [r4, #20]
   3b508:	add	r1, r0, r2
   3b50c:	str	r1, [r4, #20]
   3b510:	ldr	r3, [r5, #12]
   3b514:	subs	r3, r3, #1
   3b518:	bne	3b534 <flatcc_json_printer_table_field@@Base+0x1cc>
   3b51c:	ldr	r3, [r4, #36]	; 0x24
   3b520:	cmp	r3, #0
   3b524:	moveq	r3, #2
   3b528:	streq	r3, [r4, #36]	; 0x24
   3b52c:	add	sp, sp, #28
   3b530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b534:	ldr	r5, [r7, r6]
   3b538:	add	ip, r8, r5
   3b53c:	ldr	lr, [r4, #32]
   3b540:	add	lr, lr, #1
   3b544:	str	lr, [r4, #32]
   3b548:	add	r1, r1, #1
   3b54c:	str	r1, [r4, #20]
   3b550:	mov	r1, #123	; 0x7b
   3b554:	strb	r1, [r0, r2]
   3b558:	mov	r2, #0
   3b55c:	str	r2, [sp, #20]
   3b560:	str	r3, [sp, #16]
   3b564:	str	ip, [sp, #4]
   3b568:	ldr	r3, [r8, r5]
   3b56c:	sub	r3, ip, r3
   3b570:	str	r3, [sp, #8]
   3b574:	ldrh	r3, [r3]
   3b578:	str	r3, [sp, #12]
   3b57c:	add	r1, sp, #4
   3b580:	mov	r0, r4
   3b584:	ldr	r3, [sp, #68]	; 0x44
   3b588:	blx	r3
   3b58c:	ldrb	r3, [r4, #25]
   3b590:	cmp	r3, #0
   3b594:	bne	3b5b0 <flatcc_json_printer_table_field@@Base+0x248>
   3b598:	ldr	r3, [r4, #20]
   3b59c:	add	r2, r3, #1
   3b5a0:	str	r2, [r4, #20]
   3b5a4:	mov	r2, #125	; 0x7d
   3b5a8:	strb	r2, [r3]
   3b5ac:	b	3b52c <flatcc_json_printer_table_field@@Base+0x1c4>
   3b5b0:	ldr	r3, [r4, #20]
   3b5b4:	add	r2, r3, #1
   3b5b8:	str	r2, [r4, #20]
   3b5bc:	mov	r2, #10
   3b5c0:	strb	r2, [r3]
   3b5c4:	ldr	r5, [r4, #32]
   3b5c8:	sub	r5, r5, #1
   3b5cc:	str	r5, [r4, #32]
   3b5d0:	ldrb	r3, [r4, #25]
   3b5d4:	mul	r5, r5, r3
   3b5d8:	ldr	r0, [r4, #20]
   3b5dc:	add	r3, r0, r5
   3b5e0:	ldr	r2, [r4, #16]
   3b5e4:	cmp	r2, r3
   3b5e8:	bcc	3b608 <flatcc_json_printer_table_field@@Base+0x2a0>
   3b5ec:	mov	r2, r5
   3b5f0:	mov	r1, #32
   3b5f4:	bl	145c4 <memset@plt>
   3b5f8:	ldr	r3, [r4, #20]
   3b5fc:	add	r5, r3, r5
   3b600:	str	r5, [r4, #20]
   3b604:	b	3b598 <flatcc_json_printer_table_field@@Base+0x230>
   3b608:	mov	r1, r5
   3b60c:	mov	r0, r4
   3b610:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3b614:	b	3b598 <flatcc_json_printer_table_field@@Base+0x230>

0003b618 <flatcc_json_printer_union_field@@Base>:
   3b618:	push	{r4, r5, r6, r7, r8, r9, lr}
   3b61c:	sub	sp, sp, #20
   3b620:	add	r2, r2, #1
   3b624:	lsl	r2, r2, #1
   3b628:	ldr	ip, [r1, #8]
   3b62c:	cmp	r2, ip
   3b630:	movge	lr, #0
   3b634:	bge	3b650 <flatcc_json_printer_union_field@@Base+0x38>
   3b638:	ldr	lr, [r1, #4]
   3b63c:	ldrh	r4, [lr, r2]
   3b640:	cmp	r4, #0
   3b644:	ldrne	lr, [r1]
   3b648:	addne	lr, lr, r4
   3b64c:	moveq	lr, #0
   3b650:	add	r2, r2, #2
   3b654:	cmp	r2, ip
   3b658:	bge	3b7d8 <flatcc_json_printer_union_field@@Base+0x1c0>
   3b65c:	ldr	ip, [r1, #4]
   3b660:	ldrh	r2, [ip, r2]
   3b664:	cmp	r2, #0
   3b668:	beq	3b7d8 <flatcc_json_printer_union_field@@Base+0x1c0>
   3b66c:	ldr	r8, [r1]
   3b670:	adds	r8, r8, r2
   3b674:	moveq	r2, #1
   3b678:	movne	r2, #0
   3b67c:	cmp	lr, #0
   3b680:	orreq	r2, r2, #1
   3b684:	cmp	r2, #0
   3b688:	bne	3b7d8 <flatcc_json_printer_union_field@@Base+0x1c0>
   3b68c:	ldrb	r7, [lr]
   3b690:	ldr	r2, [r1, #16]
   3b694:	add	ip, r2, #1
   3b698:	str	ip, [r1, #16]
   3b69c:	cmp	r2, #0
   3b6a0:	ldrne	r2, [r0, #20]
   3b6a4:	addne	ip, r2, #1
   3b6a8:	strne	ip, [r0, #20]
   3b6ac:	movne	ip, #44	; 0x2c
   3b6b0:	strbne	ip, [r2]
   3b6b4:	mov	r6, r3
   3b6b8:	mov	r5, r1
   3b6bc:	mov	r4, r0
   3b6c0:	ldrb	r3, [r0, #25]
   3b6c4:	cmp	r3, #0
   3b6c8:	bne	3b7e0 <flatcc_json_printer_union_field@@Base+0x1c8>
   3b6cc:	ldr	r2, [r0, #20]
   3b6d0:	ldr	r3, [r0, #16]
   3b6d4:	cmp	r2, r3
   3b6d8:	bcs	3b840 <flatcc_json_printer_union_field@@Base+0x228>
   3b6dc:	ldr	r3, [r4, #20]
   3b6e0:	mov	r2, #34	; 0x22
   3b6e4:	strb	r2, [r3]
   3b6e8:	ldrb	r3, [r4, #26]
   3b6ec:	ldr	r0, [r4, #20]
   3b6f0:	cmp	r3, #0
   3b6f4:	addeq	r0, r0, #1
   3b6f8:	str	r0, [r4, #20]
   3b6fc:	ldr	r3, [sp, #48]	; 0x30
   3b700:	add	r3, r0, r3
   3b704:	ldr	r2, [r4, #16]
   3b708:	cmp	r2, r3
   3b70c:	bls	3b850 <flatcc_json_printer_union_field@@Base+0x238>
   3b710:	ldr	r2, [sp, #48]	; 0x30
   3b714:	mov	r1, r6
   3b718:	bl	1454c <memcpy@plt>
   3b71c:	ldr	r3, [r4, #20]
   3b720:	ldr	r2, [sp, #48]	; 0x30
   3b724:	add	r3, r3, r2
   3b728:	str	r3, [r4, #20]
   3b72c:	ldr	r3, [r4, #20]
   3b730:	add	r2, r3, #5
   3b734:	ldr	r1, [r4, #16]
   3b738:	cmp	r1, r2
   3b73c:	bls	3b864 <flatcc_json_printer_union_field@@Base+0x24c>
   3b740:	ldr	r2, [pc, #396]	; 3b8d4 <flatcc_json_printer_union_field@@Base+0x2bc>
   3b744:	ldr	r0, [r2]
   3b748:	str	r0, [r3]
   3b74c:	ldrb	r2, [r2, #4]
   3b750:	strb	r2, [r3, #4]
   3b754:	ldr	r3, [r4, #20]
   3b758:	add	r3, r3, #5
   3b75c:	str	r3, [r4, #20]
   3b760:	ldr	r3, [r4, #20]
   3b764:	mov	r2, #34	; 0x22
   3b768:	strb	r2, [r3]
   3b76c:	ldrb	r2, [r4, #26]
   3b770:	clz	r2, r2
   3b774:	lsr	r2, r2, #5
   3b778:	ldr	r1, [r4, #20]
   3b77c:	add	r3, r1, r2
   3b780:	add	r3, r3, #1
   3b784:	str	r3, [r4, #20]
   3b788:	mov	r3, #58	; 0x3a
   3b78c:	strb	r3, [r1, r2]
   3b790:	ldr	r3, [r4, #20]
   3b794:	mov	r2, #32
   3b798:	strb	r2, [r3]
   3b79c:	ldrb	r3, [r4, #25]
   3b7a0:	ldr	r1, [r4, #20]
   3b7a4:	cmp	r3, #0
   3b7a8:	addne	r1, r1, #1
   3b7ac:	str	r1, [r4, #20]
   3b7b0:	ldrb	r3, [r4, #27]
   3b7b4:	cmp	r3, #0
   3b7b8:	beq	3b878 <flatcc_json_printer_union_field@@Base+0x260>
   3b7bc:	mov	r0, r7
   3b7c0:	bl	2f8e8 <flatcc_json_parser_struct_as_root@@Base+0xd8>
   3b7c4:	ldr	r3, [r4, #20]
   3b7c8:	add	r0, r3, r0
   3b7cc:	str	r0, [r4, #20]
   3b7d0:	cmp	r7, #0
   3b7d4:	bne	3b88c <flatcc_json_printer_union_field@@Base+0x274>
   3b7d8:	add	sp, sp, #20
   3b7dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3b7e0:	ldr	r3, [r0, #20]
   3b7e4:	add	r2, r3, #1
   3b7e8:	str	r2, [r0, #20]
   3b7ec:	mov	r2, #10
   3b7f0:	strb	r2, [r3]
   3b7f4:	ldrb	r3, [r0, #25]
   3b7f8:	ldr	r9, [r0, #32]
   3b7fc:	mul	r9, r9, r3
   3b800:	ldr	r0, [r0, #20]
   3b804:	add	r3, r0, r9
   3b808:	ldr	r2, [r4, #16]
   3b80c:	cmp	r2, r3
   3b810:	bcc	3b830 <flatcc_json_printer_union_field@@Base+0x218>
   3b814:	mov	r2, r9
   3b818:	mov	r1, #32
   3b81c:	bl	145c4 <memset@plt>
   3b820:	ldr	r3, [r4, #20]
   3b824:	add	r9, r3, r9
   3b828:	str	r9, [r4, #20]
   3b82c:	b	3b6dc <flatcc_json_printer_union_field@@Base+0xc4>
   3b830:	mov	r1, r9
   3b834:	mov	r0, r4
   3b838:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3b83c:	b	3b6dc <flatcc_json_printer_union_field@@Base+0xc4>
   3b840:	ldr	r3, [r0, #44]	; 0x2c
   3b844:	mov	r1, #0
   3b848:	blx	r3
   3b84c:	b	3b6dc <flatcc_json_printer_union_field@@Base+0xc4>
   3b850:	ldr	r2, [sp, #48]	; 0x30
   3b854:	mov	r1, r6
   3b858:	mov	r0, r4
   3b85c:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3b860:	b	3b72c <flatcc_json_printer_union_field@@Base+0x114>
   3b864:	mov	r2, #5
   3b868:	ldr	r1, [pc, #100]	; 3b8d4 <flatcc_json_printer_union_field@@Base+0x2bc>
   3b86c:	mov	r0, r4
   3b870:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3b874:	b	3b760 <flatcc_json_printer_union_field@@Base+0x148>
   3b878:	mov	r1, r7
   3b87c:	mov	r0, r4
   3b880:	ldr	r3, [sp, #52]	; 0x34
   3b884:	blx	r3
   3b888:	b	3b7d0 <flatcc_json_printer_union_field@@Base+0x1b8>
   3b88c:	ldr	r3, [r4, #20]
   3b890:	add	r2, r3, #1
   3b894:	str	r2, [r4, #20]
   3b898:	mov	r2, #44	; 0x2c
   3b89c:	strb	r2, [r3]
   3b8a0:	ldr	r2, [sp, #48]	; 0x30
   3b8a4:	mov	r1, r6
   3b8a8:	mov	r0, r4
   3b8ac:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3b8b0:	ldr	r3, [r5, #12]
   3b8b4:	str	r3, [sp, #8]
   3b8b8:	strb	r7, [sp, #12]
   3b8bc:	add	r1, sp, #16
   3b8c0:	str	r8, [r1, #-12]!
   3b8c4:	mov	r0, r4
   3b8c8:	ldr	r3, [sp, #56]	; 0x38
   3b8cc:	blx	r3
   3b8d0:	b	3b7d8 <flatcc_json_printer_union_field@@Base+0x1c0>
   3b8d4:	muleq	r4, r4, r7

0003b8d8 <flatcc_json_printer_union_table@@Base>:
   3b8d8:	ldr	r3, [r1, #4]
   3b8dc:	subs	r3, r3, #1
   3b8e0:	bne	3b8f8 <flatcc_json_printer_union_table@@Base+0x20>
   3b8e4:	ldr	r3, [r0, #36]	; 0x24
   3b8e8:	cmp	r3, #0
   3b8ec:	moveq	r3, #2
   3b8f0:	streq	r3, [r0, #36]	; 0x24
   3b8f4:	bx	lr
   3b8f8:	push	{r4, r5, lr}
   3b8fc:	sub	sp, sp, #28
   3b900:	mov	r4, r0
   3b904:	ldr	r0, [r1]
   3b908:	ldr	lr, [r0]
   3b90c:	add	r1, r0, lr
   3b910:	ldr	ip, [r4, #32]
   3b914:	add	ip, ip, #1
   3b918:	str	ip, [r4, #32]
   3b91c:	ldr	ip, [r4, #20]
   3b920:	add	r5, ip, #1
   3b924:	str	r5, [r4, #20]
   3b928:	mov	r5, #123	; 0x7b
   3b92c:	strb	r5, [ip]
   3b930:	mov	ip, #0
   3b934:	str	ip, [sp, #20]
   3b938:	str	r3, [sp, #16]
   3b93c:	str	r1, [sp, #4]
   3b940:	ldr	r3, [r0, lr]
   3b944:	sub	r3, r1, r3
   3b948:	str	r3, [sp, #8]
   3b94c:	ldrh	r3, [r3]
   3b950:	str	r3, [sp, #12]
   3b954:	add	r1, sp, #4
   3b958:	mov	r0, r4
   3b95c:	blx	r2
   3b960:	ldrb	r3, [r4, #25]
   3b964:	cmp	r3, #0
   3b968:	bne	3b988 <flatcc_json_printer_union_table@@Base+0xb0>
   3b96c:	ldr	r3, [r4, #20]
   3b970:	add	r2, r3, #1
   3b974:	str	r2, [r4, #20]
   3b978:	mov	r2, #125	; 0x7d
   3b97c:	strb	r2, [r3]
   3b980:	add	sp, sp, #28
   3b984:	pop	{r4, r5, pc}
   3b988:	ldr	r3, [r4, #20]
   3b98c:	add	r2, r3, #1
   3b990:	str	r2, [r4, #20]
   3b994:	mov	r2, #10
   3b998:	strb	r2, [r3]
   3b99c:	ldr	r5, [r4, #32]
   3b9a0:	sub	r5, r5, #1
   3b9a4:	str	r5, [r4, #32]
   3b9a8:	ldrb	r3, [r4, #25]
   3b9ac:	mul	r5, r5, r3
   3b9b0:	ldr	r0, [r4, #20]
   3b9b4:	add	r3, r0, r5
   3b9b8:	ldr	r2, [r4, #16]
   3b9bc:	cmp	r2, r3
   3b9c0:	bcc	3b9e0 <flatcc_json_printer_union_table@@Base+0x108>
   3b9c4:	mov	r2, r5
   3b9c8:	mov	r1, #32
   3b9cc:	bl	145c4 <memset@plt>
   3b9d0:	ldr	r3, [r4, #20]
   3b9d4:	add	r5, r3, r5
   3b9d8:	str	r5, [r4, #20]
   3b9dc:	b	3b96c <flatcc_json_printer_union_table@@Base+0x94>
   3b9e0:	mov	r1, r5
   3b9e4:	mov	r0, r4
   3b9e8:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3b9ec:	b	3b96c <flatcc_json_printer_union_table@@Base+0x94>

0003b9f0 <flatcc_json_printer_union_struct@@Base>:
   3b9f0:	push	{r4, r5, r6, lr}
   3b9f4:	mov	r4, r0
   3b9f8:	ldr	r3, [r0, #32]
   3b9fc:	add	r3, r3, #1
   3ba00:	str	r3, [r0, #32]
   3ba04:	ldr	r3, [r0, #20]
   3ba08:	add	ip, r3, #1
   3ba0c:	str	ip, [r0, #20]
   3ba10:	mov	ip, #123	; 0x7b
   3ba14:	strb	ip, [r3]
   3ba18:	ldr	r3, [r1]
   3ba1c:	ldr	r1, [r3]
   3ba20:	add	r1, r3, r1
   3ba24:	blx	r2
   3ba28:	ldrb	r3, [r4, #25]
   3ba2c:	cmp	r3, #0
   3ba30:	bne	3ba4c <flatcc_json_printer_union_struct@@Base+0x5c>
   3ba34:	ldr	r3, [r4, #20]
   3ba38:	add	r2, r3, #1
   3ba3c:	str	r2, [r4, #20]
   3ba40:	mov	r2, #125	; 0x7d
   3ba44:	strb	r2, [r3]
   3ba48:	pop	{r4, r5, r6, pc}
   3ba4c:	ldr	r3, [r4, #20]
   3ba50:	add	r2, r3, #1
   3ba54:	str	r2, [r4, #20]
   3ba58:	mov	r2, #10
   3ba5c:	strb	r2, [r3]
   3ba60:	ldr	r5, [r4, #32]
   3ba64:	sub	r5, r5, #1
   3ba68:	str	r5, [r4, #32]
   3ba6c:	ldrb	r3, [r4, #25]
   3ba70:	mul	r5, r5, r3
   3ba74:	ldr	r0, [r4, #20]
   3ba78:	add	r3, r0, r5
   3ba7c:	ldr	r2, [r4, #16]
   3ba80:	cmp	r2, r3
   3ba84:	bcc	3baa4 <flatcc_json_printer_union_struct@@Base+0xb4>
   3ba88:	mov	r2, r5
   3ba8c:	mov	r1, #32
   3ba90:	bl	145c4 <memset@plt>
   3ba94:	ldr	r3, [r4, #20]
   3ba98:	add	r5, r3, r5
   3ba9c:	str	r5, [r4, #20]
   3baa0:	b	3ba34 <flatcc_json_printer_union_struct@@Base+0x44>
   3baa4:	mov	r1, r5
   3baa8:	mov	r0, r4
   3baac:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3bab0:	b	3ba34 <flatcc_json_printer_union_struct@@Base+0x44>

0003bab4 <flatcc_json_printer_union_string@@Base>:
   3bab4:	push	{r4, lr}
   3bab8:	ldr	r3, [r1]
   3babc:	ldr	r2, [r3]
   3bac0:	add	r1, r3, r2
   3bac4:	ldr	r2, [r3, r2]
   3bac8:	add	r1, r1, #4
   3bacc:	bl	30f78 <flatcc_json_parser_struct_as_root@@Base+0x1768>
   3bad0:	pop	{r4, pc}

0003bad4 <flatcc_json_printer_embedded_struct_field@@Base>:
   3bad4:	push	{r4, r5, r6, r7, r8, lr}
   3bad8:	mov	r4, r0
   3badc:	mov	r6, r2
   3bae0:	mov	r5, r3
   3bae4:	ldr	r7, [sp, #28]
   3bae8:	cmp	r1, #0
   3baec:	ldrne	r3, [r0, #20]
   3baf0:	addne	r2, r3, #1
   3baf4:	strne	r2, [r0, #20]
   3baf8:	movne	r2, #44	; 0x2c
   3bafc:	strbne	r2, [r3]
   3bb00:	ldrb	r3, [r0, #25]
   3bb04:	cmp	r3, #0
   3bb08:	bne	3bb60 <flatcc_json_printer_embedded_struct_field@@Base+0x8c>
   3bb0c:	ldr	r2, [r0, #20]
   3bb10:	ldr	r3, [r0, #16]
   3bb14:	cmp	r2, r3
   3bb18:	bcs	3bbc0 <flatcc_json_printer_embedded_struct_field@@Base+0xec>
   3bb1c:	ldr	r3, [r4, #20]
   3bb20:	mov	r2, #34	; 0x22
   3bb24:	strb	r2, [r3]
   3bb28:	ldrb	r3, [r4, #26]
   3bb2c:	ldr	r0, [r4, #20]
   3bb30:	cmp	r3, #0
   3bb34:	addeq	r0, r0, #1
   3bb38:	str	r0, [r4, #20]
   3bb3c:	add	r3, r0, r7
   3bb40:	ldr	r2, [r4, #16]
   3bb44:	cmp	r2, r3
   3bb48:	bhi	3bbd0 <flatcc_json_printer_embedded_struct_field@@Base+0xfc>
   3bb4c:	mov	r2, r7
   3bb50:	ldr	r1, [sp, #24]
   3bb54:	mov	r0, r4
   3bb58:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3bb5c:	b	3bbe8 <flatcc_json_printer_embedded_struct_field@@Base+0x114>
   3bb60:	ldr	r3, [r0, #20]
   3bb64:	add	r2, r3, #1
   3bb68:	str	r2, [r0, #20]
   3bb6c:	mov	r2, #10
   3bb70:	strb	r2, [r3]
   3bb74:	ldrb	r3, [r0, #25]
   3bb78:	ldr	r8, [r0, #32]
   3bb7c:	mul	r8, r8, r3
   3bb80:	ldr	r0, [r0, #20]
   3bb84:	add	r3, r0, r8
   3bb88:	ldr	r2, [r4, #16]
   3bb8c:	cmp	r2, r3
   3bb90:	bcc	3bbb0 <flatcc_json_printer_embedded_struct_field@@Base+0xdc>
   3bb94:	mov	r2, r8
   3bb98:	mov	r1, #32
   3bb9c:	bl	145c4 <memset@plt>
   3bba0:	ldr	r3, [r4, #20]
   3bba4:	add	r8, r3, r8
   3bba8:	str	r8, [r4, #20]
   3bbac:	b	3bb1c <flatcc_json_printer_embedded_struct_field@@Base+0x48>
   3bbb0:	mov	r1, r8
   3bbb4:	mov	r0, r4
   3bbb8:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3bbbc:	b	3bb1c <flatcc_json_printer_embedded_struct_field@@Base+0x48>
   3bbc0:	ldr	r3, [r0, #44]	; 0x2c
   3bbc4:	mov	r1, #0
   3bbc8:	blx	r3
   3bbcc:	b	3bb1c <flatcc_json_printer_embedded_struct_field@@Base+0x48>
   3bbd0:	mov	r2, r7
   3bbd4:	ldr	r1, [sp, #24]
   3bbd8:	bl	1454c <memcpy@plt>
   3bbdc:	ldr	r3, [r4, #20]
   3bbe0:	add	r7, r3, r7
   3bbe4:	str	r7, [r4, #20]
   3bbe8:	ldr	r3, [r4, #20]
   3bbec:	mov	r2, #34	; 0x22
   3bbf0:	strb	r2, [r3]
   3bbf4:	ldrb	r3, [r4, #26]
   3bbf8:	clz	r3, r3
   3bbfc:	lsr	r3, r3, #5
   3bc00:	ldr	r1, [r4, #20]
   3bc04:	add	r2, r1, r3
   3bc08:	add	r2, r2, #1
   3bc0c:	str	r2, [r4, #20]
   3bc10:	mov	r2, #58	; 0x3a
   3bc14:	strb	r2, [r1, r3]
   3bc18:	ldr	r3, [r4, #20]
   3bc1c:	mov	r2, #32
   3bc20:	strb	r2, [r3]
   3bc24:	ldrb	r3, [r4, #25]
   3bc28:	adds	r3, r3, #0
   3bc2c:	movne	r3, #1
   3bc30:	ldr	r0, [r4, #20]
   3bc34:	add	r2, r0, r3
   3bc38:	ldr	r1, [r4, #32]
   3bc3c:	add	r1, r1, #1
   3bc40:	str	r1, [r4, #32]
   3bc44:	add	r2, r2, #1
   3bc48:	str	r2, [r4, #20]
   3bc4c:	mov	r2, #123	; 0x7b
   3bc50:	strb	r2, [r0, r3]
   3bc54:	add	r1, r6, r5
   3bc58:	mov	r0, r4
   3bc5c:	ldr	r3, [sp, #32]
   3bc60:	blx	r3
   3bc64:	ldrb	r3, [r4, #25]
   3bc68:	cmp	r3, #0
   3bc6c:	bne	3bc88 <flatcc_json_printer_embedded_struct_field@@Base+0x1b4>
   3bc70:	ldr	r3, [r4, #20]
   3bc74:	add	r2, r3, #1
   3bc78:	str	r2, [r4, #20]
   3bc7c:	mov	r2, #125	; 0x7d
   3bc80:	strb	r2, [r3]
   3bc84:	pop	{r4, r5, r6, r7, r8, pc}
   3bc88:	ldr	r3, [r4, #20]
   3bc8c:	add	r2, r3, #1
   3bc90:	str	r2, [r4, #20]
   3bc94:	mov	r2, #10
   3bc98:	strb	r2, [r3]
   3bc9c:	ldr	r5, [r4, #32]
   3bca0:	sub	r5, r5, #1
   3bca4:	str	r5, [r4, #32]
   3bca8:	ldrb	r3, [r4, #25]
   3bcac:	mul	r5, r5, r3
   3bcb0:	ldr	r0, [r4, #20]
   3bcb4:	add	r3, r0, r5
   3bcb8:	ldr	r2, [r4, #16]
   3bcbc:	cmp	r2, r3
   3bcc0:	bcc	3bce0 <flatcc_json_printer_embedded_struct_field@@Base+0x20c>
   3bcc4:	mov	r2, r5
   3bcc8:	mov	r1, #32
   3bccc:	bl	145c4 <memset@plt>
   3bcd0:	ldr	r3, [r4, #20]
   3bcd4:	add	r5, r3, r5
   3bcd8:	str	r5, [r4, #20]
   3bcdc:	b	3bc70 <flatcc_json_printer_embedded_struct_field@@Base+0x19c>
   3bce0:	mov	r1, r5
   3bce4:	mov	r0, r4
   3bce8:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3bcec:	b	3bc70 <flatcc_json_printer_embedded_struct_field@@Base+0x19c>

0003bcf0 <flatcc_json_printer_struct_field@@Base>:
   3bcf0:	push	{r4, r5, r6, r7, r8, lr}
   3bcf4:	ldr	r6, [sp, #24]
   3bcf8:	add	r2, r2, #2
   3bcfc:	lsl	r2, r2, #1
   3bd00:	ldr	ip, [r1, #8]
   3bd04:	cmp	r2, ip
   3bd08:	popge	{r4, r5, r6, r7, r8, pc}
   3bd0c:	ldr	ip, [r1, #4]
   3bd10:	ldrh	r2, [ip, r2]
   3bd14:	cmp	r2, #0
   3bd18:	popeq	{r4, r5, r6, r7, r8, pc}
   3bd1c:	ldr	r5, [r1]
   3bd20:	adds	r5, r5, r2
   3bd24:	popeq	{r4, r5, r6, r7, r8, pc}
   3bd28:	ldr	r2, [r1, #16]
   3bd2c:	add	ip, r2, #1
   3bd30:	str	ip, [r1, #16]
   3bd34:	cmp	r2, #0
   3bd38:	ldrne	r2, [r0, #20]
   3bd3c:	addne	r1, r2, #1
   3bd40:	strne	r1, [r0, #20]
   3bd44:	movne	r1, #44	; 0x2c
   3bd48:	strbne	r1, [r2]
   3bd4c:	mov	r7, r3
   3bd50:	mov	r4, r0
   3bd54:	ldrb	r3, [r0, #25]
   3bd58:	cmp	r3, #0
   3bd5c:	bne	3bdb4 <flatcc_json_printer_struct_field@@Base+0xc4>
   3bd60:	ldr	r2, [r0, #20]
   3bd64:	ldr	r3, [r0, #16]
   3bd68:	cmp	r2, r3
   3bd6c:	bcs	3be14 <flatcc_json_printer_struct_field@@Base+0x124>
   3bd70:	ldr	r3, [r4, #20]
   3bd74:	mov	r2, #34	; 0x22
   3bd78:	strb	r2, [r3]
   3bd7c:	ldrb	r3, [r4, #26]
   3bd80:	ldr	r0, [r4, #20]
   3bd84:	cmp	r3, #0
   3bd88:	addeq	r0, r0, #1
   3bd8c:	str	r0, [r4, #20]
   3bd90:	add	r3, r0, r6
   3bd94:	ldr	r2, [r4, #16]
   3bd98:	cmp	r2, r3
   3bd9c:	bhi	3be24 <flatcc_json_printer_struct_field@@Base+0x134>
   3bda0:	mov	r2, r6
   3bda4:	mov	r1, r7
   3bda8:	mov	r0, r4
   3bdac:	bl	30b84 <flatcc_json_parser_struct_as_root@@Base+0x1374>
   3bdb0:	b	3be3c <flatcc_json_printer_struct_field@@Base+0x14c>
   3bdb4:	ldr	r3, [r0, #20]
   3bdb8:	add	r2, r3, #1
   3bdbc:	str	r2, [r0, #20]
   3bdc0:	mov	r2, #10
   3bdc4:	strb	r2, [r3]
   3bdc8:	ldrb	r3, [r0, #25]
   3bdcc:	ldr	r8, [r0, #32]
   3bdd0:	mul	r8, r8, r3
   3bdd4:	ldr	r0, [r0, #20]
   3bdd8:	add	r3, r0, r8
   3bddc:	ldr	r2, [r4, #16]
   3bde0:	cmp	r2, r3
   3bde4:	bcc	3be04 <flatcc_json_printer_struct_field@@Base+0x114>
   3bde8:	mov	r2, r8
   3bdec:	mov	r1, #32
   3bdf0:	bl	145c4 <memset@plt>
   3bdf4:	ldr	r3, [r4, #20]
   3bdf8:	add	r8, r3, r8
   3bdfc:	str	r8, [r4, #20]
   3be00:	b	3bd70 <flatcc_json_printer_struct_field@@Base+0x80>
   3be04:	mov	r1, r8
   3be08:	mov	r0, r4
   3be0c:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3be10:	b	3bd70 <flatcc_json_printer_struct_field@@Base+0x80>
   3be14:	ldr	r3, [r0, #44]	; 0x2c
   3be18:	mov	r1, #0
   3be1c:	blx	r3
   3be20:	b	3bd70 <flatcc_json_printer_struct_field@@Base+0x80>
   3be24:	mov	r2, r6
   3be28:	mov	r1, r7
   3be2c:	bl	1454c <memcpy@plt>
   3be30:	ldr	r3, [r4, #20]
   3be34:	add	r6, r3, r6
   3be38:	str	r6, [r4, #20]
   3be3c:	ldr	r3, [r4, #20]
   3be40:	mov	r2, #34	; 0x22
   3be44:	strb	r2, [r3]
   3be48:	ldrb	r3, [r4, #26]
   3be4c:	clz	r3, r3
   3be50:	lsr	r3, r3, #5
   3be54:	ldr	r1, [r4, #20]
   3be58:	add	r2, r1, r3
   3be5c:	add	r2, r2, #1
   3be60:	str	r2, [r4, #20]
   3be64:	mov	r2, #58	; 0x3a
   3be68:	strb	r2, [r1, r3]
   3be6c:	ldr	r3, [r4, #20]
   3be70:	mov	r2, #32
   3be74:	strb	r2, [r3]
   3be78:	ldrb	r3, [r4, #25]
   3be7c:	adds	r3, r3, #0
   3be80:	movne	r3, #1
   3be84:	ldr	r0, [r4, #20]
   3be88:	add	r2, r0, r3
   3be8c:	ldr	r1, [r4, #32]
   3be90:	add	r1, r1, #1
   3be94:	str	r1, [r4, #32]
   3be98:	add	r2, r2, #1
   3be9c:	str	r2, [r4, #20]
   3bea0:	mov	r2, #123	; 0x7b
   3bea4:	strb	r2, [r0, r3]
   3bea8:	mov	r1, r5
   3beac:	mov	r0, r4
   3beb0:	ldr	r3, [sp, #28]
   3beb4:	blx	r3
   3beb8:	ldrb	r3, [r4, #25]
   3bebc:	cmp	r3, #0
   3bec0:	bne	3bedc <flatcc_json_printer_struct_field@@Base+0x1ec>
   3bec4:	ldr	r3, [r4, #20]
   3bec8:	add	r2, r3, #1
   3becc:	str	r2, [r4, #20]
   3bed0:	mov	r2, #125	; 0x7d
   3bed4:	strb	r2, [r3]
   3bed8:	pop	{r4, r5, r6, r7, r8, pc}
   3bedc:	ldr	r3, [r4, #20]
   3bee0:	add	r2, r3, #1
   3bee4:	str	r2, [r4, #20]
   3bee8:	mov	r2, #10
   3beec:	strb	r2, [r3]
   3bef0:	ldr	r5, [r4, #32]
   3bef4:	sub	r5, r5, #1
   3bef8:	str	r5, [r4, #32]
   3befc:	ldrb	r3, [r4, #25]
   3bf00:	mul	r5, r5, r3
   3bf04:	ldr	r0, [r4, #20]
   3bf08:	add	r3, r0, r5
   3bf0c:	ldr	r2, [r4, #16]
   3bf10:	cmp	r2, r3
   3bf14:	bcc	3bf34 <flatcc_json_printer_struct_field@@Base+0x244>
   3bf18:	mov	r2, r5
   3bf1c:	mov	r1, #32
   3bf20:	bl	145c4 <memset@plt>
   3bf24:	ldr	r3, [r4, #20]
   3bf28:	add	r5, r3, r5
   3bf2c:	str	r5, [r4, #20]
   3bf30:	b	3bec4 <flatcc_json_printer_struct_field@@Base+0x1d4>
   3bf34:	mov	r1, r5
   3bf38:	mov	r0, r4
   3bf3c:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3bf40:	b	3bec4 <flatcc_json_printer_struct_field@@Base+0x1d4>

0003bf44 <flatcc_json_printer_struct_as_root@@Base>:
   3bf44:	push	{r4, r5, r6, lr}
   3bf48:	mov	r4, r0
   3bf4c:	mov	r5, r1
   3bf50:	bl	30d6c <flatcc_json_parser_struct_as_root@@Base+0x155c>
   3bf54:	cmp	r0, #0
   3bf58:	beq	3c074 <flatcc_json_printer_struct_as_root@@Base+0x130>
   3bf5c:	ldr	r3, [r4, #32]
   3bf60:	add	r3, r3, #1
   3bf64:	str	r3, [r4, #32]
   3bf68:	ldr	r3, [r4, #20]
   3bf6c:	add	r2, r3, #1
   3bf70:	str	r2, [r4, #20]
   3bf74:	mov	r2, #123	; 0x7b
   3bf78:	strb	r2, [r3]
   3bf7c:	ldr	r1, [r5]
   3bf80:	add	r1, r5, r1
   3bf84:	mov	r0, r4
   3bf88:	ldr	r3, [sp, #16]
   3bf8c:	blx	r3
   3bf90:	ldrb	r3, [r4, #25]
   3bf94:	cmp	r3, #0
   3bf98:	bne	3c00c <flatcc_json_printer_struct_as_root@@Base+0xc8>
   3bf9c:	ldr	r3, [r4, #20]
   3bfa0:	add	r2, r3, #1
   3bfa4:	str	r2, [r4, #20]
   3bfa8:	mov	r2, #125	; 0x7d
   3bfac:	strb	r2, [r3]
   3bfb0:	ldrb	r3, [r4, #25]
   3bfb4:	cmp	r3, #0
   3bfb8:	beq	3bfd8 <flatcc_json_printer_struct_as_root@@Base+0x94>
   3bfbc:	ldr	r3, [r4, #32]
   3bfc0:	cmp	r3, #0
   3bfc4:	ldreq	r3, [r4, #20]
   3bfc8:	addeq	r2, r3, #1
   3bfcc:	streq	r2, [r4, #20]
   3bfd0:	moveq	r2, #10
   3bfd4:	strbeq	r2, [r3]
   3bfd8:	ldr	r3, [r4, #44]	; 0x2c
   3bfdc:	mov	r1, #1
   3bfe0:	mov	r0, r4
   3bfe4:	blx	r3
   3bfe8:	ldr	r3, [r4, #36]	; 0x24
   3bfec:	cmp	r3, #0
   3bff0:	bne	3c07c <flatcc_json_printer_struct_as_root@@Base+0x138>
   3bff4:	ldr	r0, [r4, #20]
   3bff8:	ldr	r3, [r4]
   3bffc:	sub	r0, r0, r3
   3c000:	ldr	r3, [r4, #12]
   3c004:	add	r0, r0, r3
   3c008:	pop	{r4, r5, r6, pc}
   3c00c:	ldr	r3, [r4, #20]
   3c010:	add	r2, r3, #1
   3c014:	str	r2, [r4, #20]
   3c018:	mov	r2, #10
   3c01c:	strb	r2, [r3]
   3c020:	ldr	r5, [r4, #32]
   3c024:	sub	r5, r5, #1
   3c028:	str	r5, [r4, #32]
   3c02c:	ldrb	r3, [r4, #25]
   3c030:	mul	r5, r5, r3
   3c034:	ldr	r0, [r4, #20]
   3c038:	add	r3, r0, r5
   3c03c:	ldr	r2, [r4, #16]
   3c040:	cmp	r2, r3
   3c044:	bcc	3c064 <flatcc_json_printer_struct_as_root@@Base+0x120>
   3c048:	mov	r2, r5
   3c04c:	mov	r1, #32
   3c050:	bl	145c4 <memset@plt>
   3c054:	ldr	r3, [r4, #20]
   3c058:	add	r5, r3, r5
   3c05c:	str	r5, [r4, #20]
   3c060:	b	3bf9c <flatcc_json_printer_struct_as_root@@Base+0x58>
   3c064:	mov	r1, r5
   3c068:	mov	r0, r4
   3c06c:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3c070:	b	3bf9c <flatcc_json_printer_struct_as_root@@Base+0x58>
   3c074:	mvn	r0, #0
   3c078:	pop	{r4, r5, r6, pc}
   3c07c:	mvn	r0, #0
   3c080:	pop	{r4, r5, r6, pc}

0003c084 <flatcc_json_printer_table_as_root@@Base>:
   3c084:	push	{r4, r5, lr}
   3c088:	sub	sp, sp, #28
   3c08c:	mov	r4, r0
   3c090:	mov	r5, r1
   3c094:	bl	30d6c <flatcc_json_parser_struct_as_root@@Base+0x155c>
   3c098:	cmp	r0, #0
   3c09c:	beq	3c1e8 <flatcc_json_printer_table_as_root@@Base+0x164>
   3c0a0:	ldr	r1, [r5]
   3c0a4:	add	r3, r5, r1
   3c0a8:	ldr	r2, [r4, #32]
   3c0ac:	add	r2, r2, #1
   3c0b0:	str	r2, [r4, #32]
   3c0b4:	ldr	r2, [r4, #20]
   3c0b8:	add	r0, r2, #1
   3c0bc:	str	r0, [r4, #20]
   3c0c0:	mov	r0, #123	; 0x7b
   3c0c4:	strb	r0, [r2]
   3c0c8:	mov	r2, #0
   3c0cc:	str	r2, [sp, #20]
   3c0d0:	mov	r2, #99	; 0x63
   3c0d4:	str	r2, [sp, #16]
   3c0d8:	str	r3, [sp, #4]
   3c0dc:	ldr	r2, [r5, r1]
   3c0e0:	sub	r3, r3, r2
   3c0e4:	str	r3, [sp, #8]
   3c0e8:	ldrh	r3, [r3]
   3c0ec:	str	r3, [sp, #12]
   3c0f0:	add	r1, sp, #4
   3c0f4:	mov	r0, r4
   3c0f8:	ldr	r3, [sp, #40]	; 0x28
   3c0fc:	blx	r3
   3c100:	ldrb	r3, [r4, #25]
   3c104:	cmp	r3, #0
   3c108:	bne	3c180 <flatcc_json_printer_table_as_root@@Base+0xfc>
   3c10c:	ldr	r3, [r4, #20]
   3c110:	add	r2, r3, #1
   3c114:	str	r2, [r4, #20]
   3c118:	mov	r2, #125	; 0x7d
   3c11c:	strb	r2, [r3]
   3c120:	ldrb	r3, [r4, #25]
   3c124:	cmp	r3, #0
   3c128:	beq	3c148 <flatcc_json_printer_table_as_root@@Base+0xc4>
   3c12c:	ldr	r3, [r4, #32]
   3c130:	cmp	r3, #0
   3c134:	ldreq	r3, [r4, #20]
   3c138:	addeq	r2, r3, #1
   3c13c:	streq	r2, [r4, #20]
   3c140:	moveq	r2, #10
   3c144:	strbeq	r2, [r3]
   3c148:	ldr	r3, [r4, #44]	; 0x2c
   3c14c:	mov	r1, #1
   3c150:	mov	r0, r4
   3c154:	blx	r3
   3c158:	ldr	r3, [r4, #36]	; 0x24
   3c15c:	cmp	r3, #0
   3c160:	bne	3c1f0 <flatcc_json_printer_table_as_root@@Base+0x16c>
   3c164:	ldr	r0, [r4, #20]
   3c168:	ldr	r3, [r4]
   3c16c:	sub	r0, r0, r3
   3c170:	ldr	r3, [r4, #12]
   3c174:	add	r0, r0, r3
   3c178:	add	sp, sp, #28
   3c17c:	pop	{r4, r5, pc}
   3c180:	ldr	r3, [r4, #20]
   3c184:	add	r2, r3, #1
   3c188:	str	r2, [r4, #20]
   3c18c:	mov	r2, #10
   3c190:	strb	r2, [r3]
   3c194:	ldr	r5, [r4, #32]
   3c198:	sub	r5, r5, #1
   3c19c:	str	r5, [r4, #32]
   3c1a0:	ldrb	r3, [r4, #25]
   3c1a4:	mul	r5, r5, r3
   3c1a8:	ldr	r0, [r4, #20]
   3c1ac:	add	r3, r0, r5
   3c1b0:	ldr	r2, [r4, #16]
   3c1b4:	cmp	r2, r3
   3c1b8:	bcc	3c1d8 <flatcc_json_printer_table_as_root@@Base+0x154>
   3c1bc:	mov	r2, r5
   3c1c0:	mov	r1, #32
   3c1c4:	bl	145c4 <memset@plt>
   3c1c8:	ldr	r3, [r4, #20]
   3c1cc:	add	r5, r3, r5
   3c1d0:	str	r5, [r4, #20]
   3c1d4:	b	3c10c <flatcc_json_printer_table_as_root@@Base+0x88>
   3c1d8:	mov	r1, r5
   3c1dc:	mov	r0, r4
   3c1e0:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3c1e4:	b	3c10c <flatcc_json_printer_table_as_root@@Base+0x88>
   3c1e8:	mvn	r0, #0
   3c1ec:	b	3c178 <flatcc_json_printer_table_as_root@@Base+0xf4>
   3c1f0:	mvn	r0, #0
   3c1f4:	b	3c178 <flatcc_json_printer_table_as_root@@Base+0xf4>

0003c1f8 <flatcc_json_printer_struct_as_nested_root@@Base>:
   3c1f8:	add	r2, r2, #2
   3c1fc:	lsl	r2, r2, #1
   3c200:	ldr	ip, [r1, #8]
   3c204:	cmp	r2, ip
   3c208:	bxge	lr
   3c20c:	ldr	ip, [r1, #4]
   3c210:	ldrh	r2, [ip, r2]
   3c214:	cmp	r2, #0
   3c218:	bxeq	lr
   3c21c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3c220:	ldr	ip, [r1]
   3c224:	adds	r8, ip, r2
   3c228:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3c22c:	mov	r6, r3
   3c230:	mov	r5, r1
   3c234:	mov	r4, r0
   3c238:	ldr	r7, [ip, r2]
   3c23c:	add	r9, r8, r7
   3c240:	ldr	r3, [sp, #36]	; 0x24
   3c244:	ldr	r2, [r8, r7]
   3c248:	mov	r1, r9
   3c24c:	bl	30d6c <flatcc_json_parser_struct_as_root@@Base+0x155c>
   3c250:	cmp	r0, #0
   3c254:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3c258:	ldr	r3, [r5, #16]
   3c25c:	add	r2, r3, #1
   3c260:	str	r2, [r5, #16]
   3c264:	cmp	r3, #0
   3c268:	ldrne	r3, [r4, #20]
   3c26c:	addne	r2, r3, #1
   3c270:	strne	r2, [r4, #20]
   3c274:	movne	r2, #44	; 0x2c
   3c278:	strbne	r2, [r3]
   3c27c:	ldr	r2, [sp, #32]
   3c280:	mov	r1, r6
   3c284:	mov	r0, r4
   3c288:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3c28c:	ldr	r3, [r4, #32]
   3c290:	add	r3, r3, #1
   3c294:	str	r3, [r4, #32]
   3c298:	ldr	r3, [r4, #20]
   3c29c:	add	r2, r3, #1
   3c2a0:	str	r2, [r4, #20]
   3c2a4:	mov	r2, #123	; 0x7b
   3c2a8:	strb	r2, [r3]
   3c2ac:	ldr	r1, [r8, r7]
   3c2b0:	add	r1, r9, r1
   3c2b4:	mov	r0, r4
   3c2b8:	ldr	r3, [sp, #40]	; 0x28
   3c2bc:	blx	r3
   3c2c0:	ldrb	r3, [r4, #25]
   3c2c4:	cmp	r3, #0
   3c2c8:	bne	3c2e4 <flatcc_json_printer_struct_as_nested_root@@Base+0xec>
   3c2cc:	ldr	r3, [r4, #20]
   3c2d0:	add	r2, r3, #1
   3c2d4:	str	r2, [r4, #20]
   3c2d8:	mov	r2, #125	; 0x7d
   3c2dc:	strb	r2, [r3]
   3c2e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3c2e4:	ldr	r3, [r4, #20]
   3c2e8:	add	r2, r3, #1
   3c2ec:	str	r2, [r4, #20]
   3c2f0:	mov	r2, #10
   3c2f4:	strb	r2, [r3]
   3c2f8:	ldr	r5, [r4, #32]
   3c2fc:	sub	r5, r5, #1
   3c300:	str	r5, [r4, #32]
   3c304:	ldrb	r3, [r4, #25]
   3c308:	mul	r5, r5, r3
   3c30c:	ldr	r0, [r4, #20]
   3c310:	add	r3, r0, r5
   3c314:	ldr	r2, [r4, #16]
   3c318:	cmp	r2, r3
   3c31c:	bcc	3c33c <flatcc_json_printer_struct_as_nested_root@@Base+0x144>
   3c320:	mov	r2, r5
   3c324:	mov	r1, #32
   3c328:	bl	145c4 <memset@plt>
   3c32c:	ldr	r3, [r4, #20]
   3c330:	add	r5, r3, r5
   3c334:	str	r5, [r4, #20]
   3c338:	b	3c2cc <flatcc_json_printer_struct_as_nested_root@@Base+0xd4>
   3c33c:	mov	r1, r5
   3c340:	mov	r0, r4
   3c344:	bl	30c6c <flatcc_json_parser_struct_as_root@@Base+0x145c>
   3c348:	b	3c2cc <flatcc_json_printer_struct_as_nested_root@@Base+0xd4>

0003c34c <flatcc_json_printer_table_as_nested_root@@Base>:
   3c34c:	add	r2, r2, #2
   3c350:	lsl	r2, r2, #1
   3c354:	ldr	ip, [r1, #8]
   3c358:	cmp	r2, ip
   3c35c:	bxge	lr
   3c360:	ldr	ip, [r1, #4]
   3c364:	ldrh	r2, [ip, r2]
   3c368:	cmp	r2, #0
   3c36c:	bxeq	lr
   3c370:	push	{r4, r5, r6, r7, r8, lr}
   3c374:	sub	sp, sp, #24
   3c378:	ldr	lr, [r1]
   3c37c:	adds	ip, lr, r2
   3c380:	beq	3c404 <flatcc_json_printer_table_as_nested_root@@Base+0xb8>
   3c384:	mov	r6, r3
   3c388:	mov	r5, r1
   3c38c:	mov	r4, r0
   3c390:	ldr	r2, [lr, r2]
   3c394:	add	r8, ip, r2
   3c398:	add	r7, r8, #4
   3c39c:	ldr	r3, [sp, #52]	; 0x34
   3c3a0:	ldr	r2, [ip, r2]
   3c3a4:	mov	r1, r7
   3c3a8:	bl	30d6c <flatcc_json_parser_struct_as_root@@Base+0x155c>
   3c3ac:	cmp	r0, #0
   3c3b0:	beq	3c404 <flatcc_json_printer_table_as_nested_root@@Base+0xb8>
   3c3b4:	ldr	r3, [r5, #16]
   3c3b8:	add	r2, r3, #1
   3c3bc:	str	r2, [r5, #16]
   3c3c0:	cmp	r3, #0
   3c3c4:	ldrne	r3, [r4, #20]
   3c3c8:	addne	r2, r3, #1
   3c3cc:	strne	r2, [r4, #20]
   3c3d0:	movne	r2, #44	; 0x2c
   3c3d4:	strbne	r2, [r3]
   3c3d8:	ldr	r2, [sp, #48]	; 0x30
   3c3dc:	mov	r1, r6
   3c3e0:	mov	r0, r4
   3c3e4:	bl	311d0 <flatcc_json_parser_struct_as_root@@Base+0x19c0>
   3c3e8:	ldr	r3, [r5, #12]
   3c3ec:	subs	r3, r3, #1
   3c3f0:	bne	3c40c <flatcc_json_printer_table_as_nested_root@@Base+0xc0>
   3c3f4:	ldr	r3, [r4, #36]	; 0x24
   3c3f8:	cmp	r3, #0
   3c3fc:	moveq	r3, #2
   3c400:	streq	r3, [r4, #36]	; 0x24
   3c404:	add	sp, sp, #24
   3c408:	pop	{r4, r5, r6, r7, r8, pc}
   3c40c:	ldr	r0, [r8, #4]
   3c410:	add	r2, r7, r0
   3c414:	ldr	r1, [r4, #32]
   3c418:	add	r1, r1, #1
   3c41c:	str	r1, [r4, #32]
   3c420:	ldr	r1, [r4, #20]
   3c424:	add	ip, r1, #1
   3c428:	str	ip, [r4, #20]
   3c42c:	mov	ip, #123	; 0x7b
   3c430:	strb	ip, [r1]
   3c434:	mov	r1, #0
   3c438:	str	r1, [sp, #20]
   3c43c:	str	r3, [sp, #16]
   3c440:	str	r2, [sp, #4]
   3c444:	ldr	r3, [r7, r0]
   3c448:	sub	r3, r2, r3
   3c44c:	str	r3, [sp, #8]
   3c450:	ldrh	r3, [r3]
   3c454:	str	r3, [sp, #12]
   3c458:	add	r1, sp, #4
   3c45c:	mov	r0, r4
   3c460:	ldr	r3, [sp, #56]	; 0x38
   3c464:	blx	r3
   3c468:	ldrb	r3, [r4, #25]
   3c46c:	cmp	r3, #0
   3c470:	bne	3c48c <flatcc_json_printer_table_as_nested_root@@Base+0x140>
   3c474:	ldr	r3, [r4, #20]
   3c478:	add	r2, r3, #1
   3c47c:	str	r2, [r4, #20]
   3c480:	mov	r2, #125	; 0x7d
   3c484:	strb	r2, [r3]
   3c488:	b	3c404 <flatcc_json_printer_table_as_nested_root@@Base+0xb8>
   3c48c:	ldr	r3, [r4, #20]
   3c490:	add	r2, r3, #1
   3c494:	str	r2, [r4, #20]
   3c498:	mov	r2, #10
   3c49c:	strb	r2, [r3]
   3c4a0:	ldr	r3, [r4, #32]
   3c4a4:	sub	r3, r3, #1
   3c4a8:	str	r3, [r4, #32]
   3c4ac:	mov	r0, r4
   3c4b0:	bl	30d18 <flatcc_json_parser_struct_as_root@@Base+0x1508>
   3c4b4:	b	3c474 <flatcc_json_printer_table_as_nested_root@@Base+0x128>

0003c4b8 <flatcc_json_printer_init@@Base>:
   3c4b8:	push	{r4, r5, r6, lr}
   3c4bc:	mov	r4, r0
   3c4c0:	mov	r5, r1
   3c4c4:	mov	r2, #48	; 0x30
   3c4c8:	mov	r1, #0
   3c4cc:	bl	145c4 <memset@plt>
   3c4d0:	cmp	r5, #0
   3c4d4:	ldreq	r3, [pc, #84]	; 3c530 <flatcc_json_printer_init@@Base+0x78>
   3c4d8:	ldreq	r5, [r3]
   3c4dc:	str	r5, [r4, #40]	; 0x28
   3c4e0:	ldr	r3, [pc, #76]	; 3c534 <flatcc_json_printer_init@@Base+0x7c>
   3c4e4:	str	r3, [r4, #44]	; 0x2c
   3c4e8:	ldr	r0, [pc, #72]	; 3c538 <flatcc_json_printer_init@@Base+0x80>
   3c4ec:	bl	1457c <malloc@plt>
   3c4f0:	str	r0, [r4]
   3c4f4:	cmp	r0, #0
   3c4f8:	beq	3c528 <flatcc_json_printer_init@@Base+0x70>
   3c4fc:	mov	r3, #1
   3c500:	strb	r3, [r4, #24]
   3c504:	ldr	r3, [pc, #44]	; 3c538 <flatcc_json_printer_init@@Base+0x80>
   3c508:	str	r3, [r4, #4]
   3c50c:	mov	r3, #16384	; 0x4000
   3c510:	str	r3, [r4, #8]
   3c514:	str	r0, [r4, #20]
   3c518:	add	r0, r0, r3
   3c51c:	str	r0, [r4, #16]
   3c520:	mov	r0, #0
   3c524:	pop	{r4, r5, r6, pc}
   3c528:	mvn	r0, #0
   3c52c:	pop	{r4, r5, r6, pc}
   3c530:	andeq	r3, r5, r4, asr #6
   3c534:	andeq	r0, r3, r8, lsr #28
   3c538:	andeq	r4, r0, r0, asr #32

0003c53c <flatcc_json_printer_init_buffer@@Base>:
   3c53c:	push	{r4, r5, r6, lr}
   3c540:	cmp	r2, #63	; 0x3f
   3c544:	bls	3c58c <flatcc_json_printer_init_buffer@@Base+0x50>
   3c548:	mov	r4, r0
   3c54c:	mov	r6, r1
   3c550:	mov	r5, r2
   3c554:	mov	r2, #48	; 0x30
   3c558:	mov	r1, #0
   3c55c:	bl	145c4 <memset@plt>
   3c560:	str	r6, [r4]
   3c564:	str	r5, [r4, #4]
   3c568:	sub	r5, r5, #64	; 0x40
   3c56c:	str	r5, [r4, #8]
   3c570:	str	r6, [r4, #20]
   3c574:	add	r5, r6, r5
   3c578:	str	r5, [r4, #16]
   3c57c:	ldr	r3, [pc, #28]	; 3c5a0 <flatcc_json_printer_init_buffer@@Base+0x64>
   3c580:	str	r3, [r4, #44]	; 0x2c
   3c584:	mov	r0, #0
   3c588:	pop	{r4, r5, r6, pc}
   3c58c:	ldr	r3, [pc, #16]	; 3c5a4 <flatcc_json_printer_init_buffer@@Base+0x68>
   3c590:	ldr	r2, [pc, #16]	; 3c5a8 <flatcc_json_printer_init_buffer@@Base+0x6c>
   3c594:	ldr	r1, [pc, #16]	; 3c5ac <flatcc_json_printer_init_buffer@@Base+0x70>
   3c598:	ldr	r0, [pc, #16]	; 3c5b0 <flatcc_json_printer_init_buffer@@Base+0x74>
   3c59c:	bl	14618 <__assert_fail@plt>
   3c5a0:	andeq	r0, r3, ip, asr #20
   3c5a4:	andeq	r2, r4, ip, ror #10
   3c5a8:	andeq	r0, r0, sp, lsl #9
   3c5ac:	andeq	r2, r4, r4, lsl r6
   3c5b0:	muleq	r4, ip, r7

0003c5b4 <flatcc_json_printer_init_dynamic_buffer@@Base>:
   3c5b4:	push	{r4, r5, r6, lr}
   3c5b8:	mov	r5, r0
   3c5bc:	cmp	r1, #0
   3c5c0:	moveq	r1, #4096	; 0x1000
   3c5c4:	cmp	r1, #64	; 0x40
   3c5c8:	movcs	r4, r1
   3c5cc:	movcc	r4, #64	; 0x40
   3c5d0:	mov	r2, #48	; 0x30
   3c5d4:	mov	r1, #0
   3c5d8:	bl	145c4 <memset@plt>
   3c5dc:	mov	r0, r4
   3c5e0:	bl	1457c <malloc@plt>
   3c5e4:	str	r0, [r5]
   3c5e8:	mov	r3, #1
   3c5ec:	strb	r3, [r5, #24]
   3c5f0:	str	r4, [r5, #4]
   3c5f4:	sub	r1, r4, #64	; 0x40
   3c5f8:	str	r1, [r5, #8]
   3c5fc:	str	r0, [r5, #20]
   3c600:	add	r1, r0, r1
   3c604:	str	r1, [r5, #16]
   3c608:	ldr	r3, [pc, #52]	; 3c644 <flatcc_json_printer_init_dynamic_buffer@@Base+0x90>
   3c60c:	str	r3, [r5, #44]	; 0x2c
   3c610:	cmp	r0, #0
   3c614:	beq	3c620 <flatcc_json_printer_init_dynamic_buffer@@Base+0x6c>
   3c618:	mov	r0, #0
   3c61c:	pop	{r4, r5, r6, pc}
   3c620:	ldr	r3, [r5, #36]	; 0x24
   3c624:	cmp	r3, #0
   3c628:	bne	3c63c <flatcc_json_printer_init_dynamic_buffer@@Base+0x88>
   3c62c:	mov	r3, #3
   3c630:	str	r3, [r5, #36]	; 0x24
   3c634:	mvn	r0, #0
   3c638:	pop	{r4, r5, r6, pc}
   3c63c:	mvn	r0, #0
   3c640:	pop	{r4, r5, r6, pc}
   3c644:	ldrdeq	r0, [r3], -r4

0003c648 <flatcc_json_printer_get_buffer@@Base>:
   3c648:	push	{r4, r5, r6, lr}
   3c64c:	mov	r4, r0
   3c650:	mov	r5, r1
   3c654:	ldr	r3, [r0, #44]	; 0x2c
   3c658:	mov	r1, #0
   3c65c:	blx	r3
   3c660:	cmp	r5, #0
   3c664:	ldrne	r3, [r4, #20]
   3c668:	ldrne	r2, [r4]
   3c66c:	subne	r3, r3, r2
   3c670:	strne	r3, [r5]
   3c674:	ldr	r0, [r4]
   3c678:	pop	{r4, r5, r6, pc}

0003c67c <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   3c67c:	push	{r4, r5, r6, lr}
   3c680:	mov	r5, r0
   3c684:	bl	3c648 <flatcc_json_printer_get_buffer@@Base>
   3c688:	mov	r4, r0
   3c68c:	mov	r2, #48	; 0x30
   3c690:	mov	r1, #0
   3c694:	mov	r0, r5
   3c698:	bl	145c4 <memset@plt>
   3c69c:	mov	r0, r4
   3c6a0:	pop	{r4, r5, r6, pc}

0003c6a4 <flatcc_json_printer_clear@@Base>:
   3c6a4:	push	{r4, lr}
   3c6a8:	mov	r4, r0
   3c6ac:	ldrb	r3, [r0, #24]
   3c6b0:	cmp	r3, #0
   3c6b4:	beq	3c6c8 <flatcc_json_printer_clear@@Base+0x24>
   3c6b8:	ldr	r0, [r0]
   3c6bc:	cmp	r0, #0
   3c6c0:	beq	3c6c8 <flatcc_json_printer_clear@@Base+0x24>
   3c6c4:	bl	14540 <free@plt>
   3c6c8:	mov	r2, #48	; 0x30
   3c6cc:	mov	r1, #0
   3c6d0:	mov	r0, r4
   3c6d4:	bl	145c4 <memset@plt>
   3c6d8:	pop	{r4, pc}
   3c6dc:	subs	r2, r1, #1
   3c6e0:	bxeq	lr
   3c6e4:	bcc	3c8bc <flatcc_json_printer_clear@@Base+0x218>
   3c6e8:	cmp	r0, r1
   3c6ec:	bls	3c8a0 <flatcc_json_printer_clear@@Base+0x1fc>
   3c6f0:	tst	r1, r2
   3c6f4:	beq	3c8ac <flatcc_json_printer_clear@@Base+0x208>
   3c6f8:	clz	r3, r0
   3c6fc:	clz	r2, r1
   3c700:	sub	r3, r2, r3
   3c704:	rsbs	r3, r3, #31
   3c708:	addne	r3, r3, r3, lsl #1
   3c70c:	mov	r2, #0
   3c710:	addne	pc, pc, r3, lsl #2
   3c714:	nop			; (mov r0, r0)
   3c718:	cmp	r0, r1, lsl #31
   3c71c:	adc	r2, r2, r2
   3c720:	subcs	r0, r0, r1, lsl #31
   3c724:	cmp	r0, r1, lsl #30
   3c728:	adc	r2, r2, r2
   3c72c:	subcs	r0, r0, r1, lsl #30
   3c730:	cmp	r0, r1, lsl #29
   3c734:	adc	r2, r2, r2
   3c738:	subcs	r0, r0, r1, lsl #29
   3c73c:	cmp	r0, r1, lsl #28
   3c740:	adc	r2, r2, r2
   3c744:	subcs	r0, r0, r1, lsl #28
   3c748:	cmp	r0, r1, lsl #27
   3c74c:	adc	r2, r2, r2
   3c750:	subcs	r0, r0, r1, lsl #27
   3c754:	cmp	r0, r1, lsl #26
   3c758:	adc	r2, r2, r2
   3c75c:	subcs	r0, r0, r1, lsl #26
   3c760:	cmp	r0, r1, lsl #25
   3c764:	adc	r2, r2, r2
   3c768:	subcs	r0, r0, r1, lsl #25
   3c76c:	cmp	r0, r1, lsl #24
   3c770:	adc	r2, r2, r2
   3c774:	subcs	r0, r0, r1, lsl #24
   3c778:	cmp	r0, r1, lsl #23
   3c77c:	adc	r2, r2, r2
   3c780:	subcs	r0, r0, r1, lsl #23
   3c784:	cmp	r0, r1, lsl #22
   3c788:	adc	r2, r2, r2
   3c78c:	subcs	r0, r0, r1, lsl #22
   3c790:	cmp	r0, r1, lsl #21
   3c794:	adc	r2, r2, r2
   3c798:	subcs	r0, r0, r1, lsl #21
   3c79c:	cmp	r0, r1, lsl #20
   3c7a0:	adc	r2, r2, r2
   3c7a4:	subcs	r0, r0, r1, lsl #20
   3c7a8:	cmp	r0, r1, lsl #19
   3c7ac:	adc	r2, r2, r2
   3c7b0:	subcs	r0, r0, r1, lsl #19
   3c7b4:	cmp	r0, r1, lsl #18
   3c7b8:	adc	r2, r2, r2
   3c7bc:	subcs	r0, r0, r1, lsl #18
   3c7c0:	cmp	r0, r1, lsl #17
   3c7c4:	adc	r2, r2, r2
   3c7c8:	subcs	r0, r0, r1, lsl #17
   3c7cc:	cmp	r0, r1, lsl #16
   3c7d0:	adc	r2, r2, r2
   3c7d4:	subcs	r0, r0, r1, lsl #16
   3c7d8:	cmp	r0, r1, lsl #15
   3c7dc:	adc	r2, r2, r2
   3c7e0:	subcs	r0, r0, r1, lsl #15
   3c7e4:	cmp	r0, r1, lsl #14
   3c7e8:	adc	r2, r2, r2
   3c7ec:	subcs	r0, r0, r1, lsl #14
   3c7f0:	cmp	r0, r1, lsl #13
   3c7f4:	adc	r2, r2, r2
   3c7f8:	subcs	r0, r0, r1, lsl #13
   3c7fc:	cmp	r0, r1, lsl #12
   3c800:	adc	r2, r2, r2
   3c804:	subcs	r0, r0, r1, lsl #12
   3c808:	cmp	r0, r1, lsl #11
   3c80c:	adc	r2, r2, r2
   3c810:	subcs	r0, r0, r1, lsl #11
   3c814:	cmp	r0, r1, lsl #10
   3c818:	adc	r2, r2, r2
   3c81c:	subcs	r0, r0, r1, lsl #10
   3c820:	cmp	r0, r1, lsl #9
   3c824:	adc	r2, r2, r2
   3c828:	subcs	r0, r0, r1, lsl #9
   3c82c:	cmp	r0, r1, lsl #8
   3c830:	adc	r2, r2, r2
   3c834:	subcs	r0, r0, r1, lsl #8
   3c838:	cmp	r0, r1, lsl #7
   3c83c:	adc	r2, r2, r2
   3c840:	subcs	r0, r0, r1, lsl #7
   3c844:	cmp	r0, r1, lsl #6
   3c848:	adc	r2, r2, r2
   3c84c:	subcs	r0, r0, r1, lsl #6
   3c850:	cmp	r0, r1, lsl #5
   3c854:	adc	r2, r2, r2
   3c858:	subcs	r0, r0, r1, lsl #5
   3c85c:	cmp	r0, r1, lsl #4
   3c860:	adc	r2, r2, r2
   3c864:	subcs	r0, r0, r1, lsl #4
   3c868:	cmp	r0, r1, lsl #3
   3c86c:	adc	r2, r2, r2
   3c870:	subcs	r0, r0, r1, lsl #3
   3c874:	cmp	r0, r1, lsl #2
   3c878:	adc	r2, r2, r2
   3c87c:	subcs	r0, r0, r1, lsl #2
   3c880:	cmp	r0, r1, lsl #1
   3c884:	adc	r2, r2, r2
   3c888:	subcs	r0, r0, r1, lsl #1
   3c88c:	cmp	r0, r1
   3c890:	adc	r2, r2, r2
   3c894:	subcs	r0, r0, r1
   3c898:	mov	r0, r2
   3c89c:	bx	lr
   3c8a0:	moveq	r0, #1
   3c8a4:	movne	r0, #0
   3c8a8:	bx	lr
   3c8ac:	clz	r2, r1
   3c8b0:	rsb	r2, r2, #31
   3c8b4:	lsr	r0, r0, r2
   3c8b8:	bx	lr
   3c8bc:	cmp	r0, #0
   3c8c0:	mvnne	r0, #0
   3c8c4:	b	3cf2c <flatcc_json_printer_clear@@Base+0x888>
   3c8c8:	cmp	r1, #0
   3c8cc:	beq	3c8bc <flatcc_json_printer_clear@@Base+0x218>
   3c8d0:	push	{r0, r1, lr}
   3c8d4:	bl	3c6dc <flatcc_json_printer_clear@@Base+0x38>
   3c8d8:	pop	{r1, r2, lr}
   3c8dc:	mul	r3, r2, r0
   3c8e0:	sub	r1, r1, r3
   3c8e4:	bx	lr
   3c8e8:	eor	r1, r1, #-2147483648	; 0x80000000
   3c8ec:	b	3c8f4 <flatcc_json_printer_clear@@Base+0x250>
   3c8f0:	eor	r3, r3, #-2147483648	; 0x80000000
   3c8f4:	push	{r4, r5, lr}
   3c8f8:	lsl	r4, r1, #1
   3c8fc:	lsl	r5, r3, #1
   3c900:	teq	r4, r5
   3c904:	teqeq	r0, r2
   3c908:	orrsne	ip, r4, r0
   3c90c:	orrsne	ip, r5, r2
   3c910:	mvnsne	ip, r4, asr #21
   3c914:	mvnsne	ip, r5, asr #21
   3c918:	beq	3cb04 <flatcc_json_printer_clear@@Base+0x460>
   3c91c:	lsr	r4, r4, #21
   3c920:	rsbs	r5, r4, r5, lsr #21
   3c924:	rsblt	r5, r5, #0
   3c928:	ble	3c948 <flatcc_json_printer_clear@@Base+0x2a4>
   3c92c:	add	r4, r4, r5
   3c930:	eor	r2, r0, r2
   3c934:	eor	r3, r1, r3
   3c938:	eor	r0, r2, r0
   3c93c:	eor	r1, r3, r1
   3c940:	eor	r2, r0, r2
   3c944:	eor	r3, r1, r3
   3c948:	cmp	r5, #54	; 0x36
   3c94c:	pophi	{r4, r5, pc}
   3c950:	tst	r1, #-2147483648	; 0x80000000
   3c954:	lsl	r1, r1, #12
   3c958:	mov	ip, #1048576	; 0x100000
   3c95c:	orr	r1, ip, r1, lsr #12
   3c960:	beq	3c96c <flatcc_json_printer_clear@@Base+0x2c8>
   3c964:	rsbs	r0, r0, #0
   3c968:	rsc	r1, r1, #0
   3c96c:	tst	r3, #-2147483648	; 0x80000000
   3c970:	lsl	r3, r3, #12
   3c974:	orr	r3, ip, r3, lsr #12
   3c978:	beq	3c984 <flatcc_json_printer_clear@@Base+0x2e0>
   3c97c:	rsbs	r2, r2, #0
   3c980:	rsc	r3, r3, #0
   3c984:	teq	r4, r5
   3c988:	beq	3caec <flatcc_json_printer_clear@@Base+0x448>
   3c98c:	sub	r4, r4, #1
   3c990:	rsbs	lr, r5, #32
   3c994:	blt	3c9b0 <flatcc_json_printer_clear@@Base+0x30c>
   3c998:	lsl	ip, r2, lr
   3c99c:	adds	r0, r0, r2, lsr r5
   3c9a0:	adc	r1, r1, #0
   3c9a4:	adds	r0, r0, r3, lsl lr
   3c9a8:	adcs	r1, r1, r3, asr r5
   3c9ac:	b	3c9cc <flatcc_json_printer_clear@@Base+0x328>
   3c9b0:	sub	r5, r5, #32
   3c9b4:	add	lr, lr, #32
   3c9b8:	cmp	r2, #1
   3c9bc:	lsl	ip, r3, lr
   3c9c0:	orrcs	ip, ip, #2
   3c9c4:	adds	r0, r0, r3, asr r5
   3c9c8:	adcs	r1, r1, r3, asr #31
   3c9cc:	and	r5, r1, #-2147483648	; 0x80000000
   3c9d0:	bpl	3c9e0 <flatcc_json_printer_clear@@Base+0x33c>
   3c9d4:	rsbs	ip, ip, #0
   3c9d8:	rscs	r0, r0, #0
   3c9dc:	rsc	r1, r1, #0
   3c9e0:	cmp	r1, #1048576	; 0x100000
   3c9e4:	bcc	3ca24 <flatcc_json_printer_clear@@Base+0x380>
   3c9e8:	cmp	r1, #2097152	; 0x200000
   3c9ec:	bcc	3ca0c <flatcc_json_printer_clear@@Base+0x368>
   3c9f0:	lsrs	r1, r1, #1
   3c9f4:	rrxs	r0, r0
   3c9f8:	rrx	ip, ip
   3c9fc:	add	r4, r4, #1
   3ca00:	lsl	r2, r4, #21
   3ca04:	cmn	r2, #4194304	; 0x400000
   3ca08:	bcs	3cb64 <flatcc_json_printer_clear@@Base+0x4c0>
   3ca0c:	cmp	ip, #-2147483648	; 0x80000000
   3ca10:	lsrseq	ip, r0, #1
   3ca14:	adcs	r0, r0, #0
   3ca18:	adc	r1, r1, r4, lsl #20
   3ca1c:	orr	r1, r1, r5
   3ca20:	pop	{r4, r5, pc}
   3ca24:	lsls	ip, ip, #1
   3ca28:	adcs	r0, r0, r0
   3ca2c:	adc	r1, r1, r1
   3ca30:	tst	r1, #1048576	; 0x100000
   3ca34:	sub	r4, r4, #1
   3ca38:	bne	3ca0c <flatcc_json_printer_clear@@Base+0x368>
   3ca3c:	teq	r1, #0
   3ca40:	moveq	r1, r0
   3ca44:	moveq	r0, #0
   3ca48:	clz	r3, r1
   3ca4c:	addeq	r3, r3, #32
   3ca50:	sub	r3, r3, #11
   3ca54:	subs	r2, r3, #32
   3ca58:	bge	3ca7c <flatcc_json_printer_clear@@Base+0x3d8>
   3ca5c:	adds	r2, r2, #12
   3ca60:	ble	3ca78 <flatcc_json_printer_clear@@Base+0x3d4>
   3ca64:	add	ip, r2, #20
   3ca68:	rsb	r2, r2, #12
   3ca6c:	lsl	r0, r1, ip
   3ca70:	lsr	r1, r1, r2
   3ca74:	b	3ca8c <flatcc_json_printer_clear@@Base+0x3e8>
   3ca78:	add	r2, r2, #20
   3ca7c:	rsble	ip, r2, #32
   3ca80:	lsl	r1, r1, r2
   3ca84:	orrle	r1, r1, r0, lsr ip
   3ca88:	lslle	r0, r0, r2
   3ca8c:	subs	r4, r4, r3
   3ca90:	addge	r1, r1, r4, lsl #20
   3ca94:	orrge	r1, r1, r5
   3ca98:	popge	{r4, r5, pc}
   3ca9c:	mvn	r4, r4
   3caa0:	subs	r4, r4, #31
   3caa4:	bge	3cae0 <flatcc_json_printer_clear@@Base+0x43c>
   3caa8:	adds	r4, r4, #12
   3caac:	bgt	3cac8 <flatcc_json_printer_clear@@Base+0x424>
   3cab0:	add	r4, r4, #20
   3cab4:	rsb	r2, r4, #32
   3cab8:	lsr	r0, r0, r4
   3cabc:	orr	r0, r0, r1, lsl r2
   3cac0:	orr	r1, r5, r1, lsr r4
   3cac4:	pop	{r4, r5, pc}
   3cac8:	rsb	r4, r4, #12
   3cacc:	rsb	r2, r4, #32
   3cad0:	lsr	r0, r0, r2
   3cad4:	orr	r0, r0, r1, lsl r4
   3cad8:	mov	r1, r5
   3cadc:	pop	{r4, r5, pc}
   3cae0:	lsr	r0, r1, r4
   3cae4:	mov	r1, r5
   3cae8:	pop	{r4, r5, pc}
   3caec:	teq	r4, #0
   3caf0:	eor	r3, r3, #1048576	; 0x100000
   3caf4:	eoreq	r1, r1, #1048576	; 0x100000
   3caf8:	addeq	r4, r4, #1
   3cafc:	subne	r5, r5, #1
   3cb00:	b	3c98c <flatcc_json_printer_clear@@Base+0x2e8>
   3cb04:	mvns	ip, r4, asr #21
   3cb08:	mvnsne	ip, r5, asr #21
   3cb0c:	beq	3cb74 <flatcc_json_printer_clear@@Base+0x4d0>
   3cb10:	teq	r4, r5
   3cb14:	teqeq	r0, r2
   3cb18:	beq	3cb2c <flatcc_json_printer_clear@@Base+0x488>
   3cb1c:	orrs	ip, r4, r0
   3cb20:	moveq	r1, r3
   3cb24:	moveq	r0, r2
   3cb28:	pop	{r4, r5, pc}
   3cb2c:	teq	r1, r3
   3cb30:	movne	r1, #0
   3cb34:	movne	r0, #0
   3cb38:	popne	{r4, r5, pc}
   3cb3c:	lsrs	ip, r4, #21
   3cb40:	bne	3cb54 <flatcc_json_printer_clear@@Base+0x4b0>
   3cb44:	lsls	r0, r0, #1
   3cb48:	adcs	r1, r1, r1
   3cb4c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   3cb50:	pop	{r4, r5, pc}
   3cb54:	adds	r4, r4, #4194304	; 0x400000
   3cb58:	addcc	r1, r1, #1048576	; 0x100000
   3cb5c:	popcc	{r4, r5, pc}
   3cb60:	and	r5, r1, #-2147483648	; 0x80000000
   3cb64:	orr	r1, r5, #2130706432	; 0x7f000000
   3cb68:	orr	r1, r1, #15728640	; 0xf00000
   3cb6c:	mov	r0, #0
   3cb70:	pop	{r4, r5, pc}
   3cb74:	mvns	ip, r4, asr #21
   3cb78:	movne	r1, r3
   3cb7c:	movne	r0, r2
   3cb80:	mvnseq	ip, r5, asr #21
   3cb84:	movne	r3, r1
   3cb88:	movne	r2, r0
   3cb8c:	orrs	r4, r0, r1, lsl #12
   3cb90:	orrseq	r5, r2, r3, lsl #12
   3cb94:	teqeq	r1, r3
   3cb98:	orrne	r1, r1, #524288	; 0x80000
   3cb9c:	pop	{r4, r5, pc}
   3cba0:	teq	r0, #0
   3cba4:	moveq	r1, #0
   3cba8:	bxeq	lr
   3cbac:	push	{r4, r5, lr}
   3cbb0:	mov	r4, #1024	; 0x400
   3cbb4:	add	r4, r4, #50	; 0x32
   3cbb8:	mov	r5, #0
   3cbbc:	mov	r1, #0
   3cbc0:	b	3ca3c <flatcc_json_printer_clear@@Base+0x398>
   3cbc4:	teq	r0, #0
   3cbc8:	moveq	r1, #0
   3cbcc:	bxeq	lr
   3cbd0:	push	{r4, r5, lr}
   3cbd4:	mov	r4, #1024	; 0x400
   3cbd8:	add	r4, r4, #50	; 0x32
   3cbdc:	ands	r5, r0, #-2147483648	; 0x80000000
   3cbe0:	rsbmi	r0, r0, #0
   3cbe4:	mov	r1, #0
   3cbe8:	b	3ca3c <flatcc_json_printer_clear@@Base+0x398>
   3cbec:	lsls	r2, r0, #1
   3cbf0:	asr	r1, r2, #3
   3cbf4:	rrx	r1, r1
   3cbf8:	lsl	r0, r2, #28
   3cbfc:	andsne	r3, r2, #-16777216	; 0xff000000
   3cc00:	teqne	r3, #-16777216	; 0xff000000
   3cc04:	eorne	r1, r1, #939524096	; 0x38000000
   3cc08:	bxne	lr
   3cc0c:	teq	r2, #0
   3cc10:	teqne	r3, #-16777216	; 0xff000000
   3cc14:	bxeq	lr
   3cc18:	push	{r4, r5, lr}
   3cc1c:	mov	r4, #896	; 0x380
   3cc20:	and	r5, r1, #-2147483648	; 0x80000000
   3cc24:	bic	r1, r1, #-2147483648	; 0x80000000
   3cc28:	b	3ca3c <flatcc_json_printer_clear@@Base+0x398>
   3cc2c:	orrs	r2, r0, r1
   3cc30:	bxeq	lr
   3cc34:	push	{r4, r5, lr}
   3cc38:	mov	r5, #0
   3cc3c:	b	3cc5c <flatcc_json_printer_clear@@Base+0x5b8>
   3cc40:	orrs	r2, r0, r1
   3cc44:	bxeq	lr
   3cc48:	push	{r4, r5, lr}
   3cc4c:	ands	r5, r1, #-2147483648	; 0x80000000
   3cc50:	bpl	3cc5c <flatcc_json_printer_clear@@Base+0x5b8>
   3cc54:	rsbs	r0, r0, #0
   3cc58:	rsc	r1, r1, #0
   3cc5c:	mov	r4, #1024	; 0x400
   3cc60:	add	r4, r4, #50	; 0x32
   3cc64:	lsrs	ip, r1, #22
   3cc68:	beq	3c9e0 <flatcc_json_printer_clear@@Base+0x33c>
   3cc6c:	mov	r2, #3
   3cc70:	lsrs	ip, ip, #3
   3cc74:	addne	r2, r2, #3
   3cc78:	lsrs	ip, ip, #3
   3cc7c:	addne	r2, r2, #3
   3cc80:	add	r2, r2, ip, lsr #3
   3cc84:	rsb	r3, r2, #32
   3cc88:	lsl	ip, r0, r3
   3cc8c:	lsr	r0, r0, r2
   3cc90:	orr	r0, r0, r1, lsl r3
   3cc94:	lsr	r1, r1, r2
   3cc98:	add	r4, r4, r2
   3cc9c:	b	3c9e0 <flatcc_json_printer_clear@@Base+0x33c>
   3cca0:	eor	r0, r0, #-2147483648	; 0x80000000
   3cca4:	b	3ccac <flatcc_json_printer_clear@@Base+0x608>
   3cca8:	eor	r1, r1, #-2147483648	; 0x80000000
   3ccac:	lsls	r2, r0, #1
   3ccb0:	lslsne	r3, r1, #1
   3ccb4:	teqne	r2, r3
   3ccb8:	mvnsne	ip, r2, asr #24
   3ccbc:	mvnsne	ip, r3, asr #24
   3ccc0:	beq	3cdb8 <flatcc_json_printer_clear@@Base+0x714>
   3ccc4:	lsr	r2, r2, #24
   3ccc8:	rsbs	r3, r2, r3, lsr #24
   3cccc:	addgt	r2, r2, r3
   3ccd0:	eorgt	r1, r0, r1
   3ccd4:	eorgt	r0, r1, r0
   3ccd8:	eorgt	r1, r0, r1
   3ccdc:	rsblt	r3, r3, #0
   3cce0:	cmp	r3, #25
   3cce4:	bxhi	lr
   3cce8:	tst	r0, #-2147483648	; 0x80000000
   3ccec:	orr	r0, r0, #8388608	; 0x800000
   3ccf0:	bic	r0, r0, #-16777216	; 0xff000000
   3ccf4:	rsbne	r0, r0, #0
   3ccf8:	tst	r1, #-2147483648	; 0x80000000
   3ccfc:	orr	r1, r1, #8388608	; 0x800000
   3cd00:	bic	r1, r1, #-16777216	; 0xff000000
   3cd04:	rsbne	r1, r1, #0
   3cd08:	teq	r2, r3
   3cd0c:	beq	3cda0 <flatcc_json_printer_clear@@Base+0x6fc>
   3cd10:	sub	r2, r2, #1
   3cd14:	adds	r0, r0, r1, asr r3
   3cd18:	rsb	r3, r3, #32
   3cd1c:	lsl	r1, r1, r3
   3cd20:	and	r3, r0, #-2147483648	; 0x80000000
   3cd24:	bpl	3cd30 <flatcc_json_printer_clear@@Base+0x68c>
   3cd28:	rsbs	r1, r1, #0
   3cd2c:	rsc	r0, r0, #0
   3cd30:	cmp	r0, #8388608	; 0x800000
   3cd34:	bcc	3cd68 <flatcc_json_printer_clear@@Base+0x6c4>
   3cd38:	cmp	r0, #16777216	; 0x1000000
   3cd3c:	bcc	3cd54 <flatcc_json_printer_clear@@Base+0x6b0>
   3cd40:	lsrs	r0, r0, #1
   3cd44:	rrx	r1, r1
   3cd48:	add	r2, r2, #1
   3cd4c:	cmp	r2, #254	; 0xfe
   3cd50:	bcs	3ce0c <flatcc_json_printer_clear@@Base+0x768>
   3cd54:	cmp	r1, #-2147483648	; 0x80000000
   3cd58:	adc	r0, r0, r2, lsl #23
   3cd5c:	biceq	r0, r0, #1
   3cd60:	orr	r0, r0, r3
   3cd64:	bx	lr
   3cd68:	lsls	r1, r1, #1
   3cd6c:	adc	r0, r0, r0
   3cd70:	tst	r0, #8388608	; 0x800000
   3cd74:	sub	r2, r2, #1
   3cd78:	bne	3cd54 <flatcc_json_printer_clear@@Base+0x6b0>
   3cd7c:	clz	ip, r0
   3cd80:	sub	ip, ip, #8
   3cd84:	subs	r2, r2, ip
   3cd88:	lsl	r0, r0, ip
   3cd8c:	addge	r0, r0, r2, lsl #23
   3cd90:	rsblt	r2, r2, #0
   3cd94:	orrge	r0, r0, r3
   3cd98:	orrlt	r0, r3, r0, lsr r2
   3cd9c:	bx	lr
   3cda0:	teq	r2, #0
   3cda4:	eor	r1, r1, #8388608	; 0x800000
   3cda8:	eoreq	r0, r0, #8388608	; 0x800000
   3cdac:	addeq	r2, r2, #1
   3cdb0:	subne	r3, r3, #1
   3cdb4:	b	3cd10 <flatcc_json_printer_clear@@Base+0x66c>
   3cdb8:	lsl	r3, r1, #1
   3cdbc:	mvns	ip, r2, asr #24
   3cdc0:	mvnsne	ip, r3, asr #24
   3cdc4:	beq	3ce18 <flatcc_json_printer_clear@@Base+0x774>
   3cdc8:	teq	r2, r3
   3cdcc:	beq	3cddc <flatcc_json_printer_clear@@Base+0x738>
   3cdd0:	teq	r2, #0
   3cdd4:	moveq	r0, r1
   3cdd8:	bx	lr
   3cddc:	teq	r0, r1
   3cde0:	movne	r0, #0
   3cde4:	bxne	lr
   3cde8:	tst	r2, #-16777216	; 0xff000000
   3cdec:	bne	3cdfc <flatcc_json_printer_clear@@Base+0x758>
   3cdf0:	lsls	r0, r0, #1
   3cdf4:	orrcs	r0, r0, #-2147483648	; 0x80000000
   3cdf8:	bx	lr
   3cdfc:	adds	r2, r2, #33554432	; 0x2000000
   3ce00:	addcc	r0, r0, #8388608	; 0x800000
   3ce04:	bxcc	lr
   3ce08:	and	r3, r0, #-2147483648	; 0x80000000
   3ce0c:	orr	r0, r3, #2130706432	; 0x7f000000
   3ce10:	orr	r0, r0, #8388608	; 0x800000
   3ce14:	bx	lr
   3ce18:	mvns	r2, r2, asr #24
   3ce1c:	movne	r0, r1
   3ce20:	mvnseq	r3, r3, asr #24
   3ce24:	movne	r1, r0
   3ce28:	lsls	r2, r0, #9
   3ce2c:	lslseq	r3, r1, #9
   3ce30:	teqeq	r0, r1
   3ce34:	orrne	r0, r0, #4194304	; 0x400000
   3ce38:	bx	lr
   3ce3c:	mov	r3, #0
   3ce40:	b	3ce4c <flatcc_json_printer_clear@@Base+0x7a8>
   3ce44:	ands	r3, r0, #-2147483648	; 0x80000000
   3ce48:	rsbmi	r0, r0, #0
   3ce4c:	movs	ip, r0
   3ce50:	bxeq	lr
   3ce54:	orr	r3, r3, #1258291200	; 0x4b000000
   3ce58:	mov	r1, r0
   3ce5c:	mov	r0, #0
   3ce60:	b	3cea4 <flatcc_json_printer_clear@@Base+0x800>
   3ce64:	orrs	r2, r0, r1
   3ce68:	bxeq	lr
   3ce6c:	mov	r3, #0
   3ce70:	b	3ce8c <flatcc_json_printer_clear@@Base+0x7e8>
   3ce74:	orrs	r2, r0, r1
   3ce78:	bxeq	lr
   3ce7c:	ands	r3, r1, #-2147483648	; 0x80000000
   3ce80:	bpl	3ce8c <flatcc_json_printer_clear@@Base+0x7e8>
   3ce84:	rsbs	r0, r0, #0
   3ce88:	rsc	r1, r1, #0
   3ce8c:	movs	ip, r1
   3ce90:	moveq	ip, r0
   3ce94:	moveq	r1, r0
   3ce98:	moveq	r0, #0
   3ce9c:	orr	r3, r3, #1526726656	; 0x5b000000
   3cea0:	subeq	r3, r3, #268435456	; 0x10000000
   3cea4:	sub	r3, r3, #8388608	; 0x800000
   3cea8:	clz	r2, ip
   3ceac:	subs	r2, r2, #8
   3ceb0:	sub	r3, r3, r2, lsl #23
   3ceb4:	blt	3ced4 <flatcc_json_printer_clear@@Base+0x830>
   3ceb8:	add	r3, r3, r1, lsl r2
   3cebc:	lsl	ip, r0, r2
   3cec0:	rsb	r2, r2, #32
   3cec4:	cmp	ip, #-2147483648	; 0x80000000
   3cec8:	adc	r0, r3, r0, lsr r2
   3cecc:	biceq	r0, r0, #1
   3ced0:	bx	lr
   3ced4:	add	r2, r2, #32
   3ced8:	lsl	ip, r1, r2
   3cedc:	rsb	r2, r2, #32
   3cee0:	orrs	r0, r0, ip, lsl #1
   3cee4:	adc	r0, r3, r1, lsr r2
   3cee8:	biceq	r0, r0, ip, lsr #31
   3ceec:	bx	lr
   3cef0:	cmp	r3, #0
   3cef4:	cmpeq	r2, #0
   3cef8:	bne	3cf10 <flatcc_json_printer_clear@@Base+0x86c>
   3cefc:	cmp	r1, #0
   3cf00:	cmpeq	r0, #0
   3cf04:	mvnne	r1, #0
   3cf08:	mvnne	r0, #0
   3cf0c:	b	3cf2c <flatcc_json_printer_clear@@Base+0x888>
   3cf10:	sub	sp, sp, #8
   3cf14:	push	{sp, lr}
   3cf18:	bl	3cf3c <flatcc_json_printer_clear@@Base+0x898>
   3cf1c:	ldr	lr, [sp, #4]
   3cf20:	add	sp, sp, #8
   3cf24:	pop	{r2, r3}
   3cf28:	bx	lr
   3cf2c:	push	{r1, lr}
   3cf30:	mov	r0, #8
   3cf34:	bl	1451c <raise@plt>
   3cf38:	pop	{r1, pc}
   3cf3c:	cmp	r1, r3
   3cf40:	push	{r4, r5, r6, r7, r8, r9, lr}
   3cf44:	cmpeq	r0, r2
   3cf48:	mov	r4, r0
   3cf4c:	mov	r5, r1
   3cf50:	ldr	r9, [sp, #28]
   3cf54:	movcc	r0, #0
   3cf58:	movcc	r1, #0
   3cf5c:	bcc	3d054 <flatcc_json_printer_clear@@Base+0x9b0>
   3cf60:	cmp	r3, #0
   3cf64:	clzeq	ip, r2
   3cf68:	clzne	ip, r3
   3cf6c:	addeq	ip, ip, #32
   3cf70:	cmp	r5, #0
   3cf74:	clzeq	r1, r4
   3cf78:	addeq	r1, r1, #32
   3cf7c:	clzne	r1, r5
   3cf80:	sub	ip, ip, r1
   3cf84:	sub	lr, ip, #32
   3cf88:	lsl	r7, r3, ip
   3cf8c:	rsb	r8, ip, #32
   3cf90:	orr	r7, r7, r2, lsl lr
   3cf94:	orr	r7, r7, r2, lsr r8
   3cf98:	lsl	r6, r2, ip
   3cf9c:	cmp	r5, r7
   3cfa0:	cmpeq	r4, r6
   3cfa4:	movcc	r0, #0
   3cfa8:	movcc	r1, #0
   3cfac:	bcc	3cfc8 <flatcc_json_printer_clear@@Base+0x924>
   3cfb0:	mov	r3, #1
   3cfb4:	subs	r4, r4, r6
   3cfb8:	lsl	r1, r3, lr
   3cfbc:	lsl	r0, r3, ip
   3cfc0:	orr	r1, r1, r3, lsr r8
   3cfc4:	sbc	r5, r5, r7
   3cfc8:	cmp	ip, #0
   3cfcc:	beq	3d054 <flatcc_json_printer_clear@@Base+0x9b0>
   3cfd0:	lsrs	r3, r7, #1
   3cfd4:	rrx	r2, r6
   3cfd8:	mov	r6, ip
   3cfdc:	b	3d000 <flatcc_json_printer_clear@@Base+0x95c>
   3cfe0:	subs	r4, r4, r2
   3cfe4:	sbc	r5, r5, r3
   3cfe8:	adds	r4, r4, r4
   3cfec:	adc	r5, r5, r5
   3cff0:	adds	r4, r4, #1
   3cff4:	adc	r5, r5, #0
   3cff8:	subs	r6, r6, #1
   3cffc:	beq	3d01c <flatcc_json_printer_clear@@Base+0x978>
   3d000:	cmp	r5, r3
   3d004:	cmpeq	r4, r2
   3d008:	bcs	3cfe0 <flatcc_json_printer_clear@@Base+0x93c>
   3d00c:	adds	r4, r4, r4
   3d010:	adc	r5, r5, r5
   3d014:	subs	r6, r6, #1
   3d018:	bne	3d000 <flatcc_json_printer_clear@@Base+0x95c>
   3d01c:	lsr	r6, r4, ip
   3d020:	lsr	r7, r5, ip
   3d024:	orr	r6, r6, r5, lsl r8
   3d028:	adds	r2, r0, r4
   3d02c:	orr	r6, r6, r5, lsr lr
   3d030:	adc	r3, r1, r5
   3d034:	lsl	r1, r7, ip
   3d038:	orr	r1, r1, r6, lsl lr
   3d03c:	lsl	r0, r6, ip
   3d040:	orr	r1, r1, r6, lsr r8
   3d044:	subs	r0, r2, r0
   3d048:	mov	r4, r6
   3d04c:	mov	r5, r7
   3d050:	sbc	r1, r3, r1
   3d054:	cmp	r9, #0
   3d058:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   3d05c:	strd	r4, [r9]
   3d060:	pop	{r4, r5, r6, r7, r8, r9, pc}

0003d064 <__libc_csu_init@@Base>:
   3d064:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3d068:	mov	r7, r0
   3d06c:	ldr	r6, [pc, #72]	; 3d0bc <__libc_csu_init@@Base+0x58>
   3d070:	ldr	r5, [pc, #72]	; 3d0c0 <__libc_csu_init@@Base+0x5c>
   3d074:	add	r6, pc, r6
   3d078:	add	r5, pc, r5
   3d07c:	sub	r6, r6, r5
   3d080:	mov	r8, r1
   3d084:	mov	r9, r2
   3d088:	bl	144fc <raise@plt-0x20>
   3d08c:	asrs	r6, r6, #2
   3d090:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d094:	mov	r4, #0
   3d098:	add	r4, r4, #1
   3d09c:	ldr	r3, [r5], #4
   3d0a0:	mov	r2, r9
   3d0a4:	mov	r1, r8
   3d0a8:	mov	r0, r7
   3d0ac:	blx	r3
   3d0b0:	cmp	r6, r4
   3d0b4:	bne	3d098 <__libc_csu_init@@Base+0x34>
   3d0b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3d0bc:	muleq	r1, r4, lr
   3d0c0:	andeq	r5, r1, ip, lsl #29

0003d0c4 <__libc_csu_fini@@Base>:
   3d0c4:	bx	lr

Disassembly of section .fini:

0003d0c8 <.fini>:
   3d0c8:	push	{r3, lr}
   3d0cc:	pop	{r3, pc}
